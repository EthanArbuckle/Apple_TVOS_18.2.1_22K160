uint64_t sub_1000E7978()
{
  return 0x2D4E5341502D4B50LL;
}

_UNKNOWN **static NANCipherSuite.allCases.getter()
{
  return &off_1003D6FB8;
}

uint64_t sub_1000E79B4@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = _s7CoreP2P14NANCipherSuiteO8rawValueACSgs5UInt8V_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_1000E79DC(void *a1@<X8>)
{
  *a1 = &off_1003D6FB8;
}

uint64_t sub_1000E79EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000E7ECC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000E7A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000E7ECC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000E7A94()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000E7ACC + 4 * byte_1003454A0[*v0]))( 0x312D4D43432D4B53LL,  0xEA00000000003832LL);
}

uint64_t sub_1000E7ACC()
{
  return 0x322D4D43472D4B53LL;
}

uint64_t sub_1000E7AE8()
{
  return 0x2D484457322D4B50LL;
}

uint64_t sub_1000E7B20()
{
  return 0x504D43432D4B5447LL;
}

uint64_t sub_1000E7B40()
{
  return 0x504D43472D4B5447LL;
}

uint64_t sub_1000E7B60()
{
  return 0x2D4E5341502D4B50LL;
}

BOOL static NANCipherSuite.< infix(_:_:)(char a1, char a2)
{
  return !a1 && a2 == 1;
}

BOOL static NANCipherSuite.> infix(_:_:)(char a1, char a2)
{
  return !a2 && a1 == 1;
}

BOOL sub_1000E7BB4(_BYTE *a1, _BYTE *a2)
{
  return *a2 == 1 && *a1 == 0;
}

BOOL sub_1000E7BCC(_BYTE *a1, _BYTE *a2)
{
  return *a1 != 1 || *a2 != 0;
}

BOOL sub_1000E7BE4(_BYTE *a1, _BYTE *a2)
{
  return *a2 != 1 || *a1 != 0;
}

BOOL sub_1000E7BFC(_BYTE *a1, _BYTE *a2)
{
  return *a1 == 1 && *a2 == 0;
}

uint64_t Collection<>.strongestSupportedSharedKeySuite.getter(uint64_t a1, uint64_t a2)
{
  return sub_1000E7C3C(a1, a2, (uint64_t)sub_1000E7C20);
}

BOOL sub_1000E7C20(unsigned __int8 *a1)
{
  return *a1 < 2u;
}

uint64_t Collection<>.strongestSupportedPublicKeySuite.getter(uint64_t a1, uint64_t a2)
{
  return sub_1000E7C3C(a1, a2, (uint64_t)sub_1000E7D1C);
}

uint64_t sub_1000E7C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = Sequence.filter(_:)(a3, 0LL, a1, *(void *)(a2 + 8));
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    uint64_t v11 = *(unsigned __int8 *)(v9 + 32);
    uint64_t v12 = v10 - 1;
    if (v12)
    {
      v13 = (unsigned __int8 *)(v9 + 33);
      do
      {
        int v15 = *v13++;
        int v14 = v15;
        unsigned int v16 = v11;
        if ((v11 & 0xFE) == 0) {
          unsigned int v16 = 1;
        }
        if (v14 == 1) {
          uint64_t v11 = v16;
        }
        else {
          uint64_t v11 = v11;
        }
        --v12;
      }

      while (v12);
    }
  }

  else
  {
    uint64_t v11 = 8LL;
  }

  swift_bridgeObjectRelease(v9);
  return v11;
}

BOOL sub_1000E7D1C(_BYTE *a1)
{
  return (*a1 & 0xFE) == 2;
}

uint64_t NANCipherSuite.init(apiCipherSuite:)(uint64_t a1)
{
  else {
    return a1 - 1;
  }
}

uint64_t InfrastructureQualityOfService.rawValue.getter(unsigned __int8 a1)
{
  return a1 + 1LL;
}

uint64_t _s7CoreP2P14NANCipherSuiteO8rawValueACSgs5UInt8V_tcfC_0(char a1)
{
  if (((a1 - 1) & 0xF8) != 0) {
    return 8LL;
  }
  else {
    return (a1 - 1);
  }
}

unint64_t sub_1000E7D6C()
{
  unint64_t result = qword_100407E70;
  if (!qword_100407E70)
  {
    uint64_t v1 = sub_1000022F8((uint64_t *)&unk_10040D460);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100407E70);
  }

  return result;
}

unint64_t sub_1000E7DBC()
{
  unint64_t result = qword_100407E78;
  if (!qword_100407E78)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANCipherSuite,  &type metadata for NANCipherSuite);
    atomic_store(result, (unint64_t *)&qword_100407E78);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for NANCipherSuite(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_1000E7E4C + 4 * byte_1003454AD[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1000E7E80 + 4 * byte_1003454A8[v4]))();
}

uint64_t sub_1000E7E80(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E7E88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000E7E90LL);
  }
  return result;
}

uint64_t sub_1000E7E9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000E7EA4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_1000E7EA8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E7EB0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANCipherSuite()
{
  return &type metadata for NANCipherSuite;
}

unint64_t sub_1000E7ECC()
{
  unint64_t result = qword_100407E80;
  if (!qword_100407E80)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANCipherSuite,  &type metadata for NANCipherSuite);
    atomic_store(result, (unint64_t *)&qword_100407E80);
  }

  return result;
}

void *sub_1000E7F10(uint64_t a1, uint64_t a2)
{
  int64_t v3 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v3)
  {
    sub_1000698F0(0, v3, 0);
    uint64_t v5 = a2;
    unint64_t result = _swiftEmptyArrayStorage;
    unint64_t v6 = (char *)(a1 + 38);
    do
    {
      int v7 = *(_DWORD *)(v6 - 6);
      int v8 = *(v6 - 2);
      int v9 = *(v6 - 1);
      char v10 = *v6;
      if (*(v6 - 2))
      {
        if (v8 != 1) {
          goto LABEL_19;
        }
        unint64_t v11 = *(unsigned int *)(v5 + 8) | ((unint64_t)*(unsigned __int16 *)(v5 + 12) << 32);
        if ((v11 & 0xFF00000000LL) == 0x300000000LL) {
          goto LABEL_19;
        }
        char v12 = *(_WORD *)(v5 + 12);
        int v13 = BYTE5(v11);
        if (*(_DWORD *)(v5 + 8) != v7) {
          goto LABEL_19;
        }
      }

      else
      {
        int v13 = *(unsigned __int8 *)(v5 + 5);
        char v12 = *(_BYTE *)(v5 + 4);
        if (*(_DWORD *)v5 != v7) {
          goto LABEL_19;
        }
      }

      if (v12)
      {
        if (v12 != 1) {
          goto LABEL_19;
        }
        int v14 = 16;
      }

      else
      {
        int v14 = 4;
      }

      if (*(v6 - 2)) {
        int v15 = 16;
      }
      else {
        int v15 = 4;
      }
      if (v14 == v15)
      {
        switch(v13)
        {
          case 2:
            BOOL v16 = v9 == 2;
            goto LABEL_31;
          case 3:
            BOOL v16 = v9 == 3;
            goto LABEL_31;
          case 4:
            BOOL v16 = v9 == 4;
            goto LABEL_31;
          case 5:
            BOOL v16 = v9 == 5;
            goto LABEL_31;
          case 6:
            BOOL v16 = v9 == 6;
LABEL_31:
            char v17 = v16;
            break;
          default:
            char v21 = v9 ^ ((v13 & 1) == 0);
            else {
              char v17 = 0;
            }
            break;
        }

        goto LABEL_20;
      }

void *sub_1000E8118(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v42 = *(void *)(a1 + 16);
    sub_1000698F0(0, v2, 0);
    uint64_t v4 = sub_10006C094(a1);
    uint64_t v6 = v42;
    uint64_t v5 = a1;
    uint64_t v7 = 0LL;
    uint64_t v8 = a1 + 64;
    char v9 = *(_BYTE *)(a1 + 32);
    uint64_t v10 = a1 + 88;
    uint64_t v11 = a2;
    do
    {
      if (v4 < 0 || v4 >= 1LL << v9)
      {
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        JUMPOUT(0x1000E846CLL);
      }

      unint64_t v13 = (unint64_t)v4 >> 6;
      if (*(_DWORD *)(v5 + 36) != (_DWORD)v3) {
        goto LABEL_52;
      }
      uint64_t v14 = *(void *)(v5 + 48) + 8 * v4;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int8 *)(v14 + 4);
      int v17 = *(unsigned __int8 *)(v14 + 5);
      char v18 = *(_BYTE *)(*(void *)(v5 + 56) + v4);
      if (*(_BYTE *)(v14 + 4))
      {
        if (v16 != 1) {
          goto LABEL_26;
        }
        unint64_t v19 = *(unsigned int *)(v11 + 8) | ((unint64_t)*(unsigned __int16 *)(v11 + 12) << 32);
        if ((v19 & 0xFF00000000LL) == 0x300000000LL) {
          goto LABEL_26;
        }
        char v20 = *(_WORD *)(v11 + 12);
        int v21 = BYTE5(v19);
        if (*(_DWORD *)(v11 + 8) != v15) {
          goto LABEL_26;
        }
      }

      else
      {
        int v21 = *(unsigned __int8 *)(v11 + 5);
        char v20 = *(_BYTE *)(v11 + 4);
        if (*(_DWORD *)v11 != v15) {
          goto LABEL_26;
        }
      }

      if (v20)
      {
        if (v20 != 1) {
          goto LABEL_26;
        }
        int v22 = 16;
      }

      else
      {
        int v22 = 4;
      }

      if (v16) {
        int v23 = 16;
      }
      else {
        int v23 = 4;
      }
      if (v22 != v23)
      {
LABEL_26:
        char v25 = 0;
        goto LABEL_27;
      }

      switch(v21)
      {
        case 2:
          BOOL v24 = v17 == 2;
          goto LABEL_45;
        case 3:
          BOOL v24 = v17 == 3;
          goto LABEL_45;
        case 4:
          BOOL v24 = v17 == 4;
          goto LABEL_45;
        case 5:
          BOOL v24 = v17 == 5;
          goto LABEL_45;
        case 6:
          BOOL v24 = v17 == 6;
LABEL_45:
          char v25 = v24;
          break;
        default:
          char v25 = v17 ^ ((v21 & 1) == 0);
          break;
      }

void *RadioResources.Priority.min.unsafeMutableAddressor()
{
  return &static RadioResources.Priority.min;
}

void *RadioResources.Priority.max.unsafeMutableAddressor()
{
  return &static RadioResources.Priority.max;
}

uint64_t static RadioResources.Priority.max.getter()
{
  return 12LL;
}

_UNKNOWN **static RadioResources.Priority.allCases.getter()
{
  return &off_1003D6FE0;
}

unint64_t sub_1000E84B0@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = _s7CoreP2P14RadioResourcesO8PriorityO8rawValueAESgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_1000E84D8(void *a1@<X8>)
{
  *a1 = &off_1003D6FE0;
}

uint64_t RadioResources.SymbolicChannel.Resolver.socialChannel(for:)(char a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v3 = 0x300000000LL;
  if (a1 == 1) {
    uint64_t v3 = a3;
  }
  return v3 & 0xFFFFFFFFFFFFLL;
}

unint64_t RadioResources.PreferredChannel.init(channel:usagePreference:isEqualToSocial:)( uint64_t a1, unsigned __int8 a2, char a3)
{
  uint64_t v3 = 0x100000000000000LL;
  if ((a3 & 1) == 0) {
    uint64_t v3 = 0LL;
  }
  return v3 & 0xFFFF000000000000LL | ((unint64_t)a2 << 48) | a1 & 0xFFFFFFFFFFFFLL;
}

uint64_t RadioResources.SymbolicChannel.Resolver.primaryChannel.setter(uint64_t a1)
{
  *(_DWORD *)uint64_t v1 = a1;
  *(_BYTE *)(v1 + 4) = BYTE4(a1);
  *(_BYTE *)(v1 + 5) = BYTE5(a1);
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = swift_bridgeObjectRetain(v2);
  uint64_t v4 = sub_1000E7F10(v3, v1);
  uint64_t result = swift_bridgeObjectRelease_n(v2, 2LL);
  *(void *)(v1 + 24) = v4;
  return result;
}

uint64_t (*RadioResources.SymbolicChannel.Resolver.primaryChannel.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  return sub_1000E85B0;
}

uint64_t NANBeacon.Metadata.channel.getter(uint64_t a1, uint64_t a2)
{
  return a2 & 0xFFFFFFFFFFFFLL;
}

uint64_t RadioResources.SymbolicChannel.Resolver.secondaryChannel.setter(uint64_t a1)
{
  *(_DWORD *)(v1 + 8) = a1;
  *(_WORD *)(v1 + 12) = WORD2(a1);
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = swift_bridgeObjectRetain(v2);
  uint64_t v4 = sub_1000E7F10(v3, v1);
  uint64_t result = swift_bridgeObjectRelease_n(v2, 2LL);
  *(void *)(v1 + 24) = v4;
  return result;
}

uint64_t (*RadioResources.SymbolicChannel.Resolver.secondaryChannel.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  return sub_1000E85B0;
}

uint64_t sub_1000E8634(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = *(void *)(result + 8);
    uint64_t v3 = *(void *)(v2 + 24);
    uint64_t v4 = swift_bridgeObjectRetain(v3);
    uint64_t v5 = sub_1000E7F10(v4, v2);
    uint64_t result = swift_bridgeObjectRelease_n(v3, 2LL);
    *(void *)(v2 + 24) = v5;
  }

  return result;
}

uint64_t RadioResources.SymbolicChannel.Resolver.infraChannel.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 16) = result;
  *(_WORD *)(v1 + 20) = WORD2(result);
  return result;
}

uint64_t NANDataResponseReceivedEvent.attributes.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_bridgeObjectRetain(a4);
}

uint64_t RadioResources.SymbolicChannel.Resolver.preferredChannels.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 24));
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t RadioResources.SymbolicChannel.Resolver.init(primaryChannel:secondaryChannel:infraChannel:preferredChannels:)( uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL;
}

Swift::Void __swiftcall RadioResources.SymbolicChannel.Resolver.update(preferredChannels:)( Swift::OpaquePointer preferredChannels)
{
  uint64_t v2 = sub_1000E8118((uint64_t)preferredChannels._rawValue, v1);
  uint64_t v4 = v2;
  swift_bridgeObjectRetain(v2);
  sub_1000E95C4((uint64_t *)&v4);
  swift_bridgeObjectRelease(v2);
  uint64_t v3 = (uint64_t)v4;
  swift_bridgeObjectRelease(*(void *)(v1 + 24));
  *(void *)(v1 + 24) = v3;
}

uint64_t RadioResources.SymbolicChannel.Resolver.channel(for:supportsSimulatenousDualBand:on:)( uint64_t a1, char a2, char a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v8 = a1;
  if (!a2)
  {
    uint64_t v10 = a8;
    if ((a3 & 1) == 0)
    {
      swift_bridgeObjectRetain(a8);
      goto LABEL_26;
    }

    if (a4 <= 1u)
    {
      uint64_t v11 = a8[2];
      if (v11)
      {
        if (a4) {
          int v12 = 16;
        }
        else {
          int v12 = 4;
        }
        swift_bridgeObjectRetain(a8);
        unint64_t v13 = (char *)v10 + 39;
        int v28 = v12;
        while (1)
        {
          int v17 = *(_DWORD *)(v13 - 7);
          int v18 = *(v13 - 3);
          char v19 = *(v13 - 2);
          char v20 = *(v13 - 1);
          char v21 = *v13;
          if (*(v13 - 3))
          {
            if (v18 == 1 && v12 == 16)
            {
LABEL_20:
              if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
                sub_1000698F0(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
              }
              unint64_t v15 = _swiftEmptyArrayStorage[2];
              unint64_t v14 = _swiftEmptyArrayStorage[3];
              if (v15 >= v14 >> 1) {
                sub_1000698F0(v14 > 1, v15 + 1, 1);
              }
              _swiftEmptyArrayStorage[2] = v15 + 1;
              int v16 = &_swiftEmptyArrayStorage[v15];
              *((_DWORD *)v16 + 8) = v17;
              *((_BYTE *)v16 + 36) = v18;
              *((_BYTE *)v16 + 37) = v19;
              *((_BYTE *)v16 + 38) = v20;
              *((_BYTE *)v16 + 39) = v21;
              int v12 = v28;
            }
          }

          else if (v12 == 4)
          {
            goto LABEL_20;
          }

          v13 += 8;
          if (!--v11)
          {
            swift_bridgeObjectRelease(v10);
            uint64_t v8 = a1;
            uint64_t v10 = _swiftEmptyArrayStorage;
            goto LABEL_26;
          }
        }
      }

      uint64_t v10 = _swiftEmptyArrayStorage;
LABEL_26:
      if (v10[2] <= v8)
      {
        __break(1u);
      }

      else if ((v8 & 0x8000000000000000LL) == 0)
      {
        int v22 = &v10[v8];
        uint64_t v23 = *((unsigned int *)v22 + 8);
        uint64_t v24 = *((unsigned __int8 *)v22 + 36);
        uint64_t v25 = *((unsigned __int8 *)v22 + 37);
        swift_bridgeObjectRelease(v10);
        uint64_t v9 = v23 | (v24 << 32) | (v25 << 40);
        return v9 & 0xFFFFFFFFFFFFLL;
      }

      __break(1u);
    }

    __break(1u);
    JUMPOUT(0x1000E8968LL);
  }

  if (a2 != 1) {
    __asm { BR              X9 }
  }

  uint64_t v9 = a1 & 0xFFFFFFFFFFFFLL;
  return v9 & 0xFFFFFFFFFFFFLL;
}

void RadioResources.SymbolicChannel.hash(into:)(uint64_t a1, Swift::UInt a2, char a3)
{
  if (a3)
  {
    if (a3 != 1) {
      __asm { BR              X9 }
    }

    Hasher._combine(_:)(4uLL);
    Hasher._combine(_:)(a2);
    Hasher._combine(_:)(0x801004u >> ((a2 >> 29) & 0xF8));
    switch(BYTE5(a2))
    {
      case 2:
        Swift::UInt v4 = 0LL;
        goto LABEL_12;
      case 3:
        Swift::UInt v4 = 1LL;
        goto LABEL_12;
      case 4:
        Swift::UInt v4 = 3LL;
        goto LABEL_12;
      case 5:
        Swift::UInt v4 = 4LL;
        goto LABEL_12;
      case 6:
        Swift::UInt v4 = 5LL;
        goto LABEL_12;
      default:
        Hasher._combine(_:)(2uLL);
        Hasher._combine(_:)(BYTE5(a2) & 1);
        break;
    }
  }

  else
  {
    Hasher._combine(_:)(3uLL);
    Swift::UInt v4 = a2;
LABEL_12:
    Hasher._combine(_:)(v4);
  }

Swift::Int RadioResources.SymbolicChannel.hashValue.getter(Swift::UInt a1, char a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000E8AB4()
{
  Swift::UInt v1 = *(void *)v0;
  char v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)(v4, 0LL);
  RadioResources.SymbolicChannel.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void sub_1000E8B00(uint64_t a1)
{
}

Swift::Int sub_1000E8B0C(uint64_t a1)
{
  Swift::UInt v2 = *(void *)v1;
  char v3 = *(_BYTE *)(v1 + 8);
  Hasher.init(_seed:)(v5, a1);
  RadioResources.SymbolicChannel.hash(into:)((uint64_t)v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_1000E8B54(uint64_t a1, uint64_t a2)
{
  return _s7CoreP2P14RadioResourcesO15SymbolicChannelO21__derived_enum_equalsySbAE_AEtFZ_0( *(void *)a1,  *(_BYTE *)(a1 + 8),  *(void *)a2,  *(_BYTE *)(a2 + 8));
}

BOOL RadioResources.PreferredChannel.requiresExtraBandwidth.getter(uint64_t a1)
{
  return (a1 & 0xFF000000000000LL) == 0x1000000000000LL;
}

uint64_t NANDataEstablishedEvent.type.getter(unint64_t a1)
{
  return HIBYTE(a1) & 1;
}

uint64_t RadioResources.PreferredChannel.isEqualToSocial.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 7) = result;
  return result;
}

uint64_t (*RadioResources.PreferredChannel.isEqualToSocial.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

void RadioResources.PreferredChannel.hash(into:)(int a1, unint64_t a2)
{
  switch(BYTE5(a2))
  {
    case 2:
      Swift::UInt v3 = 0LL;
      goto LABEL_8;
    case 3:
      Swift::UInt v3 = 1LL;
      goto LABEL_8;
    case 4:
      Swift::UInt v3 = 3LL;
      goto LABEL_8;
    case 5:
      Swift::UInt v3 = 4LL;
      goto LABEL_8;
    case 6:
      Swift::UInt v3 = 5LL;
LABEL_8:
      Hasher._combine(_:)(v3);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(BYTE5(a2) & 1);
      break;
  }

  Hasher._combine(_:)(BYTE6(a2));
  Hasher._combine(_:)(HIBYTE(a2) & 1);
}

uint64_t static RadioResources.PreferredChannel.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000EABF8(a1 & 0x1FFFFFFFFFFFFFFLL, a2 & 0x1FFFFFFFFFFFFFFLL);
}

Swift::Int RadioResources.PreferredChannel.hashValue.getter(uint64_t a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000E8CA4()
{
  uint64_t v1 = *(unsigned int *)v0;
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  int v5 = v0[7];
  Hasher.init(_seed:)(v8, 0LL);
  uint64_t v6 = 0x100000000000000LL;
  if (!v5) {
    uint64_t v6 = 0LL;
  }
  RadioResources.PreferredChannel.hash(into:)((int)v8, v6 | (v4 << 48) | (v3 << 40) | (v2 << 32) | v1);
  return Hasher._finalize()();
}

void sub_1000E8D20(int a1)
{
  uint64_t v2 = 0x100000000000000LL;
  if (!v1[7]) {
    uint64_t v2 = 0LL;
  }
  RadioResources.PreferredChannel.hash(into:)( a1,  v2 | ((unint64_t)v1[6] << 48) | ((unint64_t)v1[5] << 40) | ((unint64_t)v1[4] << 32) | *(unsigned int *)v1);
}

Swift::Int sub_1000E8D54(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)v1;
  uint64_t v3 = v1[4];
  uint64_t v4 = v1[5];
  uint64_t v5 = v1[6];
  int v6 = v1[7];
  Hasher.init(_seed:)(v9, a1);
  uint64_t v7 = 0x100000000000000LL;
  if (!v6) {
    uint64_t v7 = 0LL;
  }
  RadioResources.PreferredChannel.hash(into:)((int)v9, v7 | (v5 << 48) | (v4 << 40) | (v3 << 32) | v2);
  return Hasher._finalize()();
}

uint64_t sub_1000E8DCC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(unsigned int *)a1;
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  if (a1[7]) {
    uint64_t v6 = 0x100000000000000LL;
  }
  else {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = v6 | (v5 << 48) | (v4 << 40) | (v3 << 32) | v2;
  if (a2[7]) {
    uint64_t v8 = 0x100000000000000LL;
  }
  else {
    uint64_t v8 = 0LL;
  }
  return sub_1000EABF8( v7,  v8 | ((unint64_t)a2[6] << 48) | ((unint64_t)a2[5] << 40) | ((unint64_t)a2[4] << 32) | *(unsigned int *)a2);
}

uint64_t RadioSchedule.set(_:to:with:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  v9[2] = a7;
  v9[3] = a8;
  v9[4] = a1;
  v9[5] = a2;
  v9[6] = a3;
  v9[7] = a4;
  char v10 = a5;
  char v11 = a6;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t), void *, uint64_t, uint64_t))(a8 + 24))( a4,  a5,  sub_1000EAD18,  v9,  a7,  a8);
}

uint64_t sub_1000E8EBC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a9,  a8,  &protocol requirements base descriptor for RadioSchedule,  &associated type descriptor for RadioSchedule.Map);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a9,  a8,  AssociatedTypeWitness,  &protocol requirements base descriptor for RadioSchedule,  &associated conformance descriptor for RadioSchedule.RadioSchedule.Map: RadioMap);
  int v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  uint64_t v18 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  return v17(a2, a3, a4, a5, a6, a7, v18, AssociatedConformanceWitness);
}

uint64_t RadioSchedule.reserve(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  v7[2] = a5;
  v7[3] = a6;
  v7[4] = a1;
  v7[5] = a2;
  v7[6] = a3;
  char v8 = a4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t), void *))(a6 + 24))( 3LL,  2LL,  sub_1000EAD4C,  v7);
}

uint64_t sub_1000E901C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a7,  a6,  &protocol requirements base descriptor for RadioSchedule,  &associated type descriptor for RadioSchedule.Map);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a7,  a6,  AssociatedTypeWitness,  &protocol requirements base descriptor for RadioSchedule,  &associated conformance descriptor for RadioSchedule.RadioSchedule.Map: RadioMap);
  unint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                       + 24);
  uint64_t v16 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  return v15(a2, a3, a4, a5, v16, AssociatedConformanceWitness);
}

CoreP2P::RadioResources::Priority __swiftcall RadioSchedule.inflexibleUpgrade(priority:)( CoreP2P::RadioResources::Priority priority)
{
  else {
    return 11;
  }
}

uint64_t RadioResourceControls.update<A>(from:to:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v55 = a5;
  uint64_t v56 = a8;
  uint64_t v57 = a1;
  uint64_t v49 = a7;
  uint64_t v53 = a6;
  uint64_t v54 = a3;
  uint64_t v58 = a2;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v50 = *(void *)(v9 - 8);
  uint64_t v51 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  v52 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v48 - v13;
  uint64_t v15 = *(void *)(a4 - 8);
  uint64_t v16 = __chkstk_darwin(v12);
  uint64_t v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  char v21 = (char *)&v48 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v48 - v22;
  uint64_t v24 = type metadata accessor for Optional(255LL, a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, v24, v24, 0LL, 0LL);
  uint64_t v26 = __chkstk_darwin(TupleTypeMetadata2);
  int v28 = (char *)&v48 - v27;
  uint64_t v29 = (char *)&v48 + *(int *)(v26 + 48) - v27;
  unint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16LL);
  v30((char *)&v48 - v27, v57, v24);
  uint64_t v31 = v24;
  uint64_t v32 = v15;
  v30(v29, v58, v31);
  unint64_t v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v15) = v33(v28, 1LL, a4);
  uint64_t result = v33(v29, 1LL, a4);
  if ((_DWORD)v15 == 1)
  {
    if ((_DWORD)result == 1) {
      return result;
    }
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v23, v29, a4);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 8))(v23, a4, v53, v56, v54);
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v23, a4);
  }

  int v35 = v52;
  char v36 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
  if ((_DWORD)result == 1)
  {
    v36(v23, v28, a4);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 16))(v23, a4, v53, v56, v54);
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v23, a4);
  }

  v36(v21, v28, a4);
  char v37 = v18;
  v36(v18, v29, a4);
  uint64_t v38 = v14;
  uint64_t v39 = v21;
  uint64_t v40 = v56;
  dispatch thunk of Identifiable.id.getter(a4, v56);
  dispatch thunk of Identifiable.id.getter(a4, v40);
  char v41 = static UUID.== infix(_:_:)(v38, v35);
  uint64_t v42 = v51;
  v43 = *(void (**)(char *, uint64_t))(v50 + 8);
  v43(v35, v51);
  v43(v38, v42);
  if ((v41 & 1) != 0)
  {
    if ((dispatch thunk of static Equatable.== infix(_:_:)(v39, v37, a4, *(void *)(v49 + 8)) & 1) == 0) {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 8))(v37, a4, v53, v40, v54);
    }
  }

  else
  {
    uint64_t v44 = v55;
    uint64_t v46 = v53;
    uint64_t v45 = v54;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 16))( v39,  a4,  v53,  v40,  v54,  v55);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 8))(v37, a4, v46, v40, v45);
  }

  v47 = *(void (**)(char *, uint64_t))(v32 + 8);
  v47(v37, a4);
  return ((uint64_t (*)(char *, uint64_t))v47)(v39, a4);
}

uint64_t Optional<A>.update<A>(schedule:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(a1);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v16 + 16))(v15, v17);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1LL, v9);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v15, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 8))(a1, a3, a5, v9, a4);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }

  return result;
}

uint64_t sub_1000E95A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Optional<A>.update<A>(schedule:)(a1, a4, a2, *(void *)(a5 - 8), a3);
}

Swift::Int sub_1000E95C4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v2 = sub_1000EAA48(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_1000E962C(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_1000E962C(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  Swift::Int v4 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if ((v4 & 0x8000000000000000LL) == 0)
    {
      if (v4) {
        return sub_1000EA0B4(0LL, v4, 1LL, v3);
      }
      return result;
    }

    goto LABEL_229;
  }

  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1)
  {
LABEL_239:
    Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
    __break(1u);
    return result;
  }

  Swift::Int v126 = result;
  if (v4 < 2)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v4 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      uint64_t v12 = (char *)_swiftEmptyArrayStorage;
      if (v13 < 2)
      {
LABEL_205:
        v112 = v12;
        goto LABEL_206;
      }

LABEL_193:
      uint64_t v113 = *v3;
      while (1)
      {
        unint64_t v114 = v13 - 2;
        if (v13 < 2) {
          goto LABEL_224;
        }
        if (!v113) {
          goto LABEL_236;
        }
        v105 = v12;
        v115 = v12 + 32;
        uint64_t v116 = *(void *)&v12[16 * v114 + 32];
        uint64_t v117 = *(void *)&v12[16 * v13 + 24];
        sub_1000EA2A0( (char *)(v113 + 8 * v116),  (char *)(v113 + 8LL * *(void *)&v115[16 * v13 - 16]),  v113 + 8 * v117,  __dst);
        if (v2) {
          goto LABEL_191;
        }
        if (v117 < v116) {
          goto LABEL_225;
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v105) & 1) == 0) {
          v105 = sub_1000EAA0C((uint64_t)v105);
        }
        if (v114 >= *((void *)v105 + 2)) {
          goto LABEL_226;
        }
        v118 = v105;
        v119 = v105 + 32;
        v120 = &v105[16 * v114 + 32];
        *(void *)v120 = v116;
        *((void *)v120 + 1) = v117;
        unint64_t v121 = *((void *)v105 + 2);
        if (v13 > v121) {
          goto LABEL_227;
        }
        uint64_t v12 = v118;
        memmove(&v119[16 * v13 - 16], &v119[16 * v13], 16 * (v121 - v13));
        *((void *)v12 + 2) = v121 - 1;
        unint64_t v13 = v121 - 1;
        if (v121 <= 2) {
          goto LABEL_205;
        }
      }
    }

    v125 = _swiftEmptyArrayStorage;
    uint64_t v135 = v1;
  }

  else
  {
    uint64_t v135 = v1;
    uint64_t v7 = v6 >> 1;
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)( v6 >> 1,  &type metadata for RadioResources.PreferredChannel);
    *(void *)(v8 + 16) = v7;
    v125 = (void *)v8;
    __dst = (char *)(v8 + 32);
  }

  Swift::Int v10 = 0LL;
  uint64_t v11 = *v3;
  v123 = v3;
  uint64_t v124 = *v3 - 1;
  uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  uint64_t v136 = *v3;
  Swift::Int v129 = v4;
  while (1)
  {
    Swift::Int v14 = v10;
    Swift::Int v15 = v10 + 1;
    if (v10 + 1 >= v4) {
      goto LABEL_99;
    }
    uint64_t v16 = v11 + 8 * v15;
    unsigned int v17 = *(_DWORD *)v16;
    char v18 = *(_BYTE *)(v16 + 4);
    int v19 = *(unsigned __int8 *)(v16 + 5);
    int v20 = *(unsigned __int8 *)(v16 + 7);
    uint64_t v21 = v11 + 8 * v10;
    int v22 = *(unsigned __int8 *)(v21 + 5);
    unsigned int v23 = (0x801004u >> (8 * v18));
    unsigned int v24 = (0x801004u >> (8 * *(_BYTE *)(v21 + 4)));
    if (v23 == v24)
    {
      int v25 = *(unsigned __int8 *)(v16 + 7);
    }

    if (v23 < v24 || v17 < *(_DWORD *)v21) {
      goto LABEL_23;
    }
    uint64_t v27 = sub_100002274(&qword_100407088);
    if (v22 == 2)
    {
      int v25 = 0;
      uint64_t v11 = v136;
    }

    else
    {
      uint64_t v11 = v136;
      if (v19 == 2) {
        goto LABEL_23;
      }
      if (v22 != 3)
      {
        if (v19 == 3) {
          goto LABEL_23;
        }
        if ((v22 - 2) < 5 || (v22 & 1) != 0)
        {
          if ((v22 - 2) < 5u || (v22 & 1) == 0)
          {
            if (v22 != 4)
            {
              if (v19 == 4)
              {
LABEL_23:
                int v25 = 1;
                goto LABEL_29;
              }

              if (v22 == 5)
              {
                Swift::Int v15 = v14 + 2;
                if (v14 + 2 >= v129) {
                  goto LABEL_99;
                }
                int v25 = 0;
LABEL_30:
                char v28 = v18;
                while (2)
                {
                  while (1)
                  {
                    unsigned int v29 = v17;
                    char v30 = v19;
                    char v31 = v20;
                    uint64_t v32 = v11 + 8 * v15;
                    unsigned int v17 = *(_DWORD *)v32;
                    char v33 = 8 * v28;
                    char v28 = *(_BYTE *)(v32 + 4);
                    int v19 = *(unsigned __int8 *)(v32 + 5);
                    LOBYTE(v20) = *(_BYTE *)(v32 + 7);
                    unsigned int v34 = (0x801004u >> (8 * v28));
                    unsigned int v35 = (0x801004u >> v33);
                    if (v34 != v35) {
                      break;
                    }
                    if ((v20 & 1) != 0) {
                      goto LABEL_46;
                    }
                    if ((v31 & 1) == 0) {
                      break;
                    }
                    if ((v25 & 1) != 0) {
                      goto LABEL_80;
                    }
                    if (++v15 >= v129) {
                      goto LABEL_99;
                    }
                  }

                  if (v34 >= v35 && v17 >= v29)
                  {
                    if (v30 != 2)
                    {
                      if (v19 == 2) {
                        goto LABEL_46;
                      }
                      if (v30 != 3)
                      {
                        if (v19 == 3) {
                          goto LABEL_46;
                        }
                        if ((v30 - 2) < 5u || (v30 & 1) != 0)
                        {
                          if ((v30 - 2) < 5u || (v30 & 1) == 0)
                          {
                            if (v30 != 4)
                            {
                              if (v19 == 4) {
                                goto LABEL_46;
                              }
                              if (v30 != 5)
                              {
                                if (v19 == 5) {
                                  goto LABEL_46;
                                }
                                if (v30 != 6)
                                {
                                  if (v19 != 6) {
                                    goto LABEL_237;
                                  }
                                  goto LABEL_46;
                                }
                              }
                            }
                          }
                        }
                      }
                    }

                    if ((v25 & 1) != 0) {
                      goto LABEL_80;
                    }
                  }

                  else
                  {
LABEL_46:
                    if ((v25 & 1) == 0) {
                      goto LABEL_99;
                    }
                  }

                  if (++v15 >= v129) {
                    goto LABEL_79;
                  }
                  continue;
                }
              }

              if (v19 != 5)
              {
                if (v22 == 6)
                {
                  Swift::Int v15 = v14 + 2;
                  if (v14 + 2 >= v129)
                  {
                    uint64_t v11 = v136;
                    goto LABEL_99;
                  }

                  int v25 = 0;
LABEL_95:
                  uint64_t v11 = v136;
                  goto LABEL_30;
                }

                if (v19 != 6) {
                  goto LABEL_238;
                }
              }

              Swift::Int v15 = v14 + 2;
              if (v14 + 2 >= v129)
              {
                uint64_t v11 = v136;
                if (v14 < v15) {
                  goto LABEL_82;
                }
                goto LABEL_99;
              }

              int v25 = 1;
              goto LABEL_95;
            }
          }
        }
      }

      int v25 = 0;
    }

LABEL_99:
    Swift::Int v46 = v129;
    if (v15 >= v129) {
      goto LABEL_143;
    }
    if (__OFSUB__(v15, v14)) {
      goto LABEL_228;
    }
    if (v15 - v14 >= v126) {
      goto LABEL_143;
    }
    if (__OFADD__(v14, v126)) {
      goto LABEL_230;
    }
    if (v14 + v126 < v129) {
      Swift::Int v46 = v14 + v126;
    }
    if (v46 < v14) {
      goto LABEL_231;
    }
    if (v15 == v46) {
      goto LABEL_143;
    }
    v122 = v12;
    uint64_t v47 = v124 + 8 * v15;
    Swift::Int v127 = v46;
    Swift::Int v128 = v14;
    while (2)
    {
      uint64_t v48 = v11 + 8 * v15;
      unsigned int v49 = *(_DWORD *)v48;
      char v50 = *(_BYTE *)(v48 + 4);
      int v51 = *(unsigned __int8 *)(v48 + 5);
      char v52 = *(_BYTE *)(v48 + 7);
      BOOL v53 = (v51 - 2) > 4;
      BOOL v54 = (v51 - 2) < 5;
      if ((v51 & 1) != 0) {
        BOOL v53 = 0;
      }
      BOOL v133 = v53;
      if ((v51 & 1) == 0) {
        BOOL v54 = 1;
      }
      BOOL v130 = v54;
      unsigned int v55 = (0x801004u >> (8 * v50));
      uint64_t v131 = v47;
      while (1)
      {
        int v56 = *(unsigned __int8 *)(v47 - 2);
        unsigned int v57 = (0x801004u >> (8 * *(_BYTE *)(v47 - 3)));
        if (v55 == v57)
        {
          if ((v52 & 1) != 0) {
            goto LABEL_139;
          }
          if ((*(_BYTE *)v47 & 1) != 0) {
            goto LABEL_109;
          }
        }

        if (v55 < v57 || v49 < *(_DWORD *)(v47 - 7)) {
          goto LABEL_139;
        }
        Swift::Int v59 = v15;
        uint64_t v27 = sub_100002274(&qword_100407088);
        if (v56 == 2) {
          break;
        }
        uint64_t v11 = v136;
        Swift::Int v15 = v59;
        if (v51 != 2)
        {
          if (v56 == 3) {
            goto LABEL_109;
          }
          if (v51 != 3)
          {
            if (!v133)
            {
              if (v130)
              {
                if (v56 == 4) {
                  goto LABEL_109;
                }
                if (v51 != 4)
                {
                  if (v56 == 5) {
                    goto LABEL_109;
                  }
                  if (v51 != 5)
                  {
                    if (v56 == 6) {
                      goto LABEL_109;
                    }
                    if (v51 != 6) {
                      goto LABEL_238;
                    }
                  }
                }
              }
            }
          }
        }

LABEL_139:
        if (!v11) {
          goto LABEL_233;
        }
        char v60 = *(_BYTE *)(v47 + 7);
        *(void *)(v47 + 1) = *(void *)(v47 - 7);
        *(_DWORD *)(v47 - 7) = v49;
        *(_BYTE *)(v47 - 3) = v50;
        *(_BYTE *)(v47 - 2) = v51;
        *(_BYTE *)(v47 - 1) = v60;
        *(_BYTE *)uint64_t v47 = v52;
        v47 -= 8LL;
        if (v15 == ++v14) {
          goto LABEL_109;
        }
      }

      uint64_t v11 = v136;
      Swift::Int v15 = v59;
LABEL_109:
      ++v15;
      uint64_t v47 = v131 + 8;
      Swift::Int v14 = v128;
      if (v15 != v127) {
        continue;
      }
      break;
    }

    Swift::Int v15 = v127;
    uint64_t v12 = v122;
LABEL_143:
    if (v15 < v14)
    {
LABEL_223:
      __break(1u);
LABEL_224:
      __break(1u);
LABEL_225:
      __break(1u);
LABEL_226:
      __break(1u);
LABEL_227:
      __break(1u);
LABEL_228:
      __break(1u);
LABEL_229:
      __break(1u);
LABEL_230:
      __break(1u);
LABEL_231:
      __break(1u);
LABEL_232:
      __break(1u);
LABEL_233:
      __break(1u);
LABEL_234:
      __break(1u);
LABEL_235:
      __break(1u);
LABEL_236:
      __break(1u);
LABEL_237:
      uint64_t v27 = sub_100002274(&qword_100407088);
LABEL_238:
      _diagnoseUnexpectedEnumCase<A>(type:)(v27, v27);
      __break(1u);
      goto LABEL_239;
    }

    Swift::Int v134 = v15;
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0) {
      uint64_t v12 = sub_1000EA720(0LL, *((void *)v12 + 2) + 1LL, 1, v12);
    }
    unint64_t v62 = *((void *)v12 + 2);
    unint64_t v61 = *((void *)v12 + 3);
    unint64_t v13 = v62 + 1;
    uint64_t v11 = v136;
    Swift::Int v10 = v134;
    if (v62 >= v61 >> 1)
    {
      v111 = sub_1000EA720((char *)(v61 > 1), v62 + 1, 1, v12);
      Swift::Int v10 = v134;
      uint64_t v11 = v136;
      uint64_t v12 = v111;
    }

    *((void *)v12 + 2) = v13;
    v63 = v12 + 32;
    v64 = &v12[16 * v62 + 32];
    *(void *)v64 = v14;
    *((void *)v64 + 1) = v10;
    if (v62) {
      break;
    }
    unint64_t v13 = 1LL;
LABEL_15:
    Swift::Int v4 = v129;
    if (v10 >= v129)
    {
      uint64_t v2 = v135;
      uint64_t v9 = v125;
      uint64_t v3 = v123;
      if (v13 < 2) {
        goto LABEL_205;
      }
      goto LABEL_193;
    }
  }

  while (1)
  {
    unint64_t v65 = v13 - 1;
    if (v13 >= 4)
    {
      v70 = &v63[16 * v13];
      uint64_t v71 = *((void *)v70 - 8);
      uint64_t v72 = *((void *)v70 - 7);
      BOOL v76 = __OFSUB__(v72, v71);
      uint64_t v73 = v72 - v71;
      if (v76) {
        goto LABEL_212;
      }
      uint64_t v75 = *((void *)v70 - 6);
      uint64_t v74 = *((void *)v70 - 5);
      BOOL v76 = __OFSUB__(v74, v75);
      uint64_t v68 = v74 - v75;
      char v69 = v76;
      if (v76) {
        goto LABEL_213;
      }
      unint64_t v77 = v13 - 2;
      v78 = &v63[16 * v13 - 32];
      uint64_t v80 = *(void *)v78;
      uint64_t v79 = *((void *)v78 + 1);
      BOOL v76 = __OFSUB__(v79, v80);
      uint64_t v81 = v79 - v80;
      if (v76) {
        goto LABEL_215;
      }
      BOOL v76 = __OFADD__(v68, v81);
      uint64_t v82 = v68 + v81;
      if (v76) {
        goto LABEL_218;
      }
      if (v82 >= v73)
      {
        v100 = &v63[16 * v65];
        uint64_t v102 = *(void *)v100;
        uint64_t v101 = *((void *)v100 + 1);
        BOOL v76 = __OFSUB__(v101, v102);
        uint64_t v103 = v101 - v102;
        if (v76) {
          goto LABEL_222;
        }
        BOOL v93 = v68 < v103;
        goto LABEL_180;
      }
    }

    else
    {
      if (v13 != 3)
      {
        uint64_t v94 = *((void *)v12 + 4);
        uint64_t v95 = *((void *)v12 + 5);
        BOOL v76 = __OFSUB__(v95, v94);
        uint64_t v87 = v95 - v94;
        char v88 = v76;
        goto LABEL_174;
      }

      uint64_t v67 = *((void *)v12 + 4);
      uint64_t v66 = *((void *)v12 + 5);
      BOOL v76 = __OFSUB__(v66, v67);
      uint64_t v68 = v66 - v67;
      char v69 = v76;
    }

    if ((v69 & 1) != 0) {
      goto LABEL_214;
    }
    unint64_t v77 = v13 - 2;
    v83 = &v63[16 * v13 - 32];
    uint64_t v85 = *(void *)v83;
    uint64_t v84 = *((void *)v83 + 1);
    BOOL v86 = __OFSUB__(v84, v85);
    uint64_t v87 = v84 - v85;
    char v88 = v86;
    if (v86) {
      goto LABEL_217;
    }
    v89 = &v63[16 * v65];
    uint64_t v91 = *(void *)v89;
    uint64_t v90 = *((void *)v89 + 1);
    BOOL v76 = __OFSUB__(v90, v91);
    uint64_t v92 = v90 - v91;
    if (v76) {
      goto LABEL_220;
    }
    if (__OFADD__(v87, v92)) {
      goto LABEL_221;
    }
    if (v87 + v92 >= v68)
    {
      BOOL v93 = v68 < v92;
LABEL_180:
      if (v93) {
        unint64_t v65 = v77;
      }
      goto LABEL_182;
    }

LABEL_174:
    if ((v88 & 1) != 0) {
      goto LABEL_216;
    }
    v96 = &v63[16 * v65];
    uint64_t v98 = *(void *)v96;
    uint64_t v97 = *((void *)v96 + 1);
    BOOL v76 = __OFSUB__(v97, v98);
    uint64_t v99 = v97 - v98;
    if (v76) {
      goto LABEL_219;
    }
    if (v99 < v87) {
      goto LABEL_15;
    }
LABEL_182:
    unint64_t v104 = v65 - 1;
    if (v65 - 1 >= v13)
    {
      __break(1u);
LABEL_209:
      __break(1u);
LABEL_210:
      __break(1u);
LABEL_211:
      __break(1u);
LABEL_212:
      __break(1u);
LABEL_213:
      __break(1u);
LABEL_214:
      __break(1u);
LABEL_215:
      __break(1u);
LABEL_216:
      __break(1u);
LABEL_217:
      __break(1u);
LABEL_218:
      __break(1u);
LABEL_219:
      __break(1u);
LABEL_220:
      __break(1u);
LABEL_221:
      __break(1u);
LABEL_222:
      __break(1u);
      goto LABEL_223;
    }

    if (!v11) {
      goto LABEL_234;
    }
    v105 = v12;
    v106 = &v63[16 * v104];
    uint64_t v107 = *(void *)v106;
    v108 = &v63[16 * v65];
    uint64_t v109 = *((void *)v108 + 1);
    sub_1000EA2A0((char *)(v11 + 8LL * *(void *)v106), (char *)(v11 + 8LL * *(void *)v108), v11 + 8 * v109, __dst);
    if (v135) {
      break;
    }
    if (v109 < v107) {
      goto LABEL_209;
    }
    if (v65 > *((void *)v105 + 2)) {
      goto LABEL_210;
    }
    *(void *)v106 = v107;
    *(void *)&v63[16 * v104 + 8] = v109;
    unint64_t v110 = *((void *)v105 + 2);
    if (v65 >= v110) {
      goto LABEL_211;
    }
    uint64_t v12 = v105;
    unint64_t v13 = v110 - 1;
    memmove(&v63[16 * v65], v108 + 16, 16 * (v110 - 1 - v65));
    *((void *)v105 + 2) = v110 - 1;
    uint64_t v11 = v136;
    Swift::Int v10 = v134;
    if (v110 <= 2) {
      goto LABEL_15;
    }
  }

  uint64_t v9 = v125;
LABEL_191:
  v112 = v105;
LABEL_206:
  swift_bridgeObjectRelease(v112);
  v9[2] = 0LL;
  return swift_bridgeObjectRelease(v9);
}

uint64_t sub_1000EA0B4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v21 = result;
  if (a3 == a2) {
    return result;
  }
  uint64_t v4 = a3;
  uint64_t v5 = *a4;
  uint64_t v6 = *a4 + 8 * a3 - 1;
LABEL_5:
  uint64_t v7 = (unsigned int *)(v5 + 8 * v4);
  unsigned int v8 = *v7;
  char v9 = *((_BYTE *)v7 + 4);
  int v10 = *((unsigned __int8 *)v7 + 5);
  char v11 = *((_BYTE *)v7 + 7);
  BOOL v12 = (v10 - 2) > 4;
  BOOL v13 = (v10 - 2) < 5;
  if ((v10 & 1) != 0) {
    BOOL v12 = 0;
  }
  BOOL v24 = v12;
  if ((v10 & 1) == 0) {
    BOOL v13 = 1;
  }
  BOOL v22 = v13;
  unsigned int v14 = (0x801004u >> (8 * v9));
  uint64_t v15 = v21;
  uint64_t v23 = v6;
  while (1)
  {
    int v16 = *(unsigned __int8 *)(v6 - 2);
    unsigned int v17 = (0x801004u >> (8 * *(_BYTE *)(v6 - 3)));
    if (v14 == v17)
    {
      if ((v11 & 1) != 0) {
        goto LABEL_34;
      }
      if ((*(_BYTE *)v6 & 1) != 0) {
        goto LABEL_4;
      }
    }

    if (v14 >= v17 && v8 >= *(_DWORD *)(v6 - 7))
    {
      Swift::Int result = sub_100002274(&qword_100407088);
      if (v16 == 2) {
        goto LABEL_4;
      }
      if (v10 != 2)
      {
        if (v16 == 3) {
          goto LABEL_4;
        }
        if (v10 != 3)
        {
          if ((v16 - 2) >= 5 && (v16 & 1) == 0)
          {
LABEL_4:
            ++v4;
            uint64_t v6 = v23 + 8;
            if (v4 == a2) {
              return result;
            }
            goto LABEL_5;
          }

          if (!v24)
          {
            if (v22)
            {
              if (v16 == 4) {
                goto LABEL_4;
              }
              if (v10 != 4)
              {
                if (v16 == 5) {
                  goto LABEL_4;
                }
                if (v10 != 5)
                {
                  if (v16 == 6) {
                    goto LABEL_4;
                  }
                  if (v10 != 6) {
                    goto LABEL_38;
                  }
                }
              }
            }
          }
        }
      }
    }

LABEL_34:
    if (!v5) {
      break;
    }
    char v19 = *(_BYTE *)(v6 + 7);
    *(void *)(v6 + 1) = *(void *)(v6 - 7);
    *(_DWORD *)(v6 - 7) = v8;
    *(_BYTE *)(v6 - 3) = v9;
    *(_BYTE *)(v6 - 2) = v10;
    *(_BYTE *)(v6 - 1) = v19;
    *(_BYTE *)uint64_t v6 = v11;
    v6 -= 8LL;
    if (v4 == ++v15) {
      goto LABEL_4;
    }
  }

  __break(1u);
LABEL_38:
  Swift::Int result = _diagnoseUnexpectedEnumCase<A>(type:)(result, result);
  __break(1u);
  return result;
}

    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    char v52 = *(void *)(a2 + 144);
    *(void *)(a1 + 144) = v52;
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_BYTE *)(a1 + 176) = 0;
    swift_bridgeObjectRetain(v52);
    goto LABEL_35;
  }

  if (v46 != 255)
  {
    if (a1 == a2) {
      goto LABEL_35;
    }
    sub_10017B2A8(a1 + 136);
    if ((*(_BYTE *)(a2 + 176) & 1) != 0) {
      goto LABEL_32;
    }
    goto LABEL_34;
  }

  sub_10017B2A8(a1 + 136);
  uint64_t v47 = *(_OWORD *)(a2 + 161);
  uint64_t v48 = *(_OWORD *)(a2 + 152);
  *char v44 = *v45;
  *(_OWORD *)(a1 + 152) = v48;
  *(_OWORD *)(a1 + 161) = v47;
LABEL_35:
  BOOL v53 = *(_DWORD *)(a2 + 177);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 177) = v53;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  return a1;
}

  sub_100002AC4(v117);
  a1 = v34;
LABEL_35:
  sub_100002AC4(a1);
  return a1;
}

  __break(1u);
}

    swift_release(v135);
    swift_beginAccess(v136, &v148, 0LL, 0LL);
    v105 = v134;
    v106 = *(void *)(v134 + 24);
    uint64_t v107 = *(unsigned __int8 *)(v134 + 32);
    v108 = *(unsigned __int8 *)(v134 + 33);
    swift_bridgeObjectRetain(*(void *)(v134 + 16));
    uint64_t v109 = v107 | (v108 << 8);
    unint64_t v110 = v145;
    sub_1002BDD88(v111, v106, v109);
    v112 = (uint64_t)v151;
    swift_beginAccess(v117[0], &v146, 33LL, 0LL);
    swift_bridgeObjectRetain(v112);
    sub_1002C8474(v113);
    swift_endAccess(&v146);
    swift_bridgeObjectRelease(v112);
    sub_1002BDB08(v114);
    __chkstk_darwin();
    v117[-2] = v110;
    swift_bridgeObjectRetain(v112);
    sub_1002FFCD4((uint64_t (*)(int *))sub_1002C86F8, (uint64_t)&v117[-4], v112);
    v115 = swift_bridgeObjectRelease(v112);
    (*(void (**)(char *, uint64_t, __n128))(v118 + 8))(v11, v119, v115);
    uint64_t v116 = v151;
    swift_release(v105);
    swift_bridgeObjectRelease(v116);
    return;
  }

  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

  if (v8 == 0x300000000LL && v16 == 0x300000000LL)
  {
LABEL_36:
    swift_bridgeObjectRelease(v4);
    return 3LL;
  }

uint64_t sub_1000EA2A0(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  uint64_t v13 = v12 >> 3;
  int v42 = __src;
  uint64_t v41 = __dst;
  if (v10 < v12 >> 3)
  {
    if (v8 >= -7)
    {
      if (__dst != __src || &__src[8 * v10] <= __dst) {
        memmove(__dst, __src, 8 * v10);
      }
      unsigned int v14 = &v4[8 * v10];
      Swift::Int v40 = v14;
      while (1)
      {
        int v15 = v6[5];
        int v16 = v4[5];
        unsigned int v17 = (0x801004u >> (8 * v6[4]));
        unsigned int v18 = (0x801004u >> (8 * v4[4]));
        if (v17 == v18)
        {
          if ((v6[7] & 1) != 0) {
            goto LABEL_19;
          }
          if ((v4[7] & 1) != 0) {
            goto LABEL_24;
          }
        }

        if (v17 >= v18 && *(_DWORD *)v6 >= *(_DWORD *)v4)
        {
          uint64_t v21 = sub_100002274(&qword_100407088);
          if (v16 == 2) {
            goto LABEL_24;
          }
          if (v15 != 2)
          {
            if (v16 == 3) {
              goto LABEL_24;
            }
            if (v15 != 3)
            {
              if ((v16 - 2) >= 5 && (v16 & 1) == 0)
              {
LABEL_24:
                if (v7 != v4) {
                  *(void *)uint64_t v7 = *(void *)v4;
                }
                v4 += 8;
                uint64_t v41 = v4;
                int v20 = v6;
                goto LABEL_27;
              }

              if ((v15 - 2) < 5 || (v15 & 1) != 0)
              {
                if ((v15 - 2) < 5u || (v15 & 1) == 0)
                {
                  if (v16 == 4) {
                    goto LABEL_24;
                  }
                  if (v15 != 4)
                  {
                    if (v16 == 5) {
                      goto LABEL_24;
                    }
                    if (v15 != 5)
                    {
                      if (v16 == 6) {
                        goto LABEL_24;
                      }
                      if (v15 != 6) {
                        goto LABEL_92;
                      }
                    }
                  }
                }
              }
            }
          }
        }

LABEL_95:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
    __break(1u);
    return result;
  }

  if (v11 < -7) {
    goto LABEL_95;
  }
  if (__dst != a2 || &a2[8 * v13] <= __dst) {
    memmove(__dst, a2, 8 * v13);
  }
  BOOL v22 = &v4[8 * v13];
  Swift::Int v40 = v22;
  int v42 = v6;
  if (v7 >= v6 || v11 < 8) {
    goto LABEL_94;
  }
  uint64_t v23 = (char *)(a3 - 8);
  BOOL v24 = v6;
  Swift::Int v39 = v7;
  while (1)
  {
    int v25 = v23 + 8;
    uint64_t v26 = v22 - 8;
    unsigned int v28 = *((_DWORD *)v24 - 2);
    v24 -= 8;
    unsigned int v27 = v28;
    unsigned int v29 = (0x801004u >> (8 * *(v22 - 4)));
    unsigned int v30 = (0x801004u >> (8 * v24[4]));
    if (v29 != v30) {
      goto LABEL_90;
    }
    if ((*(v22 - 1) & 1) != 0) {
      goto LABEL_62;
    }
    if ((v24[7] & 1) == 0)
    {
LABEL_90:
      if (v29 < v30 || *((_DWORD *)v22 - 2) < v27) {
        goto LABEL_62;
      }
      uint64_t v32 = v4;
      int v33 = *(v22 - 3);
      int v34 = v24[5];
      unsigned int v35 = v22;
      uint64_t v21 = sub_100002274(&qword_100407088);
      BOOL v22 = v35;
      int v36 = v34;
      uint64_t v7 = v39;
      int v37 = v33;
      uint64_t v4 = v32;
      if (v36 != 2)
      {
        if (v37 == 2) {
          goto LABEL_62;
        }
        if (v36 != 3)
        {
          if (v37 == 3) {
            goto LABEL_62;
          }
          if ((v36 - 2) < 5 || (v36 & 1) != 0)
          {
            if ((v36 - 2) < 5u || (v36 & 1) == 0)
            {
              if (v36 != 4)
              {
                if (v37 == 4) {
                  goto LABEL_62;
                }
                if (v36 != 5)
                {
                  if (v37 == 5) {
                    goto LABEL_62;
                  }
                  if (v36 != 6) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

    Swift::Int v40 = v26;
    if (v25 < v22 || v23 >= v22 || v25 != v22) {
      *(void *)uint64_t v23 = *(void *)v26;
    }
    BOOL v24 = v6;
    BOOL v22 = v26;
    if (v6 <= v7) {
      goto LABEL_94;
    }
LABEL_73:
    v23 -= 8;
    uint64_t v6 = v24;
    if (v22 <= v4) {
      goto LABEL_94;
    }
  }

  if (v37 == 6)
  {
LABEL_62:
    if (v25 != v6 || v23 >= v6) {
      *(void *)uint64_t v23 = *(void *)v24;
    }
    int v42 = v24;
    if (v24 <= v7) {
      goto LABEL_94;
    }
    goto LABEL_73;
  }

LABEL_92:
  _diagnoseUnexpectedEnumCase<A>(type:)(v21, v21);
  __break(1u);
LABEL_93:
  int v42 = v7;
LABEL_94:
  sub_1000EA964((void **)&v42, &v41, &v40);
  return 1LL;
}

char *sub_1000EA720(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100002274(&qword_100407EB0);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unsigned int v14 = v11 + 32;
  int v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 16 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_1000EA818(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    size_t v6 = (v4 + (v4 < 0 ? 7uLL : 0)) & 0xFFFFFFFFFFFFFFF8LL;
    if (result != v3 || result >= &v3[v6]) {
      return (char *)memmove(result, v3, v6);
    }
  }

  return result;
}

char *sub_1000EA8BC(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 31;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -32)
  {
    char v9 = 2;
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v9,  1046LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 5;
    if (result != v3 || result >= &v3[32 * v7]) {
      return (char *)memmove(result, v3, 32 * v7);
    }
  }

  return result;
}

char *sub_1000EA964(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    char v9 = 2;
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v9,  1046LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7]) {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }

  return result;
}

char *sub_1000EAA0C(uint64_t a1)
{
  return sub_1000EA720(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000EAA20(uint64_t a1)
{
  return sub_10006AD1C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000EAA34(uint64_t a1)
{
  return sub_10006AE7C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000EAA48(uint64_t a1)
{
  return sub_10006B424(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t _s7CoreP2P14RadioResourcesO15SymbolicChannelO21__derived_enum_equalsySbAE_AEtFZ_0( unint64_t a1, char a2, unint64_t a3, char a4)
{
  if (!a2)
  {
    if (!a4) {
      return a1 == a3;
    }
    return 0LL;
  }

  if (a2 != 1) {
    return ((uint64_t (*)(void))((char *)&loc_1000EAB18 + 4 * byte_100345673[a1]))();
  }
  if (a4 != 1
    || (_DWORD)a1 != (_DWORD)a3
    || ((0x801004u >> ((a1 >> 29) & 0xF8)) & 0xFFC) != ((0x801004u >> ((a3 >> 29) & 0xF8)) & 0xFFC))
  {
    return 0LL;
  }

  switch(BYTE5(a1))
  {
    case 2:
      if (BYTE5(a3) != 2) {
        return 0LL;
      }
      uint64_t result = 1LL;
      break;
    case 3:
      if (BYTE5(a3) != 3) {
        return 0LL;
      }
      uint64_t result = 1LL;
      break;
    case 4:
      if (BYTE5(a3) != 4) {
        return 0LL;
      }
      uint64_t result = 1LL;
      break;
    case 5:
      if (BYTE5(a3) != 5) {
        return 0LL;
      }
      uint64_t result = 1LL;
      break;
    case 6:
      if (BYTE5(a3) != 6) {
        return 0LL;
      }
      uint64_t result = 1LL;
      break;
    default:
      uint64_t result = 1LL;
      break;
  }

  return result;
}

uint64_t sub_1000EABF8(unint64_t a1, unint64_t a2)
{
  if ((_DWORD)a1 != (_DWORD)a2
    || ((0x801004u >> ((a1 >> 29) & 0xF8)) & 0xFFC) != ((0x801004u >> ((a2 >> 29) & 0xF8)) & 0xFFC))
  {
    return 0LL;
  }

  switch(BYTE5(a1))
  {
    case 2:
      uint64_t v2 = 0LL;
      if (BYTE5(a2) == 2) {
        goto LABEL_17;
      }
      break;
    case 3:
      uint64_t v2 = 0LL;
      if (BYTE5(a2) == 3) {
        goto LABEL_17;
      }
      break;
    case 4:
      uint64_t v2 = 0LL;
      if (BYTE5(a2) == 4) {
        goto LABEL_17;
      }
      break;
    case 5:
      uint64_t v2 = 0LL;
      if (BYTE5(a2) == 5) {
        goto LABEL_17;
      }
      break;
    case 6:
      uint64_t v2 = 0LL;
      if (BYTE5(a2) == 6) {
        goto LABEL_17;
      }
      break;
    default:
      uint64_t v2 = 0LL;
      if (((a1 & 0x10000000000LL) == 0) != ((a2 >> 40) & 1))
      {
LABEL_17:
        if (BYTE6(a2) == BYTE6(a1)) {
          uint64_t v2 = ((a1 & 0x100000000000000LL) == 0) ^ HIBYTE(a2) & 1u;
        }
      }

      break;
  }

  return v2;
}

unint64_t _s7CoreP2P14RadioResourcesO8PriorityO8rawValueAESgSi_tcfC_0(unint64_t result)
{
  if (result >= 0xD) {
    return 13LL;
  }
  return result;
}

uint64_t sub_1000EAD18(uint64_t a1)
{
  return sub_1000E8EBC( a1,  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56),  *(unsigned __int8 *)(v1 + 64),  *(unsigned __int8 *)(v1 + 65),  *(void *)(v1 + 16),  *(void *)(v1 + 24));
}

uint64_t sub_1000EAD4C(uint64_t a1)
{
  return sub_1000E901C( a1,  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(unsigned __int8 *)(v1 + 56),  *(void *)(v1 + 16),  *(void *)(v1 + 24));
}

unint64_t sub_1000EAD64()
{
  unint64_t result = qword_100407E88;
  if (!qword_100407E88)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RadioResources.Priority,  &type metadata for RadioResources.Priority);
    atomic_store(result, (unint64_t *)&qword_100407E88);
  }

  return result;
}

unint64_t sub_1000EADAC()
{
  unint64_t result = qword_100407E90;
  if (!qword_100407E90)
  {
    uint64_t v1 = sub_1000022F8(&qword_100407E98);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100407E90);
  }

  return result;
}

unint64_t sub_1000EADFC()
{
  unint64_t result = qword_100407EA0;
  if (!qword_100407EA0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RadioResources.SymbolicChannel,  &type metadata for RadioResources.SymbolicChannel);
    atomic_store(result, (unint64_t *)&qword_100407EA0);
  }

  return result;
}

unint64_t sub_1000EAE44()
{
  unint64_t result = qword_100407EA8;
  if (!qword_100407EA8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RadioResources.PreferredChannel,  &type metadata for RadioResources.PreferredChannel);
    atomic_store(result, (unint64_t *)&qword_100407EA8);
  }

  return result;
}

ValueMetadata *type metadata accessor for RadioResources()
{
  return &type metadata for RadioResources;
}

uint64_t getEnumTagSinglePayload for IEEE80211InformationElement.IEEE80211CipherSuite( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }

uint64_t storeEnumTagSinglePayload for RadioResources.Priority(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF3) {
    return ((uint64_t (*)(void))((char *)&loc_1000EAF74 + 4 * byte_100345686[v4]))();
  }
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_1000EAFA8 + 4 * byte_100345681[v4]))();
}

uint64_t sub_1000EAFA8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EAFB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000EAFB8LL);
  }
  return result;
}

uint64_t sub_1000EAFC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000EAFCCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 12;
  return result;
}

uint64_t sub_1000EAFD0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EAFD8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RadioResources.Priority()
{
  return &type metadata for RadioResources.Priority;
}

uint64_t getEnumTagSinglePayload for RadioResources.SymbolicChannel(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RadioResources.SymbolicChannel( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000EB080(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1000EB098(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)unint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RadioResources.SymbolicChannel()
{
  return &type metadata for RadioResources.SymbolicChannel;
}

uint64_t destroy for NANAttribute.DeviceLink(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

uint64_t initializeWithCopy for RadioResources.SymbolicChannel.Resolver(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for RadioResources.SymbolicChannel.Resolver(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  int v3 = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t assignWithTake for RadioResources.SymbolicChannel.Resolver(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANDataResponseReceivedEvent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANDataResponseReceivedEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RadioResources.SymbolicChannel.Resolver()
{
  return &type metadata for RadioResources.SymbolicChannel.Resolver;
}

uint64_t getEnumTagSinglePayload for RadioResources.PreferredChannel(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 7);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RadioResources.PreferredChannel( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 7) = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RadioResources.PreferredChannel()
{
  return &type metadata for RadioResources.PreferredChannel;
}

void NANMasterRank.hash(into:)(int a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 8;
  unint64_t v3 = a2 >> 16;
  unint64_t v4 = a2 >> 24;
  unint64_t v5 = HIDWORD(a2);
  unint64_t v6 = a2 >> 40;
  unint64_t v7 = HIWORD(a2);
  unint64_t v8 = HIBYTE(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
}

unint64_t sub_1000EB3C4()
{
  uint64_t v1 = 0x61466D6F646E6172LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x73736572646461LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000010LL;
  }
}

uint64_t sub_1000EB42C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000ECC44(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000EB450(uint64_t a1)
{
  unint64_t v2 = sub_1000EC2DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000EB478(uint64_t a1)
{
  unint64_t v2 = sub_1000EC2DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANMasterRank.encode(to:)(void *a1, unint64_t a2)
{
  uint64_t v5 = sub_100002274(&qword_100407EB8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100021104(a1, v9);
  unint64_t v11 = sub_1000EC2DC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANMasterRank.CodingKeys,  &type metadata for NANMasterRank.CodingKeys,  v11,  v9,  v10);
  char v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v17, v5);
  if (!v2)
  {
    char v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a2 >> 8, &v16, v5);
    v15[0] = BYTE2(a2);
    v15[1] = BYTE3(a2);
    v15[2] = BYTE4(a2);
    v15[3] = BYTE5(a2);
    v15[4] = BYTE6(a2);
    v15[5] = HIBYTE(a2);
    HIBYTE(v14) = 2;
    unint64_t v12 = sub_1000286C4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, (char *)&v14 + 7, v5, &type metadata for WiFiAddress, v12);
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NANMasterRank.hashValue.getter(unint64_t a1)
{
  Swift::UInt8 v1 = a1;
  unint64_t v2 = a1 >> 8;
  unint64_t v3 = a1 >> 16;
  unint64_t v4 = a1 >> 24;
  unint64_t v5 = HIDWORD(a1);
  unint64_t v6 = a1 >> 40;
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = HIBYTE(a1);
  Hasher.init(_seed:)(v10, 0LL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

unint64_t NANMasterRank.init(from:)(void *a1)
{
  return sub_1000EC4A0(a1);
}

unint64_t sub_1000EB704@<X0>(void *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = sub_1000EC4A0(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1000EB72C(void *a1)
{
  return NANMasterRank.encode(to:)(a1, *v1);
}

Swift::Int sub_1000EB744()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Swift::UInt8 v3 = v0[2];
  Swift::UInt8 v4 = v0[3];
  Swift::UInt8 v5 = v0[4];
  Swift::UInt8 v6 = v0[5];
  Swift::UInt8 v7 = v0[6];
  Swift::UInt8 v8 = v0[7];
  Hasher.init(_seed:)(v10, 0LL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

void sub_1000EB818()
{
  Swift::UInt8 v1 = v0[1];
  Swift::UInt8 v2 = v0[2];
  Swift::UInt8 v3 = v0[3];
  Swift::UInt8 v4 = v0[4];
  Swift::UInt8 v5 = v0[5];
  Swift::UInt8 v6 = v0[6];
  Swift::UInt8 v7 = v0[7];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
}

Swift::Int sub_1000EB8B4(uint64_t a1)
{
  Swift::UInt8 v2 = *v1;
  Swift::UInt8 v3 = v1[1];
  Swift::UInt8 v4 = v1[2];
  Swift::UInt8 v5 = v1[3];
  Swift::UInt8 v6 = v1[4];
  Swift::UInt8 v7 = v1[5];
  Swift::UInt8 v8 = v1[6];
  Swift::UInt8 v9 = v1[7];
  Hasher.init(_seed:)(v11, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  return Hasher._finalize()();
}

BOOL sub_1000EB984(uint64_t *a1, uint64_t *a2)
{
  return _s7CoreP2P13NANMasterRankV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t NANRole.description.getter(char a1)
{
  uint64_t v1 = 0x4D20726F68636E41LL;
  uint64_t v2 = 0x72657473614DLL;
  unint64_t v3 = 0x7473614D206E6F4ELL;
  if ((a1 & 1) == 0) {
    unint64_t v3 = 0xD000000000000013LL;
  }
  if (a1 != 4) {
    uint64_t v2 = v3;
  }
  if (a1 != 3) {
    uint64_t v1 = v2;
  }
  if (a1 == 2) {
    return 0x6974616D6F747541LL;
  }
  else {
    return v1;
  }
}

void NANRole.hash(into:)(uint64_t a1, char a2)
{
  switch(a2)
  {
    case 2:
      Swift::UInt v2 = 0LL;
      goto LABEL_7;
    case 3:
      Swift::UInt v2 = 1LL;
      goto LABEL_7;
    case 4:
      Swift::UInt v2 = 2LL;
LABEL_7:
      Hasher._combine(_:)(v2);
      return;
  }

  Swift::UInt8 v3 = a2 & 1;
  Hasher._combine(_:)(3uLL);
  Hasher._combine(_:)(v3);
}

BOOL static NANRole.__derived_enum_equals(_:_:)(char a1, unsigned __int8 a2)
{
  switch(a1)
  {
    case 2:
      return a2 == 2;
    case 3:
      return a2 == 3;
    case 4:
      return a2 == 4;
  }

  return (((a1 & 1) == 0) ^ a2) & 1;
}

Swift::Int NANRole.hashValue.getter(char a1)
{
  switch(a1)
  {
    case 2:
      Swift::UInt v2 = 0LL;
      break;
    case 3:
      Swift::UInt v2 = 1LL;
      break;
    case 4:
      Swift::UInt v2 = 2LL;
      break;
    default:
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(a1 & 1);
      return Hasher._finalize()();
  }

  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int sub_1000EBBBC()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v4, 0LL);
  switch(v1)
  {
    case 2:
      Swift::UInt v2 = 0LL;
      break;
    case 3:
      Swift::UInt v2 = 1LL;
      break;
    case 4:
      Swift::UInt v2 = 2LL;
      break;
    default:
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v1 & 1);
      return Hasher._finalize()();
  }

  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1000EBC50()
{
  int v1 = *v0;
  switch(v1)
  {
    case 2:
      Swift::UInt v2 = 0LL;
      goto LABEL_7;
    case 3:
      Swift::UInt v2 = 1LL;
      goto LABEL_7;
    case 4:
      Swift::UInt v2 = 2LL;
LABEL_7:
      Hasher._combine(_:)(v2);
      return;
  }

  Swift::UInt8 v3 = v1 & 1;
  Hasher._combine(_:)(3uLL);
  Hasher._combine(_:)(v3);
}

Swift::Int sub_1000EBCBC(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  switch(v2)
  {
    case 2:
      Swift::UInt v3 = 0LL;
      break;
    case 3:
      Swift::UInt v3 = 1LL;
      break;
    case 4:
      Swift::UInt v3 = 2LL;
      break;
    default:
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v2 & 1);
      return Hasher._finalize()();
  }

  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000EBD4C()
{
  int v1 = *v0;
  uint64_t v2 = 0x4D20726F68636E41LL;
  uint64_t v3 = 0x72657473614DLL;
  unint64_t v4 = 0x7473614D206E6F4ELL;
  if ((v1 & 1) == 0) {
    unint64_t v4 = 0xD000000000000013LL;
  }
  if (v1 != 4) {
    uint64_t v3 = v4;
  }
  if (v1 != 3) {
    uint64_t v2 = v3;
  }
  if (v1 == 2) {
    return 0x6974616D6F747541LL;
  }
  else {
    return v2;
  }
}

BOOL sub_1000EBE04(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  switch(v2)
  {
    case 2:
      return v3 == 2;
    case 3:
      return v3 == 3;
    case 4:
      return v3 == 4;
  }

  return (((v2 & 1) == 0) ^ v3) & 1;
}

void *NANElectionParameters.Flags.syncToSelf.unsafeMutableAddressor()
{
  return &static NANElectionParameters.Flags.syncToSelf;
}

void *NANElectionParameters.Flags.useTSFTiming.unsafeMutableAddressor()
{
  return &static NANElectionParameters.Flags.useTSFTiming;
}

void *NANElectionParameters.Flags.anchorMasterRecordUpdate.unsafeMutableAddressor()
{
  return &static NANElectionParameters.Flags.anchorMasterRecordUpdate;
}

uint64_t NANElectionParameters.flags.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t NANElectionParameters.cluster.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t NANElectionParameters.cluster.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + 8) = result;
  *(_BYTE *)(v2 + 16) = a2;
  *(_DWORD *)(v2 + 20) = HIDWORD(a2);
  return result;
}

uint64_t NANElectionParameters.localTSF.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t NANBeacon.Metadata.tsf.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t NANElectionParameters.rxBeaconTSF.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t NANElectionParameters.rxBeaconTSF.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

void NANElectionParameters.hash(into:)()
{
  switch(v17)
  {
    case 4:
      Hasher._combine(_:)(2uLL);
      break;
    case 3:
      Hasher._combine(_:)(1uLL);
      break;
    case 2:
      Hasher._combine(_:)(0LL);
      break;
    default:
      Swift::UInt8 v1 = v17 & 1;
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v1);
      break;
  }

  Hasher._combine(_:)(*(_BYTE *)(v0 + 1));
  Swift::UInt8 v2 = *(_BYTE *)(v0 + 3);
  Swift::UInt8 v3 = *(_BYTE *)(v0 + 4);
  Swift::UInt8 v4 = *(_BYTE *)(v0 + 5);
  Swift::UInt8 v5 = *(_BYTE *)(v0 + 6);
  Swift::UInt8 v6 = *(_BYTE *)(v0 + 7);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 2));
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Swift::UInt32 v15 = *(_DWORD *)(v0 + 20);
  Swift::UInt8 v7 = *(_BYTE *)(v0 + 9);
  Swift::UInt8 v8 = *(_BYTE *)(v0 + 10);
  Swift::UInt8 v9 = *(_BYTE *)(v0 + 11);
  Swift::UInt8 v10 = *(_BYTE *)(v0 + 12);
  Swift::UInt8 v11 = *(_BYTE *)(v0 + 13);
  Swift::UInt8 v12 = *(_BYTE *)(v0 + 14);
  Swift::UInt8 v13 = *(_BYTE *)(v0 + 15);
  Swift::UInt8 v14 = *(_BYTE *)(v0 + 16);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 8));
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(*(void *)(v0 + 24));
  Hasher._combine(_:)(*(void *)(v0 + 32));
}

Swift::Int NANElectionParameters.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000EC0EC()
{
  __int128 v1 = v0[1];
  __int128 v4 = *v0;
  __int128 v5 = v1;
  uint64_t v6 = *((void *)v0 + 4);
  Hasher.init(_seed:)(v3, 0LL);
  NANElectionParameters.hash(into:)();
  return Hasher._finalize()();
}

void sub_1000EC13C()
{
}

Swift::Int sub_1000EC174(uint64_t a1)
{
  __int128 v2 = v1[1];
  __int128 v5 = *v1;
  __int128 v6 = v2;
  uint64_t v7 = *((void *)v1 + 4);
  Hasher.init(_seed:)(v4, a1);
  NANElectionParameters.hash(into:)();
  return Hasher._finalize()();
}

BOOL sub_1000EC1C0(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return _s7CoreP2P21NANElectionParametersV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v5, (uint64_t)v7);
}

BOOL _s7CoreP2P13NANMasterRankV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  LOBYTE(v6) = BYTE2(a1);
  BYTE1(v6) = BYTE3(a1);
  BYTE2(v6) = BYTE4(a1);
  HIBYTE(v6) = BYTE5(a1);
  LOBYTE(v7) = BYTE6(a1);
  HIBYTE(v7) = HIBYTE(a1);
  LOBYTE(v4) = BYTE2(a2);
  BYTE1(v4) = BYTE3(a2);
  BYTE2(v4) = BYTE4(a2);
  HIBYTE(v4) = BYTE5(a2);
  LOBYTE(v5) = BYTE6(a2);
  HIBYTE(v5) = HIBYTE(a2);
  return v6 == v4 && v7 == v5;
}

unint64_t sub_1000EC2DC()
{
  unint64_t result = qword_100407EC0;
  if (!qword_100407EC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100345EF0, &type metadata for NANMasterRank.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100407EC0);
  }

  return result;
}

BOOL _s7CoreP2P21NANElectionParametersV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v4 = v9;
  switch(v9)
  {
    case 4u:
      sub_1000EC640(&v7, &v10);
      if (v10 != 4) {
        return 0LL;
      }
      goto LABEL_12;
    case 3u:
      sub_1000EC640(&v7, &v10);
      if (v10 != 3) {
        return 0LL;
      }
      goto LABEL_12;
    case 2u:
      sub_1000EC640(&v7, &v10);
      if (v10 != 2) {
        return 0LL;
      }
LABEL_12:
      if (*(unsigned __int8 *)(a1 + 1) == *(unsigned __int8 *)(a2 + 1))
      {
        BOOL v6 = *(_DWORD *)(a1 + 2) == *(_DWORD *)(a2 + 2)
          && *(unsigned __int16 *)(a1 + 6) == *(unsigned __int16 *)(a2 + 6);
        if (v6
          && sub_1001C75E8( *(void *)(a1 + 8),  *(unsigned __int8 *)(a1 + 16) | ((unint64_t)*(unsigned int *)(a1 + 20) << 32),  *(void *)(a2 + 8),  *(unsigned __int8 *)(a2 + 16) | ((unint64_t)*(unsigned int *)(a2 + 20) << 32))
          && *(void *)(a1 + 24) == *(void *)(a2 + 24))
        {
          return *(void *)(a1 + 32) == *(void *)(a2 + 32);
        }
      }

      return 0LL;
  }

  sub_1000EC640(&v7, &v10);
  BOOL result = 0LL;
  return result;
}

unint64_t sub_1000EC4A0(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_100407F18);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  BOOL v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_1000EC2DC();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANMasterRank.CodingKeys,  &type metadata for NANMasterRank.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return sub_100002AC4(a1);
  }
  HIBYTE(v18) = 0;
  unsigned __int8 v10 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v18 + 7, v3);
  BYTE6(v18) = 1;
  unsigned __int8 v11 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v18 + 6, v3);
  HIBYTE(v17) = 2;
  unint64_t v12 = sub_1000290F8();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v18,  &type metadata for WiFiAddress,  (char *)&v17 + 7,  v3,  &type metadata for WiFiAddress,  v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v13 = v18;
  uint64_t v14 = BYTE1(v18);
  uint64_t v15 = *(unsigned int *)((char *)&v18 + 2);
  sub_100002AC4(a1);
  return (v13 << 16) | (v14 << 24) | (v15 << 32) | ((unint64_t)v11 << 8) | v10;
}

_BYTE *sub_1000EC640(_BYTE *a1, _BYTE *a2)
{
  *a2 = *a1;
  return a2;
}

unint64_t sub_1000EC654()
{
  unint64_t result = qword_100407EC8;
  if (!qword_100407EC8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NANMasterRank, &type metadata for NANMasterRank);
    atomic_store(result, (unint64_t *)&qword_100407EC8);
  }

  return result;
}

unint64_t sub_1000EC69C()
{
  unint64_t result = qword_100407ED0;
  if (!qword_100407ED0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NANRole, &type metadata for NANRole);
    atomic_store(result, (unint64_t *)&qword_100407ED0);
  }

  return result;
}

unint64_t sub_1000EC6E4()
{
  unint64_t result = qword_100407ED8;
  if (!qword_100407ED8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANElectionParameters.Flags,  &type metadata for NANElectionParameters.Flags);
    atomic_store(result, (unint64_t *)&qword_100407ED8);
  }

  return result;
}

unint64_t sub_1000EC72C()
{
  unint64_t result = qword_100407EE0;
  if (!qword_100407EE0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANElectionParameters.Flags,  &type metadata for NANElectionParameters.Flags);
    atomic_store(result, (unint64_t *)&qword_100407EE0);
  }

  return result;
}

unint64_t sub_1000EC774()
{
  unint64_t result = qword_100407EE8;
  if (!qword_100407EE8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANElectionParameters.Flags,  &type metadata for NANElectionParameters.Flags);
    atomic_store(result, (unint64_t *)&qword_100407EE8);
  }

  return result;
}

unint64_t sub_1000EC7BC()
{
  unint64_t result = qword_100407EF0;
  if (!qword_100407EF0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANElectionParameters.Flags,  &type metadata for NANElectionParameters.Flags);
    atomic_store(result, (unint64_t *)&qword_100407EF0);
  }

  return result;
}

unint64_t sub_1000EC804()
{
  unint64_t result = qword_100407EF8;
  if (!qword_100407EF8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANElectionParameters,  &type metadata for NANElectionParameters);
    atomic_store(result, (unint64_t *)&qword_100407EF8);
  }

  return result;
}

ValueMetadata *type metadata accessor for NANMasterRank()
{
  return &type metadata for NANMasterRank;
}

uint64_t getEnumTagSinglePayload for NANRole(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFC)
  {
    unsigned int v6 = *a1;
    if (v6 >= 2)
    {
      unsigned int v7 = (v6 + 2147483646) & 0x7FFFFFFF;
      uint64_t result = v7 - 2;
      if (v7 > 2) {
        return result;
      }
    }

    return 0LL;
  }

  unsigned int v2 = a2 + 4;
  if (a2 + 4 >= 0xFFFF00) {
    unsigned int v3 = 4;
  }
  else {
    unsigned int v3 = 2;
  }
  if (v2 >> 8 < 0xFF) {
    unsigned int v3 = 1;
  }
  if (v2 >= 0x100) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_1000EC8A8 + 4 * asc_100345A50[v4]))();
}

uint64_t storeEnumTagSinglePayload for NANRole(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 4;
  if (a3 + 4 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    LODWORD(v5) = v4;
  }
  else {
    LODWORD(v5) = 0;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1000EC954 + 4 * byte_100345A5A[v5]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000EC988 + 4 * byte_100345A55[v5]))();
}

uint64_t sub_1000EC988(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EC990(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000EC998LL);
  }
  return result;
}

uint64_t sub_1000EC9A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000EC9ACLL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1000EC9B0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EC9B8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANRole()
{
  return &type metadata for NANRole;
}

uint64_t getEnumTagSinglePayload for NANElectionParameters(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFC && a1[40]) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *a1;
  if (v3 >= 2) {
    int v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 3;
  }
  else {
    int v4 = -4;
  }
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NANElectionParameters( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 40) = 0;
    }
    if (a2) {
      *(_BYTE *)uint64_t result = a2 + 4;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANElectionParameters()
{
  return &type metadata for NANElectionParameters;
}

ValueMetadata *type metadata accessor for NANElectionParameters.Flags()
{
  return &type metadata for NANElectionParameters.Flags;
}

uint64_t storeEnumTagSinglePayload for NANMasterRank.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000ECAEC + 4 * byte_100345A64[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000ECB20 + 4 * byte_100345A5F[v4]))();
}

uint64_t sub_1000ECB20(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000ECB28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000ECB30LL);
  }
  return result;
}

uint64_t sub_1000ECB3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000ECB44LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000ECB48(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000ECB50(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANMasterRank.CodingKeys()
{
  return &type metadata for NANMasterRank.CodingKeys;
}

unint64_t sub_1000ECB70()
{
  unint64_t result = qword_100407F00;
  if (!qword_100407F00)
  {
    unint64_t result = swift_getWitnessTable(&unk_100345EC8, &type metadata for NANMasterRank.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100407F00);
  }

  return result;
}

unint64_t sub_1000ECBB8()
{
  unint64_t result = qword_100407F08;
  if (!qword_100407F08)
  {
    unint64_t result = swift_getWitnessTable(&unk_100345E38, &type metadata for NANMasterRank.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100407F08);
  }

  return result;
}

unint64_t sub_1000ECC00()
{
  unint64_t result = qword_100407F10;
  if (!qword_100407F10)
  {
    unint64_t result = swift_getWitnessTable(&unk_100345E60, &type metadata for NANMasterRank.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100407F10);
  }

  return result;
}

uint64_t sub_1000ECC44(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x8000000100364600LL;
    if (a2 == 0x8000000100364600LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100364600LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x61466D6F646E6172LL && a2 == 0xEC000000726F7463LL)
  {
    unint64_t v6 = 0xEC000000726F7463LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61466D6F646E6172LL, 0xEC000000726F7463LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 0x73736572646461LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
    return 2LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73736572646461LL, 0xE700000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

void *IPv4Address.any.unsafeMutableAddressor()
{
  return &static IPv4Address.any;
}

BOOL IPv4Address.isLinkLocal.getter(unsigned __int16 a1)
{
  return a1 == 65193;
}

BOOL IPv6Address.isLinkLocal.getter(__int16 a1)
{
  return (a1 & 0xC0FF) == 33022LL;
}

uint64_t IPv4Address.init(_:)(uint64_t a1, unint64_t a2)
{
  unsigned int v5 = v4;
  sub_1000208D8(a1, a2);
  return v5;
}

uint64_t IPv6Address.init(_:scopedInterface:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = v4;
  sub_1000208D8(a1, a2);
  return v5;
}

uint64_t IPv4Address.data.getter(int a1)
{
  int v7 = a1;
  v8[3] = &type metadata for UnsafeRawBufferPointer;
  v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = &v7;
  v8[1] = v8;
  __int16 v1 = sub_100021104(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  unsigned int v2 = (_BYTE *)*v1;
  if (*v1 && (int v3 = (_BYTE *)v1[1], v4 = v3 - v2, v3 != v2))
  {
    if (v4 <= 14)
    {
      uint64_t v5 = sub_1000FAED4(v2, v3);
    }

    else if ((unint64_t)v4 >= 0x7FFFFFFF)
    {
      uint64_t v5 = sub_1000FAF94((uint64_t)v2, (uint64_t)v3);
    }

    else
    {
      uint64_t v5 = sub_1000FB00C((uint64_t)v2, (uint64_t)v3);
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  sub_100002AC4(v8);
  return v5;
}

uint64_t IPv4Address.description.getter(int a1)
{
  unsigned int v2 = (char *)swift_slowAlloc(16LL, -1LL);
  int v5 = a1;
  inet_ntop(2, &v5, v2, 0x10u);
  uint64_t v3 = String.init(cString:)(v2);
  swift_slowDealloc(v2, -1LL, -1LL);
  return v3;
}

uint64_t IPv4Address.customMirror.getter(int a1)
{
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v14 = a1;
  uint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t v9 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for Mirror.AncestorRepresentation.generated(_:),  v2);
  uint64_t v10 = sub_100002274(&qword_100405DC0);
  uint64_t v11 = sub_10005AC9C((unint64_t *)&qword_10040C630, &qword_100405DC0);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)( &v14,  &v13,  v8,  v5,  &type metadata for IPv4Address,  v10,  v11);
}

void IPv4Address.hash(into:)(int a1, Swift::UInt32 a2)
{
}

void *IPv4Address.broadcast.unsafeMutableAddressor()
{
  return &static IPv4Address.broadcast;
}

Swift::Int IPv4Address.hashValue.getter(Swift::UInt32 a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1000ED288()
{
  int v1 = *v0;
  uint64_t v2 = (char *)swift_slowAlloc(16LL, -1LL);
  int v5 = v1;
  inet_ntop(2, &v5, v2, 0x10u);
  uint64_t v3 = String.init(cString:)(v2);
  swift_slowDealloc(v2, -1LL, -1LL);
  return v3;
}

uint64_t sub_1000ED330(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v15 = *v1;
  int v14 = _swiftEmptyArrayStorage;
  uint64_t v10 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))( v6,  enum case for Mirror.AncestorRepresentation.generated(_:),  v3);
  uint64_t v11 = sub_100002274(&qword_100405DC0);
  uint64_t v12 = sub_10005AC9C((unint64_t *)&qword_10040C630, &qword_100405DC0);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(&v15, &v14, v9, v6, a1, v11, v12);
}

void *IPv4Address.init(from:)(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = sub_100021104(a1, v3);
  dispatch thunk of Decoder.singleValueContainer()(v9, v3, v4);
  if (!v1)
  {
    uint64_t v6 = v10;
    uint64_t v7 = v11;
    sub_100021104(v9, v10);
    uint64_t v5 = (void *)dispatch thunk of SingleValueDecodingContainer.decode(_:)(v6, v7);
    sub_100002AC4(v9);
  }

  sub_100002AC4(a1);
  return v5;
}

uint64_t IPv4Address.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100021104(a1, v3);
  dispatch thunk of Encoder.singleValueContainer()(v8, v3, v4);
  uint64_t v5 = v9;
  uint64_t v6 = v10;
  sub_1000237C8((uint64_t)v8, v9);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(a2, v5, v6);
  return sub_100002AC4(v8);
}

uint64_t sub_1000ED5C4@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100021104(a1, v5);
  dispatch thunk of Decoder.singleValueContainer()(v11, v5, v6);
  if (v2) {
    return sub_100002AC4(a1);
  }
  uint64_t v7 = v12;
  uint64_t v8 = v13;
  sub_100021104(v11, v12);
  int v9 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v7, v8);
  sub_100002AC4(v11);
  uint64_t result = sub_100002AC4(a1);
  *a2 = v9;
  return result;
}

uint64_t sub_1000ED680(void *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100021104(a1, v3);
  dispatch thunk of Encoder.singleValueContainer()(v8, v3, v4);
  uint64_t v5 = v9;
  uint64_t v6 = v10;
  sub_1000237C8((uint64_t)v8, v9);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(v2, v5, v6);
  return sub_100002AC4(v8);
}

uint64_t IPv6Address.address.setter(uint64_t result, uint64_t a2)
{
  *uint64_t v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t IPv6Address.scopedInterfaceName.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3;
}

uint64_t IPv6Address.scopedInterfaceName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 24));
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t IPv6Address.data.getter(uint64_t a1, uint64_t a2)
{
  v9[0] = a1;
  v9[1] = a2;
  void v8[3] = &type metadata for UnsafeRawBufferPointer;
  v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = v9;
  v8[1] = &v10;
  uint64_t v2 = sub_100021104(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  uint64_t v3 = (_BYTE *)*v2;
  if (*v2 && (uint64_t v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = sub_1000FAED4(v3, v4);
    }

    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = sub_1000FAF94((uint64_t)v3, (uint64_t)v4);
    }

    else
    {
      uint64_t v6 = sub_1000FB00C((uint64_t)v3, (uint64_t)v4);
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  sub_100002AC4(v8);
  return v6;
}

uint64_t IPv6Address.description.getter(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = (char *)swift_slowAlloc(46LL, -1LL);
  uint64_t v18 = a1;
  unint64_t v19 = a2;
  inet_ntop(30, &v18, v8, 0x2Eu);
  uint64_t v9 = String.init(cString:)(v8);
  unint64_t v11 = v10;
  if (a4)
  {
    uint64_t v18 = 37LL;
    unint64_t v19 = 0xE100000000000000LL;
    v12._countAndFlagsBits = a3;
    v12._object = a4;
    String.append(_:)(v12);
    uint64_t v14 = v18;
    uint64_t v13 = (void *)v19;
  }

  else
  {
    uint64_t v14 = 0LL;
    uint64_t v13 = (void *)0xE000000000000000LL;
  }

  uint64_t v18 = v9;
  unint64_t v19 = v11;
  swift_bridgeObjectRetain(v11);
  v15._countAndFlagsBits = v14;
  v15._object = v13;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v11);
  uint64_t v16 = v18;
  swift_slowDealloc(v8, -1LL, -1LL);
  return v16;
}

uint64_t IPv6Address.customMirror.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v21[0] = a1;
  v21[1] = a2;
  v21[2] = a3;
  v21[3] = a4;
  int v20 = _swiftEmptyArrayStorage;
  uint64_t v15 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v14, 1LL, 1LL, v15);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))( v11,  enum case for Mirror.AncestorRepresentation.generated(_:),  v8);
  swift_bridgeObjectRetain(a4);
  uint64_t v16 = sub_100002274(&qword_100405DC0);
  uint64_t v17 = sub_10005AC9C((unint64_t *)&qword_10040C630, &qword_100405DC0);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)( v21,  &v20,  v14,  v11,  &type metadata for IPv6Address,  v16,  v17);
}

void IPv6Address.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v11[0] = a2;
  v11[1] = a3;
  uint64_t v8 = sub_1000EF854((uint64_t)v11, (uint64_t)&v12);
  unint64_t v10 = v9;
  Data.hash(into:)(a1, v8, v9);
  sub_1000208D8(v8, v10);
  if (a5)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(a5);
    String.hash(into:)(a1, a4, a5);
    swift_bridgeObjectRelease(a5);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

unint64_t IPv6Address.multicastMACAddress.getter(uint64_t a1, uint64_t a2)
{
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v2 = sub_1000EF854((uint64_t)v10, (uint64_t)&v11);
  unint64_t v4 = v3;
  unsigned __int8 v5 = Data.subscript.getter(12LL, v2, v3);
  unsigned __int8 v6 = Data.subscript.getter(13LL, v2, v4);
  unsigned __int8 v7 = Data.subscript.getter(14LL, v2, v4);
  unsigned __int8 v8 = Data.subscript.getter(15LL, v2, v4);
  sub_1000208D8(v2, v4);
  return ((unint64_t)v6 << 24) | ((unint64_t)v5 << 16) | ((unint64_t)v7 << 32) | ((unint64_t)v8 << 40) | 0x3333;
}

void sub_1000EDCD0()
{
  uint64_t v0 = *(void *)&in6addr_any.__u6_addr32[2];
  static IPv6Address.any = *(void *)in6addr_any.__u6_addr8;
  *(void *)algn_100410758 = v0;
  qword_100410760 = 0LL;
  unk_100410768 = 0LL;
}

uint64_t *IPv6Address.any.unsafeMutableAddressor()
{
  if (qword_100404170 != -1) {
    swift_once(&qword_100404170, sub_1000EDCD0);
  }
  return &static IPv6Address.any;
}

uint64_t static IPv6Address.any.getter()
{
  if (qword_100404170 != -1) {
    swift_once(&qword_100404170, sub_1000EDCD0);
  }
  uint64_t v0 = static IPv6Address.any;
  swift_bridgeObjectRetain(unk_100410768);
  return v0;
}

void sub_1000EDDA0()
{
  uint64_t v0 = *(void *)&in6addr_any.__u6_addr32[2];
  static IPv6Address.broadcast = *(void *)in6addr_any.__u6_addr8;
  *(void *)algn_100410778 = v0;
  qword_100410780 = 0LL;
  unk_100410788 = 0LL;
}

uint64_t *IPv6Address.broadcast.unsafeMutableAddressor()
{
  if (qword_100404178 != -1) {
    swift_once(&qword_100404178, sub_1000EDDA0);
  }
  return &static IPv6Address.broadcast;
}

uint64_t static IPv6Address.broadcast.getter()
{
  if (qword_100404178 != -1) {
    swift_once(&qword_100404178, sub_1000EDDA0);
  }
  uint64_t v0 = static IPv6Address.broadcast;
  swift_bridgeObjectRetain(unk_100410788);
  return v0;
}

Swift::Int IPv6Address.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v13[0] = a1;
  v13[1] = a2;
  uint64_t v8 = sub_1000EF854((uint64_t)v13, (uint64_t)&v14);
  unint64_t v10 = v9;
  Data.hash(into:)(v12, v8, v9);
  sub_1000208D8(v8, v10);
  if (a4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(a4);
    String.hash(into:)(v12, a3, a4);
    swift_bridgeObjectRelease(a4);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  return Hasher._finalize()();
}

Swift::Int sub_1000EDF5C()
{
  return IPv6Address.hashValue.getter(*v0, v0[1], v0[2], v0[3]);
}

void sub_1000EDF68(uint64_t a1)
{
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v4 = v1[3];
  v9[0] = *v1;
  v9[1] = v3;
  uint64_t v6 = sub_1000EF854((uint64_t)v9, (uint64_t)&v10);
  unint64_t v8 = v7;
  Data.hash(into:)(a1, v6, v7);
  sub_1000208D8(v6, v8);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v4);
    String.hash(into:)(a1, v5, v4);
    swift_bridgeObjectRelease(v4);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

Swift::Int sub_1000EE048(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v4 = v1[3];
  Hasher.init(_seed:)(v10, a1);
  v11[0] = v2;
  v11[1] = v3;
  uint64_t v6 = sub_1000EF854((uint64_t)v11, (uint64_t)&v12);
  unint64_t v8 = v7;
  Data.hash(into:)(v10, v6, v7);
  sub_1000208D8(v6, v8);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v4);
    String.hash(into:)(v10, v5, v4);
    swift_bridgeObjectRelease(v4);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  return Hasher._finalize()();
}

uint64_t sub_1000EE130()
{
  return IPv6Address.description.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000EE13C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v10 = *v1;
  uint64_t v11 = *((void *)v1 + 2);
  uint64_t v12 = *((void *)v1 + 3);
  __int128 v19 = v10;
  uint64_t v20 = v11;
  uint64_t v21 = v12;
  uint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v13 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v9, 1LL, 1LL, v13);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))( v6,  enum case for Mirror.AncestorRepresentation.generated(_:),  v3);
  swift_bridgeObjectRetain(v12);
  uint64_t v14 = sub_100002274(&qword_100405DC0);
  uint64_t v15 = sub_10005AC9C((unint64_t *)&qword_10040C630, &qword_100405DC0);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(&v19, &v18, v9, v6, a1, v14, v15);
}

uint64_t sub_1000EE298(uint64_t *a1, uint64_t *a2)
{
  return _s7CoreP2P11IPv6AddressV2eeoiySbAC_ACtFZ_0(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

void *IPv6Address.init(from:)(void *a1)
{
  uint64_t result = sub_1000EE9AC(a1);
  if (v1) {
    return (void *)v3;
  }
  return result;
}

uint64_t IPv6Address.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EE748(a1, a2, a3);
}

void *sub_1000EE2F0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1000EE9AC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }

  return result;
}

uint64_t sub_1000EE31C(void *a1)
{
  return sub_1000EE748(a1, *v1, v1[1]);
}

uint64_t Layer3Protocol.description.getter()
{
  uint64_t countAndFlagsBits = String.uppercased()()._countAndFlagsBits;
  swift_bridgeObjectRelease(0xE300000000000000LL);
  return countAndFlagsBits;
}

uint64_t Layer3Protocol.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 7365749LL;
  }
  else {
    return 7365492LL;
  }
}

void *Layer3Protocol.defaultValue.unsafeMutableAddressor()
{
  return &static Layer3Protocol.defaultValue;
}

CoreP2P::Layer3Protocol_optional __swiftcall Layer3Protocol.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D4AD8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1) {
    v4.value = CoreP2P_Layer3Protocol_udp;
  }
  else {
    v4.value = CoreP2P_Layer3Protocol_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

_UNKNOWN **static Layer3Protocol.allCases.getter()
{
  return &off_1003D7010;
}

uint64_t sub_1000EE404(char *a1, char *a2)
{
  return sub_10002A92C(*a1, *a2);
}

uint64_t sub_1000EE410@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v3._uint64_t countAndFlagsBits = *a1;
  CoreP2P::Layer3Protocol_optional v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D4AD8, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_1000EE46C(uint64_t *a1@<X8>)
{
  if (*v1) {
    uint64_t v2 = 7365749LL;
  }
  else {
    uint64_t v2 = 7365492LL;
  }
  *a1 = v2;
  a1[1] = 0xE300000000000000LL;
}

void sub_1000EE490(void *a1@<X8>)
{
  *a1 = &off_1003D7038;
}

Swift::Int sub_1000EE4A0()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v4, 0LL);
  if (v1) {
    uint64_t v2 = 7365749LL;
  }
  else {
    uint64_t v2 = 7365492LL;
  }
  String.hash(into:)(v4, v2, 0xE300000000000000LL);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  return Hasher._finalize()();
}

uint64_t sub_1000EE500(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 7365749LL;
  }
  else {
    uint64_t v2 = 7365492LL;
  }
  String.hash(into:)(a1, v2, 0xE300000000000000LL);
  return swift_bridgeObjectRelease(0xE300000000000000LL);
}

Swift::Int sub_1000EE534(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  if (v2) {
    uint64_t v3 = 7365749LL;
  }
  else {
    uint64_t v3 = 7365492LL;
  }
  String.hash(into:)(v5, v3, 0xE300000000000000LL);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  return Hasher._finalize()();
}

uint64_t sub_1000EE590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000EEEF4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000EE5EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000EEEF4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000EE638()
{
  uint64_t countAndFlagsBits = String.uppercased()()._countAndFlagsBits;
  swift_bridgeObjectRelease(0xE300000000000000LL);
  return countAndFlagsBits;
}

uint64_t _s7CoreP2P11IPv6AddressV2eeoiySbAC_ACtFZ_0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 != a5 || a2 != a6) {
    return 0LL;
  }
  uint64_t result = (a4 | a8) == 0;
  if (a4 && a8)
  {
    if (a3 == a7 && a4 == a8) {
      return 1LL;
    }
    else {
      return _stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, a7, a8, 0LL);
    }
  }

  return result;
}

uint64_t sub_1000EE748(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100021104(a1, v5);
  dispatch thunk of Encoder.unkeyedContainer()(v16, v5, v6);
  v15[0] = a2;
  v15[1] = a3;
  uint64_t v7 = sub_1000EF854((uint64_t)v15, (uint64_t)v16);
  unint64_t v9 = v8;
  v14[0] = v7;
  v14[1] = v8;
  uint64_t v10 = v17;
  uint64_t v11 = v18;
  sub_1000237C8((uint64_t)v16, v17);
  unint64_t v12 = sub_10005CD78();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v14, &type metadata for Data, v12, v10, v11);
  sub_1000208D8(v7, v9);
  return sub_100002AC4(v16);
}

uint64_t _s7CoreP2P14Layer3ProtocolO8dnsLabelACSgSS_tcfC_0(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3)
  {
    swift_bridgeObjectRelease(a2);
    return 2LL;
  }

  uint64_t v5 = sub_1000F01B8(a1, a2);
  if (!v6) {
    goto LABEL_14;
  }
  uint64_t v7 = v6;
  if (v5 != 95 || v6 != 0xE100000000000000LL)
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, 95LL, 0xE100000000000000LL, 0LL);
    swift_bridgeObjectRelease(v7);
    if ((v9 & 1) != 0) {
      goto LABEL_10;
    }
LABEL_14:
    v25._uint64_t countAndFlagsBits = a1;
    v25._object = (void *)a2;
    Swift::Int v26 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D4AD8, v25);
    swift_bridgeObjectRelease(a2);
    if (v26 == 1) {
      unsigned int v23 = 1;
    }
    else {
      unsigned int v23 = 2;
    }
    BOOL v24 = v26 == 0;
    goto LABEL_18;
  }

  swift_bridgeObjectRelease(0xE100000000000000LL);
LABEL_10:
  unint64_t v10 = String.index(after:)(15LL, a1, a2);
  unint64_t v11 = sub_1000F0340(v10, a1, a2);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  swift_bridgeObjectRelease(a2);
  uint64_t v18 = static String._fromSubstring(_:)(v11, v13, v15, v17);
  uint64_t v20 = v19;
  swift_bridgeObjectRelease(v17);
  v21._uint64_t countAndFlagsBits = v18;
  v21._object = v20;
  Swift::Int v22 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D4AD8, v21);
  swift_bridgeObjectRelease(v20);
  if (v22 == 1) {
    unsigned int v23 = 1;
  }
  else {
    unsigned int v23 = 2;
  }
  BOOL v24 = v22 == 0;
LABEL_18:
  if (v24) {
    return 0LL;
  }
  else {
    return v23;
  }
}

void *sub_1000EE9AC(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = sub_100021104(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v13, v3, v4);
  if (!v1)
  {
    uint64_t v6 = v14;
    uint64_t v7 = v15;
    sub_1000237C8((uint64_t)v13, v14);
    uint64_t v8 = UnkeyedDecodingContainer.decodeData(with:)(16LL, v6, v7);
    unint64_t v10 = v9;
    sub_100020AFC(v8, v9);
    sub_100208BAC(v8, v10);
    uint64_t v5 = v12;
    sub_1000208D8(v8, v10);
    sub_1000208D8(v8, v10);
    sub_100002AC4(v13);
  }

  sub_100002AC4(a1);
  return v5;
}

unint64_t sub_1000EEBAC()
{
  unint64_t result = qword_100407F20;
  if (!qword_100407F20)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for IPv4Address, &type metadata for IPv4Address);
    atomic_store(result, (unint64_t *)&qword_100407F20);
  }

  return result;
}

unint64_t sub_1000EEBF4()
{
  unint64_t result = qword_100407F28;
  if (!qword_100407F28)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for IPv6Address, &type metadata for IPv6Address);
    atomic_store(result, (unint64_t *)&qword_100407F28);
  }

  return result;
}

uint64_t sub_1000EEC38()
{
  return sub_10005AC9C(&qword_100407F30, &qword_100407F38);
}

unint64_t sub_1000EEC60()
{
  unint64_t result = qword_100407F40;
  if (!qword_100407F40)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Layer3Protocol,  &type metadata for Layer3Protocol);
    atomic_store(result, (unint64_t *)&qword_100407F40);
  }

  return result;
}

ValueMetadata *type metadata accessor for IPv4Address()
{
  return &type metadata for IPv4Address;
}

uint64_t initializeWithCopy for IPv6Address(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

void *assignWithCopy for IPv6Address(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  uint64_t v4 = a2[3];
  uint64_t v5 = a1[3];
  a1[3] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t assignWithTake for IPv6Address(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for IPv6Address(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IPv6Address(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IPv6Address()
{
  return &type metadata for IPv6Address;
}

uint64_t storeEnumTagSinglePayload for Layer3Protocol(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000EEE74 + 4 * byte_100345F45[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000EEEA8 + 4 * byte_100345F40[v4]))();
}

uint64_t sub_1000EEEA8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EEEB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000EEEB8LL);
  }
  return result;
}

uint64_t sub_1000EEEC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000EEECCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000EEED0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EEED8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Layer3Protocol()
{
  return &type metadata for Layer3Protocol;
}

unint64_t sub_1000EEEF4()
{
  unint64_t result = qword_100407F48;
  if (!qword_100407F48)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Layer3Protocol,  &type metadata for Layer3Protocol);
    atomic_store(result, (unint64_t *)&qword_100407F48);
  }

  return result;
}

uint64_t static DNSRecords.createPeerLossRecord(for:hostname:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain(a3);
  WiFiAddress.ipv6LinkLocalAddress.getter(v7);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  a4[3] = (uint64_t)&type metadata for DNSRecords.AAAA;
  a4[4] = (uint64_t)&protocol witness table for DNSRecords.AAAA;
  uint64_t result = swift_allocObject(&unk_1003E4618, 80LL, 7LL);
  *a4 = result;
  *(_BYTE *)(result + 16) = 27;
  *(void *)(result + 24) = a2;
  *(void *)(result + 32) = a3;
  *(_BYTE *)(result + 40) = 1;
  *(void *)(result + 48) = v9;
  *(void *)(result + 56) = v11;
  *(void *)(result + 64) = v13;
  *(void *)(result + 72) = v15;
  return result;
}

void static DNSRecords.createRecord(with:value:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4 >> 60 != 15)
  {
    if (qword_100404198 != -1) {
      swift_once(&qword_100404198, sub_1000F9A98);
    }
    __asm { BR              X13 }
  }

  if (qword_100404190 != -1) {
    swift_once(&qword_100404190, sub_1000F9A70);
  }
  __asm { BR              X13 }

BOOL static DNSRecords.Identifier.== infix(_:_:)( uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, __int16 a6)
{
  return sub_1000FAC64(a1, a2, a3 & 0xFF01, a4, a5, a6 & 0xFF01);
}

uint64_t DNSRecords.TXT.keyData.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  char v3 = *(_BYTE *)(v0 + 32);
  sub_1000FB830(*(void *)v0, *(void *)(v0 + 8));
  sub_1000F39BC(15LL, v1, v2, v3 & 1);
  uint64_t v5 = v4;
  unint64_t v7 = v6;
  sub_1000FA9C4(v4, v6);
  sub_1000208D8(v5, v7);
  return 0LL;
}

uint64_t DNSRecords.TXT.valueData.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  sub_100020AFC(v1, *(void *)(v0 + 48));
  return v1;
}

void DNSRecords.PTR.keyData.getter()
{
}

void DNSRecords.PTR.valueData.getter()
{
}

void DNSRecords.AAAA.keyData.getter()
{
}

uint64_t DNSRecords.AAAA.valueData.getter()
{
  __int128 v8 = *(_OWORD *)(v0 + 32);
  v7[3] = &type metadata for UnsafeRawBufferPointer;
  v7[4] = &protocol witness table for UnsafeRawBufferPointer;
  v7[0] = &v8;
  v7[1] = &v9;
  uint64_t v1 = sub_100021104(v7, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  unint64_t v2 = (_BYTE *)*v1;
  if (*v1 && (char v3 = (_BYTE *)v1[1], v4 = v3 - v2, v3 != v2))
  {
    if (v4 <= 14)
    {
      uint64_t v5 = sub_1000FAED4(v2, v3);
    }

    else if ((unint64_t)v4 >= 0x7FFFFFFF)
    {
      uint64_t v5 = sub_1000FAF94((uint64_t)v2, (uint64_t)v3);
    }

    else
    {
      uint64_t v5 = sub_1000FB00C((uint64_t)v2, (uint64_t)v3);
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  sub_100002AC4(v7);
  return v5;
}

uint64_t DNSRecords.SRV.keyData.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  char v3 = *(_BYTE *)(v0 + 32);
  sub_1000FB830(*(void *)v0, *(void *)(v0 + 8));
  sub_1000F39BC(32LL, v1, v2, v3);
  uint64_t v5 = v4;
  unint64_t v7 = v6;
  sub_1000FA9C4(v4, v6);
  sub_1000208D8(v5, v7);
  return 0LL;
}

void DNSRecords.SRV.valueData.getter()
{
  __int128 v14 = xmmword_1003398F0;
  uint64_t v1 = (int *)type metadata accessor for DNSRecords.SRV(0LL);
  __int16 v12 = *(_WORD *)(v0 + v1[7]);
  uint64_t v2 = sub_1000EF854((uint64_t)&v12, (uint64_t)v13);
  unint64_t v4 = v3;
  sub_1000FA9C4(v2, v3);
  sub_1000208D8(v2, v4);
  __int16 v12 = *(_WORD *)(v0 + v1[8]);
  uint64_t v5 = sub_1000EF854((uint64_t)&v12, (uint64_t)v13);
  unint64_t v7 = v6;
  sub_1000FA9C4(v5, v6);
  uint64_t v8 = sub_1000208D8(v5, v7);
  __int16 v12 = bswap32(NWEndpoint.Port.rawValue.getter(v8)) >> 16;
  uint64_t v9 = sub_1000EF854((uint64_t)&v12, (uint64_t)v13);
  unint64_t v11 = v10;
  sub_1000FA9C4(v9, v10);
  sub_1000208D8(v9, v11);
  sub_1000F30AC(*(void *)(v0 + v1[6]), *(void *)(v0 + v1[6] + 8));
  __asm { BR              X12 }

uint64_t sub_1000EF6F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19)
{
  uint64_t v20 = BYTE6(v19);
  uint64_t v21 = sub_100002274(&qword_1004068E0);
  a16 = v21;
  a17 = sub_1000572E4( &qword_1004068E8,  &qword_1004068E0,  (uint64_t)&protocol conformance descriptor for <A> CollectionOfOne<A>);
  LOBYTE(a13) = -64;
  a12 = *(_BYTE *)sub_100021104(&a13, v21);
  Data._Representation.replaceSubrange(_:with:count:)(v20, v20, &a12, 1LL);
  uint64_t v22 = sub_100002AC4(&a13);
  return ((uint64_t (*)(uint64_t))((char *)sub_1000EF7A4 + 4 * byte_1003462EC[a19 >> 62]))(v22);
}

uint64_t sub_1000EF7A4()
{
  uint64_t v3 = BYTE6(v0);
  uint64_t v7 = v1;
  uint64_t v8 = v2;
  LOBYTE(v6[0]) = 17;
  char v5 = *(_BYTE *)sub_100021104(v6, v1);
  Data._Representation.replaceSubrange(_:with:count:)(v3, v3, &v5, 1LL);
  sub_100002AC4(v6);
  return v9;
}

uint64_t NANSubscribe.Configuration.rangingMandatory.getter()
{
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t DNSRecords.AAAA.init(host:address:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  *(_BYTE *)a9 = result;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(_BYTE *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  return result;
}

uint64_t sub_1000EF854(uint64_t a1, uint64_t a2)
{
  void v8[3] = &type metadata for UnsafeRawBufferPointer;
  v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v2 = sub_100021104(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  uint64_t v3 = (_BYTE *)*v2;
  if (*v2 && (unint64_t v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = sub_1000FAED4(v3, v4);
    }

    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = sub_1000FAF94((uint64_t)v3, (uint64_t)v4);
    }

    else
    {
      uint64_t v6 = sub_1000FB00C((uint64_t)v3, (uint64_t)v4);
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  sub_100002AC4(v8);
  return v6;
}

uint64_t sub_1000EF90C(uint64_t a1, unint64_t a2)
{
  *(void *)&__int128 v19 = a1;
  *((void *)&v19 + 1) = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v2 = sub_100002274((uint64_t *)&unk_100410490);
  if (!swift_dynamicCast(v17, &v19, &type metadata for String.UTF8View, v2, 6LL))
  {
    uint64_t v18 = 0LL;
    memset(v17, 0, sizeof(v17));
    sub_1000225EC((uint64_t)v17, &qword_100406900);
    if ((a2 & 0x1000000000000000LL) != 0) {
      goto LABEL_20;
    }
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      v20[0] = a1;
      v20[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v7 = (char *)v20 + (HIBYTE(a2) & 0xF);
      uint64_t v8 = v20;
    }

    else
    {
      if ((a1 & 0x1000000000000000LL) != 0)
      {
        uint64_t v5 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v5 = _StringObject.sharedUTF8.getter(a1, a2);
      }

      if (v5) {
        uint64_t v7 = (_BYTE *)(v5 + v6);
      }
      else {
        uint64_t v7 = 0LL;
      }
      uint64_t v8 = (_BYTE *)v5;
    }

    uint64_t v9 = sub_1000FB13C(v8, v7);
    unint64_t v11 = v10;
    if (v10 >> 60 != 15)
    {
      swift_bridgeObjectRelease(a2);
      *(void *)&v17[0] = v9;
      *((void *)&v17[0] + 1) = v11;
      return *(void *)&v17[0];
    }

    if ((a2 & 0x1000000000000000LL) != 0)
    {
LABEL_20:
      Swift::Int v12 = String.UTF8View._foreignCount()();
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      Swift::Int v12 = HIBYTE(a2) & 0xF;
    }

    else
    {
      Swift::Int v12 = a1 & 0xFFFFFFFFFFFFLL;
    }

    *(void *)&v17[0] = sub_1000FB1A0(v12);
    *((void *)&v17[0] + 1) = v13;
    __chkstk_darwin(*(void *)&v17[0]);
    sub_1001FE2F8();
    __asm { BR              X12 }
  }

  sub_1000589F8(v17, (uint64_t)v20);
  uint64_t v3 = v21;
  uint64_t v4 = v22;
  sub_100021104(v20, v21);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)( &v19,  sub_1000FA8EC,  0LL,  &type metadata for Data._Representation,  v3,  v4);
  swift_bridgeObjectRelease(a2);
  v17[0] = v19;
  sub_100002AC4(v20);
  return *(void *)&v17[0];
}

uint64_t sub_1000EFE10(uint64_t a1, uint64_t a2)
{
  void v9[3] = &type metadata for UnsafeMutableRawBufferPointer;
  v9[4] = &protocol witness table for UnsafeMutableRawBufferPointer;
  v9[0] = a1;
  v9[1] = a2;
  uint64_t v2 = sub_100021104(v9, (uint64_t)&type metadata for UnsafeMutableRawBufferPointer);
  uint64_t v3 = *v2;
  if (*v2)
  {
    uint64_t v4 = (_BYTE *)v2[1];
    uint64_t v5 = (uint64_t)&v4[-v3];
    if (v4 == (_BYTE *)v3)
    {
      uint64_t v3 = 0LL;
    }

    else if (v5 <= 14)
    {
      uint64_t v3 = sub_1000FAED4((_BYTE *)*v2, v4);
    }

    else
    {
      uint64_t v7 = type metadata accessor for __DataStorage(0LL);
      swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
      __DataStorage.init(bytes:length:)(v3, v5);
      if ((unint64_t)v5 >= 0x7FFFFFFF)
      {
        uint64_t v8 = type metadata accessor for Data.RangeReference(0LL);
        uint64_t v3 = swift_allocObject(v8, 32LL, 7LL);
        *(void *)(v3 + 16) = 0LL;
        *(void *)(v3 + 24) = v5;
      }

      else
      {
        uint64_t v3 = v5 << 32;
      }
    }
  }

  sub_100002AC4(v9);
  return v3;
}

void sub_1000EFF10(uint64_t a1, uint64_t a2)
{
  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  uint64_t v2 = (char *)&loc_1000EFF74
     + *((int *)qword_1000F01A8 + (sub_100021104(v3, (uint64_t)&type metadata for Data)[1] >> 62));
  __asm { BR              X10 }

uint64_t sub_1000EFF84()
{
  uint64_t v6 = v2;
  __int16 v7 = v3;
  char v8 = BYTE2(v3);
  char v9 = BYTE3(v3);
  char v10 = BYTE4(v3);
  char v11 = BYTE5(v3);
  sub_100020AFC(v1, v0);
  sub_1000FA8EC(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_1000208D8(v1, v0);
  uint64_t v4 = v12;
  sub_100002AC4(&v13);
  return v4;
}

uint64_t sub_1000F01B8(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2) {
    return String.subscript.getter(15LL, a1, a2);
  }
  else {
    return 0LL;
  }
}

void sub_1000F01F8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }

uint64_t sub_1000F0240(unsigned __int8 a1, uint64_t a2)
{
  if ((a2 & 0xFF000000000000LL) != 0) {
    unsigned __int8 v2 = a1;
  }
  else {
    unsigned __int8 v2 = 0;
  }
  return v2 | (((a2 & 0xFF000000000000LL) == 0) << 8);
}

unint64_t sub_1000F0340(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 < result >> 14)
  {
    __break(1u);
  }

  else
  {
    uint64_t v4 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v4 = 11LL;
    }
    return String.subscript.getter(result, v4 | (v3 << 16), a2, a3);
  }

  return result;
}

void sub_1000F038C()
{
  __asm { BR              X12 }

uint64_t sub_1000F03DC()
{
  uint64_t v2 = BYTE6(v0);
  uint64_t v6 = sub_100002274(&qword_1004068E0);
  uint64_t v7 = sub_1000572E4( &qword_1004068E8,  &qword_1004068E0,  (uint64_t)&protocol conformance descriptor for <A> CollectionOfOne<A>);
  LOBYTE(v5[0]) = v1;
  char v4 = *(_BYTE *)sub_100021104(v5, v6);
  Data._Representation.replaceSubrange(_:with:count:)(v2, v2, &v4, 1LL);
  return sub_100002AC4(v5);
}

uint64_t sub_1000F048C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x1000F04ECLL);
  }

  return ((uint64_t (*)(uint64_t))((char *)&loc_1000F04A4 + *((int *)qword_1000F04F0 + (a4 >> 62))))(v5);
}

BOOL static DNSRecords.PTR.== infix(_:_:)(__int128 *a1, uint64_t a2)
{
  __int128 v4 = *a1;
  v8[0] = *(_OWORD *)a2;
  v8[1] = v4;
  unint64_t v5 = sub_10000B08C();
  return !StringProtocol.caseInsensitiveCompare<A>(_:)(v8, &type metadata for String, &type metadata for String, v5, v5)
      && sub_1000FAC64( *((void *)a1 + 2),  *((void *)a1 + 3),  *((unsigned __int8 *)a1 + 32) | (*((unsigned __int8 *)a1 + 33) << 8),  *(void *)(a2 + 16),  *(void *)(a2 + 24),  *(unsigned __int8 *)(a2 + 32) | (*(unsigned __int8 *)(a2 + 33) << 8));
}

uint64_t static DNSRecords.TXT.__derived_struct_equals(_:_:)(__int128 *a1, uint64_t a2)
{
  __int128 v3 = *a1;
  uint64_t v4 = *((void *)a1 + 3);
  uint64_t v14 = *((void *)a1 + 2);
  char v5 = *((_BYTE *)a1 + 32);
  __int16 v6 = *((unsigned __int8 *)a1 + 33);
  v15[0] = *(_OWORD *)a2;
  v15[1] = v3;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  char v9 = *(_BYTE *)(a2 + 32);
  __int16 v10 = *(unsigned __int8 *)(a2 + 33);
  unint64_t v11 = sub_10000B08C();
  if (StringProtocol.caseInsensitiveCompare<A>(_:)(v15, &type metadata for String, &type metadata for String, v11, v11)
    || !sub_1000FAC64(v14, v4, v5 & 1 | (v6 << 8), v7, v8, v9 & 1 | (v10 << 8)))
  {
    char v12 = 0;
  }

  else
  {
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*((void *)a1 + 5), *((void *)a1 + 6));
  }

  return v12 & 1;
}

uint64_t AWDLActionFrame.ServiceResponse.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v62 = a2;
  uint64_t v3 = sub_100002274(&qword_1004050A0);
  __chkstk_darwin(v3);
  char v60 = &v52[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v61 = type metadata accessor for NWEndpoint.Port(0LL);
  uint64_t v5 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v7 = &v52[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v8);
  __int16 v10 = &v52[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = type metadata accessor for AWDLActionFrame.ServiceResponse(0LL);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = &v52[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v12);
  uint64_t v16 = &v52[-v15];
  uint64_t v17 = a1[3];
  uint64_t v18 = a1[4];
  v63 = a1;
  sub_100021104(a1, v17);
  __int128 v19 = v64;
  dispatch thunk of Decoder.unkeyedContainer()(&v65, v17, v18);
  if (!v19)
  {
    uint64_t v56 = v5;
    unsigned int v57 = v14;
    v64 = v10;
    uint64_t v58 = v11;
    Swift::Int v59 = v16;
    unsigned int v55 = v7;
    uint64_t v20 = v66;
    uint64_t v21 = v67;
    sub_1000237C8((uint64_t)&v65, v66);
    __int16 v22 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v20, v21);
    if ((unsigned __int16)(v22 - 256) > 0xFF01u)
    {
      uint64_t v26 = (unsigned __int16)(v22 - 1);
      uint64_t v27 = v66;
      uint64_t v28 = v67;
      sub_1000237C8((uint64_t)&v65, v66);
      uint64_t v29 = UnkeyedDecodingContainer.decodeData(with:)(v26, v27, v28);
      unint64_t v53 = v30;
      uint64_t v54 = v29;
      uint64_t v31 = v66;
      uint64_t v32 = v67;
      sub_1000237C8((uint64_t)&v65, v66);
      unsigned __int8 v33 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v31, v32);
      if (_s7CoreP2P10DNSRecordsO10RecordTypeO8rawValueAESgs6UInt16V_tcfC_0(v33) == 65)
      {
        unint64_t v34 = sub_1000033FC();
        uint64_t v35 = swift_allocError(&type metadata for WiFiError, v34, 0LL, 0LL);
        *(_OWORD *)uint64_t v36 = xmmword_100337020;
        *(_BYTE *)(v36 + 16) = 2;
        swift_willThrow(v35);
        unint64_t v45 = v53;
        uint64_t v44 = v54;
      }

      else
      {
        uint64_t v37 = v66;
        uint64_t v38 = v67;
        sub_1000237C8((uint64_t)&v65, v66);
        unsigned __int16 v39 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v37, v38);
        unsigned __int16 v40 = v39;
        uint64_t v41 = v66;
        uint64_t v42 = v67;
        sub_1000237C8((uint64_t)&v65, v66);
        unsigned __int16 v43 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v41, v42);
        unint64_t v47 = v53;
        uint64_t v48 = v54;
        if (v40 > v43 && v40 - v43 != 0xFFFF) {
          __asm { BR              X9 }
        }

        unint64_t v49 = sub_1000033FC();
        uint64_t v50 = swift_allocError(&type metadata for WiFiError, v49, 0LL, 0LL);
        *(void *)uint64_t v51 = 0LL;
        *(void *)(v51 + 8) = 0LL;
        *(_BYTE *)(v51 + 16) = 2;
        swift_willThrow(v50);
        uint64_t v44 = v48;
        unint64_t v45 = v47;
      }

      sub_1000208D8(v44, v45);
    }

    else
    {
      unint64_t v23 = sub_1000033FC();
      uint64_t v24 = swift_allocError(&type metadata for WiFiError, v23, 0LL, 0LL);
      *(void *)uint64_t v25 = 0LL;
      *(void *)(v25 + 8) = 0LL;
      *(_BYTE *)(v25 + 16) = 2;
      swift_willThrow(v24);
    }

    sub_100002AC4(&v65);
  }

  return sub_100002AC4(v63);
}

void sub_1000F1934()
{
  if (!v0)
  {
    *(void *)(v1 - 272) = 0LL;
    JUMPOUT(0x1000F15D4LL);
  }

  __break(1u);
  JUMPOUT(0x1000F1E0CLL);
}

void sub_1000F197C()
{
  uint64_t v4 = Data.subdata(in:)(0LL, BYTE6(v1), v2, v1);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease(*(void *)(v3 - 272));
  sub_1000208D8(*(void *)(v3 - 240), *(void *)(v3 - 248));
  sub_1000208D8(v2, v1);
  uint64_t v8 = *(void *)(v3 - 216);
  uint64_t v7 = *(void *)(v3 - 208);
  uint64_t v9 = *(void *)(v3 - 296);
  *(void *)uint64_t v8 = *(void *)(v3 - 368);
  *(void *)(v8 + 8) = v9;
  *(void *)(v8 + 16) = *(void *)(v3 - 384);
  *(void *)(v8 + 24) = v0;
  *(_BYTE *)(v8 + 32) = *(_DWORD *)(v3 - 264);
  *(_BYTE *)(v8 + 33) = 1;
  *(void *)(v8 + 40) = v4;
  *(void *)(v8 + 48) = v6;
  swift_storeEnumTagMultiPayload(v8, v7, 1LL);
  sub_100022628(v8, *(void *)(v3 - 200), type metadata accessor for AWDLActionFrame.ServiceResponse);
  JUMPOUT(0x1000F1A30LL);
}

uint64_t AWDLActionFrame.ServiceResponse.encode(to:)(void *a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v87 = a1;
  uint64_t v88 = type metadata accessor for DNSRecords.SRV(0LL);
  __chkstk_darwin(v88);
  uint64_t v6 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for AWDLActionFrame.ServiceResponse(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v11 = type metadata accessor for BinaryEncoder();
  uint64_t v12 = swift_allocObject(v11, 40LL, 7LL);
  __int128 v92 = xmmword_1003398F0;
  *(_OWORD *)(v12 + 16) = xmmword_1003398F0;
  uint64_t v86 = v12 + 16;
  *(void *)(v12 + 32) = v10;
  unint64_t v13 = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v14 = swift_allocObject(v11, 40LL, 7LL);
  *(_OWORD *)(v14 + 16) = v92;
  uint64_t v85 = v14 + 16;
  *(void *)(v14 + 32) = v13;
  uint64_t v15 = (void *)swift_allocObject(&unk_1003E4640, 56LL, 7LL);
  v15[5] = &type metadata for BinaryEncoder.UnkeyedContainer;
  unint64_t v16 = sub_10006E360();
  *(void *)&__int128 v92 = v12;
  _OWORD v15[2] = v12;
  v89 = v15 + 2;
  uint64_t v91 = v15;
  _BYTE v15[6] = v16;
  sub_1000FB7C4(v4, (uint64_t)v9);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v7);
  if (!EnumCaseMultiPayload)
  {
    uint64_t v90 = v14;
    uint64_t v28 = *(void *)v9;
    unint64_t v27 = *((void *)v9 + 1);
    uint64_t v29 = *((void *)v9 + 2);
    unint64_t v30 = *((void *)v9 + 3);
    __int16 v31 = v9[32] | (v9[33] << 8);
    uint64_t v32 = v92;
    swift_retain();
    uint64_t v33 = (uint64_t)v91;
    sub_1000FA3C8(v29, v30, v31, (uint64_t)v91);
    if (v3)
    {
      swift_release(v33);
      swift_bridgeObjectRelease(v30);
      swift_bridgeObjectRelease(v27);
      swift_release(v32);
      uint64_t v26 = v90;
      return swift_release(v26);
    }

    uint64_t v97 = &type metadata for BinaryEncoder.UnkeyedContainer;
    unint64_t v98 = v16;
    *(void *)&__int128 v96 = v90;
    unsigned __int16 v40 = v89;
    swift_beginAccess(v89, v95, 1LL, 0LL);
    swift_retain();
    sub_100002AC4(v40);
    sub_1000589F8(&v96, (uint64_t)v40);
    sub_1000F9DE4(v28, v27, v33);
    swift_bridgeObjectRelease(v30);
    swift_bridgeObjectRelease(v27);
    swift_beginAccess(v40, &v96, 33LL, 0LL);
    uint64_t v51 = *(void *)(v33 + 40);
    uint64_t v52 = *(void *)(v33 + 48);
    sub_1000237C8((uint64_t)v40, v51);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(192LL, v51, v52);
    swift_endAccess(&v96);
    swift_beginAccess(v40, &v96, 33LL, 0LL);
    uint64_t v53 = *(void *)(v33 + 40);
    uint64_t v54 = *(void *)(v33 + 48);
    sub_1000237C8((uint64_t)v40, v53);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(0LL, v53, v54);
    swift_endAccess(&v96);
LABEL_14:
    uint64_t v63 = v87[3];
    uint64_t v64 = v87[4];
    sub_100021104(v87, v63);
    dispatch thunk of Encoder.unkeyedContainer()(&v96, v63, v64);
    uint64_t v65 = v89;
    swift_beginAccess(v89, &v93, 1LL, 0LL);
    sub_100002AC4(v65);
    sub_1000589F8(&v96, (uint64_t)v65);
    swift_beginAccess(v86, &v96, 0LL, 0LL);
    __asm { BR              X13 }
  }

  if (EnumCaseMultiPayload != 1)
  {
    sub_100022628((uint64_t)v9, (uint64_t)v6, type metadata accessor for DNSRecords.SRV);
    uint64_t v34 = *(void *)v6;
    unint64_t v35 = *((void *)v6 + 1);
    uint64_t v36 = v92;
    swift_retain();
    swift_bridgeObjectRetain(v35);
    uint64_t v37 = (uint64_t)v91;
    sub_1000F9DE4(v34, v35, (uint64_t)v91);
    if (v3)
    {
      sub_100020A2C((uint64_t)v6);
      swift_release(v37);
      swift_release(v36);
      swift_release(v14);
      return swift_bridgeObjectRelease(v35);
    }

    uint64_t v90 = v14;
    swift_bridgeObjectRelease(v35);
    uint64_t v41 = *((void *)v6 + 2);
    unint64_t v42 = *((void *)v6 + 3);
    __int16 v43 = v6[32] | (v6[33] << 8);
    swift_bridgeObjectRetain(v42);
    sub_1000FA3C8(v41, v42, v43, v37);
    swift_bridgeObjectRelease(v42);
    uint64_t v97 = &type metadata for BinaryEncoder.UnkeyedContainer;
    unint64_t v98 = v16;
    *(void *)&__int128 v96 = v90;
    unsigned int v55 = v89;
    swift_beginAccess(v89, v95, 1LL, 0LL);
    swift_retain();
    sub_100002AC4(v55);
    sub_1000589F8(&v96, (uint64_t)v55);
    uint64_t v56 = v88;
    uint64_t v57 = *(unsigned __int16 *)&v6[*(int *)(v88 + 28)];
    swift_beginAccess(v55, &v96, 33LL, 0LL);
    uint64_t v58 = *(void *)(v37 + 40);
    uint64_t v59 = *(void *)(v37 + 48);
    sub_1000237C8((uint64_t)v55, v58);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v57, v58, v59);
    swift_endAccess(&v96);
    uint64_t v60 = *(unsigned __int16 *)&v6[*(int *)(v56 + 32)];
    swift_beginAccess(v55, &v96, 33LL, 0LL);
    uint64_t v61 = *(void *)(v37 + 40);
    uint64_t v62 = *(void *)(v37 + 48);
    sub_1000237C8((uint64_t)v55, v61);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v60, v61, v62);
    uint64_t v66 = swift_endAccess(&v96);
    LOWORD(v96) = bswap32(NWEndpoint.Port.rawValue.getter(v66)) >> 16;
    uint64_t v67 = sub_1000EF854((uint64_t)&v96, (uint64_t)&v96 + 2);
    unint64_t v69 = v68;
    uint64_t v93 = v67;
    unint64_t v94 = v68;
    swift_beginAccess(v55, &v96, 33LL, 0LL);
    uint64_t v70 = v37;
    uint64_t v71 = *(void *)(v37 + 40);
    uint64_t v72 = *(void *)(v37 + 48);
    sub_1000237C8((uint64_t)v55, v71);
    unint64_t v73 = sub_10005CD78();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v93, &type metadata for Data, v73, v71, v72);
    swift_endAccess(&v96);
    sub_1000208D8(v67, v69);
    uint64_t v74 = (uint64_t *)&v6[*(int *)(v88 + 24)];
    uint64_t v76 = *v74;
    unint64_t v75 = v74[1];
    swift_bridgeObjectRetain(v75);
    sub_1000F9DE4(v76, v75, v70);
    swift_bridgeObjectRelease(v75);
    uint64_t v77 = (uint64_t)v89;
    swift_beginAccess(v89, &v96, 33LL, 0LL);
    uint64_t v78 = *(void *)(v70 + 40);
    uint64_t v79 = *(void *)(v70 + 48);
    sub_1000237C8(v77, v78);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(192LL, v78, v79);
    swift_endAccess(&v96);
    swift_beginAccess(v77, &v96, 33LL, 0LL);
    uint64_t v80 = *(void *)(v70 + 40);
    uint64_t v81 = *(void *)(v70 + 48);
    sub_1000237C8(v77, v80);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(12LL, v80, v81);
    swift_endAccess(&v96);
    sub_100020A2C((uint64_t)v6);
    goto LABEL_12;
  }

  uint64_t v90 = v14;
  uint64_t v18 = *(void *)v9;
  unint64_t v19 = *((void *)v9 + 1);
  uint64_t v84 = *((void *)v9 + 2);
  uint64_t v88 = *((void *)v9 + 3);
  __int16 v20 = v9[32];
  __int16 v21 = v9[33];
  uint64_t v23 = *((void *)v9 + 5);
  unint64_t v22 = *((void *)v9 + 6);
  uint64_t v24 = v92;
  swift_retain();
  swift_bridgeObjectRetain(v19);
  uint64_t v25 = (uint64_t)v91;
  sub_1000F9DE4(v18, v19, (uint64_t)v91);
  if (!v3)
  {
    uint64_t v82 = v23;
    unint64_t v83 = v22;
    swift_bridgeObjectRelease(v19);
    unint64_t v38 = v88;
    swift_bridgeObjectRetain(v88);
    sub_1000FA3C8(v84, v38, v20 | (v21 << 8), v25);
    uint64_t v39 = v25;
    swift_bridgeObjectRelease(v38);
    uint64_t v97 = &type metadata for BinaryEncoder.UnkeyedContainer;
    unint64_t v98 = v16;
    *(void *)&__int128 v96 = v90;
    unint64_t v45 = v89;
    swift_beginAccess(v89, v95, 1LL, 0LL);
    swift_retain();
    sub_100002AC4(v45);
    sub_1000589F8(&v96, (uint64_t)v45);
    uint64_t v46 = v82;
    unint64_t v47 = v83;
    uint64_t v93 = v82;
    unint64_t v94 = v83;
    swift_beginAccess(v45, &v96, 33LL, 0LL);
    uint64_t v48 = *(void *)(v25 + 40);
    uint64_t v49 = *(void *)(v25 + 48);
    sub_1000237C8((uint64_t)v45, *(void *)(v39 + 40));
    sub_100020AFC(v46, v47);
    unint64_t v50 = sub_10005CD78();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v93, &type metadata for Data, v50, v48, v49);
    swift_endAccess(&v96);
    swift_bridgeObjectRelease(v88);
    swift_bridgeObjectRelease(v19);
    sub_1000208D8(v46, v47);
    sub_1000208D8(v46, v47);
LABEL_12:
    uint64_t v32 = v92;
    goto LABEL_14;
  }

  swift_bridgeObjectRelease(v88);
  swift_bridgeObjectRelease_n(v19, 2LL);
  swift_release(v24);
  swift_release(v90);
  sub_1000208D8(v23, v22);
  uint64_t v26 = v25;
  return swift_release(v26);
}

void sub_1000F30AC(uint64_t a1, unint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_1000F3108@<X0>(int a1@<W8>)
{
  if (BYTE6(v2) < 0x40uLL)
  {
    if (!a1) {
      goto LABEL_10;
    }
    if (a1 == 1)
    {
      if (!__OFSUB__(HIDWORD(v1), (_DWORD)v1))
      {
        unint64_t v3 = HIDWORD(v1) - (int)v1;
        goto LABEL_8;
      }

      __break(1u);
    }

    else
    {
      uint64_t v5 = *(void *)(v1 + 16);
      uint64_t v4 = *(void *)(v1 + 24);
      unint64_t v3 = v4 - v5;
      if (!__OFSUB__(v4, v5))
      {
LABEL_8:
        if ((v3 & 0x8000000000000000LL) == 0)
        {
          if (v3 < 0x100)
          {
LABEL_10:
            sub_1000F038C();
            sub_100020AFC(v1, v2);
            sub_1000FA9C4(v1, v2);
            sub_1000208D8(v1, v2);
            return sub_1000208D8(v1, v2);
          }

          _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
LABEL_16:
          __break(1u);
          JUMPOUT(0x1000F3250LL);
        }

uint64_t DNSRecords.RecordType.rawValue.getter(char a1)
{
  return word_100346BC4[a1];
}

uint64_t sub_1000F3274()
{
  uint64_t v1 = *((void *)v0 + 1);
  unint64_t v2 = *((void *)v0 + 2);
  uint64_t v3 = *((void *)v0 + 3);
  unint64_t v4 = *((void *)v0 + 4);
  char v5 = v0[40];
  uint64_t v6 = *v0;
  sub_1000FB830(v1, v2);
  sub_1000F39BC(v6, v3, v4, v5);
  uint64_t v8 = v7;
  unint64_t v10 = v9;
  sub_1000FA9C4(v7, v9);
  sub_1000208D8(v8, v10);
  return 0LL;
}

uint64_t sub_1000F3300()
{
  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t sub_1000F3308()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain(*(void *)(v0 + 32));
  return v1;
}

uint64_t DNSRecords.Identifier.domainName.getter()
{
  return 0x6C61636F6CLL;
}

void DNSRecords.BrowseHost.keyData.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __asm { BR              X12 }

uint64_t sub_1000F33D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19)
{
  uint64_t v20 = BYTE6(v19);
  uint64_t v21 = sub_100002274(&qword_1004068E0);
  a16 = v21;
  a17 = sub_1000572E4( &qword_1004068E8,  &qword_1004068E0,  (uint64_t)&protocol conformance descriptor for <A> CollectionOfOne<A>);
  LOBYTE(a13) = -64;
  a12 = *(_BYTE *)sub_100021104(&a13, v21);
  Data._Representation.replaceSubrange(_:with:count:)(v20, v20, &a12, 1LL);
  uint64_t v22 = sub_100002AC4(&a13);
  return ((uint64_t (*)(uint64_t))((char *)sub_1000F3484 + 4 * byte_1003462F8[a19 >> 62]))(v22);
}

uint64_t sub_1000F3484( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19)
{
  uint64_t v23 = BYTE6(v19);
  a16 = v20;
  a17 = v22;
  LOBYTE(a13) = 17;
  a12 = *(_BYTE *)sub_100021104(&a13, v20);
  Data._Representation.replaceSubrange(_:with:count:)(v23, v23, &a12, 1LL);
  sub_100002AC4(&a13);
  LOWORD(a13) = word_100346B42[v21];
  uint64_t v24 = sub_1000EF854((uint64_t)&a13, (uint64_t)&a13 + 2);
  unint64_t v26 = v25;
  sub_1000FA9C4(v24, v25);
  uint64_t v27 = sub_1000208D8(v24, v26);
  return ((uint64_t (*)(uint64_t))((char *)sub_1000F353C + 4 * byte_1003462FC[a19 >> 62]))(v27);
}

uint64_t sub_1000F353C()
{
  uint64_t v4 = BYTE6(v0);
  uint64_t v8 = v2;
  uint64_t v9 = v3;
  LOBYTE(v7[0]) = v1;
  char v6 = *(_BYTE *)sub_100021104(v7, v2);
  Data._Representation.replaceSubrange(_:with:count:)(v4, v4, &v6, 1LL);
  sub_100002AC4(v7);
  return v10;
}

void DNSRecords.BrowseHost.hash(into:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, Swift::UInt8 a5)
{
}

BOOL static DNSRecords.BrowseHost.__derived_struct_equals(_:_:)( char a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7, char a8)
{
  if (word_100346BC4[a1] != word_100346BC4[a5]) {
    return 0LL;
  }
  if (a2 == a6 && a3 == a7) {
    return a4 == a8;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, a6, a7, 0LL);
  BOOL result = 0LL;
  if ((v10 & 1) != 0) {
    return a4 == a8;
  }
  return result;
}

Swift::Int DNSRecords.BrowseHost.hashValue.getter(char a1, uint64_t a2, uint64_t a3, Swift::UInt8 a4)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000F374C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  uint64_t v3 = *((void *)v0 + 2);
  Swift::UInt8 v4 = v0[24];
  Hasher.init(_seed:)(v6, 0LL);
  Hasher._combine(_:)(word_100346BC4[v1]);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void sub_1000F37DC(uint64_t a1)
{
  uint64_t v3 = *((void *)v1 + 1);
  uint64_t v4 = *((void *)v1 + 2);
  Swift::UInt8 v5 = v1[24];
  Hasher._combine(_:)(word_100346BC4[*v1]);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  Hasher._combine(_:)(v5);
}

Swift::Int sub_1000F3850(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *((void *)v1 + 1);
  uint64_t v4 = *((void *)v1 + 2);
  Swift::UInt8 v5 = v1[24];
  Hasher.init(_seed:)(v7, a1);
  Hasher._combine(_:)(word_100346BC4[v2]);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

BOOL sub_1000F38DC(char *a1, char *a2)
{
  if (word_100346BC4[*a1] != word_100346BC4[*a2]) {
    return 0LL;
  }
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *((void *)a1 + 2);
  int v6 = a1[24];
  uint64_t v7 = *((void *)a2 + 1);
  uint64_t v8 = *((void *)a2 + 2);
  int v9 = a2[24];
  if (v4 == v7 && v5 == v8) {
    return v6 == v9;
  }
  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v7, v8, 0LL);
  BOOL result = 0LL;
  if ((v11 & 1) != 0) {
    return v6 == v9;
  }
  return result;
}

uint64_t DNSRecords.PTR.instanceName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(v2[1]);
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t NANInternetSharingStatistics.submitted.getter(uint64_t a1, uint64_t a2, char a3)
{
  return a3 & 1;
}

uint64_t DNSRecords.Identifier.protocolType.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 16) = result & 1;
  return result;
}

uint64_t DNSRecords.Identifier.version.getter(uint64_t a1, uint64_t a2, __int16 a3)
{
  return HIBYTE(a3);
}

CoreP2P::DNSRecords::Identifier __swiftcall DNSRecords.Identifier.init(serviceName:protocolType:version:)( Swift::String serviceName, CoreP2P::Layer3Protocol protocolType, Swift::UInt8 version)
{
  __int16 v3 = protocolType & 1 | (version << 8);
  result.serviceName = serviceName;
  result.protocolType = v3;
  result.version = HIBYTE(v3);
  return result;
}

void sub_1000F39BC(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  if ((a4 & 1) == 0) {
    __asm { BR              X12 }
  }

  __asm { BR              X12 }

uint64_t sub_1000F3A58( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19)
{
  uint64_t v20 = BYTE6(v19);
  uint64_t v21 = sub_100002274(&qword_1004068E0);
  a16 = v21;
  a17 = sub_1000572E4( &qword_1004068E8,  &qword_1004068E0,  (uint64_t)&protocol conformance descriptor for <A> CollectionOfOne<A>);
  LOBYTE(a13) = -64;
  a12 = *(_BYTE *)sub_100021104(&a13, v21);
  Data._Representation.replaceSubrange(_:with:count:)(v20, v20, &a12, 1LL);
  uint64_t v22 = sub_100002AC4(&a13);
  return ((uint64_t (*)(uint64_t))((char *)sub_1000F3BB0 + 4 * byte_100346304[a19 >> 62]))(v22);
}

void sub_1000F3A60(uint64_t a1@<X8>)
{
  uint64_t v1 = a1 >> 32;
  uint64_t v4 = sub_100002274(&qword_1004068E0);
  uint64_t v5 = sub_1000572E4(&unk_1004068E8, &qword_1004068E0, &protocol conformance descriptor for <A> CollectionOfOne<A>);
  LOBYTE(v3[0]) = -64;
  char v2 = *(_BYTE *)sub_100021104(v3, v4);
  Data._Representation.replaceSubrange(_:with:count:)(v1, v1, &v2, 1LL);
  sub_100002AC4(v3);
  __asm { BR              X12 }

uint64_t sub_1000F3B04( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19)
{
  uint64_t v23 = BYTE6(v19);
  a16 = v21;
  a17 = v22;
  LOBYTE(a13) = 12;
  a12 = *(_BYTE *)sub_100021104(&a13, v21);
  Data._Representation.replaceSubrange(_:with:count:)(v23, v23, &a12, 1LL);
  sub_100002AC4(&a13);
  LOWORD(a13) = word_100346B42[v20];
  uint64_t v24 = sub_1000EF854((uint64_t)&a13, (uint64_t)&a13 + 2);
  unint64_t v26 = v25;
  sub_1000FA9C4(v24, v25);
  uint64_t v27 = sub_1000208D8(v24, v26);
  return ((uint64_t (*)(uint64_t))((char *)sub_1000F3C84 + 4 * byte_100346310[a19 >> 62]))(v27);
}

uint64_t sub_1000F3B0C@<X0>( uint64_t a1@<X8>, int a2, __int16 a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  uint64_t v12 = a1 >> 32;
  uint64_t v13 = sub_100002274(&qword_1004068E0);
  a9 = v13;
  a10 = sub_1000572E4(&unk_1004068E8, &qword_1004068E0, &protocol conformance descriptor for <A> CollectionOfOne<A>);
  LOBYTE(a6) = -64;
  a5 = *(_BYTE *)sub_100021104(&a6, v13);
  Data._Representation.replaceSubrange(_:with:count:)(v12, v12, &a5, 1LL);
  uint64_t v14 = sub_100002AC4(&a6);
  return ((uint64_t (*)(uint64_t))((char *)sub_1000F3BB0 + 4 * byte_100346304[a12 >> 62]))(v14);
}

void sub_1000F3BB0()
{
}

void sub_1000F3BB8()
{
}

void sub_1000F3BD0()
{
}

uint64_t sub_1000F3C84()
{
  uint64_t v2 = BYTE6(v0);
  uint64_t v6 = sub_100002274(&qword_1004068E0);
  uint64_t v7 = sub_1000572E4( &qword_1004068E8,  &qword_1004068E0,  (uint64_t)&protocol conformance descriptor for <A> CollectionOfOne<A>);
  LOBYTE(v5[0]) = HIBYTE(v1);
  char v4 = *(_BYTE *)sub_100021104(v5, v6);
  Data._Representation.replaceSubrange(_:with:count:)(v2, v2, &v4, 1LL);
  sub_100002AC4(v5);
  return v8;
}

void DNSRecords.Identifier.keyData.getter(uint64_t a1, unint64_t a2, char a3)
{
}

uint64_t DNSRecords.PTR.type.getter()
{
  return 11LL;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DNSRecords.Identifier.description.getter( uint64_t a1, uint64_t a2, char a3)
{
  v4._uint64_t countAndFlagsBits = 24366LL;
  v4._object = (void *)0xE200000000000000LL;
  String.append(_:)(v4);
  if ((a3 & 1) != 0) {
    uint64_t v5 = 7365749LL;
  }
  else {
    uint64_t v5 = 7365492LL;
  }
  unint64_t v6 = 0xE300000000000000LL;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  v7._uint64_t countAndFlagsBits = 46LL;
  v7._object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 0x6C61636F6CLL;
  v8._object = (void *)0xE500000000000000LL;
  String.append(_:)(v8);
}

void DNSRecords.Identifier.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  Swift::String v6 = String.lowercased()();
  String.hash(into:)(a1, v6._countAndFlagsBits, v6._object);
  swift_bridgeObjectRelease(v6._object);
  if ((a4 & 1) != 0) {
    uint64_t v7 = 7365749LL;
  }
  else {
    uint64_t v7 = 7365492LL;
  }
  String.hash(into:)(a1, v7, 0xE300000000000000LL);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  Hasher._combine(_:)(HIBYTE(a4));
}

uint64_t sub_1000F3E7C()
{
  Swift::Int v0 = sub_1000055FC((uint64_t)&off_1003D7060);
  uint64_t result = swift_arrayDestroy(&unk_1003D7080, 11LL, &type metadata for DNSRecords.Identifier);
  static DNSRecords.Identifier.allKnownIdentifiers = v0;
  return result;
}

const char *DNSRecords.Identifier.airdrop.unsafeMutableAddressor()
{
  return "_airdrop";
}

const char *DNSRecords.Identifier.airplay.unsafeMutableAddressor()
{
  return "_airplay";
}

const char *DNSRecords.Identifier.raop.unsafeMutableAddressor()
{
  return "_raop";
}

const char *DNSRecords.Identifier.airplayP2P.unsafeMutableAddressor()
{
  return "_airplay-p2p";
}

const char *DNSRecords.Identifier.assistedDiscovery.unsafeMutableAddressor()
{
  return "_wifid";
}

void *DNSRecords.Identifier.companionLink.unsafeMutableAddressor()
{
  return &static DNSRecords.Identifier.companionLink;
}

const char *DNSRecords.Identifier.remoteDisplay.unsafeMutableAddressor()
{
  return "_rdlink";
}

const char *DNSRecords.Identifier.dfsMonitoring.unsafeMutableAddressor()
{
  return "_dfsMon";
}

const char *DNSRecords.Identifier.timeSync.unsafeMutableAddressor()
{
  return "_ieee1588";
}

const char *DNSRecords.Identifier.atpAWDLService.unsafeMutableAddressor()
{
  return "_atp";
}

const char *DNSRecords.Identifier.testAWDLService.unsafeMutableAddressor()
{
  return "_test";
}

uint64_t *DNSRecords.Identifier.allKnownIdentifiers.unsafeMutableAddressor()
{
  if (qword_100404180 != -1) {
    swift_once(&qword_100404180, sub_1000F3E7C);
  }
  return &static DNSRecords.Identifier.allKnownIdentifiers;
}

uint64_t static DNSRecords.Identifier.allKnownIdentifiers.getter()
{
  return sub_10005E194(&qword_100404180, &static DNSRecords.Identifier.allKnownIdentifiers);
}

uint64_t DNSRecords.Identifier.service.getter(uint64_t a1, uint64_t a2)
{
  return a1;
}

void *DNSRecords.defaultVersion.unsafeMutableAddressor()
{
  return &static DNSRecords.defaultVersion;
}

uint64_t static DNSRecords.Identifier.dfsMonitoring.getter()
{
  return 0x6E6F4D7366645FLL;
}

uint64_t static DNSRecords.Identifier.atpAWDLService.getter()
{
  return 1886675295LL;
}

uint64_t static DNSRecords.Identifier.testAWDLService.getter()
{
  return 0x747365745FLL;
}

uint64_t static DNSRecords.Identifier.airdrop.getter()
{
  return 0x706F72647269615FLL;
}

uint64_t static DNSRecords.Identifier.airplay.getter()
{
  return 0x79616C707269615FLL;
}

uint64_t static DNSRecords.Identifier.raop.getter()
{
  return 0x706F61725FLL;
}

uint64_t static DNSRecords.Identifier.airplayP2P.getter()
{
  return 0x79616C707269615FLL;
}

uint64_t static DNSRecords.Identifier.assistedDiscovery.getter()
{
  return 0x64696669775FLL;
}

uint64_t static DNSRecords.Identifier.companionLink.getter()
{
  return 0x696E61706D6F635FLL;
}

uint64_t static DNSRecords.Identifier.remoteDisplay.getter()
{
  return 0x6B6E696C64725FLL;
}

uint64_t static DNSRecords.Identifier.timeSync.getter()
{
  return 0x383531656565695FLL;
}

const char *DNSRecords.Identifier.googlecast.unsafeMutableAddressor()
{
  return "_googlecast";
}

uint64_t static DNSRecords.Identifier.googlecast.getter()
{
  return 0x63656C676F6F675FLL;
}

uint64_t sub_1000F4158()
{
  Swift::Int v0 = sub_1000055FC((uint64_t)&off_1003D7188);
  uint64_t result = swift_arrayDestroy(&unk_1003D71A8, 1LL, &type metadata for DNSRecords.Identifier);
  static DNSRecords.Identifier.deniedList = v0;
  return result;
}

uint64_t *DNSRecords.Identifier.deniedList.unsafeMutableAddressor()
{
  if (qword_100404188 != -1) {
    swift_once(&qword_100404188, sub_1000F4158);
  }
  return &static DNSRecords.Identifier.deniedList;
}

uint64_t static DNSRecords.Identifier.deniedList.getter()
{
  return sub_10005E194(&qword_100404188, &static DNSRecords.Identifier.deniedList);
}

Swift::Int DNSRecords.Identifier.hashValue.getter(uint64_t a1, uint64_t a2, __int16 a3)
{
  Swift::String v4 = String.lowercased()();
  String.hash(into:)(v7, v4._countAndFlagsBits, v4._object);
  swift_bridgeObjectRelease(v4._object);
  if ((a3 & 1) != 0) {
    uint64_t v5 = 7365749LL;
  }
  else {
    uint64_t v5 = 7365492LL;
  }
  String.hash(into:)(v7, v5, 0xE300000000000000LL);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  Hasher._combine(_:)(HIBYTE(a3));
  return Hasher._finalize()();
}

Swift::Int sub_1000F42A8()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  Swift::UInt8 v2 = *(_BYTE *)(v0 + 17);
  Hasher.init(_seed:)(v6, 0LL);
  Swift::String v3 = String.lowercased()();
  String.hash(into:)(v6, v3._countAndFlagsBits, v3._object);
  swift_bridgeObjectRelease(v3._object);
  if (v1) {
    uint64_t v4 = 7365749LL;
  }
  else {
    uint64_t v4 = 7365492LL;
  }
  String.hash(into:)(v6, v4, 0xE300000000000000LL);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1000F4358(uint64_t a1)
{
  int v3 = *(unsigned __int8 *)(v1 + 16);
  Swift::UInt8 v4 = *(_BYTE *)(v1 + 17);
  Swift::String v5 = String.lowercased()();
  String.hash(into:)(a1, v5._countAndFlagsBits, v5._object);
  swift_bridgeObjectRelease(v5._object);
  if (v3) {
    uint64_t v6 = 7365749LL;
  }
  else {
    uint64_t v6 = 7365492LL;
  }
  String.hash(into:)(a1, v6, 0xE300000000000000LL);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  Hasher._combine(_:)(v4);
}

Swift::Int sub_1000F43E0(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(v1 + 16);
  Swift::UInt8 v3 = *(_BYTE *)(v1 + 17);
  Hasher.init(_seed:)(v7, a1);
  Swift::String v4 = String.lowercased()();
  String.hash(into:)(v7, v4._countAndFlagsBits, v4._object);
  swift_bridgeObjectRelease(v4._object);
  if (v2) {
    uint64_t v5 = 7365749LL;
  }
  else {
    uint64_t v5 = 7365492LL;
  }
  String.hash(into:)(v7, v5, 0xE300000000000000LL);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_1000F448C()
{
}

uint64_t sub_1000F44A4()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t sub_1000F44E8()
{
  int v1 = *((unsigned __int8 *)v0 + 16);
  uint64_t v8 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  v2._uint64_t countAndFlagsBits = 24366LL;
  v2._object = (void *)0xE200000000000000LL;
  String.append(_:)(v2);
  if (v1) {
    uint64_t v3 = 7365749LL;
  }
  else {
    uint64_t v3 = 7365492LL;
  }
  unint64_t v4 = 0xE300000000000000LL;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  v5._uint64_t countAndFlagsBits = 46LL;
  v5._object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = 0x6C61636F6CLL;
  v6._object = (void *)0xE500000000000000LL;
  String.append(_:)(v6);
  return v8;
}

BOOL sub_1000F457C(uint64_t a1, uint64_t a2)
{
  return sub_1000FAC64( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned __int8 *)(a1 + 16) | (*(unsigned __int8 *)(a1 + 17) << 8),  *(void *)a2,  *(void *)(a2 + 8),  *(unsigned __int8 *)(a2 + 16) | (*(unsigned __int8 *)(a2 + 17) << 8));
}

uint64_t MutableDriverProperty.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t DNSRecords.SRV.service.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  return v1;
}

uint64_t DNSRecords.PTR.identifier.setter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v4 = a3;
  unsigned int v7 = a3 >> 8;
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v3 + 24));
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  *(_BYTE *)(v3 + 32) = v4 & 1;
  *(_BYTE *)(v3 + 33) = v7;
  return result;
}

uint64_t DNSRecords.PTR.description.getter()
{
  __int128 v13 = *v0;
  uint64_t v10 = v13;
  sub_1000209DC((uint64_t)&v13);
  v1._uint64_t countAndFlagsBits = 46LL;
  v1._object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  Swift::String v11 = (Swift::String)v0[1];
  __int16 v12 = *((_WORD *)v0 + 16);
  object = v11._object;
  Swift::String v9 = v11;
  sub_1000209DC((uint64_t)&v11);
  swift_bridgeObjectRetain(object);
  v3._uint64_t countAndFlagsBits = 24366LL;
  v3._object = (void *)0xE200000000000000LL;
  String.append(_:)(v3);
  if ((_BYTE)v12) {
    uint64_t v4 = 7365749LL;
  }
  else {
    uint64_t v4 = 7365492LL;
  }
  unint64_t v5 = 0xE300000000000000LL;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  v6._uint64_t countAndFlagsBits = 46LL;
  v6._object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 0x6C61636F6CLL;
  v7._object = (void *)0xE500000000000000LL;
  String.append(_:)(v7);
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v9._object);
  sub_100020A04((uint64_t)&v11);
  return v10;
}

uint64_t DNSRecords.PTR.hash(into:)(uint64_t a1)
{
  Swift::String v3 = String.lowercased()();
  String.hash(into:)(a1, v3._countAndFlagsBits, v3._object);
  swift_bridgeObjectRelease(v3._object);
  __int128 v7 = *(_OWORD *)(v1 + 16);
  *(_WORD *)uint64_t v8 = *(_WORD *)(v1 + 32);
  Swift::String v4 = String.lowercased()();
  swift_bridgeObjectRetain(*((void *)&v7 + 1));
  String.hash(into:)(a1, v4._countAndFlagsBits, v4._object);
  swift_bridgeObjectRelease(v4._object);
  if (v8[0]) {
    uint64_t v5 = 7365749LL;
  }
  else {
    uint64_t v5 = 7365492LL;
  }
  String.hash(into:)(a1, v5, 0xE300000000000000LL);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  Hasher._combine(_:)(v8[1]);
  return sub_100020A04((uint64_t)&v7);
}

Swift::Int DNSRecords.PTR.hashValue.getter()
{
  Swift::String v1 = String.lowercased()();
  String.hash(into:)(v6, v1._countAndFlagsBits, v1._object);
  swift_bridgeObjectRelease(v1._object);
  __int128 v7 = *(_OWORD *)(v0 + 16);
  __int16 v8 = *(_WORD *)(v0 + 32);
  uint64_t v2 = *((void *)&v7 + 1);
  Swift::String v3 = String.lowercased()();
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v6, v3._countAndFlagsBits, v3._object);
  swift_bridgeObjectRelease(v3._object);
  if ((_BYTE)v8) {
    uint64_t v4 = 7365749LL;
  }
  else {
    uint64_t v4 = 7365492LL;
  }
  String.hash(into:)(v6, v4, 0xE300000000000000LL);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  Hasher._combine(_:)(HIBYTE(v8));
  sub_100020A04((uint64_t)&v7);
  return Hasher._finalize()();
}

uint64_t sub_1000F4924(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  int v4 = *(unsigned __int8 *)(v1 + 32);
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 33);
  Swift::String v6 = String.lowercased()();
  String.hash(into:)(a1, v6._countAndFlagsBits, v6._object);
  swift_bridgeObjectRelease(v6._object);
  Swift::String v7 = String.lowercased()();
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(a1, v7._countAndFlagsBits, v7._object);
  swift_bridgeObjectRelease(v7._object);
  if (v4) {
    uint64_t v8 = 7365749LL;
  }
  else {
    uint64_t v8 = 7365492LL;
  }
  String.hash(into:)(a1, v8, 0xE300000000000000LL);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  Hasher._combine(_:)(v5);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1000F49F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 24);
  int v3 = *(unsigned __int8 *)(v1 + 32);
  Swift::UInt8 v4 = *(_BYTE *)(v1 + 33);
  Hasher.init(_seed:)(v9, a1);
  Swift::String v5 = String.lowercased()();
  String.hash(into:)(v9, v5._countAndFlagsBits, v5._object);
  swift_bridgeObjectRelease(v5._object);
  Swift::String v6 = String.lowercased()();
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v9, v6._countAndFlagsBits, v6._object);
  swift_bridgeObjectRelease(v6._object);
  if (v3) {
    uint64_t v7 = 7365749LL;
  }
  else {
    uint64_t v7 = 7365492LL;
  }
  String.hash(into:)(v9, v7, 0xE300000000000000LL);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  Hasher._combine(_:)(v4);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

BOOL sub_1000F4AE8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  __int16 v5 = *(unsigned __int8 *)(a1 + 32);
  __int16 v6 = *(unsigned __int8 *)(a1 + 33);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  __int16 v11 = *((unsigned __int8 *)a2 + 32);
  __int16 v12 = *((unsigned __int8 *)a2 + 33);
  v16[2] = *(void *)a1;
  void v16[3] = v2;
  v16[0] = v7;
  v16[1] = v8;
  unint64_t v13 = sub_10000B08C();
  return !StringProtocol.caseInsensitiveCompare<A>(_:)( v16,  &type metadata for String,  &type metadata for String,  v13,  v13)
      && sub_1000FAC64(v3, v4, v5 | (v6 << 8), v9, v10, v11 | (v12 << 8));
}

uint64_t DNSRecords.TXT.name.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  char v5 = *(_BYTE *)(v1 + 32);
  char v6 = *(_BYTE *)(v1 + 33);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 33) = v6;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v4);
}

__n128 DNSRecords.TXT.name.setter(uint64_t a1)
{
  __n128 result = *(__n128 *)a1;
  __int128 v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v4;
  *(_WORD *)(v1 + 32) = *(_WORD *)(a1 + 32);
  return result;
}

uint64_t DNSRecords.TXT.userInfo.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000208D8(*(void *)(v2 + 40), *(void *)(v2 + 48));
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return result;
}

uint64_t DNSRecords.TXT.service.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  return v1;
}

uint64_t DNSRecords.TXT.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 8);
  __int128 v13 = *(_OWORD *)(v2 + 16);
  __int16 v14 = *(_WORD *)(v2 + 32);
  uint64_t v5 = *((void *)&v13 + 1);
  Swift::String v6 = String.lowercased()();
  swift_bridgeObjectRetain(v4);
  sub_1000209DC((uint64_t)&v13);
  String.hash(into:)(a1, v6._countAndFlagsBits, v6._object);
  swift_bridgeObjectRelease(v6._object);
  char v15 = v14;
  Swift::UInt8 v7 = HIBYTE(v14);
  Swift::String v8 = String.lowercased()();
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v8._countAndFlagsBits, v8._object);
  swift_bridgeObjectRelease(v8._object);
  if (v15) {
    uint64_t v9 = 7365749LL;
  }
  else {
    uint64_t v9 = 7365492LL;
  }
  String.hash(into:)(a1, v9, 0xE300000000000000LL);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  Hasher._combine(_:)(v7);
  sub_100020A04((uint64_t)&v13);
  swift_bridgeObjectRelease(v4);
  sub_100020A04((uint64_t)&v13);
  uint64_t v11 = *(void *)(v2 + 40);
  unint64_t v10 = *(void *)(v2 + 48);
  sub_100020AFC(v11, v10);
  Data.hash(into:)(a1, v11, v10);
  return sub_1000208D8(v11, v10);
}

Swift::Int DNSRecords.TXT.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000F4E20(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1000F4E58()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  char v3 = *(_BYTE *)(v0 + 32);
  sub_1000FB830(*(void *)v0, *(void *)(v0 + 8));
  sub_1000F39BC(15LL, v1, v2, v3);
  uint64_t v5 = v4;
  unint64_t v7 = v6;
  sub_1000FA9C4(v4, v6);
  sub_1000208D8(v5, v7);
  return 0LL;
}

uint64_t sub_1000F4ED8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v16 = *(void *)(a1 + 24);
  uint64_t v17 = *(void *)(a1 + 16);
  __int16 v15 = *(unsigned __int8 *)(a1 + 32);
  __int16 v3 = *(unsigned __int8 *)(a1 + 33);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  __int16 v10 = *((unsigned __int8 *)a2 + 32);
  __int16 v11 = *((unsigned __int8 *)a2 + 33);
  v18[2] = *(void *)a1;
  v18[3] = v2;
  v18[0] = v6;
  v18[1] = v7;
  unint64_t v12 = sub_10000B08C();
  if (StringProtocol.caseInsensitiveCompare<A>(_:)(v18, &type metadata for String, &type metadata for String, v12, v12)
    || !sub_1000FAC64(v17, v16, v15 | (v3 << 8), v8, v9, v10 | (v11 << 8)))
  {
    char v13 = 0;
  }

  else
  {
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v4, v5);
  }

  return v13 & 1;
}

uint64_t DNSRecords.SRV.portNumber.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for DNSRecords.SRV(0LL) + 20);
  uint64_t v4 = type metadata accessor for NWEndpoint.Port(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t DNSRecords.SRV.portNumber.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for DNSRecords.SRV(0LL) + 20);
  uint64_t v4 = type metadata accessor for NWEndpoint.Port(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*DNSRecords.SRV.portNumber.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t DNSRecords.SRV.hostname.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for DNSRecords.SRV(0LL) + 24));
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t DNSRecords.SRV.hostname.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for DNSRecords.SRV(0LL) + 24));
  uint64_t result = swift_bridgeObjectRelease(v5[1]);
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*DNSRecords.SRV.hostname.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t DNSRecords.SRV.weight.getter()
{
  return *(unsigned __int16 *)(v0 + *(int *)(type metadata accessor for DNSRecords.SRV(0LL) + 28));
}

uint64_t DNSRecords.SRV.weight.setter(__int16 a1)
{
  uint64_t result = type metadata accessor for DNSRecords.SRV(0LL);
  *(_WORD *)(v1 + *(int *)(result + 2swift_bridgeObjectRelease(*(void *)(v1 + 8)) = a1;
  return result;
}

uint64_t (*DNSRecords.SRV.weight.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t DNSRecords.SRV.priority.getter()
{
  return *(unsigned __int16 *)(v0 + *(int *)(type metadata accessor for DNSRecords.SRV(0LL) + 32));
}

uint64_t DNSRecords.SRV.priority.setter(__int16 a1)
{
  uint64_t result = type metadata accessor for DNSRecords.SRV(0LL);
  *(_WORD *)(v1 + *(int *)(result + sub_1000F39BC(11LL, *(void *)(v0 + 16), *(void *)(v0 + 24), *(_BYTE *)(v0 + 32)) = a1;
  return result;
}

uint64_t (*DNSRecords.SRV.priority.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

void DNSRecords.SRV.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 24);
  int v6 = *(unsigned __int8 *)(v1 + 32);
  Swift::UInt8 v7 = *(_BYTE *)(v1 + 33);
  Swift::String v8 = String.lowercased()();
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v8._countAndFlagsBits, v8._object);
  swift_bridgeObjectRelease(v8._object);
  Swift::String v9 = String.lowercased()();
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v9._countAndFlagsBits, v9._object);
  swift_bridgeObjectRelease(v9._object);
  if (v6) {
    uint64_t v10 = 7365749LL;
  }
  else {
    uint64_t v10 = 7365492LL;
  }
  String.hash(into:)(a1, v10, 0xE300000000000000LL);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  Hasher._combine(_:)(v7);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease_n(v5, 2LL);
  __int16 v11 = (int *)type metadata accessor for DNSRecords.SRV(0LL);
  uint64_t v12 = type metadata accessor for NWEndpoint.Port(0LL);
  uint64_t v13 = sub_10000AF70( &qword_100406338,  (uint64_t (*)(uint64_t))&type metadata accessor for NWEndpoint.Port,  (uint64_t)&protocol conformance descriptor for NWEndpoint.Port);
  dispatch thunk of Hashable.hash(into:)(a1, v12, v13);
  __int16 v14 = (uint64_t *)(v2 + v11[6]);
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  swift_bridgeObjectRetain(v16);
  String.hash(into:)(a1, v15, v16);
  swift_bridgeObjectRelease(v16);
  Hasher._combine(_:)(*(_WORD *)(v2 + v11[7]));
  Hasher._combine(_:)(*(_WORD *)(v2 + v11[8]));
}

Swift::Int DNSRecords.SRV.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000F53E0(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t DNSRecords.AAAA.host.setter(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v4 + 16));
  *(_BYTE *)uint64_t v4 = a1;
  *(void *)(v4 + 8) = a2;
  *(void *)(v4 + 16) = a3;
  *(_BYTE *)(v4 + 24) = a4;
  return result;
}

uint64_t DNSRecords.AAAA.type.getter()
{
  if (*v0 == 27) {
    return 27LL;
  }
  __break(1u);
  return result;
}

void DNSRecords.ARPA.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)((char *)v2 + 9);
  v9[0] = *v2;
  Hasher._combine(_:)(word_100346BC4[SLOBYTE(v9[0])]);
  swift_bridgeObjectRetain(*(void *)&v9[1]);
  String.hash(into:)(a1, *((void *)&v9[0] + 1), *(void *)&v9[1]);
  Hasher._combine(_:)(BYTE8(v9[1]));
  sub_1000FB808((uint64_t)v9);
  __int128 v4 = v2[3];
  v11[0] = v2[2];
  v11[1] = v4;
  __int128 v5 = v4;
  __int128 v10 = v11[0];
  swift_bridgeObjectRetain(*((void *)&v4 + 1));
  uint64_t v6 = sub_1000EF854((uint64_t)&v10, (uint64_t)v11);
  unint64_t v8 = v7;
  Data.hash(into:)(a1, v6, v7);
  sub_1000208D8(v6, v8);
  if (*((void *)&v5 + 1))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(*((void *)&v5 + 1));
    String.hash(into:)(a1, v5, *((void *)&v5 + 1));
    sub_1000FB9E4((uint64_t)v11);
    sub_1000FB9E4((uint64_t)v11);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

uint64_t static DNSRecords.ARPA.__derived_struct_equals(_:_:)(char *a1, char *a2)
{
  if (word_100346BC4[*a1] == word_100346BC4[*a2]
    && ((uint64_t v4 = *((void *)a1 + 1),
         uint64_t v5 = *((void *)a1 + 2),
         int v6 = a1[24],
         uint64_t v7 = *((void *)a2 + 1),
         uint64_t v8 = *((void *)a2 + 2),
         int v9 = a2[24],
         v4 == v7)
      ? (BOOL v10 = v5 == v8)
      : (BOOL v10 = 0),
        (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v7, v8, 0LL) & 1) != 0) && v6 == v9))
  {
    return _s7CoreP2P11IPv6AddressV2eeoiySbAC_ACtFZ_0( *((void *)a1 + 4),  *((void *)a1 + 5),  *((void *)a1 + 6),  *((void *)a1 + 7),  *((void *)a2 + 4),  *((void *)a2 + 5),  *((void *)a2 + 6),  *((void *)a2 + 7));
  }

  else
  {
    return 0LL;
  }

Swift::Int DNSRecords.ARPA.hashValue.getter()
{
  return sub_1000D3134((void (*)(void *))DNSRecords.ARPA.hash(into:));
}

Swift::Int sub_1000F5680(uint64_t a1, uint64_t a2)
{
  return sub_1000D3180(a1, a2, (void (*)(void *))DNSRecords.ARPA.hash(into:));
}

Swift::Int sub_1000F5690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CBB80(a1, a2, a3, (void (*)(void *))DNSRecords.ARPA.hash(into:));
}

uint64_t sub_1000F569C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  v3[0] = *(void *)(v0 + 32);
  v3[1] = v1;
  return sub_1000EF854((uint64_t)v3, (uint64_t)&v4);
}

uint64_t sub_1000F56F8(char *a1, char *a2)
{
  if (word_100346BC4[*a1] != word_100346BC4[*a2]) {
    return 0LL;
  }
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *((void *)a1 + 2);
  int v6 = a1[24];
  uint64_t v8 = *((void *)a1 + 4);
  uint64_t v7 = *((void *)a1 + 5);
  uint64_t v9 = *((void *)a1 + 6);
  uint64_t v10 = *((void *)a1 + 7);
  uint64_t v11 = *((void *)a2 + 1);
  uint64_t v12 = *((void *)a2 + 2);
  int v13 = a2[24];
  uint64_t v15 = *((void *)a2 + 4);
  uint64_t v14 = *((void *)a2 + 5);
  uint64_t v16 = *((void *)a2 + 6);
  uint64_t v17 = *((void *)a2 + 7);
  if ((v4 != v11 || v5 != v12) && (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v11, v12, 0LL) & 1) == 0) {
    return 0LL;
  }
  if (v6 == v13) {
    return _s7CoreP2P11IPv6AddressV2eeoiySbAC_ACtFZ_0(v8, v7, v9, v10, v15, v14, v16, v17);
  }
  else {
    return 0LL;
  }
}

uint64_t DNSRecords.ARPABrowse.ipv6Address.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[3]);
  return v1;
}

uint64_t DNSRecords.ARPABrowse.ipv6Address.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = swift_bridgeObjectRelease(v4[3]);
  *uint64_t v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
  return result;
}

uint64_t NANDatapath.Configuration.serviceType.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 32) = result;
  return result;
}

uint64_t DNSRecords.ARPABrowse.keyData.getter()
{
  uint64_t v4 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain(v4);
  DNSRecords.ARPA.keyData.getter();
  uint64_t v2 = v1;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  return v2;
}

void DNSRecords.ARPA.keyData.getter()
{
  void v3[2] = xmmword_1003398F0;
  __int128 v2 = *(_OWORD *)(v0 + 32);
  sub_1000EF854((uint64_t)&v2, (uint64_t)v3);
  __asm { BR              X9 }

uint64_t sub_1000F597C( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  return ((uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, uint64_t))((char *)&loc_1000F5ACC + *((int *)qword_1000F61E0 + v26)))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a2 >> 40,  HIDWORD(a2),  a2 >> 24,  a2 >> 16,  a2 >> 8,  HIBYTE(v27),  HIWORD(v27),  v27 >> 40,  HIDWORD(v27),  v27 >> 24,  v27 >> 16,  v27 >> 8,  a26);
}

uint64_t sub_1000F5AE0()
{
  if (v1)
  {
    if (__OFSUB__(v1, 1LL))
    {
      __break(1u);
      JUMPOUT(0x1000F5F28LL);
    }

    return ((uint64_t (*)(void))((char *)&loc_1000F5B04 + *((int *)qword_1000F61F0 + v0)))();
  }

  else
  {
    sub_1000FB830(3567721LL, 0xE300000000000000LL);
    sub_1000FB830(1634759265LL, 0xE400000000000000LL);
    return ((uint64_t (*)(void))((char *)&loc_1000F5F70 + *((int *)qword_1000F6240 + (*(void *)(v2 - 104) >> 62))))();
  }

uint64_t sub_1000F5F80( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _BYTE *a13)
{
  uint64_t v15 = BYTE6(v13);
  uint64_t v16 = sub_100002274(&qword_1004068E0);
  *(void *)(v14 - 136) = v16;
  *(void *)(v14 - 128) = sub_1000572E4( &qword_1004068E8,  &qword_1004068E0,  (uint64_t)&protocol conformance descriptor for <A> CollectionOfOne<A>);
  *(_BYTE *)(v14 - 160) = 0;
  *(_BYTE *)(v14 - 161) = *(_BYTE *)sub_100021104((void *)(v14 - 160), v16);
  Data._Representation.replaceSubrange(_:with:count:)(v15, v15, v14 - 161, 1LL);
  sub_100002AC4((void *)(v14 - 160));
  if (*a13 != 11)
  {
    __break(1u);
    JUMPOUT(0x1000F6148LL);
  }

  *(_WORD *)(v14 - 160) = 3072;
  uint64_t v17 = sub_1000EF854(v14 - 160, v14 - 158);
  unint64_t v19 = v18;
  sub_1000FA9C4(v17, v18);
  uint64_t v20 = sub_1000208D8(v17, v19);
  return ((uint64_t (*)(uint64_t))((char *)&loc_1000F6074
                                          + *((int *)qword_1000F6250 + (*(void *)(v14 - 104) >> 62))))(v20);
}

uint64_t sub_1000F5FA0@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t v7 = a1 >> 32;
  uint64_t v8 = sub_100002274(&qword_1004068E0);
  *(void *)(v6 - 136) = v8;
  *(void *)(v6 - 128) = sub_1000572E4( &unk_1004068E8,  &qword_1004068E0,  &protocol conformance descriptor for <A> CollectionOfOne<A>);
  *(_BYTE *)(v6 - 160) = 0;
  *(_BYTE *)(v6 - 161) = *(_BYTE *)sub_100021104((void *)(v6 - 160), v8);
  Data._Representation.replaceSubrange(_:with:count:)(v7, v7, v6 - 161, 1LL);
  sub_100002AC4((void *)(v6 - 160));
  if (*a6 != 11) {
    JUMPOUT(0x1000F6144LL);
  }
  *(_WORD *)(v6 - 160) = 3072;
  uint64_t v9 = sub_1000EF854(v6 - 160, v6 - 158);
  unint64_t v11 = v10;
  sub_1000FA9C4();
  uint64_t v12 = sub_1000208D8(v9, v11);
  return ((uint64_t (*)(uint64_t))((char *)&loc_1000F6074
                                          + *((int *)qword_1000F6250 + (*(void *)(v6 - 104) >> 62))))(v12);
}

uint64_t sub_1000F6084()
{
  uint64_t v6 = BYTE6(v0);
  *(void *)(v5 - 136) = v2;
  *(void *)(v5 - 128) = v3;
  *(_BYTE *)(v5 - 160) = v1;
  *(_BYTE *)(v5 - 161) = *(_BYTE *)sub_100021104((void *)(v5 - 160), v2);
  Data._Representation.replaceSubrange(_:with:count:)(v6, v6, v5 - 161, 1LL);
  sub_100002AC4((void *)(v5 - 160));
  sub_1000208D8(v4, v8);
  return *(void *)(v5 - 112);
}

void DNSRecords.ARPABrowse.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  __int128 v9 = *(_OWORD *)v2;
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  swift_bridgeObjectRetain(v5);
  uint64_t v6 = sub_1000EF854((uint64_t)&v9, (uint64_t)&v10);
  unint64_t v8 = v7;
  Data.hash(into:)(a1, v6, v7);
  sub_1000208D8(v6, v8);
  if (v5)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v5);
    String.hash(into:)(a1, v4, v5);
    sub_1000FB9E4(v2);
    sub_1000FB9E4(v2);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Hasher._combine(_:)(*(_BYTE *)(v2 + 32));
}

BOOL static DNSRecords.ARPABrowse.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return (_s7CoreP2P11IPv6AddressV2eeoiySbAC_ACtFZ_0( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)a2,  *(void *)(a2 + 8),  *(void *)(a2 + 16),  *(void *)(a2 + 24)) & 1) != 0 && *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
}

Swift::Int DNSRecords.ARPABrowse.hashValue.getter()
{
  uint64_t v1 = v0;
  Hasher.init(_seed:)(v8, 0LL);
  __int128 v9 = *(_OWORD *)v0;
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain(v3);
  uint64_t v4 = sub_1000EF854((uint64_t)&v9, (uint64_t)&v10);
  unint64_t v6 = v5;
  Data.hash(into:)(v8, v4, v5);
  sub_1000208D8(v4, v6);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v3);
    String.hash(into:)(v8, v2, v3);
    sub_1000FB9E4(v1);
    sub_1000FB9E4(v1);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Hasher._combine(_:)(*(_BYTE *)(v1 + 32));
  return Hasher._finalize()();
}

uint64_t sub_1000F64B8()
{
  uint64_t v4 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain(v4);
  DNSRecords.ARPA.keyData.getter();
  uint64_t v2 = v1;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  return v2;
}

Swift::Int sub_1000F6538()
{
  return DNSRecords.ARPABrowse.hashValue.getter();
}

void sub_1000F6570(uint64_t a1)
{
}

Swift::Int sub_1000F65A8(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v4 = v1[3];
  Swift::UInt8 v6 = *((_BYTE *)v1 + 32);
  Hasher.init(_seed:)(v11, a1);
  v12[0] = v2;
  v12[1] = v3;
  swift_bridgeObjectRetain(v4);
  uint64_t v7 = sub_1000EF854((uint64_t)v12, (uint64_t)&v13);
  unint64_t v9 = v8;
  Data.hash(into:)(v11, v7, v8);
  sub_1000208D8(v7, v9);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v4);
    String.hash(into:)(v11, v5, v4);
    swift_bridgeObjectRelease_n(v4, 2LL);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

uint64_t sub_1000F66B0(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a2 + 32);
  return _s7CoreP2P11IPv6AddressV2eeoiySbAC_ACtFZ_0( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)a2,  *(void *)(a2 + 8),  *(void *)(a2 + 16),  *(void *)(a2 + 24)) & (v2 == v3);
}

uint64_t _s7CoreP2P10DNSRecordsO4ARPAV4hostAC10BrowseHostVvg_0()
{
  uint64_t v1 = *((void *)v0 + 2);
  uint64_t v2 = *v0;
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t _s7CoreP2P10DNSRecordsO4ARPAV11ipv6AddressAA04IPv6F0Vvg_0()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain(*(void *)(v0 + 56));
  return v1;
}

uint64_t _s7CoreP2P10DNSRecordsO4ARPAV11ipv6AddressAA04IPv6F0Vvs_0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = swift_bridgeObjectRelease(v4[7]);
  v4[4] = a1;
  v4[5] = a2;
  v4[6] = a3;
  v4[7] = a4;
  return result;
}

uint64_t DNSRecords.ARPA.type.getter()
{
  if (*v0 == 11) {
    return 11LL;
  }
  __break(1u);
  return result;
}

void DNSRecords.ARPA.valueData.getter()
{
  __asm { BR              X12 }

uint64_t sub_1000F683C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19)
{
  uint64_t v20 = BYTE6(v19);
  uint64_t v21 = sub_100002274(&qword_1004068E0);
  a16 = v21;
  a17 = sub_1000572E4( &qword_1004068E8,  &qword_1004068E0,  (uint64_t)&protocol conformance descriptor for <A> CollectionOfOne<A>);
  LOBYTE(a13) = -64;
  a12 = *(_BYTE *)sub_100021104(&a13, v21);
  Data._Representation.replaceSubrange(_:with:count:)(v20, v20, &a12, 1LL);
  uint64_t v22 = sub_100002AC4(&a13);
  return ((uint64_t (*)(uint64_t))((char *)sub_1000F68E8 + 4 * byte_100346318[a19 >> 62]))(v22);
}

uint64_t sub_1000F68E8()
{
  uint64_t v3 = BYTE6(v0);
  uint64_t v7 = v1;
  uint64_t v8 = v2;
  LOBYTE(v6[0]) = 17;
  char v5 = *(_BYTE *)sub_100021104(v6, v1);
  Data._Representation.replaceSubrange(_:with:count:)(v3, v3, &v5, 1LL);
  sub_100002AC4(v6);
  return v9;
}

void sub_1000F6978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v8[11] = a6;
  v8[7] = a5;
  uint64_t v6 = type metadata accessor for Data.Deallocator(0LL);
  v8[4] = *(void *)(v6 - 8);
  void v8[5] = v6;
  __chkstk_darwin(v6);
  v8[6] = (char *)v8 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100404190 != -1) {
    swift_once(&qword_100404190, sub_1000F9A70);
  }
  __asm { BR              X12 }

void sub_1000F6EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100002274(&qword_1004050A0);
  __chkstk_darwin(v3);
  uint64_t v6 = type metadata accessor for NWEndpoint.Port(0LL);
  v5[7] = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  v5[6] = (char *)v5 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __asm { BR              X9 }

void sub_1000F6F78()
{
  if (qword_100404190 != -1) {
    swift_once(&qword_100404190, sub_1000F9A70);
  }
  __asm { BR              X12 }

void sub_1000F7C98()
{
  if (v3 >> 32 >= v0)
  {
    uint64_t v5 = Data.subdata(in:)(v0, v3 >> 32, v3, v1);
    uint64_t v7 = v6;
    uint64_t v8 = *(uint64_t **)(v4 - 256);
    void v8[3] = (uint64_t)&type metadata for DNSRecords.TXT;
    v8[4] = (uint64_t)&protocol witness table for DNSRecords.TXT;
    uint64_t v9 = swift_allocObject(&unk_1003E4D78, 72LL, 7LL);
    *uint64_t v8 = v9;
    swift_release(*(void *)(v4 - 296));
    uint64_t v10 = *(void *)(v4 - 280);
    *(void *)(v9 + 16) = *(void *)(v4 - 272);
    *(void *)(v9 + 24) = v10;
    uint64_t v11 = *(void *)(v4 - 304);
    *(void *)(v9 + 32) = *(void *)(v4 - 288);
    *(void *)(v9 + 40) = v11;
    *(_BYTE *)(v9 + 48) = *(_DWORD *)(v4 - 312);
    *(_BYTE *)(v9 + 49) = v2;
    *(void *)(v9 + 56) = v5;
    *(void *)(v9 + 64) = v7;
    JUMPOUT(0x1000F7FA4LL);
  }

  JUMPOUT(0x1000F83C4LL);
}

uint64_t sub_1000F7D44()
{
  if (v5 >> 32 < v0 || v5 >> 32 < (int)v5)
  {
    __break(1u);
    JUMPOUT(0x1000F83CCLL);
  }

  uint64_t v7 = ((uint64_t (*)(uint64_t))Data._Representation.subscript.getter)(v0);
  unint64_t v9 = v8;
  uint64_t v10 = *(void *)(v6 - 304);
  unsigned int v11 = sub_100208CDC();
  *(void *)(v6 - 304) = v10;
  if (v10)
  {
    sub_1000208D8(v7, v9);
    JUMPOUT(0x1000F70FCLL);
  }

  unsigned int v12 = v11;
  sub_1000208D8(v7, v9);
  ((void (*)(void))NWEndpoint.Port.init(rawValue:))(bswap32(v12) >> 16);
  uint64_t v13 = *(void *)(v6 - 280);
  uint64_t v14 = *(void *)(v6 - 272);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v1, 1LL, v14) == 1)
  {
    ((void (*)(uint64_t, void *))sub_1000225EC)(v1, &unk_1004050A0);
    unint64_t v15 = sub_1000033FC();
    ((void (*)(ValueMetadata *, unint64_t, void, void))swift_allocError)( &type metadata for WiFiError,  v15,  0LL,  0LL);
    *(_OWORD *)uint64_t v16 = xmmword_100337020;
    *(_BYTE *)(v16 + 16) = 2;
    swift_willThrow();
    return swift_release(v4);
  }

  *(_DWORD *)(v6 - 320) = v3;
  uint64_t v18 = *(uint64_t (**)(void))(v13 + 32);
  uint64_t v19 = v13;
  uint64_t v20 = *(void *)(v6 - 288);
  uint64_t v21 = v18();
  ((void (*)(uint64_t))NWEndpoint.Port.rawValue.getter)(v21);
  uint64_t v22 = sub_1000F048C(v0, 2LL, v5, v2);
  uint64_t v23 = *(void *)(v6 - 304);
  uint64_t v24 = (void *)((uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_1000F84F4)(v5, v2, v22);
  if (v23)
  {
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v14);
    goto LABEL_21;
  }

  uint64_t v25 = v24;
  uint64_t v26 = v24[2];
  if (!v26) {
    goto LABEL_17;
  }
  uint64_t v27 = v24[4];
  uint64_t v28 = (void *)v24[5];
  uint64_t v29 = (uint64_t)&v24[2 * v26 + 4];
  uint64_t v31 = *(void *)(v29 - 16);
  uint64_t v30 = *(void *)(v29 - 8);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v25);
  if (v31 != 0x6C61636F6CLL || v30 != 0xE500000000000000LL)
  {
    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v30, 0x6C61636F6CLL, 0xE500000000000000LL, 0LL);
    swift_bridgeObjectRelease(v30);
    if ((v32 & 1) != 0) {
      goto LABEL_15;
    }
    uint64_t v24 = v28;
LABEL_17:
    swift_bridgeObjectRelease(v24);
    unint64_t v38 = sub_1000033FC();
    ((void (*)(ValueMetadata *, unint64_t, void, void))swift_allocError)( &type metadata for WiFiError,  v38,  0LL,  0LL);
    *(_OWORD *)uint64_t v39 = xmmword_100337020;
    *(_BYTE *)(v39 + 16) = 2;
    swift_willThrow();
    (*(void (**)(void, void))(*(void *)(v6 - 280) + 8LL))(*(void *)(v6 - 288), *(void *)(v6 - 272));
LABEL_21:
    JUMPOUT(0x1000F7170LL);
  }

  swift_bridgeObjectRelease(0xE500000000000000LL);
LABEL_15:
  ((void (*)(void, void))sub_1000F90F8)(*(void *)(v6 - 296), *(unsigned int *)(v6 - 324));
  uint64_t v33 = (int *)((uint64_t (*)(void))type metadata accessor for DNSRecords.SRV)(0LL);
  uint64_t v34 = *(void **)(v6 - 256);
  v34[3] = v33;
  v34[4] = &protocol witness table for DNSRecords.SRV;
  unint64_t v35 = sub_10002278C(v34);
  ((void (*)(char *, void, void))v18)((char *)v35 + v33[5], *(void *)(v6 - 288), *(void *)(v6 - 272));
  uint64_t result = swift_release(*(void *)(v6 - 296));
  __int128 v36 = *(_OWORD *)(v6 - 152);
  *(_OWORD *)unint64_t v35 = *(_OWORD *)(v6 - 168);
  *((_OWORD *)v35 + 1) = v36;
  *((_WORD *)v35 + 16) = *(_WORD *)(v6 - 136);
  uint64_t v37 = (void *)((char *)v35 + v33[6]);
  *uint64_t v37 = v27;
  v37[1] = v28;
  *(_WORD *)((char *)v35 + v33[7]) = *(_DWORD *)(v6 - 320);
  *(_WORD *)((char *)v35 + v33[8]) = *(_DWORD *)(v6 - 312);
  return result;
}

void sub_1000F84F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v3);
  __asm { BR              X10 }

uint64_t sub_1000F858C()
{
  if (v3 >= 0 && BYTE6(v2) > v3)
  {
    *(void *)(v6 - 280) = v0;
    *(void *)(v6 - 288) = v1;
    *(void *)(v6 - 136) = BYTE6(v2);
    *(void *)(v6 - 192) = v4 >> 8;
    *(void *)(v6 - 128) = _swiftEmptyArrayStorage;
    *(void *)(v6 - 208) = v4 >> 24;
    *(void *)(v6 - 200) = v4 >> 16;
    *(void *)(v6 - 184) = HIDWORD(v4);
    *(void *)(v6 - 224) = HIWORD(v4);
    *(void *)(v6 - 216) = v4 >> 40;
    *(void *)(v6 - 240) = v2 >> 8;
    *(void *)(v6 - 232) = HIBYTE(v4);
    *(void *)(v6 - 256) = v2 >> 24;
    *(void *)(v6 - 248) = v2 >> 16;
    *(void *)(v6 - 264) = HIDWORD(v2);
    *(void *)(v6 - 272) = v2 >> 40;
    *(void *)(v6 - 296) = v3;
    *(void *)(v6 - 152) = (uint64_t)v4 >> 32;
    *(void *)(v6 - 144) = v5;
    *(void *)(v6 - 168) = v5;
    *(void *)(v6 - 160) = (int)v4;
    *(void *)(v6 - 176) = v2 & 0x3FFFFFFFFFFFFFFFLL;
    __asm { BR              X9 }
  }

  unint64_t v7 = sub_1000033FC();
  uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
  *(void *)uint64_t v9 = 0LL;
  *(void *)(v9 + 8) = 0LL;
  *(_BYTE *)(v9 + 16) = 2;
  swift_willThrow(v8);
  return *(void *)(v6 - 128);
}

void sub_1000F90F8(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (uint64_t *)(a1 + 16);
  swift_beginAccess(a1 + 16, v25, 0LL, 0LL);
  unint64_t v7 = *(void **)(a1 + 16);
  if (v7[2] != 4LL) {
    goto LABEL_11;
  }
  uint64_t v8 = v7[10];
  uint64_t v9 = v7[11];
  if (v8 == 0x6C61636F6CLL && v9 == 0xE500000000000000LL) {
    goto LABEL_9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, 0x6C61636F6CLL, 0xE500000000000000LL, 0LL) & 1) == 0) {
    goto LABEL_11;
  }
  unint64_t v11 = v7[2];
  if (!v11) {
    goto LABEL_11;
  }
  if (v11 >= 3)
  {
LABEL_9:
    uint64_t v13 = v7[4];
    uint64_t v12 = v7[5];
    uint64_t v14 = v7[8];
    unint64_t v15 = v7[9];
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v15);
    char v16 = _s7CoreP2P14Layer3ProtocolO8dnsLabelACSgSS_tcfC_0(v14, v15);
    if (v16 == 2)
    {
      swift_bridgeObjectRelease(v12);
LABEL_11:
      unint64_t v17 = sub_1000033FC();
      uint64_t v18 = swift_allocError(&type metadata for WiFiError, v17, 0LL, 0LL);
      *(_OWORD *)uint64_t v19 = xmmword_100337020;
      *(_BYTE *)(v19 + 16) = 2;
      swift_willThrow(v18);
      return;
    }

    char v20 = v16;
    swift_beginAccess(v6, &v24, 0LL, 0LL);
    uint64_t v21 = *v6;
    if (*(void *)(*v6 + 16) >= 2uLL)
    {
      uint64_t v23 = *(void *)(v21 + 48);
      uint64_t v22 = *(void *)(v21 + 56);
      *(void *)a3 = v13;
      *(void *)(a3 + 8) = v12;
      *(void *)(a3 + 16) = v23;
      *(void *)(a3 + 24) = v22;
      *(_BYTE *)(a3 + 32) = v20 & 1;
      *(_BYTE *)(a3 + 33) = a2;
      swift_bridgeObjectRetain(v22);
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t DNSRecords.RecordType.description.getter(unsigned __int8 a1)
{
  v1._uint64_t countAndFlagsBits = sub_1000F9330(a1);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._uint64_t countAndFlagsBits = 91LL;
  v3._object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt16,  &protocol witness table for UInt16);
  uint64_t v5 = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v5);
  v6._uint64_t countAndFlagsBits = 10077LL;
  v6._object = (void *)0xE200000000000000LL;
  String.append(_:)(v6);
  return 39LL;
}

uint64_t sub_1000F9330(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000F9364 + 4 * word_10034631C[a1]))( 0x73736572646441LL,  0xE700000000000000LL);
}

uint64_t sub_1000F9364()
{
  return 0x7365522D414E4149LL;
}

unint64_t sub_1000F9388()
{
  return 0xD000000000000028LL;
}

BOOL sub_1000F993C(char *a1, char *a2)
{
  return word_100346BC4[*a1] == word_100346BC4[*a2];
}

Swift::Int sub_1000F9960()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(word_100346BC4[v1]);
  return Hasher._finalize()();
}

void sub_1000F99AC()
{
}

Swift::Int sub_1000F99E0(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(word_100346BC4[v2]);
  return Hasher._finalize()();
}

uint64_t sub_1000F9A28@<X0>(unsigned __int16 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = _s7CoreP2P10DNSRecordsO10RecordTypeO8rawValueAESgs6UInt16V_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_1000F9A50(_WORD *a1@<X8>)
{
  *a1 = word_100346BC4[*v1];
}

uint64_t sub_1000F9A68()
{
  return DNSRecords.RecordType.description.getter(*v0);
}

uint64_t sub_1000F9A70()
{
  uint64_t result = sub_1000FB08C((uint64_t)&off_1003D4A90);
  qword_100407F50 = result;
  *(void *)algn_100407F58 = v1;
  return result;
}

uint64_t sub_1000F9A98()
{
  uint64_t result = sub_1000FB08C((uint64_t)&off_1003D4A68);
  qword_100407F60 = result;
  *(void *)algn_100407F68 = v1;
  return result;
}

void sub_1000F9AC0()
{
  if (qword_100404190 != -1) {
    swift_once(&qword_100404190, sub_1000F9A70);
  }
  __asm { BR              X10 }

uint64_t sub_1000F9DE4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v7 = String.count.getter(a1, a2);
  if ((v7 & 0x8000000000000000LL) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
LABEL_8:
    __break(1u);
    return result;
  }

  unint64_t v8 = v7;
  if (v7 >= 0x100)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    goto LABEL_8;
  }

  uint64_t v9 = a3 + 16;
  swift_beginAccess(a3 + 16, v20, 33LL, 0LL);
  uint64_t v10 = *(void *)(a3 + 40);
  uint64_t v11 = *(void *)(a3 + 48);
  sub_1000237C8(a3 + 16, v10);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v8, v10, v11);
  uint64_t result = swift_endAccess(v20);
  if (!v3)
  {
    swift_bridgeObjectRetain(a2);
    uint64_t v13 = sub_1000EF90C(a1, a2);
    unint64_t v15 = v14;
    v19[0] = v13;
    v19[1] = v14;
    swift_beginAccess(a3 + 16, v20, 33LL, 0LL);
    uint64_t v17 = *(void *)(a3 + 40);
    uint64_t v16 = *(void *)(a3 + 48);
    sub_1000237C8(v9, v17);
    unint64_t v18 = sub_10005CD78();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v19, &type metadata for Data, v18, v17, v16);
    swift_endAccess(v20);
    return sub_1000208D8(v13, v15);
  }

  return result;
}

uint64_t sub_1000F9FA0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  BOOL v5 = a1 == 0x79616C707269615FLL && a2 == 0xE800000000000000LL;
  if (v5
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x79616C707269615FLL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    uint64_t v8 = a3 + 16;
    swift_beginAccess(a3 + 16, v21, 33LL, 0LL);
    uint64_t v9 = *(void *)(a3 + 40);
    uint64_t v10 = *(void *)(a3 + 48);
    sub_1000237C8(a3 + 16, v9);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(192LL, v9, v10);
    uint64_t result = swift_endAccess(v21);
    if (!v3)
    {
      swift_beginAccess(a3 + 16, v21, 33LL, 0LL);
      uint64_t v13 = *(void *)(a3 + 40);
      uint64_t v12 = *(void *)(a3 + 48);
      sub_1000237C8(v8, v13);
      uint64_t v14 = 3LL;
LABEL_8:
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v14, v13, v12);
      return swift_endAccess(v21);
    }
  }

  else if (a1 == 0x706F61725FLL && a2 == 0xE500000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x706F61725FLL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    uint64_t v15 = a3 + 16;
    swift_beginAccess(a3 + 16, v21, 33LL, 0LL);
    uint64_t v16 = *(void *)(a3 + 40);
    uint64_t v17 = *(void *)(a3 + 48);
    sub_1000237C8(a3 + 16, v16);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(192LL, v16, v17);
    uint64_t result = swift_endAccess(v21);
    if (!v3)
    {
      swift_beginAccess(a3 + 16, v21, 33LL, 0LL);
      uint64_t v13 = *(void *)(a3 + 40);
      uint64_t v12 = *(void *)(a3 + 48);
      sub_1000237C8(v15, v13);
      uint64_t v14 = 6LL;
      goto LABEL_8;
    }
  }

  else if (a1 == 0x706F72647269615FLL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x706F72647269615FLL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    uint64_t v18 = a3 + 16;
    swift_beginAccess(a3 + 16, v21, 33LL, 0LL);
    uint64_t v19 = *(void *)(a3 + 40);
    uint64_t v20 = *(void *)(a3 + 48);
    sub_1000237C8(a3 + 16, v19);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(192LL, v19, v20);
    if (!v3)
    {
      swift_endAccess(v21);
      swift_beginAccess(a3 + 16, v21, 33LL, 0LL);
      uint64_t v13 = *(void *)(a3 + 40);
      uint64_t v12 = *(void *)(a3 + 48);
      sub_1000237C8(v18, v13);
      uint64_t v14 = 9LL;
      goto LABEL_8;
    }

    return swift_endAccess(v21);
  }

  else
  {
    return sub_1000F9DE4(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000FA278(char a1, uint64_t a2)
{
  uint64_t v4 = a2 + 16;
  if ((a1 & 1) != 0)
  {
    swift_beginAccess(v4, v13, 33LL, 0LL);
    uint64_t v11 = *(void *)(a2 + 40);
    uint64_t v12 = *(void *)(a2 + 48);
    sub_1000237C8(v4, v11);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(192LL, v11, v12);
    uint64_t result = swift_endAccess(v13);
    if (v2) {
      return result;
    }
    swift_beginAccess(v4, v13, 33LL, 0LL);
    uint64_t v9 = *(void *)(a2 + 40);
    uint64_t v8 = *(void *)(a2 + 48);
    sub_1000237C8(v4, v9);
    uint64_t v10 = 11LL;
  }

  else
  {
    swift_beginAccess(v4, v13, 33LL, 0LL);
    uint64_t v5 = *(void *)(a2 + 40);
    uint64_t v6 = *(void *)(a2 + 48);
    sub_1000237C8(v4, v5);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(192LL, v5, v6);
    uint64_t result = swift_endAccess(v13);
    if (v2) {
      return result;
    }
    swift_beginAccess(v4, v13, 33LL, 0LL);
    uint64_t v9 = *(void *)(a2 + 40);
    uint64_t v8 = *(void *)(a2 + 48);
    sub_1000237C8(v4, v9);
    uint64_t v10 = 10LL;
  }

  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v10, v9, v8);
  return swift_endAccess(v13);
}

uint64_t sub_1000FA3C8(uint64_t a1, unint64_t a2, __int16 a3, uint64_t a4)
{
  __int16 v9 = a3 & 0xFF01;
  if (sub_1000FAC64(0x79616C707269615FLL, 0xE800000000000000LL, 256, a1, a2, a3 & 0xFF01)
    || (int v34 = a3 & 1,
        uint64_t v30 = 0x79616C707269615FLL,
        unint64_t v31 = 0xE800000000000000LL,
        uint64_t v32 = a1,
        unint64_t v33 = a2,
        unint64_t v17 = sub_10000B08C(),
        !StringProtocol.caseInsensitiveCompare<A>(_:)( &v32,  &type metadata for String,  &type metadata for String,  v17,  v17))
    && (v34
     || (_stringCompareWithSmolCheck(_:_:expecting:)( 7365749LL,  0xE300000000000000LL,  7365492LL,  0xE300000000000000LL,  0LL) & 1) != 0)
    && HIBYTE(a3) == 1)
  {
    uint64_t v10 = a4 + 16;
    swift_beginAccess(a4 + 16, &v30, 33LL, 0LL);
    uint64_t v11 = *(void *)(a4 + 40);
    uint64_t v12 = *(void *)(a4 + 48);
    sub_1000237C8(a4 + 16, v11);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(192LL, v11, v12);
    uint64_t result = swift_endAccess(&v30);
    if (v4) {
      return result;
    }
    swift_beginAccess(a4 + 16, &v30, 33LL, 0LL);
    uint64_t v15 = *(void *)(a4 + 40);
    uint64_t v14 = *(void *)(a4 + 48);
    sub_1000237C8(v10, v15);
    uint64_t v16 = 1LL;
    goto LABEL_29;
  }

  if (sub_1000FAC64(0x706F61725FLL, 0xE500000000000000LL, 256, a1, a2, v9))
  {
    uint64_t v18 = a4 + 16;
    swift_beginAccess(a4 + 16, &v30, 33LL, 0LL);
    uint64_t v19 = *(void *)(a4 + 40);
    uint64_t v20 = *(void *)(a4 + 48);
    sub_1000237C8(a4 + 16, v19);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(192LL, v19, v20);
    if (!v4)
    {
      swift_endAccess(&v30);
      swift_beginAccess(a4 + 16, &v30, 33LL, 0LL);
      uint64_t v15 = *(void *)(a4 + 40);
      uint64_t v14 = *(void *)(a4 + 48);
      sub_1000237C8(v18, v15);
      uint64_t v16 = 4LL;
LABEL_29:
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v16, v15, v14);
      return swift_endAccess(&v30);
    }

    return swift_endAccess(&v30);
  }

  uint64_t v30 = 0x706F61725FLL;
  unint64_t v31 = 0xE500000000000000LL;
  uint64_t v32 = a1;
  unint64_t v33 = a2;
  if (!StringProtocol.caseInsensitiveCompare<A>(_:)( &v32,  &type metadata for String,  &type metadata for String,  v17,  v17)
    && (v34
     || (_stringCompareWithSmolCheck(_:_:expecting:)( 7365749LL,  0xE300000000000000LL,  7365492LL,  0xE300000000000000LL,  0LL) & 1) != 0)
    && HIBYTE(a3) == 1)
  {
    uint64_t v24 = a4 + 16;
    swift_beginAccess(a4 + 16, &v30, 33LL, 0LL);
    uint64_t v25 = *(void *)(a4 + 40);
    uint64_t v26 = *(void *)(a4 + 48);
    sub_1000237C8(a4 + 16, v25);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(192LL, v25, v26);
    if (!v4)
    {
      swift_endAccess(&v30);
      swift_beginAccess(a4 + 16, &v30, 33LL, 0LL);
      uint64_t v15 = *(void *)(a4 + 40);
      uint64_t v14 = *(void *)(a4 + 48);
      sub_1000237C8(v24, v15);
      uint64_t v16 = 5LL;
      goto LABEL_29;
    }

    return swift_endAccess(&v30);
  }

  if (sub_1000FAC64(0x706F72647269615FLL, 0xE800000000000000LL, 256, a1, a2, v9))
  {
    uint64_t v21 = a4 + 16;
    swift_beginAccess(a4 + 16, &v30, 33LL, 0LL);
    uint64_t v22 = *(void *)(a4 + 40);
    uint64_t v23 = *(void *)(a4 + 48);
    sub_1000237C8(a4 + 16, v22);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(192LL, v22, v23);
    if (!v4)
    {
      swift_endAccess(&v30);
      swift_beginAccess(a4 + 16, &v30, 33LL, 0LL);
      uint64_t v15 = *(void *)(a4 + 40);
      uint64_t v14 = *(void *)(a4 + 48);
      sub_1000237C8(v21, v15);
      uint64_t v16 = 7LL;
      goto LABEL_29;
    }

    return swift_endAccess(&v30);
  }

  uint64_t v30 = 0x706F72647269615FLL;
  unint64_t v31 = 0xE800000000000000LL;
  uint64_t v32 = a1;
  unint64_t v33 = a2;
  if (!StringProtocol.caseInsensitiveCompare<A>(_:)( &v32,  &type metadata for String,  &type metadata for String,  v17,  v17)
    && (v34
     || (_stringCompareWithSmolCheck(_:_:expecting:)( 7365749LL,  0xE300000000000000LL,  7365492LL,  0xE300000000000000LL,  0LL) & 1) != 0)
    && HIBYTE(a3) == 1)
  {
    uint64_t v27 = a4 + 16;
    swift_beginAccess(a4 + 16, &v30, 33LL, 0LL);
    uint64_t v28 = *(void *)(a4 + 40);
    uint64_t v29 = *(void *)(a4 + 48);
    sub_1000237C8(a4 + 16, v28);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(192LL, v28, v29);
    if (!v4)
    {
      swift_endAccess(&v30);
      swift_beginAccess(a4 + 16, &v30, 33LL, 0LL);
      uint64_t v15 = *(void *)(a4 + 40);
      uint64_t v14 = *(void *)(a4 + 48);
      sub_1000237C8(v27, v15);
      uint64_t v16 = 8LL;
      goto LABEL_29;
    }

    return swift_endAccess(&v30);
  }

  uint64_t result = sub_1000F9FA0(a1, a2, a4);
  if (!v4) {
    return sub_1000FA278(v34, a4);
  }
  return result;
}

_BYTE *sub_1000FA8EC@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0LL;
LABEL_4:
    unint64_t v5 = 0xC000000000000000LL;
    goto LABEL_5;
  }

  if (v4 <= 14)
  {
    uint64_t result = (_BYTE *)sub_1000FAED4(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }

  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (_BYTE *)sub_1000FAF94((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000LL;
  }

  else
  {
    uint64_t result = (_BYTE *)sub_1000FB00C((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000LL;
  }

void *sub_1000FA960( void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }

  uint64_t result = a1(&v6, 0LL, 0LL);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

void sub_1000FA9C4(uint64_t a1, uint64_t a2)
{
  _OWORD v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  uint64_t v2 = (char *)&loc_1000FAA28 + dword_1000FABCC[sub_100021104(v3, (uint64_t)&type metadata for Data)[1] >> 62];
  __asm { BR              X10 }

uint64_t sub_1000FAA38()
{
  uint64_t v5 = v2;
  __int16 v6 = v3;
  char v7 = BYTE2(v3);
  char v8 = BYTE3(v3);
  char v9 = BYTE4(v3);
  char v10 = BYTE5(v3);
  sub_100020AFC(v1, v0);
  Data._Representation.append(contentsOf:)(&v5, (char *)&v5 + BYTE6(v3));
  return sub_100002AC4(&v11);
}

uint64_t sub_1000FABDC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v8 = *a3;
    uint64_t v7 = a3[1];
    swift_bridgeObjectRetain(v7);
    uint64_t result = _StringGuts.copyUTF8(into:)(v5, a2, v8, v7);
    if ((v9 & 1) == 0)
    {
      uint64_t v10 = result;
      uint64_t result = swift_bridgeObjectRelease(v7);
      *a4 = 0LL;
      a4[1] = 0xE000000000000000LL;
      a4[2] = 15LL;
      a4[3] = v10;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

BOOL sub_1000FAC64(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, __int16 a6)
{
  void v13[2] = a1;
  void v13[3] = a2;
  v13[0] = a4;
  v13[1] = a5;
  unint64_t v8 = sub_10000B08C();
  if (StringProtocol.caseInsensitiveCompare<A>(_:)(v13, &type metadata for String, &type metadata for String, v8, v8)) {
    return 0LL;
  }
  if ((a3 & 1) != 0) {
    uint64_t v10 = 7365749LL;
  }
  else {
    uint64_t v10 = 7365492LL;
  }
  if ((a6 & 1) != 0) {
    uint64_t v11 = 7365749LL;
  }
  else {
    uint64_t v11 = 7365492LL;
  }
  if (v10 == v11)
  {
    swift_bridgeObjectRelease_n(0xE300000000000000LL, 2LL);
  }

  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, 0xE300000000000000LL, v11, 0xE300000000000000LL, 0LL);
    swift_bridgeObjectRelease_n(0xE300000000000000LL, 2LL);
    BOOL result = 0LL;
    if ((v12 & 1) == 0) {
      return result;
    }
  }

  return HIBYTE(a3) == (unsigned __int16)(a6 & 0xFF00) >> 8;
}

BOOL _s7CoreP2P10DNSRecordsO3SRVV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[3];
  uint64_t v25 = a1[2];
  __int16 v6 = *((unsigned __int8 *)a1 + 32);
  __int16 v7 = *((unsigned __int8 *)a1 + 33);
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  uint64_t v10 = a2[2];
  uint64_t v11 = a2[3];
  __int16 v12 = *((unsigned __int8 *)a2 + 32);
  __int16 v13 = *((unsigned __int8 *)a2 + 33);
  uint64_t v27 = *a1;
  uint64_t v28 = v4;
  v26[0] = v8;
  v26[1] = v9;
  unint64_t v14 = sub_10000B08C();
  if (StringProtocol.caseInsensitiveCompare<A>(_:)(v26, &type metadata for String, &type metadata for String, v14, v14)) {
    return 0LL;
  }
  if (!sub_1000FAC64(v25, v5, v6 | (v7 << 8), v10, v11, v12 | (v13 << 8))) {
    return 0LL;
  }
  uint64_t v15 = (int *)type metadata accessor for DNSRecords.SRV(0LL);
  uint64_t v16 = type metadata accessor for NWEndpoint.Port(0LL);
  uint64_t v17 = sub_10000AF70( &qword_100406350,  (uint64_t (*)(uint64_t))&type metadata accessor for NWEndpoint.Port,  (uint64_t)&protocol conformance descriptor for NWEndpoint.Port);
  dispatch thunk of RawRepresentable.rawValue.getter(v16, v17);
  dispatch thunk of RawRepresentable.rawValue.getter(v16, v17);
  uint64_t v18 = v15[6];
  uint64_t v19 = *(uint64_t *)((char *)a1 + v18);
  uint64_t v20 = *(uint64_t *)((char *)a1 + v18 + 8);
  uint64_t v21 = (uint64_t *)((char *)a2 + v18);
  uint64_t v22 = v21[1];
  if (v19 == *v21 && v20 == v22
    || (v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, *v21, v22, 0LL), BOOL result = 0LL, (v23 & 1) != 0))
  {
    return 0LL;
  }

  return result;
}

uint64_t sub_1000FAED4(_BYTE *__src, _BYTE *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0LL;
  }
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }

  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_1000FAF94(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = type metadata accessor for Data.RangeReference(0LL);
    uint64_t result = swift_allocObject(v6, 32LL, 7LL);
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = v3;
  }

  return result;
}

uint64_t sub_1000FB00C(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if ((v3 & 0x80000000) == 0) {
    return v3 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1000FB08C(uint64_t a1)
{
  uint64_t v9 = sub_100002274(&qword_100406978);
  uint64_t v10 = sub_1000572E4( (unint64_t *)&qword_100408050,  &qword_100406978,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  v8[0] = a1;
  unint64_t v2 = sub_100021104(v8, v9);
  uint64_t v3 = (_BYTE *)(*v2 + 32LL);
  uint64_t v4 = &v3[*(void *)(*v2 + 16LL)];
  swift_bridgeObjectRetain(a1);
  sub_1000FA8EC(v3, v4, &v7);
  uint64_t v5 = v7;
  sub_100002AC4(v8);
  return v5;
}

_BYTE *sub_1000FB13C(_BYTE *result, _BYTE *a2)
{
  if (result)
  {
    uint64_t v2 = a2 - result;
    if (a2 == result)
    {
      return 0LL;
    }

    else if (v2 <= 14)
    {
      return (_BYTE *)sub_1000FAED4(result, a2);
    }

    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)sub_1000FAF94((uint64_t)result, (uint64_t)a2);
    }

    else
    {
      return (_BYTE *)sub_1000FB00C((uint64_t)result, (uint64_t)a2);
    }
  }

  return result;
}

uint64_t sub_1000FB1A0(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0LL;
      }
    }

    else
    {
      uint64_t v2 = type metadata accessor for __DataStorage(0LL);
      swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
      __DataStorage.init(length:)(v1);
      if (v1 >= 0x7FFFFFFF)
      {
        uint64_t v3 = type metadata accessor for Data.RangeReference(0LL);
        uint64_t result = swift_allocObject(v3, 32LL, 7LL);
        *(void *)(result + 16) = 0LL;
        *(void *)(result + 24) = v1;
      }

      else
      {
        return v1 << 32;
      }
    }
  }

  return result;
}

uint64_t _s7CoreP2P10DNSRecordsO10RecordTypeO8rawValueAESgs6UInt16V_tcfC_0(unsigned __int16 a1)
{
  int v1 = a1 - 1;
  uint64_t result = 1LL;
  switch(v1)
  {
    case 0:
      uint64_t result = 0LL;
      break;
    case 1:
      return result;
    case 2:
      uint64_t result = 2LL;
      break;
    case 3:
      uint64_t result = 3LL;
      break;
    case 4:
      uint64_t result = 4LL;
      break;
    case 5:
      uint64_t result = 5LL;
      break;
    case 6:
      uint64_t result = 6LL;
      break;
    case 7:
      uint64_t result = 7LL;
      break;
    case 8:
      uint64_t result = 8LL;
      break;
    case 9:
      uint64_t result = 9LL;
      break;
    case 10:
      uint64_t result = 10LL;
      break;
    case 11:
      uint64_t result = 11LL;
      break;
    case 12:
      uint64_t result = 12LL;
      break;
    case 13:
      uint64_t result = 13LL;
      break;
    case 14:
      uint64_t result = 14LL;
      break;
    case 15:
      uint64_t result = 15LL;
      break;
    case 16:
      uint64_t result = 16LL;
      break;
    case 17:
      uint64_t result = 17LL;
      break;
    case 18:
      uint64_t result = 18LL;
      break;
    case 19:
      uint64_t result = 19LL;
      break;
    case 20:
      uint64_t result = 20LL;
      break;
    case 21:
      uint64_t result = 21LL;
      break;
    case 22:
      uint64_t result = 22LL;
      break;
    case 23:
      uint64_t result = 23LL;
      break;
    case 24:
      uint64_t result = 24LL;
      break;
    case 25:
      uint64_t result = 25LL;
      break;
    case 26:
      uint64_t result = 26LL;
      break;
    case 27:
      uint64_t result = 27LL;
      break;
    case 28:
      uint64_t result = 28LL;
      break;
    case 29:
      uint64_t result = 29LL;
      break;
    case 30:
      uint64_t result = 30LL;
      break;
    case 31:
      uint64_t result = 31LL;
      break;
    case 32:
      uint64_t result = 32LL;
      break;
    case 33:
      uint64_t result = 33LL;
      break;
    case 34:
      uint64_t result = 34LL;
      break;
    case 35:
      uint64_t result = 35LL;
      break;
    case 36:
      uint64_t result = 36LL;
      break;
    case 37:
      uint64_t result = 37LL;
      break;
    case 38:
      uint64_t result = 38LL;
      break;
    case 39:
      uint64_t result = 39LL;
      break;
    case 40:
      uint64_t result = 40LL;
      break;
    case 41:
      uint64_t result = 41LL;
      break;
    case 42:
      uint64_t result = 42LL;
      break;
    case 43:
      uint64_t result = 43LL;
      break;
    case 44:
      uint64_t result = 44LL;
      break;
    case 45:
      uint64_t result = 45LL;
      break;
    case 46:
      uint64_t result = 46LL;
      break;
    case 47:
      uint64_t result = 47LL;
      break;
    case 48:
      uint64_t result = 48LL;
      break;
    case 49:
      uint64_t result = 49LL;
      break;
    case 50:
      uint64_t result = 50LL;
      break;
    case 54:
      uint64_t result = 51LL;
      break;
    case 63:
      uint64_t result = 52LL;
      break;
    case 64:
      uint64_t result = 53LL;
      break;
    case 98:
      uint64_t result = 54LL;
      break;
    case 99:
      uint64_t result = 55LL;
      break;
    case 100:
      uint64_t result = 56LL;
      break;
    case 101:
      uint64_t result = 57LL;
      break;
    case 102:
      uint64_t result = 58LL;
      break;
    case 248:
      uint64_t result = 59LL;
      break;
    case 249:
      uint64_t result = 60LL;
      break;
    case 250:
      uint64_t result = 61LL;
      break;
    case 251:
      uint64_t result = 62LL;
      break;
    case 252:
      uint64_t result = 63LL;
      break;
    case 253:
      uint64_t result = 64LL;
      break;
    default:
      uint64_t result = 65LL;
      break;
  }

  return result;
}

uint64_t sub_1000FB474(char a1)
{
  else {
    return (a1 - 1);
  }
}

void sub_1000FB48C(uint64_t a1, unint64_t a2)
{
  if (qword_100404190 != -1) {
    swift_once(&qword_100404190, sub_1000F9A70);
  }
  __asm { BR              X12 }

uint64_t type metadata accessor for DNSRecords.SRV(uint64_t a1)
{
  uint64_t result = qword_100408008;
  if (!qword_100408008) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DNSRecords.SRV);
  }
  return result;
}

uint64_t sub_1000FB7A0()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000FB7C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AWDLActionFrame.ServiceResponse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FB808(uint64_t a1)
{
  return a1;
}

void sub_1000FB830(uint64_t a1, unint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_1000FB88C@<X0>(int a1@<W8>)
{
  if (BYTE6(v2) < 0x40uLL)
  {
    if (!a1) {
      goto LABEL_10;
    }
    if (a1 == 1)
    {
      if (!__OFSUB__(HIDWORD(v1), (_DWORD)v1))
      {
        unint64_t v3 = HIDWORD(v1) - (int)v1;
        goto LABEL_8;
      }

      __break(1u);
    }

    else
    {
      uint64_t v5 = *(void *)(v1 + 16);
      uint64_t v4 = *(void *)(v1 + 24);
      unint64_t v3 = v4 - v5;
      if (!__OFSUB__(v4, v5))
      {
LABEL_8:
        if ((v3 & 0x8000000000000000LL) == 0)
        {
          if (v3 < 0x100)
          {
LABEL_10:
            sub_1000F038C();
            sub_100020AFC(v1, v2);
            sub_1000FA9C4(v1, v2);
            sub_1000208D8(v1, v2);
            return sub_1000208D8(v1, v2);
          }

          _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
LABEL_16:
          __break(1u);
          JUMPOUT(0x1000FB9D4LL);
        }

uint64_t sub_1000FB9E4(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000FBA10()
{
  unint64_t result = qword_100407F70;
  if (!qword_100407F70)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DNSRecords.BrowseHost,  &type metadata for DNSRecords.BrowseHost);
    atomic_store(result, (unint64_t *)&qword_100407F70);
  }

  return result;
}

unint64_t sub_1000FBA58()
{
  unint64_t result = qword_100410520;
  if (!qword_100410520)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DNSRecords.Identifier,  &type metadata for DNSRecords.Identifier);
    atomic_store(result, (unint64_t *)&qword_100410520);
  }

  return result;
}

unint64_t sub_1000FBAA0()
{
  unint64_t result = qword_100407F78;
  if (!qword_100407F78)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DNSRecords.PTR,  &type metadata for DNSRecords.PTR);
    atomic_store(result, (unint64_t *)&qword_100407F78);
  }

  return result;
}

unint64_t sub_1000FBAE8()
{
  unint64_t result = qword_100407F80;
  if (!qword_100407F80)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DNSRecords.TXT,  &type metadata for DNSRecords.TXT);
    atomic_store(result, (unint64_t *)&qword_100407F80);
  }

  return result;
}

uint64_t sub_1000FBB2C()
{
  return sub_10000AF70( &qword_100407F88,  type metadata accessor for DNSRecords.SRV,  (uint64_t)&protocol conformance descriptor for DNSRecords.SRV);
}

unint64_t sub_1000FBB5C()
{
  unint64_t result = qword_100407F90;
  if (!qword_100407F90)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DNSRecords.AAAA,  &type metadata for DNSRecords.AAAA);
    atomic_store(result, (unint64_t *)&qword_100407F90);
  }

  return result;
}

unint64_t sub_1000FBBA4()
{
  unint64_t result = qword_100407F98;
  if (!qword_100407F98)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DNSRecords.ARPABrowse,  &type metadata for DNSRecords.ARPABrowse);
    atomic_store(result, (unint64_t *)&qword_100407F98);
  }

  return result;
}

unint64_t sub_1000FBBEC()
{
  unint64_t result = qword_100407FA0;
  if (!qword_100407FA0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DNSRecords.ARPA,  &type metadata for DNSRecords.ARPA);
    atomic_store(result, (unint64_t *)&qword_100407FA0);
  }

  return result;
}

unint64_t sub_1000FBC34()
{
  unint64_t result = qword_100407FA8;
  if (!qword_100407FA8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DNSRecords.RecordType,  &type metadata for DNSRecords.RecordType);
    atomic_store(result, (unint64_t *)&qword_100407FA8);
  }

  return result;
}

ValueMetadata *type metadata accessor for DNSRecords()
{
  return &type metadata for DNSRecords;
}

uint64_t initializeWithCopy for DNSRecords.BrowseHost(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for DNSRecords.BrowseHost(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for DNSRecords.BrowseHost(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DNSRecords.BrowseHost(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for DNSRecords.BrowseHost(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DNSRecords.BrowseHost(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DNSRecords.BrowseHost()
{
  return &type metadata for DNSRecords.BrowseHost;
}

uint64_t sub_1000FBE18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for DNSRecords.Identifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

__n128 initializeWithTake for NANBloomFilter(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for DNSRecords.Identifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for DNSRecords.Identifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 18)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DNSRecords.Identifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 18) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 18) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DNSRecords.Identifier()
{
  return &type metadata for DNSRecords.Identifier;
}

uint64_t destroy for DNSRecords.PTR(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

uint64_t initializeWithCopy for DNSRecords.PTR(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for DNSRecords.PTR(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

__n128 initializeWithTake for DNSRecords.PTR(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DNSRecords.PTR(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

uint64_t getEnumTagSinglePayload for DNSRecords.PTR(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 34)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DNSRecords.PTR(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_WORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 34) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 34) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DNSRecords.PTR()
{
  return &type metadata for DNSRecords.PTR;
}

uint64_t destroy for DNSRecords.TXT(void *a1)
{
  return sub_1000208D8(a1[5], a1[6]);
}

uint64_t initializeWithCopy for DNSRecords.TXT(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  uint64_t v5 = *(void *)(a2 + 40);
  unint64_t v6 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  sub_100020AFC(v5, v6);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  return a1;
}

uint64_t assignWithCopy for DNSRecords.TXT(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  uint64_t v9 = *(void *)(a2 + 40);
  unint64_t v8 = *(void *)(a2 + 48);
  sub_100020AFC(v9, v8);
  uint64_t v10 = *(void *)(a1 + 40);
  unint64_t v11 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v8;
  sub_1000208D8(v10, v11);
  return a1;
}

__n128 initializeWithTake for DNSRecords.TXT(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DNSRecords.TXT(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  uint64_t v8 = *(void *)(a1 + 40);
  unint64_t v9 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_1000208D8(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for DNSRecords.TXT(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DNSRecords.TXT(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DNSRecords.TXT()
{
  return &type metadata for DNSRecords.TXT;
}

void *initializeBufferWithCopyOfBuffer for DNSRecords.SRV(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v20);
  }

  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[2];
    uint64_t v9 = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
    uint64_t v10 = a3[5];
    uint64_t v11 = a1 + v10;
    uint64_t v12 = (uint64_t)a2 + v10;
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v9;
    uint64_t v13 = type metadata accessor for NWEndpoint.Port(0LL);
    unint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    v14(v11, v12, v13);
    uint64_t v15 = a3[6];
    uint64_t v16 = a3[7];
    uint64_t v17 = (void *)((char *)v4 + v15);
    uint64_t v18 = (uint64_t *)((char *)a2 + v15);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    *(_WORD *)((char *)v4 + v16) = *(_WORD *)((char *)a2 + v16);
    *(_WORD *)((char *)v4 + a3[8]) = *(_WORD *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain(v19);
  }

  return v4;
}

uint64_t destroy for DNSRecords.SRV(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for NWEndpoint.Port(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t initializeWithCopy for DNSRecords.SRV(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  uint64_t v12 = type metadata accessor for NWEndpoint.Port(0LL);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  v13(v10, v11, v12);
  uint64_t v14 = a3[6];
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)(a1 + v14);
  uint64_t v17 = (void *)(a2 + v14);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  *(_WORD *)(a1 + v15) = *(_WORD *)(a2 + v15);
  *(_WORD *)(a1 + a3[8]) = *(_WORD *)(a2 + a3[8]);
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t assignWithCopy for DNSRecords.SRV(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  uint64_t v10 = a3[5];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for NWEndpoint.Port(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  uint64_t v14 = a3[6];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  *uint64_t v15 = *v16;
  uint64_t v17 = v16[1];
  uint64_t v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(_WORD *)(a1 + a3[7]) = *(_WORD *)(a2 + a3[7]);
  *(_WORD *)(a1 + a3[8]) = *(_WORD *)(a2 + a3[8]);
  return a1;
}

uint64_t initializeWithTake for DNSRecords.SRV(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for NWEndpoint.Port(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_WORD *)(a1 + v11) = *(_WORD *)(a2 + v11);
  *(_WORD *)(a1 + a3[8]) = *(_WORD *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for DNSRecords.SRV(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  uint64_t v10 = a3[5];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for NWEndpoint.Port(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40LL))(v11, v12, v13);
  uint64_t v14 = a3[6];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  uint64_t v19 = v15[1];
  *uint64_t v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = a3[8];
  *(_WORD *)(a1 + a3[7]) = *(_WORD *)(a2 + a3[7]);
  *(_WORD *)(a1 + v20) = *(_WORD *)(a2 + v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for DNSRecords.SRV(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000FC880);
}

uint64_t sub_1000FC880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for NWEndpoint.Port(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 20),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for DNSRecords.SRV(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000FC908);
}

uint64_t sub_1000FC908(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for NWEndpoint.Port(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 20),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1000FC97C(uint64_t a1)
{
  v4[0] = "";
  uint64_t result = type metadata accessor for NWEndpoint.Port(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    v4[2] = &unk_100346AF0;
    v4[3] = (char *)&value witness table for Builtin.Int16 + 64;
    v4[4] = (char *)&value witness table for Builtin.Int16 + 64;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

__n128 initializeWithTake for NANAttribute.DatapathExtension(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DNSRecords.AAAA()
{
  return &type metadata for DNSRecords.AAAA;
}

uint64_t initializeWithCopy for DNSRecords.ARPABrowse(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for DNSRecords.ARPABrowse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for AWDLSoftErrorReport(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DNSRecords.ARPABrowse(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for DNSRecords.ARPABrowse(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DNSRecords.ARPABrowse( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 33) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DNSRecords.ARPABrowse()
{
  return &type metadata for DNSRecords.ARPABrowse;
}

uint64_t _s7CoreP2P10DNSRecordsO4AAAAVwxx_0(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 56));
}

uint64_t _s7CoreP2P10DNSRecordsO4AAAAVwcp_0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t _s7CoreP2P10DNSRecordsO4AAAAVwca_0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 56);
  uint64_t v8 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t _s7CoreP2P10DNSRecordsO4AAAAVwta_0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t _s7CoreP2P10DNSRecordsO4AAAAVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000FCDB0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DNSRecords.ARPA()
{
  return &type metadata for DNSRecords.ARPA;
}

uint64_t getEnumTagSinglePayload for DNSRecords.RecordType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xC0) {
    goto LABEL_17;
  }
  if (a2 + 64 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 64) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 64;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 64;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 64;
    }
  }

uint64_t storeEnumTagSinglePayload for DNSRecords.RecordType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 64 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 64) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xC0) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xBF) {
    return ((uint64_t (*)(void))((char *)&loc_1000FCEEC + 4 * byte_1003464A1[v4]))();
  }
  *a1 = a2 + 64;
  return ((uint64_t (*)(void))((char *)sub_1000FCF20 + 4 * byte_10034649C[v4]))();
}

uint64_t sub_1000FCF20(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FCF28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000FCF30LL);
  }
  return result;
}

uint64_t sub_1000FCF3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000FCF44LL);
  }
  *(_BYTE *)__n128 result = a2 + 64;
  return result;
}

uint64_t sub_1000FCF48(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FCF50(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DNSRecords.RecordType()
{
  return &type metadata for DNSRecords.RecordType;
}

uint64_t destroy for DNSRecords.Browse(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 32));
}

uint64_t initializeWithCopy for DNSRecords.Browse(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for DNSRecords.Browse(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  return a1;
}

__n128 initializeWithTake for NANAttribute.PairingBootstrapping(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DNSRecords.Browse(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  return a1;
}

uint64_t getEnumTagSinglePayload for DNSRecords.Browse(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 42)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DNSRecords.Browse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 42) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 42) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DNSRecords.Browse()
{
  return &type metadata for DNSRecords.Browse;
}

void *sub_1000FD180@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(uint64_t **)(v3 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  void v12[2] = v13;
  __n128 result = sub_1000FA960( (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1000FD1DC,  (uint64_t)v12,  a1,  a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_1000FD1DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_1000FABDC(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t sub_1000FD1F8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000FD21C()
{
  return swift_deallocObject(v0, 58LL, 7LL);
}

uint64_t sub_1000FD248()
{
  return swift_deallocObject(v0, 49LL, 7LL);
}

uint64_t sub_1000FD26C()
{
  return swift_deallocObject(v0, 41LL, 7LL);
}

uint64_t sub_1000FD290()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_1000FD2C8()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_1000FD2F4()
{
  return swift_deallocObject(v0, 50LL, 7LL);
}

  ;
}

uint64_t AWDLIdleActivity.init(durationSinceLastUnicastTx:durationSinceLastUnicastRx:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v9(a3, a1, v6);
  uint64_t v7 = a3 + *(int *)(type metadata accessor for AWDLIdleActivity(0LL) + 20);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(v7, a2, v6);
}

uint64_t type metadata accessor for AWDLIdleActivity(uint64_t a1)
{
  return sub_100020E48(a1, qword_1004081A8, (uint64_t)&nominal type descriptor for AWDLIdleActivity);
}

void __swiftcall NANDataResponseReceivedEvent.init(datapathID:publishID:initiatorDataAddress:responderDataAddress:responderManagementAddress:attributes:)( CoreP2P::NANDataResponseReceivedEvent *__return_ptr retstr, Swift::UInt8 datapathID, Swift::UInt8 publishID, CoreP2P::WiFiAddress *initiatorDataAddress, CoreP2P::WiFiAddress *responderDataAddress, CoreP2P::WiFiAddress *responderManagementAddress, Swift::OpaquePointer attributes)
{
}

unint64_t _s7CoreP2P27NANDataRequestReceivedEventV10datapathID07publishH026initiatorManagementAddress0j4DataL010attributesACs5UInt8V_AjA04WiFiL0VALSayAA12NANAttributeOGtcfC_0( unsigned __int8 a1, unsigned __int8 a2, uint64_t a3)
{
  return a1 | ((unint64_t)a2 << 8) | (a3 << 16);
}

void __swiftcall NANDataEstablishedEvent.init(datapathID:initiatorDataAddress:type:responderDataAddress:)( CoreP2P::NANDataEstablishedEvent *__return_ptr retstr, Swift::UInt8 datapathID, CoreP2P::WiFiAddress *initiatorDataAddress, CoreP2P::NANDatapath::DatapathType type, CoreP2P::WiFiAddress *responderDataAddress)
{
}

unint64_t NANDataTerminationEvent.init(datapathID:initiatorDataAddress:type:reason:)( unsigned __int8 a1, uint64_t a2, char a3)
{
  return a1 | ((a2 & 0xFFFFFFFFFFFFLL) << 8) | ((unint64_t)(a3 & 1) << 56);
}

unint64_t NANDataHostAssistRequest.init(datapathID:publishID:initiatorManagementAddress:initiatorDataAddress:frameType:reason:)( unsigned __int8 a1, unsigned __int8 a2, uint64_t a3)
{
  return a1 | ((unint64_t)a2 << 8) | (a3 << 16);
}

unint64_t _s7CoreP2P24NANFollowUpReceivedEventV15localInstanceID04peerhI00J7Address4rssi10attributesACs5UInt8V_AjA04WiFiK0VAA4RSSIVSayAA12NANAttributeOGtcfC_0( unsigned __int8 a1, unsigned __int8 a2, uint64_t a3)
{
  return a1 | ((unint64_t)a2 << 8) | (a3 << 16);
}

void __swiftcall NANFollowUpTransferCompleteEvent.init(localInstanceID:peerInstanceID:peerAddress:status:)( CoreP2P::NANFollowUpTransferCompleteEvent *__return_ptr retstr, Swift::UInt8 localInstanceID, Swift::UInt8 peerInstanceID, CoreP2P::WiFiAddress *peerAddress, CoreP2P::NANTransferCompleteStatus status)
{
}

uint64_t NANOOBActionFrameReceivedEvent.init(peerAddress:localAddress:actionFrame:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(_WORD *)a7  = result;
  *(_BYTE *)(a7 + 2)  = BYTE2(result);
  *(_BYTE *)(a7 + 3)  = BYTE3(result);
  *(_BYTE *)(a7 + 4)  = BYTE4(result);
  *(_BYTE *)(a7 + 5)  = BYTE5(result);
  *(_WORD *)(a7 + 6)  = a2;
  *(_BYTE *)(a7 + 8)  = BYTE2(a2);
  *(_BYTE *)(a7 + 9)  = BYTE3(a2);
  *(_BYTE *)(a7 + 10)  = BYTE4(a2);
  *(_BYTE *)(a7 + 11)  = BYTE5(a2);
  *(_BYTE *)(a7 + 16)  = a3;
  *(void *)(a7 + 24)  = a4;
  *(void *)(a7 + 32)  = a5;
  *(void *)(a7 + 40)  = a6;
  return result;
}

CoreP2P::NANOOBActionFrameTrasmitStatus __swiftcall NANOOBActionFrameTrasmitStatus.init(token:result:reason:)( Swift::UInt16 token, CoreP2P::NANOOBActionFrameTrasmitStatus::Result result, CoreP2P::NANOOBActionFrameTrasmitStatus::Reason reason)
{
  return (CoreP2P::NANOOBActionFrameTrasmitStatus)((result << 16) | (reason << 24) | token);
}

uint64_t AWDLSoftAPChannelChangedEvent.init(enabled:channel:)(char a1, int a2)
{
  LOBYTE(v3)  = a1;
  HIDWORD(v3)  = a2;
  return v3;
}

void DriverEvent.shortDescription.getter()
{
  uint64_t v1 = type metadata accessor for DriverEvent.AWDL(0LL);
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for DriverEvent(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100057FE8(v0, (uint64_t)v4, v5);
  uint64_t v6 = (char *)sub_1000FD604 + 4 * byte_100346C50[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }

uint64_t sub_1000FD604()
{
  uint64_t v3 = v2;
  sub_1001074E8( v0 + 8,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
  return v3;
}

void sub_1000FD7C8()
{
  *(void *)(v1 + 8)  = &type metadata for InfraAssociationStartEvent;
  uint64_t v8 = v0;
  uint64_t v9 = sub_100002274(&qword_100408068);
  String.init<A>(describing:)(v1 + 8, v9);
  sub_100057D9C(v8, v5, v6, v3, v4, v2, v7);
  JUMPOUT(0x1000FD7A0LL);
}

void sub_1000FD7D4()
{
  *(void *)(v1 + 8)  = &type metadata for InfraAssociationJoinStatus;
  uint64_t v8 = v0;
  uint64_t v9 = sub_100002274(&qword_100408068);
  String.init<A>(describing:)(v1 + 8, v9);
  sub_100057D9C(v8, v5, v6, v3, v4, v2, v7);
  JUMPOUT(0x1000FD7A0LL);
}

void sub_1000FD834()
{
}

void sub_1000FD888()
{
  if (v5 | v4 | v0 | v2 | v3) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v1 == 0;
  }
  if (!v6)
  {
    if (v1) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = v0 == 1;
    }
    if (v7 && (v5 | v4 | v2 | v3) == 0) {
      JUMPOUT(0x1000FD87CLL);
    }
  }

  JUMPOUT(0x1000FD7A0LL);
}

void NANClusterChangeEvent.hash(into:)(int a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 8;
  unint64_t v3 = a2 >> 16;
  unint64_t v4 = a2 >> 24;
  unint64_t v5 = HIDWORD(a2);
  unint64_t v6 = a2 >> 40;
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
}

BOOL static NANClusterChangeEvent.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  LOBYTE(v5)  = BYTE4(a1);
  HIBYTE(v5)  = BYTE5(a1);
  LOBYTE(v4)  = BYTE4(a2);
  HIBYTE(v4)  = BYTE5(a2);
  return (_DWORD)a1 == (_DWORD)a2 && v5 == v4;
}

Swift::Int NANClusterChangeEvent.hashValue.getter(unint64_t a1)
{
  Swift::UInt8 v1 = a1;
  unint64_t v2 = a1 >> 8;
  unint64_t v3 = a1 >> 16;
  unint64_t v4 = a1 >> 24;
  unint64_t v5 = HIDWORD(a1);
  unint64_t v6 = a1 >> 40;
  Hasher.init(_seed:)(v8, 0LL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

Swift::Int sub_1000FDAE4()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Swift::UInt8 v3 = v0[2];
  Swift::UInt8 v4 = v0[3];
  Swift::UInt8 v5 = v0[4];
  Swift::UInt8 v6 = v0[5];
  Hasher.init(_seed:)(v8, 0LL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

void sub_1000FDB90()
{
  Swift::UInt8 v1 = v0[1];
  Swift::UInt8 v2 = v0[2];
  Swift::UInt8 v3 = v0[3];
  Swift::UInt8 v4 = v0[4];
  Swift::UInt8 v5 = v0[5];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
}

Swift::Int sub_1000FDC0C(uint64_t a1)
{
  Swift::UInt8 v2 = *v1;
  Swift::UInt8 v3 = v1[1];
  Swift::UInt8 v4 = v1[2];
  Swift::UInt8 v5 = v1[3];
  Swift::UInt8 v6 = v1[4];
  Swift::UInt8 v7 = v1[5];
  Hasher.init(_seed:)(v9, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

BOOL sub_1000FDCB4(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2 && *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(a2 + 4);
}

void NANRoleChangeEvent.hash(into:)(uint64_t a1, char a2, Swift::UInt a3)
{
  switch(a2)
  {
    case 2:
      Swift::UInt v4 = 0LL;
      break;
    case 3:
      Swift::UInt v4 = 1LL;
      break;
    case 4:
      Swift::UInt v4 = 2LL;
      break;
    default:
      Swift::UInt8 v5 = a2 & 1;
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v5);
      goto LABEL_9;
  }

  Hasher._combine(_:)(v4);
LABEL_9:
  Hasher._combine(_:)(a3);
}

BOOL static NANRoleChangeEvent.__derived_struct_equals(_:_:)( char a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  switch(a1)
  {
    case 2:
      if (a3 != 2) {
        return 0LL;
      }
      return a2 == a4;
    case 3:
      if (a3 != 3) {
        return 0LL;
      }
      return a2 == a4;
    case 4:
      if (a3 == 4) {
        return a2 == a4;
      }
      break;
    default:
      break;
  }

  return 0LL;
}

Swift::Int NANRoleChangeEvent.hashValue.getter(char a1, Swift::UInt a2)
{
  switch(a1)
  {
    case 2:
      Swift::UInt v4 = 0LL;
      break;
    case 3:
      Swift::UInt v4 = 1LL;
      break;
    case 4:
      Swift::UInt v4 = 2LL;
      break;
    default:
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(a1 & 1);
      goto LABEL_9;
  }

  Hasher._combine(_:)(v4);
LABEL_9:
  Hasher._combine(_:)(a2);
  return Hasher._finalize()();
}

Swift::Int sub_1000FDEC0()
{
  return NANRoleChangeEvent.hashValue.getter(*(_BYTE *)v0, *(void *)(v0 + 8));
}

void sub_1000FDECC()
{
  int v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  switch(v1)
  {
    case 2:
      Swift::UInt v3 = 0LL;
      break;
    case 3:
      Swift::UInt v3 = 1LL;
      break;
    case 4:
      Swift::UInt v3 = 2LL;
      break;
    default:
      Swift::UInt8 v4 = v1 & 1;
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v4);
      goto LABEL_9;
  }

  Hasher._combine(_:)(v3);
LABEL_9:
  Hasher._combine(_:)(v2);
}

Swift::Int sub_1000FDF4C(uint64_t a1)
{
  int v2 = *v1;
  Swift::UInt v3 = *((void *)v1 + 1);
  Hasher.init(_seed:)(v6, a1);
  switch(v2)
  {
    case 2:
      Swift::UInt v4 = 0LL;
      break;
    case 3:
      Swift::UInt v4 = 1LL;
      break;
    case 4:
      Swift::UInt v4 = 2LL;
      break;
    default:
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v2 & 1);
      goto LABEL_9;
  }

  Hasher._combine(_:)(v4);
LABEL_9:
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL sub_1000FDFF4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  switch(v2)
  {
    case 2:
      if (v3 != 2) {
        return 0LL;
      }
      return *((void *)a1 + 1) == *((void *)a2 + 1);
    case 3:
      if (v3 != 3) {
        return 0LL;
      }
      return *((void *)a1 + 1) == *((void *)a2 + 1);
    case 4:
      if (v3 == 4) {
        return *((void *)a1 + 1) == *((void *)a2 + 1);
      }
      break;
    default:
      break;
  }

  return 0LL;
}

uint64_t static NANFollowUpReceivedEvent.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100104C24(a1, a2, a3, a4, a5, a6) & 1;
}

uint64_t sub_1000FE09C()
{
  return NANFollowUpReceivedEvent.hashValue.getter(*v0, v0[1], v0[2]);
}

uint64_t sub_1000FE0A8(int a1)
{
  return NANFollowUpReceivedEvent.hash(into:)(a1, *v1);
}

uint64_t sub_1000FE0B4(uint64_t *a1, uint64_t *a2)
{
  return sub_100104C24(*a1, a1[1], a1[2], *a2, a2[1], a2[2]) & 1;
}

uint64_t sub_1000FE0EC(uint64_t a1, uint64_t a2)
{
  return sub_1000FEA80( a1,  a2,  (uint64_t (*)(void, unint64_t, void))NANDataRequestReceivedEvent.hashValue.getter);
}

uint64_t sub_1000FE0F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FEAA4( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, unint64_t, void))NANDataRequestReceivedEvent.hash(into:));
}

unint64_t NANDataResponseReceivedEvent.responderManagementAddress.getter( uint64_t a1, uint64_t a2, unsigned int a3)
{
  return ((unint64_t)HIBYTE(a3) << 40) | ((unint64_t)BYTE2(a3) << 32) | (a3 << 16) & 0xFF000000 | (a3 << 16) & 0xFF0000LL | HIWORD(a2);
}

void NANDataResponseReceivedEvent.hash(into:)( int a1, unint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5)
{
  Swift::UInt8 v6 = a4;
  Swift::UInt8 v7 = a3;
  unint64_t v8 = a2 >> 8;
  unint64_t v9 = a2 >> 16;
  unint64_t v10 = a2 >> 24;
  unint64_t v11 = HIDWORD(a2);
  unint64_t v12 = a2 >> 40;
  *(void *)uint64_t v17 = HIWORD(a2);
  *(void *)uint64_t v18 = HIBYTE(a2);
  *(void *)uint64_t v19 = a3 >> 8;
  *(void *)uint64_t v20 = a3 >> 16;
  *(void *)uint64_t v21 = a3 >> 24;
  *(void *)uint64_t v22 = HIDWORD(a3);
  *(void *)char v23 = a3 >> 40;
  *(void *)uint64_t v24 = HIWORD(a3);
  *(void *)uint64_t v25 = HIBYTE(a3);
  *(_DWORD *)uint64_t v26 = a4 >> 8;
  *(_DWORD *)uint64_t v27 = HIWORD(a4);
  unsigned int v28 = HIBYTE(a4);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v18[0]);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v19[0]);
  Hasher._combine(_:)(v20[0]);
  Hasher._combine(_:)(v21[0]);
  Hasher._combine(_:)(v22[0]);
  Hasher._combine(_:)(v23[0]);
  Hasher._combine(_:)(v24[0]);
  Hasher._combine(_:)(v25[0]);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v26[0]);
  Hasher._combine(_:)(v27[0]);
  Hasher._combine(_:)(v28);
  Swift::UInt v13 = *(void *)(a5 + 16);
  Hasher._combine(_:)(v13);
  if (v13)
  {
    uint64_t v14 = *(void *)(type metadata accessor for NANAttribute(0LL) - 8);
    uint64_t v15 = a5 + ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    uint64_t v16 = *(void *)(v14 + 72);
    swift_bridgeObjectRetain(a5);
    do
    {
      NANAttribute.hash(into:)();
      v15 += v16;
      --v13;
    }

    while (v13);
    swift_bridgeObjectRelease(a5);
  }

Swift::Int NANDataResponseReceivedEvent.hashValue.getter( unint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4)
{
  Swift::UInt8 v5 = a3;
  Swift::UInt8 v6 = a2;
  Swift::UInt8 v7 = a1;
  unint64_t v8 = a1 >> 8;
  unint64_t v9 = a1 >> 16;
  unint64_t v10 = a1 >> 24;
  unint64_t v11 = HIDWORD(a1);
  unint64_t v12 = a1 >> 40;
  *(void *)uint64_t v18 = HIWORD(a1);
  *(void *)uint64_t v19 = HIBYTE(a1);
  *(void *)uint64_t v20 = a2 >> 8;
  *(void *)uint64_t v21 = a2 >> 16;
  *(void *)uint64_t v22 = a2 >> 24;
  *(void *)char v23 = HIDWORD(a2);
  *(void *)uint64_t v24 = a2 >> 40;
  *(void *)uint64_t v25 = HIWORD(a2);
  *(void *)uint64_t v26 = HIBYTE(a2);
  *(_DWORD *)uint64_t v27 = a3 >> 8;
  *(_DWORD *)unsigned int v28 = HIWORD(a3);
  *(_DWORD *)uint64_t v29 = HIBYTE(a3);
  Hasher.init(_seed:)(v30, 0LL);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v18[0]);
  Hasher._combine(_:)(v19[0]);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v20[0]);
  Hasher._combine(_:)(v21[0]);
  Hasher._combine(_:)(v22[0]);
  Hasher._combine(_:)(v23[0]);
  Hasher._combine(_:)(v24[0]);
  Hasher._combine(_:)(v25[0]);
  Hasher._combine(_:)(v26[0]);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v27[0]);
  Hasher._combine(_:)(v28[0]);
  Hasher._combine(_:)(v29[0]);
  Swift::UInt v13 = *(void *)(a4 + 16);
  Hasher._combine(_:)(v13);
  if (v13)
  {
    uint64_t v14 = *(void *)(type metadata accessor for NANAttribute(0LL) - 8);
    uint64_t v15 = a4 + ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    uint64_t v16 = *(void *)(v14 + 72);
    swift_bridgeObjectRetain(a4);
    do
    {
      NANAttribute.hash(into:)();
      v15 += v16;
      --v13;
    }

    while (v13);
    swift_bridgeObjectRelease(a4);
  }

  return Hasher._finalize()();
}

Swift::Int sub_1000FE50C()
{
  return NANDataResponseReceivedEvent.hashValue.getter( *(void *)v0,  *(void *)(v0 + 8),  *(_DWORD *)(v0 + 16),  *(void *)(v0 + 24));
}

void sub_1000FE51C(int a1)
{
}

Swift::Int sub_1000FE52C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 24);
  Swift::UInt8 v3 = *(_BYTE *)v1;
  Swift::UInt8 v4 = *(_BYTE *)(v1 + 1);
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 2);
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 3);
  Swift::UInt8 v7 = *(_BYTE *)(v1 + 4);
  Swift::UInt8 v8 = *(_BYTE *)(v1 + 5);
  Swift::UInt8 v9 = *(_BYTE *)(v1 + 6);
  Swift::UInt8 v10 = *(_BYTE *)(v1 + 7);
  Swift::UInt8 v16 = *(_BYTE *)(v1 + 8);
  Swift::UInt8 v17 = *(_BYTE *)(v1 + 9);
  Swift::UInt8 v18 = *(_BYTE *)(v1 + 10);
  Swift::UInt8 v19 = *(_BYTE *)(v1 + 11);
  Swift::UInt8 v20 = *(_BYTE *)(v1 + 12);
  Swift::UInt8 v21 = *(_BYTE *)(v1 + 13);
  Swift::UInt8 v22 = *(_BYTE *)(v1 + 14);
  Swift::UInt8 v23 = *(_BYTE *)(v1 + 15);
  Swift::UInt8 v24 = *(_BYTE *)(v1 + 16);
  Swift::UInt8 v25 = *(_BYTE *)(v1 + 17);
  Swift::UInt8 v26 = *(_BYTE *)(v1 + 18);
  Swift::UInt8 v27 = *(_BYTE *)(v1 + 19);
  Hasher.init(_seed:)(v28, a1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v18);
  Hasher._combine(_:)(v19);
  Hasher._combine(_:)(v20);
  Hasher._combine(_:)(v21);
  Hasher._combine(_:)(v22);
  Hasher._combine(_:)(v23);
  Hasher._combine(_:)(v24);
  Hasher._combine(_:)(v25);
  Hasher._combine(_:)(v26);
  Hasher._combine(_:)(v27);
  Swift::UInt v11 = *(void *)(v2 + 16);
  Hasher._combine(_:)(v11);
  if (v11)
  {
    uint64_t v12 = *(void *)(type metadata accessor for NANAttribute(0LL) - 8);
    uint64_t v13 = v2 + ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v14 = *(void *)(v12 + 72);
    swift_bridgeObjectRetain(v2);
    do
    {
      NANAttribute.hash(into:)();
      v13 += v14;
      --v11;
    }

    while (v11);
    swift_bridgeObjectRelease(v2);
  }

  return Hasher._finalize()();
}

uint64_t sub_1000FE730(uint64_t a1, uint64_t a2)
{
  return static NANDataResponseReceivedEvent.__derived_struct_equals(_:_:)( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned int *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)a2,  *(void *)(a2 + 8),  *(unsigned int *)(a2 + 16),  *(void *)(a2 + 24));
}

void _s7CoreP2P27NANDataRequestReceivedEventV4hash4intoys6HasherVz_tF_0( int a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  Swift::UInt8 v5 = a3;
  unint64_t v6 = a2 >> 8;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = a2 >> 24;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = a2 >> 40;
  unint64_t v11 = HIWORD(a2);
  *(void *)Swift::UInt8 v16 = HIBYTE(a2);
  *(void *)Swift::UInt8 v17 = a3 >> 8;
  *(void *)Swift::UInt8 v18 = a3 >> 16;
  *(void *)Swift::UInt8 v19 = a3 >> 24;
  *(void *)Swift::UInt8 v20 = HIDWORD(a3);
  *(void *)Swift::UInt8 v21 = a3 >> 40;
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v18[0]);
  Hasher._combine(_:)(v19[0]);
  Hasher._combine(_:)(v20[0]);
  Hasher._combine(_:)(v21[0]);
  Swift::UInt v12 = *(void *)(a4 + 16);
  Hasher._combine(_:)(v12);
  if (v12)
  {
    uint64_t v13 = *(void *)(type metadata accessor for NANAttribute(0LL) - 8);
    uint64_t v14 = a4 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v15 = *(void *)(v13 + 72);
    swift_bridgeObjectRetain(a4);
    do
    {
      NANAttribute.hash(into:)();
      v14 += v15;
      --v12;
    }

    while (v12);
    swift_bridgeObjectRelease(a4);
  }

uint64_t static NANDataConfirmReceivedEvent.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100104AB4(a1, a2 & 0xFFFFFFFFFFFFLL, a3, a4, a5 & 0xFFFFFFFFFFFFLL, a6) & 1;
}

Swift::Int _s7CoreP2P27NANDataRequestReceivedEventV9hashValueSivg_0( unint64_t a1, unint64_t a2, uint64_t a3)
{
  Swift::UInt8 v4 = a2;
  Swift::UInt8 v5 = a1;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  unint64_t v8 = a1 >> 24;
  unint64_t v9 = HIDWORD(a1);
  unint64_t v10 = a1 >> 40;
  unint64_t v11 = HIWORD(a1);
  *(void *)Swift::UInt8 v19 = HIBYTE(a1);
  *(void *)Swift::UInt8 v20 = a2 >> 8;
  *(void *)Swift::UInt8 v21 = a2 >> 16;
  *(void *)Swift::UInt8 v22 = a2 >> 24;
  *(void *)Swift::UInt8 v23 = HIDWORD(a2);
  *(void *)Swift::UInt8 v24 = a2 >> 40;
  Hasher.init(_seed:)(v25, 0LL);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Swift::UInt8 v12 = v8;
  uint64_t v13 = a3;
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v19[0]);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v20[0]);
  Hasher._combine(_:)(v21[0]);
  Hasher._combine(_:)(v22[0]);
  Hasher._combine(_:)(v23[0]);
  Hasher._combine(_:)(v24[0]);
  Swift::UInt v14 = *(void *)(a3 + 16);
  Hasher._combine(_:)(v14);
  if (v14)
  {
    uint64_t v15 = *(void *)(type metadata accessor for NANAttribute(0LL) - 8);
    uint64_t v16 = a3 + ((*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    uint64_t v17 = *(void *)(v15 + 72);
    swift_bridgeObjectRetain(v13);
    do
    {
      NANAttribute.hash(into:)();
      v16 += v17;
      --v14;
    }

    while (v14);
    swift_bridgeObjectRelease(v13);
  }

  return Hasher._finalize()();
}

uint64_t sub_1000FEA80(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, unint64_t, void))
{
  return a3( *(void *)v3,  *(unsigned int *)(v3 + 8) | ((unint64_t)*(unsigned __int8 *)(v3 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(v3 + 13) << 40),  *(void *)(v3 + 16));
}

uint64_t sub_1000FEAA4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, unint64_t, void))
{
  return a4( a1,  *(void *)v4,  *(unsigned int *)(v4 + 8) | ((unint64_t)*(unsigned __int8 *)(v4 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(v4 + 13) << 40),  *(void *)(v4 + 16));
}

Swift::Int sub_1000FEAC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  Swift::UInt8 v3 = *(_BYTE *)v1;
  Swift::UInt8 v4 = *(_BYTE *)(v1 + 1);
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 2);
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 3);
  Swift::UInt8 v7 = *(_BYTE *)(v1 + 4);
  Swift::UInt8 v8 = *(_BYTE *)(v1 + 5);
  Swift::UInt8 v9 = *(_BYTE *)(v1 + 6);
  Swift::UInt8 v10 = *(_BYTE *)(v1 + 7);
  Swift::UInt8 v18 = *(_BYTE *)(v1 + 8);
  Swift::UInt8 v19 = *(_BYTE *)(v1 + 9);
  Swift::UInt8 v20 = *(_BYTE *)(v1 + 10);
  Swift::UInt8 v21 = *(_BYTE *)(v1 + 11);
  Swift::UInt8 v22 = *(_BYTE *)(v1 + 12);
  Swift::UInt8 v23 = *(_BYTE *)(v1 + 13);
  Hasher.init(_seed:)(v24, a1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Swift::UInt8 v11 = v8;
  uint64_t v12 = v2;
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v18);
  Hasher._combine(_:)(v19);
  Hasher._combine(_:)(v20);
  Hasher._combine(_:)(v21);
  Hasher._combine(_:)(v22);
  Hasher._combine(_:)(v23);
  Swift::UInt v13 = *(void *)(v2 + 16);
  Hasher._combine(_:)(v13);
  if (v13)
  {
    uint64_t v14 = *(void *)(type metadata accessor for NANAttribute(0LL) - 8);
    uint64_t v15 = v2 + ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    uint64_t v16 = *(void *)(v14 + 72);
    swift_bridgeObjectRetain(v12);
    do
    {
      NANAttribute.hash(into:)();
      v15 += v16;
      --v13;
    }

    while (v13);
    swift_bridgeObjectRelease(v12);
  }

  return Hasher._finalize()();
}

uint64_t sub_1000FEC64(uint64_t a1, uint64_t a2)
{
  return sub_100104AB4( *(void *)a1,  *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 13) << 40),  *(void *)(a1 + 16),  *(void *)a2,  *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 13) << 40),  *(void *)(a2 + 16)) & 1;
}

void NANDataEstablishedEvent.hash(into:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = a2 >> 8;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = a2 >> 24;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = a2 >> 40;
  unint64_t v11 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  if ((a2 & 0x100000000000000LL) != 0) {
    uint64_t v12 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v12 = 0x74736163696E75LL;
  }
  if ((a2 & 0x100000000000000LL) != 0) {
    unint64_t v13 = 0xE900000000000074LL;
  }
  else {
    unint64_t v13 = 0xE700000000000000LL;
  }
  String.hash(into:)(a1, v12, v13);
  swift_bridgeObjectRelease(v13);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(BYTE1(a3));
  Hasher._combine(_:)(BYTE2(a3));
  Hasher._combine(_:)(BYTE3(a3));
  Hasher._combine(_:)(BYTE4(a3));
  Hasher._combine(_:)(BYTE5(a3));
}

BOOL static NANDataEstablishedEvent.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100103938(a1 & 0x1FFFFFFFFFFFFFFLL, a2 & 0xFFFFFFFFFFFFLL, a3 & 0x1FFFFFFFFFFFFFFLL, a4 & 0xFFFFFFFFFFFFLL);
}

Swift::Int NANDataEstablishedEvent.hashValue.getter(unint64_t a1, uint64_t a2)
{
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v8 = a1 >> 40;
  unint64_t v9 = HIWORD(a1);
  Hasher.init(_seed:)(v13, 0LL);
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  if ((a1 & 0x100000000000000LL) != 0) {
    uint64_t v10 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v10 = 0x74736163696E75LL;
  }
  if ((a1 & 0x100000000000000LL) != 0) {
    unint64_t v11 = 0xE900000000000074LL;
  }
  else {
    unint64_t v11 = 0xE700000000000000LL;
  }
  String.hash(into:)(v13, v10, v11);
  swift_bridgeObjectRelease(v11);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(BYTE1(a2));
  Hasher._combine(_:)(BYTE2(a2));
  Hasher._combine(_:)(BYTE3(a2));
  Hasher._combine(_:)(BYTE4(a2));
  Hasher._combine(_:)(BYTE5(a2));
  return Hasher._finalize()();
}

Swift::Int sub_1000FEF60()
{
  uint64_t v1 = 0x100000000000000LL;
  if (!*((_BYTE *)v0 + 7)) {
    uint64_t v1 = 0LL;
  }
  return NANDataEstablishedEvent.hashValue.getter( *v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v0 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)v0 + 6) << 48) | v1,  v0[2] | ((unint64_t)*((unsigned __int8 *)v0 + 12) << 32) | ((unint64_t)*((unsigned __int8 *)v0 + 13) << 40));
}

void sub_1000FEFA8(uint64_t a1)
{
  uint64_t v2 = 0x100000000000000LL;
  if (!*((_BYTE *)v1 + 7)) {
    uint64_t v2 = 0LL;
  }
  NANDataEstablishedEvent.hash(into:)( a1,  *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)v1 + 6) << 48) | v2,  v1[2] | ((unint64_t)*((unsigned __int8 *)v1 + 12) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 13) << 40));
}

Swift::Int sub_1000FEFF0(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *((unsigned __int8 *)v1 + 4);
  uint64_t v4 = *((unsigned __int8 *)v1 + 5);
  uint64_t v5 = *((unsigned __int8 *)v1 + 6);
  int v6 = *((unsigned __int8 *)v1 + 7);
  uint64_t v7 = v1[2];
  uint64_t v8 = *((unsigned __int8 *)v1 + 12);
  uint64_t v9 = *((unsigned __int8 *)v1 + 13);
  Hasher.init(_seed:)(v12, a1);
  uint64_t v10 = 0x100000000000000LL;
  if (!v6) {
    uint64_t v10 = 0LL;
  }
  NANDataEstablishedEvent.hash(into:)( (uint64_t)v12,  v2 | (v3 << 32) | (v4 << 40) | (v5 << 48) | v10,  v7 | (v8 << 32) | (v9 << 40));
  return Hasher._finalize()();
}

BOOL sub_1000FF084(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a1 + 6);
  uint64_t v3 = a1[2];
  uint64_t v4 = *((unsigned __int8 *)a1 + 12);
  uint64_t v5 = *((unsigned __int8 *)a1 + 13);
  unint64_t v6 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40);
  if (*((_BYTE *)a1 + 7)) {
    uint64_t v7 = 0x100000000000000LL;
  }
  else {
    uint64_t v7 = 0LL;
  }
  uint64_t v8 = v6 | (v2 << 48) | v7;
  if (*((_BYTE *)a2 + 7)) {
    uint64_t v9 = 0x100000000000000LL;
  }
  else {
    uint64_t v9 = 0LL;
  }
  return sub_100103938( v8,  v3 | (v4 << 32) | (v5 << 40),  *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48) | v9,  a2[2] | ((unint64_t)*((unsigned __int8 *)a2 + 12) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 13) << 40));
}

void NANDataTerminationEvent.hash(into:)(uint64_t a1, unint64_t a2, Swift::UInt a3)
{
  unint64_t v6 = a2 >> 8;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = a2 >> 24;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = a2 >> 40;
  unint64_t v11 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  if ((a2 & 0x100000000000000LL) != 0) {
    uint64_t v12 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v12 = 0x74736163696E75LL;
  }
  if ((a2 & 0x100000000000000LL) != 0) {
    unint64_t v13 = 0xE900000000000074LL;
  }
  else {
    unint64_t v13 = 0xE700000000000000LL;
  }
  String.hash(into:)(a1, v12, v13);
  swift_bridgeObjectRelease(v13);
  Hasher._combine(_:)(a3);
}

BOOL static NANDataTerminationEvent.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001044EC(a1 & 0x1FFFFFFFFFFFFFFLL, a2, a3 & 0x1FFFFFFFFFFFFFFLL, a4);
}

Swift::Int NANDataTerminationEvent.hashValue.getter(unint64_t a1, Swift::UInt a2)
{
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v8 = a1 >> 40;
  unint64_t v9 = HIWORD(a1);
  Hasher.init(_seed:)(v13, 0LL);
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  if ((a1 & 0x100000000000000LL) != 0) {
    uint64_t v10 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v10 = 0x74736163696E75LL;
  }
  if ((a1 & 0x100000000000000LL) != 0) {
    unint64_t v11 = 0xE900000000000074LL;
  }
  else {
    unint64_t v11 = 0xE700000000000000LL;
  }
  String.hash(into:)(v13, v10, v11);
  swift_bridgeObjectRelease(v11);
  Hasher._combine(_:)(a2);
  return Hasher._finalize()();
}

Swift::Int sub_1000FF320()
{
  uint64_t v1 = 0x100000000000000LL;
  if (!*((_BYTE *)v0 + 7)) {
    uint64_t v1 = 0LL;
  }
  return NANDataTerminationEvent.hashValue.getter( *v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v0 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)v0 + 6) << 48) | v1,  *((void *)v0 + 1));
}

void sub_1000FF358(uint64_t a1)
{
  uint64_t v2 = v1;
  int v4 = *(unsigned __int8 *)(v2 + 7);
  Swift::UInt v5 = *(void *)(v2 + 8);
  Swift::UInt8 v6 = *(_BYTE *)(v2 + 1);
  Swift::UInt8 v7 = *(_BYTE *)(v2 + 2);
  Swift::UInt8 v8 = *(_BYTE *)(v2 + 3);
  Swift::UInt8 v9 = *(_BYTE *)(v2 + 4);
  Swift::UInt8 v10 = *(_BYTE *)(v2 + 5);
  Swift::UInt8 v11 = *(_BYTE *)(v2 + 6);
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  if (v4) {
    uint64_t v12 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v12 = 0x74736163696E75LL;
  }
  if (v4) {
    unint64_t v13 = 0xE900000000000074LL;
  }
  else {
    unint64_t v13 = 0xE700000000000000LL;
  }
  String.hash(into:)(a1, v12, v13);
  swift_bridgeObjectRelease(v13);
  Hasher._combine(_:)(v5);
}

Swift::Int sub_1000FF444(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(v1 + 7);
  Swift::UInt v3 = *(void *)(v1 + 8);
  Swift::UInt8 v4 = *(_BYTE *)v1;
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 1);
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 2);
  Swift::UInt8 v7 = *(_BYTE *)(v1 + 3);
  Swift::UInt8 v8 = *(_BYTE *)(v1 + 4);
  Swift::UInt8 v9 = *(_BYTE *)(v1 + 5);
  Swift::UInt8 v10 = *(_BYTE *)(v1 + 6);
  Hasher.init(_seed:)(v14, a1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  if (v2) {
    uint64_t v11 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v11 = 0x74736163696E75LL;
  }
  if (v2) {
    unint64_t v12 = 0xE900000000000074LL;
  }
  else {
    unint64_t v12 = 0xE700000000000000LL;
  }
  String.hash(into:)(v14, v11, v12);
  swift_bridgeObjectRelease(v12);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL sub_1000FF564(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  uint64_t v3 = 0x100000000000000LL;
  if (*((_BYTE *)a1 + 7)) {
    uint64_t v4 = 0x100000000000000LL;
  }
  else {
    uint64_t v4 = 0LL;
  }
  unint64_t v5 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)a1 + 6) << 48) | v4;
  if (!*((_BYTE *)a2 + 7)) {
    uint64_t v3 = 0LL;
  }
  return sub_1001044EC( v5,  v2,  *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48) | v3,  *((void *)a2 + 1));
}

unint64_t NANDataHostAssistRequest.frameType.getter(uint64_t a1, unint64_t a2)
{
  return HIWORD(a2);
}

unint64_t NANDataHostAssistRequest.reason.getter(uint64_t a1, unint64_t a2)
{
  return HIBYTE(a2);
}

void NANDataHostAssistRequest.hash(into:)(int a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2 >> 8;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = a2 >> 24;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v8 = a2 >> 40;
  unint64_t v9 = HIWORD(a2);
  unint64_t v10 = HIBYTE(a2);
  *(void *)unint64_t v13 = a3 >> 8;
  *(void *)uint64_t v14 = a3 >> 16;
  *(void *)uint64_t v15 = a3 >> 24;
  *(void *)uint64_t v16 = HIDWORD(a3);
  *(void *)uint64_t v17 = a3 >> 40;
  int v11 = BYTE6(a3);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  if (v11 == 15)
  {
    Swift::UInt8 v12 = 0;
LABEL_6:
    Hasher._combine(_:)(v12);
    goto LABEL_7;
  }

  Hasher._combine(_:)(1u);
  if (v11 != 14)
  {
    Hasher._combine(_:)(1uLL);
    Swift::UInt8 v12 = byte_10034809C[SBYTE6(a3)];
    goto LABEL_6;
  }

  Hasher._combine(_:)(0LL);
LABEL_7:
  Hasher._combine(_:)(HIBYTE(a3));
}

Swift::Int NANDataHostAssistRequest.hashValue.getter(unint64_t a1, unint64_t a2)
{
  Swift::UInt8 v3 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v8 = a1 >> 40;
  unint64_t v9 = HIWORD(a1);
  *(void *)unint64_t v13 = HIBYTE(a1);
  *(void *)uint64_t v14 = a2 >> 8;
  *(void *)uint64_t v15 = a2 >> 16;
  *(void *)uint64_t v16 = a2 >> 24;
  *(void *)uint64_t v17 = HIDWORD(a2);
  *(void *)Swift::UInt8 v18 = a2 >> 40;
  int v10 = BYTE6(a2);
  Hasher.init(_seed:)(v19, 0LL);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v18[0]);
  if (v10 == 15)
  {
    Swift::UInt8 v11 = 0;
LABEL_6:
    Hasher._combine(_:)(v11);
    goto LABEL_7;
  }

  Hasher._combine(_:)(1u);
  if (v10 != 14)
  {
    Hasher._combine(_:)(1uLL);
    Swift::UInt8 v11 = byte_10034809C[SBYTE6(a2)];
    goto LABEL_6;
  }

  Hasher._combine(_:)(0LL);
LABEL_7:
  Hasher._combine(_:)(HIBYTE(a2));
  return Hasher._finalize()();
}

Swift::Int sub_1000FF8E0()
{
  return NANDataHostAssistRequest.hashValue.getter(*v0, v0[1]);
}

void sub_1000FF8E8(int a1)
{
}

Swift::Int sub_1000FF8F0(uint64_t a1)
{
  unint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  NANDataHostAssistRequest.hash(into:)((int)v5, v2, v3);
  return Hasher._finalize()();
}

BOOL sub_1000FF934(uint64_t a1, uint64_t *a2)
{
  return _s7CoreP2P24NANDataHostAssistRequestV23__derived_struct_equalsySbAC_ACtFZ_0( *(void *)a1,  *(void *)(a1 + 8),  *a2,  a2[1]);
}

void NANPublishTerminatedEvent.hash(into:)(int a1, Swift::UInt8 a2, Swift::UInt a3)
{
}

BOOL static NANPublishTerminatedEvent.__derived_struct_equals(_:_:)( char a1, uint64_t a2, char a3, uint64_t a4)
{
  return a1 == a3 && a2 == a4;
}

Swift::Int _s7CoreP2P27NANSubscribeTerminatedEventV9hashValueSivg_0(Swift::UInt8 a1, Swift::UInt a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000FF9F8()
{
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt8 v2 = *(_BYTE *)v0;
  Hasher.init(_seed:)(v4, 0LL);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000FFA54()
{
  Swift::UInt v1 = *(void *)(v0 + 8);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1000FFA90(uint64_t a1)
{
  Swift::UInt v2 = *(void *)(v1 + 8);
  Swift::UInt8 v3 = *(_BYTE *)v1;
  Hasher.init(_seed:)(v5, a1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL sub_1000FFAE8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
}

uint64_t NANFollowUpReceivedEvent.serviceInfo.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  __chkstk_darwin();
  unint64_t v7 = (char *)&v34 - v6;
  uint64_t v8 = __chkstk_darwin();
  Swift::UInt8 v12 = (char *)&v34 - v11;
  uint64_t v13 = *(void *)(a3 + 16);
  if (v13)
  {
    uint64_t v34 = v10;
    uint64_t v35 = v8;
    uint64_t v14 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v15 = *(void *)(v9 + 72);
    swift_bridgeObjectRetain(a3);
    uint64_t v16 = v14;
    uint64_t v17 = v13;
    while (1)
    {
      sub_100057FE8(v16, (uint64_t)v7, type metadata accessor for NANAttribute);
      NANAttribute.attributeType.getter();
      if (v18 == 14) {
        break;
      }
      sub_10005802C((uint64_t)v7, type metadata accessor for NANAttribute);
      v16 += v15;
      if (!--v17)
      {
        swift_bridgeObjectRelease(a3);
        uint64_t v19 = v35;
        goto LABEL_10;
      }
    }

    swift_bridgeObjectRelease(a3);
    sub_100022628((uint64_t)v7, (uint64_t)v12, type metadata accessor for NANAttribute);
    uint64_t v19 = v35;
    sub_10005802C((uint64_t)v12, type metadata accessor for NANAttribute);
LABEL_10:
    uint64_t result = swift_bridgeObjectRetain(a3);
    for (i  = 0LL; ; ++i)
    {
      uint64_t v23 = i + 1;
      if (__OFADD__(i, 1LL))
      {
        __break(1u);
        return result;
      }

      sub_100057FE8(v14, (uint64_t)v5, type metadata accessor for NANAttribute);
      NANAttribute.attributeType.getter();
      if (v24 == 3) {
        break;
      }
      uint64_t result = sub_10005802C((uint64_t)v5, type metadata accessor for NANAttribute);
      v14 += v15;
      if (v23 == v13)
      {
        swift_bridgeObjectRelease(a3);
        return 4LL;
      }
    }

    swift_bridgeObjectRelease(a3);
    uint64_t v25 = v34;
    sub_100022628((uint64_t)v5, v34, type metadata accessor for NANAttribute);
    if (swift_getEnumCaseMultiPayload(v25, v19) == 3)
    {
      uint64_t v26 = *(void *)v25;
      unint64_t v27 = *(void *)(v25 + 8);
      uint64_t v28 = *(void *)(v25 + 24);
      uint64_t v29 = *(void *)(v25 + 32);
      unint64_t v30 = *(void *)(v25 + 40);
      uint64_t v31 = *(unsigned __int16 *)(v25 + 48) | (*(unsigned __int8 *)(v25 + 50) << 16);
      uint64_t v20 = *(void *)(v25 + 56);
      uint64_t v32 = *(void *)(v25 + 64);
      unint64_t v33 = *(void *)(v25 + 72);
      sub_1001062A0(v20, v32, v33);
      sub_1000208D8(v26, v27);
      swift_bridgeObjectRelease(v28);
      sub_1001062BC(v29, v30, v31);
      sub_1001062E0(v20, v32, v33);
      return v20;
    }

    sub_10005802C(v25, type metadata accessor for NANAttribute);
  }

  return 4LL;
}

uint64_t NANFollowUpReceivedEvent.followUpMessage.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = NANFollowUpReceivedEvent.serviceInfo.getter(a1, a2, a3);
  uint64_t v6 = v3;
  unint64_t v7 = v4;
  if (v5 != 2
    || (sub_100020AFC(v3, v4), _s7CoreP2P25NANGenericServiceProtocolVyACSg10Foundation4DataVcfC_0(v6, v7),
                               (uint64_t v9 = v8) == 0))
  {
    sub_1001062A0(v5, v6, v7);
    _s7CoreP2P25NANGenericServiceProtocolVyACSg10Foundation4DataVcfC_0(v6, v7);
    uint64_t v9 = v10;
    swift_bridgeObjectRelease(0LL);
  }

  sub_1001062E0(v5, v6, v7);
  return v9;
}

void _s7CoreP2P24NANFollowUpReceivedEventV4hash4intoys6HasherVz_tF_0( int a1, unint64_t a2, Swift::UInt a3, uint64_t a4)
{
  unint64_t v5 = a2 >> 8;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = a2 >> 24;
  unint64_t v8 = HIDWORD(a2);
  unint64_t v9 = a2 >> 40;
  unint64_t v10 = HIWORD(a2);
  unint64_t v11 = HIBYTE(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(a3);
  Swift::UInt v12 = *(void *)(a4 + 16);
  Hasher._combine(_:)(v12);
  if (v12)
  {
    uint64_t v13 = *(void *)(type metadata accessor for NANAttribute(0LL) - 8);
    uint64_t v14 = a4 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v15 = *(void *)(v13 + 72);
    swift_bridgeObjectRetain(a4);
    do
    {
      NANAttribute.hash(into:)();
      v14 += v15;
      --v12;
    }

    while (v12);
    swift_bridgeObjectRelease(a4);
  }

Swift::Int _s7CoreP2P24NANFollowUpReceivedEventV9hashValueSivg_0( unint64_t a1, Swift::UInt a2, uint64_t a3)
{
  Swift::UInt8 v4 = a1;
  unint64_t v5 = a1 >> 8;
  unint64_t v6 = a1 >> 16;
  unint64_t v7 = a1 >> 24;
  unint64_t v8 = HIDWORD(a1);
  unint64_t v9 = a1 >> 40;
  unint64_t v10 = HIWORD(a1);
  unint64_t v11 = HIBYTE(a1);
  Hasher.init(_seed:)(v18, 0LL);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(a2);
  Swift::UInt v12 = *(void *)(a3 + 16);
  Hasher._combine(_:)(v12);
  if (v12)
  {
    uint64_t v13 = *(void *)(type metadata accessor for NANAttribute(0LL) - 8);
    uint64_t v14 = a3 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v15 = *(void *)(v13 + 72);
    swift_bridgeObjectRetain(a3);
    do
    {
      NANAttribute.hash(into:)();
      v14 += v15;
      --v12;
    }

    while (v12);
    swift_bridgeObjectRelease(a3);
  }

  return Hasher._finalize()();
}

Swift::Int sub_1001000F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  Swift::UInt v16 = *(void *)(v1 + 8);
  Swift::UInt8 v3 = *(_BYTE *)v1;
  Swift::UInt8 v4 = *(_BYTE *)(v1 + 1);
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 2);
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 3);
  Swift::UInt8 v7 = *(_BYTE *)(v1 + 4);
  Swift::UInt8 v8 = *(_BYTE *)(v1 + 5);
  Swift::UInt8 v9 = *(_BYTE *)(v1 + 6);
  Swift::UInt8 v10 = *(_BYTE *)(v1 + 7);
  Hasher.init(_seed:)(v17, a1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v16);
  Swift::UInt v11 = *(void *)(v2 + 16);
  Hasher._combine(_:)(v11);
  if (v11)
  {
    uint64_t v12 = *(void *)(type metadata accessor for NANAttribute(0LL) - 8);
    uint64_t v13 = v2 + ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v14 = *(void *)(v12 + 72);
    swift_bridgeObjectRetain(v2);
    do
    {
      NANAttribute.hash(into:)();
      v13 += v14;
      --v11;
    }

    while (v11);
    swift_bridgeObjectRelease(v2);
  }

  return Hasher._finalize()();
}

uint64_t NANTransferCompleteStatus.apiError.getter(char a1)
{
  if (a1) {
    return 7LL;
  }
  else {
    return 0LL;
  }
}

BOOL NANTransferCompleteStatus.shouldRetry.getter(char a1)
{
  return a1 != 3 && a1 != 0;
}

uint64_t NANTransferCompleteStatus.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100100288 + 4 * byte_100346C61[a1]))( 0x73736563637573LL,  0xE700000000000000LL);
}

uint64_t sub_100100288()
{
  return 0x756F2064656D6974LL;
}

uint64_t sub_1001002A4()
{
  return 0x646570706F7264LL;
}

unint64_t sub_1001002B8()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1001002D4()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100100304 + 4 * byte_100346C65[*v0]))( 0x73736563637573LL,  0xE700000000000000LL);
}

uint64_t sub_100100304()
{
  return 0x756F2064656D6974LL;
}

uint64_t sub_100100320()
{
  return 0x646570706F7264LL;
}

unint64_t sub_100100334()
{
  return 0xD000000000000010LL;
}

void NANFollowUpTransferCompleteEvent.hash(into:)(int a1, unint64_t a2, unsigned __int8 a3)
{
  unint64_t v4 = a2 >> 8;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = a2 >> 24;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v8 = a2 >> 40;
  unint64_t v9 = HIWORD(a2);
  unint64_t v10 = HIBYTE(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(a3);
}

Swift::Int NANFollowUpTransferCompleteEvent.hashValue.getter(unint64_t a1, unsigned __int8 a2)
{
  Swift::UInt8 v3 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v8 = a1 >> 40;
  unint64_t v9 = HIWORD(a1);
  unint64_t v10 = HIBYTE(a1);
  Hasher.init(_seed:)(v12, 0LL);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(a2);
  return Hasher._finalize()();
}

Swift::Int sub_1001004DC()
{
  Swift::UInt v1 = v0[8];
  Swift::UInt8 v2 = *v0;
  Swift::UInt8 v3 = v0[1];
  Swift::UInt8 v4 = v0[2];
  Swift::UInt8 v5 = v0[3];
  Swift::UInt8 v6 = v0[4];
  Swift::UInt8 v7 = v0[5];
  Swift::UInt8 v8 = v0[6];
  Swift::UInt8 v9 = v0[7];
  Hasher.init(_seed:)(v11, 0LL);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1001005C0()
{
  Swift::UInt v1 = v0[8];
  Swift::UInt8 v2 = v0[1];
  Swift::UInt8 v3 = v0[2];
  Swift::UInt8 v4 = v0[3];
  Swift::UInt8 v5 = v0[4];
  Swift::UInt8 v6 = v0[5];
  Swift::UInt8 v7 = v0[6];
  Swift::UInt8 v8 = v0[7];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_100100668(uint64_t a1)
{
  Swift::UInt v2 = v1[8];
  Swift::UInt8 v3 = *v1;
  Swift::UInt8 v4 = v1[1];
  Swift::UInt8 v5 = v1[2];
  Swift::UInt8 v6 = v1[3];
  Swift::UInt8 v7 = v1[4];
  Swift::UInt8 v8 = v1[5];
  Swift::UInt8 v9 = v1[6];
  Swift::UInt8 v10 = v1[7];
  Hasher.init(_seed:)(v12, a1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL sub_100100748(uint64_t a1, uint64_t a2)
{
  return _s7CoreP2P32NANFollowUpTransferCompleteEventV23__derived_struct_equalsySbAC_ACtFZ_0( *(void *)a1,  *(_BYTE *)(a1 + 8),  *(void *)a2,  *(_BYTE *)(a2 + 8));
}

unint64_t NANDataManagementFrameTransferCompleteEvent.frameType.getter(unint64_t a1)
{
  return HIBYTE(a1);
}

uint64_t NANDataManagementFrameTransferCompleteEvent.init(datapathID:initiatorDataAddress:frameType:status:)( unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  return a1 | ((a2 & 0xFFFFFFFFFFFFLL) << 8) | (a3 << 56);
}

void NANDataManagementFrameTransferCompleteEvent.hash(into:)( int a1, unint64_t a2, unsigned __int8 a3)
{
  unint64_t v5 = a2 >> 8;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = a2 >> 24;
  unint64_t v8 = HIDWORD(a2);
  unint64_t v9 = a2 >> 40;
  unint64_t v10 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  if (HIBYTE(a2) == 14)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_10034809C[(uint64_t)a2 >> 56]);
  }

  Hasher._combine(_:)(a3);
}

Swift::Int NANDataManagementFrameTransferCompleteEvent.hashValue.getter( unint64_t a1, unsigned __int8 a2)
{
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v8 = a1 >> 40;
  unint64_t v9 = HIWORD(a1);
  Hasher.init(_seed:)(v11, 0LL);
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  if (HIBYTE(a1) == 14)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_10034809C[(uint64_t)a1 >> 56]);
  }

  Hasher._combine(_:)(a2);
  return Hasher._finalize()();
}

Swift::Int sub_100100960()
{
  return NANDataManagementFrameTransferCompleteEvent.hashValue.getter(*(void *)v0, *(_BYTE *)(v0 + 8));
}

void sub_10010096C()
{
  uint64_t v1 = (char)v0[7];
  Swift::UInt v2 = v0[8];
  Swift::UInt8 v3 = v0[1];
  Swift::UInt8 v4 = v0[2];
  Swift::UInt8 v5 = v0[3];
  Swift::UInt8 v6 = v0[4];
  Swift::UInt8 v7 = v0[5];
  Swift::UInt8 v8 = v0[6];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  if (v1 == 14)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_10034809C[v1]);
  }

  Hasher._combine(_:)(v2);
}

Swift::Int sub_100100A38(uint64_t a1)
{
  uint64_t v2 = (char)v1[7];
  Swift::UInt v3 = v1[8];
  Swift::UInt8 v4 = *v1;
  Swift::UInt8 v5 = v1[1];
  Swift::UInt8 v6 = v1[2];
  Swift::UInt8 v7 = v1[3];
  Swift::UInt8 v8 = v1[4];
  Swift::UInt8 v9 = v1[5];
  Swift::UInt8 v10 = v1[6];
  Hasher.init(_seed:)(v12, a1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  if (v2 == 14)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_10034809C[v2]);
  }

  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL sub_100100B40(uint64_t a1, uint64_t a2)
{
  return _s7CoreP2P43NANDataManagementFrameTransferCompleteEventV23__derived_struct_equalsySbAC_ACtFZ_0( *(void *)a1,  *(_BYTE *)(a1 + 8),  *(void *)a2,  *(_BYTE *)(a2 + 8));
}

uint64_t NANOOBActionFrameTrasmitStatus.reason.getter(unsigned int a1)
{
  return HIBYTE(a1);
}

void NANOOBActionFrameTrasmitStatus.hash(into:)(int a1, unsigned int a2)
{
  unsigned __int8 v2 = BYTE2(a2);
  Swift::UInt v3 = HIBYTE(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

BOOL static NANOOBActionFrameTrasmitStatus.__derived_struct_equals(_:_:)(unsigned int a1, int a2)
{
  return ((a2 ^ a1) & 0xFF0000) == 0 && (unsigned __int16)a1 == (unsigned __int16)a2 && (a2 ^ a1) >> 24 == 0;
}

Swift::Int NANOOBActionFrameTrasmitStatus.hashValue.getter(unsigned int a1)
{
  Swift::UInt v2 = HIBYTE(a1);
  Hasher.init(_seed:)(v4, 0LL);
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(BYTE2(a1));
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int sub_100100C30()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 2);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 3);
  Swift::UInt16 v3 = *(_WORD *)v0;
  Hasher.init(_seed:)(v5, 0LL);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_100100C9C()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 2);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 3);
  Hasher._combine(_:)(*(_WORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int sub_100100CE4(uint64_t a1)
{
  Swift::UInt v2 = *(unsigned __int8 *)(v1 + 2);
  Swift::UInt v3 = *(unsigned __int8 *)(v1 + 3);
  Swift::UInt16 v4 = *(_WORD *)v1;
  Hasher.init(_seed:)(v6, a1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL sub_100100D4C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2
}

uint64_t NANOOBActionFrameReceivedEvent.actionFrame.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 16);
  sub_10005852C(v1, v2, v3);
  return v4;
}

BOOL NANOOBActionFrameReceivedEvent.isSecure.getter()
{
  return *(_BYTE *)(v0 + 16) == 4;
}

void NANOOBActionFrameReceivedEvent.hash(into:)()
{
  uint64_t v1 = (uint64_t *)v0;
  Swift::UInt8 v2 = *(_BYTE *)(v0 + 1);
  Swift::UInt8 v3 = *(_BYTE *)(v0 + 2);
  Swift::UInt8 v4 = *(_BYTE *)(v0 + 3);
  Swift::UInt8 v5 = *(_BYTE *)(v0 + 4);
  Swift::UInt8 v6 = *(_BYTE *)(v0 + 5);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Swift::UInt8 v7 = *(_BYTE *)(v0 + 7);
  Swift::UInt8 v8 = *(_BYTE *)(v0 + 8);
  Swift::UInt8 v9 = *(_BYTE *)(v0 + 9);
  Swift::UInt8 v10 = *(_BYTE *)(v0 + 10);
  Swift::UInt8 v11 = *(_BYTE *)(v0 + 11);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 6));
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  __int128 v12 = *(_OWORD *)(v0 + 32);
  v27[0]  = *(_OWORD *)(v0 + 16);
  v27[1]  = v12;
  Hasher._combine(_:)(0x7F7E0907060504uLL >> (8 * LOBYTE(v27[0])));
  sub_100107308((__n128 *)((char *)v27 + 8), &v28);
  sub_100107308(&v28, &v29);
  unint64_t v13 = v29.n128_u64[0];
  if (v29.n128_u32[0] >> 30)
  {
    if (v29.n128_u32[0] >> 30 != 1)
    {
      Hasher._combine(_:)(0LL);
      sub_100107370((uint64_t *)v0);
LABEL_17:
      sub_100107370(v1);
      return;
    }

    v29.n128_u64[0] &= 0xFFFFFFFF3FFFFFFFLL;
    Swift::UInt32 v14 = v29.n128_u32[2];
    uint64_t v15 = v30;
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(8u);
    Hasher._combine(_:)(v13);
    if ((v13 & 0x100) != 0) {
      Swift::UInt8 v16 = 3;
    }
    else {
      Swift::UInt8 v16 = 0;
    }
    Hasher._combine(_:)(v16);
    Hasher._combine(_:)(BYTE2(v13));
    Hasher._combine(_:)(HIDWORD(v13));
    Hasher._combine(_:)(v14);
    Swift::UInt v17 = *(void *)(v15 + 16);
    Hasher._combine(_:)(v17);
    if (v17)
    {
      uint64_t v18 = *(void *)(type metadata accessor for AWDLActionFrame.AWDLAttribute(0LL) - 8);
      uint64_t v19 = v15 + ((*(unsigned __int8 *)(v18 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
      sub_100107344(v1);
      uint64_t v20 = *(void *)(v18 + 72);
      do
      {
        AWDLActionFrame.AWDLAttribute.hash(into:)();
        v19 += v20;
        --v17;
      }

      while (v17);
      goto LABEL_17;
    }
  }

  else
  {
    v29.n128_u64[0] &= 0xFFFFFFFF3FFFFFFFLL;
    __n128 v31 = v29;
    Hasher._combine(_:)(1uLL);
    sub_10010739C(&v31, &v32);
    sub_10010739C(&v32, &v33);
    uint64_t v21 = v33;
    if (v33 == 14LL)
    {
      Hasher._combine(_:)(0LL);
    }

    else
    {
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(byte_10034809C[v21]);
    }

    unint64_t v22 = v31.n128_u64[1];
    Swift::UInt v23 = *(void *)(v31.n128_u64[1] + 16);
    Hasher._combine(_:)(v23);
    if (v23)
    {
      uint64_t v24 = *(void *)(type metadata accessor for NANAttribute(0LL) - 8);
      unint64_t v25 = v22 + ((*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
      sub_100107344(v1);
      uint64_t v26 = *(void *)(v24 + 72);
      do
      {
        NANAttribute.hash(into:)();
        v25 += v26;
        --v23;
      }

      while (v23);
      goto LABEL_17;
    }
  }

Swift::Int NANOOBActionFrameReceivedEvent.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_1001010D0()
{
  __int128 v1 = v0[1];
  __int128 v4 = *v0;
  __int128 v5 = v1;
  __int128 v6 = v0[2];
  Hasher.init(_seed:)(v3, 0LL);
  NANOOBActionFrameReceivedEvent.hash(into:)();
  return Hasher._finalize()();
}

void sub_100101120()
{
}

Swift::Int sub_100101158(uint64_t a1)
{
  __int128 v2 = v1[1];
  __int128 v5 = *v1;
  __int128 v6 = v2;
  __int128 v7 = v1[2];
  Hasher.init(_seed:)(v4, a1);
  NANOOBActionFrameReceivedEvent.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_1001011A4(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[1];
  v7[0]  = *a1;
  v7[1]  = v2;
  __int128 v3 = *a2;
  __int128 v4 = a2[1];
  _OWORD v7[2] = a1[2];
  v8[0]  = v3;
  __int128 v5 = a2[2];
  v8[1]  = v4;
  _OWORD v8[2] = v5;
  return static NANOOBActionFrameReceivedEvent.__derived_struct_equals(_:_:)(v7, v8) & 1;
}

uint64_t NANDiscoveryWindowStartEvent.expectedTSF.setter(uint64_t result)
{
  *(void *)(v1 + 8)  = result;
  return result;
}

uint64_t NANBeacon.Metadata.rate.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t NANDiscoveryWindowStartEvent.channel.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 24)  = result;
  *(_BYTE *)(v1 + 28)  = BYTE4(result);
  *(_BYTE *)(v1 + 29)  = BYTE5(result);
  return result;
}

void NANDiscoveryWindowStartEvent.hash(into:)( int a1, Swift::UInt a2, Swift::UInt64 a3, Swift::UInt64 a4, unint64_t a5)
{
  switch(BYTE5(a5))
  {
    case 2:
      Swift::UInt v8 = 0LL;
      goto LABEL_8;
    case 3:
      Swift::UInt v8 = 1LL;
      goto LABEL_8;
    case 4:
      Swift::UInt v8 = 3LL;
      goto LABEL_8;
    case 5:
      Swift::UInt v8 = 4LL;
      goto LABEL_8;
    case 6:
      Swift::UInt v8 = 5LL;
LABEL_8:
      Hasher._combine(_:)(v8);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(BYTE5(a5) & 1);
      break;
  }

uint64_t static NANDiscoveryWindowStartEvent.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100104678(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL, a5, a6, a7, a8 & 0xFFFFFFFFFFFFLL);
}

Swift::Int NANDiscoveryWindowStartEvent.hashValue.getter( Swift::UInt a1, Swift::UInt64 a2, Swift::UInt64 a3, uint64_t a4)
{
  return Hasher._finalize()();
}

Swift::Int sub_10010134C()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt64 v2 = *(void *)(v0 + 8);
  Swift::UInt64 v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(unsigned int *)(v0 + 24);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 28);
  uint64_t v6 = *(unsigned __int8 *)(v0 + 29);
  Hasher.init(_seed:)(v8, 0LL);
  NANDiscoveryWindowStartEvent.hash(into:)((int)v8, v1, v2, v3, v4 | (v5 << 32) | (v6 << 40));
  return Hasher._finalize()();
}

void sub_1001013C0(int a1)
{
}

Swift::Int sub_1001013E0(uint64_t a1)
{
  Swift::UInt v2 = *(void *)v1;
  Swift::UInt64 v3 = *(void *)(v1 + 8);
  Swift::UInt64 v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(unsigned int *)(v1 + 24);
  uint64_t v6 = *(unsigned __int8 *)(v1 + 28);
  uint64_t v7 = *(unsigned __int8 *)(v1 + 29);
  Hasher.init(_seed:)(v9, a1);
  NANDiscoveryWindowStartEvent.hash(into:)((int)v9, v2, v3, v4, v5 | (v6 << 32) | (v7 << 40));
  return Hasher._finalize()();
}

uint64_t sub_100101450(uint64_t a1, uint64_t a2)
{
  return sub_100104678( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(unsigned int *)(a1 + 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 28) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 29) << 40),  *(void *)a2,  *(void *)(a2 + 8),  *(void *)(a2 + 16),  *(unsigned int *)(a2 + 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 28) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 29) << 40));
}

unint64_t AWDLSoftAPChannelChangedEvent.channel.getter(unint64_t a1, unsigned __int16 a2)
{
  return HIDWORD(a1) | ((unint64_t)a2 << 32);
}

void AWDLSoftAPChannelChangedEvent.hash(into:)(uint64_t a1, unint64_t a2, unsigned __int16 a3)
{
  unint64_t v3 = HIDWORD(a2) | ((unint64_t)a3 << 32);
  Hasher._combine(_:)(a2 & 1);
  if ((v3 & 0xFF00000000LL) == 0x300000000LL)
  {
    Swift::UInt8 v4 = 0;
LABEL_3:
    Hasher._combine(_:)(v4);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
    Hasher._combine(_:)(0x801004u >> ((v3 >> 29) & 0xF8));
    switch(v3 >> 40)
    {
      case 2uLL:
        Hasher._combine(_:)(0LL);
        break;
      case 3uLL:
        Hasher._combine(_:)(1uLL);
        break;
      case 4uLL:
        Hasher._combine(_:)(3uLL);
        break;
      case 5uLL:
        Hasher._combine(_:)(4uLL);
        break;
      case 6uLL:
        Hasher._combine(_:)(5uLL);
        break;
      default:
        Hasher._combine(_:)(2uLL);
        Swift::UInt8 v4 = BYTE5(v3) & 1;
        goto LABEL_3;
    }
  }

uint64_t static AWDLSoftAPChannelChangedEvent.__derived_struct_equals(_:_:)( uint64_t a1, unsigned __int16 a2, uint64_t a3, unsigned __int16 a4)
{
  LODWORD(v6)  = a3;
  LOBYTE(v6)  = a1 & 1;
  HIDWORD(v6)  = HIDWORD(a1);
  unint64_t v4 = v6;
  LOBYTE(v6)  = a3 & 1;
  HIDWORD(v6)  = HIDWORD(a3);
  return sub_100104780(v4, a2, v6, a4);
}

Swift::Int AWDLSoftAPChannelChangedEvent.hashValue.getter(unint64_t a1, unsigned __int16 a2)
{
  char v2 = a1;
  v7[0]  = a1;
  unint64_t v4 = HIDWORD(a1);
  Hasher.init(_seed:)(v7, 0LL);
  LOBYTE(v6)  = v2 & 1;
  HIDWORD(v6)  = v4;
  AWDLSoftAPChannelChangedEvent.hash(into:)((uint64_t)v7, v6, a2);
  return Hasher._finalize()();
}

Swift::Int sub_100101650()
{
  char v1 = *v0;
  unsigned __int16 v2 = *((_WORD *)v0 + 4);
  int v3 = *((_DWORD *)v0 + 1);
  Hasher.init(_seed:)(v6, 0LL);
  LOBYTE(v5)  = v1;
  HIDWORD(v5)  = v3;
  AWDLSoftAPChannelChangedEvent.hash(into:)((uint64_t)v6, v5, v2);
  return Hasher._finalize()();
}

void sub_1001016B0(uint64_t a1)
{
  HIDWORD(v2)  = *(_DWORD *)(v1 + 4);
  AWDLSoftAPChannelChangedEvent.hash(into:)(a1, v2, *(_WORD *)(v1 + 8));
}

Swift::Int sub_1001016CC(uint64_t a1)
{
  char v2 = *v1;
  unsigned __int16 v3 = *((_WORD *)v1 + 4);
  int v4 = *((_DWORD *)v1 + 1);
  Hasher.init(_seed:)(v7, a1);
  LOBYTE(v6)  = v2;
  HIDWORD(v6)  = v4;
  AWDLSoftAPChannelChangedEvent.hash(into:)((uint64_t)v7, v6, v3);
  return Hasher._finalize()();
}

uint64_t sub_100101728(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v2 = *(_WORD *)(a1 + 8);
  HIDWORD(v5)  = *(_DWORD *)(a1 + 4);
  unint64_t v3 = v5;
  LOBYTE(v5)  = *(_BYTE *)a2;
  HIDWORD(v5)  = *(_DWORD *)(a2 + 4);
  return sub_100104780(v3, v2, v5, *(_WORD *)(a2 + 8));
}

unint64_t AWDLSoftErrorReport.description.getter()
{
  uint64_t v1 = v6[0];
  uint64_t v2 = v6[1];
  if ((v7 & 1) != 0) {
    uint64_t v3 = 978474068LL;
  }
  else {
    uint64_t v3 = 977556808LL;
  }
  unint64_t v5 = v3 & 0xFFFF0000FFFFFFFFLL | 0x2000000000LL;
  String.append(_:)(*(Swift::String *)&v1);
  return v5;
}

uint64_t AWDLSoftErrorReport.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_100055C7C(v2, (uint64_t)v12);
  uint64_t v4 = v12[0];
  uint64_t v5 = v12[1];
  if ((v13 & 1) != 0)
  {
    uint64_t v6 = v12[2];
    uint64_t v7 = v12[3];
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(a1, v4, v5);
    uint64_t v8 = a1;
    uint64_t v9 = v6;
    uint64_t v10 = v7;
  }

  else
  {
    Hasher._combine(_:)(0LL);
    uint64_t v8 = a1;
    uint64_t v9 = v4;
    uint64_t v10 = v5;
  }

  return String.hash(into:)(v8, v9, v10);
}

Swift::Int AWDLSoftErrorReport.hashValue.getter()
{
  uint64_t v1 = v9[0];
  uint64_t v2 = v9[1];
  if ((v10 & 1) != 0)
  {
    uint64_t v3 = v9[2];
    uint64_t v4 = v9[3];
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(v8, v1, v2);
    uint64_t v5 = v3;
    uint64_t v6 = v4;
  }

  else
  {
    Hasher._combine(_:)(0LL);
    uint64_t v5 = v1;
    uint64_t v6 = v2;
  }

  String.hash(into:)(v8, v5, v6);
  return Hasher._finalize()();
}

Swift::Int sub_100101904()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  char v5 = *((_BYTE *)v0 + 32);
  Hasher.init(_seed:)(v9, 0LL);
  if ((v5 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(v9, v1, v2);
    uint64_t v6 = v3;
    uint64_t v7 = v4;
  }

  else
  {
    Hasher._combine(_:)(0LL);
    uint64_t v6 = v1;
    uint64_t v7 = v2;
  }

  String.hash(into:)(v9, v6, v7);
  return Hasher._finalize()();
}

uint64_t sub_1001019A0(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  if ((v1[4] & 1) != 0)
  {
    uint64_t v6 = v1[2];
    uint64_t v5 = v1[3];
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(a1, v3, v4);
    uint64_t v7 = a1;
    uint64_t v8 = v6;
    uint64_t v9 = v5;
  }

  else
  {
    Hasher._combine(_:)(0LL);
    uint64_t v7 = a1;
    uint64_t v8 = v3;
    uint64_t v9 = v4;
  }

  return String.hash(into:)(v7, v8, v9);
}

Swift::Int sub_100101A20(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  char v6 = *((_BYTE *)v1 + 32);
  Hasher.init(_seed:)(v10, a1);
  if ((v6 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(v10, v2, v3);
    uint64_t v7 = v4;
    uint64_t v8 = v5;
  }

  else
  {
    Hasher._combine(_:)(0LL);
    uint64_t v7 = v2;
    uint64_t v8 = v3;
  }

  String.hash(into:)(v10, v7, v8);
  return Hasher._finalize()();
}

unint64_t sub_100101AB8()
{
  if ((*(_BYTE *)(v0 + 32) & 1) != 0) {
    uint64_t v1 = 978474068LL;
  }
  else {
    uint64_t v1 = 977556808LL;
  }
  unint64_t v3 = v1 & 0xFFFF0000FFFFFFFFLL | 0x2000000000LL;
  String.append(_:)(*(Swift::String *)v0);
  return v3;
}

uint64_t sub_100101B10(uint64_t a1, uint64_t a2)
{
  return _s7CoreP2P19AWDLSoftErrorReportO21__derived_enum_equalsySbAC_ACtFZ_0((uint64_t)v4, (uint64_t)v5) & 1;
}

uint64_t NANInternetSharingStatistics.Requester.dhcpDelay.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(a1, v1, v3);
}

uint64_t AWDLIdleActivity.durationSinceLastUnicastRx.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLIdleActivity(0LL) + 20);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

void AWDLIdleActivity.hash(into:)()
{
  uint64_t v1 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (uint64_t *)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v3);
  uint64_t v7 = (uint64_t *)((char *)&v29 - v6);
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v8((char *)&v29 - v6, v0, v1);
  uint64_t v9 = *(uint64_t (**)(uint64_t *, uint64_t))(v2 + 88);
  int v10 = v9(v7, v1);
  int v11 = enum case for DispatchTimeInterval.seconds(_:);
  if (v10 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v2 + 96))(v7, v1);
    unint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    if (*v7 <= 0) {
      unint64_t v12 = 0x8000000000000000LL;
    }
    else {
      Swift::UInt64 v13 = v12;
    }
    goto LABEL_16;
  }

  if (v10 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v2 + 96))(v7, v1);
    uint64_t v14 = *v7;
    uint64_t v15 = 1000000LL;
LABEL_11:
    Swift::UInt64 v16 = v14 * v15;
    BOOL v17 = (unsigned __int128)(v14 * (__int128)v15) >> 64 != (v14 * v15) >> 63;
    BOOL v18 = v14 <= 0;
    unint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
    if (v18) {
      unint64_t v19 = 0x8000000000000000LL;
    }
    if (v17) {
      Swift::UInt64 v13 = v19;
    }
    else {
      Swift::UInt64 v13 = v16;
    }
    goto LABEL_16;
  }

  if (v10 == enum case for DispatchTimeInterval.microseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v2 + 96))(v7, v1);
    uint64_t v14 = *v7;
    uint64_t v15 = 1000LL;
    goto LABEL_11;
  }

  if (v10 == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v2 + 96))(v7, v1);
    Swift::UInt64 v13 = *v7;
  }

  else
  {
    if (v10 != enum case for DispatchTimeInterval.never(_:)) {
      (*(void (**)(uint64_t *, uint64_t))(v2 + 8))(v7, v1);
    }
    Swift::UInt64 v13 = 0x7FFFFFFFFFFFFFFFLL;
  }

uint64_t static AWDLIdleActivity.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static DispatchTimeInterval.== infix(_:_:)(a1, a2) & 1) == 0) {
    return 0LL;
  }
  uint64_t v4 = *(int *)(type metadata accessor for AWDLIdleActivity(0LL) + 20);
  return static DispatchTimeInterval.== infix(_:_:)(a1 + v4, a2 + v4);
}

Swift::Int AWDLIdleActivity.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_100101FAC(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100101FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  else {
    return 0LL;
  }
}

void DriverEvent.NAN.peerAttributes.getter()
{
  uint64_t v1 = (char *)sub_100102094 + 4 * byte_100346C73[sub_1001073D8((uint64_t)v3)];
  __asm { BR              X10 }

uint64_t sub_100102094()
{
  return 0LL;
}

uint64_t sub_100102158(const void *a1, const void *a2)
{
  return v3 & 1;
}

uint64_t sub_1001021A8(__int128 *a1, __int128 *a2)
{
  return v3 & 1;
}

void DriverEvent.NAN.shortDescription.getter()
{
  uint64_t v1 = (char *)sub_10010223C + 4 * byte_100346C89[sub_1001073D8((uint64_t)v2)];
  __asm { BR              X10 }

uint64_t sub_10010223C()
{
  uint64_t v2 = &type metadata for NANRoleChangeEvent;
  uint64_t v0 = sub_100002274(&qword_100408068);
  return String.init<A>(describing:)(&v2, v0);
}

void sub_100102358(uint64_t a1, ...)
{
}

void DriverEvent.NAN.description.getter()
{
  uint64_t v1 = (char *)sub_100102410 + 4 * word_100346CA0[sub_1001073D8((uint64_t)v3)];
  __asm { BR              X10 }

uint64_t sub_100102410()
{
  uint64_t v0 = NANBitmap.Channel.operatingClass.getter(&v3);
  __int16 v2 = *(_WORD *)(v0 + 4);
  int v4 = *(_DWORD *)v0;
  __int16 v5 = v2;
  return String.init<A>(describing:)(&v4, &type metadata for NANClusterChangeEvent);
}

void sub_10010280C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20, __int128 a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, char a46)
{
  uint64_t v48 = NANBitmap.Channel.operatingClass.getter(&STACK[0x460]);
  *(_OWORD *)&STACK[0x650]  = *(_OWORD *)(v48 + 128);
  *(_OWORD *)&STACK[0x660]  = *(_OWORD *)(v48 + 144);
  *(_OWORD *)&STACK[0x670]  = *(_OWORD *)(v48 + 160);
  *(_OWORD *)&STACK[0x680]  = *(_OWORD *)(v48 + 176);
  *(_OWORD *)&STACK[0x610]  = *(_OWORD *)(v48 + 64);
  *(_OWORD *)&STACK[0x620]  = *(_OWORD *)(v48 + 80);
  *(_OWORD *)&STACK[0x630]  = *(_OWORD *)(v48 + 96);
  *(_OWORD *)&STACK[0x640]  = *(_OWORD *)(v48 + 112);
  *(_OWORD *)&STACK[0x5D0]  = *(_OWORD *)v48;
  *(_OWORD *)&STACK[0x5E0]  = *(_OWORD *)(v48 + 16);
  *(_OWORD *)&STACK[0x5F0]  = *(_OWORD *)(v48 + 32);
  *(_OWORD *)&STACK[0x600]  = *(_OWORD *)(v48 + 48);
  uint64_t v49 = *(void *)(v48 + 192);
  int v50 = *(_DWORD *)(v48 + 200);
  __int16 v51 = *(_WORD *)(v48 + 204);
  uint64_t v52 = *(void *)(v48 + 208);
  uint64_t v53 = *(void *)(v48 + 216);
  a9  = 0LL;
  a10  = 0xE000000000000000LL;
  sub_100058090(&STACK[0x740], &a46);
  uint64_t v54 = NANBitmap.Channel.operatingClass.getter(&a46);
  sub_100058148(v54);
  DriverEvent.NAN.shortDescription.getter();
  object  = v55._object;
  String.append(_:)(v55);
  swift_bridgeObjectRelease(object);
  v57._uint64_t countAndFlagsBits = 40LL;
  v57._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v57);
  __int128 v58 = *(_OWORD *)&STACK[0x660];
  a19  = *(_OWORD *)&STACK[0x650];
  a20  = v58;
  a21  = *(_OWORD *)&STACK[0x670];
  *(__int128 *)((char *)&a21 + 9)  = *(_OWORD *)(v47 + 169);
  __int128 v59 = *(_OWORD *)&STACK[0x620];
  a15  = *(_OWORD *)&STACK[0x610];
  a16  = v59;
  __int128 v60 = *(_OWORD *)&STACK[0x640];
  a17  = *(_OWORD *)&STACK[0x630];
  a18  = v60;
  __int128 v61 = *(_OWORD *)&STACK[0x5E0];
  a11  = *(_OWORD *)&STACK[0x5D0];
  a12  = v61;
  __int128 v62 = *(_OWORD *)&STACK[0x600];
  a13  = *(_OWORD *)&STACK[0x5F0];
  a14  = v62;
  _print_unlocked<A, B>(_:_:)( &a11,  &a9,  &type metadata for IEEE80211Frame,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v63._uint64_t countAndFlagsBits = 32LL;
  v63._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v63);
  *(void *)&a11  = v49;
  DWORD2(a11)  = v50;
  WORD6(a11)  = v51;
  *(void *)&a12  = v52;
  *((void *)&a12 + 1)  = v53;
  _print_unlocked<A, B>(_:_:)( &a11,  &a9,  &type metadata for NANBeacon.Metadata,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v64._uint64_t countAndFlagsBits = 41LL;
  v64._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v64);
  sub_1001074E8( v46,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
  JUMPOUT(0x1001027E4LL);
}

void sub_1001029AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  Swift::String v57 = (const void *)NANBitmap.Channel.operatingClass.getter(&STACK[0x460]);
  memcpy(&STACK[0x5D0], v57, 0x169uLL);
  memcpy(&a11, &STACK[0x5D0], 0x169uLL);
  sub_100058090(&STACK[0x740], &a57);
  __int128 v58 = (void *)NANBitmap.Channel.operatingClass.getter(&a57);
  sub_1001073E0(v58);
  JUMPOUT(0x1001027D8LL);
}

void sub_1001029FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v58 = *(void *)NANBitmap.Channel.operatingClass.getter(&STACK[0x460]);
  sub_100058090(&STACK[0x740], &a57);
  __int128 v59 = (void *)NANBitmap.Channel.operatingClass.getter(&a57);
  swift_bridgeObjectRetain(*v59);
  Array.description.getter(v58, &type metadata for Channel);
  sub_1001074E8( v57,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
  JUMPOUT(0x1001027E4LL);
}

void sub_100102A50()
{
}

void sub_100102AA0()
{
}

void DriverEvent.AWDL.shortDescription.getter()
{
  uint64_t v1 = type metadata accessor for DriverEvent.AWDL(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100057FE8(v0, (uint64_t)v3, v4);
  __int16 v5 = (char *)sub_100102B84 + 4 * byte_100346CCC[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X11 }

uint64_t sub_100102B84()
{
  return 0x656D69746C616572LL;
}

void DriverEvent.AWDL.description.getter()
{
  uint64_t v1 = type metadata accessor for AWDLIdleActivity(0LL);
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for AWDLActionFrame.Header(0LL);
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for DriverEvent.AWDL(0LL);
  __chkstk_darwin(v3);
  __int16 v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100057FE8(v0, (uint64_t)v5, v6);
  uint64_t v7 = (char *)sub_100102E30 + 4 * byte_100346CDA[swift_getEnumCaseMultiPayload(v5, v3)];
  __asm { BR              X10 }

uint64_t sub_100102E30()
{
  int v2 = *v0;
  DriverEvent.AWDL.shortDescription.getter();
  *(void *)(v1 - 128)  = v3;
  *(void *)(v1 - 120)  = v4;
  v5._uint64_t countAndFlagsBits = 40LL;
  v5._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  if (v2) {
    uint64_t v6 = 0x64657472617473LL;
  }
  else {
    uint64_t v6 = 0x6465646E65LL;
  }
  if (v2) {
    unint64_t v7 = 0xE700000000000000LL;
  }
  else {
    unint64_t v7 = 0xE500000000000000LL;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease(v7);
  v9._uint64_t countAndFlagsBits = 41LL;
  v9._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  return *(void *)(v1 - 128);
}

void DriverEvent.Infra.shortDescription.getter()
{
  __asm { BR              X12 }

uint64_t sub_100103254()
{
  int v2 = &type metadata for InfraScanCompleteEvent;
  uint64_t v0 = sub_100002274(&qword_100408068);
  return String.init<A>(describing:)(&v2, v0);
}

void DriverEvent.Infra.description.getter()
{
  __asm { BR              X10 }

uint64_t sub_10010342C()
{
  uint64_t v2 = v1;
  uint64_t v12 = v3;
  uint64_t v13 = v1;
  swift_bridgeObjectRetain(v1);
  v4._uint64_t countAndFlagsBits = 32LL;
  v4._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v2);
  uint64_t v6 = v12;
  uint64_t v5 = v13;
  LOWORD(v12)  = v0;
  uint64_t v7 = String.init<A>(describing:)(&v12, &type metadata for IEEE80211StatusAndReason);
  Swift::String v9 = v8;
  uint64_t v12 = v6;
  uint64_t v13 = v5;
  swift_bridgeObjectRetain(v5);
  v10._uint64_t countAndFlagsBits = v7;
  v10._object  = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v12;
}

void sub_1001035B4()
{
  if ((v0 & 0xFF00000000LL) != 0x300000000LL) {
    Channel.description.getter(v0 & 0xFFFFFFFFFFFFLL);
  }
  JUMPOUT(0x100103598LL);
}

void sub_1001036B4()
{
}

uint64_t DriverEvent.SystemState.description.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x656B617720646964LL;
  }
  else {
    return 0x656C73206C6C6977LL;
  }
}

uint64_t sub_100103724()
{
  if (*v0) {
    return 0x656B617720646964LL;
  }
  else {
    return 0x656C73206C6C6977LL;
  }
}

uint64_t type metadata accessor for DriverEvent.AWDL(uint64_t a1)
{
  return sub_100020E48(a1, qword_1004082F8, (uint64_t)&nominal type descriptor for DriverEvent.AWDL);
}

uint64_t type metadata accessor for DriverEvent(uint64_t a1)
{
  return sub_100020E48(a1, qword_100408250, (uint64_t)&nominal type descriptor for DriverEvent);
}

void DriverEvent.description.getter()
{
  uint64_t v1 = type metadata accessor for DriverEvent.AWDL(0LL);
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for DriverEvent(0LL);
  __chkstk_darwin(v2);
  Swift::String v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100057FE8(v0, (uint64_t)v4, v5);
  uint64_t v6 = (char *)sub_100103850 + 4 * byte_100346D0A[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }

void sub_100103850()
{
}

BOOL sub_100103938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  LOBYTE(v20)  = BYTE1(a1);
  BYTE1(v20)  = BYTE2(a1);
  BYTE2(v20)  = BYTE3(a1);
  HIBYTE(v20)  = BYTE4(a1);
  LOBYTE(v22)  = BYTE5(a1);
  HIBYTE(v22)  = BYTE6(a1);
  LOBYTE(v16)  = BYTE1(a3);
  BYTE1(v16)  = BYTE2(a3);
  BYTE2(v16)  = BYTE3(a3);
  HIBYTE(v16)  = BYTE4(a3);
  LOBYTE(v18)  = BYTE5(a3);
  HIBYTE(v18)  = BYTE6(a3);
  if (v20 != v16 || v22 != v18) {
    return 0LL;
  }
  BOOL v8 = (a1 & 0x100000000000000LL) == 0;
  if ((a1 & 0x100000000000000LL) != 0) {
    uint64_t v9 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v9 = 0x74736163696E75LL;
  }
  if (v8) {
    unint64_t v10 = 0xE700000000000000LL;
  }
  else {
    unint64_t v10 = 0xE900000000000074LL;
  }
  BOOL v11 = (a3 & 0x100000000000000LL) == 0;
  if ((a3 & 0x100000000000000LL) != 0) {
    uint64_t v12 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v12 = 0x74736163696E75LL;
  }
  if (v11) {
    unint64_t v13 = 0xE700000000000000LL;
  }
  else {
    unint64_t v13 = 0xE900000000000074LL;
  }
  if (v9 == v12 && v10 == v13)
  {
    swift_bridgeObjectRelease_n(v10, 2LL);
  }

  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v12, v13, 0LL);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v13);
    BOOL result = 0LL;
    if ((v14 & 1) == 0) {
      return result;
    }
  }

  LOWORD(v21)  = a2;
  BYTE2(v21)  = BYTE2(a2);
  HIBYTE(v21)  = BYTE3(a2);
  LOBYTE(v23)  = BYTE4(a2);
  HIBYTE(v23)  = BYTE5(a2);
  LOWORD(v17)  = a4;
  BYTE2(v17)  = BYTE2(a4);
  HIBYTE(v17)  = BYTE3(a4);
  LOBYTE(v19)  = BYTE4(a4);
  HIBYTE(v19)  = BYTE5(a4);
  return v21 == v17 && v23 == v19;
}

BOOL _s7CoreP2P24NANDataHostAssistRequestV23__derived_struct_equalsySbAC_ACtFZ_0( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  LOBYTE(v11)  = BYTE2(a1);
  BYTE1(v11)  = BYTE3(a1);
  BYTE2(v11)  = BYTE4(a1);
  HIBYTE(v11)  = BYTE5(a1);
  LOBYTE(v13)  = BYTE6(a1);
  HIBYTE(v13)  = HIBYTE(a1);
  LOBYTE(v7)  = BYTE2(a3);
  BYTE1(v7)  = BYTE3(a3);
  BYTE2(v7)  = BYTE4(a3);
  HIBYTE(v7)  = BYTE5(a3);
  LOBYTE(v9)  = BYTE6(a3);
  HIBYTE(v9)  = HIBYTE(a3);
  if (v11 != v7 || v13 != v9) {
    return 0LL;
  }
  LOWORD(v12)  = a2;
  BYTE2(v12)  = BYTE2(a2);
  HIBYTE(v12)  = BYTE3(a2);
  LOBYTE(v14)  = BYTE4(a2);
  HIBYTE(v14)  = BYTE5(a2);
  LOWORD(v8)  = a4;
  BYTE2(v8)  = BYTE2(a4);
  HIBYTE(v8)  = BYTE3(a4);
  LOBYTE(v10)  = BYTE4(a4);
  HIBYTE(v10)  = BYTE5(a4);
  if (v12 != v8 || v14 != v10) {
    return 0LL;
  }
  if (BYTE6(a2) != 15)
  {
    if (BYTE6(a4) != 15)
    {
      if (BYTE6(a2) == 14)
      {
        if (BYTE6(a4) == 14) {
          return (a4 ^ a2) >> 56 == 0;
        }
      }

      else if (BYTE6(a4) != 14 && byte_10034809C[SBYTE6(a2)] == byte_10034809C[SBYTE6(a4)])
      {
        return (a4 ^ a2) >> 56 == 0;
      }
    }

    return 0LL;
  }

  if (BYTE6(a4) != 15) {
    return 0LL;
  }
  return (a4 ^ a2) >> 56 == 0;
}

void _s7CoreP2P11DriverEventO5InfraO21__derived_enum_equalsySbAE_AEtFZ_0(__int128 *a1)
{
  __asm { BR              X10 }

uint64_t sub_100103D58()
{
  if (v5) {
    char v2 = 0;
  }
  else {
    char v2 = ((v1 & 1) == 0LL) ^ v4;
  }
  return v2 & 1;
}

uint64_t _s7CoreP2P19AWDLSoftErrorReportO21__derived_enum_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v23[0];
  uint64_t v4 = v23[1];
  if ((v24 & 1) == 0)
  {
    sub_100055C7C(a2, (uint64_t)&v18);
    if ((v22 & 1) == 0)
    {
      uint64_t v14 = v18;
      uint64_t v15 = v19;
      if (v3 != v18 || v4 != v19)
      {
        uint64_t v12 = v3;
        uint64_t v13 = v4;
        goto LABEL_18;
      }

BOOL sub_1001044EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  LOBYTE(v17)  = BYTE1(a1);
  BYTE1(v17)  = BYTE2(a1);
  BYTE2(v17)  = BYTE3(a1);
  HIBYTE(v17)  = BYTE4(a1);
  LOBYTE(v18)  = BYTE5(a1);
  HIBYTE(v18)  = BYTE6(a1);
  LOBYTE(v15)  = BYTE1(a3);
  BYTE1(v15)  = BYTE2(a3);
  BYTE2(v15)  = BYTE3(a3);
  HIBYTE(v15)  = BYTE4(a3);
  LOBYTE(v16)  = BYTE5(a3);
  HIBYTE(v16)  = BYTE6(a3);
  if (v17 != v15 || v18 != v16) {
    return 0LL;
  }
  BOOL v8 = (a1 & 0x100000000000000LL) == 0;
  if ((a1 & 0x100000000000000LL) != 0) {
    uint64_t v9 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v9 = 0x74736163696E75LL;
  }
  if (v8) {
    unint64_t v10 = 0xE700000000000000LL;
  }
  else {
    unint64_t v10 = 0xE900000000000074LL;
  }
  BOOL v11 = (a3 & 0x100000000000000LL) == 0;
  if ((a3 & 0x100000000000000LL) != 0) {
    uint64_t v12 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v12 = 0x74736163696E75LL;
  }
  if (v11) {
    unint64_t v13 = 0xE700000000000000LL;
  }
  else {
    unint64_t v13 = 0xE900000000000074LL;
  }
  if (v9 == v12 && v10 == v13)
  {
    swift_bridgeObjectRelease_n(v10, 2LL);
    return a2 == a4;
  }

  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v12, v13, 0LL);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v13);
  BOOL result = 0LL;
  if ((v14 & 1) != 0) {
    return a2 == a4;
  }
  return result;
}

uint64_t sub_100104678( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t result = 0LL;
  if (a1 == a5 && a2 == a6 && a3 == a7)
  {
    if ((_DWORD)a4 == (_DWORD)a8
      && ((0x801004u >> ((a4 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((a8 >> 29) & 0xF8)) & 0xFFC))
    {
      switch(BYTE5(a4))
      {
        case 2:
          if (BYTE5(a8) != 2) {
            return 0LL;
          }
          uint64_t result = 1LL;
          break;
        case 3:
          if (BYTE5(a8) != 3) {
            return 0LL;
          }
          uint64_t result = 1LL;
          break;
        case 4:
          if (BYTE5(a8) != 4) {
            return 0LL;
          }
          uint64_t result = 1LL;
          break;
        case 5:
          if (BYTE5(a8) != 5) {
            return 0LL;
          }
          uint64_t result = 1LL;
          break;
        case 6:
          if (BYTE5(a8) != 6) {
            return 0LL;
          }
          uint64_t result = 1LL;
          break;
        default:
          uint64_t result = 1LL;
          break;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100104780(unint64_t a1, unsigned __int16 a2, uint64_t a3, unsigned __int16 a4)
{
  if (((a1 ^ a3) & 1) == 0)
  {
    unint64_t v4 = HIDWORD(a1) | ((unint64_t)a2 << 32);
    unint64_t v5 = HIDWORD(a3) | ((unint64_t)a4 << 32);
    uint64_t v6 = v5 & 0xFF00000000LL;
    if ((v4 & 0xFF00000000LL) == 0x300000000LL)
    {
      if (v6 == 0x300000000LL) {
        return 1LL;
      }
    }

    else if (v6 != 0x300000000LL {
           && HIDWORD(a1) == HIDWORD(a3)
    }
           && ((0x801004u >> ((v4 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((v5 >> 29) & 0xF8)) & 0xFFC))
    {
      switch(BYTE5(v4))
      {
        case 2:
          return BYTE5(v5) == 2;
        case 3:
          return BYTE5(v5) == 3;
        case 4:
          return BYTE5(v5) == 4;
        case 5:
          return BYTE5(v5) == 5;
        case 6:
          return BYTE5(v5) == 6;
        default:
          return BYTE5(v5) - 2 >= 5 && ((v4 & 0x10000000000LL) == 0) != ((v5 >> 40) & 1);
      }
    }
  }

  return 0LL;
}

BOOL _s7CoreP2P32NANFollowUpTransferCompleteEventV23__derived_struct_equalsySbAC_ACtFZ_0( uint64_t a1, char a2, uint64_t a3, char a4)
{
  LOBYTE(v9)  = BYTE2(a1);
  BYTE1(v9)  = BYTE3(a1);
  BYTE2(v9)  = BYTE4(a1);
  HIBYTE(v9)  = BYTE5(a1);
  LOBYTE(v10)  = BYTE6(a1);
  HIBYTE(v10)  = HIBYTE(a1);
  LOBYTE(v7)  = BYTE2(a3);
  BYTE1(v7)  = BYTE3(a3);
  BYTE2(v7)  = BYTE4(a3);
  HIBYTE(v7)  = BYTE5(a3);
  LOBYTE(v8)  = BYTE6(a3);
  HIBYTE(v8)  = HIBYTE(a3);
  return v9 == v7 && v10 == v8 && a2 == a4;
}

BOOL _s7CoreP2P43NANDataManagementFrameTransferCompleteEventV23__derived_struct_equalsySbAC_ACtFZ_0( uint64_t a1, char a2, uint64_t a3, char a4)
{
  LOBYTE(v9)  = BYTE1(a1);
  BYTE1(v9)  = BYTE2(a1);
  BYTE2(v9)  = BYTE3(a1);
  HIBYTE(v9)  = BYTE4(a1);
  LOBYTE(v10)  = BYTE5(a1);
  HIBYTE(v10)  = BYTE6(a1);
  LOBYTE(v7)  = BYTE1(a3);
  BYTE1(v7)  = BYTE2(a3);
  BYTE2(v7)  = BYTE3(a3);
  HIBYTE(v7)  = BYTE4(a3);
  LOBYTE(v8)  = BYTE5(a3);
  HIBYTE(v8)  = BYTE6(a3);
  if (v9 != v7 || v10 != v8) {
    return 0LL;
  }
  unint64_t v6 = a3 & 0xFF00000000000000LL;
  if (HIBYTE(a1) != 14)
  {
    if (v6 != 0xE00000000000000LL && byte_10034809C[a1 >> 56] == byte_10034809C[a3 >> 56]) {
      return a2 == a4;
    }
    return 0LL;
  }

  if (v6 != 0xE00000000000000LL) {
    return 0LL;
  }
  return a2 == a4;
}

uint64_t sub_100104AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  LOBYTE(v13)  = BYTE2(a1);
  BYTE1(v13)  = BYTE3(a1);
  BYTE2(v13)  = BYTE4(a1);
  HIBYTE(v13)  = BYTE5(a1);
  LOBYTE(v15)  = BYTE6(a1);
  HIBYTE(v15)  = HIBYTE(a1);
  LOBYTE(v9)  = BYTE2(a4);
  BYTE1(v9)  = BYTE3(a4);
  BYTE2(v9)  = BYTE4(a4);
  HIBYTE(v9)  = BYTE5(a4);
  LOBYTE(v11)  = BYTE6(a4);
  HIBYTE(v11)  = HIBYTE(a4);
  if (v13 != v9 || v15 != v11) {
    return 0LL;
  }
  LOWORD(v14)  = a2;
  BYTE2(v14)  = BYTE2(a2);
  HIBYTE(v14)  = BYTE3(a2);
  LOBYTE(v16)  = BYTE4(a2);
  HIBYTE(v16)  = BYTE5(a2);
  LOWORD(v10)  = a5;
  BYTE2(v10)  = BYTE2(a5);
  HIBYTE(v10)  = BYTE3(a5);
  LOBYTE(v12)  = BYTE4(a5);
  HIBYTE(v12)  = BYTE5(a5);
  if (v14 == v10 && v16 == v12) {
    return _s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(a3, a6);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100104C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  LOBYTE(v10)  = BYTE2(a1);
  BYTE1(v10)  = BYTE3(a1);
  BYTE2(v10)  = BYTE4(a1);
  HIBYTE(v10)  = BYTE5(a1);
  LOBYTE(v11)  = BYTE6(a1);
  HIBYTE(v11)  = HIBYTE(a1);
  LOBYTE(v8)  = BYTE2(a4);
  BYTE1(v8)  = BYTE3(a4);
  BYTE2(v8)  = BYTE4(a4);
  HIBYTE(v8)  = BYTE5(a4);
  LOBYTE(v9)  = BYTE6(a4);
  HIBYTE(v9)  = HIBYTE(a4);
  BOOL v6 = v10 == v8 && v11 == v9;
  if (v6 && a2 == a5) {
    return _s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(a3, a6);
  }
  else {
    return 0LL;
  }
}

void _s7CoreP2P11DriverEventO21__derived_enum_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = a2;
  uint64_t v3 = type metadata accessor for DriverEvent.AWDL(0LL);
  __chkstk_darwin(v3);
  v16[1]  = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DriverEvent(0LL);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v9 = __chkstk_darwin(v8);
  __chkstk_darwin(v9);
  uint64_t v10 = sub_100002274(&qword_100408330);
  uint64_t v11 = __chkstk_darwin(v10);
  int v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_100057FE8(a1, (uint64_t)v13, type metadata accessor for DriverEvent);
  sub_100057FE8(v17, v14, type metadata accessor for DriverEvent);
  __int16 v15 = (char *)sub_100104EC4 + 4 * byte_100346D34[swift_getEnumCaseMultiPayload(v13, v5)];
  __asm { BR              X10 }

uint64_t sub_100104EC4()
{
  if (swift_getEnumCaseMultiPayload(v3, v2))
  {
    sub_1001074E8( v0 + 24,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
    sub_1000225EC(v1, &qword_100408330);
    char v5 = 0;
  }

  else
  {
    sub_100058090(v3, (void *)(v0 + 392));
    _s7CoreP2P11DriverEventO3NANO21__derived_enum_equalsySbAE_AEtFZ_0((const void *)(v0 + 24));
    char v5 = v6;
    sub_1001074E8( v0 + 392,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
    sub_1001074E8( v0 + 24,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
    sub_10005802C(v1, type metadata accessor for DriverEvent);
  }

  return v5 & 1;
}

void _s7CoreP2P11DriverEventO4AWDLO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = a1;
  uint64_t v41 = (char *)a2;
  uint64_t v29 = type metadata accessor for AWDLIdleActivity(0LL);
  __chkstk_darwin(v29);
  __n128 v31 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0LL);
  __chkstk_darwin(v30);
  char v32 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for AWDLActionFrame.Header(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v34 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  char v33 = (char *)&v29 - v7;
  uint64_t v8 = type metadata accessor for DriverEvent.AWDL(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  unint64_t v38 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v37 = (char *)&v29 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  __int128 v36 = (char *)&v29 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v35 = (char *)&v29 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v39 = (char *)&v29 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v22 = __chkstk_darwin(v21);
  __chkstk_darwin(v22);
  uint64_t v23 = sub_100002274(&qword_100408338);
  uint64_t v24 = __chkstk_darwin(v23);
  Swift::UInt64 v26 = (char *)&v29 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = (uint64_t)&v26[*(int *)(v24 + 48)];
  sub_100057FE8(v40, (uint64_t)v26, type metadata accessor for DriverEvent.AWDL);
  uint64_t v40 = v27;
  sub_100057FE8((uint64_t)v41, v27, type metadata accessor for DriverEvent.AWDL);
  uint64_t v41 = v26;
  unint64_t v28 = (char *)sub_100105438 + 4 * word_100346D3A[swift_getEnumCaseMultiPayload(v26, v8)];
  __asm { BR              X10 }

uint64_t sub_100105438()
{
  uint64_t v3 = *(void *)(v0 + 96);
  sub_100057FE8(v3, (uint64_t)v1, type metadata accessor for DriverEvent.AWDL);
  uint64_t v4 = *(_BYTE **)(v0 + 88);
  if (swift_getEnumCaseMultiPayload(v4, v2))
  {
    sub_1000225EC(v3, &qword_100408338);
    char v6 = 0;
  }

  else
  {
    char v5 = *v1 ^ *v4;
    sub_10005802C(v3, type metadata accessor for DriverEvent.AWDL);
    char v6 = v5 ^ 1;
  }

  return v6 & 1;
}

uint64_t _s7CoreP2P30NANOOBActionFrameReceivedEventV23__derived_struct_equalsySbAC_ACtFZ_0( uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(_DWORD *)a1 == *(_DWORD *)a2 && *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(a2 + 4);
  if (v2
    && (*(_DWORD *)(a1 + 6) == *(_DWORD *)(a2 + 6)
      ? (BOOL v3 = *(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a2 + 10))
      : (BOOL v3 = 0),
        v3))
  {
    return _s7CoreP2P14IEEE80211FrameV10ManagementO06ActionD0V23__derived_struct_equalsySbAG_AGtFZ_0( *(_BYTE *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(_BYTE *)(a2 + 16),  *(void *)(a2 + 24),  *(void *)(a2 + 32),  *(void *)(a2 + 40));
  }

  else
  {
    return 0LL;
  }

uint64_t _s7CoreP2P28NANDataResponseReceivedEventV23__derived_struct_equalsySbAC_ACtFZ_0( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  LOBYTE(v17)  = BYTE2(a1);
  BYTE1(v17)  = BYTE3(a1);
  BYTE2(v17)  = BYTE4(a1);
  HIBYTE(v17)  = BYTE5(a1);
  LOBYTE(v19)  = BYTE6(a1);
  HIBYTE(v19)  = HIBYTE(a1);
  LOBYTE(v12)  = BYTE2(a5);
  BYTE1(v12)  = BYTE3(a5);
  BYTE2(v12)  = BYTE4(a5);
  HIBYTE(v12)  = BYTE5(a5);
  LOBYTE(v15)  = BYTE6(a5);
  HIBYTE(v15)  = HIBYTE(a5);
  if (v17 != v12 || v19 != v15) {
    return 0LL;
  }
  LOWORD(v18)  = a2;
  BYTE2(v18)  = BYTE2(a2);
  HIBYTE(v18)  = BYTE3(a2);
  LOBYTE(v20)  = BYTE4(a2);
  HIBYTE(v20)  = BYTE5(a2);
  LOWORD(v13)  = a6;
  BYTE2(v13)  = BYTE2(a6);
  HIBYTE(v13)  = BYTE3(a6);
  LOBYTE(v16)  = BYTE4(a6);
  HIBYTE(v16)  = BYTE5(a6);
  BOOL v9 = v18 == v13 && v20 == v16;
  if (v9
    && ((BYTE6(v14)  = BYTE6(a2),
         BYTE7(v14)  = HIBYTE(a2),
         DWORD2(v14)  = a3,
         LOBYTE(v14)  = BYTE6(a6),
         BYTE1(v14)  = HIBYTE(a6),
         *(_DWORD *)((char *)&v14 + 2)  = a7,
         *(_DWORD *)((char *)&v14 + 6) == (_DWORD)v14)
      ? (BOOL v10 = HIWORD(a3) == HIWORD(a7))
      : (BOOL v10 = 0),
        v10))
  {
    return _s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(a4, a8);
  }

  else
  {
    return 0LL;
  }

uint64_t sub_1001062A0(uint64_t result, uint64_t a2, unint64_t a3)
{
  return result;
}

uint64_t sub_1001062BC(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (BYTE2(a3) != 255) {
    return sub_1001062D4(result, a2, a3, BYTE2(a3) & 1);
  }
  return result;
}

uint64_t sub_1001062D4(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0) {
    return sub_1000208D8(result, a2);
  }
  else {
    return swift_bridgeObjectRelease(result);
  }
}

uint64_t sub_1001062E0(uint64_t result, uint64_t a2, unint64_t a3)
{
  return result;
}

void _s7CoreP2P11DriverEventO3NANO21__derived_enum_equalsySbAE_AEtFZ_0(const void *a1)
{
  uint64_t v1 = (char *)sub_100106368 + 4 * word_100346D5C[sub_1001073D8((uint64_t)v2)];
  __asm { BR              X10 }

BOOL sub_100106368()
{
  uint64_t v1 = NANBitmap.Channel.operatingClass.getter(&v7);
  int v8 = *(_DWORD *)v1;
  __int16 v9 = *(_WORD *)(v1 + 4);
  sub_100058090(v0, v6);
  if (sub_1001073D8((uint64_t)v6))
  {
    return 0;
  }

  else
  {
    uint64_t v2 = NANBitmap.Channel.operatingClass.getter(v6);
    return v8 == *(_DWORD *)v2 && v9 == *(_WORD *)(v2 + 4);
  }

__n128 *sub_100107308(__n128 *a1, __n128 *a2)
{
  return a2;
}

uint64_t *sub_100107344(uint64_t *a1)
{
  return a1;
}

uint64_t *sub_100107370(uint64_t *a1)
{
  return a1;
}

_BYTE *sub_10010739C(_BYTE *a1, _BYTE *a2)
{
  return a2;
}

uint64_t sub_1001073D8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 361);
}

void *sub_1001073E0(void *a1)
{
  uint64_t v2 = a1[29];
  uint64_t v3 = a1[30];
  uint64_t v4 = a1[31];
  uint64_t v5 = a1[32];
  uint64_t v6 = a1[33];
  uint64_t v7 = a1[34];
  uint64_t v8 = a1[35];
  uint64_t v9 = a1[36];
  uint64_t v10 = a1[37];
  uint64_t v12 = a1[38];
  uint64_t v13 = a1[39];
  uint64_t v14 = a1[40];
  uint64_t v15 = a1[41];
  uint64_t v16 = a1[42];
  swift_bridgeObjectRetain(a1[44]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  return a1;
}

_OWORD *sub_1001074D0(__int128 *a1, _OWORD *a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(_OWORD *)((char *)a2 + 26)  = *(__int128 *)((char *)a1 + 26);
  *a2  = v2;
  a2[1]  = v3;
  return a2;
}

uint64_t sub_1001074E8( uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))
{
  __int16 v11 = *(_WORD *)(a1 + 360);
  __int128 v9 = *(_OWORD *)(a1 + 320);
  __int128 v10 = *(_OWORD *)(a1 + 336);
  __int128 v7 = *(_OWORD *)(a1 + 288);
  __int128 v8 = *(_OWORD *)(a1 + 304);
  __int128 v5 = *(_OWORD *)(a1 + 256);
  __int128 v6 = *(_OWORD *)(a1 + 272);
  __int128 v4 = *(_OWORD *)(a1 + 224);
  a2( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  *(void *)(a1 + 152),  *(void *)(a1 + 160),  *(void *)(a1 + 168),  *(void *)(a1 + 176),  *(void *)(a1 + 184),  *(void *)(a1 + 192),  *(void *)(a1 + 200),  *(void *)(a1 + 208),  *(void *)(a1 + 216),  v4,  *((void *)&v4 + 1),  *(void *)(a1 + 240),  *(void *)(a1 + 248),  v5,  *((void *)&v5 + 1),  v6,  *((void *)&v6 + 1),  v7,  *((void *)&v7 + 1),  v8,  *((void *)&v8 + 1),  v9,  *((void *)&v9 + 1),  v10,  *((void *)&v10 + 1),  *(void *)(a1 + 352),  v11);
  return a1;
}

uint64_t sub_100107584( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, char a46, char a47)
{
  switch(a47)
  {
    case 2:
    case 3:
    case 5:
    case 7:
    case 13:
      uint64_t result = a3;
      goto LABEL_3;
    case 6:
      uint64_t result = a4;
      goto LABEL_3;
    case 16:
      return sub_10005852C(a4, a5, a6);
    case 18:
      LOBYTE(v47)  = a24;
      return sub_1000581C4( a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  v47,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100058250);
    case 19:
      swift_bridgeObjectRetain(a45);
      swift_bridgeObjectRetain(a30);
      swift_bridgeObjectRetain(a31);
      swift_bridgeObjectRetain(a32);
      swift_bridgeObjectRetain(a33);
      swift_bridgeObjectRetain(a34);
      swift_bridgeObjectRetain(a35);
      swift_bridgeObjectRetain(a36);
      swift_bridgeObjectRetain(a37);
      swift_bridgeObjectRetain(a38);
      swift_bridgeObjectRetain(a39);
      swift_bridgeObjectRetain(a40);
      swift_bridgeObjectRetain(a41);
      swift_bridgeObjectRetain(a42);
      uint64_t result = a43;
      goto LABEL_3;
    case 20:
LABEL_3:
      uint64_t result = swift_bridgeObjectRetain(result);
      break;
    default:
      return result;
  }

  return result;
}

unint64_t sub_10010775C()
{
  unint64_t result = qword_100408070;
  if (!qword_100408070)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANClusterChangeEvent,  &type metadata for NANClusterChangeEvent);
    atomic_store(result, (unint64_t *)&qword_100408070);
  }

  return result;
}

unint64_t sub_1001077A4()
{
  unint64_t result = qword_100408078;
  if (!qword_100408078)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANRoleChangeEvent,  &type metadata for NANRoleChangeEvent);
    atomic_store(result, (unint64_t *)&qword_100408078);
  }

  return result;
}

unint64_t sub_1001077EC()
{
  unint64_t result = qword_100408080;
  if (!qword_100408080)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDiscoveryResultEvent,  &type metadata for NANDiscoveryResultEvent);
    atomic_store(result, (unint64_t *)&qword_100408080);
  }

  return result;
}

unint64_t sub_100107834()
{
  unint64_t result = qword_100408088;
  if (!qword_100408088)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANPublishRepliedEvent,  &type metadata for NANPublishRepliedEvent);
    atomic_store(result, (unint64_t *)&qword_100408088);
  }

  return result;
}

unint64_t sub_10010787C()
{
  unint64_t result = qword_100408090;
  if (!qword_100408090)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDataRequestReceivedEvent,  &type metadata for NANDataRequestReceivedEvent);
    atomic_store(result, (unint64_t *)&qword_100408090);
  }

  return result;
}

unint64_t sub_1001078C4()
{
  unint64_t result = qword_100408098;
  if (!qword_100408098)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDataResponseReceivedEvent,  &type metadata for NANDataResponseReceivedEvent);
    atomic_store(result, (unint64_t *)&qword_100408098);
  }

  return result;
}

unint64_t sub_10010790C()
{
  unint64_t result = qword_1004080A0;
  if (!qword_1004080A0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDataConfirmReceivedEvent,  &type metadata for NANDataConfirmReceivedEvent);
    atomic_store(result, (unint64_t *)&qword_1004080A0);
  }

  return result;
}

unint64_t sub_100107954()
{
  unint64_t result = qword_1004080A8;
  if (!qword_1004080A8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDataEstablishedEvent,  &type metadata for NANDataEstablishedEvent);
    atomic_store(result, (unint64_t *)&qword_1004080A8);
  }

  return result;
}

unint64_t sub_10010799C()
{
  unint64_t result = qword_1004080B0;
  if (!qword_1004080B0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDataTerminationEvent,  &type metadata for NANDataTerminationEvent);
    atomic_store(result, (unint64_t *)&qword_1004080B0);
  }

  return result;
}

unint64_t sub_1001079E4()
{
  unint64_t result = qword_1004080B8;
  if (!qword_1004080B8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDataHostAssistRequest.Reason,  &type metadata for NANDataHostAssistRequest.Reason);
    atomic_store(result, (unint64_t *)&qword_1004080B8);
  }

  return result;
}

unint64_t sub_100107A2C()
{
  unint64_t result = qword_1004080C0;
  if (!qword_1004080C0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDataHostAssistRequest,  &type metadata for NANDataHostAssistRequest);
    atomic_store(result, (unint64_t *)&qword_1004080C0);
  }

  return result;
}

unint64_t sub_100107A74()
{
  unint64_t result = qword_1004080C8;
  if (!qword_1004080C8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANSubscribeTerminatedEvent,  &type metadata for NANSubscribeTerminatedEvent);
    atomic_store(result, (unint64_t *)&qword_1004080C8);
  }

  return result;
}

unint64_t sub_100107ABC()
{
  unint64_t result = qword_1004080D0;
  if (!qword_1004080D0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANPublishTerminatedEvent,  &type metadata for NANPublishTerminatedEvent);
    atomic_store(result, (unint64_t *)&qword_1004080D0);
  }

  return result;
}

unint64_t sub_100107B04()
{
  unint64_t result = qword_1004080D8;
  if (!qword_1004080D8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANFollowUpReceivedEvent,  &type metadata for NANFollowUpReceivedEvent);
    atomic_store(result, (unint64_t *)&qword_1004080D8);
  }

  return result;
}

unint64_t sub_100107B4C()
{
  unint64_t result = qword_1004080E0;
  if (!qword_1004080E0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANTransferCompleteStatus,  &type metadata for NANTransferCompleteStatus);
    atomic_store(result, (unint64_t *)&qword_1004080E0);
  }

  return result;
}

unint64_t sub_100107B94()
{
  unint64_t result = qword_1004080E8;
  if (!qword_1004080E8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANFollowUpTransferCompleteEvent,  &type metadata for NANFollowUpTransferCompleteEvent);
    atomic_store(result, (unint64_t *)&qword_1004080E8);
  }

  return result;
}

unint64_t sub_100107BDC()
{
  unint64_t result = qword_1004080F0;
  if (!qword_1004080F0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDataManagementFrameTransferCompleteEvent,  &type metadata for NANDataManagementFrameTransferCompleteEvent);
    atomic_store(result, (unint64_t *)&qword_1004080F0);
  }

  return result;
}

unint64_t sub_100107C24()
{
  unint64_t result = qword_1004080F8;
  if (!qword_1004080F8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WatchdogResetStatus,  &type metadata for WatchdogResetStatus);
    atomic_store(result, (unint64_t *)&qword_1004080F8);
  }

  return result;
}

unint64_t sub_100107C6C()
{
  unint64_t result = qword_100408100;
  if (!qword_100408100)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANOOBActionFrameTrasmitStatus.Reason,  &type metadata for NANOOBActionFrameTrasmitStatus.Reason);
    atomic_store(result, (unint64_t *)&qword_100408100);
  }

  return result;
}

unint64_t sub_100107CB4()
{
  unint64_t result = qword_100408108;
  if (!qword_100408108)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANOOBActionFrameTrasmitStatus.Result,  &type metadata for NANOOBActionFrameTrasmitStatus.Result);
    atomic_store(result, (unint64_t *)&qword_100408108);
  }

  return result;
}

unint64_t sub_100107CFC()
{
  unint64_t result = qword_100408110;
  if (!qword_100408110)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANOOBActionFrameTrasmitStatus,  &type metadata for NANOOBActionFrameTrasmitStatus);
    atomic_store(result, (unint64_t *)&qword_100408110);
  }

  return result;
}

unint64_t sub_100107D44()
{
  unint64_t result = qword_100408118;
  if (!qword_100408118)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANOOBActionFrameReceivedEvent,  &type metadata for NANOOBActionFrameReceivedEvent);
    atomic_store(result, (unint64_t *)&qword_100408118);
  }

  return result;
}

unint64_t sub_100107D8C()
{
  unint64_t result = qword_100408120;
  if (!qword_100408120)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDiscoveryWindowStartEvent,  &type metadata for NANDiscoveryWindowStartEvent);
    atomic_store(result, (unint64_t *)&qword_100408120);
  }

  return result;
}

unint64_t sub_100107DD4()
{
  unint64_t result = qword_100408128;
  if (!qword_100408128)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AWDLThreadCoexistenceEvent,  &type metadata for AWDLThreadCoexistenceEvent);
    atomic_store(result, (unint64_t *)&qword_100408128);
  }

  return result;
}

unint64_t sub_100107E1C()
{
  unint64_t result = qword_100408130;
  if (!qword_100408130)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AWDLSoftAPChannelChangedEvent,  &type metadata for AWDLSoftAPChannelChangedEvent);
    atomic_store(result, (unint64_t *)&qword_100408130);
  }

  return result;
}

unint64_t sub_100107E64()
{
  unint64_t result = qword_100408138;
  if (!qword_100408138)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AWDLSoftErrorReport,  &type metadata for AWDLSoftErrorReport);
    atomic_store(result, (unint64_t *)&qword_100408138);
  }

  return result;
}

unint64_t sub_100107EAC()
{
  unint64_t result = qword_100408140;
  if (!qword_100408140)
  {
    uint64_t v1 = type metadata accessor for AWDLIdleActivity(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AWDLIdleActivity, v1);
    atomic_store(result, (unint64_t *)&qword_100408140);
  }

  return result;
}

unint64_t sub_100107EF8()
{
  unint64_t result = qword_100408148;
  if (!qword_100408148)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DriverEvent.SystemState,  &type metadata for DriverEvent.SystemState);
    atomic_store(result, (unint64_t *)&qword_100408148);
  }

  return result;
}

ValueMetadata *type metadata accessor for NANClusterChangeEvent()
{
  return &type metadata for NANClusterChangeEvent;
}

uint64_t getEnumTagSinglePayload for NANRoleChangeEvent(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFC && a1[16]) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *a1;
  if (v3 >= 2) {
    int v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 3;
  }
  else {
    int v4 = -4;
  }
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NANRoleChangeEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)unint64_t result = a2 - 252;
    *(void *)(result + 8)  = 0LL;
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 16)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 16)  = 0;
    }
    if (a2) {
      *(_BYTE *)unint64_t result = a2 + 4;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANRoleChangeEvent()
{
  return &type metadata for NANRoleChangeEvent;
}

ValueMetadata *type metadata accessor for NANDiscoveryResultEvent()
{
  return &type metadata for NANDiscoveryResultEvent;
}

ValueMetadata *type metadata accessor for NANPublishRepliedEvent()
{
  return &type metadata for NANPublishRepliedEvent;
}

ValueMetadata *type metadata accessor for NANDataRequestReceivedEvent()
{
  return &type metadata for NANDataRequestReceivedEvent;
}

uint64_t initializeWithCopy for NANDataResponseReceivedEvent(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2)  = *(_DWORD *)(a2 + 2);
  *(_WORD *)(a1 + 6)  = *(_WORD *)(a2 + 6);
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12)  = *(_WORD *)(a2 + 12);
  *(_DWORD *)(a1 + 14)  = *(_DWORD *)(a2 + 14);
  *(_WORD *)(a1 + 18)  = *(_WORD *)(a2 + 18);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 24)  = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for NANDataResponseReceivedEvent(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1)  = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3)  = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5)  = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6)  = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7)  = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9)  = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10)  = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11)  = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 12)  = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13)  = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 14)  = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(a1 + 15)  = *(_BYTE *)(a2 + 15);
  *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17)  = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18)  = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19)  = *(_BYTE *)(a2 + 19);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(a1 + 24)  = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for NANDataResponseReceivedEvent(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for NANDataResponseReceivedEvent()
{
  return &type metadata for NANDataResponseReceivedEvent;
}

uint64_t _s7CoreP2P27NANDataRequestReceivedEventVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2)  = *(_DWORD *)(a2 + 2);
  *(_WORD *)(a1 + 6)  = *(_WORD *)(a2 + 6);
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12)  = *(_WORD *)(a2 + 12);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 16)  = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t _s7CoreP2P27NANDataRequestReceivedEventVwca_0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1)  = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3)  = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5)  = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6)  = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7)  = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9)  = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10)  = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11)  = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 12)  = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13)  = *(_BYTE *)(a2 + 13);
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16)  = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t _s7CoreP2P27NANDataRequestReceivedEventVwta_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12)  = *(_WORD *)(a2 + 12);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for NANDataConfirmReceivedEvent()
{
  return &type metadata for NANDataConfirmReceivedEvent;
}

uint64_t getEnumTagSinglePayload for NANDataEstablishedEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 14)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 7);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANDataEstablishedEvent( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 12)  = 0;
    *(_DWORD *)(result + 8)  = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 14)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 14)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 7)  = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANDataEstablishedEvent()
{
  return &type metadata for NANDataEstablishedEvent;
}

uint64_t getEnumTagSinglePayload for NANDataTerminationEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 7);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANDataTerminationEvent( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8)  = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 16)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 16)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 7)  = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANDataTerminationEvent()
{
  return &type metadata for NANDataTerminationEvent;
}

uint64_t getEnumTagSinglePayload for NANDataHostAssistRequest(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xF7 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 247);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 15);
  BOOL v4 = v3 >= 0xA;
  int v5 = v3 - 10;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANDataHostAssistRequest( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF6)
  {
    *(void *)unint64_t result = a2 - 247;
    *(void *)(result + 8)  = 0LL;
    if (a3 >= 0xF7) {
      *(_BYTE *)(result + 16)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xF7) {
      *(_BYTE *)(result + 16)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 15)  = a2 + 9;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANDataHostAssistRequest()
{
  return &type metadata for NANDataHostAssistRequest;
}

uint64_t storeEnumTagSinglePayload for NANDataHostAssistRequest.Reason( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF6) {
    return ((uint64_t (*)(void))((char *)&loc_100108534 + 4 * byte_100346DBD[v4]))();
  }
  *a1  = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_100108568 + 4 * byte_100346DB8[v4]))();
}

uint64_t sub_100108568(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100108570(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x100108578LL);
  }
  return result;
}

uint64_t sub_100108584(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x10010858CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 9;
  return result;
}

uint64_t sub_100108590(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100108598(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANDataHostAssistRequest.Reason()
{
  return &type metadata for NANDataHostAssistRequest.Reason;
}

ValueMetadata *type metadata accessor for NANSubscribeTerminatedEvent()
{
  return &type metadata for NANSubscribeTerminatedEvent;
}

ValueMetadata *type metadata accessor for NANPublishTerminatedEvent()
{
  return &type metadata for NANPublishTerminatedEvent;
}

uint64_t _s7CoreP2P23NANDiscoveryResultEventVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2)  = *(_DWORD *)(a2 + 2);
  *(_WORD *)(a1 + 6)  = *(_WORD *)(a2 + 6);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t _s7CoreP2P23NANDiscoveryResultEventVwca_0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1)  = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3)  = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5)  = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6)  = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7)  = *(_BYTE *)(a2 + 7);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16)  = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

void *_s7CoreP2P23NANDiscoveryResultEventVwta_0(void *a1, void *a2)
{
  *a1  = *a2;
  uint64_t v3 = a2[2];
  uint64_t v4 = a1[2];
  a1[1]  = a2[1];
  a1[2]  = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for NANFollowUpReceivedEvent()
{
  return &type metadata for NANFollowUpReceivedEvent;
}

ValueMetadata *type metadata accessor for NANTransferCompleteStatus()
{
  return &type metadata for NANTransferCompleteStatus;
}

uint64_t initializeBufferWithCopyOfBuffer for NANDataManagementFrameTransferCompleteEvent( uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8)  = *((_BYTE *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for NANFollowUpTransferCompleteEvent()
{
  return &type metadata for NANFollowUpTransferCompleteEvent;
}

uint64_t _s7CoreP2P43NANDataManagementFrameTransferCompleteEventVwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t _s7CoreP2P43NANDataManagementFrameTransferCompleteEventVwst_0( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 8)  = 0;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 9)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 9)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8)  = a2 + 3;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANDataManagementFrameTransferCompleteEvent()
{
  return &type metadata for NANDataManagementFrameTransferCompleteEvent;
}

uint64_t storeEnumTagSinglePayload for WatchdogResetStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_100108804 + 4 * byte_100346DC7[v4]))();
  }
  *a1  = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100108838 + 4 * byte_100346DC2[v4]))();
}

uint64_t sub_100108838(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100108840(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x100108848LL);
  }
  return result;
}

uint64_t sub_100108854(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x10010885CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_100108860(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100108868(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for WatchdogResetStatus()
{
  return &type metadata for WatchdogResetStatus;
}

uint64_t getEnumTagSinglePayload for NANOOBActionFrameTrasmitStatus(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 3);
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANOOBActionFrameTrasmitStatus( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_DWORD *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 4)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 4)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 3)  = a2 + 3;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANOOBActionFrameTrasmitStatus()
{
  return &type metadata for NANOOBActionFrameTrasmitStatus;
}

uint64_t _s7CoreP2P25NANTransferCompleteStatusOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100108964 + 4 * byte_100346DD1[v4]))();
  }
  *a1  = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100108998 + 4 * byte_100346DCC[v4]))();
}

uint64_t sub_100108998(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001089A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x1001089A8LL);
  }
  return result;
}

uint64_t sub_1001089B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x1001089BCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1001089C0(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001089C8(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANOOBActionFrameTrasmitStatus.Reason()
{
  return &type metadata for NANOOBActionFrameTrasmitStatus.Reason;
}

uint64_t storeEnumTagSinglePayload for NANOOBActionFrameTrasmitStatus.Result( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_100108A30 + 4 * byte_100346DDB[v4]))();
  }
  *a1  = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100108A64 + 4 * byte_100346DD6[v4]))();
}

uint64_t sub_100108A64(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100108A6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x100108A74LL);
  }
  return result;
}

uint64_t sub_100108A80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x100108A88LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_100108A8C(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100108A94(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANOOBActionFrameTrasmitStatus.Result()
{
  return &type metadata for NANOOBActionFrameTrasmitStatus.Result;
}

uint64_t destroy for NANOOBActionFrameReceivedEvent(uint64_t *a1)
{
  return sub_100057AA0(a1[3], a1[4], a1[5]);
}

uint64_t initializeWithCopy for NANOOBActionFrameReceivedEvent(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 6)  = *(_DWORD *)(a2 + 6);
  *(_WORD *)(a1 + 10)  = *(_WORD *)(a2 + 10);
  *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  sub_10005852C(v3, v4, v5);
  *(void *)(a1 + 24)  = v3;
  *(void *)(a1 + 32)  = v4;
  *(void *)(a1 + 40)  = v5;
  return a1;
}

uint64_t assignWithCopy for NANOOBActionFrameReceivedEvent(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1)  = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3)  = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5)  = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6)  = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7)  = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9)  = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10)  = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11)  = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  sub_10005852C(v3, v4, v5);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a1 + 24)  = v3;
  *(void *)(a1 + 32)  = v4;
  *(void *)(a1 + 40)  = v5;
  sub_100057AA0(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for NANOOBActionFrameReceivedEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40)  = v3;
  sub_100057AA0(v4, v6, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANOOBActionFrameReceivedEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFE && *(_BYTE *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 32766);
  }
  HIDWORD(v3)  = (*(_DWORD *)(a1 + 24) >> 17) & 0x1F80 | ((unsigned __int16)*(_DWORD *)(a1 + 24) >> 9);
  LODWORD(v3)  = *(_DWORD *)(a1 + 24);
  unsigned int v4 = (v3 >> 30) ^ 0x7FFF;
  if (v4 >= 0x7FFD) {
    unsigned int v4 = -1;
  }
  return v4 + 1;
}

uint64_t storeEnumTagSinglePayload for NANOOBActionFrameReceivedEvent( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFD)
  {
    *(void *)(result + 40)  = 0LL;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)unint64_t result = a2 - 32766;
    if (a3 >= 0x7FFE) {
      *(_BYTE *)(result + 48)  = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFE) {
      *(_BYTE *)(result + 48)  = 0;
    }
    if (a2)
    {
      *(void *)(result + 32)  = 0LL;
      *(void *)(result + 40)  = 0LL;
      *(void *)(result + 24)  = ((-(__int16)a2 & 0x7FFF) << 7) & 0xFE00 | ((((-a2 >> 2) & 0x1FFF) - (a2 << 13)) << 17) & 0xFF00FFFF;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANOOBActionFrameReceivedEvent()
{
  return &type metadata for NANOOBActionFrameReceivedEvent;
}

uint64_t getEnumTagSinglePayload for NANDiscoveryWindowStartEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 30)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 28);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANDiscoveryWindowStartEvent( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8)  = 0LL;
    *(void *)(result + 16)  = 0LL;
    *(_WORD *)(result + 28)  = 0;
    *(_DWORD *)(result + 24)  = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 30)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 30)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 28)  = a2 + 2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANDiscoveryWindowStartEvent()
{
  return &type metadata for NANDiscoveryWindowStartEvent;
}

uint64_t storeEnumTagSinglePayload for AWDLThreadCoexistenceEvent(_WORD *a1, int a2, int a3)
{
  else {
    int v3 = 4;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (!a2) {
    return ((uint64_t (*)(void))((char *)sub_100108E50 + 4 * byte_100346DE5[v4]))();
  }
  *a1  = a2 - 1;
  return ((uint64_t (*)(void))((char *)sub_100108E30 + 4 * byte_100346DE0[v4]))();
}

uint64_t sub_100108E30(uint64_t result)
{
  *(_BYTE *)(result + 2)  = v1;
  return result;
}

uint64_t sub_100108E50(uint64_t result)
{
  *(_BYTE *)(result + 2)  = 0;
  return result;
}

uint64_t sub_100108E58(uint64_t result)
{
  *(_DWORD *)(result + 2)  = v1;
  return result;
}

uint64_t sub_100108E60(uint64_t result)
{
  *(_WORD *)(result + 2)  = v1;
  return result;
}

uint64_t sub_100108E68(uint64_t result)
{
  *(_WORD *)(result + 2)  = 0;
  return result;
}

uint64_t sub_100108E70(uint64_t result)
{
  *(_DWORD *)(result + 2)  = 0;
  return result;
}

ValueMetadata *type metadata accessor for AWDLThreadCoexistenceEvent()
{
  return &type metadata for AWDLThreadCoexistenceEvent;
}

uint64_t initializeBufferWithCopyOfBuffer for AWDLSoftAPChannelChangedEvent(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8)  = *((_WORD *)a2 + 4);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AWDLSoftAPChannelChangedEvent(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && a1[10]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLSoftAPChannelChangedEvent( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8)  = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 10)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 10)  = 0;
    }
    if (a2) {
      *(_BYTE *)unint64_t result = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AWDLSoftAPChannelChangedEvent()
{
  return &type metadata for AWDLSoftAPChannelChangedEvent;
}

uint64_t destroy for AWDLSoftErrorReport(uint64_t a1)
{
  return sub_100055CE4( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for AWDLSoftErrorReport(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(_BYTE *)(a2 + 32);
  sub_100055CB8(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  *(void *)(a1 + 24)  = v6;
  *(_BYTE *)(a1 + 32)  = v7;
  return a1;
}

uint64_t assignWithCopy for AWDLSoftErrorReport(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(_BYTE *)(a2 + 32);
  sub_100055CB8(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(_BYTE *)(a1 + 32);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  *(void *)(a1 + 24)  = v6;
  *(_BYTE *)(a1 + 32)  = v7;
  sub_100055CE4(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for AWDLSoftErrorReport(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(_BYTE *)(a1 + 32);
  __int128 v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v9;
  *(_BYTE *)(a1 + 32)  = v3;
  sub_100055CE4(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLSoftErrorReport(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLSoftErrorReport(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16)  = 0LL;
    *(void *)(result + 24)  = 0LL;
    *(_BYTE *)(result + 32)  = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8)  = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 33)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 33)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 32)  = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_100109104(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_10010910C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32)  = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AWDLSoftErrorReport()
{
  return &type metadata for AWDLSoftErrorReport;
}

uint64_t *initializeBufferWithCopyOfBuffer for AWDLIdleActivity(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v9);
  }

  else
  {
    uint64_t v7 = type metadata accessor for DispatchTimeInterval(0LL);
    char v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
  }

  return a1;
}

uint64_t destroy for AWDLIdleActivity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v6(a1, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + *(int *)(a2 + 20), v4);
}

uint64_t initializeWithCopy for AWDLIdleActivity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t assignWithCopy for AWDLIdleActivity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t initializeWithTake for AWDLIdleActivity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t assignWithTake for AWDLIdleActivity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLIdleActivity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001093F8);
}

uint64_t sub_1001093F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AWDLIdleActivity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100109440);
}

uint64_t sub_100109440(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t sub_100109480(uint64_t a1)
{
  uint64_t result = type metadata accessor for DispatchTimeInterval(319LL);
  if (v3 <= 0x3F)
  {
    v4[0]  = *(void *)(result - 8) + 64LL;
    v4[1]  = v4[0];
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for DriverEvent( unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v22 = *(void *)a2;
    *(void *)a1  = *(void *)a2;
    a1  = v22 + ((v6 + 16LL) & ~(unint64_t)v6);
    swift_retain();
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    switch(EnumCaseMultiPayload)
    {
      case 2:
        uint64_t v23 = *(void *)a2;
        uint64_t v24 = *(void *)(a2 + 8);
        uint64_t v25 = *(void *)(a2 + 16);
        uint64_t v26 = *(void *)(a2 + 24);
        uint64_t v27 = *(void *)(a2 + 32);
        char v28 = *(_BYTE *)(a2 + 41);
        unsigned __int8 v29 = *(_BYTE *)(a2 + 40);
        sub_100109F08(v23, v24, v25, v26, v27, v29, v28);
        *(void *)a1  = v23;
        *(void *)(a1 + 8)  = v24;
        *(void *)(a1 + 16)  = v25;
        *(void *)(a1 + 24)  = v26;
        *(void *)(a1 + 32)  = v27;
        *(_BYTE *)(a1 + 40)  = v29;
        *(_BYTE *)(a1 + 41)  = v28;
        unint64_t v19 = a1;
        uint64_t v20 = a3;
        uint64_t v21 = 2LL;
        goto LABEL_19;
      case 1:
        uint64_t v30 = type metadata accessor for DriverEvent.AWDL(0LL);
        switch(swift_getEnumCaseMultiPayload(a2, v30))
        {
          case 1u:
            *(_BYTE *)a1  = *(_BYTE *)a2;
            uint64_t v31 = *(void *)(a2 + 8);
            uint64_t v32 = *(void *)(a2 + 16);
            uint64_t v33 = *(void *)(a2 + 24);
            sub_10005852C(v31, v32, v33);
            *(void *)(a1 + 8)  = v31;
            *(void *)(a1 + 16)  = v32;
            *(void *)(a1 + 24)  = v33;
            uint64_t v34 = *(int *)(sub_100002274(&qword_100405DE0) + 48);
            uint64_t v35 = a1 + v34;
            uint64_t v36 = a2 + v34;
            *(_DWORD *)uint64_t v35 = *(_DWORD *)(a2 + v34);
            *(_WORD *)(v35 + 4)  = *(_WORD *)(a2 + v34 + 4);
            *(_DWORD *)(v35 + 6)  = *(_DWORD *)(a2 + v34 + 6);
            *(_WORD *)(v35 + 10)  = *(_WORD *)(a2 + v34 + 10);
            *(_DWORD *)(v35 + 12)  = *(_DWORD *)(a2 + v34 + 12);
            *(_WORD *)(v35 + 16)  = *(_WORD *)(a2 + v34 + 16);
            *(_DWORD *)(v35 + 20)  = *(_DWORD *)(a2 + v34 + 20);
            uint64_t v37 = (int *)type metadata accessor for AWDLActionFrame.Header(0LL);
            uint64_t v38 = v37[8];
            uint64_t v39 = v35 + v38;
            uint64_t v40 = v36 + v38;
            uint64_t v41 = type metadata accessor for DispatchTimeInterval(0LL);
            unint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 16LL);
            v42(v39, v40, v41);
            v42(v35 + v37[9], v36 + v37[9], v41);
            *(_DWORD *)(v35 + v37[10])  = *(_DWORD *)(v36 + v37[10]);
            *(_DWORD *)(v35 + v37[11])  = *(_DWORD *)(v36 + v37[11]);
            *(void *)(v35 + v37[12])  = *(void *)(v36 + v37[12]);
            *(_DWORD *)(v35 + v37[13])  = *(_DWORD *)(v36 + v37[13]);
            *(void *)(v35 + v37[14])  = *(void *)(v36 + v37[14]);
            *(_DWORD *)(v35 + v37[15])  = *(_DWORD *)(v36 + v37[15]);
            uint64_t v43 = v37[16];
            uint64_t v44 = *(void *)(v36 + v43);
            *(void *)(v35 + v43)  = v44;
            swift_bridgeObjectRetain(v44);
            unint64_t v45 = a1;
            uint64_t v46 = v30;
            uint64_t v47 = 1LL;
            goto LABEL_17;
          case 2u:
            __int128 v48 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a1  = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16)  = v48;
            *(void *)(a1 + 32)  = *(void *)(a2 + 32);
            *(_WORD *)(a1 + 40)  = *(_WORD *)(a2 + 40);
            *(_BYTE *)(a1 + 42)  = *(_BYTE *)(a2 + 42);
            *(_WORD *)(a1 + 43)  = *(_WORD *)(a2 + 43);
            *(_DWORD *)(a1 + 48)  = *(_DWORD *)(a2 + 48);
            *(_BYTE *)(a1 + 52)  = *(_BYTE *)(a2 + 52);
            *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
            *(void *)(a1 + 60)  = *(void *)(a2 + 60);
            *(_DWORD *)(a1 + 68)  = *(_DWORD *)(a2 + 68);
            *(_BYTE *)(a1 + 72)  = *(_BYTE *)(a2 + 72);
            uint64_t v49 = *(void *)(a2 + 80);
            uint64_t v50 = *(void *)(a2 + 88);
            *(void *)(a1 + 80)  = v49;
            *(void *)(a1 + 88)  = v50;
            uint64_t v52 = *(void *)(a2 + 96);
            uint64_t v51 = *(void *)(a2 + 104);
            *(void *)(a1 + 96)  = v52;
            *(void *)(a1 + 104)  = v51;
            swift_bridgeObjectRetain(v49);
            swift_bridgeObjectRetain(v50);
            swift_bridgeObjectRetain(v52);
            swift_bridgeObjectRetain(v51);
            unint64_t v45 = a1;
            uint64_t v46 = v30;
            uint64_t v47 = 2LL;
            goto LABEL_17;
          case 3u:
            *(_BYTE *)a1  = *(_BYTE *)a2;
            *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
            *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
            *(void *)(a1 + 24)  = *(void *)(a2 + 24);
            *(_DWORD *)(a1 + 32)  = *(_DWORD *)(a2 + 32);
            *(_WORD *)(a1 + 36)  = *(_WORD *)(a2 + 36);
            *(_DWORD *)(a1 + 40)  = *(_DWORD *)(a2 + 40);
            *(_WORD *)(a1 + 44)  = *(_WORD *)(a2 + 44);
            int v53 = *(_DWORD *)(a2 + 48);
            *(_WORD *)(a1 + 52)  = *(_WORD *)(a2 + 52);
            *(_DWORD *)(a1 + 48)  = v53;
            *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
            *(_WORD *)(a1 + 60)  = *(_WORD *)(a2 + 60);
            __int128 v54 = *(_OWORD *)(a2 + 80);
            *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
            *(_OWORD *)(a1 + 80)  = v54;
            *(_OWORD *)(a1 + 96)  = *(_OWORD *)(a2 + 96);
            *(_BYTE *)(a1 + 112)  = *(_BYTE *)(a2 + 112);
            Swift::String v55 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
            uint64_t v56 = v55[20];
            uint64_t v57 = a1 + v56;
            uint64_t v58 = a2 + v56;
            uint64_t v59 = type metadata accessor for DispatchTimeInterval(0LL);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 16LL))(v57, v58, v59);
            *(void *)(a1 + v55[21])  = *(void *)(a2 + v55[21]);
            *(void *)(a1 + v55[22])  = *(void *)(a2 + v55[22]);
            *(void *)(a1 + v55[23])  = *(void *)(a2 + v55[23]);
            *(void *)(a1 + v55[24])  = *(void *)(a2 + v55[24]);
            *(void *)(a1 + v55[25])  = *(void *)(a2 + v55[25]);
            *(void *)(a1 + v55[26])  = *(void *)(a2 + v55[26]);
            *(void *)(a1 + v55[27])  = *(void *)(a2 + v55[27]);
            *(void *)(a1 + v55[28])  = *(void *)(a2 + v55[28]);
            *(_WORD *)(a1 + v55[29])  = *(_WORD *)(a2 + v55[29]);
            *(_BYTE *)(a1 + v55[30])  = *(_BYTE *)(a2 + v55[30]);
            *(_BYTE *)(a1 + v55[31])  = *(_BYTE *)(a2 + v55[31]);
            *(_BYTE *)(a1 + v55[32])  = *(_BYTE *)(a2 + v55[32]);
            *(_BYTE *)(a1 + v55[33])  = *(_BYTE *)(a2 + v55[33]);
            *(_BYTE *)(a1 + v55[34])  = *(_BYTE *)(a2 + v55[34]);
            *(_BYTE *)(a1 + v55[35])  = *(_BYTE *)(a2 + v55[35]);
            uint64_t v60 = v55[36];
            __int128 v61 = (void *)(a1 + v60);
            __int128 v62 = (void *)(a2 + v60);
            v140  = v62[1];
            *__int128 v61 = *v62;
            v61[1]  = v140;
            *(_BYTE *)(a1 + v55[37])  = *(_BYTE *)(a2 + v55[37]);
            *(void *)(a1 + v55[38])  = *(void *)(a2 + v55[38]);
            *(void *)(a1 + v55[39])  = *(void *)(a2 + v55[39]);
            *(void *)(a1 + v55[40])  = *(void *)(a2 + v55[40]);
            *(void *)(a1 + v55[41])  = *(void *)(a2 + v55[41]);
            *(void *)(a1 + v55[42])  = *(void *)(a2 + v55[42]);
            *(void *)(a1 + v55[43])  = *(void *)(a2 + v55[43]);
            uint64_t v63 = *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0LL) + 20);
            uint64_t v64 = a1 + v63;
            uint64_t v65 = a2 + v63;
            __int128 v66 = *(_OWORD *)(v65 + 176);
            *(_OWORD *)(v64 + 160)  = *(_OWORD *)(v65 + 160);
            *(_OWORD *)(v64 + 176)  = v66;
            *(_OWORD *)(v64 + 192)  = *(_OWORD *)(v65 + 192);
            __int128 v67 = *(_OWORD *)(v65 + 112);
            *(_OWORD *)(v64 + 96)  = *(_OWORD *)(v65 + 96);
            *(_OWORD *)(v64 + 112)  = v67;
            __int128 v68 = *(_OWORD *)(v65 + 144);
            *(_OWORD *)(v64 + 128)  = *(_OWORD *)(v65 + 128);
            *(_OWORD *)(v64 + 144)  = v68;
            __int128 v69 = *(_OWORD *)(v65 + 48);
            *(_OWORD *)(v64 + 32)  = *(_OWORD *)(v65 + 32);
            *(_OWORD *)(v64 + 48)  = v69;
            __int128 v70 = *(_OWORD *)(v65 + 80);
            *(_OWORD *)(v64 + 64)  = *(_OWORD *)(v65 + 64);
            *(_OWORD *)(v64 + 80)  = v70;
            __int128 v71 = *(_OWORD *)(v65 + 16);
            *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
            *(_OWORD *)(v64 + 16)  = v71;
            uint64_t v72 = *(void *)(v65 + 216);
            *(void *)(v64 + 208)  = *(void *)(v65 + 208);
            *(void *)(v64 + 216)  = v72;
            uint64_t v73 = *(void *)(v65 + 224);
            uint64_t v74 = *(void *)(v65 + 232);
            *(void *)(v64 + 224)  = v73;
            *(void *)(v64 + 232)  = v74;
            uint64_t v76 = *(void *)(v65 + 240);
            uint64_t v75 = *(void *)(v65 + 248);
            *(void *)(v64 + 240)  = v76;
            *(void *)(v64 + 248)  = v75;
            uint64_t v77 = *(void *)(v65 + 256);
            uint64_t v78 = *(void *)(v65 + 264);
            *(void *)(v64 + 256)  = v77;
            *(void *)(v64 + 264)  = v78;
            v118  = *(void *)(v65 + 272);
            v120  = *(void *)(v65 + 280);
            *(void *)(v64 + 272)  = v118;
            *(void *)(v64 + 280)  = v120;
            v122  = *(void *)(v65 + 288);
            uint64_t v124 = *(void *)(v65 + 296);
            *(void *)(v64 + 288)  = v122;
            *(void *)(v64 + 296)  = v124;
            uint64_t v126 = *(void *)(v65 + 304);
            uint64_t v128 = *(void *)(v65 + 312);
            *(void *)(v64 + 304)  = v126;
            *(void *)(v64 + 312)  = v128;
            uint64_t v130 = *(void *)(v65 + 320);
            v132  = *(void *)(v65 + 328);
            *(void *)(v64 + 320)  = v130;
            *(void *)(v64 + 328)  = v132;
            uint64_t v134 = *(void *)(v65 + 336);
            uint64_t v136 = *(void *)(v65 + 344);
            *(void *)(v64 + 336)  = v134;
            *(void *)(v64 + 344)  = v136;
            v138  = *(void *)(v65 + 352);
            *(void *)(v64 + 352)  = v138;
            swift_bridgeObjectRetain(v140);
            swift_bridgeObjectRetain(v72);
            swift_bridgeObjectRetain(v73);
            swift_bridgeObjectRetain(v74);
            swift_bridgeObjectRetain(v76);
            swift_bridgeObjectRetain(v75);
            swift_bridgeObjectRetain(v77);
            swift_bridgeObjectRetain(v78);
            swift_bridgeObjectRetain(v118);
            swift_bridgeObjectRetain(v120);
            swift_bridgeObjectRetain(v122);
            swift_bridgeObjectRetain(v124);
            swift_bridgeObjectRetain(v126);
            swift_bridgeObjectRetain(v128);
            swift_bridgeObjectRetain(v130);
            swift_bridgeObjectRetain(v132);
            swift_bridgeObjectRetain(v134);
            swift_bridgeObjectRetain(v136);
            swift_bridgeObjectRetain(v138);
            unint64_t v45 = a1;
            uint64_t v46 = v30;
            uint64_t v47 = 3LL;
            goto LABEL_17;
          case 6u:
            uint64_t v79 = *(void *)a2;
            uint64_t v80 = *(void *)(a2 + 8);
            uint64_t v81 = *(void *)(a2 + 16);
            uint64_t v82 = *(void *)(a2 + 24);
            char v83 = *(_BYTE *)(a2 + 32);
            sub_100055CB8(v79, v80, v81, v82, v83);
            *(void *)a1  = v79;
            *(void *)(a1 + 8)  = v80;
            *(void *)(a1 + 16)  = v81;
            *(void *)(a1 + 24)  = v82;
            *(_BYTE *)(a1 + 32)  = v83;
            unint64_t v45 = a1;
            uint64_t v46 = v30;
            uint64_t v47 = 6LL;
            goto LABEL_17;
          case 8u:
            uint64_t v84 = *(void **)a2;
            *(void *)a1  = *(void *)a2;
            *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
            id v85 = v84;
            unint64_t v45 = a1;
            uint64_t v46 = v30;
            uint64_t v47 = 8LL;
            goto LABEL_17;
          case 9u:
            uint64_t v86 = type metadata accessor for DispatchTimeInterval(0LL);
            uint64_t v87 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 16LL);
            v87(a1, a2, v86);
            uint64_t v88 = type metadata accessor for AWDLIdleActivity(0LL);
            v87(a1 + *(int *)(v88 + 20), a2 + *(int *)(v88 + 20), v86);
            unint64_t v45 = a1;
            uint64_t v46 = v30;
            uint64_t v47 = 9LL;
LABEL_17:
            swift_storeEnumTagMultiPayload(v45, v46, v47);
            break;
          default:
            memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v30 - 8) + 64LL));
            break;
        }

        unint64_t v19 = a1;
        uint64_t v20 = a3;
        uint64_t v21 = 1LL;
        goto LABEL_19;
      case 0:
        v119  = a3;
        v137  = *(void *)(a2 + 80);
        v139  = *(void *)(a2 + 72);
        uint64_t v133 = *(void *)(a2 + 96);
        uint64_t v135 = *(void *)(a2 + 88);
        uint64_t v129 = *(void *)(a2 + 112);
        uint64_t v131 = *(void *)(a2 + 104);
        v125  = *(void *)(a2 + 128);
        uint64_t v127 = *(void *)(a2 + 120);
        uint64_t v121 = *(void *)(a2 + 144);
        v123  = *(void *)(a2 + 136);
        uint64_t v90 = *(void *)(a2 + 152);
        uint64_t v91 = *(void *)(a2 + 160);
        uint64_t v92 = *(void *)(a2 + 168);
        uint64_t v93 = *(void *)(a2 + 176);
        uint64_t v94 = *(void *)(a2 + 184);
        uint64_t v95 = *(void *)(a2 + 192);
        uint64_t v96 = *(void *)(a2 + 200);
        uint64_t v97 = *(void *)(a2 + 208);
        uint64_t v98 = *(void *)(a2 + 216);
        uint64_t v99 = *(void *)(a2 + 224);
        v100  = *(void *)(a2 + 232);
        uint64_t v101 = *(void *)(a2 + 240);
        uint64_t v102 = *(void *)(a2 + 248);
        uint64_t v103 = *(void *)(a2 + 256);
        uint64_t v104 = *(void *)(a2 + 264);
        v105  = *(void *)(a2 + 272);
        v106  = *(void *)(a2 + 280);
        uint64_t v107 = *(void *)(a2 + 288);
        v108  = *(void *)(a2 + 296);
        uint64_t v109 = *(void *)(a2 + 304);
        uint64_t v110 = *(void *)(a2 + 312);
        v111  = *(void *)(a2 + 320);
        v112  = *(void *)(a2 + 328);
        uint64_t v113 = *(void *)(a2 + 336);
        uint64_t v114 = *(void *)(a2 + 344);
        v115  = *(void *)(a2 + 352);
        char v116 = *(_BYTE *)(a2 + 360);
        char v117 = *(_BYTE *)(a2 + 361);
        uint64_t v9 = *(void *)(a2 + 64);
        uint64_t v11 = *(void *)(a2 + 8);
        uint64_t v10 = *(void *)a2;
        uint64_t v12 = *(void *)a2;
        uint64_t v14 = *(void *)(a2 + 24);
        uint64_t v13 = *(void *)(a2 + 16);
        uint64_t v15 = *(void *)(a2 + 32);
        uint64_t v16 = *(void *)(a2 + 40);
        uint64_t v17 = *(void *)(a2 + 48);
        unint64_t v18 = *(void *)(a2 + 56);
        sub_100107584( v12,  v11,  v13,  v14,  v15,  v16,  v17,  v18,  v9,  v139,  v137,  v135,  v133,  v131,  v129,  v127,  v125,  v123,  v121,  v90,  v91,  v92,  v93,  v94,  v95,  v96,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  v104,  v105,  v106,  v107,  v108,  v109,  v110,  v111,  v112,  v113,  v114,  v115,  v116,  v117);
        *(void *)a1  = v10;
        *(void *)(a1 + 8)  = v11;
        *(void *)(a1 + 16)  = v13;
        *(void *)(a1 + 24)  = v14;
        *(void *)(a1 + 32)  = v15;
        *(void *)(a1 + 40)  = v16;
        *(void *)(a1 + 48)  = v17;
        *(void *)(a1 + 56)  = v18;
        *(void *)(a1 + 64)  = v9;
        *(void *)(a1 + 72)  = v139;
        *(void *)(a1 + 80)  = v137;
        *(void *)(a1 + 88)  = v135;
        *(void *)(a1 + 96)  = v133;
        *(void *)(a1 + 104)  = v131;
        *(void *)(a1 + 112)  = v129;
        *(void *)(a1 + 120)  = v127;
        *(void *)(a1 + 128)  = v125;
        *(void *)(a1 + 136)  = v123;
        *(void *)(a1 + 144)  = v121;
        *(void *)(a1 + 152)  = v90;
        *(void *)(a1 + 160)  = v91;
        *(void *)(a1 + 168)  = v92;
        *(void *)(a1 + 176)  = v93;
        *(void *)(a1 + 184)  = v94;
        *(void *)(a1 + 192)  = v95;
        *(void *)(a1 + 200)  = v96;
        *(void *)(a1 + 208)  = v97;
        *(void *)(a1 + 216)  = v98;
        *(void *)(a1 + 224)  = v99;
        *(void *)(a1 + 232)  = v100;
        *(void *)(a1 + 240)  = v101;
        *(void *)(a1 + 248)  = v102;
        *(void *)(a1 + 256)  = v103;
        *(void *)(a1 + 264)  = v104;
        *(void *)(a1 + 272)  = v105;
        *(void *)(a1 + 280)  = v106;
        *(void *)(a1 + 288)  = v107;
        *(void *)(a1 + 296)  = v108;
        *(void *)(a1 + 304)  = v109;
        *(void *)(a1 + 312)  = v110;
        *(void *)(a1 + 320)  = v111;
        *(void *)(a1 + 328)  = v112;
        *(void *)(a1 + 336)  = v113;
        *(void *)(a1 + 344)  = v114;
        *(void *)(a1 + 352)  = v115;
        *(_BYTE *)(a1 + 360)  = v116;
        *(_BYTE *)(a1 + 361)  = v117;
        unint64_t v19 = a1;
        uint64_t v20 = v119;
        uint64_t v21 = 0LL;
LABEL_19:
        swift_storeEnumTagMultiPayload(v19, v20, v21);
        return a1;
    }

    memcpy((void *)a1, (const void *)a2, *(void *)(v5 + 64));
  }

  return a1;
}

uint64_t sub_100109F08( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6, char a7)
{
  switch(a7)
  {
    case 5:
      return sub_1000BA5AC(a2, a3, a4, a5, a6);
    case 4:
      return swift_bridgeObjectRetain(a3);
    case 1:
      return swift_bridgeObjectRetain(result);
  }

  return result;
}

void destroy for DriverEvent(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      sub_100057D9C( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(_BYTE *)(a1 + 40),  *(_BYTE *)(a1 + 41));
      break;
    case 1:
      uint64_t v4 = type metadata accessor for DriverEvent.AWDL(0LL);
      switch(swift_getEnumCaseMultiPayload(a1, v4))
      {
        case 1u:
          sub_100057AA0(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
          uint64_t v5 = a1 + *(int *)(sub_100002274(&qword_100405DE0) + 48);
          int v6 = (int *)type metadata accessor for AWDLActionFrame.Header(0LL);
          uint64_t v7 = v5 + v6[8];
          uint64_t v8 = type metadata accessor for DispatchTimeInterval(0LL);
          uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
          v9(v7, v8);
          v9(v5 + v6[9], v8);
          uint64_t v10 = *(void *)(v5 + v6[16]);
          goto LABEL_11;
        case 2u:
          swift_bridgeObjectRelease(*(void *)(a1 + 80));
          swift_bridgeObjectRelease(*(void *)(a1 + 88));
          swift_bridgeObjectRelease(*(void *)(a1 + 96));
          uint64_t v10 = *(void *)(a1 + 104);
          goto LABEL_11;
        case 3u:
          uint64_t v11 = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
          uint64_t v12 = a1 + *(int *)(v11 + 80);
          uint64_t v13 = type metadata accessor for DispatchTimeInterval(0LL);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(v12, v13);
          swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(v11 + 144) + 8));
          uint64_t v14 = (void *)(a1 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0LL) + 20));
          swift_bridgeObjectRelease(v14[27]);
          swift_bridgeObjectRelease(v14[28]);
          swift_bridgeObjectRelease(v14[29]);
          swift_bridgeObjectRelease(v14[30]);
          swift_bridgeObjectRelease(v14[31]);
          swift_bridgeObjectRelease(v14[32]);
          swift_bridgeObjectRelease(v14[33]);
          swift_bridgeObjectRelease(v14[34]);
          swift_bridgeObjectRelease(v14[35]);
          swift_bridgeObjectRelease(v14[36]);
          swift_bridgeObjectRelease(v14[37]);
          swift_bridgeObjectRelease(v14[38]);
          swift_bridgeObjectRelease(v14[39]);
          swift_bridgeObjectRelease(v14[40]);
          swift_bridgeObjectRelease(v14[41]);
          swift_bridgeObjectRelease(v14[42]);
          swift_bridgeObjectRelease(v14[43]);
          uint64_t v10 = v14[44];
LABEL_11:
          swift_bridgeObjectRelease(v10);
          break;
        case 6u:
          sub_100055CE4( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(_BYTE *)(a1 + 32));
          break;
        case 8u:

          break;
        case 9u:
          uint64_t v15 = type metadata accessor for DispatchTimeInterval(0LL);
          uint64_t v26 = *(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL);
          v26(a1, v15);
          uint64_t v16 = a1 + *(int *)(type metadata accessor for AWDLIdleActivity(0LL) + 20);
          v26(v16, v15);
          break;
        default:
          return;
      }

      break;
    case 0:
      __int16 v25 = *(_WORD *)(a1 + 360);
      __int128 v23 = *(_OWORD *)(a1 + 320);
      __int128 v24 = *(_OWORD *)(a1 + 336);
      __int128 v21 = *(_OWORD *)(a1 + 288);
      __int128 v22 = *(_OWORD *)(a1 + 304);
      __int128 v19 = *(_OWORD *)(a1 + 256);
      __int128 v20 = *(_OWORD *)(a1 + 272);
      __int128 v17 = *(_OWORD *)(a1 + 224);
      __int128 v18 = *(_OWORD *)(a1 + 240);
      sub_1000578CC( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  *(void *)(a1 + 152),  *(void *)(a1 + 160),  *(void *)(a1 + 168),  *(void *)(a1 + 176),  *(void *)(a1 + 184),  *(void *)(a1 + 192),  *(void *)(a1 + 200),  *(void *)(a1 + 208),  *(void *)(a1 + 216),  v17,  *((uint64_t *)&v17 + 1),  v18,  *((uint64_t *)&v18 + 1),  v19,  *((uint64_t *)&v19 + 1),  v20,  *((uint64_t *)&v20 + 1),  v21,  *((uint64_t *)&v21 + 1),  v22,  *((uint64_t *)&v22 + 1),  v23,  *((uint64_t *)&v23 + 1),  v24,  *((uint64_t *)&v24 + 1),  *(void *)(a1 + 352),  v25,  SHIBYTE(v25));
      break;
  }

uint64_t initializeWithCopy for DriverEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v11 = *(void *)a2;
      uint64_t v12 = *(void *)(a2 + 8);
      uint64_t v13 = *(void *)(a2 + 16);
      uint64_t v14 = *(void *)(a2 + 24);
      uint64_t v15 = *(void *)(a2 + 32);
      char v16 = *(_BYTE *)(a2 + 41);
      unsigned __int8 v17 = *(_BYTE *)(a2 + 40);
      sub_100109F08(v11, v12, v13, v14, v15, v17, v16);
      *(void *)a1  = v11;
      *(void *)(a1 + 8)  = v12;
      *(void *)(a1 + 16)  = v13;
      *(void *)(a1 + 24)  = v14;
      *(void *)(a1 + 32)  = v15;
      *(_BYTE *)(a1 + 40)  = v17;
      *(_BYTE *)(a1 + 41)  = v16;
      uint64_t v8 = a1;
      uint64_t v9 = v3;
      uint64_t v10 = 2LL;
      goto LABEL_17;
    case 1:
      uint64_t v18 = type metadata accessor for DriverEvent.AWDL(0LL);
      switch(swift_getEnumCaseMultiPayload(a2, v18))
      {
        case 1u:
          *(_BYTE *)a1  = *(_BYTE *)a2;
          uint64_t v19 = *(void *)(a2 + 8);
          uint64_t v20 = *(void *)(a2 + 16);
          uint64_t v21 = *(void *)(a2 + 24);
          sub_10005852C(v19, v20, v21);
          *(void *)(a1 + 8)  = v19;
          *(void *)(a1 + 16)  = v20;
          *(void *)(a1 + 24)  = v21;
          uint64_t v22 = *(int *)(sub_100002274(&qword_100405DE0) + 48);
          uint64_t v23 = a1 + v22;
          uint64_t v24 = a2 + v22;
          *(_DWORD *)uint64_t v23 = *(_DWORD *)(a2 + v22);
          *(_WORD *)(v23 + 4)  = *(_WORD *)(a2 + v22 + 4);
          *(_DWORD *)(v23 + 6)  = *(_DWORD *)(a2 + v22 + 6);
          *(_WORD *)(v23 + 10)  = *(_WORD *)(a2 + v22 + 10);
          *(_DWORD *)(v23 + 12)  = *(_DWORD *)(a2 + v22 + 12);
          *(_WORD *)(v23 + 16)  = *(_WORD *)(a2 + v22 + 16);
          *(_DWORD *)(v23 + 20)  = *(_DWORD *)(a2 + v22 + 20);
          __int16 v25 = (int *)type metadata accessor for AWDLActionFrame.Header(0LL);
          uint64_t v26 = v25[8];
          uint64_t v27 = v23 + v26;
          uint64_t v28 = v24 + v26;
          uint64_t v29 = type metadata accessor for DispatchTimeInterval(0LL);
          uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16LL);
          v30(v27, v28, v29);
          v30(v23 + v25[9], v24 + v25[9], v29);
          *(_DWORD *)(v23 + v25[10])  = *(_DWORD *)(v24 + v25[10]);
          *(_DWORD *)(v23 + v25[11])  = *(_DWORD *)(v24 + v25[11]);
          *(void *)(v23 + v25[12])  = *(void *)(v24 + v25[12]);
          *(_DWORD *)(v23 + v25[13])  = *(_DWORD *)(v24 + v25[13]);
          *(void *)(v23 + v25[14])  = *(void *)(v24 + v25[14]);
          *(_DWORD *)(v23 + v25[15])  = *(_DWORD *)(v24 + v25[15]);
          uint64_t v31 = v25[16];
          uint64_t v32 = *(void *)(v24 + v31);
          *(void *)(v23 + v31)  = v32;
          swift_bridgeObjectRetain(v32);
          uint64_t v33 = a1;
          uint64_t v34 = v18;
          uint64_t v35 = 1LL;
          goto LABEL_15;
        case 2u:
          __int128 v36 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1  = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16)  = v36;
          *(void *)(a1 + 32)  = *(void *)(a2 + 32);
          *(_WORD *)(a1 + 40)  = *(_WORD *)(a2 + 40);
          *(_BYTE *)(a1 + 42)  = *(_BYTE *)(a2 + 42);
          *(_WORD *)(a1 + 43)  = *(_WORD *)(a2 + 43);
          *(_DWORD *)(a1 + 48)  = *(_DWORD *)(a2 + 48);
          *(_BYTE *)(a1 + 52)  = *(_BYTE *)(a2 + 52);
          *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
          *(void *)(a1 + 60)  = *(void *)(a2 + 60);
          *(_DWORD *)(a1 + 68)  = *(_DWORD *)(a2 + 68);
          *(_BYTE *)(a1 + 72)  = *(_BYTE *)(a2 + 72);
          uint64_t v37 = *(void *)(a2 + 80);
          uint64_t v38 = *(void *)(a2 + 88);
          *(void *)(a1 + 80)  = v37;
          *(void *)(a1 + 88)  = v38;
          uint64_t v40 = *(void *)(a2 + 96);
          uint64_t v39 = *(void *)(a2 + 104);
          *(void *)(a1 + 96)  = v40;
          *(void *)(a1 + 104)  = v39;
          swift_bridgeObjectRetain(v37);
          swift_bridgeObjectRetain(v38);
          swift_bridgeObjectRetain(v40);
          swift_bridgeObjectRetain(v39);
          uint64_t v33 = a1;
          uint64_t v34 = v18;
          uint64_t v35 = 2LL;
          goto LABEL_15;
        case 3u:
          *(_BYTE *)a1  = *(_BYTE *)a2;
          *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
          *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
          *(void *)(a1 + 24)  = *(void *)(a2 + 24);
          *(_DWORD *)(a1 + 32)  = *(_DWORD *)(a2 + 32);
          *(_WORD *)(a1 + 36)  = *(_WORD *)(a2 + 36);
          *(_DWORD *)(a1 + 40)  = *(_DWORD *)(a2 + 40);
          *(_WORD *)(a1 + 44)  = *(_WORD *)(a2 + 44);
          int v41 = *(_DWORD *)(a2 + 48);
          *(_WORD *)(a1 + 52)  = *(_WORD *)(a2 + 52);
          *(_DWORD *)(a1 + 48)  = v41;
          *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
          *(_WORD *)(a1 + 60)  = *(_WORD *)(a2 + 60);
          __int128 v42 = *(_OWORD *)(a2 + 80);
          *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(a1 + 80)  = v42;
          *(_OWORD *)(a1 + 96)  = *(_OWORD *)(a2 + 96);
          *(_BYTE *)(a1 + 112)  = *(_BYTE *)(a2 + 112);
          uint64_t v43 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
          uint64_t v44 = v43[20];
          uint64_t v45 = a1 + v44;
          uint64_t v46 = a2 + v44;
          uint64_t v47 = type metadata accessor for DispatchTimeInterval(0LL);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 16LL))(v45, v46, v47);
          *(void *)(a1 + v43[21])  = *(void *)(a2 + v43[21]);
          *(void *)(a1 + v43[22])  = *(void *)(a2 + v43[22]);
          *(void *)(a1 + v43[23])  = *(void *)(a2 + v43[23]);
          *(void *)(a1 + v43[24])  = *(void *)(a2 + v43[24]);
          *(void *)(a1 + v43[25])  = *(void *)(a2 + v43[25]);
          *(void *)(a1 + v43[26])  = *(void *)(a2 + v43[26]);
          *(void *)(a1 + v43[27])  = *(void *)(a2 + v43[27]);
          *(void *)(a1 + v43[28])  = *(void *)(a2 + v43[28]);
          *(_WORD *)(a1 + v43[29])  = *(_WORD *)(a2 + v43[29]);
          *(_BYTE *)(a1 + v43[30])  = *(_BYTE *)(a2 + v43[30]);
          *(_BYTE *)(a1 + v43[31])  = *(_BYTE *)(a2 + v43[31]);
          *(_BYTE *)(a1 + v43[32])  = *(_BYTE *)(a2 + v43[32]);
          *(_BYTE *)(a1 + v43[33])  = *(_BYTE *)(a2 + v43[33]);
          *(_BYTE *)(a1 + v43[34])  = *(_BYTE *)(a2 + v43[34]);
          *(_BYTE *)(a1 + v43[35])  = *(_BYTE *)(a2 + v43[35]);
          uint64_t v48 = v43[36];
          uint64_t v49 = (void *)(a1 + v48);
          uint64_t v50 = (void *)(a2 + v48);
          v137  = v50[1];
          *uint64_t v49 = *v50;
          v49[1]  = v137;
          *(_BYTE *)(a1 + v43[37])  = *(_BYTE *)(a2 + v43[37]);
          *(void *)(a1 + v43[38])  = *(void *)(a2 + v43[38]);
          *(void *)(a1 + v43[39])  = *(void *)(a2 + v43[39]);
          *(void *)(a1 + v43[40])  = *(void *)(a2 + v43[40]);
          *(void *)(a1 + v43[41])  = *(void *)(a2 + v43[41]);
          *(void *)(a1 + v43[42])  = *(void *)(a2 + v43[42]);
          *(void *)(a1 + v43[43])  = *(void *)(a2 + v43[43]);
          uint64_t v51 = *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0LL) + 20);
          uint64_t v52 = a1 + v51;
          uint64_t v53 = a2 + v51;
          __int128 v54 = *(_OWORD *)(v53 + 176);
          *(_OWORD *)(v52 + 160)  = *(_OWORD *)(v53 + 160);
          *(_OWORD *)(v52 + 176)  = v54;
          *(_OWORD *)(v52 + 192)  = *(_OWORD *)(v53 + 192);
          __int128 v55 = *(_OWORD *)(v53 + 112);
          *(_OWORD *)(v52 + 96)  = *(_OWORD *)(v53 + 96);
          *(_OWORD *)(v52 + 112)  = v55;
          __int128 v56 = *(_OWORD *)(v53 + 144);
          *(_OWORD *)(v52 + 128)  = *(_OWORD *)(v53 + 128);
          *(_OWORD *)(v52 + 144)  = v56;
          __int128 v57 = *(_OWORD *)(v53 + 48);
          *(_OWORD *)(v52 + 32)  = *(_OWORD *)(v53 + 32);
          *(_OWORD *)(v52 + 48)  = v57;
          __int128 v58 = *(_OWORD *)(v53 + 80);
          *(_OWORD *)(v52 + 64)  = *(_OWORD *)(v53 + 64);
          *(_OWORD *)(v52 + 80)  = v58;
          __int128 v59 = *(_OWORD *)(v53 + 16);
          *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
          *(_OWORD *)(v52 + 16)  = v59;
          uint64_t v60 = *(void *)(v53 + 216);
          *(void *)(v52 + 208)  = *(void *)(v53 + 208);
          *(void *)(v52 + 216)  = v60;
          uint64_t v61 = *(void *)(v53 + 224);
          uint64_t v62 = *(void *)(v53 + 232);
          *(void *)(v52 + 224)  = v61;
          *(void *)(v52 + 232)  = v62;
          uint64_t v63 = *(void *)(v53 + 240);
          uint64_t v64 = *(void *)(v53 + 248);
          *(void *)(v52 + 240)  = v63;
          *(void *)(v52 + 248)  = v64;
          uint64_t v117 = v3;
          uint64_t v66 = *(void *)(v53 + 256);
          uint64_t v65 = *(void *)(v53 + 264);
          *(void *)(v52 + 256)  = v66;
          *(void *)(v52 + 264)  = v65;
          uint64_t v67 = *(void *)(v53 + 272);
          uint64_t v116 = *(void *)(v53 + 280);
          *(void *)(v52 + 272)  = v67;
          *(void *)(v52 + 280)  = v116;
          v119  = *(void *)(v53 + 288);
          uint64_t v121 = *(void *)(v53 + 296);
          *(void *)(v52 + 288)  = v119;
          *(void *)(v52 + 296)  = v121;
          v123  = *(void *)(v53 + 304);
          v125  = *(void *)(v53 + 312);
          *(void *)(v52 + 304)  = v123;
          *(void *)(v52 + 312)  = v125;
          uint64_t v127 = *(void *)(v53 + 320);
          uint64_t v129 = *(void *)(v53 + 328);
          *(void *)(v52 + 320)  = v127;
          *(void *)(v52 + 328)  = v129;
          uint64_t v131 = *(void *)(v53 + 336);
          uint64_t v133 = *(void *)(v53 + 344);
          *(void *)(v52 + 336)  = v131;
          *(void *)(v52 + 344)  = v133;
          uint64_t v135 = *(void *)(v53 + 352);
          *(void *)(v52 + 352)  = v135;
          swift_bridgeObjectRetain(v137);
          swift_bridgeObjectRetain(v60);
          swift_bridgeObjectRetain(v61);
          swift_bridgeObjectRetain(v62);
          swift_bridgeObjectRetain(v63);
          swift_bridgeObjectRetain(v64);
          uint64_t v68 = v66;
          uint64_t v3 = v117;
          swift_bridgeObjectRetain(v68);
          swift_bridgeObjectRetain(v65);
          swift_bridgeObjectRetain(v67);
          swift_bridgeObjectRetain(v116);
          swift_bridgeObjectRetain(v119);
          swift_bridgeObjectRetain(v121);
          swift_bridgeObjectRetain(v123);
          swift_bridgeObjectRetain(v125);
          swift_bridgeObjectRetain(v127);
          swift_bridgeObjectRetain(v129);
          swift_bridgeObjectRetain(v131);
          swift_bridgeObjectRetain(v133);
          swift_bridgeObjectRetain(v135);
          uint64_t v33 = a1;
          uint64_t v34 = v18;
          uint64_t v35 = 3LL;
          goto LABEL_15;
        case 6u:
          uint64_t v69 = *(void *)a2;
          uint64_t v70 = *(void *)(a2 + 8);
          uint64_t v71 = *(void *)(a2 + 16);
          uint64_t v72 = *(void *)(a2 + 24);
          char v73 = *(_BYTE *)(a2 + 32);
          sub_100055CB8(v69, v70, v71, v72, v73);
          *(void *)a1  = v69;
          *(void *)(a1 + 8)  = v70;
          *(void *)(a1 + 16)  = v71;
          *(void *)(a1 + 24)  = v72;
          *(_BYTE *)(a1 + 32)  = v73;
          uint64_t v33 = a1;
          uint64_t v34 = v18;
          uint64_t v35 = 6LL;
          goto LABEL_15;
        case 8u:
          uint64_t v74 = *(void **)a2;
          *(void *)a1  = *(void *)a2;
          *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
          id v75 = v74;
          uint64_t v33 = a1;
          uint64_t v34 = v18;
          uint64_t v35 = 8LL;
          goto LABEL_15;
        case 9u:
          uint64_t v76 = type metadata accessor for DispatchTimeInterval(0LL);
          uint64_t v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 16LL);
          v77(a1, a2, v76);
          uint64_t v78 = type metadata accessor for AWDLIdleActivity(0LL);
          v77(a1 + *(int *)(v78 + 20), a2 + *(int *)(v78 + 20), v76);
          uint64_t v33 = a1;
          uint64_t v34 = v18;
          uint64_t v35 = 9LL;
LABEL_15:
          swift_storeEnumTagMultiPayload(v33, v34, v35);
          break;
        default:
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v18 - 8) + 64LL));
          break;
      }

      uint64_t v8 = a1;
      uint64_t v9 = v3;
      uint64_t v10 = 1LL;
      goto LABEL_17;
    case 0:
      uint64_t v109 = *(void *)(a2 + 8);
      uint64_t v110 = *(void *)a2;
      uint64_t v107 = *(void *)(a2 + 24);
      v108  = *(void *)(a2 + 16);
      v106  = *(void *)(a2 + 32);
      v105  = *(void *)(a2 + 40);
      uint64_t v104 = *(void *)(a2 + 48);
      v111  = *(void *)(a2 + 56);
      uint64_t v134 = *(void *)(a2 + 80);
      uint64_t v136 = *(void *)(a2 + 72);
      uint64_t v130 = *(void *)(a2 + 96);
      v132  = *(void *)(a2 + 88);
      uint64_t v126 = *(void *)(a2 + 112);
      uint64_t v128 = *(void *)(a2 + 104);
      v122  = *(void *)(a2 + 128);
      uint64_t v124 = *(void *)(a2 + 120);
      v118  = *(void *)(a2 + 144);
      v120  = *(void *)(a2 + 136);
      uint64_t v80 = *(void *)(a2 + 152);
      uint64_t v81 = *(void *)(a2 + 160);
      uint64_t v82 = *(void *)(a2 + 168);
      uint64_t v83 = *(void *)(a2 + 176);
      uint64_t v84 = *(void *)(a2 + 184);
      uint64_t v85 = *(void *)(a2 + 192);
      uint64_t v86 = *(void *)(a2 + 200);
      uint64_t v87 = *(void *)(a2 + 208);
      uint64_t v88 = *(void *)(a2 + 216);
      v89  = *(void *)(a2 + 224);
      uint64_t v90 = *(void *)(a2 + 232);
      uint64_t v91 = *(void *)(a2 + 240);
      uint64_t v92 = *(void *)(a2 + 248);
      uint64_t v93 = *(void *)(a2 + 256);
      uint64_t v94 = *(void *)(a2 + 264);
      uint64_t v95 = *(void *)(a2 + 272);
      uint64_t v96 = *(void *)(a2 + 280);
      uint64_t v97 = *(void *)(a2 + 288);
      uint64_t v98 = *(void *)(a2 + 296);
      uint64_t v99 = *(void *)(a2 + 304);
      v100  = *(void *)(a2 + 312);
      uint64_t v101 = *(void *)(a2 + 320);
      uint64_t v102 = *(void *)(a2 + 328);
      uint64_t v103 = *(void *)(a2 + 336);
      v112  = *(void *)(a2 + 344);
      uint64_t v113 = *(void *)(a2 + 352);
      char v114 = *(_BYTE *)(a2 + 360);
      v115  = *(_BYTE *)(a2 + 361);
      uint64_t v7 = *(void *)(a2 + 64);
      sub_100107584( v110,  v109,  v108,  v107,  v106,  v105,  v104,  v111,  v7,  v136,  v134,  v132,  v130,  v128,  v126,  v124,  v122,  v120,  v118,  v80,  v81,  v82,  v83,  v84,  v85,  v86,  v87,  v88,  v89,  v90,  v91,  v92,  v93,  v94,  v95,  v96,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  v112,  v113,  v114,  v115);
      *(void *)a1  = v110;
      *(void *)(a1 + 8)  = v109;
      *(void *)(a1 + 16)  = v108;
      *(void *)(a1 + 24)  = v107;
      *(void *)(a1 + 32)  = v106;
      *(void *)(a1 + 40)  = v105;
      *(void *)(a1 + 48)  = v104;
      *(void *)(a1 + 56)  = v111;
      *(void *)(a1 + 64)  = v7;
      *(void *)(a1 + 72)  = v136;
      *(void *)(a1 + 80)  = v134;
      *(void *)(a1 + 88)  = v132;
      *(void *)(a1 + 96)  = v130;
      *(void *)(a1 + 104)  = v128;
      *(void *)(a1 + 112)  = v126;
      *(void *)(a1 + 120)  = v124;
      *(void *)(a1 + 128)  = v122;
      *(void *)(a1 + 136)  = v120;
      *(void *)(a1 + 144)  = v118;
      *(void *)(a1 + 152)  = v80;
      *(void *)(a1 + 160)  = v81;
      *(void *)(a1 + 168)  = v82;
      *(void *)(a1 + 176)  = v83;
      *(void *)(a1 + 184)  = v84;
      *(void *)(a1 + 192)  = v85;
      *(void *)(a1 + 200)  = v86;
      *(void *)(a1 + 208)  = v87;
      *(void *)(a1 + 216)  = v88;
      *(void *)(a1 + 224)  = v89;
      *(void *)(a1 + 232)  = v90;
      *(void *)(a1 + 240)  = v91;
      *(void *)(a1 + 248)  = v92;
      *(void *)(a1 + 256)  = v93;
      *(void *)(a1 + 264)  = v94;
      *(void *)(a1 + 272)  = v95;
      *(void *)(a1 + 280)  = v96;
      *(void *)(a1 + 288)  = v97;
      *(void *)(a1 + 296)  = v98;
      *(void *)(a1 + 304)  = v99;
      *(void *)(a1 + 312)  = v100;
      *(void *)(a1 + 320)  = v101;
      *(void *)(a1 + 328)  = v102;
      *(void *)(a1 + 336)  = v103;
      *(void *)(a1 + 344)  = v112;
      *(void *)(a1 + 352)  = v113;
      *(_BYTE *)(a1 + 360)  = v114;
      *(_BYTE *)(a1 + 361)  = v115;
      uint64_t v8 = a1;
      uint64_t v9 = v3;
      uint64_t v10 = 0LL;
LABEL_17:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      return a1;
  }

  memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v3 - 8) + 64LL));
  return a1;
}

uint64_t assignWithCopy for DriverEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10005802C(a1, type metadata accessor for DriverEvent);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    switch(EnumCaseMultiPayload)
    {
      case 2:
        uint64_t v11 = *(void *)a2;
        uint64_t v12 = *(void *)(a2 + 8);
        uint64_t v13 = *(void *)(a2 + 16);
        uint64_t v14 = *(void *)(a2 + 24);
        uint64_t v15 = *(void *)(a2 + 32);
        char v16 = *(_BYTE *)(a2 + 41);
        unsigned __int8 v17 = *(_BYTE *)(a2 + 40);
        sub_100109F08(v11, v12, v13, v14, v15, v17, v16);
        *(void *)a1  = v11;
        *(void *)(a1 + 8)  = v12;
        *(void *)(a1 + 16)  = v13;
        *(void *)(a1 + 24)  = v14;
        *(void *)(a1 + 32)  = v15;
        *(_BYTE *)(a1 + 40)  = v17;
        *(_BYTE *)(a1 + 41)  = v16;
        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 2LL;
        goto LABEL_18;
      case 1:
        uint64_t v18 = type metadata accessor for DriverEvent.AWDL(0LL);
        switch(swift_getEnumCaseMultiPayload(a2, v18))
        {
          case 1u:
            *(_BYTE *)a1  = *(_BYTE *)a2;
            uint64_t v19 = *(void *)(a2 + 8);
            uint64_t v20 = *(void *)(a2 + 16);
            uint64_t v21 = *(void *)(a2 + 24);
            sub_10005852C(v19, v20, v21);
            *(void *)(a1 + 8)  = v19;
            *(void *)(a1 + 16)  = v20;
            *(void *)(a1 + 24)  = v21;
            uint64_t v22 = *(int *)(sub_100002274(&qword_100405DE0) + 48);
            uint64_t v23 = a1 + v22;
            uint64_t v24 = a2 + v22;
            LODWORD(v22)  = *(_DWORD *)(a2 + v22);
            *(_WORD *)(v23 + 4)  = *(_WORD *)(v24 + 4);
            *(_DWORD *)uint64_t v23 = v22;
            LOWORD(v22)  = *(_WORD *)(v24 + 10);
            *(_DWORD *)(v23 + 6)  = *(_DWORD *)(v24 + 6);
            *(_WORD *)(v23 + 10)  = v22;
            LOWORD(v22)  = *(_WORD *)(v24 + 16);
            *(_DWORD *)(v23 + 12)  = *(_DWORD *)(v24 + 12);
            *(_WORD *)(v23 + 16)  = v22;
            *(_DWORD *)(v23 + 20)  = *(_DWORD *)(v24 + 20);
            __int16 v25 = (int *)type metadata accessor for AWDLActionFrame.Header(0LL);
            uint64_t v26 = v25[8];
            uint64_t v27 = v23 + v26;
            uint64_t v28 = v24 + v26;
            uint64_t v29 = type metadata accessor for DispatchTimeInterval(0LL);
            uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16LL);
            v30(v27, v28, v29);
            v30(v23 + v25[9], v24 + v25[9], v29);
            *(_DWORD *)(v23 + v25[10])  = *(_DWORD *)(v24 + v25[10]);
            *(_DWORD *)(v23 + v25[11])  = *(_DWORD *)(v24 + v25[11]);
            *(void *)(v23 + v25[12])  = *(void *)(v24 + v25[12]);
            *(_DWORD *)(v23 + v25[13])  = *(_DWORD *)(v24 + v25[13]);
            *(void *)(v23 + v25[14])  = *(void *)(v24 + v25[14]);
            *(_DWORD *)(v23 + v25[15])  = *(_DWORD *)(v24 + v25[15]);
            uint64_t v31 = v25[16];
            uint64_t v32 = *(void *)(v24 + v31);
            *(void *)(v23 + v31)  = v32;
            swift_bridgeObjectRetain(v32);
            uint64_t v33 = a1;
            uint64_t v34 = v18;
            uint64_t v35 = 1LL;
            goto LABEL_16;
          case 2u:
            *(void *)a1  = *(void *)a2;
            *(void *)(a1 + 8)  = *(void *)(a2 + 8);
            *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
            *(_DWORD *)(a1 + 20)  = *(_DWORD *)(a2 + 20);
            *(_DWORD *)(a1 + 24)  = *(_DWORD *)(a2 + 24);
            *(_DWORD *)(a1 + 28)  = *(_DWORD *)(a2 + 28);
            *(_WORD *)(a1 + 32)  = *(_WORD *)(a2 + 32);
            *(_WORD *)(a1 + 34)  = *(_WORD *)(a2 + 34);
            *(_WORD *)(a1 + 36)  = *(_WORD *)(a2 + 36);
            *(_WORD *)(a1 + 38)  = *(_WORD *)(a2 + 38);
            *(_WORD *)(a1 + 40)  = *(_WORD *)(a2 + 40);
            *(_BYTE *)(a1 + 42)  = *(_BYTE *)(a2 + 42);
            *(_BYTE *)(a1 + 43)  = *(_BYTE *)(a2 + 43);
            *(_BYTE *)(a1 + 44)  = *(_BYTE *)(a2 + 44);
            *(_DWORD *)(a1 + 48)  = *(_DWORD *)(a2 + 48);
            *(_BYTE *)(a1 + 52)  = *(_BYTE *)(a2 + 52);
            *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
            *(_BYTE *)(a1 + 60)  = *(_BYTE *)(a2 + 60);
            *(_BYTE *)(a1 + 61)  = *(_BYTE *)(a2 + 61);
            *(_BYTE *)(a1 + 62)  = *(_BYTE *)(a2 + 62);
            *(_BYTE *)(a1 + 63)  = *(_BYTE *)(a2 + 63);
            *(_BYTE *)(a1 + 64)  = *(_BYTE *)(a2 + 64);
            *(_BYTE *)(a1 + 65)  = *(_BYTE *)(a2 + 65);
            *(_BYTE *)(a1 + 66)  = *(_BYTE *)(a2 + 66);
            *(_BYTE *)(a1 + 67)  = *(_BYTE *)(a2 + 67);
            *(_BYTE *)(a1 + 68)  = *(_BYTE *)(a2 + 68);
            *(_BYTE *)(a1 + 69)  = *(_BYTE *)(a2 + 69);
            *(_BYTE *)(a1 + 70)  = *(_BYTE *)(a2 + 70);
            *(_BYTE *)(a1 + 71)  = *(_BYTE *)(a2 + 71);
            *(_BYTE *)(a1 + 72)  = *(_BYTE *)(a2 + 72);
            uint64_t v36 = *(void *)(a2 + 80);
            *(void *)(a1 + 80)  = v36;
            uint64_t v37 = *(void *)(a2 + 88);
            *(void *)(a1 + 88)  = v37;
            uint64_t v38 = *(void *)(a2 + 96);
            *(void *)(a1 + 96)  = v38;
            uint64_t v39 = *(void *)(a2 + 104);
            *(void *)(a1 + 104)  = v39;
            swift_bridgeObjectRetain(v36);
            swift_bridgeObjectRetain(v37);
            swift_bridgeObjectRetain(v38);
            swift_bridgeObjectRetain(v39);
            uint64_t v33 = a1;
            uint64_t v34 = v18;
            uint64_t v35 = 2LL;
            goto LABEL_16;
          case 3u:
            *(_BYTE *)a1  = *(_BYTE *)a2;
            *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
            *(void *)(a1 + 8)  = *(void *)(a2 + 8);
            *(void *)(a1 + 16)  = *(void *)(a2 + 16);
            *(void *)(a1 + 24)  = *(void *)(a2 + 24);
            int v40 = *(_DWORD *)(a2 + 32);
            *(_WORD *)(a1 + 36)  = *(_WORD *)(a2 + 36);
            *(_DWORD *)(a1 + 32)  = v40;
            int v41 = *(_DWORD *)(a2 + 40);
            *(_WORD *)(a1 + 44)  = *(_WORD *)(a2 + 44);
            *(_DWORD *)(a1 + 40)  = v41;
            int v42 = *(_DWORD *)(a2 + 48);
            *(_WORD *)(a1 + 52)  = *(_WORD *)(a2 + 52);
            *(_DWORD *)(a1 + 48)  = v42;
            int v43 = *(_DWORD *)(a2 + 56);
            *(_WORD *)(a1 + 60)  = *(_WORD *)(a2 + 60);
            *(_DWORD *)(a1 + 56)  = v43;
            *(void *)(a1 + 64)  = *(void *)(a2 + 64);
            *(void *)(a1 + 72)  = *(void *)(a2 + 72);
            *(void *)(a1 + 80)  = *(void *)(a2 + 80);
            *(void *)(a1 + 88)  = *(void *)(a2 + 88);
            *(void *)(a1 + 96)  = *(void *)(a2 + 96);
            *(void *)(a1 + 104)  = *(void *)(a2 + 104);
            *(_BYTE *)(a1 + 112)  = *(_BYTE *)(a2 + 112);
            uint64_t v44 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
            uint64_t v45 = v44[20];
            uint64_t v46 = a1 + v45;
            uint64_t v47 = a2 + v45;
            uint64_t v48 = type metadata accessor for DispatchTimeInterval(0LL);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 16LL))(v46, v47, v48);
            *(void *)(a1 + v44[21])  = *(void *)(a2 + v44[21]);
            *(void *)(a1 + v44[22])  = *(void *)(a2 + v44[22]);
            *(void *)(a1 + v44[23])  = *(void *)(a2 + v44[23]);
            *(void *)(a1 + v44[24])  = *(void *)(a2 + v44[24]);
            *(void *)(a1 + v44[25])  = *(void *)(a2 + v44[25]);
            *(void *)(a1 + v44[26])  = *(void *)(a2 + v44[26]);
            *(void *)(a1 + v44[27])  = *(void *)(a2 + v44[27]);
            *(void *)(a1 + v44[28])  = *(void *)(a2 + v44[28]);
            *(_WORD *)(a1 + v44[29])  = *(_WORD *)(a2 + v44[29]);
            *(_BYTE *)(a1 + v44[30])  = *(_BYTE *)(a2 + v44[30]);
            *(_BYTE *)(a1 + v44[31])  = *(_BYTE *)(a2 + v44[31]);
            *(_BYTE *)(a1 + v44[32])  = *(_BYTE *)(a2 + v44[32]);
            *(_BYTE *)(a1 + v44[33])  = *(_BYTE *)(a2 + v44[33]);
            *(_BYTE *)(a1 + v44[34])  = *(_BYTE *)(a2 + v44[34]);
            *(_BYTE *)(a1 + v44[35])  = *(_BYTE *)(a2 + v44[35]);
            uint64_t v49 = v44[36];
            uint64_t v50 = (void *)(a1 + v49);
            uint64_t v51 = (void *)(a2 + v49);
            *uint64_t v50 = *v51;
            v142  = v51[1];
            v50[1]  = v142;
            *(_BYTE *)(a1 + v44[37])  = *(_BYTE *)(a2 + v44[37]);
            *(void *)(a1 + v44[38])  = *(void *)(a2 + v44[38]);
            *(void *)(a1 + v44[39])  = *(void *)(a2 + v44[39]);
            *(void *)(a1 + v44[40])  = *(void *)(a2 + v44[40]);
            *(void *)(a1 + v44[41])  = *(void *)(a2 + v44[41]);
            *(void *)(a1 + v44[42])  = *(void *)(a2 + v44[42]);
            *(void *)(a1 + v44[43])  = *(void *)(a2 + v44[43]);
            uint64_t v52 = *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0LL) + 20);
            uint64_t v53 = a1 + v52;
            uint64_t v54 = a2 + v52;
            uint64_t v55 = *(void *)(v54 + 208);
            __int128 v57 = *(_OWORD *)(v54 + 176);
            __int128 v56 = *(_OWORD *)(v54 + 192);
            *(_OWORD *)(v53 + 160)  = *(_OWORD *)(v54 + 160);
            *(_OWORD *)(v53 + 176)  = v57;
            *(_OWORD *)(v53 + 192)  = v56;
            *(void *)(v53 + 208)  = v55;
            __int128 v59 = *(_OWORD *)(v54 + 128);
            __int128 v58 = *(_OWORD *)(v54 + 144);
            __int128 v60 = *(_OWORD *)(v54 + 112);
            *(_OWORD *)(v53 + 96)  = *(_OWORD *)(v54 + 96);
            *(_OWORD *)(v53 + 112)  = v60;
            *(_OWORD *)(v53 + 128)  = v59;
            *(_OWORD *)(v53 + 144)  = v58;
            __int128 v62 = *(_OWORD *)(v54 + 64);
            __int128 v61 = *(_OWORD *)(v54 + 80);
            __int128 v63 = *(_OWORD *)(v54 + 48);
            *(_OWORD *)(v53 + 32)  = *(_OWORD *)(v54 + 32);
            *(_OWORD *)(v53 + 48)  = v63;
            *(_OWORD *)(v53 + 64)  = v62;
            *(_OWORD *)(v53 + 80)  = v61;
            __int128 v64 = *(_OWORD *)(v54 + 16);
            *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
            *(_OWORD *)(v53 + 16)  = v64;
            uint64_t v65 = *(void *)(v54 + 216);
            *(void *)(v53 + 216)  = v65;
            uint64_t v66 = *(void *)(v54 + 224);
            *(void *)(v53 + 224)  = v66;
            uint64_t v67 = *(void *)(v54 + 232);
            *(void *)(v53 + 232)  = v67;
            uint64_t v68 = *(void *)(v54 + 240);
            *(void *)(v53 + 240)  = v68;
            uint64_t v124 = a3;
            uint64_t v69 = *(void *)(v54 + 248);
            *(void *)(v53 + 248)  = v69;
            v144  = v18;
            uint64_t v70 = *(void *)(v54 + 256);
            *(void *)(v53 + 256)  = v70;
            uint64_t v71 = *(void *)(v54 + 264);
            *(void *)(v53 + 264)  = v71;
            uint64_t v72 = *(void *)(v54 + 272);
            *(void *)(v53 + 272)  = v72;
            uint64_t v73 = *(void *)(v54 + 280);
            *(void *)(v53 + 280)  = v73;
            v123  = *(void *)(v54 + 288);
            *(void *)(v53 + 288)  = v123;
            uint64_t v126 = *(void *)(v54 + 296);
            *(void *)(v53 + 296)  = v126;
            uint64_t v128 = *(void *)(v54 + 304);
            *(void *)(v53 + 304)  = v128;
            uint64_t v130 = *(void *)(v54 + 312);
            *(void *)(v53 + 312)  = v130;
            v132  = *(void *)(v54 + 320);
            *(void *)(v53 + 320)  = v132;
            uint64_t v134 = *(void *)(v54 + 328);
            *(void *)(v53 + 328)  = v134;
            uint64_t v136 = *(void *)(v54 + 336);
            *(void *)(v53 + 336)  = v136;
            uint64_t v74 = *(void *)(v54 + 344);
            *(void *)(v53 + 344)  = v74;
            v138  = v74;
            v140  = *(void *)(v54 + 352);
            *(void *)(v53 + 352)  = v140;
            swift_bridgeObjectRetain(v142);
            swift_bridgeObjectRetain(v65);
            swift_bridgeObjectRetain(v66);
            swift_bridgeObjectRetain(v67);
            swift_bridgeObjectRetain(v68);
            uint64_t v75 = v69;
            a3  = v124;
            swift_bridgeObjectRetain(v75);
            swift_bridgeObjectRetain(v70);
            swift_bridgeObjectRetain(v71);
            swift_bridgeObjectRetain(v72);
            swift_bridgeObjectRetain(v73);
            swift_bridgeObjectRetain(v123);
            swift_bridgeObjectRetain(v126);
            swift_bridgeObjectRetain(v128);
            swift_bridgeObjectRetain(v130);
            swift_bridgeObjectRetain(v132);
            swift_bridgeObjectRetain(v134);
            swift_bridgeObjectRetain(v136);
            swift_bridgeObjectRetain(v138);
            swift_bridgeObjectRetain(v140);
            uint64_t v33 = a1;
            uint64_t v34 = v144;
            uint64_t v35 = 3LL;
            goto LABEL_16;
          case 6u:
            uint64_t v76 = *(void *)a2;
            uint64_t v77 = *(void *)(a2 + 8);
            uint64_t v78 = *(void *)(a2 + 16);
            uint64_t v79 = *(void *)(a2 + 24);
            char v80 = *(_BYTE *)(a2 + 32);
            sub_100055CB8(v76, v77, v78, v79, v80);
            *(void *)a1  = v76;
            *(void *)(a1 + 8)  = v77;
            *(void *)(a1 + 16)  = v78;
            *(void *)(a1 + 24)  = v79;
            *(_BYTE *)(a1 + 32)  = v80;
            uint64_t v33 = a1;
            uint64_t v34 = v18;
            uint64_t v35 = 6LL;
            goto LABEL_16;
          case 8u:
            uint64_t v81 = *(void **)a2;
            *(void *)a1  = *(void *)a2;
            *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
            id v82 = v81;
            uint64_t v33 = a1;
            uint64_t v34 = v18;
            uint64_t v35 = 8LL;
            goto LABEL_16;
          case 9u:
            uint64_t v83 = type metadata accessor for DispatchTimeInterval(0LL);
            uint64_t v84 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 16LL);
            v84(a1, a2, v83);
            uint64_t v85 = type metadata accessor for AWDLIdleActivity(0LL);
            v84(a1 + *(int *)(v85 + 20), a2 + *(int *)(v85 + 20), v83);
            uint64_t v33 = a1;
            uint64_t v34 = v18;
            uint64_t v35 = 9LL;
LABEL_16:
            swift_storeEnumTagMultiPayload(v33, v34, v35);
            break;
          default:
            memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v18 - 8) + 64LL));
            break;
        }

        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 1LL;
        goto LABEL_18;
      case 0:
        uint64_t v116 = *(void *)(a2 + 8);
        uint64_t v117 = *(void *)a2;
        uint64_t v114 = *(void *)(a2 + 24);
        v115  = *(void *)(a2 + 16);
        uint64_t v113 = *(void *)(a2 + 32);
        v112  = *(void *)(a2 + 40);
        v111  = *(void *)(a2 + 48);
        v118  = *(void *)(a2 + 56);
        v141  = *(void *)(a2 + 80);
        v143  = *(void *)(a2 + 72);
        v137  = *(void *)(a2 + 96);
        v139  = *(void *)(a2 + 88);
        uint64_t v133 = *(void *)(a2 + 112);
        uint64_t v135 = *(void *)(a2 + 104);
        uint64_t v129 = *(void *)(a2 + 128);
        uint64_t v131 = *(void *)(a2 + 120);
        v125  = *(void *)(a2 + 144);
        uint64_t v127 = *(void *)(a2 + 136);
        uint64_t v87 = *(void *)(a2 + 152);
        uint64_t v88 = *(void *)(a2 + 160);
        v89  = *(void *)(a2 + 168);
        uint64_t v90 = *(void *)(a2 + 176);
        uint64_t v91 = *(void *)(a2 + 184);
        uint64_t v92 = *(void *)(a2 + 192);
        uint64_t v93 = *(void *)(a2 + 200);
        uint64_t v94 = *(void *)(a2 + 208);
        uint64_t v95 = *(void *)(a2 + 216);
        uint64_t v96 = *(void *)(a2 + 224);
        uint64_t v97 = *(void *)(a2 + 232);
        uint64_t v98 = *(void *)(a2 + 240);
        uint64_t v99 = *(void *)(a2 + 248);
        v100  = *(void *)(a2 + 256);
        uint64_t v101 = *(void *)(a2 + 264);
        uint64_t v102 = *(void *)(a2 + 272);
        uint64_t v103 = *(void *)(a2 + 280);
        uint64_t v104 = *(void *)(a2 + 288);
        v105  = *(void *)(a2 + 296);
        v106  = *(void *)(a2 + 304);
        uint64_t v107 = *(void *)(a2 + 312);
        v108  = *(void *)(a2 + 320);
        uint64_t v109 = *(void *)(a2 + 328);
        uint64_t v110 = *(void *)(a2 + 336);
        v119  = *(void *)(a2 + 344);
        v120  = *(void *)(a2 + 352);
        char v121 = *(_BYTE *)(a2 + 360);
        v122  = *(_BYTE *)(a2 + 361);
        uint64_t v7 = *(void *)(a2 + 64);
        sub_100107584( v117,  v116,  v115,  v114,  v113,  v112,  v111,  v118,  v7,  v143,  v141,  v139,  v137,  v135,  v133,  v131,  v129,  v127,  v125,  v87,  v88,  v89,  v90,  v91,  v92,  v93,  v94,  v95,  v96,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  v104,  v105,  v106,  v107,  v108,  v109,  v110,  v119,  v120,  v121,  v122);
        *(void *)a1  = v117;
        *(void *)(a1 + 8)  = v116;
        *(void *)(a1 + 16)  = v115;
        *(void *)(a1 + 24)  = v114;
        *(void *)(a1 + 32)  = v113;
        *(void *)(a1 + 40)  = v112;
        *(void *)(a1 + 48)  = v111;
        *(void *)(a1 + 56)  = v118;
        *(void *)(a1 + 64)  = v7;
        *(void *)(a1 + 72)  = v143;
        *(void *)(a1 + 80)  = v141;
        *(void *)(a1 + 88)  = v139;
        *(void *)(a1 + 96)  = v137;
        *(void *)(a1 + 104)  = v135;
        *(void *)(a1 + 112)  = v133;
        *(void *)(a1 + 120)  = v131;
        *(void *)(a1 + 128)  = v129;
        *(void *)(a1 + 136)  = v127;
        *(void *)(a1 + 144)  = v125;
        *(void *)(a1 + 152)  = v87;
        *(void *)(a1 + 160)  = v88;
        *(void *)(a1 + 168)  = v89;
        *(void *)(a1 + 176)  = v90;
        *(void *)(a1 + 184)  = v91;
        *(void *)(a1 + 192)  = v92;
        *(void *)(a1 + 200)  = v93;
        *(void *)(a1 + 208)  = v94;
        *(void *)(a1 + 216)  = v95;
        *(void *)(a1 + 224)  = v96;
        *(void *)(a1 + 232)  = v97;
        *(void *)(a1 + 240)  = v98;
        *(void *)(a1 + 248)  = v99;
        *(void *)(a1 + 256)  = v100;
        *(void *)(a1 + 264)  = v101;
        *(void *)(a1 + 272)  = v102;
        *(void *)(a1 + 280)  = v103;
        *(void *)(a1 + 288)  = v104;
        *(void *)(a1 + 296)  = v105;
        *(void *)(a1 + 304)  = v106;
        *(void *)(a1 + 312)  = v107;
        *(void *)(a1 + 320)  = v108;
        *(void *)(a1 + 328)  = v109;
        *(void *)(a1 + 336)  = v110;
        *(void *)(a1 + 344)  = v119;
        *(void *)(a1 + 352)  = v120;
        *(_BYTE *)(a1 + 360)  = v121;
        *(_BYTE *)(a1 + 361)  = v122;
        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 0LL;
LABEL_18:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        return a1;
    }

    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

char *initializeWithTake for DriverEvent(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    uint64_t v6 = type metadata accessor for DriverEvent.AWDL(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    switch(EnumCaseMultiPayload)
    {
      case 9:
        uint64_t v18 = type metadata accessor for DispatchTimeInterval(0LL);
        uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32LL);
        v19(a1, a2, v18);
        uint64_t v20 = type metadata accessor for AWDLIdleActivity(0LL);
        v19(&a1[*(int *)(v20 + 20)], &a2[*(int *)(v20 + 20)], v18);
        swift_storeEnumTagMultiPayload(a1, v6, 9LL);
        break;
      case 3:
        *a1  = *a2;
        *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
        *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
        *((void *)a1 + 3)  = *((void *)a2 + 3);
        *((_DWORD *)a1 + 8)  = *((_DWORD *)a2 + 8);
        *((_WORD *)a1 + 18)  = *((_WORD *)a2 + 18);
        *((_DWORD *)a1 + 10)  = *((_DWORD *)a2 + 10);
        *((_WORD *)a1 + 22)  = *((_WORD *)a2 + 22);
        int v21 = *((_DWORD *)a2 + 12);
        *((_WORD *)a1 + 26)  = *((_WORD *)a2 + 26);
        *((_DWORD *)a1 + 12)  = v21;
        *((_DWORD *)a1 + 14)  = *((_DWORD *)a2 + 14);
        *((_WORD *)a1 + 30)  = *((_WORD *)a2 + 30);
        __int128 v22 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4)  = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5)  = v22;
        *((_OWORD *)a1 + 6)  = *((_OWORD *)a2 + 6);
        a1[112]  = a2[112];
        uint64_t v23 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
        uint64_t v24 = v23[20];
        __int16 v25 = &a1[v24];
        uint64_t v26 = &a2[v24];
        uint64_t v27 = type metadata accessor for DispatchTimeInterval(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32LL))(v25, v26, v27);
        *(void *)&a1[v23[21]]  = *(void *)&a2[v23[21]];
        *(void *)&a1[v23[22]]  = *(void *)&a2[v23[22]];
        *(void *)&a1[v23[23]]  = *(void *)&a2[v23[23]];
        *(void *)&a1[v23[24]]  = *(void *)&a2[v23[24]];
        *(void *)&a1[v23[25]]  = *(void *)&a2[v23[25]];
        *(void *)&a1[v23[26]]  = *(void *)&a2[v23[26]];
        *(void *)&a1[v23[27]]  = *(void *)&a2[v23[27]];
        *(void *)&a1[v23[28]]  = *(void *)&a2[v23[28]];
        *(_WORD *)&a1[v23[29]]  = *(_WORD *)&a2[v23[29]];
        a1[v23[30]]  = a2[v23[30]];
        a1[v23[31]]  = a2[v23[31]];
        a1[v23[32]]  = a2[v23[32]];
        a1[v23[33]]  = a2[v23[33]];
        a1[v23[34]]  = a2[v23[34]];
        a1[v23[35]]  = a2[v23[35]];
        *(_OWORD *)&a1[v23[36]]  = *(_OWORD *)&a2[v23[36]];
        a1[v23[37]]  = a2[v23[37]];
        *(void *)&a1[v23[38]]  = *(void *)&a2[v23[38]];
        *(void *)&a1[v23[39]]  = *(void *)&a2[v23[39]];
        *(void *)&a1[v23[40]]  = *(void *)&a2[v23[40]];
        *(void *)&a1[v23[41]]  = *(void *)&a2[v23[41]];
        *(void *)&a1[v23[42]]  = *(void *)&a2[v23[42]];
        *(void *)&a1[v23[43]]  = *(void *)&a2[v23[43]];
        uint64_t v28 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0LL);
        memcpy(&a1[*(int *)(v28 + 20)], &a2[*(int *)(v28 + 20)], 0x168uLL);
        swift_storeEnumTagMultiPayload(a1, v6, 3LL);
        break;
      case 1:
        __int128 v8 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1  = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1)  = v8;
        uint64_t v9 = *(int *)(sub_100002274(&qword_100405DE0) + 48);
        uint64_t v10 = &a1[v9];
        uint64_t v11 = &a2[v9];
        *(_DWORD *)uint64_t v10 = *(_DWORD *)&a2[v9];
        *((_WORD *)v10 + 2)  = *(_WORD *)&a2[v9 + 4];
        *(_DWORD *)(v10 + 6)  = *(_DWORD *)&a2[v9 + 6];
        *((_WORD *)v10 + 5)  = *(_WORD *)&a2[v9 + 10];
        *((_DWORD *)v10 + 3)  = *(_DWORD *)&a2[v9 + 12];
        *((_WORD *)v10 + 8)  = *(_WORD *)&a2[v9 + 16];
        *((_DWORD *)v10 + 5)  = *(_DWORD *)&a2[v9 + 20];
        uint64_t v12 = (int *)type metadata accessor for AWDLActionFrame.Header(0LL);
        uint64_t v13 = v12[8];
        uint64_t v14 = &v10[v13];
        uint64_t v15 = &v11[v13];
        uint64_t v16 = type metadata accessor for DispatchTimeInterval(0LL);
        unsigned __int8 v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32LL);
        v17(v14, v15, v16);
        v17(&v10[v12[9]], &v11[v12[9]], v16);
        *(_DWORD *)&v10[v12[10]]  = *(_DWORD *)&v11[v12[10]];
        *(_DWORD *)&v10[v12[11]]  = *(_DWORD *)&v11[v12[11]];
        *(void *)&v10[v12[12]]  = *(void *)&v11[v12[12]];
        *(_DWORD *)&v10[v12[13]]  = *(_DWORD *)&v11[v12[13]];
        *(void *)&v10[v12[14]]  = *(void *)&v11[v12[14]];
        *(_DWORD *)&v10[v12[15]]  = *(_DWORD *)&v11[v12[15]];
        *(void *)&v10[v12[16]]  = *(void *)&v11[v12[16]];
        swift_storeEnumTagMultiPayload(a1, v6, 1LL);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
        break;
    }

    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

char *assignWithTake for DriverEvent(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10005802C((uint64_t)a1, type metadata accessor for DriverEvent);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v6 = type metadata accessor for DriverEvent.AWDL(0LL);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
      switch(EnumCaseMultiPayload)
      {
        case 9:
          uint64_t v18 = type metadata accessor for DispatchTimeInterval(0LL);
          uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32LL);
          v19(a1, a2, v18);
          uint64_t v20 = type metadata accessor for AWDLIdleActivity(0LL);
          v19(&a1[*(int *)(v20 + 20)], &a2[*(int *)(v20 + 20)], v18);
          swift_storeEnumTagMultiPayload(a1, v6, 9LL);
          break;
        case 3:
          *a1  = *a2;
          *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
          *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
          *((void *)a1 + 3)  = *((void *)a2 + 3);
          *((_DWORD *)a1 + 8)  = *((_DWORD *)a2 + 8);
          *((_WORD *)a1 + 18)  = *((_WORD *)a2 + 18);
          *((_DWORD *)a1 + 10)  = *((_DWORD *)a2 + 10);
          *((_WORD *)a1 + 22)  = *((_WORD *)a2 + 22);
          int v21 = *((_DWORD *)a2 + 12);
          *((_WORD *)a1 + 26)  = *((_WORD *)a2 + 26);
          *((_DWORD *)a1 + 12)  = v21;
          *((_DWORD *)a1 + 14)  = *((_DWORD *)a2 + 14);
          *((_WORD *)a1 + 30)  = *((_WORD *)a2 + 30);
          __int128 v22 = *((_OWORD *)a2 + 5);
          *((_OWORD *)a1 + 4)  = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 5)  = v22;
          *((_OWORD *)a1 + 6)  = *((_OWORD *)a2 + 6);
          a1[112]  = a2[112];
          uint64_t v23 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
          uint64_t v24 = v23[20];
          __int16 v25 = &a1[v24];
          uint64_t v26 = &a2[v24];
          uint64_t v27 = type metadata accessor for DispatchTimeInterval(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32LL))(v25, v26, v27);
          *(void *)&a1[v23[21]]  = *(void *)&a2[v23[21]];
          *(void *)&a1[v23[22]]  = *(void *)&a2[v23[22]];
          *(void *)&a1[v23[23]]  = *(void *)&a2[v23[23]];
          *(void *)&a1[v23[24]]  = *(void *)&a2[v23[24]];
          *(void *)&a1[v23[25]]  = *(void *)&a2[v23[25]];
          *(void *)&a1[v23[26]]  = *(void *)&a2[v23[26]];
          *(void *)&a1[v23[27]]  = *(void *)&a2[v23[27]];
          *(void *)&a1[v23[28]]  = *(void *)&a2[v23[28]];
          *(_WORD *)&a1[v23[29]]  = *(_WORD *)&a2[v23[29]];
          a1[v23[30]]  = a2[v23[30]];
          a1[v23[31]]  = a2[v23[31]];
          a1[v23[32]]  = a2[v23[32]];
          a1[v23[33]]  = a2[v23[33]];
          a1[v23[34]]  = a2[v23[34]];
          a1[v23[35]]  = a2[v23[35]];
          *(_OWORD *)&a1[v23[36]]  = *(_OWORD *)&a2[v23[36]];
          a1[v23[37]]  = a2[v23[37]];
          *(void *)&a1[v23[38]]  = *(void *)&a2[v23[38]];
          *(void *)&a1[v23[39]]  = *(void *)&a2[v23[39]];
          *(void *)&a1[v23[40]]  = *(void *)&a2[v23[40]];
          *(void *)&a1[v23[41]]  = *(void *)&a2[v23[41]];
          *(void *)&a1[v23[42]]  = *(void *)&a2[v23[42]];
          *(void *)&a1[v23[43]]  = *(void *)&a2[v23[43]];
          uint64_t v28 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0LL);
          memcpy(&a1[*(int *)(v28 + 20)], &a2[*(int *)(v28 + 20)], 0x168uLL);
          swift_storeEnumTagMultiPayload(a1, v6, 3LL);
          break;
        case 1:
          __int128 v8 = *((_OWORD *)a2 + 1);
          *(_OWORD *)a1  = *(_OWORD *)a2;
          *((_OWORD *)a1 + 1)  = v8;
          uint64_t v9 = *(int *)(sub_100002274(&qword_100405DE0) + 48);
          uint64_t v10 = &a1[v9];
          uint64_t v11 = &a2[v9];
          *(_DWORD *)uint64_t v10 = *(_DWORD *)&a2[v9];
          *((_WORD *)v10 + 2)  = *(_WORD *)&a2[v9 + 4];
          *(_DWORD *)(v10 + 6)  = *(_DWORD *)&a2[v9 + 6];
          *((_WORD *)v10 + 5)  = *(_WORD *)&a2[v9 + 10];
          *((_DWORD *)v10 + 3)  = *(_DWORD *)&a2[v9 + 12];
          *((_WORD *)v10 + 8)  = *(_WORD *)&a2[v9 + 16];
          *((_DWORD *)v10 + 5)  = *(_DWORD *)&a2[v9 + 20];
          uint64_t v12 = (int *)type metadata accessor for AWDLActionFrame.Header(0LL);
          uint64_t v13 = v12[8];
          uint64_t v14 = &v10[v13];
          uint64_t v15 = &v11[v13];
          uint64_t v16 = type metadata accessor for DispatchTimeInterval(0LL);
          unsigned __int8 v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32LL);
          v17(v14, v15, v16);
          v17(&v10[v12[9]], &v11[v12[9]], v16);
          *(_DWORD *)&v10[v12[10]]  = *(_DWORD *)&v11[v12[10]];
          *(_DWORD *)&v10[v12[11]]  = *(_DWORD *)&v11[v12[11]];
          *(void *)&v10[v12[12]]  = *(void *)&v11[v12[12]];
          *(_DWORD *)&v10[v12[13]]  = *(_DWORD *)&v11[v12[13]];
          *(void *)&v10[v12[14]]  = *(void *)&v11[v12[14]];
          *(_DWORD *)&v10[v12[15]]  = *(_DWORD *)&v11[v12[15]];
          *(void *)&v10[v12[16]]  = *(void *)&v11[v12[16]];
          swift_storeEnumTagMultiPayload(a1, v6, 1LL);
          break;
        default:
          memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
          break;
      }

      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t sub_10010C020(uint64_t a1)
{
  v4[0]  = &unk_100347EC0;
  uint64_t result = type metadata accessor for DriverEvent.AWDL(319LL);
  if (v3 <= 0x3F)
  {
    v4[1]  = *(void *)(result - 8) + 64LL;
    v4[2]  = &unk_100347ED8;
    v4[3]  = &unk_100347EF0;
    v4[4]  = &unk_100347F08;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 5LL, v4);
    return 0LL;
  }

  return result;
}

uint64_t destroy for DriverEvent.NAN(uint64_t a1)
{
  __int16 v10 = *(_WORD *)(a1 + 360);
  __int128 v8 = *(_OWORD *)(a1 + 320);
  __int128 v9 = *(_OWORD *)(a1 + 336);
  __int128 v6 = *(_OWORD *)(a1 + 288);
  __int128 v7 = *(_OWORD *)(a1 + 304);
  __int128 v4 = *(_OWORD *)(a1 + 256);
  __int128 v5 = *(_OWORD *)(a1 + 272);
  __int128 v2 = *(_OWORD *)(a1 + 224);
  __int128 v3 = *(_OWORD *)(a1 + 240);
  return sub_1000578CC( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  *(void *)(a1 + 152),  *(void *)(a1 + 160),  *(void *)(a1 + 168),  *(void *)(a1 + 176),  *(void *)(a1 + 184),  *(void *)(a1 + 192),  *(void *)(a1 + 200),  *(void *)(a1 + 208),  *(void *)(a1 + 216),  v2,  *((uint64_t *)&v2 + 1),  v3,  *((uint64_t *)&v3 + 1),  v4,  *((uint64_t *)&v4 + 1),  v5,  *((uint64_t *)&v5 + 1),  v6,  *((uint64_t *)&v6 + 1),  v7,  *((uint64_t *)&v7 + 1),  v8,  *((uint64_t *)&v8 + 1),  v9,  *((uint64_t *)&v9 + 1),  *(void *)(a1 + 352),  v10,  SHIBYTE(v10));
}

uint64_t initializeWithCopy for DriverEvent.NAN(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = *(void *)(a2 + 72);
  uint64_t v50 = *(void *)(a2 + 64);
  uint64_t v47 = *(void *)(a2 + 88);
  uint64_t v48 = *(void *)(a2 + 80);
  uint64_t v45 = *(void *)(a2 + 104);
  uint64_t v46 = *(void *)(a2 + 96);
  uint64_t v43 = *(void *)(a2 + 120);
  uint64_t v44 = *(void *)(a2 + 112);
  uint64_t v41 = *(void *)(a2 + 136);
  uint64_t v42 = *(void *)(a2 + 128);
  uint64_t v40 = *(void *)(a2 + 144);
  uint64_t v13 = *(void *)(a2 + 152);
  uint64_t v14 = *(void *)(a2 + 160);
  uint64_t v15 = *(void *)(a2 + 168);
  uint64_t v16 = *(void *)(a2 + 176);
  uint64_t v17 = *(void *)(a2 + 184);
  uint64_t v18 = *(void *)(a2 + 192);
  uint64_t v19 = *(void *)(a2 + 200);
  uint64_t v20 = *(void *)(a2 + 208);
  uint64_t v3 = *(void *)(a2 + 224);
  uint64_t v21 = *(void *)(a2 + 216);
  uint64_t v22 = *(void *)(a2 + 232);
  uint64_t v23 = *(void *)(a2 + 240);
  uint64_t v24 = *(void *)(a2 + 248);
  uint64_t v25 = *(void *)(a2 + 256);
  uint64_t v26 = *(void *)(a2 + 264);
  uint64_t v27 = *(void *)(a2 + 272);
  uint64_t v28 = *(void *)(a2 + 280);
  uint64_t v29 = *(void *)(a2 + 288);
  uint64_t v30 = *(void *)(a2 + 296);
  uint64_t v31 = *(void *)(a2 + 304);
  uint64_t v32 = *(void *)(a2 + 312);
  uint64_t v33 = *(void *)(a2 + 320);
  uint64_t v34 = *(void *)(a2 + 328);
  uint64_t v35 = *(void *)(a2 + 336);
  uint64_t v36 = *(void *)(a2 + 344);
  uint64_t v37 = *(void *)(a2 + 352);
  char v38 = *(_BYTE *)(a2 + 360);
  char v39 = *(_BYTE *)(a2 + 361);
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 48);
  unint64_t v11 = *(void *)(a2 + 56);
  sub_100107584( *(void *)a2,  v5,  v6,  v7,  v8,  v9,  v10,  v11,  v50,  v49,  v48,  v47,  v46,  v45,  v44,  v43,  v42,  v41,  v40,  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21,  v3,  v22,  v23,  v24,  v25,  v26,  v27,  v28,  v29,  v30,  v31,  v32,  v33,  v34,  v35,  v36,  v37,  v38,  v39);
  *(void *)a1  = v4;
  *(void *)(a1 + 8)  = v5;
  *(void *)(a1 + 16)  = v6;
  *(void *)(a1 + 24)  = v7;
  *(void *)(a1 + 32)  = v8;
  *(void *)(a1 + 40)  = v9;
  *(void *)(a1 + 48)  = v10;
  *(void *)(a1 + 56)  = v11;
  *(void *)(a1 + 64)  = v50;
  *(void *)(a1 + 72)  = v49;
  *(void *)(a1 + 80)  = v48;
  *(void *)(a1 + 88)  = v47;
  *(void *)(a1 + 96)  = v46;
  *(void *)(a1 + 104)  = v45;
  *(void *)(a1 + 112)  = v44;
  *(void *)(a1 + 120)  = v43;
  *(void *)(a1 + 128)  = v42;
  *(void *)(a1 + 136)  = v41;
  *(void *)(a1 + 144)  = v40;
  *(void *)(a1 + 152)  = v13;
  *(void *)(a1 + 160)  = v14;
  *(void *)(a1 + 168)  = v15;
  *(void *)(a1 + 176)  = v16;
  *(void *)(a1 + 184)  = v17;
  *(void *)(a1 + 192)  = v18;
  *(void *)(a1 + 200)  = v19;
  *(void *)(a1 + 208)  = v20;
  *(void *)(a1 + 216)  = v21;
  *(void *)(a1 + 224)  = v3;
  *(void *)(a1 + 232)  = v22;
  *(void *)(a1 + 240)  = v23;
  *(void *)(a1 + 248)  = v24;
  *(void *)(a1 + 256)  = v25;
  *(void *)(a1 + 264)  = v26;
  *(void *)(a1 + 272)  = v27;
  *(void *)(a1 + 280)  = v28;
  *(void *)(a1 + 288)  = v29;
  *(void *)(a1 + 296)  = v30;
  *(void *)(a1 + 304)  = v31;
  *(void *)(a1 + 312)  = v32;
  *(void *)(a1 + 320)  = v33;
  *(void *)(a1 + 328)  = v34;
  *(void *)(a1 + 336)  = v35;
  *(void *)(a1 + 344)  = v36;
  *(void *)(a1 + 352)  = v37;
  *(_BYTE *)(a1 + 360)  = v38;
  *(_BYTE *)(a1 + 361)  = v39;
  return a1;
}

uint64_t assignWithCopy for DriverEvent.NAN(uint64_t a1, uint64_t a2)
{
  uint64_t v77 = *(void *)a2;
  uint64_t v78 = *(void *)(a2 + 8);
  uint64_t v75 = *(void *)(a2 + 24);
  uint64_t v76 = *(void *)(a2 + 16);
  uint64_t v73 = *(void *)(a2 + 40);
  uint64_t v74 = *(void *)(a2 + 32);
  unint64_t v71 = *(void *)(a2 + 56);
  uint64_t v72 = *(void *)(a2 + 48);
  uint64_t v69 = *(void *)(a2 + 72);
  uint64_t v70 = *(void *)(a2 + 64);
  uint64_t v67 = *(void *)(a2 + 88);
  uint64_t v68 = *(void *)(a2 + 80);
  uint64_t v65 = *(void *)(a2 + 104);
  uint64_t v66 = *(void *)(a2 + 96);
  uint64_t v63 = *(void *)(a2 + 120);
  uint64_t v64 = *(void *)(a2 + 112);
  uint64_t v61 = *(void *)(a2 + 136);
  uint64_t v62 = *(void *)(a2 + 128);
  uint64_t v3 = *(void *)(a2 + 152);
  uint64_t v60 = *(void *)(a2 + 144);
  uint64_t v4 = *(void *)(a2 + 160);
  uint64_t v5 = *(void *)(a2 + 168);
  uint64_t v6 = *(void *)(a2 + 176);
  uint64_t v7 = *(void *)(a2 + 184);
  uint64_t v8 = *(void *)(a2 + 192);
  uint64_t v9 = *(void *)(a2 + 200);
  uint64_t v10 = *(void *)(a2 + 216);
  uint64_t v11 = *(void *)(a2 + 224);
  uint64_t v41 = *(void *)(a2 + 208);
  uint64_t v42 = *(void *)(a2 + 232);
  uint64_t v43 = *(void *)(a2 + 240);
  uint64_t v44 = *(void *)(a2 + 248);
  uint64_t v45 = *(void *)(a2 + 256);
  uint64_t v46 = *(void *)(a2 + 264);
  uint64_t v47 = *(void *)(a2 + 272);
  uint64_t v48 = *(void *)(a2 + 280);
  uint64_t v49 = *(void *)(a2 + 288);
  uint64_t v50 = *(void *)(a2 + 296);
  uint64_t v51 = *(void *)(a2 + 304);
  uint64_t v52 = *(void *)(a2 + 312);
  uint64_t v53 = *(void *)(a2 + 320);
  uint64_t v54 = *(void *)(a2 + 328);
  uint64_t v55 = *(void *)(a2 + 336);
  uint64_t v56 = *(void *)(a2 + 344);
  uint64_t v57 = *(void *)(a2 + 352);
  char v58 = *(_BYTE *)(a2 + 360);
  char v59 = *(_BYTE *)(a2 + 361);
  sub_100107584( *(void *)a2,  v78,  v76,  v75,  v74,  v73,  v72,  v71,  v70,  v69,  v68,  v67,  v66,  v65,  v64,  v63,  v62,  v61,  v60,  v3,  v4,  v5,  v6,  v7,  v8,  v9,  v41,  v10,  v11,  v42,  v43,  v44,  v45,  v46,  v47,  v48,  v49,  v50,  v51,  v52,  v53,  v54,  v55,  v56,  v57,  v58,  v59);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)a1  = v77;
  *(void *)(a1 + 8)  = v78;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 16)  = v76;
  *(void *)(a1 + 24)  = v75;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 32)  = v74;
  *(void *)(a1 + 40)  = v73;
  uint64_t v18 = *(void *)(a1 + 48);
  unint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48)  = v72;
  *(void *)(a1 + 56)  = v71;
  __int128 v20 = *(_OWORD *)(a1 + 64);
  __int128 v21 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 64)  = v70;
  *(void *)(a1 + 72)  = v69;
  *(void *)(a1 + 80)  = v68;
  *(void *)(a1 + 88)  = v67;
  __int128 v22 = *(_OWORD *)(a1 + 96);
  __int128 v23 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 96)  = v66;
  *(void *)(a1 + 104)  = v65;
  *(void *)(a1 + 112)  = v64;
  *(void *)(a1 + 120)  = v63;
  __int128 v24 = *(_OWORD *)(a1 + 128);
  __int128 v25 = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 128)  = v62;
  *(void *)(a1 + 136)  = v61;
  *(void *)(a1 + 144)  = v60;
  *(void *)(a1 + 152)  = v3;
  __int128 v26 = *(_OWORD *)(a1 + 160);
  __int128 v27 = *(_OWORD *)(a1 + 176);
  *(void *)(a1 + 160)  = v4;
  *(void *)(a1 + 168)  = v5;
  *(void *)(a1 + 176)  = v6;
  *(void *)(a1 + 184)  = v7;
  __int128 v28 = *(_OWORD *)(a1 + 192);
  __int128 v29 = *(_OWORD *)(a1 + 208);
  *(void *)(a1 + 192)  = v8;
  *(void *)(a1 + 200)  = v9;
  *(void *)(a1 + 208)  = v41;
  *(void *)(a1 + 216)  = v10;
  __int128 v30 = *(_OWORD *)(a1 + 224);
  __int128 v31 = *(_OWORD *)(a1 + 240);
  *(void *)(a1 + 224)  = v11;
  *(void *)(a1 + 232)  = v42;
  *(void *)(a1 + 240)  = v43;
  *(void *)(a1 + 248)  = v44;
  __int128 v32 = *(_OWORD *)(a1 + 256);
  __int128 v33 = *(_OWORD *)(a1 + 272);
  *(void *)(a1 + 256)  = v45;
  *(void *)(a1 + 264)  = v46;
  *(void *)(a1 + 272)  = v47;
  *(void *)(a1 + 280)  = v48;
  __int128 v34 = *(_OWORD *)(a1 + 288);
  __int128 v35 = *(_OWORD *)(a1 + 304);
  *(void *)(a1 + 288)  = v49;
  *(void *)(a1 + 296)  = v50;
  *(void *)(a1 + 304)  = v51;
  *(void *)(a1 + 312)  = v52;
  __int128 v36 = *(_OWORD *)(a1 + 320);
  __int128 v37 = *(_OWORD *)(a1 + 336);
  *(void *)(a1 + 320)  = v53;
  *(void *)(a1 + 328)  = v54;
  *(void *)(a1 + 336)  = v55;
  *(void *)(a1 + 344)  = v56;
  uint64_t v38 = *(void *)(a1 + 352);
  *(void *)(a1 + 352)  = v57;
  __int16 v39 = *(_WORD *)(a1 + 360);
  *(_BYTE *)(a1 + 360)  = v58;
  *(_BYTE *)(a1 + 361)  = v59;
  sub_1000578CC( v12,  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  *((uint64_t *)&v20 + 1),  v21,  *((uint64_t *)&v21 + 1),  v22,  *((uint64_t *)&v22 + 1),  v23,  *((uint64_t *)&v23 + 1),  v24,  *((uint64_t *)&v24 + 1),  v25,  *((uint64_t *)&v25 + 1),  v26,  *((uint64_t *)&v26 + 1),  v27,  SBYTE8(v27),  v28,  *((uint64_t *)&v28 + 1),  v29,  *((uint64_t *)&v29 + 1),  v30,  *((uint64_t *)&v30 + 1),  v31,  *((uint64_t *)&v31 + 1),  v32,  *((uint64_t *)&v32 + 1),  v33,  *((uint64_t *)&v33 + 1),  v34,  *((uint64_t *)&v34 + 1),  v35,  *((uint64_t *)&v35 + 1),  v36,  *((uint64_t *)&v36 + 1),  v37,  *((uint64_t *)&v37 + 1),  v38,  v39,  SHIBYTE(v39));
  return a1;
}

void *initializeWithTake for DriverEvent.NAN(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x16AuLL);
}

uint64_t assignWithTake for DriverEvent.NAN(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 352);
  __int16 v5 = *(_WORD *)(a2 + 360);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  __int128 v14 = *(_OWORD *)(a1 + 64);
  __int128 v15 = *(_OWORD *)(a1 + 80);
  __int128 v16 = *(_OWORD *)(a1 + 96);
  __int128 v17 = *(_OWORD *)(a1 + 112);
  __int128 v18 = *(_OWORD *)(a1 + 128);
  __int128 v19 = *(_OWORD *)(a1 + 144);
  __int128 v20 = *(_OWORD *)(a1 + 160);
  __int128 v21 = *(_OWORD *)(a1 + 176);
  __int128 v22 = *(_OWORD *)(a1 + 192);
  __int128 v23 = *(_OWORD *)(a1 + 208);
  __int128 v24 = *(_OWORD *)(a1 + 224);
  __int128 v25 = *(_OWORD *)(a1 + 240);
  __int128 v26 = *(_OWORD *)(a1 + 256);
  __int128 v27 = *(_OWORD *)(a1 + 272);
  __int128 v28 = *(_OWORD *)(a1 + 288);
  __int128 v29 = *(_OWORD *)(a1 + 304);
  __int128 v30 = *(_OWORD *)(a1 + 320);
  __int128 v31 = *(_OWORD *)(a1 + 336);
  uint64_t v32 = *(void *)(a1 + 352);
  __int16 v33 = *(_WORD *)(a1 + 360);
  __int128 v34 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v34;
  __int128 v35 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48)  = v35;
  __int128 v36 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80)  = v36;
  __int128 v37 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96)  = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112)  = v37;
  __int128 v38 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128)  = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144)  = v38;
  __int128 v39 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160)  = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176)  = v39;
  __int128 v40 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192)  = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208)  = v40;
  __int128 v41 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224)  = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240)  = v41;
  __int128 v42 = *(_OWORD *)(a2 + 272);
  __int128 v43 = *(_OWORD *)(a2 + 288);
  __int128 v44 = *(_OWORD *)(a2 + 304);
  __int128 v45 = *(_OWORD *)(a2 + 320);
  __int128 v46 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 256)  = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272)  = v42;
  *(_OWORD *)(a1 + 288)  = v43;
  *(_OWORD *)(a1 + 304)  = v44;
  *(_OWORD *)(a1 + 320)  = v45;
  *(_OWORD *)(a1 + 336)  = v46;
  *(void *)(a1 + 352)  = v4;
  *(_WORD *)(a1 + 360)  = v5;
  sub_1000578CC( v6,  v7,  v8,  v9,  v10,  v11,  v12,  v13,  v14,  *((uint64_t *)&v14 + 1),  v15,  *((uint64_t *)&v15 + 1),  v16,  *((uint64_t *)&v16 + 1),  v17,  *((uint64_t *)&v17 + 1),  v18,  *((uint64_t *)&v18 + 1),  v19,  *((uint64_t *)&v19 + 1),  v20,  *((uint64_t *)&v20 + 1),  v21,  SBYTE8(v21),  v22,  *((uint64_t *)&v22 + 1),  v23,  *((uint64_t *)&v23 + 1),  v24,  *((uint64_t *)&v24 + 1),  v25,  *((uint64_t *)&v25 + 1),  v26,  *((uint64_t *)&v26 + 1),  v27,  *((uint64_t *)&v27 + 1),  v28,  *((uint64_t *)&v28 + 1),  v29,  *((uint64_t *)&v29 + 1),  v30,  *((uint64_t *)&v30 + 1),  v31,  *((uint64_t *)&v31 + 1),  v32,  v33,  SHIBYTE(v33));
  return a1;
}

uint64_t getEnumTagSinglePayload for DriverEvent.NAN(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xEB && *(_BYTE *)(a1 + 362)) {
    return (*(_DWORD *)a1 + 235);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 361);
  if (v3 <= 0x15) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DriverEvent.NAN(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xEA)
  {
    *(_OWORD *)(result + 248)  = 0u;
    *(_OWORD *)(result + 232)  = 0u;
    *(_OWORD *)(result + 216)  = 0u;
    *(_OWORD *)(result + 200)  = 0u;
    *(_OWORD *)(result + 184)  = 0u;
    *(_OWORD *)(result + 168)  = 0u;
    *(_OWORD *)(result + 152)  = 0u;
    *(_OWORD *)(result + 136)  = 0u;
    *(_OWORD *)(result + 120)  = 0u;
    *(_OWORD *)(result + 104)  = 0u;
    *(_OWORD *)(result + 88)  = 0u;
    *(_OWORD *)(result + 72)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(_WORD *)(result + 360)  = 0;
    *(_OWORD *)(result + 344)  = 0u;
    *(_OWORD *)(result + 328)  = 0u;
    *(_OWORD *)(result + 312)  = 0u;
    *(_OWORD *)(result + 296)  = 0u;
    *(_OWORD *)(result + 280)  = 0u;
    *(_OWORD *)(result + 264)  = 0u;
    *(void *)uint64_t result = a2 - 235;
    if (a3 >= 0xEB) {
      *(_BYTE *)(result + 362)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xEB) {
      *(_BYTE *)(result + 362)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 361)  = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10010C9E4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 361)  = a2;
  return result;
}

ValueMetadata *type metadata accessor for DriverEvent.NAN()
{
  return &type metadata for DriverEvent.NAN;
}

char *initializeBufferWithCopyOfBuffer for DriverEvent.AWDL(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v22 = *(void *)a2;
    *(void *)a1  = *(void *)a2;
    a1  = (char *)(v22 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain();
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 1u:
        *a1  = *a2;
        uint64_t v8 = *((void *)a2 + 1);
        uint64_t v9 = *((void *)a2 + 2);
        uint64_t v10 = *((void *)a2 + 3);
        sub_10005852C(v8, v9, v10);
        *((void *)a1 + 1)  = v8;
        *((void *)a1 + 2)  = v9;
        *((void *)a1 + 3)  = v10;
        uint64_t v11 = *(int *)(sub_100002274(&qword_100405DE0) + 48);
        uint64_t v12 = &a1[v11];
        unint64_t v13 = &a2[v11];
        *(_DWORD *)uint64_t v12 = *(_DWORD *)&a2[v11];
        *((_WORD *)v12 + 2)  = *(_WORD *)&a2[v11 + 4];
        *(_DWORD *)(v12 + 6)  = *(_DWORD *)&a2[v11 + 6];
        *((_WORD *)v12 + 5)  = *(_WORD *)&a2[v11 + 10];
        *((_DWORD *)v12 + 3)  = *(_DWORD *)&a2[v11 + 12];
        *((_WORD *)v12 + 8)  = *(_WORD *)&a2[v11 + 16];
        *((_DWORD *)v12 + 5)  = *(_DWORD *)&a2[v11 + 20];
        __int128 v14 = (int *)type metadata accessor for AWDLActionFrame.Header(0LL);
        uint64_t v15 = v14[8];
        __int128 v16 = &v12[v15];
        __int128 v17 = &v13[v15];
        uint64_t v18 = type metadata accessor for DispatchTimeInterval(0LL);
        __int128 v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16LL);
        v19(v16, v17, v18);
        v19(&v12[v14[9]], &v13[v14[9]], v18);
        *(_DWORD *)&v12[v14[10]]  = *(_DWORD *)&v13[v14[10]];
        *(_DWORD *)&v12[v14[11]]  = *(_DWORD *)&v13[v14[11]];
        *(void *)&v12[v14[12]]  = *(void *)&v13[v14[12]];
        *(_DWORD *)&v12[v14[13]]  = *(_DWORD *)&v13[v14[13]];
        *(void *)&v12[v14[14]]  = *(void *)&v13[v14[14]];
        *(_DWORD *)&v12[v14[15]]  = *(_DWORD *)&v13[v14[15]];
        uint64_t v20 = v14[16];
        uint64_t v21 = *(void *)&v13[v20];
        *(void *)&v12[v20]  = v21;
        swift_bridgeObjectRetain(v21);
        swift_storeEnumTagMultiPayload(a1, a3, 1LL);
        break;
      case 2u:
        __int128 v24 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1  = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1)  = v24;
        *((void *)a1 + 4)  = *((void *)a2 + 4);
        *((_WORD *)a1 + 20)  = *((_WORD *)a2 + 20);
        a1[42]  = a2[42];
        *(_WORD *)(a1 + 43)  = *(_WORD *)(a2 + 43);
        *((_DWORD *)a1 + 12)  = *((_DWORD *)a2 + 12);
        a1[52]  = a2[52];
        *((_DWORD *)a1 + 14)  = *((_DWORD *)a2 + 14);
        *(void *)(a1 + 60)  = *(void *)(a2 + 60);
        *((_DWORD *)a1 + 17)  = *((_DWORD *)a2 + 17);
        a1[72]  = a2[72];
        uint64_t v25 = *((void *)a2 + 10);
        uint64_t v26 = *((void *)a2 + 11);
        *((void *)a1 + 10)  = v25;
        *((void *)a1 + 11)  = v26;
        uint64_t v28 = *((void *)a2 + 12);
        uint64_t v27 = *((void *)a2 + 13);
        *((void *)a1 + 12)  = v28;
        *((void *)a1 + 13)  = v27;
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRetain(v27);
        swift_storeEnumTagMultiPayload(a1, a3, 2LL);
        break;
      case 3u:
        *a1  = *a2;
        *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
        *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
        *((void *)a1 + 3)  = *((void *)a2 + 3);
        *((_DWORD *)a1 + 8)  = *((_DWORD *)a2 + 8);
        *((_WORD *)a1 + 18)  = *((_WORD *)a2 + 18);
        *((_DWORD *)a1 + 10)  = *((_DWORD *)a2 + 10);
        *((_WORD *)a1 + 22)  = *((_WORD *)a2 + 22);
        int v29 = *((_DWORD *)a2 + 12);
        *((_WORD *)a1 + 26)  = *((_WORD *)a2 + 26);
        *((_DWORD *)a1 + 12)  = v29;
        *((_DWORD *)a1 + 14)  = *((_DWORD *)a2 + 14);
        *((_WORD *)a1 + 30)  = *((_WORD *)a2 + 30);
        __int128 v30 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4)  = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5)  = v30;
        *((_OWORD *)a1 + 6)  = *((_OWORD *)a2 + 6);
        a1[112]  = a2[112];
        __int128 v31 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
        uint64_t v32 = v31[20];
        __int16 v33 = &a1[v32];
        __int128 v34 = &a2[v32];
        uint64_t v35 = type metadata accessor for DispatchTimeInterval(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16LL))(v33, v34, v35);
        *(void *)&a1[v31[21]]  = *(void *)&a2[v31[21]];
        *(void *)&a1[v31[22]]  = *(void *)&a2[v31[22]];
        *(void *)&a1[v31[23]]  = *(void *)&a2[v31[23]];
        *(void *)&a1[v31[24]]  = *(void *)&a2[v31[24]];
        *(void *)&a1[v31[25]]  = *(void *)&a2[v31[25]];
        *(void *)&a1[v31[26]]  = *(void *)&a2[v31[26]];
        *(void *)&a1[v31[27]]  = *(void *)&a2[v31[27]];
        *(void *)&a1[v31[28]]  = *(void *)&a2[v31[28]];
        *(_WORD *)&a1[v31[29]]  = *(_WORD *)&a2[v31[29]];
        a1[v31[30]]  = a2[v31[30]];
        a1[v31[31]]  = a2[v31[31]];
        a1[v31[32]]  = a2[v31[32]];
        a1[v31[33]]  = a2[v31[33]];
        a1[v31[34]]  = a2[v31[34]];
        a1[v31[35]]  = a2[v31[35]];
        uint64_t v36 = v31[36];
        __int128 v37 = &a1[v36];
        __int128 v38 = &a2[v36];
        uint64_t v80 = *((void *)v38 + 1);
        *(void *)__int128 v37 = *(void *)v38;
        *((void *)v37 + 1)  = v80;
        a1[v31[37]]  = a2[v31[37]];
        *(void *)&a1[v31[38]]  = *(void *)&a2[v31[38]];
        *(void *)&a1[v31[39]]  = *(void *)&a2[v31[39]];
        *(void *)&a1[v31[40]]  = *(void *)&a2[v31[40]];
        *(void *)&a1[v31[41]]  = *(void *)&a2[v31[41]];
        *(void *)&a1[v31[42]]  = *(void *)&a2[v31[42]];
        *(void *)&a1[v31[43]]  = *(void *)&a2[v31[43]];
        uint64_t v39 = *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0LL) + 20);
        __int128 v40 = &a1[v39];
        __int128 v41 = &a2[v39];
        __int128 v42 = *((_OWORD *)v41 + 11);
        *((_OWORD *)v40 + 10)  = *((_OWORD *)v41 + 10);
        *((_OWORD *)v40 + 11)  = v42;
        *((_OWORD *)v40 + 12)  = *((_OWORD *)v41 + 12);
        __int128 v43 = *((_OWORD *)v41 + 7);
        *((_OWORD *)v40 + 6)  = *((_OWORD *)v41 + 6);
        *((_OWORD *)v40 + 7)  = v43;
        __int128 v44 = *((_OWORD *)v41 + 9);
        *((_OWORD *)v40 + 8)  = *((_OWORD *)v41 + 8);
        *((_OWORD *)v40 + 9)  = v44;
        __int128 v45 = *((_OWORD *)v41 + 3);
        *((_OWORD *)v40 + 2)  = *((_OWORD *)v41 + 2);
        *((_OWORD *)v40 + 3)  = v45;
        __int128 v46 = *((_OWORD *)v41 + 5);
        *((_OWORD *)v40 + 4)  = *((_OWORD *)v41 + 4);
        *((_OWORD *)v40 + 5)  = v46;
        __int128 v47 = *((_OWORD *)v41 + 1);
        *(_OWORD *)__int128 v40 = *(_OWORD *)v41;
        *((_OWORD *)v40 + 1)  = v47;
        uint64_t v48 = *((void *)v41 + 27);
        *((void *)v40 + 26)  = *((void *)v41 + 26);
        *((void *)v40 + 27)  = v48;
        uint64_t v49 = *((void *)v41 + 28);
        uint64_t v50 = *((void *)v41 + 29);
        *((void *)v40 + 28)  = v49;
        *((void *)v40 + 29)  = v50;
        uint64_t v51 = *((void *)v41 + 30);
        uint64_t v52 = *((void *)v41 + 31);
        *((void *)v40 + 30)  = v51;
        *((void *)v40 + 31)  = v52;
        uint64_t v54 = *((void *)v41 + 32);
        uint64_t v53 = *((void *)v41 + 33);
        *((void *)v40 + 32)  = v54;
        *((void *)v40 + 33)  = v53;
        uint64_t v56 = *((void *)v41 + 34);
        uint64_t v55 = *((void *)v41 + 35);
        *((void *)v40 + 34)  = v56;
        *((void *)v40 + 35)  = v55;
        uint64_t v70 = v55;
        uint64_t v71 = *((void *)v41 + 36);
        uint64_t v57 = *((void *)v41 + 37);
        *((void *)v40 + 36)  = v71;
        *((void *)v40 + 37)  = v57;
        uint64_t v72 = v57;
        uint64_t v73 = *((void *)v41 + 38);
        uint64_t v58 = *((void *)v41 + 39);
        *((void *)v40 + 38)  = v73;
        *((void *)v40 + 39)  = v58;
        uint64_t v74 = v58;
        uint64_t v75 = *((void *)v41 + 40);
        uint64_t v59 = *((void *)v41 + 41);
        *((void *)v40 + 40)  = v75;
        *((void *)v40 + 41)  = v59;
        uint64_t v76 = v59;
        uint64_t v77 = *((void *)v41 + 42);
        uint64_t v78 = *((void *)v41 + 43);
        uint64_t v79 = *((void *)v41 + 44);
        *((void *)v40 + 42)  = v77;
        *((void *)v40 + 43)  = v78;
        *((void *)v40 + 44)  = v79;
        swift_bridgeObjectRetain(v80);
        swift_bridgeObjectRetain(v48);
        swift_bridgeObjectRetain(v49);
        swift_bridgeObjectRetain(v50);
        swift_bridgeObjectRetain(v51);
        swift_bridgeObjectRetain(v52);
        swift_bridgeObjectRetain(v54);
        swift_bridgeObjectRetain(v53);
        swift_bridgeObjectRetain(v56);
        swift_bridgeObjectRetain(v70);
        swift_bridgeObjectRetain(v71);
        swift_bridgeObjectRetain(v72);
        swift_bridgeObjectRetain(v73);
        swift_bridgeObjectRetain(v74);
        swift_bridgeObjectRetain(v75);
        swift_bridgeObjectRetain(v76);
        swift_bridgeObjectRetain(v77);
        swift_bridgeObjectRetain(v78);
        swift_bridgeObjectRetain(v79);
        swift_storeEnumTagMultiPayload(a1, a3, 3LL);
        break;
      case 6u:
        uint64_t v60 = *(void *)a2;
        uint64_t v61 = *((void *)a2 + 1);
        uint64_t v62 = *((void *)a2 + 2);
        uint64_t v63 = *((void *)a2 + 3);
        char v64 = a2[32];
        sub_100055CB8(v60, v61, v62, v63, v64);
        *(void *)a1  = v60;
        *((void *)a1 + 1)  = v61;
        *((void *)a1 + 2)  = v62;
        *((void *)a1 + 3)  = v63;
        a1[32]  = v64;
        swift_storeEnumTagMultiPayload(a1, a3, 6LL);
        break;
      case 8u:
        uint64_t v65 = *(void **)a2;
        *(void *)a1  = *(void *)a2;
        a1[8]  = a2[8];
        id v66 = v65;
        swift_storeEnumTagMultiPayload(a1, a3, 8LL);
        break;
      case 9u:
        uint64_t v67 = type metadata accessor for DispatchTimeInterval(0LL);
        uint64_t v68 = *(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16LL);
        v68(a1, a2, v67);
        uint64_t v69 = type metadata accessor for AWDLIdleActivity(0LL);
        v68(&a1[*(int *)(v69 + 20)], &a2[*(int *)(v69 + 20)], v67);
        swift_storeEnumTagMultiPayload(a1, a3, 9LL);
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

void destroy for DriverEvent.AWDL(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 1u:
      sub_100057AA0(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
      uint64_t v3 = a1 + *(int *)(sub_100002274(&qword_100405DE0) + 48);
      int v4 = (int *)type metadata accessor for AWDLActionFrame.Header(0LL);
      uint64_t v5 = v3 + v4[8];
      uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
      uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL);
      v7(v5, v6);
      v7(v3 + v4[9], v6);
      uint64_t v8 = *(void *)(v3 + v4[16]);
      goto LABEL_5;
    case 2u:
      swift_bridgeObjectRelease(*(void *)(a1 + 80));
      swift_bridgeObjectRelease(*(void *)(a1 + 88));
      swift_bridgeObjectRelease(*(void *)(a1 + 96));
      uint64_t v8 = *(void *)(a1 + 104);
      goto LABEL_5;
    case 3u:
      uint64_t v9 = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
      uint64_t v10 = a1 + *(int *)(v9 + 80);
      uint64_t v11 = type metadata accessor for DispatchTimeInterval(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
      swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(v9 + 144) + 8));
      uint64_t v12 = (void *)(a1 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0LL) + 20));
      swift_bridgeObjectRelease(v12[27]);
      swift_bridgeObjectRelease(v12[28]);
      swift_bridgeObjectRelease(v12[29]);
      swift_bridgeObjectRelease(v12[30]);
      swift_bridgeObjectRelease(v12[31]);
      swift_bridgeObjectRelease(v12[32]);
      swift_bridgeObjectRelease(v12[33]);
      swift_bridgeObjectRelease(v12[34]);
      swift_bridgeObjectRelease(v12[35]);
      swift_bridgeObjectRelease(v12[36]);
      swift_bridgeObjectRelease(v12[37]);
      swift_bridgeObjectRelease(v12[38]);
      swift_bridgeObjectRelease(v12[39]);
      swift_bridgeObjectRelease(v12[40]);
      swift_bridgeObjectRelease(v12[41]);
      swift_bridgeObjectRelease(v12[42]);
      swift_bridgeObjectRelease(v12[43]);
      uint64_t v8 = v12[44];
LABEL_5:
      swift_bridgeObjectRelease(v8);
      break;
    case 6u:
      sub_100055CE4(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(_BYTE *)(a1 + 32));
      break;
    case 8u:

      break;
    case 9u:
      uint64_t v13 = type metadata accessor for DispatchTimeInterval(0LL);
      uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL);
      v15(a1, v13);
      uint64_t v14 = a1 + *(int *)(type metadata accessor for AWDLIdleActivity(0LL) + 20);
      v15(v14, v13);
      break;
    default:
      return;
  }

char *initializeWithCopy for DriverEvent.AWDL(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 1u:
      *a1  = *a2;
      uint64_t v6 = *((void *)a2 + 1);
      uint64_t v7 = *((void *)a2 + 2);
      uint64_t v8 = *((void *)a2 + 3);
      sub_10005852C(v6, v7, v8);
      *((void *)a1 + 1)  = v6;
      *((void *)a1 + 2)  = v7;
      *((void *)a1 + 3)  = v8;
      uint64_t v9 = *(int *)(sub_100002274(&qword_100405DE0) + 48);
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      *(_DWORD *)uint64_t v10 = *(_DWORD *)&a2[v9];
      *((_WORD *)v10 + 2)  = *(_WORD *)&a2[v9 + 4];
      *(_DWORD *)(v10 + 6)  = *(_DWORD *)&a2[v9 + 6];
      *((_WORD *)v10 + 5)  = *(_WORD *)&a2[v9 + 10];
      *((_DWORD *)v10 + 3)  = *(_DWORD *)&a2[v9 + 12];
      *((_WORD *)v10 + 8)  = *(_WORD *)&a2[v9 + 16];
      *((_DWORD *)v10 + 5)  = *(_DWORD *)&a2[v9 + 20];
      uint64_t v12 = (int *)type metadata accessor for AWDLActionFrame.Header(0LL);
      uint64_t v13 = v12[8];
      uint64_t v14 = &v10[v13];
      uint64_t v15 = &v11[v13];
      uint64_t v16 = type metadata accessor for DispatchTimeInterval(0LL);
      __int128 v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL);
      v17(v14, v15, v16);
      v17(&v10[v12[9]], &v11[v12[9]], v16);
      *(_DWORD *)&v10[v12[10]]  = *(_DWORD *)&v11[v12[10]];
      *(_DWORD *)&v10[v12[11]]  = *(_DWORD *)&v11[v12[11]];
      *(void *)&v10[v12[12]]  = *(void *)&v11[v12[12]];
      *(_DWORD *)&v10[v12[13]]  = *(_DWORD *)&v11[v12[13]];
      *(void *)&v10[v12[14]]  = *(void *)&v11[v12[14]];
      *(_DWORD *)&v10[v12[15]]  = *(_DWORD *)&v11[v12[15]];
      uint64_t v18 = v12[16];
      uint64_t v19 = *(void *)&v11[v18];
      *(void *)&v10[v18]  = v19;
      swift_bridgeObjectRetain(v19);
      uint64_t v20 = a1;
      uint64_t v21 = a3;
      uint64_t v22 = 1LL;
      goto LABEL_9;
    case 2u:
      __int128 v23 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1  = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1)  = v23;
      *((void *)a1 + 4)  = *((void *)a2 + 4);
      *((_WORD *)a1 + 20)  = *((_WORD *)a2 + 20);
      a1[42]  = a2[42];
      *(_WORD *)(a1 + 43)  = *(_WORD *)(a2 + 43);
      *((_DWORD *)a1 + 12)  = *((_DWORD *)a2 + 12);
      a1[52]  = a2[52];
      *((_DWORD *)a1 + 14)  = *((_DWORD *)a2 + 14);
      *(void *)(a1 + 60)  = *(void *)(a2 + 60);
      *((_DWORD *)a1 + 17)  = *((_DWORD *)a2 + 17);
      a1[72]  = a2[72];
      uint64_t v24 = *((void *)a2 + 10);
      uint64_t v25 = *((void *)a2 + 11);
      *((void *)a1 + 10)  = v24;
      *((void *)a1 + 11)  = v25;
      uint64_t v27 = *((void *)a2 + 12);
      uint64_t v26 = *((void *)a2 + 13);
      *((void *)a1 + 12)  = v27;
      *((void *)a1 + 13)  = v26;
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRetain(v26);
      uint64_t v20 = a1;
      uint64_t v21 = a3;
      uint64_t v22 = 2LL;
      goto LABEL_9;
    case 3u:
      *a1  = *a2;
      *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
      *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
      *((void *)a1 + 3)  = *((void *)a2 + 3);
      *((_DWORD *)a1 + 8)  = *((_DWORD *)a2 + 8);
      *((_WORD *)a1 + 18)  = *((_WORD *)a2 + 18);
      *((_DWORD *)a1 + 10)  = *((_DWORD *)a2 + 10);
      *((_WORD *)a1 + 22)  = *((_WORD *)a2 + 22);
      int v28 = *((_DWORD *)a2 + 12);
      *((_WORD *)a1 + 26)  = *((_WORD *)a2 + 26);
      *((_DWORD *)a1 + 12)  = v28;
      *((_DWORD *)a1 + 14)  = *((_DWORD *)a2 + 14);
      *((_WORD *)a1 + 30)  = *((_WORD *)a2 + 30);
      __int128 v29 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4)  = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5)  = v29;
      *((_OWORD *)a1 + 6)  = *((_OWORD *)a2 + 6);
      a1[112]  = a2[112];
      __int128 v30 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
      uint64_t v31 = v30[20];
      uint64_t v32 = &a1[v31];
      __int16 v33 = &a2[v31];
      uint64_t v34 = type metadata accessor for DispatchTimeInterval(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16LL))(v32, v33, v34);
      *(void *)&a1[v30[21]]  = *(void *)&a2[v30[21]];
      *(void *)&a1[v30[22]]  = *(void *)&a2[v30[22]];
      *(void *)&a1[v30[23]]  = *(void *)&a2[v30[23]];
      *(void *)&a1[v30[24]]  = *(void *)&a2[v30[24]];
      *(void *)&a1[v30[25]]  = *(void *)&a2[v30[25]];
      *(void *)&a1[v30[26]]  = *(void *)&a2[v30[26]];
      *(void *)&a1[v30[27]]  = *(void *)&a2[v30[27]];
      *(void *)&a1[v30[28]]  = *(void *)&a2[v30[28]];
      *(_WORD *)&a1[v30[29]]  = *(_WORD *)&a2[v30[29]];
      a1[v30[30]]  = a2[v30[30]];
      a1[v30[31]]  = a2[v30[31]];
      a1[v30[32]]  = a2[v30[32]];
      a1[v30[33]]  = a2[v30[33]];
      a1[v30[34]]  = a2[v30[34]];
      a1[v30[35]]  = a2[v30[35]];
      uint64_t v35 = v30[36];
      uint64_t v36 = &a1[v35];
      __int128 v37 = &a2[v35];
      uint64_t v80 = *((void *)v37 + 1);
      *(void *)uint64_t v36 = *(void *)v37;
      *((void *)v36 + 1)  = v80;
      a1[v30[37]]  = a2[v30[37]];
      *(void *)&a1[v30[38]]  = *(void *)&a2[v30[38]];
      *(void *)&a1[v30[39]]  = *(void *)&a2[v30[39]];
      *(void *)&a1[v30[40]]  = *(void *)&a2[v30[40]];
      *(void *)&a1[v30[41]]  = *(void *)&a2[v30[41]];
      *(void *)&a1[v30[42]]  = *(void *)&a2[v30[42]];
      *(void *)&a1[v30[43]]  = *(void *)&a2[v30[43]];
      uint64_t v38 = *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0LL) + 20);
      uint64_t v39 = &a1[v38];
      __int128 v40 = &a2[v38];
      __int128 v41 = *((_OWORD *)v40 + 11);
      *((_OWORD *)v39 + 10)  = *((_OWORD *)v40 + 10);
      *((_OWORD *)v39 + 11)  = v41;
      *((_OWORD *)v39 + 12)  = *((_OWORD *)v40 + 12);
      __int128 v42 = *((_OWORD *)v40 + 7);
      *((_OWORD *)v39 + 6)  = *((_OWORD *)v40 + 6);
      *((_OWORD *)v39 + 7)  = v42;
      __int128 v43 = *((_OWORD *)v40 + 9);
      *((_OWORD *)v39 + 8)  = *((_OWORD *)v40 + 8);
      *((_OWORD *)v39 + 9)  = v43;
      __int128 v44 = *((_OWORD *)v40 + 3);
      *((_OWORD *)v39 + 2)  = *((_OWORD *)v40 + 2);
      *((_OWORD *)v39 + 3)  = v44;
      __int128 v45 = *((_OWORD *)v40 + 5);
      *((_OWORD *)v39 + 4)  = *((_OWORD *)v40 + 4);
      *((_OWORD *)v39 + 5)  = v45;
      __int128 v46 = *((_OWORD *)v40 + 1);
      *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
      *((_OWORD *)v39 + 1)  = v46;
      uint64_t v47 = *((void *)v40 + 27);
      *((void *)v39 + 26)  = *((void *)v40 + 26);
      *((void *)v39 + 27)  = v47;
      uint64_t v48 = *((void *)v40 + 28);
      uint64_t v49 = *((void *)v40 + 29);
      *((void *)v39 + 28)  = v48;
      *((void *)v39 + 29)  = v49;
      uint64_t v50 = *((void *)v40 + 30);
      uint64_t v51 = *((void *)v40 + 31);
      *((void *)v39 + 30)  = v50;
      *((void *)v39 + 31)  = v51;
      uint64_t v53 = *((void *)v40 + 32);
      uint64_t v52 = *((void *)v40 + 33);
      *((void *)v39 + 32)  = v53;
      *((void *)v39 + 33)  = v52;
      uint64_t v55 = *((void *)v40 + 34);
      uint64_t v54 = *((void *)v40 + 35);
      *((void *)v39 + 34)  = v55;
      *((void *)v39 + 35)  = v54;
      uint64_t v70 = v54;
      uint64_t v71 = *((void *)v40 + 36);
      uint64_t v56 = *((void *)v40 + 37);
      *((void *)v39 + 36)  = v71;
      *((void *)v39 + 37)  = v56;
      uint64_t v72 = v56;
      uint64_t v73 = *((void *)v40 + 38);
      uint64_t v57 = *((void *)v40 + 39);
      *((void *)v39 + 38)  = v73;
      *((void *)v39 + 39)  = v57;
      uint64_t v74 = v57;
      uint64_t v75 = *((void *)v40 + 40);
      uint64_t v58 = *((void *)v40 + 41);
      *((void *)v39 + 40)  = v75;
      *((void *)v39 + 41)  = v58;
      uint64_t v76 = v58;
      uint64_t v77 = *((void *)v40 + 42);
      uint64_t v78 = *((void *)v40 + 43);
      uint64_t v79 = *((void *)v40 + 44);
      *((void *)v39 + 42)  = v77;
      *((void *)v39 + 43)  = v78;
      *((void *)v39 + 44)  = v79;
      swift_bridgeObjectRetain(v80);
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRetain(v48);
      swift_bridgeObjectRetain(v49);
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRetain(v51);
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRetain(v52);
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRetain(v70);
      swift_bridgeObjectRetain(v71);
      swift_bridgeObjectRetain(v72);
      swift_bridgeObjectRetain(v73);
      swift_bridgeObjectRetain(v74);
      swift_bridgeObjectRetain(v75);
      swift_bridgeObjectRetain(v76);
      swift_bridgeObjectRetain(v77);
      swift_bridgeObjectRetain(v78);
      swift_bridgeObjectRetain(v79);
      uint64_t v20 = a1;
      uint64_t v21 = a3;
      uint64_t v22 = 3LL;
      goto LABEL_9;
    case 6u:
      uint64_t v59 = *(void *)a2;
      uint64_t v60 = *((void *)a2 + 1);
      uint64_t v61 = *((void *)a2 + 2);
      uint64_t v62 = *((void *)a2 + 3);
      char v63 = a2[32];
      sub_100055CB8(v59, v60, v61, v62, v63);
      *(void *)a1  = v59;
      *((void *)a1 + 1)  = v60;
      *((void *)a1 + 2)  = v61;
      *((void *)a1 + 3)  = v62;
      a1[32]  = v63;
      uint64_t v20 = a1;
      uint64_t v21 = a3;
      uint64_t v22 = 6LL;
      goto LABEL_9;
    case 8u:
      char v64 = *(void **)a2;
      *(void *)a1  = *(void *)a2;
      a1[8]  = a2[8];
      id v65 = v64;
      uint64_t v20 = a1;
      uint64_t v21 = a3;
      uint64_t v22 = 8LL;
      goto LABEL_9;
    case 9u:
      uint64_t v66 = type metadata accessor for DispatchTimeInterval(0LL);
      uint64_t v67 = *(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 16LL);
      v67(a1, a2, v66);
      uint64_t v68 = type metadata accessor for AWDLIdleActivity(0LL);
      v67(&a1[*(int *)(v68 + 20)], &a2[*(int *)(v68 + 20)], v66);
      uint64_t v20 = a1;
      uint64_t v21 = a3;
      uint64_t v22 = 9LL;
LABEL_9:
      swift_storeEnumTagMultiPayload(v20, v21, v22);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

char *assignWithCopy for DriverEvent.AWDL(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10005802C((uint64_t)a1, type metadata accessor for DriverEvent.AWDL);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 1u:
        *a1  = *a2;
        uint64_t v6 = *((void *)a2 + 1);
        uint64_t v7 = *((void *)a2 + 2);
        uint64_t v8 = *((void *)a2 + 3);
        sub_10005852C(v6, v7, v8);
        *((void *)a1 + 1)  = v6;
        *((void *)a1 + 2)  = v7;
        *((void *)a1 + 3)  = v8;
        uint64_t v9 = *(int *)(sub_100002274(&qword_100405DE0) + 48);
        uint64_t v10 = &a1[v9];
        uint64_t v11 = &a2[v9];
        LODWORD(v9)  = *(_DWORD *)&a2[v9];
        *((_WORD *)v10 + 2)  = *((_WORD *)v11 + 2);
        *(_DWORD *)uint64_t v10 = v9;
        LOWORD(v9)  = *((_WORD *)v11 + 5);
        *(_DWORD *)(v10 + 6)  = *(_DWORD *)(v11 + 6);
        *((_WORD *)v10 + 5)  = v9;
        LOWORD(v9)  = *((_WORD *)v11 + 8);
        *((_DWORD *)v10 + 3)  = *((_DWORD *)v11 + 3);
        *((_WORD *)v10 + 8)  = v9;
        *((_DWORD *)v10 + 5)  = *((_DWORD *)v11 + 5);
        uint64_t v12 = (int *)type metadata accessor for AWDLActionFrame.Header(0LL);
        uint64_t v13 = v12[8];
        uint64_t v14 = &v10[v13];
        uint64_t v15 = &v11[v13];
        uint64_t v16 = type metadata accessor for DispatchTimeInterval(0LL);
        __int128 v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL);
        v17(v14, v15, v16);
        v17(&v10[v12[9]], &v11[v12[9]], v16);
        *(_DWORD *)&v10[v12[10]]  = *(_DWORD *)&v11[v12[10]];
        *(_DWORD *)&v10[v12[11]]  = *(_DWORD *)&v11[v12[11]];
        *(void *)&v10[v12[12]]  = *(void *)&v11[v12[12]];
        *(_DWORD *)&v10[v12[13]]  = *(_DWORD *)&v11[v12[13]];
        *(void *)&v10[v12[14]]  = *(void *)&v11[v12[14]];
        *(_DWORD *)&v10[v12[15]]  = *(_DWORD *)&v11[v12[15]];
        uint64_t v18 = v12[16];
        uint64_t v19 = *(void *)&v11[v18];
        *(void *)&v10[v18]  = v19;
        swift_bridgeObjectRetain(v19);
        uint64_t v20 = a1;
        uint64_t v21 = a3;
        uint64_t v22 = 1LL;
        goto LABEL_10;
      case 2u:
        *(void *)a1  = *(void *)a2;
        *((void *)a1 + 1)  = *((void *)a2 + 1);
        *((_DWORD *)a1 + 4)  = *((_DWORD *)a2 + 4);
        *((_DWORD *)a1 + 5)  = *((_DWORD *)a2 + 5);
        *((_DWORD *)a1 + 6)  = *((_DWORD *)a2 + 6);
        *((_DWORD *)a1 + 7)  = *((_DWORD *)a2 + 7);
        *((_WORD *)a1 + 16)  = *((_WORD *)a2 + 16);
        *((_WORD *)a1 + 17)  = *((_WORD *)a2 + 17);
        *((_WORD *)a1 + 18)  = *((_WORD *)a2 + 18);
        *((_WORD *)a1 + 19)  = *((_WORD *)a2 + 19);
        *((_WORD *)a1 + 20)  = *((_WORD *)a2 + 20);
        a1[42]  = a2[42];
        a1[43]  = a2[43];
        a1[44]  = a2[44];
        *((_DWORD *)a1 + 12)  = *((_DWORD *)a2 + 12);
        a1[52]  = a2[52];
        *((_DWORD *)a1 + 14)  = *((_DWORD *)a2 + 14);
        a1[60]  = a2[60];
        a1[61]  = a2[61];
        a1[62]  = a2[62];
        a1[63]  = a2[63];
        a1[64]  = a2[64];
        a1[65]  = a2[65];
        a1[66]  = a2[66];
        a1[67]  = a2[67];
        a1[68]  = a2[68];
        a1[69]  = a2[69];
        a1[70]  = a2[70];
        a1[71]  = a2[71];
        a1[72]  = a2[72];
        uint64_t v23 = *((void *)a2 + 10);
        *((void *)a1 + 10)  = v23;
        uint64_t v24 = *((void *)a2 + 11);
        *((void *)a1 + 11)  = v24;
        uint64_t v25 = *((void *)a2 + 12);
        *((void *)a1 + 12)  = v25;
        uint64_t v26 = *((void *)a2 + 13);
        *((void *)a1 + 13)  = v26;
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRetain(v26);
        uint64_t v20 = a1;
        uint64_t v21 = a3;
        uint64_t v22 = 2LL;
        goto LABEL_10;
      case 3u:
        *a1  = *a2;
        *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
        *((void *)a1 + 1)  = *((void *)a2 + 1);
        *((void *)a1 + 2)  = *((void *)a2 + 2);
        *((void *)a1 + 3)  = *((void *)a2 + 3);
        int v27 = *((_DWORD *)a2 + 8);
        *((_WORD *)a1 + 18)  = *((_WORD *)a2 + 18);
        *((_DWORD *)a1 + 8)  = v27;
        int v28 = *((_DWORD *)a2 + 10);
        *((_WORD *)a1 + 22)  = *((_WORD *)a2 + 22);
        *((_DWORD *)a1 + 10)  = v28;
        int v29 = *((_DWORD *)a2 + 12);
        *((_WORD *)a1 + 26)  = *((_WORD *)a2 + 26);
        *((_DWORD *)a1 + 12)  = v29;
        int v30 = *((_DWORD *)a2 + 14);
        *((_WORD *)a1 + 30)  = *((_WORD *)a2 + 30);
        *((_DWORD *)a1 + 14)  = v30;
        *((void *)a1 + 8)  = *((void *)a2 + 8);
        *((void *)a1 + 9)  = *((void *)a2 + 9);
        *((void *)a1 + 10)  = *((void *)a2 + 10);
        *((void *)a1 + 11)  = *((void *)a2 + 11);
        *((void *)a1 + 12)  = *((void *)a2 + 12);
        *((void *)a1 + 13)  = *((void *)a2 + 13);
        a1[112]  = a2[112];
        uint64_t v31 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
        uint64_t v32 = v31[20];
        __int16 v33 = &a1[v32];
        uint64_t v34 = &a2[v32];
        uint64_t v35 = type metadata accessor for DispatchTimeInterval(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16LL))(v33, v34, v35);
        *(void *)&a1[v31[21]]  = *(void *)&a2[v31[21]];
        *(void *)&a1[v31[22]]  = *(void *)&a2[v31[22]];
        *(void *)&a1[v31[23]]  = *(void *)&a2[v31[23]];
        *(void *)&a1[v31[24]]  = *(void *)&a2[v31[24]];
        *(void *)&a1[v31[25]]  = *(void *)&a2[v31[25]];
        *(void *)&a1[v31[26]]  = *(void *)&a2[v31[26]];
        *(void *)&a1[v31[27]]  = *(void *)&a2[v31[27]];
        *(void *)&a1[v31[28]]  = *(void *)&a2[v31[28]];
        *(_WORD *)&a1[v31[29]]  = *(_WORD *)&a2[v31[29]];
        a1[v31[30]]  = a2[v31[30]];
        a1[v31[31]]  = a2[v31[31]];
        a1[v31[32]]  = a2[v31[32]];
        a1[v31[33]]  = a2[v31[33]];
        a1[v31[34]]  = a2[v31[34]];
        a1[v31[35]]  = a2[v31[35]];
        uint64_t v36 = v31[36];
        __int128 v37 = &a1[v36];
        uint64_t v38 = &a2[v36];
        *(void *)__int128 v37 = *(void *)v38;
        uint64_t v82 = *((void *)v38 + 1);
        *((void *)v37 + 1)  = v82;
        a1[v31[37]]  = a2[v31[37]];
        *(void *)&a1[v31[38]]  = *(void *)&a2[v31[38]];
        *(void *)&a1[v31[39]]  = *(void *)&a2[v31[39]];
        *(void *)&a1[v31[40]]  = *(void *)&a2[v31[40]];
        *(void *)&a1[v31[41]]  = *(void *)&a2[v31[41]];
        *(void *)&a1[v31[42]]  = *(void *)&a2[v31[42]];
        *(void *)&a1[v31[43]]  = *(void *)&a2[v31[43]];
        uint64_t v39 = *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0LL) + 20);
        __int128 v40 = &a1[v39];
        __int128 v41 = &a2[v39];
        uint64_t v42 = *((void *)v41 + 26);
        __int128 v44 = *((_OWORD *)v41 + 11);
        __int128 v43 = *((_OWORD *)v41 + 12);
        *((_OWORD *)v40 + 10)  = *((_OWORD *)v41 + 10);
        *((_OWORD *)v40 + 11)  = v44;
        *((_OWORD *)v40 + 12)  = v43;
        *((void *)v40 + 26)  = v42;
        __int128 v46 = *((_OWORD *)v41 + 8);
        __int128 v45 = *((_OWORD *)v41 + 9);
        __int128 v47 = *((_OWORD *)v41 + 7);
        *((_OWORD *)v40 + 6)  = *((_OWORD *)v41 + 6);
        *((_OWORD *)v40 + 7)  = v47;
        *((_OWORD *)v40 + 8)  = v46;
        *((_OWORD *)v40 + 9)  = v45;
        __int128 v49 = *((_OWORD *)v41 + 4);
        __int128 v48 = *((_OWORD *)v41 + 5);
        __int128 v50 = *((_OWORD *)v41 + 3);
        *((_OWORD *)v40 + 2)  = *((_OWORD *)v41 + 2);
        *((_OWORD *)v40 + 3)  = v50;
        *((_OWORD *)v40 + 4)  = v49;
        *((_OWORD *)v40 + 5)  = v48;
        __int128 v51 = *((_OWORD *)v41 + 1);
        *(_OWORD *)__int128 v40 = *(_OWORD *)v41;
        *((_OWORD *)v40 + 1)  = v51;
        uint64_t v52 = *((void *)v41 + 27);
        *((void *)v40 + 27)  = v52;
        uint64_t v53 = *((void *)v41 + 28);
        *((void *)v40 + 28)  = v53;
        uint64_t v54 = *((void *)v41 + 29);
        *((void *)v40 + 29)  = v54;
        uint64_t v55 = *((void *)v41 + 30);
        *((void *)v40 + 30)  = v55;
        uint64_t v56 = *((void *)v41 + 31);
        *((void *)v40 + 31)  = v56;
        uint64_t v57 = *((void *)v41 + 32);
        *((void *)v40 + 32)  = v57;
        uint64_t v58 = *((void *)v41 + 33);
        *((void *)v40 + 33)  = v58;
        uint64_t v59 = *((void *)v41 + 34);
        *((void *)v40 + 34)  = v59;
        uint64_t v72 = *((void *)v41 + 35);
        *((void *)v40 + 35)  = v72;
        uint64_t v73 = *((void *)v41 + 36);
        *((void *)v40 + 36)  = v73;
        uint64_t v74 = *((void *)v41 + 37);
        *((void *)v40 + 37)  = v74;
        uint64_t v75 = *((void *)v41 + 38);
        *((void *)v40 + 38)  = v75;
        uint64_t v76 = *((void *)v41 + 39);
        *((void *)v40 + 39)  = v76;
        uint64_t v77 = *((void *)v41 + 40);
        *((void *)v40 + 40)  = v77;
        uint64_t v78 = *((void *)v41 + 41);
        *((void *)v40 + 41)  = v78;
        uint64_t v79 = *((void *)v41 + 42);
        *((void *)v40 + 42)  = v79;
        uint64_t v60 = *((void *)v41 + 43);
        *((void *)v40 + 43)  = v60;
        uint64_t v80 = v60;
        uint64_t v81 = *((void *)v41 + 44);
        *((void *)v40 + 44)  = v81;
        swift_bridgeObjectRetain(v82);
        swift_bridgeObjectRetain(v52);
        swift_bridgeObjectRetain(v53);
        swift_bridgeObjectRetain(v54);
        swift_bridgeObjectRetain(v55);
        swift_bridgeObjectRetain(v56);
        swift_bridgeObjectRetain(v57);
        swift_bridgeObjectRetain(v58);
        swift_bridgeObjectRetain(v59);
        swift_bridgeObjectRetain(v72);
        swift_bridgeObjectRetain(v73);
        swift_bridgeObjectRetain(v74);
        swift_bridgeObjectRetain(v75);
        swift_bridgeObjectRetain(v76);
        swift_bridgeObjectRetain(v77);
        swift_bridgeObjectRetain(v78);
        swift_bridgeObjectRetain(v79);
        swift_bridgeObjectRetain(v80);
        swift_bridgeObjectRetain(v81);
        uint64_t v20 = a1;
        uint64_t v21 = a3;
        uint64_t v22 = 3LL;
        goto LABEL_10;
      case 6u:
        uint64_t v61 = *(void *)a2;
        uint64_t v62 = *((void *)a2 + 1);
        uint64_t v63 = *((void *)a2 + 2);
        uint64_t v64 = *((void *)a2 + 3);
        char v65 = a2[32];
        sub_100055CB8(v61, v62, v63, v64, v65);
        *(void *)a1  = v61;
        *((void *)a1 + 1)  = v62;
        *((void *)a1 + 2)  = v63;
        *((void *)a1 + 3)  = v64;
        a1[32]  = v65;
        uint64_t v20 = a1;
        uint64_t v21 = a3;
        uint64_t v22 = 6LL;
        goto LABEL_10;
      case 8u:
        uint64_t v66 = *(void **)a2;
        *(void *)a1  = *(void *)a2;
        a1[8]  = a2[8];
        id v67 = v66;
        uint64_t v20 = a1;
        uint64_t v21 = a3;
        uint64_t v22 = 8LL;
        goto LABEL_10;
      case 9u:
        uint64_t v68 = type metadata accessor for DispatchTimeInterval(0LL);
        uint64_t v69 = *(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 16LL);
        v69(a1, a2, v68);
        uint64_t v70 = type metadata accessor for AWDLIdleActivity(0LL);
        v69(&a1[*(int *)(v70 + 20)], &a2[*(int *)(v70 + 20)], v68);
        uint64_t v20 = a1;
        uint64_t v21 = a3;
        uint64_t v22 = 9LL;
LABEL_10:
        swift_storeEnumTagMultiPayload(v20, v21, v22);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

char *initializeWithTake for DriverEvent.AWDL(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 9:
      uint64_t v17 = type metadata accessor for DispatchTimeInterval(0LL);
      uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32LL);
      v18(a1, a2, v17);
      uint64_t v19 = type metadata accessor for AWDLIdleActivity(0LL);
      v18(&a1[*(int *)(v19 + 20)], &a2[*(int *)(v19 + 20)], v17);
      swift_storeEnumTagMultiPayload(a1, a3, 9LL);
      break;
    case 3:
      *a1  = *a2;
      *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
      *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
      *((void *)a1 + 3)  = *((void *)a2 + 3);
      *((_DWORD *)a1 + 8)  = *((_DWORD *)a2 + 8);
      *((_WORD *)a1 + 18)  = *((_WORD *)a2 + 18);
      *((_DWORD *)a1 + 10)  = *((_DWORD *)a2 + 10);
      *((_WORD *)a1 + 22)  = *((_WORD *)a2 + 22);
      int v20 = *((_DWORD *)a2 + 12);
      *((_WORD *)a1 + 26)  = *((_WORD *)a2 + 26);
      *((_DWORD *)a1 + 12)  = v20;
      *((_DWORD *)a1 + 14)  = *((_DWORD *)a2 + 14);
      *((_WORD *)a1 + 30)  = *((_WORD *)a2 + 30);
      __int128 v21 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4)  = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5)  = v21;
      *((_OWORD *)a1 + 6)  = *((_OWORD *)a2 + 6);
      a1[112]  = a2[112];
      uint64_t v22 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
      uint64_t v23 = v22[20];
      uint64_t v24 = &a1[v23];
      uint64_t v25 = &a2[v23];
      uint64_t v26 = type metadata accessor for DispatchTimeInterval(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32LL))(v24, v25, v26);
      *(void *)&a1[v22[21]]  = *(void *)&a2[v22[21]];
      *(void *)&a1[v22[22]]  = *(void *)&a2[v22[22]];
      *(void *)&a1[v22[23]]  = *(void *)&a2[v22[23]];
      *(void *)&a1[v22[24]]  = *(void *)&a2[v22[24]];
      *(void *)&a1[v22[25]]  = *(void *)&a2[v22[25]];
      *(void *)&a1[v22[26]]  = *(void *)&a2[v22[26]];
      *(void *)&a1[v22[27]]  = *(void *)&a2[v22[27]];
      *(void *)&a1[v22[28]]  = *(void *)&a2[v22[28]];
      *(_WORD *)&a1[v22[29]]  = *(_WORD *)&a2[v22[29]];
      a1[v22[30]]  = a2[v22[30]];
      a1[v22[31]]  = a2[v22[31]];
      a1[v22[32]]  = a2[v22[32]];
      a1[v22[33]]  = a2[v22[33]];
      a1[v22[34]]  = a2[v22[34]];
      a1[v22[35]]  = a2[v22[35]];
      *(_OWORD *)&a1[v22[36]]  = *(_OWORD *)&a2[v22[36]];
      a1[v22[37]]  = a2[v22[37]];
      *(void *)&a1[v22[38]]  = *(void *)&a2[v22[38]];
      *(void *)&a1[v22[39]]  = *(void *)&a2[v22[39]];
      *(void *)&a1[v22[40]]  = *(void *)&a2[v22[40]];
      *(void *)&a1[v22[41]]  = *(void *)&a2[v22[41]];
      *(void *)&a1[v22[42]]  = *(void *)&a2[v22[42]];
      *(void *)&a1[v22[43]]  = *(void *)&a2[v22[43]];
      uint64_t v27 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0LL);
      memcpy(&a1[*(int *)(v27 + 20)], &a2[*(int *)(v27 + 20)], 0x168uLL);
      swift_storeEnumTagMultiPayload(a1, a3, 3LL);
      break;
    case 1:
      __int128 v7 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1  = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1)  = v7;
      uint64_t v8 = *(int *)(sub_100002274(&qword_100405DE0) + 48);
      uint64_t v9 = &a1[v8];
      uint64_t v10 = &a2[v8];
      *(_DWORD *)uint64_t v9 = *(_DWORD *)&a2[v8];
      *((_WORD *)v9 + 2)  = *(_WORD *)&a2[v8 + 4];
      *(_DWORD *)(v9 + 6)  = *(_DWORD *)&a2[v8 + 6];
      *((_WORD *)v9 + 5)  = *(_WORD *)&a2[v8 + 10];
      *((_DWORD *)v9 + 3)  = *(_DWORD *)&a2[v8 + 12];
      *((_WORD *)v9 + 8)  = *(_WORD *)&a2[v8 + 16];
      *((_DWORD *)v9 + 5)  = *(_DWORD *)&a2[v8 + 20];
      uint64_t v11 = (int *)type metadata accessor for AWDLActionFrame.Header(0LL);
      uint64_t v12 = v11[8];
      uint64_t v13 = &v9[v12];
      uint64_t v14 = &v10[v12];
      uint64_t v15 = type metadata accessor for DispatchTimeInterval(0LL);
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32LL);
      v16(v13, v14, v15);
      v16(&v9[v11[9]], &v10[v11[9]], v15);
      *(_DWORD *)&v9[v11[10]]  = *(_DWORD *)&v10[v11[10]];
      *(_DWORD *)&v9[v11[11]]  = *(_DWORD *)&v10[v11[11]];
      *(void *)&v9[v11[12]]  = *(void *)&v10[v11[12]];
      *(_DWORD *)&v9[v11[13]]  = *(_DWORD *)&v10[v11[13]];
      *(void *)&v9[v11[14]]  = *(void *)&v10[v11[14]];
      *(_DWORD *)&v9[v11[15]]  = *(_DWORD *)&v10[v11[15]];
      *(void *)&v9[v11[16]]  = *(void *)&v10[v11[16]];
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

char *assignWithTake for DriverEvent.AWDL(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10005802C((uint64_t)a1, type metadata accessor for DriverEvent.AWDL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    switch(EnumCaseMultiPayload)
    {
      case 9:
        uint64_t v17 = type metadata accessor for DispatchTimeInterval(0LL);
        uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32LL);
        v18(a1, a2, v17);
        uint64_t v19 = type metadata accessor for AWDLIdleActivity(0LL);
        v18(&a1[*(int *)(v19 + 20)], &a2[*(int *)(v19 + 20)], v17);
        swift_storeEnumTagMultiPayload(a1, a3, 9LL);
        break;
      case 3:
        *a1  = *a2;
        *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
        *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
        *((void *)a1 + 3)  = *((void *)a2 + 3);
        *((_DWORD *)a1 + 8)  = *((_DWORD *)a2 + 8);
        *((_WORD *)a1 + 18)  = *((_WORD *)a2 + 18);
        *((_DWORD *)a1 + 10)  = *((_DWORD *)a2 + 10);
        *((_WORD *)a1 + 22)  = *((_WORD *)a2 + 22);
        int v20 = *((_DWORD *)a2 + 12);
        *((_WORD *)a1 + 26)  = *((_WORD *)a2 + 26);
        *((_DWORD *)a1 + 12)  = v20;
        *((_DWORD *)a1 + 14)  = *((_DWORD *)a2 + 14);
        *((_WORD *)a1 + 30)  = *((_WORD *)a2 + 30);
        __int128 v21 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4)  = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5)  = v21;
        *((_OWORD *)a1 + 6)  = *((_OWORD *)a2 + 6);
        a1[112]  = a2[112];
        uint64_t v22 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
        uint64_t v23 = v22[20];
        uint64_t v24 = &a1[v23];
        uint64_t v25 = &a2[v23];
        uint64_t v26 = type metadata accessor for DispatchTimeInterval(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32LL))(v24, v25, v26);
        *(void *)&a1[v22[21]]  = *(void *)&a2[v22[21]];
        *(void *)&a1[v22[22]]  = *(void *)&a2[v22[22]];
        *(void *)&a1[v22[23]]  = *(void *)&a2[v22[23]];
        *(void *)&a1[v22[24]]  = *(void *)&a2[v22[24]];
        *(void *)&a1[v22[25]]  = *(void *)&a2[v22[25]];
        *(void *)&a1[v22[26]]  = *(void *)&a2[v22[26]];
        *(void *)&a1[v22[27]]  = *(void *)&a2[v22[27]];
        *(void *)&a1[v22[28]]  = *(void *)&a2[v22[28]];
        *(_WORD *)&a1[v22[29]]  = *(_WORD *)&a2[v22[29]];
        a1[v22[30]]  = a2[v22[30]];
        a1[v22[31]]  = a2[v22[31]];
        a1[v22[32]]  = a2[v22[32]];
        a1[v22[33]]  = a2[v22[33]];
        a1[v22[34]]  = a2[v22[34]];
        a1[v22[35]]  = a2[v22[35]];
        *(_OWORD *)&a1[v22[36]]  = *(_OWORD *)&a2[v22[36]];
        a1[v22[37]]  = a2[v22[37]];
        *(void *)&a1[v22[38]]  = *(void *)&a2[v22[38]];
        *(void *)&a1[v22[39]]  = *(void *)&a2[v22[39]];
        *(void *)&a1[v22[40]]  = *(void *)&a2[v22[40]];
        *(void *)&a1[v22[41]]  = *(void *)&a2[v22[41]];
        *(void *)&a1[v22[42]]  = *(void *)&a2[v22[42]];
        *(void *)&a1[v22[43]]  = *(void *)&a2[v22[43]];
        uint64_t v27 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0LL);
        memcpy(&a1[*(int *)(v27 + 20)], &a2[*(int *)(v27 + 20)], 0x168uLL);
        swift_storeEnumTagMultiPayload(a1, a3, 3LL);
        break;
      case 1:
        __int128 v7 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1  = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1)  = v7;
        uint64_t v8 = *(int *)(sub_100002274(&qword_100405DE0) + 48);
        uint64_t v9 = &a1[v8];
        uint64_t v10 = &a2[v8];
        *(_DWORD *)uint64_t v9 = *(_DWORD *)&a2[v8];
        *((_WORD *)v9 + 2)  = *(_WORD *)&a2[v8 + 4];
        *(_DWORD *)(v9 + 6)  = *(_DWORD *)&a2[v8 + 6];
        *((_WORD *)v9 + 5)  = *(_WORD *)&a2[v8 + 10];
        *((_DWORD *)v9 + 3)  = *(_DWORD *)&a2[v8 + 12];
        *((_WORD *)v9 + 8)  = *(_WORD *)&a2[v8 + 16];
        *((_DWORD *)v9 + 5)  = *(_DWORD *)&a2[v8 + 20];
        uint64_t v11 = (int *)type metadata accessor for AWDLActionFrame.Header(0LL);
        uint64_t v12 = v11[8];
        uint64_t v13 = &v9[v12];
        uint64_t v14 = &v10[v12];
        uint64_t v15 = type metadata accessor for DispatchTimeInterval(0LL);
        uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32LL);
        v16(v13, v14, v15);
        v16(&v9[v11[9]], &v10[v11[9]], v15);
        *(_DWORD *)&v9[v11[10]]  = *(_DWORD *)&v10[v11[10]];
        *(_DWORD *)&v9[v11[11]]  = *(_DWORD *)&v10[v11[11]];
        *(void *)&v9[v11[12]]  = *(void *)&v10[v11[12]];
        *(_DWORD *)&v9[v11[13]]  = *(_DWORD *)&v10[v11[13]];
        *(void *)&v9[v11[14]]  = *(void *)&v10[v11[14]];
        *(_DWORD *)&v9[v11[15]]  = *(_DWORD *)&v10[v11[15]];
        *(void *)&v9[v11[16]]  = *(void *)&v10[v11[16]];
        swift_storeEnumTagMultiPayload(a1, a3, 1LL);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

uint64_t sub_10010E880(uint64_t a1)
{
  v7[0]  = &unk_100347EF0;
  uint64_t result = type metadata accessor for AWDLActionFrame.Header(319LL);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v6, " ", *(void *)(result - 8) + 64LL);
    v7[1]  = v6;
    _OWORD v7[2] = &unk_100347F48;
    uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics(319LL);
    if (v4 <= 0x3F)
    {
      _OWORD v7[3] = *(void *)(result - 8) + 64LL;
      v7[4]  = &unk_100347F60;
      void v7[5] = &unk_100347F78;
      v7[6]  = &unk_100347F90;
      void v7[7] = &unk_100347FA8;
      v7[8]  = &unk_100347FC0;
      uint64_t result = type metadata accessor for AWDLIdleActivity(319LL);
      if (v5 <= 0x3F)
      {
        void v7[9] = *(void *)(result - 8) + 64LL;
        swift_initEnumMetadataMultiPayload(a1, 256LL, 10LL, v7);
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t destroy for DriverEvent.Infra(uint64_t a1)
{
  return sub_100057D9C( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(_BYTE *)(a1 + 40),  *(_BYTE *)(a1 + 41));
}

uint64_t initializeWithCopy for DriverEvent.Infra(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(_BYTE *)(a2 + 41);
  unsigned __int8 v9 = *(_BYTE *)(a2 + 40);
  sub_100109F08(*(void *)a2, v4, v5, v6, v7, v9, v8);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  *(void *)(a1 + 24)  = v6;
  *(void *)(a1 + 32)  = v7;
  *(_BYTE *)(a1 + 40)  = v9;
  *(_BYTE *)(a1 + 41)  = v8;
  return a1;
}

uint64_t assignWithCopy for DriverEvent.Infra(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(_BYTE *)(a2 + 41);
  unsigned __int8 v9 = *(_BYTE *)(a2 + 40);
  sub_100109F08(*(void *)a2, v4, v5, v6, v7, v9, v8);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  *(void *)(a1 + 24)  = v6;
  *(void *)(a1 + 32)  = v7;
  unsigned __int8 v15 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40)  = v9;
  char v16 = *(_BYTE *)(a1 + 41);
  *(_BYTE *)(a1 + 41)  = v8;
  sub_100057D9C(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t assignWithTake for DriverEvent.Infra(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  __int16 v4 = *(_WORD *)(a2 + 40);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  __int128 v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v10;
  *(void *)(a1 + 32)  = v3;
  char v11 = *(_BYTE *)(a1 + 41);
  unsigned __int8 v12 = *(_BYTE *)(a1 + 40);
  *(_WORD *)(a1 + 40)  = v4;
  sub_100057D9C(v5, v7, v6, v8, v9, v12, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for DriverEvent.Infra(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xF6 && *(_BYTE *)(a1 + 42)) {
    return (*(_DWORD *)a1 + 246);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 41);
  if (v3 <= 0xA) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DriverEvent.Infra(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(_WORD *)(result + 40)  = 0;
    *(void *)uint64_t result = a2 - 246;
    if (a3 >= 0xF6) {
      *(_BYTE *)(result + 42)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xF6) {
      *(_BYTE *)(result + 42)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 41)  = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10010EB94(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 10);
  }
}

uint64_t sub_10010EBAC(uint64_t result, unsigned int a2)
{
  if (a2 >= 0xA)
  {
    *(void *)uint64_t result = a2 - 10;
    *(_OWORD *)(result + 8)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_BYTE *)(result + 40)  = 0;
    LOBYTE(a2)  = 10;
  }

  *(_BYTE *)(result + 41)  = a2;
  return result;
}

ValueMetadata *type metadata accessor for DriverEvent.Infra()
{
  return &type metadata for DriverEvent.Infra;
}

uint64_t storeEnumTagSinglePayload for DriverEvent.SystemState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10010EC30 + 4 * byte_100346E6F[v4]))();
  }
  *a1  = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10010EC64 + 4 * byte_100346E6A[v4]))();
}

uint64_t sub_10010EC64(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10010EC6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x10010EC74LL);
  }
  return result;
}

uint64_t sub_10010EC80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x10010EC88LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10010EC8C(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10010EC94(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for DriverEvent.SystemState()
{
  return &type metadata for DriverEvent.SystemState;
}

uint64_t sub_10010ECB0( uint64_t a1, void (*a2)(void, void, void, void, void, void, void))
{
  return a1;
}

_BYTE *sub_10010ECEC(_BYTE *a1, _BYTE *a2)
{
  return a2;
}

void *sub_10010ED28(void *a1)
{
  uint64_t v2 = a1[10];
  uint64_t v3 = a1[11];
  uint64_t v4 = a1[12];
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_10010ED74(__int128 *a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10010EDB0(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 34);
  if (v1 > 0x80000000) {
    return -v1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10010EDC4(__int128 *a1, uint64_t a2)
{
  return a2;
}

void sub_10010EE28(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  if (!v5)
  {
LABEL_31:
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a1);
    return;
  }

  while ((a1 & 0xC000000000000001LL) != 0)
  {
    id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
LABEL_6:
    uint64_t v2 = v6;
    uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      goto LABEL_38;
    }
LABEL_8:
    unint64_t v8 = 0LL;
    uint64_t v9 = v5 - 1;
    while (1)
    {
      if ((a2 & 0xC000000000000001LL) != 0)
      {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a2);
      }

      else
      {
        if (v8 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_25;
        }
        id v10 = *(id *)(a2 + 32 + 8 * v8);
      }

      char v11 = v10;
      [v2 value];
      double v13 = v12;
      [v11 value];
      double v15 = v13 - v14;
      if (v15 <= 0.0) {
        double v15 = 0.0;
      }
      [v2 setValue:v15];

      if (v9 == v8) {
        goto LABEL_31;
      }
      unint64_t v16 = v8 + 1;
      if ((a1 & 0xC000000000000001LL) != 0)
      {
        id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 + 1, a1);
      }

      else
      {
        if (v16 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_26;
        }
        id v17 = *(id *)(a1 + 40 + 8 * v8);
      }

      uint64_t v2 = v17;
      if (__OFADD__(v16, 1LL)) {
        break;
      }
      if (v7 == ++v8) {
        goto LABEL_38;
      }
    }

    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    if (a1 < 0) {
      uint64_t v18 = a1;
    }
    else {
      uint64_t v18 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a2);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v18);
    if (!v5) {
      goto LABEL_31;
    }
  }

  if (*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    id v6 = *(id *)(a1 + 32);
    goto LABEL_6;
  }

  __break(1u);
LABEL_34:
  if (a2 < 0) {
    uint64_t v19 = a2;
  }
  else {
    uint64_t v19 = a2 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a2);
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(a2);
  if (v7) {
    goto LABEL_8;
  }
LABEL_38:
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a1);
}

void *AWDLTrafficRegistrationOptions.forceUnicastMasterIndicationFrame.unsafeMutableAddressor()
{
  return &static AWDLTrafficRegistrationOptions.forceUnicastMasterIndicationFrame;
}

void *AWDLTrafficRegistrationOptions.remoteCamera.unsafeMutableAddressor()
{
  return &static AWDLTrafficRegistrationOptions.remoteCamera;
}

void *AWDLTrafficRegistrationOptions.tvRemoteCamera.unsafeMutableAddressor()
{
  return &static AWDLTrafficRegistrationOptions.tvRemoteCamera;
}

void *AWDLTrafficRegistrationOptions.remoteScreen.unsafeMutableAddressor()
{
  return &static AWDLTrafficRegistrationOptions.remoteScreen;
}

unint64_t WiFiP2PError.description.getter(uint64_t a1)
{
  unint64_t result = 0x73736563637553LL;
  switch(a1)
  {
    case 0LL:
      return result;
    case 1LL:
      unint64_t result = 0xD000000000000012LL;
      break;
    case 2LL:
    case 3LL:
      unint64_t result = 0x2064696C61766E49LL;
      break;
    case 4LL:
      unint64_t result = 0xD000000000000019LL;
      break;
    case 5LL:
      unint64_t result = 0xD000000000000016LL;
      break;
    case 6LL:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 7LL:
      unint64_t result = 0x616C696176616E55LL;
      break;
    case 8LL:
      unint64_t result = 0xD000000000000018LL;
      break;
    default:
      unint64_t result = 0x6E776F6E6B6E55LL;
      break;
  }

  return result;
}

unint64_t sub_10010F20C()
{
  return WiFiP2PError.description.getter(*v0);
}

uint64_t sub_10010F214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AF70( &qword_100408348,  (uint64_t (*)(uint64_t))type metadata accessor for WiFiP2PError,  (uint64_t)&unk_1003383D0);
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10010F288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AF70( &qword_100408348,  (uint64_t (*)(uint64_t))type metadata accessor for WiFiP2PError,  (uint64_t)&unk_1003383D0);
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t WiFiAwareTerminationReason.description.getter(uint64_t a1)
{
  uint64_t v1 = a1 + 1;
  unint64_t result = 0xD000000000000011LL;
  switch(v1)
  {
    case 0LL:
      return result;
    case 2LL:
      unint64_t result = 0x754F2064656D6954LL;
      break;
    case 3LL:
      unint64_t result = 0x7165522072657355LL;
      break;
    case 4LL:
      unint64_t result = 0x6961462070696843LL;
      break;
    case 5LL:
      unint64_t result = 0xD000000000000018LL;
      break;
    default:
      unint64_t result = 0x6E776F6E6B6E55LL;
      break;
  }

  return result;
}

unint64_t sub_10010F3B8()
{
  return WiFiAwareTerminationReason.description.getter(*v0);
}

uint64_t sub_10010F3C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AF70( &qword_100408340,  (uint64_t (*)(uint64_t))type metadata accessor for WiFiAwareTerminationReason,  (uint64_t)&unk_100338470);
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10010F434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AF70( &qword_100408340,  (uint64_t (*)(uint64_t))type metadata accessor for WiFiAwareTerminationReason,  (uint64_t)&unk_100338470);
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t WiFiP2PInternetSharingPolicy.description.getter(uint64_t a1)
{
  unint64_t result = 0x63696C6F50205249LL;
  switch(a1)
  {
    case 0LL:
      return result;
    case 1LL:
      unint64_t result = 0xD000000000000014LL;
      break;
    case 3LL:
      unint64_t result = 0xD00000000000001BLL;
      break;
    default:
      unint64_t result = 0xD000000000000011LL;
      break;
  }

  return result;
}

unint64_t sub_10010F540()
{
  return WiFiP2PInternetSharingPolicy.description.getter(*v0);
}

id WiFiAwarePublisherDataSessionHandle.init(_:)(unint64_t a1)
{
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1));
  id v4 = [objc_allocWithZone(WiFiMACAddress) initWithAddress:(a1 >> 8) & 0xFFFFFFFFFFFFLL];
  id v5 = [v3 initWithDatapathID:a1 initiatorDataAddress:v4];

  return v5;
}

uint64_t WiFiAwarePublisherDataSessionHandle.peerServiceIdentifier.getter()
{
  unsigned __int8 v1 = [v0 datapathID];
  id v2 = [v0 initiatorDataAddress];
  WiFiMACAddress.wifiAddress.getter();
  uint64_t v4 = v3;

  return v1 | ((v4 & 0xFFFFFFFFFFFFLL) << 8);
}

uint64_t WiFiAwareDataSessionLinkStatus.description.getter(uint64_t a1)
{
  uint64_t v1 = 0x6E776F6E6B6E75LL;
  if (a1 == 1) {
    uint64_t v1 = 0x657669746361LL;
  }
  if (a1) {
    return v1;
  }
  else {
    return 1701602409LL;
  }
}

uint64_t sub_10010F670()
{
  uint64_t v1 = 0x6E776F6E6B6E75LL;
  if (*v0 == 1LL) {
    uint64_t v1 = 0x657669746361LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701602409LL;
  }
}

uint64_t AWDLTrafficRegistrationService.serviceType.getter(uint64_t a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceAirPlay);
  uint64_t v4 = v3;
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v2 == v5 && v4 == v6) {
    goto LABEL_14;
  }
  uint64_t v8 = v6;
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0LL);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);
  if ((v9 & 1) != 0) {
    return 2LL;
  }
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceSidecar);
  uint64_t v4 = v12;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v11 == v13 && v4 == v14) {
    goto LABEL_14;
  }
  uint64_t v16 = v14;
  char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v4, v13, v14, 0LL);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v16);
  if ((v17 & 1) != 0) {
    return 2LL;
  }
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceRemoteCamera);
  uint64_t v4 = v19;
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v22 = v20;
  if (v18 == v21 && v4 == v20) {
    goto LABEL_14;
  }
  char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v4, v21, v20, 0LL);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v22);
  if ((v24 & 1) != 0) {
    return 2LL;
  }
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceTVRemoteCamera);
  uint64_t v4 = v26;
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v29 = v27;
  if (v25 == v28 && v4 == v27) {
    goto LABEL_14;
  }
  char v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v4, v28, v27, 0LL);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v29);
  if ((v30 & 1) != 0) {
    return 2LL;
  }
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceMPRemoteCamera);
  uint64_t v4 = v32;
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v35 = v33;
  if (v31 == v34 && v4 == v33) {
    goto LABEL_14;
  }
  char v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v4, v34, v33, 0LL);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v35);
  if ((v36 & 1) != 0) {
    return 2LL;
  }
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceRemoteScreen);
  uint64_t v4 = v38;
  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v41 = v39;
  if (v37 == v40 && v4 == v39)
  {
LABEL_14:
    uint64_t v10 = 2LL;
    swift_bridgeObjectRelease_n(v4, 2LL);
    return v10;
  }

  char v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v4, v40, v39, 0LL);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v41);
  if ((v42 & 1) != 0) {
    return 2LL;
  }
  else {
    return 0LL;
  }
}

uint64_t AWDLTrafficRegistrationService.showsInfraDisconnectUINotifications.getter(uint64_t a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceSidecar);
  uint64_t v4 = v3;
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v2 == v5 && v4 == v6) {
    goto LABEL_14;
  }
  uint64_t v8 = v6;
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0LL);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);
  if ((v9 & 1) == 0)
  {
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceRemoteCamera);
    uint64_t v4 = v12;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v11 != v13 || v4 != v14)
    {
      uint64_t v16 = v14;
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v4, v13, v14, 0LL);
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v16);
      if ((v17 & 1) != 0) {
        goto LABEL_6;
      }
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceTVRemoteCamera);
      uint64_t v4 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      uint64_t v22 = v20;
      if (v18 != v21 || v4 != v20)
      {
        char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v4, v21, v20, 0LL);
        swift_bridgeObjectRelease(v4);
        swift_bridgeObjectRelease(v22);
        if ((v25 & 1) != 0) {
          goto LABEL_6;
        }
        uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceRemoteScreen);
        uint64_t v4 = v27;
        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
        uint64_t v23 = v28;
        if (v26 != v29 || v4 != v28)
        {
          char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v4, v29, v28, 0LL);
          goto LABEL_15;
        }
      }
    }

uint64_t AWDLTrafficRegistrationService.allowsMultipleConcurrentPeers.getter(uint64_t a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceAirPlay);
  uint64_t v4 = v3;
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v2 == v5 && v4 == v6) {
    goto LABEL_13;
  }
  uint64_t v8 = v6;
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0LL);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);
  if ((v9 & 1) == 0)
  {
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceMPRemoteCamera);
    uint64_t v4 = v12;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v11 != v13 || v4 != v14)
    {
      uint64_t v16 = v14;
      char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v4, v13, v14, 0LL);
LABEL_14:
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v16);
      return v10 & 1;
    }

uint64_t sub_10010FC28()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
}

uint64_t static AWDLTrafficRegistrationOptions.remoteScreen.getter()
{
  return 0x20000000LL;
}

uint64_t static AWDLTrafficRegistrationOptions.tvRemoteCamera.getter()
{
  return 0x40000000LL;
}

uint64_t static AWDLTrafficRegistrationOptions.remoteCamera.getter()
{
  return 0x80000000LL;
}

const mach_header_64 *static AWDLTrafficRegistrationOptions.forceUnicastMasterIndicationFrame.getter()
{
  return &_mh_execute_header;
}

void AWDLTrafficRegistrationConfiguration.init(peerAddress:umiOptions:isActive:)(uint64_t a1, char a2)
{
  __asm { BR              X12 }

id sub_10010FC90(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5 = (void *)AWDLTrafficRegistrationServiceAirPlay;
  *a3  = 0;
  id v6 = v5;
  id v7 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v4));
  id v8 = [objc_allocWithZone(WiFiMACAddress) initWithAddress:v3 & 0xFFFFFFFFFFFFLL];
  id v9 = [v7 initWithUniqueIdentifier:v6 peerAddress:v8];

  return v9;
}

unint64_t WiFiP2PSPITransactionType.description.getter(uint64_t a1)
{
  unint64_t result = 0x6B63696B65646953LL;
  switch(a1)
  {
    case 0LL:
      return result;
    case 1LL:
      unint64_t result = 0xD000000000000010LL;
      break;
    case 2LL:
      unint64_t result = 0x726F462053544143LL;
      break;
    case 3LL:
      unint64_t result = 0x6361422053544143LL;
      break;
    case 4LL:
      unint64_t result = 0xD000000000000013LL;
      break;
    case 5LL:
    case 9LL:
    case 18LL:
      unint64_t result = 0xD000000000000011LL;
      break;
    case 6LL:
      unint64_t result = 0x2079616C50726143LL;
      break;
    case 7LL:
      unint64_t result = 0xD000000000000012LL;
      break;
    case 8LL:
      unint64_t result = 0x7265666E6F435641LL;
      break;
    case 10LL:
      unint64_t result = 0x4620657669746341LL;
      break;
    case 11LL:
      unint64_t result = 0xD000000000000010LL;
      break;
    case 12LL:
      unint64_t result = 0xD000000000000016LL;
      break;
    case 13LL:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 14LL:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 15LL:
      unint64_t result = 0xD000000000000017LL;
      break;
    case 16LL:
      unint64_t result = 0xD000000000000027LL;
      break;
    case 17LL:
      unint64_t result = 0xD000000000000022LL;
      break;
    case 19LL:
      unint64_t result = 0x6C5020616964654DLL;
      break;
    default:
      v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      object  = v3._object;
      String.append(_:)(v3);
      swift_bridgeObjectRelease(object);
      v5._uint64_t countAndFlagsBits = 41LL;
      v5._object  = (void *)0xE100000000000000LL;
      String.append(_:)(v5);
      unint64_t result = 0x286E776F6E6B6E55LL;
      break;
  }

  return result;
}

id WiFiP2PSPITransactionType.serviceIdentifier.getter(uint64_t a1)
{
  else {
    return *(id *)*(&off_1003E5E48 + a1 - 5);
  }
}

uint64_t WiFiP2PSPITransactionType.desiredLatency.getter(uint64_t a1)
{
  uint64_t v1 = a1 - 1;
  uint64_t result = 1LL;
  switch(v1)
  {
    case 0LL:
      return result;
    case 1LL:
      uint64_t result = 2LL;
      break;
    case 2LL:
      uint64_t result = 3LL;
      break;
    case 3LL:
      uint64_t result = 4LL;
      break;
    case 11LL:
      uint64_t result = 5LL;
      break;
    case 17LL:
      uint64_t result = 6LL;
      break;
    default:
      uint64_t result = 0LL;
      break;
  }

  return result;
}

unint64_t sub_100110170()
{
  return WiFiP2PSPITransactionType.description.getter(*v0);
}

uint64_t WiFiAwarePublishConfiguration.furtherServiceDiscoveryFunction.getter()
{
  else {
    return 2LL;
  }
}

unint64_t WiFiAwarePublishDatapathServiceSpecificInfo.genericServiceProtocol.getter()
{
  uint64_t v2 = (char *)&v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_100405118);
  __chkstk_darwin();
  uint64_t v4 = (uint64_t *)((char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  id v6 = (char *)&v20 - v5;
  __chkstk_darwin();
  id v8 = (BOOL *)&v20 - v7;
  unint64_t v21 = sub_100020554((uint64_t)_swiftEmptyArrayStorage);
  *id v8 = [v0 protocolType] != 0;
  uint64_t v9 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  uint64_t v10 = 1LL;
  swift_storeEnumTagMultiPayload(v8, v9, 1LL);
  uint64_t v11 = *(void (**)(BOOL *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
  v11(v8, 0LL, 1LL, v9);
  sub_100111F20((uint64_t)v8, (uint64_t)v6);
  sub_100013D20((uint64_t)v6, 1);
  sub_1000225EC((uint64_t)v8, &qword_100405118);
  NWEndpoint.Port.init(rawValue:)([v0 servicePort]);
  NANGenericServiceProtocol.port.setter((uint64_t)v2);
  id v12 = [v0 hostname];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    unint64_t v16 = v15;

    uint64_t v17 = _s7CoreP2P14NANServiceNameVyACSgSScfC_0(v14, v16);
    if (v18)
    {
      *uint64_t v4 = v17;
      v4[1]  = v18;
      swift_storeEnumTagMultiPayload(v4, v9, 2LL);
      uint64_t v10 = 0LL;
    }
  }

  v11((BOOL *)v4, v10, 1LL, v9);
  sub_100111F20((uint64_t)v4, (uint64_t)v8);
  sub_100013D20((uint64_t)v8, 2);
  sub_1000225EC((uint64_t)v4, &qword_100405118);
  return v21;
}

BOOL Layer3Protocol.init(apiProtocolType:)(uint64_t a1)
{
  return a1 != 0;
}

id WiFiAwareDiscoveryResult.init(nanDiscoveryResultEvent:serviceName:serviceDescriptor:serviceDescriptorExtension:extraServiceSpecificInfo:pairSetupRequired:pairingConfiguration:)( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, void *a10)
{
  uint64_t v15 = v40;
  uint64_t v14 = v41;
  unint64_t v16 = v42;
  sub_1000586C0(a7, (uint64_t)&v43, (uint64_t *)&unk_10040F110);
  if (v44 != 5LL)
  {
    __int128 v46 = v43;
    __int128 v47 = v44;
    uint64_t v48 = v45;
    if (a8)
    {
      sub_1001062A0(v15, v14, v16);
      id v17 = NANGenericServiceProtocol.apiPublishServiceSpecificInfo.getter(a8);
      swift_bridgeObjectRelease(a8);
      if (v17)
      {
LABEL_19:
        sub_100111F68(a7);
        if ((BYTE2(v46) & 1) != 0) {
          char v24 = (BYTE2(v46) & 2) != 0;
        }
        else {
          char v24 = 2;
        }
        uint64_t v22 = (WORD1(v46) >> 2) & 1;
        unint64_t v23 = ((unint64_t)WORD1(v46) >> 6) & 1;
        goto LABEL_23;
      }
    }

    else
    {
      sub_1001062A0(v15, v14, v16);
    }

    sub_1000586C0((uint64_t)&v47, (uint64_t)v49, (uint64_t *)&unk_10040DCD0);
    sub_1000586C0((uint64_t)v49, (uint64_t)&v50, (uint64_t *)&unk_10040DCD0);
    if (v50 != 4LL
      && (v52 = v50, unint64_t v53 = v51, v50 == 2)
      && (uint64_t v25 = *((void *)&v52 + 1),
          unint64_t v26 = v53,
          sub_100112040((uint64_t)&v52),
          _s7CoreP2P25NANGenericServiceProtocolVyACSg10Foundation4DataVcfC_0(v25, v26),
          v27))
    {
      uint64_t v28 = v27;
      id v17 = NANGenericServiceProtocol.apiPublishServiceSpecificInfo.getter(v27);
      swift_bridgeObjectRelease(v28);
    }

    else
    {
      id v17 = 0LL;
    }

    goto LABEL_19;
  }

  if (!a8
    || (id v17 = NANGenericServiceProtocol.apiPublishServiceSpecificInfo.getter(a8), swift_bridgeObjectRelease(a8), !v17))
  {
    sub_1000586C0(a6 + 56, (uint64_t)&v50, (uint64_t *)&unk_10040DCD0);
    sub_1000586C0((uint64_t)&v50, (uint64_t)&v52, (uint64_t *)&unk_10040DCD0);
    if (v52 != 4LL
      && (__int128 v46 = v52, *(void *)&v47 = v53, v52 == 2)
      && (uint64_t v18 = *((void *)&v46 + 1),
          unint64_t v19 = v47,
          sub_100112040((uint64_t)&v46),
          _s7CoreP2P25NANGenericServiceProtocolVyACSg10Foundation4DataVcfC_0(v18, v19),
          v20))
    {
      uint64_t v21 = v20;
      id v17 = NANGenericServiceProtocol.apiPublishServiceSpecificInfo.getter(v20);
      swift_bridgeObjectRelease(v21);
    }

    else
    {
      id v17 = 0LL;
    }
  }

  uint64_t v22 = 0LL;
  unint64_t v23 = 0LL;
  char v24 = 2;
LABEL_23:
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a5);
  id v30 = [objc_allocWithZone(WiFiMACAddress) initWithAddress:a1 >> 16];
  uint64_t v31 = 1LL;
  if ((v24 & 1) != 0) {
    uint64_t v31 = 2LL;
  }
  if (v24 == 2) {
    uint64_t v32 = 0LL;
  }
  else {
    uint64_t v32 = v31;
  }
  LOBYTE(v35)  = a9 & 1;
  id v33 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithServiceName:v29 serviceSpecificInfo:v17 publishID:BYTE1(a1) subscribeID:a1 publisherAddressKey:v30 datapathSupported:v22 datapathCi pherSuite:v23 fsdFunction:v32 rssi:a2 pairSetupRequired:v35 pairingConfiguration:a10];

  sub_100111F68(a7);
  sub_100111FB8(a6);
  swift_bridgeObjectRelease(a3);

  return v33;
}

id NANGenericServiceProtocol.apiPublishServiceSpecificInfo.getter(uint64_t a1)
{
  id v2 = [objc_allocWithZone(WiFiAwarePublishServiceSpecificInfo) init];
  NANGenericServiceProtocol.instanceName.getter(a1);
  if (v3)
  {
    uint64_t v5 = v3;
    NSString v6 = String._bridgeToObjectiveC()();
    *(void *)&double v4 = swift_bridgeObjectRelease(v5).n128_u64[0];
  }

  else
  {
    NSString v6 = 0LL;
  }

  objc_msgSend(v2, "setInstanceName:", v6, v4);

  uint64_t v7 = NANGenericServiceProtocol.textInfo.getter(a1);
  if (v8 >> 60 == 15)
  {
    isa  = 0LL;
  }

  else
  {
    uint64_t v10 = v7;
    unint64_t v11 = v8;
    isa  = Data._bridgeToObjectiveC()().super.isa;
    sub_100020B40(v10, v11);
  }

  [v2 setTxtRecordData:isa];

  uint64_t v12 = NANGenericServiceProtocol.blob.getter(a1);
  if (v13 >> 60 == 15)
  {
    NANGenericServiceProtocol.vendorSpecificData.getter(a1);
    if (v15 >> 60 == 15)
    {
      Class v16 = 0LL;
      goto LABEL_13;
    }

    uint64_t v17 = v14;
    unint64_t v18 = v15;
  }

  else
  {
    uint64_t v17 = v12;
    unint64_t v18 = v13;
  }

  Class v16 = Data._bridgeToObjectiveC()().super.isa;
  sub_1000208D8(v17, v18);
LABEL_13:
  [v2 setBlob:v16];

  id v19 = [v2 instanceName];
  if (v19)
  {
  }

  else
  {
    id v20 = [v2 txtRecordData];
    if (v20 || (id v20 = [v2 blob]) != 0)
    {
      uint64_t v21 = v20;
      uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
      unint64_t v24 = v23;

      sub_1000208D8(v22, v24);
    }

    else
    {

      return 0LL;
    }
  }

  return v2;
}

uint64_t Layer3Protocol.init(apiProtocolType:)(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    return 2LL;
  }
  else {
    return a1 != 0;
  }
}

uint64_t Layer3Protocol.apiProtocolType.getter(char a1)
{
  return a1 & 1;
}

void WiFiAwareDataSessionStatisticsReport.difference(from:)(void *a1)
{
  id v3 = v1;
  id v4 = [v3 dfsChannelsCount];
  id v5 = [v4 integerValue];

  id v6 = [a1 dfsChannelsCount];
  id v7 = [v6 integerValue];

  if (__OFSUB__(v5, v7))
  {
    __break(1u);
    goto LABEL_31;
  }

  isa  = Int._bridgeToObjectiveC()().super.super.isa;
  [v3 setDfsChannelsCount:isa];

  id v9 = v3;
  id v10 = [v9 csaCount];
  id v11 = [v10 integerValue];

  id v12 = [a1 csaCount];
  id v13 = [v12 integerValue];

  if (__OFSUB__(v11, v13))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  Class v14 = Int._bridgeToObjectiveC()().super.super.isa;
  [v9 setCsaCount:v14];

  id v15 = v9;
  id v16 = [v15 quietIECount];
  id v17 = [v16 integerValue];

  id v18 = [a1 quietIECount];
  id v19 = [v18 integerValue];

  if (__OFSUB__(v17, v19))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  Class v20 = Int._bridgeToObjectiveC()().super.super.isa;
  [v15 setQuietIECount:v20];

  id v21 = v15;
  id v22 = [v21 txErrorCount];
  id v23 = [v22 integerValue];

  id v24 = [a1 txErrorCount];
  id v25 = [v24 integerValue];

  if (__OFSUB__(v23, v25))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  Class v26 = Int._bridgeToObjectiveC()().super.super.isa;
  [v21 setTxErrorCount:v26];

  id v27 = v21;
  id v28 = [v27 packetsOn2GCount];
  id v29 = [v28 integerValue];

  id v30 = [a1 packetsOn2GCount];
  id v31 = [v30 integerValue];

  if (__OFSUB__(v29, v31))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  Class v32 = Int._bridgeToObjectiveC()().super.super.isa;
  [v27 setPacketsOn2GCount:v32];

  id v33 = v27;
  id v34 = [v33 packetsNAVOn2GCount];
  id v35 = [v34 integerValue];

  id v36 = [a1 packetsNAVOn2GCount];
  id v37 = [v36 integerValue];

  if (__OFSUB__(v35, v37))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  Class v38 = Int._bridgeToObjectiveC()().super.super.isa;
  [v33 setPacketsNAVOn2GCount:v38];

  id v39 = v33;
  id v40 = [v39 packetsHOFOn2GCount];
  id v41 = [v40 integerValue];

  id v42 = [a1 packetsHOFOn2GCount];
  id v43 = [v42 integerValue];

  if (__OFSUB__(v41, v43))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  Class v44 = Int._bridgeToObjectiveC()().super.super.isa;
  [v39 setPacketsHOFOn2GCount:v44];

  id v45 = v39;
  id v46 = [v45 packetsOn5GCount];
  id v47 = [v46 integerValue];

  id v48 = [a1 packetsOn5GCount];
  id v49 = [v48 integerValue];

  if (__OFSUB__(v47, v49))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  Class v50 = Int._bridgeToObjectiveC()().super.super.isa;
  [v45 setPacketsOn5GCount:v50];

  id v51 = v45;
  id v52 = [v51 packetsOverridenOn5GCount];
  id v53 = [v52 integerValue];

  id v54 = [a1 packetsOverridenOn5GCount];
  id v55 = [v54 integerValue];

  if (__OFSUB__(v53, v55))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  Class v56 = Int._bridgeToObjectiveC()().super.super.isa;
  [v51 setPacketsOverridenOn5GCount:v56];

  id v57 = v51;
  id v58 = [v57 infraRelayRequestersCount];
  id v59 = [v58 integerValue];

  id v60 = [a1 infraRelayRequestersCount];
  id v61 = [v60 integerValue];

  if (__OFSUB__(v59, v61))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  Class v62 = Int._bridgeToObjectiveC()().super.super.isa;
  [v57 setInfraRelayRequestersCount:v62];

  id v63 = v57;
  id v64 = [v63 txExpiredCount];
  id v65 = [v64 integerValue];

  id v66 = [a1 txExpiredCount];
  id v67 = [v66 integerValue];

  if (__OFSUB__(v65, v67))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  Class v68 = Int._bridgeToObjectiveC()().super.super.isa;
  [v63 setTxExpiredCount:v68];

  id v69 = v63;
  id v70 = [v69 txNoACKCount];
  id v71 = [v70 integerValue];

  id v72 = [a1 txNoACKCount];
  id v73 = [v72 integerValue];

  if (__OFSUB__(v71, v73))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }

  Class v74 = Int._bridgeToObjectiveC()().super.super.isa;
  [v69 setTxNoACKCount:v74];

  id v75 = v69;
  id v76 = [v75 txFailedCount];
  id v77 = [v76 integerValue];

  id v78 = [a1 txFailedCount];
  id v79 = [v78 integerValue];

  if (__OFSUB__(v77, v79))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }

  Class v80 = Int._bridgeToObjectiveC()().super.super.isa;
  [v75 setTxFailedCount:v80];

  id v81 = v75;
  id v82 = [v81 txNoResourcesCount];
  id v83 = [v82 integerValue];

  id v84 = [a1 txNoResourcesCount];
  id v85 = [v84 integerValue];

  if (__OFSUB__(v83, v85))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }

  Class v86 = Int._bridgeToObjectiveC()().super.super.isa;
  [v81 setTxNoResourcesCount:v86];

  id v87 = v81;
  id v88 = [v87 txIOErrorCount];
  v89  = [v88 integerValue];

  id v90 = [a1 txIOErrorCount];
  id v91 = [v90 integerValue];

  if (__OFSUB__(v89, v91))
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }

  Class v92 = Int._bridgeToObjectiveC()().super.super.isa;
  [v87 setTxIOErrorCount:v92];

  id v93 = v87;
  id v94 = [v93 txMemoryErrorCount];
  id v95 = [v94 integerValue];

  id v96 = [a1 txMemoryErrorCount];
  id v97 = [v96 integerValue];

  if (__OFSUB__(v95, v97))
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }

  Class v98 = Int._bridgeToObjectiveC()().super.super.isa;
  [v93 setTxMemoryErrorCount:v98];

  id v99 = v93;
  v100  = [v99 txChipModeErrorCount];
  id v101 = [v100 integerValue];

  id v102 = [a1 txChipModeErrorCount];
  id v103 = [v102 integerValue];

  if (__OFSUB__(v101, v103))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }

  Class v104 = Int._bridgeToObjectiveC()().super.super.isa;
  [v99 setTxChipModeErrorCount:v104];

  v105  = v99;
  v106  = [v105 txNoRemotePeerCount];
  id v107 = [v106 integerValue];

  v108  = [a1 txNoRemotePeerCount];
  id v109 = [v108 integerValue];

  if (__OFSUB__(v107, v109))
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }

  Class v110 = Int._bridgeToObjectiveC()().super.super.isa;
  [v105 setTxNoRemotePeerCount:v110];

  v111  = v105;
  v112  = [v111 txInternalErrorCount];
  id v113 = [v112 integerValue];

  id v114 = [a1 txInternalErrorCount];
  v115  = [v114 integerValue];

  if (__OFSUB__(v113, v115))
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }

  Class v116 = Int._bridgeToObjectiveC()().super.super.isa;
  [v111 setTxInternalErrorCount:v116];

  id v117 = v111;
  v118  = [v117 txDroppedCount];
  v119  = [v118 integerValue];

  v120  = [a1 txDroppedCount];
  id v121 = [v120 integerValue];

  if (__OFSUB__(v119, v121))
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  v122  = Int._bridgeToObjectiveC()().super.super.isa;
  [v117 setTxDroppedCount:v122];

  v123  = v117;
  id v124 = [v123 txFirmwareFreePacketCount];
  v125  = [v124 integerValue];

  id v126 = [a1 txFirmwareFreePacketCount];
  id v127 = [v126 integerValue];

  if (__OFSUB__(v125, v127))
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }

  Class v128 = Int._bridgeToObjectiveC()().super.super.isa;
  [v123 setTxFirmwareFreePacketCount:v128];

  id v129 = v123;
  id v130 = [v129 txMaxRetriesCount];
  id v131 = [v130 integerValue];

  v132  = [a1 txMaxRetriesCount];
  id v133 = [v132 integerValue];

  if (__OFSUB__(v131, v133))
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }

  Class v134 = Int._bridgeToObjectiveC()().super.super.isa;
  [v129 setTxMaxRetriesCount:v134];

  id v135 = v129;
  id v136 = [v135 txForceLifetimeExpiredCount];
  v137  = [v136 integerValue];

  v138  = [a1 txForceLifetimeExpiredCount];
  v139  = [v138 integerValue];

  if (__OFSUB__(v137, v139))
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

  v140  = Int._bridgeToObjectiveC()().super.super.isa;
  [v135 setTxForceLifetimeExpiredCount:v140];

  v141  = v135;
  v142  = [v141 channelSequenceMismatchOn5GCount];
  v143  = [v142 integerValue];

  v144  = [a1 channelSequenceMismatchOn5GCount];
  v145  = [v144 integerValue];

  if (__OFSUB__(v143, v145))
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }

  v146  = Int._bridgeToObjectiveC()().super.super.isa;
  [v141 setChannelSequenceMismatchOn5GCount:v146];

  v147  = v141;
  v148  = [v147 channelSequenceMismatchOn2GCount];
  v149  = [v148 integerValue];

  v150  = [a1 channelSequenceMismatchOn2GCount];
  v151  = [v150 integerValue];

  if (__OFSUB__(v149, v151))
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }

  v152  = Int._bridgeToObjectiveC()().super.super.isa;
  [v147 setChannelSequenceMismatchOn2GCount:v152];

  v153  = v147;
  v154  = [v153 infraScanCount];
  v155  = [v154 integerValue];

  v156  = [a1 infraScanCount];
  v157  = [v156 integerValue];

  if (__OFSUB__(v155, v157))
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }

  v158  = Int._bridgeToObjectiveC()().super.super.isa;
  [v153 setInfraScanCount:v158];

  v159  = v153;
  v160  = [v159 infraAssocCount];
  v161  = [v160 integerValue];

  v162  = [a1 infraAssocCount];
  v163  = [v162 integerValue];

  if (__OFSUB__(v161, v163))
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }

  v164  = Int._bridgeToObjectiveC()().super.super.isa;
  [v159 setInfraAssocCount:v164];

  v165  = v159;
  v166  = [v165 infraDisassocCount];
  v167  = [v166 integerValue];

  v168  = [a1 infraDisassocCount];
  v169  = [v168 integerValue];

  if (!__OFSUB__(v167, v169))
  {
    v170  = Int._bridgeToObjectiveC()().super.super.isa;
    [v165 setInfraDisassocCount:v170];

    v171  = v165;
    v172  = [v171 txCCAHistogram];
    v173  = sub_10011206C();
    v174  = static Array._unconditionallyBridgeFromObjectiveC(_:)(v172, v173);

    v175  = a1;
    v176  = [v175 txCCAHistogram];
    v177  = static Array._unconditionallyBridgeFromObjectiveC(_:)(v176, v173);

    sub_10010EE28(v174, v177);
    swift_bridgeObjectRelease(v177);
    swift_bridgeObjectRelease(v174);
    v178  = v171;
    v179  = [v178 rxRSSIHistogram];
    v180  = static Array._unconditionallyBridgeFromObjectiveC(_:)(v179, v173);

    v181  = v175;
    v182  = [v181 rxRSSIHistogram];
    v183  = static Array._unconditionallyBridgeFromObjectiveC(_:)(v182, v173);

    sub_10010EE28(v180, v183);
    swift_bridgeObjectRelease(v183);
    swift_bridgeObjectRelease(v180);
    v184  = v178;
    v185  = [v184 rxFWDelayHistogram];
    v186  = static Array._unconditionallyBridgeFromObjectiveC(_:)(v185, v173);

    v187  = v181;
    v188  = [v187 rxFWDelayHistogram];
    v189  = static Array._unconditionallyBridgeFromObjectiveC(_:)(v188, v173);

    sub_10010EE28(v186, v189);
    swift_bridgeObjectRelease(v189);
    swift_bridgeObjectRelease(v186);
    v190  = v184;
    v191  = [v190 rxIPCDelayHistogram];
    v192  = static Array._unconditionallyBridgeFromObjectiveC(_:)(v191, v173);

    v193  = v187;
    v194  = [v193 rxIPCDelayHistogram];
    v195  = static Array._unconditionallyBridgeFromObjectiveC(_:)(v194, v173);

    sub_10010EE28(v192, v195);
    swift_bridgeObjectRelease(v195);
    swift_bridgeObjectRelease(v192);
    v196  = v190;
    v197  = [v196 txConsecutiveErrorsHistogram];
    v198  = static Array._unconditionallyBridgeFromObjectiveC(_:)(v197, v173);

    v199  = v193;
    v200  = [v199 txConsecutiveErrorsHistogram];
    v201  = static Array._unconditionallyBridgeFromObjectiveC(_:)(v200, v173);

    sub_10010EE28(v198, v201);
    swift_bridgeObjectRelease(v201);
    swift_bridgeObjectRelease(v198);
    v202  = v196;
    v203  = [v202 txPacketExpiryHistogram];
    v204  = static Array._unconditionallyBridgeFromObjectiveC(_:)(v203, v173);

    v205  = v199;
    v206  = [v205 txPacketExpiryHistogram];
    v207  = static Array._unconditionallyBridgeFromObjectiveC(_:)(v206, v173);

    sub_10010EE28(v204, v207);
    swift_bridgeObjectRelease(v207);
    swift_bridgeObjectRelease(v204);
    return;
  }

uint64_t DNSRecords.Identifier.serviceType.getter(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v5 = a3 & 0xFF01;
  if (sub_1000FAC64(0x79616C707269615FLL, 0xE800000000000000LL, 256, a1, a2, a3 & 0xFF01)
    || sub_1000FAC64(0x79616C707269615FLL, 0xEC0000007032702DLL, 256, a1, a2, v5)
    || sub_1000FAC64(0x706F61725FLL, 0xE500000000000000LL, 256, a1, a2, v5)
    || sub_1000FAC64(0x696E61706D6F635FLL, 0xEF6B6E696C2D6E6FLL, 256, a1, a2, v5))
  {
    return 2LL;
  }

  if (sub_1000FAC64(0x6B6E696C64725FLL, 0xE700000000000000LL, 256, a1, a2, v5)) {
    return 2LL;
  }
  return 0LL;
}

id NANGenericServiceProtocol.apiDatapathServiceSpecificInfo.getter(uint64_t a1)
{
  uint64_t v2 = sub_100002274(&qword_1004050A0);
  __chkstk_darwin(v2);
  id v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for NWEndpoint.Port(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  id v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  id v15 = (char *)&v27 - v14;
  if (!*(void *)(a1 + 16)) {
    return 0LL;
  }
  unint64_t v16 = sub_10001C01C(1);
  if ((v17 & 1) == 0) {
    return 0LL;
  }
  sub_1001120A8(*(void *)(a1 + 56) + *(void *)(v10 + 72) * v16, (uint64_t)v13);
  sub_1001120EC((uint64_t)v13, (uint64_t)v15);
  sub_100063A6C();
  unsigned __int8 v19 = v18;
  int v20 = v18;
  sub_100112130((uint64_t)v15);
  if (v20 == 2) {
    return 0LL;
  }
  NANGenericServiceProtocol.port.getter(a1, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
  {
    sub_1000225EC((uint64_t)v4, &qword_1004050A0);
    return 0LL;
  }

  uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  id v21 = [objc_allocWithZone(WiFiAwarePublishDatapathServiceSpecificInfo) initWithProtocolType:v19 & 1 servicePort:(unsigned __int16)NWEndpoint.Port.rawValue.getter(v23)];
  NANGenericServiceProtocol.serviceName.getter(a1);
  if (v24)
  {
    uint64_t v25 = v24;
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v25);
  }

  else
  {
    NSString v26 = 0LL;
  }

  [v21 setHostname:v26];

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v21;
}

uint64_t sub_100111F20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_100405118);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100111F68(uint64_t a1)
{
  return a1;
}

uint64_t sub_100111F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return result;
}

uint64_t sub_100111FB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  unint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(unsigned __int16 *)(a1 + 48) | (*(unsigned __int8 *)(a1 + 50) << 16);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = *(void *)(a1 + 72);
  sub_1000208D8(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease(v2);
  sub_1001062BC(v3, v4, v5);
  sub_1001062E0(v6, v7, v8);
  return a1;
}

uint64_t sub_100112040(uint64_t a1)
{
  return a1;
}

unint64_t sub_10011206C()
{
  unint64_t result = qword_100406B18;
  if (!qword_100406B18)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___WiFiAwareDataSessionStatisticsHistogramBin);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100406B18);
  }

  return result;
}

uint64_t sub_1001120A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001120EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100112130(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_10011216C(char a1)
{
  __asm { BR              X10 }

Swift::Int sub_1001121C4()
{
  return Hasher._finalize()();
}

void sub_100112274(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1001122BC(uint64_t a1)
{
  return swift_bridgeObjectRelease(0x8000000100361820LL);
}

void sub_100112358(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_100112398(uint64_t a1)
{
  return swift_bridgeObjectRelease(v1);
}

void *sub_100112438@<X0>(unint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = (void *)*v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0) {
    uint64_t v5 = sub_10019EA34(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v7 = v6 - 1;
    unint64_t v8 = &v5[2 * a1];
    __int128 v10 = *((_OWORD *)v8 + 2);
    uint64_t v9 = v8 + 4;
    *a2  = v10;
    uint64_t v11 = v6 - 1 - a1;
    if (v11 >= 0)
    {
      unint64_t result = memmove(v9, v9 + 2, 16 * v11);
      _OWORD v5[2] = v7;
      *uint64_t v2 = v5;
      return result;
    }
  }

  char v13 = 2;
  unint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v13,  1046LL,  0);
  __break(1u);
  return result;
}

void *NANMatchingFilter.maximumLength.unsafeMutableAddressor()
{
  return &static NANMatchingFilter.maximumLength;
}

uint64_t NANMatchingFilter.FilterType.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100112560 + 4 * byte_100348311[a1]))( 0xD000000000000011LL,  0x8000000100361800LL);
}

unint64_t sub_100112560()
{
  return 0xD000000000000010LL;
}

uint64_t sub_10011257C()
{
  return 0x546873696C627570LL;
}

uint64_t sub_1001125A0()
{
  return 0x526873696C627570LL;
}

uint64_t sub_1001125C4()
{
  return 0x73655265676E6172LL;
}

uint64_t sub_1001125E8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10002A7D8(*a1, *a2);
}

unint64_t sub_1001125F4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = _s7CoreP2P17NANMatchingFilterV0D4TypeO8rawValueAESgSS_tcfC_0(*a1);
  *a2  = result;
  return result;
}

uint64_t sub_100112620@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NANMatchingFilter.FilterType.rawValue.getter(*v1);
  *a1  = result;
  a1[1]  = v4;
  return result;
}

void sub_100112648()
{
}

void sub_100112650(uint64_t a1)
{
}

void sub_100112658(uint64_t a1)
{
}

uint64_t sub_100112660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100114994();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001126BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100114994();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void *NANMatchingFilter.RespondCondition.defaultValue.unsafeMutableAddressor()
{
  return &static NANMatchingFilter.RespondCondition.defaultValue;
}

CoreP2P::NANMatchingFilter::RespondCondition_optional __swiftcall NANMatchingFilter.RespondCondition.init(rawValue:)( Swift::String rawValue)
{
  object  = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object  = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D6200, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1) {
    v4.value  = CoreP2P_NANMatchingFilter_RespondCondition_txNotEqualRx;
  }
  else {
    v4.value  = CoreP2P_NANMatchingFilter_RespondCondition_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t NANMatchingFilter.RespondCondition.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x757145746F4E7874LL;
  }
  else {
    return 0x526C617571457874LL;
  }
}

uint64_t sub_1001127A8(char *a1, char *a2)
{
  return sub_10002A728(*a1, *a2);
}

uint64_t sub_1001127B4@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v3._uint64_t countAndFlagsBits = *a1;
  CoreP2P::NANMatchingFilter::RespondCondition_optional v4 = (void *)a1[1];
  v3._object  = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D6200, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2  = v7;
  return result;
}

void sub_100112810(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x526C617571457874LL;
  if (*v1) {
    uint64_t v2 = 0x757145746F4E7874LL;
  }
  unint64_t v3 = 0xE900000000000078LL;
  if (*v1) {
    unint64_t v3 = 0xEC00000078526C61LL;
  }
  *a1  = v2;
  a1[1]  = v3;
}

Swift::Int sub_10011285C()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  if (v1) {
    uint64_t v2 = 0x757145746F4E7874LL;
  }
  else {
    uint64_t v2 = 0x526C617571457874LL;
  }
  if (v1) {
    unint64_t v3 = 0xEC00000078526C61LL;
  }
  else {
    unint64_t v3 = 0xE900000000000078LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1001128E8(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 0x757145746F4E7874LL;
  }
  else {
    uint64_t v2 = 0x526C617571457874LL;
  }
  if (*v1) {
    unint64_t v3 = 0xEC00000078526C61LL;
  }
  else {
    unint64_t v3 = 0xE900000000000078LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100112950(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2) {
    uint64_t v3 = 0x757145746F4E7874LL;
  }
  else {
    uint64_t v3 = 0x526C617571457874LL;
  }
  if (v2) {
    unint64_t v4 = 0xEC00000078526C61LL;
  }
  else {
    unint64_t v4 = 0xE900000000000078LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1001129D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100114950();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100112A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100114950();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANMatchingFilter.addFilter(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_100406410);
  v5._rawValue  = (void *)swift_initStackObject(v4, &v7);
  *((_OWORD *)v5._rawValue + 1)  = xmmword_100339900;
  *((void *)v5._rawValue + 4)  = a1;
  *((void *)v5._rawValue + 5)  = a2;
  sub_100020AFC(a1, a2);
  NANMatchingFilter.addFilters(_:)(v5);
  swift_setDeallocating(v5._rawValue);
  return swift_arrayDestroy((char *)v5._rawValue + 32, *((void *)v5._rawValue + 2), &type metadata for Data);
}

Swift::Void __swiftcall NANMatchingFilter.addFilters(_:)(Swift::OpaquePointer a1)
{
  if (*((void *)a1._rawValue + 2))
  {
    swift_bridgeObjectRetain(a1._rawValue);
    __asm { BR              X9 }
  }

  sub_10019DB28((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t NANMatchingFilter.removeFilter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 8);
  swift_bridgeObjectRetain(v5);
  unint64_t v6 = sub_100112D90(a1, a2, v5);
  LOBYTE(a1)  = v7;
  uint64_t result = swift_bridgeObjectRelease(v5);
  if ((a1 & 1) == 0)
  {
    sub_100112438(v6, &v9);
    return sub_1000208D8(v9, *((unint64_t *)&v9 + 1));
  }

  return result;
}

uint64_t sub_100112D2C(int a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  if (*(_DWORD *)(a2 + 32) == a1) {
    return 0LL;
  }
  uint64_t result = 0LL;
  uint64_t v5 = v2 - 1;
  while (v5 != result)
  {
    int v6 = *(_DWORD *)(a2 + 36 + 4 * result++);
    if (v6 == a1) {
      return result;
    }
  }

  return 0LL;
}

uint64_t sub_100112D90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16)) {
    __asm { BR              X8 }
  }

  return 0LL;
}

void sub_1001136FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X9 }

uint64_t sub_100113760( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t))((char *)&loc_1001137D4 + *((int *)qword_100113998 + v24)))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a22,  v22 >> 40,  HIDWORD(v22),  v22 >> 24,  v22 >> 16,  v22 >> 8,  HIBYTE(v23));
}

uint64_t sub_1001137E8()
{
  if (v2 == v27) {
    return 0LL;
  }
  if (!v4)
  {
    if (v2 < v5)
    {
      *(_BYTE *)(v6 - 102)  = v1;
      *(_BYTE *)(v6 - 101)  = v25;
      *(_BYTE *)(v6 - 100)  = v24;
      *(_BYTE *)(v6 - 99)  = v23;
      *(_BYTE *)(v6 - 98)  = v22;
      *(_BYTE *)(v6 - 97)  = v21;
      *(_BYTE *)(v6 - 96)  = v20;
      *(_BYTE *)(v6 - 95)  = v19;
      *(_BYTE *)(v6 - 94)  = v0;
      *(_BYTE *)(v6 - 93)  = v18;
      *(_BYTE *)(v6 - 92)  = v17;
      *(_BYTE *)(v6 - 91)  = v16;
      *(_BYTE *)(v6 - 90)  = v15;
      *(_BYTE *)(v6 - 89)  = v14;
      return v2;
    }

    goto LABEL_22;
  }

  if (v4 != 1)
  {
    if (v2 >= *(void *)(v1 + 16))
    {
      if (v2 >= *(void *)(v1 + 24))
      {
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }

      uint64_t v11 = __DataStorage._bytes.getter();
      if (v11)
      {
        uint64_t v8 = v11;
        uint64_t v12 = __DataStorage._offset.getter();
        uint64_t v10 = v2 - v12;
        if (!__OFSUB__(v2, v12)) {
          goto LABEL_17;
        }
LABEL_26:
        __break(1u);
        JUMPOUT(0x100113978LL);
      }

uint64_t NANMatchingFilter.count.getter(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

BOOL NANMatchingFilter.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16) == 0LL;
}

void NANMatchingFilter.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }

void sub_100113A18()
{
  Swift::UInt v2 = *(void *)(v0 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    swift_bridgeObjectRetain(v0);
    int v3 = (unint64_t *)(v0 + 40);
    do
    {
      uint64_t v4 = *(v3 - 1);
      unint64_t v5 = *v3;
      sub_100020AFC(v4, *v3);
      Data.hash(into:)(v1, v4, v5);
      sub_1000208D8(v4, v5);
      v3 += 2;
      --v2;
    }

    while (v2);
    swift_bridgeObjectRelease(v0);
  }

uint64_t static NANMatchingFilter.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((sub_10002A7D8(a1, a3) & 1) != 0) {
    return sub_10007A838(a2, a4);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100113B74()
{
  if (*v0) {
    return 0xD000000000000012LL;
  }
  else {
    return 1701869940LL;
  }
}

uint64_t sub_100113BAC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100114874(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_100113BD0(uint64_t a1)
{
  unint64_t v2 = sub_100114120();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100113BF8(uint64_t a1)
{
  unint64_t v2 = sub_100114120();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANMatchingFilter.encode(to:)(void *a1, char a2, uint64_t a3)
{
  uint64_t v7 = sub_100002274(&qword_100408350);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100021104(a1, v11);
  unint64_t v13 = sub_100114120();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANMatchingFilter.CodingKeys,  &type metadata for NANMatchingFilter.CodingKeys,  v13,  v11,  v12);
  char v22 = a2;
  char v21 = 0;
  unint64_t v14 = sub_100114164();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v7, &type metadata for NANMatchingFilter.FilterType, v14);
  if (!v3)
  {
    uint64_t v19 = a3;
    char v20 = 1;
    uint64_t v15 = sub_100002274(&qword_100408368);
    uint64_t v16 = sub_100114A1C( &qword_100408370,  (void (*)(void))sub_10005CD78,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v7, v15, v16);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANMatchingFilter.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t NANMatchingFilter.init(from:)(void *a1)
{
  return sub_1001142B8(a1);
}

Swift::Int sub_100113DEC()
{
  char v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  NANMatchingFilter.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_100113E38(uint64_t a1)
{
}

Swift::Int sub_100113E44(uint64_t a1)
{
  char v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  NANMatchingFilter.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t sub_100113E8C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001142B8(a1);
  if (!v2)
  {
    *(_BYTE *)a2  = result;
    *(void *)(a2 + 8)  = v5;
  }

  return result;
}

uint64_t sub_100113EB8(void *a1)
{
  return NANMatchingFilter.encode(to:)(a1, *(_BYTE *)v1, *(void *)(v1 + 8));
}

uint64_t sub_100113ED4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  uint64_t v3 = *((void *)a2 + 1);
  if ((sub_10002A7D8(*a1, *a2) & 1) != 0) {
    return sub_10007A838(v2, v3);
  }
  else {
    return 0LL;
  }
}

CoreP2P::NANMatchingFilter __swiftcall NANMatchingFilter.init(type:)(CoreP2P::NANMatchingFilter::FilterType type)
{
  uint64_t v1 = _swiftEmptyArrayStorage;
  result.matchingFilterList._rawValue  = v1;
  result.type  = type;
  return result;
}

void sub_100113F2C()
{
}

uint64_t NANMatchingFilter.FilterType.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100113F74 + 4 * byte_10034831B[a1]))( 0x6269726373627553LL,  0xEC00000058542065LL);
}

  ;
}

uint64_t sub_100113F84()
{
  return 0x206873696C627550LL;
}

uint64_t sub_100113FA4()
{
  return 0x206873696C627550LL;
}

uint64_t sub_100113FC0()
{
  return 0x65522065676E6152LL;
}

uint64_t sub_100113FE4()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100114020 + 4 * byte_100348320[*v0]))( 0x6269726373627553LL,  0xEC00000058542065LL);
}

  ;
}

uint64_t sub_100114030()
{
  return 0x206873696C627550LL;
}

uint64_t sub_100114050()
{
  return 0x206873696C627550LL;
}

uint64_t sub_10011406C()
{
  return 0x65522065676E6152LL;
}

uint64_t sub_100114090()
{
  if (*v0) {
    return 0x757145746F4E7874LL;
  }
  else {
    return 0x526C617571457874LL;
  }
}

unint64_t _s7CoreP2P17NANMatchingFilterV0D4TypeO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  object  = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object  = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D6168, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5) {
    return 5LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_100114120()
{
  unint64_t result = qword_100408358;
  if (!qword_100408358)
  {
    unint64_t result = swift_getWitnessTable(&unk_100348754, &type metadata for NANMatchingFilter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100408358);
  }

  return result;
}

unint64_t sub_100114164()
{
  unint64_t result = qword_100408360;
  if (!qword_100408360)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANMatchingFilter.FilterType,  &type metadata for NANMatchingFilter.FilterType);
    atomic_store(result, (unint64_t *)&qword_100408360);
  }

  return result;
}

void _s7CoreP2P17NANMatchingFilterV11descriptionSSvg_0(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100114214(uint64_t a1)
{
  unint64_t v1 = 0xEC00000058522065LL;
  String.append(_:)(*(Swift::String *)&a1);
  swift_bridgeObjectRelease(0xEC00000058522065LL);
  v2._uint64_t countAndFlagsBits = 62LL;
  v2._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  return v4;
}

uint64_t sub_1001142B8(void *a1)
{
  uint64_t v2 = sub_100002274(&qword_1004083B8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100021104(a1, v6);
  unint64_t v8 = sub_100114120();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANMatchingFilter.CodingKeys,  &type metadata for NANMatchingFilter.CodingKeys,  v8,  v6,  v7);
  char v17 = 0;
  unint64_t v9 = sub_1001149D8();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v18,  &type metadata for NANMatchingFilter.FilterType,  &v17,  v2,  &type metadata for NANMatchingFilter.FilterType,  v9);
  uint64_t v10 = v18;
  uint64_t v11 = sub_100002274(&qword_100408368);
  char v15 = 1;
  uint64_t v12 = sub_100114A1C( &qword_1004083C8,  (void (*)(void))sub_1000702C8,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, &v15, v2, v11, v12);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100002AC4(a1);
  return v10;
}

unint64_t sub_100114460()
{
  unint64_t result = qword_100408378;
  if (!qword_100408378)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANMatchingFilter.FilterType,  &type metadata for NANMatchingFilter.FilterType);
    atomic_store(result, (unint64_t *)&qword_100408378);
  }

  return result;
}

unint64_t sub_1001144A8()
{
  unint64_t result = qword_100408380;
  if (!qword_100408380)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANMatchingFilter.RespondCondition,  &type metadata for NANMatchingFilter.RespondCondition);
    atomic_store(result, (unint64_t *)&qword_100408380);
  }

  return result;
}

unint64_t sub_1001144F0()
{
  unint64_t result = qword_100408388;
  if (!qword_100408388)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANMatchingFilter,  &type metadata for NANMatchingFilter);
    atomic_store(result, (unint64_t *)&qword_100408388);
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for NANAttribute.CipherSuiteInformation(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a1 + 8)  = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for NANActionFrame(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8)  = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for NANAttribute.CipherSuiteInformation(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for NANMatchingFilter()
{
  return &type metadata for NANMatchingFilter;
}

uint64_t storeEnumTagSinglePayload for NANMatchingFilter.FilterType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10011463C + 4 * byte_10034832F[v4]))();
  }
  *a1  = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100114670 + 4 * byte_10034832A[v4]))();
}

uint64_t sub_100114670(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100114678(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x100114680LL);
  }
  return result;
}

uint64_t sub_10011468C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x100114694LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_100114698(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001146A0(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANMatchingFilter.FilterType()
{
  return &type metadata for NANMatchingFilter.FilterType;
}

ValueMetadata *type metadata accessor for NANMatchingFilter.RespondCondition()
{
  return &type metadata for NANMatchingFilter.RespondCondition;
}

uint64_t _s7CoreP2P17NANMatchingFilterV16RespondConditionOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10011471C + 4 * byte_100348339[v4]))();
  }
  *a1  = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100114750 + 4 * byte_100348334[v4]))();
}

uint64_t sub_100114750(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100114758(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x100114760LL);
  }
  return result;
}

uint64_t sub_10011476C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x100114774LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100114778(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100114780(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANMatchingFilter.CodingKeys()
{
  return &type metadata for NANMatchingFilter.CodingKeys;
}

unint64_t sub_1001147A0()
{
  unint64_t result = qword_100408390;
  if (!qword_100408390)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034872C, &type metadata for NANMatchingFilter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100408390);
  }

  return result;
}

unint64_t sub_1001147E8()
{
  unint64_t result = qword_100408398;
  if (!qword_100408398)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034869C, &type metadata for NANMatchingFilter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100408398);
  }

  return result;
}

unint64_t sub_100114830()
{
  unint64_t result = qword_1004083A0;
  if (!qword_1004083A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003486C4, &type metadata for NANMatchingFilter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004083A0);
  }

  return result;
}

uint64_t sub_100114874(uint64_t a1, unint64_t a2)
{
  if (a1 == 1701869940 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD000000000000012LL && a2 == 0x8000000100365020LL)
  {
    swift_bridgeObjectRelease(0x8000000100365020LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000100365020LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

unint64_t sub_100114950()
{
  unint64_t result = qword_1004083A8;
  if (!qword_1004083A8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANMatchingFilter.RespondCondition,  &type metadata for NANMatchingFilter.RespondCondition);
    atomic_store(result, (unint64_t *)&qword_1004083A8);
  }

  return result;
}

unint64_t sub_100114994()
{
  unint64_t result = qword_1004083B0;
  if (!qword_1004083B0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANMatchingFilter.FilterType,  &type metadata for NANMatchingFilter.FilterType);
    atomic_store(result, (unint64_t *)&qword_1004083B0);
  }

  return result;
}

unint64_t sub_1001149D8()
{
  unint64_t result = qword_1004083C0;
  if (!qword_1004083C0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANMatchingFilter.FilterType,  &type metadata for NANMatchingFilter.FilterType);
    atomic_store(result, (unint64_t *)&qword_1004083C0);
  }

  return result;
}

uint64_t sub_100114A1C(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_1000022F8(&qword_100408368);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

void Data.load<A>(as:)(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  __chkstk_darwin(v1);
  __asm { BR              X10 }

uint64_t Data.colonFormatedString.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = swift_allocObject(&unk_1003E61F0, 32LL, 7LL);
  *(void *)(v4 + 16)  = a1;
  *(void *)(v4 + 24)  = a2;
  uint64_t v5 = swift_allocObject(&unk_1003E6218, 32LL, 7LL);
  *(void *)(v5 + 16)  = sub_1001152C4;
  *(void *)(v5 + 24)  = v4;
  sub_100020AFC(a1, a2);
  sub_100020AFC(a1, a2);
  uint64_t v6 = sub_100002274(&qword_1004083D0);
  unint64_t v7 = sub_10011531C();
  uint64_t v8 = BidirectionalCollection<>.joined(separator:)(58LL, 0xE100000000000000LL, v6, v7);
  sub_1000208D8(a1, a2);
  swift_release(v5);
  return v8;
}

uint64_t sub_100114E3C(char a1)
{
  uint64_t v2 = sub_100002274((uint64_t *)&unk_100405140);
  uint64_t v3 = swift_allocObject(v2, 72LL, 7LL);
  *(_OWORD *)(v3 + 16)  = xmmword_100339900;
  *(void *)(v3 + 56)  = &type metadata for UInt8;
  *(void *)(v3 + 64)  = &protocol witness table for UInt8;
  *(_BYTE *)(v3 + 32)  = a1;
  return String.init(format:_:)(1479684133LL, 0xE400000000000000LL, v3);
}

void sub_100114EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_100114F10( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, size_t __n, uint64_t a10, uint64_t a11, uint64_t __src, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  uint64_t v36 = v31;
  __int16 v37 = v32;
  char v38 = BYTE2(v32);
  char v39 = BYTE3(v32);
  char v40 = BYTE4(v32);
  char v41 = BYTE5(v32);
  id v33 = (void *)((uint64_t (*)(uint64_t, uint64_t, uint64_t))UnsafeMutableBufferPointer.baseAddress.getter)( v29,  v28,  v27);
  if (!v33)
  {
    __break(1u);
    JUMPOUT(0x100114F90LL);
  }

  memcpy(v33, &v36, v30);
  uint64_t v34 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))UnsafeMutableBufferPointer.baseAddress.getter)( v29,  v28,  v27);
  if (!v34) {
    __break(1u);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16LL))(v26, v34, v27);
}

uint64_t Data.init(uuid:)(uint64_t a1)
{
  uint64_t v13 = UUID.uuid.getter(a1);
  char v14 = v2;
  char v15 = v3;
  char v16 = v4;
  char v17 = v5;
  char v18 = v6;
  char v19 = v7;
  char v20 = v8;
  char v21 = v9;
  uint64_t v10 = sub_1000EF854((uint64_t)&v13, (uint64_t)&v22);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(a1, v11);
  return v10;
}

uint64_t sub_1001152A0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001152C4(char a1)
{
  return sub_100114E3C(a1);
}

uint64_t sub_1001152CC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001152F0@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2  = result;
  a2[1]  = v5;
  return result;
}

unint64_t sub_10011531C()
{
  unint64_t result = qword_1004083D8;
  if (!qword_1004083D8)
  {
    uint64_t v1 = sub_1000022F8(&qword_1004083D0);
    sub_100115380();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> LazyMapSequence<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1004083D8);
  }

  return result;
}

unint64_t sub_100115380()
{
  unint64_t result = qword_1004083E0;
  if (!qword_1004083E0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1004083E0);
  }

  return result;
}

  ;
}

BOOL static NANBeacon.Metadata.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100115630(a1, a2 & 0xFFFFFFFFFFFFLL, a3, a4, a5, a6 & 0xFFFFFFFFFFFFLL, a7, a8);
}

uint64_t NANBeacon.Metadata.channel.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 8)  = result;
  *(_BYTE *)(v1 + 12)  = BYTE4(result);
  *(_BYTE *)(v1 + 13)  = BYTE5(result);
  return result;
}

BOOL sub_1001153F0(uint64_t a1, uint64_t a2)
{
  return sub_100115630( *(void *)a1,  *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 13) << 40),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)a2,  *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 13) << 40),  *(void *)(a2 + 16),  *(void *)(a2 + 24));
}

uint64_t NANDiscoveryBeaconTransmissionSchedule.hash(into:)(uint64_t a1, Swift::UInt64 a2, uint64_t a3)
{
  return swift_bridgeObjectRelease(a3);
}

uint64_t static NANDiscoveryBeaconTransmissionSchedule.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3) {
    return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(a2, a4);
  }
  else {
    return 0LL;
  }
}

Swift::Int NANDiscoveryBeaconTransmissionSchedule.hashValue.getter(Swift::UInt64 a1, uint64_t a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_1001154F8()
{
  Swift::UInt64 v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)(v4, 0LL);
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain(v2);
  sub_100082834((uint64_t)v4, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_100115560(uint64_t a1)
{
  uint64_t v3 = v1[1];
  Hasher._combine(_:)(*v1);
  swift_bridgeObjectRetain(v3);
  sub_100082834(a1, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1001155A8(uint64_t a1)
{
  Swift::UInt64 v2 = *v1;
  uint64_t v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  Hasher._combine(_:)(v2);
  swift_bridgeObjectRetain(v3);
  sub_100082834((uint64_t)v5, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10011560C(void *a1, void *a2)
{
  if (*a1 == *a2) {
    return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(a1[1], a2[1]);
  }
  else {
    return 0LL;
  }
}

BOOL sub_100115630( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL result = 0LL;
  if (a1 == a5 && (_DWORD)a2 == (_DWORD)a6)
  {
    if (((0x801004u >> ((a2 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((a6 >> 29) & 0xF8)) & 0xFFC))
    {
      switch(BYTE5(a2))
      {
        case 2:
          BOOL result = 0LL;
          if (BYTE5(a6) == 2) {
            goto LABEL_18;
          }
          break;
        case 3:
          BOOL result = 0LL;
          if (BYTE5(a6) == 3) {
            goto LABEL_18;
          }
          break;
        case 4:
          BOOL result = 0LL;
          if (BYTE5(a6) == 4) {
            goto LABEL_18;
          }
          break;
        case 5:
          BOOL result = 0LL;
          if (BYTE5(a6) == 5) {
            goto LABEL_18;
          }
          break;
        case 6:
          BOOL result = 0LL;
          if (BYTE5(a6) == 6) {
            goto LABEL_18;
          }
          break;
        default:
          BOOL result = 0LL;
          if (((a2 & 0x10000000000LL) == 0) != ((a6 >> 40) & 1))
          {
LABEL_18:
            if (a3 == a7) {
              BOOL result = a4 == a8;
            }
          }

          break;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_10011573C()
{
  unint64_t result = qword_1004083E8[0];
  if (!qword_1004083E8[0])
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NANBeacon, &type metadata for NANBeacon);
    atomic_store(result, qword_1004083E8);
  }

  return result;
}

unint64_t sub_100115784()
{
  unint64_t result = qword_10040FD20;
  if (!qword_10040FD20)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDiscoveryBeaconTransmissionSchedule,  &type metadata for NANDiscoveryBeaconTransmissionSchedule);
    atomic_store(result, (unint64_t *)&qword_10040FD20);
  }

  return result;
}

ValueMetadata *type metadata accessor for NANBeacon()
{
  return &type metadata for NANBeacon;
}

uint64_t getEnumTagSinglePayload for NANBeacon.Metadata(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 12);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANBeacon.Metadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 16)  = 0LL;
    *(void *)(result + 24)  = 0LL;
    *(void *)unint64_t result = a2 - 254;
    *(void *)(result + 8)  = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 32)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 32)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 12)  = a2 + 2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANBeacon.Metadata()
{
  return &type metadata for NANBeacon.Metadata;
}

ValueMetadata *type metadata accessor for NANDiscoveryBeaconTransmissionSchedule()
{
  return &type metadata for NANDiscoveryBeaconTransmissionSchedule;
}

uint64_t sub_100115880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 64LL);
}

uint64_t sub_100115888(uint64_t a1)
{
  uint64_t result = swift_getAssociatedTypeWitness( 319LL,  *(void *)(a1 + 32),  *(void *)(a1 + 16),  &protocol requirements base descriptor for RawRepresentable,  &associated type descriptor for RawRepresentable.RawValue);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 0LL, 1LL, &v4, a1 + 72);
    return 0LL;
  }

  return result;
}

uint64_t *sub_100115908(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a3 + 32),  *(void *)(a3 + 16),  &protocol requirements base descriptor for RawRepresentable,  &associated type descriptor for RawRepresentable.RawValue);
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  if (v7 <= 7 && *(void *)(v6 + 64) <= 0x18uLL && (*(_DWORD *)(v6 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, AssociatedTypeWitness);
  }

  else
  {
    uint64_t v10 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain(v10);
  }

  return a1;
}

uint64_t sub_1001159A0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a2 + 32),  *(void *)(a2 + 16),  &protocol requirements base descriptor for RawRepresentable,  &associated type descriptor for RawRepresentable.RawValue);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))( a1,  AssociatedTypeWitness);
}

uint64_t sub_1001159F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a3 + 32),  *(void *)(a3 + 16),  &protocol requirements base descriptor for RawRepresentable,  &associated type descriptor for RawRepresentable.RawValue);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16LL))( a1,  a2,  AssociatedTypeWitness);
  return a1;
}

uint64_t sub_100115A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a3 + 32),  *(void *)(a3 + 16),  &protocol requirements base descriptor for RawRepresentable,  &associated type descriptor for RawRepresentable.RawValue);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24LL))( a1,  a2,  AssociatedTypeWitness);
  return a1;
}

uint64_t sub_100115AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a3 + 32),  *(void *)(a3 + 16),  &protocol requirements base descriptor for RawRepresentable,  &associated type descriptor for RawRepresentable.RawValue);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32LL))( a1,  a2,  AssociatedTypeWitness);
  return a1;
}

uint64_t sub_100115B04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a3 + 32),  *(void *)(a3 + 16),  &protocol requirements base descriptor for RawRepresentable,  &associated type descriptor for RawRepresentable.RawValue);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40LL))( a1,  a2,  AssociatedTypeWitness);
  return a1;
}

uint64_t sub_100115B60(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a3 + 32),  *(void *)(a3 + 16),  &protocol requirements base descriptor for RawRepresentable,  &associated type descriptor for RawRepresentable.RawValue);
  if (!a2) {
    return 0LL;
  }
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((a2 - v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)(a1 + v8);
      if (!v10) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v11 < 2)
    {
LABEL_18:
      if ((_DWORD)v7) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, AssociatedTypeWitness);
      }
      return 0LL;
    }
  }

  int v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8)) {
    goto LABEL_18;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if ((_DWORD)v8)
  {
    __asm { BR              X11 }
  }

  return (v7 + v12 + 1);
}

void sub_100115CA4(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness( 0LL,  *(void *)(a4 + 32),  *(void *)(a4 + 16),  &protocol requirements base descriptor for RawRepresentable,  &associated type descriptor for RawRepresentable.RawValue)
                 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  size_t v9 = *(void *)(v7 + 64);
  if (a3 <= v8)
  {
    unsigned int v10 = 0;
  }

  else if (v9 <= 3)
  {
    unsigned int v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
    if (HIWORD(v12))
    {
      unsigned int v10 = &dword_100000004;
    }

    else if (v12 >= 0x100)
    {
      unsigned int v10 = 2;
    }

    else
    {
      unsigned int v10 = v12 > 1;
    }
  }

  else
  {
    unsigned int v10 = &_mh_execute_header.magic + 1;
  }

  if (v8 < a2)
  {
    unsigned int v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        int v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *(_WORD *)a1  = v13;
          a1[2]  = BYTE2(v13);
        }

        else if ((_DWORD)v9 == 2)
        {
          *(_WORD *)a1  = v13;
        }

        else
        {
          *a1  = v13;
        }
      }
    }

    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1  = v11;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t type metadata accessor for SplitBitEnum(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for SplitBitEnum);
}

uint64_t sub_100115E88(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x65756C6156776172LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease(0xE800000000000000LL);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6156776172LL, 0xE800000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

uint64_t sub_100115F0C(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a2 + 48);
  __int128 v6 = *(_OWORD *)(a2 + 32);
  __int128 v18 = *(_OWORD *)(a2 + 16);
  __int128 v19 = v6;
  v21[0]  = v18;
  v21[1]  = v6;
  uint64_t v22 = v5;
  __int128 v20 = *(_OWORD *)(a2 + 56);
  __int128 v23 = v20;
  uint64_t v7 = type metadata accessor for SplitBitEnum.CodingKeys(255LL, (uint64_t)v21);
  WitnessTable  = swift_getWitnessTable(&unk_100348C28, v7);
  uint64_t v9 = type metadata accessor for KeyedEncodingContainer(0LL, v7, WitnessTable);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unsigned int v12 = (char *)&v18 - v11;
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  sub_100021104(a1, v13);
  dispatch thunk of Encoder.container<A>(keyedBy:)(v7, v7, WitnessTable, v13, v14);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v19,  v18,  &protocol requirements base descriptor for RawRepresentable);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, v16, v9, AssociatedTypeWitness, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100116068@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  id v45 = a7;
  uint64_t v38 = a9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a4,  a2,  &protocol requirements base descriptor for RawRepresentable);
  uint64_t v40 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  char v41 = (uint64_t *)((char *)&v36 - v17);
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  uint64_t v50 = a5;
  uint64_t v51 = a6;
  id v52 = a7;
  uint64_t v53 = a8;
  uint64_t v18 = type metadata accessor for SplitBitEnum.CodingKeys(255LL, (uint64_t)&v47);
  WitnessTable  = swift_getWitnessTable(&unk_100348C28, v18);
  uint64_t v44 = type metadata accessor for KeyedDecodingContainer(0LL, v18, WitnessTable);
  uint64_t v39 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  __int128 v20 = (char *)&v36 - v19;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  uint64_t v50 = a5;
  uint64_t v42 = a6;
  uint64_t v51 = a6;
  id v52 = v45;
  uint64_t v53 = a8;
  uint64_t v21 = type metadata accessor for SplitBitEnum(0LL, (uint64_t)&v47);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  char v24 = (char *)&v36 - v23;
  uint64_t v25 = a1[3];
  uint64_t v26 = a1[4];
  sub_100021104(a1, v25);
  id v45 = v20;
  uint64_t v27 = v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v18, v18, WitnessTable, v25, v26);
  if (!v27)
  {
    __int16 v37 = v24;
    WitnessTable  = v22;
    uint64_t v54 = v21;
    uint64_t v29 = v39;
    uint64_t v30 = v40;
    uint64_t v31 = v41;
    uint64_t v32 = AssociatedTypeWitness;
    id v33 = v45;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v41, AssociatedTypeWitness, v28, v44, AssociatedTypeWitness, v42);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v33, v44);
    uint64_t v34 = v37;
    (*(void (**)(char *, void *, uint64_t))(v30 + 32))(v37, v31, v32);
    (*(void (**)(uint64_t, char *, uint64_t))(WitnessTable + 32))(v38, v34, v54);
  }

  return sub_100002AC4(a1);
}

uint64_t sub_1001162C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a3,  a2,  &protocol requirements base descriptor for RawRepresentable,  &associated type descriptor for RawRepresentable.RawValue);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32LL))( a4,  a1,  AssociatedTypeWitness);
}

uint64_t sub_10011631C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100115E88(a1, a2);
  *a3  = result & 1;
  return result;
}

uint64_t sub_100116364@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = static NANBitmap.Band.tvWhiteSpaces.getter();
  *a1  = result & 1;
  return result;
}

uint64_t sub_1001163A0(uint64_t a1)
{
  WitnessTable  = swift_getWitnessTable(&unk_100348C28, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_1001163D4(uint64_t a1)
{
  WitnessTable  = swift_getWitnessTable(&unk_100348C28, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t sub_100116408@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1001162C4(a1, *(void *)(a2 + 16), *(void *)(a2 + 32), a3);
}

uint64_t sub_100116418@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100116068( a1,  *(void *)(a2 + 16),  *(void *)(a2 + 24),  *(void *)(a2 + 32),  *(void *)(a2 + 40),  *(void *)(a2 + 48),  *(char **)(a2 + 56),  *(void *)(a2 + 64),  a3);
}

uint64_t sub_100116440(void *a1, uint64_t a2)
{
  return sub_100115F0C(a1, a2);
}

uint64_t sub_100116454(uint64_t a1)
{
  WitnessTable  = swift_getWitnessTable(&unk_100348AB0, a1);
  return OptionSet<>.init()(a1, WitnessTable, *(void *)(a1 + 64));
}

uint64_t sub_10011649C(uint64_t a1, uint64_t a2)
{
  WitnessTable  = swift_getWitnessTable(&unk_100348AB0, a2);
  return OptionSet<>.contains(_:)(a1, a2, WitnessTable);
}

uint64_t sub_1001164DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100116550(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))&OptionSet.union(_:));
}

uint64_t sub_1001164E8(uint64_t a1, uint64_t a2)
{
  WitnessTable  = swift_getWitnessTable(&unk_100348AB0, a2);
  OptionSet.intersection(_:)(a1, a2, WitnessTable);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(v2, a2);
}

uint64_t sub_100116544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100116550(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))&OptionSet.symmetricDifference(_:));
}

uint64_t sub_100116550(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  WitnessTable  = swift_getWitnessTable(&unk_100348AB0, a2);
  a4(a1, a2, WitnessTable);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL);
  v10(v4, a2);
  return ((uint64_t (*)(uint64_t, uint64_t))v10)(a1, a2);
}

uint64_t sub_1001165D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WitnessTable  = swift_getWitnessTable(&unk_100348AB0, a3);
  char v7 = OptionSet<>.insert(_:)(a1, a2, a3, WitnessTable);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a2, a3);
  return v7 & 1;
}

uint64_t sub_100116644(uint64_t a1, uint64_t a2)
{
  WitnessTable  = swift_getWitnessTable(&unk_100348AB0, a2);
  return OptionSet<>.remove(_:)(a1, a2, WitnessTable);
}

uint64_t sub_10011668C(uint64_t a1, uint64_t a2)
{
  WitnessTable  = swift_getWitnessTable(&unk_100348AB0, a2);
  OptionSet<>.update(with:)(a1, a2, WitnessTable);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
}

uint64_t sub_1001166E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100116744(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, void))&OptionSet<>.formUnion(_:));
}

uint64_t sub_1001166F4(uint64_t a1, uint64_t a2)
{
  WitnessTable  = swift_getWitnessTable(&unk_100348AB0, a2);
  return OptionSet<>.formIntersection(_:)(a1, a2, WitnessTable, *(void *)(a2 + 64));
}

uint64_t sub_100116738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100116744( a1,  a2,  a3,  (void (*)(uint64_t, uint64_t, uint64_t, void))&OptionSet<>.formSymmetricDifference(_:));
}

uint64_t sub_100116744( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, void))
{
  WitnessTable  = swift_getWitnessTable(&unk_100348AB0, a2);
  a4(a1, a2, WitnessTable, *(void *)(a2 + 64));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
}

uint64_t sub_1001167A0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(v2, a2);
}

uint64_t sub_1001167E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56LL))(a3, 0LL, 1LL, a2);
}

uint64_t sub_100116828@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a1 + 32),  *(void *)(a1 + 16),  &protocol requirements base descriptor for RawRepresentable,  &associated type descriptor for RawRepresentable.RawValue);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16LL))( a2,  v2,  AssociatedTypeWitness);
}

uint64_t sub_100116878( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1001168AC(a1, a2, a3[2], a4, a3[4], a6, a7, a8, a3[8]) & 1;
}

uint64_t sub_1001168AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a5,  a3,  &protocol requirements base descriptor for RawRepresentable,  &associated type descriptor for RawRepresentable.RawValue);
  return dispatch thunk of static Equatable.== infix(_:_:)( a1,  a2,  AssociatedTypeWitness,  *(void *)(*(void *)(*(void *)(a9 + 8) + 16LL) + 8LL)) & 1;
}

uint64_t sub_10011691C(uint64_t a1, uint64_t a2)
{
  WitnessTable  = swift_getWitnessTable(&unk_1003489C0, a2);
  return SetAlgebra<>.init(arrayLiteral:)(a1, a2, WitnessTable);
}

uint64_t sub_100116964(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100348960, a1);
}

uint64_t sub_100116974(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100348930, a1);
}

uint64_t sub_100116984(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100348988, a1);
}

uint64_t sub_100116994(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1003489C0, a1);
}

uint64_t sub_1001169A4(uint64_t a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a2[4],  a2[2],  &protocol requirements base descriptor for RawRepresentable,  &associated type descriptor for RawRepresentable.RawValue);
  return dispatch thunk of Hashable.hash(into:)(a1, AssociatedTypeWitness, *(void *)(*(void *)(a2[8] + 8LL) + 16LL));
}

uint64_t sub_100116A00(uint64_t a1, uint64_t a2)
{
  WitnessTable  = swift_getWitnessTable(&unk_100348988, a1);
  return RawRepresentable<>.hashValue.getter( a1,  a2,  WitnessTable,  *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 16LL));
}

uint64_t sub_100116A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WitnessTable  = swift_getWitnessTable(&unk_100348988, a2);
  return RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  a3,  WitnessTable,  *(void *)(*(void *)(*(void *)(a2 + 64) + 8LL) + 16LL));
}

uint64_t type metadata accessor for SplitBitEnum.CodingKeys(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for SplitBitEnum.CodingKeys);
}

uint64_t sub_100116AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 56LL);
}

uint64_t sub_100116ABC(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100116AFC + 4 * byte_100348906[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100116B1C + 4 * byte_10034890B[v4]))();
  }
}

_BYTE *sub_100116AFC(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_100116B1C(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_100116B24(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_100116B2C(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_100116B34(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_100116B3C(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_100116B48(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100348C00, a1);
}

uint64_t sub_100116B58(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100348B70, a1);
}

uint64_t sub_100116B68(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100348B98, a1);
}

void sub_100116B78(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = a2;
  uint64_t v3 = *(void *)(type metadata accessor for AWDLPeer.AdvertisedService(0LL) - 8);
  __chkstk_darwin();
  uint64_t v5 = (unsigned __int8 *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  char v7 = (char *)&v19 - v6;
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v20 = a1 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  unint64_t v11 = v10 & v8;
  int64_t v21 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v12 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_5;
    }

    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v16 >= v21) {
      goto LABEL_23;
    }
    unint64_t v17 = *(void *)(v20 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v21) {
        goto LABEL_23;
      }
      unint64_t v17 = *(void *)(v20 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v21) {
          goto LABEL_23;
        }
        unint64_t v17 = *(void *)(v20 + 8 * v12);
        if (!v17)
        {
          int64_t v12 = v16 + 3;
          if (v16 + 3 >= v21) {
            goto LABEL_23;
          }
          unint64_t v17 = *(void *)(v20 + 8 * v12);
          if (!v17) {
            break;
          }
        }
      }
    }

uint64_t AWDLPeer.averageRSSIAcrossBands.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AWDLPeer(0LL);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = v0 + *(int *)(v3 + 96);
  uint64_t v7 = *(void *)v6;
  int v8 = *(unsigned __int8 *)(v6 + 8);
  sub_100057FE8(v1, (uint64_t)v5, v9);
  if (v8 == 1) {
    uint64_t v7 = *(void *)&v5[*(int *)(v2 + 92)];
  }
  sub_10005802C((uint64_t)v5, type metadata accessor for AWDLPeer);
  return v7;
}

uint64_t type metadata accessor for AWDLPeer(uint64_t a1)
{
  return sub_100020E48(a1, (uint64_t *)&unk_100408570, (uint64_t)&nominal type descriptor for AWDLPeer);
}

uint64_t AWDLPeer.logger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Logger(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(a1, v1, v3);
}

unint64_t AWDLPeer.macAddress.getter()
{
  uint64_t v1 = type metadata accessor for AWDLPeer(0LL);
  return *(unsigned __int16 *)(v0 + *(int *)(v1 + 20)) | ((unint64_t)*(unsigned int *)(v0 + *(int *)(v1 + 20) + 2) << 16);
}

uint64_t AWDLPeer.macAddress.setter(unint64_t a1)
{
  char v2 = a1;
  unint64_t v3 = a1 >> 8;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = a1 >> 24;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = a1 >> 40;
  uint64_t result = type metadata accessor for AWDLPeer(0LL);
  uint64_t v9 = (_BYTE *)(v1 + *(int *)(result + 20));
  *uint64_t v9 = v2;
  v9[1]  = v3;
  _OWORD v9[2] = v4;
  void v9[3] = v5;
  v9[4]  = v6;
  void v9[5] = v7;
  return result;
}

uint64_t (*AWDLPeer.macAddress.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLPeer.lastUpdated.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLPeer(0LL) + 24);
  uint64_t v4 = type metadata accessor for DispatchTime(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t AWDLPeer.numberOfActionFrames.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0LL) + 28));
}

uint64_t AWDLPeer.numberOfActionFrames.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLPeer(0LL);
  *(void *)(v1 + *(int *)(result + 2sub_100058090(v1, (void *)(v0 + 8)) = a1;
  return result;
}

uint64_t (*AWDLPeer.numberOfActionFrames.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLPeer.deprecatedElectionParameter.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0LL) + 32));
}

__n128 AWDLPeer.electionParameter.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLPeer(0LL) + 36);
  char v4 = *(_BYTE *)(v3 + 48);
  __int128 v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1  = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16)  = v5;
  __n128 result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a1 + 32)  = result;
  *(_BYTE *)(a1 + 48)  = v4;
  return result;
}

uint64_t AWDLPeer.serviceParameter.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for AWDLPeer(0LL) + 40);
  uint64_t v2 = *(void *)v1;
  sub_100117128(*(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
  return v2;
}

uint64_t sub_100117128(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4 >> 60 != 15) {
    return sub_100020AFC(a3, a4);
  }
  return result;
}

uint64_t AWDLPeer.lastProcessedServiceUpdateIndicator.getter()
{
  uint64_t v1 = type metadata accessor for AWDLPeer(0LL);
  return *(unsigned __int16 *)(v0 + *(int *)(v1 + 44)) | (*(unsigned __int8 *)(v0 + *(int *)(v1 + 44) + 2) << 16);
}

uint64_t AWDLPeer.synchronizationParameter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AWDLPeer(0LL);
  return sub_1000226B0(v1 + *(int *)(v3 + 48), a1, &qword_1004084F0);
}

uint64_t AWDLPeer.arpa.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0LL) + 52));
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[2]);
  return v2;
}

uint64_t AWDLPeer.dataPathStateParameter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AWDLPeer(0LL);
  return sub_1000226B0(v1 + *(int *)(v3 + 56), a1, (uint64_t *)&unk_1004104A0);
}

__n128 AWDLPeer.nanSynchronization.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLPeer(0LL) + 60);
  uint64_t v4 = *(void *)(v3 + 32);
  char v5 = *(_BYTE *)(v3 + 40);
  __n128 result = *(__n128 *)v3;
  __int128 v7 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1  = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16)  = v7;
  *(void *)(a1 + 32)  = v4;
  *(_BYTE *)(a1 + 40)  = v5;
  return result;
}

uint64_t AWDLPeer.version.getter()
{
  uint64_t v1 = type metadata accessor for AWDLPeer(0LL);
  return *(unsigned __int16 *)(v0 + *(int *)(v1 + 64)) | (*(unsigned __int8 *)(v0 + *(int *)(v1 + 64) + 2) << 16);
}

__n128 AWDLPeer.realtimeGroup.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLPeer(0LL) + 68);
  uint64_t v4 = *(void *)(v3 + 32);
  __n128 result = *(__n128 *)v3;
  __int128 v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1  = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16)  = v6;
  *(void *)(a1 + 32)  = v4;
  return result;
}

uint64_t AWDLPeer.preferredChannels.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0LL) + 72));
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t AWDLPeer.advertisedServices.getter()
{
  uint64_t v1 = type metadata accessor for AWDLPeer(0LL);
  return swift_bridgeObjectRetain(*(void *)(v0 + *(int *)(v1 + 80)));
}

uint64_t AWDLPeer.countryCode.getter()
{
  uint64_t v2 = (unsigned __int16 *)((char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v3 = type metadata accessor for AWDLPeer(0LL);
  sub_1000226B0(v0 + *(int *)(v3 + 56), (uint64_t)v2, (uint64_t *)&unk_1004104A0);
  uint64_t v4 = type metadata accessor for AWDLActionFrame.DataPathState(0LL);
  if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(v2, 1LL, v4) == 1)
  {
    sub_1000225EC((uint64_t)v2, (uint64_t *)&unk_1004104A0);
  }

  else
  {
    unsigned int v5 = *v2;
    char v6 = *((_BYTE *)v2 + 2);
    sub_10005802C((uint64_t)v2, type metadata accessor for AWDLActionFrame.DataPathState);
    if ((v6 & 1) == 0)
    {
      unsigned int v7 = v5 >> 8;
      return v5 | (v7 << 8);
    }
  }

  if (qword_1004041A8 != -1) {
    swift_once(&qword_1004041A8, sub_100122F4C);
  }
  LOBYTE(v5)  = static CountryCode.unknown;
  unsigned int v7 = HIBYTE(static CountryCode.unknown);
  return v5 | (v7 << 8);
}

uint64_t AWDLPeer.infrastructureChannel.getter()
{
  uint64_t v1 = v0;
  sub_100002274((uint64_t *)&unk_1004104A0);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for AWDLPeer(0LL);
  uint64_t v5 = __chkstk_darwin();
  unsigned int v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v8 = (unint64_t *)(v1 + *(int *)(v5 + 72));
  unint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  sub_100057FE8(v1, (uint64_t)v7, v11);
  if (v10)
  {
    int64_t v12 = type metadata accessor for AWDLPeer;
    uint64_t v13 = (uint64_t)v7;
LABEL_6:
    sub_10005802C(v13, v12);
    return v9 & 0xFFFFFFFFFFFFLL;
  }

  sub_1000226B0((uint64_t)&v7[*(int *)(v4 + 56)], (uint64_t)v3, (uint64_t *)&unk_1004104A0);
  sub_10005802C((uint64_t)v7, type metadata accessor for AWDLPeer);
  uint64_t v14 = type metadata accessor for AWDLActionFrame.DataPathState(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48LL))(v3, 1LL, v14) != 1)
  {
    unint64_t v9 = *((unsigned int *)v3 + 5) | ((unint64_t)*((unsigned __int16 *)v3 + 12) << 32);
    int64_t v12 = type metadata accessor for AWDLActionFrame.DataPathState;
    uint64_t v13 = (uint64_t)v3;
    goto LABEL_6;
  }

  sub_1000225EC((uint64_t)v3, (uint64_t *)&unk_1004104A0);
  unint64_t v9 = 0x300000000LL;
  return v9 & 0xFFFFFFFFFFFFLL;
}

uint64_t AWDLPeer.supportsSimultaneousDualBand.getter()
{
  uint64_t v1 = sub_100002274((uint64_t *)&unk_1004104A0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for AWDLPeer(0LL);
  sub_1000226B0(v0 + *(int *)(v4 + 56), (uint64_t)v3, (uint64_t *)&unk_1004104A0);
  uint64_t v5 = type metadata accessor for AWDLActionFrame.DataPathState(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v3, 1LL, v5) == 1)
  {
    sub_1000225EC((uint64_t)v3, (uint64_t *)&unk_1004104A0);
    return 0LL;
  }

  else
  {
    uint64_t v6 = v3[84];
    sub_10005802C((uint64_t)v3, type metadata accessor for AWDLActionFrame.DataPathState);
  }

  return v6;
}

uint64_t AWDLPeer.supportsDFSProxy.getter()
{
  uint64_t v1 = sub_100002274((uint64_t *)&unk_1004104A0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for AWDLPeer(0LL);
  sub_1000226B0(v0 + *(int *)(v4 + 56), (uint64_t)v3, (uint64_t *)&unk_1004104A0);
  uint64_t v5 = type metadata accessor for AWDLActionFrame.DataPathState(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v3, 1LL, v5) == 1)
  {
    sub_1000225EC((uint64_t)v3, (uint64_t *)&unk_1004104A0);
    return 0LL;
  }

  else
  {
    uint64_t v6 = v3[85];
    sub_10005802C((uint64_t)v3, type metadata accessor for AWDLActionFrame.DataPathState);
  }

  return v6;
}

unint64_t AWDLPeer.syncContention.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0LL) + 84));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

unint64_t AWDLPeer.mactime.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0LL) + 88));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t AWDLPeer.AdvertisedService.service.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  char v5 = *(_BYTE *)(v1 + 40);
  char v6 = *(_BYTE *)(v1 + 41);
  *(void *)a1  = *(void *)(v1 + 8);
  *(void *)(a1 + 8)  = v2;
  *(void *)(a1 + 16)  = v3;
  *(void *)(a1 + 24)  = v4;
  *(_BYTE *)(a1 + 32)  = v5;
  *(_BYTE *)(a1 + 33)  = v6;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v4);
}

__n128 AWDLPeer.AdvertisedService.service.setter(uint64_t a1)
{
  __n128 result = *(__n128 *)a1;
  __int128 v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 8)  = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 24)  = v4;
  *(_WORD *)(v1 + 40)  = *(_WORD *)(a1 + 32);
  return result;
}

uint64_t AWDLPeer.AdvertisedService.advertisementInfo.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000226B0(v1 + 48, a1, &qword_1004084F8);
}

uint64_t AWDLPeer.AdvertisedService.advertisementInfo.setter(uint64_t a1)
{
  return sub_100057104(a1, v1 + 48, &qword_1004084F8);
}

uint64_t (*AWDLPeer.AdvertisedService.advertisementInfo.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLPeer.AdvertisedService.datapathInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AWDLPeer.AdvertisedService(0LL);
  return sub_100057FE8(v1 + *(int *)(v3 + 28), a1, type metadata accessor for DNSRecords.SRV);
}

uint64_t AWDLPeer.AdvertisedService.datapathInfo.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLPeer.AdvertisedService(0LL) + 28);
  return sub_10011A554(a1, v3);
}

uint64_t (*AWDLPeer.AdvertisedService.datapathInfo.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLPeer.AdvertisedService.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  int v5 = *(unsigned __int8 *)(v1 + 40);
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 41);
  Swift::String v7 = String.lowercased()();
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v7._countAndFlagsBits, v7._object);
  swift_bridgeObjectRelease(v7._object);
  Swift::String v8 = String.lowercased()();
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v8._countAndFlagsBits, v8._object);
  swift_bridgeObjectRelease(v8._object);
  if (v5) {
    uint64_t v9 = 7365749LL;
  }
  else {
    uint64_t v9 = 7365492LL;
  }
  String.hash(into:)(a1, v9, 0xE300000000000000LL);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  Hasher._combine(_:)(v6);
  swift_bridgeObjectRelease(v3);
  return swift_bridgeObjectRelease_n(v4, 2LL);
}

BOOL static AWDLPeer.AdvertisedService.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  __int16 v5 = *(unsigned __int8 *)(a1 + 40);
  __int16 v6 = *(unsigned __int8 *)(a1 + 41);
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  __int16 v11 = *(unsigned __int8 *)(a2 + 40);
  __int16 v12 = *(unsigned __int8 *)(a2 + 41);
  v16[2]  = *(void *)(a1 + 8);
  void v16[3] = v2;
  v16[0]  = v7;
  v16[1]  = v8;
  unint64_t v13 = sub_10000B08C();
  return !StringProtocol.caseInsensitiveCompare<A>(_:)( v16,  &type metadata for String,  &type metadata for String,  v13,  v13)
      && sub_1000FAC64(v3, v4, v5 | (v6 << 8), v9, v10, v11 | (v12 << 8));
}

Swift::Int AWDLPeer.AdvertisedService.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_100117B3C(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t AWDLPeer.reachability.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0LL) + 104));
}

uint64_t AWDLPeer.peerPresencePosted.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0LL) + 108));
}

uint64_t AWDLPeer.peerPresencePosted.setter(char a1)
{
  uint64_t result = type metadata accessor for AWDLPeer(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 10sub_100058090(v1, (void *)(v0 + 8)) = a1;
  return result;
}

uint64_t (*AWDLPeer.peerPresencePosted.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLPeer.needsToRecoverTrafficRegistrations.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0LL) + 112));
}

uint64_t AWDLPeer.needsToRecoverTrafficRegistrations.setter(char a1)
{
  uint64_t result = type metadata accessor for AWDLPeer(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 11DNSRecords.BrowseHost.keyData.getter(*v0, *((void *)v0 + 1), *((void *)v0 + 2)) = a1;
  return result;
}

uint64_t (*AWDLPeer.needsToRecoverTrafficRegistrations.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLPeer.needsToRecoverResponderTrafficRegistrations.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0LL) + 116));
}

uint64_t AWDLPeer.needsToRecoverResponderTrafficRegistrations.setter(char a1)
{
  uint64_t result = type metadata accessor for AWDLPeer(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 1swift_bridgeObjectRelease(*(void *)(v1 + 16)) = a1;
  return result;
}

uint64_t (*AWDLPeer.needsToRecoverResponderTrafficRegistrations.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLPeer.init(macAddress:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DispatchTime(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Logger.init(subsystem:category:)(0x6C7070612E6D6F63LL, 0xEE006C6477612E65LL, 1919247728LL, 0xE400000000000000LL);
  uint64_t v8 = (int *)type metadata accessor for AWDLPeer(0LL);
  uint64_t v9 = v8[6];
  if (qword_1004041A0 != -1) {
    swift_once(&qword_1004041A0, sub_1001207BC);
  }
  uint64_t v10 = a2 + v9;
  unint64_t v36 = HIDWORD(a1);
  unint64_t v37 = a1 >> 40;
  unint64_t v34 = a1 >> 16;
  unint64_t v35 = a1 >> 24;
  unint64_t v33 = a1 >> 8;
  (*(void (**)(void))(*(void *)algn_1004107A8 + 8LL))();
  *(void *)(a2 + v8[7])  = 0LL;
  uint64_t v11 = a2 + v8[8];
  *(void *)uint64_t v11 = 0LL;
  *(void *)(v11 + 8)  = 0LL;
  *(void *)(v11 + 16)  = 0LL;
  *(_WORD *)(v11 + 24)  = 256;
  uint64_t v12 = a2 + v8[9];
  *(_OWORD *)uint64_t v12 = 0u;
  *(_OWORD *)(v12 + 16)  = 0u;
  *(_OWORD *)(v12 + 32)  = 0u;
  *(_BYTE *)(v12 + 48)  = 1;
  unint64_t v13 = (void *)(a2 + v8[10]);
  void *v13 = 0LL;
  v13[1]  = 0LL;
  void v13[2] = 0LL;
  void v13[3] = 0xF000000000000000LL;
  uint64_t v14 = a2 + v8[11];
  *(_WORD *)uint64_t v14 = 0;
  *(_BYTE *)(v14 + 2)  = 1;
  unsigned __int8 v15 = (_OWORD *)(a2 + v8[12]);
  v15[1]  = 0u;
  _OWORD v15[2] = 0u;
  *unsigned __int8 v15 = 0u;
  uint64_t v16 = (void *)(a2 + v8[13]);
  *uint64_t v16 = 0LL;
  v16[1]  = 0LL;
  v16[2]  = 0LL;
  uint64_t v17 = a2 + v8[14];
  uint64_t v18 = type metadata accessor for AWDLActionFrame.DataPathState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v17, 1LL, 1LL, v18);
  uint64_t v19 = a2 + v8[15];
  *(void *)(v19 + 32)  = 0LL;
  *(_OWORD *)uint64_t v19 = 0u;
  *(_OWORD *)(v19 + 16)  = 0u;
  *(_BYTE *)(v19 + 40)  = 1;
  uint64_t v20 = a2 + v8[16];
  *(_WORD *)uint64_t v20 = 0;
  *(_BYTE *)(v20 + 2)  = 1;
  uint64_t v21 = a2 + v8[17];
  *(_OWORD *)uint64_t v21 = xmmword_100337010;
  *(void *)(v21 + 24)  = 0LL;
  *(void *)(v21 + 32)  = 0LL;
  *(void *)(v21 + 16)  = 0LL;
  uint64_t v22 = (void *)(a2 + v8[18]);
  *uint64_t v22 = 0LL;
  v22[1]  = 0LL;
  uint64_t v23 = (void *)(a2 + v8[19]);
  uint64_t v24 = sub_1000058BC((uint64_t)&off_1003D71E8);
  *uint64_t v23 = &_swiftEmptySetSingleton;
  v23[1]  = v24;
  *(void *)(a2 + v8[20])  = &_swiftEmptySetSingleton;
  uint64_t v25 = a2 + v8[21];
  *(_DWORD *)uint64_t v25 = 0;
  *(_BYTE *)(v25 + 4)  = 1;
  uint64_t v26 = a2 + v8[22];
  *(_DWORD *)uint64_t v26 = 0;
  *(_BYTE *)(v26 + 4)  = 1;
  uint64_t v27 = a2 + v8[23];
  *(void *)uint64_t v27 = 0LL;
  *(_BYTE *)(v27 + 8)  = 1;
  uint64_t v28 = a2 + v8[24];
  *(void *)uint64_t v28 = 0LL;
  *(_BYTE *)(v28 + 8)  = 1;
  uint64_t v29 = a2 + v8[25];
  *(void *)uint64_t v29 = 0LL;
  *(_BYTE *)(v29 + 8)  = 1;
  *(_BYTE *)(a2 + v8[26])  = 0;
  *(_BYTE *)(a2 + v8[27])  = 0;
  *(_BYTE *)(a2 + v8[28])  = 0;
  *(_BYTE *)(a2 + v8[29])  = 0;
  uint64_t v30 = (_BYTE *)(a2 + v8[5]);
  *uint64_t v30 = a1;
  v30[1]  = v33;
  v30[2]  = v34;
  v30[3]  = v35;
  v30[4]  = v36;
  v30[5]  = v37;
  (*(void (**)(void))(*(void *)algn_1004107A8 + 8LL))();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 40))(v10, v7, v4);
}

uint64_t sub_10011800C(uint64_t a1, int a2)
{
  LODWORD(v3)  = a2;
  v310  = 0LL;
  sub_100002274((uint64_t *)&unk_10040ED30);
  __chkstk_darwin();
  v330  = (char *)&v298 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v324  = (uint64_t *)((char *)&v298 - v6);
  __chkstk_darwin();
  v329  = (uint64_t)&v298 - v7;
  __chkstk_darwin();
  v352  = (uint64_t)&v298 - v8;
  v346  = type metadata accessor for AWDLPeer.AdvertisedService(0LL);
  v331  = *(void *)(v346 - 8);
  __chkstk_darwin();
  v328  = (uint64_t)&v298 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v327  = (uint64_t)&v298 - v10;
  __chkstk_darwin();
  v351  = (char *)&v298 - v11;
  sub_100002274(&qword_1004086A8);
  __chkstk_darwin();
  unint64_t v13 = (char *)&v298 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v343  = (uint64_t)&v298 - v14;
  sub_100002274(&qword_100404DB0);
  __chkstk_darwin();
  v338  = (uint64_t)&v298 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v333  = (unint64_t)&v298 - v16;
  uint64_t v17 = type metadata accessor for DNSRecords.SRV(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  v341  = v17;
  v342  = v18;
  __chkstk_darwin();
  v339  = (uint64_t)&v298 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v309  = (uint64_t *)((char *)&v298 - v20);
  v311  = v21;
  __chkstk_darwin();
  v326  = (uint64_t)&v298 - v22;
  v340  = sub_100002274(&qword_1004086B0);
  v332  = *(void *)(v340 - 8);
  __chkstk_darwin();
  v337  = (uint64_t *)((char *)&v298 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  v325  = (uint64_t *)((char *)&v298 - v24);
  v334  = type metadata accessor for AWDLActionFrame.ServiceResponse(0LL);
  __chkstk_darwin();
  v335  = (uint64_t *)((char *)&v298 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  v349  = (uint64_t)&v298 - v26;
  uint64_t v27 = type metadata accessor for AWDLActionFrame.AWDLAttribute(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin();
  uint64_t v30 = (unsigned __int8 *)&v298 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v357  = (int *)type metadata accessor for AWDLPeer(0LL);
  uint64_t v31 = v357[11];
  v359  = v2;
  uint64_t v32 = (unsigned __int16 *)(v2 + v31);
  uint64_t v33 = a1;
  int v34 = *(unsigned __int8 *)(v2 + v31 + 2);
  unint64_t v35 = *(void *)(a1 + 16);
  v345  = v13;
  v353  = v32;
  if (v35)
  {
    uint64_t v36 = v33 + ((*(unsigned __int8 *)(v28 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
    v307  = &v376;
    v308  = &v370;
    v306  = &v362;
    v347  = v33;
    swift_bridgeObjectRetain(v33);
    v314  = 0LL;
    v315  = 0LL;
    v320  = 0LL;
    v321  = 0LL;
    v312  = 0LL;
    v313  = 0LL;
    v318  = 0LL;
    v319  = 0LL;
    v316  = 0LL;
    v317  = 0LL;
    v322  = 0LL;
    v323  = 0LL;
    v348  = 0;
    LODWORD(v336)  = 0;
    unint64_t v37 = 0LL;
    uint64_t v38 = *(void *)(v28 + 72);
    v344  = _swiftEmptyDictionarySingleton;
    LODWORD(v354)  = v3;
    v355  = v36;
    v358  = v38;
    while (1)
    {
      LODWORD(v356)  = v34;
      unint64_t v39 = v35;
      if (v37 >= v35)
      {
LABEL_155:
        __break(1u);
        goto LABEL_156;
      }

      while (2)
      {
        uint64_t v42 = v36 + v38 * v37++;
        sub_100057FE8(v42, (uint64_t)v30, type metadata accessor for AWDLActionFrame.AWDLAttribute);
        switch(swift_getEnumCaseMultiPayload(v30, v27))
        {
          case 1u:
LABEL_13:
            uint64_t v43 = v349;
            sub_100022628((uint64_t)v30, v349, type metadata accessor for AWDLActionFrame.ServiceResponse);
            if ((v356 & 1) == 0)
            {
              sub_10005802C(v43, type metadata accessor for AWDLActionFrame.ServiceResponse);
              if (v37 == v35)
              {
                swift_bridgeObjectRelease(v347);
                if ((v348 & 1) != 0)
                {
                  v195  = v344;
                }

                else
                {
                  v195  = v344;
                  if ((v3 & 1) != 0)
                  {
                    v295  = v359 + v357[17];
                    *(_OWORD *)v295  = xmmword_100337010;
                    *(void *)(v295 + 24)  = 0LL;
                    *(void *)(v295 + 32)  = 0LL;
                    *(void *)(v295 + 16)  = 0LL;
                  }
                }

                goto LABEL_153;
              }

              LODWORD(v356)  = 0;
LABEL_8:
              if (v37 <= v35) {
                unint64_t v39 = v35;
              }
              else {
                unint64_t v39 = v37;
              }
              if (v37 >= v35) {
                goto LABEL_155;
              }
              continue;
            }

            uint64_t v94 = v43;
            uint64_t v95 = (uint64_t)v335;
            sub_100057FE8(v94, (uint64_t)v335, type metadata accessor for AWDLActionFrame.ServiceResponse);
            int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v95, v334);
            if (EnumCaseMultiPayload)
            {
              if (EnumCaseMultiPayload == 1)
              {
                uint64_t v97 = (uint64_t)v335;
                __int128 v98 = *((_OWORD *)v335 + 1);
                v367[0]  = *(_OWORD *)v335;
                v367[1]  = v98;
                v367[2]  = *((_OWORD *)v335 + 2);
                uint64_t v99 = v335[6];
                v336  = v335[5];
                v368  = v99;
                v100  = *v335;
                v301  = v99;
                v302  = v100;
                uint64_t v101 = v335[2];
                v303  = v335[1];
                v304  = v101;
                v305  = v335[3];
                v300  = *((unsigned __int8 *)v335 + 32);
                uint64_t v102 = *((unsigned __int8 *)v335 + 33);
                v377  = *((_WORD *)v335 + 16);
                v375  = v367[0];
                v376  = v98;
                __int128 v103 = *((_OWORD *)v335 + 1);
                v364  = *(_OWORD *)v335;
                v365  = v103;
                v366  = *((_WORD *)v335 + 16);
                v380  = v364;
                v378  = *v307;
                v379  = *((_WORD *)v307 + 8);
                uint64_t v104 = swift_allocObject(&unk_1003E6708, 72LL, 7LL);
                v105  = *(_OWORD *)(v97 + 16);
                *(_OWORD *)(v104 + 16)  = *(_OWORD *)v97;
                *(_OWORD *)(v104 + 32)  = v105;
                *(_OWORD *)(v104 + 48)  = *(_OWORD *)(v97 + 32);
                *(void *)(v104 + 64)  = *(void *)(v97 + 48);
                sub_1000209DC((uint64_t)&v380);
                sub_1000209DC((uint64_t)&v378);
                sub_100021028(v367);
                sub_100021018((uint64_t)v312, v313);
                v106  = swift_allocObject(&unk_1003E6730, 32LL, 7LL);
                *(void *)(v106 + 16)  = sub_10011D848;
                *(void *)(v106 + 24)  = v104;
                v356  = v106;
                sub_100021028(v367);
                sub_100021018((uint64_t)v318, v319);
                id v107 = v344;
                LODWORD(v350)  = swift_isUniquelyReferenced_nonNull_native(v344);
                v360  = v107;
                unint64_t v109 = sub_10001C214((uint64_t)&v364);
                uint64_t v110 = v107[2];
                v111  = (v108 & 1) == 0;
                v112  = v110 + v111;
                if (!__OFADD__(v110, v111))
                {
                  char v113 = v108;
                  v319  = v102;
                  uint64_t v114 = v107[3];
                  v299  = v104;
                  if (v114 < v112)
                  {
                    sub_100138F84(v112, v350);
                    v115  = sub_10001C214((uint64_t)&v364);
                    if ((v113 & 1) == (v116 & 1))
                    {
                      char v117 = v113;
                      unint64_t v3 = v115;
                      goto LABEL_62;
                    }

LABEL_167:
                    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DNSRecords.PTR);
                    __break(1u);
                    JUMPOUT(0x100119CC8LL);
                  }

                  char v117 = v108;
                  unint64_t v3 = v109;
                  if ((v350 & 1) == 0) {
                    sub_10013D91C();
                  }
LABEL_62:
                  v153  = v360;
                  swift_bridgeObjectRelease(0x8000000000000000LL);
                  swift_bridgeObjectRetain(v153);
                  if ((v117 & 1) == 0)
                  {
                    v154  = (uint64_t)v325;
                    sub_100119E18(*(void (**)(__int128 *__return_ptr, uint64_t))(v356 + 16), (uint64_t)v325);
                    v153[(v3 >> 6) + 8] |= 1LL << v3;
                    v155  = v153[6] + 40 * v3;
                    v156  = v365;
                    *(_OWORD *)v155  = v364;
                    *(_OWORD *)(v155 + 16)  = v156;
                    *(_WORD *)(v155 + 32)  = v366;
                    sub_1000586C0(v154, v153[7] + *(void *)(v332 + 72) * v3, &qword_1004086B0);
                    v157  = v153[2];
                    v158  = __OFADD__(v157, 1LL);
                    v159  = v157 + 1;
                    if (!v158)
                    {
                      v153[2]  = v159;
                      sub_1000209DC((uint64_t)&v380);
                      sub_1000209DC((uint64_t)&v378);
                      goto LABEL_65;
                    }

LABEL_165:
                    __break(1u);
LABEL_166:
                    __break(1u);
                    goto LABEL_167;
                  }

LABEL_156:
    __break(1u);
LABEL_157:
    swift_bridgeObjectRelease(v347);
    if ((v348 & 1) != 0)
    {
      v195  = v344;
      v194  = v345;
      uint64_t v32 = v353;
    }

    else
    {
      v195  = v344;
      v194  = v345;
      uint64_t v32 = v353;
      if ((v3 & 1) != 0)
      {
        v297  = v359 + v357[17];
        *(_OWORD *)v297  = xmmword_100337010;
        *(void *)(v297 + 24)  = 0LL;
        *(void *)(v297 + 32)  = 0LL;
        *(void *)(v297 + 16)  = 0LL;
      }
    }
  }

  while (1)
  {
    v218  = __clz(__rbit64(v3));
    v219  = (v3 - 1) & v3;
    v220  = v218 | (v216 << 6);
LABEL_111:
    v221  = v195[7];
    v222  = v195;
    v223  = v195[6] + 40 * v220;
    v224  = *(void *)v223;
    v225  = *(void *)(v223 + 8);
    v226  = *(void *)(v223 + 16);
    v227  = *(void *)(v223 + 24);
    v228  = *(_BYTE *)(v223 + 32);
    LOBYTE(v223)  = *(_BYTE *)(v223 + 33);
    *(void *)v194  = v224;
    *((void *)v194 + 1)  = v225;
    *((void *)v194 + 2)  = v226;
    *((void *)v194 + 3)  = v227;
    v194[32]  = v228;
    v194[33]  = v223;
    v229  = v221 + *(void *)(v332 + 72) * v220;
    v230  = v217;
    v231  = sub_100002274(v217);
    sub_1000226B0(v229, (uint64_t)&v194[*(int *)(v231 + 48)], &qword_1004086B0);
    v232  = *(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v231 - 8) + 56LL);
    v233  = v231;
    v217  = v230;
    v232(v194, 0LL, 1LL, v233);
    swift_bridgeObjectRetain(v225);
    swift_bridgeObjectRetain(v227);
LABEL_118:
    v237  = (uint64_t)v194;
    v238  = v343;
    sub_1000586C0(v237, v343, &qword_1004086A8);
    v239  = sub_100002274(v217);
    v353  = (unsigned __int16 *)v219;
    v354  = v216;
    v240  = *(void *)(v238 + 8);
    swift_bridgeObjectRelease(*(void *)(v238 + 24));
    swift_bridgeObjectRelease(v240);
    v241  = v238 + *(int *)(v239 + 48);
    v242  = *(void *)v241;
    v243  = *(void *)(v241 + 8);
    v244  = *(void *)(v241 + 16);
    v245  = *(void *)(v241 + 24);
    v246  = *(unsigned __int8 *)(v241 + 32);
    v247  = *(unsigned __int8 *)(v241 + 33);
    v248  = *(void *)(v241 + 40);
    v249  = *(void *)(v241 + 48);
    v250  = *(void *)(v241 + 56);
    v251  = *(void *)(v241 + 64);
    v253  = *(void *)(v241 + 72);
    v252  = *(void *)(v241 + 80);
    v254  = *(void *)(v241 + 88);
    v255  = *(int *)(v340 + 64);
    v256  = v241 + v255;
    v257  = v337;
    v258  = (char *)v337 + v255;
    v349  = v244;
    *(void *)&v350  = v242;
    *v337  = v242;
    v257[1]  = v243;
    v257[2]  = v244;
    v257[3]  = v245;
    LODWORD(v347)  = v246;
    *((_BYTE *)v257 + 32)  = v246;
    v348  = v247;
    *((_BYTE *)v257 + 33)  = v247;
    v355  = v250;
    v356  = v248;
    v257[5]  = v248;
    v257[6]  = v249;
    v358  = v249;
    v257[7]  = v250;
    v257[8]  = v251;
    v257[9]  = v253;
    v257[10]  = v252;
    v257[11]  = v254;
    sub_1000586C0(v256, (uint64_t)v257 + v255, &qword_100404DB0);
    v259  = (uint64_t)v258;
    v260  = v338;
    sub_1000586C0(v259, v338, &qword_100404DB0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v342 + 48))(v260, 1LL, v341) == 1)
    {
      sub_10002091C(v356, v358, v355, v251, v253, v252, v254);
      swift_bridgeObjectRelease(v245);
      swift_bridgeObjectRelease(v243);
      sub_1000225EC(v260, &qword_100404DB0);
      v195  = v344;
      v194  = v345;
      unint64_t v3 = (unint64_t)v353;
      v216  = v354;
      if (!v353) {
        goto LABEL_112;
      }
    }

    else
    {
      v261  = v339;
      sub_100022628(v260, v339, type metadata accessor for DNSRecords.SRV);
      v262  = (uint64_t)v351;
      sub_100057FE8(v261, (uint64_t)&v351[*(int *)(v346 + 28)], type metadata accessor for DNSRecords.SRV);
      *(_BYTE *)v262  = 0;
      *(void *)(v262 + 8)  = v350;
      *(void *)(v262 + 16)  = v243;
      *(void *)(v262 + 24)  = v349;
      *(void *)(v262 + 32)  = v245;
      *(_BYTE *)(v262 + 40)  = v347;
      *(_BYTE *)(v262 + 41)  = v348;
      v264  = v355;
      v263  = v356;
      v265  = v358;
      *(void *)(v262 + 48)  = v356;
      *(void *)(v262 + 56)  = v265;
      *(void *)(v262 + 64)  = v264;
      *(void *)(v262 + 72)  = v251;
      *(void *)(v262 + 80)  = v253;
      *(void *)(v262 + 88)  = v252;
      *(void *)(v262 + 96)  = v254;
      sub_100020AB0(v263, v265, v264, v251, v253, v252, v254);
      v266  = v352;
      sub_10013F548(v262, v352);
      v267  = v329;
      sub_1000226B0(v266, v329, (uint64_t *)&unk_10040ED30);
      v268  = v254;
      v269  = v252;
      v270  = v253;
      v271  = v264;
      v272  = v358;
      v335  = (uint64_t *)v253;
      v336  = v269;
      v333  = v268;
      v334  = v251;
      if (v358)
      {
        v273  = v251;
        swift_bridgeObjectRetain(v358);
        swift_bridgeObjectRetain(v251);
        sub_100020AFC(v269, v268);
        sub_1000225EC(v267, (uint64_t *)&unk_10040ED30);
        *(void *)&v350  = v356;
        v274  = v268;
        v275  = v272;
        v276  = v270;
        v277  = v269;
      }

      else
      {
        v278  = v324;
        sub_1000586C0(v267, (uint64_t)v324, (uint64_t *)&unk_10040ED30);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v331 + 48))(v278, 1LL, v346) == 1)
        {
          sub_1000225EC((uint64_t)v278, (uint64_t *)&unk_10040ED30);
          *(void *)&v350  = 0LL;
          v275  = 0LL;
          v271  = 0LL;
          v273  = 0LL;
          v276  = 0LL;
          v277  = 0LL;
          v274  = 0LL;
        }

        else
        {
          v279  = v278[7];
          v280  = v278[8];
          v281  = v278[9];
          v276  = v278[10];
          v277  = v278[11];
          v274  = v278[12];
          *(void *)&v350  = v278[6];
          v275  = v279;
          v271  = v280;
          v273  = v281;
          sub_100020AB0(v350, v279, v280, v281, v276, v277, v274);
          sub_10005802C((uint64_t)v278, type metadata accessor for AWDLPeer.AdvertisedService);
        }
      }

      v282  = v351;
      sub_10002091C( *((void *)v351 + 6),  *((void *)v351 + 7),  *((void *)v351 + 8),  *((void *)v351 + 9),  *((void *)v351 + 10),  *((void *)v351 + 11),  *((void *)v351 + 12));
      v282[6]  = v350;
      v282[7]  = v275;
      v282[8]  = v271;
      v282[9]  = v273;
      v282[10]  = v276;
      v282[11]  = v277;
      v282[12]  = v274;
      v283  = v330;
      sub_1000226B0(v352, (uint64_t)v330, (uint64_t *)&unk_10040ED30);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v331 + 48))(v283, 1LL, v346) != 1)
      {
        v289  = (uint64_t)v283;
        v285  = *v283;
        sub_10005802C(v289, type metadata accessor for AWDLPeer.AdvertisedService);
        v287  = v333;
        v286  = v334;
LABEL_129:
        v290  = (uint64_t)v351;
        *v351  = v285;
        v291  = v328;
        sub_100057FE8(v290, v328, type metadata accessor for AWDLPeer.AdvertisedService);
        v292  = v327;
        sub_1000D34F0(v327, v291);
        sub_10002091C(v356, v358, v355, v286, (uint64_t)v335, v336, v287);
        sub_10005802C(v292, type metadata accessor for AWDLPeer.AdvertisedService);
        sub_1000225EC(v352, (uint64_t *)&unk_10040ED30);
        sub_10005802C(v339, type metadata accessor for DNSRecords.SRV);
        v288  = v290;
        goto LABEL_130;
      }

      sub_1000225EC((uint64_t)v283, (uint64_t *)&unk_10040ED30);
      v284  = sub_100126548();
      v285  = v284;
      v287  = v333;
      v286  = v334;
      if ((v284 & 0x100) == 0) {
        goto LABEL_129;
      }
      sub_10002091C(v356, v358, v355, v334, (uint64_t)v335, v336, v333);
      sub_1000225EC(v352, (uint64_t *)&unk_10040ED30);
      sub_10005802C(v339, type metadata accessor for DNSRecords.SRV);
      v288  = (uint64_t)v351;
LABEL_130:
      sub_10005802C(v288, type metadata accessor for AWDLPeer.AdvertisedService);
      unint64_t v3 = (unint64_t)v353;
      v216  = v354;
      v217  = (uint64_t *)&unk_1004086B8;
      v195  = v344;
      v194  = v345;
      if (!v353) {
        goto LABEL_112;
      }
    }
  }

  swift_release(v222);
  v293  = v360;
  swift_bridgeObjectRetain(v360);
  sub_100116B78(v294, v359);
  swift_bridgeObjectRelease(v222);
  swift_bridgeObjectRelease_n(v293, 2LL);
LABEL_154:
  sub_100021018((uint64_t)v314, v315);
  sub_100021018((uint64_t)v320, v321);
  sub_100021018((uint64_t)v312, v313);
  sub_100021018((uint64_t)v318, v319);
  sub_100021018((uint64_t)v316, v317);
  return sub_100021018((uint64_t)v322, v323);
}

              ++v203;
              swift_bridgeObjectRelease(v209);
              if (v124 == v203)
              {
                swift_bridgeObjectRelease(v61);
                goto LABEL_234;
              }

              continue;
            }
          }

          if (v124)
          {
            swift_bridgeObjectRetain(v61);
            v125  = v61 + 40;
            uint64_t v126 = _swiftEmptyArrayStorage;
            int v127 = v335;
            do
            {
              int v127 = v127 & 0xFF000000FF00LL | *(unsigned __int8 *)(v125 - 8) | ((unint64_t)*(unsigned __int16 *)(v125 - 6) << 16) | ((unint64_t)*(unsigned __int8 *)(v125 - 4) << 32) | ((unint64_t)*(unsigned __int16 *)(v125 - 2) << 48);
              uint64_t v129 = NANBitmap.Channel.channel.getter(v127);
              if ((v129 & 0xFF00000000LL) != 0x300000000LL)
              {
                uint64_t v130 = v129;
                if ((swift_isUniquelyReferenced_nonNull_native(v126) & 1) == 0) {
                  uint64_t v126 = sub_1000A65E8(0LL, v126[2] + 1LL, 1, v126);
                }
                v132  = v126[2];
                unint64_t v131 = v126[3];
                if (v132 >= v131 >> 1) {
                  uint64_t v126 = sub_1000A65E8((void *)(v131 > 1), v132 + 1, 1, v126);
                }
                v126[2]  = v132 + 1;
                BOOL v128 = &v126[v132];
                *((_DWORD *)v128 + 8)  = v130;
                *((_BYTE *)v128 + 36)  = BYTE4(v130);
                *((_BYTE *)v128 + 37)  = BYTE5(v130);
              }

              v125 += 10LL;
              --v124;
            }

            while (v124);
            v335  = v127;
            swift_bridgeObjectRelease(v61);
          }

          else
          {
            uint64_t v126 = _swiftEmptyArrayStorage;
          }

          sub_100058430(v367, v368, v369);
          sub_100021018(v341, 0LL);
          v263  = v351;
          v264  = swift_isUniquelyReferenced_nonNull_native(v351);
          v381  = v263;
          v266  = sub_100327738(v365);
          v267  = v263[2];
          v268  = (v265 & 1) == 0;
          v269  = v267 + v268;
          if (__OFADD__(v267, v268)) {
            goto LABEL_311;
          }
          v270  = v265;
          if (v263[3] >= v269)
          {
            if ((v264 & 1) == 0) {
              sub_10032ABF0();
            }
          }

          else
          {
            sub_100240E3C(v269, v264);
            v271  = sub_100327738(v365);
            if ((v270 & 1) != (v272 & 1)) {
              goto LABEL_319;
            }
            v266  = v271;
          }

          v273  = v381;
          swift_bridgeObjectRelease(0x8000000000000000LL);
          if ((v270 & 1) != 0)
          {
            v274  = swift_bridgeObjectRetain(v273);
          }

          else
          {
            v273[(v266 >> 6) + 8] |= 1LL << v266;
            *(_BYTE *)(v273[6] + v266)  = v365;
            *(void *)(v273[7] + 8 * v266)  = _swiftEmptyArrayStorage;
            v275  = v273[2];
            v276  = v275 + 1;
            v277  = __OFADD__(v275, 1LL);
            swift_bridgeObjectRetain(v273);
            if (v277) {
              goto LABEL_315;
            }
            v273[2]  = v276;
            v274  = (uint64_t)v273;
          }

          v278  = *(void *)(v274 + 56);
          v351  = (void *)v274;
          swift_bridgeObjectRelease(v274);
          v279  = *(void **)(v278 + 8 * v266);
          v280  = swift_isUniquelyReferenced_nonNull_native(v279);
          *(void *)(v278 + 8 * v266)  = v279;
          if ((v280 & 1) == 0)
          {
            v279  = sub_1002CA104(0LL, v279[2] + 1LL, 1, v279);
            *(void *)(v278 + 8 * v266)  = v279;
          }

          v282  = v279[2];
          v281  = v279[3];
          if (v282 >= v281 >> 1)
          {
            v279  = sub_1002CA104((void *)(v281 > 1), v282 + 1, 1, v279);
            *(void *)(v278 + 8 * v266)  = v279;
          }

          uint64_t v42 = v359;
          v279[2]  = v282 + 1;
          v283  = &v279[7 * v282];
          v284  = v367;
          v283[4]  = v126;
          v283[5]  = v284;
          v285  = v368;
          v286  = v369;
          v283[6]  = v368;
          v283[7]  = v286;
          *((_BYTE *)v283 + 64)  = v364;
          v283[9]  = v363;
          *((double *)v283 + 10)  = v60;
          sub_100057CA0(v284, v285, v286);
          sub_100057CA0(v284, v285, v286);
          swift_bridgeObjectRelease(v61);
          unint64_t v47 = &v374;
        }

        else
        {
          if (v57 == v56)
          {
            uint64_t v61 = v54;
            if (v59 == v58) {
              goto LABEL_283;
            }
            if (!v362) {
              goto LABEL_284;
            }
            v381  = (void *)v54;
            if (!*(void *)(v54 + 16)) {
              goto LABEL_284;
            }
            uint64_t v62 = *(unsigned __int8 *)(v54 + 32);
            uint64_t v63 = *(unsigned __int16 *)(v54 + 34);
            uint64_t v64 = *(unsigned __int8 *)(v54 + 36);
            uint64_t v65 = *(unsigned __int16 *)(v54 + 38);
            swift_bridgeObjectRetain(v54);
            uint64_t v66 = v343 & 0xFF000000FF00LL | v62 | (v63 << 16) | (v64 << 32) | (v65 << 48);
            unsigned __int8 v67 = NANBitmap.Channel.channel.getter(v66);
            if ((v67 & 0xFF00000000LL) == 0x300000000LL) {
              goto LABEL_285;
            }
            uint64_t v68 = v67;
            sub_100058430(v367, v368, v369);
            sub_100021018(v348, 0LL);
            unint64_t v69 = v358;
            uint64_t v70 = swift_isUniquelyReferenced_nonNull_native(v358);
            v378  = v69;
            uint64_t v72 = sub_100327738(v365);
            uint64_t v73 = v69[2];
            Class v74 = (v71 & 1) == 0;
            unint64_t v75 = v73 + v74;
            if (__OFADD__(v73, v74)) {
              goto LABEL_300;
            }
            unint64_t v76 = v71;
            a1  = v361;
            if (v69[3] >= v75)
            {
              if ((v70 & 1) == 0) {
                sub_10032ABFC();
              }
            }

            else
            {
              sub_100240E48(v75, v70);
              id v77 = sub_100327738(v365);
              if ((v76 & 1) != (v78 & 1)) {
                goto LABEL_319;
              }
              uint64_t v72 = v77;
            }

            char v133 = v378;
            swift_bridgeObjectRelease(0x8000000000000000LL);
            if ((v76 & 1) != 0)
            {
              uint64_t v134 = swift_bridgeObjectRetain(v133);
            }

            else
            {
              v133[(v72 >> 6) + 8] |= 1LL << v72;
              *(_BYTE *)(v133[6] + v72)  = v365;
              *(void *)(v133[7] + 8 * v72)  = _swiftEmptyArrayStorage;
              v139  = v133[2];
              v140  = v139 + 1;
              v141  = __OFADD__(v139, 1LL);
              swift_bridgeObjectRetain(v133);
              if (v141) {
                goto LABEL_309;
              }
              v133[2]  = v140;
              uint64_t v134 = (uint64_t)v133;
            }

            v142  = *(void *)(v134 + 56);
            v358  = (void *)v134;
            swift_bridgeObjectRelease(v134);
            v143  = *(void **)(v142 + 8 * v72);
            v144  = swift_isUniquelyReferenced_nonNull_native(v143);
            *(void *)(v142 + 8 * v72)  = v143;
            v343  = v66;
            if ((v144 & 1) == 0)
            {
              v143  = sub_1002CA24C(0LL, v143[2] + 1LL, 1, v143);
              *(void *)(v142 + 8 * v72)  = v143;
            }

            v146  = v143[2];
            v145  = v143[3];
            if (v146 >= v145 >> 1)
            {
              v143  = sub_1002CA24C((void *)(v145 > 1), v146 + 1, 1, v143);
              *(void *)(v142 + 8 * v72)  = v143;
            }

            v143[2]  = v146 + 1;
            v147  = &v143[7 * v146];
            *((_DWORD *)v147 + 8)  = v68;
            *((_BYTE *)v147 + 36)  = BYTE4(v68);
            *((_BYTE *)v147 + 37)  = BYTE5(v68);
            v148  = v368;
            v147[5]  = v367;
            v147[6]  = v148;
            v147[7]  = v369;
            *((_BYTE *)v147 + 64)  = v364;
            v147[9]  = v363;
            *((double *)v147 + 10)  = v60;
            if (!v381[2]) {
              goto LABEL_303;
            }
            sub_10027D938(0LL, 1LL);
            v149  = v381;
            v150  = v381[2];
            if (v150)
            {
              v378  = _swiftEmptyArrayStorage;
              swift_bridgeObjectRetain(v381);
              v151  = v149 + 5;
              do
              {
                a1  = a1 & 0xFF000000FF00LL | *((unsigned __int8 *)v151 - 8) | ((unint64_t)*((unsigned __int16 *)v151
                                                                                                 - 3) << 16) | ((unint64_t)*((unsigned __int8 *)v151 - 4) << 32) | ((unint64_t)*((unsigned __int16 *)v151 - 1) << 48);
                v153  = NANBitmap.Channel.channel.getter(a1);
                if ((v153 & 0xFF00000000LL) != 0x300000000LL)
                {
                  v154  = v153;
                  v155  = v378;
                  if ((swift_isUniquelyReferenced_nonNull_native(v378) & 1) == 0)
                  {
                    v155  = sub_1000A65E8(0LL, v155[2] + 1LL, 1, v155);
                    v378  = v155;
                  }

                  v157  = v155[2];
                  v156  = v155[3];
                  if (v157 >= v156 >> 1) {
                    v378  = sub_1000A65E8((void *)(v156 > 1), v157 + 1, 1, v155);
                  }
                  v152  = sub_1002E7D70(v157, v154 & 0xFFFFFFFFFFFFLL);
                  NANBitmap.Channel.operatingClass.getter(v152);
                }

                v151  = (void *)((char *)v151 + 10);
                --v150;
              }

              while (v150);
              swift_bridgeObjectRelease_n(v149, 2LL);
              v158  = v378;
              sub_100058430(v367, v368, v369);
              sub_100021018((uint64_t)v347, 0LL);
              v159  = v351;
              v160  = swift_isUniquelyReferenced_nonNull_native(v351);
              v378  = v159;
              v162  = sub_100327738(v365);
              v163  = v159[2];
              v164  = (v161 & 1) == 0;
              v165  = v163 + v164;
              if (__OFADD__(v163, v164)) {
                goto LABEL_304;
              }
              v166  = v161;
              uint64_t v41 = v360;
              if (v159[3] >= v165)
              {
                if ((v160 & 1) == 0) {
                  sub_10032ABF0();
                }
              }

              else
              {
                sub_100240E3C(v165, v160);
                v167  = sub_100327738(v365);
                if ((v166 & 1) != (v168 & 1)) {
                  goto LABEL_319;
                }
                v162  = v167;
              }

              v192  = v378;
              swift_bridgeObjectRelease(0x8000000000000000LL);
              swift_bridgeObjectRetain(v192);
              if ((v166 & 1) == 0) {
                sub_100244B34(v162, v365, (uint64_t)_swiftEmptyArrayStorage, v192);
              }
              v193  = v192[7];
              v351  = v192;
              swift_bridgeObjectRelease(v192);
              v194  = (void *)(v193 + 8 * v162);
              v195  = (void *)*v194;
              v196  = swift_isUniquelyReferenced_nonNull_native(*v194);
              *v194  = v195;
              if ((v196 & 1) == 0)
              {
                v195  = sub_1002CA104(0LL, v195[2] + 1LL, 1, v195);
                *v194  = v195;
              }

              uint64_t v42 = v359;
              v197  = v367;
              v382[0]  = v158;
              v382[1]  = v367;
              v198  = v368;
              v199  = v369;
              v382[2]  = v368;
              v382[3]  = v369;
              v383  = v364;
              v384  = v363;
              v385  = v60;
              v200  = (void *)v195[2];
              sub_100254248(v200);
              sub_1002E7D98((uint64_t)v200, (uint64_t)v382);
              NANBitmap.Channel.operatingClass.getter(v201);
              sub_100057CA0(v197, v198, v199);
              sub_100057CA0(v197, v198, v199);
              swift_bridgeObjectRelease(v61);
              v347  = sub_10005D56C;
            }

            else
            {
              swift_bridgeObjectRelease(v381);
              v189  = v367;
              v190  = v368;
              v191  = v369;
              sub_100057CA0(v367, v368, v369);
              sub_100057CA0(v189, v190, v191);
              swift_bridgeObjectRelease(v61);
              uint64_t v41 = v360;
              uint64_t v42 = v359;
            }

            v202  = (char *)&v378;
LABEL_213:
            *((void *)v202 - 32)  = sub_10005D56C;
            unint64_t v39 = v354;
            unint64_t v37 = v372;
            goto LABEL_43;
          }

          uint64_t v61 = v54;
          if (v59 == v58) {
            goto LABEL_283;
          }
          if (!v362) {
            goto LABEL_284;
          }
          if (*(void *)(v54 + 16) != 1LL) {
            goto LABEL_283;
          }
          id v96 = v345 & 0xFF000000FF00LL | *(unsigned __int8 *)(v54 + 32) | ((unint64_t)*(unsigned __int16 *)(v54 + 34) << 16) | ((unint64_t)*(unsigned __int8 *)(v54 + 36) << 32) | ((unint64_t)*(unsigned __int16 *)(v54 + 38) << 48);
          uint64_t v97 = NANBitmap.Channel.channel.getter(v96);
          if ((v97 & 0xFF00000000LL) == 0x300000000LL) {
            goto LABEL_283;
          }
          __int128 v98 = v97;
          sub_100058430(v367, v368, v369);
          sub_100021018(v349, 0LL);
          uint64_t v99 = v358;
          v100  = swift_isUniquelyReferenced_nonNull_native(v358);
          v381  = v99;
          uint64_t v102 = sub_100327738(v365);
          __int128 v103 = v99[2];
          uint64_t v104 = (v101 & 1) == 0;
          v105  = v103 + v104;
          if (__OFADD__(v103, v104)) {
            goto LABEL_301;
          }
          v106  = v101;
          id v107 = v99[3];
          a1  = v361;
          v345  = v96;
          if (v107 >= v105)
          {
            if ((v100 & 1) == 0) {
              sub_10032ABFC();
            }
          }

          else
          {
            sub_100240E48(v105, v100);
            v108  = sub_100327738(v365);
            if ((v106 & 1) != (v109 & 1)) {
              goto LABEL_319;
            }
            uint64_t v102 = v108;
          }

          __int128 v135 = v381;
          swift_bridgeObjectRelease(0x8000000000000000LL);
          if ((v106 & 1) != 0)
          {
            uint64_t v136 = swift_bridgeObjectRetain(v135);
          }

          else
          {
            v135[(v102 >> 6) + 8] |= 1LL << v102;
            *(_BYTE *)(v135[6] + v102)  = v365;
            *(void *)(v135[7] + 8 * v102)  = _swiftEmptyArrayStorage;
            v169  = v135[2];
            v170  = v169 + 1;
            v171  = __OFADD__(v169, 1LL);
            swift_bridgeObjectRetain(v135);
            if (v171) {
              goto LABEL_307;
            }
            v135[2]  = v170;
            uint64_t v136 = (uint64_t)v135;
          }

          v172  = *(void *)(v136 + 56);
          v358  = (void *)v136;
          swift_bridgeObjectRelease(v136);
          v173  = *(void **)(v172 + 8 * v102);
          v174  = swift_isUniquelyReferenced_nonNull_native(v173);
          *(void *)(v172 + 8 * v102)  = v173;
          if ((v174 & 1) == 0)
          {
            v173  = sub_1002CA24C(0LL, v173[2] + 1LL, 1, v173);
            *(void *)(v172 + 8 * v102)  = v173;
          }

          v176  = v173[2];
          v175  = v173[3];
          if (v176 >= v175 >> 1)
          {
            v173  = sub_1002CA24C((void *)(v175 > 1), v176 + 1, 1, v173);
            *(void *)(v172 + 8 * v102)  = v173;
          }

          uint64_t v42 = v359;
          v173[2]  = v176 + 1;
          uint64_t v43 = &v173[7 * v176];
          *((_DWORD *)v43 + 8)  = v98;
          *((_BYTE *)v43 + 36)  = BYTE4(v98);
          *((_BYTE *)v43 + 37)  = BYTE5(v98);
          unint64_t v44 = v367;
          unint64_t v45 = v368;
          v43[5]  = v367;
          v43[6]  = v45;
          unint64_t v46 = v369;
          v43[7]  = v369;
          *((_BYTE *)v43 + 64)  = v364;
          v43[9]  = v363;
          *((double *)v43 + 10)  = v60;
          sub_100057CA0(v44, v45, v46);
          sub_100057CA0(v44, v45, v46);
          swift_bridgeObjectRelease(v61);
          unint64_t v47 = (uint64_t *)&v379;
        }

double sub_100119D58@<D0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = *((void *)a2 + 3);
  char v7 = *((_BYTE *)a2 + 33);
  char v8 = a2[2] & 1;
  __int128 v14 = *a2;
  __int128 v11 = v14;
  __int128 v12 = a2[1];
  __int16 v13 = *((_WORD *)a2 + 16);
  uint64_t v9 = type metadata accessor for DNSRecords.SRV(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(a1, 1LL, 1LL, v9);
  sub_1000209DC((uint64_t)&v14);
  sub_1000209DC((uint64_t)&v12);
  *(_OWORD *)a3  = v11;
  *(void *)(a3 + 16)  = v5;
  *(void *)(a3 + 24)  = v6;
  *(_BYTE *)(a3 + 32)  = v8;
  *(_BYTE *)(a3 + 33)  = v7;
  double result = 0.0;
  *(_OWORD *)(a3 + 40)  = 0u;
  *(_OWORD *)(a3 + 56)  = 0u;
  *(_OWORD *)(a3 + 72)  = 0u;
  *(void *)(a3 + 88)  = 0LL;
  return result;
}

double sub_100119E18@<D0>(void (*a1)(__int128 *__return_ptr, uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100002274(&qword_1004086B0);
  a1(&v14, a2 + *(int *)(v4 + 64));
  double result = *(double *)&v14;
  uint64_t v6 = v15;
  uint64_t v7 = v16;
  char v8 = v17;
  char v9 = v18;
  uint64_t v10 = v22;
  __int128 v11 = v19;
  __int128 v12 = v20;
  __int128 v13 = v21;
  *(_OWORD *)a2  = v14;
  *(void *)(a2 + 16)  = v6;
  *(void *)(a2 + 24)  = v7;
  *(_BYTE *)(a2 + 32)  = v8;
  *(_BYTE *)(a2 + 33)  = v9;
  *(_OWORD *)(a2 + 40)  = v11;
  *(_OWORD *)(a2 + 56)  = v12;
  *(_OWORD *)(a2 + 72)  = v13;
  *(void *)(a2 + 88)  = v10;
  return result;
}

double sub_100119EA8@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v7 = a2[3];
  char v9 = *((_BYTE *)a2 + 32);
  char v10 = *((_BYTE *)a2 + 33);
  uint64_t v11 = type metadata accessor for DNSRecords.SRV(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(a1, 1LL, 1LL, v11);
  *(void *)a3  = v6;
  *(void *)(a3 + 8)  = v5;
  *(void *)(a3 + 16)  = v8;
  *(void *)(a3 + 24)  = v7;
  *(_BYTE *)(a3 + 32)  = v9;
  *(_BYTE *)(a3 + 33)  = v10;
  *(_OWORD *)(a3 + 40)  = 0u;
  *(_OWORD *)(a3 + 56)  = 0u;
  *(_OWORD *)(a3 + 72)  = 0u;
  *(void *)(a3 + 88)  = 0LL;
  swift_bridgeObjectRetain(v5);
  *(void *)&double result = swift_bridgeObjectRetain(v7).n128_u64[0];
  return result;
}

uint64_t AWDLPeer.received(actionFrame:with:)(unint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  unsigned int v9 = a1;
  unint64_t v10 = HIDWORD(a1);
  uint64_t v11 = *(void *)(type metadata accessor for DispatchTime(0LL) - 8);
  uint64_t v12 = __chkstk_darwin();
  __int128 v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v15 = *(unsigned __int8 *)(a4 + 16);
  uint64_t v32 = v12;
  uint64_t v33 = a3;
  if (v15)
  {
    if (v15 == 1)
    {
      uint64_t v16 = type metadata accessor for AWDLActionFrame.Header(0LL);
      uint64_t v17 = *(void *)(a4 + *(int *)(v16 + 48));
      char v18 = (int *)type metadata accessor for AWDLPeer(0LL);
      uint64_t v19 = v18[24];
    }

    else
    {
      uint64_t v16 = type metadata accessor for AWDLActionFrame.Header(0LL);
      uint64_t v17 = *(void *)(a4 + *(int *)(v16 + 48));
      char v18 = (int *)type metadata accessor for AWDLPeer(0LL);
      uint64_t v19 = v18[25];
    }
  }

  else
  {
    uint64_t v16 = type metadata accessor for AWDLActionFrame.Header(0LL);
    uint64_t v17 = *(void *)(a4 + *(int *)(v16 + 48));
    char v18 = (int *)type metadata accessor for AWDLPeer(0LL);
    uint64_t v19 = v18[23];
  }

  uint64_t v20 = v5 + v19;
  *(void *)uint64_t v20 = v17;
  *(_BYTE *)(v20 + 8)  = 0;
  BOOL v21 = v10 >= a2;
  int v22 = v10 - a2;
  BOOL v23 = v10 < a2;
  if (v21) {
    int v24 = v22;
  }
  else {
    int v24 = 0;
  }
  type metadata accessor for AWDLPeer(0LL);
  uint64_t v25 = v5 + v18[21];
  *(_DWORD *)uint64_t v25 = v24;
  *(_BYTE *)(v25 + 4)  = v23;
  type metadata accessor for AWDLActionFrame.Header(0LL);
  uint64_t v26 = v5 + v18[22];
  *(_DWORD *)uint64_t v26 = *(_DWORD *)(a4 + *(int *)(v16 + 52));
  *(_BYTE *)(v26 + 4)  = 0;
  sub_10011800C(v33, (v9 >> 8) & 1);
  uint64_t v27 = v18[7];
  uint64_t v28 = *(void *)(v5 + v27);
  BOOL v29 = __OFADD__(v28, 1LL);
  uint64_t v30 = v28 + 1;
  if (v29)
  {
    __break(1u);
    goto LABEL_13;
  }

  *(void *)(v5 + v27)  = v30;
  if (qword_1004041A0 != -1) {
LABEL_13:
  }
    swift_once(&qword_1004041A0, sub_1001207BC);
  (*(void (**)(void))(*(void *)algn_1004107A8 + 8LL))();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 40))(v5 + v18[6], v14, v32);
}

void AWDLPeer.hash(into:)()
{
  uint64_t v1 = (Swift::UInt8 *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0LL) + 20));
  Swift::UInt8 v2 = v1[1];
  Swift::UInt8 v3 = v1[2];
  Swift::UInt8 v4 = v1[3];
  Swift::UInt8 v5 = v1[4];
  Swift::UInt8 v6 = v1[5];
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
}

BOOL static AWDLPeer.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(type metadata accessor for AWDLPeer(0LL) + 20);
  Swift::UInt8 v5 = (_DWORD *)(a1 + v4);
  int v6 = *(unsigned __int16 *)(a1 + v4 + 4);
  uint64_t v7 = a2 + v4;
  return *v5 == *(_DWORD *)v7 && v6 == *(unsigned __int16 *)(v7 + 4);
}

Swift::Int AWDLPeer.hashValue.getter()
{
  uint64_t v1 = (Swift::UInt8 *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0LL) + 20));
  Swift::UInt8 v2 = v1[1];
  Swift::UInt8 v3 = v1[2];
  Swift::UInt8 v4 = v1[3];
  Swift::UInt8 v5 = v1[4];
  Swift::UInt8 v6 = v1[5];
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

Swift::Int sub_10011A2F4(uint64_t a1)
{
  Swift::UInt8 v3 = (Swift::UInt8 *)(v1 + *(int *)(a1 + 20));
  LOBYTE(a1)  = v3[1];
  Swift::UInt8 v4 = v3[2];
  Swift::UInt8 v5 = v3[3];
  Swift::UInt8 v6 = v3[4];
  Swift::UInt8 v7 = v3[5];
  Hasher._combine(_:)(*v3);
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

void sub_10011A3A0(uint64_t a1, uint64_t a2)
{
  Swift::UInt8 v3 = (Swift::UInt8 *)(v2 + *(int *)(a2 + 20));
  Swift::UInt8 v4 = v3[1];
  Swift::UInt8 v5 = v3[2];
  Swift::UInt8 v6 = v3[3];
  Swift::UInt8 v7 = v3[4];
  Swift::UInt8 v8 = v3[5];
  Hasher._combine(_:)(*v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
}

Swift::Int sub_10011A424(uint64_t a1, uint64_t a2)
{
  Swift::UInt8 v4 = (Swift::UInt8 *)(v2 + *(int *)(a2 + 20));
  LOBYTE(a2)  = v4[1];
  Swift::UInt8 v5 = v4[2];
  Swift::UInt8 v6 = v4[3];
  Swift::UInt8 v7 = v4[4];
  Swift::UInt8 v8 = v4[5];
  Hasher._combine(_:)(*v4);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

BOOL sub_10011A4CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(int *)(a3 + 20);
  Swift::UInt8 v4 = (_DWORD *)(a1 + v3);
  int v5 = *(unsigned __int16 *)(a1 + v3 + 4);
  uint64_t v6 = a2 + v3;
  return *v4 == *(_DWORD *)v6 && v5 == *(unsigned __int16 *)(v6 + 4);
}

uint64_t type metadata accessor for AWDLPeer.AdvertisedService(uint64_t a1)
{
  return sub_100020E48(a1, qword_100408668, (uint64_t)&nominal type descriptor for AWDLPeer.AdvertisedService);
}

uint64_t sub_10011A554(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DNSRecords.SRV(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10011A59C()
{
  unint64_t result = qword_100408500;
  if (!qword_100408500)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AWDLPeer.Reachability,  &type metadata for AWDLPeer.Reachability);
    atomic_store(result, (unint64_t *)&qword_100408500);
  }

  return result;
}

uint64_t sub_10011A5E0()
{
  return sub_10000AF70( &qword_100408508,  type metadata accessor for AWDLPeer.AdvertisedService,  (uint64_t)&protocol conformance descriptor for AWDLPeer.AdvertisedService);
}

uint64_t sub_10011A60C()
{
  return sub_10000AF70( &qword_100408510,  type metadata accessor for AWDLPeer,  (uint64_t)&protocol conformance descriptor for AWDLPeer);
}

void *initializeBufferWithCopyOfBuffer for AWDLPeer(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v27 = *a2;
    *a1  = *a2;
    a1  = (void *)(v27 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for Logger(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    unint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(_DWORD *)unint64_t v10 = *(_DWORD *)v11;
    *((_WORD *)v10 + 2)  = *((_WORD *)v11 + 2);
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    uint64_t v14 = type metadata accessor for DispatchTime(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
    uint64_t v15 = a3[8];
    *(void *)((char *)a1 + a3[7])  = *(void *)((char *)a2 + a3[7]);
    uint64_t v16 = (_OWORD *)((char *)a1 + v15);
    uint64_t v17 = (_OWORD *)((char *)a2 + v15);
    *uint64_t v16 = *v17;
    *(_OWORD *)((char *)v16 + 10)  = *(_OWORD *)((char *)v17 + 10);
    uint64_t v18 = a3[9];
    uint64_t v19 = a3[10];
    uint64_t v20 = (char *)a1 + v18;
    BOOL v21 = (char *)a2 + v18;
    __int128 v22 = *((_OWORD *)v21 + 1);
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    *((_OWORD *)v20 + 1)  = v22;
    *((_OWORD *)v20 + 2)  = *((_OWORD *)v21 + 2);
    v20[48]  = v21[48];
    BOOL v23 = (char *)a1 + v19;
    int v24 = (char *)a2 + v19;
    unint64_t v25 = *(void *)((char *)a2 + v19 + 24);
    if (v25 >> 60 == 15)
    {
      __int128 v26 = *((_OWORD *)v24 + 1);
      *(_OWORD *)BOOL v23 = *(_OWORD *)v24;
      *((_OWORD *)v23 + 1)  = v26;
    }

    else
    {
      *BOOL v23 = *v24;
      *(_DWORD *)(v23 + 2)  = *(_DWORD *)(v24 + 2);
      *((_DWORD *)v23 + 2)  = *((_DWORD *)v24 + 2);
      uint64_t v28 = *((void *)v24 + 2);
      sub_100020AFC(v28, v25);
      *((void *)v23 + 2)  = v28;
      *((void *)v23 + 3)  = v25;
    }

    uint64_t v29 = a3[11];
    uint64_t v30 = a3[12];
    uint64_t v31 = (char *)a1 + v29;
    uint64_t v32 = (char *)a2 + v29;
    *(_WORD *)uint64_t v31 = *(_WORD *)v32;
    v31[2]  = v32[2];
    uint64_t v33 = (char *)a1 + v30;
    int v34 = (char *)a2 + v30;
    *uint64_t v33 = *v34;
    *(_DWORD *)(v33 + 2)  = *(_DWORD *)(v34 + 2);
    *(void *)(v33 + 6)  = *(void *)(v34 + 6);
    *(void *)(v33 + 14)  = *(void *)(v34 + 14);
    *((_WORD *)v33 + 13)  = *((_WORD *)v34 + 13);
    *(_DWORD *)(v33 + 22)  = *(_DWORD *)(v34 + 22);
    *((_WORD *)v33 + 14)  = *((_WORD *)v34 + 14);
    *(_DWORD *)(v33 + 30)  = *(_DWORD *)(v34 + 30);
    uint64_t v35 = *((void *)v34 + 5);
    *((void *)v33 + 5)  = v35;
    uint64_t v36 = a3[13];
    uint64_t v37 = a3[14];
    uint64_t v38 = (char *)a1 + v36;
    unint64_t v39 = (char *)a2 + v36;
    *uint64_t v38 = *v39;
    uint64_t v40 = *((void *)v39 + 2);
    *((void *)v38 + 1)  = *((void *)v39 + 1);
    *((void *)v38 + 2)  = v40;
    uint64_t v41 = (_WORD *)((char *)a1 + v37);
    uint64_t v42 = (_WORD *)((char *)a2 + v37);
    uint64_t v43 = (int *)type metadata accessor for AWDLActionFrame.DataPathState(0LL);
    uint64_t v44 = *((void *)v43 - 1);
    unint64_t v45 = *(unsigned int (**)(_WORD *, uint64_t, int *))(v44 + 48);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v40);
    if (v45(v42, 1LL, v43))
    {
      uint64_t v46 = sub_100002274((uint64_t *)&unk_1004104A0);
      memcpy(v41, v42, *(void *)(*(void *)(v46 - 8) + 64LL));
    }

    else
    {
      uint64_t v102 = v44;
      *uint64_t v41 = *v42;
      *((_BYTE *)v41 + 2)  = *((_BYTE *)v42 + 2);
      *((_DWORD *)v41 + 1)  = *((_DWORD *)v42 + 1);
      v41[4]  = v42[4];
      *(_DWORD *)(v41 + 5)  = *(_DWORD *)(v42 + 5);
      *(_DWORD *)((char *)v41 + 13)  = *(_DWORD *)((char *)v42 + 13);
      v41[12]  = v42[12];
      *((_DWORD *)v41 + 5)  = *((_DWORD *)v42 + 5);
      int v47 = *(_DWORD *)(v42 + 13);
      *(_DWORD *)((char *)v41 + 29)  = *(_DWORD *)((char *)v42 + 29);
      *(_DWORD *)(v41 + 13)  = v47;
      uint64_t v103 = *((void *)v42 + 6);
      *((void *)v41 + 5)  = *((void *)v42 + 5);
      *((void *)v41 + 6)  = v103;
      *((_DWORD *)v41 + 14)  = *((_DWORD *)v42 + 14);
      *(_DWORD *)((char *)v41 + 59)  = *(_DWORD *)((char *)v42 + 59);
      *((_BYTE *)v41 + 63)  = *((_BYTE *)v42 + 63);
      *((_DWORD *)v41 + 16)  = *((_DWORD *)v42 + 16);
      *((_BYTE *)v41 + 68)  = *((_BYTE *)v42 + 68);
      int v48 = *((_DWORD *)v42 + 18);
      *((_BYTE *)v41 + 76)  = *((_BYTE *)v42 + 76);
      *((_DWORD *)v41 + 18)  = v48;
      *(_OWORD *)((char *)v41 + 77)  = *(_OWORD *)((char *)v42 + 77);
      *(_WORD *)((char *)v41 + 93)  = *(_WORD *)((char *)v42 + 93);
      uint64_t v49 = v43[34];
      __dst  = (char *)v41 + v49;
      uint64_t v50 = (char *)v42 + v49;
      uint64_t v51 = type metadata accessor for DispatchTimeInterval(0LL);
      uint64_t v52 = *(void *)(v51 - 8);
      unint64_t v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
      swift_bridgeObjectRetain(v103);
      if (v53(v50, 1LL, v51))
      {
        uint64_t v54 = sub_100002274(&qword_100407450);
        memcpy(__dst, v50, *(void *)(*(void *)(v54 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v52 + 16))(__dst, v50, v51);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(__dst, 0LL, 1LL, v51);
      }

      uint64_t v55 = v43[35];
      uint64_t v56 = (char *)v41 + v55;
      id v57 = (char *)v42 + v55;
      *(_DWORD *)uint64_t v56 = *(_DWORD *)v57;
      v56[4]  = v57[4];
      uint64_t v58 = v43[36];
      uint64_t v59 = (char *)v41 + v58;
      uint64_t v60 = (char *)v42 + v58;
      v59[4]  = v60[4];
      *(_DWORD *)uint64_t v59 = *(_DWORD *)v60;
      (*(void (**)(_WORD *, void, uint64_t, int *))(v102 + 56))(v41, 0LL, 1LL, v43);
    }

    uint64_t v61 = a3[15];
    uint64_t v62 = a3[16];
    uint64_t v63 = (_OWORD *)((char *)a1 + v61);
    uint64_t v64 = (_OWORD *)((char *)a2 + v61);
    __int128 v65 = v64[1];
    _OWORD *v63 = *v64;
    v63[1]  = v65;
    *(_OWORD *)((char *)v63 + 25)  = *(_OWORD *)((char *)v64 + 25);
    uint64_t v66 = (char *)a1 + v62;
    unsigned __int8 v67 = (char *)a2 + v62;
    *(_WORD *)uint64_t v66 = *(_WORD *)v67;
    v66[2]  = v67[2];
    uint64_t v68 = a3[17];
    uint64_t v69 = a3[18];
    uint64_t v70 = (char *)a1 + v68;
    uint64_t v71 = (char *)a2 + v68;
    __int128 v72 = *((_OWORD *)v71 + 1);
    *(_OWORD *)uint64_t v70 = *(_OWORD *)v71;
    *((_OWORD *)v70 + 1)  = v72;
    *((void *)v70 + 4)  = *((void *)v71 + 4);
    uint64_t v73 = (char *)a1 + v69;
    Class v74 = (char *)a2 + v69;
    *(_DWORD *)uint64_t v73 = *(_DWORD *)v74;
    *((_WORD *)v73 + 2)  = *((_WORD *)v74 + 2);
    uint64_t v75 = *((void *)v74 + 1);
    *((void *)v73 + 1)  = v75;
    uint64_t v76 = a3[19];
    uint64_t v77 = a3[20];
    uint64_t v78 = (void *)((char *)a1 + v76);
    BOOL v79 = (void *)((char *)a2 + v76);
    uint64_t v80 = *v79;
    uint64_t v81 = v79[1];
    uint64_t *v78 = *v79;
    v78[1]  = v81;
    uint64_t v82 = *(void *)((char *)a2 + v77);
    *(void *)((char *)a1 + v77)  = v82;
    uint64_t v83 = a3[21];
    uint64_t v84 = a3[22];
    uint64_t v85 = (char *)a1 + v83;
    uint64_t v86 = (char *)a2 + v83;
    *(_DWORD *)uint64_t v85 = *(_DWORD *)v86;
    v85[4]  = v86[4];
    uint64_t v87 = (char *)a1 + v84;
    unint64_t v88 = (char *)a2 + v84;
    *(_DWORD *)uint64_t v87 = *(_DWORD *)v88;
    v87[4]  = v88[4];
    v89  = a3[23];
    uint64_t v90 = a3[24];
    unint64_t v91 = (char *)a1 + v89;
    uint64_t v92 = (char *)a2 + v89;
    *(void *)unint64_t v91 = *(void *)v92;
    v91[8]  = v92[8];
    uint64_t v93 = (char *)a1 + v90;
    uint64_t v94 = (char *)a2 + v90;
    *(void *)uint64_t v93 = *(void *)v94;
    v93[8]  = v94[8];
    uint64_t v95 = a3[25];
    uint64_t v96 = a3[26];
    uint64_t v97 = (char *)a1 + v95;
    __int128 v98 = (char *)a2 + v95;
    v97[8]  = v98[8];
    *(void *)uint64_t v97 = *(void *)v98;
    *((_BYTE *)a1 + v96)  = *((_BYTE *)a2 + v96);
    uint64_t v99 = a3[28];
    *((_BYTE *)a1 + a3[27])  = *((_BYTE *)a2 + a3[27]);
    *((_BYTE *)a1 + v99)  = *((_BYTE *)a2 + v99);
    *((_BYTE *)a1 + a3[29])  = *((_BYTE *)a2 + a3[29]);
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRetain(v80);
    swift_bridgeObjectRetain(v81);
    swift_bridgeObjectRetain(v82);
  }

  return a1;
}

uint64_t destroy for AWDLPeer(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v5 = a1 + a2[6];
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  uint64_t v7 = a1 + a2[10];
  unint64_t v8 = *(void *)(v7 + 24);
  if (v8 >> 60 != 15) {
    sub_1000208D8(*(void *)(v7 + 16), v8);
  }
  swift_bridgeObjectRelease(*(void *)(a1 + a2[12] + 40));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[13] + 16));
  uint64_t v9 = a1 + a2[14];
  uint64_t v10 = type metadata accessor for AWDLActionFrame.DataPathState(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10))
  {
    swift_bridgeObjectRelease(*(void *)(v9 + 48));
    uint64_t v11 = v9 + *(int *)(v10 + 136);
    uint64_t v12 = type metadata accessor for DispatchTimeInterval(0LL);
    uint64_t v13 = *(void *)(v12 - 8);
  }

  swift_bridgeObjectRelease(*(void *)(a1 + a2[18] + 8));
  uint64_t v14 = (void *)(a1 + a2[19]);
  swift_bridgeObjectRelease(*v14);
  swift_bridgeObjectRelease(v14[1]);
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[20]));
}

uint64_t initializeWithCopy for AWDLPeer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_WORD *)(v9 + 4)  = *(_WORD *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  uint64_t v13 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v12, v13);
  uint64_t v14 = a3[8];
  *(void *)(a1 + a3[7])  = *(void *)(a2 + a3[7]);
  uint64_t v15 = (_OWORD *)(a1 + v14);
  uint64_t v16 = (_OWORD *)(a2 + v14);
  *uint64_t v15 = *v16;
  *(_OWORD *)((char *)v15 + 10)  = *(_OWORD *)((char *)v16 + 10);
  uint64_t v17 = a3[9];
  uint64_t v18 = a3[10];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  __int128 v21 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16)  = v21;
  *(_OWORD *)(v19 + 32)  = *(_OWORD *)(v20 + 32);
  *(_BYTE *)(v19 + 48)  = *(_BYTE *)(v20 + 48);
  uint64_t v22 = a1 + v18;
  uint64_t v23 = a2 + v18;
  unint64_t v24 = *(void *)(a2 + v18 + 24);
  if (v24 >> 60 == 15)
  {
    __int128 v25 = *(_OWORD *)(v23 + 16);
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    *(_OWORD *)(v22 + 16)  = v25;
  }

  else
  {
    *(_BYTE *)uint64_t v22 = *(_BYTE *)v23;
    *(_DWORD *)(v22 + 2)  = *(_DWORD *)(v23 + 2);
    *(_DWORD *)(v22 + 8)  = *(_DWORD *)(v23 + 8);
    uint64_t v26 = *(void *)(v23 + 16);
    sub_100020AFC(v26, v24);
    *(void *)(v22 + 16)  = v26;
    *(void *)(v22 + 24)  = v24;
  }

  uint64_t v27 = a3[11];
  uint64_t v28 = a3[12];
  uint64_t v29 = a1 + v27;
  uint64_t v30 = a2 + v27;
  *(_WORD *)uint64_t v29 = *(_WORD *)v30;
  *(_BYTE *)(v29 + 2)  = *(_BYTE *)(v30 + 2);
  uint64_t v31 = a1 + v28;
  uint64_t v32 = a2 + v28;
  *(_BYTE *)uint64_t v31 = *(_BYTE *)v32;
  *(_DWORD *)(v31 + 2)  = *(_DWORD *)(v32 + 2);
  *(void *)(v31 + 6)  = *(void *)(v32 + 6);
  *(void *)(v31 + 14)  = *(void *)(v32 + 14);
  *(_WORD *)(v31 + 26)  = *(_WORD *)(v32 + 26);
  *(_DWORD *)(v31 + 22)  = *(_DWORD *)(v32 + 22);
  *(_WORD *)(v31 + 28)  = *(_WORD *)(v32 + 28);
  *(_DWORD *)(v31 + 30)  = *(_DWORD *)(v32 + 30);
  uint64_t v33 = *(void *)(v32 + 40);
  *(void *)(v31 + 40)  = v33;
  uint64_t v34 = a3[13];
  uint64_t v35 = a3[14];
  uint64_t v36 = a1 + v34;
  uint64_t v37 = a2 + v34;
  *(_BYTE *)uint64_t v36 = *(_BYTE *)v37;
  uint64_t v38 = *(void *)(v37 + 16);
  *(void *)(v36 + 8)  = *(void *)(v37 + 8);
  *(void *)(v36 + 16)  = v38;
  unint64_t v39 = (_WORD *)(a1 + v35);
  uint64_t v40 = (_WORD *)(a2 + v35);
  uint64_t v41 = (int *)type metadata accessor for AWDLActionFrame.DataPathState(0LL);
  uint64_t v42 = *((void *)v41 - 1);
  uint64_t v43 = *(unsigned int (**)(_WORD *, uint64_t, int *))(v42 + 48);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v38);
  if (v43(v40, 1LL, v41))
  {
    uint64_t v44 = sub_100002274((uint64_t *)&unk_1004104A0);
    memcpy(v39, v40, *(void *)(*(void *)(v44 - 8) + 64LL));
  }

  else
  {
    uint64_t v101 = v42;
    *unint64_t v39 = *v40;
    *((_BYTE *)v39 + 2)  = *((_BYTE *)v40 + 2);
    *((_DWORD *)v39 + 1)  = *((_DWORD *)v40 + 1);
    v39[4]  = v40[4];
    *(_DWORD *)(v39 + 5)  = *(_DWORD *)(v40 + 5);
    *(_DWORD *)((char *)v39 + 13)  = *(_DWORD *)((char *)v40 + 13);
    v39[12]  = v40[12];
    *((_DWORD *)v39 + 5)  = *((_DWORD *)v40 + 5);
    int v45 = *(_DWORD *)(v40 + 13);
    *(_DWORD *)((char *)v39 + 29)  = *(_DWORD *)((char *)v40 + 29);
    *(_DWORD *)(v39 + 13)  = v45;
    uint64_t v99 = *((void *)v40 + 6);
    *((void *)v39 + 5)  = *((void *)v40 + 5);
    *((void *)v39 + 6)  = v99;
    *((_DWORD *)v39 + 14)  = *((_DWORD *)v40 + 14);
    *(_DWORD *)((char *)v39 + 59)  = *(_DWORD *)((char *)v40 + 59);
    *((_BYTE *)v39 + 63)  = *((_BYTE *)v40 + 63);
    *((_DWORD *)v39 + 16)  = *((_DWORD *)v40 + 16);
    *((_BYTE *)v39 + 68)  = *((_BYTE *)v40 + 68);
    int v46 = *((_DWORD *)v40 + 18);
    *((_BYTE *)v39 + 76)  = *((_BYTE *)v40 + 76);
    *((_DWORD *)v39 + 18)  = v46;
    *(_OWORD *)((char *)v39 + 77)  = *(_OWORD *)((char *)v40 + 77);
    *(_WORD *)((char *)v39 + 93)  = *(_WORD *)((char *)v40 + 93);
    uint64_t v47 = v41[34];
    __dst  = (char *)v39 + v47;
    int v48 = (char *)v40 + v47;
    uint64_t v49 = type metadata accessor for DispatchTimeInterval(0LL);
    uint64_t v50 = *(void *)(v49 - 8);
    uint64_t v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
    swift_bridgeObjectRetain(v99);
    if (v51(v48, 1LL, v49))
    {
      uint64_t v52 = sub_100002274(&qword_100407450);
      memcpy(__dst, v48, *(void *)(*(void *)(v52 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 16))(__dst, v48, v49);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(__dst, 0LL, 1LL, v49);
    }

    uint64_t v53 = v41[35];
    uint64_t v54 = (char *)v39 + v53;
    uint64_t v55 = (char *)v40 + v53;
    *(_DWORD *)uint64_t v54 = *(_DWORD *)v55;
    v54[4]  = v55[4];
    uint64_t v56 = v41[36];
    id v57 = (char *)v39 + v56;
    uint64_t v58 = (char *)v40 + v56;
    v57[4]  = v58[4];
    *(_DWORD *)id v57 = *(_DWORD *)v58;
    (*(void (**)(_WORD *, void, uint64_t, int *))(v101 + 56))(v39, 0LL, 1LL, v41);
  }

  uint64_t v59 = a3[15];
  uint64_t v60 = a3[16];
  uint64_t v61 = (_OWORD *)(a1 + v59);
  uint64_t v62 = (_OWORD *)(a2 + v59);
  __int128 v63 = v62[1];
  *uint64_t v61 = *v62;
  v61[1]  = v63;
  *(_OWORD *)((char *)v61 + 25)  = *(_OWORD *)((char *)v62 + 25);
  uint64_t v64 = a1 + v60;
  uint64_t v65 = a2 + v60;
  *(_WORD *)uint64_t v64 = *(_WORD *)v65;
  *(_BYTE *)(v64 + 2)  = *(_BYTE *)(v65 + 2);
  uint64_t v66 = a3[17];
  uint64_t v67 = a3[18];
  uint64_t v68 = a1 + v66;
  uint64_t v69 = a2 + v66;
  __int128 v70 = *(_OWORD *)(v69 + 16);
  *(_OWORD *)uint64_t v68 = *(_OWORD *)v69;
  *(_OWORD *)(v68 + 16)  = v70;
  *(void *)(v68 + 32)  = *(void *)(v69 + 32);
  uint64_t v71 = a1 + v67;
  uint64_t v72 = a2 + v67;
  *(_DWORD *)uint64_t v71 = *(_DWORD *)v72;
  *(_WORD *)(v71 + 4)  = *(_WORD *)(v72 + 4);
  uint64_t v73 = *(void *)(v72 + 8);
  *(void *)(v71 + 8)  = v73;
  uint64_t v74 = a3[19];
  uint64_t v75 = a3[20];
  uint64_t v76 = (uint64_t *)(a1 + v74);
  uint64_t v77 = (uint64_t *)(a2 + v74);
  uint64_t v78 = *v77;
  uint64_t v79 = v77[1];
  *uint64_t v76 = *v77;
  v76[1]  = v79;
  uint64_t v80 = *(void *)(a2 + v75);
  *(void *)(a1 + v75)  = v80;
  uint64_t v81 = a3[21];
  uint64_t v82 = a3[22];
  uint64_t v83 = a1 + v81;
  uint64_t v84 = a2 + v81;
  *(_DWORD *)uint64_t v83 = *(_DWORD *)v84;
  *(_BYTE *)(v83 + 4)  = *(_BYTE *)(v84 + 4);
  uint64_t v85 = a1 + v82;
  uint64_t v86 = a2 + v82;
  *(_DWORD *)uint64_t v85 = *(_DWORD *)v86;
  *(_BYTE *)(v85 + 4)  = *(_BYTE *)(v86 + 4);
  uint64_t v87 = a3[23];
  uint64_t v88 = a3[24];
  v89  = a1 + v87;
  uint64_t v90 = a2 + v87;
  *(void *)v89  = *(void *)v90;
  *(_BYTE *)(v89 + 8)  = *(_BYTE *)(v90 + 8);
  uint64_t v91 = a1 + v88;
  uint64_t v92 = a2 + v88;
  *(void *)uint64_t v91 = *(void *)v92;
  *(_BYTE *)(v91 + 8)  = *(_BYTE *)(v92 + 8);
  uint64_t v93 = a3[25];
  uint64_t v94 = a3[26];
  uint64_t v95 = a1 + v93;
  uint64_t v96 = a2 + v93;
  *(_BYTE *)(v95 + 8)  = *(_BYTE *)(v96 + 8);
  *(void *)uint64_t v95 = *(void *)v96;
  *(_BYTE *)(a1 + v94)  = *(_BYTE *)(a2 + v94);
  uint64_t v97 = a3[28];
  *(_BYTE *)(a1 + a3[27])  = *(_BYTE *)(a2 + a3[27]);
  *(_BYTE *)(a1 + v97)  = *(_BYTE *)(a2 + v97);
  *(_BYTE *)(a1 + a3[29])  = *(_BYTE *)(a2 + a3[29]);
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v78);
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRetain(v80);
  return a1;
}

uint64_t assignWithCopy for AWDLPeer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (_BYTE *)(a1 + v7);
  uint64_t v9 = (_BYTE *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1]  = v9[1];
  _OWORD v8[2] = v9[2];
  _OWORD v8[3] = v9[3];
  v8[4]  = v9[4];
  void v8[5] = v9[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  *(void *)(a1 + a3[7])  = *(void *)(a2 + a3[7]);
  uint64_t v14 = a3[8];
  uint64_t v15 = (_OWORD *)(a1 + v14);
  uint64_t v16 = (_OWORD *)(a2 + v14);
  __int128 v17 = *(_OWORD *)((char *)v16 + 10);
  *uint64_t v15 = *v16;
  *(_OWORD *)((char *)v15 + 10)  = v17;
  uint64_t v18 = a3[9];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  char v21 = *(_BYTE *)(v20 + 48);
  __int128 v23 = *(_OWORD *)(v20 + 16);
  __int128 v22 = *(_OWORD *)(v20 + 32);
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16)  = v23;
  *(_OWORD *)(v19 + 32)  = v22;
  *(_BYTE *)(v19 + 48)  = v21;
  uint64_t v24 = a3[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  unint64_t v27 = *(void *)(a1 + v24 + 24) >> 60;
  unint64_t v28 = *(void *)(a2 + v24 + 24) >> 60;
  if (v27 <= 0xE)
  {
    if (v28 <= 0xE)
    {
      *(_BYTE *)uint64_t v25 = *(_BYTE *)v26;
      *(_WORD *)(v25 + 2)  = *(_WORD *)(v26 + 2);
      *(_WORD *)(v25 + 4)  = *(_WORD *)(v26 + 4);
      *(_DWORD *)(v25 + 8)  = *(_DWORD *)(v26 + 8);
      uint64_t v33 = *(void *)(v26 + 16);
      unint64_t v34 = *(void *)(v26 + 24);
      sub_100020AFC(v33, v34);
      uint64_t v35 = *(void *)(v25 + 16);
      unint64_t v36 = *(void *)(v25 + 24);
      *(void *)(v25 + 16)  = v33;
      *(void *)(v25 + 24)  = v34;
      sub_1000208D8(v35, v36);
    }

    else
    {
      sub_10011BBE0(v25);
      __int128 v30 = *(_OWORD *)(v26 + 16);
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
      *(_OWORD *)(v25 + 16)  = v30;
    }
  }

  else if (v28 <= 0xE)
  {
    *(_BYTE *)uint64_t v25 = *(_BYTE *)v26;
    *(_WORD *)(v25 + 2)  = *(_WORD *)(v26 + 2);
    *(_WORD *)(v25 + 4)  = *(_WORD *)(v26 + 4);
    *(_DWORD *)(v25 + 8)  = *(_DWORD *)(v26 + 8);
    uint64_t v31 = *(void *)(v26 + 16);
    unint64_t v32 = *(void *)(v26 + 24);
    sub_100020AFC(v31, v32);
    *(void *)(v25 + 16)  = v31;
    *(void *)(v25 + 24)  = v32;
  }

  else
  {
    __int128 v29 = *(_OWORD *)(v26 + 16);
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    *(_OWORD *)(v25 + 16)  = v29;
  }

  uint64_t v37 = a3[11];
  uint64_t v38 = a1 + v37;
  unint64_t v39 = (__int16 *)(a2 + v37);
  __int16 v40 = *v39;
  *(_BYTE *)(v38 + 2)  = *((_BYTE *)v39 + 2);
  *(_WORD *)uint64_t v38 = v40;
  uint64_t v41 = a3[12];
  uint64_t v42 = a1 + v41;
  uint64_t v43 = a2 + v41;
  *(_BYTE *)uint64_t v42 = *(_BYTE *)v43;
  *(_WORD *)(v42 + 2)  = *(_WORD *)(v43 + 2);
  *(_BYTE *)(v42 + 4)  = *(_BYTE *)(v43 + 4);
  *(_BYTE *)(v42 + 5)  = *(_BYTE *)(v43 + 5);
  *(_WORD *)(v42 + 6)  = *(_WORD *)(v43 + 6);
  *(_WORD *)(v42 + 8)  = *(_WORD *)(v43 + 8);
  *(_WORD *)(v42 + 10)  = *(_WORD *)(v43 + 10);
  *(_WORD *)(v42 + 12)  = *(_WORD *)(v43 + 12);
  *(_WORD *)(v42 + 14)  = *(_WORD *)(v43 + 14);
  *(_WORD *)(v42 + 16)  = *(_WORD *)(v43 + 16);
  *(_BYTE *)(v42 + 18)  = *(_BYTE *)(v43 + 18);
  *(_BYTE *)(v42 + 19)  = *(_BYTE *)(v43 + 19);
  *(_BYTE *)(v42 + 20)  = *(_BYTE *)(v43 + 20);
  *(_BYTE *)(v42 + 21)  = *(_BYTE *)(v43 + 21);
  *(_BYTE *)(v42 + 22)  = *(_BYTE *)(v43 + 22);
  *(_BYTE *)(v42 + 23)  = *(_BYTE *)(v43 + 23);
  *(_BYTE *)(v42 + 24)  = *(_BYTE *)(v43 + 24);
  *(_BYTE *)(v42 + 25)  = *(_BYTE *)(v43 + 25);
  *(_BYTE *)(v42 + 26)  = *(_BYTE *)(v43 + 26);
  *(_BYTE *)(v42 + 27)  = *(_BYTE *)(v43 + 27);
  *(_BYTE *)(v42 + 28)  = *(_BYTE *)(v43 + 28);
  *(_BYTE *)(v42 + 29)  = *(_BYTE *)(v43 + 29);
  *(_WORD *)(v42 + 30)  = *(_WORD *)(v43 + 30);
  *(_WORD *)(v42 + 32)  = *(_WORD *)(v43 + 32);
  uint64_t v44 = *(void *)(v43 + 40);
  uint64_t v45 = *(void *)(v42 + 40);
  *(void *)(v42 + 40)  = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  uint64_t v46 = a3[13];
  uint64_t v47 = a1 + v46;
  uint64_t v48 = a2 + v46;
  *(_BYTE *)uint64_t v47 = *(_BYTE *)v48;
  *(void *)(v47 + 8)  = *(void *)(v48 + 8);
  uint64_t v49 = *(void *)(v48 + 16);
  uint64_t v50 = *(void *)(v47 + 16);
  *(void *)(v47 + 16)  = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease(v50);
  uint64_t v51 = a3[14];
  uint64_t v52 = a1 + v51;
  uint64_t v53 = (__int16 *)(a2 + v51);
  uint64_t v54 = (int *)type metadata accessor for AWDLActionFrame.DataPathState(0LL);
  uint64_t v55 = *((void *)v54 - 1);
  uint64_t v56 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v55 + 48);
  int v57 = v56(v52, 1LL, v54);
  int v58 = v56((uint64_t)v53, 1LL, v54);
  if (!v57)
  {
    if (v58)
    {
      sub_10005802C(v52, type metadata accessor for AWDLActionFrame.DataPathState);
      goto LABEL_14;
    }

    __int16 v73 = *v53;
    *(_BYTE *)(v52 + 2)  = *((_BYTE *)v53 + 2);
    *(_WORD *)uint64_t v52 = v73;
    int v74 = *((_DWORD *)v53 + 1);
    *(_WORD *)(v52 + 8)  = v53[4];
    *(_DWORD *)(v52 + 4)  = v74;
    int v75 = *(_DWORD *)(v53 + 5);
    *(_DWORD *)(v52 + 13)  = *(_DWORD *)((char *)v53 + 13);
    *(_DWORD *)(v52 + 10)  = v75;
    int v76 = *((_DWORD *)v53 + 5);
    *(_WORD *)(v52 + 24)  = v53[12];
    *(_DWORD *)(v52 + 20)  = v76;
    int v77 = *(_DWORD *)(v53 + 13);
    *(_DWORD *)(v52 + 29)  = *(_DWORD *)((char *)v53 + 29);
    *(_DWORD *)(v52 + 26)  = v77;
    *(void *)(v52 + 40)  = *((void *)v53 + 5);
    uint64_t v78 = *((void *)v53 + 6);
    uint64_t v79 = *(void *)(v52 + 48);
    *(void *)(v52 + 48)  = v78;
    swift_bridgeObjectRetain(v78);
    swift_bridgeObjectRelease(v79);
    int v80 = *((_DWORD *)v53 + 14);
    *(_DWORD *)(v52 + 59)  = *(_DWORD *)((char *)v53 + 59);
    *(_DWORD *)(v52 + 56)  = v80;
    *(_BYTE *)(v52 + 63)  = *((_BYTE *)v53 + 63);
    *(_BYTE *)(v52 + 64)  = *((_BYTE *)v53 + 64);
    *(_BYTE *)(v52 + 65)  = *((_BYTE *)v53 + 65);
    LOWORD(v80)  = v53[33];
    *(_BYTE *)(v52 + 68)  = *((_BYTE *)v53 + 68);
    *(_WORD *)(v52 + 66)  = v80;
    int v81 = *((_DWORD *)v53 + 18);
    *(_BYTE *)(v52 + 76)  = *((_BYTE *)v53 + 76);
    *(_DWORD *)(v52 + 72)  = v81;
    *(_BYTE *)(v52 + 77)  = *((_BYTE *)v53 + 77);
    *(_BYTE *)(v52 + 78)  = *((_BYTE *)v53 + 78);
    *(_BYTE *)(v52 + 79)  = *((_BYTE *)v53 + 79);
    *(_BYTE *)(v52 + 80)  = *((_BYTE *)v53 + 80);
    *(_BYTE *)(v52 + 81)  = *((_BYTE *)v53 + 81);
    *(_BYTE *)(v52 + 82)  = *((_BYTE *)v53 + 82);
    *(_BYTE *)(v52 + 83)  = *((_BYTE *)v53 + 83);
    *(_BYTE *)(v52 + 84)  = *((_BYTE *)v53 + 84);
    *(_BYTE *)(v52 + 85)  = *((_BYTE *)v53 + 85);
    *(_BYTE *)(v52 + 86)  = *((_BYTE *)v53 + 86);
    *(_BYTE *)(v52 + 87)  = *((_BYTE *)v53 + 87);
    *(_BYTE *)(v52 + 88)  = *((_BYTE *)v53 + 88);
    *(_BYTE *)(v52 + 89)  = *((_BYTE *)v53 + 89);
    *(_BYTE *)(v52 + 90)  = *((_BYTE *)v53 + 90);
    *(_BYTE *)(v52 + 91)  = *((_BYTE *)v53 + 91);
    *(_BYTE *)(v52 + 92)  = *((_BYTE *)v53 + 92);
    *(_BYTE *)(v52 + 93)  = *((_BYTE *)v53 + 93);
    *(_BYTE *)(v52 + 94)  = *((_BYTE *)v53 + 94);
    uint64_t v82 = v54[34];
    uint64_t v83 = (void *)(v52 + v82);
    uint64_t v84 = (char *)v53 + v82;
    uint64_t v85 = type metadata accessor for DispatchTimeInterval(0LL);
    v157  = *(void *)(v85 - 8);
    uint64_t v86 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v157 + 48);
    v160  = v83;
    LODWORD(v83)  = v86(v83, 1LL, v85);
    int v87 = v86(v84, 1LL, v85);
    if ((_DWORD)v83)
    {
      if (!v87)
      {
        (*(void (**)(void *, char *, uint64_t))(v157 + 16))(v160, v84, v85);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v157 + 56))(v160, 0LL, 1LL, v85);
        goto LABEL_25;
      }

      size_t v88 = *(void *)(*(void *)(sub_100002274(&qword_100407450) - 8) + 64LL);
      v89  = v160;
    }

    else
    {
      if (!v87)
      {
        (*(void (**)(void *, char *, uint64_t))(v157 + 24))(v160, v84, v85);
        goto LABEL_25;
      }

      (*(void (**)(void *, uint64_t))(v157 + 8))(v160, v85);
      size_t v88 = *(void *)(*(void *)(sub_100002274(&qword_100407450) - 8) + 64LL);
      v89  = v160;
    }

    memcpy(v89, v84, v88);
LABEL_25:
    uint64_t v98 = v54[35];
    uint64_t v99 = v52 + v98;
    v100  = (int *)((char *)v53 + v98);
    int v101 = *v100;
    *(_BYTE *)(v99 + 4)  = *((_BYTE *)v100 + 4);
    *(_DWORD *)uint64_t v99 = v101;
    uint64_t v102 = v54[36];
    uint64_t v103 = v52 + v102;
    uint64_t v104 = (int *)((char *)v53 + v102);
    v105  = *v104;
    *(_BYTE *)(v103 + 4)  = *((_BYTE *)v104 + 4);
    *(_DWORD *)uint64_t v103 = v105;
    goto LABEL_26;
  }

  if (v58)
  {
LABEL_14:
    uint64_t v72 = sub_100002274((uint64_t *)&unk_1004104A0);
    memcpy((void *)v52, v53, *(void *)(*(void *)(v72 - 8) + 64LL));
    goto LABEL_26;
  }

  v156  = v55;
  __int16 v59 = *v53;
  *(_BYTE *)(v52 + 2)  = *((_BYTE *)v53 + 2);
  *(_WORD *)uint64_t v52 = v59;
  int v60 = *((_DWORD *)v53 + 1);
  *(_WORD *)(v52 + 8)  = v53[4];
  *(_DWORD *)(v52 + 4)  = v60;
  int v61 = *(_DWORD *)(v53 + 5);
  *(_DWORD *)(v52 + 13)  = *(_DWORD *)((char *)v53 + 13);
  *(_DWORD *)(v52 + 10)  = v61;
  int v62 = *((_DWORD *)v53 + 5);
  *(_WORD *)(v52 + 24)  = v53[12];
  *(_DWORD *)(v52 + 20)  = v62;
  int v63 = *(_DWORD *)(v53 + 13);
  *(_DWORD *)(v52 + 29)  = *(_DWORD *)((char *)v53 + 29);
  *(_DWORD *)(v52 + 26)  = v63;
  *(void *)(v52 + 40)  = *((void *)v53 + 5);
  v159  = *((void *)v53 + 6);
  *(void *)(v52 + 48)  = v159;
  int v64 = *((_DWORD *)v53 + 14);
  *(_DWORD *)(v52 + 59)  = *(_DWORD *)((char *)v53 + 59);
  *(_DWORD *)(v52 + 56)  = v64;
  *(_BYTE *)(v52 + 63)  = *((_BYTE *)v53 + 63);
  *(_BYTE *)(v52 + 64)  = *((_BYTE *)v53 + 64);
  *(_BYTE *)(v52 + 65)  = *((_BYTE *)v53 + 65);
  LOWORD(v64)  = v53[33];
  *(_BYTE *)(v52 + 68)  = *((_BYTE *)v53 + 68);
  *(_WORD *)(v52 + 66)  = v64;
  int v65 = *((_DWORD *)v53 + 18);
  *(_BYTE *)(v52 + 76)  = *((_BYTE *)v53 + 76);
  *(_DWORD *)(v52 + 72)  = v65;
  *(_BYTE *)(v52 + 77)  = *((_BYTE *)v53 + 77);
  *(_BYTE *)(v52 + 78)  = *((_BYTE *)v53 + 78);
  *(_BYTE *)(v52 + 79)  = *((_BYTE *)v53 + 79);
  *(_BYTE *)(v52 + 80)  = *((_BYTE *)v53 + 80);
  *(_BYTE *)(v52 + 81)  = *((_BYTE *)v53 + 81);
  *(_BYTE *)(v52 + 82)  = *((_BYTE *)v53 + 82);
  *(_BYTE *)(v52 + 83)  = *((_BYTE *)v53 + 83);
  *(_BYTE *)(v52 + 84)  = *((_BYTE *)v53 + 84);
  *(_BYTE *)(v52 + 85)  = *((_BYTE *)v53 + 85);
  *(_BYTE *)(v52 + 86)  = *((_BYTE *)v53 + 86);
  *(_BYTE *)(v52 + 87)  = *((_BYTE *)v53 + 87);
  *(_BYTE *)(v52 + 88)  = *((_BYTE *)v53 + 88);
  *(_BYTE *)(v52 + 89)  = *((_BYTE *)v53 + 89);
  *(_BYTE *)(v52 + 90)  = *((_BYTE *)v53 + 90);
  *(_BYTE *)(v52 + 91)  = *((_BYTE *)v53 + 91);
  *(_BYTE *)(v52 + 92)  = *((_BYTE *)v53 + 92);
  *(_BYTE *)(v52 + 93)  = *((_BYTE *)v53 + 93);
  *(_BYTE *)(v52 + 94)  = *((_BYTE *)v53 + 94);
  uint64_t v66 = v54[34];
  __src  = (void *)(v52 + v66);
  uint64_t v67 = (char *)v53 + v66;
  uint64_t v68 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v69 = *(void *)(v68 - 8);
  __int128 v70 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48);
  swift_bridgeObjectRetain(v159);
  if (v70(v67, 1LL, v68))
  {
    uint64_t v71 = sub_100002274(&qword_100407450);
    memcpy(__src, v67, *(void *)(*(void *)(v71 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(v69 + 16))(__src, v67, v68);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v69 + 56))(__src, 0LL, 1LL, v68);
  }

  uint64_t v90 = v54[35];
  uint64_t v91 = v52 + v90;
  uint64_t v92 = (int *)((char *)v53 + v90);
  int v93 = *v92;
  *(_BYTE *)(v91 + 4)  = *((_BYTE *)v92 + 4);
  *(_DWORD *)uint64_t v91 = v93;
  uint64_t v94 = v54[36];
  uint64_t v95 = v52 + v94;
  uint64_t v96 = (int *)((char *)v53 + v94);
  int v97 = *v96;
  *(_BYTE *)(v95 + 4)  = *((_BYTE *)v96 + 4);
  *(_DWORD *)uint64_t v95 = v97;
  (*(void (**)(uint64_t, void, uint64_t, int *))(v156 + 56))(v52, 0LL, 1LL, v54);
LABEL_26:
  v106  = a3[15];
  id v107 = (_OWORD *)(a1 + v106);
  v108  = (__int128 *)(a2 + v106);
  __int128 v109 = *v108;
  __int128 v110 = v108[1];
  *(_OWORD *)((char *)v107 + 25)  = *(__int128 *)((char *)v108 + 25);
  *id v107 = v109;
  v107[1]  = v110;
  v111  = a3[16];
  v112  = a1 + v111;
  char v113 = (__int16 *)(a2 + v111);
  __int16 v114 = *v113;
  *(_BYTE *)(v112 + 2)  = *((_BYTE *)v113 + 2);
  *(_WORD *)v112  = v114;
  v115  = a3[17];
  uint64_t v116 = a1 + v115;
  char v117 = (__int128 *)(a2 + v115);
  v118  = *v117;
  v119  = v117[1];
  *(void *)(v116 + 32)  = *((void *)v117 + 4);
  *(_OWORD *)uint64_t v116 = v118;
  *(_OWORD *)(v116 + 16)  = v119;
  v120  = a3[18];
  uint64_t v121 = a1 + v120;
  v122  = a2 + v120;
  *(_DWORD *)uint64_t v121 = *(_DWORD *)v122;
  *(_BYTE *)(v121 + 4)  = *(_BYTE *)(v122 + 4);
  *(_BYTE *)(v121 + 5)  = *(_BYTE *)(v122 + 5);
  v123  = *(void *)(v122 + 8);
  uint64_t v124 = *(void *)(v121 + 8);
  *(void *)(v121 + 8)  = v123;
  swift_bridgeObjectRetain(v123);
  swift_bridgeObjectRelease(v124);
  v125  = a3[19];
  uint64_t v126 = a1 + v125;
  uint64_t v127 = a2 + v125;
  uint64_t v128 = *(void *)(a2 + v125);
  uint64_t v129 = *(void *)(a1 + v125);
  *(void *)(a1 + v125)  = v128;
  swift_bridgeObjectRetain(v128);
  swift_bridgeObjectRelease(v129);
  uint64_t v130 = *(void *)(v126 + 8);
  uint64_t v131 = *(void *)(v127 + 8);
  *(void *)(v126 + 8)  = v131;
  swift_bridgeObjectRetain(v131);
  swift_bridgeObjectRelease(v130);
  v132  = a3[20];
  uint64_t v133 = *(void *)(a2 + v132);
  uint64_t v134 = *(void *)(a1 + v132);
  *(void *)(a1 + v132)  = v133;
  swift_bridgeObjectRetain(v133);
  swift_bridgeObjectRelease(v134);
  uint64_t v135 = a3[21];
  uint64_t v136 = a1 + v135;
  v137  = (int *)(a2 + v135);
  v138  = *v137;
  *(_BYTE *)(v136 + 4)  = *((_BYTE *)v137 + 4);
  *(_DWORD *)uint64_t v136 = v138;
  v139  = a3[22];
  v140  = a1 + v139;
  v141  = (int *)(a2 + v139);
  v142  = *v141;
  *(_BYTE *)(v140 + 4)  = *((_BYTE *)v141 + 4);
  *(_DWORD *)v140  = v142;
  v143  = a3[23];
  v144  = a1 + v143;
  v145  = (uint64_t *)(a2 + v143);
  v146  = *v145;
  *(_BYTE *)(v144 + 8)  = *((_BYTE *)v145 + 8);
  *(void *)v144  = v146;
  v147  = a3[24];
  v148  = a1 + v147;
  v149  = (uint64_t *)(a2 + v147);
  v150  = *v149;
  *(_BYTE *)(v148 + 8)  = *((_BYTE *)v149 + 8);
  *(void *)v148  = v150;
  v151  = a3[25];
  v152  = a1 + v151;
  v153  = (uint64_t *)(a2 + v151);
  v154  = *v153;
  *(_BYTE *)(v152 + 8)  = *((_BYTE *)v153 + 8);
  *(void *)v152  = v154;
  *(_BYTE *)(a1 + a3[26])  = *(_BYTE *)(a2 + a3[26]);
  *(_BYTE *)(a1 + a3[27])  = *(_BYTE *)(a2 + a3[27]);
  *(_BYTE *)(a1 + a3[28])  = *(_BYTE *)(a2 + a3[28]);
  *(_BYTE *)(a1 + a3[29])  = *(_BYTE *)(a2 + a3[29]);
  return a1;
}

uint64_t sub_10011BBE0(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for AWDLPeer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_WORD *)(v9 + 4)  = *(_WORD *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  uint64_t v13 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v11, v12, v13);
  uint64_t v14 = a3[8];
  *(void *)(a1 + a3[7])  = *(void *)(a2 + a3[7]);
  uint64_t v15 = (_OWORD *)(a1 + v14);
  uint64_t v16 = (_OWORD *)(a2 + v14);
  *uint64_t v15 = *v16;
  *(_OWORD *)((char *)v15 + 10)  = *(_OWORD *)((char *)v16 + 10);
  uint64_t v17 = a3[9];
  uint64_t v18 = a3[10];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  __int128 v21 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16)  = v21;
  *(_OWORD *)(v19 + 32)  = *(_OWORD *)(v20 + 32);
  *(_BYTE *)(v19 + 48)  = *(_BYTE *)(v20 + 48);
  __int128 v22 = (_OWORD *)(a1 + v18);
  __int128 v23 = (_OWORD *)(a2 + v18);
  __int128 v24 = v23[1];
  *__int128 v22 = *v23;
  v22[1]  = v24;
  uint64_t v25 = a3[11];
  uint64_t v26 = a3[12];
  uint64_t v27 = a1 + v25;
  uint64_t v28 = a2 + v25;
  *(_WORD *)uint64_t v27 = *(_WORD *)v28;
  *(_BYTE *)(v27 + 2)  = *(_BYTE *)(v28 + 2);
  __int128 v29 = (_OWORD *)(a1 + v26);
  __int128 v30 = (__int128 *)(a2 + v26);
  __int128 v31 = *v30;
  __int128 v32 = v30[2];
  v29[1]  = v30[1];
  v29[2]  = v32;
  *__int128 v29 = v31;
  uint64_t v33 = a3[13];
  uint64_t v34 = a3[14];
  uint64_t v35 = a1 + v33;
  uint64_t v36 = a2 + v33;
  *(void *)(v35 + 16)  = *(void *)(v36 + 16);
  uint64_t v37 = (_WORD *)(a1 + v34);
  uint64_t v38 = (_WORD *)(a2 + v34);
  *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
  unint64_t v39 = (int *)type metadata accessor for AWDLActionFrame.DataPathState(0LL);
  uint64_t v40 = *((void *)v39 - 1);
  if ((*(unsigned int (**)(_WORD *, uint64_t, int *))(v40 + 48))(v38, 1LL, v39))
  {
    uint64_t v41 = sub_100002274((uint64_t *)&unk_1004104A0);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64LL));
  }

  else
  {
    *uint64_t v37 = *v38;
    *((_BYTE *)v37 + 2)  = *((_BYTE *)v38 + 2);
    *((_DWORD *)v37 + 1)  = *((_DWORD *)v38 + 1);
    v37[4]  = v38[4];
    *(_DWORD *)(v37 + 5)  = *(_DWORD *)(v38 + 5);
    *(_DWORD *)((char *)v37 + 13)  = *(_DWORD *)((char *)v38 + 13);
    v37[12]  = v38[12];
    *((_DWORD *)v37 + 5)  = *((_DWORD *)v38 + 5);
    int v42 = *(_DWORD *)(v38 + 13);
    *(_DWORD *)((char *)v37 + 29)  = *(_DWORD *)((char *)v38 + 29);
    *(_DWORD *)(v37 + 13)  = v42;
    *(_OWORD *)(v37 + 20)  = *(_OWORD *)(v38 + 20);
    *((_DWORD *)v37 + 14)  = *((_DWORD *)v38 + 14);
    *(_DWORD *)((char *)v37 + 59)  = *(_DWORD *)((char *)v38 + 59);
    *((_BYTE *)v37 + 63)  = *((_BYTE *)v38 + 63);
    *((_DWORD *)v37 + 16)  = *((_DWORD *)v38 + 16);
    *((_BYTE *)v37 + 68)  = *((_BYTE *)v38 + 68);
    *((_DWORD *)v37 + 18)  = *((_DWORD *)v38 + 18);
    *((_BYTE *)v37 + 76)  = *((_BYTE *)v38 + 76);
    *(_OWORD *)((char *)v37 + 77)  = *(_OWORD *)((char *)v38 + 77);
    *(_WORD *)((char *)v37 + 93)  = *(_WORD *)((char *)v38 + 93);
    uint64_t v43 = v39[34];
    __dst  = (char *)v37 + v43;
    uint64_t v44 = (char *)v38 + v43;
    uint64_t v45 = type metadata accessor for DispatchTimeInterval(0LL);
    uint64_t v46 = *(void *)(v45 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1LL, v45))
    {
      uint64_t v47 = sub_100002274(&qword_100407450);
      memcpy(__dst, v44, *(void *)(*(void *)(v47 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(__dst, v44, v45);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(__dst, 0LL, 1LL, v45);
    }

    uint64_t v48 = v39[35];
    uint64_t v49 = (char *)v37 + v48;
    uint64_t v50 = (char *)v38 + v48;
    *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
    v49[4]  = v50[4];
    uint64_t v51 = v39[36];
    uint64_t v52 = (char *)v37 + v51;
    uint64_t v53 = (char *)v38 + v51;
    v52[4]  = v53[4];
    *(_DWORD *)uint64_t v52 = *(_DWORD *)v53;
    (*(void (**)(_WORD *, void, uint64_t, int *))(v40 + 56))(v37, 0LL, 1LL, v39);
  }

  uint64_t v54 = a3[15];
  uint64_t v55 = a3[16];
  uint64_t v56 = (_OWORD *)(a1 + v54);
  int v57 = (_OWORD *)(a2 + v54);
  __int128 v58 = v57[1];
  *uint64_t v56 = *v57;
  v56[1]  = v58;
  *(_OWORD *)((char *)v56 + 25)  = *(_OWORD *)((char *)v57 + 25);
  uint64_t v59 = a1 + v55;
  uint64_t v60 = a2 + v55;
  *(_WORD *)uint64_t v59 = *(_WORD *)v60;
  *(_BYTE *)(v59 + 2)  = *(_BYTE *)(v60 + 2);
  uint64_t v61 = a3[17];
  uint64_t v62 = a3[18];
  uint64_t v63 = a1 + v61;
  uint64_t v64 = a2 + v61;
  __int128 v65 = *(_OWORD *)(v64 + 16);
  *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
  *(_OWORD *)(v63 + 16)  = v65;
  *(void *)(v63 + 32)  = *(void *)(v64 + 32);
  *(_OWORD *)(a1 + v62)  = *(_OWORD *)(a2 + v62);
  uint64_t v66 = a3[20];
  *(_OWORD *)(a1 + a3[19])  = *(_OWORD *)(a2 + a3[19]);
  *(void *)(a1 + v66)  = *(void *)(a2 + v66);
  uint64_t v67 = a3[21];
  uint64_t v68 = a3[22];
  uint64_t v69 = a1 + v67;
  uint64_t v70 = a2 + v67;
  *(_DWORD *)uint64_t v69 = *(_DWORD *)v70;
  *(_BYTE *)(v69 + 4)  = *(_BYTE *)(v70 + 4);
  uint64_t v71 = a1 + v68;
  uint64_t v72 = a2 + v68;
  *(_DWORD *)uint64_t v71 = *(_DWORD *)v72;
  *(_BYTE *)(v71 + 4)  = *(_BYTE *)(v72 + 4);
  uint64_t v73 = a3[23];
  uint64_t v74 = a3[24];
  uint64_t v75 = a1 + v73;
  uint64_t v76 = a2 + v73;
  *(void *)uint64_t v75 = *(void *)v76;
  *(_BYTE *)(v75 + 8)  = *(_BYTE *)(v76 + 8);
  uint64_t v77 = a1 + v74;
  uint64_t v78 = a2 + v74;
  *(_BYTE *)(v77 + 8)  = *(_BYTE *)(v78 + 8);
  *(void *)uint64_t v77 = *(void *)v78;
  uint64_t v79 = a3[25];
  uint64_t v80 = a3[26];
  uint64_t v81 = a1 + v79;
  uint64_t v82 = a2 + v79;
  *(_BYTE *)(v81 + 8)  = *(_BYTE *)(v82 + 8);
  *(void *)uint64_t v81 = *(void *)v82;
  *(_BYTE *)(a1 + v80)  = *(_BYTE *)(a2 + v80);
  uint64_t v83 = a3[28];
  *(_BYTE *)(a1 + a3[27])  = *(_BYTE *)(a2 + a3[27]);
  *(_BYTE *)(a1 + v83)  = *(_BYTE *)(a2 + v83);
  *(_BYTE *)(a1 + a3[29])  = *(_BYTE *)(a2 + a3[29]);
  return a1;
}

uint64_t assignWithTake for AWDLPeer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_WORD *)(v9 + 4)  = *(_WORD *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  uint64_t v13 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40LL))(v11, v12, v13);
  uint64_t v14 = a3[8];
  *(void *)(a1 + a3[7])  = *(void *)(a2 + a3[7]);
  uint64_t v15 = (_OWORD *)(a1 + v14);
  uint64_t v16 = (_OWORD *)(a2 + v14);
  *uint64_t v15 = *v16;
  *(_OWORD *)((char *)v15 + 10)  = *(_OWORD *)((char *)v16 + 10);
  uint64_t v17 = a3[9];
  uint64_t v18 = a3[10];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  __int128 v21 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16)  = v21;
  *(_OWORD *)(v19 + 32)  = *(_OWORD *)(v20 + 32);
  *(_BYTE *)(v19 + 48)  = *(_BYTE *)(v20 + 48);
  uint64_t v22 = a1 + v18;
  uint64_t v23 = a2 + v18;
  unint64_t v24 = *(void *)(a1 + v18 + 24);
  if (v24 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v25 = *(void *)(v23 + 24);
  if (v25 >> 60 == 15)
  {
    sub_10011BBE0(v22);
LABEL_4:
    __int128 v26 = *(_OWORD *)(v23 + 16);
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    *(_OWORD *)(v22 + 16)  = v26;
    goto LABEL_6;
  }

  *(_BYTE *)uint64_t v22 = *(_BYTE *)v23;
  *(_DWORD *)(v22 + 2)  = *(_DWORD *)(v23 + 2);
  *(_DWORD *)(v22 + 8)  = *(_DWORD *)(v23 + 8);
  uint64_t v27 = *(void *)(v22 + 16);
  *(void *)(v22 + 16)  = *(void *)(v23 + 16);
  *(void *)(v22 + 24)  = v25;
  sub_1000208D8(v27, v24);
LABEL_6:
  uint64_t v28 = a3[11];
  uint64_t v29 = a3[12];
  uint64_t v30 = a1 + v28;
  uint64_t v31 = a2 + v28;
  *(_WORD *)uint64_t v30 = *(_WORD *)v31;
  *(_BYTE *)(v30 + 2)  = *(_BYTE *)(v31 + 2);
  uint64_t v32 = a1 + v29;
  uint64_t v33 = a2 + v29;
  *(_BYTE *)uint64_t v32 = *(_BYTE *)v33;
  *(_DWORD *)(v32 + 2)  = *(_DWORD *)(v33 + 2);
  *(void *)(v32 + 6)  = *(void *)(v33 + 6);
  *(_DWORD *)(v32 + 14)  = *(_DWORD *)(v33 + 14);
  *(void *)(v32 + 18)  = *(void *)(v33 + 18);
  *(_DWORD *)(v32 + 26)  = *(_DWORD *)(v33 + 26);
  *(_WORD *)(v32 + 30)  = *(_WORD *)(v33 + 30);
  *(_WORD *)(v32 + 32)  = *(_WORD *)(v33 + 32);
  uint64_t v34 = *(void *)(v32 + 40);
  *(void *)(v32 + 40)  = *(void *)(v33 + 40);
  swift_bridgeObjectRelease(v34);
  uint64_t v35 = a3[13];
  uint64_t v36 = a1 + v35;
  uint64_t v37 = a2 + v35;
  *(_BYTE *)uint64_t v36 = *(_BYTE *)v37;
  uint64_t v39 = *(void *)(v37 + 8);
  uint64_t v38 = *(void *)(v37 + 16);
  uint64_t v40 = *(void *)(v36 + 16);
  *(void *)(v36 + 8)  = v39;
  *(void *)(v36 + 16)  = v38;
  swift_bridgeObjectRelease(v40);
  uint64_t v41 = a3[14];
  uint64_t v42 = a1 + v41;
  uint64_t v43 = a2 + v41;
  uint64_t v44 = (int *)type metadata accessor for AWDLActionFrame.DataPathState(0LL);
  uint64_t v45 = *((void *)v44 - 1);
  uint64_t v46 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v45 + 48);
  int v47 = v46(v42, 1LL, v44);
  int v48 = v46(v43, 1LL, v44);
  if (!v47)
  {
    if (v48)
    {
      sub_10005802C(v42, type metadata accessor for AWDLActionFrame.DataPathState);
      goto LABEL_12;
    }

    *(_WORD *)uint64_t v42 = *(_WORD *)v43;
    *(_BYTE *)(v42 + 2)  = *(_BYTE *)(v43 + 2);
    *(_DWORD *)(v42 + 4)  = *(_DWORD *)(v43 + 4);
    *(_WORD *)(v42 + 8)  = *(_WORD *)(v43 + 8);
    *(_DWORD *)(v42 + 10)  = *(_DWORD *)(v43 + 10);
    *(_DWORD *)(v42 + 13)  = *(_DWORD *)(v43 + 13);
    *(_WORD *)(v42 + 24)  = *(_WORD *)(v43 + 24);
    *(_DWORD *)(v42 + 20)  = *(_DWORD *)(v43 + 20);
    int v56 = *(_DWORD *)(v43 + 26);
    *(_DWORD *)(v42 + 29)  = *(_DWORD *)(v43 + 29);
    *(_DWORD *)(v42 + 26)  = v56;
    uint64_t v57 = *(void *)(v43 + 48);
    uint64_t v58 = *(void *)(v42 + 48);
    *(void *)(v42 + 40)  = *(void *)(v43 + 40);
    *(void *)(v42 + 48)  = v57;
    swift_bridgeObjectRelease(v58);
    *(_DWORD *)(v42 + 56)  = *(_DWORD *)(v43 + 56);
    *(_DWORD *)(v42 + 59)  = *(_DWORD *)(v43 + 59);
    *(_BYTE *)(v42 + 63)  = *(_BYTE *)(v43 + 63);
    *(_BYTE *)(v42 + 64)  = *(_BYTE *)(v43 + 64);
    *(_BYTE *)(v42 + 65)  = *(_BYTE *)(v43 + 65);
    *(_WORD *)(v42 + 66)  = *(_WORD *)(v43 + 66);
    *(_BYTE *)(v42 + 68)  = *(_BYTE *)(v43 + 68);
    *(_BYTE *)(v42 + 76)  = *(_BYTE *)(v43 + 76);
    *(_DWORD *)(v42 + 72)  = *(_DWORD *)(v43 + 72);
    *(_BYTE *)(v42 + 77)  = *(_BYTE *)(v43 + 77);
    *(_BYTE *)(v42 + 78)  = *(_BYTE *)(v43 + 78);
    *(_BYTE *)(v42 + 79)  = *(_BYTE *)(v43 + 79);
    *(_BYTE *)(v42 + 80)  = *(_BYTE *)(v43 + 80);
    *(_BYTE *)(v42 + 81)  = *(_BYTE *)(v43 + 81);
    *(_BYTE *)(v42 + 82)  = *(_BYTE *)(v43 + 82);
    *(_BYTE *)(v42 + 83)  = *(_BYTE *)(v43 + 83);
    *(_BYTE *)(v42 + 84)  = *(_BYTE *)(v43 + 84);
    *(_BYTE *)(v42 + 85)  = *(_BYTE *)(v43 + 85);
    *(_BYTE *)(v42 + 86)  = *(_BYTE *)(v43 + 86);
    *(_BYTE *)(v42 + 87)  = *(_BYTE *)(v43 + 87);
    *(_BYTE *)(v42 + 88)  = *(_BYTE *)(v43 + 88);
    *(_BYTE *)(v42 + 89)  = *(_BYTE *)(v43 + 89);
    *(_BYTE *)(v42 + 90)  = *(_BYTE *)(v43 + 90);
    *(_BYTE *)(v42 + 91)  = *(_BYTE *)(v43 + 91);
    *(_BYTE *)(v42 + 92)  = *(_BYTE *)(v43 + 92);
    *(_BYTE *)(v42 + 93)  = *(_BYTE *)(v43 + 93);
    *(_BYTE *)(v42 + 94)  = *(_BYTE *)(v43 + 94);
    uint64_t v59 = v44[34];
    uint64_t v60 = (void *)(v42 + v59);
    uint64_t v61 = (void *)(v43 + v59);
    uint64_t v62 = type metadata accessor for DispatchTimeInterval(0LL);
    v119  = *(void *)(v62 - 8);
    uint64_t v63 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v119 + 48);
    __dsta  = v60;
    LODWORD(v60)  = v63(v60, 1LL, v62);
    int v64 = v63(v61, 1LL, v62);
    if ((_DWORD)v60)
    {
      if (!v64)
      {
        (*(void (**)(void *, void *, uint64_t))(v119 + 32))(__dsta, v61, v62);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v119 + 56))(__dsta, 0LL, 1LL, v62);
        goto LABEL_23;
      }

      size_t v65 = *(void *)(*(void *)(sub_100002274(&qword_100407450) - 8) + 64LL);
      uint64_t v66 = __dsta;
    }

    else
    {
      if (!v64)
      {
        (*(void (**)(void *, void *, uint64_t))(v119 + 40))(__dsta, v61, v62);
        goto LABEL_23;
      }

      (*(void (**)(void *, uint64_t))(v119 + 8))(__dsta, v62);
      size_t v65 = *(void *)(*(void *)(sub_100002274(&qword_100407450) - 8) + 64LL);
      uint64_t v66 = __dsta;
    }

    memcpy(v66, v61, v65);
LABEL_23:
    uint64_t v73 = v44[35];
    uint64_t v74 = v42 + v73;
    uint64_t v75 = v43 + v73;
    *(_DWORD *)uint64_t v74 = *(_DWORD *)v75;
    *(_BYTE *)(v74 + 4)  = *(_BYTE *)(v75 + 4);
    uint64_t v76 = v44[36];
    uint64_t v77 = v42 + v76;
    uint64_t v78 = v43 + v76;
    *(_BYTE *)(v77 + 4)  = *(_BYTE *)(v78 + 4);
    *(_DWORD *)uint64_t v77 = *(_DWORD *)v78;
    goto LABEL_24;
  }

  if (v48)
  {
LABEL_12:
    uint64_t v55 = sub_100002274((uint64_t *)&unk_1004104A0);
    memcpy((void *)v42, (const void *)v43, *(void *)(*(void *)(v55 - 8) + 64LL));
    goto LABEL_24;
  }

  *(_WORD *)uint64_t v42 = *(_WORD *)v43;
  *(_BYTE *)(v42 + 2)  = *(_BYTE *)(v43 + 2);
  *(_DWORD *)(v42 + 4)  = *(_DWORD *)(v43 + 4);
  *(_WORD *)(v42 + 8)  = *(_WORD *)(v43 + 8);
  *(_DWORD *)(v42 + 10)  = *(_DWORD *)(v43 + 10);
  *(_DWORD *)(v42 + 13)  = *(_DWORD *)(v43 + 13);
  *(_WORD *)(v42 + 24)  = *(_WORD *)(v43 + 24);
  *(_DWORD *)(v42 + 20)  = *(_DWORD *)(v43 + 20);
  int v49 = *(_DWORD *)(v43 + 26);
  *(_DWORD *)(v42 + 29)  = *(_DWORD *)(v43 + 29);
  *(_DWORD *)(v42 + 26)  = v49;
  *(_OWORD *)(v42 + 40)  = *(_OWORD *)(v43 + 40);
  *(_DWORD *)(v42 + 56)  = *(_DWORD *)(v43 + 56);
  *(_DWORD *)(v42 + 59)  = *(_DWORD *)(v43 + 59);
  *(_BYTE *)(v42 + 63)  = *(_BYTE *)(v43 + 63);
  *(_DWORD *)(v42 + 64)  = *(_DWORD *)(v43 + 64);
  *(_BYTE *)(v42 + 68)  = *(_BYTE *)(v43 + 68);
  *(_DWORD *)(v42 + 72)  = *(_DWORD *)(v43 + 72);
  *(_BYTE *)(v42 + 76)  = *(_BYTE *)(v43 + 76);
  *(_OWORD *)(v42 + 77)  = *(_OWORD *)(v43 + 77);
  *(_WORD *)(v42 + 93)  = *(_WORD *)(v43 + 93);
  uint64_t v50 = v44[34];
  __dst  = (void *)(v42 + v50);
  uint64_t v51 = (const void *)(v43 + v50);
  uint64_t v52 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v53 = *(void *)(v52 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v53 + 48))(v51, 1LL, v52))
  {
    uint64_t v54 = sub_100002274(&qword_100407450);
    memcpy(__dst, v51, *(void *)(*(void *)(v54 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v53 + 32))(__dst, v51, v52);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v53 + 56))(__dst, 0LL, 1LL, v52);
  }

  uint64_t v67 = v44[35];
  uint64_t v68 = v42 + v67;
  uint64_t v69 = v43 + v67;
  *(_DWORD *)uint64_t v68 = *(_DWORD *)v69;
  *(_BYTE *)(v68 + 4)  = *(_BYTE *)(v69 + 4);
  uint64_t v70 = v44[36];
  uint64_t v71 = v42 + v70;
  uint64_t v72 = v43 + v70;
  *(_BYTE *)(v71 + 4)  = *(_BYTE *)(v72 + 4);
  *(_DWORD *)uint64_t v71 = *(_DWORD *)v72;
  (*(void (**)(uint64_t, void, uint64_t, int *))(v45 + 56))(v42, 0LL, 1LL, v44);
LABEL_24:
  uint64_t v79 = a3[15];
  uint64_t v80 = a3[16];
  uint64_t v81 = (_OWORD *)(a1 + v79);
  uint64_t v82 = (_OWORD *)(a2 + v79);
  __int128 v83 = v82[1];
  *uint64_t v81 = *v82;
  v81[1]  = v83;
  *(_OWORD *)((char *)v81 + 25)  = *(_OWORD *)((char *)v82 + 25);
  uint64_t v84 = a1 + v80;
  uint64_t v85 = a2 + v80;
  *(_WORD *)uint64_t v84 = *(_WORD *)v85;
  *(_BYTE *)(v84 + 2)  = *(_BYTE *)(v85 + 2);
  uint64_t v86 = a3[17];
  uint64_t v87 = a3[18];
  uint64_t v88 = a1 + v86;
  v89  = a2 + v86;
  __int128 v90 = *(_OWORD *)(v89 + 16);
  *(_OWORD *)uint64_t v88 = *(_OWORD *)v89;
  *(_OWORD *)(v88 + 16)  = v90;
  *(void *)(v88 + 32)  = *(void *)(v89 + 32);
  uint64_t v91 = a1 + v87;
  uint64_t v92 = a2 + v87;
  *(_DWORD *)uint64_t v91 = *(_DWORD *)v92;
  *(_BYTE *)(v91 + 4)  = *(_BYTE *)(v92 + 4);
  *(_BYTE *)(v91 + 5)  = *(_BYTE *)(v92 + 5);
  uint64_t v93 = *(void *)(v91 + 8);
  *(void *)(v91 + 8)  = *(void *)(v92 + 8);
  swift_bridgeObjectRelease(v93);
  uint64_t v94 = a3[19];
  uint64_t v95 = a1 + v94;
  uint64_t v96 = a2 + v94;
  uint64_t v97 = *(void *)(a1 + v94);
  *(void *)(a1 + v94)  = *(void *)(a2 + v94);
  swift_bridgeObjectRelease(v97);
  uint64_t v98 = *(void *)(v95 + 8);
  *(void *)(v95 + 8)  = *(void *)(v96 + 8);
  swift_bridgeObjectRelease(v98);
  uint64_t v99 = a3[20];
  v100  = *(void *)(a1 + v99);
  *(void *)(a1 + v99)  = *(void *)(a2 + v99);
  swift_bridgeObjectRelease(v100);
  uint64_t v101 = a3[21];
  uint64_t v102 = a3[22];
  uint64_t v103 = a1 + v101;
  uint64_t v104 = a2 + v101;
  *(_DWORD *)uint64_t v103 = *(_DWORD *)v104;
  *(_BYTE *)(v103 + 4)  = *(_BYTE *)(v104 + 4);
  v105  = a1 + v102;
  v106  = a2 + v102;
  *(_DWORD *)v105  = *(_DWORD *)v106;
  *(_BYTE *)(v105 + 4)  = *(_BYTE *)(v106 + 4);
  uint64_t v107 = a3[23];
  v108  = a3[24];
  uint64_t v109 = a1 + v107;
  uint64_t v110 = a2 + v107;
  *(void *)uint64_t v109 = *(void *)v110;
  *(_BYTE *)(v109 + 8)  = *(_BYTE *)(v110 + 8);
  v111  = a1 + v108;
  v112  = a2 + v108;
  *(_BYTE *)(v111 + 8)  = *(_BYTE *)(v112 + 8);
  *(void *)v111  = *(void *)v112;
  uint64_t v113 = a3[25];
  uint64_t v114 = a3[26];
  v115  = a1 + v113;
  uint64_t v116 = a2 + v113;
  *(void *)v115  = *(void *)v116;
  *(_BYTE *)(v115 + 8)  = *(_BYTE *)(v116 + 8);
  *(_BYTE *)(a1 + v114)  = *(_BYTE *)(a2 + v114);
  uint64_t v117 = a3[28];
  *(_BYTE *)(a1 + a3[27])  = *(_BYTE *)(a2 + a3[27]);
  *(_BYTE *)(a1 + v117)  = *(_BYTE *)(a2 + v117);
  *(_BYTE *)(a1 + a3[29])  = *(_BYTE *)(a2 + a3[29]);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLPeer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10011C830);
}

uint64_t sub_10011C830(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  uint64_t v11 = type metadata accessor for DispatchTime(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v13 = a3[6];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }

  uint64_t v14 = sub_100002274((uint64_t *)&unk_1004104A0);
  uint64_t v12 = *(void *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v14;
    uint64_t v13 = a3[14];
    goto LABEL_7;
  }

  unint64_t v16 = *(void *)(a1 + a3[19]);
  if (v16 >= 0xFFFFFFFF) {
    LODWORD(v16)  = -1;
  }
  return (v16 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLPeer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10011C90C);
}

uint64_t sub_10011C90C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
    return v11(v12, a2, a2, v10);
  }

  uint64_t v13 = type metadata accessor for DispatchTime(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v15 = a4[6];
LABEL_7:
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }

  uint64_t result = sub_100002274((uint64_t *)&unk_1004104A0);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v15 = a4[14];
    goto LABEL_7;
  }

  *(void *)(a1 + a4[19])  = (a2 - 1);
  return result;
}

void sub_10011C9D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v8[0]  = *(void *)(v2 - 8) + 64LL;
    v8[1]  = &unk_100348DE0;
    uint64_t v4 = type metadata accessor for DispatchTime(319LL);
    if (v5 <= 0x3F)
    {
      _OWORD v8[2] = *(void *)(v4 - 8) + 64LL;
      _OWORD v8[3] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[4]  = &unk_100348DF8;
      void v8[5] = &unk_100348E10;
      v8[6]  = &unk_100348E28;
      v8[7]  = &unk_100348E40;
      v8[8]  = &unk_100348E58;
      void v8[9] = &unk_100348E70;
      sub_10011CB38(319LL);
      if (v7 <= 0x3F)
      {
        v8[10]  = *(void *)(v6 - 8) + 64LL;
        v8[11]  = &unk_100348E88;
        void v8[12] = &unk_100348EA0;
        v8[13]  = &unk_100348EB8;
        v8[14]  = &unk_100348ED0;
        v8[15]  = &unk_100348EE8;
        Swift::UInt8 v8[16] = (char *)&value witness table for Builtin.BridgeObject + 64;
        v8[17]  = &unk_100348F00;
        v8[18]  = &unk_100348F00;
        v8[19]  = &unk_100348F18;
        v8[20]  = &unk_100348F18;
        v8[21]  = &unk_100348F18;
        v8[22]  = &unk_100348F30;
        v8[23]  = &unk_100348F48;
        v8[24]  = &unk_100348F48;
        v8[25]  = &unk_100348F48;
        swift_initStructMetadata(a1, 256LL, 26LL, v8, a1 + 16);
      }
    }
  }

void sub_10011CB38(uint64_t a1)
{
  if (!qword_100408580)
  {
    uint64_t v2 = type metadata accessor for AWDLActionFrame.DataPathState(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_100408580);
    }
  }

uint64_t storeEnumTagSinglePayload for AWDLPeer.Reachability(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10011CBD8 + 4 * byte_100348C85[v4]))();
  }
  *a1  = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10011CC0C + 4 * byte_100348C80[v4]))();
}

uint64_t sub_10011CC0C(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10011CC14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x10011CC1CLL);
  }
  return result;
}

uint64_t sub_10011CC28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x10011CC30LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10011CC34(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10011CC3C(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for AWDLPeer.Reachability()
{
  return &type metadata for AWDLPeer.Reachability;
}

_BYTE *initializeBufferWithCopyOfBuffer for AWDLPeer.AdvertisedService(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (_BYTE *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *a1  = *(_BYTE *)a2;
    uint64_t v7 = a2[2];
    *((void *)v4 + 1)  = a2[1];
    *((void *)v4 + 2)  = v7;
    uint64_t v8 = a2[4];
    *((void *)v4 + 3)  = a2[3];
    *((void *)v4 + 4)  = v8;
    v4[40]  = *((_BYTE *)a2 + 40);
    v4[41]  = *((_BYTE *)a2 + 41);
    uint64_t v9 = a2[7];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (v9)
    {
      *((void *)v4 + 6)  = a2[6];
      *((void *)v4 + 7)  = v9;
      uint64_t v10 = a2[9];
      *((void *)v4 + 8)  = a2[8];
      *((void *)v4 + 9)  = v10;
      v4[80]  = *((_BYTE *)a2 + 80);
      v4[81]  = *((_BYTE *)a2 + 81);
      uint64_t v11 = a2[11];
      unint64_t v12 = a2[12];
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v10);
      sub_100020AFC(v11, v12);
      *((void *)v4 + 11)  = v11;
      *((void *)v4 + 12)  = v12;
    }

    else
    {
      __int128 v14 = *((_OWORD *)a2 + 4);
      *((_OWORD *)v4 + 3)  = *((_OWORD *)a2 + 3);
      *((_OWORD *)v4 + 4)  = v14;
      *((_OWORD *)v4 + 5)  = *((_OWORD *)a2 + 5);
      *((void *)v4 + 12)  = a2[12];
    }

    uint64_t v15 = *(int *)(a3 + 28);
    unint64_t v16 = &v4[v15];
    uint64_t v17 = (uint64_t)a2 + v15;
    uint64_t v18 = *(uint64_t *)((char *)a2 + v15);
    uint64_t v19 = *(void *)(v17 + 8);
    *(void *)unint64_t v16 = v18;
    *((void *)v16 + 1)  = v19;
    uint64_t v20 = *(void *)(v17 + 24);
    *((void *)v16 + 2)  = *(void *)(v17 + 16);
    *((void *)v16 + 3)  = v20;
    v16[32]  = *(_BYTE *)(v17 + 32);
    v16[33]  = *(_BYTE *)(v17 + 33);
    __int128 v21 = (int *)type metadata accessor for DNSRecords.SRV(0LL);
    uint64_t v22 = v21[5];
    uint64_t v23 = &v16[v22];
    uint64_t v24 = v17 + v22;
    uint64_t v25 = type metadata accessor for NWEndpoint.Port(0LL);
    __int128 v26 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16LL);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    v26(v23, v24, v25);
    uint64_t v27 = v21[6];
    uint64_t v28 = &v16[v27];
    uint64_t v29 = (void *)(v17 + v27);
    uint64_t v30 = v29[1];
    void *v28 = *v29;
    v28[1]  = v30;
    *(_WORD *)&v16[v21[7]]  = *(_WORD *)(v17 + v21[7]);
    *(_WORD *)&v16[v21[8]]  = *(_WORD *)(v17 + v21[8]);
    swift_bridgeObjectRetain(v30);
  }

  return v4;
}

uint64_t destroy for AWDLPeer.AdvertisedService(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[7];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[9]);
    sub_1000208D8(a1[11], a1[12]);
  }

  int v5 = (char *)a1 + *(int *)(a2 + 28);
  swift_bridgeObjectRelease(*((void *)v5 + 1));
  swift_bridgeObjectRelease(*((void *)v5 + 3));
  uint64_t v6 = type metadata accessor for DNSRecords.SRV(0LL);
  uint64_t v7 = &v5[*(int *)(v6 + 20)];
  uint64_t v8 = type metadata accessor for NWEndpoint.Port(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  return swift_bridgeObjectRelease(*(void *)&v5[*(int *)(v6 + 24) + 8]);
}

uint64_t initializeWithCopy for AWDLPeer.AdvertisedService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(void *)(a1 + 32)  = v7;
  *(_BYTE *)(a1 + 40)  = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41)  = *(_BYTE *)(a2 + 41);
  uint64_t v8 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v8)
  {
    *(void *)(a1 + 48)  = *(void *)(a2 + 48);
    *(void *)(a1 + 56)  = v8;
    uint64_t v9 = *(void *)(a2 + 72);
    *(void *)(a1 + 64)  = *(void *)(a2 + 64);
    *(void *)(a1 + 72)  = v9;
    *(_BYTE *)(a1 + 80)  = *(_BYTE *)(a2 + 80);
    *(_BYTE *)(a1 + 81)  = *(_BYTE *)(a2 + 81);
    uint64_t v10 = *(void *)(a2 + 88);
    unint64_t v11 = *(void *)(a2 + 96);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    sub_100020AFC(v10, v11);
    *(void *)(a1 + 88)  = v10;
    *(void *)(a1 + 96)  = v11;
  }

  else
  {
    __int128 v12 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48)  = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64)  = v12;
    *(_OWORD *)(a1 + 80)  = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96)  = *(void *)(a2 + 96);
  }

  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = *(void *)(a2 + v13);
  uint64_t v17 = *(void *)(v15 + 8);
  *(void *)uint64_t v14 = v16;
  *(void *)(v14 + 8)  = v17;
  uint64_t v18 = *(void *)(v15 + 24);
  *(void *)(v14 + 16)  = *(void *)(v15 + 16);
  *(void *)(v14 + 24)  = v18;
  *(_BYTE *)(v14 + 32)  = *(_BYTE *)(v15 + 32);
  *(_BYTE *)(v14 + 33)  = *(_BYTE *)(v15 + 33);
  uint64_t v19 = (int *)type metadata accessor for DNSRecords.SRV(0LL);
  uint64_t v20 = v19[5];
  uint64_t v21 = v14 + v20;
  uint64_t v22 = v15 + v20;
  uint64_t v23 = type metadata accessor for NWEndpoint.Port(0LL);
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16LL);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  v24(v21, v22, v23);
  uint64_t v25 = v19[6];
  __int128 v26 = (void *)(v14 + v25);
  uint64_t v27 = (void *)(v15 + v25);
  uint64_t v28 = v27[1];
  *__int128 v26 = *v27;
  v26[1]  = v28;
  *(_WORD *)(v14 + v19[7])  = *(_WORD *)(v15 + v19[7]);
  *(_WORD *)(v14 + v19[8])  = *(_WORD *)(v15 + v19[8]);
  swift_bridgeObjectRetain(v28);
  return a1;
}

uint64_t assignWithCopy for AWDLPeer.AdvertisedService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16)  = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a1 + 32);
  *(void *)(a1 + 32)  = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 40)  = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41)  = *(_BYTE *)(a2 + 41);
  uint64_t v10 = (_OWORD *)(a1 + 48);
  unint64_t v11 = (__int128 *)(a2 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(a2 + 56);
  if (v12)
  {
    if (v13)
    {
      *(void *)(a1 + 48)  = *(void *)(a2 + 48);
      uint64_t v14 = *(void *)(a2 + 56);
      *(void *)(a1 + 56)  = v14;
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRelease(v12);
      *(void *)(a1 + 64)  = *(void *)(a2 + 64);
      uint64_t v15 = *(void *)(a2 + 72);
      uint64_t v16 = *(void *)(a1 + 72);
      *(void *)(a1 + 72)  = v15;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRelease(v16);
      *(_BYTE *)(a1 + 80)  = *(_BYTE *)(a2 + 80);
      *(_BYTE *)(a1 + 81)  = *(_BYTE *)(a2 + 81);
      uint64_t v17 = *(void *)(a2 + 88);
      unint64_t v18 = *(void *)(a2 + 96);
      sub_100020AFC(v17, v18);
      uint64_t v19 = *(void *)(a1 + 88);
      unint64_t v20 = *(void *)(a1 + 96);
      *(void *)(a1 + 88)  = v17;
      *(void *)(a1 + 96)  = v18;
      sub_1000208D8(v19, v20);
    }

    else
    {
      sub_10011D2D4((void *)(a1 + 48));
      __int128 v26 = *(_OWORD *)(a2 + 64);
      __int128 v25 = *(_OWORD *)(a2 + 80);
      __int128 v27 = *v11;
      *(void *)(a1 + 96)  = *(void *)(a2 + 96);
      *(_OWORD *)(a1 + 64)  = v26;
      *(_OWORD *)(a1 + 80)  = v25;
      *uint64_t v10 = v27;
    }
  }

  else if (v13)
  {
    *(void *)(a1 + 48)  = *(void *)(a2 + 48);
    uint64_t v21 = *(void *)(a2 + 56);
    *(void *)(a1 + 56)  = v21;
    *(void *)(a1 + 64)  = *(void *)(a2 + 64);
    uint64_t v22 = *(void *)(a2 + 72);
    *(void *)(a1 + 72)  = v22;
    *(_BYTE *)(a1 + 80)  = *(_BYTE *)(a2 + 80);
    *(_BYTE *)(a1 + 81)  = *(_BYTE *)(a2 + 81);
    uint64_t v23 = *(void *)(a2 + 88);
    unint64_t v24 = *(void *)(a2 + 96);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    sub_100020AFC(v23, v24);
    *(void *)(a1 + 88)  = v23;
    *(void *)(a1 + 96)  = v24;
  }

  else
  {
    __int128 v28 = *v11;
    __int128 v29 = *(_OWORD *)(a2 + 64);
    __int128 v30 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96)  = *(void *)(a2 + 96);
    *(_OWORD *)(a1 + 64)  = v29;
    *(_OWORD *)(a1 + 80)  = v30;
    *uint64_t v10 = v28;
  }

  uint64_t v31 = *(int *)(a3 + 28);
  uint64_t v32 = a1 + v31;
  uint64_t v33 = a2 + v31;
  *(void *)uint64_t v32 = *(void *)(a2 + v31);
  uint64_t v34 = *(void *)(a2 + v31 + 8);
  uint64_t v35 = *(void *)(a1 + v31 + 8);
  *(void *)(v32 + 8)  = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  *(void *)(v32 + 16)  = *(void *)(v33 + 16);
  uint64_t v36 = *(void *)(v33 + 24);
  uint64_t v37 = *(void *)(v32 + 24);
  *(void *)(v32 + 24)  = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  *(_BYTE *)(v32 + 32)  = *(_BYTE *)(v33 + 32);
  *(_BYTE *)(v32 + 33)  = *(_BYTE *)(v33 + 33);
  uint64_t v38 = (int *)type metadata accessor for DNSRecords.SRV(0LL);
  uint64_t v39 = v38[5];
  uint64_t v40 = v32 + v39;
  uint64_t v41 = v33 + v39;
  uint64_t v42 = type metadata accessor for NWEndpoint.Port(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 24LL))(v40, v41, v42);
  uint64_t v43 = v38[6];
  uint64_t v44 = (void *)(v32 + v43);
  uint64_t v45 = (void *)(v33 + v43);
  *uint64_t v44 = *v45;
  uint64_t v46 = v45[1];
  uint64_t v47 = v44[1];
  v44[1]  = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47);
  *(_WORD *)(v32 + v38[7])  = *(_WORD *)(v33 + v38[7]);
  *(_WORD *)(v32 + v38[8])  = *(_WORD *)(v33 + v38[8]);
  return a1;
}

void *sub_10011D2D4(void *a1)
{
  return a1;
}

uint64_t initializeWithTake for AWDLPeer.AdvertisedService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 40)  = *(_WORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48)  = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64)  = v4;
  *(_OWORD *)(a1 + 80)  = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96)  = *(void *)(a2 + 96);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(_WORD *)(v6 + 32)  = *(_WORD *)(a2 + v5 + 32);
  __int128 v8 = *(_OWORD *)(a2 + v5 + 16);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)(a2 + v5);
  *(_OWORD *)(v6 + 16)  = v8;
  uint64_t v9 = (int *)type metadata accessor for DNSRecords.SRV(0LL);
  uint64_t v10 = v9[5];
  uint64_t v11 = v6 + v10;
  uint64_t v12 = v7 + v10;
  uint64_t v13 = type metadata accessor for NWEndpoint.Port(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v11, v12, v13);
  *(_OWORD *)(v6 + v9[6])  = *(_OWORD *)(v7 + v9[6]);
  *(_WORD *)(v6 + v9[7])  = *(_WORD *)(v7 + v9[7]);
  *(_WORD *)(v6 + v9[8])  = *(_WORD *)(v7 + v9[8]);
  return a1;
}

uint64_t assignWithTake for AWDLPeer.AdvertisedService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a1 + 32);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(void *)(a1 + 32)  = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 40)  = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41)  = *(_BYTE *)(a2 + 41);
  uint64_t v10 = *(void *)(a1 + 56);
  if (!v10) {
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(a2 + 56);
  if (!v11)
  {
    sub_10011D2D4((void *)(a1 + 48));
LABEL_5:
    __int128 v16 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48)  = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64)  = v16;
    *(_OWORD *)(a1 + 80)  = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96)  = *(void *)(a2 + 96);
    goto LABEL_6;
  }

  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  *(void *)(a1 + 56)  = v11;
  swift_bridgeObjectRelease(v10);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 64)  = *(void *)(a2 + 64);
  *(void *)(a1 + 72)  = v12;
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 80)  = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81)  = *(_BYTE *)(a2 + 81);
  uint64_t v14 = *(void *)(a1 + 88);
  unint64_t v15 = *(void *)(a1 + 96);
  *(_OWORD *)(a1 + 88)  = *(_OWORD *)(a2 + 88);
  sub_1000208D8(v14, v15);
LABEL_6:
  uint64_t v17 = *(int *)(a3 + 28);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = *(void *)(a2 + v17 + 8);
  uint64_t v21 = *(void *)(a1 + v17 + 8);
  *(void *)uint64_t v18 = *(void *)(a2 + v17);
  *(void *)(v18 + 8)  = v20;
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = *(void *)(v19 + 24);
  uint64_t v23 = *(void *)(v18 + 24);
  *(void *)(v18 + 16)  = *(void *)(v19 + 16);
  *(void *)(v18 + 24)  = v22;
  swift_bridgeObjectRelease(v23);
  *(_BYTE *)(v18 + 32)  = *(_BYTE *)(v19 + 32);
  *(_BYTE *)(v18 + 33)  = *(_BYTE *)(v19 + 33);
  unint64_t v24 = (int *)type metadata accessor for DNSRecords.SRV(0LL);
  uint64_t v25 = v24[5];
  uint64_t v26 = v18 + v25;
  uint64_t v27 = v19 + v25;
  uint64_t v28 = type metadata accessor for NWEndpoint.Port(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 40LL))(v26, v27, v28);
  uint64_t v29 = v24[6];
  __int128 v30 = (void *)(v18 + v29);
  uint64_t v31 = (uint64_t *)(v19 + v29);
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  uint64_t v34 = v30[1];
  *__int128 v30 = v33;
  v30[1]  = v32;
  swift_bridgeObjectRelease(v34);
  *(_WORD *)(v18 + v24[7])  = *(_WORD *)(v19 + v24[7]);
  *(_WORD *)(v18 + v24[8])  = *(_WORD *)(v19 + v24[8]);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLPeer.AdvertisedService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10011D584);
}

uint64_t sub_10011D584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4)  = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for DNSRecords.SRV(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for AWDLPeer.AdvertisedService( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10011D60C);
}

uint64_t sub_10011D60C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16)  = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for DNSRecords.SRV(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 28),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_10011D680(uint64_t a1)
{
  v4[0]  = (char *)&value witness table for Builtin.Int8 + 64;
  v4[1]  = "";
  v4[2]  = &unk_100348FA0;
  uint64_t result = type metadata accessor for DNSRecords.SRV(319LL);
  if (v3 <= 0x3F)
  {
    v4[3]  = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10011D70C()
{
  uint64_t v1 = type metadata accessor for DNSRecords.SRV(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = v0 + v4;
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(void *)(v7 + 24));
  uint64_t v8 = v7 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for NWEndpoint.Port(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  swift_bridgeObjectRelease(*(void *)(v7 + *(int *)(v1 + 24) + 8));
  return swift_deallocObject(v0, v5, v6);
}

double sub_10011D7B0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(type metadata accessor for DNSRecords.SRV(0LL) - 8) + 80LL);
  return sub_100119EA8(a1, (uint64_t *)(v2 + ((v5 + 16) & ~v5)), a2);
}

uint64_t sub_10011D7FC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

double sub_10011D80C@<D0>(uint64_t a1@<X8>)
{
  return sub_100119E18(*(void (**)(__int128 *__return_ptr, uint64_t))(v1 + 16), a1);
}

uint64_t sub_10011D814()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

double sub_10011D848@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100119EA8(a1, (uint64_t *)(v2 + 16), a2);
}

uint64_t sub_10011D850()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10011D860()
{
  return swift_deallocObject(v0, 50LL, 7LL);
}

double sub_10011D88C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100119D58(a1, (__int128 *)(v2 + 16), a2);
}

uint64_t sub_10011D894()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10011D8A4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4 >> 60 != 15) {
    return sub_1000208D8(a3, a4);
  }
  return result;
}

void *NANIntervalDuration.min.unsafeMutableAddressor()
{
  return &static NANIntervalDuration.min;
}

uint64_t NANIntervalDuration.timeUnits.getter(unsigned __int8 a1)
{
  if (a1 >= 0x3Cu) {
    return 0LL;
  }
  if (a1 != 59) {
    return 1LL << (a1 + 4);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  __break(1u);
  return result;
}

unint64_t NANIntervalDuration.deprecatedAvailabilityMapSize.getter(unsigned __int8 a1)
{
  if (a1 > 0x3Bu) {
    __break(1u);
  }
  if (a1 != 59) {
    return 0x200uLL >> (a1 + 4);
  }
  unint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_10011D9D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10011DBB8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10011DA2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10011DBB8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void NANIntervalDuration.description.getter(unsigned __int8 a1)
{
  unint64_t v1 = NANIntervalDuration.timeUnits.getter(a1);
  NANTimeUnit.description.getter(v1);
}

void sub_10011DA8C()
{
  unint64_t v1 = NANIntervalDuration.timeUnits.getter(*v0);
  NANTimeUnit.description.getter(v1);
}

unint64_t sub_10011DAA8()
{
  unint64_t result = qword_1004086C0;
  if (!qword_1004086C0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANIntervalDuration,  &type metadata for NANIntervalDuration);
    atomic_store(result, (unint64_t *)&qword_1004086C0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for NANIntervalDuration(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10011DB38 + 4 * byte_100348FC5[v4]))();
  }
  *a1  = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10011DB6C + 4 * byte_100348FC0[v4]))();
}

uint64_t sub_10011DB6C(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10011DB74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x10011DB7CLL);
  }
  return result;
}

uint64_t sub_10011DB88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x10011DB90LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10011DB94(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10011DB9C(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANIntervalDuration()
{
  return &type metadata for NANIntervalDuration;
}

unint64_t sub_10011DBB8()
{
  unint64_t result = qword_1004086C8;
  if (!qword_1004086C8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANIntervalDuration,  &type metadata for NANIntervalDuration);
    atomic_store(result, (unint64_t *)&qword_1004086C8);
  }

  return result;
}

uint64_t NANSubscribe.Configuration.serviceInfo.getter()
{
  if (qword_100404428 != -1) {
    swift_once(&qword_100404428, sub_1001E6B28);
  }
  Swift::String v1 = String.lowercased()();
  Swift::String v2 = String.lowercased()();
  if (v1._countAndFlagsBits == v2._countAndFlagsBits && v1._object == v2._object)
  {
    swift_bridgeObjectRelease_n(v1._object, 2LL);
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)( v1._countAndFlagsBits,  v1._object,  v2._countAndFlagsBits,  v2._object,  0LL);
    swift_bridgeObjectRelease(v1._object);
    swift_bridgeObjectRelease(v2._object);
    if ((v4 & 1) == 0)
    {
      uint64_t v5 = *(void *)(v0 + 24);
      goto LABEL_11;
    }
  }

  uint64_t v5 = *(void *)(v0 + 24);
  NANGenericServiceProtocol.blob.getter(v5);
  if (v6 >> 60 != 15) {
    return 3LL;
  }
LABEL_11:
  int v7 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0LL) + 68));
  uint64_t v8 = 2LL;
  if (v7) {
    uint64_t v9 = 3LL;
  }
  else {
    uint64_t v9 = 2LL;
  }
  swift_bridgeObjectRetain(v5);
  NANGenericServiceProtocol.packetData(for:)(v9, v5);
  swift_bridgeObjectRelease(v5);
  return v8;
}

void *NANSubscribe.SubscribeType.defaultValue.unsafeMutableAddressor()
{
  return &static NANSubscribe.SubscribeType.defaultValue;
}

uint64_t NANSubscribe.SubscribeType.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x657669746361LL;
  }
  else {
    return 0x65766973736170LL;
  }
}

CoreP2P::NANSubscribe::SubscribeType_optional __swiftcall NANSubscribe.SubscribeType.init(rawValue:)( Swift::String rawValue)
{
  object  = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object  = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D5288, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1) {
    v4.value  = CoreP2P_NANSubscribe_SubscribeType_active;
  }
  else {
    v4.value  = CoreP2P_NANSubscribe_SubscribeType_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t sub_10011DDE4(char *a1, char *a2)
{
  return sub_10002B058(*a1, *a2);
}

Swift::Int sub_10011DDF0()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  if (v1) {
    uint64_t v2 = 0x657669746361LL;
  }
  else {
    uint64_t v2 = 0x65766973736170LL;
  }
  if (v1) {
    unint64_t v3 = 0xE600000000000000LL;
  }
  else {
    unint64_t v3 = 0xE700000000000000LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10011DE6C(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 0x657669746361LL;
  }
  else {
    uint64_t v2 = 0x65766973736170LL;
  }
  if (*v1) {
    unint64_t v3 = 0xE600000000000000LL;
  }
  else {
    unint64_t v3 = 0xE700000000000000LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10011DEC4(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2) {
    uint64_t v3 = 0x657669746361LL;
  }
  else {
    uint64_t v3 = 0x65766973736170LL;
  }
  if (v2) {
    unint64_t v4 = 0xE600000000000000LL;
  }
  else {
    unint64_t v4 = 0xE700000000000000LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10011DF3C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v3._uint64_t countAndFlagsBits = *a1;
  unint64_t v4 = (void *)a1[1];
  v3._object  = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D5288, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2  = v7;
  return result;
}

void sub_10011DF98(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x65766973736170LL;
  if (*v1) {
    uint64_t v2 = 0x657669746361LL;
  }
  unint64_t v3 = 0xE700000000000000LL;
  if (*v1) {
    unint64_t v3 = 0xE600000000000000LL;
  }
  *a1  = v2;
  a1[1]  = v3;
}

uint64_t sub_10011DFD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001204BC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10011E030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001204BC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10011E07C()
{
  if (*v0) {
    return 0x657669746361LL;
  }
  else {
    return 0x65766973736170LL;
  }
}

uint64_t NANSubscribe.Configuration.serviceName.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain(*(void *)(v0 + 16));
  return v1;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txFWDelay.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 24));
}

uint64_t NANSubscribe.Configuration.type.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 32)  = result & 1;
  return result;
}

uint64_t NANSubscribe.Configuration.rangingMandatory.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 33)  = result;
  return result;
}

uint64_t (*NANCoreAnalyticsMetrics.peerAddress.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.queryPeriod.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0LL) + 36);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t NANSubscribe.Configuration.queryPeriod.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0LL) + 36);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*NANSubscribe.Configuration.queryPeriod.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.awakeDWInterval.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0LL) + 40));
}

uint64_t NANSubscribe.Configuration.awakeDWInterval.setter(char a1)
{
  uint64_t result = type metadata accessor for NANSubscribe.Configuration(0LL);
  *(_BYTE *)(v1 + *(int *)(result + swift_bridgeObjectRelease(*(void *)(v0 + 40)) = a1;
  return result;
}

uint64_t (*NANSubscribe.Configuration.awakeDWInterval.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.matchingFilterRx.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0LL) + 44));
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(*((void *)v1 + 1));
  return v2;
}

uint64_t NANSubscribe.Configuration.matchingFilterRx.setter(char a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0LL) + 44);
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v5 + 8));
  *(_BYTE *)uint64_t v5 = a1;
  *(void *)(v5 + 8)  = a2;
  return result;
}

uint64_t (*NANSubscribe.Configuration.matchingFilterRx.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.matchingFilterTx.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0LL) + 48));
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(*((void *)v1 + 1));
  return v2;
}

uint64_t NANSubscribe.Configuration.matchingFilterTx.setter(char a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0LL) + 48);
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v5 + 8));
  *(_BYTE *)uint64_t v5 = a1;
  *(void *)(v5 + 8)  = a2;
  return result;
}

uint64_t (*NANSubscribe.Configuration.matchingFilterTx.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.matchingFilterCondition.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0LL) + 52));
}

uint64_t NANSubscribe.Configuration.matchingFilterCondition.setter(char a1)
{
  char v2 = a1 & 1;
  uint64_t result = type metadata accessor for NANSubscribe.Configuration(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 5DNSRecords.BrowseHost.keyData.getter(*v0, *((void *)v0 + 1), *((void *)v0 + 2)) = v2;
  return result;
}

uint64_t (*NANSubscribe.Configuration.matchingFilterCondition.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.bloomFilter.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0LL) + 56);
  uint64_t v2 = *(void *)v1;
  sub_10011F034(*(void *)v1, *(void *)(v1 + 8), *(_WORD *)(v1 + 16));
  return v2;
}

uint64_t NANSubscribe.Configuration.bloomFilter.setter(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v7 = v3 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0LL) + 56);
  uint64_t result = sub_1000AA7B4(*(void *)v7, *(void *)(v7 + 8), *(_WORD *)(v7 + 16));
  *(void *)uint64_t v7 = a1;
  *(void *)(v7 + 8)  = a2;
  *(_WORD *)(v7 + 16)  = a3;
  return result;
}

uint64_t (*NANSubscribe.Configuration.bloomFilter.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.enableFastDiscovery.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0LL) + 60));
}

uint64_t NANSubscribe.Configuration.enableFastDiscovery.setter(char a1)
{
  uint64_t result = type metadata accessor for NANSubscribe.Configuration(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 60))  = a1;
  return result;
}

uint64_t (*NANSubscribe.Configuration.enableFastDiscovery.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.oweKeys.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0LL) + 64);
  return sub_10011F048(v3, a1);
}

uint64_t NANSubscribe.Configuration.oweKeys.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0LL) + 64);
  return sub_10011F08C(a1, v3);
}

uint64_t (*NANSubscribe.Configuration.oweKeys.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.authenticationType.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0LL) + 68));
}

BOOL NANSubscribe.Configuration.requiresAuthentication.getter()
{
  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0LL) + 68)) & 1) == 0;
}

unint64_t NANSubscribe.Configuration.multicastAddress.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0LL) + 72));
  return *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 6) << 48);
}

uint64_t NANSubscribe.Configuration.multicastAddress.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for NANSubscribe.Configuration(0LL);
  uint64_t v4 = v1 + *(int *)(result + 72);
  *(_WORD *)(v4 + 4)  = WORD2(a1);
  *(_DWORD *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 6)  = BYTE6(a1) & 1;
  return result;
}

uint64_t (*NANSubscribe.Configuration.multicastAddress.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.multicastServiceType.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0LL) + 76));
}

uint64_t NANSubscribe.Configuration.multicastServiceType.setter(char a1)
{
  uint64_t result = type metadata accessor for NANSubscribe.Configuration(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 76))  = a1 & 1;
  return result;
}

uint64_t (*NANSubscribe.Configuration.multicastServiceType.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

void NANSubscribe.Configuration.hash(into:)(__int128 *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (Swift::UInt64 *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Hasher._combine(_:)(*(_BYTE *)v1);
  uint64_t v8 = *(void *)(v1 + 16);
  Swift::String v9 = String.lowercased()();
  swift_bridgeObjectRetain(v8);
  String.hash(into:)(a1, v9._countAndFlagsBits, v9._object);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9._object);
  uint64_t v10 = *(void *)(v2 + 24);
  swift_bridgeObjectRetain(v10);
  sub_10006C6D0(a1, v10);
  swift_bridgeObjectRelease(v10);
  if (*(_BYTE *)(v2 + 32)) {
    uint64_t v11 = 0x657669746361LL;
  }
  else {
    uint64_t v11 = 0x65766973736170LL;
  }
  if (*(_BYTE *)(v2 + 32)) {
    unint64_t v12 = 0xE600000000000000LL;
  }
  else {
    unint64_t v12 = 0xE700000000000000LL;
  }
  String.hash(into:)(a1, v11, v12);
  swift_bridgeObjectRelease(v12);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 33));
  uint64_t v13 = type metadata accessor for NANSubscribe.Configuration(0LL);
  (*(void (**)(Swift::UInt64 *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(int *)(v13 + 36), v4);
  int v14 = (*(uint64_t (**)(Swift::UInt64 *, uint64_t))(v5 + 88))(v7, v4);
  if (v14 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v5 + 96))(v7, v4);
    int64_t v15 = *v7;
    uint64_t v16 = 1000000000LL;
  }

  else if (v14 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v5 + 96))(v7, v4);
    int64_t v15 = *v7;
    uint64_t v16 = 1000000LL;
  }

  else
  {
    if (v14 != enum case for DispatchTimeInterval.microseconds(_:))
    {
      if (v14 == enum case for DispatchTimeInterval.nanoseconds(_:))
      {
        (*(void (**)(Swift::UInt64 *, uint64_t))(v5 + 96))(v7, v4);
        Swift::UInt64 v21 = *v7;
      }

      else
      {
        if (v14 != enum case for DispatchTimeInterval.never(_:)) {
          (*(void (**)(Swift::UInt64 *, uint64_t))(v5 + 8))(v7, v4);
        }
        Swift::UInt64 v21 = 0x7FFFFFFFFFFFFFFFLL;
      }

Swift::Int NANSubscribe.Configuration.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_10011ED0C(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t NANSubscribe.Configuration.init(instanceID:serviceName:serviceSpecificInfo:queryPeriod:enableFastDiscovery:authenticationType:multicastAddress:type:multicastServiceType:)@<X0>( int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10, __int16 a11, char a12, char a13, char a14, unsigned __int8 a15)
{
  int v44 = a7;
  int v45 = a8;
  uint64_t v42 = a3;
  uint64_t v43 = a6;
  uint64_t v41 = a2;
  int v40 = a1;
  int v46 = a15;
  sub_100002274(&qword_100405118);
  __chkstk_darwin();
  BOOL v19 = &v39[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  Swift::UInt64 v21 = &v39[-v20];
  uint64_t v22 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin();
  uint64_t v26 = &v39[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  P256.KeyAgreement.PrivateKey.init()(v24);
  unint64_t v47 = sub_100020554((uint64_t)_swiftEmptyArrayStorage);
  if (a5 >> 60 == 15)
  {
    uint64_t v27 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v21, 1LL, 1LL, v27);
  }

  else
  {
    *Swift::UInt64 v21 = a4;
    v21[1]  = a5;
    uint64_t v28 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    swift_storeEnumTagMultiPayload(v21, v28, 6LL);
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v21, 0LL, 1LL, v28);
  }

  sub_100111F20((uint64_t)v21, (uint64_t)v19);
  sub_100013D20((uint64_t)v19, 6);
  sub_10011F680((uint64_t)v21);
  unint64_t v29 = v47;
  __int128 v30 = (int *)type metadata accessor for NANSubscribe.Configuration(0LL);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v23 + 32))(a9 + v30[16], v26, v22);
  *(_BYTE *)a9  = v40;
  uint64_t v31 = v42;
  *(void *)(a9 + 8)  = v41;
  *(void *)(a9 + 16)  = v31;
  *(void *)(a9 + 24)  = v29;
  *(_BYTE *)(a9 + 32)  = a14 & 1;
  *(_BYTE *)(a9 + 33)  = 0;
  uint64_t v32 = a9 + v30[9];
  uint64_t v33 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 32LL))(v32, v43, v33);
  *(_BYTE *)(a9 + v30[10])  = 1;
  uint64_t v35 = a9 + v30[11];
  *(_BYTE *)uint64_t v35 = 1;
  *(void *)(v35 + 8)  = _swiftEmptyArrayStorage;
  uint64_t v36 = a9 + v30[12];
  *(_BYTE *)uint64_t v36 = 0;
  *(void *)(v36 + 8)  = _swiftEmptyArrayStorage;
  *(_BYTE *)(a9 + v30[13])  = 0;
  uint64_t v37 = a9 + v30[14];
  *(void *)uint64_t v37 = 0LL;
  *(void *)(v37 + 8)  = 0LL;
  *(_WORD *)(v37 + 16)  = 512;
  *(_BYTE *)(a9 + v30[15])  = v44 & 1;
  *(_BYTE *)(a9 + v30[17])  = v45 & 1;
  uint64_t v38 = a9 + v30[18];
  *(_WORD *)(v38 + 4)  = a11;
  *(_DWORD *)uint64_t v38 = a10;
  *(_BYTE *)(v38 + 6)  = a12 & 1;
  *(_BYTE *)(a9 + v30[19])  = v46 & 1;
  return result;
}

uint64_t type metadata accessor for NANSubscribe.Configuration(uint64_t a1)
{
  uint64_t result = qword_100408788;
  if (!qword_100408788) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NANSubscribe.Configuration);
  }
  return result;
}

uint64_t sub_10011F034(uint64_t result, unint64_t a2, __int16 a3)
{
  if ((a3 & 0xFF00) != 0x200) {
    return sub_100020AFC(result, a2);
  }
  return result;
}

uint64_t sub_10011F048(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OWEKeys(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10011F08C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OWEKeys(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t _s7CoreP2P12NANSubscribeO13ConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0( unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0LL;
  }
  Swift::String v4 = String.lowercased()();
  Swift::String v5 = String.lowercased()();
  if (v4._countAndFlagsBits == v5._countAndFlagsBits && v4._object == v5._object)
  {
    swift_bridgeObjectRelease_n(v4._object, 2LL);
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)( v4._countAndFlagsBits,  v4._object,  v5._countAndFlagsBits,  v5._object,  0LL);
    swift_bridgeObjectRelease(v4._object);
    swift_bridgeObjectRelease(v5._object);
    uint64_t result = 0LL;
    if ((v7 & 1) == 0) {
      return result;
    }
  }

  if ((sub_1000680E4(*((void *)a1 + 3), *((void *)a2 + 3)) & 1) == 0) {
    return 0LL;
  }
  uint64_t v9 = a1[32] ? 0x657669746361LL : 0x65766973736170LL;
  unint64_t v10 = a1[32] ? 0xE600000000000000LL : 0xE700000000000000LL;
  uint64_t v11 = a2[32] ? 0x657669746361LL : 0x65766973736170LL;
  unint64_t v12 = a2[32] ? 0xE600000000000000LL : 0xE700000000000000LL;
  if (v9 == v11 && v10 == v12)
  {
    swift_bridgeObjectRelease_n(v10, 2LL);
  }

  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v11, v12, 0LL);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v12);
    uint64_t result = 0LL;
    if ((v13 & 1) == 0) {
      return result;
    }
  }

  if (a1[33] != a2[33]) {
    return 0LL;
  }
  int v14 = (int *)type metadata accessor for NANSubscribe.Configuration(0LL);
  if ((static DispatchTimeInterval.== infix(_:_:)(&a1[v14[9]], &a2[v14[9]]) & 1) == 0) {
    return 0LL;
  }
  if ((sub_10002A720(a1[v14[10]], a2[v14[10]]) & 1) == 0) {
    return 0LL;
  }
  uint64_t v15 = v14[11];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = *(void *)&a1[v15 + 8];
  uint64_t v18 = &a2[v15];
  uint64_t v19 = *((void *)v18 + 1);
  if ((sub_10002A7D8(*v16, *v18) & 1) == 0) {
    return 0LL;
  }
  if ((sub_10007A838(v17, v19) & 1) == 0) {
    return 0LL;
  }
  uint64_t v20 = v14[12];
  Swift::UInt64 v21 = &a1[v20];
  uint64_t v22 = *(void *)&a1[v20 + 8];
  uint64_t v23 = &a2[v20];
  uint64_t v24 = *((void *)v23 + 1);
  if ((sub_10002A7D8(*v21, *v23) & 1) == 0 || (sub_10007A838(v22, v24) & 1) == 0) {
    return 0LL;
  }
  uint64_t v25 = v14[13];
  int v26 = a1[v25];
  int v27 = a2[v25];
  if (v26) {
    uint64_t v28 = 0x757145746F4E7874LL;
  }
  else {
    uint64_t v28 = 0x526C617571457874LL;
  }
  if (v26) {
    unint64_t v29 = 0xEC00000078526C61LL;
  }
  else {
    unint64_t v29 = 0xE900000000000078LL;
  }
  if (v27) {
    uint64_t v30 = 0x757145746F4E7874LL;
  }
  else {
    uint64_t v30 = 0x526C617571457874LL;
  }
  if (v27) {
    unint64_t v31 = 0xEC00000078526C61LL;
  }
  else {
    unint64_t v31 = 0xE900000000000078LL;
  }
  if (v28 == v30 && v29 == v31)
  {
    swift_bridgeObjectRelease_n(v29, 2LL);
  }

  else
  {
    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, v30, v31, 0LL);
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(v31);
    uint64_t result = 0LL;
    if ((v32 & 1) == 0) {
      return result;
    }
  }

  uint64_t v33 = v14[14];
  uint64_t v35 = *(void *)&a1[v33];
  unint64_t v34 = *(void *)&a1[v33 + 8];
  __int16 v36 = *(_WORD *)&a1[v33 + 16];
  uint64_t v37 = &a2[v33];
  uint64_t v39 = *(void *)v37;
  unint64_t v38 = *((void *)v37 + 1);
  __int16 v40 = *((_WORD *)v37 + 8);
  int v41 = v40 & 0xFF00;
  if ((v36 & 0xFF00) == 0x200)
  {
    if (v41 == 512) {
      goto LABEL_51;
    }
    goto LABEL_57;
  }

  if (v41 == 512)
  {
LABEL_57:
    sub_10011F034(v35, v34, v36);
    sub_10011F034(v39, v38, v40);
    sub_1000AA7B4(v35, v34, v36);
    uint64_t v53 = v39;
    unint64_t v54 = v38;
    __int16 v55 = v40;
LABEL_58:
    sub_1000AA7B4(v53, v54, v55);
    return 0LL;
  }

  sub_10011F034(v35, v34, v36);
  sub_10011F034(v39, v38, v40);
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v35, v34);
  if ((v56 & 1) == 0)
  {
    sub_1000AA7B4(v39, v38, v40);
    uint64_t v53 = v35;
    unint64_t v54 = v34;
    __int16 v55 = v36;
    goto LABEL_58;
  }

  sub_1000AA7B4(v39, v38, v40);
  sub_1000AA7B4(v35, v34, v36);
  uint64_t result = 0LL;
  if (v36 == v40
    && ((((v36 & 0x100) == 0) ^ ((unsigned __int16)(v40 & 0x100) >> 8)) & 1) != 0)
  {
LABEL_51:
    if (a1[v14[15]] != a2[v14[15]]) {
      return 0LL;
    }
    uint64_t v42 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter();
    unint64_t v44 = v43;
    uint64_t v45 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter();
    unint64_t v47 = v46;
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v42, v44);
    char v49 = v48;
    sub_1000208D8(v45, v47);
    sub_1000208D8(v42, v44);
    if ((v49 & 1) == 0) {
      return 0LL;
    }
    uint64_t v50 = v14[17];
    unsigned __int8 v51 = a1[v50];
    int v52 = a2[v50];
    if ((v51 & 1) != 0)
    {
      if (!v52) {
        return 0LL;
      }
    }

    else if ((v52 & 1) != 0)
    {
      return 0LL;
    }

    uint64_t v57 = v14[18];
    uint64_t v58 = &a1[v57];
    unsigned __int8 v59 = a1[v57 + 6];
    uint64_t v60 = &a2[v57];
    if ((v59 & 1) != 0)
    {
      if (v60[6]) {
        goto LABEL_76;
      }
    }

    else if ((v60[6] & 1) == 0)
    {
      unint64_t v61 = *(unsigned int *)v58 | ((unint64_t)*((unsigned __int16 *)v58 + 2) << 32);
      unint64_t v62 = *(unsigned int *)v60 | ((unint64_t)*((unsigned __int16 *)v60 + 2) << 32);
      v63.i64[0]  = 0xFFFFFFFFFFFFLL;
      v63.i64[1]  = 0xFFFFFFFFFFFFLL;
      uint64x2_t v64 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v61), v63);
      int16x8_t v65 = (int16x8_t)vshlq_u64(v64, (uint64x2_t)xmmword_10033A8F0);
      uint64x2_t v66 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v62), v63);
      int64x2_t v67 = (int64x2_t)vshlq_u64(v66, (uint64x2_t)xmmword_10033A8F0);
      int16x8_t v68 = (int16x8_t)vshlq_u64(v66, (uint64x2_t)xmmword_10033A8E0);
      v74[0]  = v61;
      *(int32x2_t *)v64.i8  = vmovn_s64((int64x2_t)vshlq_u64(v64, (uint64x2_t)xmmword_10033A8E0));
      *(int32x2_t *)v65.i8  = vmovn_s64((int64x2_t)v65);
      v65.i16[1]  = v65.i16[2];
      v65.i16[2]  = v64.i16[0];
      v65.i16[3]  = v64.i16[2];
      *(_DWORD *)&v74[1]  = vmovn_s16(v65).u32[0];
      v74[5]  = BYTE5(v61);
      v73[0]  = v62;
      *(int32x2_t *)v64.i8  = vmovn_s64((int64x2_t)v68);
      *(int32x2_t *)v68.i8  = vmovn_s64(v67);
      v68.i16[1]  = v68.i16[2];
      v68.i16[2]  = v64.i16[0];
      v68.i16[3]  = v64.i16[2];
      *(_DWORD *)&v73[1]  = vmovn_s16(v68).u32[0];
      v73[5]  = BYTE5(v62);
      if (*(_DWORD *)v74 == *(_DWORD *)v73 && *(unsigned __int16 *)&v74[4] == *(unsigned __int16 *)&v73[4])
      {
LABEL_76:
        uint64_t v70 = v14[19];
        unsigned __int8 v71 = a1[v70];
        unsigned __int8 v72 = a2[v70];
        if ((v71 & 1) != 0)
        {
          if ((v72 & 1) != 0) {
            return 1LL;
          }
        }

        else if ((v72 & 1) == 0)
        {
          return 1LL;
        }
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_10011F680(uint64_t a1)
{
  uint64_t v2 = sub_100002274(&qword_100405118);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_10011F6C4()
{
  unint64_t result = qword_1004086D0;
  if (!qword_1004086D0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANSubscribe.SubscribeType,  &type metadata for NANSubscribe.SubscribeType);
    atomic_store(result, (unint64_t *)&qword_1004086D0);
  }

  return result;
}

uint64_t sub_10011F708(uint64_t a1)
{
  uint64_t result = sub_10011F7B8(&qword_10040F060, (uint64_t)&protocol conformance descriptor for NANSubscribe.Configuration);
  *(void *)(a1 + 8)  = result;
  return result;
}

void *sub_10011F73C()
{
  return &protocol witness table for UInt8;
}

uint64_t sub_10011F748(uint64_t a1)
{
  *(void *)(a1 + 8)  = sub_10011F7B8( &qword_100408718,  (uint64_t)&protocol conformance descriptor for NANSubscribe.Configuration);
  uint64_t result = sub_10011F7B8(&qword_100408720, (uint64_t)&protocol conformance descriptor for NANSubscribe.Configuration);
  *(void *)(a1 + 16)  = result;
  return result;
}

uint64_t sub_10011F794()
{
  return sub_10011F7B8(&qword_100408728, (uint64_t)&protocol conformance descriptor for NANSubscribe.Configuration);
}

uint64_t sub_10011F7B8(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for NANSubscribe.Configuration(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

ValueMetadata *type metadata accessor for NANSubscribe()
{
  return &type metadata for NANSubscribe;
}

uint64_t storeEnumTagSinglePayload for NANSubscribe.SubscribeType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10011F854 + 4 * byte_100349112[v4]))();
  }
  *a1  = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10011F888 + 4 * byte_10034910D[v4]))();
}

uint64_t sub_10011F888(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10011F890(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x10011F898LL);
  }
  return result;
}

uint64_t sub_10011F8A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x10011F8ACLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10011F8B0(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10011F8B8(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANSubscribe.SubscribeType()
{
  return &type metadata for NANSubscribe.SubscribeType;
}

void *initializeBufferWithCopyOfBuffer for NANSubscribe.Configuration(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v26 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *(_BYTE *)a1  = *(_BYTE *)a2;
    uint64_t v7 = a2[2];
    *(void *)(a1 + 8)  = a2[1];
    *(void *)(a1 + 16)  = v7;
    uint64_t v8 = a2[3];
    *(_BYTE *)(a1 + 32)  = *((_BYTE *)a2 + 32);
    *(_BYTE *)(a1 + 33)  = *((_BYTE *)a2 + 33);
    uint64_t v9 = a3[9];
    uint64_t v10 = a1 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    *(void *)(a1 + 24)  = v8;
    uint64_t v12 = type metadata accessor for DispatchTimeInterval(0LL);
    char v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    uint64_t v14 = a3[11];
    *((_BYTE *)v4 + a3[10])  = *((_BYTE *)a2 + a3[10]);
    uint64_t v15 = (char *)v4 + v14;
    uint64_t v16 = (char *)a2 + v14;
    *uint64_t v15 = *v16;
    uint64_t v17 = *((void *)v16 + 1);
    *((void *)v15 + 1)  = v17;
    uint64_t v18 = a3[12];
    uint64_t v19 = a3[13];
    uint64_t v20 = (char *)v4 + v18;
    Swift::UInt64 v21 = (char *)a2 + v18;
    char *v20 = *v21;
    uint64_t v22 = *((void *)v21 + 1);
    *((void *)v20 + 1)  = v22;
    *((_BYTE *)v4 + v19)  = *((_BYTE *)a2 + v19);
    uint64_t v23 = a3[14];
    uint64_t v24 = (char *)v4 + v23;
    uint64_t v25 = (uint64_t *)((char *)a2 + v23);
    LODWORD(v8)  = *((unsigned __int8 *)a2 + v23 + 17) << 8;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v22);
    if ((_DWORD)v8 == 512)
    {
      *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    }

    else
    {
      uint64_t v27 = *v25;
      unint64_t v28 = v25[1];
      sub_100020AFC(*v25, v28);
      *(void *)uint64_t v24 = v27;
      *((void *)v24 + 1)  = v28;
    }

    *((_WORD *)v24 + 8)  = *((_WORD *)v25 + 8);
    uint64_t v29 = a3[16];
    *((_BYTE *)v4 + a3[15])  = *((_BYTE *)a2 + a3[15]);
    uint64_t v30 = (char *)v4 + v29;
    uint64_t v31 = (uint64_t)a2 + v29;
    uint64_t v32 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16LL))(v30, v31, v32);
    uint64_t v33 = a3[18];
    *((_BYTE *)v4 + a3[17])  = *((_BYTE *)a2 + a3[17]);
    unint64_t v34 = (_DWORD *)((char *)v4 + v33);
    uint64_t v35 = (_DWORD *)((char *)a2 + v33);
    *unint64_t v34 = *v35;
    *(_DWORD *)((char *)v34 + 3)  = *(_DWORD *)((char *)v35 + 3);
    *((_BYTE *)v4 + a3[19])  = *((_BYTE *)a2 + a3[19]);
  }

  return v4;
}

uint64_t destroy for NANSubscribe.Configuration(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[9];
  uint64_t v5 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[11] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[12] + 8));
  uint64_t v6 = a1 + a2[14];
  uint64_t v7 = a1 + a2[16];
  uint64_t v8 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
}

uint64_t initializeWithCopy for NANSubscribe.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32)  = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33)  = *(_BYTE *)(a2 + 33);
  uint64_t v8 = a3[9];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(void *)(a1 + 24)  = v7;
  uint64_t v11 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  uint64_t v13 = a3[11];
  *(_BYTE *)(a1 + a3[10])  = *(_BYTE *)(a2 + a3[10]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(_BYTE *)uint64_t v14 = *(_BYTE *)v15;
  uint64_t v16 = *(void *)(v15 + 8);
  *(void *)(v14 + 8)  = v16;
  uint64_t v17 = a3[12];
  uint64_t v18 = a3[13];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  *(_BYTE *)uint64_t v19 = *(_BYTE *)v20;
  uint64_t v21 = *(void *)(v20 + 8);
  *(void *)(v19 + 8)  = v21;
  *(_BYTE *)(a1 + v18)  = *(_BYTE *)(a2 + v18);
  uint64_t v22 = a3[14];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = (uint64_t *)(a2 + v22);
  LODWORD(v7)  = *(unsigned __int8 *)(a2 + v22 + 17) << 8;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v21);
  if ((_DWORD)v7 == 512)
  {
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  }

  else
  {
    uint64_t v25 = *v24;
    unint64_t v26 = v24[1];
    sub_100020AFC(*v24, v26);
    *(void *)uint64_t v23 = v25;
    *(void *)(v23 + 8)  = v26;
  }

  *(_WORD *)(v23 + 16)  = *((_WORD *)v24 + 8);
  uint64_t v27 = a3[16];
  *(_BYTE *)(a1 + a3[15])  = *(_BYTE *)(a2 + a3[15]);
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  uint64_t v30 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16LL))(v28, v29, v30);
  uint64_t v31 = a3[18];
  *(_BYTE *)(a1 + a3[17])  = *(_BYTE *)(a2 + a3[17]);
  uint64_t v32 = (_DWORD *)(a1 + v31);
  uint64_t v33 = (_DWORD *)(a2 + v31);
  *uint64_t v32 = *v33;
  *(_DWORD *)((char *)v32 + 3)  = *(_DWORD *)((char *)v33 + 3);
  *(_BYTE *)(a1 + a3[19])  = *(_BYTE *)(a2 + a3[19]);
  return a1;
}

uint64_t assignWithCopy for NANSubscribe.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16)  = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24)  = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32)  = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33)  = *(_BYTE *)(a2 + 33);
  uint64_t v10 = a3[9];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  *(_BYTE *)(a1 + a3[10])  = *(_BYTE *)(a2 + a3[10]);
  uint64_t v14 = a3[11];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(_BYTE *)uint64_t v15 = *(_BYTE *)v16;
  uint64_t v17 = *(void *)(v16 + 8);
  uint64_t v18 = *(void *)(v15 + 8);
  *(void *)(v15 + 8)  = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = a3[12];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  *(_BYTE *)uint64_t v20 = *(_BYTE *)v21;
  uint64_t v22 = *(void *)(v21 + 8);
  uint64_t v23 = *(void *)(v20 + 8);
  *(void *)(v20 + 8)  = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *(_BYTE *)(a1 + a3[13])  = *(_BYTE *)(a2 + a3[13]);
  uint64_t v24 = a3[14];
  uint64_t v25 = a1 + v24;
  unint64_t v26 = (uint64_t *)(a2 + v24);
  int v27 = *(unsigned __int8 *)(a1 + v24 + 17) << 8;
  int v28 = *(unsigned __int8 *)(a2 + v24 + 17) << 8;
  if (v27 != 512)
  {
    if (v28 == 512)
    {
      sub_10011FF54(v25);
      __int16 v30 = *((_WORD *)v26 + 8);
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
      *(_WORD *)(v25 + 16)  = v30;
      goto LABEL_9;
    }

    uint64_t v33 = *v26;
    unint64_t v34 = v26[1];
    sub_100020AFC(*v26, v34);
    uint64_t v35 = *(void *)v25;
    unint64_t v36 = *(void *)(v25 + 8);
    *(void *)uint64_t v25 = v33;
    *(void *)(v25 + 8)  = v34;
    sub_1000208D8(v35, v36);
LABEL_8:
    *(_BYTE *)(v25 + 16)  = *((_BYTE *)v26 + 16);
    *(_BYTE *)(v25 + 17)  = *((_BYTE *)v26 + 17);
    goto LABEL_9;
  }

  if (v28 != 512)
  {
    uint64_t v31 = *v26;
    unint64_t v32 = v26[1];
    sub_100020AFC(*v26, v32);
    *(void *)uint64_t v25 = v31;
    *(void *)(v25 + 8)  = v32;
    goto LABEL_8;
  }

  __int128 v29 = *(_OWORD *)v26;
  *(_WORD *)(v25 + 16)  = *((_WORD *)v26 + 8);
  *(_OWORD *)uint64_t v25 = v29;
LABEL_9:
  *(_BYTE *)(a1 + a3[15])  = *(_BYTE *)(a2 + a3[15]);
  uint64_t v37 = a3[16];
  uint64_t v38 = a1 + v37;
  uint64_t v39 = a2 + v37;
  uint64_t v40 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 24LL))(v38, v39, v40);
  *(_BYTE *)(a1 + a3[17])  = *(_BYTE *)(a2 + a3[17]);
  uint64_t v41 = a3[18];
  uint64_t v42 = (_DWORD *)(a1 + v41);
  unint64_t v43 = (_DWORD *)(a2 + v41);
  int v44 = *(_DWORD *)((char *)v43 + 3);
  *uint64_t v42 = *v43;
  *(_DWORD *)((char *)v42 + 3)  = v44;
  *(_BYTE *)(a1 + a3[19])  = *(_BYTE *)(a2 + a3[19]);
  return a1;
}

uint64_t sub_10011FF54(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for NANSubscribe.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32)  = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33)  = *(_BYTE *)(a2 + 33);
  uint64_t v6 = a3[9];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[11];
  *(_BYTE *)(a1 + a3[10])  = *(_BYTE *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v10)  = *(_OWORD *)(a2 + v10);
  uint64_t v11 = a3[13];
  *(_OWORD *)(a1 + a3[12])  = *(_OWORD *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v11)  = *(_BYTE *)(a2 + v11);
  uint64_t v12 = a3[14];
  uint64_t v13 = a3[15];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = (__int128 *)(a2 + v12);
  __int128 v16 = *v15;
  *(_WORD *)(v14 + 16)  = *((_WORD *)v15 + 8);
  LOBYTE(v15)  = *(_BYTE *)(a2 + v13);
  *(_OWORD *)uint64_t v14 = v16;
  *(_BYTE *)(a1 + v13)  = (_BYTE)v15;
  uint64_t v17 = a3[16];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32LL))(v18, v19, v20);
  uint64_t v21 = a3[18];
  *(_BYTE *)(a1 + a3[17])  = *(_BYTE *)(a2 + a3[17]);
  uint64_t v22 = (_DWORD *)(a1 + v21);
  uint64_t v23 = (_DWORD *)(a2 + v21);
  *uint64_t v22 = *v23;
  *(_DWORD *)((char *)v22 + 3)  = *(_DWORD *)((char *)v23 + 3);
  *(_BYTE *)(a1 + a3[19])  = *(_BYTE *)(a2 + a3[19]);
  return a1;
}

uint64_t assignWithTake for NANSubscribe.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 32)  = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33)  = *(_BYTE *)(a2 + 33);
  uint64_t v9 = a3[9];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40LL))(v10, v11, v12);
  uint64_t v13 = a3[11];
  *(_BYTE *)(a1 + a3[10])  = *(_BYTE *)(a2 + a3[10]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(_BYTE *)uint64_t v14 = *(_BYTE *)v15;
  uint64_t v16 = *(void *)(v14 + 8);
  *(void *)(v14 + 8)  = *(void *)(v15 + 8);
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = a3[12];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(_BYTE *)uint64_t v18 = *(_BYTE *)v19;
  uint64_t v20 = *(void *)(v18 + 8);
  *(void *)(v18 + 8)  = *(void *)(v19 + 8);
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = a3[14];
  *(_BYTE *)(a1 + a3[13])  = *(_BYTE *)(a2 + a3[13]);
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  if (*(unsigned __int8 *)(a1 + v21 + 17) << 8 != 512)
  {
    if (*(unsigned __int8 *)(v23 + 17) << 8 != 512)
    {
      uint64_t v24 = *(void *)v22;
      unint64_t v25 = *(void *)(v22 + 8);
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
      sub_1000208D8(v24, v25);
      *(_BYTE *)(v22 + 16)  = *(_BYTE *)(v23 + 16);
      *(_BYTE *)(v22 + 17)  = *(_BYTE *)(v23 + 17);
      goto LABEL_6;
    }

    sub_10011FF54(a1 + v21);
  }

  *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  *(_WORD *)(v22 + 16)  = *(_WORD *)(v23 + 16);
LABEL_6:
  uint64_t v26 = a3[16];
  *(_BYTE *)(a1 + a3[15])  = *(_BYTE *)(a2 + a3[15]);
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  uint64_t v29 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 40LL))(v27, v28, v29);
  uint64_t v30 = a3[18];
  *(_BYTE *)(a1 + a3[17])  = *(_BYTE *)(a2 + a3[17]);
  uint64_t v31 = (_DWORD *)(a1 + v30);
  unint64_t v32 = (_DWORD *)(a2 + v30);
  *uint64_t v31 = *v32;
  *(_DWORD *)((char *)v31 + 3)  = *(_DWORD *)((char *)v32 + 3);
  *(_BYTE *)(a1 + a3[19])  = *(_BYTE *)(a2 + a3[19]);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANSubscribe.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100120288);
}

uint64_t sub_100120288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4)  = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for DispatchTimeInterval(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 36);
    }

    else
    {
      uint64_t v10 = type metadata accessor for OWEKeys(0LL);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 64);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for NANSubscribe.Configuration( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100120334);
}

uint64_t sub_100120334(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16)  = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for DispatchTimeInterval(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 36);
    }

    else
    {
      uint64_t v10 = type metadata accessor for OWEKeys(0LL);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 64);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

uint64_t sub_1001203D0(uint64_t a1)
{
  v5[0]  = (char *)&value witness table for Builtin.Int8 + 64;
  v5[1]  = &unk_100349328;
  _OWORD v5[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  __int128 v5[3] = &unk_100349340;
  v5[4]  = &unk_100349340;
  uint64_t result = type metadata accessor for DispatchTimeInterval(319LL);
  if (v3 <= 0x3F)
  {
    v5[5]  = *(void *)(result - 8) + 64LL;
    v5[6]  = &unk_100349358;
    v5[7]  = &unk_100349328;
    void v5[8] = &unk_100349328;
    void v5[9] = &unk_100349340;
    v5[10]  = &unk_100349370;
    v5[11]  = &unk_100349340;
    uint64_t result = type metadata accessor for P256.KeyAgreement.PrivateKey(319LL);
    if (v4 <= 0x3F)
    {
      v5[12]  = *(void *)(result - 8) + 64LL;
      v5[13]  = (char *)&value witness table for Builtin.Int8 + 64;
      v5[14]  = &unk_100349388;
      v5[15]  = (char *)&value witness table for Builtin.Int8 + 64;
      swift_initStructMetadata(a1, 256LL, 16LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_1001204BC()
{
  unint64_t result = qword_1004087F8;
  if (!qword_1004087F8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANSubscribe.SubscribeType,  &type metadata for NANSubscribe.SubscribeType);
    atomic_store(result, (unint64_t *)&qword_1004087F8);
  }

  return result;
}

uint64_t static P2PTimer.async(after:on:execute:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v23 = a2;
  uint64_t v7 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = &v24[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin();
  uint64_t v12 = &v24[-v11 - 8];
  __chkstk_darwin();
  uint64_t v14 = &v24[-v13 - 8];
  uint64_t v15 = swift_allocObject(&unk_1003E6A50, 24LL, 7LL);
  *(void *)(v15 + 16)  = 0LL;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v14, a1, v7);
  uint64_t v16 = (void *)swift_allocObject(&unk_1003E6A78, 40LL, 7LL);
  v16[2]  = a3;
  void v16[3] = a4;
  void v16[4] = v15;
  uint64_t v17 = *(void (**)(char *, void, uint64_t))(v8 + 104);
  v17(v12, enum case for DispatchTimeInterval.never(_:), v7);
  *(void *)uint64_t v10 = 100LL;
  v17(v10, enum case for DispatchTimeInterval.milliseconds(_:), v7);
  uint64_t v18 = type metadata accessor for P2PTimer(0LL);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  id v19 = v23;
  swift_retain();
  swift_retain();
  uint64_t v20 = sub_100120F78((uint64_t)v14, v19, (uint64_t)v12, (uint64_t)v10, (uint64_t)sub_100057370, (uint64_t)v16);

  swift_release(v16);
  swift_beginAccess(v15 + 16, v24, 1LL, 0LL);
  uint64_t v21 = *(void *)(v15 + 16);
  *(void *)(v15 + 16)  = v20;
  swift_release(v15);
  return swift_release(v21);
}

uint64_t sub_1001206E4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10012070C()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v1 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v2 = sub_100002274((uint64_t *)&unk_1004052A0);
  uint64_t v3 = sub_10012137C((unint64_t *)&qword_100408960, (uint64_t *)&unk_1004052A0);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

uint64_t sub_1001207BC()
{
  uint64_t result = type metadata accessor for DispatchTime(0LL);
  qword_1004107A0  = result;
  *(void *)algn_1004107A8  = &off_1003E6A90;
  return result;
}

uint64_t P2PTimer.deadlineAfter.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10012081C(&OBJC_IVAR____TtC7CoreP2P8P2PTimer_deadlineAfter, a1);
}

id P2PTimer.targetQueue.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_targetQueue);
}

uint64_t P2PTimer.repeatingInterval.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10012081C(&OBJC_IVAR____TtC7CoreP2P8P2PTimer_repeatingInterval, a1);
}

uint64_t P2PTimer.leeway.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10012081C(&OBJC_IVAR____TtC7CoreP2P8P2PTimer_leeway, a1);
}

uint64_t sub_10012081C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *a1;
  uint64_t v5 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t P2PTimer.handler.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_handler);
  swift_retain(*(void *)(v0 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_handler + 8));
  return v1;
}

uint64_t P2PTimer.__allocating_init(deadlineAfter:on:repeating:leeway:_:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = sub_100120F78(a1, a2, a3, a4, a5, a6);

  swift_release(a6);
  return v13;
}

uint64_t P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = sub_100120F78(a1, a2, a3, a4, a5, a6);

  swift_release(a6);
  return v8;
}

uint64_t P2PTimer.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 16);
  swift_getObjectType(v2);
  OS_dispatch_source.cancel()();
  swift_unknownObjectRelease(v2);
  uint64_t v3 = v1 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_deadlineAfter;
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v5(v3, v4);

  v5(v1 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_repeatingInterval, v4);
  v5(v1 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_leeway, v4);
  swift_release(*(void *)(v1 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_handler + 8));
  return v1;
}

uint64_t P2PTimer.__deallocating_deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 16);
  swift_getObjectType(v2);
  OS_dispatch_source.cancel()();
  swift_unknownObjectRelease(v2);
  uint64_t v3 = v1 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_deadlineAfter;
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v5(v3, v4);

  v5(v1 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_repeatingInterval, v4);
  v5(v1 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_leeway, v4);
  swift_release(*(void *)(v1 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_handler + 8));
  return swift_deallocClassInstance( v1,  *(unsigned int *)(*(void *)v1 + 48LL),  *(unsigned __int16 *)(*(void *)v1 + 52LL));
}

uint64_t sub_100120ADC(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3 + 16;
  a1();
  swift_beginAccess(v4, v8, 0LL, 0LL);
  swift_beginAccess(v4, &v7, 1LL, 0LL);
  uint64_t v5 = *(void *)(a3 + 16);
  *(void *)(a3 + 16)  = 0LL;
  return swift_release(v5);
}

uint64_t sub_100120B48()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for P2PTimer(uint64_t a1)
{
  uint64_t result = qword_100408838;
  if (!qword_100408838) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for P2PTimer);
  }
  return result;
}

uint64_t P2PTimer.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v23 = a1;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = v2;
  uint64_t v14 = v2 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_repeatingInterval;
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchTimeInterval.never(_:), v10);
  swift_retain();
  char v15 = static DispatchTimeInterval.== infix(_:_:)(v14, v13);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v16 = sub_100002274(qword_100405EA0);
  uint64_t v17 = swift_allocObject(v16, 80LL, 7LL);
  uint64_t v18 = v17;
  *(_OWORD *)(v17 + 16)  = xmmword_100339900;
  if ((v15 & 1) != 0)
  {
    *(void *)(v17 + 32)  = 0x656E696C64616564LL;
    *(void *)(v17 + 40)  = 0xE800000000000000LL;
    uint64_t v14 = v2 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_deadlineAfter;
  }

  else
  {
    *(void *)(v17 + 32)  = 0x6E69746165706572LL;
    *(void *)(v17 + 40)  = 0xE900000000000067LL;
  }

  *(void *)(v17 + 72)  = v10;
  id v19 = sub_10002278C((void *)(v17 + 48));
  (*(void (**)(void *, uint64_t, uint64_t))(v11 + 16))(v19, v14, v10);
  uint64_t v20 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v9, 1LL, 1LL, v20);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))( v6,  enum case for Mirror.AncestorRepresentation.generated(_:),  v3);
  uint64_t v21 = type metadata accessor for P2PTimer(0LL);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(&v24, v18, v9, v6, v21);
}

uint64_t sub_100120DE4@<X0>(uint64_t a1@<X8>)
{
  return P2PTimer.customMirror.getter(a1);
}

uint64_t _s8Dispatch0A4TimeV7CoreP2PE8register5timeryAD0D6PTimerC_tFZ_0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  ObjectType  = swift_getObjectType(*(void *)(a1 + 16));
  uint64_t v11 = *(void *)(a1 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_handler);
  uint64_t v12 = *(void *)(a1 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_handler + 8);
  aBlock[4]  = v11;
  uint64_t v17 = v12;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256LL;
  aBlock[2]  = sub_1000021F0;
  aBlock[3]  = &unk_1003E6AA8;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = swift_retain();
  static DispatchQoS.unspecified.getter(v14);
  sub_10012070C();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v9, v5, v13, ObjectType);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release(v17);
}

uint64_t sub_100120F78(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v43 = a5;
  uint64_t v44 = a6;
  uint64_t v45 = a4;
  uint64_t v46 = a3;
  unint64_t v47 = a2;
  uint64_t v48 = a1;
  uint64_t v8 = type metadata accessor for DispatchTime(0LL);
  uint64_t v41 = *(void *)(v8 - 8);
  uint64_t v42 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&ObjectType - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&ObjectType - v12;
  uint64_t v14 = type metadata accessor for OS_dispatch_source.TimerFlags(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&ObjectType - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100121340();
  char v49 = _swiftEmptyArrayStorage;
  uint64_t v18 = sub_10000AF70( &qword_100408970,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags,  (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  uint64_t v19 = sub_100002274(&qword_100408978);
  uint64_t v20 = sub_10012137C((unint64_t *)&unk_100408980, &qword_100408978);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v49, v19, v20, v14, v18);
  uint64_t v21 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v17, v47);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  *(void *)(v6 + 16)  = v21;
  ObjectType  = swift_getObjectType(v21);
  if (qword_1004041A0 != -1) {
    swift_once(&qword_1004041A0, sub_1001207BC);
  }
  (*(void (**)(void))(*(void *)algn_1004107A8 + 8LL))();
  uint64_t v22 = v48;
  + infix(_:_:)(v11, v48);
  uint64_t v23 = v42;
  uint64_t v24 = *(void (**)(char *, uint64_t))(v41 + 8);
  v24(v11, v42);
  uint64_t v25 = v45;
  uint64_t v26 = v46;
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v13, v46, v45, ObjectType);
  v24(v13, v23);
  uint64_t v27 = v6 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_deadlineAfter;
  uint64_t v28 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16);
  v30(v27, v22, v28);
  uint64_t v31 = v47;
  *(void *)(v7 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_targetQueue)  = v47;
  v30(v7 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_repeatingInterval, v26, v28);
  v30(v7 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_leeway, v25, v28);
  unint64_t v32 = (void *)(v7 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_handler);
  uint64_t v33 = v44;
  *unint64_t v32 = v43;
  v32[1]  = v33;
  uint64_t v34 = qword_1004107A0;
  uint64_t v35 = *(void *)algn_1004107A8;
  unint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)algn_1004107A8 + 16LL);
  id v37 = v31;
  swift_retain();
  v36(v7, v34, v35);
  swift_getObjectType(*(void *)(v7 + 16));
  OS_dispatch_source.activate()();
  uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
  v38(v25, v28);
  v38(v26, v28);
  v38(v48, v28);
  return v7;
}

uint64_t sub_100121288()
{
  return type metadata accessor for P2PTimer(0LL);
}

uint64_t sub_100121290(uint64_t a1)
{
  uint64_t v4 = "\b";
  uint64_t result = type metadata accessor for DispatchTimeInterval(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(result - 8) + 64LL;
    uint64_t v6 = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t v7 = v5;
    uint64_t v8 = v5;
    uint64_t v9 = (char *)&value witness table for () + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 6LL, &v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100121328(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain(v2);
}

uint64_t sub_100121338(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_100121340()
{
  unint64_t result = qword_10040F130[0];
  if (!qword_10040F130[0])
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_source);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, qword_10040F130);
  }

  return result;
}

uint64_t sub_10012137C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_1000022F8(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

__int16 *CountryCode.unknown.unsafeMutableAddressor()
{
  if (qword_1004041A8 != -1) {
    swift_once(&qword_1004041A8, sub_100122F4C);
  }
  return &static CountryCode.unknown;
}

uint64_t CountryCode.code.getter(unsigned int a1)
{
  char v1 = a1;
  unsigned int v2 = a1 >> 8;
  uint64_t v3 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100002274(&qword_1004040A8);
  uint64_t v7 = swift_allocObject(v6, 34LL, 7LL);
  *(_OWORD *)(v7 + 16)  = xmmword_10033B810;
  *(_BYTE *)(v7 + 32)  = v1;
  *(_BYTE *)(v7 + 33)  = v2;
  uint64_t v15 = v7;
  static String.Encoding.utf8.getter(v7);
  uint64_t v8 = sub_100002274(&qword_100406978);
  uint64_t v9 = sub_1000572E4( (unint64_t *)&qword_100406980,  &qword_100406978,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v10 = String.init<A>(bytes:encoding:)(&v15, v5, v8, v9);
  uint64_t v12 = v11;
  swift_bridgeObjectRelease(v7);
  if (v12) {
    return v10;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1001214FC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0LL;
  }
  uint64_t v5 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v5 = 11LL;
  }
  uint64_t v6 = String.index(before:)(v5 | (v2 << 16), a1, a2);
  return String.subscript.getter(v6, a1, a2);
}

uint64_t CountryCode.data.getter(unsigned int a1)
{
  char v1 = a1;
  unsigned int v2 = a1 >> 8;
  uint64_t v3 = sub_100002274(&qword_1004040A8);
  uint64_t v4 = swift_allocObject(v3, 34LL, 7LL);
  *(_OWORD *)(v4 + 16)  = xmmword_10033B810;
  *(_BYTE *)(v4 + 32)  = v1;
  *(_BYTE *)(v4 + 33)  = v2;
  uint64_t v5 = sub_1000FB08C(v4);
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t CountryCode.description.getter(__int16 a1)
{
  int v1 = a1;
  int v2 = HIBYTE(a1);
  uint64_t v3 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1004041B8 != -1) {
    swift_once(&qword_1004041B8, sub_1001231C8);
  }
  if (static CountryCode.austria == v1 && HIBYTE(static CountryCode.austria) == v2)
  {
    unint64_t v8 = 0x697274737541LL;
    return v8 & 0xFFFFFFFFFFFFLL | 0x61000000000000LL;
  }

  if (qword_1004041C0 != -1) {
    swift_once(&qword_1004041C0, sub_100123284);
  }
  if (qword_1004041C8 != -1) {
    swift_once(&qword_1004041C8, sub_100123340);
  }
  if (qword_1004041D0 != -1) {
    swift_once(&qword_1004041D0, sub_1001233FC);
  }
  if (qword_1004041D8 != -1) {
    swift_once(&qword_1004041D8, sub_1001234B8);
  }
  if (qword_1004041E0 != -1) {
    swift_once(&qword_1004041E0, sub_100123574);
  }
  if (static CountryCode.estonia == v1 && HIBYTE(static CountryCode.estonia) == v2)
  {
    uint64_t v9 = 1869902661LL;
LABEL_34:
    unint64_t v8 = v9 & 0xFFFF0000FFFFFFFFLL | 0x696E00000000LL;
    return v8 & 0xFFFFFFFFFFFFLL | 0x61000000000000LL;
  }

  if (qword_1004041E8 != -1) {
    swift_once(&qword_1004041E8, sub_100123630);
  }
  if (static CountryCode.finland == v1 && HIBYTE(static CountryCode.finland) == v2)
  {
    unsigned int v10 = 1819175238;
    return v10 | 0x646E6100000000LL;
  }

  if (qword_1004041F0 != -1) {
    swift_once(&qword_1004041F0, sub_1001236EC);
  }
  if (qword_1004041F8 != -1) {
    swift_once(&qword_1004041F8, sub_1001237A8);
  }
  if (qword_100404200 != -1) {
    swift_once(&qword_100404200, sub_100123864);
  }
  if (qword_100404208 != -1) {
    swift_once(&qword_100404208, sub_100123920);
  }
  if (qword_100404210 != -1) {
    swift_once(&qword_100404210, sub_1001239DC);
  }
  if (qword_100404218 != -1) {
    swift_once(&qword_100404218, sub_100123A98);
  }
  if (qword_100404220 != -1) {
    swift_once(&qword_100404220, sub_100123B54);
  }
  if (qword_100404228 != -1) {
    swift_once(&qword_100404228, sub_100123C10);
  }
  if (qword_100404230 != -1) {
    swift_once(&qword_100404230, sub_100123CCC);
  }
  if (qword_100404238 != -1) {
    swift_once(&qword_100404238, sub_100123D88);
  }
  if (qword_100404240 != -1) {
    swift_once(&qword_100404240, sub_100123E44);
  }
  if (qword_100404248 != -1) {
    swift_once(&qword_100404248, sub_100123F00);
  }
  if (qword_100404250 != -1) {
    swift_once(&qword_100404250, sub_100123FBC);
  }
  if (qword_100404258 != -1) {
    swift_once(&qword_100404258, sub_100124078);
  }
  if (qword_100404260 != -1) {
    swift_once(&qword_100404260, sub_100124134);
  }
  if (qword_100404268 != -1) {
    swift_once(&qword_100404268, sub_1001241F0);
  }
  if (qword_100404270 != -1) {
    swift_once(&qword_100404270, sub_1001242AC);
  }
  if (qword_100404278 != -1) {
    swift_once(&qword_100404278, sub_100124368);
  }
  if (qword_100404280 != -1) {
    swift_once(&qword_100404280, sub_100124424);
  }
  if (static CountryCode.iceland == v1 && HIBYTE(static CountryCode.iceland) == v2)
  {
    unsigned int v10 = 1818583881;
    return v10 | 0x646E6100000000LL;
  }

  if (qword_100404288 != -1) {
    swift_once(&qword_100404288, sub_1001244E0);
  }
  if (qword_100404290 != -1) {
    swift_once(&qword_100404290, sub_10012459C);
  }
  if (qword_100404298 != -1) {
    swift_once(&qword_100404298, sub_100124658);
  }
  if (qword_1004042A0 != -1) {
    swift_once(&qword_1004042A0, sub_100124714);
  }
  if (qword_1004042A8 != -1) {
    swift_once(&qword_1004042A8, sub_1001247D0);
  }
  if (qword_1004042B0 != -1) {
    swift_once(&qword_1004042B0, sub_10012488C);
  }
  if (static CountryCode.romania == v1 && HIBYTE(static CountryCode.romania) == v2)
  {
    uint64_t v9 = 1634561874LL;
    goto LABEL_34;
  }

  if (qword_1004042B8 != -1) {
    swift_once(&qword_1004042B8, sub_100124948);
  }
  if (qword_1004042C0 != -1) {
    swift_once(&qword_1004042C0, sub_100124A04);
  }
  if (static CountryCode.croatia == v1 && HIBYTE(static CountryCode.croatia) == v2)
  {
    unint64_t v8 = 0x6974616F7243LL;
    return v8 & 0xFFFFFFFFFFFFLL | 0x61000000000000LL;
  }

  if (qword_1004042C8 != -1) {
    swift_once(&qword_1004042C8, sub_100124AC0);
  }
  if (qword_1004042D0 != -1) {
    swift_once(&qword_1004042D0, sub_100124B7C);
  }
  if (qword_1004042D8 != -1) {
    swift_once(&qword_1004042D8, sub_100124C38);
  }
  uint64_t v11 = sub_100002274(&qword_1004040A8);
  uint64_t v12 = swift_allocObject(v11, 34LL, 7LL);
  *(_OWORD *)(v12 + 16)  = xmmword_10033B810;
  *(_BYTE *)(v12 + 32)  = v1;
  *(_BYTE *)(v12 + 33)  = v2;
  uint64_t v18 = v12;
  static String.Encoding.utf8.getter(v12);
  uint64_t v13 = sub_100002274(&qword_100406978);
  uint64_t v14 = sub_1000572E4( (unint64_t *)&qword_100406980,  &qword_100406978,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v17 = String.init<A>(bytes:encoding:)(&v18, v5, v13, v14);
  uint64_t v16 = v15;
  swift_bridgeObjectRelease(v12);
  if (v16) {
    return v17;
  }
  else {
    return 0LL;
  }
}

__int16 *CountryCode.austria.unsafeMutableAddressor()
{
  if (qword_1004041B8 != -1) {
    swift_once(&qword_1004041B8, sub_1001231C8);
  }
  return &static CountryCode.austria;
}

__int16 *CountryCode.belgium.unsafeMutableAddressor()
{
  if (qword_1004041C0 != -1) {
    swift_once(&qword_1004041C0, sub_100123284);
  }
  return &static CountryCode.belgium;
}

__int16 *CountryCode.czechRepublic.unsafeMutableAddressor()
{
  if (qword_1004041C8 != -1) {
    swift_once(&qword_1004041C8, sub_100123340);
  }
  return &static CountryCode.czechRepublic;
}

__int16 *CountryCode.cyprus.unsafeMutableAddressor()
{
  if (qword_1004041D0 != -1) {
    swift_once(&qword_1004041D0, sub_1001233FC);
  }
  return &static CountryCode.cyprus;
}

__int16 *CountryCode.denmark.unsafeMutableAddressor()
{
  if (qword_1004041D8 != -1) {
    swift_once(&qword_1004041D8, sub_1001234B8);
  }
  return &static CountryCode.denmark;
}

__int16 *CountryCode.estonia.unsafeMutableAddressor()
{
  if (qword_1004041E0 != -1) {
    swift_once(&qword_1004041E0, sub_100123574);
  }
  return &static CountryCode.estonia;
}

__int16 *CountryCode.finland.unsafeMutableAddressor()
{
  if (qword_1004041E8 != -1) {
    swift_once(&qword_1004041E8, sub_100123630);
  }
  return &static CountryCode.finland;
}

__int16 *CountryCode.france.unsafeMutableAddressor()
{
  if (qword_1004041F0 != -1) {
    swift_once(&qword_1004041F0, sub_1001236EC);
  }
  return &static CountryCode.france;
}

__int16 *CountryCode.germany.unsafeMutableAddressor()
{
  if (qword_1004041F8 != -1) {
    swift_once(&qword_1004041F8, sub_1001237A8);
  }
  return &static CountryCode.germany;
}

__int16 *CountryCode.greece.unsafeMutableAddressor()
{
  if (qword_100404200 != -1) {
    swift_once(&qword_100404200, sub_100123864);
  }
  return &static CountryCode.greece;
}

__int16 *CountryCode.hungary.unsafeMutableAddressor()
{
  if (qword_100404208 != -1) {
    swift_once(&qword_100404208, sub_100123920);
  }
  return &static CountryCode.hungary;
}

__int16 *CountryCode.italy.unsafeMutableAddressor()
{
  if (qword_100404210 != -1) {
    swift_once(&qword_100404210, sub_1001239DC);
  }
  return &static CountryCode.italy;
}

__int16 *CountryCode.ireland.unsafeMutableAddressor()
{
  if (qword_100404218 != -1) {
    swift_once(&qword_100404218, sub_100123A98);
  }
  return &static CountryCode.ireland;
}

__int16 *CountryCode.latvia.unsafeMutableAddressor()
{
  if (qword_100404220 != -1) {
    swift_once(&qword_100404220, sub_100123B54);
  }
  return &static CountryCode.latvia;
}

__int16 *CountryCode.lithuania.unsafeMutableAddressor()
{
  if (qword_100404228 != -1) {
    swift_once(&qword_100404228, sub_100123C10);
  }
  return &static CountryCode.lithuania;
}

__int16 *CountryCode.luxembourg.unsafeMutableAddressor()
{
  if (qword_100404230 != -1) {
    swift_once(&qword_100404230, sub_100123CCC);
  }
  return &static CountryCode.luxembourg;
}

__int16 *CountryCode.malta.unsafeMutableAddressor()
{
  if (qword_100404238 != -1) {
    swift_once(&qword_100404238, sub_100123D88);
  }
  return &static CountryCode.malta;
}

__int16 *CountryCode.netherlands.unsafeMutableAddressor()
{
  if (qword_100404240 != -1) {
    swift_once(&qword_100404240, sub_100123E44);
  }
  return &static CountryCode.netherlands;
}

__int16 *CountryCode.poland.unsafeMutableAddressor()
{
  if (qword_100404248 != -1) {
    swift_once(&qword_100404248, sub_100123F00);
  }
  return &static CountryCode.poland;
}

__int16 *CountryCode.portugal.unsafeMutableAddressor()
{
  if (qword_100404250 != -1) {
    swift_once(&qword_100404250, sub_100123FBC);
  }
  return &static CountryCode.portugal;
}

__int16 *CountryCode.slovakRepublic.unsafeMutableAddressor()
{
  if (qword_100404258 != -1) {
    swift_once(&qword_100404258, sub_100124078);
  }
  return &static CountryCode.slovakRepublic;
}

__int16 *CountryCode.slovenia.unsafeMutableAddressor()
{
  if (qword_100404260 != -1) {
    swift_once(&qword_100404260, sub_100124134);
  }
  return &static CountryCode.slovenia;
}

__int16 *CountryCode.spain.unsafeMutableAddressor()
{
  if (qword_100404268 != -1) {
    swift_once(&qword_100404268, sub_1001241F0);
  }
  return &static CountryCode.spain;
}

__int16 *CountryCode.sweden.unsafeMutableAddressor()
{
  if (qword_100404270 != -1) {
    swift_once(&qword_100404270, sub_1001242AC);
  }
  return &static CountryCode.sweden;
}

__int16 *CountryCode.uk.unsafeMutableAddressor()
{
  if (qword_100404278 != -1) {
    swift_once(&qword_100404278, sub_100124368);
  }
  return &static CountryCode.uk;
}

__int16 *CountryCode.iceland.unsafeMutableAddressor()
{
  if (qword_100404280 != -1) {
    swift_once(&qword_100404280, sub_100124424);
  }
  return &static CountryCode.iceland;
}

__int16 *CountryCode.liechthenstein.unsafeMutableAddressor()
{
  if (qword_100404288 != -1) {
    swift_once(&qword_100404288, sub_1001244E0);
  }
  return &static CountryCode.liechthenstein;
}

__int16 *CountryCode.norway.unsafeMutableAddressor()
{
  if (qword_100404290 != -1) {
    swift_once(&qword_100404290, sub_10012459C);
  }
  return &static CountryCode.norway;
}

__int16 *CountryCode.switzerland.unsafeMutableAddressor()
{
  if (qword_100404298 != -1) {
    swift_once(&qword_100404298, sub_100124658);
  }
  return &static CountryCode.switzerland;
}

__int16 *CountryCode.bulgaria.unsafeMutableAddressor()
{
  if (qword_1004042A0 != -1) {
    swift_once(&qword_1004042A0, sub_100124714);
  }
  return &static CountryCode.bulgaria;
}

__int16 *CountryCode.turkey.unsafeMutableAddressor()
{
  if (qword_1004042A8 != -1) {
    swift_once(&qword_1004042A8, sub_1001247D0);
  }
  return &static CountryCode.turkey;
}

__int16 *CountryCode.romania.unsafeMutableAddressor()
{
  if (qword_1004042B0 != -1) {
    swift_once(&qword_1004042B0, sub_10012488C);
  }
  return &static CountryCode.romania;
}

__int16 *CountryCode.russia.unsafeMutableAddressor()
{
  if (qword_1004042B8 != -1) {
    swift_once(&qword_1004042B8, sub_100124948);
  }
  return &static CountryCode.russia;
}

__int16 *CountryCode.croatia.unsafeMutableAddressor()
{
  if (qword_1004042C0 != -1) {
    swift_once(&qword_1004042C0, sub_100124A04);
  }
  return &static CountryCode.croatia;
}

__int16 *CountryCode.serbia.unsafeMutableAddressor()
{
  if (qword_1004042C8 != -1) {
    swift_once(&qword_1004042C8, sub_100124AC0);
  }
  return &static CountryCode.serbia;
}

__int16 *CountryCode.southAfrica.unsafeMutableAddressor()
{
  if (qword_1004042D0 != -1) {
    swift_once(&qword_1004042D0, sub_100124B7C);
  }
  return &static CountryCode.southAfrica;
}

char *CountryCode.usa.unsafeMutableAddressor()
{
  if (qword_1004042D8 != -1) {
    swift_once(&qword_1004042D8, sub_100124C38);
  }
  return &static CountryCode.usa;
}

uint64_t CountryCode.customMirror.getter(__int16 a1)
{
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int16 v14 = a1;
  uint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t v9 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for Mirror.AncestorRepresentation.generated(_:),  v2);
  uint64_t v10 = sub_100002274(&qword_100405DC0);
  uint64_t v11 = sub_1000572E4( (unint64_t *)&qword_10040C630,  &qword_100405DC0,  (uint64_t)&protocol conformance descriptor for [A]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)( &v14,  &v13,  v8,  v5,  &type metadata for CountryCode,  v10,  v11);
}

uint64_t sub_100122F4C()
{
  uint64_t result = String.count.getter(23128LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 23128LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(23128LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.unknown)  = v4;
          HIBYTE(static CountryCode.unknown)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

CoreP2P::CountryCode __swiftcall CountryCode.init(stringLiteral:)(Swift::String stringLiteral)
{
  object  = stringLiteral._object;
  uint64_t countAndFlagsBits = stringLiteral._countAndFlagsBits;
  uint64_t v3 = String.count.getter(stringLiteral._countAndFlagsBits, stringLiteral._object);
  if (v3 != 2)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return (CoreP2P::CountryCode)v3;
  }

  swift_bridgeObjectRetain(object);
  uint64_t v4 = sub_1000F01B8(countAndFlagsBits, (unint64_t)object);
  uint64_t v6 = v5;
  LOWORD(v3)  = swift_bridgeObjectRelease(object);
  if (!v6) {
    goto LABEL_8;
  }
  __int16 v7 = Character.asciiValue.getter(v4);
  LOWORD(v3)  = swift_bridgeObjectRelease(v6);
  if ((v7 & 0x100) != 0) {
    goto LABEL_8;
  }
  uint64_t v8 = sub_1001214FC(countAndFlagsBits, (unint64_t)object);
  uint64_t v10 = v9;
  LOWORD(v3)  = swift_bridgeObjectRelease(object);
  if (!v10) {
    goto LABEL_8;
  }
  __int16 v11 = Character.asciiValue.getter(v8);
  LOWORD(v3)  = swift_bridgeObjectRelease(v10);
  if ((v11 & 0x100) != 0) {
    goto LABEL_8;
  }
  LOWORD(v3)  = v7 | (unsigned __int16)(v11 << 8);
  return (CoreP2P::CountryCode)v3;
}

uint64_t static CountryCode.unknown.getter()
{
  return sub_100124CF4( &qword_1004041A8,  (unsigned __int8 *)&static CountryCode.unknown,  (unsigned __int8 *)&static CountryCode.unknown + 1);
}

uint64_t sub_1001230CC()
{
  uint64_t result = String.count.getter(13144LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 13144LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(13144LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.unknownETSI)  = v4;
          HIBYTE(static CountryCode.unknownETSI)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

__int16 *CountryCode.unknownETSI.unsafeMutableAddressor()
{
  if (qword_1004041B0 != -1) {
    swift_once(&qword_1004041B0, sub_1001230CC);
  }
  return &static CountryCode.unknownETSI;
}

uint64_t static CountryCode.unknownETSI.getter()
{
  return sub_100124CF4( &qword_1004041B0,  (unsigned __int8 *)&static CountryCode.unknownETSI,  (unsigned __int8 *)&static CountryCode.unknownETSI + 1);
}

uint64_t sub_1001231C8()
{
  uint64_t result = String.count.getter(21569LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 21569LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(21569LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.austria)  = v4;
          HIBYTE(static CountryCode.austria)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.austria.getter()
{
  return sub_100124CF4( &qword_1004041B8,  (unsigned __int8 *)&static CountryCode.austria,  (unsigned __int8 *)&static CountryCode.austria + 1);
}

uint64_t sub_100123284()
{
  uint64_t result = String.count.getter(17730LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 17730LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(17730LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.belgium)  = v4;
          HIBYTE(static CountryCode.belgium)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.belgium.getter()
{
  return sub_100124CF4( &qword_1004041C0,  (unsigned __int8 *)&static CountryCode.belgium,  (unsigned __int8 *)&static CountryCode.belgium + 1);
}

uint64_t sub_100123340()
{
  uint64_t result = String.count.getter(23107LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 23107LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(23107LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.czechRepublic)  = v4;
          HIBYTE(static CountryCode.czechRepublic)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.czechRepublic.getter()
{
  return sub_100124CF4( &qword_1004041C8,  (unsigned __int8 *)&static CountryCode.czechRepublic,  (unsigned __int8 *)&static CountryCode.czechRepublic + 1);
}

uint64_t sub_1001233FC()
{
  uint64_t result = String.count.getter(22851LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 22851LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(22851LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.cyprus)  = v4;
          HIBYTE(static CountryCode.cyprus)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.cyprus.getter()
{
  return sub_100124CF4( &qword_1004041D0,  (unsigned __int8 *)&static CountryCode.cyprus,  (unsigned __int8 *)&static CountryCode.cyprus + 1);
}

uint64_t sub_1001234B8()
{
  uint64_t result = String.count.getter(19268LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 19268LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(19268LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.denmark)  = v4;
          HIBYTE(static CountryCode.denmark)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.denmark.getter()
{
  return sub_100124CF4( &qword_1004041D8,  (unsigned __int8 *)&static CountryCode.denmark,  (unsigned __int8 *)&static CountryCode.denmark + 1);
}

uint64_t sub_100123574()
{
  uint64_t result = String.count.getter(17733LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 17733LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(17733LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.estonia)  = v4;
          HIBYTE(static CountryCode.estonia)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.estonia.getter()
{
  return sub_100124CF4( &qword_1004041E0,  (unsigned __int8 *)&static CountryCode.estonia,  (unsigned __int8 *)&static CountryCode.estonia + 1);
}

uint64_t sub_100123630()
{
  uint64_t result = String.count.getter(18758LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 18758LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(18758LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.finland)  = v4;
          HIBYTE(static CountryCode.finland)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.finland.getter()
{
  return sub_100124CF4( &qword_1004041E8,  (unsigned __int8 *)&static CountryCode.finland,  (unsigned __int8 *)&static CountryCode.finland + 1);
}

uint64_t sub_1001236EC()
{
  uint64_t result = String.count.getter(21062LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 21062LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(21062LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.france)  = v4;
          HIBYTE(static CountryCode.france)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.france.getter()
{
  return sub_100124CF4( &qword_1004041F0,  (unsigned __int8 *)&static CountryCode.france,  (unsigned __int8 *)&static CountryCode.france + 1);
}

uint64_t sub_1001237A8()
{
  uint64_t result = String.count.getter(17732LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 17732LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(17732LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.germany)  = v4;
          HIBYTE(static CountryCode.germany)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.germany.getter()
{
  return sub_100124CF4( &qword_1004041F8,  (unsigned __int8 *)&static CountryCode.germany,  (unsigned __int8 *)&static CountryCode.germany + 1);
}

uint64_t sub_100123864()
{
  uint64_t result = String.count.getter(21063LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 21063LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(21063LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.greece)  = v4;
          HIBYTE(static CountryCode.greece)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.greece.getter()
{
  return sub_100124CF4( &qword_100404200,  (unsigned __int8 *)&static CountryCode.greece,  (unsigned __int8 *)&static CountryCode.greece + 1);
}

uint64_t sub_100123920()
{
  uint64_t result = String.count.getter(21832LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 21832LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(21832LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.hungary)  = v4;
          HIBYTE(static CountryCode.hungary)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.hungary.getter()
{
  return sub_100124CF4( &qword_100404208,  (unsigned __int8 *)&static CountryCode.hungary,  (unsigned __int8 *)&static CountryCode.hungary + 1);
}

uint64_t sub_1001239DC()
{
  uint64_t result = String.count.getter(21577LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 21577LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(21577LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.italy)  = v4;
          HIBYTE(static CountryCode.italy)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.italy.getter()
{
  return sub_100124CF4( &qword_100404210,  (unsigned __int8 *)&static CountryCode.italy,  (unsigned __int8 *)&static CountryCode.italy + 1);
}

uint64_t sub_100123A98()
{
  uint64_t result = String.count.getter(17737LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 17737LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(17737LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.ireland)  = v4;
          HIBYTE(static CountryCode.ireland)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.ireland.getter()
{
  return sub_100124CF4( &qword_100404218,  (unsigned __int8 *)&static CountryCode.ireland,  (unsigned __int8 *)&static CountryCode.ireland + 1);
}

uint64_t sub_100123B54()
{
  uint64_t result = String.count.getter(22092LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 22092LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(22092LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.latvia)  = v4;
          HIBYTE(static CountryCode.latvia)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.latvia.getter()
{
  return sub_100124CF4( &qword_100404220,  (unsigned __int8 *)&static CountryCode.latvia,  (unsigned __int8 *)&static CountryCode.latvia + 1);
}

uint64_t sub_100123C10()
{
  uint64_t result = String.count.getter(21580LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 21580LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(21580LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.lithuania)  = v4;
          HIBYTE(static CountryCode.lithuania)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.lithuania.getter()
{
  return sub_100124CF4( &qword_100404228,  (unsigned __int8 *)&static CountryCode.lithuania,  (unsigned __int8 *)&static CountryCode.lithuania + 1);
}

uint64_t sub_100123CCC()
{
  uint64_t result = String.count.getter(21836LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 21836LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(21836LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.luxembourg)  = v4;
          HIBYTE(static CountryCode.luxembourg)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.luxembourg.getter()
{
  return sub_100124CF4( &qword_100404230,  (unsigned __int8 *)&static CountryCode.luxembourg,  (unsigned __int8 *)&static CountryCode.luxembourg + 1);
}

uint64_t sub_100123D88()
{
  uint64_t result = String.count.getter(21581LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 21581LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(21581LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.malta)  = v4;
          HIBYTE(static CountryCode.malta)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.malta.getter()
{
  return sub_100124CF4( &qword_100404238,  (unsigned __int8 *)&static CountryCode.malta,  (unsigned __int8 *)&static CountryCode.malta + 1);
}

uint64_t sub_100123E44()
{
  uint64_t result = String.count.getter(19534LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 19534LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(19534LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.netherlands)  = v4;
          HIBYTE(static CountryCode.netherlands)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.netherlands.getter()
{
  return sub_100124CF4( &qword_100404240,  (unsigned __int8 *)&static CountryCode.netherlands,  (unsigned __int8 *)&static CountryCode.netherlands + 1);
}

uint64_t sub_100123F00()
{
  uint64_t result = String.count.getter(19536LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 19536LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(19536LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.poland)  = v4;
          HIBYTE(static CountryCode.poland)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.poland.getter()
{
  return sub_100124CF4( &qword_100404248,  (unsigned __int8 *)&static CountryCode.poland,  (unsigned __int8 *)&static CountryCode.poland + 1);
}

uint64_t sub_100123FBC()
{
  uint64_t result = String.count.getter(21584LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 21584LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(21584LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.portugal)  = v4;
          HIBYTE(static CountryCode.portugal)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.portugal.getter()
{
  return sub_100124CF4( &qword_100404250,  (unsigned __int8 *)&static CountryCode.portugal,  (unsigned __int8 *)&static CountryCode.portugal + 1);
}

uint64_t sub_100124078()
{
  uint64_t result = String.count.getter(19283LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 19283LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(19283LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.slovakRepublic)  = v4;
          HIBYTE(static CountryCode.slovakRepublic)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.slovakRepublic.getter()
{
  return sub_100124CF4( &qword_100404258,  (unsigned __int8 *)&static CountryCode.slovakRepublic,  (unsigned __int8 *)&static CountryCode.slovakRepublic + 1);
}

uint64_t sub_100124134()
{
  uint64_t result = String.count.getter(18771LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 18771LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(18771LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.slovenia)  = v4;
          HIBYTE(static CountryCode.slovenia)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.slovenia.getter()
{
  return sub_100124CF4( &qword_100404260,  (unsigned __int8 *)&static CountryCode.slovenia,  (unsigned __int8 *)&static CountryCode.slovenia + 1);
}

uint64_t sub_1001241F0()
{
  uint64_t result = String.count.getter(21317LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 21317LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(21317LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.spain)  = v4;
          HIBYTE(static CountryCode.spain)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.spain.getter()
{
  return sub_100124CF4( &qword_100404268,  (unsigned __int8 *)&static CountryCode.spain,  (unsigned __int8 *)&static CountryCode.spain + 1);
}

uint64_t sub_1001242AC()
{
  uint64_t result = String.count.getter(17747LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 17747LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(17747LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.sweden)  = v4;
          HIBYTE(static CountryCode.sweden)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.sweden.getter()
{
  return sub_100124CF4( &qword_100404270,  (unsigned __int8 *)&static CountryCode.sweden,  (unsigned __int8 *)&static CountryCode.sweden + 1);
}

uint64_t sub_100124368()
{
  uint64_t result = String.count.getter(16967LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 16967LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(16967LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.uk)  = v4;
          HIBYTE(static CountryCode.uk)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.uk.getter()
{
  return sub_100124CF4( &qword_100404278,  (unsigned __int8 *)&static CountryCode.uk,  (unsigned __int8 *)&static CountryCode.uk + 1);
}

uint64_t sub_100124424()
{
  uint64_t result = String.count.getter(21321LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 21321LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(21321LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.iceland)  = v4;
          HIBYTE(static CountryCode.iceland)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.iceland.getter()
{
  return sub_100124CF4( &qword_100404280,  (unsigned __int8 *)&static CountryCode.iceland,  (unsigned __int8 *)&static CountryCode.iceland + 1);
}

uint64_t sub_1001244E0()
{
  uint64_t result = String.count.getter(18764LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 18764LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(18764LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.liechthenstein)  = v4;
          HIBYTE(static CountryCode.liechthenstein)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.liechthenstein.getter()
{
  return sub_100124CF4( &qword_100404288,  (unsigned __int8 *)&static CountryCode.liechthenstein,  (unsigned __int8 *)&static CountryCode.liechthenstein + 1);
}

uint64_t sub_10012459C()
{
  uint64_t result = String.count.getter(20302LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 20302LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(20302LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.norway)  = v4;
          HIBYTE(static CountryCode.norway)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.norway.getter()
{
  return sub_100124CF4( &qword_100404290,  (unsigned __int8 *)&static CountryCode.norway,  (unsigned __int8 *)&static CountryCode.norway + 1);
}

uint64_t sub_100124658()
{
  uint64_t result = String.count.getter(18499LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 18499LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(18499LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.switzerland)  = v4;
          HIBYTE(static CountryCode.switzerland)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.switzerland.getter()
{
  return sub_100124CF4( &qword_100404298,  (unsigned __int8 *)&static CountryCode.switzerland,  (unsigned __int8 *)&static CountryCode.switzerland + 1);
}

uint64_t sub_100124714()
{
  uint64_t result = String.count.getter(18242LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 18242LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(18242LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.bulgaria)  = v4;
          HIBYTE(static CountryCode.bulgaria)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.bulgaria.getter()
{
  return sub_100124CF4( &qword_1004042A0,  (unsigned __int8 *)&static CountryCode.bulgaria,  (unsigned __int8 *)&static CountryCode.bulgaria + 1);
}

uint64_t sub_1001247D0()
{
  uint64_t result = String.count.getter(21076LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 21076LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(21076LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.turkey)  = v4;
          HIBYTE(static CountryCode.turkey)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.turkey.getter()
{
  return sub_100124CF4( &qword_1004042A8,  (unsigned __int8 *)&static CountryCode.turkey,  (unsigned __int8 *)&static CountryCode.turkey + 1);
}

uint64_t sub_10012488C()
{
  uint64_t result = String.count.getter(20306LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 20306LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(20306LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.romania)  = v4;
          HIBYTE(static CountryCode.romania)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.romania.getter()
{
  return sub_100124CF4( &qword_1004042B0,  (unsigned __int8 *)&static CountryCode.romania,  (unsigned __int8 *)&static CountryCode.romania + 1);
}

uint64_t sub_100124948()
{
  uint64_t result = String.count.getter(21842LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 21842LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(21842LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.russia)  = v4;
          HIBYTE(static CountryCode.russia)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.russia.getter()
{
  return sub_100124CF4( &qword_1004042B8,  (unsigned __int8 *)&static CountryCode.russia,  (unsigned __int8 *)&static CountryCode.russia + 1);
}

uint64_t sub_100124A04()
{
  uint64_t result = String.count.getter(21064LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 21064LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(21064LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.croatia)  = v4;
          HIBYTE(static CountryCode.croatia)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.croatia.getter()
{
  return sub_100124CF4( &qword_1004042C0,  (unsigned __int8 *)&static CountryCode.croatia,  (unsigned __int8 *)&static CountryCode.croatia + 1);
}

uint64_t sub_100124AC0()
{
  uint64_t result = String.count.getter(21330LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 21330LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(21330LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.serbia)  = v4;
          HIBYTE(static CountryCode.serbia)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.serbia.getter()
{
  return sub_100124CF4( &qword_1004042C8,  (unsigned __int8 *)&static CountryCode.serbia,  (unsigned __int8 *)&static CountryCode.serbia + 1);
}

uint64_t sub_100124B7C()
{
  uint64_t result = String.count.getter(16730LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 16730LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(16730LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.southAfrica)  = v4;
          HIBYTE(static CountryCode.southAfrica)  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.southAfrica.getter()
{
  return sub_100124CF4( &qword_1004042D0,  (unsigned __int8 *)&static CountryCode.southAfrica,  (unsigned __int8 *)&static CountryCode.southAfrica + 1);
}

uint64_t sub_100124C38()
{
  uint64_t result = String.count.getter(21333LL, 0xE200000000000000LL);
  if (result == 2)
  {
    uint64_t v1 = String.subscript.getter(15LL, 21333LL, 0xE200000000000000LL);
    uint64_t v3 = v2;
    __int16 v4 = Character.asciiValue.getter(v1);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      uint64_t result = sub_1001214FC(21333LL, 0xE200000000000000LL);
      if (v5)
      {
        uint64_t v6 = v5;
        __int16 v7 = Character.asciiValue.getter(result);
        uint64_t result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          static CountryCode.usa  = v4;
          byte_100410825  = v7;
          return result;
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static CountryCode.usa.getter()
{
  return sub_100124CF4(&qword_1004042D8, (unsigned __int8 *)&static CountryCode.usa, (unsigned __int8 *)&byte_100410825);
}

uint64_t sub_100124CF4(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  return *a2 | (*a3 << 8);
}

uint64_t CountryCode.isETSI.getter(__int16 a1)
{
  if (qword_1004042E0 != -1) {
    swift_once(&qword_1004042E0, sub_100124DCC);
  }
  uint64_t v2 = *((void *)off_100408990 + 2);
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = v2 - 1;
  __int16 v4 = (unsigned __int8 *)off_100408990 + 33;
  do
  {
    uint64_t v5 = v3;
    BOOL v6 = *(v4 - 1) == a1 && *v4 == HIBYTE(a1);
    uint64_t result = v6;
    if (v6) {
      break;
    }
    --v3;
    v4 += 2;
  }

  while (v5);
  return result;
}

uint64_t sub_100124DCC()
{
  uint64_t v0 = sub_100002274(&qword_1004089E0);
  uint64_t result = swift_allocObject(v0, 106LL, 7LL);
  uint64_t v2 = result;
  *(_OWORD *)(result + 16)  = xmmword_100349430;
  if (qword_1004041B0 != -1) {
    uint64_t result = swift_once(&qword_1004041B0, sub_1001230CC);
  }
  *(_WORD *)(v2 + 32)  = static CountryCode.unknownETSI;
  if (qword_1004041B8 != -1) {
    uint64_t result = swift_once(&qword_1004041B8, sub_1001231C8);
  }
  *(_WORD *)(v2 + 34)  = static CountryCode.austria;
  if (qword_1004041C0 != -1) {
    uint64_t result = swift_once(&qword_1004041C0, sub_100123284);
  }
  *(_WORD *)(v2 + 36)  = static CountryCode.belgium;
  if (qword_1004041C8 != -1) {
    uint64_t result = swift_once(&qword_1004041C8, sub_100123340);
  }
  *(_WORD *)(v2 + 38)  = static CountryCode.czechRepublic;
  if (qword_1004041D0 != -1) {
    uint64_t result = swift_once(&qword_1004041D0, sub_1001233FC);
  }
  *(_WORD *)(v2 + 40)  = static CountryCode.cyprus;
  if (qword_1004041D8 != -1) {
    uint64_t result = swift_once(&qword_1004041D8, sub_1001234B8);
  }
  *(_WORD *)(v2 + 42)  = static CountryCode.denmark;
  if (qword_1004041E0 != -1) {
    uint64_t result = swift_once(&qword_1004041E0, sub_100123574);
  }
  *(_WORD *)(v2 + 44)  = static CountryCode.estonia;
  if (qword_1004041E8 != -1) {
    uint64_t result = swift_once(&qword_1004041E8, sub_100123630);
  }
  *(_WORD *)(v2 + 46)  = static CountryCode.finland;
  if (qword_1004041F0 != -1) {
    uint64_t result = swift_once(&qword_1004041F0, sub_1001236EC);
  }
  *(_WORD *)(v2 + 48)  = static CountryCode.france;
  if (qword_1004041F8 != -1) {
    uint64_t result = swift_once(&qword_1004041F8, sub_1001237A8);
  }
  *(_WORD *)(v2 + 50)  = static CountryCode.germany;
  if (qword_100404200 != -1) {
    uint64_t result = swift_once(&qword_100404200, sub_100123864);
  }
  *(_WORD *)(v2 + 52)  = static CountryCode.greece;
  if (qword_100404208 != -1) {
    uint64_t result = swift_once(&qword_100404208, sub_100123920);
  }
  *(_WORD *)(v2 + 54)  = static CountryCode.hungary;
  if (qword_100404210 != -1) {
    uint64_t result = swift_once(&qword_100404210, sub_1001239DC);
  }
  *(_WORD *)(v2 + 56)  = static CountryCode.italy;
  if (qword_100404218 != -1) {
    uint64_t result = swift_once(&qword_100404218, sub_100123A98);
  }
  *(_WORD *)(v2 + 58)  = static CountryCode.ireland;
  if (qword_100404220 != -1) {
    uint64_t result = swift_once(&qword_100404220, sub_100123B54);
  }
  *(_WORD *)(v2 + 60)  = static CountryCode.latvia;
  if (qword_100404228 != -1) {
    uint64_t result = swift_once(&qword_100404228, sub_100123C10);
  }
  *(_WORD *)(v2 + 62)  = static CountryCode.lithuania;
  if (qword_100404230 != -1) {
    uint64_t result = swift_once(&qword_100404230, sub_100123CCC);
  }
  *(_WORD *)(v2 + 64)  = static CountryCode.luxembourg;
  if (qword_100404238 != -1) {
    uint64_t result = swift_once(&qword_100404238, sub_100123D88);
  }
  *(_WORD *)(v2 + 66)  = static CountryCode.malta;
  if (qword_100404240 != -1) {
    uint64_t result = swift_once(&qword_100404240, sub_100123E44);
  }
  *(_WORD *)(v2 + 68)  = static CountryCode.netherlands;
  if (qword_100404248 != -1) {
    uint64_t result = swift_once(&qword_100404248, sub_100123F00);
  }
  *(_WORD *)(v2 + 70)  = static CountryCode.poland;
  if (qword_100404250 != -1) {
    uint64_t result = swift_once(&qword_100404250, sub_100123FBC);
  }
  *(_WORD *)(v2 + 72)  = static CountryCode.portugal;
  if (qword_100404258 != -1) {
    uint64_t result = swift_once(&qword_100404258, sub_100124078);
  }
  *(_WORD *)(v2 + 74)  = static CountryCode.slovakRepublic;
  if (qword_100404260 != -1) {
    uint64_t result = swift_once(&qword_100404260, sub_100124134);
  }
  *(_WORD *)(v2 + 76)  = static CountryCode.slovenia;
  if (qword_100404268 != -1) {
    uint64_t result = swift_once(&qword_100404268, sub_1001241F0);
  }
  *(_WORD *)(v2 + 78)  = static CountryCode.spain;
  if (qword_100404270 != -1) {
    uint64_t result = swift_once(&qword_100404270, sub_1001242AC);
  }
  *(_WORD *)(v2 + 80)  = static CountryCode.sweden;
  if (qword_100404278 != -1) {
    uint64_t result = swift_once(&qword_100404278, sub_100124368);
  }
  *(_WORD *)(v2 + 82)  = static CountryCode.uk;
  if (qword_100404280 != -1) {
    uint64_t result = swift_once(&qword_100404280, sub_100124424);
  }
  *(_WORD *)(v2 + 84)  = static CountryCode.iceland;
  if (qword_100404288 != -1) {
    uint64_t result = swift_once(&qword_100404288, sub_1001244E0);
  }
  *(_WORD *)(v2 + 86)  = static CountryCode.liechthenstein;
  if (qword_100404290 != -1) {
    uint64_t result = swift_once(&qword_100404290, sub_10012459C);
  }
  *(_WORD *)(v2 + 88)  = static CountryCode.norway;
  if (qword_100404298 != -1) {
    uint64_t result = swift_once(&qword_100404298, sub_100124658);
  }
  *(_WORD *)(v2 + 90)  = static CountryCode.switzerland;
  if (qword_1004042A0 != -1) {
    uint64_t result = swift_once(&qword_1004042A0, sub_100124714);
  }
  *(_WORD *)(v2 + 92)  = static CountryCode.bulgaria;
  if (qword_1004042A8 != -1) {
    uint64_t result = swift_once(&qword_1004042A8, sub_1001247D0);
  }
  *(_WORD *)(v2 + 94)  = static CountryCode.turkey;
  if (qword_1004042B0 != -1) {
    uint64_t result = swift_once(&qword_1004042B0, sub_10012488C);
  }
  *(_WORD *)(v2 + 96)  = static CountryCode.romania;
  if (qword_1004042B8 != -1) {
    uint64_t result = swift_once(&qword_1004042B8, sub_100124948);
  }
  *(_WORD *)(v2 + 98)  = static CountryCode.russia;
  if (qword_1004042C0 != -1) {
    uint64_t result = swift_once(&qword_1004042C0, sub_100124A04);
  }
  *(_WORD *)(v2 + 100)  = static CountryCode.croatia;
  if (qword_1004042C8 != -1) {
    uint64_t result = swift_once(&qword_1004042C8, sub_100124AC0);
  }
  *(_WORD *)(v2 + 102)  = static CountryCode.serbia;
  if (qword_1004042D0 != -1) {
    uint64_t result = swift_once(&qword_1004042D0, sub_100124B7C);
  }
  *(_WORD *)(v2 + 104)  = static CountryCode.southAfrica;
  off_100408990  = (_UNKNOWN *)v2;
  return result;
}

uint64_t sub_10012562C()
{
  if (*v0) {
    return 0x7942646E6F636573LL;
  }
  else {
    return 0x7479427473726966LL;
  }
}

uint64_t sub_100125670@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100125F68(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_100125694(uint64_t a1)
{
  unint64_t v2 = sub_100125A80();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001256BC(uint64_t a1)
{
  unint64_t v2 = sub_100125A80();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CountryCode.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_100002274(&qword_100408998);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100021104(a1, v9);
  unint64_t v11 = sub_100125A80();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for CountryCode.CodingKeys,  &type metadata for CountryCode.CodingKeys,  v11,  v9,  v10);
  char v15 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v15, v5);
  if (!v2)
  {
    char v14 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(BYTE1(a2), &v14, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t CountryCode.init(from:)(void *a1)
{
  return sub_100125AC4(a1);
}

uint64_t sub_10012580C@<X0>(void *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t result = sub_100125AC4(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_100125834(void *a1)
{
  return CountryCode.encode(to:)(a1, *v1);
}

uint64_t sub_10012584C()
{
  return CountryCode.description.getter(*v0);
}

uint64_t sub_100125854(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int16 v15 = *v1;
  char v14 = _swiftEmptyArrayStorage;
  uint64_t v10 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))( v6,  enum case for Mirror.AncestorRepresentation.generated(_:),  v3);
  uint64_t v11 = sub_100002274(&qword_100405DC0);
  uint64_t v12 = sub_1000572E4( (unint64_t *)&qword_10040C630,  &qword_100405DC0,  (uint64_t)&protocol conformance descriptor for [A]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(&v15, &v14, v9, v6, a1, v11, v12);
}

uint64_t sub_1001259AC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v3 = a1[1];
  uint64_t result = String.count.getter(*a1, v3);
  if (result == 2)
  {
    swift_bridgeObjectRetain(v3);
    uint64_t v6 = sub_1000F01B8(v4, v3);
    uint64_t v8 = v7;
    uint64_t result = swift_bridgeObjectRelease(v3);
    if (v8)
    {
      __int16 v9 = Character.asciiValue.getter(v6);
      uint64_t result = swift_bridgeObjectRelease(v8);
      if ((v9 & 0x100) == 0)
      {
        uint64_t v10 = sub_1001214FC(v4, v3);
        uint64_t v12 = v11;
        uint64_t result = swift_bridgeObjectRelease(v3);
        if (v12)
        {
          __int16 v13 = Character.asciiValue.getter(v10);
          uint64_t result = swift_bridgeObjectRelease(v12);
          if ((v13 & 0x100) == 0)
          {
            *a2  = v9;
            a2[1]  = v13;
            return result;
          }
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

unint64_t sub_100125A80()
{
  unint64_t result = qword_1004089A0;
  if (!qword_1004089A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003496E8, &type metadata for CountryCode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004089A0);
  }

  return result;
}

uint64_t sub_100125AC4(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_1004089D8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_100125A80();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for CountryCode.CodingKeys,  &type metadata for CountryCode.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    sub_100002AC4(a1);
  }

  else
  {
    char v15 = 0;
    unsigned __int8 v10 = KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
    char v14 = 1;
    int v11 = KeyedDecodingContainer.decode(_:forKey:)(&v14, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100002AC4(a1);
    return v10 | (v11 << 8);
  }

  return v7;
}

unint64_t sub_100125C18()
{
  unint64_t result = qword_1004089A8;
  if (!qword_1004089A8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CountryCode, &type metadata for CountryCode);
    atomic_store(result, (unint64_t *)&qword_1004089A8);
  }

  return result;
}

unint64_t sub_100125C60()
{
  unint64_t result = qword_1004089B0;
  if (!qword_1004089B0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CountryCode, &type metadata for CountryCode);
    atomic_store(result, (unint64_t *)&qword_1004089B0);
  }

  return result;
}

void *sub_100125CA4()
{
  return &protocol witness table for String;
}

unint64_t sub_100125CB4()
{
  unint64_t result = qword_1004089B8;
  if (!qword_1004089B8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CountryCode, &type metadata for CountryCode);
    atomic_store(result, (unint64_t *)&qword_1004089B8);
  }

  return result;
}

void *sub_100125CF8()
{
  return &protocol witness table for String;
}

void *sub_100125D04()
{
  return &protocol witness table for String;
}

uint64_t storeEnumTagSinglePayload for CountryCode(_WORD *a1, int a2, int a3)
{
  else {
    int v3 = 4;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (!a2) {
    return ((uint64_t (*)(void))((char *)sub_100125D88 + 4 * byte_100349445[v4]))();
  }
  *a1  = a2 - 1;
  return ((uint64_t (*)(void))((char *)sub_100125D68 + 4 * byte_100349440[v4]))();
}

uint64_t sub_100125D68(uint64_t result)
{
  *(_BYTE *)(result + 2)  = v1;
  return result;
}

uint64_t sub_100125D88(uint64_t result)
{
  *(_BYTE *)(result + 2)  = 0;
  return result;
}

uint64_t sub_100125D90(uint64_t result)
{
  *(_DWORD *)(result + 2)  = v1;
  return result;
}

uint64_t sub_100125D98(uint64_t result)
{
  *(_WORD *)(result + 2)  = v1;
  return result;
}

uint64_t sub_100125DA0(uint64_t result)
{
  *(_WORD *)(result + 2)  = 0;
  return result;
}

uint64_t sub_100125DA8(uint64_t result)
{
  *(_DWORD *)(result + 2)  = 0;
  return result;
}

ValueMetadata *type metadata accessor for CountryCode()
{
  return &type metadata for CountryCode;
}

uint64_t storeEnumTagSinglePayload for CountryCode.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100125E10 + 4 * byte_10034944F[v4]))();
  }
  *a1  = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100125E44 + 4 * byte_10034944A[v4]))();
}

uint64_t sub_100125E44(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100125E4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x100125E54LL);
  }
  return result;
}

uint64_t sub_100125E60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x100125E68LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100125E6C(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100125E74(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for CountryCode.CodingKeys()
{
  return &type metadata for CountryCode.CodingKeys;
}

unint64_t sub_100125E94()
{
  unint64_t result = qword_1004089C0;
  if (!qword_1004089C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003496C0, &type metadata for CountryCode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004089C0);
  }

  return result;
}

unint64_t sub_100125EDC()
{
  unint64_t result = qword_1004089C8;
  if (!qword_1004089C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100349630, &type metadata for CountryCode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004089C8);
  }

  return result;
}

unint64_t sub_100125F24()
{
  unint64_t result = qword_1004089D0;
  if (!qword_1004089D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100349658, &type metadata for CountryCode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004089D0);
  }

  return result;
}

uint64_t sub_100125F68(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x7479427473726966LL && a2 == 0xE900000000000065LL)
  {
    unint64_t v5 = 0xE900000000000065LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7479427473726966LL, 0xE900000000000065LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x7942646E6F636573LL && a2 == 0xEA00000000006574LL)
  {
    swift_bridgeObjectRelease(0xEA00000000006574LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7942646E6F636573LL, 0xEA00000000006574LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_100126070@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(char *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v24 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
  uint64_t v5 = *(void *)(v24 - 8);
  __chkstk_darwin();
  char v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v9 = (char *)&v23 - v8;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v25 = a1 + 64;
  uint64_t v11 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v26 = (unint64_t)(v11 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v15 = 0LL;
  if (!v13) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i  = v16 | (v15 << 6); ; i  = __clz(__rbit64(v19)) + (v15 << 6))
  {
    sub_100057FE8( *(void *)(a1 + 56) + *(void *)(v5 + 72) * i,  (uint64_t)v9,  type metadata accessor for LongTermPairingKeys.PublicIdentity);
    sub_100022628((uint64_t)v9, (uint64_t)v7, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    if ((a2(v7) & 1) != 0)
    {
      swift_release(a1);
      uint64_t v21 = v23;
      sub_100022628((uint64_t)v7, v23, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      uint64_t v22 = 0LL;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v21, v22, 1LL, v24);
    }

    uint64_t result = sub_10005802C((uint64_t)v7, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    if (v13) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v18 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v18 >= v26) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v25 + 8 * v18);
    ++v15;
    if (v19) {
      goto LABEL_20;
    }
    int64_t v15 = v18 + 1;
    if (v18 + 1 >= v26) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v25 + 8 * v15);
    if (v19) {
      goto LABEL_20;
    }
    int64_t v15 = v18 + 2;
    if (v18 + 2 >= v26) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v25 + 8 * v15);
    if (v19) {
      goto LABEL_20;
    }
    int64_t v15 = v18 + 3;
    if (v18 + 3 >= v26) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v25 + 8 * v15);
    if (v19) {
      goto LABEL_20;
    }
    int64_t v20 = v18 + 4;
    if (v20 >= v26)
    {
LABEL_25:
      swift_release(a1);
      uint64_t v22 = 1LL;
      uint64_t v21 = v23;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v21, v22, 1LL, v24);
    }

    unint64_t v19 = *(void *)(v25 + 8 * v20);
    if (!v19)
    {
      while (1)
      {
        int64_t v15 = v20 + 1;
        if (__OFADD__(v20, 1LL)) {
          goto LABEL_28;
        }
        if (v15 >= v26) {
          goto LABEL_25;
        }
        unint64_t v19 = *(void *)(v25 + 8 * v15);
        ++v20;
        if (v19) {
          goto LABEL_20;
        }
      }
    }

    int64_t v15 = v20;
LABEL_20:
    unint64_t v13 = (v19 - 1) & v19;
  }

  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t AppleKeychain.__allocating_init(accessGroup:view:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xED00006E616E2E65LL,  0xD000000000000011LL,  0x8000000100360AA0LL);
  *(_DWORD *)(v9 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_notificationToken)  = -1;
  uint64_t v10 = (void *)(v9 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_tokens);
  *uint64_t v10 = &_swiftEmptySetSingleton;
  v10[1]  = 0LL;
  *(void *)(v9 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors)  = &_swiftEmptyDictionarySingleton;
  uint64_t v11 = (void *)(v9 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
  *uint64_t v11 = a1;
  v11[1]  = a2;
  uint64_t v12 = (void *)(v9 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView);
  *uint64_t v12 = a3;
  v12[1]  = a4;
  return v9;
}

uint64_t sub_1001263E8()
{
  uint64_t v1 = 0LL;
  uint64_t v2 = v0[1];
  uint64_t v3 = v2 + 56;
  do
  {
    if (v2)
    {
      if (*(void *)(v2 + 16))
      {
        uint64_t v5 = static Hasher._hash(seed:_:)(*(void *)(v2 + 40), v1);
        uint64_t v6 = -1LL << *(_BYTE *)(v2 + 32);
        unint64_t v7 = v5 & ~v6;
        if (((*(void *)(v3 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0)
        {
          uint64_t v8 = *(void *)(v2 + 48);
          if (*(void *)(v8 + 8 * v7) == v1) {
            continue;
          }
          uint64_t v9 = ~v6;
          while (1)
          {
            unint64_t v7 = (v7 + 1) & v9;
            if (((*(void *)(v3 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
              break;
            }
            if (*(void *)(v8 + 8 * v7) == v1) {
              goto LABEL_2;
            }
          }
        }
      }
    }

    uint64_t v10 = *v0;
    if (!*(void *)(*v0 + 16LL)) {
      goto LABEL_18;
    }
    uint64_t v11 = static Hasher._hash(seed:_:)(*(void *)(v10 + 40), v1);
    uint64_t v12 = -1LL << *(_BYTE *)(v10 + 32);
    unint64_t v13 = v11 & ~v12;
    if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
      goto LABEL_18;
    }
    uint64_t v14 = *(void *)(v10 + 48);
    if (*(void *)(v14 + 8 * v13) != v1)
    {
      uint64_t v15 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v15;
        if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
          break;
        }
        if (*(void *)(v14 + 8 * v13) == v1) {
          goto LABEL_2;
        }
      }

LABEL_2:
    ;
  }

  while (!__CFADD__(v1++, 1LL));
  return 0LL;
}

uint64_t sub_100126548()
{
  uint64_t v1 = 0LL;
  uint64_t v2 = v0[1];
  uint64_t v3 = v2 + 56;
  if (v2) {
    goto LABEL_2;
  }
LABEL_9:
  while (1)
  {
    uint64_t v9 = *v0;
    if (!*(void *)(*v0 + 16LL)) {
      break;
    }
    uint64_t v10 = static Hasher._hash(seed:bytes:count:)(*(void *)(v9 + 40), v1, 1LL);
    uint64_t v11 = -1LL << *(_BYTE *)(v9 + 32);
    unint64_t v12 = v10 & ~v11;
    if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
      break;
    }
    uint64_t v13 = *(void *)(v9 + 48);
    if (v1 != *(unsigned __int8 *)(v13 + v12))
    {
      uint64_t v14 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v14;
        if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
          goto LABEL_18;
        }
      }
    }

    do
    {
LABEL_15:
      if (v1 == 255)
      {
        LOBYTE(v1)  = 0;
        int v15 = 1;
        return v1 | (v15 << 8);
      }

      ++v1;
      if (!v2) {
        goto LABEL_9;
      }
LABEL_2:
      if (!*(void *)(v2 + 16)) {
        goto LABEL_9;
      }
      uint64_t v4 = static Hasher._hash(seed:bytes:count:)(*(void *)(v2 + 40), v1, 1LL);
      uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
      unint64_t v6 = v4 & ~v5;
      if (((*(void *)(v3 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
        goto LABEL_9;
      }
      uint64_t v7 = *(void *)(v2 + 48);
    }

    while (v1 == *(unsigned __int8 *)(v7 + v6));
    uint64_t v8 = ~v5;
    while (1)
    {
      unint64_t v6 = (v6 + 1) & v8;
      if (((*(void *)(v3 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
        break;
      }
    }
  }

uint64_t sub_1001266B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v38 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
  __chkstk_darwin(v38);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for LongTermPairingKeys(0LL);
  uint64_t v15 = __chkstk_darwin(v14);
  char v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  int64_t v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = v6 + *(int *)(v18 + 20);
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 32);
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t v23 = a2;
  uint64_t v25 = v24;
  uint64_t v41 = a5;
  LOBYTE(a5)  = v22(v21, v23, a3, a4, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v20, a1, a4);
  sub_100057FE8(v6, (uint64_t)v17, type metadata accessor for LongTermPairingKeys);
  if ((a5 & 1) != 0)
  {
    int64_t v26 = &v17[*(int *)(v14 + 20)];
    uint64_t v27 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16LL))(v13, v26, v27);
    uint64_t v28 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0LL) + 20);
    uint64_t v29 = &v26[v28];
    uint64_t v30 = &v13[v28];
    uint64_t v31 = type metadata accessor for SymmetricKey(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16LL))(v30, v29, v31);
    type metadata accessor for LongTermPairingKeys.PrivateIdentity(0LL);
    uint64_t v32 = v38;
    P256.Signing.PrivateKey.publicKey.getter();
    uint64_t v33 = &v13[*(int *)(v32 + 24)];
    *(void *)uint64_t v33 = 0LL;
    *((void *)v33 + 1)  = 0LL;
    uint64_t v34 = &v13[*(int *)(v32 + 28)];
    uint64_t v35 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL))(v34, 1LL, 1LL, v35);
    char v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 40))(v13, v39, v40, 1LL, a4);
    sub_10005802C((uint64_t)v13, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  }

  else
  {
    char v36 = 0;
  }

  sub_10005802C((uint64_t)v17, type metadata accessor for LongTermPairingKeys);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v20, a4);
  return v36 & 1;
}

uint64_t sub_10012691C@<X0>( uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t, uint64_t)@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v103 = a5;
  uint64_t v104 = a3;
  uint64_t v92 = a4;
  uint64_t v102 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
  uint64_t v97 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  uint64_t v96 = (uint64_t)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100002274(&qword_100408AA8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v94 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v84 - v13;
  uint64_t v15 = type metadata accessor for UUID(0LL);
  v100  = *(void **)(v15 - 8);
  __chkstk_darwin(v15);
  unint64_t v101 = (unint64_t)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  v89  = (uint64_t)&v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100002274(&qword_100408AE0);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v84 - v24;
  uint64_t v90 = type metadata accessor for LongTermPairingKeys(0LL);
  uint64_t v98 = *(void *)(v90 - 8);
  __chkstk_darwin(v90);
  uint64_t v27 = (char *)&v84 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xED00006E616E2E65LL,  0xD000000000000011LL,  0x8000000100360AA0LL);
  uint64_t v28 = *(uint64_t (**)(char *, void, uint64_t *))(v103 + 24);
  uint64_t v99 = a2;
  uint64_t v29 = a2;
  uint64_t v91 = a1;
  uint64_t v30 = v92;
  uint64_t v31 = (uint64_t)v25;
  uint64_t v32 = v28(v25, v29, v104);
  sub_1000226B0(v31, (uint64_t)v23, &qword_100408AE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v23, 1LL, v17) == 1)
  {
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v104);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8LL))(v91, v30);
    sub_1000225EC(v31, &qword_100408AE0);
    sub_1000225EC((uint64_t)v23, &qword_100408AE0);
    uint64_t v33 = type metadata accessor for Logger(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v33 - 8) + 8LL))(v27, v33);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v98 + 56))(a6, 1LL, 1LL, v90);
  }

  uint64_t v88 = v31;
  uint64_t v35 = v89;
  sub_100022628((uint64_t)v23, v89, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
  uint64_t v36 = v90;
  sub_100057FE8(v35, (uint64_t)&v27[*(int *)(v90 + 20)], type metadata accessor for LongTermPairingKeys.PrivateIdentity);
  v106[3]  = v30;
  v106[4]  = v103;
  id v37 = sub_10002278C(v106);
  uint64_t v87 = *(void *)(v30 - 8);
  uint64_t v38 = v91;
  (*(void (**)(void *, uint64_t, uint64_t))(v87 + 16))(v37, v91, v30);
  uint64_t v39 = type metadata accessor for LongTermPairingKeys.PairedDevices();
  swift_allocObject(v39, 112LL, 7LL);
  uint64_t v40 = sub_10012B730((uint64_t)v99, (uint64_t)v104, (uint64_t)v106);
  uint64_t v41 = v32;
  uint64_t v42 = v40;
  *(void *)&v27[*(int *)(v36 + 24)]  = v40;
  uint64_t v43 = *(void *)(v41 + 16);
  uint64_t v44 = v30;
  uint64_t v45 = v38;
  uint64_t v46 = v36;
  uint64_t v47 = v98;
  uint64_t v48 = v89;
  uint64_t v49 = v41;
  if (!v43)
  {
LABEL_26:
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v45, v44);
    sub_10005802C(v48, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
    sub_1000225EC(v88, &qword_100408AE0);
    swift_bridgeObjectRelease(v49);
    sub_100057FE8((uint64_t)v27, a6, type metadata accessor for LongTermPairingKeys);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(a6, 0LL, 1LL, v46);
    return sub_10005802C((uint64_t)v27, type metadata accessor for LongTermPairingKeys);
  }

  uint64_t v86 = v27;
  uint64_t v50 = v41 + ((*(unsigned __int8 *)(v97 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80));
  uint64_t v103 = *(void *)(v97 + 72);
  uint64_t v104 = (uint64_t *)(v42 + 16);
  uint64_t v99 = (void (*)(uint64_t, uint64_t, uint64_t))v100[2];
  uint64_t v85 = v41;
  swift_bridgeObjectRetain(v41);
  uint64_t v51 = v101;
  uint64_t v95 = a6;
  uint64_t v93 = v14;
  while (1)
  {
    v99(v51, v50, v15);
    sub_100057FE8(v50, (uint64_t)v14, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    uint64_t v54 = v97;
    __int16 v55 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v97 + 56);
    uint64_t v56 = v102;
    v55(v14, 0LL, 1LL, v102);
    __n128 v57 = swift_beginAccess(v104, v106, 33LL, 0LL);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v54 + 48))(v14, 1LL, v56, v57) == 1)
    {
      swift_retain();
      sub_1000225EC((uint64_t)v14, &qword_100408AA8);
      uint64_t v58 = *(void *)(v42 + 16);
      swift_bridgeObjectRetain(v58);
      unint64_t v59 = sub_10001C578(v51);
      char v61 = v60;
      swift_bridgeObjectRelease(v58);
      if ((v61 & 1) != 0)
      {
        unint64_t v62 = v104;
        isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(*v104);
        uint64x2_t v64 = (void *)*v62;
        v105  = (void *)*v62;
        *unint64_t v62 = 0x8000000000000000LL;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10013D4AC();
          uint64x2_t v64 = v105;
        }

        uint64_t v53 = (void (*)(unint64_t, uint64_t))v100[1];
        v53(v64[6] + v100[9] * v59, v15);
        uint64_t v65 = (uint64_t)v105;
        uint64_t v66 = v15;
        uint64_t v67 = (uint64_t)v94;
        sub_100022628(v105[7] + v59 * v103, (uint64_t)v94, type metadata accessor for LongTermPairingKeys.PublicIdentity);
        sub_10013B454(v59, v65);
        uint64_t v68 = *v62;
        *unint64_t v62 = v65;
        uint64_t v52 = v67;
        uint64_t v15 = v66;
        swift_bridgeObjectRelease(v68);
        v55((char *)v52, 0LL, 1LL, v102);
        uint64_t v14 = v93;
      }

      else
      {
        uint64_t v52 = (uint64_t)v94;
        v55(v94, 1LL, 1LL, v102);
        uint64_t v53 = (void (*)(unint64_t, uint64_t))v100[1];
      }

      uint64_t v51 = v101;
      v53(v101, v15);
      sub_1000225EC(v52, &qword_100408AA8);
      a6  = v95;
      uint64_t v47 = v98;
      goto LABEL_7;
    }

    sub_100022628((uint64_t)v14, v96, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    swift_retain();
    uint64_t v69 = swift_isUniquelyReferenced_nonNull_native(*(void *)(v42 + 16));
    v105  = *(void **)(v42 + 16);
    uint64_t v70 = v105;
    *(void *)(v42 + 16)  = 0x8000000000000000LL;
    unint64_t v72 = sub_10001C578(v51);
    uint64_t v73 = v70[2];
    BOOL v74 = (v71 & 1) == 0;
    uint64_t v75 = v73 + v74;
    if (__OFADD__(v73, v74)) {
      break;
    }
    char v76 = v71;
    if (v70[3] >= v75)
    {
      if ((v69 & 1) != 0)
      {
        uint64_t v79 = v105;
        if ((v71 & 1) == 0) {
          goto LABEL_22;
        }
      }

      else
      {
        sub_10013D4AC();
        uint64_t v79 = v105;
        if ((v76 & 1) == 0) {
          goto LABEL_22;
        }
      }
    }

    else
    {
      sub_1001388B8(v75, v69);
      unint64_t v77 = sub_10001C578(v101);
      if ((v76 & 1) != (v78 & 1)) {
        goto LABEL_29;
      }
      unint64_t v72 = v77;
      uint64_t v79 = v105;
      if ((v76 & 1) == 0)
      {
LABEL_22:
        v79[(v72 >> 6) + 8] |= 1LL << v72;
        uint64_t v51 = v101;
        v99(v79[6] + v100[9] * v72, v101, v15);
        sub_100022628(v96, v79[7] + v72 * v103, type metadata accessor for LongTermPairingKeys.PublicIdentity);
        uint64_t v80 = v79[2];
        BOOL v81 = __OFADD__(v80, 1LL);
        uint64_t v82 = v80 + 1;
        if (v81) {
          goto LABEL_28;
        }
        v79[2]  = v82;
        uint64_t v79 = v105;
        goto LABEL_24;
      }
    }

    sub_1001440B0(v96, v79[7] + v72 * v103);
    uint64_t v51 = v101;
LABEL_24:
    uint64_t v83 = *v104;
    *uint64_t v104 = (uint64_t)v79;
    swift_bridgeObjectRelease(v83);
    ((void (*)(uint64_t, uint64_t))v100[1])(v51, v15);
    a6  = v95;
    uint64_t v47 = v98;
LABEL_7:
    swift_endAccess(v106);
    swift_release(v42);
    v50 += v103;
    if (!--v43)
    {
      uint64_t v49 = v85;
      swift_bridgeObjectRelease(v85);
      uint64_t v45 = v91;
      uint64_t v44 = v92;
      uint64_t v46 = v90;
      uint64_t v27 = v86;
      uint64_t v48 = v89;
      goto LABEL_26;
    }
  }

  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v15);
  __break(1u);
  return result;
}

uint64_t LongTermPairingKeys.init(myIdentity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for LongTermPairingKeys(0LL);
  sub_100057FE8(a1, a2 + *(int *)(v4 + 20), type metadata accessor for LongTermPairingKeys.PrivateIdentity);
  uint64_t v5 = type metadata accessor for LongTermPairingKeys.PairedDevices();
  memset(v8, 0, sizeof(v8));
  uint64_t v9 = 0LL;
  swift_allocObject(v5, 112LL, 7LL);
  uint64_t v6 = sub_10012B730(0LL, 0LL, (uint64_t)v8);
  uint64_t result = sub_10005802C(a1, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
  *(void *)(a2 + *(int *)(v4 + swift_release(*(void *)(v0 + 24)) = v6;
  return result;
}

uint64_t LongTermPairingKeys.PrivateIdentity.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SymmetricKeySize(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  UUID.init()(v8);
  if (qword_1004042F0 != -1) {
    swift_once(&qword_1004042F0, sub_100127590);
  }
  uint64_t v11 = sub_1000032DC(v2, (uint64_t)qword_1004089F8);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v11, v2);
  type metadata accessor for LongTermPairingKeys.Identity(0LL);
  SymmetricKey.init(size:)(v5);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v10, v6);
  type metadata accessor for LongTermPairingKeys.PrivateIdentity(0LL);
  return P256.Signing.PrivateKey.init(compactRepresentable:)(1LL);
}

uint64_t LongTermPairingKeys.customMirror.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for LongTermPairingKeys(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100057FE8(v1, (uint64_t)v11, v12);
  uint64_t v13 = sub_100002274(qword_100405EA0);
  uint64_t v14 = swift_allocObject(v13, 80LL, 7LL);
  *(_OWORD *)(v14 + 16)  = xmmword_100339900;
  strcpy((char *)(v14 + 32), "pairedDevices");
  *(_WORD *)(v14 + 46)  = -4864;
  uint64_t v15 = *(void *)(v1 + *(int *)(v9 + 24));
  *(void *)(v14 + 72)  = type metadata accessor for LongTermPairingKeys.PairedDevices();
  *(void *)(v14 + 48)  = v15;
  uint64_t v16 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v8, 1LL, 1LL, v16);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for Mirror.AncestorRepresentation.generated(_:),  v2);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(v11, v14, v8, v5, v9);
}

uint64_t sub_100127558()
{
  uint64_t result = sub_1000EF90C(0xD000000000000020LL, 0x8000000100365270LL);
  qword_1004089E8  = result;
  unk_1004089F0  = v1;
  return result;
}

uint64_t sub_100127590()
{
  uint64_t v0 = type metadata accessor for SymmetricKeySize(0LL);
  sub_10000B0D0(v0, qword_1004089F8);
  uint64_t v1 = sub_1000032DC(v0, (uint64_t)qword_1004089F8);
  return static SymmetricKeySize.bits256.getter(v1);
}

uint64_t sub_1001275D8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v3 = type metadata accessor for SymmetricKey(0LL);
  uint64_t v42 = *(void *)(v3 - 8);
  uint64_t v43 = v3;
  __chkstk_darwin(v3);
  uint64_t v41 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for LongTermPairingKeys.Identity(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100021104(a1, v12);
  uint64_t v14 = v50;
  dispatch thunk of Decoder.unkeyedContainer()(v47, v12, v13);
  if (v14) {
    return sub_100002AC4(a1);
  }
  uint64_t v38 = v9;
  uint64_t v39 = v8;
  uint64_t v40 = v6;
  uint64_t v50 = v5;
  uint64_t v15 = v11;
  uint64_t v17 = v42;
  uint64_t v16 = v43;
  uint64_t v18 = v44;
  uint64_t v19 = v48;
  uint64_t v20 = v49;
  sub_1000237C8((uint64_t)v47, v48);
  uint64_t v21 = UnkeyedDecodingContainer.decodeData(with:)(16LL, v19, v20);
  unint64_t v23 = v22;
  sub_1002091C8(v21, v22);
  sub_1000208D8(v21, v23);
  uint64_t v25 = v39;
  UUID.init(uuid:)( v45,  BYTE1(v45),  BYTE2(v45),  BYTE3(v45),  BYTE4(v45),  BYTE5(v45),  BYTE6(v45),  HIBYTE(v45),  v46);
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
  uint64_t v37 = (uint64_t)v15;
  v26(v15, v25, v50);
  if (qword_1004042F0 != -1) {
    swift_once(&qword_1004042F0, sub_100127590);
  }
  uint64_t v27 = type metadata accessor for SymmetricKeySize(0LL);
  uint64_t v28 = sub_1000032DC(v27, (uint64_t)qword_1004089F8);
  uint64_t v29 = SymmetricKeySize.bitCount.getter(v28) / 8;
  uint64_t v30 = v48;
  uint64_t v31 = v49;
  sub_1000237C8((uint64_t)v47, v48);
  uint64_t v32 = a1;
  uint64_t v45 = UnkeyedDecodingContainer.decodeData(with:)(v29, v30, v31);
  uint64_t v46 = v33;
  uint64_t v34 = v41;
  SymmetricKey.init<A>(data:)(&v45, &type metadata for Data, &protocol witness table for Data);
  uint64_t v35 = v37;
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v37 + *(int *)(v38 + 20), v34, v16);
  sub_100002AC4(v47);
  sub_100057FE8(v35, v18, type metadata accessor for LongTermPairingKeys.Identity);
  sub_100002AC4(v32);
  return sub_10005802C(v35, type metadata accessor for LongTermPairingKeys.Identity);
}

uint64_t sub_100127910(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100021104(a1, v8);
  dispatch thunk of Encoder.singleValueContainer()(v31, v8, v9);
  uint64_t v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  uint64_t v29 = UUID.uuid.getter(v10);
  LOWORD(v30)  = v11;
  BYTE2(v30)  = v12;
  BYTE3(v30)  = v13;
  BYTE4(v30)  = v14;
  BYTE5(v30)  = v15;
  BYTE6(v30)  = v16;
  HIBYTE(v30)  = v17;
  uint64_t v18 = sub_1000EF854((uint64_t)&v29, (uint64_t)v31);
  unint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  type metadata accessor for LongTermPairingKeys.Identity(0LL);
  SymmetricKey.withUnsafeBytes<A>(_:)(&v29, sub_100061064, 0LL, &type metadata for Data);
  uint64_t v21 = v29;
  unint64_t v22 = v30;
  uint64_t v29 = v18;
  unint64_t v30 = v20;
  sub_100020AFC(v18, v20);
  sub_100020AFC(v21, v22);
  sub_1000FA9C4(v21, v22);
  sub_1000208D8(v21, v22);
  sub_1000208D8(v21, v22);
  sub_1000208D8(v18, v20);
  uint64_t v23 = v29;
  unint64_t v24 = v30;
  uint64_t v25 = v32;
  uint64_t v26 = v33;
  sub_1000237C8((uint64_t)v31, v32);
  unint64_t v27 = sub_10005CD78();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)(&v29, &type metadata for Data, v27, v25, v26);
  sub_1000208D8(v23, v24);
  return sub_100002AC4(v31);
}

uint64_t sub_100127B7C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001275D8(a1, a2);
}

uint64_t sub_100127B90(void *a1)
{
  return sub_100127910(a1);
}

uint64_t LongTermPairingKeys.PrivateIdentity.publicIdentity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(a1, v1, v3);
  uint64_t v4 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0LL) + 20);
  uint64_t v5 = v1 + v4;
  uint64_t v6 = a1 + v4;
  uint64_t v7 = type metadata accessor for SymmetricKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v6, v5, v7);
  type metadata accessor for LongTermPairingKeys.PrivateIdentity(0LL);
  uint64_t v8 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
  P256.Signing.PrivateKey.publicKey.getter();
  uint64_t v9 = (void *)(a1 + *(int *)(v8 + 24));
  *uint64_t v9 = 0LL;
  v9[1]  = 0LL;
  uint64_t v10 = a1 + *(int *)(v8 + 28);
  uint64_t v11 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))( v10,  1LL,  1LL,  v11);
}

uint64_t LongTermPairingKeys.PrivateIdentity.encode(to:)(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  sub_100021104(a1, v1);
  dispatch thunk of Encoder.singleValueContainer()(v11, v1, v2);
  uint64_t v3 = sub_100128460( (void (*)(void))type metadata accessor for LongTermPairingKeys.PrivateIdentity,  (uint64_t (*)(void))&P256.Signing.PrivateKey.rawRepresentation.getter);
  unint64_t v5 = v4;
  v10[0]  = v3;
  v10[1]  = v4;
  uint64_t v6 = v12;
  uint64_t v7 = v13;
  sub_1000237C8((uint64_t)v11, v12);
  unint64_t v8 = sub_10005CD78();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)(v10, &type metadata for Data, v8, v6, v7);
  sub_1000208D8(v3, v5);
  return sub_100002AC4(v11);
}

void sub_100127D48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(int *)(v8 + 20), v4);
  if (qword_1004042E8 != -1) {
    swift_once(&qword_1004042E8, sub_100127558);
  }
  __asm { BR              X11 }

uint64_t sub_100128068()
{
  if (*v0) {
    return 0x4B676E696E676973LL;
  }
  else {
    return 0x797469746E656469LL;
  }
}

uint64_t sub_1001280A8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001409B4(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001280CC(uint64_t a1)
{
  unint64_t v2 = sub_1001364A0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001280F4(uint64_t a1)
{
  unint64_t v2 = sub_1001364A0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LongTermPairingKeys.PrivateIdentity.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v27 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  uint64_t v25 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v28 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = type metadata accessor for LongTermPairingKeys.Identity(0LL);
  __chkstk_darwin(v29);
  unint64_t v30 = (void **)((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v31 = sub_100002274(&qword_100408A60);
  uint64_t v6 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100021104(a1, v12);
  unint64_t v14 = sub_1001364A0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for LongTermPairingKeys.PrivateIdentity.CodingKeys,  &type metadata for LongTermPairingKeys.PrivateIdentity.CodingKeys,  v14,  v12,  v13);
  if (v2) {
    return sub_100002AC4(a1);
  }
  unint64_t v24 = a1;
  uint64_t v15 = v6;
  uint64_t v16 = (uint64_t)v11;
  char v17 = v28;
  char v33 = 0;
  uint64_t v18 = sub_10000AF70( &qword_100408A70,  type metadata accessor for LongTermPairingKeys.Identity,  (uint64_t)&unk_100349AE8);
  unint64_t v19 = v30;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v30, v29, &v33, v31, v29, v18);
  sub_100022628((uint64_t)v19, v16, type metadata accessor for LongTermPairingKeys.Identity);
  char v32 = 1;
  uint64_t v20 = sub_10000AF70( &qword_100408A78,  (uint64_t (*)(uint64_t))&type metadata accessor for P256.Signing.PrivateKey,  (uint64_t)&protocol conformance descriptor for P256.Signing.PrivateKey);
  uint64_t v21 = v27;
  uint64_t v22 = v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v27, &v32, v31, v27, v20);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v8, v22);
  (*(void (**)(uint64_t, void *, uint64_t))(v25 + 32))(v16 + *(int *)(v9 + 20), v17, v21);
  sub_100057FE8(v16, v26, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
  sub_100002AC4(v24);
  return sub_10005802C(v16, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
}

uint64_t sub_1001283F8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return LongTermPairingKeys.PrivateIdentity.init(from:)(a1, a2);
}

uint64_t LongTermPairingKeys.PublicIdentity.rawRepresentation.getter()
{
  return sub_100128460( (void (*)(void))type metadata accessor for LongTermPairingKeys.PublicIdentity,  (uint64_t (*)(void))&P256.Signing.PublicKey.rawRepresentation.getter);
}

uint64_t sub_100128460(void (*a1)(void), uint64_t (*a2)(void))
{
  uint64_t v5 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v5, v6);
  uint64_t v30 = UUID.uuid.getter(v10);
  LOWORD(v31)  = v11;
  BYTE2(v31)  = v12;
  BYTE3(v31)  = v13;
  BYTE4(v31)  = v14;
  BYTE5(v31)  = v15;
  BYTE6(v31)  = v16;
  HIBYTE(v31)  = v17;
  uint64_t v18 = sub_1000EF854((uint64_t)&v30, (uint64_t)&v32);
  unint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  type metadata accessor for LongTermPairingKeys.Identity(0LL);
  SymmetricKey.withUnsafeBytes<A>(_:)(&v30, sub_100061064, 0LL, &type metadata for Data);
  uint64_t v21 = v30;
  unint64_t v22 = v31;
  uint64_t v30 = v18;
  unint64_t v31 = v20;
  sub_100020AFC(v18, v20);
  sub_100020AFC(v21, v22);
  sub_1000FA9C4(v21, v22);
  sub_1000208D8(v21, v22);
  sub_1000208D8(v21, v22);
  sub_1000208D8(v18, v20);
  uint64_t v23 = v30;
  unint64_t v24 = v31;
  a1(0LL);
  uint64_t v25 = a2();
  unint64_t v27 = v26;
  uint64_t v30 = v23;
  unint64_t v31 = v24;
  sub_100020AFC(v23, v24);
  sub_1000FA9C4(v25, v27);
  sub_1000208D8(v25, v27);
  sub_1000208D8(v23, v24);
  return v30;
}

uint64_t LongTermPairingKeys.PublicIdentity.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v31 = type metadata accessor for P256.Signing.PublicKey(0LL);
  uint64_t v4 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = type metadata accessor for LongTermPairingKeys.Identity(0LL);
  __chkstk_darwin(v32);
  char v33 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  __int16 v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v12 = &v11[*(int *)(v9 + 24)];
  *(void *)char v12 = 0LL;
  *((void *)v12 + 1)  = 0LL;
  uint64_t v34 = v12;
  uint64_t v13 = (uint64_t)&v11[*(int *)(v9 + 28)];
  uint64_t v14 = type metadata accessor for Date(0LL);
  char v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL);
  uint64_t v38 = v13;
  v15(v13, 1LL, 1LL, v14);
  uint64_t v16 = a1[3];
  uint64_t v17 = a1[4];
  sub_100021104(a1, v16);
  dispatch thunk of Decoder.unkeyedContainer()(v35, v16, v17);
  if (v2)
  {
    sub_100002AC4(a1);
    swift_bridgeObjectRelease(*((void *)v34 + 1));
    return sub_1000225EC(v38, &qword_100408A80);
  }

  else
  {
    uint64_t v28 = v6;
    uint64_t v29 = a1;
    uint64_t v18 = v36;
    uint64_t v19 = v37;
    sub_1000237C8((uint64_t)v35, v36);
    uint64_t v20 = sub_10000AF70( &qword_100408A70,  type metadata accessor for LongTermPairingKeys.Identity,  (uint64_t)&unk_100349AE8);
    uint64_t v21 = (uint64_t)v33;
    UnkeyedDecodingContainer.inferredDecode<A>()(v18, v32, v19, v20);
    sub_100022628(v21, (uint64_t)v11, type metadata accessor for LongTermPairingKeys.Identity);
    uint64_t v22 = v36;
    uint64_t v23 = v37;
    sub_1000237C8((uint64_t)v35, v36);
    uint64_t v24 = sub_10000AF70( &qword_100408A88,  (uint64_t (*)(uint64_t))&type metadata accessor for P256.Signing.PublicKey,  (uint64_t)&protocol conformance descriptor for P256.Signing.PublicKey);
    uint64_t v25 = v28;
    uint64_t v26 = v31;
    UnkeyedDecodingContainer.inferredDecode<A>()(v22, v31, v23, v24);
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(&v11[*(int *)(v8 + 20)], v25, v26);
    sub_100002AC4(v35);
    sub_100057FE8((uint64_t)v11, v30, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    sub_100002AC4(v29);
    return sub_10005802C((uint64_t)v11, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  }

uint64_t LongTermPairingKeys.PublicIdentity.encode(to:)(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  sub_100021104(a1, v1);
  dispatch thunk of Encoder.singleValueContainer()(v11, v1, v2);
  uint64_t v3 = LongTermPairingKeys.PublicIdentity.rawRepresentation.getter();
  unint64_t v5 = v4;
  v10[0]  = v3;
  v10[1]  = v4;
  uint64_t v6 = v12;
  uint64_t v7 = v13;
  sub_1000237C8((uint64_t)v11, v12);
  unint64_t v8 = sub_10005CD78();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)(v10, &type metadata for Data, v8, v6, v7);
  sub_1000208D8(v3, v5);
  return sub_100002AC4(v11);
}

uint64_t LongTermPairingKeys.PublicIdentity.description.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL) + 24));
  uint64_t v2 = v1[1];
  if (v2)
  {
    uint64_t v11 = *v1;
    unint64_t v12 = v1[1];
    swift_bridgeObjectRetain(v2);
    v3._uint64_t countAndFlagsBits = 2108704LL;
    v3._object  = (void *)0xE300000000000000LL;
    String.append(_:)(v3);
    uint64_t v5 = v11;
    unint64_t v4 = v12;
  }

  else
  {
    uint64_t v5 = 0LL;
    unint64_t v4 = 0xE000000000000000LL;
  }

  uint64_t v6 = UUID.uuidString.getter();
  unint64_t v8 = v7;
  swift_bridgeObjectRetain(v4);
  v9._uint64_t countAndFlagsBits = v6;
  v9._object  = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);
  return v5;
}

uint64_t LongTermPairingKeys.PublicIdentity.customMirror.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100057FE8(v1, (uint64_t)v11, v12);
  uint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v13 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v8, 1LL, 1LL, v13);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for Mirror.AncestorRepresentation.generated(_:),  v2);
  uint64_t v14 = sub_100002274(&qword_100405DC0);
  uint64_t v15 = sub_1000572E4( (unint64_t *)&qword_10040C630,  &qword_100405DC0,  (uint64_t)&protocol conformance descriptor for [A]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(v11, &v18, v8, v5, v9, v14, v15);
}

void sub_100128C94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for P256.Signing.PublicKey(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  unint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3 + *(int *)(v9 + 20), v5);
  if (qword_1004042E8 != -1) {
    swift_once(&qword_1004042E8, sub_100127558);
  }
  __asm { BR              X11 }

uint64_t sub_100128F4C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return LongTermPairingKeys.PublicIdentity.init(from:)(a1, a2);
}

uint64_t sub_100128F64(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100002274((uint64_t *)&unk_100408800);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100057FE8(v1, (uint64_t)v12, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  uint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v13 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v10, 1LL, 1LL, v13);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))( v6,  enum case for Mirror.AncestorRepresentation.generated(_:),  v3);
  uint64_t v14 = sub_100002274(&qword_100405DC0);
  uint64_t v15 = sub_1000572E4( (unint64_t *)&qword_10040C630,  &qword_100405DC0,  (uint64_t)&protocol conformance descriptor for [A]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(v12, &v18, v10, v6, a1, v14, v15);
}

uint64_t sub_1001290F4(uint64_t a1)
{
  uint64_t v4 = &v19[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = type metadata accessor for AES.GCM.SealedBox(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  NANGenericServiceProtocol.packetData(for:)(1LL, a1);
  uint64_t v11 = v9;
  unint64_t v12 = v10;
  if (v10 >> 60 != 15)
  {
    v20[0]  = v9;
    v20[1]  = v10;
    uint64_t v13 = v1 + *(int *)(type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0LL) + 24);
    uint64_t v14 = type metadata accessor for AES.GCM.Nonce(0LL);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v4, 1LL, 1LL, v14);
    unint64_t v15 = sub_10005D508();
    static AES.GCM.seal<A>(_:using:nonce:)(v20, v13, v4, &type metadata for Data, v15);
    uint64_t v16 = sub_1000225EC((uint64_t)v4, &qword_100409288);
    uint64_t v17 = AES.GCM.SealedBox.combined.getter(v16);
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    sub_100020B40(v11, v12);
    return v17;
  }

  return v11;
}

void sub_1001292A0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_1001292DC()
{
  if (BYTE6(v0) > 0x1BuLL)
  {
    sub_100020AFC(v1, v0);
    sub_1000EFF10(v1, v0);
    ((void (*)(void))AES.GCM.SealedBox.init(combined:))();
  }

  else
  {
    uint64_t v2 = ((uint64_t (*)(void))type metadata accessor for CryptoKitError)(0LL);
    uint64_t v3 = sub_10000AF70( &qword_100409278,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoKitError,  (uint64_t)&protocol conformance descriptor for CryptoKitError);
    swift_allocError(v2, v3, 0LL, 0LL);
    uint64_t v5 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v2 - 8) + 104LL))( v4,  enum case for CryptoKitError.incorrectParameterSize(_:),  v2);
    swift_willThrow(v5);
  }

  return sub_1000208D8(v1, v0);
}

uint64_t sub_1001293E0( uint64_t a1, void (*a2)(uint64_t, void, uint64_t, uint64_t), unint64_t a3, uint64_t a4)
{
  v137  = a4;
  v153  = a3;
  v155  = a2;
  sub_100002274(&qword_100405118);
  __chkstk_darwin();
  v139  = (uint64_t)&v126 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v140  = (uint64_t)&v126 - v6;
  v143  = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  __chkstk_darwin();
  v138  = (uint64_t)&v126 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_10040D470);
  __chkstk_darwin();
  uint64_t v136 = (char *)&v126 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_100409288);
  __chkstk_darwin();
  v145  = (char *)&v126 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v142  = type metadata accessor for AES.GCM.SealedBox(0LL);
  v141  = *(void *)(v142 - 8);
  __chkstk_darwin();
  v144  = (char *)&v126 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v148  = sub_100002274(&qword_1004060E8);
  v147  = *(void *)(v148 - 8);
  __chkstk_darwin();
  v146  = (unint64_t)&v126 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v152  = type metadata accessor for P256.Signing.ECDSASignature(0LL);
  v151  = *(void *)(v152 - 8);
  __chkstk_darwin();
  v150  = (unint64_t)&v126 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v126 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_100409280);
  __chkstk_darwin();
  uint64_t v18 = (char *)&v126 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v20 = (char *)&v126 - v19;
  uint64_t v21 = type metadata accessor for UUID(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin();
  uint64_t v24 = (char *)&v126 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v154  = a1;
  uint64_t v26 = v25(v24, a1, v21);
  v160  = UUID.uuid.getter(v26);
  LOWORD(v161)  = v27;
  BYTE2(v161)  = v28;
  BYTE3(v161)  = v29;
  BYTE4(v161)  = v30;
  BYTE5(v161)  = v31;
  BYTE6(v161)  = v32;
  HIBYTE(v161)  = v33;
  uint64_t v34 = sub_1000EF854((uint64_t)&v160, (uint64_t)v162);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v22 + 8);
  unint64_t v37 = v36;
  v35(v24, v21);
  sub_100020AFC(v34, v37);
  sub_10007242C(v34, v37);
  uint64_t v39 = v38;
  unint64_t v41 = v40;
  uint64_t v129 = v16;
  uint64_t v130 = v18;
  uint64_t v131 = v20;
  v132  = v14;
  uint64_t v133 = v13;
  uint64_t v134 = v34;
  unint64_t v135 = v37;
  sub_100020AFC(v38, v40);
  unint64_t v42 = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v43 = type metadata accessor for BinaryEncoder();
  uint64_t v44 = swift_allocObject(v43, 40LL, 7LL);
  __int128 v128 = xmmword_1003398F0;
  *(_OWORD *)(v44 + 16)  = xmmword_1003398F0;
  *(void *)(v44 + 32)  = v42;
  v163  = v43;
  uint64_t v45 = sub_10000AF70( (unint64_t *)&qword_1004064B0,  (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder,  (uint64_t)&protocol conformance descriptor for BinaryEncoder);
  v164  = v45;
  v160  = v44;
  sub_100020AFC(v39, v41);
  swift_retain();
  sub_10013682C(&v160, v39, v41);
  sub_100002AC4(&v160);
  sub_1000208D8(v39, v41);
  sub_1000208D8(v39, v41);
  uint64_t v126 = v45;
  uint64_t v127 = v43;
  swift_beginAccess(v44 + 16, v159, 0LL, 0LL);
  uint64_t v46 = *(void *)(v44 + 16);
  unint64_t v47 = *(void *)(v44 + 24);
  sub_100020AFC(v46, v47);
  swift_release(v44);
  uint64_t v48 = sub_1000208D8(v39, v41);
  uint64_t v49 = v129;
  uint64_t v50 = P256.KeyAgreement.PrivateKey.publicKey.getter(v48);
  uint64_t v51 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v50);
  unint64_t v53 = v52;
  uint64_t v54 = (*(uint64_t (**)(char *, uint64_t))(v132 + 8))(v49, v133);
  uint64_t v55 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v54);
  unint64_t v57 = v56;
  v160  = v51;
  v161  = v53;
  sub_100020AFC(v51, v53);
  sub_1000FA9C4(v55, v57);
  sub_1000208D8(v55, v57);
  sub_1000208D8(v51, v53);
  uint64_t v58 = v160;
  unint64_t v59 = v161;
  uint64_t v60 = (uint64_t)v131;
  sub_100127D48(v160, v161);
  sub_1000208D8(v58, v59);
  uint64_t v61 = (uint64_t)v130;
  sub_1000226B0(v60, (uint64_t)v130, &qword_100409280);
  uint64_t v62 = v151;
  unint64_t v63 = v152;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v151 + 48))(v61, 1LL, v152) == 1)
  {
    sub_1000225EC(v60, &qword_100409280);
    uint64_t v64 = v46;
    unint64_t v65 = v47;
  }

  else
  {
    v154  = v46;
    unint64_t v67 = v150;
    uint64_t v68 = (*(uint64_t (**)(unint64_t, uint64_t, unint64_t))(v62 + 32))(v150, v61, v63);
    uint64_t v69 = P256.Signing.ECDSASignature.rawRepresentation.getter(v68);
    sub_10007242C(v69, v70);
    uint64_t v72 = v71;
    unint64_t v74 = v73;
    v153  = v47;
    (*(void (**)(unint64_t, unint64_t))(v62 + 8))(v67, v63);
    sub_1000225EC(v60, &qword_100409280);
    sub_100020AFC(v72, v74);
    unint64_t v75 = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v76 = v127;
    uint64_t v77 = swift_allocObject(v127, 40LL, 7LL);
    *(_OWORD *)(v77 + 16)  = v128;
    *(void *)(v77 + 32)  = v75;
    v163  = v76;
    v164  = v126;
    v160  = v77;
    sub_100020AFC(v72, v74);
    swift_retain();
    sub_10013682C(&v160, v72, v74);
    sub_100002AC4(&v160);
    sub_1000208D8(v72, v74);
    sub_1000208D8(v72, v74);
    uint64_t v78 = v134;
    swift_beginAccess(v77 + 16, v158, 0LL, 0LL);
    uint64_t v79 = *(void *)(v77 + 16);
    unint64_t v80 = *(void *)(v77 + 24);
    sub_100020AFC(v79, v80);
    swift_release(v77);
    sub_1000208D8(v72, v74);
    v160  = v78;
    v161  = v135;
    uint64_t v81 = v149 + *(int *)(type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0LL) + 20);
    uint64_t v82 = type metadata accessor for SHA256(0LL);
    uint64_t v83 = sub_10000AF70( &qword_1004060F0,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
    unint64_t v84 = sub_10005D508();
    unint64_t v85 = v146;
    uint64_t v86 = v82;
    unint64_t v87 = v84;
    static HMAC.authenticationCode<A>(for:using:)(&v160, v81, v86, &type metadata for Data, v83, v84);
    uint64_t v88 = v148;
    HashedAuthenticationCode.withUnsafeBytes<A>(_:)(&v160, sub_100061064, 0LL, v148, &type metadata for Data);
    v89  = v160;
    uint64_t v90 = v161;
    (*(void (**)(unint64_t, uint64_t))(v147 + 8))(v85, v88);
    sub_10007242C(v89, v90);
    uint64_t v92 = v91;
    unint64_t v94 = v93;
    v151  = v79;
    v152  = v80;
    sub_100020AFC(v91, v93);
    unint64_t v95 = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v96 = v127;
    uint64_t v97 = swift_allocObject(v127, 40LL, 7LL);
    *(_OWORD *)(v97 + 16)  = v128;
    *(void *)(v97 + 32)  = v95;
    v163  = v96;
    v164  = v126;
    v160  = v97;
    sub_100020AFC(v92, v94);
    swift_retain();
    sub_10013682C(&v160, v92, v94);
    sub_100002AC4(&v160);
    sub_1000208D8(v92, v94);
    sub_1000208D8(v92, v94);
    swift_beginAccess(v97 + 16, &v160, 0LL, 0LL);
    uint64_t v98 = *(void *)(v97 + 16);
    unint64_t v99 = *(void *)(v97 + 24);
    sub_100020AFC(v98, v99);
    swift_release(v97);
    sub_1000208D8(v92, v94);
    *(void *)&v156  = v154;
    *((void *)&v156 + 1)  = v153;
    sub_100020AFC(v154, v153);
    v100  = v151;
    v150  = v87;
    unint64_t v101 = v152;
    sub_100020AFC(v151, v152);
    sub_1000FA9C4(v100, v101);
    sub_1000208D8(v100, v101);
    __int128 v102 = v156;
    v157  = v156;
    sub_100020AFC(v98, v99);
    sub_100020AFC(v102, *((unint64_t *)&v102 + 1));
    sub_1000FA9C4(v98, v99);
    sub_1000208D8(v98, v99);
    sub_1000208D8(v102, *((unint64_t *)&v102 + 1));
    v156  = v157;
    uint64_t v103 = type metadata accessor for AES.GCM.Nonce(0LL);
    uint64_t v104 = (uint64_t)v145;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v103 - 8) + 56LL))(v145, 1LL, 1LL, v103);
    v105  = v144;
    static AES.GCM.seal<A>(_:using:nonce:)(&v156, v149, v104, &type metadata for Data, v150);
    v150  = v99;
    v148  = v98;
    sub_1000225EC(v104, &qword_100409288);
    v106  = sub_1000208D8(v156, *((unint64_t *)&v156 + 1));
    v147  = AES.GCM.SealedBox.combined.getter(v106);
    v108  = v107;
    (*(void (**)(char *, uint64_t))(v141 + 8))(v105, v142);
    v146  = v108;
    if (v108 >> 60 != 15)
    {
      unint64_t v109 = sub_100020554((uint64_t)_swiftEmptyArrayStorage);
      *(void *)&v157  = v109;
      uint64_t v110 = (uint64_t)v136;
      P256.KeyAgreement.PrivateKey.publicKey.getter(v109);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v132 + 56))(v110, 0LL, 1LL, v133);
      v111  = v138;
      sub_1000667B0(v109, v138);
      v112  = v143;
      sub_10006D2CC(v110, v111 + *(int *)(v143 + 24));
      uint64_t v113 = v140;
      sub_100057FE8(v111, v140, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
      uint64_t v114 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
      swift_storeEnumTagMultiPayload(v113, v114, 7LL);
      v115  = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v114 - 8) + 56LL);
      v115(v113, 0LL, 1LL, v114);
      v155  = v115;
      uint64_t v116 = v139;
      sub_1000226B0(v113, v139, &qword_100405118);
      sub_100013D20(v116, 7);
      sub_10005802C(v111, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
      sub_1000225EC(v113, &qword_100405118);
      sub_1000225EC(v110, (uint64_t *)&unk_10040D470);
      uint64_t v117 = v157;
      v118  = v147;
      v119  = v146;
      sub_100020AFC(v147, v146);
      sub_100020AFC(v118, v119);
      sub_1000667B0(v117, v111);
      v120  = v111 + *(int *)(v112 + 32);
      sub_100020B40(*(void *)v120, *(void *)(v120 + 8));
      *(void *)v120  = v118;
      *(void *)(v120 + 8)  = v119;
      sub_100057FE8(v111, v113, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
      swift_storeEnumTagMultiPayload(v113, v114, 7LL);
      v115(v113, 0LL, 1LL, v114);
      sub_1000226B0(v113, v116, &qword_100405118);
      sub_100013D20(v116, 7);
      sub_10005802C(v111, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
      sub_1000225EC(v113, &qword_100405118);
      sub_100020B40(v118, v119);
      uint64_t v121 = sub_1001290F4(v137);
      v123  = v122;
      uint64_t v124 = v157;
      sub_10002255C(v121, v122);
      sub_1000667B0(v124, v111);
      v125  = v111 + *(int *)(v143 + 36);
      sub_100020B40(*(void *)v125, *(void *)(v125 + 8));
      *(void *)v125  = v121;
      *(void *)(v125 + 8)  = v123;
      sub_100057FE8(v111, v113, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
      swift_storeEnumTagMultiPayload(v113, v114, 7LL);
      v155(v113, 0LL, 1LL, v114);
      sub_1000226B0(v113, v116, &qword_100405118);
      sub_100013D20(v116, 7);
      sub_10005802C(v111, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
      sub_1000225EC(v113, &qword_100405118);
      sub_100020B40(v121, v123);
      sub_1000208D8(v134, v135);
      sub_100020B40(v118, v119);
      sub_1000208D8(v148, v150);
      sub_1000208D8(v151, v152);
      sub_1000208D8(v154, v153);
      return v157;
    }

    sub_1000208D8(v148, v150);
    sub_1000208D8(v151, v152);
    unint64_t v65 = v153;
    uint64_t v64 = v154;
  }

  sub_1000208D8(v64, v65);
  sub_1000208D8(v134, v135);
  return 0LL;
}

void sub_10012A3D0(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v30 = a3;
  sub_100002274(qword_100410330);
  __chkstk_darwin();
  v24[10]  = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for UUID(0LL);
  v24[9]  = *(void *)(v25 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_100409280);
  __chkstk_darwin();
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for P256.Signing.ECDSASignature(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for AES.GCM.SealedBox(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin();
  uint64_t v17 = (char *)v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = type metadata accessor for Logger(0LL);
  uint64_t v27 = *(void *)(v29 - 8);
  __chkstk_darwin();
  char v28 = (char *)v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xED00006E616E2E65LL,  0xD000000000000011LL,  0x8000000100360AA0LL);
  sub_100020AFC(a1, a2);
  sub_1001292A0(a1, a2);
  v24[7]  = v9;
  v24[8]  = v11;
  v24[4]  = v7;
  v24[5]  = v13;
  v24[6]  = v10;
  uint64_t v19 = static AES.GCM.open(_:using:)(v17, v26);
  unint64_t v21 = v20;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  sub_100020AFC(v19, v21);
  sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v22 = type metadata accessor for BinaryDecoder();
  uint64_t v23 = (void *)swift_allocObject(v22, 48LL, 7LL);
  v23[5]  = _swiftEmptyDictionarySingleton;
  v24[3]  = v19;
  v23[2]  = v19;
  v23[3]  = v21;
  v24[2]  = v21;
  __asm { BR              X10 }

uint64_t sub_10012A774(uint64_t a1)
{
  v1[4]  = (int)*(void *)(v3 - 280);
  swift_beginAccess(a1, v3 - 120, 1LL, 0LL);
  uint64_t v4 = v1[5];
  v1[5]  = v2;
  uint64_t v5 = swift_bridgeObjectRelease(v4);
  unint64_t v6 = v1[3];
  *(void *)(v3 - 208)  = v1[2] >> 32;
  return ((uint64_t (*)(uint64_t))((char *)&loc_10012A7E0 + dword_10012AE6C[v6 >> 62]))(v5);
}

void sub_10012A7F4(uint64_t a1@<X8>)
{
  if (a1 >= *(void *)(v5 - 208))
  {
    swift_release(v1);
    if (!v3[2])
    {
      uint64_t v32 = swift_bridgeObjectRelease(v3);
      goto LABEL_28;
    }

    if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0) {
      uint64_t v3 = sub_10019EA48(v3);
    }
    uint64_t v21 = *(void *)(v5 - 248);
    uint64_t v20 = *(void *)(v5 - 240);
    uint64_t v22 = v3[2];
    if (!v22)
    {
      __break(1u);
      JUMPOUT(0x10012AE5CLL);
    }

    uint64_t v23 = v3 + 4;
    uint64_t v24 = &v3[2 * v22 + 2];
    uint64_t v26 = *v24;
    unint64_t v25 = v24[1];
    void v3[2] = v22 - 1;
    if (v22 != 1)
    {
      *(void *)(v5 - 208)  = v25;
      uint64_t v27 = v22 - 2;
      char v28 = &v23[2 * v27];
      uint64_t v29 = *v28;
      unint64_t v30 = v28[1];
      void v3[2] = v27;
      sub_1001E7214(v29, v30);
      if (!v2)
      {
        char v31 = v3;
        sub_1000208D8(v29, v30);
        uint64_t v44 = *(void *)(v5 - 256);
        int v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v21, 1LL, v44);
        unint64_t v25 = *(void *)(v5 - 208);
        if (v45 != 1)
        {
          uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32);
          uint64_t v47 = *(void *)(v5 - 264);
          v46(v47, v21, v44);
          uint64_t v48 = v31[2];
          if (v48)
          {
            uint64_t v49 = v48 - 1;
            uint64_t v50 = &v23[2 * v49];
            uint64_t v51 = *v50;
            unint64_t v52 = v50[1];
            v31[2]  = v49;
            sub_1002091C8(v51, v52);
            sub_1000208D8(v51, v52);
            uint64_t v53 = *(void *)(v5 - 224);
            UUID.init(uuid:)( *(unsigned __int8 *)(v5 - 160),  *(unsigned __int8 *)(v5 - 159),  *(unsigned __int8 *)(v5 - 158),  *(unsigned __int8 *)(v5 - 157),  *(unsigned __int8 *)(v5 - 156),  *(unsigned __int8 *)(v5 - 155),  *(unsigned __int8 *)(v5 - 154),  *(unsigned __int8 *)(v5 - 153),  *(void *)(v5 - 152));
            uint64_t v54 = *(void *)(v5 - 232);
            uint64_t v55 = *(void *)(v5 - 216);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v54 + 56))(v53, 0LL, 1LL, v55);
            int v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v53, 1LL, v55);
            uint64_t v47 = *(void *)(v5 - 264);
            if (v56 != 1)
            {
              unint64_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 32);
              uint64_t v58 = v54;
              uint64_t v59 = *(void *)(v5 - 272);
              v57(v59, v53, v55);
              uint64_t v60 = v31[2];
              swift_bridgeObjectRelease(v31);
              if (!v60)
              {
                (*(void (**)(void, void))(*(void *)(v5 - 200) + 8LL))( *(void *)(v5 - 192),  *(void *)(v5 - 184));
                sub_1000208D8(*(void *)(v5 - 280), *(void *)(v5 - 288));
                uint64_t v61 = sub_100002274(&qword_100408AD0);
                uint64_t v62 = v59;
                uint64_t v63 = *(void *)(v5 - 176);
                uint64_t v64 = v63 + *(int *)(v61 + 48);
                uint64_t v65 = v44;
                uint64_t v66 = (uint64_t *)(v63 + *(int *)(v61 + 64));
                v57(v63, v62, v55);
                v46(v64, *(void *)(v5 - 264), v65);
                uint64_t v67 = *(void *)(v5 - 208);
                *uint64_t v66 = v26;
                v66[1]  = v67;
                JUMPOUT(0x10012A6B8LL);
              }

              sub_1000208D8(v26, *(void *)(v5 - 208));
              (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v59, v55);
              uint64_t v32 = (*(uint64_t (**)(void, uint64_t))(*(void *)(v5 - 240) + 8LL))( *(void *)(v5 - 264),  v44);
              goto LABEL_28;
            }
          }

          else
          {
            uint64_t v53 = *(void *)(v5 - 224);
            (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v5 - 232) + 56LL))( v53,  1LL,  1LL,  *(void *)(v5 - 216));
          }

          sub_1000208D8(v26, *(void *)(v5 - 208));
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 240) + 8LL))(v47, v44);
          swift_bridgeObjectRelease(v31);
          uint64_t v32 = sub_1000225EC(v53, qword_100410330);
LABEL_28:
          uint64_t v40 = *(void *)(v5 - 192);
          unint64_t v41 = (os_log_s *)Logger.logObject.getter(v32);
          os_log_type_t v42 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v41, v42))
          {
            uint64_t v43 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v43 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "Failed to process authentication message because parsing failed",  v43,  2u);
            swift_slowDealloc(v43, -1LL, -1LL);

            sub_1000208D8(*(void *)(v5 - 280), *(void *)(v5 - 288));
          }

          else
          {
            sub_1000208D8(*(void *)(v5 - 280), *(void *)(v5 - 288));
          }

          (*(void (**)(uint64_t, void))(*(void *)(v5 - 200) + 8LL))(v40, *(void *)(v5 - 184));
          goto LABEL_32;
        }

uint64_t sub_10012AE7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v44 = a1;
  v40[0]  = a2;
  v40[1]  = a5;
  uint64_t v42 = a3;
  uint64_t v43 = a4;
  uint64_t v41 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v41 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin();
  uint64_t v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v10);
  unint64_t v15 = v14;
  uint64_t v16 = P256.KeyAgreement.PrivateKey.publicKey.getter(v13);
  uint64_t v17 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v16);
  unint64_t v19 = v18;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  uint64_t v48 = v13;
  unint64_t v49 = v15;
  sub_100020AFC(v13, v15);
  sub_100020AFC(v17, v19);
  sub_1000FA9C4(v17, v19);
  sub_1000208D8(v17, v19);
  sub_1000208D8(v17, v19);
  sub_1000208D8(v13, v15);
  uint64_t v20 = v48;
  unint64_t v21 = v49;
  sub_100128C94(v40[0], v48, v49);
  LODWORD(v19)  = v22;
  sub_1000208D8(v20, v21);
  uint64_t v23 = v41;
  uint64_t v48 = v42;
  unint64_t v49 = v43;
  uint64_t v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v44, v41);
  uint64_t v46 = UUID.uuid.getter(v24);
  LOWORD(v47)  = v25;
  BYTE2(v47)  = v26;
  BYTE3(v47)  = v27;
  BYTE4(v47)  = v28;
  BYTE5(v47)  = v29;
  BYTE6(v47)  = v30;
  HIBYTE(v47)  = v31;
  uint64_t v32 = sub_1000EF854((uint64_t)&v46, (uint64_t)&v48);
  unint64_t v34 = v33;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v23);
  uint64_t v46 = v32;
  unint64_t v47 = v34;
  uint64_t v35 = v45 + *(int *)(type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0LL) + 20);
  uint64_t v36 = type metadata accessor for SHA256(0LL);
  uint64_t v37 = sub_10000AF70( &qword_1004060F0,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
  unint64_t v38 = sub_10005D508();
  LODWORD(v35)  = static HMAC.isValidAuthenticationCode<A, B>(_:authenticating:using:)( &v48,  &v46,  v35,  v36,  &type metadata for Data,  &type metadata for Data,  v37,  &protocol witness table for Data,  v38);
  sub_1000208D8(v32, v34);
  return v19 & v35 & 1;
}

uint64_t sub_10012B170()
{
  uint64_t v0 = type metadata accessor for SymmetricKeySize(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = static SymmetricKeySize.bits256.getter(v2);
  uint64_t v6 = SymmetricKeySize.bitCount.getter(v5);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  qword_100408A10  = v6 / 8;
  return result;
}

uint64_t sub_10012B204()
{
  uint64_t result = sub_1000EF90C(0xD000000000000016LL, 0x80000001003652A0LL);
  qword_100408A18  = result;
  unk_100408A20  = v1;
  return result;
}

void sub_10012B23C( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v25[3]  = a6;
  uint64_t v11 = type metadata accessor for SymmetricKey(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  unint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v16 = (char *)v25 - v15;
  uint64_t v27 = a1;
  unint64_t v28 = a2;
  sub_100020AFC(a1, a2);
  SymmetricKey.init<A>(data:)(&v27, &type metadata for Data, &protocol witness table for Data);
  uint64_t v27 = a3;
  unint64_t v28 = a4;
  if (qword_100404300 != -1) {
    swift_once(&qword_100404300, sub_10012B204);
  }
  uint64_t v17 = qword_100408A18;
  unint64_t v18 = qword_100408A20;
  v26[0]  = qword_100408A18;
  v26[1]  = qword_100408A20;
  sub_100020AFC(qword_100408A18, qword_100408A20);
  if (qword_1004042F8 != -1) {
    swift_once(&qword_1004042F8, sub_10012B170);
  }
  uint64_t v19 = 6 * qword_100408A10;
  if ((unsigned __int128)(qword_100408A10 * (__int128)6LL) >> 64 == (6 * qword_100408A10) >> 63)
  {
    v25[2]  = a5;
    uint64_t v20 = type metadata accessor for SHA256(0LL);
    uint64_t v21 = sub_10000AF70( &qword_1004060F0,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
    unint64_t v22 = sub_10005D508();
    static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)( v14,  &v27,  v26,  v19,  v20,  &type metadata for Data,  &type metadata for Data,  v21,  v22,  v22);
    sub_1000208D8(v17, v18);
    uint64_t v23 = *(void (**)(char *, uint64_t))(v12 + 8);
    v23(v14, v11);
    SymmetricKey.withUnsafeBytes<A>(_:)(&v27, sub_100061064, 0LL, &type metadata for Data);
    unint64_t v24 = v28;
    v23(v16, v11);
    __asm { BR              X11 }
  }

  __break(1u);
  JUMPOUT(0x10012B700LL);
}

uint64_t sub_10012B730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  *(void *)(v3 + 80)  = 0LL;
  *(_BYTE *)(v3 + 88)  = 1;
  *(void *)(v3 + 96)  = 0LL;
  *(void *)(v3 + 104)  = 0LL;
  *(void *)(v3 + 16)  = &_swiftEmptyDictionarySingleton;
  *(void *)(v3 + 24)  = a1;
  *(void *)(v3 + 32)  = a2;
  uint64_t v6 = (void *)(v3 + 40);
  sub_1000226B0(a3, (uint64_t)v6, &qword_100409210);
  if (*(void *)(v4 + 32))
  {
    uint64_t v7 = *(void *)(v4 + 64);
    if (v7)
    {
      uint64_t v8 = *(void *)(v4 + 72);
      sub_100021104(v6, *(void *)(v4 + 64));
      uint64_t v9 = swift_allocObject(&unk_1003E6EE0, 24LL, 7LL);
      swift_weakInit(v9 + 16, v4);
      uint64_t v10 = *(uint64_t (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v8 + 8);
      swift_retain();
      uint64_t v11 = v10(sub_100144150, v9, v7, v8);
      swift_release(v9);
      sub_1000225EC(a3, &qword_100409210);
      swift_release(v9);
    }

    else
    {
      sub_1000225EC(a3, &qword_100409210);
      uint64_t v11 = 0LL;
    }

    *(void *)(v4 + 80)  = v11;
    *(_BYTE *)(v4 + 88)  = v7 == 0;
  }

  else
  {
    sub_1000225EC(a3, &qword_100409210);
  }

  return v4;
}

uint64_t sub_10012B870(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = sub_10012B9A4();
    swift_release(v3);
    return swift_bridgeObjectRelease(v4);
  }

  return result;
}

uint64_t sub_10012B8D0()
{
  uint64_t v1 = (void *)v0;
  if ((*(_BYTE *)(v0 + 88) & 1) == 0)
  {
    uint64_t v2 = *(void *)(v0 + 80);
    sub_1000226B0((uint64_t)(v1 + 5), (uint64_t)v6, &qword_100409210);
    uint64_t v3 = v7;
    if (v7)
    {
      uint64_t v4 = v8;
      sub_100021104(v6, v7);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v3, v4);
      sub_100002AC4(v6);
    }

    else
    {
      sub_1000225EC((uint64_t)v6, &qword_100409210);
    }
  }

  swift_bridgeObjectRelease(v1[2]);
  swift_bridgeObjectRelease(v1[4]);
  sub_1000225EC((uint64_t)(v1 + 5), &qword_100409210);
  sub_100021018(v1[12], v1[13]);
  return swift_deallocClassInstance(v1, 112LL, 7LL);
}

uint64_t sub_10012B9A4()
{
  uint64_t v1 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v66 = v5;
  uint64_t v67 = v6;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100002274(&qword_100409200);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100002274(&qword_100409208);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v59 - v16;
  uint64_t v18 = *(void *)(v0 + 32);
  if (!v18)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1LL, 1LL, v12);
LABEL_7:
    sub_1000225EC((uint64_t)v11, &qword_100409200);
    return 0LL;
  }

  uint64_t v61 = v2;
  uint64_t v62 = (void *)v15;
  uint64_t v65 = v4;
  uint64_t v19 = *(void *)(v0 + 24);
  sub_1000226B0(v0 + 40, (uint64_t)v69, &qword_100409210);
  uint64_t v20 = v70;
  uint64_t v63 = v17;
  uint64_t v64 = v0;
  if (v70)
  {
    uint64_t v21 = v71;
    sub_100021104(v69, v70);
    uint64_t v60 = *(int *)(v12 + 48);
    uint64_t v22 = v19;
    uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 24);
    swift_bridgeObjectRetain(v18);
    uint64_t v24 = v21;
    uint64_t v17 = v63;
    uint64_t v25 = v23(v11, v22, v18, v20, v24);
    *(void *)&v11[v60]  = v25;
    uint64_t v0 = v64;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0LL, 1LL, v12);
    sub_100002AC4(v69);
  }

  else
  {
    swift_bridgeObjectRetain(v18);
    sub_1000225EC((uint64_t)v69, &qword_100409210);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1LL, 1LL, v12);
  }

  swift_bridgeObjectRelease(v18);
  uint64_t v26 = *(int *)(v12 + 48);
  sub_1000586C0((uint64_t)v11, (uint64_t)v17, &qword_100408AE0);
  uint64_t v27 = *(void *)&v11[v26];
  *(void *)&v17[v26]  = v27;
  uint64_t v28 = *(int *)(v12 + 48);
  uint64_t v29 = (uint64_t)v62;
  sub_1000226B0((uint64_t)v17, (uint64_t)v62, &qword_100408AE0);
  *(void *)(v29 + v28)  = v27;
  swift_retain();
  uint64_t v30 = swift_bridgeObjectRetain(v27);
  char v31 = sub_10014065C(v30, v0);
  swift_bridgeObjectRelease(v27);
  swift_release(v0);
  sub_1000225EC(v29, &qword_100408AE0);
  uint64_t v32 = v31[2];
  if (!v32)
  {
LABEL_25:
    sub_1000225EC((uint64_t)v17, &qword_100409208);
    swift_bridgeObjectRelease(v31);
    return 0LL;
  }

  uint64_t v33 = v61;
  uint64_t v34 = (uint64_t)v31 + ((*(unsigned __int8 *)(v61 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80));
  uint64_t v35 = (void *)(v0 + 16);
  swift_beginAccess(v0 + 16, v69, 33LL, 0LL);
  uint64_t v36 = *(void *)(v33 + 72);
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
  uint64_t v62 = v31;
  swift_bridgeObjectRetain(v31);
  uint64_t v38 = (uint64_t)v65;
  uint64_t v39 = v66;
  do
  {
    v37(v8, v34, v39);
    sub_100057FE8(v34, v38, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(*v35);
    uint64_t v68 = (void *)*v35;
    uint64_t v42 = v68;
    *uint64_t v35 = 0x8000000000000000LL;
    unint64_t v44 = sub_10001C578((uint64_t)v8);
    uint64_t v45 = v42[2];
    BOOL v46 = (v43 & 1) == 0;
    uint64_t v47 = v45 + v46;
    if (__OFADD__(v45, v46))
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v66);
      __break(1u);
      return result;
    }

    char v48 = v43;
    if (v42[3] >= v47)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_10013D4AC();
      }
    }

    else
    {
      sub_1001388B8(v47, isUniquelyReferenced_nonNull_native);
      unint64_t v49 = sub_10001C578((uint64_t)v8);
      if ((v48 & 1) != (v50 & 1)) {
        goto LABEL_30;
      }
      unint64_t v44 = v49;
    }

    uint64_t v39 = v66;
    uint64_t v51 = v68;
    if ((v48 & 1) != 0)
    {
      uint64_t v38 = (uint64_t)v65;
      sub_1001440B0((uint64_t)v65, v68[7] + v44 * v36);
    }

    else
    {
      v68[(v44 >> 6) + 8] |= 1LL << v44;
      v37((char *)(v51[6] + *(void *)(v67 + 72) * v44), (uint64_t)v8, v39);
      uint64_t v38 = (uint64_t)v65;
      sub_100022628((uint64_t)v65, v51[7] + v44 * v36, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      uint64_t v52 = v51[2];
      BOOL v53 = __OFADD__(v52, 1LL);
      uint64_t v54 = v52 + 1;
      if (v53) {
        goto LABEL_29;
      }
      v51[2]  = v54;
      uint64_t v51 = v68;
    }

    uint64_t v40 = *v35;
    *uint64_t v35 = v51;
    swift_bridgeObjectRelease(v40);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v8, v39);
    v34 += v36;
    --v32;
  }

  while (v32);
  swift_endAccess(v69);
  char v31 = v62;
  swift_bridgeObjectRelease(v62);
  uint64_t v17 = v63;
  if (!v31[2]) {
    goto LABEL_25;
  }
  uint64_t v55 = *(void (**)(uint64_t))(v64 + 96);
  if (v55)
  {
    uint64_t v56 = *(void *)(v64 + 104);
    uint64_t v57 = swift_retain();
    v55(v57);
    sub_100021018((uint64_t)v55, v56);
  }

  sub_1000225EC((uint64_t)v17, &qword_100409208);
  return (uint64_t)v31;
}

uint64_t sub_10012BED8@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v4 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_100408AA8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v26 - v10;
  swift_beginAccess(v2 + 16, v32, 0LL, 0LL);
  uint64_t v12 = *(void *)(v2 + 16);
  uint64_t v13 = swift_bridgeObjectRetain(v12);
  sub_100126070(v13, a1, (uint64_t)v9);
  __n128 v14 = swift_bridgeObjectRelease(v12);
  uint64_t v15 = *(unsigned int (**)(void, void, void, __n128))(v5 + 48);
  if (v15(v9, 1LL, v4, v14) == 1)
  {
    uint64_t v16 = sub_10012B9A4();
    if (v16)
    {
      uint64_t v29 = v16;
      uint64_t v30 = v5;
      uint64_t v27 = v15;
      uint64_t v28 = v4;
      uint64_t v17 = *(void *)(v16 + 16);
      if (v17)
      {
        uint64_t v18 = v29 + ((*(unsigned __int8 *)(v30 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
        uint64_t v19 = *(void *)(v30 + 72);
        while (1)
        {
          sub_100057FE8(v18, (uint64_t)v7, type metadata accessor for LongTermPairingKeys.PublicIdentity);
          if ((a1(v7) & 1) != 0) {
            break;
          }
          sub_10005802C((uint64_t)v7, type metadata accessor for LongTermPairingKeys.PublicIdentity);
          v18 += v19;
          if (!--v17) {
            goto LABEL_7;
          }
        }

        sub_100022628((uint64_t)v7, (uint64_t)v11, type metadata accessor for LongTermPairingKeys.PublicIdentity);
        uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56);
        uint64_t v21 = v11;
        uint64_t v22 = 0LL;
      }

      else
      {
LABEL_7:
        uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56);
        uint64_t v21 = v11;
        uint64_t v22 = 1LL;
      }

      uint64_t v4 = v28;
      v20(v21, v22, 1LL, v28);
      swift_bridgeObjectRelease(v29);
      uint64_t v23 = v31;
      uint64_t v15 = v27;
    }

    else
    {
      uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
      v20(v11, 1LL, 1LL, v4);
      uint64_t v23 = v31;
    }

    sub_1000225EC((uint64_t)v9, &qword_100408AA8);
  }

  else
  {
    sub_100022628((uint64_t)v9, (uint64_t)v11, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v20(v11, 0LL, 1LL, v4);
    uint64_t v23 = v31;
  }

  if (((unsigned int (*)(char *, uint64_t, uint64_t))v15)(v11, 1LL, v4) == 1)
  {
    sub_1000225EC((uint64_t)v11, &qword_100408AA8);
    uint64_t v24 = 1LL;
  }

  else
  {
    sub_100022628((uint64_t)v11, v23, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    uint64_t v24 = 0LL;
  }

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v20)(v23, v24, 1LL, v4);
}

uint64_t sub_10012C190()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = v1;
  swift_beginAccess(v1 + 16, v17, 0LL, 0LL);
  uint64_t v16 = *(void *)(v1 + 16);
  uint64_t v9 = v16;
  uint64_t v10 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v8, 1LL, 1LL, v10);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for Mirror.AncestorRepresentation.generated(_:),  v2);
  uint64_t v11 = type metadata accessor for LongTermPairingKeys.PairedDevices();
  swift_retain();
  swift_bridgeObjectRetain(v9);
  uint64_t v12 = sub_100002274(&qword_1004091F0);
  uint64_t v13 = sub_1000572E4(&qword_1004091F8, &qword_1004091F0, (uint64_t)&protocol conformance descriptor for [A : B].Values);
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(&v18, &v16, v8, v5, v11, v12, v13);
}

uint64_t sub_10012C30C()
{
  uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t v6 = v1;
  v2._uint64_t countAndFlagsBits = 0x7365636976656420LL;
  v2._object  = (void *)0xE800000000000000LL;
  String.append(_:)(v2);
  return v5;
}

uint64_t sub_10012C38C()
{
  return sub_10012C190();
}

uint64_t LongTermPairingKeys.updatedPairedDevicesHandler.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for LongTermPairingKeys(0LL) + 24));
  uint64_t v2 = *(void *)(v1 + 96);
  sub_10002254C(v2, *(void *)(v1 + 104));
  return v2;
}

uint64_t LongTermPairingKeys.updatedPairedDevicesHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + *(int *)(type metadata accessor for LongTermPairingKeys(0LL) + 24));
  uint64_t v6 = *(void *)(v5 + 96);
  uint64_t v7 = *(void *)(v5 + 104);
  *(void *)(v5 + 96)  = a1;
  *(void *)(v5 + 104)  = a2;
  return sub_100021018(v6, v7);
}

uint64_t (*LongTermPairingKeys.updatedPairedDevicesHandler.modify( uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = *(void *)(v1 + *(int *)(type metadata accessor for LongTermPairingKeys(0LL) + 24));
  a1[2]  = v3;
  uint64_t v4 = *(void *)(v3 + 96);
  uint64_t v5 = *(void *)(v3 + 104);
  *a1  = v4;
  a1[1]  = v5;
  sub_10002254C(v4, v5);
  return sub_10012C474;
}

uint64_t sub_10012C474(uint64_t *a1, char a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(v2 + 96);
  uint64_t v6 = *(void *)(v2 + 104);
  *(void *)(v2 + 96)  = *a1;
  *(void *)(v2 + 104)  = v3;
  if ((a2 & 1) != 0)
  {
    sub_10002254C(v4, v3);
    sub_100021018(v5, v6);
    uint64_t v7 = v4;
    uint64_t v8 = v3;
  }

  else
  {
    uint64_t v7 = v5;
    uint64_t v8 = v6;
  }

  return sub_100021018(v7, v8);
}

uint64_t sub_10012C4D4()
{
  uint64_t result = sub_1000EF90C(0xD000000000000017LL, 0x80000001003652C0LL);
  qword_100408A28  = result;
  unk_100408A30  = v1;
  return result;
}

uint64_t LongTermPairingKeys.authenticationToken(using:on:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = v2 + *(int *)(type metadata accessor for LongTermPairingKeys(0LL) + 20);
  uint64_t v9 = type metadata accessor for LongTermPairingKeys.Identity(0LL);
  uint64_t v10 = v8 + *(int *)(v9 + 20);
  P256.KeyAgreement.PrivateKey.publicKey.getter(v9);
  uint64_t v11 = sub_100140E10(v10, (uint64_t)v7, a2 & 0xFFFFFFFFFFFFLL);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v11;
}

uint64_t LongTermPairingKeys.authenticationRequest(forPeer:with:using:on:myServiceSpecificInfo:)@<X0>( unint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, void, uint64_t, uint64_t)@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v149  = a5;
  v154  = a4;
  v159  = a3;
  v166  = a1;
  v170  = a6;
  v171  = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v171 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v133 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v158  = (char *)&v133 - v10;
  __chkstk_darwin();
  v148  = (char *)&v133 - v11;
  __chkstk_darwin();
  v145  = (char *)&v133 - v12;
  sub_100002274(&qword_100408A90);
  __chkstk_darwin();
  v155  = (uint64_t)&v133 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v147  = sub_100002274(&qword_100408A98);
  __chkstk_darwin();
  v146  = (uint64_t)&v133 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0LL);
  __chkstk_darwin();
  v150  = (uint64_t)&v133 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v151  = (uint64_t)&v133 - v16;
  sub_100002274(&qword_100408AA0);
  __chkstk_darwin();
  *(void *)&v157  = (char *)&v133 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for SharedSecret(0LL);
  v160  = *(void *)(v18 - 8);
  v161  = v18;
  __chkstk_darwin();
  v156  = (char *)&v133 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_100408AA8);
  __chkstk_darwin();
  v153  = (uint64_t)&v133 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v163  = (unint64_t)&v133 - v21;
  uint64_t v22 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
  v164  = *(void *)(v22 - 8);
  v165  = v22;
  __chkstk_darwin();
  v162  = (uint64_t)&v133 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_10040D470);
  __chkstk_darwin();
  uint64_t v25 = (char *)&v133 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin();
  v152  = (char *)&v133 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v167  = (char *)&v133 - v29;
  uint64_t v30 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  __chkstk_darwin();
  uint64_t v32 = (char *)&v133 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = a2;
  sub_1000667B0(a2, (uint64_t)v32);
  uint64_t v34 = (uint64_t *)&v32[*(int *)(v30 + 28)];
  unint64_t v35 = v34[1];
  v168  = *v34;
  sub_10002255C(v168, v35);
  sub_10005802C((uint64_t)v32, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  v169  = v35;
  unint64_t v36 = v35 >> 60;
  uint64_t v38 = v171;
  uint64_t v37 = v172;
  if (v36 > 0xE)
  {
LABEL_4:
    uint64_t v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v37, v38);
    uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
    os_log_type_t v41 = static os_log_type_t.error.getter(v40);
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v42 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  v41,  "Authentication request generation failed because no authentication token found",  v42,  2u);
      swift_slowDealloc(v42, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v38);
    goto LABEL_7;
  }

  v144  = v7;
  sub_1000667B0(v33, (uint64_t)v32);
  sub_1000226B0((uint64_t)&v32[*(int *)(v30 + 24)], (uint64_t)v25, (uint64_t *)&unk_10040D470);
  sub_10005802C((uint64_t)v32, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26) == 1)
  {
    sub_100020B40(v168, v169);
    sub_1000225EC((uint64_t)v25, (uint64_t *)&unk_10040D470);
    uint64_t v38 = v171;
    uint64_t v37 = v172;
    uint64_t v7 = v144;
    goto LABEL_4;
  }

  uint64_t v45 = v26;
  unint64_t v46 = v166;
  uint64_t v47 = (char *)(v166 >> 40);
  unint64_t v48 = HIDWORD(v166);
  unint64_t v49 = v166 >> 24;
  unint64_t v50 = v166 >> 16;
  v142  = v27;
  uint64_t v51 = *(void (**)(char *, char *))(v27 + 32);
  unint64_t v52 = v166 >> 8;
  BOOL v53 = v167;
  v143  = v45;
  v51(v167, v25);
  v137  = type metadata accessor for LongTermPairingKeys(0LL);
  uint64_t v54 = v172;
  __chkstk_darwin();
  *(&v133 - 4)  = (unint64_t)v53;
  *((_BYTE *)&v133 - 24)  = v46;
  v138  = v52;
  *((_BYTE *)&v133 - 23)  = BYTE1(v46);
  v139  = v50;
  *((_BYTE *)&v133 - 22)  = BYTE2(v46);
  v140  = v49;
  *((_BYTE *)&v133 - 21)  = BYTE3(v46);
  v141  = v48;
  *((_BYTE *)&v133 - 20)  = BYTE4(v46);
  *((_BYTE *)&v133 - 19)  = (_BYTE)v47;
  uint64_t v56 = v168;
  unint64_t v55 = v169;
  *(&v133 - 2)  = v168;
  *(&v133 - 1)  = v55;
  uint64_t v57 = v163;
  sub_10012BED8((uint64_t (*)(char *))sub_100141108, v163);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v164 + 48))(v57, 1LL, v165) == 1)
  {
    sub_1000225EC(v57, &qword_100408AA8);
    uint64_t v58 = v144;
    uint64_t v59 = v158;
    uint64_t v60 = v171;
    uint64_t v61 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v144 + 16))(v158, v54, v171);
    uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
    os_log_type_t v63 = static os_log_type_t.error.getter(v62);
    BOOL v64 = os_log_type_enabled(v62, v63);
    uint64_t v65 = v143;
    if (v64)
    {
      uint64_t v66 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v66 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v62,  v63,  "Authentication request generation failed because no paired device matches the authentication token",  v66,  2u);
      swift_slowDealloc(v66, -1LL, -1LL);
    }

    sub_100020B40(v56, v55);

    (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v60);
    (*(void (**)(char *, uint64_t))(v142 + 8))(v167, v65);
  }

  else
  {
    v158  = v47;
    uint64_t v67 = v162;
    sub_100022628(v57, v162, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    uint64_t v68 = v157;
    P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)(v53);
    unint64_t v69 = (unint64_t)v53;
    uint64_t v71 = v160;
    uint64_t v70 = v161;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v160 + 56))(v68, 0LL, 1LL, v161);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v68, 1LL, v70) == 1)
    {
      sub_10005802C(v67, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      sub_100020B40(v56, v169);
      (*(void (**)(unint64_t, uint64_t))(v142 + 8))(v69, v143);
      sub_1000225EC(v68, &qword_100408AA0);
    }

    else
    {
      char v72 = v154;
      v163  = v154 >> 40;
      unint64_t v136 = HIDWORD(v154);
      unint64_t v135 = v154 >> 24;
      unint64_t v134 = v154 >> 16;
      unint64_t v73 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 32);
      unint64_t v133 = v154 >> 8;
      uint64_t v74 = v73(v156, v68, v70);
      unint64_t v75 = v152;
      uint64_t v76 = P256.KeyAgreement.PrivateKey.publicKey.getter(v74);
      uint64_t v77 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v76);
      unint64_t v79 = v78;
      v152  = *(char **)(v142 + 8);
      uint64_t v80 = ((uint64_t (*)(char *, uint64_t))v152)(v75, v143);
      uint64_t v81 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v80);
      unint64_t v83 = v82;
      v173  = v77;
      v174  = v79;
      sub_100020AFC(v77, v79);
      sub_1000FA9C4(v81, v83);
      sub_1000208D8(v81, v83);
      sub_1000208D8(v77, v79);
      uint64_t v84 = v173;
      unint64_t v85 = v174;
      uint64_t v86 = v162;
      SharedSecret.withUnsafeBytes<A>(_:)(&v175, sub_100061064, 0LL, &type metadata for Data);
      uint64_t v87 = v175;
      unint64_t v88 = v176;
      v175  = v84;
      v176  = v85;
      sub_100020AFC(v84, v85);
      sub_100020AFC(v87, v88);
      sub_1000FA9C4(v87, v88);
      sub_1000208D8(v87, v88);
      sub_1000208D8(v87, v88);
      sub_1000208D8(v84, v85);
      v89  = v175;
      unint64_t v90 = v176;
      uint64_t v91 = sub_100002274(&qword_1004040A8);
      uint64_t v92 = swift_allocObject(v91, 38LL, 7LL);
      v157  = xmmword_10033A980;
      *(_OWORD *)(v92 + 16)  = xmmword_10033A980;
      *(_BYTE *)(v92 + 32)  = v72;
      *(_BYTE *)(v92 + 33)  = v133;
      *(_BYTE *)(v92 + 34)  = v134;
      *(_BYTE *)(v92 + 35)  = v135;
      *(_BYTE *)(v92 + 36)  = v136;
      *(_BYTE *)(v92 + 37)  = v163;
      uint64_t v93 = sub_1000FB08C(v92);
      unint64_t v95 = v94;
      swift_bridgeObjectRelease(v92);
      uint64_t v96 = swift_allocObject(v91, 38LL, 7LL);
      *(_OWORD *)(v96 + 16)  = v157;
      *(_BYTE *)(v96 + 32)  = v166;
      *(_BYTE *)(v96 + 33)  = v138;
      *(_BYTE *)(v96 + 34)  = v139;
      *(_BYTE *)(v96 + 35)  = v140;
      *(_BYTE *)(v96 + 36)  = v141;
      *(_BYTE *)(v96 + 37)  = (_BYTE)v158;
      uint64_t v97 = sub_1000FB08C(v96);
      unint64_t v99 = v98;
      swift_bridgeObjectRelease(v96);
      v173  = v93;
      v174  = v95;
      sub_100020AFC(v93, v95);
      sub_1000FA9C4(v97, v99);
      sub_1000208D8(v97, v99);
      sub_1000208D8(v93, v95);
      v100  = v173;
      unint64_t v101 = v174;
      uint64_t v102 = v153;
      sub_100057FE8(v86, v153, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v164 + 56))(v102, 0LL, 1LL, v165);
      uint64_t v103 = v155;
      sub_10012B23C(v89, v90, v100, v101, v102, v155);
      sub_1000208D8(v100, v101);
      sub_1000208D8(v89, v90);
      sub_1000225EC(v102, &qword_100408AA8);
      uint64_t v104 = sub_100002274(&qword_100408AB8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 48LL))(v103, 1LL, v104) == 1)
      {
        sub_1000225EC(v103, &qword_100408A90);
        v105  = v144;
        v106  = v148;
        uint64_t v107 = v171;
        v108  = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v144 + 16))(v148, v172, v171);
        unint64_t v109 = (os_log_s *)Logger.logObject.getter(v108);
        os_log_type_t v110 = static os_log_type_t.error.getter(v109);
        if (os_log_type_enabled(v109, v110))
        {
          v111  = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)v111  = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v109,  v110,  "Authentication request generation failed because authentication key derivation failed",  v111,  2u);
          swift_slowDealloc(v111, -1LL, -1LL);
        }

        sub_100020B40(v168, v169);

        (*(void (**)(char *, uint64_t))(v105 + 8))(v106, v107);
        (*(void (**)(char *, uint64_t))(v160 + 8))(v156, v161);
        sub_10005802C(v86, type metadata accessor for LongTermPairingKeys.PublicIdentity);
        v112  = v167;
      }

      else
      {
        uint64_t v113 = v103 + *(int *)(v104 + 48);
        uint64_t v114 = v147;
        v115  = v146;
        uint64_t v116 = v146 + *(int *)(v147 + 48);
        sub_100022628(v103, v146, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
        sub_100022628(v113, v116, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
        uint64_t v117 = v115 + *(int *)(v114 + 48);
        v118  = v151;
        sub_100022628(v115, v151, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
        v119  = v150;
        sub_100022628(v117, v150, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
        v120  = v172;
        uint64_t v121 = sub_1001293E0(v172 + *(int *)(v137 + 20), v159, v69, v149);
        if (v121)
        {
          v122  = v121;
          sub_100020B40(v168, v169);
          sub_10005802C(v118, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
          (*(void (**)(char *, uint64_t))(v160 + 8))(v156, v161);
          sub_10005802C(v86, type metadata accessor for LongTermPairingKeys.PublicIdentity);
          ((void (*)(unint64_t, uint64_t))v152)(v69, v143);
          v123  = sub_100002274(&qword_100408AB0);
          uint64_t v124 = *(int *)(v123 + 48);
          v125  = v170;
          sub_100022628(v119, v170, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
          *(void *)(v125 + v124)  = v122;
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v123 - 8) + 56LL))( v125,  0LL,  1LL,  v123);
        }

        uint64_t v126 = v144;
        uint64_t v127 = v145;
        uint64_t v128 = v171;
        uint64_t v129 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v144 + 16))(v145, v120, v171);
        uint64_t v130 = (os_log_s *)Logger.logObject.getter(v129);
        os_log_type_t v131 = static os_log_type_t.error.getter(v130);
        if (os_log_type_enabled(v130, v131))
        {
          v132  = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)v132  = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v130,  v131,  "Authentication request generation failed because encrypting the request failed",  v132,  2u);
          swift_slowDealloc(v132, -1LL, -1LL);
        }

        sub_100020B40(v168, v169);

        (*(void (**)(char *, uint64_t))(v126 + 8))(v127, v128);
        sub_10005802C(v119, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
        sub_10005802C(v151, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
        (*(void (**)(char *, uint64_t))(v160 + 8))(v156, v161);
        sub_10005802C(v86, type metadata accessor for LongTermPairingKeys.PublicIdentity);
        v112  = (char *)v69;
      }

      ((void (*)(char *, uint64_t))v152)(v112, v143);
    }
  }

uint64_t sub_10012D48C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LongTermPairingKeys.Identity(0LL);
  uint64_t v7 = sub_100140E10(a1 + *(int *)(v6 + 20), a2, a3 & 0xFFFFFFFFFFFFLL);
  unint64_t v9 = v8;
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v7, v8);
  char v11 = v10;
  sub_1000208D8(v7, v9);
  return v11 & 1;
}

uint64_t LongTermPairingKeys.authenticationResponse(forPeer:with:using:on:myServiceSpecificInfo:)( unint64_t a1, uint64_t a2, void (*a3)(uint64_t, void, uint64_t, uint64_t), unint64_t a4, uint64_t a5)
{
  v219  = a5;
  v245  = a4;
  v250  = a3;
  v240  = a1;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  v252  = v6;
  v253  = v7;
  __chkstk_darwin();
  v251  = (uint64_t)&v196 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v247  = (unint64_t)&v196 - v9;
  __chkstk_darwin();
  v246  = (char *)&v196 - v10;
  __chkstk_darwin();
  v236  = (char *)&v196 - v11;
  __chkstk_darwin();
  v226  = (char *)&v196 - v12;
  __chkstk_darwin();
  v221  = (char *)&v196 - v13;
  __chkstk_darwin();
  v220  = (char *)&v196 - v14;
  __chkstk_darwin();
  v218  = (char *)&v196 - v15;
  v216  = type metadata accessor for AES.GCM.SealedBox(0LL);
  v215  = *(void *)(v216 - 8);
  __chkstk_darwin();
  v217  = (char *)&v196 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
  v242  = *(void *)(v17 - 8);
  v243  = v17;
  __chkstk_darwin();
  v222  = (uint64_t)&v196 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_100408AC0);
  __chkstk_darwin();
  v235  = (uint64_t)&v196 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v224  = sub_100002274(&qword_100408AC8);
  __chkstk_darwin();
  v223  = (char *)&v196 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v230  = type metadata accessor for P256.Signing.ECDSASignature(0LL);
  v229  = *(void *)(v230 - 8);
  __chkstk_darwin();
  v228  = (char *)&v196 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v232  = type metadata accessor for UUID(0LL);
  v231  = *(void *)(v232 - 8);
  __chkstk_darwin();
  v227  = (char *)&v196 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_100408AA8);
  __chkstk_darwin();
  v225  = (uint64_t)&v196 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v238  = (char *)&v196 - v24;
  sub_100002274(&qword_100408A90);
  __chkstk_darwin();
  v239  = (uint64_t)&v196 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v234  = sub_100002274(&qword_100408A98);
  __chkstk_darwin();
  v233  = (uint64_t)&v196 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v214  = type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0LL);
  __chkstk_darwin();
  v241  = (uint64_t)&v196 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v237  = (uint64_t)&v196 - v28;
  sub_100002274(&qword_100408AA0);
  __chkstk_darwin();
  uint64_t v30 = (char *)&v196 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = type metadata accessor for SharedSecret(0LL);
  v248  = *(void *)(v31 - 8);
  v249  = v31;
  __chkstk_darwin();
  v244  = (char *)&v196 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  __chkstk_darwin();
  unint64_t v35 = (char *)&v196 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_10040D470);
  __chkstk_darwin();
  uint64_t v37 = (char *)&v196 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v39 = *(void *)(v38 - 8);
  __chkstk_darwin();
  os_log_type_t v41 = (char *)&v196 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v43 = (char *)&v196 - v42;
  sub_1000667B0(a2, (uint64_t)v35);
  sub_1000226B0((uint64_t)&v35[*(int *)(v33 + 24)], (uint64_t)v37, (uint64_t *)&unk_10040D470);
  sub_10005802C((uint64_t)v35, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1LL, v38) == 1)
  {
    sub_1000225EC((uint64_t)v37, (uint64_t *)&unk_10040D470);
    uint64_t v44 = v253;
    uint64_t v45 = v251;
    uint64_t v46 = v252;
    uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v253 + 16))(v251, v254, v252);
    unint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
    os_log_type_t v49 = static os_log_type_t.error.getter(v48);
    if (os_log_type_enabled(v48, v49))
    {
      unint64_t v50 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v50 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v48,  v49,  "Authentication response generation failed because no public key found",  v50,  2u);
      swift_slowDealloc(v50, -1LL, -1LL);
    }

    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v45, v46);
    return 0LL;
  }

  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v43, v37, v38);
  sub_1000667B0(a2, (uint64_t)v35);
  v213  = v33;
  uint64_t v51 = (uint64_t *)&v35[*(int *)(v33 + 32)];
  uint64_t v53 = *v51;
  unint64_t v52 = v51[1];
  sub_10002255C(*v51, v52);
  sub_10005802C((uint64_t)v35, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  if (v52 >> 60 == 15)
  {
    uint64_t v54 = v43;
    uint64_t v55 = v253;
    unint64_t v56 = v247;
    uint64_t v57 = v252;
    uint64_t v58 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v253 + 16))(v247, v254, v252);
    uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
    os_log_type_t v60 = static os_log_type_t.error.getter(v59);
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v61 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v59,  v60,  "Authentication response generation failed because no encrypted signature found",  v61,  2u);
      swift_slowDealloc(v61, -1LL, -1LL);
    }

    (*(void (**)(unint64_t, uint64_t))(v55 + 8))(v56, v57);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v54, v38);
    return 0LL;
  }

  v251  = v53;
  v247  = v52;
  P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)(v43);
  v212  = a2;
  uint64_t v63 = v248;
  uint64_t v62 = v249;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v248 + 56))(v30, 0LL, 1LL, v249);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v30, 1LL, v62) == 1)
  {
    sub_1000225EC((uint64_t)v30, &qword_100408AA0);
    uint64_t v64 = v253;
    uint64_t v65 = v246;
    uint64_t v66 = v252;
    uint64_t v67 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v253 + 16))(v246, v254, v252);
    uint64_t v68 = (os_log_s *)Logger.logObject.getter(v67);
    os_log_type_t v69 = static os_log_type_t.error.getter(v68);
    if (os_log_type_enabled(v68, v69))
    {
      uint64_t v70 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v70 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v68,  v69,  "Authentication response generation failed because shared secret derivation failed",  v70,  2u);
      swift_slowDealloc(v70, -1LL, -1LL);
    }

    sub_100020B40(v251, v247);

    (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v66);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v43, v38);
    return 0LL;
  }

  v198  = v35;
  v207  = v245 >> 40;
  v210  = HIDWORD(v245);
  v209  = v245 >> 24;
  v208  = v245 >> 16;
  v206  = v245 >> 8;
  char v73 = v240;
  v205  = v240 >> 40;
  v204  = HIDWORD(v240);
  v203  = v240 >> 24;
  v202  = v240 >> 16;
  uint64_t v74 = *(uint64_t (**)(char *, char *, uint64_t))(v63 + 32);
  v201  = v240 >> 8;
  uint64_t v75 = v74(v244, v30, v62);
  v246  = v43;
  uint64_t v76 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v75);
  unint64_t v78 = v77;
  uint64_t v79 = P256.KeyAgreement.PrivateKey.publicKey.getter(v76);
  uint64_t v80 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v79);
  uint64_t v81 = v38;
  unint64_t v83 = v82;
  uint64_t v84 = *(void (**)(char *, uint64_t))(v39 + 8);
  v211  = v81;
  v199  = v84;
  v84(v41, v81);
  v255  = v76;
  v256  = v78;
  sub_100020AFC(v76, v78);
  sub_100020AFC(v80, v83);
  sub_1000FA9C4(v80, v83);
  sub_1000208D8(v80, v83);
  sub_1000208D8(v80, v83);
  sub_1000208D8(v76, v78);
  uint64_t v85 = v255;
  unint64_t v86 = v256;
  SharedSecret.withUnsafeBytes<A>(_:)(&v257, sub_100061064, 0LL, &type metadata for Data);
  v197  = 0LL;
  uint64_t v87 = v257;
  unint64_t v88 = v258;
  v257  = v85;
  v258  = v86;
  sub_100020AFC(v85, v86);
  sub_100020AFC(v87, v88);
  sub_1000FA9C4(v87, v88);
  sub_1000208D8(v87, v88);
  sub_1000208D8(v87, v88);
  sub_1000208D8(v85, v86);
  v89  = v257;
  unint64_t v90 = v258;
  uint64_t v91 = sub_100002274(&qword_1004040A8);
  uint64_t v92 = swift_allocObject(v91, 38LL, 7LL);
  v200  = xmmword_10033A980;
  *(_OWORD *)(v92 + 16)  = xmmword_10033A980;
  *(_BYTE *)(v92 + 32)  = v73;
  *(_BYTE *)(v92 + 33)  = v201;
  *(_BYTE *)(v92 + 34)  = v202;
  *(_BYTE *)(v92 + 35)  = v203;
  *(_BYTE *)(v92 + 36)  = v204;
  *(_BYTE *)(v92 + 37)  = v205;
  uint64_t v93 = sub_1000FB08C(v92);
  unint64_t v95 = v94;
  swift_bridgeObjectRelease(v92);
  uint64_t v96 = swift_allocObject(v91, 38LL, 7LL);
  *(_OWORD *)(v96 + 16)  = v200;
  *(_BYTE *)(v96 + 32)  = v245;
  *(_BYTE *)(v96 + 33)  = v206;
  *(_BYTE *)(v96 + 34)  = v208;
  *(_BYTE *)(v96 + 35)  = v209;
  *(_BYTE *)(v96 + 36)  = v210;
  *(_BYTE *)(v96 + 37)  = v207;
  uint64_t v97 = sub_1000FB08C(v96);
  unint64_t v99 = v98;
  swift_bridgeObjectRelease(v96);
  v255  = v93;
  v256  = v95;
  sub_100020AFC(v93, v95);
  sub_1000FA9C4(v97, v99);
  sub_1000208D8(v97, v99);
  sub_1000208D8(v93, v95);
  v100  = v255;
  unint64_t v101 = v256;
  uint64_t v102 = (uint64_t)v238;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v242 + 56))(v238, 1LL, 1LL, v243);
  uint64_t v103 = v239;
  sub_10012B23C(v89, v90, v100, v101, v102, v239);
  sub_1000208D8(v100, v101);
  sub_1000208D8(v89, v90);
  sub_1000225EC(v102, &qword_100408AA8);
  uint64_t v104 = sub_100002274(&qword_100408AB8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 48LL))(v103, 1LL, v104) == 1)
  {
    sub_1000225EC(v103, &qword_100408A90);
    v105  = v253;
    v106  = v236;
    uint64_t v107 = v252;
    v108  = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v253 + 16))(v236, v254, v252);
    unint64_t v109 = (os_log_s *)Logger.logObject.getter(v108);
    os_log_type_t v110 = static os_log_type_t.error.getter(v109);
    if (os_log_type_enabled(v109, v110))
    {
      v111  = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v111  = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v109,  v110,  "Authentication response generation failed because authentication key derivation failed",  v111,  2u);
      swift_slowDealloc(v111, -1LL, -1LL);
    }

    sub_100020B40(v251, v247);

    (*(void (**)(char *, uint64_t))(v105 + 8))(v106, v107);
    (*(void (**)(char *, uint64_t))(v248 + 8))(v244, v249);
    v112  = v246;
LABEL_24:
    v199(v112, v211);
    return 0LL;
  }

  uint64_t v113 = v103 + *(int *)(v104 + 48);
  uint64_t v114 = v234;
  v115  = v233;
  uint64_t v116 = v233 + *(int *)(v234 + 48);
  sub_100022628(v103, v233, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
  sub_100022628(v113, v116, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
  uint64_t v117 = v115 + *(int *)(v114 + 48);
  v118  = v237;
  sub_100022628(v115, v237, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
  sub_100022628(v117, v241, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
  v119  = v235;
  v120  = v247;
  sub_10012A3D0(v251, v247, v235);
  uint64_t v121 = sub_100002274(&qword_100408AD0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v121 - 8) + 48LL))(v119, 1LL, v121) == 1)
  {
    sub_1000225EC(v119, &qword_100408AC0);
    v122  = v253;
    v123  = v226;
    uint64_t v124 = v252;
    v125  = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v253 + 16))(v226, v254, v252);
    uint64_t v126 = (os_log_s *)Logger.logObject.getter(v125);
    os_log_type_t v127 = static os_log_type_t.error.getter(v126);
    BOOL v128 = os_log_type_enabled(v126, v127);
    uint64_t v129 = v246;
    if (v128)
    {
      uint64_t v130 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v130 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v126,  v127,  "Authentication response generation failed because authentication request parsing failed",  v130,  2u);
      os_log_type_t v131 = v130;
      v120  = v247;
      swift_slowDealloc(v131, -1LL, -1LL);
    }

    sub_100020B40(v251, v120);

    (*(void (**)(char *, uint64_t))(v122 + 8))(v123, v124);
    sub_10005802C(v241, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
    sub_10005802C(v118, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
    (*(void (**)(char *, uint64_t))(v248 + 8))(v244, v249);
    v112  = v129;
    goto LABEL_24;
  }

  v132  = v119 + *(int *)(v121 + 48);
  unint64_t v133 = (uint64_t *)(v119 + *(int *)(v121 + 64));
  uint64_t v134 = *v133;
  uint64_t v135 = v133[1];
  uint64_t v136 = v224;
  v137  = v223;
  v138  = &v223[*(int *)(v224 + 48)];
  v139  = &v223[*(int *)(v224 + 64)];
  v140  = *(void (**)(void))(v231 + 32);
  ((void (*)(char *, uint64_t, uint64_t))v140)(v223, v119, v232);
  v141  = *(void (**)(char *, uint64_t, uint64_t))(v229 + 32);
  v142  = v138;
  v143  = v230;
  v141(v142, v132, v230);
  *(void *)v139  = v134;
  *((void *)v139 + 1)  = v135;
  v144  = &v137[*(int *)(v136 + 48)];
  v145  = (uint64_t *)&v137[*(int *)(v136 + 64)];
  v146  = *v145;
  v147  = v145[1];
  v148  = (uint64_t)v227;
  v140();
  v149  = v228;
  v141(v228, (uint64_t)v144, v143);
  v150  = type metadata accessor for LongTermPairingKeys(0LL);
  v151  = v254;
  __chkstk_darwin();
  *(&v196 - 2)  = v148;
  v152  = v225;
  sub_10012BED8((uint64_t (*)(char *))sub_100141120, v225);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v242 + 48))(v152, 1LL, v243) == 1)
  {
    v153  = v147;
    sub_1000225EC(v152, &qword_100408AA8);
    v154  = v252;
    v155  = v253;
    v156  = v221;
    v157  = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v253 + 16))(v221, v151, v252);
    v158  = (os_log_s *)Logger.logObject.getter(v157);
    v159  = static os_log_type_t.error.getter(v158);
    v160  = os_log_type_enabled(v158, v159);
    v161  = v237;
    if (v160)
    {
      v162  = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v162  = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v158,  v159,  "Authentication response generation failed because no paired device matches the authentication request",  v162,  2u);
      swift_slowDealloc(v162, -1LL, -1LL);
    }

    sub_1000208D8(v146, v153);
    sub_100020B40(v251, v247);

    (*(void (**)(char *, uint64_t))(v155 + 8))(v156, v154);
    (*(void (**)(char *, uint64_t))(v229 + 8))(v228, v230);
    sub_10005802C(v241, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
    v163  = v161;
    goto LABEL_40;
  }

  v164  = v222;
  sub_100022628(v152, v222, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  v165  = (uint64_t)v149;
  v166  = v250;
  v167  = (unint64_t)v246;
  v168  = v237;
  if ((sub_10012AE7C(v148, v165, v146, v147, v164) & 1) == 0)
  {
    v177  = v146;
    v178  = v253;
    v179  = v220;
    v180  = v252;
    v181  = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v253 + 16))(v220, v254, v252);
    v182  = (os_log_s *)Logger.logObject.getter(v181);
    v183  = static os_log_type_t.error.getter(v182);
    if (os_log_type_enabled(v182, v183))
    {
      v184  = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v184  = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v182,  v183,  "Authentication response generation failed because authentication request verification failed",  v184,  2u);
      swift_slowDealloc(v184, -1LL, -1LL);
    }

    v185  = v177;
    v186  = v147;
    goto LABEL_39;
  }

  v245  = v147;
  v169  = v254;
  v170  = sub_1001293E0(v254 + *(int *)(v150 + 20), v166, v167, v219);
  if (!v170)
  {
    v187  = v146;
    v180  = v252;
    v178  = v253;
    v179  = v218;
    v188  = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v253 + 16))(v218, v169, v252);
    v182  = (os_log_s *)Logger.logObject.getter(v188);
    v189  = static os_log_type_t.error.getter(v182);
    if (os_log_type_enabled(v182, v189))
    {
      v190  = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v190  = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v182,  v189,  "Authentication response generation failed because encrypting the response failed",  v190,  2u);
      swift_slowDealloc(v190, -1LL, -1LL);
    }

    v185  = v187;
    v186  = v245;
LABEL_39:
    sub_1000208D8(v185, v186);
    sub_100020B40(v251, v247);

    (*(void (**)(char *, uint64_t))(v178 + 8))(v179, v180);
    sub_10005802C(v164, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    (*(void (**)(char *, uint64_t))(v229 + 8))(v228, v230);
    sub_10005802C(v241, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
    v163  = v168;
LABEL_40:
    sub_10005802C(v163, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
    (*(void (**)(char *, uint64_t))(v248 + 8))(v244, v249);
    v199(v246, v211);
    (*(void (**)(char *, uint64_t))(v231 + 8))(v227, v232);
    return 0LL;
  }

  uint64_t v71 = v170;
  v254  = v146;
  v171  = (uint64_t)v198;
  sub_1000667B0(v212, (uint64_t)v198);
  v172  = (uint64_t *)(v171 + *(int *)(v213 + 36));
  v173  = *v172;
  v174  = v172[1];
  sub_10002255C(*v172, v174);
  sub_10005802C(v171, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  if (v174 >> 60 == 15)
  {
    v175  = v211;
    v176  = v199;
  }

  else
  {
    sub_100020AFC(v173, v174);
    v191  = v217;
    v192  = v197;
    sub_1001292A0(v173, v174);
    v175  = v211;
    if (v192)
    {
      swift_errorRelease(v192);
    }

    else
    {
      v193  = static AES.GCM.open(_:using:)(v191, v168 + *(int *)(v214 + 24));
      v195  = v194;
      (*(void (**)(char *, uint64_t))(v215 + 8))(v191, v216);
      _s7CoreP2P25NANGenericServiceProtocolVyACSg10Foundation4DataVcfC_0(v193, v195);
      v175  = v211;
    }

    v176  = v199;
    sub_100020B40(v173, v174);
  }

  sub_1000208D8(v254, v245);
  sub_100020B40(v251, v247);
  sub_10005802C(v164, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  (*(void (**)(char *, uint64_t))(v229 + 8))(v228, v230);
  sub_10005802C(v241, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
  sub_10005802C(v168, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
  (*(void (**)(char *, uint64_t))(v248 + 8))(v244, v249);
  v176(v246, v175);
  (*(void (**)(uint64_t, uint64_t))(v231 + 8))(v148, v232);
  return v71;
}

uint64_t LongTermPairingKeys.verifyAuthenticationResponse(forPeer:with:publisherKeys:using:extraServiceSpecificInfo:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  v138  = a4;
  v155  = a2;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  v156  = *(void *)(v7 - 8);
  v157  = v7;
  __chkstk_darwin();
  v154  = (char *)&v129 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v153  = (unint64_t)&v129 - v9;
  __chkstk_darwin();
  v142  = (char *)&v129 - v10;
  __chkstk_darwin();
  v139  = (char *)&v129 - v11;
  __chkstk_darwin();
  v137  = (char *)&v129 - v12;
  uint64_t v135 = type metadata accessor for AES.GCM.SealedBox(0LL);
  uint64_t v134 = *(void *)(v135 - 8);
  __chkstk_darwin();
  uint64_t v136 = (char *)&v129 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_100408AC0);
  __chkstk_darwin();
  v149  = (uint64_t)&v129 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v141  = sub_100002274(&qword_100408AC8);
  __chkstk_darwin();
  v140  = (char *)&v129 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for P256.Signing.ECDSASignature(0LL);
  v146  = *(void *)(v16 - 8);
  v147  = v16;
  __chkstk_darwin();
  v144  = (char *)&v129 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v148  = type metadata accessor for UUID(0LL);
  v145  = *(void *)(v148 - 8);
  __chkstk_darwin();
  v143  = (char *)&v129 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_10040D470);
  __chkstk_darwin();
  v152  = (uint64_t)&v129 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  v150  = *(void *)(v20 - 8);
  v151  = v20;
  __chkstk_darwin();
  uint64_t v22 = (char *)&v129 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  __chkstk_darwin();
  uint64_t v25 = (char *)&v129 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_100408AA8);
  __chkstk_darwin();
  uint64_t v27 = (char *)&v129 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin();
  uint64_t v31 = (char *)&v129 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_bridgeObjectRelease(*a5);
  uint64_t v32 = a5;
  *a5  = 0LL;
  uint64_t v33 = type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0LL);
  sub_1000226B0(a3 + *(int *)(v33 + 28), (uint64_t)v27, &qword_100408AA8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1LL, v28) == 1)
  {
    sub_1000225EC((uint64_t)v27, &qword_100408AA8);
    uint64_t v35 = v156;
    uint64_t v34 = v157;
    uint64_t v36 = v154;
    uint64_t v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v156 + 16))(v154, v158, v157);
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.error.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "Authentication response verification failed because no paired device inforamtion was found",  v40,  2u);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v34);
    return 0LL;
  }

  uint64_t v41 = v152;
  uint64_t v130 = v33;
  unint64_t v42 = v153;
  v132  = a3;
  os_log_type_t v131 = v32;
  unint64_t v133 = v22;
  sub_100022628((uint64_t)v27, (uint64_t)v31, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  uint64_t v43 = v155;
  sub_1000667B0(v155, (uint64_t)v25);
  uint64_t v44 = (uint64_t *)&v25[*(int *)(v23 + 32)];
  uint64_t v46 = *v44;
  unint64_t v45 = v44[1];
  sub_10002255C(*v44, v45);
  sub_10005802C((uint64_t)v25, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  v154  = v31;
  uint64_t v47 = v158;
  if (v45 >> 60 == 15) {
    goto LABEL_8;
  }
  sub_1000667B0(v43, (uint64_t)v25);
  sub_1000226B0((uint64_t)&v25[*(int *)(v23 + 24)], v41, (uint64_t *)&unk_10040D470);
  sub_10005802C((uint64_t)v25, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  uint64_t v49 = v150;
  uint64_t v48 = v151;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v150 + 48))(v41, 1LL, v151) == 1)
  {
    sub_100020B40(v46, v45);
    sub_1000225EC(v41, (uint64_t *)&unk_10040D470);
LABEL_8:
    uint64_t v51 = v156;
    uint64_t v50 = v157;
    unint64_t v52 = v42;
    uint64_t v53 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v156 + 16))(v42, v47, v157);
    uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
    os_log_type_t v55 = static os_log_type_t.error.getter(v54);
    if (os_log_type_enabled(v54, v55))
    {
      unint64_t v56 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v56 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v54,  v55,  "Authentication response verification failed because no encrypted signature or public key found",  v56,  2u);
      swift_slowDealloc(v56, -1LL, -1LL);
    }

    (*(void (**)(unint64_t, uint64_t))(v51 + 8))(v52, v50);
LABEL_11:
    uint64_t v57 = (uint64_t)v154;
LABEL_12:
    sub_10005802C(v57, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    return 0LL;
  }

  uint64_t v129 = v25;
  uint64_t v59 = v133;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 32))(v133, v41, v48);
  uint64_t v60 = v149;
  v152  = v46;
  v153  = v45;
  sub_10012A3D0(v46, v45, v149);
  uint64_t v61 = sub_100002274(&qword_100408AD0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 48LL))(v60, 1LL, v61) == 1)
  {
    sub_1000225EC(v60, &qword_100408AC0);
    uint64_t v63 = v156;
    uint64_t v62 = v157;
    uint64_t v64 = v142;
    uint64_t v65 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v156 + 16))(v142, v47, v157);
    uint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
    os_log_type_t v67 = static os_log_type_t.error.getter(v66);
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v68 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v66,  v67,  "Authentication response verification failed because authentication response parsing failed",  v68,  2u);
      swift_slowDealloc(v68, -1LL, -1LL);
    }

    sub_100020B40(v152, v153);

    (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v62);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v59, v48);
    goto LABEL_11;
  }

  v142  = (char *)v23;
  uint64_t v69 = v60 + *(int *)(v61 + 48);
  uint64_t v70 = (uint64_t *)(v60 + *(int *)(v61 + 64));
  uint64_t v71 = *v70;
  uint64_t v72 = v70[1];
  uint64_t v73 = v60;
  uint64_t v75 = v140;
  uint64_t v74 = v141;
  uint64_t v76 = &v140[*(int *)(v141 + 48)];
  unint64_t v77 = &v140[*(int *)(v141 + 64)];
  unint64_t v78 = *(void (**)(char *, uint64_t, uint64_t))(v145 + 32);
  uint64_t v79 = v148;
  v78(v140, v73, v148);
  uint64_t v80 = *(void (**)(char *, uint64_t, uint64_t))(v146 + 32);
  uint64_t v81 = v69;
  uint64_t v82 = v147;
  v80(v76, v81, v147);
  *(void *)unint64_t v77 = v71;
  *((void *)v77 + 1)  = v72;
  unint64_t v83 = &v75[*(int *)(v74 + 48)];
  uint64_t v84 = (uint64_t *)&v75[*(int *)(v74 + 64)];
  uint64_t v86 = *v84;
  uint64_t v85 = v84[1];
  uint64_t v87 = (uint64_t)v143;
  v78(v143, (uint64_t)v75, v79);
  uint64_t v88 = (uint64_t)v154;
  v89  = (uint64_t)v144;
  v80(v144, (uint64_t)v83, v82);
  uint64_t v90 = v88;
  if ((static UUID.== infix(_:_:)(v88, v87) & 1) == 0)
  {
    v100  = v86;
    uint64_t v102 = v156;
    uint64_t v101 = v157;
    uint64_t v103 = v139;
    uint64_t v104 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v156 + 16))(v139, v158, v157);
    v105  = (os_log_s *)Logger.logObject.getter(v104);
    v106  = static os_log_type_t.error.getter(v105);
    if (os_log_type_enabled(v105, v106))
    {
      uint64_t v107 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v107 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v105,  v106,  "Authentication response verification failed because identifiers did not match",  v107,  2u);
      v108  = v107;
      uint64_t v87 = (uint64_t)v143;
      swift_slowDealloc(v108, -1LL, -1LL);
    }

    sub_100020B40(v152, v153);
    uint64_t v109 = v100;
    unint64_t v110 = v85;
    goto LABEL_29;
  }

  uint64_t v91 = v132;
  unint64_t v92 = v85;
  if ((sub_10012AE7C(v87, v89, v86, v85, v88) & 1) == 0)
  {
    v111  = v86;
    uint64_t v102 = v156;
    uint64_t v101 = v157;
    uint64_t v103 = v137;
    v112  = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v156 + 16))(v137, v158, v157);
    v105  = (os_log_s *)Logger.logObject.getter(v112);
    os_log_type_t v113 = static os_log_type_t.error.getter(v105);
    if (os_log_type_enabled(v105, v113))
    {
      uint64_t v114 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v114 = 0;
      _os_log_impl((void *)&_mh_execute_header, v105, v113, "Authentication response verification failed", v114, 2u);
      v115  = v114;
      uint64_t v87 = (uint64_t)v143;
      swift_slowDealloc(v115, -1LL, -1LL);
    }

    sub_100020B40(v152, v153);
    uint64_t v109 = v111;
    unint64_t v110 = v92;
LABEL_29:
    sub_1000208D8(v109, v110);

    (*(void (**)(char *, uint64_t))(v102 + 8))(v103, v101);
    (*(void (**)(char *, uint64_t))(v146 + 8))(v144, v147);
    (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v87, v148);
    (*(void (**)(char *, uint64_t))(v150 + 8))(v133, v151);
    uint64_t v57 = v90;
    goto LABEL_12;
  }

  uint64_t v93 = v86;
  uint64_t v94 = v90;
  unint64_t v95 = v131;
  swift_bridgeObjectRelease(*v131);
  uint64_t v96 = (uint64_t)v129;
  sub_1000667B0(v155, (uint64_t)v129);
  uint64_t v97 = (uint64_t *)(v96 + *((int *)v142 + 9));
  uint64_t v99 = *v97;
  unint64_t v98 = v97[1];
  sub_10002255C(*v97, v98);
  sub_10005802C(v96, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  if (v98 >> 60 == 15)
  {
    sub_100020B40(v152, v153);
    sub_1000208D8(v93, v92);
    v119  = 0LL;
  }

  else
  {
    sub_100020AFC(v99, v98);
    uint64_t v116 = v136;
    sub_1001292A0(v99, v98);
    uint64_t v117 = static AES.GCM.open(_:using:)(v116, v91 + *(int *)(v130 + 24));
    v118  = v116;
    unint64_t v126 = v125;
    uint64_t v127 = v117;
    (*(void (**)(char *, uint64_t))(v134 + 8))(v118, v135);
    _s7CoreP2P25NANGenericServiceProtocolVyACSg10Foundation4DataVcfC_0(v127, v126);
    v119  = v128;
    sub_100020B40(v152, v153);
    sub_1000208D8(v93, v92);
    sub_100020B40(v99, v98);
  }

  uint64_t v121 = v150;
  v120  = v151;
  v122  = v133;
  v123  = v148;
  uint64_t v124 = v145;
  (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v89, v147);
  (*(void (**)(char *, uint64_t))(v124 + 8))(v143, v123);
  (*(void (**)(char *, uint64_t))(v121 + 8))(v122, v120);
  sub_10005802C(v94, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  *unint64_t v95 = v119;
  return 1LL;
}

uint64_t sub_10012F6D4(uint64_t a1, uint64_t a2)
{
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(a2);
  uint64_t v8 = a2;
  sub_10013FFDC(a1, (uint64_t)sub_100140340, 0LL, isUniquelyReferenced_nonNull_native, (uint64_t)&v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  if (v2) {
    swift_bridgeObjectRelease(v6);
  }
  return v6;
}

unint64_t sub_10012F750( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  *(void *)&__int128 v33 = a5;
  *((void *)&v33 + 1)  = a6;
  uint64_t v15 = sub_100002274(&qword_100408AE8);
  inited  = swift_initStackObject(v15, v39);
  uint64_t v17 = inited;
  *(_OWORD *)(inited + 16)  = xmmword_100349740;
  *(void *)(inited + 32)  = kSecAttrAccessGroup;
  *(void *)(inited + 40)  = a3;
  *(void *)(inited + 48)  = a4;
  *(void *)(inited + 64)  = &type metadata for String;
  *(void *)(inited + 72)  = kSecAttrSynchronizable;
  *(_BYTE *)(inited + 80)  = a11 & 1;
  *(void *)(inited + 104)  = &type metadata for Bool;
  *(void *)(inited + 112)  = kSecAttrIsInvisible;
  *(_BYTE *)(inited + 120)  = 1;
  *(void *)(inited + 144)  = &type metadata for Bool;
  *(void *)(inited + 152)  = kSecAttrLabel;
  if (a11)
  {
    if (a11 == 1)
    {
      unint64_t v18 = 0xE600000000000000LL;
      uint64_t v19 = 0x63696C627570LL;
    }

    else
    {
      unint64_t v18 = 0xEC0000006C61636FLL;
      uint64_t v19 = 0x6C5F63696C627570LL;
    }
  }

  else
  {
    unint64_t v18 = 0xE700000000000000LL;
    uint64_t v19 = 0x65746176697270LL;
  }

  *(void *)(inited + 160)  = v19;
  *(void *)(inited + 168)  = v18;
  *(void *)(inited + 184)  = &type metadata for String;
  *(void *)(inited + 192)  = kSecAttrAccount;
  *(void *)(inited + 200)  = a9;
  *(void *)(inited + 208)  = a10;
  *(void *)(inited + 224)  = &type metadata for String;
  *(void *)(inited + 232)  = kSecAttrService;
  *(void *)(inited + 240)  = a7;
  *(void *)(inited + 248)  = a8;
  *(void *)(inited + 264)  = &type metadata for String;
  *(void *)(inited + 272)  = kSecValueData;
  *(void *)(inited + 304)  = &type metadata for Data;
  *(void *)(inited + 280)  = a1;
  *(void *)(inited + 288)  = a2;
  uint64_t v20 = (id)kSecAttrAccessGroup;
  swift_bridgeObjectRetain(a4);
  uint64_t v21 = (id)kSecAttrSynchronizable;
  uint64_t v22 = (id)kSecAttrIsInvisible;
  uint64_t v23 = (id)kSecAttrLabel;
  uint64_t v24 = (id)kSecAttrAccount;
  swift_bridgeObjectRetain(a10);
  uint64_t v25 = (id)kSecAttrService;
  swift_bridgeObjectRetain(a8);
  uint64_t v26 = (id)kSecValueData;
  sub_100020AFC(a1, a2);
  unint64_t result = sub_10000D52C(v17);
  unint64_t v28 = result;
  if (!a11)
  {
    type metadata accessor for CFString(0LL);
    uint64_t v38 = v30;
    *(void *)&__int128 v37 = kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
    sub_100022594(&v37, v36);
    uint64_t v29 = (id)kSecAttrAccessible;
    uint64_t v31 = (id)kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
    goto LABEL_10;
  }

  if (kSecAttrSyncViewHint)
  {
    uint64_t v38 = &type metadata for String;
    __int128 v37 = v33;
    sub_100022594(&v37, v36);
    uint64_t v29 = (id)kSecAttrSyncViewHint;
    swift_bridgeObjectRetain(*((void *)&v33 + 1));
LABEL_10:
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(v28);
    sub_10001F5A8(v36, v29, isUniquelyReferenced_nonNull_native);

    swift_bridgeObjectRelease(0x8000000000000000LL);
    return v28;
  }

  __break(1u);
  return result;
}

uint64_t AppleKeychain.init(accessGroup:view:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_notificationToken)  = -1;
  uint64_t v9 = (void *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_tokens);
  *uint64_t v9 = &_swiftEmptySetSingleton;
  v9[1]  = 0LL;
  *(void *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors)  = &_swiftEmptyDictionarySingleton;
  uint64_t v10 = (void *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
  *uint64_t v10 = a1;
  v10[1]  = a2;
  uint64_t v11 = (void *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView);
  *uint64_t v11 = a3;
  v11[1]  = a4;
  return v4;
}

void sub_10012FAF4()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors;
  swift_beginAccess(v2, v28, 0LL, 0LL);
  uint64_t v3 = *(void *)(*(void *)v2 + 16LL);
  uint64_t v4 = (int *)(v1 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_notificationToken);
  uint64_t v5 = v1 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_notificationToken;
  if (v3)
  {
    swift_beginAccess(v5, v27, 0LL, 0LL);
    if (!notify_is_valid_token(*v4))
    {
      _StringGuts.grow(_:)(33LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      v26[0]  = 0xD00000000000001FLL;
      v26[1]  = 0x8000000100365240LL;
      uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView);
      uint64_t v7 = *(void **)(v1 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView + 8);
      swift_bridgeObjectRetain(v7);
      v8._uint64_t countAndFlagsBits = v6;
      v8._object  = v7;
      String.append(_:)(v8);
      swift_bridgeObjectRelease(v7);
      int v9 = sub_10003B67C( (void *(*)(unsigned int *__return_ptr, void *))sub_1001440F4,  v1,  0xD00000000000001FLL,  0x8000000100365240LL);
      uint64_t v10 = swift_bridgeObjectRelease(0x8000000100365240LL);
      if (v9)
      {
        uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
        os_log_type_t v12 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v11, v12))
        {
          uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v14 = swift_slowAlloc(32LL, -1LL);
          v26[0]  = v14;
          *(_DWORD *)uint64_t v13 = 136315138;
          unint64_t v15 = sub_1002078E4(v9);
          unint64_t v17 = v16;
          uint64_t v24 = sub_10000235C(v15, v16, v26);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
          swift_bridgeObjectRelease(v17);
          unint64_t v18 = "Failed to start monitoring keychain updates with error: %s";
LABEL_10:
          _os_log_impl((void *)&_mh_execute_header, v11, v12, v18, v13, 0xCu);
          swift_arrayDestroy(v14, 1LL, &type metadata for Any[8]);
          swift_slowDealloc(v14, -1LL, -1LL);
          swift_slowDealloc(v13, -1LL, -1LL);
          goto LABEL_11;
        }

        goto LABEL_11;
      }
    }
  }

  else
  {
    swift_beginAccess(v5, v27, 1LL, 0LL);
    if (notify_is_valid_token(*v4))
    {
      uint64_t v19 = notify_cancel(*v4);
      *uint64_t v4 = -1;
      if ((_DWORD)v19)
      {
        int v20 = v19;
        uint64_t v11 = (os_log_s *)Logger.logObject.getter(v19);
        os_log_type_t v12 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v11, v12))
        {
          uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v14 = swift_slowAlloc(32LL, -1LL);
          v26[0]  = v14;
          *(_DWORD *)uint64_t v13 = 136315138;
          unint64_t v21 = sub_1002078E4(v20);
          unint64_t v23 = v22;
          uint64_t v24 = sub_10000235C(v21, v22, v26);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
          swift_bridgeObjectRelease(v23);
          unint64_t v18 = "Failed to cancel monitoring keychain updates with error: %s";
          goto LABEL_10;
        }

void sub_10012FE00(const char *a1@<X0>, uint64_t a2@<X1>, uint32_t *a3@<X8>)
{
  if (qword_100404318 != -1) {
    swift_once(&qword_100404318, sub_1001740DC);
  }
  uint64_t v6 = (dispatch_queue_s *)static OS_dispatch_queue.nan;
  uint64_t v7 = swift_allocObject(&unk_1003E6E90, 24LL, 7LL);
  swift_weakInit(v7 + 16, a2);
  v11[4]  = sub_100144130;
  uint64_t v12 = v7;
  v11[0]  = _NSConcreteStackBlock;
  v11[1]  = 1107296256LL;
  _OWORD v11[2] = sub_100130204;
  void v11[3] = &unk_1003E6EA8;
  Swift::String v8 = _Block_copy(v11);
  swift_release(v12);
  int v9 = (int *)(a2 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_notificationToken);
  swift_beginAccess(v9, v11, 33LL, 0LL);
  uint32_t v10 = notify_register_dispatch(a1, v9, v6, v8);
  swift_endAccess(v11);
  _Block_release(v8);
  *a3  = v10;
}

uint64_t sub_10012FF34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v30[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = a2 + 16;
  swift_beginAccess(v7, v32, 0LL, 0LL);
  Strong  = swift_weakLoadStrong(v7);
  if (Strong)
  {
    uint64_t v9 = Strong;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))( v6,  Strong + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_logger,  v3);
    uint64_t v10 = swift_release(v9);
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Received keychain updated notification", v13, 2u);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  swift_beginAccess(v7, v31, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v7);
  if (!result) {
    return result;
  }
  uint64_t v15 = result;
  unint64_t v16 = (uint64_t *)(result + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors);
  swift_beginAccess(result + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors, v30, 0LL, 0LL);
  uint64_t v17 = *v16;
  swift_bridgeObjectRetain(v17);
  swift_release(v15);
  uint64_t v18 = v17 + 64;
  uint64_t v19 = 1LL << *(_BYTE *)(v17 + 32);
  uint64_t v20 = -1LL;
  if (v19 < 64) {
    uint64_t v20 = ~(-1LL << v19);
  }
  unint64_t v21 = v20 & *(void *)(v17 + 64);
  int64_t v22 = (unint64_t)(v19 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(v17);
  int64_t v23 = 0LL;
  while (1)
  {
    if (v21)
    {
      unint64_t v24 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v25 = v24 | (v23 << 6);
      goto LABEL_10;
    }

    int64_t v26 = v23 + 1;
    if (__OFADD__(v23, 1LL))
    {
      __break(1u);
      goto LABEL_33;
    }

    if (v26 >= v22) {
      goto LABEL_30;
    }
    unint64_t v27 = *(void *)(v18 + 8 * v26);
    ++v23;
    if (!v27)
    {
      int64_t v23 = v26 + 1;
      if (v26 + 1 >= v22) {
        goto LABEL_30;
      }
      unint64_t v27 = *(void *)(v18 + 8 * v23);
      if (!v27)
      {
        int64_t v23 = v26 + 2;
        if (v26 + 2 >= v22) {
          goto LABEL_30;
        }
        unint64_t v27 = *(void *)(v18 + 8 * v23);
        if (!v27)
        {
          int64_t v23 = v26 + 3;
          if (v26 + 3 >= v22) {
            goto LABEL_30;
          }
          unint64_t v27 = *(void *)(v18 + 8 * v23);
          if (!v27)
          {
            int64_t v23 = v26 + 4;
            if (v26 + 4 >= v22) {
              goto LABEL_30;
            }
            unint64_t v27 = *(void *)(v18 + 8 * v23);
            if (!v27) {
              break;
            }
          }
        }
      }
    }

LABEL_33:
  __break(1u);
  return result;
}

    uint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    __int128 v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_retain();
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        int64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1]  = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18)  = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  int64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + 16)  = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v26 - 1) & v26;
    int64_t v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    uint64_t v32 = 16 * v23;
    __int128 v33 = (uint64_t *)(*(void *)(v5 + 48) + v32);
    uint64_t v35 = *v33;
    uint64_t v34 = v33[1];
    uint64_t v36 = (uint64_t *)(*(void *)(v5 + 56) + v32);
    __int128 v37 = *v36;
    uint64_t v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }

    Hasher.init(_seed:)(v44, *(void *)(v8 + 40));
    String.hash(into:)(v44, v35, v34);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v30 = v17 == v29;
        if (v17 == v29) {
          uint64_t v17 = 0LL;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v17);
      }

      while (v31 == -1);
      uint64_t v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = 16 * v18;
    uint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
    CFStringRef v20 = v35;
    v20[1]  = v34;
    unint64_t v21 = (void *)(*(void *)(v8 + 56) + v19);
    *unint64_t v21 = v37;
    v21[1]  = v38;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v40;
  unint64_t v25 = (void *)(v5 + 64);
  if ((v43 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  os_log_type_t v39 = 1LL << *(_BYTE *)(v5 + 32);
  if (v39 >= 64) {
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unint64_t v25 = -1LL << v39;
  }
  *(void *)(v5 + 16)  = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

        uint64_t v13 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }

      uint64_t v29 = *(void *)(*(void *)(v5 + 48) + 8 * v21);
      __int128 v33 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v21);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v8 + 40), v29);
      unint64_t v16 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v17 = result & ~v16;
      uint64_t v18 = v17 >> 6;
      if (((-1LL << v17) & ~*(void *)(v15 + 8 * (v17 >> 6))) != 0)
      {
        uint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v15 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v25 = 0;
        int64_t v26 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          unint64_t v27 = v18 == v26;
          if (v18 == v26) {
            uint64_t v18 = 0LL;
          }
          v25 |= v27;
          int64_t v28 = *(void *)(v15 + 8 * v18);
        }

        while (v28 == -1);
        uint64_t v19 = __clz(__rbit64(~v28)) + (v18 << 6);
      }

      *(void *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
      *(void *)(*(void *)(v8 + 48) + 8 * v19)  = v29;
      *(_OWORD *)(*(void *)(v8 + 56) + 16 * v19)  = v33;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
LABEL_43:
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    __int128 v33 = *(void **)(*(void *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      uint64_t v34 = v33;
    }

    Hasher.init(_seed:)(v40, *(void *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        int64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1]  = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18)  = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  int64_t v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v23 = -1LL << v35;
  }
  *(void *)(v5 + 16)  = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

  if (qword_1004043B8 != -1) {
    swift_once(&qword_1004043B8, sub_100187378);
  }
  unint64_t v16 = *((void *)off_10040A1B0 + 2);
  if (!v16)
  {
LABEL_70:
    _StringGuts.grow(_:)(49LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
    object  = v27._object;
    String.append(_:)(v27);
    swift_bridgeObjectRelease(object);
    v29._uint64_t countAndFlagsBits = 32LL;
    v29._object  = (void *)0xE100000000000000LL;
    String.append(_:)(v29);
    if (BYTE4(a1))
    {
      if (BYTE4(a1) == 1) {
        uint64_t v30 = 0x7A48472035LL;
      }
      else {
        uint64_t v30 = 0x7A48472036LL;
      }
      uint64_t v31 = 0xE500000000000000LL;
    }

    else
    {
      uint64_t v31 = 0xE700000000000000LL;
      uint64_t v30 = 0x7A484720342E32LL;
    }

    uint64_t v32 = v31;
    String.append(_:)(*(Swift::String *)&v30);
    swift_bridgeObjectRelease(v31);
    v33._uint64_t countAndFlagsBits = 32LL;
    v33._object  = (void *)0xE100000000000000LL;
    String.append(_:)(v33);
    uint64_t v34 = 0x7A484D203031LL;
    uint64_t v35 = 0xE600000000000000LL;
    switch(v2)
    {
      case 2:
        break;
      case 3:
        uint64_t v34 = 0x7A484D203032LL;
        break;
      case 4:
        uint64_t v34 = 0x7A484D203038LL;
        break;
      case 5:
        uint64_t v34 = 0x7A484D20303631LL;
        uint64_t v35 = 0xE700000000000000LL;
        break;
      case 6:
        uint64_t v35 = 0xE700000000000000LL;
        uint64_t v34 = 0x7A484D20303233LL;
        break;
      default:
        uint64_t v34 = 0x7A484D202D3034LL;
        uint64_t v35 = 0xE700000000000000LL;
        break;
    }

    uint64_t v36 = v35;
    String.append(_:)(*(Swift::String *)&v34);
    swift_bridgeObjectRelease(v35);
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000029LL,  0x8000000100367000LL,  "CoreP2P/Channel.swift",  21LL,  2LL,  218LL,  0);
    __break(1u);
    JUMPOUT(0x1001857C4LL);
  }

  uint64_t v17 = 0LL;
  uint64_t v18 = (char *)off_10040A1B0 + 32;
  while (1)
  {
    uint64_t v19 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
      __break(1u);
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }

    uint64_t v20 = &v18[16 * v17];
LABEL_37:
    ++v17;
    if (v19 == v16) {
      goto LABEL_70;
    }
  }

  unint64_t v21 = v20[2];
  int64_t v22 = *((void *)v20 + 1);
  switch(v21)
  {
    case 2:
      if (v2 != 2) {
        goto LABEL_37;
      }
      goto LABEL_53;
    case 3:
      if (v2 == 3) {
        goto LABEL_53;
      }
      goto LABEL_37;
    case 4:
      if (v2 == 4) {
        goto LABEL_53;
      }
      goto LABEL_37;
    case 5:
      if (v2 == 5) {
        goto LABEL_53;
      }
      goto LABEL_37;
    case 6:
      if (v2 == 6) {
        goto LABEL_53;
      }
      goto LABEL_37;
    default:
LABEL_53:
      int64_t v23 = *(void *)(v22 + 16);
      if (!v23) {
        goto LABEL_37;
      }
      if (*(_DWORD *)(v22 + 32) == v4) {
        return v18[16 * v17];
      }
      if (v23 == 1) {
        goto LABEL_37;
      }
      if (*(_DWORD *)(v22 + 36) == v4) {
        return v18[16 * v17];
      }
      if (v23 == 2) {
        goto LABEL_37;
      }
      unint64_t v24 = 10LL;
      break;
  }

  while (1)
  {
    unint64_t v25 = v24 - 7;
    if (__OFADD__(v24 - 8, 1LL)) {
      goto LABEL_66;
    }
    if (*(_DWORD *)(v22 + 4 * v24) == v4) {
      return v18[16 * v17];
    }
    ++v24;
    if (v25 == v23) {
      goto LABEL_37;
    }
  }

    sub_1001CDEAC( *(void *)(a2 + 32),  *(void *)(a2 + 40),  *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16));
    sub_1001CDEAC(v11, v10, v12);
    sub_1001062D4(v11, v10, v12, BYTE2(v12) & 1);
    sub_1001062D4(v14, v13, v15, BYTE2(v15) & 1);
    return 0LL;
  }

  if ((v15 & 0x10000) == 0) {
    goto LABEL_33;
  }
  sub_1001CDEAC( *(void *)(a2 + 32),  *(void *)(a2 + 40),  *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16));
  sub_1001CDEAC(v11, v10, v12);
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v11, v10);
  if ((v25 & 1) == 0)
  {
    sub_1001062BC(v14, v13, v15);
    int64_t v22 = v11;
    int64_t v23 = v10;
    unint64_t v24 = v12;
    goto LABEL_23;
  }

  sub_1001062BC(v14, v13, v15);
  sub_1001062BC(v11, v10, v12);
  uint64_t result = 0LL;
  if (v12 == v15
    && ((((v12 & 0x100) == 0) ^ ((unsigned __int16)(v15 & 0x100) >> 8)) & 1) != 0)
  {
    goto LABEL_18;
  }

  return result;
}

        os_log_type_t v12 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }

      unint64_t v27 = *(void *)(v5 + 56);
      int64_t v28 = *(char *)(*(void *)(v5 + 48) + v19);
      uint64_t v29 = *(void *)(v27 + 8 * v19);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain(*(void *)(v27 + 8 * v19));
      }
      Hasher.init(_seed:)(v34, *(void *)(v8 + 40));
      Hasher._combine(_:)(byte_10035DB9A[v28]);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        uint64_t v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        int64_t v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          unint64_t v25 = v16 == v24;
          if (v16 == v24) {
            unint64_t v16 = 0LL;
          }
          v23 |= v25;
          int64_t v26 = *(void *)(v13 + 8 * v16);
        }

        while (v26 == -1);
        uint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }

      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      *(_BYTE *)(*(void *)(v8 + 48) + v17)  = v28;
      *(void *)(*(void *)(v8 + 56) + 8 * v17)  = v29;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
LABEL_43:
  *uint64_t v3 = v8;
  return result;
}

        uint64_t v43 = (v21 - 1) & v21;
        uint64_t v44 = v22;
        uint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
      }

      int64_t v28 = *(void *)(v5 + 56);
      uint64_t v29 = (unsigned __int8 *)(*(void *)(v5 + 48) + 6 * v19);
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
      uint64_t v32 = v29[2];
      __int128 v33 = v29[3];
      uint64_t v34 = v29[4];
      uint64_t v35 = v29[5];
      uint64_t v36 = *(void *)(v28 + 8 * v19);
      if ((v42 & 1) == 0) {
        swift_bridgeObjectRetain(v36);
      }
      Hasher.init(_seed:)(v45, *(void *)(v8 + 40));
      NANClusterChangeEvent.hash(into:)( (int)v45,  (v34 << 32) | (v35 << 40) | (v33 << 24) | (v32 << 16) | (v31 << 8) | v30);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        uint64_t v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          int64_t v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0LL;
          }
          v24 |= v26;
          unint64_t v27 = *(void *)(v13 + 8 * v16);
        }

        while (v27 == -1);
        uint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }

      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      uint64_t v18 = (_BYTE *)(*(void *)(v8 + 48) + 6 * v17);
      *uint64_t v18 = v30;
      v18[1]  = v31;
      v18[2]  = v32;
      v18[3]  = v33;
      void v18[4] = v34;
      v18[5]  = v35;
      *(void *)(*(void *)(v8 + 56) + 8 * v17)  = v36;
      ++*(void *)(v8 + 16);
      uint64_t v5 = v41;
      os_log_type_t v12 = v43;
      uint64_t v9 = v44;
    }
  }

  uint64_t result = swift_release(v5);
LABEL_43:
  *uint64_t v3 = v8;
  return result;
}

        uint64_t v44 = (v22 - 1) & v22;
        unint64_t v45 = v23;
        uint64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
      }

      uint64_t v29 = *(void *)(v5 + 56);
      uint64_t v30 = (unsigned __int8 *)(*(void *)(v5 + 48) + 6 * v20);
      uint64_t v31 = *v30;
      uint64_t v32 = v30[1];
      __int128 v33 = v30[2];
      uint64_t v34 = v30[3];
      uint64_t v35 = v30[4];
      uint64_t v36 = v30[5];
      __int128 v37 = *(void *)(v29 + 8 * v20);
      if ((v43 & 1) == 0) {
        swift_retain();
      }
      Hasher.init(_seed:)(v46, *(void *)(v8 + 40));
      NANClusterChangeEvent.hash(into:)( (int)v46,  (v35 << 32) | (v36 << 40) | (v34 << 24) | (v33 << 16) | (v32 << 8) | v31);
      uint64_t v14 = Hasher._finalize()();
      uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
      unint64_t v16 = v14 & ~v15;
      uint64_t v17 = v16 >> 6;
      if (((-1LL << v16) & ~*(void *)(v13 + 8 * (v16 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v13 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v25 = 0;
        int64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          unint64_t v27 = v17 == v26;
          if (v17 == v26) {
            uint64_t v17 = 0LL;
          }
          v25 |= v27;
          int64_t v28 = *(void *)(v13 + 8 * v17);
        }

        while (v28 == -1);
        uint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }

      *(void *)(v13 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      uint64_t v19 = (_BYTE *)(*(void *)(v8 + 48) + 6 * v18);
      *uint64_t v19 = v31;
      v19[1]  = v32;
      void v19[2] = v33;
      v19[3]  = v34;
      v19[4]  = v35;
      v19[5]  = v36;
      *(void *)(*(void *)(v8 + 56) + 8 * v18)  = v37;
      ++*(void *)(v8 + 16);
      uint64_t v5 = v42;
      os_log_type_t v12 = v44;
      uint64_t v9 = v45;
    }
  }

  swift_release(v5);
LABEL_43:
  *uint64_t v3 = v8;
}

        uint64_t v51 = (v26 - 1) & v26;
        unint64_t v52 = v27;
        unint64_t v24 = __clz(__rbit64(v26)) + (v27 << 6);
      }

      __int128 v33 = *(void *)(v6 + 56);
      uint64_t v34 = (unsigned __int8 *)(*(void *)(v6 + 48) + 6 * v24);
      uint64_t v35 = *v34;
      uint64_t v36 = v34[1];
      __int128 v37 = v34[2];
      uint64_t v38 = v34[3];
      os_log_type_t v39 = v34[4];
      uint64_t v40 = v34[5];
      uint64_t v41 = v33 + 24 * v24;
      v3.i32[0]  = *(_DWORD *)v41;
      uint64_t v53 = *(_BYTE *)(v41 + 4);
      uint64_t v54 = *(_BYTE *)(v41 + 5);
      os_log_type_t v55 = *(_BYTE *)(v41 + 6);
      uint64_t v43 = *(void *)(v41 + 8);
      unint64_t v42 = *(void *)(v41 + 16);
      if ((v50 & 1) == 0) {
        sub_10002255C(v43, v42);
      }
      uint64_t v9 = v49;
      Hasher.init(_seed:)(v56, *(void *)(v49 + 40));
      NANClusterChangeEvent.hash(into:)( (int)v56,  (v39 << 32) | (v40 << 40) | (v38 << 24) | (v37 << 16) | (v36 << 8) | v35);
      uint64_t v15 = Hasher._finalize()();
      unint64_t v16 = -1LL << *(_BYTE *)(v49 + 32);
      uint64_t v17 = v15 & ~v16;
      uint64_t v18 = v17 >> 6;
      if (((-1LL << v17) & ~*(void *)(v14 + 8 * (v17 >> 6))) != 0)
      {
        uint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v14 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
        uint64_t v20 = v42;
        unint64_t v21 = v43;
      }

      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = (unint64_t)(63 - v16) >> 6;
        uint64_t v20 = v42;
        unint64_t v21 = v43;
        do
        {
          if (++v18 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          uint64_t v31 = v18 == v30;
          if (v18 == v30) {
            uint64_t v18 = 0LL;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v14 + 8 * v18);
        }

        while (v32 == -1);
        uint64_t v19 = __clz(__rbit64(~v32)) + (v18 << 6);
      }

      *(void *)(v14 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
      int64_t v22 = (_BYTE *)(*(void *)(v49 + 48) + 6 * v19);
      *int64_t v22 = v35;
      v22[1]  = v36;
      v22[2]  = v37;
      v22[3]  = v38;
      v22[4]  = v39;
      v22[5]  = v40;
      int64_t v23 = *(void *)(v49 + 56) + 24 * v19;
      *(_DWORD *)int64_t v23 = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
      *(_BYTE *)(v23 + 4)  = v53;
      *(_BYTE *)(v23 + 5)  = v54;
      *(_BYTE *)(v23 + 6)  = v55;
      *(void *)(v23 + 8)  = v21;
      *(void *)(v23 + 16)  = v20;
      ++*(void *)(v49 + 16);
      uint64_t v6 = v48;
      uint64_t v13 = v51;
      uint64_t v10 = v52;
    }
  }

  swift_release(v6);
LABEL_43:
  *uint64_t v4 = v9;
}

    uint64_t v11 = (v25 - 1) & v25;
    int64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    uint64_t v31 = 8 * v22;
    uint64_t v32 = *(void **)(*(void *)(v5 + 48) + v31);
    __int128 v33 = *(void *)(*(void *)(v5 + 56) + v31);
    if ((a2 & 1) == 0) {
      uint64_t v34 = v32;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    unint64_t v16 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v17 = result & ~v16;
    uint64_t v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v27 = 0;
      int64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v29 = v18 == v28;
        if (v18 == v28) {
          uint64_t v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      uint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20)  = v32;
    *(void *)(*(void *)(v8 + 56) + v20)  = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  unint64_t v24 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    CFStringRef v24 = -1LL << v35;
  }
  *(void *)(v5 + 16)  = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    __int128 v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        int64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1]  = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18)  = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  int64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + 16)  = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

        uint64_t v13 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v10 << 6);
      }

      int64_t v28 = *(void *)(v6 + 56);
      uint64_t v29 = *(_BYTE *)(*(void *)(v6 + 48) + v20);
      uint64_t v30 = *(void *)(v28 + 8 * v20);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain(*(void *)(v28 + 8 * v20));
      }
      Hasher.init(_seed:)(v35, *(void *)(v9 + 40));
      Hasher._combine(_:)(v29);
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1LL << *(_BYTE *)(v9 + 32);
      unint64_t v16 = result & ~v15;
      uint64_t v17 = v16 >> 6;
      if (((-1LL << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          int64_t v26 = v17 == v25;
          if (v17 == v25) {
            uint64_t v17 = 0LL;
          }
          v24 |= v26;
          unint64_t v27 = *(void *)(v14 + 8 * v17);
        }

        while (v27 == -1);
        uint64_t v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }

      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      *(_BYTE *)(*(void *)(v9 + 48) + v18)  = v29;
      *(void *)(*(void *)(v9 + 56) + 8 * v18)  = v30;
      ++*(void *)(v9 + 16);
    }
  }

  uint64_t result = swift_release(v6);
LABEL_43:
  *uint64_t v4 = v9;
  return result;
}

        unint64_t v45 = (v22 - 1) & v22;
        uint64_t v46 = v23;
        uint64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
      }

      uint64_t v29 = *(void *)(v5 + 56);
      uint64_t v30 = (unsigned __int8 *)(*(void *)(v5 + 48) + 6 * v20);
      uint64_t v31 = *v30;
      uint64_t v32 = v30[1];
      __int128 v33 = v30[2];
      uint64_t v34 = v30[3];
      uint64_t v35 = v30[4];
      uint64_t v36 = v30[5];
      __int128 v37 = (uint64_t *)(v29 + 16 * v20);
      uint64_t v38 = v37[1];
      uint64_t v47 = *v37;
      if ((v44 & 1) == 0) {
        swift_bridgeObjectRetain(v38);
      }
      Hasher.init(_seed:)(v48, *(void *)(v8 + 40));
      NANClusterChangeEvent.hash(into:)( (int)v48,  (v35 << 32) | (v36 << 40) | (v34 << 24) | (v33 << 16) | (v32 << 8) | v31);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        uint64_t v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v25 = 0;
        int64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          unint64_t v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0LL;
          }
          v25 |= v27;
          int64_t v28 = *(void *)(v13 + 8 * v16);
        }

        while (v28 == -1);
        uint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }

      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      uint64_t v18 = (_BYTE *)(*(void *)(v8 + 48) + 6 * v17);
      *uint64_t v18 = v31;
      v18[1]  = v32;
      v18[2]  = v33;
      v18[3]  = v34;
      void v18[4] = v35;
      v18[5]  = v36;
      uint64_t v19 = (void *)(*(void *)(v8 + 56) + 16 * v17);
      uint64_t v9 = v46;
      *uint64_t v19 = v47;
      v19[1]  = v38;
      ++*(void *)(v8 + 16);
      uint64_t v5 = v43;
      os_log_type_t v12 = v45;
    }
  }

  uint64_t result = swift_release(v5);
LABEL_43:
  *uint64_t v3 = v8;
  return result;
}

        os_log_type_t v12 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }

      unint64_t v27 = *(void *)(v5 + 56);
      int64_t v28 = *(_BYTE *)(*(void *)(v5 + 48) + v19);
      uint64_t v29 = *(void *)(v27 + 8 * v19);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain(*(void *)(v27 + 8 * v19));
      }
      Hasher.init(_seed:)(v34, *(void *)(v8 + 40));
      Hasher._combine(_:)(v28);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        uint64_t v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        int64_t v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          unint64_t v25 = v16 == v24;
          if (v16 == v24) {
            unint64_t v16 = 0LL;
          }
          v23 |= v25;
          int64_t v26 = *(void *)(v13 + 8 * v16);
        }

        while (v26 == -1);
        uint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }

      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      *(_BYTE *)(*(void *)(v8 + 48) + v17)  = v28;
      *(void *)(*(void *)(v8 + 56) + 8 * v17)  = v29;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
LABEL_43:
  *uint64_t v3 = v8;
  return result;
}

uint64_t sub_100130204(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t AppleKeychain.monitor(using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_beginAccess(v2 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_tokens, v15, 33LL, 0LL);
  uint64_t v6 = sub_1001263E8();
  char v8 = v7;
  uint64_t result = swift_endAccess(v15);
  if ((v8 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v10 = swift_allocObject(&unk_1003E6D30, 32LL, 7LL);
    *(void *)(v10 + 16)  = a1;
    *(void *)(v10 + 24)  = a2;
    uint64_t v11 = (void *)(v3 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors);
    swift_beginAccess(v3 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors, v15, 33LL, 0LL);
    swift_retain();
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(*v11);
    uint64_t v14 = *v11;
    *uint64_t v11 = 0x8000000000000000LL;
    sub_10001F838((uint64_t)sub_100056B6C, v10, v6, isUniquelyReferenced_nonNull_native);
    uint64_t v13 = *v11;
    *uint64_t v11 = v14;
    swift_bridgeObjectRelease(v13);
    swift_endAccess(v15);
    sub_10012FAF4();
    return v6;
  }

  return result;
}

Swift::Void __swiftcall AppleKeychain.stopMonitoring(_:)(Swift::UInt64 a1)
{
  uint64_t v3 = sub_10001EC04(a1);
  uint64_t v5 = v4;
  swift_endAccess(v6);
  sub_10012FAF4();
  if (v3) {
    sub_100021018(v3, v5);
  }
  swift_beginAccess(v1 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_tokens, v6, 33LL, 0LL);
  sub_10013F440(a1);
  swift_endAccess(v6);
}

void *AppleKeychain.findIdentities(for:)(uint64_t a1, uint64_t a2, void *a3)
{
  v466  = a1;
  uint64_t v5 = sub_100002274(qword_100410330);
  __chkstk_darwin(v5);
  v461  = (char *)&v408 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100002274(&qword_100408AD8);
  uint64_t v8 = __chkstk_darwin(v7);
  v476  = (char *)&v408 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  v475  = (uint64_t)&v408 - v10;
  uint64_t v11 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  v434  = *(void *)(v11 - 8);
  v435  = v11;
  __chkstk_darwin(v11);
  v433  = (char *)&v408 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v432  = type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy(0LL);
  v430  = *(void *)(v432 - 8);
  __chkstk_darwin(v432);
  v428  = (char *)&v408 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v427  = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth(0LL);
  v425  = *(void *)(v427 - 8);
  __chkstk_darwin(v427);
  v424  = (char *)&v408 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v431  = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  v429  = *(void *)(v431 - 8);
  __chkstk_darwin(v431);
  v426  = (char *)&v408 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v486  = type metadata accessor for UUID(0LL);
  v477  = *(void *)(v486 - 8);
  uint64_t v16 = __chkstk_darwin(v486);
  v469  = (char *)&v408 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  v464  = (char *)&v408 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  v485  = (char *)&v408 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  v453  = (CFStringRef)((char *)&v408 - v23);
  __chkstk_darwin(v22);
  v449  = (char *)&v408 - v24;
  uint64_t v25 = sub_100002274(&qword_100408A80);
  uint64_t v26 = __chkstk_darwin(v25);
  v474  = (uint64_t)&v408 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = __chkstk_darwin(v26);
  v443  = (uint64_t)&v408 - v29;
  __chkstk_darwin(v28);
  v440  = (char *)&v408 - v30;
  uint64_t v31 = sub_100002274(&qword_100408AA8);
  uint64_t v32 = __chkstk_darwin(v31);
  v460  = (uint64_t)&v408 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = __chkstk_darwin(v32);
  v450  = (char *)&v408 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  *(void *)&v452  = (char *)&v408 - v37;
  __chkstk_darwin(v36);
  v457  = (char *)&v408 - v38;
  v482  = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
  v478  = *(void *)(v482 - 8);
  uint64_t v39 = __chkstk_darwin(v482);
  v483  = (uint64_t *)((char *)&v408 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v41 = __chkstk_darwin(v39);
  v446  = (uint64_t)&v408 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  v447  = (char *)&v408 - v44;
  __chkstk_darwin(v43);
  v444  = (char *)&v408 - v45;
  v471  = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0LL);
  v481  = *(void *)(v471 - 8);
  uint64_t v46 = __chkstk_darwin(v471);
  v455  = (CFStringRef)((char *)&v408 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v48 = __chkstk_darwin(v46);
  v441  = (char *)&v408 - v49;
  __chkstk_darwin(v48);
  v445  = (unsigned int (*)(char *, uint64_t, uint64_t))((char *)&v408 - v50);
  uint64_t v51 = sub_100002274(&qword_100408AE0);
  uint64_t v52 = __chkstk_darwin(v51);
  v448  = (uint64_t)&v408 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = __chkstk_darwin(v52);
  v451  = (char *)&v408 - v55;
  uint64_t v56 = __chkstk_darwin(v54);
  v439  = (char *)&v408 - v57;
  uint64_t v58 = __chkstk_darwin(v56);
  v456  = (uint64_t *)((char *)&v408 - v59);
  __chkstk_darwin(v58);
  v458  = (uint64_t)&v408 - v60;
  v479  = type metadata accessor for Date(0LL);
  v484  = *(void *)(v479 - 8);
  uint64_t v61 = __chkstk_darwin(v479);
  v473  = (uint64_t)&v408 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v63 = __chkstk_darwin(v61);
  v437  = (char *)&v408 - v64;
  uint64_t v65 = __chkstk_darwin(v63);
  v436  = (char *)&v408 - v66;
  uint64_t v67 = __chkstk_darwin(v65);
  v442  = (char *)&v408 - v68;
  uint64_t v69 = __chkstk_darwin(v67);
  v438  = (char *)&v408 - v70;
  __chkstk_darwin(v69);
  v472  = (uint64_t)&v408 - v71;
  v463  = sub_100002274(&qword_100408AE8);
  inited  = swift_initStackObject(v463, &v497);
  *(_OWORD *)(inited + 16)  = xmmword_10033A980;
  *(void *)(inited + 32)  = kSecClass;
  v467  = (__CFString *)kSecClassGenericPassword;
  type metadata accessor for CFString(0LL);
  uint64_t v74 = v73;
  *(void *)(inited + 40)  = kSecClassGenericPassword;
  *(void *)(inited + 64)  = v73;
  *(void *)(inited + 72)  = kSecAttrSynchronizable;
  *(void *)(inited + 80)  = kSecAttrSynchronizableAny;
  *(void *)(inited + 104)  = v73;
  *(void *)(inited + 112)  = kSecAttrService;
  v468  = a2;
  *(void *)(inited + 120)  = a2;
  *(void *)(inited + 128)  = a3;
  *(void *)(inited + 144)  = &type metadata for String;
  *(void *)(inited + 152)  = kSecMatchLimit;
  v470  = (__CFString *)kSecMatchLimitAll;
  *(void *)(inited + 160)  = kSecMatchLimitAll;
  v480  = (__CFString *)kSecReturnData;
  *(void *)(inited + 184)  = v73;
  *(void *)(inited + 192)  = kSecReturnData;
  *(_BYTE *)(inited + 200)  = 1;
  *(void *)(inited + 224)  = &type metadata for Bool;
  *(void *)(inited + 232)  = kSecReturnAttributes;
  *(void *)(inited + 264)  = &type metadata for Bool;
  *(_BYTE *)(inited + 240)  = 1;
  v462  = (id)kSecClass;
  uint64_t v75 = v467;
  uint64_t v76 = (id)kSecAttrSynchronizable;
  unint64_t v77 = (id)kSecAttrSynchronizableAny;
  unint64_t v78 = (id)kSecAttrService;
  swift_bridgeObjectRetain(a3);
  uint64_t v79 = (id)kSecMatchLimit;
  uint64_t v80 = v470;
  uint64_t v81 = v480;
  uint64_t v82 = (id)kSecReturnAttributes;
  unint64_t v83 = sub_10000D52C(inited);
  uint64_t v84 = sub_10000AF70( &qword_1004049F0,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_100338658);
  v85.super.isa  = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v83);
  v496  = 0LL;
  OSStatus v86 = SecItemCopyMatching((CFDictionaryRef)v85.super.isa, (CFTypeRef *)&v496);
  uint64_t v87 = v496;
  if (v86)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v481 + 56))(v466, 1LL, 1LL, v471);
    swift_unknownObjectRelease(v87);

    return _swiftEmptyArrayStorage;
  }

  v459  = a3;
  v454  = v75;
  uint64_t v88 = v481;
  if (!v496
    || (*(void *)&v488  = v496,
        swift_unknownObjectRetain(v496),
        v89  = sub_100002274(&qword_100408AF0),
        (swift_dynamicCast(&v495, &v488, (char *)&type metadata for Swift.AnyObject + 8, v89, 6LL) & 1) == 0))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v88 + 56))(v466, 1LL, 1LL, v471);

    swift_unknownObjectRelease(v496);
    return _swiftEmptyArrayStorage;
  }

  v422  = v84;
  v423  = v74;
  v420  = v76;
  isa  = v85.super.isa;
  unint64_t countAndFlagsBits = v495._countAndFlagsBits;
  Date.init()();
  v418  = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v88 + 56);
  v418(v458, 1LL, 1LL, v471);
  v487[0]  = &_swiftEmptyDictionarySingleton;
  uint64_t v91 = *(void *)(countAndFlagsBits + 16);
  v421  = v78;
  if (!v91)
  {
    swift_bridgeObjectRelease(countAndFlagsBits);
    uint64_t v93 = 0LL;
    v147  = v458;
    uint64_t v98 = v484;
    v148  = v472;
    v149  = v477;
    v150  = v476;
    goto LABEL_64;
  }

  v414  = 0;
  LODWORD(v415)  = 0;
  unint64_t v92 = 0LL;
  uint64_t v93 = 0LL;
  v412  = v465 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_logger;
  v411  = (char *)&v488 + 8;
  uint64_t v94 = (__CFString *)kSecAttrLabel;
  unint64_t v95 = (__CFString *)(v91 - 1);
  v417  = (__CFString *)kSecValueData;
  v480  = (__CFString *)&type metadata for Any[8];
  uint64_t v96 = (uint64_t (*)(uint64_t))&type metadata for String;
  v413  = kSecAttrModificationDate;
  *((void *)&v97 + 1)  = 2LL;
  v419  = xmmword_100339900;
  *(void *)&__int128 v97 = 136315138LL;
  v410  = v97;
  uint64_t v98 = v484;
  v470  = (__CFString *)kSecAttrLabel;
  v467  = (__CFString *)(v91 - 1);
  while (1)
  {
    while (1)
    {
      if ((unint64_t)v92 >= *(void *)(countAndFlagsBits + 16))
      {
        __break(1u);
        goto LABEL_167;
      }

      uint64_t v87 = *(char **)(countAndFlagsBits + 8LL * (void)v92 + 32);
      if (!*((void *)v87 + 2))
      {
        v488  = 0u;
        v489  = 0u;
        swift_bridgeObjectRetain(v87);
LABEL_20:
        sub_1000225EC((uint64_t)&v488, &qword_100405280);
LABEL_21:
        swift_bridgeObjectRelease(v87);
        goto LABEL_22;
      }

      swift_bridgeObjectRetain(*(void *)(countAndFlagsBits + 8LL * (void)v92 + 32));
      uint64_t v99 = v94;
      v100  = sub_10001C470((uint64_t)v99);
      if ((v101 & 1) != 0)
      {
        sub_100002AE4(*((void *)v87 + 7) + 32 * v100, (uint64_t)&v488);
      }

      else
      {
        v488  = 0u;
        v489  = 0u;
      }

      if (!*((void *)&v489 + 1)) {
        goto LABEL_20;
      }
      if ((swift_dynamicCast(&v495, &v488, v480, &type metadata for String, 6LL) & 1) == 0) {
        goto LABEL_21;
      }
      object  = v495._object;
      Swift::Int v103 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D6D00, v495);
      swift_bridgeObjectRelease(object);
      if (!v103)
      {
        if (*((void *)v87 + 2))
        {
          uint64_t v107 = v417;
          v108  = sub_10001C470((uint64_t)v107);
          if ((v109 & 1) != 0)
          {
            sub_100002AE4(*((void *)v87 + 7) + 32 * v108, (uint64_t)&v488);
          }

          else
          {
            v488  = 0u;
            v489  = 0u;
          }

          uint64_t v98 = v484;

          if (*((void *)&v489 + 1))
          {
            if ((swift_dynamicCast(&v495, &v488, &type metadata for Any[8], &type metadata for Data, 6LL) & 1) != 0)
            {
              uint64_t v116 = v495._countAndFlagsBits;
              uint64_t v117 = v495._object;
              sub_100020AFC(v495._countAndFlagsBits, (unint64_t)v495._object);
              v409  = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
              v118  = type metadata accessor for BinaryDecoder();
              v119  = (void *)swift_allocObject(v118, 48LL, 7LL);
              v119[5]  = &_swiftEmptyDictionarySingleton;
              v119[2]  = v116;
              v119[3]  = v117;
              __asm { BR              X9 }
            }

            goto LABEL_43;
          }
        }

        else
        {
          v488  = 0u;
          v489  = 0u;
          uint64_t v98 = v484;
        }

        sub_1000225EC((uint64_t)&v488, &qword_100405280);
LABEL_43:
        v120  = v93;
        uint64_t v121 = (uint64_t)v456;
        v418((uint64_t)v456, 1LL, 1LL, v471);
        sub_1000225EC(v121, &qword_100408AE0);
        v122  = swift_allocObject(v463, 72LL, 7LL);
        *(_OWORD *)(v122 + 16)  = v419;
        *(void *)(v122 + 64)  = v423;
        v123  = (__CFString *)v462;
        uint64_t v124 = v454;
        *(void *)(v122 + 32)  = v462;
        *(void *)(v122 + 40)  = v124;
        swift_bridgeObjectRetain(v87);
        v125  = v123;
        unint64_t v126 = v124;
        unint64_t v127 = sub_10000D52C(v122);
        isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(v87);
        *(void *)&v488  = v87;
        uint64_t v129 = v127;
        goto LABEL_46;
      }

      if (v103 == 1) {
        break;
      }
      swift_bridgeObjectRelease(v87);
      uint64_t v98 = v484;
      if (v103 != 2) {
        goto LABEL_22;
      }
      v414  = 1;
      BOOL v110 = v95 == v92;
      unint64_t v92 = (__CFString *)((char *)v92 + 1);
      if (v110) {
        goto LABEL_170;
      }
    }

    uint64_t v98 = v484;
    if (*((void *)v87 + 2))
    {
      uint64_t v104 = v417;
      v105  = sub_10001C470((uint64_t)v104);
      if ((v106 & 1) != 0)
      {
        sub_100002AE4(*((void *)v87 + 7) + 32 * v105, (uint64_t)&v488);
      }

      else
      {
        v488  = 0u;
        v489  = 0u;
      }

      if (*((void *)&v489 + 1))
      {
        if ((swift_dynamicCast(&v495, &v488, &type metadata for Any[8], &type metadata for Data, 6LL) & 1) != 0)
        {
          v111  = v495._countAndFlagsBits;
          v112  = v495._object;
          sub_100020AFC(v495._countAndFlagsBits, (unint64_t)v495._object);
          v409  = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
          uint64_t v113 = type metadata accessor for BinaryDecoder();
          uint64_t v114 = (void *)swift_allocObject(v113, 48LL, 7LL);
          v114[5]  = &_swiftEmptyDictionarySingleton;
          v114[2]  = v111;
          v114[3]  = v112;
          __asm { BR              X9 }
        }

        v115  = v93;
        goto LABEL_45;
      }
    }

    else
    {
      v488  = 0u;
      v489  = 0u;
    }

    v115  = v93;
    sub_1000225EC((uint64_t)&v488, &qword_100405280);
LABEL_45:
    uint64_t v130 = (uint64_t)v457;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v478 + 56))(v457, 1LL, 1LL, v482);
    sub_1000225EC(v130, &qword_100408AA8);
    uint64_t v131 = swift_initStackObject(v463, &v490);
    *(_OWORD *)(v131 + 16)  = v419;
    *(void *)(v131 + 64)  = v423;
    v132  = (__CFString *)v462;
    unint64_t v133 = v454;
    *(void *)(v131 + 32)  = v462;
    *(void *)(v131 + 40)  = v133;
    swift_bridgeObjectRetain(v87);
    uint64_t v134 = v132;
    uint64_t v135 = v133;
    unint64_t v136 = sub_10000D52C(v131);
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(v87);
    *(void *)&v488  = v87;
    uint64_t v129 = v136;
    v120  = v115;
LABEL_46:
    sub_10013FFDC(v129, (uint64_t)sub_100140340, 0LL, isUniquelyReferenced_nonNull_native, (uint64_t)&v488);
    uint64_t v93 = v120;
    v137  = v488;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    v138.super.isa  = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v137);
    v139  = SecItemDelete((CFDictionaryRef)v138.super.isa);
    unint64_t v95 = v467;
    if (v139)
    {
      v140  = SecCopyErrorMessageString(v139, 0LL);
      if (v140)
      {
        v141  = (__CFString *)v140;
        v142  = static String._unconditionallyBridgeFromObjectiveC(_:)(v140);
        v144  = v143;
      }

      else
      {
        v144  = 0xE700000000000000LL;
        v142  = 0x6E776F6E6B6E75LL;
      }

      uint64_t v96 = (uint64_t (*)(uint64_t))&type metadata for String;
      sub_100134758(v142, v144, v465, v468, v459, "Failed to remove badly formed identity for %s with error: %s");
      swift_bridgeObjectRelease(v87);

      swift_bridgeObjectRelease(v144);
      uint64_t v98 = v484;
      uint64_t v94 = v470;
    }

    else
    {
      swift_bridgeObjectRelease(v87);

      uint64_t v94 = v470;
      uint64_t v96 = (uint64_t (*)(uint64_t))&type metadata for String;
    }

LABEL_94:
    v273  = v93 + 1;
    if (__OFADD__(v93, 1LL))
    {
      __break(1u);
LABEL_170:
      swift_bridgeObjectRelease(countAndFlagsBits);
      v149  = v477;
      v150  = v476;
LABEL_56:
      v415  = v93;
      v151  = swift_allocObject(v463, 192LL, 7LL);
      *(_OWORD *)(v151 + 16)  = xmmword_10033E830;
      v152  = *(void *)(v465 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
      v153  = *(void *)(v465 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup + 8);
      *(void *)(v151 + 32)  = kSecAttrAccessGroup;
      *(void *)(v151 + 40)  = v152;
      *(void *)(v151 + 48)  = v153;
      *(void *)(v151 + 64)  = v96;
      *(void *)(v151 + 72)  = v94;
      strcpy((char *)(v151 + 80), "public_local");
      *(_BYTE *)(v151 + 93)  = 0;
      *(_WORD *)(v151 + 94)  = -5120;
      *(void *)(v151 + 104)  = v96;
      v154  = v96;
      v155  = (__CFString *)v421;
      v156  = v468;
      *(void *)(v151 + 112)  = v421;
      *(void *)(v151 + 120)  = v156;
      v157  = v459;
      *(void *)(v151 + 128)  = v459;
      v158  = (__CFString *)v462;
      *(void *)(v151 + 144)  = v154;
      *(void *)(v151 + 152)  = v158;
      *(void *)(v151 + 184)  = v423;
      v159  = v454;
      *(void *)(v151 + 160)  = v454;
      swift_bridgeObjectRetain(v157);
      v160  = (id)kSecAttrAccessGroup;
      swift_bridgeObjectRetain(v153);
      v161  = v94;
      v162  = v155;
      v163  = v158;
      v164  = v159;
      v165  = sub_10000D52C(v151);
      v166.super.isa  = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v165);
      v167  = SecItemDelete((CFDictionaryRef)v166.super.isa);
      if (v167)
      {
        v168  = SecCopyErrorMessageString(v167, 0LL);
        if (v168)
        {
          v169  = (__CFString *)v168;
          v170  = static String._unconditionallyBridgeFromObjectiveC(_:)(v168);
          v172  = v171;
        }

        else
        {
          v172  = 0xE700000000000000LL;
          v170  = 0x6E776F6E6B6E75LL;
        }

        uint64_t v93 = v415;
        v148  = v472;
        sub_100133544(v170, v172);

        swift_bridgeObjectRelease(v172);
        uint64_t v98 = v484;
      }

      else
      {

        uint64_t v98 = v484;
        uint64_t v93 = v415;
        v148  = v472;
      }

      v147  = v458;
      continue;
    }

    break;
  }

  if (v273 < (uint64_t)v457)
  {
    v274  = *(void *)&v450[8 * v273];
    if (v274) {
      goto LABEL_97;
    }
    if (v93 + 2 >= (uint64_t)v457)
    {
      ++v93;
    }

    else
    {
      v274  = *(void *)&v450[8 * v93 + 16];
      if (v274)
      {
        v273  = v93 + 2;
LABEL_97:
        v268  = (__CFString *)((v274 - 1) & v274);
        v269  = __clz(__rbit64(v274)) + (v273 << 6);
        uint64_t v93 = v273;
        goto LABEL_93;
      }

      if (v93 + 3 >= (uint64_t)v457)
      {
        v93 += 2LL;
      }

      else
      {
        v274  = *(void *)&v450[8 * v93 + 24];
        if (v274)
        {
          v273  = v93 + 3;
          goto LABEL_97;
        }

        v273  = v93 + 4;
        if (v93 + 4 >= (uint64_t)v457)
        {
          v93 += 3LL;
        }

        else
        {
          v274  = *(void *)&v450[8 * v273];
          if (v274) {
            goto LABEL_97;
          }
          while (v449 != (char *)v93)
          {
            v274  = *(void *)&v447[8 * v93++];
            if (v274)
            {
              v273  = v93 + 4;
              goto LABEL_97;
            }
          }

          uint64_t v93 = v446;
        }
      }
    }
  }

  v275  = sub_100002274(&qword_100408AF8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v275 - 8) + 56LL))(v150, 1LL, 1LL, v275);
  v268  = 0LL;
LABEL_103:
  v276  = (uint64_t)v150;
  v277  = v475;
  sub_1000586C0(v276, v475, &qword_100408AD8);
  v278  = sub_100002274(&qword_100408AF8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v278 - 8) + 48LL))(v277, 1LL, v278) != 1)
  {
    v480  = v268;
    v481  = v93;
    v279  = v277 + *(int *)(v278 + 48);
    v280  = v485;
    v281  = v277;
    v282  = v486;
    v470  = *(__CFString **)(v149 + 32);
    ((void (*)(char *, uint64_t, uint64_t))v470)(v485, v281, v486);
    v283  = v98;
    v284  = v96;
    v285  = (void (*)(void, void, void, void))v483;
    sub_100022628(v279, (uint64_t)v483, v284);
    v286  = v474;
    sub_1000226B0((uint64_t)v285 + *(int *)(v482 + 28), v474, (uint64_t *)v94);
    v287  = (uint64_t *)v94;
    v288  = v479;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v283 + 48))(v286, 1LL, v479) == 1)
    {
      sub_10005802C((uint64_t)v285, v284);
      (*(void (**)(char *, uint64_t))(v149 + 8))(v280, v282);
      sub_1000225EC(v286, v287);
      v150  = v476;
      uint64_t v96 = v284;
      uint64_t v98 = v283;
      goto LABEL_111;
    }

    v289  = v473;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v283 + 32))(v473, v286, v288);
    if (Date.timeIntervalSince(_:)(v289) <= 16070400.0)
    {
      uint64_t v98 = v283;
      uint64_t v96 = type metadata accessor for LongTermPairingKeys.PublicIdentity;
      sub_10005802C((uint64_t)v483, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      v149  = v477;
      (*(void (**)(char *, uint64_t))(v477 + 8))(v485, v486);
      (*(void (**)(uint64_t, uint64_t))(v283 + 8))(v289, v288);
      v150  = v476;
LABEL_111:
      uint64_t v94 = (__CFString *)v287;
      uint64_t v93 = v481;
      unint64_t countAndFlagsBits = (unint64_t)v480;
    }

    else
    {
      v290  = swift_allocObject(v463, 232LL, 7LL);
      *(_OWORD *)(v290 + 16)  = v452;
      v291  = (__CFString *)v462;
      v292  = v454;
      v293  = (__CFString *)v455;
      *(void *)(v290 + 32)  = v462;
      *(void *)(v290 + 40)  = v292;
      v295  = (__CFString *)v420;
      v294  = (__CFString *)v421;
      *(void *)(v290 + 64)  = v423;
      *(void *)(v290 + 72)  = v295;
      *(_BYTE *)(v290 + 80)  = 1;
      *(void *)(v290 + 104)  = &type metadata for Bool;
      *(void *)(v290 + 112)  = v294;
      *(void *)(v290 + 120)  = v468;
      v296  = v459;
      *(void *)(v290 + 128)  = v459;
      *(void *)(v290 + 144)  = &type metadata for String;
      *(void *)(v290 + 152)  = v293;
      swift_bridgeObjectRetain(v296);
      v297  = v291;
      v298  = v292;
      v299  = v295;
      v300  = v294;
      v301  = v293;
      v302  = (void (*)(void, void, void, void))v483;
      *(void *)(v290 + 160)  = UUID.uuidString.getter(v301);
      *(void *)(v290 + 168)  = v303;
      v304  = (__CFString *)v453;
      *(void *)(v290 + 184)  = &type metadata for String;
      *(void *)(v290 + 192)  = v304;
      v305  = *v456;
      v306  = v456[1];
      *(void *)(v290 + 224)  = &type metadata for String;
      *(void *)(v290 + 200)  = v305;
      *(void *)(v290 + 208)  = v306;
      v307  = v304;
      swift_bridgeObjectRetain(v306);
      v308  = sub_10000D52C(v290);
      v309.super.isa  = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v308);
      v310  = SecItemDelete((CFDictionaryRef)v309.super.isa);
      if (v310)
      {
        v311  = SecCopyErrorMessageString(v310, 0LL);
        if (v311)
        {
          v312  = (__CFString *)v311;
          v313  = static String._unconditionallyBridgeFromObjectiveC(_:)(v311);
          v315  = v314;
        }

        else
        {
          v315  = 0xE700000000000000LL;
          v313  = 0x6E776F6E6B6E75LL;
        }

        unint64_t countAndFlagsBits = (unint64_t)v480;
        sub_1001336C8(v313, v315, v465, v472, v473, v468, v459);

        swift_bridgeObjectRelease(v315);
        v150  = v476;
        v316  = v464;
        v317  = v485;
        uint64_t v94 = (__CFString *)v287;
      }

      else
      {

        v150  = v476;
        v316  = v464;
        v317  = v485;
        uint64_t v94 = (__CFString *)v287;
        unint64_t countAndFlagsBits = (unint64_t)v480;
      }

      (*(void (**)(char *, char *, uint64_t))(v477 + 16))(v316, v317, v486);
      v318  = v488;
      v319  = swift_isUniquelyReferenced_nonNull_native(v488);
      uint64_t v93 = v481;
      if ((v319 & 1) == 0) {
        v318  = sub_1000A6B54(0, *(void *)(v318 + 16) + 1LL, 1, v318);
      }
      v321  = *(void *)(v318 + 16);
      v320  = *(void *)(v318 + 24);
      if (v321 >= v320 >> 1) {
        v318  = sub_1000A6B54(v320 > 1, v321 + 1, 1, v318);
      }
      *(void *)(v318 + 16)  = v321 + 1;
      v149  = v477;
      v322  = v318
      v323  = v486;
      ((void (*)(unint64_t, char *, uint64_t))v470)(v322, v464, v486);
      *(void *)&v488  = v318;
      uint64_t v96 = type metadata accessor for LongTermPairingKeys.PublicIdentity;
      sub_10005802C((uint64_t)v302, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      (*(void (**)(char *, uint64_t))(v149 + 8))(v485, v323);
      uint64_t v98 = v484;
      (*(void (**)(uint64_t, uint64_t))(v484 + 8))(v473, v479);
    }

    if (countAndFlagsBits) {
      goto LABEL_92;
    }
    goto LABEL_94;
  }

  swift_release(v467);
  v324  = v488;
  v325  = swift_bridgeObjectRetain(v488);
  v326  = (os_log_s *)Logger.logObject.getter(v325);
  v327  = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v326, v327))
  {
    v328  = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)v328  = 134217984;
    v495._unint64_t countAndFlagsBits = *(void *)(v324 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v495, &v495._object);
    swift_bridgeObjectRelease(v324);
    _os_log_impl( (void *)&_mh_execute_header,  v326,  v327,  "Removed %ld stale identities that were not modified recently",  v328,  0xCu);
    swift_slowDealloc(v328, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease(v324);
  }

  v329  = v486;

  swift_beginAccess(&v488, &v492, 0LL, 0LL);
  v330  = *(void *)(v488 + 16);
  v481  = v488;
  if (v330)
  {
    v331  = v488 + ((*(unsigned __int8 *)(v149 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80));
    v332  = *(void *)(v149 + 72);
    v485  = *(char **)(v149 + 16);
    swift_bridgeObjectRetain(v488);
    v333  = v461;
    while (1)
    {
      ((void (*)(char *, uint64_t, uint64_t))v485)(v333, v331, v329);
      v338  = *(void **)(v149 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v338)(v333, 0LL, 1LL, v329);
      v339  = (uint64_t)v469;
      (*(void (**)(char *, char *, uint64_t))(v149 + 32))(v469, v333, v329);
      v340  = v487[0];
      swift_bridgeObjectRetain(v487[0]);
      v341  = sub_10001C578(v339);
      v343  = v342;
      swift_bridgeObjectRelease(v340);
      v483  = v338;
      if ((v343 & 1) != 0)
      {
        v344  = swift_isUniquelyReferenced_nonNull_native(v340);
        v495._unint64_t countAndFlagsBits = v340;
        v487[0]  = 0x8000000000000000LL;
        if (!v344)
        {
          sub_10013D4AC();
          v340  = v495._countAndFlagsBits;
        }

        v149  = v477;
        v329  = v486;
        (*(void (**)(unint64_t, uint64_t))(v477 + 8))(*(void *)(v340 + 48) + v341 * v332, v486);
        v345  = v495._countAndFlagsBits;
        v337  = v478;
        v335  = v332;
        v336  = v460;
        sub_100022628( *(void *)(v495._countAndFlagsBits + 56) + *(void *)(v478 + 72) * v341,  v460,  type metadata accessor for LongTermPairingKeys.PublicIdentity);
        sub_10013B454(v341, v345);
        v346  = v487[0];
        v487[0]  = v345;
        swift_bridgeObjectRelease(v346);
        v334  = 0LL;
      }

      else
      {
        v334  = 1LL;
        v329  = v486;
        v149  = v477;
        v335  = v332;
        v336  = v460;
        v337  = v478;
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v337 + 56))(v336, v334, 1LL, v482);
      sub_1000225EC(v336, &qword_100408AA8);
      (*(void (**)(char *, uint64_t))(v149 + 8))(v469, v329);
      v331 += v335;
      --v330;
      v333  = v461;
      v332  = v335;
      if (!v330)
      {
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v483)(v461, 1LL, 1LL, v329);
        break;
      }
    }
  }

  else
  {
    v347  = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v149 + 56);
    swift_bridgeObjectRetain(v488);
    v347(v461, 1LL, 1LL, v329);
  }

  swift_bridgeObjectRelease(v481);
  swift_bridgeObjectRelease(v488);
LABEL_148:
  v348  = v459;
  v349  = swift_bridgeObjectRetain_n(v459, 2LL);
  v350  = (os_log_s *)Logger.logObject.getter(v349);
  v351  = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v350, v351))
  {
    v352  = swift_slowAlloc(32LL, -1LL);
    v486  = swift_slowAlloc(64LL, -1LL);
    v495._unint64_t countAndFlagsBits = v486;
    *(_DWORD *)v352  = 134218498;
    swift_beginAccess(v487, &v494, 0LL, 0LL);
    *(void *)&v488  = *(void *)(v487[0] + 16LL);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v488, (char *)&v488 + 8);
    *(_WORD *)(v352 + 12)  = 2080;
    v353  = v458;
    swift_beginAccess(v458, &v493, 0LL, 0LL);
    v354  = v448;
    sub_1000226B0(v353, v448, &qword_100408AE0);
    v355  = v445((char *)v354, 1LL, v471);
    sub_1000225EC(v354, &qword_100408AE0);
    if (v355 == 1) {
      v356  = 0x74756F68746977LL;
    }
    else {
      v356  = 1752459639LL;
    }
    if (v355 == 1) {
      v357  = 0xE700000000000000LL;
    }
    else {
      v357  = 0xE400000000000000LL;
    }
    *(void *)&v488  = sub_10000235C(v356, v357, &v495._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v488, (char *)&v488 + 8);
    swift_bridgeObjectRelease(v357);
    *(_WORD *)(v352 + 22)  = 2080;
    *(void *)&v488  = 39LL;
    *((void *)&v488 + 1)  = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v348);
    v358._unint64_t countAndFlagsBits = v468;
    v358._object  = v348;
    String.append(_:)(v358);
    v359._unint64_t countAndFlagsBits = 39LL;
    v359._object  = (void *)0xE100000000000000LL;
    String.append(_:)(v359);
    swift_bridgeObjectRelease(v348);
    v360  = *((void *)&v488 + 1);
    *(void *)&v488  = sub_10000235C(v488, *((unint64_t *)&v488 + 1), &v495._countAndFlagsBits);
    v361  = v479;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v488, (char *)&v488 + 8);
    swift_bridgeObjectRelease_n(v348, 2LL);
    swift_bridgeObjectRelease(v360);
    _os_log_impl( (void *)&_mh_execute_header,  v350,  v351,  "Found %ld paired identities %s private identity in the keychain for %s",  (uint8_t *)v352,  0x20u);
    v362  = v486;
    swift_arrayDestroy(v486, 2LL, &type metadata for Any[8]);
    swift_slowDealloc(v362, -1LL, -1LL);
    swift_slowDealloc(v352, -1LL, -1LL);

    v363  = v466;
  }

  else
  {
    swift_bridgeObjectRelease_n(v348, 2LL);

    v363  = v466;
    v361  = v479;
    v353  = v458;
  }

  v364  = isa;
  swift_beginAccess(v353, &v488, 0LL, 0LL);
  sub_1000226B0(v353, v363, &qword_100408AE0);
  swift_beginAccess(v487, &v495, 0LL, 0LL);
  v365  = v487[0];
  v366  = swift_bridgeObjectRetain(v487[0]);
  v145  = sub_100080DE8(v366);

  swift_bridgeObjectRelease(v365);
  (*(void (**)(uint64_t, uint64_t))(v484 + 8))(v472, v361);
  swift_bridgeObjectRelease(v487[0]);
  sub_1000225EC(v353, &qword_100408AE0);
  swift_unknownObjectRelease(v496);
  return v145;
}

      __break(1u);
      JUMPOUT(0x1001840B4LL);
    }

void sub_100133544(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = swift_bridgeObjectRetain_n(a2, 2LL);
  oslog  = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v10 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_bridgeObjectRetain(a2);
    uint64_t v9 = sub_10000235C(a1, a2, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  oslog,  v5,  "Failed to remove public identites of paired devices stored locally with error: %s",  v6,  0xCu);
    swift_arrayDestroy(v7, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

void sub_1001336C8( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v79 = a6;
  uint64_t v80 = a1;
  uint64_t v11 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  uint64_t v77 = *(void *)(v11 - 8);
  uint64_t v78 = v11;
  __chkstk_darwin(v11);
  uint64_t v76 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v75 = type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy(0LL);
  uint64_t v73 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  uint64_t v71 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v70 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth(0LL);
  uint64_t v68 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v67 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v74 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  uint64_t v72 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v69 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v60 - v21;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v23((char *)&v60 - v21, a4, v16);
  v23(v20, a5, v16);
  uint64_t v81 = a7;
  swift_bridgeObjectRetain_n(a7, 2LL);
  uint64_t v24 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.error.getter();
  int v27 = v26;
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v28 = swift_slowAlloc(32LL, -1LL);
    uint64_t v66 = swift_slowAlloc(96LL, -1LL);
    v84[0]  = v66;
    *(_DWORD *)uint64_t v28 = 136315650;
    uint64_t v62 = v28 + 4;
    int v65 = v27;
    uint64_t v29 = Date.timeIntervalSince(_:)(v20);
    uint64_t v61 = static Duration.seconds(_:)(v29);
    uint64_t v60 = v30;
    uint64_t v31 = sub_100002274(&qword_100408B00);
    os_log_t v64 = v25;
    uint64_t v32 = v31;
    uint64_t v33 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0LL);
    uint64_t v34 = *(void *)(v33 - 8);
    unint64_t v63 = a2;
    uint64_t v35 = *(void *)(v34 + 72);
    uint64_t v36 = *(unsigned __int8 *)(v34 + 80);
    uint64_t v37 = (v36 + 32) & ~v36;
    uint64_t v38 = swift_allocObject(v32, v37 + 2 * v35, v36 | 7);
    *(_OWORD *)(v38 + 16)  = xmmword_10033B810;
    uint64_t v39 = static Duration.UnitsFormatStyle.Unit.days.getter();
    static Duration.UnitsFormatStyle.Unit.hours.getter(v39);
    uint64_t v40 = sub_100005098(v38);
    swift_setDeallocating(v38);
    swift_arrayDestroy(v38 + v37, 2LL, v33);
    uint64_t v41 = swift_deallocClassInstance(v38, 32LL, 7LL);
    uint64_t v42 = v67;
    uint64_t v43 = static Duration.UnitsFormatStyle.UnitWidth.wide.getter(v41);
    uint64_t v44 = v71;
    uint64_t v45 = static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hide.getter(v43);
    uint64_t v46 = v76;
    static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide.getter(v45);
    uint64_t v47 = v69;
    static FormatStyle<>.units(allowed:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)( v40,  v42,  1LL,  0LL,  v44,  0LL,  1LL,  v46);
    swift_bridgeObjectRelease(v40);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v46, v78);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v44, v75);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v42, v70);
    uint64_t v48 = sub_10000AF70( &qword_100408B08,  (uint64_t (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle,  (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
    uint64_t v49 = v74;
    Duration.formatted<A>(_:)(&v82, v47, v61, v60, v74, v48);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v47, v49);
    unint64_t v50 = v83;
    uint64_t v82 = sub_10000235C(v82, v83, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
    swift_bridgeObjectRelease(v50);
    uint64_t v51 = *(void (**)(char *, uint64_t))(v17 + 8);
    v51(v22, v16);
    v51(v20, v16);
    *(_WORD *)(v28 + 12)  = 2080;
    uint64_t v82 = 39LL;
    unint64_t v83 = 0xE100000000000000LL;
    uint64_t v52 = v81;
    swift_bridgeObjectRetain(v81);
    v53._unint64_t countAndFlagsBits = v79;
    v53._object  = v52;
    String.append(_:)(v53);
    v54._unint64_t countAndFlagsBits = 39LL;
    v54._object  = (void *)0xE100000000000000LL;
    String.append(_:)(v54);
    swift_bridgeObjectRelease(v52);
    unint64_t v55 = v83;
    uint64_t v82 = sub_10000235C(v82, v83, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
    swift_bridgeObjectRelease_n(v52, 2LL);
    swift_bridgeObjectRelease(v55);
    *(_WORD *)(v28 + 22)  = 2080;
    unint64_t v56 = v63;
    swift_bridgeObjectRetain(v63);
    uint64_t v82 = sub_10000235C(v80, v56, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
    swift_bridgeObjectRelease_n(v56, 3LL);
    os_log_t v57 = v64;
    _os_log_impl( (void *)&_mh_execute_header,  v64,  (os_log_type_t)v65,  "Failed to delete a stale device identity last modified %s ago from the keychain for %s with error: %s",  (uint8_t *)v28,  0x20u);
    uint64_t v58 = v66;
    swift_arrayDestroy(v66, 3LL, &type metadata for Any[8]);
    swift_slowDealloc(v58, -1LL, -1LL);
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  else
  {

    uint64_t v59 = *(void (**)(char *, uint64_t))(v17 + 8);
    v59(v22, v16);
    v59(v20, v16);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease_n(v81, 2LL);
  }

BOOL AppleKeychain.save(identity:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100128460( (void (*)(void))type metadata accessor for LongTermPairingKeys.PrivateIdentity,  (uint64_t (*)(void))&P256.Signing.PrivateKey.rawRepresentation.getter);
  unint64_t v8 = v7;
  uint64_t v9 = *(void *)(v3 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
  uint64_t v10 = *(void *)(v3 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup + 8);
  uint64_t v11 = *(void *)(v3 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView);
  uint64_t v12 = *(void *)(v3 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView + 8);
  uint64_t v13 = UUID.uuidString.getter(v6);
  uint64_t v15 = v14;
  uint64_t v49 = a2;
  unint64_t v50 = (void *)a3;
  unint64_t v16 = sub_10012F750(v6, v8, v9, v10, v11, v12, a2, a3, v13, v14, 0);
  sub_1000208D8(v6, v8);
  swift_bridgeObjectRelease(v15);
  uint64_t v17 = sub_100002274(&qword_100408AE8);
  inited  = swift_initStackObject(v17, v55);
  *(_OWORD *)(inited + 16)  = xmmword_100339900;
  *(void *)(inited + 32)  = kSecClass;
  type metadata accessor for CFString(0LL);
  uint64_t v20 = v19;
  *(void *)(inited + 64)  = v19;
  *(void *)(inited + 40)  = kSecClassGenericPassword;
  swift_bridgeObjectRetain(v16);
  uint64_t v21 = (id)kSecClass;
  uint64_t v22 = (id)kSecClassGenericPassword;
  unint64_t v23 = sub_10000D52C(inited);
  uint64_t v24 = sub_10012F6D4(v23, v16);
  sub_10000AF70( &qword_1004049F0,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_100338658);
  isa  = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v24);
  OSStatus v26 = SecItemAdd(isa, 0LL);

  if (v26 == -25299)
  {
    uint64_t v27 = swift_initStackObject(v17, v51);
    *(_OWORD *)(v27 + 16)  = xmmword_100339900;
    *(void *)(v27 + 64)  = v20;
    *(void *)(v27 + 32)  = v21;
    *(void *)(v27 + 40)  = v22;
    swift_bridgeObjectRetain(v16);
    uint64_t v28 = v21;
    uint64_t v29 = v22;
    unint64_t v30 = sub_10000D52C(v27);
    uint64_t v31 = sub_10012F6D4(v30, v16);
    uint64_t v32 = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v31);
    uint64_t v33 = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v16);
    OSStatus v26 = SecItemUpdate(v32, v33);

    uint64_t v34 = v50;
    if (!v26) {
      return v26 == 0;
    }
  }

  else
  {
    swift_bridgeObjectRelease(v16);
    uint64_t v34 = v50;
    if (!v26) {
      return v26 == 0;
    }
  }

  uint64_t v35 = swift_bridgeObjectRetain_n(v34, 2LL);
  uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
  os_log_type_t v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = swift_slowAlloc(22LL, -1LL);
    uint64_t v39 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v38 = 136315394;
    uint64_t v52 = 39LL;
    unint64_t v53 = 0xE100000000000000LL;
    v54[0]  = v39;
    swift_bridgeObjectRetain(v34);
    v40._unint64_t countAndFlagsBits = v49;
    v40._object  = v34;
    String.append(_:)(v40);
    v41._unint64_t countAndFlagsBits = 39LL;
    v41._object  = (void *)0xE100000000000000LL;
    String.append(_:)(v41);
    swift_bridgeObjectRelease(v34);
    unint64_t v42 = v53;
    uint64_t v52 = sub_10000235C(v52, v53, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
    swift_bridgeObjectRelease_n(v34, 2LL);
    swift_bridgeObjectRelease(v42);
    *(_WORD *)(v38 + 12)  = 2080;
    CFStringRef v43 = SecCopyErrorMessageString(v26, 0LL);
    if (v43)
    {
      uint64_t v44 = (__CFString *)v43;
      uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
      unint64_t v47 = v46;
    }

    else
    {
      unint64_t v47 = 0xE700000000000000LL;
      uint64_t v45 = 0x6E776F6E6B6E75LL;
    }

    uint64_t v52 = sub_10000235C(v45, v47, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
    swift_bridgeObjectRelease(v47);
    _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "Failed to add the generated private identity to the keychain for %s with error: %s",  (uint8_t *)v38,  0x16u);
    swift_arrayDestroy(v39, 2LL, &type metadata for Any[8]);
    swift_slowDealloc(v39, -1LL, -1LL);
    swift_slowDealloc(v38, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v34, 2LL);
  }

  return v26 == 0;
}

BOOL AppleKeychain.save(identity:for:publicly:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  char v53 = v7;
  uint64_t v8 = LongTermPairingKeys.PublicIdentity.rawRepresentation.getter();
  unint64_t v10 = v9;
  uint64_t v11 = *(void *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
  uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup + 8);
  uint64_t v13 = *(void *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView);
  uint64_t v14 = *(void *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView + 8);
  uint64_t v15 = UUID.uuidString.getter();
  uint64_t v17 = v16;
  char v51 = v53;
  uint64_t v52 = a2;
  Swift::String v54 = (void *)a3;
  unint64_t v18 = sub_10012F750(v8, v10, v11, v12, v13, v14, a2, a3, v15, v16, v51);
  sub_1000208D8(v8, v10);
  swift_bridgeObjectRelease(v17);
  uint64_t v19 = sub_100002274(&qword_100408AE8);
  inited  = swift_initStackObject(v19, v59);
  *(_OWORD *)(inited + 16)  = xmmword_100339900;
  *(void *)(inited + 32)  = kSecClass;
  type metadata accessor for CFString(0LL);
  uint64_t v22 = v21;
  *(void *)(inited + 64)  = v21;
  *(void *)(inited + 40)  = kSecClassGenericPassword;
  swift_bridgeObjectRetain(v18);
  unint64_t v23 = (id)kSecClass;
  uint64_t v24 = (id)kSecClassGenericPassword;
  unint64_t v25 = sub_10000D52C(inited);
  uint64_t v26 = sub_10012F6D4(v25, v18);
  sub_10000AF70( &qword_1004049F0,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_100338658);
  isa  = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v26);
  OSStatus v28 = SecItemAdd(isa, 0LL);

  if (v28 == -25299)
  {
    uint64_t v29 = swift_initStackObject(v19, v55);
    *(_OWORD *)(v29 + 16)  = xmmword_100339900;
    *(void *)(v29 + 64)  = v22;
    *(void *)(v29 + 32)  = v23;
    *(void *)(v29 + 40)  = v24;
    swift_bridgeObjectRetain(v18);
    unint64_t v30 = v23;
    uint64_t v31 = v24;
    unint64_t v32 = sub_10000D52C(v29);
    uint64_t v33 = sub_10012F6D4(v32, v18);
    uint64_t v34 = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v33);
    uint64_t v35 = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v18);
    OSStatus v28 = SecItemUpdate(v34, v35);

    uint64_t v36 = v54;
    if (!v28) {
      return v28 == 0;
    }
  }

  else
  {
    swift_bridgeObjectRelease(v18);
    uint64_t v36 = v54;
    if (!v28) {
      return v28 == 0;
    }
  }

  uint64_t v37 = swift_bridgeObjectRetain_n(v36, 2LL);
  uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v39 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = swift_slowAlloc(22LL, -1LL);
    uint64_t v41 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v40 = 136315394;
    uint64_t v56 = 39LL;
    unint64_t v57 = 0xE100000000000000LL;
    v58[0]  = v41;
    swift_bridgeObjectRetain(v36);
    v42._unint64_t countAndFlagsBits = v52;
    v42._object  = v36;
    String.append(_:)(v42);
    v43._unint64_t countAndFlagsBits = 39LL;
    v43._object  = (void *)0xE100000000000000LL;
    String.append(_:)(v43);
    swift_bridgeObjectRelease(v36);
    unint64_t v44 = v57;
    uint64_t v56 = sub_10000235C(v56, v57, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
    swift_bridgeObjectRelease_n(v36, 2LL);
    swift_bridgeObjectRelease(v44);
    *(_WORD *)(v40 + 12)  = 2080;
    CFStringRef v45 = SecCopyErrorMessageString(v28, 0LL);
    if (v45)
    {
      unint64_t v46 = (__CFString *)v45;
      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      unint64_t v49 = v48;
    }

    else
    {
      unint64_t v49 = 0xE700000000000000LL;
      uint64_t v47 = 0x6E776F6E6B6E75LL;
    }

    uint64_t v56 = sub_10000235C(v47, v49, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
    swift_bridgeObjectRelease(v49);
    _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "Failed to add the generated public identity to the keychain for %s with error: %s",  (uint8_t *)v40,  0x16u);
    swift_arrayDestroy(v41, 2LL, &type metadata for Any[8]);
    swift_slowDealloc(v41, -1LL, -1LL);
    swift_slowDealloc(v40, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v36, 2LL);
  }

  return v28 == 0;
}

Swift::Void __swiftcall AppleKeychain.removeAllIdentities(for:)(CoreP2P::NANServiceName a1)
{
  object  = a1.string._object;
  uint64_t countAndFlagsBits = a1.string._countAndFlagsBits;
  uint64_t v3 = sub_100002274(&qword_100408AE8);
  inited  = swift_initStackObject(v3, v20);
  *(_OWORD *)(inited + 16)  = xmmword_100339910;
  *(void *)(inited + 32)  = kSecClass;
  type metadata accessor for CFString(0LL);
  *(void *)(inited + 40)  = kSecClassGenericPassword;
  *(void *)(inited + 64)  = v5;
  *(void *)(inited + 72)  = kSecAttrSynchronizable;
  *(void *)(inited + 80)  = kSecAttrSynchronizableAny;
  *(void *)(inited + 104)  = v5;
  *(void *)(inited + 112)  = kSecAttrService;
  *(void *)(inited + 144)  = &type metadata for String;
  *(void *)(inited + 120)  = countAndFlagsBits;
  *(void *)(inited + 128)  = object;
  uint64_t v6 = (id)kSecClass;
  char v7 = (id)kSecClassGenericPassword;
  uint64_t v8 = (id)kSecAttrSynchronizable;
  unint64_t v9 = (id)kSecAttrSynchronizableAny;
  unint64_t v10 = (id)kSecAttrService;
  swift_bridgeObjectRetain(object);
  unint64_t v11 = sub_10000D52C(inited);
  sub_10000AF70( &qword_1004049F0,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_100338658);
  v12.super.isa  = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v11);
  OSStatus v13 = SecItemDelete((CFDictionaryRef)v12.super.isa);
  if (v13)
  {
    CFStringRef v14 = SecCopyErrorMessageString(v13, 0LL);
    if (v14)
    {
      uint64_t v15 = (__CFString *)v14;
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      unint64_t v18 = v17;
    }

    else
    {
      unint64_t v18 = 0xE700000000000000LL;
      uint64_t v16 = 0x6E776F6E6B6E75LL;
    }

    sub_100134758( v16,  v18,  v19,  countAndFlagsBits,  object,  "Failed to delete all device identities from the keychain for %s with error: %s");

    swift_bridgeObjectRelease(v18);
  }

  else
  {
  }

void sub_100134758(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, const char *a6)
{
  uint64_t v11 = swift_bridgeObjectRetain_n(a2, 2LL);
  oslog  = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v12))
  {
    uint64_t v13 = swift_slowAlloc(22LL, -1LL);
    uint64_t v14 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v13 = 136315394;
    unint64_t v19 = 0xE100000000000000LL;
    uint64_t v20 = v14;
    swift_bridgeObjectRetain(a5);
    v15._uint64_t countAndFlagsBits = a4;
    v15._object  = a5;
    String.append(_:)(v15);
    v16._uint64_t countAndFlagsBits = 39LL;
    v16._object  = (void *)0xE100000000000000LL;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(a5);
    uint64_t v18 = sub_10000235C(39LL, 0xE100000000000000LL, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease_n(a5, 2LL);
    swift_bridgeObjectRelease(0xE100000000000000LL);
    *(_WORD *)(v13 + 12)  = 2080;
    swift_bridgeObjectRetain(a2);
    uint64_t v18 = sub_10000235C(a1, a2, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl((void *)&_mh_execute_header, oslog, v12, a6, (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2LL, &type metadata for Any[8]);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease_n(a5, 2LL);
  }

void AppleKeychain.remove(identity:for:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = sub_100002274(&qword_100408AE8);
  inited  = swift_initStackObject(v5, v25);
  *(_OWORD *)(inited + 16)  = xmmword_10033E830;
  *(void *)(inited + 32)  = kSecClass;
  type metadata accessor for CFString(0LL);
  *(void *)(inited + 40)  = kSecClassGenericPassword;
  *(void *)(inited + 64)  = v7;
  *(void *)(inited + 72)  = kSecAttrSynchronizable;
  *(void *)(inited + 80)  = kSecAttrSynchronizableAny;
  *(void *)(inited + 104)  = v7;
  *(void *)(inited + 112)  = kSecAttrService;
  *(void *)(inited + 120)  = a2;
  *(void *)(inited + 128)  = a3;
  *(void *)(inited + 144)  = &type metadata for String;
  *(void *)(inited + 152)  = kSecAttrAccount;
  uint64_t v8 = (id)kSecClass;
  unint64_t v9 = (id)kSecClassGenericPassword;
  unint64_t v10 = (id)kSecAttrSynchronizable;
  uint64_t v11 = (id)kSecAttrSynchronizableAny;
  os_log_type_t v12 = (id)kSecAttrService;
  swift_bridgeObjectRetain(a3);
  uint64_t v13 = UUID.uuidString.getter((id)kSecAttrAccount);
  *(void *)(inited + 184)  = &type metadata for String;
  *(void *)(inited + 160)  = v13;
  *(void *)(inited + 168)  = v14;
  unint64_t v15 = sub_10000D52C(inited);
  sub_10000AF70( &qword_1004049F0,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_100338658);
  v16.super.isa  = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v15);
  OSStatus v17 = SecItemDelete((CFDictionaryRef)v16.super.isa);
  if (v17)
  {
    CFStringRef v18 = SecCopyErrorMessageString(v17, 0LL);
    if (v18)
    {
      unint64_t v19 = (__CFString *)v18;
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      unint64_t v22 = v21;
    }

    else
    {
      unint64_t v22 = 0xE700000000000000LL;
      uint64_t v20 = 0x6E776F6E6B6E75LL;
    }

    sub_100134B70(v20, v22, v23, a1, a2, a3);

    swift_bridgeObjectRelease(v22);
  }

  else
  {
  }

void sub_100134B70(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v11 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100057FE8(a4, (uint64_t)v13, v14);
  swift_bridgeObjectRetain_n(a6, 2LL);
  uint64_t v15 = swift_bridgeObjectRetain_n(a2, 2LL);
  NSDictionary v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    uint64_t v19 = swift_slowAlloc(96LL, -1LL);
    uint64_t v30 = a5;
    uint64_t v20 = v19;
    uint64_t v34 = v19;
    *(_DWORD *)uint64_t v18 = 136315650;
    uint64_t v31 = a1;
    uint64_t v21 = type metadata accessor for UUID(0LL);
    uint64_t v22 = sub_10000AF70( (unint64_t *)&qword_10040D5B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
    unint64_t v25 = v24;
    uint64_t v32 = sub_10000235C(v23, v24, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
    swift_bridgeObjectRelease(v25);
    sub_10005802C((uint64_t)v13, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
    *(_WORD *)(v18 + 12)  = 2080;
    uint64_t v32 = 39LL;
    unint64_t v33 = 0xE100000000000000LL;
    swift_bridgeObjectRetain(a6);
    v26._uint64_t countAndFlagsBits = v30;
    v26._object  = a6;
    String.append(_:)(v26);
    v27._uint64_t countAndFlagsBits = 39LL;
    v27._object  = (void *)0xE100000000000000LL;
    String.append(_:)(v27);
    swift_bridgeObjectRelease(a6);
    unint64_t v28 = v33;
    uint64_t v32 = sub_10000235C(v32, v33, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
    swift_bridgeObjectRelease_n(a6, 2LL);
    swift_bridgeObjectRelease(v28);
    *(_WORD *)(v18 + 22)  = 2080;
    swift_bridgeObjectRetain(a2);
    uint64_t v32 = sub_10000235C(v31, a2, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "Failed to delete the device identity %s from the keychain for %s with error: %s",  (uint8_t *)v18,  0x20u);
    swift_arrayDestroy(v20, 3LL, &type metadata for Any[8]);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {

    sub_10005802C((uint64_t)v13, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease_n(a6, 2LL);
  }

uint64_t AppleKeychain.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_logger;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView + 8));
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_tokens + 8);
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_tokens));
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors));
  return v0;
}

uint64_t AppleKeychain.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_logger;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView + 8));
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_tokens + 8);
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_tokens));
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors));
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100134FA0(uint64_t a1, uint64_t a2)
{
  return AppleKeychain.monitor(using:)(a1, a2);
}

uint64_t sub_100134FC0(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_beginAccess(*v1 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors, v8, 33LL, 0LL);
  uint64_t v4 = sub_10001EC04(a1);
  uint64_t v6 = v5;
  swift_endAccess(v8);
  sub_10012FAF4();
  if (v4) {
    sub_100021018(v4, v6);
  }
  swift_beginAccess(v3 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_tokens, v8, 33LL, 0LL);
  sub_10013F440(a1);
  return swift_endAccess(v8);
}

void *sub_100135078(uint64_t a1, uint64_t a2, void *a3)
{
  return AppleKeychain.findIdentities(for:)(a1, a2, a3);
}

BOOL sub_100135098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AppleKeychain.save(identity:for:)(a1, a2, a3);
}

BOOL sub_1001350BC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return AppleKeychain.save(identity:for:publicly:)(a1, a2, a3, a4);
}

void sub_1001350E0(uint64_t a1, uint64_t a2)
{
}

void sub_100135100(uint64_t a1, uint64_t a2, void *a3)
{
}

uint64_t sub_100135120()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = v1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n(*(void *)(v0 + 40), 2LL);
  int64_t v8 = 0LL;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }

    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v11 >= v6) {
      goto LABEL_25;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v6) {
        goto LABEL_25;
      }
      unint64_t v12 = *(void *)(v2 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v6) {
          goto LABEL_25;
        }
        unint64_t v12 = *(void *)(v2 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v6) {
            goto LABEL_25;
          }
          unint64_t v12 = *(void *)(v2 + 8 * v8);
          if (!v12)
          {
            int64_t v8 = v11 + 4;
            if (v11 + 4 >= v6) {
              goto LABEL_25;
            }
            unint64_t v12 = *(void *)(v2 + 8 * v8);
            if (!v12) {
              break;
            }
          }
        }
      }
    }

uint64_t (*sub_1001352A8(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24)  = v1;
  swift_beginAccess(v1 + 16, a1, 33LL, 0LL);
  return sub_1001352E8;
}

uint64_t sub_1001352E8(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess(a1);
  if ((a2 & 1) == 0) {
    return sub_100135120();
  }
  return result;
}

void *InMemoryKeychain.__allocating_init()()
{
  uint64_t result = (void *)swift_allocObject(v0, 48LL, 7LL);
  result[2]  = &_swiftEmptyDictionarySingleton;
  result[3]  = &_swiftEmptySetSingleton;
  result[4]  = 0LL;
  result[5]  = &_swiftEmptyDictionarySingleton;
  return result;
}

void *InMemoryKeychain.init()()
{
  uint64_t result = v0;
  v0[2]  = &_swiftEmptyDictionarySingleton;
  v0[3]  = &_swiftEmptySetSingleton;
  v0[4]  = 0LL;
  v0[5]  = &_swiftEmptyDictionarySingleton;
  return result;
}

uint64_t InMemoryKeychain.monitor(using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_beginAccess(v2 + 24, v14, 33LL, 0LL);
  uint64_t v6 = sub_1001263E8();
  char v8 = v7;
  uint64_t result = swift_endAccess(v14);
  if ((v8 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v10 = swift_allocObject(&unk_1003E6D58, 32LL, 7LL);
    *(void *)(v10 + 16)  = a1;
    *(void *)(v10 + 24)  = a2;
    swift_beginAccess(v3 + 40, v14, 33LL, 0LL);
    swift_retain();
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + 40));
    uint64_t v13 = *(void *)(v3 + 40);
    *(void *)(v3 + 40)  = 0x8000000000000000LL;
    sub_10001F838((uint64_t)sub_100144164, v10, v6, isUniquelyReferenced_nonNull_native);
    uint64_t v12 = *(void *)(v3 + 40);
    *(void *)(v3 + 40)  = v13;
    swift_bridgeObjectRelease(v12);
    swift_endAccess(v14);
    return v6;
  }

  return result;
}

Swift::Void __swiftcall InMemoryKeychain.stopMonitoring(_:)(Swift::UInt64 a1)
{
  uint64_t v3 = (uint64_t *)(v1 + 40);
  swift_beginAccess(v1 + 40, v12, 33LL, 0LL);
  unint64_t v4 = sub_10001C5E4(a1);
  if ((v5 & 1) != 0)
  {
    unint64_t v6 = v4;
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v8 = *v3;
    uint64_t v11 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10013D774();
      uint64_t v8 = v11;
    }

    uint64_t v9 = *(void *)(*(void *)(v8 + 56) + 16 * v6 + 8);
    sub_10013B728(v6, v8);
    uint64_t v10 = *v3;
    *uint64_t v3 = v8;
    swift_bridgeObjectRelease(v10);
    swift_endAccess(v12);
    swift_release(v9);
  }

  else
  {
    swift_endAccess(v12);
  }

uint64_t InMemoryKeychain.findIdentities(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100002274(&qword_100408B10);
  __chkstk_darwin(v7);
  uint64_t v9 = &v26[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = sub_100002274((uint64_t *)&unk_1004050D0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = &v26[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = *(int *)(v12 + 48);
  __n128 v16 = swift_beginAccess(v3 + 16, v26, 0LL, 0LL);
  uint64_t v17 = *(void *)(v3 + 16);
  if (*(void *)(v17 + 16))
  {
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(v17);
    unint64_t v18 = sub_10001C4F8(a2, a3);
    if ((v19 & 1) != 0)
    {
      sub_1000226B0(*(void *)(v17 + 56) + *(void *)(v11 + 72) * v18, (uint64_t)v9, (uint64_t *)&unk_1004050D0);
      uint64_t v20 = 0LL;
    }

    else
    {
      uint64_t v20 = 1LL;
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, v20, 1LL, v10);
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(v17);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) != 1)
    {
      uint64_t v23 = *(int *)(v10 + 48);
      sub_1000586C0((uint64_t)v9, (uint64_t)v14, &qword_100408AE0);
      uint64_t v22 = *(void *)&v9[v23];
      *(void *)&v14[v15]  = v22;
      goto LABEL_9;
    }
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v11 + 56))(v9, 1LL, 1LL, v10, v16);
  }

  uint64_t v21 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v14, 1LL, 1LL, v21);
  *(void *)&v14[v15]  = _swiftEmptyArrayStorage;
  sub_1000225EC((uint64_t)v9, &qword_100408B10);
  uint64_t v22 = *(void *)&v14[v15];
LABEL_9:
  sub_1000586C0((uint64_t)v14, a1, &qword_100408AE0);
  return v22;
}

uint64_t InMemoryKeychain.save(identity:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v30 = sub_100002274((uint64_t *)&unk_1004050D0);
  uint64_t v32 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100002274(&qword_100408AE0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100057FE8(a1, (uint64_t)v12, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
  uint64_t v13 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0LL);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL);
  v29(v12, 0LL, 1LL, v13);
  uint64_t v14 = (void *)(v4 + 16);
  swift_beginAccess(v4 + 16, v34, 33LL, 0LL);
  swift_bridgeObjectRetain(a3);
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(*(void *)(v4 + 16));
  uint64_t v33 = *(void *)(v4 + 16);
  uint64_t v16 = v33;
  *(void *)(v4 + 16)  = 0x8000000000000000LL;
  uint64_t v31 = a2;
  unint64_t v18 = sub_10001C4F8(a2, a3);
  uint64_t v19 = *(void *)(v16 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_10;
  }

  LOBYTE(a2)  = v17;
  if (*(void *)(v16 + 24) >= v21)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_6;
    }
LABEL_10:
    sub_10013D260();
    uint64_t v16 = v33;
    goto LABEL_6;
  }

  sub_100138518(v21, isUniquelyReferenced_nonNull_native);
  uint64_t v16 = v33;
  unint64_t v22 = sub_10001C4F8(v31, a3);
  if ((a2 & 1) != (v23 & 1))
  {
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for NANServiceName);
    __break(1u);
    return result;
  }

  unint64_t v18 = v22;
LABEL_6:
  unint64_t v24 = (void *)*v14;
  *uint64_t v14 = v16;
  swift_bridgeObjectRelease(v24);
  unint64_t v25 = (void *)*v14;
  if ((a2 & 1) == 0)
  {
    uint64_t v26 = *(int *)(v30 + 48);
    v29(v9, 1LL, 1LL, v13);
    *(void *)&v9[v26]  = _swiftEmptyArrayStorage;
    sub_10013E1EC(v18, v31, a3, (uint64_t)v9, v25);
    swift_bridgeObjectRetain(a3);
  }

  uint64_t v27 = v25[7] + *(void *)(v32 + 72) * v18;
  swift_bridgeObjectRetain(v25);
  sub_10014114C((uint64_t)v12, v27);
  swift_endAccess(v34);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(v25);
  sub_100135120();
  return 1LL;
}

Swift::Void __swiftcall InMemoryKeychain.removeAllIdentities(for:)(CoreP2P::NANServiceName a1)
{
  uint64_t v2 = v1;
  object  = a1.string._object;
  uint64_t countAndFlagsBits = a1.string._countAndFlagsBits;
  uint64_t v5 = sub_100002274(&qword_100408B10);
  __chkstk_darwin(v5);
  uint64_t v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v2 + 16, v9, 33LL, 0LL);
  sub_10001ECAC(countAndFlagsBits, (uint64_t)object, (uint64_t)v7);
  sub_1000225EC((uint64_t)v7, &qword_100408B10);
  swift_endAccess(v9);
  sub_100135120();
}

uint64_t InMemoryKeychain.remove(identity:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v67 = (char *)a1;
  uint64_t v68 = a2;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v66 = sub_100002274(&qword_100408B18);
  __chkstk_darwin(v66);
  uint64_t v71 = (uint64_t)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0LL);
  uint64_t v65 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100002274(&qword_100408B10);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100002274(qword_100410330);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v64 = (uint64_t)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v70 = (uint64_t)&v60 - v20;
  __chkstk_darwin(v19);
  unint64_t v22 = (char *)&v60 - v21;
  swift_beginAccess(v3 + 16, v74, 0LL, 0LL);
  uint64_t v63 = v3;
  uint64_t v23 = *(void *)(v3 + 16);
  uint64_t v24 = *(void *)(v23 + 16);
  uint64_t v69 = v10;
  uint64_t v61 = v8;
  if (v24)
  {
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(v23);
    unint64_t v25 = sub_10001C4F8(v68, a3);
    if ((v26 & 1) != 0)
    {
      unint64_t v27 = v25;
      uint64_t v62 = v12;
      uint64_t v28 = *(void *)(v23 + 56);
      uint64_t v29 = sub_100002274((uint64_t *)&unk_1004050D0);
      uint64_t v30 = v22;
      uint64_t v31 = v6;
      uint64_t v32 = a3;
      uint64_t v33 = *(void *)(v29 - 8);
      uint64_t v34 = v28 + *(void *)(v33 + 72) * v27;
      uint64_t v12 = v62;
      sub_1000226B0(v34, (uint64_t)v15, (uint64_t *)&unk_1004050D0);
      uint64_t v35 = *(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56);
      a3  = v32;
      uint64_t v6 = v31;
      unint64_t v22 = v30;
      uint64_t v10 = v69;
      v35(v15, 0LL, 1LL, v29);
    }

    else
    {
      uint64_t v37 = sub_100002274((uint64_t *)&unk_1004050D0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56LL))(v15, 1LL, 1LL, v37);
    }

    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(v23);
  }

  else
  {
    uint64_t v36 = sub_100002274((uint64_t *)&unk_1004050D0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))(v15, 1LL, 1LL, v36);
  }

  uint64_t v38 = v70;
  uint64_t v39 = sub_100002274((uint64_t *)&unk_1004050D0);
  uint64_t v62 = *(char **)(*(void *)(v39 - 8) + 48LL);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v62)(v15, 1LL, v39)
    || (*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v15, 1LL, v10))
  {
    sub_1000225EC((uint64_t)v15, &qword_100408B10);
    uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v40(v22, 1LL, 1LL, v5);
    uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  }

  else
  {
    sub_100057FE8((uint64_t)v15, (uint64_t)v12, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
    sub_1000225EC((uint64_t)v15, &qword_100408B10);
    uint64_t v59 = (uint64_t)v12;
    uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v41(v22, v59, v5);
    sub_10005802C(v59, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
    uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v40(v22, 0LL, 1LL, v5);
  }

  v41((char *)v38, (uint64_t)v67, v5);
  v40((char *)v38, 0LL, 1LL, v5);
  uint64_t v42 = v71;
  uint64_t v43 = v71 + *(int *)(v66 + 48);
  sub_1000226B0((uint64_t)v22, v71, qword_100410330);
  sub_1000226B0(v38, v43, qword_100410330);
  unint64_t v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v44(v42, 1LL, v5) != 1)
  {
    uint64_t v47 = v64;
    sub_1000226B0(v42, v64, qword_100410330);
    if (v44(v43, 1LL, v5) != 1)
    {
      uint64_t v67 = v22;
      uint64_t v49 = v47;
      unint64_t v50 = v61;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v61, v43, v5);
      uint64_t v51 = sub_10000AF70( &qword_1004050E0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v52 = dispatch thunk of static Equatable.== infix(_:_:)(v49, v50, v5, v51);
      uint64_t v53 = a3;
      Swift::String v54 = *(void (**)(char *, uint64_t))(v6 + 8);
      v54(v50, v5);
      sub_1000225EC(v70, qword_100410330);
      sub_1000225EC((uint64_t)v67, qword_100410330);
      v54((char *)v49, v5);
      a3  = v53;
      uint64_t result = sub_1000225EC(v42, qword_100410330);
      uint64_t v46 = v69;
      if ((v52 & 1) == 0) {
        return result;
      }
      goto LABEL_17;
    }

    sub_1000225EC(v70, qword_100410330);
    sub_1000225EC((uint64_t)v22, qword_100410330);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v47, v5);
    return sub_1000225EC(v71, &qword_100408B18);
  }

  sub_1000225EC(v38, qword_100410330);
  sub_1000225EC((uint64_t)v22, qword_100410330);
  unsigned int v45 = v44(v43, 1LL, v5);
  uint64_t v46 = v69;
  if (v45 != 1) {
    return sub_1000225EC(v71, &qword_100408B18);
  }
  sub_1000225EC(v71, qword_100410330);
LABEL_17:
  swift_bridgeObjectRetain(a3);
  unint64_t v55 = sub_1001352A8((uint64_t)v73);
  uint64_t v56 = sub_100136188(v72, v68, a3);
  uint64_t v58 = v57;
  if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v62)(v57, 1LL, v39))
  {
    sub_1000225EC(v58, &qword_100408AE0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 56))(v58, 1LL, 1LL, v46);
  }

  ((void (*)(void *, void))v56)(v72, 0LL);
  swift_bridgeObjectRelease(a3);
  return v55((uint64_t)v73, 0);
}

void (*sub_1001360C0(void *a1, uint64_t a2))(void *a1)
{
  uint64_t v4 = malloc(0x50uLL);
  *a1  = v4;
  __int128 v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)((char *)v4 + 56)  = *(_OWORD *)a2;
  v4[2]  = v5;
  *((_WORD *)v4 + 24)  = *(_WORD *)(a2 + 32);
  sub_1000209DC((uint64_t)v4 + 56);
  sub_1000209DC((uint64_t)(v4 + 2));
  *((void *)v4 + 9)  = sub_10013E530(v4, a2);
  return sub_100136138;
}

void sub_100136138(void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *a1 + 32LL;
  uint64_t v3 = *a1 + 56LL;
  (*(void (**)(void, void))(*a1 + 72LL))(*a1, 0LL);
  sub_100020A04(v3);
  sub_100020A04(v2);
  free(v1);
}

void (*sub_100136188(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x30uLL);
  *a1  = v6;
  v6[4]  = a3;
  swift_bridgeObjectRetain(a3);
  v6[5]  = sub_10013E63C(v6, a2, a3);
  return sub_1001361F4;
}

void sub_1001361F4(void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void *)(*a1 + 32LL);
  (*(void (**)(void, void))(*a1 + 40LL))(*a1, 0LL);
  swift_bridgeObjectRelease(v2);
  free(v1);
}

void *InMemoryKeychain.deinit()
{
  uint64_t v1 = v0[4];
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v0[5]);
  return v0;
}

uint64_t InMemoryKeychain.__deallocating_deinit()
{
  uint64_t v1 = v0[4];
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t sub_1001362AC(uint64_t a1, uint64_t a2)
{
  return InMemoryKeychain.monitor(using:)(a1, a2);
}

void sub_1001362CC(Swift::UInt64 a1)
{
}

uint64_t sub_1001362EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return InMemoryKeychain.findIdentities(for:)(a1, a2, a3);
}

uint64_t sub_10013630C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 1LL;
}

uint64_t sub_100136330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s7CoreP2P16InMemoryKeychainC4save8identity3for8publiclySbAA19LongTermPairingKeysV14PublicIdentityV_AA14NANServiceNameVSbtF_0( a1,  a2,  a3) & 1;
}

uint64_t sub_100136354(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100002274(&qword_100408B10);
  __chkstk_darwin(v5);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(*v2 + 16LL, v10, 33LL, 0LL);
  sub_10001ECAC(a1, a2, (uint64_t)v7);
  sub_1000225EC((uint64_t)v7, &qword_100408B10);
  swift_endAccess(v10);
  return sub_100135120();
}

uint64_t sub_100136410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return InMemoryKeychain.remove(identity:for:)(a1, a2, a3);
}

uint64_t type metadata accessor for LongTermPairingKeys(uint64_t a1)
{
  return sub_100020E48(a1, qword_100408B78, (uint64_t)&nominal type descriptor for LongTermPairingKeys);
}

uint64_t type metadata accessor for LongTermPairingKeys.PrivateIdentity(uint64_t a1)
{
  return sub_100020E48(a1, qword_100408C10, (uint64_t)&nominal type descriptor for LongTermPairingKeys.PrivateIdentity);
}

uint64_t type metadata accessor for LongTermPairingKeys.PairedDevices()
{
  return objc_opt_self(&OBJC_CLASS____TtCV7CoreP2P19LongTermPairingKeysP33_EC6A7E7630A300FE23BBD99CAD03996C13PairedDevices);
}

uint64_t type metadata accessor for LongTermPairingKeys.Identity(uint64_t a1)
{
  return sub_100020E48(a1, qword_1004091A0, (uint64_t)&nominal type descriptor for LongTermPairingKeys.Identity);
}

uint64_t type metadata accessor for LongTermPairingKeys.PublicIdentity(uint64_t a1)
{
  return sub_100020E48( a1,  (uint64_t *)&unk_100408CA0,  (uint64_t)&nominal type descriptor for LongTermPairingKeys.PublicIdentity);
}

unint64_t sub_1001364A0()
{
  unint64_t result = qword_100408A68;
  if (!qword_100408A68)
  {
    unint64_t result = swift_getWitnessTable(&unk_100349B10, &type metadata for LongTermPairingKeys.PrivateIdentity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100408A68);
  }

  return result;
}

uint64_t sub_1001364E4(void *a1)
{
  uint64_t v3 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  dispatch thunk of Decoder.unkeyedContainer()(v26, v7, v8);
  if (v1)
  {
    sub_100002AC4(a1);
  }

  else
  {
    uint64_t v9 = v27;
    uint64_t v10 = v28;
    sub_1000237C8((uint64_t)v26, v27);
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)( &type metadata for UInt16,  &type metadata for UInt16,  &protocol witness table for UInt16,  v9,  v10);
    uint64_t v11 = (unsigned __int16)v24;
    uint64_t v12 = a1[3];
    uint64_t v13 = a1[4];
    sub_100021104(a1, v12);
    uint64_t v14 = dispatch thunk of Decoder.userInfo.getter(v12, v13);
    if (qword_100404158 != -1) {
      swift_once(&qword_100404158, sub_1000BD360);
    }
    uint64_t v15 = sub_1000032DC(v3, (uint64_t)static CodingUserInfoKey.fourByteAlignedValue);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v15, v3);
    if (*(void *)(v14 + 16) && (unint64_t v16 = sub_10001C320((uint64_t)v6), (v17 & 1) != 0))
    {
      sub_100002AE4(*(void *)(v14 + 56) + 32 * v16, (uint64_t)&v24);
    }

    else
    {
      __int128 v24 = 0u;
      __int128 v25 = 0u;
    }

    swift_bridgeObjectRelease(v14);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (*((void *)&v25 + 1))
    {
      if ((swift_dynamicCast(&v29, &v24, &type metadata for Any[8], &type metadata for Bool, 6LL) & 1) != 0
        && (v29 & 1) != 0)
      {
        uint64_t v18 = v27;
        uint64_t v19 = v28;
        sub_1000237C8((uint64_t)v26, v27);
        UnkeyedDecodingContainer.decodeData(with:)(((_DWORD)v11 + 3) & 0x1FFFC, v18, v19);
        __asm { BR              X11 }
      }
    }

    else
    {
      sub_1000225EC((uint64_t)&v24, &qword_100405280);
    }

    uint64_t v21 = v27;
    uint64_t v22 = v28;
    sub_1000237C8((uint64_t)v26, v27);
    uint64_t v7 = UnkeyedDecodingContainer.decodeData(with:)(v11, v21, v22);
    sub_100002AC4(v26);
    sub_100002AC4(a1);
  }

  return v7;
}

void sub_10013682C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100021104(a1, v4);
  dispatch thunk of Encoder.unkeyedContainer()(v6, v4, v5);
  __asm { BR              X11 }

uint64_t sub_100136890()
{
  LOWORD(v9[0])  = BYTE6(v0);
  uint64_t v3 = v11;
  uint64_t v4 = v12;
  sub_1000237C8((uint64_t)v10, v11);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( v9,  &type metadata for UInt16,  &protocol witness table for UInt16,  v3,  v4);
  if (!v2)
  {
    v9[0]  = v1;
    v9[1]  = v0;
    uint64_t v5 = v11;
    uint64_t v6 = v12;
    sub_1000237C8((uint64_t)v10, v11);
    unint64_t v7 = sub_10005CD78();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v9, &type metadata for Data, v7, v5, v6);
  }

  return sub_100002AC4(v10);
}

uint64_t sub_10013698C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100002274((uint64_t *)&unk_1004105A0);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v34 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v14 << 6);
      }

      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        if (v19 >= v35) {
          goto LABEL_37;
        }
        unint64_t v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          int64_t v14 = v19 + 1;
          if (v19 + 1 >= v35) {
            goto LABEL_37;
          }
          unint64_t v20 = v36[v14];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              uint64_t v3 = v34;
              if ((a2 & 1) != 0)
              {
                uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v36 = -1LL << v33;
                }
                *(void *)(v5 + 16)  = 0LL;
              }

              break;
            }

            unint64_t v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v14 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_44;
                }
                if (v14 >= v35) {
                  goto LABEL_37;
                }
                unint64_t v20 = v36[v14];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v14 = v21;
          }
        }

void sub_100136C88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100002274(&qword_1004092A8);
  char v29 = a2;
  uint64_t v30 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v5 + 32);
    unint64_t v28 = (void *)(v5 + 64);
    uint64_t v8 = -1LL;
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    unint64_t v9 = v8 & *(void *)(v5 + 64);
    uint64_t v26 = v3;
    int64_t v27 = (unint64_t)(v7 + 63) >> 6;
    swift_retain();
    int64_t v10 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v11 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v12 = v11 | (v10 << 6);
      }

      else
      {
        int64_t v13 = v10 + 1;
        if (__OFADD__(v10, 1LL))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return;
        }

        if (v13 >= v27) {
          goto LABEL_25;
        }
        unint64_t v14 = v28[v13];
        ++v10;
        if (!v14)
        {
          int64_t v10 = v13 + 1;
          if (v13 + 1 >= v27) {
            goto LABEL_25;
          }
          unint64_t v14 = v28[v10];
          if (!v14)
          {
            int64_t v15 = v13 + 2;
            if (v15 >= v27)
            {
LABEL_25:
              swift_release(v5);
              uint64_t v3 = v26;
              if ((v29 & 1) != 0)
              {
                uint64_t v25 = 1LL << *(_BYTE *)(v5 + 32);
                if (v25 > 63) {
                  bzero(v28, ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v28 = -1LL << v25;
                }
                *(void *)(v5 + 16)  = 0LL;
              }

              break;
            }

            unint64_t v14 = v28[v15];
            if (!v14)
            {
              while (1)
              {
                int64_t v10 = v15 + 1;
                if (__OFADD__(v15, 1LL)) {
                  goto LABEL_32;
                }
                if (v10 >= v27) {
                  goto LABEL_25;
                }
                unint64_t v14 = v28[v10];
                ++v15;
                if (v14) {
                  goto LABEL_22;
                }
              }
            }

            int64_t v10 = v15;
          }
        }

void sub_100136EC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100002274(&qword_100409220);
  char v34 = a2;
  uint64_t v35 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v5 + 32);
    char v33 = (void *)(v5 + 64);
    uint64_t v8 = -1LL;
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    unint64_t v9 = v8 & *(void *)(v5 + 64);
    BOOL v31 = v3;
    int64_t v32 = (unint64_t)(v7 + 63) >> 6;
    swift_retain();
    for (i  = 0LL; ; i  = v36)
    {
      if (v9)
      {
        unint64_t v11 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        int64_t v36 = i;
        unint64_t v12 = v11 | (i << 6);
      }

      else
      {
        int64_t v13 = i + 1;
        if (__OFADD__(i, 1LL))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return;
        }

        if (v13 >= v32) {
          goto LABEL_25;
        }
        unint64_t v14 = v33[v13];
        int64_t v15 = i + 1;
        if (!v14)
        {
          int64_t v15 = i + 2;
          if (i + 2 >= v32) {
            goto LABEL_25;
          }
          unint64_t v14 = v33[v15];
          if (!v14)
          {
            uint64_t v16 = i + 3;
            if (i + 3 >= v32)
            {
LABEL_25:
              swift_release(v5);
              uint64_t v3 = v31;
              if ((v34 & 1) != 0)
              {
                uint64_t v30 = 1LL << *(_BYTE *)(v5 + 32);
                if (v30 > 63) {
                  bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *char v33 = -1LL << v30;
                }
                *(void *)(v5 + 16)  = 0LL;
              }

              break;
            }

            unint64_t v14 = v33[v16];
            if (!v14)
            {
              while (1)
              {
                int64_t v15 = v16 + 1;
                if (__OFADD__(v16, 1LL)) {
                  goto LABEL_32;
                }
                if (v15 >= v32) {
                  goto LABEL_25;
                }
                unint64_t v14 = v33[v15];
                ++v16;
                if (v14) {
                  goto LABEL_22;
                }
              }
            }

            int64_t v15 = i + 3;
          }
        }

Swift::Int sub_100137118(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  uint64_t v38 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::Int v9 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1  = *(void *)(*v3 + 24);
  }
  sub_100002274(&qword_100405128);
  int v39 = a2;
  Swift::Int result = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  Swift::Int v11 = result;
  if (*(void *)(v9 + 16))
  {
    int64_t v12 = 0LL;
    uint64_t v13 = *(void *)(v9 + 64);
    uint64_t v37 = (void *)(v9 + 64);
    uint64_t v14 = 1LL << *(_BYTE *)(v9 + 32);
    if (v14 < 64) {
      uint64_t v15 = ~(-1LL << v14);
    }
    else {
      uint64_t v15 = -1LL;
    }
    unint64_t v16 = v15 & v13;
    uint64_t v35 = v3;
    int64_t v36 = (unint64_t)(v14 + 63) >> 6;
    Swift::Int v17 = result + 64;
    while (1)
    {
      if (v16)
      {
        unint64_t v19 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v20 = v19 | (v12 << 6);
      }

      else
      {
        int64_t v21 = v12 + 1;
        if (__OFADD__(v12, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        Swift::Int result = (Swift::Int)v37;
        if (v21 >= v36) {
          goto LABEL_36;
        }
        unint64_t v22 = v37[v21];
        ++v12;
        if (!v22)
        {
          int64_t v12 = v21 + 1;
          if (v21 + 1 >= v36) {
            goto LABEL_36;
          }
          unint64_t v22 = v37[v12];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v36)
            {
LABEL_36:
              if ((v39 & 1) == 0)
              {
                Swift::Int result = swift_release(v9);
                uint64_t v3 = v35;
                goto LABEL_43;
              }

              uint64_t v34 = 1LL << *(_BYTE *)(v9 + 32);
              if (v34 >= 64) {
                bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v37 = -1LL << v34;
              }
              uint64_t v3 = v35;
              *(void *)(v9 + 16)  = 0LL;
              break;
            }

            unint64_t v22 = v37[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v12 = v23 + 1;
                if (__OFADD__(v23, 1LL)) {
                  goto LABEL_45;
                }
                if (v12 >= v36) {
                  goto LABEL_36;
                }
                unint64_t v22 = v37[v12];
                ++v23;
                if (v22) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v12 = v23;
          }
        }

uint64_t sub_10013746C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  Swift::Int v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1  = *(void *)(*v3 + 24);
  }
  sub_100002274((uint64_t *)&unk_1004050B0);
  int v40 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_43;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  int v39 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v37 = v3;
  int64_t v38 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v19 = 0LL;
  while (1)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v38) {
      break;
    }
    char v24 = v39;
    unint64_t v25 = v39[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v38) {
        goto LABEL_36;
      }
      unint64_t v25 = v39[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_36:
          swift_release(v10);
          uint64_t v3 = v37;
          if ((v40 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v39[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v19 >= v38) {
              goto LABEL_36;
            }
            unint64_t v25 = v39[v19];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v19 = v26;
      }
    }

uint64_t sub_1001377F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100002274(&qword_1004092A0);
  char v23 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (!*(void *)(v5 + 16)) {
    goto LABEL_31;
  }
  uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v22 = (unint64_t)(v8 + 63) >> 6;
  swift_retain();
  if (v10)
  {
    unint64_t v11 = __clz(__rbit64(v10));
    goto LABEL_21;
  }

  if (v22 <= 1)
  {
    swift_release(v5);
    uint64_t v12 = (void *)(v5 + 64);
    if ((v23 & 1) == 0) {
      goto LABEL_31;
    }
    goto LABEL_27;
  }

  uint64_t v12 = (void *)(v5 + 64);
  unint64_t v13 = *(void *)(v5 + 72);
  uint64_t v14 = 1LL;
  if (v13) {
    goto LABEL_20;
  }
  uint64_t v14 = 2LL;
  if (v22 <= 2) {
    goto LABEL_24;
  }
  unint64_t v13 = *(void *)(v5 + 80);
  if (v13)
  {
LABEL_20:
    unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_21:
    uint64_t v16 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v11);
    uint64_t v17 = *(void *)(v5 + 56) + 24 * v11;
    unint64_t v18 = *(void **)v17;
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRetain(*(void *)(v17 + 16));
      id v19 = v18;
    }

    Hasher.init(_seed:)(v24, *(void *)(v7 + 40));
    __asm { BR              X8 }
  }

  uint64_t v15 = 3LL;
  if (v22 > 3)
  {
    unint64_t v13 = *(void *)(v5 + 88);
    if (v13)
    {
      uint64_t v14 = 3LL;
      goto LABEL_20;
    }

    while (1)
    {
      uint64_t v14 = v15 + 1;
      if (__OFADD__(v15, 1LL))
      {
        __break(1u);
        JUMPOUT(0x100137BACLL);
      }

      if (v14 >= v22) {
        break;
      }
      unint64_t v13 = *(void *)(v5 + 64 + 8 * v14);
      ++v15;
      if (v13) {
        goto LABEL_20;
      }
    }
  }

uint64_t sub_100137BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100002274(&qword_100409298);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v35) {
      break;
    }
    char v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v35) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

uint64_t sub_100137ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100002274(&qword_1004050F0);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v18 = v17 | (v15 << 6);
      goto LABEL_25;
    }

    int64_t v19 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v19 >= v12) {
      break;
    }
    unint64_t v20 = (void *)(v5 + 64);
    unint64_t v21 = *(void *)(v37 + 8 * v19);
    ++v15;
    if (!v21)
    {
      int64_t v15 = v19 + 1;
      if (v19 + 1 >= v12) {
        goto LABEL_37;
      }
      unint64_t v21 = *(void *)(v37 + 8 * v15);
      if (!v21)
      {
        int64_t v22 = v19 + 2;
        if (v22 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v21 = *(void *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            int64_t v15 = v22 + 1;
            if (__OFADD__(v22, 1LL)) {
              goto LABEL_46;
            }
            if (v15 >= v12) {
              goto LABEL_37;
            }
            unint64_t v21 = *(void *)(v37 + 8 * v15);
            ++v22;
            if (v21) {
              goto LABEL_24;
            }
          }
        }

        int64_t v15 = v22;
      }
    }

uint64_t sub_1001381F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100002274(&qword_100405130);
  char v43 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v42 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int v40 = v3;
  int64_t v41 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v41) {
      break;
    }
    id v25 = (void *)(v5 + 64);
    unint64_t v26 = *(void *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      int64_t v14 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_36;
      }
      unint64_t v26 = *(void *)(v42 + 8 * v14);
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v40;
          if ((v43 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = *(void *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            int64_t v14 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v41) {
              goto LABEL_36;
            }
            unint64_t v26 = *(void *)(v42 + 8 * v14);
            ++v27;
            if (v26) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v27;
      }
    }

uint64_t sub_100138518(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100002274((uint64_t *)&unk_1004050D0);
  uint64_t v44 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1  = *(void *)(*v3 + 24);
  }
  sub_100002274(&qword_100409268);
  int v45 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_43;
  }
  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  char v43 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1LL << v12);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v13;
  int64_t v41 = v3;
  int64_t v42 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0LL;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v42) {
      break;
    }
    int64_t v24 = v43;
    unint64_t v25 = v43[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_36;
      }
      unint64_t v25 = v43[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release(v9);
          uint64_t v3 = v41;
          if ((v45 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v18 >= v42) {
              goto LABEL_36;
            }
            unint64_t v25 = v43[v18];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v18 = v26;
      }
    }

uint64_t sub_1001388B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
  uint64_t v50 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v53 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1  = *(void *)(*v2 + 24);
  }
  sub_100002274(&qword_100409218);
  int v52 = a2;
  uint64_t v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  uint64_t v14 = v13;
  if (*(void *)(v12 + 16))
  {
    uint64_t v15 = 1LL << *(_BYTE *)(v12 + 32);
    uint64_t v16 = *(void *)(v12 + 64);
    uint64_t v49 = (void *)(v12 + 64);
    if (v15 < 64) {
      uint64_t v17 = ~(-1LL << v15);
    }
    else {
      uint64_t v17 = -1LL;
    }
    unint64_t v18 = v17 & v16;
    uint64_t v47 = v2;
    int64_t v48 = (unint64_t)(v15 + 63) >> 6;
    uint64_t v19 = v13 + 64;
    uint64_t result = swift_retain();
    int64_t v21 = 0LL;
    uint64_t v22 = v12;
    for (i = v12; ; uint64_t v22 = i)
    {
      if (v18)
      {
        unint64_t v24 = __clz(__rbit64(v18));
        v18 &= v18 - 1;
        unint64_t v25 = v24 | (v21 << 6);
      }

      else
      {
        int64_t v26 = v21 + 1;
        if (__OFADD__(v21, 1LL))
        {
LABEL_45:
          __break(1u);
          goto LABEL_46;
        }

        if (v26 >= v48)
        {
          swift_release(v22);
          uint64_t v3 = v47;
          int64_t v27 = v49;
          if ((v52 & 1) == 0) {
            goto LABEL_41;
          }
LABEL_38:
          uint64_t v45 = 1LL << *(_BYTE *)(i + 32);
          if (v45 >= 64) {
            bzero(v27, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
          }
          else {
            *int64_t v27 = -1LL << v45;
          }
          uint64_t v44 = i;
          *(void *)(i + 16)  = 0LL;
          goto LABEL_44;
        }

        int64_t v27 = v49;
        unint64_t v28 = v49[v26];
        ++v21;
        if (!v28)
        {
          int64_t v21 = v26 + 1;
          if (v26 + 1 >= v48) {
            goto LABEL_37;
          }
          unint64_t v28 = v49[v21];
          if (!v28)
          {
            int64_t v29 = v26 + 2;
            if (v29 >= v48)
            {
LABEL_37:
              swift_release(v22);
              uint64_t v3 = v47;
              if ((v52 & 1) == 0)
              {
LABEL_41:
                uint64_t v44 = i;
                goto LABEL_44;
              }

              goto LABEL_38;
            }

            unint64_t v28 = v49[v29];
            if (!v28)
            {
              while (1)
              {
                int64_t v21 = v29 + 1;
                if (__OFADD__(v29, 1LL)) {
                  break;
                }
                if (v21 >= v48) {
                  goto LABEL_37;
                }
                unint64_t v28 = v49[v21];
                ++v29;
                if (v28) {
                  goto LABEL_23;
                }
              }

LABEL_46:
              __break(1u);
              return result;
            }

            int64_t v21 = v29;
          }
        }

uint64_t sub_100138CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100002274(&qword_100409270);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v9 = 0LL;
    uint64_t v10 = (uint64_t *)(v5 + 64);
    uint64_t v11 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v30 = -1LL << v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v13 = v12 & *(void *)(v5 + 64);
    uint64_t v31 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v32 = v3;
    int64_t v14 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v21 = v20 | (v9 << 6);
      }

      else
      {
        int64_t v22 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        if (v22 >= v14) {
          goto LABEL_36;
        }
        unint64_t v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          int64_t v9 = v22 + 1;
          if (v22 + 1 >= v14) {
            goto LABEL_36;
          }
          unint64_t v23 = v10[v9];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v14)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release(v5);
                uint64_t v3 = v32;
                goto LABEL_43;
              }

              if (v31 >= 64) {
                bzero((void *)(v5 + 64), 8 * v14);
              }
              else {
                *uint64_t v10 = v30;
              }
              uint64_t v3 = v32;
              *(void *)(v5 + 16)  = 0LL;
              break;
            }

            unint64_t v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v9 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_45;
                }
                if (v9 >= v14) {
                  goto LABEL_36;
                }
                unint64_t v23 = v10[v9];
                ++v24;
                if (v23) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v9 = v24;
          }
        }

void sub_100138F84(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v33 = *(void *)(sub_100002274(&qword_1004086B0) - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1  = *(void *)(*v3 + 24);
  }
  sub_100002274(&qword_100409290);
  int v34 = a2;
  uint64_t v35 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  if (*(void *)(v8 + 16))
  {
    uint64_t v9 = 1LL << *(_BYTE *)(v8 + 32);
    uint64_t v10 = *(void *)(v8 + 64);
    uint64_t v32 = (void *)(v8 + 64);
    uint64_t v11 = -1LL;
    if (v9 < 64) {
      uint64_t v11 = ~(-1LL << v9);
    }
    unint64_t v12 = v11 & v10;
    uint64_t v30 = v3;
    int64_t v31 = (unint64_t)(v9 + 63) >> 6;
    swift_retain();
    int64_t v13 = 0LL;
    while (1)
    {
      if (v12)
      {
        unint64_t v14 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v15 = v14 | (v13 << 6);
      }

      else
      {
        int64_t v16 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
          __break(1u);
LABEL_34:
          __break(1u);
          return;
        }

        unint64_t v17 = v32;
        if (v16 >= v31) {
          goto LABEL_25;
        }
        unint64_t v18 = v32[v16];
        ++v13;
        if (!v18)
        {
          int64_t v13 = v16 + 1;
          if (v16 + 1 >= v31) {
            goto LABEL_25;
          }
          unint64_t v18 = v32[v13];
          if (!v18)
          {
            int64_t v19 = v16 + 2;
            if (v19 >= v31)
            {
LABEL_25:
              swift_release(v8);
              if ((v34 & 1) == 0)
              {
                swift_release(v8);
                uint64_t v3 = v30;
                goto LABEL_32;
              }

              uint64_t v28 = 1LL << *(_BYTE *)(v8 + 32);
              if (v28 >= 64) {
                bzero(v17, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *unint64_t v17 = -1LL << v28;
              }
              uint64_t v3 = v30;
              *(void *)(v8 + 16)  = 0LL;
              break;
            }

            unint64_t v18 = v32[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1LL)) {
                  goto LABEL_34;
                }
                if (v13 >= v31) {
                  goto LABEL_25;
                }
                unint64_t v18 = v32[v13];
                ++v19;
                if (v18) {
                  goto LABEL_22;
                }
              }
            }

            int64_t v13 = v19;
          }
        }

uint64_t sub_100139230(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100002274(&qword_100409230);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v37) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v37) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

uint64_t sub_10013953C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100002274(&qword_100409260);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_50;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v35 = v3;
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v18 = v17 | (v15 << 6);
      goto LABEL_25;
    }

    int64_t v19 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      return result;
    }

    if (v19 >= v12) {
      break;
    }
    unint64_t v20 = (void *)(v5 + 64);
    unint64_t v21 = *(void *)(v36 + 8 * v19);
    ++v15;
    if (!v21)
    {
      int64_t v15 = v19 + 1;
      if (v19 + 1 >= v12) {
        goto LABEL_43;
      }
      unint64_t v21 = *(void *)(v36 + 8 * v15);
      if (!v21)
      {
        int64_t v22 = v19 + 2;
        if (v22 >= v12)
        {
LABEL_43:
          swift_release(v5);
          uint64_t v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_50;
          }
          goto LABEL_46;
        }

        unint64_t v21 = *(void *)(v36 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            int64_t v15 = v22 + 1;
            if (__OFADD__(v22, 1LL)) {
              goto LABEL_52;
            }
            if (v15 >= v12) {
              goto LABEL_43;
            }
            unint64_t v21 = *(void *)(v36 + 8 * v15);
            ++v22;
            if (v21) {
              goto LABEL_24;
            }
          }
        }

        int64_t v15 = v22;
      }
    }

uint64_t sub_10013987C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100002274(&qword_100409258);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (!*(void *)(v5 + 16)) {
    goto LABEL_30;
  }
  unint64_t v20 = v3;
  uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
  unint64_t v21 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  swift_retain();
  if (v10)
  {
    unint64_t v12 = __clz(__rbit64(v10));
    goto LABEL_21;
  }

  if (v11 > 1)
  {
    unint64_t v13 = *(void *)(v5 + 72);
    uint64_t v14 = 1LL;
    if (v13) {
      goto LABEL_20;
    }
    uint64_t v14 = 2LL;
    if (v11 > 2)
    {
      unint64_t v13 = *(void *)(v5 + 80);
      if (!v13)
      {
        uint64_t v15 = 3LL;
        if (v11 > 3)
        {
          unint64_t v13 = *(void *)(v5 + 88);
          if (v13)
          {
            uint64_t v14 = 3LL;
            goto LABEL_20;
          }

          while (1)
          {
            uint64_t v14 = v15 + 1;
            if (__OFADD__(v15, 1LL))
            {
              __break(1u);
              JUMPOUT(0x100139C20LL);
            }

            if (v14 >= v11) {
              break;
            }
            unint64_t v13 = v21[v14];
            ++v15;
            if (v13) {
              goto LABEL_20;
            }
          }
        }

        goto LABEL_25;
      }

LABEL_20:
      unint64_t v12 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_21:
      uint64_t v16 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v12);
      unint64_t v17 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v12);
      if ((a2 & 1) != 0) {
        sub_100022594(v17, v23);
      }
      else {
        sub_100002AE4((uint64_t)v17, (uint64_t)v23);
      }
      Hasher.init(_seed:)(v22, *(void *)(v7 + 40));
      __asm { BR              X8 }
    }
  }

  BOOL v42 = sub_1000033FC();
  uint64_t v43 = swift_allocError(&type metadata for WiFiError, v42, 0LL, 0LL);
  *(_OWORD *)uint64_t v44 = xmmword_100337020;
  *(_BYTE *)(v44 + 16)  = 2;
  swift_willThrow(v43);
  uint64_t result = swift_unexpectedError(v43, "CoreP2P/NANAttribute.swift", 26LL, 1LL);
  __break(1u);
  return result;
}

  unint64_t v31 = dispatch thunk of BinaryInteger._lowWord.getter(v7, v8);
  v17(v9, v7);
  if (*(void *)(v12 - 120) < v31) {
    return *(void *)(v12 - 112);
  }
  uint64_t v33 = sub_1000033FC();
  uint64_t v34 = swift_allocError(&type metadata for WiFiError, v33, 0LL, 0LL);
  *(void *)uint64_t v35 = 0LL;
  *(void *)(v35 + 8)  = 0LL;
  *(_BYTE *)(v35 + 16)  = 2;
  swift_willThrow(v34);
  return sub_1000208D8(*(void *)(v12 - 112), *(void *)(v12 - 104));
}

  unint64_t v31 = dispatch thunk of BinaryInteger._lowWord.getter(v10, v8);
  v17(v9, v10);
  if (*(void *)(v12 - 208) >= v31)
  {
    char v40 = sub_1000033FC();
    unint64_t v41 = swift_allocError(&type metadata for WiFiError, v40, 0LL, 0LL);
    *(void *)BOOL v42 = 0LL;
    *(void *)(v42 + 8)  = 0LL;
    *(_BYTE *)(v42 + 16)  = 2;
    swift_willThrow(v41);
    sub_1000208D8(*(void *)(v12 - 200), *(void *)(v12 - 192));
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(v12 - 176) - 8LL) + 8LL))(*(void *)(v12 - 184));
  }

  else
  {
    BOOL v32 = *(void *)(v12 - 176);
    uint64_t v33 = *(void *)(v12 - 224);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v32 - 8) + 32LL))(v33, *(void *)(v12 - 184), v32);
    *(void *)(v12 - 152)  = v32;
    *(void *)(v12 - 144)  = v10;
    uint64_t v34 = *(void *)(v12 - 240);
    *(void *)(v12 - 136)  = *(void *)(v12 - 248);
    *(void *)(v12 - 128)  = v34;
    uint64_t v35 = *(void *)(v12 - 264);
    *(void *)(v12 - 120)  = *(void *)(v12 - 232);
    *(void *)(v12 - 112)  = v35;
    uint64_t v36 = *(void *)(v12 - 160);
    *(void *)(v12 - 104)  = *(void *)(v12 - 256);
    *(void *)(v12 - 96)  = v36;
    uint64_t result = type metadata accessor for TypeLengthValue(0LL, v12 - 152);
    uint64_t v38 = (void *)(v33 + *(int *)(result + 84));
    char v39 = *(void *)(v12 - 192);
    *uint64_t v38 = *(void *)(v12 - 200);
    v38[1]  = v39;
  }

  return result;
}

  uint64_t v63 = dispatch thunk of BinaryInteger._lowWord.getter(v38, v39);
  v45(v43, v38);
  uint64_t v64 = v34[3];
  uint64_t v65 = v34[4];
  sub_100021104(v34, v64);
  uint64_t v66 = dispatch thunk of Decoder.userInfo.getter(v64, v65);
  if (qword_100404158 != -1) {
    swift_once(&qword_100404158, sub_1000BD360);
  }
  uint64_t v67 = v106;
  uint64_t v68 = sub_1000032DC(v106, (uint64_t)static CodingUserInfoKey.fourByteAlignedValue);
  uint64_t v70 = (uint64_t)v107;
  uint64_t v69 = v108;
  (*(void (**)(char *, uint64_t, uint64_t))(v108 + 16))(v107, v68, v67);
  uint64_t v71 = v112;
  if (*(void *)(v66 + 16) && (uint64_t v72 = sub_10001C320(v70), (v73 & 1) != 0))
  {
    sub_100002AE4(*(void *)(v66 + 56) + 32 * v72, (uint64_t)&v115);
  }

  else
  {
    v115  = 0u;
    uint64_t v116 = 0u;
  }

  swift_bridgeObjectRelease(v66);
  (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v70, v67);
  if (!*((void *)&v116 + 1))
  {
    sub_1000B2F2C((uint64_t)&v115);
    goto LABEL_33;
  }

  if ((swift_dynamicCast(&v120, &v115, &type metadata for Any[8], &type metadata for Bool, 6LL) & 1) == 0
    || v120 != 1)
  {
LABEL_33:
    uint64_t v77 = v118;
    uint64_t v78 = v119;
    sub_1000237C8((uint64_t)v117, v118);
    uint64_t v79 = UnkeyedDecodingContainer.decodeData(with:)(v63, v77, v78);
    if (!v71)
    {
      a1  = (void *)v79;
      sub_100002AC4(v117);
      sub_100002AC4(v34);
      return a1;
    }

    goto LABEL_34;
  }

  if (__OFADD__(v63, 3LL))
  {
    __break(1u);
    JUMPOUT(0x10020524CLL);
  }

  uint64_t v74 = v118;
  uint64_t v75 = v119;
  sub_1000237C8((uint64_t)v117, v118);
  UnkeyedDecodingContainer.decodeData(with:)((v63 + 3) & 0xFFFFFFFFFFFFFFFCLL, v74, v75);
  if (!v71) {
    __asm { BR              X11 }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v19);
  __break(1u);
  return result;
}

      unint64_t v24 = v75;
      uint64_t v73 = (v26 - 1) & v26;
      uint64_t v74 = v27;
      int v23 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_21:
      unint64_t v29 = v65[7];
      char v30 = (unsigned __int8 *)(v65[6] - v23 + 8 * v23);
      unint64_t v31 = *v30;
      BOOL v32 = v30[1];
      uint64_t v33 = v30[2];
      uint64_t v34 = v30[3];
      uint64_t v35 = v30[4];
      uint64_t v77 = v30[5];
      uint64_t v78 = v30[6];
      uint64_t v36 = *(void *)(v61 + 72);
      uint64_t v66 = v23;
      sub_100057FE8(v29 + v36 * v23, v22, v21);
      int64_t v37 = *(int *)(v24 + 48);
      uint64_t v38 = v21;
      char v39 = (uint64_t)&v10[v37];
      *unint64_t v10 = v31;
      v10[1]  = v32;
      void v10[2] = v33;
      v10[3]  = v34;
      v10[4]  = v35;
      char v40 = v76;
      v10[5]  = v77;
      v10[6]  = v78;
      sub_100057FE8(v40, (uint64_t)&v10[v37], v21);
      unint64_t v41 = v62;
      BOOL v42 = (uint64_t)&v62[*(int *)(v75 + 48)];
      uint64_t v68 = v31;
      *uint64_t v62 = v31;
      uint64_t v69 = v33;
      uint64_t v70 = v32;
      v41[1]  = v32;
      v41[2]  = v33;
      uint64_t v71 = v34;
      uint64_t v72 = v35;
      v41[3]  = v34;
      v41[4]  = v35;
      v41[5]  = v77;
      v41[6]  = v78;
      uint64_t v67 = v39;
      sub_100057FE8(v39, v42, v38);
      uint64_t v43 = v76;
      uint64_t v44 = (uint64_t)v63;
      sub_100057FE8(v42, (uint64_t)v63, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
      sub_10005802C(v42, v38);
      sub_10005802C(v44, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
      uint64_t v45 = v59;
      uint64_t v66 = (unint64_t)&v59[*(int *)(v75 + 48)];
      uint64_t v46 = v66;
      *uint64_t v59 = v68;
      uint64_t v47 = v69;
      int64_t v48 = v70;
      v45[1]  = v70;
      v45[2]  = v47;
      uint64_t v50 = v71;
      uint64_t v49 = v72;
      v45[3]  = v71;
      v45[4]  = v49;
      uint64_t v51 = v77;
      v45[5]  = v77;
      int v52 = v78;
      v45[6]  = v78;
      sub_100057FE8(v67, v46, v38);
      sub_100330D58(v48 | (v47 << 8) | (v50 << 16) | (v49 << 24) | (v51 << 32) | (v52 << 40));
      sub_1000225EC((uint64_t)v10, &qword_10040D488);
      sub_10005802C(v66, v38);
      uint64_t v53 = v76;
      uint64_t result = (void *)sub_10005802C(v76, v38);
      int64_t v22 = v53;
      unint64_t v21 = v38;
      unint64_t v20 = v73;
      uint64_t v14 = v74;
      if (v73) {
        goto LABEL_6;
      }
    }

    sub_1000225EC((uint64_t)v10, &qword_10040D488);
    sub_10005802C(v44, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
    uint64_t result = (void *)sub_10005802C(v43, v38);
    *(unint64_t *)((char *)v55 + ((v66 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v66;
    unint64_t v13 = v56 + 1;
    unint64_t v21 = v38;
    unint64_t v20 = v73;
    uint64_t v14 = v74;
    if (!__OFADD__(v56, 1LL)) {
      continue;
    }
    break;
  }

    goto LABEL_21;
  }

  if (MKBDeviceUnlockedSinceBoot() != 1)
  {
    aBlock._uint64_t countAndFlagsBits = v14;
    aBlock._object  = v13;
    swift_bridgeObjectRetain(v13);
    v17._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    v17._object  = (void *)0x800000010036A4A0LL;
    String.append(_:)(v17);
    object  = aBlock._object;
    int64_t v19 = NSXPCConnection.has(entitlement:)(aBlock);
    *(void *)&uint64_t v16 = swift_bridgeObjectRelease(object).n128_u64[0];
    if (!v19)
    {
      sub_100058CD0(0LL, (unint64_t *)&qword_100405DF0, &OBJC_CLASS___NSObject_ptr);
      int64_t v37 = *(void **)(v3 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_listener);
      if ((static NSObject.== infix(_:_:)(a1, v37) & 1) != 0)
      {
        uint64_t v38 = (int *)(v3 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_unlockObserver);
        *(void *)&char v39 = swift_beginAccess(v3 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_unlockObserver, v77, 0LL, 0LL).n128_u64[0];
        if (*v38 == -1)
        {
          char v40 = (dispatch_queue_s *)objc_msgSend(v37, "_queue", v39);
          unint64_t v41 = swift_allocObject(&unk_1003FB590, 24LL, 7LL);
          swift_unknownObjectWeakInit(v41 + 16, v3);
          uint64_t v75 = sub_1002FF35C;
          uint64_t v76 = v41;
          aBlock._uint64_t countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
          aBlock._object  = (void *)1107296256;
          *(void *)&uint64_t v74 = sub_100130204;
          *((void *)&v74 + 1)  = &unk_1003FB5A8;
          BOOL v42 = _Block_copy(&aBlock);
          swift_release(v76);
          swift_beginAccess(v38, &aBlock, 33LL, 0LL);
          notify_register_dispatch("com.apple.mobile.keybagd.lock_status", v38, v40, v42);
          swift_endAccess(&aBlock);
          _Block_release(v42);
        }
      }

      uint64_t v27 = a2;
      unint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
      unint64_t v29 = static os_log_type_t.error.getter(v28);
      if (os_log_type_enabled(v28, v29))
      {
        char v30 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)char v30 = 67109120;
        LODWORD(aBlock._countAndFlagsBits)  = [v27 processIdentifier];
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock._countAndFlagsBits + 4);

        unint64_t v31 = "Rejecting XPC connection from process with PID %d because device has never been unlocked";
        goto LABEL_19;
      }

      goto LABEL_20;
    }
  }

  unint64_t v20 = objc_msgSend(a1, "_queue", v16);
  [a2 _setQueue:v20];

  sub_100058CD0(0LL, (unint64_t *)&qword_100405DF0, &OBJC_CLASS___NSObject_ptr);
  if ((static NSObject.== infix(_:_:)(a1, *(void *)(v3 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_listener)) & 1) != 0)
  {
    unint64_t v21 = swift_allocObject(&unk_1003FB5E0, 24LL, 7LL);
    *(void *)(v21 + 16)  = a2;
    uint64_t v75 = sub_1002FF37C;
    uint64_t v76 = v21;
    aBlock._uint64_t countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
    aBlock._object  = (void *)1107296256;
    *(void *)&uint64_t v74 = sub_1000021F0;
    *((void *)&v74 + 1)  = &unk_1003FB5F8;
    int64_t v22 = _Block_copy(&aBlock);
    int v23 = v76;
    unint64_t v24 = a2;
    objc_msgSend(v24, "setInvalidationHandler:", v22, swift_release(v23).n128_f64[0]);
    _Block_release(v22);
    uint64_t v25 =  [(id)objc_opt_self(NSXPCInterface) interfaceWithProtocol:&OBJC_PROTOCOL___WiFiP2PXPCListenerProtocol];
    [v24 setExportedInterface:v25];

    [v24 setExportedObject:v3];
    [v24 activate];
    return 1LL;
  }

  uint64_t v69 = *(void *)(v3 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_lock);
  Lock.lock()();
  BOOL v32 = [a2 processIdentifier];
  if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_lastProcessID + 4) & 1) != 0
    || v32 != *(_DWORD *)(v3 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_lastProcessID))
  {
    uint64_t v67 = 0LL;
    uint64_t v68 = 0LL;
  }

  else
  {
    uint64_t v33 = *(void *)(v3 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_lastProcessName);
    uint64_t v67 = *(void *)(v3 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_lastProcessName + 8);
    uint64_t v68 = v33;
    swift_bridgeObjectRetain(v67);
  }

  if ((static NSObject.== infix(_:_:)(a1, *(void *)(v3 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_awdlListener)) & 1) != 0)
  {
    uint64_t v34 = [a2 _queue];
    uint64_t v35 = 0xEE006C6477612E65LL;
    uint64_t v36 = 0x6C7070612E6D6F63LL;
  }

  else
  {
    uint64_t v43 = static NSObject.== infix(_:_:)(a1, *(void *)(v3 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_nanListener));
    uint64_t v34 = [a2 _queue];
    if ((v43 & 1) != 0) {
      uint64_t v36 = 0x6C7070612E6D6F63LL;
    }
    else {
      uint64_t v36 = 0xD000000000000012LL;
    }
    if ((v43 & 1) != 0) {
      uint64_t v35 = 0xED00006E616E2E65LL;
    }
    else {
      uint64_t v35 = 0x8000000100360620LL;
    }
  }

  Logger.init(subsystem:category:)(v36, v35, 6516856LL, 0xE300000000000000LL);
  uint64_t v44 = objc_allocWithZone((Class)type metadata accessor for XPCSession(0LL));
  uint64_t v45 = sub_100264FEC(a2, v34, (uint64_t)v12, v68, v67);

  uint64_t v46 = *(void (**)(void **))(v3 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_newSessionHandler);
  if (v46)
  {
    uint64_t v47 = *(void *)(v3 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_newSessionHandler + 8);
    swift_retain();
    Lock.unlock()();
    v46(v45);

    sub_100021018((uint64_t)v46, v47);
    return 1LL;
  }

  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  DispatchTime.distance(to:)(v7);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v7, v72);
  int64_t v48 = static DispatchTimeInterval.< infix(_:_:)( (uint64_t)v10,  v3 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_newSessionGracePeriod);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v71);
  uint64_t v49 = v45;
  uint64_t v50 = Logger.logObject.getter(v49);
  uint64_t v51 = (os_log_s *)v50;
  if (!v48)
  {
    uint64_t v57 = static os_log_type_t.error.getter(v50);
    if (os_log_type_enabled(v51, v57))
    {
      uint64_t v58 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v59 = (void ***)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v58 = 138412290;
      aBlock._uint64_t countAndFlagsBits = (uint64_t)v49;
      uint64_t v60 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &aBlock._object);
      *uint64_t v59 = v49;

      _os_log_impl( (void *)&_mh_execute_header,  v51,  v57,  "Rejecting XPC connection from %@ because there is no Wi-Fi",  v58,  0xCu);
      uint64_t v61 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v59, 1LL, v61);
      swift_slowDealloc(v59, -1LL, -1LL);
      swift_slowDealloc(v58, -1LL, -1LL);
    }

    else
    {
    }

    aBlock  = (Swift::String)0;
    uint64_t v74 = 0u;
    sub_10026331C((uint64_t)&aBlock);
    Lock.unlock()();

    return 0LL;
  }

  int v52 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    Swift::String v54 = (void ***)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v53 = 138412290;
    aBlock._uint64_t countAndFlagsBits = (uint64_t)v49;
    unint64_t v55 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &aBlock._object);
    *Swift::String v54 = v49;

    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Blocking %@ while waiting for Wi-Fi to come up", v53, 0xCu);
    uint64_t v56 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v54, 1LL, v56);
    swift_slowDealloc(v54, -1LL, -1LL);
    swift_slowDealloc(v53, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v62 = (void *)(v3 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_pendingSessions);
  swift_beginAccess(v3 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_pendingSessions, &aBlock, 33LL, 0LL);
  uint64_t v63 = v49;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v63);
  uint64_t v65 = *(void *)((*v62 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t v64 = *(void *)((*v62 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v65 >= v64 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1, v65 + 1, 1LL);
  }
  uint64_t v66 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v65, v63);
  specialized Array._endMutation()(v66);
  swift_endAccess(&aBlock);
  Lock.unlock()();

  return 1LL;
}

  uint64_t v63 = [v38 servicesRequiringAvailabilityNotification];
  if (!v63) {
    return swift_unknownObjectRelease(v33);
  }
  uint64_t v64 = v63;
  type metadata accessor for AWDLTrafficRegistrationService(0LL);
  uint64_t v66 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v64, v65);

  uint64_t v67 = *(void *)(v66 + 16);
  if (!v67)
  {
    swift_bridgeObjectRelease(v66);
    return swift_unknownObjectRelease(v33);
  }

  swift_bridgeObjectRetain(v66);
  uint64_t v68 = 0LL;
  do
  {
    uint64_t v69 = *(void **)(v66 + 8 * v68++ + 32);
    uint64_t v78 = v69;
    uint64_t v70 = v69;
    sub_1003245A0((void **)&v78, v3, v40, v33);
  }

  while (v67 != v68);
  swift_unknownObjectRelease(v33);
  return swift_bridgeObjectRelease_n(v66, 2LL);
}

      v123  = type metadata accessor for AWDLPeer(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v123 - 8) + 56LL))(v128, 1LL, 1LL, v123);
      __break(1u);
      goto LABEL_21;
    }

uint64_t sub_100139C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100002274(&qword_100409250);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_49;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v35 = v3;
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v18 = v17 | (v15 << 6);
      goto LABEL_25;
    }

    int64_t v19 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      return result;
    }

    if (v19 >= v12) {
      break;
    }
    unint64_t v20 = (void *)(v5 + 64);
    unint64_t v21 = *(void *)(v36 + 8 * v19);
    ++v15;
    if (!v21)
    {
      int64_t v15 = v19 + 1;
      if (v19 + 1 >= v12) {
        goto LABEL_42;
      }
      unint64_t v21 = *(void *)(v36 + 8 * v15);
      if (!v21)
      {
        int64_t v22 = v19 + 2;
        if (v22 >= v12)
        {
LABEL_42:
          swift_release(v5);
          uint64_t v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_49;
          }
          goto LABEL_45;
        }

        unint64_t v21 = *(void *)(v36 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            int64_t v15 = v22 + 1;
            if (__OFADD__(v22, 1LL)) {
              goto LABEL_51;
            }
            if (v15 >= v12) {
              goto LABEL_42;
            }
            unint64_t v21 = *(void *)(v36 + 8 * v15);
            ++v22;
            if (v21) {
              goto LABEL_24;
            }
          }
        }

        int64_t v15 = v22;
      }
    }

uint64_t sub_100139F88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100002274(&qword_100409248);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_50;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v35 = v3;
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v18 = v17 | (v15 << 6);
      goto LABEL_25;
    }

    int64_t v19 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      return result;
    }

    if (v19 >= v12) {
      break;
    }
    unint64_t v20 = (void *)(v5 + 64);
    unint64_t v21 = *(void *)(v36 + 8 * v19);
    ++v15;
    if (!v21)
    {
      int64_t v15 = v19 + 1;
      if (v19 + 1 >= v12) {
        goto LABEL_43;
      }
      unint64_t v21 = *(void *)(v36 + 8 * v15);
      if (!v21)
      {
        int64_t v22 = v19 + 2;
        if (v22 >= v12)
        {
LABEL_43:
          swift_release(v5);
          uint64_t v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_50;
          }
          goto LABEL_46;
        }

        unint64_t v21 = *(void *)(v36 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            int64_t v15 = v22 + 1;
            if (__OFADD__(v22, 1LL)) {
              goto LABEL_52;
            }
            if (v15 >= v12) {
              goto LABEL_43;
            }
            unint64_t v21 = *(void *)(v36 + 8 * v15);
            ++v22;
            if (v21) {
              goto LABEL_24;
            }
          }
        }

        int64_t v15 = v22;
      }
    }

uint64_t sub_10013A2AC(uint64_t a1, uint64_t a2)
{
  return sub_10013A2E8(a1, a2, &qword_100409240, (uint64_t (*)(uint64_t))sub_10014D60C);
}

uint64_t sub_10013A2C0(uint64_t a1, uint64_t a2)
{
  return sub_10013A2E8(a1, a2, &qword_100409238, (uint64_t (*)(uint64_t))sub_10014E678);
}

uint64_t sub_10013A2D4(uint64_t a1, uint64_t a2)
{
  return sub_10013A2E8(a1, a2, &qword_100409228, (uint64_t (*)(uint64_t))sub_10018A6BC);
}

uint64_t sub_10013A2E8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6 = v4;
  uint64_t v8 = *v4;
  if (*(void *)(*v4 + 24) <= a1) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = *(void *)(*v4 + 24);
  }
  sub_100002274(a3);
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)(v8, v9, a2);
  uint64_t v11 = v10;
  if (*(void *)(v8 + 16))
  {
    int64_t v37 = v6;
    uint64_t v12 = 1LL << *(_BYTE *)(v8 + 32);
    char v39 = (void *)(v8 + 64);
    if (v12 < 64) {
      uint64_t v13 = ~(-1LL << v12);
    }
    else {
      uint64_t v13 = -1LL;
    }
    unint64_t v14 = v13 & *(void *)(v8 + 64);
    int64_t v38 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v15 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v17 = 0LL;
    while (1)
    {
      if (v14)
      {
        unint64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }

      else
      {
        int64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        if (v21 >= v38) {
          goto LABEL_37;
        }
        unint64_t v22 = v39[v21];
        ++v17;
        if (!v22)
        {
          int64_t v17 = v21 + 1;
          if (v21 + 1 >= v38) {
            goto LABEL_37;
          }
          unint64_t v22 = v39[v17];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v38)
            {
LABEL_37:
              swift_release(v8);
              uint64_t v6 = v37;
              if ((a2 & 1) != 0)
              {
                uint64_t v36 = 1LL << *(_BYTE *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *char v39 = -1LL << v36;
                }
                *(void *)(v8 + 16)  = 0LL;
              }

              break;
            }

            unint64_t v22 = v39[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1LL)) {
                  goto LABEL_44;
                }
                if (v17 >= v38) {
                  goto LABEL_37;
                }
                unint64_t v22 = v39[v17];
                ++v23;
                if (v22) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v17 = v23;
          }
        }

unint64_t sub_10013A5EC(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v10 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v27, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(a2 + 48);
          unint64_t v16 = (_OWORD *)(v15 + 16 * v3);
          int64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            *unint64_t v16 = *v17;
          }
          uint64_t v18 = *(void *)(a2 + 56);
          unint64_t v19 = (_OWORD *)(v18 + 32 * v3);
          unint64_t v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 2))
          {
            __int128 v9 = v20[1];
            *unint64_t v19 = *v20;
            v19[1]  = v9;
            int64_t v3 = v6;
          }
        }

unint64_t sub_10013A7C0(unint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      uint64_t v36 = v4;
      uint64_t v37 = v2;
      unint64_t v38 = (result + 1) & v7;
      do
      {
        int64_t v39 = v3;
        uint64_t v8 = 40 * v6;
        uint64_t v9 = *(void *)(v2 + 40);
        uint64_t v10 = *(void *)(v2 + 48) + 40 * v6;
        uint64_t v11 = *(void *)(v10 + 8);
        uint64_t v12 = v7;
        uint64_t v13 = *(void *)(v10 + 24);
        int v14 = *(unsigned __int8 *)(v10 + 32);
        Swift::UInt8 v15 = *(_BYTE *)(v10 + 33);
        Hasher.init(_seed:)(v40, v9);
        Swift::String v16 = String.lowercased()();
        swift_bridgeObjectRetain(v11);
        swift_bridgeObjectRetain(v13);
        String.hash(into:)(v40, v16._countAndFlagsBits, v16._object);
        swift_bridgeObjectRelease(v16._object);
        Swift::String v17 = String.lowercased()();
        swift_bridgeObjectRetain(v13);
        String.hash(into:)(v40, v17._countAndFlagsBits, v17._object);
        swift_bridgeObjectRelease(v17._object);
        if (v14) {
          uint64_t v18 = 7365749LL;
        }
        else {
          uint64_t v18 = 7365492LL;
        }
        String.hash(into:)(v40, v18, 0xE300000000000000LL);
        swift_bridgeObjectRelease(0xE300000000000000LL);
        Hasher._combine(_:)(v15);
        swift_bridgeObjectRelease(v13);
        Swift::Int v19 = Hasher._finalize()();
        uint64_t v20 = v13;
        uint64_t v7 = v12;
        unint64_t v3 = v39;
        swift_bridgeObjectRelease(v20);
        uint64_t result = swift_bridgeObjectRelease(v11);
        Swift::Int v21 = v19 & v7;
        if (v39 >= (uint64_t)v38)
        {
          if (v21 < v38)
          {
            uint64_t v4 = v36;
            uint64_t v2 = v37;
          }

          else
          {
            uint64_t v4 = v36;
            uint64_t v2 = v37;
            if (v39 >= v21) {
              goto LABEL_15;
            }
          }
        }

        else
        {
          uint64_t v4 = v36;
          uint64_t v2 = v37;
          if (v21 >= v38 || v39 >= v21)
          {
LABEL_15:
            uint64_t v22 = *(void *)(v2 + 48);
            unint64_t v23 = v22 + 40 * v39;
            uint64_t v24 = (__int128 *)(v22 + v8);
            if (40 * v39 < v8 || v23 >= (unint64_t)v24 + 40 || v39 != v6)
            {
              __int128 v25 = *v24;
              __int128 v26 = v24[1];
              *(void *)(v23 + 32)  = *((void *)v24 + 4);
              *(_OWORD *)unint64_t v23 = v25;
              *(_OWORD *)(v23 + 16)  = v26;
            }

            uint64_t v27 = *(void *)(v2 + 56);
            uint64_t v28 = (void *)(v27 + 8 * v39);
            uint64_t v29 = (void *)(v27 + 8 * v6);
            if (v39 != v6 || (unint64_t v3 = v6, v28 >= v29 + 1))
            {
              void *v28 = *v29;
              unint64_t v3 = v6;
            }
          }
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    unint64_t v30 = (uint64_t *)(v4 + 8 * (v3 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1LL << v3) - 1;
  }

  else
  {
    unint64_t v30 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1LL << result) - 1;
  }

  *unint64_t v30 = v32 & v31;
  uint64_t v33 = *(void *)(v2 + 16);
  BOOL v34 = __OFSUB__(v33, 1LL);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v2 + 16)  = v35;
    ++*(_DWORD *)(v2 + 36);
  }

  return result;
}

unint64_t sub_10013AA98(unint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      uint64_t v36 = v4;
      uint64_t v37 = v2;
      unint64_t v38 = (result + 1) & v7;
      do
      {
        int64_t v39 = v3;
        uint64_t v8 = 40 * v6;
        uint64_t v9 = *(void *)(v2 + 40);
        uint64_t v10 = *(void *)(v2 + 48) + 40 * v6;
        uint64_t v11 = *(void *)(v10 + 8);
        uint64_t v12 = v7;
        uint64_t v13 = *(void *)(v10 + 24);
        int v14 = *(unsigned __int8 *)(v10 + 32);
        Swift::UInt8 v15 = *(_BYTE *)(v10 + 33);
        Hasher.init(_seed:)(v40, v9);
        Swift::String v16 = String.lowercased()();
        swift_bridgeObjectRetain(v11);
        swift_bridgeObjectRetain(v13);
        String.hash(into:)(v40, v16._countAndFlagsBits, v16._object);
        swift_bridgeObjectRelease(v16._object);
        Swift::String v17 = String.lowercased()();
        swift_bridgeObjectRetain(v13);
        String.hash(into:)(v40, v17._countAndFlagsBits, v17._object);
        swift_bridgeObjectRelease(v17._object);
        if (v14) {
          uint64_t v18 = 7365749LL;
        }
        else {
          uint64_t v18 = 7365492LL;
        }
        String.hash(into:)(v40, v18, 0xE300000000000000LL);
        swift_bridgeObjectRelease(0xE300000000000000LL);
        Hasher._combine(_:)(v15);
        swift_bridgeObjectRelease(v13);
        Swift::Int v19 = Hasher._finalize()();
        uint64_t v20 = v13;
        uint64_t v7 = v12;
        unint64_t v3 = v39;
        swift_bridgeObjectRelease(v20);
        uint64_t result = swift_bridgeObjectRelease(v11);
        Swift::Int v21 = v19 & v7;
        if (v39 >= (uint64_t)v38)
        {
          if (v21 < v38)
          {
            uint64_t v4 = v36;
            uint64_t v2 = v37;
          }

          else
          {
            uint64_t v4 = v36;
            uint64_t v2 = v37;
            if (v39 >= v21) {
              goto LABEL_15;
            }
          }
        }

        else
        {
          uint64_t v4 = v36;
          uint64_t v2 = v37;
          if (v21 >= v38 || v39 >= v21)
          {
LABEL_15:
            uint64_t v22 = *(void *)(v2 + 48);
            unint64_t v23 = v22 + 40 * v39;
            uint64_t v24 = (__int128 *)(v22 + v8);
            if (40 * v39 < v8 || v23 >= (unint64_t)v24 + 40 || v39 != v6)
            {
              __int128 v25 = *v24;
              __int128 v26 = v24[1];
              *(void *)(v23 + 32)  = *((void *)v24 + 4);
              *(_OWORD *)unint64_t v23 = v25;
              *(_OWORD *)(v23 + 16)  = v26;
            }

            uint64_t v27 = *(void *)(v2 + 56);
            uint64_t v28 = (_OWORD *)(v27 + 16 * v39);
            uint64_t v29 = (_OWORD *)(v27 + 16 * v6);
            if (16 * v39 != 16 * v6 || (unint64_t v3 = v6, v28 >= v29 + 1))
            {
              _OWORD *v28 = *v29;
              unint64_t v3 = v6;
            }
          }
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    unint64_t v30 = (uint64_t *)(v4 + 8 * (v3 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1LL << v3) - 1;
  }

  else
  {
    unint64_t v30 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1LL << result) - 1;
  }

  *unint64_t v30 = v32 & v31;
  uint64_t v33 = *(void *)(v2 + 16);
  BOOL v34 = __OFSUB__(v33, 1LL);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v2 + 16)  = v35;
    ++*(_DWORD *)(v2 + 36);
  }

  return result;
}

unint64_t sub_10013AD78(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v37 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v36 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v37 + 72);
      uint64_t v35 = *(void (**)(char *, unint64_t, uint64_t))(v37 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v8;
        uint64_t v15 = v12;
        int64_t v16 = v12 * v10;
        uint64_t v17 = v13;
        v35(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)( *(void *)(a2 + 40),  v4,  &protocol witness table for CodingUserInfoKey);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v7, v4);
        uint64_t v13 = v17;
        unint64_t v19 = v18 & v17;
        if (a1 >= (uint64_t)v36)
        {
          if (v19 >= v36 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            uint64_t v22 = *(void *)(a2 + 48);
            unint64_t result = v22 + v15 * a1;
            uint64_t v23 = v22 + v16;
            uint64_t v8 = v14;
            if (v15 * a1 < v16 || (uint64_t v12 = v15, result >= v23 + v15))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v23, 1LL, v4);
LABEL_21:
              uint64_t v12 = v15;
              uint64_t v13 = v17;
            }

            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }

            uint64_t v24 = *(void *)(a2 + 56);
            __int128 v25 = (_OWORD *)(v24 + 32 * a1);
            __int128 v26 = (_OWORD *)(v24 + 32 * v10);
            if (a1 != v10 || (a1  = v10, v25 >= v26 + 2))
            {
              __int128 v27 = v26[1];
              *__int128 v25 = *v26;
              v25[1]  = v27;
              a1  = v10;
            }

            goto LABEL_5;
          }
        }

        else if (v19 >= v36 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }

        uint64_t v8 = v14;
        uint64_t v12 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v13;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    uint64_t v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v29 = *v28;
    uint64_t v30 = (-1LL << a1) - 1;
  }

  else
  {
    uint64_t v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v28;
    uint64_t v29 = (-1LL << a1) - 1;
  }

  uint64_t *v28 = v30 & v29;
  uint64_t v31 = *(void *)(a2 + 16);
  BOOL v32 = __OFSUB__(v31, 1LL);
  uint64_t v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16)  = v33;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_10013AFFC(unint64_t result, uint64_t a2)
{
  unint64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      uint64_t v7 = *(unsigned __int8 *)(*(void *)(a2 + 48) + v6);
      Hasher.init(_seed:)(v14, *(void *)(a2 + 40));
      __asm { BR              X8 }
    }

    uint64_t v8 = (uint64_t *)(v4 + 8 * (v3 >> 6));
    uint64_t v9 = *v8;
    uint64_t v10 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v8 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v10 = *v8;
    uint64_t v9 = (-1LL << result) - 1;
  }

  *uint64_t v8 = v10 & v9;
  uint64_t v11 = *(void *)(a2 + 16);
  BOOL v12 = __OFSUB__(v11, 1LL);
  uint64_t v13 = v11 - 1;
  if (v12)
  {
    __break(1u);
    JUMPOUT(0x10013B26CLL);
  }

  *(void *)(a2 + 16)  = v13;
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_10013B280(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          int64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (void *)(v17 + 8 * v3);
          unint64_t v19 = (void *)(v17 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *uint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }

unint64_t sub_10013B454(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v44 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v43 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v44 + 72);
      BOOL v42 = *(void (**)(char *, unint64_t, uint64_t))(v44 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v8;
        uint64_t v15 = v12;
        int64_t v16 = v12 * v10;
        uint64_t v17 = v13;
        v42(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        uint64_t v18 = *(void *)(a2 + 40);
        uint64_t v19 = sub_10000AF70( &qword_10040F8C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v7, v4);
        uint64_t v13 = v17;
        unint64_t v21 = v20 & v17;
        if (a1 >= (uint64_t)v43)
        {
          if (v21 >= v43 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v24 = *(void *)(a2 + 48);
            unint64_t v25 = v24 + v15 * a1;
            uint64_t v26 = v24 + v16;
            uint64_t v8 = v14;
            if (v15 * a1 < v16 || v25 >= v26 + v15)
            {
              swift_arrayInitWithTakeFrontToBack(v25, v26, 1LL, v4);
            }

            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
            }

            uint64_t v27 = *(void *)(a2 + 56);
            uint64_t v28 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
            uint64_t v29 = *(void *)(*(void *)(v28 - 8) + 72LL);
            int64_t v30 = v29 * a1;
            unint64_t result = v27 + v29 * a1;
            int64_t v31 = v29 * v10;
            uint64_t v32 = v27 + v29 * v10;
            unint64_t v33 = v32 + v29;
            if (v30 < v31 || result >= v33)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v32, 1LL, v28);
              a1  = v10;
              uint64_t v13 = v17;
            }

            else
            {
              a1  = v10;
              uint64_t v13 = v17;
              if (v30 != v31)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                uint64_t v13 = v17;
                a1  = v10;
              }
            }

            goto LABEL_5;
          }
        }

        else if (v21 >= v43 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }

        uint64_t v8 = v14;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v13;
        uint64_t v12 = v15;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    uint64_t v35 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v36 = *v35;
    uint64_t v37 = (-1LL << a1) - 1;
  }

  else
  {
    uint64_t v35 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v37 = *v35;
    uint64_t v36 = (-1LL << a1) - 1;
  }

  *uint64_t v35 = v37 & v36;
  uint64_t v38 = *(void *)(a2 + 16);
  BOOL v39 = __OFSUB__(v38, 1LL);
  uint64_t v40 = v38 - 1;
  if (v39)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16)  = v40;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_10013B728(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        unint64_t v10 = (void *)(v9 + 8 * v6);
        unint64_t result = static Hasher._hash(seed:_:)(*(void *)(a2 + 40), *v10);
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *uint64_t v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            int64_t v16 = (_OWORD *)(v15 + 16 * v3);
            uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              *int64_t v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }

        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1LL << result) - 1;
  }

  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1LL);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16)  = v23;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_10013B8BC(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        char v9 = *(_BYTE *)(*(void *)(a2 + 48) + v6);
        Hasher.init(_seed:)(v28, *(void *)(a2 + 40));
        Hasher._combine(_:)(0xDD06050403020100LL >> (8 * v9));
        unint64_t result = Hasher._finalize()();
        unint64_t v10 = result & v7;
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (_BYTE *)(v11 + v3);
        uint64_t v13 = (_BYTE *)(v11 + v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          *uint64_t v12 = *v13;
        }
        uint64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
        uint64_t v16 = *(void *)(*(void *)(v15 - 8) + 72LL);
        int64_t v17 = v16 * v3;
        unint64_t result = v14 + v16 * v3;
        int64_t v18 = v16 * v6;
        uint64_t v19 = v14 + v16 * v6;
        unint64_t v20 = v19 + v16;
        if (v17 < v18 || result >= v20)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v19, 1LL, v15);
        }

        else
        {
          int64_t v3 = v6;
          if (v17 == v18) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }

        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }

      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      goto LABEL_12;
    }

unint64_t sub_10013BAB0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        uint64_t v9 = *(void *)(*(void *)(a2 + 48) + 16 * v6 + 8);
        Hasher.init(_seed:)(v30, *(void *)(a2 + 40));
        Swift::String v10 = String.lowercased()();
        swift_bridgeObjectRetain(v9);
        String.hash(into:)(v30, v10._countAndFlagsBits, v10._object);
        swift_bridgeObjectRelease(v10._object);
        Swift::Int v11 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease(v9);
        unint64_t v12 = v11 & v7;
        if (v12 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v13 = *(void *)(a2 + 48);
        uint64_t v14 = (_OWORD *)(v13 + 16 * v3);
        uint64_t v15 = (_OWORD *)(v13 + 16 * v6);
        if (v3 != v6 || v14 >= v15 + 1) {
          *uint64_t v14 = *v15;
        }
        uint64_t v16 = *(void *)(a2 + 56);
        uint64_t v17 = sub_100002274((uint64_t *)&unk_1004050D0);
        uint64_t v18 = *(void *)(*(void *)(v17 - 8) + 72LL);
        int64_t v19 = v18 * v3;
        unint64_t result = v16 + v18 * v3;
        int64_t v20 = v18 * v6;
        uint64_t v21 = v16 + v18 * v6;
        unint64_t v22 = v21 + v18;
        if (v19 < v20 || result >= v22)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v21, 1LL, v17);
        }

        else
        {
          int64_t v3 = v6;
          if (v19 == v20) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront(result);
        }

        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }

      if (v12 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      goto LABEL_12;
    }

unint64_t sub_10013BCD8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        unsigned __int8 v10 = *(_BYTE *)(*(void *)(a2 + 48) + v6);
        Hasher.init(_seed:)(v27, *(void *)(a2 + 40));
        uint64_t v11 = sub_10018A6BC(v10);
        uint64_t v13 = v12;
        String.hash(into:)(v27, v11, v12);
        swift_bridgeObjectRelease(v13);
        unint64_t result = Hasher._finalize()();
        unint64_t v14 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(a2 + 48);
          uint64_t v16 = (_BYTE *)(v15 + v3);
          uint64_t v17 = (_BYTE *)(v15 + v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            *uint64_t v16 = *v17;
          }
          uint64_t v18 = *(void *)(a2 + 56);
          int64_t v19 = (_OWORD *)(v18 + 32 * v3);
          int64_t v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 2))
          {
            __int128 v9 = v20[1];
            *int64_t v19 = *v20;
            v19[1]  = v9;
            int64_t v3 = v6;
          }
        }

__n128 sub_10013BEAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v6 = String.lowercased()();
  String.hash(into:)(v15, v6._countAndFlagsBits, v6._object);
  swift_bridgeObjectRelease(v6._object);
  __int128 v16 = *(_OWORD *)(a1 + 16);
  *(_WORD *)uint64_t v17 = *(_WORD *)(a1 + 32);
  uint64_t v7 = *((void *)&v16 + 1);
  Swift::String v8 = String.lowercased()();
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v15, v8._countAndFlagsBits, v8._object);
  swift_bridgeObjectRelease(v8._object);
  if (v17[0]) {
    uint64_t v9 = 7365749LL;
  }
  else {
    uint64_t v9 = 7365492LL;
  }
  String.hash(into:)(v15, v9, 0xE300000000000000LL);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  Hasher._combine(_:)(v17[1]);
  sub_100020A04((uint64_t)&v16);
  Swift::Int v10 = Hasher._finalize()();
  unint64_t v11 = _HashTable.nextHole(atOrAfter:)(v10 & ~(-1LL << *(_BYTE *)(a3 + 32)), a3 + 64, ~(-1LL << *(_BYTE *)(a3 + 32)));
  *(void *)(a3 + 64 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
  uint64_t v12 = *(void *)(a3 + 48) + 40 * v11;
  __n128 result = *(__n128 *)a1;
  __int128 v14 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)a1;
  *(_OWORD *)(v12 + 16)  = v14;
  *(_WORD *)(v12 + 32)  = *(_WORD *)(a1 + 32);
  *(void *)(*(void *)(a3 + 56) + 8 * v11)  = a2;
  ++*(void *)(a3 + 16);
  return result;
}

__n128 sub_10013C014(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  Swift::String v8 = String.lowercased()();
  String.hash(into:)(v18, v8._countAndFlagsBits, v8._object);
  swift_bridgeObjectRelease(v8._object);
  __int128 v19 = *(_OWORD *)(a1 + 16);
  *(_WORD *)int64_t v20 = *(_WORD *)(a1 + 32);
  uint64_t v9 = *((void *)&v19 + 1);
  Swift::String v10 = String.lowercased()();
  swift_bridgeObjectRetain(v9);
  String.hash(into:)(v18, v10._countAndFlagsBits, v10._object);
  swift_bridgeObjectRelease(v10._object);
  if (v20[0]) {
    uint64_t v11 = 7365749LL;
  }
  else {
    uint64_t v11 = 7365492LL;
  }
  String.hash(into:)(v18, v11, 0xE300000000000000LL);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  Hasher._combine(_:)(v20[1]);
  sub_100020A04((uint64_t)&v19);
  Swift::Int v12 = Hasher._finalize()();
  unint64_t v13 = _HashTable.nextHole(atOrAfter:)(v12 & ~(-1LL << *(_BYTE *)(a4 + 32)), a4 + 64, ~(-1LL << *(_BYTE *)(a4 + 32)));
  *(void *)(a4 + 64 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
  uint64_t v14 = *(void *)(a4 + 48) + 40 * v13;
  __n128 result = *(__n128 *)a1;
  __int128 v16 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
  *(_OWORD *)(v14 + 16)  = v16;
  *(_WORD *)(v14 + 32)  = *(_WORD *)(a1 + 32);
  uint64_t v17 = *(void *)(a4 + 56) + 16 * v13;
  *(void *)uint64_t v17 = a2;
  *(_BYTE *)(v17 + 8)  = a3;
  ++*(void *)(a4 + 16);
  return result;
}

uint64_t sub_10013C190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v6 = String.lowercased()();
  String.hash(into:)(v17, v6._countAndFlagsBits, v6._object);
  swift_bridgeObjectRelease(v6._object);
  __int128 v18 = *(_OWORD *)(a1 + 16);
  *(_WORD *)__int128 v19 = *(_WORD *)(a1 + 32);
  uint64_t v7 = *((void *)&v18 + 1);
  Swift::String v8 = String.lowercased()();
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v17, v8._countAndFlagsBits, v8._object);
  swift_bridgeObjectRelease(v8._object);
  if (v19[0]) {
    uint64_t v9 = 7365749LL;
  }
  else {
    uint64_t v9 = 7365492LL;
  }
  String.hash(into:)(v17, v9, 0xE300000000000000LL);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  Hasher._combine(_:)(v19[1]);
  sub_100020A04((uint64_t)&v18);
  Swift::Int v10 = Hasher._finalize()();
  unint64_t v11 = _HashTable.nextHole(atOrAfter:)(v10 & ~(-1LL << *(_BYTE *)(a3 + 32)), a3 + 64, ~(-1LL << *(_BYTE *)(a3 + 32)));
  *(void *)(a3 + 64 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
  uint64_t v12 = *(void *)(a3 + 48) + 40 * v11;
  __int128 v13 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)a1;
  *(_OWORD *)(v12 + 16)  = v13;
  *(_WORD *)(v12 + 32)  = *(_WORD *)(a1 + 32);
  uint64_t v14 = *(void *)(a3 + 56);
  uint64_t v15 = sub_100002274(&qword_1004086B0);
  uint64_t result = sub_1000586C0(a2, v14 + *(void *)(*(void *)(v15 - 8) + 72LL) * v11, &qword_1004086B0);
  ++*(void *)(a3 + 16);
  return result;
}

void *sub_10013C320()
{
  uint64_t v1 = v0;
  sub_100002274((uint64_t *)&unk_1004105A0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release(v2);
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }

  BOOL v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16)  = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

id sub_10013C504()
{
  uint64_t v1 = v0;
  sub_100002274(&qword_1004092A8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16)  = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v26 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v26 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }

id sub_10013C6E0()
{
  uint64_t v1 = v0;
  sub_100002274(&qword_100409220);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16)  = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v28 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v28 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      int64_t v9 = v28 + 1;
      if (v28 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v6 + 8 * v9);
      if (!v29) {
        break;
      }
    }

void *sub_10013C8CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  uint64_t v26 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_100405128);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (void *)swift_release(v5);
LABEL_28:
    *uint64_t v1 = v7;
    return result;
  }

  uint64_t v24 = v1;
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v25 = v5 + 64;
  int64_t v11 = 0LL;
  *(void *)(v7 + 16)  = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v15) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v15) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }

void *sub_10013CAF4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_1004050B0);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release(v6);
LABEL_28:
    *uint64_t v1 = v8;
    return result;
  }

  uint64_t v24 = v1;
  id result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  uint64_t v25 = v6 + 64;
  int64_t v12 = 0LL;
  *(void *)(v8 + 16)  = *(void *)(v6 + 16);
  uint64_t v13 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v21 >= v16) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v12;
    if (!v22)
    {
      int64_t v12 = v21 + 1;
      if (v21 + 1 >= v16) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v12);
      if (!v22) {
        break;
      }
    }

id sub_10013CD30()
{
  uint64_t v1 = v0;
  sub_100002274(&qword_1004092A0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16)  = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }

void *sub_10013CEE8()
{
  uint64_t v1 = v0;
  sub_100002274(&qword_100409298);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16)  = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

id sub_10013D09C()
{
  uint64_t v1 = v0;
  sub_100002274(&qword_1004050F0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16)  = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }

void *sub_10013D260()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002274((uint64_t *)&unk_1004050D0);
  uint64_t v28 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_100409268);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (void *)swift_release(v5);
LABEL_25:
    *uint64_t v1 = v7;
    return result;
  }

  uint64_t v25 = v1;
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v26 = v5 + 64;
  int64_t v10 = 0LL;
  *(void *)(v7 + 16)  = *(void *)(v5 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v27 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }

    int64_t v22 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v22 >= v27) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v22);
    ++v10;
    if (!v23)
    {
      int64_t v10 = v22 + 1;
      if (v22 + 1 >= v27) {
        goto LABEL_23;
      }
      unint64_t v23 = *(void *)(v26 + 8 * v10);
      if (!v23) {
        break;
      }
    }

void *sub_10013D4AC()
{
  uint64_t v1 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
  uint64_t v36 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v35 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  unint64_t v33 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_100409218);
  int64_t v30 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v38 = v6;
  if (!v7)
  {
    id result = (void *)swift_release(v5);
    uint64_t v28 = v38;
    int64_t v27 = v30;
LABEL_25:
    *int64_t v27 = v28;
    return result;
  }

  uint64_t v8 = v6;
  id result = (void *)(v6 + 64);
  unint64_t v10 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
  {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v10);
    uint64_t v8 = v38;
  }

  int64_t v11 = 0LL;
  *(void *)(v8 + 16)  = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  uint64_t v37 = v5;
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  uint64_t v31 = v5 + 64;
  int64_t v32 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v33;
  uint64_t v15 = v34;
  uint64_t v17 = (uint64_t)v35;
  for (i  = v38;
        ;
        id result = (void *)sub_100022628( v17,  *(void *)(i + 56) + v23,  type metadata accessor for LongTermPairingKeys.PublicIdentity))
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v11 << 6);
      uint64_t v21 = v37;
      goto LABEL_9;
    }

    int64_t v24 = v11 + 1;
    uint64_t v21 = v37;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v24 >= v32) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v31 + 8 * v24);
    ++v11;
    if (!v25)
    {
      int64_t v11 = v24 + 1;
      if (v24 + 1 >= v32) {
        goto LABEL_23;
      }
      unint64_t v25 = *(void *)(v31 + 8 * v11);
      if (!v25) {
        break;
      }
    }

void *sub_10013D774()
{
  uint64_t v1 = v0;
  sub_100002274(&qword_100409270);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16)  = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

void sub_10013D91C()
{
  uint64_t v37 = *(void *)(sub_100002274(&qword_1004086B0) - 8);
  __chkstk_darwin();
  uint64_t v36 = (char *)&v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_100409290);
  unint64_t v33 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v39 = v3;
  if (!v4)
  {
    swift_release(v2);
    uint64_t v31 = v39;
    int64_t v30 = v33;
LABEL_25:
    *int64_t v30 = v31;
    return;
  }

  uint64_t v5 = v3;
  uint64_t v6 = (void *)(v3 + 64);
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v2 || (unint64_t)v6 >= v2 + 64 + 8 * v7)
  {
    memmove(v6, (const void *)(v2 + 64), 8 * v7);
    uint64_t v5 = v39;
  }

  int64_t v8 = 0LL;
  *(void *)(v5 + 16)  = *(void *)(v2 + 16);
  uint64_t v9 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  uint64_t v38 = v2;
  unint64_t v11 = v10 & *(void *)(v2 + 64);
  uint64_t v34 = v2 + 64;
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = (uint64_t)v36;
  while (1)
  {
    if (v11)
    {
      uint64_t v40 = (v11 - 1) & v11;
      int64_t v41 = v8;
      unint64_t v13 = __clz(__rbit64(v11)) | (v8 << 6);
      uint64_t v14 = v38;
      goto LABEL_9;
    }

    int64_t v26 = v8 + 1;
    uint64_t v14 = v38;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v26 >= v35) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v34 + 8 * v26);
    int64_t v28 = v8 + 1;
    if (!v27)
    {
      int64_t v28 = v8 + 2;
      if (v8 + 2 >= v35) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v34 + 8 * v28);
      if (!v27) {
        break;
      }
    }

id sub_10013DBBC()
{
  uint64_t v1 = v0;
  sub_100002274(&qword_100409230);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16)  = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void *sub_10013DD6C()
{
  return sub_10013DD9C(&qword_100409260);
}

void *sub_10013DD78()
{
  return sub_10013DD9C(&qword_100409258);
}

void *sub_10013DD84()
{
  return sub_10013DD9C(&qword_100409250);
}

void *sub_10013DD90()
{
  return sub_10013DD9C(&qword_100409248);
}

void *sub_10013DD9C(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100002274(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v3);
    *uint64_t v2 = v5;
    return result;
  }

  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + 16)  = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v18 >= v14) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v7 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v7 + 8 * v10);
      if (!v19) {
        break;
      }
    }

void *sub_10013DF50()
{
  return sub_10013DD9C(&qword_100409240);
}

void *sub_10013DF5C()
{
  return sub_10013DD9C(&qword_100409238);
}

void *sub_10013DF68()
{
  return sub_10013DD9C(&qword_100409228);
}

_OWORD *sub_10013DF74(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1]  = a3;
  id result = sub_100022594(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2]  = v10;
  }
  return result;
}

unint64_t sub_10013DFDC(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1LL << result;
  uint64_t v4 = a4[6] + 40 * result;
  __int128 v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16)  = v5;
  *(_WORD *)(v4 + 32)  = *(_WORD *)(a2 + 32);
  *(void *)(a4[7] + 8 * result)  = a3;
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2]  = v8;
  }
  return result;
}

unint64_t sub_10013E034(unint64_t result, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  uint64_t v5 = a5[6] + 40 * result;
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16)  = v6;
  *(_WORD *)(v5 + 32)  = *(_WORD *)(a2 + 32);
  uint64_t v7 = a5[7] + 16 * result;
  *(void *)uint64_t v7 = a3;
  *(_BYTE *)(v7 + 8)  = a4;
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2]  = v10;
  }
  return result;
}

_OWORD *sub_10013E094(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for CodingUserInfoKey(0LL);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  id result = sub_100022594(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2]  = v13;
  }
  return result;
}

unint64_t sub_10013E134( unint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1LL << result;
  *(_BYTE *)(a6[6] + result)  = a2;
  __int128 v6 = (void *)(a6[7] + 24 * result);
  *__int128 v6 = a3;
  v6[1]  = a4;
  v6[2]  = a5;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1LL);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2]  = v9;
  }
  return result;
}

_OWORD *sub_10013E188(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(void *)(a4[6] + 8 * a1)  = a2;
  id result = sub_100022594(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2]  = v8;
  }
  return result;
}

uint64_t sub_10013E1EC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1]  = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = sub_100002274((uint64_t *)&unk_1004050D0);
  uint64_t result = sub_1000586C0(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * a1, (uint64_t *)&unk_1004050D0);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2]  = v14;
  }
  return result;
}

uint64_t sub_10013E288(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
  uint64_t result = sub_100022628( a3,  v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  type metadata accessor for LongTermPairingKeys.PublicIdentity);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2]  = v15;
  }
  return result;
}

unint64_t sub_10013E340(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  *(void *)(a5[6] + 8 * result)  = a2;
  uint64_t v5 = (void *)(a5[7] + 16 * result);
  *uint64_t v5 = a3;
  v5[1]  = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2]  = v8;
  }
  return result;
}

uint64_t sub_10013E388(unint64_t a1, char a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(_BYTE *)(a4[6] + a1)  = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  uint64_t result = sub_100022628( a3,  v7 + *(void *)(*(void *)(v8 - 8) + 72LL) * a1,  type metadata accessor for NANGenericServiceProtocol.Attribute);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1LL);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2]  = v12;
  }
  return result;
}

_OWORD *sub_10013E41C(unint64_t a1, char a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(_BYTE *)(a4[6] + a1)  = a2 & 1;
  uint64_t result = sub_100022594(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2]  = v8;
  }
  return result;
}

_OWORD *sub_10013E484(unint64_t a1, char a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(_BYTE *)(a4[6] + a1)  = a2;
  uint64_t result = sub_100022594(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2]  = v8;
  }
  return result;
}

unint64_t sub_10013E4E8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1]  = a3;
  *(void *)(a5[7] + 8 * result)  = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2]  = v8;
  }
  return result;
}

void (*sub_10013E530(void *a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v5 = malloc(0x78uLL);
  *a1  = v5;
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(*v2);
  __int128 v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)((char *)v5 + 88)  = *(_OWORD *)a2;
  v5[4]  = v7;
  *((_WORD *)v5 + 40)  = *(_WORD *)(a2 + 32);
  sub_1000209DC((uint64_t)v5 + 88);
  sub_1000209DC((uint64_t)(v5 + 4));
  *((void *)v5 + 13)  = sub_10013EA78(v5);
  *((void *)v5 + 14)  = sub_10013E71C((void *)v5 + 4, a2, isUniquelyReferenced_nonNull_native);
  return sub_10013E5E0;
}

void sub_10013E5E0(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 104LL);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 112LL))(*(void *)a1 + 32LL, 0LL);
  sub_100020A04((uint64_t)v1 + 88);
  sub_100020A04((uint64_t)v1 + 64);
  v2(v1, 0LL);
  free(v1);
}

void (*sub_10013E63C(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  __int128 v7 = malloc(0x58uLL);
  *a1  = v7;
  v7[8]  = a3;
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  void v7[9] = sub_10013EAA4(v7);
  v7[10]  = sub_10013E884(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_10013E6CC;
}

void sub_10013E6CC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 72LL);
  uint64_t v3 = *(void *)(*(void *)a1 + 64LL);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 80LL))(*(void *)a1 + 32LL, 0LL);
  swift_bridgeObjectRelease(v3);
  v2(v1, 0LL);
  free(v1);
}

void (*sub_10013E71C(void *a1, uint64_t a2, char a3))(uint64_t *a1)
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x28uLL);
  *a1  = v8;
  _OWORD v8[2] = a2;
  _OWORD v8[3] = v4;
  uint64_t v9 = *v4;
  unint64_t v11 = sub_10001C214(a2);
  *((_BYTE *)v8 + 9)  = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }

  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[4]  = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = *(void *)(*v4 + 56) + 16 * v11;
        uint64_t v18 = *(void *)v17;
        char v19 = *(_BYTE *)(v17 + 8);
LABEL_12:
        *uint64_t v8 = v18;
        *((_BYTE *)v8 + 8)  = v19;
        return sub_10013E848;
      }

void sub_10013E848(uint64_t *a1)
{
  uint64_t v1 = (id *)*a1;
  sub_10013EAC4(*a1, *(_BYTE *)(*a1 + 9), *(uint64_t **)(*a1 + 24), *(void *)(*a1 + 32), *(void *)(*a1 + 16));

  free(v1);
}

void (*sub_10013E884(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t v5 = v4;
  char v10 = malloc(0x30uLL);
  *a1  = v10;
  v10[1]  = a3;
  void v10[2] = v4;
  *char v10 = a2;
  uint64_t v11 = sub_100002274(&qword_100408B10);
  uint64_t v12 = malloc(*(void *)(*(void *)(v11 - 8) + 64LL));
  v10[3]  = v12;
  uint64_t v13 = *v4;
  unint64_t v15 = sub_10001C4F8(a2, a3);
  *((_BYTE *)v10 + 40)  = v14 & 1;
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }

  else
  {
    char v19 = v14;
    uint64_t v20 = *(void *)(v13 + 24);
    if (v20 >= v18 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4]  = v15;
      if ((v19 & 1) != 0)
      {
LABEL_8:
        uint64_t v21 = *(void *)(*v5 + 56LL);
        uint64_t v22 = sub_100002274((uint64_t *)&unk_1004050D0);
        uint64_t v23 = *(void *)(v22 - 8);
        sub_1000586C0(v21 + *(void *)(v23 + 72) * v15, (uint64_t)v12, (uint64_t *)&unk_1004050D0);
        uint64_t v24 = 0LL;
LABEL_12:
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v12, v24, 1LL, v22);
        return sub_10013EA28;
      }

void sub_10013EA28(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void *)(*a1)[3];
  sub_10013EB90((uint64_t)v2, *((_BYTE *)*a1 + 40), (uint64_t *)(*a1)[2], (*a1)[4], **a1, (*a1)[1]);
  sub_1000225EC((uint64_t)v2, &qword_100408B10);
  free(v2);
  free(v1);
}

uint64_t (*sub_10013EA78(void *a1))(uint64_t result)
{
  *a1  = *v1;
  a1[1]  = v1;
  *uint64_t v1 = 0x8000000000000000LL;
  return sub_10013EA98;
}

uint64_t sub_10013EA98(uint64_t result)
{
  **(void **)(result + 8)  = *(void *)result;
  return result;
}

uint64_t (*sub_10013EAA4(void *a1))(uint64_t result)
{
  *a1  = *v1;
  a1[1]  = v1;
  *uint64_t v1 = 0x8000000000000000LL;
  return sub_100144158;
}

id sub_10013EAC4(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  __int128 v7 = *(void **)a1;
  if (!*(void *)a1)
  {
    if ((a2 & 1) == 0) {
      return v7;
    }
    uint64_t v13 = 0LL;
    swift_arrayDestroy(*(void *)(*a3 + 48) + 40 * a4, 1LL, &type metadata for DNSRecords.PTR);
    sub_10013AA98(a4, *a3);
LABEL_7:
    __int128 v7 = v13;
    return v7;
  }

  char v8 = *(_BYTE *)(a1 + 8) & 1;
  if ((a2 & 1) == 0)
  {
    char v10 = (void *)*a3;
    __int128 v11 = *(_OWORD *)(a5 + 16);
    __int128 v16 = *(_OWORD *)a5;
    __int128 v14 = v11;
    __int16 v15 = *(_WORD *)(a5 + 32);
    uint64_t v13 = v7;
    sub_10013E034(a4, a5, (uint64_t)v7, v8, v10);
    sub_1000209DC((uint64_t)&v16);
    sub_1000209DC((uint64_t)&v14);
    goto LABEL_7;
  }

  uint64_t v9 = *(void *)(*a3 + 56) + 16 * a4;
  *(void *)uint64_t v9 = v7;
  *(_BYTE *)(v9 + 8)  = v8;
  return v7;
}

unint64_t sub_10013EB90( uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v10 = sub_100002274(&qword_100408B10);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100002274((uint64_t *)&unk_1004050D0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  BOOL v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  char v19 = (char *)&v24 - v18;
  sub_1000226B0(a1, (uint64_t)v12, &qword_100408B10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) == 1)
  {
    unint64_t result = sub_1000225EC((uint64_t)v12, &qword_100408B10);
    if ((a2 & 1) != 0)
    {
      swift_arrayDestroy(*(void *)(*a3 + 48) + 16 * a4, 1LL, &type metadata for NANServiceName);
      return sub_10013BAB0(a4, *a3);
    }
  }

  else
  {
    sub_1000586C0((uint64_t)v12, (uint64_t)v19, (uint64_t *)&unk_1004050D0);
    uint64_t v21 = (void *)*a3;
    if ((a2 & 1) != 0)
    {
      return sub_1000586C0((uint64_t)v19, v21[7] + *(void *)(v14 + 72) * a4, (uint64_t *)&unk_1004050D0);
    }

    else
    {
      sub_1000586C0((uint64_t)v19, (uint64_t)v17, (uint64_t *)&unk_1004050D0);
      unint64_t v22 = a4;
      uint64_t v23 = v25;
      sub_10013E1EC(v22, v24, v25, (uint64_t)v17, v21);
      return swift_bridgeObjectRetain(v23);
    }
  }

  return result;
}

void *sub_10013ED54()
{
  uint64_t v1 = v0;
  sub_100002274(&qword_100407CB0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16)  = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

id sub_10013EEE8()
{
  uint64_t v1 = v0;
  sub_100002274(&qword_100407D18);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16)  = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }

void *sub_10013F090()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(type metadata accessor for AWDLPeer.AdvertisedService(0LL) - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_10040ECF0);
  uint64_t v5 = *v0;
  uint64_t v6 = static _SetStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (void *)swift_release(v5);
LABEL_30:
    *uint64_t v1 = v7;
    return result;
  }

  uint64_t v24 = v1;
  id result = (void *)(v6 + 56);
  uint64_t v9 = v5 + 56;
  unint64_t v10 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  int64_t v12 = 0LL;
  *(void *)(v7 + 16)  = *(void *)(v5 + 16);
  uint64_t v13 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & *(void *)(v5 + 56);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v20 >= v16) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v9 + 8 * v20);
    ++v12;
    if (!v21)
    {
      int64_t v12 = v20 + 1;
      if (v20 + 1 >= v16) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v9 + 8 * v12);
      if (!v21)
      {
        int64_t v12 = v20 + 2;
        if (v20 + 2 >= v16) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v9 + 8 * v12);
        if (!v21) {
          break;
        }
      }
    }

void *sub_10013F2B0()
{
  uint64_t v1 = v0;
  sub_100002274((uint64_t *)&unk_100404AB0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16)  = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

uint64_t sub_10013F440(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = static Hasher._hash(seed:_:)(*(void *)(*v2 + 40LL), a1);
  uint64_t v6 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(v4 + 48);
  if (*(void *)(v8 + 8 * v7) != a1)
  {
    uint64_t v9 = ~v6;
    do
    {
      unint64_t v7 = (v7 + 1) & v9;
      if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
        return 0LL;
      }
    }

    while (*(void *)(v8 + 8 * v7) != a1);
  }

  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v11 = *v2;
  uint64_t v15 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10013ED54();
    uint64_t v11 = v15;
  }

  uint64_t v12 = *(void *)(*(void *)(v11 + 48) + 8 * v7);
  sub_10013F98C(v7);
  uint64_t v13 = *v2;
  *uint64_t v2 = v15;
  swift_bridgeObjectRelease(v13);
  return v12;
}

uint64_t sub_10013F548@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v4 = type metadata accessor for AWDLPeer.AdvertisedService(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  unint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v2;
  Hasher.init(_seed:)(&v51, *(void *)(*v2 + 40));
  swift_bridgeObjectRetain(v8);
  AWDLPeer.AdvertisedService.hash(into:)((uint64_t)&v51);
  Swift::Int v9 = Hasher._finalize()();
  uint64_t v10 = -1LL << *(_BYTE *)(v8 + 32);
  unint64_t v11 = v9 & ~v10;
  uint64_t v44 = v8 + 56;
  if (((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0)
  {
    __n128 v32 = swift_bridgeObjectRelease(v8);
    uint64_t v33 = 1LL;
    uint64_t v30 = v39;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))(v30, v33, 1LL, v4, v32);
  }

  uint64_t v36 = v2;
  uint64_t v37 = v5;
  uint64_t v38 = v4;
  uint64_t v41 = ~v10;
  uint64_t v42 = *(void *)(v5 + 72);
  uint64_t v12 = type metadata accessor for AWDLPeer.AdvertisedService;
  uint64_t v43 = v8;
  while (1)
  {
    uint64_t v13 = *(void *)(v8 + 48);
    unint64_t v40 = v42 * v11;
    unint64_t v14 = v12;
    sub_100057FE8(v13 + v42 * v11, (uint64_t)v7, v12);
    uint64_t v15 = *((void *)v7 + 1);
    uint64_t v16 = *((void *)v7 + 2);
    uint64_t v17 = *((void *)v7 + 3);
    uint64_t v18 = *((void *)v7 + 4);
    int v48 = v7[40];
    int v46 = v7[41];
    uint64_t v19 = *(void *)(a1 + 8);
    uint64_t v20 = *(void *)(a1 + 16);
    uint64_t v22 = *(void *)(a1 + 24);
    uint64_t v21 = *(void *)(a1 + 32);
    int v47 = *(unsigned __int8 *)(a1 + 40);
    int v45 = *(unsigned __int8 *)(a1 + 41);
    uint64_t v51 = v15;
    uint64_t v52 = v16;
    uint64_t v49 = v19;
    uint64_t v50 = v20;
    unint64_t v23 = sub_10000B08C();
    if (StringProtocol.caseInsensitiveCompare<A>(_:)( &v49,  &type metadata for String,  &type metadata for String,  v23,  v23))
    {
      goto LABEL_3;
    }

    uint64_t v51 = v17;
    uint64_t v52 = v18;
    uint64_t v49 = v22;
    uint64_t v50 = v21;
    if (StringProtocol.caseInsensitiveCompare<A>(_:)( &v49,  &type metadata for String,  &type metadata for String,  v23,  v23))
    {
      goto LABEL_3;
    }

    uint64_t v24 = v48 ? 7365749LL : 7365492LL;
    uint64_t v25 = v47 ? 7365749LL : 7365492LL;
    if (v24 == v25) {
      break;
    }
    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, 0xE300000000000000LL, v25, 0xE300000000000000LL, 0LL);
    swift_bridgeObjectRelease_n(0xE300000000000000LL, 2LL);
    if ((v26 & 1) != 0) {
      goto LABEL_16;
    }
LABEL_3:
    uint64_t v12 = v14;
    sub_10005802C((uint64_t)v7, v14);
LABEL_4:
    unint64_t v11 = (v11 + 1) & v41;
    uint64_t v8 = v43;
    if (((*(void *)(v44 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0)
    {
      __n128 v32 = swift_bridgeObjectRelease(v43);
      uint64_t v33 = 1LL;
      uint64_t v4 = v38;
      uint64_t v30 = v39;
      uint64_t v5 = v37;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))(v30, v33, 1LL, v4, v32);
    }
  }

  swift_bridgeObjectRelease_n(0xE300000000000000LL, 2LL);
LABEL_16:
  uint64_t v12 = v14;
  sub_10005802C((uint64_t)v7, v14);
  if (v46 != v45) {
    goto LABEL_4;
  }
  swift_bridgeObjectRelease(v43);
  unint64_t v27 = v36;
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(*v36);
  uint64_t v29 = *v27;
  uint64_t v51 = *v27;
  *unint64_t v27 = 0x8000000000000000LL;
  uint64_t v5 = v37;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_10013F090();
    uint64_t v29 = v51;
  }

  uint64_t v30 = v39;
  sub_100022628(*(void *)(v29 + 48) + v40, v39, type metadata accessor for AWDLPeer.AdvertisedService);
  sub_10013FB10(v11);
  uint64_t v31 = *v27;
  *unint64_t v27 = v51;
  __n128 v32 = swift_bridgeObjectRelease(v31);
  uint64_t v33 = 0LL;
  uint64_t v4 = v38;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))(v30, v33, 1LL, v4, v32);
}

uint64_t sub_10013F868(unsigned __int8 a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  int v5 = 1;
  uint64_t v6 = static Hasher._hash(seed:bytes:count:)(*(void *)(*v2 + 40LL), a1, 1LL);
  uint64_t v7 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v4 + 48);
    if (*(unsigned __int8 *)(v9 + v8) == a1)
    {
LABEL_6:
      isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(*v2);
      uint64_t v12 = *v2;
      uint64_t v16 = *v2;
      *uint64_t v2 = 0x8000000000000000LL;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_10013F2B0();
        uint64_t v12 = v16;
      }

      int v13 = *(unsigned __int8 *)(*(void *)(v12 + 48) + v8);
      sub_10013FE54(v8);
      uint64_t v14 = *v2;
      *uint64_t v2 = v16;
      swift_bridgeObjectRelease(v14);
      int v5 = 0;
    }

    else
    {
      uint64_t v10 = ~v7;
      while (1)
      {
        unint64_t v8 = (v8 + 1) & v10;
        if (((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
          break;
        }
      }

      int v13 = 0;
      int v5 = 1;
    }
  }

  else
  {
    int v13 = 0;
  }

  return v13 | (v5 << 8);
}

unint64_t sub_10013F98C(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(v3);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(v3 + 48);
        unint64_t v11 = (void *)(v10 + 8 * v6);
        uint64_t v12 = static Hasher._hash(seed:_:)(*(void *)(v3 + 40), *v11) & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            uint64_t v15 = (void *)(v10 + 8 * v2);
            if (v2 != v6 || (int64_t v2 = v6, v15 >= v11 + 1))
            {
              *uint64_t v15 = *v11;
              int64_t v2 = v6;
            }
          }
        }

        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    id result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v16 = *(void *)(v3 + 16);
  BOOL v17 = __OFSUB__(v16, 1LL);
  uint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16)  = v18;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

uint64_t sub_10013FB10(int64_t a1)
{
  uint64_t v36 = type metadata accessor for AWDLPeer.AdvertisedService(0LL);
  uint64_t v3 = *(void *)(v36 - 8);
  uint64_t result = __chkstk_darwin();
  unint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  uint64_t v8 = *v1 + 56;
  uint64_t v9 = -1LL << *(_BYTE *)(*v1 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v35 = v1;
    uint64_t v11 = ~v9;
    swift_retain();
    uint64_t v12 = _HashTable.previousHole(before:)(a1, v8, v11);
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v13 = (v12 + 1) & v11;
      uint64_t v14 = *(void *)(v3 + 72);
      uint64_t v38 = v7;
      uint64_t v39 = v8;
      uint64_t v40 = v11;
      uint64_t v37 = v14;
      do
      {
        uint64_t v15 = *(void *)(v7 + 48);
        int64_t v41 = v14 * v10;
        sub_100057FE8(v15 + v14 * v10, (uint64_t)v6, type metadata accessor for AWDLPeer.AdvertisedService);
        Hasher.init(_seed:)(v43, *(void *)(v7 + 40));
        uint64_t v16 = *((void *)v6 + 2);
        uint64_t v17 = *((void *)v6 + 4);
        int v18 = v6[40];
        int v42 = v6[41];
        Swift::String v19 = String.lowercased()();
        int64_t v20 = a1;
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        String.hash(into:)(v43, v19._countAndFlagsBits, v19._object);
        swift_bridgeObjectRelease(v19._object);
        Swift::String v21 = String.lowercased()();
        swift_bridgeObjectRetain(v17);
        String.hash(into:)(v43, v21._countAndFlagsBits, v21._object);
        swift_bridgeObjectRelease(v21._object);
        if (v18) {
          uint64_t v22 = 7365749LL;
        }
        else {
          uint64_t v22 = 7365492LL;
        }
        String.hash(into:)(v43, v22, 0xE300000000000000LL);
        swift_bridgeObjectRelease(0xE300000000000000LL);
        Hasher._combine(_:)(v42);
        swift_bridgeObjectRelease(v16);
        swift_bridgeObjectRelease_n(v17, 2LL);
        Swift::Int v23 = Hasher._finalize()();
        uint64_t v24 = v40;
        Swift::Int v25 = v23;
        sub_10005802C((uint64_t)v6, type metadata accessor for AWDLPeer.AdvertisedService);
        unint64_t v26 = v25 & v24;
        if (a1 >= (uint64_t)v13)
        {
          if (v26 < v13)
          {
            uint64_t v7 = v38;
            uint64_t v8 = v39;
            uint64_t v14 = v37;
            goto LABEL_6;
          }

          uint64_t v7 = v38;
          uint64_t v8 = v39;
          uint64_t v14 = v37;
        }

        else
        {
          uint64_t v7 = v38;
          uint64_t v8 = v39;
          uint64_t v14 = v37;
        }

        uint64_t v27 = *(void *)(v7 + 48);
        unint64_t v28 = v27 + v14 * a1;
        uint64_t v29 = v27 + v41;
        if (v14 * a1 < v41 || v28 >= v29 + v14)
        {
          swift_arrayInitWithTakeFrontToBack(v28, v29, 1LL, v36);
        }

        else
        {
          a1  = v10;
          if (v14 * v20 == v41) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront(v28);
        }

        a1  = v10;
LABEL_6:
        unint64_t v10 = (v10 + 1) & v24;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a1) - 1;
    uint64_t result = swift_release(v7);
    uint64_t v1 = v35;
  }

  else
  {
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a1) - 1;
  }

  uint64_t v30 = *v1;
  uint64_t v31 = *(void *)(*v1 + 16);
  BOOL v32 = __OFSUB__(v31, 1LL);
  uint64_t v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v30 + 16)  = v33;
    ++*(_DWORD *)(v30 + 36);
  }

  return result;
}

unint64_t sub_10013FE54(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(v3);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(v3 + 48);
        uint64_t v11 = (_BYTE *)(v10 + v6);
        uint64_t v12 = static Hasher._hash(seed:bytes:count:)(*(void *)(v3 + 40), *(unsigned __int8 *)(v10 + v6), 1LL) & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            uint64_t v15 = (_BYTE *)(v10 + v2);
            if (v2 != v6 || (int64_t v2 = v6, v15 >= v11 + 1))
            {
              *uint64_t v15 = *v11;
              int64_t v2 = v6;
            }
          }
        }

        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v16 = *(void *)(v3 + 16);
  BOOL v17 = __OFSUB__(v16, 1LL);
  uint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16)  = v18;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

uint64_t sub_10013FFDC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v10 = ~v9;
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v12 = -v9;
  uint64_t v50 = a1;
  uint64_t v51 = a1 + 64;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  else {
    uint64_t v13 = -1LL;
  }
  uint64_t v52 = v10;
  uint64_t v53 = 0LL;
  uint64_t v54 = v13 & v11;
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_10018CFC4((uint64_t)&v48);
  uint64_t v14 = v48;
  if (!v48) {
    goto LABEL_26;
  }
  sub_100022594(v49, v47);
  uint64_t v15 = *(void **)a5;
  unint64_t v17 = sub_10001C470((uint64_t)v14);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  char v21 = v16;
  if (v15[3] >= v20)
  {
    if ((a4 & 1) != 0)
    {
      if ((v16 & 1) != 0) {
        goto LABEL_12;
      }
    }

    else
    {
      sub_10013D09C();
      if ((v21 & 1) != 0) {
        goto LABEL_12;
      }
    }

id sub_100140340@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id v4 = *a1;
  sub_100002AE4((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *a2  = v4;
  return v4;
}

uint64_t _s7CoreP2P16InMemoryKeychainC4save8identity3for8publiclySbAA19LongTermPairingKeysV14PublicIdentityV_AA14NANServiceNameVSbtF_0( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100002274((uint64_t *)&unk_1004050D0);
  uint64_t v36 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
  uint64_t v37 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100057FE8(a1, (uint64_t)v13, v14);
  uint64_t v15 = (unint64_t *)(v4 + 16);
  swift_beginAccess(v4 + 16, v39, 33LL, 0LL);
  swift_bridgeObjectRetain(a3);
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(*(void *)(v4 + 16));
  unint64_t v38 = *(void *)(v4 + 16);
  unint64_t v17 = v38;
  *(void *)(v4 + 16)  = 0x8000000000000000LL;
  uint64_t v35 = a2;
  unint64_t v19 = sub_10001C4F8(a2, a3);
  uint64_t v20 = *(void *)(v17 + 16);
  BOOL v21 = (v18 & 1) == 0;
  uint64_t v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
LABEL_14:
    unint64_t v17 = sub_1000A6B40(0, *(void *)(v17 + 16) + 1LL, 1, v17);
    *(void *)(isUniquelyReferenced_nonNull_native + v10)  = v17;
    goto LABEL_10;
  }

  char v23 = v18;
  if (*(void *)(v17 + 24) >= v22)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10013D260();
      unint64_t v17 = v38;
    }
  }

  else
  {
    sub_100138518(v22, isUniquelyReferenced_nonNull_native);
    unint64_t v17 = v38;
    unint64_t v24 = sub_10001C4F8(v35, a3);
    if ((v23 & 1) != (v25 & 1))
    {
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for NANServiceName);
      __break(1u);
      return result;
    }

    unint64_t v19 = v24;
  }

  uint64_t v26 = (void *)*v15;
  *uint64_t v15 = v17;
  swift_bridgeObjectRelease(v26);
  BOOL v27 = (void *)*v15;
  if ((v23 & 1) == 0)
  {
    uint64_t v28 = *(int *)(v8 + 48);
    uint64_t v29 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v10, 1LL, 1LL, v29);
    *(void *)(v10 + v28)  = _swiftEmptyArrayStorage;
    sub_10013E1EC(v19, v35, a3, v10, v27);
    swift_bridgeObjectRetain(a3);
  }

  isUniquelyReferenced_nonNull_native  = v27[7] + *(void *)(v36 + 72) * v19;
  uint64_t v10 = *(int *)(v8 + 48);
  unint64_t v17 = *(void *)(isUniquelyReferenced_nonNull_native + v10);
  char v30 = swift_isUniquelyReferenced_nonNull_native(v17);
  *(void *)(isUniquelyReferenced_nonNull_native + v10)  = v17;
  if ((v30 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_10:
  unint64_t v32 = *(void *)(v17 + 16);
  unint64_t v31 = *(void *)(v17 + 24);
  if (v32 >= v31 >> 1)
  {
    unint64_t v17 = sub_1000A6B40(v31 > 1, v32 + 1, 1, v17);
    *(void *)(isUniquelyReferenced_nonNull_native + v10)  = v17;
  }

  *(void *)(v17 + 16)  = v32 + 1;
  sub_100022628( (uint64_t)v13,  v17 + ((*(unsigned __int8 *)(v37 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))
  + *(void *)(v37 + 72) * v32,
    type metadata accessor for LongTermPairingKeys.PublicIdentity);
  swift_endAccess(v39);
  swift_bridgeObjectRelease(a3);
  sub_100135120();
  return 1LL;
}

void *sub_10014065C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100002274(&qword_100408AA8);
  __chkstk_darwin(v5);
  uint64_t v47 = (uint64_t)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v45 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
  uint64_t v10 = *(void *)(v48 - 8);
  uint64_t v11 = __chkstk_darwin(v48);
  uint64_t v50 = (uint64_t)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v52 = (uint64_t)&v42 - v13;
  uint64_t v14 = _swiftEmptyArrayStorage;
  uint64_t v54 = _swiftEmptyArrayStorage;
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v49 = (void *)(a2 + 16);
  swift_beginAccess(a2 + 16, v53, 0LL, 0LL);
  if (v15)
  {
    uint64_t v51 = v9;
    uint64_t v16 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v17 = *(void *)(v10 + 72);
    uint64_t v42 = v2;
    uint64_t v43 = (v16 + 32) & ~v16;
    uint64_t v18 = a1 + v43;
    unint64_t v19 = type metadata accessor for LongTermPairingKeys.PublicIdentity;
    uint64_t v44 = v7;
    uint64_t v20 = v45;
    uint64_t v46 = v10;
    uint64_t v21 = v7;
    do
    {
      uint64_t v22 = v52;
      char v23 = v19;
      sub_100057FE8(v18, v52, v19);
      uint64_t v24 = (uint64_t)v51;
      uint64_t v25 = v22;
      uint64_t v26 = v21;
      (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v51, v25, v21);
      uint64_t v27 = *v49;
      if (*(void *)(*v49 + 16LL))
      {
        swift_bridgeObjectRetain(*v49);
        unint64_t v28 = sub_10001C578(v24);
        if ((v29 & 1) != 0)
        {
          uint64_t v30 = v47;
          sub_100057FE8(*(void *)(v27 + 56) + v28 * v17, v47, v23);
          unint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
          uint64_t v32 = v30;
          uint64_t v33 = 0LL;
        }

        else
        {
          unint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
          uint64_t v30 = v47;
          uint64_t v32 = v47;
          uint64_t v33 = 1LL;
        }

        uint64_t v35 = v48;
        v31(v32, v33, 1LL, v48);
        uint64_t v36 = v27;
        uint64_t v34 = v35;
        uint64_t v10 = v46;
        swift_bridgeObjectRelease(v36);
      }

      else
      {
        uint64_t v30 = v47;
        uint64_t v34 = v48;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v47, 1LL, 1LL, v48);
      }

      (*(void (**)(char *, uint64_t))(v20 + 8))(v51, v26);
      int v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v30, 1LL, v34);
      sub_1000225EC(v30, &qword_100408AA8);
      if (v37 == 1)
      {
        unint64_t v19 = v23;
        sub_100022628(v52, v50, v23);
        unint64_t v38 = v54;
        if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0)
        {
          sub_100069938(0, v38[2] + 1LL, 1);
          unint64_t v38 = v54;
        }

        unint64_t v40 = v38[2];
        unint64_t v39 = v38[3];
        if (v40 >= v39 >> 1)
        {
          sub_100069938(v39 > 1, v40 + 1, 1);
          unint64_t v38 = v54;
        }

        v38[2]  = v40 + 1;
        sub_100022628(v50, (uint64_t)v38 + v43 + v40 * v17, v19);
        uint64_t v21 = v44;
        uint64_t v20 = v45;
      }

      else
      {
        unint64_t v19 = v23;
        sub_10005802C(v52, v23);
        uint64_t v21 = v26;
      }

      v18 += v17;
      --v15;
    }

    while (v15);
    return v54;
  }

  return v14;
}

uint64_t sub_1001409B4(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x797469746E656469LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x797469746E656469LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x4B676E696E676973LL && a2 == 0xEA00000000007965LL)
  {
    swift_bridgeObjectRelease(0xEA00000000007965LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4B676E696E676973LL, 0xEA00000000007965LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

void *sub_100140AB0(char *a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  uint64_t v32 = type metadata accessor for SymmetricKey(0LL);
  uint64_t v8 = *(void *)(v32 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  int64_t v12 = 0LL;
  int64_t v13 = (int64_t)a1;
  while (1)
  {
    BOOL v14 = v13 <= a2;
    if (a3 > 0) {
      BOOL v14 = v13 >= a2;
    }
    if (v14) {
      break;
    }
    BOOL v15 = __OFADD__(v13, a3);
    v13 += a3;
    if (v15) {
      int64_t v13 = (v13 >> 63) ^ 0x8000000000000000LL;
    }
    BOOL v15 = __OFADD__(v12++, 1LL);
    if (v15)
    {
      __break(1u);
      break;
    }
  }

  unint64_t v31 = (char *)&v30 - v11;
  int v37 = _swiftEmptyArrayStorage;
  sub_10006990C(0, v12, 0);
  uint64_t v16 = v37;
  if (!v12)
  {
    int64_t v18 = (int64_t)a1;
    goto LABEL_26;
  }

  if (qword_1004042F8 != -1) {
    goto LABEL_50;
  }
  do
  {
    while (1)
    {
      if (!v12)
      {
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }

      BOOL v17 = (uint64_t)a1 <= a2;
      if (a3 > 0) {
        BOOL v17 = (uint64_t)a1 >= a2;
      }
      if (v17) {
        goto LABEL_45;
      }
      if (__OFADD__(a1, a3)) {
        int64_t v18 = ((uint64_t)&a1[a3] >> 63) ^ 0x8000000000000000LL;
      }
      else {
        int64_t v18 = (int64_t)&a1[a3];
      }
      unint64_t v19 = &a1[qword_100408A10];
      if (__OFADD__(a1, qword_100408A10)) {
        goto LABEL_46;
      }
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      swift_once(&qword_1004042F8, sub_10012B170);
    }

    uint64_t v35 = Data._Representation.subscript.getter(a1, v19, v33, v34);
    uint64_t v36 = v20;
    SymmetricKey.init<A>(data:)(&v35, &type metadata for Data, &protocol witness table for Data);
    int v37 = v16;
    unint64_t v22 = v16[2];
    unint64_t v21 = v16[3];
    if (v22 >= v21 >> 1)
    {
      sub_10006990C(v21 > 1, v22 + 1, 1);
      uint64_t v16 = v37;
    }

    v16[2]  = v22 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))( (unint64_t)v16 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
    + *(void *)(v8 + 72) * v22,
      v10,
      v32);
    a1  = (char *)v18;
    --v12;
  }

  while (v12);
LABEL_26:
  BOOL v23 = v18 <= a2;
  if (a3 > 0) {
    BOOL v23 = v18 >= a2;
  }
  if (!v23)
  {
    a1  = (char *)&protocol witness table for Data;
    int64_t v12 = (int64_t)v31;
    while (1)
    {
      if (__OFADD__(v18, a3)) {
        uint64_t v10 = (char *)(((v18 + a3) >> 63) ^ 0x8000000000000000LL);
      }
      else {
        uint64_t v10 = (char *)(v18 + a3);
      }
      if (qword_1004042F8 != -1) {
        swift_once(&qword_1004042F8, sub_10012B170);
      }
      int64_t v25 = v18 + qword_100408A10;
      if (__OFADD__(v18, qword_100408A10)) {
        goto LABEL_48;
      }
      if (v25 < v18) {
        goto LABEL_49;
      }
      uint64_t v35 = Data._Representation.subscript.getter(v18, v25, v33, v34);
      uint64_t v36 = v26;
      SymmetricKey.init<A>(data:)(&v35, &type metadata for Data, &protocol witness table for Data);
      int v37 = v16;
      unint64_t v28 = v16[2];
      unint64_t v27 = v16[3];
      if (v28 >= v27 >> 1)
      {
        sub_10006990C(v27 > 1, v28 + 1, 1);
        uint64_t v16 = v37;
      }

      v16[2]  = v28 + 1;
      (*(void (**)(unint64_t, int64_t, uint64_t))(v8 + 32))( (unint64_t)v16 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
      + *(void *)(v8 + 72) * v28,
        v12,
        v32);
      BOOL v29 = (uint64_t)v10 <= a2;
      if (a3 > 0) {
        BOOL v29 = (uint64_t)v10 >= a2;
      }
      int64_t v18 = (int64_t)v10;
      if (v29) {
        return v16;
      }
    }
  }

  return v16;
}

uint64_t sub_100140E10(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char v3 = a3;
  unint64_t v4 = a3 >> 8;
  unint64_t v32 = a3 >> 16;
  unint64_t v33 = a3 >> 24;
  unint64_t v34 = HIDWORD(a3);
  unint64_t v35 = a3 >> 40;
  uint64_t v40 = type metadata accessor for SymmetricKey(0LL);
  uint64_t v38 = *(void *)(v40 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v39 = (char *)&v31 - v7;
  uint64_t v8 = SymmetricKey.withUnsafeBytes<A>(_:)(&v42, sub_100061064, 0LL, &type metadata for Data);
  uint64_t v36 = 0LL;
  __int128 v9 = v42;
  uint64_t v10 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v8);
  unint64_t v12 = v11;
  __int128 v42 = v9;
  sub_100020AFC(v9, *((unint64_t *)&v9 + 1));
  sub_1000FA9C4(v10, v12);
  sub_1000208D8(v10, v12);
  sub_1000208D8(v9, *((unint64_t *)&v9 + 1));
  v41[0]  = v42;
  int v37 = v6;
  SymmetricKey.init<A>(data:)(v41, &type metadata for Data, &protocol witness table for Data);
  uint64_t v13 = sub_100002274(&qword_1004040A8);
  uint64_t v14 = swift_allocObject(v13, 38LL, 7LL);
  *(_OWORD *)(v14 + 16)  = xmmword_10033A980;
  *(_BYTE *)(v14 + 32)  = v3;
  *(_BYTE *)(v14 + 33)  = v4;
  *(_BYTE *)(v14 + 34)  = v32;
  *(_BYTE *)(v14 + 35)  = v33;
  *(_BYTE *)(v14 + 36)  = v34;
  *(_BYTE *)(v14 + 37)  = v35;
  uint64_t v15 = sub_1000FB08C(v14);
  unint64_t v17 = v16;
  swift_bridgeObjectRelease(v14);
  *(void *)&__int128 v42 = v15;
  *((void *)&v42 + 1)  = v17;
  if (qword_100404308 != -1) {
    swift_once(&qword_100404308, sub_10012C4D4);
  }
  __int128 v18 = xmmword_100408A28;
  v41[0]  = xmmword_100408A28;
  uint64_t v19 = sub_100020AFC(xmmword_100408A28, *((unint64_t *)&xmmword_100408A28 + 1));
  uint64_t v20 = static SHA256Digest.byteCount.getter(v19);
  uint64_t v21 = type metadata accessor for SHA256(0LL);
  uint64_t v22 = sub_10000AF70( &qword_1004060F0,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
  unint64_t v23 = sub_10005D508();
  uint64_t v24 = v39;
  int64_t v25 = v37;
  static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)( v37,  &v42,  v41,  v20,  v21,  &type metadata for Data,  &type metadata for Data,  v22,  v23,  v23);
  sub_1000208D8(v18, *((unint64_t *)&v18 + 1));
  sub_1000208D8(v15, v17);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v38 + 8);
  unint64_t v27 = v25;
  uint64_t v28 = v40;
  v26(v27, v40);
  SymmetricKey.withUnsafeBytes<A>(_:)(&v42, sub_100061064, 0LL, &type metadata for Data);
  uint64_t v29 = v42;
  v26(v24, v28);
  return v29;
}

uint64_t type metadata accessor for LongTermPairingKeys.AuthenticationKeys(uint64_t a1)
{
  return sub_100020E48( a1,  (uint64_t *)&unk_100408D40,  (uint64_t)&nominal type descriptor for LongTermPairingKeys.AuthenticationKeys);
}

uint64_t sub_100141108(uint64_t a1)
{
  return sub_10012D48C( a1,  *(void *)(v1 + 16),  *(unsigned __int16 *)(v1 + 24) | ((unint64_t)*(unsigned int *)(v1 + 26) << 16));
}

uint64_t sub_100141120(uint64_t a1)
{
  return static UUID.== infix(_:_:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_100141128()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10014114C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_100408AE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for LongTermPairingKeys(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = type metadata accessor for Logger(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    __int128 v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    uint64_t v12 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0LL) + 20);
    uint64_t v13 = &v9[v12];
    uint64_t v14 = &v10[v12];
    uint64_t v15 = type metadata accessor for SymmetricKey(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
    uint64_t v16 = *(int *)(type metadata accessor for LongTermPairingKeys.PrivateIdentity(0LL) + 20);
    unint64_t v17 = &v9[v16];
    __int128 v18 = &v10[v16];
    uint64_t v19 = type metadata accessor for P256.Signing.PrivateKey(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16LL))(v17, v18, v19);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + swift_release(*(void *)(v0 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }

  swift_retain();
  return a1;
}

uint64_t destroy for LongTermPairingKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  uint64_t v7 = v5 + *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0LL) + 20);
  uint64_t v8 = type metadata accessor for SymmetricKey(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  uint64_t v9 = v5 + *(int *)(type metadata accessor for LongTermPairingKeys.PrivateIdentity(0LL) + 20);
  uint64_t v10 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v9, v10);
  return swift_release(*(void *)(a1 + *(int *)(a2 + 24)));
}

uint64_t initializeWithCopy for LongTermPairingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0LL) + 20);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = type metadata accessor for SymmetricKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
  uint64_t v15 = *(int *)(type metadata accessor for LongTermPairingKeys.PrivateIdentity(0LL) + 20);
  uint64_t v16 = v8 + v15;
  uint64_t v17 = v9 + v15;
  uint64_t v18 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16LL))(v16, v17, v18);
  *(void *)(a1 + *(int *)(a3 + swift_release(*(void *)(v0 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LongTermPairingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0LL) + 20);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = type metadata accessor for SymmetricKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24LL))(v12, v13, v14);
  uint64_t v15 = *(int *)(type metadata accessor for LongTermPairingKeys.PrivateIdentity(0LL) + 20);
  uint64_t v16 = v8 + v15;
  uint64_t v17 = v9 + v15;
  uint64_t v18 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24LL))(v16, v17, v18);
  uint64_t v19 = *(int *)(a3 + 24);
  uint64_t v20 = *(void *)(a2 + v19);
  uint64_t v21 = *(void *)(a1 + v19);
  *(void *)(a1 + v19)  = v20;
  swift_retain();
  swift_release(v21);
  return a1;
}

uint64_t initializeWithTake for LongTermPairingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0LL) + 20);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = type metadata accessor for SymmetricKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32LL))(v12, v13, v14);
  uint64_t v15 = *(int *)(type metadata accessor for LongTermPairingKeys.PrivateIdentity(0LL) + 20);
  uint64_t v16 = v8 + v15;
  uint64_t v17 = v9 + v15;
  uint64_t v18 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32LL))(v16, v17, v18);
  *(void *)(a1 + *(int *)(a3 + swift_release(*(void *)(v0 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for LongTermPairingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0LL) + 20);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = type metadata accessor for SymmetricKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40LL))(v12, v13, v14);
  uint64_t v15 = *(int *)(type metadata accessor for LongTermPairingKeys.PrivateIdentity(0LL) + 20);
  uint64_t v16 = v8 + v15;
  uint64_t v17 = v9 + v15;
  uint64_t v18 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40LL))(v16, v17, v18);
  uint64_t v19 = *(int *)(a3 + 24);
  uint64_t v20 = *(void *)(a1 + v19);
  *(void *)(a1 + v19)  = *(void *)(a2 + v19);
  swift_release(v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for LongTermPairingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001417B0);
}

uint64_t sub_1001417B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  uint64_t v11 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }

  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14)  = -1;
  }
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for LongTermPairingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100141864);
}

uint64_t sub_100141864(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
    return v11(v12, a2, a2, v10);
  }

  uint64_t result = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0LL);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }

  *(void *)(a1 + *(int *)(a4 + swift_release(*(void *)(v0 + 24)) = (a2 - 1);
  return result;
}

uint64_t sub_100141908(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v5[0]  = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for LongTermPairingKeys.PrivateIdentity(319LL);
    if (v4 <= 0x3F)
    {
      v5[1]  = *(void *)(result - 8) + 64LL;
      _OWORD v5[2] = (char *)&value witness table for Builtin.NativeObject + 64;
      swift_initStructMetadata(a1, 256LL, 3LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for LongTermPairingKeys.PrivateIdentity( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v16 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0LL) + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SymmetricKey(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    uint64_t v12 = *(int *)(a3 + 20);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for P256.Signing.PrivateKey(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
  }

  return a1;
}

uint64_t destroy for LongTermPairingKeys.PrivateIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v5 = a1 + *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0LL) + 20);
  uint64_t v6 = type metadata accessor for SymmetricKey(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 20);
  uint64_t v8 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
}

uint64_t initializeWithCopy for LongTermPairingKeys.PrivateIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0LL) + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for LongTermPairingKeys.PrivateIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0LL) + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24LL))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for LongTermPairingKeys.PrivateIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0LL) + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32LL))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for LongTermPairingKeys.PrivateIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0LL) + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40LL))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for LongTermPairingKeys.PrivateIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100141DF8);
}

uint64_t sub_100141DF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100143E1C( a1,  a2,  a3,  type metadata accessor for LongTermPairingKeys.Identity,  (uint64_t (*)(void))&type metadata accessor for P256.Signing.PrivateKey);
}

uint64_t storeEnumTagSinglePayload for LongTermPairingKeys.PrivateIdentity( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100141E18);
}

uint64_t sub_100141E18(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100143EB4( a1,  a2,  a3,  a4,  type metadata accessor for LongTermPairingKeys.Identity,  (uint64_t (*)(void))&type metadata accessor for P256.Signing.PrivateKey);
}

uint64_t sub_100141E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100143F50( a1,  a2,  a3,  type metadata accessor for LongTermPairingKeys.Identity,  (uint64_t (*)(uint64_t))&type metadata accessor for P256.Signing.PrivateKey);
}

uint64_t *initializeBufferWithCopyOfBuffer for LongTermPairingKeys.PublicIdentity( uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v27 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v27 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0LL) + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SymmetricKey(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    uint64_t v12 = a3[5];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for P256.Signing.PublicKey(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
    uint64_t v16 = a3[6];
    uint64_t v17 = a3[7];
    uint64_t v18 = (uint64_t *)((char *)a1 + v16);
    uint64_t v19 = (uint64_t *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1]  = v20;
    uint64_t v21 = (char *)a1 + v17;
    uint64_t v22 = (char *)a2 + v17;
    uint64_t v23 = type metadata accessor for Date(0LL);
    uint64_t v24 = *(void *)(v23 - 8);
    int64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
    swift_bridgeObjectRetain(v20);
    if (v25(v22, 1LL, v23))
    {
      uint64_t v26 = sub_100002274(&qword_100408A80);
      memcpy(v21, v22, *(void *)(*(void *)(v26 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
    }
  }

  return a1;
}

uint64_t destroy for LongTermPairingKeys.PublicIdentity(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v5 = a1 + *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0LL) + 20);
  uint64_t v6 = type metadata accessor for SymmetricKey(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  uint64_t v7 = a1 + a2[5];
  uint64_t v8 = type metadata accessor for P256.Signing.PublicKey(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[6] + 8));
  uint64_t v9 = a1 + a2[7];
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  return result;
}

uint64_t initializeWithCopy for LongTermPairingKeys.PublicIdentity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0LL) + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
  uint64_t v11 = a3[5];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for P256.Signing.PublicKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
  uint64_t v15 = a3[6];
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)(a1 + v15);
  uint64_t v18 = (void *)(a2 + v15);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1]  = v19;
  uint64_t v20 = (void *)(a1 + v16);
  uint64_t v21 = (const void *)(a2 + v16);
  uint64_t v22 = type metadata accessor for Date(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48);
  swift_bridgeObjectRetain(v19);
  if (v24(v21, 1LL, v22))
  {
    uint64_t v25 = sub_100002274(&qword_100408A80);
    memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 16))(v20, v21, v22);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 1LL, v22);
  }

  return a1;
}

uint64_t assignWithCopy for LongTermPairingKeys.PublicIdentity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0LL) + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24LL))(v8, v9, v10);
  uint64_t v11 = a3[5];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for P256.Signing.PublicKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24LL))(v12, v13, v14);
  uint64_t v15 = a3[6];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  *uint64_t v16 = *v17;
  uint64_t v18 = v17[1];
  uint64_t v19 = v16[1];
  v16[1]  = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = a3[7];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  uint64_t v23 = type metadata accessor for Date(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  LODWORD(v13)  = v25(v21, 1LL, v23);
  int v26 = v25(v22, 1LL, v23);
  if (!(_DWORD)v13)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 24))(v21, v22, v23);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v24 + 8))(v21, v23);
    goto LABEL_6;
  }

  if (v26)
  {
LABEL_6:
    uint64_t v27 = sub_100002274(&qword_100408A80);
    memcpy(v21, v22, *(void *)(*(void *)(v27 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v24 + 16))(v21, v22, v23);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
  return a1;
}

uint64_t initializeWithTake for LongTermPairingKeys.PublicIdentity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0LL) + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  uint64_t v11 = a3[5];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for P256.Signing.PublicKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32LL))(v12, v13, v14);
  uint64_t v15 = a3[7];
  *(_OWORD *)(a1 + a3[6])  = *(_OWORD *)(a2 + a3[6]);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  uint64_t v18 = type metadata accessor for Date(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
  {
    uint64_t v20 = sub_100002274(&qword_100408A80);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
  }

  return a1;
}

uint64_t assignWithTake for LongTermPairingKeys.PublicIdentity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0LL) + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = a3[5];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for P256.Signing.PublicKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40LL))(v12, v13, v14);
  uint64_t v15 = a3[6];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  uint64_t v20 = v16[1];
  *uint64_t v16 = v19;
  v16[1]  = v18;
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = a3[7];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  uint64_t v24 = type metadata accessor for Date(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  int v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  LODWORD(v13)  = v26(v22, 1LL, v24);
  int v27 = v26(v23, 1LL, v24);
  if (!(_DWORD)v13)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 40))(v22, v23, v24);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v25 + 8))(v22, v24);
    goto LABEL_6;
  }

  if (v27)
  {
LABEL_6:
    uint64_t v28 = sub_100002274(&qword_100408A80);
    memcpy(v22, v23, *(void *)(*(void *)(v28 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v25 + 32))(v22, v23, v24);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0LL, 1LL, v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for LongTermPairingKeys.PublicIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001426BC);
}

uint64_t sub_1001426BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for LongTermPairingKeys.Identity(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  uint64_t v9 = type metadata accessor for P256.Signing.PublicKey(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    uint64_t v11 = v9;
    uint64_t v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }

  if ((_DWORD)a2 != 2147483646)
  {
    uint64_t v11 = sub_100002274(&qword_100408A80);
    uint64_t v10 = *(void *)(v11 - 8);
    uint64_t v12 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }

  unint64_t v13 = *(void *)(a1 + a3[6] + 8);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13)  = -1;
  }
  int v14 = v13 - 1;
  if (v14 < 0) {
    int v14 = -1;
  }
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for LongTermPairingKeys.PublicIdentity( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001427A8);
}

uint64_t sub_1001427A8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for LongTermPairingKeys.Identity(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t result = type metadata accessor for P256.Signing.PublicKey(0LL);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      uint64_t v10 = result;
      uint64_t v15 = a4[5];
    }

    else
    {
      if (a3 == 2147483646)
      {
        *(void *)(a1 + a4[6] + 8)  = a2;
        return result;
      }

      uint64_t v10 = sub_100002274(&qword_100408A80);
      uint64_t v14 = *(void *)(v10 - 8);
      uint64_t v15 = a4[7];
    }

    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_100142878(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LongTermPairingKeys.Identity(319LL);
  if (v3 <= 0x3F)
  {
    v8[0]  = *(void *)(v2 - 8) + 64LL;
    uint64_t v4 = type metadata accessor for P256.Signing.PublicKey(319LL);
    if (v5 <= 0x3F)
    {
      v8[1]  = *(void *)(v4 - 8) + 64LL;
      _OWORD v8[2] = &unk_1003498E8;
      sub_100056310( 319LL,  (unint64_t *)&unk_100408CB0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date);
      if (v7 <= 0x3F)
      {
        _OWORD v8[3] = *(void *)(v6 - 8) + 64LL;
        swift_initStructMetadata(a1, 256LL, 4LL, v8, a1 + 16);
      }
    }
  }

uint64_t *initializeBufferWithCopyOfBuffer for LongTermPairingKeys.AuthenticationKeys( uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for SymmetricKey(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v8((uint64_t *)((char *)a1 + a3[6]), (uint64_t *)((char *)a2 + a3[6]), v7);
    uint64_t v9 = a3[7];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100002274(&qword_100408AA8);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      uint64_t v16 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL))(v10, v11, v16);
      uint64_t v17 = type metadata accessor for LongTermPairingKeys.Identity(0LL);
      v8((uint64_t *)&v10[*(int *)(v17 + 20)], (uint64_t *)&v11[*(int *)(v17 + 20)], v7);
      uint64_t v18 = v12[5];
      uint64_t v19 = &v10[v18];
      uint64_t v20 = &v11[v18];
      uint64_t v21 = type metadata accessor for P256.Signing.PublicKey(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16LL))(v19, v20, v21);
      uint64_t v22 = v12[6];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      uint64_t v25 = *((void *)v24 + 1);
      *(void *)uint64_t v23 = *(void *)v24;
      *((void *)v23 + 1)  = v25;
      uint64_t v26 = v12[7];
      int v27 = &v10[v26];
      uint64_t v28 = &v11[v26];
      uint64_t v29 = type metadata accessor for Date(0LL);
      uint64_t v30 = *(void *)(v29 - 8);
      uint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
      swift_bridgeObjectRetain(v25);
      if (v31(v28, 1LL, v29))
      {
        uint64_t v32 = sub_100002274(&qword_100408A80);
        memcpy(v27, v28, *(void *)(*(void *)(v32 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0LL, 1LL, v29);
      }

      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
    }
  }

  return a1;
}

uint64_t destroy for LongTermPairingKeys.AuthenticationKeys(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for SymmetricKey(0LL);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  v5(a1 + a2[6], v4);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = (int *)type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((void *)v7 - 1) + 48LL))(v6, 1LL, v7);
  if (!(_DWORD)result)
  {
    uint64_t v9 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v6, v9);
    uint64_t v10 = type metadata accessor for LongTermPairingKeys.Identity(0LL);
    v5(v6 + *(int *)(v10 + 20), v4);
    uint64_t v11 = v6 + v7[5];
    uint64_t v12 = type metadata accessor for P256.Signing.PublicKey(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(v11, v12);
    swift_bridgeObjectRelease(*(void *)(v6 + v7[6] + 8));
    uint64_t v13 = v6 + v7[7];
    uint64_t v14 = type metadata accessor for Date(0LL);
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14);
    if (!(_DWORD)result) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    }
  }

  return result;
}

uint64_t initializeWithCopy for LongTermPairingKeys.AuthenticationKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v8 = a3[7];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100002274(&qword_100408AA8);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    uint64_t v14 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v9, v10, v14);
    uint64_t v15 = type metadata accessor for LongTermPairingKeys.Identity(0LL);
    v7((uint64_t)&v9[*(int *)(v15 + 20)], (uint64_t)&v10[*(int *)(v15 + 20)], v6);
    uint64_t v16 = v11[5];
    uint64_t v17 = &v9[v16];
    uint64_t v18 = &v10[v16];
    uint64_t v19 = type metadata accessor for P256.Signing.PublicKey(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16LL))(v17, v18, v19);
    uint64_t v20 = v11[6];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    uint64_t v23 = *((void *)v22 + 1);
    *(void *)uint64_t v21 = *(void *)v22;
    *((void *)v21 + 1)  = v23;
    uint64_t v24 = v11[7];
    uint64_t v25 = &v9[v24];
    uint64_t v26 = &v10[v24];
    uint64_t v27 = type metadata accessor for Date(0LL);
    uint64_t v28 = *(void *)(v27 - 8);
    uint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
    swift_bridgeObjectRetain(v23);
    if (v29(v26, 1LL, v27))
    {
      uint64_t v30 = sub_100002274(&qword_100408A80);
      memcpy(v25, v26, *(void *)(*(void *)(v30 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
    }

    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  return a1;
}

uint64_t assignWithCopy for LongTermPairingKeys.AuthenticationKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v8(a1 + a3[5], a2 + a3[5], v6);
  v8(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v9 = a3[7];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14((uint64_t)v11, 1LL, v12);
  if (!v15)
  {
    if (!v16)
    {
      uint64_t v37 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v37 - 8) + 24LL))(v10, v11, v37);
      uint64_t v38 = type metadata accessor for LongTermPairingKeys.Identity(0LL);
      v8(v10 + *(int *)(v38 + 20), (uint64_t)&v11[*(int *)(v38 + 20)], v6);
      uint64_t v39 = v12[5];
      uint64_t v40 = v10 + v39;
      uint64_t v41 = &v11[v39];
      uint64_t v42 = type metadata accessor for P256.Signing.PublicKey(0LL);
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v42 - 8) + 24LL))(v40, v41, v42);
      uint64_t v43 = v12[6];
      uint64_t v44 = (void *)(v10 + v43);
      uint64_t v45 = &v11[v43];
      *uint64_t v44 = *(void *)v45;
      uint64_t v46 = *((void *)v45 + 1);
      uint64_t v47 = v44[1];
      v44[1]  = v46;
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRelease(v47);
      uint64_t v48 = v12[7];
      uint64_t v49 = (void *)(v10 + v48);
      uint64_t v50 = &v11[v48];
      uint64_t v51 = type metadata accessor for Date(0LL);
      uint64_t v52 = *(void *)(v51 - 8);
      uint64_t v53 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v52 + 48);
      LODWORD(v47)  = v53(v49, 1LL, v51);
      int v54 = v53(v50, 1LL, v51);
      if ((_DWORD)v47)
      {
        if (!v54)
        {
          (*(void (**)(void *, char *, uint64_t))(v52 + 16))(v49, v50, v51);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0LL, 1LL, v51);
          return a1;
        }
      }

      else
      {
        if (!v54)
        {
          (*(void (**)(void *, char *, uint64_t))(v52 + 24))(v49, v50, v51);
          return a1;
        }

        (*(void (**)(void *, uint64_t))(v52 + 8))(v49, v51);
      }

      size_t v34 = *(void *)(*(void *)(sub_100002274(&qword_100408A80) - 8) + 64LL);
      unint64_t v35 = v49;
      uint64_t v36 = v50;
      goto LABEL_8;
    }

    sub_10005802C(v10, type metadata accessor for LongTermPairingKeys.PublicIdentity);
LABEL_7:
    size_t v34 = *(void *)(*(void *)(sub_100002274(&qword_100408AA8) - 8) + 64LL);
    unint64_t v35 = (void *)v10;
    uint64_t v36 = v11;
LABEL_8:
    memcpy(v35, v36, v34);
    return a1;
  }

  if (v16) {
    goto LABEL_7;
  }
  uint64_t v17 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v17 - 8) + 16LL))(v10, v11, v17);
  uint64_t v18 = type metadata accessor for LongTermPairingKeys.Identity(0LL);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v10 + *(int *)(v18 + 20), &v11[*(int *)(v18 + 20)], v6);
  uint64_t v19 = v12[5];
  uint64_t v20 = v10 + v19;
  uint64_t v21 = &v11[v19];
  uint64_t v22 = type metadata accessor for P256.Signing.PublicKey(0LL);
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v22 - 8) + 16LL))(v20, v21, v22);
  uint64_t v23 = v12[6];
  uint64_t v24 = (void *)(v10 + v23);
  uint64_t v25 = &v11[v23];
  void *v24 = *(void *)v25;
  uint64_t v26 = *((void *)v25 + 1);
  v24[1]  = v26;
  uint64_t v27 = v12[7];
  uint64_t v28 = (void *)(v10 + v27);
  uint64_t v29 = &v11[v27];
  uint64_t v30 = type metadata accessor for Date(0LL);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
  swift_bridgeObjectRetain(v26);
  if (v32(v29, 1LL, v30))
  {
    uint64_t v33 = sub_100002274(&qword_100408A80);
    memcpy(v28, v29, *(void *)(*(void *)(v33 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0LL, 1LL, v30);
  }

  (*(void (**)(uint64_t, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
  return a1;
}

uint64_t initializeWithTake for LongTermPairingKeys.AuthenticationKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v8 = a3[7];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100002274(&qword_100408AA8);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    uint64_t v14 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32LL))(v9, v10, v14);
    uint64_t v15 = type metadata accessor for LongTermPairingKeys.Identity(0LL);
    v7((uint64_t)&v9[*(int *)(v15 + 20)], (uint64_t)&v10[*(int *)(v15 + 20)], v6);
    uint64_t v16 = v11[5];
    uint64_t v17 = &v9[v16];
    uint64_t v18 = &v10[v16];
    uint64_t v19 = type metadata accessor for P256.Signing.PublicKey(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32LL))(v17, v18, v19);
    *(_OWORD *)&v9[v11[6]]  = *(_OWORD *)&v10[v11[6]];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    uint64_t v23 = type metadata accessor for Date(0LL);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23))
    {
      uint64_t v25 = sub_100002274(&qword_100408A80);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
    }

    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  return a1;
}

uint64_t assignWithTake for LongTermPairingKeys.AuthenticationKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v8(a1 + a3[5], a2 + a3[5], v6);
  v8(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v9 = a3[7];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14((uint64_t)v11, 1LL, v12);
  if (!v15)
  {
    if (!v16)
    {
      uint64_t v32 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v32 - 8) + 40LL))(v10, v11, v32);
      uint64_t v33 = type metadata accessor for LongTermPairingKeys.Identity(0LL);
      v8(v10 + *(int *)(v33 + 20), (uint64_t)&v11[*(int *)(v33 + 20)], v6);
      uint64_t v34 = v12[5];
      uint64_t v35 = v10 + v34;
      uint64_t v36 = &v11[v34];
      uint64_t v37 = type metadata accessor for P256.Signing.PublicKey(0LL);
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v37 - 8) + 40LL))(v35, v36, v37);
      uint64_t v38 = v12[6];
      uint64_t v39 = (void *)(v10 + v38);
      uint64_t v40 = &v11[v38];
      uint64_t v42 = *(void *)v40;
      uint64_t v41 = *((void *)v40 + 1);
      uint64_t v43 = v39[1];
      *uint64_t v39 = v42;
      v39[1]  = v41;
      swift_bridgeObjectRelease(v43);
      uint64_t v44 = v12[7];
      uint64_t v45 = (void *)(v10 + v44);
      uint64_t v46 = &v11[v44];
      uint64_t v47 = type metadata accessor for Date(0LL);
      uint64_t v48 = *(void *)(v47 - 8);
      uint64_t v49 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v48 + 48);
      LODWORD(v35)  = v49(v45, 1LL, v47);
      int v50 = v49(v46, 1LL, v47);
      if ((_DWORD)v35)
      {
        if (!v50)
        {
          (*(void (**)(void *, char *, uint64_t))(v48 + 32))(v45, v46, v47);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0LL, 1LL, v47);
          return a1;
        }
      }

      else
      {
        if (!v50)
        {
          (*(void (**)(void *, char *, uint64_t))(v48 + 40))(v45, v46, v47);
          return a1;
        }

        (*(void (**)(void *, uint64_t))(v48 + 8))(v45, v47);
      }

      size_t v29 = *(void *)(*(void *)(sub_100002274(&qword_100408A80) - 8) + 64LL);
      uint64_t v30 = v45;
      uint64_t v31 = v46;
      goto LABEL_8;
    }

    sub_10005802C(v10, type metadata accessor for LongTermPairingKeys.PublicIdentity);
LABEL_7:
    size_t v29 = *(void *)(*(void *)(sub_100002274(&qword_100408AA8) - 8) + 64LL);
    uint64_t v30 = (void *)v10;
    uint64_t v31 = v11;
LABEL_8:
    memcpy(v30, v31, v29);
    return a1;
  }

  if (v16) {
    goto LABEL_7;
  }
  uint64_t v17 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v17 - 8) + 32LL))(v10, v11, v17);
  uint64_t v18 = type metadata accessor for LongTermPairingKeys.Identity(0LL);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v10 + *(int *)(v18 + 20), &v11[*(int *)(v18 + 20)], v6);
  uint64_t v19 = v12[5];
  uint64_t v20 = v10 + v19;
  uint64_t v21 = &v11[v19];
  uint64_t v22 = type metadata accessor for P256.Signing.PublicKey(0LL);
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v22 - 8) + 32LL))(v20, v21, v22);
  *(_OWORD *)(v10 + v12[6])  = *(_OWORD *)&v11[v12[6]];
  uint64_t v23 = v12[7];
  uint64_t v24 = (void *)(v10 + v23);
  uint64_t v25 = &v11[v23];
  uint64_t v26 = type metadata accessor for Date(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
  {
    uint64_t v28 = sub_100002274(&qword_100408A80);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
  }

  (*(void (**)(uint64_t, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for LongTermPairingKeys.AuthenticationKeys( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001437D0);
}

uint64_t sub_1001437D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v8 = sub_100002274(&qword_100408AA8);
    uint64_t v10 = a1 + *(int *)(a3 + 28);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
  }

  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for LongTermPairingKeys.AuthenticationKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100143854);
}

uint64_t sub_100143854(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SymmetricKey(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v10 = sub_100002274(&qword_100408AA8);
    uint64_t v12 = a1 + *(int *)(a4 + 28);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

void sub_1001438D4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SymmetricKey(319LL);
  if (v3 <= 0x3F)
  {
    v6[0]  = *(void *)(v2 - 8) + 64LL;
    v6[1]  = v6[0];
    v6[2]  = v6[0];
    sub_100056310( 319LL,  (unint64_t *)&unk_100408D50,  type metadata accessor for LongTermPairingKeys.PublicIdentity);
    if (v5 <= 0x3F)
    {
      void v6[3] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 4LL, v6, a1 + 16);
    }
  }

uint64_t sub_10014396C()
{
  return type metadata accessor for AppleKeychain(0LL);
}

uint64_t type metadata accessor for AppleKeychain(uint64_t a1)
{
  return sub_100020E48(a1, qword_100408EE0, (uint64_t)&nominal type descriptor for AppleKeychain);
}

uint64_t sub_100143988(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[0]  = *(void *)(result - 8) + 64LL;
    v4[1]  = &unk_100349960;
    v4[2]  = &unk_100349960;
    v4[3]  = (char *)&value witness table for Builtin.Int32 + 64;
    v4[4]  = &unk_100349960;
    void v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 6LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for InMemoryKeychain()
{
  return objc_opt_self(&OBJC_CLASS____TtC7CoreP2P16InMemoryKeychain);
}

uint64_t storeEnumTagSinglePayload for LongTermPairingKeys.PrivateIdentity.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100143A88 + 4 * byte_100349765[v4]))();
  }
  *a1  = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100143ABC + 4 * byte_100349760[v4]))();
}

uint64_t sub_100143ABC(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100143AC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x100143ACCLL);
  }
  return result;
}

uint64_t sub_100143AD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x100143AE0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100143AE4(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100143AEC(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for LongTermPairingKeys.PrivateIdentity.CodingKeys()
{
  return &type metadata for LongTermPairingKeys.PrivateIdentity.CodingKeys;
}

uint64_t *sub_100143B08(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v12);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SymmetricKey(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
  }

  return a1;
}

uint64_t sub_100143BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for SymmetricKey(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
}

uint64_t sub_100143C0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
  return a1;
}

uint64_t sub_100143C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24LL))(v8, v9, v10);
  return a1;
}

uint64_t sub_100143D04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  return a1;
}

uint64_t sub_100143D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  return a1;
}

uint64_t sub_100143DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100143E08);
}

uint64_t sub_100143E08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100143E1C( a1,  a2,  a3,  (uint64_t (*)(void))&type metadata accessor for UUID,  (uint64_t (*)(void))&type metadata accessor for SymmetricKey);
}

uint64_t sub_100143E1C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v9 = a4(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    uint64_t v11 = v9;
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    uint64_t v13 = a1;
  }

  else
  {
    uint64_t v11 = a5(0LL);
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL);
  }

  return v12(v13, a2, v11);
}

uint64_t sub_100143E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100143EA0);
}

uint64_t sub_100143EA0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100143EB4( a1,  a2,  a3,  a4,  (uint64_t (*)(void))&type metadata accessor for UUID,  (uint64_t (*)(void))&type metadata accessor for SymmetricKey);
}

uint64_t sub_100143EB4( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v11 = a5(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a3)
  {
    uint64_t v13 = v11;
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
    uint64_t v15 = a1;
  }

  else
  {
    uint64_t v13 = a6(0LL);
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL);
  }

  return v14(v15, a2, a2, v13);
}

uint64_t sub_100143F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100143F50( a1,  a2,  a3,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for SymmetricKey);
}

uint64_t sub_100143F50( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t result = a4(319LL);
  if (v8 <= 0x3F)
  {
    v10[0]  = *(void *)(result - 8) + 64LL;
    uint64_t result = a5(319LL);
    if (v9 <= 0x3F)
    {
      v10[1]  = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 2LL, v10, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_100143FDC()
{
  unint64_t result = qword_1004091D8;
  if (!qword_1004091D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100349A70, &type metadata for LongTermPairingKeys.PrivateIdentity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004091D8);
  }

  return result;
}

unint64_t sub_100144024()
{
  unint64_t result = qword_1004091E0;
  if (!qword_1004091E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003499E0, &type metadata for LongTermPairingKeys.PrivateIdentity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004091E0);
  }

  return result;
}

unint64_t sub_10014406C()
{
  unint64_t result = qword_1004091E8;
  if (!qword_1004091E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100349A08, &type metadata for LongTermPairingKeys.PrivateIdentity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004091E8);
  }

  return result;
}

uint64_t sub_1001440B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

void sub_1001440F4(const char *a1@<X0>, uint32_t *a2@<X8>)
{
}

uint64_t sub_10014410C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100144130(uint64_t a1)
{
  return sub_10012FF34(a1, v1);
}

uint64_t sub_100144138(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain(v2);
}

uint64_t sub_100144148(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100144150()
{
  return sub_10012B870(v0);
}

uint64_t sub_100144168()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000B0D0(v0, qword_1004092B0);
  sub_1000032DC(v0, (uint64_t)qword_1004092B0);
  return Logger.init(subsystem:category:)( 0xD000000000000012LL,  0x8000000100360620LL,  1953066601LL,  0xE400000000000000LL);
}

char *static Sandbox.check()()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  int v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  BOOL v4 = sub_1003339D4();
  if (v4) {
    return (char *)v4;
  }
  if (qword_100404310 != -1) {
    swift_once(&qword_100404310, sub_100144168);
  }
  uint64_t v5 = sub_1000032DC(v0, (uint64_t)qword_1004092B0);
  uint64_t v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  uint64_t v7 = (void *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled((os_log_t)v7, v8))
  {
LABEL_7:

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return (char *)v4;
  }

  unint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v10 = swift_slowAlloc(32LL, -1LL);
  uint64_t v18 = v10;
  *(_DWORD *)unint64_t v9 = 136315138;
  int v12 = errno.getter(v10, v11);
  unint64_t result = strerror(v12);
  if (result)
  {
    uint64_t v14 = String.init(cString:)(result);
    unint64_t v16 = v15;
    uint64_t v17 = sub_10000235C(v14, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v7, v8, "Sandbox check failed with error: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
    goto LABEL_7;
  }

  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for Sandbox()
{
  return &type metadata for Sandbox;
}

uint64_t sub_1001443C0(unsigned __int8 a1, char a2)
{
  int v4 = a1;
  uint64_t v5 = sub_100002274(&qword_100407088);
  if (v4 == 2) {
    return 0LL;
  }
  if (a2 == 2) {
    return 1LL;
  }
  if (a1 == 3) {
    return 0LL;
  }
  if (a2 == 3) {
    return 1LL;
  }
  if (a1 == 4) {
    return 0LL;
  }
  if (a2 == 4) {
    return 1LL;
  }
  if (a1 == 5) {
    return 0LL;
  }
  if (a2 == 5) {
    return 1LL;
  }
  if (a1 == 6) {
    return 0LL;
  }
  if (a2 == 6) {
    return 1LL;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)(v5, v5);
  __break(1u);
  return result;
}

BOOL sub_1001444CC(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x100000000LL) != 0) {
    LODWORD(a2)  = *(_DWORD *)&asc_100349CC8[4 * (int)a2];
  }
  if ((a1 & 0x100000000LL) != 0) {
    LODWORD(a1)  = *(_DWORD *)&asc_100349CC8[4 * (int)a1];
  }
  return a2 < a1;
}

uint64_t AWDLElectionMetric.rawValue.getter(uint64_t result)
{
  if ((result & 0x100000000LL) != 0) {
    return *(unsigned int *)&asc_100349CC8[4 * (int)result];
  }
  return result;
}

uint64_t static AWDLElectionMetric.__derived_enum_equals(_:_:)(unint64_t a1, unint64_t a2)
{
  return sub_100144724(a1, a2, sub_100144A10);
}

void *AWDLElectionMetric.appleTVSoloAndPrivateElectionCapableInIdleMode.unsafeMutableAddressor()
{
  return &static AWDLElectionMetric.appleTVSoloAndPrivateElectionCapableInIdleMode;
}

uint64_t static AWDLElectionMetric.appleTVSoloAndPrivateElectionCapableInIdleMode.getter()
{
  return 0x100000004LL;
}

uint64_t AWDLElectionMetric.init(from:)(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100021104(a1, v3);
  dispatch thunk of Decoder.singleValueContainer()(v10, v3, v4);
  if (v1) {
    return sub_100002AC4(a1);
  }
  uint64_t v5 = v11;
  uint64_t v6 = v12;
  sub_100021104(v10, v11);
  int v7 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v5, v6);
  unint64_t v8 = sub_100144AFC(v7);
  sub_100002AC4(v10);
  sub_100002AC4(a1);
  return v8 | ((HIDWORD(v8) & 1) << 32);
}

uint64_t AWDLElectionMetric.init(rawValue:)(int a1)
{
  unint64_t v1 = sub_100144AFC(a1);
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t AWDLElectionMetric.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100021104(a1, v3);
  dispatch thunk of Encoder.singleValueContainer()(v8, v3, v4);
  if ((a2 & 0x100000000LL) != 0) {
    a2  = *(unsigned int *)&asc_100349CC8[4 * (int)a2];
  }
  uint64_t v5 = v9;
  uint64_t v6 = v10;
  sub_1000237C8((uint64_t)v8, v9);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(a2, v5, v6);
  return sub_100002AC4(v8);
}

void AWDLElectionMetric.hash(into:)(int a1, uint64_t a2)
{
  if ((a2 & 0x100000000LL) != 0) {
    LODWORD(a2)  = *(_DWORD *)&asc_100349CC8[4 * (int)a2];
  }
  Hasher._combine(_:)(a2);
}

uint64_t static AWDLElectionMetric.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return sub_100144724(a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_100144AD0);
}

uint64_t sub_100144724(unint64_t a1, unint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  return a3(a1 | ((HIDWORD(a1) & 1) << 32), a2 | ((HIDWORD(a2) & 1) << 32));
}

Swift::Int AWDLElectionMetric.hashValue.getter(uint64_t a1)
{
  if ((a1 & 0x100000000LL) != 0) {
    LODWORD(a1)  = *(_DWORD *)&asc_100349CC8[4 * (int)a1];
  }
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t sub_1001447A0(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001449DC(a1, a2, a3, a4, (uint64_t (*)(unint64_t, unint64_t))sub_100144AD0);
}

uint64_t sub_1001447AC(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001449DC(a1, a2, a3, a4, (uint64_t (*)(unint64_t, unint64_t))sub_10017274C);
}

uint64_t sub_1001447B8(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001449DC(a1, a2, a3, a4, (uint64_t (*)(unint64_t, unint64_t))sub_1000BA7E0);
}

uint64_t sub_1001447C4(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001449DC(a1, a2, a3, a4, (uint64_t (*)(unint64_t, unint64_t))sub_1001444CC);
}

uint64_t sub_1001447D0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100021104(a1, v5);
  dispatch thunk of Decoder.singleValueContainer()(v12, v5, v6);
  if (v2) {
    return sub_100002AC4(a1);
  }
  uint64_t v7 = v13;
  uint64_t v8 = v14;
  sub_100021104(v12, v13);
  int v9 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v7, v8);
  unint64_t v10 = sub_100144AFC(v9);
  sub_100002AC4(v12);
  uint64_t result = sub_100002AC4(a1);
  *(_DWORD *)a2  = v10;
  *(_BYTE *)(a2 + 4)  = BYTE4(v10) & 1;
  return result;
}

uint64_t sub_1001448A0(void *a1)
{
  return AWDLElectionMetric.encode(to:)(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32));
}

Swift::Int sub_1001448D0()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 4);
  Hasher.init(_seed:)(v4, 0LL);
  if (v2 == 1) {
    Swift::UInt32 v1 = *(_DWORD *)&asc_100349CC8[4 * v1];
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100144930()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  if (*(_BYTE *)(v0 + 4) == 1) {
    Swift::UInt32 v1 = *(_DWORD *)&asc_100349CC8[4 * v1];
  }
  Hasher._combine(_:)(v1);
}

Swift::Int sub_100144974(uint64_t a1)
{
  Swift::UInt32 v2 = *(_DWORD *)v1;
  int v3 = *(unsigned __int8 *)(v1 + 4);
  Hasher.init(_seed:)(v5, a1);
  if (v3 == 1) {
    Swift::UInt32 v2 = *(_DWORD *)&asc_100349CC8[4 * v2];
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1001449D0(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001449DC(a1, a2, a3, a4, (uint64_t (*)(unint64_t, unint64_t))sub_100144A10);
}

uint64_t sub_1001449DC( unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unint64_t, unint64_t))
{
  return a5( *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32),  *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32));
}

uint64_t sub_100144A10(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x100000000LL) != 0) {
    return ((uint64_t (*)(void))((char *)&loc_100144A3C + 4 * byte_100349B70[a1]))();
  }
  if ((a2 & 0x100000000LL) != 0) {
    return 0LL;
  }
  return (_DWORD)a1 == (_DWORD)a2;
}

BOOL sub_100144AD0(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x100000000LL) != 0) {
    LODWORD(a1)  = *(_DWORD *)&asc_100349CC8[4 * (int)a1];
  }
  if ((a2 & 0x100000000LL) != 0) {
    LODWORD(a2)  = *(_DWORD *)&asc_100349CC8[4 * (int)a2];
  }
  return a1 < a2;
}

unint64_t sub_100144AFC(int a1)
{
  BOOL v1 = 0;
  if (a1 > 504)
  {
    if (a1 == 655) {
      int v2 = 6;
    }
    else {
      int v2 = a1;
    }
    BOOL v1 = a1 == 655;
    if (a1 == 650) {
      int v3 = 5;
    }
    else {
      int v3 = v2;
    }
    if (a1 == 650) {
      BOOL v1 = 1;
    }
    BOOL v4 = a1 == 505;
    if (a1 == 505) {
      a1  = 4;
    }
    else {
      a1  = v3;
    }
    if (v4) {
      BOOL v1 = 1;
    }
  }

  else
  {
    switch(a1)
    {
      case '=':
        a1  = 0;
        BOOL v1 = 1;
        break;
      case '@':
        a1  = 1;
        BOOL v1 = 1;
        break;
      case 'P':
        BOOL v1 = 1;
        a1  = 2;
        break;
        BOOL v1 = 1;
        a1  = 3;
        break;
      default:
        return a1 | ((unint64_t)v1 << 32);
    }
  }

  return a1 | ((unint64_t)v1 << 32);
}

unint64_t sub_100144BB8()
{
  unint64_t result = qword_1004092C8;
  if (!qword_1004092C8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AWDLElectionMetric,  &type metadata for AWDLElectionMetric);
    atomic_store(result, (unint64_t *)&qword_1004092C8);
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AWDLElectionMetric(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_BYTE *)(result + 4)  = *((_BYTE *)a2 + 4);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NANAttribute.RangingInformation(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for NANAttribute.RangingInformation(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(result + 4)  = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 5)  = v3;
  return result;
}

uint64_t sub_100144C5C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100144C78(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)unint64_t result = a2 - 1;
    *(_BYTE *)(result + 4)  = 1;
  }

  else
  {
    *(_BYTE *)(result + 4)  = 0;
  }

  return result;
}

ValueMetadata *type metadata accessor for AWDLElectionMetric()
{
  return &type metadata for AWDLElectionMetric;
}

uint64_t sub_100144CA8(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v26 = a1 + 64;
  uint64_t v2 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(v2 + 63) >> 6;
  uint64_t v5 = (char *)v32 + 8;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v7 = 0LL;
  uint64_t v8 = _swiftEmptyArrayStorage;
  int v9 = &type metadata for Any[8];
  if (v4) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v12 = v7 + 1;
  if (!__OFADD__(v7, 1LL))
  {
    if (v12 < v27)
    {
      unint64_t v13 = *(void *)(v26 + 8 * v12);
      ++v7;
      if (v13) {
        goto LABEL_22;
      }
      int64_t v7 = v12 + 1;
      if (v12 + 1 >= v27) {
        goto LABEL_36;
      }
      unint64_t v13 = *(void *)(v26 + 8 * v7);
      if (v13) {
        goto LABEL_22;
      }
      int64_t v7 = v12 + 2;
      if (v12 + 2 >= v27) {
        goto LABEL_36;
      }
      unint64_t v13 = *(void *)(v26 + 8 * v7);
      if (v13) {
        goto LABEL_22;
      }
      int64_t v7 = v12 + 3;
      if (v12 + 3 >= v27) {
        goto LABEL_36;
      }
      unint64_t v13 = *(void *)(v26 + 8 * v7);
      if (v13)
      {
LABEL_22:
        unint64_t v4 = (v13 - 1) & v13;
        for (i  = __clz(__rbit64(v13)) + (v7 << 6); ; i  = v10 | (v7 << 6))
        {
          char v15 = *(_BYTE *)(*(void *)(v1 + 48) + i);
          sub_100002AE4(*(void *)(v1 + 56) + 32 * i, (uint64_t)v5);
          LOBYTE(v32[0])  = v15;
          v30[0]  = v32[0];
          v30[1]  = v32[1];
          uint64_t v31 = v33;
          v28[0]  = v15;
          sub_100002AE4((uint64_t)v30 + 8, (uint64_t)v29);
          unint64_t v16 = sub_100021774();
          if (swift_dynamicCast(&v34, v29, v9, v16, 6LL))
          {
            uint64_t v17 = v5;
            uint64_t v18 = v1;
            uint64_t v19 = v34;
            if (LOBYTE(v30[0])) {
              uint64_t v20 = 0x64657463656A6572LL;
            }
            else {
              uint64_t v20 = 0x6553657669746361LL;
            }
            if (LOBYTE(v30[0])) {
              unint64_t v21 = 0xEF65636976726553LL;
            }
            else {
              unint64_t v21 = 0xED00006563697672LL;
            }
            sub_1000225EC((uint64_t)v30, &qword_1004095B8);
            uint64_t result = swift_isUniquelyReferenced_nonNull_native(v8);
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_1000A7604(0LL, v8[2] + 1LL, 1, v8);
              uint64_t v8 = (void *)result;
            }

            unint64_t v23 = v8[2];
            unint64_t v22 = v8[3];
            uint64_t v24 = v8;
            if (v23 >= v22 >> 1)
            {
              uint64_t result = (uint64_t)sub_1000A7604((void *)(v22 > 1), v23 + 1, 1, v8);
              uint64_t v24 = (void *)result;
            }

            v24[2]  = v23 + 1;
            uint64_t v8 = v24;
            uint64_t v25 = &v24[3 * v23];
            v25[4]  = v20;
            v25[5]  = v21;
            v25[6]  = v19;
            uint64_t v1 = v18;
            uint64_t v5 = v17;
            int v9 = &type metadata for Any[8];
            if (!v4) {
              goto LABEL_7;
            }
          }

          else
          {
            v28[0]  = v30[0];
            sub_100002AE4((uint64_t)v30 + 8, (uint64_t)v29);
            sub_1000225EC((uint64_t)v28, &qword_1004095B8);
            uint64_t result = sub_1000225EC((uint64_t)v30, &qword_1004095B8);
            if (!v4) {
              goto LABEL_7;
            }
          }

void *sub_100145000(uint64_t a1)
{
  uint64_t v14 = a1 + 64;
  uint64_t v2 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v15 = (unint64_t)(v2 + 63) >> 6;
  int64_t v5 = 0LL;
  swift_bridgeObjectRetain(a1);
  if (v4) {
    goto LABEL_6;
  }
  while (1)
  {
    int64_t v8 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v8 >= v15) {
      goto LABEL_25;
    }
    unint64_t v9 = *(void *)(v14 + 8 * v8);
    ++v5;
    if (!v9)
    {
      int64_t v5 = v8 + 1;
      if (v8 + 1 >= v15) {
        goto LABEL_25;
      }
      unint64_t v9 = *(void *)(v14 + 8 * v5);
      if (!v9)
      {
        int64_t v5 = v8 + 2;
        if (v8 + 2 >= v15) {
          goto LABEL_25;
        }
        unint64_t v9 = *(void *)(v14 + 8 * v5);
        if (!v9)
        {
          int64_t v5 = v8 + 3;
          if (v8 + 3 >= v15) {
            goto LABEL_25;
          }
          unint64_t v9 = *(void *)(v14 + 8 * v5);
          if (!v9) {
            break;
          }
        }
      }
    }

uint64_t sub_1001453D0(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v23 = a1 + 64;
  uint64_t v2 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v24 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v6 = 0LL;
  int64_t v7 = _swiftEmptyArrayStorage;
  int64_t v8 = &type metadata for Any[8];
  uint64_t v22 = result;
  if (v4) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v11 = v6 + 1;
  if (!__OFADD__(v6, 1LL))
  {
    if (v11 < v24)
    {
      unint64_t v12 = *(void *)(v23 + 8 * v11);
      ++v6;
      if (v12) {
        goto LABEL_22;
      }
      int64_t v6 = v11 + 1;
      if (v11 + 1 >= v24) {
        goto LABEL_35;
      }
      unint64_t v12 = *(void *)(v23 + 8 * v6);
      if (v12) {
        goto LABEL_22;
      }
      int64_t v6 = v11 + 2;
      if (v11 + 2 >= v24) {
        goto LABEL_35;
      }
      unint64_t v12 = *(void *)(v23 + 8 * v6);
      if (v12) {
        goto LABEL_22;
      }
      int64_t v6 = v11 + 3;
      if (v11 + 3 >= v24) {
        goto LABEL_35;
      }
      unint64_t v12 = *(void *)(v23 + 8 * v6);
      if (v12)
      {
LABEL_22:
        unint64_t v4 = (v12 - 1) & v12;
        for (i  = __clz(__rbit64(v12)) + (v6 << 6); ; i  = v9 | (v6 << 6))
        {
          char v14 = *(_BYTE *)(*(void *)(v1 + 48) + i);
          sub_100002AE4(*(void *)(v1 + 56) + 32 * i, (uint64_t)v29 + 8);
          LOBYTE(v29[0])  = v14;
          v27[0]  = v29[0];
          v27[1]  = v29[1];
          uint64_t v28 = v30;
          v25[0]  = v14;
          sub_100002AE4((uint64_t)v27 + 8, (uint64_t)v26);
          unint64_t v15 = sub_100021774();
          if (swift_dynamicCast(&v31, v26, v8, v15, 6LL))
          {
            if (LOBYTE(v27[0]))
            {
              if (LOBYTE(v27[0]) == 1)
              {
                unint64_t v16 = 0xEB00000000726F74LL;
                uint64_t v17 = 0x616974696E497369LL;
              }

              else
              {
                unint64_t v16 = 0xE800000000000000LL;
                uint64_t v17 = 0x6E6F697461727564LL;
              }
            }

            else
            {
              unint64_t v16 = 0xE700000000000000LL;
              uint64_t v17 = 0x65636976726573LL;
            }

            uint64_t v18 = v31;
            sub_1000225EC((uint64_t)v27, &qword_1004095A8);
            uint64_t result = swift_isUniquelyReferenced_nonNull_native(v7);
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_1000A7604(0LL, v7[2] + 1LL, 1, v7);
              int64_t v7 = (void *)result;
            }

            unint64_t v20 = v7[2];
            unint64_t v19 = v7[3];
            if (v20 >= v19 >> 1)
            {
              uint64_t result = (uint64_t)sub_1000A7604((void *)(v19 > 1), v20 + 1, 1, v7);
              int64_t v7 = (void *)result;
            }

            _OWORD v7[2] = v20 + 1;
            uint64_t v21 = &v7[3 * v20];
            void v21[4] = v17;
            v21[5]  = v16;
            v21[6]  = v18;
            uint64_t v1 = v22;
            int64_t v8 = &type metadata for Any[8];
            if (!v4) {
              goto LABEL_7;
            }
          }

          else
          {
            v25[0]  = v27[0];
            sub_100002AE4((uint64_t)v27 + 8, (uint64_t)v26);
            sub_1000225EC((uint64_t)v25, &qword_1004095A8);
            uint64_t result = sub_1000225EC((uint64_t)v27, &qword_1004095A8);
            if (!v4) {
              goto LABEL_7;
            }
          }

uint64_t sub_100145720(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v26 = a1 + 64;
  uint64_t v2 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(v2 + 63) >> 6;
  int64_t v5 = (char *)v32 + 8;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v7 = 0LL;
  int64_t v8 = _swiftEmptyArrayStorage;
  unint64_t v9 = &type metadata for Any[8];
  if (v4) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v12 = v7 + 1;
  if (!__OFADD__(v7, 1LL))
  {
    if (v12 < v27)
    {
      unint64_t v13 = *(void *)(v26 + 8 * v12);
      ++v7;
      if (v13) {
        goto LABEL_22;
      }
      int64_t v7 = v12 + 1;
      if (v12 + 1 >= v27) {
        goto LABEL_36;
      }
      unint64_t v13 = *(void *)(v26 + 8 * v7);
      if (v13) {
        goto LABEL_22;
      }
      int64_t v7 = v12 + 2;
      if (v12 + 2 >= v27) {
        goto LABEL_36;
      }
      unint64_t v13 = *(void *)(v26 + 8 * v7);
      if (v13) {
        goto LABEL_22;
      }
      int64_t v7 = v12 + 3;
      if (v12 + 3 >= v27) {
        goto LABEL_36;
      }
      unint64_t v13 = *(void *)(v26 + 8 * v7);
      if (v13)
      {
LABEL_22:
        unint64_t v4 = (v13 - 1) & v13;
        for (i  = __clz(__rbit64(v13)) + (v7 << 6); ; i  = v10 | (v7 << 6))
        {
          char v15 = *(_BYTE *)(*(void *)(v1 + 48) + i);
          sub_100002AE4(*(void *)(v1 + 56) + 32 * i, (uint64_t)v5);
          LOBYTE(v32[0])  = v15;
          v30[0]  = v32[0];
          v30[1]  = v32[1];
          uint64_t v31 = v33;
          v28[0]  = v15;
          sub_100002AE4((uint64_t)v30 + 8, (uint64_t)v29);
          unint64_t v16 = sub_100021774();
          if (swift_dynamicCast(&v34, v29, v9, v16, 6LL))
          {
            uint64_t v17 = v5;
            uint64_t v18 = v1;
            uint64_t v19 = v34;
            if (LOBYTE(v30[0])) {
              uint64_t v20 = 0x6E6F73616572LL;
            }
            else {
              uint64_t v20 = 0x65636976726573LL;
            }
            if (LOBYTE(v30[0])) {
              unint64_t v21 = 0xE600000000000000LL;
            }
            else {
              unint64_t v21 = 0xE700000000000000LL;
            }
            sub_1000225EC((uint64_t)v30, &qword_1004095A0);
            uint64_t result = swift_isUniquelyReferenced_nonNull_native(v8);
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_1000A7604(0LL, v8[2] + 1LL, 1, v8);
              int64_t v8 = (void *)result;
            }

            unint64_t v23 = v8[2];
            unint64_t v22 = v8[3];
            int64_t v24 = v8;
            if (v23 >= v22 >> 1)
            {
              uint64_t result = (uint64_t)sub_1000A7604((void *)(v22 > 1), v23 + 1, 1, v8);
              int64_t v24 = (void *)result;
            }

            v24[2]  = v23 + 1;
            int64_t v8 = v24;
            uint64_t v25 = &v24[3 * v23];
            v25[4]  = v20;
            v25[5]  = v21;
            v25[6]  = v19;
            uint64_t v1 = v18;
            int64_t v5 = v17;
            unint64_t v9 = &type metadata for Any[8];
            if (!v4) {
              goto LABEL_7;
            }
          }

          else
          {
            v28[0]  = v30[0];
            sub_100002AE4((uint64_t)v30 + 8, (uint64_t)v29);
            sub_1000225EC((uint64_t)v28, &qword_1004095A0);
            uint64_t result = sub_1000225EC((uint64_t)v30, &qword_1004095A0);
            if (!v4) {
              goto LABEL_7;
            }
          }

uint64_t sub_100145A5C(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v24 = a1 + 64;
  uint64_t v2 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v25 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v6 = 0LL;
  uint64_t v26 = _swiftEmptyArrayStorage;
  int64_t v7 = &type metadata for Any[8];
  uint64_t v23 = result;
  if (v4) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v11 = v6 + 1;
  if (!__OFADD__(v6, 1LL))
  {
    if (v11 < v25)
    {
      unint64_t v12 = *(void *)(v24 + 8 * v11);
      ++v6;
      if (v12) {
        goto LABEL_22;
      }
      int64_t v6 = v11 + 1;
      if (v11 + 1 >= v25) {
        goto LABEL_30;
      }
      unint64_t v12 = *(void *)(v24 + 8 * v6);
      if (v12) {
        goto LABEL_22;
      }
      int64_t v6 = v11 + 2;
      if (v11 + 2 >= v25) {
        goto LABEL_30;
      }
      unint64_t v12 = *(void *)(v24 + 8 * v6);
      if (v12) {
        goto LABEL_22;
      }
      int64_t v6 = v11 + 3;
      if (v11 + 3 >= v25) {
        goto LABEL_30;
      }
      unint64_t v12 = *(void *)(v24 + 8 * v6);
      if (v12)
      {
LABEL_22:
        unint64_t v4 = (v12 - 1) & v12;
        for (i  = __clz(__rbit64(v12)) + (v6 << 6); ; i  = v9 | (v6 << 6))
        {
          int64_t v14 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
          uint64_t v16 = *v14;
          uint64_t v15 = v14[1];
          sub_100002AE4(*(void *)(v1 + 56) + 32 * i, (uint64_t)v32);
          *(void *)&__int128 v31 = v16;
          *((void *)&v31 + 1)  = v15;
          __int128 v29 = v31;
          v30[0]  = v32[0];
          v30[1]  = v32[1];
          __int128 v27 = v31;
          sub_100002AE4((uint64_t)v30, (uint64_t)v28);
          unint64_t v17 = sub_100021774();
          swift_bridgeObjectRetain(v15);
          if (swift_dynamicCast(&v33, v28, v7, v17, 6LL))
          {
            uint64_t v18 = v33;
            __int128 v19 = v29;
            __int128 v27 = v29;
            sub_100002AE4((uint64_t)v30, (uint64_t)v28);
            swift_bridgeObjectRetain(*((void *)&v19 + 1));
            sub_100002AC4(v28);
            sub_1000225EC((uint64_t)&v29, &qword_100409590);
            uint64_t result = swift_isUniquelyReferenced_nonNull_native(v26);
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_1000A7604(0LL, v26[2] + 1LL, 1, v26);
              uint64_t v26 = (void *)result;
            }

            unint64_t v21 = v26[2];
            unint64_t v20 = v26[3];
            if (v21 >= v20 >> 1)
            {
              uint64_t result = (uint64_t)sub_1000A7604((void *)(v20 > 1), v21 + 1, 1, v26);
              uint64_t v26 = (void *)result;
            }

            _OWORD v26[2] = v21 + 1;
            unint64_t v22 = &v26[3 * v21];
            *((_OWORD *)v22 + 2)  = v19;
            v22[6]  = v18;
            uint64_t v1 = v23;
            int64_t v7 = &type metadata for Any[8];
            if (!v4) {
              goto LABEL_7;
            }
          }

          else
          {
            uint64_t v8 = *((void *)&v29 + 1);
            __int128 v27 = v29;
            sub_100002AE4((uint64_t)v30, (uint64_t)v28);
            swift_bridgeObjectRetain(v8);
            sub_1000225EC((uint64_t)&v27, &qword_100409590);
            uint64_t result = sub_1000225EC((uint64_t)&v29, &qword_100409590);
            if (!v4) {
              goto LABEL_7;
            }
          }

uint64_t sub_100145D9C(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t v4 = a1;
  uint64_t v30 = a1 + 64;
  uint64_t v5 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v31 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = &v34;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v10 = 0LL;
  uint64_t v32 = _swiftEmptyArrayStorage;
  int64_t v11 = &type metadata for Any[8];
  __int128 v29 = a3;
  if (v7) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v14 = v10 + 1;
  if (!__OFADD__(v10, 1LL))
  {
    if (v14 < v31)
    {
      unint64_t v15 = *(void *)(v30 + 8 * v14);
      ++v10;
      if (v15) {
        goto LABEL_22;
      }
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v31) {
        goto LABEL_30;
      }
      unint64_t v15 = *(void *)(v30 + 8 * v10);
      if (v15) {
        goto LABEL_22;
      }
      int64_t v10 = v14 + 2;
      if (v14 + 2 >= v31) {
        goto LABEL_30;
      }
      unint64_t v15 = *(void *)(v30 + 8 * v10);
      if (v15) {
        goto LABEL_22;
      }
      int64_t v10 = v14 + 3;
      if (v14 + 3 >= v31) {
        goto LABEL_30;
      }
      unint64_t v15 = *(void *)(v30 + 8 * v10);
      if (v15)
      {
LABEL_22:
        unint64_t v7 = (v15 - 1) & v15;
        for (i  = __clz(__rbit64(v15)) + (v10 << 6); ; i  = v12 | (v10 << 6))
        {
          char v17 = *(_BYTE *)(*(void *)(v4 + 48) + i);
          sub_100002AE4(*(void *)(v4 + 56) + 32 * i, (uint64_t)v37 + 8);
          LOBYTE(v37[0])  = v17;
          v35[0]  = v37[0];
          v35[1]  = v37[1];
          uint64_t v36 = v38;
          v33[0]  = v17;
          sub_100002AE4((uint64_t)v35 + 8, (uint64_t)v8);
          unint64_t v18 = sub_100021774();
          if (swift_dynamicCast(&v39, v8, v11, v18, 6LL))
          {
            __int128 v19 = v8;
            uint64_t v20 = v4;
            uint64_t v21 = v39;
            uint64_t v22 = a2(LOBYTE(v35[0]));
            uint64_t v24 = v23;
            sub_1000225EC((uint64_t)v35, a3);
            uint64_t result = swift_isUniquelyReferenced_nonNull_native(v32);
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_1000A7604(0LL, v32[2] + 1LL, 1, v32);
              uint64_t v32 = (void *)result;
            }

            unint64_t v26 = v32[2];
            unint64_t v25 = v32[3];
            if (v26 >= v25 >> 1)
            {
              uint64_t result = (uint64_t)sub_1000A7604((void *)(v25 > 1), v26 + 1, 1, v32);
              uint64_t v32 = (void *)result;
            }

            v32[2]  = v26 + 1;
            __int128 v27 = &v32[3 * v26];
            v27[4]  = v22;
            v27[5]  = v24;
            v27[6]  = v21;
            a3  = v29;
            uint64_t v4 = v20;
            uint64_t v8 = v19;
            int64_t v11 = &type metadata for Any[8];
            if (!v7) {
              goto LABEL_7;
            }
          }

          else
          {
            v33[0]  = v35[0];
            sub_100002AE4((uint64_t)v35 + 8, (uint64_t)v8);
            sub_1000225EC((uint64_t)v33, a3);
            uint64_t result = sub_1000225EC((uint64_t)v35, a3);
            if (!v7) {
              goto LABEL_7;
            }
          }

uint64_t sub_1001460C4@<X0>( char a1@<W0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, int a11, __int16 a12, __int128 a13, __int128 a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, __int16 a27, char a28, char a29, char a30, char a31, char a32, char a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41)
{
  *(_BYTE *)a9  = a1;
  *(_WORD *)(a9 + 1)  = a2;
  *(void *)(a9 + 8)  = a3;
  *(void *)(a9 + 16)  = a4;
  *(void *)(a9 + 24)  = a5;
  *(_DWORD *)(a9 + 32)  = a6;
  *(_WORD *)(a9 + 36)  = WORD2(a6);
  *(_DWORD *)(a9 + 40)  = a7;
  *(_WORD *)(a9 + 44)  = WORD2(a7);
  *(_DWORD *)(a9 + 48)  = a8;
  *(_WORD *)(a9 + 52)  = WORD2(a8);
  *(_DWORD *)(a9 + 56)  = a11;
  *(_WORD *)(a9 + 60)  = a12;
  *(void *)(a9 + 96)  = a15;
  *(void *)(a9 + 104)  = a16;
  *(_BYTE *)(a9 + 112)  = a17;
  *(_OWORD *)(a9 + 64)  = a13;
  *(_OWORD *)(a9 + 80)  = a14;
  uint64_t v43 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  uint64_t v44 = a9 + v43[20];
  uint64_t v45 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 32LL))(v44, a18, v45);
  *(void *)(a9 + v43[21])  = a19;
  *(void *)(a9 + v43[22])  = a20;
  *(void *)(a9 + v43[23])  = a21;
  *(void *)(a9 + v43[24])  = a22;
  *(void *)(a9 + v43[25])  = a23;
  *(void *)(a9 + v43[26])  = a24;
  *(void *)(a9 + v43[27])  = a25;
  *(void *)(a9 + v43[28])  = a26;
  *(_WORD *)(a9 + v43[29])  = a27;
  *(_BYTE *)(a9 + v43[30])  = a28;
  *(_BYTE *)(a9 + v43[31])  = a29;
  *(_BYTE *)(a9 + v43[32])  = a30;
  *(_BYTE *)(a9 + v43[33])  = a31;
  *(_BYTE *)(a9 + v43[34])  = a32;
  *(_BYTE *)(a9 + v43[35])  = a33;
  uint64_t v47 = (void *)(a9 + v43[36]);
  *uint64_t v47 = a34;
  v47[1]  = a35;
  *(_BYTE *)(a9 + v43[37])  = a36;
  *(void *)(a9 + v43[38])  = a37;
  *(void *)(a9 + v43[39])  = a38;
  *(void *)(a9 + v43[40])  = a39;
  *(void *)(a9 + v43[41])  = a40;
  *(void *)(a9 + v43[42])  = a41;
  *(double *)(a9 + v43[43])  = a10;
  return result;
}

BOOL static AWDLStatistics.LowLatencyStatistics.__derived_struct_equals(_:_:)( unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0LL);
  uint64_t v5 = &a1[*(int *)(v4 + 20)];
  __int128 v6 = *((_OWORD *)v5 + 11);
  v33[10]  = *((_OWORD *)v5 + 10);
  v33[11]  = v6;
  v33[12]  = *((_OWORD *)v5 + 12);
  uint64_t v34 = *((void *)v5 + 26);
  __int128 v7 = *((_OWORD *)v5 + 7);
  v33[6]  = *((_OWORD *)v5 + 6);
  v33[7]  = v7;
  __int128 v8 = *((_OWORD *)v5 + 9);
  v33[8]  = *((_OWORD *)v5 + 8);
  v33[9]  = v8;
  __int128 v9 = *((_OWORD *)v5 + 3);
  v33[2]  = *((_OWORD *)v5 + 2);
  v33[3]  = v9;
  __int128 v10 = *((_OWORD *)v5 + 5);
  v33[4]  = *((_OWORD *)v5 + 4);
  v33[5]  = v10;
  __int128 v11 = *((_OWORD *)v5 + 1);
  v33[0]  = *(_OWORD *)v5;
  v33[1]  = v11;
  __int128 v13 = *(_OWORD *)(v5 + 264);
  __int128 v12 = *(_OWORD *)(v5 + 280);
  v31[2]  = *(_OWORD *)(v5 + 248);
  v31[3]  = v13;
  __int128 v14 = *(_OWORD *)(v5 + 232);
  __int128 v15 = *(_OWORD *)(v5 + 344);
  v31[7]  = *(_OWORD *)(v5 + 328);
  v31[8]  = v15;
  __int128 v16 = *(_OWORD *)(v5 + 312);
  v31[5]  = *(_OWORD *)(v5 + 296);
  v31[6]  = v16;
  v31[4]  = v12;
  v31[0]  = *(_OWORD *)(v5 + 216);
  v31[1]  = v14;
  char v17 = &a2[*(int *)(v4 + 20)];
  __int128 v18 = *((_OWORD *)v17 + 11);
  v35[10]  = *((_OWORD *)v17 + 10);
  v35[11]  = v18;
  v35[12]  = *((_OWORD *)v17 + 12);
  uint64_t v36 = *((void *)v17 + 26);
  __int128 v19 = *((_OWORD *)v17 + 7);
  v35[6]  = *((_OWORD *)v17 + 6);
  v35[7]  = v19;
  __int128 v20 = *((_OWORD *)v17 + 9);
  v35[8]  = *((_OWORD *)v17 + 8);
  v35[9]  = v20;
  __int128 v21 = *((_OWORD *)v17 + 3);
  v35[2]  = *((_OWORD *)v17 + 2);
  v35[3]  = v21;
  __int128 v22 = *((_OWORD *)v17 + 5);
  v35[4]  = *((_OWORD *)v17 + 4);
  v35[5]  = v22;
  __int128 v23 = *((_OWORD *)v17 + 1);
  v35[0]  = *(_OWORD *)v17;
  v35[1]  = v23;
  __int128 v24 = *(_OWORD *)(v17 + 296);
  __int128 v25 = *(_OWORD *)(v17 + 328);
  __int128 v26 = *(_OWORD *)(v17 + 344);
  v32[6]  = *(_OWORD *)(v17 + 312);
  v32[7]  = v25;
  v32[8]  = v26;
  __int128 v27 = *(_OWORD *)(v17 + 264);
  __int128 v28 = *(_OWORD *)(v17 + 280);
  v32[2]  = *(_OWORD *)(v17 + 248);
  v32[3]  = v27;
  __int128 v29 = *(_OWORD *)(v17 + 232);
  v32[4]  = v28;
  v32[5]  = v24;
  v32[0]  = *(_OWORD *)(v17 + 216);
  v32[1]  = v29;
  if (!_s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV6CountsV23__derived_struct_equalsySbAI_AItFZ_0( v33,  v35)) {
    return 0LL;
  }
  return _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV10HistogramsV23__derived_struct_equalsySbAI_AItFZ_0( (uint64_t *)v31,  (uint64_t *)v32);
}

uint64_t sub_1001464B0( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, void, uint64_t, uint64_t *))
{
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(a2);
  uint64_t v12 = a2;
  a4(a1, a3, 0LL, isUniquelyReferenced_nonNull_native, &v12);
  uint64_t v10 = v12;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  if (v4) {
    swift_bridgeObjectRelease(v10);
  }
  return v10;
}

void AWDLStatistics.Failure.service.setter(void *a1)
{
  *uint64_t v1 = a1;
}

void AWDLStatistics.ServiceRejection.rejectedService.setter(uint64_t a1)
{
  *(void *)(v1 + 8)  = a1;
}

uint64_t AWDLStatistics.ServiceRejection.eventPayload.getter(uint64_t a1, uint64_t a2)
{
  __int128 v15 = &type metadata for String;
  *(void *)&__int128 v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *((void *)&v14 + 1)  = v3;
  sub_100022594(&v14, v13);
  uint64_t v4 = _swiftEmptyDictionarySingleton;
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10001FA7C(v13, 0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  __int128 v15 = &type metadata for String;
  *(void *)&__int128 v14 = v6;
  *((void *)&v14 + 1)  = v7;
  sub_100022594(&v14, v13);
  char v8 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10001FA7C(v13, 1, v8);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v9 = sub_100144CA8((uint64_t)_swiftEmptyDictionarySingleton);
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    sub_100002274(&qword_100409230);
    uint64_t v4 = (void *)static _DictionaryStorage.allocate(capacity:)(v10);
  }

  *(void *)&__int128 v14 = v4;
  __int128 v11 = (void *)swift_bridgeObjectRetain(v9);
  sub_100153550(v11, 1, &v14);
  swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(v9);
  return v14;
}

uint64_t AWDLStatistics.TrafficRegistrationStart.mySDB.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return HIWORD(a3) & 1;
}

uint64_t AWDLStatistics.TrafficRegistrationStart.mySDB.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 22)  = result;
  return result;
}

uint64_t AWDLStatistics.TrafficRegistrationStart.peerSDB.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return HIBYTE(a3) & 1;
}

uint64_t AWDLStatistics.TrafficRegistrationStart.peerSDB.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 23)  = result;
  return result;
}

uint64_t (*AWDLStatistics.TrafficRegistrationStart.peerSDB.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.TrafficRegistrationStart.sameSSID.getter( uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  return HIBYTE(a4);
}

uint64_t AWDLStatistics.TrafficRegistrationStart.sameSSID.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 25)  = result;
  return result;
}

uint64_t (*AWDLStatistics.TrafficRegistrationStart.sameSSID.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

  ;
}

uint64_t AWDLStatistics.TrafficRegistrationStart.eventPayload.getter( uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  int v7 = a4;
  __int128 v25 = &type metadata for String;
  *(void *)&__int128 v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *((void *)&v24 + 1)  = v8;
  sub_100022594(&v24, v23);
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10001FB94(v23, 0LL, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  __int128 v25 = &type metadata for UInt32;
  if ((a2 & 0xFF00000000LL) == 0x300000000LL) {
    int v10 = 0;
  }
  else {
    int v10 = a2;
  }
  LODWORD(v24)  = v10;
  sub_100022594(&v24, v23);
  char v11 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10001FB94(v23, 1LL, v11);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  __int128 v25 = &type metadata for UInt32;
  if ((a3 & 0xFF00000000LL) == 0x300000000LL) {
    int v12 = 0;
  }
  else {
    int v12 = a3;
  }
  LODWORD(v24)  = v12;
  sub_100022594(&v24, v23);
  char v13 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10001FB94(v23, 2LL, v13);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  __int128 v25 = &type metadata for Bool;
  LOBYTE(v24)  = BYTE6(a3) & 1;
  sub_100022594(&v24, v23);
  char v14 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10001FB94(v23, 3LL, v14);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  __int128 v25 = &type metadata for Bool;
  LOBYTE(v24)  = HIBYTE(a3) & 1;
  sub_100022594(&v24, v23);
  char v15 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10001FB94(v23, 4LL, v15);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  if (v7 != 2)
  {
    __int128 v25 = &type metadata for Bool;
    LOBYTE(v24)  = v7 & 1;
    sub_100022594(&v24, v23);
    char v16 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10001FB94(v23, 5LL, v16);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  if ((a4 & 0xFF00) != 0x200)
  {
    __int128 v25 = &type metadata for Bool;
    LOBYTE(v24)  = HIBYTE(a4) & 1;
    sub_100022594(&v24, v23);
    char v17 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10001FB94(v23, 6LL, v17);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  __int128 v18 = sub_100145000((uint64_t)_swiftEmptyDictionarySingleton);
  uint64_t v19 = v18[2];
  if (v19)
  {
    sub_100002274(&qword_100409230);
    __int128 v20 = (void *)static _DictionaryStorage.allocate(capacity:)(v19);
  }

  else
  {
    __int128 v20 = _swiftEmptyDictionarySingleton;
  }

  *(void *)&__int128 v24 = v20;
  __int128 v21 = (void *)swift_bridgeObjectRetain(v18);
  sub_100153550(v21, 1, &v24);
  swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(v18);
  return v24;
}

id AWDLStatistics.TrafficRegistrationStop.service.getter()
{
  return *v0;
}

uint64_t AWDLStatistics.TrafficRegistrationStop.isInitiator.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t AWDLStatistics.Failure.reason.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 8)  = result;
  return result;
}

uint64_t AWDLStatistics.TrafficRegistrationStop.duration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLStatistics.TrafficRegistrationStop(0LL) + 24);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t AWDLStatistics.TrafficRegistrationStop.duration.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLStatistics.TrafficRegistrationStop(0LL) + 24);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*AWDLStatistics.TrafficRegistrationStop.duration.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.TrafficRegistrationStop.init(service:isInitiator:duration:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4  = a1;
  *(_BYTE *)(a4 + 8)  = a2;
  uint64_t v5 = a4 + *(int *)(type metadata accessor for AWDLStatistics.TrafficRegistrationStop(0LL) + 24);
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(v5, a3, v6);
}

uint64_t AWDLStatistics.TrafficRegistrationStop.eventPayload.getter()
{
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)v0);
  char v15 = &type metadata for String;
  *(void *)&__int128 v14 = v1;
  *((void *)&v14 + 1)  = v2;
  sub_100022594(&v14, v13);
  uint64_t v3 = _swiftEmptyDictionarySingleton;
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10001FCAC(v13, 0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v5 = *(_BYTE *)(v0 + 8);
  char v15 = &type metadata for Bool;
  LOBYTE(v14)  = v5;
  sub_100022594(&v14, v13);
  char v6 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10001FCAC(v13, 1, v6);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  type metadata accessor for AWDLStatistics.TrafficRegistrationStop(0LL);
  uint64_t v7 = DispatchTimeInterval.rawSeconds.getter();
  char v15 = &type metadata for Int;
  *(void *)&__int128 v14 = v7;
  sub_100022594(&v14, v13);
  char v8 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10001FCAC(v13, 2, v8);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v9 = sub_1001453D0((uint64_t)_swiftEmptyDictionarySingleton);
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    sub_100002274(&qword_100409230);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v10);
  }

  *(void *)&__int128 v14 = v3;
  char v11 = (void *)swift_bridgeObjectRetain(v9);
  sub_100153550(v11, 1, &v14);
  swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(v9);
  return v14;
}

CoreP2P::AWDLStatistics::Failure::Reason_optional __swiftcall AWDLStatistics.Failure.Reason.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue  = &off_1003D5ED0;
  return (CoreP2P::AWDLStatistics::Failure::Reason_optional)sub_100154C18(rawValue, v1);
}

uint64_t AWDLStatistics.Failure.Reason.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x526E496B63757473LL;
  }
  if (a1 == 1) {
    return 0x536E496B63757473LL;
  }
  return 0xD000000000000014LL;
}

uint64_t sub_100146DCC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10002A994(*a1, *a2);
}

unint64_t sub_100146DD8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue  = &off_1003D5ED0;
  unint64_t result = sub_100154C18(*a1, v3);
  *a2  = result;
  return result;
}

void sub_100146E0C(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xEC0000006F727465LL;
  unint64_t v4 = 0xEB000000006E6163LL;
  unint64_t v5 = 0x536E496B63757473LL;
  if (v2 != 1)
  {
    unint64_t v5 = 0xD000000000000014LL;
    unint64_t v4 = 0x8000000100361570LL;
  }

  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x526E496B63757473LL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1  = v7;
  a1[1]  = v3;
}

Swift::Int sub_100146E80()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v7, 0LL);
  unint64_t v2 = 0xEB000000006E6163LL;
  unint64_t v3 = 0x536E496B63757473LL;
  if (v1 != 1)
  {
    unint64_t v3 = 0xD000000000000014LL;
    unint64_t v2 = 0x8000000100361570LL;
  }

  if (v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x526E496B63757473LL;
  }
  if (v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xEC0000006F727465LL;
  }
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_100146F34(uint64_t a1)
{
  unint64_t v2 = 0xEB000000006E6163LL;
  unint64_t v3 = 0x536E496B63757473LL;
  if (*v1 != 1)
  {
    unint64_t v3 = 0xD000000000000014LL;
    unint64_t v2 = 0x8000000100361570LL;
  }

  if (*v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x526E496B63757473LL;
  }
  if (*v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xEC0000006F727465LL;
  }
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100146FC4(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  unint64_t v3 = 0xEB000000006E6163LL;
  unint64_t v4 = 0x536E496B63757473LL;
  if (v2 != 1)
  {
    unint64_t v4 = 0xD000000000000014LL;
    unint64_t v3 = 0x8000000100361570LL;
  }

  if (v2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0x526E496B63757473LL;
  }
  if (v2) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = 0xEC0000006F727465LL;
  }
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

uint64_t AWDLStatistics.Failure.eventPayload.getter(uint64_t a1, char a2)
{
  char v15 = &type metadata for String;
  *(void *)&__int128 v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *((void *)&v14 + 1)  = v3;
  sub_100022594(&v14, v13);
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10001FDC4(v13, 0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  if (a2)
  {
    if (a2 == 1)
    {
      unint64_t v5 = 0xEB000000006E6163LL;
      unint64_t v6 = 0x536E496B63757473LL;
    }

    else
    {
      unint64_t v5 = 0x8000000100361570LL;
      unint64_t v6 = 0xD000000000000014LL;
    }
  }

  else
  {
    unint64_t v5 = 0xEC0000006F727465LL;
    unint64_t v6 = 0x526E496B63757473LL;
  }

  char v15 = &type metadata for String;
  *(void *)&__int128 v14 = v6;
  *((void *)&v14 + 1)  = v5;
  sub_100022594(&v14, v13);
  char v7 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10001FDC4(v13, 1, v7);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v8 = sub_100145720((uint64_t)_swiftEmptyDictionarySingleton);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    sub_100002274(&qword_100409230);
    uint64_t v10 = (void *)static _DictionaryStorage.allocate(capacity:)(v9);
  }

  else
  {
    uint64_t v10 = _swiftEmptyDictionarySingleton;
  }

  *(void *)&__int128 v14 = v10;
  char v11 = (void *)swift_bridgeObjectRetain(v8);
  sub_100153550(v11, 1, &v14);
  swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(v8);
  return v14;
}

uint64_t AWDLStatistics.Failure.hash(into:)(uint64_t a1, void *a2, char a3)
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v8 = v7;
  id v9 = a2;
  String.hash(into:)(a1, v6, v8);

  swift_bridgeObjectRelease(v8);
  if (a3)
  {
    if (a3 == 1) {
      unint64_t v10 = 0x536E496B63757473LL;
    }
    else {
      unint64_t v10 = 0xD000000000000014LL;
    }
    if (a3 == 1) {
      unint64_t v11 = 0xEB000000006E6163LL;
    }
    else {
      unint64_t v11 = 0x8000000100361570LL;
    }
  }

  else
  {
    unint64_t v11 = 0xEC0000006F727465LL;
    unint64_t v10 = 0x526E496B63757473LL;
  }

  String.hash(into:)(a1, v10, v11);
  return swift_bridgeObjectRelease(v11);
}

Swift::Int AWDLStatistics.Failure.hashValue.getter(void *a1, char a2)
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v6 = v5;
  id v7 = a1;
  String.hash(into:)(v11, v4, v6);

  swift_bridgeObjectRelease(v6);
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v8 = 0x536E496B63757473LL;
    }
    else {
      unint64_t v8 = 0xD000000000000014LL;
    }
    if (a2 == 1) {
      unint64_t v9 = 0xEB000000006E6163LL;
    }
    else {
      unint64_t v9 = 0x8000000100361570LL;
    }
  }

  else
  {
    unint64_t v9 = 0xEC0000006F727465LL;
    unint64_t v8 = 0x526E496B63757473LL;
  }

  String.hash(into:)(v11, v8, v9);
  swift_bridgeObjectRelease(v9);
  return Hasher._finalize()();
}

Swift::Int sub_100147400()
{
  return AWDLStatistics.Failure.hashValue.getter(*(void **)v0, *(_BYTE *)(v0 + 8));
}

uint64_t sub_10014740C(uint64_t a1)
{
  return AWDLStatistics.Failure.hash(into:)(a1, *(void **)v1, *(_BYTE *)(v1 + 8));
}

Swift::Int sub_100147418(uint64_t a1)
{
  int v2 = *(void **)v1;
  char v3 = *(_BYTE *)(v1 + 8);
  Hasher.init(_seed:)(v5, a1);
  AWDLStatistics.Failure.hash(into:)((uint64_t)v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_100147460(uint64_t a1, uint64_t a2)
{
  return _s7CoreP2P14AWDLStatisticsO7FailureV23__derived_struct_equalsySbAE_AEtFZ_0( *(void *)a1,  *(_BYTE *)(a1 + 8),  *(void *)a2,  *(_BYTE *)(a2 + 8));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.countryCode.getter()
{
  return *(unsigned __int16 *)(v0 + 1);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.countryCode.setter(uint64_t result)
{
  *(_WORD *)(v1 + 1)  = result;
  return result;
}

uint64_t InfraStatistics.beOutputBytes.getter()
{
  return *(void *)(v0 + 8);
}

unint64_t AWDLStatistics.LowLatencyStatistics.Configuration.selfPreSessionStartInfra.getter()
{
  return *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int16 *)(v0 + 36) << 32);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.selfPreSessionStartInfra.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 32)  = result;
  *(_WORD *)(v1 + 36)  = WORD2(result);
  return result;
}

unint64_t AWDLStatistics.LowLatencyStatistics.Configuration.selfPostSessionStartInfra.getter()
{
  return *(unsigned int *)(v0 + 40) | ((unint64_t)*(unsigned __int16 *)(v0 + 44) << 32);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.selfPostSessionStartInfra.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 40)  = result;
  *(_WORD *)(v1 + 44)  = WORD2(result);
  return result;
}

unint64_t AWDLStatistics.LowLatencyStatistics.Configuration.peerPreSessionStartInfra.getter()
{
  return *(unsigned int *)(v0 + 48) | ((unint64_t)*(unsigned __int16 *)(v0 + 52) << 32);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.peerPreSessionStartInfra.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 48)  = result;
  *(_WORD *)(v1 + 52)  = WORD2(result);
  return result;
}

unint64_t AWDLStatistics.LowLatencyStatistics.Configuration.peerPostSessionStartInfra.getter()
{
  return *(unsigned int *)(v0 + 56) | ((unint64_t)*(unsigned __int16 *)(v0 + 60) << 32);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.peerPostSessionStartInfra.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 56)  = result;
  *(_WORD *)(v1 + 60)  = WORD2(result);
  return result;
}

uint64_t InfraStatistics.ctlOutputPackets.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t InfraStatistics.ctlOutputPackets.setter(uint64_t result)
{
  *(void *)(v1 + 64)  = result;
  return result;
}

uint64_t InfraStatistics.inputPackets.getter()
{
  return *(void *)(v0 + 72);
}

uint64_t InfraStatistics.inputPackets.setter(uint64_t result)
{
  *(void *)(v1 + 72)  = result;
  return result;
}

uint64_t InfraStatistics.inputBytes.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t InfraStatistics.inputBytes.setter(uint64_t result)
{
  *(void *)(v1 + 80)  = result;
  return result;
}

uint64_t InfraStatistics.linkRate.getter()
{
  return *(void *)(v0 + 88);
}

uint64_t InfraStatistics.linkRate.setter(uint64_t result)
{
  *(void *)(v1 + 88)  = result;
  return result;
}

uint64_t InfraStatistics.effectiveLinkRate.getter()
{
  return *(void *)(v0 + 96);
}

uint64_t InfraStatistics.effectiveLinkRate.setter(uint64_t result)
{
  *(void *)(v1 + 96)  = result;
  return result;
}

uint64_t (*InfraStatistics.effectiveLinkRate.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t InfraStatistics.effectiveDataRate.getter()
{
  return *(void *)(v0 + 104);
}

uint64_t InfraStatistics.effectiveDataRate.setter(uint64_t result)
{
  *(void *)(v1 + 104)  = result;
  return result;
}

uint64_t (*InfraStatistics.effectiveDataRate.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.didLimitTxToMinRate.getter()
{
  return *(unsigned __int8 *)(v0 + 112);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.didLimitTxToMinRate.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 112)  = result;
  return result;
}

uint64_t (*IEEE80211Frame.Management.Authentication.PASNResponse.vendorSpecific.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.sessionDuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL) + 80);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.sessionDuration.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL) + 80);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.sessionDuration.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.idleSlotsForScanCount.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL) + 84));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.idleSlotsForScanCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  *(void *)(v1 + *(int *)(result + 84))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.idleSlotsForScanCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.syncErrorsCount.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL) + 88));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.syncErrorsCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  *(void *)(v1 + *(int *)(result + 8sub_100058090(v1, (void *)(v0 + 8)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.syncErrorsCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.channelSequenceMismatchCount.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL) + 92));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.channelSequenceMismatchCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  *(void *)(v1 + *(int *)(result + 9DNSRecords.BrowseHost.keyData.getter(*v0, *((void *)v0 + 1), *((void *)v0 + 2)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.channelSequenceMismatchCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.preferred5GChannelCount.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL) + 96));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.preferred5GChannelCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  *(void *)(v1 + *(int *)(result + 96))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.preferred5GChannelCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.preferred2GChannelCount.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL) + 100));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.preferred2GChannelCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  *(void *)(v1 + *(int *)(result + 100))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.preferred2GChannelCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.parentNodeChangeCount.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL) + 104));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.parentNodeChangeCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  *(void *)(v1 + *(int *)(result + 104))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.parentNodeChangeCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.rootNodeChangeCount.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL) + 108));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.rootNodeChangeCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  *(void *)(v1 + *(int *)(result + 10sub_100058090(v1, (void *)(v0 + 8)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.rootNodeChangeCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.watchDogOrChipTrapCount.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL) + 112));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.watchDogOrChipTrapCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  *(void *)(v1 + *(int *)(result + 11DNSRecords.BrowseHost.keyData.getter(*v0, *((void *)v0 + 1), *((void *)v0 + 2)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.watchDogOrChipTrapCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.activeServicesBitMap.getter()
{
  return *(unsigned __int16 *)(v0
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.activeServicesBitMap.setter(__int16 a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  *(_WORD *)(v1 + *(int *)(result + 1swift_release(*(void *)(v0 + 16)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.activeServicesBitMap.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.isRemoteCameraActive.getter()
{
  return *(unsigned __int8 *)(v0
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.isRemoteCameraActive.setter(char a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 120))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.isRemoteCameraActive.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.isRemoteScreenActive.getter()
{
  return *(unsigned __int8 *)(v0
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.isRemoteScreenActive.setter(char a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 1swift_release(*(void *)(v0 + 24)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.isRemoteScreenActive.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.isDFSProxyActive.getter()
{
  return *(unsigned __int8 *)(v0
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.isDFSProxyActive.setter(char a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 12sub_100058090(v1, (void *)(v0 + 8)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.isDFSProxyActive.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.isHomeTheaterActive.getter()
{
  return *(unsigned __int8 *)(v0
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.isHomeTheaterActive.setter(char a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 1swift_release(*(void *)(v0 + 32)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.isHomeTheaterActive.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.has2GInChannelSequence.getter()
{
  return *(unsigned __int8 *)(v0
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.has2GInChannelSequence.setter(char a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 136))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.has2GInChannelSequence.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.sidecarServiceTypesBitMap.getter()
{
  return *(unsigned __int8 *)(v0
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.sidecarServiceTypesBitMap.setter(char a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 1swift_bridgeObjectRelease(*(void *)(v0 + 40)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.sidecarServiceTypesBitMap.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.rtgID.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL) + 144));
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.rtgID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL) + 144));
  uint64_t result = swift_bridgeObjectRelease(v5[1]);
  *uint64_t v5 = a1;
  v5[1]  = a2;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.rtgID.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.sameSSID.getter()
{
  return *(unsigned __int8 *)(v0
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.sameSSID.setter(char a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 14sub_100058090(v1, (void *)(v0 + 8)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.sameSSID.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountRSSI.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL) + 152));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountRSSI.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  *(void *)(v1 + *(int *)(result + 15DNSRecords.BrowseHost.keyData.getter(*v0, *((void *)v0 + 1), *((void *)v0 + 2)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountRSSI.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountRefs.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL) + 156));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountRefs.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  *(void *)(v1 + *(int *)(result + 156))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountRefs.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountDiffSSID.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL) + 160));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountDiffSSID.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  *(void *)(v1 + *(int *)(result + 160))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountDiffSSID.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountChan.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL) + 164));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountChan.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  *(void *)(v1 + *(int *)(result + 164))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountChan.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.reducedAWDLBandwidth.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL) + 168));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.reducedAWDLBandwidth.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  *(void *)(v1 + *(int *)(result + 16sub_100058090(v1, (void *)(v0 + 8)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.reducedAWDLBandwidth.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

double AWDLStatistics.LowLatencyStatistics.Configuration.reducedBandwidthPercentSession.getter()
{
  return *(double *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL) + 172));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.reducedBandwidthPercentSession.setter(double a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  *(double *)(v1 + *(int *)(result + 17DNSRecords.BrowseHost.keyData.getter(*v0, *((void *)v0 + 1), *((void *)v0 + 2)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.reducedBandwidthPercentSession.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

void AWDLStatistics.LowLatencyStatistics.Configuration.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (Swift::UInt64 *)((char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Hasher._combine(_:)(*(_BYTE *)v2);
  Swift::UInt8 v8 = *(_BYTE *)(v2 + 2);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 1));
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(*(void *)(v2 + 8));
  Hasher._combine(_:)(*(void *)(v2 + 16));
  Hasher._combine(_:)(*(void *)(v2 + 24));
  unint64_t v9 = *(unsigned int *)(v2 + 32) | ((unint64_t)*(unsigned __int16 *)(v2 + 36) << 32);
  if ((v9 & 0xFF00000000LL) == 0x300000000LL)
  {
    Swift::UInt8 v10 = 0;
LABEL_3:
    Hasher._combine(_:)(v10);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
    Hasher._combine(_:)(0x801004u >> ((v9 >> 29) & 0xF8));
    switch(v9 >> 40)
    {
      case 2uLL:
        Hasher._combine(_:)(0LL);
        break;
      case 3uLL:
        Hasher._combine(_:)(1uLL);
        break;
      case 4uLL:
        Hasher._combine(_:)(3uLL);
        break;
      case 5uLL:
        Hasher._combine(_:)(4uLL);
        break;
      case 6uLL:
        Hasher._combine(_:)(5uLL);
        break;
      default:
        Hasher._combine(_:)(2uLL);
        Swift::UInt8 v10 = BYTE5(v9) & 1;
        goto LABEL_3;
    }
  }

  unint64_t v11 = *(unsigned int *)(v2 + 40) | ((unint64_t)*(unsigned __int16 *)(v2 + 44) << 32);
  if ((v11 & 0xFF00000000LL) == 0x300000000LL)
  {
    Swift::UInt8 v12 = 0;
LABEL_6:
    Hasher._combine(_:)(v12);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
    Hasher._combine(_:)(0x801004u >> ((v11 >> 29) & 0xF8));
    switch(v11 >> 40)
    {
      case 2uLL:
        Hasher._combine(_:)(0LL);
        break;
      case 3uLL:
        Hasher._combine(_:)(1uLL);
        break;
      case 4uLL:
        Hasher._combine(_:)(3uLL);
        break;
      case 5uLL:
        Hasher._combine(_:)(4uLL);
        break;
      case 6uLL:
        Hasher._combine(_:)(5uLL);
        break;
      default:
        Hasher._combine(_:)(2uLL);
        Swift::UInt8 v12 = BYTE5(v11) & 1;
        goto LABEL_6;
    }
  }

  unint64_t v13 = *(unsigned int *)(v2 + 48) | ((unint64_t)*(unsigned __int16 *)(v2 + 52) << 32);
  if ((v13 & 0xFF00000000LL) == 0x300000000LL)
  {
    Swift::UInt8 v14 = 0;
LABEL_9:
    Hasher._combine(_:)(v14);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v13);
    Hasher._combine(_:)(0x801004u >> ((v13 >> 29) & 0xF8));
    switch(v13 >> 40)
    {
      case 2uLL:
        Hasher._combine(_:)(0LL);
        break;
      case 3uLL:
        Hasher._combine(_:)(1uLL);
        break;
      case 4uLL:
        Hasher._combine(_:)(3uLL);
        break;
      case 5uLL:
        Hasher._combine(_:)(4uLL);
        break;
      case 6uLL:
        Hasher._combine(_:)(5uLL);
        break;
      default:
        Hasher._combine(_:)(2uLL);
        Swift::UInt8 v14 = BYTE5(v13) & 1;
        goto LABEL_9;
    }
  }

  unint64_t v15 = *(unsigned int *)(v2 + 56) | ((unint64_t)*(unsigned __int16 *)(v2 + 60) << 32);
  if ((v15 & 0xFF00000000LL) == 0x300000000LL)
  {
    Swift::UInt8 v16 = 0;
LABEL_12:
    Hasher._combine(_:)(v16);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
    Hasher._combine(_:)(0x801004u >> ((v15 >> 29) & 0xF8));
    switch(v15 >> 40)
    {
      case 2uLL:
        Hasher._combine(_:)(0LL);
        break;
      case 3uLL:
        Hasher._combine(_:)(1uLL);
        break;
      case 4uLL:
        Hasher._combine(_:)(3uLL);
        break;
      case 5uLL:
        Hasher._combine(_:)(4uLL);
        break;
      case 6uLL:
        Hasher._combine(_:)(5uLL);
        break;
      default:
        Hasher._combine(_:)(2uLL);
        Swift::UInt8 v16 = BYTE5(v15) & 1;
        goto LABEL_12;
    }
  }

  Hasher._combine(_:)(*(void *)(v2 + 64));
  Hasher._combine(_:)(*(void *)(v2 + 72));
  Hasher._combine(_:)(*(void *)(v2 + 80));
  Hasher._combine(_:)(*(void *)(v2 + 88));
  Hasher._combine(_:)(*(void *)(v2 + 96));
  Hasher._combine(_:)(*(void *)(v2 + 104));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 112));
  char v17 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  (*(void (**)(Swift::UInt64 *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + v17[20], v4);
  int v18 = (*(uint64_t (**)(Swift::UInt64 *, uint64_t))(v5 + 88))(v7, v4);
  if (v18 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v5 + 96))(v7, v4);
    int64_t v19 = *v7;
    uint64_t v20 = 1000000000LL;
LABEL_27:
    Swift::UInt64 v21 = v19 * v20;
    BOOL v22 = (unsigned __int128)(v19 * (__int128)v20) >> 64 != (v19 * v20) >> 63;
    BOOL v23 = v19 <= 0;
    unint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
    if (v23) {
      unint64_t v24 = 0x8000000000000000LL;
    }
    if (v22) {
      Swift::UInt64 v25 = v24;
    }
    else {
      Swift::UInt64 v25 = v21;
    }
    goto LABEL_32;
  }

  if (v18 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v5 + 96))(v7, v4);
    int64_t v19 = *v7;
    uint64_t v20 = 1000000LL;
    goto LABEL_27;
  }

  if (v18 == enum case for DispatchTimeInterval.microseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v5 + 96))(v7, v4);
    int64_t v19 = *v7;
    uint64_t v20 = 1000LL;
    goto LABEL_27;
  }

  if (v18 == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v5 + 96))(v7, v4);
    Swift::UInt64 v25 = *v7;
  }

  else
  {
    if (v18 != enum case for DispatchTimeInterval.never(_:)) {
      (*(void (**)(Swift::UInt64 *, uint64_t))(v5 + 8))(v7, v4);
    }
    Swift::UInt64 v25 = 0x7FFFFFFFFFFFFFFFLL;
  }

Swift::Int AWDLStatistics.LowLatencyStatistics.Configuration.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_100148798(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t InfraStatistics.beOutputPackets.getter()
{
  return *(void *)v0;
}

uint64_t InfraStatistics.voOutputBytes.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t InfraStatistics.voOutputBytes.setter(uint64_t result)
{
  *(void *)(v1 + 40)  = result;
  return result;
}

uint64_t InfraStatistics.viOutputPackets.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t InfraStatistics.viOutputPackets.setter(uint64_t result)
{
  *(void *)(v1 + 48)  = result;
  return result;
}

uint64_t InfraStatistics.viOutputBytes.getter()
{
  return *(void *)(v0 + 56);
}

uint64_t InfraStatistics.viOutputBytes.setter(uint64_t result)
{
  *(void *)(v1 + 56)  = result;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txForceLifetimeExpiredCount.getter()
{
  return *(void *)(v0 + 112);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txForceLifetimeExpiredCount.setter( uint64_t result)
{
  *(void *)(v1 + 112)  = result;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txErrorCount.getter()
{
  return *(void *)(v0 + 120);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txErrorCount.setter(uint64_t result)
{
  *(void *)(v1 + 120)  = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txErrorCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOn5GCount.getter()
{
  return *(void *)(v0 + 128);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOn5GCount.setter(uint64_t result)
{
  *(void *)(v1 + 128)  = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOn5GCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOn2GCount.getter()
{
  return *(void *)(v0 + 136);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOn2GCount.setter(uint64_t result)
{
  *(void *)(v1 + 136)  = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOn2GCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOverRideOn5GCount.getter()
{
  return *(void *)(v0 + 144);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOverRideOn5GCount.setter(uint64_t result)
{
  *(void *)(v1 + 144)  = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOverRideOn5GCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txNACount.getter()
{
  return *(void *)(v0 + 152);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txNACount.setter(uint64_t result)
{
  *(void *)(v1 + 152)  = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txNACount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxPktCount.getter()
{
  return *(void *)(v0 + 160);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxPktCount.setter(uint64_t result)
{
  *(void *)(v1 + 160)  = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxPktCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxOn5GCount.getter()
{
  return *(void *)(v0 + 168);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxOn5GCount.setter(uint64_t result)
{
  *(void *)(v1 + 168)  = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxOn5GCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxOn2GCount.getter()
{
  return *(void *)(v0 + 176);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxOn2GCount.setter(uint64_t result)
{
  *(void *)(v1 + 176)  = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxOn2GCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txRequeueCount.getter()
{
  return *(void *)(v0 + 184);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txRequeueCount.setter(uint64_t result)
{
  *(void *)(v1 + 184)  = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txRequeueCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txRequeueFailCount.getter()
{
  return *(void *)(v0 + 192);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txRequeueFailCount.setter(uint64_t result)
{
  *(void *)(v1 + 192)  = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txRequeueFailCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txSwitchNAVCount.getter()
{
  return *(void *)(v0 + 200);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txSwitchNAVCount.setter(uint64_t result)
{
  *(void *)(v1 + 200)  = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txSwitchNAVCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txSwitchHOFCount.getter()
{
  return *(void *)(v0 + 208);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txSwitchHOFCount.setter(uint64_t result)
{
  *(void *)(v1 + 208)  = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txSwitchHOFCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

void AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)()
{
}

Swift::Int AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_100148AD4(uint64_t a1)
{
  return Hasher._finalize()();
}

BOOL sub_100148B0C(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 176);
  v15[10]  = *(_OWORD *)(a1 + 160);
  v15[11]  = v2;
  v15[12]  = *(_OWORD *)(a1 + 192);
  uint64_t v16 = *(void *)(a1 + 208);
  __int128 v3 = *(_OWORD *)(a1 + 112);
  _BYTE v15[6] = *(_OWORD *)(a1 + 96);
  v15[7]  = v3;
  __int128 v4 = *(_OWORD *)(a1 + 144);
  v15[8]  = *(_OWORD *)(a1 + 128);
  v15[9]  = v4;
  __int128 v5 = *(_OWORD *)(a1 + 48);
  _OWORD v15[2] = *(_OWORD *)(a1 + 32);
  v15[3]  = v5;
  __int128 v6 = *(_OWORD *)(a1 + 80);
  v15[4]  = *(_OWORD *)(a1 + 64);
  v15[5]  = v6;
  __int128 v7 = *(_OWORD *)(a1 + 16);
  v15[0]  = *(_OWORD *)a1;
  v15[1]  = v7;
  __int128 v8 = *(_OWORD *)(a2 + 176);
  v17[10]  = *(_OWORD *)(a2 + 160);
  v17[11]  = v8;
  v17[12]  = *(_OWORD *)(a2 + 192);
  uint64_t v18 = *(void *)(a2 + 208);
  __int128 v9 = *(_OWORD *)(a2 + 112);
  v17[6]  = *(_OWORD *)(a2 + 96);
  v17[7]  = v9;
  __int128 v10 = *(_OWORD *)(a2 + 144);
  v17[8]  = *(_OWORD *)(a2 + 128);
  v17[9]  = v10;
  __int128 v11 = *(_OWORD *)(a2 + 48);
  __int128 v17[2] = *(_OWORD *)(a2 + 32);
  v17[3]  = v11;
  __int128 v12 = *(_OWORD *)(a2 + 80);
  v17[4]  = *(_OWORD *)(a2 + 64);
  v17[5]  = v12;
  __int128 v13 = *(_OWORD *)(a2 + 16);
  v17[0]  = *(_OWORD *)a2;
  v17[1]  = v13;
  return _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV6CountsV23__derived_struct_equalsySbAI_AItFZ_0( v15,  v17);
}

uint64_t IEEE80211InformationElement.RSNCapability.authenticationKeyManagementSuites.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t IEEE80211InformationElement.RSNCapability.pmkIDs.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 32));
}

uint64_t IEEE80211InformationElement.RSNCapability.pmkIDs.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 32));
  *(void *)(v1 + 32)  = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txDataRate.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 40));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txDataRate.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 40));
  *(void *)(v1 + 40)  = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txRetries.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 48));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txRetries.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 48));
  *(void *)(v1 + 48)  = a1;
  return result;
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.extendedRSNCapability.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 56));
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.extendedRSNCapability.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 56));
  *(void *)(v1 + 56)  = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txPacketBurstInterval.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 64));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txPacketBurstInterval.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 64));
  *(void *)(v1 + 64)  = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txPacketExpiry.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 72));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txPacketExpiry.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 72));
  *(void *)(v1 + 72)  = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txConsecutiveErrors.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 80));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txConsecutiveErrors.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 80));
  *(void *)(v1 + 80)  = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txCCA.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 88));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txCCA.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 88));
  *(void *)(v1 + 88)  = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.requeueCount.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 96));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.requeueCount.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 96));
  *(void *)(v1 + 96)  = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxTotalDelay.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 104));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxTotalDelay.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 104));
  *(void *)(v1 + 104)  = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxIPCDelay.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 112));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxIPCDelay.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 112));
  *(void *)(v1 + 112)  = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxFWDelay.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 120));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxFWDelay.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 120));
  *(void *)(v1 + 120)  = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxDataRate.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 128));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxDataRate.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 128));
  *(void *)(v1 + 128)  = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxRSSI.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 136));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxRSSI.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 136));
  *(void *)(v1 + 136)  = a1;
  return result;
}

void AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.hash(into:)(uint64_t a1)
{
}

Swift::Int AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_100149060()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  uint64_t v8 = v0[7];
  uint64_t v9 = v0[8];
  uint64_t v14 = v0[9];
  uint64_t v15 = v0[10];
  uint64_t v16 = v0[11];
  uint64_t v17 = v0[12];
  uint64_t v18 = v0[13];
  uint64_t v19 = v0[14];
  uint64_t v10 = v0[15];
  uint64_t v11 = v0[16];
  uint64_t v12 = v0[17];
  uint64_t v20 = v10;
  uint64_t v21 = v11;
  Hasher.init(_seed:)(v22, 0LL);
  sub_100082AA4((uint64_t)v22, v1);
  sub_100082AA4((uint64_t)v22, v2);
  sub_100082AA4((uint64_t)v22, v3);
  sub_100082AA4((uint64_t)v22, v4);
  sub_100082AA4((uint64_t)v22, v5);
  sub_100082AA4((uint64_t)v22, v6);
  sub_100082AA4((uint64_t)v22, v7);
  sub_100082AA4((uint64_t)v22, v8);
  sub_100082AA4((uint64_t)v22, v9);
  sub_100082AA4((uint64_t)v22, v14);
  sub_100082AA4((uint64_t)v22, v15);
  sub_100082AA4((uint64_t)v22, v16);
  sub_100082AA4((uint64_t)v22, v17);
  sub_100082AA4((uint64_t)v22, v18);
  sub_100082AA4((uint64_t)v22, v19);
  sub_100082AA4((uint64_t)v22, v20);
  sub_100082AA4((uint64_t)v22, v21);
  sub_100082AA4((uint64_t)v22, v12);
  return Hasher._finalize()();
}

void sub_1001491CC(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v10 = v1[7];
  uint64_t v11 = v1[8];
  uint64_t v15 = v1[9];
  uint64_t v16 = v1[10];
  uint64_t v17 = v1[11];
  uint64_t v18 = v1[12];
  uint64_t v19 = v1[13];
  uint64_t v20 = v1[14];
  uint64_t v12 = v1[15];
  uint64_t v13 = v1[16];
  uint64_t v14 = v1[17];
  uint64_t v21 = v12;
  uint64_t v22 = v13;
  sub_100082AA4(a1, v3);
  sub_100082AA4(a1, v4);
  sub_100082AA4(a1, v5);
  sub_100082AA4(a1, v6);
  sub_100082AA4(a1, v7);
  sub_100082AA4(a1, v8);
  sub_100082AA4(a1, v9);
  sub_100082AA4(a1, v10);
  sub_100082AA4(a1, v11);
  sub_100082AA4(a1, v15);
  sub_100082AA4(a1, v16);
  sub_100082AA4(a1, v17);
  sub_100082AA4(a1, v18);
  sub_100082AA4(a1, v19);
  sub_100082AA4(a1, v20);
  sub_100082AA4(a1, v21);
  sub_100082AA4(a1, v22);
  sub_100082AA4(a1, v14);
}

Swift::Int sub_10014931C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v15 = v1[9];
  uint64_t v16 = v1[10];
  uint64_t v17 = v1[11];
  uint64_t v18 = v1[12];
  uint64_t v19 = v1[13];
  uint64_t v20 = v1[14];
  uint64_t v11 = v1[15];
  uint64_t v12 = v1[16];
  uint64_t v13 = v1[17];
  uint64_t v21 = v11;
  uint64_t v22 = v12;
  Hasher.init(_seed:)(v23, a1);
  sub_100082AA4((uint64_t)v23, v2);
  sub_100082AA4((uint64_t)v23, v3);
  sub_100082AA4((uint64_t)v23, v4);
  sub_100082AA4((uint64_t)v23, v5);
  sub_100082AA4((uint64_t)v23, v6);
  sub_100082AA4((uint64_t)v23, v7);
  sub_100082AA4((uint64_t)v23, v8);
  sub_100082AA4((uint64_t)v23, v9);
  sub_100082AA4((uint64_t)v23, v10);
  sub_100082AA4((uint64_t)v23, v15);
  sub_100082AA4((uint64_t)v23, v16);
  sub_100082AA4((uint64_t)v23, v17);
  sub_100082AA4((uint64_t)v23, v18);
  sub_100082AA4((uint64_t)v23, v19);
  sub_100082AA4((uint64_t)v23, v20);
  sub_100082AA4((uint64_t)v23, v21);
  sub_100082AA4((uint64_t)v23, v22);
  sub_100082AA4((uint64_t)v23, v13);
  return Hasher._finalize()();
}

BOOL sub_100149484(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[7];
  v11[6]  = a1[6];
  v11[7]  = v2;
  v11[8]  = a1[8];
  __int128 v3 = a1[3];
  _OWORD v11[2] = a1[2];
  void v11[3] = v3;
  __int128 v4 = a1[5];
  v11[4]  = a1[4];
  v11[5]  = v4;
  __int128 v5 = a1[1];
  v11[0]  = *a1;
  v11[1]  = v5;
  __int128 v6 = a2[7];
  v12[6]  = a2[6];
  v12[7]  = v6;
  v12[8]  = a2[8];
  __int128 v7 = a2[3];
  void v12[2] = a2[2];
  v12[3]  = v7;
  __int128 v8 = a2[5];
  void v12[4] = a2[4];
  v12[5]  = v8;
  __int128 v9 = a2[1];
  v12[0]  = *a2;
  v12[1]  = v9;
  return _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV10HistogramsV23__derived_struct_equalsySbAI_AItFZ_0( (uint64_t *)v11,  (uint64_t *)v12);
}

__n128 AWDLStatistics.LowLatencyStatistics.Traffic.counts.getter@<Q0>(uint64_t a1@<X8>)
{
  __int128 v2 = *(_OWORD *)(v1 + 176);
  *(_OWORD *)(a1 + 160)  = *(_OWORD *)(v1 + 160);
  *(_OWORD *)(a1 + 176)  = v2;
  *(_OWORD *)(a1 + 192)  = *(_OWORD *)(v1 + 192);
  *(void *)(a1 + 208)  = *(void *)(v1 + 208);
  __int128 v3 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(a1 + 96)  = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(a1 + 112)  = v3;
  __int128 v4 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)(a1 + 128)  = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(a1 + 144)  = v4;
  __int128 v5 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48)  = v5;
  __int128 v6 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 80)  = v6;
  __n128 result = *(__n128 *)v1;
  __int128 v8 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1  = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16)  = v8;
  return result;
}

__n128 AWDLStatistics.LowLatencyStatistics.Traffic.counts.setter(uint64_t a1)
{
  __int128 v2 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v1 + 160)  = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v1 + 176)  = v2;
  *(_OWORD *)(v1 + 192)  = *(_OWORD *)(a1 + 192);
  *(void *)(v1 + 208)  = *(void *)(a1 + 208);
  __int128 v3 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v1 + 96)  = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v1 + 112)  = v3;
  __int128 v4 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v1 + 128)  = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v1 + 144)  = v4;
  __int128 v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 32)  = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 48)  = v5;
  __int128 v6 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v1 + 64)  = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v1 + 80)  = v6;
  __n128 result = *(__n128 *)a1;
  __int128 v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16)  = v8;
  return result;
}

uint64_t *AWDLStatistics.LowLatencyStatistics.Traffic.histograms.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_100154C70((uint64_t *)(v1 + 216), a1);
}

void *AWDLStatistics.LowLatencyStatistics.Traffic.histograms.setter(_OWORD *a1)
{
  return sub_100154CA4(a1, (void *)(v1 + 216));
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.histograms.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

void AWDLStatistics.LowLatencyStatistics.Traffic.hash(into:)(uint64_t a1)
{
  uint64_t v3 = v1[27];
  uint64_t v4 = v1[28];
  uint64_t v5 = v1[29];
  uint64_t v6 = v1[30];
  uint64_t v7 = v1[31];
  uint64_t v8 = v1[32];
  uint64_t v9 = v1[33];
  uint64_t v10 = v1[34];
  uint64_t v11 = v1[35];
  uint64_t v15 = v1[36];
  uint64_t v16 = v1[37];
  uint64_t v17 = v1[38];
  uint64_t v18 = v1[39];
  uint64_t v19 = v1[40];
  uint64_t v20 = v1[41];
  uint64_t v12 = v1[42];
  uint64_t v13 = v1[43];
  uint64_t v14 = v1[44];
  uint64_t v21 = v12;
  uint64_t v22 = v13;
  sub_100082AA4(a1, v3);
  sub_100082AA4(a1, v4);
  sub_100082AA4(a1, v5);
  sub_100082AA4(a1, v6);
  sub_100082AA4(a1, v7);
  sub_100082AA4(a1, v8);
  sub_100082AA4(a1, v9);
  sub_100082AA4(a1, v10);
  sub_100082AA4(a1, v11);
  sub_100082AA4(a1, v15);
  sub_100082AA4(a1, v16);
  sub_100082AA4(a1, v17);
  sub_100082AA4(a1, v18);
  sub_100082AA4(a1, v19);
  sub_100082AA4(a1, v20);
  sub_100082AA4(a1, v21);
  sub_100082AA4(a1, v22);
  sub_100082AA4(a1, v14);
}

BOOL static AWDLStatistics.LowLatencyStatistics.Traffic.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a1 + 176);
  v35[10]  = *(_OWORD *)(a1 + 160);
  v35[11]  = v4;
  v35[12]  = *(_OWORD *)(a1 + 192);
  uint64_t v36 = *(void *)(a1 + 208);
  __int128 v5 = *(_OWORD *)(a1 + 112);
  v35[6]  = *(_OWORD *)(a1 + 96);
  v35[7]  = v5;
  __int128 v6 = *(_OWORD *)(a1 + 144);
  v35[8]  = *(_OWORD *)(a1 + 128);
  v35[9]  = v6;
  __int128 v7 = *(_OWORD *)(a1 + 48);
  v35[2]  = *(_OWORD *)(a1 + 32);
  v35[3]  = v7;
  __int128 v8 = *(_OWORD *)(a1 + 80);
  v35[4]  = *(_OWORD *)(a1 + 64);
  v35[5]  = v8;
  __int128 v9 = *(_OWORD *)(a1 + 16);
  v35[0]  = *(_OWORD *)a1;
  v35[1]  = v9;
  __int128 v10 = *(_OWORD *)(a2 + 176);
  v33[10]  = *(_OWORD *)(a2 + 160);
  v33[11]  = v10;
  v33[12]  = *(_OWORD *)(a2 + 192);
  uint64_t v34 = *(void *)(a2 + 208);
  __int128 v11 = *(_OWORD *)(a2 + 112);
  v33[6]  = *(_OWORD *)(a2 + 96);
  v33[7]  = v11;
  __int128 v12 = *(_OWORD *)(a2 + 144);
  v33[8]  = *(_OWORD *)(a2 + 128);
  v33[9]  = v12;
  __int128 v13 = *(_OWORD *)(a2 + 48);
  v33[2]  = *(_OWORD *)(a2 + 32);
  v33[3]  = v13;
  __int128 v14 = *(_OWORD *)(a2 + 80);
  v33[4]  = *(_OWORD *)(a2 + 64);
  v33[5]  = v14;
  __int128 v15 = *(_OWORD *)(a2 + 16);
  v33[0]  = *(_OWORD *)a2;
  v33[1]  = v15;
  if (_s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV6CountsV23__derived_struct_equalsySbAI_AItFZ_0( v35,  v33))
  {
    __int128 v16 = *(_OWORD *)(a1 + 232);
    __int128 v17 = *(_OWORD *)(a1 + 248);
    v32[0]  = *(_OWORD *)(a1 + 216);
    v32[1]  = v16;
    __int128 v18 = *(_OWORD *)(a1 + 296);
    __int128 v19 = *(_OWORD *)(a1 + 328);
    __int128 v20 = *(_OWORD *)(a1 + 344);
    v32[6]  = *(_OWORD *)(a1 + 312);
    v32[7]  = v19;
    v32[8]  = v20;
    __int128 v21 = *(_OWORD *)(a1 + 264);
    __int128 v22 = *(_OWORD *)(a1 + 280);
    v32[2]  = v17;
    v32[3]  = v21;
    v32[4]  = v22;
    v32[5]  = v18;
    __int128 v23 = *(_OWORD *)(a2 + 296);
    __int128 v24 = *(_OWORD *)(a2 + 328);
    __int128 v25 = *(_OWORD *)(a2 + 344);
    v31[6]  = *(_OWORD *)(a2 + 312);
    v31[7]  = v24;
    v31[8]  = v25;
    __int128 v26 = *(_OWORD *)(a2 + 264);
    __int128 v27 = *(_OWORD *)(a2 + 280);
    v31[2]  = *(_OWORD *)(a2 + 248);
    v31[3]  = v26;
    __int128 v28 = *(_OWORD *)(a2 + 232);
    v31[4]  = v27;
    v31[5]  = v23;
    v31[0]  = *(_OWORD *)(a2 + 216);
    v31[1]  = v28;
    return _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV10HistogramsV23__derived_struct_equalsySbAI_AItFZ_0( (uint64_t *)v32,  (uint64_t *)v31);
  }

  else
  {
    return 0;
  }

Swift::Int AWDLStatistics.LowLatencyStatistics.Traffic.hashValue.getter()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[28];
  uint64_t v3 = v0[29];
  uint64_t v4 = v0[30];
  uint64_t v5 = v0[31];
  uint64_t v6 = v0[32];
  uint64_t v7 = v0[33];
  uint64_t v8 = v0[34];
  uint64_t v9 = v0[35];
  uint64_t v10 = v0[36];
  uint64_t v14 = v0[37];
  uint64_t v15 = v0[38];
  uint64_t v16 = v0[39];
  uint64_t v17 = v0[40];
  uint64_t v18 = v0[41];
  uint64_t v19 = v0[42];
  uint64_t v11 = v0[43];
  uint64_t v12 = v0[44];
  uint64_t v20 = v11;
  sub_100082AA4((uint64_t)v21, v1);
  sub_100082AA4((uint64_t)v21, v2);
  sub_100082AA4((uint64_t)v21, v3);
  sub_100082AA4((uint64_t)v21, v4);
  sub_100082AA4((uint64_t)v21, v5);
  sub_100082AA4((uint64_t)v21, v6);
  sub_100082AA4((uint64_t)v21, v7);
  sub_100082AA4((uint64_t)v21, v8);
  sub_100082AA4((uint64_t)v21, v9);
  sub_100082AA4((uint64_t)v21, v10);
  sub_100082AA4((uint64_t)v21, v14);
  sub_100082AA4((uint64_t)v21, v15);
  sub_100082AA4((uint64_t)v21, v16);
  sub_100082AA4((uint64_t)v21, v17);
  sub_100082AA4((uint64_t)v21, v18);
  sub_100082AA4((uint64_t)v21, v19);
  sub_100082AA4((uint64_t)v21, v20);
  sub_100082AA4((uint64_t)v21, v12);
  return Hasher._finalize()();
}

Swift::Int sub_1001499B0()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[28];
  uint64_t v3 = v0[29];
  uint64_t v4 = v0[30];
  uint64_t v5 = v0[31];
  uint64_t v6 = v0[32];
  uint64_t v8 = v0[33];
  uint64_t v7 = v0[34];
  uint64_t v9 = v0[35];
  uint64_t v11 = v0[36];
  uint64_t v12 = v0[37];
  uint64_t v13 = v0[38];
  uint64_t v14 = v0[39];
  uint64_t v15 = v0[40];
  uint64_t v16 = v0[41];
  uint64_t v17 = v0[42];
  uint64_t v18 = v0[43];
  uint64_t v19 = v0[44];
  Hasher.init(_seed:)(v20, 0LL);
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  sub_100082AA4((uint64_t)v20, v1);
  sub_100082AA4((uint64_t)v20, v2);
  sub_100082AA4((uint64_t)v20, v3);
  sub_100082AA4((uint64_t)v20, v4);
  sub_100082AA4((uint64_t)v20, v5);
  sub_100082AA4((uint64_t)v20, v6);
  sub_100082AA4((uint64_t)v20, v8);
  sub_100082AA4((uint64_t)v20, v7);
  sub_100082AA4((uint64_t)v20, v9);
  sub_100082AA4((uint64_t)v20, v11);
  sub_100082AA4((uint64_t)v20, v12);
  sub_100082AA4((uint64_t)v20, v13);
  sub_100082AA4((uint64_t)v20, v14);
  sub_100082AA4((uint64_t)v20, v15);
  sub_100082AA4((uint64_t)v20, v16);
  sub_100082AA4((uint64_t)v20, v17);
  sub_100082AA4((uint64_t)v20, v18);
  sub_100082AA4((uint64_t)v20, v19);
  return Hasher._finalize()();
}

void sub_100149B2C(uint64_t a1)
{
  uint64_t v3 = v1[27];
  uint64_t v4 = v1[28];
  uint64_t v5 = v1[29];
  uint64_t v6 = v1[30];
  uint64_t v7 = v1[31];
  uint64_t v8 = v1[32];
  uint64_t v10 = v1[33];
  uint64_t v9 = v1[34];
  uint64_t v11 = v1[35];
  uint64_t v12 = v1[36];
  uint64_t v13 = v1[37];
  uint64_t v14 = v1[38];
  uint64_t v15 = v1[39];
  uint64_t v16 = v1[40];
  uint64_t v17 = v1[41];
  uint64_t v18 = v1[42];
  uint64_t v19 = v1[43];
  uint64_t v20 = v1[44];
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  sub_100082AA4(a1, v3);
  sub_100082AA4(a1, v4);
  sub_100082AA4(a1, v5);
  sub_100082AA4(a1, v6);
  sub_100082AA4(a1, v7);
  sub_100082AA4(a1, v8);
  sub_100082AA4(a1, v10);
  sub_100082AA4(a1, v9);
  sub_100082AA4(a1, v11);
  sub_100082AA4(a1, v12);
  sub_100082AA4(a1, v13);
  sub_100082AA4(a1, v14);
  sub_100082AA4(a1, v15);
  sub_100082AA4(a1, v16);
  sub_100082AA4(a1, v17);
  sub_100082AA4(a1, v18);
  sub_100082AA4(a1, v19);
  sub_100082AA4(a1, v20);
}

Swift::Int sub_100149C94(uint64_t a1)
{
  uint64_t v2 = v1[27];
  uint64_t v3 = v1[28];
  uint64_t v4 = v1[29];
  uint64_t v5 = v1[30];
  uint64_t v6 = v1[31];
  uint64_t v7 = v1[32];
  uint64_t v9 = v1[33];
  uint64_t v8 = v1[34];
  uint64_t v10 = v1[35];
  uint64_t v12 = v1[36];
  uint64_t v13 = v1[37];
  uint64_t v14 = v1[38];
  uint64_t v15 = v1[39];
  uint64_t v16 = v1[40];
  uint64_t v17 = v1[41];
  uint64_t v18 = v1[42];
  uint64_t v19 = v1[43];
  uint64_t v20 = v1[44];
  Hasher.init(_seed:)(v21, a1);
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  sub_100082AA4((uint64_t)v21, v2);
  sub_100082AA4((uint64_t)v21, v3);
  sub_100082AA4((uint64_t)v21, v4);
  sub_100082AA4((uint64_t)v21, v5);
  sub_100082AA4((uint64_t)v21, v6);
  sub_100082AA4((uint64_t)v21, v7);
  sub_100082AA4((uint64_t)v21, v9);
  sub_100082AA4((uint64_t)v21, v8);
  sub_100082AA4((uint64_t)v21, v10);
  sub_100082AA4((uint64_t)v21, v12);
  sub_100082AA4((uint64_t)v21, v13);
  sub_100082AA4((uint64_t)v21, v14);
  sub_100082AA4((uint64_t)v21, v15);
  sub_100082AA4((uint64_t)v21, v16);
  sub_100082AA4((uint64_t)v21, v17);
  sub_100082AA4((uint64_t)v21, v18);
  sub_100082AA4((uint64_t)v21, v19);
  sub_100082AA4((uint64_t)v21, v20);
  return Hasher._finalize()();
}

BOOL sub_100149E0C(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 176);
  v30[10]  = *(_OWORD *)(a1 + 160);
  v30[11]  = v2;
  v30[12]  = *(_OWORD *)(a1 + 192);
  uint64_t v31 = *(void *)(a1 + 208);
  __int128 v3 = *(_OWORD *)(a1 + 112);
  v30[6]  = *(_OWORD *)(a1 + 96);
  v30[7]  = v3;
  __int128 v4 = *(_OWORD *)(a1 + 144);
  v30[8]  = *(_OWORD *)(a1 + 128);
  v30[9]  = v4;
  __int128 v5 = *(_OWORD *)(a1 + 48);
  v30[2]  = *(_OWORD *)(a1 + 32);
  v30[3]  = v5;
  __int128 v6 = *(_OWORD *)(a1 + 80);
  v30[4]  = *(_OWORD *)(a1 + 64);
  v30[5]  = v6;
  __int128 v7 = *(_OWORD *)(a1 + 16);
  v30[0]  = *(_OWORD *)a1;
  v30[1]  = v7;
  __int128 v8 = *(_OWORD *)(a1 + 296);
  __int128 v9 = *(_OWORD *)(a1 + 328);
  __int128 v10 = *(_OWORD *)(a1 + 344);
  v28[6]  = *(_OWORD *)(a1 + 312);
  v28[7]  = v9;
  v28[8]  = v10;
  __int128 v11 = *(_OWORD *)(a1 + 232);
  __int128 v12 = *(_OWORD *)(a1 + 264);
  __int128 v13 = *(_OWORD *)(a1 + 280);
  v28[2]  = *(_OWORD *)(a1 + 248);
  v28[3]  = v12;
  v28[4]  = v13;
  v28[5]  = v8;
  v28[0]  = *(_OWORD *)(a1 + 216);
  v28[1]  = v11;
  __int128 v14 = *(_OWORD *)(a2 + 176);
  v32[10]  = *(_OWORD *)(a2 + 160);
  v32[11]  = v14;
  v32[12]  = *(_OWORD *)(a2 + 192);
  uint64_t v33 = *(void *)(a2 + 208);
  __int128 v15 = *(_OWORD *)(a2 + 112);
  v32[6]  = *(_OWORD *)(a2 + 96);
  v32[7]  = v15;
  __int128 v16 = *(_OWORD *)(a2 + 144);
  v32[8]  = *(_OWORD *)(a2 + 128);
  v32[9]  = v16;
  __int128 v17 = *(_OWORD *)(a2 + 48);
  v32[2]  = *(_OWORD *)(a2 + 32);
  v32[3]  = v17;
  __int128 v18 = *(_OWORD *)(a2 + 80);
  v32[4]  = *(_OWORD *)(a2 + 64);
  v32[5]  = v18;
  __int128 v19 = *(_OWORD *)(a2 + 16);
  v32[0]  = *(_OWORD *)a2;
  v32[1]  = v19;
  __int128 v20 = *(_OWORD *)(a2 + 296);
  __int128 v21 = *(_OWORD *)(a2 + 328);
  __int128 v22 = *(_OWORD *)(a2 + 344);
  v29[6]  = *(_OWORD *)(a2 + 312);
  v29[7]  = v21;
  v29[8]  = v22;
  __int128 v23 = *(_OWORD *)(a2 + 264);
  __int128 v24 = *(_OWORD *)(a2 + 280);
  v29[2]  = *(_OWORD *)(a2 + 248);
  v29[3]  = v23;
  __int128 v25 = *(_OWORD *)(a2 + 232);
  v29[4]  = v24;
  v29[5]  = v20;
  v29[0]  = *(_OWORD *)(a2 + 216);
  v29[1]  = v25;
  return _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV6CountsV23__derived_struct_equalsySbAI_AItFZ_0( v30,  v32)
      && _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV10HistogramsV23__derived_struct_equalsySbAI_AItFZ_0( (uint64_t *)v28,  (uint64_t *)v29);
}

uint64_t AWDLStatistics.LowLatencyStatistics.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100154CD8(v1, a1);
}

uint64_t AWDLStatistics.LowLatencyStatistics.configuration.setter(uint64_t a1)
{
  return sub_100154D1C(a1, v1);
}

uint64_t AWDLStatistics.LowLatencyStatistics.traffic.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0LL) + 20);
  return sub_100154D60(v3, a1);
}

uint64_t AWDLStatistics.LowLatencyStatistics.traffic.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0LL) + 20);
  return sub_100154D94(a1, v3);
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.traffic.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t sub_100149FD0(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v33 = *(void *)(result + 16);
  if (!v33) {
    return result;
  }
  uint64_t v4 = a2;
  uint64_t v5 = result;
  else {
    uint64_t v6 = qword_10034A740[(char)a2];
  }
  uint64_t v32 = v6;
  uint64_t v7 = *(void *)(result + 32);
  swift_bridgeObjectRetain(result);
  uint64_t v8 = 0LL;
  while (1)
  {
    uint64_t v9 = v4;
    *(void *)&__int128 v36 = sub_10014E490(v4);
    *((void *)&v36 + 1)  = v10;
    v11._uint64_t countAndFlagsBits = 1852400223LL;
    v11._object  = (void *)0xE400000000000000LL;
    String.append(_:)(v11);
    *(void *)&v35[0]  = v8;
    v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    object  = v12._object;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(object);
    __int128 v14 = v36;
    uint64_t v37 = &type metadata for Double;
    *(void *)&__int128 v36 = v7;
    sub_100022594(&v36, v35);
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(*a3);
    uint64_t v16 = *a3;
    uint64_t v34 = (void *)*a3;
    *a3  = 0x8000000000000000LL;
    unint64_t v18 = sub_10001C008(v14, *((uint64_t *)&v14 + 1));
    uint64_t v19 = *(void *)(v16 + 16);
    BOOL v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20)) {
      break;
    }
    char v22 = v17;
    if (*(void *)(v16 + 24) >= v21)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        __int128 v25 = v34;
        if ((v17 & 1) != 0) {
          goto LABEL_13;
        }
      }

      else
      {
        sub_10013C320();
        __int128 v25 = v34;
        if ((v22 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }

    else
    {
      sub_10013698C(v21, isUniquelyReferenced_nonNull_native);
      uint64_t v23 = sub_10001C008(v14, *((uint64_t *)&v14 + 1));
      if ((v22 & 1) != (v24 & 1)) {
        goto LABEL_23;
      }
      unint64_t v18 = v23;
      __int128 v25 = v34;
      if ((v22 & 1) != 0)
      {
LABEL_13:
        __int128 v26 = (void *)(v25[7] + 32 * v18);
        sub_100002AC4(v26);
        sub_100022594(v35, v26);
        goto LABEL_17;
      }
    }

    v25[(v18 >> 6) + 8] |= 1LL << v18;
    *(_OWORD *)(v25[6] + 16 * v18)  = v14;
    sub_100022594(v35, (_OWORD *)(v25[7] + 32 * v18));
    uint64_t v27 = v25[2];
    BOOL v28 = __OFADD__(v27, 1LL);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_22;
    }
    v25[2]  = v29;
    swift_bridgeObjectRetain(*((void *)&v14 + 1));
LABEL_17:
    uint64_t v30 = *a3;
    *a3  = v25;
    swift_bridgeObjectRelease(*((void *)&v14 + 1));
    swift_bridgeObjectRelease(v30);
    if (v8 + 1 != v33)
    {
      uint64_t v4 = v9;
      uint64_t v7 = *(void *)(v5 + 8 * v8 + 40);
      uint64_t v31 = v8 + 2;
      ++v8;
      if (v31 != v32) {
        continue;
      }
    }

    return swift_bridgeObjectRelease(v5);
  }

  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __n128 result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.eventPayload.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v268 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = _swiftEmptyDictionarySingleton;
  v273  = _swiftEmptyDictionarySingleton;
  LOBYTE(v3)  = *v0;
  v272  = &type metadata for Bool;
  LOBYTE(v271)  = v3;
  sub_100022594(&v271, v270);
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  v269  = _swiftEmptyDictionarySingleton;
  sub_10001FEDC(v270, 0LL, isUniquelyReferenced_nonNull_native);
  uint64_t v7 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  __int16 v8 = *(_WORD *)(v1 + 1);
  uint64_t v9 = sub_100002274(&qword_1004040A8);
  uint64_t v10 = swift_allocObject(v9, 34LL, 7LL);
  *(_OWORD *)(v10 + 16)  = xmmword_10033B810;
  *(_WORD *)(v10 + 32)  = v8;
  *(void *)&v271  = v10;
  static String.Encoding.utf8.getter(v10);
  uint64_t v11 = sub_100002274(&qword_100406978);
  unint64_t v12 = sub_100154DC8();
  uint64_t v13 = String.init<A>(bytes:encoding:)(&v271, v4, v11, v12);
  unint64_t v15 = v14;
  swift_bridgeObjectRelease(v10);
  if (v15) {
    uint64_t v16 = v13;
  }
  else {
    uint64_t v16 = 0LL;
  }
  unint64_t v17 = 0xE000000000000000LL;
  v272  = &type metadata for String;
  if (v15) {
    unint64_t v17 = v15;
  }
  *(void *)&v271  = v16;
  *((void *)&v271 + 1)  = v17;
  sub_100022594(&v271, v270);
  char v18 = swift_isUniquelyReferenced_nonNull_native(v7);
  v269  = v7;
  sub_10001FEDC(v270, 1LL, v18);
  uint64_t v19 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v20 = *((void *)v1 + 1);
  v272  = &type metadata for Int;
  *(void *)&v271  = v20;
  sub_100022594(&v271, v270);
  char v21 = swift_isUniquelyReferenced_nonNull_native(v19);
  v269  = v19;
  sub_10001FEDC(v270, 2LL, v21);
  char v22 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v23 = *((void *)v1 + 2);
  v272  = &type metadata for Int;
  *(void *)&v271  = v23;
  sub_100022594(&v271, v270);
  char v24 = swift_isUniquelyReferenced_nonNull_native(v22);
  v269  = v22;
  sub_10001FEDC(v270, 3LL, v24);
  __int128 v25 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v26 = *((void *)v1 + 3);
  v272  = &type metadata for Int;
  *(void *)&v271  = v26;
  sub_100022594(&v271, v270);
  char v27 = swift_isUniquelyReferenced_nonNull_native(v25);
  v269  = v25;
  sub_10001FEDC(v270, 4LL, v27);
  BOOL v28 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  unint64_t v29 = *((unsigned int *)v1 + 8) | ((unint64_t)*((unsigned __int16 *)v1 + 18) << 32);
  v272  = &type metadata for UInt32;
  if ((v29 & 0xFF00000000LL) == 0x300000000LL) {
    LODWORD(v29)  = 0;
  }
  LODWORD(v271)  = v29;
  sub_100022594(&v271, v270);
  char v30 = swift_isUniquelyReferenced_nonNull_native(v28);
  v269  = v28;
  sub_10001FEDC(v270, 5LL, v30);
  uint64_t v31 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  unint64_t v32 = *((unsigned int *)v1 + 10) | ((unint64_t)*((unsigned __int16 *)v1 + 22) << 32);
  v272  = &type metadata for UInt32;
  if ((v32 & 0xFF00000000LL) == 0x300000000LL) {
    LODWORD(v32)  = 0;
  }
  LODWORD(v271)  = v32;
  sub_100022594(&v271, v270);
  char v33 = swift_isUniquelyReferenced_nonNull_native(v31);
  v269  = v31;
  sub_10001FEDC(v270, 6LL, v33);
  uint64_t v34 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  unint64_t v35 = *((unsigned int *)v1 + 12) | ((unint64_t)*((unsigned __int16 *)v1 + 26) << 32);
  v272  = &type metadata for UInt32;
  if ((v35 & 0xFF00000000LL) == 0x300000000LL) {
    LODWORD(v35)  = 0;
  }
  LODWORD(v271)  = v35;
  sub_100022594(&v271, v270);
  char v36 = swift_isUniquelyReferenced_nonNull_native(v34);
  v269  = v34;
  sub_10001FEDC(v270, 7LL, v36);
  uint64_t v37 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  unint64_t v38 = *((unsigned int *)v1 + 14) | ((unint64_t)*((unsigned __int16 *)v1 + 30) << 32);
  v272  = &type metadata for UInt32;
  if ((v38 & 0xFF00000000LL) == 0x300000000LL) {
    LODWORD(v38)  = 0;
  }
  LODWORD(v271)  = v38;
  sub_100022594(&v271, v270);
  char v39 = swift_isUniquelyReferenced_nonNull_native(v37);
  v269  = v37;
  sub_10001FEDC(v270, 8LL, v39);
  uint64_t v40 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v41 = *((void *)v1 + 8);
  v272  = &type metadata for Int;
  *(void *)&v271  = v41;
  sub_100022594(&v271, v270);
  char v42 = swift_isUniquelyReferenced_nonNull_native(v40);
  v269  = v40;
  sub_10001FEDC(v270, 9LL, v42);
  uint64_t v43 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v44 = *((void *)v1 + 9);
  v272  = &type metadata for Int;
  *(void *)&v271  = v44;
  sub_100022594(&v271, v270);
  char v45 = swift_isUniquelyReferenced_nonNull_native(v43);
  v269  = v43;
  sub_10001FEDC(v270, 10LL, v45);
  uint64_t v46 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v47 = *((void *)v1 + 10);
  v272  = &type metadata for Int;
  *(void *)&v271  = v47;
  sub_100022594(&v271, v270);
  char v48 = swift_isUniquelyReferenced_nonNull_native(v46);
  v269  = v46;
  sub_10001FEDC(v270, 11LL, v48);
  uint64_t v49 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v50 = *((void *)v1 + 11);
  v272  = &type metadata for Int;
  *(void *)&v271  = v50;
  sub_100022594(&v271, v270);
  char v51 = swift_isUniquelyReferenced_nonNull_native(v49);
  v269  = v49;
  sub_10001FEDC(v270, 12LL, v51);
  uint64_t v52 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v53 = *((void *)v1 + 12);
  v272  = &type metadata for Int;
  *(void *)&v271  = v53;
  sub_100022594(&v271, v270);
  char v54 = swift_isUniquelyReferenced_nonNull_native(v52);
  v269  = v52;
  sub_10001FEDC(v270, 13LL, v54);
  uint64_t v55 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v56 = *((void *)v1 + 13);
  v272  = &type metadata for Int;
  *(void *)&v271  = v56;
  sub_100022594(&v271, v270);
  char v57 = swift_isUniquelyReferenced_nonNull_native(v55);
  v269  = v55;
  sub_10001FEDC(v270, 14LL, v57);
  uint64_t v58 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v59 = v1[112];
  v272  = &type metadata for Bool;
  LOBYTE(v271)  = v59;
  sub_100022594(&v271, v270);
  char v60 = swift_isUniquelyReferenced_nonNull_native(v58);
  v269  = v58;
  sub_10001FEDC(v270, 15LL, v60);
  uint64_t v61 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v62 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  uint64_t v63 = DispatchTimeInterval.rawSeconds.getter();
  v272  = &type metadata for Int;
  *(void *)&v271  = v63;
  sub_100022594(&v271, v270);
  char v64 = swift_isUniquelyReferenced_nonNull_native(v61);
  v269  = v61;
  sub_10001FEDC(v270, 16LL, v64);
  uint64_t v65 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v66 = *(void *)&v1[v62[21]];
  v272  = &type metadata for Int;
  *(void *)&v271  = v66;
  sub_100022594(&v271, v270);
  char v67 = swift_isUniquelyReferenced_nonNull_native(v65);
  v269  = v65;
  sub_10001FEDC(v270, 17LL, v67);
  uint64_t v68 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v69 = *(void *)&v1[v62[22]];
  v272  = &type metadata for Int;
  *(void *)&v271  = v69;
  sub_100022594(&v271, v270);
  char v70 = swift_isUniquelyReferenced_nonNull_native(v68);
  v269  = v68;
  sub_10001FEDC(v270, 18LL, v70);
  uint64_t v71 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v72 = *(void *)&v1[v62[23]];
  v272  = &type metadata for Int;
  *(void *)&v271  = v72;
  sub_100022594(&v271, v270);
  char v73 = swift_isUniquelyReferenced_nonNull_native(v71);
  v269  = v71;
  sub_10001FEDC(v270, 19LL, v73);
  uint64_t v74 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v75 = *(void *)&v1[v62[24]];
  v272  = &type metadata for Int;
  *(void *)&v271  = v75;
  sub_100022594(&v271, v270);
  char v76 = swift_isUniquelyReferenced_nonNull_native(v74);
  v269  = v74;
  sub_10001FEDC(v270, 20LL, v76);
  uint64_t v77 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v78 = *(void *)&v1[v62[25]];
  v272  = &type metadata for Int;
  *(void *)&v271  = v78;
  sub_100022594(&v271, v270);
  char v79 = swift_isUniquelyReferenced_nonNull_native(v77);
  v269  = v77;
  sub_10001FEDC(v270, 21LL, v79);
  uint64_t v80 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v81 = *(void *)&v1[v62[26]];
  v272  = &type metadata for Int;
  *(void *)&v271  = v81;
  sub_100022594(&v271, v270);
  char v82 = swift_isUniquelyReferenced_nonNull_native(v80);
  v269  = v80;
  sub_10001FEDC(v270, 22LL, v82);
  unint64_t v83 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v84 = *(void *)&v1[v62[27]];
  v272  = &type metadata for Int;
  *(void *)&v271  = v84;
  sub_100022594(&v271, v270);
  char v85 = swift_isUniquelyReferenced_nonNull_native(v83);
  v269  = v83;
  sub_10001FEDC(v270, 23LL, v85);
  OSStatus v86 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v87 = *(void *)&v1[v62[28]];
  v272  = &type metadata for Int;
  *(void *)&v271  = v87;
  sub_100022594(&v271, v270);
  char v88 = swift_isUniquelyReferenced_nonNull_native(v86);
  v269  = v86;
  sub_10001FEDC(v270, 24LL, v88);
  v89  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  __int16 v90 = *(_WORD *)&v1[v62[29]];
  v272  = &type metadata for UInt16;
  LOWORD(v271)  = v90;
  sub_100022594(&v271, v270);
  char v91 = swift_isUniquelyReferenced_nonNull_native(v89);
  v269  = v89;
  sub_10001FEDC(v270, 25LL, v91);
  unint64_t v92 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v93 = v1[v62[30]];
  v272  = &type metadata for Bool;
  LOBYTE(v271)  = v93;
  sub_100022594(&v271, v270);
  char v94 = swift_isUniquelyReferenced_nonNull_native(v92);
  v269  = v92;
  sub_10001FEDC(v270, 26LL, v94);
  unint64_t v95 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v96 = v1[v62[31]];
  v272  = &type metadata for Bool;
  LOBYTE(v271)  = v96;
  sub_100022594(&v271, v270);
  char v97 = swift_isUniquelyReferenced_nonNull_native(v95);
  v269  = v95;
  sub_10001FEDC(v270, 27LL, v97);
  uint64_t v98 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v99 = v1[v62[32]];
  v272  = &type metadata for Bool;
  LOBYTE(v271)  = v99;
  sub_100022594(&v271, v270);
  v100  = swift_isUniquelyReferenced_nonNull_native(v98);
  v269  = v98;
  sub_10001FEDC(v270, 28LL, v100);
  char v101 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v102 = v1[v62[33]];
  v272  = &type metadata for Bool;
  LOBYTE(v271)  = v102;
  sub_100022594(&v271, v270);
  char v103 = swift_isUniquelyReferenced_nonNull_native(v101);
  v269  = v101;
  sub_10001FEDC(v270, 29LL, v103);
  uint64_t v104 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v105  = v1[v62[34]];
  v272  = &type metadata for Bool;
  LOBYTE(v271)  = v105;
  sub_100022594(&v271, v270);
  v106  = swift_isUniquelyReferenced_nonNull_native(v104);
  v269  = v104;
  sub_10001FEDC(v270, 30LL, v106);
  uint64_t v107 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v108  = v1[v62[35]];
  v272  = &type metadata for UInt8;
  LOBYTE(v271)  = v108;
  sub_100022594(&v271, v270);
  char v109 = swift_isUniquelyReferenced_nonNull_native(v107);
  v269  = v107;
  sub_10001FEDC(v270, 31LL, v109);
  BOOL v110 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v111  = (uint64_t *)&v1[v62[36]];
  v112  = *v111;
  uint64_t v113 = v111[1];
  v272  = &type metadata for String;
  *(void *)&v271  = v112;
  *((void *)&v271 + 1)  = v113;
  sub_100022594(&v271, v270);
  swift_bridgeObjectRetain(v113);
  char v114 = swift_isUniquelyReferenced_nonNull_native(v110);
  v269  = v110;
  sub_10001FEDC(v270, 32LL, v114);
  v115  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v116 = v1[v62[37]];
  v272  = &type metadata for Bool;
  LOBYTE(v271)  = v116;
  sub_100022594(&v271, v270);
  char v117 = swift_isUniquelyReferenced_nonNull_native(v115);
  v269  = v115;
  sub_10001FEDC(v270, 33LL, v117);
  v118  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v119  = *(void *)&v1[v62[38]];
  v272  = &type metadata for Int;
  *(void *)&v271  = v119;
  sub_100022594(&v271, v270);
  v120  = swift_isUniquelyReferenced_nonNull_native(v118);
  v269  = v118;
  sub_10001FEDC(v270, 34LL, v120);
  uint64_t v121 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v122  = *(void *)&v1[v62[39]];
  v272  = &type metadata for Int;
  *(void *)&v271  = v122;
  sub_100022594(&v271, v270);
  v123  = swift_isUniquelyReferenced_nonNull_native(v121);
  v269  = v121;
  sub_10001FEDC(v270, 35LL, v123);
  uint64_t v124 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v125  = *(void *)&v1[v62[40]];
  v272  = &type metadata for Int;
  *(void *)&v271  = v125;
  sub_100022594(&v271, v270);
  char v126 = swift_isUniquelyReferenced_nonNull_native(v124);
  v269  = v124;
  sub_10001FEDC(v270, 36LL, v126);
  unint64_t v127 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v128 = *(void *)&v1[v62[41]];
  v272  = &type metadata for Int;
  *(void *)&v271  = v128;
  sub_100022594(&v271, v270);
  char v129 = swift_isUniquelyReferenced_nonNull_native(v127);
  v269  = v127;
  sub_10001FEDC(v270, 37LL, v129);
  uint64_t v130 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v131 = *(void *)&v1[v62[42]];
  v272  = &type metadata for UInt64;
  *(void *)&v271  = v131;
  sub_100022594(&v271, v270);
  v132  = swift_isUniquelyReferenced_nonNull_native(v130);
  v269  = v130;
  sub_10001FEDC(v270, 38LL, v132);
  unint64_t v133 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v134 = *(void *)&v1[v62[43]];
  v272  = &type metadata for Double;
  *(void *)&v271  = v134;
  sub_100022594(&v271, v270);
  char v135 = swift_isUniquelyReferenced_nonNull_native(v133);
  v269  = v133;
  sub_10001FEDC(v270, 39LL, v135);
  unint64_t v136 = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v137  = (uint64_t *)&v1[*(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0LL) + 20)];
  v138  = *v137;
  v272  = &type metadata for Int;
  *(void *)&v271  = v138;
  sub_100022594(&v271, v270);
  v139  = swift_isUniquelyReferenced_nonNull_native(v136);
  v269  = v136;
  sub_10001FEDC(v270, 40LL, v139);
  v140  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v141  = v137[1];
  v272  = &type metadata for Int;
  *(void *)&v271  = v141;
  sub_100022594(&v271, v270);
  v142  = swift_isUniquelyReferenced_nonNull_native(v140);
  v269  = v140;
  sub_10001FEDC(v270, 41LL, v142);
  v143  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v144  = v137[2];
  v272  = &type metadata for Int;
  *(void *)&v271  = v144;
  sub_100022594(&v271, v270);
  v145  = swift_isUniquelyReferenced_nonNull_native(v143);
  v269  = v143;
  sub_10001FEDC(v270, 42LL, v145);
  v146  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v147  = v137[3];
  v272  = &type metadata for Int;
  *(void *)&v271  = v147;
  sub_100022594(&v271, v270);
  v148  = swift_isUniquelyReferenced_nonNull_native(v146);
  v269  = v146;
  sub_10001FEDC(v270, 43LL, v148);
  v149  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v150  = v137[4];
  v272  = &type metadata for Int;
  *(void *)&v271  = v150;
  sub_100022594(&v271, v270);
  v151  = swift_isUniquelyReferenced_nonNull_native(v149);
  v269  = v149;
  sub_10001FEDC(v270, 44LL, v151);
  v152  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v153  = v137[5];
  v272  = &type metadata for Int;
  *(void *)&v271  = v153;
  sub_100022594(&v271, v270);
  v154  = swift_isUniquelyReferenced_nonNull_native(v152);
  v269  = v152;
  sub_10001FEDC(v270, 45LL, v154);
  v155  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v156  = v137[6];
  v272  = &type metadata for Int;
  *(void *)&v271  = v156;
  sub_100022594(&v271, v270);
  v157  = swift_isUniquelyReferenced_nonNull_native(v155);
  v269  = v155;
  sub_10001FEDC(v270, 46LL, v157);
  v158  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v159  = v137[7];
  v272  = &type metadata for Int;
  *(void *)&v271  = v159;
  sub_100022594(&v271, v270);
  v160  = swift_isUniquelyReferenced_nonNull_native(v158);
  v269  = v158;
  sub_10001FEDC(v270, 47LL, v160);
  v161  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v162  = v137[8];
  v272  = &type metadata for Int;
  *(void *)&v271  = v162;
  sub_100022594(&v271, v270);
  v163  = swift_isUniquelyReferenced_nonNull_native(v161);
  v269  = v161;
  sub_10001FEDC(v270, 48LL, v163);
  v164  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v165  = v137[9];
  v272  = &type metadata for Int;
  *(void *)&v271  = v165;
  sub_100022594(&v271, v270);
  v166  = swift_isUniquelyReferenced_nonNull_native(v164);
  v269  = v164;
  sub_10001FEDC(v270, 49LL, v166);
  v167  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v168  = v137[10];
  v272  = &type metadata for Int;
  *(void *)&v271  = v168;
  sub_100022594(&v271, v270);
  v169  = swift_isUniquelyReferenced_nonNull_native(v167);
  v269  = v167;
  sub_10001FEDC(v270, 50LL, v169);
  v170  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v171  = v137[11];
  v272  = &type metadata for Int;
  *(void *)&v271  = v171;
  sub_100022594(&v271, v270);
  v172  = swift_isUniquelyReferenced_nonNull_native(v170);
  v269  = v170;
  sub_10001FEDC(v270, 51LL, v172);
  v173  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v174  = v137[12];
  v272  = &type metadata for Int;
  *(void *)&v271  = v174;
  sub_100022594(&v271, v270);
  v175  = swift_isUniquelyReferenced_nonNull_native(v173);
  v269  = v173;
  sub_10001FEDC(v270, 52LL, v175);
  v176  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v177  = v137[13];
  v272  = &type metadata for Int;
  *(void *)&v271  = v177;
  sub_100022594(&v271, v270);
  v178  = swift_isUniquelyReferenced_nonNull_native(v176);
  v269  = v176;
  sub_10001FEDC(v270, 53LL, v178);
  v179  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v180  = v137[14];
  v272  = &type metadata for Int;
  *(void *)&v271  = v180;
  sub_100022594(&v271, v270);
  v181  = swift_isUniquelyReferenced_nonNull_native(v179);
  v269  = v179;
  sub_10001FEDC(v270, 54LL, v181);
  v182  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v183  = v137[15];
  v272  = &type metadata for Int;
  *(void *)&v271  = v183;
  sub_100022594(&v271, v270);
  v184  = swift_isUniquelyReferenced_nonNull_native(v182);
  v269  = v182;
  sub_10001FEDC(v270, 55LL, v184);
  v185  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v186  = v137[16];
  v272  = &type metadata for Int;
  *(void *)&v271  = v186;
  sub_100022594(&v271, v270);
  v187  = swift_isUniquelyReferenced_nonNull_native(v185);
  v269  = v185;
  sub_10001FEDC(v270, 56LL, v187);
  v188  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v189  = v137[17];
  v272  = &type metadata for Int;
  *(void *)&v271  = v189;
  sub_100022594(&v271, v270);
  v190  = swift_isUniquelyReferenced_nonNull_native(v188);
  v269  = v188;
  sub_10001FEDC(v270, 57LL, v190);
  v191  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v192  = v137[18];
  v272  = &type metadata for Int;
  *(void *)&v271  = v192;
  sub_100022594(&v271, v270);
  v193  = swift_isUniquelyReferenced_nonNull_native(v191);
  v269  = v191;
  sub_10001FEDC(v270, 58LL, v193);
  v194  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v195  = v137[19];
  v272  = &type metadata for Int;
  *(void *)&v271  = v195;
  sub_100022594(&v271, v270);
  v196  = swift_isUniquelyReferenced_nonNull_native(v194);
  v269  = v194;
  sub_10001FEDC(v270, 59LL, v196);
  v197  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v198  = v137[20];
  v272  = &type metadata for Int;
  *(void *)&v271  = v198;
  sub_100022594(&v271, v270);
  v199  = swift_isUniquelyReferenced_nonNull_native(v197);
  v269  = v197;
  sub_10001FEDC(v270, 60LL, v199);
  v200  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v201  = v137[21];
  v272  = &type metadata for Int;
  *(void *)&v271  = v201;
  sub_100022594(&v271, v270);
  v202  = swift_isUniquelyReferenced_nonNull_native(v200);
  v269  = v200;
  sub_10001FEDC(v270, 61LL, v202);
  v203  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v204  = v137[22];
  v272  = &type metadata for Int;
  *(void *)&v271  = v204;
  sub_100022594(&v271, v270);
  v205  = swift_isUniquelyReferenced_nonNull_native(v203);
  v269  = v203;
  sub_10001FEDC(v270, 62LL, v205);
  v206  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v207  = v137[23];
  v272  = &type metadata for Int;
  *(void *)&v271  = v207;
  sub_100022594(&v271, v270);
  v208  = swift_isUniquelyReferenced_nonNull_native(v206);
  v269  = v206;
  sub_10001FEDC(v270, 63LL, v208);
  v209  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v210  = v137[24];
  v272  = &type metadata for Int;
  *(void *)&v271  = v210;
  sub_100022594(&v271, v270);
  v211  = swift_isUniquelyReferenced_nonNull_native(v209);
  v269  = v209;
  sub_10001FEDC(v270, 64LL, v211);
  v212  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v213  = v137[25];
  v272  = &type metadata for Int;
  *(void *)&v271  = v213;
  sub_100022594(&v271, v270);
  v214  = swift_isUniquelyReferenced_nonNull_native(v212);
  v269  = v212;
  sub_10001FEDC(v270, 65LL, v214);
  v215  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v216  = v137[26];
  v272  = &type metadata for Int;
  *(void *)&v271  = v216;
  sub_100022594(&v271, v270);
  v217  = swift_isUniquelyReferenced_nonNull_native(v215);
  v269  = v215;
  sub_10001FEDC(v270, 66LL, v217);
  v218  = v269;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v219  = v137[27];
  v220  = swift_bridgeObjectRetain(v219);
  sub_100149FD0(v220, 0LL, &v273);
  swift_bridgeObjectRelease(v219);
  v221  = v137[28];
  v222  = swift_bridgeObjectRetain(v221);
  sub_100149FD0(v222, 1LL, &v273);
  swift_bridgeObjectRelease(v221);
  v223  = v137[29];
  v224  = swift_bridgeObjectRetain(v223);
  sub_100149FD0(v224, 2LL, &v273);
  swift_bridgeObjectRelease(v223);
  v225  = v137[30];
  v226  = swift_bridgeObjectRetain(v225);
  sub_100149FD0(v226, 3LL, &v273);
  swift_bridgeObjectRelease(v225);
  v227  = v137[31];
  v228  = swift_bridgeObjectRetain(v227);
  sub_100149FD0(v228, 4LL, &v273);
  swift_bridgeObjectRelease(v227);
  v229  = v137[32];
  v230  = swift_bridgeObjectRetain(v229);
  sub_100149FD0(v230, 5LL, &v273);
  swift_bridgeObjectRelease(v229);
  v231  = v137[33];
  v232  = swift_bridgeObjectRetain(v231);
  sub_100149FD0(v232, 6LL, &v273);
  swift_bridgeObjectRelease(v231);
  v233  = v137[34];
  v234  = swift_bridgeObjectRetain(v233);
  sub_100149FD0(v234, 7LL, &v273);
  swift_bridgeObjectRelease(v233);
  v235  = v137[35];
  v236  = swift_bridgeObjectRetain(v235);
  sub_100149FD0(v236, 8LL, &v273);
  swift_bridgeObjectRelease(v235);
  v237  = v137[36];
  v238  = swift_bridgeObjectRetain(v237);
  sub_100149FD0(v238, 9LL, &v273);
  swift_bridgeObjectRelease(v237);
  v239  = v137[37];
  v240  = swift_bridgeObjectRetain(v239);
  sub_100149FD0(v240, 10LL, &v273);
  swift_bridgeObjectRelease(v239);
  v241  = v137[38];
  v242  = swift_bridgeObjectRetain(v241);
  sub_100149FD0(v242, 11LL, &v273);
  swift_bridgeObjectRelease(v241);
  v243  = v137[39];
  v244  = swift_bridgeObjectRetain(v243);
  sub_100149FD0(v244, 12LL, &v273);
  swift_bridgeObjectRelease(v243);
  v245  = v137[40];
  v246  = swift_bridgeObjectRetain(v245);
  sub_100149FD0(v246, 13LL, &v273);
  swift_bridgeObjectRelease(v245);
  v247  = v137[41];
  v248  = swift_bridgeObjectRetain(v247);
  sub_100149FD0(v248, 14LL, &v273);
  swift_bridgeObjectRelease(v247);
  v249  = v137[42];
  v250  = swift_bridgeObjectRetain(v249);
  sub_100149FD0(v250, 15LL, &v273);
  swift_bridgeObjectRelease(v249);
  v251  = v137[43];
  v252  = swift_bridgeObjectRetain(v251);
  sub_100149FD0(v252, 16LL, &v273);
  swift_bridgeObjectRelease(v251);
  v253  = v137[44];
  v254  = swift_bridgeObjectRetain(v253);
  sub_100149FD0(v254, 17LL, &v273);
  swift_bridgeObjectRelease(v253);
  v255  = swift_bridgeObjectRetain(v218);
  v256  = sub_100145D9C(v255, (uint64_t (*)(void))sub_10014D60C, &qword_100409598);
  v257  = *(void *)(v256 + 16);
  if (v257)
  {
    sub_100002274(&qword_100409230);
    uint64_t v5 = (void *)static _DictionaryStorage.allocate(capacity:)(v257);
  }

  *(void *)&v271  = v5;
  v258  = (void *)swift_bridgeObjectRetain(v256);
  sub_100153550(v258, 1, &v271);
  swift_bridgeObjectRelease(v218);
  swift_bridgeObjectRelease(v256);
  v259  = v271;
  v260  = v273;
  v261  = swift_bridgeObjectRetain(v273);
  v262  = sub_100145A5C(v261);
  v263  = *(void *)(v262 + 16);
  if (v263)
  {
    sub_100002274(&qword_100409230);
    v264  = (void *)static _DictionaryStorage.allocate(capacity:)(v263);
  }

  else
  {
    v264  = _swiftEmptyDictionarySingleton;
  }

  *(void *)&v271  = v264;
  v265  = (void *)swift_bridgeObjectRetain(v262);
  sub_100153550(v265, 1, &v271);
  swift_bridgeObjectRelease(v260);
  swift_bridgeObjectRelease(v262);
  v266  = sub_1001464B0( v271,  v259,  (uint64_t)sub_10018D50C,  (void (*)(uint64_t, uint64_t, void, uint64_t, uint64_t *))sub_1001538DC);
  swift_bridgeObjectRelease(v218);
  swift_bridgeObjectRelease(v260);
  return v266;
}

void AWDLStatistics.LowLatencyStatistics.hash(into:)(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0LL) + 20));
  uint64_t v4 = v3[27];
  uint64_t v5 = v3[28];
  uint64_t v6 = v3[29];
  uint64_t v7 = v3[30];
  uint64_t v8 = v3[31];
  uint64_t v9 = v3[32];
  uint64_t v10 = v3[33];
  uint64_t v11 = v3[34];
  uint64_t v12 = v3[35];
  uint64_t v13 = v3[36];
  uint64_t v14 = v3[37];
  uint64_t v15 = v3[38];
  uint64_t v16 = v3[39];
  uint64_t v17 = v3[40];
  uint64_t v18 = v3[41];
  uint64_t v19 = v3[42];
  uint64_t v20 = v3[43];
  uint64_t v21 = v3[44];
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  sub_100082AA4(a1, v4);
  sub_100082AA4(a1, v5);
  sub_100082AA4(a1, v6);
  sub_100082AA4(a1, v7);
  sub_100082AA4(a1, v8);
  sub_100082AA4(a1, v9);
  sub_100082AA4(a1, v10);
  sub_100082AA4(a1, v11);
  sub_100082AA4(a1, v12);
  sub_100082AA4(a1, v13);
  sub_100082AA4(a1, v14);
  sub_100082AA4(a1, v15);
  sub_100082AA4(a1, v16);
  sub_100082AA4(a1, v17);
  sub_100082AA4(a1, v18);
  sub_100082AA4(a1, v19);
  sub_100082AA4(a1, v20);
  sub_100082AA4(a1, v21);
}

Swift::Int AWDLStatistics.LowLatencyStatistics.hashValue.getter()
{
  uint64_t v1 = (__int128 *)(v0 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0LL) + 20));
  __int128 v2 = v1[11];
  __int128 v38 = v1[10];
  __int128 v39 = v2;
  __int128 v40 = v1[12];
  uint64_t v3 = *((void *)v1 + 27);
  uint64_t v41 = *((void *)v1 + 26);
  __int128 v4 = v1[7];
  __int128 v34 = v1[6];
  __int128 v35 = v4;
  __int128 v5 = v1[9];
  __int128 v36 = v1[8];
  __int128 v37 = v5;
  __int128 v6 = v1[3];
  __int128 v30 = v1[2];
  __int128 v31 = v6;
  __int128 v7 = v1[5];
  __int128 v32 = v1[4];
  __int128 v33 = v7;
  __int128 v8 = v1[1];
  __int128 v28 = *v1;
  __int128 v29 = v8;
  uint64_t v9 = *((void *)v1 + 28);
  uint64_t v10 = *((void *)v1 + 29);
  uint64_t v11 = *((void *)v1 + 30);
  uint64_t v12 = *((void *)v1 + 31);
  uint64_t v13 = *((void *)v1 + 32);
  uint64_t v14 = *((void *)v1 + 33);
  uint64_t v15 = *((void *)v1 + 34);
  uint64_t v16 = *((void *)v1 + 35);
  uint64_t v18 = *((void *)v1 + 36);
  uint64_t v19 = *((void *)v1 + 37);
  uint64_t v20 = *((void *)v1 + 38);
  uint64_t v21 = *((void *)v1 + 39);
  uint64_t v22 = *((void *)v1 + 40);
  uint64_t v23 = *((void *)v1 + 41);
  uint64_t v24 = *((void *)v1 + 42);
  uint64_t v25 = *((void *)v1 + 43);
  uint64_t v26 = *((void *)v1 + 44);
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  sub_100082AA4((uint64_t)v27, v3);
  sub_100082AA4((uint64_t)v27, v9);
  sub_100082AA4((uint64_t)v27, v10);
  sub_100082AA4((uint64_t)v27, v11);
  sub_100082AA4((uint64_t)v27, v12);
  sub_100082AA4((uint64_t)v27, v13);
  sub_100082AA4((uint64_t)v27, v14);
  sub_100082AA4((uint64_t)v27, v15);
  sub_100082AA4((uint64_t)v27, v16);
  sub_100082AA4((uint64_t)v27, v18);
  sub_100082AA4((uint64_t)v27, v19);
  sub_100082AA4((uint64_t)v27, v20);
  sub_100082AA4((uint64_t)v27, v21);
  sub_100082AA4((uint64_t)v27, v22);
  sub_100082AA4((uint64_t)v27, v23);
  sub_100082AA4((uint64_t)v27, v24);
  sub_100082AA4((uint64_t)v27, v25);
  sub_100082AA4((uint64_t)v27, v26);
  return Hasher._finalize()();
}

Swift::Int sub_10014BD5C(uint64_t a1)
{
  uint64_t v3 = (__int128 *)(v1 + *(int *)(a1 + 20));
  __int128 v4 = v3[11];
  __int128 v40 = v3[10];
  __int128 v41 = v4;
  __int128 v42 = v3[12];
  uint64_t v5 = *((void *)v3 + 27);
  uint64_t v43 = *((void *)v3 + 26);
  __int128 v6 = v3[7];
  __int128 v36 = v3[6];
  __int128 v37 = v6;
  __int128 v7 = v3[9];
  __int128 v38 = v3[8];
  __int128 v39 = v7;
  __int128 v8 = v3[3];
  __int128 v32 = v3[2];
  __int128 v33 = v8;
  __int128 v9 = v3[5];
  __int128 v34 = v3[4];
  __int128 v35 = v9;
  __int128 v10 = v3[1];
  __int128 v30 = *v3;
  __int128 v31 = v10;
  uint64_t v11 = *((void *)v3 + 28);
  uint64_t v12 = *((void *)v3 + 29);
  uint64_t v13 = *((void *)v3 + 30);
  uint64_t v14 = *((void *)v3 + 31);
  uint64_t v15 = *((void *)v3 + 32);
  uint64_t v16 = *((void *)v3 + 33);
  uint64_t v17 = *((void *)v3 + 34);
  uint64_t v18 = *((void *)v3 + 35);
  uint64_t v20 = *((void *)v3 + 36);
  uint64_t v21 = *((void *)v3 + 37);
  uint64_t v22 = *((void *)v3 + 38);
  uint64_t v23 = *((void *)v3 + 39);
  uint64_t v24 = *((void *)v3 + 40);
  uint64_t v25 = *((void *)v3 + 41);
  uint64_t v26 = *((void *)v3 + 42);
  uint64_t v27 = *((void *)v3 + 43);
  uint64_t v28 = *((void *)v3 + 44);
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  sub_100082AA4((uint64_t)v29, v5);
  sub_100082AA4((uint64_t)v29, v11);
  sub_100082AA4((uint64_t)v29, v12);
  sub_100082AA4((uint64_t)v29, v13);
  sub_100082AA4((uint64_t)v29, v14);
  sub_100082AA4((uint64_t)v29, v15);
  sub_100082AA4((uint64_t)v29, v16);
  sub_100082AA4((uint64_t)v29, v17);
  sub_100082AA4((uint64_t)v29, v18);
  sub_100082AA4((uint64_t)v29, v20);
  sub_100082AA4((uint64_t)v29, v21);
  sub_100082AA4((uint64_t)v29, v22);
  sub_100082AA4((uint64_t)v29, v23);
  sub_100082AA4((uint64_t)v29, v24);
  sub_100082AA4((uint64_t)v29, v25);
  sub_100082AA4((uint64_t)v29, v26);
  sub_100082AA4((uint64_t)v29, v27);
  sub_100082AA4((uint64_t)v29, v28);
  return Hasher._finalize()();
}

void sub_10014BF30(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(a2 + 20));
  uint64_t v6 = v5[27];
  uint64_t v7 = v5[28];
  uint64_t v8 = v5[29];
  uint64_t v9 = v5[30];
  uint64_t v10 = v5[31];
  uint64_t v11 = v5[32];
  uint64_t v12 = v5[33];
  uint64_t v13 = v5[34];
  uint64_t v14 = v5[35];
  uint64_t v15 = v5[36];
  uint64_t v16 = v5[37];
  uint64_t v17 = v5[38];
  uint64_t v18 = v5[39];
  uint64_t v19 = v5[40];
  uint64_t v20 = v5[41];
  uint64_t v21 = v5[42];
  uint64_t v22 = v5[43];
  uint64_t v23 = v5[44];
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  sub_100082AA4(a1, v6);
  sub_100082AA4(a1, v7);
  sub_100082AA4(a1, v8);
  sub_100082AA4(a1, v9);
  sub_100082AA4(a1, v10);
  sub_100082AA4(a1, v11);
  sub_100082AA4(a1, v12);
  sub_100082AA4(a1, v13);
  sub_100082AA4(a1, v14);
  sub_100082AA4(a1, v15);
  sub_100082AA4(a1, v16);
  sub_100082AA4(a1, v17);
  sub_100082AA4(a1, v18);
  sub_100082AA4(a1, v19);
  sub_100082AA4(a1, v20);
  sub_100082AA4(a1, v21);
  sub_100082AA4(a1, v22);
  sub_100082AA4(a1, v23);
}

Swift::Int sub_10014C0E8(uint64_t a1, uint64_t a2)
{
  __int128 v4 = (__int128 *)(v2 + *(int *)(a2 + 20));
  __int128 v5 = v4[11];
  __int128 v41 = v4[10];
  __int128 v42 = v5;
  __int128 v43 = v4[12];
  uint64_t v6 = *((void *)v4 + 27);
  uint64_t v44 = *((void *)v4 + 26);
  __int128 v7 = v4[7];
  __int128 v37 = v4[6];
  __int128 v38 = v7;
  __int128 v8 = v4[9];
  __int128 v39 = v4[8];
  __int128 v40 = v8;
  __int128 v9 = v4[3];
  __int128 v33 = v4[2];
  __int128 v34 = v9;
  __int128 v10 = v4[5];
  __int128 v35 = v4[4];
  __int128 v36 = v10;
  __int128 v11 = v4[1];
  __int128 v31 = *v4;
  __int128 v32 = v11;
  uint64_t v12 = *((void *)v4 + 28);
  uint64_t v13 = *((void *)v4 + 29);
  uint64_t v14 = *((void *)v4 + 30);
  uint64_t v15 = *((void *)v4 + 31);
  uint64_t v16 = *((void *)v4 + 32);
  uint64_t v17 = *((void *)v4 + 33);
  uint64_t v18 = *((void *)v4 + 34);
  uint64_t v19 = *((void *)v4 + 35);
  uint64_t v21 = *((void *)v4 + 36);
  uint64_t v22 = *((void *)v4 + 37);
  uint64_t v23 = *((void *)v4 + 38);
  uint64_t v24 = *((void *)v4 + 39);
  uint64_t v25 = *((void *)v4 + 40);
  uint64_t v26 = *((void *)v4 + 41);
  uint64_t v27 = *((void *)v4 + 42);
  uint64_t v28 = *((void *)v4 + 43);
  uint64_t v29 = *((void *)v4 + 44);
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  sub_100082AA4((uint64_t)v30, v6);
  sub_100082AA4((uint64_t)v30, v12);
  sub_100082AA4((uint64_t)v30, v13);
  sub_100082AA4((uint64_t)v30, v14);
  sub_100082AA4((uint64_t)v30, v15);
  sub_100082AA4((uint64_t)v30, v16);
  sub_100082AA4((uint64_t)v30, v17);
  sub_100082AA4((uint64_t)v30, v18);
  sub_100082AA4((uint64_t)v30, v19);
  sub_100082AA4((uint64_t)v30, v21);
  sub_100082AA4((uint64_t)v30, v22);
  sub_100082AA4((uint64_t)v30, v23);
  sub_100082AA4((uint64_t)v30, v24);
  sub_100082AA4((uint64_t)v30, v25);
  sub_100082AA4((uint64_t)v30, v26);
  sub_100082AA4((uint64_t)v30, v27);
  sub_100082AA4((uint64_t)v30, v28);
  sub_100082AA4((uint64_t)v30, v29);
  return Hasher._finalize()();
}

BOOL sub_10014C2B8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = *(int *)(a3 + 20);
  __int128 v7 = *(_OWORD *)&a1[v6 + 176];
  v35[10]  = *(_OWORD *)&a1[v6 + 160];
  v35[11]  = v7;
  v35[12]  = *(_OWORD *)&a1[v6 + 192];
  uint64_t v36 = *(void *)&a1[v6 + 208];
  __int128 v8 = *(_OWORD *)&a1[v6 + 112];
  v35[6]  = *(_OWORD *)&a1[v6 + 96];
  v35[7]  = v8;
  __int128 v9 = *(_OWORD *)&a1[v6 + 144];
  v35[8]  = *(_OWORD *)&a1[v6 + 128];
  v35[9]  = v9;
  __int128 v10 = *(_OWORD *)&a1[v6 + 48];
  v35[2]  = *(_OWORD *)&a1[v6 + 32];
  v35[3]  = v10;
  __int128 v11 = *(_OWORD *)&a1[v6 + 80];
  v35[4]  = *(_OWORD *)&a1[v6 + 64];
  v35[5]  = v11;
  __int128 v12 = *(_OWORD *)&a1[v6 + 16];
  v35[0]  = *(_OWORD *)&a1[v6];
  v35[1]  = v12;
  __int128 v13 = *(_OWORD *)&a1[v6 + 296];
  __int128 v14 = *(_OWORD *)&a1[v6 + 328];
  __int128 v15 = *(_OWORD *)&a1[v6 + 344];
  v33[6]  = *(_OWORD *)&a1[v6 + 312];
  v33[7]  = v14;
  v33[8]  = v15;
  __int128 v16 = *(_OWORD *)&a1[v6 + 232];
  __int128 v17 = *(_OWORD *)&a1[v6 + 264];
  __int128 v18 = *(_OWORD *)&a1[v6 + 280];
  v33[2]  = *(_OWORD *)&a1[v6 + 248];
  v33[3]  = v17;
  v33[4]  = v18;
  v33[5]  = v13;
  v33[0]  = *(_OWORD *)&a1[v6 + 216];
  v33[1]  = v16;
  uint64_t v19 = &a2[v6];
  __int128 v20 = *((_OWORD *)v19 + 11);
  v37[10]  = *((_OWORD *)v19 + 10);
  v37[11]  = v20;
  v37[12]  = *((_OWORD *)v19 + 12);
  uint64_t v38 = *((void *)v19 + 26);
  __int128 v21 = *((_OWORD *)v19 + 7);
  v37[6]  = *((_OWORD *)v19 + 6);
  v37[7]  = v21;
  __int128 v22 = *((_OWORD *)v19 + 9);
  v37[8]  = *((_OWORD *)v19 + 8);
  v37[9]  = v22;
  __int128 v23 = *((_OWORD *)v19 + 3);
  v37[2]  = *((_OWORD *)v19 + 2);
  v37[3]  = v23;
  __int128 v24 = *((_OWORD *)v19 + 5);
  v37[4]  = *((_OWORD *)v19 + 4);
  v37[5]  = v24;
  __int128 v25 = *((_OWORD *)v19 + 1);
  v37[0]  = *(_OWORD *)v19;
  v37[1]  = v25;
  __int128 v26 = *(_OWORD *)(v19 + 296);
  __int128 v27 = *(_OWORD *)(v19 + 328);
  __int128 v28 = *(_OWORD *)(v19 + 344);
  v34[6]  = *(_OWORD *)(v19 + 312);
  v34[7]  = v27;
  v34[8]  = v28;
  __int128 v29 = *(_OWORD *)(v19 + 264);
  __int128 v30 = *(_OWORD *)(v19 + 280);
  v34[2]  = *(_OWORD *)(v19 + 248);
  v34[3]  = v29;
  __int128 v31 = *(_OWORD *)(v19 + 232);
  v34[4]  = v30;
  v34[5]  = v26;
  v34[0]  = *(_OWORD *)(v19 + 216);
  v34[1]  = v31;
  if (!_s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV6CountsV23__derived_struct_equalsySbAI_AItFZ_0( v35,  v37)) {
    return 0LL;
  }
  return _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV10HistogramsV23__derived_struct_equalsySbAI_AItFZ_0( (uint64_t *)v33,  (uint64_t *)v34);
}

void AWDLStatistics.AirPlayStatistics.Histograms.hash(into:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Swift::UInt v9 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v9);
  if (v9)
  {
    __int128 v10 = (Swift::UInt32 *)(a2 + 32);
    do
    {
      Swift::UInt32 v11 = *v10++;
      Hasher._combine(_:)(v11);
      --v9;
    }

    while (v9);
  }

  Swift::UInt v12 = *(void *)(a3 + 16);
  Hasher._combine(_:)(v12);
  if (v12)
  {
    __int128 v13 = (Swift::UInt32 *)(a3 + 32);
    do
    {
      Swift::UInt32 v14 = *v13++;
      Hasher._combine(_:)(v14);
      --v12;
    }

    while (v12);
  }

  Swift::UInt v15 = *(void *)(a4 + 16);
  Hasher._combine(_:)(v15);
  if (v15)
  {
    __int128 v16 = (Swift::UInt32 *)(a4 + 32);
    do
    {
      Swift::UInt32 v17 = *v16++;
      Hasher._combine(_:)(v17);
      --v15;
    }

    while (v15);
  }

  Swift::UInt v18 = *(void *)(a5 + 16);
  Hasher._combine(_:)(v18);
  if (v18)
  {
    uint64_t v19 = (Swift::UInt32 *)(a5 + 32);
    do
    {
      Swift::UInt32 v20 = *v19++;
      Hasher._combine(_:)(v20);
      --v18;
    }

    while (v18);
  }

BOOL static AWDLStatistics.AirPlayStatistics.Histograms.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100079910(a1, a5) && sub_100079910(a2, a6) && sub_100079910(a3, a7) && sub_100079910(a4, a8);
}

Swift::Int AWDLStatistics.AirPlayStatistics.Histograms.hashValue.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Hasher._finalize()();
}

Swift::Int sub_10014C5C8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  Hasher.init(_seed:)(v6, 0LL);
  AWDLStatistics.AirPlayStatistics.Histograms.hash(into:)((uint64_t)v6, v1, v2, v4, v3);
  return Hasher._finalize()();
}

void sub_10014C624(uint64_t a1)
{
}

Swift::Int sub_10014C630(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v4 = v1[3];
  Hasher.init(_seed:)(v7, a1);
  AWDLStatistics.AirPlayStatistics.Histograms.hash(into:)((uint64_t)v7, v2, v3, v5, v4);
  return Hasher._finalize()();
}

BOOL sub_10014C688(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v5 = a2[1];
  uint64_t v7 = a2[2];
  uint64_t v6 = a2[3];
  return sub_100079910(*a1, *a2) && sub_100079910(v2, v5) && sub_100079910(v4, v7) && sub_100079910(v3, v6);
}

uint64_t AWDLStatistics.AirPlayStatistics.clientModeDuration.getter()
{
  return *(unsigned int *)(v0 + 24);
}

uint64_t AWDLStatistics.AirPlayStatistics.splitModeDuration.getter()
{
  return *(unsigned int *)(v0 + 28);
}

uint64_t AWDLStatistics.AirPlayStatistics.splitModeDuration.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 28)  = result;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.routablePeerCount.getter()
{
  return *(unsigned __int16 *)(v0 + 34);
}

uint64_t AWDLStatistics.AirPlayStatistics.routablePeerCount.setter(uint64_t result)
{
  *(_WORD *)(v1 + 34)  = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.routablePeerCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.sequenceNumberNotUpdatedCount.getter()
{
  return *(unsigned __int16 *)(v0 + 36);
}

uint64_t AWDLStatistics.AirPlayStatistics.sequenceNumberNotUpdatedCount.setter(uint64_t result)
{
  *(_WORD *)(v1 + 36)  = result;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.missingAWStartEventCount.getter()
{
  return *(unsigned __int16 *)(v0 + 38);
}

uint64_t AWDLStatistics.AirPlayStatistics.missingAWStartEventCount.setter(uint64_t result)
{
  *(_WORD *)(v1 + 38)  = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.missingAWStartEventCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.psfEnabledCount.getter()
{
  return *(unsigned __int16 *)(v0 + 40);
}

uint64_t AWDLStatistics.AirPlayStatistics.psfEnabledCount.setter(uint64_t result)
{
  *(_WORD *)(v1 + 40)  = result;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.awdlVersion.getter()
{
  return *(unsigned __int8 *)(v0 + 42);
}

uint64_t AWDLStatistics.AirPlayStatistics.awdlVersion.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 42)  = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.awdlVersion.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.infraDisconnectedCount.getter()
{
  return *(unsigned __int8 *)(v0 + 43);
}

uint64_t AWDLStatistics.AirPlayStatistics.infraDisconnectedCount.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 43)  = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.infraDisconnectedCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.selfInfraChannel.getter()
{
  return *(unsigned __int8 *)(v0 + 44);
}

uint64_t AWDLStatistics.AirPlayStatistics.selfInfraChannel.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 44)  = result;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.selfInfraChannelFlags.getter()
{
  return *(unsigned int *)(v0 + 48);
}

uint64_t AWDLStatistics.AirPlayStatistics.selfInfraChannelFlags.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 48)  = result;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.peerInfraChannel.getter()
{
  return *(unsigned __int8 *)(v0 + 52);
}

uint64_t AWDLStatistics.AirPlayStatistics.peerInfraChannel.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 52)  = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.peerInfraChannel.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.peerInfraChannelFlags.getter()
{
  return *(unsigned int *)(v0 + 56);
}

uint64_t AWDLStatistics.AirPlayStatistics.peerInfraChannelFlags.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 56)  = result;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.senderPlatform.getter()
{
  return *(unsigned __int8 *)(v0 + 60);
}

uint64_t AWDLStatistics.AirPlayStatistics.senderPlatform.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 60)  = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.senderPlatform.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.startingRSSI.getter()
{
  return *(unsigned __int8 *)(v0 + 61);
}

uint64_t AWDLStatistics.AirPlayStatistics.startingRSSI.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 61)  = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.startingRSSI.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.inRetroMode.getter()
{
  return *(unsigned __int8 *)(v0 + 62);
}

uint64_t AWDLStatistics.AirPlayStatistics.inRetroMode.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 62)  = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.inRetroMode.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.selfIsSDB.getter()
{
  return *(unsigned __int8 *)(v0 + 66);
}

uint64_t AWDLStatistics.AirPlayStatistics.selfIsSDB.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 66)  = result;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.peerIsSDB.getter()
{
  return *(unsigned __int8 *)(v0 + 67);
}

uint64_t AWDLStatistics.AirPlayStatistics.peerIsSDB.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 67)  = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.peerIsSDB.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.roamOutOf6GCount.getter()
{
  return *(unsigned __int8 *)(v0 + 68);
}

uint64_t AWDLStatistics.AirPlayStatistics.roamOutOf6GCount.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 68)  = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.roamOutOf6GCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.roamOutOf6GSuccess.getter()
{
  return *(unsigned __int8 *)(v0 + 69);
}

uint64_t AWDLStatistics.AirPlayStatistics.roamOutOf6GSuccess.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 69)  = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.roamOutOf6GSuccess.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.roamOutOf6GFailure.getter()
{
  return *(unsigned __int8 *)(v0 + 70);
}

uint64_t AWDLStatistics.AirPlayStatistics.roamOutOf6GFailure.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 70)  = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.roamOutOf6GFailure.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.forceRoamHasChannelsCnt.getter()
{
  return *(unsigned __int8 *)(v0 + 71);
}

uint64_t AWDLStatistics.AirPlayStatistics.forceRoamHasChannelsCnt.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 71)  = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.forceRoamHasChannelsCnt.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.forceRoamHasNoChannelCnt.getter()
{
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t AWDLStatistics.AirPlayStatistics.forceRoamHasNoChannelCnt.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 72)  = result;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.histograms.getter()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v4 = v0[12];
  uint64_t v3 = v0[13];
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v3);
  return v1;
}

uint64_t AWDLStatistics.AirPlayStatistics.histograms.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = swift_bridgeObjectRelease(v4[13]);
  v4[10]  = a1;
  v4[11]  = a2;
  v4[12]  = a3;
  v4[13]  = a4;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.eventPayload.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = _swiftEmptyDictionarySingleton;
  unint64_t v83 = _swiftEmptyDictionarySingleton;
  uint64_t v3 = *v0;
  char v82 = &type metadata for UInt64;
  *(void *)&__int128 v81 = v3;
  sub_100022594(&v81, v80);
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 0LL, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v5 = v0[1];
  char v82 = &type metadata for UInt64;
  *(void *)&__int128 v81 = v5;
  sub_100022594(&v81, v80);
  char v6 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 1LL, v6);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int v7 = *((_DWORD *)v0 + 4);
  char v82 = &type metadata for UInt32;
  LODWORD(v81)  = v7;
  sub_100022594(&v81, v80);
  char v8 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 2LL, v8);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int v9 = *((_DWORD *)v0 + 5);
  char v82 = &type metadata for UInt32;
  LODWORD(v81)  = v9;
  sub_100022594(&v81, v80);
  char v10 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 3LL, v10);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int v11 = *((_DWORD *)v0 + 6);
  char v82 = &type metadata for UInt32;
  LODWORD(v81)  = v11;
  sub_100022594(&v81, v80);
  char v12 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 4LL, v12);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int v13 = *((_DWORD *)v0 + 7);
  char v82 = &type metadata for UInt32;
  LODWORD(v81)  = v13;
  sub_100022594(&v81, v80);
  char v14 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 5LL, v14);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  __int16 v15 = *((_WORD *)v0 + 16);
  char v82 = &type metadata for UInt16;
  LOWORD(v81)  = v15;
  sub_100022594(&v81, v80);
  char v16 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 6LL, v16);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  __int16 v17 = *((_WORD *)v0 + 17);
  char v82 = &type metadata for UInt16;
  LOWORD(v81)  = v17;
  sub_100022594(&v81, v80);
  char v18 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 7LL, v18);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  __int16 v19 = *((_WORD *)v0 + 18);
  char v82 = &type metadata for UInt16;
  LOWORD(v81)  = v19;
  sub_100022594(&v81, v80);
  char v20 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 8LL, v20);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  __int16 v21 = *((_WORD *)v0 + 19);
  char v82 = &type metadata for UInt16;
  LOWORD(v81)  = v21;
  sub_100022594(&v81, v80);
  char v22 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 9LL, v22);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  __int16 v23 = *((_WORD *)v0 + 20);
  char v82 = &type metadata for UInt16;
  LOWORD(v81)  = v23;
  sub_100022594(&v81, v80);
  char v24 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 10LL, v24);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v25 = *((_BYTE *)v0 + 42);
  char v82 = &type metadata for UInt8;
  LOBYTE(v81)  = v25;
  sub_100022594(&v81, v80);
  char v26 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 11LL, v26);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v27 = *((_BYTE *)v0 + 43);
  char v82 = &type metadata for UInt8;
  LOBYTE(v81)  = v27;
  sub_100022594(&v81, v80);
  char v28 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 12LL, v28);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v29 = *((_BYTE *)v0 + 44);
  char v82 = &type metadata for UInt8;
  LOBYTE(v81)  = v29;
  sub_100022594(&v81, v80);
  char v30 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 13LL, v30);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int v31 = *((_DWORD *)v0 + 12);
  char v82 = &type metadata for UInt32;
  LODWORD(v81)  = v31;
  sub_100022594(&v81, v80);
  char v32 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 14LL, v32);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v33 = *((_BYTE *)v0 + 52);
  char v82 = &type metadata for UInt8;
  LOBYTE(v81)  = v33;
  sub_100022594(&v81, v80);
  char v34 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 15LL, v34);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int v35 = *((_DWORD *)v0 + 14);
  char v82 = &type metadata for UInt32;
  LODWORD(v81)  = v35;
  sub_100022594(&v81, v80);
  char v36 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 16LL, v36);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v37 = *((_BYTE *)v0 + 60);
  char v82 = &type metadata for UInt8;
  LOBYTE(v81)  = v37;
  sub_100022594(&v81, v80);
  char v38 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 17LL, v38);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v39 = *((_BYTE *)v0 + 61);
  char v82 = &type metadata for Int8;
  LOBYTE(v81)  = v39;
  sub_100022594(&v81, v80);
  char v40 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 18LL, v40);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v41 = *((_BYTE *)v0 + 62);
  char v82 = &type metadata for Bool;
  LOBYTE(v81)  = v41;
  sub_100022594(&v81, v80);
  char v42 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 19LL, v42);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v43 = *((_BYTE *)v0 + 63);
  char v82 = &type metadata for Bool;
  LOBYTE(v81)  = v43;
  sub_100022594(&v81, v80);
  char v44 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 20LL, v44);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v45 = *((_BYTE *)v0 + 64);
  char v82 = &type metadata for Bool;
  LOBYTE(v81)  = v45;
  sub_100022594(&v81, v80);
  char v46 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 21LL, v46);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v47 = *((_BYTE *)v0 + 65);
  char v82 = &type metadata for Bool;
  LOBYTE(v81)  = v47;
  sub_100022594(&v81, v80);
  char v48 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 22LL, v48);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v49 = *((_BYTE *)v0 + 66);
  char v82 = &type metadata for Bool;
  LOBYTE(v81)  = v49;
  sub_100022594(&v81, v80);
  char v50 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 23LL, v50);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v51 = *((_BYTE *)v0 + 67);
  char v82 = &type metadata for Bool;
  LOBYTE(v81)  = v51;
  sub_100022594(&v81, v80);
  char v52 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 24LL, v52);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v53 = *((_BYTE *)v0 + 68);
  char v82 = &type metadata for UInt8;
  LOBYTE(v81)  = v53;
  sub_100022594(&v81, v80);
  char v54 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 25LL, v54);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v55 = *((_BYTE *)v0 + 69);
  char v82 = &type metadata for UInt8;
  LOBYTE(v81)  = v55;
  sub_100022594(&v81, v80);
  char v56 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 26LL, v56);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v57 = *((_BYTE *)v0 + 70);
  char v82 = &type metadata for UInt8;
  LOBYTE(v81)  = v57;
  sub_100022594(&v81, v80);
  char v58 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 27LL, v58);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v59 = *((_BYTE *)v0 + 71);
  char v82 = &type metadata for UInt8;
  LOBYTE(v81)  = v59;
  sub_100022594(&v81, v80);
  char v60 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 28LL, v60);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v61 = *((_BYTE *)v0 + 72);
  char v82 = &type metadata for UInt8;
  LOBYTE(v81)  = v61;
  sub_100022594(&v81, v80);
  char v62 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100020004(v80, 29LL, v62);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v63 = v0[10];
  uint64_t v64 = v0[11];
  uint64_t v66 = v1[12];
  uint64_t v65 = v1[13];
  sub_100154E14(v63, 0);
  sub_100154E14(v65, 3);
  sub_100154E14(v66, 2);
  sub_100154E14(v64, 1);
  uint64_t v67 = swift_bridgeObjectRetain(_swiftEmptyDictionarySingleton);
  uint64_t v68 = sub_100145D9C(v67, (uint64_t (*)(void))sub_10014E678, &qword_100409588);
  uint64_t v69 = *(void *)(v68 + 16);
  if (v69)
  {
    sub_100002274(&qword_100409230);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)(v69);
  }

  *(void *)&__int128 v81 = v2;
  char v70 = (void *)swift_bridgeObjectRetain(v68);
  sub_100153550(v70, 1, &v81);
  swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(v68);
  uint64_t v71 = v81;
  uint64_t v72 = v83;
  uint64_t v73 = swift_bridgeObjectRetain(v83);
  uint64_t v74 = sub_100145A5C(v73);
  uint64_t v75 = *(void *)(v74 + 16);
  if (v75)
  {
    sub_100002274(&qword_100409230);
    char v76 = (void *)static _DictionaryStorage.allocate(capacity:)(v75);
  }

  else
  {
    char v76 = _swiftEmptyDictionarySingleton;
  }

  *(void *)&__int128 v81 = v76;
  uint64_t v77 = (void *)swift_bridgeObjectRetain(v74);
  sub_100153550(v77, 1, &v81);
  swift_bridgeObjectRelease(v72);
  swift_bridgeObjectRelease(v74);
  uint64_t v78 = sub_1001464B0( v81,  v71,  (uint64_t)sub_10018D50C,  (void (*)(uint64_t, uint64_t, void, uint64_t, uint64_t *))sub_1001538DC);
  swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(v72);
  return v78;
}

void AWDLStatistics.AirPlayStatistics.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*(void *)v2);
  Hasher._combine(_:)(*(void *)(v2 + 8));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 16));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 20));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 24));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 28));
  Hasher._combine(_:)(*(_WORD *)(v2 + 32));
  Hasher._combine(_:)(*(_WORD *)(v2 + 34));
  Hasher._combine(_:)(*(_WORD *)(v2 + 36));
  Hasher._combine(_:)(*(_WORD *)(v2 + 38));
  Hasher._combine(_:)(*(_WORD *)(v2 + 40));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 42));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 43));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 44));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 48));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 52));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 56));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 60));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 61));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 62) & 1);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 63) & 1);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 64) & 1);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 65) & 1);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 66) & 1);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 67) & 1);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 68));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 69));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 70));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 71));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 72));
  AWDLStatistics.AirPlayStatistics.Histograms.hash(into:)( a1,  *(void *)(v2 + 80),  *(void *)(v2 + 88),  *(void *)(v2 + 96),  *(void *)(v2 + 104));
}

Swift::Int AWDLStatistics.AirPlayStatistics.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t sub_10014D54C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10014D580 + 4 * byte_100349D04[a1]))( 0x65636976726573LL,  0xE700000000000000LL);
}

uint64_t sub_10014D580()
{
  return 0x6172666E49796DLL;
}

uint64_t sub_10014D594()
{
  return 0x72666E4972656570LL;
}

uint64_t sub_10014D5B0()
{
  return 0x424453796DLL;
}

uint64_t sub_10014D5C4()
{
  return 0x42445372656570LL;
}

unint64_t sub_10014D5D8()
{
  return 0xD000000000000011LL;
}

uint64_t sub_10014D5F4()
{
  return 0x44495353656D6173LL;
}

uint64_t sub_10014D60C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10014D63C + 4 * word_100349D0C[a1]))( 0x4244537369LL,  0xE500000000000000LL);
}

uint64_t sub_10014D63C()
{
  return 0x437972746E756F63LL;
}

uint64_t sub_10014D65C()
{
  return 0x6973735272656570LL;
}

uint64_t sub_10014D688()
{
  return 0x6163437874LL;
}

unint64_t sub_10014D698()
{
  return 0xD000000000000018LL;
}

Swift::Int sub_10014DC74(uint64_t a1)
{
  return Hasher._finalize()();
}

BOOL sub_10014DCAC(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[5];
  void v13[4] = a1[4];
  v13[5]  = v2;
  __int128 v3 = a1[6];
  __int128 v4 = a1[1];
  v13[0]  = *a1;
  v13[1]  = v4;
  __int128 v5 = a1[3];
  _OWORD v13[2] = a1[2];
  void v13[3] = v5;
  __int128 v6 = *a2;
  __int128 v7 = a2[1];
  v13[6]  = v3;
  v14[0]  = v6;
  __int128 v8 = a2[2];
  __int128 v9 = a2[3];
  __int128 v10 = a2[6];
  v14[5]  = a2[5];
  v14[6]  = v10;
  __int128 v11 = a2[4];
  v14[3]  = v9;
  v14[4]  = v11;
  v14[1]  = v7;
  void v14[2] = v8;
  return _s7CoreP2P14AWDLStatisticsO17AirPlayStatisticsV23__derived_struct_equalsySbAE_AEtFZ_0( (uint64_t)v13,  (uint64_t)v14);
}

uint64_t sub_10014DD10(char *a1, char *a2)
{
  return sub_10002AE84(*a1, *a2);
}

Swift::Int sub_10014DD1C()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  if (v1) {
    uint64_t v2 = 0x64657463656A6572LL;
  }
  else {
    uint64_t v2 = 0x6553657669746361LL;
  }
  if (v1) {
    unint64_t v3 = 0xEF65636976726553LL;
  }
  else {
    unint64_t v3 = 0xED00006563697672LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10014DDB4(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 0x64657463656A6572LL;
  }
  else {
    uint64_t v2 = 0x6553657669746361LL;
  }
  if (*v1) {
    unint64_t v3 = 0xEF65636976726553LL;
  }
  else {
    unint64_t v3 = 0xED00006563697672LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10014DE28(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2) {
    uint64_t v3 = 0x64657463656A6572LL;
  }
  else {
    uint64_t v3 = 0x6553657669746361LL;
  }
  if (v2) {
    unint64_t v4 = 0xEF65636976726553LL;
  }
  else {
    unint64_t v4 = 0xED00006563697672LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10014DEBC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue  = &off_1003D53A8;
  return sub_10014E378(v2, a1, a2);
}

void sub_10014DEC8(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6553657669746361LL;
  if (*v1) {
    uint64_t v2 = 0x64657463656A6572LL;
  }
  unint64_t v3 = 0xED00006563697672LL;
  if (*v1) {
    unint64_t v3 = 0xEF65636976726553LL;
  }
  *a1  = v2;
  a1[1]  = v3;
}

void sub_10014DF20(char *a1)
{
}

void sub_10014DF2C()
{
}

void sub_10014DF38(uint64_t a1)
{
}

void sub_10014DF40(uint64_t a1)
{
}

unint64_t sub_10014DF48@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100154BD0(*a1);
  *a2  = result;
  return result;
}

uint64_t sub_10014DF74@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10014D54C(*v1);
  *a1  = result;
  a1[1]  = v4;
  return result;
}

uint64_t sub_10014DF9C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10002AD5C(*a1, *a2);
}

Swift::Int sub_10014DFA8()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v7, 0LL);
  unint64_t v2 = 0xEB00000000726F74LL;
  uint64_t v3 = 0x616974696E497369LL;
  if (v1 != 1)
  {
    uint64_t v3 = 0x6E6F697461727564LL;
    unint64_t v2 = 0xE800000000000000LL;
  }

  if (v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x65636976726573LL;
  }
  if (v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xE700000000000000LL;
  }
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10014E050(uint64_t a1)
{
  unint64_t v2 = 0xEB00000000726F74LL;
  uint64_t v3 = 0x616974696E497369LL;
  if (*v1 != 1)
  {
    uint64_t v3 = 0x6E6F697461727564LL;
    unint64_t v2 = 0xE800000000000000LL;
  }

  if (*v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x65636976726573LL;
  }
  if (*v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xE700000000000000LL;
  }
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10014E0D4(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  unint64_t v3 = 0xEB00000000726F74LL;
  uint64_t v4 = 0x616974696E497369LL;
  if (v2 != 1)
  {
    uint64_t v4 = 0x6E6F697461727564LL;
    unint64_t v3 = 0xE800000000000000LL;
  }

  if (v2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0x65636976726573LL;
  }
  if (v2) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = 0xE700000000000000LL;
  }
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_10014E178@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue  = &off_1003D5D50;
  unint64_t result = sub_100154C18(*a1, v3);
  *a2  = result;
  return result;
}

void sub_10014E1AC(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE700000000000000LL;
  unint64_t v4 = 0xEB00000000726F74LL;
  uint64_t v5 = 0x616974696E497369LL;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6E6F697461727564LL;
    unint64_t v4 = 0xE800000000000000LL;
  }

  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x65636976726573LL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1  = v7;
  a1[1]  = v3;
}

uint64_t sub_10014E214(char *a1, char *a2)
{
  return sub_10002AAC4(*a1, *a2);
}

Swift::Int sub_10014E220()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  if (v1) {
    uint64_t v2 = 0x6E6F73616572LL;
  }
  else {
    uint64_t v2 = 0x65636976726573LL;
  }
  if (v1) {
    unint64_t v3 = 0xE600000000000000LL;
  }
  else {
    unint64_t v3 = 0xE700000000000000LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10014E29C(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 0x6E6F73616572LL;
  }
  else {
    uint64_t v2 = 0x65636976726573LL;
  }
  if (*v1) {
    unint64_t v3 = 0xE600000000000000LL;
  }
  else {
    unint64_t v3 = 0xE700000000000000LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10014E2F4(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2) {
    uint64_t v3 = 0x6E6F73616572LL;
  }
  else {
    uint64_t v3 = 0x65636976726573LL;
  }
  if (v2) {
    unint64_t v4 = 0xE600000000000000LL;
  }
  else {
    unint64_t v4 = 0xE700000000000000LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10014E36C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue  = &off_1003D5E80;
  return sub_10014E378(v2, a1, a2);
}

uint64_t sub_10014E378@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, char *a3@<X8>)
{
  v4._uint64_t countAndFlagsBits = *a2;
  uint64_t v5 = (void *)a2[1];
  v4._object  = v5;
  Swift::Int v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease(v5);
  if (v6 == 1) {
    char v8 = 1;
  }
  else {
    char v8 = 2;
  }
  if (!v6) {
    char v8 = 0;
  }
  *a3  = v8;
  return result;
}

void sub_10014E3D0(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x65636976726573LL;
  if (*v1) {
    uint64_t v2 = 0x6E6F73616572LL;
  }
  unint64_t v3 = 0xE700000000000000LL;
  if (*v1) {
    unint64_t v3 = 0xE600000000000000LL;
  }
  *a1  = v2;
  a1[1]  = v3;
}

uint64_t sub_10014E40C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_10014E9A0(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_10014D60C);
}

Swift::Int sub_10014E418(uint64_t a1, uint64_t a2)
{
  return sub_10014EA38(a1, a2, (uint64_t (*)(uint64_t))sub_10014D60C);
}

uint64_t sub_10014E424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10014EAA8(a1, a2, a3, (uint64_t (*)(void))sub_10014D60C);
}

Swift::Int sub_10014E430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10014EAF4(a1, a2, a3, (uint64_t (*)(uint64_t))sub_10014D60C);
}

uint64_t sub_10014E43C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100154B80(*a1, a1[1]);
  *a2  = result;
  return result;
}

uint64_t sub_10014E468@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10014D60C(*v1);
  *a1  = result;
  a1[1]  = v4;
  return result;
}

uint64_t sub_10014E490(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10014E4D0 + 4 * byte_100349D92[a1]))( 0x446C61746F547874LL,  0xEC00000079616C65LL);
}

unint64_t sub_10014E4D0()
{
  return 0xD000000000000011LL;
}

unint64_t sub_10014E56C()
{
  return 0xD000000000000015LL;
}

uint64_t sub_10014E5C8()
{
  return 0x6163437874LL;
}

uint64_t sub_10014E5DC()
{
  return 0x4365756575716572LL;
}

uint64_t sub_10014E5FC()
{
  return 0x446C61746F547872LL;
}

uint64_t sub_10014E664()
{
  return 0x495353527872LL;
}

uint64_t sub_10014E678(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10014E6B0 + 4 * byte_100349DA4[a1]))( 0x73657479427874LL,  0xE700000000000000LL);
}

uint64_t sub_10014E6B0()
{
  return 0x73657479427872LL;
}

uint64_t sub_10014E6C4()
{
  return 0x7275446C61746F74LL;
}

unint64_t sub_10014E6E8()
{
  return 0xD000000000000012LL;
}

uint64_t sub_10014E994(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_10014E9A0(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_10014E678);
}

uint64_t sub_10014E9A0( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a5(*a1);
  uint64_t v9 = v8;
  uint64_t v10 = a5(v6);
  if (v7 == v10 && v9 == v11)
  {
    char v14 = 1;
    uint64_t v13 = v9;
  }

  else
  {
    uint64_t v13 = v11;
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
  }

  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v13);
  return v14 & 1;
}

Swift::Int sub_10014EA2C(uint64_t a1, uint64_t a2)
{
  return sub_10014EA38(a1, a2, (uint64_t (*)(uint64_t))sub_10014E678);
}

Swift::Int sub_10014EA38(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)(v10, 0LL);
  uint64_t v6 = a3(v5);
  uint64_t v8 = v7;
  String.hash(into:)(v10, v6, v7);
  swift_bridgeObjectRelease(v8);
  return Hasher._finalize()();
}

uint64_t sub_10014EA9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10014EAA8(a1, a2, a3, (uint64_t (*)(void))sub_10014E678);
}

uint64_t sub_10014EAA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(*v4);
  uint64_t v8 = v7;
  String.hash(into:)(a1, v6, v7);
  return swift_bridgeObjectRelease(v8);
}

Swift::Int sub_10014EAE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10014EAF4(a1, a2, a3, (uint64_t (*)(uint64_t))sub_10014E678);
}

Swift::Int sub_10014EAF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)(v11, a1);
  uint64_t v7 = a4(v6);
  uint64_t v9 = v8;
  String.hash(into:)(v11, v7, v8);
  swift_bridgeObjectRelease(v9);
  return Hasher._finalize()();
}

uint64_t sub_10014EB54@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100154B30(*a1, a1[1]);
  *a2  = result;
  return result;
}

uint64_t sub_10014EB80@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10014E678(*v1);
  *a1  = result;
  a1[1]  = v4;
  return result;
}

void *eventPayload(for:)(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 4);
  unint64_t v3 = (char *)&type metadata for UInt32;
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v2;
  sub_100022594(__dst, &v218);
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  *(void *)&v216  = _swiftEmptyDictionarySingleton;
  sub_10001EDDC(&v218, 0xD000000000000010LL, 0x8000000100365300LL, isUniquelyReferenced_nonNull_native);
  uint64_t v5 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int v6 = *(_DWORD *)(a1 + 8);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v6;
  sub_100022594(__dst, &v218);
  char v7 = swift_isUniquelyReferenced_nonNull_native(v5);
  *(void *)&v216  = v5;
  sub_10001EDDC(&v218, 0xD000000000000012LL, 0x8000000100365320LL, v7);
  uint64_t v8 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int v9 = *(_DWORD *)(a1 + 12);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v9;
  sub_100022594(__dst, &v218);
  char v10 = swift_isUniquelyReferenced_nonNull_native(v8);
  *(void *)&v216  = v8;
  sub_10001EDDC(&v218, 0xD000000000000012LL, 0x8000000100365340LL, v10);
  uint64_t v11 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int v12 = *(_DWORD *)(a1 + 16);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v12;
  sub_100022594(__dst, &v218);
  char v13 = swift_isUniquelyReferenced_nonNull_native(v11);
  *(void *)&v216  = v11;
  sub_10001EDDC(&v218, 0xD00000000000001ALL, 0x8000000100365360LL, v13);
  uint64_t v14 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int v15 = *(_DWORD *)(a1 + 20);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v15;
  sub_100022594(__dst, &v218);
  char v16 = swift_isUniquelyReferenced_nonNull_native(v14);
  *(void *)&v216  = v14;
  sub_10001EDDC(&v218, 0xD00000000000001DLL, 0x8000000100365380LL, v16);
  uint64_t v17 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v18 = *(_BYTE *)(a1 + 24);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt8;
  LOBYTE(__dst[0])  = v18;
  sub_100022594(__dst, &v218);
  char v19 = swift_isUniquelyReferenced_nonNull_native(v17);
  *(void *)&v216  = v17;
  sub_10001EDDC(&v218, 0xD00000000000001DLL, 0x80000001003653A0LL, v19);
  uint64_t v20 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v21 = *(_BYTE *)(a1 + 25);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt8;
  LOBYTE(__dst[0])  = v21;
  sub_100022594(__dst, &v218);
  char v22 = swift_isUniquelyReferenced_nonNull_native(v20);
  *(void *)&v216  = v20;
  sub_10001EDDC(&v218, 0xD000000000000014LL, 0x80000001003653C0LL, v22);
  uint64_t v23 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v24 = *(_BYTE *)(a1 + 26);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt8;
  LOBYTE(__dst[0])  = v24;
  sub_100022594(__dst, &v218);
  char v25 = swift_isUniquelyReferenced_nonNull_native(v23);
  *(void *)&v216  = v23;
  sub_10001EDDC(&v218, 0xD00000000000001BLL, 0x80000001003653E0LL, v25);
  uint64_t v26 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v27 = *(_BYTE *)(a1 + 27);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt8;
  LOBYTE(__dst[0])  = v27;
  sub_100022594(__dst, &v218);
  char v28 = swift_isUniquelyReferenced_nonNull_native(v26);
  *(void *)&v216  = v26;
  sub_10001EDDC(&v218, 0xD000000000000020LL, 0x8000000100365400LL, v28);
  uint64_t v29 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v30 = *(_BYTE *)(a1 + 28);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt8;
  LOBYTE(__dst[0])  = v30;
  sub_100022594(__dst, &v218);
  char v31 = swift_isUniquelyReferenced_nonNull_native(v29);
  *(void *)&v216  = v29;
  sub_10001EDDC(&v218, 0xD000000000000020LL, 0x8000000100365430LL, v31);
  uint64_t v32 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v33 = *(_BYTE *)(a1 + 29);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt8;
  LOBYTE(__dst[0])  = v33;
  sub_100022594(__dst, &v218);
  char v34 = swift_isUniquelyReferenced_nonNull_native(v32);
  *(void *)&v216  = v32;
  sub_10001EDDC(&v218, 0xD00000000000001FLL, 0x8000000100365460LL, v34);
  uint64_t v35 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v36 = *(_BYTE *)(a1 + 30);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt8;
  LOBYTE(__dst[0])  = v36;
  sub_100022594(__dst, &v218);
  char v37 = swift_isUniquelyReferenced_nonNull_native(v35);
  *(void *)&v216  = v35;
  sub_10001EDDC(&v218, 0xD000000000000023LL, 0x8000000100365480LL, v37);
  uint64_t v38 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v39 = *(_BYTE *)(a1 + 31);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt8;
  LOBYTE(__dst[0])  = v39;
  sub_100022594(__dst, &v218);
  char v40 = swift_isUniquelyReferenced_nonNull_native(v38);
  *(void *)&v216  = v38;
  sub_10001EDDC(&v218, 0xD000000000000026LL, 0x80000001003654B0LL, v40);
  uint64_t v41 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v42 = *(_BYTE *)(a1 + 32);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt8;
  LOBYTE(__dst[0])  = v42;
  sub_100022594(__dst, &v218);
  char v43 = swift_isUniquelyReferenced_nonNull_native(v41);
  *(void *)&v216  = v41;
  sub_10001EDDC(&v218, 0xD000000000000026LL, 0x80000001003654E0LL, v43);
  uint64_t v44 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v45 = *(void *)(a1 + 40);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt64;
  *(void *)&__dst[0]  = v45;
  sub_100022594(__dst, &v218);
  char v46 = swift_isUniquelyReferenced_nonNull_native(v44);
  *(void *)&v216  = v44;
  sub_10001EDDC(&v218, 0xD00000000000001FLL, 0x8000000100365510LL, v46);
  uint64_t v47 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v48 = *(void *)(a1 + 88);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt64;
  *(void *)&__dst[0]  = v48;
  sub_100022594(__dst, &v218);
  char v49 = swift_isUniquelyReferenced_nonNull_native(v47);
  *(void *)&v216  = v47;
  sub_10001EDDC(&v218, 0xD00000000000001BLL, 0x8000000100365530LL, v49);
  uint64_t v50 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  *((void *)&v219[0] + 1)  = sub_100002274(&qword_1004092D0);
  uint64_t v51 = *((void *)&v219[0] + 1);
  v211  = *((void *)&v219[0] + 1);
  __int128 v52 = *(_OWORD *)(a1 + 208);
  __dst[6]  = *(_OWORD *)(a1 + 192);
  __dst[7]  = v52;
  __dst[8]  = *(_OWORD *)(a1 + 224);
  __int128 v53 = *(_OWORD *)(a1 + 144);
  __dst[2]  = *(_OWORD *)(a1 + 128);
  __dst[3]  = v53;
  __int128 v54 = *(_OWORD *)(a1 + 176);
  __dst[4]  = *(_OWORD *)(a1 + 160);
  __dst[5]  = v54;
  __int128 v55 = *(_OWORD *)(a1 + 112);
  __dst[0]  = *(_OWORD *)(a1 + 96);
  __dst[1]  = v55;
  *(void *)&v218  = sub_10015511C((uint64_t)__dst, (uint64_t)&__dst[9]);
  sub_100022594(&v218, __dst);
  char v56 = swift_isUniquelyReferenced_nonNull_native(v50);
  *(void *)&v216  = v50;
  sub_10001EDDC(__dst, 0xD000000000000013LL, 0x8000000100365550LL, v56);
  uint64_t v57 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  __int128 v58 = *(_OWORD *)(a1 + 288);
  __dst[2]  = *(_OWORD *)(a1 + 272);
  __dst[3]  = v58;
  *(void *)&__dst[4]  = *(void *)(a1 + 304);
  __int128 v59 = *(_OWORD *)(a1 + 256);
  __dst[0]  = *(_OWORD *)(a1 + 240);
  __dst[1]  = v59;
  *((void *)&v219[0] + 1)  = v51;
  *(void *)&v218  = sub_10015511C((uint64_t)__dst, (uint64_t)&__dst[4] + 8);
  sub_100022594(&v218, __dst);
  char v60 = swift_isUniquelyReferenced_nonNull_native(v57);
  *(void *)&v216  = v57;
  sub_10001EDDC(__dst, 0xD000000000000015LL, 0x8000000100365570LL, v60);
  uint64_t v61 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v62 = *(void *)(a1 + 48);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt64;
  *(void *)&__dst[0]  = v62;
  sub_100022594(__dst, &v218);
  char v63 = swift_isUniquelyReferenced_nonNull_native(v61);
  *(void *)&v216  = v61;
  sub_10001EDDC(&v218, 0xD00000000000001BLL, 0x8000000100365590LL, v63);
  uint64_t v64 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v65 = *(void *)(a1 + 56);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt64;
  *(void *)&__dst[0]  = v65;
  sub_100022594(__dst, &v218);
  char v66 = swift_isUniquelyReferenced_nonNull_native(v64);
  *(void *)&v216  = v64;
  sub_10001EDDC(&v218, 0xD00000000000001BLL, 0x80000001003655B0LL, v66);
  uint64_t v67 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int v68 = *(_DWORD *)(a1 + 64);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v68;
  sub_100022594(__dst, &v218);
  char v69 = swift_isUniquelyReferenced_nonNull_native(v67);
  *(void *)&v216  = v67;
  sub_10001EDDC(&v218, 0xD000000000000018LL, 0x80000001003655D0LL, v69);
  uint64_t v70 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  __int16 v71 = *(_WORD *)(a1 + 68);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt16;
  LOWORD(__dst[0])  = v71;
  sub_100022594(__dst, &v218);
  char v72 = swift_isUniquelyReferenced_nonNull_native(v70);
  *(void *)&v216  = v70;
  sub_10001EDDC(&v218, 0xD00000000000001ELL, 0x80000001003655F0LL, v72);
  uint64_t v73 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int v74 = *(_DWORD *)(a1 + 72);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v74;
  sub_100022594(__dst, &v218);
  char v75 = swift_isUniquelyReferenced_nonNull_native(v73);
  *(void *)&v216  = v73;
  sub_10001EDDC(&v218, 0xD000000000000018LL, 0x8000000100365610LL, v75);
  uint64_t v76 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int v77 = *(_DWORD *)(a1 + 76);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v77;
  sub_100022594(__dst, &v218);
  char v78 = swift_isUniquelyReferenced_nonNull_native(v76);
  *(void *)&v216  = v76;
  sub_10001EDDC(&v218, 0xD000000000000018LL, 0x8000000100365630LL, v78);
  uint64_t v79 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int v80 = *(_DWORD *)(a1 + 80);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v80;
  sub_100022594(__dst, &v218);
  char v81 = swift_isUniquelyReferenced_nonNull_native(v79);
  *(void *)&v216  = v79;
  sub_10001EDDC(&v218, 0xD000000000000015LL, 0x8000000100365650LL, v81);
  uint64_t v82 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int v83 = *(_DWORD *)(a1 + 336);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v83;
  sub_100022594(__dst, &v218);
  char v84 = swift_isUniquelyReferenced_nonNull_native(v82);
  *(void *)&v216  = v82;
  sub_10001EDDC(&v218, 0xD000000000000020LL, 0x8000000100365670LL, v84);
  uint64_t v85 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int v86 = *(_DWORD *)(a1 + 340);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v86;
  sub_100022594(__dst, &v218);
  char v87 = swift_isUniquelyReferenced_nonNull_native(v85);
  *(void *)&v216  = v85;
  sub_10001EDDC(&v218, 0xD00000000000001DLL, 0x80000001003656A0LL, v87);
  uint64_t v88 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v89  = *(_DWORD *)(a1 + 344);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v89;
  sub_100022594(__dst, &v218);
  char v90 = swift_isUniquelyReferenced_nonNull_native(v88);
  *(void *)&v216  = v88;
  sub_10001EDDC(&v218, 0xD000000000000018LL, 0x80000001003656C0LL, v90);
  uint64_t v91 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int v92 = *(_DWORD *)(a1 + 348);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v92;
  sub_100022594(__dst, &v218);
  char v93 = swift_isUniquelyReferenced_nonNull_native(v91);
  *(void *)&v216  = v91;
  v214  = 22;
  sub_10001EDDC(&v218, 0xD000000000000016LL, 0x80000001003656E0LL, v93);
  uint64_t v94 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int v95 = *(_DWORD *)(a1 + 352);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v95;
  sub_100022594(__dst, &v218);
  char v96 = swift_isUniquelyReferenced_nonNull_native(v94);
  *(void *)&v216  = v94;
  sub_10001EDDC(&v218, 0xD00000000000001BLL, 0x8000000100365700LL, v96);
  uint64_t v97 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int v98 = *(_DWORD *)(a1 + 356);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v98;
  sub_100022594(__dst, &v218);
  char v99 = swift_isUniquelyReferenced_nonNull_native(v97);
  *(void *)&v216  = v97;
  sub_10001EDDC(&v218, 0xD00000000000001ALL, 0x8000000100365720LL, v99);
  v100  = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  __int16 v101 = *(_WORD *)(a1 + 3562);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt16;
  LOWORD(__dst[0])  = v101;
  sub_100022594(__dst, &v218);
  char v102 = swift_isUniquelyReferenced_nonNull_native(v100);
  *(void *)&v216  = v100;
  sub_10001EDDC(&v218, 0xD000000000000019LL, 0x8000000100365740LL, v102);
  uint64_t v103 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  __int16 v104 = *(_WORD *)(a1 + 3564);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt16;
  LOWORD(__dst[0])  = v104;
  sub_100022594(__dst, &v218);
  v105  = swift_isUniquelyReferenced_nonNull_native(v103);
  *(void *)&v216  = v103;
  sub_10001EDDC(&v218, 0xD000000000000019LL, 0x8000000100365760LL, v105);
  v106  = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  __int16 v107 = *(_WORD *)(a1 + 3566);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt16;
  LOWORD(__dst[0])  = v107;
  sub_100022594(__dst, &v218);
  v108  = swift_isUniquelyReferenced_nonNull_native(v106);
  *(void *)&v216  = v106;
  sub_10001EDDC(&v218, 0xD00000000000001ALL, 0x8000000100365780LL, v108);
  uint64_t v109 = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  __int16 v110 = *(_WORD *)(a1 + 3568);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt16;
  LOWORD(__dst[0])  = v110;
  sub_100022594(__dst, &v218);
  v111  = swift_isUniquelyReferenced_nonNull_native(v109);
  *(void *)&v216  = v109;
  sub_10001EDDC(&v218, 0xD00000000000001BLL, 0x80000001003657A0LL, v111);
  v112  = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  __int16 v113 = *(_WORD *)(a1 + 3570);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt16;
  LOWORD(__dst[0])  = v113;
  sub_100022594(__dst, &v218);
  char v114 = swift_isUniquelyReferenced_nonNull_native(v112);
  *(void *)&v216  = v112;
  sub_10001EDDC(&v218, 0xD000000000000019LL, 0x8000000100365760LL, v114);
  v210  = v216;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v212  = a1;
  memcpy(__dst, (const void *)(a1 + 360), sizeof(__dst));
  v217  = v211;
  sub_100069964(0, 54LL, 0);
  v213  = sub_100002274((uint64_t *)&unk_1004105A0);
  v115  = 0LL;
  unint64_t v116 = (unint64_t)v219;
  unint64_t v117 = 0x80000001003657E0LL;
  do
  {
    v118  = *(_DWORD *)((char *)__dst + v115);
    v119  = *(void *)((char *)__dst + v115 + 8);
    v120  = sub_100002274(qword_100405EA0);
    unint64_t v121 = swift_allocObject(v120, 128LL, 7LL);
    *(_OWORD *)(v121 + 16)  = xmmword_10033B810;
    *(void *)(v121 + 32)  = 0xD000000000000016LL;
    *(void *)(v121 + 40)  = 0x80000001003657C0LL;
    *(void *)(v121 + 72)  = &type metadata for UInt32;
    *(_DWORD *)(v121 + 48)  = v118;
    *(void *)(v121 + 80)  = 0xD000000000000019LL;
    v122  = v121 + 80;
    *(void *)(v121 + 120)  = &type metadata for UInt64;
    *(void *)(v121 + 88)  = 0x80000001003657E0LL;
    *(void *)(v121 + 96)  = v119;
    v123  = (void *)static _DictionaryStorage.allocate(capacity:)(2LL);
    sub_100155510(v121 + 32, (uint64_t)&v218);
    uint64_t v124 = *((void *)&v218 + 1);
    v125  = v218;
    swift_retain();
    unint64_t v126 = sub_10001C008(v125, v124);
    if ((v128 & 1) != 0)
    {
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      sub_100069980(v127 > 1, v116, 1);
      v150  = v216;
      goto LABEL_20;
    }

    unint64_t v3 = (char *)(v123 + 8);
    *(void *)((char *)v123 + ((v126 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v126;
    char v129 = (uint64_t *)(v123[6] + 16 * v126);
    *char v129 = v125;
    v129[1]  = v124;
    sub_100022594(v219, (_OWORD *)(v123[7] + 32 * v126));
    uint64_t v130 = v123[2];
    BOOL v131 = __OFADD__(v130, 1LL);
    v132  = v130 + 1;
    if (v131) {
      goto LABEL_36;
    }
    v123[2]  = v132;
    sub_100155510(v122, (uint64_t)&v218);
    v125  = *((void *)&v218 + 1);
    uint64_t v124 = v218;
    unint64_t v133 = sub_10001C008(v218, *((uint64_t *)&v218 + 1));
    if ((v134 & 1) != 0) {
      goto LABEL_37;
    }
    *(void *)&v3[(v133 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v133;
    char v135 = (uint64_t *)(v123[6] + 16 * v133);
    *char v135 = v124;
    v135[1]  = v125;
    sub_100022594(v219, (_OWORD *)(v123[7] + 32 * v133));
    uint64_t v136 = v123[2];
    BOOL v131 = __OFADD__(v136, 1LL);
    v137  = v136 + 1;
    if (v131) {
      goto LABEL_38;
    }
    v123[2]  = v137;
    swift_release(v123);
    swift_bridgeObjectRelease(v121);
    if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
      sub_100069964(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
    }
    v139  = _swiftEmptyArrayStorage[2];
    v138  = _swiftEmptyArrayStorage[3];
    if (v139 >= v138 >> 1) {
      sub_100069964(v138 > 1, v139 + 1, 1);
    }
    v115 += 16LL;
    _swiftEmptyArrayStorage[2]  = v139 + 1;
    _swiftEmptyArrayStorage[v139 + 4]  = v123;
  }

  while (v115 != 864);
  *(void *)&v216  = _swiftEmptyArrayStorage;
  sub_100022594(&v216, __dst);
  v140  = swift_isUniquelyReferenced_nonNull_native(v210);
  *(void *)&v218  = v210;
  sub_10001EDDC(__dst, 0xD000000000000011LL, 0x8000000100365800LL, v140);
  v141  = (void *)v218;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  memcpy(__dst, (const void *)(v212 + 2792), 0x300uLL);
  v142  = 0LL;
  v217  = v211;
  v143  = _swiftEmptyArrayStorage;
  do
  {
    v144  = __dst[v142 + 1];
    v218  = __dst[v142];
    v219[0]  = v144;
    v219[1]  = __dst[v142 + 2];
    v145  = sub_1001505A4();
    if (v145)
    {
      v146  = v145;
      if ((swift_isUniquelyReferenced_nonNull_native(v143) & 1) == 0) {
        v143  = sub_1000A7728(0LL, v143[2] + 1LL, 1, v143);
      }
      v148  = v143[2];
      v147  = v143[3];
      if (v148 >= v147 >> 1) {
        v143  = sub_1000A7728((void *)(v147 > 1), v148 + 1, 1, v143);
      }
      v143[2]  = v148 + 1;
      v143[v148 + 4]  = v146;
    }

    v142 += 3LL;
  }

  while (v142 != 48);
  *(void *)&v216  = v143;
  sub_100022594(&v216, __dst);
  v149  = swift_isUniquelyReferenced_nonNull_native(v141);
  sub_10001EDDC(__dst, 0xD000000000000013LL, 0x8000000100365820LL, v149);
  v123  = v141;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  LOWORD(v122)  = *(_WORD *)(v212 + 3628);
  LOWORD(v124)  = *(_WORD *)(v212 + 3630);
  LOWORD(v125)  = *(_WORD *)(v212 + 3632);
  LOWORD(v3)  = *(_WORD *)(v212 + 3634);
  LOWORD(v117)  = *(_WORD *)(v212 + 3636);
  LOWORD(v115)  = *(_WORD *)(v212 + 3638);
  v213  = *(_WORD *)(v212 + 3640);
  v214  = *(_WORD *)(v212 + 3642);
  *((void *)&__dst[1] + 1)  = sub_100002274(&qword_1004092D8);
  *(void *)&v216  = _swiftEmptyArrayStorage;
  sub_100069980(0, 8LL, 0);
  v150  = v216;
  unint64_t v121 = *(void *)(v216 + 16);
  unint64_t v127 = *(void *)(v216 + 24);
  unint64_t v116 = v121 + 1;
  if (v121 >= v127 >> 1) {
    goto LABEL_39;
  }
LABEL_20:
  *(void *)(v150 + 16)  = v116;
  *(_WORD *)(v150 + 2 * v121 + 32)  = v122;
  *(void *)&v216  = v150;
  v151  = *(void *)(v150 + 24);
  v152  = v121 + 2;
  if (v116 >= v151 >> 1)
  {
    sub_100069980(v151 > 1, v121 + 2, 1);
    v150  = v216;
  }

  *(void *)(v150 + 16)  = v152;
  *(_WORD *)(v150 + 2 * v116 + 32)  = v124;
  *(void *)&v216  = v150;
  v153  = *(void *)(v150 + 24);
  v154  = v121 + 3;
  if (v152 >= v153 >> 1)
  {
    sub_100069980(v153 > 1, v121 + 3, 1);
    v150  = v216;
  }

  *(void *)(v150 + 16)  = v154;
  *(_WORD *)(v150 + 2 * v152 + 32)  = v125;
  *(void *)&v216  = v150;
  v155  = *(void *)(v150 + 24);
  v156  = v121 + 4;
  if (v154 >= v155 >> 1)
  {
    sub_100069980(v155 > 1, v121 + 4, 1);
    v150  = v216;
  }

  *(void *)(v150 + 16)  = v156;
  *(_WORD *)(v150 + 2 * v154 + 32)  = (_WORD)v3;
  *(void *)&v216  = v150;
  v157  = *(void *)(v150 + 24);
  v158  = v121 + 5;
  if (v156 >= v157 >> 1)
  {
    sub_100069980(v157 > 1, v121 + 5, 1);
    v150  = v216;
  }

  *(void *)(v150 + 16)  = v158;
  *(_WORD *)(v150 + 2 * v156 + 32)  = v117;
  *(void *)&v216  = v150;
  v159  = *(void *)(v150 + 24);
  v160  = v121 + 6;
  if (v158 >= v159 >> 1)
  {
    sub_100069980(v159 > 1, v121 + 6, 1);
    v150  = v216;
  }

  *(void *)(v150 + 16)  = v160;
  *(_WORD *)(v150 + 2 * v158 + 32)  = v115;
  *(void *)&v216  = v150;
  v161  = *(void *)(v150 + 24);
  v162  = v121 + 7;
  if (v160 >= v161 >> 1)
  {
    sub_100069980(v161 > 1, v121 + 7, 1);
    v150  = v216;
  }

  *(void *)(v150 + 16)  = v162;
  *(_WORD *)(v150 + 2 * v160 + 32)  = v213;
  *(void *)&v216  = v150;
  v163  = *(void *)(v150 + 24);
  if (v162 >= v163 >> 1)
  {
    sub_100069980(v163 > 1, v121 + 8, 1);
    v150  = v216;
  }

  *(void *)(v150 + 16)  = v121 + 8;
  *(_WORD *)(v150 + 2 * v162 + 32)  = v214;
  *(void *)&__dst[0]  = v150;
  sub_100022594(__dst, &v216);
  v164  = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_10001EDDC(&v216, 0xD000000000000030LL, 0x8000000100365840LL, v164);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v165  = *(_BYTE *)(v212 + 3624);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt8;
  LOBYTE(__dst[0])  = v165;
  sub_100022594(__dst, &v216);
  v166  = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_10001EDDC(&v216, 0xD000000000000020LL, 0x8000000100365880LL, v166);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v167  = *(_BYTE *)(v212 + 3625);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt8;
  LOBYTE(__dst[0])  = v167;
  sub_100022594(__dst, &v216);
  v168  = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_10001EDDC(&v216, 0xD000000000000028LL, 0x80000001003658B0LL, v168);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v169  = *(_BYTE *)(v212 + 3626);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt8;
  LOBYTE(__dst[0])  = v169;
  sub_100022594(__dst, &v216);
  v170  = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_10001EDDC(&v216, 0xD00000000000002ALL, 0x80000001003658E0LL, v170);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v171  = *(_DWORD *)(v212 + 3572);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v171;
  sub_100022594(__dst, &v216);
  v172  = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_10001EDDC(&v216, 0xD00000000000002FLL, 0x8000000100365910LL, v172);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v173  = *(_DWORD *)(v212 + 3648);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v173;
  sub_100022594(__dst, &v216);
  v174  = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_10001EDDC(&v216, 0xD00000000000002FLL, 0x8000000100365940LL, v174);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v175  = *(_DWORD *)(v212 + 3652);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v175;
  sub_100022594(__dst, &v216);
  v176  = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_10001EDDC(&v216, 0xD000000000000026LL, 0x8000000100365970LL, v176);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v177  = *(_DWORD *)(v212 + 3656);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v177;
  sub_100022594(__dst, &v216);
  v178  = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_10001EDDC(&v216, 0xD000000000000026LL, 0x80000001003659A0LL, v178);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v179  = *(_DWORD *)(v212 + 3660);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v179;
  sub_100022594(__dst, &v216);
  v180  = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_10001EDDC(&v216, 0xD000000000000024LL, 0x80000001003659D0LL, v180);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v181  = *(_DWORD *)(v212 + 3664);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v181;
  sub_100022594(__dst, &v216);
  v182  = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_10001EDDC(&v216, 0xD000000000000023LL, 0x8000000100365A00LL, v182);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v183  = *(_DWORD *)(v212 + 3668);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v183;
  sub_100022594(__dst, &v216);
  v184  = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_10001EDDC(&v216, 0xD000000000000024LL, 0x8000000100365A30LL, v184);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v185  = *(_DWORD *)(v212 + 3676);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v185;
  sub_100022594(__dst, &v216);
  v186  = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_10001EDDC(&v216, 0xD000000000000019LL, 0x8000000100365A60LL, v186);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v187  = *(_DWORD *)(v212 + 3680);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v187;
  sub_100022594(__dst, &v216);
  v188  = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_10001EDDC(&v216, 0xD000000000000024LL, 0x8000000100365A80LL, v188);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v189  = *(_DWORD *)(v212 + 3684);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v189;
  sub_100022594(__dst, &v216);
  v190  = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_10001EDDC(&v216, 0xD000000000000022LL, 0x8000000100365AB0LL, v190);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v191  = *(_DWORD *)(v212 + 3688);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v191;
  sub_100022594(__dst, &v216);
  v192  = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_10001EDDC(&v216, 0xD000000000000020LL, 0x8000000100365AE0LL, v192);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v193  = *(_DWORD *)(v212 + 3692);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v193;
  sub_100022594(__dst, &v216);
  v194  = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_10001EDDC(&v216, 0xD00000000000001ALL, 0x8000000100365B10LL, v194);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v195  = *(_DWORD *)(v212 + 3696);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v195;
  sub_100022594(__dst, &v216);
  v196  = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_10001EDDC(&v216, 0xD000000000000020LL, 0x8000000100365B30LL, v196);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v197  = *(_DWORD *)(v212 + 3700);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v197;
  sub_100022594(__dst, &v216);
  v198  = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_10001EDDC(&v216, 0xD000000000000020LL, 0x8000000100365B60LL, v198);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v199  = *(_DWORD *)(v212 + 3704);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v199;
  sub_100022594(__dst, &v216);
  v200  = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_10001EDDC(&v216, 0xD000000000000023LL, 0x8000000100365B90LL, v200);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v201  = *(_WORD *)(v212 + 3708);
  v202  = *(_BYTE *)(v212 + 3710);
  v203  = sub_100002274(&qword_1004040A8);
  v204  = swift_allocObject(v203, 35LL, 7LL);
  *(_OWORD *)(v204 + 16)  = xmmword_100339910;
  *(_WORD *)(v204 + 32)  = v201;
  *(_BYTE *)(v204 + 34)  = v202;
  v205  = sub_1000FB08C(v204);
  v207  = v206;
  swift_bridgeObjectRelease(v204);
  *((void *)&__dst[1] + 1)  = &type metadata for Data;
  *(void *)&__dst[0]  = v205;
  *((void *)&__dst[0] + 1)  = v207;
  sub_100022594(__dst, &v216);
  v208  = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_10001EDDC(&v216, 0x4154535F4C445741LL, 0xEE0049554F5F5354LL, v208);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  return v123;
}

uint64_t sub_1001505A4()
{
  __int128 v1 = *(_OWORD *)(v0 + 32);
  v7[0]  = *(_OWORD *)(v0 + 16);
  v7[1]  = v1;
  uint64_t v2 = sub_1000EF854((uint64_t)v7, (uint64_t)&v8);
  unint64_t v4 = v3;
  sub_1001136FC(0LL, v2, v3);
  if ((v5 & 1) == 0) {
    __asm { BR              X11 }
  }

  sub_1000208D8(v2, v4);
  return 0LL;
}

uint64_t apple80211_p2p_airplay_ext_stats.eventPayload()()
{
  uint64_t v1 = sub_100002274(qword_100405EA0);
  uint64_t v2 = swift_allocObject(v1, 1328LL, 7LL);
  *(_OWORD *)(v2 + 16)  = xmmword_10034A7D0;
  *(void *)(v2 + 32)  = 0xD00000000000001DLL;
  *(void *)(v2 + 40)  = 0x8000000100365380LL;
  uint64_t v3 = *((void *)v0 + 1);
  uint64_t v4 = *((void *)v0 + 2);
  int v6 = v0[6];
  int v5 = v0[7];
  int v8 = v0[8];
  int v7 = v0[9];
  __int16 v9 = *((_WORD *)v0 + 20);
  __int16 v10 = *((_WORD *)v0 + 21);
  __int16 v11 = *((_WORD *)v0 + 22);
  __int16 v12 = *((_WORD *)v0 + 23);
  __int16 v13 = *((_WORD *)v0 + 24);
  char v14 = *((_BYTE *)v0 + 50);
  char v15 = *((_BYTE *)v0 + 51);
  char v16 = *((_BYTE *)v0 + 60);
  char v17 = *((_BYTE *)v0 + 68);
  char v18 = *((_BYTE *)v0 + 69);
  char v19 = *((_BYTE *)v0 + 71);
  char v20 = *((_BYTE *)v0 + 72);
  char v21 = *((_BYTE *)v0 + 73);
  char v22 = *((_BYTE *)v0 + 74);
  char v23 = *((_BYTE *)v0 + 75);
  *(_OWORD *)uint64_t v35 = *(_OWORD *)(v0 + 19);
  *(_OWORD *)&v35[16]  = *(_OWORD *)(v0 + 23);
  *(void *)&v35[32]  = *(void *)(v0 + 27);
  __int128 v33 = *(_OWORD *)(v0 + 29);
  __int128 v34 = *(_OWORD *)(v0 + 33);
  __int128 v31 = *(_OWORD *)(v0 + 37);
  __int128 v32 = *(_OWORD *)(v0 + 41);
  __int128 v29 = *(_OWORD *)(v0 + 45);
  __int128 v30 = *(_OWORD *)(v0 + 49);
  *(_BYTE *)(v2 + 48)  = *((_BYTE *)v0 + 52);
  *(void *)(v2 + 72)  = &type metadata for UInt8;
  *(void *)(v2 + 80)  = 0xD00000000000001DLL;
  *(void *)(v2 + 88)  = 0x80000001003653A0LL;
  *(_BYTE *)(v2 + 96)  = v16;
  *(void *)(v2 + 120)  = &type metadata for UInt8;
  *(void *)(v2 + 128)  = 0xD000000000000012LL;
  *(void *)(v2 + 136)  = 0x8000000100365320LL;
  *(void *)(v2 + 144)  = v4;
  *(void *)(v2 + 168)  = &type metadata for UInt64;
  *(void *)(v2 + 176)  = 0xD000000000000012LL;
  *(void *)(v2 + 184)  = 0x8000000100365340LL;
  *(void *)(v2 + 192)  = v3;
  *(void *)(v2 + 216)  = &type metadata for UInt64;
  *(void *)(v2 + 224)  = 0xD000000000000029LL;
  *(void *)(v2 + 232)  = 0x8000000100365BC0LL;
  *(_DWORD *)(v2 + 240)  = v6;
  *(void *)(v2 + 264)  = &type metadata for UInt32;
  *(void *)(v2 + 272)  = 0xD000000000000033LL;
  *(void *)(v2 + 280)  = 0x8000000100365BF0LL;
  *(_BYTE *)(v2 + 288)  = v17;
  *(void *)(v2 + 312)  = &type metadata for UInt8;
  *(void *)(v2 + 320)  = 0xD000000000000014LL;
  *(void *)(v2 + 328)  = 0x8000000100365C30LL;
  *(_BYTE *)(v2 + 336)  = v14;
  *(void *)(v2 + 360)  = &type metadata for UInt8;
  *(void *)(v2 + 368)  = 0xD00000000000002FLL;
  *(void *)(v2 + 376)  = 0x8000000100365C50LL;
  *(_DWORD *)(v2 + 384)  = v5;
  *(void *)(v2 + 408)  = &type metadata for UInt32;
  *(void *)(v2 + 416)  = 0xD00000000000002FLL;
  *(void *)(v2 + 424)  = 0x8000000100365C80LL;
  *(_DWORD *)(v2 + 432)  = v8;
  *(void *)(v2 + 456)  = &type metadata for UInt32;
  *(void *)(v2 + 464)  = 0xD00000000000002ELL;
  *(void *)(v2 + 472)  = 0x8000000100365CB0LL;
  *(_DWORD *)(v2 + 480)  = v7;
  *(void *)(v2 + 504)  = &type metadata for UInt32;
  *(void *)(v2 + 512)  = 0xD00000000000002DLL;
  *(void *)(v2 + 520)  = 0x8000000100365CE0LL;
  *(void *)(v2 + 552)  = &type metadata for Int8;
  *(_BYTE *)(v2 + 528)  = v18;
  *(void *)(v2 + 560)  = 0xD00000000000002BLL;
  *(void *)(v2 + 568)  = 0x8000000100365D10LL;
  *(void *)(v2 + 600)  = &type metadata for UInt16;
  *(_WORD *)(v2 + 576)  = v9;
  *(void *)(v2 + 608)  = 0xD000000000000033LL;
  *(void *)(v2 + 616)  = 0x8000000100365D40LL;
  *(void *)(v2 + 648)  = &type metadata for UInt8;
  *(_BYTE *)(v2 + 624)  = v15;
  *(void *)(v2 + 656)  = 0xD000000000000034LL;
  *(void *)(v2 + 664)  = 0x8000000100365D80LL;
  *(void *)(v2 + 696)  = &type metadata for UInt16;
  *(_WORD *)(v2 + 672)  = v11;
  *(void *)(v2 + 704)  = 0xD000000000000037LL;
  *(void *)(v2 + 712)  = 0x8000000100365DC0LL;
  *(void *)(v2 + 744)  = &type metadata for UInt16;
  *(_WORD *)(v2 + 720)  = v12;
  *(void *)(v2 + 752)  = 0xD00000000000002CLL;
  *(void *)(v2 + 760)  = 0x8000000100365E00LL;
  *(void *)(v2 + 792)  = &type metadata for UInt16;
  *(_WORD *)(v2 + 768)  = v13;
  *(void *)(v2 + 800)  = 0xD00000000000002ELL;
  *(void *)(v2 + 808)  = 0x8000000100365E30LL;
  *(void *)(v2 + 840)  = &type metadata for UInt16;
  *(_WORD *)(v2 + 816)  = v10;
  *(void *)(v2 + 848)  = 0xD000000000000025LL;
  *(void *)(v2 + 856)  = 0x8000000100365E60LL;
  *(void *)(v2 + 888)  = &type metadata for Bool;
  *(_BYTE *)(v2 + 864)  = v19;
  *(void *)(v2 + 896)  = 0xD00000000000002FLL;
  *(void *)(v2 + 904)  = 0x8000000100365E90LL;
  *(void *)(v2 + 936)  = &type metadata for Bool;
  *(_BYTE *)(v2 + 912)  = v20;
  *(void *)(v2 + 944)  = 0xD000000000000029LL;
  *(void *)(v2 + 952)  = 0x8000000100365EC0LL;
  *(void *)(v2 + 984)  = &type metadata for Bool;
  *(_BYTE *)(v2 + 960)  = v21;
  *(void *)(v2 + 992)  = 0xD000000000000029LL;
  *(void *)(v2 + 1000)  = 0x8000000100365EF0LL;
  *(void *)(v2 + 1032)  = &type metadata for Bool;
  *(_BYTE *)(v2 + 1008)  = v22;
  *(void *)(v2 + 1040)  = 0xD000000000000029LL;
  *(void *)(v2 + 1048)  = 0x8000000100365F20LL;
  *(void *)(v2 + 1080)  = &type metadata for Bool;
  *(_BYTE *)(v2 + 1056)  = v23;
  *(void *)(v2 + 1088)  = 0xD000000000000022LL;
  *(void *)(v2 + 1096)  = 0x8000000100365F50LL;
  int v24 = *v0;
  *(void *)(v2 + 1128)  = &type metadata for UInt32;
  *(_DWORD *)(v2 + 1104)  = v24;
  *(void *)(v2 + 1136)  = 0xD000000000000024LL;
  *(void *)(v2 + 1144)  = 0x8000000100365F80LL;
  *(_OWORD *)__dst  = *(_OWORD *)&v35[8];
  *(_OWORD *)&__dst[16]  = *(_OWORD *)&v35[24];
  uint64_t v25 = sub_100002274(&qword_1004092D0);
  *(void *)(v2 + 1176)  = v25;
  *(void *)(v2 + 1152)  = sub_100155558(__dst, (uint64_t)&__dst[32]);
  *(void *)(v2 + 1184)  = 0xD00000000000002DLL;
  *(void *)(v2 + 1192)  = 0x8000000100365FB0LL;
  *(_OWORD *)__dst  = v33;
  *(_OWORD *)&__dst[16]  = v34;
  *(void *)(v2 + 1224)  = v25;
  *(void *)(v2 + 1200)  = sub_100155558(__dst, (uint64_t)&__dst[32]);
  *(void *)(v2 + 1232)  = 0xD000000000000031LL;
  *(void *)(v2 + 1240)  = 0x8000000100365FE0LL;
  *(_OWORD *)__dst  = v31;
  *(_OWORD *)&__dst[16]  = v32;
  *(void *)(v2 + 1272)  = v25;
  *(void *)(v2 + 1248)  = sub_100155558(__dst, (uint64_t)&__dst[32]);
  *(void *)(v2 + 1280)  = 0xD000000000000031LL;
  *(void *)(v2 + 1288)  = 0x8000000100366020LL;
  *(_OWORD *)__dst  = v29;
  *(_OWORD *)&__dst[16]  = v30;
  *(void *)(v2 + 1320)  = v25;
  *(void *)(v2 + 1296)  = sub_100155558(__dst, (uint64_t)&__dst[32]);
  unint64_t v26 = sub_10000D658(v2);
  memcpy(__dst, v0 + 54, sizeof(__dst));
  unint64_t v27 = sub_100150F6C();
  return sub_1001464B0( v27,  v26,  (uint64_t)sub_100153E44,  (void (*)(uint64_t, uint64_t, void, uint64_t, uint64_t *))sub_100153BE4);
}

unint64_t sub_100150F6C()
{
  uint64_t v1 = sub_100002274(qword_100405EA0);
  uint64_t v2 = swift_allocObject(v1, 2192LL, 7LL);
  *(_OWORD *)(v2 + 16)  = xmmword_10034A7E0;
  *(void *)(v2 + 32)  = 0xD000000000000017LL;
  *(void *)(v2 + 40)  = 0x80000001003665F0LL;
  uint64_t v3 = *(void *)(v0 + 8);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v7 = *(void *)(v0 + 40);
  uint64_t v9 = *(void *)(v0 + 48);
  uint64_t v8 = *(void *)(v0 + 56);
  uint64_t v10 = *(void *)(v0 + 64);
  uint64_t v11 = *(void *)(v0 + 72);
  uint64_t v13 = *(void *)(v0 + 80);
  uint64_t v12 = *(void *)(v0 + 88);
  uint64_t v15 = *(void *)(v0 + 96);
  uint64_t v14 = *(void *)(v0 + 104);
  uint64_t v17 = *(void *)(v0 + 112);
  uint64_t v16 = *(void *)(v0 + 120);
  uint64_t v19 = *(void *)(v0 + 128);
  uint64_t v18 = *(void *)(v0 + 136);
  uint64_t v21 = *(void *)(v0 + 144);
  uint64_t v20 = *(void *)(v0 + 152);
  uint64_t v23 = *(void *)(v0 + 160);
  uint64_t v22 = *(void *)(v0 + 168);
  uint64_t v25 = *(void *)(v0 + 176);
  uint64_t v24 = *(void *)(v0 + 184);
  v208  = *(void *)(v0 + 192);
  v210  = *(void *)(v0 + 200);
  v212  = *(void *)(v0 + 208);
  *(void *)(v2 + 48)  = *(void *)v0;
  *(void *)(v2 + 72)  = &type metadata for UInt64;
  *(void *)(v2 + 80)  = 0xD000000000000017LL;
  *(void *)(v2 + 88)  = 0x8000000100366610LL;
  *(void *)(v2 + 96)  = v3;
  *(void *)(v2 + 120)  = &type metadata for UInt64;
  *(void *)(v2 + 128)  = 0xD000000000000016LL;
  *(void *)(v2 + 136)  = 0x8000000100366630LL;
  *(void *)(v2 + 144)  = v5;
  *(void *)(v2 + 168)  = &type metadata for UInt64;
  *(void *)(v2 + 176)  = 0xD000000000000015LL;
  *(void *)(v2 + 184)  = 0x8000000100366650LL;
  *(void *)(v2 + 192)  = v4;
  *(void *)(v2 + 216)  = &type metadata for UInt64;
  *(void *)(v2 + 224)  = 0xD000000000000014LL;
  *(void *)(v2 + 232)  = 0x8000000100366670LL;
  *(void *)(v2 + 240)  = v6;
  *(void *)(v2 + 264)  = &type metadata for UInt64;
  *(void *)(v2 + 272)  = 0xD00000000000001BLL;
  *(void *)(v2 + 280)  = 0x8000000100366690LL;
  *(void *)(v2 + 288)  = v7;
  *(void *)(v2 + 312)  = &type metadata for UInt64;
  *(void *)(v2 + 320)  = 0xD000000000000017LL;
  *(void *)(v2 + 328)  = 0x80000001003666B0LL;
  *(void *)(v2 + 336)  = v9;
  *(void *)(v2 + 360)  = &type metadata for UInt64;
  *(void *)(v2 + 368)  = 0xD000000000000016LL;
  *(void *)(v2 + 376)  = 0x80000001003666D0LL;
  *(void *)(v2 + 384)  = v8;
  *(void *)(v2 + 408)  = &type metadata for UInt64;
  *(void *)(v2 + 416)  = 0xD00000000000001BLL;
  *(void *)(v2 + 424)  = 0x80000001003666F0LL;
  *(void *)(v2 + 432)  = v10;
  *(void *)(v2 + 456)  = &type metadata for UInt64;
  *(void *)(v2 + 464)  = 0xD00000000000001CLL;
  *(void *)(v2 + 472)  = 0x8000000100366710LL;
  *(void *)(v2 + 480)  = v11;
  *(void *)(v2 + 504)  = &type metadata for UInt64;
  *(void *)(v2 + 512)  = 0xD000000000000017LL;
  *(void *)(v2 + 520)  = 0x8000000100366730LL;
  *(void *)(v2 + 552)  = &type metadata for UInt64;
  *(void *)(v2 + 528)  = v13;
  *(void *)(v2 + 560)  = 0xD000000000000013LL;
  *(void *)(v2 + 568)  = 0x8000000100366750LL;
  *(void *)(v2 + 600)  = &type metadata for UInt64;
  *(void *)(v2 + 576)  = v12;
  *(void *)(v2 + 608)  = 0xD000000000000019LL;
  *(void *)(v2 + 616)  = 0x8000000100366770LL;
  *(void *)(v2 + 648)  = &type metadata for UInt64;
  *(void *)(v2 + 624)  = v15;
  *(void *)(v2 + 656)  = 0xD00000000000001ALL;
  *(void *)(v2 + 664)  = 0x8000000100366790LL;
  *(void *)(v2 + 696)  = &type metadata for UInt64;
  *(void *)(v2 + 672)  = v14;
  *(void *)(v2 + 704)  = 0xD000000000000024LL;
  *(void *)(v2 + 712)  = 0x80000001003667B0LL;
  *(void *)(v2 + 744)  = &type metadata for UInt64;
  *(void *)(v2 + 720)  = v17;
  *(void *)(v2 + 752)  = 0xD000000000000015LL;
  *(void *)(v2 + 760)  = 0x80000001003667E0LL;
  *(void *)(v2 + 792)  = &type metadata for UInt64;
  *(void *)(v2 + 768)  = v16;
  *(void *)(v2 + 800)  = 0xD000000000000017LL;
  *(void *)(v2 + 808)  = 0x8000000100366800LL;
  *(void *)(v2 + 840)  = &type metadata for UInt64;
  *(void *)(v2 + 816)  = v19;
  *(void *)(v2 + 848)  = 0xD000000000000017LL;
  *(void *)(v2 + 856)  = 0x8000000100366820LL;
  *(void *)(v2 + 888)  = &type metadata for UInt64;
  *(void *)(v2 + 864)  = v18;
  *(void *)(v2 + 896)  = 0xD000000000000020LL;
  *(void *)(v2 + 904)  = 0x8000000100366840LL;
  *(void *)(v2 + 936)  = &type metadata for UInt64;
  *(void *)(v2 + 912)  = v21;
  *(void *)(v2 + 944)  = 0xD000000000000014LL;
  *(void *)(v2 + 952)  = 0x8000000100366870LL;
  *(void *)(v2 + 984)  = &type metadata for UInt64;
  *(void *)(v2 + 960)  = v20;
  *(void *)(v2 + 992)  = 0xD000000000000018LL;
  *(void *)(v2 + 1000)  = 0x8000000100366890LL;
  *(void *)(v2 + 1032)  = &type metadata for UInt64;
  *(void *)(v2 + 1008)  = v23;
  *(void *)(v2 + 1040)  = 0xD000000000000017LL;
  *(void *)(v2 + 1048)  = 0x80000001003668B0LL;
  *(void *)(v2 + 1080)  = &type metadata for UInt64;
  *(void *)(v2 + 1056)  = v22;
  *(void *)(v2 + 1088)  = 0xD000000000000017LL;
  *(void *)(v2 + 1096)  = 0x80000001003668D0LL;
  *(void *)(v2 + 1128)  = &type metadata for UInt64;
  *(void *)(v2 + 1104)  = v25;
  *(void *)(v2 + 1136)  = 0xD000000000000019LL;
  *(void *)(v2 + 1144)  = 0x80000001003668F0LL;
  *(void *)(v2 + 1176)  = &type metadata for UInt64;
  *(void *)(v2 + 1152)  = v24;
  *(void *)(v2 + 1184)  = 0xD00000000000001ELL;
  *(void *)(v2 + 1192)  = 0x8000000100366910LL;
  *(void *)(v2 + 1224)  = &type metadata for UInt64;
  *(void *)(v2 + 1200)  = v208;
  *(void *)(v2 + 1232)  = 0xD00000000000001CLL;
  *(void *)(v2 + 1240)  = 0x8000000100366930LL;
  *(void *)(v2 + 1272)  = &type metadata for UInt64;
  *(void *)(v2 + 1248)  = v210;
  *(void *)(v2 + 1280)  = 0xD00000000000001CLL;
  *(void *)(v2 + 1288)  = 0x8000000100366950LL;
  *(void *)(v2 + 1320)  = &type metadata for UInt64;
  *(void *)(v2 + 1296)  = v212;
  *(void *)(v2 + 1328)  = 0xD000000000000017LL;
  *(void *)(v2 + 1336)  = 0x8000000100366970LL;
  memcpy(__dst, (const void *)(v0 + 216), sizeof(__dst));
  uint64_t v26 = *(void *)(v0 + 1672);
  uint64_t v27 = *(void *)(v0 + 1696);
  v199  = *(void *)(v0 + 1720);
  v200  = *(void *)(v0 + 1744);
  v196  = *(void *)(v0 + 1768);
  uint64_t v28 = *(void *)(v0 + 1792);
  v341  = *(_OWORD *)(v0 + 1960);
  v342  = *(_OWORD *)(v0 + 1976);
  v343  = *(_OWORD *)(v0 + 1992);
  v344  = *(void *)(v0 + 2008);
  v337  = *(_OWORD *)(v0 + 1896);
  v338  = *(_OWORD *)(v0 + 1912);
  v339  = *(_OWORD *)(v0 + 1928);
  v340  = *(_OWORD *)(v0 + 1944);
  v333  = *(_OWORD *)(v0 + 1832);
  v334  = *(_OWORD *)(v0 + 1848);
  v335  = *(_OWORD *)(v0 + 1864);
  v336  = *(_OWORD *)(v0 + 1880);
  v331  = *(_OWORD *)(v0 + 1800);
  v332  = *(_OWORD *)(v0 + 1816);
  v327  = *(_OWORD *)(v0 + 2176);
  v328  = *(_OWORD *)(v0 + 2192);
  v329  = *(_OWORD *)(v0 + 2208);
  v330  = *(void *)(v0 + 2224);
  v323  = *(_OWORD *)(v0 + 2112);
  v324  = *(_OWORD *)(v0 + 2128);
  v325  = *(_OWORD *)(v0 + 2144);
  v326  = *(_OWORD *)(v0 + 2160);
  v319  = *(_OWORD *)(v0 + 2048);
  v320  = *(_OWORD *)(v0 + 2064);
  v321  = *(_OWORD *)(v0 + 2080);
  v322  = *(_OWORD *)(v0 + 2096);
  v317  = *(_OWORD *)(v0 + 2016);
  v318  = *(_OWORD *)(v0 + 2032);
  v201  = *(void *)(v0 + 2248);
  v202  = *(void *)(v0 + 2272);
  v203  = *(void *)(v0 + 2296);
  v204  = *(void *)(v0 + 2320);
  v205  = *(void *)(v0 + 2344);
  v206  = *(void *)(v0 + 2368);
  v207  = *(void *)(v0 + 2392);
  v209  = *(void *)(v0 + 2416);
  v197  = *(void *)(v0 + 2440);
  v313  = *(_OWORD *)(v0 + 2624);
  v314  = *(_OWORD *)(v0 + 2640);
  v315  = *(_OWORD *)(v0 + 2656);
  v316  = *(_OWORD *)(v0 + 2672);
  v309  = *(_OWORD *)(v0 + 2560);
  v310  = *(_OWORD *)(v0 + 2576);
  v311  = *(_OWORD *)(v0 + 2592);
  v312  = *(_OWORD *)(v0 + 2608);
  v305  = *(_OWORD *)(v0 + 2496);
  v306  = *(_OWORD *)(v0 + 2512);
  v307  = *(_OWORD *)(v0 + 2528);
  v308  = *(_OWORD *)(v0 + 2544);
  v302  = *(_OWORD *)(v0 + 2448);
  v303  = *(_OWORD *)(v0 + 2464);
  v304  = *(_OWORD *)(v0 + 2480);
  v211  = *(void *)(v0 + 2704);
  v213  = *(void *)(v0 + 2728);
  v198  = *(void *)(v0 + 2752);
  v298  = *(_OWORD *)(v0 + 2936);
  v299  = *(_OWORD *)(v0 + 2952);
  v300  = *(_OWORD *)(v0 + 2968);
  v301  = *(_OWORD *)(v0 + 2984);
  v294  = *(_OWORD *)(v0 + 2872);
  v295  = *(_OWORD *)(v0 + 2888);
  v296  = *(_OWORD *)(v0 + 2904);
  v297  = *(_OWORD *)(v0 + 2920);
  __int128 v29 = *(_OWORD *)(v0 + 2824);
  v290  = *(_OWORD *)(v0 + 2808);
  v291  = v29;
  v292  = *(_OWORD *)(v0 + 2840);
  v293  = *(_OWORD *)(v0 + 2856);
  __int128 v30 = *(_OWORD *)(v0 + 2776);
  v287  = *(_OWORD *)(v0 + 2760);
  v288  = v30;
  v289  = *(_OWORD *)(v0 + 2792);
  __int128 v31 = *(_OWORD *)(v0 + 3192);
  v283  = *(_OWORD *)(v0 + 3176);
  v284  = v31;
  __int128 v32 = *(_OWORD *)(v0 + 3224);
  v285  = *(_OWORD *)(v0 + 3208);
  v286  = v32;
  __int128 v33 = *(_OWORD *)(v0 + 3128);
  v279  = *(_OWORD *)(v0 + 3112);
  v280  = v33;
  __int128 v34 = *(_OWORD *)(v0 + 3160);
  v281  = *(_OWORD *)(v0 + 3144);
  v282  = v34;
  __int128 v35 = *(_OWORD *)(v0 + 3064);
  v275  = *(_OWORD *)(v0 + 3048);
  v276  = v35;
  __int128 v36 = *(_OWORD *)(v0 + 3096);
  v277  = *(_OWORD *)(v0 + 3080);
  v278  = v36;
  __int128 v37 = *(_OWORD *)(v0 + 3000);
  __int128 v38 = *(_OWORD *)(v0 + 3032);
  v273  = *(_OWORD *)(v0 + 3016);
  v274  = v38;
  __int128 v39 = *(_OWORD *)(v0 + 3416);
  __int128 v40 = *(_OWORD *)(v0 + 3448);
  v269  = *(_OWORD *)(v0 + 3432);
  v270  = v40;
  v271  = *(_OWORD *)(v0 + 3464);
  v272  = v37;
  __int128 v41 = *(_OWORD *)(v0 + 3352);
  __int128 v42 = *(_OWORD *)(v0 + 3384);
  v265  = *(_OWORD *)(v0 + 3368);
  v266  = v42;
  v267  = *(_OWORD *)(v0 + 3400);
  v268  = v39;
  __int128 v43 = *(_OWORD *)(v0 + 3288);
  __int128 v44 = *(_OWORD *)(v0 + 3320);
  v261  = *(_OWORD *)(v0 + 3304);
  v262  = v44;
  v263  = *(_OWORD *)(v0 + 3336);
  v264  = v41;
  __int128 v45 = *(_OWORD *)(v0 + 3256);
  v257  = *(_OWORD *)(v0 + 3240);
  v258  = v45;
  v259  = *(_OWORD *)(v0 + 3272);
  v260  = v43;
  __int128 v46 = *(_OWORD *)(v0 + 3672);
  v253  = *(_OWORD *)(v0 + 3656);
  v254  = v46;
  __int128 v47 = *(_OWORD *)(v0 + 3704);
  v255  = *(_OWORD *)(v0 + 3688);
  v256  = v47;
  __int128 v48 = *(_OWORD *)(v0 + 3608);
  v249  = *(_OWORD *)(v0 + 3592);
  v250  = v48;
  __int128 v49 = *(_OWORD *)(v0 + 3640);
  v251  = *(_OWORD *)(v0 + 3624);
  v252  = v49;
  __int128 v50 = *(_OWORD *)(v0 + 3544);
  v245  = *(_OWORD *)(v0 + 3528);
  v246  = v50;
  __int128 v51 = *(_OWORD *)(v0 + 3576);
  v247  = *(_OWORD *)(v0 + 3560);
  v248  = v51;
  __int128 v52 = *(_OWORD *)(v0 + 3480);
  __int128 v53 = *(_OWORD *)(v0 + 3512);
  v243  = *(_OWORD *)(v0 + 3496);
  v244  = v53;
  uint64_t v54 = *(void *)(v0 + 3736);
  uint64_t v55 = *(void *)(v0 + 3760);
  uint64_t v56 = *(void *)(v0 + 3784);
  __int128 v57 = *(_OWORD *)(v0 + 392);
  __int128 v58 = *(_OWORD *)(v0 + 424);
  __int128 v59 = *(_OWORD *)(v0 + 440);
  v239  = *(_OWORD *)(v0 + 408);
  v240  = v58;
  v241  = v59;
  v242  = v52;
  __int128 v60 = *(_OWORD *)(v0 + 328);
  __int128 v61 = *(_OWORD *)(v0 + 360);
  __int128 v62 = *(_OWORD *)(v0 + 376);
  v235  = *(_OWORD *)(v0 + 344);
  v236  = v61;
  v237  = v62;
  v238  = v57;
  __int128 v63 = *(_OWORD *)(v0 + 264);
  __int128 v64 = *(_OWORD *)(v0 + 296);
  __int128 v65 = *(_OWORD *)(v0 + 312);
  v231  = *(_OWORD *)(v0 + 280);
  v232  = v64;
  uint64_t v66 = *(void *)(v0 + 3808);
  v233  = v65;
  v234  = v60;
  __int128 v67 = *(_OWORD *)(v0 + 232);
  v227  = *(_OWORD *)(v0 + 216);
  v228  = v67;
  v229  = *(_OWORD *)(v0 + 248);
  v230  = v63;
  uint64_t v68 = sub_100002274(&qword_100409578);
  *(void *)(v2 + 1368)  = v68;
  sub_100069848(0, 10LL, 0);
  char v69 = _swiftEmptyArrayStorage;
  unint64_t v70 = _swiftEmptyArrayStorage[2];
  for (i  = 16LL; i != 256; i += 24LL)
  {
    uint64_t v72 = *(void *)((char *)&v227 + i);
    v214  = v69;
    unint64_t v73 = v69[3];
    if (v70 >= v73 >> 1)
    {
      sub_100069848(v73 > 1, v70 + 1, 1);
      char v69 = v214;
    }

    v69[2]  = v70 + 1;
    v69[v70++ + 4]  = v72;
  }

  *(void *)(v2 + 1344)  = v69;
  *(void *)(v2 + 1376)  = 0xD00000000000001CLL;
  *(void *)(v2 + 1384)  = 0x8000000100366990LL;
  v239  = __dst[27];
  v240  = __dst[28];
  v241  = __dst[29];
  v235  = __dst[23];
  v236  = __dst[24];
  v237  = __dst[25];
  v238  = __dst[26];
  v231  = __dst[19];
  v232  = __dst[20];
  v233  = __dst[21];
  v234  = __dst[22];
  v227  = __dst[15];
  v228  = __dst[16];
  v229  = __dst[17];
  v230  = __dst[18];
  *(void *)(v2 + 1416)  = v68;
  sub_100069848(0, 10LL, 0);
  int v74 = _swiftEmptyArrayStorage;
  unint64_t v75 = _swiftEmptyArrayStorage[2];
  for (j  = 16LL; j != 256; j += 24LL)
  {
    uint64_t v77 = *(void *)((char *)&v227 + j);
    v215  = v74;
    unint64_t v78 = v74[3];
    if (v75 >= v78 >> 1)
    {
      sub_100069848(v78 > 1, v75 + 1, 1);
      int v74 = v215;
    }

    v74[2]  = v75 + 1;
    v74[v75++ + 4]  = v77;
  }

  *(void *)(v2 + 1392)  = v74;
  *(void *)(v2 + 1424)  = 0xD000000000000016LL;
  *(void *)(v2 + 1432)  = 0x80000001003669B0LL;
  v239  = __dst[42];
  v240  = __dst[43];
  v241  = __dst[44];
  v235  = __dst[38];
  v236  = __dst[39];
  v237  = __dst[40];
  v238  = __dst[41];
  v231  = __dst[34];
  v232  = __dst[35];
  v233  = __dst[36];
  v234  = __dst[37];
  v227  = __dst[30];
  v228  = __dst[31];
  v229  = __dst[32];
  v230  = __dst[33];
  *(void *)(v2 + 1464)  = v68;
  sub_100069848(0, 10LL, 0);
  uint64_t v79 = _swiftEmptyArrayStorage;
  unint64_t v80 = _swiftEmptyArrayStorage[2];
  for (k  = 16LL; k != 256; k += 24LL)
  {
    uint64_t v82 = *(void *)((char *)&v227 + k);
    v216  = v79;
    unint64_t v83 = v79[3];
    if (v80 >= v83 >> 1)
    {
      sub_100069848(v83 > 1, v80 + 1, 1);
      uint64_t v79 = v216;
    }

    v79[2]  = v80 + 1;
    v79[v80++ + 4]  = v82;
  }

  *(void *)(v2 + 1440)  = v79;
  *(void *)(v2 + 1472)  = 0xD000000000000014LL;
  *(void *)(v2 + 1480)  = 0x80000001003669D0LL;
  v239  = __dst[57];
  v240  = __dst[58];
  v241  = __dst[59];
  v235  = __dst[53];
  v236  = __dst[54];
  v237  = __dst[55];
  v238  = __dst[56];
  v231  = __dst[49];
  v232  = __dst[50];
  v233  = __dst[51];
  v234  = __dst[52];
  v227  = __dst[45];
  v228  = __dst[46];
  v229  = __dst[47];
  v230  = __dst[48];
  *(void *)(v2 + 1512)  = v68;
  sub_100069848(0, 10LL, 0);
  char v84 = _swiftEmptyArrayStorage;
  unint64_t v85 = _swiftEmptyArrayStorage[2];
  for (m  = 16LL; m != 256; m += 24LL)
  {
    uint64_t v87 = *(void *)((char *)&v227 + m);
    v217  = v84;
    unint64_t v88 = v84[3];
    if (v85 >= v88 >> 1)
    {
      sub_100069848(v88 > 1, v85 + 1, 1);
      char v84 = v217;
    }

    v84[2]  = v85 + 1;
    v84[v85++ + 4]  = v87;
  }

  *(void *)(v2 + 1488)  = v84;
  *(void *)(v2 + 1520)  = 0xD000000000000014LL;
  *(void *)(v2 + 1528)  = 0x80000001003669F0LL;
  v239  = __dst[72];
  v240  = __dst[73];
  v241  = __dst[74];
  v235  = __dst[68];
  v236  = __dst[69];
  v237  = __dst[70];
  v238  = __dst[71];
  v231  = __dst[64];
  v232  = __dst[65];
  v233  = __dst[66];
  v234  = __dst[67];
  v227  = __dst[60];
  v228  = __dst[61];
  v229  = __dst[62];
  v230  = __dst[63];
  *(void *)(v2 + 1560)  = v68;
  sub_100069848(0, 10LL, 0);
  v89  = _swiftEmptyArrayStorage;
  unint64_t v90 = _swiftEmptyArrayStorage[2];
  for (n  = 16LL; n != 256; n += 24LL)
  {
    uint64_t v92 = *(void *)((char *)&v227 + n);
    v218  = v89;
    unint64_t v93 = v89[3];
    if (v90 >= v93 >> 1)
    {
      sub_100069848(v93 > 1, v90 + 1, 1);
      v89  = v218;
    }

    v89[2]  = v90 + 1;
    v89[v90++ + 4]  = v92;
  }

  *(void *)(v2 + 1536)  = v89;
  *(void *)(v2 + 1568)  = 0xD000000000000015LL;
  *(void *)(v2 + 1576)  = 0x8000000100366A10LL;
  v239  = __dst[87];
  v240  = __dst[88];
  v241  = __dst[89];
  v235  = __dst[83];
  v236  = __dst[84];
  v237  = __dst[85];
  v238  = __dst[86];
  v231  = __dst[79];
  v232  = __dst[80];
  v233  = __dst[81];
  v234  = __dst[82];
  v227  = __dst[75];
  v228  = __dst[76];
  v229  = __dst[77];
  v230  = __dst[78];
  *(void *)(v2 + 1608)  = v68;
  sub_100069848(0, 10LL, 0);
  uint64_t v94 = _swiftEmptyArrayStorage;
  unint64_t v95 = _swiftEmptyArrayStorage[2];
  for (ii  = 16LL; ii != 256; ii += 24LL)
  {
    uint64_t v97 = *(void *)((char *)&v227 + ii);
    v219  = v94;
    unint64_t v98 = v94[3];
    if (v95 >= v98 >> 1)
    {
      sub_100069848(v98 > 1, v95 + 1, 1);
      uint64_t v94 = v219;
    }

    v94[2]  = v95 + 1;
    v94[v95++ + 4]  = v97;
  }

  *(void *)(v2 + 1584)  = v94;
  *(void *)(v2 + 1616)  = 0xD000000000000013LL;
  *(void *)(v2 + 1624)  = 0x8000000100366A30LL;
  *(void *)(v2 + 1656)  = v68;
  *(void *)&v227  = _swiftEmptyArrayStorage;
  sub_100069848(0, 6LL, 0);
  uint64_t v99 = v227;
  unint64_t v101 = *(void *)(v227 + 16);
  v100  = *(void *)(v227 + 24);
  unint64_t v102 = v100 >> 1;
  unint64_t v103 = v101 + 1;
  if (v100 >> 1 <= v101)
  {
    sub_100069848(v100 > 1, v101 + 1, 1);
    uint64_t v99 = v227;
    v100  = *(void *)(v227 + 24);
    unint64_t v102 = v100 >> 1;
  }

  *(void *)(v99 + 16)  = v103;
  *(void *)(v99 + 8 * v101 + 32)  = v26;
  *(void *)&v227  = v99;
  int64_t v104 = v101 + 2;
  if (v102 <= v103)
  {
    sub_100069848(v100 > 1, v104, 1);
    uint64_t v99 = v227;
  }

  *(void *)(v99 + 16)  = v104;
  *(void *)(v99 + 8 * v103 + 32)  = v27;
  *(void *)&v227  = v99;
  v106  = *(void *)(v99 + 16);
  v105  = *(void *)(v99 + 24);
  unint64_t v107 = v105 >> 1;
  v108  = v106 + 1;
  if (v105 >> 1 <= v106)
  {
    sub_100069848(v105 > 1, v106 + 1, 1);
    uint64_t v99 = v227;
    v105  = *(void *)(v227 + 24);
    unint64_t v107 = v105 >> 1;
  }

  *(void *)(v99 + 16)  = v108;
  *(void *)(v99 + 8 * v106 + 32)  = v199;
  *(void *)&v227  = v99;
  int64_t v109 = v106 + 2;
  if (v107 <= v108)
  {
    sub_100069848(v105 > 1, v109, 1);
    uint64_t v99 = v227;
  }

  *(void *)(v99 + 16)  = v109;
  *(void *)(v99 + 8 * v108 + 32)  = v200;
  *(void *)&v227  = v99;
  v111  = *(void *)(v99 + 16);
  unint64_t v110 = *(void *)(v99 + 24);
  v112  = v110 >> 1;
  unint64_t v113 = v111 + 1;
  if (v110 >> 1 <= v111)
  {
    sub_100069848(v110 > 1, v111 + 1, 1);
    uint64_t v99 = v227;
    unint64_t v110 = *(void *)(v227 + 24);
    v112  = v110 >> 1;
  }

  *(void *)(v99 + 16)  = v113;
  *(void *)(v99 + 8 * v111 + 32)  = v196;
  *(void *)&v227  = v99;
  int64_t v114 = v111 + 2;
  if (v112 <= v113)
  {
    sub_100069848(v110 > 1, v114, 1);
    uint64_t v99 = v227;
  }

  *(void *)(v99 + 16)  = v114;
  *(void *)(v99 + 8 * v113 + 32)  = v28;
  *(void *)(v2 + 1632)  = v99;
  *(void *)(v2 + 1664)  = 0xD00000000000001DLL;
  *(void *)(v2 + 1672)  = 0x8000000100366A50LL;
  v237  = v341;
  v238  = v342;
  v239  = v343;
  *(void *)&v240  = v344;
  v233  = v337;
  v234  = v338;
  v235  = v339;
  v236  = v340;
  v229  = v333;
  v230  = v334;
  v231  = v335;
  v232  = v336;
  v227  = v331;
  v228  = v332;
  *(void *)(v2 + 1704)  = v68;
  sub_100069848(0, 9LL, 0);
  v115  = _swiftEmptyArrayStorage;
  unint64_t v116 = _swiftEmptyArrayStorage[2];
  for (jj  = 16LL; jj != 232; jj += 24LL)
  {
    v118  = *(void *)((char *)&v227 + jj);
    v220  = v115;
    v119  = v115[3];
    if (v116 >= v119 >> 1)
    {
      sub_100069848(v119 > 1, v116 + 1, 1);
      v115  = v220;
    }

    v115[2]  = v116 + 1;
    v115[v116++ + 4]  = v118;
  }

  *(void *)(v2 + 1680)  = v115;
  *(void *)(v2 + 1712)  = 0xD000000000000021LL;
  *(void *)(v2 + 1720)  = 0x8000000100366A70LL;
  v237  = v327;
  v238  = v328;
  v239  = v329;
  *(void *)&v240  = v330;
  v233  = v323;
  v234  = v324;
  v235  = v325;
  v236  = v326;
  v229  = v319;
  v230  = v320;
  v231  = v321;
  v232  = v322;
  v227  = v317;
  v228  = v318;
  *(void *)(v2 + 1752)  = v68;
  sub_100069848(0, 9LL, 0);
  v120  = _swiftEmptyArrayStorage;
  unint64_t v121 = _swiftEmptyArrayStorage[2];
  for (kk  = 16LL; kk != 232; kk += 24LL)
  {
    v123  = *(void *)((char *)&v227 + kk);
    v221  = v120;
    unint64_t v124 = v120[3];
    if (v121 >= v124 >> 1)
    {
      sub_100069848(v124 > 1, v121 + 1, 1);
      v120  = v221;
    }

    v120[2]  = v121 + 1;
    v120[v121++ + 4]  = v123;
  }

  *(void *)(v2 + 1728)  = v120;
  *(void *)(v2 + 1760)  = 0xD000000000000019LL;
  *(void *)(v2 + 1768)  = 0x8000000100366AA0LL;
  *(void *)(v2 + 1800)  = v68;
  *(void *)&v227  = _swiftEmptyArrayStorage;
  sub_100069848(0, 4LL, 0);
  v125  = v227;
  unint64_t v127 = *(void *)(v227 + 16);
  unint64_t v126 = *(void *)(v227 + 24);
  unint64_t v128 = v126 >> 1;
  unint64_t v129 = v127 + 1;
  if (v126 >> 1 <= v127)
  {
    sub_100069848(v126 > 1, v127 + 1, 1);
    v125  = v227;
    unint64_t v126 = *(void *)(v227 + 24);
    unint64_t v128 = v126 >> 1;
  }

  *(void *)(v125 + 16)  = v129;
  *(void *)(v125 + 8 * v127 + 32)  = v201;
  *(void *)&v227  = v125;
  int64_t v130 = v127 + 2;
  if (v128 <= v129)
  {
    sub_100069848(v126 > 1, v130, 1);
    v125  = v227;
  }

  *(void *)(v125 + 16)  = v130;
  *(void *)(v125 + 8 * v129 + 32)  = v202;
  *(void *)&v227  = v125;
  v132  = *(void *)(v125 + 16);
  unint64_t v131 = *(void *)(v125 + 24);
  unint64_t v133 = v131 >> 1;
  unint64_t v134 = v132 + 1;
  if (v131 >> 1 <= v132)
  {
    sub_100069848(v131 > 1, v132 + 1, 1);
    v125  = v227;
    unint64_t v131 = *(void *)(v227 + 24);
    unint64_t v133 = v131 >> 1;
  }

  *(void *)(v125 + 16)  = v134;
  *(void *)(v125 + 8 * v132 + 32)  = v203;
  *(void *)&v227  = v125;
  int64_t v135 = v132 + 2;
  if (v133 <= v134)
  {
    sub_100069848(v131 > 1, v135, 1);
    v125  = v227;
  }

  *(void *)(v125 + 16)  = v135;
  *(void *)(v125 + 8 * v134 + 32)  = v204;
  *(void *)(v2 + 1776)  = v125;
  *(void *)(v2 + 1808)  = 0xD00000000000001ELL;
  *(void *)(v2 + 1816)  = 0x8000000100366AC0LL;
  *(void *)(v2 + 1848)  = v68;
  *(void *)&v227  = _swiftEmptyArrayStorage;
  sub_100069848(0, 5LL, 0);
  uint64_t v136 = v227;
  v138  = *(void *)(v227 + 16);
  v137  = *(void *)(v227 + 24);
  v139  = v137 >> 1;
  v140  = v138 + 1;
  if (v137 >> 1 <= v138)
  {
    sub_100069848(v137 > 1, v138 + 1, 1);
    uint64_t v136 = v227;
    v137  = *(void *)(v227 + 24);
    v139  = v137 >> 1;
  }

  *(void *)(v136 + 16)  = v140;
  *(void *)(v136 + 8 * v138 + 32)  = v205;
  *(void *)&v227  = v136;
  v141  = v138 + 2;
  if (v139 <= v140)
  {
    sub_100069848(v137 > 1, v141, 1);
    uint64_t v136 = v227;
  }

  *(void *)(v136 + 16)  = v141;
  *(void *)(v136 + 8 * v140 + 32)  = v206;
  *(void *)&v227  = v136;
  v143  = *(void *)(v136 + 16);
  v142  = *(void *)(v136 + 24);
  v144  = v142 >> 1;
  v145  = v143 + 1;
  if (v142 >> 1 <= v143)
  {
    sub_100069848(v142 > 1, v143 + 1, 1);
    uint64_t v136 = v227;
    v142  = *(void *)(v227 + 24);
    v144  = v142 >> 1;
  }

  *(void *)(v136 + 16)  = v145;
  *(void *)(v136 + 8 * v143 + 32)  = v207;
  *(void *)&v227  = v136;
  v146  = v143 + 2;
  if (v144 <= v145)
  {
    sub_100069848(v142 > 1, v146, 1);
    uint64_t v136 = v227;
  }

  *(void *)(v136 + 16)  = v146;
  *(void *)(v136 + 8 * v145 + 32)  = v209;
  *(void *)&v227  = v136;
  v148  = *(void *)(v136 + 16);
  v147  = *(void *)(v136 + 24);
  if (v148 >= v147 >> 1)
  {
    sub_100069848(v147 > 1, v148 + 1, 1);
    uint64_t v136 = v227;
  }

  *(void *)(v136 + 16)  = v148 + 1;
  *(void *)(v136 + 8 * v148 + 32)  = v197;
  *(void *)(v2 + 1824)  = v136;
  *(void *)(v2 + 1856)  = 0x53544154535F4C4CLL;
  *(void *)(v2 + 1864)  = 0xEF4143435F58545FLL;
  v239  = v314;
  v240  = v315;
  v241  = v316;
  v235  = v310;
  v236  = v311;
  v237  = v312;
  v238  = v313;
  v231  = v306;
  v232  = v307;
  v233  = v308;
  v234  = v309;
  v227  = v302;
  v228  = v303;
  v229  = v304;
  v230  = v305;
  *(void *)(v2 + 1896)  = v68;
  sub_100069848(0, 10LL, 0);
  v149  = _swiftEmptyArrayStorage;
  v150  = _swiftEmptyArrayStorage[2];
  for (mm  = 16LL; mm != 256; mm += 24LL)
  {
    v152  = *(void *)((char *)&v227 + mm);
    v222  = v149;
    v153  = v149[3];
    if (v150 >= v153 >> 1)
    {
      sub_100069848(v153 > 1, v150 + 1, 1);
      v149  = v222;
    }

    v149[2]  = v150 + 1;
    v149[v150++ + 4]  = v152;
  }

  *(void *)(v2 + 1872)  = v149;
  *(void *)(v2 + 1904)  = 0xD000000000000016LL;
  *(void *)(v2 + 1912)  = 0x8000000100366AE0LL;
  *(void *)(v2 + 1944)  = v68;
  *(void *)&v227  = _swiftEmptyArrayStorage;
  sub_100069848(0, 3LL, 0);
  v154  = v227;
  v156  = *(void *)(v227 + 16);
  v155  = *(void *)(v227 + 24);
  v157  = v155 >> 1;
  v158  = v156 + 1;
  if (v155 >> 1 <= v156)
  {
    sub_100069848(v155 > 1, v156 + 1, 1);
    v154  = v227;
    v155  = *(void *)(v227 + 24);
    v157  = v155 >> 1;
  }

  *(void *)(v154 + 16)  = v158;
  *(void *)(v154 + 8 * v156 + 32)  = v211;
  *(void *)&v227  = v154;
  v159  = v156 + 2;
  if (v157 <= v158)
  {
    sub_100069848(v155 > 1, v159, 1);
    v154  = v227;
  }

  *(void *)(v154 + 16)  = v159;
  *(void *)(v154 + 8 * v158 + 32)  = v213;
  *(void *)&v227  = v154;
  v161  = *(void *)(v154 + 16);
  v160  = *(void *)(v154 + 24);
  if (v161 >= v160 >> 1)
  {
    sub_100069848(v160 > 1, v161 + 1, 1);
    v154  = v227;
  }

  *(void *)(v154 + 16)  = v161 + 1;
  *(void *)(v154 + 8 * v161 + 32)  = v198;
  *(void *)(v2 + 1920)  = v154;
  *(void *)(v2 + 1952)  = 0xD000000000000017LL;
  *(void *)(v2 + 1960)  = 0x8000000100366B00LL;
  v239  = v299;
  v240  = v300;
  v241  = v301;
  v235  = v295;
  v236  = v296;
  v237  = v297;
  v238  = v298;
  v231  = v291;
  v232  = v292;
  v233  = v293;
  v234  = v294;
  v227  = v287;
  v228  = v288;
  v229  = v289;
  v230  = v290;
  *(void *)(v2 + 1992)  = v68;
  sub_100069848(0, 10LL, 0);
  v162  = _swiftEmptyArrayStorage;
  v163  = _swiftEmptyArrayStorage[2];
  for (nn  = 16LL; nn != 256; nn += 24LL)
  {
    v165  = *(void *)((char *)&v227 + nn);
    v223  = v162;
    v166  = v162[3];
    if (v163 >= v166 >> 1)
    {
      sub_100069848(v166 > 1, v163 + 1, 1);
      v162  = v223;
    }

    v162[2]  = v163 + 1;
    v162[v163++ + 4]  = v165;
  }

  *(void *)(v2 + 1968)  = v162;
  *(void *)(v2 + 2000)  = 0xD000000000000015LL;
  *(void *)(v2 + 2008)  = 0x8000000100366B20LL;
  v239  = v284;
  v240  = v285;
  v241  = v286;
  v235  = v280;
  v236  = v281;
  v237  = v282;
  v238  = v283;
  v231  = v276;
  v232  = v277;
  v233  = v278;
  v234  = v279;
  v227  = v272;
  v228  = v273;
  v229  = v274;
  v230  = v275;
  *(void *)(v2 + 2040)  = v68;
  sub_100069848(0, 10LL, 0);
  v167  = _swiftEmptyArrayStorage;
  v168  = _swiftEmptyArrayStorage[2];
  for (i1  = 16LL; i1 != 256; i1 += 24LL)
  {
    v170  = *(void *)((char *)&v227 + i1);
    v224  = v167;
    v171  = v167[3];
    if (v168 >= v171 >> 1)
    {
      sub_100069848(v171 > 1, v168 + 1, 1);
      v167  = v224;
    }

    v167[2]  = v168 + 1;
    v167[v168++ + 4]  = v170;
  }

  *(void *)(v2 + 2016)  = v167;
  *(void *)(v2 + 2048)  = 0xD000000000000014LL;
  *(void *)(v2 + 2056)  = 0x8000000100366B40LL;
  v239  = v269;
  v240  = v270;
  v241  = v271;
  v235  = v265;
  v236  = v266;
  v237  = v267;
  v238  = v268;
  v231  = v261;
  v232  = v262;
  v233  = v263;
  v234  = v264;
  v227  = v257;
  v228  = v258;
  v229  = v259;
  v230  = v260;
  *(void *)(v2 + 2088)  = v68;
  sub_100069848(0, 10LL, 0);
  v172  = _swiftEmptyArrayStorage;
  v173  = _swiftEmptyArrayStorage[2];
  for (i2  = 16LL; i2 != 256; i2 += 24LL)
  {
    v175  = *(void *)((char *)&v227 + i2);
    v225  = v172;
    v176  = v172[3];
    if (v173 >= v176 >> 1)
    {
      sub_100069848(v176 > 1, v173 + 1, 1);
      v172  = v225;
    }

    v172[2]  = v173 + 1;
    v172[v173++ + 4]  = v175;
  }

  *(void *)(v2 + 2064)  = v172;
  *(void *)(v2 + 2096)  = 0xD000000000000015LL;
  *(void *)(v2 + 2104)  = 0x8000000100366B60LL;
  v239  = v254;
  v240  = v255;
  v241  = v256;
  v235  = v250;
  v236  = v251;
  v237  = v252;
  v238  = v253;
  v231  = v246;
  v232  = v247;
  v233  = v248;
  v234  = v249;
  v227  = v242;
  v228  = v243;
  v229  = v244;
  v230  = v245;
  *(void *)(v2 + 2136)  = v68;
  sub_100069848(0, 10LL, 0);
  v177  = _swiftEmptyArrayStorage;
  v178  = _swiftEmptyArrayStorage[2];
  for (i3  = 16LL; i3 != 256; i3 += 24LL)
  {
    v180  = *(void *)((char *)&v227 + i3);
    v226  = v177;
    v181  = v177[3];
    if (v178 >= v181 >> 1)
    {
      sub_100069848(v181 > 1, v178 + 1, 1);
      v177  = v226;
    }

    v177[2]  = v178 + 1;
    v177[v178++ + 4]  = v180;
  }

  *(void *)(v2 + 2112)  = v177;
  *(void *)(v2 + 2144)  = 0xD000000000000010LL;
  *(void *)(v2 + 2152)  = 0x8000000100366B80LL;
  *(void *)(v2 + 2184)  = v68;
  *(void *)&v227  = _swiftEmptyArrayStorage;
  sub_100069848(0, 4LL, 0);
  sub_100153508();
  sub_100153508();
  sub_100153508();
  sub_100153508();
  sub_100153508();
  sub_100153508();
  sub_100153508();
  sub_100153508();
  sub_100153508();
  v182  = v227;
  v184  = *(void *)(v227 + 16);
  v183  = *(void *)(v227 + 24);
  if (v184 >= v183 >> 1)
  {
    sub_100069848(v183 > 1, v184 + 1, 1);
    v182  = v227;
  }

  *(void *)(v182 + 16)  = v184 + 1;
  *(void *)(v182 + 8 * v184 + 32)  = v54;
  sub_100153508();
  v185  = v227;
  v187  = *(void *)(v227 + 16);
  v186  = *(void *)(v227 + 24);
  if (v187 >= v186 >> 1)
  {
    sub_100069848(v186 > 1, v187 + 1, 1);
    v185  = v227;
  }

  *(void *)(v185 + 16)  = v187 + 1;
  *(void *)(v185 + 8 * v187 + 32)  = v55;
  sub_100153508();
  v188  = v227;
  v190  = *(void *)(v227 + 16);
  v189  = *(void *)(v227 + 24);
  if (v190 >= v189 >> 1)
  {
    sub_100069848(v189 > 1, v190 + 1, 1);
    v188  = v227;
  }

  *(void *)(v188 + 16)  = v190 + 1;
  *(void *)(v188 + 8 * v190 + 32)  = v56;
  sub_100153508();
  v191  = v227;
  v193  = *(void *)(v227 + 16);
  v192  = *(void *)(v227 + 24);
  if (v193 >= v192 >> 1)
  {
    sub_100069848(v192 > 1, v193 + 1, 1);
    v191  = v227;
  }

  *(void *)(v191 + 16)  = v193 + 1;
  *(void *)(v191 + 8 * v193 + 32)  = v66;
  *(void *)(v2 + 2160)  = v191;
  v194  = NANBitmap.Channel.operatingClass.getter(v2);
  return sub_10000D658(v194);
}

uint64_t apple80211_awdl_low_latency_statistics.eventPayload()()
{
  uint64_t v2 = (char *)&v39 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100002274(qword_100405EA0);
  uint64_t v4 = swift_allocObject(v3, 1904LL, 7LL);
  *(_OWORD *)(v4 + 16)  = xmmword_10034A7F0;
  strcpy((char *)(v4 + 32), "LL_STATS_ISSDB");
  *(_BYTE *)(v4 + 47)  = -18;
  char v5 = *(_DWORD *)(v0 + 8);
  __int16 v6 = *(_WORD *)(v0 + 16);
  int v8 = *(_DWORD *)(v0 + 20);
  int v7 = *(_DWORD *)(v0 + 24);
  int v9 = *(_DWORD *)(v0 + 28);
  int v10 = *(_DWORD *)(v0 + 48);
  int v11 = *(_DWORD *)(v0 + 60);
  HIDWORD(v39)  = *(_DWORD *)(v0 + 36);
  int v40 = v11;
  int v12 = *(_DWORD *)(v0 + 72);
  int v41 = v10;
  int v42 = v12;
  int v13 = *(_DWORD *)(v0 + 84);
  int v43 = *(_DWORD *)(v0 + 80);
  int v44 = v13;
  int v14 = *(_DWORD *)(v0 + 92);
  int v45 = *(_DWORD *)(v0 + 88);
  int v46 = v14;
  int v15 = *(_DWORD *)(v0 + 100);
  int v47 = *(_DWORD *)(v0 + 96);
  int v48 = v15;
  int v49 = *(unsigned __int8 *)(v0 + 104);
  uint64_t v50 = *(void *)(v0 + 112);
  int v16 = *(_DWORD *)(v0 + 124);
  int v51 = *(_DWORD *)(v0 + 120);
  int v52 = v16;
  int v17 = *(_DWORD *)(v0 + 132);
  int v53 = *(_DWORD *)(v0 + 128);
  int v54 = v17;
  int v18 = *(_DWORD *)(v0 + 140);
  int v55 = *(_DWORD *)(v0 + 136);
  int v56 = v18;
  int v57 = *(_DWORD *)(v0 + 144);
  int v60 = *(_DWORD *)(v0 + 148);
  int v62 = *(unsigned __int16 *)(v0 + 152);
  int v19 = *(unsigned __int8 *)(v0 + 154);
  *(_BYTE *)(v4 + 48)  = v5;
  *(void *)(v4 + 72)  = &type metadata for Bool;
  *(void *)(v4 + 80)  = 0xD000000000000015LL;
  *(void *)(v4 + 88)  = 0x8000000100366060LL;
  int v58 = *(unsigned __int8 *)(v0 + 155);
  int v59 = v19;
  uint64_t v20 = *(void *)(v0 + 192);
  int v61 = *(unsigned __int8 *)(v0 + 157);
  int v63 = *(unsigned __int8 *)(v0 + 158);
  int v65 = *(unsigned __int8 *)(v0 + 159);
  uint64_t v66 = *(unsigned int *)(v0 + 162);
  int v21 = *(_DWORD *)(v0 + 168);
  int v67 = *(unsigned __int8 *)(v0 + 166);
  int v68 = v21;
  int v22 = *(_DWORD *)(v0 + 176);
  int v69 = *(_DWORD *)(v0 + 172);
  int v70 = v22;
  int v71 = *(_DWORD *)(v0 + 180);
  uint64_t v72 = *(void *)(v0 + 184);
  uint64_t v64 = *(unsigned __int16 *)(v0 + 160);
  uint64_t v23 = sub_100002274(&qword_1004040A8);
  uint64_t v24 = swift_allocObject(v23, 34LL, 7LL);
  *(_OWORD *)(v24 + 16)  = xmmword_10033B810;
  *(_WORD *)(v24 + 32)  = v6;
  v73[0]  = v24;
  static String.Encoding.utf8.getter(v24);
  uint64_t v25 = sub_100002274(&qword_100406978);
  unint64_t v26 = sub_100154DC8();
  uint64_t v27 = String.init<A>(bytes:encoding:)(v73, v2, v25, v26);
  unint64_t v29 = v28;
  swift_bridgeObjectRelease(v24);
  *(_DWORD *)(v4 + 144)  = v8;
  *(_DWORD *)(v4 + 192)  = v7;
  *(_DWORD *)(v4 + 240)  = v9;
  unint64_t v30 = 0xE000000000000000LL;
  if (v29)
  {
    unint64_t v30 = v29;
    uint64_t v31 = v27;
  }

  else
  {
    uint64_t v31 = 0LL;
  }

  *(void *)(v4 + 96)  = v31;
  *(void *)(v4 + 104)  = v30;
  *(void *)(v4 + 128)  = 0xD000000000000014LL;
  *(void *)(v4 + 136)  = 0x8000000100366080LL;
  *(void *)(v4 + 184)  = 0x80000001003660A0LL;
  *(void *)(v4 + 216)  = &type metadata for Int32;
  *(void *)(v4 + 168)  = &type metadata for Int32;
  *(void *)(v4 + 176)  = 0xD000000000000013LL;
  *(void *)(v4 + 224)  = 0xD000000000000013LL;
  *(void *)(v4 + 232)  = 0x80000001003660C0LL;
  *(void *)(v4 + 280)  = 0x80000001003660E0LL;
  *(void *)(v4 + 120)  = &type metadata for String;
  int v32 = v40;
  *(_DWORD *)(v4 + 288)  = HIDWORD(v39);
  *(void *)(v4 + 264)  = &type metadata for UInt32;
  *(void *)(v4 + 272)  = 0xD00000000000001DLL;
  *(void *)(v4 + 312)  = &type metadata for UInt32;
  *(void *)(v4 + 320)  = 0xD00000000000001DLL;
  *(void *)(v4 + 328)  = 0x8000000100366100LL;
  *(_DWORD *)(v4 + 336)  = v32;
  *(void *)(v4 + 360)  = &type metadata for UInt32;
  *(void *)(v4 + 368)  = 0xD00000000000001ELL;
  *(void *)(v4 + 376)  = 0x8000000100366120LL;
  *(_DWORD *)(v4 + 384)  = v41;
  *(void *)(v4 + 408)  = &type metadata for UInt32;
  *(void *)(v4 + 416)  = 0xD00000000000001ELL;
  *(void *)(v4 + 424)  = 0x8000000100366140LL;
  *(_DWORD *)(v4 + 432)  = v42;
  *(void *)(v4 + 456)  = &type metadata for UInt32;
  *(void *)(v4 + 464)  = 0xD000000000000022LL;
  *(void *)(v4 + 472)  = 0x8000000100366160LL;
  *(_DWORD *)(v4 + 480)  = v43;
  *(void *)(v4 + 504)  = &type metadata for UInt32;
  *(void *)(v4 + 512)  = 0xD000000000000022LL;
  *(void *)(v4 + 520)  = 0x8000000100366190LL;
  *(void *)(v4 + 552)  = &type metadata for UInt32;
  *(_DWORD *)(v4 + 528)  = v44;
  *(void *)(v4 + 560)  = 0xD000000000000022LL;
  *(void *)(v4 + 568)  = 0x80000001003661C0LL;
  *(void *)(v4 + 600)  = &type metadata for UInt32;
  *(_DWORD *)(v4 + 576)  = v45;
  *(void *)(v4 + 608)  = 0xD000000000000022LL;
  *(void *)(v4 + 616)  = 0x80000001003661F0LL;
  *(void *)(v4 + 648)  = &type metadata for UInt32;
  *(_DWORD *)(v4 + 624)  = v46;
  *(void *)(v4 + 656)  = 0xD000000000000028LL;
  *(void *)(v4 + 664)  = 0x8000000100366220LL;
  *(void *)(v4 + 696)  = &type metadata for UInt32;
  *(_DWORD *)(v4 + 672)  = v47;
  *(void *)(v4 + 704)  = 0xD000000000000029LL;
  *(void *)(v4 + 712)  = 0x8000000100366250LL;
  *(void *)(v4 + 744)  = &type metadata for UInt32;
  *(_DWORD *)(v4 + 720)  = v48;
  *(void *)(v4 + 752)  = 0xD00000000000001CLL;
  *(void *)(v4 + 760)  = 0x8000000100366280LL;
  *(void *)(v4 + 792)  = &type metadata for Bool;
  *(_BYTE *)(v4 + 768)  = v49;
  *(void *)(v4 + 800)  = 0xD000000000000019LL;
  *(void *)(v4 + 808)  = 0x80000001003662A0LL;
  *(void *)(v4 + 840)  = &type metadata for UInt64;
  *(void *)(v4 + 816)  = v50;
  *(void *)(v4 + 848)  = 0xD000000000000019LL;
  *(void *)(v4 + 856)  = 0x80000001003662C0LL;
  *(void *)(v4 + 888)  = &type metadata for UInt32;
  *(_DWORD *)(v4 + 864)  = v51;
  *(void *)(v4 + 896)  = 0xD00000000000001ALL;
  *(void *)(v4 + 904)  = 0x80000001003662E0LL;
  *(void *)(v4 + 936)  = &type metadata for UInt32;
  *(_DWORD *)(v4 + 912)  = v52;
  *(void *)(v4 + 944)  = 0xD000000000000023LL;
  *(void *)(v4 + 952)  = 0x8000000100366300LL;
  *(void *)(v4 + 984)  = &type metadata for UInt32;
  *(_DWORD *)(v4 + 960)  = v53;
  *(void *)(v4 + 992)  = 0xD00000000000001BLL;
  *(void *)(v4 + 1000)  = 0x8000000100366330LL;
  *(void *)(v4 + 1032)  = &type metadata for UInt32;
  *(_DWORD *)(v4 + 1008)  = v54;
  *(void *)(v4 + 1040)  = 0xD00000000000001BLL;
  *(void *)(v4 + 1048)  = 0x8000000100366350LL;
  *(void *)(v4 + 1080)  = &type metadata for UInt32;
  *(_DWORD *)(v4 + 1056)  = v55;
  *(void *)(v4 + 1088)  = 0xD000000000000021LL;
  *(void *)(v4 + 1096)  = 0x8000000100366370LL;
  *(void *)(v4 + 1128)  = &type metadata for UInt32;
  *(_DWORD *)(v4 + 1104)  = v56;
  *(void *)(v4 + 1136)  = 0xD00000000000001FLL;
  *(void *)(v4 + 1144)  = 0x80000001003663A0LL;
  *(void *)(v4 + 1176)  = &type metadata for UInt32;
  *(_DWORD *)(v4 + 1152)  = v57;
  *(void *)(v4 + 1184)  = 0xD000000000000023LL;
  *(void *)(v4 + 1192)  = 0x80000001003663C0LL;
  *(void *)(v4 + 1224)  = &type metadata for UInt32;
  *(_DWORD *)(v4 + 1200)  = v60;
  *(void *)(v4 + 1232)  = 0xD00000000000001FLL;
  *(void *)(v4 + 1240)  = 0x80000001003663F0LL;
  *(void *)(v4 + 1272)  = &type metadata for UInt16;
  *(_WORD *)(v4 + 1248)  = v62;
  *(void *)(v4 + 1280)  = 0xD00000000000001DLL;
  *(void *)(v4 + 1288)  = 0x8000000100366410LL;
  *(void *)(v4 + 1320)  = &type metadata for Bool;
  *(_BYTE *)(v4 + 1296)  = v59;
  *(void *)(v4 + 1328)  = 0xD00000000000001DLL;
  *(void *)(v4 + 1336)  = 0x8000000100366430LL;
  *(void *)(v4 + 1368)  = &type metadata for Bool;
  *(_BYTE *)(v4 + 1344)  = v58;
  *(void *)(v4 + 1376)  = 0xD000000000000018LL;
  *(void *)(v4 + 1384)  = 0x8000000100366450LL;
  *(void *)(v4 + 1416)  = &type metadata for Bool;
  *(_BYTE *)(v4 + 1392)  = v61;
  *(void *)(v4 + 1424)  = 0xD000000000000017LL;
  *(void *)(v4 + 1432)  = 0x8000000100366470LL;
  *(void *)(v4 + 1464)  = &type metadata for Bool;
  *(_BYTE *)(v4 + 1440)  = v63;
  *(void *)(v4 + 1472)  = 0xD000000000000021LL;
  *(void *)(v4 + 1480)  = 0x8000000100366490LL;
  *(void *)(v4 + 1512)  = &type metadata for UInt8;
  *(_BYTE *)(v4 + 1488)  = v65;
  *(void *)(v4 + 1520)  = 0x53544154535F4C4CLL;
  unint64_t v33 = v64 | (v66 << 16);
  *(void *)(v4 + 1528)  = 0xEF44495F4754525FLL;
  uint64_t v34 = WiFiAddress.description.getter(v33);
  *(void *)(v4 + 1560)  = &type metadata for String;
  *(void *)(v4 + 1536)  = v34;
  *(void *)(v4 + 1544)  = v35;
  *(void *)(v4 + 1568)  = 0xD000000000000012LL;
  *(void *)(v4 + 1576)  = 0x80000001003664C0LL;
  *(void *)(v4 + 1608)  = &type metadata for Bool;
  *(_BYTE *)(v4 + 1584)  = v67;
  *(void *)(v4 + 1616)  = 0xD000000000000021LL;
  *(void *)(v4 + 1624)  = 0x80000001003664E0LL;
  *(void *)(v4 + 1656)  = &type metadata for UInt32;
  *(_DWORD *)(v4 + 1632)  = v68;
  *(void *)(v4 + 1664)  = 0xD000000000000021LL;
  *(void *)(v4 + 1672)  = 0x8000000100366510LL;
  *(void *)(v4 + 1704)  = &type metadata for UInt32;
  *(_DWORD *)(v4 + 1680)  = v69;
  *(void *)(v4 + 1712)  = 0xD000000000000025LL;
  *(void *)(v4 + 1720)  = 0x8000000100366540LL;
  *(void *)(v4 + 1752)  = &type metadata for UInt32;
  *(_DWORD *)(v4 + 1728)  = v70;
  *(void *)(v4 + 1760)  = 0xD000000000000021LL;
  *(void *)(v4 + 1768)  = 0x8000000100366570LL;
  *(void *)(v4 + 1800)  = &type metadata for UInt32;
  *(_DWORD *)(v4 + 1776)  = v71;
  *(void *)(v4 + 1808)  = 0xD000000000000018LL;
  *(void *)(v4 + 1816)  = 0x80000001003665A0LL;
  *(void *)(v4 + 1848)  = &type metadata for UInt64;
  *(void *)(v4 + 1824)  = v72;
  *(void *)(v4 + 1856)  = 0xD000000000000023LL;
  *(void *)(v4 + 1864)  = 0x80000001003665C0LL;
  *(void *)(v4 + 1896)  = &type metadata for Double;
  *(void *)(v4 + 1872)  = v20;
  unint64_t v36 = sub_10000D658(v4);
  memcpy(v73, (const void *)(v0 + 200), 0xEE8uLL);
  unint64_t v37 = sub_100150F6C();
  return sub_1001464B0( v37,  v36,  (uint64_t)sub_100153E44,  (void (*)(uint64_t, uint64_t, void, uint64_t, uint64_t *))sub_100153BE4);
}

uint64_t sub_100153508()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v0);
  void *v0 = v1;
  if ((result & 1) == 0) {
    return sub_100069848(0, *(void *)(v1 + 16) + 1LL, 1);
  }
  return result;
}

uint64_t sub_100153550(void *a1, char a2, void *a3)
{
  if (!a1[2]) {
    return swift_bridgeObjectRelease(a1);
  }
  uint64_t v45 = a1[2];
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  int v8 = (void *)a1[6];
  swift_bridgeObjectRetain(a1);
  uint64_t v48 = v7;
  uint64_t v49 = v6;
  int v9 = (void *)*a3;
  swift_bridgeObjectRetain(v6);
  id v10 = v8;
  unint64_t v12 = sub_10001C008(v7, v6);
  uint64_t v13 = v9[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14)) {
    goto LABEL_23;
  }
  char v16 = v11;
  if (v9[3] >= v15)
  {
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0) {
        goto LABEL_10;
      }
    }

    else
    {
      sub_10013DBBC();
      if ((v16 & 1) != 0) {
        goto LABEL_10;
      }
    }

uint64_t sub_1001538DC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  if (!v10) {
    goto LABEL_23;
  }
  uint64_t v12 = v9;
  uint64_t v13 = v10;
  int v56 = v11;
  BOOL v14 = (void *)*a5;
  unint64_t v16 = sub_10001C008(v9, v10);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  char v20 = v15;
  if (v14[3] >= v19)
  {
    if ((a4 & 1) != 0)
    {
      uint64_t v23 = (void *)*a5;
      if ((v15 & 1) != 0) {
        goto LABEL_9;
      }
    }

    else
    {
      sub_10013DBBC();
      uint64_t v23 = (void *)*a5;
      if ((v20 & 1) != 0) {
        goto LABEL_9;
      }
    }

uint64_t sub_100153BE4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v8 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v9 = ~v8;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = -v8;
  uint64_t v38 = a1;
  uint64_t v39 = a1 + 64;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  else {
    uint64_t v12 = -1LL;
  }
  uint64_t v40 = v9;
  uint64_t v41 = 0LL;
  uint64_t v42 = v12 & v10;
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_10018D328(&v36);
  uint64_t v13 = *((void *)&v36 + 1);
  if (!*((void *)&v36 + 1))
  {
LABEL_19:
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_100057324(v38);
    return swift_release(v44);
  }

  while (1)
  {
    uint64_t v16 = v36;
    sub_100022594(&v37, v35);
    uint64_t v17 = *a5;
    unint64_t v19 = sub_10001C008(v16, v13);
    uint64_t v20 = *(void *)(v17 + 16);
    BOOL v21 = (v18 & 1) == 0;
    uint64_t v22 = v20 + v21;
    if (__OFADD__(v20, v21)) {
      break;
    }
    char v23 = v18;
    if (*(void *)(v17 + 24) >= v22)
    {
      if ((a4 & 1) != 0)
      {
        if ((v18 & 1) != 0) {
          goto LABEL_6;
        }
      }

      else
      {
        sub_10013C320();
        if ((v23 & 1) != 0) {
          goto LABEL_6;
        }
      }
    }

    else
    {
      sub_10013698C(v22, a4 & 1);
      uint64_t v24 = sub_10001C008(v16, v13);
      if ((v23 & 1) != (v25 & 1)) {
        goto LABEL_22;
      }
      unint64_t v19 = v24;
      if ((v23 & 1) != 0)
      {
LABEL_6:
        uint64_t v14 = 32 * v19;
        sub_100002AE4(*(void *)(*a5 + 56) + v14, (uint64_t)v33);
        sub_100002AE4((uint64_t)v33, (uint64_t)v34);
        sub_100002AC4(v33);
        sub_100002AC4(v35);
        swift_bridgeObjectRelease(v13);
        char v15 = (void *)(*(void *)(*a5 + 56) + v14);
        sub_100002AC4(v15);
        sub_100022594(v34, v15);
        goto LABEL_7;
      }
    }

    uint64_t v26 = (void *)*a5;
    *(void *)(*a5 + 8 * (v19 >> 6) + 64) |= 1LL << v19;
    uint64_t v27 = (uint64_t *)(v26[6] + 16 * v19);
    *uint64_t v27 = v16;
    v27[1]  = v13;
    sub_100022594(v35, (_OWORD *)(v26[7] + 32 * v19));
    uint64_t v28 = v26[2];
    BOOL v29 = __OFADD__(v28, 1LL);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_21;
    }
    _OWORD v26[2] = v30;
LABEL_7:
    sub_10018D328(&v36);
    uint64_t v13 = *((void *)&v36 + 1);
    a4  = 1;
    if (!*((void *)&v36 + 1)) {
      goto LABEL_19;
    }
  }

  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100153E44@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  sub_100002AE4((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2  = v4;
  a2[1]  = v3;
  return swift_bridgeObjectRetain(v3);
}

BOOL _s7CoreP2P14AWDLStatisticsO17AirPlayStatisticsV23__derived_struct_equalsySbAE_AEtFZ_0( uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (*(void *)a1 == *(void *)a2
    && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
    && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
    && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
    && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
    && *(unsigned __int16 *)(a1 + 32) == *(unsigned __int16 *)(a2 + 32)
    && *(unsigned __int16 *)(a1 + 34) == *(unsigned __int16 *)(a2 + 34)
    && *(unsigned __int16 *)(a1 + 36) == *(unsigned __int16 *)(a2 + 36)
    && *(unsigned __int16 *)(a1 + 38) == *(unsigned __int16 *)(a2 + 38)
    && *(unsigned __int16 *)(a1 + 40) == *(unsigned __int16 *)(a2 + 40)
    && *(unsigned __int8 *)(a1 + 42) == *(unsigned __int8 *)(a2 + 42)
    && *(unsigned __int8 *)(a1 + 43) == *(unsigned __int8 *)(a2 + 43)
    && *(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(a2 + 44)
    && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48)
    && *(unsigned __int8 *)(a1 + 52) == *(unsigned __int8 *)(a2 + 52)
    && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56)
    && *(unsigned __int8 *)(a1 + 60) == *(unsigned __int8 *)(a2 + 60)
    && *(unsigned __int8 *)(a1 + 61) == *(unsigned __int8 *)(a2 + 61)
    && ((*(unsigned __int8 *)(a1 + 62) ^ *(unsigned __int8 *)(a2 + 62)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 63) ^ *(unsigned __int8 *)(a2 + 63)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 64) ^ *(unsigned __int8 *)(a2 + 64)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 65) ^ *(unsigned __int8 *)(a2 + 65)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 66) ^ *(unsigned __int8 *)(a2 + 66)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 67) ^ *(unsigned __int8 *)(a2 + 67)) & 1) == 0
    && *(unsigned __int8 *)(a1 + 68) == *(unsigned __int8 *)(a2 + 68)
    && *(unsigned __int8 *)(a1 + 69) == *(unsigned __int8 *)(a2 + 69)
    && *(unsigned __int8 *)(a1 + 70) == *(unsigned __int8 *)(a2 + 70)
    && *(unsigned __int8 *)(a1 + 71) == *(unsigned __int8 *)(a2 + 71)
    && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72))
  {
    uint64_t v2 = *(void *)(a1 + 88);
    uint64_t v4 = *(void *)(a1 + 96);
    uint64_t v3 = *(void *)(a1 + 104);
    uint64_t v5 = *(void *)(a2 + 88);
    uint64_t v7 = *(void *)(a2 + 96);
    uint64_t v6 = *(void *)(a2 + 104);
    if (sub_100079910(*(void *)(a1 + 80), *(void *)(a2 + 80))
      && sub_100079910(v2, v5)
      && sub_100079910(v4, v7)
      && sub_100079910(v3, v6))
    {
      return 1;
    }
  }

  return result;
}

BOOL _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV13ConfigurationV23__derived_struct_equalsySbAG_AGtFZ_0( unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0LL;
  }
  BOOL v2 = a1[1] == a2[1] && a1[2] == a2[2];
  if (!v2
    || *((void *)a1 + 1) != *((void *)a2 + 1)
    || *((void *)a1 + 2) != *((void *)a2 + 2)
    || *((void *)a1 + 3) != *((void *)a2 + 3))
  {
    return 0LL;
  }

  unint64_t v3 = *((unsigned int *)a1 + 8) | ((unint64_t)*((unsigned __int16 *)a1 + 18) << 32);
  unint64_t v4 = *((unsigned int *)a2 + 8) | ((unint64_t)*((unsigned __int16 *)a2 + 18) << 32);
  uint64_t v5 = v4 & 0xFF00000000LL;
  if ((v3 & 0xFF00000000LL) != 0x300000000LL)
  {
    if (v5 != 0x300000000LL
      && *((_DWORD *)a1 + 8) == *((_DWORD *)a2 + 8)
      && ((0x801004u >> ((v3 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((v4 >> 29) & 0xF8)) & 0xFFC))
    {
      unint64_t v25 = v4 >> 40;
      switch(v3 >> 40)
      {
        case 2uLL:
          if ((_DWORD)v25 != 2) {
            return 0LL;
          }
          goto LABEL_12;
        case 3uLL:
          if ((_DWORD)v25 != 3) {
            return 0LL;
          }
          goto LABEL_12;
        case 4uLL:
          if ((_DWORD)v25 != 4) {
            return 0LL;
          }
          goto LABEL_12;
        case 5uLL:
          if ((_DWORD)v25 != 5) {
            return 0LL;
          }
          goto LABEL_12;
        case 6uLL:
          if ((_DWORD)v25 != 6) {
            return 0LL;
          }
          goto LABEL_12;
        default:
          goto LABEL_12;
      }
    }

    return 0LL;
  }

  if (v5 != 0x300000000LL) {
    return 0LL;
  }
LABEL_12:
  unint64_t v6 = *((unsigned int *)a1 + 10) | ((unint64_t)*((unsigned __int16 *)a1 + 22) << 32);
  unint64_t v7 = *((unsigned int *)a2 + 10) | ((unint64_t)*((unsigned __int16 *)a2 + 22) << 32);
  uint64_t v8 = v7 & 0xFF00000000LL;
  if ((v6 & 0xFF00000000LL) != 0x300000000LL)
  {
    if (v8 != 0x300000000LL
      && *((_DWORD *)a1 + 10) == *((_DWORD *)a2 + 10)
      && ((0x801004u >> ((v6 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((v7 >> 29) & 0xF8)) & 0xFFC))
    {
      unint64_t v26 = v7 >> 40;
      switch(v6 >> 40)
      {
        case 2uLL:
          if ((_DWORD)v26 != 2) {
            return 0LL;
          }
          goto LABEL_14;
        case 3uLL:
          if ((_DWORD)v26 != 3) {
            return 0LL;
          }
          goto LABEL_14;
        case 4uLL:
          if ((_DWORD)v26 != 4) {
            return 0LL;
          }
          goto LABEL_14;
        case 5uLL:
          if ((_DWORD)v26 != 5) {
            return 0LL;
          }
          goto LABEL_14;
        case 6uLL:
          if ((_DWORD)v26 != 6) {
            return 0LL;
          }
          goto LABEL_14;
        default:
          goto LABEL_14;
      }
    }

    return 0LL;
  }

  if (v8 != 0x300000000LL) {
    return 0LL;
  }
LABEL_14:
  unint64_t v9 = *((unsigned int *)a1 + 12) | ((unint64_t)*((unsigned __int16 *)a1 + 26) << 32);
  unint64_t v10 = *((unsigned int *)a2 + 12) | ((unint64_t)*((unsigned __int16 *)a2 + 26) << 32);
  uint64_t v11 = v10 & 0xFF00000000LL;
  if ((v9 & 0xFF00000000LL) != 0x300000000LL)
  {
    if (v11 != 0x300000000LL
      && *((_DWORD *)a1 + 12) == *((_DWORD *)a2 + 12)
      && ((0x801004u >> ((v9 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((v10 >> 29) & 0xF8)) & 0xFFC))
    {
      unint64_t v27 = v10 >> 40;
      switch(v9 >> 40)
      {
        case 2uLL:
          if ((_DWORD)v27 != 2) {
            return 0LL;
          }
          goto LABEL_16;
        case 3uLL:
          if ((_DWORD)v27 != 3) {
            return 0LL;
          }
          goto LABEL_16;
        case 4uLL:
          if ((_DWORD)v27 != 4) {
            return 0LL;
          }
          goto LABEL_16;
        case 5uLL:
          if ((_DWORD)v27 != 5) {
            return 0LL;
          }
          goto LABEL_16;
        case 6uLL:
          if ((_DWORD)v27 != 6) {
            return 0LL;
          }
          goto LABEL_16;
        default:
          goto LABEL_16;
      }
    }

    return 0LL;
  }

  if (v11 != 0x300000000LL) {
    return 0LL;
  }
LABEL_16:
  unint64_t v12 = *((unsigned int *)a1 + 14) | ((unint64_t)*((unsigned __int16 *)a1 + 30) << 32);
  unint64_t v13 = *((unsigned int *)a2 + 14) | ((unint64_t)*((unsigned __int16 *)a2 + 30) << 32);
  uint64_t v14 = v13 & 0xFF00000000LL;
  if ((v12 & 0xFF00000000LL) != 0x300000000LL)
  {
    if (v14 != 0x300000000LL
      && *((_DWORD *)a1 + 14) == *((_DWORD *)a2 + 14)
      && ((0x801004u >> ((v12 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((v13 >> 29) & 0xF8)) & 0xFFC))
    {
      unint64_t v28 = v13 >> 40;
      switch(v12 >> 40)
      {
        case 2uLL:
          if ((_DWORD)v28 != 2) {
            return 0LL;
          }
          goto LABEL_18;
        case 3uLL:
          if ((_DWORD)v28 != 3) {
            return 0LL;
          }
          goto LABEL_18;
        case 4uLL:
          if ((_DWORD)v28 != 4) {
            return 0LL;
          }
          goto LABEL_18;
        case 5uLL:
          if ((_DWORD)v28 != 5) {
            return 0LL;
          }
          goto LABEL_18;
        case 6uLL:
          if ((_DWORD)v28 != 6) {
            return 0LL;
          }
          goto LABEL_18;
        default:
          goto LABEL_18;
      }
    }

    return 0LL;
  }

  if (v14 != 0x300000000LL) {
    return 0LL;
  }
LABEL_18:
  if (*((void *)a1 + 8) != *((void *)a2 + 8)) {
    return 0LL;
  }
  if (*((void *)a1 + 9) != *((void *)a2 + 9)) {
    return 0LL;
  }
  if (*((void *)a1 + 10) != *((void *)a2 + 10)) {
    return 0LL;
  }
  if (*((void *)a1 + 11) != *((void *)a2 + 11)) {
    return 0LL;
  }
  if (*((void *)a1 + 12) != *((void *)a2 + 12)) {
    return 0LL;
  }
  if (*((void *)a1 + 13) != *((void *)a2 + 13)) {
    return 0LL;
  }
  if (a1[112] != a2[112]) {
    return 0LL;
  }
  uint64_t v17 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  if ((static DispatchTimeInterval.== infix(_:_:)(&a1[v17[20]], &a2[v17[20]]) & 1) == 0
    || *(void *)&a1[v17[21]] != *(void *)&a2[v17[21]]
    || *(void *)&a1[v17[22]] != *(void *)&a2[v17[22]]
    || *(void *)&a1[v17[23]] != *(void *)&a2[v17[23]]
    || *(void *)&a1[v17[24]] != *(void *)&a2[v17[24]]
    || *(void *)&a1[v17[25]] != *(void *)&a2[v17[25]]
    || *(void *)&a1[v17[26]] != *(void *)&a2[v17[26]]
    || *(void *)&a1[v17[27]] != *(void *)&a2[v17[27]]
    || *(void *)&a1[v17[28]] != *(void *)&a2[v17[28]]
    || *(unsigned __int16 *)&a1[v17[29]] != *(unsigned __int16 *)&a2[v17[29]]
    || a1[v17[30]] != a2[v17[30]]
    || a1[v17[31]] != a2[v17[31]]
    || a1[v17[32]] != a2[v17[32]]
    || a1[v17[33]] != a2[v17[33]]
    || a1[v17[34]] != a2[v17[34]]
    || a1[v17[35]] != a2[v17[35]])
  {
    return 0LL;
  }

  uint64_t v18 = v17[36];
  uint64_t v19 = *(void *)&a1[v18];
  uint64_t v20 = *(void *)&a1[v18 + 8];
  BOOL v21 = &a2[v18];
  uint64_t v22 = *((void *)v21 + 1);
  if (v19 == *(void *)v21 && v20 == v22
    || (char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, *(void *)v21, v22, 0LL),
        BOOL result = 0LL,
        (v23 & 1) != 0))
  {
    if (a1[v17[37]] == a2[v17[37]]
      && *(void *)&a1[v17[38]] == *(void *)&a2[v17[38]]
      && *(void *)&a1[v17[39]] == *(void *)&a2[v17[39]]
      && *(void *)&a1[v17[40]] == *(void *)&a2[v17[40]]
      && *(void *)&a1[v17[41]] == *(void *)&a2[v17[41]]
      && *(void *)&a1[v17[42]] == *(void *)&a2[v17[42]])
    {
      return *(double *)&a1[v17[43]] == *(double *)&a2[v17[43]];
    }

    return 0LL;
  }

  return result;
}

uint64_t type metadata accessor for AWDLStatistics.LowLatencyStatistics(uint64_t a1)
{
  return sub_100020E48(a1, qword_100409418, (uint64_t)&nominal type descriptor for AWDLStatistics.LowLatencyStatistics);
}

BOOL _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV6CountsV23__derived_struct_equalsySbAI_AItFZ_0( const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0xD8uLL) == 0;
}

BOOL _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV10HistogramsV23__derived_struct_equalsySbAI_AItFZ_0( uint64_t *a1, uint64_t *a2)
{
  return sub_10007D95C(*a1, *a2)
      && sub_10007D95C(a1[1], a2[1])
      && sub_10007D95C(a1[2], a2[2])
      && sub_10007D95C(a1[3], a2[3])
      && sub_10007D95C(a1[4], a2[4])
      && sub_10007D95C(a1[5], a2[5])
      && sub_10007D95C(a1[6], a2[6])
      && sub_10007D95C(a1[7], a2[7])
      && sub_10007D95C(a1[8], a2[8])
      && sub_10007D95C(a1[9], a2[9])
      && sub_10007D95C(a1[10], a2[10])
      && sub_10007D95C(a1[11], a2[11])
      && sub_10007D95C(a1[12], a2[12])
      && sub_10007D95C(a1[13], a2[13])
      && sub_10007D95C(a1[14], a2[14])
      && sub_10007D95C(a1[15], a2[15])
      && sub_10007D95C(a1[16], a2[16])
      && sub_10007D95C(a1[17], a2[17]);
}

uint64_t _s7CoreP2P14AWDLStatisticsO7FailureV23__derived_struct_equalsySbAE_AEtFZ_0( uint64_t a1, char a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v9 = v8;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v12 = v10;
  if (v7 == v11 && v9 == v10)
  {
    swift_bridgeObjectRelease_n(v9, 2LL);
  }

  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v11, v10, 0LL);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v12);
    char v14 = 0;
    if ((v13 & 1) == 0) {
      return v14 & 1;
    }
  }

  unint64_t v15 = 0xEC0000006F727465LL;
  unint64_t v16 = 0x526E496B63757473LL;
  if (!a2)
  {
    unint64_t v17 = 0x526E496B63757473LL;
    unint64_t v18 = 0xEC0000006F727465LL;
    int v19 = a4;
    if (!a4) {
      goto LABEL_19;
    }
    goto LABEL_13;
  }

  if (a2 == 1) {
    unint64_t v17 = 0x536E496B63757473LL;
  }
  else {
    unint64_t v17 = 0xD000000000000014LL;
  }
  if (a2 == 1) {
    unint64_t v18 = 0xEB000000006E6163LL;
  }
  else {
    unint64_t v18 = 0x8000000100361570LL;
  }
  int v19 = a4;
  if (a4)
  {
LABEL_13:
    if (v19 == 1) {
      unint64_t v16 = 0x536E496B63757473LL;
    }
    else {
      unint64_t v16 = 0xD000000000000014LL;
    }
    if (v19 == 1) {
      unint64_t v15 = 0xEB000000006E6163LL;
    }
    else {
      unint64_t v15 = 0x8000000100361570LL;
    }
  }

uint64_t type metadata accessor for AWDLStatistics.TrafficRegistrationStop(uint64_t a1)
{
  return sub_100020E48( a1,  qword_100409380,  (uint64_t)&nominal type descriptor for AWDLStatistics.TrafficRegistrationStop);
}

uint64_t sub_100154B30(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1003D53F8, a1, a2, &unk_100404478);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x1E) {
    return 30LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100154B80(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1003D56E8, a1, a2, &unk_100404488);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x43) {
    return 67LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_100154BD0(Swift::String string)
{
  object  = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object  = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D5DB8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7) {
    return 7LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_100154C18(Swift::String string, Swift::OpaquePointer cases)
{
  object  = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object  = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 >= 3) {
    return 3LL;
  }
  else {
    return v5;
  }
}

uint64_t type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(uint64_t a1)
{
  return sub_100020E48( a1,  qword_1004094A8,  (uint64_t)&nominal type descriptor for AWDLStatistics.LowLatencyStatistics.Configuration);
}

uint64_t *sub_100154C70(uint64_t *a1, uint64_t *a2)
{
  return a2;
}

void *sub_100154CA4(_OWORD *a1, void *a2)
{
  return a2;
}

uint64_t sub_100154CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100154D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100154D60(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100154D94(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_100154DC8()
{
  unint64_t result = qword_100406980;
  if (!qword_100406980)
  {
    uint64_t v1 = sub_1000022F8(&qword_100406978);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100406980);
  }

  return result;
}

uint64_t sub_100154E14(uint64_t result, char a2)
{
  if (*(void *)(result + 16))
  {
    swift_bridgeObjectRetain(result);
    __asm { BR              X8 }
  }

  return result;
}

unint64_t sub_10015511C(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return (unint64_t)_swiftEmptyArrayStorage;
  }
  uint64_t v3 = a2 - a1;
  uint64_t v4 = _swiftEmptyArrayStorage;
  uint64_t v5 = v3 / 24;
  char v50 = _swiftEmptyArrayStorage;
  unint64_t result = sub_100069964(0, (v3 / 24) & ~((v3 / 24) >> 63), 0);
  if (v3 >= -23)
  {
    sub_100002274((uint64_t *)&unk_1004105A0);
    for (i  = (double *)(a1 + 16); ; i += 3)
    {
      double v8 = *(i - 2);
      double v9 = *(i - 1);
      double v10 = *i;
      uint64_t v11 = sub_100002274(qword_100405EA0);
      inited  = swift_initStackObject(v11, v49);
      uint64_t v13 = inited;
      *(_OWORD *)(inited + 16)  = xmmword_100339910;
      *(void *)(inited + 32)  = 0xD00000000000001ELL;
      uint64_t v14 = inited + 32;
      *(void *)(inited + 40)  = 0x8000000100366BA0LL;
      if (v8 <= -0.1) {
        double v15 = v8;
      }
      else {
        double v15 = -0.1;
      }
      if (v8 > 0.1) {
        double v16 = v8;
      }
      else {
        double v16 = 0.1;
      }
      if (v8 >= 0.0) {
        double v15 = v16;
      }
      *(void *)(inited + 72)  = &type metadata for Double;
      *(double *)(inited + 48)  = v15;
      *(void *)(inited + 80)  = 0xD00000000000001CLL;
      uint64_t v17 = inited + 80;
      *(void *)(inited + 88)  = 0x8000000100366BC0LL;
      if (v9 <= -0.1) {
        double v18 = v9;
      }
      else {
        double v18 = -0.1;
      }
      if (v9 > 0.1) {
        double v19 = v9;
      }
      else {
        double v19 = 0.1;
      }
      if (v9 >= 0.0) {
        double v18 = v19;
      }
      *(void *)(inited + 120)  = &type metadata for Double;
      *(double *)(inited + 96)  = v18;
      *(void *)(inited + 128)  = 0xD00000000000001ELL;
      uint64_t v20 = inited + 128;
      *(void *)(inited + 136)  = 0x8000000100366BE0LL;
      if (v10 <= -0.1) {
        double v21 = v10;
      }
      else {
        double v21 = -0.1;
      }
      if (v10 > 0.1) {
        double v22 = v10;
      }
      else {
        double v22 = 0.1;
      }
      if (v10 >= 0.0) {
        double v21 = v22;
      }
      *(void *)(inited + 168)  = &type metadata for Double;
      *(double *)(inited + 144)  = v21;
      char v23 = (void *)static _DictionaryStorage.allocate(capacity:)(3LL);
      swift_retain();
      sub_100155510(v14, (uint64_t)&v46);
      uint64_t v24 = v46;
      uint64_t v25 = v47;
      unint64_t result = sub_10001C008(v46, v47);
      if ((v26 & 1) != 0) {
        break;
      }
      unint64_t v27 = v23 + 8;
      *(void *)((char *)v23 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
      unint64_t v28 = (uint64_t *)(v23[6] + 16 * result);
      uint64_t *v28 = v24;
      v28[1]  = v25;
      unint64_t result = (unint64_t)sub_100022594(v48, (_OWORD *)(v23[7] + 32 * result));
      uint64_t v29 = v23[2];
      BOOL v30 = __OFADD__(v29, 1LL);
      uint64_t v31 = v29 + 1;
      if (v30) {
        goto LABEL_44;
      }
      v23[2]  = v31;
      sub_100155510(v17, (uint64_t)&v46);
      uint64_t v32 = v46;
      uint64_t v33 = v47;
      unint64_t result = sub_10001C008(v46, v47);
      if ((v34 & 1) != 0) {
        break;
      }
      *(void *)((char *)v27 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
      uint64_t v35 = (uint64_t *)(v23[6] + 16 * result);
      *uint64_t v35 = v32;
      v35[1]  = v33;
      unint64_t result = (unint64_t)sub_100022594(v48, (_OWORD *)(v23[7] + 32 * result));
      uint64_t v36 = v23[2];
      BOOL v30 = __OFADD__(v36, 1LL);
      uint64_t v37 = v36 + 1;
      if (v30) {
        goto LABEL_44;
      }
      v23[2]  = v37;
      sub_100155510(v20, (uint64_t)&v46);
      uint64_t v38 = v46;
      uint64_t v39 = v47;
      unint64_t result = sub_10001C008(v46, v47);
      if ((v40 & 1) != 0) {
        break;
      }
      *(void *)((char *)v27 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
      uint64_t v41 = (uint64_t *)(v23[6] + 16 * result);
      *uint64_t v41 = v38;
      v41[1]  = v39;
      unint64_t result = (unint64_t)sub_100022594(v48, (_OWORD *)(v23[7] + 32 * result));
      uint64_t v42 = v23[2];
      BOOL v30 = __OFADD__(v42, 1LL);
      uint64_t v43 = v42 + 1;
      if (v30) {
        goto LABEL_44;
      }
      v23[2]  = v43;
      swift_release(v23);
      swift_bridgeObjectRelease(v13);
      uint64_t v4 = v50;
      if ((swift_isUniquelyReferenced_nonNull_native(v50) & 1) == 0)
      {
        sub_100069964(0, v4[2] + 1LL, 1);
        uint64_t v4 = v50;
      }

      unint64_t v45 = v4[2];
      unint64_t v44 = v4[3];
      if (v45 >= v44 >> 1)
      {
        sub_100069964(v44 > 1, v45 + 1, 1);
        uint64_t v4 = v50;
      }

      v4[2]  = v45 + 1;
      v4[v45 + 4]  = v23;
      if (!--v5) {
        return (unint64_t)v4;
      }
    }

    __break(1u);
LABEL_44:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_100155510(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_100405110);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100155558(char *a1, uint64_t a2)
{
  if (!a1) {
    return (unint64_t)_swiftEmptyArrayStorage;
  }
  Swift::String v2 = a1;
  uint64_t v3 = a2 - (void)a1;
  else {
    uint64_t v4 = a2 - (void)a1 + 7;
  }
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v6 = v4 >> 3;
  uint64_t v43 = _swiftEmptyArrayStorage;
  unint64_t result = sub_100069964(0, (v4 >> 3) & ~(v4 >> 63), 0);
  if (v3 >= -7)
  {
    sub_100002274((uint64_t *)&unk_1004105A0);
    double v8 = &v41;
    while (1)
    {
      uint64_t v38 = v6;
      double v9 = v8;
      char v10 = *v2;
      char v11 = v2[1];
      int v12 = *((_DWORD *)v2 + 1);
      uint64_t v13 = sub_100002274(qword_100405EA0);
      inited  = swift_initStackObject(v13, v42);
      *(_OWORD *)(inited + 16)  = xmmword_100339910;
      *(void *)(inited + 32)  = 0xD00000000000001ELL;
      *(void *)(inited + 40)  = 0x8000000100366BA0LL;
      *(void *)(inited + 72)  = &type metadata for Int8;
      *(_BYTE *)(inited + 48)  = v10;
      *(void *)(inited + 80)  = 0xD00000000000001CLL;
      *(void *)(inited + 88)  = 0x8000000100366BC0LL;
      *(void *)(inited + 120)  = &type metadata for Int8;
      *(_BYTE *)(inited + 96)  = v11;
      *(void *)(inited + 128)  = 0xD00000000000001ELL;
      *(void *)(inited + 136)  = 0x8000000100366BE0LL;
      *(void *)(inited + 168)  = &type metadata for UInt32;
      *(_DWORD *)(inited + 144)  = v12;
      double v15 = (void *)static _DictionaryStorage.allocate(capacity:)(3LL);
      sub_100155510(inited + 32, (uint64_t)&v39);
      uint64_t v17 = v39;
      uint64_t v16 = v40;
      swift_retain();
      unint64_t result = sub_10001C008(v17, v16);
      if ((v18 & 1) != 0) {
        break;
      }
      double v19 = v15 + 8;
      *(void *)((char *)v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
      uint64_t v20 = (uint64_t *)(v15[6] + 16 * result);
      uint64_t *v20 = v17;
      v20[1]  = v16;
      double v8 = v9;
      unint64_t result = (unint64_t)sub_100022594(v9, (_OWORD *)(v15[7] + 32 * result));
      uint64_t v21 = v15[2];
      BOOL v22 = __OFADD__(v21, 1LL);
      uint64_t v23 = v21 + 1;
      if (v22) {
        goto LABEL_23;
      }
      _OWORD v15[2] = v23;
      sub_100155510(inited + 80, (uint64_t)&v39);
      uint64_t v24 = v39;
      uint64_t v25 = v40;
      unint64_t result = sub_10001C008(v39, v40);
      if ((v26 & 1) != 0) {
        goto LABEL_24;
      }
      *(void *)((char *)v19 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
      unint64_t v27 = (uint64_t *)(v15[6] + 16 * result);
      *unint64_t v27 = v24;
      v27[1]  = v25;
      unint64_t result = (unint64_t)sub_100022594(v9, (_OWORD *)(v15[7] + 32 * result));
      uint64_t v28 = v15[2];
      BOOL v22 = __OFADD__(v28, 1LL);
      uint64_t v29 = v28 + 1;
      if (v22) {
        goto LABEL_25;
      }
      _OWORD v15[2] = v29;
      sub_100155510(inited + 128, (uint64_t)&v39);
      uint64_t v30 = v39;
      uint64_t v31 = v40;
      unint64_t result = sub_10001C008(v39, v40);
      if ((v32 & 1) != 0) {
        goto LABEL_26;
      }
      *(void *)((char *)v19 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
      uint64_t v33 = (uint64_t *)(v15[6] + 16 * result);
      *uint64_t v33 = v30;
      v33[1]  = v31;
      unint64_t result = (unint64_t)sub_100022594(v9, (_OWORD *)(v15[7] + 32 * result));
      uint64_t v34 = v15[2];
      BOOL v22 = __OFADD__(v34, 1LL);
      uint64_t v35 = v34 + 1;
      if (v22) {
        goto LABEL_27;
      }
      _OWORD v15[2] = v35;
      swift_release(v15);
      swift_bridgeObjectRelease(inited);
      uint64_t v5 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
      {
        sub_100069964(0, v5[2] + 1LL, 1);
        uint64_t v5 = v43;
      }

      unint64_t v37 = v5[2];
      unint64_t v36 = v5[3];
      if (v37 >= v36 >> 1)
      {
        sub_100069964(v36 > 1, v37 + 1, 1);
        uint64_t v5 = v43;
      }

      v2 += 8;
      _OWORD v5[2] = v37 + 1;
      v5[v37 + 4]  = v15;
      uint64_t v6 = v38 - 1;
      if (v38 == 1) {
        return (unint64_t)v5;
      }
    }

    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }

  __break(1u);
  return result;
}

unint64_t sub_1001558FC()
{
  unint64_t result = qword_1004092E0;
  if (!qword_1004092E0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AWDLStatistics.Failure.Reason,  &type metadata for AWDLStatistics.Failure.Reason);
    atomic_store(result, (unint64_t *)&qword_1004092E0);
  }

  return result;
}

unint64_t sub_100155944()
{
  unint64_t result = qword_1004092E8;
  if (!qword_1004092E8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AWDLStatistics.Failure,  &type metadata for AWDLStatistics.Failure);
    atomic_store(result, (unint64_t *)&qword_1004092E8);
  }

  return result;
}

uint64_t sub_100155988()
{
  return sub_10000AF70( &qword_1004092F0,  type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration,  (uint64_t)&protocol conformance descriptor for AWDLStatistics.LowLatencyStatistics.Configuration);
}

unint64_t sub_1001559B8()
{
  unint64_t result = qword_1004092F8;
  if (!qword_1004092F8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AWDLStatistics.LowLatencyStatistics.Traffic.Counts,  &type metadata for AWDLStatistics.LowLatencyStatistics.Traffic.Counts);
    atomic_store(result, (unint64_t *)&qword_1004092F8);
  }

  return result;
}

unint64_t sub_100155A00()
{
  unint64_t result = qword_100409300;
  if (!qword_100409300)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms,  &type metadata for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms);
    atomic_store(result, (unint64_t *)&qword_100409300);
  }

  return result;
}

unint64_t sub_100155A48()
{
  unint64_t result = qword_100409308;
  if (!qword_100409308)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AWDLStatistics.LowLatencyStatistics.Traffic,  &type metadata for AWDLStatistics.LowLatencyStatistics.Traffic);
    atomic_store(result, (unint64_t *)&qword_100409308);
  }

  return result;
}

uint64_t sub_100155A8C()
{
  return sub_10000AF70( &qword_100409310,  type metadata accessor for AWDLStatistics.LowLatencyStatistics,  (uint64_t)&protocol conformance descriptor for AWDLStatistics.LowLatencyStatistics);
}

unint64_t sub_100155ABC()
{
  unint64_t result = qword_100409318;
  if (!qword_100409318)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AWDLStatistics.AirPlayStatistics.Histograms,  &type metadata for AWDLStatistics.AirPlayStatistics.Histograms);
    atomic_store(result, (unint64_t *)&qword_100409318);
  }

  return result;
}

unint64_t sub_100155B04()
{
  unint64_t result = qword_100409320;
  if (!qword_100409320)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AWDLStatistics.AirPlayStatistics,  &type metadata for AWDLStatistics.AirPlayStatistics);
    atomic_store(result, (unint64_t *)&qword_100409320);
  }

  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics()
{
  return &type metadata for AWDLStatistics;
}

void *initializeBufferWithCopyOfBuffer for AWDLStatistics.ServiceRejection(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1  = *(void *)a2;
  a1[1]  = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for AWDLStatistics.ServiceRejection(id *a1)
{
}

uint64_t assignWithCopy for AWDLStatistics.ServiceRejection(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1  = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  double v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8)  = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for AWDLStatistics.ServiceRejection(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1  = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for AWDLStatistics.ServiceRejection()
{
  return &type metadata for AWDLStatistics.ServiceRejection;
}

uint64_t initializeWithCopy for AWDLStatistics.TrafficRegistrationStart(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1  = *(void *)a2;
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12)  = *(_WORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20)  = *(_WORD *)(a2 + 20);
  *(_DWORD *)(a1 + 22)  = *(_DWORD *)(a2 + 22);
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for AWDLStatistics.TrafficRegistrationStart(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1  = *(void *)a2;
  id v6 = v4;

  int v7 = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12)  = *(_WORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8)  = v7;
  int v8 = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20)  = *(_WORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16)  = v8;
  *(_BYTE *)(a1 + 22)  = *(_BYTE *)(a2 + 22);
  *(_BYTE *)(a1 + 23)  = *(_BYTE *)(a2 + 23);
  *(_BYTE *)(a1 + 24)  = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25)  = *(_BYTE *)(a2 + 25);
  return a1;
}

__n128 initializeWithTake for AWDLStatistics.TrafficRegistrationStart(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10)  = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1  = result;
  return result;
}

uint64_t assignWithTake for AWDLStatistics.TrafficRegistrationStart(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1  = *(void *)a2;

  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12)  = *(_WORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20)  = *(_WORD *)(a2 + 20);
  *(_BYTE *)(a1 + 22)  = *(_BYTE *)(a2 + 22);
  *(_BYTE *)(a1 + 23)  = *(_BYTE *)(a2 + 23);
  *(_WORD *)(a1 + 24)  = *(_WORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.TrafficRegistrationStart(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 26)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.TrafficRegistrationStart( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8)  = 0LL;
    *(void *)(result + 16)  = 0LL;
    *(_WORD *)(result + 24)  = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 26)  = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 26)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.TrafficRegistrationStart()
{
  return &type metadata for AWDLStatistics.TrafficRegistrationStart;
}

char *initializeBufferWithCopyOfBuffer for AWDLStatistics.TrafficRegistrationStop( char *a1, char **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  id v4 = *a2;
  *(void *)a1  = *a2;
  if ((v3 & 0x20000) != 0)
  {
    id v5 = &v4[(v3 + 16LL) & ~(unint64_t)v3];
    swift_retain(v4);
  }

  else
  {
    id v5 = a1;
    a1[8]  = *((_BYTE *)a2 + 8);
    uint64_t v6 = *(int *)(a3 + 24);
    int v7 = &a1[v6];
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for DispatchTimeInterval(0LL);
    char v10 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL);
    char v11 = v4;
    v10(v7, v8, v9);
  }

  return v5;
}

uint64_t destroy for AWDLStatistics.TrafficRegistrationStop(id *a1, uint64_t a2)
{
  id v4 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t initializeWithCopy for AWDLStatistics.TrafficRegistrationStop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = *(void **)a2;
  *(void *)a1  = *(void *)a2;
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL);
  id v10 = v4;
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for AWDLStatistics.TrafficRegistrationStop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1  = *(void *)a2;
  id v8 = v6;

  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24LL))(v10, v11, v12);
  return a1;
}

uint64_t initializeWithTake for AWDLStatistics.TrafficRegistrationStop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1  = *(void *)a2;
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for AWDLStatistics.TrafficRegistrationStop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1  = *(void *)a2;

  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.TrafficRegistrationStop( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001560F4);
}

uint64_t sub_1001560F4(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4)  = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for DispatchTimeInterval(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 24)],  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for AWDLStatistics.TrafficRegistrationStop( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10015617C);
}

char *sub_10015617C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)__n128 result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for DispatchTimeInterval(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 24)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1001561F0(uint64_t a1)
{
  v4[0]  = "\b";
  v4[1]  = &unk_10034A280;
  uint64_t result = type metadata accessor for DispatchTimeInterval(319LL);
  if (v3 <= 0x3F)
  {
    v4[2]  = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.Failure()
{
  return &type metadata for AWDLStatistics.Failure;
}

ValueMetadata *type metadata accessor for AWDLStatistics.Failure.Reason()
{
  return &type metadata for AWDLStatistics.Failure.Reason;
}

void *initializeBufferWithCopyOfBuffer for AWDLStatistics.LowLatencyStatistics( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v36 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v36 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *(_BYTE *)a1  = *(_BYTE *)a2;
    *(_WORD *)(a1 + 1)  = *(_WORD *)((char *)a2 + 1);
    *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 1);
    *(void *)(a1 + 24)  = a2[3];
    *(_DWORD *)(a1 + 32)  = *((_DWORD *)a2 + 8);
    *(_WORD *)(a1 + 36)  = *((_WORD *)a2 + 18);
    *(_DWORD *)(a1 + 40)  = *((_DWORD *)a2 + 10);
    *(_WORD *)(a1 + 44)  = *((_WORD *)a2 + 22);
    int v7 = *((_DWORD *)a2 + 12);
    *(_WORD *)(a1 + 52)  = *((_WORD *)a2 + 26);
    *(_DWORD *)(a1 + 48)  = v7;
    *(_DWORD *)(a1 + 56)  = *((_DWORD *)a2 + 14);
    *(_WORD *)(a1 + 60)  = *((_WORD *)a2 + 30);
    __int128 v8 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64)  = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80)  = v8;
    *(_OWORD *)(a1 + 96)  = *((_OWORD *)a2 + 6);
    *(_BYTE *)(a1 + 112)  = *((_BYTE *)a2 + 112);
    uint64_t v9 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
    uint64_t v10 = v9[20];
    uint64_t v11 = (char *)v4 + v10;
    uint64_t v12 = (uint64_t)a2 + v10;
    uint64_t v13 = type metadata accessor for DispatchTimeInterval(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v12, v13);
    *(void *)((char *)v4 + v9[21])  = *(uint64_t *)((char *)a2 + v9[21]);
    *(void *)((char *)v4 + v9[22])  = *(uint64_t *)((char *)a2 + v9[22]);
    *(void *)((char *)v4 + v9[23])  = *(uint64_t *)((char *)a2 + v9[23]);
    *(void *)((char *)v4 + v9[24])  = *(uint64_t *)((char *)a2 + v9[24]);
    *(void *)((char *)v4 + v9[25])  = *(uint64_t *)((char *)a2 + v9[25]);
    *(void *)((char *)v4 + v9[26])  = *(uint64_t *)((char *)a2 + v9[26]);
    *(void *)((char *)v4 + v9[27])  = *(uint64_t *)((char *)a2 + v9[27]);
    *(void *)((char *)v4 + v9[28])  = *(uint64_t *)((char *)a2 + v9[28]);
    *(_WORD *)((char *)v4 + v9[29])  = *(_WORD *)((char *)a2 + v9[29]);
    *((_BYTE *)v4 + v9[30])  = *((_BYTE *)a2 + v9[30]);
    *((_BYTE *)v4 + v9[31])  = *((_BYTE *)a2 + v9[31]);
    *((_BYTE *)v4 + v9[32])  = *((_BYTE *)a2 + v9[32]);
    *((_BYTE *)v4 + v9[33])  = *((_BYTE *)a2 + v9[33]);
    *((_BYTE *)v4 + v9[34])  = *((_BYTE *)a2 + v9[34]);
    *((_BYTE *)v4 + v9[35])  = *((_BYTE *)a2 + v9[35]);
    uint64_t v14 = v9[36];
    double v15 = (void *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    *double v15 = *v16;
    v15[1]  = v17;
    *((_BYTE *)v4 + v9[37])  = *((_BYTE *)a2 + v9[37]);
    *(void *)((char *)v4 + v9[38])  = *(uint64_t *)((char *)a2 + v9[38]);
    *(void *)((char *)v4 + v9[39])  = *(uint64_t *)((char *)a2 + v9[39]);
    *(void *)((char *)v4 + v9[40])  = *(uint64_t *)((char *)a2 + v9[40]);
    *(void *)((char *)v4 + v9[41])  = *(uint64_t *)((char *)a2 + v9[41]);
    *(void *)((char *)v4 + v9[42])  = *(uint64_t *)((char *)a2 + v9[42]);
    *(void *)((char *)v4 + v9[43])  = *(uint64_t *)((char *)a2 + v9[43]);
    uint64_t v18 = *(int *)(a3 + 20);
    double v19 = (char *)v4 + v18;
    uint64_t v20 = (uint64_t)a2 + v18;
    __int128 v21 = *(_OWORD *)(v20 + 176);
    *((_OWORD *)v19 + 10)  = *(_OWORD *)(v20 + 160);
    *((_OWORD *)v19 + 11)  = v21;
    *((_OWORD *)v19 + 12)  = *(_OWORD *)(v20 + 192);
    __int128 v22 = *(_OWORD *)(v20 + 112);
    *((_OWORD *)v19 + 6)  = *(_OWORD *)(v20 + 96);
    *((_OWORD *)v19 + 7)  = v22;
    __int128 v23 = *(_OWORD *)(v20 + 144);
    *((_OWORD *)v19 + 8)  = *(_OWORD *)(v20 + 128);
    *((_OWORD *)v19 + 9)  = v23;
    __int128 v24 = *(_OWORD *)(v20 + 48);
    *((_OWORD *)v19 + 2)  = *(_OWORD *)(v20 + 32);
    *((_OWORD *)v19 + 3)  = v24;
    __int128 v25 = *(_OWORD *)(v20 + 80);
    *((_OWORD *)v19 + 4)  = *(_OWORD *)(v20 + 64);
    *((_OWORD *)v19 + 5)  = v25;
    __int128 v26 = *(_OWORD *)(v20 + 16);
    *(_OWORD *)double v19 = *(_OWORD *)v20;
    *((_OWORD *)v19 + 1)  = v26;
    uint64_t v27 = *(void *)(v20 + 216);
    *((void *)v19 + 26)  = *(void *)(v20 + 208);
    *((void *)v19 + 27)  = v27;
    uint64_t v28 = *(void *)(v20 + 224);
    uint64_t v29 = *(void *)(v20 + 232);
    *((void *)v19 + 28)  = v28;
    *((void *)v19 + 29)  = v29;
    uint64_t v30 = *(void *)(v20 + 240);
    uint64_t v31 = *(void *)(v20 + 248);
    *((void *)v19 + 30)  = v30;
    *((void *)v19 + 31)  = v31;
    uint64_t v32 = *(void *)(v20 + 256);
    uint64_t v33 = *(void *)(v20 + 264);
    *((void *)v19 + 32)  = v32;
    *((void *)v19 + 33)  = v33;
    uint64_t v34 = *(void *)(v20 + 272);
    uint64_t v35 = *(void *)(v20 + 280);
    *((void *)v19 + 34)  = v34;
    *((void *)v19 + 35)  = v35;
    uint64_t v38 = *(void *)(v20 + 288);
    uint64_t v39 = *(void *)(v20 + 296);
    *((void *)v19 + 36)  = v38;
    *((void *)v19 + 37)  = v39;
    uint64_t v40 = *(void *)(v20 + 304);
    uint64_t v41 = *(void *)(v20 + 312);
    *((void *)v19 + 38)  = v40;
    *((void *)v19 + 39)  = v41;
    uint64_t v42 = *(void *)(v20 + 320);
    uint64_t v43 = *(void *)(v20 + 328);
    *((void *)v19 + 40)  = v42;
    *((void *)v19 + 41)  = v43;
    uint64_t v44 = *(void *)(v20 + 336);
    uint64_t v45 = *(void *)(v20 + 344);
    *((void *)v19 + 42)  = v44;
    *((void *)v19 + 43)  = v45;
    uint64_t v46 = *(void *)(v20 + 352);
    *((void *)v19 + 44)  = v46;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v46);
  }

  return v4;
}

uint64_t destroy for AWDLStatistics.LowLatencyStatistics(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  uint64_t v5 = a1 + *(int *)(v4 + 80);
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(v4 + 144) + 8));
  int v7 = (void *)(a1 + *(int *)(a2 + 20));
  swift_bridgeObjectRelease(v7[27]);
  swift_bridgeObjectRelease(v7[28]);
  swift_bridgeObjectRelease(v7[29]);
  swift_bridgeObjectRelease(v7[30]);
  swift_bridgeObjectRelease(v7[31]);
  swift_bridgeObjectRelease(v7[32]);
  swift_bridgeObjectRelease(v7[33]);
  swift_bridgeObjectRelease(v7[34]);
  swift_bridgeObjectRelease(v7[35]);
  swift_bridgeObjectRelease(v7[36]);
  swift_bridgeObjectRelease(v7[37]);
  swift_bridgeObjectRelease(v7[38]);
  swift_bridgeObjectRelease(v7[39]);
  swift_bridgeObjectRelease(v7[40]);
  swift_bridgeObjectRelease(v7[41]);
  swift_bridgeObjectRelease(v7[42]);
  swift_bridgeObjectRelease(v7[43]);
  return swift_bridgeObjectRelease(v7[44]);
}

uint64_t initializeWithCopy for AWDLStatistics.LowLatencyStatistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32)  = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36)  = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40)  = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44)  = *(_WORD *)(a2 + 44);
  int v6 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52)  = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48)  = v6;
  *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60)  = *(_WORD *)(a2 + 60);
  __int128 v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80)  = v7;
  *(_OWORD *)(a1 + 96)  = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112)  = *(_BYTE *)(a2 + 112);
  __int128 v8 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  uint64_t v9 = v8[20];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
  *(void *)(a1 + v8[21])  = *(void *)(a2 + v8[21]);
  *(void *)(a1 + v8[22])  = *(void *)(a2 + v8[22]);
  *(void *)(a1 + v8[23])  = *(void *)(a2 + v8[23]);
  *(void *)(a1 + v8[24])  = *(void *)(a2 + v8[24]);
  *(void *)(a1 + v8[25])  = *(void *)(a2 + v8[25]);
  *(void *)(a1 + v8[26])  = *(void *)(a2 + v8[26]);
  *(void *)(a1 + v8[27])  = *(void *)(a2 + v8[27]);
  *(void *)(a1 + v8[28])  = *(void *)(a2 + v8[28]);
  *(_WORD *)(a1 + v8[29])  = *(_WORD *)(a2 + v8[29]);
  *(_BYTE *)(a1 + v8[30])  = *(_BYTE *)(a2 + v8[30]);
  *(_BYTE *)(a1 + v8[31])  = *(_BYTE *)(a2 + v8[31]);
  *(_BYTE *)(a1 + v8[32])  = *(_BYTE *)(a2 + v8[32]);
  *(_BYTE *)(a1 + v8[33])  = *(_BYTE *)(a2 + v8[33]);
  *(_BYTE *)(a1 + v8[34])  = *(_BYTE *)(a2 + v8[34]);
  *(_BYTE *)(a1 + v8[35])  = *(_BYTE *)(a2 + v8[35]);
  uint64_t v13 = v8[36];
  uint64_t v14 = (void *)(a1 + v13);
  double v15 = (void *)(a2 + v13);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1]  = v16;
  *(_BYTE *)(a1 + v8[37])  = *(_BYTE *)(a2 + v8[37]);
  *(void *)(a1 + v8[38])  = *(void *)(a2 + v8[38]);
  *(void *)(a1 + v8[39])  = *(void *)(a2 + v8[39]);
  *(void *)(a1 + v8[40])  = *(void *)(a2 + v8[40]);
  *(void *)(a1 + v8[41])  = *(void *)(a2 + v8[41]);
  *(void *)(a1 + v8[42])  = *(void *)(a2 + v8[42]);
  *(void *)(a1 + v8[43])  = *(void *)(a2 + v8[43]);
  uint64_t v17 = *(int *)(a3 + 20);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  __int128 v20 = *(_OWORD *)(v19 + 176);
  *(_OWORD *)(v18 + 160)  = *(_OWORD *)(v19 + 160);
  *(_OWORD *)(v18 + 176)  = v20;
  *(_OWORD *)(v18 + 192)  = *(_OWORD *)(v19 + 192);
  __int128 v21 = *(_OWORD *)(v19 + 112);
  *(_OWORD *)(v18 + 96)  = *(_OWORD *)(v19 + 96);
  *(_OWORD *)(v18 + 112)  = v21;
  __int128 v22 = *(_OWORD *)(v19 + 144);
  *(_OWORD *)(v18 + 128)  = *(_OWORD *)(v19 + 128);
  *(_OWORD *)(v18 + 144)  = v22;
  __int128 v23 = *(_OWORD *)(v19 + 48);
  *(_OWORD *)(v18 + 32)  = *(_OWORD *)(v19 + 32);
  *(_OWORD *)(v18 + 48)  = v23;
  __int128 v24 = *(_OWORD *)(v19 + 80);
  *(_OWORD *)(v18 + 64)  = *(_OWORD *)(v19 + 64);
  *(_OWORD *)(v18 + 80)  = v24;
  __int128 v25 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16)  = v25;
  uint64_t v26 = *(void *)(v19 + 216);
  *(void *)(v18 + 208)  = *(void *)(v19 + 208);
  *(void *)(v18 + 216)  = v26;
  uint64_t v27 = *(void *)(v19 + 224);
  uint64_t v28 = *(void *)(v19 + 232);
  *(void *)(v18 + 224)  = v27;
  *(void *)(v18 + 232)  = v28;
  uint64_t v29 = *(void *)(v19 + 240);
  uint64_t v30 = *(void *)(v19 + 248);
  *(void *)(v18 + 240)  = v29;
  *(void *)(v18 + 248)  = v30;
  uint64_t v31 = *(void *)(v19 + 256);
  uint64_t v32 = *(void *)(v19 + 264);
  *(void *)(v18 + 256)  = v31;
  *(void *)(v18 + 264)  = v32;
  uint64_t v33 = *(void *)(v19 + 272);
  uint64_t v34 = *(void *)(v19 + 280);
  *(void *)(v18 + 272)  = v33;
  *(void *)(v18 + 280)  = v34;
  uint64_t v36 = *(void *)(v19 + 288);
  uint64_t v37 = *(void *)(v19 + 296);
  *(void *)(v18 + 288)  = v36;
  *(void *)(v18 + 296)  = v37;
  uint64_t v38 = *(void *)(v19 + 304);
  uint64_t v39 = *(void *)(v19 + 312);
  *(void *)(v18 + 304)  = v38;
  *(void *)(v18 + 312)  = v39;
  uint64_t v40 = *(void *)(v19 + 320);
  uint64_t v41 = *(void *)(v19 + 328);
  *(void *)(v18 + 320)  = v40;
  *(void *)(v18 + 328)  = v41;
  uint64_t v42 = *(void *)(v19 + 336);
  uint64_t v43 = *(void *)(v19 + 344);
  *(void *)(v18 + 336)  = v42;
  *(void *)(v18 + 344)  = v43;
  uint64_t v44 = *(void *)(v19 + 352);
  *(void *)(v18 + 352)  = v44;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRetain(v44);
  return a1;
}

uint64_t assignWithCopy for AWDLStatistics.LowLatencyStatistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1)  = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  int v6 = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36)  = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32)  = v6;
  int v7 = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44)  = *(_WORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40)  = v7;
  int v8 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52)  = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48)  = v8;
  int v9 = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60)  = *(_WORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56)  = v9;
  *(void *)(a1 + 64)  = *(void *)(a2 + 64);
  *(void *)(a1 + 72)  = *(void *)(a2 + 72);
  *(void *)(a1 + 80)  = *(void *)(a2 + 80);
  *(void *)(a1 + 88)  = *(void *)(a2 + 88);
  *(void *)(a1 + 96)  = *(void *)(a2 + 96);
  *(void *)(a1 + 104)  = *(void *)(a2 + 104);
  *(_BYTE *)(a1 + 112)  = *(_BYTE *)(a2 + 112);
  uint64_t v10 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  uint64_t v11 = v10[20];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24LL))(v12, v13, v14);
  *(void *)(a1 + v10[21])  = *(void *)(a2 + v10[21]);
  *(void *)(a1 + v10[22])  = *(void *)(a2 + v10[22]);
  *(void *)(a1 + v10[23])  = *(void *)(a2 + v10[23]);
  *(void *)(a1 + v10[24])  = *(void *)(a2 + v10[24]);
  *(void *)(a1 + v10[25])  = *(void *)(a2 + v10[25]);
  *(void *)(a1 + v10[26])  = *(void *)(a2 + v10[26]);
  *(void *)(a1 + v10[27])  = *(void *)(a2 + v10[27]);
  *(void *)(a1 + v10[28])  = *(void *)(a2 + v10[28]);
  *(_WORD *)(a1 + v10[29])  = *(_WORD *)(a2 + v10[29]);
  *(_BYTE *)(a1 + v10[30])  = *(_BYTE *)(a2 + v10[30]);
  *(_BYTE *)(a1 + v10[31])  = *(_BYTE *)(a2 + v10[31]);
  *(_BYTE *)(a1 + v10[32])  = *(_BYTE *)(a2 + v10[32]);
  *(_BYTE *)(a1 + v10[33])  = *(_BYTE *)(a2 + v10[33]);
  *(_BYTE *)(a1 + v10[34])  = *(_BYTE *)(a2 + v10[34]);
  *(_BYTE *)(a1 + v10[35])  = *(_BYTE *)(a2 + v10[35]);
  uint64_t v15 = v10[36];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  *uint64_t v16 = *v17;
  uint64_t v18 = v17[1];
  uint64_t v19 = v16[1];
  v16[1]  = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_BYTE *)(a1 + v10[37])  = *(_BYTE *)(a2 + v10[37]);
  *(void *)(a1 + v10[38])  = *(void *)(a2 + v10[38]);
  *(void *)(a1 + v10[39])  = *(void *)(a2 + v10[39]);
  *(void *)(a1 + v10[40])  = *(void *)(a2 + v10[40]);
  *(void *)(a1 + v10[41])  = *(void *)(a2 + v10[41]);
  *(void *)(a1 + v10[42])  = *(void *)(a2 + v10[42]);
  *(void *)(a1 + v10[43])  = *(void *)(a2 + v10[43]);
  uint64_t v20 = *(int *)(a3 + 20);
  __int128 v21 = (void *)(a1 + v20);
  __int128 v22 = (void *)(a2 + v20);
  *__int128 v21 = *(void *)(a2 + v20);
  v21[1]  = *(void *)(a2 + v20 + 8);
  v21[2]  = *(void *)(a2 + v20 + 16);
  v21[3]  = *(void *)(a2 + v20 + 24);
  void v21[4] = *(void *)(a2 + v20 + 32);
  v21[5]  = *(void *)(a2 + v20 + 40);
  v21[6]  = *(void *)(a2 + v20 + 48);
  v21[7]  = *(void *)(a2 + v20 + 56);
  v21[8]  = *(void *)(a2 + v20 + 64);
  v21[9]  = *(void *)(a2 + v20 + 72);
  v21[10]  = *(void *)(a2 + v20 + 80);
  v21[11]  = *(void *)(a2 + v20 + 88);
  v21[12]  = *(void *)(a2 + v20 + 96);
  v21[13]  = *(void *)(a2 + v20 + 104);
  v21[14]  = *(void *)(a2 + v20 + 112);
  v21[15]  = *(void *)(a2 + v20 + 120);
  v21[16]  = *(void *)(a2 + v20 + 128);
  v21[17]  = *(void *)(a2 + v20 + 136);
  v21[18]  = *(void *)(a2 + v20 + 144);
  v21[19]  = *(void *)(a2 + v20 + 152);
  v21[20]  = *(void *)(a2 + v20 + 160);
  v21[21]  = *(void *)(a2 + v20 + 168);
  v21[22]  = *(void *)(a2 + v20 + 176);
  v21[23]  = *(void *)(a2 + v20 + 184);
  _BYTE v21[24] = *(void *)(a2 + v20 + 192);
  v21[25]  = *(void *)(a2 + v20 + 200);
  v21[26]  = *(void *)(a2 + v20 + 208);
  uint64_t v23 = *(void *)(a2 + v20 + 216);
  uint64_t v24 = *(void *)(a1 + v20 + 216);
  v21[27]  = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  uint64_t v25 = v22[28];
  uint64_t v26 = v21[28];
  v21[28]  = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  uint64_t v27 = v22[29];
  uint64_t v28 = v21[29];
  v21[29]  = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  uint64_t v29 = v22[30];
  uint64_t v30 = v21[30];
  v21[30]  = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  uint64_t v31 = v22[31];
  uint64_t v32 = v21[31];
  v21[31]  = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  uint64_t v33 = v22[32];
  uint64_t v34 = v21[32];
  v21[32]  = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  uint64_t v35 = v22[33];
  uint64_t v36 = v21[33];
  v21[33]  = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  uint64_t v37 = v22[34];
  uint64_t v38 = v21[34];
  v21[34]  = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  uint64_t v39 = v22[35];
  uint64_t v40 = v21[35];
  v21[35]  = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  uint64_t v41 = v22[36];
  uint64_t v42 = v21[36];
  v21[36]  = v41;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRelease(v42);
  uint64_t v43 = v22[37];
  uint64_t v44 = v21[37];
  v21[37]  = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44);
  uint64_t v45 = v22[38];
  uint64_t v46 = v21[38];
  v21[38]  = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  uint64_t v47 = v22[39];
  uint64_t v48 = v21[39];
  v21[39]  = v47;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRelease(v48);
  uint64_t v49 = v22[40];
  uint64_t v50 = v21[40];
  v21[40]  = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease(v50);
  uint64_t v51 = v22[41];
  uint64_t v52 = v21[41];
  v21[41]  = v51;
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRelease(v52);
  uint64_t v53 = v22[42];
  uint64_t v54 = v21[42];
  v21[42]  = v53;
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRelease(v54);
  uint64_t v55 = v22[43];
  uint64_t v56 = v21[43];
  v21[43]  = v55;
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRelease(v56);
  uint64_t v57 = v22[44];
  uint64_t v58 = v21[44];
  v21[44]  = v57;
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRelease(v58);
  return a1;
}

uint64_t initializeWithTake for AWDLStatistics.LowLatencyStatistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32)  = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36)  = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40)  = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44)  = *(_WORD *)(a2 + 44);
  int v6 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52)  = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48)  = v6;
  *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60)  = *(_WORD *)(a2 + 60);
  __int128 v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80)  = v7;
  *(_OWORD *)(a1 + 96)  = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112)  = *(_BYTE *)(a2 + 112);
  int v8 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  uint64_t v9 = v8[20];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL))(v10, v11, v12);
  *(void *)(a1 + v8[21])  = *(void *)(a2 + v8[21]);
  *(void *)(a1 + v8[22])  = *(void *)(a2 + v8[22]);
  *(void *)(a1 + v8[23])  = *(void *)(a2 + v8[23]);
  *(void *)(a1 + v8[24])  = *(void *)(a2 + v8[24]);
  *(void *)(a1 + v8[25])  = *(void *)(a2 + v8[25]);
  *(void *)(a1 + v8[26])  = *(void *)(a2 + v8[26]);
  *(void *)(a1 + v8[27])  = *(void *)(a2 + v8[27]);
  *(void *)(a1 + v8[28])  = *(void *)(a2 + v8[28]);
  *(_WORD *)(a1 + v8[29])  = *(_WORD *)(a2 + v8[29]);
  *(_BYTE *)(a1 + v8[30])  = *(_BYTE *)(a2 + v8[30]);
  *(_BYTE *)(a1 + v8[31])  = *(_BYTE *)(a2 + v8[31]);
  *(_BYTE *)(a1 + v8[32])  = *(_BYTE *)(a2 + v8[32]);
  *(_BYTE *)(a1 + v8[33])  = *(_BYTE *)(a2 + v8[33]);
  *(_BYTE *)(a1 + v8[34])  = *(_BYTE *)(a2 + v8[34]);
  *(_BYTE *)(a1 + v8[35])  = *(_BYTE *)(a2 + v8[35]);
  *(_OWORD *)(a1 + v8[36])  = *(_OWORD *)(a2 + v8[36]);
  *(_BYTE *)(a1 + v8[37])  = *(_BYTE *)(a2 + v8[37]);
  *(void *)(a1 + v8[38])  = *(void *)(a2 + v8[38]);
  *(void *)(a1 + v8[39])  = *(void *)(a2 + v8[39]);
  *(void *)(a1 + v8[40])  = *(void *)(a2 + v8[40]);
  *(void *)(a1 + v8[41])  = *(void *)(a2 + v8[41]);
  *(void *)(a1 + v8[42])  = *(void *)(a2 + v8[42]);
  *(void *)(a1 + v8[43])  = *(void *)(a2 + v8[43]);
  memcpy((void *)(a1 + *(int *)(a3 + 20)), (const void *)(a2 + *(int *)(a3 + 20)), 0x168uLL);
  return a1;
}

uint64_t assignWithTake for AWDLStatistics.LowLatencyStatistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32)  = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36)  = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40)  = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44)  = *(_WORD *)(a2 + 44);
  int v6 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52)  = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48)  = v6;
  *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60)  = *(_WORD *)(a2 + 60);
  __int128 v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80)  = v7;
  *(_OWORD *)(a1 + 96)  = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112)  = *(_BYTE *)(a2 + 112);
  int v8 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  uint64_t v9 = v8[20];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40LL))(v10, v11, v12);
  *(void *)(a1 + v8[21])  = *(void *)(a2 + v8[21]);
  *(void *)(a1 + v8[22])  = *(void *)(a2 + v8[22]);
  *(void *)(a1 + v8[23])  = *(void *)(a2 + v8[23]);
  *(void *)(a1 + v8[24])  = *(void *)(a2 + v8[24]);
  *(void *)(a1 + v8[25])  = *(void *)(a2 + v8[25]);
  *(void *)(a1 + v8[26])  = *(void *)(a2 + v8[26]);
  *(void *)(a1 + v8[27])  = *(void *)(a2 + v8[27]);
  *(void *)(a1 + v8[28])  = *(void *)(a2 + v8[28]);
  *(_WORD *)(a1 + v8[29])  = *(_WORD *)(a2 + v8[29]);
  *(_BYTE *)(a1 + v8[30])  = *(_BYTE *)(a2 + v8[30]);
  *(_BYTE *)(a1 + v8[31])  = *(_BYTE *)(a2 + v8[31]);
  *(_BYTE *)(a1 + v8[32])  = *(_BYTE *)(a2 + v8[32]);
  *(_BYTE *)(a1 + v8[33])  = *(_BYTE *)(a2 + v8[33]);
  *(_BYTE *)(a1 + v8[34])  = *(_BYTE *)(a2 + v8[34]);
  *(_BYTE *)(a1 + v8[35])  = *(_BYTE *)(a2 + v8[35]);
  uint64_t v13 = v8[36];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  uint64_t v18 = v14[1];
  *uint64_t v14 = v17;
  v14[1]  = v16;
  swift_bridgeObjectRelease(v18);
  *(_BYTE *)(a1 + v8[37])  = *(_BYTE *)(a2 + v8[37]);
  *(void *)(a1 + v8[38])  = *(void *)(a2 + v8[38]);
  *(void *)(a1 + v8[39])  = *(void *)(a2 + v8[39]);
  *(void *)(a1 + v8[40])  = *(void *)(a2 + v8[40]);
  *(void *)(a1 + v8[41])  = *(void *)(a2 + v8[41]);
  *(void *)(a1 + v8[42])  = *(void *)(a2 + v8[42]);
  *(void *)(a1 + v8[43])  = *(void *)(a2 + v8[43]);
  uint64_t v19 = *(int *)(a3 + 20);
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  __int128 v22 = *(_OWORD *)(v21 + 16);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  *(_OWORD *)(v20 + 16)  = v22;
  __int128 v23 = *(_OWORD *)(v21 + 48);
  *(_OWORD *)(v20 + 32)  = *(_OWORD *)(v21 + 32);
  *(_OWORD *)(v20 + 48)  = v23;
  __int128 v24 = *(_OWORD *)(v21 + 80);
  *(_OWORD *)(v20 + 64)  = *(_OWORD *)(v21 + 64);
  *(_OWORD *)(v20 + 80)  = v24;
  __int128 v25 = *(_OWORD *)(v21 + 112);
  *(_OWORD *)(v20 + 96)  = *(_OWORD *)(v21 + 96);
  *(_OWORD *)(v20 + 112)  = v25;
  __int128 v26 = *(_OWORD *)(v21 + 144);
  *(_OWORD *)(v20 + 128)  = *(_OWORD *)(v21 + 128);
  *(_OWORD *)(v20 + 144)  = v26;
  __int128 v27 = *(_OWORD *)(v21 + 176);
  *(_OWORD *)(v20 + 160)  = *(_OWORD *)(v21 + 160);
  *(_OWORD *)(v20 + 176)  = v27;
  *(_OWORD *)(v20 + 192)  = *(_OWORD *)(v21 + 192);
  uint64_t v28 = *(void *)(v21 + 216);
  uint64_t v29 = *(void *)(a1 + v19 + 216);
  *(void *)(v20 + 208)  = *(void *)(v21 + 208);
  *(void *)(v20 + 216)  = v28;
  swift_bridgeObjectRelease(v29);
  uint64_t v30 = *(void *)(v20 + 224);
  *(void *)(v20 + 224)  = *(void *)(v21 + 224);
  swift_bridgeObjectRelease(v30);
  uint64_t v31 = *(void *)(v20 + 232);
  *(void *)(v20 + 232)  = *(void *)(v21 + 232);
  swift_bridgeObjectRelease(v31);
  uint64_t v32 = *(void *)(v20 + 240);
  *(void *)(v20 + 240)  = *(void *)(v21 + 240);
  swift_bridgeObjectRelease(v32);
  uint64_t v33 = *(void *)(v20 + 248);
  *(void *)(v20 + 248)  = *(void *)(v21 + 248);
  swift_bridgeObjectRelease(v33);
  uint64_t v34 = *(void *)(v20 + 256);
  *(void *)(v20 + 256)  = *(void *)(v21 + 256);
  swift_bridgeObjectRelease(v34);
  uint64_t v35 = *(void *)(v20 + 264);
  *(void *)(v20 + 264)  = *(void *)(v21 + 264);
  swift_bridgeObjectRelease(v35);
  uint64_t v36 = *(void *)(v20 + 272);
  *(void *)(v20 + 272)  = *(void *)(v21 + 272);
  swift_bridgeObjectRelease(v36);
  uint64_t v37 = *(void *)(v20 + 280);
  *(void *)(v20 + 280)  = *(void *)(v21 + 280);
  swift_bridgeObjectRelease(v37);
  uint64_t v38 = *(void *)(v20 + 288);
  *(void *)(v20 + 288)  = *(void *)(v21 + 288);
  swift_bridgeObjectRelease(v38);
  uint64_t v39 = *(void *)(v20 + 296);
  *(void *)(v20 + 296)  = *(void *)(v21 + 296);
  swift_bridgeObjectRelease(v39);
  uint64_t v40 = *(void *)(v20 + 304);
  *(void *)(v20 + 304)  = *(void *)(v21 + 304);
  swift_bridgeObjectRelease(v40);
  uint64_t v41 = *(void *)(v20 + 312);
  *(void *)(v20 + 312)  = *(void *)(v21 + 312);
  swift_bridgeObjectRelease(v41);
  uint64_t v42 = *(void *)(v20 + 320);
  *(void *)(v20 + 320)  = *(void *)(v21 + 320);
  swift_bridgeObjectRelease(v42);
  uint64_t v43 = *(void *)(v20 + 328);
  *(void *)(v20 + 328)  = *(void *)(v21 + 328);
  swift_bridgeObjectRelease(v43);
  uint64_t v44 = *(void *)(v20 + 336);
  *(void *)(v20 + 336)  = *(void *)(v21 + 336);
  swift_bridgeObjectRelease(v44);
  uint64_t v45 = *(void *)(v20 + 344);
  *(void *)(v20 + 344)  = *(void *)(v21 + 344);
  swift_bridgeObjectRelease(v45);
  uint64_t v46 = *(void *)(v20 + 352);
  *(void *)(v20 + 352)  = *(void *)(v21 + 352);
  swift_bridgeObjectRelease(v46);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001574D4);
}

uint64_t sub_1001574D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 216);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9)  = -1;
  }
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100157560);
}

uint64_t sub_100157560(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20) + 216)  = (a2 - 1);
  return result;
}

uint64_t sub_1001575DC(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(319LL);
  if (v3 <= 0x3F)
  {
    v4[0]  = *(void *)(result - 8) + 64LL;
    v4[1]  = &unk_10034A2C8;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for AWDLStatistics.LowLatencyStatistics.Configuration( uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v28 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v28 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v28);
  }

  else
  {
    *(_BYTE *)a1  = *(_BYTE *)a2;
    *(_WORD *)(a1 + 1)  = *(_WORD *)((char *)a2 + 1);
    *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 1);
    *(void *)(a1 + 24)  = a2[3];
    *(_DWORD *)(a1 + 32)  = *((_DWORD *)a2 + 8);
    *(_WORD *)(a1 + 36)  = *((_WORD *)a2 + 18);
    *(_DWORD *)(a1 + 40)  = *((_DWORD *)a2 + 10);
    *(_WORD *)(a1 + 44)  = *((_WORD *)a2 + 22);
    int v7 = *((_DWORD *)a2 + 12);
    *(_WORD *)(a1 + 52)  = *((_WORD *)a2 + 26);
    *(_DWORD *)(a1 + 48)  = v7;
    *(_DWORD *)(a1 + 56)  = *((_DWORD *)a2 + 14);
    *(_WORD *)(a1 + 60)  = *((_WORD *)a2 + 30);
    __int128 v8 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64)  = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80)  = v8;
    __int128 v9 = *((_OWORD *)a2 + 6);
    *(_BYTE *)(a1 + 112)  = *((_BYTE *)a2 + 112);
    uint64_t v10 = a3[20];
    uint64_t v11 = a1 + v10;
    uint64_t v12 = (uint64_t)a2 + v10;
    *(_OWORD *)(a1 + 96)  = v9;
    uint64_t v13 = type metadata accessor for DispatchTimeInterval(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v12, v13);
    uint64_t v14 = a3[22];
    *(void *)((char *)v4 + a3[21])  = *(uint64_t *)((char *)a2 + a3[21]);
    *(void *)((char *)v4 + v14)  = *(uint64_t *)((char *)a2 + v14);
    uint64_t v15 = a3[24];
    *(void *)((char *)v4 + a3[23])  = *(uint64_t *)((char *)a2 + a3[23]);
    *(void *)((char *)v4 + v15)  = *(uint64_t *)((char *)a2 + v15);
    uint64_t v16 = a3[26];
    *(void *)((char *)v4 + a3[25])  = *(uint64_t *)((char *)a2 + a3[25]);
    *(void *)((char *)v4 + v16)  = *(uint64_t *)((char *)a2 + v16);
    uint64_t v17 = a3[28];
    *(void *)((char *)v4 + a3[27])  = *(uint64_t *)((char *)a2 + a3[27]);
    *(void *)((char *)v4 + v17)  = *(uint64_t *)((char *)a2 + v17);
    uint64_t v18 = a3[30];
    *(_WORD *)((char *)v4 + a3[29])  = *(_WORD *)((char *)a2 + a3[29]);
    *((_BYTE *)v4 + v18)  = *((_BYTE *)a2 + v18);
    uint64_t v19 = a3[32];
    *((_BYTE *)v4 + a3[31])  = *((_BYTE *)a2 + a3[31]);
    *((_BYTE *)v4 + v19)  = *((_BYTE *)a2 + v19);
    uint64_t v20 = a3[34];
    *((_BYTE *)v4 + a3[33])  = *((_BYTE *)a2 + a3[33]);
    *((_BYTE *)v4 + v20)  = *((_BYTE *)a2 + v20);
    uint64_t v21 = a3[36];
    *((_BYTE *)v4 + a3[35])  = *((_BYTE *)a2 + a3[35]);
    __int128 v22 = (void *)((char *)v4 + v21);
    __int128 v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = v23[1];
    *__int128 v22 = *v23;
    v22[1]  = v24;
    uint64_t v25 = a3[38];
    *((_BYTE *)v4 + a3[37])  = *((_BYTE *)a2 + a3[37]);
    *(void *)((char *)v4 + v25)  = *(uint64_t *)((char *)a2 + v25);
    uint64_t v26 = a3[40];
    *(void *)((char *)v4 + a3[39])  = *(uint64_t *)((char *)a2 + a3[39]);
    *(void *)((char *)v4 + v26)  = *(uint64_t *)((char *)a2 + v26);
    uint64_t v27 = a3[42];
    *(void *)((char *)v4 + a3[41])  = *(uint64_t *)((char *)a2 + a3[41]);
    *(void *)((char *)v4 + v27)  = *(uint64_t *)((char *)a2 + v27);
    *(void *)((char *)v4 + a3[43])  = *(uint64_t *)((char *)a2 + a3[43]);
    swift_bridgeObjectRetain(v24);
  }

  return v4;
}

uint64_t destroy for AWDLStatistics.LowLatencyStatistics.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 80);
  uint64_t v5 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 144) + 8));
}

uint64_t initializeWithCopy for AWDLStatistics.LowLatencyStatistics.Configuration( uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32)  = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36)  = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40)  = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44)  = *(_WORD *)(a2 + 44);
  int v6 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52)  = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48)  = v6;
  *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60)  = *(_WORD *)(a2 + 60);
  __int128 v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80)  = v7;
  __int128 v8 = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112)  = *(_BYTE *)(a2 + 112);
  uint64_t v9 = a3[20];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(_OWORD *)(a1 + 96)  = v8;
  uint64_t v12 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
  uint64_t v13 = a3[22];
  *(void *)(a1 + a3[21])  = *(void *)(a2 + a3[21]);
  *(void *)(a1 + v13)  = *(void *)(a2 + v13);
  uint64_t v14 = a3[24];
  *(void *)(a1 + a3[23])  = *(void *)(a2 + a3[23]);
  *(void *)(a1 + v14)  = *(void *)(a2 + v14);
  uint64_t v15 = a3[26];
  *(void *)(a1 + a3[25])  = *(void *)(a2 + a3[25]);
  *(void *)(a1 + v15)  = *(void *)(a2 + v15);
  uint64_t v16 = a3[28];
  *(void *)(a1 + a3[27])  = *(void *)(a2 + a3[27]);
  *(void *)(a1 + v16)  = *(void *)(a2 + v16);
  uint64_t v17 = a3[30];
  *(_WORD *)(a1 + a3[29])  = *(_WORD *)(a2 + a3[29]);
  *(_BYTE *)(a1 + v17)  = *(_BYTE *)(a2 + v17);
  uint64_t v18 = a3[32];
  *(_BYTE *)(a1 + a3[31])  = *(_BYTE *)(a2 + a3[31]);
  *(_BYTE *)(a1 + v18)  = *(_BYTE *)(a2 + v18);
  uint64_t v19 = a3[34];
  *(_BYTE *)(a1 + a3[33])  = *(_BYTE *)(a2 + a3[33]);
  *(_BYTE *)(a1 + v19)  = *(_BYTE *)(a2 + v19);
  uint64_t v20 = a3[36];
  *(_BYTE *)(a1 + a3[35])  = *(_BYTE *)(a2 + a3[35]);
  uint64_t v21 = (void *)(a1 + v20);
  __int128 v22 = (void *)(a2 + v20);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1]  = v23;
  uint64_t v24 = a3[38];
  *(_BYTE *)(a1 + a3[37])  = *(_BYTE *)(a2 + a3[37]);
  *(void *)(a1 + v24)  = *(void *)(a2 + v24);
  uint64_t v25 = a3[40];
  *(void *)(a1 + a3[39])  = *(void *)(a2 + a3[39]);
  *(void *)(a1 + v25)  = *(void *)(a2 + v25);
  uint64_t v26 = a3[42];
  *(void *)(a1 + a3[41])  = *(void *)(a2 + a3[41]);
  *(void *)(a1 + v26)  = *(void *)(a2 + v26);
  *(void *)(a1 + a3[43])  = *(void *)(a2 + a3[43]);
  swift_bridgeObjectRetain(v23);
  return a1;
}

uint64_t assignWithCopy for AWDLStatistics.LowLatencyStatistics.Configuration( uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1)  = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  int v6 = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36)  = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32)  = v6;
  int v7 = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44)  = *(_WORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40)  = v7;
  int v8 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52)  = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48)  = v8;
  int v9 = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60)  = *(_WORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56)  = v9;
  *(void *)(a1 + 64)  = *(void *)(a2 + 64);
  *(void *)(a1 + 72)  = *(void *)(a2 + 72);
  *(void *)(a1 + 80)  = *(void *)(a2 + 80);
  *(void *)(a1 + 88)  = *(void *)(a2 + 88);
  *(void *)(a1 + 96)  = *(void *)(a2 + 96);
  *(void *)(a1 + 104)  = *(void *)(a2 + 104);
  *(_BYTE *)(a1 + 112)  = *(_BYTE *)(a2 + 112);
  uint64_t v10 = a3[20];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  *(void *)(a1 + a3[21])  = *(void *)(a2 + a3[21]);
  *(void *)(a1 + a3[22])  = *(void *)(a2 + a3[22]);
  *(void *)(a1 + a3[23])  = *(void *)(a2 + a3[23]);
  *(void *)(a1 + a3[24])  = *(void *)(a2 + a3[24]);
  *(void *)(a1 + a3[25])  = *(void *)(a2 + a3[25]);
  *(void *)(a1 + a3[26])  = *(void *)(a2 + a3[26]);
  *(void *)(a1 + a3[27])  = *(void *)(a2 + a3[27]);
  *(void *)(a1 + a3[28])  = *(void *)(a2 + a3[28]);
  *(_WORD *)(a1 + a3[29])  = *(_WORD *)(a2 + a3[29]);
  *(_BYTE *)(a1 + a3[30])  = *(_BYTE *)(a2 + a3[30]);
  *(_BYTE *)(a1 + a3[31])  = *(_BYTE *)(a2 + a3[31]);
  *(_BYTE *)(a1 + a3[32])  = *(_BYTE *)(a2 + a3[32]);
  *(_BYTE *)(a1 + a3[33])  = *(_BYTE *)(a2 + a3[33]);
  *(_BYTE *)(a1 + a3[34])  = *(_BYTE *)(a2 + a3[34]);
  *(_BYTE *)(a1 + a3[35])  = *(_BYTE *)(a2 + a3[35]);
  uint64_t v14 = a3[36];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  *uint64_t v15 = *v16;
  uint64_t v17 = v16[1];
  uint64_t v18 = v15[1];
  v15[1]  = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(_BYTE *)(a1 + a3[37])  = *(_BYTE *)(a2 + a3[37]);
  *(void *)(a1 + a3[38])  = *(void *)(a2 + a3[38]);
  *(void *)(a1 + a3[39])  = *(void *)(a2 + a3[39]);
  *(void *)(a1 + a3[40])  = *(void *)(a2 + a3[40]);
  *(void *)(a1 + a3[41])  = *(void *)(a2 + a3[41]);
  *(void *)(a1 + a3[42])  = *(void *)(a2 + a3[42]);
  *(void *)(a1 + a3[43])  = *(void *)(a2 + a3[43]);
  return a1;
}

uint64_t initializeWithTake for AWDLStatistics.LowLatencyStatistics.Configuration( uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32)  = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36)  = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40)  = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44)  = *(_WORD *)(a2 + 44);
  int v6 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52)  = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48)  = v6;
  *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60)  = *(_WORD *)(a2 + 60);
  __int128 v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80)  = v7;
  __int128 v8 = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112)  = *(_BYTE *)(a2 + 112);
  uint64_t v9 = a3[20];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(_OWORD *)(a1 + 96)  = v8;
  uint64_t v12 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL))(v10, v11, v12);
  uint64_t v13 = a3[22];
  *(void *)(a1 + a3[21])  = *(void *)(a2 + a3[21]);
  *(void *)(a1 + v13)  = *(void *)(a2 + v13);
  uint64_t v14 = a3[24];
  *(void *)(a1 + a3[23])  = *(void *)(a2 + a3[23]);
  *(void *)(a1 + v14)  = *(void *)(a2 + v14);
  uint64_t v15 = a3[26];
  *(void *)(a1 + a3[25])  = *(void *)(a2 + a3[25]);
  *(void *)(a1 + v15)  = *(void *)(a2 + v15);
  uint64_t v16 = a3[28];
  *(void *)(a1 + a3[27])  = *(void *)(a2 + a3[27]);
  *(void *)(a1 + v16)  = *(void *)(a2 + v16);
  uint64_t v17 = a3[30];
  *(_WORD *)(a1 + a3[29])  = *(_WORD *)(a2 + a3[29]);
  *(_BYTE *)(a1 + v17)  = *(_BYTE *)(a2 + v17);
  uint64_t v18 = a3[32];
  *(_BYTE *)(a1 + a3[31])  = *(_BYTE *)(a2 + a3[31]);
  *(_BYTE *)(a1 + v18)  = *(_BYTE *)(a2 + v18);
  uint64_t v19 = a3[34];
  *(_BYTE *)(a1 + a3[33])  = *(_BYTE *)(a2 + a3[33]);
  *(_BYTE *)(a1 + v19)  = *(_BYTE *)(a2 + v19);
  uint64_t v20 = a3[36];
  *(_BYTE *)(a1 + a3[35])  = *(_BYTE *)(a2 + a3[35]);
  *(_OWORD *)(a1 + v20)  = *(_OWORD *)(a2 + v20);
  uint64_t v21 = a3[38];
  *(_BYTE *)(a1 + a3[37])  = *(_BYTE *)(a2 + a3[37]);
  *(void *)(a1 + v21)  = *(void *)(a2 + v21);
  uint64_t v22 = a3[40];
  *(void *)(a1 + a3[39])  = *(void *)(a2 + a3[39]);
  *(void *)(a1 + v22)  = *(void *)(a2 + v22);
  uint64_t v23 = a3[42];
  *(void *)(a1 + a3[41])  = *(void *)(a2 + a3[41]);
  *(void *)(a1 + v23)  = *(void *)(a2 + v23);
  *(void *)(a1 + a3[43])  = *(void *)(a2 + a3[43]);
  return a1;
}

uint64_t assignWithTake for AWDLStatistics.LowLatencyStatistics.Configuration( uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32)  = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36)  = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40)  = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44)  = *(_WORD *)(a2 + 44);
  int v6 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52)  = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48)  = v6;
  *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60)  = *(_WORD *)(a2 + 60);
  __int128 v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80)  = v7;
  __int128 v8 = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112)  = *(_BYTE *)(a2 + 112);
  uint64_t v9 = a3[20];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(_OWORD *)(a1 + 96)  = v8;
  uint64_t v12 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40LL))(v10, v11, v12);
  uint64_t v13 = a3[22];
  *(void *)(a1 + a3[21])  = *(void *)(a2 + a3[21]);
  *(void *)(a1 + v13)  = *(void *)(a2 + v13);
  uint64_t v14 = a3[24];
  *(void *)(a1 + a3[23])  = *(void *)(a2 + a3[23]);
  *(void *)(a1 + v14)  = *(void *)(a2 + v14);
  uint64_t v15 = a3[26];
  *(void *)(a1 + a3[25])  = *(void *)(a2 + a3[25]);
  *(void *)(a1 + v15)  = *(void *)(a2 + v15);
  uint64_t v16 = a3[28];
  *(void *)(a1 + a3[27])  = *(void *)(a2 + a3[27]);
  *(void *)(a1 + v16)  = *(void *)(a2 + v16);
  uint64_t v17 = a3[30];
  *(_WORD *)(a1 + a3[29])  = *(_WORD *)(a2 + a3[29]);
  *(_BYTE *)(a1 + v17)  = *(_BYTE *)(a2 + v17);
  uint64_t v18 = a3[32];
  *(_BYTE *)(a1 + a3[31])  = *(_BYTE *)(a2 + a3[31]);
  *(_BYTE *)(a1 + v18)  = *(_BYTE *)(a2 + v18);
  uint64_t v19 = a3[34];
  *(_BYTE *)(a1 + a3[33])  = *(_BYTE *)(a2 + a3[33]);
  *(_BYTE *)(a1 + v19)  = *(_BYTE *)(a2 + v19);
  uint64_t v20 = a3[36];
  *(_BYTE *)(a1 + a3[35])  = *(_BYTE *)(a2 + a3[35]);
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (uint64_t *)(a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  uint64_t v25 = v21[1];
  *uint64_t v21 = v24;
  v21[1]  = v23;
  swift_bridgeObjectRelease(v25);
  uint64_t v26 = a3[38];
  *(_BYTE *)(a1 + a3[37])  = *(_BYTE *)(a2 + a3[37]);
  *(void *)(a1 + v26)  = *(void *)(a2 + v26);
  uint64_t v27 = a3[40];
  *(void *)(a1 + a3[39])  = *(void *)(a2 + a3[39]);
  *(void *)(a1 + v27)  = *(void *)(a2 + v27);
  uint64_t v28 = a3[42];
  *(void *)(a1 + a3[41])  = *(void *)(a2 + a3[41]);
  *(void *)(a1 + v28)  = *(void *)(a2 + v28);
  *(void *)(a1 + a3[43])  = *(void *)(a2 + a3[43]);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Configuration( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100158054);
}

uint64_t sub_100158054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 80), a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 144) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9)  = -1;
  }
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Configuration( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001580E4);
}

uint64_t sub_1001580E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))( a1 + *(int *)(a4 + 80),  a2,  a2,  result);
  }
  *(void *)(a1 + *(int *)(a4 + 144) + 8)  = (a2 - 1);
  return result;
}

uint64_t sub_100158164(uint64_t a1)
{
  v4[0]  = &unk_10034A280;
  v4[1]  = &unk_10034A2F0;
  v4[2]  = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3]  = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4]  = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[5] = &unk_10034A308;
  v4[6]  = &unk_10034A308;
  v4[7]  = &unk_10034A308;
  v4[8]  = &unk_10034A308;
  void v4[9] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[10]  = (char *)&value witness table for Builtin.Int64 + 64;
  v4[11]  = (char *)&value witness table for Builtin.Int64 + 64;
  v4[12]  = (char *)&value witness table for Builtin.Int64 + 64;
  v4[13]  = (char *)&value witness table for Builtin.Int64 + 64;
  v4[14]  = (char *)&value witness table for Builtin.Int64 + 64;
  v4[15]  = &unk_10034A280;
  uint64_t result = type metadata accessor for DispatchTimeInterval(319LL);
  if (v3 <= 0x3F)
  {
    v4[16]  = *(void *)(result - 8) + 64LL;
    v4[17]  = (char *)&value witness table for Builtin.Int64 + 64;
    v4[18]  = (char *)&value witness table for Builtin.Int64 + 64;
    v4[19]  = (char *)&value witness table for Builtin.Int64 + 64;
    v4[20]  = (char *)&value witness table for Builtin.Int64 + 64;
    v4[21]  = (char *)&value witness table for Builtin.Int64 + 64;
    v4[22]  = (char *)&value witness table for Builtin.Int64 + 64;
    v4[23]  = (char *)&value witness table for Builtin.Int64 + 64;
    v4[24]  = (char *)&value witness table for Builtin.Int64 + 64;
    v4[25]  = (char *)&value witness table for Builtin.Int16 + 64;
    v4[26]  = &unk_10034A280;
    v4[27]  = &unk_10034A280;
    v4[28]  = &unk_10034A280;
    v4[29]  = &unk_10034A280;
    v4[30]  = &unk_10034A280;
    v4[31]  = (char *)&value witness table for Builtin.Int8 + 64;
    v4[32]  = &unk_10034A320;
    v4[33]  = &unk_10034A280;
    v4[34]  = (char *)&value witness table for Builtin.Int64 + 64;
    v4[35]  = (char *)&value witness table for Builtin.Int64 + 64;
    v4[36]  = (char *)&value witness table for Builtin.Int64 + 64;
    v4[37]  = (char *)&value witness table for Builtin.Int64 + 64;
    v4[38]  = (char *)&value witness table for Builtin.Int64 + 64;
    v4[39]  = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256LL, 40LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t destroy for AWDLStatistics.LowLatencyStatistics.Traffic(void *a1)
{
  return swift_bridgeObjectRelease(a1[44]);
}

uint64_t initializeWithCopy for AWDLStatistics.LowLatencyStatistics.Traffic(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160)  = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176)  = v3;
  *(_OWORD *)(a1 + 192)  = *(_OWORD *)(a2 + 192);
  __int128 v4 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96)  = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112)  = v4;
  __int128 v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128)  = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144)  = v5;
  __int128 v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48)  = v6;
  __int128 v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80)  = v7;
  __int128 v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v8;
  uint64_t v9 = *(void *)(a2 + 216);
  *(void *)(a1 + 208)  = *(void *)(a2 + 208);
  *(void *)(a1 + 216)  = v9;
  uint64_t v10 = *(void *)(a2 + 224);
  uint64_t v11 = *(void *)(a2 + 232);
  *(void *)(a1 + 224)  = v10;
  *(void *)(a1 + 232)  = v11;
  uint64_t v12 = *(void *)(a2 + 240);
  uint64_t v13 = *(void *)(a2 + 248);
  *(void *)(a1 + 240)  = v12;
  *(void *)(a1 + 248)  = v13;
  uint64_t v14 = *(void *)(a2 + 256);
  uint64_t v15 = *(void *)(a2 + 264);
  *(void *)(a1 + 256)  = v14;
  *(void *)(a1 + 264)  = v15;
  uint64_t v16 = *(void *)(a2 + 272);
  uint64_t v17 = *(void *)(a2 + 280);
  *(void *)(a1 + 272)  = v16;
  *(void *)(a1 + 280)  = v17;
  uint64_t v19 = *(void *)(a2 + 288);
  uint64_t v18 = *(void *)(a2 + 296);
  *(void *)(a1 + 288)  = v19;
  *(void *)(a1 + 296)  = v18;
  uint64_t v23 = v18;
  uint64_t v24 = *(void *)(a2 + 304);
  uint64_t v20 = *(void *)(a2 + 312);
  *(void *)(a1 + 304)  = v24;
  *(void *)(a1 + 312)  = v20;
  uint64_t v25 = v20;
  uint64_t v26 = *(void *)(a2 + 320);
  uint64_t v21 = *(void *)(a2 + 328);
  *(void *)(a1 + 320)  = v26;
  *(void *)(a1 + 328)  = v21;
  uint64_t v27 = v21;
  uint64_t v28 = *(void *)(a2 + 336);
  uint64_t v29 = *(void *)(a2 + 344);
  *(void *)(a1 + 336)  = v28;
  *(void *)(a1 + 344)  = v29;
  uint64_t v30 = *(void *)(a2 + 352);
  *(void *)(a1 + 352)  = v30;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v30);
  return a1;
}

void *assignWithCopy for AWDLStatistics.LowLatencyStatistics.Traffic(void *a1, void *a2)
{
  *a1  = *a2;
  a1[1]  = a2[1];
  a1[2]  = a2[2];
  a1[3]  = a2[3];
  a1[4]  = a2[4];
  a1[5]  = a2[5];
  a1[6]  = a2[6];
  a1[7]  = a2[7];
  a1[8]  = a2[8];
  a1[9]  = a2[9];
  a1[10]  = a2[10];
  a1[11]  = a2[11];
  a1[12]  = a2[12];
  a1[13]  = a2[13];
  a1[14]  = a2[14];
  a1[15]  = a2[15];
  a1[16]  = a2[16];
  a1[17]  = a2[17];
  a1[18]  = a2[18];
  a1[19]  = a2[19];
  a1[20]  = a2[20];
  a1[21]  = a2[21];
  a1[22]  = a2[22];
  a1[23]  = a2[23];
  a1[24]  = a2[24];
  a1[25]  = a2[25];
  a1[26]  = a2[26];
  uint64_t v4 = a2[27];
  uint64_t v5 = a1[27];
  a1[27]  = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[28];
  uint64_t v7 = a1[28];
  a1[28]  = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[29];
  uint64_t v9 = a1[29];
  a1[29]  = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[30];
  uint64_t v11 = a1[30];
  a1[30]  = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a2[31];
  uint64_t v13 = a1[31];
  a1[31]  = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a2[32];
  uint64_t v15 = a1[32];
  a1[32]  = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = a2[33];
  uint64_t v17 = a1[33];
  a1[33]  = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = a2[34];
  uint64_t v19 = a1[34];
  a1[34]  = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = a2[35];
  uint64_t v21 = a1[35];
  a1[35]  = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = a2[36];
  uint64_t v23 = a1[36];
  a1[36]  = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = a2[37];
  uint64_t v25 = a1[37];
  a1[37]  = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  uint64_t v26 = a2[38];
  uint64_t v27 = a1[38];
  a1[38]  = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  uint64_t v28 = a2[39];
  uint64_t v29 = a1[39];
  a1[39]  = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  uint64_t v30 = a2[40];
  uint64_t v31 = a1[40];
  a1[40]  = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  uint64_t v32 = a2[41];
  uint64_t v33 = a1[41];
  a1[41]  = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  uint64_t v34 = a2[42];
  uint64_t v35 = a1[42];
  a1[42]  = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  uint64_t v36 = a2[43];
  uint64_t v37 = a1[43];
  a1[43]  = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  uint64_t v38 = a2[44];
  uint64_t v39 = a1[44];
  a1[44]  = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  return a1;
}

void *initializeWithTake for AWDLStatistics.LowLatencyStatistics.Traffic(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x168uLL);
}

uint64_t assignWithTake for AWDLStatistics.LowLatencyStatistics.Traffic(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v4;
  __int128 v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48)  = v5;
  __int128 v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80)  = v6;
  __int128 v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96)  = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112)  = v7;
  __int128 v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128)  = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144)  = v8;
  __int128 v9 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160)  = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176)  = v9;
  *(_OWORD *)(a1 + 192)  = *(_OWORD *)(a2 + 192);
  uint64_t v10 = *(void *)(a2 + 216);
  uint64_t v11 = *(void *)(a1 + 216);
  *(void *)(a1 + 208)  = *(void *)(a2 + 208);
  *(void *)(a1 + 216)  = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a1 + 224);
  *(void *)(a1 + 224)  = *(void *)(a2 + 224);
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = *(void *)(a1 + 232);
  *(void *)(a1 + 232)  = *(void *)(a2 + 232);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a1 + 240);
  *(void *)(a1 + 240)  = *(void *)(a2 + 240);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(void *)(a1 + 248);
  *(void *)(a1 + 248)  = *(void *)(a2 + 248);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(void *)(a1 + 256);
  *(void *)(a1 + 256)  = *(void *)(a2 + 256);
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = *(void *)(a1 + 264);
  *(void *)(a1 + 264)  = *(void *)(a2 + 264);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = *(void *)(a1 + 272);
  *(void *)(a1 + 272)  = *(void *)(a2 + 272);
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = *(void *)(a1 + 280);
  *(void *)(a1 + 280)  = *(void *)(a2 + 280);
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = *(void *)(a1 + 288);
  *(void *)(a1 + 288)  = *(void *)(a2 + 288);
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = *(void *)(a1 + 296);
  *(void *)(a1 + 296)  = *(void *)(a2 + 296);
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = *(void *)(a1 + 304);
  *(void *)(a1 + 304)  = *(void *)(a2 + 304);
  swift_bridgeObjectRelease(v22);
  uint64_t v23 = *(void *)(a1 + 312);
  *(void *)(a1 + 312)  = *(void *)(a2 + 312);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = *(void *)(a1 + 320);
  *(void *)(a1 + 320)  = *(void *)(a2 + 320);
  swift_bridgeObjectRelease(v24);
  uint64_t v25 = *(void *)(a1 + 328);
  *(void *)(a1 + 328)  = *(void *)(a2 + 328);
  swift_bridgeObjectRelease(v25);
  uint64_t v26 = *(void *)(a1 + 336);
  *(void *)(a1 + 336)  = *(void *)(a2 + 336);
  swift_bridgeObjectRelease(v26);
  uint64_t v27 = *(void *)(a1 + 344);
  *(void *)(a1 + 344)  = *(void *)(a2 + 344);
  swift_bridgeObjectRelease(v27);
  uint64_t v28 = *(void *)(a1 + 352);
  *(void *)(a1 + 352)  = *(void *)(a2 + 352);
  swift_bridgeObjectRelease(v28);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Traffic(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 360)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 216);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Traffic( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248)  = 0u;
    *(_OWORD *)(result + 232)  = 0u;
    *(_OWORD *)(result + 216)  = 0u;
    *(_OWORD *)(result + 200)  = 0u;
    *(_OWORD *)(result + 184)  = 0u;
    *(_OWORD *)(result + 168)  = 0u;
    *(_OWORD *)(result + 152)  = 0u;
    *(_OWORD *)(result + 136)  = 0u;
    *(_OWORD *)(result + 120)  = 0u;
    *(_OWORD *)(result + 104)  = 0u;
    *(_OWORD *)(result + 88)  = 0u;
    *(_OWORD *)(result + 72)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(_OWORD *)(result + 328)  = 0u;
    *(_OWORD *)(result + 344)  = 0u;
    *(_OWORD *)(result + 312)  = 0u;
    *(_OWORD *)(result + 296)  = 0u;
    *(_OWORD *)(result + 280)  = 0u;
    *(_OWORD *)(result + 264)  = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 360)  = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 216)  = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 360)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.LowLatencyStatistics.Traffic()
{
  return &type metadata for AWDLStatistics.LowLatencyStatistics.Traffic;
}

ValueMetadata *type metadata accessor for AWDLStatistics.LowLatencyStatistics.Traffic.Counts()
{
  return &type metadata for AWDLStatistics.LowLatencyStatistics.Traffic.Counts;
}

uint64_t destroy for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms(void *a1)
{
  return swift_bridgeObjectRelease(a1[17]);
}

uint64_t *initializeWithCopy for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms( uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1  = *a2;
  a1[1]  = v4;
  uint64_t v6 = a2[2];
  uint64_t v5 = a2[3];
  a1[2]  = v6;
  a1[3]  = v5;
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  a1[4]  = v7;
  a1[5]  = v8;
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  a1[6]  = v9;
  a1[7]  = v10;
  uint64_t v11 = a2[8];
  uint64_t v12 = a2[9];
  a1[8]  = v11;
  a1[9]  = v12;
  uint64_t v14 = a2[10];
  uint64_t v15 = a2[11];
  a1[10]  = v14;
  a1[11]  = v15;
  uint64_t v16 = a2[12];
  uint64_t v17 = a2[13];
  a1[12]  = v16;
  a1[13]  = v17;
  uint64_t v18 = a2[14];
  uint64_t v19 = a2[15];
  a1[14]  = v18;
  a1[15]  = v19;
  uint64_t v20 = a2[16];
  uint64_t v21 = a2[17];
  a1[16]  = v20;
  a1[17]  = v21;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  return a1;
}

uint64_t *assignWithCopy for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1  = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1]  = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[2];
  uint64_t v9 = a1[2];
  a1[2]  = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[3];
  uint64_t v11 = a1[3];
  a1[3]  = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a2[4];
  uint64_t v13 = a1[4];
  a1[4]  = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a2[5];
  uint64_t v15 = a1[5];
  a1[5]  = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = a2[6];
  uint64_t v17 = a1[6];
  a1[6]  = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = a2[7];
  uint64_t v19 = a1[7];
  a1[7]  = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = a2[8];
  uint64_t v21 = a1[8];
  a1[8]  = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = a2[9];
  uint64_t v23 = a1[9];
  a1[9]  = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = a2[10];
  uint64_t v25 = a1[10];
  a1[10]  = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  uint64_t v26 = a2[11];
  uint64_t v27 = a1[11];
  a1[11]  = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  uint64_t v28 = a2[12];
  uint64_t v29 = a1[12];
  a1[12]  = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  uint64_t v30 = a2[13];
  uint64_t v31 = a1[13];
  a1[13]  = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  uint64_t v32 = a2[14];
  uint64_t v33 = a1[14];
  a1[14]  = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  uint64_t v34 = a2[15];
  uint64_t v35 = a1[15];
  a1[15]  = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  uint64_t v36 = a2[16];
  uint64_t v37 = a1[16];
  a1[16]  = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  uint64_t v38 = a2[17];
  uint64_t v39 = a1[17];
  a1[17]  = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  return a1;
}

__n128 initializeWithTake for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48)  = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64)  = v4;
  *(_OWORD *)(a1 + 16)  = v2;
  *(_OWORD *)(a1 + 32)  = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112)  = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128)  = v7;
  *(__n128 *)(a1 + 80)  = result;
  *(_OWORD *)(a1 + 96)  = v6;
  return result;
}

void *assignWithTake for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1  = *a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[2]);
  uint64_t v5 = a1[3];
  *((_OWORD *)a1 + 1)  = a2[1];
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(a1[4]);
  uint64_t v6 = a1[5];
  *((_OWORD *)a1 + 2)  = a2[2];
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(a1[6]);
  uint64_t v7 = a1[7];
  *((_OWORD *)a1 + 3)  = a2[3];
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(a1[8]);
  uint64_t v8 = a1[9];
  *((_OWORD *)a1 + 4)  = a2[4];
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(a1[10]);
  uint64_t v9 = a1[11];
  *((_OWORD *)a1 + 5)  = a2[5];
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(a1[12]);
  uint64_t v10 = a1[13];
  *((_OWORD *)a1 + 6)  = a2[6];
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(a1[14]);
  uint64_t v11 = a1[15];
  *((_OWORD *)a1 + 7)  = a2[7];
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(a1[16]);
  uint64_t v12 = a1[17];
  *((_OWORD *)a1 + 8)  = a2[8];
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms( uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 144)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136)  = 0LL;
    *(_OWORD *)(result + 120)  = 0u;
    *(_OWORD *)(result + 104)  = 0u;
    *(_OWORD *)(result + 88)  = 0u;
    *(_OWORD *)(result + 72)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 144)  = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 144)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms()
{
  return &type metadata for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms;
}

uint64_t destroy for AWDLStatistics.AirPlayStatistics(void *a1)
{
  return swift_bridgeObjectRelease(a1[13]);
}

uint64_t initializeWithCopy for AWDLStatistics.AirPlayStatistics(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v3;
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40)  = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 42)  = *(_BYTE *)(a2 + 42);
  *(_WORD *)(a1 + 43)  = *(_WORD *)(a2 + 43);
  *(_DWORD *)(a1 + 48)  = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52)  = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 60)  = *(void *)(a2 + 60);
  *(_DWORD *)(a1 + 68)  = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72)  = *(_BYTE *)(a2 + 72);
  uint64_t v4 = *(void *)(a2 + 80);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80)  = v4;
  *(void *)(a1 + 88)  = v5;
  uint64_t v6 = *(void *)(a2 + 96);
  uint64_t v7 = *(void *)(a2 + 104);
  *(void *)(a1 + 96)  = v6;
  *(void *)(a1 + 104)  = v7;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for AWDLStatistics.AirPlayStatistics(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20)  = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24)  = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28)  = *(_DWORD *)(a2 + 28);
  *(_WORD *)(a1 + 32)  = *(_WORD *)(a2 + 32);
  *(_WORD *)(a1 + 34)  = *(_WORD *)(a2 + 34);
  *(_WORD *)(a1 + 36)  = *(_WORD *)(a2 + 36);
  *(_WORD *)(a1 + 38)  = *(_WORD *)(a2 + 38);
  *(_WORD *)(a1 + 40)  = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 42)  = *(_BYTE *)(a2 + 42);
  *(_BYTE *)(a1 + 43)  = *(_BYTE *)(a2 + 43);
  *(_BYTE *)(a1 + 44)  = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 48)  = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52)  = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60)  = *(_BYTE *)(a2 + 60);
  *(_BYTE *)(a1 + 61)  = *(_BYTE *)(a2 + 61);
  *(_BYTE *)(a1 + 62)  = *(_BYTE *)(a2 + 62);
  *(_BYTE *)(a1 + 63)  = *(_BYTE *)(a2 + 63);
  *(_BYTE *)(a1 + 64)  = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65)  = *(_BYTE *)(a2 + 65);
  *(_BYTE *)(a1 + 66)  = *(_BYTE *)(a2 + 66);
  *(_BYTE *)(a1 + 67)  = *(_BYTE *)(a2 + 67);
  *(_BYTE *)(a1 + 68)  = *(_BYTE *)(a2 + 68);
  *(_BYTE *)(a1 + 69)  = *(_BYTE *)(a2 + 69);
  *(_BYTE *)(a1 + 70)  = *(_BYTE *)(a2 + 70);
  *(_BYTE *)(a1 + 71)  = *(_BYTE *)(a2 + 71);
  *(_BYTE *)(a1 + 72)  = *(_BYTE *)(a2 + 72);
  uint64_t v4 = *(void *)(a2 + 80);
  uint64_t v5 = *(void *)(a1 + 80);
  *(void *)(a1 + 80)  = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 88);
  uint64_t v7 = *(void *)(a1 + 88);
  *(void *)(a1 + 88)  = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 96);
  uint64_t v9 = *(void *)(a1 + 96);
  *(void *)(a1 + 96)  = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 104);
  uint64_t v11 = *(void *)(a1 + 104);
  *(void *)(a1 + 104)  = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

__n128 initializeWithTake for AWDLStatistics.AirPlayStatistics(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16)  = a2[1];
  *(_OWORD *)(a1 + 32)  = v3;
  *(_OWORD *)a1  = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[6];
  *(_OWORD *)(a1 + 80)  = a2[5];
  *(_OWORD *)(a1 + 96)  = v6;
  *(__n128 *)(a1 + 48)  = result;
  *(_OWORD *)(a1 + 64)  = v5;
  return result;
}

uint64_t assignWithTake for AWDLStatistics.AirPlayStatistics(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v4;
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40)  = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 42)  = *(_BYTE *)(a2 + 42);
  *(_WORD *)(a1 + 43)  = *(_WORD *)(a2 + 43);
  *(_DWORD *)(a1 + 48)  = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52)  = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60)  = *(_WORD *)(a2 + 60);
  *(_BYTE *)(a1 + 62)  = *(_BYTE *)(a2 + 62);
  *(_BYTE *)(a1 + 63)  = *(_BYTE *)(a2 + 63);
  *(_BYTE *)(a1 + 64)  = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65)  = *(_BYTE *)(a2 + 65);
  *(_BYTE *)(a1 + 66)  = *(_BYTE *)(a2 + 66);
  *(_BYTE *)(a1 + 67)  = *(_BYTE *)(a2 + 67);
  *(_DWORD *)(a1 + 68)  = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72)  = *(_BYTE *)(a2 + 72);
  swift_bridgeObjectRelease(*(void *)(a1 + 80));
  uint64_t v5 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 80)  = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(*(void *)(a1 + 96));
  uint64_t v6 = *(void *)(a1 + 104);
  *(_OWORD *)(a1 + 96)  = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.AirPlayStatistics(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.AirPlayStatistics(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104)  = 0LL;
    *(_OWORD *)(result + 88)  = 0u;
    *(_OWORD *)(result + 72)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 112)  = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 80)  = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 112)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.AirPlayStatistics()
{
  return &type metadata for AWDLStatistics.AirPlayStatistics;
}

ValueMetadata *type metadata accessor for AWDLStatistics.AirPlayStatistics.Histograms()
{
  return &type metadata for AWDLStatistics.AirPlayStatistics.Histograms;
}

ValueMetadata *type metadata accessor for AWDLStatistics.ServiceRejection.Key()
{
  return &type metadata for AWDLStatistics.ServiceRejection.Key;
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.TrafficRegistrationStart.Key( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_1001593DC + 4 * byte_100349DDB[v4]))();
  }
  *a1  = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100159410 + 4 * byte_100349DD6[v4]))();
}

uint64_t sub_100159410(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100159418(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x100159420LL);
  }
  return result;
}

uint64_t sub_10015942C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x100159434LL);
  }
  *(_BYTE *)__n128 result = a2 + 6;
  return result;
}

uint64_t sub_100159438(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100159440(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.TrafficRegistrationStart.Key()
{
  return &type metadata for AWDLStatistics.TrafficRegistrationStart.Key;
}

uint64_t _s7CoreP2P14AWDLStatisticsO7FailureV6ReasonOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1001594A8 + 4 * byte_100349DE5[v4]))();
  }
  *a1  = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001594DC + 4 * byte_100349DE0[v4]))();
}

uint64_t sub_1001594DC(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001594E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x1001594ECLL);
  }
  return result;
}

uint64_t sub_1001594F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x100159500LL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_100159504(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10015950C(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.TrafficRegistrationStop.Key()
{
  return &type metadata for AWDLStatistics.TrafficRegistrationStop.Key;
}

uint64_t _s7CoreP2P14AWDLStatisticsO16ServiceRejectionV3KeyOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100159574 + 4 * byte_100349DEF[v4]))();
  }
  *a1  = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001595A8 + 4 * byte_100349DEA[v4]))();
}

uint64_t sub_1001595A8(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001595B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x1001595B8LL);
  }
  return result;
}

uint64_t sub_1001595C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x1001595CCLL);
  }
  *(_BYTE *)__n128 result = a2 + 1;
  return result;
}

uint64_t sub_1001595D0(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001595D8(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.Failure.Key()
{
  return &type metadata for AWDLStatistics.Failure.Key;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Key( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xBE) {
    goto LABEL_17;
  }
  if (a2 + 66 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 66) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 66;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 66;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 66;
    }
  }

uint64_t storeEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Key( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 66 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 66) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xBE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xBD) {
    return ((uint64_t (*)(void))((char *)&loc_1001596D0 + 4 * byte_100349DF9[v4]))();
  }
  *a1  = a2 + 66;
  return ((uint64_t (*)(void))((char *)sub_100159704 + 4 * byte_100349DF4[v4]))();
}

uint64_t sub_100159704(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10015970C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x100159714LL);
  }
  return result;
}

uint64_t sub_100159720(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x100159728LL);
  }
  *(_BYTE *)__n128 result = a2 + 66;
  return result;
}

uint64_t sub_10015972C(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100159734(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.LowLatencyStatistics.Key()
{
  return &type metadata for AWDLStatistics.LowLatencyStatistics.Key;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.AirPlayStatistics.Key( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xE3) {
    goto LABEL_17;
  }
  if (a2 + 29 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 29) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 29;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 29;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 29;
    }
  }

uint64_t storeEnumTagSinglePayload for AWDLStatistics.AirPlayStatistics.Key( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 29 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 29) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xE3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xE2) {
    return ((uint64_t (*)(void))((char *)&loc_10015982C + 4 * byte_100349E03[v4]))();
  }
  *a1  = a2 + 29;
  return ((uint64_t (*)(void))((char *)sub_100159860 + 4 * byte_100349DFE[v4]))();
}

uint64_t sub_100159860(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100159868(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x100159870LL);
  }
  return result;
}

uint64_t sub_10015987C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x100159884LL);
  }
  *(_BYTE *)__n128 result = a2 + 29;
  return result;
}

uint64_t sub_100159888(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100159890(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.AirPlayStatistics.Key()
{
  return &type metadata for AWDLStatistics.AirPlayStatistics.Key;
}

unint64_t sub_1001598B0()
{
  unint64_t result = qword_1004095C0;
  if (!qword_1004095C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034A3F0, &type metadata for AWDLStatistics.AirPlayStatistics.Key);
    atomic_store(result, (unint64_t *)&qword_1004095C0);
  }

  return result;
}

unint64_t sub_1001598F8()
{
  unint64_t result = qword_1004095C8;
  if (!qword_1004095C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034A490, &type metadata for AWDLStatistics.LowLatencyStatistics.Key);
    atomic_store(result, (unint64_t *)&qword_1004095C8);
  }

  return result;
}

unint64_t sub_100159940()
{
  unint64_t result = qword_1004095D0;
  if (!qword_1004095D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034A530, &type metadata for AWDLStatistics.Failure.Key);
    atomic_store(result, (unint64_t *)&qword_1004095D0);
  }

  return result;
}

unint64_t sub_100159988()
{
  unint64_t result = qword_1004095D8;
  if (!qword_1004095D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034A5D0, &type metadata for AWDLStatistics.TrafficRegistrationStop.Key);
    atomic_store(result, (unint64_t *)&qword_1004095D8);
  }

  return result;
}

unint64_t sub_1001599D0()
{
  unint64_t result = qword_1004095E0;
  if (!qword_1004095E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034A670, &type metadata for AWDLStatistics.TrafficRegistrationStart.Key);
    atomic_store(result, (unint64_t *)&qword_1004095E0);
  }

  return result;
}

unint64_t sub_100159A18()
{
  unint64_t result = qword_1004095E8;
  if (!qword_1004095E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034A710, &type metadata for AWDLStatistics.ServiceRejection.Key);
    atomic_store(result, (unint64_t *)&qword_1004095E8);
  }

  return result;
}

uint64_t NANTimeUnit.init<A>(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v53 = *(void *)(*(void *)(a3 + 24) + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v53,  a2,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  uint64_t v6 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v52 = (char *)&v49 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v54 = (char *)&v49 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v49 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v49 - v16;
  uint64_t v55 = v18;
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v19((char *)&v49 - v16, (uint64_t)a1, a2);
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(a2, v3) & 1) != 0)
  {
    uint64_t v20 = v19;
    uint64_t v21 = v53;
    uint64_t v22 = AssociatedTypeWitness;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v53,  a2,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    uint64_t v24 = a1;
    uint64_t v25 = v15;
    uint64_t v26 = v52;
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100339A38,  256LL,  v22,  AssociatedConformanceWitness);
    uint64_t v27 = v26;
    uint64_t v15 = v25;
    a1  = v24;
    uint64_t v28 = v21;
    uint64_t v19 = v20;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v27, a2, v28);
    LOBYTE(v22)  = dispatch thunk of static Comparable.>= infix(_:_:)( v17,  v15,  a2,  *(void *)(*(void *)(v3 + 32) + 8LL));
    (*(void (**)(char *, uint64_t))(v55 + 8))(v15, a2);
    if ((v22 & 1) == 0)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
      goto LABEL_17;
    }
  }

  if (dispatch thunk of BinaryInteger.bitWidth.getter(a2, v3) < 64) {
    goto LABEL_15;
  }
  uint64_t v49 = v10;
  uint64_t v50 = a1;
  v19(v54, (uint64_t)v17, a2);
  uint64_t v56 = -1LL;
  char v29 = dispatch thunk of static BinaryInteger.isSigned.getter(a2, v3);
  uint64_t v30 = dispatch thunk of BinaryInteger.bitWidth.getter(a2, v3);
  if ((v29 & 1) == 0)
  {
    if (v30 >= 65) {
      goto LABEL_10;
    }
    uint64_t v46 = v54;
    dispatch thunk of BinaryInteger._lowWord.getter(a2, v3);
    a1  = v50;
    (*(void (**)(char *, uint64_t))(v55 + 8))(v46, a2);
LABEL_15:
    uint64_t v47 = dispatch thunk of BinaryInteger._lowWord.getter(a2, v3);
    uint64_t v48 = *(void (**)(char *, uint64_t))(v55 + 8);
    v48(v17, a2);
    v48(a1, a2);
    return v47;
  }

  if (v30 <= 64)
  {
    uint64_t v31 = v3;
    uint64_t v32 = (void (*)(char *, char *, uint64_t))v19;
    uint64_t v33 = v53;
    uint64_t v34 = AssociatedTypeWitness;
    uint64_t v35 = swift_getAssociatedConformanceWitness( v53,  a2,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    uint64_t v36 = v15;
    uint64_t v37 = v52;
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_100339A38, 256LL, v34, v35);
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v37, a2, v33);
    uint64_t v38 = v54;
    LOBYTE(v34)  = dispatch thunk of static Comparable.> infix(_:_:)( v54,  v36,  a2,  *(void *)(*(void *)(v3 + 32) + 8LL));
    uint64_t v39 = *(void (**)(char *, uint64_t))(v55 + 8);
    v39(v36, a2);
    unint64_t v40 = v56;
    uint64_t v41 = v49;
    v32(v49, v38, a2);
    a1  = v50;
    if ((v34 & 1) != 0)
    {
      unint64_t v42 = dispatch thunk of BinaryInteger._lowWord.getter(a2, v31);
      v39(v41, a2);
      uint64_t v3 = v31;
      if (v40 < v42) {
        goto LABEL_11;
      }
    }

    else
    {
      v39(v41, a2);
      uint64_t v3 = v31;
    }

    goto LABEL_14;
  }

unint64_t sub_100159F30()
{
  unint64_t result = qword_1004095F0;
  if (!qword_1004095F0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_1004095F0);
  }

  return result;
}

unint64_t static NANTimeUnit.* infix(_:_:)(unint64_t result, unint64_t a2)
{
  if (is_mul_ok(result, a2)) {
    result *= a2;
  }
  else {
    __break(1u);
  }
  return result;
}

unint64_t static NANTimeUnit./ infix(_:_:)(unint64_t result, unint64_t a2)
{
  if (a2) {
    result /= a2;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t static NANTimeUnit.+ infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = __CFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v2) {
    __break(1u);
  }
  return result;
}

void *NANTimeUnit.zero.unsafeMutableAddressor()
{
  return &static NANTimeUnit.zero;
}

unint64_t static NANTimeUnit.- infix(_:_:)(unint64_t a1, unint64_t a2)
{
  BOOL v2 = a1 >= a2;
  unint64_t result = a1 - a2;
  if (!v2) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100159FC8(unsigned __int8 a1)
{
  if (!a1) {
    return 0LL;
  }
  if ((((a1 + 6) >> 8) & 1) != 0)
  {
    __break(1u);
  }

  else
  {
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  __break(1u);
  return result;
}

BOOL static NANTimeUnit.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a1 < a2;
}

CoreP2P::NANTimeSynchronizationFunction __swiftcall NANTimeSynchronizationFunction.init(lowTSF:highTSF:)( Swift::UInt32 lowTSF, Swift::UInt32 highTSF)
{
  return (CoreP2P::NANTimeSynchronizationFunction)(lowTSF | (*(void *)&highTSF << 32));
}

BOOL static RSSI.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

unint64_t NANTimeUnit.microseconds.getter(unint64_t result)
{
  if (result >> 54) {
    __break(1u);
  }
  else {
    result <<= 10;
  }
  return result;
}

unint64_t NANTimeUnit.duration.getter@<X0>(unint64_t result@<X0>, void *a2@<X8>)
{
  if (result >> 54)
  {
    __break(1u);
  }

  else if (((result << 10) & 0x8000000000000000LL) == 0)
  {
    *a2  = result << 10;
    uint64_t v3 = enum case for DispatchTimeInterval.microseconds(_:);
    uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
    return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 104LL))(a2, v3, v4);
  }

  __break(1u);
  return result;
}

void NANTimeUnit.description.getter(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (void *)((char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  v11[1]  = a1;
  _OWORD v11[2] = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  void v11[3] = v6;
  v7._uint64_t countAndFlagsBits = 0x282073555420LL;
  v7._object  = (void *)0xE600000000000000LL;
  String.append(_:)(v7);
  if (a1 >> 54)
  {
    __break(1u);
  }

  else if (((a1 << 10) & 0x8000000000000000LL) == 0)
  {
    *uint64_t v5 = a1 << 10;
    (*(void (**)(void *, void, uint64_t))(v3 + 104))( v5,  enum case for DispatchTimeInterval.microseconds(_:),  v2);
    v8._uint64_t countAndFlagsBits = DispatchTimeInterval.description.getter();
    object  = v8._object;
    String.append(_:)(v8);
    swift_bridgeObjectRelease(object);
    (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
    v10._uint64_t countAndFlagsBits = 41LL;
    v10._object  = (void *)0xE100000000000000LL;
    String.append(_:)(v10);
    return;
  }

  __break(1u);
}

uint64_t NANTimeUnit.customMirror.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v6);
  Swift::String v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1;
  uint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t v9 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for Mirror.AncestorRepresentation.generated(_:),  v2);
  uint64_t v10 = sub_100002274(&qword_100405DC0);
  unint64_t v11 = sub_10005CFF4();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)( &v14,  &v13,  v8,  v5,  &type metadata for NANTimeUnit,  v10,  v11);
}

void *NANTimeUnit.discoveryWindowInterval.unsafeMutableAddressor()
{
  return &static NANTimeUnit.discoveryWindowInterval;
}

uint64_t static IEEE80211InformationElement.RSNCapability.Capabilities.peerKeyEnabled.getter()
{
  return 512LL;
}

void *NANTimeUnit.defaultDiscoveryBeaconPeriod.unsafeMutableAddressor()
{
  return &static NANTimeUnit.defaultDiscoveryBeaconPeriod;
}

uint64_t static NANTimeUnit.defaultDiscoveryBeaconPeriod.getter()
{
  return 100LL;
}

void *NANTimeUnit.initialDiscoveryBeaconPeriod.unsafeMutableAddressor()
{
  return &static NANTimeUnit.initialDiscoveryBeaconPeriod;
}

uint64_t static NANTimeUnit.initialDiscoveryBeaconPeriod.getter()
{
  return 60LL;
}

void NANTimeUnit.hash(into:)(int a1, Swift::UInt64 a2)
{
}

void sub_10015A3B0()
{
}

void sub_10015A3DC()
{
}

uint64_t sub_10015A3E4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *v1;
  uint64_t v14 = _swiftEmptyArrayStorage;
  uint64_t v10 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))( v6,  enum case for Mirror.AncestorRepresentation.generated(_:),  v3);
  uint64_t v11 = sub_100002274(&qword_100405DC0);
  unint64_t v12 = sub_10005CFF4();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(&v15, &v14, v9, v6, a1, v11, v12);
}

BOOL sub_10015A520(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL sub_10015A534(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL sub_10015A548(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL sub_10015A55C(void *a1, void *a2)
{
  return *a2 < *a1;
}

void *NANTimeUnit.SchedulePeriod.maximumAvailabilityPeriod.unsafeMutableAddressor()
{
  return &static NANTimeUnit.SchedulePeriod.maximumAvailabilityPeriod;
}

uint64_t static NANTimeUnit.SchedulePeriod.maximumAvailabilityPeriod.getter()
{
  return 7LL;
}

CoreP2P::NANTimeUnit::SchedulePeriod_optional __swiftcall NANTimeUnit.SchedulePeriod.init(duration:)( CoreP2P::NANTimeUnit duration)
{
  if ((uint64_t)duration.rawValue > 1023)
  {
    if ((uint64_t)duration.rawValue > 4095)
    {
      if (duration.rawValue == 4096) {
        return (CoreP2P::NANTimeUnit::SchedulePeriod_optional)6;
      }
      if (duration.rawValue == 0x2000) {
        return (CoreP2P::NANTimeUnit::SchedulePeriod_optional)7;
      }
    }

    else
    {
      if (duration.rawValue == 1024) {
        return (CoreP2P::NANTimeUnit::SchedulePeriod_optional)4;
      }
      if (duration.rawValue == 2048) {
        return (CoreP2P::NANTimeUnit::SchedulePeriod_optional)5;
      }
    }

    return 0;
  }

  if (duration.rawValue == 128) {
    return (CoreP2P::NANTimeUnit::SchedulePeriod_optional)1;
  }
  if (duration.rawValue != 256)
  {
    if (duration.rawValue == 512) {
      return (CoreP2P::NANTimeUnit::SchedulePeriod_optional)3;
    }
    return 0;
  }

  return (CoreP2P::NANTimeUnit::SchedulePeriod_optional)2;
}

uint64_t sub_10015A610@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO0F9AlgorithmO8rawValueAISgs5UInt8V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

unint64_t NANTimeSynchronizationFunction.discoveryWindow.getter(unint64_t a1)
{
  BOOL v1 = a1 >= (a1 & 0x7FFFF);
  unint64_t result = a1 - (a1 & 0x7FFFF);
  if (!v1) {
    __break(1u);
  }
  return result;
}

unint64_t NANTimeSynchronizationFunction.discoveryWindow0.getter(unint64_t a1)
{
  BOOL v1 = a1 >= (a1 & 0x7FFFFF);
  unint64_t result = a1 - (a1 & 0x7FFFFF);
  if (!v1) {
    __break(1u);
  }
  return result;
}

uint64_t NANTimeSynchronizationFunction.discoveryWindowCount.getter(unint64_t a1)
{
  return (a1 >> 19) & 0xF;
}

uint64_t NANTimeSynchronizationFunction.description.getter(uint64_t a1)
{
  uint64_t v2 = sub_100002274((uint64_t *)&unk_100405140);
  uint64_t v3 = swift_allocObject(v2, 72LL, 7LL);
  *(_OWORD *)(v3 + 16)  = xmmword_100339900;
  *(void *)(v3 + 56)  = &type metadata for UInt64;
  *(void *)(v3 + 64)  = &protocol witness table for UInt64;
  *(void *)(v3 + 32)  = a1;
  return String.init(format:_:)(2020371493LL, 0xE400000000000000LL, v3);
}

uint64_t sub_10015A6D0()
{
  return 0x65756C6176LL;
}

uint64_t sub_10015A6E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x65756C6176LL && a2 == 0xE500000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE500000000000000LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6176LL, 0xE500000000000000LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3  = v8 & 1;
  return result;
}

uint64_t sub_10015A770(uint64_t a1)
{
  unint64_t v2 = sub_10015ACE0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015A798(uint64_t a1)
{
  unint64_t v2 = sub_10015ACE0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANTimeSynchronizationFunction.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_1004095F8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100021104(a1, v8);
  unint64_t v10 = sub_10015ACE0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANTimeSynchronizationFunction.CodingKeys,  &type metadata for NANTimeSynchronizationFunction.CodingKeys,  v10,  v8,  v9);
  KeyedEncodingContainer.encode(_:forKey:)(a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int _s7CoreP2P30NANTimeSynchronizationFunctionV9hashValueSivg_0(Swift::UInt64 a1)
{
  return Hasher._finalize()();
}

void *NANTimeSynchronizationFunction.init(from:)(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_100409608);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = sub_100021104(a1, v7);
  unint64_t v10 = sub_10015ACE0();
  uint64_t v11 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANTimeSynchronizationFunction.CodingKeys,  &type metadata for NANTimeSynchronizationFunction.CodingKeys,  v10,  v7,  v8);
  if (!v1)
  {
    uint64_t v9 = (void *)KeyedDecodingContainer.decode(_:forKey:)(v11, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  sub_100002AC4(a1);
  return v9;
}

Swift::Int sub_10015A9E8()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_10015AA2C(uint64_t a1)
{
  Swift::UInt64 v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10015AA6C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_100002274((uint64_t *)&unk_100405140);
  uint64_t v3 = swift_allocObject(v2, 72LL, 7LL);
  *(_OWORD *)(v3 + 16)  = xmmword_100339900;
  *(void *)(v3 + 56)  = &type metadata for UInt64;
  *(void *)(v3 + 64)  = &protocol witness table for UInt64;
  *(void *)(v3 + 32)  = v1;
  return String.init(format:_:)(2020371493LL, 0xE400000000000000LL, v3);
}

uint64_t sub_10015AAD4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100002274(&qword_100409608);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100021104(a1, v9);
  unint64_t v11 = sub_10015ACE0();
  uint64_t v12 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANTimeSynchronizationFunction.CodingKeys,  &type metadata for NANTimeSynchronizationFunction.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100002AC4(a1);
  }
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_100002AC4(a1);
  *a2  = v13;
  return result;
}

uint64_t sub_10015ABE4(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_1004095F8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100021104(a1, v8);
  unint64_t v10 = sub_10015ACE0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANTimeSynchronizationFunction.CodingKeys,  &type metadata for NANTimeSynchronizationFunction.CodingKeys,  v10,  v8,  v9);
  KeyedEncodingContainer.encode(_:forKey:)(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO0F9AlgorithmO8rawValueAISgs5UInt8V_tcfC_0( uint64_t result)
{
  if ((result & 0xF8) != 0) {
    return 8LL;
  }
  else {
    return result;
  }
}

unint64_t sub_10015ACE0()
{
  unint64_t result = qword_100409600;
  if (!qword_100409600)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034AC64, &type metadata for NANTimeSynchronizationFunction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409600);
  }

  return result;
}

unint64_t sub_10015AD28()
{
  unint64_t result = qword_100409610;
  if (!qword_100409610)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NANTimeUnit, &type metadata for NANTimeUnit);
    atomic_store(result, (unint64_t *)&qword_100409610);
  }

  return result;
}

void *sub_10015AD6C()
{
  return &protocol witness table for UInt64;
}

unint64_t sub_10015AD7C()
{
  unint64_t result = qword_100409618;
  if (!qword_100409618)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANTimeUnit.SchedulePeriod,  &type metadata for NANTimeUnit.SchedulePeriod);
    atomic_store(result, (unint64_t *)&qword_100409618);
  }

  return result;
}

unint64_t sub_10015ADC4()
{
  unint64_t result = qword_100409620;
  if (!qword_100409620)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANTimeSynchronizationFunction,  &type metadata for NANTimeSynchronizationFunction);
    atomic_store(result, (unint64_t *)&qword_100409620);
  }

  return result;
}

ValueMetadata *type metadata accessor for NANTimeUnit()
{
  return &type metadata for NANTimeUnit;
}

uint64_t storeEnumTagSinglePayload for NANTimeUnit.SchedulePeriod( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_10015AE64 + 4 * byte_10034A815[v4]))();
  }
  *a1  = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10015AE98 + 4 * byte_10034A810[v4]))();
}

uint64_t sub_10015AE98(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10015AEA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x10015AEA8LL);
  }
  return result;
}

uint64_t sub_10015AEB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x10015AEBCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_10015AEC0(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10015AEC8(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANTimeUnit.SchedulePeriod()
{
  return &type metadata for NANTimeUnit.SchedulePeriod;
}

ValueMetadata *type metadata accessor for NANTimeSynchronizationFunction()
{
  return &type metadata for NANTimeSynchronizationFunction;
}

uint64_t storeEnumTagSinglePayload for NANTimeSynchronizationFunction.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10015AF34 + 4 * byte_10034A81A[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10015AF54 + 4 * byte_10034A81F[v4]))();
  }
}

_BYTE *sub_10015AF34(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10015AF54(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10015AF5C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10015AF64(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10015AF6C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10015AF74(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NANTimeSynchronizationFunction.CodingKeys()
{
  return &type metadata for NANTimeSynchronizationFunction.CodingKeys;
}

unint64_t sub_10015AF94()
{
  unint64_t result = qword_100409628;
  if (!qword_100409628)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034AC3C, &type metadata for NANTimeSynchronizationFunction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409628);
  }

  return result;
}

unint64_t sub_10015AFDC()
{
  unint64_t result = qword_100409630;
  if (!qword_100409630)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034ABAC, &type metadata for NANTimeSynchronizationFunction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409630);
  }

  return result;
}

unint64_t sub_10015B024()
{
  unint64_t result = qword_100409638;
  if (!qword_100409638)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034ABD4, &type metadata for NANTimeSynchronizationFunction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409638);
  }

  return result;
}

uint64_t static IEEE80211Frame.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if (_s7CoreP2P14IEEE80211FrameV6HeaderV23__derived_struct_equalsySbAE_AEtFZ_0( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)a2,  *(void *)(a2 + 8),  *(void *)(a2 + 16)))
  {
    sub_100164CB8((__int128 *)(a1 + 24), (uint64_t)v7);
    sub_100164CB8((__int128 *)(a2 + 24), (uint64_t)&v6);
    sub_100164CB8(v7, (uint64_t)v8);
    uint64_t v4 = (char *)&loc_10015B0F8 + 4 * byte_10034ACC0[sub_10010EDB0((uint64_t)v8)];
    __asm { BR              X10 }
  }

  return 0LL;
}

uint64_t IEEE80211Frame.FrameType.ManagementType.rawValue.getter(char a1)
{
  return byte_10034C70A[a1];
}

BOOL sub_10015B22C(char *a1, char *a2)
{
  return byte_10034C70A[*a1] == byte_10034C70A[*a2];
}

uint64_t sub_10015B250@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = _s7CoreP2P14IEEE80211FrameV0D4TypeO010ManagementE0O8rawValueAGSgs5UInt8V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_10015B278(_BYTE *a1@<X8>)
{
  *a1  = byte_10034C70A[*v1];
}

Swift::Int sub_10015B290()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(byte_10034C70A[v1]);
  return Hasher._finalize()();
}

void sub_10015B2DC()
{
}

Swift::Int sub_10015B310(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(byte_10034C70A[v2]);
  return Hasher._finalize()();
}

uint64_t IEEE80211Frame.Header.FrameControl.version.getter@<X0>(__int16 a1@<W0>, unint64_t a2@<X8>)
{
  return sub_100071694(0LL, 2LL, a1, a2);
}

unint64_t IEEE80211Frame.Header.FrameControl.frameType.getter(__int16 a1)
{
  unint64_t result = sub_100071514(2uLL, 2LL, a1);
  if (result > 3u)
  {
    unint64_t v2 = sub_1000033FC();
    uint64_t v3 = swift_allocError(&type metadata for WiFiError, v2, 0LL, 0LL);
    *(_OWORD *)uint64_t v4 = xmmword_100337020;
    *(_BYTE *)(v4 + 16)  = 2;
    uint64_t v5 = v3;
    swift_willThrow(v3);
    unint64_t result = swift_unexpectedError(v5, "CoreP2P/IEEE80211Frame.swift", 28LL, 1LL);
    __break(1u);
  }

  return result;
}

uint64_t IEEE80211Frame.Header.FrameControl.managementSubtype.getter(__int16 a1)
{
  int v2 = sub_100071514(2uLL, 2LL, a1);
  if (v2)
  {
    unint64_t v5 = sub_1000033FC();
    uint64_t v6 = swift_allocError(&type metadata for WiFiError, v5, 0LL, 0LL);
    *(_OWORD *)uint64_t v7 = xmmword_100337020;
    *(_BYTE *)(v7 + 16)  = 2;
    uint64_t v8 = v6;
    swift_willThrow(v6);
    uint64_t result = swift_unexpectedError(v8, "CoreP2P/IEEE80211Frame.swift", 28LL, 1LL, 52LL);
    __break(1u);
  }

  else
  {
    unsigned __int8 v4 = sub_100071514(4uLL, 4LL, a1);
    uint64_t result = _s7CoreP2P14IEEE80211FrameV0D4TypeO010ManagementE0O8rawValueAGSgs5UInt8V_tcfC_0(v4);
  }

  return result;
}

void *IEEE80211Frame.Header.FrameControl.toDS.unsafeMutableAddressor()
{
  return &static IEEE80211Frame.Header.FrameControl.toDS;
}

uint64_t static IEEE80211InformationElement.RSNCapability.Capabilities.jointMultiBandRSNAuthentication.getter()
{
  return 256LL;
}

void *IEEE80211Frame.Header.FrameControl.fromDS.unsafeMutableAddressor()
{
  return &static IEEE80211Frame.Header.FrameControl.fromDS;
}

void *IEEE80211Frame.Header.FrameControl.moreFragments.unsafeMutableAddressor()
{
  return &static IEEE80211Frame.Header.FrameControl.moreFragments;
}

void *IEEE80211Frame.Header.FrameControl.retry.unsafeMutableAddressor()
{
  return &static IEEE80211Frame.Header.FrameControl.retry;
}

uint64_t static IEEE80211Frame.Header.FrameControl.retry.getter()
{
  return 2048LL;
}

void *IEEE80211Frame.Header.FrameControl.powerManagement.unsafeMutableAddressor()
{
  return &static IEEE80211Frame.Header.FrameControl.powerManagement;
}

uint64_t static IEEE80211Frame.Header.FrameControl.powerManagement.getter()
{
  return 4096LL;
}

void *IEEE80211Frame.Header.FrameControl.moreData.unsafeMutableAddressor()
{
  return &static IEEE80211Frame.Header.FrameControl.moreData;
}

uint64_t static IEEE80211InformationElement.RSNCapability.Capabilities.extendedKeyIDForIndviduallyAddressedFrames.getter()
{
  return 0x2000LL;
}

void *IEEE80211Frame.Header.FrameControl.protectedFrame.unsafeMutableAddressor()
{
  return &static IEEE80211Frame.Header.FrameControl.protectedFrame;
}

uint64_t static IEEE80211InformationElement.RSNCapability.Capabilities.ocvc.getter()
{
  return 0x4000LL;
}

void *IEEE80211Frame.Header.FrameControl.htc.unsafeMutableAddressor()
{
  return &static IEEE80211Frame.Header.FrameControl.htc;
}

uint64_t static IEEE80211Frame.Header.FrameControl.htc.getter()
{
  return 0x8000LL;
}

uint64_t sub_10015B5DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100165D48();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10015B638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100165D48();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t IEEE80211Frame.Header.receiverAddress.getter(unint64_t a1, unsigned __int16 a2)
{
  return HIDWORD(a1) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)a2 << 32);
}

uint64_t IEEE80211Frame.Header.receiverAddress.setter(uint64_t result)
{
  *(_WORD *)(v1 + 4)  = result;
  *(_BYTE *)(v1 + 6)  = BYTE2(result);
  *(_BYTE *)(v1 + 7)  = BYTE3(result);
  *(_BYTE *)(v1 + 8)  = BYTE4(result);
  *(_BYTE *)(v1 + 9)  = BYTE5(result);
  return result;
}

uint64_t IEEE80211Frame.Header.transmitterAddress.setter(uint64_t result)
{
  *(_WORD *)(v1 + 10)  = result;
  *(_BYTE *)(v1 + 12)  = BYTE2(result);
  *(_BYTE *)(v1 + 13)  = BYTE3(result);
  *(_BYTE *)(v1 + 14)  = BYTE4(result);
  *(_BYTE *)(v1 + 15)  = BYTE5(result);
  return result;
}

uint64_t IEEE80211Frame.Header.destinationAddress.setter(uint64_t result)
{
  *(_WORD *)(v1 + 16)  = result;
  *(_BYTE *)(v1 + 18)  = BYTE2(result);
  *(_BYTE *)(v1 + 19)  = BYTE3(result);
  *(_BYTE *)(v1 + 20)  = BYTE4(result);
  *(_BYTE *)(v1 + 21)  = BYTE5(result);
  return result;
}

unint64_t IEEE80211Frame.Header.sequenceControl.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return HIWORD(a3);
}

uint64_t IEEE80211Frame.Header.sequenceControl.setter(uint64_t result)
{
  *(_WORD *)(v1 + 22)  = result;
  return result;
}

void IEEE80211Frame.Header.hash(into:)( int a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  Swift::UInt8 v4 = a4;
  Swift::UInt8 v5 = a3;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v8 = a2 >> 40;
  unint64_t v9 = HIWORD(a2);
  unint64_t v10 = HIBYTE(a2);
  unint64_t v11 = a3 >> 8;
  unint64_t v12 = a3 >> 16;
  *(void *)uint64_t v13 = a3 >> 24;
  *(void *)uint64_t v14 = HIDWORD(a3);
  *(void *)uint64_t v15 = a3 >> 40;
  *(void *)uint64_t v16 = HIWORD(a3);
  *(void *)uint64_t v17 = HIBYTE(a3);
  *(void *)uint64_t v18 = a4 >> 8;
  *(void *)uint64_t v19 = a4 >> 16;
  *(void *)uint64_t v20 = a4 >> 24;
  *(void *)uint64_t v21 = HIDWORD(a4);
  *(void *)uint64_t v22 = a4 >> 40;
  *(void *)uint64_t v23 = HIWORD(a4);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v18[0]);
  Hasher._combine(_:)(v19[0]);
  Hasher._combine(_:)(v20[0]);
  Hasher._combine(_:)(v21[0]);
  Hasher._combine(_:)(v22[0]);
  Hasher._combine(_:)(v23[0]);
}

uint64_t sub_10015B888(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10015B8C4 + 4 * byte_10034ACC4[a1]))( 0x6E6F43656D617266LL,  0xEC0000006C6F7274LL);
}

uint64_t sub_10015B8C4()
{
  return 0x6E6F697461727564LL;
}

uint64_t sub_10015B8DC()
{
  return 0x7265766965636572LL;
}

unint64_t sub_10015B900()
{
  return 0xD000000000000012LL;
}

uint64_t sub_10015B928()
{
  return 0x65636E6575716573LL;
}

uint64_t sub_10015B94C()
{
  return sub_10015B888(*v0);
}

uint64_t sub_10015B954@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100169E54(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_10015B978(uint64_t a1)
{
  unint64_t v2 = sub_100163404();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015B9A0(uint64_t a1)
{
  unint64_t v2 = sub_100163404();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211Frame.Header.encode(to:)(void *a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v21 = a4;
  uint64_t v8 = sub_100002274(&qword_100409640);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100021104(a1, v12);
  unint64_t v14 = sub_100163404();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IEEE80211Frame.Header.CodingKeys,  &type metadata for IEEE80211Frame.Header.CodingKeys,  v14,  v12,  v13);
  __int16 v22 = a2;
  char v26 = 0;
  unint64_t v15 = sub_100163448();
  KeyedEncodingContainer.encode<A>(_:forKey:)( &v22,  &v26,  v8,  &type metadata for IEEE80211Frame.Header.FrameControl,  v15);
  if (v4) {
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  uint64_t v17 = v9;
  unint64_t v18 = v21;
  LOBYTE(v22)  = 1;
  KeyedEncodingContainer.encode(_:forKey:)(a2 >> 16, &v22, v8);
  LOBYTE(v22)  = BYTE4(a2);
  HIBYTE(v22)  = BYTE5(a2);
  char v23 = BYTE6(a2);
  char v24 = HIBYTE(a2);
  __int16 v25 = a3;
  char v26 = 2;
  unint64_t v19 = sub_1000286C4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v26, v8, &type metadata for WiFiAddress, v19);
  LOBYTE(v22)  = BYTE2(a3);
  HIBYTE(v22)  = BYTE3(a3);
  char v23 = BYTE4(a3);
  char v24 = BYTE5(a3);
  LOBYTE(v25)  = BYTE6(a3);
  HIBYTE(v25)  = HIBYTE(a3);
  char v26 = 3;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v26, v8, &type metadata for WiFiAddress, v19);
  __int16 v22 = v18;
  char v23 = BYTE2(v18);
  char v24 = BYTE3(v18);
  LOBYTE(v25)  = BYTE4(v18);
  HIBYTE(v25)  = BYTE5(v18);
  char v26 = 4;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v26, v8, &type metadata for WiFiAddress, v19);
  LOBYTE(v22)  = 5;
  KeyedEncodingContainer.encode(_:forKey:)(HIWORD(v18), &v22, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v11, v8);
}

Swift::Int IEEE80211Frame.Header.hashValue.getter( unint64_t a1, unint64_t a2, unint64_t a3)
{
  Swift::UInt8 v3 = a3;
  Swift::UInt8 v4 = a2;
  Swift::UInt16 v5 = a1;
  unint64_t v6 = a1 >> 16;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v8 = a1 >> 40;
  unint64_t v9 = HIWORD(a1);
  unint64_t v10 = HIBYTE(a1);
  unint64_t v11 = a2 >> 8;
  *(void *)uint64_t v13 = a2 >> 16;
  *(void *)unint64_t v14 = a2 >> 24;
  *(void *)unint64_t v15 = HIDWORD(a2);
  *(void *)uint64_t v16 = a2 >> 40;
  *(void *)uint64_t v17 = HIWORD(a2);
  *(void *)unint64_t v18 = HIBYTE(a2);
  *(void *)unint64_t v19 = a3 >> 8;
  *(void *)uint64_t v20 = a3 >> 16;
  *(void *)unint64_t v21 = a3 >> 24;
  *(void *)__int16 v22 = HIDWORD(a3);
  *(void *)char v23 = a3 >> 40;
  *(void *)char v24 = HIWORD(a3);
  Hasher.init(_seed:)(v25, 0LL);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v18[0]);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v19[0]);
  Hasher._combine(_:)(v20[0]);
  Hasher._combine(_:)(v21[0]);
  Hasher._combine(_:)(v22[0]);
  Hasher._combine(_:)(v23[0]);
  Hasher._combine(_:)(v24[0]);
  return Hasher._finalize()();
}

unint64_t IEEE80211Frame.Header.init(from:)(void *a1)
{
  unint64_t result = sub_10016428C(a1);
  if (v1) {
    return v3;
  }
  return result;
}

unint64_t sub_10015BE44@<X0>(void *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = sub_10016428C(a1);
  if (!v2)
  {
    *a2  = result;
    a2[1]  = v5;
    a2[2]  = v6;
  }

  return result;
}

uint64_t sub_10015BF04(void *a1)
{
  return IEEE80211Frame.Header.encode(to:)(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16));
}

Swift::Int sub_10015BF20()
{
  return IEEE80211Frame.Header.hashValue.getter(*v0, v0[1], v0[2]);
}

void sub_10015BF2C(int a1)
{
}

Swift::Int sub_10015BF38(uint64_t a1)
{
  unint64_t v3 = *v1;
  unint64_t v2 = v1[1];
  unint64_t v4 = v1[2];
  Hasher.init(_seed:)(v6, a1);
  IEEE80211Frame.Header.hash(into:)((int)v6, v3, v2, v4);
  return Hasher._finalize()();
}

BOOL sub_10015BF8C(uint64_t a1, uint64_t a2)
{
  return _s7CoreP2P14IEEE80211FrameV6HeaderV23__derived_struct_equalsySbAE_AEtFZ_0( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)a2,  *(void *)(a2 + 8),  *(void *)(a2 + 16));
}

void IEEE80211Frame.Contents.hash(into:)()
{
  uint64_t v1 = (char *)sub_10015C00C + 4 * byte_10034ACCA[sub_10010EDB0((uint64_t)v3)];
  __asm { BR              X10 }

uint64_t sub_10015C00C()
{
  return sub_1001645B0( v0,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100057AC0);
}

void static IEEE80211Frame.Contents.__derived_enum_equals(_:_:)(__int128 *a1)
{
  uint64_t v1 = (char *)sub_10015C0DC + 4 * byte_10034ACCE[sub_10010EDB0((uint64_t)v2)];
  __asm { BR              X10 }

uint64_t sub_10015C0DC()
{
  if (sub_10010EDB0((uint64_t)v6))
  {
    char v4 = 0;
  }

  else
  {
    sub_100164CB8(v6, (uint64_t)&v7);
    sub_1001645B0( v1,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100058250);
    sub_1001645B0( (uint64_t)v0,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100058250);
    _s7CoreP2P14IEEE80211FrameV10ManagementO21__derived_enum_equalsySbAE_AEtFZ_0((__int128 *)(v2 - 216));
    char v4 = v3;
    sub_1001645B0( (uint64_t)v0,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100057AC0);
    sub_1001645B0( v1,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100057AC0);
  }

  return v4 & 1;
}

void IEEE80211Frame.Contents.hashValue.getter()
{
  uint64_t v1 = (char *)sub_10015C250 + 4 * byte_10034ACD2[sub_10010EDB0((uint64_t)v4)];
  __asm { BR              X10 }

Swift::Int sub_10015C250()
{
  return Hasher._finalize()();
}

void sub_10015C2E4()
{
  uint64_t v1 = (char *)sub_10015C33C + 4 * byte_10034ACD6[sub_10010EDB0((uint64_t)v4)];
  __asm { BR              X10 }

Swift::Int sub_10015C33C()
{
  return Hasher._finalize()();
}

void sub_10015C3CC()
{
  uint64_t v1 = (char *)sub_10015C420 + 4 * byte_10034ACDA[sub_10010EDB0((uint64_t)v3)];
  __asm { BR              X10 }

uint64_t sub_10015C420()
{
  return sub_1001645B0( (uint64_t)v4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100057AC0);
}

void sub_10015C4A4(uint64_t a1)
{
  uint64_t v3 = (char *)sub_10015C504 + 4 * byte_10034ACDE[sub_10010EDB0((uint64_t)v6)];
  __asm { BR              X10 }

Swift::Int sub_10015C504()
{
  return Hasher._finalize()();
}

void sub_10015C598(__int128 *a1, __int128 *a2)
{
  uint64_t v3 = (char *)sub_10015C5F4 + 4 * byte_10034ACE2[sub_10010EDB0((uint64_t)v6)];
  __asm { BR              X10 }

uint64_t sub_10015C5F4()
{
  if (sub_10010EDB0((uint64_t)v4))
  {
    char v1 = 0;
  }

  else
  {
    sub_100164CB8(v4, (uint64_t)&v6);
    sub_1001645B0( (uint64_t)v7,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100058250);
    sub_1001645B0( (uint64_t)v8,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100058250);
    static IEEE80211Frame.Management.__derived_enum_equals(_:_:)(v5);
    char v1 = v2;
    sub_1001645B0( (uint64_t)v8,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100057AC0);
    sub_1001645B0( (uint64_t)v7,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100057AC0);
  }

  return v1 & 1;
}

uint64_t IEEE80211Frame.header.getter()
{
  return *(void *)v0;
}

uint64_t IEEE80211Frame.header.setter(uint64_t result, uint64_t a2, uint64_t a3)
{
  *uint64_t v3 = result;
  v3[1]  = a2;
  void v3[2] = a3;
  return result;
}

uint64_t IEEE80211Frame.contents.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100164620((uint64_t *)(v1 + 24), a1);
}

uint64_t IEEE80211Frame.contents.setter(uint64_t a1)
{
  return sub_100164654(a1, v1 + 24);
}

uint64_t IEEE80211InformationElement.VeryHighThroughputCapability.txHighLGIRate.getter( uint64_t a1, unsigned int a2)
{
  return HIWORD(a2);
}

void IEEE80211Frame.Management.Beacon.hash(into:)(int a1, Swift::UInt64 a2, unsigned int a3, uint64_t a4)
{
  Swift::UInt16 v5 = a3;
  unsigned int v6 = HIWORD(a3);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Swift::UInt v7 = *(void *)(a4 + 16);
  Hasher._combine(_:)(v7);
  if (v7)
  {
    uint64_t v8 = a4 + 32;
    swift_bridgeObjectRetain(a4);
    do
    {
      sub_1000899E8(v8, (uint64_t)v9);
      sub_100089A24( (uint64_t)v9,  (void (*)(void, void, void, void, void, void, void))sub_100058460);
      IEEE80211InformationElement.hash(into:)();
      sub_100089A24( (uint64_t)v9,  (void (*)(void, void, void, void, void, void, void))sub_100057CD0);
      v8 += 56LL;
      --v7;
    }

    while (v7);
    swift_bridgeObjectRelease(a4);
  }

uint64_t static IEEE80211Frame.Management.Beacon.__derived_struct_equals(_:_:)( uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  else {
    return 0LL;
  }
}

uint64_t sub_10015C8C8()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10015C8FC + 4 * byte_10034ACE6[*v0]))( 0x6D617473656D6974LL,  0xE900000000000070LL);
}

uint64_t sub_10015C8FC()
{
  return 0x6E496E6F63616562LL;
}

uint64_t sub_10015C920()
{
  return 0x696C696261706163LL;
}

uint64_t sub_10015C940()
{
  return 0x73746E656D656C65LL;
}

uint64_t sub_10015C958@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10016A124(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_10015C97C(uint64_t a1)
{
  unint64_t v2 = sub_100164688();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015C9A4(uint64_t a1)
{
  unint64_t v2 = sub_100164688();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211Frame.Management.Beacon.encode(to:)(void *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned int v21 = a3;
  uint64_t v8 = sub_100002274(&qword_100409658);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100021104(a1, v12);
  unint64_t v14 = sub_100164688();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IEEE80211Frame.Management.Beacon.CodingKeys,  &type metadata for IEEE80211Frame.Management.Beacon.CodingKeys,  v14,  v12,  v13);
  v24[1]  = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2);
  if (!v4)
  {
    v24[0]  = 1;
    unsigned int v15 = v21;
    KeyedEncodingContainer.encode(_:forKey:)(v21, v24, v8);
    char v23 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(HIWORD(v15), &v23, v8);
    uint64_t v20 = a4;
    char v22 = 3;
    uint64_t v16 = sub_100002274(&qword_100409668);
    uint64_t v17 = sub_10016B068( &qword_100409670,  (void (*)(void))sub_1001646CC,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v22, v8, v16, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int IEEE80211Frame.Management.Beacon.hashValue.getter(Swift::UInt64 a1, unsigned int a2, uint64_t a3)
{
  Swift::UInt16 v4 = a2;
  unsigned int v6 = HIWORD(a2);
  Hasher.init(_seed:)(v10, 0LL);
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v6);
  Swift::UInt v7 = *(void *)(a3 + 16);
  Hasher._combine(_:)(v7);
  if (v7)
  {
    uint64_t v8 = a3 + 32;
    swift_bridgeObjectRetain(a3);
    do
    {
      sub_1000899E8(v8, (uint64_t)v11);
      sub_100089A24( (uint64_t)v11,  (void (*)(void, void, void, void, void, void, void))sub_100058460);
      IEEE80211InformationElement.hash(into:)();
      sub_100089A24( (uint64_t)v11,  (void (*)(void, void, void, void, void, void, void))sub_100057CD0);
      v8 += 56LL;
      --v7;
    }

    while (v7);
    swift_bridgeObjectRelease(a3);
  }

  return Hasher._finalize()();
}

uint64_t IEEE80211Frame.Management.Beacon.init(from:)(void *a1)
{
  uint64_t result = sub_1001640A4(a1);
  if (v1) {
    return v3;
  }
  return result;
}

Swift::Int sub_10015CC8C()
{
  return IEEE80211Frame.Management.Beacon.hashValue.getter(*(void *)v0, *(_DWORD *)(v0 + 8), *(void *)(v0 + 16));
}

void sub_10015CC9C(int a1)
{
}

Swift::Int sub_10015CCAC(uint64_t a1)
{
  Swift::UInt64 v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 16);
  Swift::UInt16 v4 = *(_WORD *)(v1 + 8);
  Swift::UInt16 v5 = *(_WORD *)(v1 + 10);
  Hasher.init(_seed:)(v9, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Swift::UInt v6 = *(void *)(v3 + 16);
  Hasher._combine(_:)(v6);
  if (v6)
  {
    uint64_t v7 = v3 + 32;
    swift_bridgeObjectRetain(v3);
    do
    {
      sub_1000899E8(v7, (uint64_t)v10);
      sub_100089A24( (uint64_t)v10,  (void (*)(void, void, void, void, void, void, void))sub_100058460);
      IEEE80211InformationElement.hash(into:)();
      sub_100089A24( (uint64_t)v10,  (void (*)(void, void, void, void, void, void, void))sub_100057CD0);
      v7 += 56LL;
      --v6;
    }

    while (v6);
    swift_bridgeObjectRelease(v3);
  }

  return Hasher._finalize()();
}

uint64_t sub_10015CD94@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001640A4(a1);
  if (!v2)
  {
    *(void *)a2  = result;
    *(_DWORD *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }

  return result;
}

uint64_t sub_10015CDCC(void *a1)
{
  return IEEE80211Frame.Management.Beacon.encode(to:)(a1, *(void *)v1, *(_DWORD *)(v1 + 8), *(void *)(v1 + 16));
}

uint64_t sub_10015CDEC(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2
    && *(unsigned __int16 *)(a1 + 8) == *(unsigned __int16 *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a2 + 10))
  {
    return sub_10007E374(*(void *)(a1 + 16), *(void *)(a2 + 16));
  }

  else
  {
    return 0LL;
  }

BOOL IEEE80211Frame.Management.Authentication.FiniteCyclicGroup.init(rawValue:)(__int16 a1)
{
  return a1 != 19;
}

uint64_t static NANInformationElement.ouiType.getter()
{
  return 19LL;
}

unsigned __int16 *sub_10015CE40@<X0>(unsigned __int16 *result@<X0>, BOOL *a2@<X8>)
{
  *a2  = *result != 19;
  return result;
}

void sub_10015CE54(_WORD *a1@<X8>)
{
  *a1  = 19;
}

Swift::Int sub_10015CE60()
{
  return Hasher._finalize()();
}

void sub_10015CEA0()
{
}

Swift::Int sub_10015CEC4(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_10015CF00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10016A9DC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10015CF5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10016A9DC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10015CFA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10016A998();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10015D004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10016A998();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

CoreP2P::IEEE80211Frame::Management::Authentication::SimulatenousAuthenticationOfEquals::MessageType_optional __swiftcall IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.MessageType.init(rawValue:)( Swift::UInt16 rawValue)
{
  if (rawValue == 2) {
    v1.value  = CoreP2P_IEEE80211Frame_Management_Authentication_SimulatenousAuthenticationOfEquals_MessageType_confirm;
  }
  else {
    v1.value  = CoreP2P_IEEE80211Frame_Management_Authentication_SimulatenousAuthenticationOfEquals_MessageType_unknownDefault;
  }
  if (rawValue == 1) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t NANInternetSharingStatistics.Provider.SharingMode.rawValue.getter(char a1)
{
  return (a1 & 1u) + 1;
}

unsigned __int16 *sub_10015D078@<X0>(unsigned __int16 *result@<X0>, char *a2@<X8>)
{
  int v2 = *result;
  if (v2 == 2) {
    char v3 = 1;
  }
  else {
    char v3 = 2;
  }
  if (v2 == 1) {
    char v4 = 0;
  }
  else {
    char v4 = v3;
  }
  *a2  = v4;
  return result;
}

void sub_10015D098(__int16 *a1@<X8>)
{
  if (*v1) {
    __int16 v2 = 2;
  }
  else {
    __int16 v2 = 1;
  }
  *a1  = v2;
}

Swift::Int sub_10015D0B0()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v4, 0LL);
  if (v1) {
    Swift::UInt16 v2 = 2;
  }
  else {
    Swift::UInt16 v2 = 1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_10015D0FC()
{
  if (*v0) {
    Swift::UInt16 v1 = 2;
  }
  else {
    Swift::UInt16 v1 = 1;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int sub_10015D130(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  if (v2) {
    Swift::UInt16 v3 = 2;
  }
  else {
    Swift::UInt16 v3 = 1;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t sub_10015D178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10016A954();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10015D1D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10016A954();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.finiteFieldElement.getter( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return a3;
}

uint64_t IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.finiteFieldElement.setter( uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000208D8(*(void *)(v2 + 16), *(void *)(v2 + 24));
  *(void *)(v2 + 16)  = a1;
  *(void *)(v2 + 24)  = a2;
  return result;
}

uint64_t IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.hash(into:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_1000208D8(a4, a5);
}

void static IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((v6 & 1) != 0) {
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a3, a4);
  }
}

unint64_t sub_10015D37C()
{
  unint64_t v1 = 0x72616C616373LL;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000012LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000011LL;
  }
}

uint64_t sub_10015D3D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10016A324(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_10015D3F8(uint64_t a1)
{
  unint64_t v2 = sub_100164710();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015D420(uint64_t a1)
{
  unint64_t v2 = sub_100164710();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.encode(to:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a5;
  uint64_t v22 = a3;
  uint64_t v9 = sub_100002274(&qword_100409680);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_100021104(a1, v14);
  unint64_t v15 = sub_100164710();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.CodingKeys,  &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.CodingKeys,  v15,  v14,  v13);
  LOBYTE(v23)  = 0;
  unint64_t v16 = sub_100164754();
  KeyedEncodingContainer.encode<A>(_:forKey:)( v16,  &v23,  v9,  &type metadata for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup,  v16);
  if (!v5)
  {
    uint64_t v17 = a4;
    uint64_t v18 = v21;
    uint64_t v23 = a2;
    uint64_t v24 = v22;
    char v25 = 1;
    unint64_t v19 = sub_10005CD78();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v25, v9, &type metadata for Data, v19);
    uint64_t v23 = v17;
    uint64_t v24 = v18;
    char v25 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v25, v9, &type metadata for Data, v19);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

Swift::Int IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.hashValue.getter( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  return Hasher._finalize()();
}

uint64_t IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.init(from:)( void *a1)
{
  uint64_t result = sub_100163500(a1);
  if (v1) {
    return v3;
  }
  return result;
}

Swift::Int sub_10015D6A8()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  unint64_t v4 = v0[3];
  Hasher.init(_seed:)(v6, 0LL);
  Hasher._combine(_:)(0x13u);
  sub_100020AFC(v1, v2);
  Data.hash(into:)(v6, v1, v2);
  sub_1000208D8(v1, v2);
  sub_100020AFC(v3, v4);
  Data.hash(into:)(v6, v3, v4);
  sub_1000208D8(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_10015D750(uint64_t a1)
{
  uint64_t v3 = *v1;
  unint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  unint64_t v6 = v1[3];
  Hasher._combine(_:)(0x13u);
  sub_100020AFC(v3, v4);
  Data.hash(into:)(a1, v3, v4);
  sub_1000208D8(v3, v4);
  sub_100020AFC(v5, v6);
  Data.hash(into:)(a1, v5, v6);
  return sub_1000208D8(v5, v6);
}

Swift::Int sub_10015D7DC(uint64_t a1)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  unint64_t v5 = v1[3];
  Hasher.init(_seed:)(v7, a1);
  Hasher._combine(_:)(0x13u);
  sub_100020AFC(v2, v3);
  Data.hash(into:)(v7, v2, v3);
  sub_1000208D8(v2, v3);
  sub_100020AFC(v4, v5);
  Data.hash(into:)(v7, v4, v5);
  sub_1000208D8(v4, v5);
  return Hasher._finalize()();
}

uint64_t sub_10015D880@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100163500(a1);
  if (!v2)
  {
    *a2  = result;
    a2[1]  = v5;
    a2[2]  = v6;
    a2[3]  = v7;
  }

  return result;
}

uint64_t sub_10015D8AC(void *a1)
{
  return IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.encode(to:)( a1,  *v1,  v1[1],  v1[2],  v1[3]);
}

void sub_10015D8C8(uint64_t *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = a1[3];
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, a1[1]);
  if ((v3 & 1) != 0) {
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v1, v2);
  }
}

uint64_t sub_10015D92C()
{
  if (*v0) {
    return 0x6D7269666E6F63LL;
  }
  else {
    return 0x666E6F43646E6573LL;
  }
}

uint64_t sub_10015D970@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10016A468(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_10015D994(uint64_t a1)
{
  unint64_t v2 = sub_100164798();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015D9BC(uint64_t a1)
{
  unint64_t v2 = sub_100164798();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.encode(to:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v8 = sub_100002274(&qword_100409698);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100021104(a1, v12);
  unint64_t v14 = sub_100164798();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.CodingKeys,  &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.CodingKeys,  v14,  v12,  v13);
  LOBYTE(v19[0])  = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, v19, v8);
  if (!v4)
  {
    v19[0]  = a3;
    v19[1]  = v18;
    char v20 = 1;
    unint64_t v15 = sub_10005CD78();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v20, v8, &type metadata for Data, v15);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.init(from:)( void *a1)
{
  return sub_100163730(a1);
}

uint64_t sub_10015DB40@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100163730(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }

  return result;
}

uint64_t sub_10015DB6C(void *a1)
{
  return IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.encode(to:)( a1,  *v1,  *((void *)v1 + 1),  *((void *)v1 + 2));
}

uint64_t IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.hash(into:)( uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  if ((a5 & 0x2000000000000000LL) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(a2);
    sub_100020AFC(a3, a4);
    Data.hash(into:)(a1, a3, a4);
  }

  else
  {
    Hasher._combine(_:)(0LL);
    Hasher._combine(_:)(0x13u);
    sub_1001647DC(a2, a3, a4, a5, (void (*)(void))sub_100020AFC);
    sub_100020AFC(a2, a3);
    Data.hash(into:)(a1, a2, a3);
    sub_1000208D8(a2, a3);
    sub_100020AFC(a4, a5);
    Data.hash(into:)(a1, a4, a5);
    sub_1000208D8(a4, a5);
  }

  return sub_1001647DC(a2, a3, a4, a5, (void (*)(void))sub_1000208D8);
}

Swift::Int IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.hashValue.getter( uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x2000000000000000LL) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(a1);
    sub_100020AFC(a2, a3);
    Data.hash(into:)(v9, a2, a3);
  }

  else
  {
    Hasher._combine(_:)(0LL);
    Hasher._combine(_:)(0x13u);
    sub_1001647DC(a1, a2, a3, a4, (void (*)(void))sub_100020AFC);
    sub_100020AFC(a1, a2);
    Data.hash(into:)(v9, a1, a2);
    sub_1000208D8(a1, a2);
    sub_100020AFC(a3, a4);
    Data.hash(into:)(v9, a3, a4);
    sub_1000208D8(a3, a4);
  }

  sub_1001647DC(a1, a2, a3, a4, (void (*)(void))sub_1000208D8);
  return Hasher._finalize()();
}

Swift::Int sub_10015DDC0()
{
  return IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.hashValue.getter( *(void *)v0,  *(void *)(v0 + 8),  *(void *)(v0 + 16),  *(void *)(v0 + 24));
}

uint64_t sub_10015DDCC(uint64_t a1)
{
  return IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.hash(into:)( a1,  *(void *)v1,  *(void *)(v1 + 8),  *(void *)(v1 + 16),  *(void *)(v1 + 24));
}

Swift::Int sub_10015DDD8(uint64_t a1)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  unint64_t v4 = v1[2];
  unint64_t v5 = v1[3];
  Hasher.init(_seed:)(v7, a1);
  if ((v5 & 0x2000000000000000LL) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2);
    sub_100020AFC(v3, v4);
    Data.hash(into:)(v7, v3, v4);
  }

  else
  {
    Hasher._combine(_:)(0LL);
    Hasher._combine(_:)(0x13u);
    sub_1001647DC(v2, v3, v4, v5, (void (*)(void))sub_100020AFC);
    sub_100020AFC(v2, v3);
    Data.hash(into:)(v7, v2, v3);
    sub_1000208D8(v2, v3);
    sub_100020AFC(v4, v5);
    Data.hash(into:)(v7, v4, v5);
    sub_1000208D8(v4, v5);
  }

  sub_1001647DC(v2, v3, v4, v5, (void (*)(void))sub_1000208D8);
  return Hasher._finalize()();
}

BOOL sub_10015DEF8(uint64_t *a1, uint64_t *a2)
{
  return _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO012SimulatenousF8OfEqualsO21__derived_enum_equalsySbAI_AItFZ_0( *a1,  a1[1],  a1[2],  a1[3],  *a2,  a2[1],  a2[2],  a2[3]);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.rsnCapability.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100164838(v1 + 8, a1);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.rsnCapability.setter(uint64_t a1)
{
  return sub_100164874(a1, v1 + 8);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.preAssociationSecurityNegotiationParameters.getter@<X0>( uint64_t a1@<X8>)
{
  return sub_1001648B0(v1 + 64, a1);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.preAssociationSecurityNegotiationParameters.setter( uint64_t a1)
{
  return sub_1001648EC(a1, v1 + 64);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.vendorSpecific.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100164928(v1 + 112, a1);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.vendorSpecific.setter(uint64_t a1)
{
  return sub_100164970(a1, v1 + 112);
}

void IEEE80211Frame.Management.Authentication.PASNResponse.hash(into:)(uint64_t a1)
{
  __int128 v3 = *(_OWORD *)(v1 + 24);
  __int128 v24 = *(_OWORD *)(v1 + 8);
  v25[0]  = v3;
  *(_OWORD *)((char *)v25 + 9)  = *(_OWORD *)(v1 + 33);
  sub_1001649B8(&v24);
  IEEE80211InformationElement.RSNCapability.hash(into:)(a1);
  sub_100164A00(&v24);
  uint64_t v4 = *((void *)v1 + 7);
  Swift::UInt v5 = *(void *)(v4 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    uint64_t v6 = (Swift::UInt8 *)(v4 + 32);
    do
    {
      Swift::UInt8 v7 = *v6++;
      Hasher._combine(_:)(v7);
      --v5;
    }

    while (v5);
  }

  __int128 v8 = *((_OWORD *)v1 + 5);
  __int128 v20 = *((_OWORD *)v1 + 4);
  __int128 v21 = v8;
  __int128 v22 = *((_OWORD *)v1 + 6);
  unint64_t v9 = v8;
  if ((unint64_t)v8 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    sub_100164A44( &v20,  (void (*)(void, void, void))sub_100058430,  (void (*)(uint64_t, uint64_t))sub_10002255C);
  }

  else
  {
    __int128 v10 = v20;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v20);
    sub_100164A44( &v20,  (void (*)(void, void, void))sub_100058430,  (void (*)(uint64_t, uint64_t))sub_10002255C);
    sub_100058430(v10, *((uint64_t *)&v10 + 1), v9);
    Data.hash(into:)(a1, *((void *)&v10 + 1), v9);
    sub_100057CA0(v10, *((uint64_t *)&v10 + 1), v9);
  }

  sub_1000586C0((uint64_t)&v21 + 8, (uint64_t)&v23, &qword_1004096B0);
  sub_1000586C0((uint64_t)&v23, (uint64_t)&v33, &qword_1004096B0);
  if (v33 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(0x13u);
  }

  unint64_t v11 = *((void *)&v22 + 1);
  if (*((void *)&v22 + 1) >> 60 == 15LL)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v12 = v22;
    Hasher._combine(_:)(1u);
    sub_100020AFC(v12, v11);
    Data.hash(into:)(a1, v12, v11);
    sub_100020B40(v12, v11);
  }

  sub_100164A44( &v20,  (void (*)(void, void, void))sub_100057CA0,  (void (*)(uint64_t, uint64_t))sub_100020B40);
  int v13 = v1[160];
  if (v13 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v15 = *((void *)v1 + 18);
    unint64_t v14 = *((void *)v1 + 19);
    unint64_t v17 = *((void *)v1 + 16);
    uint64_t v16 = *((void *)v1 + 17);
    unint64_t v19 = *((void *)v1 + 15);
    uint64_t v26 = *((void *)v1 + 14);
    uint64_t v18 = v26;
    unint64_t v27 = v19;
    unint64_t v28 = v17;
    uint64_t v29 = v16;
    uint64_t v30 = v15;
    unint64_t v31 = v14;
    char v32 = v13;
    Hasher._combine(_:)(1u);
    sub_100058460(v18, v19, v17, v16, v15, v14, v13);
    IEEE80211InformationElement.hash(into:)();
    sub_100057CBC(v18, v19, v17, v16, v15, v14, v13);
  }

uint64_t sub_10015E218(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10015E250 + 4 * byte_10034ACEA[a1]))( 0x6F43737574617473LL,  0xEA00000000006564LL);
}

uint64_t sub_10015E250()
{
  return 0x62617061436E7372LL;
}

unint64_t sub_10015E274()
{
  return 0xD000000000000015LL;
}

unint64_t sub_10015E290()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_10015E2B0()
{
  return 0x7053726F646E6576LL;
}

uint64_t sub_10015E2D4()
{
  return sub_10015E218(*v0);
}

uint64_t sub_10015E2DC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10016A570(a1, a2);
  *a3  = result;
  return result;
}

void sub_10015E300(_BYTE *a1@<X8>)
{
  *a1  = 5;
}

uint64_t sub_10015E30C(uint64_t a1)
{
  unint64_t v2 = sub_100164A90();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015E334(uint64_t a1)
{
  unint64_t v2 = sub_100164A90();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.encode(to:)(void *a1)
{
  return sub_10015E570( a1,  &qword_1004096B8,  (uint64_t (*)(void))sub_100164A90,  (uint64_t)&type metadata for IEEE80211Frame.Management.Authentication.PASNRequest.CodingKeys);
}

Swift::Int IEEE80211Frame.Management.Authentication.PASNResponse.hashValue.getter()
{
  return sub_1000D3134((void (*)(void *))IEEE80211Frame.Management.Authentication.PASNResponse.hash(into:));
}

double IEEE80211Frame.Management.Authentication.PASNRequest.init(from:)@<D0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = sub_10015E7DC( a1,  &qword_100409960,  (uint64_t (*)(void))sub_100164A90,  (uint64_t)&type metadata for IEEE80211Frame.Management.Authentication.PASNRequest.CodingKeys,  a2).n128_u64[0];
  return result;
}

Swift::Int sub_10015E3C0(uint64_t a1, uint64_t a2)
{
  return sub_1000D3180( a1,  a2,  (void (*)(void *))IEEE80211Frame.Management.Authentication.PASNResponse.hash(into:));
}

Swift::Int sub_10015E3D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CBB80( a1,  a2,  a3,  (void (*)(void *))IEEE80211Frame.Management.Authentication.PASNResponse.hash(into:));
}

double sub_10015E3DC@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = sub_10015E87C( a1,  &qword_100409960,  (uint64_t (*)(void))sub_100164A90,  (uint64_t)&type metadata for IEEE80211Frame.Management.Authentication.PASNRequest.CodingKeys,  a2).n128_u64[0];
  return result;
}

uint64_t sub_10015E408(void *a1)
{
  return IEEE80211Frame.Management.Authentication.PASNRequest.encode(to:)(a1);
}

BOOL sub_10015E460(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 144);
  v13[8]  = *(_OWORD *)(a1 + 128);
  v13[9]  = v2;
  char v14 = *(_BYTE *)(a1 + 160);
  __int128 v3 = *(_OWORD *)(a1 + 80);
  void v13[4] = *(_OWORD *)(a1 + 64);
  v13[5]  = v3;
  __int128 v4 = *(_OWORD *)(a1 + 112);
  v13[6]  = *(_OWORD *)(a1 + 96);
  v13[7]  = v4;
  __int128 v5 = *(_OWORD *)(a1 + 16);
  v13[0]  = *(_OWORD *)a1;
  v13[1]  = v5;
  __int128 v6 = *(_OWORD *)(a1 + 48);
  _OWORD v13[2] = *(_OWORD *)(a1 + 32);
  void v13[3] = v6;
  __int128 v7 = *(_OWORD *)(a2 + 144);
  v15[8]  = *(_OWORD *)(a2 + 128);
  v15[9]  = v7;
  char v16 = *(_BYTE *)(a2 + 160);
  __int128 v8 = *(_OWORD *)(a2 + 80);
  v15[4]  = *(_OWORD *)(a2 + 64);
  v15[5]  = v8;
  __int128 v9 = *(_OWORD *)(a2 + 112);
  _BYTE v15[6] = *(_OWORD *)(a2 + 96);
  v15[7]  = v9;
  __int128 v10 = *(_OWORD *)(a2 + 16);
  v15[0]  = *(_OWORD *)a2;
  v15[1]  = v10;
  __int128 v11 = *(_OWORD *)(a2 + 48);
  _OWORD v15[2] = *(_OWORD *)(a2 + 32);
  v15[3]  = v11;
  return _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO11PASNRequestV23__derived_struct_equalsySbAI_AItFZ_0( (char *)v13,  (char *)v15);
}

uint64_t sub_10015E4F4(uint64_t a1)
{
  unint64_t v2 = sub_100164BE4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015E51C(uint64_t a1)
{
  unint64_t v2 = sub_100164BE4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNResponse.encode(to:)(void *a1)
{
  return sub_10015E570( a1,  &qword_1004096E8,  (uint64_t (*)(void))sub_100164BE4,  (uint64_t)&type metadata for IEEE80211Frame.Management.Authentication.PASNResponse.CodingKeys);
}

uint64_t sub_10015E570(void *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7 = v4;
  uint64_t v9 = sub_100002274(a2);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  sub_100021104(a1, v13);
  uint64_t v15 = a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a4, a4, v15, v13, v14);
  LOBYTE(v26)  = *(_BYTE *)v7;
  char v29 = 0;
  unint64_t v16 = sub_100164AD4();
  uint64_t v17 = v25[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v29, v9, &type metadata for IEEE80211Status, v16);
  if (!v17)
  {
    __int128 v18 = *(_OWORD *)(v7 + 24);
    __int128 v26 = *(_OWORD *)(v7 + 8);
    *(_OWORD *)unint64_t v27 = v18;
    *(_OWORD *)&v27[9]  = *(_OWORD *)(v7 + 33);
    char v29 = 1;
    unint64_t v19 = sub_100164B18();
    KeyedEncodingContainer.encode<A>(_:forKey:)( &v26,  &v29,  v9,  &type metadata for IEEE80211InformationElement.RSNCapability,  v19);
    *(void *)&__int128 v26 = *(void *)(v7 + 56);
    char v29 = 2;
    unint64_t v20 = sub_100164B5C();
    KeyedEncodingContainer.encode<A>(_:forKey:)( &v26,  &v29,  v9,  &type metadata for IEEE80211InformationElement.ExtendedRSNCapability,  v20);
    __int128 v21 = *(_OWORD *)(v7 + 80);
    __int128 v26 = *(_OWORD *)(v7 + 64);
    *(_OWORD *)unint64_t v27 = v21;
    *(_OWORD *)&v27[16]  = *(_OWORD *)(v7 + 96);
    char v29 = 3;
    unint64_t v22 = sub_100164BA0();
    KeyedEncodingContainer.encode<A>(_:forKey:)( &v26,  &v29,  v9,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters,  v22);
    sub_1000586C0(v7 + 112, (uint64_t)v28, &qword_1004096A8);
    sub_1000586C0((uint64_t)v28, (uint64_t)&v26, &qword_1004096A8);
    char v29 = 4;
    unint64_t v23 = sub_1001646CC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)( &v26,  &v29,  v9,  &type metadata for IEEE80211InformationElement,  v23);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

double IEEE80211Frame.Management.Authentication.PASNResponse.init(from:)@<D0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = sub_10015E7DC( a1,  &qword_100409940,  (uint64_t (*)(void))sub_100164BE4,  (uint64_t)&type metadata for IEEE80211Frame.Management.Authentication.PASNResponse.CodingKeys,  a2).n128_u64[0];
  return result;
}

__n128 sub_10015E7DC@<Q0>( void *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (!v5)
  {
    __int128 v8 = v12[9];
    *(_OWORD *)(a5 + 128)  = v12[8];
    *(_OWORD *)(a5 + 144)  = v8;
    *(_BYTE *)(a5 + 160)  = v13;
    __int128 v9 = v12[5];
    *(_OWORD *)(a5 + 64)  = v12[4];
    *(_OWORD *)(a5 + 80)  = v9;
    __int128 v10 = v12[7];
    *(_OWORD *)(a5 + 96)  = v12[6];
    *(_OWORD *)(a5 + 112)  = v10;
    __int128 v11 = v12[1];
    *(_OWORD *)a5  = v12[0];
    *(_OWORD *)(a5 + 16)  = v11;
    __n128 result = (__n128)v12[3];
    *(_OWORD *)(a5 + 32)  = v12[2];
    *(__n128 *)(a5 + 48)  = result;
  }

  return result;
}

double sub_10015E850@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = sub_10015E87C( a1,  &qword_100409940,  (uint64_t (*)(void))sub_100164BE4,  (uint64_t)&type metadata for IEEE80211Frame.Management.Authentication.PASNResponse.CodingKeys,  a2).n128_u64[0];
  return result;
}

__n128 sub_10015E87C@<Q0>( void *a1@<X0>, uint64_t *a2@<X3>, uint64_t (*a3)(void)@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  if (!v5)
  {
    __int128 v8 = v12[9];
    *(_OWORD *)(a5 + 128)  = v12[8];
    *(_OWORD *)(a5 + 144)  = v8;
    *(_BYTE *)(a5 + 160)  = v13;
    __int128 v9 = v12[5];
    *(_OWORD *)(a5 + 64)  = v12[4];
    *(_OWORD *)(a5 + 80)  = v9;
    __int128 v10 = v12[7];
    *(_OWORD *)(a5 + 96)  = v12[6];
    *(_OWORD *)(a5 + 112)  = v10;
    __int128 v11 = v12[1];
    *(_OWORD *)a5  = v12[0];
    *(_OWORD *)(a5 + 16)  = v11;
    __n128 result = (__n128)v12[3];
    *(_OWORD *)(a5 + 32)  = v12[2];
    *(__n128 *)(a5 + 48)  = result;
  }

  return result;
}

uint64_t sub_10015E8FC(void *a1)
{
  return IEEE80211Frame.Management.Authentication.PASNResponse.encode(to:)(a1);
}

BOOL sub_10015E954(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 144);
  v13[8]  = *(_OWORD *)(a1 + 128);
  v13[9]  = v2;
  char v14 = *(_BYTE *)(a1 + 160);
  __int128 v3 = *(_OWORD *)(a1 + 80);
  void v13[4] = *(_OWORD *)(a1 + 64);
  v13[5]  = v3;
  __int128 v4 = *(_OWORD *)(a1 + 112);
  v13[6]  = *(_OWORD *)(a1 + 96);
  v13[7]  = v4;
  __int128 v5 = *(_OWORD *)(a1 + 16);
  v13[0]  = *(_OWORD *)a1;
  v13[1]  = v5;
  __int128 v6 = *(_OWORD *)(a1 + 48);
  _OWORD v13[2] = *(_OWORD *)(a1 + 32);
  void v13[3] = v6;
  __int128 v7 = *(_OWORD *)(a2 + 144);
  v15[8]  = *(_OWORD *)(a2 + 128);
  v15[9]  = v7;
  char v16 = *(_BYTE *)(a2 + 160);
  __int128 v8 = *(_OWORD *)(a2 + 80);
  v15[4]  = *(_OWORD *)(a2 + 64);
  v15[5]  = v8;
  __int128 v9 = *(_OWORD *)(a2 + 112);
  _BYTE v15[6] = *(_OWORD *)(a2 + 96);
  v15[7]  = v9;
  __int128 v10 = *(_OWORD *)(a2 + 16);
  v15[0]  = *(_OWORD *)a2;
  v15[1]  = v10;
  __int128 v11 = *(_OWORD *)(a2 + 48);
  _OWORD v15[2] = *(_OWORD *)(a2 + 32);
  v15[3]  = v11;
  return _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO12PASNResponseV23__derived_struct_equalsySbAI_AItFZ_0( (char *)v13,  (char *)v15);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNConfirm.preAssociationSecurityNegotiationParameters.getter@<X0>( uint64_t a1@<X8>)
{
  return sub_1001648B0(v1 + 8, a1);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNConfirm.preAssociationSecurityNegotiationParameters.setter( uint64_t a1)
{
  return sub_1001648EC(a1, v1 + 8);
}

void *IEEE80211Frame.Management.Authentication.PASNConfirm.hash(into:)(uint64_t a1)
{
  __int128 v2 = v1;
  Hasher._combine(_:)(word_10034C718[*v2]);
  __int128 v7 = *(_OWORD *)(v2 + 8);
  __int128 v8 = *(_OWORD *)(v2 + 24);
  __int128 v9 = *(_OWORD *)(v2 + 40);
  if ((unint64_t)v8 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    sub_100164C28( v2,  (void (*)(void, void, void))sub_100058430,  (void (*)(uint64_t, uint64_t))sub_10002255C);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v7);
    sub_100164C28( v2,  (void (*)(void, void, void))sub_100058430,  (void (*)(uint64_t, uint64_t))sub_10002255C);
    sub_100058430(v7, *((uint64_t *)&v7 + 1), v8);
    Data.hash(into:)(a1, *((void *)&v7 + 1), v8);
    sub_100057CA0(v7, *((uint64_t *)&v7 + 1), v8);
  }

  sub_1000586C0((uint64_t)&v8 + 8, (uint64_t)&v10, &qword_1004096B0);
  sub_1000586C0((uint64_t)&v10, (uint64_t)&v11, &qword_1004096B0);
  if (v11 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(0x13u);
  }

  unint64_t v4 = *((void *)&v9 + 1);
  if (*((void *)&v9 + 1) >> 60 == 15LL)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v5 = v9;
    Hasher._combine(_:)(1u);
    sub_100020AFC(v5, v4);
    Data.hash(into:)(a1, v5, v4);
    sub_100020B40(v5, v4);
  }

  return sub_100164C28( v2,  (void (*)(void, void, void))sub_100057CA0,  (void (*)(uint64_t, uint64_t))sub_100020B40);
}

BOOL static IEEE80211Frame.Management.Authentication.PASNConfirm.__derived_struct_equals(_:_:)( char *a1, char *a2)
{
  if (word_10034C718[*a1] != word_10034C718[*a2]) {
    return 0LL;
  }
  __int128 v2 = *(_OWORD *)(a1 + 24);
  __int128 v16 = *(_OWORD *)(a1 + 8);
  __int128 v17 = v2;
  __int128 v18 = *(_OWORD *)(a1 + 40);
  __int128 v3 = *(_OWORD *)(a2 + 24);
  __int128 v12 = *(_OWORD *)(a2 + 8);
  *((void *)&v13 + 1)  = *((void *)a2 + 4);
  __int128 v14 = *(_OWORD *)(a2 + 40);
  unint64_t v4 = v3;
  if ((unint64_t)v17 >> 60 == 15)
  {
LABEL_8:
    sub_100058430(v16, *((uint64_t *)&v16 + 1), v17);
    sub_100058430(v12, *((uint64_t *)&v12 + 1), v4);
    sub_100057CA0(v16, *((uint64_t *)&v16 + 1), v17);
    sub_100057CA0(v12, *((uint64_t *)&v12 + 1), v4);
    return 0LL;
  }

  sub_100058430(v16, *((uint64_t *)&v16 + 1), v17);
  sub_100058430(v12, *((uint64_t *)&v12 + 1), v4);
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*((uint64_t *)&v16 + 1), v17);
  char v6 = v5;
  sub_100057CA0(v12, *((uint64_t *)&v12 + 1), v4);
  sub_100057CA0(v16, *((uint64_t *)&v16 + 1), v17);
  if ((v6 & 1) == 0) {
    return 0LL;
  }
LABEL_4:
  sub_1000586C0((uint64_t)&v17 + 8, (uint64_t)&v19, &qword_1004096B0);
  sub_1000586C0((uint64_t)&v13 + 8, (uint64_t)&v15, &qword_1004096B0);
  sub_1000586C0((uint64_t)&v19, (uint64_t)&v20, &qword_1004096B0);
  if ((v20 & 1) != 0)
  {
    sub_1000586C0((uint64_t)&v15, (uint64_t)&v21, &qword_1004096B0);
    if (v21 != 1) {
      return 0LL;
    }
  }

  else
  {
    sub_1000586C0((uint64_t)&v15, (uint64_t)&v21, &qword_1004096B0);
    if ((v21 & 1) != 0) {
      return 0LL;
    }
  }

  __int128 v7 = v18;
  __int128 v8 = v14;
  if (*((void *)&v18 + 1) >> 60 == 15LL)
  {
    if (*((void *)&v14 + 1) >> 60 == 15LL) {
      return 1LL;
    }
    goto LABEL_17;
  }

  if (*((void *)&v14 + 1) >> 60 == 15LL)
  {
LABEL_17:
    sub_10002255C(v18, *((unint64_t *)&v18 + 1));
    sub_10002255C(v8, *((unint64_t *)&v8 + 1));
    sub_100020B40(v7, *((unint64_t *)&v7 + 1));
    sub_100020B40(v8, *((unint64_t *)&v8 + 1));
    return 0LL;
  }

  sub_10002255C(v18, *((unint64_t *)&v18 + 1));
  sub_10002255C(v8, *((unint64_t *)&v8 + 1));
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v7, *((uint64_t *)&v7 + 1));
  char v10 = v9;
  sub_100020B40(v8, *((unint64_t *)&v8 + 1));
  sub_100020B40(v7, *((unint64_t *)&v7 + 1));
  return (v10 & 1) != 0;
}

uint64_t sub_10015EE4C()
{
  if (*v0) {
    return 0xD00000000000002BLL;
  }
  else {
    return 0x6F43737574617473LL;
  }
}

uint64_t sub_10015EE90@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10016A7D4(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_10015EEB4(uint64_t a1)
{
  unint64_t v2 = sub_100164C74();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015EEDC(uint64_t a1)
{
  unint64_t v2 = sub_100164C74();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNConfirm.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100002274(&qword_1004096F8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  __int128 v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100021104(a1, v9);
  unint64_t v11 = sub_100164C74();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm.CodingKeys,  &type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm.CodingKeys,  v11,  v9,  v10);
  LOBYTE(v16[0])  = *(_BYTE *)v3;
  char v17 = 0;
  unint64_t v12 = sub_100164AD4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v17, v5, &type metadata for IEEE80211Status, v12);
  if (!v2)
  {
    __int128 v13 = *(_OWORD *)(v3 + 24);
    v16[0]  = *(_OWORD *)(v3 + 8);
    v16[1]  = v13;
    v16[2]  = *(_OWORD *)(v3 + 40);
    char v17 = 1;
    unint64_t v14 = sub_100164BA0();
    KeyedEncodingContainer.encode<A>(_:forKey:)( v16,  &v17,  v5,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters,  v14);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int IEEE80211Frame.Management.Authentication.PASNConfirm.hashValue.getter()
{
  __int128 v1 = *(_OWORD *)(v0 + 24);
  __int128 v8 = *(_OWORD *)(v0 + 8);
  __int128 v9 = v1;
  __int128 v10 = *(_OWORD *)(v0 + 40);
  unint64_t v2 = v1;
  if ((unint64_t)v1 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    sub_100164C28( v0,  (void (*)(void, void, void))sub_100058430,  (void (*)(uint64_t, uint64_t))sub_10002255C);
  }

  else
  {
    __int128 v3 = v8;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
    sub_100164C28( v0,  (void (*)(void, void, void))sub_100058430,  (void (*)(uint64_t, uint64_t))sub_10002255C);
    sub_100058430(v3, *((uint64_t *)&v3 + 1), v2);
    Data.hash(into:)(v7, *((void *)&v3 + 1), v2);
    sub_100057CA0(v3, *((uint64_t *)&v3 + 1), v2);
  }

  sub_1000586C0((uint64_t)&v9 + 8, (uint64_t)&v11, &qword_1004096B0);
  sub_1000586C0((uint64_t)&v11, (uint64_t)&v12, &qword_1004096B0);
  if (v12 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(0x13u);
  }

  unint64_t v4 = *((void *)&v10 + 1);
  if (*((void *)&v10 + 1) >> 60 == 15LL)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v5 = v10;
    Hasher._combine(_:)(1u);
    sub_100020AFC(v5, v4);
    Data.hash(into:)(v7, v5, v4);
    sub_100020B40(v5, v4);
  }

  sub_100164C28( v0,  (void (*)(void, void, void))sub_100057CA0,  (void (*)(uint64_t, uint64_t))sub_100020B40);
  return Hasher._finalize()();
}

double IEEE80211Frame.Management.Authentication.PASNConfirm.init(from:)@<D0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *(_OWORD *)a2  = v6[0];
    *(_OWORD *)(a2 + 16)  = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32)  = v7;
    *(void *)(a2 + 48)  = v8;
  }

  return result;
}

Swift::Int sub_10015F27C()
{
  return IEEE80211Frame.Management.Authentication.PASNConfirm.hashValue.getter();
}

void *sub_10015F2BC(uint64_t a1)
{
  return IEEE80211Frame.Management.Authentication.PASNConfirm.hash(into:)(a1);
}

Swift::Int sub_10015F2FC(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *((void *)v1 + 1);
  uint64_t v4 = *((void *)v1 + 2);
  unint64_t v5 = *((void *)v1 + 3);
  int v6 = v1[32];
  uint64_t v7 = *((void *)v1 + 5);
  unint64_t v8 = *((void *)v1 + 6);
  Hasher.init(_seed:)(v10, a1);
  Hasher._combine(_:)(word_10034C718[v2]);
  if (v5 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    sub_100058430(v3, v4, v5);
    sub_10002255C(v7, v8);
    if (!v6)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(0x13u);
      goto LABEL_6;
    }
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
    sub_100058430(v3, v4, v5);
    sub_10002255C(v7, v8);
    sub_100058430(v3, v4, v5);
    Data.hash(into:)(v10, v4, v5);
    sub_100057CA0(v3, v4, v5);
    if (!v6) {
      goto LABEL_3;
    }
  }

  Hasher._combine(_:)(0);
LABEL_6:
  if (v8 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    sub_100020AFC(v7, v8);
    Data.hash(into:)(v10, v7, v8);
    sub_100020B40(v7, v8);
  }

  sub_100057CA0(v3, v4, v5);
  sub_100020B40(v7, v8);
  return Hasher._finalize()();
}

uint64_t sub_10015F498(void *a1)
{
  return IEEE80211Frame.Management.Authentication.PASNConfirm.encode(to:)(a1);
}

BOOL sub_10015F4AC(char *a1, char *a2)
{
  uint64_t v2 = *a1;
  __int128 v3 = *(_OWORD *)(a1 + 24);
  v10[0]  = *(_OWORD *)(a1 + 8);
  v10[1]  = v3;
  uint64_t v4 = *a2;
  __int128 v5 = *(_OWORD *)(a2 + 8);
  __int128 v6 = *(_OWORD *)(a2 + 24);
  void v10[2] = *(_OWORD *)(a1 + 40);
  v11[0]  = v5;
  __int128 v7 = *(_OWORD *)(a2 + 40);
  v11[1]  = v6;
  _OWORD v11[2] = v7;
  return word_10034C718[v2] == word_10034C718[v4]
      && _s7CoreP2P27IEEE80211InformationElementO43PreAssociationSecurityNegotiationParametersV23__derived_struct_equalsySbAE_AEtFZ_0( (uint64_t *)v10,  (uint64_t *)v11);
}

void IEEE80211Frame.Management.Authentication.hash(into:)()
{
  __int128 v1 = (char *)sub_10015F58C + 4 * byte_10034ACEF[sub_100164CF8((uint64_t)v3)];
  __asm { BR              X10 }

uint64_t sub_10015F58C()
{
  uint64_t v3 = sub_100164D70((uint64_t)v7);
  __int128 v14 = *(_OWORD *)(v3 + 112);
  __int128 v15 = *(_OWORD *)(v3 + 128);
  __int128 v16 = *(_OWORD *)(v3 + 144);
  char v17 = *(_BYTE *)(v3 + 160);
  __int128 v10 = *(_OWORD *)(v3 + 48);
  __int128 v11 = *(_OWORD *)(v3 + 64);
  __int128 v12 = *(_OWORD *)(v3 + 80);
  __int128 v13 = *(_OWORD *)(v3 + 96);
  *(_OWORD *)&v7[168]  = *(_OWORD *)v3;
  __int128 v8 = *(_OWORD *)(v3 + 16);
  __int128 v9 = *(_OWORD *)(v3 + 32);
  Hasher._combine(_:)(0LL);
  sub_100164CB8((__int128 *)(v2 - 232), (uint64_t)v6);
  uint64_t v4 = sub_100164D70((uint64_t)v6);
  sub_100164D80(v4);
  IEEE80211Frame.Management.Authentication.PASNResponse.hash(into:)(v0);
  return sub_100164D04( v1,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_100057B64);
}

Swift::Int IEEE80211Frame.Management.Authentication.hashValue.getter()
{
  return sub_1000D3134((void (*)(void *))IEEE80211Frame.Management.Authentication.hash(into:));
}

Swift::Int sub_10015F8F4(uint64_t a1, uint64_t a2)
{
  return sub_100160F38( a1,  a2,  (void (*)(uint64_t, _BYTE *))sub_100164CB8,  (void (*)(void *))IEEE80211Frame.Management.Authentication.hash(into:));
}

void sub_10015F908()
{
}

Swift::Int sub_10015F944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100160FE0( a1,  a2,  a3,  (void (*)(uint64_t, _BYTE *))sub_100164CB8,  (void (*)(void *))IEEE80211Frame.Management.Authentication.hash(into:));
}

uint64_t IEEE80211Frame.Management.Authentication.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001653CC(a1, (uint64_t)v5);
  if (!v2) {
    return sub_100164CB8(v5, a2);
  }
  return result;
}

uint64_t sub_10015F99C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100161050( a1,  a2,  a3,  a4,  (void (*)(uint64_t, _BYTE *))sub_100164CB8,  (uint64_t (*)(_BYTE *, _BYTE *))_s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO21__derived_enum_equalsySbAG_AGtFZ_0);
}

unint64_t IEEE80211Frame.Management.ActionFrame.Category.rawValue.getter(char a1)
{
  return 0x7F7E0907060504uLL >> (8 * a1);
}

BOOL sub_10015F9D4(_BYTE *a1, _BYTE *a2)
{
  return ((0x7F7E0907060504uLL >> (8 * *a1)) & 0x7F) == ((0x7F7E0907060504uLL >> (8 * *a2)) & 0x7F);
}

uint64_t sub_10015FA10@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = _s7CoreP2P14IEEE80211FrameV10ManagementO06ActionD0V8CategoryO8rawValueAISgs5UInt8V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_10015FA38(_BYTE *a1@<X8>)
{
  *a1  = 0x7F7E0907060504uLL >> (8 * *v1);
}

Swift::Int sub_10015FA5C()
{
  char v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(0x7F7E0907060504uLL >> (8 * v1));
  return Hasher._finalize()();
}

void sub_10015FAB4()
{
}

Swift::Int sub_10015FAF4(uint64_t a1)
{
  char v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(0x7F7E0907060504uLL >> (8 * v2));
  return Hasher._finalize()();
}

uint64_t sub_10015FB48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10016A910();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10015FBA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10016A910();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

BOOL IEEE80211Frame.Management.ActionFrame.PublicActionField.init(rawValue:)(char a1)
{
  return a1 != 9;
}

uint64_t IEEE80211Frame.Management.ActionFrame.PublicActionField.rawValue.getter()
{
  return 9LL;
}

_BYTE *sub_10015FC08@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2  = *result != 9;
  return result;
}

Swift::Int sub_10015FC1C()
{
  return Hasher._finalize()();
}

void sub_10015FC5C()
{
}

Swift::Int sub_10015FC80(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_10015FCBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10016A8CC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10015FD18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10016A8CC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void IEEE80211Frame.Management.ActionFrame.Contents.hash(into:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 >> 30)
  {
    if (a2 >> 30 != 1)
    {
      Hasher._combine(_:)(0LL);
      return;
    }

    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(8u);
    Hasher._combine(_:)(a2);
    if ((a2 & 0x100) != 0) {
      Swift::UInt8 v7 = 3;
    }
    else {
      Swift::UInt8 v7 = 0;
    }
    Hasher._combine(_:)(v7);
    Hasher._combine(_:)(BYTE2(a2));
    Hasher._combine(_:)(HIDWORD(a2));
    Hasher._combine(_:)(a3);
    Swift::UInt v8 = *(void *)(a4 + 16);
    Hasher._combine(_:)(v8);
    if (v8)
    {
      uint64_t v9 = *(void *)(type metadata accessor for AWDLActionFrame.AWDLAttribute(0LL) - 8);
      unint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      uint64_t v11 = *(void *)(v9 + 72);
      swift_bridgeObjectRetain(a4);
      do
      {
        AWDLActionFrame.AWDLAttribute.hash(into:)();
        v10 += v11;
        --v8;
      }

      while (v8);
LABEL_17:
      sub_100057AA0(a2, a3, a4);
    }
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    if (a2 == 14LL)
    {
      Hasher._combine(_:)(0LL);
    }

    else
    {
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(byte_10034C791[(char)a2]);
    }

    Swift::UInt v12 = *(void *)(a3 + 16);
    Hasher._combine(_:)(v12);
    if (v12)
    {
      uint64_t v13 = *(void *)(type metadata accessor for NANAttribute(0LL) - 8);
      unint64_t v14 = a3 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      uint64_t v15 = *(void *)(v13 + 72);
      swift_bridgeObjectRetain(a3);
      do
      {
        NANAttribute.hash(into:)();
        v14 += v15;
        --v12;
      }

      while (v12);
      goto LABEL_17;
    }
  }

Swift::Int IEEE80211Frame.Management.ActionFrame.Contents.hashValue.getter( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Hasher._finalize()();
}

Swift::Int sub_10015FF7C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  Hasher.init(_seed:)(v5, 0LL);
  IEEE80211Frame.Management.ActionFrame.Contents.hash(into:)((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

void sub_10015FFD4(uint64_t a1)
{
}

Swift::Int sub_10015FFE0(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  Hasher.init(_seed:)(v6, a1);
  IEEE80211Frame.Management.ActionFrame.Contents.hash(into:)((uint64_t)v6, v2, v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_100160034(uint64_t a1, uint64_t *a2)
{
  return _s7CoreP2P14IEEE80211FrameV10ManagementO06ActionD0V8ContentsO21__derived_enum_equalsySbAI_AItFZ_0( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *a2,  a2[1],  a2[2]);
}

uint64_t IEEE80211Frame.Management.ActionFrame.contents.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2;
}

uint64_t IEEE80211Frame.Management.ActionFrame.contents.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_100057AA0(v3[1], v3[2], v3[3]);
  v3[1]  = a1;
  void v3[2] = a2;
  _OWORD v3[3] = a3;
  return result;
}

uint64_t IEEE80211Frame.Management.ActionFrame.nanActionFrame.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a2 & 0xC0000000) != 0) {
    return 0LL;
  }
  uint64_t v4 = a2;
  sub_10005852C(a2, a3, a4);
  return v4;
}

uint64_t IEEE80211Frame.Management.ActionFrame.nanActionFrame.setter(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    unsigned __int8 v4 = result;
    uint64_t v5 = v2[1];
    if ((v5 & 0xC0000000) != 0)
    {
      return swift_bridgeObjectRelease(a2);
    }

    else
    {
      uint64_t result = sub_100057AA0(v5, v2[2], v2[3]);
      v2[1]  = v4;
      v2[2]  = a2;
      v2[3]  = 0LL;
    }
  }

  return result;
}

unsigned __int8 *(*IEEE80211Frame.Management.ActionFrame.nanActionFrame.modify( void *a1))(unsigned __int8 *result, char a2)
{
  a1[2]  = v1;
  uint64_t v3 = *(void *)(v1 + 8);
  if ((v3 & 0xC0000000) != 0)
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v6 = v1 + 16;
    uint64_t v5 = *(void *)(v1 + 16);
    uint64_t v4 = v3;
    sub_10005852C(v3, v5, *(void *)(v6 + 8));
  }

  *a1  = v4;
  a1[1]  = v5;
  return sub_1001601E4;
}

unsigned __int8 *sub_1001601E4(unsigned __int8 *result, char a2)
{
  uint64_t v2 = *((void *)result + 1);
  if ((a2 & 1) != 0)
  {
    if (v2)
    {
      uint64_t v3 = (void *)*((void *)result + 2);
      uint64_t v4 = v3[1];
      if ((v4 & 0xC0000000) == 0)
      {
        uint64_t v6 = v3[2];
        uint64_t v5 = v3[3];
        uint64_t v7 = *result;
        swift_bridgeObjectRetain(*((void *)result + 1));
        sub_100057AA0(v4, v6, v5);
        v3[1]  = v7;
        void v3[2] = v2;
        _OWORD v3[3] = 0LL;
      }
    }

    return (unsigned __int8 *)swift_bridgeObjectRelease(v2);
  }

  if (!v2) {
    return result;
  }
  Swift::UInt v8 = (uint64_t *)*((void *)result + 2);
  if ((v8[1] & 0xC0000000LL) != 0) {
    return (unsigned __int8 *)swift_bridgeObjectRelease(v2);
  }
  uint64_t v9 = *result;
  uint64_t result = (unsigned __int8 *)sub_100057AA0(v8[1], v8[2], v8[3]);
  v8[1]  = v9;
  _OWORD v8[2] = v2;
  void v8[3] = 0LL;
  return result;
}

unint64_t IEEE80211Frame.Management.ActionFrame.awdlActionFrame.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a2 & 0xC0000000) != 0x40000000) {
    return 0LL;
  }
  unint64_t v4 = a2 & 0xFFFFFFFF00FF01FFLL;
  sub_10005852C(a2, a3, a4);
  return v4;
}

uint64_t IEEE80211Frame.Management.ActionFrame.awdlActionFrame.setter( uint64_t result, unsigned int a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = result;
    if ((v3[1] & 0xC0000000LL) == 0x40000000)
    {
      uint64_t result = sub_100057AA0(v3[1], v3[2], v3[3]);
      v3[1]  = v5 & 0xFFFFFFFF00FF01FFLL | 0x40000000;
      void v3[2] = a2;
      _OWORD v3[3] = a3;
    }

    else
    {
      return swift_bridgeObjectRelease(a3);
    }
  }

  return result;
}

uint64_t (*IEEE80211Frame.Management.ActionFrame.awdlActionFrame.modify( unint64_t *a1))(uint64_t result, char a2)
{
  a1[3]  = (unint64_t)v1;
  uint64_t v3 = v1[1];
  if ((v3 & 0xC0000000) == 0x40000000)
  {
    uint64_t v4 = v1[2];
    uint64_t v5 = v1[3];
    unint64_t v6 = v3 & 0xFFFFFFFF00FF01FFLL;
    unint64_t v7 = v4;
    sub_10005852C(v3, v4, v5);
  }

  else
  {
    unint64_t v6 = 0LL;
    unint64_t v7 = 0LL;
    uint64_t v5 = 0LL;
  }

  *a1  = v6;
  a1[1]  = v7;
  a1[2]  = v5;
  return sub_100160400;
}

uint64_t sub_100160400(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if ((a2 & 1) != 0)
  {
    if (v2)
    {
      uint64_t v3 = *(void **)(result + 24);
      uint64_t v4 = v3[1];
      if ((v4 & 0xC0000000) == 0x40000000)
      {
        uint64_t v6 = v3[2];
        uint64_t v5 = v3[3];
        uint64_t v7 = *(unsigned int *)(result + 8);
        uint64_t v8 = *(void *)result;
        swift_bridgeObjectRetain(*(void *)(result + 16));
        sub_100057AA0(v4, v6, v5);
        v3[1]  = v8 & 0xFFFFFFFF00FF01FFLL | 0x40000000;
        void v3[2] = v7;
        _OWORD v3[3] = v2;
      }
    }

    return swift_bridgeObjectRelease(v2);
  }

  if (v2)
  {
    uint64_t v9 = *(uint64_t **)(result + 24);
    if ((v9[1] & 0xC0000000LL) != 0x40000000) {
      return swift_bridgeObjectRelease(v2);
    }
    uint64_t v10 = *(unsigned int *)(result + 8);
    uint64_t v11 = *(void *)result;
    uint64_t result = sub_100057AA0(v9[1], v9[2], v9[3]);
    v9[1]  = v11 & 0xFFFFFFFF00FF01FFLL | 0x40000000;
    void v9[2] = v10;
    void v9[3] = v2;
  }

  return result;
}

void IEEE80211Frame.Management.ActionFrame.hash(into:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 >> 30)
  {
    if (a3 >> 30 != 1)
    {
      Hasher._combine(_:)(0LL);
LABEL_17:
      sub_100057AA0(a3, a4, a5);
      return;
    }

    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(8u);
    Hasher._combine(_:)(a3);
    if ((a3 & 0x100) != 0) {
      Swift::UInt8 v8 = 3;
    }
    else {
      Swift::UInt8 v8 = 0;
    }
    Hasher._combine(_:)(v8);
    Hasher._combine(_:)(BYTE2(a3));
    Hasher._combine(_:)(HIDWORD(a3));
    Hasher._combine(_:)(a4);
    Swift::UInt v9 = *(void *)(a5 + 16);
    Hasher._combine(_:)(v9);
    if (v9)
    {
      uint64_t v10 = *(void *)(type metadata accessor for AWDLActionFrame.AWDLAttribute(0LL) - 8);
      unint64_t v11 = a5 + ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
      sub_10005852C(a3, a4, a5);
      uint64_t v12 = *(void *)(v10 + 72);
      do
      {
        AWDLActionFrame.AWDLAttribute.hash(into:)();
        v11 += v12;
        --v9;
      }

      while (v9);
      goto LABEL_17;
    }
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    if (a3 == 14LL)
    {
      Hasher._combine(_:)(0LL);
    }

    else
    {
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(byte_10034C791[(char)a3]);
    }

    Swift::UInt v13 = *(void *)(a4 + 16);
    Hasher._combine(_:)(v13);
    if (v13)
    {
      uint64_t v14 = *(void *)(type metadata accessor for NANAttribute(0LL) - 8);
      unint64_t v15 = a4 + ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      sub_10005852C(a3, a4, a5);
      uint64_t v16 = *(void *)(v14 + 72);
      do
      {
        NANAttribute.hash(into:)();
        v15 += v16;
        --v13;
      }

      while (v13);
      goto LABEL_17;
    }
  }

Swift::Int IEEE80211Frame.Management.ActionFrame.hashValue.getter( char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Hasher._finalize()();
}

Swift::Int sub_100160748()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  char v4 = *(_BYTE *)v0;
  Hasher.init(_seed:)(v6, 0LL);
  IEEE80211Frame.Management.ActionFrame.hash(into:)((uint64_t)v6, v4, v1, v2, v3);
  return Hasher._finalize()();
}

void sub_1001607A8(uint64_t a1)
{
}

Swift::Int sub_1001607B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  char v5 = *(_BYTE *)v1;
  Hasher.init(_seed:)(v7, a1);
  IEEE80211Frame.Management.ActionFrame.hash(into:)((uint64_t)v7, v5, v2, v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_100160814@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100165754(a1);
  if (!v2)
  {
    *(_BYTE *)a2  = result;
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
    *(void *)(a2 + 24)  = v7;
  }

  return result;
}

uint64_t IEEE80211Frame.Management.ActionFrame.init(from:)(void *a1)
{
  return sub_100165754(a1);
}

uint64_t sub_100160868(void *a1)
{
  return IEEE80211Frame.Management.ActionFrame.encode(to:)( a1,  *(_BYTE *)v1,  *(void *)(v1 + 8),  *(void *)(v1 + 16),  *(void *)(v1 + 24));
}

uint64_t IEEE80211Frame.Management.ActionFrame.encode(to:)( void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100021104(a1, v10);
  dispatch thunk of Encoder.unkeyedContainer()(v37, v10, v11);
  LOBYTE(v32)  = a2;
  uint64_t v12 = v38;
  uint64_t v13 = v39;
  sub_1000237C8((uint64_t)v37, v38);
  unint64_t v14 = sub_100165A34();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( &v32,  &type metadata for IEEE80211Frame.Management.ActionFrame.Category,  v14,  v12,  v13);
  if (!v5)
  {
    if (a3 >> 30)
    {
      if (a3 >> 30 != 1)
      {
        unint64_t v29 = sub_1000033FC();
        uint64_t v30 = swift_allocError(&type metadata for WiFiError, v29, 0LL, 0LL);
        *(_OWORD *)uint64_t v31 = xmmword_100337020;
        *(_BYTE *)(v31 + 16)  = 2;
        swift_willThrow(v30);
        return sub_100002AC4(v37);
      }

      __int16 v32 = 5888;
      char v33 = -14;
      uint64_t v16 = v38;
      uint64_t v17 = v39;
      sub_1000237C8((uint64_t)v37, v38);
      unint64_t v18 = sub_100165A78();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v32, &type metadata for OUI, v18, v16, v17);
      __int16 v32 = a3 & 0x1FF;
      char v33 = BYTE2(a3);
      int v34 = HIDWORD(a3);
      LODWORD(v35)  = a4;
      uint64_t v36 = a5;
      uint64_t v19 = v38;
      uint64_t v20 = v39;
      sub_1000237C8((uint64_t)v37, v38);
      unint64_t v21 = sub_100165ABC();
      unint64_t v22 = &type metadata for AWDLActionFrame;
    }

    else
    {
      uint64_t v23 = v38;
      uint64_t v24 = v39;
      sub_1000237C8((uint64_t)v37, v38);
      unint64_t v25 = sub_100165B00();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( v25,  &type metadata for IEEE80211Frame.Management.ActionFrame.PublicActionField,  v25,  v23,  v24);
      __int16 v32 = 28496;
      char v33 = -102;
      uint64_t v26 = v38;
      uint64_t v27 = v39;
      sub_1000237C8((uint64_t)v37, v38);
      unint64_t v28 = sub_100165A78();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v32, &type metadata for OUI, v28, v26, v27);
      LOBYTE(v32)  = a3;
      uint64_t v35 = a4;
      uint64_t v19 = v38;
      uint64_t v20 = v39;
      sub_1000237C8((uint64_t)v37, v38);
      unint64_t v21 = sub_100165B44();
      unint64_t v22 = &type metadata for NANActionFrame;
    }

    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v32, v22, v21, v19, v20);
  }

  return sub_100002AC4(v37);
}

uint64_t sub_100160B00(void *a1, void *a2)
{
  return static IEEE80211Frame.Management.ActionFrame.__derived_struct_equals(_:_:)( *(unsigned __int8 *)a1,  a1[1],  a1[2],  a1[3],  *(unsigned __int8 *)a2,  a2[1],  a2[2],  a2[3]);
}

void IEEE80211Frame.Management.hash(into:)()
{
  uint64_t v1 = (char *)sub_100160B90 + 4 * byte_10034ACF3[sub_100165B88((uint64_t)v3)];
  __asm { BR              X10 }

void sub_100160B90()
{
  uint64_t v2 = sub_100165B94((uint64_t)&v11);
  Swift::UInt64 v3 = *(void *)v2;
  uint64_t v4 = *(void *)(v2 + 16);
  Swift::UInt16 v5 = *(_WORD *)(v2 + 8);
  Swift::UInt16 v6 = *(_WORD *)(v2 + 10);
  Hasher._combine(_:)(0LL);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Swift::UInt v7 = *(void *)(v4 + 16);
  Hasher._combine(_:)(v7);
  if (v7)
  {
    uint64_t v8 = v4 + 32;
    sub_100164CB8((__int128 *)(v1 - 248), (uint64_t)v12);
    uint64_t v9 = sub_100165B94((uint64_t)v12);
    swift_bridgeObjectRetain(*(void *)(v9 + 16));
    do
    {
      sub_1000899E8(v8, (uint64_t)v10);
      sub_100089A24( (uint64_t)v10,  (void (*)(void, void, void, void, void, void, void))sub_100058460);
      IEEE80211InformationElement.hash(into:)();
      sub_100089A24( (uint64_t)v10,  (void (*)(void, void, void, void, void, void, void))sub_100057CD0);
      v8 += 56LL;
      --v7;
    }

    while (v7);
    sub_100164D04( v0,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_100057AC0);
  }

Swift::Int IEEE80211Frame.Management.hashValue.getter()
{
  return sub_1000D3134((void (*)(void *))IEEE80211Frame.Management.hash(into:));
}

Swift::Int sub_100160F24(uint64_t a1, uint64_t a2)
{
  return sub_100160F38( a1,  a2,  (void (*)(uint64_t, _BYTE *))sub_10010EDC4,  (void (*)(void *))IEEE80211Frame.Management.hash(into:));
}

Swift::Int sub_100160F38( uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _BYTE *), void (*a4)(void *))
{
  return Hasher._finalize()();
}

void sub_100160F90()
{
}

Swift::Int sub_100160FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100160FE0( a1,  a2,  a3,  (void (*)(uint64_t, _BYTE *))sub_10010EDC4,  (void (*)(void *))IEEE80211Frame.Management.hash(into:));
}

Swift::Int sub_100160FE0( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, _BYTE *), void (*a5)(void *))
{
  return Hasher._finalize()();
}

uint64_t sub_10016103C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100161050( a1,  a2,  a3,  a4,  (void (*)(uint64_t, _BYTE *))sub_10010EDC4,  (uint64_t (*)(_BYTE *, _BYTE *))_s7CoreP2P14IEEE80211FrameV10ManagementO21__derived_enum_equalsySbAE_AEtFZ_0);
}

uint64_t sub_100161050( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, _BYTE *), uint64_t (*a6)(_BYTE *, _BYTE *))
{
  return a6(v10, v11) & 1;
}

double IEEE80211Frame.init(header:contents:)@<D0>( unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, __int128 *a4@<X3>, _OWORD *a5@<X8>)
{
  char v5 = a3;
  char v6 = a2;
  __int16 v7 = a1;
  unint64_t v9 = a1 >> 16;
  unint64_t v10 = HIDWORD(a1);
  unint64_t v11 = a1 >> 40;
  unint64_t v12 = HIWORD(a1);
  unint64_t v13 = HIBYTE(a1);
  unint64_t v14 = a2 >> 8;
  unint64_t v21 = a2 >> 16;
  unint64_t v22 = a2 >> 24;
  unint64_t v23 = HIDWORD(a2);
  unint64_t v24 = a2 >> 40;
  unint64_t v25 = HIWORD(a2);
  unint64_t v26 = HIBYTE(a2);
  unint64_t v27 = a3 >> 8;
  unint64_t v28 = a3 >> 16;
  unint64_t v29 = a3 >> 24;
  unint64_t v30 = HIDWORD(a3);
  unint64_t v31 = a3 >> 40;
  unint64_t v32 = HIWORD(a3);
  sub_100164CB8(a4, (uint64_t)v33);
  sub_100164CB8(v33, (uint64_t)&v34);
  LOWORD(v35)  = v7;
  WORD1(v35)  = v9;
  BYTE4(v35)  = v10;
  BYTE5(v35)  = v11;
  BYTE6(v35)  = v12;
  BYTE7(v35)  = v13;
  BYTE8(v35)  = v6;
  BYTE9(v35)  = v14;
  BYTE10(v35)  = v21;
  BYTE11(v35)  = v22;
  BYTE12(v35)  = v23;
  BYTE13(v35)  = v24;
  BYTE14(v35)  = v25;
  HIBYTE(v35)  = v26;
  LOBYTE(v36)  = v5;
  BYTE1(v36)  = v27;
  BYTE2(v36)  = v28;
  BYTE3(v36)  = v29;
  BYTE4(v36)  = v30;
  BYTE5(v36)  = v31;
  WORD3(v36)  = v32;
  sub_100164CB8(&v34, (uint64_t)&v36 + 8);
  __int128 v15 = v44;
  a5[8]  = v43;
  a5[9]  = v15;
  a5[10]  = v45[0];
  *(_OWORD *)((char *)a5 + 169)  = *(_OWORD *)((char *)v45 + 9);
  __int128 v16 = v40;
  a5[4]  = v39;
  a5[5]  = v16;
  __int128 v17 = v42;
  a5[6]  = v41;
  a5[7]  = v17;
  __int128 v18 = v36;
  *a5  = v35;
  a5[1]  = v18;
  double result = *(double *)&v37;
  __int128 v20 = v38;
  a5[2]  = v37;
  a5[3]  = v20;
  return result;
}

double IEEE80211Frame.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v18;
    a2[8]  = v17;
    a2[9]  = v5;
    a2[10]  = v19[0];
    *(_OWORD *)((char *)a2 + 169)  = *(_OWORD *)((char *)v19 + 9);
    __int128 v6 = v14;
    a2[4]  = v13;
    a2[5]  = v6;
    __int128 v7 = v16;
    a2[6]  = v15;
    a2[7]  = v7;
    __int128 v8 = v10[1];
    *a2  = v10[0];
    a2[1]  = v8;
    double result = *(double *)&v11;
    __int128 v9 = v12;
    a2[2]  = v11;
    a2[3]  = v9;
  }

  return result;
}

uint64_t IEEE80211Frame.encode(to:)(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100021104(a1, v3);
  dispatch thunk of Encoder.unkeyedContainer()(v15, v3, v4);
  __int128 v13 = *v1;
  *(void *)&__int128 v14 = *((void *)v1 + 2);
  uint64_t v5 = v16;
  uint64_t v6 = v17;
  sub_1000237C8((uint64_t)v15, v16);
  unint64_t v7 = sub_100165BA4();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v13, &type metadata for IEEE80211Frame.Header, v7, v5, v6);
  if (!v2)
  {
    sub_100164CB8((__int128 *)((char *)v1 + 24), (uint64_t)v18);
    sub_100164CB8(v18, (uint64_t)v19);
    if (!sub_10010EDB0((uint64_t)v19))
    {
      sub_100164CB8(v19, (uint64_t)v20);
      sub_100164CB8(v20, (uint64_t)v21);
      __int128 v11 = (char *)&loc_100161418 + 4 * byte_10034ACF7[sub_100165B88((uint64_t)v21)];
      __asm { BR              X10 }
    }

    unint64_t v8 = sub_1000033FC();
    uint64_t v9 = swift_allocError(&type metadata for WiFiError, v8, 0LL, 0LL);
    *(_OWORD *)uint64_t v10 = xmmword_100337020;
    *(_BYTE *)(v10 + 16)  = 2;
    swift_willThrow(v9);
  }

  return sub_100002AC4(v15);
}

void sub_100161518()
{
}

void IEEE80211Frame.hash(into:)(int a1)
{
  uint64_t v2 = (char *)sub_100161588 + 4 * byte_10034ACFB[sub_10010EDB0((uint64_t)v4)];
  __asm { BR              X10 }

uint64_t sub_100161588()
{
  return sub_100163364( v0,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100057AC0);
}

void IEEE80211Frame.hashValue.getter()
{
  Swift::UInt16 v1 = *(_WORD *)(v0 + 2);
  Swift::UInt8 v2 = *(_BYTE *)(v0 + 4);
  Swift::UInt8 v3 = *(_BYTE *)(v0 + 5);
  Swift::UInt8 v4 = *(_BYTE *)(v0 + 6);
  Swift::UInt8 v5 = *(_BYTE *)(v0 + 7);
  Swift::UInt8 v6 = *(_BYTE *)(v0 + 8);
  Swift::UInt8 v7 = *(_BYTE *)(v0 + 9);
  Swift::UInt8 v8 = *(_BYTE *)(v0 + 10);
  Swift::UInt8 v10 = *(_BYTE *)(v0 + 11);
  Swift::UInt8 v11 = *(_BYTE *)(v0 + 12);
  Swift::UInt8 v12 = *(_BYTE *)(v0 + 13);
  Swift::UInt8 v13 = *(_BYTE *)(v0 + 14);
  Swift::UInt8 v14 = *(_BYTE *)(v0 + 15);
  Swift::UInt8 v15 = *(_BYTE *)(v0 + 16);
  Swift::UInt8 v16 = *(_BYTE *)(v0 + 17);
  Swift::UInt8 v17 = *(_BYTE *)(v0 + 18);
  Swift::UInt8 v18 = *(_BYTE *)(v0 + 19);
  Swift::UInt8 v19 = *(_BYTE *)(v0 + 20);
  Swift::UInt8 v20 = *(_BYTE *)(v0 + 21);
  Swift::UInt16 v21 = *(_WORD *)(v0 + 22);
  Hasher._combine(_:)(*(_WORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v18);
  Hasher._combine(_:)(v19);
  Hasher._combine(_:)(v20);
  Hasher._combine(_:)(v21);
  sub_100164CB8((__int128 *)(v0 + 24), (uint64_t)v23);
  sub_100164CB8(v23, (uint64_t)v24);
  uint64_t v9 = (char *)sub_1001617DC + 4 * byte_10034ACFF[sub_10010EDB0((uint64_t)v24)];
  __asm { BR              X10 }

Swift::Int sub_1001617DC()
{
  return Hasher._finalize()();
}

uint64_t sub_10016187C(void *a1)
{
  return IEEE80211Frame.encode(to:)(a1);
}

void sub_1001618DC()
{
}

void sub_10016193C(int a1)
{
  __int128 v2 = v1[9];
  v8[7]  = v1[8];
  v8[8]  = v2;
  v9[0]  = v1[10];
  *(_OWORD *)((char *)v9 + 9)  = *(__int128 *)((char *)v1 + 169);
  __int128 v3 = v1[5];
  void v8[3] = v1[4];
  v8[4]  = v3;
  __int128 v4 = v1[7];
  void v8[5] = v1[6];
  v8[6]  = v4;
  __int128 v7 = *v1;
  v8[0]  = v1[1];
  __int128 v5 = v1[3];
  v8[1]  = v1[2];
  _OWORD v8[2] = v5;
  IEEE80211Frame.Header.hash(into:)(a1, v7, *((unint64_t *)&v7 + 1), *(unint64_t *)&v8[0]);
  sub_100164CB8((_OWORD *)((char *)v8 + 8), (uint64_t)v10);
  Swift::UInt8 v6 = (char *)sub_1001619CC + 4 * byte_10034AD03[sub_10010EDB0((uint64_t)v10)];
  __asm { BR              X10 }

uint64_t sub_1001619CC()
{
  return sub_100163364( (uint64_t)v3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100057AC0);
}

void sub_100161A44(uint64_t a1)
{
  __int128 v2 = v1[9];
  v10[7]  = v1[8];
  v10[8]  = v2;
  v11[0]  = v1[10];
  *(_OWORD *)((char *)v11 + 9)  = *(__int128 *)((char *)v1 + 169);
  __int128 v3 = v1[5];
  v10[3]  = v1[4];
  v10[4]  = v3;
  __int128 v4 = v1[7];
  v10[5]  = v1[6];
  v10[6]  = v4;
  __int128 v5 = v1[1];
  __int128 v9 = *v1;
  v10[0]  = v5;
  __int128 v6 = v1[3];
  v10[1]  = v1[2];
  _OWORD v10[2] = v6;
  Hasher.init(_seed:)(v8, a1);
  IEEE80211Frame.Header.hash(into:)((int)v8, v9, *((unint64_t *)&v9 + 1), *(unint64_t *)&v10[0]);
  sub_100164CB8((_OWORD *)((char *)v10 + 8), (uint64_t)v12);
  __int128 v7 = (char *)sub_100161ADC + 4 * byte_10034AD07[sub_10010EDB0((uint64_t)v12)];
  __asm { BR              X10 }

Swift::Int sub_100161ADC()
{
  return Hasher._finalize()();
}

uint64_t sub_100161B60(__int128 *a1, __int128 *a2)
{
  __int128 v2 = a1[9];
  v16[7]  = a1[8];
  v16[8]  = v2;
  v17[0]  = a1[10];
  *(_OWORD *)((char *)v17 + 9)  = *(__int128 *)((char *)a1 + 169);
  __int128 v3 = a1[5];
  _OWORD v16[3] = a1[4];
  void v16[4] = v3;
  __int128 v4 = a1[7];
  v16[5]  = a1[6];
  v16[6]  = v4;
  __int128 v5 = a1[1];
  __int128 v15 = *a1;
  v16[0]  = v5;
  __int128 v6 = a1[3];
  v16[1]  = a1[2];
  v16[2]  = v6;
  __int128 v7 = a2[9];
  __int128 v26 = a2[8];
  __int128 v27 = v7;
  v28[0]  = a2[10];
  *(_OWORD *)((char *)v28 + 9)  = *(__int128 *)((char *)a2 + 169);
  __int128 v8 = a2[5];
  __int128 v22 = a2[4];
  __int128 v23 = v8;
  __int128 v9 = a2[7];
  __int128 v24 = a2[6];
  __int128 v25 = v9;
  __int128 v10 = a2[1];
  __int128 v18 = *a2;
  __int128 v19 = v10;
  __int128 v11 = a2[3];
  __int128 v20 = a2[2];
  __int128 v21 = v11;
  if (_s7CoreP2P14IEEE80211FrameV6HeaderV23__derived_struct_equalsySbAE_AEtFZ_0( v15,  *((uint64_t *)&v15 + 1),  *(unint64_t *)&v16[0],  v18,  *((uint64_t *)&v18 + 1),  v19))
  {
    sub_100164CB8((_OWORD *)((char *)v16 + 8), (uint64_t)v14);
    Swift::UInt8 v12 = (char *)&loc_100161C40 + 4 * byte_10034AD0B[sub_10010EDB0((uint64_t)v14)];
    __asm { BR              X10 }
  }

  return 0LL;
}

BOOL _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO012SimulatenousF8OfEqualsO21__derived_enum_equalsySbAI_AItFZ_0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a4 & 0x2000000000000000LL) != 0)
  {
    sub_1001647DC(a1, a2, a3, a4, (void (*)(void))sub_100020AFC);
    sub_1001647DC(a5, a6, a7, a8, (void (*)(void))sub_100020AFC);
    uint64_t v17 = a2;
    uint64_t v18 = a3;
  }

  else
  {
    if ((a8 & 0x2000000000000000LL) != 0) {
      return 0LL;
    }
    sub_1001647DC(a1, a2, a3, a4, (void (*)(void))sub_100020AFC);
    sub_1001647DC(a5, a6, a7, a8, (void (*)(void))sub_100020AFC);
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a1, a2);
    if ((v16 & 1) == 0)
    {
      sub_1001647DC(a5, a6, a7, a8, (void (*)(void))sub_1000208D8);
      sub_1001647DC(a1, a2, a3, a4, (void (*)(void))sub_1000208D8);
      return 0LL;
    }

    uint64_t v17 = a3;
    uint64_t v18 = a4;
  }

  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v17, v18);
  char v20 = v19;
  sub_1001647DC(a5, a6, a7, a8, (void (*)(void))sub_1000208D8);
  sub_1001647DC(a1, a2, a3, a4, (void (*)(void))sub_1000208D8);
  return (v20 & 1) != 0;
}

BOOL _s7CoreP2P14IEEE80211FrameV6HeaderV23__derived_struct_equalsySbAE_AEtFZ_0( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if ((_DWORD)a1 != (_DWORD)a4) {
    return 0LL;
  }
  LOBYTE(v16)  = BYTE4(a1);
  BYTE1(v16)  = BYTE5(a1);
  BYTE2(v16)  = BYTE6(a1);
  HIBYTE(v16)  = HIBYTE(a1);
  LOBYTE(v11)  = BYTE4(a4);
  BYTE1(v11)  = BYTE5(a4);
  BYTE2(v11)  = BYTE6(a4);
  HIBYTE(v11)  = HIBYTE(a4);
  LOBYTE(v17)  = BYTE2(a2);
  BYTE1(v17)  = BYTE3(a2);
  BYTE2(v17)  = BYTE4(a2);
  HIBYTE(v17)  = BYTE5(a2);
  LOBYTE(v19)  = BYTE6(a2);
  HIBYTE(v19)  = HIBYTE(a2);
  LOBYTE(v12)  = BYTE2(a5);
  BYTE1(v12)  = BYTE3(a5);
  BYTE2(v12)  = BYTE4(a5);
  HIBYTE(v12)  = BYTE5(a5);
  LOBYTE(v14)  = BYTE6(a5);
  HIBYTE(v14)  = HIBYTE(a5);
  if (v17 != v12 || v19 != v14) {
    return 0LL;
  }
  LOWORD(v18)  = a3;
  BYTE2(v18)  = BYTE2(a3);
  HIBYTE(v18)  = BYTE3(a3);
  LOBYTE(v20)  = BYTE4(a3);
  HIBYTE(v20)  = BYTE5(a3);
  LOWORD(v13)  = a6;
  BYTE2(v13)  = BYTE2(a6);
  HIBYTE(v13)  = BYTE3(a6);
  LOBYTE(v15)  = BYTE4(a6);
  HIBYTE(v15)  = BYTE5(a6);
  return v18 == v13 && v20 == v15 && HIWORD(a3) == HIWORD(a6);
}

void _s7CoreP2P14IEEE80211FrameV10ManagementO21__derived_enum_equalsySbAE_AEtFZ_0(__int128 *a1)
{
  uint64_t v1 = (char *)sub_1001620F4 + 4 * byte_10034AD0F[sub_100165B88((uint64_t)v2)];
  __asm { BR              X10 }

BOOL sub_1001620F4()
{
  uint64_t v1 = sub_100165B94((uint64_t)&v9);
  uint64_t v2 = *(void *)v1;
  int v3 = *(unsigned __int16 *)(v1 + 8);
  int v4 = *(unsigned __int16 *)(v1 + 10);
  uint64_t v5 = *(void *)(v1 + 16);
  sub_100164CB8(v0, (uint64_t)v10);
  BOOL v7 = 0;
  if (!sub_100165B88((uint64_t)v10))
  {
    uint64_t v6 = sub_100165B94((uint64_t)v10);
    if (v2 == *(void *)v6
      && v3 == *(unsigned __int16 *)(v6 + 8)
      && v4 == *(unsigned __int16 *)(v6 + 10)
      && (sub_10007E374(v5, *(void *)(v6 + 16)) & 1) != 0)
    {
      return 1;
    }
  }

  return v7;
}

void _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO21__derived_enum_equalsySbAG_AGtFZ_0( __int128 *a1)
{
  uint64_t v1 = (char *)sub_10016250C + 4 * byte_10034AD13[sub_100164CF8((uint64_t)v2)];
  __asm { BR              X10 }

BOOL sub_10016250C()
{
  uint64_t v2 = sub_100164D70((uint64_t)&v14);
  v15[7]  = *(_OWORD *)(v2 + 112);
  v15[8]  = *(_OWORD *)(v2 + 128);
  v15[9]  = *(_OWORD *)(v2 + 144);
  char v16 = *(_BYTE *)(v2 + 160);
  v15[3]  = *(_OWORD *)(v2 + 48);
  v15[4]  = *(_OWORD *)(v2 + 64);
  v15[5]  = *(_OWORD *)(v2 + 80);
  _BYTE v15[6] = *(_OWORD *)(v2 + 96);
  v15[0]  = *(_OWORD *)v2;
  v15[1]  = *(_OWORD *)(v2 + 16);
  _OWORD v15[2] = *(_OWORD *)(v2 + 32);
  sub_100164CB8(v1, (uint64_t)v11);
  if (sub_100164CF8((uint64_t)v11))
  {
    return 0;
  }

  else
  {
    uint64_t v3 = sub_100164D70((uint64_t)v11);
    __int128 v4 = *(_OWORD *)(v3 + 144);
    v12[8]  = *(_OWORD *)(v3 + 128);
    _OWORD v12[9] = v4;
    char v13 = *(_BYTE *)(v3 + 160);
    __int128 v5 = *(_OWORD *)(v3 + 80);
    void v12[4] = *(_OWORD *)(v3 + 64);
    v12[5]  = v5;
    __int128 v6 = *(_OWORD *)(v3 + 112);
    v12[6]  = *(_OWORD *)(v3 + 96);
    v12[7]  = v6;
    __int128 v7 = *(_OWORD *)(v3 + 16);
    v12[0]  = *(_OWORD *)v3;
    v12[1]  = v7;
    __int128 v8 = *(_OWORD *)(v3 + 48);
    void v12[2] = *(_OWORD *)(v3 + 32);
    v12[3]  = v8;
    sub_100164D04( v0,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000582F4);
    sub_100164D04( (uint64_t)v1,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000582F4);
    BOOL v9 = _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO11PASNRequestV23__derived_struct_equalsySbAI_AItFZ_0( (char *)v15,  (char *)v12);
    sub_100164D04( (uint64_t)v1,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_100057B64);
    sub_100164D04( v0,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_100057B64);
  }

  return v9;
}

BOOL _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO12PASNResponseV23__derived_struct_equalsySbAI_AItFZ_0( char *a1, char *a2)
{
  if (word_10034C718[*a1] != word_10034C718[*a2]) {
    return 0LL;
  }
  if (byte_10034C784[a1[10]] != byte_10034C784[a2[10]]) {
    return 0LL;
  }
  uint64_t v4 = *((void *)a1 + 3);
  int v5 = *((unsigned __int16 *)a1 + 16);
  uint64_t v6 = *((void *)a1 + 5);
  uint64_t v55 = a1[48];
  uint64_t v7 = *((void *)a2 + 3);
  int v8 = *((unsigned __int16 *)a2 + 16);
  uint64_t v9 = *((void *)a2 + 5);
  uint64_t v10 = a2[48];
  if (!sub_10007D9DC(*((void *)a1 + 2), *((void *)a2 + 2))) {
    return 0LL;
  }
  char v11 = sub_10007990C(v4, v7);
  BOOL result = 0LL;
  if ((v11 & 1) != 0 && v5 == v8)
  {
    if ((_s7CoreP2P12NANAttributeO13ServiceIDListV23__derived_struct_equalsySbAE_AEtFZ_0(v6, v9) & 1) != 0
      && byte_10034C784[v55] == byte_10034C784[v10]
      && (sub_10007990C(*((void *)a1 + 7), *((void *)a2 + 7)) & 1) != 0)
    {
      __int128 v13 = *((_OWORD *)a1 + 5);
      v59[0]  = *((_OWORD *)a1 + 4);
      v59[1]  = v13;
      v59[2]  = *((_OWORD *)a1 + 6);
      __int128 v14 = *((_OWORD *)a2 + 5);
      v58[0]  = *((_OWORD *)a2 + 4);
      v58[1]  = v14;
      v58[2]  = *((_OWORD *)a2 + 6);
      if (_s7CoreP2P27IEEE80211InformationElementO43PreAssociationSecurityNegotiationParametersV23__derived_struct_equalsySbAE_AEtFZ_0( (uint64_t *)v59,  (uint64_t *)v58))
      {
        uint64_t v16 = *((void *)a1 + 14);
        unint64_t v15 = *((void *)a1 + 15);
        unint64_t v18 = *((void *)a1 + 16);
        uint64_t v17 = *((void *)a1 + 17);
        uint64_t v20 = *((void *)a1 + 18);
        unint64_t v19 = *((void *)a1 + 19);
        int v21 = a1[160];
        uint64_t v23 = *((void *)a2 + 14);
        unint64_t v22 = *((void *)a2 + 15);
        unint64_t v25 = *((void *)a2 + 16);
        uint64_t v24 = *((void *)a2 + 17);
        uint64_t v27 = *((void *)a2 + 18);
        unint64_t v26 = *((void *)a2 + 19);
        int v28 = a2[160];
        if (v21 == 255)
        {
          if (v28 == 255) {
            return 1LL;
          }
        }

        else if (v28 != 255)
        {
          v60[0]  = v16;
          v60[1]  = v15;
          v60[2]  = v18;
          v60[3]  = v17;
          v60[4]  = v20;
          v60[5]  = v19;
          char v61 = v21;
          uint64_t v62 = v23;
          unint64_t v63 = v22;
          unint64_t v29 = v22;
          unint64_t v64 = v25;
          uint64_t v65 = v24;
          uint64_t v66 = v27;
          unint64_t v67 = v26;
          char v68 = v28;
          uint64_t v30 = v16;
          uint64_t v53 = v16;
          unint64_t v56 = v15;
          unint64_t v31 = v15;
          unint64_t v32 = v18;
          unint64_t v49 = v18;
          uint64_t v50 = v17;
          unint64_t v33 = v25;
          uint64_t v34 = v17;
          uint64_t v35 = v24;
          uint64_t v36 = v27;
          unint64_t v37 = v26;
          sub_10005844C(v30, v31, v32, v34, v20, v19, v21);
          sub_10005844C(v23, v29, v33, v35, v36, v37, v28);
          static IEEE80211InformationElement.__derived_enum_equals(_:_:)((uint64_t)v60);
          char v48 = v38;
          sub_100057CBC(v23, v29, v33, v35, v36, v37, v28);
          sub_100057CBC(v53, v56, v49, v50, v20, v19, v21);
          return (v48 & 1) != 0;
        }

        uint64_t v39 = v16;
        uint64_t v54 = v16;
        unint64_t v57 = v15;
        unint64_t v40 = v15;
        unint64_t v41 = v25;
        uint64_t v42 = v24;
        uint64_t v43 = v20;
        uint64_t v52 = v20;
        uint64_t v44 = v27;
        unint64_t v45 = v19;
        unint64_t v51 = v19;
        unint64_t v46 = v22;
        unint64_t v47 = v26;
        sub_10005844C(v39, v40, v18, v17, v43, v45, v21);
        sub_10005844C(v23, v46, v41, v42, v44, v47, v28);
        sub_100057CBC(v54, v57, v18, v17, v52, v51, v21);
        sub_100057CBC(v23, v46, v41, v42, v44, v47, v28);
      }
    }

    return 0LL;
  }

  return result;
}

BOOL _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO11PASNRequestV23__derived_struct_equalsySbAI_AItFZ_0( char *a1, char *a2)
{
  if (word_10034C718[*a1] != word_10034C718[*a2]) {
    return 0LL;
  }
  if (byte_10034C784[a1[10]] != byte_10034C784[a2[10]]) {
    return 0LL;
  }
  uint64_t v4 = *((void *)a1 + 3);
  int v5 = *((unsigned __int16 *)a1 + 16);
  uint64_t v6 = *((void *)a1 + 5);
  uint64_t v55 = a1[48];
  uint64_t v7 = *((void *)a2 + 3);
  int v8 = *((unsigned __int16 *)a2 + 16);
  uint64_t v9 = *((void *)a2 + 5);
  uint64_t v10 = a2[48];
  if (!sub_10007D9DC(*((void *)a1 + 2), *((void *)a2 + 2))) {
    return 0LL;
  }
  char v11 = sub_10007990C(v4, v7);
  BOOL result = 0LL;
  if ((v11 & 1) != 0 && v5 == v8)
  {
    if ((_s7CoreP2P12NANAttributeO13ServiceIDListV23__derived_struct_equalsySbAE_AEtFZ_0(v6, v9) & 1) != 0
      && byte_10034C784[v55] == byte_10034C784[v10]
      && (sub_10007990C(*((void *)a1 + 7), *((void *)a2 + 7)) & 1) != 0)
    {
      __int128 v13 = *((_OWORD *)a1 + 5);
      v59[0]  = *((_OWORD *)a1 + 4);
      v59[1]  = v13;
      v59[2]  = *((_OWORD *)a1 + 6);
      __int128 v14 = *((_OWORD *)a2 + 5);
      v58[0]  = *((_OWORD *)a2 + 4);
      v58[1]  = v14;
      v58[2]  = *((_OWORD *)a2 + 6);
      if (_s7CoreP2P27IEEE80211InformationElementO43PreAssociationSecurityNegotiationParametersV23__derived_struct_equalsySbAE_AEtFZ_0( (uint64_t *)v59,  (uint64_t *)v58))
      {
        uint64_t v16 = *((void *)a1 + 14);
        unint64_t v15 = *((void *)a1 + 15);
        unint64_t v18 = *((void *)a1 + 16);
        uint64_t v17 = *((void *)a1 + 17);
        uint64_t v20 = *((void *)a1 + 18);
        unint64_t v19 = *((void *)a1 + 19);
        int v21 = a1[160];
        uint64_t v23 = *((void *)a2 + 14);
        unint64_t v22 = *((void *)a2 + 15);
        unint64_t v25 = *((void *)a2 + 16);
        uint64_t v24 = *((void *)a2 + 17);
        uint64_t v27 = *((void *)a2 + 18);
        unint64_t v26 = *((void *)a2 + 19);
        int v28 = a2[160];
        if (v21 == 255)
        {
          if (v28 == 255) {
            return 1LL;
          }
        }

        else if (v28 != 255)
        {
          v60[0]  = v16;
          v60[1]  = v15;
          v60[2]  = v18;
          v60[3]  = v17;
          v60[4]  = v20;
          v60[5]  = v19;
          char v61 = v21;
          uint64_t v62 = v23;
          unint64_t v63 = v22;
          unint64_t v29 = v22;
          unint64_t v64 = v25;
          uint64_t v65 = v24;
          uint64_t v66 = v27;
          unint64_t v67 = v26;
          char v68 = v28;
          uint64_t v30 = v16;
          uint64_t v53 = v16;
          unint64_t v56 = v15;
          unint64_t v31 = v15;
          unint64_t v32 = v18;
          unint64_t v49 = v18;
          uint64_t v50 = v17;
          unint64_t v33 = v25;
          uint64_t v34 = v17;
          uint64_t v35 = v24;
          uint64_t v36 = v27;
          unint64_t v37 = v26;
          sub_10005844C(v30, v31, v32, v34, v20, v19, v21);
          sub_10005844C(v23, v29, v33, v35, v36, v37, v28);
          _s7CoreP2P27IEEE80211InformationElementO21__derived_enum_equalsySbAC_ACtFZ_0((uint64_t)v60);
          char v48 = v38;
          sub_100057CBC(v23, v29, v33, v35, v36, v37, v28);
          sub_100057CBC(v53, v56, v49, v50, v20, v19, v21);
          return (v48 & 1) != 0;
        }

        uint64_t v39 = v16;
        uint64_t v54 = v16;
        unint64_t v57 = v15;
        unint64_t v40 = v15;
        unint64_t v41 = v25;
        uint64_t v42 = v24;
        uint64_t v43 = v20;
        uint64_t v52 = v20;
        uint64_t v44 = v27;
        unint64_t v45 = v19;
        unint64_t v51 = v19;
        unint64_t v46 = v22;
        unint64_t v47 = v26;
        sub_10005844C(v39, v40, v18, v17, v43, v45, v21);
        sub_10005844C(v23, v46, v41, v42, v44, v47, v28);
        sub_100057CBC(v54, v57, v18, v17, v52, v51, v21);
        sub_100057CBC(v23, v46, v41, v42, v44, v47, v28);
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO06ActionD0V8ContentsO21__derived_enum_equalsySbAI_AItFZ_0( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 >> 30)
  {
    if (a1 >> 30 == 1)
    {
      if ((a4 & 0xC0000000) == 0x40000000
        && a1 == a4
        && HIDWORD(a1) == HIDWORD(a4)
        && ((a1 >> 8) & 1) != ((a4 & 0x100) == 0)
        && BYTE2(a1) == BYTE2(a4)
        && (_DWORD)a2 == (_DWORD)a5
        && (sub_10007E460(a3, a6) & 1) != 0)
      {
        return 1LL;
      }
    }

    else if ((a4 & 0xC0000000) == 0x80000000LL && a4 == 0x80000000LL && !(a6 | a5))
    {
      return 1LL;
    }
  }

  else if ((a4 & 0xC0000000) == 0)
  {
    if (a1 == 14LL)
    {
    }

    else if (a4 == 14LL || byte_10034C791[(char)a1] != byte_10034C791[(char)a4])
    {
      return 0LL;
    }
  }

  return 0LL;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO06ActionD0V23__derived_struct_equalsySbAG_AGtFZ_0( char a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (((0x7F7E0907060504uLL >> (8 * a1)) & 0x7F) != ((0x7F7E0907060504uLL >> (8 * a5)) & 0x7F)) {
    return 0LL;
  }
  if (a2 >> 30)
  {
    if (a2 >> 30 == 1)
    {
      if ((a6 & 0xC0000000) == 0x40000000
        && a2 == a6
        && ((a2 >> 8) & 1) != ((a6 & 0x100) == 0)
        && BYTE2(a2) == BYTE2(a6)
        && HIDWORD(a2) == HIDWORD(a6)
        && (_DWORD)a3 == (_DWORD)a7
        && (sub_10007E460(a4, a8) & 1) != 0)
      {
        return 1LL;
      }
    }

    else if ((a6 & 0xC0000000) == 0x80000000LL && a6 == 0x80000000LL && !(a8 | a7))
    {
      return 1LL;
    }
  }

  else if ((a6 & 0xC0000000) == 0)
  {
    if (a2 == 14LL)
    {
    }

    else if (a6 == 14LL || byte_10034C791[(char)a2] != byte_10034C791[(char)a6])
    {
      return 0LL;
    }
  }

  return 0LL;
}

uint64_t sub_100163364( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  LOBYTE(v4)  = *(_BYTE *)(a1 + 184);
  sub_1000581C4( *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  *(void *)(a1 + 152),  *(void *)(a1 + 160),  *(void *)(a1 + 168),  *(void *)(a1 + 176),  v4,  a2);
  return a1;
}

uint64_t _s7CoreP2P14IEEE80211FrameV0D4TypeO010ManagementE0O8rawValueAGSgs5UInt8V_tcfC_0(unsigned __int8 a1)
{
  if (a1 > 0xEu) {
    return 14LL;
  }
  else {
    return byte_10034C79F[(char)a1];
  }
}

unint64_t sub_100163404()
{
  unint64_t result = qword_100409648;
  if (!qword_100409648)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034C6B8, &type metadata for IEEE80211Frame.Header.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409648);
  }

  return result;
}

unint64_t sub_100163448()
{
  unint64_t result = qword_100409650;
  if (!qword_100409650)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Header.FrameControl,  &type metadata for IEEE80211Frame.Header.FrameControl);
    atomic_store(result, (unint64_t *)&qword_100409650);
  }

  return result;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO06ActionD0V8CategoryO8rawValueAISgs5UInt8V_tcfC_0( unsigned __int8 a1)
{
  int v1 = a1;
  uint64_t result = 1LL;
  switch(v1)
  {
    case 4:
      uint64_t result = 0LL;
      break;
    case 5:
      return result;
    case 6:
      uint64_t result = 2LL;
      break;
    case 7:
      uint64_t result = 3LL;
      break;
    case 8:
      goto LABEL_6;
    case 9:
      uint64_t result = 4LL;
      break;
    default:
      if (v1 == 126)
      {
        uint64_t result = 5LL;
      }

      else if (v1 == 127)
      {
        uint64_t result = 6LL;
      }

      else
      {
LABEL_6:
        uint64_t result = 7LL;
      }

      break;
  }

  return result;
}

uint64_t sub_100163500(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_100409970);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_100164710();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.CodingKeys,  &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    sub_100002AC4(a1);
  }

  else
  {
    LOBYTE(v17)  = 0;
    unint64_t v10 = sub_10016B024();
    KeyedDecodingContainer.decode<A>(_:forKey:)( v11,  &type metadata for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup,  &v17,  v3,  &type metadata for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup,  v10);
    char v19 = 1;
    unint64_t v12 = sub_1000702C8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, &type metadata for Data, &v19, v3, &type metadata for Data, v12);
    uint64_t v7 = v17;
    unint64_t v14 = v18;
    char v19 = 2;
    sub_100020AFC(v17, v18);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, &type metadata for Data, &v19, v3, &type metadata for Data, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v15 = v17;
    unint64_t v16 = v18;
    sub_100020AFC(v7, v14);
    sub_100020AFC(v15, v16);
    sub_1000208D8(v7, v14);
    sub_100002AC4(a1);
    sub_1000208D8(v7, v14);
    sub_1000208D8(v15, v16);
  }

  return v7;
}

uint64_t sub_100163730(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_100409968);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_100164798();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.CodingKeys,  &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.CodingKeys,  v9,  v7,  v8);
  if (!v1)
  {
    LOBYTE(v14)  = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)(&v14, v3);
    char v13 = 1;
    unint64_t v10 = sub_1000702C8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, &type metadata for Data, &v13, v3, &type metadata for Data, v10);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  sub_100002AC4(a1);
  return v7;
}

uint64_t sub_10016389C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100002274(&qword_100409930);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100021104(a1, v9);
  unint64_t v11 = sub_100164C74();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm.CodingKeys,  &type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100002AC4(a1);
  }
  char v26 = 0;
  unint64_t v12 = sub_10016AC80();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v21,  &type metadata for IEEE80211Status,  &v26,  v5,  &type metadata for IEEE80211Status,  v12);
  char v13 = v21;
  char v26 = 1;
  unint64_t v14 = sub_10016AE3C();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v21,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters,  &v26,  v5,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters,  v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __int128 v20 = v21;
  uint64_t v15 = v22;
  char v16 = v23;
  uint64_t v17 = v24;
  uint64_t v18 = v25;
  uint64_t result = sub_100002AC4(a1);
  *(_BYTE *)a2  = v13;
  *(_OWORD *)(a2 + 8)  = v20;
  *(void *)(a2 + 24)  = v15;
  *(_BYTE *)(a2 + 32)  = v16;
  *(void *)(a2 + 40)  = v17;
  *(void *)(a2 + 48)  = v18;
  return result;
}

uint64_t sub_100163A48@<X0>( void *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v75 = a5;
  uint64_t v76 = sub_100002274(a2);
  uint64_t v9 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  unint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  uint64_t v77 = a1;
  sub_100021104(a1, v12);
  uint64_t v14 = a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)(a4, a4, v14, v12, v13);
  if (v5)
  {
    sub_100002AC4(v77);
    return sub_100057CBC(0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 255);
  }

  else
  {
    uint64_t v15 = v9;
    LOBYTE(v78)  = 0;
    unint64_t v16 = sub_10016AC80();
    uint64_t v17 = v76;
    uint64_t v18 = v11;
    KeyedDecodingContainer.decode<A>(_:forKey:)( &v89,  &type metadata for IEEE80211Status,  &v78,  v76,  &type metadata for IEEE80211Status,  v16);
    int v70 = v89;
    LOBYTE(v78)  = 1;
    unint64_t v19 = sub_10016AE80();
    KeyedDecodingContainer.decode<A>(_:forKey:)( &v89,  &type metadata for IEEE80211InformationElement.RSNCapability,  &v78,  v17,  &type metadata for IEEE80211InformationElement.RSNCapability,  v19);
    int v69 = BYTE2(v89);
    uint64_t v20 = v90;
    unint64_t v21 = v91;
    int v67 = (unsigned __int16)v89;
    int v68 = (unsigned __int16)v92;
    uint64_t v22 = v93;
    int v23 = v94;
    LOBYTE(v78)  = 2;
    unint64_t v24 = sub_10016AEC4();
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    KeyedDecodingContainer.decode<A>(_:forKey:)( &v89,  &type metadata for IEEE80211InformationElement.ExtendedRSNCapability,  &v78,  v17,  &type metadata for IEEE80211InformationElement.ExtendedRSNCapability,  v24);
    unint64_t v74 = v22;
    int v65 = v23;
    unint64_t v25 = v21;
    unint64_t v66 = v20;
    uint64_t v26 = v89;
    LOBYTE(v78)  = 3;
    unint64_t v27 = sub_10016AE3C();
    swift_bridgeObjectRetain(v26);
    uint64_t v28 = v76;
    KeyedDecodingContainer.decode<A>(_:forKey:)( &v89,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters,  &v78,  v76,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters,  v27);
    uint64_t v64 = v26;
    unint64_t v29 = v91;
    uint64_t v30 = v93;
    unint64_t v31 = v94;
    int v61 = v92;
    char v117 = v92;
    v118  = 4;
    uint64_t v62 = v90;
    uint64_t v63 = v89;
    sub_100058430(v89, v90, v91);
    uint64_t v73 = v30;
    sub_10002255C(v30, v31);
    unint64_t v32 = sub_10016AF08();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v110,  &type metadata for IEEE80211InformationElement,  &v118,  v28,  &type metadata for IEEE80211InformationElement,  v32);
    unint64_t v71 = v31;
    unint64_t v72 = v29;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v28);
    uint64_t v76 = v111;
    uint64_t v33 = v113;
    uint64_t v34 = v114;
    unint64_t v59 = v115;
    unint64_t v60 = v112;
    LODWORD(v15)  = v116;
    uint64_t v35 = v110;
    sub_10005844C(v110, v111, v112, v113, v114, v115, v116);
    sub_100057CBC(0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 255);
    LOBYTE(v78)  = v70;
    WORD4(v78)  = v67;
    BYTE10(v78)  = v69;
    *(void *)&__int128 v79 = v66;
    *((void *)&v79 + 1)  = v25;
    unint64_t v54 = v25;
    LOWORD(v80)  = v68;
    *((void *)&v80 + 1)  = v74;
    LOBYTE(v81)  = v65;
    *((void *)&v81 + 1)  = v64;
    *(void *)&__int128 v82 = v63;
    *((void *)&v82 + 1)  = v62;
    *(void *)&__int128 v83 = v29;
    BYTE8(v83)  = v61;
    *(void *)&__int128 v84 = v73;
    *((void *)&v84 + 1)  = v31;
    uint64_t v36 = v35;
    uint64_t v56 = v35;
    uint64_t v57 = v34;
    *(void *)&__int128 v85 = v35;
    unint64_t v37 = v76;
    unint64_t v39 = v59;
    unint64_t v38 = v60;
    *((void *)&v85 + 1)  = v76;
    *(void *)&__int128 v86 = v60;
    uint64_t v58 = v33;
    *((void *)&v86 + 1)  = v33;
    *(void *)&__int128 v87 = v34;
    *((void *)&v87 + 1)  = v59;
    char v88 = v15;
    sub_100164D80((uint64_t)&v78);
    int v55 = v15;
    sub_100057CBC(v36, v37, v38, v33, v34, v39, v15);
    uint64_t v40 = v62;
    uint64_t v41 = v63;
    sub_100057CA0(v63, v62, v72);
    uint64_t v42 = v73;
    unint64_t v43 = v71;
    sub_100020B40(v73, v71);
    swift_bridgeObjectRelease(v74);
    unint64_t v44 = v54;
    swift_bridgeObjectRelease(v54);
    unint64_t v45 = v66;
    swift_bridgeObjectRelease(v66);
    uint64_t v46 = v64;
    swift_bridgeObjectRelease(v64);
    sub_100002AC4(v77);
    LOBYTE(v89)  = v70;
    LOWORD(v90)  = v67;
    BYTE2(v90)  = v69;
    unint64_t v91 = v45;
    unint64_t v92 = v44;
    LOWORD(v93)  = v68;
    unint64_t v94 = v74;
    char v95 = v65;
    uint64_t v96 = v46;
    uint64_t v97 = v41;
    uint64_t v98 = v40;
    unint64_t v99 = v72;
    v100  = v117;
    uint64_t v101 = v42;
    unint64_t v102 = v43;
    uint64_t v103 = v56;
    uint64_t v104 = v76;
    v105  = v60;
    v106  = v58;
    uint64_t v107 = v57;
    v108  = v59;
    char v109 = v55;
    uint64_t result = sub_10016AF4C((uint64_t)&v89);
    __int128 v48 = v87;
    uint64_t v49 = v75;
    *(_OWORD *)(v75 + 128)  = v86;
    *(_OWORD *)(v49 + 144)  = v48;
    *(_BYTE *)(v49 + 160)  = v88;
    __int128 v50 = v83;
    *(_OWORD *)(v49 + 64)  = v82;
    *(_OWORD *)(v49 + 80)  = v50;
    __int128 v51 = v85;
    *(_OWORD *)(v49 + 96)  = v84;
    *(_OWORD *)(v49 + 112)  = v51;
    __int128 v52 = v79;
    *(_OWORD *)uint64_t v49 = v78;
    *(_OWORD *)(v49 + 16)  = v52;
    __int128 v53 = v81;
    *(_OWORD *)(v49 + 32)  = v80;
    *(_OWORD *)(v49 + 48)  = v53;
  }

  return result;
}

uint64_t sub_1001640A4(void *a1)
{
  uint64_t v2 = sub_100002274(&qword_100409980);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100021104(a1, v6);
  unint64_t v8 = sub_100164688();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IEEE80211Frame.Management.Beacon.CodingKeys,  &type metadata for IEEE80211Frame.Management.Beacon.CodingKeys,  v8,  v6,  v7);
  char v18 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)(&v18, v2);
  char v17 = 1;
  KeyedDecodingContainer.decode(_:forKey:)(&v17, v2);
  char v16 = 2;
  KeyedDecodingContainer.decode(_:forKey:)(&v16, v2);
  uint64_t v11 = sub_100002274(&qword_100409668);
  char v15 = 3;
  uint64_t v12 = sub_10016B068( &qword_100409988,  (void (*)(void))sub_10016AF08,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, v11, &v15, v2, v11, v12);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100002AC4(a1);
  return v9;
}

unint64_t sub_10016428C(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_100409990);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_100163404();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IEEE80211Frame.Header.CodingKeys,  &type metadata for IEEE80211Frame.Header.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return sub_100002AC4(a1);
  }
  HIBYTE(v20)  = 0;
  unint64_t v10 = sub_10016B0D0();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v20,  &type metadata for IEEE80211Frame.Header.FrameControl,  (char *)&v20 + 7,  v3,  &type metadata for IEEE80211Frame.Header.FrameControl,  v10);
  uint64_t v11 = (unsigned __int16)v20;
  LOBYTE(v20)  = 1;
  unsigned __int16 v12 = KeyedDecodingContainer.decode(_:forKey:)(&v20, v3);
  HIBYTE(v20)  = 2;
  unint64_t v13 = sub_1000290F8();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v20,  &type metadata for WiFiAddress,  (char *)&v20 + 7,  v3,  &type metadata for WiFiAddress,  v13);
  uint64_t v19 = v20;
  uint64_t v18 = BYTE1(v20);
  uint64_t v17 = BYTE2(v20);
  uint64_t v16 = BYTE3(v20);
  v15[11]  = BYTE4(v20);
  v15[10]  = BYTE5(v20);
  HIBYTE(v20)  = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v20,  &type metadata for WiFiAddress,  (char *)&v20 + 7,  v3,  &type metadata for WiFiAddress,  v13);
  v15[9]  = v20;
  v15[8]  = BYTE1(v20);
  v15[7]  = BYTE2(v20);
  _BYTE v15[6] = BYTE3(v20);
  v15[5]  = BYTE4(v20);
  v15[4]  = BYTE5(v20);
  HIBYTE(v20)  = 4;
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v20,  &type metadata for WiFiAddress,  (char *)&v20 + 7,  v3,  &type metadata for WiFiAddress,  v13);
  v15[3]  = v20;
  v15[1]  = BYTE4(v20);
  _OWORD v15[2] = BYTE5(v20);
  LOBYTE(v20)  = 5;
  KeyedDecodingContainer.decode(_:forKey:)(&v20, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100002AC4(a1);
  return v11 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)v12 << 16) | (v19 << 32) | (v18 << 40) | (v17 << 48) | (v16 << 56);
}

uint64_t sub_1001645B0( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  LOBYTE(v4)  = *(_BYTE *)(a1 + 160);
  sub_1000581C4( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  *(void *)(a1 + 152),  v4,  a2);
  return a1;
}

uint64_t sub_100164620(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100164654(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_100164688()
{
  unint64_t result = qword_100409660;
  if (!qword_100409660)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034C668, &type metadata for IEEE80211Frame.Management.Beacon.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409660);
  }

  return result;
}

unint64_t sub_1001646CC()
{
  unint64_t result = qword_100409678;
  if (!qword_100409678)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement,  &type metadata for IEEE80211InformationElement);
    atomic_store(result, (unint64_t *)&qword_100409678);
  }

  return result;
}

unint64_t sub_100164710()
{
  unint64_t result = qword_100409688;
  if (!qword_100409688)
  {
    unint64_t result = swift_getWitnessTable( &unk_10034C618,  &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409688);
  }

  return result;
}

unint64_t sub_100164754()
{
  unint64_t result = qword_100409690;
  if (!qword_100409690)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup,  &type metadata for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup);
    atomic_store(result, (unint64_t *)&qword_100409690);
  }

  return result;
}

unint64_t sub_100164798()
{
  unint64_t result = qword_1004096A0;
  if (!qword_1004096A0)
  {
    unint64_t result = swift_getWitnessTable( &unk_10034C5C8,  &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004096A0);
  }

  return result;
}

uint64_t sub_1001647DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  if ((a4 & 0x2000000000000000LL) != 0) {
    return ((uint64_t (*)(uint64_t, uint64_t))a5)(a2, a3);
  }
  a5();
  return ((uint64_t (*)(uint64_t, uint64_t))a5)(a3, a4);
}

uint64_t sub_100164838(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100164874(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1001648B0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1001648EC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100164928(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_1004096A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100164970(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_1004096A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

void *sub_1001649B8(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[4];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

void *sub_100164A00(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

void *sub_100164A44( void *a1, void (*a2)(void, void, void), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  a2(*a1, a1[1], a1[2]);
  a3(v5, v6);
  return a1;
}

unint64_t sub_100164A90()
{
  unint64_t result = qword_1004096C0;
  if (!qword_1004096C0)
  {
    unint64_t result = swift_getWitnessTable( &unk_10034C578,  &type metadata for IEEE80211Frame.Management.Authentication.PASNRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004096C0);
  }

  return result;
}

unint64_t sub_100164AD4()
{
  unint64_t result = qword_1004096C8;
  if (!qword_1004096C8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Status,  &type metadata for IEEE80211Status);
    atomic_store(result, (unint64_t *)&qword_1004096C8);
  }

  return result;
}

unint64_t sub_100164B18()
{
  unint64_t result = qword_1004096D0;
  if (!qword_1004096D0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.RSNCapability,  &type metadata for IEEE80211InformationElement.RSNCapability);
    atomic_store(result, (unint64_t *)&qword_1004096D0);
  }

  return result;
}

unint64_t sub_100164B5C()
{
  unint64_t result = qword_1004096D8;
  if (!qword_1004096D8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.ExtendedRSNCapability,  &type metadata for IEEE80211InformationElement.ExtendedRSNCapability);
    atomic_store(result, (unint64_t *)&qword_1004096D8);
  }

  return result;
}

unint64_t sub_100164BA0()
{
  unint64_t result = qword_1004096E0;
  if (!qword_1004096E0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters);
    atomic_store(result, (unint64_t *)&qword_1004096E0);
  }

  return result;
}

unint64_t sub_100164BE4()
{
  unint64_t result = qword_1004096F0;
  if (!qword_1004096F0)
  {
    unint64_t result = swift_getWitnessTable( &unk_10034C528,  &type metadata for IEEE80211Frame.Management.Authentication.PASNResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004096F0);
  }

  return result;
}

void *sub_100164C28( void *a1, void (*a2)(void, void, void), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  a2(a1[1], a1[2], a1[3]);
  a3(v5, v6);
  return a1;
}

unint64_t sub_100164C74()
{
  unint64_t result = qword_100409700;
  if (!qword_100409700)
  {
    unint64_t result = swift_getWitnessTable( &unk_10034C4D8,  &type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409700);
  }

  return result;
}

uint64_t sub_100164CB8(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[2];
  *(_OWORD *)(a2 + 16)  = a1[1];
  *(_OWORD *)(a2 + 32)  = v3;
  *(_OWORD *)a2  = v2;
  __int128 v4 = a1[3];
  __int128 v5 = a1[4];
  __int128 v6 = a1[6];
  *(_OWORD *)(a2 + 80)  = a1[5];
  *(_OWORD *)(a2 + 96)  = v6;
  *(_OWORD *)(a2 + 48)  = v4;
  *(_OWORD *)(a2 + 64)  = v5;
  __int128 v7 = a1[7];
  __int128 v8 = a1[8];
  __int128 v9 = a1[9];
  *(_BYTE *)(a2 + 160)  = *((_BYTE *)a1 + 160);
  *(_OWORD *)(a2 + 128)  = v8;
  *(_OWORD *)(a2 + 144)  = v9;
  *(_OWORD *)(a2 + 112)  = v7;
  return a2;
}

uint64_t sub_100164CF8(uint64_t a1)
{
  return *(void *)(a1 + 88) >> 62;
}

uint64_t sub_100164D04( uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(_BYTE *)(a1 + 160);
  a2( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  *(void *)(a1 + 152),  v4);
  return a1;
}

uint64_t sub_100164D70(uint64_t result)
{
  *(void *)(result + 88) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_100164D80(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  unint64_t v7 = *(void *)(a1 + 80);
  uint64_t v8 = *(void *)(a1 + 96);
  unint64_t v9 = *(void *)(a1 + 104);
  uint64_t v10 = *(void *)(a1 + 112);
  unint64_t v16 = *(void *)(a1 + 128);
  unint64_t v17 = *(void *)(a1 + 120);
  uint64_t v14 = *(void *)(a1 + 144);
  uint64_t v15 = *(void *)(a1 + 136);
  unint64_t v13 = *(void *)(a1 + 152);
  char v12 = *(_BYTE *)(a1 + 160);
  swift_bridgeObjectRetain(*(void *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  sub_100058430(v5, v6, v7);
  sub_10002255C(v8, v9);
  sub_10005844C(v10, v17, v16, v15, v14, v13, v12);
  return a1;
}

uint64_t sub_100164E58@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100021104(a1, v5);
  dispatch thunk of Decoder.unkeyedContainer()(v63, v5, v6);
  if (v2) {
    return sub_100002AC4(a1);
  }
  uint64_t v7 = v64;
  uint64_t v8 = v65;
  sub_1000237C8((uint64_t)v63, v64);
  unint64_t v9 = sub_10016AA20();
  UnkeyedDecodingContainer.inferredDecode<A>()(v7, (uint64_t)&type metadata for IEEE80211Frame.Header, v8, v9);
  __int16 v11 = v60;
  __int16 v12 = WORD1(v60);
  char v13 = BYTE4(v60);
  char v14 = BYTE5(v60);
  char v15 = BYTE6(v60);
  __int128 v66 = v60;
  int v69 = BYTE7(v60);
  char v51 = BYTE9(v60);
  char v52 = BYTE8(v60);
  char v49 = BYTE11(v60);
  char v50 = BYTE10(v60);
  char v47 = BYTE13(v60);
  char v48 = BYTE12(v60);
  char v45 = HIBYTE(v60);
  char v46 = BYTE14(v60);
  char v43 = BYTE1(v61[0]);
  char v44 = v61[0];
  uint64_t v67 = *(void *)&v61[0];
  char v41 = BYTE3(v61[0]);
  char v42 = BYTE2(v61[0]);
  char v39 = BYTE5(v61[0]);
  char v40 = BYTE4(v61[0]);
  char v16 = sub_100071514(2uLL, 2LL, v60);
  int v70 = WORD3(v61[0]);
  switch(v16)
  {
    case 0:
      char v17 = IEEE80211Frame.Header.FrameControl.managementSubtype.getter(v60);
      switch(v17)
      {
        case 7:
          uint64_t v18 = v64;
          uint64_t v36 = v65;
          sub_1000237C8((uint64_t)v63, v64);
          unint64_t v19 = sub_10016ABE0();
          UnkeyedDecodingContainer.inferredDecode<A>()( v18,  (uint64_t)&type metadata for IEEE80211Frame.Management.Beacon,  v36,  v19);
          uint64_t v57 = v54;
          LODWORD(v58)  = v55;
          *((void *)&v58 + 1)  = *((void *)&v55 + 1);
          sub_10016AC24((uint64_t)&v57);
          break;
        case 10:
          uint64_t v22 = v64;
          uint64_t v38 = v65;
          sub_1000237C8((uint64_t)v63, v64);
          unint64_t v23 = sub_10016AB80();
          UnkeyedDecodingContainer.inferredDecode<A>()( v22,  (uint64_t)&type metadata for IEEE80211Frame.Management.Authentication,  v38,  v23);
          sub_100164CB8(&v60, (uint64_t)v53);
          sub_100164CB8(v53, (uint64_t)&v54);
          sub_10016ABC4((uint64_t)&v54);
          sub_100164CB8((__int128 *)&v54, (uint64_t)&v57);
          NANBitmap.Channel.operatingClass.getter(&v57);
          unint64_t v24 = (__int128 *)&v57;
          goto LABEL_16;
        case 12:
          uint64_t v20 = v64;
          uint64_t v37 = v65;
          sub_1000237C8((uint64_t)v63, v64);
          unint64_t v21 = sub_10016AB20();
          UnkeyedDecodingContainer.inferredDecode<A>()( v20,  (uint64_t)&type metadata for IEEE80211Frame.Management.ActionFrame,  v37,  v21);
          LOBYTE(v57)  = v54;
          __int128 v58 = v55;
          uint64_t v59 = v56;
          sub_10016AB64((uint64_t)&v57);
          break;
        case 14:
          unint64_t v25 = sub_1000033FC();
          uint64_t v26 = swift_allocError(&type metadata for WiFiError, v25, 0LL, 0LL);
          *(_OWORD *)uint64_t v27 = xmmword_100337020;
          *(_BYTE *)(v27 + 16)  = 2;
          swift_willThrow(v26);
          sub_100002AC4(v63);
          return sub_100002AC4(a1);
        default:
          LOBYTE(v57)  = v17;
          sub_10016AB04((uint64_t)&v57);
          break;
      }

      sub_100164CB8((__int128 *)&v57, (uint64_t)&v60);
      NANBitmap.Channel.operatingClass.getter(&v60);
      goto LABEL_15;
    case 1:
      sub_10016AAD0((uint64_t)&v60);
      goto LABEL_15;
    case 2:
      sub_10016AA9C((uint64_t)&v60);
      goto LABEL_15;
    case 3:
      sub_10016AA64((uint64_t)&v60);
LABEL_15:
      unint64_t v24 = &v60;
LABEL_16:
      sub_100164CB8(v24, (uint64_t)v68);
      sub_100002AC4(v63);
      sub_100164CB8(v68, (uint64_t)&v57);
      LOWORD(v60)  = v11;
      WORD1(v60)  = v12;
      BYTE4(v60)  = v13;
      BYTE5(v60)  = v14;
      BYTE6(v60)  = v15;
      BYTE7(v60)  = v69;
      BYTE8(v60)  = v52;
      BYTE9(v60)  = v51;
      BYTE10(v60)  = v50;
      BYTE11(v60)  = v49;
      BYTE12(v60)  = v48;
      BYTE13(v60)  = v47;
      BYTE14(v60)  = v46;
      HIBYTE(v60)  = v45;
      LOBYTE(v61[0])  = v44;
      BYTE1(v61[0])  = v43;
      BYTE2(v61[0])  = v42;
      BYTE3(v61[0])  = v41;
      BYTE4(v61[0])  = v40;
      BYTE5(v61[0])  = v39;
      WORD3(v61[0])  = v70;
      sub_100164CB8((__int128 *)&v57, (uint64_t)v61 + 8);
      uint64_t result = sub_100002AC4(a1);
      __int128 v28 = v61[8];
      a2[8]  = v61[7];
      a2[9]  = v28;
      a2[10]  = v62[0];
      *(_OWORD *)((char *)a2 + 169)  = *(_OWORD *)((char *)v62 + 9);
      __int128 v29 = v61[4];
      a2[4]  = v61[3];
      a2[5]  = v29;
      __int128 v30 = v61[6];
      a2[6]  = v61[5];
      a2[7]  = v30;
      __int128 v31 = v61[0];
      *a2  = v60;
      a2[1]  = v31;
      __int128 v32 = v61[2];
      a2[2]  = v61[1];
      a2[3]  = v32;
      break;
    default:
      unint64_t v33 = sub_1000033FC();
      uint64_t v34 = swift_allocError(&type metadata for WiFiError, v33, 0LL, 0LL);
      *(_OWORD *)uint64_t v35 = xmmword_100337020;
      *(_BYTE *)(v35 + 16)  = 2;
      swift_willThrow(v34);
      uint64_t result = swift_unexpectedError(v34, "CoreP2P/IEEE80211Frame.swift", 28LL, 1LL, 52LL);
      __break(1u);
      break;
  }

  return result;
}

uint64_t sub_1001653CC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100021104(a1, v5);
  dispatch thunk of Decoder.unkeyedContainer()(v50, v5, v6);
  if (v2) {
    return sub_100002AC4(a1);
  }
  uint64_t v7 = v51;
  uint64_t v8 = v52;
  sub_1000237C8((uint64_t)v50, v51);
  unint64_t v9 = sub_10016AC3C();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)( &type metadata for IEEE80211Frame.Management.Authentication.AuthenticationAlgorithm,  &type metadata for IEEE80211Frame.Management.Authentication.AuthenticationAlgorithm,  v9,  v7,  v8);
  uint64_t v10 = v51;
  uint64_t v11 = v52;
  sub_1000237C8((uint64_t)v50, v51);
  __int16 v12 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v10, v11);
  uint64_t v13 = v51;
  uint64_t v14 = v52;
  sub_1000237C8((uint64_t)v50, v51);
  unint64_t v15 = sub_10016AC80();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)( &type metadata for IEEE80211Status,  &type metadata for IEEE80211Status,  v15,  v13,  v14);
  if (((1 << SLOBYTE(v48[0])) & 0x77) == 0)
  {
    if (LOBYTE(v48[0]) == 3)
    {
      v39[0]  = 3;
      goto LABEL_6;
    }

    switch(v12)
    {
      case 3:
        uint64_t v21 = v51;
        uint64_t v22 = v52;
        sub_1000237C8((uint64_t)v50, v51);
        unint64_t v23 = sub_10016ACF0();
        UnkeyedDecodingContainer.inferredDecode<A>()( v21,  (uint64_t)&type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm,  v22,  v23);
        v39[0]  = v30[0];
        *(_OWORD *)&v39[8]  = *(_OWORD *)&v30[8];
        *(void *)&v39[24]  = *(void *)&v30[24];
        LOBYTE(v40[0])  = v31[0];
        *(_OWORD *)((char *)v40 + 8)  = *(_OWORD *)&v31[8];
        sub_10016AD34((uint64_t)v39);
        goto LABEL_7;
      case 2:
        uint64_t v24 = v51;
        uint64_t v25 = v52;
        sub_1000237C8((uint64_t)v50, v51);
        unint64_t v26 = sub_10016AD60();
        UnkeyedDecodingContainer.inferredDecode<A>()( v24,  (uint64_t)&type metadata for IEEE80211Frame.Management.Authentication.PASNResponse,  v25,  v26);
        __int128 v36 = v45;
        __int128 v37 = v46;
        char v38 = v47;
        __int128 v32 = v41;
        __int128 v33 = v42;
        __int128 v34 = v43;
        __int128 v35 = v44;
        *(_OWORD *)__int128 v30 = *(_OWORD *)v39;
        *(_OWORD *)&v30[16]  = *(_OWORD *)&v39[16];
        *(_OWORD *)__int128 v31 = v40[0];
        *(_OWORD *)&v31[16]  = v40[1];
        sub_10016ADA4((uint64_t)v30);
        goto LABEL_17;
      case 1:
        uint64_t v18 = v51;
        uint64_t v19 = v52;
        sub_1000237C8((uint64_t)v50, v51);
        unint64_t v20 = sub_10016ADD0();
        UnkeyedDecodingContainer.inferredDecode<A>()( v18,  (uint64_t)&type metadata for IEEE80211Frame.Management.Authentication.PASNRequest,  v19,  v20);
        __int128 v36 = v45;
        __int128 v37 = v46;
        char v38 = v47;
        __int128 v32 = v41;
        __int128 v33 = v42;
        __int128 v34 = v43;
        __int128 v35 = v44;
        *(_OWORD *)__int128 v30 = *(_OWORD *)v39;
        *(_OWORD *)&v30[16]  = *(_OWORD *)&v39[16];
        *(_OWORD *)__int128 v31 = v40[0];
        *(_OWORD *)&v31[16]  = v40[1];
        sub_10016AE14((uint64_t)v30);
LABEL_17:
        char v17 = (__int128 *)v30;
        goto LABEL_8;
    }

    unint64_t v27 = sub_1000033FC();
    uint64_t v28 = swift_allocError(&type metadata for WiFiError, v27, 0LL, 0LL);
    *(void *)uint64_t v29 = 0LL;
    *(void *)(v29 + 8)  = 0LL;
    *(_BYTE *)(v29 + 16)  = 2;
    swift_willThrow(v28);
    sub_100002AC4(v50);
    return sub_100002AC4(a1);
  }

  v39[0]  = v48[0];
LABEL_6:
  *(_WORD *)&v39[2]  = v12;
  v39[4]  = v49;
  sub_10016ACC4((uint64_t)v39);
LABEL_7:
  char v17 = (__int128 *)v39;
LABEL_8:
  sub_100164CB8(v17, (uint64_t)v48);
  sub_100002AC4(v50);
  sub_100002AC4(a1);
  return sub_100164CB8(v48, a2);
}

uint64_t sub_100165754(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100021104(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v25, v3, v4);
  if (v1)
  {
    sub_100002AC4(a1);
  }

  else
  {
    uint64_t v5 = v26;
    uint64_t v6 = v27;
    sub_1000237C8((uint64_t)v25, v26);
    unint64_t v7 = sub_10016B114();
    UnkeyedDecodingContainer.inferredDecode<A>()( v5,  (uint64_t)&type metadata for IEEE80211Frame.Management.ActionFrame.Category,  v6,  v7);
    uint64_t v3 = v23;
    if (((1 << v23) & 0xE) == 0)
    {
      if (((1 << v23) & 0x11) != 0)
      {
        uint64_t v9 = v26;
        uint64_t v10 = v27;
        sub_1000237C8((uint64_t)v25, v26);
        if (dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v9, v10) == 9)
        {
          uint64_t v11 = v26;
          uint64_t v12 = v27;
          sub_1000237C8((uint64_t)v25, v26);
          unint64_t v13 = sub_100070284();
          dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)( &type metadata for OUI,  &type metadata for OUI,  v13,  v11,  v12);
          if ((sub_100023504(v23 | (v24 << 16), 0x9A6F50u) & 1) != 0)
          {
            uint64_t v14 = v26;
            uint64_t v15 = v27;
            sub_1000237C8((uint64_t)v25, v26);
            unint64_t v16 = sub_10016B19C();
            UnkeyedDecodingContainer.inferredDecode<A>()(v14, (uint64_t)&type metadata for NANActionFrame, v15, v16);
          }
        }
      }

      else
      {
        uint64_t v17 = v26;
        uint64_t v18 = v27;
        sub_1000237C8((uint64_t)v25, v26);
        unint64_t v19 = sub_100070284();
        dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)( &type metadata for OUI,  &type metadata for OUI,  v19,  v17,  v18);
        if ((sub_100023504(v23 | (v24 << 16), 0xF21700u) & 1) != 0)
        {
          uint64_t v20 = v26;
          uint64_t v21 = v27;
          sub_1000237C8((uint64_t)v25, v26);
          unint64_t v22 = sub_10016B158();
          UnkeyedDecodingContainer.inferredDecode<A>()(v20, (uint64_t)&type metadata for AWDLActionFrame, v21, v22);
        }
      }
    }

    sub_100002AC4(v25);
    sub_100002AC4(a1);
  }

  return v3;
}

unint64_t sub_100165A34()
{
  unint64_t result = qword_100409708;
  if (!qword_100409708)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.ActionFrame.Category,  &type metadata for IEEE80211Frame.Management.ActionFrame.Category);
    atomic_store(result, (unint64_t *)&qword_100409708);
  }

  return result;
}

unint64_t sub_100165A78()
{
  unint64_t result = qword_100409710;
  if (!qword_100409710)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OUI, &type metadata for OUI);
    atomic_store(result, (unint64_t *)&qword_100409710);
  }

  return result;
}

unint64_t sub_100165ABC()
{
  unint64_t result = qword_100409718;
  if (!qword_100409718)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AWDLActionFrame,  &type metadata for AWDLActionFrame);
    atomic_store(result, (unint64_t *)&qword_100409718);
  }

  return result;
}

unint64_t sub_100165B00()
{
  unint64_t result = qword_100409720;
  if (!qword_100409720)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.ActionFrame.PublicActionField,  &type metadata for IEEE80211Frame.Management.ActionFrame.PublicActionField);
    atomic_store(result, (unint64_t *)&qword_100409720);
  }

  return result;
}

unint64_t sub_100165B44()
{
  unint64_t result = qword_100409728;
  if (!qword_100409728)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANActionFrame,  &type metadata for NANActionFrame);
    atomic_store(result, (unint64_t *)&qword_100409728);
  }

  return result;
}

uint64_t sub_100165B88(uint64_t a1)
{
  return (*(void *)(a1 + 88) >> 60) & 3LL;
}

uint64_t sub_100165B94(uint64_t result)
{
  *(void *)(result + 88) &= 0xCFFFFFFFFFFFFFFFLL;
  return result;
}

unint64_t sub_100165BA4()
{
  unint64_t result = qword_100409730;
  if (!qword_100409730)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Header,  &type metadata for IEEE80211Frame.Header);
    atomic_store(result, (unint64_t *)&qword_100409730);
  }

  return result;
}

unint64_t sub_100165BE8()
{
  unint64_t result = qword_100409738;
  if (!qword_100409738)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.Authentication,  &type metadata for IEEE80211Frame.Management.Authentication);
    atomic_store(result, (unint64_t *)&qword_100409738);
  }

  return result;
}

unint64_t sub_100165C2C()
{
  unint64_t result = qword_100409740;
  if (!qword_100409740)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.ActionFrame,  &type metadata for IEEE80211Frame.Management.ActionFrame);
    atomic_store(result, (unint64_t *)&qword_100409740);
  }

  return result;
}

unint64_t sub_100165C70()
{
  unint64_t result = qword_100409748;
  if (!qword_100409748)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.Beacon,  &type metadata for IEEE80211Frame.Management.Beacon);
    atomic_store(result, (unint64_t *)&qword_100409748);
  }

  return result;
}

unint64_t sub_100165CB8()
{
  unint64_t result = qword_100409750;
  if (!qword_100409750)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.FrameType.ManagementType,  &type metadata for IEEE80211Frame.FrameType.ManagementType);
    atomic_store(result, (unint64_t *)&qword_100409750);
  }

  return result;
}

unint64_t sub_100165D00()
{
  unint64_t result = qword_100409758;
  if (!qword_100409758)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.FrameType,  &type metadata for IEEE80211Frame.FrameType);
    atomic_store(result, (unint64_t *)&qword_100409758);
  }

  return result;
}

unint64_t sub_100165D48()
{
  unint64_t result = qword_100409760;
  if (!qword_100409760)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Header.FrameControl,  &type metadata for IEEE80211Frame.Header.FrameControl);
    atomic_store(result, (unint64_t *)&qword_100409760);
  }

  return result;
}

unint64_t sub_100165D90()
{
  unint64_t result = qword_100409768;
  if (!qword_100409768)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Header.FrameControl,  &type metadata for IEEE80211Frame.Header.FrameControl);
    atomic_store(result, (unint64_t *)&qword_100409768);
  }

  return result;
}

unint64_t sub_100165DD8()
{
  unint64_t result = qword_100409770;
  if (!qword_100409770)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Header.FrameControl,  &type metadata for IEEE80211Frame.Header.FrameControl);
    atomic_store(result, (unint64_t *)&qword_100409770);
  }

  return result;
}

unint64_t sub_100165E20()
{
  unint64_t result = qword_100409778;
  if (!qword_100409778)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Header.FrameControl,  &type metadata for IEEE80211Frame.Header.FrameControl);
    atomic_store(result, (unint64_t *)&qword_100409778);
  }

  return result;
}

unint64_t sub_100165E68()
{
  unint64_t result = qword_100409780;
  if (!qword_100409780)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Header,  &type metadata for IEEE80211Frame.Header);
    atomic_store(result, (unint64_t *)&qword_100409780);
  }

  return result;
}

unint64_t sub_100165EB0()
{
  unint64_t result = qword_100409788;
  if (!qword_100409788)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Contents,  &type metadata for IEEE80211Frame.Contents);
    atomic_store(result, (unint64_t *)&qword_100409788);
  }

  return result;
}

unint64_t sub_100165EF8()
{
  unint64_t result = qword_100409790;
  if (!qword_100409790)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.Beacon,  &type metadata for IEEE80211Frame.Management.Beacon);
    atomic_store(result, (unint64_t *)&qword_100409790);
  }

  return result;
}

unint64_t sub_100165F40()
{
  unint64_t result = qword_100409798;
  if (!qword_100409798)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup,  &type metadata for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup);
    atomic_store(result, (unint64_t *)&qword_100409798);
  }

  return result;
}

unint64_t sub_100165F88()
{
  unint64_t result = qword_1004097A0;
  if (!qword_1004097A0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.Authentication.AuthenticationAlgorithm,  &type metadata for IEEE80211Frame.Management.Authentication.AuthenticationAlgorithm);
    atomic_store(result, (unint64_t *)&qword_1004097A0);
  }

  return result;
}

unint64_t sub_100165FD0()
{
  unint64_t result = qword_1004097A8;
  if (!qword_1004097A8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.MessageType,  &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.MessageType);
    atomic_store(result, (unint64_t *)&qword_1004097A8);
  }

  return result;
}

unint64_t sub_100166018()
{
  unint64_t result = qword_1004097B0;
  if (!qword_1004097B0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit,  &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit);
    atomic_store(result, (unint64_t *)&qword_1004097B0);
  }

  return result;
}

unint64_t sub_100166060()
{
  unint64_t result = qword_1004097B8;
  if (!qword_1004097B8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm,  &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm);
    atomic_store(result, (unint64_t *)&qword_1004097B8);
  }

  return result;
}

unint64_t sub_1001660A8()
{
  unint64_t result = qword_1004097C0;
  if (!qword_1004097C0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals,  &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals);
    atomic_store(result, (unint64_t *)&qword_1004097C0);
  }

  return result;
}

unint64_t sub_1001660F0()
{
  unint64_t result = qword_1004097C8;
  if (!qword_1004097C8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.Authentication.PASNRequest,  &type metadata for IEEE80211Frame.Management.Authentication.PASNRequest);
    atomic_store(result, (unint64_t *)&qword_1004097C8);
  }

  return result;
}

unint64_t sub_100166138()
{
  unint64_t result = qword_1004097D0;
  if (!qword_1004097D0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.Authentication.PASNResponse,  &type metadata for IEEE80211Frame.Management.Authentication.PASNResponse);
    atomic_store(result, (unint64_t *)&qword_1004097D0);
  }

  return result;
}

unint64_t sub_100166180()
{
  unint64_t result = qword_1004097D8;
  if (!qword_1004097D8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.Authentication.PASNConfirm,  &type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm);
    atomic_store(result, (unint64_t *)&qword_1004097D8);
  }

  return result;
}

unint64_t sub_1001661C8()
{
  unint64_t result = qword_1004097E0;
  if (!qword_1004097E0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.Authentication,  &type metadata for IEEE80211Frame.Management.Authentication);
    atomic_store(result, (unint64_t *)&qword_1004097E0);
  }

  return result;
}

unint64_t sub_100166210()
{
  unint64_t result = qword_1004097E8;
  if (!qword_1004097E8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.ActionFrame.Category,  &type metadata for IEEE80211Frame.Management.ActionFrame.Category);
    atomic_store(result, (unint64_t *)&qword_1004097E8);
  }

  return result;
}

unint64_t sub_100166258()
{
  unint64_t result = qword_1004097F0;
  if (!qword_1004097F0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.ActionFrame.PublicActionField,  &type metadata for IEEE80211Frame.Management.ActionFrame.PublicActionField);
    atomic_store(result, (unint64_t *)&qword_1004097F0);
  }

  return result;
}

unint64_t sub_1001662A0()
{
  unint64_t result = qword_1004097F8;
  if (!qword_1004097F8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.ActionFrame.Contents,  &type metadata for IEEE80211Frame.Management.ActionFrame.Contents);
    atomic_store(result, (unint64_t *)&qword_1004097F8);
  }

  return result;
}

unint64_t sub_1001662E8()
{
  unint64_t result = qword_100409800;
  if (!qword_100409800)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.ActionFrame,  &type metadata for IEEE80211Frame.Management.ActionFrame);
    atomic_store(result, (unint64_t *)&qword_100409800);
  }

  return result;
}

unint64_t sub_100166330()
{
  unint64_t result = qword_100409808;
  if (!qword_100409808)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management,  &type metadata for IEEE80211Frame.Management);
    atomic_store(result, (unint64_t *)&qword_100409808);
  }

  return result;
}

unint64_t sub_100166378()
{
  unint64_t result = qword_100409810;
  if (!qword_100409810)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame,  &type metadata for IEEE80211Frame);
    atomic_store(result, (unint64_t *)&qword_100409810);
  }

  return result;
}

uint64_t destroy for IEEE80211Frame(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 56);
  unint64_t v2 = *(void *)(result + 112);
  if (v1 >> 16 != 4294967293 && v1 >> 17 != 0x7FFFFFFF || (v2 & 0x3FFFFFFFFFFFFFFELL) != 0) {
    return sub_100057AC0( *(void *)(result + 24),  *(void *)(result + 32),  *(void *)(result + 40),  *(void *)(result + 48),  v1,  *(void *)(result + 64),  *(void *)(result + 72),  *(void *)(result + 80),  *(void *)(result + 88),  *(void *)(result + 96),  *(void *)(result + 104),  v2,  *(void *)(result + 120),  *(void *)(result + 128),  *(void *)(result + 136),  *(void *)(result + 144),  *(void *)(result + 152),  *(void *)(result + 160),  *(void *)(result + 168),  *(void *)(result + 176),  *(_BYTE *)(result + 184));
  }
  return result;
}

uint64_t initializeWithCopy for IEEE80211Frame(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  unint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(void *)(a2 + 112);
  if ((v3 >> 16 == 4294967293 || v3 >> 17 == 0x7FFFFFFF) && (v4 & 0x3FFFFFFFFFFFFFFELL) == 0)
  {
    __int128 v14 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152)  = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168)  = v14;
    *(_BYTE *)(a1 + 184)  = *(_BYTE *)(a2 + 184);
    __int128 v15 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88)  = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104)  = v15;
    __int128 v16 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120)  = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136)  = v16;
    __int128 v17 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40)  = v17;
    __int128 v18 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72)  = v18;
  }

  else
  {
    uint64_t v7 = *(void *)(a2 + 24);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v10 = *(void *)(a2 + 40);
    unint64_t v9 = *(void *)(a2 + 48);
    uint64_t v11 = *(void *)(a2 + 64);
    unint64_t v12 = *(void *)(a2 + 72);
    uint64_t v20 = *(void *)(a2 + 88);
    uint64_t v21 = *(void *)(a2 + 96);
    unint64_t v22 = *(void *)(a2 + 104);
    uint64_t v23 = *(void *)(a2 + 120);
    unint64_t v24 = *(void *)(a2 + 128);
    uint64_t v25 = *(void *)(a2 + 136);
    unint64_t v26 = *(void *)(a2 + 144);
    unint64_t v27 = *(void *)(a2 + 152);
    uint64_t v28 = *(void *)(a2 + 160);
    uint64_t v29 = *(void *)(a2 + 168);
    unint64_t v30 = *(void *)(a2 + 176);
    char v31 = *(_BYTE *)(a2 + 184);
    uint64_t v13 = *(void *)(a2 + 80);
    sub_100058250(v7, v8, v10, v9, v3, v11, v12, v13, v20, v21, v22, v4, v23, v24, v25, v26, v27, v28, v29, v30, v31);
    *(void *)(a1 + 24)  = v7;
    *(void *)(a1 + 32)  = v8;
    *(void *)(a1 + 40)  = v10;
    *(void *)(a1 + 48)  = v9;
    *(void *)(a1 + 56)  = v3;
    *(void *)(a1 + 64)  = v11;
    *(void *)(a1 + 72)  = v12;
    *(void *)(a1 + 80)  = v13;
    *(void *)(a1 + 88)  = v20;
    *(void *)(a1 + 96)  = v21;
    *(void *)(a1 + 104)  = v22;
    *(void *)(a1 + 112)  = v4;
    *(void *)(a1 + 120)  = v23;
    *(void *)(a1 + 128)  = v24;
    *(void *)(a1 + 136)  = v25;
    *(void *)(a1 + 144)  = v26;
    *(void *)(a1 + 152)  = v27;
    *(void *)(a1 + 160)  = v28;
    *(void *)(a1 + 168)  = v29;
    *(void *)(a1 + 176)  = v30;
    *(_BYTE *)(a1 + 184)  = v31;
  }

  return a1;
}

uint64_t assignWithCopy for IEEE80211Frame(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(_WORD *)(a1 + 2)  = *(_WORD *)(a2 + 2);
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5)  = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6)  = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7)  = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9)  = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10)  = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11)  = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 12)  = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13)  = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 14)  = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(a1 + 15)  = *(_BYTE *)(a2 + 15);
  *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17)  = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18)  = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19)  = *(_BYTE *)(a2 + 19);
  *(_BYTE *)(a1 + 20)  = *(_BYTE *)(a2 + 20);
  *(_BYTE *)(a1 + 21)  = *(_BYTE *)(a2 + 21);
  *(_WORD *)(a1 + 22)  = *(_WORD *)(a2 + 22);
  uint64_t v3 = a1 + 24;
  unint64_t v4 = (__int128 *)(a2 + 24);
  unint64_t v5 = *(void *)(a1 + 56);
  unint64_t v6 = v5 >> 17;
  unint64_t v7 = v5 >> 16;
  unint64_t v8 = *(void *)(a2 + 56);
  unint64_t v9 = *(void *)(a2 + 112);
  BOOL v11 = v8 >> 17 == 0x7FFFFFFF || v8 >> 16 == 4294967293;
  if ((v9 & 0x3FFFFFFFFFFFFFFELL) != 0) {
    BOOL v11 = 0;
  }
  BOOL v12 = v7 == 4294967293 || v6 == 0x7FFFFFFF;
  if (!v12 || (*(void *)(a1 + 112) & 0x3FFFFFFFFFFFFFFELL) != 0)
  {
    if (v11)
    {
      sub_1001669F8(a1 + 24);
      __int128 v22 = v4[1];
      __int128 v21 = v4[2];
      *(_OWORD *)uint64_t v3 = *v4;
      *(_OWORD *)(v3 + 16)  = v22;
      *(_OWORD *)(v3 + 32)  = v21;
      __int128 v23 = v4[6];
      __int128 v25 = v4[3];
      __int128 v24 = v4[4];
      *(_OWORD *)(v3 + 80)  = v4[5];
      *(_OWORD *)(v3 + 96)  = v23;
      *(_OWORD *)(v3 + 48)  = v25;
      *(_OWORD *)(v3 + 64)  = v24;
      __int128 v27 = v4[8];
      __int128 v26 = v4[9];
      __int128 v28 = v4[7];
      *(_BYTE *)(v3 + 160)  = *((_BYTE *)v4 + 160);
      *(_OWORD *)(v3 + 128)  = v27;
      *(_OWORD *)(v3 + 144)  = v26;
      *(_OWORD *)(v3 + 112)  = v28;
    }

    else
    {
      uint64_t v29 = *(void *)(a2 + 24);
      uint64_t v30 = *(void *)(a2 + 32);
      uint64_t v31 = *(void *)(a2 + 40);
      unint64_t v32 = *(void *)(a2 + 48);
      uint64_t v33 = *(void *)(a2 + 64);
      unint64_t v34 = *(void *)(a2 + 72);
      uint64_t v35 = *(void *)(a2 + 80);
      uint64_t v60 = *(void *)(a2 + 88);
      uint64_t v62 = *(void *)(a2 + 96);
      unint64_t v64 = *(void *)(a2 + 104);
      uint64_t v66 = *(void *)(a2 + 120);
      unint64_t v68 = *(void *)(a2 + 128);
      uint64_t v70 = *(void *)(a2 + 136);
      unint64_t v72 = *(void *)(a2 + 144);
      unint64_t v74 = *(void *)(a2 + 152);
      uint64_t v76 = *(void *)(a2 + 160);
      uint64_t v78 = *(void *)(a2 + 168);
      unint64_t v80 = *(void *)(a2 + 176);
      char v82 = *(_BYTE *)(a2 + 184);
      sub_100058250( v29,  v30,  v31,  v32,  v8,  v33,  v34,  v35,  v60,  v62,  v64,  v9,  v66,  v68,  v70,  v72,  v74,  v76,  v78,  v80,  v82);
      uint64_t v36 = *(void *)(a1 + 24);
      uint64_t v37 = *(void *)(a1 + 32);
      *(void *)(a1 + 24)  = v29;
      *(void *)(a1 + 32)  = v30;
      uint64_t v38 = *(void *)(a1 + 40);
      unint64_t v39 = *(void *)(a1 + 48);
      *(void *)(a1 + 40)  = v31;
      *(void *)(a1 + 48)  = v32;
      uint64_t v40 = *(void *)(a1 + 56);
      uint64_t v41 = *(void *)(a1 + 64);
      *(void *)(a1 + 56)  = v8;
      *(void *)(a1 + 64)  = v33;
      unint64_t v42 = *(void *)(a1 + 72);
      uint64_t v43 = *(void *)(a1 + 80);
      *(void *)(a1 + 72)  = v34;
      *(void *)(a1 + 80)  = v35;
      __int128 v44 = *(_OWORD *)(a1 + 88);
      *(void *)(a1 + 88)  = v60;
      *(void *)(a1 + 96)  = v62;
      __int128 v45 = *(_OWORD *)(a1 + 104);
      *(void *)(a1 + 104)  = v64;
      *(void *)(a1 + 112)  = v9;
      __int128 v46 = *(_OWORD *)(a1 + 120);
      *(void *)(a1 + 120)  = v66;
      *(void *)(a1 + 128)  = v68;
      __int128 v47 = *(_OWORD *)(a1 + 136);
      *(void *)(a1 + 136)  = v70;
      *(void *)(a1 + 144)  = v72;
      __int128 v48 = *(_OWORD *)(a1 + 152);
      *(void *)(a1 + 152)  = v74;
      *(void *)(a1 + 160)  = v76;
      uint64_t v49 = *(void *)(a1 + 168);
      unint64_t v50 = *(void *)(a1 + 176);
      *(void *)(a1 + 168)  = v78;
      *(void *)(a1 + 176)  = v80;
      char v51 = *(_BYTE *)(a1 + 184);
      *(_BYTE *)(a1 + 184)  = v82;
      sub_100057AC0( v36,  v37,  v38,  v39,  v40,  v41,  v42,  v43,  v44,  *((uint64_t *)&v44 + 1),  v45,  *((unint64_t *)&v45 + 1),  v46,  *((unint64_t *)&v46 + 1),  v47,  *((unint64_t *)&v47 + 1),  v48,  *((uint64_t *)&v48 + 1),  v49,  v50,  v51);
    }
  }

  else if (v11)
  {
    __int128 v13 = *v4;
    __int128 v14 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40)  = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56)  = v14;
    *(_OWORD *)uint64_t v3 = v13;
    __int128 v15 = *(_OWORD *)(a2 + 72);
    __int128 v16 = *(_OWORD *)(a2 + 88);
    __int128 v17 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104)  = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120)  = v17;
    *(_OWORD *)(a1 + 72)  = v15;
    *(_OWORD *)(a1 + 88)  = v16;
    __int128 v18 = *(_OWORD *)(a2 + 136);
    __int128 v19 = *(_OWORD *)(a2 + 152);
    __int128 v20 = *(_OWORD *)(a2 + 168);
    *(_BYTE *)(a1 + 184)  = *(_BYTE *)(a2 + 184);
    *(_OWORD *)(a1 + 152)  = v19;
    *(_OWORD *)(a1 + 168)  = v20;
    *(_OWORD *)(a1 + 136)  = v18;
  }

  else
  {
    uint64_t v52 = *(void *)(a2 + 24);
    uint64_t v53 = *(void *)(a2 + 32);
    uint64_t v55 = *(void *)(a2 + 40);
    unint64_t v54 = *(void *)(a2 + 48);
    uint64_t v56 = *(void *)(a2 + 64);
    unint64_t v57 = *(void *)(a2 + 72);
    uint64_t v61 = *(void *)(a2 + 88);
    uint64_t v63 = *(void *)(a2 + 96);
    unint64_t v65 = *(void *)(a2 + 104);
    uint64_t v67 = *(void *)(a2 + 120);
    unint64_t v69 = *(void *)(a2 + 128);
    uint64_t v71 = *(void *)(a2 + 136);
    unint64_t v73 = *(void *)(a2 + 144);
    unint64_t v75 = *(void *)(a2 + 152);
    uint64_t v77 = *(void *)(a2 + 160);
    uint64_t v79 = *(void *)(a2 + 168);
    unint64_t v81 = *(void *)(a2 + 176);
    char v83 = *(_BYTE *)(a2 + 184);
    uint64_t v58 = *(void *)(a2 + 80);
    sub_100058250(v52, v53, v55, v54, v8, v56, v57, v58, v61, v63, v65, v9, v67, v69, v71, v73, v75, v77, v79, v81, v83);
    *(void *)(a1 + 24)  = v52;
    *(void *)(a1 + 32)  = v53;
    *(void *)(a1 + 40)  = v55;
    *(void *)(a1 + 48)  = v54;
    *(void *)(a1 + 56)  = v8;
    *(void *)(a1 + 64)  = v56;
    *(void *)(a1 + 72)  = v57;
    *(void *)(a1 + 80)  = v58;
    *(void *)(a1 + 88)  = v61;
    *(void *)(a1 + 96)  = v63;
    *(void *)(a1 + 104)  = v65;
    *(void *)(a1 + 112)  = v9;
    *(void *)(a1 + 120)  = v67;
    *(void *)(a1 + 128)  = v69;
    *(void *)(a1 + 136)  = v71;
    *(void *)(a1 + 144)  = v73;
    *(void *)(a1 + 152)  = v75;
    *(void *)(a1 + 160)  = v77;
    *(void *)(a1 + 168)  = v79;
    *(void *)(a1 + 176)  = v81;
    *(_BYTE *)(a1 + 184)  = v83;
  }

  return a1;
}

uint64_t sub_1001669F8(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for IEEE80211Frame(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32)  = a2[2];
  *(_OWORD *)(a1 + 48)  = v4;
  *(_OWORD *)a1  = v2;
  *(_OWORD *)(a1 + 16)  = v3;
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[7];
  *(_OWORD *)(a1 + 96)  = a2[6];
  *(_OWORD *)(a1 + 112)  = v7;
  *(_OWORD *)(a1 + 64)  = v5;
  *(_OWORD *)(a1 + 80)  = v6;
  __n128 result = (__n128)a2[8];
  __int128 v9 = a2[9];
  __int128 v10 = a2[10];
  *(_OWORD *)(a1 + 169)  = *(__int128 *)((char *)a2 + 169);
  *(_OWORD *)(a1 + 144)  = v9;
  *(_OWORD *)(a1 + 160)  = v10;
  *(__n128 *)(a1 + 128)  = result;
  return result;
}

uint64_t assignWithTake for IEEE80211Frame(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 4)  = *(_OWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 20)  = *(_DWORD *)(a2 + 20);
  uint64_t v3 = a1 + 24;
  uint64_t v4 = a2 + 24;
  unint64_t v5 = *(void *)(a1 + 56);
  unint64_t v6 = *(void *)(a1 + 112);
  if ((v5 >> 16 == 4294967293 || v5 >> 17 == 0x7FFFFFFF) && (v6 & 0x3FFFFFFFFFFFFFFELL) == 0) {
    goto LABEL_17;
  }
  unint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 112);
  if (((v9 & 0xFFFFFFFFFFFF0000LL) == 0xFFFFFFFD0000LL || v9 >> 17 == 0x7FFFFFFF) && (v10 & 0x3FFFFFFFFFFFFFFELL) == 0)
  {
    sub_1001669F8(a1 + 24);
LABEL_17:
    __int128 v30 = *(_OWORD *)(v4 + 144);
    *(_OWORD *)(v3 + 128)  = *(_OWORD *)(v4 + 128);
    *(_OWORD *)(v3 + 144)  = v30;
    *(_BYTE *)(v3 + 160)  = *(_BYTE *)(v4 + 160);
    __int128 v31 = *(_OWORD *)(v4 + 80);
    *(_OWORD *)(v3 + 64)  = *(_OWORD *)(v4 + 64);
    *(_OWORD *)(v3 + 80)  = v31;
    __int128 v32 = *(_OWORD *)(v4 + 112);
    *(_OWORD *)(v3 + 96)  = *(_OWORD *)(v4 + 96);
    *(_OWORD *)(v3 + 112)  = v32;
    __int128 v33 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)uint64_t v3 = *(_OWORD *)v4;
    *(_OWORD *)(v3 + 16)  = v33;
    __int128 v34 = *(_OWORD *)(v4 + 48);
    *(_OWORD *)(v3 + 32)  = *(_OWORD *)(v4 + 32);
    *(_OWORD *)(v3 + 48)  = v34;
    return a1;
  }

  char v13 = *(_BYTE *)(a2 + 184);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 40);
  unint64_t v17 = *(void *)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 64);
  unint64_t v19 = *(void *)(a1 + 72);
  uint64_t v20 = *(void *)(a1 + 80);
  __int128 v21 = *(_OWORD *)(a1 + 88);
  unint64_t v22 = *(void *)(a1 + 104);
  __int128 v23 = *(_OWORD *)(a1 + 120);
  __int128 v24 = *(_OWORD *)(a1 + 136);
  __int128 v25 = *(_OWORD *)(a1 + 152);
  uint64_t v26 = *(void *)(a1 + 168);
  unint64_t v27 = *(void *)(a1 + 176);
  char v28 = *(_BYTE *)(a1 + 184);
  *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40)  = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56)  = v9;
  __int128 v29 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80)  = v29;
  *(_OWORD *)(a1 + 96)  = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112)  = v10;
  *(_OWORD *)(a1 + 120)  = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136)  = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152)  = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168)  = *(_OWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 184)  = v13;
  sub_100057AC0( v14,  v15,  v16,  v17,  v5,  v18,  v19,  v20,  v21,  *((uint64_t *)&v21 + 1),  v22,  v6,  v23,  *((unint64_t *)&v23 + 1),  v24,  *((unint64_t *)&v24 + 1),  v25,  *((uint64_t *)&v25 + 1),  v26,  v27,  v28);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211Frame(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 185)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unsigned int v3 = *(_DWORD *)(a1 + 58);
  int v4 = -4 - v3;
  if (v3 <= 0x80000000) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFC)
  {
    *(_OWORD *)(result + 168)  = 0u;
    *(_OWORD *)(result + 152)  = 0u;
    *(_OWORD *)(result + 136)  = 0u;
    *(_OWORD *)(result + 120)  = 0u;
    *(_OWORD *)(result + 104)  = 0u;
    *(_OWORD *)(result + 88)  = 0u;
    *(_OWORD *)(result + 72)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(_BYTE *)(result + 184)  = 0;
    *(void *)__n128 result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(_BYTE *)(result + 185)  = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(_BYTE *)(result + 185)  = 0;
    }
    if (a2)
    {
      *(_OWORD *)(result + 40)  = 0u;
      *(_OWORD *)(result + 24)  = 0u;
      *(void *)(result + 56)  = (unint64_t)(-3 - a2) << 16;
      *(_OWORD *)(result + 64)  = 0u;
      *(_OWORD *)(result + 80)  = 0u;
      *(_OWORD *)(result + 96)  = 0u;
      *(_OWORD *)(result + 112)  = 0u;
      *(_OWORD *)(result + 128)  = 0u;
      *(_OWORD *)(result + 144)  = 0u;
      *(_OWORD *)(result + 160)  = 0u;
      *(_OWORD *)(result + 169)  = 0u;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame()
{
  return &type metadata for IEEE80211Frame;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.FrameType()
{
  return &type metadata for IEEE80211Frame.FrameType;
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame.FrameType.ManagementType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF2) {
    return ((uint64_t (*)(void))((char *)&loc_100166D6C + 4 * byte_10034AD30[v4]))();
  }
  *a1  = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_100166DA0 + 4 * byte_10034AD2B[v4]))();
}

uint64_t sub_100166DA0(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100166DA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x100166DB0LL);
  }
  return result;
}

uint64_t sub_100166DBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x100166DC4LL);
  }
  *(_BYTE *)__n128 result = a2 + 13;
  return result;
}

uint64_t sub_100166DC8(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100166DD0(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.FrameType.ManagementType()
{
  return &type metadata for IEEE80211Frame.FrameType.ManagementType;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Header()
{
  return &type metadata for IEEE80211Frame.Header;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Header.FrameControl()
{
  return &type metadata for IEEE80211Frame.Header.FrameControl;
}

uint64_t destroy for IEEE80211Frame.Contents(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 32);
  if ((v1 >> 16) <= 0x80000000) {
    return sub_100057AC0( *(void *)result,  *(void *)(result + 8),  *(void *)(result + 16),  *(void *)(result + 24),  v1,  *(void *)(result + 40),  *(void *)(result + 48),  *(void *)(result + 56),  *(void *)(result + 64),  *(void *)(result + 72),  *(void *)(result + 80),  *(void *)(result + 88),  *(void *)(result + 96),  *(void *)(result + 104),  *(void *)(result + 112),  *(void *)(result + 120),  *(void *)(result + 128),  *(void *)(result + 136),  *(void *)(result + 144),  *(void *)(result + 152),  *(_BYTE *)(result + 160));
  }
  return result;
}

uint64_t initializeWithCopy for IEEE80211Frame.Contents(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = a2[4];
  if ((v3 >> 16) > 0x80000000)
  {
    __int128 v12 = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 128)  = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 144)  = v12;
    *(_BYTE *)(a1 + 160)  = *((_BYTE *)a2 + 160);
    __int128 v13 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64)  = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80)  = v13;
    __int128 v14 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 96)  = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 112)  = v14;
    __int128 v15 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1  = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16)  = v15;
    __int128 v16 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32)  = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48)  = v16;
  }

  else
  {
    uint64_t v4 = a2[1];
    uint64_t v5 = a2[2];
    unint64_t v6 = a2[3];
    uint64_t v7 = a2[5];
    unint64_t v8 = a2[6];
    uint64_t v9 = a2[8];
    uint64_t v18 = a2[9];
    unint64_t v19 = a2[10];
    unint64_t v20 = a2[11];
    uint64_t v21 = a2[12];
    unint64_t v22 = a2[13];
    uint64_t v23 = a2[14];
    unint64_t v24 = a2[15];
    unint64_t v25 = a2[16];
    uint64_t v26 = a2[17];
    uint64_t v27 = a2[18];
    unint64_t v28 = a2[19];
    char v29 = *((_BYTE *)a2 + 160);
    uint64_t v10 = *a2;
    uint64_t v11 = a2[7];
    sub_100058250(*a2, v4, v5, v6, v3, v7, v8, v11, v9, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29);
    *(void *)a1  = v10;
    *(void *)(a1 + 8)  = v4;
    *(void *)(a1 + 16)  = v5;
    *(void *)(a1 + 24)  = v6;
    *(void *)(a1 + 32)  = v3;
    *(void *)(a1 + 40)  = v7;
    *(void *)(a1 + 48)  = v8;
    *(void *)(a1 + 56)  = v11;
    *(void *)(a1 + 64)  = v9;
    *(void *)(a1 + 72)  = v18;
    *(void *)(a1 + 80)  = v19;
    *(void *)(a1 + 88)  = v20;
    *(void *)(a1 + 96)  = v21;
    *(void *)(a1 + 104)  = v22;
    *(void *)(a1 + 112)  = v23;
    *(void *)(a1 + 120)  = v24;
    *(void *)(a1 + 128)  = v25;
    *(void *)(a1 + 136)  = v26;
    *(void *)(a1 + 144)  = v27;
    *(void *)(a1 + 152)  = v28;
    *(_BYTE *)(a1 + 160)  = v29;
  }

  return a1;
}

uint64_t assignWithCopy for IEEE80211Frame.Contents(uint64_t a1, __int128 *a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  unint64_t v5 = *((void *)a2 + 4);
  unint64_t v6 = v5 >> 16;
  if ((v4 >> 16) > 0x80000000)
  {
    if (v6 <= 0x80000000)
    {
      uint64_t v31 = *(void *)a2;
      uint64_t v32 = *((void *)a2 + 1);
      uint64_t v33 = *((void *)a2 + 2);
      unint64_t v34 = *((void *)a2 + 3);
      uint64_t v35 = *((void *)a2 + 5);
      unint64_t v36 = *((void *)a2 + 6);
      uint64_t v49 = *((void *)a2 + 9);
      unint64_t v51 = *((void *)a2 + 10);
      unint64_t v53 = *((void *)a2 + 11);
      uint64_t v55 = *((void *)a2 + 12);
      unint64_t v57 = *((void *)a2 + 13);
      uint64_t v59 = *((void *)a2 + 14);
      unint64_t v61 = *((void *)a2 + 15);
      unint64_t v63 = *((void *)a2 + 16);
      uint64_t v65 = *((void *)a2 + 17);
      uint64_t v67 = *((void *)a2 + 18);
      unint64_t v69 = *((void *)a2 + 19);
      char v71 = *((_BYTE *)a2 + 160);
      uint64_t v37 = *((void *)a2 + 8);
      uint64_t v38 = *((void *)a2 + 7);
      sub_100058250( *(void *)a2,  v32,  v33,  v34,  v5,  v35,  v36,  v38,  v37,  v49,  v51,  v53,  v55,  v57,  v59,  v61,  v63,  v65,  v67,  v69,  v71);
      *(void *)a1  = v31;
      *(void *)(a1 + 8)  = v32;
      *(void *)(a1 + 16)  = v33;
      *(void *)(a1 + 24)  = v34;
      *(void *)(a1 + 32)  = v5;
      *(void *)(a1 + 40)  = v35;
      *(void *)(a1 + 48)  = v36;
      *(void *)(a1 + 56)  = v38;
      *(void *)(a1 + 64)  = v37;
      *(void *)(a1 + 72)  = v49;
      *(void *)(a1 + 80)  = v51;
      *(void *)(a1 + 88)  = v53;
      *(void *)(a1 + 96)  = v55;
      *(void *)(a1 + 104)  = v57;
      *(void *)(a1 + 112)  = v59;
      *(void *)(a1 + 120)  = v61;
      *(void *)(a1 + 128)  = v63;
      *(void *)(a1 + 136)  = v65;
      *(void *)(a1 + 144)  = v67;
      *(void *)(a1 + 152)  = v69;
      *(_BYTE *)(a1 + 160)  = v71;
      return a1;
    }

__n128 initializeWithTake for IEEE80211Frame.Contents(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16)  = a2[1];
  *(_OWORD *)(a1 + 32)  = v3;
  *(_OWORD *)a1  = v2;
  __int128 v4 = a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[6];
  *(_OWORD *)(a1 + 80)  = a2[5];
  *(_OWORD *)(a1 + 96)  = v6;
  *(_OWORD *)(a1 + 48)  = v4;
  *(_OWORD *)(a1 + 64)  = v5;
  __n128 result = (__n128)a2[7];
  __int128 v8 = a2[8];
  __int128 v9 = a2[9];
  *(_BYTE *)(a1 + 160)  = *((_BYTE *)a2 + 160);
  *(_OWORD *)(a1 + 128)  = v8;
  *(_OWORD *)(a1 + 144)  = v9;
  *(__n128 *)(a1 + 112)  = result;
  return result;
}

uint64_t assignWithTake for IEEE80211Frame.Contents(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  unint64_t v5 = *(void *)(a2 + 32);
  if ((v5 >> 16) > 0x80000000)
  {
    sub_100057AC0( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  v4,  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  *(void *)(a1 + 152),  *(_BYTE *)(a1 + 160));
LABEL_5:
    __int128 v24 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128)  = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144)  = v24;
    *(_BYTE *)(a1 + 160)  = *(_BYTE *)(a2 + 160);
    __int128 v25 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80)  = v25;
    __int128 v26 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96)  = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112)  = v26;
    __int128 v27 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1  = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16)  = v27;
    __int128 v28 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48)  = v28;
    return a1;
  }

  uint64_t v6 = *(void *)(a2 + 152);
  char v7 = *(_BYTE *)(a2 + 160);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 40);
  unint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 56);
  __int128 v15 = *(_OWORD *)(a1 + 64);
  __int128 v16 = *(_OWORD *)(a1 + 80);
  __int128 v17 = *(_OWORD *)(a1 + 96);
  __int128 v18 = *(_OWORD *)(a1 + 112);
  __int128 v19 = *(_OWORD *)(a1 + 128);
  uint64_t v20 = *(void *)(a1 + 144);
  unint64_t v21 = *(void *)(a1 + 152);
  char v22 = *(_BYTE *)(a1 + 160);
  __int128 v23 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v23;
  *(void *)(a1 + 32)  = v5;
  *(_OWORD *)(a1 + 40)  = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72)  = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88)  = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104)  = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120)  = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136)  = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152)  = v6;
  *(_BYTE *)(a1 + 160)  = v7;
  sub_100057AC0( v8,  v9,  v10,  v11,  v4,  v12,  v13,  v14,  v15,  *((uint64_t *)&v15 + 1),  v16,  *((unint64_t *)&v16 + 1),  v17,  *((unint64_t *)&v17 + 1),  v18,  *((unint64_t *)&v18 + 1),  v19,  *((uint64_t *)&v19 + 1),  v20,  v21,  v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211Frame.Contents(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 161)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unsigned int v3 = *(_DWORD *)(a1 + 34);
  if (v3 > 0x80000000) {
    unsigned int v4 = -v3;
  }
  else {
    unsigned int v4 = 0;
  }
  if (v4 >= 4) {
    return v4 - 3;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame.Contents( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_BYTE *)(result + 160)  = 0;
    *(_OWORD *)(result + 128)  = 0u;
    *(_OWORD *)(result + 144)  = 0u;
    *(_OWORD *)(result + 96)  = 0u;
    *(_OWORD *)(result + 112)  = 0u;
    *(_OWORD *)(result + 64)  = 0u;
    *(_OWORD *)(result + 80)  = 0u;
    *(_OWORD *)(result + 32)  = 0u;
    *(_OWORD *)(result + 48)  = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16)  = 0u;
    *(_DWORD *)__n128 result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(_BYTE *)(result + 161)  = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(_BYTE *)(result + 161)  = 0;
    }
    if (a2)
    {
      *(_OWORD *)__n128 result = 0u;
      *(_OWORD *)(result + 16)  = 0u;
      *(void *)(result + 32)  = (unint64_t)(-3 - a2) << 16;
      *(_OWORD *)(result + 40)  = 0u;
      *(_OWORD *)(result + 56)  = 0u;
      *(_OWORD *)(result + 72)  = 0u;
      *(_OWORD *)(result + 88)  = 0u;
      *(_OWORD *)(result + 104)  = 0u;
      *(_OWORD *)(result + 120)  = 0u;
      *(_OWORD *)(result + 136)  = 0u;
      *(_OWORD *)(result + 145)  = 0u;
    }
  }

  return result;
}

double sub_100167588(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 152)  = 0LL;
    double result = 0.0;
    *(_OWORD *)(a1 + 136)  = 0u;
    *(_OWORD *)(a1 + 120)  = 0u;
    *(_OWORD *)(a1 + 104)  = 0u;
    *(_OWORD *)(a1 + 88)  = 0u;
    *(_OWORD *)(a1 + 72)  = 0u;
    *(_OWORD *)(a1 + 56)  = 0u;
    *(_OWORD *)(a1 + 40)  = 0u;
    *(_OWORD *)(a1 + 24)  = 0u;
    *(_OWORD *)(a1 + 8)  = 0u;
    *(_BYTE *)(a1 + 160)  = 0;
    *(void *)a1  = a2 ^ 0x80000000;
  }

  else if (a2)
  {
    double result = 0.0;
    *(_OWORD *)a1  = 0u;
    *(_OWORD *)(a1 + 16)  = 0u;
    *(void *)(a1 + 32)  = (unint64_t)-a2 << 16;
    *(_OWORD *)(a1 + 40)  = 0u;
    *(_OWORD *)(a1 + 56)  = 0u;
    *(_OWORD *)(a1 + 72)  = 0u;
    *(_OWORD *)(a1 + 88)  = 0u;
    *(_OWORD *)(a1 + 104)  = 0u;
    *(_OWORD *)(a1 + 120)  = 0u;
    *(_OWORD *)(a1 + 136)  = 0u;
    *(_OWORD *)(a1 + 145)  = 0u;
  }

  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Contents()
{
  return &type metadata for IEEE80211Frame.Contents;
}

uint64_t destroy for IEEE80211Frame.Management(uint64_t a1, uint64_t a2)
{
  return sub_10016784C(a1, a2, sub_100057AC0);
}

uint64_t initializeWithCopy for IEEE80211Frame.Management(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1001678B4( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100058250);
}

uint64_t *assignWithCopy for IEEE80211Frame.Management(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_100167A00( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_100058250,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, uint64_t, uint64_t, int))sub_100057AC0);
}

uint64_t *assignWithTake for IEEE80211Frame.Management(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_100167B90( a1,  a2,  a3,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, uint64_t, uint64_t, char))sub_100057AC0);
}

uint64_t getEnumTagSinglePayload for IEEE80211Frame.Management(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 161)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 34);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for IEEE80211Frame.Management(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 152)  = 0LL;
    double result = 0.0;
    *(_OWORD *)(a1 + 136)  = 0u;
    *(_OWORD *)(a1 + 120)  = 0u;
    *(_OWORD *)(a1 + 104)  = 0u;
    *(_OWORD *)(a1 + 88)  = 0u;
    *(_OWORD *)(a1 + 72)  = 0u;
    *(_OWORD *)(a1 + 56)  = 0u;
    *(_OWORD *)(a1 + 40)  = 0u;
    *(_OWORD *)(a1 + 24)  = 0u;
    *(_OWORD *)(a1 + 8)  = 0u;
    *(_BYTE *)(a1 + 160)  = 0;
    *(void *)a1  = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(a1 + 161)  = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)a1  = 0u;
      *(_OWORD *)(a1 + 16)  = 0u;
      *(void *)(a1 + 32)  = (unint64_t)-a2 << 16;
      *(_OWORD *)(a1 + 40)  = 0u;
      *(_OWORD *)(a1 + 56)  = 0u;
      *(_OWORD *)(a1 + 72)  = 0u;
      *(_OWORD *)(a1 + 88)  = 0u;
      *(_OWORD *)(a1 + 104)  = 0u;
      *(_OWORD *)(a1 + 120)  = 0u;
      *(_OWORD *)(a1 + 136)  = 0u;
      *(_OWORD *)(a1 + 145)  = 0u;
      return result;
    }

    *(_BYTE *)(a1 + 161)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t sub_100167730(uint64_t result, char a2)
{
  unint64_t v2 = *(void *)(result + 88) & 0xC000000000000001LL | ((unint64_t)(a2 & 3) << 60);
  *(void *)(result + 32)  = *(unsigned __int16 *)(result + 32);
  *(void *)(result + 88)  = v2;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management()
{
  return &type metadata for IEEE80211Frame.Management;
}

uint64_t sub_100167764(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 16)  = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for IEEE80211Frame.Management.Beacon(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
  *(_WORD *)(a1 + 10)  = *(_WORD *)(a2 + 10);
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16)  = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for IEEE80211Frame.Management.Beacon(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Beacon()
{
  return &type metadata for IEEE80211Frame.Management.Beacon;
}

uint64_t destroy for IEEE80211Frame.Management.Authentication(uint64_t a1, uint64_t a2)
{
  return sub_10016784C(a1, a2, sub_100057B64);
}

uint64_t sub_10016784C( uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(_BYTE *)(a1 + 160);
  return a3( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  *(void *)(a1 + 152),  v4);
}

uint64_t initializeWithCopy for IEEE80211Frame.Management.Authentication(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1001678B4( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000582F4);
}

uint64_t sub_1001678B4( uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = a2[3];
  uint64_t v6 = a2[4];
  uint64_t v7 = a2[5];
  uint64_t v8 = a2[6];
  uint64_t v9 = a2[7];
  uint64_t v15 = a2[9];
  uint64_t v16 = a2[10];
  uint64_t v17 = a2[11];
  uint64_t v18 = a2[12];
  uint64_t v19 = a2[13];
  uint64_t v20 = a2[14];
  uint64_t v21 = a2[15];
  uint64_t v22 = a2[16];
  uint64_t v23 = a2[17];
  uint64_t v24 = a2[18];
  uint64_t v25 = a2[19];
  char v26 = *((_BYTE *)a2 + 160);
  uint64_t v10 = a2[8];
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  uint64_t v13 = a2[2];
  a4(*a2, v12, v13, v5, v6, v7, v8, v9, v10, v15, v16, v17, v18);
  *(void *)a1  = v11;
  *(void *)(a1 + 8)  = v12;
  *(void *)(a1 + 16)  = v13;
  *(void *)(a1 + 24)  = v5;
  *(void *)(a1 + 32)  = v6;
  *(void *)(a1 + 40)  = v7;
  *(void *)(a1 + 48)  = v8;
  *(void *)(a1 + 56)  = v9;
  *(void *)(a1 + 64)  = v10;
  *(void *)(a1 + 72)  = v15;
  *(void *)(a1 + 80)  = v16;
  *(void *)(a1 + 88)  = v17;
  *(void *)(a1 + 96)  = v18;
  *(void *)(a1 + 104)  = v19;
  *(void *)(a1 + 112)  = v20;
  *(void *)(a1 + 120)  = v21;
  *(void *)(a1 + 128)  = v22;
  *(void *)(a1 + 136)  = v23;
  *(void *)(a1 + 144)  = v24;
  *(void *)(a1 + 152)  = v25;
  *(_BYTE *)(a1 + 160)  = v26;
  return a1;
}

uint64_t *assignWithCopy for IEEE80211Frame.Management.Authentication(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_100167A00( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_1000582F4,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, uint64_t, uint64_t, int))sub_100057B64);
}

uint64_t *sub_100167A00( uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, uint64_t, uint64_t, int))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v12 = a2[6];
  uint64_t v13 = a2[7];
  uint64_t v14 = a2[8];
  uint64_t v33 = a2[9];
  uint64_t v34 = a2[10];
  uint64_t v35 = a2[11];
  uint64_t v36 = a2[12];
  uint64_t v37 = a2[13];
  uint64_t v38 = a2[14];
  uint64_t v39 = a2[15];
  uint64_t v40 = a2[16];
  uint64_t v41 = a2[17];
  uint64_t v42 = a2[18];
  uint64_t v43 = a2[19];
  char v44 = *((_BYTE *)a2 + 160);
  a4(*a2, v7, v8, v9, v10, v11, v12, v13, v14, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44);
  uint64_t v15 = *a1;
  uint64_t v16 = a1[1];
  *a1  = v6;
  a1[1]  = v7;
  uint64_t v17 = a1[2];
  uint64_t v18 = a1[3];
  a1[2]  = v8;
  a1[3]  = v9;
  uint64_t v19 = a1[4];
  uint64_t v20 = a1[5];
  a1[4]  = v10;
  a1[5]  = v11;
  uint64_t v21 = a1[6];
  uint64_t v22 = a1[7];
  a1[6]  = v12;
  a1[7]  = v13;
  __int128 v23 = *((_OWORD *)a1 + 4);
  __int128 v24 = *((_OWORD *)a1 + 5);
  a1[8]  = v14;
  a1[9]  = v33;
  a1[10]  = v34;
  a1[11]  = v35;
  __int128 v25 = *((_OWORD *)a1 + 6);
  __int128 v26 = *((_OWORD *)a1 + 7);
  a1[12]  = v36;
  a1[13]  = v37;
  a1[14]  = v38;
  a1[15]  = v39;
  __int128 v27 = *((_OWORD *)a1 + 8);
  a1[16]  = v40;
  a1[17]  = v41;
  uint64_t v28 = a1[18];
  uint64_t v29 = a1[19];
  a1[18]  = v42;
  a1[19]  = v43;
  char v30 = *((_BYTE *)a1 + 160);
  *((_BYTE *)a1 + 160)  = v44;
  LOBYTE(v32)  = v30;
  a5( v15,  v16,  v17,  v18,  v19,  v20,  v21,  v22,  v23,  *((void *)&v23 + 1),  v24,  *((void *)&v24 + 1),  v25,  *((void *)&v25 + 1),  v26,  *((void *)&v26 + 1),  v27,  *((void *)&v27 + 1),  v28,  v29,  v32);
  return a1;
}

uint64_t *assignWithTake for IEEE80211Frame.Management.Authentication(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_100167B90( a1,  a2,  a3,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, uint64_t, uint64_t, char))sub_100057B64);
}

uint64_t *sub_100167B90( uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, uint64_t, uint64_t, char))
{
  char v6 = *(_BYTE *)(a2 + 160);
  uint64_t v7 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  uint64_t v12 = a1[5];
  uint64_t v13 = a1[6];
  uint64_t v14 = a1[7];
  __int128 v15 = *((_OWORD *)a1 + 4);
  __int128 v16 = *((_OWORD *)a1 + 5);
  __int128 v17 = *((_OWORD *)a1 + 6);
  __int128 v18 = *((_OWORD *)a1 + 7);
  __int128 v19 = *((_OWORD *)a1 + 8);
  uint64_t v20 = a1[18];
  uint64_t v21 = a1[19];
  char v22 = *((_BYTE *)a1 + 160);
  __int128 v23 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1)  = v23;
  __int128 v24 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)a1 + 2)  = *(_OWORD *)(a2 + 32);
  *((_OWORD *)a1 + 3)  = v24;
  __int128 v25 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)a1 + 4)  = *(_OWORD *)(a2 + 64);
  *((_OWORD *)a1 + 5)  = v25;
  __int128 v26 = *(_OWORD *)(a2 + 112);
  *((_OWORD *)a1 + 6)  = *(_OWORD *)(a2 + 96);
  *((_OWORD *)a1 + 7)  = v26;
  __int128 v27 = *(_OWORD *)(a2 + 144);
  *((_OWORD *)a1 + 8)  = *(_OWORD *)(a2 + 128);
  *((_OWORD *)a1 + 9)  = v27;
  *((_BYTE *)a1 + 160)  = v6;
  char v29 = v22;
  a4( v7,  v9,  v8,  v10,  v11,  v12,  v13,  v14,  v15,  *((void *)&v15 + 1),  v16,  *((void *)&v16 + 1),  v17,  *((void *)&v17 + 1),  v18,  *((void *)&v18 + 1),  v19,  *((void *)&v19 + 1),  v20,  v21,  v29);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211Frame.Management.Authentication(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 161)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = (*(void *)a1 >> 28) & 0xFFFFFC00 | ((unsigned __int16)*(void *)a1 >> 6);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for IEEE80211Frame.Management.Authentication(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 152)  = 0LL;
    double result = 0.0;
    *(_OWORD *)(a1 + 136)  = 0u;
    *(_OWORD *)(a1 + 120)  = 0u;
    *(_OWORD *)(a1 + 104)  = 0u;
    *(_OWORD *)(a1 + 88)  = 0u;
    *(_OWORD *)(a1 + 72)  = 0u;
    *(_OWORD *)(a1 + 56)  = 0u;
    *(_OWORD *)(a1 + 40)  = 0u;
    *(_OWORD *)(a1 + 24)  = 0u;
    *(_OWORD *)(a1 + 8)  = 0u;
    *(_BYTE *)(a1 + 160)  = 0;
    *(void *)a1  = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(a1 + 161)  = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)a1  = (((unint64_t)-a2 << 6) | ((unint64_t)-a2 << 28)) & 0xFFFFFFC00000FFFFLL;
      double result = 0.0;
      *(_OWORD *)(a1 + 8)  = 0u;
      *(_OWORD *)(a1 + 24)  = 0u;
      *(_OWORD *)(a1 + 40)  = 0u;
      *(_OWORD *)(a1 + 56)  = 0u;
      *(_OWORD *)(a1 + 72)  = 0u;
      *(_OWORD *)(a1 + 88)  = 0u;
      *(_OWORD *)(a1 + 104)  = 0u;
      *(_OWORD *)(a1 + 120)  = 0u;
      *(_OWORD *)(a1 + 136)  = 0u;
      *(_OWORD *)(a1 + 145)  = 0u;
      return result;
    }

    *(_BYTE *)(a1 + 161)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t sub_100167D28(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int16 *)(result + 32);
  uint64_t v3 = *(void *)(result + 88) & 1LL | (a2 << 62);
  *(void *)result &= 0x3FFFFF003FuLL;
  *(void *)(result + 32)  = v2;
  *(void *)(result + 88)  = v3;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication()
{
  return &type metadata for IEEE80211Frame.Management.Authentication;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup;
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame.Management.Authentication.AuthenticationAlgorithm( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_100167DC4 + 4 * byte_10034AD3A[v4]))();
  }
  *a1  = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100167DF8 + 4 * byte_10034AD35[v4]))();
}

uint64_t sub_100167DF8(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100167E00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x100167E08LL);
  }
  return result;
}

uint64_t sub_100167E14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x100167E1CLL);
  }
  *(_BYTE *)double result = a2 + 7;
  return result;
}

uint64_t sub_100167E20(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100167E28(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.AuthenticationAlgorithm()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.AuthenticationAlgorithm;
}

uint64_t destroy for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals(uint64_t *a1)
{
  return sub_1001647DC(*a1, a1[1], a1[2], a1[3], (void (*)(void))sub_1000208D8);
}

uint64_t *initializeWithCopy for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals( uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  sub_1001647DC(*a2, v4, v5, v6, (void (*)(void))sub_100020AFC);
  *a1  = v3;
  a1[1]  = v4;
  a1[2]  = v5;
  a1[3]  = v6;
  return a1;
}

uint64_t *assignWithCopy for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals( uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  sub_1001647DC(*a2, v4, v5, v6, (void (*)(void))sub_100020AFC);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  uint64_t v10 = a1[3];
  *a1  = v3;
  a1[1]  = v4;
  a1[2]  = v5;
  a1[3]  = v6;
  sub_1001647DC(v7, v8, v9, v10, (void (*)(void))sub_1000208D8);
  return a1;
}

uint64_t *assignWithTake for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals( uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = a1[3];
  __int128 v7 = a2[1];
  *(_OWORD *)a1  = *a2;
  *((_OWORD *)a1 + 1)  = v7;
  sub_1001647DC(v3, v5, v4, v6, (void (*)(void))sub_1000208D8);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals( uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 3 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 3);
  }
  unsigned int v3 = ((2 * ((*(void *)(a1 + 24) & 0x1000000000000000LL) != 0)) | ((*(void *)(a1 + 24) >> 60) >> 1) & 1) ^ 3;
  if (v3 >= 2) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(void *)(result + 16)  = 0LL;
    *(void *)(result + 24)  = 0LL;
    *(void *)double result = a2 - 3;
    *(void *)(result + 8)  = 0LL;
    if (a3 >= 3) {
      *(_BYTE *)(result + 32)  = 1;
    }
  }

  else
  {
    if (a3 >= 3) {
      *(_BYTE *)(result + 32)  = 0;
    }
    if (a2)
    {
      *(void *)double result = 0LL;
      *(void *)(result + 8)  = 0LL;
      *(void *)(result + 16)  = 0LL;
      *(void *)(result + 24)  = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
    }
  }

  return result;
}

uint64_t sub_100168020(uint64_t a1)
{
  return (*(void *)(a1 + 24) >> 61) & 1LL;
}

uint64_t sub_10016802C(uint64_t result)
{
  *(void *)(result + 24) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t sub_10016803C(uint64_t result, char a2)
{
  *(void *)(result + 24)  = *(void *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.MessageType()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.MessageType;
}

uint64_t destroy for NANAttribute.PairingIdentityResolution(uint64_t a1)
{
  return sub_1000208D8(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t *initializeWithCopy for NANAttribute.PairingIdentityResolution(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100020AFC(*a2, v5);
  *a1  = v4;
  a1[1]  = v5;
  uint64_t v7 = a2[2];
  unint64_t v6 = a2[3];
  sub_100020AFC(v7, v6);
  a1[2]  = v7;
  a1[3]  = v6;
  return a1;
}

uint64_t *assignWithCopy for NANAttribute.PairingIdentityResolution(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100020AFC(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1  = v4;
  a1[1]  = v5;
  sub_1000208D8(v6, v7);
  uint64_t v9 = a2[2];
  unint64_t v8 = a2[3];
  sub_100020AFC(v9, v8);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2]  = v9;
  a1[3]  = v8;
  sub_1000208D8(v10, v11);
  return a1;
}

uint64_t *assignWithTake for NANAttribute.PairingIdentityResolution(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1  = *a2;
  sub_1000208D8(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1)  = a2[1];
  sub_1000208D8(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.PairingIdentityResolution(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for NANAttribute.PairingIdentityResolution( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 16)  = 0LL;
    *(void *)(result + 24)  = 0LL;
    *(void *)double result = a2 - 13;
    *(void *)(result + 8)  = 0LL;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 32)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 32)  = 0;
    }
    if (a2)
    {
      *(void *)double result = 0LL;
      *(void *)(result + 8)  = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm;
}

uint64_t sub_100168274(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001682A8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001682DC(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.PASNRequest()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.PASNRequest;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO11PASNRequestVwxx_0(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(a1 + 56));
  unint64_t v3 = *(void *)(a1 + 80);
  if (v3 >> 60 != 15) {
    uint64_t result = sub_1000208D8(*(void *)(a1 + 72), v3);
  }
  unint64_t v4 = *(void *)(a1 + 104);
  if (v4 >> 60 != 15) {
    uint64_t result = sub_1000208D8(*(void *)(a1 + 96), v4);
  }
  int v5 = *(unsigned __int8 *)(a1 + 160);
  if (v5 != 255) {
    return sub_100057CD0( *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  *(void *)(a1 + 152),  v5);
  }
  return result;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO11PASNRequestVwcp_0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10)  = *(_BYTE *)(a2 + 10);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16)  = v4;
  *(void *)(a1 + 24)  = v5;
  *(_WORD *)(a1 + 32)  = *(_WORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 40)  = v6;
  *(_BYTE *)(a1 + 48)  = *(_BYTE *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 56)  = v7;
  unint64_t v8 = *(void *)(a2 + 80);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v8 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80)  = *(void *)(a2 + 80);
  }

  else
  {
    *(_WORD *)(a1 + 64)  = *(_WORD *)(a2 + 64);
    uint64_t v9 = *(void *)(a2 + 72);
    sub_100020AFC(v9, v8);
    *(void *)(a1 + 72)  = v9;
    *(void *)(a1 + 80)  = v8;
  }

  *(_BYTE *)(a1 + 88)  = *(_BYTE *)(a2 + 88);
  uint64_t v10 = (uint64_t *)(a2 + 96);
  unint64_t v11 = *(void *)(a2 + 104);
  if (v11 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 96)  = *(_OWORD *)v10;
  }

  else
  {
    uint64_t v12 = *v10;
    sub_100020AFC(*v10, *(void *)(a2 + 104));
    *(void *)(a1 + 96)  = v12;
    *(void *)(a1 + 104)  = v11;
  }

  int v13 = *(unsigned __int8 *)(a2 + 160);
  if (v13 == 255)
  {
    __int128 v20 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112)  = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128)  = v20;
    *(_OWORD *)(a1 + 144)  = *(_OWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 160)  = *(_BYTE *)(a2 + 160);
  }

  else
  {
    uint64_t v14 = *(void *)(a2 + 112);
    unint64_t v15 = *(void *)(a2 + 120);
    unint64_t v16 = *(void *)(a2 + 128);
    uint64_t v17 = *(void *)(a2 + 136);
    uint64_t v19 = *(void *)(a2 + 144);
    unint64_t v18 = *(void *)(a2 + 152);
    sub_100058460(v14, v15, v16, v17, v19, v18, v13);
    *(void *)(a1 + 112)  = v14;
    *(void *)(a1 + 120)  = v15;
    *(void *)(a1 + 128)  = v16;
    *(void *)(a1 + 136)  = v17;
    *(void *)(a1 + 144)  = v19;
    *(void *)(a1 + 152)  = v18;
    *(_BYTE *)(a1 + 160)  = v13;
  }

  return a1;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO11PASNRequestVwca_0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10)  = *(_BYTE *)(a2 + 10);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16)  = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24)  = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_WORD *)(a1 + 32)  = *(_WORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40)  = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48)  = *(_BYTE *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 56)  = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = (__int128 *)(a1 + 64);
  int v13 = (__int128 *)(a2 + 64);
  if (*(void *)(a1 + 80) >> 60 == 15LL)
  {
    if (*(void *)(a2 + 80) >> 60 == 15LL)
    {
      __int128 v14 = *v13;
      *(void *)(a1 + 80)  = *(void *)(a2 + 80);
      *uint64_t v12 = v14;
    }

    else
    {
      *(_WORD *)(a1 + 64)  = *(_WORD *)(a2 + 64);
      uint64_t v16 = *(void *)(a2 + 72);
      unint64_t v17 = *(void *)(a2 + 80);
      sub_100020AFC(v16, v17);
      *(void *)(a1 + 72)  = v16;
      *(void *)(a1 + 80)  = v17;
    }
  }

  else if (*(void *)(a2 + 80) >> 60 == 15LL)
  {
    sub_100168274(a1 + 64);
    uint64_t v15 = *(void *)(a2 + 80);
    *uint64_t v12 = *v13;
    *(void *)(a1 + 80)  = v15;
  }

  else
  {
    *(_WORD *)(a1 + 64)  = *(_WORD *)(a2 + 64);
    uint64_t v18 = *(void *)(a2 + 72);
    unint64_t v19 = *(void *)(a2 + 80);
    sub_100020AFC(v18, v19);
    uint64_t v20 = *(void *)(a1 + 72);
    unint64_t v21 = *(void *)(a1 + 80);
    *(void *)(a1 + 72)  = v18;
    *(void *)(a1 + 80)  = v19;
    sub_1000208D8(v20, v21);
  }

  *(_BYTE *)(a1 + 88)  = *(_BYTE *)(a2 + 88);
  char v22 = (uint64_t *)(a2 + 96);
  unint64_t v23 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104) >> 60 == 15LL)
  {
    if (v23 >> 60 != 15)
    {
      uint64_t v24 = *v22;
      sub_100020AFC(*v22, *(void *)(a2 + 104));
      *(void *)(a1 + 96)  = v24;
      *(void *)(a1 + 104)  = v23;
      goto LABEL_15;
    }

    goto LABEL_13;
  }

  if (v23 >> 60 == 15)
  {
    sub_1001682A8(a1 + 96);
LABEL_13:
    *(_OWORD *)(a1 + 96)  = *(_OWORD *)v22;
    goto LABEL_15;
  }

  uint64_t v25 = *v22;
  sub_100020AFC(*v22, *(void *)(a2 + 104));
  uint64_t v26 = *(void *)(a1 + 96);
  unint64_t v27 = *(void *)(a1 + 104);
  *(void *)(a1 + 96)  = v25;
  *(void *)(a1 + 104)  = v23;
  sub_1000208D8(v26, v27);
LABEL_15:
  uint64_t v28 = (_OWORD *)(a1 + 112);
  char v29 = (__int128 *)(a2 + 112);
  int v30 = *(unsigned __int8 *)(a2 + 160);
  if (*(unsigned __int8 *)(a1 + 160) == 255)
  {
    if (v30 == 255)
    {
      __int128 v53 = *v29;
      __int128 v54 = *(_OWORD *)(a2 + 128);
      __int128 v55 = *(_OWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 160)  = *(_BYTE *)(a2 + 160);
      *(_OWORD *)(a1 + 128)  = v54;
      *(_OWORD *)(a1 + 144)  = v55;
      _OWORD *v28 = v53;
    }

    else
    {
      uint64_t v44 = *(void *)(a2 + 112);
      unint64_t v45 = *(void *)(a2 + 120);
      unint64_t v46 = *(void *)(a2 + 128);
      uint64_t v47 = *(void *)(a2 + 136);
      uint64_t v49 = *(void *)(a2 + 144);
      unint64_t v48 = *(void *)(a2 + 152);
      sub_100058460(v44, v45, v46, v47, v49, v48, v30);
      *(void *)(a1 + 112)  = v44;
      *(void *)(a1 + 120)  = v45;
      *(void *)(a1 + 128)  = v46;
      *(void *)(a1 + 136)  = v47;
      *(void *)(a1 + 144)  = v49;
      *(void *)(a1 + 152)  = v48;
      *(_BYTE *)(a1 + 160)  = v30;
    }
  }

  else if (v30 == 255)
  {
    sub_1001682DC(a1 + 112);
    __int128 v51 = *(_OWORD *)(a2 + 128);
    __int128 v50 = *(_OWORD *)(a2 + 144);
    __int128 v52 = *v29;
    *(_BYTE *)(a1 + 160)  = *(_BYTE *)(a2 + 160);
    *(_OWORD *)(a1 + 128)  = v51;
    *(_OWORD *)(a1 + 144)  = v50;
    _OWORD *v28 = v52;
  }

  else
  {
    uint64_t v31 = *(void *)(a2 + 112);
    unint64_t v32 = *(void *)(a2 + 120);
    unint64_t v33 = *(void *)(a2 + 128);
    uint64_t v34 = *(void *)(a2 + 136);
    uint64_t v36 = *(void *)(a2 + 144);
    unint64_t v35 = *(void *)(a2 + 152);
    sub_100058460(v31, v32, v33, v34, v36, v35, v30);
    uint64_t v37 = *(void *)(a1 + 112);
    unint64_t v38 = *(void *)(a1 + 120);
    unint64_t v39 = *(void *)(a1 + 128);
    uint64_t v40 = *(void *)(a1 + 136);
    uint64_t v41 = *(void *)(a1 + 144);
    unint64_t v42 = *(void *)(a1 + 152);
    *(void *)(a1 + 112)  = v31;
    *(void *)(a1 + 120)  = v32;
    *(void *)(a1 + 128)  = v33;
    *(void *)(a1 + 136)  = v34;
    *(void *)(a1 + 144)  = v36;
    *(void *)(a1 + 152)  = v35;
    char v43 = *(_BYTE *)(a1 + 160);
    *(_BYTE *)(a1 + 160)  = v30;
    sub_100057CD0(v37, v38, v39, v40, v41, v42, v43);
  }

  return a1;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO11PASNRequestVwta_0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10)  = *(_BYTE *)(a2 + 10);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  *(_WORD *)(a1 + 32)  = *(_WORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 48)  = *(_BYTE *)(a2 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  *(void *)(a1 + 56)  = *(void *)(a2 + 56);
  swift_bridgeObjectRelease(v7);
  unint64_t v8 = *(void *)(a1 + 80);
  if (v8 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v9 = *(void *)(a2 + 80);
  if (v9 >> 60 == 15)
  {
    sub_100168274(a1 + 64);
LABEL_4:
    *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80)  = *(void *)(a2 + 80);
    goto LABEL_6;
  }

  *(_WORD *)(a1 + 64)  = *(_WORD *)(a2 + 64);
  uint64_t v10 = *(void *)(a1 + 72);
  *(void *)(a1 + 72)  = *(void *)(a2 + 72);
  *(void *)(a1 + 80)  = v9;
  sub_1000208D8(v10, v8);
LABEL_6:
  *(_BYTE *)(a1 + 88)  = *(_BYTE *)(a2 + 88);
  uint64_t v11 = (_OWORD *)(a2 + 96);
  unint64_t v12 = *(void *)(a1 + 104);
  if (v12 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 96)  = *v11;
    goto LABEL_11;
  }

  unint64_t v13 = *(void *)(a2 + 104);
  if (v13 >> 60 == 15)
  {
    sub_1001682A8(a1 + 96);
    goto LABEL_9;
  }

  uint64_t v14 = *(void *)(a1 + 96);
  *(void *)(a1 + 96)  = *(void *)v11;
  *(void *)(a1 + 104)  = v13;
  sub_1000208D8(v14, v12);
LABEL_11:
  int v15 = *(unsigned __int8 *)(a1 + 160);
  if (v15 == 255)
  {
LABEL_15:
    __int128 v24 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112)  = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128)  = v24;
    *(_OWORD *)(a1 + 144)  = *(_OWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 160)  = *(_BYTE *)(a2 + 160);
    return a1;
  }

  int v16 = *(unsigned __int8 *)(a2 + 160);
  if (v16 == 255)
  {
    sub_1001682DC(a1 + 112);
    goto LABEL_15;
  }

  uint64_t v17 = *(void *)(a1 + 112);
  unint64_t v18 = *(void *)(a1 + 120);
  unint64_t v19 = *(void *)(a1 + 128);
  uint64_t v20 = *(void *)(a1 + 136);
  uint64_t v21 = *(void *)(a1 + 144);
  unint64_t v22 = *(void *)(a1 + 152);
  __int128 v23 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112)  = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128)  = v23;
  *(_OWORD *)(a1 + 144)  = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 160)  = v16;
  sub_100057CD0(v17, v18, v19, v20, v21, v22, v15);
  return a1;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO11PASNRequestVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 161)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100168A20(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152)  = 0LL;
    *(_OWORD *)(result + 136)  = 0u;
    *(_OWORD *)(result + 120)  = 0u;
    *(_OWORD *)(result + 104)  = 0u;
    *(_OWORD *)(result + 88)  = 0u;
    *(_OWORD *)(result + 72)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(_BYTE *)(result + 160)  = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 161)  = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16)  = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 161)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.PASNResponse()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.PASNResponse;
}

uint64_t destroy for IEEE80211Frame.Management.Authentication.PASNConfirm(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(void *)(result + 24);
  if (v2 >> 60 != 15) {
    uint64_t result = sub_1000208D8(*(void *)(result + 16), v2);
  }
  unint64_t v3 = *(void *)(v1 + 48);
  if (v3 >> 60 != 15) {
    return sub_1000208D8(*(void *)(v1 + 40), v3);
  }
  return result;
}

uint64_t initializeWithCopy for IEEE80211Frame.Management.Authentication.PASNConfirm(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  unint64_t v4 = *(void *)(a2 + 24);
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  }

  else
  {
    *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
    uint64_t v5 = *(void *)(a2 + 16);
    sub_100020AFC(v5, v4);
    *(void *)(a1 + 16)  = v5;
    *(void *)(a1 + 24)  = v4;
  }

  *(_BYTE *)(a1 + 32)  = *(_BYTE *)(a2 + 32);
  uint64_t v6 = (uint64_t *)(a2 + 40);
  unint64_t v7 = *(void *)(a2 + 48);
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 40)  = *(_OWORD *)v6;
  }

  else
  {
    uint64_t v8 = *v6;
    sub_100020AFC(*v6, v7);
    *(void *)(a1 + 40)  = v8;
    *(void *)(a1 + 48)  = v7;
  }

  return a1;
}

uint64_t assignWithCopy for IEEE80211Frame.Management.Authentication.PASNConfirm(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = (__int128 *)(a2 + 8);
  if (*(void *)(a1 + 24) >> 60 == 15LL)
  {
    if (*(void *)(a2 + 24) >> 60 == 15LL)
    {
      __int128 v6 = *v5;
      *(void *)(a1 + 24)  = *(void *)(a2 + 24);
      *(_OWORD *)uint64_t v4 = v6;
    }

    else
    {
      *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
      uint64_t v8 = *(void *)(a2 + 16);
      unint64_t v9 = *(void *)(a2 + 24);
      sub_100020AFC(v8, v9);
      *(void *)(a1 + 16)  = v8;
      *(void *)(a1 + 24)  = v9;
    }
  }

  else if (*(void *)(a2 + 24) >> 60 == 15LL)
  {
    sub_100168274(a1 + 8);
    uint64_t v7 = *((void *)v5 + 2);
    *(_OWORD *)uint64_t v4 = *v5;
    *(void *)(v4 + 16)  = v7;
  }

  else
  {
    *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
    uint64_t v10 = *(void *)(a2 + 16);
    unint64_t v11 = *(void *)(a2 + 24);
    sub_100020AFC(v10, v11);
    uint64_t v12 = *(void *)(a1 + 16);
    unint64_t v13 = *(void *)(a1 + 24);
    *(void *)(a1 + 16)  = v10;
    *(void *)(a1 + 24)  = v11;
    sub_1000208D8(v12, v13);
  }

  *(_BYTE *)(a1 + 32)  = *(_BYTE *)(a2 + 32);
  uint64_t v14 = (uint64_t *)(a2 + 40);
  unint64_t v15 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48) >> 60 != 15LL)
  {
    if (v15 >> 60 != 15)
    {
      uint64_t v17 = *v14;
      sub_100020AFC(*v14, v15);
      uint64_t v18 = *(void *)(a1 + 40);
      unint64_t v19 = *(void *)(a1 + 48);
      *(void *)(a1 + 40)  = v17;
      *(void *)(a1 + 48)  = v15;
      sub_1000208D8(v18, v19);
      return a1;
    }

    sub_1001682A8(a1 + 40);
    goto LABEL_13;
  }

  if (v15 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 40)  = *(_OWORD *)v14;
    return a1;
  }

  uint64_t v16 = *v14;
  sub_100020AFC(*v14, v15);
  *(void *)(a1 + 40)  = v16;
  *(void *)(a1 + 48)  = v15;
  return a1;
}

uint64_t assignWithTake for IEEE80211Frame.Management.Authentication.PASNConfirm(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = a2 + 8;
  unint64_t v6 = *(void *)(a1 + 24);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 24);
  if (v7 >> 60 == 15)
  {
    sub_100168274(a1 + 8);
LABEL_4:
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
    *(void *)(v4 + 16)  = *(void *)(v5 + 16);
    goto LABEL_6;
  }

  *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(void *)(a1 + 24)  = v7;
  sub_1000208D8(v8, v6);
LABEL_6:
  *(_BYTE *)(a1 + 32)  = *(_BYTE *)(a2 + 32);
  unint64_t v9 = (void *)(a2 + 40);
  unint64_t v10 = *(void *)(a1 + 48);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = *(void *)(a2 + 48);
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *(void *)(a1 + 40);
      *(void *)(a1 + 40)  = *v9;
      *(void *)(a1 + 48)  = v11;
      sub_1000208D8(v12, v10);
      return a1;
    }

    sub_1001682A8(a1 + 40);
  }

  *(_OWORD *)(a1 + 40)  = *(_OWORD *)v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211Frame.Management.Authentication.PASNConfirm( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xCB && a1[56]) {
    return (*(_DWORD *)a1 + 203);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 0x36;
  int v5 = v3 - 54;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame.Management.Authentication.PASNConfirm( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xCA)
  {
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)uint64_t result = a2 - 203;
    if (a3 >= 0xCB) {
      *(_BYTE *)(result + 56)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xCB) {
      *(_BYTE *)(result + 56)  = 0;
    }
    if (a2) {
      *(_BYTE *)uint64_t result = a2 + 53;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.PASNConfirm()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm;
}

uint64_t destroy for IEEE80211Frame.Management.ActionFrame(uint64_t *a1)
{
  return sub_100057AA0(a1[1], a1[2], a1[3]);
}

uint64_t initializeWithCopy for IEEE80211Frame.Management.ActionFrame(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  sub_10005852C(v3, v4, v5);
  *(void *)(a1 + 8)  = v3;
  *(void *)(a1 + 16)  = v4;
  *(void *)(a1 + 24)  = v5;
  return a1;
}

uint64_t assignWithCopy for IEEE80211Frame.Management.ActionFrame(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  sub_10005852C(v3, v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(a1 + 8)  = v3;
  *(void *)(a1 + 16)  = v4;
  *(void *)(a1 + 24)  = v5;
  sub_100057AA0(v6, v7, v8);
  return a1;
}