LABEL_160:
                        v739 = [v950 passphrase];
                        if (v739)
                        {
                          v740 = v739;
                          v741 = static String._unconditionallyBridgeFromObjectiveC(_:)(v739);
                          v743 = v742;
                        }

                        else
                        {
                          v741 = 0LL;
                          v743 = 0LL;
                        }

                        v744 = object;
                        swift_bridgeObjectRetain(object);
                        v745 = (uint64_t)v744;
                        v746 = v974;
                        sub_10027E804( v741,  v743,  v533,  (uint64_t)countAndFlagsBits,  v745,  (uint64_t)v949,  (uint64_t *)&v980);
                        v416 = v746;
                        swift_bridgeObjectRelease(v743);
                        v655 = (uint8_t *)*((void *)&v980 + 1);
                        if (*((void *)&v980 + 1) >> 60 == 15LL)
                        {
                          v514 = v965;
LABEL_165:
                          swift_unownedRetainStrong(v514);
                          v747 = v936;
                          WiFiInterface.preferences.getter();
                          swift_release(v514);
                          v748 = v920;
                          v749 = Preferences.automaticallyUseEncryption.getter(v920);
                          (*(void (**)(char *, uint64_t))(v937 + 8))(v747, v748);
                          if ((v749 & 1) == 0)
                          {
                            v414 = 1;
                            goto LABEL_169;
                          }

                          v974 = v416;
                          swift_unownedRetainStrong(v514);
                          v750 = v514 + *(void *)(*(void *)v514 + 656LL);
                          swift_beginAccess(v750, v977, 0LL, 0LL);
                          v751 = v750;
                          v752 = v929;
                          sub_100057FE8(v751, v929, type metadata accessor for NANDriverCapabilities);
                          swift_release(v514);
                          v753 = *(void *)(v752 + 8);
                          swift_bridgeObjectRetain(v753);
                          sub_10005802C(v752, type metadata accessor for NANDriverCapabilities);
                          *(void *)&v980 = v753;
                          v533 = Collection<>.strongestSupportedSharedKeySuite.getter(v947, (uint64_t)v946);
                          swift_bridgeObjectRelease(v753);
                          if (v533 == 8)
                          {
                            v414 = 1;
                            v416 = v974;
LABEL_169:
                            v415 = v961;
                            v413 = v971;
LABEL_113:
                            v538 = v965;
                            swift_unownedRetainStrong(v965);
                            v539 = v936;
                            WiFiInterface.preferences.getter();
                            swift_release(v538);
                            v540 = v920;
                            LOBYTE(v538) = Preferences.automaticallyUseEncryption.getter(v920);
                            (*(void (**)(char *, uint64_t))(v937 + 8))(v539, v540);
                            v541 = v953;
                            v961 = v415;
                            if ((v538 & 1) != 0
                              || (swift_beginAccess(v962, &v980, 32LL, 0LL),
                                  v542 = NANSubscribe.Configuration.requiresAuthentication.getter(),
                                  swift_endAccess(&v980),
                                  v542))
                            {
                              v974 = v416;
                              swift_bridgeObjectRelease(object);
                              v543 = swift_allocObject(&unk_1003F6F30, 24LL, 7LL);
                              v544 = v964;
                              *(void *)(v543 + 16) = v964;
                              v545 = (_BYTE *)swift_allocObject(&unk_1003F6F58, 22LL, 7LL);
                              v545[16] = v952;
                              v545[17] = v417;
                              v545[18] = v541;
                              v545[19] = v969;
                              v545[20] = (_BYTE)v968;
                              v545[21] = (_BYTE)v970;
                              v546 = swift_allocObject(&unk_1003F6F80, 32LL, 7LL);
                              *(void *)(v546 + 16) = sub_1002A1CC4;
                              *(void *)(v546 + 24) = v545;
                              v547 = swift_allocObject(&unk_1003F6FA8, 17LL, 7LL);
                              *(_BYTE *)(v547 + 16) = v413;
                              v548 = swift_allocObject(&unk_1003F6FD0, 24LL, 7LL);
                              *(void *)(v548 + 16) = v544;
                              countAndFlagsBits = v544;
                              v549 = v973;
                              v550 = swift_retain();
                              v968 = (os_log_s *)Logger.logObject.getter(v550);
                              LODWORD(v963) = static os_log_type_t.error.getter(v968);
                              v966 = (_BYTE *)swift_allocObject(&unk_1003F6FF8, 17LL, 7LL);
                              v966[16] = 64;
                              v965 = swift_allocObject(&unk_1003F7020, 17LL, 7LL);
                              *(_BYTE *)(v965 + 16) = 8;
                              v551 = swift_allocObject(&unk_1003F7048, 32LL, 7LL);
                              *(void *)(v551 + 16) = sub_1002A1CA8;
                              *(void *)(v551 + 24) = v543;
                              v552 = swift_allocObject(&unk_1003F7070, 32LL, 7LL);
                              *(void *)(v552 + 16) = sub_1002A19EC;
                              *(void *)(v552 + 24) = v551;
                              v553 = v552;
                              v554 = swift_allocObject(&unk_1003F7098, 17LL, 7LL);
                              *(_BYTE *)(v554 + 16) = 32;
                              v555 = v554;
                              v556 = swift_allocObject(&unk_1003F70C0, 17LL, 7LL);
                              *(_BYTE *)(v556 + 16) = 8;
                              v557 = v556;
                              v558 = swift_allocObject(&unk_1003F70E8, 32LL, 7LL);
                              *(void *)(v558 + 16) = sub_1002A19F4;
                              *(void *)(v558 + 24) = v546;
                              v559 = (void *)swift_allocObject(&unk_1003F7110, 32LL, 7LL);
                              v970 = v559;
                              v559[2] = sub_1002A19EC;
                              v559[3] = v558;
                              v957 = (uint8_t *)swift_allocObject(&unk_1003F7138, 17LL, 7LL);
                              v957[16] = 0;
                              object = (_BYTE *)swift_allocObject(&unk_1003F7160, 17LL, 7LL);
                              object[16] = 1;
                              v560 = swift_allocObject(&unk_1003F7188, 32LL, 7LL);
                              *(void *)(v560 + 16) = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
                              *(void *)(v560 + 24) = v547;
                              v561 = (void *)swift_allocObject(&unk_1003F71B0, 32LL, 7LL);
                              v971 = v561;
                              v561[2] = sub_1002A1CC8;
                              v561[3] = v560;
                              v964 = (uint8_t *)swift_allocObject(&unk_1003F71D8, 17LL, 7LL);
                              v964[16] = 0;
                              v956 = swift_allocObject(&unk_1003F7200, 17LL, 7LL);
                              *(_BYTE *)(v956 + 16) = 4;
                              v562 = swift_allocObject(&unk_1003F7228, 32LL, 7LL);
                              *(void *)(v562 + 16) = sub_1002A0DE8;
                              *(void *)(v562 + 24) = v549;
                              v563 = swift_allocObject(&unk_1003F7250, 32LL, 7LL);
                              *(void *)(v563 + 16) = sub_1000570E0;
                              *(void *)(v563 + 24) = v562;
                              v564 = swift_allocObject(&unk_1003F7278, 32LL, 7LL);
                              *(void *)(v564 + 16) = sub_100056B6C;
                              *(void *)(v564 + 24) = v563;
                              v565 = swift_allocObject(&unk_1003F72A0, 32LL, 7LL);
                              v962 = (uint8_t *)v565;
                              *(void *)(v565 + 16) = sub_1002A0E78;
                              *(void *)(v565 + 24) = v564;
                              v969 = swift_allocObject(&unk_1003F72C8, 17LL, 7LL);
                              *(_BYTE *)(v969 + 16) = 0;
                              v973 = (void (*)(uint64_t, char))swift_allocObject(&unk_1003F72F0, 17LL, 7LL);
                              *((_BYTE *)v973 + 16) = 4;
                              v566 = swift_allocObject(&unk_1003F7318, 32LL, 7LL);
                              *(void *)(v566 + 16) = sub_1002A0DF0;
                              *(void *)(v566 + 24) = v548;
                              v567 = swift_allocObject(&unk_1003F7340, 32LL, 7LL);
                              *(void *)(v567 + 16) = sub_100058EEC;
                              *(void *)(v567 + 24) = v566;
                              v568 = swift_allocObject(&unk_1003F7368, 32LL, 7LL);
                              *(void *)(v568 + 16) = sub_100144164;
                              *(void *)(v568 + 24) = v567;
                              v569 = (void *)swift_allocObject(&unk_1003F7390, 32LL, 7LL);
                              v569[2] = sub_1002A19F8;
                              v569[3] = v568;
                              v570 = swift_allocObject(v940, 272LL, 7LL);
                              *(_OWORD *)(v570 + 16) = xmmword_10035EAE0;
                              *(void *)(v570 + 32) = sub_1002A1A0C;
                              v571 = v965;
                              *(void *)(v570 + 40) = v966;
                              *(void *)(v570 + 48) = sub_1002A1A0C;
                              *(void *)(v570 + 56) = v571;
                              *(void *)(v570 + 64) = sub_1002A1A04;
                              v572 = v553;
                              *(void *)(v570 + 72) = v553;
                              *(void *)(v570 + 80) = sub_1002A1A0C;
                              v573 = v555;
                              *(void *)(v570 + 88) = v555;
                              *(void *)(v570 + 96) = sub_1002A1A0C;
                              v574 = v557;
                              *(void *)(v570 + 104) = v557;
                              *(void *)(v570 + 112) = sub_1002A19FC;
                              *(void *)(v570 + 120) = v970;
                              *(void *)(v570 + 128) = sub_1002A1A0C;
                              p_type = v956;
                              v575 = v957;
                              *(void *)(v570 + 136) = v957;
                              *(void *)(v570 + 144) = sub_1002A1A0C;
                              *(void *)(v570 + 152) = object;
                              *(void *)(v570 + 160) = sub_1002A1A00;
                              *(void *)(v570 + 168) = v971;
                              *(void *)(v570 + 176) = sub_1002A1A0C;
                              *(void *)(v570 + 184) = v964;
                              *(void *)(v570 + 192) = sub_1002A1A0C;
                              *(void *)(v570 + 200) = p_type;
                              *(void *)(v570 + 208) = sub_1002A0EA0;
                              v576 = v962;
                              *(void *)(v570 + 216) = v962;
                              *(void *)(v570 + 224) = sub_1002A1A0C;
                              *(void *)(v570 + 232) = v969;
                              *(void *)(v570 + 240) = sub_1002A1A0C;
                              *(void *)(v570 + 248) = v973;
                              *(void *)(v570 + 256) = sub_1002A1A08;
                              *(void *)(v570 + 264) = v569;
                              swift_retain();
                              swift_retain();
                              v953 = v572;
                              swift_retain();
                              swift_retain();
                              v954 = v574;
                              swift_retain();
                              v577 = v575;
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              v578 = v964;
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              v579 = v969;
                              swift_retain();
                              v580 = v973;
                              swift_retain();
                              swift_retain();
                              swift_bridgeObjectRelease(v570);
                              if (os_log_type_enabled(v968, (os_log_type_t)v963))
                              {
                                v950 = v569;
                                v581 = v965;
                                v952 = v573;
                                v582 = v578;
                                v583 = (uint8_t *)sub_100002B30(37LL);
                                p_type = swift_slowAlloc(8LL, -1LL);
                                v584 = swift_slowAlloc(32LL, -1LL);
                                v947 = p_type;
                                v948 = v584;
                                v976[0] = p_type;
                                v991 = v584;
                                v949 = v583;
                                *(_WORD *)v583 = 1282;
                                *(void *)&v979[0] = v583 + 2;
                                *(void *)&v980 = sub_1002A1A0C;
                                v84 = v966;
                                *((void *)&v980 + 1) = v966;
                                v585 = v974;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                v68 = (uint64_t)v585;
                                if (v585)
                                {
LABEL_226:
                                  swift_errorRelease(v68);
                                  __break(1u);
                                  goto LABEL_227;
                                }

                                swift_release(v84);
                                *(void *)&v980 = sub_1002A1A0C;
                                *((void *)&v980 + 1) = v581;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                v586 = v957;
                                v587 = v952;
                                swift_release(v581);
                                *(void *)&v980 = sub_1002A1A04;
                                v588 = v953;
                                *((void *)&v980 + 1) = v953;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                v589 = v967;
                                v590 = v950;
                                swift_release(v588);
                                *(void *)&v980 = sub_1002A1A0C;
                                *((void *)&v980 + 1) = v587;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                swift_release(v587);
                                *(void *)&v980 = sub_1002A1A0C;
                                v591 = v954;
                                *((void *)&v980 + 1) = v954;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                v592 = object;
                                swift_release(v591);
                                *(void *)&v980 = sub_1002A19FC;
                                v593 = v970;
                                *((void *)&v980 + 1) = v970;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                swift_release(v593);
                                *(void *)&v980 = sub_1002A1A0C;
                                *((void *)&v980 + 1) = v586;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                swift_release(v586);
                                *(void *)&v980 = sub_1002A1A0C;
                                *((void *)&v980 + 1) = v592;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                v594 = v592;
                                v595 = v961;
                                swift_release(v594);
                                *(void *)&v980 = sub_1002A1A00;
                                v596 = v971;
                                *((void *)&v980 + 1) = v971;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                swift_release(v596);
                                *(void *)&v980 = sub_1002A1A0C;
                                *((void *)&v980 + 1) = v582;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                swift_release(v582);
                                *(void *)&v980 = sub_1002A1A0C;
                                v597 = v956;
                                *((void *)&v980 + 1) = v956;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                swift_release(v597);
                                *(void *)&v980 = sub_1002A0EA0;
                                v598 = v962;
                                *((void *)&v980 + 1) = v962;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                swift_release(v598);
                                *(void *)&v980 = sub_1002A1A0C;
                                v599 = v969;
                                *((void *)&v980 + 1) = v969;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                swift_release(v599);
                                *(void *)&v980 = sub_1002A1A0C;
                                v600 = v973;
                                *((void *)&v980 + 1) = v973;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                swift_release(v600);
                                *(void *)&v980 = sub_1002A1A08;
                                *((void *)&v980 + 1) = v590;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                swift_release(v590);
                                v601 = v968;
                                v602 = v949;
                                _os_log_impl( (void *)&_mh_execute_header,  v968,  (os_log_type_t)v963,  "Cannot create new datapath for %@ to %s[%hhu] because unable to derive a security conf iguration but encryption required: %{BOOL}d, authentication required: %{BOOL}d",  v949,  0x25u);
                                v603 = sub_100002274(&qword_100404DE0);
                                v604 = v947;
                                swift_arrayDestroy(v947, 1LL, v603);
                                swift_slowDealloc(v604, -1LL, -1LL);
                                p_type = v948;
                                swift_arrayDestroy(v948, 1LL, &type metadata for Any[8]);
                                swift_slowDealloc(p_type, -1LL, -1LL);
                                sub_100002B24((uint64_t)v602);
                              }

                              else
                              {
                                swift_release(v569);
                                swift_release(v580);
                                swift_release(v579);
                                swift_release(v576);
                                swift_release(p_type);
                                swift_release(v578);
                                swift_release(v971);
                                swift_release(object);
                                swift_release(v577);
                                swift_release(v970);
                                swift_release(v954);
                                swift_release(v573);
                                swift_release(v953);
                                swift_release(v965);
                                swift_release(v966);

                                v589 = v967;
                                v595 = v961;
                              }

                              v605 = sub_1000033FC();
                              v606 = swift_allocError(&type metadata for WiFiError, v605, 0LL, 0LL);
                              *(_OWORD *)v607 = xmmword_10035E1A0;
                              *(_BYTE *)(v607 + 16) = 1;
                              swift_willThrow(v606);
                              sub_100111F98(v595, v951, v958, (uint64_t)v959, (unint64_t)v960);
                              swift_release(v589);
                              v537 = countAndFlagsBits;
                              goto LABEL_120;
                            }

                            v613 = 1LL;
                            if (v414)
                            {
                              v974 = v416;
                              swift_bridgeObjectRelease(object);
                              v614 = swift_allocObject(&unk_1003F6CB0, 24LL, 7LL);
                              v615 = v964;
                              *(void *)(v614 + 16) = v964;
                              v616 = (_BYTE *)swift_allocObject(&unk_1003F6CD8, 22LL, 7LL);
                              v616[16] = v952;
                              v616[17] = v417;
                              v616[18] = v541;
                              v616[19] = v969;
                              v616[20] = (_BYTE)v968;
                              v616[21] = (_BYTE)v970;
                              v617 = swift_allocObject(&unk_1003F6D00, 32LL, 7LL);
                              *(void *)(v617 + 16) = sub_1002A1CC4;
                              *(void *)(v617 + 24) = v616;
                              v968 = (os_log_s *)swift_allocObject(&unk_1003F6D28, 17LL, 7LL);
                              *((_BYTE *)v968 + 16) = (_BYTE)v971;
                              v969 = v615;
                              object = (_BYTE *)Logger.logObject.getter(v969);
                              LODWORD(v971) = static os_log_type_t.error.getter(object);
                              v973 = (void (*)(uint64_t, char))swift_allocObject(&unk_1003F6D50, 17LL, 7LL);
                              *((_BYTE *)v973 + 16) = 64;
                              v618 = swift_allocObject(&unk_1003F6D78, 17LL, 7LL);
                              *(_BYTE *)(v618 + 16) = 8;
                              v619 = (_BYTE *)v618;
                              v620 = swift_allocObject(&unk_1003F6DA0, 32LL, 7LL);
                              *(void *)(v620 + 16) = sub_1002A1CA8;
                              *(void *)(v620 + 24) = v614;
                              v621 = swift_allocObject(&unk_1003F6DC8, 32LL, 7LL);
                              *(void *)(v621 + 16) = sub_1002A19EC;
                              *(void *)(v621 + 24) = v620;
                              v622 = v621;
                              v970 = (_BYTE *)swift_allocObject(&unk_1003F6DF0, 17LL, 7LL);
                              v970[16] = 32;
                              v623 = swift_allocObject(&unk_1003F6E18, 17LL, 7LL);
                              *(_BYTE *)(v623 + 16) = 8;
                              v624 = v623;
                              v625 = swift_allocObject(&unk_1003F6E40, 32LL, 7LL);
                              *(void *)(v625 + 16) = sub_1002A19F4;
                              *(void *)(v625 + 24) = v617;
                              v626 = swift_allocObject(&unk_1003F6E68, 32LL, 7LL);
                              *(void *)(v626 + 16) = sub_1002A19EC;
                              *(void *)(v626 + 24) = v625;
                              v627 = swift_allocObject(&unk_1003F6E90, 17LL, 7LL);
                              *(_BYTE *)(v627 + 16) = 0;
                              v628 = swift_allocObject(&unk_1003F6EB8, 17LL, 7LL);
                              *(_BYTE *)(v628 + 16) = 1;
                              v629 = v628;
                              v965 = v628;
                              v630 = swift_allocObject(&unk_1003F6EE0, 32LL, 7LL);
                              v631 = v968;
                              *(void *)(v630 + 16) = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
                              *(void *)(v630 + 24) = v631;
                              v632 = swift_allocObject(&unk_1003F6F08, 32LL, 7LL);
                              *(void *)(v632 + 16) = sub_1002A1CC8;
                              *(void *)(v632 + 24) = v630;
                              v633 = swift_allocObject(v940, 176LL, 7LL);
                              *(_OWORD *)(v633 + 16) = xmmword_10035EAF0;
                              *(void *)(v633 + 32) = sub_1002A1A0C;
                              *(void *)(v633 + 40) = v973;
                              *(void *)(v633 + 48) = sub_1002A1A0C;
                              v634 = v619;
                              *(void *)(v633 + 56) = v619;
                              *(void *)(v633 + 64) = sub_1002A1A04;
                              v635 = (os_log_s *)v622;
                              *(void *)(v633 + 72) = v622;
                              *(void *)(v633 + 80) = sub_1002A1A0C;
                              v636 = v970;
                              *(void *)(v633 + 88) = v970;
                              *(void *)(v633 + 96) = sub_1002A1A0C;
                              p_type = v624;
                              *(void *)(v633 + 104) = v624;
                              *(void *)(v633 + 112) = sub_1002A19FC;
                              *(void *)(v633 + 120) = v626;
                              *(void *)(v633 + 128) = sub_1002A1A0C;
                              *(void *)(v633 + 136) = v627;
                              *(void *)(v633 + 144) = sub_1002A1A0C;
                              *(void *)(v633 + 152) = v629;
                              *(void *)(v633 + 160) = sub_1002A1A00;
                              *(void *)(v633 + 168) = v632;
                              v637 = (os_log_t)object;
                              v638 = v635;
                              swift_retain();
                              v966 = v634;
                              swift_retain();
                              v968 = v638;
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              v639 = (uint8_t *)v627;
                              v640 = v965;
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_bridgeObjectRelease(v633);
                              if (!os_log_type_enabled(v637, (os_log_type_t)v971))
                              {
                                swift_release(v632);
                                swift_release(v640);
                                swift_release(v639);
                                swift_release(v626);
                                swift_release(p_type);
                                swift_release(v636);
                                swift_release(v968);
                                swift_release(v966);
                                swift_release(v973);

                                v498 = v967;
                                v646 = v961;
                                goto LABEL_139;
                              }

                              v963 = v626;
                              v964 = (uint8_t *)p_type;
                              v641 = v966;
                              v108 = v639;
                              v642 = (uint8_t *)sub_100002B30(25LL);
                              p_type = swift_slowAlloc(8LL, -1LL);
                              v643 = (uint8_t *)swift_slowAlloc(32LL, -1LL);
                              v956 = p_type;
                              v957 = v643;
                              v976[0] = p_type;
                              v991 = (uint64_t)v643;
                              v962 = v642;
                              *(_WORD *)v642 = 770;
                              *(void *)&v979[0] = v642 + 2;
                              *(void *)&v980 = sub_1002A1A0C;
                              v644 = v973;
                              v111 = v974;
                              *((void *)&v980 + 1) = v973;
                              sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                              v109 = v111;
                              if (!v111)
                              {
                                swift_release(v644);
                                *(void *)&v980 = sub_1002A1A0C;
                                *((void *)&v980 + 1) = v641;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                swift_release(v641);
                                *(void *)&v980 = sub_1002A1A04;
                                v645 = v968;
                                *((void *)&v980 + 1) = v968;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                v646 = v961;
                                v647 = v970;
                                swift_release(v645);
                                *(void *)&v980 = sub_1002A1A0C;
                                *((void *)&v980 + 1) = v647;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                swift_release(v647);
                                *(void *)&v980 = sub_1002A1A0C;
                                v648 = v964;
                                *((void *)&v980 + 1) = v964;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                swift_release(v648);
                                *(void *)&v980 = sub_1002A19FC;
                                v649 = v963;
                                *((void *)&v980 + 1) = v963;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                swift_release(v649);
                                *(void *)&v980 = sub_1002A1A0C;
                                *((void *)&v980 + 1) = v108;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                swift_release(v108);
                                *(void *)&v980 = sub_1002A1A0C;
                                *((void *)&v980 + 1) = v640;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                v498 = v967;
                                p_type = (uint64_t)object;
                                swift_release(v640);
                                *(void *)&v980 = sub_1002A1A00;
                                *((void *)&v980 + 1) = v632;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                swift_release(v632);
                                v650 = v962;
                                _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)p_type,  (os_log_type_t)v971,  "Cannot create new datapath for %@ to %s[%hhu] because publisher requires security, but no security configuration was provided or derivable",  v962,  0x19u);
                                v651 = sub_100002274(&qword_100404DE0);
                                v652 = v956;
                                swift_arrayDestroy(v956, 1LL, v651);
                                swift_slowDealloc(v652, -1LL, -1LL);
                                v653 = v957;
                                swift_arrayDestroy(v957, 1LL, &type metadata for Any[8]);
                                swift_slowDealloc(v653, -1LL, -1LL);
                                sub_100002B24((uint64_t)v650);

LABEL_139:
                                v608 = (uint8_t *)v969;
                                v703 = sub_1000033FC();
                                v704 = swift_allocError(&type metadata for WiFiError, v703, 0LL, 0LL);
                                *(_OWORD *)v705 = xmmword_10035E1A0;
                                *(_BYTE *)(v705 + 16) = 1;
                                swift_willThrow(v704);
                                sub_100111F98(v646, v951, v958, (uint64_t)v959, (unint64_t)v960);
LABEL_123:
                                swift_release(v498);

                                goto LABEL_124;
                              }

LABEL_233:
                              swift_errorRelease(v109);
                              __break(1u);
                              v84 = v111;
                              v908 = v965;
                              v909 = p_type;
                              v910 = v108;
                              goto LABEL_234;
                            }

                            v533 = 0;
                            v654 = 0LL;
                            v655 = 0LL;
                            v656 = 0LL;
                            v657 = 0LL;
                            goto LABEL_131;
                          }

                          swift_beginAccess(v962, &v980, 32LL, 0LL);
                          v783 = NANSubscribe.Configuration.requiresAuthentication.getter();
                          swift_endAccess(&v980);
                          if (v783)
                          {
                            v784 = (uint64_t *)&v964[qword_100410BC8];
                            swift_beginAccess(&v964[qword_100410BC8], v976, 0LL, 0LL);
                            v785 = *v784;
                            swift_bridgeObjectRetain(v785);
                            v786 = v925;
                            sub_100256AE4(v948, v785, v925);
                            swift_bridgeObjectRelease(v785);
                            v787 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0LL);
                            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v787 - 8) + 48LL))( v786,  1LL,  v787) == 1)
                            {
                              sub_1000225EC(v786, (uint64_t *)&unk_10040F0F0);
                              swift_bridgeObjectRelease(object);
                              goto LABEL_206;
                            }

                            v858 = v926;
                            sub_100057FE8( v786,  (uint64_t)v926,  type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
                            sub_10005802C(v786, type metadata accessor for NANPeer.Service.AuthenticationStatus);
                            if (swift_getEnumCaseMultiPayload(v858, v924) != 2)
                            {
                              swift_bridgeObjectRelease(object);
                              sub_10005802C( (uint64_t)v926,  type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
LABEL_206:
                              v859 = swift_allocObject(&unk_1003F78B8, 24LL, 7LL);
                              v860 = v964;
                              *(void *)(v859 + 16) = v964;
                              v861 = (_BYTE *)swift_allocObject(&unk_1003F78E0, 22LL, 7LL);
                              v861[16] = v952;
                              v861[17] = v954;
                              v861[18] = v953;
                              v861[19] = v969;
                              v861[20] = (_BYTE)v968;
                              v861[21] = (_BYTE)v970;
                              v862 = swift_allocObject(&unk_1003F7908, 32LL, 7LL);
                              *(void *)(v862 + 16) = sub_1002A1CC4;
                              *(void *)(v862 + 24) = v861;
                              v969 = swift_allocObject(&unk_1003F7930, 17LL, 7LL);
                              *(_BYTE *)(v969 + 16) = (_BYTE)v971;
                              v962 = v860;
                              v971 = (_BYTE *)Logger.logObject.getter(v962);
                              LODWORD(v970) = static os_log_type_t.error.getter(v971);
                              object = (_BYTE *)swift_allocObject(&unk_1003F7958, 17LL, 7LL);
                              object[16] = 64;
                              v973 = (void (*)(uint64_t, char))swift_allocObject(&unk_1003F7980, 17LL, 7LL);
                              *((_BYTE *)v973 + 16) = 8;
                              v863 = swift_allocObject(&unk_1003F79A8, 32LL, 7LL);
                              *(void *)(v863 + 16) = sub_1002A1CA8;
                              *(void *)(v863 + 24) = v859;
                              v864 = swift_allocObject(&unk_1003F79D0, 32LL, 7LL);
                              *(void *)(v864 + 16) = sub_1002A19EC;
                              *(void *)(v864 + 24) = v863;
                              v865 = swift_allocObject(&unk_1003F79F8, 17LL, 7LL);
                              *(_BYTE *)(v865 + 16) = 32;
                              p_type = swift_allocObject(&unk_1003F7A20, 17LL, 7LL);
                              *(_BYTE *)(p_type + 16) = 8;
                              v866 = swift_allocObject(&unk_1003F7A48, 32LL, 7LL);
                              *(void *)(v866 + 16) = sub_1002A19F4;
                              *(void *)(v866 + 24) = v862;
                              v867 = (uint8_t *)swift_allocObject(&unk_1003F7A70, 32LL, 7LL);
                              *((void *)v867 + 2) = sub_1002A19EC;
                              *((void *)v867 + 3) = v866;
                              v868 = (os_log_s *)swift_allocObject(&unk_1003F7A98, 17LL, 7LL);
                              *((_BYTE *)v868 + 16) = 0;
                              v869 = swift_allocObject(&unk_1003F7AC0, 17LL, 7LL);
                              *(_BYTE *)(v869 + 16) = 1;
                              v870 = swift_allocObject(&unk_1003F7AE8, 32LL, 7LL);
                              v871 = v969;
                              *(void *)(v870 + 16) = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
                              *(void *)(v870 + 24) = v871;
                              v872 = swift_allocObject(&unk_1003F7B10, 32LL, 7LL);
                              *(void *)(v872 + 16) = sub_1002A1CC8;
                              *(void *)(v872 + 24) = v870;
                              v873 = swift_allocObject(v940, 176LL, 7LL);
                              *(_OWORD *)(v873 + 16) = xmmword_10035EAF0;
                              *(void *)(v873 + 32) = sub_1002A1A0C;
                              v874 = v973;
                              *(void *)(v873 + 40) = object;
                              *(void *)(v873 + 48) = sub_1002A1A0C;
                              *(void *)(v873 + 56) = v874;
                              *(void *)(v873 + 64) = sub_1002A1A04;
                              *(void *)(v873 + 72) = v864;
                              *(void *)(v873 + 80) = sub_1002A1A0C;
                              *(void *)(v873 + 88) = v865;
                              *(void *)(v873 + 96) = sub_1002A1A0C;
                              *(void *)(v873 + 104) = p_type;
                              *(void *)(v873 + 112) = sub_1002A19FC;
                              *(void *)(v873 + 120) = v867;
                              *(void *)(v873 + 128) = sub_1002A1A0C;
                              *(void *)(v873 + 136) = v868;
                              *(void *)(v873 + 144) = sub_1002A1A0C;
                              *(void *)(v873 + 152) = v869;
                              *(void *)(v873 + 160) = sub_1002A1A00;
                              *(void *)(v873 + 168) = v872;
                              swift_retain();
                              swift_retain();
                              v963 = v864;
                              swift_retain();
                              v965 = v865;
                              swift_retain();
                              v966 = (_BYTE *)p_type;
                              swift_retain();
                              v964 = v867;
                              swift_retain();
                              v968 = v868;
                              swift_retain();
                              v969 = v869;
                              swift_retain();
                              v853 = v872;
                              swift_retain();
                              swift_bridgeObjectRelease(v873);
                              if (os_log_type_enabled((os_log_t)v971, (os_log_type_t)v970))
                              {
                                v108 = (uint8_t *)sub_100002B30(25LL);
                                v854 = swift_slowAlloc(8LL, -1LL);
                                v855 = swift_slowAlloc(32LL, -1LL);
                                v991 = v854;
                                v984 = v855;
                                *(_WORD *)v108 = 770;
                                *(void *)&v979[0] = v108 + 2;
                                *(void *)&v980 = sub_1002A1A0C;
                                *((void *)&v980 + 1) = object;
                                v111 = v974;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)&v991,  (uint64_t)&v984);
                                v109 = v111;
                                if (v111) {
                                  goto LABEL_233;
                                }
                                swift_release(object);
                                *(void *)&v980 = sub_1002A1A0C;
                                *((void *)&v980 + 1) = v973;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)&v991,  (uint64_t)&v984);
                                swift_release(v973);
                                *(void *)&v980 = sub_1002A1A04;
                                *((void *)&v980 + 1) = v963;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)&v991,  (uint64_t)&v984);
                                p_type = 0LL;
                                swift_release(v963);
                                *(void *)&v980 = sub_1002A1A0C;
                                *((void *)&v980 + 1) = v965;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)&v991,  (uint64_t)&v984);
                                swift_release(v965);
                                *(void *)&v980 = sub_1002A1A0C;
                                *((void *)&v980 + 1) = v966;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)&v991,  (uint64_t)&v984);
                                swift_release(v966);
                                *(void *)&v980 = sub_1002A19FC;
                                *((void *)&v980 + 1) = v964;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)&v991,  (uint64_t)&v984);
                                swift_release(v964);
                                *(void *)&v980 = sub_1002A1A0C;
                                *((void *)&v980 + 1) = v968;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)&v991,  (uint64_t)&v984);
                                swift_release(v968);
                                *(void *)&v980 = sub_1002A1A0C;
                                *((void *)&v980 + 1) = v969;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)&v991,  (uint64_t)&v984);
                                swift_release(v969);
                                *(void *)&v980 = sub_1002A1A00;
                                *((void *)&v980 + 1) = v853;
                                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)&v991,  (uint64_t)&v984);
                                swift_release(v853);
                                v856 = v970;
                                v857 = "Cannot create new datapath for %@ to %s[%hhu] because unable to find an authentic"
                                       "ated PMK for the discovered publisher";
LABEL_209:
                                v875 = v971;
                                _os_log_impl((void *)&_mh_execute_header, (os_log_t)v971, v856, v857, v108, 0x19u);
                                v876 = sub_100002274(&qword_100404DE0);
                                swift_arrayDestroy(v854, 1LL, v876);
                                swift_slowDealloc(v854, -1LL, -1LL);
                                swift_arrayDestroy(v855, 1LL, &type metadata for Any[8]);
                                swift_slowDealloc(v855, -1LL, -1LL);
                                sub_100002B24((uint64_t)v108);

LABEL_211:
                                v877 = sub_1000033FC();
                                v878 = swift_allocError(&type metadata for WiFiError, v877, 0LL, 0LL);
                                *(_OWORD *)v879 = xmmword_10035E1A0;
                                *(_BYTE *)(v879 + 16) = 1;
                                swift_willThrow(v878);
LABEL_212:
                                sub_100111F98(v961, v951, v958, (uint64_t)v959, (unint64_t)v960);
                                swift_release(v967);
                                v537 = v962;
                                goto LABEL_120;
                              }

                              goto LABEL_210;
                            }

                            v656 = 0LL;
                            v613 = 0LL;
                            v654 = *v926;
                            v655 = (uint8_t *)v926[1];
                            goto LABEL_218;
                          }

                          if (v507 == 4
                            || (v801 = v959,
                                v800 = (unint64_t)v960,
                                sub_100020AFC((uint64_t)v959, (unint64_t)v960),
                                v802 = v958,
                                NANServiceInfo.genericServiceProtocol.getter(v958, (uint64_t)v801, v800),
                                v804 = v803,
                                sub_100111F98(v961, v951, v802, (uint64_t)v801, v800),
                                !v804))
                          {
                            v805 = v927;
                            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v919 + 56))( v927,  1LL,  1LL,  v930);
                          }

                          else
                          {
                            v805 = v927;
                            NANGenericServiceProtocol.publicKey.getter(v804, v927);
                            v806 = swift_bridgeObjectRelease(v804);
                            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v919 + 48))( v805,  1LL,  v930,  v806) != 1)
                            {
                              v807 = (uint64_t)v923;
                              (*(void (**)(char *, uint64_t, uint64_t))(v919 + 32))(v923, v805, v930);
                              v808 = type metadata accessor for NANSubscribe.Configuration(0LL);
                              v809 = v928;
                              sub_100057FE8( (uint64_t)&v962[*(int *)(v808 + 64)],  v928,  type metadata accessor for OWEKeys);
                              v654 = OWEKeys.generatePMK(for:asClient:)(v807, 1);
                              v811 = v810;
                              sub_10005802C(v809, type metadata accessor for OWEKeys);
                              if ((unint64_t)v811 >> 60 == 15)
                              {
                                swift_bridgeObjectRelease(object);
                                v812 = swift_allocObject(&unk_1003F7638, 24LL, 7LL);
                                v813 = v964;
                                *(void *)(v812 + 16) = v964;
                                v814 = (_BYTE *)swift_allocObject(&unk_1003F7660, 22LL, 7LL);
                                v814[16] = v952;
                                v814[17] = v954;
                                v814[18] = v953;
                                v814[19] = v969;
                                v814[20] = (_BYTE)v968;
                                v814[21] = (_BYTE)v970;
                                v815 = swift_allocObject(&unk_1003F7688, 32LL, 7LL);
                                *(void *)(v815 + 16) = sub_1002A1CC4;
                                *(void *)(v815 + 24) = v814;
                                v969 = swift_allocObject(&unk_1003F76B0, 17LL, 7LL);
                                *(_BYTE *)(v969 + 16) = (_BYTE)v971;
                                v962 = v813;
                                v971 = (_BYTE *)Logger.logObject.getter(v962);
                                LODWORD(v970) = static os_log_type_t.error.getter(v971);
                                object = (_BYTE *)swift_allocObject(&unk_1003F76D8, 17LL, 7LL);
                                object[16] = 64;
                                v973 = (void (*)(uint64_t, char))swift_allocObject(&unk_1003F7700, 17LL, 7LL);
                                *((_BYTE *)v973 + 16) = 8;
                                v816 = swift_allocObject(&unk_1003F7728, 32LL, 7LL);
                                *(void *)(v816 + 16) = sub_1002A1CA8;
                                *(void *)(v816 + 24) = v812;
                                v817 = swift_allocObject(&unk_1003F7750, 32LL, 7LL);
                                *(void *)(v817 + 16) = sub_1002A19EC;
                                *(void *)(v817 + 24) = v816;
                                v818 = swift_allocObject(&unk_1003F7778, 17LL, 7LL);
                                *(_BYTE *)(v818 + 16) = 32;
                                p_type = swift_allocObject(&unk_1003F77A0, 17LL, 7LL);
                                *(_BYTE *)(p_type + 16) = 8;
                                v819 = swift_allocObject(&unk_1003F77C8, 32LL, 7LL);
                                *(void *)(v819 + 16) = sub_1002A19F4;
                                *(void *)(v819 + 24) = v815;
                                v820 = (uint8_t *)swift_allocObject(&unk_1003F77F0, 32LL, 7LL);
                                *((void *)v820 + 2) = sub_1002A19EC;
                                *((void *)v820 + 3) = v819;
                                v821 = (os_log_s *)swift_allocObject(&unk_1003F7818, 17LL, 7LL);
                                *((_BYTE *)v821 + 16) = 0;
                                v822 = swift_allocObject(&unk_1003F7840, 17LL, 7LL);
                                *(_BYTE *)(v822 + 16) = 1;
                                v823 = swift_allocObject(&unk_1003F7868, 32LL, 7LL);
                                v824 = v969;
                                *(void *)(v823 + 16) = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
                                *(void *)(v823 + 24) = v824;
                                v825 = swift_allocObject(&unk_1003F7890, 32LL, 7LL);
                                *(void *)(v825 + 16) = sub_1002A1CC8;
                                *(void *)(v825 + 24) = v823;
                                v826 = swift_allocObject(v940, 176LL, 7LL);
                                *(_OWORD *)(v826 + 16) = xmmword_10035EAF0;
                                *(void *)(v826 + 32) = sub_1002A1A0C;
                                v827 = v973;
                                *(void *)(v826 + 40) = object;
                                *(void *)(v826 + 48) = sub_1002A1A0C;
                                *(void *)(v826 + 56) = v827;
                                *(void *)(v826 + 64) = sub_1002A1A04;
                                *(void *)(v826 + 72) = v817;
                                *(void *)(v826 + 80) = sub_1002A1A0C;
                                *(void *)(v826 + 88) = v818;
                                *(void *)(v826 + 96) = sub_1002A1A0C;
                                *(void *)(v826 + 104) = p_type;
                                *(void *)(v826 + 112) = sub_1002A19FC;
                                *(void *)(v826 + 120) = v820;
                                *(void *)(v826 + 128) = sub_1002A1A0C;
                                *(void *)(v826 + 136) = v821;
                                *(void *)(v826 + 144) = sub_1002A1A0C;
                                *(void *)(v826 + 152) = v822;
                                *(void *)(v826 + 160) = sub_1002A1A00;
                                *(void *)(v826 + 168) = v825;
                                swift_retain();
                                swift_retain();
                                v963 = v817;
                                swift_retain();
                                v965 = v818;
                                swift_retain();
                                v966 = (_BYTE *)p_type;
                                swift_retain();
                                v964 = v820;
                                swift_retain();
                                v968 = v821;
                                swift_retain();
                                v969 = v822;
                                swift_retain();
                                v828 = v825;
                                swift_retain();
                                swift_bridgeObjectRelease(v826);
                                if (os_log_type_enabled((os_log_t)v971, (os_log_type_t)v970))
                                {
                                  v108 = (uint8_t *)sub_100002B30(25LL);
                                  v829 = swift_slowAlloc(8LL, -1LL);
                                  v830 = swift_slowAlloc(32LL, -1LL);
                                  v976[0] = v829;
                                  v991 = v830;
                                  *(_WORD *)v108 = 770;
                                  *(void *)&v979[0] = v108 + 2;
                                  *(void *)&v980 = sub_1002A1A0C;
                                  *((void *)&v980 + 1) = object;
                                  v111 = v974;
                                  sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                  v109 = v111;
                                  if (v111) {
                                    goto LABEL_233;
                                  }
                                  swift_release(object);
                                  *(void *)&v980 = sub_1002A1A0C;
                                  *((void *)&v980 + 1) = v973;
                                  sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                  swift_release(v973);
                                  *(void *)&v980 = sub_1002A1A04;
                                  *((void *)&v980 + 1) = v963;
                                  sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                  p_type = 0LL;
                                  swift_release(v963);
                                  *(void *)&v980 = sub_1002A1A0C;
                                  *((void *)&v980 + 1) = v965;
                                  sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                  swift_release(v965);
                                  *(void *)&v980 = sub_1002A1A0C;
                                  *((void *)&v980 + 1) = v966;
                                  sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                  swift_release(v966);
                                  *(void *)&v980 = sub_1002A19FC;
                                  *((void *)&v980 + 1) = v964;
                                  sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                  swift_release(v964);
                                  *(void *)&v980 = sub_1002A1A0C;
                                  *((void *)&v980 + 1) = v968;
                                  sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                  swift_release(v968);
                                  *(void *)&v980 = sub_1002A1A0C;
                                  *((void *)&v980 + 1) = v969;
                                  sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                  swift_release(v969);
                                  *(void *)&v980 = sub_1002A1A00;
                                  *((void *)&v980 + 1) = v828;
                                  sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                                  swift_release(v828);
                                  v831 = v971;
                                  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v971,  (os_log_type_t)v970,  "Cannot create new datapath for %@ to %s[%hhu] because unable to derive the PMK using the OWE keys",  v108,  0x19u);
                                  v832 = sub_100002274(&qword_100404DE0);
                                  swift_arrayDestroy(v829, 1LL, v832);
                                  swift_slowDealloc(v829, -1LL, -1LL);
                                  swift_arrayDestroy(v830, 1LL, &type metadata for Any[8]);
                                  swift_slowDealloc(v830, -1LL, -1LL);
                                  sub_100002B24((uint64_t)v108);
                                }

                                else
                                {
                                  swift_release(v825);
                                  swift_release(v969);
                                  swift_release(v968);
                                  swift_release(v964);
                                  swift_release(v966);
                                  swift_release(v965);
                                  swift_release(v963);
                                  swift_release(v973);
                                  swift_release(object);
                                }

                                v902 = sub_1000033FC();
                                v903 = swift_allocError(&type metadata for WiFiError, v902, 0LL, 0LL);
                                *(_OWORD *)v904 = xmmword_10035E1A0;
                                *(_BYTE *)(v904 + 16) = 1;
                                swift_willThrow(v903);
                                sub_100111F98(v961, v951, v958, (uint64_t)v959, (unint64_t)v960);
                                swift_release(v967);

                                (*(void (**)(char *, uint64_t))(v919 + 8))(v923, v930);
                                goto LABEL_124;
                              }

                              v655 = v811;
                              (*(void (**)(char *, uint64_t))(v919 + 8))(v923, v930);
                              v656 = 0LL;
                              v613 = 0LL;
LABEL_218:
                              v657 = 0xF000000000000000LL;
                              v416 = v974;
                              v658 = (char)v970;
                              v541 = v953;
                              v417 = v954;
                              goto LABEL_132;
                            }
                          }

                          swift_bridgeObjectRelease(object);
                          sub_1000225EC(v805, (uint64_t *)&unk_10040D470);
                          v837 = swift_allocObject(&unk_1003F73B8, 24LL, 7LL);
                          v838 = v964;
                          *(void *)(v837 + 16) = v964;
                          v839 = (_BYTE *)swift_allocObject(&unk_1003F73E0, 22LL, 7LL);
                          v839[16] = v952;
                          v839[17] = v954;
                          v839[18] = v953;
                          v839[19] = v969;
                          v839[20] = (_BYTE)v968;
                          v839[21] = (_BYTE)v970;
                          v840 = swift_allocObject(&unk_1003F7408, 32LL, 7LL);
                          *(void *)(v840 + 16) = sub_1002A1CC4;
                          *(void *)(v840 + 24) = v839;
                          v969 = swift_allocObject(&unk_1003F7430, 17LL, 7LL);
                          *(_BYTE *)(v969 + 16) = (_BYTE)v971;
                          v962 = v838;
                          v971 = (_BYTE *)Logger.logObject.getter(v962);
                          LODWORD(v970) = static os_log_type_t.error.getter(v971);
                          object = (_BYTE *)swift_allocObject(&unk_1003F7458, 17LL, 7LL);
                          object[16] = 64;
                          v973 = (void (*)(uint64_t, char))swift_allocObject(&unk_1003F7480, 17LL, 7LL);
                          *((_BYTE *)v973 + 16) = 8;
                          v841 = swift_allocObject(&unk_1003F74A8, 32LL, 7LL);
                          *(void *)(v841 + 16) = sub_1002A1CA8;
                          *(void *)(v841 + 24) = v837;
                          v842 = swift_allocObject(&unk_1003F74D0, 32LL, 7LL);
                          *(void *)(v842 + 16) = sub_1002A19EC;
                          *(void *)(v842 + 24) = v841;
                          v843 = swift_allocObject(&unk_1003F74F8, 17LL, 7LL);
                          *(_BYTE *)(v843 + 16) = 32;
                          p_type = swift_allocObject(&unk_1003F7520, 17LL, 7LL);
                          *(_BYTE *)(p_type + 16) = 8;
                          v844 = swift_allocObject(&unk_1003F7548, 32LL, 7LL);
                          *(void *)(v844 + 16) = sub_1002A19F4;
                          *(void *)(v844 + 24) = v840;
                          v845 = (uint8_t *)swift_allocObject(&unk_1003F7570, 32LL, 7LL);
                          *((void *)v845 + 2) = sub_1002A19EC;
                          *((void *)v845 + 3) = v844;
                          v846 = (os_log_s *)swift_allocObject(&unk_1003F7598, 17LL, 7LL);
                          *((_BYTE *)v846 + 16) = 0;
                          v847 = swift_allocObject(&unk_1003F75C0, 17LL, 7LL);
                          *(_BYTE *)(v847 + 16) = 1;
                          v848 = swift_allocObject(&unk_1003F75E8, 32LL, 7LL);
                          v849 = v969;
                          *(void *)(v848 + 16) = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
                          *(void *)(v848 + 24) = v849;
                          v850 = swift_allocObject(&unk_1003F7610, 32LL, 7LL);
                          *(void *)(v850 + 16) = sub_1002A1CC8;
                          *(void *)(v850 + 24) = v848;
                          v851 = swift_allocObject(v940, 176LL, 7LL);
                          *(_OWORD *)(v851 + 16) = xmmword_10035EAF0;
                          *(void *)(v851 + 32) = sub_1002A1A0C;
                          v852 = v973;
                          *(void *)(v851 + 40) = object;
                          *(void *)(v851 + 48) = sub_1002A1A0C;
                          *(void *)(v851 + 56) = v852;
                          *(void *)(v851 + 64) = sub_1002A1A04;
                          *(void *)(v851 + 72) = v842;
                          *(void *)(v851 + 80) = sub_1002A1A0C;
                          *(void *)(v851 + 88) = v843;
                          *(void *)(v851 + 96) = sub_1002A1A0C;
                          *(void *)(v851 + 104) = p_type;
                          *(void *)(v851 + 112) = sub_1002A19FC;
                          *(void *)(v851 + 120) = v845;
                          *(void *)(v851 + 128) = sub_1002A1A0C;
                          *(void *)(v851 + 136) = v846;
                          *(void *)(v851 + 144) = sub_1002A1A0C;
                          *(void *)(v851 + 152) = v847;
                          *(void *)(v851 + 160) = sub_1002A1A00;
                          *(void *)(v851 + 168) = v850;
                          swift_retain();
                          swift_retain();
                          v963 = v842;
                          swift_retain();
                          v965 = v843;
                          swift_retain();
                          v966 = (_BYTE *)p_type;
                          swift_retain();
                          v964 = v845;
                          swift_retain();
                          v968 = v846;
                          swift_retain();
                          v969 = v847;
                          swift_retain();
                          v853 = v850;
                          swift_retain();
                          swift_bridgeObjectRelease(v851);
                          if (os_log_type_enabled((os_log_t)v971, (os_log_type_t)v970))
                          {
                            v108 = (uint8_t *)sub_100002B30(25LL);
                            v854 = swift_slowAlloc(8LL, -1LL);
                            v855 = swift_slowAlloc(32LL, -1LL);
                            v976[0] = v854;
                            v991 = v855;
                            *(_WORD *)v108 = 770;
                            *(void *)&v979[0] = v108 + 2;
                            *(void *)&v980 = sub_1002A1A0C;
                            *((void *)&v980 + 1) = object;
                            v111 = v974;
                            sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                            v109 = v111;
                            if (v111) {
                              goto LABEL_233;
                            }
                            swift_release(object);
                            *(void *)&v980 = sub_1002A1A0C;
                            *((void *)&v980 + 1) = v973;
                            sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                            swift_release(v973);
                            *(void *)&v980 = sub_1002A1A04;
                            *((void *)&v980 + 1) = v963;
                            sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                            p_type = 0LL;
                            swift_release(v963);
                            *(void *)&v980 = sub_1002A1A0C;
                            *((void *)&v980 + 1) = v965;
                            sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                            swift_release(v965);
                            *(void *)&v980 = sub_1002A1A0C;
                            *((void *)&v980 + 1) = v966;
                            sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                            swift_release(v966);
                            *(void *)&v980 = sub_1002A19FC;
                            *((void *)&v980 + 1) = v964;
                            sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                            swift_release(v964);
                            *(void *)&v980 = sub_1002A1A0C;
                            *((void *)&v980 + 1) = v968;
                            sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                            swift_release(v968);
                            *(void *)&v980 = sub_1002A1A0C;
                            *((void *)&v980 + 1) = v969;
                            sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                            swift_release(v969);
                            *(void *)&v980 = sub_1002A1A00;
                            *((void *)&v980 + 1) = v853;
                            sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v976,  (uint64_t)&v991);
                            swift_release(v853);
                            v856 = v970;
                            v857 = "Cannot create new datapath for %@ to %s[%hhu] because unable to find security paramet"
                                   "ers included for the discovered publisher";
                            goto LABEL_209;
                          }

LABEL_210:
                          swift_release(v853);
                          swift_release(v969);
                          swift_release(v968);
                          swift_release(v964);
                          swift_release(v966);
                          swift_release(v965);
                          swift_release(v963);
                          swift_release(v973);
                          swift_release(object);

                          goto LABEL_211;
                        }

                        v654 = v980;
                        goto LABEL_171;
                      }
                    }

                    else
                    {
                      v716 = 0LL;
                      v718 = 0xF000000000000000LL;
                    }

                    sub_100020B40(v716, v718);
                    goto LABEL_160;
                  }

                  goto LABEL_202;
                }
              }

              else
              {
                v520 = 0LL;
                v522 = 0xF000000000000000LL;
              }

              sub_100020B40(v520, v522);
LABEL_202:
              v707 = v946;
              v706 = v947;
              goto LABEL_142;
            }
          }

          else
          {
            v511 = 0LL;
            v513 = 0xF000000000000000LL;
            v514 = v965;
          }

          v706 = v511;
          v707 = (uint8_t *)v513;
LABEL_142:
          sub_100020B40(v706, (unint64_t)v707);
          goto LABEL_143;
        }
      }

      else
      {
        swift_endAccess(v979);
        v278 = (char)v971;
      }

      v340 = v969;
      v339 = (char)v970;
      v341 = swift_allocObject(&unk_1003F60D0, 32LL, 7LL);
      v342 = object;
      *(void *)(v341 + 16) = countAndFlagsBits;
      *(void *)(v341 + 24) = v342;
      v343 = swift_allocObject(&unk_1003F60F8, 32LL, 7LL);
      *(void *)(v343 + 16) = sub_1002A1CA4;
      *(void *)(v343 + 24) = v341;
      v344 = (_BYTE *)swift_allocObject(&unk_1003F6120, 22LL, 7LL);
      v344[16] = v952;
      v344[17] = v954;
      v344[18] = v953;
      v344[19] = v340;
      v344[20] = (_BYTE)v968;
      v344[21] = v339;
      v345 = swift_allocObject(&unk_1003F6148, 32LL, 7LL);
      *(void *)(v345 + 16) = sub_1002A1CC4;
      *(void *)(v345 + 24) = v344;
      v346 = swift_allocObject(&unk_1003F6170, 17LL, 7LL);
      *(_BYTE *)(v346 + 16) = v278;
      v347 = swift_allocObject(&unk_1003F6198, 17LL, 7LL);
      *(_BYTE *)(v347 + 16) = v943;
      v348 = v347;
      v970 = (_BYTE *)Logger.logObject.getter(v347);
      LODWORD(v965) = static os_log_type_t.error.getter(v970);
      v968 = (os_log_s *)swift_allocObject(&unk_1003F61C0, 17LL, 7LL);
      *((_BYTE *)v968 + 16) = 32;
      v969 = swift_allocObject(&unk_1003F61E8, 17LL, 7LL);
      *(_BYTE *)(v969 + 16) = 8;
      v349 = swift_allocObject(&unk_1003F6210, 32LL, 7LL);
      *(void *)(v349 + 16) = sub_1002A19F0;
      *(void *)(v349 + 24) = v343;
      v350 = swift_allocObject(&unk_1003F6238, 32LL, 7LL);
      *(void *)(v350 + 16) = sub_1002A19EC;
      *(void *)(v350 + 24) = v349;
      v351 = (uint8_t *)v350;
      v964 = (uint8_t *)swift_allocObject(&unk_1003F6260, 17LL, 7LL);
      v964[16] = 32;
      v966 = (_BYTE *)swift_allocObject(&unk_1003F6288, 17LL, 7LL);
      v966[16] = 8;
      v352 = swift_allocObject(&unk_1003F62B0, 32LL, 7LL);
      *(void *)(v352 + 16) = sub_1002A19F4;
      *(void *)(v352 + 24) = v345;
      v353 = (void (*)(uint64_t, char))swift_allocObject(&unk_1003F62D8, 32LL, 7LL);
      v973 = v353;
      *((void *)v353 + 2) = sub_1002A19EC;
      *((void *)v353 + 3) = v352;
      v963 = swift_allocObject(&unk_1003F6300, 17LL, 7LL);
      *(_BYTE *)(v963 + 16) = 0;
      object = (_BYTE *)swift_allocObject(&unk_1003F6328, 17LL, 7LL);
      object[16] = 1;
      v354 = swift_allocObject(&unk_1003F6350, 32LL, 7LL);
      *(void *)(v354 + 16) = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
      *(void *)(v354 + 24) = v346;
      v355 = swift_allocObject(&unk_1003F6378, 32LL, 7LL);
      *(void *)(v355 + 16) = sub_1002A1CC8;
      *(void *)(v355 + 24) = v354;
      v356 = (_BYTE *)v355;
      v961 = swift_allocObject(&unk_1003F63A0, 17LL, 7LL);
      *(_BYTE *)(v961 + 16) = 0;
      v971 = (_BYTE *)swift_allocObject(&unk_1003F63C8, 17LL, 7LL);
      v971[16] = 1;
      v357 = swift_allocObject(&unk_1003F63F0, 32LL, 7LL);
      *(void *)(v357 + 16) = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
      *(void *)(v357 + 24) = v348;
      v358 = swift_allocObject(&unk_1003F6418, 32LL, 7LL);
      *(void *)(v358 + 16) = sub_1002A1CC8;
      *(void *)(v358 + 24) = v357;
      v359 = swift_allocObject(v940, 224LL, 7LL);
      *(_OWORD *)(v359 + 16) = v921;
      *(void *)(v359 + 32) = sub_1002A1A0C;
      v360 = v969;
      *(void *)(v359 + 40) = v968;
      *(void *)(v359 + 48) = sub_1002A1A0C;
      *(void *)(v359 + 56) = v360;
      *(void *)(v359 + 64) = sub_1002A19FC;
      v361 = v351;
      *(void *)(v359 + 72) = v351;
      *(void *)(v359 + 80) = sub_1002A1A0C;
      v362 = v963;
      v363 = v964;
      *(void *)(v359 + 88) = v964;
      *(void *)(v359 + 96) = sub_1002A1A0C;
      *(void *)(v359 + 104) = v966;
      *(void *)(v359 + 112) = sub_1002A19FC;
      *(void *)(v359 + 120) = v973;
      *(void *)(v359 + 128) = sub_1002A1A0C;
      *(void *)(v359 + 136) = v362;
      *(void *)(v359 + 144) = sub_1002A1A0C;
      *(void *)(v359 + 152) = object;
      *(void *)(v359 + 160) = sub_1002A1A00;
      v364 = v356;
      *(void *)(v359 + 168) = v356;
      *(void *)(v359 + 176) = sub_1002A1A0C;
      v365 = v961;
      *(void *)(v359 + 184) = v961;
      *(void *)(v359 + 192) = sub_1002A1A0C;
      *(void *)(v359 + 200) = v971;
      *(void *)(v359 + 208) = sub_1002A1A00;
      *(void *)(v359 + 216) = v358;
      swift_retain();
      swift_retain();
      v962 = v361;
      swift_retain();
      swift_retain();
      p_type = v358;
      swift_retain();
      swift_retain();
      swift_retain();
      v366 = object;
      swift_retain();
      swift_retain();
      v112 = v365;
      swift_retain();
      v367 = v971;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease(v359);
      if (os_log_type_enabled((os_log_t)v970, (os_log_type_t)v965))
      {
        v957 = (uint8_t *)p_type;
        v960 = v364;
        v368 = v962;
        v109 = v966;
        p_type = v112;
        v369 = (uint8_t *)sub_100002B30(28LL);
        v370 = swift_slowAlloc(64LL, -1LL);
        v986[0] = 0LL;
        v958 = v370;
        v959 = v369;
        v985[0] = v370;
        *(_WORD *)v369 = 1026;
        *(void *)&v979[0] = v369 + 2;
        *(void *)&v980 = sub_1002A1A0C;
        v371 = v968;
        *((void *)&v980 + 1) = v968;
        v111 = v974;
        sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
        v108 = v111;
        if (v111)
        {
          swift_errorRelease(v111);
          __break(1u);
LABEL_231:
          sub_1000AADB0(v965, v947, (unint64_t)v946, v942, v945, 0LL, (uint64_t)v970);
          goto LABEL_232;
        }

        swift_release(v371);
        *(void *)&v980 = sub_1002A1A0C;
        v372 = v969;
        *((void *)&v980 + 1) = v969;
        sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
        v373 = v964;
        swift_release(v372);
        *(void *)&v980 = sub_1002A19FC;
        *((void *)&v980 + 1) = v368;
        sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
        v374 = v967;
        swift_release(v368);
        *(void *)&v980 = sub_1002A1A0C;
        *((void *)&v980 + 1) = v373;
        sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
        swift_release(v373);
        *(void *)&v980 = sub_1002A1A0C;
        v375 = v109;
        *((void *)&v980 + 1) = v109;
        sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
        v376 = v963;
        swift_release(v375);
        *(void *)&v980 = sub_1002A19FC;
        v377 = v973;
        *((void *)&v980 + 1) = v973;
        sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
        swift_release(v377);
        *(void *)&v980 = sub_1002A1A0C;
        *((void *)&v980 + 1) = v376;
        sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
        swift_release(v376);
        *(void *)&v980 = sub_1002A1A0C;
        v378 = object;
        *((void *)&v980 + 1) = object;
        sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
        swift_release(v378);
        *(void *)&v980 = sub_1002A1A00;
        v379 = v960;
        *((void *)&v980 + 1) = v960;
        sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
        swift_release(v379);
        *(void *)&v980 = sub_1002A1A0C;
        *((void *)&v980 + 1) = p_type;
        sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
        swift_release(p_type);
        *(void *)&v980 = sub_1002A1A0C;
        v380 = v971;
        *((void *)&v980 + 1) = v971;
        sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
        swift_release(v380);
        *(void *)&v980 = sub_1002A1A00;
        v381 = v957;
        *((void *)&v980 + 1) = v957;
        sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
        swift_release(v381);
        v382 = v970;
        v383 = v959;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v970,  (os_log_type_t)v965,  "Cannot create new datapath %s to %s[%hhu] because unable to find a matching subscribe with instance ID %hhu",  v959,  0x1Cu);
        p_type = v958;
        swift_arrayDestroy(v958, 2LL, &type metadata for Any[8]);
        swift_slowDealloc(p_type, -1LL, -1LL);
        sub_100002B24((uint64_t)v383);
      }

      else
      {
        swift_release(p_type);
        swift_release(v367);
        swift_release(v112);
        swift_release(v364);
        swift_release(v366);
        swift_release(v362);
        swift_release(v973);
        swift_release(v966);
        swift_release(v363);
        swift_release(v962);
        swift_release(v969);
        swift_release(v968);

        v374 = v967;
      }

      v384 = sub_1000033FC();
      v385 = swift_allocError(&type metadata for WiFiError, v384, 0LL, 0LL);
      *(_OWORD *)v386 = xmmword_10035D880;
      *(_BYTE *)(v386 + 16) = 1;
      swift_willThrow(v385);
      swift_release(v374);
LABEL_124:
      sub_1000225EC((uint64_t)v989, (uint64_t *)&unk_10040DCB0);
      return p_type;
    }

    v284 = swift_allocObject(&unk_1003F5CC0, 32LL, 7LL);
    v285 = object;
    *(void *)(v284 + 16) = countAndFlagsBits;
    *(void *)(v284 + 24) = v285;
    v286 = swift_allocObject(&unk_1003F5CE8, 32LL, 7LL);
    *(void *)(v286 + 16) = sub_1002A1CA4;
    *(void *)(v286 + 24) = v284;
    v287 = swift_allocObject(&unk_1003F5D10, 17LL, 7LL);
    *(_BYTE *)(v287 + 16) = v943;
    v288 = (_BYTE *)swift_allocObject(&unk_1003F5D38, 22LL, 7LL);
    v288[16] = v952;
    v288[17] = v954;
    v288[18] = v953;
    v288[19] = v969;
    v288[20] = (_BYTE)v968;
    v288[21] = (_BYTE)v970;
    v289 = swift_allocObject(&unk_1003F5D60, 32LL, 7LL);
    *(void *)(v289 + 16) = sub_1002A1CC4;
    *(void *)(v289 + 24) = v288;
    v290 = swift_allocObject(&unk_1003F5D88, 17LL, 7LL);
    *(_BYTE *)(v290 + 16) = (_BYTE)v971;
    v291 = swift_retain();
    v966 = (_BYTE *)Logger.logObject.getter(v291);
    LODWORD(v961) = static os_log_type_t.error.getter(v966);
    v962 = (uint8_t *)swift_allocObject(&unk_1003F5DB0, 17LL, 7LL);
    v962[16] = 32;
    v963 = swift_allocObject(&unk_1003F5DD8, 17LL, 7LL);
    *(_BYTE *)(v963 + 16) = 8;
    v292 = swift_allocObject(&unk_1003F5E00, 32LL, 7LL);
    *(void *)(v292 + 16) = sub_1002A19F0;
    *(void *)(v292 + 24) = v286;
    v293 = swift_allocObject(&unk_1003F5E28, 32LL, 7LL);
    *(void *)(v293 + 16) = sub_1002A19EC;
    *(void *)(v293 + 24) = v292;
    v294 = (void (*)(uint64_t, char))swift_allocObject(&unk_1003F5E50, 17LL, 7LL);
    *((_BYTE *)v294 + 16) = 0;
    v965 = swift_allocObject(&unk_1003F5E78, 17LL, 7LL);
    *(_BYTE *)(v965 + 16) = 1;
    v295 = swift_allocObject(&unk_1003F5EA0, 32LL, 7LL);
    *(void *)(v295 + 16) = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
    *(void *)(v295 + 24) = v287;
    v296 = (void *)swift_allocObject(&unk_1003F5EC8, 32LL, 7LL);
    v296[2] = sub_1002A1CC8;
    v296[3] = v295;
    v297 = v296;
    v964 = (uint8_t *)v296;
    v298 = swift_allocObject(&unk_1003F5EF0, 17LL, 7LL);
    *(_BYTE *)(v298 + 16) = 32;
    v299 = (uint8_t *)v298;
    object = (_BYTE *)swift_allocObject(&unk_1003F5F18, 17LL, 7LL);
    object[16] = 8;
    v300 = swift_allocObject(&unk_1003F5F40, 32LL, 7LL);
    *(void *)(v300 + 16) = sub_1002A19F4;
    *(void *)(v300 + 24) = v289;
    v301 = swift_allocObject(&unk_1003F5F68, 32LL, 7LL);
    *(void *)(v301 + 16) = sub_1002A19EC;
    *(void *)(v301 + 24) = v300;
    v302 = v301;
    v960 = (_BYTE *)swift_allocObject(&unk_1003F5F90, 17LL, 7LL);
    v960[16] = 0;
    v968 = (os_log_s *)swift_allocObject(&unk_1003F5FB8, 17LL, 7LL);
    *((_BYTE *)v968 + 16) = 1;
    v303 = swift_allocObject(&unk_1003F5FE0, 32LL, 7LL);
    *(void *)(v303 + 16) = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
    *(void *)(v303 + 24) = v290;
    v304 = swift_allocObject(&unk_1003F6008, 32LL, 7LL);
    v969 = v304;
    *(void *)(v304 + 16) = sub_1002A1CC8;
    *(void *)(v304 + 24) = v303;
    v970 = (_BYTE *)swift_allocObject(&unk_1003F6030, 17LL, 7LL);
    v970[16] = 0;
    v971 = (_BYTE *)swift_allocObject(&unk_1003F6058, 17LL, 7LL);
    v971[16] = 8;
    v305 = swift_allocObject(&unk_1003F6080, 32LL, 7LL);
    v306 = v973;
    *(void *)(v305 + 16) = sub_1002A0A3C;
    *(void *)(v305 + 24) = v306;
    v307 = swift_allocObject(&unk_1003F60A8, 32LL, 7LL);
    *(void *)(v307 + 16) = sub_1002A0AE0;
    *(void *)(v307 + 24) = v305;
    v308 = swift_allocObject(v940, 272LL, 7LL);
    *(_OWORD *)(v308 + 16) = xmmword_10035EAE0;
    *(void *)(v308 + 32) = sub_1002A1A0C;
    v309 = v963;
    *(void *)(v308 + 40) = v962;
    *(void *)(v308 + 48) = sub_1002A1A0C;
    *(void *)(v308 + 56) = v309;
    *(void *)(v308 + 64) = sub_1002A19FC;
    *(void *)(v308 + 72) = v293;
    *(void *)(v308 + 80) = sub_1002A1A0C;
    *(void *)(v308 + 88) = v294;
    *(void *)(v308 + 96) = sub_1002A1A0C;
    *(void *)(v308 + 104) = v965;
    *(void *)(v308 + 112) = sub_1002A1A00;
    *(void *)(v308 + 120) = v297;
    *(void *)(v308 + 128) = sub_1002A1A0C;
    v108 = v299;
    *(void *)(v308 + 136) = v299;
    *(void *)(v308 + 144) = sub_1002A1A0C;
    *(void *)(v308 + 152) = object;
    *(void *)(v308 + 160) = sub_1002A19FC;
    v310 = v302;
    *(void *)(v308 + 168) = v302;
    *(void *)(v308 + 176) = sub_1002A1A0C;
    v311 = v960;
    *(void *)(v308 + 184) = v960;
    *(void *)(v308 + 192) = sub_1002A1A0C;
    *(void *)(v308 + 200) = v968;
    *(void *)(v308 + 208) = sub_1002A1A00;
    *(void *)(v308 + 216) = v969;
    *(void *)(v308 + 224) = sub_1002A1A0C;
    *(void *)(v308 + 232) = v970;
    *(void *)(v308 + 240) = sub_1002A1A0C;
    *(void *)(v308 + 248) = v971;
    *(void *)(v308 + 256) = sub_1002A0AE8;
    *(void *)(v308 + 264) = v307;
    swift_retain();
    swift_retain();
    v959 = (uint8_t *)v293;
    swift_retain();
    v973 = v294;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    p_type = v310;
    swift_retain();
    swift_retain();
    swift_retain();
    v109 = (uint8_t *)v968;
    swift_retain();
    v312 = v969;
    swift_retain();
    v313 = v970;
    swift_retain();
    v314 = v971;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease(v308);
    if (!os_log_type_enabled((os_log_t)v966, (os_log_type_t)v961))
    {
      swift_release(v307);
      swift_release(v314);
      swift_release(v313);
      swift_release(v312);
      swift_release(v109);
      swift_release(v311);
      swift_release(p_type);
      swift_release(object);
      swift_release(v108);
      swift_release(v964);
      swift_release(v965);
      swift_release(v973);
      swift_release(v959);
      swift_release(v963);
      swift_release(v962);

      v320 = v967;
      goto LABEL_76;
    }

    v957 = v108;
    v958 = p_type;
    p_type = (uint64_t)object;
    v956 = v307;
    v315 = (uint8_t *)sub_100002B30(38LL);
    v316 = swift_slowAlloc(64LL, -1LL);
    v986[0] = 0LL;
    v954 = v316;
    countAndFlagsBits = v315;
    v985[0] = v316;
    *(_WORD *)v315 = 1282;
    *(void *)&v979[0] = v315 + 2;
    *(void *)&v980 = sub_1002A1A0C;
    v317 = v962;
    *((void *)&v980 + 1) = v962;
    v111 = v974;
    sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
    v112 = (uint64_t)v111;
    if (!v111)
    {
      swift_release(v317);
      *(void *)&v980 = sub_1002A1A0C;
      v318 = v963;
      *((void *)&v980 + 1) = v963;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
      v319 = v959;
      swift_release(v318);
      *(void *)&v980 = sub_1002A19FC;
      *((void *)&v980 + 1) = v319;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
      v320 = v967;
      v321 = v965;
      v322 = p_type;
      swift_release(v319);
      *(void *)&v980 = sub_1002A1A0C;
      v323 = v973;
      *((void *)&v980 + 1) = v973;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
      v324 = v957;
      swift_release(v323);
      *(void *)&v980 = sub_1002A1A0C;
      *((void *)&v980 + 1) = v321;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
      swift_release(v321);
      *(void *)&v980 = sub_1002A1A00;
      v325 = v964;
      *((void *)&v980 + 1) = v964;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
      swift_release(v325);
      *(void *)&v980 = sub_1002A1A0C;
      *((void *)&v980 + 1) = v324;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
      swift_release(v324);
      *(void *)&v980 = sub_1002A1A0C;
      *((void *)&v980 + 1) = v322;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
      v326 = v109;
      swift_release(v322);
      *(void *)&v980 = sub_1002A19FC;
      v327 = v958;
      *((void *)&v980 + 1) = v958;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
      v328 = v960;
      swift_release(v327);
      *(void *)&v980 = sub_1002A1A0C;
      *((void *)&v980 + 1) = v328;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
      swift_release(v328);
      *(void *)&v980 = sub_1002A1A0C;
      *((void *)&v980 + 1) = v326;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
      v329 = v971;
      swift_release(v326);
      *(void *)&v980 = sub_1002A1A00;
      v330 = v969;
      *((void *)&v980 + 1) = v969;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
      swift_release(v330);
      *(void *)&v980 = sub_1002A1A0C;
      v331 = v970;
      *((void *)&v980 + 1) = v970;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
      swift_release(v331);
      *(void *)&v980 = sub_1002A1A0C;
      *((void *)&v980 + 1) = v329;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
      v332 = v329;
      v333 = (os_log_s *)v966;
      swift_release(v332);
      *(void *)&v980 = sub_1002A0AE8;
      v334 = v956;
      *((void *)&v980 + 1) = v956;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v986,  (uint64_t)v985);
      swift_release(v334);
      v335 = countAndFlagsBits;
      _os_log_impl( (void *)&_mh_execute_header,  v333,  (os_log_type_t)v961,  "Cannot create new datapath %s[%hhu] to %s[%hhu] because already exceeded maximum active count %ld",  countAndFlagsBits,  0x26u);
      p_type = v954;
      swift_arrayDestroy(v954, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(p_type, -1LL, -1LL);
      sub_100002B24((uint64_t)v335);

LABEL_76:
      v336 = sub_1000033FC();
      v337 = swift_allocError(&type metadata for WiFiError, v336, 0LL, 0LL);
      *(_OWORD *)v338 = xmmword_1003453F0;
      *(_BYTE *)(v338 + 16) = 1;
      swift_willThrow(v337);
      swift_release(v320);
      goto LABEL_124;
    }

LABEL_232:
    swift_errorRelease(v112);
    __break(1u);
    sub_1000AADB0(v965, v947, (unint64_t)v946, v942, v945, 0LL, (uint64_t)v970);
    goto LABEL_233;
  }

  swift_bridgeObjectRelease(*((void *)&v979[0] + 1));
  sub_1000226B0(v963, (uint64_t)&v980, (uint64_t *)&unk_10040E450);
  if ((v983 & 1) != 0)
  {
    sub_100022594(&v980, v979);
    v224 = sub_100002274(&qword_10040DCE8);
    v225 = swift_dynamicCast(v987, v979, &type metadata for Any[8], v224, 6LL);
    v226 = v951;
    p_type = v945;
    v227 = v946;
    if ((v225 & 1) != 0)
    {
      v959 = v223;
      v228 = 0LL;
      goto LABEL_55;
    }

    swift_bridgeObjectRelease(object);
    v228 = 0LL;
LABEL_59:
    v245 = v967;
    v246 = sub_1000033FC();
    v247 = swift_allocError(&type metadata for WiFiError, v246, 0LL, 0LL);
    *(_OWORD *)v248 = xmmword_10033A940;
    *(_BYTE *)(v248 + 16) = 1;
    swift_willThrow(v247);
    swift_release(v245);

    sub_1000225EC((uint64_t)v989, (uint64_t *)&unk_10040DCB0);
    return p_type;
  }

  v228 = (void *)v980;
  sub_10026341C();
  v231 = sub_100002274(&qword_10040DCE8);
  v232 = swift_dynamicCast(v987, v979, &type metadata for Any[8], v231, 6LL);
  v226 = v951;
  p_type = v945;
  v227 = v946;
  if ((v232 & 1) == 0)
  {
    swift_bridgeObjectRelease(object);
    goto LABEL_59;
  }

  v959 = v223;
LABEL_55:
  v958 = v987[0];
  v233 = (void (*)(uint64_t, char *, uint64_t))*((void *)v227 + 2);
  v233(p_type, v944, v226);
  v234 = (_BYTE *)swift_allocObject(&unk_1003F8038, 24LL, 7LL);
  swift_unknownObjectWeakInit(v234 + 16, v959);
  v960 = v228;
  if (v228)
  {
    v235 = p_type;
    v236 = swift_allocObject(&unk_1003F8060, 24LL, 7LL);
    swift_unknownObjectWeakInit(v236 + 16, v228);
    v237 = v939;
    v233((uint64_t)v939, (char *)v235, v226);
    v238 = v227[80];
    v239 = (v238 + 48) & ~v238;
    v240 = (v938 + v239 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    v241 = (char *)swift_allocObject(&unk_1003F8088, v240 + 8, v238 | 7);
    v242 = v957;
    *((void *)v241 + 2) = v956;
    *((void *)v241 + 3) = v242;
    *((void *)v241 + 4) = v234;
    *((void *)v241 + 5) = v236;
    (*((void (**)(char *, char *, uint64_t))v227 + 4))(&v241[v239], v237, v951);
    v243 = (void *)v958;
    *(void *)&v241[v240] = v958;
    v222 = v221;
    v229 = v973;
    swift_unknownObjectRetain_n(v243, 2LL);
    v244 = v960;
    swift_retain();
    swift_retain();
    sub_100262B30((uint64_t)sub_1002A11E0, (uint64_t)v241);
    swift_release(v236);

    v230 = v965;
  }

  else
  {
    v243 = (void *)v958;
    swift_unknownObjectRetain(v958);
    v230 = v965;
    v229 = v973;
  }

  v249 = v959;
  if ((sub_10027C18C(v243, (uint64_t)v967) & 1) == 0)
  {
    (*((void (**)(unint64_t, uint64_t))v946 + 1))(v945, v951);
    swift_release(v234);

    swift_unknownObjectRelease_n(v243, 2LL);
    goto LABEL_66;
  }

  v971 = v234;
  v974 = v222;
  swift_bridgeObjectRelease(object);
  v250 = swift_allocObject(&unk_1003F80B0, 24LL, 7LL);
  *(void *)(v250 + 16) = v249;
  p_type = v249;
  v251 = (os_log_s *)Logger.logObject.getter(p_type);
  v252 = static os_log_type_t.default.getter();
  v253 = swift_allocObject(&unk_1003F80D8, 17LL, 7LL);
  *(_BYTE *)(v253 + 16) = 64;
  v254 = swift_allocObject(&unk_1003F8100, 17LL, 7LL);
  *(_BYTE *)(v254 + 16) = 8;
  v255 = swift_allocObject(&unk_1003F8128, 32LL, 7LL);
  *(void *)(v255 + 16) = sub_1002A1264;
  *(void *)(v255 + 24) = v250;
  v256 = swift_allocObject(&unk_1003F8150, 32LL, 7LL);
  *(void *)(v256 + 16) = sub_1002A19EC;
  *(void *)(v256 + 24) = v255;
  v257 = swift_allocObject(v940, 80LL, 7LL);
  *(_OWORD *)(v257 + 16) = xmmword_100339910;
  *(void *)(v257 + 32) = sub_1002A1A0C;
  *(void *)(v257 + 40) = v253;
  *(void *)(v257 + 48) = sub_1002A1A0C;
  *(void *)(v257 + 56) = v254;
  *(void *)(v257 + 64) = sub_1002A1A04;
  *(void *)(v257 + 72) = v256;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease(v257);
  if (os_log_type_enabled(v251, (os_log_type_t)v252))
  {
    LODWORD(v970) = v252;
    object = v251;
    v258 = (uint8_t *)sub_100002B30(12LL);
    v259 = swift_slowAlloc(8LL, -1LL);
    v987[0] = v259;
    v986[0] = 0LL;
    *(_WORD *)v258 = 258;
    *(void *)&v979[0] = v258 + 2;
    *(void *)&v980 = sub_1002A1A0C;
    *((void *)&v980 + 1) = v253;
    v260 = v974;
    sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v987,  (uint64_t)v986);
    v84 = v260;
    v261 = v960;
    if (v260)
    {
LABEL_227:
      swift_unknownObjectRelease(v958);
      while (1)
      {
        swift_errorRelease(v84);
        __break(1u);
LABEL_229:
        swift_errorRelease(p_type);
        __break(1u);
        v908 = v965;
        v910 = v946;
        v909 = v947;
LABEL_234:
        sub_1000AADB0(v908, v909, (unint64_t)v910, v942, v945, 0LL, (uint64_t)v970);
      }
    }

    swift_release(v253);
    *(void *)&v980 = sub_1002A1A0C;
    *((void *)&v980 + 1) = v254;
    sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v987,  (uint64_t)v986);
    swift_release(v254);
    *(void *)&v980 = sub_1002A1A04;
    *((void *)&v980 + 1) = v256;
    sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v987,  (uint64_t)v986);
    v974 = 0LL;
    swift_release(v256);
    v262 = (os_log_t)object;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)object,  (os_log_type_t)v970,  "Attached this datapath request to the matching existing %@",  v258,  0xCu);
    v263 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v259, 1LL, v263);
    swift_slowDealloc(v259, -1LL, -1LL);
    sub_100002B24((uint64_t)v258);
  }

  else
  {
    swift_release(v256);
    swift_release(v254);
    swift_release(v253);

    v261 = v960;
  }

  if (v261)
  {
    v982 = v961;
    *(void *)&v980 = p_type;
    v387 = v261;
    v388 = (id)p_type;
    sub_10026331C((uint64_t)&v980);
  }

  swift_beginAccess(p_type + qword_10040DA68, &v980, 32LL, 0LL);
  v389 = NANDatapath.Configuration.identifier.getter();
  v390 = v389;
  v391 = v389 >> 8;
  v392 = v389 >> 16;
  v393 = v389 >> 24;
  v394 = HIDWORD(v389);
  v395 = v389 >> 40;
  object = (_BYTE *)HIWORD(v389);
  swift_endAccess(&v980);
  v973 = sub_10027FF7C((uint64_t)&v980);
  LOBYTE(v987[0]) = v390;
  BYTE1(v987[0]) = v391;
  BYTE2(v987[0]) = v392;
  BYTE3(v987[0]) = v393;
  BYTE4(v987[0]) = v394;
  BYTE5(v987[0]) = v395;
  BYTE6(v987[0]) = (_BYTE)object;
  v396 = type metadata accessor for Dictionary(0LL, &type metadata for NANPeerServiceIdentifier, v964, v962);
  v397 = (void (*)(_OWORD *, void))Dictionary.subscript.modify(v979, v987, v396);
  if (*v398)
  {
    v399 = v960;
    v400 = v960;
    sub_10027F7E4(v399);

    v397(v979, 0LL);
    v973((uint64_t)&v980, 0);
    swift_release(v967);
    swift_unknownObjectRelease_n(v958, 2LL);
    (*((void (**)(unint64_t, uint64_t))v946 + 1))(v945, v951);
    sub_1000225EC((uint64_t)v989, (uint64_t *)&unk_10040DCB0);

    swift_release(v971);
  }

  else
  {
    v397(v979, 0LL);
    v973((uint64_t)&v980, 0);
    swift_release(v967);
    swift_unknownObjectRelease_n(v958, 2LL);
    (*((void (**)(unint64_t, uint64_t))v946 + 1))(v945, v951);
    sub_1000225EC((uint64_t)v989, (uint64_t *)&unk_10040DCB0);
    swift_release(v971);
  }

  return p_type;
}

uint64_t sub_10029CBB0(void *a1)
{
  id v1 = [a1 discoveryResult];
  id v2 = [v1 serviceName];

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

uint64_t sub_10029CC20(void *a1)
{
  id v1 = [a1 interfaceName];
  if (!v1) {
    return 1701736302LL;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

BOOL sub_10029CC84( void *a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = *a1 + qword_10040DA68;
  swift_beginAccess(v11, v22, 0LL, 0LL);
  Swift::String v12 = String.lowercased()();
  Swift::String v13 = String.lowercased()();
  if (v12._countAndFlagsBits == v13._countAndFlagsBits && v12._object == v13._object)
  {
    swift_bridgeObjectRelease_n(v12._object, 2LL);
    goto LABEL_9;
  }

  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)( v12._countAndFlagsBits,  v12._object,  v13._countAndFlagsBits,  v13._object,  0LL);
  swift_bridgeObjectRelease(v12._object);
  swift_bridgeObjectRelease(v13._object);
  BOOL v16 = 0;
  if ((v15 & 1) != 0)
  {
LABEL_9:
    if (*(_BYTE *)(v11 + 32))
    {
      if (*(_BYTE *)(v11 + 32) == 1 && a5 == 2) {
        return 0;
      }
    }

    else if (a5 - 1 < 2)
    {
      return 0;
    }

    if (static NANClusterChangeEvent.__derived_struct_equals(_:_:)( *(unsigned __int16 *)(v11 + 25) | ((unint64_t)*(unsigned int *)(v11 + 27) << 16),  a6 & 0xFFFFFFFFFFFFLL))
    {
      uint64_t v18 = *(unsigned int *)(v11 + 3);
      uint64_t v19 = *(unsigned __int16 *)(v11 + 1);
      uint64_t v20 = (*(uint64_t (**)(void))(*(void *)a7 + 232LL))();
      return static NANClusterChangeEvent.__derived_struct_equals(_:_:)(v19 | (v18 << 16), v20 & 0xFFFFFFFFFFFFLL);
    }

    return 0;
  }

  return v16;
}

void sub_10029CDF8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  v10 = (uint64_t *)((char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  Swift::String v12 = (void *)*v11;
  uint64_t *v10 = *v11;
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if ((v12 & 1) != 0)
  {
    uint64_t v14 = a1 + 16;
    swift_beginAccess(v14, v42, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v14);
    if (Strong)
    {
      BOOL v16 = (void *)Strong;
      uint64_t v17 = a2 + 16;
      swift_beginAccess(v17, v41, 0LL, 0LL);
      uint64_t v18 = (void *)swift_unknownObjectWeakLoadStrong(v17);
      if (v18)
      {
        uint64_t v19 = v18;
        id v20 = v18;
        id v21 = v16;
        id v22 = v20;
        id v23 = v21;
        v24 = (os_log_s *)Logger.logObject.getter(v23);
        os_log_type_t v25 = static os_log_type_t.default.getter();
        int v26 = v25;
        if (os_log_type_enabled(v24, v25))
        {
          uint64_t v27 = swift_slowAlloc(22LL, -1LL);
          uint64_t v28 = swift_slowAlloc(16LL, -1LL);
          v38 = a4;
          id v39 = v22;
          v29 = (void *)v28;
          *(_DWORD *)uint64_t v27 = 138412546;
          v37 = v24;
          id v30 = v22;
          int v36 = v26;
          id v31 = v30;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40);
          void *v29 = v19;

          *(_WORD *)(v27 + 12) = 2112;
          id v39 = v23;
          id v32 = v23;
          v24 = v37;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40);
          v29[1] = v16;

          _os_log_impl( (void *)&_mh_execute_header,  v24,  (os_log_type_t)v36,  "%@ was invalidated detaching from %@",  (uint8_t *)v27,  0x16u);
          uint64_t v33 = sub_100002274(&qword_100404DE0);
          swift_arrayDestroy(v29, 2LL, v33);
          v34 = v29;
          a4 = v38;
          swift_slowDealloc(v34, -1LL, -1LL);
          swift_slowDealloc(v27, -1LL, -1LL);
        }

        else
        {
        }

        v40[2] = swift_getObjectType(a4);
        id v39 = a4;
        swift_unknownObjectRetain(a4);
        sub_100279AF8((uint64_t)&v39);

        sub_100002AC4(&v39);
      }

      else
      {
      }
    }
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10029D0C8(uint64_t *a1)
{
  id v1 = a1;
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 80);
  uint64_t v4 = *(void *)(*(void *)(*a1 + 88) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v4,  v3,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v4,  v3,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v7 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v8 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v7,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.PreferencesBacking: PreferencesStorage);
  uint64_t v10 = type metadata accessor for Preferences(0LL, v7, v8, v9);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  id v13 = (char *)&v16 - v12;
  uint64_t v14 = *(uint64_t *)((char *)v1 + *(void *)(v2 + 280));
  swift_unownedRetainStrong(v14);
  WiFiInterface.preferences.getter();
  swift_release(v14);
  LOBYTE(v1) = Preferences.automaticallyUseEncryption.getter(v10);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v1 & 1;
}

BOOL sub_10029D210(uint64_t a1)
{
  uint64_t v1 = a1 + qword_100410BB0;
  swift_beginAccess(a1 + qword_100410BB0, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0LL) + 68)) & 1) == 0;
}

uint64_t sub_10029D270(uint64_t a1, uint64_t a2)
{
  return sub_10029D2A8(a1, a2, (uint64_t (*)(void *, uint64_t))sub_10028F950);
}

uint64_t sub_10029D28C(uint64_t a1, uint64_t a2)
{
  return sub_10029D2A8(a1, a2, (uint64_t (*)(void *, uint64_t))sub_10029069C);
}

uint64_t sub_10029D2A8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t))
{
  v8[3] = swift_getObjectType(a2);
  v8[0] = a2;
  char v9 = 1;
  swift_unknownObjectRetain(a2);
  uint64_t v6 = a3(v8, a1);
  sub_1000225EC((uint64_t)v8, (uint64_t *)&unk_10040E450);
  return v6;
}

uint64_t sub_10029D338(uint64_t a1, uint64_t a2)
{
  return sub_10029D2A8(a1, a2, (uint64_t (*)(void *, uint64_t))sub_100292E0C);
}

uint64_t sub_10029D354(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_bridgeObjectRetain(a2);
  DNSRecords.Identifier.description.getter(a1, a2, a3 & 1);
  uint64_t v12 = v11;
  swift_bridgeObjectRelease(a2);
  id v13 = objc_allocWithZone(&OBJC_CLASS___WiFiAwareSubscribeConfiguration);
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = objc_msgSend(v13, "initWithServiceName:", v14, swift_bridgeObjectRelease(v12).n128_f64[0]);

  [v15 setAuthenticationType:0];
  uint64_t v16 = sub_10029D2A8((uint64_t)v15, a4, (uint64_t (*)(void *, uint64_t))sub_10028F950);

  if (!v4)
  {
    uint64_t v17 = v16 + qword_100410BB0;
    swift_beginAccess(v16 + qword_100410BB0, v20, 0LL, 0LL);
    sub_100057FE8(v17, (uint64_t)v10, type metadata accessor for NANSubscribe.Configuration);

    uint64_t v16 = *v10;
    sub_10005802C((uint64_t)v10, type metadata accessor for NANSubscribe.Configuration);
  }

  return v16;
}

uint64_t sub_10029D4DC(char a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)((char *)v1 + qword_10040DD10);
  swift_beginAccess(v4, v20, 32LL, 0LL);
  uint64_t v5 = *v4;
  char v17 = a1;
  uint64_t v6 = *(void *)(v3 + 80);
  uint64_t v7 = *(void *)(v3 + 88);
  uint64_t v9 = _s8InstanceCMa(255LL, v6, v7, v8);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10035F874, v9);
  *(void *)&__int128 v21 = v6;
  *((void *)&v21 + 1) = v9;
  *(void *)&__int128 v22 = v7;
  *((void *)&v22 + 1) = WitnessTable;
  uint64_t v11 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v21);
  Dictionary.subscript.getter(&v17, v5, &type metadata for UInt8, v11);
  uint64_t v12 = v18;
  if (!v18)
  {
    swift_endAccess(v20);
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    goto LABEL_7;
  }

  uint64_t v13 = v19;
  swift_endAccess(v20);
  id v14 = v12;
  sub_1002A0210(v12, v13);
  sub_1002BD514((uint64_t)&v21);

  if (!*((void *)&v22 + 1))
  {
LABEL_7:
    sub_1000225EC((uint64_t)&v21, &qword_100405280);
    return 0LL;
  }

  uint64_t v15 = sub_100002274((uint64_t *)&unk_10040ECE0);
  else {
    return 0LL;
  }
}

void sub_10029D634(char a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)((char *)v1 + qword_10040DD10);
  swift_beginAccess(v4, v20, 32LL, 0LL);
  uint64_t v5 = *v4;
  char v17 = a1;
  uint64_t v6 = *(void *)(v3 + 80);
  uint64_t v7 = *(void *)(v3 + 88);
  uint64_t v13 = v6;
  uint64_t v14 = _s8InstanceCMa(255LL, v6, v7, v8);
  uint64_t v15 = v7;
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10035F874, v14);
  uint64_t v9 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v13);
  Dictionary.subscript.getter(&v17, v5, &type metadata for UInt8, v9);
  uint64_t v10 = v18;
  if (v18)
  {
    uint64_t v11 = v19;
    swift_endAccess(v20);
    id v12 = v10;
    sub_1002A0210(v10, v11);
    sub_1002BD568();
  }

  else
  {
    swift_endAccess(v20);
  }

uint64_t sub_10029D72C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a4;
  uint64_t v33 = a3;
  type metadata accessor for NANPublish.Configuration(0LL);
  __chkstk_darwin();
  id v32 = (unsigned __int8 *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  __int16 v8 = *(unsigned __int8 *)(a1 + 32) | (*(unsigned __int8 *)(a1 + 33) << 8);
  swift_bridgeObjectRetain(v7);
  DNSRecords.Identifier.description.getter(v6, v7, v8);
  uint64_t v10 = v9;
  swift_bridgeObjectRelease(v7);
  id v11 = objc_allocWithZone(&OBJC_CLASS___WiFiAwarePublishConfiguration);
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = objc_msgSend(v11, "initWithServiceName:", v12, swift_bridgeObjectRelease(v10).n128_f64[0]);

  [v13 setAuthenticationType:0];
  id v14 = [objc_allocWithZone(WiFiAwarePublishServiceSpecificInfo) init];
  uint64_t v15 = v33;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v14 setTxtRecordData:isa];

  NSString v17 = String._bridgeToObjectiveC()();
  [v14 setInstanceName:v17];

  [v13 setServiceSpecificInfo:v14];
  id v18 = objc_msgSend( objc_allocWithZone(WiFiAwarePublishDatapathConfiguration),  "initWithServiceType:securityConfiguration:",  DNSRecords.Identifier.serviceType.getter(v6, v7, v8),  0);
  uint64_t v19 = *(unsigned __int8 *)(v15 + 32);
  uint64_t v20 = type metadata accessor for DNSRecords.SRV(0LL);
  id v21 = [objc_allocWithZone(WiFiAwarePublishDatapathServiceSpecificInfo) initWithProtocolType:v19 servicePort:(unsigned __int16)NWEndpoint.Port.rawValue.getter(v20)];
  [v18 setServiceSpecificInfo:v21];

  id v22 = [v18 serviceSpecificInfo];
  if (v22)
  {
    id v23 = v22;
    NSString v24 = String._bridgeToObjectiveC()();
    [v23 setHostname:v24];
  }

  [v13 setDatapathConfiguration:v18];
  uint64_t v25 = v36;
  uint64_t v26 = sub_10029D2A8((uint64_t)v13, v34, (uint64_t (*)(void *, uint64_t))sub_10029069C);

  if (v25)
  {
  }

  else
  {

    uint64_t v27 = v26 + qword_100410A28;
    swift_beginAccess(v26 + qword_100410A28, v35, 0LL, 0LL);
    uint64_t v28 = v27;
    v29 = v32;
    sub_100057FE8(v28, (uint64_t)v32, type metadata accessor for NANPublish.Configuration);

    uint64_t v26 = *v29;
    sub_10005802C((uint64_t)v29, type metadata accessor for NANPublish.Configuration);
  }

  return v26;
}

void sub_10029DA50(char a1)
{
  uint64_t v3 = *v1;
  id v4 = [objc_allocWithZone(WiFiAwarePublishServiceSpecificInfo) init];
  uint64_t v5 = (uint64_t *)((char *)v1 + qword_10040DD18);
  swift_beginAccess((char *)v1 + qword_10040DD18, v32, 32LL, 0LL);
  uint64_t v6 = *v5;
  char v29 = a1;
  uint64_t v7 = *(void *)(v3 + 80);
  uint64_t v8 = *(void *)(v3 + 88);
  uint64_t v25 = v7;
  uint64_t v26 = _s8InstanceCMa_0(255LL, v7, v8, v9);
  uint64_t v27 = v8;
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10035E28C, v26);
  uint64_t v10 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v25);
  Dictionary.subscript.getter(&v29, v6, &type metadata for UInt8, v10);
  id v11 = v30;
  if (v30)
  {
    uint64_t v12 = v31;
    swift_endAccess(v32);
    sub_1002A1608(v11, v12);
    swift_bridgeObjectRelease(v12);
    sub_1002A0210(v11, v12);
  }

  else
  {
    swift_endAccess(v32);
  }

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v4 setTxtRecordData:isa];

  if (v11
    && (uint64_t v15 = &v11[qword_100410A28],
        swift_beginAccess(&v11[qword_100410A28], v32, 0LL, 0LL),
        uint64_t v16 = *((void *)v15 + 3),
        uint64_t v17 = swift_bridgeObjectRetain(v16),
        NANGenericServiceProtocol.instanceName.getter(v17),
        uint64_t v19 = v18,
        unint64_t v14 = swift_bridgeObjectRelease(v16).n128_u64[0],
        v19))
  {
    NSString v20 = String._bridgeToObjectiveC()();
    unint64_t v14 = swift_bridgeObjectRelease(v19).n128_u64[0];
  }

  else
  {
    NSString v20 = 0LL;
  }

  objc_msgSend(v4, "setInstanceName:", v20, *(double *)&v14);

  swift_beginAccess(v5, &v25, 32LL, 0LL);
  uint64_t v21 = *v5;
  char v29 = a1;
  Dictionary.subscript.getter(&v29, v21, &type metadata for UInt8, v10);
  id v22 = v30;
  if (v30)
  {
    uint64_t v23 = v31;
    swift_endAccess(&v25);
    sub_1002A1608(v22, v23);
    swift_bridgeObjectRelease(v23);
    sub_1002A0210(v22, v23);
    id v24 = v4;
    sub_10025EA74((uint64_t)v4, NANBitmap.Channel.operatingClass.getter, 0LL);
  }

  else
  {
    swift_endAccess(&v25);
  }
}

uint64_t sub_10029DCD0(char a1)
{
  uint64_t v3 = *v1;
  id v4 = (uint64_t *)((char *)v1 + qword_10040DD18);
  swift_beginAccess(v4, v20, 32LL, 0LL);
  uint64_t v5 = *v4;
  char v17 = a1;
  uint64_t v6 = *(void *)(v3 + 80);
  uint64_t v7 = *(void *)(v3 + 88);
  uint64_t v9 = _s8InstanceCMa_0(255LL, v6, v7, v8);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10035E28C, v9);
  *(void *)&__int128 v21 = v6;
  *((void *)&v21 + 1) = v9;
  *(void *)&__int128 v22 = v7;
  *((void *)&v22 + 1) = WitnessTable;
  uint64_t v11 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v21);
  Dictionary.subscript.getter(&v17, v5, &type metadata for UInt8, v11);
  uint64_t v12 = v18;
  if (!v18)
  {
    swift_endAccess(v20);
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    goto LABEL_7;
  }

  uint64_t v13 = v19;
  swift_endAccess(v20);
  id v14 = v12;
  sub_1002A0210(v12, v13);
  sub_100256944((uint64_t)&v21);

  if (!*((void *)&v22 + 1))
  {
LABEL_7:
    sub_1000225EC((uint64_t)&v21, &qword_100405280);
    return 0LL;
  }

  uint64_t v15 = sub_100002274(&qword_10040D450);
  else {
    return 0LL;
  }
}

void sub_10029DE28(char a1)
{
  uint64_t v3 = *v1;
  id v4 = (uint64_t *)((char *)v1 + qword_10040DD18);
  swift_beginAccess(v4, v20, 32LL, 0LL);
  uint64_t v5 = *v4;
  char v17 = a1;
  uint64_t v6 = *(void *)(v3 + 80);
  uint64_t v7 = *(void *)(v3 + 88);
  uint64_t v13 = v6;
  uint64_t v14 = _s8InstanceCMa_0(255LL, v6, v7, v8);
  uint64_t v15 = v7;
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10035E28C, v14);
  uint64_t v9 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v13);
  Dictionary.subscript.getter(&v17, v5, &type metadata for UInt8, v9);
  uint64_t v10 = v18;
  if (v18)
  {
    uint64_t v11 = v19;
    swift_endAccess(v20);
    id v12 = v10;
    sub_1002A0210(v10, v11);
    sub_10025E338();
  }

  else
  {
    swift_endAccess(v20);
  }

uint64_t sub_10029DF20(unint64_t a1)
{
  char v2 = a1;
  unint64_t v3 = a1 >> 8;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = a1 >> 24;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = a1 >> 40;
  unint64_t v8 = HIWORD(a1);
  uint64_t v9 = *v1;
  uint64_t v10 = (uint64_t *)((char *)v1 + qword_10040DD20);
  swift_beginAccess(v10, v26, 32LL, 0LL);
  uint64_t v11 = *v10;
  v23[0] = v2;
  v23[1] = v3;
  v23[2] = v4;
  v23[3] = v5;
  v23[4] = v6;
  v23[5] = v7;
  v23[6] = v8;
  uint64_t v12 = *(void *)(v9 + 80);
  uint64_t v13 = *(void *)(v9 + 88);
  uint64_t v15 = _s17InitiatorInstanceCMa(255LL, v12, v13, v14);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10035EA3C, v15);
  *(void *)&__int128 v27 = v12;
  *((void *)&v27 + 1) = v15;
  *(void *)&__int128 v28 = v13;
  *((void *)&v28 + 1) = WitnessTable;
  uint64_t v17 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v27);
  sub_10017B5C8();
  Dictionary.subscript.getter(v23, v11, &type metadata for NANPeerServiceIdentifier, v17);
  uint64_t v18 = v24;
  if (!v24)
  {
    swift_endAccess(v26);
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    goto LABEL_7;
  }

  uint64_t v19 = v25;
  swift_endAccess(v26);
  id v20 = v18;
  sub_1002A0210(v18, v19);
  sub_100271064((uint64_t)&v27);

  if (!*((void *)&v28 + 1))
  {
LABEL_7:
    sub_1000225EC((uint64_t)&v27, &qword_100405280);
    return 0LL;
  }

  uint64_t v21 = sub_100002274(&qword_10040DCE8);
  else {
    return 0LL;
  }
}

void sub_10029E0C4(unint64_t a1)
{
  char v2 = a1;
  unint64_t v3 = a1 >> 8;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = a1 >> 24;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = a1 >> 40;
  unint64_t v8 = HIWORD(a1);
  uint64_t v9 = *v1;
  uint64_t v10 = (uint64_t *)((char *)v1 + qword_10040DD20);
  swift_beginAccess(v10, v24, 32LL, 0LL);
  uint64_t v11 = *v10;
  v21[0] = v2;
  v21[1] = v3;
  v21[2] = v4;
  v21[3] = v5;
  v21[4] = v6;
  v21[5] = v7;
  v21[6] = v8;
  uint64_t v12 = *(void *)(v9 + 80);
  uint64_t v13 = *(void *)(v9 + 88);
  uint64_t v15 = _s17InitiatorInstanceCMa(255LL, v12, v13, v14);
  v20[0] = v12;
  v20[1] = v15;
  v20[2] = v13;
  void v20[3] = swift_getWitnessTable(&unk_10035EA3C, v15);
  uint64_t v16 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)v20);
  sub_10017B5C8();
  Dictionary.subscript.getter(v21, v11, &type metadata for NANPeerServiceIdentifier, v16);
  uint64_t v17 = v22;
  if (v22)
  {
    uint64_t v18 = v23;
    swift_endAccess(v24);
    id v19 = v17;
    sub_1002A0210(v17, v18);
    sub_10027A194();
  }

  else
  {
    swift_endAccess(v24);
  }

uint64_t sub_10029E208@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t result = sub_10029D354(a1, a2, a3 & 1, a4);
  if (!v5) {
    *a5 = result;
  }
  return result;
}

uint64_t sub_10029E238(char *a1)
{
  return sub_10029D4DC(*a1);
}

void sub_10029E25C(char *a1)
{
}

uint64_t sub_10029E280@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t result = sub_10029D72C(a1, a2, a3, a4);
  if (!v5) {
    *a5 = result;
  }
  return result;
}

void sub_10029E2AC(char *a1)
{
}

uint64_t sub_10029E2D0(char *a1)
{
  return sub_10029DCD0(*a1);
}

void sub_10029E2F4(char *a1)
{
}

void sub_10029E318(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (!v4)
  {
    *(_WORD *)a4 = v6;
    *(_BYTE *)(a4 + 2) = BYTE2(v6);
    *(_BYTE *)(a4 + 3) = BYTE3(v6);
    *(_BYTE *)(a4 + 4) = BYTE4(v6);
    *(_BYTE *)(a4 + 5) = BYTE5(v6);
    *(_BYTE *)(a4 + 6) = BYTE6(v6);
  }

uint64_t sub_10029E390(unsigned __int16 *a1)
{
  return sub_10029DF20(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)a1 + 3) << 24));
}

void sub_10029E3C4(unsigned __int16 *a1)
{
}

uint64_t sub_10029E3F8(uint64_t a1, void *a2)
{
  return sub_10029E430(a1, a2, (uint64_t (*)(void *, uint64_t))sub_10028F950);
}

uint64_t sub_10029E414(uint64_t a1, void *a2)
{
  return sub_10029E430(a1, a2, (uint64_t (*)(void *, uint64_t))sub_10029069C);
}

uint64_t sub_10029E430(uint64_t a1, void *a2, uint64_t (*a3)(void *, uint64_t))
{
  v9[0] = a2;
  char v10 = 0;
  id v6 = a2;
  unint64_t v7 = (void *)a3(v9, a1);
  if (!v3) {

  }
  return sub_1000225EC((uint64_t)v9, (uint64_t *)&unk_10040E450);
}

uint64_t sub_10029E4A0(uint64_t a1, void *a2)
{
  return sub_10029E430(a1, a2, (uint64_t (*)(void *, uint64_t))sub_100292E0C);
}

uint64_t sub_10029E4BC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a5 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v8,  a4,  &protocol requirements base descriptor for NANService);
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v12 = &v20[-v11];
  uint64_t v13 = *a1;
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v8 + 64);
  swift_retain();
  v14(a4, v8);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v8,  a4,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANService,  &associated conformance descriptor for NANService.NANService.Configuration: NANServiceConfiguration);
  unsigned __int8 v16 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))( AssociatedTypeWitness,  AssociatedConformanceWitness);
  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  uint64_t v21 = a2;
  uint64_t v17 = (void (*)(_BYTE *, void))swift_modifyAtReferenceWritableKeyPath(v20, &v21, v13);
  sub_10013F868(v16);
  v17(v20, 0LL);
  return swift_release(v21);
}

uint64_t sub_10029E604(uint64_t a1)
{
  return sub_10029E618(a1, (uint64_t)&unk_10035F068, (uint64_t)&unk_10035EFE0);
}

uint64_t sub_10029E618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  KeyPath = (void *)swift_getKeyPath(a2);
  uint64_t v6 = swift_getKeyPath(a3);
  sub_10028F4E8(a1, KeyPath, v6);
  swift_release(KeyPath);
  return swift_release(v6);
}

uint64_t sub_10029E6A4()
{
  return sub_10029E6B8(&qword_100410B00, &qword_100410B08);
}

uint64_t sub_10029E6B8(void *a1, void *a2)
{
  return swift_deallocClassInstance( v2,  *(unsigned int *)(*(void *)v2 + 48LL),  *(unsigned __int16 *)(*(void *)v2 + 52LL));
}

uint64_t type metadata accessor for NANSynchronizer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NANSynchronizer);
}

uint64_t sub_10029E6E8()
{
  return sub_10029E6B8(&qword_100410B10, &qword_100410B18);
}

uint64_t type metadata accessor for NANPowerSaver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NANPowerSaver);
}

uint64_t sub_10029E708(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_10035EB98;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 2LL, v4, a1 + 96);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10029E77C(void *a1, void *a2)
{
  uint64_t v4 = v2 + *a1;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  swift_unownedRelease(*(void *)(v2 + *a2));
  return v2;
}

uint64_t sub_10029E7D4()
{
  return sub_10029E6B8(&qword_100410B20, &qword_100410B28);
}

uint64_t type metadata accessor for NANDFSProxy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NANDFSProxy);
}

uint64_t sub_10029E7F4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10029E840 + 4 * byte_10035EB29[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10029E874 + 4 * byte_10035EB24[v4]))();
}

uint64_t sub_10029E874(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10029E87C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10029E884LL);
  }
  return result;
}

uint64_t sub_10029E890(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10029E898LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10029E89C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10029E8A4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for NANDiscoveryEngine.PeerChannelLearner.State( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for NANDiscoveryEngine.PeerChannelLearner.State);
}

void *sub_10029E8BC(void *a1, void *a2)
{
  *a1 = swift_unownedRetain(*a2);
  return a1;
}

uint64_t sub_10029E8E8(void *a1)
{
  return swift_unownedRelease(*a1);
}

uint64_t *sub_10029E8F0(uint64_t *a1, void *a2)
{
  uint64_t v3 = swift_unownedRetain(*a2);
  uint64_t v4 = *a1;
  *a1 = v3;
  swift_unownedRelease(v4);
  return a1;
}

void *sub_10029E928(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t *sub_10029E934(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  swift_unownedRelease(v3);
  return a1;
}

uint64_t sub_10029E964(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 != 1 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t sub_10029E9A8(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)uint64_t result = a2 - 2;
    if (a3 >= 2) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 2) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for NANDiscoveryEngine.UnownedDeviceLink( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NANDiscoveryEngine.UnownedDeviceLink);
}

uint64_t sub_10029E9F4(void *a1)
{
  return swift_bridgeObjectRelease(a1[1]);
}

uint64_t *sub_10029EA1C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_unknownObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *sub_10029EA50(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *sub_10029EAAC(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t type metadata accessor for NANDiscoveryEngine.ServiceSession(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for NANDiscoveryEngine.ServiceSession);
}

uint64_t storeEnumTagSinglePayload for NANDiscoveryState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10029EB40 + 4 * byte_10035EB33[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10029EB74 + 4 * byte_10035EB2E[v4]))();
}

uint64_t sub_10029EB74(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10029EB7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10029EB84LL);
  }
  return result;
}

uint64_t sub_10029EB90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10029EB98LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10029EB9C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10029EBA4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANDiscoveryState()
{
  return &type metadata for NANDiscoveryState;
}

unint64_t sub_10029EBC4()
{
  unint64_t result = qword_10040E2F0;
  if (!qword_10040E2F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035EEA4, &type metadata for NANDiscoveryState);
    atomic_store(result, (unint64_t *)&qword_10040E2F0);
  }

  return result;
}

uint64_t sub_10029EC08(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10035EF34, a1);
}

uint64_t sub_10029EC18@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1002A1640(a1, &qword_10040DD28, a2);
}

void sub_10029EC24(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_10029EC30()
{
  return 16LL;
}

__n128 sub_10029EC3C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10029EC48(uint64_t *a1)
{
  return sub_10029E4BC(a1, v1[4], v1[5], v1[2], v1[3]);
}

unint64_t sub_10029EC68(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, int a5)
{
  int v20 = a5;
  sub_100002274(&qword_10040E460);
  __chkstk_darwin();
  uint64_t v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = type metadata accessor for NANPeer.Service(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  unsigned __int8 v16 = &v19[-v15];
  sub_1000226B0(a1, (uint64_t)v10, &qword_10040E460);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11) == 1)
  {
    unint64_t result = sub_1000225EC((uint64_t)v10, &qword_10040E460);
    if ((a2 & 1) != 0) {
      return sub_100328E5C(a4, *a3);
    }
  }

  else
  {
    sub_100022628((uint64_t)v10, (uint64_t)v16, type metadata accessor for NANPeer.Service);
    uint64_t v18 = (void *)*a3;
    if ((a2 & 1) != 0)
    {
      return sub_100022628( (uint64_t)v16,  v18[7] + *(void *)(v12 + 72) * a4,  type metadata accessor for NANPeer.Service);
    }

    else
    {
      sub_100022628((uint64_t)v16, (uint64_t)v14, type metadata accessor for NANPeer.Service);
      return sub_100244D44(a4, v20, (uint64_t)v14, v18);
    }
  }

  return result;
}

unint64_t sub_10029EE00(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v20 = a5;
  sub_100002274(&qword_10040E420);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100002274((uint64_t *)&unk_10040CC50);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unsigned __int8 v16 = (char *)&v19 - v15;
  sub_1000226B0(a1, (uint64_t)v10, &qword_10040E420);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11) == 1)
  {
    unint64_t result = sub_1000225EC((uint64_t)v10, &qword_10040E420);
    if ((a2 & 1) != 0) {
      return sub_100329704(a4, *a3);
    }
  }

  else
  {
    sub_1000586C0((uint64_t)v10, (uint64_t)v16, (uint64_t *)&unk_10040CC50);
    uint64_t v18 = (void *)*a3;
    if ((a2 & 1) != 0)
    {
      return sub_1000586C0((uint64_t)v16, v18[7] + *(void *)(v12 + 72) * a4, (uint64_t *)&unk_10040CC50);
    }

    else
    {
      sub_1000586C0((uint64_t)v16, (uint64_t)v14, (uint64_t *)&unk_10040CC50);
      return sub_100244F60(a4, v20 & 0xFFFFFFFFFFFFLL, (uint64_t)v14, v18);
    }
  }

  return result;
}

double sub_10029EFA0(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *a1;
  if (v14)
  {
    uint64_t v15 = (void *)*a3;
    if ((a2 & 1) != 0)
    {
      *(void *)(v15[7] + 8 * a4) = v14;
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 16))(v13, a5);
      sub_100245018(a4, (uint64_t)v13, v14, v15);
    }
  }

  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy(*(void *)(*a3 + 48) + *(void *)(v11 + 72) * a4, 1LL, v10);
    sub_100329908(a4, *a3);
  }

  *(void *)&double result = swift_bridgeObjectRetain(v14).n128_u64[0];
  return result;
}

unint64_t sub_10029F08C(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v20 = a5;
  sub_100002274((uint64_t *)&unk_10040E540);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for AWDLPeer(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unsigned __int8 v16 = (char *)&v19 - v15;
  sub_1000226B0(a1, (uint64_t)v10, (uint64_t *)&unk_10040E540);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11) == 1)
  {
    unint64_t result = sub_1000225EC((uint64_t)v10, (uint64_t *)&unk_10040E540);
    if ((a2 & 1) != 0) {
      return sub_100328BB0(a4, *a3);
    }
  }

  else
  {
    sub_100022628((uint64_t)v10, (uint64_t)v16, type metadata accessor for AWDLPeer);
    uint64_t v18 = (void *)*a3;
    if ((a2 & 1) != 0)
    {
      return sub_100022628((uint64_t)v16, v18[7] + *(void *)(v12 + 72) * a4, type metadata accessor for AWDLPeer);
    }

    else
    {
      sub_100022628((uint64_t)v16, (uint64_t)v14, type metadata accessor for AWDLPeer);
      return sub_1002450B0(a4, v20 & 0xFFFFFFFFFFFFLL, (uint64_t)v14, v18);
    }
  }

  return result;
}

uint64_t sub_10029F228(uint64_t result)
{
  if ((_BYTE)result)
  {
    v6[3] = v1;
    v6[4] = v2;
    unsigned __int8 v3 = result;
    v6[0] = 0LL;
    swift_stdlib_random(v6, 8LL);
    int v4 = v3;
    unint64_t result = (LOBYTE(v6[0]) * v3) >> 8;
    if (v3 > (LOBYTE(v6[0]) * v3)
      && -v3 % v3 > (LOBYTE(v6[0]) * v3))
    {
      unsigned int v5 = (-v3 % v3);
      do
      {
        v6[0] = 0LL;
        swift_stdlib_random(v6, 8LL);
      }

      while (v5 > (LOBYTE(v6[0]) * v4));
      return (LOBYTE(v6[0]) * v4) >> 8;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

unint64_t sub_10029F2C0()
{
  unint64_t result = qword_10040E380;
  if (!qword_10040E380)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for WiFiAddress, &type metadata for WiFiAddress);
    atomic_store(result, (unint64_t *)&qword_10040E380);
  }

  return result;
}

uint64_t sub_10029F304(void *a1)
{
  uint64_t v1 = *a1;
  swift_unownedRetainStrong(*a1);
  sub_1002A7AC4();
  return swift_release(v1);
}

uint64_t sub_10029F33C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10029F360()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10029F384()
{
  return sub_100280A5C(*(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t type metadata accessor for NANDiscoveryEngine.BeaconScheduler.Reason( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NANDiscoveryEngine.BeaconScheduler.Reason);
}

int8x8_t sub_10029F39C(uint64_t a1, unsigned __int8 *a2)
{
  Swift::UInt64 v3 = sub_10028C72C(*(unsigned __int8 *)(v2 + 32), *a2 | (unsigned __int16)(a2[1] << 8));
  return TimeBitmap.SlotsView.formUnion(_:)(v3, v4, v5);
}

int8x8_t sub_10029F3E8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = sub_10028CA2C(*a2 | (unsigned __int16)(a2[1] << 8), *(void *)(v2 + 16), *(void *)(v2 + 24));
  return TimeBitmap.SlotsView.formUnion(_:)(v3, v4, v5);
}

BOOL sub_10029F434()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 40);
  return sub_1002A3D90(v1, v2) && sub_1002A3DC8(v1, v2) != 0;
}

BOOL sub_10029F494(uint64_t a1)
{
  return sub_10028D080(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10029F4B4(uint64_t a1, uint64_t *a2)
{
  return sub_10028D174(a1, a2, v2[2], v2[3], v2[4], v2[5]) & 1;
}

uint64_t sub_10029F4D4(uint64_t a1)
{
  *(_BYTE *)(v1 + swift_weakDestroy(v0 + 16) = 0;
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  *(void *)(v1 + qword_10040DE40) = 0LL;
  *(void *)(v1 + qword_10040DE48) = a1;
  swift_unownedRetain(a1);
  return v1;
}

uint64_t sub_10029F544(uint64_t a1)
{
  uint64_t v3 = v1 + qword_10040DED0;
  uint64_t v4 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  *(_WORD *)(v1 + qword_10040DED8) = 256;
  *(void *)(v1 + qword_10040DEE0) = a1;
  swift_unownedRetain(a1);
  return v1;
}

uint64_t sub_10029F5C0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v5 = *(void *)(*(void *)v1 + 80LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 88LL);
  uint64_t v6 = *(void *)(v4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v6,  v5,  &protocol requirements base descriptor for P2PControls);
  uint64_t v8 = v6;
  uint64_t v9 = AssociatedTypeWitness;
  uint64_t v76 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v8,  v5,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v10 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  v9,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v77 = *(void *)(v10 - 8);
  uint64_t v78 = v10;
  __chkstk_darwin(v10);
  v74 = (char *)&v73 - v11;
  uint64_t v73 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v14 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xED00006E616E2E65LL,  0x7265766F63736964LL,  0xEF656E69676E4579LL);
  uint64_t v15 = qword_10040DD10;
  uint64_t v17 = _s8InstanceCMa(255LL, v5, v4, v16);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10035F874, v17);
  uint64_t v79 = v5;
  uint64_t v80 = v17;
  uint64_t v81 = v4;
  uint64_t v82 = WitnessTable;
  uint64_t v19 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v79);
  *(void *)(v2 + v15) = Dictionary.init()(&type metadata for UInt8, v19, &protocol witness table for UInt8);
  uint64_t v20 = qword_10040DD18;
  uint64_t v22 = _s8InstanceCMa_0(255LL, v5, v4, v21);
  uint64_t v23 = swift_getWitnessTable(&unk_10035E28C, v22);
  uint64_t v79 = v5;
  uint64_t v80 = v22;
  uint64_t v81 = v4;
  uint64_t v82 = v23;
  uint64_t v24 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v79);
  *(void *)(v2 + v20) = Dictionary.init()(&type metadata for UInt8, v24, &protocol witness table for UInt8);
  uint64_t v25 = qword_10040DD20;
  uint64_t v27 = _s17InitiatorInstanceCMa(255LL, v5, v4, v26);
  uint64_t v28 = swift_getWitnessTable(&unk_10035EA3C, v27);
  uint64_t v79 = v5;
  uint64_t v80 = v27;
  uint64_t v81 = v4;
  uint64_t v82 = v28;
  uint64_t v29 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v79);
  unint64_t v30 = sub_10017B5C8();
  *(void *)(v2 + v25) = Dictionary.init()(&type metadata for NANPeerServiceIdentifier, v29, v30);
  uint64_t v31 = qword_10040DD28;
  uint64_t v33 = _s17ResponderInstanceCMa(255LL, v5, v4, v32);
  uint64_t v34 = swift_getWitnessTable(&unk_10035D5BC, v33);
  uint64_t v79 = v5;
  uint64_t v80 = v33;
  uint64_t v81 = v4;
  uint64_t v82 = v34;
  uint64_t v35 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v79);
  *(void *)(v2 + v31) = Dictionary.init()(&type metadata for NANPeerServiceIdentifier, v35, v30);
  uint64_t v36 = qword_10040DD30;
  uint64_t v38 = type metadata accessor for NANDiscoveryEngine.UnownedDeviceLink(0LL, v5, v4, v37);
  unint64_t v39 = sub_10029F2C0();
  *(void *)(v2 + v36) = Dictionary.init()(&type metadata for WiFiAddress, v38, v39);
  uint64_t v40 = qword_10040DD38;
  *(void *)(v2 + v40) = *(void *)NANDiscoveryWindowIndex.first.unsafeMutableAddressor();
  *(void *)(v2 + qword_10040DD40) = 0LL;
  *(void *)(v2 + qword_10040DD48) = 0LL;
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  variable initialization expression of AWDLPeer.lastUpdated();
  v41 = (void *)(v2 + qword_10040DD60);
  uint64_t v42 = sub_1000058BC((uint64_t)&off_1003F1AD8);
  void *v41 = &_swiftEmptySetSingleton;
  v41[1] = v42;
  v43 = (void *)(v2 + qword_10040DD68);
  uint64_t v44 = sub_1000058BC((uint64_t)&off_1003F1B00);
  void *v43 = &_swiftEmptySetSingleton;
  v43[1] = v44;
  uint64_t v45 = v2 + *(void *)(*(void *)v2 + 232LL);
  uint64_t v46 = sub_100002274(&qword_10040DE10);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56LL))(v45, 1LL, 1LL, v46);
  uint64_t v47 = v2 + *(void *)(*(void *)v2 + 240LL);
  uint64_t v48 = type metadata accessor for PriorityRadioConstraint(0LL);
  uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56LL))( v47,  1LL,  1LL,  v48);
  uint64_t v50 = v2 + *(void *)(*(void *)v2 + 248LL);
  UUID.init()(v49);
  *(_BYTE *)(v50 + *(int *)(sub_100002274(&qword_10040E3C0) + 36)) = 6;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v50, v14, v73);
  *(_BYTE *)(v2 + *(void *)(*(void *)v2 + 288LL)) = 0;
  *(void *)(v2 + *(void *)(*(void *)v2 + 280LL)) = a1;
  uint64_t v52 = type metadata accessor for NANDiscoveryEngine.StateMachine(0LL, v5, v4, v51);
  swift_unownedRetain(a1);
  swift_allocObject(v52, *(unsigned int *)(v52 + 48), *(unsigned __int16 *)(v52 + 52));
  uint64_t v53 = swift_retain();
  uint64_t v54 = sub_10029F4D4(v53);
  swift_release(a1);
  *(void *)(v2 + qword_10040DD70) = v54;
  uint64_t v56 = type metadata accessor for NANDiscoveryEngine.BeaconScheduler(0LL, v5, v4, v55);
  swift_allocObject(v56, *(unsigned int *)(v56 + 48), *(unsigned __int16 *)(v56 + 52));
  *(void *)(v2 + qword_10040DD78) = sub_10029F544(a1);
  uint64_t v58 = type metadata accessor for NANDiscoveryEngine.PeerChannelLearner(0LL, v5, v4, v57);
  swift_allocObject(v58, 48LL, 7LL);
  uint64_t v59 = swift_retain();
  *(void *)(v2 + qword_10040DD80) = sub_10028D6E4(v59);
  type metadata accessor for LowLatencyInternetRequesterPolicy(0LL, v5, v4, v60);
  uint64_t v61 = swift_retain();
  id v62 = sub_1002E7F34(v61);
  swift_release(a1);
  *(void *)(v2 + *(void *)(*(void *)v2 + 256LL)) = v62;
  type metadata accessor for LowLatencyInternetProviderPolicy(0LL, v5, v4, v63);
  uint64_t v64 = swift_retain();
  id v65 = sub_1002E80D4(v64);
  swift_release(a1);
  *(void *)(v2 + *(void *)(*(void *)v2 + 264LL)) = v65;
  type metadata accessor for NANFollowUpTransmitter(0LL, v5, v4, v66);
  uint64_t v67 = swift_retain();
  *(void *)(v2 + *(void *)(*(void *)v2 + 272LL)) = sub_1002A2D04(v67);
  uint64_t v68 = AssociatedConformanceWitness;
  v69 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 104);
  uint64_t v70 = swift_checkMetadataState(0LL, v76);
  v71 = v74;
  v69(v70, v68);
  (*(void (**)(uint64_t, char *, uint64_t))(v77 + 32))(v2 + *(void *)(*(void *)v2 + 224LL), v71, v78);
  sub_1002814F4();
  return v2;
}

uint64_t sub_10029FBEC(uint64_t a1)
{
  return sub_10029F5C0(a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_10029FC24( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v11[5] = _swiftEmptyArrayStorage;
  swift_unknownObjectRetain(a1);
  v11[0] = a3;
  v11[1] = a4;
  v11[2] = a5;
  v11[3] = a6;
  type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)v11);
  sub_10027F7E4(a2);
}

BOOL sub_10029FCA0(uint64_t a1)
{
  return sub_10028870C(a1, v1[2], v1[3], v1[4], v1[5]);
}

BOOL sub_10029FCC0(uint64_t a1, uint64_t a2)
{
  return sub_10028BB38(a1, a2, v2[4], v2[2], v2[3]);
}

uint64_t sub_10029FCCC(void *a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 32))(*a1, a1[1]) & 1;
}

uint64_t sub_10029FCF8()
{
  return sub_100087780( &qword_10040E3D8,  &qword_10040DE28,  (void (*)(void))sub_10029FD1C,  (uint64_t)&protocol conformance descriptor for <A> A?);
}

unint64_t sub_10029FD1C()
{
  unint64_t result = qword_10040E3E0;
  if (!qword_10040E3E0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANQualityOfService,  &type metadata for NANQualityOfService);
    atomic_store(result, (unint64_t *)&qword_10040E3E0);
  }

  return result;
}

void *sub_10029FD60@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result + qword_100410B58;
  __int16 v3 = *(_WORD *)(v2 + 4);
  *(_DWORD *)a2 = *(_DWORD *)v2;
  *(_WORD *)(a2 + 4) = v3;
  return result;
}

uint64_t sub_10029FD88@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = swift_unownedRetainStrong(*a1);
  *a2 = result;
  return result;
}

BOOL sub_10029FDB0()
{
  return sub_100271550();
}

uint64_t sub_10029FDDC()
{
  return sub_100224AC8() & 1;
}

uint64_t sub_10029FE08@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100289574(a1, v2, a2);
}

uint64_t sub_10029FE24()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10029FE48()
{
  return sub_10028C5B4(v0[4], v0[2], v0[3], (void (*)(void))sub_100289728);
}

void sub_10029FE6C(unsigned __int8 *a1)
{
}

uint64_t sub_10029FE84(uint64_t a1)
{
  return sub_10028A424(a1) & 1;
}

uint64_t sub_10029FEA0(uint64_t a1)
{
  return sub_10028A508(a1) & 1;
}

uint64_t sub_10029FEBC()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 40) + 64LL))(*(void *)(v0 + 24));
}

BOOL sub_10029FEF4()
{
  return *(_BYTE *)(v0 + 48) == 1 && sub_1002A3D90(*(void *)(v0 + 24), *(void *)(v0 + 40));
}

uint64_t sub_10029FF40(uint64_t *a1)
{
  return sub_10028A78C( a1,  *(uint64_t **)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 16),  *(void *)(v1 + 24));
}

uint64_t sub_10029FF60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(qword_100410330);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10029FFA8()
{
  return sub_1002BD4C4();
}

uint64_t sub_10029FFD0()
{
  return sub_100256998();
}

uint64_t sub_10029FFF8(void *a1)
{
  uint64_t v1 = *a1 + qword_100410BB0;
  swift_beginAccess(v1, v3, 0LL, 0LL);
  return *(unsigned __int8 *)(v1 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0LL) + 60));
}

uint64_t sub_1002A0058(void *a1)
{
  uint64_t v1 = *a1 + qword_100410A28;
  swift_beginAccess(v1, v3, 0LL, 0LL);
  return *(unsigned __int8 *)(v1 + *(int *)(type metadata accessor for NANPublish.Configuration(0LL) + 80));
}

unint64_t sub_1002A00B8()
{
  unint64_t result = qword_10040E438;
  if (!qword_10040E438)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035EE64, &type metadata for NANDiscoveryState);
    atomic_store(result, (unint64_t *)&qword_10040E438);
  }

  return result;
}

uint64_t sub_1002A00FC()
{
  return sub_10028C5B4(v0[4], v0[2], v0[3], (void (*)(void))sub_100285EA0);
}

uint64_t sub_1002A0120@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1002A1640(a1, &qword_10040DD18, a2);
}

void sub_1002A012C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1002A0138(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = swift_bridgeObjectRetain(*a1);
  sub_100280044(v6, a5);
}

uint64_t sub_1002A0168()
{
  return 16LL;
}

__n128 sub_1002A0174(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1002A0180(uint64_t result)
{
  if (result) {
    return swift_unownedRelease(result);
  }
  return result;
}

uint64_t sub_1002A018C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 40);
  unint64_t v3 = *(unsigned __int16 *)(v0 + 48) | ((unint64_t)*(unsigned int *)(v0 + 50) << 16);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
  else {
    return 0LL;
  }
}

void *sub_1002A0210(void *result, uint64_t a2)
{
  if (result)
  {

    return (void *)swift_bridgeObjectRelease(a2);
  }

  return result;
}

uint64_t sub_1002A023C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1002A1640(a1, &qword_10040DD20, a2);
}

void sub_1002A0248(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1002A0254()
{
  return 16LL;
}

__n128 sub_1002A0260(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1002A026C(uint64_t result, char a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(result + 16);
  if (!v4) {
    return result;
  }
  LODWORD(v6) = *(unsigned __int8 *)(result + 38);
  uint64_t v7 = *(unsigned __int8 *)(result + 37);
  uint64_t v8 = *(unsigned int *)(result + 32);
  uint64_t v9 = (void *)*a3;
  unint64_t v10 = (v7 << 40) | ((unint64_t)*(unsigned __int8 *)(result + 36) << 32) | v8;
  uint64_t v42 = result;
  swift_bridgeObjectRetain(result);
  unint64_t v12 = sub_100327824(v10);
  uint64_t v13 = v9[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14)) {
    goto LABEL_27;
  }
  LOBYTE(v3) = v11;
  if (v9[3] >= v15)
  {
    if ((a2 & 1) == 0) {
      goto LABEL_29;
    }
    while (1)
    {
LABEL_7:
      uint64_t v18 = (void *)*a3;
      if ((v3 & 1) != 0)
      {
        uint64_t v19 = v18[7];
        unsigned int v20 = *(unsigned __int8 *)(v19 + v12);
        *(_BYTE *)(v19 + v12) = v20;
        uint64_t v21 = a3;
        uint64_t v22 = v4 - 1;
        if (v4 == 1) {
          return swift_bridgeObjectRelease(v42);
        }
      }

      else
      {
        v18[(v12 >> 6) + 8] |= 1LL << v12;
        uint64_t v23 = v18[6] + 8 * v12;
        *(_DWORD *)uint64_t v23 = v8;
        *(_BYTE *)(v23 + 4) = v41;
        *(_BYTE *)(v23 + 5) = v7;
        *(_BYTE *)(v18[7] + v12) = v6;
        uint64_t v24 = v18[2];
        BOOL v25 = __OFADD__(v24, 1LL);
        uint64_t v26 = v24 + 1;
        uint64_t v21 = a3;
        if (v25) {
          goto LABEL_28;
        }
        v18[2] = v26;
        uint64_t v22 = v4 - 1;
        if (v4 == 1) {
          return swift_bridgeObjectRelease(v42);
        }
      }

      for (i = (unsigned __int8 *)(v42 + 46); ; i += 8)
      {
        LODWORD(v8) = *i;
        uint64_t v4 = *(i - 1);
        uint64_t v6 = *(i - 2);
        uint64_t v7 = *(unsigned int *)(i - 6);
        uint64_t v30 = *v21;
        uint64_t v3 = (v4 << 40) | (v6 << 32) | v7;
        unint64_t v31 = sub_100327824(v3);
        uint64_t v33 = *(void *)(v30 + 16);
        BOOL v34 = (v32 & 1) == 0;
        BOOL v25 = __OFADD__(v33, v34);
        uint64_t v35 = v33 + v34;
        if (v25) {
          break;
        }
        unint64_t v12 = v32;
        if (*(void *)(v30 + 24) < v35)
        {
          sub_100241704(v35, 1LL);
          unint64_t v31 = sub_100327824(v3);
          if ((v12 & 1) != (v36 & 1)) {
            goto LABEL_30;
          }
        }

        uint64_t v21 = a3;
        uint64_t v37 = (void *)*a3;
        if ((v12 & 1) != 0)
        {
          uint64_t v28 = v37[7];
          unsigned int v29 = *(unsigned __int8 *)(v28 + v31);
          *(_BYTE *)(v28 + v31) = v29;
        }

        else
        {
          v37[(v31 >> 6) + 8] |= 1LL << v31;
          uint64_t v38 = v37[6] + 8 * v31;
          *(_DWORD *)uint64_t v38 = v7;
          *(_BYTE *)(v38 + 4) = v6;
          *(_BYTE *)(v38 + 5) = v4;
          *(_BYTE *)(v37[7] + v31) = v8;
          uint64_t v39 = v37[2];
          BOOL v25 = __OFADD__(v39, 1LL);
          uint64_t v40 = v39 + 1;
          if (v25) {
            goto LABEL_28;
          }
          v37[2] = v40;
        }

        if (!--v22) {
          return swift_bridgeObjectRelease(v42);
        }
      }

void sub_1002A0500(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return;
  }
  char v37 = *(_BYTE *)(a1 + 38);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 37);
  uint64_t v7 = *(unsigned int *)(a1 + 32);
  uint64_t v8 = *a3;
  uint64_t v9 = *(unsigned __int8 *)(a1 + 36);
  uint64_t v10 = (v6 << 40) | (v9 << 32) | v7;
  swift_bridgeObjectRetain(a1);
  unint64_t v12 = sub_100327824(v10);
  uint64_t v13 = *(void *)(v8 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  LOBYTE(v3) = v11;
  if (*(void *)(v8 + 24) >= v15)
  {
    if ((a2 & 1) == 0) {
      goto LABEL_24;
    }
    if ((v11 & 1) == 0) {
      goto LABEL_9;
    }
    while (1)
    {
LABEL_11:
      uint64_t v23 = v4 - 1;
      uint64_t v24 = a3;
      if (v4 == 1)
      {
LABEL_12:
        swift_bridgeObjectRelease(a1);
        return;
      }

      BOOL v25 = (unsigned __int8 *)(a1 + 46);
      while (1)
      {
        LODWORD(v7) = *v25;
        uint64_t v4 = *(v25 - 1);
        uint64_t v9 = *(v25 - 2);
        uint64_t v6 = *(unsigned int *)(v25 - 6);
        uint64_t v26 = *v24;
        uint64_t v3 = (v4 << 40) | (v9 << 32) | v6;
        unint64_t v27 = sub_100327824(v3);
        uint64_t v29 = *(void *)(v26 + 16);
        BOOL v30 = (v28 & 1) == 0;
        BOOL v21 = __OFADD__(v29, v30);
        uint64_t v31 = v29 + v30;
        if (v21) {
          goto LABEL_22;
        }
        unint64_t v12 = v28;
        if (*(void *)(v26 + 24) < v31)
        {
          sub_100241704(v31, 1LL);
          unint64_t v27 = sub_100327824(v3);
          if ((v12 & 1) != (v32 & 1)) {
            goto LABEL_26;
          }
        }

        uint64_t v24 = a3;
        if ((v12 & 1) == 0) {
          break;
        }
LABEL_15:
        v25 += 8;
        if (!--v23) {
          goto LABEL_12;
        }
      }

      uint64_t v33 = (void *)*a3;
      *(void *)(*a3 + 8 * (v27 >> 6) + 64) |= 1LL << v27;
      uint64_t v34 = v33[6] + 8 * v27;
      *(_DWORD *)uint64_t v34 = v6;
      *(_BYTE *)(v34 + 4) = v9;
      *(_BYTE *)(v34 + 5) = v4;
      *(_BYTE *)(v33[7] + v27) = v7;
      uint64_t v35 = v33[2];
      BOOL v21 = __OFADD__(v35, 1LL);
      uint64_t v36 = v35 + 1;
      if (!v21) {
        break;
      }
LABEL_23:
      while (1)
      {
        __break(1u);
LABEL_24:
        sub_10032B15C();
        if ((v3 & 1) != 0) {
          break;
        }
LABEL_9:
        uint64_t v18 = (void *)*a3;
        *(void *)(*a3 + 8 * (v12 >> 6) + 64) |= 1LL << v12;
        uint64_t v19 = v18[6] + 8 * v12;
        *(_DWORD *)uint64_t v19 = v7;
        *(_BYTE *)(v19 + 4) = v9;
        *(_BYTE *)(v19 + 5) = v6;
        *(_BYTE *)(v18[7] + v12) = v37;
        uint64_t v20 = v18[2];
        BOOL v21 = __OFADD__(v20, 1LL);
        uint64_t v22 = v20 + 1;
        if (!v21)
        {
          v18[2] = v22;
          goto LABEL_11;
        }
      }
    }

    v33[2] = v36;
    goto LABEL_15;
  }

  sub_100241704(v15, a2 & 1);
  uint64_t v16 = sub_100327824(v10);
  if ((v3 & 1) == (v17 & 1))
  {
    unint64_t v12 = v16;
    if ((v3 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_11;
  }

uint64_t sub_1002A0768()
{
  return sub_10028DE68();
}

void sub_1002A0790(uint64_t a1, uint64_t a2, __int16 a3, void *a4, uint64_t a5)
{
  __int16 v9 = a3 & 0xFF01;
  id v10 = a4;
  LOBYTE(v14) = 0;
  id v11 = objc_msgSend( objc_allocWithZone(WiFiAwareDatapathConfiguration),  "initWithDiscoveryResult:serviceType:passphrase:pmk:pmkID:serviceSpecificInfo:internetSharingConfiguration:pair ingMethod:pairingCachingEnabled:pairSetupServiceSpecificInfo:",  v10,  DNSRecords.Identifier.serviceType.getter(a1, a2, v9),  0,  0,  0,  0,  0,  0,  v14,  0);

  unint64_t v12 = (char *)sub_10029D2A8((uint64_t)v11, a5, (uint64_t (*)(void *, uint64_t))sub_100292E0C);
  if (!v5)
  {
    uint64_t v13 = (uint64_t)&v12[qword_10040DA68];
    swift_beginAccess(&v12[qword_10040DA68], v16, 0LL, 0LL);
    sub_10027D18C(v13, (uint64_t)v15);

    sub_10027D1C8(v15);
  }

uint64_t sub_1002A08B8()
{
  return sub_10029CBB0(*(void **)(v0 + 16));
}

uint64_t sub_1002A08C0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

_BYTE **sub_1002A08D0(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  return sub_100004DDC(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_1002A08D8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A08E8()
{
  return BaseP2PControls.terminate(with:)(*(uint64_t (**)(void))(v0 + 16));
}

void sub_1002A08F0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_1002A08F8@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  *a1 = *(void *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1002A0904()
{
  return sub_100327620(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_1002A090C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A091C()
{
  return swift_deallocObject(v0, 22LL, 7LL);
}

uint64_t sub_1002A092C()
{
  return sub_100327700(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_1002A0934()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0944()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0954()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0964()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0974()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0984@<X0>(_BYTE *a1@<X8>)
{
  return sub_10022B3DC(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_1002A098C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1003283A4(a1, a2, a3, *(void (**)(uint64_t *__return_ptr))(v3 + 16));
}

uint64_t sub_1002A0994()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A09A4()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A09B4()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A09C4()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

BOOL sub_1002A09D4(void *a1)
{
  return sub_10029CC84( a1,  *(_BYTE *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(_BYTE *)(v1 + 48),  *(unsigned __int16 *)(v1 + 49) | ((unint64_t)*(unsigned int *)(v1 + 51) << 16),  *(void *)(v1 + 56));
}

uint64_t sub_1002A0A0C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0A1C()
{
  return swift_deallocObject(v0, 22LL, 7LL);
}

uint64_t sub_1002A0A2C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0A40()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0A50()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0A60()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0A70()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0A80()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0A90()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0AA0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0AB0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0AC0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0AD0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0AE0@<X0>(uint64_t *a1@<X8>)
{
  return sub_10001BF30(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_1002A0AE8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_10032834C(a1, a2, a3, *(void (**)(uint64_t *__return_ptr))(v3 + 16));
}

uint64_t sub_1002A0AF0()
{
  return swift_deallocObject(v0, 22LL, 7LL);
}

uint64_t sub_1002A0B00()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0B10()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0B20()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0B30()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0B40()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0B50()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0B60()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0B70()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0B80()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0B90()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0BA0()
{
  return swift_deallocObject(v0, 22LL, 7LL);
}

uint64_t sub_1002A0BB0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0BC0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0BD0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0BE0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0BF0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0C00()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0C10()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

void sub_1002A0C20(uint64_t *a1, void **a2, uint64_t a3)
{
}

uint64_t sub_1002A0C28()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0C38()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0C48()
{
  return swift_deallocObject(v0, 22LL, 7LL);
}

uint64_t sub_1002A0C58()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0C68()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0C78()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0C88()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0C98()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0CA8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0CB8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0CC8()
{
  return swift_deallocObject(v0, 22LL, 7LL);
}

uint64_t sub_1002A0CD8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0CE8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0CF8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0D08()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0D18()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0D28()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0D38()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0D48()
{
  return swift_deallocObject(v0, 22LL, 7LL);
}

uint64_t sub_1002A0D58()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0D68()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0D78()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0D88()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0D98()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0DA8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0DB8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0DC8()
{
  return swift_deallocObject(v0, 22LL, 7LL);
}

uint64_t sub_1002A0DD8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0DE8()
{
  return sub_10029D0C8(v0);
}

BOOL sub_1002A0DF0()
{
  return sub_10029D210(*(void *)(v0 + 16));
}

uint64_t sub_1002A0DF8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0E08()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0E18()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0E28()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0E38()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0E48()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0E58()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0E68()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0E78@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_1002A0EA0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1003283FC(a1, a2, a3, *(void (**)(uint64_t *__return_ptr))(v3 + 16));
}

uint64_t sub_1002A0EA8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0EB8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0EC8()
{
  return swift_deallocObject(v0, 22LL, 7LL);
}

uint64_t sub_1002A0ED8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0EE8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0EF8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0F08()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0F18()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0F28()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0F38()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0F48()
{
  return swift_deallocObject(v0, 22LL, 7LL);
}

uint64_t sub_1002A0F58()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0F68()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0F78()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0F88()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0F98()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0FA8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0FB8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0FC8()
{
  return swift_deallocObject(v0, 22LL, 7LL);
}

uint64_t sub_1002A0FD8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0FE8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A0FF8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A1008()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A1018()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A1028()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A1038()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A1048()
{
  return swift_deallocObject(v0, 22LL, 7LL);
}

uint64_t sub_1002A1058()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A1068()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A1078()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A1088()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A1098()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A10A8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A10B8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A10C8()
{
  return swift_deallocObject(v0, 22LL, 7LL);
}

uint64_t sub_1002A10D8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A10E8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A10F8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A1108()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A1118()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A1128()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A1138()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A1148()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1002A11E0()
{
  uint64_t v1 = *(void *)(type metadata accessor for Logger(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_10029CDF8( *(void *)(v0 + 32),  *(void *)(v0 + 40),  v0 + v2,  *(void **)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1002A1240()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

id sub_1002A1264()
{
  return *(id *)(v0 + 16);
}

uint64_t sub_1002A126C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A127C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A128C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1002A12B0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1002A12D4()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A12E4()
{
  return swift_deallocObject(v0, 22LL, 7LL);
}

void sub_1002A12F4(uint64_t a1@<X8>)
{
  __int16 v2 = *(_WORD *)(v1 + 20);
  *(_DWORD *)a1 = *(_DWORD *)(v1 + 16);
  *(_WORD *)(a1 + 4) = v2;
}

uint64_t sub_1002A1308()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A1318()
{
  else {
    return 0LL;
  }
}

uint64_t sub_1002A1360()
{
  else {
    return 0x6574736575716572LL;
  }
}

uint64_t sub_1002A13B8()
{
  return sub_10029CC20(*(void **)(v0 + 16));
}

uint64_t sub_1002A13C0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

void sub_1002A13D0(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 16);
}

uint64_t sub_1002A13DC()
{
  return sub_100327678(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_1002A13E4()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A13F4()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A1404()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A1414()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A1424()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A1434()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A1444()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A1454()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A1464()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A1474()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A1484()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A1494()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A14A4()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A14B4()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A14C4()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A14D4()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002A14E4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002A1508()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 48));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  sub_100002AC4((void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 32, v5);
}

void sub_1002A15A0()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = *(void *)(type metadata accessor for Logger(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 56LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  sub_10028F1A4( v0[5],  v0[6],  (uint64_t)v0 + v5,  (uint64_t)v0 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL),  v1,  v2,  v3);
}

void *sub_1002A1608(void *result, uint64_t a2)
{
  if (result)
  {
    id v3 = result;
    return (void *)swift_bridgeObjectRetain(a2);
  }

  return result;
}

uint64_t sub_1002A1634@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1002A1640(a1, &qword_10040DD10, a2);
}

uint64_t sub_1002A1640@<X0>(void *a1@<X0>, void *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (uint64_t *)(*a1 + *a2);
  swift_beginAccess(v4, v7, 0LL, 0LL);
  uint64_t v5 = *v4;
  *a3 = *v4;
  return swift_bridgeObjectRetain(v5);
}

void sub_1002A1690(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1002A169C()
{
  return 16LL;
}

__n128 sub_1002A16A8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_1002A16B4(uint64_t *a1)
{
}

void sub_1002A16DC(uint64_t *a1)
{
}

uint64_t sub_1002A1704()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1002A1728(unsigned __int8 *a1)
{
}

uint64_t sub_1002A1740(uint64_t a1)
{
  return sub_100286F58( a1,  *(unsigned __int16 **)(v1 + 48),  *(_BYTE *)(v1 + 56),  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40)) & 1;
}

uint64_t sub_1002A1768()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 40) + 96LL))(*(void *)(v0 + 24));
}

uint64_t sub_1002A17A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100002274(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24LL))(a2, a1, v5);
  return a2;
}

void sub_1002A17E4(uint64_t *a1)
{
}

uint64_t sub_1002A1804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a5);
  }

  return result;
}

uint64_t sub_1002A1854()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1002A1880(uint64_t a1, uint64_t a2)
{
  return sub_10028DA04(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

void sub_1002A1888()
{
}

uint64_t sub_1002A18B0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  unsigned int v2 = a2 + 0xFFFF;
  else {
    unsigned int v3 = 4;
  }
  if (v2 < 0xFF0000) {
    unsigned int v3 = 1;
  }
  if (v2 >= 0x10000) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_1002A18F8 + 4 * byte_10035EB40[v4]))();
}

uint64_t sub_1002A1910(unsigned __int16 *a1)
{
  uint64_t v1 = a1[1];
  if (a1[1]) {
    return (*a1 | ((_DWORD)v1 << 16)) - 0xFFFF;
  }
  return v1;
}

void sub_1002A191C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 2)) {
    JUMPOUT(0x1002A1924LL);
  }
  JUMPOUT(0x1002A1934LL);
}

uint64_t sub_1002A1940(_WORD *a1, int a2, int a3)
{
  unsigned int v3 = a3 + 0xFFFF;
  else {
    int v4 = 4;
  }
  if (v3 < 0xFF0000) {
    int v4 = 1;
  }
  if (v3 >= 0x10000) {
    LODWORD(v5) = v4;
  }
  else {
    LODWORD(v5) = 0;
  }
  if (a3) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (!a2) {
    return ((uint64_t (*)(void))((char *)sub_1002A19C0 + 4 * byte_10035EB4A[v5]))();
  }
  *a1 = a2 - 1;
  return ((uint64_t (*)(void))((char *)sub_1002A19A0 + 4 * byte_10035EB45[v5]))();
}

uint64_t sub_1002A19A0(uint64_t result)
{
  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1002A19C0(uint64_t result)
{
  *(_BYTE *)(result + 2) = 0;
  return result;
}

uint64_t sub_1002A19C8(uint64_t result)
{
  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1002A19D0(uint64_t result)
{
  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1002A19D8(uint64_t result)
{
  *(_WORD *)(result + 2) = 0;
  return result;
}

uint64_t sub_1002A19E0(uint64_t result)
{
  *(_DWORD *)(result + 2) = 0;
  return result;
}

uint64_t sub_1002A1C8C(void *a1)
{
  return sub_10029FCCC(a1) & 1;
}

uint64_t sub_1002A1CCC(uint64_t a1)
{
  v6[0] = "\b";
  v6[1] = &unk_10035F100;
  uint64_t result = type metadata accessor for DispatchTime(319LL);
  if (v3 <= 0x3F)
  {
    v6[2] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for Logger(319LL);
    if (v4 <= 0x3F)
    {
      v6[3] = *(void *)(result - 8) + 64LL;
      uint64_t result = type metadata accessor for DispatchTimeInterval(319LL);
      if (v5 <= 0x3F)
      {
        uint64_t v7 = *(void *)(result - 8) + 64LL;
        uint64_t v8 = v7;
        __int16 v9 = (char *)&value witness table for Builtin.Int32 + 64;
        id v10 = (char *)&value witness table for Builtin.Int64 + 64;
        return swift_initClassMetadata2(a1, 0LL, 8LL, v6, a1 + 96);
      }
    }
  }

  return result;
}

uint64_t sub_1002A1D9C()
{
  uint64_t v1 = v0 + qword_10040E600;
  uint64_t v2 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  uint64_t v3 = v0 + qword_100410B30;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  uint64_t v5 = v0 + qword_10040E608;
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL);
  v7(v5, v6);
  v7(v0 + qword_10040E610, v6);
  return v0;
}

uint64_t sub_1002A1E58()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for AWDLElectionEngine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AWDLElectionEngine);
}

uint64_t sub_1002A1E88(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "\b";
    void v4[2] = &unk_10035F1E0;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[5] = &unk_10035F1F8;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 6LL, v4, a1 + 96);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_1002A1F20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 8) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v4,  a1,  &protocol requirements base descriptor for NANService,  &associated type descriptor for NANService.Configuration);
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(a1, v4);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a2,  a1,  AssociatedTypeWitness,  &unk_1003879AC,  &unk_1003879BC);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)(AssociatedConformanceWitness + 8) + 56LL))( &v12,  AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  return (unsigned __int16)v12 | ((unint64_t)BYTE2(v12) << 16) | ((unint64_t)*(unsigned int *)((char *)&v12 + 3) << 24);
}

BOOL sub_1002A2024(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 8) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v4,  a1,  &protocol requirements base descriptor for NANService);
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v8 = (char *)v12 - v7;
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(a1, v4);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a2,  a1,  AssociatedTypeWitness,  &unk_1003879AC,  &unk_1003879BC);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 24))( v12,  AssociatedTypeWitness,  AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  sub_1002A7224((uint64_t)v12, (uint64_t)v13);
  uint64_t v10 = v14;
  if (v14 != 1) {
    sub_1002A726C((uint64_t)v12);
  }
  return v10 != 1;
}

uint64_t sub_1002A213C(int a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v51 = a3;
  unsigned __int8 v8 = a5;
  uint64_t v53 = a5;
  LODWORD(v52) = a1;
  uint64_t v11 = *(void *)(*(void *)v6 + 80LL);
  uint64_t v48 = *(void *)(*(void *)v6 + 88LL);
  uint64_t v49 = v11;
  uint64_t v12 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation(255LL, v11, v48, a4);
  uint64_t v13 = type metadata accessor for Optional(0LL, v12);
  uint64_t v40 = *(void *)(v13 - 8);
  uint64_t v41 = v13;
  __chkstk_darwin();
  uint64_t v47 = (char *)&v39 - v14;
  type metadata accessor for DispatchTime(0LL);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v17 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v19 = (char *)&v39 - v18;
  unint64_t v20 = a6 | ((v8 | (a4 << 8)) << 8);
  unint64_t v42 = a4 >> 8;
  unint64_t v43 = a4 >> 16;
  unint64_t v44 = a4 >> 24;
  unint64_t v45 = HIDWORD(a4);
  unint64_t v46 = a4 >> 40;
  unint64_t v21 = v51;
  sub_100020AFC(a2, v51);
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v22 = v21;
  uint64_t v23 = (uint64_t)v16;
  uint64_t v24 = v48;
  uint64_t v25 = v49;
  sub_1002A4368((char)v52, a2, v22, 0LL, v23, v49, v48, (uint64_t)v19);
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  unint64_t v27 = v47;
  uint64_t v52 = v19;
  v26(v47, v19, v12);
  unint64_t v51 = v17;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v27, 0LL, 1LL, v12);
  uint64_t v39 = a6;
  char v55 = a6;
  char v56 = v53;
  LOBYTE(v57) = a4;
  HIBYTE(v57) = v42;
  char v58 = v43;
  LOBYTE(v59) = v44;
  HIBYTE(v59) = v45;
  char v60 = v46;
  uint64_t v28 = v50 + qword_10040E6B0;
  swift_beginAccess(v50 + qword_10040E6B0, v54, 33LL, 0LL);
  uint64_t v30 = type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier(255LL, v25, v24, v29);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10035F328, v30);
  uint64_t v32 = type metadata accessor for Dictionary(0LL, v30, v12, WitnessTable);
  Dictionary.subscript.setter(v27, &v55, v32);
  swift_endAccess(v54);
  char v36 = sub_1002A4F90(v20, v33, v34, v35);
  if (v36 == 2)
  {
    char v55 = v39;
    char v56 = v53;
    __int16 v57 = a4;
    char v58 = (_DWORD)a4 << 8 >> 24;
    __int16 v59 = a4 >> 24;
    char v60 = a4 << 8 >> 48;
    swift_beginAccess(v28, v54, 33LL, 0LL);
    Dictionary.removeValue(forKey:)(&v55, v32);
    swift_endAccess(v54);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v27, v41);
    return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v52, v12);
  }

  else
  {
    uint64_t v38 = v52;
    if ((v36 & 1) != 0) {
      sub_1002A5458(v20);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v38, v12);
  }

uint64_t sub_1002A247C(os_log_s *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  v97 = a2;
  v98 = a1;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v93 = *(void *)(v7 - 8);
  uint64_t v94 = v7;
  __chkstk_darwin();
  v101 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v86 = type metadata accessor for NANPublish.Configuration(0LL);
  __chkstk_darwin();
  uint64_t v87 = (uint64_t)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v85 = (char *)&v79 - v10;
  uint64_t v11 = *(void *)(a4 + 8);
  uint64_t v12 = *(void *)(v11 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v12,  a3,  &protocol requirements base descriptor for NANService);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v12,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANService,  &associated conformance descriptor for NANService.NANService.Controller: NANController);
  uint64_t v14 = *(void *)(AssociatedConformanceWitness + 8);
  uint64_t v89 = AssociatedTypeWitness;
  uint64_t v15 = swift_getAssociatedTypeWitness( 0LL,  v14,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v90 = v15;
  uint64_t v91 = v16;
  __chkstk_darwin();
  uint64_t v82 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v84 = (char *)&v79 - v18;
  uint64_t v92 = type metadata accessor for NANSubscribe.Configuration(0LL);
  __chkstk_darwin();
  uint64_t v83 = (uint64_t)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v21 = (char *)&v79 - v20;
  uint64_t v95 = v12;
  uint64_t v22 = swift_getAssociatedTypeWitness(0LL, v12, a3, &protocol requirements base descriptor for NANService);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin();
  uint64_t v25 = (char *)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v27 = (os_log_s *)((char *)&v79 - v26);
  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 24);
  uint64_t v96 = v4;
  uint64_t v99 = a3;
  uint64_t v100 = v11;
  uint64_t v29 = v28(a3, v11);
  uint64_t v30 = v102;
  sub_1002E8C08();
  uint64_t result = swift_release(v29);
  if (!v30)
  {
    uint64_t v79 = v28;
    uint64_t v80 = v25;
    uint64_t v102 = v23;
    uint64_t v81 = v22;
    uint64_t v32 = v99;
    uint64_t v34 = v95;
    uint64_t v33 = v96;
    uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t))(v95 + 64);
    uint64_t v36 = v35(v99, v95);
    ((void (*)(uint64_t))v98)(v36);
    v98 = v27;
    uint64_t v37 = v33;
    uint64_t v38 = v80;
    v35(v32, v34);
    uint64_t v39 = v81;
    if (swift_dynamicCast(v21, v38, v81, v92, 0LL))
    {
      uint64_t v40 = v83;
      sub_100022628((uint64_t)v21, v83, type metadata accessor for NANSubscribe.Configuration);
      uint64_t v41 = v79(v32, v100);
      uint64_t v42 = v90;
      uint64_t v43 = v91;
      unint64_t v44 = v84;
      (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v84, v41 + *(void *)(*(void *)v41 + 96LL), v90);
      swift_release(v41);
      uint64_t v45 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  v89,  v42,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 208))(v40, v42, v45);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v42);
      sub_10005802C(v40, type metadata accessor for NANSubscribe.Configuration);
      uint64_t v77 = v102;
      uint64_t v39 = v81;
LABEL_11:
      uint64_t v78 = *(void (**)(os_log_s *, uint64_t))(v77 + 8);
      v78(v98, v39);
      return ((uint64_t (*)(char *, uint64_t))v78)(v38, v39);
    }

    uint64_t v46 = v37;
    uint64_t v47 = (uint64_t)v85;
    if (swift_dynamicCast(v85, v38, v39, v86, 0LL))
    {
      uint64_t v48 = v87;
      sub_100022628(v47, v87, type metadata accessor for NANPublish.Configuration);
      uint64_t v49 = v79(v32, v100);
      uint64_t v50 = v90;
      (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v82, v49 + *(void *)(*(void *)v49 + 96LL), v90);
      swift_release(v49);
      uint64_t v51 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  v89,  v50,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
      uint64_t v52 = v82;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 216))(v48, v50, v51);
      (*(void (**)(char *, uint64_t))(v91 + 8))(v52, v50);
      sub_10005802C(v87, type metadata accessor for NANPublish.Configuration);
      uint64_t v77 = v102;
      goto LABEL_11;
    }

    unint64_t v53 = sub_1000033FC();
    uint64_t v54 = swift_allocError(&type metadata for WiFiError, v53, 0LL, 0LL);
    *(_OWORD *)uint64_t v55 = xmmword_10033A940;
    *(_BYTE *)(v55 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
    swift_willThrow(v54);
    (*(void (**)(char *, uint64_t))(v102 + 8))(v38, v39);
    char v56 = v101;
    __int16 v57 = v98;
    uint64_t v105 = v46;
    (*(void (**)(uint64_t))(*(void *)(v34 + 8) + 8LL))(v32);
    swift_unknownObjectRetain(v46);
    swift_errorRetain(v54);
    swift_unknownObjectRetain(v46);
    uint64_t v58 = swift_errorRetain(v54);
    __int16 v59 = (os_log_s *)Logger.logObject.getter(v58);
    uint64_t v60 = v34;
    os_log_type_t v61 = static os_log_type_t.error.getter(v59);
    if (os_log_type_enabled(v59, v61))
    {
      uint64_t v62 = swift_slowAlloc(22LL, -1LL);
      v98 = v59;
      uint64_t v63 = v62;
      v97 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v99 = swift_slowAlloc(32LL, -1LL);
      uint64_t v105 = v99;
      *(_DWORD *)uint64_t v63 = 136315394;
      uint64_t v64 = v32;
      uint64_t v103 = v46;
      uint64_t v65 = dispatch thunk of CustomStringConvertible.description.getter(v32, *(void *)(v60 + 16));
      uint64_t v66 = v57;
      unint64_t v68 = v67;
      swift_unknownObjectRelease(v46);
      uint64_t v103 = sub_10000235C(v65, v68, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104);
      swift_unknownObjectRelease(v46);
      swift_bridgeObjectRelease(v68);
      *(_WORD *)(v63 + 12) = 2112;
      swift_errorRetain(v54);
      uint64_t v69 = _swift_stdlib_bridgeErrorToNSError(v54);
      uint64_t v103 = v69;
      __int16 v57 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104);
      uint64_t v70 = v97;
      uint64_t *v97 = v69;
      uint64_t v32 = v64;
      swift_errorRelease(v54);
      swift_errorRelease(v54);
      os_log_t v71 = v98;
      _os_log_impl( (void *)&_mh_execute_header,  v98,  v61,  "%s failed to update its configuration because of error %@",  (uint8_t *)v63,  0x16u);
      uint64_t v72 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v70, 1LL, v72);
      swift_slowDealloc(v70, -1LL, -1LL);
      uint64_t v73 = v99;
      swift_arrayDestroy(v99, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v73, -1LL, -1LL);
      swift_slowDealloc(v63, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v93 + 8))(v101, v94);
    }

    else
    {
      swift_unknownObjectRelease_n(v46, 2LL);
      swift_errorRelease(v54);
      swift_errorRelease(v54);

      (*(void (**)(char *, uint64_t))(v93 + 8))(v56, v94);
    }

    uint64_t v74 = v81;
    uint64_t v75 = v102;
    uint64_t v76 = (*(uint64_t (**)(os_log_s *, uint64_t))(v100 + 48))(v57, v32);
    swift_willThrow(v76);
    return (*(uint64_t (**)(os_log_s *, uint64_t))(v75 + 8))(v57, v74);
  }

  return result;
}

uint64_t sub_1002A2D04(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_1002A491C(a1);
  return v3;
}

uint64_t sub_1002A2D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 88);
  uint64_t v188 = *(void *)(*v4 + 80);
  uint64_t v189 = v7;
  uint64_t v8 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation(255LL, v188, v7, a4);
  v192 = (void *)type metadata accessor for Optional(0LL, v8);
  v191.i64[0] = *(v192 - 1);
  __chkstk_darwin();
  v182 = (char *)&v168 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v183 = (char *)&v168 - v10;
  __chkstk_darwin();
  uint64_t v185 = (uint64_t)&v168 - v11;
  __chkstk_darwin();
  uint64_t v13 = (char *)&v168 - v12;
  __chkstk_darwin();
  uint64_t v15 = (char *)&v168 - v14;
  uint64_t v184 = v8;
  uint64_t v187 = *(void *)(v8 - 8);
  __chkstk_darwin();
  v181 = (char *)&v168 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v190.i64[0] = (uint64_t)&v168 - v17;
  __chkstk_darwin();
  v186 = (char *)&v168 - v18;
  uint64_t v19 = type metadata accessor for DriverEvent(0LL);
  __chkstk_darwin();
  unint64_t v21 = (char *)&v168 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v23 = (char *)&v168 - v22;
  __chkstk_darwin();
  uint64_t v25 = (char *)&v168 - v24;
  __chkstk_darwin();
  unint64_t v27 = (char *)&v168 - v26;
  sub_1000E77F4(a1, (uint64_t)&v168 - v26);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v27, v19);
  if (EnumCaseMultiPayload != 4)
  {
    if (!EnumCaseMultiPayload)
    {
      sub_1000E77F4((uint64_t)v27, (uint64_t)v25);
      sub_100058090(v25, &v199);
      sub_100058090(&v199, v201);
      switch(sub_1001073D8((uint64_t)v201))
      {
        case 8u:
          v174 = v27;
          uint64_t v35 = NANBitmap.Channel.operatingClass.getter(v201);
          v36.i32[0] = *(_DWORD *)v35;
          uint16x8_t v37 = vmovl_u8(v36);
          int16x8_t v191 = (int16x8_t)v37;
          LODWORD(v183) = *(unsigned __int8 *)(v35 + 4);
          LODWORD(v182) = *(unsigned __int8 *)(v35 + 5);
          LODWORD(v181) = *(unsigned __int8 *)(v35 + 6);
          LODWORD(v180) = *(unsigned __int8 *)(v35 + 7);
          v37.i32[0] = *(_DWORD *)(v35 + 8);
          int16x8_t v190 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v37.i8);
          LODWORD(v179) = *(unsigned __int8 *)(v35 + 12);
          LODWORD(v178) = *(unsigned __int8 *)(v35 + 13);
          uint64_t v38 = (void *)(v193 + qword_10040E6B0);
          swift_beginAccess(v193 + qword_10040E6B0, v198, 0LL, 0LL);
          uint64_t v40 = type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier(255LL, v188, v189, v39);
          uint64_t v41 = 0LL;
          *((void *)&v42 + 1) = v191.i64[1];
          *(int8x8_t *)&__int128 v42 = vmovn_s16(v191);
          __int128 v177 = v42;
          *((void *)&v42 + 1) = v190.i64[1];
          *(int8x8_t *)&__int128 v42 = vmovn_s16(v190);
          __int128 v176 = v42;
          uint64_t v43 = v184;
          uint64_t v175 = v40;
          v192 = v38;
          break;
        case 0xBu:
        case 0xCu:
          uint64_t v29 = (char *)NANBitmap.Channel.operatingClass.getter(v201);
          sub_1002A4AF4(*v29);
          uint64_t v30 = (uint64_t)v27;
          return sub_10005802C(v30, type metadata accessor for DriverEvent);
        case 0xEu:
          v174 = v27;
          uint64_t v76 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(v201);
          uint64_t v77 = *v76;
          uint64_t v78 = v76[1];
          uint64_t v79 = v76[2];
          unint64_t v80 = v76[3];
          uint64_t v81 = v76[4];
          uint64_t v82 = v76[5];
          uint64_t v83 = v76[7];
          int v84 = v76[8];
          uint64_t v178 = v76[6];
          uint64_t v179 = v82;
          uint64_t v85 = v178 << 40;
          uint64_t v180 = v81;
          uint64_t v86 = v81 << 24;
          v186 = (char *)v80;
          uint64_t v170 = v80 << 16;
          unint64_t v171 = v82 << 32;
          *(void *)&__int128 v177 = v79;
          uint64_t v172 = v78 | (v83 << 48) | (v79 << 8);
          uint64_t v87 = (os_log_s *)Logger.logObject.getter(v76);
          *(void *)&__int128 v176 = v78;
          if (v84)
          {
            int v88 = static os_log_type_t.error.getter();
            BOOL v89 = os_log_type_enabled(v87, (os_log_type_t)v88);
            uint64_t v173 = v77;
            uint64_t v175 = v83;
            if (v89)
            {
              LODWORD(v169) = v88;
              uint64_t v78 = swift_slowAlloc(25LL, -1LL);
              uint64_t v168 = swift_slowAlloc(64LL, -1LL);
              v198[0] = v168;
              *(_DWORD *)uint64_t v78 = 136315650;
              uint64_t v90 = NANPeerServiceIdentifier.description.getter(v172 | v85 | v171 | v86 | v170);
              unint64_t v92 = v91;
              uint64_t v194 = sub_10000235C(v90, v91, v198);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v194, &v195);
              swift_bridgeObjectRelease(v92);
              *(_WORD *)(v78 + 12) = 256;
              LOBYTE(v194) = v77;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v194, (char *)&v194 + 1);
              *(_WORD *)(v78 + 15) = 2080;
              unint64_t v93 = 0xE700000000000000LL;
              unint64_t v94 = 0x646570706F7264LL;
              if (v84 != 2)
              {
                unint64_t v94 = 0xD000000000000010LL;
                unint64_t v93 = 0x8000000100364C40LL;
              }

              if (v84 == 1) {
                uint64_t v95 = 0x756F2064656D6974LL;
              }
              else {
                uint64_t v95 = v94;
              }
              if (v84 == 1) {
                unint64_t v96 = 0xE900000000000074LL;
              }
              else {
                unint64_t v96 = v93;
              }
              uint64_t v194 = sub_10000235C(v95, v96, v198);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v194, &v195);
              swift_bridgeObjectRelease(v96);
              _os_log_impl( (void *)&_mh_execute_header,  v87,  (os_log_type_t)v169,  "Follow up transmission to %s from %hhu failed with reason: %s",  (uint8_t *)v78,  0x19u);
              uint64_t v97 = v168;
              swift_arrayDestroy(v168, 2LL, &type metadata for Any[8]);
              swift_slowDealloc(v97, -1LL, -1LL);
              swift_slowDealloc(v78, -1LL, -1LL);

              uint64_t v98 = v193;
              LOBYTE(v77) = v173;
              LOBYTE(v78) = v176;
            }

            else
            {

              uint64_t v98 = v193;
            }

            LOBYTE(v194) = v77;
            BYTE1(v194) = v78;
            BYTE2(v194) = v177;
            BYTE3(v194) = (_BYTE)v186;
            BYTE4(v194) = v180;
            BYTE5(v194) = v179;
            BYTE6(v194) = v178;
            HIBYTE(v194) = v175;
            swift_beginAccess(v98 + qword_10040E6B8, v198, 33LL, 0LL);
            uint64_t v114 = type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier(255LL, v188, v189, v113);
            uint64_t WitnessTable = swift_getWitnessTable(&unk_10035F328, v114);
            uint64_t v116 = v184;
            uint64_t v117 = type metadata accessor for Dictionary(0LL, v114, v184, WitnessTable);
            Dictionary.removeValue(forKey:)(&v194, v117);
            swift_endAccess(v198);
            sub_1002A43F0();
            v118 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v187 + 48);
            if (v118(v13, 1LL, v116) == 1)
            {
              uint64_t v119 = (*(uint64_t (**)(char *, void *))(v191.i64[0] + 8))(v13, v192);
              sub_1002A5F10(v119, v120, v121, v122);
            }

            else
            {
              uint64_t v170 = v117;
              unint64_t v171 = (unint64_t)v118;
              uint64_t v188 = WitnessTable;
              uint64_t v189 = v114;
              v123 = v13;
              uint64_t v124 = v184;
              v169 = *(void (**)(uint64_t, char *, uint64_t))(v187 + 32);
              v169(v190.i64[0], v123, v184);
              BOOL v125 = sub_1002A4150(v124);
              unsigned __int8 v129 = v186;
              unsigned __int8 v131 = v179;
              unsigned __int8 v130 = v180;
              unsigned __int8 v132 = v178;
              char v133 = v175;
              uint64_t v134 = v98;
              if (!v125) {
                goto LABEL_40;
              }
              v135 = (uint64_t *)(v98 + qword_10040E6B0);
              swift_beginAccess(v98 + qword_10040E6B0, v198, 32LL, 0LL);
              uint64_t v136 = *v135;
              LOBYTE(v194) = v173;
              BYTE1(v194) = v176;
              BYTE2(v194) = v177;
              BYTE3(v194) = v129;
              BYTE4(v194) = v130;
              BYTE5(v194) = v131;
              BYTE6(v194) = v132;
              HIBYTE(v194) = v133;
              uint64_t v138 = v184;
              uint64_t v137 = v185;
              Dictionary.subscript.getter(&v194, v136, v189, v184);
              swift_endAccess(v198);
              LODWORD(v138) = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v171)(v137, 1LL, v138);
              uint64_t v139 = (*(uint64_t (**)(uint64_t, void *))(v191.i64[0] + 8))(v137, v192);
              if ((_DWORD)v138 == 1)
              {
                sub_1002A5F10(v139, v126, v127, v128);
                (*(void (**)(uint64_t, uint64_t))(v187 + 8))(v190.i64[0], v184);
              }

              else
              {
LABEL_40:
                uint64_t v140 = v184;
                char v141 = v173;
                uint64_t v142 = v173 | ((v172 & 0xFFFF00000000FFFFLL | ((unint64_t)v129 << 16) & 0xFFFF000000FFFFFFLL | (v130 << 24) | ((unint64_t)v131 << 32) & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)v132 << 40)) << 8);
                int v143 = sub_1002A4F90(v142, v126, v127, v128);
                if (v143 == 2)
                {
                  (*(void (**)(uint64_t, uint64_t))(v187 + 8))(v190.i64[0], v140);
                }

                else
                {
                  LODWORD(v172) = v143;
                  uint64_t v185 = v142;
                  v152 = (uint64_t *)(v134 + qword_10040E6B0);
                  swift_beginAccess(v152, v198, 32LL, 0LL);
                  uint64_t v153 = *v152;
                  LOBYTE(v194) = v141;
                  BYTE1(v194) = v176;
                  char v154 = v177;
                  BYTE2(v194) = v177;
                  BYTE3(v194) = v129;
                  BYTE4(v194) = v130;
                  BYTE5(v194) = v131;
                  BYTE6(v194) = v132;
                  HIBYTE(v194) = v133;
                  v155 = v182;
                  Dictionary.subscript.getter(&v194, v153, v189, v140);
                  swift_endAccess(v198);
                  uint64_t v156 = v187;
                  v157 = v181;
                  (*(void (**)(char *, uint64_t, uint64_t))(v187 + 16))(v181, v190.i64[0], v140);
                  if (((unsigned int (*)(char *, uint64_t, uint64_t))v171)(v155, 1LL, v140) == 1)
                  {
                    v158 = v157;
                    v159 = v183;
                    v169((uint64_t)v183, v158, v140);
                    (*(void (**)(char *, void *))(v191.i64[0] + 8))(v155, v192);
                  }

                  else
                  {
                    (*(void (**)(char *, uint64_t))(v156 + 8))(v157, v140);
                    v159 = v183;
                    v169((uint64_t)v183, v155, v140);
                  }

                  (*(void (**)(char *, void, uint64_t, uint64_t))(v156 + 56))(v159, 0LL, 1LL, v140);
                  LOBYTE(v194) = v173;
                  BYTE1(v194) = v176;
                  BYTE2(v194) = v154;
                  BYTE3(v194) = (_BYTE)v186;
                  BYTE4(v194) = v180;
                  BYTE5(v194) = v131;
                  BYTE6(v194) = v132;
                  HIBYTE(v194) = v175;
                  swift_beginAccess(v152, v198, 33LL, 0LL);
                  Dictionary.subscript.setter(v159, &v194, v170);
                  swift_endAccess(v198);
                  if ((v172 & 1) != 0) {
                    sub_1002A5458(v185);
                  }
                  (*(void (**)(uint64_t, uint64_t))(v156 + 8))(v190.i64[0], v140);
                }
              }
            }
          }

          else
          {
            os_log_type_t v99 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v87, v99))
            {
              uint64_t v100 = swift_slowAlloc(15LL, -1LL);
              uint64_t v101 = swift_slowAlloc(32LL, -1LL);
              v198[0] = v101;
              *(_DWORD *)uint64_t v100 = 136315394;
              uint64_t v173 = v77;
              uint64_t v175 = v83;
              uint64_t v102 = NANPeerServiceIdentifier.description.getter(v172 | v85 | v171 | v86 | v170);
              unint64_t v104 = v103;
              uint64_t v194 = sub_10000235C(v102, v103, v198);
              LOBYTE(v83) = v175;
              char v105 = v173;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v194, &v195);
              swift_bridgeObjectRelease(v104);
              *(_WORD *)(v100 + 12) = 256;
              LOBYTE(v194) = v105;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v194, (char *)&v194 + 1);
              _os_log_impl( (void *)&_mh_execute_header,  v87,  v99,  "Follow up transmission to %s from %hhu completed",  (uint8_t *)v100,  0xFu);
              swift_arrayDestroy(v101, 1LL, &type metadata for Any[8]);
              swift_slowDealloc(v101, -1LL, -1LL);
              swift_slowDealloc(v100, -1LL, -1LL);

              uint64_t v106 = v184;
              char v107 = v176;
              char v108 = v177;
              char v109 = (char)v186;
              char v111 = v179;
              char v110 = v180;
              char v112 = v178;
            }

            else
            {

              uint64_t v106 = v184;
              char v107 = v176;
              char v108 = v177;
              char v109 = (char)v186;
              char v111 = v179;
              char v110 = v180;
              char v112 = v178;
              char v105 = v77;
            }

            LOBYTE(v194) = v105;
            BYTE1(v194) = v107;
            BYTE2(v194) = v108;
            BYTE3(v194) = v109;
            BYTE4(v194) = v110;
            BYTE5(v194) = v111;
            BYTE6(v194) = v112;
            HIBYTE(v194) = v83;
            swift_beginAccess(v193 + qword_10040E6B8, v198, 33LL, 0LL);
            uint64_t v145 = type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier(255LL, v188, v189, v144);
            uint64_t v146 = swift_getWitnessTable(&unk_10035F328, v145);
            uint64_t v147 = type metadata accessor for Dictionary(0LL, v145, v106, v146);
            Dictionary.removeValue(forKey:)(&v194, v147);
            (*(void (**)(char *, void *))(v191.i64[0] + 8))(v15, v192);
            swift_endAccess(v198);
            uint64_t v148 = sub_1002A43F0();
            sub_1002A5F10(v148, v149, v150, v151);
          }

          goto LABEL_18;
        default:
          sub_1002A732C((uint64_t)&v199);
          goto LABEL_15;
      }

      while (1)
      {
        uint64_t v197 = *v38;
        uint64_t v46 = __chkstk_darwin();
        uint64_t v47 = v189;
        *(&v168 - 4) = v188;
        *(&v168 - 3) = v47;
        int v160 = v177;
        char v161 = (char)v183;
        char v162 = (char)v182;
        char v163 = (char)v181;
        char v164 = v180;
        int v165 = v176;
        char v166 = v179;
        char v167 = v178;
        swift_bridgeObjectRetain(v46);
        uint64_t v48 = swift_getWitnessTable(&unk_10035F328, v40);
        uint64_t v49 = type metadata accessor for Dictionary(0LL, v40, v43, v48);
        uint64_t v50 = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v49);
        Collection.firstIndex(where:)(&v194, sub_1002A73C4, &v168 - 6, v49, v50);
        swift_bridgeObjectRelease(v197);
        unsigned __int8 v51 = v196;
        if (v196 == 255) {
          goto LABEL_18;
        }
        uint64_t v185 = v49;
        v190.i64[0] = v41;
        uint64_t v52 = v194;
        uint64_t v53 = v195;
        uint64_t v54 = *v192;
        swift_bridgeObjectRetain(*v192);
        uint64_t v55 = v186;
        v191.i64[0] = v52;
        Dictionary.subscript.getter(&v194, v186, v52, v53, v51 & 1, v54, v40, v43, v48);
        swift_bridgeObjectRelease(v54);
        char v56 = v55;
        __int16 v57 = *(void (**)(char *, uint64_t))(v187 + 8);
        v57(v56, v43);
        uint64_t v58 = v194;
        char v62 = sub_1002A4F90(v194, v59, v60, v61);
        if (v62 == 2)
        {
          unint64_t v44 = v192;
          swift_beginAccess(v192, &v194, 33LL, 0LL);
          uint64_t v45 = v191.i64[0];
          Dictionary.remove(at:)(&v197, v56, v191.i64[0], v53, v51 & 1, v185);
          swift_endAccess(&v194);
          sub_100022570(v45, v53, v51);
          v57(v56, v43);
          uint64_t v38 = v44;
        }

        else
        {
          uint64_t v63 = v191.i64[0];
          uint64_t v38 = v192;
          if ((v62 & 1) == 0)
          {
            sub_100022570(v191.i64[0], v53, v51);
            goto LABEL_18;
          }

          sub_1002A5458(v58);
          sub_100022570(v63, v53, v51);
          uint64_t v43 = v184;
        }

        uint64_t v40 = v175;
        uint64_t v41 = v190.i64[0];
      }
    }

BOOL sub_1002A3D90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(void))(a2 + 32))();
  uint64_t v3 = v2;
  if (v2) {
    swift_release(v2);
  }
  return v3 != 0;
}

uint64_t sub_1002A3DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 8) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v4,  a1,  &protocol requirements base descriptor for NANService,  &associated type descriptor for NANService.Configuration);
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v8 = (char *)&v12 - v7;
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(a1, v4);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a2,  a1,  AssociatedTypeWitness,  &unk_1003879AC,  &unk_1003879BC);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))( AssociatedTypeWitness,  AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  return v10;
}

void sub_1002A3EB8(int a1, unint64_t a2)
{
  unint64_t v3 = a2 >> 8;
  unint64_t v4 = a2 >> 16;
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v3);
  NANClusterChangeEvent.hash(into:)(a1, v4);
}

BOOL sub_1002A3EFC(unint64_t a1, unint64_t a2)
{
  return a1 == a2
      && static NANPeerServiceIdentifier.__derived_struct_equals(_:_:)(a1 >> 8, a2 >> 8);
}

Swift::Int sub_1002A3F1C(unint64_t a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1002A3F78()
{
  return sub_1002A3F1C(*v0);
}

void sub_1002A3F88(int a1)
{
}

Swift::Int sub_1002A3F98(uint64_t a1)
{
  return Hasher._finalize()();
}

BOOL sub_1002A3FDC(unint64_t *a1, unint64_t *a2)
{
  return sub_1002A3EFC(*a1, *a2);
}

uint64_t sub_1002A3FF0()
{
  uint64_t v0 = type metadata accessor for DispatchTime(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  unint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  DispatchTime.distance(to:)(v3);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_1002A40A0()
{
  uint64_t v0 = type metadata accessor for DispatchTime(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  unint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  DispatchTime.distance(to:)(v3);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

BOOL sub_1002A4150(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v28 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v4 = *(void *)(v28 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v25 - v7;
  uint64_t v9 = *(void *)(a1 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v25 - v12;
  int v14 = *(unsigned __int8 *)(v2 + 24);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v15((char *)&v25 - v12, v2, a1);
  if (v14 == 1)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
    v16(v13, a1);
    v15(v11, v2, a1);
LABEL_5:
    BOOL v21 = 1;
    goto LABEL_6;
  }

  sub_1002A40A0();
  uint64_t v17 = NANConstants.followUpTimeout.unsafeMutableAddressor();
  uint64_t v18 = v28;
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v25(v6, v17, v28);
  BOOL v27 = static DispatchTimeInterval.< infix(_:_:)((uint64_t)v8, (uint64_t)v6);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v4 + 8);
  v19(v6, v18);
  uint64_t v26 = v19;
  v19(v8, v18);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v13, a1);
  v15(v11, v2, a1);
  if (!v27) {
    goto LABEL_5;
  }
  sub_1002A3FF0();
  uint64_t v20 = NANConstants.keepAliveTimeout.unsafeMutableAddressor();
  v25(v6, v20, v18);
  BOOL v21 = !static DispatchTimeInterval.< infix(_:_:)((uint64_t)v8, (uint64_t)v6);
  uint64_t v22 = v6;
  uint64_t v23 = v26;
  v26(v22, v18);
  v23(v8, v18);
LABEL_6:
  v16(v11, a1);
  return v21;
}

uint64_t sub_1002A4368@<X0>( char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(_BYTE *)a8 = a1;
  *(void *)(a8 + 8) = a2;
  *(void *)(a8 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  *(_BYTE *)(a8 + 24) = a4;
  uint64_t v10 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation(0LL, a6, a7, a4);
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v11 = a8 + *(int *)(v10 + 44);
  uint64_t v12 = type metadata accessor for DispatchTime(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL))(v11, a5, v12);
}

uint64_t sub_1002A43F0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v30 = (id *)((char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v31 = (id *)((char *)&v29 - v6);
  __chkstk_darwin();
  uint64_t v8 = (id *)((char *)&v29 - v7);
  uint64_t v9 = (void *)((char *)v1 + qword_10040E6B8);
  swift_beginAccess((char *)v1 + qword_10040E6B8, v32, 0LL, 0LL);
  uint64_t v10 = *v9;
  uint64_t v11 = *(void *)(v2 + 80);
  uint64_t v12 = *(void *)(v2 + 88);
  uint64_t v14 = type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier(0LL, v11, v12, v13);
  uint64_t v16 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation(0LL, v11, v12, v15);
  swift_bridgeObjectRetain(v10);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10035F328, v14);
  LOBYTE(v14) = Dictionary.isEmpty.getter(v10, v14, v16, WitnessTable);
  swift_bridgeObjectRelease(v10);
  uint64_t v18 = qword_10040E6C0;
  uint64_t v19 = *(void *)((char *)v1 + qword_10040E6C0);
  if ((v14 & 1) != 0)
  {
    *(void *)((char *)v1 + qword_10040E6C0) = 0LL;
  }

  else
  {
    uint64_t v20 = *(void *)((char *)v1 + qword_10040E6C0);
    uint64_t v21 = v20;
    if (!v19)
    {
      *uint64_t v8 = 5LL;
      uint64_t v22 = *(void (**)(void))(v4 + 104);
      ((void (*)(void *, void, uint64_t))v22)(v8, enum case for DispatchTimeInterval.seconds(_:), v3);
      id v29 = (id)*OS_dispatch_queue.nan.unsafeMutableAddressor();
      *uint64_t v31 = 5LL;
      v22();
      uint64_t v23 = swift_allocObject(&unk_1003F8C68, 24LL, 7LL);
      swift_weakInit(v23 + 16, v1);
      uint64_t v24 = (void *)swift_allocObject(&unk_1003F8C90, 40LL, 7LL);
      v24[2] = v11;
      v24[3] = v12;
      v24[4] = v23;
      uint64_t v25 = (uint64_t)v30;
      *uint64_t v30 = 100LL;
      ((void (*)(uint64_t, void, uint64_t))v22)(v25, enum case for DispatchTimeInterval.milliseconds(_:), v3);
      uint64_t v26 = type metadata accessor for P2PTimer(0LL);
      swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
      id v27 = v29;
      uint64_t v21 = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)( (uint64_t)v8,  v27,  (uint64_t)v31,  v25,  (uint64_t)sub_1002A72E8,  (uint64_t)v24);
      uint64_t v20 = *(void *)((char *)v1 + v18);
    }

    *(void *)((char *)v1 + v18) = v21;
    swift_retain();
    uint64_t v19 = v20;
  }

  return swift_release(v19);
}

uint64_t sub_1002A466C(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    uint64_t v3 = result;
    sub_1002A46C0();
    return swift_release(v3);
  }

  return result;
}

uint64_t sub_1002A46C0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)((char *)v0 + qword_10040E6B8);
  swift_beginAccess(v3, v28, 0LL, 0LL);
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(v2 + 80);
  uint64_t v6 = *(void *)(v2 + 88);
  uint64_t v25 = v5;
  uint64_t v26 = v6;
  uint64_t v8 = type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier(0LL, v5, v6, v7);
  uint64_t v10 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation(0LL, v5, v6, v9);
  swift_bridgeObjectRetain(v4);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10035F328, v8);
  uint64_t v27 = Dictionary.filter(_:)(sub_1002A72F4, v24, v4, v8, v10, WitnessTable);
  v23[2] = v5;
  v23[3] = v6;
  uint64_t v12 = type metadata accessor for Dictionary(0LL, v8, v10, WitnessTable);
  uint64_t v13 = type metadata accessor for DriverEvent(0LL);
  uint64_t v14 = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v12);
  uint64_t v16 = sub_100302E9C( (void (*)(char *, char *))sub_1002A7310,  (uint64_t)v23,  v12,  v13,  (uint64_t)&type metadata for Never,  v14,  (uint64_t)&protocol witness table for Never,  v15);
  swift_bridgeObjectRelease(v27);
  if (!*(void *)(v16 + 16)) {
    return swift_bridgeObjectRelease(v16);
  }
  uint64_t v17 = *(void *)((char *)v1 + qword_100410B40);
  swift_unownedRetainStrong(v17);
  sub_1002E9E88(0xD000000000000012LL, 0x8000000100368FE0LL);
  swift_release(v17);
  uint64_t v18 = *(void *)(v16 + 16);
  if (!v18) {
    return swift_bridgeObjectRelease(v16);
  }
  uint64_t v19 = *(void *)(v13 - 8);
  unint64_t v20 = v16 + ((*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  uint64_t v21 = *(void *)(v19 + 72);
  swift_bridgeObjectRetain(v16);
  do
  {
    sub_1002A2D40(v20);
    v20 += v21;
    --v18;
  }

  while (v18);
  return swift_bridgeObjectRelease_n(v16, 2LL);
}

uint64_t (*sub_1002A48A4(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess(v1 + qword_10040E6B8, a1, 33LL, 0LL);
  return sub_1002A48EC;
}

uint64_t sub_1002A48EC(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess(a1);
  if ((a2 & 1) == 0) {
    return sub_1002A43F0();
  }
  return result;
}

void *sub_1002A491C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xED00006E616E2E65LL,  0x7265766F63736964LL,  0xEF656E69676E4579LL);
  uint64_t v5 = qword_10040E6B0;
  uint64_t v6 = *(void *)(v4 + 80);
  uint64_t v7 = *(void *)(v4 + 88);
  uint64_t v9 = type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier(0LL, v6, v7, v8);
  uint64_t v11 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation(0LL, v6, v7, v10);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10035F328, v9);
  *(void *)((char *)v2 + v5) = Dictionary.init()(v9, v11, WitnessTable);
  uint64_t v13 = qword_10040E6B8;
  *(void *)((char *)v2 + v13) = Dictionary.init()(v9, v11, WitnessTable);
  *(void *)((char *)v2 + qword_10040E6C0) = 0LL;
  *(void *)((char *)v2 + qword_100410B40) = a1;
  swift_unownedRetain(a1);
  swift_retain();
  uint64_t v14 = WiFiInterface.capabilities.getter();
  swift_release(a1);
  uint64_t v15 = *WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor();
  uint64_t v22 = v14;
  uint64_t v23 = v15;
  unint64_t v16 = sub_100270384();
  swift_bridgeObjectRetain_n(v15, 2LL);
  ExtendableOptionSet.formIntersection(_:)( (uint64_t (*)(_BYTE *, void))&v22,  &type metadata for WiFiDriverCapabilities.Kind,  v16);
  uint64_t v17 = v23;
  char v18 = sub_10007990C(v23, v15);
  swift_release(a1);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v17);
  uint64_t v19 = (char *)v2 + qword_10040E6A8;
  uint64_t v20 = 4LL;
  if ((v18 & 1) != 0) {
    uint64_t v20 = 10LL;
  }
  *(void *)uint64_t v19 = v20;
  v19[8] = (v18 & 1) == 0;
  return v2;
}

uint64_t sub_1002A4AF4(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = (uint64_t *)((char *)v2 + qword_10040E6B0);
  swift_beginAccess((char *)v2 + qword_10040E6B0, v31, 1LL, 0LL);
  uint64_t v6 = *v5;
  uint64_t v7 = *(void *)(v4 + 80);
  uint64_t v8 = *(void *)(v4 + 88);
  uint64_t v26 = v7;
  uint64_t v27 = v8;
  char v28 = a1;
  uint64_t v10 = type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier(0LL, v7, v8, v9);
  uint64_t v12 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation(0LL, v7, v8, v11);
  swift_bridgeObjectRetain(v6);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10035F328, v10);
  uint64_t v14 = Dictionary.filter(_:)(sub_1002A7424, v25, v6, v10, v12, WitnessTable);
  uint64_t v15 = *v5;
  *uint64_t v5 = v14;
  swift_bridgeObjectRelease(v15);
  unint64_t v16 = (uint64_t *)((char *)v2 + qword_10040E6B8);
  swift_beginAccess((char *)v2 + qword_10040E6B8, v30, 0LL, 0LL);
  uint64_t v17 = NANBitmap.Channel.operatingClass.getter(*v16);
  uint64_t v29 = v17;
  v23[2] = v7;
  v23[3] = v8;
  char v24 = a1;
  uint64_t v18 = type metadata accessor for Dictionary.Keys(0LL, v10, v12, WitnessTable);
  swift_bridgeObjectRetain(v17);
  uint64_t v19 = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v18);
  uint64_t v29 = Sequence.filter(_:)(sub_1002A7444, v23, v18, v19);
  uint64_t v20 = type metadata accessor for Array(0LL, v10);
  uint64_t v21 = swift_getWitnessTable(&protocol conformance descriptor for [A], v20);
  uint64_t v29 = Array.init<A>(_:)(&v29, v10, v20, v21);
  Sequence.forEach(_:)(sub_1002A7458, v2, v20, v21);
  return swift_bridgeObjectRelease(v29);
}

BOOL sub_1002A4CDC(unsigned __int8 *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v42 = a3;
  unint64_t v47 = a2;
  uint64_t v8 = type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier(255LL, a4, a5, a4);
  uint64_t v10 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation(255LL, a4, a5, v9);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, v8, v10, "key value ", 0LL);
  uint64_t v12 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v50 = TupleTypeMetadata2;
  uint64_t v48 = v12;
  __chkstk_darwin();
  uint64_t v14 = &v40[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v15 = __chkstk_darwin();
  uint64_t v17 = &v40[-v16];
  uint64_t v18 = *(int *)(v15 + 48);
  uint64_t v19 = &v40[v18 - v16];
  uint64_t v46 = &a1[v18];
  LOWORD(v18) = *(_WORD *)a1;
  uint64_t v20 = (void (*)(void, void))a1[2];
  unint64_t v44 = v19;
  unint64_t v45 = (unint64_t)v20;
  unsigned __int8 v21 = a1[3];
  uint64_t v43 = v21;
  uint64_t v22 = a1[4];
  uint64_t v23 = a1[5];
  uint64_t v24 = a1[6];
  uint64_t v25 = a1[7];
  *(_WORD *)uint64_t v17 = v18;
  v17[2] = (_BYTE)v20;
  v17[3] = v21;
  v17[4] = v22;
  v17[5] = v23;
  v17[6] = v24;
  v17[7] = v25;
  uint64_t v26 = *(void *)(v10 - 8);
  uint64_t v49 = *(void (**)(void))(v26 + 16);
  v49();
  LODWORD(v47) = static NANClusterChangeEvent.__derived_struct_equals(_:_:)( v45 | (v43 << 8) | (v22 << 16) | (v23 << 24) | (v24 << 32) | (v25 << 40),  (v47 >> 8) & 0xFFFFFFFFFFFFLL);
  unint64_t v45 = *(void *)(v26 + 8);
  ((void (*)(_BYTE *, uint64_t))v45)(v44, v10);
  uint64_t v27 = &v14[*(int *)(v50 + 48)];
  int v28 = *a1;
  int v29 = a1[1];
  uint64_t v30 = a1[2];
  uint64_t v31 = a1[3];
  uint64_t v32 = a1[4];
  uint64_t v33 = a1[5];
  uint64_t v34 = a1[6];
  uint64_t v35 = a1[7];
  LODWORD(v43) = v28;
  *uint64_t v14 = v28;
  int v41 = v29;
  v14[1] = v29;
  v14[2] = v30;
  v14[3] = v31;
  v14[4] = v32;
  v14[5] = v33;
  v14[6] = v34;
  v14[7] = v35;
  unint64_t v44 = v27;
  v49();
  if ((v47 & 1) != 0)
  {
    (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(v14, v50);
    return 1;
  }

  else
  {
    uint16x8_t v37 = &v17[*(int *)(v50 + 48)];
    *uint64_t v17 = v43;
    v17[1] = v41;
    v17[2] = v30;
    v17[3] = v31;
    v17[4] = v32;
    v17[5] = v33;
    v17[6] = v34;
    v17[7] = v35;
    uint64_t v38 = v37;
    v49();
    BOOL v36 = static NANClusterChangeEvent.__derived_struct_equals(_:_:)( v30 | (v31 << 8) | (v32 << 16) | (v33 << 24) | (v34 << 32) | (v35 << 40),  v42 & 0xFFFFFFFFFFFFLL);
    (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(v14, v50);
    ((void (*)(_BYTE *, uint64_t))v45)(v38, v10);
  }

  return v36;
}

uint64_t sub_1002A4F90(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = *(void *)(*(void *)v4 + 80LL);
  uint64_t v7 = *(void *)(*(void *)v4 + 88LL);
  uint64_t v9 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation(0LL, v8, v7, a4);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v60 - v11;
  uint64_t v13 = *(void *)(v4 + qword_100410B40);
  uint64_t v14 = swift_unownedRetainStrong(v13);
  uint64_t v18 = sub_1002E8D68(v14, v15, v16, v17);
  swift_release(v13);
  unsigned __int8 v19 = sub_100288204(a1);
  swift_release(v18);
  if ((v19 & 1) == 0) {
    return 2LL;
  }
  swift_unownedRetainStrong(v13);
  char v20 = sub_1002E9E34();
  swift_release(v13);
  if ((v20 & 1) != 0)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
  }

  else
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x64656C6261736964LL,  0xE800000000000000LL,  0x64656C62616E65LL,  0xE700000000000000LL,  0LL);
    swift_bridgeObjectRelease(0xE800000000000000LL);
    if ((v21 & 1) == 0) {
      return 2LL;
    }
  }

  swift_unownedRetainStrong(v13);
  BOOL v22 = sub_1002EBCA0(a1 >> 16);
  swift_release(v13);
  if (!v22) {
    return 2LL;
  }
  swift_unownedRetainStrong(v13);
  BOOL v23 = sub_1002EA6D4();
  swift_release(v13);
  if (v23) {
    return 0LL;
  }
  uint64_t v24 = swift_unownedRetainStrong(v13);
  uint64_t v28 = sub_1002E8D68(v24, v25, v26, v27);
  swift_release(v13);
  char v29 = sub_10027F690(a1 >> 16);
  swift_release(v28);
  if ((v29 & 1) != 0) {
    return 0LL;
  }
  unint64_t v69 = HIWORD(a1);
  unint64_t v70 = HIBYTE(a1);
  unint64_t v67 = HIDWORD(a1);
  unint64_t v68 = a1 >> 40;
  unint64_t v66 = a1 >> 24;
  uint64_t v31 = (uint64_t *)(v5 + qword_10040E6B8);
  swift_beginAccess(v5 + qword_10040E6B8, v79, 0LL, 0LL);
  unint64_t v63 = a1 >> 8;
  uint64_t v64 = v31;
  uint64_t v33 = *v31;
  __int16 v71 = a1;
  char v72 = BYTE2(a1);
  char v73 = v66;
  char v74 = v67;
  char v75 = v68;
  char v76 = v69;
  char v77 = v70;
  uint64_t v65 = v33;
  if (!*(void *)(v33 + 16)) {
    goto LABEL_17;
  }
  uint64_t v34 = type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier(0LL, v8, v7, v32);
  swift_bridgeObjectRetain(v65);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10035F328, v34);
  unint64_t v35 = sub_1002205F0((uint64_t)&v71, v34, WitnessTable);
  if ((v36 & 1) == 0)
  {
    swift_bridgeObjectRelease(v65);
LABEL_17:
    uint64_t v39 = v64;
    goto LABEL_18;
  }

  uint64_t v60 = *(unsigned int *)(v65 + 36);
  unint64_t v61 = v35;
  swift_bridgeObjectRelease(v65);
  uint64_t v37 = *v64;
  swift_bridgeObjectRetain(*v64);
  uint64_t v65 = v34;
  Dictionary.subscript.getter(&v71, v12, v61, v60, 0LL, v37, v34, v9, WitnessTable);
  swift_bridgeObjectRelease(v37);
  LOBYTE(v37) = sub_1002A4150(v9);
  uint64_t v38 = *(void (**)(char *, uint64_t))(v10 + 8);
  v38(v12, v9);
  uint64_t result = 0LL;
  if ((v37 & 1) == 0) {
    return result;
  }
  uint64_t v39 = v64;
  swift_beginAccess(v64, &v71, 33LL, 0LL);
  uint64_t v40 = type metadata accessor for Dictionary(0LL, v65, v9, WitnessTable);
  Dictionary.remove(at:)(v78, v12, v61, v60, 0LL, v40);
  v38(v12, v9);
  swift_endAccess(&v71);
  sub_1002A43F0();
LABEL_18:
  uint64_t v41 = *(void *)(v5 + qword_10040E6A8);
  uint64_t v42 = *v39;
  if ((*(_BYTE *)(v5 + qword_10040E6A8 + 8) & 1) != 0)
  {
    uint64_t v43 = type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier(0LL, v8, v7, v32);
    swift_bridgeObjectRetain(v42);
    uint64_t v44 = swift_getWitnessTable(&unk_10035F328, v43);
    uint64_t v45 = v42;
    uint64_t v46 = v43;
    uint64_t v47 = v9;
  }

  else
  {
    __chkstk_darwin();
    *(&v60 - 4) = v8;
    *(&v60 - 3) = v7;
    char v52 = a1;
    char v53 = v63;
    char v54 = BYTE2(a1);
    char v55 = v66;
    char v56 = v67;
    char v57 = v68;
    char v58 = v69;
    char v59 = v70;
    uint64_t v49 = type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier(0LL, v8, v7, v48);
    swift_bridgeObjectRetain(v42);
    uint64_t v50 = swift_getWitnessTable(&unk_10035F328, v49);
    uint64_t v45 = Dictionary.filter(_:)(sub_1002A7470, &v60 - 6, v42, v49, v9, v50);
    uint64_t v42 = v45;
    uint64_t v46 = v49;
    uint64_t v47 = v9;
    uint64_t v44 = v50;
  }

  uint64_t v51 = Dictionary.count.getter(v45, v46, v47, v44);
  swift_bridgeObjectRelease(v42);
  return v51 < v41;
}

uint64_t sub_1002A5458(uint64_t a1)
{
  uint64_t v4 = *(void *)(*(void *)v1 + 80LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 88LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v3 + 8),  v4,  &protocol requirements base descriptor for P2PControls);
  uint64_t v38 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v34 = (char *)v29 - v5;
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  uint64_t v40 = *(void *)(v6 - 8);
  uint64_t v41 = v6;
  __chkstk_darwin();
  uint64_t v39 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation(255LL, v4, v3, v8);
  uint64_t v10 = type metadata accessor for Optional(0LL, v9);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v31 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v14 = (char *)v29 - v13;
  uint64_t v15 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v17 = (unsigned __int8 *)v29 - v16;
  uint64_t v36 = v1;
  uint64_t v37 = a1;
  uint64_t v43 = a1;
  uint64_t v18 = v1 + qword_10040E6B0;
  swift_beginAccess(v1 + qword_10040E6B0, v42, 33LL, 0LL);
  uint64_t v32 = v4;
  uint64_t v33 = v3;
  uint64_t v20 = type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier(255LL, v4, v3, v19);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10035F328, v20);
  uint64_t v30 = type metadata accessor for Dictionary(0LL, v20, v9, WitnessTable);
  Dictionary.removeValue(forKey:)(&v43, v30);
  swift_endAccess(v42);
  (*(void (**)(unsigned __int8 *, char *, uint64_t))(v15 + 32))(v17, v14, v9);
  if (!sub_1002A4150(v9))
  {
    v29[11] = v18;
    type metadata accessor for P2PTimer(0LL);
    BOOL v23 = v39;
    variable initialization expression of AWDLPeer.lastUpdated();
    (*(void (**)(unsigned __int8 *, char *, uint64_t))(v40 + 40))(&v17[*(int *)(v9 + 44)], v23, v41);
    type metadata accessor for BinaryEncoder();
    uint64_t v24 = *((void *)v17 + 1);
    unint64_t v25 = *((void *)v17 + 2);
    v42[0] = *v17;
    v42[1] = v24;
    v42[2] = v25;
    sub_100020AFC(v24, v25);
    unint64_t v26 = sub_1001D11B4();
    static BinaryEncoder.encode<A>(_:)((uint64_t)v42, (uint64_t)&type metadata for NANServiceInfo, v26);
    unint64_t v28 = v27;
    sub_1000208D8(v24, v25);
    if (v28 >> 60 != 15) {
      __asm { BR              X9 }
    }
  }

  return (*(uint64_t (**)(unsigned __int8 *, uint64_t))(v15 + 8))(v17, v9);
}

uint64_t sub_1002A5F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 80);
  uint64_t v8 = *(void *)(v6 + 88);
  uint64_t v9 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation(255LL, v7, v8, a4);
  uint64_t v10 = type metadata accessor for Optional(0LL, v9);
  uint64_t v29 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v28 - v11;
  uint64_t v13 = (uint64_t *)((char *)v5 + qword_10040E6B0);
  swift_beginAccess((char *)v5 + qword_10040E6B0, v33, 0LL, 0LL);
  uint64_t v14 = *v13;
  uint64_t v16 = type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier(0LL, v7, v8, v15);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10035F328, v16);
  uint64_t v18 = NANBitmap.Channel.operatingClass.getter(v14);
  uint64_t v30 = v18;
  uint64_t v19 = type metadata accessor for Dictionary.Keys(0LL, v16, v9, WitnessTable);
  swift_bridgeObjectRetain(v18);
  uint64_t v20 = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v19);
  uint64_t v34 = Set.init<A>(_:)(&v30, v16, v19, WitnessTable, v20);
  type metadata accessor for Set(0LL, v16, WitnessTable);
  Set.popFirst()(&v30);
  if ((v31 & 1) == 0)
  {
    do
    {
      uint64_t v26 = v30;
      char v27 = sub_1002A4F90(v30, v21, v22, v23);
      if (v27 == 2)
      {
        uint64_t v32 = v26;
        swift_beginAccess(v13, &v30, 33LL, 0LL);
        uint64_t v25 = type metadata accessor for Dictionary(0LL, v16, v9, WitnessTable);
        Dictionary.removeValue(forKey:)(&v32, v25);
        swift_endAccess(&v30);
        (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v10);
      }

      else if ((v27 & 1) != 0)
      {
        sub_1002A5458(v26);
      }

      Set.popFirst()(&v30);
    }

    while (v31 != 1);
  }

  return swift_bridgeObjectRelease(v34);
}

BOOL sub_1002A6138(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v44 = a2;
  uint64_t v7 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v48 = *(void *)(v7 - 8);
  uint64_t v49 = v7;
  __chkstk_darwin();
  uint64_t v47 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v45 = (char *)&v36 - v9;
  uint64_t v11 = type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier(255LL, a3, a4, v10);
  uint64_t v13 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation(255LL, a3, a4, v12);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, v11, v13, "key value ", 0LL);
  uint64_t v46 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin();
  uint64_t v19 = (char *)&v36 - v18;
  char v20 = *a1;
  char v21 = a1[1];
  LOBYTE(a4) = a1[2];
  int v22 = a1[3];
  unsigned __int8 v23 = a1[4];
  int v40 = v23;
  int v41 = v22;
  int v24 = a1[5];
  LOBYTE(v18) = a1[6];
  int v38 = v18;
  int v39 = v24;
  LOBYTE(a1) = a1[7];
  uint64_t v25 = *(int *)(v17 + 48);
  uint64_t v43 = v17;
  uint64_t v37 = &v19[v25];
  *uint64_t v19 = v20;
  v19[1] = v21;
  v19[2] = a4;
  v19[3] = v22;
  v19[4] = v23;
  v19[5] = v24;
  v19[6] = v18;
  v19[7] = (char)a1;
  uint64_t v42 = *(void *)(v13 - 8);
  uint64_t v26 = *(void (**)(void))(v42 + 16);
  v26();
  char v27 = &v16[*(int *)(TupleTypeMetadata2 + 48)];
  *uint64_t v16 = v20;
  v16[1] = v21;
  v16[2] = a4;
  v16[3] = v41;
  v16[4] = v40;
  v16[5] = v39;
  v16[6] = v38;
  v16[7] = (char)a1;
  ((void (*)(char *, char *, uint64_t))v26)(v27, v37, v13);
  uint64_t v28 = (uint64_t)v45;
  sub_1002A40A0();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v27, v13);
  uint64_t v29 = NANConstants.followUpTimeout.unsafeMutableAddressor();
  uint64_t v30 = (uint64_t)v47;
  uint64_t v31 = v48;
  uint64_t v32 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v47, v29, v49);
  uint64_t v33 = v30;
  LOBYTE(v30) = static DispatchTimeInterval.< infix(_:_:)(v28, v30);
  uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
  v34(v33, v32);
  v34(v28, v32);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v19, v43);
  return (v30 & 1) == 0;
}

uint64_t sub_1002A63C8@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v43 = a5;
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v8 = type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier(255LL, a2, a3, a4);
  uint64_t v10 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation(255LL, v6, v5, v9);
  uint64_t v11 = v8;
  uint64_t v12 = v10;
  swift_getTupleTypeMetadata2(0LL, v11, v10, "key value ", 0LL);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v34 - v15;
  uint64_t v17 = __chkstk_darwin();
  uint64_t v19 = (char *)&v34 - v18;
  uint64_t v20 = *(int *)(v17 + 48);
  uint64_t v21 = v17;
  uint64_t v35 = v17;
  uint64_t v42 = (char *)&v34 + v20 - v18;
  uint64_t v46 = &a1[v20];
  char v22 = *a1;
  LODWORD(v20) = a1[1];
  LODWORD(v5) = a1[2];
  int v23 = a1[3];
  LOBYTE(v18) = a1[4];
  int v49 = v18;
  int v24 = a1[5];
  unsigned __int8 v25 = a1[6];
  int v37 = v25;
  int v38 = v24;
  unsigned __int8 v26 = a1[7];
  int v36 = v26;
  *uint64_t v19 = v22;
  LOBYTE(v6) = v22;
  v19[1] = v20;
  char v27 = v20;
  int v48 = v20;
  v19[2] = v5;
  int v44 = v5;
  v19[3] = v23;
  LODWORD(a1) = v23;
  v19[4] = v18;
  v19[5] = v24;
  v19[6] = v25;
  v19[7] = v26;
  uint64_t v41 = *(void *)(v12 - 8);
  uint64_t v45 = *(void (**)(void))(v41 + 16);
  v45();
  int v39 = &v16[*(int *)(v21 + 48)];
  *uint64_t v16 = v6;
  LOBYTE(v21) = v6;
  v16[1] = v27;
  v16[2] = v5;
  LODWORD(v5) = (_DWORD)a1;
  v16[3] = (char)a1;
  v16[4] = v49;
  LOBYTE(a1) = v37;
  LOBYTE(v6) = v38;
  v16[5] = v38;
  v16[6] = (char)a1;
  char v28 = v36;
  v16[7] = v36;
  v45();
  uint64_t v29 = &v14[*(int *)(v35 + 48)];
  *uint64_t v14 = v21;
  v14[1] = v48;
  v14[2] = v44;
  int v40 = v5;
  v14[3] = v5;
  LOBYTE(v5) = v49;
  v14[4] = v49;
  v14[5] = v6;
  v14[6] = (char)a1;
  v14[7] = v28;
  ((void (*)(char *, char *, uint64_t))v45)(v29, v46, v12);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v41 + 8);
  v30(v29, v12);
  v30(v39, v12);
  v30(v42, v12);
  v47[0] = v21;
  v47[1] = v48;
  v47[2] = v44;
  v47[3] = v40;
  v47[4] = v5;
  v47[5] = v6;
  v47[6] = (_BYTE)a1;
  v47[7] = v28;
  v47[8] = 1;
  sub_100058678((uint64_t)v47);
  uint64_t v31 = v43;
  sub_100058090(v47, v43);
  uint64_t v32 = type metadata accessor for DriverEvent(0LL);
  return swift_storeEnumTagMultiPayload(v31, v32, 0LL);
}

uint64_t sub_1002A667C(unsigned __int8 *a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v39 = a3;
  int v37 = a2;
  uint64_t v8 = type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier(255LL, a4, a5, a4);
  uint64_t v10 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation(255LL, a4, a5, v9);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, v8, v10, "key value ", 0LL);
  uint64_t v38 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin();
  uint64_t v16 = (char *)&v29 - v15;
  int v17 = *a1;
  LOBYTE(v15) = a1[1];
  int v33 = v15;
  int v34 = v17;
  uint64_t v18 = a1[2];
  uint64_t v19 = a1[3];
  uint64_t v20 = a1[4];
  uint64_t v21 = a1[5];
  uint64_t v22 = a1[6];
  uint64_t v23 = a1[7];
  uint64_t v35 = v14;
  uint64_t v31 = &v16[*(int *)(v14 + 48)];
  uint64_t v32 = v18;
  *uint64_t v16 = v17;
  v16[1] = v15;
  v16[2] = v18;
  v16[3] = v19;
  v16[4] = v20;
  uint64_t v24 = v20;
  v16[5] = v21;
  v16[6] = v22;
  v16[7] = v23;
  uint64_t v30 = v10;
  uint64_t v36 = *(void *)(v10 - 8);
  unsigned __int8 v25 = *(void (**)(void))(v36 + 16);
  v25();
  int v37 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
  *uint64_t v13 = v34;
  v13[1] = v33;
  uint64_t v26 = v32;
  v13[2] = v32;
  v13[3] = v19;
  v13[4] = v24;
  v13[5] = v21;
  v13[6] = v22;
  v13[7] = v23;
  uint64_t v27 = v30;
  v25();
  LOBYTE(v21) = static NANClusterChangeEvent.__derived_struct_equals(_:_:)( v26 | (v19 << 8) | (v24 << 16) | (v21 << 24) | (v22 << 32) | (v23 << 40),  v39 >> 16);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v16, v35);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v27);
  return v21 & 1;
}

BOOL sub_1002A6870(unsigned __int8 *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  int v32 = a3;
  uint64_t v8 = type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier(255LL, a4, a5, a4);
  uint64_t v10 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation(255LL, a4, a5, v9);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, v8, v10, "key value ", 0LL);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin();
  uint64_t v16 = (char *)&v27 - v15;
  int v17 = *a1;
  unsigned __int8 v18 = a1[1];
  int v19 = a1[2];
  unsigned __int8 v20 = a1[3];
  unsigned __int8 v21 = a1[4];
  int v29 = v21;
  int v30 = v19;
  LODWORD(v15) = a1[5];
  unsigned __int8 v22 = a1[6];
  int v27 = v22;
  int v28 = v15;
  LOBYTE(a1) = a1[7];
  uint64_t v31 = &v16[*(int *)(v14 + 48)];
  *uint64_t v16 = v17;
  v16[1] = v18;
  v16[2] = v19;
  v16[3] = v20;
  v16[4] = v21;
  v16[5] = v15;
  v16[6] = v22;
  v16[7] = (char)a1;
  uint64_t v23 = *(void *)(v10 - 8);
  (*(void (**)(void))(v23 + 16))();
  uint64_t v24 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
  *uint64_t v13 = v17;
  v13[1] = v18;
  v13[2] = v30;
  v13[3] = v20;
  v13[4] = v29;
  v13[5] = v28;
  v13[6] = v27;
  v13[7] = (char)a1;
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v24, v31, v10);
  BOOL v25 = v17 != v32;
  (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v10);
  return v25;
}

uint64_t sub_1002A6A30(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = sub_1002A48A4((uint64_t)v19);
  uint64_t v18 = *a1;
  uint64_t v5 = *(void *)(v3 + 80);
  uint64_t v6 = *(void *)(v3 + 88);
  uint64_t v8 = type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier(255LL, v5, v6, v7);
  uint64_t v10 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation(255LL, v5, v6, v9);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10035F328, v8);
  uint64_t v12 = type metadata accessor for Dictionary(0LL, v8, v10, WitnessTable);
  uint64_t v13 = (void (*)(_BYTE *, void))Dictionary.subscript.modify(v17, &v18, v12);
  uint64_t v15 = v14;
  v13(v17, 0LL);
  return v4((uint64_t)v19, 0);
}

uint64_t sub_1002A6B30()
{
  uint64_t v1 = v0 + qword_100410B38;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_unownedRelease(*(void *)(v0 + qword_100410B40));
  swift_bridgeObjectRelease(*(void *)(v0 + qword_10040E6B0));
  swift_bridgeObjectRelease(*(void *)(v0 + qword_10040E6B8));
  swift_release(*(void *)(v0 + qword_10040E6C0));
  return v0;
}

uint64_t sub_1002A6BB4()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for NANFollowUpTransmitter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NANFollowUpTransmitter);
}

uint64_t sub_1002A6BE4(uint64_t a1)
{
  v4[0] = &unk_10035F258;
  v4[1] = &unk_10035F270;
  uint64_t result = type metadata accessor for DispatchTime(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(result - 8) + 64LL;
    uint64_t v6 = v5;
    swift_initStructMetadata(a1, 0LL, 4LL, v4, a1 + 32);
    return 0LL;
  }

  return result;
}

_BYTE *sub_1002A6C60(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (_BYTE *)(v14 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *a1 = *(_BYTE *)a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    sub_100020AFC(v7, v8);
    *((void *)v4 + 1) = v7;
    *((void *)v4 + 2) = v8;
    _BYTE v4[24] = *((_BYTE *)a2 + 24);
    uint64_t v9 = *(int *)(a3 + 40);
    uint64_t v10 = &v4[v9];
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v12 = type metadata accessor for DispatchTime(0LL);
    uint64_t v13 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL);
    v13(v10, v11, v12);
    v13(&v4[*(int *)(a3 + 44)], (uint64_t)a2 + *(int *)(a3 + 44), v12);
  }

  return v4;
}

uint64_t sub_1002A6D34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for DispatchTime(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v7(v4, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + *(int *)(a2 + 44), v5);
}

uint64_t sub_1002A6DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_100020AFC(v6, v7);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 40);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for DispatchTime(0LL);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL);
  v12(v9, v10, v11);
  v12(a1 + *(int *)(a3 + 44), a2 + *(int *)(a3 + 44), v11);
  return a1;
}

uint64_t sub_1002A6E58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_100020AFC(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  sub_1000208D8(v8, v9);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v10 = *(int *)(a3 + 40);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for DispatchTime(0LL);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24LL);
  v14(v11, v12, v13);
  v14(a1 + *(int *)(a3 + 44), a2 + *(int *)(a3 + 44), v13);
  return a1;
}

uint64_t sub_1002A6F08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for DispatchTime(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  v10(a1 + *(int *)(a3 + 44), a2 + *(int *)(a3 + 44), v9);
  return a1;
}

uint64_t sub_1002A6FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_1000208D8(v6, v7);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 40);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for DispatchTime(0LL);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40LL);
  v12(v9, v10, v11);
  v12(a1 + *(int *)(a3 + 44), a2 + *(int *)(a3 + 44), v11);
  return a1;
}

uint64_t sub_1002A704C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002A7058);
}

uint64_t sub_1002A7058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 24);
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v10 = type metadata accessor for DispatchTime(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))( a1 + *(int *)(a3 + 40),  a2,  v10);
  }

uint64_t sub_1002A70D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002A70E0);
}

uint64_t sub_1002A70E0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 24) = a2 + 1;
  }

  else
  {
    uint64_t v7 = type metadata accessor for DispatchTime(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 40),  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for NANFollowUpTransmitter.FollowUpInformation( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NANFollowUpTransmitter.FollowUpInformation);
}

uint64_t type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NANFollowUpTransmitter.FollowUpIdentifier);
}

uint64_t sub_1002A7168(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t sub_1002A71B0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1002A71F4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1002A71FC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

uint64_t type metadata accessor for NANFollowUpTransmitter.FollowUpTransmitQueueLimit( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for NANFollowUpTransmitter.FollowUpTransmitQueueLimit);
}

uint64_t sub_1002A7214(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10035F300, a1);
}

uint64_t sub_1002A7224(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_100409E50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002A726C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002A72A0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002A72C4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1002A72E8()
{
  return sub_1002A466C(*(void *)(v0 + 32));
}

BOOL sub_1002A72F4(char *a1, uint64_t a2)
{
  return sub_1002A6138(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1002A7310@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_1002A63C8(a1, *(void *)(v3 + 16), *(void *)(v3 + 24), a2, a3);
}

uint64_t sub_1002A732C(uint64_t a1)
{
  __int16 v11 = *(_WORD *)(a1 + 360);
  __int128 v9 = *(_OWORD *)(a1 + 320);
  __int128 v10 = *(_OWORD *)(a1 + 336);
  __int128 v7 = *(_OWORD *)(a1 + 288);
  __int128 v8 = *(_OWORD *)(a1 + 304);
  __int128 v5 = *(_OWORD *)(a1 + 256);
  __int128 v6 = *(_OWORD *)(a1 + 272);
  __int128 v3 = *(_OWORD *)(a1 + 224);
  __int128 v4 = *(_OWORD *)(a1 + 240);
  sub_1000578CC( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  *(void *)(a1 + 152),  *(void *)(a1 + 160),  *(void *)(a1 + 168),  *(void *)(a1 + 176),  *(void *)(a1 + 184),  *(void *)(a1 + 192),  *(void *)(a1 + 200),  *(void *)(a1 + 208),  *(void *)(a1 + 216),  v3,  *((uint64_t *)&v3 + 1),  v4,  *((uint64_t *)&v4 + 1),  v5,  *((uint64_t *)&v5 + 1),  v6,  *((uint64_t *)&v6 + 1),  v7,  *((uint64_t *)&v7 + 1),  v8,  *((uint64_t *)&v8 + 1),  v9,  *((uint64_t *)&v9 + 1),  v10,  *((uint64_t *)&v10 + 1),  *(void *)(a1 + 352),  v11,  SHIBYTE(v11));
  return a1;
}

BOOL sub_1002A73C4(unsigned __int8 *a1)
{
  uint64_t v2 = 0x100000000000000LL;
  if (!*(_BYTE *)(v1 + 39)) {
    uint64_t v2 = 0LL;
  }
  return sub_1002A4CDC( a1,  *(unsigned int *)(v1 + 32) | ((unint64_t)*(unsigned __int8 *)(v1 + 36) << 32) | ((unint64_t)*(unsigned __int8 *)(v1 + 37) << 40) | ((unint64_t)*(unsigned __int8 *)(v1 + 38) << 48) | v2,  *(unsigned int *)(v1 + 40) | ((unint64_t)*(unsigned __int8 *)(v1 + 44) << 32) | ((unint64_t)*(unsigned __int8 *)(v1 + 45) << 40),  *(void *)(v1 + 16),  *(void *)(v1 + 24));
}

BOOL sub_1002A7424(unsigned __int8 *a1, uint64_t a2)
{
  return sub_1002A6870(a1, a2, *(unsigned __int8 *)(v2 + 32), *(void *)(v2 + 16), *(void *)(v2 + 24));
}

BOOL sub_1002A7444(unsigned __int8 *a1)
{
  return *a1 == *(unsigned __int8 *)(v1 + 32);
}

uint64_t sub_1002A7458(uint64_t *a1)
{
  return sub_1002A6A30(a1, v1);
}

uint64_t sub_1002A7470(unsigned __int8 *a1, char *a2)
{
  return sub_1002A667C(a1, a2, *(void *)(v2 + 32), *(void *)(v2 + 16), *(void *)(v2 + 24)) & 1;
}

uint64_t sub_1002A7490(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "\b";
    void v4[2] = &unk_10035F398;
    v4[3] = &unk_10035F3B0;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 5LL, v4, a1 + 96);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1002A7528(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  sub_1002A7574(a1, a2 & 0xFFFFFFFFFFFFLL);
  return v5;
}

void *sub_1002A7574(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = v2;
  unint64_t v6 = a2 >> 8;
  unint64_t v25 = a2 >> 8;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = a2 >> 24;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = a2 >> 40;
  uint64_t v11 = *v3;
  Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xED00006E616E2E65LL,  0x694C656369766564LL,  0xEA00000000006B6ELL);
  *((_BYTE *)v3 + qword_10040E8C8) = 0;
  *(void *)((char *)v3 + qword_100410B50) = a1;
  uint64_t v12 = (char *)v3 + qword_100410B58;
  *uint64_t v12 = a2;
  v12[1] = v6;
  v12[2] = v7;
  v12[3] = v8;
  v12[4] = v9;
  v12[5] = v10;
  uint64_t v13 = swift_allocObject(&unk_1003F8DC8, 24LL, 7LL);
  swift_weakInit(v13 + 16, a1);
  uint64_t v14 = swift_allocObject(&unk_1003F8DF0, 46LL, 7LL);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = *(void *)(v11 + 80);
  *(void *)(v14 + 24) = *(void *)(v11 + 88);
  *(void *)(v14 + 32) = v13;
  *(_BYTE *)(v14 + 40) = a2;
  *(_BYTE *)(v14 + 41) = v25;
  *(_BYTE *)(v14 + 42) = v7;
  *(_BYTE *)(v14 + 43) = v8;
  *(_BYTE *)(v14 + 44) = v9;
  *(_BYTE *)(v14 + 45) = v10;
  swift_unownedRetain(a1);
  swift_retain();
  uint64_t v15 = sub_1002EBDF0(a2 & 0xFFFFFFFFFFFFLL, 18, (uint64_t)sub_1002A7BE8, v14);
  swift_release(v13);
  swift_release(v14);
  *(void *)((char *)v3 + qword_10040E8D0) = v15;
  uint64_t v16 = swift_retain();
  int v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    int v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v20 = swift_slowAlloc(32LL, -1LL);
    uint64_t v27 = v20;
    *(_DWORD *)int v19 = 136315138;
    uint64_t v21 = sub_1002A7AD8();
    unint64_t v23 = v22;
    uint64_t v26 = sub_10000235C(v21, v22, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
    swift_release(v3);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Created %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {
    swift_release(v3);
  }

  swift_release(a1);
  return v3;
}

uint64_t sub_1002A7840(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = sub_1002E8D68(result, v3, v4, v5);
    swift_release(v6);
    sub_1002A0768();
    return swift_release(v7);
  }

  return result;
}

uint64_t sub_1002A78A8()
{
  uint64_t v1 = v0;
  if ((*(_BYTE *)(v0 + qword_10040E8C8) & 1) == 0)
  {
    uint64_t v2 = *(void *)(v0 + qword_100410B50);
    uint64_t v3 = swift_unownedRetainStrong(*(void *)(v1 + qword_100410B50));
    uint64_t v7 = sub_1002E8D68(v3, v4, v5, v6);
    swift_release(v2);
    sub_100287CFC(v1);
    swift_release(v7);
  }

  uint64_t v8 = v1 + qword_100410B48;
  uint64_t v9 = swift_retain();
  unint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v20 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v14 = sub_1002A7AD8();
    unint64_t v16 = v15;
    uint64_t v19 = sub_10000235C(v14, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    swift_release(v1);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Destroyed %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {

    swift_release(v1);
  }

  uint64_t v17 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8LL))(v8, v17);
  swift_unownedRelease(*(void *)(v1 + qword_100410B50));
  swift_release(*(void *)(v1 + qword_10040E8D0));
  return v1;
}

uint64_t sub_1002A7A94()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for NANDeviceLink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NANDeviceLink);
}

void sub_1002A7AC4()
{
  *(_BYTE *)(v0 + qword_10040E8C8) = 1;
}

uint64_t sub_1002A7AD8()
{
  HIBYTE(v5[1]) = -18;
  v1._countAndFlagsBits = WiFiAddress.description.getter(*(unsigned __int16 *)(v0 + qword_100410B58) | ((unint64_t)*(unsigned int *)(v0 + qword_100410B58 + 2) << 16));
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._countAndFlagsBits = 93LL;
  v3._object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  return v5[0];
}

uint64_t sub_1002A7B80()
{
  return sub_1002A7AD8();
}

uint64_t sub_1002A7BA0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002A7BC4()
{
  return swift_deallocObject(v0, 46LL, 7LL);
}

uint64_t sub_1002A7BE8()
{
  return sub_1002A7840(*(void *)(v0 + 32));
}

uint64_t sub_1002A7C00(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "\b";
    void v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 5LL, v4, a1 + 96);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1002A7C88@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v30 = a3;
  uint64_t v29 = type metadata accessor for AWDLPeer.AdvertisedService(0LL);
  uint64_t v35 = *(void *)(v29 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v34 = (uint64_t)&v28 - v7;
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v32 = a1 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  unint64_t v11 = v10 & v8;
  int64_t v33 = (unint64_t)(v9 + 63) >> 6;
  int v28 = a2 + 1;
  int v40 = a2;
  int v31 = *((unsigned __int8 *)a2 + 33) << 8;
  uint64_t v36 = a1;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v13 = 0LL;
  while (v11)
  {
    unint64_t v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    unint64_t v15 = v14 | (v13 << 6);
LABEL_23:
    uint64_t v19 = v34;
    sub_100057FE8( *(void *)(v36 + 48) + *(void *)(v35 + 72) * v15,  v34,  type metadata accessor for AWDLPeer.AdvertisedService);
    sub_1002B1744(v19, (uint64_t)v6);
    uint64_t v20 = *((void *)v6 + 2);
    uint64_t v21 = *((void *)v6 + 3);
    uint64_t v22 = *((void *)v6 + 4);
    __int16 v23 = v6[40];
    __int16 v24 = v6[41];
    *(void *)&__int128 v37 = *((void *)v6 + 1);
    *((void *)&v37 + 1) = v20;
    __int128 v39 = *v40;
    unint64_t v25 = sub_10000B08C();
    if (!StringProtocol.caseInsensitiveCompare<A>(_:)( &v39,  &type metadata for String,  &type metadata for String,  v25,  v25)
      && static DNSRecords.Identifier.== infix(_:_:)( v21,  v22,  v23 | (v24 << 8),  *((void *)v40 + 2),  *((void *)v40 + 3),  v31 | *((unsigned __int8 *)v40 + 32)))
    {
      swift_release(v36);
      uint64_t v26 = v30;
      sub_1002B1744((uint64_t)v6, v30);
      uint64_t v27 = 0LL;
LABEL_27:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v26, v27, 1LL, v29);
      __int128 v39 = *v40;
      sub_100020A04((uint64_t)&v39);
      __int128 v37 = *v28;
      __int16 v38 = *((_WORD *)v28 + 8);
      return sub_100020A04((uint64_t)&v37);
    }

    uint64_t result = sub_10005802C((uint64_t)v6, type metadata accessor for AWDLPeer.AdvertisedService);
  }

  int64_t v16 = v13 + 1;
  if (__OFADD__(v13, 1LL))
  {
    __break(1u);
    goto LABEL_29;
  }

  if (v16 >= v33) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v32 + 8 * v16);
  ++v13;
  if (v17) {
    goto LABEL_22;
  }
  int64_t v13 = v16 + 1;
  if (v16 + 1 >= v33) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v32 + 8 * v13);
  if (v17) {
    goto LABEL_22;
  }
  int64_t v13 = v16 + 2;
  if (v16 + 2 >= v33) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v32 + 8 * v13);
  if (v17) {
    goto LABEL_22;
  }
  int64_t v13 = v16 + 3;
  if (v16 + 3 >= v33) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v32 + 8 * v13);
  if (v17)
  {
LABEL_22:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v13 << 6);
    goto LABEL_23;
  }

  int64_t v18 = v16 + 4;
  if (v18 >= v33)
  {
LABEL_26:
    swift_release(v36);
    uint64_t v27 = 1LL;
    uint64_t v26 = v30;
    goto LABEL_27;
  }

  unint64_t v17 = *(void *)(v32 + 8 * v18);
  if (v17)
  {
    int64_t v13 = v18;
    goto LABEL_22;
  }

  while (1)
  {
    int64_t v13 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v13 >= v33) {
      goto LABEL_26;
    }
    unint64_t v17 = *(void *)(v32 + 8 * v13);
    ++v18;
    if (v17) {
      goto LABEL_22;
    }
  }

uint64_t sub_1002A7FB8()
{
  uint64_t v1 = *(void *)(v0 + qword_100410B68);
  swift_unownedRetainStrong(v1);
  sub_100304B2C();
  return swift_release(v1);
}

void sub_1002A7FEC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (uint64_t *)((char *)v0 + qword_10040E960);
  swift_beginAccess((char *)v0 + qword_10040E960, v28, 0LL, 0LL);
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(v1 + 80);
  uint64_t v5 = *(void *)(v1 + 88);
  uint64_t v7 = type metadata accessor for AWDLDiscoveryEngine.Browse(0LL, v4, v5, v6);
  unint64_t v8 = sub_100004DEC();
  swift_bridgeObjectRetain(v3);
  uint64_t v10 = Dictionary.count.getter(v9, &type metadata for DNSRecords.Identifier, v7, v8);
  swift_bridgeObjectRelease(v3);
  unint64_t v11 = (uint64_t *)((char *)v0 + qword_10040E968[0]);
  swift_beginAccess((char *)v0 + qword_10040E968[0], v27, 0LL, 0LL);
  uint64_t v12 = *v11;
  uint64_t v14 = type metadata accessor for AWDLDiscoveryEngine.Advertise(0LL, v4, v5, v13);
  unint64_t v15 = sub_100004E30();
  swift_bridgeObjectRetain(v12);
  uint64_t v17 = Dictionary.count.getter(v16, &type metadata for DNSRecords.PTR, v14, v15);
  swift_bridgeObjectRelease(v12);
  BOOL v18 = __OFADD__(v10, v17);
  uint64_t v19 = v10 + v17;
  if (v18)
  {
    __break(1u);
    goto LABEL_5;
  }

  uint64_t v20 = (uint64_t *)((char *)v0 + qword_100410B70);
  swift_beginAccess(v20, v26, 0LL, 0LL);
  uint64_t v21 = *v20;
  uint64_t v23 = type metadata accessor for AWDLDiscoveryEngine.DatapathInitiator(0LL, v4, v5, v22);
  swift_bridgeObjectRetain(v21);
  uint64_t v25 = Dictionary.count.getter(v24, &type metadata for DNSRecords.PTR, v23, v15);
  swift_bridgeObjectRelease(v21);
  if (__OFADD__(v19, v25)) {
LABEL_5:
  }
    __break(1u);
}

uint64_t sub_1002A8174@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)((char *)v1 + qword_10040E960);
  swift_beginAccess(v4, v8, 0LL, 0LL);
  uint64_t v5 = *v4;
  type metadata accessor for AWDLDiscoveryEngine.Browse(0LL, *(void *)(v3 + 80), *(void *)(v3 + 88), v6);
  sub_100004DEC();
  *a1 = v5;
  return swift_bridgeObjectRetain(v5);
}

void sub_1002A81E4(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)((char *)v1 + qword_10040E968[0]);
  swift_beginAccess(v4, v13, 0LL, 0LL);
  uint64_t v5 = *v4;
  uint64_t v7 = type metadata accessor for AWDLDiscoveryEngine.Advertise(0LL, *(void *)(v3 + 80), *(void *)(v3 + 88), v6);
  unint64_t v8 = sub_100004E30();
  uint64_t v9 = type metadata accessor for Dictionary.Keys(0LL, &type metadata for DNSRecords.PTR, v7, v8);
  swift_bridgeObjectRetain(v5);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v9);
  uint64_t v12 = sub_100302E9C( (void (*)(char *, char *))sub_1002A82CC,  0LL,  v9,  (uint64_t)&type metadata for DNSRecords.Identifier,  (uint64_t)&type metadata for Never,  WitnessTable,  (uint64_t)&protocol witness table for Never,  v11);
  swift_bridgeObjectRelease(v5);
  *a1 = v12;
}

uint64_t sub_1002A82CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 24);
  char v3 = *(_BYTE *)(a1 + 32);
  char v4 = *(_BYTE *)(a1 + 33);
  *(void *)a2 = *(void *)(a1 + 16);
  *(void *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + swift_weakDestroy(v0 + 16) = v3;
  *(_BYTE *)(a2 + 17) = v4;
  return swift_bridgeObjectRetain(v2);
}

double sub_1002A82FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  v63[0] = _swiftEmptyArrayStorage;
  char v3 = (void *)((char *)v0 + qword_10040E960);
  swift_beginAccess(v3, v62, 0LL, 0LL);
  v57[0] = *v3;
  uint64_t v4 = *(void *)(v2 + 80);
  uint64_t v5 = *(void *)(v2 + 88);
  uint64_t v50 = v4;
  uint64_t v51 = v5;
  char v52 = v63;
  uint64_t v7 = type metadata accessor for AWDLDiscoveryEngine.Browse(255LL, v4, v5, v6);
  unint64_t v8 = sub_100004DEC();
  uint64_t v9 = type metadata accessor for Dictionary(0LL, &type metadata for DNSRecords.Identifier, v7, v8);
  swift_bridgeObjectRetain(v57[0]);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v9);
  Sequence.forEach(_:)(sub_1002B345C, v49, v9, WitnessTable);
  swift_bridgeObjectRelease(v57[0]);
  v61[0] = _swiftEmptyArrayStorage;
  uint64_t v11 = (void *)((char *)v1 + qword_10040E968[0]);
  swift_beginAccess((char *)v1 + qword_10040E968[0], v60, 0LL, 0LL);
  uint64_t v12 = *v11;
  v57[0] = v12;
  v48[2] = v4;
  v48[3] = v5;
  v48[4] = v61;
  uint64_t v14 = type metadata accessor for AWDLDiscoveryEngine.Advertise(255LL, v4, v5, v13);
  unint64_t v15 = sub_100004E30();
  uint64_t v16 = type metadata accessor for Dictionary(0LL, &type metadata for DNSRecords.PTR, v14, v15);
  swift_bridgeObjectRetain(v12);
  uint64_t v17 = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v16);
  Sequence.forEach(_:)(sub_1002B3478, v48, v16, v17);
  swift_bridgeObjectRelease(v57[0]);
  uint64_t v19 = v63[0];
  uint64_t v20 = v61[0];
  if (!*(void *)(v63[0] + 16LL) || !*(void *)(v61[0] + 16LL)) {
    goto LABEL_13;
  }
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v22 = static os_log_type_t.error.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc(22LL, -1LL);
    uint64_t v24 = swift_slowAlloc(64LL, -1LL);
    v57[0] = v24;
    *(_DWORD *)uint64_t v23 = 136315394;
    swift_beginAccess(v63, v56, 0LL, 0LL);
    uint64_t v19 = v63[0];
    swift_bridgeObjectRetain(v63[0]);
    uint64_t v26 = Array.description.getter(v25, &type metadata for DNSRecords.Identifier);
    unint64_t v28 = v27;
    swift_bridgeObjectRelease(v19);
    uint64_t v54 = sub_10000235C(v26, v28, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
    swift_bridgeObjectRelease(v28);
    *(_WORD *)(v23 + 12) = 2080;
    swift_beginAccess(v61, &v54, 0LL, 0LL);
    uint64_t v20 = v61[0];
    swift_bridgeObjectRetain(v61[0]);
    uint64_t v30 = Array.description.getter(v29, &type metadata for DNSRecords.PTR);
    unint64_t v32 = v31;
    swift_bridgeObjectRelease(v20);
    uint64_t v53 = sub_10000235C(v30, v32, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
    swift_bridgeObjectRelease(v32);
    _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "Failed to recover browses: %s, advertises: %s",  (uint8_t *)v23,  0x16u);
    swift_arrayDestroy(v24, 2LL, &type metadata for Any[8]);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  uint64_t v33 = *(void *)(v19 + 16);
  if (v33)
  {
    swift_bridgeObjectRetain(v19);
    uint64_t v34 = (unsigned __int8 *)(v19 + 49);
    do
    {
      uint64_t v35 = *(void *)(v34 - 17);
      uint64_t v36 = *(void *)(v34 - 9);
      __int16 v37 = *(v34 - 1);
      __int16 v38 = *v34;
      v34 += 24;
      __int16 v39 = v37 | (v38 << 8);
      swift_bridgeObjectRetain(v36);
      sub_1002A90DC(v35, v36, v39);
      swift_bridgeObjectRelease(v36);
      --v33;
    }

    while (v33);
    swift_bridgeObjectRelease(v19);
  }

  uint64_t v40 = *(void *)(v20 + 16);
  if (v40)
  {
    swift_bridgeObjectRetain(v20);
    uint64_t v41 = (char *)(v20 + 65);
    do
    {
      char v42 = *v41;
      char v43 = *(v41 - 1);
      uint64_t v44 = *(void *)(v41 - 9);
      uint64_t v45 = *(void *)(v41 - 17);
      uint64_t v46 = *(void *)(v41 - 25);
      v57[0] = *(void *)(v41 - 33);
      v57[1] = v46;
      v57[2] = v45;
      v57[3] = v44;
      char v58 = v43;
      char v59 = v42;
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRetain(v44);
      sub_1002A91A0((uint64_t)v57);
      swift_bridgeObjectRelease(v44);
      swift_bridgeObjectRelease(v46);
      v41 += 40;
      --v40;
    }

    while (v40);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease_n(v20, 2LL);
  }

  else
  {
LABEL_13:
    swift_bridgeObjectRelease(v19);
    *(void *)&double result = swift_bridgeObjectRelease(v20).n128_u64[0];
  }

  return result;
}

uint64_t sub_1002A8760(uint64_t *a1, void **a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  char v6 = *((_BYTE *)a1 + 16);
  char v7 = *((_BYTE *)a1 + 17);
  uint64_t result = sub_1002A885C(1LL);
  if (v2)
  {
    uint64_t v9 = *a2;
    swift_bridgeObjectRetain(v4);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
    *a2 = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v9 = sub_1002CA8E8(0LL, v9[2] + 1LL, 1, v9);
      *a2 = v9;
    }

    unint64_t v12 = v9[2];
    unint64_t v11 = v9[3];
    if (v12 >= v11 >> 1)
    {
      uint64_t v9 = sub_1002CA8E8((void *)(v11 > 1), v12 + 1, 1, v9);
      *a2 = v9;
    }

    v9[2] = v12 + 1;
    uint64_t v13 = &v9[3 * v12];
    v13[4] = v5;
    v13[5] = v4;
    *((_BYTE *)v13 + 48) = v6;
    *((_BYTE *)v13 + 49) = v7;
    return swift_errorRelease();
  }

  return result;
}

uint64_t sub_1002A885C(uint64_t a1)
{
  uint64_t v4 = *(void *)(*(void *)v1 + 80LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 88LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v3 + 8),  v4,  &protocol requirements base descriptor for P2PControls);
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  unint64_t v8 = (char *)&v19[-1] - v7;
  uint64_t v9 = *(void *)(v1 + qword_10040E9F8);
  swift_unownedRetainStrong(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))( v8,  v9 + *(void *)(*(void *)v9 + 96LL),  AssociatedTypeWitness);
  swift_release(v9);
  DNSRecords.Identifier.keyData.getter( *(void *)(v1 + qword_10040EA00),  *(void *)(v1 + qword_10040EA00 + 8),  *(_BYTE *)(v1 + qword_10040EA00 + 16));
  uint64_t v11 = v10;
  unint64_t v13 = v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v3,  v4,  AssociatedTypeWitness,  &protocol requirements base descriptor for AWDLController,  &associated conformance descriptor for AWDLController.P2PControls.Driver: AWDLWiFiDriver);
  uint64_t v15 = v18;
  (*(void (**)(uint64_t, uint64_t, unint64_t, void, unint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 128))( a1,  v11,  v13,  0LL,  0xF000000000000000LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
  if (!v15)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
    return sub_1000208D8(v11, v13);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  sub_1000208D8(v11, v13);
  uint64_t v21 = v15;
  swift_errorRetain(v15);
  uint64_t v16 = sub_100002274((uint64_t *)&unk_10040C5B0);
  if (v20 == 1)
  {
    if (v19[0] == 2) {
      goto LABEL_9;
    }
  }

  else
  {
    if (!v20)
    {
      if (LODWORD(v19[0]) != 6) {
        return swift_errorRelease(v21);
      }
LABEL_9:
      swift_errorRelease(v15);
      return swift_errorRelease(v21);
    }

    sub_10007030C(v19[0], v19[1], v20);
  }

  return swift_errorRelease(v21);
}

uint64_t sub_1002A8A74(uint64_t *a1, void **a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v6 = a1[3];
  char v8 = *((_BYTE *)a1 + 32);
  char v9 = *((_BYTE *)a1 + 33);
  uint64_t result = sub_1002A8B98(1u);
  if (v2)
  {
    uint64_t v16 = v5;
    uint64_t v11 = *a2;
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
    *a2 = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v11 = sub_1002CAA08(0LL, v11[2] + 1LL, 1, v11);
      *a2 = v11;
    }

    unint64_t v14 = v11[2];
    unint64_t v13 = v11[3];
    if (v14 >= v13 >> 1)
    {
      uint64_t v11 = sub_1002CAA08((void *)(v13 > 1), v14 + 1, 1, v11);
      *a2 = v11;
    }

    v11[2] = v14 + 1;
    uint64_t v15 = &v11[5 * v14];
    v15[4] = v16;
    v15[5] = v4;
    v15[6] = v7;
    v15[7] = v6;
    *((_BYTE *)v15 + 64) = v8;
    *((_BYTE *)v15 + 65) = v9;
    return swift_errorRelease();
  }

  return result;
}

uint64_t sub_1002A8B98(unsigned int a1)
{
  unsigned int v58 = a1;
  uint64_t v2 = *(void *)(*(void *)v1 + 88LL);
  uint64_t v55 = *(void *)(*(void *)v1 + 80LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v2 + 8),  v55,  &protocol requirements base descriptor for P2PControls);
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v54 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v50 - v6;
  uint64_t v8 = *(void *)(v1 + qword_10040EB18);
  swift_unownedRetainStrong(v8);
  uint64_t v9 = v8 + *(void *)(*(void *)v8 + 96LL);
  uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v51(v7, v9, AssociatedTypeWitness);
  uint64_t v52 = v8;
  swift_release(v8);
  uint64_t v53 = v1;
  __int128 v10 = *(_OWORD *)(v1 + qword_10040EB20 + 16);
  __int128 v67 = *(_OWORD *)(v1 + qword_10040EB20);
  __int128 v68 = v10;
  __int16 v69 = *(_WORD *)(v1 + qword_10040EB20 + 32);
  DNSRecords.PTR.keyData.getter();
  uint64_t v12 = v11;
  unint64_t v14 = v13;
  DNSRecords.PTR.valueData.getter();
  uint64_t v16 = v15;
  unint64_t v18 = v17;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v56,  v55,  AssociatedTypeWitness,  &protocol requirements base descriptor for AWDLController,  &associated conformance descriptor for AWDLController.P2PControls.Driver: AWDLWiFiDriver);
  uint64_t v20 = v57;
  char v56 = *(void (**)(void, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))(AssociatedConformanceWitness + 128);
  uint64_t v57 = AssociatedConformanceWitness;
  v56(v58, v12, v14, v16, v18, AssociatedTypeWitness);
  if (!v20)
  {
    uint64_t v55 = 0LL;
    uint64_t v50 = *(void (**)(char *, uint64_t))(v4 + 8);
    v50(v7, AssociatedTypeWitness);
    sub_100020B40(v16, v18);
    sub_1000208D8(v12, v14);
    uint64_t v23 = (char *)AssociatedTypeWitness;
    uint64_t v24 = v54;
    goto LABEL_10;
  }

  uint64_t v21 = *(void (**)(char *, uint64_t))(v4 + 8);
  v21(v7, AssociatedTypeWitness);
  sub_100020B40(v16, v18);
  sub_1000208D8(v12, v14);
  uint64_t v70 = v20;
  swift_errorRetain();
  uint64_t v22 = sub_100002274((uint64_t *)&unk_10040C5B0);
  uint64_t v23 = (char *)AssociatedTypeWitness;
  if (v60 != 1)
  {
    uint64_t v24 = v54;
    if (!v60)
    {
      if (LODWORD(v59[0]) != 6) {
        return swift_errorRelease();
      }
      goto LABEL_9;
    }

    sub_10007030C(v59[0], v59[1], v60);
    return swift_errorRelease();
  }

  uint64_t v24 = v54;
  if (v59[0] != 2) {
    return swift_errorRelease();
  }
LABEL_9:
  uint64_t v50 = v21;
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v55 = 0LL;
LABEL_10:
  if ((v58 & 1) != 0)
  {
    uint64_t v62 = 0LL;
    memset(v61, 0, sizeof(v61));
    uint64_t v25 = *(void *)(v53 + qword_10040EB28 + 8);
    uint64_t v26 = *(void *)(v53 + qword_10040EB28 + 16);
    uint64_t v27 = *(void *)(v53 + qword_10040EB28 + 24);
    uint64_t v28 = *(void *)(v53 + qword_10040EB28 + 40);
    unint64_t v29 = *(void *)(v53 + qword_10040EB28 + 48);
    unint64_t v30 = *(unsigned __int8 *)(v53 + qword_10040EB28 + 32) | ((unint64_t)*(unsigned __int8 *)(v53 + qword_10040EB28 + 33) << 8);
    v63[0] = *(void *)(v53 + qword_10040EB28);
    v63[1] = v25;
    void v63[2] = v26;
    v63[3] = v27;
    v63[4] = v30;
    v63[5] = v28;
    v63[6] = v29;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v27);
    sub_100020AFC(v28, v29);
    uint64_t v31 = v55;
    sub_1002B0400((uint64_t)v61, (uint64_t)v63);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v25);
    uint64_t result = sub_1000208D8(v28, v29);
    if (v31) {
      return result;
    }
    goto LABEL_16;
  }

  uint64_t v54 = v23;
  uint64_t v33 = *(void *)(v53 + qword_10040EB28 + 8);
  uint64_t v34 = *(void *)(v53 + qword_10040EB28 + 16);
  uint64_t v35 = *(void *)(v53 + qword_10040EB28 + 24);
  uint64_t v36 = *(void *)(v53 + qword_10040EB28 + 40);
  unint64_t v37 = *(void *)(v53 + qword_10040EB28 + 48);
  unint64_t v38 = *(unsigned __int8 *)(v53 + qword_10040EB28 + 32) | ((unint64_t)*(unsigned __int8 *)(v53
                                                                                                 + qword_10040EB28
                                                                                                 + 33) << 8);
  v64[0] = *(void *)(v53 + qword_10040EB28);
  v64[1] = v33;
  v64[2] = v34;
  v64[3] = v35;
  v64[4] = v38;
  v64[5] = v36;
  v64[6] = v37;
  memset(v65, 0, sizeof(v65));
  uint64_t v66 = 0LL;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v35);
  sub_100020AFC(v36, v37);
  uint64_t v39 = v55;
  sub_1002B0400((uint64_t)v64, (uint64_t)v65);
  if (!v39)
  {
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease(v33);
    sub_1000208D8(v36, v37);
    uint64_t v23 = v54;
LABEL_16:
    uint64_t v42 = v52;
    swift_unownedRetainStrong(v52);
    v51(v24, v42 + *(void *)(*(void *)v42 + 96LL), (uint64_t)v23);
    swift_release(v42);
    uint64_t v43 = DNSRecords.SRV.keyData.getter();
    unint64_t v45 = v44;
    DNSRecords.SRV.valueData.getter();
    uint64_t v47 = v46;
    unint64_t v49 = v48;
    ((void (*)(void, uint64_t, unint64_t, uint64_t, unint64_t, char *, uint64_t))v56)( v58 & 1,  v43,  v45,  v46,  v48,  v23,  v57);
    v50(v24, (uint64_t)v23);
    sub_100020B40(v47, v49);
    uint64_t v40 = v43;
    unint64_t v41 = v45;
    return sub_1000208D8(v40, v41);
  }

  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRelease(v33);
  uint64_t v40 = v36;
  unint64_t v41 = v37;
  return sub_1000208D8(v40, v41);
}

uint64_t sub_1002A90DC(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v4 = *v3;
  v12[0] = a1;
  v12[1] = a2;
  __int16 v13 = a3 & 0xFF01;
  swift_beginAccess((char *)v3 + qword_10040E960, v11, 33LL, 0LL);
  uint64_t v6 = type metadata accessor for AWDLDiscoveryEngine.Browse(255LL, *(void *)(v4 + 80), *(void *)(v4 + 88), v5);
  unint64_t v7 = sub_100004DEC();
  uint64_t v8 = type metadata accessor for Dictionary(0LL, &type metadata for DNSRecords.Identifier, v6, v7);
  Dictionary.removeValue(forKey:)(v12, v8);
  swift_endAccess(v11);
  uint64_t result = sub_1002A7FB8();
  uint64_t v10 = v14;
  if (v14)
  {
    sub_1002AC9A4();
    return swift_release(v10);
  }

  return result;
}

uint64_t sub_1002A91A0(uint64_t a1)
{
  uint64_t v2 = *v1;
  __int128 v3 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v3;
  __int16 v12 = *(_WORD *)(a1 + 32);
  swift_beginAccess((char *)v1 + qword_10040E968[0], v10, 33LL, 0LL);
  uint64_t v5 = type metadata accessor for AWDLDiscoveryEngine.Advertise(255LL, *(void *)(v2 + 80), *(void *)(v2 + 88), v4);
  unint64_t v6 = sub_100004E30();
  uint64_t v7 = type metadata accessor for Dictionary(0LL, &type metadata for DNSRecords.PTR, v5, v6);
  Dictionary.removeValue(forKey:)(v11, v7);
  swift_endAccess(v10);
  uint64_t result = sub_1002A7FB8();
  uint64_t v9 = v13;
  if (v13)
  {
    sub_1002AD9C4();
    return swift_release(v9);
  }

  return result;
}

void sub_1002A9260()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  unint64_t v6 = (uint64_t *)((char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v8 = (void *)*v7;
  *unint64_t v6 = *v7;
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(uint64_t *, uint64_t))(v4 + 8))(v6, v3);
  if ((v8 & 1) != 0)
  {
    uint64_t v10 = (void *)((char *)v1 + qword_100410B70);
    swift_beginAccess((char *)v1 + qword_100410B70, v43, 0LL, 0LL);
    uint64_t v11 = *v10;
    uint64_t v12 = *(void *)(v2 + 80);
    uint64_t v13 = *(void *)(v2 + 88);
    uint64_t v15 = type metadata accessor for AWDLDiscoveryEngine.DatapathInitiator(0LL, v12, v13, v14);
    unint64_t v16 = sub_100004E30();
    v42[0] = v11;
    uint64_t v17 = type metadata accessor for Dictionary.Keys(0LL, &type metadata for DNSRecords.PTR, v15, v16);
    swift_bridgeObjectRetain(v11);
    uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v17);
    uint64_t v19 = Array.init<A>(_:)(v42, &type metadata for DNSRecords.PTR, v17, WitnessTable);
    v42[0] = v19;
    uint64_t v20 = sub_100002274((uint64_t *)&unk_10040ED00);
    uint64_t v21 = swift_getWitnessTable(&protocol conformance descriptor for [A], v20);
    Sequence.forEach(_:)(sub_1002B34F0, v1, v20, v21);
    swift_bridgeObjectRelease(v19);
    uint64_t v22 = (void *)((char *)v1 + qword_10040E960);
    swift_beginAccess((char *)v1 + qword_10040E960, v42, 0LL, 0LL);
    uint64_t v23 = *v22;
    uint64_t v25 = type metadata accessor for AWDLDiscoveryEngine.Browse(0LL, v12, v13, v24);
    unint64_t v26 = sub_100004DEC();
    v41[0] = v23;
    uint64_t v27 = type metadata accessor for Dictionary.Keys(0LL, &type metadata for DNSRecords.Identifier, v25, v26);
    swift_bridgeObjectRetain(v23);
    uint64_t v28 = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v27);
    uint64_t v29 = Array.init<A>(_:)(v41, &type metadata for DNSRecords.Identifier, v27, v28);
    v41[0] = v29;
    uint64_t v30 = sub_100002274((uint64_t *)&unk_10040ED10);
    uint64_t v31 = swift_getWitnessTable(&protocol conformance descriptor for [A], v30);
    Sequence.forEach(_:)(sub_1002B2E18, v1, v30, v31);
    swift_bridgeObjectRelease(v29);
    unint64_t v32 = (void *)((char *)v1 + qword_10040E968[0]);
    swift_beginAccess((char *)v1 + qword_10040E968[0], v41, 0LL, 0LL);
    uint64_t v33 = *v32;
    uint64_t v35 = type metadata accessor for AWDLDiscoveryEngine.Advertise(0LL, v12, v13, v34);
    uint64_t v40 = v33;
    uint64_t v36 = type metadata accessor for Dictionary.Keys(0LL, &type metadata for DNSRecords.PTR, v35, v16);
    swift_bridgeObjectRetain(v33);
    uint64_t v37 = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v36);
    uint64_t v38 = Array.init<A>(_:)(&v40, &type metadata for DNSRecords.PTR, v36, v37);
    uint64_t v40 = v38;
    Sequence.forEach(_:)(sub_1002B2E50, v1, v20, v21);
    swift_bridgeObjectRelease(v38);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1002A95A0(uint64_t a1)
{
  uint64_t v2 = *v1;
  __int128 v3 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v3;
  __int16 v12 = *(_WORD *)(a1 + 32);
  swift_beginAccess((char *)v1 + qword_100410B70, v10, 33LL, 0LL);
  uint64_t v5 = type metadata accessor for AWDLDiscoveryEngine.DatapathInitiator( 255LL,  *(void *)(v2 + 80),  *(void *)(v2 + 88),  v4);
  unint64_t v6 = sub_100004E30();
  uint64_t v7 = type metadata accessor for Dictionary(0LL, &type metadata for DNSRecords.PTR, v5, v6);
  Dictionary.removeValue(forKey:)(v11, v7);
  uint64_t result = swift_endAccess(v10);
  uint64_t v9 = v13;
  if (v13)
  {
    sub_1002AF35C();
    return swift_release(v9);
  }

  return result;
}

double sub_1002A964C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __int128 v3 = (void *)((char *)v0 + qword_10040E960);
  swift_beginAccess((char *)v0 + qword_10040E960, v27, 0LL, 0LL);
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(v2 + 80);
  uint64_t v6 = *(void *)(v2 + 88);
  uint64_t v8 = type metadata accessor for AWDLDiscoveryEngine.Browse(0LL, v5, v6, v7);
  unint64_t v9 = sub_100004DEC();
  v26[0] = NANBitmap.Channel.operatingClass.getter(v4);
  uint64_t v23 = v5;
  uint64_t v24 = v6;
  uint64_t v10 = type metadata accessor for Dictionary.Values(0LL, &type metadata for DNSRecords.Identifier, v8, v9);
  swift_bridgeObjectRetain(v26[0]);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v10);
  Sequence.forEach(_:)(sub_1002B3494, v22, v10, WitnessTable);
  swift_bridgeObjectRelease(v26[0]);
  __int16 v12 = (void *)((char *)v1 + qword_10040E968[0]);
  swift_beginAccess((char *)v1 + qword_10040E968[0], v26, 0LL, 0LL);
  uint64_t v13 = *v12;
  uint64_t v15 = type metadata accessor for AWDLDiscoveryEngine.Advertise(0LL, v5, v6, v14);
  unint64_t v16 = sub_100004E30();
  uint64_t v17 = NANBitmap.Channel.operatingClass.getter(v13);
  uint64_t v25 = v17;
  v21[2] = v5;
  v21[3] = v6;
  uint64_t v18 = type metadata accessor for Dictionary.Values(0LL, &type metadata for DNSRecords.PTR, v15, v16);
  swift_bridgeObjectRetain(v17);
  uint64_t v19 = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v18);
  Sequence.forEach(_:)(sub_1002B34AC, v21, v18, v19);
  *(void *)&double result = swift_bridgeObjectRelease(v25).n128_u64[0];
  return result;
}

double sub_1002A980C@<D0>(uint64_t a1@<X8>)
{
  return sub_1002A9844( (uint64_t)sub_1002B3424,  (void (*)(uint64_t *__return_ptr, uint64_t, _BYTE *, uint64_t, uint64_t))&Sequence.max(by:),  (void (*)(char *, char *))sub_1002B3440,  a1);
}

double sub_1002A9828@<D0>(uint64_t a1@<X8>)
{
  return sub_1002A9844( (uint64_t)sub_1002B34D8,  (void (*)(uint64_t *__return_ptr, uint64_t, _BYTE *, uint64_t, uint64_t))&Sequence.min(by:),  (void (*)(char *, char *))sub_1002B34C4,  a1);
}

double sub_1002A9844@<D0>( uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, uint64_t, _BYTE *, uint64_t, uint64_t)@<X1>, void (*a3)(char *, char *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *v4;
  uint64_t v10 = (uint64_t *)((char *)v4 + qword_10040E960);
  swift_beginAccess(v10, v27, 0LL, 0LL);
  uint64_t v11 = *v10;
  uint64_t v12 = *(void *)(v9 + 80);
  uint64_t v13 = *(void *)(v9 + 88);
  uint64_t v15 = type metadata accessor for AWDLDiscoveryEngine.Browse(0LL, v12, v13, v14);
  unint64_t v16 = sub_100004DEC();
  uint64_t v26 = NANBitmap.Channel.operatingClass.getter(v11);
  uint64_t v24 = v12;
  uint64_t v25 = v13;
  uint64_t v17 = type metadata accessor for Dictionary.Values(0LL, &type metadata for DNSRecords.Identifier, v15, v16);
  swift_bridgeObjectRetain(v26);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v17);
  a2(&v28, a1, v23, v17, WitnessTable);
  swift_bridgeObjectRelease(v26);
  uint64_t v26 = v28;
  v22[2] = v12;
  v22[3] = v13;
  type metadata accessor for Optional(0LL, v15);
  uint64_t v19 = type metadata accessor for DispatchTimeInterval(0LL);
  sub_10027EA2C(a3, (uint64_t)v22, (uint64_t)&type metadata for Never, v19, v20, a4);
  *(void *)&double result = swift_release(v26).n128_u64[0];
  return result;
}

uint64_t sub_1002A99B4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for DispatchTime(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v6);
  uint64_t v10 = &v18[-v9];
  uint64_t v11 = *a1;
  uint64_t v12 = *a2;
  uint64_t v13 = v11 + qword_10040EA28;
  swift_beginAccess(v11 + qword_10040EA28, v19, 0LL, 0LL);
  uint64_t v14 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v14(v10, v13, v4);
  uint64_t v15 = v12 + qword_10040EA28;
  swift_beginAccess(v12 + qword_10040EA28, v18, 0LL, 0LL);
  v14(v8, v15, v4);
  LOBYTE(v15) = static DispatchTime.< infix(_:_:)(v10, v8);
  unint64_t v16 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v16(v8, v4);
  v16(v10, v4);
  return v15 & 1;
}

uint64_t sub_1002A9AF0(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for DispatchTime(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin();
  uint64_t v7 = &v14[-v6 - 8];
  uint64_t v8 = *a1;
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v9 = v8 + qword_10040EA28;
  __n128 v10 = swift_beginAccess(v8 + qword_10040EA28, v14, 0LL, 0LL);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))(v5, v9, v2, v10);
  DispatchTime.distance(to:)(v7);
  uint64_t v11 = *(void (**)(char *, uint64_t))(v3 + 8);
  v11(v5, v2);
  return ((uint64_t (*)(char *, uint64_t))v11)(v7, v2);
}

uint64_t sub_1002A9C04()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)((char *)v0 + qword_10040E960);
  swift_beginAccess((char *)v0 + qword_10040E960, v28, 0LL, 0LL);
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(v2 + 80);
  uint64_t v6 = *(void *)(v2 + 88);
  uint64_t v8 = type metadata accessor for AWDLDiscoveryEngine.Browse(0LL, v5, v6, v7);
  unint64_t v9 = sub_100004DEC();
  v27[0] = NANBitmap.Channel.operatingClass.getter(v4);
  uint64_t v24 = v5;
  uint64_t v25 = v6;
  uint64_t v10 = type metadata accessor for Dictionary.Values(0LL, &type metadata for DNSRecords.Identifier, v8, v9);
  swift_bridgeObjectRetain(v27[0]);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v10);
  LOBYTE(v4) = Sequence.contains(where:)(sub_1002B3368, v23, v10, WitnessTable);
  swift_bridgeObjectRelease(v27[0]);
  if ((v4 & 1) != 0)
  {
    char v12 = 1;
  }

  else
  {
    uint64_t v13 = (void *)((char *)v1 + qword_10040E968[0]);
    swift_beginAccess((char *)v1 + qword_10040E968[0], v27, 0LL, 0LL);
    uint64_t v14 = *v13;
    uint64_t v16 = type metadata accessor for AWDLDiscoveryEngine.Advertise(0LL, v5, v6, v15);
    unint64_t v17 = sub_100004E30();
    uint64_t v18 = NANBitmap.Channel.operatingClass.getter(v14);
    uint64_t v26 = v18;
    __chkstk_darwin();
    v22[2] = v5;
    v22[3] = v6;
    uint64_t v19 = type metadata accessor for Dictionary.Values(0LL, &type metadata for DNSRecords.PTR, v16, v17);
    swift_bridgeObjectRetain(v18);
    uint64_t v20 = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v19);
    char v12 = Sequence.contains(where:)(sub_1002B3390, v22, v19, v20);
    swift_bridgeObjectRelease(v26);
  }

  return v12 & 1;
}

double sub_1002A9E08()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)((char *)v0 + qword_10040E960);
  swift_beginAccess((char *)v0 + qword_10040E960, v23, 0LL, 0LL);
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(v2 + 80);
  uint64_t v6 = *(void *)(v2 + 88);
  uint64_t v8 = type metadata accessor for AWDLDiscoveryEngine.Browse(0LL, v5, v6, v7);
  unint64_t v9 = sub_100004DEC();
  v22[0] = NANBitmap.Channel.operatingClass.getter(v4);
  uint64_t v10 = type metadata accessor for Dictionary.Values(0LL, &type metadata for DNSRecords.Identifier, v8, v9);
  swift_bridgeObjectRetain(v22[0]);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v10);
  Sequence.forEach(_:)(sub_1002B33EC, v1, v10, WitnessTable);
  swift_bridgeObjectRelease(v22[0]);
  char v12 = (void *)((char *)v1 + qword_10040E968[0]);
  swift_beginAccess((char *)v1 + qword_10040E968[0], v22, 0LL, 0LL);
  uint64_t v13 = *v12;
  uint64_t v15 = type metadata accessor for AWDLDiscoveryEngine.Advertise(0LL, v5, v6, v14);
  unint64_t v16 = sub_100004E30();
  void v20[3] = v6;
  uint64_t v21 = NANBitmap.Channel.operatingClass.getter(v13);
  v20[2] = v5;
  uint64_t v17 = type metadata accessor for Dictionary.Values(0LL, &type metadata for DNSRecords.PTR, v15, v16);
  swift_bridgeObjectRetain(v21);
  uint64_t v18 = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v17);
  Sequence.forEach(_:)(sub_1002B3404, v20, v17, v18);
  *(void *)&double result = swift_bridgeObjectRelease(v21).n128_u64[0];
  return result;
}

void sub_1002A9FC4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = qword_10040EA18;
  uint64_t v3 = qword_10040EA20;
  *(_BYTE *)(v1 + qword_10040EA20) = *(_BYTE *)(*a1 + qword_10040EA18);
  uint64_t v4 = swift_retain_n(v1, 4LL);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc(24LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v8;
    *(_DWORD *)uint64_t v7 = 136315650;
    uint64_t v9 = *(void *)(v1 + qword_10040EA00);
    unint64_t v10 = *(void *)(v1 + qword_10040EA00 + 8);
    swift_bridgeObjectRetain(v10);
    uint64_t v13 = sub_10000235C(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
    swift_bridgeObjectRelease(v10);
    *(_WORD *)(v7 + 12) = 1024;
    int v11 = *(unsigned __int8 *)(v1 + v2);
    swift_release(v1);
    LODWORD(v13) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, (char *)&v13 + 4);
    swift_release(v1);
    *(_WORD *)(v7 + 18) = 1024;
    int v12 = *(unsigned __int8 *)(v1 + v3);
    swift_release(v1);
    LODWORD(v13) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, (char *)&v13 + 4);
    swift_release(v1);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "triggeredTTRForServiceAcrossSleep BService:%s sleep/wake:%{BOOL}d alreadyTTR:%{BOOL}d",  (uint8_t *)v7,  0x18u);
    swift_arrayDestroy(v8, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v1, 4LL);
  }

uint64_t sub_1002AA1C8()
{
  uint64_t v1 = v0 + qword_100410B60;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_unownedRelease(*(void *)(v0 + qword_100410B68));
  swift_bridgeObjectRelease(*(void *)(v0 + qword_10040E960));
  swift_bridgeObjectRelease(*(void *)(v0 + qword_10040E968));
  swift_bridgeObjectRelease(*(void *)(v0 + qword_100410B70));
  return v0;
}

uint64_t sub_1002AA24C()
{
  return sub_1002B1484((void (*)(void))sub_1002AA1C8);
}

uint64_t type metadata accessor for AWDLDiscoveryEngine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AWDLDiscoveryEngine);
}

uint64_t sub_1002AA264(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = "\b";
    void v5[2] = &unk_10035F480;
    v5[3] = &unk_10035F498;
    v5[4] = &unk_10035F4B0;
    v5[5] = &unk_10035F4B0;
    v5[6] = &unk_10035F4B0;
    uint64_t result = type metadata accessor for DispatchTime(319LL);
    if (v4 <= 0x3F)
    {
      v5[7] = *(void *)(result - 8) + 64LL;
      uint64_t result = swift_initClassMetadata2(a1, 0LL, 8LL, v5, a1 + 96);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_1002AA318(uint64_t a1, uint64_t a2, unsigned int a3, void *a4)
{
  unsigned int v43 = a3 >> 8;
  uint64_t v9 = *v4;
  uint64_t v10 = *(uint64_t *)((char *)v4 + qword_100410B68);
  swift_unownedRetainStrong(v10);
  swift_beginAccess(v10 + *(void *)(*(void *)v10 + 720LL), v46, 33LL, 0LL);
  unsigned int v11 = a3 & 0xFFFFFF01;
  swift_bridgeObjectRetain(a2);
  sub_10032D3C0((uint64_t)&v47, a1, a2, v11);
  swift_endAccess(v46);
  swift_release(v10);
  swift_bridgeObjectRelease(v48);
  uint64_t v12 = *(void *)(v9 + 80);
  uint64_t v13 = *(void *)(v9 + 88);
  uint64_t v14 = a1;
  uint64_t v16 = type metadata accessor for AWDLDiscoveryEngine.Browse(0LL, v12, v13, v15);
  swift_unownedRetainStrong(v10);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  swift_bridgeObjectRetain(a2);
  uint64_t v17 = sub_1002AF948(v10, v14, a2, v11);
  uint64_t v18 = *(void *)(v17 + qword_10040EA08);
  *(void *)(v17 + qword_10040EA08) = a4;
  swift_unknownObjectRelease(v18);
  uint64_t v51 = v17;
  uint64_t v47 = v14;
  uint64_t v48 = a2;
  char v49 = v11;
  char v50 = v43;
  uint64_t v19 = (char *)v4 + qword_10040E960;
  swift_beginAccess((char *)v4 + qword_10040E960, v46, 33LL, 0LL);
  unint64_t v20 = sub_100004DEC();
  uint64_t v21 = type metadata accessor for Dictionary(0LL, &type metadata for DNSRecords.Identifier, v16, v20);
  swift_bridgeObjectRetain(a2);
  swift_unknownObjectRetain(a4);
  swift_retain();
  Dictionary.subscript.setter(&v51, &v47, v21);
  swift_endAccess(v46);
  sub_1002A7FB8();
  uint64_t v22 = v41;
  sub_1002AA84C();
  if (v41)
  {
    swift_bridgeObjectRetain(a2);
    swift_errorRetain();
    swift_bridgeObjectRetain(a2);
    uint64_t v23 = swift_errorRetain();
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v42 = v21;
      uint64_t v26 = swift_slowAlloc(22LL, -1LL);
      uint64_t v39 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v40 = swift_slowAlloc(32LL, -1LL);
      v46[0] = v40;
      *(_DWORD *)uint64_t v26 = 136315394;
      swift_bridgeObjectRetain(a2);
      DNSRecords.Identifier.description.getter(v14, a2, v11);
      log = v24;
      unint64_t v28 = v27;
      swift_bridgeObjectRelease(a2);
      uint64_t v47 = sub_10000235C(v14, v28, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      swift_bridgeObjectRelease_n(a2, 2LL);
      swift_bridgeObjectRelease(v28);
      *(_WORD *)(v26 + 12) = 2112;
      swift_errorRetain();
      os_log_type_t type = v25;
      uint64_t v29 = v19;
      uint64_t v30 = v14;
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError(v22);
      uint64_t v47 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      *uint64_t v39 = v31;
      uint64_t v14 = v30;
      uint64_t v19 = v29;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  log,  type,  "Failed to start browse for %s because %@",  (uint8_t *)v26,  0x16u);
      uint64_t v32 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v39, 1LL, v32);
      swift_slowDealloc(v39, -1LL, -1LL);
      swift_arrayDestroy(v40, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v40, -1LL, -1LL);
      uint64_t v33 = v26;
      uint64_t v21 = v42;
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a2, 2LL);

      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v47 = v14;
    uint64_t v48 = a2;
    char v49 = v11;
    char v50 = v43;
    swift_beginAccess(v19, v46, 33LL, 0LL);
    Dictionary.removeValue(forKey:)(&v47, v21);
    uint64_t v34 = v51;
    swift_endAccess(v46);
    swift_release(v34);
    sub_1002A7FB8();
    swift_getErrorValue(v22, v45, v44);
    id v35 = [a4 subscribeFailedToStartWithError:Error.apiError.getter(v44[1])];
    swift_willThrow(v35);
    swift_release(v17);
  }

  else
  {
    swift_bridgeObjectRetain(a2);
    swift_release(v17);
  }

  return v14;
}

uint64_t sub_1002AA7EC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return sub_1002AF948(a1, a2, a3, a4 & 0xFFFFFF01);
}

void sub_1002AA84C()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DispatchTime(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  os_log_type_t v6 = (char *)&v29[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (uint64_t *)((char *)&v29[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unsigned int v11 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v12 = (void *)*v11;
  uint64_t *v10 = *v11;
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if ((v12 & 1) != 0)
  {
    sub_1002A885C(1LL);
    if (!v1)
    {
      *(_BYTE *)(v2 + qword_10040EA10) = 1;
      type metadata accessor for P2PTimer(0LL);
      variable initialization expression of AWDLPeer.lastUpdated();
      uint64_t v14 = v2 + qword_10040EA28;
      __n128 v15 = swift_beginAccess(v2 + qword_10040EA28, v29, 33LL, 0LL);
      (*(void (**)(uint64_t, char *, uint64_t, __n128))(v4 + 40))(v14, v6, v3, v15);
      swift_endAccess(v29);
      uint64_t v16 = *(void **)(v2 + qword_10040EA08);
      if (v16) {
        [v16 subscribeStartedWithInstanceID:0];
      }
      uint64_t v17 = swift_retain();
      uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        unint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v21 = swift_slowAlloc(32LL, -1LL);
        v29[0] = v21;
        *(_DWORD *)unint64_t v20 = 136315138;
        uint64_t v22 = sub_1002AFFC0();
        unint64_t v24 = v23;
        uint64_t v30 = sub_10000235C(v22, v23, v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
        swift_release(v2);
        swift_bridgeObjectRelease(v24);
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s was started", v20, 0xCu);
        swift_arrayDestroy(v21, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v21, -1LL, -1LL);
        swift_slowDealloc(v20, -1LL, -1LL);
      }

      else
      {
        swift_release(v2);
      }

      uint64_t v25 = *(void *)(v2 + qword_10040E9F8);
      swift_unownedRetainStrong(v25);
      uint64_t v26 = (uint64_t *)(v25 + *(void *)(*(void *)v25 + 424LL));
      swift_beginAccess(v26, v29, 0LL, 0LL);
      uint64_t v27 = *v26;
      swift_bridgeObjectRetain(v27);
      swift_release(v25);
      sub_1002B2EF0(v27, (void (*)(uint64_t, uint64_t))sub_1002B3308);
      swift_bridgeObjectRelease(v27);
    }
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1002AAB78()
{
  uint64_t v1 = *v0;
  uint64_t v2 = DNSRecords.Identifier.assistedDiscovery.unsafeMutableAddressor();
  uint64_t v4 = *(void *)v2;
  uint64_t v3 = *((void *)v2 + 1);
  char v5 = v2[16];
  char v6 = v2[17];
  uint64_t v7 = (uint64_t *)((char *)v0 + qword_10040E960);
  swift_beginAccess(v7, &v22, 32LL, 0LL);
  uint64_t v8 = *v7;
  v18[0] = v4;
  v18[1] = v3;
  char v19 = v5;
  char v20 = v6;
  uint64_t v10 = type metadata accessor for AWDLDiscoveryEngine.Browse(0LL, *(void *)(v1 + 80), *(void *)(v1 + 88), v9);
  sub_100004DEC();
  swift_bridgeObjectRetain(v3);
  Dictionary.subscript.getter(v18, v8, &type metadata for DNSRecords.Identifier, v10);
  swift_bridgeObjectRelease(v3);
  uint64_t v11 = v21;
  if (!v21)
  {
    swift_endAccess(&v22);
LABEL_7:
    uint64_t v24 = 0LL;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    return sub_1000225EC((uint64_t)&v22, &qword_10040F100);
  }

  swift_endAccess(&v22);
  uint64_t v12 = *(void *)(v11 + qword_10040EA08);
  swift_unknownObjectRetain(v12);
  swift_release(v11);
  if (!v12) {
    goto LABEL_7;
  }
  v18[0] = v12;
  uint64_t v13 = sub_100002274((uint64_t *)&unk_10040ECE0);
  uint64_t v14 = sub_100002274((uint64_t *)&unk_10040F120);
  if ((swift_dynamicCast(&v22, v18, v13, v14, 6LL) & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v15 = *((void *)&v23 + 1);
  if (*((void *)&v23 + 1))
  {
    uint64_t v16 = v24;
    sub_100021104(&v22, *((uint64_t *)&v23 + 1));
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
    return sub_100002AC4(&v22);
  }

  return sub_1000225EC((uint64_t)&v22, &qword_10040F100);
}

void sub_1002AACFC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v150 = type metadata accessor for AWDLPeer.AdvertisedService(0LL);
  uint64_t v158 = *(void *)(v150 - 8);
  __chkstk_darwin();
  uint64_t v147 = (char *)&v144 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v149 = (uint64_t)&v144 - v7;
  __chkstk_darwin();
  uint64_t v151 = (uint64_t *)((char *)&v144 - v8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v144 - v9;
  __chkstk_darwin();
  uint64_t v157 = (uint64_t)&v144 - v11;
  uint64_t v12 = *(void *)(v5 + 80);
  uint64_t v161 = *(void *)(v5 + 88);
  uint64_t v13 = *(void *)(v161 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v13,  v12,  &protocol requirements base descriptor for P2PControls);
  uint64_t v160 = v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v13,  v12,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v16 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v17 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v16,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.PreferencesBacking: PreferencesStorage);
  uint64_t v19 = type metadata accessor for Preferences(0LL, v16, v17, v18);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin();
  __int128 v22 = (char *)&v144 - v21;
  v152 = (int *)type metadata accessor for AWDLPeer(0LL);
  uint64_t v23 = v152[10];
  uint64_t v153 = a1;
  uint64_t v24 = (unsigned __int8 *)(a1 + v23);
  if (*((void *)v24 + 3) >> 60 != 15LL)
  {
    int v25 = *v24;
    if ((*(unsigned __int8 *)AWDLActionFrame.ServiceParameter.Flags.supportsWiFiAwareMigration.unsafeMutableAddressor() & ~v25) == 0)
    {
      uint64_t v26 = *(void *)(v145 + qword_100410B68);
      swift_unownedRetainStrong(v26);
      WiFiInterface.preferences.getter();
      swift_release(v26);
      uint64_t v27 = Preferences.enableUserspaceP2POptions.getter(v19);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
      if ((*(void *)PreferenceDefaults.EnableUserspaceP2POptions.awdlToWiFiAwareMigration.unsafeMutableAddressor() & ~v27) == 0)
      {
        swift_unownedRetainStrong(v26);
        uint64_t v28 = WiFiInterface.capabilities.getter();
        swift_release(v26);
        uint64_t v29 = *WiFiDriverCapabilities.supportsNAN.unsafeMutableAddressor();
        uint64_t v175 = v28;
        uint64_t v180 = v29;
        unint64_t v30 = sub_100270384();
        swift_bridgeObjectRetain_n(v29, 2LL);
        ExtendableOptionSet.formIntersection(_:)( (uint64_t (*)(_BYTE *, void))&v175,  &type metadata for WiFiDriverCapabilities.Kind,  v30);
        uint64_t v31 = v180;
        LOBYTE(v30) = sub_10007990C(v180, v29);
        swift_bridgeObjectRelease(v28);
        swift_bridgeObjectRelease(v29);
        swift_bridgeObjectRelease(v31);
        if ((v30 & 1) != 0) {
          return;
        }
      }
    }
  }

  uint64_t v32 = *(void *)(v153 + v152[20]);
  uint64_t v33 = *(void *)(v32 + 56);
  uint64_t v154 = v32 + 56;
  uint64_t v34 = 1LL << *(_BYTE *)(v32 + 32);
  if (v34 < 64) {
    uint64_t v35 = ~(-1LL << v34);
  }
  else {
    uint64_t v35 = -1LL;
  }
  unint64_t v36 = v35 & v33;
  uint64_t v156 = (uint64_t *)(v145 + qword_10040E960);
  uint64_t v146 = (uint64_t *)(v145 + qword_100410B70);
  int64_t v155 = (unint64_t)(v34 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  uint64_t v159 = v32;
  swift_bridgeObjectRetain(v32);
  int64_t v37 = 0LL;
  uint64_t v38 = (uint64_t)v147;
  char v167 = v10;
LABEL_11:
  uint64_t v170 = a2 + 56;
  uint64_t v166 = a2;
  while (1)
  {
    if (v36)
    {
      uint64_t v162 = (v36 - 1) & v36;
      int64_t v163 = v37;
      unint64_t v48 = __clz(__rbit64(v36)) | (v37 << 6);
      goto LABEL_32;
    }

    int64_t v49 = v37 + 1;
    if (__OFADD__(v37, 1LL))
    {
      __break(1u);
      goto LABEL_63;
    }

    if (v49 >= v155) {
      goto LABEL_60;
    }
    unint64_t v50 = *(void *)(v154 + 8 * v49);
    int64_t v51 = v37 + 1;
    if (!v50)
    {
      int64_t v51 = v37 + 2;
      if (v37 + 2 >= v155) {
        goto LABEL_60;
      }
      unint64_t v50 = *(void *)(v154 + 8 * v51);
      if (!v50)
      {
        int64_t v51 = v37 + 3;
        if (v37 + 3 >= v155) {
          goto LABEL_60;
        }
        unint64_t v50 = *(void *)(v154 + 8 * v51);
        if (!v50) {
          break;
        }
      }
    }

uint64_t sub_1002ABA88(void *a1, uint64_t a2)
{
  id v5 = [objc_allocWithZone(WiFiAwarePublishServiceSpecificInfo) init];
  NSString v6 = String._bridgeToObjectiveC()();
  [v5 setInstanceName:v6];

  if (a1[7])
  {
    uint64_t v8 = a1[11];
    unint64_t v7 = a1[12];
    sub_100020AFC(v8, v7);
    v9.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000208D8(v8, v7);
  }

  else
  {
    v9.super.Class isa = 0LL;
  }

  [v5 setTxtRecordData:v9.super.isa];

  uint64_t v10 = *(void *)(v2 + qword_10040EA08);
  if (v10
    && (uint64_t v19 = *(void *)(v2 + qword_10040EA08),
        swift_unknownObjectRetain(v10),
        uint64_t v11 = sub_100002274((uint64_t *)&unk_10040ECE0),
        uint64_t v12 = sub_100002274((uint64_t *)&unk_10040F120),
        (swift_dynamicCast(&v20, &v19, v11, v12, 6LL) & 1) != 0))
  {
    uint64_t v13 = *((void *)&v21 + 1);
    if (*((void *)&v21 + 1))
    {
      uint64_t v14 = v22;
      sub_100021104(&v20, *((uint64_t *)&v21 + 1));
      uint64_t v15 = *(void (**)(id, uint64_t, uint64_t, uint64_t))(v14 + 16);
      uint64_t v16 = *(unsigned __int8 *)a1 | ((a2 & 0xFFFFFFFFFFFFLL) << 8);
      id v17 = v5;
      v15(v5, v16, v13, v14);

      return sub_100002AC4(&v20);
    }
  }

  else
  {
    uint64_t v22 = 0LL;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
  }

  return sub_1000225EC((uint64_t)&v20, &qword_10040F100);
}

void sub_1002ABC24(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DNSRecords.SRV(0LL);
  __chkstk_darwin();
  NSString v6 = &v25[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  uint64_t v8 = &v25[-v7];
  uint64_t v9 = v1 + qword_100410B98;
  swift_beginAccess(v1 + qword_100410B98, v29, 33LL, 0LL);
  sub_1002B2D90(a1, v9);
  swift_endAccess(v29);
  sub_100057FE8(a1, (uint64_t)v8, type metadata accessor for DNSRecords.SRV);
  sub_100057FE8(a1, (uint64_t)v6, type metadata accessor for DNSRecords.SRV);
  uint64_t v10 = swift_retain();
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  int v13 = v12;
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v14 = swift_slowAlloc(26LL, -1LL);
    uint64_t v27 = swift_slowAlloc(64LL, -1LL);
    v29[0] = v27;
    *(_DWORD *)uint64_t v14 = 136315650;
    int v26 = v13;
    unint64_t v15 = sub_1002B1600();
    unint64_t v17 = v16;
    uint64_t v28 = sub_10000235C(v15, v16, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29);
    swift_release(v2);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v14 + 12) = 2080;
    uint64_t v18 = (uint64_t *)&v8[*(int *)(v4 + 24)];
    uint64_t v20 = *v18;
    unint64_t v19 = v18[1];
    swift_bridgeObjectRetain(v19);
    uint64_t v28 = sub_10000235C(v20, v19, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29);
    swift_bridgeObjectRelease(v19);
    uint64_t v21 = sub_10005802C((uint64_t)v8, type metadata accessor for DNSRecords.SRV);
    *(_WORD *)(v14 + 22) = 512;
    LOWORD(v17) = NWEndpoint.Port.rawValue.getter(v21);
    sub_10005802C((uint64_t)v6, type metadata accessor for DNSRecords.SRV);
    LOWORD(v28) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, (char *)&v28 + 2);
    _os_log_impl( (void *)&_mh_execute_header,  v11,  (os_log_type_t)v26,  "%s updated datapath service info to %s%%%hu",  (uint8_t *)v14,  0x1Au);
    uint64_t v22 = v27;
    swift_arrayDestroy(v27, 2LL, &type metadata for Any[8]);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
    sub_10005802C((uint64_t)v6, type metadata accessor for DNSRecords.SRV);
    swift_release(v2);

    sub_10005802C((uint64_t)v8, type metadata accessor for DNSRecords.SRV);
  }

  uint64_t v23 = *(void **)(v2 + qword_100410BA0);
  if (v23)
  {
    swift_unknownObjectRetain(*(void *)(v2 + qword_100410BA0));
    id v24 = sub_1002B14B4();
    [v23 datapathUpdatedServiceSpecificInfo:v24];

    swift_unknownObjectRelease(v23);
  }

void sub_1002ABF50(void *a1, uint64_t a2)
{
  uint64_t v59 = (uint64_t)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for AWDLPeer(0LL);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v56 - v9;
  id v11 = [objc_allocWithZone(WiFiAwarePublishServiceSpecificInfo) init];
  NSString v12 = String._bridgeToObjectiveC()();
  [v11 setInstanceName:v12];

  if (a1[7])
  {
    uint64_t v14 = a1[11];
    unint64_t v13 = a1[12];
    sub_100020AFC(v14, v13);
    v15.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000208D8(v14, v13);
  }

  else
  {
    v15.super.Class isa = 0LL;
  }

  [v11 setTxtRecordData:v15.super.isa];

  uint64_t v16 = a1[4];
  id v58 = (id)a1[3];
  unint64_t v17 = a2 & 0xFFFFFFFFFFFFLL;
  uint64_t v18 = *(unsigned __int8 *)a1;
  swift_bridgeObjectRetain(v16);
  id v19 = WiFiAddress.apiAddress.getter(v17);
  uint64_t v60 = v2;
  uint64_t v20 = *(void *)(v2 + qword_10040E9F8);
  swift_unownedRetainStrong(v20);
  unint64_t v57 = v17;
  sub_100304FBC(v17, (uint64_t)v10);
  swift_release(v20);
  uint64_t v21 = &v10[*(int *)(v6 + 96)];
  uint64_t v22 = *(void *)v21;
  LOBYTE(v20) = v21[8];
  sub_100057FE8((uint64_t)v10, (uint64_t)v8, type metadata accessor for AWDLPeer);
  if ((v20 & 1) != 0)
  {
    uint64_t v23 = &v8[*(int *)(v6 + 92)];
    uint64_t v22 = *(void *)v23;
    int v24 = v23[8];
    sub_10005802C((uint64_t)v8, type metadata accessor for AWDLPeer);
    sub_10005802C((uint64_t)v10, type metadata accessor for AWDLPeer);
    if (v24) {
      uint64_t v22 = -60LL;
    }
  }

  else
  {
    sub_10005802C((uint64_t)v8, type metadata accessor for AWDLPeer);
    sub_10005802C((uint64_t)v10, type metadata accessor for AWDLPeer);
  }

  id v25 = objc_allocWithZone(&OBJC_CLASS___WiFiAwareDiscoveryResult);
  id v26 = v11;
  NSString v27 = String._bridgeToObjectiveC()();
  LOBYTE(v55) = 0;
  id v28 = objc_msgSend( v25,  "initWithServiceName:serviceSpecificInfo:publishID:subscribeID:publisherAddressKey:datapathSupported:datapathCi pherSuite:fsdFunction:rssi:pairSetupRequired:pairingConfiguration:",  v27,  v26,  v18,  0,  v19,  1,  swift_bridgeObjectRelease(v16).n128_f64[0],  0,  0,  v22,  v55,  0);

  uint64_t v30 = v59;
  uint64_t v29 = v60;
  sub_100057FE8((uint64_t)a1, v59, type metadata accessor for AWDLPeer.AdvertisedService);
  id v31 = v28;
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = swift_slowAlloc(32LL, -1LL);
    id v58 = v26;
    uint64_t v35 = v34;
    uint64_t v56 = swift_slowAlloc(96LL, -1LL);
    uint64_t v62 = v56;
    *(_DWORD *)uint64_t v35 = 136315650;
    uint64_t v36 = WiFiAddress.description.getter(v57);
    unint64_t v38 = v37;
    uint64_t v63 = sub_10000235C(v36, v37, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64);
    swift_bridgeObjectRelease(v38);
    *(_WORD *)(v35 + 12) = 2080;
    uint64_t v39 = *(void *)(v30 + 16);
    uint64_t v40 = *(void *)(v30 + 24);
    uint64_t v41 = *(void *)(v30 + 32);
    char v42 = *(_BYTE *)(v30 + 40);
    char v43 = *(_BYTE *)(v30 + 41);
    uint64_t v63 = *(void *)(v30 + 8);
    v64[0] = v39;
    v64[1] = v40;
    v64[2] = v41;
    char v65 = v42;
    char v66 = v43;
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v41);
    uint64_t v44 = DNSRecords.PTR.description.getter();
    uint64_t v45 = v30;
    unint64_t v47 = v46;
    swift_bridgeObjectRelease(v41);
    swift_bridgeObjectRelease(v39);
    id v61 = (id)sub_10000235C(v44, v47, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62);
    swift_bridgeObjectRelease(v47);
    sub_10005802C(v45, type metadata accessor for AWDLPeer.AdvertisedService);
    *(_WORD *)(v35 + 22) = 2080;
    id v61 = [v31 rssi];
    unint64_t v48 = sub_100024970();
    RSSI.init<A>(_:)((uint64_t)&v61, (uint64_t)&type metadata for Int, v48);
    uint64_t v49 = RSSI.description.getter();
    unint64_t v51 = v50;
    id v61 = (id)sub_10000235C(v49, v50, &v62);
    uint64_t v29 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62);

    swift_bridgeObjectRelease(v51);
    _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "Received a new discovery result %s [%s] at %s",  (uint8_t *)v35,  0x20u);
    uint64_t v52 = v56;
    swift_arrayDestroy(v56, 3LL, &type metadata for Any[8]);
    swift_slowDealloc(v52, -1LL, -1LL);
    uint64_t v53 = v35;
    id v26 = v58;
    swift_slowDealloc(v53, -1LL, -1LL);
  }

  else
  {

    sub_10005802C(v30, type metadata accessor for AWDLPeer.AdvertisedService);
  }

  uint64_t v54 = *(void *)(v29 + qword_10040EA08);
  if (v54)
  {
    [(id)swift_unknownObjectRetain(*(void *)(v29 + qword_10040EA08)) subscribeReceivedDiscoveryResult:v31];
    swift_unknownObjectRelease(v54);
  }
}

uint64_t sub_1002AC4B0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  char v8 = *(_BYTE *)(a1 + 40);
  char v9 = *(_BYTE *)(a1 + 41);
  uint64_t v10 = (uint64_t *)((char *)a2 + qword_10040E960);
  swift_beginAccess((char *)a2 + qword_10040E960, v21, 32LL, 0LL);
  uint64_t v11 = *v10;
  v18[0] = v7;
  v18[1] = v6;
  char v19 = v8;
  char v20 = v9;
  uint64_t v13 = type metadata accessor for AWDLDiscoveryEngine.Browse(0LL, *(void *)(v5 + 80), *(void *)(v5 + 88), v12);
  sub_100004DEC();
  swift_bridgeObjectRetain(v6);
  Dictionary.subscript.getter(v18, v11, &type metadata for DNSRecords.Identifier, v13);
  swift_bridgeObjectRelease(v6);
  uint64_t v14 = v24;
  if (v24)
  {
    swift_endAccess(v21);
    uint64_t v15 = type metadata accessor for AWDLPeer(0LL);
    sub_1002AC5F8( (unsigned __int8 *)a1,  *(unsigned __int16 *)(a3 + *(int *)(v15 + 20)) | ((unint64_t)*(unsigned int *)(a3 + *(int *)(v15 + 20) + 2) << 16));
    swift_release(v14);
  }

  else
  {
    swift_endAccess(v21);
  }

  uint64_t v16 = *(void *)(a1 + 16);
  v21[0] = *(void *)(a1 + 8);
  v21[1] = v16;
  v21[2] = v7;
  v21[3] = v6;
  char v22 = v8;
  char v23 = v9;
  return sub_1002A95A0((uint64_t)v21);
}

void sub_1002AC5F8(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for AWDLPeer.AdvertisedService(0LL);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100057FE8((uint64_t)a1, (uint64_t)v7, v8);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v34 = a2;
  if (v12)
  {
    uint64_t v13 = swift_slowAlloc(22LL, -1LL);
    uint64_t v33 = swift_slowAlloc(64LL, -1LL);
    uint64_t v36 = v33;
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v14 = WiFiAddress.description.getter(a2 & 0xFFFFFFFFFFFFLL);
    unint64_t v16 = v15;
    uint64_t v37 = sub_10000235C(v14, v15, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38);
    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v13 + 12) = 2080;
    uint64_t v32 = v13 + 14;
    uint64_t v17 = *((void *)v7 + 2);
    uint64_t v18 = *((void *)v7 + 3);
    uint64_t v19 = *((void *)v7 + 4);
    char v20 = v7[40];
    char v21 = v7[41];
    uint64_t v37 = *((void *)v7 + 1);
    v38[0] = v17;
    v38[1] = v18;
    v38[2] = v19;
    char v39 = v20;
    char v40 = v21;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v19);
    uint64_t v22 = DNSRecords.PTR.description.getter();
    uint64_t v23 = v3;
    unint64_t v25 = v24;
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v17);
    uint64_t v35 = sub_10000235C(v22, v25, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
    unint64_t v26 = v25;
    uint64_t v3 = v23;
    swift_bridgeObjectRelease(v26);
    sub_10005802C((uint64_t)v7, type metadata accessor for AWDLPeer.AdvertisedService);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Aging out discovery result %s [%s]", (uint8_t *)v13, 0x16u);
    uint64_t v27 = v33;
    swift_arrayDestroy(v33, 2LL, &type metadata for Any[8]);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {

    sub_10005802C((uint64_t)v7, type metadata accessor for AWDLPeer.AdvertisedService);
  }

  id v28 = *(void **)(v3 + qword_10040EA08);
  if (v28)
  {
    uint64_t v29 = *a1;
    uint64_t v30 = v34 & 0xFFFFFFFFFFFFLL;
    swift_unknownObjectRetain(*(void *)(v3 + qword_10040EA08));
    id v31 = WiFiAddress.apiAddress.getter(v30);
    [v28 subscribeLostDiscoveryResultForPublishID:v29 address:v31];

    swift_unknownObjectRelease(v28);
  }

uint64_t sub_1002AC8A4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v4 = a3;
  unsigned int v7 = a3 >> 8;
  uint64_t v8 = *v3;
  uint64_t v9 = (uint64_t *)((char *)v3 + qword_10040E960);
  swift_beginAccess(v9, v20, 32LL, 0LL);
  uint64_t v10 = *v9;
  v16[0] = a1;
  v16[1] = a2;
  char v17 = v4 & 1;
  char v18 = v7;
  uint64_t v12 = type metadata accessor for AWDLDiscoveryEngine.Browse(0LL, *(void *)(v8 + 80), *(void *)(v8 + 88), v11);
  sub_100004DEC();
  swift_bridgeObjectRetain(a2);
  Dictionary.subscript.getter(v16, v10, &type metadata for DNSRecords.Identifier, v12);
  swift_bridgeObjectRelease(a2);
  uint64_t v13 = v19;
  if (v19)
  {
    swift_endAccess(v20);
    uint64_t v14 = *(void *)(v13 + qword_10040EA08);
    swift_unknownObjectRetain(v14);
    swift_release(v13);
  }

  else
  {
    swift_endAccess(v20);
    return 0LL;
  }

  return v14;
}

uint64_t sub_1002AC9A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (uint64_t *)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  unsigned int v7 = (void *)*v6;
  *uint64_t v5 = *v6;
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v5);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if ((v7 & 1) != 0)
  {
    uint64_t v10 = qword_10040EA10;
    if (*(_BYTE *)(v1 + qword_10040EA10) == 1)
    {
      uint64_t v11 = swift_retain();
      uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
      os_log_type_t v13 = ((uint64_t (*)(void))static os_log_type_t.default.getter)();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v15 = swift_slowAlloc(32LL, -1LL);
        uint64_t v30 = v15;
        *(_DWORD *)uint64_t v14 = 136315138;
        uint64_t v16 = sub_1002AFFC0();
        unint64_t v18 = v17;
        uint64_t v31 = sub_10000235C(v16, v17, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
        swift_release(v1);
        swift_bridgeObjectRelease(v18);
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s will attempt to stop", v14, 0xCu);
        swift_arrayDestroy(v15, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v15, -1LL, -1LL);
        swift_slowDealloc(v14, -1LL, -1LL);
      }

      else
      {
        swift_release(v1);
      }

      *(_BYTE *)(v1 + v10) = 0;
      sub_1002A885C(0LL);
      uint64_t v19 = swift_retain();
      char v20 = (os_log_s *)Logger.logObject.getter(v19);
      os_log_type_t v21 = static os_log_type_t.default.getter(v20);
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = swift_slowAlloc(22LL, -1LL);
        uint64_t v23 = swift_slowAlloc(64LL, -1LL);
        uint64_t v30 = v23;
        *(_DWORD *)uint64_t v22 = 136315394;
        uint64_t v24 = sub_1002AFFC0();
        unint64_t v26 = v25;
        uint64_t v31 = sub_10000235C(v24, v25, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
        swift_release(v1);
        swift_bridgeObjectRelease(v26);
        *(_WORD *)(v22 + 12) = 2080;
        uint64_t v31 = sub_10000235C(0x7165522072657355LL, 0xEE00646574736575LL, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s was terminated with reason %s", (uint8_t *)v22, 0x16u);
        swift_arrayDestroy(v23, 2LL, &type metadata for Any[8]);
        swift_slowDealloc(v23, -1LL, -1LL);
        swift_slowDealloc(v22, -1LL, -1LL);
      }

      else
      {
        swift_release(v1);
      }

      uint64_t v27 = qword_10040EA08;
      id v28 = *(void **)(v1 + qword_10040EA08);
      if (v28)
      {
        [v28 subscribeTerminatedWithReason:2];
        id v28 = *(void **)(v1 + v27);
      }

      *(void *)(v1 + v27) = 0LL;
      return swift_unknownObjectRelease(v28);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1002ACFE4@<X0>( uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v53 = a2;
  unint64_t v51 = a4;
  uint64_t v52 = a3;
  unint64_t v50 = a5;
  uint64_t v7 = *v5;
  type metadata accessor for DNSRecords.SRV(0LL);
  __chkstk_darwin();
  uint64_t v9 = (char *)v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(uint64_t *)((char *)v5 + qword_100410B68);
  swift_unownedRetainStrong(v10);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  int v13 = *(unsigned __int8 *)(a1 + 32);
  int v14 = *(unsigned __int8 *)(a1 + 33);
  swift_beginAccess(v10 + *(void *)(*(void *)v10 + 720LL), &v60, 33LL, 0LL);
  swift_bridgeObjectRetain(v12);
  sub_10032D3C0((uint64_t)&v58, v11, v12, v13 | (v14 << 8));
  swift_endAccess(&v60);
  swift_release(v10);
  swift_bridgeObjectRelease(v59[0]);
  uint64_t v15 = *(void *)(v7 + 80);
  uint64_t v16 = *(void *)(v7 + 88);
  unint64_t v17 = v51;
  uint64_t v19 = type metadata accessor for AWDLDiscoveryEngine.Advertise(0LL, v15, v16, v18);
  swift_unownedRetainStrong(v10);
  v63[0] = *(_OWORD *)a1;
  sub_100057FE8(v52, (uint64_t)v9, type metadata accessor for DNSRecords.SRV);
  swift_bridgeObjectRetain(v12);
  sub_1000209DC((uint64_t)v63);
  char v20 = v53;
  sub_100021028(v53);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  uint64_t v21 = v10;
  uint64_t v22 = v55;
  uint64_t v23 = sub_1002B094C(v21, a1, v20, (uint64_t)v9);
  uint64_t v24 = *(void *)(v23 + qword_10040EB38);
  *(void *)(v23 + qword_10040EB38) = v17;
  swift_unknownObjectRelease(v24);
  uint64_t v64 = v23;
  __int128 v25 = *(_OWORD *)(a1 + 16);
  __int128 v60 = *(_OWORD *)a1;
  __int128 v61 = v25;
  __int16 v62 = *(_WORD *)(a1 + 32);
  uint64_t v26 = v22 + qword_10040E968;
  swift_beginAccess(v22 + qword_10040E968, &v58, 33LL, 0LL);
  swift_bridgeObjectRetain(v12);
  sub_1000209DC((uint64_t)v63);
  unint64_t v27 = sub_100004E30();
  id v28 = (__int128 *)type metadata accessor for Dictionary(0LL, &type metadata for DNSRecords.PTR, v19, v27);
  swift_unknownObjectRetain(v17);
  swift_retain();
  Dictionary.subscript.setter(&v64, &v60, v28);
  swift_endAccess(&v58);
  sub_1002A7FB8();
  uint64_t v29 = v54;
  sub_1002AD5D4();
  if (v29)
  {
    swift_bridgeObjectRetain(v12);
    sub_1000209DC((uint64_t)v63);
    swift_errorRetain();
    swift_bridgeObjectRetain(v12);
    sub_1000209DC((uint64_t)v63);
    uint64_t v30 = swift_errorRetain();
    uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.error.getter(v31);
    LODWORD(v54) = v32;
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc(22LL, -1LL);
      unint64_t v50 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v52 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v60 = v52;
      *(_DWORD *)uint64_t v33 = 136315394;
      v48[1] = v33 + 4;
      swift_bridgeObjectRetain(v12);
      sub_1000209DC((uint64_t)v63);
      os_log_t v49 = v31;
      uint64_t v34 = DNSRecords.PTR.description.getter();
      uint64_t v53 = v28;
      unint64_t v36 = v35;
      sub_100020A04((uint64_t)v63);
      swift_bridgeObjectRelease(v12);
      uint64_t v58 = sub_10000235C(v34, v36, (uint64_t *)&v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59);
      swift_bridgeObjectRelease(v36);
      sub_100020A04((uint64_t)v63);
      swift_bridgeObjectRelease(v12);
      sub_100020A04((uint64_t)v63);
      swift_bridgeObjectRelease(v12);
      *(_WORD *)(v33 + 12) = 2112;
      swift_errorRetain();
      uint64_t v37 = _swift_stdlib_bridgeErrorToNSError(v29);
      uint64_t v58 = v37;
      id v28 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59);
      unint64_t v38 = v50;
      *unint64_t v50 = v37;
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v39 = v49;
      _os_log_impl( (void *)&_mh_execute_header,  v49,  (os_log_type_t)v54,  "Failed to start advertise for %s because %@",  (uint8_t *)v33,  0x16u);
      uint64_t v40 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v38, 1LL, v40);
      swift_slowDealloc(v38, -1LL, -1LL);
      uint64_t v41 = v52;
      swift_arrayDestroy(v52, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    else
    {

      sub_100020A04((uint64_t)v63);
      swift_bridgeObjectRelease(v12);
      sub_100020A04((uint64_t)v63);
      swift_bridgeObjectRelease(v12);
      swift_errorRelease();
      swift_errorRelease();
    }

    __int128 v45 = *(_OWORD *)(a1 + 16);
    __int128 v60 = *(_OWORD *)a1;
    __int128 v61 = v45;
    __int16 v62 = *(_WORD *)(a1 + 32);
    swift_beginAccess(v26, &v58, 33LL, 0LL);
    Dictionary.removeValue(forKey:)(&v60, v28);
    uint64_t v46 = v64;
    swift_endAccess(&v58);
    swift_release(v46);
    sub_1002A7FB8();
    swift_getErrorValue(v29, v57, v56);
    id v47 = [v17 publishFailedToStartWithError:Error.apiError.getter(v56[1])];
    swift_willThrow(v47);
    return swift_release(v23);
  }

  else
  {
    swift_bridgeObjectRetain(v12);
    sub_1000209DC((uint64_t)v63);
    uint64_t result = swift_release(v23);
    __int128 v43 = *(_OWORD *)(a1 + 16);
    uint64_t v44 = v50;
    *(_OWORD *)unint64_t v50 = *(_OWORD *)a1;
    *((_OWORD *)v44 + 1) = v43;
    *((_WORD *)v44 + swift_weakDestroy(v0 + 16) = *(_WORD *)(a1 + 32);
  }

  return result;
}

uint64_t sub_1002AD574(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  return sub_1002B094C(a1, a2, a3, a4);
}

id sub_1002AD5D4()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (uint64_t *)((char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v8 = (void *)*v7;
  *uint64_t v6 = *v7;
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v6);
  id result = (id)(*(uint64_t (**)(uint64_t *, uint64_t))(v4 + 8))(v6, v3);
  if ((v8 & 1) != 0)
  {
    id result = (id)sub_1002A8B98(1u);
    if (!v1)
    {
      *(_BYTE *)(v2 + qword_10040EB40) = 1;
      uint64_t v11 = swift_retain();
      uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
      os_log_type_t v13 = static os_log_type_t.default.getter(v12);
      if (os_log_type_enabled(v12, v13))
      {
        int v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v15 = swift_slowAlloc(32LL, -1LL);
        uint64_t v22 = v15;
        *(_DWORD *)int v14 = 136315138;
        uint64_t v16 = sub_1002B0F18();
        unint64_t v18 = v17;
        uint64_t v20 = sub_10000235C(v16, v17, &v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
        swift_release(v2);
        swift_bridgeObjectRelease(v18);
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s was started", v14, 0xCu);
        swift_arrayDestroy(v15, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v15, -1LL, -1LL);
        swift_slowDealloc(v14, -1LL, -1LL);
      }

      else
      {
        swift_release(v2);
      }

      id result = *(id *)(v2 + qword_10040EB38);
      if (result) {
        return [result publishStartedWithInstanceID:0];
      }
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1002AD80C(__int128 *a1, void *a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = (uint64_t *)((char *)v2 + qword_10040E968);
  swift_beginAccess(v6, v16, 32LL, 0LL);
  uint64_t v7 = *v6;
  __int128 v8 = *a1;
  __int128 v18 = a1[1];
  __int16 v19 = *((_WORD *)a1 + 16);
  __int128 v17 = v8;
  v13[0] = v8;
  v13[1] = v18;
  __int16 v14 = v19;
  sub_1000209DC((uint64_t)&v17);
  sub_1000209DC((uint64_t)&v18);
  uint64_t v10 = type metadata accessor for AWDLDiscoveryEngine.Advertise(0LL, *(void *)(v5 + 80), *(void *)(v5 + 88), v9);
  sub_100004E30();
  Dictionary.subscript.getter(v13, v7, &type metadata for DNSRecords.PTR, v10);
  sub_100020A04((uint64_t)&v17);
  sub_100020A04((uint64_t)&v18);
  uint64_t v11 = v15;
  if (!v15) {
    return swift_endAccess(v16);
  }
  swift_endAccess(v16);
  sub_100021028(a2);
  sub_1002AD908((uint64_t)a2);
  return swift_release(v11);
}

void *sub_1002AD908(uint64_t a1)
{
  uint64_t v3 = v1 + qword_10040EB28;
  __int128 v4 = *(_OWORD *)(v1 + qword_10040EB28 + 16);
  v11[0] = *(_OWORD *)(v1 + qword_10040EB28);
  v11[1] = v4;
  _OWORD v11[2] = *(_OWORD *)(v1 + qword_10040EB28 + 32);
  uint64_t v6 = *(void *)(v1 + qword_10040EB28 + 40);
  unint64_t v12 = *(void *)(v1 + qword_10040EB28 + 48);
  unint64_t v5 = v12;
  uint64_t v7 = *(void *)(v1 + qword_10040EB28 + 8);
  uint64_t v8 = *(void *)(v1 + qword_10040EB28 + 24);
  __int128 v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + swift_weakDestroy(v0 + 16) = v9;
  *(_OWORD *)(v3 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(v3 + 48) = *(void *)(a1 + 48);
  sub_100021028(v11);
  sub_100021028((void *)a1);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  sub_1000208D8(v6, v5);
  sub_1002B007C((uint64_t)v11);
  sub_100021074((void *)a1);
  return sub_100021074(v11);
}

uint64_t sub_1002AD9C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  unint64_t v5 = (uint64_t *)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v7 = (void *)*v6;
  *unint64_t v5 = *v6;
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v5);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if ((v7 & 1) != 0)
  {
    uint64_t v10 = qword_10040EB40;
    if (*(_BYTE *)(v1 + qword_10040EB40) == 1)
    {
      uint64_t v11 = swift_retain();
      unint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
      os_log_type_t v13 = static os_log_type_t.default.getter(v12);
      if (os_log_type_enabled(v12, v13))
      {
        __int16 v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v15 = swift_slowAlloc(32LL, -1LL);
        uint64_t v30 = v15;
        *(_DWORD *)__int16 v14 = 136315138;
        uint64_t v16 = sub_1002B0F18();
        unint64_t v18 = v17;
        uint64_t v31 = sub_10000235C(v16, v17, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
        swift_release(v1);
        swift_bridgeObjectRelease(v18);
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s will attempt to stop", v14, 0xCu);
        swift_arrayDestroy(v15, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v15, -1LL, -1LL);
        swift_slowDealloc(v14, -1LL, -1LL);
      }

      else
      {
        swift_release(v1);
      }

      *(_BYTE *)(v1 + v10) = 0;
      sub_1002A8B98(0);
      uint64_t v19 = swift_retain();
      uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
      os_log_type_t v21 = static os_log_type_t.default.getter(v20);
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = swift_slowAlloc(22LL, -1LL);
        uint64_t v23 = swift_slowAlloc(64LL, -1LL);
        uint64_t v30 = v23;
        *(_DWORD *)uint64_t v22 = 136315394;
        uint64_t v24 = sub_1002B0F18();
        unint64_t v26 = v25;
        uint64_t v31 = sub_10000235C(v24, v25, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
        swift_release(v1);
        swift_bridgeObjectRelease(v26);
        *(_WORD *)(v22 + 12) = 2080;
        uint64_t v31 = sub_10000235C(0x7165522072657355LL, 0xEE00646574736575LL, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s was terminated with reason %s", (uint8_t *)v22, 0x16u);
        swift_arrayDestroy(v23, 2LL, &type metadata for Any[8]);
        swift_slowDealloc(v23, -1LL, -1LL);
        swift_slowDealloc(v22, -1LL, -1LL);
      }

      else
      {
        swift_release(v1);
      }

      uint64_t v27 = qword_10040EB38;
      id v28 = *(void **)(v1 + qword_10040EB38);
      if (v28)
      {
        [v28 publishTerminatedWithReason:2];
        id v28 = *(void **)(v1 + v27);
      }

      *(void *)(v1 + v27) = 0LL;
      return swift_unknownObjectRelease(v28);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1002AE004(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v21 = a3;
  unsigned int v23 = a2;
  uint64_t v5 = *(void *)(*(void *)v3 + 80LL);
  uint64_t v4 = *(void *)(*(void *)v3 + 88LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v4 + 8),  v5,  &protocol requirements base descriptor for P2PControls);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  __int128 v9 = (char *)&v21 - v8;
  uint64_t v22 = v3;
  uint64_t v10 = *(void *)(v3 + qword_100410B68);
  swift_unownedRetainStrong(v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))( v9,  v10 + *(void *)(*(void *)v10 + 96LL),  AssociatedTypeWitness);
  swift_release(v10);
  DNSRecords.ARPA.keyData.getter();
  uint64_t v12 = v11;
  unint64_t v14 = v13;
  DNSRecords.ARPA.valueData.getter();
  uint64_t v16 = v15;
  unint64_t v18 = v17;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v4,  v5,  AssociatedTypeWitness,  &protocol requirements base descriptor for AWDLController,  &associated conformance descriptor for AWDLController.P2PControls.Driver: AWDLWiFiDriver);
  (*(void (**)(void, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 128))( v23,  v12,  v14,  v16,  v18,  AssociatedTypeWitness,  AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  sub_100020B40(v16, v18);
  return sub_1000208D8(v12, v14);
}

uint64_t sub_1002AE354@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v71 = a3;
  __int16 v67 = a4;
  unint64_t v68 = *v5;
  type metadata accessor for DNSRecords.SRV(0LL);
  __chkstk_darwin();
  uint64_t v69 = (uint64_t)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for AWDLPeer(0LL);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_10040ED30);
  __chkstk_darwin();
  unint64_t v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for AWDLPeer.AdvertisedService(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin();
  uint64_t v72 = (uint64_t)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v17 = [a2 publisherAddress];
  WiFiMACAddress.wifiAddress.getter();
  uint64_t v19 = v18;

  uint64_t v70 = (uint64_t)v5;
  uint64_t v20 = *(unint64_t *)((char *)v5 + qword_100410B68);
  uint64_t v21 = a1;
  swift_unownedRetainStrong(v20);
  uint64_t v22 = v19 & 0xFFFFFFFFFFFFLL;
  sub_100304FBC(v22, (uint64_t)v11);
  swift_release(v20);
  uint64_t v23 = *(void *)&v11[*(int *)(v9 + 80)];
  swift_bridgeObjectRetain(v23);
  sub_10005802C((uint64_t)v11, type metadata accessor for AWDLPeer);
  __int128 v24 = *(_OWORD *)(a1 + 16);
  v83[0] = *(_OWORD *)a1;
  __int128 v81 = v24;
  __int16 v82 = *(_WORD *)(a1 + 32);
  sub_1000209DC((uint64_t)v83);
  sub_1000209DC((uint64_t)&v81);
  uint64_t v25 = v73;
  sub_1002A7C88(v23, (__int128 *)a1, (uint64_t)v13);
  __n128 v26 = swift_bridgeObjectRelease(v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v15 + 48))(v13, 1LL, v14, v26) == 1)
  {
    sub_1000225EC((uint64_t)v13, (uint64_t *)&unk_10040ED30);
    unint64_t v27 = sub_1000033FC();
    uint64_t v28 = swift_allocError(&type metadata for WiFiError, v27, 0LL, 0LL);
    *(_OWORD *)uint64_t v29 = xmmword_10035D880;
    *(_BYTE *)(v29 + swift_weakDestroy(v0 + 16) = 1;
    return swift_willThrow(v28);
  }

  else
  {
    uint64_t v31 = v72;
    sub_1002B1744((uint64_t)v13, v72);
    uint64_t v33 = type metadata accessor for AWDLDiscoveryEngine.DatapathInitiator( 0LL,  *(void *)(v68 + 80),  *(void *)(v68 + 88),  v32);
    swift_unownedRetainStrong(v20);
    uint64_t v34 = v69;
    sub_100057FE8(v31 + *(int *)(v14 + 28), v69, type metadata accessor for DNSRecords.SRV);
    sub_1000209DC((uint64_t)v83);
    sub_1000209DC((uint64_t)&v81);
    uint64_t v35 = swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
    unint64_t v68 = v22;
    sub_1002B1004(v20, v22, v21, v34);
    uint64_t v36 = *(void *)(v35 + qword_100410BA0);
    uint64_t v37 = v71;
    *(void *)(v35 + qword_100410BA0) = v71;
    swift_unknownObjectRelease(v36);
    uint64_t v84 = v35;
    __int128 v38 = *(_OWORD *)(v21 + 16);
    __int128 v78 = *(_OWORD *)v21;
    __int128 v79 = v38;
    __int16 v80 = *(_WORD *)(v21 + 32);
    uint64_t v39 = v70 + qword_100410B70;
    swift_beginAccess(v70 + qword_100410B70, &v76, 33LL, 0LL);
    sub_1000209DC((uint64_t)v83);
    sub_1000209DC((uint64_t)&v81);
    unint64_t v40 = sub_100004E30();
    uint64_t v41 = type metadata accessor for Dictionary(0LL, &type metadata for DNSRecords.PTR, v33, v40);
    swift_unknownObjectRetain(v37);
    swift_retain();
    uint64_t v73 = v39;
    Dictionary.subscript.setter(&v84, &v78, v41);
    swift_endAccess(&v76);
    sub_1002AEB4C();
    if (v25)
    {
      sub_1000209DC((uint64_t)v83);
      sub_1000209DC((uint64_t)&v81);
      swift_errorRetain();
      sub_1000209DC((uint64_t)v83);
      sub_1000209DC((uint64_t)&v81);
      uint64_t v42 = swift_errorRetain();
      __int128 v43 = (os_log_s *)Logger.logObject.getter(v42);
      os_log_type_t v44 = static os_log_type_t.error.getter(v43);
      int v45 = v44;
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v46 = swift_slowAlloc(32LL, -1LL);
        char v66 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        uint64_t v47 = swift_slowAlloc(64LL, -1LL);
        LODWORD(v67) = v45;
        uint64_t v69 = v47;
        *(void *)&__int128 v78 = v47;
        *(_DWORD *)uint64_t v46 = 136315650;
        uint64_t v70 = v41;
        sub_1000209DC((uint64_t)v83);
        sub_1000209DC((uint64_t)&v81);
        uint64_t v48 = v21;
        uint64_t v49 = DNSRecords.PTR.description.getter();
        unint64_t v51 = v50;
        sub_100020A04((uint64_t)v83);
        sub_100020A04((uint64_t)&v81);
        uint64_t v76 = sub_10000235C(v49, v51, (uint64_t *)&v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77);
        swift_bridgeObjectRelease(v51);
        sub_100020A04((uint64_t)v83);
        sub_100020A04((uint64_t)&v81);
        sub_100020A04((uint64_t)v83);
        sub_100020A04((uint64_t)&v81);
        *(_WORD *)(v46 + 12) = 2080;
        uint64_t v52 = WiFiAddress.description.getter(v68);
        unint64_t v54 = v53;
        uint64_t v76 = sub_10000235C(v52, v53, (uint64_t *)&v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77);
        swift_bridgeObjectRelease(v54);
        *(_WORD *)(v46 + 22) = 2112;
        swift_errorRetain();
        uint64_t v55 = _swift_stdlib_bridgeErrorToNSError(v25);
        uint64_t v76 = v55;
        uint64_t v41 = v70;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77);
        uint64_t v56 = v66;
        *char v66 = v55;
        unint64_t v57 = v71;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v43,  (os_log_type_t)v67,  "Failed to start datapath for %s to %s because %@",  (uint8_t *)v46,  0x20u);
        uint64_t v58 = sub_100002274(&qword_100404DE0);
        swift_arrayDestroy(v56, 1LL, v58);
        swift_slowDealloc(v56, -1LL, -1LL);
        uint64_t v59 = v69;
        swift_arrayDestroy(v69, 2LL, &type metadata for Any[8]);
        swift_slowDealloc(v59, -1LL, -1LL);
        uint64_t v60 = v46;
        uint64_t v37 = v57;
        swift_slowDealloc(v60, -1LL, -1LL);
      }

      else
      {

        sub_100020A04((uint64_t)v83);
        sub_100020A04((uint64_t)&v81);
        sub_100020A04((uint64_t)v83);
        sub_100020A04((uint64_t)&v81);
        swift_errorRelease();
        swift_errorRelease();
        uint64_t v48 = v21;
      }

      __int128 v63 = *(_OWORD *)(v48 + 16);
      __int128 v78 = *(_OWORD *)v48;
      __int128 v79 = v63;
      __int16 v80 = *(_WORD *)(v48 + 32);
      swift_beginAccess(v73, &v76, 33LL, 0LL);
      Dictionary.removeValue(forKey:)(&v78, v41);
      swift_endAccess(&v76);
      swift_release(v84);
      swift_getErrorValue(v25, v75, v74);
      id v64 = [v37 datapathFailedToStartWithError:Error.apiError.getter(v74[1])];
      swift_willThrow(v64);
      swift_release(v35);
      return sub_10005802C(v72, type metadata accessor for AWDLPeer.AdvertisedService);
    }

    else
    {
      sub_10005802C(v31, type metadata accessor for AWDLPeer.AdvertisedService);
      sub_1000209DC((uint64_t)v83);
      sub_1000209DC((uint64_t)&v81);
      uint64_t result = swift_release(v35);
      __int128 v61 = *(_OWORD *)(v21 + 16);
      __int16 v62 = v67;
      *__int16 v67 = *(_OWORD *)v21;
      v62[1] = v61;
      *((_WORD *)v62 + swift_weakDestroy(v0 + 16) = *(_WORD *)(v21 + 32);
    }
  }

  return result;
}

uint64_t sub_1002AEAE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  sub_1002B1004(a1, a2 & 0xFFFFFFFFFFFFLL, a3, a4);
  return v9;
}

void sub_1002AEB4C()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for NWEndpoint.Port(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v55 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (uint64_t *)((char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v11 = (void *)*v10;
  *uint64_t v9 = *v10;
  (*(void (**)(uint64_t *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = v11;
  char v13 = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
  if ((v13 & 1) != 0)
  {
    uint64_t v53 = v4;
    *(_BYTE *)(v2 + qword_100410BA8) = 1;
    uint64_t v56 = qword_100410BA0;
    uint64_t v57 = v1;
    uint64_t v14 = *(void **)(v2 + qword_100410BA0);
    if (v14)
    {
      uint64_t v15 = *(void *)(v2 + qword_100410B80);
      swift_unownedRetainStrong(v15);
      swift_unknownObjectRetain(v14);
      uint64_t v16 = WiFiInterface.macAddress.getter();
      swift_release(v15);
      id v17 = WiFiAddress.apiAddress.getter(v16 & 0xFFFFFFFFFFFFLL);
      swift_unownedRetainStrong(v15);
      uint64_t v18 = WiFiInterface.interfaceIndex.getter();
      swift_release(v15);
      [v14 datapathStartedWithInstanceID:0 initiatorDataAddress:v17 localInterfaceIndex:v18];

      swift_unknownObjectRelease(v14);
    }

    uint64_t v19 = swift_retain();
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.default.getter(v20);
    BOOL v22 = os_log_type_enabled(v20, v21);
    uint64_t v54 = v3;
    if (v22)
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      uint64_t v59 = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      unint64_t v25 = sub_1002B1600();
      unint64_t v27 = v26;
      uint64_t v61 = sub_10000235C(v25, v26, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62);
      swift_release(v2);
      swift_bridgeObjectRelease(v27);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s was started", v23, 0xCu);
      swift_arrayDestroy(v24, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {
      swift_release(v2);
    }

    uint64_t v28 = swift_retain_n(v2, 5LL);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.default.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc(26LL, -1LL);
      uint64_t v52 = swift_slowAlloc(64LL, -1LL);
      uint64_t v61 = v52;
      *(_DWORD *)uint64_t v31 = 136315650;
      unint64_t v32 = sub_1002B1600();
      unint64_t v34 = v33;
      uint64_t v59 = sub_10000235C(v32, v33, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60);
      swift_release(v2);
      swift_bridgeObjectRelease(v34);
      *(_WORD *)(v31 + 12) = 2080;
      uint64_t v35 = v2 + qword_100410B98;
      swift_beginAccess(v2 + qword_100410B98, &v59, 0LL, 0LL);
      uint64_t v36 = type metadata accessor for DNSRecords.SRV(0LL);
      uint64_t v37 = (uint64_t *)(v35 + *(int *)(v36 + 24));
      uint64_t v38 = *v37;
      unint64_t v39 = v37[1];
      swift_bridgeObjectRetain(v39);
      uint64_t v58 = sub_10000235C(v38, v39, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
      swift_release_n(v2, 2LL);
      __n128 v40 = swift_bridgeObjectRelease(v39);
      *(_WORD *)(v31 + 22) = 512;
      uint64_t v41 = v35 + *(int *)(v36 + 20);
      uint64_t v43 = v53;
      uint64_t v42 = v54;
      os_log_type_t v44 = v55;
      uint64_t v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v53 + 16))(v55, v41, v54, v40);
      __int16 v46 = NWEndpoint.Port.rawValue.getter(v45);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v42);
      swift_release(v2);
      LOWORD(v58) = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, (char *)&v58 + 2);
      swift_release(v2);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s datapath established with %s%%%hu", (uint8_t *)v31, 0x1Au);
      uint64_t v47 = v52;
      swift_arrayDestroy(v52, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v47, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v2, 5LL);
    }

    uint64_t v48 = *(void **)(v2 + v56);
    if (v48)
    {
      unint64_t v49 = *(unsigned __int16 *)(v2 + qword_100410B88) | ((unint64_t)*(unsigned int *)(v2 + qword_100410B88 + 2) << 16);
      swift_unknownObjectRetain(*(void *)(v2 + v56));
      id v50 = WiFiAddress.apiAddress.getter(v49);
      id v51 = sub_1002B14B4();
      [v48 datapathConfirmedForPeerDataAddress:v50 serviceSpecificInfo:v51];

      swift_unknownObjectRelease(v48);
    }
  }

  else
  {
    __break(1u);
  }

double sub_1002AF0A4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = (uint64_t *)((char *)v2 + qword_100410B70);
  swift_beginAccess((char *)v2 + qword_100410B70, v22, 0LL, 0LL);
  uint64_t v6 = *v5;
  uint64_t v7 = *(void *)(v4 + 88);
  uint64_t v18 = *(void *)(v4 + 80);
  uint64_t v19 = v7;
  uint64_t v20 = a1;
  uint64_t v9 = type metadata accessor for AWDLDiscoveryEngine.DatapathInitiator(0LL, v18, v7, v8);
  unint64_t v10 = sub_100004E30();
  swift_bridgeObjectRetain(v6);
  uint64_t v21 = Dictionary.filter(_:)(sub_1002B2DD4, &v17, v6, &type metadata for DNSRecords.PTR, v9, v10);
  uint64_t v11 = type metadata accessor for Dictionary.Keys(0LL, &type metadata for DNSRecords.PTR, v9, v10);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v11);
  uint64_t v13 = Array.init<A>(_:)(&v21, &type metadata for DNSRecords.PTR, v11, WitnessTable);
  uint64_t v21 = v13;
  uint64_t v14 = sub_100002274((uint64_t *)&unk_10040ED00);
  uint64_t v15 = swift_getWitnessTable(&protocol conformance descriptor for [A], v14);
  Sequence.forEach(_:)(sub_1002B2DF4, v2, v14, v15);
  *(void *)&double result = swift_bridgeObjectRelease(v13).n128_u64[0];
  return result;
}

BOOL sub_1002AF1E4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = (unsigned __int16 *)(*a2 + qword_100410B88);
  uint64_t v5 = *(unsigned int *)(v4 + 1);
  uint64_t v6 = *v4;
  uint64_t v7 = type metadata accessor for AWDLPeer(0LL);
  return static NANClusterChangeEvent.__derived_struct_equals(_:_:)( v6 | (v5 << 16),  *(unsigned __int16 *)(a3 + *(int *)(v7 + 20)) | ((unint64_t)*(unsigned int *)(a3 + *(int *)(v7 + 20)
                                                                                              + 2) << 16));
}

uint64_t sub_1002AF250( __int128 *a1, void *a2, uint64_t (*a3)(void, void, void), void *a4)
{
  uint64_t v8 = *v4;
  uint64_t v9 = (uint64_t *)((char *)v4 + *a2);
  swift_beginAccess(v9, v19, 32LL, 0LL);
  uint64_t v10 = *v9;
  __int128 v11 = *a1;
  __int128 v21 = a1[1];
  __int16 v22 = *((_WORD *)a1 + 16);
  __int128 v20 = v11;
  v16[0] = v11;
  v16[1] = v21;
  __int16 v17 = v22;
  sub_1000209DC((uint64_t)&v20);
  sub_1000209DC((uint64_t)&v21);
  uint64_t v12 = a3(0LL, *(void *)(v8 + 80), *(void *)(v8 + 88));
  sub_100004E30();
  Dictionary.subscript.getter(v16, v10, &type metadata for DNSRecords.PTR, v12);
  sub_100020A04((uint64_t)&v20);
  sub_100020A04((uint64_t)&v21);
  uint64_t v13 = v18;
  if (v18)
  {
    swift_endAccess(v19);
    uint64_t v14 = *(void *)(v13 + *a4);
    swift_unknownObjectRetain(v14);
    swift_release(v13);
  }

  else
  {
    swift_endAccess(v19);
    return 0LL;
  }

  return v14;
}

uint64_t sub_1002AF35C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (uint64_t *)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v7 = (void *)*v6;
  *uint64_t v5 = *v6;
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v5);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if ((v7 & 1) != 0)
  {
    uint64_t v10 = qword_100410BA8;
    if (*(_BYTE *)(v1 + qword_100410BA8) == 1)
    {
      uint64_t v11 = swift_retain();
      uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
      os_log_type_t v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v15 = swift_slowAlloc(32LL, -1LL);
        uint64_t v30 = v15;
        *(_DWORD *)uint64_t v14 = 136315138;
        unint64_t v16 = sub_1002B1600();
        unint64_t v18 = v17;
        uint64_t v29 = sub_10000235C(v16, v17, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
        swift_release(v1);
        swift_bridgeObjectRelease(v18);
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s will attempt to stop", v14, 0xCu);
        swift_arrayDestroy(v15, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v15, -1LL, -1LL);
        swift_slowDealloc(v14, -1LL, -1LL);
      }

      else
      {
        swift_release(v1);
      }

      *(_BYTE *)(v1 + v10) = 0;
      uint64_t v19 = swift_retain();
      __int128 v20 = (os_log_s *)Logger.logObject.getter(v19);
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = swift_slowAlloc(22LL, -1LL);
        uint64_t v23 = swift_slowAlloc(64LL, -1LL);
        uint64_t v30 = v23;
        *(_DWORD *)uint64_t v22 = 136315394;
        unint64_t v24 = sub_1002B1600();
        unint64_t v26 = v25;
        uint64_t v29 = sub_10000235C(v24, v25, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
        swift_release(v1);
        swift_bridgeObjectRelease(v26);
        *(_WORD *)(v22 + 12) = 2080;
        uint64_t v29 = sub_10000235C(0x7165522072657355LL, 0xEE00646574736575LL, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s was terminated because %s", (uint8_t *)v22, 0x16u);
        swift_arrayDestroy(v23, 2LL, &type metadata for Any[8]);
        swift_slowDealloc(v23, -1LL, -1LL);
        swift_slowDealloc(v22, -1LL, -1LL);
      }

      else
      {
        swift_release(v1);
      }

      uint64_t v27 = qword_100410BA0;
      uint64_t v28 = *(void **)(v1 + qword_100410BA0);
      if (v28)
      {
        [v28 datapathTerminatedWithReason:2];
        uint64_t v28 = *(void **)(v1 + v27);
      }

      *(void *)(v1 + v27) = 0LL;
      return swift_unknownObjectRelease(v28);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1002AF6E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = sub_1002AA318(a1, a2, a3 & 0xFFFFFF01, a4);
  if (!v5)
  {
    *(void *)a5 = result;
    *(void *)(a5 + 8) = v8;
    *(_BYTE *)(a5 + swift_weakDestroy(v0 + 16) = v9 & 1;
    *(_BYTE *)(a5 + 17) = HIBYTE(v9);
  }

  return result;
}

uint64_t sub_1002AF728(uint64_t a1)
{
  return sub_1002AC8A4( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned __int8 *)(a1 + 16) | (*(unsigned __int8 *)(a1 + 17) << 8));
}

uint64_t sub_1002AF75C(uint64_t a1)
{
  return sub_1002A90DC( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned __int8 *)(a1 + 16) | (unsigned __int16)(*(unsigned __int8 *)(a1 + 17) << 8));
}

double sub_1002AF790@<D0>( uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  if (!v5)
  {
    double result = *(double *)v9;
    __int128 v8 = v9[1];
    *(_OWORD *)a5 = v9[0];
    *(_OWORD *)(a5 + swift_weakDestroy(v0 + 16) = v8;
    *(_WORD *)(a5 + 32) = v10;
  }

  return result;
}

uint64_t sub_1002AF7D8(__int128 *a1, void *a2)
{
  return sub_1002AD80C(a1, a2);
}

uint64_t sub_1002AF7F8(__int128 *a1)
{
  return sub_1002AF250( a1,  qword_10040E968,  (uint64_t (*)(void, void, void))type metadata accessor for AWDLDiscoveryEngine.Advertise,  &qword_10040EB38);
}

uint64_t sub_1002AF830(uint64_t a1)
{
  return sub_1002A91A0(a1);
}

uint64_t sub_1002AF850(uint64_t a1)
{
  return sub_1002AE004(a1, 1u, (uint64_t)"Failed to start advertising ARPA because: %@");
}

uint64_t sub_1002AF87C(uint64_t a1)
{
  return sub_1002AE004(a1, 0, (uint64_t)"Failed to stop advertising ARPA because: %@");
}

double sub_1002AF8A8@<D0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  if (!v4)
  {
    double result = *(double *)v8;
    __int128 v7 = v8[1];
    *(_OWORD *)a4 = v8[0];
    *(_OWORD *)(a4 + swift_weakDestroy(v0 + 16) = v7;
    *(_WORD *)(a4 + 32) = v9;
  }

  return result;
}

uint64_t sub_1002AF8F0(__int128 *a1)
{
  return sub_1002AF250( a1,  &qword_100410B70,  (uint64_t (*)(void, void, void))type metadata accessor for AWDLDiscoveryEngine.DatapathInitiator,  &qword_100410BA0);
}

uint64_t sub_1002AF928(uint64_t a1)
{
  return sub_1002A95A0(a1);
}

uint64_t sub_1002AF948(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5 = v4;
  char v6 = a4;
  unsigned int v10 = a4 >> 8;
  Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xEE006C6477612E65LL,  0x6269726373627573LL,  0xE900000000000065LL);
  *(void *)(v4 + qword_10040EA08) = 0LL;
  *(_BYTE *)(v4 + qword_10040EA10) = 0;
  *(_BYTE *)(v4 + qword_10040EA18) = 0;
  *(_BYTE *)(v4 + qword_10040EA20) = 0;
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  *(void *)(v4 + qword_10040E9F8) = a1;
  uint64_t v11 = v4 + qword_10040EA00;
  *(void *)uint64_t v11 = a2;
  *(void *)(v11 + 8) = a3;
  *(_BYTE *)(v11 + swift_weakDestroy(v0 + 16) = v6 & 1;
  *(_BYTE *)(v11 + 17) = v10;
  swift_retain();
  uint64_t v12 = swift_unownedRetain(a1);
  os_log_type_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    uint64_t v22 = v16;
    *(_DWORD *)uint64_t v15 = 136315138;
    uint64_t v17 = sub_1002AFFC0();
    unint64_t v19 = v18;
    uint64_t v21 = sub_10000235C(v17, v18, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_release(v5);
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Created %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
    swift_release(v4);
  }

  swift_release(a1);
  return v5;
}

uint64_t sub_1002AFB8C()
{
  uint64_t v1 = v0;
  if (*(_BYTE *)(v0 + qword_10040EA10) == 1) {
    sub_1002A885C(0LL);
  }
  uint64_t v2 = qword_10040EA08;
  uint64_t v3 = *(void **)(v0 + qword_10040EA08);
  if (v3)
  {
    [v3 subscribeTerminatedWithReason:-1];
    uint64_t v3 = *(void **)(v0 + v2);
  }

  *(void *)(v0 + v2) = 0LL;
  swift_unknownObjectRelease(v3);
  uint64_t v4 = v0 + qword_10040E9F0;
  uint64_t v5 = swift_retain();
  char v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    __int128 v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v18 = v9;
    *(_DWORD *)__int128 v8 = 136315138;
    uint64_t v10 = sub_1002AFFC0();
    unint64_t v12 = v11;
    uint64_t v17 = sub_10000235C(v10, v11, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
    swift_release(v1);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Destroyed %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {

    swift_release(v0);
  }

  uint64_t v13 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(v4, v13);
  swift_unownedRelease(*(void *)(v1 + qword_10040E9F8));
  swift_bridgeObjectRelease(*(void *)(v1 + qword_10040EA00 + 8));
  swift_unknownObjectRelease(*(void *)(v1 + v2));
  uint64_t v14 = v1 + qword_10040EA28;
  uint64_t v15 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  return v1;
}

uint64_t sub_1002AFDC4()
{
  return sub_100044CC8(sub_1002AFB8C);
}

uint64_t type metadata accessor for AWDLDiscoveryEngine.Browse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AWDLDiscoveryEngine.Browse);
}

uint64_t sub_1002AFDDC(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = "\b";
    void v5[2] = "";
    v5[3] = &unk_10035F520;
    uint64_t result = type metadata accessor for DNSRecords.SRV(319LL);
    if (v4 <= 0x3F)
    {
      v5[4] = *(void *)(result - 8) + 64LL;
      v5[5] = &unk_10035F498;
      v5[6] = &unk_10035F4B0;
      v5[7] = &unk_10035F4B0;
      void v5[8] = &unk_10035F4B0;
      uint64_t result = swift_initClassMetadata2(a1, 0LL, 9LL, v5, a1 + 96);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_1002AFE98(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = a1;
  unint64_t v5 = a1 >> 8;
  unint64_t v6 = a1 >> 16;
  unint64_t v7 = a1 >> 24;
  unint64_t v8 = HIDWORD(a1);
  unint64_t v9 = a1 >> 40;
  uint64_t v10 = *(void *)(a2 + *(int *)(type metadata accessor for AWDLPeer(0LL) + 80));
  swift_bridgeObjectRetain(v10);
  Swift::Int v11 = sub_1002B26CC((uint64_t (*)(char *))sub_1002B3314, a3, v10);
  _OWORD v13[2] = a3;
  char v14 = v4;
  char v15 = v5;
  char v16 = v6;
  char v17 = v7;
  char v18 = v8;
  char v19 = v9;
  sub_1002FF724((void (*)(char *))sub_1002B3330, (uint64_t)v13, v11);
  return swift_release(v11);
}

BOOL sub_1002AFF64(uint64_t a1, uint64_t a2)
{
  return static DNSRecords.Identifier.== infix(_:_:)( *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 40) | (*(unsigned __int8 *)(a1 + 41) << 8),  *(void *)(a2 + qword_10040EA00),  *(void *)(a2 + qword_10040EA00 + 8),  *(unsigned __int8 *)(a2 + qword_10040EA00 + 16) | (*(unsigned __int8 *)(a2 + qword_10040EA00 + 17) << 8));
}

uint64_t sub_1002AFFC0()
{
  uint64_t v1 = *(void *)(v0 + qword_10040EA00);
  uint64_t v2 = *(void *)(v0 + qword_10040EA00 + 8);
  char v3 = *(_BYTE *)(v0 + qword_10040EA00 + 16);
  swift_bridgeObjectRetain(v2);
  v4._countAndFlagsBits = v1;
  DNSRecords.Identifier.description.getter(v1, v2, v3);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(object);
  return 0x776F72424C445741LL;
}

uint64_t sub_1002B005C()
{
  return sub_1002AFFC0();
}

uint64_t sub_1002B007C(uint64_t result)
{
  if (*(_BYTE *)(v1 + qword_10040EB40) == 1)
  {
    uint64_t v3 = *(void *)(result + 16);
    uint64_t v2 = *(void *)(result + 24);
    unint64_t v4 = *(_BYTE *)(result + 32) & 1 | ((unint64_t)*(unsigned __int8 *)(result + 33) << 8);
    __int128 v11 = *(_OWORD *)result;
    uint64_t v12 = v3;
    uint64_t v13 = v2;
    unint64_t v14 = v4;
    __int128 v15 = *(_OWORD *)(result + 40);
    uint64_t v5 = *(void *)(v1 + qword_10040EB28 + 8);
    uint64_t v6 = *(void *)(v1 + qword_10040EB28 + 16);
    uint64_t v7 = *(void *)(v1 + qword_10040EB28 + 24);
    uint64_t v8 = *(void *)(v1 + qword_10040EB28 + 40);
    unint64_t v9 = *(void *)(v1 + qword_10040EB28 + 48);
    unint64_t v10 = *(unsigned __int8 *)(v1 + qword_10040EB28 + 32) | ((unint64_t)*(unsigned __int8 *)(v1
                                                                                                  + qword_10040EB28
                                                                                                  + 33) << 8);
    v16[0] = *(void *)(v1 + qword_10040EB28);
    v16[1] = v5;
    _OWORD v16[2] = v6;
    v16[3] = v7;
    v16[4] = v10;
    v16[5] = v8;
    v16[6] = v9;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v7);
    sub_100020AFC(v8, v9);
    sub_1002B0400((uint64_t)&v11, (uint64_t)v16);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v5);
    return sub_1000208D8(v8, v9);
  }

  return result;
}

uint64_t sub_1002B0400(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  uint64_t v57 = a2;
  sub_1002B2E74(a2, (uint64_t)v63);
  uint64_t v48 = v63[1];
  uint64_t v49 = v63[3];
  unint64_t v50 = v63[6];
  uint64_t v51 = v63[5];
  sub_1002B2E74(a1, (uint64_t)v62);
  uint64_t v5 = v62[1];
  uint64_t v54 = v62[3];
  uint64_t v55 = v62[5];
  unint64_t v56 = v62[6];
  uint64_t v7 = *(void *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v6 + 8),  v7,  &protocol requirements base descriptor for P2PControls);
  uint64_t v76 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  unint64_t v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v46 - v11;
  uint64_t v53 = a1;
  sub_1002B2E74(a1, (uint64_t)v70);
  uint64_t v52 = v10;
  if (*((void *)&v70[0] + 1))
  {
    __int128 v72 = v70[0];
    __int128 v73 = v70[1];
    __int128 v74 = v70[2];
    unint64_t v75 = v71;
    uint64_t v47 = v2;
    uint64_t v13 = *(void *)((char *)v2 + qword_10040EB18);
    swift_unownedRetainStrong(v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))( v12,  v13 + *(void *)(*(void *)v13 + 96LL),  AssociatedTypeWitness);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v54);
    sub_100020AFC(v55, v56);
    swift_release(v13);
    uint64_t v14 = DNSRecords.TXT.keyData.getter();
    uint64_t v16 = *((void *)&v74 + 1);
    unint64_t v15 = v75;
    uint64_t v54 = v7;
    uint64_t v55 = v6;
    uint64_t v17 = v6;
    unint64_t v19 = v18;
    uint64_t v20 = AssociatedTypeWitness;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v17,  v7,  AssociatedTypeWitness,  &protocol requirements base descriptor for AWDLController,  &associated conformance descriptor for AWDLController.P2PControls.Driver: AWDLWiFiDriver);
    uint64_t v22 = *(void (**)(void, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 128);
    sub_100020AFC(v16, v15);
    unint64_t v56 = v14;
    uint64_t v23 = v58;
    v22(0LL, v14, v19, v16, v15, v20, AssociatedConformanceWitness);
    if (v23)
    {
      sub_1000208D8(v16, v15);
      sub_1000208D8(v56, v19);
      sub_1002B2EBC(v53);
      uint64_t v24 = v76;
      (*(void (**)(char *, uint64_t))(v76 + 8))(v12, v20);
      uint64_t v61 = v23;
      swift_errorRetain();
      uint64_t v25 = sub_100002274((uint64_t *)&unk_10040C5B0);
      uint64_t AssociatedTypeWitness = v20;
      uint64_t v26 = v59[0];
      char v27 = v60;
      if (v60 == 1)
      {
        if (v59[0] != 2LL) {
          return swift_errorRelease();
        }
      }

      else
      {
        if (v60) {
          goto LABEL_22;
        }
        if (LODWORD(v59[0]) != 6) {
          return swift_errorRelease();
        }
      }

      swift_errorRelease();
      swift_errorRelease();
      uint64_t v58 = 0LL;
      uint64_t v28 = v57;
    }

    else
    {
      uint64_t v58 = 0LL;
      uint64_t v31 = v76;
      (*(void (**)(char *, uint64_t))(v76 + 8))(v12, v20);
      sub_1000208D8(v16, v15);
      sub_1000208D8(v56, v19);
      sub_1002B2EBC(v53);
      uint64_t v28 = v57;
      uint64_t AssociatedTypeWitness = v20;
      uint64_t v24 = v31;
    }

    uint64_t v30 = v54;
    uint64_t v29 = v55;
    uint64_t v2 = v47;
  }

  else
  {
    uint64_t v28 = v57;
    uint64_t v24 = v76;
    uint64_t v29 = v6;
    uint64_t v30 = v7;
  }

  uint64_t result = sub_1002B2E74(v28, (uint64_t)v64);
  if (*((void *)&v64[0] + 1))
  {
    __int128 v66 = v64[0];
    __int128 v67 = v64[1];
    __int128 v68 = v64[2];
    unint64_t v69 = v65;
    uint64_t v33 = *(void *)((char *)v2 + qword_10040EB18);
    swift_unownedRetainStrong(v33);
    unint64_t v34 = v52;
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))( v52,  v33 + *(void *)(*(void *)v33 + 96LL),  AssociatedTypeWitness);
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRetain(v49);
    sub_100020AFC(v51, v50);
    swift_release(v33);
    uint64_t v35 = DNSRecords.TXT.keyData.getter();
    unint64_t v37 = v36;
    uint64_t v38 = *((void *)&v68 + 1);
    unint64_t v39 = v69;
    uint64_t v40 = swift_getAssociatedConformanceWitness( v29,  v30,  AssociatedTypeWitness,  &protocol requirements base descriptor for AWDLController,  &associated conformance descriptor for AWDLController.P2PControls.Driver: AWDLWiFiDriver);
    uint64_t v41 = AssociatedTypeWitness;
    uint64_t v42 = v40;
    uint64_t v43 = *(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v40 + 128);
    sub_100020AFC(v38, v39);
    unint64_t v56 = v37;
    uint64_t v44 = v58;
    v43(1LL, v35, v37, v38, v39, v41, v42);
    if (!v44)
    {
      (*(void (**)(char *, uint64_t))(v76 + 8))(v34, v41);
      sub_1000208D8(v38, v39);
      sub_1000208D8(v35, v56);
      return sub_1002B2EBC(v57);
    }

    sub_1000208D8(v38, v39);
    sub_1000208D8(v35, v56);
    sub_1002B2EBC(v57);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v34, v41);
    uint64_t v61 = v44;
    swift_errorRetain();
    uint64_t v45 = sub_100002274((uint64_t *)&unk_10040C5B0);
    uint64_t v26 = v59[0];
    char v27 = v60;
    if (v60 == 1)
    {
      if (v59[0] == 2LL)
      {
LABEL_25:
        swift_errorRelease();
        return swift_errorRelease();
      }

      return swift_errorRelease();
    }

    if (!v60)
    {
      if (LODWORD(v59[0]) == 6) {
        goto LABEL_25;
      }
      return swift_errorRelease();
    }

uint64_t sub_1002B094C(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  Logger.init(subsystem:category:)(0x6C7070612E6D6F63LL, 0xEE006C6477612E65LL, 0x6873696C627570LL, 0xE700000000000000LL);
  *(void *)(v5 + qword_10040EB38) = 0LL;
  *(_BYTE *)(v5 + qword_10040EB40) = 0;
  *(_BYTE *)(v5 + qword_10040EB48) = 0;
  *(_BYTE *)(v5 + qword_10040EB50) = 0;
  *(void *)(v5 + qword_10040EB18) = a1;
  uint64_t v10 = v5 + qword_10040EB20;
  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 + 32);
  __int128 v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
  *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = v11;
  uint64_t v12 = v5 + qword_10040EB28;
  *(void *)(v12 + 48) = *((void *)a3 + 6);
  __int128 v13 = a3[2];
  __int128 v14 = *a3;
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = a3[1];
  *(_OWORD *)(v12 + 32) = v13;
  *(_OWORD *)uint64_t v12 = v14;
  sub_100057FE8(a4, v5 + qword_10040EB30, type metadata accessor for DNSRecords.SRV);
  swift_retain();
  swift_unownedRetain(a1);
  unint64_t v15 = sub_100021028(a3);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v25 = a4;
    unint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v27 = v19;
    *(_DWORD *)unint64_t v18 = 136315138;
    uint64_t v20 = sub_1002B0F18();
    unint64_t v22 = v21;
    uint64_t v26 = sub_10000235C(v20, v21, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
    swift_release(v5);
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Created %s", v18, 0xCu);
    swift_arrayDestroy(v19, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
    sub_100021074(a3);

    uint64_t v23 = v25;
  }

  else
  {
    swift_release(v5);
    sub_100021074(a3);

    uint64_t v23 = a4;
  }

  sub_10005802C(v23, type metadata accessor for DNSRecords.SRV);
  swift_release(a1);
  return v5;
}

uint64_t sub_1002B0BE4()
{
  uint64_t v1 = v0;
  if (*(_BYTE *)(v0 + qword_10040EB40) == 1) {
    sub_1002A8B98(0);
  }
  uint64_t v2 = qword_10040EB38;
  uint64_t v3 = *(void **)(v0 + qword_10040EB38);
  if (v3)
  {
    [v3 publishTerminatedWithReason:-1];
    uint64_t v3 = *(void **)(v0 + v2);
  }

  *(void *)(v0 + v2) = 0LL;
  swift_unknownObjectRelease(v3);
  uint64_t v4 = v0 + qword_10040EB10;
  uint64_t v5 = swift_retain();
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v20 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v10 = sub_1002B0F18();
    unint64_t v12 = v11;
    uint64_t v19 = sub_10000235C(v10, v11, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    swift_release(v1);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Destroyed %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {

    swift_release(v0);
  }

  uint64_t v13 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(v4, v13);
  swift_unownedRelease(*(void *)(v1 + qword_10040EB18));
  uint64_t v14 = *(void *)(v1 + qword_10040EB20 + 8);
  swift_bridgeObjectRelease(*(void *)(v1 + qword_10040EB20 + 24));
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(void *)(v1 + qword_10040EB28 + 8);
  uint64_t v16 = *(void *)(v1 + qword_10040EB28 + 40);
  unint64_t v17 = *(void *)(v1 + qword_10040EB28 + 48);
  swift_bridgeObjectRelease(*(void *)(v1 + qword_10040EB28 + 24));
  swift_bridgeObjectRelease(v15);
  sub_1000208D8(v16, v17);
  sub_10005802C(v1 + qword_10040EB30, type metadata accessor for DNSRecords.SRV);
  swift_unknownObjectRelease(*(void *)(v1 + v2));
  return v1;
}

uint64_t sub_1002B0E48()
{
  return sub_100044CC8(sub_1002B0BE4);
}

uint64_t type metadata accessor for AWDLDiscoveryEngine.Advertise( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AWDLDiscoveryEngine.Advertise);
}

uint64_t sub_1002B0E60(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = "\b";
    void v5[2] = &unk_10035F578;
    v5[3] = "";
    uint64_t result = type metadata accessor for DNSRecords.SRV(319LL);
    if (v4 <= 0x3F)
    {
      v5[4] = *(void *)(result - 8) + 64LL;
      v5[5] = &unk_10035F498;
      v5[6] = &unk_10035F4B0;
      uint64_t result = swift_initClassMetadata2(a1, 0LL, 7LL, v5, a1 + 96);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_1002B0F18()
{
  *(void *)&__int128 v6 = 0LL;
  *((void *)&v6 + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(16LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  strcpy((char *)v5, "AWDLAdvertise ");
  HIBYTE(v5[1]) = -18;
  __int128 v1 = *(_OWORD *)(v0 + qword_10040EB20 + 16);
  __int128 v6 = *(_OWORD *)(v0 + qword_10040EB20);
  __int128 v7 = v1;
  __int16 v8 = *(_WORD *)(v0 + qword_10040EB20 + 32);
  __int128 v9 = v6;
  __int128 v10 = v1;
  __int16 v11 = v8;
  sub_1000209DC((uint64_t)&v9);
  sub_1000209DC((uint64_t)&v10);
  v2._countAndFlagsBits = DNSRecords.PTR.description.getter();
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  sub_100020A04((uint64_t)&v9);
  sub_100020A04((uint64_t)&v10);
  return v5[0];
}

uint64_t sub_1002B0FE4()
{
  return sub_1002B0F18();
}

uint64_t sub_1002B1004(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  char v8 = a2;
  unint64_t v10 = a2 >> 8;
  unint64_t v11 = a2 >> 16;
  unint64_t v12 = a2 >> 24;
  unint64_t v13 = HIDWORD(a2);
  unint64_t v14 = a2 >> 40;
  Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xEE006C6477612E65LL,  0xD000000000000011LL,  0x8000000100360A30LL);
  *(void *)(v5 + qword_100410BA0) = 0LL;
  *(_BYTE *)(v5 + qword_100410BA8) = 0;
  *(void *)(v5 + qword_100410B80) = a1;
  uint64_t v15 = (_BYTE *)(v5 + qword_100410B88);
  *uint64_t v15 = v8;
  v15[1] = v10;
  v15[2] = v11;
  v15[3] = v12;
  v15[4] = v13;
  v15[5] = v14;
  uint64_t v16 = a4;
  uint64_t v17 = v5 + qword_100410B90;
  __int128 v18 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)a3;
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = v18;
  *(_WORD *)(v17 + 32) = *(_WORD *)(a3 + 32);
  sub_100057FE8(a4, v5 + qword_100410B98, type metadata accessor for DNSRecords.SRV);
  swift_retain();
  uint64_t v19 = swift_unownedRetain(a1);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    unint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    uint64_t v29 = v23;
    *(_DWORD *)unint64_t v22 = 136315138;
    unint64_t v24 = sub_1002B1600();
    unint64_t v26 = v25;
    uint64_t v28 = sub_10000235C(v24, v25, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
    swift_release(v5);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Created %s", v22, 0xCu);
    swift_arrayDestroy(v23, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  else
  {

    swift_release(v5);
  }

  sub_10005802C(v16, type metadata accessor for DNSRecords.SRV);
  swift_release(a1);
  return v5;
}

uint64_t sub_1002B127C()
{
  uint64_t v1 = v0;
  if (*(_BYTE *)(v0 + qword_100410BA8) == 1) {
    sub_1002AF35C();
  }
  uint64_t v2 = v0 + qword_100410B78;
  uint64_t v3 = swift_retain();
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    __int128 v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v7;
    *(_DWORD *)__int128 v6 = 136315138;
    unint64_t v8 = sub_1002B1600();
    unint64_t v10 = v9;
    uint64_t v14 = sub_10000235C(v8, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15);
    swift_release(v1);
    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Destroyed %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {

    swift_release(v0);
  }

  uint64_t v11 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v2, v11);
  swift_unownedRelease(*(void *)(v1 + qword_100410B80));
  uint64_t v12 = *(void *)(v1 + qword_100410B90 + 8);
  swift_bridgeObjectRelease(*(void *)(v1 + qword_100410B90 + 24));
  swift_bridgeObjectRelease(v12);
  sub_10005802C(v1 + qword_100410B98, type metadata accessor for DNSRecords.SRV);
  swift_unknownObjectRelease(*(void *)(v1 + qword_100410BA0));
  return v1;
}

uint64_t sub_1002B1478()
{
  return sub_1002B1484((void (*)(void))sub_1002B127C);
}

uint64_t sub_1002B1484(void (*a1)(void))
{
  return swift_deallocClassInstance( v1,  *(unsigned int *)(*(void *)v1 + 48LL),  *(unsigned __int16 *)(*(void *)v1 + 52LL));
}

uint64_t type metadata accessor for AWDLDiscoveryEngine.DatapathInitiator( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AWDLDiscoveryEngine.DatapathInitiator);
}

id sub_1002B14B4()
{
  uint64_t v1 = type metadata accessor for NWEndpoint.Port(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(unsigned __int8 *)(v0 + qword_100410B90 + 32);
  uint64_t v6 = v0 + qword_100410B98;
  swift_beginAccess(v0 + qword_100410B98, v15, 0LL, 0LL);
  uint64_t v7 = type metadata accessor for DNSRecords.SRV(0LL);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v6 + *(int *)(v7 + 20), v1);
  unsigned __int16 v9 = NWEndpoint.Port.rawValue.getter(v8);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  id v10 = [objc_allocWithZone(WiFiAwarePublishDatapathServiceSpecificInfo) initWithProtocolType:v5 servicePort:v9];
  uint64_t v11 = *(void *)(v6 + *(int *)(v7 + 24) + 8);
  swift_bridgeObjectRetain(v11);
  NSString v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v10, "setHostname:", v12, swift_bridgeObjectRelease(v11).n128_f64[0]);

  return v10;
}

unint64_t sub_1002B1600()
{
  __int128 v8 = *(_OWORD *)(v0 + qword_100410B90 + 16);
  __int16 v9 = *(_WORD *)(v0 + qword_100410B90 + 32);
  __int128 v10 = *(_OWORD *)(v0 + qword_100410B90);
  __int128 v11 = v8;
  __int16 v12 = v9;
  sub_1000209DC((uint64_t)&v10);
  sub_1000209DC((uint64_t)&v11);
  v1._countAndFlagsBits = DNSRecords.PTR.description.getter();
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  sub_100020A04((uint64_t)&v10);
  sub_100020A04((uint64_t)&v11);
  v3._countAndFlagsBits = 0x203A6F543C20LL;
  v3._object = (void *)0xE600000000000000LL;
  String.append(_:)(v3);
  v4._countAndFlagsBits = WiFiAddress.description.getter(*(unsigned __int16 *)(v0 + qword_100410B88) | ((unint64_t)*(unsigned int *)(v0 + qword_100410B88 + 2) << 16));
  uint64_t v5 = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v5);
  v6._countAndFlagsBits = 62LL;
  v6._object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  return 0xD000000000000016LL;
}

unint64_t sub_1002B1724()
{
  return sub_1002B1600();
}

uint64_t sub_1002B1744(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AWDLPeer.AdvertisedService(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void *sub_1002B1788()
{
  Swift::String v1 = v0;
  sub_100002274((uint64_t *)&unk_10040ED20);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    *Swift::String v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

void *sub_1002B191C()
{
  Swift::String v1 = v0;
  sub_100002274((uint64_t *)&unk_100410580);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    *Swift::String v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

void *sub_1002B1ACC()
{
  Swift::String v1 = v0;
  sub_100002274((uint64_t *)&unk_1004104C0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    *Swift::String v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

void *sub_1002B1C74()
{
  Swift::String v1 = v0;
  sub_100002274((uint64_t *)&unk_10040ED50);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    *Swift::String v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v21 >= v13) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22)
      {
        int64_t v9 = v21 + 2;
        if (v21 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v22 = *(void *)(v6 + 8 * v9);
        if (!v22) {
          break;
        }
      }
    }

void *sub_1002B1E24()
{
  Swift::String v1 = v0;
  sub_100002274((uint64_t *)&unk_10040ED40);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    *Swift::String v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23)
      {
        int64_t v9 = v22 + 2;
        if (v22 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v23 = *(void *)(v6 + 8 * v9);
        if (!v23) {
          break;
        }
      }
    }

void *sub_1002B1FE8()
{
  return sub_1002B1FF4(qword_10040ED60);
}

void *sub_1002B1FF4(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100002274(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v3);
    *uint64_t v2 = v5;
    return result;
  }

  uint64_t result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v7 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v7 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }

unint64_t sub_1002B217C(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::UInt v10 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)(v18, *(void *)(v3 + 40));
        Hasher._combine(_:)(v10);
        unint64_t v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }

        else if (v11 >= v9)
        {
          goto LABEL_11;
        }

        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          unint64_t v13 = (void *)(v12 + 8 * v2);
          int64_t v14 = (void *)(v12 + 8 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *unint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }

unint64_t sub_1002B2324(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        unint64_t v11 = (unsigned __int16 *)(*(void *)(v3 + 48) + 6 * v6);
        uint64_t v12 = *(unsigned int *)(v11 + 1);
        uint64_t v13 = *v11;
        Hasher.init(_seed:)(v21, *(void *)(v3 + 40));
        NANClusterChangeEvent.hash(into:)((int)v21, v13 | (v12 << 16));
        unint64_t v14 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v9)
        {
          goto LABEL_11;
        }

        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(v3 + 48);
          unint64_t v16 = v15 + 6 * v2;
          uint64_t v17 = (int *)(v15 + 6 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v16 >= (unint64_t)v17 + 6))
          {
            int v10 = *v17;
            *(_WORD *)(v16 + 4) = *((_WORD *)v17 + 2);
            *(_DWORD *)unint64_t v16 = v10;
            int64_t v2 = v6;
          }
        }

unint64_t sub_1002B24E8(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v12 = *(void *)(v3 + 48) - v6 + 8 * v6;
        uint64_t v13 = *(unsigned int *)(v12 + 3);
        Swift::UInt8 v14 = *(_BYTE *)v12;
        uint64_t v15 = *(unsigned __int16 *)(v12 + 1);
        Hasher.init(_seed:)(v23, *(void *)(v3 + 40));
        Hasher._combine(_:)(v14);
        NANClusterChangeEvent.hash(into:)((int)v23, v15 | (v13 << 16));
        unint64_t v16 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v16 < v9) {
            goto LABEL_5;
          }
        }

        else if (v16 >= v9)
        {
          goto LABEL_11;
        }

        if (v2 >= (uint64_t)v16)
        {
LABEL_11:
          uint64_t v17 = *(void *)(v3 + 48);
          unint64_t v18 = v17 - v2 + 8 * v2;
          uint64_t v19 = v17 - v6 + 8 * v6;
          if (v2 != v6 || (int64_t v2 = v6, v18 >= v19 + 7))
          {
            int v10 = *(_DWORD *)v19;
            __int16 v11 = *(_WORD *)(v19 + 4);
            *(_BYTE *)(v18 + 6) = *(_BYTE *)(v19 + 6);
            *(_WORD *)(v18 + 4) = v11;
            *(_DWORD *)unint64_t v18 = v10;
            int64_t v2 = v6;
          }
        }

Swift::Int sub_1002B26CC(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  char v6 = *(_BYTE *)(a3 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (1LL << v6) + 63;
  uint64_t v9 = v8 >> 6;
  size_t v10 = 8 * (v8 >> 6);
  if (v7 <= 0xD || (swift_stdlib_isStackAllocationSafe(8 * (v8 >> 6), 8LL) & 1) != 0)
  {
    __chkstk_darwin();
    bzero((char *)&v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0LL), v10);
    Swift::Int v11 = sub_1002B2848((unint64_t *)((char *)&v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v9, a3, a1);
    uint64_t v12 = swift_release(a3);
    if (v3) {
      swift_willThrow(v12);
    }
  }

  else
  {
    uint64_t v13 = (void *)swift_slowAlloc(v10, -1LL);
    bzero(v13, v10);
    Swift::Int v11 = sub_1002B2848((unint64_t *)v13, v9, a3, a1);
    swift_release(a3);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  return v11;
}

Swift::Int sub_1002B2848(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *))
{
  uint64_t v29 = a4;
  uint64_t v24 = a2;
  unint64_t v25 = a1;
  uint64_t v6 = *(void *)(type metadata accessor for AWDLPeer.AdvertisedService(0LL) - 8);
  Swift::Int result = __chkstk_darwin();
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v10 = 0LL;
  uint64_t v30 = a3;
  uint64_t v11 = *(void *)(a3 + 56);
  uint64_t v26 = 0LL;
  uint64_t v27 = a3 + 56;
  uint64_t v12 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v28 = (unint64_t)(v12 + 63) >> 6;
  while (v14)
  {
    unint64_t v15 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v16 = v15 | (v10 << 6);
LABEL_17:
    sub_100057FE8( *(void *)(v30 + 48) + *(void *)(v6 + 72) * v16,  (uint64_t)v9,  type metadata accessor for AWDLPeer.AdvertisedService);
    char v20 = v29(v9);
    Swift::Int result = sub_10005802C((uint64_t)v9, type metadata accessor for AWDLPeer.AdvertisedService);
    if (v4) {
      return result;
    }
    if ((v20 & 1) != 0)
    {
      *(unint64_t *)((char *)v25 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      BOOL v17 = __OFADD__(v26++, 1LL);
      if (v17) {
        goto LABEL_30;
      }
    }
  }

  BOOL v17 = __OFADD__(v10++, 1LL);
  if (v17)
  {
    __break(1u);
    goto LABEL_29;
  }

  if (v10 >= v28) {
    goto LABEL_27;
  }
  unint64_t v18 = *(void *)(v27 + 8 * v10);
  if (v18)
  {
LABEL_16:
    unint64_t v14 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
    goto LABEL_17;
  }

  int64_t v19 = v10 + 1;
  if (v10 + 1 >= v28) {
    goto LABEL_27;
  }
  unint64_t v18 = *(void *)(v27 + 8 * v19);
  if (v18) {
    goto LABEL_15;
  }
  int64_t v19 = v10 + 2;
  if (v10 + 2 >= v28) {
    goto LABEL_27;
  }
  unint64_t v18 = *(void *)(v27 + 8 * v19);
  if (v18) {
    goto LABEL_15;
  }
  int64_t v19 = v10 + 3;
  if (v10 + 3 >= v28)
  {
LABEL_27:
    uint64_t v21 = v24;
    uint64_t v22 = v26;
    uint64_t v23 = v30;
    swift_retain();
    return sub_1002B2A9C(v25, v21, v22, v23);
  }

  unint64_t v18 = *(void *)(v27 + 8 * v19);
  if (v18)
  {
LABEL_15:
    int64_t v10 = v19;
    goto LABEL_16;
  }

  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v10 >= v28) {
      goto LABEL_27;
    }
    unint64_t v18 = *(void *)(v27 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_16;
    }
  }

Swift::Int sub_1002B2A9C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v32 = a1;
  uint64_t v7 = *(void *)(type metadata accessor for AWDLPeer.AdvertisedService(0LL) - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a3)
  {
    swift_release(a4);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_100002274((uint64_t *)&unk_10040ECF0);
  Swift::Int result = static _SetStorage.allocate(capacity:)(a3);
  Swift::Int v10 = result;
  uint64_t v31 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0LL;
  }
  else {
    unint64_t v12 = *v32;
  }
  uint64_t v13 = 0LL;
  Swift::Int v14 = result + 56;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }

    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_40;
      }
      if (v17 >= v31)
      {
LABEL_37:
        swift_release(a4);
        return v10;
      }

      unint64_t v18 = v32[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v31) {
          goto LABEL_37;
        }
        unint64_t v18 = v32[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v31) {
            goto LABEL_37;
          }
          unint64_t v18 = v32[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v31) {
              goto LABEL_37;
            }
            unint64_t v18 = v32[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1LL)) {
                  goto LABEL_41;
                }
                if (v13 >= v31) {
                  goto LABEL_37;
                }
                unint64_t v18 = v32[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v13 = v19;
          }
        }
      }

uint64_t sub_1002B2D78(uint64_t a1)
{
  return sub_1002AC4B0(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1002B2D90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DNSRecords.SRV(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

BOOL sub_1002B2DD4(uint64_t a1, void *a2)
{
  return sub_1002AF1E4(a1, a2, *(void *)(v2 + 32));
}

uint64_t sub_1002B2DF4(uint64_t a1)
{
  return sub_1002A95A0(a1);
}

uint64_t sub_1002B2E18(uint64_t a1)
{
  return sub_1002A90DC( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned __int8 *)(a1 + 16) | (unsigned __int16)(*(unsigned __int8 *)(a1 + 17) << 8));
}

uint64_t sub_1002B2E50(uint64_t a1)
{
  return sub_1002A91A0(a1);
}

uint64_t sub_1002B2E74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_1004084F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002B2EBC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002B2EF0(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v31 = a2;
  uint64_t v30 = sub_100002274(&qword_10040D7B0);
  __chkstk_darwin();
  uint64_t v29 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v27 = a1 + 64;
  uint64_t v5 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & v4;
  int64_t v28 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v32 = a1;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v9 = 0LL;
  while (1)
  {
    if (v7)
    {
      uint64_t v33 = (v7 - 1) & v7;
      int64_t v34 = v9;
      unint64_t v10 = __clz(__rbit64(v7)) | (v9 << 6);
      goto LABEL_5;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v22 >= v28) {
      return swift_release(v32);
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    int64_t v24 = v9 + 1;
    if (!v23)
    {
      int64_t v24 = v9 + 2;
      if (v9 + 2 >= v28) {
        return swift_release(v32);
      }
      unint64_t v23 = *(void *)(v27 + 8 * v24);
      if (!v23)
      {
        int64_t v24 = v9 + 3;
        if (v9 + 3 >= v28) {
          return swift_release(v32);
        }
        unint64_t v23 = *(void *)(v27 + 8 * v24);
        if (!v23)
        {
          int64_t v24 = v9 + 4;
          if (v9 + 4 >= v28) {
            return swift_release(v32);
          }
          unint64_t v23 = *(void *)(v27 + 8 * v24);
          if (!v23) {
            break;
          }
        }
      }
    }

uint64_t *sub_1002B3188(uint64_t a1)
{
  uint64_t v3 = *v1;
  Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xEE006C6477612E65LL,  0x7265766F63736964LL,  0xEF656E69676E4579LL);
  uint64_t v4 = qword_10040E960;
  uint64_t v5 = *(void *)(v3 + 80);
  uint64_t v6 = *(void *)(v3 + 88);
  uint64_t v8 = type metadata accessor for AWDLDiscoveryEngine.Browse(0LL, v5, v6, v7);
  unint64_t v9 = sub_100004DEC();
  *(uint64_t *)((char *)v1 + v4) = Dictionary.init()(&type metadata for DNSRecords.Identifier, v8, v9);
  uint64_t v10 = qword_10040E968;
  uint64_t v12 = type metadata accessor for AWDLDiscoveryEngine.Advertise(0LL, v5, v6, v11);
  unint64_t v13 = sub_100004E30();
  *(uint64_t *)((char *)v1 + v10) = Dictionary.init()(&type metadata for DNSRecords.PTR, v12, v13);
  uint64_t v14 = qword_100410B70;
  uint64_t v16 = type metadata accessor for AWDLDiscoveryEngine.DatapathInitiator(0LL, v5, v6, v15);
  *(uint64_t *)((char *)v1 + v14) = Dictionary.init()(&type metadata for DNSRecords.PTR, v16, v13);
  *(uint64_t *)((char *)v1 + qword_100410B68) = a1;
  swift_unownedRetain(a1);
  return v1;
}

uint64_t *sub_1002B32D0(uint64_t a1)
{
  return sub_1002B3188(a1);
}

uint64_t sub_1002B3308(uint64_t a1, uint64_t a2)
{
  return sub_1002AFE98(a1 & 0xFFFFFFFFFFFFLL, a2, v2);
}

BOOL sub_1002B3314(uint64_t a1)
{
  return sub_1002AFF64(a1, v1);
}

void sub_1002B3330(void *a1)
{
}

uint64_t sub_1002B3368(void *a1)
{
  return sub_1002B33B8(a1, &qword_10040EA18, &qword_10040EA20) & 1;
}

uint64_t sub_1002B3390(void *a1)
{
  return sub_1002B33B8(a1, &qword_10040EB48, qword_10040EB50) & 1;
}

uint64_t sub_1002B33B8(void *a1, void *a2, void *a3)
{
  if (*(_BYTE *)(*a1 + *a2) == 1) {
    return (*(unsigned __int8 *)(*a1 + *a3) ^ 1) & 1;
  }
  else {
    return 0LL;
  }
}

void sub_1002B33EC(uint64_t *a1)
{
}

void *sub_1002B3404(void *result)
{
  *(_BYTE *)(*result + qword_10040EB50) = *(_BYTE *)(*result + qword_10040EB48);
  return result;
}

uint64_t sub_1002B3424(uint64_t *a1, uint64_t *a2)
{
  return sub_1002A99B4(a1, a2) & 1;
}

uint64_t sub_1002B3440(uint64_t *a1)
{
  return sub_1002A9AF0(a1);
}

uint64_t sub_1002B345C(uint64_t *a1)
{
  return sub_1002A8760(a1, *(void ***)(v1 + 32));
}

uint64_t sub_1002B3478(uint64_t *a1)
{
  return sub_1002A8A74(a1, *(void ***)(v1 + 32));
}

void *sub_1002B3494(void *result)
{
  *(_BYTE *)(*result + qword_10040EA18) = 1;
  return result;
}

void *sub_1002B34AC(void *result)
{
  *(_BYTE *)(*result + qword_10040EB48) = 1;
  return result;
}

uint64_t sub_1002B34C4(uint64_t *a1)
{
  return sub_1002B3440(a1);
}

uint64_t sub_1002B34D8(uint64_t *a1, uint64_t *a2)
{
  return sub_1002B3424(a1, a2) & 1;
}

uint64_t sub_1002B34F0(uint64_t a1)
{
  return sub_1002B2DF4(a1);
}

uint64_t sub_1002B3504(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  __int128 v3 = *(_OWORD *)(a1 + 96);
  v7[0] = *(_OWORD *)(a1 + 80);
  v7[1] = v3;
  uint64_t v8 = v2;
  v9[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = type metadata accessor for P2PController.Components(319LL, (uint64_t)v7);
  if (v5 <= 0x3F)
  {
    v9[1] = *(void *)(result - 8) + 64LL;
    _OWORD v9[2] = &unk_10035F680;
    v9[3] = &unk_10035F698;
    void v9[4] = &unk_10035F680;
    v9[5] = &unk_10035F698;
    v9[6] = &unk_10035F6B0;
    v9[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t result = type metadata accessor for Logger(319LL);
    if (v6 <= 0x3F)
    {
      v9[8] = *(void *)(result - 8) + 64LL;
      return swift_initClassMetadata2(a1, 0LL, 9LL, v9, a1 + 120);
    }
  }

  return result;
}

char *sub_1002B35D8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 160LL);
  uint64_t v2 = *(void *)(v0 + v1);
  __int128 v3 = (char *)v2;
  if (v2 == 1)
  {
    __int128 v3 = sub_1002B3D34();
    uint64_t v4 = *(void *)(v0 + v1);
    *(void *)(v0 + v1) = v3;
    swift_retain();
    sub_1002B8E50(v4);
  }

  sub_1002B8E60(v2);
  return v3;
}

uint64_t sub_1002B3640()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 144LL);
  uint64_t v2 = *(void *)(v0 + v1);
  uint64_t v3 = v2;
  if (v2 == 1)
  {
    uint64_t v3 = sub_1002B38D0();
    uint64_t v4 = *(void *)(v0 + v1);
    *(void *)(v0 + v1) = v3;
    swift_retain();
    sub_1002B8E50(v4);
  }

  sub_1002B8E60(v2);
  return v3;
}

void *sub_1002B36A8(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100267FB0(0, v1, 0);
  uint64_t result = (void *)sub_100303870(a1);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0LL;
  uint64_t v7 = a1 + 64;
  int64_t v19 = v1;
  int v20 = v4;
  uint64_t v21 = a1 + 64;
  while ((v5 & 0x8000000000000000LL) == 0 && v5 < 1LL << *(_BYTE *)(a1 + 32))
  {
    unint64_t v10 = (unint64_t)v5 >> 6;
    if (*(_DWORD *)(a1 + 36) != v4) {
      goto LABEL_26;
    }
    uint64_t result = [*(id *)(*(void *)(a1 + 48) + 8 * v5) uniqueIdentifier];
    uint64_t v11 = result;
    unint64_t v13 = _swiftEmptyArrayStorage[2];
    unint64_t v12 = _swiftEmptyArrayStorage[3];
    if (v13 >= v12 >> 1) {
      uint64_t result = (void *)sub_100267FB0(v12 > 1, v13 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v13 + 1;
    _swiftEmptyArrayStorage[v13 + 4] = v11;
    int64_t v8 = 1LL << *(_BYTE *)(a1 + 32);
    if (v5 >= v8) {
      goto LABEL_27;
    }
    uint64_t v7 = a1 + 64;
    uint64_t v14 = *(void *)(v21 + 8 * v10);
    if ((v14 & (1LL << v5)) == 0) {
      goto LABEL_28;
    }
    int v4 = v20;
    if (*(_DWORD *)(a1 + 36) != v20) {
      goto LABEL_29;
    }
    unint64_t v15 = v14 & (-2LL << (v5 & 0x3F));
    if (v15)
    {
      int64_t v8 = __clz(__rbit64(v15)) | v5 & 0xFFFFFFFFFFFFFFC0LL;
      int64_t v9 = v19;
    }

    else
    {
      unint64_t v16 = v10 + 1;
      unint64_t v17 = (unint64_t)(v8 + 63) >> 6;
      int64_t v9 = v19;
      if (v10 + 1 < v17)
      {
        unint64_t v18 = *(void *)(v21 + 8 * v16);
        if (!v18)
        {
          unint64_t v16 = v10 + 2;
          if (v10 + 2 >= v17) {
            goto LABEL_4;
          }
          unint64_t v18 = *(void *)(v21 + 8 * v16);
          if (!v18)
          {
            while (v17 - 3 != v10)
            {
              unint64_t v18 = *(void *)(a1 + 88 + 8 * v10++);
              if (v18)
              {
                unint64_t v16 = v10 + 2;
                goto LABEL_17;
              }
            }

            goto LABEL_4;
          }
        }

uint64_t sub_1002B38D0()
{
  int64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 88LL);
  uint64_t v5 = *(void *)(*v0 + 112LL);
  v59[0] = *(void *)(*v0 + 80LL);
  uint64_t v4 = v59[0];
  v59[1] = v3;
  uint64_t v51 = v3;
  __int128 v55 = *(_OWORD *)(v2 + 96);
  __int128 v60 = v55;
  uint64_t v61 = v5;
  uint64_t v58 = type metadata accessor for P2PController.Components(0LL, (uint64_t)v59);
  uint64_t v53 = *(void *)(v58 - 8);
  __chkstk_darwin();
  uint64_t v54 = (char *)&v49 - v6;
  uint64_t v57 = *(void *)(v4 - 8);
  __chkstk_darwin();
  unint64_t v56 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for Optional(0LL, v4);
  __chkstk_darwin();
  uint64_t v52 = (char *)&v49 - v8;
  uint64_t v9 = v55;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v55,  v4,  &protocol requirements base descriptor for DeviceDriver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v9,  v4,  AssociatedTypeWitness,  &protocol requirements base descriptor for DeviceDriver,  &associated conformance descriptor for DeviceDriver.DeviceDriver.Device: Device);
  uint64_t v12 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for Device);
  uint64_t v13 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v12,  &protocol requirements base descriptor for Device,  &associated conformance descriptor for Device.Device.PreferencesBacking: PreferencesStorage);
  uint64_t v15 = type metadata accessor for Preferences(0LL, v12, v13, v14);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin();
  unint64_t v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  int v20 = (char *)&v49 - v19;
  *(void *)&__int128 v55 = v2;
  *((_BYTE *)v1 + *(void *)(v2 + 136)) = 1;
  uint64_t v21 = (char *)v1 + *(void *)(*v1 + 128LL);
  int64_t v22 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v22((char *)&v49 - v19, v21, v15);
  char v23 = Preferences.nan.getter(v15);
  int64_t v24 = *(void (**)(char *, uint64_t))(v16 + 8);
  v24(v20, v15);
  uint64_t v25 = 0LL;
  if ((v23 & 1) != 0)
  {
    uint64_t v26 = v1[2];
    (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v56, v26 + *(void *)(*(void *)v26 + 96LL), v4);
    uint64_t v27 = (uint64_t *)(v26 + *(void *)(*(void *)v26 + 104LL));
    uint64_t v29 = *v27;
    uint64_t v28 = v27[1];
    unint64_t v50 = v21;
    v22(v18, v21, v15);
    swift_bridgeObjectRetain(v28);
    uint64_t v33 = Preferences.nanDataMACAddress.getter(v15, v30, v31, v32);
    v24(v18, v15);
    if ((v33 & 0x1000000000000LL) != 0) {
      static WiFiAddress.random()();
    }
    WiFiAddress.linkLocalAddress()(v34);
    uint64_t v35 = (uint64_t)v52;
    unint64_t v37 = v56;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v51 + 8) + 16LL))( 2LL,  v29,  v28,  v36 & 0xFFFFFFFFFFFFLL,  v4);
    uint64_t v38 = v58;
    uint64_t v39 = v57;
    (*(void (**)(char *, uint64_t))(v57 + 8))(v37, v4);
    swift_bridgeObjectRelease(v28);
    uint64_t v21 = v50;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v35, 0LL, 1LL, v4);
    uint64_t v40 = v55;
    uint64_t WitnessTable = swift_getWitnessTable(&unk_10035F748, v55);
    type metadata accessor for NANInterface(0LL, v40, WitnessTable, v42);
    uint64_t v43 = (uint64_t)v54;
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v54, v21, v38);
    swift_retain();
    uint64_t v25 = sub_1002EC268(v35, v43, v26);
  }

  uint64_t v44 = v58;
  uint64_t v45 = *(void *)&v21[*(int *)(v58 + 64)];
  swift_retain();
  swift_retain();
  sub_1002701D8(v25);
  swift_release(v45);
  swift_release(v25);
  uint64_t v46 = *(void *)&v21[*(int *)(v44 + 68)];
  swift_beginAccess(v46 + 16, v59, 33LL, 0LL);
  uint64_t v47 = *(void *)(v46 + 16);
  swift_retain();
  swift_retain();
  swift_unownedRelease(v47);
  *(void *)(v46 + swift_weakDestroy(v0 + 16) = v25;
  swift_endAccess(v59);
  swift_unownedRetain(v25);
  swift_release(v46);
  swift_release(v25);
  return v25;
}

char *sub_1002B3D34()
{
  int64_t v1 = v0;
  __int128 v68 = 0LL;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 88LL);
  uint64_t v5 = *(void *)(*v0 + 112LL);
  uint64_t v72 = *(void *)(*v0 + 80LL);
  uint64_t v4 = v72;
  uint64_t v73 = v3;
  uint64_t v62 = v3;
  __int128 v69 = *(_OWORD *)(v2 + 96);
  __int128 v74 = v69;
  uint64_t v75 = v5;
  uint64_t v70 = type metadata accessor for P2PController.Components(0LL, (uint64_t)&v72);
  uint64_t v64 = *(void *)(v70 - 8);
  __chkstk_darwin();
  unint64_t v65 = (char *)&v59 - v6;
  uint64_t v66 = *(void *)(v4 - 8);
  __chkstk_darwin();
  __int128 v67 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for Optional(0LL, v4);
  __chkstk_darwin();
  __int128 v63 = (char *)&v59 - v8;
  uint64_t v9 = v69;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v69,  v4,  &protocol requirements base descriptor for DeviceDriver);
  *(void *)&__int128 v69 = v9;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v9,  v4,  AssociatedTypeWitness,  &protocol requirements base descriptor for DeviceDriver,  &associated conformance descriptor for DeviceDriver.DeviceDriver.Device: Device);
  uint64_t v12 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for Device);
  uint64_t v13 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v12,  &protocol requirements base descriptor for Device,  &associated conformance descriptor for Device.Device.PreferencesBacking: PreferencesStorage);
  uint64_t v15 = type metadata accessor for Preferences(0LL, v12, v13, v14);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin();
  unint64_t v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  int v20 = (char *)&v59 - v19;
  *((_BYTE *)v1 + *(void *)(v2 + 1swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52)) = 1;
  uint64_t v21 = (char *)v1 + *(void *)(*v1 + 128LL);
  int64_t v22 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v22((char *)&v59 - v19, v21, v15);
  LOBYTE(v9) = Preferences.awdl.getter(v15);
  char v23 = *(void (**)(char *, uint64_t))(v16 + 8);
  v23(v20, v15);
  if ((v9 & 1) != 0)
  {
    __int128 v60 = v1;
    uint64_t v24 = v1[2];
    (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v67, v24 + *(void *)(*(void *)v24 + 96LL), v4);
    uint64_t v25 = *(void *)(*(void *)v24 + 104LL);
    uint64_t v59 = v24;
    uint64_t v26 = (uint64_t *)(v24 + v25);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    uint64_t v61 = v21;
    v22(v18, v21, v15);
    swift_bridgeObjectRetain(v27);
    uint64_t v32 = Preferences.awdlMACAddress.getter(v15, v29, v30, v31);
    v23(v18, v15);
    if ((v32 & 0x1000000000000LL) != 0) {
      static WiFiAddress.random()();
    }
    WiFiAddress.linkLocalAddress()(v33);
    uint64_t v34 = (uint64_t)v63;
    unint64_t v37 = v67;
    uint64_t v36 = v68;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v62 + 8) + 16LL))( 1LL,  v28,  v27,  v35 & 0xFFFFFFFFFFFFLL,  v4);
    uint64_t v38 = v70;
    if (v36)
    {
      swift_bridgeObjectRelease(v27);
      swift_errorRelease(v36);
      uint64_t v39 = v66;
      (*(void (**)(char *, uint64_t))(v66 + 8))(v37, v4);
      uint64_t v40 = 1LL;
    }

    else
    {
      uint64_t v39 = v66;
      (*(void (**)(char *, uint64_t))(v66 + 8))(v37, v4);
      swift_bridgeObjectRelease(v27);
      uint64_t v40 = 0LL;
    }

    int64_t v1 = v60;
    uint64_t v42 = v61;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v34, v40, 1LL, v4);
    uint64_t WitnessTable = swift_getWitnessTable(&unk_10035F780, v2);
    type metadata accessor for AWDLInterface(0LL, v2, WitnessTable, v44);
    uint64_t v45 = (uint64_t)v65;
    (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v65, v42, v38);
    uint64_t v46 = v59;
    swift_retain();
    uint64_t v41 = sub_100305178(v34, v45, v46);
  }

  else
  {
    uint64_t v41 = v68;
    uint64_t v38 = v70;
    uint64_t v42 = v21;
  }

  unint64_t v71 = v41;
  uint64_t v47 = swift_getWitnessTable(&unk_10035F780, v2);
  uint64_t v49 = type metadata accessor for AWDLInterface(255LL, v2, v47, v48);
  type metadata accessor for Optional(0LL, v49);
  uint64_t v50 = swift_getWitnessTable(&unk_10035F764, v2);
  uint64_t v51 = swift_getWitnessTable(&unk_10035F748, v2);
  uint64_t v72 = v2;
  uint64_t v73 = v47;
  *(void *)&__int128 v74 = v50;
  *((void *)&v74 + 1) = v51;
  uint64_t v75 = v69;
  uint64_t v52 = type metadata accessor for AWDLNetworkAgent(0LL, (uint64_t)&v72);
  sub_100013EF8( (void (*)(char *, char *))sub_1002B8E34,  (uint64_t)v1,  (uint64_t)&type metadata for Never,  v52,  v53,  (uint64_t)&v72);
  uint64_t v54 = *(void *)(*v1 + 168LL);
  __int128 v55 = *(void **)((char *)v1 + v54);
  *(void *)((char *)v1 + v54) = v72;

  swift_weakAssign(*(void *)&v42[*(int *)(v38 + 64)] + qword_100410AC0, v41);
  uint64_t v56 = *(void *)&v42[*(int *)(v38 + 68)];
  swift_beginAccess(v56 + 24, &v72, 33LL, 0LL);
  uint64_t v57 = *(void *)(v56 + 24);
  swift_retain();
  swift_retain();
  swift_unownedRelease(v57);
  *(void *)(v56 + 24) = v41;
  swift_endAccess(&v72);
  swift_unownedRetain(v41);
  swift_release(v56);
  swift_release(v41);
  return v41;
}

uint64_t sub_1002B4260@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a5,  a3,  &protocol requirements base descriptor for DeviceDriver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a5,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for DeviceDriver,  &associated conformance descriptor for DeviceDriver.DeviceDriver.Device: Device);
  uint64_t v16 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for Device);
  uint64_t v17 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v16,  &protocol requirements base descriptor for Device,  &associated conformance descriptor for Device.Device.PreferencesBacking: PreferencesStorage);
  uint64_t v19 = type metadata accessor for Preferences(0LL, v16, v17, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32LL))(a8, a1, v19);
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v32 = a4;
  uint64_t v33 = a6;
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  uint64_t v20 = a6;
  uint64_t v40 = a7;
  uint64_t v21 = (int *)type metadata accessor for P2PController.Components(0LL, (uint64_t)&v36);
  *(void *)(a8 + v21[15]) = a2;
  uint64_t v22 = v21[16];
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t v39 = v20;
  uint64_t v40 = a7;
  uint64_t v23 = type metadata accessor for P2PController(255LL, (uint64_t)&v36);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10035F780, v23);
  uint64_t v25 = swift_getWitnessTable(&unk_10035F764, v23);
  uint64_t v26 = swift_getWitnessTable(&unk_10035F748, v23);
  uint64_t v36 = v23;
  uint64_t v37 = WitnessTable;
  uint64_t v38 = v25;
  uint64_t v39 = v26;
  type metadata accessor for RadioResourceManager(0LL, (uint64_t)&v36);
  *(void *)(a8 + v22) = sub_10026C0B4();
  uint64_t v27 = v21[17];
  uint64_t v36 = v23;
  uint64_t v37 = WitnessTable;
  uint64_t v38 = v25;
  uint64_t v39 = v26;
  type metadata accessor for PeerCacheManager(0LL, (uint64_t)&v36);
  *(void *)(a8 + v27) = sub_1002FD268();
  uint64_t v28 = v21[18];
  uint64_t v36 = a3;
  uint64_t v37 = v32;
  uint64_t v38 = a5;
  uint64_t v39 = v33;
  uint64_t v40 = a7;
  _s22P2PActivityCoordinatorCMa(0LL, (uint64_t)&v36);
  *(void *)(a8 + v28) = sub_100230498();
  uint64_t v29 = v21[19];
  uint64_t v30 = type metadata accessor for CoreAnalyticsCommunicator();
  uint64_t result = swift_allocObject(v30, 17LL, 7LL);
  *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
  *(void *)(a8 + v29) = result;
  return result;
}

uint64_t sub_1002B4498@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(a1 + 64));
  *a2 = v3;
  return swift_retain(v3);
}

uint64_t sub_1002B44A8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(a1 + 68));
  *a2 = v3;
  return swift_retain(v3);
}

uint64_t sub_1002B44B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v4,  v5,  &protocol requirements base descriptor for DeviceDriver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v4,  v5,  AssociatedTypeWitness,  &protocol requirements base descriptor for DeviceDriver,  &associated conformance descriptor for DeviceDriver.DeviceDriver.Device: Device);
  uint64_t v8 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for Device);
  uint64_t v9 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v8,  &protocol requirements base descriptor for Device,  &associated conformance descriptor for Device.Device.PreferencesBacking: PreferencesStorage);
  uint64_t v11 = type metadata accessor for Preferences(0LL, v8, v9, v10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL))(a2, v2, v11);
}

uint64_t sub_1002B459C(uint64_t a1)
{
  return swift_retain(*(void *)(v1 + *(int *)(a1 + 60)));
}

uint64_t sub_1002B45A8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(a1 + 72));
  *a2 = v3;
  return swift_retain(v3);
}

uint64_t sub_1002B45B8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(a1 + 76));
  *a2 = v3;
  return swift_retain(v3);
}

double sub_1002B45C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v13[0] = a2;
  v13[1] = a3;
  _OWORD v13[2] = a4;
  void v13[3] = a5;
  v13[4] = a6;
  uint64_t v6 = *(void *)(a1 + *(int *)(type metadata accessor for P2PController.Components(0LL, (uint64_t)v13) + 60));
  uint64_t v7 = NANConstants.airplayServiceName.unsafeMutableAddressor();
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, __n128))(*(void *)v6 + 128LL);
  __n128 v11 = swift_bridgeObjectRetain(v9);
  v10(v8, v9, v11);
  *(void *)&double result = swift_bridgeObjectRelease(v9).n128_u64[0];
  return result;
}

char *sub_1002B4640@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, char **a3@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *a1;
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10035F780, *a2);
  uint64_t v8 = swift_getWitnessTable(&unk_10035F764, v5);
  uint64_t v9 = swift_getWitnessTable(&unk_10035F748, v5);
  uint64_t v10 = *(void *)(v5 + 96);
  *(void *)&__int128 v14 = v5;
  *((void *)&v14 + 1) = WitnessTable;
  uint64_t v15 = v8;
  *(void *)&__int128 v16 = v9;
  *((void *)&v16 + 1) = v10;
  type metadata accessor for AWDLNetworkAgent(0LL, (uint64_t)&v14);
  __n128 v11 = (char *)a2 + *(void *)(v5 + 128);
  __int128 v14 = *(_OWORD *)(v5 + 80);
  uint64_t v15 = v10;
  __int128 v16 = *(_OWORD *)(v5 + 104);
  uint64_t v12 = *(void *)&v11[*(int *)(type metadata accessor for P2PController.Components(0LL, (uint64_t)&v14) + 72)];
  swift_retain();
  swift_retain();
  double result = sub_1002DDA38(v6, v12);
  *a3 = result;
  return result;
}

uint64_t sub_1002B473C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v45 = a1;
  uint64_t v6 = *v2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v48 = *(void *)(v7 - 8);
  uint64_t v49 = v7;
  __chkstk_darwin();
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v46 = *(void *)(v10 - 8);
  uint64_t v47 = v10;
  __chkstk_darwin();
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Lock();
  swift_allocObject(v13, 24LL, 7LL);
  uint64_t v14 = Lock.init()();
  uint64_t v15 = swift_allocObject(&unk_1003F9250, 17LL, 7LL);
  *(_BYTE *)(v15 + swift_weakDestroy(v0 + 16) = 0;
  uint64_t v16 = swift_allocObject(&unk_1003F9250, 17LL, 7LL);
  *(_BYTE *)(v16 + swift_weakDestroy(v0 + 16) = 0;
  uint64_t v17 = (char *)v3 + *(void *)(*v3 + 128LL);
  uint64_t v18 = *(uint64_t (**)())(v6 + 112);
  __int128 v19 = *(_OWORD *)(v6 + 96);
  __int128 aBlock = *(_OWORD *)(v6 + 80);
  __int128 v52 = v19;
  uint64_t v53 = v18;
  uint64_t v20 = *(void *)&v17[*(int *)(type metadata accessor for P2PController.Components(0LL, (uint64_t)&aBlock) + 72)];
  swift_retain();
  sub_100239D64();
  swift_release(v20);
  uint64_t v21 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v22 = (void *)swift_allocObject(&unk_1003F9278, 64LL, 7LL);
  v22[2] = v3;
  v22[3] = v14;
  uint64_t v40 = a2;
  uint64_t v41 = v14;
  uint64_t v22[4] = v15;
  v22[5] = v16;
  v22[6] = a1;
  v22[7] = a2;
  uint64_t v53 = sub_1002B8DF8;
  uint64_t v54 = v22;
  *(void *)&__int128 aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256LL;
  *(void *)&__int128 v52 = sub_1000021F0;
  *((void *)&v52 + 1) = &unk_1003F9290;
  uint64_t v23 = _Block_copy(&aBlock);
  id v24 = v21;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v25 = swift_retain();
  static DispatchQoS.unspecified.getter(v25);
  uint64_t v50 = _swiftEmptyArrayStorage;
  unint64_t v26 = sub_100002234();
  unint64_t v43 = v26;
  uint64_t v27 = sub_100002274((uint64_t *)&unk_1004052A0);
  uint64_t v42 = v27;
  unint64_t v44 = sub_1000022B4();
  uint64_t v28 = v49;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v50, v27, v44, v49, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v9, v23);
  _Block_release(v23);

  uint64_t v48 = *(void *)(v48 + 8);
  ((void (*)(char *, uint64_t))v48)(v9, v28);
  uint64_t v29 = v47;
  uint64_t v46 = *(void *)(v46 + 8);
  ((void (*)(char *, uint64_t))v46)(v12, v47);
  swift_release(v54);
  uint64_t v30 = (void *)*OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v31 = (void *)swift_allocObject(&unk_1003F92C8, 64LL, 7LL);
  uint64_t v32 = v40;
  uint64_t v33 = v41;
  v31[2] = v3;
  v31[3] = v33;
  v31[4] = v16;
  v31[5] = v15;
  v31[6] = v45;
  v31[7] = v32;
  uint64_t v53 = sub_1002B8E28;
  uint64_t v54 = v31;
  *(void *)&__int128 aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256LL;
  *(void *)&__int128 v52 = sub_1000021F0;
  *((void *)&v52 + 1) = &unk_1003F92E0;
  uint64_t v34 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v35 = v30;
  static DispatchQoS.unspecified.getter(v35);
  uint64_t v50 = _swiftEmptyArrayStorage;
  uint64_t v36 = v49;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v50, v42, v44, v49, v43);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v9, v34);
  _Block_release(v34);
  swift_release(v33);

  ((void (*)(char *, uint64_t))v48)(v9, v36);
  ((void (*)(char *, uint64_t))v46)(v12, v29);
  uint64_t v37 = v54;
  swift_release(v15);
  swift_release(v16);
  return swift_release(v37);
}

void sub_1002B4B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v30 = a5;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v32 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v13 = *(void *)(v31 - 8);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = (_BYTE *)(a3 + 16);
  uint64_t v17 = (unsigned __int8 *)(a4 + 16);
  if (*(_BYTE *)(a1 + *(void *)(*(void *)a1 + 136LL)) == 1)
  {
    uint64_t v18 = sub_1002B3640();
    if (v18)
    {
      uint64_t v19 = v18;
      sub_1002EC2B8();
      swift_release(v19);
    }

    uint64_t v20 = *(void *)(*(void *)a1 + 144LL);
    uint64_t v21 = *(void *)(a1 + v20);
    *(void *)(a1 + v20) = 0LL;
    sub_1002B8E50(v21);
  }

  Lock.lock()();
  swift_beginAccess(v16, v37, 1LL, 0LL);
  *uint64_t v16 = 1;
  swift_beginAccess(v17, v36, 0LL, 0LL);
  int v22 = *v17;
  Lock.unlock()();
  if (v22 == 1)
  {
    uint64_t v23 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
    aBlock[4] = v30;
    uint64_t v35 = a6;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000021F0;
    aBlock[3] = &unk_1003F9330;
    id v24 = _Block_copy(aBlock);
    id v25 = v23;
    uint64_t v26 = swift_retain();
    static DispatchQoS.unspecified.getter(v26);
    uint64_t v33 = _swiftEmptyArrayStorage;
    unint64_t v27 = sub_100002234();
    uint64_t v28 = sub_100002274((uint64_t *)&unk_1004052A0);
    unint64_t v29 = sub_1000022B4();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v28, v29, v10, v27);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v12, v24);
    _Block_release(v24);

    (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v10);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v31);
    swift_release(v35);
  }

void sub_1002B4D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v33 = a5;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v35 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v13 = *(void *)(v34 - 8);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = (_BYTE *)(a3 + 16);
  uint64_t v17 = (unsigned __int8 *)(a4 + 16);
  if (*(_BYTE *)(a1 + *(void *)(*(void *)a1 + 152LL)) == 1)
  {
    uint64_t v18 = sub_1002B35D8();
    if (v18)
    {
      int v22 = v18;
      sub_1003051C8((uint64_t)v18, v19, v20, v21);
      swift_release(v22);
    }

    uint64_t v23 = *(void *)(*(void *)a1 + 160LL);
    uint64_t v24 = *(void *)(a1 + v23);
    *(void *)(a1 + v23) = 0LL;
    sub_1002B8E50(v24);
  }

  Lock.lock()();
  swift_beginAccess(v16, v40, 1LL, 0LL);
  *uint64_t v16 = 1;
  swift_beginAccess(v17, v39, 0LL, 0LL);
  int v25 = *v17;
  Lock.unlock()();
  if (v25 == 1)
  {
    uint64_t v26 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
    aBlock[4] = v33;
    uint64_t v38 = a6;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000021F0;
    aBlock[3] = &unk_1003F9308;
    unint64_t v27 = _Block_copy(aBlock);
    id v28 = v26;
    uint64_t v29 = swift_retain();
    static DispatchQoS.unspecified.getter(v29);
    uint64_t v36 = _swiftEmptyArrayStorage;
    unint64_t v30 = sub_100002234();
    uint64_t v31 = sub_100002274((uint64_t *)&unk_1004052A0);
    unint64_t v32 = sub_1000022B4();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v31, v32, v10, v30);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v12, v27);
    _Block_release(v27);

    (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v10);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v34);
    swift_release(v38);
  }

void *sub_1002B4FF4()
{
  uint64_t v1 = *v0;
  swift_release(v0[2]);
  uint64_t v2 = (char *)v0 + *(void *)(*v0 + 128LL);
  uint64_t v3 = *(void *)(v1 + 112);
  __int128 v4 = *(_OWORD *)(v1 + 96);
  v9[0] = *(_OWORD *)(v1 + 80);
  v9[1] = v4;
  uint64_t v10 = v3;
  uint64_t v5 = type metadata accessor for P2PController.Components(0LL, (uint64_t)v9);
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v2, v5);
  sub_1002B8E50(*(void *)((char *)v0 + *(void *)(*v0 + 144LL)));
  sub_1002B8E50(*(void *)((char *)v0 + *(void *)(*v0 + 160LL)));

  uint64_t v6 = (char *)v0 + *(void *)(*v0 + 184LL);
  uint64_t v7 = type metadata accessor for Logger(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
  return v0;
}

uint64_t sub_1002B50D0()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for P2PController(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for P2PController);
}

uint64_t type metadata accessor for P2PController.Components(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for P2PController.Components);
}

uint64_t sub_1002B510C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v2,  v3,  &protocol requirements base descriptor for DeviceDriver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v2,  v3,  AssociatedTypeWitness,  &protocol requirements base descriptor for DeviceDriver,  &associated conformance descriptor for DeviceDriver.DeviceDriver.Device: Device);
  uint64_t v6 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for Device);
  uint64_t v7 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v6,  &protocol requirements base descriptor for Device,  &associated conformance descriptor for Device.Device.PreferencesBacking: PreferencesStorage);
  uint64_t result = type metadata accessor for Preferences(319LL, v6, v7, v8);
  if (v10 <= 0x3F)
  {
    v11[0] = *(void *)(result - 8) + 64LL;
    v11[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    _OWORD v11[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    _OWORD v11[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v11[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v11[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 0LL, 6LL, v11, a1 + 56);
    return 0LL;
  }

  return result;
}

void *sub_1002B5234(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 32);
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v5,  v6,  &protocol requirements base descriptor for DeviceDriver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v5,  v6,  AssociatedTypeWitness,  &protocol requirements base descriptor for DeviceDriver,  &associated conformance descriptor for DeviceDriver.DeviceDriver.Device: Device);
  uint64_t v9 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for Device);
  uint64_t v10 = *(void *)(v9 - 8);
  int v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = v11 | 7LL;
  uint64_t v13 = ~v12;
  if ((v11 & 0x100000) != 0) {
    goto LABEL_5;
  }
  uint64_t v14 = v9;
  uint64_t v15 = *(void *)(v10 + 64);
  uint64_t v16 = v15 + 3 + v11;
  unint64_t v17 = (v15 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  unint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFF8LL) + 25;
  unint64_t v19 = v17 + v11;
  unint64_t v20 = (v16
       + ((v19
         + (((v11 | 3LL)
           + v15
           + 3
           + ((v16
             + ((v18
               + v11
               + ((v12 + 1) & ~v12)
               + ((v12
                 + v17
                 + (((v11 | 3LL)
                   + v15
                   + 3
                   + ((v16
                     + ((v16 + (v16 & ~(unint64_t)v11)) & ~(unint64_t)v11)) & ~(unint64_t)v11)) & ~(v11 | 3LL))) & ~v12)) & ~(unint64_t)v11)) & ~(unint64_t)v11)) & ~(v11 | 3LL))) & ~(unint64_t)v11)) & ~(unint64_t)v11;
  uint64_t v21 = v12 + v15 + 3;
  unint64_t v22 = (v15 & 0xFFFFFFFFFFFFFFF8LL) + 17;
  unint64_t v23 = (v12 + v22 + ((v21 + v20) & ~v12)) & ~v12;
  unint64_t v24 = v22 + v11;
  unint64_t v25 = (v12
       + v18
       + ((v12
         + v18
         + ((v21
           + ((v18 + v11 + ((v21 + ((v24 + v23) & ~(unint64_t)v11)) & ~v12)) & ~(unint64_t)v11)) & ~v12)) & ~v12)) & ~v12;
  unint64_t v26 = v24 + ((v11 + 8LL) & ~v12);
  if (((((((((((((v16
                 + ((v16 + ((v26 + v25) & ~(unint64_t)v11)) & ~(unint64_t)v11)) & ~(unint64_t)v11)
               + v15
               + 3
               + 7) & 0xFFFFFFFFFFFFFFF8LL)
             + 15) & 0xFFFFFFFFFFFFFFF8LL)
           + 15) & 0xFFFFFFFFFFFFFFF8LL)
         + 15) & 0xFFFFFFFFFFFFFFF8LL)
       + 15) & 0xFFFFFFFFFFFFFFF8LL)
     + 8 > 0x18)
  {
LABEL_5:
    uint64_t v127 = *a2;
    *a1 = *a2;
    uint64_t v107 = (void *)(v127 + ((v11 + 16LL) & v13));
  }

  else
  {
    unint64_t v27 = ~(unint64_t)v11;
    uint64_t v140 = ~(v11 | 3LL);
    id v28 = *(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16);
    unint64_t v132 = v24;
    unint64_t v133 = v18 + v11;
    uint64_t v29 = a1;
    uint64_t v139 = (v11 | 3LL) + v15 + 3;
    unint64_t v130 = v133 + ((v12 + 1) & ~v12);
    unint64_t v131 = v19;
    uint64_t v30 = v14;
    uint64_t v31 = a1;
    uint64_t v32 = v30;
    unint64_t v135 = v24 + ((v11 + 8LL) & ~v12);
    uint64_t v136 = ((v16 + ((v16 + ((v26 + v25) & v27)) & v27)) & v27) + v15 + 3;
    ((void (*)(void *, void *))v28)(v29, a2);
    char v137 = v31;
    uint64_t v33 = (char *)v31 + v15;
    *uint64_t v33 = *((_BYTE *)a2 + v15);
    v33[1] = *((_BYTE *)a2 + v15 + 1);
    v33[2] = *((_BYTE *)a2 + v15 + 2);
    unint64_t v34 = ((unint64_t)v31 + v16) & v27;
    unint64_t v35 = ((unint64_t)a2 + v16) & v27;
    v28(v34, v35, v32);
    uint64_t v36 = (_BYTE *)(v34 + v15);
    *uint64_t v36 = *(_BYTE *)(v35 + v15);
    v36[1] = *(_BYTE *)(v35 + v15 + 1);
    v36[2] = *(_BYTE *)(v35 + v15 + 2);
    unint64_t v37 = (v16 + v34) & v27;
    unint64_t v38 = (v16 + v35) & v27;
    v28(v37, v38, v32);
    uint64_t v39 = (_BYTE *)(v37 + v15);
    *uint64_t v39 = *(_BYTE *)(v38 + v15);
    v39[1] = *(_BYTE *)(v38 + v15 + 1);
    v39[2] = *(_BYTE *)(v38 + v15 + 2);
    unint64_t v40 = (v16 + v37) & v27;
    unint64_t v41 = (v16 + v38) & v27;
    v28(v40, v41, v32);
    uint64_t v42 = (_BYTE *)(v40 + v15);
    *uint64_t v42 = *(_BYTE *)(v41 + v15);
    v42[1] = *(_BYTE *)(v41 + v15 + 1);
    v42[2] = *(_BYTE *)(v41 + v15 + 2);
    uint64_t v43 = (v139 + v40) & v140;
    uint64_t v44 = (v139 + v41) & v140;
    v28(v43, v44, v32);
    *(_BYTE *)(v43 + v15) = *(_BYTE *)(v44 + v15);
    unint64_t v45 = (v43 + v15) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v46 = (v44 + v15) & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)(v45 + 4) = *(_DWORD *)(v46 + 4);
    *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
    uint64_t v134 = a2;
    uint64_t v47 = (_BYTE *)((v15 + 16 + v44) & v13);
    uint64_t v48 = v13;
    uint64_t v49 = (_BYTE *)((v15 + 16 + v43) & v13);
    *uint64_t v49 = *v47;
    uint64_t v50 = (unint64_t)(v49 + 8) & v48;
    uint64_t v51 = (unint64_t)(v47 + 8) & v48;
    v28(v50, v51, v32);
    *(_BYTE *)(v50 + v15) = *(_BYTE *)(v51 + v15);
    unint64_t v52 = (v50 + v15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v53 = (v51 + v15) & 0xFFFFFFFFFFFFFFF8LL;
    *(void *)(v52 + 8) = *(void *)(v53 + 8);
    uint64_t v54 = *(void *)(v53 + 16);
    *(void *)(v52 + swift_weakDestroy(v0 + 16) = v54;
    *(_BYTE *)(v52 + 24) = *(_BYTE *)(v53 + 24);
    unint64_t v55 = (unint64_t)&v49[v130] & v27;
    unint64_t v56 = (unint64_t)&v47[v130] & v27;
    swift_bridgeObjectRetain(v54);
    v28(v55, v56, v32);
    uint64_t v57 = (_BYTE *)(v55 + v15);
    *uint64_t v57 = *(_BYTE *)(v56 + v15);
    v57[1] = *(_BYTE *)(v56 + v15 + 1);
    v57[2] = *(_BYTE *)(v56 + v15 + 2);
    unint64_t v58 = (v16 + v55) & v27;
    unint64_t v59 = (v16 + v56) & v27;
    v28(v58, v59, v32);
    __int128 v60 = (_BYTE *)(v58 + v15);
    *__int128 v60 = *(_BYTE *)(v59 + v15);
    v60[1] = *(_BYTE *)(v59 + v15 + 1);
    v60[2] = *(_BYTE *)(v59 + v15 + 2);
    uint64_t v61 = (v139 + v58) & v140;
    uint64_t v62 = (v139 + v59) & v140;
    v28(v61, v62, v32);
    *(_BYTE *)(v61 + v15) = *(_BYTE *)(v62 + v15);
    unint64_t v63 = (v61 + v15) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v64 = (v62 + v15) & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)(v63 + 4) = *(_DWORD *)(v64 + 4);
    *(_BYTE *)(v63 + 8) = *(_BYTE *)(v64 + 8);
    unint64_t v65 = (v131 + v61) & v27;
    unint64_t v66 = (v131 + v62) & v27;
    v28(v65, v66, v32);
    __int128 v67 = (_BYTE *)(v65 + v15);
    *__int128 v67 = *(_BYTE *)(v66 + v15);
    v67[1] = *(_BYTE *)(v66 + v15 + 1);
    v67[2] = *(_BYTE *)(v66 + v15 + 2);
    unint64_t v68 = (v16 + v65) & v27;
    unint64_t v69 = (v16 + v66) & v27;
    v28(v68, v69, v32);
    uint64_t v70 = (_BYTE *)(v68 + v15);
    *uint64_t v70 = *(_BYTE *)(v69 + v15);
    v70[1] = *(_BYTE *)(v69 + v15 + 1);
    v70[2] = *(_BYTE *)(v69 + v15 + 2);
    uint64_t v71 = (v15 + 10 + v68) & v48;
    uint64_t v72 = (v15 + 10 + v69) & v48;
    v28(v71, v72, v32);
    *(_BYTE *)(v71 + v15) = *(_BYTE *)(v72 + v15);
    unint64_t v73 = (v71 + v15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v74 = (v72 + v15) & 0xFFFFFFFFFFFFFFF8LL;
    *(void *)(v73 + 8) = *(void *)(v74 + 8);
    *(_BYTE *)(v73 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v74 + 16);
    uint64_t v75 = (v15 + 24 + v71) & v48;
    uint64_t v76 = (v15 + 24 + v72) & v48;
    v28(v75, v76, v32);
    *(_BYTE *)(v75 + v15) = *(_BYTE *)(v76 + v15);
    unint64_t v77 = (v75 + v15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v78 = (v76 + v15) & 0xFFFFFFFFFFFFFFF8LL;
    *(void *)(v77 + 8) = *(void *)(v78 + 8);
    *(_BYTE *)(v77 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v78 + 16);
    unint64_t v79 = (v132 + v75) & v27;
    unint64_t v80 = (v132 + v76) & v27;
    uint64_t v138 = v32;
    uint64_t v129 = v28;
    v28(v79, v80, v32);
    __int128 v81 = (_BYTE *)(v79 + v15);
    *__int128 v81 = *(_BYTE *)(v80 + v15);
    v81[1] = *(_BYTE *)(v80 + v15 + 1);
    v81[2] = *(_BYTE *)(v80 + v15 + 2);
    uint64_t v82 = (v15 + 10 + v79) & v48;
    uint64_t v83 = (v15 + 10 + v80) & v48;
    v28(v82, v83, v32);
    *(_BYTE *)(v82 + v15) = *(_BYTE *)(v83 + v15);
    unint64_t v84 = (v82 + v15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v141 = v16;
    unint64_t v85 = (v83 + v15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v86 = *(void *)(v85 + 8);
    unint64_t v87 = *(void *)(v85 + 16);
    sub_100020AFC(v86, v87);
    *(void *)(v84 + 8) = v86;
    *(void *)(v84 + swift_weakDestroy(v0 + 16) = v87;
    *(_BYTE *)(v84 + 24) = *(_BYTE *)(v85 + 24);
    unint64_t v88 = (v133 + v82) & v27;
    unint64_t v89 = (v133 + v83) & v27;
    v129(v88, v89, v138);
    uint64_t v90 = (_BYTE *)(v88 + v15);
    *uint64_t v90 = *(_BYTE *)(v89 + v15);
    v90[1] = *(_BYTE *)(v89 + v15 + 1);
    v90[2] = *(_BYTE *)(v89 + v15 + 2);
    uint64_t v91 = (v15 + 10 + v88) & v48;
    uint64_t v92 = (v15 + 10 + v89) & v48;
    v129(v91, v92, v138);
    *(_BYTE *)(v91 + v15) = *(_BYTE *)(v92 + v15);
    unint64_t v93 = (v91 + v15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v94 = (v92 + v15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v95 = *(void *)(v94 + 8);
    unint64_t v96 = *(void *)(v94 + 16);
    sub_100020AFC(v95, v96);
    *(void *)(v93 + 8) = v95;
    *(void *)(v93 + swift_weakDestroy(v0 + 16) = v96;
    *(_BYTE *)(v93 + 24) = *(_BYTE *)(v94 + 24);
    uint64_t v97 = (v15 + 32 + v91) & v48;
    uint64_t v98 = (v15 + 32 + v92) & v48;
    v129(v97, v98, v138);
    *(_BYTE *)(v97 + v15) = *(_BYTE *)(v98 + v15);
    unint64_t v99 = (v97 + v15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v100 = (v98 + v15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v101 = *(void *)(v100 + 8);
    unint64_t v102 = *(void *)(v100 + 16);
    sub_100020AFC(v101, v102);
    *(void *)(v99 + 8) = v101;
    *(void *)(v99 + swift_weakDestroy(v0 + 16) = v102;
    *(_BYTE *)(v99 + 24) = *(_BYTE *)(v100 + 24);
    uint64_t v103 = (void *)((v15 + 32 + v98) & v48);
    uint64_t v104 = (void *)((v15 + 32 + v97) & v48);
    *uint64_t v104 = *v103;
    uint64_t v105 = ((unint64_t)v104 + 15) & v48;
    uint64_t v106 = ((unint64_t)v103 + 15) & v48;
    uint64_t v107 = v137;
    v129(v105, v106, v138);
    *(_BYTE *)(v105 + v15) = *(_BYTE *)(v106 + v15);
    unint64_t v108 = (v105 + v15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v109 = (v106 + v15) & 0xFFFFFFFFFFFFFFF8LL;
    *(void *)(v108 + 8) = *(void *)(v109 + 8);
    *(_BYTE *)(v108 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v109 + 16);
    unint64_t v110 = ((unint64_t)v104 + v135) & v27;
    unint64_t v111 = ((unint64_t)v103 + v135) & v27;
    v129(v110, v111, v138);
    uint64_t v112 = (_BYTE *)(v110 + v15);
    *uint64_t v112 = *(_BYTE *)(v111 + v15);
    v112[1] = *(_BYTE *)(v111 + v15 + 1);
    v112[2] = *(_BYTE *)(v111 + v15 + 2);
    unint64_t v113 = (v141 + v110) & v27;
    unint64_t v114 = (v141 + v111) & v27;
    v129(v113, v114, v138);
    uint64_t v115 = (_BYTE *)(v113 + v15);
    *uint64_t v115 = *(_BYTE *)(v114 + v15);
    v115[1] = *(_BYTE *)(v114 + v15 + 1);
    v115[2] = *(_BYTE *)(v114 + v15 + 2);
    unint64_t v116 = (v141 + v113) & v27;
    unint64_t v117 = (v141 + v114) & v27;
    v129(v116, v117, v138);
    v118 = (_BYTE *)(v116 + v15);
    _BYTE *v118 = *(_BYTE *)(v117 + v15);
    v118[1] = *(_BYTE *)(v117 + v15 + 1);
    v118[2] = *(_BYTE *)(v117 + v15 + 2);
    uint64_t v119 = (void *)(((unint64_t)v137 + v136 + 7) & 0xFFFFFFFFFFFFF8LL);
    uint64_t v120 = (void *)(((unint64_t)v134 + v136 + 7) & 0xFFFFFFFFFFFFF8LL);
    *uint64_t v119 = *v120;
    char v121 = (void *)(((unint64_t)v119 + 15) & 0xFFFFFFFFFFFFF8LL);
    char v122 = (void *)(((unint64_t)v120 + 15) & 0xFFFFFFFFFFFFF8LL);
    *char v121 = *v122;
    v123 = (void *)(((unint64_t)v121 + 15) & 0xFFFFFFFFFFFFF8LL);
    uint64_t v124 = (void *)(((unint64_t)v122 + 15) & 0xFFFFFFFFFFFFF8LL);
    void *v123 = *v124;
    uint64_t v125 = (void *)(((unint64_t)v123 + 15) & 0xFFFFFFFFFFFFF8LL);
    uint64_t v126 = (void *)(((unint64_t)v124 + 15) & 0xFFFFFFFFFFFFF8LL);
    *uint64_t v125 = *v126;
    *(void *)(((unint64_t)v125 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v126 + 15) & 0xFFFFFFFFFFFFF8LL);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }

  swift_retain();
  return v107;
}

uint64_t sub_1002B5BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v3,  v4,  &protocol requirements base descriptor for DeviceDriver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v3,  v4,  AssociatedTypeWitness,  &protocol requirements base descriptor for DeviceDriver,  &associated conformance descriptor for DeviceDriver.DeviceDriver.Device: Device);
  uint64_t v7 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for Device);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  uint64_t v10 = a1;
  uint64_t v52 = a1;
  v9(a1, v7);
  uint64_t v11 = *(void *)(v8 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = v11 + 3 + v12;
  uint64_t v55 = v11 + 3;
  uint64_t v14 = (v13 + v10) & ~v12;
  v9(v14, v7);
  uint64_t v15 = (v13 + v14) & ~v12;
  v9(v15, v7);
  uint64_t v16 = (v13 + v15) & ~v12;
  v9(v16, v7);
  uint64_t v53 = (v12 | 3) + v11 + 3;
  uint64_t v54 = v12 | 3;
  uint64_t v17 = (v53 + v16) & ~(v12 | 3);
  v9(v17, v7);
  unint64_t v18 = (v11 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  uint64_t v19 = v12 | 7;
  unint64_t v51 = (v12 | 7) + v18;
  uint64_t v20 = (v51 + v17) & ~(v12 | 7);
  uint64_t v21 = (v12 | 7) + 1;
  v9((v21 + v20) & ~(v12 | 7), v7);
  __n128 v22 = swift_bridgeObjectRelease(*(void *)(((((v21 + v20) & ~(v12 | 7)) + v11) & 0xFFFFFFFFFFFFF8LL) + 0x10));
  unint64_t v47 = (v11 & 0xFFFFFFFFFFFFFFF8LL) + 25;
  uint64_t v50 = v47 + v12 + (v21 & ~(v12 | 7));
  ((void (*)(uint64_t, uint64_t, __n128))v9)((v50 + v20) & ~v12, v7, v22);
  uint64_t v23 = (v13 + ((v50 + v20) & ~v12)) & ~v12;
  v9(v23, v7);
  uint64_t v24 = (v53 + v23) & ~(v12 | 3);
  v9(v24, v7);
  uint64_t v49 = v18 + v12;
  unint64_t v25 = (v18 + v12 + v24) & ~v12;
  v9(v25, v7);
  unint64_t v26 = (v13 + v25) & ~v12;
  v9(v26, v7);
  uint64_t v27 = (v12 | 7) + v11 + 3;
  uint64_t v28 = (v19 + v11 + 3 + v26) & ~v19;
  v9(v28, v7);
  unint64_t v29 = (v11 & 0xFFFFFFFFFFFFFFF8LL) + 17;
  unint64_t v48 = (v12 | 7) + v29;
  uint64_t v30 = (v48 + v28) & ~(v12 | 7);
  v9(v30, v7);
  uint64_t v31 = v29 + v12;
  unint64_t v32 = (v29 + v12 + v30) & ~v12;
  v9(v32, v7);
  uint64_t v33 = (v27 + v32) & ~(v12 | 7);
  v9(v33, v7);
  sub_1000208D8( *(void *)(((v33 + v11) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(void *)(((v33 + v11) & 0xFFFFFFFFFFFFFFF8LL) + 16));
  unint64_t v34 = (v47 + v12 + v33) & ~v12;
  v9(v34, v7);
  uint64_t v35 = (v27 + v34) & ~(v12 | 7);
  v9(v35, v7);
  sub_1000208D8( *(void *)(((v35 + v11) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(void *)(((v35 + v11) & 0xFFFFFFFFFFFFFFF8LL) + 16));
  unint64_t v36 = (v12 | 7) + v47;
  unint64_t v37 = (v19 + v47 + v35) & ~v19;
  v9(v37, v7);
  sub_1000208D8( *(void *)(((v37 + v11) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(void *)(((v37 + v11) & 0xFFFFFFFFFFFFFFF8LL) + 16));
  uint64_t v38 = (v36 + v37) & ~(v12 | 7);
  v9((v12 + 8 + v38) & ~(v12 | 7), v7);
  uint64_t v39 = v31 + ((v12 + 8) & ~(v12 | 7));
  uint64_t v40 = (v39 + v38) & ~v12;
  v9(v40, v7);
  uint64_t v41 = (v13 + v40) & ~v12;
  v9(v41, v7);
  v9((v13 + v41) & ~v12, v7);
  uint64_t v42 = v55
      + v52
      + ((v13
        + ((v13
          + ((v39
            + ((v36
              + ((v36
                + ((v27
                  + ((v47
                    + v12
                    + ((v27
                      + ((v31
                        + ((v48
                          + ((v27
                            + ((v13
                              + ((v49
                                + ((v53
                                  + ((v13
                                    + ((v50
                                      + ((v51 + ((v53 + ((v13 + ((v13 + (v13 & ~v12)) & ~v12)) & ~v12)) & ~v54)) & ~v19)) & ~v12)) & ~v12)) & ~v54)) & ~v12)) & ~v12)) & ~v19)) & ~v19)) & ~v12)) & ~v19)) & ~v12)) & ~v19)) & ~v19)) & ~v19)) & ~v12)) & ~v12)) & ~v12)
      + 7;
  uint64_t v43 = (v42 & 0xFFFFFFFFFFFFF8LL) + 15;
  swift_release(*(void *)(v42 & 0xFFFFFFFFFFFFF8LL));
  v43 &= 0xFFFFFFFFFFFFF8uLL;
  swift_release(*(void *)v43);
  uint64_t v44 = (void *)((v43 + 15) & 0xFFFFFFFFFFFFF8LL);
  swift_release(*v44);
  unint64_t v45 = (void *)(((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFF8LL);
  swift_release(*v45);
  return swift_release(*(void *)(((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFF8LL));
}

uint64_t sub_1002B5FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 32);
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v5,  v6,  &protocol requirements base descriptor for DeviceDriver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v5,  v6,  AssociatedTypeWitness,  &protocol requirements base descriptor for DeviceDriver,  &associated conformance descriptor for DeviceDriver.DeviceDriver.Device: Device);
  uint64_t v9 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for Device);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v10 + 16);
  uint64_t v12 = v9;
  v11(a1, a2);
  uint64_t v13 = v11;
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v15 = (_BYTE *)(v14 + a1);
  uint64_t v127 = a1;
  uint64_t v128 = a2;
  *uint64_t v15 = *(_BYTE *)(v14 + a2);
  v15[1] = *(_BYTE *)(v14 + a2 + 1);
  v15[2] = *(_BYTE *)(v14 + a2 + 2);
  uint64_t v16 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v17 = v14 + 3 + v16;
  uint64_t v18 = (v17 + a1) & ~v16;
  uint64_t v19 = (v17 + a2) & ~v16;
  uint64_t v20 = (void (*)(uint64_t, uint64_t, uint64_t))v13;
  ((void (*)(uint64_t, uint64_t, uint64_t))v13)(v18, v19, v12);
  uint64_t v21 = (_BYTE *)(v18 + v14);
  *uint64_t v21 = *(_BYTE *)(v19 + v14);
  v21[1] = *(_BYTE *)(v19 + v14 + 1);
  v21[2] = *(_BYTE *)(v19 + v14 + 2);
  uint64_t v22 = (v17 + v18) & ~v16;
  uint64_t v23 = (v17 + v19) & ~v16;
  v20(v22, v23, v12);
  uint64_t v24 = (_BYTE *)(v22 + v14);
  _BYTE *v24 = *(_BYTE *)(v23 + v14);
  v24[1] = *(_BYTE *)(v23 + v14 + 1);
  v24[2] = *(_BYTE *)(v23 + v14 + 2);
  uint64_t v25 = (v17 + v22) & ~v16;
  uint64_t v26 = (v17 + v23) & ~v16;
  v20(v25, v26, v12);
  uint64_t v27 = v20;
  uint64_t v28 = (_BYTE *)(v25 + v14);
  *uint64_t v28 = *(_BYTE *)(v26 + v14);
  v28[1] = *(_BYTE *)(v26 + v14 + 1);
  v28[2] = *(_BYTE *)(v26 + v14 + 2);
  uint64_t v133 = v16 | 3;
  uint64_t v134 = (v16 | 3) + v14 + 3;
  uint64_t v29 = (v134 + v25) & ~(v16 | 3);
  uint64_t v30 = (v134 + v26) & ~(v16 | 3);
  uint64_t v31 = v12;
  uint64_t v135 = v12;
  v27(v29, v30, v12);
  unint64_t v32 = v27;
  *(_BYTE *)(v29 + v14) = *(_BYTE *)(v30 + v14);
  unint64_t v33 = (v29 + v14) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v34 = (v30 + v14) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v33 + 4) = *(_DWORD *)(v34 + 4);
  *(_BYTE *)(v33 + 8) = *(_BYTE *)(v34 + 8);
  unint64_t v130 = (v14 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  uint64_t v35 = v16 | 7;
  unint64_t v126 = (v16 | 7) + v130;
  unint64_t v36 = (_BYTE *)((v126 + v29) & ~(v16 | 7));
  unint64_t v37 = (_BYTE *)((v126 + v30) & ~(v16 | 7));
  *unint64_t v36 = *v37;
  uint64_t v38 = (v16 | 7) + 1;
  uint64_t v39 = (unint64_t)&v36[v38] & ~(v16 | 7);
  uint64_t v40 = (unint64_t)&v37[v38] & ~(v16 | 7);
  uint64_t v41 = v31;
  uint64_t v42 = (void (*)(unint64_t, unint64_t, uint64_t))v32;
  v32(v39, v40, v41);
  *(_BYTE *)(v39 + v14) = *(_BYTE *)(v40 + v14);
  unint64_t v43 = (v39 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v44 = (v40 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)(v43 + 8) = *(void *)(v44 + 8);
  uint64_t v45 = *(void *)(v44 + 16);
  *(void *)(v43 + swift_weakDestroy(v0 + 16) = v45;
  *(_BYTE *)(v43 + 24) = *(_BYTE *)(v44 + 24);
  unint64_t v121 = (v14 & 0xFFFFFFFFFFFFFFF8LL) + 25;
  uint64_t v132 = v121 + v16;
  uint64_t v125 = v121 + v16 + (v38 & ~(v16 | 7));
  unint64_t v46 = (unint64_t)&v36[v125] & ~v16;
  unint64_t v47 = (unint64_t)&v37[v125] & ~v16;
  swift_bridgeObjectRetain(v45);
  v42(v46, v47, v135);
  unint64_t v48 = (_BYTE *)(v46 + v14);
  *unint64_t v48 = *(_BYTE *)(v47 + v14);
  v48[1] = *(_BYTE *)(v47 + v14 + 1);
  void v48[2] = *(_BYTE *)(v47 + v14 + 2);
  unint64_t v49 = (v17 + v46) & ~v16;
  unint64_t v50 = (v17 + v47) & ~v16;
  v42(v49, v50, v135);
  unint64_t v51 = (_BYTE *)(v49 + v14);
  *unint64_t v51 = *(_BYTE *)(v50 + v14);
  v51[1] = *(_BYTE *)(v50 + v14 + 1);
  v51[2] = *(_BYTE *)(v50 + v14 + 2);
  uint64_t v52 = (v134 + v49) & ~(v16 | 3);
  uint64_t v53 = (v134 + v50) & ~(v16 | 3);
  v42(v52, v53, v135);
  *(_BYTE *)(v52 + v14) = *(_BYTE *)(v53 + v14);
  unint64_t v54 = (v52 + v14) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v55 = (v53 + v14) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v54 + 4) = *(_DWORD *)(v55 + 4);
  *(_BYTE *)(v54 + 8) = *(_BYTE *)(v55 + 8);
  uint64_t v124 = v130 + v16;
  unint64_t v56 = (v130 + v16 + v52) & ~v16;
  unint64_t v57 = (v130 + v16 + v53) & ~v16;
  v42(v56, v57, v135);
  unint64_t v58 = (_BYTE *)(v56 + v14);
  *unint64_t v58 = *(_BYTE *)(v57 + v14);
  v58[1] = *(_BYTE *)(v57 + v14 + 1);
  v58[2] = *(_BYTE *)(v57 + v14 + 2);
  unint64_t v59 = (v17 + v56) & ~v16;
  unint64_t v60 = (v17 + v57) & ~v16;
  v42(v59, v60, v135);
  uint64_t v61 = (_BYTE *)(v59 + v14);
  *uint64_t v61 = *(_BYTE *)(v60 + v14);
  v61[1] = *(_BYTE *)(v60 + v14 + 1);
  void v61[2] = *(_BYTE *)(v60 + v14 + 2);
  uint64_t v62 = (v35 + v14 + 3 + v59) & ~v35;
  uint64_t v63 = (v35 + v14 + 3 + v60) & ~v35;
  v42(v62, v63, v135);
  *(_BYTE *)(v62 + v14) = *(_BYTE *)(v63 + v14);
  unint64_t v64 = (v62 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v65 = (v63 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)(v64 + 8) = *(void *)(v65 + 8);
  *(_BYTE *)(v64 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v65 + 16);
  unint64_t v66 = (v14 & 0xFFFFFFFFFFFFFFF8LL) + 17;
  unint64_t v123 = (v16 | 7) + v66;
  uint64_t v67 = (v123 + v62) & ~(v16 | 7);
  uint64_t v68 = (v123 + v63) & ~(v16 | 7);
  v42(v67, v68, v135);
  *(_BYTE *)(v67 + v14) = *(_BYTE *)(v68 + v14);
  unint64_t v69 = (v67 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v70 = (v68 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)(v69 + 8) = *(void *)(v70 + 8);
  *(_BYTE *)(v69 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v70 + 16);
  uint64_t v129 = v66 + v16;
  unint64_t v71 = (v66 + v16 + v67) & ~v16;
  unint64_t v72 = (v66 + v16 + v68) & ~v16;
  uint64_t v136 = v42;
  v42(v71, v72, v135);
  unint64_t v73 = (_BYTE *)(v71 + v14);
  *unint64_t v73 = *(_BYTE *)(v72 + v14);
  v73[1] = *(_BYTE *)(v72 + v14 + 1);
  v73[2] = *(_BYTE *)(v72 + v14 + 2);
  uint64_t v131 = (v16 | 7) + v14 + 3;
  uint64_t v74 = (v131 + v71) & ~(v16 | 7);
  uint64_t v75 = (v131 + v72) & ~(v16 | 7);
  v42(v74, v75, v135);
  *(_BYTE *)(v74 + v14) = *(_BYTE *)(v75 + v14);
  unint64_t v76 = (v74 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v77 = (v75 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v78 = *(void *)(v77 + 8);
  unint64_t v79 = *(void *)(v77 + 16);
  sub_100020AFC(v78, v79);
  *(void *)(v76 + 8) = v78;
  *(void *)(v76 + swift_weakDestroy(v0 + 16) = v79;
  *(_BYTE *)(v76 + 24) = *(_BYTE *)(v77 + 24);
  unint64_t v80 = (v121 + v16 + v74) & ~v16;
  unint64_t v81 = (v121 + v16 + v75) & ~v16;
  v136(v80, v81, v135);
  uint64_t v82 = (_BYTE *)(v80 + v14);
  *uint64_t v82 = *(_BYTE *)(v81 + v14);
  v82[1] = *(_BYTE *)(v81 + v14 + 1);
  v82[2] = *(_BYTE *)(v81 + v14 + 2);
  uint64_t v83 = (v131 + v80) & ~(v16 | 7);
  uint64_t v84 = (v131 + v81) & ~(v16 | 7);
  v136(v83, v84, v135);
  *(_BYTE *)(v83 + v14) = *(_BYTE *)(v84 + v14);
  unint64_t v85 = (v83 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v86 = (v84 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v87 = *(void *)(v86 + 8);
  unint64_t v88 = *(void *)(v86 + 16);
  sub_100020AFC(v87, v88);
  *(void *)(v85 + 8) = v87;
  *(void *)(v85 + swift_weakDestroy(v0 + 16) = v88;
  *(_BYTE *)(v85 + 24) = *(_BYTE *)(v86 + 24);
  unint64_t v89 = (v35 + v121 + v83) & ~v35;
  unint64_t v90 = (v35 + v121 + v84) & ~v35;
  v136(v89, v90, v135);
  *(_BYTE *)(v89 + v14) = *(_BYTE *)(v90 + v14);
  unint64_t v91 = (v89 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v92 = (v90 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v93 = *(void *)(v92 + 8);
  unint64_t v94 = *(void *)(v92 + 16);
  sub_100020AFC(v93, v94);
  *(void *)(v91 + 8) = v93;
  *(void *)(v91 + swift_weakDestroy(v0 + 16) = v94;
  *(_BYTE *)(v91 + 24) = *(_BYTE *)(v92 + 24);
  unint64_t v122 = (v16 | 7) + v121;
  uint64_t v95 = (void *)((v122 + v89) & ~(v16 | 7));
  unint64_t v96 = (void *)((v122 + v90) & ~(v16 | 7));
  *uint64_t v95 = *v96;
  uint64_t v97 = ((unint64_t)v95 + v16 + 8) & ~(v16 | 7);
  uint64_t v98 = ((unint64_t)v96 + v16 + 8) & ~(v16 | 7);
  v136(((unint64_t)v95 + v16 + 8) & ~v35, ((unint64_t)v96 + v16 + 8) & ~v35, v135);
  *(_BYTE *)(v97 + v14) = *(_BYTE *)(v98 + v14);
  unint64_t v99 = (v97 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v100 = (v98 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)(v99 + 8) = *(void *)(v100 + 8);
  *(_BYTE *)(v99 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v100 + 16);
  uint64_t v101 = v129 + ((v16 + 8) & ~(v16 | 7));
  unint64_t v102 = ((unint64_t)v95 + v101) & ~v16;
  unint64_t v103 = ((unint64_t)v96 + v101) & ~v16;
  v136(v102, v103, v135);
  uint64_t v104 = (_BYTE *)(v102 + v14);
  *uint64_t v104 = *(_BYTE *)(v103 + v14);
  v104[1] = *(_BYTE *)(v103 + v14 + 1);
  v104[2] = *(_BYTE *)(v103 + v14 + 2);
  unint64_t v105 = (v17 + v102) & ~v16;
  unint64_t v106 = (v17 + v103) & ~v16;
  v136(v105, v106, v135);
  uint64_t v107 = (_BYTE *)(v105 + v14);
  *uint64_t v107 = *(_BYTE *)(v106 + v14);
  v107[1] = *(_BYTE *)(v106 + v14 + 1);
  v107[2] = *(_BYTE *)(v106 + v14 + 2);
  unint64_t v108 = (v17 + v105) & ~v16;
  unint64_t v109 = (v17 + v106) & ~v16;
  v136(v108, v109, v135);
  unint64_t v110 = (_BYTE *)(v108 + v14);
  *unint64_t v110 = *(_BYTE *)(v109 + v14);
  v110[1] = *(_BYTE *)(v109 + v14 + 1);
  v110[2] = *(_BYTE *)(v109 + v14 + 2);
  uint64_t v111 = ((v17
         + ((v17
           + ((v101
             + ((v122
               + ((v122
                 + ((v131
                   + ((v132
                     + ((v131
                       + ((v129
                         + ((v123
                           + ((v131
                             + ((v17
                               + ((v124
                                 + ((v134
                                   + ((v17
                                     + ((v125
                                       + ((v126 + ((v134 + ((v17 + ((v17 + (v17 & ~v16)) & ~v16)) & ~v16)) & ~v133)) & ~v35)) & ~v16)) & ~v16)) & ~v133)) & ~v16)) & ~v16)) & ~v35)) & ~v35)) & ~v16)) & ~v35)) & ~v16)) & ~v35)) & ~v35)) & ~v35)) & ~v16)) & ~v16)) & ~v16)
       + v14
       + 3
       + 7;
  uint64_t v112 = (void *)((v111 + v127) & 0xFFFFFFFFFFFFF8LL);
  unint64_t v113 = (void *)((v111 + v128) & 0xFFFFFFFFFFFFF8LL);
  *uint64_t v112 = *v113;
  unint64_t v114 = (void *)(((unint64_t)v112 + 15) & 0xFFFFFFFFFFFFF8LL);
  uint64_t v115 = (void *)(((unint64_t)v113 + 15) & 0xFFFFFFFFFFFFF8LL);
  *unint64_t v114 = *v115;
  unint64_t v116 = (void *)(((unint64_t)v114 + 15) & 0xFFFFFFFFFFFFF8LL);
  unint64_t v117 = (void *)(((unint64_t)v115 + 15) & 0xFFFFFFFFFFFFF8LL);
  *unint64_t v116 = *v117;
  v118 = (void *)(((unint64_t)v116 + 15) & 0xFFFFFFFFFFFFF8LL);
  uint64_t v119 = (void *)(((unint64_t)v117 + 15) & 0xFFFFFFFFFFFFF8LL);
  void *v118 = *v119;
  *(void *)(((unint64_t)v118 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v119 + 15) & 0xFFFFFFFFFFFFF8LL);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return v127;
}

uint64_t sub_1002B6930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 32);
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v5,  v6,  &protocol requirements base descriptor for DeviceDriver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v5,  v6,  AssociatedTypeWitness,  &protocol requirements base descriptor for DeviceDriver,  &associated conformance descriptor for DeviceDriver.DeviceDriver.Device: Device);
  uint64_t v9 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for Device);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v10 + 24);
  uint64_t v12 = v9;
  v11(a1, a2);
  uint64_t v13 = v11;
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v15 = (_BYTE *)(v14 + a1);
  uint64_t v139 = a1;
  uint64_t v140 = a2;
  *uint64_t v15 = *(_BYTE *)(v14 + a2);
  v15[1] = *(_BYTE *)(v14 + a2 + 1);
  v15[2] = *(_BYTE *)(v14 + a2 + 2);
  uint64_t v16 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v17 = v14 + 3 + v16;
  uint64_t v18 = (v17 + a1) & ~v16;
  uint64_t v19 = (v17 + a2) & ~v16;
  uint64_t v20 = (void (*)(uint64_t, uint64_t, uint64_t))v13;
  ((void (*)(uint64_t, uint64_t, uint64_t))v13)(v18, v19, v12);
  uint64_t v21 = (_BYTE *)(v18 + v14);
  *uint64_t v21 = *(_BYTE *)(v19 + v14);
  v21[1] = *(_BYTE *)(v19 + v14 + 1);
  v21[2] = *(_BYTE *)(v19 + v14 + 2);
  uint64_t v22 = (v17 + v18) & ~v16;
  uint64_t v23 = (v17 + v19) & ~v16;
  v20(v22, v23, v12);
  uint64_t v24 = (_BYTE *)(v22 + v14);
  _BYTE *v24 = *(_BYTE *)(v23 + v14);
  v24[1] = *(_BYTE *)(v23 + v14 + 1);
  v24[2] = *(_BYTE *)(v23 + v14 + 2);
  uint64_t v145 = v17;
  uint64_t v25 = (v17 + v22) & ~v16;
  uint64_t v26 = (v17 + v23) & ~v16;
  uint64_t v27 = v12;
  v20(v25, v26, v12);
  uint64_t v28 = (_BYTE *)(v25 + v14);
  *uint64_t v28 = *(_BYTE *)(v26 + v14);
  v28[1] = *(_BYTE *)(v26 + v14 + 1);
  v28[2] = *(_BYTE *)(v26 + v14 + 2);
  uint64_t v146 = v16 | 3;
  uint64_t v147 = (v16 | 3) + v14 + 3;
  uint64_t v29 = (v147 + v25) & ~(v16 | 3);
  uint64_t v30 = (v147 + v26) & ~(v16 | 3);
  v20(v29, v30, v12);
  uint64_t v148 = (void (*)(unint64_t, unint64_t, uint64_t, __n128))v20;
  *(_BYTE *)(v29 + v14) = *(_BYTE *)(v30 + v14);
  unint64_t v31 = (v29 + v14) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v32 = (v30 + v14) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v31 + 4) = *(_DWORD *)(v32 + 4);
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  unint64_t v142 = (v14 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  uint64_t v33 = v16 | 7;
  unint64_t v138 = (v16 | 7) + v142;
  unint64_t v34 = (_BYTE *)((v138 + v29) & ~(v16 | 7));
  uint64_t v35 = (_BYTE *)((v138 + v30) & ~(v16 | 7));
  _BYTE *v34 = *v35;
  uint64_t v36 = (v16 | 7) + 1;
  uint64_t v37 = (unint64_t)&v34[v36] & ~(v16 | 7);
  uint64_t v38 = (unint64_t)&v35[v36] & ~(v16 | 7);
  v20(v37, v38, v27);
  uint64_t v39 = v38 + v14;
  *(_BYTE *)(v37 + v14) = *(_BYTE *)(v38 + v14);
  unint64_t v40 = (v37 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v41 = v39 & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)(v40 + 8) = *(void *)((v39 & 0xFFFFFFFFFFFFFFF8LL) + 8);
  uint64_t v42 = *(void *)((v39 & 0xFFFFFFFFFFFFFFF8LL) + 16);
  uint64_t v43 = *(void *)(v40 + 16);
  *(void *)(v40 + swift_weakDestroy(v0 + 16) = v42;
  swift_bridgeObjectRetain(v42);
  __n128 v44 = swift_bridgeObjectRelease(v43);
  *(_BYTE *)(v40 + 24) = *(_BYTE *)(v41 + 24);
  unint64_t v133 = (v14 & 0xFFFFFFFFFFFFFFF8LL) + 25;
  uint64_t v144 = v133 + v16;
  uint64_t v137 = v133 + v16 + (v36 & ~(v16 | 7));
  unint64_t v45 = (unint64_t)&v34[v137] & ~v16;
  unint64_t v46 = (unint64_t)&v35[v137] & ~v16;
  v148(v45, v46, v27, v44);
  unint64_t v47 = (_BYTE *)(v45 + v14);
  *unint64_t v47 = *(_BYTE *)(v46 + v14);
  v47[1] = *(_BYTE *)(v46 + v14 + 1);
  v47[2] = *(_BYTE *)(v46 + v14 + 2);
  unint64_t v48 = (v145 + v45) & ~v16;
  uint64_t v49 = v14 + 3 + v16;
  unint64_t v50 = (v145 + v46) & ~v16;
  ((void (*)(unint64_t, unint64_t, uint64_t))v148)(v48, v50, v27);
  unint64_t v51 = (_BYTE *)(v48 + v14);
  *unint64_t v51 = *(_BYTE *)(v50 + v14);
  v51[1] = *(_BYTE *)(v50 + v14 + 1);
  v51[2] = *(_BYTE *)(v50 + v14 + 2);
  uint64_t v52 = (v147 + v48) & ~(v16 | 3);
  uint64_t v53 = (v147 + v50) & ~(v16 | 3);
  ((void (*)(uint64_t, uint64_t, uint64_t))v148)(v52, v53, v27);
  *(_BYTE *)(v52 + v14) = *(_BYTE *)(v53 + v14);
  unint64_t v54 = (v52 + v14) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v55 = (v53 + v14) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v54 + 4) = *(_DWORD *)(v55 + 4);
  *(_BYTE *)(v54 + 8) = *(_BYTE *)(v55 + 8);
  uint64_t v136 = v142 + v16;
  unint64_t v56 = (v142 + v16 + v52) & ~v16;
  unint64_t v57 = (v142 + v16 + v53) & ~v16;
  ((void (*)(unint64_t, unint64_t, uint64_t))v148)(v56, v57, v27);
  unint64_t v58 = (_BYTE *)(v56 + v14);
  *unint64_t v58 = *(_BYTE *)(v57 + v14);
  v58[1] = *(_BYTE *)(v57 + v14 + 1);
  v58[2] = *(_BYTE *)(v57 + v14 + 2);
  unint64_t v59 = (v49 + v56) & ~v16;
  unint64_t v60 = (v49 + v57) & ~v16;
  ((void (*)(unint64_t, unint64_t, uint64_t))v148)(v59, v60, v27);
  uint64_t v61 = (_BYTE *)(v59 + v14);
  *uint64_t v61 = *(_BYTE *)(v60 + v14);
  v61[1] = *(_BYTE *)(v60 + v14 + 1);
  void v61[2] = *(_BYTE *)(v60 + v14 + 2);
  uint64_t v62 = (v33 + v14 + 3 + v59) & ~v33;
  uint64_t v63 = (v33 + v14 + 3 + v60) & ~v33;
  ((void (*)(uint64_t, uint64_t, uint64_t))v148)(v62, v63, v27);
  *(_BYTE *)(v62 + v14) = *(_BYTE *)(v63 + v14);
  unint64_t v64 = (v62 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v65 = (v63 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)(v64 + 8) = *(void *)(v65 + 8);
  *(_BYTE *)(v64 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v65 + 16);
  unint64_t v66 = (v14 & 0xFFFFFFFFFFFFFFF8LL) + 17;
  unint64_t v135 = (v16 | 7) + v66;
  uint64_t v67 = (v135 + v62) & ~(v16 | 7);
  uint64_t v68 = (v135 + v63) & ~(v16 | 7);
  ((void (*)(uint64_t, uint64_t, uint64_t))v148)(v67, v68, v27);
  *(_BYTE *)(v67 + v14) = *(_BYTE *)(v68 + v14);
  unint64_t v69 = (v67 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v70 = (v68 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)(v69 + 8) = *(void *)(v70 + 8);
  *(_BYTE *)(v69 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v70 + 16);
  uint64_t v141 = v66 + v16;
  unint64_t v71 = (v66 + v16 + v67) & ~v16;
  unint64_t v72 = (v66 + v16 + v68) & ~v16;
  ((void (*)(unint64_t, unint64_t, uint64_t))v148)(v71, v72, v27);
  unint64_t v73 = (_BYTE *)(v71 + v14);
  *unint64_t v73 = *(_BYTE *)(v72 + v14);
  v73[1] = *(_BYTE *)(v72 + v14 + 1);
  v73[2] = *(_BYTE *)(v72 + v14 + 2);
  uint64_t v143 = (v16 | 7) + v14 + 3;
  uint64_t v74 = (v143 + v71) & ~(v16 | 7);
  uint64_t v75 = (v143 + v72) & ~(v16 | 7);
  ((void (*)(uint64_t, uint64_t, uint64_t))v148)(v74, v75, v27);
  *(_BYTE *)(v74 + v14) = *(_BYTE *)(v75 + v14);
  unint64_t v76 = (v74 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v77 = (v75 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v78 = *(void *)(v77 + 8);
  unint64_t v79 = *(void *)(v77 + 16);
  sub_100020AFC(v78, v79);
  uint64_t v80 = *(void *)(v76 + 8);
  unint64_t v81 = *(void *)(v76 + 16);
  *(void *)(v76 + 8) = v78;
  *(void *)(v76 + swift_weakDestroy(v0 + 16) = v79;
  sub_1000208D8(v80, v81);
  *(_BYTE *)(v76 + 24) = *(_BYTE *)(v77 + 24);
  unint64_t v82 = (v133 + v16 + v74) & ~v16;
  unint64_t v83 = (v133 + v16 + v75) & ~v16;
  ((void (*)(unint64_t, unint64_t, uint64_t))v148)(v82, v83, v27);
  uint64_t v84 = (_BYTE *)(v82 + v14);
  _BYTE *v84 = *(_BYTE *)(v83 + v14);
  v84[1] = *(_BYTE *)(v83 + v14 + 1);
  v84[2] = *(_BYTE *)(v83 + v14 + 2);
  uint64_t v85 = (v143 + v82) & ~(v16 | 7);
  uint64_t v86 = (v143 + v83) & ~(v16 | 7);
  ((void (*)(uint64_t, uint64_t, uint64_t))v148)(v85, v86, v27);
  *(_BYTE *)(v85 + v14) = *(_BYTE *)(v86 + v14);
  unint64_t v87 = (v85 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v88 = (v86 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v89 = *(void *)(v88 + 8);
  unint64_t v90 = *(void *)(v88 + 16);
  sub_100020AFC(v89, v90);
  uint64_t v91 = *(void *)(v87 + 8);
  unint64_t v92 = *(void *)(v87 + 16);
  *(void *)(v87 + 8) = v89;
  *(void *)(v87 + swift_weakDestroy(v0 + 16) = v90;
  sub_1000208D8(v91, v92);
  *(_BYTE *)(v87 + 24) = *(_BYTE *)(v88 + 24);
  unint64_t v93 = (v33 + v133 + v85) & ~v33;
  unint64_t v94 = (v33 + v133 + v86) & ~v33;
  ((void (*)(unint64_t, unint64_t, uint64_t))v148)(v93, v94, v27);
  *(_BYTE *)(v93 + v14) = *(_BYTE *)(v94 + v14);
  unint64_t v95 = (v93 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v96 = (v94 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v97 = *(void *)(v96 + 8);
  unint64_t v98 = *(void *)(v96 + 16);
  sub_100020AFC(v97, v98);
  uint64_t v99 = *(void *)(v95 + 8);
  unint64_t v100 = *(void *)(v95 + 16);
  *(void *)(v95 + 8) = v97;
  *(void *)(v95 + swift_weakDestroy(v0 + 16) = v98;
  sub_1000208D8(v99, v100);
  *(_BYTE *)(v95 + 24) = *(_BYTE *)(v96 + 24);
  unint64_t v134 = (v16 | 7) + v133;
  uint64_t v101 = (void *)((v134 + v93) & ~(v16 | 7));
  unint64_t v102 = (void *)((v134 + v94) & ~(v16 | 7));
  void *v101 = *v102;
  uint64_t v103 = ((unint64_t)v101 + v16 + 8) & ~(v16 | 7);
  uint64_t v104 = ((unint64_t)v102 + v16 + 8) & ~(v16 | 7);
  ((void (*)(unint64_t, unint64_t, uint64_t))v148)( ((unint64_t)v101 + v16 + 8) & ~v33,  ((unint64_t)v102 + v16 + 8) & ~v33,  v27);
  *(_BYTE *)(v103 + v14) = *(_BYTE *)(v104 + v14);
  unint64_t v105 = (v103 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v106 = (v104 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)(v105 + 8) = *(void *)(v106 + 8);
  *(_BYTE *)(v105 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v106 + 16);
  uint64_t v107 = v141 + ((v16 + 8) & ~(v16 | 7));
  unint64_t v108 = ((unint64_t)v101 + v107) & ~v16;
  unint64_t v109 = ((unint64_t)v102 + v107) & ~v16;
  ((void (*)(unint64_t, unint64_t, uint64_t))v148)(v108, v109, v27);
  unint64_t v110 = (_BYTE *)(v108 + v14);
  *unint64_t v110 = *(_BYTE *)(v109 + v14);
  v110[1] = *(_BYTE *)(v109 + v14 + 1);
  v110[2] = *(_BYTE *)(v109 + v14 + 2);
  uint64_t v111 = v14 + 3 + v16;
  unint64_t v112 = (v145 + v108) & ~v16;
  unint64_t v113 = (v145 + v109) & ~v16;
  ((void (*)(unint64_t, unint64_t, uint64_t))v148)(v112, v113, v27);
  unint64_t v114 = (_BYTE *)(v112 + v14);
  *unint64_t v114 = *(_BYTE *)(v113 + v14);
  v114[1] = *(_BYTE *)(v113 + v14 + 1);
  v114[2] = *(_BYTE *)(v113 + v14 + 2);
  unint64_t v115 = (v111 + v112) & ~v16;
  unint64_t v116 = (v111 + v113) & ~v16;
  ((void (*)(unint64_t, unint64_t, uint64_t))v148)(v115, v116, v27);
  unint64_t v117 = (_BYTE *)(v115 + v14);
  *unint64_t v117 = *(_BYTE *)(v116 + v14);
  v117[1] = *(_BYTE *)(v116 + v14 + 1);
  v117[2] = *(_BYTE *)(v116 + v14 + 2);
  uint64_t v118 = ((v111
         + ((v111
           + ((v107
             + ((v134
               + ((v134
                 + ((v143
                   + ((v144
                     + ((v143
                       + ((v141
                         + ((v135
                           + ((v143
                             + ((v111
                               + ((v136
                                 + ((v147
                                   + ((v111
                                     + ((v137
                                       + ((v138 + ((v147 + ((v111 + ((v111 + (v111 & ~v16)) & ~v16)) & ~v16)) & ~v146)) & ~v33)) & ~v16)) & ~v16)) & ~v146)) & ~v16)) & ~v16)) & ~v33)) & ~v33)) & ~v16)) & ~v33)) & ~v16)) & ~v33)) & ~v33)) & ~v33)) & ~v16)) & ~v16)) & ~v16)
       + v14
       + 3
       + 7;
  uint64_t v119 = (uint64_t *)((v118 + v139) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v120 = v118 + v140;
  uint64_t v121 = (v120 & 0xFFFFFFFFFFFFF8LL) + 15;
  uint64_t v122 = *v119;
  *uint64_t v119 = *(void *)(v120 & 0xFFFFFFFFFFFFF8LL);
  swift_retain();
  swift_release(v122);
  unint64_t v123 = (uint64_t *)(((unint64_t)v119 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  v121 &= 0xFFFFFFFFFFFFF8uLL;
  uint64_t v124 = *v123;
  uint64_t *v123 = *(void *)v121;
  swift_retain();
  swift_release(v124);
  uint64_t v125 = (uint64_t *)(((unint64_t)v123 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v126 = (uint64_t *)((v121 + 15) & 0xFFFFFFFFFFFFF8LL);
  uint64_t v127 = *v125;
  *uint64_t v125 = *v126;
  swift_retain();
  swift_release(v127);
  unint64_t v128 = ((unint64_t)v125 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v129 = (void *)(((unint64_t)v126 + 15) & 0xFFFFFFFFFFFFF8LL);
  uint64_t v130 = *(void *)v128;
  *(void *)unint64_t v128 = *v129;
  v128 += 15LL;
  swift_retain();
  swift_release(v130);
  uint64_t v131 = *(void *)(v128 & 0xFFFFFFFFFFFFFFF8LL);
  *(void *)(v128 & 0xFFFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v129 + 15) & 0xFFFFFFFFFFFFF8LL);
  swift_retain();
  swift_release(v131);
  return v139;
}

uint64_t sub_1002B72B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 32);
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v5,  v6,  &protocol requirements base descriptor for DeviceDriver,  &associated type descriptor for DeviceDriver.Device);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v5,  v6,  AssociatedTypeWitness,  &protocol requirements base descriptor for DeviceDriver,  &associated conformance descriptor for DeviceDriver.DeviceDriver.Device: Device);
  uint64_t v9 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for Device,  &associated type descriptor for Device.PreferencesBacking);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  v11(a1, a2, v9);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v10 + 64);
  uint64_t v14 = (_BYTE *)(v13 + a1);
  uint64_t v125 = a1;
  uint64_t v126 = a2;
  uint64_t v15 = a2;
  *uint64_t v14 = *(_BYTE *)(v13 + a2);
  v14[1] = *(_BYTE *)(v13 + a2 + 1);
  v14[2] = *(_BYTE *)(v13 + a2 + 2);
  uint64_t v16 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v17 = v13 + 3 + v16;
  uint64_t v18 = (v17 + a1) & ~v16;
  uint64_t v19 = (v17 + v15) & ~v16;
  uint64_t v20 = v12;
  v12(v18, v19, v9);
  uint64_t v21 = (_BYTE *)(v18 + v13);
  *uint64_t v21 = *(_BYTE *)(v19 + v13);
  v21[1] = *(_BYTE *)(v19 + v13 + 1);
  v21[2] = *(_BYTE *)(v19 + v13 + 2);
  uint64_t v22 = (v17 + v18) & ~v16;
  uint64_t v23 = (v17 + v19) & ~v16;
  v20(v22, v23, v9);
  uint64_t v24 = (_BYTE *)(v22 + v13);
  _BYTE *v24 = *(_BYTE *)(v23 + v13);
  v24[1] = *(_BYTE *)(v23 + v13 + 1);
  v24[2] = *(_BYTE *)(v23 + v13 + 2);
  uint64_t v25 = (v17 + v22) & ~v16;
  uint64_t v26 = (v17 + v23) & ~v16;
  v20(v25, v26, v9);
  uint64_t v27 = (_BYTE *)(v25 + v13);
  *uint64_t v27 = *(_BYTE *)(v26 + v13);
  v27[1] = *(_BYTE *)(v26 + v13 + 1);
  v27[2] = *(_BYTE *)(v26 + v13 + 2);
  uint64_t v128 = (v16 | 3) + v13 + 3;
  uint64_t v28 = (v128 + v25) & ~(v16 | 3);
  uint64_t v29 = (v128 + v26) & ~(v16 | 3);
  uint64_t v117 = v9;
  v20(v28, v29, v9);
  uint64_t v30 = v20;
  *(_BYTE *)(v28 + v13) = *(_BYTE *)(v29 + v13);
  unint64_t v31 = (v28 + v13) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v32 = (v29 + v13) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v31 + 4) = *(_DWORD *)(v32 + 4);
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  unint64_t v121 = (v13 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  uint64_t v33 = v16 | 7;
  unint64_t v124 = (v16 | 7) + v121;
  unint64_t v34 = (_BYTE *)((v124 + v28) & ~(v16 | 7));
  uint64_t v35 = (_BYTE *)((v124 + v29) & ~(v16 | 7));
  _BYTE *v34 = *v35;
  uint64_t v36 = (v16 | 7) + 1;
  uint64_t v37 = (unint64_t)&v34[v36] & ~(v16 | 7);
  uint64_t v38 = (unint64_t)&v35[v36] & ~(v16 | 7);
  uint64_t v39 = v9;
  unint64_t v40 = (void (*)(unint64_t, unint64_t, uint64_t))v30;
  v30(v37, v38, v39);
  *(_BYTE *)(v37 + v13) = *(_BYTE *)(v38 + v13);
  unint64_t v41 = (v37 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v42 = (v38 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  *(_OWORD *)(v41 + 8) = *(_OWORD *)(v42 + 8);
  *(_BYTE *)(v41 + 24) = *(_BYTE *)(v42 + 24);
  unint64_t v118 = (v13 & 0xFFFFFFFFFFFFFFF8LL) + 25;
  uint64_t v127 = v118 + v16;
  uint64_t v123 = v118 + v16 + (v36 & ~(v16 | 7));
  unint64_t v43 = (unint64_t)&v34[v123] & ~v16;
  unint64_t v44 = (unint64_t)&v35[v123] & ~v16;
  v40(v43, v44, v117);
  unint64_t v45 = (_BYTE *)(v43 + v13);
  *unint64_t v45 = *(_BYTE *)(v44 + v13);
  v45[1] = *(_BYTE *)(v44 + v13 + 1);
  v45[2] = *(_BYTE *)(v44 + v13 + 2);
  unint64_t v46 = (v17 + v43) & ~v16;
  unint64_t v47 = (v17 + v44) & ~v16;
  v40(v46, v47, v117);
  unint64_t v48 = (_BYTE *)(v46 + v13);
  *unint64_t v48 = *(_BYTE *)(v47 + v13);
  v48[1] = *(_BYTE *)(v47 + v13 + 1);
  void v48[2] = *(_BYTE *)(v47 + v13 + 2);
  uint64_t v49 = (v128 + v46) & ~(v16 | 3);
  uint64_t v50 = (v128 + v47) & ~(v16 | 3);
  v40(v49, v50, v117);
  *(_BYTE *)(v49 + v13) = *(_BYTE *)(v50 + v13);
  unint64_t v51 = (v49 + v13) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v52 = (v50 + v13) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v51 + 4) = *(_DWORD *)(v52 + 4);
  *(_BYTE *)(v51 + 8) = *(_BYTE *)(v52 + 8);
  uint64_t v122 = v121 + v16;
  uint64_t v53 = (v122 + v49) & ~v16;
  uint64_t v54 = (v122 + v50) & ~v16;
  v40(v53, v54, v117);
  unint64_t v55 = (_BYTE *)(v53 + v13);
  *unint64_t v55 = *(_BYTE *)(v54 + v13);
  v55[1] = *(_BYTE *)(v54 + v13 + 1);
  v55[2] = *(_BYTE *)(v54 + v13 + 2);
  uint64_t v56 = (v17 + v53) & ~v16;
  uint64_t v57 = (v17 + v54) & ~v16;
  v40(v56, v57, v117);
  unint64_t v58 = (_BYTE *)(v56 + v13);
  *unint64_t v58 = *(_BYTE *)(v57 + v13);
  v58[1] = *(_BYTE *)(v57 + v13 + 1);
  v58[2] = *(_BYTE *)(v57 + v13 + 2);
  uint64_t v59 = (v16 | 7) + v13 + 3;
  uint64_t v60 = (v33 + v13 + 3 + v56) & ~v33;
  uint64_t v61 = (v33 + v13 + 3 + v57) & ~v33;
  v40(v60, v61, v117);
  *(_BYTE *)(v60 + v13) = *(_BYTE *)(v61 + v13);
  unint64_t v62 = (v60 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v63 = (v61 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)(v62 + 8) = *(void *)(v63 + 8);
  *(_BYTE *)(v62 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v63 + 16);
  unint64_t v64 = (v13 & 0xFFFFFFFFFFFFFFF8LL) + 17;
  unint64_t v120 = (v16 | 7) + v64;
  uint64_t v65 = (v120 + v60) & ~(v16 | 7);
  uint64_t v66 = (v120 + v61) & ~(v16 | 7);
  v40(v65, v66, v117);
  *(_BYTE *)(v65 + v13) = *(_BYTE *)(v66 + v13);
  unint64_t v67 = (v65 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v68 = (v66 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)(v67 + 8) = *(void *)(v68 + 8);
  *(_BYTE *)(v67 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v68 + 16);
  unint64_t v69 = (v64 + v16 + v65) & ~v16;
  unint64_t v70 = (v64 + v16 + v66) & ~v16;
  v40(v69, v70, v117);
  unint64_t v71 = (_BYTE *)(v69 + v13);
  _BYTE *v71 = *(_BYTE *)(v70 + v13);
  v71[1] = *(_BYTE *)(v70 + v13 + 1);
  v71[2] = *(_BYTE *)(v70 + v13 + 2);
  uint64_t v72 = (v59 + v69) & ~(v16 | 7);
  uint64_t v73 = (v59 + v70) & ~(v16 | 7);
  v40(v72, v73, v117);
  *(_BYTE *)(v72 + v13) = *(_BYTE *)(v73 + v13);
  unint64_t v74 = (v72 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v75 = (v73 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  *(_OWORD *)(v74 + 8) = *(_OWORD *)(v75 + 8);
  *(_BYTE *)(v74 + 24) = *(_BYTE *)(v75 + 24);
  unint64_t v76 = (v118 + v16 + v72) & ~v16;
  unint64_t v77 = (v118 + v16 + v73) & ~v16;
  v40(v76, v77, v117);
  uint64_t v78 = (_BYTE *)(v76 + v13);
  *uint64_t v78 = *(_BYTE *)(v77 + v13);
  v78[1] = *(_BYTE *)(v77 + v13 + 1);
  v78[2] = *(_BYTE *)(v77 + v13 + 2);
  uint64_t v79 = (v59 + v76) & ~(v16 | 7);
  uint64_t v80 = (v59 + v77) & ~(v16 | 7);
  v40(v79, v80, v117);
  *(_BYTE *)(v79 + v13) = *(_BYTE *)(v80 + v13);
  unint64_t v81 = (v79 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v82 = (v80 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  *(_OWORD *)(v81 + 8) = *(_OWORD *)(v82 + 8);
  *(_BYTE *)(v81 + 24) = *(_BYTE *)(v82 + 24);
  unint64_t v83 = (v33 + v118 + v79) & ~v33;
  unint64_t v84 = (v33 + v118 + v80) & ~v33;
  v40(v83, v84, v117);
  *(_BYTE *)(v83 + v13) = *(_BYTE *)(v84 + v13);
  unint64_t v85 = (v83 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v86 = (v84 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  *(_OWORD *)(v85 + 8) = *(_OWORD *)(v86 + 8);
  *(_BYTE *)(v85 + 24) = *(_BYTE *)(v86 + 24);
  unint64_t v119 = (v16 | 7) + v118;
  unint64_t v87 = (void *)((v119 + v83) & ~(v16 | 7));
  unint64_t v88 = (void *)((v119 + v84) & ~(v16 | 7));
  *unint64_t v87 = *v88;
  uint64_t v89 = ((unint64_t)v87 + v16 + 8) & ~(v16 | 7);
  uint64_t v90 = ((unint64_t)v88 + v16 + 8) & ~(v16 | 7);
  v40(((unint64_t)v87 + v16 + 8) & ~v33, ((unint64_t)v88 + v16 + 8) & ~v33, v117);
  *(_BYTE *)(v89 + v13) = *(_BYTE *)(v90 + v13);
  unint64_t v91 = (v89 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v92 = (v90 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)(v91 + 8) = *(void *)(v92 + 8);
  *(_BYTE *)(v91 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v92 + 16);
  uint64_t v93 = v64 + v16 + ((v16 + 8) & ~(v16 | 7));
  unint64_t v94 = ((unint64_t)v87 + v93) & ~v16;
  unint64_t v95 = (unint64_t)v88 + v93;
  uint64_t v96 = v93;
  unint64_t v97 = v95 & ~v16;
  v40(v94, v97, v117);
  unint64_t v98 = (_BYTE *)(v94 + v13);
  _BYTE *v98 = *(_BYTE *)(v97 + v13);
  v98[1] = *(_BYTE *)(v97 + v13 + 1);
  v98[2] = *(_BYTE *)(v97 + v13 + 2);
  unint64_t v99 = (v17 + v94) & ~v16;
  unint64_t v100 = (v17 + v97) & ~v16;
  v40(v99, v100, v117);
  uint64_t v101 = (_BYTE *)(v99 + v13);
  _BYTE *v101 = *(_BYTE *)(v100 + v13);
  v101[1] = *(_BYTE *)(v100 + v13 + 1);
  v101[2] = *(_BYTE *)(v100 + v13 + 2);
  unint64_t v102 = (v17 + v99) & ~v16;
  uint64_t v103 = (v17 + v100) & ~v16;
  v40(v102, v103, v117);
  uint64_t v104 = (_BYTE *)(v102 + v13);
  *uint64_t v104 = *(_BYTE *)(v103 + v13);
  v104[1] = *(_BYTE *)(v103 + v13 + 1);
  v104[2] = *(_BYTE *)(v103 + v13 + 2);
  uint64_t v105 = v16 | 3;
  uint64_t v106 = (v16 | 7) + v13 + 3;
  uint64_t v107 = ((v17
         + ((v17
           + ((v96
             + ((v119
               + ((v119
                 + ((v106
                   + ((v127
                     + ((v106
                       + ((v64
                         + v16
                         + ((v120
                           + ((v106
                             + ((v17
                               + ((v122
                                 + ((v128
                                   + ((v17
                                     + ((v123
                                       + ((v124 + ((v128 + ((v17 + ((v17 + (v17 & ~v16)) & ~v16)) & ~v16)) & ~v105)) & ~v33)) & ~v16)) & ~v16)) & ~v105)) & ~v16)) & ~v16)) & ~v33)) & ~v33)) & ~v16)) & ~v33)) & ~v16)) & ~v33)) & ~v33)) & ~v33)) & ~v16)) & ~v16)) & ~v16)
       + v13
       + 3
       + 7;
  uint64_t result = v125;
  unint64_t v109 = (void *)((v107 + v125) & 0xFFFFFFFFFFFFF8LL);
  unint64_t v110 = (void *)((v107 + v126) & 0xFFFFFFFFFFFFF8LL);
  *unint64_t v109 = *v110;
  uint64_t v111 = (void *)(((unint64_t)v109 + 15) & 0xFFFFFFFFFFFFF8LL);
  unint64_t v112 = (void *)(((unint64_t)v110 + 15) & 0xFFFFFFFFFFFFF8LL);
  *uint64_t v111 = *v112;
  unint64_t v113 = (void *)(((unint64_t)v111 + 15) & 0xFFFFFFFFFFFFF8LL);
  unint64_t v114 = (void *)(((unint64_t)v112 + 15) & 0xFFFFFFFFFFFFF8LL);
  *unint64_t v113 = *v114;
  unint64_t v115 = (void *)(((unint64_t)v113 + 15) & 0xFFFFFFFFFFFFF8LL);
  unint64_t v116 = (void *)(((unint64_t)v114 + 15) & 0xFFFFFFFFFFFFF8LL);
  *unint64_t v115 = *v116;
  *(void *)(((unint64_t)v115 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v116 + 15) & 0xFFFFFFFFFFFFF8LL);
  return result;
}

uint64_t sub_1002B7B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 32);
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v5,  v6,  &protocol requirements base descriptor for DeviceDriver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v5,  v6,  AssociatedTypeWitness,  &protocol requirements base descriptor for DeviceDriver,  &associated conformance descriptor for DeviceDriver.DeviceDriver.Device: Device);
  uint64_t v9 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for Device);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  v11(a1, a2, v9);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v10 + 64);
  uint64_t v14 = (_BYTE *)(v13 + a1);
  uint64_t v134 = a1;
  uint64_t v135 = a2;
  uint64_t v15 = a2;
  *uint64_t v14 = *(_BYTE *)(v13 + a2);
  v14[1] = *(_BYTE *)(v13 + a2 + 1);
  v14[2] = *(_BYTE *)(v13 + a2 + 2);
  uint64_t v16 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v17 = v13 + 3 + v16;
  uint64_t v18 = (v17 + a1) & ~v16;
  uint64_t v19 = (v17 + v15) & ~v16;
  uint64_t v20 = v12;
  v12(v18, v19, v9);
  uint64_t v21 = (_BYTE *)(v18 + v13);
  *uint64_t v21 = *(_BYTE *)(v19 + v13);
  v21[1] = *(_BYTE *)(v19 + v13 + 1);
  v21[2] = *(_BYTE *)(v19 + v13 + 2);
  uint64_t v22 = (v17 + v18) & ~v16;
  uint64_t v23 = (v17 + v19) & ~v16;
  v20(v22, v23, v9);
  uint64_t v24 = (_BYTE *)(v22 + v13);
  _BYTE *v24 = *(_BYTE *)(v23 + v13);
  v24[1] = *(_BYTE *)(v23 + v13 + 1);
  v24[2] = *(_BYTE *)(v23 + v13 + 2);
  uint64_t v138 = v17;
  uint64_t v25 = (v17 + v22) & ~v16;
  uint64_t v26 = (v17 + v23) & ~v16;
  v20(v25, v26, v9);
  uint64_t v27 = (_BYTE *)(v25 + v13);
  *uint64_t v27 = *(_BYTE *)(v26 + v13);
  v27[1] = *(_BYTE *)(v26 + v13 + 1);
  v27[2] = *(_BYTE *)(v26 + v13 + 2);
  uint64_t v139 = v16 | 3;
  uint64_t v140 = (v16 | 3) + v13 + 3;
  uint64_t v28 = (v140 + v25) & ~(v16 | 3);
  uint64_t v29 = (v140 + v26) & ~(v16 | 3);
  v20(v28, v29, v9);
  uint64_t v30 = v20;
  uint64_t v125 = (void (*)(unint64_t, unint64_t, uint64_t, __n128))v20;
  *(_BYTE *)(v28 + v13) = *(_BYTE *)(v29 + v13);
  unint64_t v31 = (v28 + v13) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v32 = (v29 + v13) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v31 + 4) = *(_DWORD *)(v32 + 4);
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  unint64_t v136 = (v13 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  uint64_t v33 = v16 | 7;
  unint64_t v133 = (v16 | 7) + v136;
  unint64_t v34 = (_BYTE *)((v133 + v28) & ~(v16 | 7));
  uint64_t v35 = (_BYTE *)((v133 + v29) & ~(v16 | 7));
  _BYTE *v34 = *v35;
  uint64_t v36 = (v16 | 7) + 1;
  uint64_t v37 = (unint64_t)&v34[v36] & ~(v16 | 7);
  uint64_t v38 = (unint64_t)&v35[v36] & ~(v16 | 7);
  v30(v37, v38, v9);
  *(_BYTE *)(v37 + v13) = *(_BYTE *)(v38 + v13);
  unint64_t v39 = (v37 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v40 = (v38 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)(v39 + 8) = *(void *)(v40 + 8);
  uint64_t v41 = *(void *)(v39 + 16);
  *(void *)(v39 + swift_weakDestroy(v0 + 16) = *(void *)(v40 + 16);
  __n128 v42 = swift_bridgeObjectRelease(v41);
  *(_BYTE *)(v39 + 24) = *(_BYTE *)(v40 + 24);
  unint64_t v128 = (v13 & 0xFFFFFFFFFFFFFFF8LL) + 25;
  uint64_t v132 = v128 + v16 + (v36 & ~(v16 | 7));
  unint64_t v43 = (unint64_t)&v34[v132] & ~v16;
  unint64_t v44 = (unint64_t)&v35[v132] & ~v16;
  v125(v43, v44, v9, v42);
  unint64_t v45 = (_BYTE *)(v43 + v13);
  *unint64_t v45 = *(_BYTE *)(v44 + v13);
  v45[1] = *(_BYTE *)(v44 + v13 + 1);
  v45[2] = *(_BYTE *)(v44 + v13 + 2);
  unint64_t v46 = (v138 + v43) & ~v16;
  uint64_t v47 = v13 + 3 + v16;
  unint64_t v48 = (v138 + v44) & ~v16;
  ((void (*)(unint64_t, unint64_t, uint64_t))v125)(v46, v48, v9);
  uint64_t v49 = (_BYTE *)(v46 + v13);
  *uint64_t v49 = *(_BYTE *)(v48 + v13);
  v49[1] = *(_BYTE *)(v48 + v13 + 1);
  v49[2] = *(_BYTE *)(v48 + v13 + 2);
  uint64_t v50 = (v140 + v46) & ~(v16 | 3);
  uint64_t v51 = (v140 + v48) & ~(v16 | 3);
  ((void (*)(uint64_t, uint64_t, uint64_t))v125)(v50, v51, v9);
  *(_BYTE *)(v50 + v13) = *(_BYTE *)(v51 + v13);
  unint64_t v52 = (v50 + v13) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v53 = (v51 + v13) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v52 + 4) = *(_DWORD *)(v53 + 4);
  *(_BYTE *)(v52 + 8) = *(_BYTE *)(v53 + 8);
  uint64_t v131 = v136 + v16;
  unint64_t v54 = (v136 + v16 + v50) & ~v16;
  unint64_t v55 = (v136 + v16 + v51) & ~v16;
  ((void (*)(unint64_t, unint64_t, uint64_t))v125)(v54, v55, v9);
  uint64_t v56 = (_BYTE *)(v54 + v13);
  *uint64_t v56 = *(_BYTE *)(v55 + v13);
  v56[1] = *(_BYTE *)(v55 + v13 + 1);
  void v56[2] = *(_BYTE *)(v55 + v13 + 2);
  unint64_t v57 = (v47 + v54) & ~v16;
  unint64_t v58 = (v47 + v55) & ~v16;
  ((void (*)(unint64_t, unint64_t, uint64_t))v125)(v57, v58, v9);
  uint64_t v59 = (_BYTE *)(v57 + v13);
  *uint64_t v59 = *(_BYTE *)(v58 + v13);
  v59[1] = *(_BYTE *)(v58 + v13 + 1);
  void v59[2] = *(_BYTE *)(v58 + v13 + 2);
  uint64_t v60 = (v33 + v13 + 3 + v57) & ~v33;
  uint64_t v61 = (v33 + v13 + 3 + v58) & ~v33;
  ((void (*)(uint64_t, uint64_t, uint64_t))v125)(v60, v61, v9);
  *(_BYTE *)(v60 + v13) = *(_BYTE *)(v61 + v13);
  unint64_t v62 = (v60 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v63 = (v61 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)(v62 + 8) = *(void *)(v63 + 8);
  *(_BYTE *)(v62 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v63 + 16);
  unint64_t v64 = (v13 & 0xFFFFFFFFFFFFFFF8LL) + 17;
  unint64_t v130 = (v16 | 7) + v64;
  uint64_t v65 = (v130 + v60) & ~(v16 | 7);
  uint64_t v66 = (v130 + v61) & ~(v16 | 7);
  ((void (*)(uint64_t, uint64_t, uint64_t))v125)(v65, v66, v9);
  *(_BYTE *)(v65 + v13) = *(_BYTE *)(v66 + v13);
  unint64_t v67 = (v65 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v68 = (v66 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)(v67 + 8) = *(void *)(v68 + 8);
  *(_BYTE *)(v67 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v68 + 16);
  uint64_t v126 = v64 + v16;
  unint64_t v69 = (v64 + v16 + v65) & ~v16;
  unint64_t v70 = (v64 + v16 + v66) & ~v16;
  ((void (*)(unint64_t, unint64_t, uint64_t))v125)(v69, v70, v9);
  unint64_t v71 = (_BYTE *)(v69 + v13);
  _BYTE *v71 = *(_BYTE *)(v70 + v13);
  v71[1] = *(_BYTE *)(v70 + v13 + 1);
  v71[2] = *(_BYTE *)(v70 + v13 + 2);
  uint64_t v137 = (v16 | 7) + v13 + 3;
  uint64_t v72 = (v137 + v69) & ~(v16 | 7);
  uint64_t v73 = (v137 + v70) & ~(v16 | 7);
  ((void (*)(uint64_t, uint64_t, uint64_t))v125)(v72, v73, v9);
  *(_BYTE *)(v72 + v13) = *(_BYTE *)(v73 + v13);
  unint64_t v74 = (v72 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v75 = (v73 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v76 = *(void *)(v74 + 8);
  unint64_t v77 = *(void *)(v74 + 16);
  *(_OWORD *)(v74 + 8) = *(_OWORD *)(v75 + 8);
  sub_1000208D8(v76, v77);
  *(_BYTE *)(v74 + 24) = *(_BYTE *)(v75 + 24);
  uint64_t v127 = v128 + v16;
  unint64_t v78 = (v128 + v16 + v72) & ~v16;
  unint64_t v79 = (v128 + v16 + v73) & ~v16;
  ((void (*)(unint64_t, unint64_t, uint64_t))v125)(v78, v79, v9);
  uint64_t v80 = (_BYTE *)(v78 + v13);
  *uint64_t v80 = *(_BYTE *)(v79 + v13);
  v80[1] = *(_BYTE *)(v79 + v13 + 1);
  v80[2] = *(_BYTE *)(v79 + v13 + 2);
  uint64_t v81 = (v137 + v78) & ~(v16 | 7);
  uint64_t v82 = (v137 + v79) & ~(v16 | 7);
  ((void (*)(uint64_t, uint64_t, uint64_t))v125)(v81, v82, v9);
  *(_BYTE *)(v81 + v13) = *(_BYTE *)(v82 + v13);
  unint64_t v83 = (v81 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v84 = (v82 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v85 = *(void *)(v83 + 8);
  unint64_t v86 = *(void *)(v83 + 16);
  *(_OWORD *)(v83 + 8) = *(_OWORD *)(v84 + 8);
  sub_1000208D8(v85, v86);
  *(_BYTE *)(v83 + 24) = *(_BYTE *)(v84 + 24);
  unint64_t v87 = (v33 + v128 + v81) & ~v33;
  unint64_t v88 = (v33 + v128 + v82) & ~v33;
  ((void (*)(unint64_t, unint64_t, uint64_t))v125)(v87, v88, v9);
  *(_BYTE *)(v87 + v13) = *(_BYTE *)(v88 + v13);
  unint64_t v89 = (v87 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v90 = (v88 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v91 = *(void *)(v89 + 8);
  unint64_t v92 = *(void *)(v89 + 16);
  *(_OWORD *)(v89 + 8) = *(_OWORD *)(v90 + 8);
  sub_1000208D8(v91, v92);
  *(_BYTE *)(v89 + 24) = *(_BYTE *)(v90 + 24);
  unint64_t v129 = (v16 | 7) + v128;
  uint64_t v93 = (void *)((v129 + v87) & ~(v16 | 7));
  unint64_t v94 = (void *)((v129 + v88) & ~(v16 | 7));
  *uint64_t v93 = *v94;
  uint64_t v95 = ((unint64_t)v93 + v16 + 8) & ~(v16 | 7);
  uint64_t v96 = ((unint64_t)v94 + v16 + 8) & ~(v16 | 7);
  ((void (*)(unint64_t, unint64_t, uint64_t))v125)( ((unint64_t)v93 + v16 + 8) & ~v33,  ((unint64_t)v94 + v16 + 8) & ~v33,  v9);
  *(_BYTE *)(v95 + v13) = *(_BYTE *)(v96 + v13);
  unint64_t v97 = (v95 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v98 = (v96 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)(v97 + 8) = *(void *)(v98 + 8);
  *(_BYTE *)(v97 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v98 + 16);
  uint64_t v99 = v126 + ((v16 + 8) & ~(v16 | 7));
  unint64_t v100 = ((unint64_t)v93 + v99) & ~v16;
  unint64_t v101 = ((unint64_t)v94 + v99) & ~v16;
  ((void (*)(unint64_t, unint64_t, uint64_t))v125)(v100, v101, v9);
  unint64_t v102 = (_BYTE *)(v100 + v13);
  *unint64_t v102 = *(_BYTE *)(v101 + v13);
  v102[1] = *(_BYTE *)(v101 + v13 + 1);
  v102[2] = *(_BYTE *)(v101 + v13 + 2);
  uint64_t v103 = v13 + 3 + v16;
  unint64_t v104 = (v138 + v100) & ~v16;
  unint64_t v105 = (v138 + v101) & ~v16;
  ((void (*)(unint64_t, unint64_t, uint64_t))v125)(v104, v105, v9);
  uint64_t v106 = (_BYTE *)(v104 + v13);
  *uint64_t v106 = *(_BYTE *)(v105 + v13);
  v106[1] = *(_BYTE *)(v105 + v13 + 1);
  v106[2] = *(_BYTE *)(v105 + v13 + 2);
  unint64_t v107 = (v103 + v104) & ~v16;
  unint64_t v108 = (v103 + v105) & ~v16;
  ((void (*)(unint64_t, unint64_t, uint64_t))v125)(v107, v108, v9);
  unint64_t v109 = (_BYTE *)(v107 + v13);
  *unint64_t v109 = *(_BYTE *)(v108 + v13);
  v109[1] = *(_BYTE *)(v108 + v13 + 1);
  v109[2] = *(_BYTE *)(v108 + v13 + 2);
  uint64_t v110 = ((v103
         + ((v103
           + ((v126
             + ((v16 + 8) & ~(v16 | 7))
             + ((v129
               + ((v129
                 + ((v137
                   + ((v127
                     + ((v137
                       + ((v126
                         + ((v130
                           + ((v137
                             + ((v103
                               + ((v131
                                 + ((v140
                                   + ((v103
                                     + ((v132
                                       + ((v133 + ((v140 + ((v103 + ((v103 + (v103 & ~v16)) & ~v16)) & ~v16)) & ~v139)) & ~v33)) & ~v16)) & ~v16)) & ~v139)) & ~v16)) & ~v16)) & ~v33)) & ~v33)) & ~v16)) & ~v33)) & ~v16)) & ~v33)) & ~v33)) & ~v33)) & ~v16)) & ~v16)) & ~v16)
       + v13
       + 3
       + 7;
  uint64_t v111 = (uint64_t *)((v110 + v134) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v112 = (uint64_t *)((v110 + v135) & 0xFFFFFFFFFFFFF8LL);
  uint64_t v113 = *v111;
  *uint64_t v111 = *v112;
  swift_release(v113);
  unint64_t v114 = (uint64_t *)(((unint64_t)v111 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v115 = (uint64_t *)(((unint64_t)v112 + 15) & 0xFFFFFFFFFFFFF8LL);
  uint64_t v116 = *v114;
  *unint64_t v114 = *v115;
  swift_release(v116);
  uint64_t v117 = (uint64_t *)(((unint64_t)v114 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v118 = (uint64_t *)(((unint64_t)v115 + 15) & 0xFFFFFFFFFFFFF8LL);
  uint64_t v119 = *v117;
  *uint64_t v117 = *v118;
  swift_release(v119);
  unint64_t v120 = ((unint64_t)v117 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v121 = (void *)(((unint64_t)v118 + 15) & 0xFFFFFFFFFFFFF8LL);
  uint64_t v122 = *(void *)v120;
  *(void *)unint64_t v120 = *v121;
  v120 += 15LL;
  swift_release(v122);
  uint64_t v123 = *(void *)(v120 & 0xFFFFFFFFFFFFFFF8LL);
  *(void *)(v120 & 0xFFFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v121 + 15) & 0xFFFFFFFFFFFFF8LL);
  swift_release(v123);
  return v134;
}

uint64_t sub_1002B84A8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 32);
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v5,  v6,  &protocol requirements base descriptor for DeviceDriver,  &associated type descriptor for DeviceDriver.Device);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v5,  v6,  AssociatedTypeWitness,  &protocol requirements base descriptor for DeviceDriver,  &associated conformance descriptor for DeviceDriver.DeviceDriver.Device: Device);
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for Device,  &associated type descriptor for Device.PreferencesBacking)
                 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= 0xFE) {
    unsigned int v11 = 254;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (v12 <= v11) {
    unsigned int v13 = v11;
  }
  else {
    unsigned int v13 = v12;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v14 = *(void *)(v9 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = v14 + 3 + v15;
  uint64_t v17 = v15 | 3;
  uint64_t v18 = (v15 | 3) + v14 + 3;
  unint64_t v19 = (v14 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  uint64_t v20 = v15 | 7;
  unint64_t v21 = (v15 | 7) + v19;
  uint64_t v22 = (v15 | 7) + 1;
  if (v13 < a2)
  {
    int v23 = (v14 & 0xFFFFFFF8) + 25;
    int v24 = v20 + v14 + 3;
    int v25 = (v14 & 0xFFFFFFF8) + 17;
    if ((((((((((((((_DWORD)v14
                   + (((_DWORD)v16
                     + (((_DWORD)v16
                       + ((v25
                         + (_DWORD)v15
                         + (((_DWORD)v15 + 8) & ~(_DWORD)v20)
                         + (((_DWORD)v20
                           + v23
                           + (((_DWORD)v20
                             + v23
                             + ((v24
                               + ((v23
                                 + (_DWORD)v15
                                 + ((v24
                                   + ((v25
                                     + (_DWORD)v15
                                     + (((_DWORD)v20
                                       + v25
                                       + ((v24
                                         + (((_DWORD)v16
                                           + (((_DWORD)v19
                                             + (_DWORD)v15
                                             + (((_DWORD)v18
                                               + (((_DWORD)v16
                                                 + ((v23
                                                   + (_DWORD)v15
                                                   + (v22 & ~(_DWORD)v20)
                                                   + (((_DWORD)v21
                                                     + (((_DWORD)v18
                                                       + (((_DWORD)v16
                                                         + (((_DWORD)v16 + (v16 & ~(_DWORD)v15)) & ~(_DWORD)v15)) & ~(_DWORD)v15)) & ~(_DWORD)v17)) & ~(_DWORD)v20)) & ~(_DWORD)v15)) & ~(_DWORD)v15)) & ~(_DWORD)v17)) & ~(_DWORD)v15)) & ~(_DWORD)v15)) & ~(_DWORD)v20)) & ~(_DWORD)v20)) & ~(_DWORD)v15)) & ~(_DWORD)v20)) & ~(_DWORD)v15)) & ~(_DWORD)v20)) & ~(_DWORD)v20)) & ~(_DWORD)v20)) & ~(_DWORD)v15)) & ~(_DWORD)v15)) & ~(_DWORD)v15)
                   + 10) & 0xFFFFFFF8)
                 + 15) & 0xFFFFFFF8)
               + 15) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      unsigned int v26 = 2;
    else {
      unsigned int v26 = a2 - v13 + 1;
    }
    if (v26 >= 0x10000) {
      unsigned int v27 = 4;
    }
    else {
      unsigned int v27 = 2;
    }
    if (v26 < 0x100) {
      unsigned int v27 = 1;
    }
    if (v26 >= 2) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = 0LL;
    }
    __asm { BR              X20 }
  }

  if (v11 >= v12)
  {
    if (v10 >= 0xFE)
    {
      uint64_t v30 = *(uint64_t (**)(uint64_t))(v9 + 48);
      uint64_t v29 = a1;
      return v30(v29);
    }

    unsigned int v33 = *(unsigned __int8 *)(a1 + v14 + 1);
    if (v33 >= 2) {
      return ((v33 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    return 0LL;
  }

  uint64_t v29 = (v22 + ((v21 + ((v18 + ((v16 + ((v16 + ((v16 + a1) & ~v15)) & ~v15)) & ~v15)) & ~v17)) & ~v20)) & ~v20;
  if (v10 >= 0x7FFFFFFF)
  {
    uint64_t v30 = *(uint64_t (**)(uint64_t))(v9 + 48);
    return v30(v29);
  }

  unint64_t v32 = *(void *)(((v29 + v14) & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v32 >= 0xFFFFFFFF) {
    LODWORD(v32) = -1;
  }
  return (v32 + 1);
}

void sub_1002B8804(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 32);
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v7,  v8,  &protocol requirements base descriptor for DeviceDriver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v7,  v8,  AssociatedTypeWitness,  &protocol requirements base descriptor for DeviceDriver,  &associated conformance descriptor for DeviceDriver.DeviceDriver.Device: Device);
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for Device)
                  - 8);
  unsigned int v12 = *(_DWORD *)(v11 + 84);
  if (v12 <= 0xFE) {
    unsigned int v13 = 254;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v11 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v11 + 84);
  }
  if (v14 <= v13) {
    unsigned int v15 = v13;
  }
  else {
    unsigned int v15 = v14;
  }
  uint64_t v16 = *(void *)(v11 + 64);
  uint64_t v17 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v18 = v16 + 3 + v17;
  unint64_t v19 = (v16 & 0xFFFFFFFFFFFFFFF8LL) + 25;
  uint64_t v20 = (v17 | 7) + v16 + 3;
  unint64_t v21 = (v16 & 0xFFFFFFFFFFFFFFF8LL) + 17;
  size_t v22 = ((((((((((v16
                + ((v18
                  + ((v18
                    + ((v21
                      + v17
                      + ((v17 + 8) & ~(v17 | 7))
                      + (((v17 | 7)
                        + v19
                        + (((v17 | 7)
                          + v19
                          + ((v20
                            + ((v19
                              + v17
                              + ((v20
                                + ((v21
                                  + v17
                                  + (((v17 | 7)
                                    + v21
                                    + ((v20
                                      + ((v18
                                        + (((v16 & 0xFFFFFFFFFFFFFFFCLL)
                                          + 9
                                          + v17
                                          + (((v17 | 3)
                                            + v16
                                            + 3
                                            + ((v18
                                              + (((((v17 | 7) + 1) & ~(v17 | 7))
                                                + v19
                                                + v17
                                                + (((v17 | 7)
                                                  + (v16 & 0xFFFFFFFFFFFFFFFCLL)
                                                  + 9
                                                  + (((v17 | 3)
                                                    + v16
                                                    + 3
                                                    + ((v18 + ((v18 + (v18 & ~v17)) & ~v17)) & ~v17)) & ~(v17 | 3))) & ~(v17 | 7))) & ~v17)) & ~v17)) & ~(v17 | 3))) & ~v17)) & ~v17)) & ~(v17 | 7))) & ~(v17 | 7))) & ~v17)) & ~(v17 | 7))) & ~v17)) & ~(v17 | 7))) & ~(v17 | 7))) & ~(v17 | 7))) & ~v17)) & ~v17)) & ~v17)
                + 10) & 0xFFFFFFFFFFFFFFF8LL)
              + 15) & 0xFFFFFFFFFFFFFFF8LL)
            + 15) & 0xFFFFFFFFFFFFFFF8LL)
          + 15) & 0xFFFFFFFFFFFFFFF8LL)
        + 15) & 0xFFFFFFFFFFFFFFF8LL)
      + 8;
  if (v15 >= a3)
  {
    int v25 = 0;
    if (a2 <= v15) {
      goto LABEL_23;
    }
  }

  else
  {
    if ((((((((((((_DWORD)v16
                 + (((_DWORD)v18
                   + (((_DWORD)v18
                     + (((_DWORD)v21
                       + (_DWORD)v17
                       + (((_DWORD)v17 + 8) & ~(v17 | 7))
                       + (((v17 | 7)
                         + v19
                         + (((v17 | 7)
                           + v19
                           + (((_DWORD)v20
                             + (((int)v19
                               + (int)v17
                               + (((_DWORD)v20
                                 + (((int)v21
                                   + (int)v17
                                   + (((v17 | 7)
                                     + v21
                                     + (((_DWORD)v20
                                       + (((_DWORD)v18
                                         + (((v16 & 0xFFFFFFFC)
                                           + 9
                                           + (_DWORD)v17
                                           + (((v17 | 3)
                                             + (_DWORD)v16
                                             + 3
                                             + (((_DWORD)v18
                                               + (((((v17 | 7) + 1) & ~(v17 | 7))
                                                 + v19
                                                 + v17
                                                 + (((v17 | 7)
                                                   + (v16 & 0xFFFFFFFC)
                                                   + 9
                                                   + (((v17 | 3)
                                                     + (_DWORD)v16
                                                     + 3
                                                     + (((_DWORD)v18
                                                       + (((_DWORD)v18 + (v18 & ~(_DWORD)v17)) & ~(_DWORD)v17)) & ~(_DWORD)v17)) & ~(v17 | 3))) & ~(v17 | 7))) & ~(_DWORD)v17)) & ~(_DWORD)v17)) & ~(v17 | 3))) & ~(_DWORD)v17)) & ~(_DWORD)v17)) & ~(v17 | 7))) & ~(v17 | 7))) & ~(_DWORD)v17)) & ~(v17 | 7))) & ~(_DWORD)v17)) & ~(v17 | 7))) & ~(v17 | 7))) & ~(v17 | 7))) & ~(_DWORD)v17)) & ~(_DWORD)v17)) & ~(_DWORD)v17)
                 + 10) & 0xFFFFFFF8)
               + 15) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v23 = a3 - v15 + 1;
    else {
      unsigned int v23 = 2;
    }
    if (v23 >= 0x10000) {
      int v24 = 4;
    }
    else {
      int v24 = 2;
    }
    if (v23 < 0x100) {
      int v24 = 1;
    }
    if (v23 >= 2) {
      int v25 = v24;
    }
    else {
      int v25 = 0;
    }
    if (a2 <= v15) {
LABEL_23:
    }
      __asm { BR              X6 }
  }

  if ((_DWORD)v22)
  {
    unsigned int v26 = ~v15 + a2;
    bzero(a1, v22);
    *a1 = v26;
  }

  __asm { BR              X10 }

void sub_1002B8AB8()
{
  *(_BYTE *)(v0 + v2) = v1;
}

void sub_1002B8AC0()
{
  *(_DWORD *)(v1 + v2) = 0;
  if (v0) {
    JUMPOUT(0x1002B8AC8LL);
  }
}

void sub_1002B8B9C()
{
  *(_WORD *)(v0 + v2) = v1;
}

void sub_1002B8BA4()
{
  *(_DWORD *)(v0 + v2) = v1;
}

void sub_1002B8BAC(uint64_t a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_WORD *)&v18[v20] = 0;
  if (v17)
  {
    if (v10 >= v11)
    {
      if (v10 >= v17) {
        JUMPOUT(0x1002B8BD4LL);
      }
      if ((_DWORD)a2)
      {
        else {
          int v9 = 4;
        }
        bzero(v18, a2);
        __asm { BR              X10 }
      }
    }

    else
    {
      uint64_t v6 = (_BYTE *)((v14 + ((v13 + ((v12 + ((v12 + ((unint64_t)&v18[v12] & a6)) & a6)) & a6)) & v16)) & v15);
      if (v11 >= v17) {
        JUMPOUT(0x1002B8BB8LL);
      }
      else {
        LOBYTE(v7) = -1;
      }
      char v8 = v7 & (~(_BYTE)v11 + v17);
      bzero(v6, v19);
      if ((_DWORD)v19 != 1) {
        JUMPOUT(0x1002B8C00LL);
      }
      *uint64_t v6 = v8;
    }
  }

void sub_1002B8C4C()
{
  *(_WORD *)uint64_t v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
}

_UNKNOWN **sub_1002B8C7C()
{
  return &off_1003F29A0;
}

_UNKNOWN **sub_1002B8C88()
{
  return &off_1003F2508;
}

uint64_t sub_1002B8C94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002B8CB8(a1, a2, a3, (uint64_t)&associated conformance descriptor for Device.Device.Keychain: KeyStorage);
}

_UNKNOWN **sub_1002B8CA0()
{
  return &off_1003FB558;
}

uint64_t sub_1002B8CAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002B8CB8( a1,  a2,  a3,  (uint64_t)&associated conformance descriptor for Device.Device.PreferencesBacking: PreferencesStorage);
}

uint64_t sub_1002B8CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v6,  v7,  &protocol requirements base descriptor for DeviceDriver,  &associated type descriptor for DeviceDriver.Device);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v6,  v7,  AssociatedTypeWitness,  &protocol requirements base descriptor for DeviceDriver,  &associated conformance descriptor for DeviceDriver.DeviceDriver.Device: Device);
  return swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  a1,  &protocol requirements base descriptor for Device,  a4);
}

_UNKNOWN **sub_1002B8D48()
{
  return &off_1003F4AE8;
}

uint64_t sub_1002B8D54(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10035F710, a1);
}

uint64_t sub_1002B8D64(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 88) + 8LL);
}

uint64_t sub_1002B8D70(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 112);
}

uint64_t sub_1002B8D78(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10035F764, a1);
}

uint64_t sub_1002B8D88(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getWitnessTable(&unk_10035F72C, a2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002B8DB4(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 104);
}

uint64_t sub_1002B8DBC(uint64_t a1, uint64_t a2)
{
  return sub_1002B473C(a1, a2);
}

uint64_t sub_1002B8DDC()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002B8DEC()
{
  return sub_1002BCBA4((void (*)(void))&_swift_release);
}

uint64_t sub_1002B8DF8()
{
  return sub_1002BC81C((uint64_t (*)(void, void, void, void, void, void))sub_1002B4B3C);
}

uint64_t sub_1002B8E04(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002B8E14(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1002B8E1C()
{
  return sub_1002BCBA4((void (*)(void))&_swift_release);
}

uint64_t sub_1002B8E28()
{
  return sub_1002BC81C((uint64_t (*)(void, void, void, void, void, void))sub_1002B4D98);
}

char *sub_1002B8E34@<X0>(uint64_t *a1@<X0>, char **a2@<X8>)
{
  return sub_1002B4640(a1, v2, a2);
}

uint64_t sub_1002B8E50(uint64_t result)
{
  if (result != 1) {
    return swift_release(result);
  }
  return result;
}

uint64_t sub_1002B8E60(uint64_t result)
{
  if (result != 1) {
    return swift_retain(result);
  }
  return result;
}

void sub_1002B8E70(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_1002B8FA0()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 - 144);
  uint64_t v2 = *(void *)(v0 - 136);
  uint64_t v3 = *(char **)(v0 - 288);
  id v7 = *(id *)(v0 - 152);
  char v8 = v3;
  id v4 = v7;
  swift_retain();
  sub_1002BA908( (void (*)(uint64_t))sub_1002BCAF0,  (uint64_t)&v6,  v1,  v2,  v3,  *(void *)(v0 - 296),  (uint64_t (*)(id))OS_dispatch_queue.nan.unsafeMutableAddressor,  (uint64_t (*)(uint64_t))sub_1002B3640,  "Failed to accept %@ because there is no NAN interface");

  return swift_release(v2);
}

uint64_t sub_1002BA908( void (*a1)(uint64_t), uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, char *a5, uint64_t a6, uint64_t (*a7)(id), uint64_t (*a8)(uint64_t), const char *a9)
{
  uint64_t v44 = a4;
  unint64_t v45 = a3;
  uint64_t v42 = a2;
  unint64_t v43 = a1;
  uint64_t v12 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v15 = (uint64_t *)((char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_100058CD0(0LL, (unint64_t *)&qword_1004044D0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  id v16 = *(id *)&a5[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_queue];
  unsigned int v17 = (id *)a7(v16);
  id v18 = *v17;
  char v19 = static NSObject.== infix(_:_:)(v16, v18);

  if ((v19 & 1) != 0)
  {
    id v20 = *v17;
    *uint64_t v15 = v20;
    (*(void (**)(void *, void, uint64_t))(v13 + 104))( v15,  enum case for DispatchPredicate.onQueue(_:),  v12);
    id v21 = v20;
    LOBYTE(v20) = _dispatchPreconditionTest(_:)(v15);
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v13 + 8))(v15, v12);
    if ((v20 & 1) != 0)
    {
      uint64_t v23 = a8(result);
      if (v23)
      {
        uint64_t v24 = v23;
        v43(v23);
        v45(0LL);
        return swift_release(v24);
      }

      else
      {
        unint64_t v32 = a5;
        unsigned int v33 = (os_log_s *)Logger.logObject.getter(v32);
        os_log_type_t v34 = static os_log_type_t.error.getter(v33);
        if (os_log_type_enabled(v33, v34))
        {
          uint64_t v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v36 = (char **)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)uint64_t v35 = 138412290;
          unint64_t v46 = v32;
          uint64_t v37 = v32;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47);
          *uint64_t v36 = v32;

          _os_log_impl((void *)&_mh_execute_header, v33, v34, a9, v35, 0xCu);
          uint64_t v38 = sub_100002274(&qword_100404DE0);
          swift_arrayDestroy(v36, 1LL, v38);
          swift_slowDealloc(v36, -1LL, -1LL);
          swift_slowDealloc(v35, -1LL, -1LL);
        }

        else
        {
        }

        unint64_t v39 = &v32[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
        uint64_t v40 = *(void *)&v32[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
        uint64_t v41 = *(void *)&v32[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler + 8];
        *(void *)unint64_t v39 = 0LL;
        *((void *)v39 + 1) = 0LL;
        sub_100021018(v40, v41);
        return v45(7LL);
      }
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    unint64_t v25 = sub_1000033FC();
    uint64_t v26 = swift_allocError(&type metadata for WiFiError, v25, 0LL, 0LL);
    *(_OWORD *)uint64_t v27 = xmmword_10033A940;
    *(_BYTE *)(v27 + swift_weakDestroy(v0 + 16) = 1;
    swift_willThrow(v26);
    uint64_t v28 = &a5[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
    uint64_t v29 = *(void *)&a5[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
    uint64_t v30 = *(void *)&a5[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler + 8];
    *(void *)uint64_t v28 = 0LL;
    *((void *)v28 + 1) = 0LL;
    sub_100021018(v29, v30);
    swift_getErrorValue(v26, v48, v47);
    uint64_t v31 = Error.apiError.getter(v47[1]);
    v45(v31);
    return swift_errorRelease();
  }

  return result;
}

uint64_t sub_1002BAC54(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = type metadata accessor for AWDLPeer(0LL);
  __chkstk_darwin();
  id v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  int v9 = (char *)&v22 - v8;
  uint64_t v10 = a2 & 0xFFFFFFFFFFFFLL;
  if (!sub_100305C50(v10))
  {
    unint64_t v21 = sub_1000033FC();
    uint64_t v18 = swift_allocError(&type metadata for WiFiError, v21, 0LL, 0LL);
    uint64_t v20 = 3LL;
    goto LABEL_6;
  }

  sub_100304FBC(v10, (uint64_t)v9);
  unsigned int v11 = &v9[*(int *)(v5 + 96)];
  uint64_t v12 = *(void *)v11;
  char v13 = v11[8];
  sub_1002696BC((uint64_t)v9, (uint64_t)v7);
  if ((v13 & 1) != 0)
  {
    uint64_t v14 = &v7[*(int *)(v5 + 92)];
    uint64_t v12 = *(void *)v14;
    int v15 = v14[8];
    sub_100269748((uint64_t)v7);
    uint64_t result = sub_100269748((uint64_t)v9);
    if (v15 == 1)
    {
      unint64_t v17 = sub_1000033FC();
      uint64_t v18 = swift_allocError(&type metadata for WiFiError, v17, 0LL, 0LL);
      uint64_t v20 = 2LL;
LABEL_6:
      *(void *)uint64_t v19 = v20;
      *(void *)(v19 + 8) = 0LL;
      *(_BYTE *)(v19 + swift_weakDestroy(v0 + 16) = 1;
      return swift_willThrow(v18);
    }
  }

  else
  {
    sub_100269748((uint64_t)v7);
    uint64_t result = sub_100269748((uint64_t)v9);
  }

  if (v12 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else if (v12 <= 0x7FFFFFFF)
  {
    return a3(v12);
  }

  __break(1u);
  return result;
}

void sub_1002BADF8(uint64_t a1, void (*a2)(unint64_t, __n128))
{
  (*(void (**)(void *__return_ptr, void))(*(void *)(*(void *)(*(void *)a1 + 408LL) + 88LL) + 152LL))( v50,  *(void *)(*(void *)(*(void *)a1 + 408LL) + 80LL));
  sub_1000586C0((uint64_t)v50, (uint64_t)__src, &qword_100406950);
  if (sub_1002BCB6C((uint64_t)__src) == 1)
  {
    unint64_t v4 = sub_10000D658((uint64_t)_swiftEmptyArrayStorage);
  }

  else
  {
    memcpy(v52, __src, 0xE80uLL);
    uint64_t v6 = eventPayload(for:)((uint64_t)v52);
    id v7 = (uint64_t *)(a1 + *(void *)(*(void *)a1 + 528LL));
    swift_beginAccess(v7, v47, 0LL, 0LL);
    uint64_t v8 = *v7;
    int v9 = (void *)AWDLTrafficRegistrationServiceAirPlay;
    swift_bridgeObjectRetain(*v7);
    id v10 = v9;
    char v11 = sub_100303EB0((uint64_t)v10, v8);

    swift_bridgeObjectRelease(v8);
    uint64_t v49 = &type metadata for Bool;
    LOBYTE(v48) = v11 & 1;
    sub_100022594(&v48, v46);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    unint64_t v53 = v6;
    sub_10001EDDC(v46, 0xD000000000000019LL, 0x80000001003691C0LL, isUniquelyReferenced_nonNull_native);
    char v13 = v53;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    uint64_t v14 = *v7;
    int v15 = (void *)AWDLTrafficRegistrationServiceSidecar;
    swift_bridgeObjectRetain(*v7);
    id v16 = v15;
    char v17 = sub_100303EB0((uint64_t)v16, v14);

    swift_bridgeObjectRelease(v14);
    uint64_t v49 = &type metadata for Bool;
    LOBYTE(v48) = v17 & 1;
    sub_100022594(&v48, v46);
    char v18 = swift_isUniquelyReferenced_nonNull_native(v13);
    unint64_t v53 = v13;
    sub_10001EDDC(v46, 0xD000000000000019LL, 0x80000001003691E0LL, v18);
    uint64_t v19 = v53;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    uint64_t v20 = *v7;
    unint64_t v21 = (void *)AWDLTrafficRegistrationServiceRemoteCamera;
    swift_bridgeObjectRetain(*v7);
    id v22 = v21;
    char v23 = sub_100303EB0((uint64_t)v22, v20);

    swift_bridgeObjectRelease(v20);
    uint64_t v49 = &type metadata for Bool;
    LOBYTE(v48) = v23 & 1;
    sub_100022594(&v48, v46);
    char v24 = swift_isUniquelyReferenced_nonNull_native(v19);
    unint64_t v53 = v19;
    sub_10001EDDC(v46, 0xD00000000000001ELL, 0x8000000100369200LL, v24);
    unint64_t v25 = v53;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    uint64_t v26 = *v7;
    uint64_t v27 = (void *)AWDLTrafficRegistrationServiceRemoteScreen;
    swift_bridgeObjectRetain(*v7);
    uint64_t v28 = v27;
    char v29 = sub_100303EB0(v28, v26);

    swift_bridgeObjectRelease(v26);
    uint64_t v49 = &type metadata for Bool;
    LOBYTE(v48) = v29 & 1;
    sub_100022594(&v48, v46);
    char v30 = swift_isUniquelyReferenced_nonNull_native(v25);
    unint64_t v53 = v25;
    sub_10001EDDC(v46, 0xD00000000000001ELL, 0x8000000100369220LL, v30);
    uint64_t v31 = v53;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    uint64_t v32 = *v7;
    unsigned int v33 = (void *)AWDLTrafficRegistrationServiceUniversalControl;
    swift_bridgeObjectRetain(*v7);
    id v34 = v33;
    LOBYTE(v28) = sub_100303EB0((uint64_t)v34, v32);

    swift_bridgeObjectRelease(v32);
    uint64_t v49 = &type metadata for Bool;
    LOBYTE(v48) = v28 & 1;
    sub_100022594(&v48, v46);
    char v35 = swift_isUniquelyReferenced_nonNull_native(v31);
    unint64_t v53 = v31;
    sub_10001EDDC(v46, 0xD000000000000022LL, 0x8000000100369240LL, v35);
    uint64_t v36 = v53;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    uint64_t v37 = *v7;
    uint64_t v38 = (void *)AWDLTrafficRegistrationServiceTVRemoteCamera;
    swift_bridgeObjectRetain(*v7);
    uint64_t v39 = v38;
    LOBYTE(v28) = sub_100303EB0(v39, v37);

    swift_bridgeObjectRelease(v37);
    uint64_t v49 = &type metadata for Bool;
    LOBYTE(v48) = v28 & 1;
    sub_100022594(&v48, v46);
    char v40 = swift_isUniquelyReferenced_nonNull_native(v36);
    unint64_t v53 = v36;
    sub_10001EDDC(v46, 0xD000000000000020LL, 0x8000000100369270LL, v40);
    uint64_t v41 = v53;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    uint64_t v42 = *v7;
    unint64_t v43 = (void *)AWDLTrafficRegistrationServiceTimeSync;
    swift_bridgeObjectRetain(v42);
    id v44 = v43;
    LOBYTE(v39) = sub_100303EB0((uint64_t)v44, v42);

    swift_bridgeObjectRelease(v42);
    uint64_t v49 = &type metadata for Bool;
    LOBYTE(v48) = v39 & 1;
    sub_100022594(&v48, v46);
    char v45 = swift_isUniquelyReferenced_nonNull_native(v41);
    unint64_t v53 = v41;
    sub_10001EDDC(v46, 0xD00000000000001DLL, 0x80000001003692A0LL, v45);
    unint64_t v4 = (unint64_t)v53;
    __n128 v5 = swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  a2(v4, v5);
  swift_bridgeObjectRelease(v4);
}

void sub_1002BB31C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (a1)
  {
    unint64_t v4 = sub_10000D658((uint64_t)_swiftEmptyArrayStorage);
    a3();
    swift_bridgeObjectRelease(v4);
  }

  else
  {
    __n128 v5 = (void *)(a2 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler);
    uint64_t v6 = *(void *)(a2 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler);
    uint64_t v7 = *(void *)(a2 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler + 8);
    *__n128 v5 = 0LL;
    v5[1] = 0LL;
    sub_100021018(v6, v7);
  }

uint64_t sub_1002BB388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v33 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v31 = *(void *)(v15 - 8);
  uint64_t v32 = v15;
  __chkstk_darwin();
  char v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(_BYTE *)(a1 + *(void *)(*(void *)a1 + 152LL)) == 1)
  {
    uint64_t v18 = a5;
    uint64_t v19 = sub_1002B35D8();
    if (v19)
    {
      uint64_t v20 = v19;
      unint64_t v21 = (void *)sub_100305DB0();
      swift_release(v20);
    }

    else
    {
      unint64_t v21 = _swiftEmptyDictionarySingleton;
    }

    a5 = v18;
  }

  else
  {
    unint64_t v21 = _swiftEmptyDictionarySingleton;
  }

  id v22 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  char v23 = (void *)swift_allocObject(&unk_1003F94F8, 64LL, 7LL);
  v23[2] = a2;
  v23[3] = v21;
  void v23[4] = a3;
  v23[5] = a4;
  v23[6] = a5;
  _BYTE v23[7] = a6;
  aBlock[4] = sub_1002BCB94;
  uint64_t v36 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000021F0;
  aBlock[3] = &unk_1003F9510;
  char v24 = _Block_copy(aBlock);
  id v25 = v22;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v26 = swift_retain();
  static DispatchQoS.unspecified.getter(v26);
  id v34 = _swiftEmptyArrayStorage;
  unint64_t v27 = sub_100002234();
  uint64_t v28 = sub_100002274((uint64_t *)&unk_1004052A0);
  unint64_t v29 = sub_1000022B4();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v28, v29, v12, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v14, v24);
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v17, v32);
  return swift_release(v36);
}

uint64_t sub_1002BB5DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v46 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v44 = *(void *)(v15 - 8);
  uint64_t v45 = v15;
  __chkstk_darwin();
  char v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(_BYTE *)(a1 + *(void *)(*(void *)a1 + 136LL)) == 1)
  {
    uint64_t v43 = a5;
    uint64_t v18 = sub_1002B3640();
    id v22 = _swiftEmptyDictionarySingleton;
    if (v18)
    {
      uint64_t v23 = v18;
      uint64_t v24 = sub_1002E8D68(v18, v19, v20, v21);
      uint64_t v25 = sub_1002883DC();
      uint64_t v42 = a2;
      uint64_t v26 = a3;
      uint64_t v27 = a4;
      uint64_t v28 = a6;
      uint64_t v29 = v25;
      swift_release(v24);
      BOOL v30 = v29 <= 0;
      a6 = v28;
      a4 = v27;
      a3 = v26;
      a2 = v42;
      char v31 = !v30;
      uint64_t v51 = &type metadata for Bool;
      LOBYTE(aBlock) = v31;
      sub_100022594(&aBlock, v48);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      uint64_t v47 = _swiftEmptyDictionarySingleton;
      sub_10001EDDC(v48, 0xD000000000000018LL, 0x8000000100366450LL, isUniquelyReferenced_nonNull_native);
      id v22 = v47;
      swift_release(v23);
      swift_bridgeObjectRelease(0x8000000000000000LL);
    }

    a5 = v43;
  }

  else
  {
    id v22 = _swiftEmptyDictionarySingleton;
  }

  uint64_t v33 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  id v34 = (void *)swift_allocObject(&unk_1003F94A8, 64LL, 7LL);
  v34[2] = a2;
  v34[3] = v22;
  v34[4] = a3;
  v34[5] = a4;
  v34[6] = a5;
  v34[7] = a6;
  unint64_t v52 = sub_1002BCB94;
  unint64_t v53 = v34;
  *(void *)&__int128 aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256LL;
  uint64_t v50 = sub_1000021F0;
  uint64_t v51 = &unk_1003F94C0;
  char v35 = _Block_copy(&aBlock);
  id v36 = v33;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v37 = swift_retain();
  static DispatchQoS.unspecified.getter(v37);
  *(void *)&v48[0] = _swiftEmptyArrayStorage;
  unint64_t v38 = sub_100002234();
  uint64_t v39 = sub_100002274((uint64_t *)&unk_1004052A0);
  unint64_t v40 = sub_1000022B4();
  dispatch thunk of SetAlgebra.init<A>(_:)(v48, v39, v40, v12, v38);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v14, v35);
  _Block_release(v35);

  (*(void (**)(char *, uint64_t))(v46 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v17, v45);
  return swift_release(v53);
}

double sub_1002BB8C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  id v10 = (void *)(a1 + 16);
  swift_beginAccess(a1 + 16, v18, 33LL, 0LL);
  swift_bridgeObjectRetain(a2);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + 16));
  v17[0] = *(void *)(a1 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = 0x8000000000000000LL;
  sub_100153BE4(a2, (uint64_t)sub_100153E44, 0LL, isUniquelyReferenced_nonNull_native, v17);
  uint64_t v12 = *v10;
  void *v10 = v17[0];
  swift_bridgeObjectRelease(v12);
  swift_endAccess(v18);
  swift_beginAccess(a3 + 16, v18, 1LL, 0LL);
  *(_BYTE *)(a3 + swift_weakDestroy(v0 + 16) = 1;
  *(void *)&double result = swift_beginAccess(a4 + 16, v17, 0LL, 0LL).n128_u64[0];
  if ((*(_BYTE *)(a4 + 16) & 1) != 0)
  {
    swift_beginAccess(v10, &v16, 0LL, 0LL);
    uint64_t v14 = *v10;
    uint64_t v15 = swift_bridgeObjectRetain(*v10);
    a5(v15);
    *(void *)&double result = swift_bridgeObjectRelease(v14).n128_u64[0];
  }

  return result;
}

id sub_1002BBA04(char *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)v1;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = swift_allocObject(&unk_1003F9368, 24LL, 7LL);
  swift_weakInit(v9 + 16, v2);
  uint64_t v10 = swift_allocObject(&unk_1003F9390, 64LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = *(void *)(v4 + 80);
  *(void *)(v10 + 24) = *(void *)(v4 + 88);
  *(_OWORD *)(v10 + 32) = *(_OWORD *)(v4 + 96);
  *(void *)(v10 + 48) = *(void *)(v4 + 112);
  *(void *)(v10 + 56) = v9;
  char v11 = (double (**)(uint64_t, uint64_t))&a1[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler];
  uint64_t v12 = *(void *)&a1[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler + 8];
  *char v11 = sub_1002BBE14;
  v11[1] = (double (*)(uint64_t, uint64_t))v10;
  __n128 v13 = swift_release(v12);
  (*(void (**)(char *, char *, uint64_t, __n128))(v6 + 16))( v8,  &v2[*(void *)(*(void *)v2 + 184LL)],  v5,  v13);
  uint64_t v14 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = (v14 + 16) & ~v14;
  unint64_t v16 = (v7 + v15 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v17 = swift_allocObject(&unk_1003F93B8, v16 + 8, v14 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v17 + v15, v8, v5);
  *(void *)(v17 + vswift_weakDestroy(v0 + 16) = a1;
  uint64_t v18 = (uint64_t (**)())&a1[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
  uint64_t v19 = *(void *)&a1[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
  uint64_t v20 = *(void *)&a1[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler + 8];
  *uint64_t v18 = sub_1002BBE98;
  v18[1] = (uint64_t (*)())v17;
  uint64_t v21 = a1;
  sub_100021018(v19, v20);
  return [*(id *)&v21[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection] activate];
}

double sub_1002BBBAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3 + 16;
  uint64_t v5 = (void *)(a2 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler);
  uint64_t v6 = *(void *)(a2 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler + 8);
  *uint64_t v5 = NANBitmap.Channel.operatingClass.getter;
  v5[1] = 0LL;
  swift_release(v6);
  swift_beginAccess(v4, v10, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    uint64_t v9 = Strong;
    sub_1002B8E70(a1);
    *(void *)&double result = swift_release(v9).n128_u64[0];
  }

  return result;
}

uint64_t sub_1002BBC40(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v5 = 138412290;
    uint64_t v15 = v2;
    uint64_t v7 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);
    *uint64_t v6 = v2;

    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "The invalidation handler was called for %@ before we could process its request",  v5,  0xCu);
    uint64_t v8 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v6, 1LL, v8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v9 = (CoreP2P::NANBitmap::Time::Control (__swiftcall **)(Swift::UInt16))&v2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler];
  uint64_t v10 = *(void *)&v2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler + 8];
  *uint64_t v9 = NANBitmap.Time.Control.init(rawValue:);
  v9[1] = 0LL;
  swift_release(v10);
  char v11 = &v2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
  uint64_t v12 = *(void *)&v2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
  uint64_t v13 = *(void *)&v2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler + 8];
  *(void *)char v11 = 0LL;
  *((void *)v11 + 1) = 0LL;
  return sub_100021018(v12, v13);
}

uint64_t sub_1002BBDCC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002BBDF0()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

double sub_1002BBE14(uint64_t a1, uint64_t a2)
{
  return sub_1002BBBAC(a1, a2, *(void *)(v2 + 56));
}

uint64_t sub_1002BBE24()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1002BBE98()
{
  uint64_t v1 = *(void *)(type metadata accessor for Logger(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1002BBC40(v0 + v2, *(void **)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1002BBED8(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_1002BBF14(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v86 = a1;
  uint64_t v3 = (void *)*v1;
  uint64_t v80 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v83 = *(void *)(v80 - 8);
  __chkstk_darwin();
  unint64_t v79 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v81 = *(void *)(v5 - 8);
  uint64_t v82 = v5;
  __chkstk_darwin();
  unint64_t v78 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = v3[12];
  uint64_t v8 = (void **)v3[10];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v7,  v8,  &protocol requirements base descriptor for DeviceDriver);
  uint64_t v10 = v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v7,  v8,  AssociatedTypeWitness,  &protocol requirements base descriptor for DeviceDriver,  &associated conformance descriptor for DeviceDriver.DeviceDriver.Device: Device);
  uint64_t v75 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for Device);
  __chkstk_darwin();
  uint64_t v76 = (char *)&v65 - v12;
  uint64_t v13 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for Device);
  __chkstk_darwin();
  unint64_t v69 = (char *)&v65 - v14;
  uint64_t v15 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  uint64_t v68 = *(void *)(v15 - 8);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v65 - v16;
  uint64_t v66 = v13;
  uint64_t v65 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  v15,  v13,  &protocol requirements base descriptor for Device,  &associated conformance descriptor for Device.Device.PreferencesBacking: PreferencesStorage);
  type metadata accessor for Preferences(0LL, v13, v65, v18);
  __chkstk_darwin();
  uint64_t v85 = (void (*)(char *, uint64_t, uint64_t))((char *)&v65 - v19);
  uint64_t v88 = v3[11];
  uint64_t v73 = (void *)v3[13];
  unint64_t v87 = (double (*)())v3[14];
  unint64_t v71 = v3;
  __int128 aBlock = v10;
  uint64_t v91 = v88;
  uint64_t v84 = (uint64_t)v10;
  unint64_t v92 = (uint64_t (*)(uint64_t))v7;
  uint64_t v93 = v73;
  unint64_t v94 = v87;
  uint64_t v74 = type metadata accessor for P2PController.Components(0LL, (uint64_t)&aBlock);
  uint64_t v72 = *(void *)(v74 - 8);
  uint64_t v77 = *(void *)(v72 + 64);
  __chkstk_darwin();
  uint64_t v67 = (uint64_t)&v65 - v20;
  *((_BYTE *)v1 + v3[17]) = 0;
  *(void *)((char *)v1 + *(void *)(*v1 + 144LL)) = 1LL;
  *((_BYTE *)v1 + *(void *)(*v1 + 152LL)) = 0;
  *(void *)((char *)v1 + *(void *)(*v1 + 160LL)) = 1LL;
  *(void *)((char *)v1 + *(void *)(*v1 + 168LL)) = 0LL;
  uint64_t v21 = *(void *)(*v1 + 176LL);
  *(void *)((char *)v2 + v21) = [objc_allocWithZone((Class)type metadata accessor for WiFiP2PtvOSUIAgent()) init];
  Logger.init(subsystem:category:)( 0xD000000000000012LL,  0x8000000100360620LL,  0x6C6C6F72746E6F63LL,  0xEA00000000007265LL);
  uint64_t v22 = v7;
  uint64_t v23 = *(void (**)(void **, uint64_t))(v7 + 56);
  v23(v10, v7);
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(v15, AssociatedConformanceWitness);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v68 + 8);
  v24(v17, v15);
  Preferences.init(storage:)(v66, v65, (uint64_t)v85);
  uint64_t v25 = v75;
  uint64_t v26 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  v15,  v75,  &protocol requirements base descriptor for Device,  &associated conformance descriptor for Device.Device.Keychain: KeyStorage);
  type metadata accessor for LongTermPairingKeyStore(0LL, v25, v26, v27);
  uint64_t v28 = v84;
  uint64_t v70 = v22;
  v23((void **)v84, v22);
  uint64_t v29 = (uint64_t)v76;
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 64))(v15, AssociatedConformanceWitness);
  v24(v17, v15);
  uint64_t v30 = LongTermPairingKeyStore.__allocating_init(keychain:)(v29);
  uint64_t v31 = v67;
  uint64_t v32 = v22;
  uint64_t v33 = (uint64_t)v73;
  sub_1002B4260((uint64_t)v85, v30, v28, v88, v32, (uint64_t)v73, (uint64_t)v87, v67);
  id v34 = (char *)v2 + *(void *)(*v2 + 128LL);
  uint64_t v35 = v72;
  uint64_t v85 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 32);
  uint64_t v36 = v74;
  v85(v34, v31, v74);
  uint64_t v37 = (uint64_t)v71;
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10035F764, v71);
  type metadata accessor for InfrastructureWiFiInterface(0LL, v37, WitnessTable, v39);
  unint64_t v40 = *(void (**)(uint64_t, char *, uint64_t))(v35 + 16);
  v40(v31, v34, v36);
  sub_1002D6FF4(v86, v31, v41, v42);
  uint64_t v44 = v43;
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v31, v36);
  v2[2] = v44;
  uint64_t v45 = (char *)v2 + *(void *)(*v2 + 128LL);
  uint64_t v46 = *(void *)&v45[*(int *)(v36 + 64)];
  swift_retain();
  uint64_t v47 = swift_retain();
  sub_10027033C(v47);
  swift_release(v46);
  swift_release(v44);
  uint64_t v48 = *(void *)&v45[*(int *)(v36 + 72)];
  swift_weakAssign(v48 + qword_100410A00, v2);
  uint64_t v49 = *(void **)((char *)v2 + *(void *)(*v2 + 176LL));
  swift_retain();
  id v50 = v49;
  sub_10024665C((uint64_t)v49);
  swift_release(v48);

  uint64_t v51 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
  v40(v31, v45, v36);
  uint64_t v52 = *(unsigned __int8 *)(v35 + 80);
  uint64_t v53 = (v52 + 56) & ~v52;
  unint64_t v54 = (char *)swift_allocObject(&unk_1003F9548, v53 + v77, v52 | 7);
  uint64_t v55 = v88;
  *((void *)v54 + 2) = v84;
  *((void *)v54 + 3) = v55;
  *((void *)v54 + 4) = v70;
  *((void *)v54 + 5) = v33;
  *((void *)v54 + 6) = v87;
  v85(&v54[v53], v31, v36);
  unint64_t v94 = sub_1002BCFD4;
  uint64_t v95 = v54;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v91 = 1107296256LL;
  unint64_t v92 = sub_1000021F0;
  uint64_t v93 = &unk_1003F9560;
  uint64_t v56 = _Block_copy(&aBlock);
  id v57 = v51;
  unint64_t v58 = v78;
  static DispatchQoS.unspecified.getter(v57);
  unint64_t v89 = _swiftEmptyArrayStorage;
  unint64_t v59 = sub_100002234();
  uint64_t v60 = sub_100002274((uint64_t *)&unk_1004052A0);
  unint64_t v61 = sub_1000022B4();
  unint64_t v63 = v79;
  uint64_t v62 = v80;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v89, v60, v61, v80, v59);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v58, v63, v56);
  _Block_release(v56);

  (*(void (**)(char *, uint64_t))(v83 + 8))(v63, v62);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v58, v82);
  swift_release(v95);
  return v2;
}

void *sub_1002BC664(uint64_t a1)
{
  return sub_1002BBF14(a1);
}

uint64_t sub_1002BC69C(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = (void **)(a1 + 32);
    do
    {
      uint64_t v4 = *v3++;
      sub_1000D32C8(&v6, v4);

      --v2;
    }

    while (v2);
    return v7;
  }

  return a2;
}

uint64_t sub_1002BC704(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = (unsigned __int8 *)(a1 + 49);
    do
    {
      uint64_t v4 = *(void *)(v3 - 17);
      uint64_t v5 = *(void *)(v3 - 9);
      int v6 = *(v3 - 1);
      int v7 = *v3;
      v3 += 24;
      unsigned int v8 = v6 | (v7 << 8);
      swift_bridgeObjectRetain(v5);
      sub_10032D3C0((uint64_t)v10, v4, v5, v8);
      swift_bridgeObjectRelease(v10[1]);
      --v2;
    }

    while (v2);
    return v11;
  }

  return a2;
}

uint64_t sub_1002BC790()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002BC7B4()
{
  return sub_1002BCBA4((void (*)(void))&_swift_release);
}

uint64_t sub_1002BC7C0()
{
  return sub_1002BC81C(sub_1002BB388);
}

uint64_t sub_1002BC7CC(uint64_t a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1002BC804()
{
  return sub_1002BCBA4((void (*)(void))&_swift_release);
}

uint64_t sub_1002BC810()
{
  return sub_1002BC81C(sub_1002BB5DC);
}

uint64_t sub_1002BC81C(uint64_t (*a1)(void, void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_1002BC830(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(*(void *)a1 + 408LL) + 88LL) + 120LL))( *(void *)(v1 + 16),  *(void *)(*(void *)(*(void *)a1 + 408LL) + 80LL));
}

uint64_t sub_1002BC86C(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v1 + 24);
  if (!a1)
  {
    uint64_t v4 = (uint64_t *)(*(void *)(v1 + 16) + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    *uint64_t v4 = 0LL;
    v4[1] = 0LL;
    sub_100021018(v5, v6);
  }

  return v3(a1);
}

void sub_1002BC8C4(uint64_t a1)
{
}

void sub_1002BC8DC(uint64_t a1)
{
}

double sub_1002BC8E8()
{
  return sub_100332BF4(*(void (**)(void *, __n128))(v0 + 24));
}

uint64_t sub_1002BC918(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(void *))(v1 + 24))(_swiftEmptyArrayStorage);
  }
  uint64_t v3 = (uint64_t *)(*(void *)(v1 + 16) + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  *uint64_t v3 = 0LL;
  v3[1] = 0LL;
  return sub_100021018(v4, v5);
}

uint64_t sub_1002BC970(uint64_t a1)
{
  return sub_1002BAC54( a1,  *(unsigned __int16 *)(v1 + 16) | ((unint64_t)*(unsigned int *)(v1 + 18) << 16),  *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t sub_1002BC994(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(void))(v1 + 24))(0LL);
  }
  uint64_t v3 = (uint64_t *)(*(void *)(v1 + 16) + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  *uint64_t v3 = 0LL;
  v3[1] = 0LL;
  return sub_100021018(v4, v5);
}

void sub_1002BC9E8()
{
  uint64_t v1 = *(void (**)(void))(v0 + 16);
  uint64_t v2 = (void *)sub_1003058D8(1);
  v1();
}

uint64_t sub_1002BCA3C(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(void))(v1 + 24))(0LL);
  }
  uint64_t v3 = (uint64_t *)(*(void *)(v1 + 16) + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  *uint64_t v3 = 0LL;
  v3[1] = 0LL;
  return sub_100021018(v4, v5);
}

uint64_t sub_1002BCA90()
{
  return sub_100305220(*(char **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1002BCAB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002BCB0C(a1, (void (*)(uint64_t, uint64_t))sub_10029E4A0, a3, a4);
}

uint64_t sub_1002BCAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002BCB0C(a1, (void (*)(uint64_t, uint64_t))sub_10029E414, a3, a4);
}

uint64_t sub_1002BCAF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002BCB0C(a1, (void (*)(uint64_t, uint64_t))sub_10029E3F8, a3, a4);
}

uint64_t sub_1002BCB0C(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v7 = *(void *)(v4 + 24);
  uint64_t v8 = sub_1002E8D68(a1, (uint64_t)a2, a3, a4);
  a2(v6, v7);
  return swift_release(v8);
}

uint64_t sub_1002BCB6C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 3712)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1002BCB88()
{
  return sub_1002BCBA4((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1002BCB98()
{
  return sub_1002BCBA4((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1002BCBA4(void (*a1)(void))
{
  return swift_deallocObject(v1, 64LL, 7LL);
}

double sub_1002BCBF4()
{
  return sub_1002BB8C0( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void (**)(uint64_t))(v0 + 48));
}

uint64_t sub_1002BCC14()
{
  uint64_t v1 = *(void *)(v0 + 48);
  __int128 v29 = *(_OWORD *)(v0 + 32);
  __int128 v31 = *(_OWORD *)(v0 + 16);
  uint64_t v28 = v31;
  __int128 v32 = v29;
  uint64_t v33 = v1;
  uint64_t v2 = (int *)type metadata accessor for P2PController.Components(0LL, (uint64_t)&v31);
  uint64_t v3 = *((void *)v2 - 1);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 56) & ~v4;
  uint64_t v30 = v5 + *(void *)(v3 + 64);
  uint64_t v6 = v4 | 7;
  uint64_t v7 = v0 + v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v29,  v28,  &protocol requirements base descriptor for DeviceDriver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v29,  v28,  AssociatedTypeWitness,  &protocol requirements base descriptor for DeviceDriver,  &associated conformance descriptor for DeviceDriver.DeviceDriver.Device: Device);
  uint64_t v10 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for Device);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL);
  v11(v7, v10);
  uint64_t v12 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v10,  &protocol requirements base descriptor for Device,  &associated conformance descriptor for Device.Device.PreferencesBacking: PreferencesStorage);
  uint64_t v14 = (int *)type metadata accessor for Preferences(0LL, v10, v12, v13);
  v11(v7 + v14[9], v10);
  v11(v7 + v14[10], v10);
  v11(v7 + v14[11], v10);
  v11(v7 + v14[12], v10);
  uint64_t v15 = v14[13];
  unint64_t v16 = sub_1000B2E80();
  *(void *)&__int128 v31 = v10;
  *((void *)&v31 + 1) = &type metadata for PreferenceDefaults.InternetSharingOptions;
  *(void *)&__int128 v32 = v12;
  *((void *)&v32 + 1) = v16;
  uint64_t v17 = v7 + *(int *)(type metadata accessor for Preferences.EnumPreference(0LL, (uint64_t)&v31) + 52) + v15;
  v11(v17, v10);
  uint64_t v18 = type metadata accessor for Preferences.Preference(0LL, v10, (uint64_t)&type metadata for String, v12);
  __n128 v19 = swift_bridgeObjectRelease(*(void *)(v17 + *(int *)(v18 + 48) + 8));
  ((void (*)(uint64_t, uint64_t, __n128))v11)(v7 + v14[14], v10, v19);
  v11(v7 + v14[15], v10);
  v11(v7 + v14[16], v10);
  v11(v7 + v14[17], v10);
  v11(v7 + v14[18], v10);
  v11(v7 + v14[19], v10);
  v11(v7 + v14[20], v10);
  v11(v7 + v14[21], v10);
  uint64_t v20 = v7 + v14[22];
  v11(v20, v10);
  uint64_t v21 = type metadata accessor for Preferences.Preference(0LL, v10, (uint64_t)&type metadata for Data, v12);
  sub_1000208D8(*(void *)(v20 + *(int *)(v21 + 48)), *(void *)(v20 + *(int *)(v21 + 48) + 8));
  v11(v7 + v14[23], v10);
  uint64_t v22 = v7 + v14[24];
  v11(v22, v10);
  sub_1000208D8(*(void *)(v22 + *(int *)(v21 + 48)), *(void *)(v22 + *(int *)(v21 + 48) + 8));
  uint64_t v23 = v7 + v14[25];
  v11(v23, v10);
  sub_1000208D8(*(void *)(v23 + *(int *)(v21 + 48)), *(void *)(v23 + *(int *)(v21 + 48) + 8));
  uint64_t v24 = v14[26];
  unint64_t v25 = sub_1000B2EDC();
  *(void *)&__int128 v31 = v10;
  *((void *)&v31 + 1) = &type metadata for PreferenceDefaults.EnableUserspaceP2POptions;
  *(void *)&__int128 v32 = v12;
  *((void *)&v32 + 1) = v25;
  uint64_t v26 = type metadata accessor for Preferences.EnumPreference(0LL, (uint64_t)&v31);
  v11(v7 + *(int *)(v26 + 52) + v24, v10);
  v11(v7 + v14[27], v10);
  v11(v7 + v14[28], v10);
  v11(v7 + v14[29], v10);
  swift_release(*(void *)(v7 + v2[15]));
  swift_release(*(void *)(v7 + v2[16]));
  swift_release(*(void *)(v7 + v2[17]));
  swift_release(*(void *)(v7 + v2[18]));
  swift_release(*(void *)(v7 + v2[19]));
  return swift_deallocObject(v0, v30, v6);
}

double sub_1002BCFD4()
{
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[6];
  v8[0] = v0[2];
  uint64_t v1 = v8[0];
  v8[1] = v2;
  _OWORD v8[2] = v3;
  v8[3] = v4;
  void v8[4] = v5;
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(type metadata accessor for P2PController.Components(0LL, (uint64_t)v8) - 8) + 80LL);
  return sub_1002B45C8((uint64_t)v0 + ((v6 + 56) & ~v6), v1, v2, v3, v4, v5);
}

void sub_1002BD094(uint64_t a1)
{
  v10[0] = "\b";
  uint64_t v2 = type metadata accessor for NANSubscribe.Configuration(319LL);
  if (v3 <= 0x3F)
  {
    v10[1] = *(void *)(v2 - 8) + 64LL;
    v10[2] = &unk_10035F7D8;
    uint64_t v4 = type metadata accessor for DispatchTime(319LL);
    if (v5 <= 0x3F)
    {
      void v10[3] = *(void *)(v4 - 8) + 64LL;
      v10[4] = &unk_10035F7F0;
      v10[5] = &unk_10035F7F0;
      uint64_t v6 = type metadata accessor for Logger(319LL);
      if (v7 <= 0x3F)
      {
        v10[6] = *(void *)(v6 - 8) + 64LL;
        v10[7] = &unk_10035F808;
        sub_1002607C8(319LL);
        if (v9 <= 0x3F)
        {
          v10[8] = *(void *)(v8 - 8) + 64LL;
          v10[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
          v10[10] = &unk_10035F7F0;
          v10[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
          swift_initClassMetadata2(a1, 0LL, 12LL, v10, a1 + 96);
        }
      }
    }
  }

uint64_t sub_1002BD188(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = a2;
  uint64_t v40 = sub_100002274(&qword_10040D488);
  __chkstk_darwin();
  uint64_t v39 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v5 = (char *)&v34 - v4;
  __chkstk_darwin();
  unint64_t v38 = (char *)&v34 - v6;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v35 = a1 + 64;
  uint64_t v8 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v41 = a1;
  uint64_t result = swift_bridgeObjectRetain(a1);
  for (int64_t i = 0LL; ; int64_t i = v43)
  {
    if (v10)
    {
      uint64_t v42 = (v10 - 1) & v10;
      int64_t v43 = i;
      unint64_t v13 = __clz(__rbit64(v10)) | (i << 6);
      goto LABEL_5;
    }

    int64_t v30 = i + 1;
    if (__OFADD__(i, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v30 >= v36) {
      return swift_release(v41);
    }
    unint64_t v31 = *(void *)(v35 + 8 * v30);
    int64_t v32 = i + 1;
    if (!v31)
    {
      int64_t v32 = i + 2;
      if (i + 2 >= v36) {
        return swift_release(v41);
      }
      unint64_t v31 = *(void *)(v35 + 8 * v32);
      if (!v31)
      {
        int64_t v32 = i + 3;
        if (i + 3 >= v36) {
          return swift_release(v41);
        }
        unint64_t v31 = *(void *)(v35 + 8 * v32);
        if (!v31)
        {
          int64_t v32 = i + 4;
          if (i + 4 >= v36) {
            return swift_release(v41);
          }
          unint64_t v31 = *(void *)(v35 + 8 * v32);
          if (!v31) {
            break;
          }
        }
      }
    }

uint64_t sub_1002BD4B0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t sub_1002BD4C4()
{
  uint64_t v1 = v0 + qword_100410BB0;
  swift_beginAccess(v0 + qword_100410BB0, v3, 1LL, 0LL);
  uint64_t result = type metadata accessor for NANSubscribe.Configuration(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 60)) = 0;
  return result;
}

uint64_t sub_1002BD514@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + qword_10040EFB8);
  if (v3)
  {
    *(void *)(a1 + 24) = swift_getObjectType(*(void *)(v1 + qword_10040EFB8));
    *(void *)a1 = v3;
  }

  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = 0u;
  }

  return swift_unknownObjectRetain(v3);
}

uint64_t sub_1002BD568()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (uint64_t *)((char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v4 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  unint64_t v5 = (void *)*v4;
  *uint64_t v3 = *v4;
  (*(void (**)(uint64_t *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v0);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v3);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v1 + 8))(v3, v0);
  __break(1u);
  return result;
}

uint64_t sub_1002BD620()
{
  return swift_unownedRetainStrong(*(void *)(v0 + qword_10040EFA0));
}

uint64_t sub_1002BD630@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_100410BB0;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_100057FE8(v3, a1, type metadata accessor for NANSubscribe.Configuration);
}

uint64_t sub_1002BD688(uint64_t a1)
{
  if (!*(void *)(a1 + 24))
  {
    sub_1000225EC(a1, &qword_100405280);
    goto LABEL_5;
  }

  uint64_t v3 = sub_100002274((uint64_t *)&unk_10040ECE0);
  if (!swift_dynamicCast(&v7, a1, &type metadata for Any[8], v3, 6LL))
  {
LABEL_5:
    uint64_t v4 = 0LL;
    goto LABEL_6;
  }

  uint64_t v4 = v7;
LABEL_6:
  uint64_t v5 = *(void *)(v1 + qword_10040EFB8);
  *(void *)(v1 + qword_10040EFB8) = v4;
  return swift_unknownObjectRelease(v5);
}

uint64_t sub_1002BD714@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_100410BC0;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_1002BD758()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType(v0);
  uint64_t v3 = swift_isaMask & *v0;
  uint64_t v4 = *(void *)(v3 + 0x50);
  uint64_t v5 = *(void *)(*(void *)(v3 + 88) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v5,  v4,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v5,  v4,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v8 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v9 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v8,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.PreferencesBacking: PreferencesStorage);
  uint64_t v11 = type metadata accessor for Preferences(0LL, v8, v9, v10);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = &v41[-v13 - 8];
  uint64_t v15 = *(void *)((char *)v1 + qword_10040EFA0);
  swift_unownedRetainStrong(v15);
  WiFiInterface.preferences.getter();
  swift_release(v15);
  LOBYTE(v15) = Preferences.subscribeFilterEnabled.getter(v11);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) != 0 && *((_BYTE *)v1 + qword_100410BB8) == 1)
  {
    char v17 = (char *)v1 + qword_10040EFC0;
    swift_beginAccess((char *)v1 + qword_10040EFC0, v42, 0LL, 0LL);
    uint64_t v18 = *(void *)v17;
    if (*(void *)(*(void *)v17 + 16LL))
    {
      uint64_t v19 = *((void *)v17 + 1);
      __int16 v20 = v17[16];
      __int16 v21 = v17[17];
      uint64_t v22 = swift_bridgeObjectRetain(v18);
      sub_100255BE8(v22, v19, v20 | (v21 << 8));
      LOBYTE(v28) = v23;
      uint64_t v25 = v24;
      unint64_t v27 = v26;
      swift_bridgeObjectRelease(v18);
      unsigned int v28 = v28;
    }

    else
    {
      uint64_t v25 = 0LL;
      unint64_t v27 = 0LL;
      unsigned int v28 = 512;
    }

    uint64_t v29 = (char *)v1 + qword_100410BB0;
    swift_beginAccess((char *)v1 + qword_100410BB0, v41, 0LL, 0LL);
    uint64_t result = type metadata accessor for NANSubscribe.Configuration(0LL);
    int64_t v30 = &v29[*(int *)(result + 56)];
    uint64_t v32 = *(void *)v30;
    unint64_t v31 = *((void *)v30 + 1);
    __int16 v33 = *((_WORD *)v30 + 8);
    int v34 = v33 & 0xFF00;
    if (v28 > 0x1FF)
    {
      if (v34 == 512) {
        return result;
      }
    }

    else if (v34 != 512)
    {
      sub_10011F034(v32, v31, v33);
      sub_10011F034(v25, v27, v28);
      _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v25, v27);
      if ((v35 & 1) != 0)
      {
        sub_1000AA7B4(v32, v31, v33);
        sub_1000AA7B4(v25, v27, v28);
        goto LABEL_16;
      }

      sub_1000AA7B4(v32, v31, v33);
      uint64_t v36 = v25;
      unint64_t v37 = v27;
      __int16 v38 = v28;
LABEL_15:
      sub_1000AA7B4(v36, v37, v38);
LABEL_16:
      __chkstk_darwin();
      *(&v40 - 4) = (uint64_t)v1;
      *(&v40 - 3) = v25;
      *(&v40 - 2) = v27;
      *((_WORD *)&v40 - 4) = v28;
      uint64_t WitnessTable = swift_getWitnessTable(&unk_10035F890, ObjectType);
      sub_1002A247C((os_log_s *)sub_1002C8710, &v40 - 6, ObjectType, WitnessTable);
      return sub_1000AA7B4(v25, v27, v28);
    }

    sub_10011F034(v32, v31, v33);
    sub_10011F034(v25, v27, v28);
    sub_1000AA7B4(v25, v27, v28);
    uint64_t v36 = v32;
    unint64_t v37 = v31;
    __int16 v38 = v33;
    goto LABEL_15;
  }

  return result;
}

void sub_1002BDB08()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = swift_isaMask;
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (uint64_t *)((char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v9 = (uint64_t *)((char *)&v25 - v8);
  __chkstk_darwin();
  uint64_t v11 = (uint64_t *)((char *)&v25 - v10);
  uint64_t v12 = (char *)v1 + qword_100410BD0;
  __n128 v13 = swift_beginAccess((char *)v1 + qword_100410BD0, v30, 0LL, 0LL);
  if (*(void *)(*(void *)v12 + 16LL)
    || (uint64_t v14 = (char *)v1 + qword_10040EFC0,
        __n128 v13 = swift_beginAccess((char *)v1 + qword_10040EFC0, v29, 0LL, 0LL),
        *(void *)(*(void *)v14 + 16LL))
    || (uint64_t v15 = (char *)v1 + qword_100410BC8,
        __n128 v13 = swift_beginAccess((char *)v1 + qword_100410BC8, v28, 0LL, 0LL),
        *(void *)(*(void *)v15 + 16LL)))
  {
    uint64_t v16 = qword_10040EFD0;
    uint64_t v26 = v3 & v2;
    *uint64_t v11 = 5LL;
    uint64_t v17 = enum case for DispatchTimeInterval.seconds(_:);
    uint64_t v18 = *(void (**)(void *, uint64_t, uint64_t))(v5 + 104);
    ((void (*)(void *, void, uint64_t, __n128))v18)( v11,  enum case for DispatchTimeInterval.seconds(_:),  v4,  v13);
    id v27 = (id)*OS_dispatch_queue.nan.unsafeMutableAddressor();
    *uint64_t v9 = 5LL;
    v18(v9, v17, v4);
    uint64_t v19 = swift_allocObject(&unk_1003F9710, 24LL, 7LL);
    swift_unknownObjectWeakInit(v19 + 16, v1);
    __int16 v20 = (void *)swift_allocObject(&unk_1003F9760, 40LL, 7LL);
    uint64_t v21 = v26;
    v20[2] = *(void *)(v26 + 80);
    void v20[3] = *(void *)(v21 + 88);
    void v20[4] = v19;
    *uint64_t v7 = 100LL;
    v18(v7, enum case for DispatchTimeInterval.milliseconds(_:), v4);
    uint64_t v22 = type metadata accessor for P2PTimer(0LL);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    uint64_t v23 = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)( (uint64_t)v11,  v27,  (uint64_t)v9,  (uint64_t)v7,  (uint64_t)sub_1002C86B0,  (uint64_t)v20);
    uint64_t v24 = *(void *)((char *)v1 + v16);
    *(void *)((char *)v1 + vswift_weakDestroy(v0 + 16) = v23;
  }

  else
  {
    uint64_t v24 = *(void *)((char *)v1 + qword_10040EFD0);
    *(void *)((char *)v1 + qword_10040EFD0) = 0LL;
  }

  swift_release(v24);
}

uint64_t sub_1002BDD88(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v4 = a3;
  unsigned int v7 = a3 >> 8;
  uint64_t v8 = (uint64_t *)(v3 + qword_10040EFC0);
  swift_beginAccess(v3 + qword_10040EFC0, v12, 1LL, 0LL);
  uint64_t v9 = *v8;
  *uint64_t v8 = a1;
  v8[1] = a2;
  *((_BYTE *)v8 + swift_weakDestroy(v0 + 16) = v4 & 1;
  *((_BYTE *)v8 + 17) = v7;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = sub_1002BD758();
  return sub_1002BDB08(v10);
}

id sub_1002BDE08(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_1002BDE50(a1, a2);
}

id sub_1002BDE50(uint64_t a1, uint64_t a2)
{
  uint64_t v94 = a2;
  uint64_t v95 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v2);
  uint64_t v3 = swift_isaMask & *v2;
  uint64_t v4 = type metadata accessor for LongTermPairingKeys(0LL);
  uint64_t v91 = *(void *)(v4 - 8);
  uint64_t v92 = v4;
  __chkstk_darwin();
  uint64_t v83 = (uint64_t)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(v3 + 80);
  uint64_t v82 = *(void *)(v3 + 88);
  uint64_t v85 = *(void *)(v82 + 8);
  uint64_t v89 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v85,  v6,  &protocol requirements base descriptor for P2PControls);
  uint64_t v87 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v88 = AssociatedTypeWitness;
  __chkstk_darwin();
  uint64_t v84 = (char *)&v70 - v8;
  sub_100002274(&qword_10040D480);
  __chkstk_darwin();
  uint64_t v90 = (uint64_t)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v86 = (char *)&v70 - v10;
  uint64_t v11 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DispatchTime(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin();
  uint64_t v18 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *((_BYTE *)v2 + qword_100410BB8) = 0;
  uint64_t v19 = (char *)v2 + qword_10040EFA8;
  type metadata accessor for P2PTimer(0LL);
  __int16 v20 = v2;
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v21 = v95;
  uint64_t v22 = NANConstants.maximumServiceRetryRate.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v22, v11);
  uint64_t v80 = v19;
  - infix(_:_:)(v18, v14);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v81 = v15;
  uint64_t v24 = v15;
  uint64_t v25 = v94;
  v23(v18, v24);
  uint64_t v76 = qword_10040EFB0;
  *(void *)((char *)v20 + qword_10040EFB0) = 0LL;
  uint64_t v77 = qword_10040EFB8;
  *(void *)((char *)v20 + qword_10040EFB8) = 0LL;
  uint64_t v26 = (char *)v20 + qword_100410BC0;
  Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xED00006E616E2E65LL,  0x6269726373627573LL,  0xE900000000000065LL);
  id v27 = (char *)v20 + qword_10040EFC0;
  *(void *)id v27 = &_swiftEmptySetSingleton;
  *((void *)v27 + 1) = 0LL;
  *((_WORD *)v27 + 8) = 1025;
  uint64_t v28 = qword_100410BC8;
  *(void *)((char *)v20 + qword_100410BC8) = _swiftEmptyDictionarySingleton;
  uint64_t v78 = v28;
  uint64_t v79 = qword_10040EFD0;
  *(void *)((char *)v20 + qword_10040EFD0) = 0LL;
  uint64_t v29 = qword_100410BD0;
  *(void *)((char *)v20 + qword_100410BD0) = &_swiftEmptySetSingleton;
  uint64_t v75 = qword_10040EFA0;
  *(void *)((char *)v20 + qword_10040EFA0) = v21;
  uint64_t v30 = (uint64_t)v20 + qword_100410BB0;
  sub_100057FE8(v25, (uint64_t)v20 + qword_100410BB0, type metadata accessor for NANSubscribe.Configuration);
  uint64_t v31 = *(int *)(type metadata accessor for NANSubscribe.Configuration(0LL) + 68);
  if ((*(_BYTE *)(v25 + v31) & 1) != 0)
  {
    uint64_t v32 = v89;
    uint64_t v34 = v91;
    uint64_t v33 = v92;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 56))( (uint64_t)v20 + qword_10040EFC8,  1LL,  1LL,  v92);
    swift_unownedRetain(v21);

    uint64_t v35 = v25;
    uint64_t v36 = v33;
  }

  else
  {
    uint64_t v71 = v30;
    uint64_t v72 = v23;
    uint64_t v73 = v29;
    uint64_t v74 = v26;
    swift_unownedRetainStrong(v21);
    uint64_t v38 = v87;
    uint64_t v37 = v88;
    uint64_t v39 = v84;
    (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v84, v21 + *(void *)(*(void *)v21 + 112LL), v88);
    uint64_t v40 = swift_unownedRetain(v21);
    swift_release(v40);
    uint64_t v32 = v89;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v85,  v89,  v37,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
    uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 128))( v37,  AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v37);
    uint64_t v43 = (uint64_t)v86;
    (*(void (**)(void, void, BOOL))(*(void *)v42 + 136LL))( *(void *)(v25 + 8),  *(void *)(v25 + 16),  (*(_BYTE *)(v25 + v31) & 1) == 0);
    swift_release(v42);
    uint64_t v44 = (uint64_t)v20 + qword_10040EFC8;
    sub_1000586C0(v43, (uint64_t)v20 + qword_10040EFC8, &qword_10040D480);
    uint64_t v45 = v90;
    sub_1002C85FC(v44, v90);
    uint64_t v47 = v91;
    uint64_t v46 = v92;
    int v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v91 + 48))(v45, 1LL, v92);
    uint64_t v49 = v25;
    if (v48 == 1)
    {
      sub_1000225EC(v90, &qword_10040D480);
      unint64_t v50 = sub_1000033FC();
      uint64_t v51 = swift_allocError(&type metadata for WiFiError, v50, 0LL, 0LL);
      *(_OWORD *)uint64_t v52 = xmmword_10035E1A0;
      *(_BYTE *)(v52 + swift_weakDestroy(v0 + 16) = 1;
      swift_willThrow(v51);
      swift_release(v95);
      sub_10005802C(v25, type metadata accessor for NANSubscribe.Configuration);
      swift_unownedRelease(*(void *)((char *)v20 + v75));
      sub_10005802C(v71, type metadata accessor for NANSubscribe.Configuration);
      v72(v80, v81);
      swift_release(*(void *)((char *)v20 + v76));
      swift_unknownObjectRelease(*(void *)((char *)v20 + v77));
      uint64_t v53 = type metadata accessor for Logger(0LL);
      (*(void (**)(char *, uint64_t))(*(void *)(v53 - 8) + 8LL))(v74, v53);
      swift_bridgeObjectRelease(*(void *)v27);
      sub_1000225EC(v44, &qword_10040D480);
      swift_bridgeObjectRelease(*(void *)((char *)v20 + v78));
      swift_release(*(void *)((char *)v20 + v79));
      id v54 = *(id *)((char *)v20 + v73);

      swift_bridgeObjectRelease(v54);
      swift_deallocPartialClassInstance( v20,  ObjectType,  *(unsigned int *)((swift_isaMask & *v20) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v20) + 0x34LL));
      return v54;
    }

    uint64_t v36 = v46;
    uint64_t v34 = v47;

    sub_1000225EC(v90, &qword_10040D480);
    uint64_t v35 = v49;
  }

  v96.receiver = v20;
  v96.super_class = ObjectType;
  id v55 = objc_msgSendSuper2(&v96, "init");
  uint64_t v56 = (uint64_t)v55 + qword_10040EFC8;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))((uint64_t)v55 + qword_10040EFC8, 1LL, v36))
  {
    id v57 = v55;
  }

  else
  {
    uint64_t v58 = v83;
    sub_100057FE8(v56, v83, type metadata accessor for LongTermPairingKeys);
    uint64_t v59 = swift_allocObject(&unk_1003F9710, 24LL, 7LL);
    swift_unknownObjectWeakInit(v59 + 16, v55);
    uint64_t v60 = (void *)swift_allocObject(&unk_1003F97B0, 40LL, 7LL);
    uint64_t v61 = v82;
    v60[2] = v32;
    v60[3] = v61;
    v60[4] = v59;
    id v62 = v55;
    swift_retain();
    LongTermPairingKeys.updatedPairedDevicesHandler.setter((uint64_t)sub_1002C8754, (uint64_t)v60);
    sub_10005802C(v58, type metadata accessor for LongTermPairingKeys);
    swift_release(v59);
  }

  id v54 = v55;
  unint64_t v63 = (os_log_s *)Logger.logObject.getter(v54);
  os_log_type_t v64 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v63, v64))
  {
    uint64_t v65 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v66 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v65 = 138412290;
    id v97 = v54;
    id v67 = v54;
    uint64_t v35 = v94;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98);
    *uint64_t v66 = v54;

    _os_log_impl((void *)&_mh_execute_header, v63, v64, "Created %@", v65, 0xCu);
    uint64_t v68 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v66, 1LL, v68);
    swift_slowDealloc(v66, -1LL, -1LL);
    swift_slowDealloc(v65, -1LL, -1LL);
  }

  else
  {

    unint64_t v63 = (os_log_s *)v54;
  }

  swift_release(v95);
  sub_10005802C(v35, type metadata accessor for NANSubscribe.Configuration);
  return v54;
}

double sub_1002BE6B4()
{
  uint64_t v1 = (uint64_t *)(v0 + qword_10040EFC0);
  swift_beginAccess(v0 + qword_10040EFC0, v17, 0LL, 0LL);
  uint64_t v2 = v1[1];
  unsigned __int8 v4 = *((_BYTE *)v1 + 16);
  unsigned __int8 v5 = *((_BYTE *)v1 + 17);
  uint64_t v18 = *v1;
  uint64_t v3 = v18;
  uint64_t v19 = v2;
  unsigned __int8 v20 = v4;
  unsigned __int8 v21 = v5;
  uint64_t v6 = (uint64_t *)(v0 + qword_100410BC8);
  swift_beginAccess(v0 + qword_100410BC8, v16, 1LL, 0LL);
  uint64_t v7 = *v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v7);
  uint64_t v9 = sub_1002C7720(v8, &v18);
  swift_bridgeObjectRelease(v7);
  uint64_t v10 = *v6;
  *uint64_t v6 = (uint64_t)v9;
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = v18;
  uint64_t v12 = v19;
  LODWORD(v7) = v20;
  int v13 = v21;
  swift_bridgeObjectRetain(v18);
  sub_1002BDD88(v14, v12, v7 | (v13 << 8));
  *(void *)&double result = swift_bridgeObjectRelease(v11).n128_u64[0];
  return result;
}

id sub_1002BE79C()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  uint64_t v3 = swift_isaMask & *v0;
  sub_100002274(&qword_10040D480);
  __chkstk_darwin();
  unsigned __int8 v5 = &v27[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = *(void *)(v3 + 80);
  uint64_t v6 = *(void *)(v3 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v6 + 8),  v7,  &protocol requirements base descriptor for P2PControls);
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v11 = &v27[-v10];
  if (v1[qword_100410BB8] == 1)
  {
    uint64_t v12 = *(void *)&v1[qword_10040EFA0];
    swift_unownedRetainStrong(v12);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))( v11,  v12 + *(void *)(*(void *)v12 + 96LL),  AssociatedTypeWitness);
    swift_release(v12);
    int v13 = &v1[qword_100410BB0];
    swift_beginAccess(&v1[qword_100410BB0], v28, 0LL, 0LL);
    uint64_t v14 = *v13;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v6,  v7,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 232))( v14,  AssociatedTypeWitness,  AssociatedConformanceWitness);
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  }

  uint64_t v16 = qword_10040EFB8;
  uint64_t v17 = *(void **)&v1[qword_10040EFB8];
  if (v17)
  {
    [v17 subscribeTerminatedWithReason:-1];
    uint64_t v17 = *(void **)&v1[v16];
  }

  *(void *)&v1[v16] = 0LL;
  swift_unknownObjectRelease(v17);
  sub_1002C85FC((uint64_t)&v1[qword_10040EFC8], (uint64_t)v5);
  uint64_t v18 = type metadata accessor for LongTermPairingKeys(0LL);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48LL))(v5, 1LL, v18) == 1)
  {
    sub_1000225EC((uint64_t)v5, &qword_10040D480);
  }

  else
  {
    LongTermPairingKeys.updatedPairedDevicesHandler.setter(0LL, 0LL);
    sub_10005802C((uint64_t)v5, type metadata accessor for LongTermPairingKeys);
  }

  uint64_t v19 = v1;
  unsigned __int8 v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v23 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v22 = 138412290;
    id v29 = v19;
    uint64_t v24 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
    *uint64_t v23 = v19;

    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Destroyed %@", v22, 0xCu);
    uint64_t v25 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v23, 1LL, v25);
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  else
  {

    unsigned __int8 v20 = (os_log_s *)v19;
  }

  v30.receiver = v19;
  v30.super_class = ObjectType;
  return objc_msgSendSuper2(&v30, "dealloc");
}

id sub_1002BEB14(void *a1)
{
  id v1 = a1;
  return sub_1002BE79C();
}

double sub_1002BEB38(uint64_t a1)
{
  uint64_t v2 = a1 + qword_10040EFA8;
  uint64_t v3 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  swift_release(*(void *)(a1 + qword_10040EFB0));
  swift_unknownObjectRelease(*(void *)(a1 + qword_10040EFB8));
  uint64_t v4 = a1 + qword_100410BC0;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  swift_bridgeObjectRelease(*(void *)(a1 + qword_10040EFC0));
  sub_1000225EC(a1 + qword_10040EFC8, &qword_10040D480);
  swift_bridgeObjectRelease(*(void *)(a1 + qword_100410BC8));
  swift_release(*(void *)(a1 + qword_10040EFD0));
  *(void *)&double result = swift_bridgeObjectRelease(*(void *)(a1 + qword_100410BD0)).n128_u64[0];
  return result;
}

void sub_1002BEC40()
{
  uint64_t v2 = v0;
  uint64_t v3 = swift_isaMask & *v0;
  type metadata accessor for NANSubscribe.Configuration(0LL);
  __chkstk_darwin();
  unint64_t v50 = (uint64_t *)((char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = v3 + 80;
  uint64_t v5 = *(void *)(v3 + 80);
  uint64_t v48 = *(void *)(v6 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v48 + 8),  v5,  &protocol requirements base descriptor for P2PControls);
  uint64_t v49 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v46 - v8;
  uint64_t v10 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  int v13 = (uint64_t *)((char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v15 = (void *)*v14;
  *int v13 = *v14;
  (*(void (**)(uint64_t *, void, uint64_t))(v11 + 104))( v13,  enum case for DispatchPredicate.onQueue(_:),  v10);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
  if ((v15 & 1) != 0)
  {
    if ((v2[qword_100410BB8] & 1) != 0) {
      return;
    }
    uint64_t v17 = v2;
    uint64_t v46 = qword_100410BB8;
    uint64_t v18 = *(void *)&v2[qword_10040EFA0];
    swift_unownedRetainStrong(v18);
    sub_1002E8C08();
    id v47 = v2;
    if (v1)
    {
      swift_release(v18);
      uint64_t v56 = v1;
      swift_errorRetain();
      uint64_t v23 = sub_100002274((uint64_t *)&unk_10040C5B0);
      if (v55 != 1)
      {
        sub_10007030C((uint64_t)v53, v54, v55);
        goto LABEL_13;
      }

      if (v53 != (id)7)
      {
LABEL_13:
        swift_errorRelease();
        return;
      }

      swift_errorRelease();
      swift_unownedRetainStrong(v18);
      char v24 = sub_1002E9E34();
      swift_release(v18);
      if ((v24 & 1) != 0)
      {
        swift_bridgeObjectRelease(0xE700000000000000LL);
      }

      else
      {
        char v25 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x64656C6261736964LL,  0xE800000000000000LL,  0x64656C62616E65LL,  0xE700000000000000LL,  0LL);
        swift_bridgeObjectRelease(0xE800000000000000LL);
        if ((v25 & 1) == 0)
        {
          unint64_t v26 = sub_1000033FC();
          uint64_t v27 = swift_allocError(&type metadata for WiFiError, v26, 0LL, 0LL);
          *(_OWORD *)uint64_t v28 = xmmword_100337000;
          *(_BYTE *)(v28 + swift_weakDestroy(v0 + 16) = 1;
          swift_willThrow(v27);
          goto LABEL_13;
        }
      }

      id v29 = v47;
      objc_super v30 = (os_log_s *)Logger.logObject.getter(v29);
      os_log_type_t v31 = static os_log_type_t.error.getter(v30);
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        unint64_t v50 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v32 = 138412290;
        id v52 = v29;
        id v33 = v29;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
        uint64_t v34 = v50;
        *unint64_t v50 = v29;

        _os_log_impl((void *)&_mh_execute_header, v30, v31, "%@ faking start until NAN becomes available", v32, 0xCu);
        uint64_t v35 = sub_100002274(&qword_100404DE0);
        swift_arrayDestroy(v34, 1LL, v35);
        swift_slowDealloc(v34, -1LL, -1LL);
        swift_slowDealloc(v32, -1LL, -1LL);
      }

      else
      {
      }

      swift_errorRelease();
    }

    else
    {
      swift_release(v18);
      swift_unownedRetainStrong(v18);
      uint64_t v19 = v49;
      (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))( v9,  v18 + *(void *)(*(void *)v18 + 96LL),  AssociatedTypeWitness);
      swift_release(v18);
      uint64_t v20 = (uint64_t)&v17[qword_100410BB0];
      swift_beginAccess(&v17[qword_100410BB0], v51, 0LL, 0LL);
      os_log_type_t v21 = v50;
      sub_100057FE8(v20, (uint64_t)v50, type metadata accessor for NANSubscribe.Configuration);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v48,  v5,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
      (*(void (**)(void *, uint64_t, uint64_t))(AssociatedConformanceWitness + 184))( v21,  AssociatedTypeWitness,  AssociatedConformanceWitness);
      sub_10005802C((uint64_t)v21, type metadata accessor for NANSubscribe.Configuration);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v9, AssociatedTypeWitness);
    }

    id v36 = v47;
    *((_BYTE *)v47 + v46) = 1;
    uint64_t v37 = (char *)v36;
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.default.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = swift_slowAlloc(12LL, -1LL);
      unint64_t v50 = 0LL;
      uint64_t v41 = (uint8_t *)v40;
      uint64_t v42 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v41 = 138412290;
      id v53 = v37;
      uint64_t v43 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      *uint64_t v42 = v37;

      _os_log_impl((void *)&_mh_execute_header, v38, v39, "%@ was started", v41, 0xCu);
      uint64_t v44 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v42, 1LL, v44);
      swift_slowDealloc(v42, -1LL, -1LL);
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v45 = *(void **)&v37[qword_10040EFB8];
    if (v45) {
      objc_msgSend( v45,  "subscribeStartedWithInstanceID:",  v37[qword_100410BB0],  swift_beginAccess(&v37[qword_100410BB0], &v53, 0, 0).n128_f64[0]);
    }
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1002BF2B4(uint64_t a1)
{
  uint64_t v3 = swift_isaMask & *v1;
  type metadata accessor for NANSubscribe.Configuration(0LL);
  __chkstk_darwin();
  uint64_t v138 = (uint64_t)&v134 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v135 = (uint64_t)&v134 - v5;
  uint64_t v6 = *(void *)(v3 + 80);
  uint64_t v140 = *(void *)(v3 + 88);
  uint64_t v7 = *(void *)(v140 + 8);
  uint64_t v139 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v7,  v6,  &protocol requirements base descriptor for P2PControls);
  uint64_t v147 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v137 = (char *)&v134 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v136 = (char *)&v134 - v9;
  uint64_t v10 = type metadata accessor for DispatchTime(0LL);
  uint64_t v149 = *(void *)(v10 - 8);
  uint64_t v150 = v10;
  __chkstk_darwin();
  unint64_t v142 = (char *)&v134 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v148 = (char *)&v134 - v12;
  uint64_t v13 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v145 = *(void *)(v13 - 8);
  uint64_t v146 = v13;
  __chkstk_darwin();
  uint64_t v144 = (char *)&v134 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v143 = (char *)&v134 - v15;
  uint64_t v16 = type metadata accessor for DriverEvent(0LL);
  __chkstk_darwin();
  uint64_t v151 = (uint64_t *)((char *)&v134 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v152 = (uint64_t)&v134 - v18;
  __chkstk_darwin();
  uint64_t v20 = (char *)&v134 - v19;
  __chkstk_darwin();
  uint64_t v22 = (char *)&v134 - v21;
  __chkstk_darwin();
  char v24 = (char *)&v134 - v23;
  uint64_t v25 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin();
  uint64_t v28 = (uint64_t *)((char *)&v134 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v29 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  objc_super v30 = (void *)*v29;
  *uint64_t v28 = *v29;
  (*(void (**)(uint64_t *, void, uint64_t))(v26 + 104))( v28,  enum case for DispatchPredicate.onQueue(_:),  v25);
  id v31 = v30;
  LOBYTE(v30) = _dispatchPreconditionTest(_:)(v28);
  (*(void (**)(uint64_t *, uint64_t))(v26 + 8))(v28, v25);
  if ((v30 & 1) == 0)
  {
    __break(1u);
    JUMPOUT(0x1002C05D8LL);
  }

  sub_100057FE8(a1, (uint64_t)v24, type metadata accessor for DriverEvent);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v24, v16);
  uint64_t v33 = (uint64_t)v24;
  if (EnumCaseMultiPayload == 4)
  {
    sub_100057FE8((uint64_t)v24, (uint64_t)v20, type metadata accessor for DriverEvent);
    if (*v20 == 1)
    {
      uint64_t v39 = v153;
      if (*(_BYTE *)(v153 + qword_100410BB8) == 1)
      {
        uint64_t v152 = v16;
        uint64_t v40 = *(void *)(v153 + qword_10040EFA0);
        swift_unownedRetainStrong(v40);
        sub_1002E8C08();
        swift_release(v40);
        swift_unownedRetainStrong(v40);
        uint64_t v91 = v147;
        uint64_t v92 = v137;
        uint64_t v93 = AssociatedTypeWitness;
        (*(void (**)(char *, uint64_t, uint64_t))(v147 + 16))( v137,  v40 + *(void *)(*(void *)v40 + 96LL),  AssociatedTypeWitness);
        swift_release(v40);
        uint64_t v94 = v39 + qword_100410BB0;
        swift_beginAccess(v39 + qword_100410BB0, v159, 0LL, 0LL);
        uint64_t v95 = v138;
        sub_100057FE8(v94, v138, type metadata accessor for NANSubscribe.Configuration);
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v140,  v139,  v93,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 184))( v95,  v93,  AssociatedConformanceWitness);
        sub_10005802C(v95, type metadata accessor for NANSubscribe.Configuration);
        (*(void (**)(char *, uint64_t))(v91 + 8))(v92, v93);
      }

      return sub_10005802C(v33, type metadata accessor for DriverEvent);
    }

void sub_1002C0608(unint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v5 = v4;
  v230 = a4;
  uint64_t v236 = a3;
  uint64_t v235 = a2;
  unint64_t v241 = a1 >> 8;
  unint64_t v243 = a1 >> 24;
  uint64_t v240 = HIDWORD(a1);
  unint64_t v239 = a1 >> 40;
  unint64_t v238 = HIWORD(a1);
  unint64_t v7 = HIBYTE(a1);
  uint64_t v217 = type metadata accessor for DispatchTime(0LL);
  uint64_t v216 = *(void *)(v217 - 8);
  __chkstk_darwin();
  v215 = (char *)&v210 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v231 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0LL);
  uint64_t v232 = *(void *)(v231 - 8);
  __chkstk_darwin();
  uint64_t v223 = (uint64_t)&v210 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v221 = (uint64_t)&v210 - v10;
  __chkstk_darwin();
  uint64_t v219 = (uint64_t)&v210 - v11;
  __chkstk_darwin();
  uint64_t v220 = (uint64_t)&v210 - v12;
  sub_100002274((uint64_t *)&unk_10040F0F0);
  __chkstk_darwin();
  uint64_t v214 = (uint64_t)&v210 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v228 = (uint64_t)&v210 - v14;
  __chkstk_darwin();
  uint64_t v227 = (uint64_t)&v210 - v15;
  uint64_t v229 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0LL);
  __chkstk_darwin();
  uint64_t v222 = (uint64_t)&v210 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v213 = (char *)&v210 - v17;
  __chkstk_darwin();
  uint64_t v218 = (uint64_t)&v210 - v18;
  __chkstk_darwin();
  uint64_t v224 = (uint64_t)&v210 - v19;
  __chkstk_darwin();
  uint64_t v226 = (uint64_t)&v210 - v20;
  type metadata accessor for NANPeer(0LL);
  __chkstk_darwin();
  uint64_t v22 = (char *)&v210 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_10040E460);
  __chkstk_darwin();
  char v24 = (char *)&v210 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for NANPeer.Service(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin();
  uint64_t v210 = (uint64_t)&v210 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v211 = (uint64_t *)((char *)&v210 - v28);
  __chkstk_darwin();
  objc_super v30 = (char *)&v210 - v29;
  __chkstk_darwin();
  uint64_t v32 = (char *)&v210 - v31;
  uint64_t v33 = *(void *)&v4[qword_10040EFA0];
  swift_unownedRetainStrong(v33);
  unint64_t v237 = v7;
  uint64_t v242 = BYTE6(a1);
  unint64_t v34 = a1;
  uint64_t v35 = BYTE5(a1);
  unint64_t v36 = (v7 << 40) | ((unint64_t)v238 << 32) | ((unint64_t)v239 << 24);
  unint64_t v238 = BYTE4(v34);
  unint64_t v37 = v36 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)v240 << 16);
  uint64_t v240 = BYTE3(v34);
  unint64_t v38 = v37 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v243 << 8);
  unint64_t v239 = BYTE2(v34);
  unint64_t v243 = v34;
  unint64_t v225 = v38 & 0xFFFFFFFFFFFFFF00LL | BYTE2(v34);
  sub_1002EA528(v225, (uint64_t)v22);
  uint64_t v212 = v33;
  swift_release(v33);
  uint64_t v39 = &v5[qword_100410BB0];
  swift_beginAccess(&v5[qword_100410BB0], v247, 0LL, 0LL);
  v234 = v39;
  uint64_t v41 = *((void *)v39 + 1);
  uint64_t v40 = *((void *)v39 + 2);
  swift_bridgeObjectRetain(v40);
  sub_1002529DC(v41, v40, v241, (uint64_t)v24);
  swift_bridgeObjectRelease(v40);
  sub_10005802C((uint64_t)v22, type metadata accessor for NANPeer);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1LL, v25) != 1)
  {
    v233 = v5;
    sub_100022628((uint64_t)v24, (uint64_t)v32, type metadata accessor for NANPeer.Service);
    char v50 = sub_10024D7BC();
    sub_100057FE8((uint64_t)v32, (uint64_t)v30, type metadata accessor for NANPeer.Service);
    if ((v50 & 1) != 0)
    {
      BOOL v51 = 1;
      uint64_t v52 = v242;
      unint64_t v53 = v237;
      uint64_t v54 = v35;
LABEL_9:
      unint64_t v55 = v238;
      goto LABEL_10;
    }

    uint64_t v52 = v242;
    unint64_t v53 = v237;
    uint64_t v54 = v35;
    if (v30[96] == 5LL)
    {
      BOOL v51 = 0;
      goto LABEL_9;
    }

    __int16 v72 = *((_WORD *)v30 + 41);
    unint64_t v55 = v238;
    if ((v72 & 1) == 0)
    {
      BOOL v51 = 0;
      goto LABEL_10;
    }

    if ((v72 & 2) != 0)
    {
      char v142 = _stringCompareWithSmolCheck(_:_:expecting:)( 7561575LL,  0xE300000000000000LL,  0x7055776F6C6C6F66LL,  0xE800000000000000LL,  0LL);
      swift_bridgeObjectRelease(0xE300000000000000LL);
      BOOL v51 = 0;
      if ((v142 & 1) == 0) {
        goto LABEL_10;
      }
    }

    else
    {
      swift_bridgeObjectRelease(0xE800000000000000LL);
    }

    BOOL v51 = v230 != 0LL;
LABEL_10:
    sub_10005802C((uint64_t)v30, type metadata accessor for NANPeer.Service);
    uint64_t v56 = type metadata accessor for NANSubscribe.Configuration(0LL);
    if ((v234[*(int *)(v56 + 68)] & 1) != 0)
    {
      uint64_t v57 = v233;
      if (v32[96] != 5LL && (*((void *)v32 + 10) & 0x30000LL) == 0x10000 && !v230)
      {
        uint64_t v58 = &v233[qword_100410BC8];
        swift_beginAccess(&v233[qword_100410BC8], &v248, 32LL, 0LL);
        uint64_t v59 = *(void *)v58;
        if (*(void *)(*(void *)v58 + 16LL)
          && (unint64_t v60 = sub_10001C08C((v53 << 48) | (v52 << 40) | (v54 << 32) | (v55 << 24) | (v240 << 16) | (v239 << 8) | BYTE1(v243)),
              (v61 & 1) != 0))
        {
          uint64_t v62 = *(void *)(v59 + 56) + *(void *)(v232 + 72) * v60;
          uint64_t v63 = v219;
          sub_100057FE8(v62, v219, type metadata accessor for NANPeer.Service.AuthenticationStatus);
          uint64_t v64 = v63;
          uint64_t v65 = v220;
          sub_100022628(v64, v220, type metadata accessor for NANPeer.Service.AuthenticationStatus);
          swift_endAccess(&v248);
          uint64_t v66 = v218;
          sub_100057FE8(v65, v218, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
          if (swift_getEnumCaseMultiPayload(v66, v229) == 4)
          {
            sub_10005802C(v66, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
            sub_10024D5C4();
            char v68 = v67;
            sub_10005802C(v65, type metadata accessor for NANPeer.Service.AuthenticationStatus);
            if ((v68 & 1) == 0) {
              goto LABEL_61;
            }
          }

          else
          {
            sub_10005802C(v65, type metadata accessor for NANPeer.Service.AuthenticationStatus);
            sub_10005802C(v66, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
          }
        }

        else
        {
          swift_endAccess(&v248);
        }

        if (*(void *)RSSI.minimumDiscoveryThreshold.unsafeMutableAddressor() > v235)
        {
          uint64_t v140 = (uint64_t)v57;
          unint64_t v141 = v243;
LABEL_81:
          sub_1002C5F9C(v140, v141);
          sub_10005802C((uint64_t)v32, type metadata accessor for NANPeer.Service);
          return;
        }

        uint64_t v155 = (uint64_t *)&v57[qword_100410BD0];
        swift_beginAccess(&v57[qword_100410BD0], &v248, 0LL, 0LL);
        uint64_t v156 = *v155;
        unint64_t v157 = (v53 << 48) | (v52 << 40) | (v54 << 32) | (v55 << 24) | (v240 << 16) | (v239 << 8) | BYTE1(v243);
        swift_bridgeObjectRetain(v156);
        BOOL v158 = sub_100303D14(v157, v156);
        swift_bridgeObjectRelease(v156);
        if (v51 || !v158)
        {
          uint64_t v159 = (uint64_t)v213;
          swift_storeEnumTagMultiPayload(v213, v229, 4LL);
          uint64_t v160 = v221;
          sub_100057FE8(v159, v221, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
          type metadata accessor for P2PTimer(0LL);
          uint64_t v161 = v215;
          variable initialization expression of AWDLPeer.lastUpdated();
          sub_10005802C(v159, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
          uint64_t v162 = v231;
          (*(void (**)(uint64_t, char *, uint64_t))(v216 + 32))(v160 + *(int *)(v231 + 20), v161, v217);
          uint64_t v163 = v214;
          sub_100022628(v160, v214, type metadata accessor for NANPeer.Service.AuthenticationStatus);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v232 + 56))(v163, 0LL, 1LL, v162);
          swift_beginAccess(v58, &v253, 33LL, 0LL);
          sub_1002E9124(v163, v157);
          swift_endAccess(&v253);
          *(CoreP2P::NANGenericServiceProtocol *)&__int128 v253 = NANGenericServiceProtocol.init()();
          NANGenericServiceProtocol.furtherServiceDiscoveryFollowUp.setter(1);
          uint64_t v164 = v212;
          uint64_t v165 = swift_unownedRetainStrong(v212);
          uint64_t v169 = sub_1002E8D68(v165, v166, v167, v168);
          swift_release(v164);
          uint64_t v170 = *(void *)(v169 + *(void *)(*(void *)v169 + 272LL));
          swift_retain();
          swift_release(v169);
          uint64_t v171 = v253;
          uint64_t v172 = (uint64_t *)NANGenericServiceProtocol.AttributeFilter.all.unsafeMutableAddressor();
          int v173 = NANServiceInfo.init(information:filter:)(v171, *v172);
          uint64_t v175 = v174;
          unint64_t v177 = v176;
          sub_1002A213C(v173, v174, v176, v225, v241, *v234);
          sub_1000208D8(v175, v177);
          swift_release(v170);
        }

LABEL_70:
          id v185 = NANGenericServiceProtocol.apiPublishServiceSpecificInfo.getter(v183);
          swift_bridgeObjectRelease(v183);
LABEL_71:
          uint64_t v186 = *((void *)&v249 + 1);
          uint64_t v187 = v250;
          sub_100021104(&v248, *((uint64_t *)&v249 + 1));
          (*(void (**)(id, unint64_t, uint64_t, uint64_t))(v187 + 16))( v185,  v237 | (v228 << 8) | (v231 << 16) | (v232 << 24) | (v238 << 32) | (v239 << 40) | (v227 << 48),  v186,  v187);

          sub_100002AC4(&v248);
          unint64_t v141 = v243 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v184 << 48);
          uint64_t v140 = (uint64_t)v109;
          goto LABEL_81;
        }
      }

      else
      {
        uint64_t v255 = 0LL;
        __int128 v253 = 0u;
        __int128 v254 = 0u;
      }

      sub_1000225EC((uint64_t)&v253, &qword_10040F100);
      uint64_t v188 = *(void **)&v109[v178];
      if (v188)
      {
        swift_unknownObjectRetain(*(void *)&v109[v178]);
        id v189 = WiFiAddress.apiAddress.getter(v225);
        [v188 subscribeLostDiscoveryResultForPublishID:v241 address:v189];

        swift_unknownObjectRelease(v188);
        int16x8_t v190 = *(void **)&v109[v178];
        if (v190)
        {
          sub_1002C8644();
          uint64_t v191 = *((void *)v234 + 1);
          uint64_t v192 = *((void *)v234 + 2);
          __int128 v193 = *((_OWORD *)v32 + 3);
          __int128 v250 = *((_OWORD *)v32 + 2);
          __int128 v251 = v193;
          __int128 v252 = *((_OWORD *)v32 + 4);
          __int128 v194 = *((_OWORD *)v32 + 1);
          __int128 v248 = *(_OWORD *)v32;
          __int128 v249 = v194;
          sub_1000586C0((uint64_t)(v32 + 80), (uint64_t)&v253, (uint64_t *)&unk_10040F110);
          uint64_t v195 = (uint64_t)v230;
          swift_bridgeObjectRetain(v230);
          swift_unknownObjectRetain(v190);
          swift_bridgeObjectRetain(v192);
          uint64_t v196 = v236;
          swift_bridgeObjectRetain(v236);
          sub_1001D332C((uint64_t)&v248);
          sub_1002C8680((uint64_t)&v253);
          id v197 = WiFiAwareDiscoveryResult.init(nanDiscoveryResultEvent:serviceName:serviceDescriptor:serviceDescriptorExtension:extraServiceSpecificInfo:pairSetupRequired:pairingConfiguration:)( v243 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v242 << 48),  v235,  v196,  v191,  v192,  (uint64_t)&v248,  (uint64_t)&v253,  v195,  0,  0LL);
          [v190 subscribeReceivedDiscoveryResult:v197];

          swift_unknownObjectRelease(v190);
        }
      }

      goto LABEL_80;
    }

    uint64_t v57 = v233;
    unint64_t v69 = &v233[qword_100410BC8];
    uint64_t v70 = &v233[qword_100410BC8];
    if (v51)
    {
      swift_beginAccess(v70, &v248, 33LL, 0LL);
      uint64_t v71 = v227;
      sub_1002F7FF4( (v53 << 48) | (v52 << 40) | (v54 << 32) | (v55 << 24) | (v240 << 16) | (v239 << 8) | BYTE1(v243),  v227);
      swift_endAccess(&v248);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v232 + 48))(v71, 1LL, v231) == 1)
      {
        sub_1000225EC(v71, (uint64_t *)&unk_10040F0F0);
        goto LABEL_61;
      }

      uint64_t v82 = v226;
      sub_100057FE8(v71, v226, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
      sub_10005802C(v71, type metadata accessor for NANPeer.Service.AuthenticationStatus);
      if (swift_getEnumCaseMultiPayload(v82, v229) != 2)
      {
        sub_10005802C(v82, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
        goto LABEL_61;
      }

      goto LABEL_36;
    }

    swift_beginAccess(v70, &v248, 32LL, 0LL);
    uint64_t v73 = *(void *)v69;
    if (*(void *)(v73 + 16)
      && (unint64_t v74 = sub_10001C08C((v53 << 48) | (v52 << 40) | (v54 << 32) | (v55 << 24) | (v240 << 16) | (v239 << 8) | BYTE1(v243)),
          (v75 & 1) != 0))
    {
      uint64_t v76 = v56;
      uint64_t v77 = *(void *)(v73 + 56);
      uint64_t v78 = v232;
      sub_100057FE8( v77 + *(void *)(v232 + 72) * v74,  v228,  type metadata accessor for NANPeer.Service.AuthenticationStatus);
      uint64_t v79 = 0LL;
    }

    else
    {
      uint64_t v76 = v56;
      uint64_t v79 = 1LL;
      uint64_t v78 = v232;
    }

    uint64_t v80 = v228;
    uint64_t v81 = v231;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56))(v228, v79, 1LL, v231);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v80, 1LL, v81))
    {
      sub_1000225EC(v80, (uint64_t *)&unk_10040F0F0);
      swift_endAccess(&v248);
    }

    else
    {
      uint64_t v82 = v224;
      sub_100057FE8(v80, v224, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
      sub_1000225EC(v80, (uint64_t *)&unk_10040F0F0);
      swift_endAccess(&v248);
      if (swift_getEnumCaseMultiPayload(v82, v229) == 2)
      {
        uint64_t v56 = v76;
        uint64_t v52 = v242;
LABEL_36:
        sub_1000208D8(*(void *)v82, *(void *)(v82 + 8));
        goto LABEL_37;
      }

      sub_10005802C(v82, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
    }

    uint64_t v140 = (uint64_t)v57;
    unint64_t v141 = v243;
    goto LABEL_81;
  }

  uint64_t v42 = sub_1000225EC((uint64_t)v24, &qword_10040E460);
  uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
  os_log_type_t v44 = static os_log_type_t.error.getter(v43);
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v46 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 v248 = v46;
    *(_DWORD *)uint64_t v45 = 136315138;
    uint64_t v47 = NANPeerServiceIdentifier.description.getter((v237 << 48) | (v242 << 40) | (v35 << 32) | (v238 << 24) | (v240 << 16) | (v239 << 8) | BYTE1(v243));
    unint64_t v49 = v48;
    *(void *)&__int128 v253 = sub_10000235C(v47, v48, (uint64_t *)&v248);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v253, (char *)&v253 + 8);
    swift_bridgeObjectRelease(v49);
    _os_log_impl( (void *)&_mh_execute_header,  v43,  v44,  "Failed to find the service descriptor or service descriptor extension attributes for %s",  v45,  0xCu);
    swift_arrayDestroy(v46, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v46, -1LL, -1LL);
    swift_slowDealloc(v45, -1LL, -1LL);
  }
}

uint64_t sub_1002C233C(unint64_t a1, uint64_t a2)
{
  unint64_t v157 = a1;
  int64_t v158 = a2;
  uint64_t v148 = type metadata accessor for DispatchTime(0LL);
  uint64_t v3 = *(void *)(v148 - 8);
  __chkstk_darwin();
  uint64_t v147 = (char *)&v132 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for OWEKeys(0LL);
  __chkstk_darwin();
  uint64_t v149 = (void (*)(uint64_t, void, uint64_t, uint64_t))((char *)&v132 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_100002274(&qword_10040F0E0);
  __chkstk_darwin();
  uint64_t v150 = (uint64_t)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v142 = sub_100002274(&qword_10040F0E8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v132 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0LL);
  __chkstk_darwin();
  uint64_t v146 = (uint64_t)&v132 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for NANPeer(0LL);
  __chkstk_darwin();
  unint64_t v153 = (unint64_t)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_10040E460);
  __chkstk_darwin();
  uint64_t v154 = (uint64_t *)((char *)&v132 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_100002274(&qword_10040D480);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v132 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for LongTermPairingKeys(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v132 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_10040F0F0);
  __chkstk_darwin();
  uint64_t v152 = (uint64_t)&v132 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v155 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0LL);
  __chkstk_darwin();
  uint64_t v143 = (uint64_t)&v132 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v21 = (char *)&v132 - v20;
  uint64_t v145 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0LL);
  uint64_t v156 = *(void *)(v145 - 8);
  __chkstk_darwin();
  uint64_t v144 = (uint64_t)&v132 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  char v24 = (char *)&v132 - v23;
  __chkstk_darwin();
  uint64_t v26 = (char *)&v132 - v25;
  uint64_t v159 = v2;
  uint64_t v27 = (unsigned __int8 *)(v2 + qword_100410BB0);
  swift_beginAccess(v27, v162, 0LL, 0LL);
  uint64_t result = type metadata accessor for NANSubscribe.Configuration(0LL);
  uint64_t v151 = result;
  if ((v27[*(int *)(result + 68)] & 1) == 0)
  {
    uint64_t result = (uint64_t)RSSI.minimumDiscoveryThreshold.unsafeMutableAddressor();
    if (*(void *)result <= v158)
    {
      unint64_t v133 = v8;
      uint64_t v137 = v27;
      uint64_t v134 = v3;
      uint64_t v138 = v17;
      int v29 = v157;
      unint64_t v139 = v157 >> 24;
      int64_t v158 = HIDWORD(v157);
      unint64_t v141 = v157 >> 40;
      unint64_t v140 = HIWORD(v157);
      unint64_t v30 = HIBYTE(v157);
      uint64_t v31 = (void *)(v159 + qword_100410BC8);
      swift_beginAccess(v159 + qword_100410BC8, v161, 32LL, 0LL);
      unint64_t v135 = v31;
      uint64_t v32 = *v31;
      if (*(void *)(v32 + 16))
      {
        unint64_t v33 = (v30 << 48) | ((unint64_t)v140 << 40) | ((unint64_t)v141 << 32) | ((_DWORD)v158 << 24) | ((unint64_t)v139 << 16) | ((unint64_t)BYTE2(v29) << 8) | BYTE1(v29);
        unint64_t v34 = sub_10001C08C(v33);
        if ((v35 & 1) != 0)
        {
          sub_100057FE8( *(void *)(v32 + 56) + *(void *)(v156 + 72) * v34,  (uint64_t)v24,  type metadata accessor for NANPeer.Service.AuthenticationStatus);
          sub_100022628((uint64_t)v24, (uint64_t)v26, type metadata accessor for NANPeer.Service.AuthenticationStatus);
          swift_endAccess(v161);
          sub_100057FE8( (uint64_t)v26,  (uint64_t)v21,  type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
          if (swift_getEnumCaseMultiPayload(v21, v155))
          {
            sub_10005802C((uint64_t)v26, type metadata accessor for NANPeer.Service.AuthenticationStatus);
            unint64_t v36 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State;
            uint64_t v37 = (uint64_t)v21;
          }

          else
          {
            sub_10005802C((uint64_t)v21, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
            sub_10024D5C4();
            if ((v88 & 1) != 0)
            {
              swift_beginAccess(v135, v161, 33LL, 0LL);
              uint64_t v89 = v152;
              sub_1002F7FF4(v33, v152);
              swift_endAccess(v161);
              sub_1000225EC(v89, (uint64_t *)&unk_10040F0F0);
            }

            unint64_t v36 = type metadata accessor for NANPeer.Service.AuthenticationStatus;
            uint64_t v37 = (uint64_t)v26;
          }

          return sub_10005802C(v37, v36);
        }
      }

      unsigned __int8 v38 = v140;
      unsigned __int8 v39 = v141;
      unsigned __int8 v40 = v158;
      unint64_t v136 = v30;
      swift_endAccess(v161);
      uint64_t v41 = v159;
      sub_1002C85FC(v159 + qword_10040EFC8, (uint64_t)v13);
      unint64_t v42 = v157;
      uint64_t v43 = v157 >> 8;
      sub_100022628((uint64_t)v13, (uint64_t)v138, type metadata accessor for LongTermPairingKeys);
      unint64_t v44 = *(void *)(v41 + qword_10040EFA0);
      swift_unownedRetainStrong(v44);
      uint64_t v132 = BYTE6(v42);
      unint64_t v140 = BYTE5(v42);
      unint64_t v141 = BYTE4(v42);
      int64_t v158 = BYTE3(v42);
      uint64_t v45 = BYTE2(v42);
      unint64_t v46 = (v136 << 40) | ((unint64_t)v38 << 32) | ((unint64_t)v39 << 24) | ((unint64_t)v40 << 16) | ((unint64_t)v139 << 8) | BYTE2(v42);
      uint64_t v47 = v153;
      sub_1002EA528(v46, v153);
      swift_release(v44);
      uint64_t v48 = *((void *)v137 + 1);
      uint64_t v49 = *((void *)v137 + 2);
      swift_bridgeObjectRetain(v49);
      char v50 = v154;
      sub_1002529DC(v48, v49, BYTE1(v42), (uint64_t)v154);
      swift_bridgeObjectRelease(v49);
      sub_10005802C(v47, type metadata accessor for NANPeer);
      uint64_t v51 = type metadata accessor for NANPeer.Service(0LL);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v51 - 8) + 48LL))(v50, 1LL, v51) == 1)
      {
        uint64_t v52 = sub_1000225EC((uint64_t)v50, &qword_10040E460);
      }

      else
      {
        unint64_t v139 = v44;
        unint64_t v153 = v46;
        uint64_t v53 = v50[10];
        uint64_t v54 = v50[11];
        uint64_t v55 = (uint64_t)v50;
        uint64_t v56 = v50[12];
        uint64_t v57 = v50[13];
        unint64_t v58 = *(void *)(v55 + 112);
        sub_100254E90(v53, v54, v56, v57, v58);
        uint64_t v52 = sub_10005802C(v55, type metadata accessor for NANPeer.Service);
        if ((v56 & 0xFE) != 4)
        {
          NANServiceInfo.genericServiceProtocol.getter(v56, v57, v58);
          uint64_t v60 = v59;
          uint64_t v52 = sub_100111F98(v53, v54, v56, v57, v58);
          if (v60)
          {
            uint64_t v154 = (void *)v43;
            uint64_t v61 = v151;
            uint64_t v62 = v137;
            uint64_t v63 = v149;
            sub_100057FE8((uint64_t)&v137[*(int *)(v151 + 64)], (uint64_t)v149, type metadata accessor for OWEKeys);
            unint64_t v64 = v139;
            swift_unownedRetainStrong(v139);
            uint64_t v65 = WiFiInterface.macAddress.getter();
            swift_release(v64);
            uint64_t v66 = *((void *)v62 + 3);
            swift_bridgeObjectRetain(v66);
            uint64_t v67 = v150;
            LongTermPairingKeys.authenticationRequest(forPeer:with:using:on:myServiceSpecificInfo:)( v153,  v60,  v63,  v65 & 0xFFFFFFFFFFFFLL,  v66,  v150);
            swift_bridgeObjectRelease(v60);
            swift_bridgeObjectRelease(v66);
            sub_10005802C((uint64_t)v63, type metadata accessor for OWEKeys);
            uint64_t v68 = sub_100002274(&qword_100408AB0);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 48LL))( v67,  1LL,  v68) == 1)
            {
              uint64_t v69 = sub_1000225EC(v67, &qword_10040F0E0);
              uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
              os_log_type_t v71 = static os_log_type_t.error.getter(v70);
              BOOL v72 = os_log_type_enabled(v70, v71);
              unint64_t v73 = v136;
              uint64_t v74 = v158;
              if (v72)
              {
                char v75 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                uint64_t v76 = swift_slowAlloc(32LL, -1LL);
                v161[0] = v76;
                *(_DWORD *)char v75 = 136315138;
                unint64_t v77 = (v73 << 48) | (v132 << 40) | (v140 << 32) | (v141 << 24) | (v74 << 16) | ((unint64_t)BYTE2(v42) << 8) | BYTE1(v157);
                uint64_t v78 = NANPeerServiceIdentifier.description.getter((v73 << 48) | (v132 << 40) | (v140 << 32) | (v141 << 24) | (v74 << 16) | (v45 << 8) | BYTE1(v157));
                unint64_t v80 = v79;
                uint64_t v160 = sub_10000235C(v78, v79, v161);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161);
                swift_bridgeObjectRelease(v80);
                _os_log_impl( (void *)&_mh_execute_header,  v70,  v71,  "Failed while generating the authentication follow up message for %s",  v75,  0xCu);
                swift_arrayDestroy(v76, 1LL, &type metadata for Any[8]);
                swift_slowDealloc(v76, -1LL, -1LL);
                swift_slowDealloc(v75, -1LL, -1LL);
              }

              else
              {

                unint64_t v77 = (v73 << 48) | (v132 << 40) | (v140 << 32) | (v141 << 24) | (v74 << 16) | ((unint64_t)BYTE2(v42) << 8) | BYTE1(v157);
              }

              uint64_t v126 = v134;
              uint64_t v127 = v143;
              swift_storeEnumTagMultiPayload(v143, v155, 3LL);
              uint64_t v128 = v144;
              sub_100057FE8(v127, v144, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
              type metadata accessor for P2PTimer(0LL);
              uint64_t v129 = v147;
              variable initialization expression of AWDLPeer.lastUpdated();
              sub_10005802C(v127, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
              uint64_t v130 = v145;
              (*(void (**)(uint64_t, char *, uint64_t))(v126 + 32))(v128 + *(int *)(v145 + 20), v129, v148);
              uint64_t v131 = v152;
              sub_100022628(v128, v152, type metadata accessor for NANPeer.Service.AuthenticationStatus);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v156 + 56))(v131, 0LL, 1LL, v130);
              swift_beginAccess(v135, v161, 33LL, 0LL);
              sub_1002E9124(v131, v77);
              swift_endAccess(v161);
            }

            else
            {
              unsigned __int8 v90 = BYTE1(v42);
              uint64_t v91 = *(void *)(v67 + *(int *)(v68 + 48));
              uint64_t v92 = v142;
              uint64_t v93 = *(int *)(v142 + 48);
              uint64_t v94 = v67;
              uint64_t v95 = (uint64_t)v133;
              sub_100022628(v94, (uint64_t)v133, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
              *(void *)(v95 + v93) = v91;
              uint64_t v96 = *(void *)(v95 + *(int *)(v92 + 48));
              uint64_t v97 = v146;
              sub_100022628(v95, v146, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
              uint64_t v98 = v143;
              sub_100057FE8(v97, v143, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
              swift_storeEnumTagMultiPayload(v98, v155, 0LL);
              uint64_t v99 = v144;
              sub_100057FE8(v98, v144, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
              type metadata accessor for P2PTimer(0LL);
              uint64_t v100 = v147;
              variable initialization expression of AWDLPeer.lastUpdated();
              sub_10005802C(v98, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
              uint64_t v101 = v145;
              (*(void (**)(uint64_t, char *, uint64_t))(v134 + 32))(v99 + *(int *)(v145 + 20), v100, v148);
              uint64_t v102 = v152;
              sub_100022628(v99, v152, type metadata accessor for NANPeer.Service.AuthenticationStatus);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v156 + 56))(v102, 0LL, 1LL, v101);
              swift_beginAccess(v135, v161, 33LL, 0LL);
              unint64_t v103 = (v136 << 48) | (v132 << 40) | (v140 << 32) | (v141 << 24) | (v158 << 16) | (v45 << 8) | v90;
              sub_1002E9124(v102, v103);
              uint64_t v104 = swift_endAccess(v161);
              unsigned __int8 v105 = (os_log_s *)Logger.logObject.getter(v104);
              os_log_type_t v106 = static os_log_type_t.default.getter(v105);
              if (os_log_type_enabled(v105, v106))
              {
                unint64_t v107 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                uint64_t v108 = swift_slowAlloc(32LL, -1LL);
                v161[0] = v108;
                *(_DWORD *)unint64_t v107 = 136315138;
                uint64_t v109 = NANPeerServiceIdentifier.description.getter(v103);
                unint64_t v111 = v110;
                uint64_t v160 = sub_10000235C(v109, v110, v161);
                uint64_t v61 = v151;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161);
                swift_bridgeObjectRelease(v111);
                _os_log_impl((void *)&_mh_execute_header, v105, v106, "Providing encrypted follow up to %s", v107, 0xCu);
                swift_arrayDestroy(v108, 1LL, &type metadata for Any[8]);
                swift_slowDealloc(v108, -1LL, -1LL);
                swift_slowDealloc(v107, -1LL, -1LL);
              }

              unint64_t v112 = v139;
              uint64_t v113 = swift_unownedRetainStrong(v139);
              uint64_t v117 = sub_1002E8D68(v113, v114, v115, v116);
              swift_release(v112);
              uint64_t v118 = *(void *)(v117 + *(void *)(*(void *)v117 + 272LL));
              swift_retain();
              swift_release(v117);
              unint64_t v119 = v137;
              uint64_t v120 = Optional<A>.attributeFilter.getter(v137[*(int *)(v61 + 68)]);
              int v121 = NANServiceInfo.init(information:filter:)(v96, v120);
              uint64_t v123 = v122;
              unint64_t v125 = v124;
              sub_1002A213C(v121, v122, v124, v153, (uint64_t)v154, *v119);
              sub_1000208D8(v123, v125);
              swift_release(v118);
              sub_10005802C(v146, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
            }

            goto LABEL_19;
          }
        }
      }

      uint64_t v81 = (os_log_s *)Logger.logObject.getter(v52);
      os_log_type_t v82 = static os_log_type_t.error.getter(v81);
      if (os_log_type_enabled(v81, v82))
      {
        uint64_t v83 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v84 = swift_slowAlloc(32LL, -1LL);
        v161[0] = v84;
        *(_DWORD *)uint64_t v83 = 136315138;
        uint64_t v85 = NANPeerServiceIdentifier.description.getter((v136 << 48) | (v132 << 40) | (v140 << 32) | (v141 << 24) | (v158 << 16) | (v45 << 8) | BYTE1(v157));
        unint64_t v87 = v86;
        uint64_t v160 = sub_10000235C(v85, v86, v161);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161);
        swift_bridgeObjectRelease(v87);
        _os_log_impl( (void *)&_mh_execute_header,  v81,  v82,  "Unable to generate an authentication follow up message for %s because no service specific info was found in the publish",  v83,  0xCu);
        swift_arrayDestroy(v84, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v84, -1LL, -1LL);
        swift_slowDealloc(v83, -1LL, -1LL);
      }

LABEL_19:
      unint64_t v36 = type metadata accessor for LongTermPairingKeys;
      uint64_t v37 = (uint64_t)v138;
      return sub_10005802C(v37, v36);
    }
  }

  return result;
}

double sub_1002C32C4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v235 = a1 >> 8;
  unint64_t v8 = HIWORD(a1);
  unint64_t v239 = HIBYTE(a1);
  uint64_t v207 = type metadata accessor for DispatchTime(0LL);
  uint64_t v206 = *(void *)(v207 - 8);
  __chkstk_darwin();
  uint64_t v205 = (char *)v201 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v227 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0LL);
  uint64_t v228 = *(void *)(v227 - 8);
  __chkstk_darwin();
  uint64_t v203 = (uint64_t)v201 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v204 = (uint64_t)v201 - v11;
  type metadata accessor for OWEKeys(0LL);
  __chkstk_darwin();
  uint64_t v209 = (uint64_t)v201 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0LL);
  __chkstk_darwin();
  uint64_t v210 = (uint64_t)v201 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_10040D470);
  __chkstk_darwin();
  uint64_t v222 = (char *)v201 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v223 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v224 = *(void *)(v223 - 8);
  __chkstk_darwin();
  uint64_t v216 = (uint64_t)v201 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_10040D480);
  __chkstk_darwin();
  uint64_t v232 = (uint64_t)v201 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for LongTermPairingKeys(0LL);
  uint64_t v230 = *(void *)(v17 - 8);
  uint64_t v231 = v17;
  __chkstk_darwin();
  uint64_t v233 = (uint64_t)v201 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_10040F0F0);
  __chkstk_darwin();
  uint64_t v220 = (uint64_t)v201 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v214 = (uint64_t)v201 - v20;
  __chkstk_darwin();
  uint64_t v215 = (uint64_t)v201 - v21;
  uint64_t v218 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0LL);
  __chkstk_darwin();
  uint64_t v217 = (uint64_t)v201 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v202 = (char *)v201 - v23;
  __chkstk_darwin();
  uint64_t v208 = (void *)((char *)v201 - v24);
  __chkstk_darwin();
  uint64_t v211 = (uint64_t)v201 - v25;
  __chkstk_darwin();
  uint64_t v212 = (uint64_t)v201 - v26;
  type metadata accessor for NANPeer(0LL);
  __chkstk_darwin();
  uint64_t v234 = (uint64_t)v201 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_10040E460);
  __chkstk_darwin();
  uint64_t v221 = (void *)((char *)v201 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  unint64_t v225 = (void *)((char *)v201 - v29);
  uint64_t v30 = v3 + qword_100410BB0;
  swift_beginAccess(v3 + qword_100410BB0, v246, 0LL, 0LL);
  uint64_t v237 = v30;
  uint64_t v31 = *(void *)(v30 + 16);
  swift_bridgeObjectRetain(v31);
  NANConstants.csaMatterServiceName.unsafeMutableAddressor();
  Swift::String v32 = String.lowercased()();
  Swift::String v33 = String.lowercased()();
  unint64_t v242 = BYTE2(a1);
  if (v32._countAndFlagsBits == v33._countAndFlagsBits && v32._object == v33._object)
  {
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease_n(v32._object, 2LL);
  }

  else
  {
    char v34 = _stringCompareWithSmolCheck(_:_:expecting:)( v32._countAndFlagsBits,  v32._object,  v33._countAndFlagsBits,  v33._object,  0LL);
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v32._object);
    swift_bridgeObjectRelease(v33._object);
    if ((v34 & 1) == 0) {
      goto LABEL_7;
    }
  }

  uint64_t v35 = NANFollowUpReceivedEvent.serviceInfo.getter(a1, a2, a3);
  if (v35 != 4LL)
  {
    uint64_t v38 = v35;
    uint64_t v39 = v36;
    unint64_t v40 = v37;
    uint64_t v41 = NANServiceInfo.csaMatterPayload.getter(v35, v36, v37);
    unint64_t v43 = v42;
    sub_1001062E0(v38, v39, v40);
    if (v43 >> 60 != 15)
    {
      uint64_t v76 = *(void **)(v4 + qword_10040EFB8);
      if (v76)
      {
        unint64_t v77 = a1 >> 24;
        unint64_t v78 = HIDWORD(a1);
        unint64_t v79 = a1 >> 40;
        swift_unknownObjectRetain(v76);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        id v81 = WiFiAddress.apiAddress.getter((v239 << 40) | ((unint64_t)v8 << 32) | ((_DWORD)v79 << 24) | ((unint64_t)v78 << 16) | ((unint64_t)v77 << 8) | v242);
        [v76 subscribeReceivedMessage:isa fromPublishID:v235 address:v81];
        sub_100020B40(v41, v43);

        swift_unknownObjectRelease(v76);
      }

      else
      {
        sub_100020B40(v41, v43);
      }

      return result;
    }
  }

uint64_t sub_1002C4E0C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (uint64_t *)&v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  unint64_t v8 = (void *)*v7;
  *uint64_t v6 = *v7;
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v6);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v4 + 8))(v6, v3);
  if ((v8 & 1) != 0)
  {
    uint64_t v11 = v1 + qword_100410BB0;
    swift_beginAccess(v11, v13, 33LL, 0LL);
    sub_100262968(a1, v11, type metadata accessor for NANSubscribe.Configuration);
    return swift_endAccess(v13);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1002C4F04()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)((swift_isaMask & *(void *)v0) + 0x58LL);
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v65 = *(void *)((swift_isaMask & *(void *)v0) + 0x50LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v3,  v65,  &protocol requirements base descriptor for P2PControls);
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v59 = AssociatedTypeWitness;
  uint64_t v60 = v5;
  __chkstk_darwin();
  uint64_t v7 = (char *)&v53 - v6;
  uint64_t v62 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v8 = *(void *)(v62 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v64 = (char *)&v53 - v11;
  __chkstk_darwin();
  uint64_t v63 = (char *)&v53 - v12;
  uint64_t v13 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin();
  uint64_t v16 = (uint64_t *)((char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v61 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v17 = (void *)*v61;
  *uint64_t v16 = *v61;
  (*(void (**)(uint64_t *, void, uint64_t))(v14 + 104))( v16,  enum case for DispatchPredicate.onQueue(_:),  v13);
  id v18 = v17;
  char v19 = _dispatchPreconditionTest(_:)(v16);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v14 + 8))(v16, v13);
  if ((v19 & 1) != 0)
  {
    uint64_t v21 = qword_100410BB8;
    if (v1[qword_100410BB8] == 1)
    {
      uint64_t v58 = v10;
      uint64_t v22 = &v1[qword_100410BC0];
      uint64_t v23 = v1;
      unint64_t v57 = v22;
      uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = swift_slowAlloc(12LL, -1LL);
        unint64_t v56 = v7;
        uint64_t v27 = (uint8_t *)v26;
        uint64_t v28 = (char **)swift_slowAlloc(8LL, -1LL);
        os_log_t v54 = v24;
        uint64_t v55 = v27;
        *(_DWORD *)uint64_t v27 = 138412290;
        uint64_t v53 = v27 + 4;
        uint64_t v66 = v23;
        uint64_t v29 = v23;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67);
        *uint64_t v28 = v23;

        uint64_t v24 = v54;
        uint64_t v30 = v55;
        _os_log_impl((void *)&_mh_execute_header, v54, v25, "%@ will attempt to stop", v55, 0xCu);
        uint64_t v31 = sub_100002274(&qword_100404DE0);
        swift_arrayDestroy(v28, 1LL, v31);
        swift_slowDealloc(v28, -1LL, -1LL);
        uint64_t v7 = v56;
        swift_slowDealloc(v30, -1LL, -1LL);
      }

      else
      {
      }

      uint64_t v32 = v65;
      v1[v21] = 0;
      uint64_t v33 = NANConstants.serviceTerminateEventTimeout.unsafeMutableAddressor();
      char v34 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
      uint64_t v35 = (uint64_t)v63;
      uint64_t v36 = v8;
      uint64_t v37 = v62;
      v34(v63, v33, v62);
      uint64_t v38 = (void *)*v61;
      uint64_t v39 = swift_allocObject(&unk_1003F9710, 24LL, 7LL);
      swift_unknownObjectWeakInit(v39 + 16, v23);
      unint64_t v40 = (void *)swift_allocObject(&unk_1003F9738, 40LL, 7LL);
      v40[2] = v32;
      void v40[3] = v2;
      _BYTE v40[4] = v39;
      uint64_t v41 = *(void (**)(char *, void, uint64_t))(v36 + 104);
      uint64_t v42 = (uint64_t)v64;
      v41(v64, enum case for DispatchTimeInterval.never(_:), v37);
      uint64_t v43 = (uint64_t)v58;
      *uint64_t v58 = 100LL;
      v41((char *)v43, enum case for DispatchTimeInterval.milliseconds(_:), v37);
      uint64_t v44 = type metadata accessor for P2PTimer(0LL);
      swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
      uint64_t v45 = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)( v35,  v38,  v42,  v43,  (uint64_t)sub_1002C5F90,  (uint64_t)v40);
      uint64_t v46 = *(void *)&v23[qword_10040EFB0];
      *(void *)&v23[qword_10040EFB0] = v45;
      swift_release(v46);
      uint64_t v47 = v2;
      uint64_t v48 = *(void *)&v23[qword_10040EFA0];
      swift_unownedRetainStrong(v48);
      sub_1002E8C08();
      swift_release(v48);
      swift_unownedRetainStrong(v48);
      uint64_t v49 = v59;
      (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v7, v48 + *(void *)(*(void *)v48 + 96LL), v59);
      swift_release(v48);
      char v50 = &v23[qword_100410BB0];
      swift_beginAccess(&v23[qword_100410BB0], &v66, 0LL, 0LL);
      uint64_t v51 = *v50;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v47,  v65,  v49,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 232))( v51,  v49,  AssociatedConformanceWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v7, v59);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

void *sub_1002C55EC(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v20, 0LL, 0LL);
  uint64_t result = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = result;
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v8 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v7 = 138412290;
      char v19 = v4;
      uint64_t v9 = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20);
      *uint64_t v8 = v3;

      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%@ timed out while waiting for terminate event", v7, 0xCu);
      uint64_t v10 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v8, 1LL, v10);
      swift_slowDealloc(v8, -1LL, -1LL);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v11 = qword_10040EFB8;
    uint64_t v12 = *(void **)&v4[qword_10040EFB8];
    if (v12)
    {
      [v12 subscribeTerminatedWithReason:2];
      uint64_t v12 = *(void **)&v4[v11];
    }

    *(void *)&v4[v11] = 0LL;
    swift_unknownObjectRelease(v12);
    uint64_t v13 = *(void *)&v4[qword_10040EFA0];
    uint64_t v14 = swift_unownedRetainStrong(v13);
    uint64_t v18 = sub_1002E8D68(v14, v15, v16, v17);
    swift_release(v13);
    sub_10029E604((uint64_t)v4);

    return (void *)swift_release(v18);
  }

  return result;
}

uint64_t sub_1002C57D0()
{
  id v1 = v0;
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.error.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v5 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v4 = 138412290;
    *(void *)&v9[0] = v1;
    id v6 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v9, (char *)v9 + 8);
    *uint64_t v5 = v1;

    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Terminating %@ because it's client was invalidated", v4, 0xCu);
    uint64_t v7 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v5, 1LL, v7);
    swift_slowDealloc(v5, -1LL, -1LL);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  else
  {
  }

  memset(v9, 0, sizeof(v9));
  sub_1002BD688((uint64_t)v9);
  return sub_1002C4F04();
}

void sub_1002C5940(void *a1)
{
  id v1 = a1;
  sub_1002BD568();
}

uint64_t sub_1002C5974( uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = v5;
  uint64_t v45 = a3;
  uint64_t v11 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (uint64_t *)((char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v16 = (void *)*v15;
  *uint64_t v14 = *v15;
  (*(void (**)(uint64_t *, void, uint64_t))(v12 + 104))( v14,  enum case for DispatchPredicate.onQueue(_:),  v11);
  id v17 = v16;
  LOBYTE(vswift_weakDestroy(v0 + 16) = _dispatchPreconditionTest(_:)(v14);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v12 + 8))(v14, v11);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    return result;
  }

  if (*(_BYTE *)(v6 + qword_100410BB8) != 1) {
    return a5(3LL);
  }
  unsigned int v43 = a4;
  uint64_t v44 = a5;
  char v19 = (unsigned __int8 *)(v6 + qword_100410BB0);
  swift_beginAccess(v6 + qword_100410BB0, v47, 0LL, 0LL);
  uint64_t v20 = *((void *)v19 + 2);
  swift_bridgeObjectRetain(v20);
  NANConstants.csaMatterServiceName.unsafeMutableAddressor();
  Swift::String v21 = String.lowercased()();
  Swift::String v22 = String.lowercased()();
  if (v21._countAndFlagsBits == v22._countAndFlagsBits && v21._object == v22._object)
  {
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease_n(v21._object, 2LL);
    goto LABEL_11;
  }

  char v24 = _stringCompareWithSmolCheck(_:_:expecting:)( v21._countAndFlagsBits,  v21._object,  v22._countAndFlagsBits,  v22._object,  0LL);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v21._object);
  swift_bridgeObjectRelease(v22._object);
  if ((v24 & 1) != 0)
  {
LABEL_11:
    int v27 = NANServiceInfo.init(csaMatterPayload:)();
    uint64_t v29 = v32;
    unint64_t v31 = v33;
    sub_100020AFC(a1, a2);
    goto LABEL_12;
  }

  rawValue = NANGenericServiceProtocol.init()().attributes._rawValue;
  sub_100020AFC(a1, a2);
  NANGenericServiceProtocol.blob.setter(a1, a2);
  uint64_t v25 = (uint64_t)rawValue;
  uint64_t v26 = (uint64_t *)NANGenericServiceProtocol.AttributeFilter.all.unsafeMutableAddressor();
  int v27 = NANServiceInfo.init(information:filter:)(v25, *v26);
  uint64_t v29 = v28;
  unint64_t v31 = v30;
LABEL_12:
  uint64_t v34 = *(void *)(v6 + qword_10040EFA0);
  uint64_t v35 = swift_unownedRetainStrong(v34);
  uint64_t v39 = sub_1002E8D68(v35, v36, v37, v38);
  swift_release(v34);
  uint64_t v40 = *(void *)(v39 + *(void *)(*(void *)v39 + 272LL));
  swift_retain();
  swift_release(v39);
  WiFiMACAddress.wifiAddress.getter();
  sub_1002A213C(v27, v29, v31, v41 & 0xFFFFFFFFFFFFLL, v43, *v19);
  swift_release(v40);
  v44(0LL);
  return sub_1000208D8(v29, v31);
}

void sub_1002C5C2C(void *a1, int a2, void *a3, void *a4, unsigned int a5, void *aBlock)
{
  uint64_t v10 = _Block_copy(aBlock);
  id v11 = a3;
  id v12 = a4;
  id v17 = a1;
  uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
  unint64_t v15 = v14;

  uint64_t v16 = swift_allocObject(&unk_1003F97D8, 24LL, 7LL);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = v10;
  sub_1002C5974(v13, v15, (uint64_t)v12, a5, (uint64_t (*)(uint64_t))sub_100265400);
  swift_release(v16);
  sub_1000208D8(v13, v15);
}

id sub_1002C5D08(void *a1)
{
  id v1 = a1;
  sub_1002C5D5C();
  uint64_t v3 = v2;

  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t sub_1002C5D5C()
{
  HIBYTE(v11[1]) = -18;
  uint64_t v1 = v0 + qword_100410BB0;
  swift_beginAccess(v0 + qword_100410BB0, v10, 0LL, 0LL);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 8285LL;
  v4._object = (void *)0xE200000000000000LL;
  String.append(_:)(v4);
  uint64_t v6 = *(void *)(v1 + 8);
  uint64_t v5 = *(void **)(v1 + 16);
  swift_bridgeObjectRetain(v5);
  v7._countAndFlagsBits = NANServiceName.description.getter(v6, v5);
  uint64_t v8 = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v8);
  return v11[0];
}

void sub_1002C5E44()
{
}

uint64_t _s8InstanceCMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&_s8InstanceCMn);
}

id sub_1002C5E6C(uint64_t a1, uint64_t a2)
{
  return sub_1002BDE08(a1, a2);
}

void sub_1002C5E84()
{
}

uint64_t sub_1002C5EAC@<X0>(uint64_t a1@<X8>)
{
  return sub_1002BD714(a1);
}

uint64_t sub_1002C5ECC()
{
  return sub_10011F7B8(&qword_10040F060, (uint64_t)&protocol conformance descriptor for NANSubscribe.Configuration);
}

uint64_t sub_1002C5EF0(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getWitnessTable(&unk_10035F858, a2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002C5F1C()
{
  return sub_10011F7B8(&qword_10040F0B0, (uint64_t)&protocol conformance descriptor for NANSubscribe.Configuration);
}

uint64_t sub_1002C5F40(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getWitnessTable(&unk_10035F874, a2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002C5F6C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void *sub_1002C5F90()
{
  return sub_1002C55EC(*(void *)(v0 + 32));
}

void sub_1002C5F9C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 16;
  uint64_t v3 = (uint64_t *)(a1 + qword_10040EFC0);
  swift_beginAccess(a1 + qword_10040EFC0, v8, 0LL, 0LL);
  uint64_t v4 = *v3;
  swift_bridgeObjectRetain(*v3);
  BOOL v5 = sub_100303A00(v2, v4);
  swift_bridgeObjectRelease(v4);
  if (!v5)
  {
    swift_beginAccess(v3, v7, 33LL, 0LL);
    sub_10032CF5C((uint64_t)v6, v2);
    swift_endAccess(v7);
    sub_1002BD758();
    sub_1002BDB08();
  }

uint64_t sub_1002C6054(uint64_t a1)
{
  uint64_t result = NANGenericServiceProtocol.blob.getter(a1);
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  return result;
}

uint64_t sub_1002C61A4()
{
  return sub_100020B40(v1, v0);
}

void sub_1002C61E8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    Swift::String v7 = (void *)Strong;
    if (*(_BYTE *)(Strong + qword_100410BB8) == 1) {
      a4();
    }
  }

void sub_1002C6250()
{
  uint64_t ObjectType = swift_getObjectType(v0);
  uint64_t v138 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v1 = *(void *)(v138 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)v117 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v5 = (char *)v117 - v4;
  __chkstk_darwin();
  uint64_t v133 = (char *)v117 - v6;
  __chkstk_darwin();
  uint64_t v8 = (char *)v117 - v7;
  __chkstk_darwin();
  char v137 = (char *)v117 - v9;
  uint64_t v119 = type metadata accessor for DispatchTime(0LL);
  uint64_t v118 = *(void *)(v119 - 8);
  __chkstk_darwin();
  id v11 = (char *)v117 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin();
  unint64_t v15 = (void *)((char *)v117 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v16 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  id v17 = (void *)*v16;
  *unint64_t v15 = *v16;
  (*(void (**)(uint64_t *, void, uint64_t))(v13 + 104))( v15,  enum case for DispatchPredicate.onQueue(_:),  v12);
  id v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(uint64_t *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v141 = v5;
  uint64_t v151 = &_swiftEmptySetSingleton;
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v19 = swift_allocObject(&unk_1003F9788, 34LL, 7LL);
  *(void *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = &_swiftEmptySetSingleton;
  uint64_t v20 = v19 + 16;
  *(void *)(v19 + 24) = 0LL;
  uint64_t v134 = v19;
  *(_WORD *)(v19 + 32) = 1025;
  uint64_t v139 = v8;
  Swift::String v21 = (uint64_t *)v3;
  Swift::String v22 = v145;
  uint64_t v23 = &v145[qword_100410BC8];
  swift_beginAccess(&v145[qword_100410BC8], v150, 1LL, 0LL);
  uint64_t v24 = *(void *)v23;
  uint64_t v25 = ((uint64_t (*)(void))swift_bridgeObjectRetain)(*(void *)v23);
  uint64_t v26 = sub_1002C7884(v25);
  swift_bridgeObjectRelease(v24);
  uint64_t v27 = *(void *)v23;
  *(void *)uint64_t v23 = v26;
  swift_bridgeObjectRelease(v27);
  uint64_t v28 = *(void *)v23;
  uint64_t v29 = ((uint64_t (*)(uint64_t))swift_bridgeObjectRetain)(v28);
  uint64_t v136 = v20;
  sub_1002BD188(v29, v20);
  v117[1] = 0LL;
  swift_bridgeObjectRelease(v28);
  unint64_t v30 = &v22[qword_100410BD0];
  swift_beginAccess(&v22[qword_100410BD0], v149, 0LL, 0LL);
  v117[0] = v30;
  uint64_t v31 = *(void *)v30;
  uint64_t v32 = *(void *)(*(void *)v30 + 56LL);
  uint64_t v123 = *(void *)v30 + 56LL;
  uint64_t v33 = 1LL << *(_BYTE *)(v31 + 32);
  uint64_t v34 = -1LL;
  if (v33 < 64) {
    uint64_t v34 = ~(-1LL << v33);
  }
  unint64_t v35 = v34 & v32;
  uint64_t v140 = &v22[qword_100410BC0];
  uint64_t v36 = (uint64_t)v139;
  int64_t v124 = (unint64_t)(v33 + 63) >> 6;
  unint64_t v125 = &v147;
  unsigned int v129 = enum case for DispatchTimeInterval.seconds(_:);
  uint64_t v135 = v31;
  __n128 v37 = swift_bridgeObjectRetain(v31);
  int64_t v38 = 0LL;
  v37.n128_u64[0] = 136315650LL;
  __n128 v122 = v37;
  uint64_t v121 = &type metadata for Any[8];
  v37.n128_u64[0] = 138412546LL;
  __n128 v120 = v37;
  uint64_t v131 = v1;
  uint64_t v130 = v21;
  uint64_t v39 = (uint64_t)v137;
  uint64_t v128 = v11;
  if (v35) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v41 = v38 + 1;
  if (!__OFADD__(v38, 1LL))
  {
    if (v41 < v124)
    {
      unint64_t v42 = *(void *)(v123 + 8 * v41);
      int64_t v43 = v38 + 1;
      if (v42) {
        goto LABEL_21;
      }
      int64_t v43 = v38 + 2;
      if (v38 + 2 >= v124) {
        goto LABEL_34;
      }
      unint64_t v42 = *(void *)(v123 + 8 * v43);
      if (v42) {
        goto LABEL_21;
      }
      int64_t v43 = v38 + 3;
      if (v38 + 3 >= v124) {
        goto LABEL_34;
      }
      unint64_t v42 = *(void *)(v123 + 8 * v43);
      if (v42)
      {
LABEL_21:
        uint64_t v142 = (v42 - 1) & v42;
        int64_t v143 = v43;
        for (unint64_t i = __clz(__rbit64(v42)) + (v43 << 6); ; unint64_t i = __clz(__rbit64(v35)) | (v38 << 6))
        {
          uint64_t v45 = (unsigned __int8 *)(*(void *)(v135 + 48) - i + 8 * i);
          uint64_t v46 = v45[1];
          uint64_t v47 = v45[2];
          uint64_t v48 = v45[3];
          uint64_t v49 = v45[4];
          uint64_t v50 = v45[5];
          uint64_t v51 = v45[6];
          unint64_t v52 = *v45 | (unint64_t)(v46 << 8) | (v47 << 16) | (v48 << 24) | (v49 << 32) | (v50 << 40) | (v51 << 48);
          sub_1002C6DE0(v39, v36, (uint64_t)v145, v52, (uint64_t)v11);
          swift_beginAccess(v136, &v148, 33LL, 0LL);
          sub_10032CF5C((uint64_t)&v146, (v48 << 16) | (v47 << 8) | (v49 << 24) | (v50 << 32) | (v51 << 40) | v46);
          swift_endAccess(&v148);
          uint64_t v53 = v131;
          os_log_t v54 = *(void (**)(char *, uint64_t, uint64_t))(v131 + 16);
          uint64_t v55 = v39;
          unint64_t v56 = v133;
          uint64_t v57 = v138;
          v54(v133, v36, v138);
          uint64_t v58 = v141;
          uint64_t v59 = ((uint64_t (*)(char *, uint64_t, uint64_t))v54)(v141, v55, v57);
          uint64_t v60 = v57;
          uint64_t v61 = (os_log_s *)Logger.logObject.getter(v59);
          os_log_type_t v62 = static os_log_type_t.debug.getter(v61);
          int v63 = v62;
          BOOL v64 = os_log_type_enabled(v61, v62);
          unint64_t v144 = v52;
          if (v64)
          {
            uint64_t v65 = swift_slowAlloc(32LL, -1LL);
            uint64_t v127 = (os_log_s *)swift_slowAlloc(96LL, -1LL);
            uint64_t v148 = v127;
            *(_DWORD *)uint64_t v65 = v122.n128_u32[0];
            LODWORD(v126) = v63;
            uint64_t v66 = NANPeerServiceIdentifier.description.getter(v52);
            unint64_t v68 = v67;
            uint64_t v146 = sub_10000235C(v66, v67, (uint64_t *)&v148);
            os_log_type_t v69 = v125;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v125);
            swift_bridgeObjectRelease(v68);
            *(_WORD *)(v65 + 12) = 2080;
            uint64_t v70 = DispatchTimeInterval.description.getter();
            unint64_t v72 = v71;
            uint64_t v146 = sub_10000235C(v70, v71, (uint64_t *)&v148);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v69);
            __n128 v73 = swift_bridgeObjectRelease(v72);
            unint64_t v74 = *(void (**)(char *, uint64_t, __n128))(v53 + 8);
            v74(v56, v60, v73);
            *(_WORD *)(v65 + 22) = 2080;
            char v75 = v141;
            uint64_t v76 = DispatchTimeInterval.description.getter();
            unint64_t v78 = v77;
            uint64_t v146 = sub_10000235C(v76, v77, (uint64_t *)&v148);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v69);
            __n128 v79 = swift_bridgeObjectRelease(v78);
            v74(v75, v60, v79);
            _os_log_impl( (void *)&_mh_execute_header,  v61,  (os_log_type_t)v126,  "Considering aging out peer %s. Last saw peer %s ago and last saw service information %s ago.",  (uint8_t *)v65,  0x20u);
            unint64_t v80 = v127;
            swift_arrayDestroy(v127, 3LL, v121);
            swift_slowDealloc(v80, -1LL, -1LL);
            swift_slowDealloc(v65, -1LL, -1LL);
          }

          else
          {

            unint64_t v74 = *(void (**)(char *, uint64_t, __n128))(v53 + 8);
            ((void (*)(char *, uint64_t))v74)(v56, v57);
            ((void (*)(char *, uint64_t))v74)(v58, v57);
          }

          uint64_t v81 = v60;
          uint64_t v82 = v130;
          *uint64_t v130 = 9LL;
          uint64_t v83 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v53 + 104);
          uint64_t v84 = v129;
          v83(v82, v129, v60);
          uint64_t v36 = (uint64_t)v139;
          BOOL v85 = static DispatchTimeInterval.< infix(_:_:)((uint64_t)v82, (uint64_t)v139);
          ((void (*)(uint64_t *, uint64_t))v74)(v82, v81);
          uint64_t v39 = (uint64_t)v137;
          if (v85) {
            uint64_t v86 = 8LL;
          }
          else {
            uint64_t v86 = 20LL;
          }
          *uint64_t v82 = v86;
          v83(v82, v84, v81);
          unint64_t v87 = v144;
          BOOL v88 = sub_1002C7060((uint64_t)v82, v39, v134, v144, (uint64_t)v145);
          ((void (*)(uint64_t *, uint64_t))v74)(v82, v81);
          if (v88)
          {
            unint64_t v89 = v145;
            uint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
            os_log_type_t v91 = static os_log_type_t.default.getter(v90);
            uint64_t v127 = v90;
            if (os_log_type_enabled(v90, v91))
            {
              uint64_t v92 = swift_slowAlloc(22LL, -1LL);
              uint64_t v93 = (void *)swift_slowAlloc(8LL, -1LL);
              uint64_t v126 = swift_slowAlloc(32LL, -1LL);
              uint64_t v148 = (os_log_s *)v126;
              *(_DWORD *)uint64_t v92 = v120.n128_u32[0];
              uint64_t v146 = (uint64_t)v89;
              uint64_t v94 = v89;
              uint64_t v95 = v125;
              uint64_t v36 = (uint64_t)v139;
              uint64_t v96 = v145;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v125);
              *uint64_t v93 = v96;
              uint64_t v97 = v93;

              *(_WORD *)(v92 + 12) = 2080;
              uint64_t v98 = NANPeerServiceIdentifier.description.getter(v144);
              unint64_t v100 = v99;
              uint64_t v146 = sub_10000235C(v98, v99, (uint64_t *)&v148);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v95);
              unint64_t v101 = v100;
              unint64_t v87 = v144;
              swift_bridgeObjectRelease(v101);
              unint64_t v102 = v127;
              _os_log_impl( (void *)&_mh_execute_header,  v127,  v91,  "%@ aging out discovery result %s",  (uint8_t *)v92,  0x16u);
              uint64_t v103 = sub_100002274(&qword_100404DE0);
              swift_arrayDestroy(v97, 1LL, v103);
              uint64_t v81 = v138;
              swift_slowDealloc(v97, -1LL, -1LL);
              uint64_t v104 = v126;
              swift_arrayDestroy(v126, 1LL, &type metadata for Any[8]);
              swift_slowDealloc(v104, -1LL, -1LL);
              swift_slowDealloc(v92, -1LL, -1LL);
            }

            else
            {
            }

            unint64_t v35 = v142;
            int64_t v38 = v143;
            sub_10032D140(&v148, v87);
            ((void (*)(uint64_t, uint64_t))v74)(v36, v81);
            ((void (*)(uint64_t, uint64_t))v74)(v39, v81);
            id v11 = v128;
            if (!v35) {
              goto LABEL_8;
            }
          }

          else
          {
            ((void (*)(uint64_t, uint64_t))v74)(v36, v81);
            ((void (*)(uint64_t, uint64_t))v74)(v39, v81);
            id v11 = v128;
            unint64_t v35 = v142;
            int64_t v38 = v143;
            if (!v142) {
              goto LABEL_8;
            }
          }

uint64_t sub_1002C6DE0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v29 = a5;
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  sub_100002274(&qword_10040E460);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for NANPeer.Service(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v30 = *(void *)(v13 - 8);
  uint64_t v31 = v13;
  __chkstk_darwin();
  unint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for NANPeer(0LL);
  __chkstk_darwin();
  id v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *(void *)(a3 + qword_10040EFA0);
  swift_unownedRetainStrong(v18);
  sub_1002EA528((a4 >> 8) & 0xFFFFFFFFFFFFLL, (uint64_t)v17);
  swift_release(v18);
  uint64_t v19 = v29;
  DispatchTime.distance(to:)(v29);
  uint64_t v20 = a3 + qword_100410BB0;
  swift_beginAccess(v20, v34, 0LL, 0LL);
  uint64_t v22 = *(void *)(v20 + 8);
  uint64_t v21 = *(void *)(v20 + 16);
  swift_bridgeObjectRetain(v21);
  sub_1002529DC(v22, v21, a4, (uint64_t)v8);
  __n128 v23 = swift_bridgeObjectRelease(v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v10 + 48))(v8, 1LL, v9, v23) == 1)
  {
    sub_10005802C((uint64_t)v17, type metadata accessor for NANPeer);
    sub_1000225EC((uint64_t)v8, &qword_10040E460);
    uint64_t v25 = v30;
    uint64_t v24 = v31;
    (*(void (**)(uint64_t, void, uint64_t))(v30 + 104))( v32,  enum case for DispatchTimeInterval.never(_:),  v31);
    uint64_t v26 = v24;
    uint64_t v27 = v25;
  }

  else
  {
    sub_100022628((uint64_t)v8, (uint64_t)v12, type metadata accessor for NANPeer.Service);
    DispatchTime.distance(to:)(v19);
    sub_10005802C((uint64_t)v12, type metadata accessor for NANPeer.Service);
    sub_10005802C((uint64_t)v17, type metadata accessor for NANPeer);
    uint64_t v27 = v30;
    uint64_t v26 = v31;
  }

  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(v33, v15, v26);
}

BOOL sub_1002C7060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v48 = a5;
  uint64_t v9 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v14 = (uint64_t *)((char *)&v42 - v13);
  __chkstk_darwin();
  uint64_t v16 = (uint64_t *)((char *)&v42 - v15);
  if (!static DispatchTimeInterval.< infix(_:_:)(a1, a2)) {
    return 0;
  }
  uint64_t v43 = a1;
  uint64_t v44 = v12;
  uint64_t v45 = a2;
  uint64_t v46 = v10;
  uint64_t v47 = v9;
  swift_beginAccess(a3 + 16, v51, 33LL, 0LL);
  unint64_t v17 = ((unint64_t)BYTE5(a4) << 32) & 0xFFFF00FF00000000LL | ((unint64_t)BYTE6(a4) << 40) | ((unint64_t)BYTE4(a4) << 24) | ((unint64_t)BYTE3(a4) << 16) | ((unint64_t)BYTE2(a4) << 8) | BYTE1(a4);
  sub_100330D58(v17);
  swift_endAccess(v51);
  uint64_t v18 = (uint64_t *)(v48 + qword_10040EFC0);
  swift_beginAccess(v48 + qword_10040EFC0, v51, 0LL, 0LL);
  uint64_t v19 = *v18;
  swift_bridgeObjectRetain(v19);
  LOBYTE(v17) = sub_100303A00(v17, v19);
  __n128 v20 = swift_bridgeObjectRelease(v19);
  if ((v17 & 1) != 0)
  {
    uint64_t v43 = BYTE5(a4);
    uint64_t v21 = v46;
    uint64_t v22 = v44;
    uint64_t v23 = v47;
    uint64_t v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v46 + 16))(v44, v45, v47, v20);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc(22LL, -1LL);
      uint64_t v48 = swift_slowAlloc(64LL, -1LL);
      uint64_t v50 = v48;
      *(_DWORD *)uint64_t v27 = 136315394;
      uint64_t v28 = NANPeerServiceIdentifier.description.getter((v43 << 40) | ((unint64_t)BYTE6(a4) << 48) | ((unint64_t)BYTE4(a4) << 32) | ((unint64_t)BYTE3(a4) << 24) | ((unint64_t)BYTE2(a4) << 16) | ((unint64_t)BYTE1(a4) << 8) | a4);
      unint64_t v30 = v29;
      uint64_t v49 = sub_10000235C(v28, v29, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_bridgeObjectRelease(v30);
      *(_WORD *)(v27 + 12) = 2080;
      uint64_t v31 = v44;
      uint64_t v32 = DispatchTimeInterval.description.getter();
      unint64_t v34 = v33;
      uint64_t v49 = sub_10000235C(v32, v33, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      __n128 v35 = swift_bridgeObjectRelease(v34);
      (*(void (**)(char *, uint64_t, __n128))(v46 + 8))(v31, v47, v35);
      _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "Reset the peer %s from the bloom filter because its been %s since we last saw the advertised service descriptor",  (uint8_t *)v27,  0x16u);
      uint64_t v36 = v48;
      swift_arrayDestroy(v48, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v36, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v23);
    }

    return 0;
  }

  *uint64_t v14 = 5LL;
  uint64_t v37 = v46;
  uint64_t v38 = v47;
  (*(void (**)(uint64_t *, void, uint64_t, __n128))(v46 + 104))( v14,  enum case for DispatchTimeInterval.seconds(_:),  v47,  v20);
  static DispatchTimeInterval.+ infix(_:_:)(v43, (uint64_t)v14, v16);
  uint64_t v39 = *(void (**)(uint64_t *, uint64_t))(v37 + 8);
  v39(v14, v38);
  BOOL v40 = static DispatchTimeInterval.< infix(_:_:)((uint64_t)v16, v45);
  v39(v16, v38);
  return v40;
}

uint64_t sub_1002C740C(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v31 = (uint64_t)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_10040F0F0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v28 = a1[2];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  uint64_t v11 = a1[5];
  uint64_t v12 = a1[6];
  uint64_t v13 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v6, 1LL, 1LL, v13);
  swift_beginAccess(a2 + qword_100410BC8, v32, 33LL, 0LL);
  uint64_t v29 = v7;
  uint64_t v14 = v7 | (v8 << 8);
  uint64_t v15 = v28;
  sub_1002E9124((uint64_t)v6, v14 | (v28 << 16) | (v9 << 24) | (v10 << 32) | (v11 << 40) | (v12 << 48));
  swift_endAccess(v32);
  uint64_t v30 = a2;
  uint64_t v16 = *(void **)(a2 + qword_10040EFB8);
  uint64_t v17 = (v9 << 16) | (v15 << 8) | (v10 << 24) | (v11 << 32) | (v12 << 40) | v8;
  if (v16)
  {
    swift_unknownObjectRetain(v16);
    id v18 = WiFiAddress.apiAddress.getter(v17);
    unsigned __int8 v19 = v29;
    [v16 subscribeLostDiscoveryResultForPublishID:v29 address:v18];

    swift_unknownObjectRelease(v16);
  }

  else
  {
    unsigned __int8 v19 = v29;
  }

  uint64_t v20 = v30;
  uint64_t v21 = *(void *)(v30 + qword_10040EFA0);
  swift_unownedRetainStrong(v21);
  uint64_t v22 = v20 + qword_100410BB0;
  swift_beginAccess(v20 + qword_100410BB0, v32, 0LL, 0LL);
  uint64_t v23 = *(void *)(v22 + 8);
  uint64_t v24 = *(void *)(v22 + 16);
  swift_bridgeObjectRetain(v24);
  uint64_t v25 = v31;
  sub_1002EA528(v17, v31);
  sub_100252B6C(v23, v24, v19);
  swift_bridgeObjectRelease(v24);
  sub_1002EA6EC(v25, v17);
  return swift_release(v21);
}

uint64_t sub_1002C7674(uint64_t a1, uint64_t a2, unint64_t a3, __int16 a4)
{
  uint64_t v7 = a1 + qword_100410BB0;
  swift_beginAccess(a1 + qword_100410BB0, v13, 1LL, 0LL);
  uint64_t v8 = v7 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0LL) + 56);
  uint64_t v9 = *(void *)v8;
  unint64_t v10 = *(void *)(v8 + 8);
  *(void *)uint64_t v8 = a2;
  *(void *)(v8 + 8) = a3;
  __int16 v11 = *(_WORD *)(v8 + 16);
  *(_WORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = a4;
  sub_10011F034(a2, a3, a4);
  return sub_1000AA7B4(v9, v10, v11);
}

void *sub_1002C7720(uint64_t a1, void *a2)
{
  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (1LL << v5) + 63;
  uint64_t v8 = v7 >> 6;
  size_t v9 = 8 * (v7 >> 6);
  if (v6 <= 0xD || (swift_stdlib_isStackAllocationSafe(8 * (v7 >> 6), 8LL) & 1) != 0)
  {
    __chkstk_darwin();
    bzero((char *)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0LL), v9);
    unint64_t v10 = sub_1002C79D4( (unint64_t *)((char *)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0LL)),  v8,  (void *)a1,  (uint64_t)a2);
    if (v2) {
      swift_willThrow(v10);
    }
    else {
      return v10;
    }
  }

  else
  {
    __int16 v11 = (void *)swift_slowAlloc(v9, -1LL);
    bzero(v11, v9);
    a2 = sub_1002C79D4((unint64_t *)v11, v8, (void *)a1, (uint64_t)a2);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  return a2;
}

void *sub_1002C7884(uint64_t a1)
{
  uint64_t v2 = (void *)a1;
  char v3 = *(_BYTE *)(a1 + 32);
  unsigned int v4 = v3 & 0x3F;
  unint64_t v5 = (1LL << v3) + 63;
  uint64_t v6 = v5 >> 6;
  size_t v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD || (swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8LL) & 1) != 0)
  {
    __chkstk_darwin();
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0LL), v7);
    uint64_t v8 = sub_1002C7EDC((unint64_t *)((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v6, (uint64_t)v2);
    if (v1) {
      swift_willThrow(v8);
    }
    else {
      return v8;
    }
  }

  else
  {
    size_t v9 = (void *)swift_slowAlloc(v7, -1LL);
    bzero(v9, v7);
    uint64_t v2 = sub_1002C7EDC((unint64_t *)v9, v6, (uint64_t)v2);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  return v2;
}

void *sub_1002C79D4(unint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v60 = a4;
  v54[0] = a2;
  uint64_t v55 = a1;
  uint64_t v64 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0LL);
  __chkstk_darwin();
  uint64_t v6 = (char *)v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v75 = sub_100002274(&qword_10040D488);
  __chkstk_darwin();
  uint64_t v59 = (char *)v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  os_log_type_t v62 = (char *)v54 - v8;
  __chkstk_darwin();
  unint64_t v10 = (char *)v54 - v9;
  uint64_t v61 = *(void *)(type metadata accessor for NANPeer.Service.AuthenticationStatus(0LL) - 8);
  uint64_t result = (void *)__chkstk_darwin();
  uint64_t v76 = (uint64_t)v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = 0LL;
  int64_t v14 = 0LL;
  uint64_t v65 = a3;
  uint64_t v17 = a3[8];
  uint64_t v16 = a3 + 8;
  uint64_t v15 = v17;
  uint64_t v18 = 1LL << *((_BYTE *)v16 - 32);
  uint64_t v19 = -1LL;
  if (v18 < 64) {
    uint64_t v19 = ~(-1LL << v18);
  }
  unint64_t v20 = v19 & v15;
  uint64_t v57 = v16;
  int64_t v58 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v21 = type metadata accessor for NANPeer.Service.AuthenticationStatus;
  int v63 = v6;
  while (2)
  {
    uint64_t v56 = v13;
    uint64_t v22 = v76;
    if (v20)
    {
LABEL_6:
      uint64_t v73 = (v20 - 1) & v20;
      int64_t v74 = v14;
      unint64_t v23 = __clz(__rbit64(v20)) | (v14 << 6);
      uint64_t v24 = v75;
      goto LABEL_21;
    }

    while (1)
    {
      int64_t v25 = v14 + 1;
      if (__OFADD__(v14, 1LL))
      {
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }

      if (v25 >= v58) {
        return sub_1002F9464(v55, v54[0], v56, v65);
      }
      unint64_t v26 = v57[v25];
      int64_t v27 = v14 + 1;
      if (!v26)
      {
        int64_t v27 = v14 + 2;
        if (v14 + 2 >= v58) {
          return sub_1002F9464(v55, v54[0], v56, v65);
        }
        unint64_t v26 = v57[v27];
        if (!v26)
        {
          int64_t v27 = v14 + 3;
          if (v14 + 3 >= v58) {
            return sub_1002F9464(v55, v54[0], v56, v65);
          }
          unint64_t v26 = v57[v27];
          if (!v26)
          {
            uint64_t v28 = v14 + 4;
            if (v14 + 4 >= v58) {
              return sub_1002F9464(v55, v54[0], v56, v65);
            }
            unint64_t v26 = v57[v28];
            if (!v26)
            {
              while (1)
              {
                int64_t v27 = v28 + 1;
                if (__OFADD__(v28, 1LL)) {
                  goto LABEL_26;
                }
                if (v27 >= v58) {
                  return sub_1002F9464(v55, v54[0], v56, v65);
                }
                unint64_t v26 = v57[v27];
                ++v28;
                if (v26) {
                  goto LABEL_20;
                }
              }
            }

            int64_t v27 = v14 + 4;
          }
        }
      }

void *sub_1002C7EDC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v45 = a2;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for DispatchTime(0LL);
  uint64_t v56 = *(void *)(v4 - 8);
  uint64_t v57 = v4;
  __chkstk_darwin();
  uint64_t v55 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v53 = *(void *)(v6 - 8);
  uint64_t v54 = v6;
  __chkstk_darwin();
  uint64_t v52 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v51 = (char *)&v44 - v8;
  uint64_t v61 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0LL);
  __chkstk_darwin();
  uint64_t v64 = (uint64_t)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v60 = sub_100002274(&qword_10040D488);
  __chkstk_darwin();
  uint64_t v59 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  int v68 = (char *)&v44 - v11;
  uint64_t v50 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0LL);
  uint64_t v58 = *(void *)(v50 - 8);
  __chkstk_darwin();
  uint64_t v67 = (uint64_t)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_log_type_t v62 = (void *)a3;
  uint64_t v13 = *(void *)(a3 + 64);
  uint64_t v47 = 0LL;
  uint64_t v48 = (void *)(a3 + 64);
  uint64_t v14 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v49 = (unint64_t)(v14 + 63) >> 6;
  if ((v15 & v13) != 0)
  {
    uint64_t v65 = (v16 - 1) & v16;
    uint64_t v66 = 0LL;
    unint64_t v17 = __clz(__rbit64(v16));
    goto LABEL_18;
  }

  if (v49 > 1)
  {
    unint64_t v18 = v48[1];
    uint64_t v19 = 1LL;
    if (v18) {
      goto LABEL_17;
    }
    uint64_t v19 = 2LL;
    if (v49 <= 2) {
      return sub_1002F9464(v46, v45, v47, v62);
    }
    unint64_t v18 = v48[2];
    if (v18) {
      goto LABEL_17;
    }
    uint64_t v19 = 3LL;
    if (v49 <= 3) {
      return sub_1002F9464(v46, v45, v47, v62);
    }
    unint64_t v18 = v48[3];
    if (v18)
    {
LABEL_17:
      uint64_t v65 = (v18 - 1) & v18;
      uint64_t v66 = v19;
      unint64_t v17 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_18:
      uint64_t v21 = v62[7];
      uint64_t v22 = (char *)(v62[6] - v17 + 8 * v17);
      char v23 = *v22;
      char v24 = v22[1];
      char v25 = v22[2];
      char v26 = v22[3];
      char v27 = v22[4];
      char v28 = v22[5];
      char v29 = v22[6];
      uint64_t v30 = *(void *)(v58 + 72);
      unint64_t v63 = v17;
      uint64_t v31 = v67;
      sub_100057FE8(v21 + v30 * v17, v67, type metadata accessor for NANPeer.Service.AuthenticationStatus);
      uint64_t v32 = v60;
      uint64_t v33 = *(int *)(v60 + 48);
      uint64_t v34 = v68;
      uint64_t v35 = (uint64_t)&v68[v33];
      *int v68 = v23;
      v34[1] = v24;
      v34[2] = v25;
      v34[3] = v26;
      v34[4] = v27;
      v34[5] = v28;
      v34[6] = v29;
      uint64_t v36 = v31;
      uint64_t v37 = (uint64_t)&v34[v33];
      sub_100057FE8(v36, v35, type metadata accessor for NANPeer.Service.AuthenticationStatus);
      uint64_t v38 = *(int *)(v32 + 48);
      uint64_t v39 = v59;
      uint64_t v40 = (uint64_t)&v59[v38];
      *uint64_t v59 = v23;
      v39[1] = v24;
      v39[2] = v25;
      v39[3] = v26;
      v39[4] = v27;
      v39[5] = v28;
      v39[6] = v29;
      sub_100057FE8(v37, (uint64_t)&v39[v38], type metadata accessor for NANPeer.Service.AuthenticationStatus);
      uint64_t v41 = v64;
      sub_100057FE8(v40, v64, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
      uint64_t v42 = (char *)&loc_1002C8374 + *((int *)qword_1002C8460 + swift_getEnumCaseMultiPayload(v41, v61));
      __asm { BR              X9 }
    }

    uint64_t v20 = 4LL;
    if (v49 > 4)
    {
      unint64_t v18 = v48[4];
      if (v18)
      {
        uint64_t v19 = 4LL;
        goto LABEL_17;
      }

      while (1)
      {
        uint64_t v19 = v20 + 1;
        if (__OFADD__(v20, 1LL))
        {
          __break(1u);
          JUMPOUT(0x1002C8460LL);
        }

        if (v19 >= v49) {
          break;
        }
        unint64_t v18 = v48[v19];
        ++v20;
        if (v18) {
          goto LABEL_17;
        }
      }
    }
  }

  return sub_1002F9464(v46, v45, v47, v62);
}

void sub_1002C8474(uint64_t a1)
{
  if (!*(void *)(*(void *)v1 + 16LL)) {
    return;
  }
  uint64_t v3 = a1 + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v8 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }

    int64_t v12 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v12 >= v7) {
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v12);
    ++v8;
    if (!v13)
    {
      int64_t v8 = v12 + 1;
      if (v12 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v13 = *(void *)(v3 + 8 * v8);
      if (!v13)
      {
        int64_t v8 = v12 + 2;
        if (v12 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v13 = *(void *)(v3 + 8 * v8);
        if (!v13)
        {
          int64_t v8 = v12 + 3;
          if (v12 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v13 = *(void *)(v3 + 8 * v8);
          if (!v13) {
            break;
          }
        }
      }
    }

uint64_t sub_1002C85FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_10040D480);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1002C8644()
{
  unint64_t result = qword_10040F108;
  if (!qword_10040F108)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___WiFiAwareDiscoveryResult);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10040F108);
  }

  return result;
}

uint64_t sub_1002C8680(uint64_t a1)
{
  return a1;
}

void sub_1002C86B0()
{
}

uint64_t sub_1002C86D4()
{
  return swift_deallocObject(v0, 34LL, 7LL);
}

uint64_t sub_1002C86F8(unsigned __int8 *a1)
{
  return sub_1002C740C(a1, *(void *)(v1 + 16));
}

uint64_t sub_1002C8710()
{
  return sub_1002C7674(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(_WORD *)(v0 + 40));
}

uint64_t sub_1002C8730()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1002C8754()
{
}

uint64_t sub_1002C8778()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t P2PMain.device.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80LL) - 8LL) + 16LL))( a1,  v1 + *(void *)(*(void *)v1 + 96LL));
}

uint64_t P2PMain.onTerminate.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 144LL));
  swift_beginAccess(v1, v4, 0LL, 0LL);
  uint64_t v2 = *v1;
  sub_10002254C(*v1, v1[1]);
  return v2;
}

uint64_t P2PMain.onTerminate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 144LL));
  swift_beginAccess(v5, v9, 1LL, 0LL);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  *uint64_t v5 = a1;
  v5[1] = a2;
  return sub_100021018(v6, v7);
}

uint64_t (*P2PMain.onTerminate.modify(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t P2PMain.__allocating_init(device:)(uint64_t a1)
{
  return P2PMain.init(device:)(a1);
}

uint64_t P2PMain.init(device:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v78 = a1;
  uint64_t v3 = *(void *)v1;
  uint64_t v75 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v71 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  int64_t v74 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v73 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v70 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v72 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(v3 + 80);
  uint64_t v7 = type metadata accessor for Optional(0LL, v6);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v66 - v10;
  uint64_t v12 = *(void *)(v6 - 8);
  __chkstk_darwin(v9);
  uint64_t v76 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  unint64_t v17 = (uint64_t *)((char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v77 = v3;
  *(void *)&v2[*(void *)(v3 + 104)] = _swiftEmptyArrayStorage;
  unint64_t v18 = &v2[*(void *)(*(void *)v2 + 144LL)];
  *(void *)unint64_t v18 = 0LL;
  *((void *)v18 + 1) = 0LL;
  uint64_t v69 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v19 = (void *)*v69;
  *unint64_t v17 = *v69;
  (*(void (**)(uint64_t *, void, uint64_t))(v15 + 104))( v17,  enum case for DispatchPredicate.onQueue(_:),  v14);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v17);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v15 + 8))(v17, v14);
  if ((v19 & 1) != 0)
  {
    uint64_t v22 = v78;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v78, v7);
    uint64_t v23 = v12;
    int v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1LL, v6);
    uint64_t v25 = v22;
    char v26 = (uint64_t *)v7;
    if (v24 == 1)
    {
      char v27 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
      v27(v25, v7);
      v27((uint64_t)v11, v7);
      uint64_t v28 = v77;
    }

    else
    {
      uint64_t v68 = v8;
      char v29 = v76;
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v76, v11, v6);
      uint64_t v28 = v77;
      uint64_t v30 = *(void *)(v77 + 88);
      uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 48))(v6, v30);
      uint64_t v33 = v32;
      id v34 = objc_allocWithZone((Class)type metadata accessor for XPCServer(0LL));
      uint64_t v35 = sub_1002FD2C4(v31, v33);
      if (v35)
      {
        uint64_t v36 = v35;
        (*(void (**)(char *, char *, uint64_t))(v23 + 16))(&v2[*(void *)(*(void *)v2 + 96LL)], v29, v6);
        *(void *)&v2[*(void *)(*(void *)v2 + 136LL)] = v36;
        sub_100121340();
        uint64_t v66 = v6;
        uint64_t v77 = v23;
        uint64_t v37 = (id *)v69;
        uint64_t v38 = (void *)*v69;
        uint64_t v67 = v36;
        id v39 = v38;
        uint64_t v40 = static OS_dispatch_source.makeSignalSource(signal:queue:)(15LL, v38);

        *(void *)&v2[*(void *)(*(void *)v2 + 112LL)] = v40;
        id v41 = *v37;
        id v42 = *v37;
        uint64_t v43 = static OS_dispatch_source.makeSignalSource(signal:queue:)(2LL, v41);

        *(void *)&v2[*(void *)(*(void *)v2 + 120LL)] = v43;
        id v44 = *v37;
        id v45 = *v37;
        uint64_t v46 = static OS_dispatch_source.makeSignalSource(signal:queue:)(13LL, v44);

        *(void *)&v2[*(void *)(*(void *)v2 + 128LL)] = v46;
        uint64_t v47 = swift_allocObject(&unk_1003F9828, 24LL, 7LL);
        swift_weakInit(v47 + 16, v2);
        uint64_t v48 = (void *)swift_allocObject(&unk_1003F9850, 40LL, 7LL);
        _OWORD v48[2] = v6;
        v48[3] = v30;
        v48[4] = v47;
        uint64_t ObjectType = swift_getObjectType(*(void *)&v2[*(void *)(*(void *)v2 + 112LL)]);
        uint64_t v83 = sub_1002C9DF8;
        uint64_t v84 = v48;
        __int128 aBlock = _NSConcreteStackBlock;
        uint64_t v80 = 1107296256LL;
        uint64_t v81 = sub_1000021F0;
        uint64_t v82 = &unk_1003F9868;
        uint64_t v50 = _Block_copy(&aBlock);
        uint64_t v51 = swift_retain();
        uint64_t v52 = v72;
        static DispatchQoS.unspecified.getter(v51);
        uint64_t v69 = v26;
        uint64_t v53 = v74;
        sub_10012070C();
        OS_dispatch_source.setEventHandler(qos:flags:handler:)(v52, v53, v50, ObjectType);
        _Block_release(v50);
        uint64_t v71 = *(void *)(v71 + 8);
        uint64_t v54 = v75;
        ((void (*)(char *, uint64_t))v71)(v53, v75);
        uint64_t v55 = *(void (**)(char *, uint64_t))(v70 + 8);
        uint64_t v56 = v73;
        v55(v52, v73);
        swift_release(v84);
        uint64_t v57 = swift_getObjectType(*(void *)&v2[*(void *)(*(void *)v2 + 120LL)]);
        uint64_t v83 = sub_1002C9DF8;
        uint64_t v84 = v48;
        __int128 aBlock = _NSConcreteStackBlock;
        uint64_t v80 = 1107296256LL;
        uint64_t v81 = sub_1000021F0;
        uint64_t v82 = &unk_1003F9890;
        uint64_t v58 = _Block_copy(&aBlock);
        uint64_t v59 = swift_retain();
        static DispatchQoS.unspecified.getter(v59);
        sub_10012070C();
        OS_dispatch_source.setEventHandler(qos:flags:handler:)(v52, v53, v58, v57);
        _Block_release(v58);
        uint64_t v60 = v54;
        uint64_t v61 = (void (*)(char *, uint64_t))v71;
        ((void (*)(char *, uint64_t))v71)(v53, v60);
        v55(v52, v56);
        swift_release(v84);
        uint64_t v62 = swift_getObjectType(*(void *)&v2[*(void *)(*(void *)v2 + 128LL)]);
        uint64_t v83 = (uint64_t (*)())NANBitmap.Channel.operatingClass.getter;
        uint64_t v84 = 0LL;
        __int128 aBlock = _NSConcreteStackBlock;
        uint64_t v80 = 1107296256LL;
        uint64_t v81 = sub_1000021F0;
        uint64_t v82 = &unk_1003F98B8;
        unint64_t v63 = _Block_copy(&aBlock);
        static DispatchQoS.unspecified.getter(v63);
        sub_10012070C();
        OS_dispatch_source.setEventHandler(qos:flags:handler:)(v52, v53, v63, v62);
        _Block_release(v63);

        swift_release(v48);
        (*(void (**)(uint64_t, uint64_t *))(v68 + 8))(v78, v69);
        v61(v53, v75);
        v55(v52, v56);
        (*(void (**)(char *, uint64_t))(v77 + 8))(v76, v66);
        return (uint64_t)v2;
      }

      (*(void (**)(uint64_t, uint64_t *))(v68 + 8))(v25, v26);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v29, v6);
    }

    swift_bridgeObjectRelease(*(void *)&v2[*(void *)(*(void *)v2 + 104LL)]);
    sub_100021018( *(void *)&v2[*(void *)(*(void *)v2 + 144LL)],  *(void *)&v2[*(void *)(*(void *)v2 + 144LL) + 8]);
    uint64_t v65 = type metadata accessor for P2PMain(0LL, v6, *(void *)(v28 + 88), v64);
    swift_deallocPartialClassInstance( v2,  v65,  *(unsigned int *)(*(void *)v2 + 48LL),  *(unsigned __int16 *)(*(void *)v2 + 52LL));
    return 0LL;
  }

  __break(1u);
  return result;
}

uint64_t type metadata accessor for P2PMain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for P2PMain);
}

uint64_t sub_1002C8FA4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)&v27[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v27[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = Logger.init(subsystem:category:)(0xD000000000000012LL, 0x8000000100360620LL, 1953066601LL, 0xE400000000000000LL);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "Received a terminate signal, will disable all interfaces",  v13,  2u);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v14 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v15 = (void *)*v14;
  *uint64_t v5 = *v14;
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v5);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if ((v15 & 1) != 0)
  {
    uint64_t v18 = a1 + 16;
    swift_beginAccess(v18, v29, 0LL, 0LL);
    uint64_t result = swift_weakLoadStrong(v18);
    if (result)
    {
      uint64_t v19 = result;
      id v20 = (uint64_t *)(result + *(void *)(*(void *)result + 104LL));
      swift_beginAccess(v20, v28, 0LL, 0LL);
      uint64_t v21 = *v20;
      uint64_t v22 = *(void *)(v21 + 16);
      uint64_t v23 = swift_allocObject(&unk_1003F9B70, 24LL, 7LL);
      uint64_t v24 = v23;
      *(void *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
      if (v22)
      {
        uint64_t v25 = (void *)(v21 + 32);
        swift_bridgeObjectRetain(v21);
        uint64_t v26 = v22;
        do
        {
          sub_1002C9220(v25, v24, v22, v19);
          v25 += 5;
          --v26;
        }

        while (v26);
        swift_release(v24);
        swift_release(v19);
        return swift_bridgeObjectRelease(v21);
      }

      else
      {
        swift_release(v23);
        return swift_release(v19);
      }
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1002C9220(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  uint64_t v9 = (void *)swift_allocObject(&unk_1003F9B98, 40LL, 7LL);
  _OWORD v9[2] = a2;
  v9[3] = a3;
  void v9[4] = a4;
  uint64_t v10 = *(void (**)(void (*)(), void *, uint64_t, uint64_t))(v8 + 8);
  swift_retain();
  swift_retain();
  v10(sub_1002CB8BC, v9, v7, v8);
  return swift_release(v9);
}

void sub_1002C92CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)&v22[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v11 = (void *)*v10;
  *uint64_t v9 = *v10;
  (*(void (**)(uint64_t *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v13 = (uint64_t *)(a1 + 16);
  swift_beginAccess(v13, v24, 1LL, 0LL);
  uint64_t v14 = *v13 + 1;
  if (__OFADD__(*v13, 1LL))
  {
LABEL_8:
    __break(1u);
    return;
  }

  *uint64_t v13 = v14;
  if (v14 == a2)
  {
    uint64_t v15 = (uint64_t *)(a3 + *(void *)(*(void *)a3 + 104LL));
    swift_beginAccess(v15, v23, 1LL, 0LL);
    uint64_t v16 = *v15;
    *uint64_t v15 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v16);
    uint64_t v17 = a3 + *(void *)(*(void *)a3 + 144LL);
    swift_beginAccess(v17, v22, 1LL, 0LL);
    uint64_t v18 = *(void (**)(uint64_t))v17;
    uint64_t v19 = *(void *)(v17 + 8);
    *(void *)uint64_t v17 = 0LL;
    *(void *)(v17 + 8) = 0LL;
    sub_10002254C((uint64_t)v18, v19);
    sub_100021018((uint64_t)v18, v19);
    if (v18)
    {
      uint64_t v20 = swift_retain();
      v18(v20);
      sub_100021018((uint64_t)v18, v19);
      sub_100021018((uint64_t)v18, v19);
    }
  }

char *P2PMain.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)v0;
  uint64_t v32 = v2;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v28 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v29 = *(void *)(v6 - 8);
  uint64_t v30 = v6;
  __chkstk_darwin();
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = *(void *)(v2 + 112);
  swift_getObjectType(*(void *)&v1[v34]);
  OS_dispatch_source.cancel()();
  uint64_t v33 = *(void *)(*(void *)v1 + 120LL);
  swift_getObjectType(*(void *)&v1[v33]);
  OS_dispatch_source.cancel()();
  uint64_t v31 = *(void *)(*(void *)v1 + 128LL);
  swift_getObjectType(*(void *)&v1[v31]);
  OS_dispatch_source.cancel()();
  uint64_t v9 = swift_allocObject(&unk_1003F98F0, 17LL, 7LL);
  *(_BYTE *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  uint64_t v10 = swift_allocObject(&unk_1003F98F0, 17LL, 7LL);
  *(_BYTE *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  uint64_t v11 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v12 = swift_allocObject(&unk_1003F9918, 32LL, 7LL);
  *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  *(void *)(v12 + 24) = v10;
  uint64_t v40 = sub_1002C9E30;
  uint64_t v41 = v12;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v37 = 1107296256LL;
  uint64_t v38 = sub_1000021F0;
  id v39 = &unk_1003F9930;
  uint64_t v13 = _Block_copy(&aBlock);
  id v14 = v11;
  swift_retain();
  uint64_t v15 = swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  uint64_t v35 = _swiftEmptyArrayStorage;
  unint64_t v16 = sub_100002234();
  unint64_t v27 = v16;
  uint64_t v17 = sub_100002274((uint64_t *)&unk_1004052A0);
  uint64_t v26 = v17;
  unint64_t v25 = sub_1000022B4();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v17, v25, v3, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v5, v13);
  _Block_release(v13);

  uint64_t v28 = *(void *)(v28 + 8);
  ((void (*)(char *, uint64_t))v28)(v5, v3);
  uint64_t v18 = v30;
  uint64_t v29 = *(void *)(v29 + 8);
  ((void (*)(char *, uint64_t))v29)(v8, v30);
  swift_release(v41);
  uint64_t v19 = (void *)*OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v20 = swift_allocObject(&unk_1003F9968, 32LL, 7LL);
  *(void *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  *(void *)(v20 + 24) = v9;
  uint64_t v40 = sub_1002C9E64;
  uint64_t v41 = v20;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v37 = 1107296256LL;
  uint64_t v38 = sub_1000021F0;
  id v39 = &unk_1003F9980;
  uint64_t v21 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  id v22 = v19;
  static DispatchQoS.unspecified.getter(v22);
  uint64_t v35 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v26, v25, v3, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v5, v21);
  _Block_release(v21);

  ((void (*)(char *, uint64_t))v28)(v5, v3);
  ((void (*)(char *, uint64_t))v29)(v8, v18);
  uint64_t v23 = v41;
  swift_release(v9);
  swift_release(v10);
  swift_release(v23);
  (*(void (**)(char *))(*(void *)(*(void *)(v32 + 80) - 8LL) + 8LL))(&v1[*(void *)(*(void *)v1 + 96LL)]);
  swift_bridgeObjectRelease(*(void *)&v1[*(void *)(*(void *)v1 + 104LL)]);
  swift_unknownObjectRelease(*(void *)&v1[v34]);
  swift_unknownObjectRelease(*(void *)&v1[v33]);
  swift_unknownObjectRelease(*(void *)&v1[v31]);

  sub_100021018( *(void *)&v1[*(void *)(*(void *)v1 + 144LL)],  *(void *)&v1[*(void *)(*(void *)v1 + 144LL) + 8]);
  return v1;
}

uint64_t sub_1002C986C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v27 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v13 = *(void *)(v26 - 8);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v16 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v17 = swift_allocObject(a3, 32LL, 7LL);
  *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v17 + 24) = a2;
  aBlock[4] = a4;
  uint64_t v30 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000021F0;
  aBlock[3] = a5;
  uint64_t v18 = _Block_copy(aBlock);
  id v19 = v16;
  swift_retain();
  uint64_t v20 = swift_retain();
  static DispatchQoS.unspecified.getter(v20);
  uint64_t v28 = _swiftEmptyArrayStorage;
  unint64_t v21 = sub_100002234();
  uint64_t v22 = sub_100002274((uint64_t *)&unk_1004052A0);
  unint64_t v23 = sub_1000022B4();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v22, v23, v10, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v12, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v26);
  return swift_release(v30);
}

uint64_t sub_1002C9A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess(a1 + 16, v7, 1LL, 0LL);
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
  uint64_t result = swift_beginAccess(v4, &v6, 0LL, 0LL);
  if (*(_BYTE *)(a2 + 16) == 1) {
    exit(0);
  }
  return result;
}

uint64_t P2PMain.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

Swift::Void __swiftcall P2PMain.start()()
{
}

double P2PMain.attached<A>(infraDriver:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, void *a6)
{
  uint64_t v7 = v6;
  uint64_t v26 = *v7;
  uint64_t v27 = a1;
  uint64_t v13 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v14 = *(void **)(v13 - 8);
  __chkstk_darwin();
  unint64_t v16 = (uint64_t *)((char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v17 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v18 = (void *)*v17;
  *unint64_t v16 = *v17;
  ((void (*)(uint64_t *, void, uint64_t))v14[13])(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v16);
  ((void (*)(uint64_t *, uint64_t))v14[1])(v16, v13);
  if ((v18 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    a6 = sub_1002CAB24(0LL, a6[2] + 1LL, 1, a6);
    *a4 = (uint64_t)a6;
    goto LABEL_5;
  }

  v30[0] = a2;
  v30[1] = a3;
  v30[2] = a4;
  v30[3] = a5;
  v30[4] = a6;
  a5 = type metadata accessor for P2PController(0LL, (uint64_t)v30);
  uint64_t v14 = sub_1002BC664(v27);
  a4 = (uint64_t *)((char *)v7 + *(void *)(*v7 + 104));
  swift_beginAccess(a4, v30, 0LL, 0LL);
  if (!*(void *)(*a4 + 16))
  {
    uint64_t v20 = swift_allocObject(&unk_1003F9AA8, 40LL, 7LL);
    *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)(v26 + 80);
    *(void *)(v20 + 32) = v14;
    swift_retain();
    sub_1002FD7D0((uint64_t)sub_1002CB708, v20);
    swift_release(v20);
  }

  swift_beginAccess(a4, v29, 33LL, 0LL);
  a6 = (void *)*a4;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a6);
  *a4 = (uint64_t)a6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  unint64_t v23 = a6[2];
  unint64_t v22 = a6[3];
  if (v23 >= v22 >> 1) {
    *a4 = (uint64_t)sub_1002CAB24((void *)(v22 > 1), v23 + 1, 1, a6);
  }
  uint64_t v28 = v14;
  sub_1002CAC44(v23, (uint64_t)&v28, a4, a5, (uint64_t)&off_1003F9230);
  swift_endAccess(v29);
  *(void *)&double result = swift_release(v14).n128_u64[0];
  return result;
}

double sub_1002C9D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, void *a6)
{
  return P2PMain.attached<A>(infraDriver:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1002C9DB0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002C9DD4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1002C9DF8()
{
  return sub_1002C8FA4(*(void *)(v0 + 32));
}

uint64_t sub_1002C9E04(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002C9E14(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1002C9E1C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002C9E30()
{
  return sub_1002C986C( *(void *)(v0 + 16),  *(void *)(v0 + 24),  (uint64_t)&unk_1003F9B20,  (uint64_t)sub_1002CB8C8,  (uint64_t)&unk_1003F9B38);
}

uint64_t sub_1002C9E64()
{
  return sub_1002C986C( *(void *)(v0 + 16),  *(void *)(v0 + 24),  (uint64_t)&unk_1003F9AD0,  (uint64_t)sub_1002CB838,  (uint64_t)&unk_1003F9AE8);
}

void *sub_1002C9E94(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100002274((uint64_t *)&unk_10040E4D0);
      uint64_t v11 = (void *)swift_allocObject(v10, 56 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      void v11[2] = v8;
      _OWORD v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[7 * v8 + 4]) {
          memmove(v13, a4 + 4, 56 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1002CACBC(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1002C9FBC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100002274((uint64_t *)&unk_10040CC40);
      uint64_t v11 = (void *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 1;
      }
      void v11[2] = v8;
      _OWORD v11[3] = 2 * (v13 >> 5);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4]) {
          memmove(v14, a4 + 4, 32 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1002CADB0(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1002CA0C8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1002CA260( a1,  a2,  a3,  a4,  &qword_10040D830,  (void (*)(void, int64_t, void *, void *))sub_1002CAEB8);
}

void *sub_1002CA0DC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1002CA118(a1, a2, a3, a4, (uint64_t *)&unk_10040F290);
}

void *sub_1002CA0F0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1002CA118(a1, a2, a3, a4, &qword_10040F278);
}

void *sub_1002CA104(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1002CA118(a1, a2, a3, a4, (uint64_t *)&unk_10040D7F0);
}

void *sub_1002CA118(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }

  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if (v8 + 0x4000000000000000LL >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      uint64_t v11 = sub_100002274(a5);
      int64_t v12 = (void *)swift_allocObject(v11, 56 * v10 + 32, 7LL);
      size_t v13 = j__malloc_size(v12);
      void v12[2] = v9;
      v12[3] = 2 * ((uint64_t)(v13 - 32) / 56);
      uint64_t v14 = v12 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= &a4[7 * v9 + 4]) {
          memmove(v14, a4 + 4, 56 * v9);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      int64_t v12 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
    }

    sub_1002CAFBC(0LL, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v12;
  }

  __break(1u);
  return result;
}

void *sub_1002CA24C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1002CA118(a1, a2, a3, a4, &qword_10040F268);
}

void *sub_1002CA260( void *result, int64_t a2, char a3, void *a4, uint64_t *a5, void (*a6)(void, int64_t, void *, void *))
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v10 = a2;
    goto LABEL_8;
  }

  unint64_t v9 = a4[3];
  int64_t v10 = v9 >> 1;
  if (v10 + 0x4000000000000000LL >= 0)
  {
    int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    int64_t v11 = a4[2];
    if (v10 <= v11) {
      int64_t v12 = a4[2];
    }
    else {
      int64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = sub_100002274(a5);
      uint64_t v14 = (void *)swift_allocObject(v13, 8 * v12 + 32, 7LL);
      int64_t v15 = j__malloc_size(v14);
      uint64_t v16 = v15 - 32;
      if (v15 < 32) {
        uint64_t v16 = v15 - 25;
      }
      v14[2] = v11;
      v14[3] = 2 * (v16 >> 3);
      uint64_t v17 = v14 + 4;
      if ((v8 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v14 = _swiftEmptyArrayStorage;
      uint64_t v17 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v14 != a4 || v17 >= &a4[v11 + 4]) {
          memmove(v17, a4 + 4, 8 * v11);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    a6(0LL, v11, v17, a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v14;
  }

  __break(1u);
  return result;
}

void *sub_1002CA374(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100002274(&qword_10040F2A0);
      int64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      void v11[2] = v8;
      _OWORD v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      int64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1002CB0AC(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1002CA480(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100002274((uint64_t *)&unk_10040E3A0);
      int64_t v11 = (void *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 1;
      }
      void v11[2] = v8;
      _OWORD v11[3] = 2 * (v13 >> 5);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      int64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4]) {
          memmove(v14, a4 + 4, 32 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1002CB1B4(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1002CA58C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1002CA598(a1, a2, a3, a4, &qword_10040D7D8);
}

void *sub_1002CA598(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }

  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if (v8 + 0x4000000000000000LL >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      uint64_t v11 = sub_100002274(a5);
      int64_t v12 = (void *)swift_allocObject(v11, 8 * v10 + 32, 7LL);
      int64_t v13 = j__malloc_size(v12);
      uint64_t v14 = v13 - 32;
      if (v13 < 32) {
        uint64_t v14 = v13 - 25;
      }
      void v12[2] = v9;
      v12[3] = 2 * (v14 >> 3);
      int64_t v15 = v12 + 4;
      if ((v6 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      int64_t v12 = _swiftEmptyArrayStorage;
      int64_t v15 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[v9 + 4]) {
          memmove(v15, a4 + 4, 8 * v9);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1000A82D4(0LL, v9, (char *)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v12;
  }

  __break(1u);
  return result;
}

void *sub_1002CA6A0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100002274(&qword_10040F238);
      uint64_t v11 = (void *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      void v11[2] = v8;
      _OWORD v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      int64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4]) {
          memmove(v13, a4 + 4, 40 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      int64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1002CB2A4(0LL, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1002CA7C0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100002274((uint64_t *)&unk_10040F220);
      uint64_t v11 = (void *)swift_allocObject(v10, 7 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      void v11[2] = v8;
      _OWORD v11[3] = 2 * ((uint64_t)(v12 - 32) / 7);
      int64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      int64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1002CB390(0LL, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1002CA8E8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100002274(&qword_10040F240);
      uint64_t v11 = (void *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      void v11[2] = v8;
      _OWORD v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      int64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4]) {
          memmove(v13, a4 + 4, 24 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      int64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1002CB47C(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1002CAA08(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100002274(&qword_10040F248);
      uint64_t v11 = (void *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      void v11[2] = v8;
      _OWORD v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      int64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4]) {
          memmove(v13, a4 + 4, 40 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      int64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1002CB570(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1002CAB24(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100002274(&qword_10040F2B8);
      uint64_t v11 = (void *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      void v11[2] = v8;
      _OWORD v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      int64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4]) {
          memmove(v13, a4 + 4, 40 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      int64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1002CB728(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_1002CAC44(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v9 = sub_10002278C(&v12);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32LL))(v9, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = a1 + 1;
  return sub_1000589F8(&v12, v10 + 40 * a1 + 32);
}

uint64_t sub_1002CACBC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 56 * a1 + 32;
  unint64_t v6 = a3 + 56 * v4;
  if (v5 >= v6 || v5 + 56 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1002CADB0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v6 = a4 + 32 * a1 + 32;
    unint64_t v7 = a3 + 32 * v4;
    if (v6 >= v7 || v6 + 32 * v4 <= a3)
    {
      sub_100002274((uint64_t *)&unk_10040DD00);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1002CAEB8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      type metadata accessor for AWDLTrafficRegistrationService(0LL);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1002CAFBC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 56 * a1 + 32;
  unint64_t v6 = a3 + 56 * v4;
  if (v5 >= v6 || v5 + 56 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1002CB0AC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_100002274((uint64_t *)&unk_10040F2A8);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1002CB1B4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_1002CB2A4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = (char *)(a4 + 40 * a1 + 32);
  size_t v6 = 40 * v4;
  unint64_t v7 = &__dst[v6];
  if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
  {
    memcpy(__dst, v5, v6);
    return v7;
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_1002CB390(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = (char *)(a4 - a1 + 8 * a1 + 32);
  size_t v6 = 7 * v4;
  unint64_t v7 = &__dst[v6];
  if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
  {
    memcpy(__dst, v5, v6);
    return v7;
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1002CB47C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 24 * a1 + 32;
  unint64_t v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1002CB570(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 40 * a1 + 32;
  unint64_t v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1002CB664(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[2] = "\b";
    v4[3] = "\b";
    v4[4] = "\b";
    void v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v4[6] = &unk_10035F8F0;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 7LL, v4, a1 + 96);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

id sub_1002CB708(char *a1)
{
  return sub_1002BBA04(a1);
}

uint64_t sub_1002CB728(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 40 * a1 + 32;
  unint64_t v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_100002274((uint64_t *)&unk_10040F2C0);
    swift_arrayInitWithCopy(a3);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1002CB838()
{
  return sub_1002C9A3C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1002CB854()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1002CB880()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002CB890()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1002CB8BC()
{
}

uint64_t sub_1002CB900(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v4 <= 0x3F)
  {
    v7[0] = *(void *)(result - 8) + 64LL;
    v7[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t v5 = type metadata accessor for NANOutOfBoundActionFrameTransmitter.InFlightActionFrame( 255LL,  *(void *)(a1 + 80),  *(void *)(a1 + 88),  v3);
    uint64_t result = type metadata accessor for Optional(319LL, v5);
    if (v6 <= 0x3F)
    {
      _OWORD v7[2] = *(void *)(result - 8) + 64LL;
      v7[3] = "\b";
      uint64_t result = swift_initClassMetadata2(a1, 0LL, 4LL, v7, a1 + 96);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_1002CB9AC(int a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v7 = (uint64_t)v6;
  LODWORD(v81) = a6;
  unint64_t v82 = a3;
  uint64_t v80 = a2;
  LODWORD(v79) = a1;
  uint64_t v9 = (void *)*v6;
  uint64_t v10 = (void (*)(uint64_t, uint64_t))v9[11];
  uint64_t v84 = v9[10];
  uint64_t v85 = a4;
  uint64_t v83 = v10;
  uint64_t v11 = type metadata accessor for NANOutOfBoundActionFrameTransmitter.InFlightActionFrame(255LL, v84, (uint64_t)v10, a4);
  uint64_t v12 = type metadata accessor for Optional(0LL, v11);
  uint64_t v86 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v73 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v76 = (char *)&v73 - v14;
  __chkstk_darwin();
  uint64_t v77 = (char *)&v73 - v15;
  __chkstk_darwin();
  uint64_t v17 = (char *)&v73 - v16;
  uint64_t v18 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v75 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v21 = (unsigned __int8 *)&v73 - v20;
  uint64_t v22 = *(void *)(v7 + v9[15]);
  swift_unownedRetainStrong(v22);
  unint64_t v23 = a5 & 0xFFFFFFFFFFFFLL;
  LOBYTE(a5) = sub_1002EBCA0(a5 & 0xFFFFFFFFFFFFLL);
  uint64_t v24 = swift_release(v22);
  if ((a5 & 1) != 0)
  {
    uint64_t v74 = v11;
    uint64_t v25 = v12;
    uint64_t v26 = v80;
    uint64_t v27 = v82;
    uint64_t v28 = v85;
    sub_10005852C(v80, v82, v85);
    char v29 = v81 & 1;
    uint64_t v81 = v21;
    unint64_t v82 = v23;
    sub_1002CC060(v79, v26, v27, v28, v23, v29, v84, (uint64_t)v83, (uint64_t)v21);
    uint64_t v30 = v7 + *(void *)(*(void *)v7 + 112LL);
    __n128 v31 = swift_beginAccess(v30, v90, 0LL, 0LL);
    uint64_t v32 = v86;
    uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v86 + 16);
    uint64_t v84 = v30;
    v33(v17, v30, v25, v31);
    uint64_t v85 = v18;
    uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
    uint64_t v35 = v74;
    LODWORD(v30) = v34(v17, 1LL, v74);
    uint64_t v36 = *(void (**)(char *, uint64_t))(v32 + 8);
    v36(v17, v25);
    if ((_DWORD)v30 == 1)
    {
LABEL_3:
      uint64_t v37 = v81;
      uint64_t v38 = v78;
      sub_1002CC904(v81);
      if (v38) {
        return (*(uint64_t (**)(unsigned __int8 *, uint64_t))(v85 + 8))(v37, v35);
      }
      uint64_t v71 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v85 + 8);
      return v71(v37, v35);
    }

    uint64_t v50 = v77;
    ((void (*)(char *, uint64_t, uint64_t))v33)(v77, v84, v25);
    uint64_t result = v34(v50, 1LL, v35);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }

    else
    {
      BOOL v51 = sub_1002CC1E4();
      uint64_t v86 = *(void *)(v85 + 8);
      uint64_t v52 = ((uint64_t (*)(char *, uint64_t))v86)(v50, v35);
      if (v51)
      {
        uint64_t v53 = (uint64_t *)(v7 + qword_10040F2D0);
        swift_beginAccess(v7 + qword_10040F2D0, v87, 0LL, 0LL);
        uint64_t v88 = *v53;
        uint64_t v54 = type metadata accessor for Array(0LL, v35);
        uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v54);
        uint64_t v52 = Collection.isEmpty.getter(v54, WitnessTable);
        if ((v52 & 1) != 0) {
          goto LABEL_3;
        }
      }

      uint64_t v83 = (void (*)(uint64_t, uint64_t))v36;
      uint64_t v56 = (os_log_s *)Logger.logObject.getter(v52);
      os_log_type_t v57 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v56, v57))
      {
        uint64_t v80 = v7;
        uint64_t v58 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v59 = swift_slowAlloc(32LL, -1LL);
        uint64_t v79 = v25;
        uint64_t v60 = v59;
        uint64_t v88 = v59;
        *(_DWORD *)uint64_t v58 = 136315138;
        uint64_t v61 = WiFiAddress.description.getter(v82);
        unint64_t v63 = v62;
        uint64_t v91 = sub_10000235C(v61, v62, &v88);
        uint64_t v35 = v74;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);
        unint64_t v64 = v63;
        uint64_t v7 = v80;
        swift_bridgeObjectRelease(v64);
        _os_log_impl( (void *)&_mh_execute_header,  v56,  v57,  "Deferring transmission of out of band action frame to peer: %s",  v58,  0xCu);
        swift_arrayDestroy(v60, 1LL, &type metadata for Any[8]);
        uint64_t v25 = v79;
        swift_slowDealloc(v60, -1LL, -1LL);
        swift_slowDealloc(v58, -1LL, -1LL);
      }

      uint64_t v37 = v81;
      uint64_t v65 = v85;
      uint64_t v66 = v75;
      (*(void (**)(char *, unsigned __int8 *, uint64_t))(v85 + 16))(v75, v81, v35);
      swift_beginAccess(v7 + qword_10040F2D0, &v88, 33LL, 0LL);
      uint64_t v67 = type metadata accessor for Array(0LL, v35);
      Array.append(_:)(v66, v67);
      swift_endAccess(&v88);
      uint64_t v68 = v76;
      ((void (*)(char *, uint64_t, uint64_t))v33)(v76, v84, v25);
      uint64_t result = v34(v68, 1LL, v35);
      if ((_DWORD)result != 1)
      {
        uint64_t v69 = v68;
        BOOL v70 = sub_1002CC1E4();
        uint64_t v71 = (uint64_t (*)(unsigned __int8 *, uint64_t))v86;
        ((void (*)(char *, uint64_t))v86)(v69, v35);
        if (v70)
        {
          uint64_t v72 = (uint64_t)v73;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v65 + 56))(v73, 1LL, 1LL, v35);
          sub_1002CED18(v72);
          v83(v72, v25);
        }

        return v71(v37, v35);
      }
    }

    __break(1u);
  }

  else
  {
    uint64_t v40 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      id v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v43 = swift_slowAlloc(32LL, -1LL);
      v90[0] = v43;
      *(_DWORD *)id v42 = 136315138;
      uint64_t v44 = WiFiAddress.description.getter(v23);
      unint64_t v46 = v45;
      uint64_t v88 = sub_10000235C(v44, v45, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
      swift_bridgeObjectRelease(v46);
      _os_log_impl( (void *)&_mh_execute_header,  v40,  v41,  "Failed to transmit out of band action frame to %s, since the peer was not found",  v42,  0xCu);
      swift_arrayDestroy(v43, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v43, -1LL, -1LL);
      swift_slowDealloc(v42, -1LL, -1LL);
    }

    unint64_t v47 = sub_1000033FC();
    uint64_t v48 = swift_allocError(&type metadata for WiFiError, v47, 0LL, 0LL);
    *(_OWORD *)uint64_t v49 = xmmword_10035D880;
    *(_BYTE *)(v49 + swift_weakDestroy(v0 + 16) = 1;
    return swift_willThrow(v48);
  }

  return result;
}

uint64_t sub_1002CC060@<X0>( char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  char v9 = a5;
  unint64_t v15 = a5 >> 8;
  unint64_t v16 = a5 >> 16;
  *(void *)(a9 + 40) = 0LL;
  unint64_t v17 = HIDWORD(a5);
  unint64_t v19 = a5 >> 40;
  unint64_t v20 = a5 >> 24;
  type metadata accessor for NANOutOfBoundActionFrameTransmitter.InFlightActionFrame(0LL, a7, a8, a4);
  type metadata accessor for P2PTimer(0LL);
  uint64_t result = variable initialization expression of AWDLPeer.lastUpdated();
  *(_BYTE *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(_BYTE *)(a9 + 32) = v9;
  *(_BYTE *)(a9 + 33) = v15;
  *(_BYTE *)(a9 + 34) = v16;
  *(_BYTE *)(a9 + 35) = v20;
  *(_BYTE *)(a9 + 36) = v17;
  *(_BYTE *)(a9 + 37) = v19;
  *(_BYTE *)(a9 + 38) = a6;
  return result;
}

uint64_t sub_1002CC138(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchTime(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  unint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 40))(v1 + *(int *)(a1 + 48), v6, v3);
  uint64_t v8 = *(void *)(v1 + 40);
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    *(void *)(v1 + 40) = v10;
  }
  return result;
}

BOOL sub_1002CC1E4()
{
  uint64_t v0 = type metadata accessor for DispatchTime(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  BOOL v9 = (char *)&v13 - v8;
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  DispatchTime.distance(to:)(v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  *(void *)uint64_t v7 = 4LL;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchTimeInterval.seconds(_:), v4);
  BOOL v10 = static DispatchTimeInterval.< infix(_:_:)((uint64_t)v7, (uint64_t)v9);
  uint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v7, v4);
  v11(v9, v4);
  return v10;
}

uint64_t sub_1002CC340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = *v4;
  uint64_t v7 = type metadata accessor for NANOutOfBoundActionFrameTransmitter.InFlightActionFrame( 0LL,  *(void *)(*v4 + 80),  *(void *)(*v4 + 88),  a4);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  unint64_t v45 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v11 = (char *)v31 - v10;
  uint64_t v12 = type metadata accessor for Optional(0LL, v7);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v37 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  id v42 = (char *)v31 - v15;
  __chkstk_darwin();
  unint64_t v17 = (char *)v31 - v16;
  uint64_t v18 = (uint64_t)v4 + *(void *)(v6 + 112);
  uint64_t v40 = qword_10040F2D0;
  uint64_t v19 = qword_100410BD8;
  __n128 v20 = swift_beginAccess(v18, v49, 0LL, 0LL);
  unint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v46 = v18;
  os_log_type_t v41 = v21;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v21)(v17, v18, v12, v20);
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v43 = v17;
  unsigned int v23 = v22(v17, 1LL, v7);
  uint64_t v38 = v13;
  uint64_t v44 = *(void (**)(char *, uint64_t))(v13 + 8);
  if (v23 == 1)
  {
    v40 += v5;
    uint64_t v36 = v5 + v19;
    uint64_t v33 = &v47;
    *(void *)&__int128 v24 = 136315394LL;
    __int128 v32 = v24;
    v31[1] = &type metadata for Any[8];
    uint64_t v25 = v43;
    uint64_t v35 = v5;
    uint64_t v34 = v12;
    id v39 = v22;
    do
    {
      v44(v25, v12);
      swift_beginAccess(v40, v48, 33LL, 0LL);
      uint64_t v26 = type metadata accessor for Array(0LL, v7);
      uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v26);
      uint64_t v28 = swift_getWitnessTable(&protocol conformance descriptor for [A], v26);
      uint64_t v29 = v26;
      uint64_t v25 = v42;
      RangeReplaceableCollection<>.popLast()(v29, WitnessTable, v28);
      swift_endAccess(v48);
      if (v22(v25, 1LL, v7) == 1) {
        break;
      }
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v25, v7);
      sub_1002CC904(v11);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      uint64_t v25 = v43;
      v41(v43, v46, v12);
      uint64_t v22 = v39;
    }

    while (v39(v25, 1LL, v7) == 1);
  }

  else
  {
    uint64_t v25 = v43;
  }

  return ((uint64_t (*)(char *, uint64_t))v44)(v25, v12);
}

uint64_t sub_1002CC904(unsigned __int8 *a1)
{
  uint64_t v2 = v1;
  unint64_t v82 = a1;
  uint64_t v3 = (void *)*v1;
  uint64_t v4 = v3[10];
  uint64_t v5 = v3[11];
  *(void *)&__int128 v84 = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v5 + 8),  v4,  &protocol requirements base descriptor for P2PControls);
  uint64_t v85 = *(void *)(v84 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v70 - v6;
  uint64_t v9 = type metadata accessor for NANOutOfBoundActionFrameTransmitter.InFlightActionFrame(255LL, v4, v5, v8);
  uint64_t v10 = type metadata accessor for Optional(0LL, v9);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v70 - v12;
  unint64_t v83 = v9;
  uint64_t v86 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v81 = (char *)&v70 - v14;
  uint64_t v15 = *(void *)((char *)v2 + v3[15]);
  swift_unownedRetainStrong(v15);
  uint64_t v16 = v87;
  sub_1002E8C08();
  uint64_t result = swift_release(v15);
  if (!v16)
  {
    uint64_t v74 = v13;
    uint64_t v75 = v10;
    uint64_t v78 = v5;
    uint64_t v79 = v11;
    uint64_t v76 = v15;
    uint64_t v77 = v4;
    unint64_t v87 = v7;
    uint64_t v18 = v2;
    uint64_t v19 = v86;
    __n128 v20 = v81;
    unint64_t v21 = v82;
    uint64_t v22 = v83;
    uint64_t v73 = *(void (**)(char *, unsigned __int8 *, unint64_t))(v86 + 16);
    v73(v81, v82, v83);
    uint64_t v23 = swift_retain_n(v2, 2LL);
    __int128 v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.info.getter();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v80 = 0LL;
    if (v26)
    {
      uint64_t v27 = swift_slowAlloc(22LL, -1LL);
      uint64_t v72 = swift_slowAlloc(64LL, -1LL);
      v88[0] = v72;
      *(_DWORD *)uint64_t v27 = 136315394;
      uint64_t v70 = v27 + 4;
      uint64_t v28 = *(unsigned int *)(v20 + 34);
      uint64_t v29 = *(void (**)(char *, uint64_t))(v19 + 8);
      os_log_t v71 = v24;
      uint64_t v30 = *((unsigned __int16 *)v20 + 16);
      v29(v20, v22);
      uint64_t v31 = WiFiAddress.description.getter(v30 | (v28 << 16));
      unint64_t v33 = v32;
      uint64_t v89 = sub_10000235C(v31, v32, v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90);
      swift_bridgeObjectRelease(v33);
      *(_WORD *)(v27 + 12) = 2080;
      uint64_t v34 = v76;
      swift_unownedRetainStrong(v76);
      unint64_t v35 = sub_1002EC2C0();
      swift_release(v34);
      swift_release(v18);
      uint64_t v36 = WiFiAddress.description.getter(v35 & 0xFFFFFFFFFFFFLL);
      unint64_t v38 = v37;
      uint64_t v89 = sub_10000235C(v36, v37, v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90);
      swift_bridgeObjectRelease(v38);
      swift_release(v18);
      os_log_t v39 = v71;
      _os_log_impl( (void *)&_mh_execute_header,  v71,  v25,  "Attempting to transmit out of band action frame to peer: %s on clusterID: %s",  (uint8_t *)v27,  0x16u);
      uint64_t v40 = v72;
      swift_arrayDestroy(v72, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v40, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);

      uint64_t v41 = v84;
    }

    else
    {
      swift_release(v2);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v22);

      swift_release(v2);
      uint64_t v41 = v84;
      uint64_t v34 = v76;
    }

    uint64_t v43 = (uint64_t)v74;
    uint64_t v42 = v75;
    v73(v74, v21, v22);
    uint64_t v44 = v86;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v86 + 56))(v43, 0LL, 1LL, v22);
    sub_1002CED18(v43);
    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v43, v42);
    unint64_t v45 = sub_1002CCEF4((uint64_t)v88);
    v45((uint64_t)v88, 0);
    uint64_t v47 = v85;
    uint64_t v48 = v87;
    unint64_t v83 = *((unsigned __int16 *)v21 + 16) | ((unint64_t)*(unsigned int *)(v21 + 34) << 16);
    int v49 = sub_1002CE3C0(v83);
    swift_unownedRetainStrong(v34);
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v48, v34 + *(void *)(*(void *)v34 + 96LL), v41);
    swift_release(v34);
    uint64_t v50 = *v21;
    uint64_t v51 = *((void *)v21 + 1);
    uint64_t v52 = *((void *)v21 + 2);
    uint64_t v53 = *((void *)v21 + 3);
    swift_unownedRetainStrong(v34);
    uint64_t v86 = WiFiInterface.macAddress.getter();
    swift_release(v34);
    swift_unownedRetainStrong(v34);
    unint64_t v54 = sub_1002EC2C0();
    swift_release(v34);
    if (v49 == 1)
    {
      swift_unownedRetainStrong(v34);
      uint64_t v55 = WiFiInterface.capabilities.getter();
      swift_release(v34);
      uint64_t v56 = *WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor();
      uint64_t v89 = v55;
      v88[0] = v56;
      unint64_t v57 = sub_100270384();
      swift_bridgeObjectRetain_n(v56, 2LL);
      ExtendableOptionSet.formIntersection(_:)( (uint64_t (*)(_BYTE *, void))&v89,  &type metadata for WiFiDriverCapabilities.Kind,  v57);
      uint64_t v58 = v88[0];
      LOBYTE(v57) = sub_10007990C(v88[0], v56);
      swift_bridgeObjectRelease(v58);
      swift_bridgeObjectRelease(v56);
      swift_bridgeObjectRelease(v55);
      uint64_t v59 = v50;
      unint64_t v60 = v83;
      if ((v57 & 1) != 0) {
        uint64_t v61 = (unsigned __int8 *)NANMapID.secondary.unsafeMutableAddressor();
      }
      else {
        uint64_t v61 = (unsigned __int8 *)NANMapID.primary.unsafeMutableAddressor();
      }
      uint64_t v62 = *v61;
      unint64_t v63 = TimeBitmap.fiveGHzOutOfBoundActionFrameBitmap.unsafeMutableAddressor();
      uint64_t v41 = v84;
      uint64_t v64 = v77;
      uint64_t v65 = v78;
    }

    else
    {
      uint64_t v62 = *(unsigned __int8 *)NANMapID.primary.unsafeMutableAddressor();
      unint64_t v63 = TimeBitmap.twoGHzOutOfBoundActionFrameBitmap.unsafeMutableAddressor();
      uint64_t v64 = v77;
      uint64_t v65 = v78;
      uint64_t v59 = v50;
      unint64_t v60 = v83;
    }

    uint64_t v66 = v63[2];
    __int128 v84 = *(_OWORD *)v63;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v65,  v64,  v41,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
    uint64_t v68 = v62;
    uint64_t v69 = v87;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 256))( v59,  v51,  v52,  v53,  v86 & 0xFFFFFFFFFFFFLL,  v60,  v54 & 0xFFFFFFFFFFFFLL,  v68,  v84,  *((void *)&v84 + 1),  v66,  v41,  AssociatedConformanceWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v69, v41);
  }

  return result;
}

uint64_t (*sub_1002CCEF4(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess(v1 + *(void *)(*(void *)v1 + 112LL), a1, 33LL, 0LL);
  return sub_1002CCF3C;
}

uint64_t sub_1002CCF3C(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_endAccess(a1);
  }
  uint64_t v3 = swift_endAccess(a1);
  return sub_1002CC340(v3, v4, v5, v6);
}

uint64_t sub_1002CCF68(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  unint64_t v174 = *(void (**)(uint64_t, uint64_t))(v4 - 8);
  uint64_t v175 = v4;
  __chkstk_darwin();
  uint64_t v173 = (uint64_t *)((char *)&v159 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v178 = (uint64_t *)((char *)&v159 - v6);
  uint64_t v7 = *(void *)(v3 + 80);
  uint64_t v165 = *(void *)(v3 + 88);
  uint64_t v166 = v7;
  uint64_t v9 = type metadata accessor for NANOutOfBoundActionFrameTransmitter.InFlightActionFrame(255LL, v7, v165, v8);
  uint64_t v10 = type metadata accessor for Optional(0LL, v9);
  uint64_t v181 = *(void *)(v10 - 8);
  uint64_t v182 = v10;
  __chkstk_darwin();
  char v180 = (char *)&v159 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v159 - v12;
  uint64_t v14 = *(void *)(v9 - 8);
  uint64_t v183 = v9;
  uint64_t v184 = v14;
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin();
  uint64_t v167 = (char *)&v159 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v169 = (char *)&v159 - v16;
  __chkstk_darwin();
  uint64_t v168 = (char *)&v159 - v17;
  __chkstk_darwin();
  os_log_type_t v164 = (char *)&v159 - v18;
  __chkstk_darwin();
  uint64_t v171 = (char *)&v159 - v19;
  __chkstk_darwin();
  uint64_t v172 = (char *)&v159 - v20;
  __chkstk_darwin();
  unint64_t v170 = (char *)&v159 - v21;
  __chkstk_darwin();
  unint64_t v176 = (void (*)(char *, uint64_t))((char *)&v159 - v22);
  __chkstk_darwin();
  unint64_t v177 = (char *)&v159 - v23;
  __chkstk_darwin();
  unint64_t v179 = (char *)&v159 - v24;
  uint64_t v25 = type metadata accessor for DriverEvent(0LL);
  __chkstk_darwin();
  uint64_t v27 = (char *)&v159 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v29 = (char *)&v159 - v28;
  __chkstk_darwin();
  uint64_t v31 = (char *)&v159 - v30;
  __chkstk_darwin();
  unint64_t v33 = (char *)&v159 - v32;
  sub_1000E77F4(a1, (uint64_t)&v159 - v32);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v33, v25);
  if (EnumCaseMultiPayload == 4)
  {
    sub_1000E77F4((uint64_t)v33, (uint64_t)v29);
    if (*v29 == 1)
    {
      uint64_t v46 = v183;
      uint64_t v47 = (uint64_t)v180;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v184 + 56))(v180, 1LL, 1LL, v183);
      uint64_t v48 = v33;
      uint64_t v49 = v185;
      sub_1002CED18(v47);
      (*(void (**)(uint64_t, uint64_t))(v181 + 8))(v47, v182);
      swift_beginAccess(v49 + qword_10040F2D0, v191, 33LL, 0LL);
      type metadata accessor for Array(0LL, v46);
      Array.removeAll(keepingCapacity:)(0);
      uint64_t v50 = (uint64_t)v48;
      swift_endAccess(v191);
      return sub_10005802C(v50, type metadata accessor for DriverEvent);
    }

    goto LABEL_9;
  }

  if (EnumCaseMultiPayload)
  {
LABEL_9:
    uint64_t v51 = v33;
    uint64_t v52 = sub_1000E77F4(a1, (uint64_t)v27);
    uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = swift_slowAlloc(22LL, -1LL);
      uint64_t v56 = swift_slowAlloc(64LL, -1LL);
      v191[0] = v56;
      *(_DWORD *)uint64_t v55 = 136315394;
      uint64_t v57 = _typeName(_:qualified:)(v3, 0LL);
      unint64_t v59 = v58;
      uint64_t v189 = sub_10000235C(v57, v58, v191);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, v190);
      swift_bridgeObjectRelease(v59);
      *(_WORD *)(v55 + 12) = 2080;
      DriverEvent.shortDescription.getter();
      unint64_t v61 = v60;
      uint64_t v189 = sub_10000235C(v62, v60, v191);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, v190);
      swift_bridgeObjectRelease(v61);
      sub_10005802C((uint64_t)v27, type metadata accessor for DriverEvent);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "%s unable to handle event: %s", (uint8_t *)v55, 0x16u);
      swift_arrayDestroy(v56, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v56, -1LL, -1LL);
      swift_slowDealloc(v55, -1LL, -1LL);
    }

    else
    {

      sub_10005802C((uint64_t)v27, type metadata accessor for DriverEvent);
    }

    uint64_t v50 = (uint64_t)v51;
    return sub_10005802C(v50, type metadata accessor for DriverEvent);
  }

  sub_1000E77F4((uint64_t)v33, (uint64_t)v31);
  sub_100058090(v31, &v189);
  sub_100058090(&v189, v191);
  if (sub_1001073D8((uint64_t)v191) != 15)
  {
    sub_1002A732C((uint64_t)&v189);
    goto LABEL_9;
  }

  uint64_t v163 = v33;
  uint64_t v35 = NANBitmap.Channel.operatingClass.getter(v191);
  unsigned int v36 = *(unsigned __int8 *)(v35 + 2);
  char v37 = *(_BYTE *)(v35 + 3);
  uint64_t v38 = v185;
  uint64_t v39 = v185 + *(void *)(*(void *)v185 + 112LL);
  __n128 v40 = swift_beginAccess(v39, &v188, 0LL, 0LL);
  uint64_t v41 = v181;
  uint64_t v42 = v39;
  uint64_t v43 = v182;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v181 + 16))(v13, v42, v182, v40);
  uint64_t v45 = v183;
  uint64_t v44 = v184;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v184 + 48))(v13, 1LL, v183) == 1)
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v43);
LABEL_40:
    uint64_t v50 = (uint64_t)v163;
    return sub_10005802C(v50, type metadata accessor for DriverEvent);
  }

  uint64_t v64 = (unsigned __int8 *)v179;
  uint64_t v162 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
  v162(v179, v13, v45);
  uint64_t v65 = *(uint64_t (**)(char *, unsigned __int8 *, uint64_t))(v44 + 16);
  if (v36)
  {
    uint64_t v66 = v177;
    uint64_t v67 = v65(v177, v64, v45);
    uint64_t v68 = (os_log_s *)Logger.logObject.getter(v67);
    os_log_type_t v69 = static os_log_type_t.error.getter();
    int v160 = v69;
    BOOL v70 = os_log_type_enabled(v68, v69);
    unint64_t v161 = v65;
    if (v70)
    {
      uint64_t v71 = swift_slowAlloc(32LL, -1LL);
      uint64_t v159 = swift_slowAlloc(96LL, -1LL);
      v187[0] = v159;
      *(_DWORD *)uint64_t v71 = 136315650;
      uint64_t v72 = *(unsigned int *)(v66 + 34);
      unint64_t v176 = *(void (**)(char *, uint64_t))(v184 + 8);
      uint64_t v73 = *((unsigned __int16 *)v66 + 16);
      v176(v66, v183);
      uint64_t v74 = WiFiAddress.description.getter(v73 | (v72 << 16));
      unint64_t v76 = v75;
      uint64_t v186 = sub_10000235C(v74, v75, v187);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187);
      swift_bridgeObjectRelease(v76);
      *(_WORD *)(v71 + 12) = 2080;
      LOBYTE(v186) = v36;
      uint64_t v77 = String.init<A>(describing:)(&v186, &type metadata for NANOOBActionFrameTrasmitStatus.Result);
      unint64_t v79 = v78;
      uint64_t v186 = sub_10000235C(v77, v78, v187);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187);
      swift_bridgeObjectRelease(v79);
      *(_WORD *)(v71 + 22) = 2080;
      LOBYTE(v186) = v37;
      uint64_t v80 = String.init<A>(describing:)(&v186, &type metadata for NANOOBActionFrameTrasmitStatus.Reason);
      unint64_t v82 = v81;
      uint64_t v186 = sub_10000235C(v80, v81, v187);
      uint64_t v45 = v183;
      uint64_t v38 = v185;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187);
      swift_bridgeObjectRelease(v82);
      uint64_t v83 = v184;
      _os_log_impl( (void *)&_mh_execute_header,  v68,  (os_log_type_t)v160,  "Failed to transmit out of band action frame to %s: %s [%s]",  (uint8_t *)v71,  0x20u);
      uint64_t v84 = v159;
      swift_arrayDestroy(v159, 3LL, &type metadata for Any[8]);
      swift_slowDealloc(v84, -1LL, -1LL);
      uint64_t v85 = v71;
      uint64_t v64 = (unsigned __int8 *)v179;
      swift_slowDealloc(v85, -1LL, -1LL);
    }

    else
    {
      unint64_t v100 = v66;
      uint64_t v83 = v184;
      unint64_t v176 = *(void (**)(char *, uint64_t))(v184 + 8);
      v176(v100, v45);
    }

    uint64_t v101 = (uint64_t)v178;
    if (v36 >= 3)
    {
      uint64_t v124 = (uint64_t)v180;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v83 + 56))(v180, 1LL, 1LL, v45);
      sub_1002CED18(v124);
      (*(void (**)(uint64_t, uint64_t))(v181 + 8))(v124, v182);
LABEL_38:
      uint64_t v158 = v64;
LABEL_39:
      v176((char *)v158, v45);
      goto LABEL_40;
    }

    if (*((uint64_t *)v64 + 5) <= 3)
    {
      uint64_t v126 = v170;
      uint64_t v127 = v161;
      v161(v170, v64, v45);
      uint64_t v128 = v172;
      uint64_t v129 = v127(v172, v64, v45);
      uint64_t v130 = (os_log_s *)Logger.logObject.getter(v129);
      os_log_type_t v131 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v130, v131))
      {
        uint64_t v132 = swift_slowAlloc(22LL, -1LL);
        uint64_t v133 = swift_slowAlloc(32LL, -1LL);
        v187[0] = v133;
        *(_DWORD *)uint64_t v132 = 134218242;
        uint64_t v134 = *((void *)v126 + 5);
        uint64_t v135 = v126;
        uint64_t v136 = v176;
        v176(v135, v183);
        uint64_t v186 = v134;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187);
        *(_WORD *)(v132 + 12) = 2080;
        uint64_t v137 = *(unsigned int *)(v128 + 34);
        uint64_t v138 = v128;
        uint64_t v139 = *((unsigned __int16 *)v128 + 16);
        v136(v138, v183);
        uint64_t v140 = WiFiAddress.description.getter(v139 | (v137 << 16));
        unint64_t v142 = v141;
        uint64_t v186 = sub_10000235C(v140, v141, v187);
        uint64_t v45 = v183;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187);
        swift_bridgeObjectRelease(v142);
        _os_log_impl( (void *)&_mh_execute_header,  v130,  v131,  "Retry #%ld transmission of out of band action frame to %s",  (uint8_t *)v132,  0x16u);
        swift_arrayDestroy(v133, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v133, -1LL, -1LL);
        uint64_t v143 = v132;
        uint64_t v64 = (unsigned __int8 *)v179;
        swift_slowDealloc(v143, -1LL, -1LL);
      }

      else
      {
        uint64_t v156 = v176;
        v176(v128, v45);
        v156(v126, v45);
      }

      sub_1002CC904(v64);
      uint64_t v158 = v64;
      goto LABEL_39;
    }

    uint64_t v102 = *(void *)(v38 + *(void *)(*(void *)v38 + 120LL));
    swift_unownedRetainStrong(v102);
    sub_1002EAA14(v101);
    swift_release(v102);
    uint64_t v103 = (uint64_t)v173;
    uint64_t v104 = v174;
    *uint64_t v173 = 10LL;
    uint64_t v105 = enum case for DispatchTimeInterval.seconds(_:);
    uint64_t v106 = (void (*)(uint64_t, uint64_t, uint64_t))*((void *)v104 + 13);
    uint64_t v107 = v175;
    v106(v103, enum case for DispatchTimeInterval.seconds(_:), v175);
    LOBYTE(v102) = static DispatchTimeInterval.< infix(_:_:)(v101, v103);
    int v108 = (void (*)(uint64_t, uint64_t))*((void *)v104 + 1);
    v108(v103, v107);
    v108(v101, v107);
    unsigned int v109 = v171;
    int v110 = (void (*)(char *, char *, uint64_t))v161;
    v161(v171, (unsigned __int8 *)v179, v45);
    if ((v102 & 1) != 0)
    {
      char v111 = v109[38];
      v176(v109, v45);
      if ((v111 & 1) != 0)
      {
        unint64_t v177 = (char *)type metadata accessor for P2PTimer(0LL);
        uint64_t v112 = (uint64_t)v178;
        *uint64_t v178 = 2LL;
        v106(v112, v105, v107);
        uint64_t v113 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
        uint64_t v114 = swift_allocObject(&unk_1003F9CE0, 24LL, 7LL);
        swift_weakInit(v114 + 16, v185);
        __n128 v115 = v164;
        v110(v164, v179, v183);
        unint64_t v174 = v108;
        uint64_t v116 = v184;
        uint64_t v117 = *(unsigned __int8 *)(v184 + 80);
        uint64_t v118 = (v117 + 40) & ~v117;
        uint64_t v119 = (char *)swift_allocObject(&unk_1003F9D08, v118 + v15, v117 | 7);
        uint64_t v120 = v165;
        *((void *)v119 + 2) = v166;
        *((void *)v119 + 3) = v120;
        *((void *)v119 + 4) = v114;
        v162(&v119[v118], v115, v183);
        id v121 = v113;
        uint64_t v45 = v183;
        id v122 = v121;
        swift_retain();
        static P2PTimer.async(after:on:execute:)(v112, v122, (uint64_t)sub_1002CEE60, (uint64_t)v119);

        swift_release(v119);
        v174(v112, v175);
        uint64_t v123 = v114;
        uint64_t v64 = (unsigned __int8 *)v179;
        swift_release(v123);
LABEL_37:
        uint64_t v157 = (uint64_t)v180;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v116 + 56))(v180, 1LL, 1LL, v45);
        sub_1002CED18(v157);
        (*(void (**)(uint64_t, uint64_t))(v181 + 8))(v157, v182);
        goto LABEL_38;
      }
    }

    else
    {
      v176(v109, v45);
    }

    unint64_t v144 = v168;
    uint64_t v64 = (unsigned __int8 *)v179;
    uint64_t v145 = ((uint64_t (*)(char *, char *, uint64_t))v110)(v168, v179, v45);
    uint64_t v146 = (os_log_s *)Logger.logObject.getter(v145);
    os_log_type_t v147 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v146, v147))
    {
      uint64_t v148 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v149 = swift_slowAlloc(32LL, -1LL);
      v187[0] = v149;
      *(_DWORD *)uint64_t v148 = 136315138;
      uint64_t v150 = *(unsigned int *)(v144 + 34);
      uint64_t v151 = *((unsigned __int16 *)v144 + 16);
      v176(v144, v183);
      uint64_t v152 = WiFiAddress.description.getter(v151 | (v150 << 16));
      unint64_t v154 = v153;
      uint64_t v186 = sub_10000235C(v152, v153, v187);
      uint64_t v45 = v183;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187);
      swift_bridgeObjectRelease(v154);
      _os_log_impl( (void *)&_mh_execute_header,  v146,  v147,  "Exceeded retries while transmitting out of band action frame to %s",  v148,  0xCu);
      swift_arrayDestroy(v149, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v149, -1LL, -1LL);
      uint64_t v155 = v148;
      uint64_t v64 = (unsigned __int8 *)v179;
      swift_slowDealloc(v155, -1LL, -1LL);
    }

    else
    {
      v176(v144, v45);
    }

    uint64_t v116 = v184;
    goto LABEL_37;
  }

  uint64_t v86 = v176;
  uint64_t v87 = v65((char *)v176, v64, v45);
  uint64_t v88 = (os_log_s *)Logger.logObject.getter(v87);
  os_log_type_t v89 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v88, v89))
  {
    uint64_t v90 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v91 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v90 = 136315138;
    v187[0] = v91;
    uint64_t v92 = *(unsigned int *)((char *)v86 + 34);
    uint64_t v93 = *(void (**)(char *, uint64_t))(v184 + 8);
    uint64_t v94 = (char *)v86;
    uint64_t v95 = *((unsigned __int16 *)v86 + 16);
    v93(v94, v183);
    uint64_t v96 = WiFiAddress.description.getter(v95 | (v92 << 16));
    unint64_t v98 = v97;
    uint64_t v186 = sub_10000235C(v96, v97, v187);
    uint64_t v45 = v183;
    uint64_t v44 = v184;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187);
    swift_bridgeObjectRelease(v98);
    _os_log_impl( (void *)&_mh_execute_header,  v88,  v89,  "Successfully transmitted out of band action frame to %s",  v90,  0xCu);
    swift_arrayDestroy(v91, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v91, -1LL, -1LL);
    unint64_t v99 = v90;
    uint64_t v64 = (unsigned __int8 *)v179;
    swift_slowDealloc(v99, -1LL, -1LL);
  }

  else
  {
    uint64_t v93 = *(void (**)(char *, uint64_t))(v44 + 8);
    v93((char *)v86, v45);
  }

  uint64_t v125 = (uint64_t)v180;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56))(v180, 1LL, 1LL, v45);
  sub_1002CED18(v125);
  (*(void (**)(uint64_t, uint64_t))(v181 + 8))(v125, v182);
  v93((char *)v64, v45);
  uint64_t v50 = (uint64_t)v163;
  return sub_10005802C(v50, type metadata accessor for DriverEvent);
}

uint64_t sub_1002CE0D4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = swift_weakLoadStrong(a1 + 16);
  if (result)
  {
    uint64_t v7 = result;
    sub_1002CB9AC( *a2,  *((void *)a2 + 1),  *((void *)a2 + 2),  *((void *)a2 + 3),  *((unsigned __int16 *)a2 + 16) | ((unint64_t)*(unsigned int *)(a2 + 34) << 16),  0);
    return swift_release(v7);
  }

  return result;
}

uint64_t sub_1002CE3C0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for NANPeer(0LL);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(v1 + *(void *)(*(void *)v1 + 120LL));
  swift_unownedRetainStrong(v6);
  uint64_t v7 = *(void *)(v6 + *(void *)(*(void *)v6 + 688LL));
  swift_unownedRetainStrong(v7);
  swift_release(v6);
  __int16 v8 = sub_1002CFCAC();
  swift_release(v7);
  uint64_t v9 = CountryCode.unknown.unsafeMutableAddressor();
  if (*(unsigned __int8 *)v9 != v8 || *((unsigned __int8 *)v9 + 1) != HIBYTE(v8))
  {
    swift_unownedRetainStrong(v6);
    uint64_t v11 = WiFiInterface.capabilities.getter();
    swift_release(v6);
    uint64_t v12 = *WiFiDriverCapabilities.supportsDualBand.unsafeMutableAddressor();
    uint64_t v19 = v11;
    uint64_t v20 = v12;
    unint64_t v13 = sub_100270384();
    swift_bridgeObjectRetain_n(v12, 2LL);
    ExtendableOptionSet.formIntersection(_:)( (uint64_t (*)(_BYTE *, void))&v19,  &type metadata for WiFiDriverCapabilities.Kind,  v13);
    uint64_t v14 = v20;
    LOBYTE(v13) = sub_10007990C(v20, v12);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v14);
    if ((v13 & 1) != 0)
    {
      swift_unownedRetainStrong(v6);
      sub_1002EA528(a1 & 0xFFFFFFFFFFFFLL, (uint64_t)v5);
      swift_release(v6);
      uint64_t v15 = &v5[*(int *)(v3 + 52)];
      if ((v15[11] & 1) != 0
        || (int v16 = v15[4],
            (*(unsigned __int8 *)NANBitmap.Band.ghz_4_9_to_5_0.unsafeMutableAddressor() & ~v16) != 0))
      {
        sub_10005802C((uint64_t)v5, type metadata accessor for NANPeer);
      }

      else
      {
        int v17 = *(unsigned __int8 *)NANBitmap.Band.ghz2_4.unsafeMutableAddressor() & ~v16;
        sub_10005802C((uint64_t)v5, type metadata accessor for NANPeer);
        if (!v17) {
          return 1LL;
        }
      }
    }
  }

  return 0LL;
}

uint64_t *sub_1002CE594()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (uint64_t)v0 + qword_100410BD8;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  swift_bridgeObjectRelease(*(uint64_t *)((char *)v0 + qword_10040F2D0));
  uint64_t v4 = (uint64_t)v0 + *(void *)(*v0 + 112);
  uint64_t v6 = type metadata accessor for NANOutOfBoundActionFrameTransmitter.InFlightActionFrame( 255LL,  *(void *)(v1 + 80),  *(void *)(v1 + 88),  v5);
  uint64_t v7 = type metadata accessor for Optional(0LL, v6);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v4, v7);
  swift_unownedRelease(*(uint64_t *)((char *)v0 + *(void *)(*v0 + 120)));
  return v0;
}

uint64_t sub_1002CE63C()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for NANOutOfBoundActionFrameTransmitter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NANOutOfBoundActionFrameTransmitter);
}

uint64_t type metadata accessor for NANOutOfBoundActionFrameTransmitter.InFlightActionFrame( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for NANOutOfBoundActionFrameTransmitter.InFlightActionFrame);
}

uint64_t sub_1002CE678(uint64_t a1)
{
  v4[0] = " ";
  v4[1] = &unk_10035F9B0;
  void v4[2] = &unk_10035F9C8;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for DispatchTime(319LL);
  if (v3 <= 0x3F)
  {
    v4[4] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 0LL, 5LL, v4, a1 + 32);
    return 0LL;
  }

  return result;
}

_BYTE *sub_1002CE70C(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (_BYTE *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *a1 = *(_BYTE *)a2;
    uint64_t v7 = a2[1];
    uint64_t v8 = a2[2];
    uint64_t v9 = a2[3];
    sub_10005852C(v7, v8, v9);
    *((void *)v4 + 1) = v7;
    *((void *)v4 + 2) = v8;
    *((void *)v4 + 3) = v9;
    *((_DWORD *)v4 + 8) = *((_DWORD *)a2 + 8);
    *((_WORD *)v4 + 18) = *((_WORD *)a2 + 18);
    v4[38] = *((_BYTE *)a2 + 38);
    uint64_t v10 = a2[5];
    uint64_t v11 = *(int *)(a3 + 48);
    uint64_t v12 = &v4[v11];
    uint64_t v13 = (uint64_t)a2 + v11;
    *((void *)v4 + 5) = v10;
    uint64_t v14 = type metadata accessor for DispatchTime(0LL);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
  }

  return v4;
}

uint64_t sub_1002CE7E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 48);
  uint64_t v5 = type metadata accessor for DispatchTime(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t sub_1002CE830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  sub_10005852C(v6, v7, v8);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(int *)(a3 + 48);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(void *)(a1 + 40) = v9;
  uint64_t v13 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v12, v13);
  return a1;
}

uint64_t sub_1002CE8DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  sub_10005852C(v6, v7, v8);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  sub_100057AA0(v9, v10, v11);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v12 = *(int *)(a3 + 48);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24LL))(v13, v14, v15);
  return a1;
}

uint64_t sub_1002CE9B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
  uint64_t v5 = *(int *)(a3 + 48);
  uint64_t v6 = a2 + v5;
  uint64_t v7 = a1 + v5;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v8 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))(v7, v6, v8);
  return a1;
}

uint64_t sub_1002CEA30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v6;
  sub_100057AA0(v7, v8, v9);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v10 = *(int *)(a3 + 48);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40LL))(v11, v12, v13);
  return a1;
}

uint64_t sub_1002CEAD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002CEADC);
}

uint64_t sub_1002CEADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 32765)
  {
    HIDWORD(v5) = (*(_DWORD *)(a1 + 8) >> 17) & 0x1F80 | ((unsigned __int16)*(_DWORD *)(a1 + 8) >> 9);
    LODWORD(v5) = *(_DWORD *)(a1 + 8);
    int v4 = v5 >> 30;
    unsigned int v6 = v4 ^ 0x7FFF;
    unsigned int v7 = 0x8000 - v4;
    if (v6 >= 0x7FFD) {
      return 0LL;
    }
    else {
      return v7;
    }
  }

  else
  {
    uint64_t v11 = type metadata accessor for DispatchTime(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))( a1 + *(int *)(a3 + 48),  a2,  v11);
  }

uint64_t sub_1002CEB6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002CEB78);
}

char *sub_1002CEB78(char *result, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v5 = result;
  if (a3 == 32765)
  {
    *((void *)result + 2) = 0LL;
    *((void *)result + 3) = 0LL;
  }

  else
  {
    uint64_t v7 = type metadata accessor for DispatchTime(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 48)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t *sub_1002CEC0C(uint64_t a1)
{
  uint64_t v3 = *v1;
  Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xED00006E616E2E65LL,  0x7265766F63736964LL,  0xEF656E69676E4579LL);
  uint64_t v4 = qword_10040F2D0;
  uint64_t v6 = type metadata accessor for NANOutOfBoundActionFrameTransmitter.InFlightActionFrame( 0LL,  *(void *)(v3 + 80),  *(void *)(v3 + 88),  v5);
  *(uint64_t *)((char *)v1 + v4) = Array.init()(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))( (uint64_t)v1 + *(void *)(*v1 + 112),  1LL,  1LL,  v6);
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 120)) = a1;
  swift_unownedRetain(a1);
  return v1;
}

uint64_t *sub_1002CECE0(uint64_t a1)
{
  return sub_1002CEC0C(a1);
}

uint64_t sub_1002CED18(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 112);
  swift_beginAccess(v4, v13, 33LL, 0LL);
  uint64_t v6 = type metadata accessor for NANOutOfBoundActionFrameTransmitter.InFlightActionFrame( 255LL,  *(void *)(v3 + 80),  *(void *)(v3 + 88),  v5);
  uint64_t v7 = type metadata accessor for Optional(0LL, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24LL))(v4, a1, v7);
  uint64_t v8 = swift_endAccess(v13);
  return sub_1002CC340(v8, v9, v10, v11);
}

uint64_t sub_1002CEDA0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002CEDC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for NANOutOfBoundActionFrameTransmitter.InFlightActionFrame(0LL, v4[2], v4[3], a4);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 + 40) & ~v7;
  uint64_t v9 = v8 + *(void *)(v6 + 64);
  uint64_t v10 = v7 | 7;
  swift_release(v4[4]);
  uint64_t v11 = (uint64_t *)((char *)v4 + v8);
  sub_100057AA0(v11[1], v11[2], v11[3]);
  uint64_t v12 = (char *)v11 + *(int *)(v5 + 48);
  uint64_t v13 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8LL))(v12, v13);
  return swift_deallocObject(v4, v9, v10);
}

uint64_t sub_1002CEE60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *((void *)v4 + 2);
  uint64_t v6 = *((void *)v4 + 3);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(type metadata accessor for NANOutOfBoundActionFrameTransmitter.InFlightActionFrame( 0LL,  v5,  v6,  a4)
                                      - 8)
                          + 80LL);
  return sub_1002CE0D4(*((void *)v4 + 4), &v4[(v7 + 40) & ~v7], v5, v6);
}

void sub_1002CEEB4(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v27[0] = *(void *)(v2 - 8) + 64LL;
    v27[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    sub_1002D4C98( 319LL,  &qword_10040F460,  (uint64_t)&type metadata for Bool,  (uint64_t)&protocol witness table for Bool,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ObservableWiFiProperty);
    if (v5 <= 0x3F)
    {
      uint64_t v6 = *(void *)(v4 - 8) + 64LL;
      v27[2] = v6;
      sub_1002D4AF4(319LL, &qword_10040F468, &qword_10040F470, &qword_10040F478, (void (*)(void))sub_100062580);
      if (v8 <= 0x3F)
      {
        v27[3] = *(void *)(v7 - 8) + 64LL;
        sub_1002D4B7C( 319LL,  &qword_10040F480,  (uint64_t (*)(void))sub_1000625C8,  (uint64_t)&type metadata for AutoJoinState,  (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ObservableWiFiProperty);
        if (v10 <= 0x3F)
        {
          uint64_t v27[4] = *(void *)(v9 - 8) + 64LL;
          sub_10022AFF4(319LL);
          if (v12 <= 0x3F)
          {
            uint64_t v13 = *(void *)(v11 - 8) + 64LL;
            v27[5] = v13;
            uint64_t v14 = type metadata accessor for DispatchTimeInterval(319LL);
            if (v15 <= 0x3F)
            {
              uint64_t v16 = *(void *)(v14 - 8) + 64LL;
              v27[6] = v16;
              v27[7] = "\b";
              sub_1002D4AF4( 319LL,  &qword_10040F488,  (uint64_t *)&unk_10040FD40,  &qword_10040F490,  (void (*)(void))sub_1001894A8);
              if (v18 <= 0x3F)
              {
                v27[8] = *(void *)(v17 - 8) + 64LL;
                v27[9] = v13;
                v27[10] = v16;
                v27[11] = "\b";
                v27[12] = v6;
                sub_1002D4B7C( 319LL,  &qword_10040F498,  (uint64_t (*)(void))sub_100125C18,  (uint64_t)&type metadata for CountryCode,  (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ObservableWiFiProperty);
                if (v20 <= 0x3F)
                {
                  v27[13] = *(void *)(v19 - 8) + 64LL;
                  sub_1002D4BD8(319LL);
                  if (v22 <= 0x3F)
                  {
                    v27[14] = *(void *)(v21 - 8) + 64LL;
                    sub_1002D4AF4( 319LL,  &qword_10040F4B0,  &qword_10040F4B8,  &qword_10040F4C0,  (void (*)(void))sub_10019F8EC);
                    if (v24 <= 0x3F)
                    {
                      v27[15] = *(void *)(v23 - 8) + 64LL;
                      sub_1002D4C98( 319LL,  &qword_10040F4C8,  (uint64_t)&type metadata for InfrastructureRadioConstraints,  (uint64_t)&off_1003F9E70,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for RadioConstraint);
                      if (v26 <= 0x3F)
                      {
                        _BYTE v27[16] = *(void *)(v25 - 8) + 64LL;
                        v27[17] = (char *)&value witness table for Builtin.Int64 + 64;
                        v27[18] = (char *)&value witness table for Builtin.Int64 + 64;
                        v27[19] = (char *)&value witness table for Builtin.Int64 + 64;
                        v27[20] = (char *)&value witness table for Builtin.Int64 + 64;
                        v27[21] = &unk_10035FA58;
                        swift_initClassMetadata2(a1, 0LL, 22LL, v27, a1 + 424);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

uint64_t sub_1002CF17C()
{
  uint64_t v1 = sub_100002274((uint64_t *)&unk_100410500);
  __chkstk_darwin();
  unint64_t v3 = &v7[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v4 = v0 + *(void *)(*(void *)v0 + 440LL);
  swift_beginAccess(v4, v7, 0LL, 0LL);
  sub_1000226B0(v4, (uint64_t)v3, (uint64_t *)&unk_100410500);
  ObservableWiFiProperty.wrappedValue.getter(v1, (uint64_t)&v6 + 7);
  sub_1000225EC((uint64_t)v3, (uint64_t *)&unk_100410500);
  return HIBYTE(v6);
}

uint64_t sub_1002CF234(char a1)
{
  char v5 = a1;
  swift_beginAccess(v1 + *(void *)(*(void *)v1 + 440LL), v4, 33LL, 0LL);
  uint64_t v2 = sub_100002274((uint64_t *)&unk_100410500);
  ObservableWiFiProperty.wrappedValue.setter(&v5, v2);
  return swift_endAccess(v4);
}

uint64_t sub_1002CF298@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 440LL);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_1000226B0(v3, a1, (uint64_t *)&unk_100410500);
}

uint64_t sub_1002CF2F0()
{
  uint64_t v1 = sub_100002274(&qword_10040DA58);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = v0 + *(void *)(*(void *)v0 + 448LL);
  swift_beginAccess(v4, v8, 0LL, 0LL);
  sub_1000226B0(v4, (uint64_t)v3, &qword_10040DA58);
  ObservableWiFiProperty.wrappedValue.getter(v1, (uint64_t)&v7);
  sub_1000225EC((uint64_t)v3, &qword_10040DA58);
  return v7;
}

uint64_t sub_1002CF3B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[0] = a1;
  v8[1] = a2;
  _OWORD v8[2] = a3;
  int v9 = a4;
  __int16 v10 = WORD2(a4);
  swift_beginAccess(v4 + *(void *)(*(void *)v4 + 448LL), v7, 33LL, 0LL);
  uint64_t v5 = sub_100002274(&qword_10040DA58);
  ObservableWiFiProperty.wrappedValue.setter((char *)v8, v5);
  return swift_endAccess(v7);
}

uint64_t sub_1002CF42C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 448LL);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_1000226B0(v3, a1, &qword_10040DA58);
}

uint64_t sub_1002CF484(char a1)
{
  char v5 = a1 & 1;
  swift_beginAccess(v1 + *(void *)(*(void *)v1 + 456LL), v4, 33LL, 0LL);
  uint64_t v2 = sub_100002274(qword_10040FC40);
  ObservableWiFiProperty.wrappedValue.setter(&v5, v2);
  return swift_endAccess(v4);
}

uint64_t sub_1002CF4EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 456LL);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_1000226B0(v3, a1, qword_10040FC40);
}

unint64_t sub_1002CF544(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002274(&qword_10040F4D8);
  __chkstk_darwin();
  uint64_t v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_100002274(&qword_100405D40);
  __chkstk_darwin();
  unint64_t v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin();
  __int16 v10 = &v21[-v9 - 8];
  unint64_t result = sub_1002CF848();
  uint64_t v12 = a1 & 0xFF00000000LL;
  if ((result & 0xFF00000000LL) == 0x300000000LL)
  {
    if (v12 == 0x300000000LL) {
      return result;
    }
    goto LABEL_20;
  }

  if (v12 == 0x300000000LL
    || (_DWORD)result != (_DWORD)a1
    || ((0x801004u >> ((result >> 29) & 0xF8)) & 0xFFC) != ((0x801004u >> ((a1 >> 29) & 0xF8)) & 0xFFC))
  {
LABEL_20:
    if ((sub_1002CF848() & 0xFF00000000LL) == 0x300000000LL)
    {
      uint64_t v13 = type metadata accessor for DispatchTime(0LL);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v10, 1LL, 1LL, v13);
      uint64_t v14 = v1 + *(void *)(*(void *)v1 + 464LL);
      swift_beginAccess(v2 + *(void *)(*(void *)v2 + 464LL), v21, 33LL, 0LL);
      uint64_t v15 = (uint64_t)v10;
    }

    else
    {
      type metadata accessor for P2PTimer(0LL);
      variable initialization expression of AWDLPeer.lastUpdated();
      uint64_t v16 = type metadata accessor for DispatchTime(0LL);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v10, 0LL, 1LL, v16);
      sub_1000586C0((uint64_t)v10, (uint64_t)v8, &qword_100405D40);
      uint64_t v14 = v1 + *(void *)(*(void *)v1 + 464LL);
      swift_beginAccess(v2 + *(void *)(*(void *)v2 + 464LL), v21, 33LL, 0LL);
      uint64_t v15 = (uint64_t)v8;
    }

    sub_10022B968(v15, v14);
    swift_endAccess(v21);
    unint64_t v17 = sub_1002CF848();
    uint64_t v18 = v2 + *(void *)(*(void *)v2 + 552LL);
    swift_beginAccess(v18, v21, 0LL, 0LL);
    sub_1000226B0(v18, (uint64_t)v6, &qword_10040F4D8);
    uint64_t v19 = &v6[*(int *)(v4 + 36)];
    *((_WORD *)v19 + 10) = WORD2(v17);
    *((_DWORD *)v19 + 4) = v17;
    return sub_1002D04DC((uint64_t)v6);
  }

  switch(BYTE5(result))
  {
    case 2:
      if (BYTE5(a1) != 2) {
        goto LABEL_20;
      }
      break;
    case 3:
      if (BYTE5(a1) != 3) {
        goto LABEL_20;
      }
      break;
    case 4:
      if (BYTE5(a1) != 4) {
        goto LABEL_20;
      }
      break;
    case 5:
      if (BYTE5(a1) != 5) {
        goto LABEL_20;
      }
      break;
    case 6:
      if (BYTE5(a1) != 6) {
        goto LABEL_20;
      }
      break;
    default:
      break;
  }

  return result;
}

unint64_t sub_1002CF848()
{
  uint64_t v1 = sub_100002274(&qword_10040F500);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = v0 + *(void *)(*(void *)v0 + 488LL);
  swift_beginAccess(v4, v8, 0LL, 0LL);
  sub_1000226B0(v4, (uint64_t)v3, &qword_10040F500);
  ObservableWiFiProperty.wrappedValue.getter(v1, (uint64_t)&v6);
  sub_1000225EC((uint64_t)v3, &qword_10040F500);
  return v6 | ((unint64_t)v7 << 32);
}

unint64_t sub_1002CF908(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 488LL);
  swift_beginAccess(v3, v9, 32LL, 0LL);
  uint64_t v4 = sub_100002274(&qword_10040F500);
  ObservableWiFiProperty.wrappedValue.getter(v4, (uint64_t)&v7);
  unint64_t v5 = v7 | ((unint64_t)v8 << 32);
  swift_endAccess(v9);
  unsigned __int16 v8 = WORD2(a1);
  unsigned int v7 = a1;
  swift_beginAccess(v3, v9, 33LL, 0LL);
  ObservableWiFiProperty.wrappedValue.setter((char *)&v7, v4);
  swift_endAccess(v9);
  return sub_1002CF544(v5);
}

uint64_t sub_1002CF9CC(char a1)
{
  int v2 = a1 & 1;
  sub_100002274(&qword_100405D40);
  __chkstk_darwin();
  uint64_t v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin();
  unsigned int v6 = &v13[-v5 - 8];
  uint64_t result = sub_1002CFB40();
  if ((result & 1) != v2)
  {
    if ((sub_1002CFB40() & 1) != 0)
    {
      type metadata accessor for P2PTimer(0LL);
      variable initialization expression of AWDLPeer.lastUpdated();
      uint64_t v8 = type metadata accessor for DispatchTime(0LL);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v6, 0LL, 1LL, v8);
      sub_1000586C0((uint64_t)v6, (uint64_t)v4, &qword_100405D40);
      uint64_t v9 = v1 + *(void *)(*(void *)v1 + 496LL);
      swift_beginAccess(v9, v13, 33LL, 0LL);
      uint64_t v10 = (uint64_t)v4;
    }

    else
    {
      uint64_t v11 = type metadata accessor for DispatchTime(0LL);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v6, 1LL, 1LL, v11);
      uint64_t v9 = v1 + *(void *)(*(void *)v1 + 496LL);
      swift_beginAccess(v9, v13, 33LL, 0LL);
      uint64_t v10 = (uint64_t)v6;
    }

    sub_10022B968(v10, v9);
    return swift_endAccess(v13);
  }

  return result;
}

uint64_t sub_1002CFB40()
{
  uint64_t v1 = sub_100002274((uint64_t *)&unk_100410500);
  __chkstk_darwin();
  uint64_t v3 = &v7[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v4 = v0 + *(void *)(*(void *)v0 + 520LL);
  swift_beginAccess(v4, v7, 0LL, 0LL);
  sub_1000226B0(v4, (uint64_t)v3, (uint64_t *)&unk_100410500);
  ObservableWiFiProperty.wrappedValue.getter(v1, (uint64_t)&v6 + 7);
  sub_1000225EC((uint64_t)v3, (uint64_t *)&unk_100410500);
  return HIBYTE(v6);
}

uint64_t sub_1002CFBF8(char a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 520LL);
  swift_beginAccess(v3, v8, 32LL, 0LL);
  uint64_t v4 = sub_100002274((uint64_t *)&unk_100410500);
  ObservableWiFiProperty.wrappedValue.getter(v4, (uint64_t)&v7);
  char v5 = v7;
  swift_endAccess(v8);
  char v7 = a1;
  swift_beginAccess(v3, v8, 33LL, 0LL);
  ObservableWiFiProperty.wrappedValue.setter(&v7, v4);
  swift_endAccess(v8);
  return sub_1002CF9CC(v5);
}

uint64_t sub_1002CFCAC()
{
  uint64_t v1 = sub_100002274((uint64_t *)&unk_10040FED0);
  __chkstk_darwin();
  uint64_t v3 = &v7[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v4 = v0 + *(void *)(*(void *)v0 + 528LL);
  swift_beginAccess(v4, v7, 0LL, 0LL);
  sub_1000226B0(v4, (uint64_t)v3, (uint64_t *)&unk_10040FED0);
  ObservableWiFiProperty.wrappedValue.getter(v1, (uint64_t)&v6 + 6);
  sub_1000225EC((uint64_t)v3, (uint64_t *)&unk_10040FED0);
  return HIWORD(v6);
}

uint64_t sub_1002CFD64(__int16 a1)
{
  __int16 v5 = a1;
  swift_beginAccess(v1 + *(void *)(*(void *)v1 + 528LL), v4, 33LL, 0LL);
  uint64_t v2 = sub_100002274((uint64_t *)&unk_10040FED0);
  ObservableWiFiProperty.wrappedValue.setter((char *)&v5, v2);
  return swift_endAccess(v4);
}

uint64_t sub_1002CFDC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 528LL);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_1000226B0(v3, a1, (uint64_t *)&unk_10040FED0);
}

uint64_t sub_1002CFE20(uint64_t a1, uint64_t a2)
{
  v6[0] = a1;
  v6[1] = a2;
  swift_beginAccess(v2 + *(void *)(*(void *)v2 + 536LL), v5, 33LL, 0LL);
  uint64_t v3 = sub_100002274((uint64_t *)&unk_10040FC20);
  ObservableWiFiProperty.wrappedValue.setter((char *)v6, v3);
  return swift_endAccess(v5);
}

uint64_t sub_1002CFE84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 536LL);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_1000226B0(v3, a1, (uint64_t *)&unk_10040FC20);
}

uint64_t sub_1002CFEDC(uint64_t a1)
{
  uint64_t v39 = a1;
  uint64_t v2 = *v1;
  uint64_t v42 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v45 = *(void *)(v42 - 8);
  __chkstk_darwin();
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  __chkstk_darwin();
  __n128 v40 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = *(void *)(sub_100002274(&qword_10040F4D8) - 8);
  uint64_t v6 = *(void *)(v36 + 64);
  __chkstk_darwin();
  char v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v35 - v8;
  uint64_t v10 = *(void *)(v2 + 408);
  uint64_t v37 = *(void *)(v2 + 416);
  uint64_t v35 = v10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v37 + 8),  v10,  &protocol requirements base descriptor for P2PControls);
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v35 - v14;
  id v38 = (id)*OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v16 = (uint64_t)v1 + *(void *)(*v1 + 112);
  uint64_t v17 = (uint64_t)v1 + *(void *)(*v1 + 552);
  __n128 v18 = swift_beginAccess(v17, v49, 0LL, 0LL);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))(v15, v16, AssociatedTypeWitness, v18);
  sub_1000226B0(v39, (uint64_t)v9, &qword_10040F4D8);
  sub_1000226B0(v17, (uint64_t)v7, &qword_10040F4D8);
  uint64_t v19 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v20 = (v19 + 32) & ~v19;
  uint64_t v21 = *(unsigned __int8 *)(v36 + 80);
  uint64_t v22 = (v13 + v21 + v20) & ~v21;
  uint64_t v23 = (v6 + v21 + v22) & ~v21;
  uint64_t v24 = swift_allocObject(&unk_1003FA110, v23 + v6, v19 | v21 | 7);
  uint64_t v25 = v37;
  *(void *)(v24 + swift_weakDestroy(v0 + 16) = v35;
  *(void *)(v24 + 24) = v25;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v24 + v20, v15, AssociatedTypeWitness);
  sub_1000586C0((uint64_t)v9, v24 + v22, &qword_10040F4D8);
  sub_1000586C0((uint64_t)v7, v24 + v23, &qword_10040F4D8);
  aBlock[4] = sub_1002D7400;
  uint64_t v48 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000021F0;
  aBlock[3] = &unk_1003FA128;
  unint64_t v26 = _Block_copy(aBlock);
  id v27 = v38;
  uint64_t v28 = v40;
  static DispatchQoS.unspecified.getter(v27);
  uint64_t v46 = _swiftEmptyArrayStorage;
  unint64_t v29 = sub_100002234();
  uint64_t v30 = sub_100002274((uint64_t *)&unk_1004052A0);
  uint64_t v31 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
  unint64_t v33 = v41;
  uint64_t v32 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v30, v31, v42, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v28, v33, v26);
  _Block_release(v26);

  (*(void (**)(char *, uint64_t))(v45 + 8))(v33, v32);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v28, v44);
  return swift_release(v48);
}

uint64_t sub_1002D025C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v28 = a3;
  sub_100002274(&qword_10040F4E0);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v27 - v10;
  uint64_t v12 = *(void *)(a5 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v12,  a4,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v12,  a4,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v15 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin();
  __n128 v18 = (char *)&v27 - v17;
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 104);
  uint64_t v20 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  v19(v20, AssociatedConformanceWitness);
  sub_1000226B0(a2, (uint64_t)v11, &qword_10040F4D8);
  uint64_t v21 = sub_100002274(&qword_10040F4D8);
  uint64_t v22 = *(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL);
  v22(v11, 0LL, 1LL, v21);
  sub_1000226B0(v28, (uint64_t)v9, &qword_10040F4D8);
  v22(v9, 0LL, 1LL, v21);
  uint64_t v23 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  v20,  v15,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.RadioManager: RadioResourceControls);
  uint64_t v24 = sub_100087780(&qword_10040F4E8, &qword_10040F4D8, (void (*)(void))sub_1002D74A4, (uint64_t)&unk_10035E7A0);
  uint64_t v25 = sub_1000572E4(&qword_10040F4F8, &qword_10040F4D8, (uint64_t)&unk_10035E698);
  RadioResourceControls.update<A>(from:to:)((uint64_t)v11, (uint64_t)v9, v15, v21, v23, (uint64_t)&off_1003F4AC8, v24, v25);
  sub_1000225EC((uint64_t)v9, &qword_10040F4E0);
  sub_1000225EC((uint64_t)v11, &qword_10040F4E0);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t sub_1002D04DC(uint64_t a1)
{
  uint64_t v4 = &v7[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = v1 + *(void *)(*(void *)v1 + 552LL);
  swift_beginAccess(v5, v8, 0LL, 0LL);
  sub_1000226B0(v5, (uint64_t)v4, &qword_10040F4D8);
  swift_beginAccess(v5, v7, 33LL, 0LL);
  sub_1002D72C8(a1, v5);
  swift_endAccess(v7);
  sub_1002CFEDC((uint64_t)v4);
  sub_1000225EC(a1, &qword_10040F4D8);
  return sub_1000225EC((uint64_t)v4, &qword_10040F4D8);
}

uint64_t (*sub_1002D05C4(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a3 + 8),  a2,  &protocol requirements base descriptor for P2PControls);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v15 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v15 - v9, a1, AssociatedTypeWitness);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_1003FA1D8, v12 + v8, v11 | 7);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + v12, v10, AssociatedTypeWitness);
  return sub_1002D7658;
}

uint64_t sub_1002D06B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(a4 + 8),  a3,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a4,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for InfrastructureController,  &associated conformance descriptor for InfrastructureController.P2PControls.Driver: InfrastructureWiFiDriver);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 104);
  uint64_t v10 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  return v9(a1, v10, AssociatedConformanceWitness);
}

uint64_t sub_1002D0760(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1) {
    return WiFiNetwork.description.getter( *(void *)a1,  v1,  *(void *)(a1 + 16) & 0xFFFFFFFFFFFFLL,  *(unsigned int *)(a1 + 24) | ((unint64_t)*(unsigned __int16 *)(a1 + 28) << 32));
  }
  else {
    return 0x6F73736120746F6ELL;
  }
}

uint64_t sub_1002D07BC(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  if (v2) {
    uint64_t v3 = *a1;
  }
  else {
    uint64_t v3 = 1701736302LL;
  }
  swift_bridgeObjectRetain(v2);
  return v3;
}

uint64_t sub_1002D0804(unsigned int *a1)
{
  unint64_t v1 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
  if ((v1 & 0xFF00000000LL) == 0x300000000LL) {
    return 1701736302LL;
  }
  else {
    return Channel.description.getter(v1);
  }
}

void sub_1002D0848(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (uint64_t *)((char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v11 = (void *)*v10;
  *uint64_t v9 = *v10;
  (*(void (**)(uint64_t *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
  if ((v11 & 1) != 0)
  {
    uint64_t v13 = a2 + 16;
    swift_beginAccess(v13, v27, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v13);
    if (Strong)
    {
      uint64_t v15 = Strong;
      sub_1002D0F4C(a1);
      swift_release(v15);
    }

    else
    {
      uint64_t v16 = sub_1000E77F4(a1, (uint64_t)v5);
      uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
      os_log_type_t v18 = static os_log_type_t.error.getter(v17);
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v20 = swift_slowAlloc(32LL, -1LL);
        uint64_t v26 = v20;
        *(_DWORD *)uint64_t v19 = 136315138;
        DriverEvent.shortDescription.getter();
        unint64_t v22 = v21;
        uint64_t v25 = sub_10000235C(v23, v21, &v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
        swift_bridgeObjectRelease(v22);
        sub_1000E7838((uint64_t)v5);
        _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Failed to dispatch event %s because the InfrastructureWiFiInterface was deallocated before the event was recei ved from the driver",  v19,  0xCu);
        swift_arrayDestroy(v20, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v20, -1LL, -1LL);
        swift_slowDealloc(v19, -1LL, -1LL);
      }

      else
      {

        sub_1000E7838((uint64_t)v5);
      }
    }
  }

  else
  {
    __break(1u);
  }

double sub_1002D0AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v9, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    uint64_t v8 = Strong;
    swift_bridgeObjectRetain(a2);
    sub_1002CFE20(a1, a2);
    *(void *)&double result = swift_release(v8).n128_u64[0];
  }

  return result;
}

uint64_t sub_1002D0B18()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 472LL);
  uint64_t v2 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL);
  v3(v1, v2);
  swift_release(*(void *)(v0 + *(void *)(*(void *)v0 + 480LL)));
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 488LL), &qword_10040F500);
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 496LL), &qword_100405D40);
  v3(v0 + *(void *)(*(void *)v0 + 504LL), v2);
  swift_release(*(void *)(v0 + *(void *)(*(void *)v0 + 512LL)));
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 520LL), (uint64_t *)&unk_100410500);
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 528LL), (uint64_t *)&unk_10040FED0);
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 536LL), (uint64_t *)&unk_10040FC20);
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 544LL), (uint64_t *)&unk_10040F510);
  return sub_1000225EC(v0 + *(void *)(*(void *)v0 + 552LL), &qword_10040F4D8);
}

uint64_t sub_1002D0CD0()
{
  uint64_t v2 = *(void *)(*(void *)v0 + 408LL);
  uint64_t v1 = *(void *)(*(void *)v0 + 416LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(v1 + 8),  v2,  &protocol requirements base descriptor for P2PControls);
  uint64_t v4 = *(void *)(swift_getAssociatedConformanceWitness( v1,  v2,  AssociatedTypeWitness,  &protocol requirements base descriptor for InfrastructureController,  &associated conformance descriptor for InfrastructureController.P2PControls.Driver: InfrastructureWiFiDriver)
                 + 8);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 16);
  uint64_t v6 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  v5(v6, v4);
  (*(void (**)(uint64_t, uint64_t))(v4 + 48))(v6, v4);
  uint64_t v7 = WiFiInterface.deinit();
  sub_1000225EC(v7 + *(void *)(*(void *)v7 + 424LL), &qword_10040F508);
  swift_release(*(void *)(v7 + *(void *)(*(void *)v7 + 432LL)));
  sub_1000225EC(v7 + *(void *)(*(void *)v7 + 440LL), (uint64_t *)&unk_100410500);
  sub_1000225EC(v7 + *(void *)(*(void *)v7 + 448LL), &qword_10040DA58);
  sub_1000225EC(v7 + *(void *)(*(void *)v7 + 456LL), qword_10040FC40);
  sub_1000225EC(v7 + *(void *)(*(void *)v7 + 464LL), &qword_100405D40);
  uint64_t v8 = v7 + *(void *)(*(void *)v7 + 472LL);
  uint64_t v9 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  swift_release(*(void *)(v7 + *(void *)(*(void *)v7 + 480LL)));
  sub_1000225EC(v7 + *(void *)(*(void *)v7 + 488LL), &qword_10040F500);
  sub_1000225EC(v7 + *(void *)(*(void *)v7 + 496LL), &qword_100405D40);
  v10(v7 + *(void *)(*(void *)v7 + 504LL), v9);
  swift_release(*(void *)(v7 + *(void *)(*(void *)v7 + 512LL)));
  sub_1000225EC(v7 + *(void *)(*(void *)v7 + 520LL), (uint64_t *)&unk_100410500);
  sub_1000225EC(v7 + *(void *)(*(void *)v7 + 528LL), (uint64_t *)&unk_10040FED0);
  sub_1000225EC(v7 + *(void *)(*(void *)v7 + 536LL), (uint64_t *)&unk_10040FC20);
  sub_1000225EC(v7 + *(void *)(*(void *)v7 + 544LL), (uint64_t *)&unk_10040F510);
  sub_1000225EC(v7 + *(void *)(*(void *)v7 + 552LL), &qword_10040F4D8);
  return v7;
}

uint64_t sub_1002D0F20()
{
  uint64_t v0 = sub_1002D0CD0();
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for InfrastructureWiFiInterface( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InfrastructureWiFiInterface);
}

void sub_1002D0F4C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DriverEvent(0LL);
  __chkstk_darwin();
  __chkstk_darwin();
  uint64_t v4 = &v6[-v3];
  sub_1000E77F4(a1, (uint64_t)&v6[-v3]);
  uint64_t v5 = (char *)sub_1002D1040 + 4 * byte_10035F9F5[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }

void sub_1002D1040()
{
  uint64_t v5 = swift_retain();
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    uint64_t v9 = swift_slowAlloc(64LL, -1LL);
    v0[1] = v9;
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v10 = WiFiInterface.description.getter();
    unint64_t v12 = v11;
    *uint64_t v0 = sub_10000235C(v10, v11, v0 + 1);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0, v0 + 1);
    swift_release(v1);
    swift_bridgeObjectRelease(v12);
    *(_WORD *)(v8 + 12) = 2080;
    DriverEvent.description.getter();
    unint64_t v14 = v13;
    *uint64_t v0 = sub_10000235C(v15, v13, v0 + 1);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0, v0 + 1);
    swift_bridgeObjectRelease(v14);
    sub_1000E7838(v2);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s received an unexpected %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2LL, &type metadata for Any[8]);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_release(v1);

    sub_1000E7838(v2);
  }

void sub_1002D1328()
{
  unsigned __int8 v6 = v0;
  swift_bridgeObjectRetain(v1);
  sub_1002D171C(v7);
  sub_100057D9C(v1, v2, v5, v4, v3, v6, 1);
  sub_100057D9C(v1, v2, v5, v4, v3, v6, 1);
  JUMPOUT(0x1002D1308LL);
}

void sub_1002D1380()
{
}

void sub_1002D1390()
{
}

void sub_1002D13A0()
{
  unsigned __int8 v6 = v0;
  swift_bridgeObjectRetain(v5);
  sub_1002D2C3C(v7, v2, v5);
  sub_100057D9C(v1, v2, v5, v4, v3, v6, 4);
  sub_100057D9C(v1, v2, v5, v4, v3, v6, 4);
  JUMPOUT(0x1002D1308LL);
}

void sub_1002D1400()
{
  unsigned __int8 v6 = v0;
  sub_100109F08(v1, v2, v5, v4, v3, v0, 5);
  sub_1002D7044();
  sub_100057D9C(v1, v2, v5, v4, v3, v6, 5);
  sub_100057D9C(v1, v2, v5, v4, v3, v6, 5);
  JUMPOUT(0x1002D1308LL);
}

void sub_1002D1470()
{
}

void sub_1002D1480()
{
  uint64_t v3 = *(void *)(v1 + 408);
  uint64_t v2 = *(void *)(v1 + 416);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(v2 + 8),  v3,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t v5 = *(void *)(swift_getAssociatedConformanceWitness( v2,  v3,  AssociatedTypeWitness,  &protocol requirements base descriptor for InfrastructureController,  &associated conformance descriptor for InfrastructureController.P2PControls.Driver: InfrastructureWiFiDriver)
                 + 8);
  unsigned __int8 v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  uint64_t v7 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  v6(v0 & 0xFFFFFFFFFFFFLL, v7, v5);
  JUMPOUT(0x1002D1308LL);
}

void sub_1002D14FC(uint64_t a1)
{
}

void sub_1002D1508()
{
  if (v6 | v3 | v2 | v5 | v4) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v0 == 0;
  }
  if (v8)
  {
    uint64_t v23 = *(void *)(v7 + 408);
    uint64_t v22 = *(void *)(v7 + 416);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(v22 + 8),  v23,  &protocol requirements base descriptor for P2PControls);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v22,  v23,  AssociatedTypeWitness,  &protocol requirements base descriptor for InfrastructureController,  &associated conformance descriptor for InfrastructureController.P2PControls.Driver: InfrastructureWiFiDriver);
    uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 64);
    uint64_t v27 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
    char v28 = v26(v27, AssociatedConformanceWitness);
    sub_1002CF234(v28 & 1);
  }

  else
  {
    if (v0) {
      BOOL v9 = 0;
    }
    else {
      BOOL v9 = v2 == 1;
    }
    if (v9 && (v6 | v3 | v5 | v4) == 0)
    {
      uint64_t v30 = *(void *)(v7 + 408);
      uint64_t v29 = *(void *)(v7 + 416);
      uint64_t v31 = swift_getAssociatedTypeWitness( 255LL,  *(void *)(v29 + 8),  v30,  &protocol requirements base descriptor for P2PControls);
      uint64_t v32 = swift_getAssociatedConformanceWitness( v29,  v30,  v31,  &protocol requirements base descriptor for InfrastructureController,  &associated conformance descriptor for InfrastructureController.P2PControls.Driver: InfrastructureWiFiDriver);
      unint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 80);
      uint64_t v34 = swift_checkMetadataState(0LL, v31);
      unsigned int v35 = v33(v34, v32);
      if ((v35 & 0x10000) != 0)
      {
        uint64_t v36 = CountryCode.unknown.unsafeMutableAddressor();
        LOBYTE(v35) = *(_BYTE *)v36;
        LOWORD(v36) = *((unsigned __int8 *)v36 + 1);
      }

      else
      {
        LODWORD(v36) = v35 >> 8;
      }

      sub_1002CFD64(v35 | (unsigned __int16)((_WORD)v36 << 8));
    }

    else
    {
      uint64_t v12 = *(void *)(v7 + 408);
      uint64_t v11 = *(void *)(v7 + 416);
      uint64_t v13 = swift_getAssociatedTypeWitness( 255LL,  *(void *)(v11 + 8),  v12,  &protocol requirements base descriptor for P2PControls);
      uint64_t v14 = swift_getAssociatedConformanceWitness( v11,  v12,  v13,  &protocol requirements base descriptor for InfrastructureController,  &associated conformance descriptor for InfrastructureController.P2PControls.Driver: InfrastructureWiFiDriver);
      uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 72);
      uint64_t v16 = swift_checkMetadataState(0LL, v13);
      uint64_t v17 = v15(v16, v14);
      sub_1002CF3B8(v17, v19, v20, v18 & 0xFFFFFFFFFFFFLL);
      (*(void (**)(uint64_t))(*(void *)(v14 + 8) + 32LL))(v16);
      uint64_t v21 = *(unsigned __int8 *)(v1 + *(void *)(*(void *)v1 + 592LL));
      if ((_DWORD)v21 != 3) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v21, v16, v14);
      }
    }
  }

  JUMPOUT(0x1002D1308LL);
}

uint64_t sub_1002D171C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v46 = sub_100002274(&qword_10040F4D8);
  __chkstk_darwin();
  uint64_t v45 = (uint64_t)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  BOOL v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v42 - v10;
  __chkstk_darwin();
  uint64_t v13 = (char *)&v42 - v12;
  sub_1002CFBF8(1);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v13, (uint64_t)v1 + *(void *)(*v1 + 504), v6);
  id v44 = (id)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v14 = swift_allocObject(&unk_1003FA098, 24LL, 7LL);
  swift_weakInit(v14 + 16, v2);
  uint64_t v15 = (void *)swift_allocObject(&unk_1003FA0E8, 40LL, 7LL);
  v15[2] = *(void *)(v4 + 408);
  v15[3] = *(void *)(v4 + 416);
  v15[4] = v14;
  uint64_t v16 = *(void (**)(char *, void, uint64_t))(v7 + 104);
  v16(v11, enum case for DispatchTimeInterval.never(_:), v6);
  *(void *)BOOL v9 = 100LL;
  v16(v9, enum case for DispatchTimeInterval.milliseconds(_:), v6);
  uint64_t v17 = type metadata accessor for P2PTimer(0LL);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  uint64_t v18 = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)( (uint64_t)v13,  v44,  (uint64_t)v11,  (uint64_t)v9,  (uint64_t)sub_1002D72BC,  (uint64_t)v15);
  uint64_t v19 = *(void *)(*v2 + 512);
  uint64_t v20 = *(uint64_t *)((char *)v2 + v19);
  *(uint64_t *)((char *)v2 + v19) = v18;
  swift_release(v20);
  uint64_t v21 = (uint64_t)v2 + *(void *)(*v2 + 552);
  swift_beginAccess(v21, v49, 0LL, 0LL);
  uint64_t v22 = v21 + *(int *)(v46 + 36);
  unint64_t v23 = *(unsigned int *)(v22 + 16) | ((unint64_t)*(unsigned __int16 *)(v22 + 20) << 32);
  unint64_t v24 = *(unsigned int *)(v22 + 24) | ((unint64_t)*(unsigned __int16 *)(v22 + 28) << 32);
  char v25 = *(_BYTE *)(v22 + 30);
  char v26 = *(_BYTE *)(v22 + 31);
  swift_bridgeObjectRetain(a1);
  uint64_t v28 = sub_1002D594C(v27);
  swift_bridgeObjectRelease(a1);
  uint64_t v29 = *(void **)(v28 + 16);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRetain(a1);
  uint64_t v31 = sub_1002D5A58(v30);
  swift_bridgeObjectRelease(a1);
  id v32 = *(id *)(v31 + 16);
  swift_bridgeObjectRelease(v31);
  uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
  os_log_type_t v35 = static os_log_type_t.default.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (_DWORD *)swift_slowAlloc(22LL, -1LL);
    id v44 = v32;
    uint64_t v37 = v36;
    *uint64_t v36 = 134218240;
    id v47 = v29;
    uint64_t v43 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
    *((_WORD *)v37 + 6) = 2048;
    id v47 = v44;
    uint64_t v21 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
    _os_log_impl( (void *)&_mh_execute_header,  v34,  v35,  "Infra scan started (2.4GHz: %ld 5GHz: %ld)",  (uint8_t *)v37,  0x16u);
    id v38 = v37;
    id v32 = v44;
    swift_slowDealloc(v38, -1LL, -1LL);
  }

  uint64_t v39 = v45;
  sub_1000226B0(v21, v45, &qword_10040F4D8);
  uint64_t v40 = v39 + *(int *)(v46 + 36);
  *(void *)uint64_t v40 = v29;
  *(void *)(v40 + 8) = v32;
  *(_WORD *)(v40 + 20) = WORD2(v23);
  *(_DWORD *)(v40 + swift_weakDestroy(v0 + 16) = v23;
  *(_WORD *)(v40 + 28) = WORD2(v24);
  *(_DWORD *)(v40 + 24) = v24;
  *(_BYTE *)(v40 + 30) = v25;
  *(_BYTE *)(v40 + 3sub_100058090(v4, v0 + 1) = v26;
  return sub_1002D04DC(v39);
}

uint64_t sub_1002D1B10(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v51 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v42 - v5;
  __chkstk_darwin();
  uint64_t v8 = (char *)&v42 - v7;
  sub_100002274(&qword_100405D40);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchTime(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v42 - v15;
  a1 += 16LL;
  swift_beginAccess(a1, v55, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1);
  if (result)
  {
    uint64_t v18 = result;
    uint64_t v50 = v2;
    uint64_t v19 = result + *(void *)(*(void *)result + 496LL);
    swift_beginAccess(v19, v54, 0LL, 0LL);
    sub_1000226B0(v19, (uint64_t)v10, &qword_100405D40);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11) == 1)
    {
      swift_release(v18);
      return sub_1000225EC((uint64_t)v10, &qword_100405D40);
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v10, v11);
      type metadata accessor for P2PTimer(0LL);
      variable initialization expression of AWDLPeer.lastUpdated();
      uint64_t v20 = v8;
      DispatchTime.distance(to:)(v14);
      uint64_t v49 = *(void (**)(char *, uint64_t))(v12 + 8);
      v49(v14, v11);
      sub_1002D1F74(1);
      uint64_t v21 = v50;
      uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
      v48(v6, v8, v50);
      uint64_t v22 = swift_retain_n(v18, 2LL);
      unint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
      os_log_type_t v24 = static os_log_type_t.error.getter(v23);
      int v25 = v24;
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v26 = swift_slowAlloc(22LL, -1LL);
        id v47 = v20;
        uint64_t v27 = v26;
        uint64_t v46 = swift_slowAlloc(64LL, -1LL);
        uint64_t v53 = v46;
        *(_DWORD *)uint64_t v27 = 136315394;
        uint64_t v28 = DispatchTimeInterval.description.getter();
        unint64_t v30 = v29;
        uint64_t v52 = sub_10000235C(v28, v29, &v53);
        uint64_t v43 = &v53;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
        __n128 v31 = swift_bridgeObjectRelease(v30);
        os_log_t v44 = v23;
        int v45 = v25;
        id v32 = *(void (**)(char *, uint64_t, __n128))(v3 + 8);
        uint64_t v33 = v50;
        v32(v6, v50, v31);
        *(_WORD *)(v27 + 12) = 2080;
        uint64_t v34 = v51;
        v48(v51, (char *)(v18 + *(void *)(*(void *)v18 + 504LL)), v33);
        swift_release(v18);
        uint64_t v35 = DispatchTimeInterval.description.getter();
        unint64_t v37 = v36;
        ((void (*)(char *, uint64_t))v32)(v34, v33);
        uint64_t v52 = sub_10000235C(v35, v37, &v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v43);
        swift_release(v18);
        swift_bridgeObjectRelease(v37);
        os_log_t v38 = v44;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  (os_log_type_t)v45,  "Infra scan has timed out, revoked infra scan availability, scan on going for %s, maximum allowed %s",  (uint8_t *)v27,  0x16u);
        uint64_t v39 = v46;
        swift_arrayDestroy(v46, 2LL, &type metadata for Any[8]);
        swift_slowDealloc(v39, -1LL, -1LL);
        swift_slowDealloc(v27, -1LL, -1LL);
        swift_release(v18);

        uint64_t v40 = v47;
        uint64_t v41 = v33;
      }

      else
      {

        swift_release_n(v18, 2LL);
        id v32 = *(void (**)(char *, uint64_t, __n128))(v3 + 8);
        ((void (*)(char *, uint64_t))v32)(v6, v21);
        swift_release(v18);
        uint64_t v40 = v20;
        uint64_t v41 = v21;
      }

      ((void (*)(char *, uint64_t))v32)(v40, v41);
      return ((uint64_t (*)(char *, uint64_t))v49)(v16, v11);
    }
  }

  return result;
}

void sub_1002D1F74(int a1)
{
  uint64_t v2 = v1;
  int v65 = a1;
  uint64_t v64 = sub_100002274(&qword_10040F4D8);
  __chkstk_darwin();
  uint64_t v63 = (uint64_t)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v62 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v4 = *(void *)(v62 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_100405D40);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchTime(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v55 - v13;
  __chkstk_darwin();
  uint64_t v16 = (char *)&v55 - v15;
  uint64_t v17 = v2 + *(void *)(*(void *)v2 + 496LL);
  swift_beginAccess(v17, v68, 0LL, 0LL);
  sub_1000226B0(v17, (uint64_t)v8, &qword_100405D40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) == 1)
  {
    uint64_t v18 = sub_1000225EC((uint64_t)v8, &qword_100405D40);
LABEL_7:
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v42 = static os_log_type_t.error.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc(5LL, -1LL);
      *(_DWORD *)uint64_t v43 = 16777472;
      LOBYTE(v67[0]) = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v67, (char *)v67 + 1);
      _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "Ignoring scan end event because no scan in progress with status: %hhu",  v43,  5u);
      swift_slowDealloc(v43, -1LL, -1LL);
    }

    return;
  }

  uint64_t v19 = v12;
  unint64_t v60 = v6;
  uint64_t v61 = v4;
  uint64_t v20 = v64;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v8, v9);
  if ((sub_1002CFB40() & 1) == 0)
  {
    uint64_t v18 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_7;
  }

  uint64_t v21 = *(uint64_t (**)(char *, char *, uint64_t))(v10 + 16);
  uint64_t v22 = v14;
  unint64_t v59 = v16;
  uint64_t v23 = v21(v14, v16, v9);
  os_log_type_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.default.getter(v24);
  int v26 = v25;
  uint64_t v27 = v20;
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v28 = v9;
    uint64_t v29 = swift_slowAlloc(15LL, -1LL);
    uint64_t v58 = swift_slowAlloc(32LL, -1LL);
    v67[0] = v58;
    *(_DWORD *)uint64_t v29 = 136315394;
    uint64_t v55 = v29 + 4;
    type metadata accessor for P2PTimer(0LL);
    int v57 = v26;
    unint64_t v30 = v19;
    os_log_t v56 = v24;
    variable initialization expression of AWDLPeer.lastUpdated();
    __n128 v31 = v60;
    DispatchTime.distance(to:)(v19);
    id v32 = *(void (**)(char *, uint64_t))(v10 + 8);
    v32(v30, v28);
    uint64_t v33 = DispatchTimeInterval.description.getter();
    uint64_t v34 = v22;
    unint64_t v36 = v35;
    (*(void (**)(char *, uint64_t))(v61 + 8))(v31, v62);
    uint64_t v66 = sub_10000235C(v33, v36, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67);
    __n128 v37 = swift_bridgeObjectRelease(v36);
    uint64_t v38 = v28;
    ((void (*)(char *, uint64_t, __n128))v32)(v34, v28, v37);
    *(_WORD *)(v29 + 12) = 256;
    LOBYTE(v66) = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, (char *)&v66 + 1);
    os_log_t v39 = v56;
    _os_log_impl( (void *)&_mh_execute_header,  v56,  (os_log_type_t)v57,  "Infra scan complete (duration: %s), status: %hhu)",  (uint8_t *)v29,  0xFu);
    uint64_t v40 = v58;
    swift_arrayDestroy(v58, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  else
  {

    id v32 = *(void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v38 = v9;
    v32(v14, v9);
  }

  uint64_t v44 = *(void *)(*(void *)v2 + 512LL);
  uint64_t v45 = *(void *)(v2 + v44);
  *(void *)(v2 + v44) = 0LL;
  swift_release(v45);
  sub_1002CFBF8(0);
  uint64_t v46 = v2 + *(void *)(*(void *)v2 + 552LL);
  swift_beginAccess(v46, v67, 0LL, 0LL);
  uint64_t v47 = v46 + *(int *)(v27 + 36);
  int v48 = *(_DWORD *)(v47 + 16);
  __int16 v49 = *(_WORD *)(v47 + 20);
  int v51 = *(_DWORD *)(v47 + 24);
  int v50 = *(_DWORD *)(v47 + 28);
  uint64_t v52 = v46;
  uint64_t v53 = v63;
  sub_1000226B0(v52, v63, &qword_10040F4D8);
  uint64_t v54 = v53 + *(int *)(v27 + 36);
  *(void *)uint64_t v54 = 0LL;
  *(void *)(v54 + 8) = 0LL;
  *(_WORD *)(v54 + 20) = v49;
  *(_DWORD *)(v54 + swift_weakDestroy(v0 + 16) = v48;
  *(_DWORD *)(v54 + 24) = v51;
  *(_DWORD *)(v54 + 28) = v50;
  sub_1002D04DC(v53);
  v32(v59, v38);
}

void sub_1002D2498(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v29 - v9;
  __chkstk_darwin();
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v30 = a1 & 0xFFFFFFFFFFFFLL;
  sub_1002CF908(a1 & 0xFFFFFFFFFFFFLL);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v12, (uint64_t)v1 + *(void *)(*v1 + 472), v5);
  uint64_t v13 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v14 = swift_allocObject(&unk_1003FA098, 24LL, 7LL);
  swift_weakInit(v14 + 16, v2);
  uint64_t v15 = (void *)swift_allocObject(&unk_1003FA0C0, 40LL, 7LL);
  v15[2] = *(void *)(v4 + 408);
  v15[3] = *(void *)(v4 + 416);
  v15[4] = v14;
  uint64_t v16 = *(void (**)(char *, void, uint64_t))(v6 + 104);
  v16(v10, enum case for DispatchTimeInterval.never(_:), v5);
  *(void *)uint64_t v8 = 100LL;
  v16(v8, enum case for DispatchTimeInterval.milliseconds(_:), v5);
  uint64_t v17 = type metadata accessor for P2PTimer(0LL);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  uint64_t v18 = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)( (uint64_t)v12,  v13,  (uint64_t)v10,  (uint64_t)v8,  (uint64_t)sub_1002D72B0,  (uint64_t)v15);
  uint64_t v19 = *(void *)(*v2 + 480);
  uint64_t v20 = *(uint64_t *)((char *)v2 + v19);
  *(uint64_t *)((char *)v2 + v19) = v18;
  swift_release(v20);
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    os_log_type_t v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v25 = swift_slowAlloc(32LL, -1LL);
    uint64_t v32 = v25;
    *(_DWORD *)os_log_type_t v24 = 136315138;
    uint64_t v26 = Channel.description.getter(v30);
    unint64_t v28 = v27;
    uint64_t v31 = sub_10000235C(v26, v27, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Infra association started on channel %s", v24, 0xCu);
    swift_arrayDestroy(v25, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v24, -1LL, -1LL);
  }
}

void sub_1002D2760(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  os_log_t v56 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v47 - v5;
  __chkstk_darwin();
  uint64_t v8 = (char *)&v47 - v7;
  sub_100002274(&qword_100405D40);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchTime(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v47 - v15;
  a1 += 16LL;
  swift_beginAccess(a1, v60, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    uint64_t v18 = Strong;
    uint64_t v55 = v2;
    uint64_t v19 = Strong + *(void *)(*(void *)Strong + 464LL);
    swift_beginAccess(v19, v59, 0LL, 0LL);
    sub_1000226B0(v19, (uint64_t)v10, &qword_100405D40);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11) == 1)
    {
      swift_release(v18);
      sub_1000225EC((uint64_t)v10, &qword_100405D40);
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v10, v11);
      unint64_t v20 = sub_1002CF848();
      if ((v20 & 0xFF00000000LL) == 0x300000000LL)
      {
        (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
        swift_release(v18);
      }

      else
      {
        uint64_t v53 = (void (*)(char *, uint64_t, uint64_t))v20;
        type metadata accessor for P2PTimer(0LL);
        variable initialization expression of AWDLPeer.lastUpdated();
        DispatchTime.distance(to:)(v14);
        uint64_t v21 = v14;
        uint64_t v22 = v8;
        uint64_t v54 = *(void (**)(char *, uint64_t))(v12 + 8);
        v54(v21, v11);
        sub_1002D7044();
        os_log_type_t v23 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
        os_log_type_t v24 = v8;
        uint64_t v25 = v55;
        v23(v6, v24, v55);
        uint64_t v26 = swift_retain_n(v18, 2LL);
        unint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
        os_log_type_t v28 = static os_log_type_t.error.getter(v27);
        int v29 = v28;
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v30 = swift_slowAlloc(32LL, -1LL);
          uint64_t v52 = v22;
          uint64_t v31 = v30;
          uint64_t v51 = swift_slowAlloc(96LL, -1LL);
          uint64_t v58 = v51;
          *(_DWORD *)uint64_t v31 = 136315650;
          int v50 = v29;
          uint64_t v32 = Channel.description.getter((uint64_t)v53);
          uint64_t v53 = (void (*)(char *, uint64_t, uint64_t))v23;
          unint64_t v34 = v33;
          uint64_t v57 = sub_10000235C(v32, v33, &v58);
          int v48 = &v58;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
          swift_bridgeObjectRelease(v34);
          *(_WORD *)(v31 + 12) = 2080;
          uint64_t v35 = DispatchTimeInterval.description.getter();
          unint64_t v37 = v36;
          uint64_t v57 = sub_10000235C(v35, v36, &v58);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
          __n128 v38 = swift_bridgeObjectRelease(v37);
          os_log_t v49 = v27;
          os_log_t v39 = *(void (**)(char *, uint64_t, __n128))(v3 + 8);
          uint64_t v25 = v55;
          v39(v6, v55, v38);
          *(_WORD *)(v31 + 22) = 2080;
          uint64_t v40 = v56;
          v53(v56, v18 + *(void *)(*(void *)v18 + 472LL), v25);
          swift_release(v18);
          uint64_t v41 = DispatchTimeInterval.description.getter();
          unint64_t v43 = v42;
          ((void (*)(char *, uint64_t))v39)(v40, v25);
          uint64_t v57 = sub_10000235C(v41, v43, &v58);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v48);
          swift_release(v18);
          swift_bridgeObjectRelease(v43);
          os_log_t v44 = v49;
          _os_log_impl( (void *)&_mh_execute_header,  v49,  (os_log_type_t)v50,  "Infra association has timed out, revoked infra association availability on channel %s, on going for %s, maximum allowed %s",  (uint8_t *)v31,  0x20u);
          uint64_t v45 = v51;
          swift_arrayDestroy(v51, 3LL, &type metadata for Any[8]);
          swift_slowDealloc(v45, -1LL, -1LL);
          swift_slowDealloc(v31, -1LL, -1LL);
          swift_release(v18);

          uint64_t v46 = v52;
        }

        else
        {

          swift_release_n(v18, 2LL);
          os_log_t v39 = *(void (**)(char *, uint64_t, __n128))(v3 + 8);
          ((void (*)(char *, uint64_t))v39)(v6, v25);
          swift_release(v18);
          uint64_t v46 = v22;
        }

        ((void (*)(char *, uint64_t))v39)(v46, v25);
        v54(v16, v11);
      }
    }
  }

unint64_t sub_1002D2C3C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v63 = a3;
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v61 = *(void *)(v6 - 8);
  uint64_t v62 = v6;
  __chkstk_darwin();
  uint64_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_100405D40);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchTime(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v54 - v15;
  __chkstk_darwin();
  uint64_t v64 = (char *)&v54 - v17;
  unint64_t result = sub_1002CF848();
  if ((result & 0xFF00000000LL) != 0x300000000LL)
  {
    uint64_t v19 = result;
    uint64_t v20 = *(void *)(*(void *)v3 + 464LL);
    uint64_t v21 = v3 + v20;
    swift_beginAccess(v4 + v20, v67, 0LL, 0LL);
    sub_1000226B0(v21, (uint64_t)v10, &qword_100405D40);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11) == 1)
    {
      return sub_1000225EC((uint64_t)v10, &qword_100405D40);
    }

    else
    {
      unint64_t v59 = v8;
      uint64_t v22 = v64;
      uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(v64, v10, v11);
      uint64_t v24 = v11;
      unint64_t v60 = HIDWORD(a2);
      if (HIDWORD(a2))
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v16, v22, v11);
        uint64_t v25 = v63;
        uint64_t v26 = swift_bridgeObjectRetain_n(v63, 2LL);
        unint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
        os_log_type_t v28 = static os_log_type_t.error.getter(v27);
        int v57 = v28;
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v29 = v24;
          uint64_t v30 = swift_slowAlloc(28LL, -1LL);
          uint64_t v56 = swift_slowAlloc(64LL, -1LL);
          uint64_t v66 = v56;
          *(_DWORD *)uint64_t v30 = 136315650;
          os_log_t v55 = v27;
          uint64_t v31 = Channel.description.getter(v19);
          unint64_t v33 = v32;
          uint64_t v65 = sub_10000235C(v31, v32, &v66);
          uint64_t v58 = v29;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
          swift_bridgeObjectRelease(v33);
          *(_WORD *)(v30 + 12) = 1024;
          swift_bridgeObjectRelease(v25);
          LODWORD(v65) = v60;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, (char *)&v65 + 4);
          swift_bridgeObjectRelease(v25);
          *(_WORD *)(v30 + 18) = 2080;
          unint64_t v34 = (uint8_t *)v30;
          type metadata accessor for P2PTimer(0LL);
          variable initialization expression of AWDLPeer.lastUpdated();
          uint64_t v35 = v59;
          DispatchTime.distance(to:)(v14);
          unint64_t v36 = *(void (**)(char *, uint64_t))(v12 + 8);
          v36(v14, v58);
          uint64_t v37 = DispatchTimeInterval.description.getter();
          unint64_t v39 = v38;
          (*(void (**)(char *, uint64_t))(v61 + 8))(v35, v62);
          uint64_t v65 = sub_10000235C(v37, v39, &v66);
          uint64_t v24 = v58;
          uint64_t v40 = v64;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
          __n128 v41 = swift_bridgeObjectRelease(v39);
          ((void (*)(char *, uint64_t, __n128))v36)(v16, v24, v41);
          os_log_t v42 = v55;
          _os_log_impl( (void *)&_mh_execute_header,  v55,  (os_log_type_t)v57,  "Infra association failed on %s with status code %u (duration: %s)",  v34,  0x1Cu);
          uint64_t v43 = v56;
          swift_arrayDestroy(v56, 2LL, &type metadata for Any[8]);
          swift_slowDealloc(v43, -1LL, -1LL);
          swift_slowDealloc(v34, -1LL, -1LL);
        }

        else
        {
          uint64_t v40 = v22;

          swift_bridgeObjectRelease_n(v25, 2LL);
          unint64_t v36 = *(void (**)(char *, uint64_t))(v12 + 8);
          v36(v16, v24);
        }

        uint64_t v52 = *(void *)(*(void *)v4 + 480LL);
        uint64_t v53 = *(void *)(v4 + v52);
        *(void *)(v4 + v52) = 0LL;
        swift_release(v53);
        sub_1002CF908(0x300000000LL);
        return ((uint64_t (*)(char *, uint64_t))v36)(v40, v24);
      }

      else
      {
        os_log_t v44 = (os_log_s *)Logger.logObject.getter(v23);
        os_log_type_t v45 = static os_log_type_t.default.getter(v44);
        if (os_log_type_enabled(v44, v45))
        {
          uint64_t v46 = v11;
          uint64_t v47 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v48 = swift_slowAlloc(32LL, -1LL);
          uint64_t v66 = v48;
          *(_DWORD *)uint64_t v47 = 136315138;
          uint64_t v49 = Channel.description.getter(v19);
          unint64_t v51 = v50;
          uint64_t v65 = sub_10000235C(v49, v50, &v66);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
          swift_bridgeObjectRelease(v51);
          _os_log_impl( (void *)&_mh_execute_header,  v44,  v45,  "Infra association on %s handshake complete, waiting for IP address",  v47,  0xCu);
          swift_arrayDestroy(v48, 1LL, &type metadata for Any[8]);
          swift_slowDealloc(v48, -1LL, -1LL);
          swift_slowDealloc(v47, -1LL, -1LL);

          return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v22, v46);
        }

        else
        {

          return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v22, v11);
        }
      }
    }
  }

  return result;
}

unint64_t sub_1002D31A4(int a1)
{
  uint64_t v2 = v1;
  int v61 = a1;
  uint64_t v3 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v60 = *(void *)(v3 - 8);
  __chkstk_darwin();
  unint64_t v59 = &v52[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_100002274(&qword_100405D40);
  __chkstk_darwin();
  uint64_t v6 = &v52[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = type metadata accessor for DispatchTime(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = &v52[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  uint64_t v12 = &v52[-v11];
  __chkstk_darwin();
  uint64_t v14 = &v52[-v13];
  unint64_t result = sub_1002CF848();
  if ((result & 0xFF00000000LL) != 0x300000000LL)
  {
    uint64_t v16 = result;
    uint64_t v17 = *(void *)(*(void *)v1 + 464LL);
    uint64_t v18 = v1 + v17;
    swift_beginAccess(v2 + v17, v64, 0LL, 0LL);
    sub_1000226B0(v18, (uint64_t)v6, &qword_100405D40);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
    {
      return sub_1000225EC((uint64_t)v6, &qword_100405D40);
    }

    else
    {
      uint64_t v58 = v3;
      int v19 = v61;
      uint64_t v20 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v14, v6, v7);
      if (v19)
      {
        uint64_t v21 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v12, v14, v7);
        uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
        os_log_type_t v23 = static os_log_type_t.error.getter(v22);
        int v24 = v23;
        if (os_log_type_enabled(v22, v23))
        {
          int v56 = v24;
          unsigned __int8 v25 = v61;
          int v53 = BYTE1(v61);
          uint64_t v26 = swift_slowAlloc(42LL, -1LL);
          int v57 = v14;
          uint64_t v27 = v26;
          uint64_t v55 = swift_slowAlloc(128LL, -1LL);
          uint64_t v63 = v55;
          *(_DWORD *)uint64_t v27 = 136315906;
          uint64_t v28 = Channel.description.getter(v16);
          os_log_t v54 = v22;
          unint64_t v30 = v29;
          uint64_t v62 = sub_10000235C(v28, v29, &v63);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
          swift_bridgeObjectRelease(v30);
          *(_WORD *)(v27 + 12) = 2080;
          uint64_t v31 = IEEE80211Status.description.getter(v25);
          unint64_t v33 = v32;
          uint64_t v62 = sub_10000235C(v31, v32, &v63);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
          swift_bridgeObjectRelease(v33);
          *(_WORD *)(v27 + 22) = 2080;
          uint64_t v34 = IEEE80211Reason.description.getter(v53);
          unint64_t v36 = v35;
          uint64_t v62 = sub_10000235C(v34, v35, &v63);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
          swift_bridgeObjectRelease(v36);
          *(_WORD *)(v27 + 32) = 2080;
          type metadata accessor for P2PTimer(0LL);
          variable initialization expression of AWDLPeer.lastUpdated();
          uint64_t v37 = v59;
          DispatchTime.distance(to:)(v10);
          unint64_t v38 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
          v38(v10, v7);
          uint64_t v39 = DispatchTimeInterval.description.getter();
          unint64_t v41 = v40;
          (*(void (**)(_BYTE *, uint64_t))(v60 + 8))(v37, v58);
          uint64_t v62 = sub_10000235C(v39, v41, &v63);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
          __n128 v42 = swift_bridgeObjectRelease(v41);
          ((void (*)(_BYTE *, uint64_t, __n128))v38)(v12, v7, v42);
          os_log_t v43 = v54;
          _os_log_impl( (void *)&_mh_execute_header,  v54,  (os_log_type_t)v56,  "Infra association failed on %s with status code %s reason: %s (duration: %s)",  (uint8_t *)v27,  0x2Au);
          uint64_t v44 = v55;
          swift_arrayDestroy(v55, 4LL, &type metadata for Any[8]);
          swift_slowDealloc(v44, -1LL, -1LL);
          uint64_t v45 = v27;
          uint64_t v14 = v57;
          swift_slowDealloc(v45, -1LL, -1LL);
        }

        else
        {

          unint64_t v38 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
          v38(v12, v7);
        }

        uint64_t v50 = *(void *)(*(void *)v2 + 480LL);
        uint64_t v51 = *(void *)(v2 + v50);
        *(void *)(v2 + v50) = 0LL;
        swift_release(v51);
        sub_1002CF908(0x300000000LL);
        return ((uint64_t (*)(_BYTE *, uint64_t))v38)(v14, v7);
      }

      else
      {
        uint64_t v46 = v14;
        uint64_t v47 = (os_log_s *)Logger.logObject.getter(v20);
        os_log_type_t v48 = static os_log_type_t.default.getter(v47);
        if (os_log_type_enabled(v47, v48))
        {
          uint64_t v49 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v49 = 0;
          _os_log_impl((void *)&_mh_execute_header, v47, v48, "Infra association complete", v49, 2u);
          swift_slowDealloc(v49, -1LL, -1LL);
        }

        return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v46, v7);
      }
    }
  }

  return result;
}

unint64_t sub_1002D3694()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 480LL);
  uint64_t v2 = *(void *)(v0 + v1);
  *(void *)(v0 + vsub_100058090(v4, v0 + 1) = 0LL;
  swift_release(v2);
  return sub_1002CF908(0x300000000LL);
}

uint64_t sub_1002D36BC(uint64_t result)
{
  uint64_t v2 = v1;
  uint64_t v3 = (void *)*v1;
  if (!result)
  {
    uint64_t v12 = swift_retain();
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v16 = swift_slowAlloc(32LL, -1LL);
      uint64_t v29 = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      uint64_t v17 = WiFiInterface.description.getter();
      unint64_t v19 = v18;
      uint64_t v28 = sub_10000235C(v17, v18, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
      swift_release(v2);
      swift_bridgeObjectRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s disabling auto-join", v15, 0xCu);
      swift_arrayDestroy(v16, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v16, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    else
    {
      swift_release(v1);
    }

    uint64_t v21 = v3[51];
    uint64_t v20 = v3[52];
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(v20 + 8),  v21,  &protocol requirements base descriptor for P2PControls);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v20,  v21,  AssociatedTypeWitness,  &protocol requirements base descriptor for InfrastructureController,  &associated conformance descriptor for InfrastructureController.P2PControls.Driver: InfrastructureWiFiDriver);
    int v24 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40);
    goto LABEL_13;
  }

  if (result >= 1 && !*(void *)((char *)v1 + v3[70]))
  {
    uint64_t v4 = swift_retain();
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v8 = swift_slowAlloc(32LL, -1LL);
      uint64_t v29 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      uint64_t v9 = WiFiInterface.description.getter();
      unint64_t v11 = v10;
      uint64_t v28 = sub_10000235C(v9, v10, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
      swift_release(v2);
      swift_bridgeObjectRelease(v11);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s enabling auto-join", v7, 0xCu);
      swift_arrayDestroy(v8, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v8, -1LL, -1LL);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    else
    {
      swift_release(v1);
    }

    uint64_t v26 = v3[51];
    uint64_t v25 = v3[52];
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(v25 + 8),  v26,  &protocol requirements base descriptor for P2PControls);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v25,  v26,  AssociatedTypeWitness,  &protocol requirements base descriptor for InfrastructureController,  &associated conformance descriptor for InfrastructureController.P2PControls.Driver: InfrastructureWiFiDriver);
    int v24 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
LABEL_13:
    uint64_t v27 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
    return v24(v27, AssociatedConformanceWitness);
  }

  return result;
}

uint64_t sub_1002D3A2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 560LL);
  uint64_t v3 = *(void *)(v1 + v2);
  *(void *)(v1 + sub_1000E77F4(v3, v2) = a1;
  return sub_1002D36BC(v3);
}

uint64_t sub_1002D3A44()
{
  return sub_1002D3A6C((uint64_t)sub_1002D7248, (uint64_t)&unk_1003FA060);
}

uint64_t sub_1002D3A58()
{
  return sub_1002D3A6C((uint64_t)sub_1002D7240, (uint64_t)&unk_1003FA038);
}

uint64_t sub_1002D3A6C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v20 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  unint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  aBlock[4] = a1;
  uint64_t v23 = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000021F0;
  aBlock[3] = a2;
  uint64_t v13 = _Block_copy(aBlock);
  id v14 = v12;
  uint64_t v15 = swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  uint64_t v21 = _swiftEmptyArrayStorage;
  unint64_t v16 = sub_100002234();
  uint64_t v17 = sub_100002274((uint64_t *)&unk_1004052A0);
  uint64_t v18 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v7, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release(v23);
}

uint64_t sub_1002D3C2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)a1 + 560LL);
  uint64_t result = *(void *)(a1 + v2);
  if (__OFADD__(result, 1LL))
  {
    __break(1u);
  }

  else
  {
    *(void *)(a1 + sub_1000E77F4(v3, v2) = result + 1;
    return sub_1002D36BC(result);
  }

  return result;
}

uint64_t sub_1002D3C68(char a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v21 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  unint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v13 = swift_allocObject(&unk_1003F9FF8, 40LL, 7LL);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = a2;
  *(_BYTE *)(v13 + 24) = a1;
  *(void *)(v13 + 32) = v2;
  aBlock[4] = sub_1002D7230;
  uint64_t v24 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000021F0;
  aBlock[3] = &unk_1003FA010;
  id v14 = _Block_copy(aBlock);
  id v15 = v12;
  swift_bridgeObjectRetain(a2);
  uint64_t v16 = swift_retain();
  static DispatchQoS.unspecified.getter(v16);
  uint64_t v22 = _swiftEmptyArrayStorage;
  unint64_t v17 = sub_100002234();
  uint64_t v18 = sub_100002274((uint64_t *)&unk_1004052A0);
  uint64_t v19 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v5, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v7, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release(v24);
}

uint64_t sub_1002D3E60(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  unint64_t v17 = &_swiftEmptySetSingleton;
  if (*(void *)(a1 + 16))
  {
    Hasher.init(_seed:)(v16, *(void *)(a1 + 40));
    String.hash(into:)(v16, 0x7274736172666E69LL, 0xEE00657275746375LL);
    unint64_t v6 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(a1 + 32));
    if (((*(void *)(a1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0) {
      __asm { BR              X9 }
    }

    if (*(void *)(a1 + 16))
    {
      Hasher.init(_seed:)(v16, *(void *)(a1 + 40));
      String.hash(into:)(v16, 0x617461446E616ELL, 0xE700000000000000LL);
      unint64_t v7 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(a1 + 32));
      if (((*(void *)(a1 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0) {
        __asm { BR              X9 }
      }
    }
  }

  uint64_t v8 = v17;
  if (v17[2])
  {
    uint64_t v10 = *(void *)(v4 + 408);
    uint64_t v9 = *(void *)(v4 + 416);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(v9 + 8),  v10,  &protocol requirements base descriptor for P2PControls);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v9,  v10,  AssociatedTypeWitness,  &protocol requirements base descriptor for InfrastructureController,  &associated conformance descriptor for InfrastructureController.P2PControls.Driver: InfrastructureWiFiDriver);
    uint64_t v13 = *(void (**)(void, void *, uint64_t, uint64_t))(AssociatedConformanceWitness + 56);
    uint64_t v14 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
    v13(a2 & 1, v8, v14, AssociatedConformanceWitness);
  }

  return swift_bridgeObjectRelease(v8);
}

uint64_t sub_1002D42B4(uint64_t result)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *((unsigned __int8 *)v1 + *(void *)(*v1 + 592));
  if ((_DWORD)v3 != 3 && result == 3)
  {
    uint64_t v6 = *(void *)(v2 + 408);
    uint64_t v5 = *(void *)(v2 + 416);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(v5 + 8),  v6,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v5,  v6,  AssociatedTypeWitness,  &protocol requirements base descriptor for InfrastructureController,  &associated conformance descriptor for InfrastructureController.P2PControls.Driver: InfrastructureWiFiDriver);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
    uint64_t v10 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
    return v9(v3, v10, AssociatedConformanceWitness);
  }

  return result;
}

uint64_t sub_1002D436C(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 592LL);
  uint64_t v3 = *(unsigned __int8 *)(v1 + v2);
  *(_BYTE *)(v1 + sub_1000E77F4(v3, v2) = a1;
  return sub_1002D42B4(v3);
}

uint64_t sub_1002D4384(char a1)
{
  return sub_1002D473C(a1, (uint64_t)&unk_1003F9FA8, (uint64_t)sub_1002D71F8, (uint64_t)&unk_1003F9FC0);
}

uint64_t sub_1002D43A0(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 560LL);
  uint64_t result = *(void *)(a1 + v3);
  if (__OFADD__(result, 1LL))
  {
    __break(1u);
  }

  else
  {
    *(void *)(a1 + v3) = result + 1;
    sub_1002D36BC(result);
    uint64_t v6 = *(void *)(*(void *)a1 + 592LL);
    uint64_t v7 = *(unsigned __int8 *)(a1 + v6);
    *(_BYTE *)(a1 + v6) = a2;
    uint64_t result = sub_1002D42B4(v7);
    uint64_t v8 = *(void *)(*(void *)a1 + 584LL);
    uint64_t v9 = *(void *)(a1 + v8);
    BOOL v10 = __OFADD__(v9, 1LL);
    uint64_t v11 = v9 + 1;
    if (!v10)
    {
      *(void *)(a1 + v8) = v11;
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1002D4410()
{
  return sub_1002D3A6C((uint64_t)sub_1002D71F0, (uint64_t)&unk_1003F9F70);
}

uint64_t sub_1002D4424(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 584);
  uint64_t v4 = *(uint64_t *)((char *)a1 + v3);
  if (v4 >= 1)
  {
    *(uint64_t *)((char *)a1 + v3) = v4 - 1;
    uint64_t v2 = *a1;
    --v4;
  }

  if (!v4)
  {
    uint64_t v5 = *(void *)(v2 + 592);
    uint64_t v6 = *((unsigned __int8 *)a1 + v5);
    *((_BYTE *)a1 + v5) = 3;
    sub_1002D42B4(v6);
    uint64_t v2 = *a1;
  }

  uint64_t v7 = *(void *)(v2 + 560);
  uint64_t result = *(uint64_t *)((char *)a1 + v7);
  if (result >= 1)
  {
    *(uint64_t *)((char *)a1 + v7) = result - 1;
    return sub_1002D36BC(result);
  }

  return result;
}

uint64_t sub_1002D4494(char a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v19 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  BOOL v10 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v11 = swift_allocObject(&unk_1003F9F30, 25LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v1;
  *(_BYTE *)(v11 + 24) = a1;
  aBlock[4] = sub_1002D71E4;
  uint64_t v22 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000021F0;
  aBlock[3] = &unk_1003F9F48;
  uint64_t v12 = _Block_copy(aBlock);
  id v13 = v10;
  uint64_t v14 = swift_retain();
  static DispatchQoS.unspecified.getter(v14);
  uint64_t v20 = _swiftEmptyArrayStorage;
  unint64_t v15 = sub_100002234();
  uint64_t v16 = sub_100002274((uint64_t *)&unk_1004052A0);
  uint64_t v17 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v3, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v5, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release(v22);
}

uint64_t sub_1002D467C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 408LL);
  uint64_t v3 = *(void *)(*(void *)a1 + 416LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(v3 + 8),  v4,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v3,  v4,  AssociatedTypeWitness,  &protocol requirements base descriptor for InfrastructureController,  &associated conformance descriptor for InfrastructureController.P2PControls.Driver: InfrastructureWiFiDriver);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 112);
  uint64_t v8 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  return v7(a2, v8, AssociatedConformanceWitness);
}

uint64_t sub_1002D4720(char a1)
{
  return sub_1002D473C(a1, (uint64_t)&unk_1003F9EE0, (uint64_t)sub_1002D71D8, (uint64_t)&unk_1003F9EF8);
}

uint64_t sub_1002D473C(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v26 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v12 = *(void *)(v25 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v15 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v16 = swift_allocObject(a2, 25LL, 7LL);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = v4;
  *(_BYTE *)(v16 + 24) = a1;
  aBlock[4] = a3;
  uint64_t v29 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000021F0;
  aBlock[3] = a4;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = v15;
  uint64_t v19 = swift_retain();
  static DispatchQoS.unspecified.getter(v19);
  uint64_t v27 = _swiftEmptyArrayStorage;
  unint64_t v20 = sub_100002234();
  uint64_t v21 = sub_100002274((uint64_t *)&unk_1004052A0);
  uint64_t v22 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v21, v22, v9, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v11, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v25);
  return swift_release(v29);
}

uint64_t sub_1002D491C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 408LL);
  uint64_t v3 = *(void *)(*(void *)a1 + 416LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(v3 + 8),  v4,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v3,  v4,  AssociatedTypeWitness,  &protocol requirements base descriptor for InfrastructureController,  &associated conformance descriptor for InfrastructureController.P2PControls.Driver: InfrastructureWiFiDriver);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 144);
  uint64_t v8 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  return v7(a2, v8, AssociatedConformanceWitness);
}

uint64_t sub_1002D49C0(char a1)
{
  return sub_1002D473C(a1, (uint64_t)&unk_1003F9E90, (uint64_t)sub_1002D71B4, (uint64_t)&unk_1003F9EA8);
}

void sub_1002D49DC(uint64_t a1, unsigned __int8 a2)
{
  int v3 = a2;
  uint64_t v4 = sub_100002274(&qword_10040F4D8);
  __chkstk_darwin();
  uint64_t v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = a1 + *(void *)(*(void *)a1 + 552LL);
  swift_beginAccess(v7, v10, 0LL, 0LL);
  int v8 = *(unsigned __int8 *)(v7 + *(int *)(v4 + 36) + 31);
  if (v8 == 6)
  {
    if (v3 == 6) {
      return;
    }
LABEL_6:
    sub_1000226B0(v7, (uint64_t)v6, &qword_10040F4D8);
    v6[*(int *)(v4 + 36) + 31] = v3;
    sub_1002D04DC((uint64_t)v6);
    return;
  }

  if (v3 == 6 || v8 != v3) {
    goto LABEL_6;
  }
}

void sub_1002D4AC8()
{
}

void sub_1002D4AF4(uint64_t a1, unint64_t *a2, uint64_t *a3, unint64_t *a4, void (*a5)(void))
{
  if (!*a2)
  {
    uint64_t v10 = sub_1000022F8(a3);
    uint64_t v11 = sub_100087780(a4, a3, a5, (uint64_t)&protocol conformance descriptor for <A> A?);
    unint64_t v13 = type metadata accessor for ObservableWiFiProperty(a1, v10, v11, v12);
    if (!v14) {
      atomic_store(v13, a2);
    }
  }

void sub_1002D4B7C( uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }

void sub_1002D4BD8(uint64_t a1)
{
  if (!qword_10040F4A0)
  {
    uint64_t v2 = sub_1000022F8(&qword_10040AB68);
    unint64_t v3 = sub_1002D4C3C();
    unint64_t v5 = type metadata accessor for ObservableWiFiProperty(a1, v2, v3, v4);
    if (!v6) {
      atomic_store(v5, (unint64_t *)&qword_10040F4A0);
    }
  }

unint64_t sub_1002D4C3C()
{
  unint64_t result = qword_10040F4A8;
  if (!qword_10040F4A8)
  {
    uint64_t v1 = sub_1000022F8(&qword_10040AB68);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10040F4A8);
  }

  return result;
}

void sub_1002D4C98( uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0LL, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

uint64_t getEnumTagSinglePayload for InfrastructureRadioConstraints(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 253);
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 20);
  }
  int v4 = v3 - 4;
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for InfrastructureRadioConstraints( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)unint64_t result = a2 - 253;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 32) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 20) = a2 + 3;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for InfrastructureRadioConstraints()
{
  return &type metadata for InfrastructureRadioConstraints;
}

uint64_t sub_1002D4D88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a2 >= 1 && ((*(uint64_t (**)(uint64_t, uint64_t))(a7 + 56))(a6, a7) & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a7 + 32))(8LL, a6, a7);
    __chkstk_darwin();
    (*(void (**)(void, uint64_t, uint64_t (*)(uint64_t)))(a7 + 24))(0LL, 2LL, sub_1002D5588);
  }

  if (a3 > 0
    || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 56))(a6, a7), a2 >= 1) && (result & 1) == 0)
  {
    __chkstk_darwin();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t)))(a7 + 24))( 1LL,  2LL,  sub_1002D5580);
  }

  if ((a4 & 0xFF00000000LL) != 0x300000000LL)
  {
    uint64_t v14 = (uint64_t *)TimeBitmap.all.unsafeMutableAddressor();
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = v14[2];
    if ((a4 & 0xFE00000000LL) != 0) {
      uint64_t result = RadioSchedule.reserve(_:with:)(v15, v16, v17, 9, a6, a7);
    }
    else {
      uint64_t result = RadioSchedule.set(_:to:with:)(v15, v16, v17, a4 & 0xFFFFFFFFFFFFLL, 1LL, 9, a6, a7);
    }
  }

  if ((a5 & 0xFF00000000LL) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a7 + 32))(1LL, a6, a7);
    if (BYTE6(a5) == 4) {
      return result;
    }
LABEL_16:
    __asm { BR              X10 }
  }

  if (BYTE6(a5) != 4) {
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_1002D511C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
  char v8 = *v7;
  char v9 = *(_BYTE *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
  unint64_t v10 = (char *)TimeBitmap.Slot.FO.unsafeMutableAddressor();
  uint64_t v11 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v8, v9, *v10, *v7);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a4,  a3,  &protocol requirements base descriptor for RadioSchedule);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a4,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for RadioSchedule,  &associated conformance descriptor for RadioSchedule.RadioSchedule.Map: RadioMap);
  id v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  uint64_t v19 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  return v18(v11, v13, v15, 3LL, 2LL, a2, v19, AssociatedConformanceWitness);
}

uint64_t sub_1002D5218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = *(_BYTE *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
  char v6 = *(_BYTE *)TimeBitmap.Slot.OF.unsafeMutableAddressor();
  uint64_t v7 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
  uint64_t v8 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v5, v5, v6, *v7);
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a3,  a2,  &protocol requirements base descriptor for RadioSchedule);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a3,  a2,  AssociatedTypeWitness,  &protocol requirements base descriptor for RadioSchedule,  &associated conformance descriptor for RadioSchedule.RadioSchedule.Map: RadioMap);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  uint64_t v16 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  return v15(v8, v10, v12, 3LL, 2LL, 8LL, v16, AssociatedConformanceWitness);
}

void sub_1002D5304(int a1, Swift::UInt a2, Swift::UInt a3, uint64_t a4, unint64_t a5)
{
  if ((a4 & 0xFF00000000LL) == 0x300000000LL)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Channel.hash(into:)(a1, a4 & 0xFFFFFFFFFFFFLL);
  }

  if ((a5 & 0xFF00000000LL) == 0x300000000LL)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Channel.hash(into:)(a1, a5 & 0xFFFFFFFFFFFFLL);
  }

  unint64_t v9 = HIBYTE(a5);
  if ((a5 & 0xFF000000000000LL) == 0x4000000000000LL)
  {
    Hasher._combine(_:)(0);
    if (v9 != 6)
    {
LABEL_9:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(HIBYTE(a5));
      return;
    }
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE6(a5) + 1LL);
    if (v9 != 6) {
      goto LABEL_9;
    }
  }

  Hasher._combine(_:)(0);
}

uint64_t sub_1002D5400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D4D88( a1,  *(void *)v3,  *(void *)(v3 + 8),  *(unsigned int *)(v3 + 16) | ((unint64_t)*(unsigned __int16 *)(v3 + 20) << 32),  *(void *)(v3 + 24),  a2,  a3);
}

Swift::Int sub_1002D5420()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt v2 = *(void *)(v0 + 8);
  unint64_t v3 = *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int16 *)(v0 + 20) << 32);
  unint64_t v4 = *(void *)(v0 + 24);
  Hasher.init(_seed:)(v6, 0LL);
  sub_1002D5304((int)v6, v1, v2, v3, v4);
  return Hasher._finalize()();
}

void sub_1002D5488(int a1)
{
}

Swift::Int sub_1002D54A0(uint64_t a1)
{
  Swift::UInt v2 = *(void *)v1;
  Swift::UInt v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(unsigned int *)(v1 + 16) | ((unint64_t)*(unsigned __int16 *)(v1 + 20) << 32);
  unint64_t v5 = *(void *)(v1 + 24);
  Hasher.init(_seed:)(v7, a1);
  sub_1002D5304((int)v7, v2, v3, v4, v5);
  return Hasher._finalize()();
}

uint64_t sub_1002D5504(uint64_t a1, uint64_t a2)
{
  return sub_1002D56F0( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int16 *)(a1 + 20) << 32),  *(void *)(a1 + 24),  *(void *)a2,  *(void *)(a2 + 8),  *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int16 *)(a2 + 20) << 32),  *(void *)(a2 + 24));
}

unint64_t sub_1002D553C()
{
  unint64_t result = qword_10040F4D0;
  if (!qword_10040F4D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035FAC0, &type metadata for InfrastructureRadioConstraints);
    atomic_store(result, (unint64_t *)&qword_10040F4D0);
  }

  return result;
}

uint64_t sub_1002D5580(uint64_t a1)
{
  return sub_1002D5218(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1002D5588(uint64_t a1)
{
  return sub_1002D511C(a1, *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1002D5594(char *a1)
{
  char v1 = *a1;
  v5[0] = 0LL;
  v5[1] = 0xE000000000000000LL;
  char v4 = v1;
  uint64_t v2 = sub_100002274(&qword_10040F4B8);
  _print_unlocked<A, B>(_:_:)( &v4,  v5,  v2,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  return v5[0];
}

uint64_t sub_1002D55EC(__int16 *a1)
{
  __int16 v1 = *a1;
  v4[0] = 0LL;
  v4[1] = 0xE000000000000000LL;
  __int16 v3 = v1;
  _print_unlocked<A, B>(_:_:)( &v3,  v4,  &type metadata for CountryCode,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  return v4[0];
}

uint64_t sub_1002D563C(char *a1)
{
  return sub_1002D5654(a1, (uint64_t)&type metadata for AutoJoinState);
}

uint64_t sub_1002D5648(char *a1)
{
  return sub_1002D5654(a1, (uint64_t)&type metadata for Bool);
}

uint64_t sub_1002D5654(char *a1, uint64_t a2)
{
  char v2 = *a1;
  v5[0] = 0LL;
  v5[1] = 0xE000000000000000LL;
  char v4 = v2;
  _print_unlocked<A, B>(_:_:)( &v4,  v5,  a2,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  return v5[0];
}

uint64_t sub_1002D56A0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  v4[0] = 0LL;
  v4[1] = 0xE000000000000000LL;
  uint64_t v3 = v1;
  _print_unlocked<A, B>(_:_:)( &v3,  v4,  &type metadata for PreferenceDefaults.EnableUserspaceP2POptions,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  return v4[0];
}

uint64_t sub_1002D56F0( uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  uint64_t result = 0LL;
  if (a1 != a5 || a2 != a6) {
    return result;
  }
  uint64_t v10 = a7 & 0xFF00000000LL;
  if ((a3 & 0xFF00000000LL) != 0x300000000LL)
  {
    if (v10 != 0x300000000LL
      && (_DWORD)a3 == (_DWORD)a7
      && ((0x801004u >> ((a3 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((a7 >> 29) & 0xF8)) & 0xFFC))
    {
      switch(BYTE5(a3))
      {
        case 2:
          if (BYTE5(a7) != 2) {
            return 0LL;
          }
          goto LABEL_5;
        case 3:
          if (BYTE5(a7) != 3) {
            return 0LL;
          }
          goto LABEL_5;
        case 4:
          if (BYTE5(a7) != 4) {
            return 0LL;
          }
          goto LABEL_5;
        case 5:
          if (BYTE5(a7) != 5) {
            return 0LL;
          }
          goto LABEL_5;
        case 6:
          if (BYTE5(a7) != 6) {
            return 0LL;
          }
          goto LABEL_5;
        default:
          goto LABEL_5;
      }
    }

    return 0LL;
  }

  if (v10 != 0x300000000LL) {
    return 0LL;
  }
LABEL_5:
  uint64_t v11 = a8 & 0xFF00000000LL;
  if ((a4 & 0xFF00000000LL) != 0x300000000LL)
  {
    if (v11 != 0x300000000LL
      && (_DWORD)a4 == (_DWORD)a8
      && ((0x801004u >> ((a4 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((a8 >> 29) & 0xF8)) & 0xFFC))
    {
      switch(BYTE5(a4))
      {
        case 2:
          if (BYTE5(a8) != 2) {
            return 0LL;
          }
          goto LABEL_7;
        case 3:
          if (BYTE5(a8) != 3) {
            return 0LL;
          }
          goto LABEL_7;
        case 4:
          if (BYTE5(a8) != 4) {
            return 0LL;
          }
          goto LABEL_7;
        case 5:
          if (BYTE5(a8) != 5) {
            return 0LL;
          }
          goto LABEL_7;
        case 6:
          if (BYTE5(a8) != 6) {
            return 0LL;
          }
          goto LABEL_7;
        default:
          goto LABEL_7;
      }
    }

    return 0LL;
  }

  if (v11 != 0x300000000LL) {
    return 0LL;
  }
LABEL_7:
  uint64_t v12 = a8 & 0xFF000000000000LL;
  if ((a4 & 0xFF000000000000LL) == 0x4000000000000LL)
  {
    if (v12 != 0x4000000000000LL) {
      return 0LL;
    }
  }

  else if (v12 == 0x4000000000000LL || ((a8 ^ a4) & 0xFF000000000000LL) != 0)
  {
    return 0LL;
  }

  unint64_t v13 = HIBYTE(a8);
  if (HIBYTE(a4) == 6)
  {
    if ((_DWORD)v13 != 6) {
      return 0LL;
    }
  }

  else if ((_DWORD)v13 == 6 || HIBYTE(a4) != v13)
  {
    return 0LL;
  }

  return 1LL;
}

uint64_t sub_1002D594C(uint64_t result)
{
  unint64_t v1 = 0LL;
  unint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = result + 24;
LABEL_2:
  if (v1 <= v2) {
    unint64_t v4 = v2;
  }
  else {
    unint64_t v4 = v1;
  }
  unint64_t v5 = v4 + 1;
  uint64_t v6 = v3 + 8 * v1;
  while (1)
  {
    if (v2 == v1) {
      return (uint64_t)_swiftEmptyArrayStorage;
    }
    if (v5 == ++v1) {
      break;
    }
    uint64_t v7 = (int *)(v6 + 8);
    int v8 = *(unsigned __int8 *)(v6 + 12);
    v6 += 8LL;
    if (!v8)
    {
      int v9 = *v7;
      char v10 = *((_BYTE *)v7 + 5);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
      if ((result & 1) == 0) {
        uint64_t result = sub_100267EF8(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
      }
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        uint64_t result = sub_100267EF8(v11 > 1, v12 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v12 + 1;
      unint64_t v13 = &_swiftEmptyArrayStorage[v12];
      *((_DWORD *)v13 + 8) = v9;
      *((_BYTE *)v13 + 36) = 0;
      *((_BYTE *)v13 + 37) = v10;
      goto LABEL_2;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1002D5A58(uint64_t result)
{
  unint64_t v1 = 0LL;
  unint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = result + 24;
LABEL_2:
  if (v1 <= v2) {
    unint64_t v4 = v2;
  }
  else {
    unint64_t v4 = v1;
  }
  unint64_t v5 = v4 + 1;
  uint64_t v6 = v3 + 8 * v1;
  while (1)
  {
    if (v2 == v1) {
      return (uint64_t)_swiftEmptyArrayStorage;
    }
    if (v5 == ++v1) {
      break;
    }
    uint64_t v7 = (int *)(v6 + 8);
    int v8 = *(unsigned __int8 *)(v6 + 12);
    v6 += 8LL;
    if (v8 == 1)
    {
      int v9 = *v7;
      char v10 = *((_BYTE *)v7 + 5);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
      if ((result & 1) == 0) {
        uint64_t result = sub_100267EF8(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
      }
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        uint64_t result = sub_100267EF8(v11 > 1, v12 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v12 + 1;
      unint64_t v13 = &_swiftEmptyArrayStorage[v12];
      *((_DWORD *)v13 + 8) = v9;
      *((_BYTE *)v13 + 36) = 1;
      *((_BYTE *)v13 + 37) = v10;
      goto LABEL_2;
    }
  }

  __break(1u);
  return result;
}

void sub_1002D5B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v68 = a2;
  uint64_t v74 = a1;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 408);
  uint64_t v64 = *(void *)(*v2 + 416);
  uint64_t v6 = *(void *)(v64 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v6,  v5,  &protocol requirements base descriptor for P2PControls);
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v76 = AssociatedTypeWitness;
  uint64_t v63 = v8;
  __chkstk_darwin();
  v51[0] = (char *)v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v51[3] = (char *)v51 - v10;
  uint64_t v75 = v6;
  uint64_t v69 = v5;
  uint64_t v11 = swift_getAssociatedTypeWitness(0LL, v6, v5, &protocol requirements base descriptor for P2PControls);
  uint64_t v61 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v62 = (char *)v51 - v12;
  type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  __chkstk_darwin();
  uint64_t v60 = (char *)v51 - v13;
  sub_100002274(&qword_10040F500);
  __chkstk_darwin();
  unint64_t v59 = (char *)v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_10040F510);
  __chkstk_darwin();
  uint64_t v58 = (char *)v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_10040FC20);
  __chkstk_darwin();
  int v57 = (char *)v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_10040FED0);
  __chkstk_darwin();
  int v56 = (char *)v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(qword_10040FC40);
  __chkstk_darwin();
  uint64_t v55 = (char *)v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_10040DA58);
  __chkstk_darwin();
  os_log_t v54 = (char *)v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_100410500);
  __chkstk_darwin();
  uint64_t v65 = (char *)v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v6,  v5,  v11,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v22 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  v11,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v53 = AssociatedConformanceWitness;
  uint64_t v67 = v11;
  uint64_t v23 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  v11,  v22,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.PreferencesBacking: PreferencesStorage);
  uint64_t v52 = type metadata accessor for Preferences(0LL, v22, v23, v24);
  v51[6] = *(void *)(v52 - 8);
  __chkstk_darwin();
  v51[5] = (char *)v51 - v25;
  sub_100002274(&qword_10040F508);
  __chkstk_darwin();
  uint64_t v72 = (char *)v51 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = type metadata accessor for Logger(0LL);
  uint64_t v70 = *(void *)(v77 - 8);
  __chkstk_darwin();
  v51[2] = (char *)v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v66 = (char *)v51 - v28;
  v51[1] = v29;
  __chkstk_darwin();
  unint64_t v78 = (char *)v51 - v30;
  uint64_t v73 = type metadata accessor for UUID(0LL);
  uint64_t v31 = *(void *)(v73 - 8);
  __chkstk_darwin();
  unint64_t v33 = (char *)v51 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = *(void *)(v4 + 432);
  uint64_t v35 = type metadata accessor for Lock();
  swift_allocObject(v35, 24LL, 7LL);
  swift_retain();
  uint64_t v36 = Lock.init()();
  uint64_t v71 = v34;
  *(uint64_t *)((char *)v3 + v34) = v36;
  uint64_t v37 = (uint64_t)v3 + *(void *)(*v3 + 464);
  uint64_t v38 = type metadata accessor for DispatchTime(0LL);
  uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56LL);
  v39(v37, 1LL, 1LL, v38);
  unint64_t v40 = (uint64_t *)((char *)v3 + *(void *)(*v3 + 472));
  *unint64_t v40 = 24LL;
  uint64_t v41 = enum case for DispatchTimeInterval.seconds(_:);
  uint64_t v42 = type metadata accessor for DispatchTimeInterval(0LL);
  os_log_t v43 = *(uint64_t (**)(void))(*(void *)(v42 - 8) + 104LL);
  ((void (*)(void *, uint64_t, uint64_t))v43)(v40, v41, v42);
  *(uint64_t *)((char *)v3 + *(void *)(*v3 + 480)) = 0LL;
  v39((uint64_t)v3 + *(void *)(*v3 + 496), 1LL, 1LL, v38);
  *(uint64_t *)((char *)v3 + *(void *)(*v3 + 504)) = 24LL;
  uint64_t v44 = v43();
  uint64_t v45 = v69;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 + 512)) = 0LL;
  uint64_t v46 = (uint64_t)v3 + *(void *)(*v3 + 552);
  UUID.init()(v44);
  uint64_t v47 = v46 + *(int *)(sub_100002274(&qword_10040F4D8) + 36);
  *(void *)uint64_t v47 = 0LL;
  *(void *)(v47 + 8) = 0LL;
  *(_WORD *)(v47 + 20) = 3;
  *(_DWORD *)(v47 + swift_weakDestroy(v0 + 16) = 0;
  *(void *)(v47 + 24) = 0x604000300000000LL;
  (*(void (**)(uint64_t, char *, uint64_t))(v31 + 32))(v46, v33, v73);
  *(uint64_t *)((char *)v3 + *(void *)(*v3 + 560)) = 0LL;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 + 568)) = 0LL;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 + 576)) = 0LL;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 + 584)) = 0LL;
  *((_BYTE *)v3 + *(void *)(*v3 + 592)) = 3;
  uint64_t v48 = v76;
  uint64_t v49 = swift_getAssociatedConformanceWitness( v75,  v45,  v76,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
  uint64_t v75 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 40))(v48, v49);
  uint64_t v50 = (char *)&loc_1002D6254
      + *((int *)qword_1002D6FE0 + (*(unsigned __int8 (**)(uint64_t, uint64_t))(v49 + 32))(v48, v49));
  __asm { BR              X10 }

uint64_t *sub_1002D626C()
{
  uint64_t v5 = *(void *)(v4 - 152);
  Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xED00006E616E2E65LL,  0x6361667265746E69LL,  0xE900000000000065LL);
  *(void *)(v4 - 120) = *(void *)(v4 - 176);
  *(void *)(v4 - 112) = v1;
  swift_bridgeObjectRetain(v1);
  v6._countAndFlagsBits = 0x74706F2050325020LL;
  v6._object = (void *)0xEC000000736E6F69LL;
  String.append(_:)(v6);
  unint64_t v7 = *(void *)(v4 - 112);
  *(void *)(v4 - 384) = *(void *)(v4 - 120);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, void))(*(void *)(v4 - 216) + 16LL);
  *(void *)(v4 - 192) = v8;
  uint64_t v9 = *(void *)(v4 - 248);
  v8(v9, v5, *(void *)(v4 - 160));
  *(void *)(v4 - 120) = 0LL;
  *(_BYTE *)(v4 - 112) = 1;
  uint64_t v10 = *(void *)(v4 - 376);
  (*(void (**)(void))(*(void *)(v4 - 352) + 120LL))(*(void *)(v4 - 240));
  uint64_t v11 = *(void *)(v4 - 360);
  uint64_t v12 = Preferences.enableUserspaceP2POptions.getter(v11);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 368) + 8LL))(v10, v11);
  *(void *)(v4 - 136) = v12;
  uint64_t v13 = *(void *)(v4 - 264);
  uint64_t v14 = sub_1002D05C4(v3, v2, v13);
  uint64_t v16 = v15;
  uint64_t v17 = swift_allocObject(&unk_1003FA160, 32LL, 7LL);
  *(void *)(v17 + swift_weakDestroy(v0 + 16) = v14;
  *(void *)(v17 + 24) = v16;
  unint64_t v18 = sub_1000B2FC8();
  uint64_t v19 = *(uint64_t **)(v4 - 200);
  unint64_t v20 = v7;
  uint64_t v21 = v9;
  MutableDriverProperty.init(name:logger:initialValue:defaultValue:updater:valueDescriber:)( *(void *)(v4 - 384),  v20,  v9,  v4 - 120,  (char *)(v4 - 136),  (uint64_t)sub_100220C4C,  v17,  (uint64_t (*)(char *))sub_1002D56A0,  v19,  0LL,  (uint64_t)&type metadata for PreferenceDefaults.EnableUserspaceP2POptions,  v18);
  sub_1000586C0((uint64_t)v19, v0 + *(void *)(*(void *)v0 + 424LL), &qword_10040F508);
  *(void *)(v4 - 352) = *(void *)(v0 + *(void *)(v4 - 208));
  uint64_t v22 = *(void *)(v4 - 168);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v13,  v2,  v22,  &protocol requirements base descriptor for InfrastructureController,  &associated conformance descriptor for InfrastructureController.P2PControls.Driver: InfrastructureWiFiDriver);
  *(void *)(v4 - 200) = AssociatedConformanceWitness;
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 64);
  swift_retain();
  *(_BYTE *)(v4 - 136) = v24(v22, AssociatedConformanceWitness) & 1;
  uint64_t v25 = *(void *)(v4 - 176);
  *(void *)(v4 - 120) = v25;
  *(void *)(v4 - 112) = v1;
  swift_bridgeObjectRetain(v1);
  v26._countAndFlagsBits = 0x702069462D695720LL;
  v26._object = (void *)0xEC0000007265776FLL;
  String.append(_:)(v26);
  uint64_t v27 = *(void *)(v4 - 120);
  unint64_t v28 = *(void *)(v4 - 112);
  uint64_t v29 = *(void *)(v4 - 152);
  uint64_t v30 = v1;
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 - 192);
  v31(v21, v29, *(void *)(v4 - 160));
  uint64_t v32 = *(uint64_t (***)(char *))(v4 - 256);
  unint64_t v33 = *(uint64_t (**)(char *))(v4 - 352);
  ObservableWiFiProperty.init(lock:defaultValue:name:logger:valueDescriber:)( v33,  v4 - 136,  v27,  v28,  v21,  sub_1002D5648,  0LL,  (uint64_t)&type metadata for Bool,  v32,  (uint64_t)&protocol witness table for Bool);
  sub_1000586C0((uint64_t)v32, v0 + *(void *)(*(void *)v0 + 440LL), (uint64_t *)&unk_100410500);
  uint64_t v34 = *(void *)(v4 - 200);
  uint64_t v35 = *(uint64_t (**)(void, uint64_t))(v34 + 72);
  swift_retain();
  *(void *)(v4 - 120) = v35(*(void *)(v4 - 168), v34);
  *(void *)(v4 - 112) = v36;
  *(void *)(v4 - 104) = v37;
  *(_DWORD *)(v4 - 96) = v38;
  *(_WORD *)(v4 - 92) = v39;
  *(void *)(v4 - 136) = 0LL;
  *(void *)(v4 - 128) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(16LL);
  uint64_t v40 = *(void *)(v4 - 128);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v40);
  *(void *)(v4 - 136) = v25;
  *(void *)(v4 - 128) = v30;
  v41._countAndFlagsBits = 0x6E206172666E6920LL;
  v41._object = (void *)0xEE006B726F777465LL;
  String.append(_:)(v41);
  uint64_t v42 = *(void *)(v4 - 136);
  unint64_t v43 = *(void *)(v4 - 128);
  uint64_t v44 = v29;
  uint64_t v45 = *(void *)(v4 - 160);
  v31(v21, v44, v45);
  uint64_t v46 = sub_100002274(&qword_10040F470);
  uint64_t v47 = sub_100087780( &qword_10040F478,  &qword_10040F470,  (void (*)(void))sub_100062580,  (uint64_t)&protocol conformance descriptor for <A> A?);
  uint64_t v48 = *(uint64_t (***)(char *))(v4 - 344);
  ObservableWiFiProperty.init(lock:defaultValue:name:logger:valueDescriber:)( v33,  v4 - 120,  v42,  v43,  v21,  (uint64_t (*)(char *))sub_1002D0760,  0LL,  v46,  v48,  v47);
  sub_1000586C0((uint64_t)v48, v0 + *(void *)(*(void *)v0 + 448LL), &qword_10040DA58);
  uint64_t v49 = *(void *)(v4 - 208);
  uint64_t v50 = *(uint64_t (**)(char *))(v0 + v49);
  *(_BYTE *)(v4 - 136) = 1;
  *(void *)(v4 - 120) = 0LL;
  *(void *)(v4 - 112) = 0xE000000000000000LL;
  swift_retain();
  _StringGuts.grow(_:)(18LL);
  uint64_t v51 = *(void *)(v4 - 112);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v51);
  *(void *)(v4 - 120) = *(void *)(v4 - 176);
  *(void *)(v4 - 112) = v30;
  uint64_t v52 = v30;
  v53._countAndFlagsBits = 0xD000000000000010LL;
  v53._object = (void *)0x8000000100369660LL;
  String.append(_:)(v53);
  uint64_t v54 = *(void *)(v4 - 120);
  unint64_t v55 = *(void *)(v4 - 112);
  (*(void (**)(uint64_t, void, uint64_t))(v4 - 192))(v21, *(void *)(v4 - 152), v45);
  unint64_t v56 = sub_1000625C8();
  int v57 = *(uint64_t (***)(char *))(v4 - 336);
  ObservableWiFiProperty.init(lock:defaultValue:name:logger:valueDescriber:)( v50,  v4 - 136,  v54,  v55,  v21,  sub_1002D563C,  0LL,  (uint64_t)&type metadata for AutoJoinState,  v57,  v56);
  sub_1000586C0((uint64_t)v57, v0 + *(void *)(*(void *)v0 + 456LL), qword_10040FC40);
  uint64_t v58 = *(uint64_t (**)(char *))(v0 + v49);
  uint64_t v59 = *(void *)(v4 - 200);
  uint64_t v60 = *(uint64_t (**)(void, uint64_t))(v59 + 80);
  swift_retain();
  unsigned int v61 = v60(*(void *)(v4 - 168), v59);
  uint64_t v62 = v45;
  if ((v61 & 0x10000) != 0)
  {
    uint64_t v63 = CountryCode.unknown.unsafeMutableAddressor();
    LOBYTE(v6sub_100058090(v4, v0 + 1) = *(_BYTE *)v63;
    LOBYTE(v63) = *((_BYTE *)v63 + 1);
  }

  else
  {
    LODWORD(v63) = v61 >> 8;
  }

  uint64_t v64 = *(uint64_t (***)(char *))(v4 - 328);
  *(_BYTE *)(v4 - 136) = v61;
  *(_BYTE *)(v4 - 135) = (_BYTE)v63;
  uint64_t v65 = *(void *)(v4 - 176);
  *(void *)(v4 - 120) = v65;
  *(void *)(v4 - 112) = v52;
  uint64_t v66 = v52;
  swift_bridgeObjectRetain(v52);
  v67._countAndFlagsBits = 0x7972746E756F6320LL;
  v67._object = (void *)0xED000065646F6320LL;
  String.append(_:)(v67);
  uint64_t v68 = *(void *)(v4 - 120);
  unint64_t v69 = *(void *)(v4 - 112);
  uint64_t v70 = *(void *)(v4 - 248);
  uint64_t v71 = *(void *)(v4 - 152);
  uint64_t v72 = v62;
  uint64_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 - 192);
  v73(v70, v71, v72);
  unint64_t v74 = sub_100125C18();
  ObservableWiFiProperty.init(lock:defaultValue:name:logger:valueDescriber:)( v58,  v4 - 136,  v68,  v69,  v70,  (uint64_t (*)(char *))sub_1002D55EC,  0LL,  (uint64_t)&type metadata for CountryCode,  v64,  v74);
  sub_1000586C0((uint64_t)v64, v0 + *(void *)(*(void *)v0 + 528LL), (uint64_t *)&unk_10040FED0);
  *(_BYTE *)(v4 - 136) = 0;
  *(void *)(v4 - 120) = 0LL;
  *(void *)(v4 - 112) = 0xE000000000000000LL;
  swift_retain();
  _StringGuts.grow(_:)(19LL);
  uint64_t v75 = *(void *)(v4 - 112);
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRelease(v75);
  *(void *)(v4 - 120) = v65;
  *(void *)(v4 - 112) = v66;
  v76._countAndFlagsBits = 0xD000000000000011LL;
  v76._object = (void *)0x8000000100369680LL;
  String.append(_:)(v76);
  uint64_t v77 = *(void *)(v4 - 120);
  unint64_t v78 = *(void *)(v4 - 112);
  uint64_t v79 = *(void *)(v4 - 160);
  v73(v70, v71, v79);
  uint64_t v80 = *(uint64_t (***)(char *))(v4 - 256);
  ObservableWiFiProperty.init(lock:defaultValue:name:logger:valueDescriber:)( v58,  v4 - 136,  v77,  v78,  v70,  sub_1002D5648,  0LL,  (uint64_t)&type metadata for Bool,  v80,  (uint64_t)&protocol witness table for Bool);
  sub_1000586C0((uint64_t)v80, v0 + *(void *)(*(void *)v0 + 520LL), (uint64_t *)&unk_100410500);
  unint64_t v81 = *(uint64_t (**)(char *))(v0 + *(void *)(v4 - 208));
  *(void *)(v4 - 120) = 0LL;
  *(void *)(v4 - 112) = 0LL;
  uint64_t v82 = v79;
  v73(v70, v71, v79);
  uint64_t v83 = v73;
  swift_retain();
  uint64_t v84 = sub_100002274(&qword_10040AB68);
  unint64_t v85 = sub_1002D4C3C();
  uint64_t v86 = *(uint64_t (***)(char *))(v4 - 320);
  ObservableWiFiProperty.init(lock:defaultValue:name:logger:valueDescriber:)( v81,  v4 - 120,  0xD000000000000018LL,  0x80000001003696A0LL,  v70,  (uint64_t (*)(char *))sub_1002D07BC,  0LL,  v84,  v86,  v85);
  sub_1000586C0((uint64_t)v86, v0 + *(void *)(*(void *)v0 + 536LL), (uint64_t *)&unk_10040FC20);
  *(_BYTE *)(v4 - 136) = 4;
  *(void *)(v4 - 120) = *(void *)(v4 - 176);
  *(void *)(v4 - 112) = v66;
  swift_retain();
  v87._countAndFlagsBits = 1399804192LL;
  v87._object = (void *)0xE400000000000000LL;
  String.append(_:)(v87);
  uint64_t v88 = *(void *)(v4 - 120);
  unint64_t v89 = *(void *)(v4 - 112);
  uint64_t v90 = v71;
  v83(v70, v71, v82);
  uint64_t v91 = v83;
  uint64_t v92 = sub_100002274(&qword_10040F4B8);
  uint64_t v93 = sub_100087780( &qword_10040F4C0,  &qword_10040F4B8,  (void (*)(void))sub_10019F8EC,  (uint64_t)&protocol conformance descriptor for <A> A?);
  uint64_t v94 = *(uint64_t (***)(char *))(v4 - 312);
  uint64_t v95 = v91;
  ObservableWiFiProperty.init(lock:defaultValue:name:logger:valueDescriber:)( v81,  v4 - 136,  v88,  v89,  v70,  sub_1002D5594,  0LL,  v92,  v94,  v93);
  sub_1000586C0((uint64_t)v94, v0 + *(void *)(*(void *)v0 + 544LL), (uint64_t *)&unk_10040F510);
  *(_WORD *)(v4 - 1swift_weakDestroy(v0 + 16) = 3;
  *(_DWORD *)(v4 - 120) = 0;
  uint64_t v96 = *(void *)(v4 - 160);
  v91(v70, v90, v96);
  swift_retain();
  uint64_t v97 = sub_100002274((uint64_t *)&unk_10040FD40);
  uint64_t v98 = sub_100087780( &qword_10040F490,  (uint64_t *)&unk_10040FD40,  (void (*)(void))sub_1001894A8,  (uint64_t)&protocol conformance descriptor for <A> A?);
  unint64_t v99 = *(uint64_t (***)(char *))(v4 - 304);
  ObservableWiFiProperty.init(lock:defaultValue:name:logger:valueDescriber:)( v81,  v4 - 120,  0xD000000000000017LL,  0x80000001003696C0LL,  v70,  (uint64_t (*)(char *))sub_1002D0804,  0LL,  v97,  v99,  v98);
  sub_1000586C0((uint64_t)v99, v0 + *(void *)(*(void *)v0 + 488LL), &qword_10040F500);
  __n128 v100 = swift_release(v0);
  uint64_t v101 = *(void *)(v4 - 272);
  uint64_t v102 = *(void (**)(void))(v101 + 16);
  uint64_t v103 = *(char **)(v4 - 296);
  uint64_t v104 = *(void *)(v4 - 168);
  ((void (*)(char *, void, uint64_t, __n128))v102)(v103, *(void *)(v4 - 184), v104, v100);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v101 + 56))(v103, 0LL, 1LL, v104);
  uint64_t v105 = *(void *)(v4 - 280);
  (*(void (**)(uint64_t, void, void))(*(void *)(v4 - 288) + 16LL))( v105,  *(void *)(v4 - 232),  *(void *)(v4 - 240));
  v95(v70, *(void *)(v4 - 152), v96);
  uint64_t v107 = WiFiInterface.init(driver:components:logger:)(v103, v105, v70, v106);
  if (!v107)
  {
    __break(1u);
    JUMPOUT(0x1002D6FE0LL);
  }

  int v108 = v107;
  uint64_t v109 = *(void *)(v4 - 392);
  *(void *)(v4 - 208) = (char *)v107 + *(void *)(*v107 + 96);
  *(void *)(v4 - 176) = v102;
  v102(v109);
  uint64_t v110 = swift_allocObject(&unk_1003FA098, 24LL, 7LL);
  swift_weakInit(v110 + 16, v108);
  uint64_t v111 = *(void *)(v4 - 400);
  (*(void (**)(uint64_t, void, uint64_t))(v4 - 192))(v111, *(void *)(v4 - 152), v96);
  uint64_t v112 = *(void *)(v4 - 216);
  uint64_t v113 = *(unsigned __int8 *)(v112 + 80);
  uint64_t v114 = (v113 + 40) & ~v113;
  __n128 v115 = (char *)swift_allocObject(&unk_1003FA188, v114 + *(void *)(v4 - 408), v113 | 7);
  uint64_t v116 = *(void *)(v4 - 264);
  *((void *)v115 + 2) = *(void *)(v4 - 224);
  *((void *)v115 + 3) = v116;
  *((void *)v115 + 4) = v110;
  (*(void (**)(char *, uint64_t, uint64_t))(v112 + 32))(&v115[v114], v111, v96);
  uint64_t v117 = *(void *)(v4 - 200);
  uint64_t v118 = *(void (**)(void (*)(uint64_t), char *, uint64_t, uint64_t))(v117 + 24);
  swift_retain();
  swift_retain();
  v118(sub_1002D7580, v115, v104, v117);
  uint64_t v119 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 272) + 8LL);
  *(void *)(v4 - 192) = v119;
  v119(v109, v104);
  swift_release(v110);
  __n128 v120 = swift_release(v115);
  uint64_t v121 = *(void *)(v4 - 416);
  (*(void (**)(uint64_t, void, uint64_t, __n128))(v4 - 176))(v121, *(void *)(v4 - 208), v104, v120);
  uint64_t v122 = swift_allocObject(&unk_1003FA098, 24LL, 7LL);
  swift_weakInit(v122 + 16, v108);
  uint64_t v123 = (void *)swift_allocObject(&unk_1003FA1B0, 40LL, 7LL);
  v123[2] = *(void *)(v4 - 224);
  v123[3] = v116;
  v123[4] = v122;
  uint64_t v124 = *(void *)(v117 + 8);
  uint64_t v125 = *(uint64_t (**)(double (*)(uint64_t, uint64_t), void *, uint64_t, uint64_t))(v124 + 40);
  swift_retain();
  uint64_t v126 = v125(sub_1002D75D4, v123, v104, v124);
  uint64_t v128 = v127;
  __n128 v129 = swift_release(v123);
  (*(void (**)(uint64_t, uint64_t, __n128))(v4 - 192))(v121, v104, v129);
  swift_release(v122);
  sub_1002CFE20(v126, v128);
  uint64_t v130 = *(void *)(v4 - 160);
  uint64_t v131 = *(void *)(v4 - 152);
  (*(void (**)(uint64_t))(*(void *)(v117 + 8) + 8LL))(v104);
  __n128 v132 = swift_release(v108);
  (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)(v4 - 216) + 8LL))(v131, v130, v132);
  return v108;
}

void sub_1002D6FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for InfrastructureWiFiInterface(0LL, *(void *)(v4 + 408), *(void *)(v4 + 416), a4);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  sub_1002D5B6C(a1, a2);
}

void sub_1002D7044()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 480LL);
  uint64_t v2 = *(void *)(v0 + v1);
  *(void *)(v0 + vsub_100058090(v4, v0 + 1) = 0LL;
  swift_release(v2);
  unint64_t v3 = sub_1002CF908(0x300000000LL);
  oslog = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v4 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Infra association ready", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }
}

void sub_1002D70F8(uint64_t a1)
{
  oslog = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Infra authentication complete", v2, 2u);
    swift_slowDealloc(v2, -1LL, -1LL);
  }
}

uint64_t sub_1002D7190()
{
  return swift_deallocObject(v0, 25LL, 7LL);
}

void sub_1002D71B4()
{
}

uint64_t sub_1002D71C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002D71D0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1002D71D8()
{
  return sub_1002D491C(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));
}

uint64_t sub_1002D71E4()
{
  return sub_1002D467C(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));
}

uint64_t sub_1002D71F0()
{
  return sub_1002D4424(v0);
}

uint64_t sub_1002D71F8()
{
  return sub_1002D43A0(*(void *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1002D7204()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1002D7230()
{
  return sub_1002D3E60(*(void *)(v0 + 16), *(_BYTE *)(v0 + 24), *(uint64_t **)(v0 + 32));
}

uint64_t sub_1002D7240()
{
  return sub_1002D3C2C(v0);
}

uint64_t sub_1002D7248()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 560LL);
  uint64_t result = *(void *)(v0 + v1);
  if (result >= 1)
  {
    *(void *)(v0 + vsub_100058090(v4, v0 + 1) = result - 1;
    return sub_1002D36BC(result);
  }

  return result;
}

uint64_t sub_1002D7268()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002D728C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1002D72B0()
{
}

uint64_t sub_1002D72BC()
{
  return sub_1002D1B10(*(void *)(v0 + 32));
}

uint64_t sub_1002D72C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_10040F4D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002D7310()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(*(void *)(v0 + 24) + 8LL),  *(void *)(v0 + 16),  &protocol requirements base descriptor for P2PControls);
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = *(void *)(sub_100002274(&qword_10040F4D8) - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v4 + v5 + v7) & ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = v3 | v7 | 7;
  uint64_t v11 = (v9 + v7 + v8) & ~v7;
  uint64_t v12 = v11 + v9;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, AssociatedTypeWitness);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL);
  v14(v0 + v8, v13);
  v14(v0 + v11, v13);
  return swift_deallocObject(v0, v12, v10);
}

uint64_t sub_1002D7400()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(swift_getAssociatedTypeWitness( 0LL,  *(void *)(v2 + 8),  v1,  &protocol requirements base descriptor for P2PControls)
                 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(sub_100002274(&qword_10040F4D8) - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  return sub_1002D025C( v0 + v4,  v0 + ((v4 + v5 + v7) & ~v7),  v0 + ((*(void *)(v6 + 64) + v7 + ((v4 + v5 + v7) & ~v7)) & ~v7),  v1,  v2);
}

unint64_t sub_1002D74A4()
{
  unint64_t result = qword_10040F4F0;
  if (!qword_10040F4F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035FAE8, &type metadata for InfrastructureRadioConstraints);
    atomic_store(result, (unint64_t *)&qword_10040F4F0);
  }

  return result;
}

uint64_t sub_1002D74E8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1002D750C()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1002D7580(uint64_t a1)
{
}

double sub_1002D75D4(uint64_t a1, uint64_t a2)
{
  return sub_1002D0AA0(a1, a2, *(void *)(v2 + 32));
}

uint64_t sub_1002D75E0()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(*(void *)(v0 + 24) + 8LL),  *(void *)(v0 + 16),  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, AssociatedTypeWitness);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002D7658(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(swift_getAssociatedTypeWitness( 0LL,  *(void *)(v4 + 8),  v3,  &protocol requirements base descriptor for P2PControls)
                                      - 8)
                          + 80LL);
  return sub_1002D06B0(a1, v1 + ((v5 + 32) & ~v5), v3, v4);
}

uint64_t sub_1002D7720(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = &unk_10035FB70;
    void v5[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[3] = &unk_10035FB88;
    v5[4] = &unk_10035FB88;
    v5[5] = &unk_10035FB88;
    v5[6] = &unk_10035FB88;
    uint64_t result = type metadata accessor for Logger(319LL);
    if (v4 <= 0x3F)
    {
      void v5[7] = *(void *)(result - 8) + 64LL;
      void v5[8] = &unk_10035FBA0;
      void v5[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
      uint64_t result = swift_initClassMetadata2(a1, 0LL, 10LL, v5, a1 + 96);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

void *sub_1002D77E8(void (*a1)(uint64_t *__return_ptr, int *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    unint64_t v18 = _swiftEmptyArrayStorage;
    sub_100069964(0, v5, 0);
    uint64_t v6 = _swiftEmptyArrayStorage;
    for (uint64_t i = a3 + 37; ; i += 6LL)
    {
      __int16 v10 = *(_WORD *)(i - 1);
      int v15 = *(_DWORD *)(i - 5);
      __int16 v16 = v10;
      a1(&v17, &v15);
      if (v4) {
        break;
      }
      uint64_t v4 = 0LL;
      uint64_t v11 = v17;
      unint64_t v18 = v6;
      unint64_t v13 = v6[2];
      unint64_t v12 = v6[3];
      if (v13 >= v12 >> 1)
      {
        sub_100069964(v12 > 1, v13 + 1, 1);
        uint64_t v6 = v18;
      }

      void v6[2] = v13 + 1;
      v6[v13 + 4] = v11;
      if (!--v5) {
        return v6;
      }
    }

    swift_release(v6);
  }

  return v6;
}

void sub_1002D78FC(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  void (*v34)(uint64_t *__return_ptr, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  uint64_t v33 = sub_100002274(&qword_10040F8B8);
  __chkstk_darwin();
  uint64_t v32 = (uint64_t)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v31 = (char *)&v30 - v6;
  __chkstk_darwin();
  uint64_t v8 = (char *)&v30 - v7;
  uint64_t v9 = *(void *)(a3 + 16);
  if (v9)
  {
    int v38 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v9);
    uint64_t v10 = sub_100303870(a3);
    uint64_t v12 = v11;
    char v14 = v13 & 1;
    uint64_t v30 = a3 + 64;
    for (uint64_t i = v9 - 1; ; uint64_t i = v36 - 1)
    {
      uint64_t v36 = i;
      uint64_t v16 = v33;
      uint64_t v17 = *(int *)(v33 + 48);
      char v18 = v14 & 1;
      id v19 = sub_10022D5D0(v8, v10, v12, v14 & 1, a3);
      *(void *)&v8[v17] = v19;
      uint64_t v20 = type metadata accessor for UUID(0LL);
      uint64_t v21 = v31;
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16LL))(v31, v8, v20);
      *(void *)&v21[*(int *)(v16 + 48)] = v19;
      uint64_t v22 = (uint64_t)v21;
      uint64_t v23 = v32;
      sub_1002DD534(v22, v32);
      id v24 = v19;
      sub_1000225EC((uint64_t)v8, &qword_10040F8B8);
      v34(&v37, v23);
      uint64_t v25 = sub_1000225EC(v23, &qword_10040F8B8);
      if (v3)
      {
        sub_100022588(v10, v12, v18);
        swift_release(v38);
        return;
      }

      uint64_t v26 = v37;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v25);
      uint64_t v27 = v38[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v27);
      uint64_t v28 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v26);
      specialized ContiguousArray._endMutation()(v28);
      if (v10 < 0 || v10 >= -(-1LL << *(_BYTE *)(a3 + 32))) {
        break;
      }
      if (*(_DWORD *)(a3 + 36) != (_DWORD)v12) {
        goto LABEL_14;
      }
      uint64_t v29 = _HashTable.occupiedBucket(after:)(v10);
      if (!v36) {
        return;
      }
      uint64_t v10 = v29;
      char v14 = 0;
      uint64_t v12 = *(unsigned int *)(a3 + 36);
    }

    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }

Class sub_1002D7B78()
{
  uint64_t v0 = type metadata accessor for UUID(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1002D7C00((uint64_t)v3);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return isa;
}

uint64_t sub_1002D7C00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_100410BE0;
  swift_beginAccess(v3, v6, 0LL, 0LL);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

void sub_1002D7C64(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a3);
  id v7 = a1;
  sub_1002D7CE4((uint64_t)v6);
}

uint64_t sub_1002D7CE4(uint64_t a1)
{
  uint64_t v3 = v1 + qword_100410BE0;
  swift_beginAccess(v3, v6, 33LL, 0LL);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
  return swift_endAccess(v6);
}

id sub_1002D7D50()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRetain(v0);
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  return v2;
}

void sub_1002D7D9C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v6 = v5;
  id v7 = a1;
  sub_1002D7DF8(v4, v6);
}

uint64_t sub_1002D7DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + qword_100410BE8);
  uint64_t v4 = *(void *)(v2 + qword_100410BE8 + 8);
  *uint64_t v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_1002D7E14()
{
  return sub_1002D7E38() & 1;
}

uint64_t sub_1002D7E38()
{
  return *(unsigned __int8 *)(v0 + qword_10040F528);
}

uint64_t sub_1002D7E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D7E6C(a3);
}

uint64_t sub_1002D7E6C(uint64_t result)
{
  *(_BYTE *)(v1 + qword_10040F528) = result;
  return result;
}

uint64_t sub_1002D7E7C()
{
  return sub_1002D7EA0() & 1;
}

uint64_t sub_1002D7EA0()
{
  return *(unsigned __int8 *)(v0 + qword_10040F530);
}

uint64_t sub_1002D7EB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D7ED4(a3);
}

uint64_t sub_1002D7ED4(uint64_t result)
{
  *(_BYTE *)(v1 + qword_10040F530) = result;
  return result;
}

uint64_t sub_1002D7EE4()
{
  return sub_1002D7F08() & 1;
}

uint64_t sub_1002D7F08()
{
  return *(unsigned __int8 *)(v0 + qword_10040F538);
}

uint64_t sub_1002D7F18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D7F3C(a3);
}

uint64_t sub_1002D7F3C(uint64_t result)
{
  *(_BYTE *)(v1 + qword_10040F538) = result;
  return result;
}

uint64_t sub_1002D7F4C()
{
  return sub_1002D7F70() & 1;
}

uint64_t sub_1002D7F70()
{
  return *(unsigned __int8 *)(v0 + qword_10040F540);
}

uint64_t sub_1002D7F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D7FA4(a3);
}

uint64_t sub_1002D7FA4(uint64_t result)
{
  *(_BYTE *)(v1 + qword_10040F540) = result;
  return result;
}

char *sub_1002D7FB4(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_1002D7FE4(a1);
}

char *sub_1002D7FE4(uint64_t a1)
{
  uint64_t v31 = a1;
  uint64_t ObjectType = swift_getObjectType(v1);
  uint64_t v3 = swift_isaMask & *v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v30 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v7 = (void *)((char *)v1 + qword_100410BE8);
  unint64_t v33 = 0xD000000000000012LL;
  unint64_t v34 = 0x8000000100360620LL;
  uint64_t v8 = v1;
  v9._countAndFlagsBits = 32LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 5128526LL;
  v10._object = (void *)0xE300000000000000LL;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  unint64_t v11 = v34;
  *id v7 = v33;
  v7[1] = v11;
  *((_BYTE *)v8 + qword_10040F528) = 1;
  *((_BYTE *)v8 + qword_10040F530) = 0;
  *((_BYTE *)v8 + qword_10040F538) = 0;
  *((_BYTE *)v8 + qword_10040F540) = 0;
  uint64_t v12 = (char *)v8 + qword_100410BF0;
  Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xED00006E616E2E65LL,  0x416B726F7774656ELL,  0xEC000000746E6567LL);
  uint64_t v13 = qword_10040F548;
  uint64_t v15 = type metadata accessor for NANNetworkAgent.Client(0LL, *(void *)(v3 + 80), *(void *)(v3 + 88), v14);
  uint64_t v16 = sub_1002DD4F4(&qword_10040F8C0, (uint64_t)&protocol conformance descriptor for UUID);
  *(void *)((char *)v8 + v13) = Dictionary.init()(v4, v15, v16);
  uint64_t v17 = *OS_dispatch_queue.nan.unsafeMutableAddressor();
  char v18 = (objc_class *)ObjectType;
  id v19 = [objc_allocWithZone(NWNetworkAgentRegistration) initWithNetworkAgentClass:swift_getObjCClassFromMetadata(ObjectType) queue:v17];
  if (!v19)
  {
    swift_release(v31);

    swift_bridgeObjectRelease(v7[1]);
    uint64_t v28 = type metadata accessor for Logger(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v28 - 8) + 8LL))(v12, v28);
    swift_bridgeObjectRelease(*(void *)((char *)v8 + v13));
    swift_deallocPartialClassInstance( v8,  ObjectType,  *(unsigned int *)((swift_isaMask & *v8) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v8) + 0x34LL));
    return 0LL;
  }

  *(void *)((char *)v8 + qword_10040F520) = v19;
  id v20 = v19;
  UUID.init()(v20);
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))((uint64_t)v8 + qword_100410BE0, v6, v4);
  uint64_t v21 = v31;
  *(void *)((char *)v8 + qword_100410BF8) = v31;
  swift_unownedRetain(v21);

  v32.receiver = v8;
  v32.super_class = v18;
  uint64_t v22 = (char *)objc_msgSendSuper2(&v32, "init");
  uint64_t v23 = *(void **)&v22[qword_10040F520];
  id v24 = v22;
  if (![v23 registerNetworkAgent:v24])
  {

    swift_release(v21);
    return 0LL;
  }

  uint64_t v25 = *(void *)(v21 + *(void *)(*(void *)v21 + 104LL) + 8);
  id v26 = v23;
  swift_bridgeObjectRetain(v25);
  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v25);
  LOBYTE(v25) = [v26 addNetworkAgentToInterfaceNamed:v27];

  swift_release(v21);
  if ((v25 & 1) == 0)
  {

    return 0LL;
  }

  return v24;
}

uint64_t sub_1002D8370()
{
  return 1LL;
}

uint64_t sub_1002D837C()
{
  return 1LL;
}

uint64_t sub_1002D8388()
{
  return 0LL;
}

id sub_1002D8394()
{
  uint64_t v1 = v0;
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  return v2;
}

id sub_1002D83D0()
{
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xE300000000000000LL);
  return v0;
}

id sub_1002D8408(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
  unint64_t v7 = v6;

  uint64_t v8 = (void *)variable initialization expression of NANBitmap.Band.Iterator.currentIndex();
  sub_1000208D8(v5, v7);
  return v8;
}

uint64_t sub_1002D846C()
{
  return 0LL;
}

uint64_t sub_1002D8474(uint64_t a1)
{
  unint64_t v227 = *v1;
  unint64_t v226 = swift_isaMask;
  sub_100002274(qword_100410330);
  __chkstk_darwin();
  uint64_t v221 = (uint64_t)v213 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v224 = (char *)v213 - v4;
  __chkstk_darwin();
  unint64_t v6 = (char *)v213 - v5;
  __chkstk_darwin();
  uint64_t v8 = (char *)v213 - v7;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v229 = *(void *)(v9 - 8);
  __chkstk_darwin();
  unint64_t v11 = (char *)v213 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v218 = (char *)v213 - v12;
  __chkstk_darwin();
  uint64_t v222 = (uint64_t)v213 - v13;
  __chkstk_darwin();
  uint64_t v223 = (char *)v213 - v14;
  __chkstk_darwin();
  uint64_t v16 = (char *)v213 - v15;
  __chkstk_darwin();
  uint64_t v219 = (char *)v213 - v17;
  __chkstk_darwin();
  id v19 = (char *)v213 - v18;
  __chkstk_darwin();
  uint64_t v220 = (char *)v213 - v20;
  __chkstk_darwin();
  uint64_t v22 = (char *)v213 - v21;
  uint64_t result = __chkstk_darwin();
  uint64_t v25 = (char *)v213 - v24;
  if (!a1)
  {
    __break(1u);
    return result;
  }

  uint64_t v230 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(NWNetworkAgentStartOptionClientUUID);
  uint64_t v231 = v26;
  AnyHashable.init<A>(_:)(v232, &v230, &type metadata for String, &protocol witness table for String);
  if (*(void *)(a1 + 16))
  {
    unint64_t v27 = sub_100327928((uint64_t)v232);
    if ((v28 & 1) != 0)
    {
      sub_100002AE4(*(void *)(a1 + 56) + 32 * v27, (uint64_t)&v233);
    }

    else
    {
      __int128 v233 = 0u;
      __int128 v234 = 0u;
    }
  }

  else
  {
    __int128 v233 = 0u;
    __int128 v234 = 0u;
  }

  sub_1002DD57C((uint64_t)v232);
  if (!*((void *)&v234 + 1))
  {
    sub_1000225EC((uint64_t)&v233, &qword_100405280);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v229 + 56))(v8, 1LL, 1LL, v9);
    goto LABEL_12;
  }

  uint64_t v216 = v11;
  uint64_t v217 = v19;
  uint64_t v228 = v25;
  int v29 = swift_dynamicCast(v8, &v233, &type metadata for Any[8], v9, 6LL);
  uint64_t v30 = v229;
  uint64_t v31 = *(void (**)(char *, void, uint64_t, uint64_t))(v229 + 56);
  v31(v8, v29 ^ 1u, 1LL, v9);
  objc_super v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
  if (v32(v8, 1LL, v9) == 1)
  {
LABEL_12:
    sub_1000225EC((uint64_t)v8, qword_100410330);
    return 0LL;
  }

  unint64_t v33 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
  unint64_t v34 = v228;
  v33(v228, v8, v9);
  uint64_t v215 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
  v215(v6, v34, v9);
  v31(v6, 0LL, 1LL, v9);
  if (v32(v6, 1LL, v9) == 1)
  {
    uint64_t v35 = (void *)v9;
    Class isa = 0LL;
  }

  else
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    uint64_t v35 = (void *)v9;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v9);
  }

  uint64_t v37 = v30;
  id v38 = [(id)objc_opt_self(NWPath) pathForClientID:isa];

  if (!v38) {
    goto LABEL_32;
  }
  __int16 v39 = (void (*)(uint64_t, uint64_t, void *))v33;
  unint64_t v40 = v226 & v227;
  if ([v38 hasBrowseDescriptor])
  {
    id v41 = [v38 browseDescriptor];
    if (v41)
    {
      uint64_t v42 = v41;
      id v43 = [v41 bonjourServiceType];
      if (v43)
      {
        uint64_t v44 = v43;
        unint64_t v226 = (unint64_t)v42;
        unint64_t v227 = (unint64_t)v38;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
        unint64_t v45 = v40;
        uint64_t v47 = v46;

        id v48 = objc_allocWithZone(&OBJC_CLASS___WiFiAwareSubscribeConfiguration);
        NSString v49 = String._bridgeToObjectiveC()();
        id v50 = objc_msgSend(v48, "initWithServiceName:", v49, swift_bridgeObjectRelease(v47).n128_f64[0]);

        [v50 setAuthenticationType:0];
        uint64_t v52 = *(char **)(v45 + 80);
        uint64_t v51 = *(void *)(v45 + 88);
        uint64_t v54 = (objc_class *)type metadata accessor for NANNetworkAgent.SubscriberClient(0LL, (uint64_t)v52, v51, v53);
        unint64_t v55 = v228;
        unint64_t v56 = (uint64_t (*)(char *, char *, void *))v215;
        v215(v22, v228, (uint64_t)v35);
        int v57 = v225;
        id v58 = v50;
        id v59 = objc_allocWithZone(v54);
        uint64_t v224 = sub_1002DAC84(v57, (uint64_t)v22, v58);
        unint64_t v225 = v52;
        uint64_t v114 = v220;
        uint64_t v115 = v56(v220, v55, v35);
        uint64_t v116 = (os_log_s *)Logger.logObject.getter(v115);
        os_log_type_t v117 = static os_log_type_t.default.getter(v116);
        int v118 = v117;
        if (os_log_type_enabled(v116, v117))
        {
          LODWORD(v223) = v118;
          __n128 v120 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v222 = swift_slowAlloc(32LL, -1LL);
          v232[0] = v222;
          *(_DWORD *)__n128 v120 = 136315138;
          uint64_t v121 = sub_1002DD4F4((unint64_t *)&qword_10040D5B0, (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v122 = dispatch thunk of CustomStringConvertible.description.getter(v35, v121);
          unint64_t v124 = v123;
          *(void *)&__int128 v233 = sub_10000235C(v122, v123, v232);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, (char *)&v233 + 8);
          __n128 v125 = swift_bridgeObjectRelease(v124);
          uint64_t v126 = *(void (**)(char *, void *, __n128))(v229 + 8);
          v126(v114, v35, v125);
          _os_log_impl((void *)&_mh_execute_header, v116, (os_log_type_t)v223, "Subscribing for client %s", v120, 0xCu);
          uint64_t v127 = v222;
          swift_arrayDestroy(v222, 1LL, &type metadata for Any[8]);
          swift_slowDealloc(v127, -1LL, -1LL);
          swift_slowDealloc(v120, -1LL, -1LL);
        }

        else
        {

          uint64_t v126 = *(void (**)(char *, void *, __n128))(v229 + 8);
          ((void (*)(char *, void *))v126)(v114, v35);
        }

        uint64_t v156 = v217;
        uint64_t v157 = v228;
        v215(v217, v228, (uint64_t)v35);
        uint64_t v158 = v224;
        *(void *)&__int128 v233 = v224;
        swift_beginAccess(&v57[qword_10040F548], v232, 33LL, 0LL);
        uint64_t v160 = type metadata accessor for NANNetworkAgent.Client(255LL, (uint64_t)v225, v51, v159);
        uint64_t v161 = sub_1002DD4F4(&qword_10040F8C0, (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v162 = type metadata accessor for Dictionary(0LL, v35, v160, v161);
        uint64_t v163 = v158;
        Dictionary.subscript.setter(&v233, v156, v162);
        swift_endAccess(v232);

        ((void (*)(char *, void *))v126)(v157, v35);
        return 1LL;
      }

      goto LABEL_32;
    }
  }

  unint64_t v226 = v40;
  if (![v38 hasAdvertiseDescriptor]
    || (id v60 = [v38 advertiseDescriptor]) == 0)
  {
    id v95 = [v38 endpoint];
    if (v95)
    {
      uint64_t v96 = v95;
      uint64_t v97 = objc_opt_self(&OBJC_CLASS___NWBonjourServiceEndpoint);
      uint64_t v98 = (void *)swift_dynamicCastObjCClass(v96, v97);
      if (v98)
      {
        unint64_t v99 = v98;
        id v100 = [v98 domain];
        uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
        uint64_t v103 = v102;

        uint64_t v104 = v224;
        UUID.init(uuidString:)(v101, v103);
        __n128 v105 = swift_bridgeObjectRelease(v103);
        if (((unsigned int (*)(char *, uint64_t, void *, __n128))v32)(v104, 1LL, v35, v105) == 1)
        {
          (*(void (**)(char *, void *))(v229 + 8))(v228, v35);

          sub_1000225EC((uint64_t)v104, qword_100410330);
          return 0LL;
        }

        uint64_t v106 = v223;
        v33(v223, v104, (uint64_t)v35);
        id v107 = [v99 name];
        uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
        uint64_t v110 = v109;

        uint64_t v111 = v221;
        UUID.init(uuidString:)(v108, v110);
        __n128 v112 = swift_bridgeObjectRelease(v110);
        if (((unsigned int (*)(uint64_t, uint64_t, void *, __n128))v32)(v111, 1LL, v35, v112) == 1)
        {

          uint64_t v113 = *(void (**)(char *, void *))(v229 + 8);
          v113(v106, v35);
          v113(v228, v35);
          sub_1000225EC(v111, qword_100410330);
          return 0LL;
        }

        uint64_t v128 = v96;
        unint64_t v227 = (unint64_t)v38;
        v39(v222, v111, v35);
        __n128 v129 = &v225[qword_10040F548];
        swift_beginAccess(&v225[qword_10040F548], v232, 32LL, 0LL);
        uint64_t v130 = *(void *)v129;
        uint64_t v131 = *(void *)(v226 + 80);
        uint64_t v132 = *(void *)(v226 + 88);
        uint64_t v134 = type metadata accessor for NANNetworkAgent.Client(0LL, v131, v132, v133);
        uint64_t v135 = sub_1002DD4F4(&qword_10040F8C0, (uint64_t)&protocol conformance descriptor for UUID);
        unint64_t v136 = (unint64_t)v35;
        Dictionary.subscript.getter(v106, v130, v35, v134);
        uint64_t v137 = (void *)v233;
        swift_endAccess(v232);
        if (v137)
        {
          uint64_t v139 = type metadata accessor for NANNetworkAgent.SubscriberClient(0LL, v131, v132, v138);
          uint64_t v140 = swift_dynamicCastClass(v137, v139);
          if (v140)
          {
            unint64_t v141 = (uint64_t *)(v140 + qword_10040F6D8);
            swift_beginAccess(v140 + qword_10040F6D8, v232, 0LL, 0LL);
            uint64_t v142 = *v141;
            swift_bridgeObjectRetain(v142);

            if (*(void *)(v142 + 16))
            {
              unint64_t v143 = sub_10001C578(v222);
              if ((v144 & 1) != 0)
              {
                uint64_t v221 = v134;
                uint64_t v145 = (char *)*(id *)(*(void *)(v142 + 56) + 8 * v143);
                swift_bridgeObjectRelease(v142);
                id v146 = objc_allocWithZone(&OBJC_CLASS___WiFiAwareDatapathConfiguration);
                LOBYTE(v212) = 0;
                uint64_t v224 = v145;
                id v147 = [v146 initWithDiscoveryResult:v145 serviceType:0 passphrase:0 pmk:0 pmkID:0 serviceSpecificInfo:0 internetSharingCon figuration:0 pairingMethod:0 pairingCachingEnabled:v212 pairSetupServiceSpecificInfo:0];
                uint64_t v149 = (objc_class *)type metadata accessor for NANNetworkAgent.DataSessionClient(0LL, v131, v132, v148);
                uint64_t v150 = (uint64_t)v218;
                uint64_t v151 = v228;
                unint64_t v226 = v136;
                uint64_t v152 = (uint64_t (*)(char *, char *, unint64_t))v215;
                v215(v218, v228, v136);
                unint64_t v153 = v225;
                unint64_t v154 = (char *)v147;
                id v155 = objc_allocWithZone(v149);
                uint64_t v220 = sub_1002DBB54(v153, v150, v154);
                unint64_t v225 = v154;
                unint64_t v192 = v216;
                uint64_t v193 = v152(v216, v151, v226);
                uint64_t v194 = (os_log_s *)Logger.logObject.getter(v193);
                os_log_type_t v195 = static os_log_type_t.default.getter(v194);
                if (os_log_type_enabled(v194, v195))
                {
                  uint64_t v197 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                  uint64_t v219 = (char *)swift_slowAlloc(32LL, -1LL);
                  *(void *)&__int128 v233 = v219;
                  *(_DWORD *)uint64_t v197 = 136315138;
                  uint64_t v218 = (char *)(v197 + 4);
                  uint64_t v198 = sub_1002DD4F4( (unint64_t *)&qword_10040D5B0,  (uint64_t)&protocol conformance descriptor for UUID);
                  unint64_t v199 = v226;
                  uint64_t v200 = dispatch thunk of CustomStringConvertible.description.getter(v226, v198);
                  unint64_t v202 = v201;
                  uint64_t v230 = (char *)sub_10000235C(v200, v201, (uint64_t *)&v233);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, &v231);
                  __n128 v203 = swift_bridgeObjectRelease(v202);
                  uint64_t v204 = *(void (**)(char *, unint64_t, __n128))(v229 + 8);
                  v204(v192, v199, v203);
                  _os_log_impl((void *)&_mh_execute_header, v194, v195, "Data session for client %s", v197, 0xCu);
                  uint64_t v205 = v219;
                  swift_arrayDestroy(v219, 1LL, &type metadata for Any[8]);
                  swift_slowDealloc(v205, -1LL, -1LL);
                  swift_slowDealloc(v197, -1LL, -1LL);
                }

                else
                {

                  uint64_t v204 = *(void (**)(char *, unint64_t, __n128))(v229 + 8);
                  ((void (*)(char *, unint64_t))v204)(v192, v226);
                }

                uint64_t v206 = v217;
                uint64_t v207 = v228;
                unint64_t v208 = v226;
                v215(v217, v228, v226);
                uint64_t v209 = v220;
                uint64_t v230 = v220;
                swift_beginAccess(v129, &v233, 33LL, 0LL);
                uint64_t v210 = type metadata accessor for Dictionary(0LL, v208, v221, v135);
                uint64_t v211 = v209;
                Dictionary.subscript.setter(&v230, v206, v210);
                swift_endAccess(&v233);

                ((void (*)(uint64_t, unint64_t))v204)(v222, v208);
                ((void (*)(char *, unint64_t))v204)(v223, v208);
                ((void (*)(char *, unint64_t))v204)(v207, v208);
                return 1LL;
              }
            }

            __n128 v178 = swift_bridgeObjectRelease(v142);
LABEL_53:
            unint64_t v179 = v223;
            char v180 = *(void (**)(uint64_t, void *, __n128))(v229 + 8);
            v180(v222, v35, v178);
            ((void (*)(char *, void *))v180)(v179, v35);
            ((void (*)(char *, void *))v180)(v228, v35);
            return 0LL;
          }
        }

        goto LABEL_53;
      }
    }

LABEL_32:
    (*(void (**)(char *, void *))(v37 + 8))(v228, v35);
    return 0LL;
  }

  unsigned int v61 = v60;
  unint64_t v227 = (unint64_t)v38;
  id v62 = [v38 effectiveLocalEndpoint];
  unint64_t v63 = (unint64_t)v35;
  uint64_t v64 = v228;
  if (!v62)
  {
LABEL_39:

    (*(void (**)(char *, void *))(v229 + 8))(v64, v35);
    return 0LL;
  }

  uint64_t v65 = v62;
  uint64_t v66 = objc_opt_self(&OBJC_CLASS___NWAddressEndpoint);
  Swift::String v67 = (void *)swift_dynamicCastObjCClass(v65, v66);
  if (!v67)
  {

    goto LABEL_39;
  }

  uint64_t v220 = (char *)v61;
  id v68 = [v67 port];
  uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
  unint64_t v71 = v70;

  uint64_t v72 = sub_1002D996C(v69, v71);
  if ((v72 & 0x10000) != 0)
  {
    (*(void (**)(char *, void *))(v229 + 8))(v228, v35);

    return 0LL;
  }

  unsigned __int16 v73 = v72;
  uint64_t v223 = v16;
  unint64_t v74 = v220;
  id v75 = [v220 bonjourServiceType];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
  uint64_t v77 = v76;

  id v78 = objc_allocWithZone(&OBJC_CLASS___WiFiAwarePublishConfiguration);
  NSString v79 = String._bridgeToObjectiveC()();
  id v80 = objc_msgSend(v78, "initWithServiceName:", v79, swift_bridgeObjectRelease(v77).n128_f64[0]);

  [v80 setAuthenticationType:0];
  id v81 = [objc_allocWithZone(WiFiAwarePublishServiceSpecificInfo) init];
  id v82 = [v74 bonjourServiceName];
  [v81 setInstanceName:v82];

  uint64_t v224 = (char *)v81;
  [v80 setServiceSpecificInfo:v81];
  id v83 = [objc_allocWithZone(WiFiAwarePublishDatapathConfiguration) initWithServiceType:0 securityConfiguration:0];
  uint64_t v84 = (char *)[objc_allocWithZone(WiFiAwarePublishDatapathServiceSpecificInfo) initWithProtocolType:0 servicePort:v73];
  [v83 setServiceSpecificInfo:v84];
  [v80 setDatapathConfiguration:v83];
  uint64_t v85 = *(void *)(v226 + 80);
  uint64_t v86 = *(void *)(v226 + 88);
  uint64_t v88 = (objc_class *)type metadata accessor for NANNetworkAgent.PublisherClient(0LL, v85, v86, v87);
  uint64_t v89 = (uint64_t)v219;
  unint64_t v90 = v63;
  unint64_t v226 = v63;
  uint64_t v91 = (uint64_t (*)(char *, char *, unint64_t))v215;
  v215(v219, v228, v90);
  uint64_t v92 = v225;
  uint64_t v93 = (char *)v80;
  id v94 = objc_allocWithZone(v88);
  uint64_t v219 = sub_1002DB224(v92, v89, v93);
  uint64_t v221 = v86;
  uint64_t v222 = v85;
  unint64_t v225 = v93;
  uint64_t v218 = v84;
  id v214 = v83;
  os_log_type_t v164 = v224;
  uint64_t v216 = v92;
  uint64_t v165 = v223;
  unint64_t v166 = v226;
  uint64_t v167 = v91(v223, v228, v226);
  uint64_t v168 = (os_log_s *)Logger.logObject.getter(v167);
  os_log_type_t v169 = static os_log_type_t.default.getter(v168);
  if (os_log_type_enabled(v168, v169))
  {
    uint64_t v171 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v172 = swift_slowAlloc(32LL, -1LL);
    v232[0] = v172;
    *(_DWORD *)uint64_t v171 = 136315138;
    v213[1] = v171 + 4;
    uint64_t v173 = sub_1002DD4F4((unint64_t *)&qword_10040D5B0, (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v174 = dispatch thunk of CustomStringConvertible.description.getter(v166, v173);
    unint64_t v176 = v175;
    *(void *)&__int128 v233 = sub_10000235C(v174, v175, v232);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, (char *)&v233 + 8);
    __n128 v177 = swift_bridgeObjectRelease(v176);
    uint64_t v229 = *(void *)(v229 + 8);
    ((void (*)(char *, unint64_t, __n128))v229)(v165, v166, v177);
    _os_log_impl((void *)&_mh_execute_header, v168, v169, "Publishing for client %s", v171, 0xCu);
    swift_arrayDestroy(v172, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v172, -1LL, -1LL);
    swift_slowDealloc(v171, -1LL, -1LL);
  }

  else
  {

    uint64_t v229 = *(void *)(v229 + 8);
    ((void (*)(char *, unint64_t))v229)(v165, v166);
  }

  uint64_t v181 = v164;
  uint64_t v182 = v214;
  uint64_t v183 = v217;
  uint64_t v184 = v228;
  v215(v217, v228, v166);
  uint64_t v185 = v219;
  *(void *)&__int128 v233 = v219;
  swift_beginAccess(&v216[qword_10040F548], v232, 33LL, 0LL);
  uint64_t v187 = type metadata accessor for NANNetworkAgent.Client(255LL, v222, v221, v186);
  uint64_t v188 = sub_1002DD4F4(&qword_10040F8C0, (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v189 = type metadata accessor for Dictionary(0LL, v166, v187, v188);
  unint64_t v190 = v166;
  uint64_t v191 = v185;
  Dictionary.subscript.setter(&v233, v183, v189);
  swift_endAccess(v232);

  ((void (*)(char *, unint64_t))v229)(v184, v190);
  return 1LL;
}

char *sub_1002D9914(char *a1, uint64_t a2, void *a3)
{
  id v7 = objc_allocWithZone(v3);
  return sub_1002DAC84(a1, a2, a3);
}

uint64_t sub_1002D996C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease(a2);
    int v18 = 0;
    int v9 = 1;
    return v18 | (v9 << 16);
  }

  if ((a2 & 0x1000000000000000LL) == 0)
  {
    if ((a2 & 0x2000000000000000LL) == 0)
    {
      if ((a1 & 0x1000000000000000LL) != 0) {
        unint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        unint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
      }
      unsigned int v7 = sub_1002DC1DC(v6, v4, 10LL);
      LOWORD(v8) = v7;
      int v9 = HIWORD(v7) & 1;
      goto LABEL_38;
    }

    v22[0] = a1;
    v22[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    __int16 v10 = a1;
    if (a1 == 43)
    {
      if (v3)
      {
        if (v3 != 1)
        {
          unsigned int v8 = (BYTE1(a1) - 48);
          if (v8 <= 9)
          {
            uint64_t v14 = v3 - 2;
            if (v14)
            {
              uint64_t v15 = (unsigned __int8 *)v22 + 2;
              while (1)
              {
                unsigned int v16 = *v15 - 48;
                if (v16 > 9) {
                  goto LABEL_35;
                }
                unsigned int v8 = (unsigned __int16)(10 * v8) + v16;
                if ((v8 & 0x10000) != 0) {
                  goto LABEL_35;
                }
                int v9 = 0;
                ++v15;
                if (!--v14) {
                  goto LABEL_38;
                }
              }
            }

            goto LABEL_37;
          }
        }

        goto LABEL_35;
      }
    }

    else
    {
      if (a1 != 45)
      {
        if (v3)
        {
          unsigned int v8 = (a1 - 48);
          if (v8 <= 9)
          {
            uint64_t v17 = v3 - 1;
            if (v17)
            {
              uint64_t v20 = (unsigned __int8 *)v22 + 1;
              while (1)
              {
                unsigned int v21 = *v20 - 48;
                if (v21 > 9) {
                  goto LABEL_35;
                }
                unsigned int v8 = (unsigned __int16)(10 * v8) + v21;
                if ((v8 & 0x10000) != 0) {
                  goto LABEL_35;
                }
                int v9 = 0;
                ++v20;
                if (!--v17) {
                  goto LABEL_38;
                }
              }
            }

            goto LABEL_37;
          }
        }

        goto LABEL_35;
      }

      if (v3)
      {
        if (v3 != 1 && (BYTE1(a1) - 48) <= 9u)
        {
          __int16 v10 = 0;
          unsigned int v8 = -(BYTE1(a1) - 48);
          if ((v8 & 0xFFFF0000) == 0)
          {
            uint64_t v11 = v3 - 2;
            if (v11)
            {
              uint64_t v12 = (unsigned __int8 *)v22 + 2;
              while (1)
              {
                unsigned int v13 = *v12 - 48;
                if (v13 > 9) {
                  goto LABEL_35;
                }
                unsigned int v8 = (unsigned __int16)(10 * v8) - v13;
                if ((v8 & 0xFFFF0000) != 0) {
                  goto LABEL_35;
                }
                int v9 = 0;
                ++v12;
                if (!--v11) {
                  goto LABEL_38;
                }
              }
            }

char *sub_1002D9BDC(char *a1, uint64_t a2, void *a3)
{
  id v7 = objc_allocWithZone(v3);
  return sub_1002DB224(a1, a2, a3);
}

char *sub_1002D9C34(char *a1, uint64_t a2, void *a3)
{
  id v7 = objc_allocWithZone(v3);
  return sub_1002DBB54(a1, a2, a3);
}

uint64_t sub_1002D9C8C(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a3,  &type metadata for AnyHashable,  &type metadata for Any[8],  &protocol witness table for AnyHashable);
  }
  else {
    uint64_t v4 = 0LL;
  }
  id v5 = a1;
  char v6 = sub_1002D8474(v4);

  swift_bridgeObjectRelease(v4);
  return v6 & 1;
}

uint64_t sub_1002D9D0C(uint64_t a1)
{
  NSString v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = swift_isaMask;
  sub_100002274(qword_100410330);
  __chkstk_darwin();
  id v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin();
  uint64_t v14 = (char *)&v39 - v13;
  if (!a1)
  {
    __break(1u);
    return result;
  }

  v42[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(NWNetworkAgentStartOptionClientUUID);
  v42[1] = v15;
  AnyHashable.init<A>(_:)(v43, v42, &type metadata for String, &protocol witness table for String);
  if (*(void *)(a1 + 16) && (unint64_t v16 = sub_100327928((uint64_t)v43), (v17 & 1) != 0))
  {
    sub_100002AE4(*(void *)(a1 + 56) + 32 * v16, (uint64_t)&v44);
  }

  else
  {
    __int128 v44 = 0u;
    __int128 v45 = 0u;
  }

  sub_1002DD57C((uint64_t)v43);
  if (!*((void *)&v45 + 1))
  {
    sub_1000225EC((uint64_t)&v44, &qword_100405280);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1LL, 1LL, v8);
    return sub_1000225EC((uint64_t)v7, qword_100410330);
  }

  int v18 = swift_dynamicCast(v7, &v44, &type metadata for Any[8], v8, 6LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, v18 ^ 1u, 1LL, v8);
  uint64_t v19 = v5 & v4;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
  uint64_t v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 16))(v11, v14, v8);
  unsigned int v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc(12LL, -1LL);
    uint64_t v41 = v19;
    uint64_t v24 = (uint8_t *)v23;
    uint64_t v40 = swift_slowAlloc(32LL, -1LL);
    v43[0] = v40;
    *(_DWORD *)uint64_t v24 = 136315138;
    __int16 v39 = v24 + 4;
    uint64_t v25 = sub_1002DD4F4((unint64_t *)&qword_10040D5B0, (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v8, v25);
    unint64_t v28 = v27;
    *(void *)&__int128 v44 = sub_10000235C(v26, v27, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, (char *)&v44 + 8);
    __n128 v29 = swift_bridgeObjectRelease(v28);
    uint64_t v30 = *(void (**)(char *, uint64_t, __n128))(v9 + 8);
    v30(v11, v8, v29);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Terminating client %s", v24, 0xCu);
    uint64_t v31 = v40;
    swift_arrayDestroy(v40, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v31, -1LL, -1LL);
    objc_super v32 = v24;
    uint64_t v19 = v41;
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  else
  {

    uint64_t v30 = *(void (**)(char *, uint64_t, __n128))(v9 + 8);
    ((void (*)(char *, uint64_t))v30)(v11, v8);
  }

  swift_beginAccess((char *)v2 + qword_10040F548, v43, 33LL, 0LL);
  uint64_t v34 = type metadata accessor for NANNetworkAgent.Client(255LL, *(void *)(v19 + 80), *(void *)(v19 + 88), v33);
  uint64_t v35 = sub_1002DD4F4(&qword_10040F8C0, (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v36 = type metadata accessor for Dictionary(0LL, v8, v34, v35);
  Dictionary.removeValue(forKey:)(v14, v36);
  uint64_t v37 = swift_endAccess(v43);
  id v38 = (void *)v44;
  if ((void)v44)
  {
    (*(void (**)(uint64_t))((swift_isaMask & *(void *)v44) + 0x98LL))(v37);
  }

  return ((uint64_t (*)(char *, uint64_t))v30)(v14, v8);
}

double sub_1002DA11C(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a3,  &type metadata for AnyHashable,  &type metadata for Any[8],  &protocol witness table for AnyHashable);
  }
  else {
    uint64_t v4 = 0LL;
  }
  id v5 = a1;
  sub_1002D9D0C(v4);

  *(void *)&double result = swift_bridgeObjectRelease(v4).n128_u64[0];
  return result;
}

uint64_t sub_1002DA190(void *a1, uint64_t a2)
{
  return sub_1002DA324(a1, a2, (uint64_t (*)(void, void))sub_1002DCC54);
}

uint64_t sub_1002DA19C(uint64_t a1)
{
  uint64_t v2 = a1 + qword_100410BE0;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  swift_bridgeObjectRelease(*(void *)(a1 + qword_100410BE8 + 8));

  uint64_t v4 = a1 + qword_100410BF0;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  swift_unownedRelease(*(void *)(a1 + qword_100410BF8));
  return swift_bridgeObjectRelease(*(void *)(a1 + qword_10040F548));
}

uint64_t type metadata accessor for NANNetworkAgent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NANNetworkAgent);
}

uint64_t sub_1002DA254(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "\b";
    void v4[2] = &unk_10035FC00;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 3LL, v4, a1 + 96);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1002DA2D4()
{
  return swift_unknownObjectWeakLoadStrong(v0 + qword_10040F638);
}

uint64_t sub_1002DA2E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = os_transaction_create();
  if (result) {
    *a1 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002DA318(void *a1, uint64_t a2)
{
  return sub_1002DA324(a1, a2, (uint64_t (*)(void, void))sub_1002DCC80);
}

uint64_t sub_1002DA324(void *a1, uint64_t a2, uint64_t (*a3)(void, void))
{
  return a3(*(void *)((swift_isaMask & *a1) + 0x50LL), *(void *)((swift_isaMask & *a1) + 0x58LL));
}

id sub_1002DA340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (objc_class *)type metadata accessor for NANNetworkAgent.Client( 0LL,  *(void *)((swift_isaMask & *v4) + 0x50LL),  *(void *)((swift_isaMask & *v4) + 0x58LL),  a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "dealloc");
}

uint64_t sub_1002DA38C(uint64_t a1)
{
  uint64_t v2 = a1 + qword_10040F630;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  swift_unknownObjectWeakDestroy(a1 + qword_10040F638);
  return swift_unknownObjectRelease(*(void *)(a1 + qword_10040F640));
}

uint64_t type metadata accessor for NANNetworkAgent.Client(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NANNetworkAgent.Client);
}

uint64_t sub_1002DA3F8(uint64_t a1)
{
  v2[0] = "\b";
  v2[1] = &unk_10035FB88;
  v2[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0LL, 3LL, v2, a1 + 176);
}

uint64_t sub_1002DA450()
{
  return swift_unknownObjectWeakLoadStrong(v0 + qword_10040F6C8);
}

void sub_1002DA460(char a1)
{
  *(_BYTE *)(v1 + qword_10040F6D0) = a1;
  sub_1002DCB24();
}

void sub_1002DA470()
{
  uint64_t v1 = v0;
  type metadata accessor for NANSubscribe.Configuration(0LL);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong(&v1[qword_10040F638]);
  if (Strong)
  {
    uint64_t v4 = swift_unknownObjectWeakLoadStrong(&v1[qword_10040F6C8]);
    if (!v4)
    {

      return;
    }

    uint64_t v5 = (void *)v4;
    uint64_t v6 = v4 + qword_100410BB0;
    swift_beginAccess(v4 + qword_100410BB0, v56, 0LL, 0LL);
    sub_1002DD454(v6, (uint64_t)v3);

    uint64_t v7 = *((void *)v3 + 1);
    uint64_t v8 = *((void *)v3 + 2);
    swift_bridgeObjectRetain(v8);
    sub_1002DD498((uint64_t)v3);
    uint64_t v9 = (uint64_t *)&v1[qword_10040F6D8];
    swift_beginAccess(&v1[qword_10040F6D8], v55, 0LL, 0LL);
    uint64_t v10 = *v9;
    __chkstk_darwin();
    *(&v51 - 4) = v7;
    *(&v51 - 3) = v8;
    *(&v51 - 2) = (uint64_t)v1;
    swift_bridgeObjectRetain(v10);
    sub_1002D78FC((void (*)(uint64_t *__return_ptr, uint64_t))sub_1002DD4D4, (uint64_t)(&v51 - 6), v10);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v10);
    uint64_t v13 = *(void **)&Strong[qword_10040F520];
    if ((unint64_t)v12 >> 62)
    {
      if (v12 < 0) {
        uint64_t v47 = v12;
      }
      else {
        uint64_t v47 = v12 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v48 = sub_100058CD0(0LL, (unint64_t *)&unk_10040F898, &OBJC_CLASS___NWEndpoint_ptr);
      id v49 = v13;
      __n128 v50 = swift_bridgeObjectRetain(v12);
      uint64_t v16 = _bridgeCocoaArray<A>(_:)(v47, v48, v50);
      swift_bridgeObjectRelease(v12);
    }

    else
    {
      id v14 = v13;
      __n128 v15 = swift_bridgeObjectRetain(v12);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v15);
      sub_100058CD0(0LL, (unint64_t *)&unk_10040F898, &OBJC_CLASS___NWEndpoint_ptr);
      uint64_t v16 = v12;
    }

    swift_bridgeObjectRelease(v12);
    sub_100058CD0(0LL, (unint64_t *)&unk_10040F898, &OBJC_CLASS___NWEndpoint_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v16);
    Class v18 = UUID._bridgeToObjectiveC()().super.isa;
    unsigned int v19 = [v13 assignDiscoveredEndpoints:isa toClient:v18];

    uint64_t v20 = v1;
    uint64_t v21 = Logger.logObject.getter(v20);
    os_log_type_t v22 = (os_log_s *)v21;
    if (v19)
    {
      os_log_type_t v23 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = swift_slowAlloc(22LL, -1LL);
        uint64_t v51 = swift_slowAlloc(64LL, -1LL);
        uint64_t v54 = v51;
        *(_DWORD *)uint64_t v24 = 136315394;
        uint64_t v25 = *v9;
        uint64_t v26 = type metadata accessor for UUID(0LL);
        sub_100058CD0(0LL, (unint64_t *)&qword_10040F108, &OBJC_CLASS___WiFiAwareDiscoveryResult_ptr);
        sub_1002DD4F4(&qword_10040F8C0, (uint64_t)&protocol conformance descriptor for UUID);
        __n128 v27 = swift_bridgeObjectRetain(v25);
        uint64_t v28 = Dictionary.description.getter(v27);
        unint64_t v30 = v29;
        swift_bridgeObjectRelease(v25);
        uint64_t v53 = sub_10000235C(v28, v30, &v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);

        swift_bridgeObjectRelease(v30);
        *(_WORD *)(v24 + 12) = 2080;

        uint64_t v31 = sub_1002DD4F4((unint64_t *)&qword_10040D5B0, (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter(v26, v31);
        unint64_t v34 = v33;
        uint64_t v53 = sub_10000235C(v32, v33, &v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);

        swift_bridgeObjectRelease(v34);
        uint64_t v35 = "Assigned %s to client %s";
LABEL_11:
        _os_log_impl((void *)&_mh_execute_header, v22, v23, v35, (uint8_t *)v24, 0x16u);
        uint64_t v46 = v51;
        swift_arrayDestroy(v51, 2LL, &type metadata for Any[8]);
        swift_slowDealloc(v46, -1LL, -1LL);
        swift_slowDealloc(v24, -1LL, -1LL);

        return;
      }
    }

    else
    {
      os_log_type_t v23 = static os_log_type_t.error.getter(v21);
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = swift_slowAlloc(22LL, -1LL);
        uint64_t v51 = swift_slowAlloc(64LL, -1LL);
        uint64_t v54 = v51;
        *(_DWORD *)uint64_t v24 = 136315394;
        uint64_t v36 = *v9;
        uint64_t v37 = type metadata accessor for UUID(0LL);
        sub_100058CD0(0LL, (unint64_t *)&qword_10040F108, &OBJC_CLASS___WiFiAwareDiscoveryResult_ptr);
        sub_1002DD4F4(&qword_10040F8C0, (uint64_t)&protocol conformance descriptor for UUID);
        __n128 v38 = swift_bridgeObjectRetain(v36);
        uint64_t v39 = Dictionary.description.getter(v38);
        unint64_t v41 = v40;
        swift_bridgeObjectRelease(v36);
        uint64_t v53 = sub_10000235C(v39, v41, &v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);

        swift_bridgeObjectRelease(v41);
        *(_WORD *)(v24 + 12) = 2080;

        uint64_t v42 = sub_1002DD4F4((unint64_t *)&qword_10040D5B0, (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter(v37, v42);
        unint64_t v45 = v44;
        uint64_t v53 = sub_10000235C(v43, v44, &v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);

        swift_bridgeObjectRelease(v45);
        uint64_t v35 = "Failed to assign %s to client %s";
        goto LABEL_11;
      }
    }
  }

void sub_1002DAA98(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  os_log_type_t v22 = a3;
  sub_100002274(&qword_10040F8B8);
  uint64_t v5 = __chkstk_darwin();
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(int *)(v5 + 48);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v7, a1, v9);
  *(void *)&v7[v8] = *(void *)(a1 + v8);
  UUID.uuidString.getter(v11);
  uint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
  swift_bridgeObjectRetain(a2);
  UUID.uuidString.getter(v14);
  uint64_t v16 = v15;
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  id v20 =  [(id)objc_opt_self(NWBonjourServiceEndpoint) endpointWithName:v17 type:v18 domain:v19];

  *os_log_type_t v22 = v20;
}

void sub_1002DAC28(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + qword_10040F6D8);
  swift_beginAccess(v1 + qword_10040F6D8, v5, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  swift_bridgeObjectRelease(v4);
  sub_1002DA470();
}

char *sub_1002DAC84(char *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v4;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_unknownObjectWeakInit(v3 + qword_10040F6C8, 0LL);
  *(_BYTE *)(v3 + qword_10040F6D0) = 0;
  *(void *)(v3 + qword_10040F6D8) = _swiftEmptyDictionarySingleton;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  uint64_t v13 = (void *)sub_1002DC954((uint64_t)a1, (uint64_t)v12);
  uint64_t v14 = *(void *)&a1[qword_100410BF8];
  swift_unownedRetainStrong(v14);
  id v15 = v13;
  uint64_t v19 = sub_1002E8D68((uint64_t)v15, v16, v17, v18);
  swift_release(v14);
  id v20 = (char *)v15;
  uint64_t v21 = sub_10029D270((uint64_t)a3, (uint64_t)v20);
  if (v5)
  {

    swift_release(v19);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
  }

  else
  {
    os_log_type_t v22 = (void *)v21;

    swift_release(v19);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
    swift_unknownObjectWeakAssign(&v20[qword_10040F6C8], v22);
  }

  return v20;
}

uint64_t sub_1002DAE2C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + qword_10040F6D8));
}

id sub_1002DAE58()
{
  return sub_1002DBD58( &qword_10040F6D0,  (uint64_t (*)(void, void, void))type metadata accessor for NANNetworkAgent.SubscriberClient);
}

id sub_1002DAE6C(void *a1)
{
  id v1 = a1;
  return sub_1002DAE58();
}

uint64_t sub_1002DAE90(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + qword_10040F6D8));
}

void sub_1002DAEC8()
{
  *(_BYTE *)(v0 + qword_10040F6D0) = 0;
  sub_1002DCB24();
}

void sub_1002DAED8(void *a1)
{
  id v1 = a1;
  sub_1002DCCAC();
}

void sub_1002DAF0C(void *a1)
{
  id v1 = a1;
  sub_1002DCCC0();
}

void sub_1002DAF40(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin();
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  UUID.init()(v6);
  uint64_t v9 = (void *)(v2 + qword_10040F6D8);
  swift_beginAccess(v2 + qword_10040F6D8, v15, 33LL, 0LL);
  id v10 = a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
  uint64_t v14 = *v9;
  *uint64_t v9 = 0x8000000000000000LL;
  sub_100244888((uint64_t)v10, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  uint64_t v12 = *v9;
  *uint64_t v9 = v14;
  __n128 v13 = swift_bridgeObjectRelease(v12);
  (*(void (**)(_BYTE *, uint64_t, __n128))(v5 + 8))(v8, v4, v13);
  swift_endAccess(v15);
  sub_1002DA470();
}

void sub_1002DB044(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  sub_1002DAF40(v4);
}

void sub_1002DB098(int a1, void *a2)
{
  id v5 = (uint64_t *)(v2 + qword_10040F6D8);
  swift_beginAccess(v2 + qword_10040F6D8, v9, 0LL, 0LL);
  uint64_t v6 = *v5;
  swift_bridgeObjectRetain(v6);
  id v7 = a2;
  uint64_t v8 = sub_1002DD130(v6, a1, v7);
  swift_bridgeObjectRelease(v6);

  sub_1002DAC28(v8);
}

void sub_1002DB128(void *a1, uint64_t a2, int a3, void *a4)
{
  id v6 = a4;
  id v7 = a1;
  sub_1002DB098(a3, v6);
}

uint64_t type metadata accessor for NANNetworkAgent.SubscriberClient( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NANNetworkAgent.SubscriberClient);
}

uint64_t sub_1002DB194(uint64_t a1)
{
  v2[0] = "\b";
  v2[1] = &unk_10035FB88;
  return swift_initClassMetadata2(a1, 0LL, 2LL, v2, a1 + 176);
}

uint64_t sub_1002DB1DC()
{
  return swift_unknownObjectWeakLoadStrong(v0 + qword_10040F760);
}

void sub_1002DB1EC(char a1)
{
  *(_BYTE *)(v1 + qword_10040F768[0]) = a1;
  sub_1002DCBD0(qword_10040F768, &qword_10040F760, (void (*)(void))sub_10025E338);
}

char *sub_1002DB224(char *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v4;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_unknownObjectWeakInit(v3 + qword_10040F760, 0LL);
  *(_BYTE *)(v3 + qword_10040F768) = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  __n128 v13 = (void *)sub_1002DC954((uint64_t)a1, (uint64_t)v12);
  uint64_t v14 = *(void *)&a1[qword_100410BF8];
  swift_unownedRetainStrong(v14);
  id v15 = v13;
  uint64_t v19 = sub_1002E8D68((uint64_t)v15, v16, v17, v18);
  swift_release(v14);
  id v20 = (char *)v15;
  uint64_t v21 = sub_10029D28C((uint64_t)a3, (uint64_t)v20);
  if (v5)
  {

    swift_release(v19);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
  }

  else
  {
    os_log_type_t v22 = (void *)v21;

    swift_release(v19);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
    swift_unknownObjectWeakAssign(&v20[qword_10040F760], v22);
  }

  return v20;
}

uint64_t sub_1002DB3B8()
{
  return swift_unknownObjectWeakDestroy(v0 + qword_10040F760);
}

id sub_1002DB3C8()
{
  return sub_1002DBD58( qword_10040F768,  (uint64_t (*)(void, void, void))type metadata accessor for NANNetworkAgent.PublisherClient);
}

id sub_1002DB3DC(void *a1)
{
  id v1 = a1;
  return sub_1002DB3C8();
}

uint64_t sub_1002DB400(uint64_t a1)
{
  return swift_unknownObjectWeakDestroy(a1 + qword_10040F760);
}

void sub_1002DB410()
{
  *(_BYTE *)(v0 + qword_10040F768[0]) = 0;
  sub_1002DCBD0(qword_10040F768, &qword_10040F760, (void (*)(void))sub_10025E338);
}

void sub_1002DB444(void *a1)
{
  id v1 = a1;
  sub_1002DD2D8();
}

void sub_1002DB478(void *a1)
{
  id v1 = a1;
  sub_1002DD310(&qword_10040F760, qword_10040F768, (void (*)(void))sub_10025E338);
}

void sub_1002DB4D4(int a1, int a2, int a3, int a4, void *aBlock)
{
  uint64_t v5 = _Block_copy(aBlock);
  _Block_release(v5);
}

uint64_t type metadata accessor for NANNetworkAgent.PublisherClient( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NANNetworkAgent.PublisherClient);
}

uint64_t sub_1002DB4F8(uint64_t a1)
{
  v2[0] = "\b";
  v2[1] = &unk_10035FCD8;
  void v2[2] = &unk_10035FB88;
  void v2[3] = &unk_10035FCF0;
  return swift_initClassMetadata2(a1, 0LL, 4LL, v2, a1 + 176);
}

uint64_t sub_1002DB554()
{
  return swift_unknownObjectWeakLoadStrong(v0 + qword_10040F7F0);
}

uint64_t sub_1002DB564(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + qword_10040F7F8);
  uint64_t v4 = *(void *)(v2 + qword_10040F7F8 + 8);
  *uint64_t v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease(v4);
}

void sub_1002DB580(char a1)
{
  *(_BYTE *)(v1 + qword_10040F800) = a1;
  sub_1002DCBD0(&qword_10040F800, &qword_10040F7F0, sub_10027A194);
}

void sub_1002DB5B8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong(&v1[qword_10040F638]);
  if (Strong)
  {
    uint64_t v5 = qword_10040F808;
    id v6 = *(void **)&v1[qword_10040F808];
    uint64_t v47 = Strong;
    if (v6)
    {
      if (!a1)
      {
        uint64_t v10 = *(void **)&Strong[qword_10040F520];
LABEL_10:
        uint64_t v11 = sub_100002274(&qword_10040F8A8);
        uint64_t v12 = swift_allocObject(v11, 40LL, 7LL);
        *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_10035FB40;
        *(void *)(v12 + 32) = v6;
        __n128 v50 = (void *)v12;
        specialized Array._endMutation()(v12);
        __n128 v13 = v50;
LABEL_12:
        sub_100058CD0(0LL, (unint64_t *)&unk_10040F898, &OBJC_CLASS___NWEndpoint_ptr);
        id v14 = v10;
        id v15 = v6;
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v13);
        Class v17 = UUID._bridgeToObjectiveC()().super.isa;
        unsigned int v18 = [v14 assignResolvedEndpoints:isa toClient:v17];

        uint64_t v48 = v2;
        uint64_t v19 = Logger.logObject.getter(v48);
        id v20 = (os_log_s *)v19;
        if (v18)
        {
          os_log_type_t v21 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v20, v21))
          {
            uint64_t v22 = swift_slowAlloc(22LL, -1LL);
            uint64_t v23 = swift_slowAlloc(64LL, -1LL);
            __n128 v50 = (void *)v23;
            *(_DWORD *)uint64_t v22 = 136315394;
            uint64_t v24 = *(void **)&v2[v5];
            if (v24)
            {
              id v25 = [v24 description];
              uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
              unint64_t v28 = v27;
            }

            else
            {
              uint64_t v26 = 1701736302LL;
              unint64_t v28 = 0xE400000000000000LL;
            }

            uint64_t v49 = sub_10000235C(v26, v28, (uint64_t *)&v50);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

            swift_bridgeObjectRelease(v28);
            *(_WORD *)(v22 + 12) = 2080;

            uint64_t v35 = type metadata accessor for UUID(0LL);
            uint64_t v36 = sub_1002DD4F4( (unint64_t *)&qword_10040D5B0,  (uint64_t)&protocol conformance descriptor for UUID);
            uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter(v35, v36);
            unint64_t v39 = v38;
            uint64_t v49 = sub_10000235C(v37, v38, (uint64_t *)&v50);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

            swift_bridgeObjectRelease(v39);
            os_log_type_t v40 = v21;
            unint64_t v41 = "Assigned %s to client %s";
LABEL_26:
            _os_log_impl((void *)&_mh_execute_header, v20, v40, v41, (uint8_t *)v22, 0x16u);
            swift_arrayDestroy(v23, 2LL, &type metadata for Any[8]);
            swift_slowDealloc(v23, -1LL, -1LL);
            swift_slowDealloc(v22, -1LL, -1LL);

            return;
          }
        }

        else
        {
          os_log_type_t v29 = static os_log_type_t.error.getter(v19);
          if (os_log_type_enabled(v20, v29))
          {
            uint64_t v22 = swift_slowAlloc(22LL, -1LL);
            uint64_t v23 = swift_slowAlloc(64LL, -1LL);
            __n128 v50 = (void *)v23;
            *(_DWORD *)uint64_t v22 = 136315394;
            unint64_t v30 = *(void **)&v2[v5];
            if (v30)
            {
              id v31 = [v30 description];
              uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
              unint64_t v34 = v33;
            }

            else
            {
              uint64_t v32 = 1701736302LL;
              unint64_t v34 = 0xE400000000000000LL;
            }

            uint64_t v49 = sub_10000235C(v32, v34, (uint64_t *)&v50);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

            swift_bridgeObjectRelease(v34);
            *(_WORD *)(v22 + 12) = 2080;

            uint64_t v42 = type metadata accessor for UUID(0LL);
            uint64_t v43 = sub_1002DD4F4( (unint64_t *)&qword_10040D5B0,  (uint64_t)&protocol conformance descriptor for UUID);
            uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter(v42, v43);
            unint64_t v46 = v45;
            uint64_t v49 = sub_10000235C(v44, v45, (uint64_t *)&v50);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

            swift_bridgeObjectRelease(v46);
            os_log_type_t v40 = v29;
            unint64_t v41 = "Failed to assign %s to client %s";
            goto LABEL_26;
          }
        }

        uint64_t Strong = v48;
        goto LABEL_20;
      }

      sub_100058CD0(0LL, &qword_10040F8B0, &OBJC_CLASS___NWHostEndpoint_ptr);
      id v7 = a1;
      id v8 = v6;
      char v9 = static NSObject.== infix(_:_:)(v8, v7);

      if ((v9 & 1) != 0)
      {

        return;
      }

      id v6 = *(void **)&v2[v5];
      uint64_t v10 = *(void **)&v47[qword_10040F520];
      if (v6) {
        goto LABEL_10;
      }
    }

    else
    {
      if (!a1)
      {
LABEL_20:

        return;
      }

      id v6 = 0LL;
      uint64_t v10 = *(void **)&Strong[qword_10040F520];
    }

    __n128 v13 = _swiftEmptyArrayStorage;
    goto LABEL_12;
  }

void sub_1002DBB0C(void *a1)
{
  uint64_t v2 = *(void **)(v1 + qword_10040F808);
  *(void *)(v1 + qword_10040F808) = a1;
  id v3 = a1;
  sub_1002DB5B8(v2);
}

char *sub_1002DBB54(char *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v4;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_unknownObjectWeakInit(v3 + qword_10040F7F0, 0LL);
  __n128 v13 = (void *)(v3 + qword_10040F7F8);
  *__n128 v13 = 0LL;
  v13[1] = 0LL;
  *(_BYTE *)(v3 + qword_10040F800) = 0;
  *(void *)(v3 + qword_10040F808) = 0LL;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  id v14 = (void *)sub_1002DC954((uint64_t)a1, (uint64_t)v12);
  uint64_t v15 = *(void *)&a1[qword_100410BF8];
  swift_unownedRetainStrong(v15);
  id v16 = v14;
  uint64_t v20 = sub_1002E8D68((uint64_t)v16, v17, v18, v19);
  swift_release(v15);
  os_log_type_t v21 = (char *)v16;
  uint64_t v22 = sub_10029D338((uint64_t)a3, (uint64_t)v21);
  if (v5)
  {

    swift_release(v20);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
  }

  else
  {
    uint64_t v23 = (void *)v22;

    swift_release(v20);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
    swift_unknownObjectWeakAssign(&v21[qword_10040F7F0], v23);
  }

  return v21;
}

void sub_1002DBD04()
{
}

id sub_1002DBD44()
{
  return sub_1002DBD58( &qword_10040F800,  (uint64_t (*)(void, void, void))type metadata accessor for NANNetworkAgent.DataSessionClient);
}

id sub_1002DBD58(void *a1, uint64_t (*a2)(void, void, void))
{
  uint64_t v3 = swift_isaMask & *v2;
  *((_BYTE *)v2 + *asub_100058090(v4, v0 + 1) = 0;
  uint64_t v4 = (objc_class *)a2(0LL, *(void *)(v3 + 160), *(void *)(v3 + 168));
  v6.receiver = v2;
  v6.super_class = v4;
  return objc_msgSendSuper2(&v6, "dealloc");
}

id sub_1002DBDB0(void *a1)
{
  id v1 = a1;
  return sub_1002DBD44();
}

void sub_1002DBDD4(uint64_t a1)
{
}

void sub_1002DBE20()
{
  *(_BYTE *)(v0 + qword_10040F800) = 0;
  sub_1002DCBD0(&qword_10040F800, &qword_10040F7F0, sub_10027A194);
}

void sub_1002DBE54(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v7 = a4;
  id v8 = a1;
  sub_1002DD364(a5);
}

void sub_1002DBEAC(void *a1)
{
  id v1 = a1;
  sub_1002DD310(&qword_10040F7F0, &qword_10040F800, sub_10027A194);
}

void sub_1002DBF08(int a1, id a2)
{
  if (a2)
  {
    unsigned __int16 v3 = (unsigned __int16)[a2 servicePort];
    uint64_t v4 = *(void **)(v2 + qword_10040F7F8 + 8);
    if (v4)
    {
      unsigned __int16 v5 = v3;
      uint64_t v6 = *(void *)(v2 + qword_10040F7F8);
      swift_bridgeObjectRetain(*(void *)(v2 + qword_10040F7F8 + 8));
      uint64_t v7 = WiFiMACAddress.ipv6LinkLocalAddressString.getter();
      uint64_t v9 = v8;
      uint64_t v17 = v7;
      uint64_t v18 = v8;
      swift_bridgeObjectRetain(v8);
      v10._countAndFlagsBits = 37LL;
      v10._object = (void *)0xE100000000000000LL;
      String.append(_:)(v10);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRetain(v18);
      v11._countAndFlagsBits = v6;
      v11._object = v4;
      String.append(_:)(v11);
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(v4);
      LOWORD(v17) = v5;
      dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt16,  &protocol witness table for UInt16);
      uint64_t v13 = v12;
      NSString v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v18);
      NSString v15 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v13);
      id v16 = objc_msgSend((id)objc_opt_self(NWHostEndpoint), "endpointWithHostname:port:", v14, v15, v17);

      sub_1002DBB0C(v16);
    }
  }

void sub_1002DC070(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  sub_1002DBF08((int)v6, a4);
}

void sub_1002DC0DC(int a1, int a2, int a3, void *aBlock)
{
  uint64_t v4 = _Block_copy(aBlock);
  _Block_release(v4);
}

uint64_t type metadata accessor for NANNetworkAgent.DataSessionClient( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NANNetworkAgent.DataSessionClient);
}

uint64_t sub_1002DC100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  __n128 v4 = swift_bridgeObjectRetain(a2);
  uint64_t v5 = String.init<A>(_:)( &v15,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String,  v4);
  uint64_t v7 = v5;
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000LL) == 0)
  {
    if ((v6 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }

  uint64_t v7 = sub_1002DC484(v5, v6);
  unint64_t v12 = v11;
  swift_bridgeObjectRelease(v8);
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000LL) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v7, v8);
  }

unsigned __int8 *sub_1002DC1DC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v14 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v15 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = a3 + 55;
        }

        else
        {
          unsigned __int8 v15 = 97;
          unsigned __int8 v16 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v17 = a3 + 48;
        }
        else {
          unsigned __int8 v17 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          uint64_t v18 = result + 1;
          do
          {
            unsigned int v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v19 < 0x61 || v19 >= v15) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v20 = -87;
              }

              else
              {
                char v20 = -55;
              }
            }

            else
            {
              char v20 = -48;
            }

            int v8 = (unsigned __int16)(v8 * a3) + (v19 + v20);
            if ((v8 & 0x10000) != 0) {
              goto LABEL_72;
            }
            ++v18;
            --v14;
          }

          while (v14);
LABEL_48:
          int v13 = 0;
          unsigned __int16 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }

        goto LABEL_71;
      }

uint64_t sub_1002DC484(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1;
  }
  uint64_t v3 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v3 = 11LL;
  }
  unint64_t v4 = String.subscript.getter(15LL, v3 | (v2 << 16), a1, a2);
  unint64_t v6 = v5;
  uint64_t v9 = sub_1002DC500(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_1002DC500(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a3;
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    unint64_t v12 = sub_1002DC644(a1, a2, a3, a4);
    if (v12)
    {
      uint64_t v9 = v12;
      unint64_t v8 = (unint64_t)sub_100002848(v12, 0LL);
      unint64_t v5 = sub_1002DC730((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      uint64_t v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }

    else
    {
      unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
    }

    uint64_t v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(void *)(v8 + 16));
    swift_release(v8);
    return v14;
  }

  else
  {
    unint64_t v8 = a1 >> 16;
    uint64_t v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000LL) == 0)
    {
      if ((a3 & 0x1000000000000000LL) != 0)
      {
        uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }

unint64_t sub_1002DC644( unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((result & 0xC) == 4LL << v8)
  {
    uint64_t result = sub_1001FDC8C(result, a3, a4);
    unint64_t v7 = result;
  }

  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_1001FDC8C(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000LL) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }

  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }

  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }

  __break(1u);
  return result;
}

unint64_t sub_1002DC730( unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0LL;
    goto LABEL_33;
  }

  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0LL;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    _OWORD v9[2] = a6;
    v9[3] = a7;
    void v9[4] = v12;
    return v11;
  }

  uint64_t v11 = 0LL;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000LL) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4LL << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000LL) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_1001FDC8C(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000LL) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }

    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000LL) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }

      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000LL) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter(a6, a7);
        }
        char v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000LL) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }

    uint64_t result = sub_1001FDC8C(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000LL) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_29;
    }

uint64_t sub_1002DC940()
{
  return *(void *)(v0 + qword_100410BE8);
}

uint64_t sub_1002DC954(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = swift_isaMask;
  unint64_t v7 = (char *)v2 + qword_10040F638;
  swift_unknownObjectWeakInit((char *)v2 + qword_10040F638, 0LL);
  uint64_t v8 = (char *)v2 + qword_10040F630;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, a2, v9);
  swift_unknownObjectWeakAssign(v7, a1);
  uint64_t v11 = v2;
  uint64_t v12 = UUID.uuidString.getter(v11);
  uint64_t v14 = v13;
  if ((v13 & 0x1000000000000000LL) != 0 || !(v13 & 0x2000000000000000LL | v12 & 0x1000000000000000LL))
  {
    sub_100002274(&qword_10040F890);
    _StringGuts._slowWithCString<A>(_:)(&v21, sub_1002DA2E4, 0LL);
LABEL_7:
    swift_bridgeObjectRelease(v14);
LABEL_10:
    *(uint64_t *)((char *)v11 + qword_10040F640) = v21;

    unint64_t v17 = (objc_class *)type metadata accessor for NANNetworkAgent.Client( 0LL,  *(void *)((v6 & v5) + 0x50),  *(void *)((v6 & v5) + 0x58),  v16);
    v20.receiver = v11;
    v20.super_class = v17;
    id v18 = objc_msgSendSuper2(&v20, "init");
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
    return (uint64_t)v18;
  }

  if ((v13 & 0x2000000000000000LL) == 0)
  {
    if ((v12 & 0x1000000000000000LL) == 0) {
      _StringObject.sharedUTF8.getter(v12, v13);
    }
    sub_1002DA2E4(v19);
    uint64_t v21 = v19[0];
    goto LABEL_7;
  }

  v19[0] = v12;
  v19[1] = v13 & 0xFFFFFFFFFFFFFFLL;
  uint64_t result = os_transaction_create(v19);
  if (result)
  {
    uint64_t v21 = result;
    swift_bridgeObjectRelease(v14);
    goto LABEL_10;
  }

  __break(1u);
  return result;
}

void sub_1002DCB24()
{
  if ((*(_BYTE *)(v0 + qword_10040F6D0) & 1) == 0)
  {
    uint64_t v1 = v0;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v0 + qword_10040F6C8);
    if (Strong)
    {
      uint64_t v3 = (void *)Strong;
      unint64_t v4 = (uint64_t *)(v0 + qword_10040F6D8);
      swift_beginAccess(v1 + qword_10040F6D8, v6, 1LL, 0LL);
      uint64_t v5 = *v4;
      *unint64_t v4 = (uint64_t)_swiftEmptyDictionarySingleton;
      swift_bridgeObjectRelease(v5);
      sub_1002DA470();
      sub_1002BD568();
      swift_unknownObjectWeakAssign(v1 + qword_10040F6C8, 0LL);
    }
  }

void sub_1002DCBD0(void *a1, void *a2, void (*a3)(void))
{
  if ((*(_BYTE *)(v3 + *a1) & 1) == 0)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3 + *a2);
    if (Strong)
    {
      id v7 = (id)Strong;
      a3();
      swift_unknownObjectWeakAssign(v3 + *a2, 0LL);
    }
  }

void sub_1002DCC54()
{
}

void sub_1002DCC80()
{
}

void sub_1002DCCAC()
{
  *(_BYTE *)(v0 + qword_10040F6D0) = 1;
  sub_1002DCB24();
}

void sub_1002DCCC0()
{
  *(_BYTE *)(v0 + qword_10040F6D0) = 0;
  sub_1002DCB24();
}

uint64_t sub_1002DCCF0(unint64_t *a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  uint64_t v45 = a2;
  uint64_t v50 = a5;
  int v54 = a4;
  unint64_t v46 = a1;
  uint64_t v56 = sub_100002274(&qword_10040F8B8);
  __chkstk_darwin();
  uint64_t v53 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v45 - v7;
  __chkstk_darwin();
  uint64_t v10 = (char *)&v45 - v9;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v52 = *(void *)(v11 - 8);
  uint64_t result = __chkstk_darwin();
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = 0LL;
  int64_t v16 = 0LL;
  unint64_t v55 = a3;
  uint64_t v19 = a3[8];
  id v18 = a3 + 8;
  uint64_t v17 = v19;
  uint64_t v20 = 1LL << *((_BYTE *)v18 - 32);
  uint64_t v21 = -1LL;
  if (v20 < 64) {
    uint64_t v21 = ~(-1LL << v20);
  }
  unint64_t v22 = v21 & v17;
  uint64_t v48 = v18;
  int64_t v49 = (unint64_t)(v20 + 63) >> 6;
  uint64_t v51 = v14;
  while (2)
  {
    uint64_t v47 = v15;
    while (1)
    {
      if (v22)
      {
        uint64_t v58 = (v22 - 1) & v22;
        int64_t v59 = v16;
        unint64_t v25 = __clz(__rbit64(v22)) | (v16 << 6);
        uint64_t v26 = v56;
      }

      else
      {
        int64_t v27 = v16 + 1;
        uint64_t v26 = v56;
        if (__OFADD__(v16, 1LL))
        {
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }

        if (v27 >= v49) {
          return sub_1002F9840(v46, v45, v47, v55);
        }
        unint64_t v28 = v48[v27];
        int64_t v29 = v16 + 1;
        if (!v28)
        {
          int64_t v29 = v16 + 2;
          if (v16 + 2 >= v49) {
            return sub_1002F9840(v46, v45, v47, v55);
          }
          unint64_t v28 = v48[v29];
          if (!v28)
          {
            int64_t v29 = v16 + 3;
            if (v16 + 3 >= v49) {
              return sub_1002F9840(v46, v45, v47, v55);
            }
            unint64_t v28 = v48[v29];
            if (!v28)
            {
              uint64_t v30 = v16 + 4;
              if (v16 + 4 >= v49) {
                return sub_1002F9840(v46, v45, v47, v55);
              }
              unint64_t v28 = v48[v30];
              if (!v28)
              {
                while (1)
                {
                  int64_t v29 = v30 + 1;
                  if (__OFADD__(v30, 1LL)) {
                    goto LABEL_28;
                  }
                  if (v29 >= v49) {
                    return sub_1002F9840(v46, v45, v47, v55);
                  }
                  unint64_t v28 = v48[v29];
                  ++v30;
                  if (v28) {
                    goto LABEL_22;
                  }
                }
              }

              int64_t v29 = v16 + 4;
            }
          }
        }

uint64_t sub_1002DD130(uint64_t a1, int a2, void *a3)
{
  char v6 = *(_BYTE *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (unint64_t)((1LL << v6) + 63) >> 6;
  id v9 = a3;
  if (v7 <= 0xD || (swift_stdlib_isStackAllocationSafe(8 * v8, 8LL) & 1) != 0)
  {
    __chkstk_darwin();
    uint64_t v10 = (char *)&v17 - ((8 * v8 + 15) & 0x3FFFFFFFFFFFFFF0LL);
    bzero(v10, 8 * v8);
    id v11 = v9;
    uint64_t v12 = sub_1002DCCF0((unint64_t *)v10, v8, (void *)a1, a2, (uint64_t)v11);

    if (v3) {
      swift_willThrow(v13);
    }
  }

  else
  {
    uint64_t v14 = (void *)swift_slowAlloc(8 * v8, -1LL);
    bzero(v14, 8 * v8);
    id v15 = v9;
    uint64_t v12 = sub_1002DCCF0((unint64_t *)v14, v8, (void *)a1, a2, (uint64_t)v15);

    swift_slowDealloc(v14, -1LL, -1LL);
  }

  return v12;
}

void sub_1002DD2D8()
{
  *(_BYTE *)(v0 + qword_10040F768[0]) = 1;
  sub_1002DCBD0(qword_10040F768, &qword_10040F760, (void (*)(void))sub_10025E338);
}

void sub_1002DD310(void *a1, void *a2, void (*a3)(void))
{
  *(_BYTE *)(v3 + *a2) = 0;
  sub_1002DCBD0(a2, a1, a3);
}

void sub_1002DD364(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)((swift_isaMask & *v2) + 0xA0LL);
  uint64_t v5 = *(void *)(*(void *)((swift_isaMask & *v2) + 0xA8LL) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v5,  v4,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v5,  v4,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 176))( a1,  AssociatedTypeWitness,  AssociatedConformanceWitness);
  id v9 = (void *)((char *)v2 + qword_10040F7F8);
  uint64_t v10 = *(void *)((char *)v2 + qword_10040F7F8 + 8);
  *id v9 = v8;
  v9[1] = v11;
  swift_bridgeObjectRelease(v10);
  *((_BYTE *)v2 + qword_10040F800) = 1;
  sub_1002DCBD0(&qword_10040F800, &qword_10040F7F0, sub_10027A194);
}

uint64_t sub_1002DD454(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NANSubscribe.Configuration(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002DD498(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NANSubscribe.Configuration(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_1002DD4D4(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_1002DD4F4(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for UUID(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1002DD534(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_10040F8B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002DD57C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002DD5BC(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = &unk_10035FD48;
    void v5[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[3] = &unk_10035FD60;
    v5[4] = &unk_10035FD60;
    v5[5] = &unk_10035FD60;
    v5[6] = &unk_10035FD60;
    uint64_t result = type metadata accessor for Logger(319LL);
    if (v4 <= 0x3F)
    {
      void v5[7] = *(void *)(result - 8) + 64LL;
      void v5[8] = &unk_10035FD78;
      void v5[9] = &unk_10035FD78;
      void v5[10] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v5[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
      return swift_initClassMetadata2(a1, 0LL, 12LL, v5, a1 + 120);
    }
  }

  return result;
}

void sub_1002DD684( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8 = v7;
  id v55 = a6;
  uint64_t v56 = a5;
  uint64_t v53 = a4;
  unint64_t v54 = a3;
  uint64_t v52 = a2;
  uint64_t v47 = a7;
  uint64_t v58 = sub_100002274(&qword_10040D7B0);
  uint64_t v46 = *(void *)(v58 - 8);
  __chkstk_darwin();
  uint64_t v51 = (_DWORD *)((char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v12 = (char *)&v45 - v11;
  __chkstk_darwin();
  uint64_t v50 = (char *)&v45 - v13;
  uint64_t v14 = *(void *)(a1 + 64);
  uint64_t v48 = a1 + 64;
  uint64_t v15 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & v14;
  int64_t v49 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v57 = a1;
  swift_bridgeObjectRetain(a1);
  int64_t v18 = 0LL;
  if (!v17) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v59 = v8;
  unint64_t v19 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (unint64_t i = v19 | (v18 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v18 << 6))
  {
    uint64_t v24 = *(void *)(v57 + 56);
    uint64_t v25 = *(void *)(v57 + 48) + 6 * i;
    __int16 v26 = *(_WORD *)(v25 + 4);
    uint64_t v27 = type metadata accessor for AWDLPeer(0LL);
    uint64_t v28 = v24 + *(void *)(*(void *)(v27 - 8) + 72LL) * i;
    uint64_t v29 = v58;
    uint64_t v30 = (uint64_t)v50;
    int v31 = *(_DWORD *)v25;
    sub_100057FE8(v28, (uint64_t)&v50[*(int *)(v58 + 48)], type metadata accessor for AWDLPeer);
    *(_DWORD *)uint64_t v30 = v31;
    *(_WORD *)(v30 + 4) = v26;
    sub_100269700(v30, (uint64_t)v12);
    uint64_t v32 = *(int *)(v29 + 48);
    unint64_t v33 = v51;
    uint64_t v34 = (uint64_t)v51 + v32;
    uint64_t v35 = (uint64_t)&v12[v32];
    LOWORD(v32) = *((_WORD *)v12 + 2);
    *uint64_t v51 = *(_DWORD *)v12;
    *((_WORD *)v33 + 2) = v32;
    sub_100057FE8(v35, v34, type metadata accessor for AWDLPeer);
    uint64_t v36 = *(void *)(v34 + *(int *)(v27 + 80));
    swift_bridgeObjectRetain(v36);
    sub_10005802C(v34, type metadata accessor for AWDLPeer);
    unint64_t v37 = v54;
    swift_bridgeObjectRetain(v54);
    uint64_t v38 = v56;
    swift_bridgeObjectRetain(v56);
    id v39 = v55;
    uint64_t v40 = v59;
    sub_1002E1308(v36, v52, v37, v53, v38, v39);
    LOBYTE(v3sub_100058090(v4, v0 + 1) = v41;
    uint64_t v8 = v40;
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease(v38);

    if ((v31 & 1) != 0)
    {
      swift_release(v57);
      uint64_t v42 = v47;
      sub_100269700((uint64_t)v12, v47);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v46 + 56))(v42, 0LL, 1LL, v58);
      goto LABEL_27;
    }

    sub_1000225EC((uint64_t)v12, &qword_10040D7B0);
    if (v17) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v18++, 1LL)) {
      break;
    }
    if (v18 >= v49) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v48 + 8 * v18);
    if (!v22)
    {
      int64_t v23 = v18 + 1;
      if (v18 + 1 >= v49) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v48 + 8 * v23);
      if (v22) {
        goto LABEL_16;
      }
      int64_t v23 = v18 + 2;
      if (v18 + 2 >= v49) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v48 + 8 * v23);
      if (v22) {
        goto LABEL_16;
      }
      int64_t v23 = v18 + 3;
      if (v18 + 3 >= v49) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v48 + 8 * v23);
      if (v22)
      {
LABEL_16:
        int64_t v18 = v23;
        goto LABEL_17;
      }

      int64_t v23 = v18 + 4;
      if (v18 + 4 < v49)
      {
        unint64_t v22 = *(void *)(v48 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            int64_t v18 = v23 + 1;
            if (__OFADD__(v23, 1LL)) {
              goto LABEL_29;
            }
            if (v18 >= v49) {
              goto LABEL_26;
            }
            unint64_t v22 = *(void *)(v48 + 8 * v18);
            ++v23;
            if (v22) {
              goto LABEL_17;
            }
          }
        }

        goto LABEL_16;
      }

char *sub_1002DDA38(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_1002DDF7C(a1, a2);
}

unint64_t sub_1002DDA78()
{
  uint64_t v1 = *v0;
  if (!((unint64_t)*v0 >> 62))
  {
    if (*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_3;
    }
    return 0LL;
  }

  if (v1 < 0) {
    uint64_t v5 = *v0;
  }
  else {
    uint64_t v5 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*v0);
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v5);
  swift_bridgeObjectRelease(v1);
  if (!v6) {
    return 0LL;
  }
LABEL_3:
  unint64_t result = sub_10027D0D0();
  if (!result)
  {
    uint64_t v3 = *v0;
    if ((unint64_t)*v0 >> 62)
    {
      if (v3 < 0) {
        uint64_t v7 = *v0;
      }
      else {
        uint64_t v7 = v3 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*v0);
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v7);
      swift_bridgeObjectRelease(v3);
      unint64_t result = v8 - 1;
      if (!__OFSUB__(v8, 1LL)) {
        return sub_100320F58(result);
      }
    }

    else
    {
      uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t result = v4 - 1;
      if (!__OFSUB__(v4, 1LL)) {
        return sub_100320F58(result);
      }
    }

    __break(1u);
  }

  return result;
}

Class sub_1002DDB40()
{
  uint64_t v0 = type metadata accessor for UUID(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1002DDBC8((uint64_t)v3);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return isa;
}

uint64_t sub_1002DDBC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_100410C00;
  swift_beginAccess(v3, v6, 0LL, 0LL);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

void sub_1002DDC2C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a3);
  id v7 = a1;
  sub_1002DDCAC((uint64_t)v6);
}

uint64_t sub_1002DDCAC(uint64_t a1)
{
  uint64_t v3 = v1 + qword_100410C00;
  swift_beginAccess(v3, v6, 33LL, 0LL);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
  return swift_endAccess(v6);
}

id sub_1002DDD18()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRetain(v0);
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  return v2;
}

void sub_1002DDD64(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v6 = v5;
  id v7 = a1;
  sub_1002DDDC0(v4, v6);
}

uint64_t sub_1002DDDC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + qword_100410C08);
  uint64_t v4 = *(void *)(v2 + qword_100410C08 + 8);
  *uint64_t v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_1002DDDDC()
{
  return sub_1002DDE00() & 1;
}

uint64_t sub_1002DDE00()
{
  return *(unsigned __int8 *)(v0 + qword_10040F8D0);
}

uint64_t sub_1002DDE10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002DDE34(a3);
}

uint64_t sub_1002DDE34(uint64_t result)
{
  *(_BYTE *)(v1 + qword_10040F8D0) = result;
  return result;
}

uint64_t sub_1002DDE44()
{
  return sub_1002DDE68() & 1;
}

uint64_t sub_1002DDE68()
{
  return *(unsigned __int8 *)(v0 + qword_10040F8D8);
}

uint64_t sub_1002DDE78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002DDE9C(a3);
}

uint64_t sub_1002DDE9C(uint64_t result)
{
  *(_BYTE *)(v1 + qword_10040F8D8) = result;
  return result;
}

uint64_t sub_1002DDEAC()
{
  return sub_1002DDED0() & 1;
}

uint64_t sub_1002DDED0()
{
  return *(unsigned __int8 *)(v0 + qword_10040F8E0);
}

uint64_t sub_1002DDEE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002DDF04(a3);
}

uint64_t sub_1002DDF04(uint64_t result)
{
  *(_BYTE *)(v1 + qword_10040F8E0) = result;
  return result;
}

uint64_t sub_1002DDF14()
{
  return sub_1002DDF38() & 1;
}

uint64_t sub_1002DDF38()
{
  return *(unsigned __int8 *)(v0 + qword_10040F8E8);
}

uint64_t sub_1002DDF48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002DDF6C(a3);
}

uint64_t sub_1002DDF6C(uint64_t result)
{
  *(_BYTE *)(v1 + qword_10040F8E8) = result;
  return result;
}

char *sub_1002DDF7C(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v2);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v30 = *(void *)(v4 - 8);
  uint64_t v31 = v4;
  __chkstk_darwin();
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v7 = (unint64_t *)&v2[qword_100410C08];
  unint64_t v35 = 0xD000000000000012LL;
  unint64_t v36 = 0x8000000100360620LL;
  uint64_t v8 = v2;
  v9._countAndFlagsBits = 32LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 1279547201LL;
  v10._object = (void *)0xE400000000000000LL;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(0xE400000000000000LL);
  unint64_t v11 = v36;
  *id v7 = v35;
  v7[1] = v11;
  v8[qword_10040F8D0] = 1;
  v8[qword_10040F8D8] = 0;
  v8[qword_10040F8E0] = 0;
  v8[qword_10040F8E8] = 0;
  uint64_t v12 = &v8[qword_100410C10];
  Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xEE006C6477612E65LL,  0x416B726F7774656ELL,  0xEC000000746E6567LL);
  uint64_t v13 = qword_10040F8F0;
  uint64_t v14 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  id v15 = objc_allocWithZone((Class)type metadata accessor for XPCSession(0LL));
  *(void *)&v8[v13] = sub_100262B50(0xD000000000000012LL, (void *)0x80000001003699A0LL, v14);
  uint64_t v16 = qword_10040F8F8;
  *(void *)&v8[qword_10040F8F8] = _swiftEmptyDictionarySingleton;
  uint64_t v17 = *OS_dispatch_queue.awdl.unsafeMutableAddressor();
  id v18 = [objc_allocWithZone(NWNetworkAgentRegistration) initWithNetworkAgentClass:swift_getObjCClassFromMetadata(ObjectType) queue:v17];
  if (!v18)
  {
    swift_release(v32);
    swift_release(v33);

    swift_bridgeObjectRelease(v7[1]);
    uint64_t v28 = type metadata accessor for Logger(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v28 - 8) + 8LL))(v12, v28);

    swift_bridgeObjectRelease(*(void *)&v8[v16]);
    swift_deallocPartialClassInstance( v8,  ObjectType,  *(unsigned int *)((swift_isaMask & *(void *)v8) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *(void *)v8) + 0x34LL));
    return 0LL;
  }

  *(void *)&v8[qword_10040F8C8] = v18;
  id v19 = v18;
  UUID.init()(v19);
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(&v8[qword_100410C00], v6, v31);
  uint64_t v21 = v32;
  uint64_t v20 = v33;
  *(void *)&v8[qword_100410C18] = v32;
  *(void *)&v8[qword_100410C20] = v20;
  swift_unownedRetain(v21);
  swift_unownedRetain(v20);

  v34.receiver = v8;
  v34.super_class = ObjectType;
  unint64_t v22 = (char *)objc_msgSendSuper2(&v34, "init");
  int64_t v23 = *(void **)&v22[qword_10040F8C8];
  uint64_t v24 = v22;
  if (![v23 registerNetworkAgent:v24])
  {

    swift_release(v21);
    swift_release(v20);
    return 0LL;
  }

  uint64_t v25 = *(void *)(v21 + *(void *)(*(void *)v21 + 104LL) + 8);
  id v26 = v23;
  swift_bridgeObjectRetain(v25);
  NSString v27 = String._bridgeToObjectiveC()();
  LOBYTE(v25) = objc_msgSend( v26,  "addNetworkAgentToInterfaceNamed:",  v27,  swift_bridgeObjectRelease(v25).n128_f64[0]);

  swift_release(v21);
  swift_release(v20);

  if ((v25 & 1) == 0)
  {

    return 0LL;
  }

  return v24;
}

uint64_t sub_1002DE33C()
{
  return 0LL;
}

uint64_t sub_1002DE348()
{
  return 0LL;
}

uint64_t sub_1002DE354()
{
  return 1LL;
}

id sub_1002DE360()
{
  uint64_t v1 = v0;
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  return v2;
}

id sub_1002DE39C()
{
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xE400000000000000LL);
  return v0;
}

id sub_1002DE3D4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
  unint64_t v7 = v6;

  uint64_t v8 = (void *)variable initialization expression of NANBitmap.Band.Iterator.currentIndex();
  sub_1000208D8(v5, v7);
  return v8;
}

uint64_t sub_1002DE440()
{
  return 0LL;
}

uint64_t sub_1002DE448(uint64_t a1)
{
  uint64_t v209 = *v1;
  uint64_t v208 = swift_isaMask;
  uint64_t v219 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v218 = *(void *)(v219 - 8);
  __chkstk_darwin();
  uint64_t v217 = &v199[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v216 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v215 = *(void *)(v216 - 8);
  __chkstk_darwin();
  id v214 = &v199[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v213 = type metadata accessor for Logger(0LL);
  uint64_t v212 = *(void *)(v213 - 8);
  __chkstk_darwin();
  uint64_t v210 = v5;
  uint64_t v211 = &v199[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_100002274((uint64_t *)&unk_10040D800);
  __chkstk_darwin();
  uint64_t v207 = &v199[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_100002274(qword_100410330);
  __chkstk_darwin();
  uint64_t v8 = &v199[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  Swift::String v10 = &v199[-v9];
  uint64_t v226 = type metadata accessor for UUID(0LL);
  uint64_t v224 = *(void *)(v226 - 8);
  uint64_t v11 = *(void *)(v224 + 64);
  __chkstk_darwin();
  uint64_t v12 = &v199[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  uint64_t v222 = &v199[-v13];
  __chkstk_darwin();
  uint64_t v221 = &v199[-v14];
  __chkstk_darwin();
  uint64_t v220 = (void (*)(uint64_t, uint64_t))&v199[-v15];
  __chkstk_darwin();
  uint64_t v223 = &v199[-v16];
  uint64_t v17 = (void *)type metadata accessor for DispatchPredicate(0LL);
  uint64_t v18 = *(v17 - 1);
  __chkstk_darwin();
  uint64_t v20 = (uint64_t *)&v199[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v21 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  unint64_t v22 = (void *)*v21;
  *uint64_t v20 = *v21;
  (*(void (**)(uint64_t *, void, void *))(v18 + 104))( v20,  enum case for DispatchPredicate.onQueue(_:),  v17);
  id v23 = v22;
  uint64_t isUniquelyReferenced_nonNull_native = _dispatchPreconditionTest(_:)(v20);
  (*(void (**)(uint64_t *, void *))(v18 + 8))(v20, v17);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, (char *)v12 + 1, 1LL);
LABEL_62:
    uint64_t v172 = v202;
    uint64_t v173 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v202);
    specialized Array._endMutation()(v173);
    swift_endAccess(aBlock);
    uint64_t v174 = v226;
    v220(v18, v226);
    uint64_t v221 = (_BYTE *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
    uint64_t v175 = *(void *)(isUniquelyReferenced_nonNull_native + qword_100410C20);
    swift_unownedRetainStrong(v175);
    unint64_t v176 = *(void **)(isUniquelyReferenced_nonNull_native + qword_10040F8F0);
    uint64_t v177 = v212;
    __n128 v178 = v211;
    uint64_t v179 = v213;
    (*(void (**)(_BYTE *, void *, uint64_t))(v212 + 16))(v211, v203, v213);
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v17)(v222, v223, v174);
    uint64_t v180 = *(unsigned __int8 *)(v177 + 80);
    uint64_t v181 = (v180 + 80) & ~v180;
    uint64_t v182 = *(unsigned __int8 *)(v224 + 80);
    uint64_t v183 = (v210 + v182 + v181) & ~v182;
    unint64_t v184 = (v11 + v183 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v185 = swift_allocObject(&unk_1003FA728, v184 + 8, v180 | v182 | 7);
    uint64_t v186 = v225;
    *(void *)(v185 + swift_weakDestroy(v0 + 16) = *(void *)(v225 + 80);
    *(void *)(v185 + 24) = *(void *)(v186 + 88);
    *(_OWORD *)(v185 + 32) = *(_OWORD *)(v186 + 96);
    *(void *)(v185 + 48) = *(void *)(v186 + 112);
    *(void *)(v185 + 56) = v175;
    *(void *)(v185 + 64) = v172;
    *(void *)(v185 + 72) = v176;
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v177 + 32))(v185 + v181, v178, v179);
    v206(v185 + v183, v222, v226);
    id v187 = v205;
    *(void *)(v185 + v184) = v205;
    aBlock[4] = (uint64_t)sub_1002E1BE0;
    uint64_t v228 = v185;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1000021F0;
    aBlock[3] = (uint64_t)&unk_1003FA740;
    uint64_t v188 = _Block_copy(aBlock);
    id v189 = v172;
    id v190 = v187;
    uint64_t v191 = v221;
    swift_retain();
    id v192 = v176;
    uint64_t v193 = v214;
    static DispatchQoS.unspecified.getter(v192);
    uint64_t v229 = _swiftEmptyArrayStorage;
    uint64_t v194 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v195 = sub_100002274((uint64_t *)&unk_1004052A0);
    unint64_t v196 = sub_1000022B4();
    uint64_t v197 = v217;
    uint64_t v198 = v219;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v229, v195, v196, v219, v194);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v193, v197, v188);

    _Block_release(v188);
    swift_release(v175);

    (*(void (**)(_BYTE *, uint64_t))(v218 + 8))(v197, v198);
    (*(void (**)(_BYTE *, uint64_t))(v215 + 8))(v193, v216);
    v220((uint64_t)v223, v226);
    swift_release(v228);
    return 1LL;
  }

  if (!a1)
  {
    __break(1u);
    goto LABEL_71;
  }

  uint64_t v229 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(NWNetworkAgentStartOptionClientUUID);
  uint64_t v230 = v26;
  AnyHashable.init<A>(_:)(aBlock, &v229, &type metadata for String, &protocol witness table for String);
  uint64_t v27 = v224;
  if (*(void *)(a1 + 16) && (unint64_t v28 = sub_100327928((uint64_t)aBlock), (v29 & 1) != 0))
  {
    sub_100002AE4(*(void *)(a1 + 56) + 32 * v28, (uint64_t)&v231);
  }

  else
  {
    __int128 v231 = 0u;
    __int128 v232 = 0u;
  }

  sub_1002DD57C((uint64_t)aBlock);
  uint64_t v30 = v226;
  if (!*((void *)&v232 + 1))
  {
    sub_1000225EC((uint64_t)&v231, &qword_100405280);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v10, 1LL, 1LL, v30);
    goto LABEL_12;
  }

  int v31 = swift_dynamicCast(v10, &v231, &type metadata for Any[8], v226, 6LL);
  uint64_t v32 = *(void (**)(_BYTE *, void, uint64_t, uint64_t))(v27 + 56);
  v32(v10, v31 ^ 1u, 1LL, v30);
  uint64_t v33 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v27 + 48);
  if (v33(v10, 1LL, v30) == 1)
  {
LABEL_12:
    uint64_t v36 = sub_1000225EC((uint64_t)v10, qword_100410330);
LABEL_13:
    unint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.error.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      id v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Failed to assert because no UUID or path found", v39, 2u);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    return 1LL;
  }

  objc_super v34 = v223;
  uint64_t v206 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v27 + 32);
  v206((uint64_t)v223, v10, v30);
  uint64_t v17 = *(void **)(v27 + 16);
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v17)(v8, v34, v30);
  v32(v8, 0LL, 1LL, v30);
  if (v33(v8, 1LL, v30) == 1)
  {
    Class isa = 0LL;
  }

  else
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(_BYTE *, uint64_t))(v27 + 8))(v8, v30);
  }

  id v41 = [(id)objc_opt_self(NWPath) pathForClientID:isa];

  if (!v41)
  {
    uint64_t v36 = (*(uint64_t (**)(_BYTE *, uint64_t))(v27 + 8))(v223, v30);
    goto LABEL_13;
  }

  id v42 = [v41 parameters];
  if (!v42
    || (v43 = v42, id v44 = [v42 account], v43, !v44))
  {
    uint64_t v207 = v41;
    uint64_t v51 = v223;
    uint64_t v52 = ((uint64_t (*)(void *, _BYTE *, uint64_t))v17)(v12, v223, v30);
    uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
    os_log_type_t v54 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v53, v54))
    {
      id v55 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v56 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v56;
      *(_DWORD *)id v55 = 136315138;
      uint64_t v57 = sub_10000AF70( (unint64_t *)&qword_10040D5B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter(v30, v57);
      unint64_t v60 = v59;
      *(void *)&__int128 v231 = sub_10000235C(v58, v59, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, (char *)&v231 + 8);
      __n128 v61 = swift_bridgeObjectRelease(v60);
      id v62 = *(void (**)(void *, uint64_t, __n128))(v27 + 8);
      v62(v12, v30, v61);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Ignoring assertion from %s because no account", v55, 0xCu);
      swift_arrayDestroy(v56, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v56, -1LL, -1LL);
      swift_slowDealloc(v55, -1LL, -1LL);

      unint64_t v63 = v223;
    }

    else
    {

      id v62 = *(void (**)(void *, uint64_t, __n128))(v27 + 8);
      ((void (*)(void *, uint64_t))v62)(v12, v30);

      unint64_t v63 = v51;
    }

    ((void (*)(_BYTE *, uint64_t))v62)(v63, v30);
    return 1LL;
  }

  uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
  unint64_t v47 = v46;

  v48._countAndFlagsBits = 0x6C7070612E6D6F63LL;
  v48._object = (void *)0xEA00000000002E65LL;
  if (String.hasPrefix(_:)(v48))
  {
    uint64_t v49 = String.count.getter(0x6C7070612E6D6F63LL, 0xEA00000000002E65LL);
    unint64_t v50 = String.index(_:offsetBy:)(15LL, v49, v45, v47);
  }

  else
  {
    unint64_t v50 = 15LL;
  }

  unint64_t v64 = sub_1000F0340(v50, v45, v47);
  uint64_t v66 = v65;
  uint64_t v68 = v67;
  uint64_t v70 = v69;
  swift_bridgeObjectRelease(v47);
  static String._fromSubstring(_:)(v64, v66, v68, v70);
  uint64_t v72 = v71;
  swift_bridgeObjectRelease(v70);
  unsigned __int16 v73 = (os_log_s *)String._bridgeToObjectiveC()();
  id v74 = objc_msgSend(v41, "endpoint", swift_bridgeObjectRelease(v72).n128_f64[0]);
  if (v74)
  {
    id v75 = v74;
    uint64_t v76 = objc_opt_self(&OBJC_CLASS___NWAddressEndpoint);
    uint64_t v77 = (void *)swift_dynamicCastObjCClass(v75, v76);
    if (v77 && (id v78 = v77, [v77 addressFamily] == (id)30))
    {
      NSString v79 = [v78 address];
      id v80 = objc_msgSend( objc_allocWithZone(WiFiMACAddress),  "initWithLinkLocalIPv6Address:",  v79[1],  v79[2]);

      if (v80) {
        goto LABEL_49;
      }
    }

    else
    {
    }
  }

  id v81 = [v41 endpoint];
  if (!v81)
  {
LABEL_42:
    __n128 v105 = (os_log_s *)Logger.logObject.getter(v81);
    os_log_type_t v106 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v105, v106))
    {
      id v107 = (os_log_s *)v41;
      uint64_t v108 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v108 = 0;
      _os_log_impl((void *)&_mh_execute_header, v105, v106, "Unknown endpoint information in assertion", v108, 2u);
      uint64_t v109 = v108;
      uint64_t v110 = v107;
      swift_slowDealloc(v109, -1LL, -1LL);
      uint64_t v111 = v73;
    }

    else
    {
      uint64_t v111 = v105;
      __n128 v105 = (os_log_s *)v41;
      uint64_t v110 = v73;
    }

    __n128 v112 = v223;

    (*(void (**)(_BYTE *, uint64_t))(v27 + 8))(v112, v30);
    return 1LL;
  }

  id v82 = v81;
  uint64_t v83 = objc_opt_self(&OBJC_CLASS___NWHostEndpoint);
  uint64_t v84 = (void *)swift_dynamicCastObjCClass(v82, v83);
  if (!v84)
  {

    goto LABEL_42;
  }

  uint64_t v85 = v84;
  __n128 v203 = v17;
  id v86 = [v84 hostname];
  uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
  uint64_t v89 = v88;

  v90._countAndFlagsBits = 0x6C61636F6C2ELL;
  v90._object = (void *)0xE600000000000000LL;
  id v205 = v89;
  if (!String.hasSuffix(_:)(v90))
  {
    swift_bridgeObjectRetain(v205);
    uint64_t v114 = (os_log_s *)Logger.logObject.getter(v113);
    os_log_type_t v115 = static os_log_type_t.error.getter(v114);
    if (os_log_type_enabled(v114, v115))
    {
      uint64_t v116 = swift_slowAlloc(12LL, -1LL);
      uint64_t v207 = v41;
      os_log_type_t v117 = (uint8_t *)v116;
      uint64_t v118 = swift_slowAlloc(32LL, -1LL);
      uint64_t v204 = v73;
      uint64_t v119 = v118;
      aBlock[0] = v118;
      *(_DWORD *)os_log_type_t v117 = 136315138;
      unint64_t v120 = (unint64_t)v205;
      swift_bridgeObjectRetain(v205);
      *(void *)&__int128 v231 = sub_10000235C(v87, v120, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, (char *)&v231 + 8);
      swift_bridgeObjectRelease_n(v120, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v114, v115, "No local suffix on hostname %s", v117, 0xCu);
      swift_arrayDestroy(v119, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v119, -1LL, -1LL);
      swift_slowDealloc(v117, -1LL, -1LL);

      uint64_t v121 = *(void (**)(_BYTE *, uint64_t))(v224 + 8);
    }

    else
    {

      swift_bridgeObjectRelease_n(v205, 2LL);
      uint64_t v121 = *(void (**)(_BYTE *, uint64_t))(v27 + 8);
    }

    v121(v223, v30);
    return 1LL;
  }

  uint64_t v204 = v73;
  uint64_t v91 = *(void *)(v225 + qword_100410C18);
  swift_unownedRetainStrong(v91);
  uint64_t v92 = (uint64_t *)(v91 + *(void *)(*(void *)v91 + 424LL));
  swift_beginAccess(v92, &v231, 0LL, 0LL);
  uint64_t v93 = *v92;
  swift_bridgeObjectRetain(*v92);
  swift_release(v91);
  unint64_t v94 = (unint64_t)v205;
  swift_bridgeObjectRetain(v205);
  id v95 = v82;
  uint64_t v96 = (unsigned __int16 *)v207;
  id v202 = (id)v87;
  sub_1002DD684(v93, v87, v94, 0x6C61636F6C2ELL, 0xE600000000000000LL, v85, (uint64_t)v207);
  swift_bridgeObjectRelease(v93);
  uint64_t v97 = sub_100002274(&qword_10040D7B0);
  if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(*(void *)(v97 - 8) + 48LL))( v96,  1LL,  v97) == 1)
  {
    uint64_t v98 = v41;
    sub_1000225EC((uint64_t)v96, (uint64_t *)&unk_10040D800);
    swift_bridgeObjectRetain(v205);
    id v100 = (os_log_s *)Logger.logObject.getter(v99);
    os_log_type_t v101 = static os_log_type_t.error.getter(v100);
    if (os_log_type_enabled(v100, v101))
    {
      uint64_t v102 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v103 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v103;
      *(_DWORD *)uint64_t v102 = 136315138;
      unint64_t v104 = (unint64_t)v205;
      swift_bridgeObjectRetain(v205);
      uint64_t v229 = (void *)sub_10000235C((uint64_t)v202, v104, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);
      swift_bridgeObjectRelease_n(v104, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v100, v101, "No peer with specified hostname %s", v102, 0xCu);
      swift_arrayDestroy(v103, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v103, -1LL, -1LL);
      swift_slowDealloc(v102, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v205, 2LL);
    }

    (*(void (**)(_BYTE *, uint64_t))(v224 + 8))(v223, v226);
    return 1LL;
  }

  swift_bridgeObjectRelease(v205);
  uint64_t v122 = *(unsigned int *)(v96 + 1);
  uint64_t v123 = (uint64_t)v96 + *(int *)(v97 + 48);
  uint64_t v124 = *v96;
  sub_10005802C(v123, type metadata accessor for AWDLPeer);
  id v80 = WiFiAddress.apiAddress.getter(v124 | (v122 << 16));

  uint64_t v27 = v224;
  uint64_t v30 = v226;
  unsigned __int16 v73 = v204;
  uint64_t v17 = v203;
LABEL_49:
  uint64_t v207 = v41;
  id v125 = [objc_allocWithZone(AWDLTrafficRegistrationConfiguration) initWithUniqueIdentifier:v73 peerAddress:v80];
  uint64_t v126 = (void *)(v225 + qword_100410C10);
  uint64_t v127 = v220;
  ((void (*)(void (*)(uint64_t, uint64_t), _BYTE *, uint64_t))v17)(v220, v223, v30);
  id v128 = v125;
  id v129 = v80;
  id v130 = v128;
  id v205 = v129;
  __n128 v203 = v126;
  uint64_t v131 = (os_log_s *)Logger.logObject.getter(v205);
  os_log_type_t v132 = static os_log_type_t.info.getter();
  int v133 = v132;
  BOOL v134 = os_log_type_enabled(v131, v132);
  uint64_t v204 = v73;
  if (v134)
  {
    uint64_t v135 = swift_slowAlloc(32LL, -1LL);
    id v202 = (id)swift_slowAlloc(96LL, -1LL);
    aBlock[0] = (uint64_t)v202;
    *(_DWORD *)uint64_t v135 = 136315650;
    uint64_t v136 = sub_10000AF70( (unint64_t *)&qword_10040D5B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    os_log_t v201 = v131;
    uint64_t v137 = dispatch thunk of CustomStringConvertible.description.getter(v30, v136);
    unint64_t v139 = v138;
    uint64_t v229 = (void *)sub_10000235C(v137, v138, aBlock);
    int v200 = v133;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);
    __n128 v140 = swift_bridgeObjectRelease(v139);
    uint64_t v220 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    ((void (*)(void (*)(uint64_t, uint64_t), uint64_t, __n128))v220)(v127, v30, v140);
    *(_WORD *)(v135 + 12) = 2080;
    id v141 = [v130 uniqueIdentifier];
    uint64_t v142 = static String._unconditionallyBridgeFromObjectiveC(_:)(v141);
    unint64_t v144 = v143;

    uint64_t v229 = (void *)sub_10000235C(v142, v144, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);

    swift_bridgeObjectRelease(v144);
    *(_WORD *)(v135 + 22) = 2080;
    id v145 = v205;
    WiFiMACAddress.wifiAddress.getter();
    uint64_t v147 = WiFiAddress.description.getter(v146 & 0xFFFFFFFFFFFFLL);
    unint64_t v149 = v148;
    uint64_t v229 = (void *)sub_10000235C(v147, v148, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);

    swift_bridgeObjectRelease(v149);
    os_log_t v150 = v201;
    _os_log_impl( (void *)&_mh_execute_header,  v201,  (os_log_type_t)v200,  "%s starting traffic registration for %s to %s",  (uint8_t *)v135,  0x20u);
    uint64_t v151 = (uint64_t)v202;
    swift_arrayDestroy(v202, 3LL, &type metadata for Any[8]);
    swift_slowDealloc(v151, -1LL, -1LL);
    swift_slowDealloc(v135, -1LL, -1LL);
  }

  else
  {

    uint64_t v220 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v220((uint64_t)v127, v30);
    id v152 = v205;
  }

  unint64_t v153 = v221;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v17)(v221, v223, v30);
  uint64_t v12 = (void *)(v225 + qword_10040F8F8);
  swift_beginAccess(v225 + qword_10040F8F8, aBlock, 33LL, 0LL);
  id v154 = v130;
  uint64_t v18 = (uint64_t)v153;
  id v155 = v154;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v12);
  uint64_t v229 = (void *)*v12;
  uint64_t v156 = v229;
  *uint64_t v12 = 0x8000000000000000LL;
  unint64_t v158 = sub_10001C578(v18);
  unint64_t v25 = v156[2];
  BOOL v159 = (v157 & 1) == 0;
  uint64_t v160 = v25 + v159;
  if (__OFADD__(v25, v159)) {
    goto LABEL_68;
  }
  char v161 = v157;
  BOOL v162 = v156[3] < v160;
  id v202 = v155;
  if (!v162)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10032C37C();
      uint64_t v156 = v229;
    }

uint64_t sub_1002DF9D4(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  objc_super v34 = a6;
  unint64_t v35 = a3;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  uint64_t v33 = a2;
  uint64_t v36 = a1;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v29 = v6;
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin();
  uint64_t v30 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v29 - v13;
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v15((char *)&v29 - v13, v31, v9);
  v15(v12, (uint64_t)v14, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))( (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v32,  v6);
  uint64_t v16 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v17 = (v16 + 16) & ~v16;
  uint64_t v18 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v19 = (v11 + v18 + v17) & ~v18;
  unint64_t v20 = (v8 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v22 = swift_allocObject(&unk_1003FA778, v21 + 8, v16 | v18 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v22 + v17, v12, v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v22 + v19, v30, v29);
  uint64_t v24 = v33;
  id v23 = v34;
  *(void *)(v22 + v20) = v33;
  *(void *)(v22 + v2sub_100058090(v4, v0 + 1) = v23;
  id v25 = v23;
  id v26 = v24;
  sub_1002341FC(v26, v35, (uint64_t)sub_1002E1D70, v22);
  __n128 v27 = swift_release(v22);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v10 + 8))(v14, v9, v27);
}

void sub_1002DFBA0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
    swift_errorRetain();
    swift_errorRetain();
    id v13 = a4;
    id v14 = a5;
    swift_errorRetain();
    id v15 = v13;
    id v16 = v14;
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter(v17);
    int v19 = v18;
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v20 = swift_slowAlloc(42LL, -1LL);
      int v42 = v19;
      uint64_t v21 = v20;
      id v41 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v43 = swift_slowAlloc(96LL, -1LL);
      uint64_t v45 = v43;
      *(_DWORD *)uint64_t v21 = 136315906;
      uint64_t v22 = sub_10000AF70( (unint64_t *)&qword_10040D5B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      os_log_t v40 = v17;
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v9, v22);
      unint64_t v25 = v24;
      uint64_t v44 = sub_10000235C(v23, v24, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
      __n128 v26 = swift_bridgeObjectRelease(v25);
      (*(void (**)(char *, uint64_t, __n128))(v10 + 8))(v12, v9, v26);
      *(_WORD *)(v21 + 12) = 2080;
      id v27 = [v15 uniqueIdentifier];
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      unint64_t v30 = v29;

      uint64_t v44 = sub_10000235C(v28, v30, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);

      swift_bridgeObjectRelease(v30);
      *(_WORD *)(v21 + 22) = 2080;
      WiFiMACAddress.wifiAddress.getter();
      uint64_t v32 = WiFiAddress.description.getter(v31 & 0xFFFFFFFFFFFFLL);
      unint64_t v34 = v33;
      uint64_t v44 = sub_10000235C(v32, v33, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);

      swift_bridgeObjectRelease(v34);
      *(_WORD *)(v21 + 32) = 2112;
      swift_errorRetain();
      uint64_t v35 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v44 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
      uint64_t v36 = v41;
      uint64_t *v41 = v35;
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v37 = v40;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  (os_log_type_t)v42,  "%s failed to start %s to %s because %@",  (uint8_t *)v21,  0x2Au);
      uint64_t v38 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v36, 1LL, v38);
      swift_slowDealloc(v36, -1LL, -1LL);
      uint64_t v39 = v43;
      swift_arrayDestroy(v43, 3LL, &type metadata for Any[8]);
      swift_slowDealloc(v39, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_errorRelease();
    }

    else
    {
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      swift_errorRelease();
      swift_errorRelease();
    }
  }

uint64_t sub_1002DFF40(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a3,  &type metadata for AnyHashable,  &type metadata for Any[8],  &protocol witness table for AnyHashable);
  }
  else {
    uint64_t v4 = 0LL;
  }
  id v5 = a1;
  sub_1002DE448(v4);

  swift_bridgeObjectRelease(v4);
  return 1LL;
}

void sub_1002DFFBC(void *a1)
{
  unint64_t v118 = *(void *)v1;
  unint64_t v117 = swift_isaMask;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v128 = *(void *)(v3 - 8);
  uint64_t v129 = v3;
  __chkstk_darwin();
  uint64_t v127 = (char *)&v110 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v126 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v125 = *(void *)(v126 - 8);
  __chkstk_darwin();
  uint64_t v124 = (char *)&v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v116 = type metadata accessor for Logger(0LL);
  uint64_t v123 = *(void *)(v116 - 8);
  __chkstk_darwin();
  uint64_t v121 = v6;
  uint64_t v122 = (char *)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(qword_100410330);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = (void *)type metadata accessor for UUID(0LL);
  int v133 = (void *)*(v9 - 1);
  uint64_t v10 = v133[8];
  __chkstk_darwin();
  id v130 = (char *)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v120 = (char *)&v110 - v11;
  __chkstk_darwin();
  uint64_t v119 = (char *)&v110 - v12;
  __chkstk_darwin();
  id v14 = (char *)&v110 - v13;
  __chkstk_darwin();
  uint64_t v131 = (char *)&v110 - v15;
  uint64_t v16 = type metadata accessor for DispatchPredicate(0LL);
  unint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin();
  int v19 = (uint64_t *)((char *)&v110 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v20 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v21 = (void *)*v20;
  *int v19 = *v20;
  (*(void (**)(uint64_t *, void, uint64_t))(v17 + 104))( v19,  enum case for DispatchPredicate.onQueue(_:),  v16);
  id v22 = v21;
  uint64_t v23 = _dispatchPreconditionTest(_:)(v19);
  (*(void (**)(uint64_t *, uint64_t))(v17 + 8))(v19, v16);
  if ((v23 & 1) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }

  if (!a1)
  {
    __break(1u);
    goto LABEL_35;
  }

  v136[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(NWNetworkAgentStartOptionClientUUID);
  v136[1] = v24;
  AnyHashable.init<A>(_:)(aBlock, v136, &type metadata for String, &protocol witness table for String);
  int v19 = v132;
  unint64_t v25 = v133;
  if (a1[2] && (unint64_t v26 = sub_100327928((uint64_t)aBlock), (v27 & 1) != 0))
  {
    sub_100002AE4(a1[7] + 32 * v26, (uint64_t)&v137);
  }

  else
  {
    __int128 v137 = 0u;
    __int128 v138 = 0u;
  }

  sub_1002DD57C((uint64_t)aBlock);
  a1 = v9;
  if (*((void *)&v138 + 1))
  {
    int v28 = swift_dynamicCast(v8, &v137, &type metadata for Any[8], v9, 6LL);
    ((void (*)(char *, void, uint64_t, void *))v25[7])(v8, v28 ^ 1u, 1LL, v9);
    if (((unsigned int (*)(char *, uint64_t, void *))v25[6])(v8, 1LL, v9) != 1)
    {
      unint64_t v29 = (void (*)(char *, char *, void *))v25[4];
      uint64_t v30 = (uint64_t)v131;
      v29(v131, v8, a1);
      os_log_type_t v115 = (void (*)(char *, uint64_t, void *))v25[2];
      v115(v14, v30, a1);
      uint64_t v8 = (char *)v19 + qword_10040F8F8;
      swift_beginAccess((char *)v19 + qword_10040F8F8, &v137, 33LL, 0LL);
      uint64_t v31 = sub_1002E9C88(aBlock);
      if (*v32)
      {
        uint64_t v113 = (void (*)(uint64_t, char *, void *))v29;
        unint64_t v17 = sub_1002DDA78();
        ((void (*)(uint64_t *, void))v31)(aBlock, 0LL);
        swift_endAccess(&v137);
        uint64_t v9 = (void *)v25[1];
        ((void (*)(char *, void *))v9)(v14, a1);
        if (v17)
        {
          swift_beginAccess(v8, aBlock, 32LL, 0LL);
          uint64_t v33 = *(void *)v8;
          id v14 = v131;
          if (*(void *)(*(void *)v8 + 16LL))
          {
            unint64_t v34 = sub_10001C578((uint64_t)v131);
            if ((v35 & 1) != 0)
            {
              id v130 = (char *)(v117 & v118);
              uint64_t v1 = *(void *)(*(void *)(v33 + 56) + 8 * v34);
              swift_endAccess(aBlock);
              uint64_t v23 = (uint64_t)v119;
              if (!((unint64_t)v1 >> 62))
              {
                if (*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
                {
LABEL_16:
                  uint64_t v38 = (char *)v19 + qword_100410C10;
                  ((void (*)(uint64_t, char *, void *, __n128))v115)(v23, v14, a1, v36);
                  id v39 = (id)v17;
                  unint64_t v117 = (unint64_t)v38;
                  os_log_t v40 = (os_log_s *)Logger.logObject.getter(v39);
                  os_log_type_t v41 = static os_log_type_t.info.getter();
                  int v42 = v41;
                  BOOL v43 = os_log_type_enabled(v40, v41);
                  unint64_t v118 = (unint64_t)v39;
                  uint64_t v114 = (void (*)(char *, void *))v9;
                  if (v43)
                  {
                    uint64_t v44 = swift_slowAlloc(32LL, -1LL);
                    uint64_t v112 = swift_slowAlloc(96LL, -1LL);
                    aBlock[0] = v112;
                    *(_DWORD *)uint64_t v44 = 136315650;
                    int v111 = v42;
                    uint64_t v45 = sub_10000AF70( (unint64_t *)&qword_10040D5B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
                    os_log_t v110 = v40;
                    uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter(a1, v45);
                    unint64_t v48 = v47;
                    *(void *)&__int128 v137 = sub_10000235C(v46, v47, aBlock);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, (char *)&v137 + 8);
                    __n128 v49 = swift_bridgeObjectRelease(v48);
                    ((void (*)(uint64_t, void *, __n128))v9)(v23, a1, v49);
                    *(_WORD *)(v44 + 12) = 2080;
                    id v50 = [v39 uniqueIdentifier];
                    uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
                    unint64_t v53 = v52;

                    *(void *)&__int128 v137 = sub_10000235C(v51, v53, aBlock);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, (char *)&v137 + 8);

                    *(void *)&double v54 = swift_bridgeObjectRelease(v53).n128_u64[0];
                    *(_WORD *)(v44 + 22) = 2080;
                    id v55 = objc_msgSend(v39, "peerAddress", v54);
                    WiFiMACAddress.wifiAddress.getter();
                    uint64_t v57 = v56;

                    unint64_t v58 = v57 & 0xFFFFFFFFFFFFLL;
                    int v19 = v132;
                    uint64_t v59 = WiFiAddress.description.getter(v58);
                    unint64_t v61 = v60;
                    *(void *)&__int128 v137 = sub_10000235C(v59, v60, aBlock);
                    uint64_t v62 = (uint64_t)v131;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, (char *)&v137 + 8);

                    swift_bridgeObjectRelease(v61);
                    os_log_t v63 = v110;
                    _os_log_impl( (void *)&_mh_execute_header,  v110,  (os_log_type_t)v111,  "%s stopping traffic registration for %s to %s",  (uint8_t *)v44,  0x20u);
                    uint64_t v64 = v112;
                    swift_arrayDestroy(v112, 3LL, &type metadata for Any[8]);
                    swift_slowDealloc(v64, -1LL, -1LL);
                    swift_slowDealloc(v44, -1LL, -1LL);
                  }

                  else
                  {

                    ((void (*)(uint64_t, void *))v9)(v23, a1);
                    uint64_t v62 = (uint64_t)v14;
                  }

                  uint64_t v83 = v116;
                  os_log_type_t v132 = (uint64_t *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
                  uint64_t v84 = *(uint64_t *)((char *)v19 + qword_100410C20);
                  swift_unownedRetainStrong(v84);
                  uint64_t v85 = *(void **)((char *)v19 + qword_10040F8F0);
                  uint64_t v86 = v123;
                  uint64_t v87 = v122;
                  (*(void (**)(char *, unint64_t, uint64_t))(v123 + 16))(v122, v117, v83);
                  uint64_t v88 = v120;
                  v115(v120, v62, a1);
                  uint64_t v89 = *(unsigned __int8 *)(v86 + 80);
                  uint64_t v90 = (v89 + 80) & ~v89;
                  uint64_t v91 = *((unsigned __int8 *)v133 + 80);
                  uint64_t v92 = (v121 + v91 + v90) & ~v91;
                  uint64_t v93 = swift_allocObject(&unk_1003FA6B0, v92 + v10, v89 | v91 | 7);
                  uint64_t v94 = v83;
                  uint64_t v95 = v93;
                  uint64_t v96 = v130;
                  *(void *)(v93 + swift_weakDestroy(v0 + 16) = *((void *)v130 + 10);
                  *(void *)(v93 + 24) = *((void *)v96 + 11);
                  *(_OWORD *)(v93 + 32) = *((_OWORD *)v96 + 6);
                  *(void *)(v93 + 48) = *((void *)v96 + 14);
                  *(void *)(v93 + 56) = v84;
                  uint64_t v97 = (void *)v118;
                  *(void *)(v93 + 64) = v118;
                  *(void *)(v93 + 72) = v85;
                  (*(void (**)(uint64_t, char *, uint64_t))(v86 + 32))(v93 + v90, v87, v94);
                  v113(v95 + v92, v88, a1);
                  aBlock[4] = (uint64_t)sub_1002E1908;
                  uint64_t v135 = v95;
                  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
                  aBlock[1] = 1107296256LL;
                  aBlock[2] = (uint64_t)sub_1000021F0;
                  aBlock[3] = (uint64_t)&unk_1003FA6C8;
                  uint64_t v98 = _Block_copy(aBlock);
                  int v133 = v97;
                  uint64_t v99 = v132;
                  uint64_t v100 = v84;
                  swift_retain();
                  id v101 = v85;
                  uint64_t v102 = v124;
                  static DispatchQoS.unspecified.getter(v101);
                  *(void *)&__int128 v137 = _swiftEmptyArrayStorage;
                  uint64_t v103 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
                  uint64_t v104 = sub_100002274((uint64_t *)&unk_1004052A0);
                  unint64_t v105 = sub_1000022B4();
                  os_log_type_t v106 = v127;
                  uint64_t v107 = v129;
                  dispatch thunk of SetAlgebra.init<A>(_:)(&v137, v104, v105, v129, v103);
                  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v102, v106, v98);
                  _Block_release(v98);

                  swift_release(v100);
                  (*(void (**)(char *, uint64_t))(v128 + 8))(v106, v107);
                  (*(void (**)(char *, uint64_t))(v125 + 8))(v102, v126);
                  v114(v131, a1);
                  swift_release(v135);
                  return;
                }

double sub_1002E0C6C(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v25 = a2;
  unint64_t v26 = a3;
  uint64_t v27 = a1;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin();
  id v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a4, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a5, v7);
  uint64_t v15 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = (v15 + 16) & ~v15;
  uint64_t v17 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = (v13 + v17 + v16) & ~v17;
  unint64_t v19 = (v9 + v18 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v20 = swift_allocObject(&unk_1003FA700, v19 + 8, v15 | v17 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v20 + v16, v14, v11);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v20 + v18, v10, v7);
  uint64_t v21 = v25;
  *(void *)(v20 + v19) = v25;
  id v22 = v21;
  sub_100234FD8(v22, v26, sub_1002E1A84, v20);
  *(void *)&double result = swift_release(v20).n128_u64[0];
  return result;
}

void sub_1002E0DE8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a3, v7);
    id v11 = a4;
    swift_errorRetain();
    id v12 = v11;
    swift_errorRetain();
    id v13 = v12;
    uint64_t v14 = swift_errorRetain();
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter(v15);
    int v17 = v16;
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v18 = swift_slowAlloc(42LL, -1LL);
      os_log_type_t v41 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v42 = swift_slowAlloc(96LL, -1LL);
      uint64_t v44 = v42;
      *(_DWORD *)uint64_t v18 = 136315906;
      uint64_t v19 = sub_10000AF70( (unint64_t *)&qword_10040D5B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      int v40 = v17;
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v7, v19);
      unint64_t v22 = v21;
      uint64_t v43 = sub_10000235C(v20, v21, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
      __n128 v23 = swift_bridgeObjectRelease(v22);
      (*(void (**)(char *, uint64_t, __n128))(v8 + 8))(v10, v7, v23);
      *(_WORD *)(v18 + 12) = 2080;
      id v24 = [v13 uniqueIdentifier];
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      unint64_t v27 = v26;

      uint64_t v43 = sub_10000235C(v25, v27, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);

      *(void *)&double v28 = swift_bridgeObjectRelease(v27).n128_u64[0];
      *(_WORD *)(v18 + 22) = 2080;
      id v29 = objc_msgSend(v13, "peerAddress", v28);
      WiFiMACAddress.wifiAddress.getter();
      uint64_t v31 = v30;

      uint64_t v32 = WiFiAddress.description.getter(v31 & 0xFFFFFFFFFFFFLL);
      unint64_t v34 = v33;
      uint64_t v43 = sub_10000235C(v32, v33, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);

      swift_bridgeObjectRelease(v34);
      *(_WORD *)(v18 + 32) = 2112;
      swift_errorRetain();
      uint64_t v35 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v43 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
      __n128 v36 = v41;
      uint64_t *v41 = v35;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v15,  (os_log_type_t)v40,  "%s failed to clear %s to %s because %@",  (uint8_t *)v18,  0x2Au);
      uint64_t v37 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v36, 1LL, v37);
      swift_slowDealloc(v36, -1LL, -1LL);
      uint64_t v38 = v42;
      swift_arrayDestroy(v42, 3LL, &type metadata for Any[8]);
      swift_slowDealloc(v38, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_errorRelease();
    }

    else
    {
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      swift_errorRelease();
      swift_errorRelease();
    }
  }

double sub_1002E1198(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    uint64_t v4 = (void *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a3,  &type metadata for AnyHashable,  &type metadata for Any[8],  &protocol witness table for AnyHashable);
  }
  else {
    uint64_t v4 = 0LL;
  }
  id v5 = a1;
  sub_1002DFFBC(v4);

  *(void *)&double result = swift_bridgeObjectRelease(v4).n128_u64[0];
  return result;
}

void sub_1002E120C()
{
}

uint64_t sub_1002E1230(uint64_t a1)
{
  uint64_t v2 = a1 + qword_100410C00;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  swift_bridgeObjectRelease(*(void *)(a1 + qword_100410C08 + 8));

  uint64_t v4 = a1 + qword_100410C10;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  swift_unownedRelease(*(void *)(a1 + qword_100410C18));
  swift_unownedRelease(*(void *)(a1 + qword_100410C20));

  return swift_bridgeObjectRelease(*(void *)(a1 + qword_10040F8F8));
}

uint64_t type metadata accessor for AWDLNetworkAgent(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for AWDLNetworkAgent);
}

void sub_1002E1308(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v66 = a6;
  uint64_t v74 = a4;
  uint64_t v75 = a5;
  uint64_t v77 = type metadata accessor for AWDLPeer.AdvertisedService(0LL);
  uint64_t v73 = *(void *)(v77 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  id v12 = (char *)&v64 - v11;
  __chkstk_darwin();
  uint64_t v72 = (uint64_t)&v64 - v13;
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v65 = a1 + 56;
  uint64_t v15 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & v14;
  uint64_t v18 = HIBYTE(a3) & 0xF;
  unint64_t v70 = a3;
  uint64_t v71 = a2;
  if ((a3 & 0x2000000000000000LL) == 0) {
    uint64_t v18 = a2;
  }
  uint64_t v19 = 7LL;
  if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v19 = 11LL;
  }
  int64_t v67 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v68 = v19 | (v18 << 16);
  uint64_t v76 = a1;
  swift_bridgeObjectRetain(a1);
  int64_t v20 = 0LL;
  uint64_t v69 = v10;
  if (v17) {
    goto LABEL_11;
  }
LABEL_12:
  int64_t v25 = v20 + 1;
  if (!__OFADD__(v20, 1LL))
  {
    if (v25 < v67)
    {
      unint64_t v26 = *(void *)(v65 + 8 * v25);
      ++v20;
      if (v26) {
        goto LABEL_26;
      }
      int64_t v20 = v25 + 1;
      if (v25 + 1 >= v67) {
        goto LABEL_48;
      }
      unint64_t v26 = *(void *)(v65 + 8 * v20);
      if (v26) {
        goto LABEL_26;
      }
      int64_t v20 = v25 + 2;
      if (v25 + 2 >= v67) {
        goto LABEL_48;
      }
      unint64_t v26 = *(void *)(v65 + 8 * v20);
      if (v26) {
        goto LABEL_26;
      }
      int64_t v20 = v25 + 3;
      if (v25 + 3 >= v67) {
        goto LABEL_48;
      }
      unint64_t v26 = *(void *)(v65 + 8 * v20);
      if (v26)
      {
LABEL_26:
        uint64_t v23 = (v26 - 1) & v26;
        for (unint64_t i = __clz(__rbit64(v26)) + (v20 << 6); ; unint64_t i = v22 | (v20 << 6))
        {
          uint64_t v28 = v72;
          sub_100057FE8( *(void *)(v76 + 48) + *(void *)(v73 + 72) * i,  v72,  type metadata accessor for AWDLPeer.AdvertisedService);
          sub_1002B1744(v28, (uint64_t)v12);
          id v29 = &v12[*(int *)(v77 + 28)];
          uint64_t v30 = &v29[*(int *)(type metadata accessor for DNSRecords.SRV(0LL) + 24)];
          uint64_t v32 = *(void *)v30;
          unint64_t v31 = *((void *)v30 + 1);
          swift_bridgeObjectRetain(v31);
          uint64_t v33 = String.count.getter(v74, v75);
          if (__OFSUB__(0LL, v33))
          {
            __break(1u);
            goto LABEL_51;
          }

          unint64_t v78 = v23;
          int64_t v79 = v20;
          uint64_t v34 = (uint64_t)v12;
          unint64_t v36 = v70;
          uint64_t v35 = v71;
          uint64_t v37 = String.index(_:offsetBy:)(v68, -v33, v71, v70);
          swift_bridgeObjectRetain(v36);
          unint64_t v38 = String.subscript.getter(15LL, v37, v35, v36);
          unint64_t v40 = v39;
          uint64_t v42 = v41;
          uint64_t v44 = v43;
          __n128 v45 = swift_bridgeObjectRelease(v36);
          if ((v31 & 0x2000000000000000LL) != 0) {
            uint64_t v46 = HIBYTE(v31) & 0xF;
          }
          else {
            uint64_t v46 = v32 & 0xFFFFFFFFFFFFLL;
          }
          unint64_t v47 = v38 >> 16;
          unint64_t v48 = v40 >> 16;
          if (v32 == v42 && v31 == v44 && v47 == 0 && v46 == v48)
          {
            swift_bridgeObjectRelease_n(v31, 2LL);
            id v12 = (char *)v34;
            uint64_t v53 = (uint64_t)v69;
            uint64_t v54 = sub_100057FE8(v34, (uint64_t)v69, type metadata accessor for AWDLPeer.AdvertisedService);
          }

          else
          {
            LOBYTE(v63) = 0;
            char v52 = _stringCompareInternal(_:_:_:_:expecting:)(v32, v31, 0LL, v46, v42, v44, v47, v48, v45, v63);
            swift_bridgeObjectRelease(v31);
            swift_bridgeObjectRelease(v44);
            id v12 = (char *)v34;
            uint64_t v53 = (uint64_t)v69;
            uint64_t v54 = sub_100057FE8(v34, (uint64_t)v69, type metadata accessor for AWDLPeer.AdvertisedService);
            if ((v52 & 1) == 0)
            {
              sub_10005802C(v53, type metadata accessor for AWDLPeer.AdvertisedService);
              sub_10005802C(v34, type metadata accessor for AWDLPeer.AdvertisedService);
              unint64_t v17 = v78;
              int64_t v20 = v79;
              if (!v78) {
                goto LABEL_12;
              }
              goto LABEL_11;
            }
          }

          __int16 v80 = NWEndpoint.Port.rawValue.getter(v54);
          unint64_t v55 = sub_1000A9B40();
          uint64_t v56 = BinaryInteger.description.getter(&type metadata for UInt16, v55);
          uint64_t v58 = v57;
          id v59 = [v66 port];
          uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
          uint64_t v62 = v61;

          if (v56 == v60 && v58 == v62)
          {
            swift_bridgeObjectRelease_n(v58, 2LL);
            sub_10005802C(v53, type metadata accessor for AWDLPeer.AdvertisedService);
            sub_10005802C((uint64_t)v12, type metadata accessor for AWDLPeer.AdvertisedService);
            goto LABEL_48;
          }

          char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v56, v58, v60, v62, 0LL);
          swift_bridgeObjectRelease(v58);
          swift_bridgeObjectRelease(v62);
          sub_10005802C(v53, type metadata accessor for AWDLPeer.AdvertisedService);
          sub_10005802C((uint64_t)v12, type metadata accessor for AWDLPeer.AdvertisedService);
          unint64_t v17 = v78;
          int64_t v20 = v79;
          if ((v21 & 1) != 0) {
            goto LABEL_48;
          }
          if (!v78) {
            goto LABEL_12;
          }
LABEL_11:
          unint64_t v22 = __clz(__rbit64(v17));
          uint64_t v23 = (v17 - 1) & v17;
        }
      }

      int64_t v27 = v25 + 4;
      if (v27 < v67)
      {
        unint64_t v26 = *(void *)(v65 + 8 * v27);
        int64_t v20 = v27;
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_52;
            }
            if (v20 >= v67) {
              goto LABEL_48;
            }
            unint64_t v26 = *(void *)(v65 + 8 * v20);
            ++v27;
            if (v26) {
              goto LABEL_26;
            }
          }
        }

        goto LABEL_26;
      }
    }

uint64_t sub_1002E17FC()
{
  return *(void *)(v0 + qword_100410C08);
}

void sub_1002E1810()
{
}

uint64_t sub_1002E183C()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 80) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_release(*(void *)(v0 + 56));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

double sub_1002E1908()
{
  uint64_t v1 = *(void *)(type metadata accessor for Logger(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 80LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  return sub_1002E0C6C( *(void *)(v0 + 56),  *(void **)(v0 + 64),  *(void **)(v0 + 72),  v0 + v2,  v0 + ((v2 + v3 + v4) & ~v4));
}

uint64_t sub_1002E19A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002E19B4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1002E19BC()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return swift_deallocObject(v0, v11 + 8, v10);
}

void sub_1002E1A84(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Logger(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  sub_1002E0DE8(a1, v1 + v4, v1 + v7, *(void **)(v1 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1002E1B00()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 80) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 56));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return swift_deallocObject(v0, v11 + 8, v10);
}

uint64_t sub_1002E1BE0()
{
  uint64_t v1 = *(void *)(type metadata accessor for Logger(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 80LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  return sub_1002DF9D4( *(void *)(v0 + 56),  *(void **)(v0 + 64),  *(void **)(v0 + 72),  v0 + v2,  v0 + v5,  *(void **)(v0 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1002E1C8C()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v13 = v3 | v8 | 7;
  unint64_t v10 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return swift_deallocObject(v0, v11 + 8, v13);
}

void sub_1002E1D70(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Logger(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1002DFBA0(a1, v1 + v4, v1 + v7, *(void **)(v1 + v8), *(void **)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1002E1E00(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "\b";
    void v4[2] = &unk_10035FE20;
    void v4[3] = &unk_10035FE38;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    void v4[5] = &unk_10035FE20;
    void v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[7] = &unk_10035FE50;
    v4[8] = &unk_10035FE68;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 9LL, v4, a1 + 96);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void *sub_1002E1EBC(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v42 = *(void *)(a1 + 16);
  sub_100267EF8(0, v1, 0);
  uint64_t result = (void *)sub_10006C094(a1);
  uint64_t v4 = (uint64_t)result;
  uint64_t v6 = v42;
  uint64_t v5 = a1;
  uint64_t v7 = 0LL;
  char v9 = v8 & 1;
  uint64_t v10 = a1 + 64;
  uint64_t v11 = v3;
  uint64_t v12 = a1 + 96;
  while ((v9 & 1) == 0)
  {
    if (v4 < 0 || v4 >= 1LL << *(_BYTE *)(v5 + 32))
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      break;
    }

    unint64_t v14 = (unint64_t)v4 >> 6;
    if (*(_DWORD *)(v5 + 36) != (_DWORD)v3) {
      goto LABEL_30;
    }
    uint64_t v15 = *(void *)(v5 + 48) + 8 * v4;
    int v16 = *(_DWORD *)v15;
    char v17 = *(_BYTE *)(v15 + 4);
    char v18 = *(_BYTE *)(v15 + 5);
    unint64_t v20 = _swiftEmptyArrayStorage[2];
    unint64_t v19 = _swiftEmptyArrayStorage[3];
    if (v20 >= v19 >> 1)
    {
      uint64_t v37 = v3;
      uint64_t v38 = v12;
      uint64_t v40 = v10;
      uint64_t v41 = v7;
      uint64_t v39 = v11;
      uint64_t result = (void *)sub_100267EF8(v19 > 1, v20 + 1, 1);
      uint64_t v3 = v37;
      uint64_t v12 = v38;
      uint64_t v11 = v39;
      uint64_t v10 = v40;
      uint64_t v7 = v41;
      uint64_t v6 = v42;
      uint64_t v5 = a1;
    }

    _swiftEmptyArrayStorage[2] = v20 + 1;
    char v21 = &_swiftEmptyArrayStorage[v20];
    *((_DWORD *)v21 + 8) = v16;
    *((_BYTE *)v21 + 36) = v17;
    *((_BYTE *)v21 + 37) = v18;
    int64_t v13 = 1LL << *(_BYTE *)(v5 + 32);
    if (v4 >= v13) {
      goto LABEL_31;
    }
    uint64_t v22 = *(void *)(v10 + 8 * v14);
    if ((v22 & (1LL << v4)) == 0) {
      goto LABEL_32;
    }
    if (*(_DWORD *)(v5 + 36) != (_DWORD)v3) {
      goto LABEL_33;
    }
    unint64_t v23 = v22 & (-2LL << (v4 & 0x3F));
    if (v23)
    {
      int64_t v13 = __clz(__rbit64(v23)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v24 = v14 + 1;
      unint64_t v25 = (unint64_t)(v13 + 63) >> 6;
      if (v14 + 1 < v25)
      {
        unint64_t v26 = *(void *)(v10 + 8 * v24);
        if (!v26)
        {
          unint64_t v24 = v14 + 2;
          if (v14 + 2 >= v25) {
            goto LABEL_4;
          }
          unint64_t v26 = *(void *)(v10 + 8 * v24);
          if (!v26)
          {
            unint64_t v24 = v14 + 3;
            if (v14 + 3 >= v25) {
              goto LABEL_4;
            }
            unint64_t v26 = *(void *)(v10 + 8 * v24);
            if (!v26)
            {
              while (v25 - 4 != v14)
              {
                unint64_t v26 = *(void *)(v12 + 8 * v14++);
                if (v26)
                {
                  uint64_t v27 = v4;
                  uint64_t v28 = v7;
                  uint64_t v29 = v10;
                  uint64_t v30 = v11;
                  uint64_t v31 = v12;
                  uint64_t result = (void *)sub_100022588(v27, v3, 0);
                  uint64_t v12 = v31;
                  uint64_t v11 = v30;
                  uint64_t v10 = v29;
                  uint64_t v7 = v28;
                  uint64_t v6 = v42;
                  uint64_t v5 = a1;
                  unint64_t v24 = v14 + 3;
                  goto LABEL_18;
                }
              }

              uint64_t v32 = v4;
              uint64_t v33 = v7;
              uint64_t v34 = v10;
              uint64_t v35 = v11;
              uint64_t v36 = v12;
              uint64_t result = (void *)sub_100022588(v32, v3, 0);
              uint64_t v12 = v36;
              uint64_t v11 = v35;
              uint64_t v10 = v34;
              uint64_t v7 = v33;
              uint64_t v6 = v42;
              uint64_t v5 = a1;
              goto LABEL_4;
            }
          }
        }

uint64_t sub_1002E2184(uint64_t a1)
{
  uint64_t v4 = *(void *)((swift_isaMask & *v1) + 0x50LL);
  uint64_t v3 = *(void *)((swift_isaMask & *v1) + 0x58LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v3 + 8),  v4,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = __chkstk_darwin(AssociatedTypeWitness);
  char v9 = (char *)&v14 - v8;
  uint64_t v10 = qword_10040F998;
  if (*(void *)((char *)v1 + qword_10040F998) != a1)
  {
    uint64_t v11 = *(void *)((char *)v1 + qword_10040F990);
    swift_unownedRetainStrong(v11);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))( v9,  v11 + *(void *)(*(void *)v11 + 96LL),  AssociatedTypeWitness);
    swift_release(v11);
    unint64_t v12 = *(void *)((char *)v1 + v10);
    if ((v12 & 0x8000000000000000LL) != 0)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    }

    else
    {
      if (v12 < 0x100)
      {
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v3,  v4,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
        (*(void (**)(void, uint64_t, uint64_t))(AssociatedConformanceWitness + 328))( v12 | ((v12 != 0) << 16),  AssociatedTypeWitness,  AssociatedConformanceWitness);
        return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
      }

      uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    }

    __break(1u);
  }

  return result;
}

double sub_1002E2370(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(v2 + qword_10040F9A0);
  uint64_t v5 = *(void *)(v2 + qword_10040F9A0 + 8);
  if (!v5)
  {
    if (!a2) {
      return result;
    }
    return sub_1002E26D4();
  }

  if (!a2) {
    return sub_1002E26D4();
  }
  BOOL v6 = *v4 == a1 && v5 == a2;
  if (!v6 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v4, v5, a1, a2, 0LL) & 1) == 0) {
    return sub_1002E23D4(1LL);
  }
  return result;
}

double sub_1002E23D4(uint64_t a1)
{
  uint64_t v2 = v1;
  int v3 = a1 & 1;
  uint64_t v4 = *v1;
  uint64_t v5 = swift_isaMask;
  BOOL v6 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v7 = static os_log_type_t.default.getter(v6);
  int v30 = v3;
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v8 = 136315138;
    v32[0] = v9;
    if (v3) {
      uint64_t v10 = 0xD000000000000010LL;
    }
    else {
      uint64_t v10 = 0x6C7561686B636142LL;
    }
    if (v3) {
      unint64_t v11 = 0x8000000100369BC0LL;
    }
    else {
      unint64_t v11 = 0xED000074736F4C20LL;
    }
    uint64_t v31 = sub_10000235C(v10, v11, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32);
    swift_bridgeObjectRelease(v11);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "Stopping internet sharing provider based on policy update: %s",  v8,  0xCu);
    swift_arrayDestroy(v9, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  unint64_t v12 = (char *)v2 + qword_10040F9B0;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong((char *)v2 + qword_10040F9B0);
  if (Strong)
  {
    uint64_t v15 = (void *)Strong;
    uint64_t v16 = v5 & v4;
    char v17 = (void *)(Strong + qword_100410A48);
    swift_beginAccess(Strong + qword_100410A48, v32, 0LL, 0LL);
    uint64_t v18 = *v17;
    uint64_t v19 = *(void *)(v16 + 80);
    uint64_t v20 = *(void *)(v16 + 88);
    uint64_t v22 = _s17ResponderInstanceCMa(0LL, v19, v20, v21);
    unint64_t v23 = sub_10017B5C8();
    swift_bridgeObjectRetain(v18);
    char v25 = Dictionary.isEmpty.getter(v24, &type metadata for NANPeerServiceIdentifier, v22, v23);
    swift_bridgeObjectRelease(v18);
    if ((v25 & 1) != 0)
    {
      sub_10025D998();

      swift_unknownObjectWeakAssign(v12, 0LL);
    }

    else
    {
      *((_BYTE *)v2 + qword_10040F9B8) = v30;
      uint64_t v26 = NANBitmap.Channel.operatingClass.getter(*v17);
      uint64_t v31 = v26;
      __chkstk_darwin();
      v29[2] = v19;
      uint64_t v29[3] = v20;
      uint64_t v27 = type metadata accessor for Dictionary.Values(0LL, &type metadata for NANPeerServiceIdentifier, v22, v23);
      swift_bridgeObjectRetain(v26);
      uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v27);
      Sequence.forEach(_:)(sub_100262910, v29, v27, WitnessTable);

      *(void *)&double result = swift_bridgeObjectRelease(v31).n128_u64[0];
    }
  }

  return result;
}

double sub_1002E26D4()
{
  uint64_t v1 = v0 + qword_10040F9B0;
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + qword_10040F9B0);

  if (Strong || (uint64_t v5 = *(void *)(v0 + qword_10040F9A0 + 8)) == 0)
  {
    int v3 = (void *)swift_unknownObjectWeakLoadStrong(v1);

    if (v3)
    {
      if (!*(void *)(v0 + qword_10040F9A0 + 8)) {
        return sub_1002E23D4(0LL);
      }
    }
  }

  else
  {
    swift_bridgeObjectRetain(*(void *)(v0 + qword_10040F9A0 + 8));
    sub_1002E2CD4();
    *(void *)&double result = swift_bridgeObjectRelease(v5).n128_u64[0];
  }

  return result;
}

uint64_t sub_1002E2790()
{
  uint64_t v1 = v0;
  uint64_t v2 = swift_isaMask & *v0;
  sub_1002E28D0();
  int v3 = (void *)((char *)v0 + qword_10040F9A8);
  swift_beginAccess(v3, v18, 0LL, 0LL);
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(v2 + 80);
  uint64_t v6 = *(void *)(v2 + 88);
  uint64_t v8 = type metadata accessor for LowLatencyInternetProviderPolicy.Requester(0LL, v5, v6, v7);
  unint64_t v9 = sub_10029F2C0();
  uint64_t v17 = NANBitmap.Channel.operatingClass.getter(v4);
  _OWORD v16[2] = v5;
  v16[3] = v6;
  uint64_t v10 = type metadata accessor for Dictionary.Values(0LL, &type metadata for WiFiAddress, v8, v9);
  swift_bridgeObjectRetain(v17);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v10);
  uint64_t v12 = Sequence.filter(_:)(sub_1002E853C, v16, v10, WitnessTable);
  uint64_t v13 = Array.count.getter(v12, v8);
  swift_bridgeObjectRelease(v12);
  uint64_t v14 = *(void *)((char *)v1 + qword_10040F998);
  *(void *)((char *)v1 + qword_10040F998) = v13;
  return sub_1002E2184(v14);
}

void sub_1002E28D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = swift_isaMask & *v0;
  uint64_t v3 = sub_100002274((uint64_t *)&unk_10040FC20);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v43[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = (void *)((char *)v0 + qword_10040F9A8);
  swift_beginAccess(v6, v46, 0LL, 0LL);
  uint64_t v7 = *v6;
  uint64_t v8 = *(void *)(v2 + 80);
  uint64_t v9 = *(void *)(v2 + 88);
  uint64_t v11 = type metadata accessor for LowLatencyInternetProviderPolicy.Requester(0LL, v8, v9, v10);
  unint64_t v12 = sub_10029F2C0();
  swift_bridgeObjectRetain(v7);
  char v14 = Dictionary.isEmpty.getter(v13, &type metadata for WiFiAddress, v11, v12);
  swift_bridgeObjectRelease(v7);
  if ((v14 & 1) != 0 || (uint64_t v15 = (char *)v1 + qword_10040F9A0, *(void *)((char *)v1 + qword_10040F9A0 + 8)))
  {
    uint64_t v16 = *v6;
    swift_bridgeObjectRetain(v16);
    char v18 = Dictionary.isEmpty.getter(v17, &type metadata for WiFiAddress, v11, v12);
    swift_bridgeObjectRelease(v16);
    if ((v18 & 1) != 0)
    {
      uint64_t v19 = (void *)((char *)v1 + qword_10040F9A0);
      uint64_t v20 = *(void *)((char *)v1 + qword_10040F9A0);
      uint64_t v21 = *(void *)((char *)v1 + qword_10040F9A0 + 8);
      *uint64_t v19 = 0LL;
      v19[1] = 0LL;
      sub_1002E2370(v20, v21);
      swift_bridgeObjectRelease(v21);
      uint64_t v22 = (void *)((char *)v1 + qword_10040F980);
      swift_beginAccess(v22, v45, 1LL, 0LL);
      uint64_t v23 = *v22;
      *uint64_t v22 = 0LL;
      swift_release(v23);
    }
  }

  else
  {
    uint64_t v24 = (void *)((char *)v1 + qword_10040F980);
    swift_beginAccess((char *)v1 + qword_10040F980, v45, 0LL, 0LL);
    uint64_t v42 = *v24;
    uint64_t v25 = *(void *)((char *)v1 + qword_10040F990);
    swift_unownedRetainStrong(v25);
    uint64_t v26 = *(void *)(v25 + *(void *)(*(void *)v25 + 688LL));
    swift_unownedRetainStrong(v26);
    swift_release(v25);
    sub_1002CFE84((uint64_t)v5);
    swift_release(v26);
    uint64_t v27 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
    uint64_t v28 = swift_allocObject(&unk_1003FAA48, 24LL, 7LL);
    swift_unknownObjectWeakInit(v28 + 16, v1);
    uint64_t v29 = (void *)swift_allocObject(&unk_1003FAA70, 40LL, 7LL);
    v29[2] = v8;
    uint64_t v29[3] = v9;
    void v29[4] = v28;
    swift_beginAccess(v24, v44, 33LL, 0LL);
    uint64_t v30 = *v24;
    id v31 = v27;
    uint64_t v32 = v31;
    if (v30) {
      ObservableWiFiProperty.wrappedValue.getter(v3, (uint64_t)v43);
    }
    else {
      ObservableWiFiProperty.registerForChanges(on:using:valueUpdateHandler:)( v31,  v24,  (uint64_t)sub_1002E8568,  (uint64_t)v29,  v3,  (uint64_t)v43);
    }
    uint64_t v33 = v43[0];
    uint64_t v34 = v43[1];
    swift_endAccess(v44);

    swift_release(v29);
    sub_1000225EC((uint64_t)v5, (uint64_t *)&unk_10040FC20);
    uint64_t v35 = (void *)((char *)v1 + qword_10040F9A0);
    uint64_t v36 = *(void *)((char *)v1 + qword_10040F9A0);
    uint64_t v37 = *(void *)((char *)v1 + qword_10040F9A0 + 8);
    *uint64_t v35 = v33;
    v35[1] = v34;
    sub_1002E2370(v36, v37);
    swift_bridgeObjectRelease(v37);
    if (!v42 && !*((void *)v15 + 1))
    {
      uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
      os_log_type_t v40 = static os_log_type_t.default.getter(v39);
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v41 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "Waiting to start publishing the provider because there is no interface to share internet from",  v41,  2u);
        swift_slowDealloc(v41, -1LL, -1LL);
      }
    }
  }

uint64_t (*sub_1002E2C5C(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess(v1 + qword_10040F9A8, a1, 33LL, 0LL);
  return sub_1002E2CA4;
}

uint64_t sub_1002E2CA4(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess(a1);
  if ((a2 & 1) == 0) {
    return sub_1002E2790();
  }
  return result;
}

void sub_1002E2CD4()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v2 = swift_isaMask & *v0;
  uint64_t v3 = *(void *)(v2 + 0x50);
  uint64_t v4 = *(void *)(*(void *)(v2 + 88) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v4,  v3,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v4,  v3,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v7 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v8 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v7,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.PreferencesBacking: PreferencesStorage);
  uint64_t v10 = type metadata accessor for Preferences(0LL, v7, v8, v9);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v38 - v12;
  uint64_t v14 = *(void *)(v1 + qword_10040F990);
  swift_unownedRetainStrong(v14);
  WiFiInterface.preferences.getter();
  swift_release(v14);
  char v15 = Preferences.internetSharingOptions.getter(v10);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (v15)
  {
    if (v15 == 1)
    {
      unint64_t v16 = 0xE500000000000000LL;
      uint64_t v17 = 0x6775626564LL;
    }

    else
    {
      unint64_t v16 = 0xEB00000000646573LL;
      uint64_t v17 = 0x61427963696C6F70LL;
    }

    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v16, 6710895LL, 0xE300000000000000LL, 0LL);
    swift_bridgeObjectRelease(v16);
    if ((v18 & 1) == 0)
    {
      uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
      os_log_type_t v21 = static os_log_type_t.default.getter(v20);
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "Starting internet sharing provider based on policy update",  v22,  2u);
        swift_slowDealloc(v22, -1LL, -1LL);
      }

      uint64_t v23 = NANConstants.internetSharingServiceName.unsafeMutableAddressor()[1];
      id v24 = objc_allocWithZone(&OBJC_CLASS___WiFiAwarePublishConfiguration);
      swift_bridgeObjectRetain(v23);
      NSString v25 = String._bridgeToObjectiveC()();
      id v26 = objc_msgSend(v24, "initWithServiceName:", v25, swift_bridgeObjectRelease(v23).n128_f64[0]);

      [v26 setAuthenticationType:0];
      uint64_t v27 = (void *)objc_opt_self(&OBJC_CLASS___WiFiAwareInternetSharingConfiguration);
      NSString v28 = String._bridgeToObjectiveC()();
      id v29 = [v27 provideInternetToInitiatorsFromInterface:v28];

      [v26 setInternetSharingConfiguration:v29];
      id v30 = [v26 internetSharingConfiguration];
      if (v30)
      {
        id v31 = v30;
        [v30 setUseBridging:1];
      }

      *(_BYTE *)(v1 + qword_10040F9B8) = 2;
      uint64_t v32 = swift_unownedRetainStrong(v14);
      uint64_t v36 = sub_1002E8D68(v32, v33, v34, v35);
      swift_release(v14);
      uint64_t v37 = (void *)sub_10029D28C((uint64_t)v26, v1);
      swift_release(v36);

      swift_unknownObjectWeakAssign(v1 + qword_10040F9B0, v37);
    }
  }

  else
  {
    swift_bridgeObjectRelease(0xE300000000000000LL);
  }

double sub_1002E30D4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if ((a3 & 0x100000000000000LL) != 0)
  {
    uint64_t v14 = swift_isaMask & *v3;
    char v15 = (void *)((char *)v3 + qword_10040F9A8);
    swift_beginAccess((char *)v3 + qword_10040F9A8, v26, 0LL, 0LL);
    uint64_t v16 = *v15;
    __chkstk_darwin();
    id v24 = v3;
    uint64_t v18 = type metadata accessor for LowLatencyInternetProviderPolicy.Requester( 0LL,  *(void *)(v14 + 80),  *(void *)(v14 + 88),  v17);
    unint64_t v19 = sub_10029F2C0();
    swift_bridgeObjectRetain(v16);
    uint64_t v25 = Dictionary.filter(_:)(sub_1002E8574, v23, v16, &type metadata for WiFiAddress, v18, v19);
    __chkstk_darwin();
    v23[0] = v3;
    v23[1] = a1;
    id v24 = (void *)a2;
    uint64_t v20 = type metadata accessor for Dictionary(0LL, &type metadata for WiFiAddress, v18, v19);
    uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v20);
    Sequence.forEach(_:)(sub_1002E85B0, &v22, v20, WitnessTable);
    *(void *)&double result = swift_bridgeObjectRelease(v25).n128_u64[0];
  }

  else
  {
    uint64_t v7 = *(void *)((char *)v3 + qword_10040F990);
    uint64_t v8 = swift_unownedRetainStrong(v7);
    uint64_t v12 = sub_1002E8D68(v8, v9, v10, v11);
    swift_release(v7);
    sub_100288784(a3 & 0xFFFFFFFFFFFFFFLL, a1, a2);
    *(void *)&double result = swift_release(v12).n128_u64[0];
  }

  return result;
}

uint64_t sub_1002E32A8(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD000000000000010LL;
  }
  else {
    return 0x6C7561686B636142LL;
  }
}

BOOL sub_1002E32F0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static NANInternetSharingStatistics.Status.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_1002E3304()
{
  return NANInternetSharingStatistics.Status.hashValue.getter(*v0);
}

void sub_1002E3314(uint64_t a1)
{
}

Swift::Int sub_1002E3324(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1002E3368()
{
  return sub_1002E32A8(*v0);
}

id sub_1002E3378()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  uint64_t v2 = swift_isaMask & *v0;
  swift_beginAccess((char *)v0 + qword_10040F9A8, v8, 33LL, 0LL);
  uint64_t v4 = type metadata accessor for LowLatencyInternetProviderPolicy.Requester( 255LL,  *(void *)(v2 + 80),  *(void *)(v2 + 88),  v3);
  unint64_t v5 = sub_10029F2C0();
  type metadata accessor for Dictionary(0LL, &type metadata for WiFiAddress, v4, v5);
  Dictionary.removeAll(keepingCapacity:)(0);
  swift_endAccess(v8);
  v7.receiver = v0;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, "dealloc");
}

id sub_1002E3438(void *a1)
{
  id v1 = a1;
  return sub_1002E3378();
}

uint64_t sub_1002E345C(uint64_t a1)
{
  uint64_t v2 = a1 + qword_100410C28;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  swift_release(*(void *)(a1 + qword_10040F980));
  swift_bridgeObjectRelease(*(void *)(a1 + qword_10040F988 + 8));
  swift_unownedRelease(*(void *)(a1 + qword_10040F990));
  swift_bridgeObjectRelease(*(void *)(a1 + qword_10040F9A0 + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + qword_10040F9A8));
  return swift_unknownObjectWeakDestroy(a1 + qword_10040F9B0);
}

void sub_1002E3504(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5 = v4;
  uint64_t v9 = *(void *)((swift_isaMask & *v5) + 0x50LL);
  uint64_t v10 = *(void *)((swift_isaMask & *v5) + 0x58LL);
  v30[0] = a4 & 0xFFFFFFFFFFFFFFLL;
  v30[1] = a2;
  v30[2] = a3;
  char v31 = 0;
  __int16 v25 = a1;
  char v26 = BYTE2(a1);
  char v27 = BYTE3(a1);
  char v28 = BYTE4(a1);
  char v29 = BYTE5(a1);
  swift_beginAccess((char *)v5 + qword_10040F9A8, &v23, 33LL, 0LL);
  sub_10002255C(a2, a3);
  uint64_t v12 = type metadata accessor for LowLatencyInternetProviderPolicy.Requester(255LL, v9, v10, v11);
  unint64_t v13 = sub_10029F2C0();
  uint64_t v14 = type metadata accessor for Dictionary(0LL, &type metadata for WiFiAddress, v12, v13);
  Dictionary.subscript.setter(v30, &v25, v14);
  swift_endAccess(&v23);
  uint64_t v15 = sub_1002E2790();
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    v30[0] = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    uint64_t v20 = WiFiAddress.description.getter(a1 & 0xFFFFFFFFFFFFLL);
    unint64_t v22 = v21;
    uint64_t v23 = sub_10000235C(v20, v21, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Added requester %s", v18, 0xCu);
    swift_arrayDestroy(v19, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }
}

uint64_t sub_1002E3720(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = swift_isaMask;
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v23 = v4;
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    v31[0] = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v10 = WiFiAddress.description.getter(a1 & 0xFFFFFFFFFFFFLL);
    unint64_t v12 = v11;
    uint64_t v24 = sub_10000235C(v10, v11, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Removed requester %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v9, -1LL, -1LL);
    unint64_t v13 = v8;
    uint64_t v4 = v23;
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  __int16 v26 = a1;
  char v27 = BYTE2(a1);
  char v28 = BYTE3(a1);
  char v29 = BYTE4(a1);
  char v30 = BYTE5(a1);
  swift_beginAccess((char *)v2 + qword_10040F9A8, &v24, 33LL, 0LL);
  uint64_t v15 = type metadata accessor for LowLatencyInternetProviderPolicy.Requester( 255LL,  *(void *)((v5 & v4) + 0x50),  *(void *)((v5 & v4) + 0x58),  v14);
  unint64_t v16 = sub_10029F2C0();
  uint64_t v17 = type metadata accessor for Dictionary(0LL, &type metadata for WiFiAddress, v15, v16);
  Dictionary.removeValue(forKey:)(&v26, v17);
  uint64_t v18 = v31[0];
  uint64_t v19 = v31[1];
  unint64_t v20 = v31[2];
  char v21 = v32;
  swift_endAccess(&v24);
  sub_1002E8520(v18, v19, v20, v21);
  return sub_1002E2790();
}

uint64_t sub_1002E393C(unint64_t a1)
{
  char v2 = a1;
  unint64_t v3 = a1 >> 8;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = a1 >> 24;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = a1 >> 40;
  uint64_t v8 = swift_isaMask & *v1;
  uint64_t v9 = (void *)((char *)v1 + qword_10040F9A8);
  swift_beginAccess(v9, v23, 32LL, 0LL);
  uint64_t v10 = *v9;
  v18[0] = v2;
  v18[1] = v3;
  void v18[2] = v4;
  v18[3] = v5;
  v18[4] = v6;
  v18[5] = v7;
  uint64_t v12 = type metadata accessor for LowLatencyInternetProviderPolicy.Requester( 0LL,  *(void *)(v8 + 80),  *(void *)(v8 + 88),  v11);
  sub_10029F2C0();
  Dictionary.subscript.getter(v18, v10, &type metadata for WiFiAddress, v12);
  char v13 = v22;
  if (v22 == 2)
  {
    swift_endAccess(v23);
    return 0LL;
  }

  else
  {
    uint64_t v15 = v19;
    uint64_t v14 = v20;
    unint64_t v16 = v21;
    swift_endAccess(v23);
    sub_10002255C(v14, v16);
    sub_1002E8520(v15, v14, v16, v13);
  }

  return v14;
}

uint64_t sub_1002E3A68()
{
  uint64_t v1 = swift_isaMask & *v0;
  char v2 = (void *)((char *)v0 + qword_10040F9A8);
  swift_beginAccess((char *)v0 + qword_10040F9A8, v15, 0LL, 0LL);
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(v1 + 88);
  uint64_t v13 = *(void *)(v1 + 80);
  uint64_t v14 = v4;
  void v11[2] = v13;
  _OWORD v11[3] = v4;
  v11[4] = sub_1002E8104;
  v11[5] = &v12;
  uint64_t v6 = type metadata accessor for LowLatencyInternetProviderPolicy.Requester(0LL, v13, v4, v5);
  unint64_t v7 = sub_10029F2C0();
  swift_bridgeObjectRetain(v3);
  uint64_t v8 = Dictionary.filter(_:)(sub_1002E810C, v11, v3, &type metadata for WiFiAddress, v6, v7);
  uint64_t v9 = Dictionary.count.getter(v8, &type metadata for WiFiAddress, v6, v7);
  swift_bridgeObjectRelease(v8);
  return v9;
}

uint64_t sub_1002E3B58(uint64_t a1)
{
  uint64_t v4 = &v27[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = (int *)type metadata accessor for NANPeer(0LL);
  __chkstk_darwin();
  unint64_t v7 = &v27[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  uint64_t v9 = &v27[-v8];
  uint64_t v10 = *(void *)(v1 + qword_10040F990);
  swift_unownedRetainStrong(v10);
  uint64_t v11 = *(void *)(v10 + *(void *)(*(void *)v10 + 688LL));
  swift_unownedRetainStrong(v11);
  swift_release(v10);
  sub_1002CF2F0();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  swift_release(v11);
  if (v13)
  {
    swift_bridgeObjectRelease(v13);
    unint64_t v16 = v15 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    unint64_t v16 = 0x300000000LL;
  }

  swift_unownedRetainStrong(v10);
  uint64_t v17 = a1 & 0xFFFFFFFFFFFFLL;
  sub_1002EA528(a1 & 0xFFFFFFFFFFFFLL, (uint64_t)v9);
  swift_release(v10);
  uint64_t v18 = *(void *)&v9[v5[17] + 8];
  sub_10005802C((uint64_t)v9, type metadata accessor for NANPeer);
  if ((v18 & 0xFF00000000LL) == 0x200000000LL) {
    unint64_t v19 = 0x300000000LL;
  }
  else {
    unint64_t v19 = Optional<A>.init(integerLiteral:)(BYTE6(v18)) & 0xFFFFFFFFFFFFLL;
  }
  swift_unownedRetainStrong(v10);
  sub_1002EA528(v17, (uint64_t)v7);
  swift_release(v10);
  sub_100253E44((uint64_t)&v7[v5[18]], (uint64_t)v4);
  uint64_t v20 = type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48LL))(v4, 1LL, v20) == 1)
  {
    sub_1000225EC((uint64_t)v4, &qword_10040CED0);
  }

  else
  {
    int v21 = *((_DWORD *)v4 + 1);
    sub_10005802C((uint64_t)v4, type metadata accessor for NANAttribute.CustomDeviceInformation);
    if ((*(_DWORD *)NANAttribute.CustomDeviceInformation.Flags.doesNotSupportSimultaneousDualBand.unsafeMutableAddressor() & ~v21) == 0)
    {
LABEL_12:
      char v23 = 0;
      goto LABEL_13;
    }
  }

  uint64_t v22 = *(void *)&v7[v5[16] + 8];
  if (!v22) {
    goto LABEL_12;
  }
  char v23 = *(void *)(v22 + 16) > 1uLL;
LABEL_13:
  sub_10005802C((uint64_t)v7, type metadata accessor for NANPeer);
  swift_unownedRetainStrong(v10);
  uint64_t v24 = sub_1002EC320();
  swift_release(v10);
  uint64_t v25 = sub_1002E1EBC(v24);
  swift_bridgeObjectRelease(v24);
  return sub_1002E8168(v16, v19, v23, (uint64_t)v25);
}

double sub_1002E3DFC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v12, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    uint64_t v8 = (void *)Strong;
    uint64_t v9 = (void *)(Strong + qword_10040F9A0);
    uint64_t v10 = *(void *)(Strong + qword_10040F9A0);
    uint64_t v11 = *(void *)(Strong + qword_10040F9A0 + 8);
    *uint64_t v9 = v4;
    v9[1] = v3;
    swift_bridgeObjectRetain(v3);
    sub_1002E2370(v10, v11);

    *(void *)&double result = swift_bridgeObjectRelease(v11).n128_u64[0];
  }

  return result;
}

double sub_1002E3E8C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = *(unsigned __int8 *)(a1 + 10);
  uint64_t v7 = *(unsigned int *)(a1 + 11);
  uint64_t v8 = *(void *)(a2 + qword_10040F990);
  uint64_t v9 = *(unsigned __int16 *)(a1 + 8);
  uint64_t v10 = swift_unownedRetainStrong(v8);
  uint64_t v14 = sub_1002E8D68(v10, v11, v12, v13);
  swift_release(v8);
  sub_100288784(v9 | (v6 << 16) | (v7 << 24), a3, a4);
  *(void *)&double result = swift_release(v14).n128_u64[0];
  return result;
}

unint64_t sub_1002E3F1C(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = swift_isaMask;
  uint64_t v5 = (char *)v1 + qword_10040F9B0;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong((char *)v1 + qword_10040F9B0);
  if (!Strong) {
    goto LABEL_4;
  }
  uint64_t v7 = (void *)Strong;
  uint64_t v8 = v4 & v3;
  uint64_t v9 = (uint64_t *)(Strong + qword_100410A48);
  swift_beginAccess(Strong + qword_100410A48, v37, 0LL, 0LL);
  uint64_t v10 = *v9;
  swift_bridgeObjectRetain(v10);

  uint64_t v11 = WiFiAwarePublisherDataSessionHandle.peerServiceIdentifier.getter();
  LOWORD(v33[0]) = v11;
  BYTE2(v33[0]) = BYTE2(v11);
  BYTE3(v33[0]) = BYTE3(v11);
  BYTE4(v33[0]) = BYTE4(v11);
  BYTE5(v33[0]) = BYTE5(v11);
  BYTE6(v33[0]) = BYTE6(v11);
  uint64_t v13 = _s17ResponderInstanceCMa(0LL, *(void *)(v8 + 80), *(void *)(v8 + 88), v12);
  sub_10017B5C8();
  Dictionary.subscript.getter(v33, v10, &type metadata for NANPeerServiceIdentifier, v13);
  swift_bridgeObjectRelease(v10);
  uint64_t v14 = v36;
  if (v36)
  {
    uint64_t v15 = (uint64_t)&v36[qword_10040C330];
    swift_beginAccess(&v36[qword_10040C330], &v34, 0LL, 0LL);
    sub_10022B484(v15, (uint64_t)v33);

    uint64_t v16 = *(unsigned int *)((char *)v33 + 2);
    uint64_t v17 = BYTE6(v33[0]);
    uint64_t v18 = HIBYTE(v33[0]);
    sub_10022B4C0((uint64_t)v33);
    unsigned __int8 v19 = 0;
    uint64_t v20 = v16 | (v17 << 32) | (v18 << 40);
  }

  else
  {
LABEL_4:
    uint64_t v21 = swift_unknownObjectWeakLoadStrong(v5);
    if (v21)
    {
      uint64_t v22 = (void *)v21;
      sub_10025E424((uint64_t)a1, (void (*)(void))NANBitmap.Channel.operatingClass.getter, 0LL);
    }

    id v23 = a1;
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      __int16 v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v27 = swift_slowAlloc(32LL, -1LL);
      v33[0] = v27;
      *(_DWORD *)__int16 v26 = 136315138;
      uint64_t v28 = WiFiAwarePublisherDataSessionHandle.peerServiceIdentifier.getter();
      uint64_t v29 = NANPeerServiceIdentifier.description.getter(v28 & 0xFFFFFFFFFFFFFFLL);
      unint64_t v31 = v30;
      uint64_t v34 = sub_10000235C(v29, v30, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);

      swift_bridgeObjectRelease(v31);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Unknown requester address for %s", v26, 0xCu);
      unsigned __int8 v19 = 1;
      swift_arrayDestroy(v27, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);

      uint64_t v20 = 0LL;
    }

    else
    {

      uint64_t v20 = 0LL;
      unsigned __int8 v19 = 1;
    }
  }

  return v20 | ((unint64_t)v19 << 48);
}

double sub_1002E4214(uint64_t a1)
{
  v2._countAndFlagsBits = WiFiP2PError.description.getter(a1);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  sub_1002E30D4(0xD000000000000020LL, 0x8000000100369E10LL, 0x100000000000000LL);
  *(void *)&double result = swift_bridgeObjectRelease(0x8000000100369E10LL).n128_u64[0];
  return result;
}

void sub_1002E42BC(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = a1;
  sub_1002E4214(a3);
}

double sub_1002E42FC(uint64_t a1)
{
  Swift::String v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1 != -1)
  {
    if ((*((_BYTE *)v1 + qword_10040F9B8) & 1) != 0)
    {
      uint64_t v15 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
      uint64_t v16 = swift_allocObject(&unk_1003FABD8, 24LL, 7LL);
      *(void *)(v16 + swift_weakDestroy(v0 + 16) = v2;
      unint64_t v31 = sub_1002E88A8;
      uint64_t v32 = v16;
      __int128 aBlock = _NSConcreteStackBlock;
      unint64_t v28 = 1107296256LL;
      uint64_t v29 = sub_1000021F0;
      unint64_t v30 = &unk_1003FABF0;
      uint64_t v17 = _Block_copy(&aBlock);
      id v18 = v15;
      static DispatchQoS.unspecified.getter(v2);
      __int16 v26 = _swiftEmptyArrayStorage;
      unint64_t v19 = sub_100002234();
      uint64_t v20 = sub_100002274((uint64_t *)&unk_1004052A0);
      unint64_t v21 = sub_1000022B4();
      dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v20, v21, v4, v19);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v7, v17);
      _Block_release(v17);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      *(void *)&double result = swift_release(v32).n128_u64[0];
    }

    else
    {
      __int128 aBlock = 0LL;
      unint64_t v28 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(29LL);
      swift_bridgeObjectRelease(v28);
      __int128 aBlock = (void **)0xD00000000000001BLL;
      unint64_t v28 = 0x8000000100369DF0LL;
      unint64_t v13 = 0xE900000000000074LL;
      unint64_t v14 = 0x754F2064656D6954LL;
      switch(a1)
      {
        case 1LL:
          break;
        case 2LL:
          unint64_t v13 = 0xEE00646574736575LL;
          unint64_t v14 = 0x7165522072657355LL;
          break;
        case 3LL:
          unint64_t v13 = 0xEC0000006572756CLL;
          unint64_t v14 = 0x6961462070696843LL;
          break;
        case 4LL:
          unint64_t v13 = 0x8000000100364D20LL;
          unint64_t v14 = 0xD000000000000018LL;
          break;
        default:
          unint64_t v13 = 0xE700000000000000LL;
          unint64_t v14 = 0x6E776F6E6B6E55LL;
          break;
      }

      unint64_t v22 = v13;
      String.append(_:)(*(Swift::String *)&v14);
      swift_bridgeObjectRelease(v13);
      uint64_t v23 = (uint64_t)aBlock;
      unint64_t v24 = v28;
      LOBYTE(aBlock) = 1;
      sub_1002E30D4(v23, v28, 0x100000000000000LL);
      *(void *)&double result = swift_bridgeObjectRelease(v24).n128_u64[0];
    }
  }

  return result;
}

void sub_1002E4618(uint64_t a1)
{
  if (*(void *)(a1 + qword_10040F9A0 + 8)) {
    sub_1002E26D4();
  }
  else {
    sub_1002E28D0();
  }
}

void sub_1002E4658(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = a1;
  sub_1002E42FC(a3);
}

uint64_t sub_1002E4698@<X0>(int *a1@<X0>, void *a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v5 = swift_isaMask & *a2;
  __int16 v6 = *((_WORD *)a1 + 2);
  uint64_t v7 = sub_1002E2C5C((uint64_t)v17);
  int v18 = *a1;
  __int16 v19 = v6;
  uint64_t v9 = type metadata accessor for LowLatencyInternetProviderPolicy.Requester( 255LL,  *(void *)(v5 + 80),  *(void *)(v5 + 88),  v8);
  unint64_t v10 = sub_10029F2C0();
  uint64_t v11 = type metadata accessor for Dictionary(0LL, &type metadata for WiFiAddress, v9, v10);
  unint64_t v13 = (void (*)(_BYTE *, void))Dictionary.subscript.modify(v16, &v18, v11);
  int v14 = *(unsigned __int8 *)(v12 + 24);
  if (v14 != 2) {
    *(_BYTE *)(v12 + 24) = 1;
  }
  v13(v16, 0LL);
  uint64_t result = v7((uint64_t)v17, 0);
  *a3 = v14 == 2;
  return result;
}

void sub_1002E4790(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v7 = a3;
  id v8 = a5;
  id v9 = a1;
  sub_1002E8664(v7);
}

void sub_1002E47F4(void *a1, uint64_t a2)
{
  if (a2 == -1)
  {
    sub_1002E48A4(v2);
  }

  else
  {
    sub_1002E3F1C(a1);
    unint64_t v4 = __chkstk_darwin();
    void v5[2] = v2;
    v5[3] = a2;
    sub_10027E95C( (void *(*)(uint64_t *__return_ptr, __int16 *))sub_1002E884C,  (uint64_t)v5,  v4 & 0xFFFFFFFFFFFFLL | ((HIWORD(v4) & 1) << 48));
    sub_1002E48A4(v2);
  }

void sub_1002E48A4(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = swift_isaMask;
  unint64_t v4 = (char *)a1 + qword_10040F9B0;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong((char *)a1 + qword_10040F9B0);
  if (Strong)
  {
    __int16 v6 = (void *)Strong;
    uint64_t v7 = v3 & v2;
    id v8 = (void *)(Strong + qword_100410A48);
    swift_beginAccess(Strong + qword_100410A48, v29, 0LL, 0LL);
    uint64_t v9 = *v8;
    swift_bridgeObjectRetain(*v8);

    uint64_t v11 = _s17ResponderInstanceCMa(0LL, *(void *)(v7 + 80), *(void *)(v7 + 88), v10);
    unint64_t v12 = sub_10017B5C8();
    uint64_t v13 = Dictionary.count.getter(v9, &type metadata for NANPeerServiceIdentifier, v11, v12);
    swift_bridgeObjectRelease(v9);
    if (v13 == 1)
    {
      uint64_t v14 = swift_unknownObjectWeakLoadStrong(v4);
      if (v14)
      {
        uint64_t v15 = (void *)v14;
        uint64_t v16 = (uint64_t *)(v14 + qword_100410A48);
        swift_beginAccess(v14 + qword_100410A48, v28, 0LL, 0LL);
        uint64_t v17 = *v16;
        swift_bridgeObjectRetain(v17);

        uint64_t v18 = NANBitmap.Channel.operatingClass.getter(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRelease(v17);
        uint64_t v19 = type metadata accessor for Dictionary.Keys(0LL, &type metadata for NANPeerServiceIdentifier, v11, v12);
        uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v19);
        Collection.first.getter(&v27, v19, WitnessTable);
        swift_bridgeObjectRelease(v18);
        int v21 = BYTE6(v27);
        int v22 = WORD2(v27);
        uint64_t v23 = v27;
        LOBYTE(v18) = HIBYTE(v27);
        uint64_t v24 = WiFiAwarePublisherDataSessionHandle.peerServiceIdentifier.getter();
        if ((v18 & 1) == 0
          && static NANPeerServiceIdentifier.__derived_struct_equals(_:_:)( (v23 | ((unint64_t)(v22 | (v21 << 16)) << 32)) & 0xFFFFFFFFFFFFFFLL,  v24 & 0xFFFFFFFFFFFFFFLL)
          && *((_BYTE *)a1 + qword_10040F9B8) != 2)
        {
          uint64_t v25 = swift_unknownObjectWeakLoadStrong(v4);
          if (v25)
          {
            __int16 v26 = (void *)v25;
            sub_10025D998();
          }

          swift_unknownObjectWeakAssign(v4, 0LL);
        }
      }

      else
      {
        WiFiAwarePublisherDataSessionHandle.peerServiceIdentifier.getter();
      }
    }
  }

double sub_1002E4AB8(unsigned __int8 *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = swift_isaMask & *a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  uint64_t v10 = sub_1002E2C5C((uint64_t)&v36);
  char v40 = v4;
  char v41 = v5;
  char v42 = v6;
  char v43 = v7;
  char v44 = v8;
  char v45 = v9;
  uint64_t v12 = type metadata accessor for LowLatencyInternetProviderPolicy.Requester( 255LL,  *(void *)(v3 + 80),  *(void *)(v3 + 88),  v11);
  unint64_t v13 = sub_10029F2C0();
  uint64_t v14 = type metadata accessor for Dictionary(0LL, &type metadata for WiFiAddress, v12, v13);
  uint64_t v16 = (void (*)(_BYTE *, void))Dictionary.subscript.modify(v35, &v40, v14);
  if (*(_BYTE *)(v15 + 24) != 2) {
    *(_BYTE *)(v15 + 24) = 0;
  }
  v16(v35, 0LL);
  v10((uint64_t)&v36, 0);
  if ((*((_BYTE *)a2 + qword_10040F9B8) & 1) == 0
    && sub_1002E3B58(v4 | (v5 << 8) | (v6 << 16) | (v7 << 24) | (v8 << 32) | (v9 << 40)))
  {
    uint64_t v18 = (void *)((char *)a2 + qword_10040F9A8);
    swift_beginAccess((char *)a2 + qword_10040F9A8, v35, 32LL, 0LL);
    uint64_t v19 = *v18;
    char v40 = v4;
    char v41 = v5;
    char v42 = v6;
    char v43 = v7;
    char v44 = v8;
    char v45 = v9;
    Dictionary.subscript.getter(&v40, v19, &type metadata for WiFiAddress, v12);
    char v20 = v39;
    if (v39 == 2)
    {
      swift_endAccess(v35);
    }

    else
    {
      uint64_t v21 = 0xD000000000000011LL;
      uint64_t v33 = v36;
      uint64_t v22 = BYTE4(v36);
      uint64_t v23 = BYTE5(v36);
      uint64_t v24 = BYTE6(v36);
      uint64_t v25 = v36;
      uint64_t v26 = v37;
      unint64_t v27 = v38;
      swift_endAccess(v35);
      sub_1002E8520(v25, v26, v27, v20);
      unint64_t v36 = 0LL;
      unint64_t v37 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(40LL);
      swift_bridgeObjectRelease(v37);
      unint64_t v36 = 0xD000000000000026LL;
      unint64_t v37 = 0x8000000100369DC0LL;
      unint64_t v28 = (void *)0x8000000100364DC0LL;
      switch(a3)
      {
        case -1LL:
          break;
        case 1LL:
          unint64_t v28 = (void *)0xE900000000000074LL;
          uint64_t v21 = 0x754F2064656D6954LL;
          break;
        case 2LL:
          unint64_t v28 = (void *)0xEE00646574736575LL;
          uint64_t v21 = 0x7165522072657355LL;
          break;
        case 3LL:
          unint64_t v28 = (void *)0xEC0000006572756CLL;
          uint64_t v21 = 0x6961462070696843LL;
          break;
        case 4LL:
          uint64_t v21 = 0xD000000000000018LL;
          unint64_t v28 = (void *)0x8000000100364D20LL;
          break;
        default:
          unint64_t v28 = (void *)0xE700000000000000LL;
          uint64_t v21 = 0x6E776F6E6B6E55LL;
          break;
      }

      v29._countAndFlagsBits = v21;
      v29._object = v28;
      String.append(_:)(v29);
      swift_bridgeObjectRelease(v28);
      uint64_t v30 = v36;
      unint64_t v31 = v37;
      LOBYTE(v36) = 0;
      sub_1002E30D4(v30, v37, v33 | (v22 << 32) | (v23 << 40) | (v24 << 48));
      *(void *)&double result = swift_bridgeObjectRelease(v31).n128_u64[0];
    }
  }

  return result;
}

void sub_1002E4DFC(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = a1;
  sub_1002E47F4(v6, a4);
}

void sub_1002E4E5C(int a1, int a2, int a3, int a4, void *aBlock)
{
  uint64_t v5 = _Block_copy(aBlock);
  _Block_release(v5);
}

uint64_t sub_1002E4E74(void *a1, uint64_t a2)
{
  return sub_1002DA324(a1, a2, (uint64_t (*)(void, void))sub_1002E86B0);
}

uint64_t type metadata accessor for LowLatencyInternetProviderPolicy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LowLatencyInternetProviderPolicy);
}

uint64_t sub_1002E4E8C(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_10035FE38;
    void v4[2] = "\b";
    void v4[3] = "\b";
    v4[4] = "\b";
    void v4[5] = "\b";
    void v4[6] = "\b";
    void v4[7] = "\b";
    v4[8] = &unk_10035FED8;
    void v4[9] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[10] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[12] = &unk_10035FE50;
    v4[13] = &unk_10035FE50;
    return swift_initClassMetadata2(a1, 0LL, 14LL, v4, a1 + 96);
  }

  return result;
}

void sub_1002E4F44(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
}

uint64_t sub_1002E4F6C(uint64_t a1)
{
  return sub_1002E3720(a1 & 0xFFFFFFFFFFFFLL);
}

uint64_t sub_1002E4F90(uint64_t a1)
{
  return sub_1002E393C(a1 & 0xFFFFFFFFFFFFLL);
}

uint64_t sub_1002E4FB4(uint64_t a1)
{
  return sub_1002E3B58(a1 & 0xFFFFFFFFFFFFLL);
}

uint64_t sub_1002E4FD8()
{
  return sub_1002E3A68();
}

double sub_1002E4FF8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = swift_isaMask;
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (uint64_t *)((char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v11 = (char *)&v53 - v10;
  uint64_t v12 = __chkstk_darwin();
  uint64_t v15 = (uint64_t *)((char *)&v53 - v14);
  if (*(uint64_t *)((char *)v2 + qword_100410C38))
  {
    if (!a1)
    {
      uint64_t v16 = (char *)v2 + qword_10040FA90;
      uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong((char *)v2 + qword_10040FA90);

      if (!Strong)
      {
        uint64_t v18 = (void *)swift_unknownObjectWeakLoadStrong((char *)v2 + qword_10040FA98);

        if (!v18)
        {
          uint64_t v54 = v16;
          uint64_t v19 = (uint64_t *)((char *)v2 + qword_10040FA88);
          swift_beginAccess((char *)v2 + qword_10040FA88, v57, 1LL, 0LL);
          uint64_t v20 = *v19;
          *uint64_t v19 = (uint64_t)_swiftEmptyDictionarySingleton;
          swift_bridgeObjectRelease(v20);
          uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
          os_log_type_t v23 = static os_log_type_t.default.getter(v22);
          if (os_log_type_enabled(v22, v23))
          {
            uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            uint64_t v56 = v22;
            uint64_t v25 = v24;
            *(_WORD *)uint64_t v24 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v56,  v23,  "Starting internet sharing requester based on policy update",  v24,  2u);
            uint64_t v26 = v25;
            uint64_t v22 = v56;
            swift_slowDealloc(v26, -1LL, -1LL);
          }

          uint64_t v27 = NANConstants.internetSharingServiceName.unsafeMutableAddressor()[1];
          uint64_t v56 = (os_log_s *)objc_allocWithZone(&OBJC_CLASS___WiFiAwareSubscribeConfiguration);
          swift_bridgeObjectRetain(v27);
          NSString v28 = String._bridgeToObjectiveC()();
          *(void *)&double v29 = swift_bridgeObjectRelease(v27).n128_u64[0];
          uint64_t v30 = -[os_log_s initWithServiceName:](v56, "initWithServiceName:", v28, v29);
          uint64_t v56 = v30;

          -[os_log_s setAuthenticationType:](v30, "setAuthenticationType:", 0LL);
          uint64_t v31 = *(uint64_t *)((char *)v2 + qword_10040FA40);
          uint64_t v32 = swift_unownedRetainStrong(v31);
          id v55 = (id)sub_1002E8D68(v32, v33, v34, v35);
          swift_release(v31);
          unint64_t v36 = (void *)sub_10029D270((uint64_t)v56, (uint64_t)v2);
          swift_release(v55);
          swift_unknownObjectWeakAssign(v54, v36);

          uint64_t v44 = qword_10040FA60;
          uint64_t v45 = *(uint64_t *)((char *)v2 + qword_10040FA60);
          if (v45)
          {
            swift_retain();
          }

          else
          {
            uint64_t v46 = v5 & v4;
            *uint64_t v15 = 25LL;
            unint64_t v47 = *(void (**)(char *, void, uint64_t))(v7 + 104);
            v47((char *)v15, enum case for DispatchTimeInterval.seconds(_:), v6);
            id v55 = (id)*OS_dispatch_queue.nan.unsafeMutableAddressor();
            uint64_t v48 = swift_allocObject(&unk_1003FAA98, 24LL, 7LL);
            swift_unknownObjectWeakInit(v48 + 16, v2);
            __n128 v49 = (void *)swift_allocObject(&unk_1003FAB88, 40LL, 7LL);
            v49[2] = *(void *)(v46 + 80);
            v49[3] = *(void *)(v46 + 88);
            v49[4] = v48;
            v47(v11, enum case for DispatchTimeInterval.never(_:), v6);
            *uint64_t v9 = 100LL;
            v47((char *)v9, enum case for DispatchTimeInterval.milliseconds(_:), v6);
            uint64_t v50 = type metadata accessor for P2PTimer(0LL);
            swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
            id v51 = v55;
            swift_retain();
            uint64_t v45 = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)( (uint64_t)v15,  v51,  (uint64_t)v11,  (uint64_t)v9,  (uint64_t)sub_1002E863C,  (uint64_t)v49);
            swift_release(v48);
          }

          uint64_t v52 = *(uint64_t *)((char *)v2 + v44);
          *(uint64_t *)((char *)v2 + v44) = v45;
          *(void *)&double result = swift_release(v52).n128_u64[0];
        }
      }
    }
  }

  else if (a1)
  {
    unint64_t v37 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v38 = static os_log_type_t.default.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      char v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)char v39 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "Stopping internet sharing requester based on policy update",  v39,  2u);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    sub_1002E5584();
    char v40 = (char *)v2 + qword_10040FA98;
    uint64_t v41 = swift_unknownObjectWeakLoadStrong((char *)v2 + qword_10040FA98);
    if (v41)
    {
      char v42 = (void *)v41;
      sub_1002730CC();
    }

    swift_unknownObjectWeakAssign(v40, 0LL);
    uint64_t v43 = *(uint64_t *)((char *)v2 + qword_10040FA68);
    *(uint64_t *)((char *)v2 + qword_10040FA68) = 0LL;
    *(void *)&double result = swift_release(v43).n128_u64[0];
  }

  return result;
}

void sub_1002E54EC(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    unint64_t v3 = (void *)Strong;
    if (*(void *)(Strong + qword_100410C38))
    {
      uint64_t v4 = (void *)swift_unknownObjectWeakLoadStrong(Strong + qword_10040FA98);

      if (!v4)
      {
        double v5 = sub_1002E5584();
        sub_1002E55E8(0xD00000000000002ELL, 0x8000000100369C40LL, v5);
      }
    }
  }

double sub_1002E5584()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + qword_10040FA90;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v0 + qword_10040FA90);
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    sub_1002C4F04();
  }

  swift_unknownObjectWeakAssign(v2, 0LL);
  uint64_t v5 = *(void *)(v1 + qword_10040FA60);
  *(void *)(v1 + qword_10040FA60) = 0LL;
  *(void *)&double result = swift_release(v5).n128_u64[0];
  return result;
}

void sub_1002E55E8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + qword_10040FA80);
  swift_beginAccess(v2 + qword_10040FA80, v12, 1LL, 0LL);
  uint64_t v6 = *v5;
  uint64_t v9 = v2;
  uint64_t v10 = a1;
  uint64_t v11 = a2;
  swift_bridgeObjectRetain(v6);
  sub_1002FF550((void (*)(int *))sub_1002E8648, (uint64_t)&v8, v6);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *v5;
  *uint64_t v5 = (uint64_t)_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v7);
  sub_1002E568C();
}

void sub_1002E568C()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v2 = swift_isaMask & *v0;
  uint64_t v3 = type metadata accessor for NANPeer(0LL);
  __chkstk_darwin();
  uint64_t v150 = (uint64_t)&v135 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = *(void *)(v2 + 80);
  uint64_t v6 = *(void *)(v2 + 88);
  uint64_t v7 = *(void *)(v6 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v7,  v5,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v7,  v5,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v10 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v11 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v10,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.PreferencesBacking: PreferencesStorage);
  uint64_t v13 = type metadata accessor for Preferences(0LL, v10, v11, v12);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin();
  id v152 = (char *)&v135 - v15;
  uint64_t v149 = sub_100002274((uint64_t *)&unk_10040FC30);
  __chkstk_darwin();
  uint64_t v151 = (uint64_t)&v135 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v153 = sub_100002274(&qword_10040DA58);
  __chkstk_darwin();
  uint64_t v18 = (char *)&v135 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100002274(qword_10040FC40);
  __chkstk_darwin();
  uint64_t v21 = (char *)&v135 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = v1 + qword_10040FA80;
  swift_beginAccess(v1 + qword_10040FA80, v161, 0LL, 0LL);
  if (!*(void *)(*(void *)v22 + 16LL))
  {
    uint64_t v34 = qword_10040FA78;
    if (*(_BYTE *)(v1 + qword_10040FA78) == 1)
    {
      uint64_t v35 = *(void *)(v1 + qword_10040FA40);
      swift_unownedRetainStrong(v35);
      uint64_t v36 = *(void *)(v35 + *(void *)(*(void *)v35 + 688LL));
      swift_unownedRetainStrong(v36);
      swift_release(v35);
      sub_1002D3A44();
      swift_release(v36);
      *(_BYTE *)(v1 + v34) = 0;
    }

    unint64_t v37 = (uint64_t *)(v1 + qword_10040FA48);
    swift_beginAccess(v1 + qword_10040FA48, v157, 1LL, 0LL);
    uint64_t v38 = *v37;
    uint64_t *v37 = 0LL;
    swift_release(v38);
    char v39 = (uint64_t *)(v1 + qword_10040FA50);
    swift_beginAccess(v1 + qword_10040FA50, v156, 1LL, 0LL);
    uint64_t v40 = *v39;
    *char v39 = 0LL;
    swift_release(v40);
    uint64_t v41 = (uint64_t *)(v1 + qword_10040FA88);
    swift_beginAccess(v1 + qword_10040FA88, v155, 1LL, 0LL);
    uint64_t v42 = *v41;
    uint64_t *v41 = (uint64_t)_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(v42);
    uint64_t v43 = (uint64_t *)(v1 + qword_10040FA58);
    swift_beginAccess(v1 + qword_10040FA58, v154, 1LL, 0LL);
    uint64_t v44 = *v43;
    uint64_t *v43 = 0LL;
    swift_release(v44);
    goto LABEL_13;
  }

  uint64_t v145 = v14;
  uint64_t v146 = v13;
  unint64_t v144 = (uint64_t *)v22;
  uint64_t v147 = v3;
  uint64_t v23 = *(void *)(v1 + qword_10040FA40);
  swift_unownedRetainStrong(v23);
  uint64_t v24 = *(void *)(v23 + *(void *)(*(void *)v23 + 688LL));
  swift_unownedRetainStrong(v24);
  uint64_t v148 = v23;
  swift_release(v23);
  sub_1002CF4EC((uint64_t)v21);
  swift_release(v24);
  uint64_t v25 = v6;
  uint64_t v26 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v27 = (void *)*v26;
  uint64_t v28 = swift_allocObject(&unk_1003FAA98, 24LL, 7LL);
  swift_unknownObjectWeakInit(v28 + 16, v1);
  double v29 = (void *)swift_allocObject(&unk_1003FAAC0, 40LL, 7LL);
  uint64_t v140 = v5;
  v29[2] = v5;
  uint64_t v29[3] = v25;
  uint64_t v139 = v25;
  void v29[4] = v28;
  uint64_t v30 = (uint64_t *)(v1 + qword_10040FA50);
  swift_beginAccess(v1 + qword_10040FA50, v157, 33LL, 0LL);
  uint64_t v31 = *v30;
  id v32 = v27;
  uint64_t v33 = v32;
  if (v31) {
    ObservableWiFiProperty.wrappedValue.getter(v19, (uint64_t)v156);
  }
  else {
    ObservableWiFiProperty.registerForChanges(on:using:valueUpdateHandler:)( v32,  v30,  (uint64_t)sub_1002E860C,  (uint64_t)v29,  v19,  (uint64_t)v156);
  }
  int v45 = LOBYTE(v156[0]);
  swift_endAccess(v157);

  swift_release(v29);
  sub_1000225EC((uint64_t)v21, qword_10040FC40);
  uint64_t v46 = v140;
  if (v45 != 1)
  {
LABEL_13:
    uint64_t v59 = *(void *)(v1 + qword_100410C38);
    *(void *)(v1 + qword_100410C38) = 0LL;
    sub_1002E4FF8(v59);
    return;
  }

  uint64_t v47 = qword_10040FA78;
  uint64_t v48 = v148;
  if ((*(_BYTE *)(v1 + qword_10040FA78) & 1) == 0)
  {
    swift_unownedRetainStrong(v148);
    uint64_t v49 = *(void *)(v48 + *(void *)(*(void *)v48 + 688LL));
    swift_unownedRetainStrong(v49);
    swift_release(v48);
    sub_1002D3A58();
    swift_release(v49);
    *(_BYTE *)(v1 + v47) = 1;
  }

  swift_unownedRetainStrong(v48);
  uint64_t v50 = *(void *)(v48 + *(void *)(*(void *)v48 + 688LL));
  swift_unownedRetainStrong(v50);
  swift_release(v48);
  sub_1002CF42C((uint64_t)v18);
  swift_release(v50);
  id v51 = (void *)*v26;
  uint64_t v52 = swift_allocObject(&unk_1003FAA98, 24LL, 7LL);
  swift_unknownObjectWeakInit(v52 + 16, v1);
  uint64_t v53 = (void *)swift_allocObject(&unk_1003FAAE8, 40LL, 7LL);
  uint64_t v54 = v139;
  v53[2] = v46;
  v53[3] = v54;
  v53[4] = v52;
  id v55 = (uint64_t *)(v1 + qword_10040FA48);
  swift_beginAccess(v1 + qword_10040FA48, v156, 33LL, 0LL);
  uint64_t v56 = *v55;
  id v57 = v51;
  uint64_t v58 = v57;
  if (v56) {
    ObservableWiFiProperty.wrappedValue.getter(v153, (uint64_t)v157);
  }
  else {
    ObservableWiFiProperty.registerForChanges(on:using:valueUpdateHandler:)( v57,  v55,  (uint64_t)sub_1002E8618,  (uint64_t)v53,  v153,  (uint64_t)v157);
  }
  swift_endAccess(v156);

  swift_release(v53);
  sub_1000225EC((uint64_t)v18, &qword_10040DA58);
  uint64_t v60 = v158;
  uint64_t v61 = v160;
  uint64_t v62 = v159;
  int v63 = (uint64_t *)(v1 + qword_10040FA58);
  swift_beginAccess(v1 + qword_10040FA58, v157, 0LL, 0LL);
  if (*v63)
  {
    swift_unownedRetainStrong(v48);
    uint64_t v64 = sub_1002EC320();
    swift_release(v48);
  }

  else
  {
    swift_unownedRetainStrong(v48);
    uint64_t v143 = v62;
    uint64_t v65 = v61;
    uint64_t v66 = v151;
    sub_1002EA3DC(v151);
    swift_release(v48);
    int64_t v67 = (void *)*v26;
    uint64_t v68 = swift_allocObject(&unk_1003FAA98, 24LL, 7LL);
    swift_unknownObjectWeakInit(v68 + 16, v1);
    uint64_t v69 = (void *)swift_allocObject(&unk_1003FAB38, 40LL, 7LL);
    uint64_t v70 = v139;
    v69[2] = v140;
    v69[3] = v70;
    v69[4] = v68;
    swift_beginAccess(v63, v156, 33LL, 0LL);
    id v71 = v67;
    ObservableWiFiProperty.registerForChanges(on:using:valueUpdateHandler:)( v71,  v63,  (uint64_t)sub_1002E860C,  (uint64_t)v69,  v149,  (uint64_t)v155);
    swift_endAccess(v156);

    swift_release(v69);
    uint64_t v72 = v66;
    uint64_t v61 = v65;
    uint64_t v62 = v143;
    sub_1000225EC(v72, (uint64_t *)&unk_10040FC30);
    uint64_t v64 = v155[0];
  }

  uint64_t v153 = (uint64_t)sub_1002E1EBC(v64);
  swift_bridgeObjectRelease(v64);
  uint64_t v73 = v147;
  swift_unownedRetainStrong(v48);
  uint64_t v74 = v152;
  WiFiInterface.preferences.getter();
  swift_release(v48);
  uint64_t v75 = v146;
  char v76 = Preferences.internetSharingOptions.getter(v146);
  (*(void (**)(char *, uint64_t))(v145 + 8))(v74, v75);
  if (!v76)
  {
    swift_bridgeObjectRelease(v153);
    swift_bridgeObjectRelease(v60);
    uint64_t v77 = *(void *)(v1 + qword_100410C38);
    *(void *)(v1 + qword_100410C38) = 0LL;
LABEL_22:
    sub_1002E4FF8(v77);
LABEL_64:
    sub_1002E6BB4(v1);
    return;
  }

  if (v76 == 1)
  {
    swift_bridgeObjectRelease(v153);
    swift_bridgeObjectRelease(v60);
    uint64_t v77 = *(void *)(v1 + qword_100410C38);
    *(void *)(v1 + qword_100410C38) = 3LL;
    goto LABEL_22;
  }

  uint64_t v135 = 0LL;
  if (v60)
  {
    swift_bridgeObjectRelease(v60);
    uint64_t v78 = (v62 | (v61 << 32)) & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v78 = 0x300000000LL;
  }

  uint64_t v145 = v78;
  uint64_t v79 = v153;
  swift_unownedRetainStrong(v48);
  uint64_t v80 = WiFiInterface.capabilities.getter();
  swift_release(v48);
  uint64_t v81 = *WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor();
  v155[0] = v80;
  v156[0] = v81;
  unint64_t v82 = sub_100270384();
  swift_bridgeObjectRetain_n(v81, 2LL);
  ExtendableOptionSet.formIntersection(_:)( (uint64_t (*)(_BYTE *, void))v155,  &type metadata for WiFiDriverCapabilities.Kind,  v82);
  uint64_t v83 = v156[0];
  char v84 = sub_10007990C(v156[0], v81);
  swift_bridgeObjectRelease(v80);
  swift_bridgeObjectRelease(v81);
  swift_bridgeObjectRelease(v83);
  uint64_t v85 = *v144;
  uint64_t v86 = *(void *)(*v144 + 64);
  uint64_t v151 = *v144 + 64;
  uint64_t v87 = 1LL << *(_BYTE *)(v85 + 32);
  uint64_t v88 = -1LL;
  if (v87 < 64) {
    uint64_t v88 = ~(-1LL << v87);
  }
  unint64_t v89 = v88 & v86;
  uint64_t v90 = qword_100410C38;
  uint64_t v143 = v1 + qword_100410C30;
  __int128 v138 = (void *)(v1 + qword_10040FA88);
  uint64_t v142 = v150 + 8;
  id v152 = (char *)((unint64_t)(v87 + 63) >> 6);
  uint64_t v146 = v85;
  __n128 v91 = swift_bridgeObjectRetain(v85);
  uint64_t v92 = 0LL;
  v91.n128_u64[0] = 136315650LL;
  __n128 v137 = v91;
  uint64_t v136 = &type metadata for Any[8];
  int v141 = v84 & 1;
  unint64_t v144 = (uint64_t *)v90;
  while (1)
  {
    while (v89)
    {
      unint64_t v103 = __clz(__rbit64(v89));
      v89 &= v89 - 1;
      unint64_t v104 = v103 | (v92 << 6);
      if (!*(void *)(v1 + v90)) {
        goto LABEL_49;
      }
    }

    if (__OFADD__(v92++, 1LL))
    {
      __break(1u);
      goto LABEL_67;
    }

    unint64_t v106 = *(void *)(v151 + 8 * v92);
    if (!v106) {
      break;
    }
LABEL_48:
    unint64_t v89 = (v106 - 1) & v106;
    unint64_t v104 = __clz(__rbit64(v106)) + (v92 << 6);
    if (!*(void *)(v1 + v90))
    {
LABEL_49:
      uint64_t v108 = (unsigned __int8 *)(*(void *)(v146 + 48) + 6 * v104);
      unint64_t v109 = (unint64_t)*(unsigned int *)(v108 + 2) << 16;
      uint64_t v110 = v108[1];
      uint64_t v111 = *v108;
      swift_unownedRetainStrong(v48);
      uint64_t v112 = v109 | (v110 << 8) | v111;
      uint64_t v113 = v150;
      uint64_t v149 = v112;
      sub_1002EA528(v112, v150);
      swift_release(v48);
      uint64_t v114 = *(void *)(v142 + *(int *)(v73 + 68));
      sub_10005802C(v113, type metadata accessor for NANPeer);
      if ((v114 & 0xFF00000000LL) == 0x200000000LL) {
        uint64_t v115 = 0x300000000LL;
      }
      else {
        uint64_t v115 = Optional<A>.init(integerLiteral:)(BYTE6(v114)) & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v116 = v1;
      uint64_t v117 = swift_bridgeObjectRetain_n(v79, 2LL);
      unint64_t v118 = (os_log_s *)Logger.logObject.getter(v117);
      os_log_type_t v119 = static os_log_type_t.default.getter(v118);
      if (os_log_type_enabled(v118, v119))
      {
        uint64_t v120 = swift_slowAlloc(32LL, -1LL);
        uint64_t v121 = swift_slowAlloc(64LL, -1LL);
        v156[0] = v121;
        *(_DWORD *)uint64_t v120 = v137.n128_u32[0];
        unint64_t v122 = v145;
        uint64_t v123 = Optional<A>.description.getter(v145);
        unint64_t v125 = v124;
        *(void *)(v120 + 4) = sub_10000235C(v123, v124, v156);
        swift_bridgeObjectRelease(v125);
        *(_WORD *)(v120 + 12) = 2080;
        uint64_t v126 = Optional<A>.description.getter(v115);
        unint64_t v128 = v127;
        *(void *)(v120 + 14) = sub_10000235C(v126, v127, v156);
        swift_bridgeObjectRelease(v128);
        *(_WORD *)(v120 + 22) = 2048;
        uint64_t v129 = *(void *)(v153 + 16);
        swift_bridgeObjectRelease(v153);
        *(void *)(v120 + 24) = v129;
        uint64_t v79 = v153;
        swift_bridgeObjectRelease(v153);
        _os_log_impl( (void *)&_mh_execute_header,  v118,  v119,  "Evaluating policy for requester infra channel %s with provider infra channel %s [PCL count: %ld]",  (uint8_t *)v120,  0x20u);
        swift_arrayDestroy(v121, 2LL, v136);
        uint64_t v130 = v121;
        uint64_t v73 = v147;
        swift_slowDealloc(v130, -1LL, -1LL);
        swift_slowDealloc(v120, -1LL, -1LL);

        uint64_t v48 = v148;
      }

      else
      {

        swift_bridgeObjectRelease_n(v79, 2LL);
        uint64_t v48 = v148;
        unint64_t v122 = v145;
      }

      swift_bridgeObjectRetain(v79);
      uint64_t v131 = sub_1002E8168(v115, v122, v141, v79);
      uint64_t v1 = v116;
      uint64_t v132 = *(void *)(v116 + qword_100410C38);
      *(void *)(v116 + qword_100410C38) = v131;
      sub_1002E4FF8(v132);
      uint64_t v90 = (uint64_t)v144;
      if (!*(uint64_t *)((char *)v144 + v1))
      {
        int v133 = v138;
        swift_beginAccess(v138, v156, 32LL, 0LL);
        if (!*(void *)(*v133 + 16LL) || (sub_10001C15C(v149), (v134 & 1) == 0))
        {
          swift_endAccess(v156);
          swift_unownedRetainStrong(v48);
          uint64_t v93 = swift_allocObject(&unk_1003FAA98, 24LL, 7LL);
          swift_unknownObjectWeakInit(v93 + 16, v1);
          uint64_t v94 = (void *)swift_allocObject(&unk_1003FAB10, 40LL, 7LL);
          uint64_t v95 = v139;
          v94[2] = v140;
          v94[3] = v95;
          v94[4] = v93;
          swift_retain();
          uint64_t v96 = v149;
          uint64_t v97 = sub_1002EBDF0(v149, 30, (uint64_t)sub_1002E8624, (uint64_t)v94);
          swift_release(v48);
          swift_release(v93);
          swift_release(v94);
          uint64_t v98 = v138;
          swift_beginAccess(v138, v156, 33LL, 0LL);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v98);
          v155[0] = *v98;
          void *v98 = 0x8000000000000000LL;
          uint64_t v100 = v97;
          uint64_t v79 = v153;
          uint64_t v101 = v96;
          uint64_t v73 = v147;
          sub_100243DD4(v100, v101, isUniquelyReferenced_nonNull_native);
          uint64_t v102 = *v98;
          void *v98 = v155[0];
          swift_bridgeObjectRelease(v102);
        }

        swift_endAccess(v156);
      }
    }
  }

  uint64_t v107 = v92 + 1;
  unint64_t v106 = *(void *)(v151 + 8 * v107);
  if (v106) {
    goto LABEL_47;
  }
  uint64_t v107 = v92 + 2;
  unint64_t v106 = *(void *)(v151 + 8 * v107);
  if (v106) {
    goto LABEL_47;
  }
  uint64_t v107 = v92 + 3;
  unint64_t v106 = *(void *)(v151 + 8 * v107);
  if (v106) {
    goto LABEL_47;
  }
  uint64_t v107 = v92 + 4;
  unint64_t v106 = *(void *)(v151 + 8 * v107);
  if (v106) {
    goto LABEL_47;
  }
  uint64_t v107 = v92 + 5;
  if (v92 + 5 >= (uint64_t)v152)
  {
LABEL_63:
    swift_bridgeObjectRelease(v79);
    swift_release(v146);
    goto LABEL_64;
  }

  unint64_t v106 = *(void *)(v151 + 8 * v107);
  if (v106)
  {
LABEL_47:
    uint64_t v92 = v107;
    goto LABEL_48;
  }

  while (1)
  {
    uint64_t v92 = v107 + 1;
    if (__OFADD__(v107, 1LL)) {
      break;
    }
    unint64_t v106 = *(void *)(v151 + 8 * v92);
    ++v107;
    if (v106) {
      goto LABEL_48;
    }
  }

LABEL_67:
  __break(1u);
}

id sub_1002E65A0()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  *(void *)&v0[qword_100410C38] = 0LL;
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, "dealloc");
}

id sub_1002E65E0(void *a1)
{
  id v1 = a1;
  return sub_1002E65A0();
}

uint64_t sub_1002E6604(uint64_t a1)
{
  uint64_t v2 = a1 + qword_100410C30;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  swift_unownedRelease(*(void *)(a1 + qword_10040FA40));
  swift_release(*(void *)(a1 + qword_10040FA48));
  swift_release(*(void *)(a1 + qword_10040FA50));
  swift_release(*(void *)(a1 + qword_10040FA58));
  swift_release(*(void *)(a1 + qword_10040FA60));
  swift_release(*(void *)(a1 + qword_10040FA68));
  swift_release(*(void *)(a1 + qword_10040FA70));
  swift_bridgeObjectRelease(*(void *)(a1 + qword_10040FA80));
  swift_bridgeObjectRelease(*(void *)(a1 + qword_10040FA88));
  swift_unknownObjectWeakDestroy(a1 + qword_10040FA90);
  return swift_unknownObjectWeakDestroy(a1 + qword_10040FA98);
}

void sub_1002E66F4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v22 = a4;
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    v24[0] = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v14 = a1 & 0xFFFFFFFFFFFFLL;
    uint64_t v15 = WiFiAddress.description.getter(v14);
    unint64_t v17 = v16;
    uint64_t v23 = sub_10000235C(v15, v16, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Added provider %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v13, -1LL, -1LL);
    uint64_t v18 = v12;
    a4 = v22;
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {

    uint64_t v14 = a1 & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v19 = (uint64_t *)(v5 + qword_10040FA80);
  swift_beginAccess(v5 + qword_10040FA80, v24, 33LL, 0LL);
  sub_10002255C(a2, a3);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v19);
  uint64_t v23 = *v19;
  *uint64_t v19 = 0x8000000000000000LL;
  sub_100243EE8(a4 & 0xFFFFFFFFFFFFFFLL, a2, a3, v14, isUniquelyReferenced_nonNull_native);
  uint64_t v21 = *v19;
  *uint64_t v19 = v23;
  swift_bridgeObjectRelease(v21);
  swift_endAccess(v24);
  sub_1002E568C();
}

void sub_1002E68F8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    v18[0] = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
    uint64_t v9 = WiFiAddress.description.getter(v8);
    unint64_t v11 = v10;
    uint64_t v16 = sub_10000235C(v9, v10, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Removed %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {

    uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
  }

  swift_beginAccess(v2 + qword_10040FA88, v18, 33LL, 0LL);
  uint64_t v12 = sub_1002F7D90(v8);
  swift_endAccess(v18);
  swift_release(v12);
  swift_beginAccess(v2 + qword_10040FA80, &v16, 33LL, 0LL);
  sub_1002F7E40(v8, (uint64_t)v18);
  uint64_t v13 = v18[0];
  uint64_t v14 = v18[1];
  unint64_t v15 = v18[2];
  swift_endAccess(&v16);
  sub_1002E85CC(v13, v14, v15);
  sub_1002E568C();
}

uint64_t sub_1002E6AE0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = swift_isaMask;
  uint64_t result = swift_unknownObjectWeakLoadStrong((char *)v0 + qword_10040FA98);
  if (result)
  {
    os_log_type_t v5 = (void *)result;
    uint64_t v6 = _s17InitiatorInstanceCMa(0LL, *(void *)((v2 & v1) + 0x50), *(void *)((v2 & v1) + 0x58), v4);
    uint64_t WitnessTable = swift_getWitnessTable(&unk_10035EA58, v6);
    LOBYTE(v6) = sub_1002A3D90(v6, WitnessTable);

    return v6 & 1;
  }

  return result;
}

void sub_1002E6B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + 16;
  swift_beginAccess(a3 + 16, v6, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    os_log_type_t v5 = (void *)Strong;
    sub_1002E568C();
  }

void sub_1002E6BB4(uint64_t a1)
{
  if (!*(void *)(a1 + qword_100410C38))
  {
    uint64_t v2 = qword_10040FA78;
    if (*(_BYTE *)(a1 + qword_10040FA78) == 1)
    {
      uint64_t v3 = *(void *)(a1 + qword_10040FA40);
      swift_unownedRetainStrong(v3);
      uint64_t v4 = *(void *)(v3 + *(void *)(*(void *)v3 + 688LL));
      swift_unownedRetainStrong(v4);
      swift_release(v3);
      sub_1002D3A44();
      swift_release(v4);
      *(_BYTE *)(a1 + sub_1000E77F4(v3, v2) = 0;
    }
  }

double sub_1002E6C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v32 - v13;
  __chkstk_darwin();
  uint64_t v16 = (char *)&v32 - v15;
  uint64_t v17 = *(void *)(a2 + 8);
  a3 += 16LL;
  swift_beginAccess(a3, v35, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a3);
  if (Strong)
  {
    uint64_t v20 = (char *)Strong;
    if (v17)
    {
      if (!*(void *)(Strong + qword_10040FA70)) {
        sub_1002E568C();
      }
    }

    else
    {
      uint64_t v34 = a5;
      uint64_t v21 = (os_log_s *)Logger.logObject.getter(Strong);
      os_log_type_t v22 = static os_log_type_t.default.getter(v21);
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v23 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "Lost infrastructure network, waiting for 5 seconds before re-evaluating infra relay policy",  v23,  2u);
        swift_slowDealloc(v23, -1LL, -1LL);
      }

      uint64_t v24 = qword_10040FA70;
      uint64_t v25 = *(void *)&v20[qword_10040FA70];
      uint64_t v26 = v25;
      if (!v25)
      {
        uint64_t v33 = qword_10040FA70;
        *(void *)uint64_t v16 = 5LL;
        uint64_t v27 = *(void (**)(char *, void, uint64_t))(v10 + 104);
        v27(v16, enum case for DispatchTimeInterval.seconds(_:), v9);
        id v32 = (id)*OS_dispatch_queue.nan.unsafeMutableAddressor();
        uint64_t v28 = swift_allocObject(&unk_1003FAA98, 24LL, 7LL);
        swift_unknownObjectWeakInit(v28 + 16, v20);
        double v29 = (void *)swift_allocObject(&unk_1003FAB60, 40LL, 7LL);
        uint64_t v30 = v34;
        v29[2] = a4;
        uint64_t v29[3] = v30;
        void v29[4] = v28;
        v27(v14, enum case for DispatchTimeInterval.never(_:), v9);
        *(void *)uint64_t v12 = 100LL;
        v27(v12, enum case for DispatchTimeInterval.milliseconds(_:), v9);
        uint64_t v31 = type metadata accessor for P2PTimer(0LL);
        swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
        uint64_t v26 = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)( (uint64_t)v16,  v32,  (uint64_t)v14,  (uint64_t)v12,  (uint64_t)sub_1002E8630,  (uint64_t)v29);
        uint64_t v24 = v33;
        uint64_t v25 = *(void *)&v20[v33];
      }

      *(void *)&v20[v24] = v26;
      swift_retain();

      *(void *)&double result = swift_release(v25).n128_u64[0];
    }
  }

  return result;
}

void sub_1002E6EF8(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0LL, 0LL);
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = *(void *)&Strong[qword_10040FA70];
    *(void *)&Strong[qword_10040FA70] = 0LL;

    swift_release(v3);
  }

  swift_beginAccess(v1, &v6, 0LL, 0LL);
  uint64_t v4 = swift_unknownObjectWeakLoadStrong(v1);
  if (v4)
  {
    os_log_type_t v5 = (void *)v4;
    sub_1002E568C();
  }

void sub_1002E6F84(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    sub_1002E568C();
  }

double sub_1002E6FD4(unsigned __int16 *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = *((unsigned __int8 *)a1 + 2);
  uint64_t v7 = *(unsigned int *)((char *)a1 + 3);
  uint64_t v8 = *(void *)(a2 + qword_10040FA40);
  uint64_t v9 = *a1;
  uint64_t v10 = swift_unownedRetainStrong(v8);
  uint64_t v14 = sub_1002E8D68(v10, v11, v12, v13);
  swift_release(v8);
  sub_100288784(v9 | (v6 << 16) | (v7 << 24), a3, a4);
  *(void *)&double result = swift_release(v14).n128_u64[0];
  return result;
}

double sub_1002E7068(uint64_t a1)
{
  if (*(void *)(v1 + qword_100410C38))
  {
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v1 + qword_10040FA98);

    if (Strong) {
      BOOL v5 = 1;
    }
    else {
      BOOL v5 = a1 == -1;
    }
    if (!v5)
    {
      _StringGuts.grow(_:)(40LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      uint64_t v6 = a1 - 1;
      unint64_t v7 = 0xE900000000000074LL;
      unint64_t v8 = 0x754F2064656D6954LL;
      switch(v6)
      {
        case 0LL:
          break;
        case 1LL:
          unint64_t v7 = 0xEE00646574736575LL;
          unint64_t v8 = 0x7165522072657355LL;
          break;
        case 2LL:
          unint64_t v7 = 0xEC0000006572756CLL;
          unint64_t v8 = 0x6961462070696843LL;
          break;
        case 3LL:
          unint64_t v7 = 0x8000000100364D20LL;
          unint64_t v8 = 0xD000000000000018LL;
          break;
        default:
          unint64_t v7 = 0xE700000000000000LL;
          unint64_t v8 = 0x6E776F6E6B6E55LL;
          break;
      }

      unint64_t v9 = v7;
      String.append(_:)(*(Swift::String *)&v8);
      swift_bridgeObjectRelease(v7);
      sub_1002E55E8(0xD000000000000026LL, 0x8000000100369D60LL);
      *(void *)&double result = swift_bridgeObjectRelease(0x8000000100369D60LL).n128_u64[0];
    }
  }

  return result;
}

void sub_1002E71F4(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = a1;
  sub_1002E7068(a3);
}

void sub_1002E7234(void *a1)
{
  uint64_t v2 = v1;
  id v4 = [a1 publisherAddress];
  WiFiMACAddress.wifiAddress.getter();
  uint64_t v6 = v5;

  unint64_t v7 = (uint64_t *)(v2 + qword_10040FA80);
  swift_beginAccess(v2 + qword_10040FA80, v32, 32LL, 0LL);
  uint64_t v8 = *v7;
  if (*(void *)(v8 + 16) && (unint64_t v9 = sub_10001C15C(v6 & 0xFFFFFFFFFFFFLL), (v10 & 1) != 0))
  {
    uint64_t v11 = *(void *)(v8 + 56) + 24 * v9;
    uint64_t v13 = *(void *)(v11 + 8);
    unint64_t v12 = *(void *)(v11 + 16);
    swift_endAccess(v32);
    uint64_t v14 = v2 + qword_10040FA98;
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v2 + qword_10040FA98);
    sub_10002255C(v13, v12);

    if (Strong)
    {
      sub_100020B40(v13, v12);
    }

    else
    {
      uint64_t v16 = *(void *)(v2 + qword_10040FA60);
      *(void *)(v2 + qword_10040FA60) = 0LL;
      swift_release(v16);
      uint64_t v17 = (void *)objc_opt_self(&OBJC_CLASS___WiFiAwareInternetSharingConfiguration);
      sub_10002255C(v13, v12);
      id v18 = [v17 requestInterentFromResponder];
      id v19 = a1;
      Class isa = 0LL;
      if (v12 >> 60 != 15)
      {
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_100020B40(v13, v12);
      }

      LOBYTE(v3sub_100058090(v4, v0 + 1) = 0;
      id v21 = [objc_allocWithZone(WiFiAwareDatapathConfiguration) initWithDiscoveryResult:v19 serviceType:0 passphrase:0 pmk:isa pmkID:0 serviceSpecificInfo:0 internetSharingConfiguration:v18  pairingMethod:0 pairingCachingEnabled:v31 pairSetupServiceSpecificInfo:0];

      uint64_t v22 = *(void *)(v2 + qword_10040FA40);
      uint64_t v23 = swift_unownedRetainStrong(v22);
      uint64_t v27 = sub_1002E8D68(v23, v24, v25, v26);
      swift_release(v22);
      uint64_t v28 = (void *)sub_10029D338((uint64_t)v21, v2);
      swift_release(v27);
      swift_unknownObjectWeakAssign(v14, v28);

      double v29 = (char *)swift_unknownObjectWeakLoadStrong(v14);
      sub_100020B40(v13, v12);

      if (v29)
      {
        uint64_t v30 = &v29[qword_100410AF0];
        *(void *)uint64_t v30 = *(void *)(v2 + qword_100410C38);
        v30[8] = 0;
      }
    }
  }

  else
  {
    swift_endAccess(v32);
  }

void sub_1002E74D8(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  sub_1002E7234(v4);
}

void sub_1002E7530(void *a1)
{
  id v1 = a1;
  sub_1002E86DC();
}

void sub_1002E756C(void *a1)
{
  id v1 = a1;
  sub_1002E86F8();
}

double sub_1002E75A0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = swift_isaMask;
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  unint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v25 - v10;
  __chkstk_darwin();
  uint64_t v13 = (uint64_t *)((char *)&v25 - v12);
  uint64_t v14 = *(void *)((char *)v1 + qword_100410C38);
  *(void *)((char *)v1 + qword_100410C38) = 0LL;
  uint64_t v26 = v14;
  double result = sub_1002E4FF8(v14);
  if (a1 != -1)
  {
    uint64_t v16 = v5 & v4;
    *uint64_t v13 = 2LL;
    uint64_t v17 = *(void (**)(char *, void, uint64_t))(v7 + 104);
    ((void (*)(void *, void, uint64_t, double))v17)( v13,  enum case for DispatchTimeInterval.seconds(_:),  v6,  result);
    id v18 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
    uint64_t v19 = swift_allocObject(&unk_1003FAA98, 24LL, 7LL);
    swift_unknownObjectWeakInit(v19 + 16, v2);
    uint64_t v20 = (void *)swift_allocObject(&unk_1003FABB0, 40LL, 7LL);
    v20[2] = *(void *)(v16 + 80);
    void v20[3] = *(void *)(v16 + 88);
    void v20[4] = v19;
    v17(v11, enum case for DispatchTimeInterval.never(_:), v6);
    *(void *)unint64_t v9 = 100LL;
    v17(v9, enum case for DispatchTimeInterval.milliseconds(_:), v6);
    uint64_t v21 = type metadata accessor for P2PTimer(0LL);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    uint64_t v22 = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)( (uint64_t)v13,  v18,  (uint64_t)v11,  (uint64_t)v9,  (uint64_t)sub_1002E8840,  (uint64_t)v20);
    uint64_t v23 = *(void *)((char *)v2 + qword_10040FA68);
    *(void *)((char *)v2 + qword_10040FA68) = v22;
    swift_release(v23);
    uint64_t v24 = *(void *)((char *)v2 + qword_100410C38);
    *(void *)((char *)v2 + qword_100410C38) = v26;
    return sub_1002E4FF8(v24);
  }

  return result;
}

void sub_1002E77AC(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = (char *)Strong;
    if (*(void *)(Strong + qword_100410C38))
    {
      uint64_t v4 = (void *)swift_unknownObjectWeakLoadStrong(Strong + qword_10040FA98);

      if (!v4)
      {
        uint64_t v5 = &v3[qword_10040FA80];
        swift_beginAccess(&v3[qword_10040FA80], &v6, 0LL, 0LL);
        if (*(void *)(*(void *)v5 + 16LL)) {
          sub_1002E55E8(0xD000000000000024LL, 0x8000000100369CA0LL);
        }
      }
    }
  }

void sub_1002E786C(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = a1;
  sub_1002E75A0(a3);
}

void sub_1002E78B8(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  sub_1002E8734();
}

void sub_1002E7918(int a1, int a2, int a3, void *aBlock)
{
  id v4 = _Block_copy(aBlock);
  _Block_release(v4);
}

uint64_t sub_1002E7930(void *a1, uint64_t a2)
{
  return sub_1002DA324(a1, a2, (uint64_t (*)(void, void))sub_1002E8814);
}

uint64_t type metadata accessor for LowLatencyInternetRequesterPolicy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LowLatencyInternetRequesterPolicy);
}

uint64_t sub_1002E7948(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1002E7994 + 4 * byte_10035FDD3[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1002E79C8 + 4 * byte_10035FDCE[v4]))();
}

uint64_t sub_1002E79C8(uint64_t result)
{
  *(_BYTE *)(result + sub_100058090(v4, v0 + 1) = v1;
  return result;
}

uint64_t sub_1002E79D0(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_100058090(v4, v0 + 1) = 0;
  if (a2) {
    JUMPOUT(0x1002E79D8LL);
  }
  return result;
}

uint64_t sub_1002E79E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_100058090(v4, v0 + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1002E79ECLL);
  }
  *(_BYTE *)double result = a2 + 1;
  return result;
}

uint64_t sub_1002E79F0(uint64_t result)
{
  *(_DWORD *)(result + sub_100058090(v4, v0 + 1) = v1;
  return result;
}

uint64_t sub_1002E79F8(uint64_t result)
{
  *(_WORD *)(result + sub_100058090(v4, v0 + 1) = v1;
  return result;
}

uint64_t type metadata accessor for LowLatencyInternetProviderPolicy.TearDownReason( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for LowLatencyInternetProviderPolicy.TearDownReason);
}

uint64_t sub_1002E7A10(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 3) = *(_DWORD *)(a2 + 3);
  uint64_t v4 = (uint64_t *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v4;
  }

  else
  {
    uint64_t v6 = *v4;
    sub_100020AFC(*v4, *(void *)(a2 + 16));
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  }

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t sub_1002E7A8C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + sub_100058090(v4, v0 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  uint64_t v4 = (_OWORD *)(a1 + 8);
  unint64_t v5 = (uint64_t *)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16) >> 60 != 15LL)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v8 = *v5;
      sub_100020AFC(*v5, *(void *)(a2 + 16));
      uint64_t v9 = *(void *)(a1 + 8);
      unint64_t v10 = *(void *)(a1 + 16);
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
      sub_1000208D8(v9, v10);
      goto LABEL_8;
    }

    sub_1002E7B7C(a1 + 8);
    goto LABEL_6;
  }

  if (v6 >> 60 == 15)
  {
LABEL_6:
    *uint64_t v4 = *(_OWORD *)v5;
    goto LABEL_8;
  }

  uint64_t v7 = *v5;
  sub_100020AFC(*v5, *(void *)(a2 + 16));
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
LABEL_8:
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t sub_1002E7B7C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002E7BB0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_WORD *)(a1 + 5) = *(_WORD *)(a2 + 5);
  uint64_t v4 = (_OWORD *)(a1 + 8);
  unint64_t v5 = (void *)(a2 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = *(void *)(a2 + 16);
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = *v5;
      *(void *)(a1 + swift_weakDestroy(v0 + 16) = v7;
      sub_1000208D8(v8, v6);
      goto LABEL_6;
    }

    sub_1002E7B7C(a1 + 8);
  }

  *uint64_t v4 = *(_OWORD *)v5;
LABEL_6:
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t sub_1002E7C48(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_1002E7C9C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)double result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 25) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 24) = a2 + 1;
    }
  }

  return result;
}

uint64_t type metadata accessor for LowLatencyInternetProviderPolicy.Requester( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LowLatencyInternetProviderPolicy.Requester);
}

uint64_t sub_1002E7CF0(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10035FFD8, a1);
}

void sub_1002E7D00(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
}

void sub_1002E7D28(uint64_t a1)
{
}

uint64_t sub_1002E7D4C()
{
  return sub_1002E6AE0() & 1;
}

uint64_t sub_1002E7D70(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = result + 1;
  uint64_t v4 = v3 + 8 * result;
  *(_DWORD *)(v4 + 32) = a2;
  *(_BYTE *)(v4 + 36) = BYTE4(a2);
  *(_BYTE *)(v4 + 37) = BYTE5(a2);
  return result;
}

__n128 sub_1002E7D98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = a1 + 1;
  uint64_t v4 = v3 + 56 * a1;
  __int128 v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 48) = v5;
  __n128 result = *(__n128 *)(a2 + 32);
  *(__n128 *)(v4 + 64) = result;
  *(void *)(v4 + 80) = *(void *)(a2 + 48);
  return result;
}

id sub_1002E7DC8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v2);
  __int128 v5 = v2;
  Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xED00006E616E2E65LL,  0x74656E7265746E69LL,  0xEF676E6972616853LL);
  *(void *)&v5[qword_10040FA48] = 0LL;
  *(void *)&v5[qword_10040FA50] = 0LL;
  *(void *)&v5[qword_10040FA58] = 0LL;
  *(void *)&v5[qword_10040FA60] = 0LL;
  *(void *)&v5[qword_10040FA68] = 0LL;
  *(void *)&v5[qword_10040FA70] = 0LL;
  v5[qword_10040FA78] = 0;
  *(void *)&v5[qword_100410C38] = 0LL;
  *(void *)&v5[qword_10040FA80] = &_swiftEmptyDictionarySingleton;
  *(void *)&v5[qword_10040FA88] = &_swiftEmptyDictionarySingleton;
  swift_unknownObjectWeakInit(&v5[qword_10040FA90], 0LL);
  swift_unknownObjectWeakInit(&v5[qword_10040FA98], 0LL);
  *(void *)&v5[qword_10040FA40] = a1;
  swift_unownedRetain(a1);

  v7.receiver = v5;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, "init");
}

id sub_1002E7F34(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_1002E7DC8(a1);
}

id sub_1002E7F64(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v2);
  uint64_t v5 = swift_isaMask & *v2;
  unint64_t v6 = v2;
  Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xED00006E616E2E65LL,  0x74656E7265746E69LL,  0xEF676E6972616853LL);
  *(void *)((char *)v6 + qword_10040F980) = 0LL;
  objc_super v7 = (void *)((char *)v6 + qword_10040F988);
  *objc_super v7 = 0LL;
  v7[1] = 0LL;
  *(void *)((char *)v6 + qword_10040F998) = 0LL;
  uint64_t v8 = (void *)((char *)v6 + qword_10040F9A0);
  *uint64_t v8 = 0LL;
  v8[1] = 0LL;
  uint64_t v9 = qword_10040F9A8;
  uint64_t v11 = type metadata accessor for LowLatencyInternetProviderPolicy.Requester( 0LL,  *(void *)(v5 + 80),  *(void *)(v5 + 88),  v10);
  unint64_t v12 = sub_10029F2C0();
  *(void *)((char *)v6 + v9) = Dictionary.init()(&type metadata for WiFiAddress, v11, v12);
  swift_unknownObjectWeakInit((char *)v6 + qword_10040F9B0, 0LL);
  *((_BYTE *)v6 + qword_10040F9B8) = 2;
  *(void *)((char *)v6 + qword_10040F990) = a1;
  swift_unownedRetain(a1);

  v14.receiver = v6;
  v14.super_class = ObjectType;
  return objc_msgSendSuper2(&v14, "init");
}

id sub_1002E80D4(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_1002E7F64(a1);
}

uint64_t sub_1002E8104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return a5 & 1;
}

uint64_t sub_1002E810C(unsigned __int16 *a1, unsigned int *a2)
{
  return (*(uint64_t (**)(unint64_t, unint64_t, void, void, void))(v2 + 32))( *a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 16),  *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48),  *((void *)a2 + 1),  *((void *)a2 + 2),  *((unsigned __int8 *)a2 + 24)) & 1;
}

uint64_t sub_1002E8168(unint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4 = (void *)a4;
  uint64_t v8 = a1 & 0xFF00000000LL;
  if ((a1 & 0xFF00000000LL) != 0x300000000LL)
  {
    uint64_t v9 = *(void *)(a4 + 16);
    unint64_t v10 = HIDWORD(a1);
    if (v9)
    {
      uint64_t v11 = (_BYTE *)(a4 + 36);
      uint64_t v12 = *(void *)(a4 + 16);
      while (*((_DWORD *)v11 - 1) != (_DWORD)a1
           || ((0x801004u >> (8 * BYTE4(a1))) & 0xFFC) != (0x801004u >> (8 * *v11)))
      {
        v11 += 8;
        if (!--v12) {
          goto LABEL_8;
        }
      }
    }

    else
    {
LABEL_8:
      if ((swift_isUniquelyReferenced_nonNull_native(a4) & 1) == 0) {
        uint64_t v4 = sub_1000A65E8(0LL, v9 + 1, 1, v4);
      }
      unint64_t v14 = v4[2];
      unint64_t v13 = v4[3];
      if (v14 >= v13 >> 1) {
        uint64_t v4 = sub_1000A65E8((void *)(v13 > 1), v14 + 1, 1, v4);
      }
      void v4[2] = v14 + 1;
      uint64_t v15 = &v4[v14];
      *((_DWORD *)v15 + 8) = a1;
      *((_BYTE *)v15 + 36) = v10;
      *((_BYTE *)v15 + 37) = BYTE5(a1);
    }
  }

  uint64_t v16 = a2 & 0xFF00000000LL;
  if ((a2 & 0xFF00000000LL) != 0x300000000LL)
  {
    uint64_t v17 = v4[2];
    if (v17)
    {
      id v18 = (char *)v4 + 36;
      uint64_t v19 = v4[2];
      while (*((_DWORD *)v18 - 1) != (_DWORD)a2
           || ((0x801004u >> (8 * BYTE4(a2))) & 0xFFC) != (0x801004u >> (8 * *v18)))
      {
        v18 += 8;
        if (!--v19) {
          goto LABEL_20;
        }
      }
    }

    else
    {
LABEL_20:
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0) {
        uint64_t v4 = sub_1000A65E8(0LL, v17 + 1, 1, v4);
      }
      unint64_t v21 = v4[2];
      unint64_t v20 = v4[3];
      if (v21 >= v20 >> 1) {
        uint64_t v4 = sub_1000A65E8((void *)(v20 > 1), v21 + 1, 1, v4);
      }
      void v4[2] = v21 + 1;
      uint64_t v22 = &v4[v21];
      *((_DWORD *)v22 + 8) = a2;
      *((_BYTE *)v22 + 36) = BYTE4(a2);
      *((_BYTE *)v22 + 37) = BYTE5(a2);
    }
  }

  swift_bridgeObjectRetain(v4);
  uint64_t v24 = sub_1002D594C(v23);
  swift_bridgeObjectRelease(v4);
  unint64_t v25 = *(void *)(v24 + 16);
  swift_bridgeObjectRelease(v24);
  if ((a3 & 1) != 0)
  {
    if (v25 < 2) {
      goto LABEL_34;
    }
LABEL_33:
    swift_bridgeObjectRelease(v4);
    return 1LL;
  }

  if (v25)
  {
    if (v25 == 1 && !v8 && v16 != 0x300000000LL && v16) {
      goto LABEL_38;
    }
    goto LABEL_33;
  }

uint64_t sub_1002E8520(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  if (a4 != 2) {
    return sub_100020B40(a2, a3);
  }
  return result;
}

uint64_t sub_1002E853C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_1002E8544()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

double sub_1002E8568(uint64_t a1, uint64_t *a2)
{
  return sub_1002E3DFC(a1, a2, *(void *)(v2 + 32));
}

BOOL sub_1002E8574(unsigned __int16 *a1)
{
  return sub_1002E3B58(*a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 16)) != 0;
}

double sub_1002E85B0(uint64_t a1)
{
  return sub_1002E3E8C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1002E85CC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 != 11) {
    return sub_100020B40(a2, a3);
  }
  return result;
}

uint64_t sub_1002E85E8()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1002E860C(uint64_t a1, uint64_t a2)
{
}

double sub_1002E8618(uint64_t a1, uint64_t a2)
{
  return sub_1002E6C40(a1, a2, v2[4], v2[2], v2[3]);
}

void sub_1002E8624()
{
}

void sub_1002E8630()
{
}

void sub_1002E863C()
{
}

double sub_1002E8648(unsigned __int16 *a1)
{
  return sub_1002E6FD4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

void *sub_1002E8664(void *a1)
{
  unint64_t v2 = sub_1002E3F1C(a1);
  uint64_t v5 = v1;
  return sub_10027E8CC( (void *(*)(uint64_t *__return_ptr, __int16 *))sub_1002E8868,  (uint64_t)&v4,  v2 & 0xFFFFFFFFFFFFLL | ((HIWORD(v2) & 1) << 48));
}

void sub_1002E86B0()
{
}

void sub_1002E86DC()
{
}

void sub_1002E86F8()
{
}

double sub_1002E8734()
{
  uint64_t v1 = v0;
  sub_1002E5584();
  uint64_t v2 = qword_10040FA78;
  if (*(_BYTE *)(v0 + qword_10040FA78) == 1)
  {
    uint64_t v3 = *(void *)(v0 + qword_10040FA40);
    swift_unownedRetainStrong(*(void *)(v1 + qword_10040FA40));
    uint64_t v4 = *(void *)(v3 + *(void *)(*(void *)v3 + 688LL));
    swift_unownedRetainStrong(v4);
    swift_release(v3);
    sub_1002D3A44();
    swift_release(v4);
    *(_BYTE *)(v1 + sub_1000E77F4(v3, v2) = 0;
  }

  uint64_t v5 = (uint64_t *)(v1 + qword_10040FA48);
  swift_beginAccess(v1 + qword_10040FA48, v11, 1LL, 0LL);
  uint64_t v6 = *v5;
  *uint64_t v5 = 0LL;
  swift_release(v6);
  objc_super v7 = (uint64_t *)(v1 + qword_10040FA50);
  swift_beginAccess(v7, &v10, 1LL, 0LL);
  uint64_t v8 = *v7;
  *objc_super v7 = 0LL;
  *(void *)&double result = swift_release(v8).n128_u64[0];
  return result;
}

void sub_1002E8814()
{
}

void sub_1002E8840()
{
}

double sub_1002E884C(unsigned __int8 *a1)
{
  return sub_1002E4AB8(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1002E8868@<X0>(int *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1002E4698(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_1002E8884()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1002E88A8()
{
}

uint64_t sub_1002E88B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002E88C0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_1002E88E8(uint64_t a1)
{
  v30[0] = "\b";
  v30[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v30[4] = "\b";
  void v30[5] = &unk_100360078;
  v30[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t v30[3] = "\b";
  v30[6] = "\b";
  v30[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v30[8] = "\b";
  v30[9] = "\b";
  sub_10022AFF4(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v31 = *(void *)(v2 - 8) + 64LL;
    uint64_t v32 = v31;
    sub_100221134(319LL, &qword_10040FCD8, (uint64_t (*)(void))sub_1002244C0, (uint64_t)&type metadata for NANState);
    if (v5 <= 0x3F)
    {
      uint64_t v33 = *(void *)(v4 - 8) + 64LL;
      sub_100221134(319LL, &qword_10040BE78, (uint64_t (*)(void))sub_10021379C, (uint64_t)&type metadata for WiFiAddress);
      if (v7 <= 0x3F)
      {
        uint64_t v34 = *(void *)(v6 - 8) + 64LL;
        sub_100221134( 319LL,  &qword_10040FCF8,  (uint64_t (*)(void))sub_1001D33B8,  (uint64_t)&type metadata for NANAttribute.MasterIndication);
        if (v9 <= 0x3F)
        {
          uint64_t v35 = *(void *)(v8 - 8) + 64LL;
          sub_1002F7510(319LL, &qword_10040FD08, &qword_10040FD10, &qword_10040FD18, (void (*)(void))sub_100115784);
          if (v11 <= 0x3F)
          {
            uint64_t v36 = *(void *)(v10 - 8) + 64LL;
            sub_100221134( 319LL,  &qword_10040FD28,  (uint64_t (*)(void))sub_1001894A8,  (uint64_t)&type metadata for Channel);
            if (v13 <= 0x3F)
            {
              uint64_t v37 = *(void *)(v12 - 8) + 64LL;
              sub_1002F7510( 319LL,  &qword_10040FD38,  (uint64_t *)&unk_10040FD40,  &qword_10040F490,  (void (*)(void))sub_1001894A8);
              if (v15 <= 0x3F)
              {
                uint64_t v38 = *(void *)(v14 - 8) + 64LL;
                sub_100221134( 319LL,  (unint64_t *)&unk_10040FD50,  (uint64_t (*)(void))sub_1000E68D0,  (uint64_t)&type metadata for NANAwakeDWPeriods);
                if (v17 <= 0x3F)
                {
                  uint64_t v39 = *(void *)(v16 - 8) + 64LL;
                  sub_100221134( 319LL,  (unint64_t *)&unk_10040FD60,  (uint64_t (*)(void))sub_1001D4A58,  (uint64_t)&type metadata for NANAttribute.DataCluster);
                  if (v19 <= 0x3F)
                  {
                    uint64_t v40 = *(void *)(v18 - 8) + 64LL;
                    sub_1002F7598(319LL);
                    if (v21 <= 0x3F)
                    {
                      uint64_t v41 = *(void *)(v20 - 8) + 64LL;
                      sub_1002F7624(319LL);
                      if (v23 <= 0x3F)
                      {
                        uint64_t v42 = *(void *)(v22 - 8) + 64LL;
                        sub_1002F7704(319LL);
                        if (v25 <= 0x3F)
                        {
                          uint64_t v43 = *(void *)(v24 - 8) + 64LL;
                          uint64_t v44 = v43;
                          int v45 = &unk_100360090;
                          uint64_t v46 = &unk_1003600A8;
                          uint64_t v47 = "\b";
                          uint64_t v48 = "\b";
                          uint64_t v49 = "\b";
                          uint64_t v26 = type metadata accessor for NANDriverCapabilities(319LL);
                          if (v27 <= 0x3F)
                          {
                            uint64_t v50 = *(void *)(v26 - 8) + 64LL;
                            id v51 = &unk_1003600C0;
                            uint64_t v28 = type metadata accessor for DispatchTime(319LL);
                            if (v29 <= 0x3F)
                            {
                              uint64_t v52 = *(void *)(v28 - 8) + 64LL;
                              uint64_t v53 = &unk_1003600D8;
                              uint64_t v54 = &unk_1003600F0;
                              swift_initClassMetadata2(a1, 0LL, 34LL, v30, a1 + 424);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

uint64_t sub_1002E8C08()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v5 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v6 = (void *)*v5;
  *uint64_t v4 = *v5;
  (*(void (**)(uint64_t *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v4);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v2 + 8))(v4, v1);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    return result;
  }

  if (sub_1002E9E34())
  {
    uint64_t result = swift_bridgeObjectRelease(0xE700000000000000LL);
    goto LABEL_5;
  }

  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x64656C6261736964LL,  0xE800000000000000LL,  0x64656C62616E65LL,  0xE700000000000000LL,  0LL);
  uint64_t result = swift_bridgeObjectRelease(0xE800000000000000LL);
  if ((v9 & 1) != 0)
  {
LABEL_5:
    if (!*(void *)(v0 + *(void *)(*(void *)v0 + 496LL))) {
      return result;
    }
  }

  unint64_t v10 = sub_1000033FC();
  uint64_t v11 = swift_allocError(&type metadata for WiFiError, v10, 0LL, 0LL);
  *(_OWORD *)uint64_t v12 = xmmword_100337000;
  *(_BYTE *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
  return swift_willThrow(v11);
}

uint64_t sub_1002E8D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)v4 + 632LL);
  if (*(void *)(v4 + v5))
  {
    uint64_t v6 = *(void *)(v4 + v5);
  }

  else
  {
    uint64_t v7 = v4;
    type metadata accessor for NANDiscoveryEngine( 0LL,  *(void *)(*(void *)v4 + 408LL),  *(void *)(*(void *)v4 + 416LL),  a4);
    uint64_t v8 = swift_retain();
    uint64_t v6 = sub_10029FBEC(v8);
    swift_release(v7);
    uint64_t v9 = *(void *)(v7 + v5);
    *(void *)(v7 + v5) = v6;
    swift_retain();
    swift_release(v9);
  }

  swift_retain();
  return v6;
}

uint64_t sub_1002E8DEC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100002274(&qword_10040D440);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for NANAttribute(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1LL, v9) == 1)
  {
    sub_1000225EC(a1, &qword_10040D440);
    unint64_t v13 = sub_100327790(a2);
    if ((v14 & 1) != 0)
    {
      unint64_t v15 = v13;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
      uint64_t v17 = *v3;
      uint64_t v24 = *v3;
      *uint64_t v3 = 0x8000000000000000LL;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_100329D68();
        uint64_t v17 = v24;
      }

      sub_100022628( *(void *)(v17 + 56) + *(void *)(v10 + 72) * v15,  (uint64_t)v8,  type metadata accessor for NANAttribute);
      sub_100328454(v15, v17);
      uint64_t v18 = *v3;
      *uint64_t v3 = v17;
      swift_bridgeObjectRelease(v18);
      uint64_t v19 = 0LL;
    }

    else
    {
      uint64_t v19 = 1LL;
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v19, 1LL, v9);
    return sub_1000225EC((uint64_t)v8, &qword_10040D440);
  }

  else
  {
    sub_100022628(a1, (uint64_t)v12, type metadata accessor for NANAttribute);
    char v20 = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v24 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_100243CA0((uint64_t)v12, a2, v20);
    uint64_t v21 = *v3;
    *uint64_t v3 = v24;
    return swift_bridgeObjectRelease(v21);
  }

double sub_1002E8FC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_100002274((uint64_t *)&unk_10040DCC0);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v10 + 48))(a1, 1LL) == 1)
  {
    sub_1000225EC(a1, (uint64_t *)&unk_10040DCC0);
    sub_1002F8010( a2 & 0xFFFFFFFFFFFFFFLL,  type metadata accessor for NANInternetSharingStatistics.Requester,  (void (*)(unint64_t, uint64_t))sub_1003289F4,  (void (*)(void))sub_10032A470,  (uint64_t)v7);
    sub_1000225EC((uint64_t)v7, (uint64_t *)&unk_10040DCC0);
  }

  else
  {
    sub_100022628(a1, (uint64_t)v9, type metadata accessor for NANInternetSharingStatistics.Requester);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v15 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_100244050((uint64_t)v9, a2 & 0xFFFFFFFFFFFFFFLL, isUniquelyReferenced_nonNull_native);
    uint64_t v13 = *v3;
    *uint64_t v3 = v15;
    *(void *)&double result = swift_bridgeObjectRelease(v13).n128_u64[0];
  }

  return result;
}

double sub_1002E9124(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_100002274((uint64_t *)&unk_10040F0F0);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for NANPeer.Service.AuthenticationStatus(0LL);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v10 + 48))(a1, 1LL) == 1)
  {
    sub_1000225EC(a1, (uint64_t *)&unk_10040F0F0);
    sub_1002F8010( a2 & 0xFFFFFFFFFFFFFFLL,  type metadata accessor for NANPeer.Service.AuthenticationStatus,  (void (*)(unint64_t, uint64_t))sub_10032901C,  (void (*)(void))sub_10032B2F8,  (uint64_t)v7);
    sub_1000225EC((uint64_t)v7, (uint64_t *)&unk_10040F0F0);
  }

  else
  {
    sub_100022628(a1, (uint64_t)v9, type metadata accessor for NANPeer.Service.AuthenticationStatus);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v15 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_10024459C((uint64_t)v9, a2 & 0xFFFFFFFFFFFFFFLL, isUniquelyReferenced_nonNull_native);
    uint64_t v13 = *v3;
    *uint64_t v3 = v15;
    *(void *)&double result = swift_bridgeObjectRelease(v13).n128_u64[0];
  }

  return result;
}

uint64_t sub_1002E9284(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_1000589F8((__int128 *)a1, (uint64_t)v10);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    uint64_t v9 = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    sub_1002446EC(v10, a2, isUniquelyReferenced_nonNull_native);
    uint64_t v5 = *v2;
    *uint64_t v2 = v9;
    swift_bridgeObjectRelease(v5);
    uint64_t v6 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a2, v6);
  }

  else
  {
    sub_1000225EC(a1, &qword_10040DA50);
    sub_1002F8134(a2, (uint64_t)v10);
    uint64_t v8 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(a2, v8);
    return sub_1000225EC((uint64_t)v10, &qword_10040DA50);
  }

uint64_t sub_1002E9368(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_100002274(&qword_10040FE50);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for NANPeer(0LL);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v10 + 48))(a1, 1LL) == 1)
  {
    sub_1000225EC(a1, &qword_10040FE50);
    sub_1002F8470( a2 & 0xFFFFFFFFFFFFLL,  type metadata accessor for NANPeer,  (void (*)(unint64_t, uint64_t))sub_1003294F8,  (void (*)(void))sub_10032BCC4,  (uint64_t)v7);
    return sub_1000225EC((uint64_t)v7, &qword_10040FE50);
  }

  else
  {
    sub_100022628(a1, (uint64_t)v9, type metadata accessor for NANPeer);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v15 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_10024486C((uint64_t)v9, a2 & 0xFFFFFFFFFFFFLL, isUniquelyReferenced_nonNull_native);
    uint64_t v13 = *v3;
    *uint64_t v3 = v15;
    return swift_bridgeObjectRelease(v13);
  }

double sub_1002E94C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_100002274((uint64_t *)&unk_10040E540);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for AWDLPeer(0LL);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v10 + 48))(a1, 1LL) == 1)
  {
    sub_1000225EC(a1, (uint64_t *)&unk_10040E540);
    sub_1002F8470( a2 & 0xFFFFFFFFFFFFLL,  type metadata accessor for AWDLPeer,  (void (*)(unint64_t, uint64_t))sub_100328BB0,  (void (*)(void))sub_10032A624,  (uint64_t)v7);
    sub_1000225EC((uint64_t)v7, (uint64_t *)&unk_10040E540);
  }

  else
  {
    sub_100022628(a1, (uint64_t)v9, type metadata accessor for AWDLPeer);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v15 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_1002449E4((uint64_t)v9, a2 & 0xFFFFFFFFFFFFLL, isUniquelyReferenced_nonNull_native);
    uint64_t v13 = *v3;
    *uint64_t v3 = v15;
    *(void *)&double result = swift_bridgeObjectRelease(v13).n128_u64[0];
  }

  return result;
}

void *sub_1002E9628(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = a1;
  sub_1000696B4(0, v1, 0);
  double result = (void *)sub_1002F7BDC(v2);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0LL;
  char v8 = v7 & 1;
  uint64_t v9 = v2 + 64;
  uint64_t v27 = v4;
  int64_t v28 = v1;
  uint64_t v25 = v2 + 96;
  uint64_t v29 = v2 + 64;
  while ((v5 & 0x8000000000000000LL) == 0 && v5 < 1LL << *(_BYTE *)(v2 + 32))
  {
    unint64_t v12 = (unint64_t)v5 >> 6;
    if (*(_DWORD *)(v2 + 36) != (_DWORD)v4) {
      goto LABEL_29;
    }
    uint64_t v30 = v6;
    uint64_t v31 = v4;
    char v26 = v8;
    double result = (void *)Channel.description.getter(*(unsigned int *)(*(void *)(v2 + 48) + 8 * v5) | ((unint64_t)*(unsigned __int8 *)(*(void *)(v2 + 48) + 8 * v5 + 4) << 32) | ((unint64_t)*(unsigned __int8 *)(*(void *)(v2 + 48) + 8 * v5 + 5) << 40));
    uint64_t v13 = result;
    uint64_t v15 = v14;
    uint64_t v16 = v2;
    unint64_t v18 = _swiftEmptyArrayStorage[2];
    unint64_t v17 = _swiftEmptyArrayStorage[3];
    if (v18 >= v17 >> 1) {
      double result = (void *)sub_1000696B4(v17 > 1, v18 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v18 + 1;
    uint64_t v19 = &_swiftEmptyArrayStorage[2 * v18];
    v19[4] = v13;
    v19[5] = v15;
    int64_t v10 = 1LL << *(_BYTE *)(v16 + 32);
    if (v5 >= v10) {
      goto LABEL_30;
    }
    uint64_t v9 = v29;
    uint64_t v20 = *(void *)(v29 + 8 * v12);
    if ((v20 & (1LL << v5)) == 0) {
      goto LABEL_31;
    }
    uint64_t v2 = v16;
    if (*(_DWORD *)(v16 + 36) != (_DWORD)v31) {
      goto LABEL_32;
    }
    unint64_t v21 = v20 & (-2LL << (v5 & 0x3F));
    if (v21)
    {
      int64_t v10 = __clz(__rbit64(v21)) | v5 & 0xFFFFFFFFFFFFFFC0LL;
      int64_t v11 = v28;
    }

    else
    {
      unint64_t v22 = v12 + 1;
      unint64_t v23 = (unint64_t)(v10 + 63) >> 6;
      int64_t v11 = v28;
      if (v12 + 1 < v23)
      {
        unint64_t v24 = *(void *)(v29 + 8 * v22);
        if (!v24)
        {
          unint64_t v22 = v12 + 2;
          if (v12 + 2 >= v23) {
            goto LABEL_4;
          }
          unint64_t v24 = *(void *)(v29 + 8 * v22);
          if (!v24)
          {
            unint64_t v22 = v12 + 3;
            if (v12 + 3 >= v23) {
              goto LABEL_4;
            }
            unint64_t v24 = *(void *)(v29 + 8 * v22);
            if (!v24)
            {
              while (v23 - 4 != v12)
              {
                unint64_t v24 = *(void *)(v25 + 8 * v12++);
                if (v24)
                {
                  double result = (void *)sub_100022588(v5, v31, v26 & 1);
                  unint64_t v22 = v12 + 3;
                  goto LABEL_17;
                }
              }

              double result = (void *)sub_100022588(v5, v31, v26 & 1);
              goto LABEL_4;
            }
          }
        }

uint64_t sub_1002E98B0(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (!v1) {
    return (uint64_t)v2;
  }
  uint64_t v3 = a1;
  uint64_t v33 = _swiftEmptyArrayStorage;
  sub_1000696B4(0, v1, 0);
  uint64_t v2 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1002F7BDC(v3);
  uint64_t v6 = result;
  uint64_t v7 = 0LL;
  char v9 = v8 & 1;
  uint64_t v10 = v3 + 64;
  uint64_t v27 = v5;
  int64_t v28 = v1;
  uint64_t v25 = v3 + 96;
  uint64_t v29 = v3 + 64;
  while ((v6 & 0x8000000000000000LL) == 0 && v6 < 1LL << *(_BYTE *)(v3 + 32))
  {
    unint64_t v12 = (unint64_t)v6 >> 6;
    if (*(_DWORD *)(v3 + 36) != (_DWORD)v5) {
      goto LABEL_29;
    }
    uint64_t v30 = v7;
    uint64_t v31 = v5;
    char v26 = v9;
    char v32 = *(_BYTE *)(*(void *)(v3 + 48) + v6);
    uint64_t result = String.init<A>(describing:)(&v32, &type metadata for NANAttribute.AttributeType);
    uint64_t v13 = result;
    uint64_t v15 = v14;
    uint64_t v33 = v2;
    uint64_t v16 = v3;
    unint64_t v18 = v2[2];
    unint64_t v17 = v2[3];
    if (v18 >= v17 >> 1)
    {
      uint64_t result = sub_1000696B4(v17 > 1, v18 + 1, 1);
      uint64_t v2 = v33;
    }

    void v2[2] = v18 + 1;
    uint64_t v19 = &v2[2 * v18];
    v19[4] = v13;
    v19[5] = v15;
    int64_t v11 = 1LL << *(_BYTE *)(v16 + 32);
    if (v6 >= v11) {
      goto LABEL_30;
    }
    uint64_t v3 = v16;
    uint64_t v10 = v29;
    uint64_t v20 = *(void *)(v29 + 8 * v12);
    if ((v20 & (1LL << v6)) == 0) {
      goto LABEL_31;
    }
    if (*(_DWORD *)(v3 + 36) != (_DWORD)v31) {
      goto LABEL_32;
    }
    unint64_t v21 = v20 & (-2LL << (v6 & 0x3F));
    if (v21)
    {
      int64_t v11 = __clz(__rbit64(v21)) | v6 & 0xFFFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v22 = v12 + 1;
      unint64_t v23 = (unint64_t)(v11 + 63) >> 6;
      if (v12 + 1 < v23)
      {
        unint64_t v24 = *(void *)(v29 + 8 * v22);
        if (!v24)
        {
          unint64_t v22 = v12 + 2;
          if (v12 + 2 >= v23) {
            goto LABEL_4;
          }
          unint64_t v24 = *(void *)(v29 + 8 * v22);
          if (!v24)
          {
            unint64_t v22 = v12 + 3;
            if (v12 + 3 >= v23) {
              goto LABEL_4;
            }
            unint64_t v24 = *(void *)(v29 + 8 * v22);
            if (!v24)
            {
              while (v23 - 4 != v12)
              {
                unint64_t v24 = *(void *)(v25 + 8 * v12++);
                if (v24)
                {
                  uint64_t result = sub_100022588(v6, v31, v26 & 1);
                  unint64_t v22 = v12 + 3;
                  goto LABEL_17;
                }
              }

              uint64_t result = sub_100022588(v6, v31, v26 & 1);
              goto LABEL_4;
            }
          }
        }

unint64_t sub_1002E9B2C(uint64_t a1)
{
  if (a1 == 16)
  {
    unint64_t result = static WiFiAddress.randomLinkLocalAddress()();
    uint64_t v3 = v1 + *(void *)(*(void *)v1 + 464LL);
    *(_WORD *)(v3 + 4) = WORD2(result);
    *(_DWORD *)uint64_t v3 = result;
    *(_BYTE *)(v3 + 6) = 0;
  }

  else
  {
    unint64_t v4 = sub_1000033FC();
    uint64_t v5 = swift_allocError(&type metadata for WiFiError, v4, 0LL, 0LL);
    *(_OWORD *)uint64_t v6 = xmmword_10033A940;
    *(_BYTE *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
    return swift_willThrow(v5);
  }

  return result;
}

uint64_t sub_1002E9BB4(uint64_t result)
{
  if (result == 16)
  {
    uint64_t v2 = v1 + *(void *)(*(void *)v1 + 464LL);
    *(_WORD *)(v2 + 4) = 0;
    *(_DWORD *)uint64_t v2 = 0;
    *(_BYTE *)(v2 + 6) = 1;
  }

  else
  {
    unint64_t v3 = sub_1000033FC();
    uint64_t v4 = swift_allocError(&type metadata for WiFiError, v3, 0LL, 0LL);
    *(_OWORD *)uint64_t v5 = xmmword_10033A940;
    *(_BYTE *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
    return swift_willThrow(v4);
  }

  return result;
}

void (*sub_1002E9C38(void *a1, unsigned __int8 a2))(void *)
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_1002F8594(v4, a2);
  return sub_1002E9C84;
}

void (*sub_1002E9C88(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  void v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  uint64_t v5 = malloc(*(void *)(v4 + 64));
  v2[6] = v5;
  (*(void (**)(void))(v4 + 16))();
  v2[7] = sub_1002F8614(v2, (uint64_t)v5);
  return sub_1002E9D18;
}

void sub_1002E9D18(void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void **)(*a1 + 48LL);
  uint64_t v3 = *(void *)(*a1 + 32LL);
  uint64_t v4 = *(void *)(*a1 + 40LL);
  (*(void (**)(void, void))(*a1 + 56LL))(*a1, 0LL);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);
  free(v1);
}

void (*sub_1002E9D6C(void *a1, uint64_t a2))(void *)
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_1002F87BC(v4, a2 & 0xFFFFFFFFFFFFLL);
  return sub_1002E9C84;
}

void (*sub_1002E9DB8(void *a1, char a2))(void *)
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_1002F8740(v4, a2);
  return sub_1002E9C84;
}

void sub_1002E9E04(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32LL))(*a1, 0LL);
  free(v1);
}

uint64_t sub_1002E9E34()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 520LL);
  swift_beginAccess(v1, v3, 0LL, 0LL);
  return *(unsigned __int8 *)(v1 + *(int *)(sub_100002274(&qword_10040FE30) + 40));
}

uint64_t sub_1002E9E88(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = a1;
  uint64_t v44 = a2;
  uint64_t v3 = *v2;
  uint64_t v4 = type metadata accessor for DispatchTime(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v40 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v38 = *(void *)(v7 - 8);
  uint64_t v39 = v7;
  __chkstk_darwin();
  char v9 = (char **)((char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v37 = (char *)&v37 - v10;
  sub_100002274(&qword_100405D40);
  __chkstk_darwin();
  uint64_t v41 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v37 - v12;
  __chkstk_darwin();
  uint64_t v15 = (char *)&v37 - v14;
  uint64_t v42 = v3;
  uint64_t v16 = (uint64_t)v2 + *(void *)(v3 + 512);
  swift_beginAccess(v16, v46, 0LL, 0LL);
  sub_1000226B0(v16, (uint64_t)v15, &qword_100405D40);
  unint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  LODWORD(v3) = v17(v15, 1LL, v4);
  uint64_t v18 = (uint64_t)v15;
  uint64_t v19 = v5;
  sub_1000225EC(v18, &qword_100405D40);
  BOOL v20 = (_DWORD)v3 == 1;
  uint64_t v21 = v44;
  if (v20) {
    goto LABEL_4;
  }
  type metadata accessor for P2PTimer(0LL);
  unint64_t v22 = v40;
  variable initialization expression of AWDLPeer.lastUpdated();
  sub_1000226B0(v16, (uint64_t)v13, &qword_100405D40);
  uint64_t result = v17(v13, 1LL, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    return result;
  }

  uint64_t v24 = (uint64_t)v37;
  DispatchTime.distance(to:)(v22);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v19 + 8);
  v25(v22, v4);
  v25(v13, v4);
  *char v9 = 5LL;
  uint64_t v26 = v38;
  uint64_t v27 = v39;
  (*(void (**)(void *, void, uint64_t))(v38 + 104))( v9,  enum case for DispatchTimeInterval.seconds(_:),  v39);
  BOOL v28 = static DispatchTimeInterval.< infix(_:_:)((uint64_t)v9, v24);
  uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8);
  v29((uint64_t)v9, v27);
  uint64_t result = v29(v24, v27);
  if (v28)
  {
LABEL_4:
    type metadata accessor for P2PTimer(0LL);
    uint64_t v30 = (uint64_t)v41;
    variable initialization expression of AWDLPeer.lastUpdated();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v30, 0LL, 1LL, v4);
    swift_beginAccess(v16, v45, 33LL, 0LL);
    sub_10022B968(v30, v16);
    swift_endAccess(v45);
    uint64_t v31 = *(void *)(v42 + 408);
    uint64_t v32 = *(void *)(*(void *)(v42 + 416) + 8LL);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v32,  v31,  &protocol requirements base descriptor for P2PControls);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v32,  v31,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
    uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 160);
    uint64_t v36 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
    return v35(v43, v21, v36, AssociatedConformanceWitness);
  }

  return result;
}

uint64_t sub_1002EA3DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 584LL);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_1000226B0(v3, a1, (uint64_t *)&unk_10040FC30);
}

unint64_t sub_1002EA434()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 552LL);
  uint64_t v2 = (unsigned int *)(v0 + *(int *)(sub_100002274(&qword_10040FE40) + 40) + v1);
  return *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v2 + 5) << 40);
}

unint64_t sub_1002EA480()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 560LL);
  uint64_t v2 = (unsigned int *)(v0 + *(int *)(sub_100002274(&qword_10040FE38) + 40) + v1);
  return *v2 | ((unint64_t)*((unsigned __int16 *)v2 + 2) << 32);
}

uint64_t sub_1002EA4C4(uint64_t a1)
{
  uint64_t v5 = a1;
  swift_beginAccess(v1 + *(void *)(*(void *)v1 + 608LL), v4, 33LL, 0LL);
  uint64_t v2 = sub_100002274((uint64_t *)&unk_10040FE88);
  MutableDriverProperty.wrappedValue.setter((uint64_t)&v5, v2);
  return swift_endAccess(v4);
}

uint64_t sub_1002EA528@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100002274(&qword_10040FE50);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v6);
  uint64_t v10 = &v21[-v9 - 8];
  uint64_t v11 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 440LL));
  swift_beginAccess(v11, v21, 32LL, 0LL);
  uint64_t v12 = *v11;
  if (*(void *)(v12 + 16) && (unint64_t v13 = sub_10001C15C(a1 & 0xFFFFFFFFFFFFLL), (v14 & 1) != 0))
  {
    unint64_t v15 = v13;
    uint64_t v16 = *(void *)(v12 + 56);
    uint64_t v17 = type metadata accessor for NANPeer(0LL);
    uint64_t v18 = *(void *)(v17 - 8);
    sub_100057FE8(v16 + *(void *)(v18 + 72) * v15, (uint64_t)v10, type metadata accessor for NANPeer);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v18 + 56))(v10, 0LL, 1LL, v17);
  }

  else
  {
    uint64_t v17 = type metadata accessor for NANPeer(0LL);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v10, 1LL, 1LL, v17);
  }

  sub_1000586C0((uint64_t)v10, (uint64_t)v8, &qword_10040FE50);
  type metadata accessor for NANPeer(0LL);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48LL))(v8, 1LL, v17) == 1)
  {
    sub_10024DB04(a1 & 0xFFFFFFFFFFFFLL, a2);
    sub_1000225EC((uint64_t)v8, &qword_10040FE50);
  }

  else
  {
    sub_100022628((uint64_t)v8, a2, type metadata accessor for NANPeer);
  }

  return swift_endAccess(v21);
}

BOOL sub_1002EA6D4()
{
  return *(void *)(v0 + *(void *)(*(void *)v0 + 496LL)) != 0LL;
}

uint64_t sub_1002EA6EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_100002274(&qword_10040FE50);
  __chkstk_darwin();
  uint64_t v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_100057FE8(a1, (uint64_t)v7, type metadata accessor for NANPeer);
  uint64_t v8 = type metadata accessor for NANPeer(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 0LL, 1LL, v8);
  swift_beginAccess(v3 + *(void *)(*(void *)v3 + 440LL), v11, 33LL, 0LL);
  sub_1002E9368((uint64_t)v7, a2 & 0xFFFFFFFFFFFFLL);
  swift_endAccess(v11);
  sub_1002EC3D8();
  return sub_10005802C(a1, type metadata accessor for NANPeer);
}

uint64_t sub_1002EA7E8(uint64_t a1)
{
  uint64_t v5 = a1;
  swift_beginAccess(v1 + *(void *)(*(void *)v1 + 584LL), v4, 33LL, 0LL);
  uint64_t v2 = sub_100002274((uint64_t *)&unk_10040FC30);
  ObservableWiFiProperty.wrappedValue.setter((char *)&v5, v2);
  return swift_endAccess(v4);
}

uint64_t *sub_1002EA84C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)v4 + 640LL);
  if (*(void *)(v4 + v5))
  {
    uint64_t v6 = *(uint64_t **)(v4 + v5);
  }

  else
  {
    uint64_t v7 = v4;
    type metadata accessor for NANOutOfBoundActionFrameTransmitter( 0LL,  *(void *)(*(void *)v4 + 408LL),  *(void *)(*(void *)v4 + 416LL),  a4);
    uint64_t v8 = swift_retain();
    uint64_t v6 = sub_1002CECE0(v8);
    swift_release(v7);
    uint64_t v9 = *(void *)(v7 + v5);
    *(void *)(v7 + v5) = v6;
    swift_retain();
    swift_release(v9);
  }

  swift_retain();
  return v6;
}

uint64_t sub_1002EA8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 440LL));
  swift_beginAccess(v5, v17, 0LL, 0LL);
  uint64_t v6 = *v5;
  uint64_t v7 = sub_100303870(v6);
  uint64_t v9 = v8;
  uint64_t v10 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v11 = *(unsigned int *)(v6 + 36);
  char v13 = v12 & 1;
  uint64_t v18 = v6;
  uint64_t v19 = v7;
  uint64_t v20 = v8;
  char v21 = v12 & 1;
  uint64_t v22 = v10;
  uint64_t v23 = v11;
  char v24 = 0;
  v15[2] = a1;
  v15[3] = a2;
  uint64_t v16 = v2;
  swift_bridgeObjectRetain(v6);
  sub_1002FFCA0((void (*)(void))sub_1002FBAF8, (uint64_t)v15);
  swift_bridgeObjectRelease(v6);
  return sub_100022588(v7, v9, v13);
}

uint64_t sub_1002EA9AC(char a1)
{
  char v5 = a1 & 1;
  swift_beginAccess(v1 + *(void *)(*(void *)v1 + 520LL), v4, 33LL, 0LL);
  uint64_t v2 = sub_100002274(&qword_10040FE30);
  MutableDriverProperty.wrappedValue.setter((uint64_t)&v5, v2);
  return swift_endAccess(v4);
}

uint64_t sub_1002EAA14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = type metadata accessor for DispatchTime(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin();
  uint64_t v10 = &v17[-v9 - 8];
  uint64_t v11 = v1 + *(void *)(*(void *)v1 + 504LL);
  swift_beginAccess(v11, v17, 0LL, 0LL);
  sub_1000226B0(v11, (uint64_t)v4, &qword_100405D40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
  {
    sub_1000225EC((uint64_t)v4, &qword_100405D40);
    uint64_t v12 = enum case for DispatchTimeInterval.never(_:);
    uint64_t v13 = type metadata accessor for DispatchTimeInterval(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104LL))(a1, v12, v13);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v10, v4, v5);
    type metadata accessor for P2PTimer(0LL);
    variable initialization expression of AWDLPeer.lastUpdated();
    DispatchTime.distance(to:)(v8);
    unint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
    v15(v8, v5);
    return ((uint64_t (*)(char *, uint64_t))v15)(v10, v5);
  }

uint64_t sub_1002EABC0()
{
  uint64_t v1 = type metadata accessor for DispatchTime(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin();
  uint64_t v6 = &v12[-v5 - 8];
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v7 = v0 + *(void *)(*(void *)v0 + 672LL);
  __n128 v8 = swift_beginAccess(v7, v12, 0LL, 0LL);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v2 + 16))(v4, v7, v1, v8);
  DispatchTime.distance(to:)(v6);
  uint64_t v9 = *(void (**)(char *, uint64_t))(v2 + 8);
  v9(v4, v1);
  return ((uint64_t (*)(char *, uint64_t))v9)(v6, v1);
}

uint64_t sub_1002EACC8(uint64_t a1, uint64_t a2)
{
  v6[0] = a1;
  v6[1] = a2;
  swift_beginAccess(v2 + *(void *)(*(void *)v2 + 544LL), v5, 33LL, 0LL);
  uint64_t v3 = sub_100002274(&qword_10040FE48);
  MutableDriverProperty.wrappedValue.setter((uint64_t)v6, v3);
  return swift_endAccess(v5);
}

uint64_t sub_1002EAD2C(uint64_t a1)
{
  uint64_t v5 = a1;
  swift_beginAccess(v1 + *(void *)(*(void *)v1 + 600LL), v4, 33LL, 0LL);
  uint64_t v2 = sub_100002274((uint64_t *)&unk_10040FE88);
  MutableDriverProperty.wrappedValue.setter((uint64_t)&v5, v2);
  return swift_endAccess(v4);
}

uint64_t sub_1002EAD90()
{
  uint64_t v1 = *v0;
  uint64_t v111 = type metadata accessor for Logger(0LL);
  uint64_t v109 = *(void *)(v111 - 8);
  __chkstk_darwin();
  uint64_t v110 = (char *)&v93 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = v1;
  uint64_t v116 = v1;
  uint64_t v4 = *(void *)(v1 + 416);
  uint64_t v5 = *(void *)(v3 + 408);
  uint64_t v6 = *(void *)(v4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v6,  v5,  &protocol requirements base descriptor for P2PControls);
  uint64_t v107 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v108 = (char *)&v93 - v8;
  uint64_t v9 = swift_getAssociatedTypeWitness(255LL, v4, v5, &protocol requirements base descriptor for NANController);
  uint64_t v104 = *(void *)(swift_getAssociatedConformanceWitness( v4,  v5,  v9,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.NANController.InfraController: InfrastructureController)
                   + 8);
  uint64_t v113 = v9;
  uint64_t v112 = swift_getAssociatedTypeWitness(0LL, v104, v9, &protocol requirements base descriptor for P2PControls);
  uint64_t v105 = *(void *)(v112 - 8);
  __chkstk_darwin();
  unint64_t v103 = (char *)&v93 - v10;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v6,  v5,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v12 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v13 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v12,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.PreferencesBacking: PreferencesStorage);
  uint64_t v15 = type metadata accessor for Preferences(0LL, v12, v13, v14);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin();
  uint64_t v18 = (char *)&v93 - v17;
  uint64_t v114 = v6;
  uint64_t v19 = swift_getAssociatedTypeWitness(0LL, v6, v5, &protocol requirements base descriptor for P2PControls);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin();
  uint64_t v22 = (char *)&v93 - v21;
  type metadata accessor for Optional(0LL, v19);
  __chkstk_darwin();
  uint64_t v23 = v117;
  uint64_t v25 = (char *)&v93 - v24;
  uint64_t v26 = *(void *)(v116 + 456);
  uint64_t v27 = *(void *)(v117 + v26);
  if (v27)
  {
    uint64_t v28 = *(void *)(v117 + v26);
    uint64_t v29 = swift_retain_n(v27, 2LL);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v33 = swift_slowAlloc(32LL, -1LL);
      v118[0] = v33;
      *(_DWORD *)uint64_t v32 = 136315138;
      uint64_t v34 = WiFiInterface.description.getter();
      unint64_t v36 = v35;
      uint64_t v119 = sub_10000235C(v34, v35, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120);
      swift_release(v28);
      swift_bridgeObjectRelease(v36);
      _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "Ignoring request to create NAN data interface since it is already present: %s",  v32,  0xCu);
      swift_arrayDestroy(v33, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    else
    {
      swift_release(v28);
    }

    return v28;
  }

  uint64_t v98 = v18;
  uint64_t v99 = v16;
  uint64_t v100 = v15;
  uint64_t v101 = v22;
  uint64_t v102 = v25;
  uint64_t v106 = v20;
  uint64_t v94 = v26;
  uint64_t v116 = v19;
  uint64_t v95 = AssociatedTypeWitness;
  uint64_t v97 = v5;
  uint64_t v37 = v114;
  uint64_t v38 = v117;
  uint64_t v39 = WiFiInterface.linkState.setter(1);
  uint64_t v40 = v23 + *(void *)(*(void *)v23 + 160LL);
  uint64_t v41 = (os_log_s *)Logger.logObject.getter(v39);
  os_log_type_t v42 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v43 = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Creating NAN data interface", v43, 2u);
    swift_slowDealloc(v43, -1LL, -1LL);
  }

  uint64_t v44 = v101;
  (*(void (**)(char *, uint64_t, uint64_t))(v106 + 16))(v101, v38 + *(void *)(*(void *)v38 + 96LL), v116);
  uint64_t v45 = *(void *)(v38 + *(void *)(*(void *)v38 + 688LL));
  swift_unownedRetainStrong(v45);
  uint64_t v46 = (uint64_t *)(v45 + *(void *)(*(void *)v45 + 104LL));
  uint64_t v47 = v46[1];
  uint64_t v96 = *v46;
  uint64_t v48 = v47;
  swift_bridgeObjectRetain(v47);
  swift_release(v45);
  uint64_t v49 = v98;
  WiFiInterface.preferences.getter();
  uint64_t v50 = v100;
  unint64_t v54 = Preferences.nanDataMACAddress.getter(v100, v51, v52, v53);
  (*(void (**)(char *, uint64_t))(v99 + 8))(v49, v50);
  uint64_t v56 = v112;
  uint64_t v55 = v113;
  uint64_t v93 = v40;
  if ((v54 & 0x1000000000000LL) == 0)
  {
    unint64_t v57 = v54 >> 40;
LABEL_14:
    uint64_t v28 = v115;
    uint64_t v63 = v37;
    goto LABEL_17;
  }

  unint64_t v57 = v38 + *(void *)(*(void *)v38 + 464LL);
  if ((*(_BYTE *)(v57 + 6) & 1) == 0)
  {
    LODWORD(v57) = HIBYTE(*(unsigned __int16 *)(v57 + 4));
    goto LABEL_14;
  }

  swift_unownedRetainStrong(v45);
  uint64_t v58 = v105;
  uint64_t v59 = v103;
  (*(void (**)(char *, uint64_t, uint64_t))(v105 + 16))(v103, v45 + *(void *)(*(void *)v45 + 96LL), v56);
  swift_release(v45);
  uint64_t v60 = swift_getAssociatedConformanceWitness( v104,  v55,  v56,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
  uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 64))(v56, v60);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v56);
  uint64_t v28 = v115;
  uint64_t v63 = v37;
  if ((v61 & 0x1000000000000LL) != 0) {
    unint64_t v64 = static WiFiAddress.random()();
  }
  else {
    WiFiAddress.lastOctetIncremented()(v62);
  }
  unint64_t v57 = v64 >> 40;
LABEL_17:
  uint64_t v65 = v97;
  uint64_t v66 = v48;
  uint64_t v67 = v96;
  WiFiAddress.linkLocalAddress()((CoreP2P::WiFiAddress *)((unint64_t)v57 << 40));
  uint64_t v69 = v68;
  uint64_t v70 = v116;
  uint64_t v71 = swift_getAssociatedConformanceWitness( v63,  v65,  v116,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
  uint64_t v72 = v102;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 16))( 3LL,  v67,  v66,  v69 & 0xFFFFFFFFFFFFLL,  v70,  v71);
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v106 + 8))(v44, v70);
    swift_bridgeObjectRelease(v66);
  }

  else
  {
    type metadata accessor for WiFiInterface(0LL, v65, v114, v73);
    uint64_t v75 = v106;
    (*(void (**)(char *, uint64_t))(v106 + 8))(v44, v70);
    __n128 v76 = swift_bridgeObjectRelease(v66);
    (*(void (**)(char *, void, uint64_t, uint64_t, __n128))(v75 + 56))(v72, 0LL, 1LL, v70, v76);
    uint64_t v77 = (uint64_t)v108;
    (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v108, v38 + *(void *)(*(void *)v38 + 112LL), v95);
    uint64_t v78 = (uint64_t)v110;
    (*(void (**)(char *, uint64_t, uint64_t))(v109 + 16))(v110, v93, v111);
    uint64_t v79 = WiFiInterface.__allocating_init(driver:components:logger:)(v72, v77, v78);
    uint64_t v80 = v94;
    uint64_t v81 = *(void *)(v38 + v94);
    *(void *)(v38 + v94) = v79;
    uint64_t v82 = swift_release(v81);
    uint64_t v28 = *(void *)(v38 + v80);
    if (v28)
    {
      uint64_t v83 = *(uint64_t (**)(uint64_t *))(*(void *)v28 + 392LL);
      swift_retain();
      char v84 = (void (*)(uint64_t *, uint64_t))v83(v118);
      type metadata accessor for WiFiInterface.NeighborDiscoveryTable(0LL, v65, v114, v85);
      WiFiInterface.NeighborDiscoveryTable.clearAllPeerPresence()();
      if (v86)
      {
        v84(v118, 1LL);
        swift_release(v28);
      }

      else
      {
        v84(v118, 0LL);
        (*(void (**)(void))(*(void *)v28 + 192LL))(0LL);
      }
    }

    else
    {
      uint64_t v87 = (os_log_s *)Logger.logObject.getter(v82);
      os_log_type_t v88 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v87, v88))
      {
        unint64_t v89 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)unint64_t v89 = 0;
        _os_log_impl((void *)&_mh_execute_header, v87, v88, "Failed to create NAN data interface", v89, 2u);
        swift_slowDealloc(v89, -1LL, -1LL);
      }

      unint64_t v90 = sub_1000033FC();
      uint64_t v91 = swift_allocError(&type metadata for WiFiError, v90, 0LL, 0LL);
      *(_OWORD *)uint64_t v92 = xmmword_100337000;
      *(_BYTE *)(v92 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
      swift_willThrow(v91);
    }
  }

  return v28;
}

uint64_t sub_1002EB704()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)v0;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v73 = v3;
  uint64_t v74 = v4;
  __chkstk_darwin();
  uint64_t v72 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = v2[51];
  uint64_t v7 = *(void *)(v2[52] + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v7,  v6,  &protocol requirements base descriptor for P2PControls);
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v62 - v10;
  uint64_t v12 = swift_getAssociatedTypeWitness(255LL, v7, v6, &protocol requirements base descriptor for P2PControls);
  type metadata accessor for Optional(0LL, v12);
  uint64_t v13 = __chkstk_darwin();
  uint64_t v15 = (char *)&v62 - v14;
  uint64_t v16 = v2[56];
  uint64_t v17 = *(void *)&v1[v16];
  if (v17)
  {
    uint64_t v18 = swift_retain_n(v17, 2LL);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      v76[0] = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      uint64_t v23 = WiFiInterface.description.getter();
      unint64_t v25 = v24;
      uint64_t v77 = sub_10000235C(v23, v24, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
      swift_release(v17);
      swift_bridgeObjectRelease(v25);
      _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "Ignoring request to create NAN companion low latency interface since it is already present: %s",  v21,  0xCu);
      swift_arrayDestroy(v22, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      swift_release(v17);
    }
  }

  else
  {
    uint64_t v67 = v12;
    uint64_t v68 = v15;
    uint64_t v64 = v16;
    uint64_t v69 = v9;
    uint64_t v70 = AssociatedTypeWitness;
    uint64_t v71 = v11;
    uint64_t v63 = &v1[v2[20]];
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v13);
    uint64_t v27 = static os_log_type_t.info.getter();
    uint64_t v28 = v1;
    if (os_log_type_enabled(v26, (os_log_type_t)v27))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  (os_log_type_t)v27,  "Creating companion low latency interface",  v29,  2u);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    uint64_t v30 = (uint64_t *)&v1[*(void *)(*(void *)v1 + 104LL)];
    uint64_t v31 = *v30;
    uint64_t v32 = v30[1];
    uint64_t v33 = WiFiInterface.macAddress.getter();
    uint64_t v65 = v6;
    uint64_t v66 = v7;
    uint64_t v34 = v7;
    uint64_t v35 = v67;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v34,  v6,  v67,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
    uint64_t v37 = v68;
    uint64_t v38 = v75;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))( 4LL,  v31,  v32,  v33 & 0xFFFFFFFFFFFFLL,  v35,  AssociatedConformanceWitness);
    uint64_t v40 = v74;
    uint64_t v41 = v70;
    uint64_t v17 = (uint64_t)v71;
    uint64_t v42 = v69;
    if (!v38)
    {
      type metadata accessor for WiFiInterface(0LL, v65, v66, v39);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL))(v37, 0LL, 1LL, v35);
      (*(void (**)(uint64_t, char *, uint64_t))(v42 + 16))(v17, &v28[*(void *)(*(void *)v28 + 112LL)], v41);
      uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
      uint64_t v45 = (uint64_t)v72;
      v44(v72, v63, v73);
      uint64_t v46 = WiFiInterface.__allocating_init(driver:components:logger:)(v37, v17, v45);
      uint64_t v47 = v64;
      uint64_t v48 = *(void *)&v28[v64];
      *(void *)&v28[v64] = v46;
      uint64_t v49 = swift_release(v48);
      uint64_t v17 = *(void *)&v28[v47];
      if (v17)
      {
        swift_retain();
        sub_1002F4470();
        uint64_t v50 = (void (*)(uint64_t *, uint64_t))(*(uint64_t (**)(uint64_t *))(*(void *)v17 + 392LL))(v76);
        type metadata accessor for WiFiInterface.NeighborDiscoveryTable(0LL, v65, v66, v51);
        WiFiInterface.NeighborDiscoveryTable.clearAllPeerPresence()();
        if (v52)
        {
          v50(v76, 1LL);
          swift_release(v17);
        }

        else
        {
          v50(v76, 0LL);
          if (sub_1002E9E34())
          {
            char v59 = 1;
            unint64_t v60 = 0xE700000000000000LL;
          }

          else
          {
            unint64_t v60 = 0xE800000000000000LL;
            char v59 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x64656C6261736964LL,  0xE800000000000000LL,  0x64656C62616E65LL,  0xE700000000000000LL,  0LL);
          }

          __n128 v61 = swift_bridgeObjectRelease(v60);
          (*(void (**)(void, __n128))(*(void *)v17 + 192LL))(v59 & 1, v61);
        }
      }

      else
      {
        uint64_t v53 = (os_log_s *)Logger.logObject.getter(v49);
        os_log_type_t v54 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v53, v54))
        {
          uint64_t v55 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v55 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v53,  v54,  "Failed to create NAN companion low latency interface",  v55,  2u);
          swift_slowDealloc(v55, -1LL, -1LL);
        }

        unint64_t v56 = sub_1000033FC();
        uint64_t v57 = swift_allocError(&type metadata for WiFiError, v56, 0LL, 0LL);
        *(_OWORD *)uint64_t v58 = xmmword_100337000;
        *(_BYTE *)(v58 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
        swift_willThrow(v57);
      }
    }
  }

  return v17;
}

BOOL sub_1002EBCA0(uint64_t a1)
{
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 440LL));
  swift_beginAccess(v5, v16, 32LL, 0LL);
  uint64_t v6 = *v5;
  if (*(void *)(v6 + 16) && (unint64_t v7 = sub_10001C15C(a1 & 0xFFFFFFFFFFFFLL), (v8 & 1) != 0))
  {
    unint64_t v9 = v7;
    uint64_t v10 = *(void *)(v6 + 56);
    uint64_t v11 = type metadata accessor for NANPeer(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    sub_100057FE8(v10 + *(void *)(v12 + 72) * v9, (uint64_t)v4, type metadata accessor for NANPeer);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v12 + 56))(v4, 0LL, 1LL, v11);
  }

  else
  {
    uint64_t v11 = type metadata accessor for NANPeer(0LL);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v4, 1LL, 1LL, v11);
  }

  swift_endAccess(v16);
  type metadata accessor for NANPeer(0LL);
  BOOL v13 = (*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v4, 1LL, v11) != 1;
  sub_1000225EC((uint64_t)v4, &qword_10040FE50);
  return v13;
}

uint64_t sub_1002EBDF0(unint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v53 = a3;
  uint64_t v54 = a4;
  uint64_t v7 = *v4;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  unint64_t v9 = *(char **)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v55 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v16 = (void *)*v15;
  *uint64_t v14 = *v15;
  (*(void (**)(uint64_t *, void, uint64_t))(v12 + 104))( v14,  enum case for DispatchPredicate.onQueue(_:),  v11);
  id v17 = v16;
  LOBYTE(vswift_unknownObjectWeakDestroy(v0 + 16) = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(uint64_t *, uint64_t))(v12 + 8))(v14, v11);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }

  unint64_t v52 = a1 >> 40;
  uint64_t v56 = v8;
  uint64_t v57 = v9;
  uint64_t v18 = v4;
  uint64_t v19 = swift_allocObject(&unk_1003FAD40, 24LL, 7LL);
  swift_weakInit(v19 + 16, v4);
  uint64_t v20 = swift_allocObject(&unk_1003FAD90, 47LL, 7LL);
  *(void *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v7 + 408);
  *(void *)(v20 + 24) = *(void *)(v7 + 416);
  *(void *)(v20 + 32) = v19;
  *(_WORD *)(v20 + 40) = a1;
  *(_BYTE *)(v20 + 42) = BYTE2(a1);
  *(_BYTE *)(v20 + 43) = BYTE3(a1);
  *(_BYTE *)(v20 + 44) = BYTE4(a1);
  *(_BYTE *)(v20 + 45) = v52;
  *(_BYTE *)(v20 + 46) = a2;
  LOBYTE(v7) = a2;
  uint64_t updated = type metadata accessor for WiFiPropertyUpdateRegistration(0LL);
  swift_allocObject(updated, *(unsigned int *)(updated + 48), *(unsigned __int16 *)(updated + 52));
  unint64_t v52 = WiFiPropertyUpdateRegistration.init(cancellationHandler:)((uint64_t)sub_1002FB44C, v20);
  unint64_t v9 = v55;
  (*((void (**)(char *, unint64_t, uint64_t))v57 + 2))( v55,  v52 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id,  v56);
  uint64_t v22 = swift_allocObject(&unk_1003FADB8, 32LL, 7LL);
  uint64_t v23 = v54;
  *(void *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = v53;
  *(void *)(v22 + 24) = v23;
  uint64_t v53 = v22;
  uint64_t v14 = (void *)((char *)v18 + *(void *)(*v18 + 432LL));
  swift_beginAccess(v14, v59, 33LL, 0LL);
  swift_retain();
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v14);
  uint64_t v58 = (void *)*v14;
  unint64_t v25 = v58;
  *uint64_t v14 = 0x8000000000000000LL;
  a1 &= 0xFFFFFFFFFFFFuLL;
  uint64_t v8 = sub_10001C15C(a1);
  uint64_t v27 = v25[2];
  BOOL v28 = (v26 & 1) == 0;
  uint64_t v29 = v27 + v28;
  if (__OFADD__(v27, v28))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  a2 = v26;
  if (v25[3] >= v29)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_21;
    }
  }

  else
  {
    sub_10023F748(v29, isUniquelyReferenced_nonNull_native);
    unint64_t v25 = v58;
    unint64_t v30 = sub_10001C15C(a1);
    if ((a2 & 1) != (v31 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for WiFiAddress);
      __break(1u);
      goto LABEL_23;
    }

    uint64_t v8 = v30;
  }

  while (1)
  {
    uint64_t v32 = *v14;
    *uint64_t v14 = (uint64_t)v25;
    swift_bridgeObjectRelease(v32);
    uint64_t v33 = *v14;
    if ((a2 & 1) == 0) {
      sub_100244B78(v8, a1, (uint64_t)&_swiftEmptyDictionarySingleton, (void *)*v14);
    }
    uint64_t v14 = *(uint64_t **)(v33 + 56);
    v8 *= 8LL;
    uint64_t v34 = swift_isUniquelyReferenced_nonNull_native(*(uint64_t *)((char *)v14 + v8));
    uint64_t v58 = *(void **)((char *)v14 + v8);
    uint64_t v35 = v58;
    *(uint64_t *)((char *)v14 + v8) = 0x8000000000000000LL;
    a1 = sub_100327790(v7);
    uint64_t v37 = v35[2];
    BOOL v38 = (v36 & 1) == 0;
    uint64_t v39 = v37 + v38;
    if (!__OFADD__(v37, v38)) {
      break;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    sub_100329F28();
    unint64_t v25 = v58;
  }

  char v40 = v36;
  if (v35[3] >= v39)
  {
    char v43 = v7;
    if ((v34 & 1) == 0)
    {
      sub_100329D88();
      uint64_t v35 = v58;
    }

    goto LABEL_15;
  }

  sub_10023F470(v39, v34);
  uint64_t v35 = v58;
  unint64_t v41 = sub_100327790(v7);
  if ((v40 & 1) != (v42 & 1))
  {
LABEL_23:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for NANAttribute.AttributeType);
    __break(1u);
    return result;
  }

  a1 = v41;
  char v43 = v7;
LABEL_15:
  uint64_t v44 = (uint64_t)v9;
  uint64_t v45 = *(uint64_t *)((char *)v14 + v8);
  *(uint64_t *)((char *)v14 + v8) = (uint64_t)v35;
  swift_bridgeObjectRelease(v45);
  uint64_t v46 = *(void **)((char *)v14 + v8);
  swift_bridgeObjectRetain(v46);
  if ((v40 & 1) == 0)
  {
    unint64_t v47 = sub_10022EF7C((uint64_t)_swiftEmptyArrayStorage);
    sub_100244B34(a1, v43, v47, v46);
  }

  uint64_t v48 = v46[7];
  swift_bridgeObjectRelease(v46);
  char v49 = swift_isUniquelyReferenced_nonNull_native(*(void *)(v48 + 8 * a1));
  uint64_t v58 = *(void **)(v48 + 8 * a1);
  *(void *)(v48 + 8 * asub_100058090(v4, v0 + 1) = 0x8000000000000000LL;
  sub_100243DC0((uint64_t)sub_1002FB468, v53, v44, v49);
  uint64_t v50 = *(void *)(v48 + 8 * a1);
  *(void *)(v48 + 8 * asub_100058090(v4, v0 + 1) = v58;
  swift_bridgeObjectRelease(v50);
  (*((void (**)(uint64_t, uint64_t))v57 + 1))(v44, v56);
  swift_endAccess(v59);
  return v52;
}

uint64_t sub_1002EC268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002ECFE0(a1, a2, a3);
}

uint64_t sub_1002EC2B8()
{
  return sub_1002EA9AC(0);
}

unint64_t sub_1002EC2C0()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 528LL);
  swift_beginAccess(v1, v4, 0LL, 0LL);
  uint64_t v2 = sub_100002274((uint64_t *)&unk_10040FE60);
  return *(unsigned __int16 *)(v1 + *(int *)(v2 + 40)) | ((unint64_t)*(unsigned int *)(v1 + *(int *)(v2 + 40) + 2) << 16);
}

uint64_t sub_1002EC320()
{
  uint64_t v1 = sub_100002274((uint64_t *)&unk_10040FC30);
  __chkstk_darwin();
  uint64_t v3 = &v7[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v4 = v0 + *(void *)(*(void *)v0 + 584LL);
  swift_beginAccess(v4, v7, 0LL, 0LL);
  sub_1000226B0(v4, (uint64_t)v3, (uint64_t *)&unk_10040FC30);
  ObservableWiFiProperty.wrappedValue.getter(v1, (uint64_t)&v6);
  sub_1000225EC((uint64_t)v3, (uint64_t *)&unk_10040FC30);
  return v6;
}

uint64_t sub_1002EC3D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)*v0;
  uint64_t v3 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (uint64_t *)((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v8 = (uint64_t *)((char *)&v24 - v7);
  __chkstk_darwin();
  uint64_t v10 = (uint64_t *)((char *)&v24 - v9);
  uint64_t v11 = (char *)v1 + v2[55];
  __n128 v12 = swift_beginAccess(v11, v27, 0LL, 0LL);
  uint64_t v13 = *(void *)(*(void *)v11 + 16LL);
  uint64_t v14 = *(void *)(*v1 + 424LL);
  uint64_t v15 = *(void *)((char *)v1 + v14);
  if (v13)
  {
    uint64_t v16 = *(void *)((char *)v1 + v14);
    uint64_t v17 = v16;
    if (!v15)
    {
      void *v10 = 5LL;
      uint64_t v18 = enum case for DispatchTimeInterval.seconds(_:);
      uint64_t v19 = *(void (**)(void *, void, uint64_t, __n128))(v4 + 104);
      v19(v10, enum case for DispatchTimeInterval.seconds(_:), v3, v12);
      unint64_t v25 = (void (*)(void *, void, uint64_t))v19;
      id v26 = (id)*OS_dispatch_queue.nan.unsafeMutableAddressor();
      *uint64_t v8 = 5LL;
      ((void (*)(void *, uint64_t, uint64_t))v19)(v8, v18, v3);
      uint64_t v20 = swift_allocObject(&unk_1003FAD40, 24LL, 7LL);
      swift_weakInit(v20 + 16, v1);
      uint64_t v21 = (void *)swift_allocObject(&unk_1003FAD68, 40LL, 7LL);
      v21[2] = v2[51];
      v21[3] = v2[52];
      void v21[4] = v20;
      *uint64_t v6 = 100LL;
      v25(v6, enum case for DispatchTimeInterval.milliseconds(_:), v3);
      uint64_t v22 = type metadata accessor for P2PTimer(0LL);
      swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
      uint64_t v17 = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)( (uint64_t)v10,  v26,  (uint64_t)v8,  (uint64_t)v6,  (uint64_t)sub_1002FB3E0,  (uint64_t)v21);
      uint64_t v16 = *(void *)((char *)v1 + v14);
    }

    *(void *)((char *)v1 + v14) = v17;
    swift_retain();
    uint64_t v15 = v16;
  }

  else
  {
    *(void *)((char *)v1 + v14) = 0LL;
  }

  return swift_release(v15);
}

uint64_t sub_1002EC5F8(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    uint64_t v3 = result;
    sub_1002EC64C();
    return swift_release(v3);
  }

  return result;
}

uint64_t sub_1002EC64C()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (uint64_t *)&v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v7 = (void *)*v6;
  *uint64_t v5 = *v6;
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v5);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if ((v7 & 1) != 0)
  {
    uint64_t v10 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 440LL));
    swift_beginAccess(v10, v19, 0LL, 0LL);
    uint64_t v11 = *v10;
    __chkstk_darwin();
    *((_OWORD *)&v17 - 2) = *(_OWORD *)(v1 + 408);
    *(&v17 - 2) = v1;
    swift_bridgeObjectRetain(v11);
    uint64_t v12 = sub_1002F8E84( (uint64_t)sub_1002FB3EC,  (uint64_t)(&v17 - 6),  v11,  (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t, uint64_t))sub_1002F9208);
    swift_bridgeObjectRelease(v11);
    sub_1002EC7FC(v12);
    uint64_t v13 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 432LL));
    swift_beginAccess(v13, v18, 1LL, 0LL);
    uint64_t v14 = *v13;
    swift_bridgeObjectRetain(*v13);
    uint64_t v15 = sub_1002F8E84( (uint64_t)sub_1002FB40C,  v0,  v14,  (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t, uint64_t))sub_1002F9000);
    swift_bridgeObjectRelease(v14);
    uint64_t v16 = *v13;
    *uint64_t v13 = v15;
    return swift_bridgeObjectRelease(v16);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1002EC7FC(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 440LL));
  swift_beginAccess(v3, v7, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  uint64_t v5 = swift_bridgeObjectRelease(v4);
  return sub_1002EC3D8(v5);
}

uint64_t sub_1002EC858@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 520LL);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_1000226B0(v3, a1, &qword_10040FE30);
}

uint64_t sub_1002EC8B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 528LL);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_1000226B0(v3, a1, (uint64_t *)&unk_10040FE60);
}

uint64_t sub_1002EC908(uint64_t a1)
{
  uint64_t v4 = &v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_1000226B0(a1, (uint64_t)v4, (uint64_t *)&unk_10040FE60);
  uint64_t v5 = v1 + *(void *)(*(void *)v1 + 528LL);
  swift_beginAccess(v5, v8, 33LL, 0LL);
  sub_1000225EC(v5, (uint64_t *)&unk_10040FE60);
  sub_1000586C0((uint64_t)v4, v5, (uint64_t *)&unk_10040FE60);
  swift_endAccess(v8);
  return sub_1000225EC(a1, (uint64_t *)&unk_10040FE60);
}

uint64_t sub_1002EC9D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 544LL);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_1000226B0(v3, a1, &qword_10040FE48);
}

uint64_t sub_1002ECA28(uint64_t a1, uint64_t a2)
{
  __int16 v6 = a1;
  char v7 = BYTE2(a1);
  char v8 = BYTE3(a1);
  char v9 = BYTE4(a1);
  char v10 = BYTE5(a1);
  char v11 = BYTE6(a1);
  uint64_t v12 = a2;
  swift_beginAccess(v2 + *(void *)(*(void *)v2 + 576LL), v5, 33LL, 0LL);
  uint64_t v3 = sub_100002274(&qword_10040FE58);
  MutableDriverProperty.wrappedValue.setter((uint64_t)&v6, v3);
  return swift_endAccess(v5);
}

uint64_t sub_1002ECAC0(uint64_t result)
{
  uint64_t v2 = v1;
  int v3 = result;
  uint64_t v4 = *(void *)(*(void *)v1 + 616LL);
  int v5 = *(unsigned __int8 *)(v1 + v4);
  if (v5 == 5)
  {
  }

  else if (result != 5)
  {
    switch(v5)
    {
      case 2:
        break;
      case 3:
        break;
      case 4:
        break;
      default:
        break;
    }
  }

  uint64_t v6 = swift_retain_n(v1, 2LL);
  char v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = 1701736302LL;
    uint64_t v10 = swift_slowAlloc(22LL, -1LL);
    uint64_t v11 = swift_slowAlloc(64LL, -1LL);
    uint64_t v35 = v11;
    *(_DWORD *)uint64_t v10 = 136315394;
    int v12 = *(unsigned __int8 *)(v1 + v4);
    if (v12 == 5)
    {
      unint64_t v13 = 0xE400000000000000LL;
      uint64_t v14 = 1701736302LL;
    }

    else
    {
      uint64_t v33 = 0LL;
      unint64_t v34 = 0xE000000000000000LL;
      switch(v12)
      {
        case 2:
          unint64_t v16 = 0x6974616D6F747541LL;
          unint64_t v15 = 0xE900000000000063LL;
          break;
        case 3:
          unint64_t v16 = 0x4D20726F68636E41LL;
          unint64_t v15 = 0xED00007265747361LL;
          break;
        case 4:
          unint64_t v15 = 0xE600000000000000LL;
          unint64_t v16 = 0x72657473614DLL;
          break;
        default:
          if ((v12 & 1) != 0) {
            unint64_t v16 = 0x7473614D206E6F4ELL;
          }
          else {
            unint64_t v16 = 0xD000000000000013LL;
          }
          if ((v12 & 1) != 0) {
            unint64_t v15 = 0xEF636E7953207265LL;
          }
          else {
            unint64_t v15 = 0x80000001003645E0LL;
          }
          break;
      }

      unint64_t v17 = v15;
      String.append(_:)(*(Swift::String *)&v16);
      swift_bridgeObjectRelease(v15);
      uint64_t v14 = v33;
      unint64_t v13 = v34;
    }

    uint64_t v33 = sub_10000235C(v14, v13, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);
    swift_release_n(v2, 2LL);
    swift_bridgeObjectRelease(v13);
    *(_WORD *)(v10 + 12) = 2080;
    if (v3 == 5)
    {
      unint64_t v18 = 0xE400000000000000LL;
    }

    else
    {
      uint64_t v33 = 0LL;
      unint64_t v34 = 0xE000000000000000LL;
      uint64_t v19 = 0x4D20726F68636E41LL;
      unint64_t v20 = 0xED00007265747361LL;
      unint64_t v21 = 0xE600000000000000LL;
      uint64_t v22 = 0x72657473614DLL;
      unint64_t v23 = 0x7473614D206E6F4ELL;
      if ((v3 & 1) == 0) {
        unint64_t v23 = 0xD000000000000013LL;
      }
      unint64_t v24 = 0x80000001003645E0LL;
      if ((v3 & 1) != 0) {
        unint64_t v24 = 0xEF636E7953207265LL;
      }
      if (v3 != 4)
      {
        uint64_t v22 = v23;
        unint64_t v21 = v24;
      }

      if (v3 != 3)
      {
        uint64_t v19 = v22;
        unint64_t v20 = v21;
      }

      if (v3 == 2) {
        uint64_t v25 = 0x6974616D6F747541LL;
      }
      else {
        uint64_t v25 = v19;
      }
      if (v3 == 2) {
        unint64_t v26 = 0xE900000000000063LL;
      }
      else {
        unint64_t v26 = v20;
      }
      unint64_t v27 = v26;
      String.append(_:)(*(Swift::String *)&v25);
      swift_bridgeObjectRelease(v26);
      uint64_t v9 = v33;
      unint64_t v18 = v34;
    }

    uint64_t v33 = sub_10000235C(v9, v18, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Updated device role to %s (from %s)", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2LL, &type metadata for Any[8]);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v1, 2LL);
  }

  uint64_t v32 = sub_1002E8D68(v28, v29, v30, v31);
  sub_10027F278();
  return swift_release(v32);
}

uint64_t sub_1002ECECC()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v2 = *v0;
  sub_100002274((uint64_t *)&unk_10040FED0);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = v2[81];
  if (*(void *)(v1 + v5))
  {
    uint64_t v6 = *(void *)(v1 + v5);
  }

  else
  {
    type metadata accessor for LocaleManager(0LL, v2[51], (uint64_t)v2, *(void *)(v2[52] + 8));
    uint64_t v7 = *(void *)(v1 + v2[86]);
    swift_unownedRetainStrong(v7);
    sub_1002CFDC8((uint64_t)v4);
    swift_retain();
    swift_release(v7);
    id v8 = (id)*OS_dispatch_queue.nan.unsafeMutableAddressor();
    sub_1002FD138(v1);
    uint64_t v6 = v9;
    swift_release(v1);

    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v6;
    swift_retain();
    swift_release(v10);
  }

  swift_retain();
  return v6;
}

uint64_t sub_1002ECFE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v102 = a3;
  uint64_t v99 = a2;
  uint64_t v101 = a1;
  uint64_t v5 = (void *)*v3;
  sub_100002274(&qword_10040D440);
  __chkstk_darwin();
  v61[1] = (char *)v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = v5[51];
  uint64_t v107 = v5[52];
  uint64_t v8 = *(void *)(v107 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v8,  v7,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v8,  v7,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v11 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v12 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v11,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.PreferencesBacking: PreferencesStorage);
  uint64_t v62 = type metadata accessor for Preferences(0LL, v11, v12, v13);
  v61[4] = *(void *)(v62 - 8);
  __chkstk_darwin();
  v61[3] = (char *)v61 - v14;
  uint64_t v98 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  uint64_t v97 = *(void *)(v98 - 8);
  __chkstk_darwin();
  uint64_t v93 = (char *)v61 - v15;
  sub_100002274((uint64_t *)&unk_10040FE88);
  __chkstk_darwin();
  uint64_t v92 = (char *)v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v61[0] = sub_100002274(qword_10040E570);
  __chkstk_darwin();
  unint64_t v90 = (char *)v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_10040FC30);
  __chkstk_darwin();
  unint64_t v89 = (char *)v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_10040FE58);
  __chkstk_darwin();
  os_log_type_t v88 = (char *)v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_10040FE38);
  __chkstk_darwin();
  uint64_t v85 = (char *)v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_10040FE40);
  __chkstk_darwin();
  char v84 = (char *)v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_10040FE98);
  __chkstk_darwin();
  uint64_t v83 = (char *)v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_10040FE48);
  __chkstk_darwin();
  uint64_t v82 = (char *)v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_10040FEA0);
  __chkstk_darwin();
  uint64_t v104 = (char *)v61 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_10040FE60);
  __chkstk_darwin();
  uint64_t v81 = (char *)v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  void v61[2] = sub_100002274(&qword_10040FE30);
  __chkstk_darwin();
  uint64_t v80 = (char *)v61 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v109 = type metadata accessor for Logger(0LL);
  uint64_t v100 = *(void *)(v109 - 8);
  __chkstk_darwin();
  uint64_t v65 = (char *)v61 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v106 = (char *)v61 - v28;
  __chkstk_darwin();
  unint64_t v103 = (char *)v61 - v29;
  uint64_t v64 = v30;
  __chkstk_darwin();
  uint64_t v113 = (char *)v61 - v31;
  uint64_t v94 = v8;
  uint64_t v112 = v7;
  uint64_t v32 = swift_getAssociatedTypeWitness(255LL, v8, v7, &protocol requirements base descriptor for P2PControls);
  uint64_t v33 = type metadata accessor for Optional(0LL, v32);
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin();
  uint64_t v91 = (char *)v61 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v37 = (char *)v61 - v36;
  uint64_t v38 = *(void *)(v32 - 8);
  __chkstk_darwin();
  uint64_t v63 = (char *)v61 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v87 = (char *)v61 - v40;
  uint64_t v86 = v41;
  __chkstk_darwin();
  uint64_t v110 = (char *)v61 - v42;
  uint64_t v111 = v5;
  uint64_t v75 = v5[53];
  *(void *)((char *)v4 + v75) = 0LL;
  uint64_t v77 = *(void *)(*v4 + 432LL);
  *(void *)((char *)v4 + v77) = _swiftEmptyDictionarySingleton;
  uint64_t v79 = *(void (**)(char *, char *, uint64_t))(*v4 + 440LL);
  *(void *)((char *)v79 + (void)v4) = _swiftEmptyDictionarySingleton;
  uint64_t v95 = *(void *)(*v4 + 448LL);
  *(void *)((char *)v4 + v95) = 0LL;
  uint64_t v105 = *(void *)(*v4 + 456LL);
  *(void *)((char *)v4 + v105) = 0LL;
  char v43 = (char *)v4 + *(void *)(*v4 + 464LL);
  *((_WORD *)v43 + 2) = 0;
  *(_DWORD *)char v43 = 0;
  v43[6] = 1;
  uint64_t v76 = *(void *)(*v4 + 472LL);
  *(void *)((char *)v4 + v76) = 0LL;
  uint64_t v44 = *(void *)(*v4 + 480LL);
  id v45 = objc_allocWithZone(&OBJC_CLASS___WRM_UCMInterface);
  swift_retain();
  id v46 = [v45 init];
  uint64_t v78 = v44;
  *(void *)((char *)v4 + v44) = v46;
  uint64_t v72 = *(void *)(*v4 + 488LL);
  *(void *)((char *)v4 + v72) = 0LL;
  uint64_t v73 = *(void *)(*v4 + 496LL);
  *(void *)((char *)v4 + v73) = 0LL;
  uint64_t v47 = (uint64_t)v4 + *(void *)(*v4 + 504LL);
  uint64_t v48 = type metadata accessor for DispatchTime(0LL);
  uint64_t v108 = *(void *)(v48 - 8);
  char v49 = *(void (**)(void))(v108 + 56);
  uint64_t v74 = v47;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v49)(v47, 1LL, 1LL, v48);
  uint64_t v71 = (uint64_t)v4 + *(void *)(*v4 + 512LL);
  v49();
  *((_BYTE *)v4 + *(void *)(*v4 + 616LL)) = 5;
  uint64_t v50 = (char *)v4 + *(void *)(*v4 + 624LL);
  *(void *)uint64_t v50 = 0LL;
  v50[8] = 1;
  uint64_t v67 = *(void *)(*v4 + 632LL);
  *(void *)((char *)v4 + v67) = 0LL;
  uint64_t v68 = *(void *)(*v4 + 640LL);
  *(void *)((char *)v4 + v68) = 0LL;
  uint64_t v69 = *(void *)(*v4 + 648LL);
  *(void *)((char *)v4 + v69) = 0LL;
  uint64_t v51 = (uint64_t)v4 + *(void *)(*v4 + 656LL);
  uint64_t v52 = NANDriverCapabilities.defaultCapabilities.unsafeMutableAddressor();
  uint64_t v70 = v51;
  sub_100057FE8(v52, v51, type metadata accessor for NANDriverCapabilities);
  *((_BYTE *)v4 + *(void *)(*v4 + 664LL)) = 0;
  uint64_t v53 = (char *)v4 + *(void *)(*v4 + 672LL);
  type metadata accessor for P2PTimer(0LL);
  uint64_t v66 = v53;
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v54 = (char *)v4 + *(void *)(*v4 + 680LL);
  *(void *)uint64_t v54 = 0LL;
  *((void *)v54 + sub_100058090(v4, v0 + 1) = 0LL;
  v54[16] = 0;
  uint64_t v55 = v101;
  (*(void (**)(char *))(v34 + 16))(v37);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v37, 1LL, v32) != 1)
  {
    uint64_t v75 = v34;
    uint64_t v76 = v33;
    uint64_t v96 = v38;
    uint64_t v79 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
    v79(v110, v37, v32);
    uint64_t v57 = swift_getAssociatedConformanceWitness( v94,  v112,  v32,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
    uint64_t v108 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 40))(v32, v57);
    uint64_t v58 = *(unsigned __int8 (**)(uint64_t, uint64_t))(v57 + 32);
    uint64_t v74 = v57;
    char v59 = (char *)&loc_1002EDADC + 4 * byte_100360048[v58(v32, v57)];
    __asm { BR              X10 }
  }

  swift_release(v4);
  (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v99, v98);
  uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
  v56(v55, v33);
  swift_release(v102);
  v56((uint64_t)v37, v33);
  swift_release(*(void *)((char *)v4 + v75));
  swift_bridgeObjectRelease(*(void *)((char *)v4 + v77));
  swift_bridgeObjectRelease(*(void *)((char *)v79 + (void)v4));
  swift_release(*(void *)((char *)v4 + v95));
  swift_release(*(void *)((char *)v4 + v105));
  swift_unknownObjectRelease(*(void *)((char *)v4 + v76));

  swift_release(*(void *)((char *)v4 + v73));
  sub_1000225EC(v74, &qword_100405D40);
  sub_1000225EC(v71, &qword_100405D40);
  swift_release(*(void *)((char *)v4 + v67));
  swift_release(*(void *)((char *)v4 + v68));
  swift_release(*(void *)((char *)v4 + v69));
  sub_10005802C(v70, type metadata accessor for NANDriverCapabilities);
  (*(void (**)(char *, uint64_t))(v108 + 8))(v66, v48);
  swift_bridgeObjectRelease(*((void *)v54 + 1));
  swift_deallocPartialClassInstance(v4, v111, *(unsigned int *)(*v4 + 48LL), *(unsigned __int16 *)(*v4 + 52LL));
  return 0LL;
}

uint64_t (*sub_1002EFB34(uint64_t a1, uint64_t a2, uint64_t a3))(char a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a3 + 8),  a2,  &protocol requirements base descriptor for P2PControls);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v10 = (char *)&v15 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v15 - v9, a1, AssociatedTypeWitness);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_1003FB2B8, v12 + v8, v11 | 7);
  *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + v12, v10, AssociatedTypeWitness);
  return sub_1002FBE80;
}

uint64_t sub_1002EFC20(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1 & 1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(a4 + 8),  a3,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a4,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 64);
  uint64_t v10 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  return v9(v6, v10, AssociatedConformanceWitness);
}

uint64_t (*sub_1002EFCD0(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a3 + 8),  a2,  &protocol requirements base descriptor for P2PControls);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v10 = (char *)&v15 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v15 - v9, a1, AssociatedTypeWitness);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_1003FB290, v12 + v8, v11 | 7);
  *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + v12, v10, AssociatedTypeWitness);
  return sub_1002FBD68;
}

uint64_t sub_1002EFDBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(a4 + 8),  a3,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a4,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
  uint64_t v10 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  return v9(a1 & 0xFFFFFFFFFFFFLL, v10, AssociatedConformanceWitness);
}

uint64_t (*sub_1002EFE6C(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a3 + 8),  a2,  &protocol requirements base descriptor for P2PControls);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v10 = (char *)&v15 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v15 - v9, a1, AssociatedTypeWitness);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_1003FB268, v12 + v8, v11 | 7);
  *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + v12, v10, AssociatedTypeWitness);
  return sub_1002FBD48;
}

uint64_t sub_1002EFF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(a4 + 8),  a3,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a4,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 96);
  uint64_t v10 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  return v9(a1, v10, AssociatedConformanceWitness);
}

uint64_t (*sub_1002F0008(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a3 + 8),  a2,  &protocol requirements base descriptor for P2PControls);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v10 = (char *)&v15 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v15 - v9, a1, AssociatedTypeWitness);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_1003FB240, v12 + v8, v11 | 7);
  *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + v12, v10, AssociatedTypeWitness);
  return sub_1002FBCC0;
}

uint64_t sub_1002F00F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(a5 + 8),  a4,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a5,  a4,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 304);
  uint64_t v12 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  return v11(a1, a2, v12, AssociatedConformanceWitness);
}

uint64_t sub_1002F01B0(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  if (!v1) {
    return 1701736302LL;
  }
  uint64_t v2 = *a1;
  v5[0] = 0LL;
  v5[1] = 0xE000000000000000LL;
  v4[0] = v2;
  v4[1] = v1;
  _print_unlocked<A, B>(_:_:)( v4,  v5,  &type metadata for NANDiscoveryBeaconTransmissionSchedule,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  return v5[0];
}

uint64_t (*sub_1002F0218(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a3 + 8),  a2,  &protocol requirements base descriptor for P2PControls);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v10 = (char *)&v15 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v15 - v9, a1, AssociatedTypeWitness);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_1003FB218, v12 + v8, v11 | 7);
  *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + v12, v10, AssociatedTypeWitness);
  return sub_1002FBCA0;
}

uint64_t sub_1002F0304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(a4 + 8),  a3,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a4,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 112);
  uint64_t v10 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  return v9(a1, v10, AssociatedConformanceWitness);
}

uint64_t (*sub_1002F03B4(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a3 + 8),  a2,  &protocol requirements base descriptor for P2PControls);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v10 = (char *)&v15 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v15 - v9, a1, AssociatedTypeWitness);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_1003FB1F0, v12 + v8, v11 | 7);
  *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + v12, v10, AssociatedTypeWitness);
  return sub_1002FBC80;
}

uint64_t sub_1002F04A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(a4 + 8),  a3,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a4,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 128);
  uint64_t v10 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  return v9(a1 & 0xFFFFFFFFFFFFLL, v10, AssociatedConformanceWitness);
}

uint64_t (*sub_1002F0550(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a3 + 8),  a2,  &protocol requirements base descriptor for P2PControls);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v10 = (char *)&v15 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v15 - v9, a1, AssociatedTypeWitness);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_1003FB1C8, v12 + v8, v11 | 7);
  *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + v12, v10, AssociatedTypeWitness);
  return sub_1002FBC60;
}

uint64_t sub_1002F063C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(a4 + 8),  a3,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a4,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 144);
  uint64_t v10 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  return v9(a1 & 0xFFFFFFFFFFFFLL, v10, AssociatedConformanceWitness);
}

uint64_t sub_1002F06EC(unsigned int *a1)
{
  unint64_t v1 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
  if ((v1 & 0xFF00000000LL) == 0x300000000LL) {
    return 48LL;
  }
  else {
    return Channel.description.getter(v1);
  }
}

uint64_t (*sub_1002F072C(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a3 + 8),  a2,  &protocol requirements base descriptor for P2PControls);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v10 = (char *)&v15 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v15 - v9, a1, AssociatedTypeWitness);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_1003FB1A0, v12 + v8, v11 | 7);
  *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + v12, v10, AssociatedTypeWitness);
  return sub_1002FBBD8;
}

uint64_t sub_1002F0818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(a5 + 8),  a4,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a5,  a4,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 296);
  uint64_t v12 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  return v11(a1 & 0xFFFFFFFFFFFFFFLL, a2, v12, AssociatedConformanceWitness);
}

uint64_t sub_1002F08D4(void *a1)
{
  uint64_t v1 = *a1;
  if (!*(void *)(*a1 + 16LL)) {
    return 1701736302LL;
  }
  uint64_t v2 = swift_bridgeObjectRetain(*a1);
  uint64_t v3 = sub_1002E9628(v2);
  swift_bridgeObjectRelease(v1);
  uint64_t v4 = sub_100002274((uint64_t *)&unk_100410510);
  uint64_t v5 = sub_1000572E4(&qword_10040FEE0, (uint64_t *)&unk_100410510, (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v6 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v4, v5);
  swift_bridgeObjectRelease(v3);
  return v6;
}

uint64_t sub_1002F0998(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  uint64_t v8 = swift_bridgeObjectRetain(*a1);
  uint64_t v16 = sub_10026D95C(v8);
  sub_1002FA578((uint64_t *)&v16);
  if (v4)
  {
    uint64_t result = swift_release(v16);
    __break(1u);
  }

  else
  {
    swift_bridgeObjectRelease(v7);
    uint64_t v9 = (uint64_t)v16;
    swift_bridgeObjectRetain(v7);
    unint64_t v10 = sub_1002FB218(v9, v7);
    swift_release(v9);
    swift_bridgeObjectRelease(v7);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(a4 + 8),  a3,  &protocol requirements base descriptor for P2PControls);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a4,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
    uint64_t v13 = *(void (**)(unint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 168);
    uint64_t v14 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
    v13(v10, v14, AssociatedConformanceWitness);
    return swift_bridgeObjectRelease(v10);
  }

  return result;
}

uint64_t sub_1002F0AD0(void *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = swift_bridgeObjectRetain(*a1);
  uint64_t v3 = sub_1002E98B0(v2);
  swift_bridgeObjectRelease(v1);
  uint64_t v4 = sub_100002274((uint64_t *)&unk_100410510);
  uint64_t v5 = sub_1000572E4(&qword_10040FEE0, (uint64_t *)&unk_100410510, (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v6 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v4, v5);
  uint64_t v8 = v7;
  swift_bridgeObjectRelease(v3);
  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  v10._countAndFlagsBits = 93LL;
  v10._object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  return 91LL;
}

uint64_t (*sub_1002F0BAC(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a3 + 8),  a2,  &protocol requirements base descriptor for P2PControls);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  Swift::String v10 = (char *)&v15 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v15 - v9, a1, AssociatedTypeWitness);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_1003FB178, v12 + v8, v11 | 7);
  *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + v12, v10, AssociatedTypeWitness);
  return sub_1002FBB38;
}

uint64_t sub_1002F0C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(a4 + 8),  a3,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a4,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 288);
  uint64_t v10 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  return v9(a1, v10, AssociatedConformanceWitness);
}

uint64_t (*sub_1002F0D48(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a3 + 8),  a2,  &protocol requirements base descriptor for P2PControls);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v10 = (char *)&v15 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v15 - v9, a1, AssociatedTypeWitness);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_1003FB150, v12 + v8, v11 | 7);
  *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + v12, v10, AssociatedTypeWitness);
  return sub_1002FBB18;
}

uint64_t sub_1002F0E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(a4 + 8),  a3,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a4,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 280);
  uint64_t v10 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  return v9(a1, v10, AssociatedConformanceWitness);
}

void sub_1002F0EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (uint64_t *)((char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v11 = (void *)*v10;
  *uint64_t v9 = *v10;
  (*(void (**)(uint64_t *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = v11;
  LOBYTE(v1sub_100058090(v4, v0 + 1) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
  if ((v11 & 1) != 0)
  {
    uint64_t v13 = a2 + 16;
    swift_beginAccess(v13, v27, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v13);
    if (Strong)
    {
      uint64_t v15 = Strong;
      sub_1002F1154(a1);
      swift_release(v15);
    }

    else
    {
      uint64_t v16 = sub_100057FE8(a1, (uint64_t)v5, type metadata accessor for DriverEvent);
      uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v20 = swift_slowAlloc(32LL, -1LL);
        uint64_t v26 = v20;
        *(_DWORD *)uint64_t v19 = 136315138;
        DriverEvent.shortDescription.getter();
        unint64_t v22 = v21;
        uint64_t v25 = sub_10000235C(v23, v21, &v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
        swift_bridgeObjectRelease(v22);
        sub_10005802C((uint64_t)v5, type metadata accessor for DriverEvent);
        _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Failed to dispatch event %s because the NANInterface was deallocated before the event was received from the driver",  v19,  0xCu);
        swift_arrayDestroy(v20, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v20, -1LL, -1LL);
        swift_slowDealloc(v19, -1LL, -1LL);
      }

      else
      {

        sub_10005802C((uint64_t)v5, type metadata accessor for DriverEvent);
      }
    }
  }

  else
  {
    __break(1u);
  }

void sub_1002F1154(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v67 = sub_100002274(&qword_10040BDC8);
  __chkstk_darwin();
  uint64_t v66 = (char *)v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v55[10] = sub_100002274(&qword_10040FE30);
  __chkstk_darwin();
  v55[8] = (char *)v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v55[18] = sub_100002274(&qword_10040FE98);
  __chkstk_darwin();
  v55[16] = (char *)v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v55[14] = sub_100002274(&qword_10040FE48);
  __chkstk_darwin();
  v55[12] = (char *)v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = sub_100002274((uint64_t *)&unk_10040FEC0);
  __chkstk_darwin();
  uint64_t v9 = (char *)v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v74 = type metadata accessor for DispatchTime(0LL);
  uint64_t v62 = *(void *)(v74 - 8);
  __chkstk_darwin();
  uint64_t v59 = v10;
  unint64_t v60 = (char *)v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v73 = (char *)v55 - v11;
  uint64_t v12 = *(void *)(v3 + 408);
  uint64_t v65 = *(void *)(v3 + 416);
  uint64_t v13 = *(void *)(v65 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v13,  v12,  &protocol requirements base descriptor for P2PControls);
  uint64_t v77 = v13;
  uint64_t v79 = v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v13,  v12,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  v55[26] = AssociatedTypeWitness;
  uint64_t v15 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  char v55[24] = *(void *)(v15 - 8);
  v55[25] = v15;
  __chkstk_darwin();
  uint64_t v57 = (char *)v55 - v16;
  sub_100002274(&qword_10040CED0);
  __chkstk_darwin();
  v55[22] = (char *)v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v72 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v70 = *(void *)(v72 - 8);
  __chkstk_darwin();
  __n128 v61 = (char *)v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v71 = (char *)v55 - v19;
  __chkstk_darwin();
  uint64_t v75 = (char *)v55 - v20;
  uint64_t v78 = sub_100002274((uint64_t *)&unk_10040FE60);
  __chkstk_darwin();
  uint64_t v76 = (char *)v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v69 = (char *)v55 - v22;
  uint64_t v81 = type metadata accessor for NANPeer(0LL);
  __chkstk_darwin();
  v55[20] = (char *)v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v80 = (uint64_t)v55 - v24;
  uint64_t v25 = type metadata accessor for DriverEvent(0LL);
  __chkstk_darwin();
  uint64_t v68 = (char *)v55 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v28 = (char *)v55 - v27;
  __chkstk_darwin();
  uint64_t v30 = (char *)v55 - v29;
  uint64_t v31 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v32 = *(void *)(v31 - 8);
  __chkstk_darwin();
  uint64_t v34 = (void *)((char *)v55 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v58 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v35 = (void *)*v58;
  uint64_t *v34 = *v58;
  (*(void (**)(uint64_t *, void, uint64_t))(v32 + 104))( v34,  enum case for DispatchPredicate.onQueue(_:),  v31);
  id v36 = v35;
  LOBYTE(v35) = _dispatchPreconditionTest(_:)(v34);
  (*(void (**)(uint64_t *, uint64_t))(v32 + 8))(v34, v31);
  if ((v35 & 1) != 0)
  {
    uint64_t v63 = v9;
    sub_100057FE8(a1, (uint64_t)v30, type metadata accessor for DriverEvent);
    uint64_t v37 = v25;
    uint64_t v38 = a1;
    if (swift_getEnumCaseMultiPayload(v30, v25))
    {
      sub_10005802C((uint64_t)v30, type metadata accessor for DriverEvent);
    }

    else
    {
      sub_100058090(v30, v84);
      DriverEvent.NAN.peerAttributes.getter();
      uint64_t v41 = v40;
      if (v40)
      {
        uint64_t v42 = v39;
        char v43 = (uint64_t *)(v82 + *(void *)(*(void *)v82 + 432LL));
        swift_beginAccess(v43, v83, 32LL, 0LL);
        uint64_t v44 = *v43;
        uint64_t v45 = v42 & 0xFFFFFFFFFFFFLL;
        if (*(void *)(v44 + 16) && (unint64_t v46 = sub_10001C15C(v42 & 0xFFFFFFFFFFFFLL), (v47 & 1) != 0))
        {
          unint64_t v48 = *(void *)(*(void *)(v44 + 56) + 8 * v46);
          swift_endAccess(v83);
          swift_bridgeObjectRetain(v48);
        }

        else
        {
          swift_endAccess(v83);
          unint64_t v48 = sub_1002461F8((uint64_t)_swiftEmptyArrayStorage);
        }

        uint64_t v49 = v80;
        uint64_t v50 = v82;
        sub_1002EA528(v45, v80);
        sub_10024E0CC(v41, v48);
        swift_bridgeObjectRelease(v41);
        swift_bridgeObjectRelease(v48);
        sub_1002EA6EC(v49, v45);
        sub_1002EA528(v45, v49);
        uint64_t v51 = (unsigned __int16 *)(v49 + *(int *)(v81 + 44));
        int v52 = *v51;
        int v53 = *((unsigned __int8 *)v51 + 2);
        sub_10005802C(v49, type metadata accessor for NANPeer);
        sub_10027E9D8((void *(*)(uint64_t *__return_ptr, __int16 *))sub_1002FBAA0, v50, v52 | (v53 << 16));
        sub_1001074E8( (uint64_t)v84,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
        uint64_t v38 = a1;
      }

      else
      {
        sub_1001074E8( (uint64_t)v84,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
      }
    }

    sub_100057FE8(v38, (uint64_t)v28, type metadata accessor for DriverEvent);
    uint64_t v54 = (char *)&loc_1002F1820 + dword_1002F3F94[swift_getEnumCaseMultiPayload(v28, v37)];
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1002F3F78LL);
}

uint64_t sub_1002F401C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((result & 1) != 0)
  {
    uint64_t v5 = sub_1002CF17C();
    if ((v5 & 1) != 0)
    {
      swift_unownedRetainStrong(a4);
      sub_1002F41AC();
      swift_release(a4);
      swift_unownedRetainStrong(a4);
      sub_1002F4470();
      swift_release(a4);
      swift_unownedRetainStrong(a4);
      sub_1002F4674();
      swift_release(a4);
      uint64_t v6 = swift_unownedRetainStrong(a4);
      uint64_t v7 = *(void *)(a4 + *(void *)(*(void *)a4 + 456LL));
      if (v7)
      {
        swift_retain();
        swift_release(a4);
        (*(void (**)(void))(*(void *)v7 + 192LL))(0LL);
        uint64_t v6 = v7;
      }

      swift_release(v6);
      swift_unownedRetainStrong(a4);
      sub_1002F4B2C();
      return swift_release(a4);
    }

    else
    {
      uint64_t v8 = (os_log_s *)Logger.logObject.getter(v5);
      os_log_type_t v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "Refusing request to enable NAN because Wi-Fi is powered off",  v10,  2u);
        swift_slowDealloc(v10, -1LL, -1LL);
      }

      unint64_t v11 = sub_1000033FC();
      uint64_t v12 = swift_allocError(&type metadata for WiFiError, v11, 0LL, 0LL);
      *(_OWORD *)uint64_t v13 = xmmword_100337000;
      *(_BYTE *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
      return swift_willThrow(v12);
    }
  }

  return result;
}

void sub_1002F41AC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 408);
  uint64_t v4 = *(void *)(*(void *)(v2 + 416) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v4,  v3,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v4,  v3,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v7 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v8 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v7,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.PreferencesBacking: PreferencesStorage);
  uint64_t v10 = type metadata accessor for Preferences(0LL, v7, v8, v9);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v35 - v12;
  WiFiInterface.linkState.setter(1);
  WiFiInterface.preferences.getter();
  uint64_t v17 = Preferences.nanMACAddress.getter(v10, v14, v15, v16);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if ((v17 & 0x1000000000000LL) != 0) {
    static WiFiAddress.random()();
  }
  WiFiAddress.linkLocalAddress()(v18);
  WiFiInterface.macAddress.setter(v19 & 0xFFFFFFFFFFFFLL);
  uint64_t v20 = sub_100002274((uint64_t *)&unk_100410470);
  uint64_t v21 = swift_allocObject(v20, 64LL, 7LL);
  *(_OWORD *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
  uint64_t v22 = WiFiInterface.macAddress.getter();
  WiFiAddress.ipv6LinkLocalAddress.getter(v22 & 0xFFFFFFFFFFFFLL);
  *(void *)(v21 + 32) = v23;
  *(void *)(v21 + 40) = v24;
  *(void *)(v21 + 48) = v25;
  *(void *)(v21 + 56) = v26;
  WiFiInterface.ipv6Addresses.setter(v21);
  uint64_t v27 = swift_retain();
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v31 = swift_slowAlloc(32LL, -1LL);
    uint64_t v36 = v31;
    *(_DWORD *)uint64_t v30 = 136315138;
    uint64_t v32 = WiFiInterface.description.getter();
    unint64_t v34 = v33;
    uint64_t v35 = sub_10000235C(v32, v33, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
    swift_release(v1);
    swift_bridgeObjectRelease(v34);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Updated %s", v30, 0xCu);
    swift_arrayDestroy(v31, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  else
  {
    swift_release(v1);
  }
}

void sub_1002F4470()
{
  uint64_t v1 = *(void *)(v0 + *(void *)(*(void *)v0 + 448LL));
  if (v1)
  {
    uint64_t v2 = *(void (**)(uint64_t))(*(void *)v1 + 192LL);
    swift_retain();
    v2(1LL);
    uint64_t v3 = WiFiInterface.macAddress.getter();
    (*(void (**)(uint64_t))(*(void *)v1 + 240LL))(v3 & 0xFFFFFFFFFFFFLL);
    uint64_t v4 = sub_100002274((uint64_t *)&unk_100410470);
    uint64_t v5 = swift_allocObject(v4, 64LL, 7LL);
    *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)v1 + 232LL))();
    WiFiAddress.ipv6LinkLocalAddress.getter(v6 & 0xFFFFFFFFFFFFLL);
    *(void *)(v5 + 32) = v7;
    *(void *)(v5 + 40) = v8;
    *(void *)(v5 + 48) = v9;
    *(void *)(v5 + 56) = v10;
    (*(void (**)(uint64_t))(*(void *)v1 + 336LL))(v5);
    uint64_t v11 = swift_retain();
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      uint64_t v20 = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      uint64_t v16 = WiFiInterface.description.getter();
      unint64_t v18 = v17;
      uint64_t v19 = sub_10000235C(v16, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
      swift_release(v1);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Updated %s", v14, 0xCu);
      swift_arrayDestroy(v15, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);

      swift_release(v1);
    }

    else
    {

      swift_release_n(v1, 2LL);
    }
  }

uint64_t sub_1002F4674()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 408);
  uint64_t v4 = *(void *)(*v0 + 416);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v4,  v3,  &protocol requirements base descriptor for NANController);
  uint64_t v43 = *(void *)(swift_getAssociatedConformanceWitness( v4,  v3,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.NANController.InfraController: InfrastructureController)
                  + 8);
  uint64_t v6 = swift_getAssociatedTypeWitness( 0LL,  v43,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls);
  uint64_t v44 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v43 - v7;
  uint64_t v9 = *(void *)(v4 + 8);
  uint64_t v10 = swift_getAssociatedTypeWitness(255LL, v9, v3, &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v9,  v3,  v10,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v12 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  v10,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v13 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  v10,  v12,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.PreferencesBacking: PreferencesStorage);
  uint64_t v15 = type metadata accessor for Preferences(0LL, v12, v13, v14);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t result = __chkstk_darwin();
  uint64_t v19 = (char *)&v43 - v18;
  uint64_t v20 = *(uint64_t *)((char *)v1 + *(void *)(v2 + 456));
  if (v20)
  {
    uint64_t v21 = *(void (**)(uint64_t))(*(void *)v20 + 192LL);
    swift_retain();
    v21(1LL);
    WiFiInterface.preferences.getter();
    unint64_t v25 = Preferences.nanDataMACAddress.getter(v15, v22, v23, v24);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    if ((v25 & 0x1000000000000LL) != 0)
    {
      uint64_t v27 = (uint64_t)v1 + *(void *)(*v1 + 464);
      if ((*(_BYTE *)(v27 + 6) & 1) != 0)
      {
        uint64_t v28 = *(uint64_t *)((char *)v1 + *(void *)(*v1 + 688));
        swift_unownedRetainStrong(v28);
        uint64_t v29 = v44;
        (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v8, v28 + *(void *)(*(void *)v28 + 96LL), v6);
        swift_release(v28);
        uint64_t v30 = swift_getAssociatedConformanceWitness( v43,  AssociatedTypeWitness,  v6,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
        uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 64))(v6, v30);
        (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v6);
        if ((v31 & 0x1000000000000LL) != 0) {
          unint64_t v33 = static WiFiAddress.random()();
        }
        else {
          WiFiAddress.lastOctetIncremented()(v32);
        }
        unint64_t v26 = v33 >> 40;
      }

      else
      {
        LODWORD(v26) = HIBYTE(*(unsigned __int16 *)(v27 + 4));
      }
    }

    else
    {
      unint64_t v26 = v25 >> 40;
    }

    WiFiAddress.linkLocalAddress()((CoreP2P::WiFiAddress *)((unint64_t)v26 << 40));
    (*(void (**)(uint64_t))(*(void *)v20 + 240LL))(v34 & 0xFFFFFFFFFFFFLL);
    uint64_t v35 = swift_retain();
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v39 = swift_slowAlloc(32LL, -1LL);
      uint64_t v46 = v39;
      *(_DWORD *)uint64_t v38 = 136315138;
      uint64_t v40 = WiFiInterface.description.getter();
      unint64_t v42 = v41;
      uint64_t v45 = sub_10000235C(v40, v41, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
      swift_release(v20);
      swift_bridgeObjectRelease(v42);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Updated %s", v38, 0xCu);
      swift_arrayDestroy(v39, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v39, -1LL, -1LL);
      swift_slowDealloc(v38, -1LL, -1LL);

      return swift_release(v20);
    }

    else
    {

      return swift_release_n(v20, 2LL);
    }
  }

  return result;
}

uint64_t sub_1002F4B2C()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = (void *)*v0;
  sub_100002274(&qword_10040D440);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for NANDriverCapabilities(0LL);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = v4[83];
  if ((*((_BYTE *)v0 + v9) & 1) == 0)
  {
    uint64_t v107 = v6;
    uint64_t v11 = v4[51];
    uint64_t v10 = v4[52];
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(v10 + 8),  v11,  &protocol requirements base descriptor for P2PControls);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v10,  v11,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40);
    uint64_t v15 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
    v14(v15, AssociatedConformanceWitness);
    uint64_t v2 = v1;
    if (v1)
    {
      swift_errorRetain(v1);
      uint64_t v16 = swift_errorRetain(v1);
      unint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v20 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v19 = 138412290;
        swift_errorRetain(v1);
        uint64_t v21 = _swift_stdlib_bridgeErrorToNSError(v1);
        *(void *)&__int128 v110 = v21;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, (char *)&v110 + 8);
        *uint64_t v20 = v21;
        swift_errorRelease(v1);
        swift_errorRelease(v1);
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to initialize and configure NAN: %@", v19, 0xCu);
        uint64_t v22 = sub_100002274(&qword_100404DE0);
        swift_arrayDestroy(v20, 1LL, v22);
        swift_slowDealloc(v20, -1LL, -1LL);
        swift_slowDealloc(v19, -1LL, -1LL);
      }

      else
      {

        swift_errorRelease(v1);
        uint64_t v23 = swift_errorRelease(v1);
      }

      return swift_willThrow(v23);
    }

    uint64_t v24 = (uint64_t)v0 + *(void *)(*v0 + 656);
    swift_beginAccess((char *)v3 + *(void *)(*v3 + 656), &v110, 33LL, 0LL);
    sub_1002FB868((uint64_t)v8, v24);
    swift_endAccess(&v110);
    *((_BYTE *)v3 + v9) = 1;
    uint64_t v6 = v107;
  }

  uint64_t v25 = WiFiInterface.capabilities.getter();
  uint64_t v108 = WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor();
  uint64_t v26 = *v108;
  uint64_t v114 = v25;
  *(void *)&__int128 v110 = v26;
  unint64_t v27 = sub_100270384();
  swift_bridgeObjectRetain_n(v26, 2LL);
  unint64_t v109 = v27;
  ExtendableOptionSet.formIntersection(_:)( (uint64_t (*)(_BYTE *, void))&v114,  &type metadata for WiFiDriverCapabilities.Kind,  v27);
  uint64_t v28 = v110;
  LOBYTE(v27) = sub_10007990C(v110, v26);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v28);
  uint64_t v29 = sub_1002EC320();
  uint64_t v30 = static Array<A>.potentialAvailability(using:supportsSimultaneousDualBand:for:)(0, v27 & 1, v29);
  swift_bridgeObjectRelease(v29);
  sub_1002EAD2C((uint64_t)v30);
  if (*(void *)(sub_1002FB488() + 16))
  {
    uint64_t v32 = v4[51];
    uint64_t v31 = v4[52];
    uint64_t v33 = swift_getAssociatedTypeWitness( 255LL,  *(void *)(v31 + 8),  v32,  &protocol requirements base descriptor for P2PControls);
    uint64_t v34 = v108;
  }

  else
  {
    uint64_t v107 = v6;
    uint64_t v35 = *(uint64_t *)((char *)v3 + *(void *)(*v3 + 688));
    swift_unownedRetainStrong(v35);
    sub_1002CF2F0();
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    swift_release(v35);
    uint64_t v97 = v2;
    if (v37) {
      swift_bridgeObjectRelease(v37);
    }
    else {
      uint64_t v39 = 0x300000000LL;
    }
    uint64_t v41 = *v3;
    uint64_t v42 = *(void *)(*v3 + 552);
    uint64_t v43 = (uint64_t)v3 + *(int *)(sub_100002274(&qword_10040FE40) + 40) + v42;
    LODWORD(v42) = *(_DWORD *)v43;
    __int16 v44 = *(_WORD *)(v43 + 4);
    uint64_t v45 = *(void *)(v41 + 560);
    uint64_t v46 = (unsigned int *)((char *)v3 + *(int *)(sub_100002274(&qword_10040FE38) + 40) + v45);
    unsigned int v47 = *v46;
    LOWORD(v46) = *((_WORD *)v46 + 2);
    LODWORD(v114) = v42;
    WORD2(v114) = v44;
    unsigned __int16 v116 = (unsigned __int16)v46;
    unsigned int v115 = v47;
    unsigned __int16 v118 = WORD2(v39);
    unsigned int v117 = v39;
    uint64_t v119 = _swiftEmptyArrayStorage;
    uint64_t v48 = sub_1002EC320();
    RadioResources.SymbolicChannel.Resolver.update(preferredChannels:)((Swift::OpaquePointer)v48);
    swift_bridgeObjectRelease(v48);
    int v103 = v114;
    int v102 = WORD2(v114);
    uint64_t v105 = v115;
    uint64_t v100 = v116;
    uint64_t v104 = v117;
    uint64_t v99 = v118;
    uint64_t v101 = v119;
    uint64_t v50 = v4 + 51;
    uint64_t v49 = v4[51];
    uint64_t v96 = v50[1];
    uint64_t v51 = *(void *)(v96 + 8);
    uint64_t v52 = swift_getAssociatedTypeWitness(255LL, v51, v49, &protocol requirements base descriptor for P2PControls);
    uint64_t v95 = v49;
    uint64_t v53 = swift_getAssociatedConformanceWitness( v51,  v49,  v52,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
    uint64_t v54 = *(uint64_t (**)(uint64_t, uint64_t))(v53 + 8);
    uint64_t v106 = v52;
    uint64_t v55 = swift_checkMetadataState(0LL, v52);
    uint64_t v56 = v54(v55, v53);
    uint64_t v57 = *WiFiDriverCapabilities.supportsDualBand.unsafeMutableAddressor();
    uint64_t v122 = v56;
    *(void *)&__int128 v110 = v57;
    swift_bridgeObjectRetain_n(v57, 2LL);
    uint64_t v58 = v109;
    ExtendableOptionSet.formIntersection(_:)( (uint64_t (*)(_BYTE *, void))&v122,  &type metadata for WiFiDriverCapabilities.Kind,  v109);
    uint64_t v59 = v110;
    int v98 = sub_10007990C(v110, v57);
    swift_bridgeObjectRelease(v56);
    swift_bridgeObjectRelease(v57);
    __n128 v60 = swift_bridgeObjectRelease(v59);
    uint64_t v61 = ((uint64_t (*)(uint64_t, uint64_t, __n128))v54)(v55, v53, v60);
    uint64_t v34 = v108;
    uint64_t v62 = *v108;
    uint64_t v122 = v61;
    *(void *)&__int128 v110 = v62;
    swift_bridgeObjectRetain_n(v62, 2LL);
    ExtendableOptionSet.formIntersection(_:)( (uint64_t (*)(_BYTE *, void))&v122,  &type metadata for WiFiDriverCapabilities.Kind,  v58);
    uint64_t v63 = v110;
    LOBYTE(v42) = sub_10007990C(v110, v62);
    swift_bridgeObjectRelease(v61);
    swift_bridgeObjectRelease(v62);
    swift_bridgeObjectRelease(v63);
    *(void *)&__int128 v110 = _swiftEmptyDictionarySingleton;
    BYTE8(v110) = v98 & 1;
    BYTE9(v110) = v42 & 1;
    LODWORD(v11sub_100058090(v4, v0 + 1) = v103;
    WORD2(v11sub_100058090(v4, v0 + 1) = v102;
    WORD6(v11sub_100058090(v4, v0 + 1) = v100;
    DWORD2(v11sub_100058090(v4, v0 + 1) = v105;
    WORD2(v112) = v99;
    LODWORD(v112) = v104;
    *((void *)&v112 + sub_100058090(v4, v0 + 1) = v101;
    uint64_t v113 = _swiftEmptyArrayStorage;
    uint64_t v64 = TimeBitmap.primaryDiscoveryWindow.unsafeMutableAddressor();
    RadioSchedule.set(_:to:with:)( *v64,  v64[1],  v64[2],  0LL,  2LL,  3,  (uint64_t)&type metadata for RadioResourceSchedule,  (uint64_t)&off_10040D9F0);
    LOBYTE(v63) = *(_BYTE *)TimeBitmap.Slot.OF.unsafeMutableAddressor();
    uint64_t v65 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
    uint64_t v66 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v63, *v65, *v65, *v65);
    RadioSchedule.set(_:to:with:)( v66,  v67,  v68,  0LL,  2LL,  3,  (uint64_t)&type metadata for RadioResourceSchedule,  (uint64_t)&off_10040D9F0);
    if ((BYTE9(v110) & 1) != 0)
    {
      uint64_t v69 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
      char v70 = *v65;
      char v71 = *v69;
      char v72 = v71;
    }

    else
    {
      char v73 = *v65;
      uint64_t v74 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
      char v70 = *v65;
      char v72 = *v74;
      char v71 = v73;
    }

    uint64_t v75 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v71, v72, v70, v70);
    uint64_t v6 = v107;
    uint64_t v31 = v96;
    uint64_t v32 = v95;
    RadioSchedule.set(_:to:with:)( v75,  v76,  v77,  1LL,  2LL,  3,  (uint64_t)&type metadata for RadioResourceSchedule,  (uint64_t)&off_10040D9F0);
    v120[0] = v110;
    v120[1] = v111;
    v120[2] = v112;
    uint64_t v121 = v113;
    uint64_t v78 = sub_10026A4B8();
    sub_100270288(v120);
    uint64_t v79 = sub_1002FB0CC(v78, (char *)v120);
    sub_100270244((uint64_t *)v120);
    swift_bridgeObjectRelease(v78);
    sub_100270244((uint64_t *)v120);
    sub_1002EA4C4((uint64_t)v79);
    uint64_t v33 = v106;
  }

  uint64_t v80 = swift_getAssociatedConformanceWitness( v31,  v32,  v33,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
  uint64_t v81 = *(uint64_t (**)(uint64_t, uint64_t))(v80 + 32);
  uint64_t v82 = swift_checkMetadataState(0LL, v33);
  char v83 = v81(v82, v80);
  char v84 = (*(uint64_t (**)(uint64_t, uint64_t))(v80 + 24))(v82, v80);
  uint64_t v85 = WiFiInterface.capabilities.getter();
  uint64_t v86 = *v34;
  uint64_t v114 = v85;
  *(void *)&__int128 v110 = v86;
  swift_bridgeObjectRetain_n(v86, 2LL);
  ExtendableOptionSet.formIntersection(_:)( (uint64_t (*)(_BYTE *, void))&v114,  &type metadata for WiFiDriverCapabilities.Kind,  v109);
  uint64_t v87 = v110;
  char v88 = sub_10007990C(v110, v86);
  swift_bridgeObjectRelease(v85);
  swift_bridgeObjectRelease(v86);
  swift_bridgeObjectRelease(v87);
  if ((v88 & 1) != 0) {
    int v89 = 0;
  }
  else {
    int v89 = *(_DWORD *)NANAttribute.CustomDeviceInformation.Flags.doesNotSupportSimultaneousDualBand.unsafeMutableAddressor();
  }
  uint64_t v90 = type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
  NANAttribute.CustomDeviceInformation.CustomAttributes.init()((uint64_t)&v6[*(int *)(v90 + 28)]);
  *uint64_t v6 = v83;
  v6[1] = v84;
  *((_DWORD *)v6 + sub_100058090(v4, v0 + 1) = v89;
  uint64_t v91 = type metadata accessor for NANAttribute(0LL);
  swift_storeEnumTagMultiPayload(v6, v91, 40LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v91 - 8) + 56LL))(v6, 0LL, 1LL, v91);
  uint64_t v92 = (uint64_t)v3 + *(void *)(*v3 + 592);
  swift_beginAccess(v92, &v110, 33LL, 0LL);
  uint64_t v93 = sub_100002274(qword_10040E570);
  uint64_t v114 = *(void *)(v92 + *(int *)(v93 + 40));
  swift_bridgeObjectRetain(v114);
  sub_1002E8DEC((uint64_t)v6, 45);
  uint64_t v122 = v114;
  MutableDriverProperty.wrappedValue.setter((uint64_t)&v122, v93);
  return swift_endAccess(&v110);
}

uint64_t sub_1002F551C(uint64_t result, uint64_t a2)
{
  if ((result & 1) != 0)
  {
    uint64_t v3 = swift_unownedRetainStrong(a2);
    uint64_t v4 = *(void *)(a2 + *(void *)(*(void *)a2 + 456LL));
    if (v4)
    {
      swift_retain();
      swift_release(a2);
      (*(void (**)(void))(*(void *)v4 + 192LL))(0LL);
      uint64_t v3 = v4;
    }

    swift_release(v3);
    uint64_t v5 = swift_unownedRetainStrong(a2);
    uint64_t v6 = *(void *)(a2 + *(void *)(*(void *)a2 + 448LL));
    if (v6)
    {
      swift_retain();
      swift_release(a2);
      (*(void (**)(void))(*(void *)v6 + 192LL))(0LL);
      uint64_t v5 = v6;
    }

    swift_release(v5);
    swift_unownedRetainStrong(a2);
    WiFiInterface.linkState.setter(0);
    return swift_release(a2);
  }

  return result;
}

uint64_t sub_1002F55D8(char a1, uint64_t a2)
{
  int v4 = a1 & 1;
  uint64_t v5 = type metadata accessor for DispatchTime(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_unownedRetainStrong(a2);
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v9 = a2 + *(void *)(*(void *)a2 + 672LL);
  __n128 v10 = swift_beginAccess(v9, v17, 33LL, 0LL);
  (*(void (**)(uint64_t, _BYTE *, uint64_t, __n128))(v6 + 40))(v9, v8, v5, v10);
  swift_endAccess(v17);
  swift_release(a2);
  swift_unownedRetainStrong(a2);
  sub_1002F5770(v4);
  uint64_t result = swift_release(a2);
  if ((a1 & 1) == 0)
  {
    uint64_t v12 = swift_unownedRetainStrong(a2);
    uint64_t v13 = *(void *)(a2 + *(void *)(*(void *)a2 + 448LL));
    if (v13)
    {
      swift_retain();
      swift_release(a2);
      (*(void (**)(void))(*(void *)v13 + 192LL))(0LL);
      uint64_t v12 = v13;
    }

    swift_release(v12);
    uint64_t v14 = swift_unownedRetainStrong(a2);
    uint64_t v15 = *(void *)(a2 + *(void *)(*(void *)a2 + 456LL));
    if (v15)
    {
      swift_retain();
      swift_release(a2);
      (*(void (**)(void))(*(void *)v15 + 192LL))(0LL);
      uint64_t v14 = v15;
    }

    swift_release(v14);
    swift_unownedRetainStrong(a2);
    WiFiInterface.linkState.setter(0);
    return swift_release(a2);
  }

  return result;
}

void sub_1002F5770(int a1)
{
  uint64_t v2 = v1;
  int v4 = (void *)*v1;
  uint64_t v5 = v4[51];
  uint64_t v6 = v4[52];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v6,  v5,  &protocol requirements base descriptor for NANController);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v6,  v5,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.NANController.InfraController: InfrastructureController);
  uint64_t v8 = swift_getAssociatedTypeWitness( 0LL,  *(void *)(AssociatedConformanceWitness + 8),  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v74 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v71 - v11;
  int v72 = a1;
  uint64_t v73 = v9;
  if ((a1 & 1) != 0)
  {
    uint64_t v74 = (char *)AssociatedTypeWitness;
    if (((unint64_t)" committed availability" & 0x1000000000000000LL) != 0)
    {
      sub_100002274((uint64_t *)&unk_10040FEB0);
      _StringGuts._slowWithCString<A>(_:)(v79, sub_100265CE4, 0LL);
      uint64_t v43 = v79[0];
      uint64_t v42 = v8;
    }

    else
    {
      __chkstk_darwin();
      *(&v71 - 2) = (uint64_t)sub_100265CE4;
      *(&v71 - sub_100058090(v4, v0 + 1) = 0LL;
      uint64_t v42 = v8;
      if (((unint64_t)" committed availability" & 0x2000000000000000LL) != 0)
      {
        v79[0] = 0xD000000000000022LL;
        v79[1] = (unint64_t)" committed availability" & 0xFFFFFFFFFFFFFFLL;
        uint64_t v43 = os_transaction_create(v79);
      }

      else
      {
        uint64_t v43 = sub_100331510( ((unint64_t)" committed availability" & 0xFFFFFFFFFFFFFFFLL) + 32,  34LL,  (uint64_t (*)(void))sub_100269904);
      }
    }

    uint64_t v44 = *(void *)(*v2 + 472LL);
    uint64_t v45 = *(void *)((char *)v2 + v44);
    *(void *)((char *)v2 + v44) = v43;
    swift_unknownObjectRelease(v45);
    uint64_t v46 = *(void **)((char *)v2 + *(void *)(*v2 + 480LL));
    [v46 registerClient:39 queue:*OS_dispatch_queue.nan.unsafeMutableAddressor()];
    [v46 setNANEnabled:1];
    uint64_t v47 = *(void *)((char *)v2 + *(void *)(*v2 + 688LL));
    swift_unownedRetainStrong(v47);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v47 + *(void *)(*(void *)v47 + 96LL), v42);
    swift_release(v47);
    uint64_t v48 = *(void *)(v6 + 8);
    uint64_t v49 = swift_getAssociatedTypeWitness(255LL, v48, v5, &protocol requirements base descriptor for P2PControls);
    uint64_t v50 = swift_getAssociatedConformanceWitness( v48,  v5,  v49,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
    uint64_t v51 = *(uint64_t (**)(uint64_t, uint64_t))(v50 + 32);
    uint64_t v52 = swift_checkMetadataState(0LL, v49);
    uint64_t v53 = v51(v52, v50);
    uint64_t v54 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  v74,  v42,  &protocol requirements base descriptor for InfrastructureController,  &associated conformance descriptor for InfrastructureController.P2PControls.Driver: InfrastructureWiFiDriver);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 136))(v53, 1LL, v42, v54);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v12, v42);
  }

  else
  {
    uint64_t v13 = (void *)((char *)v2 + v4[55]);
    swift_beginAccess(v13, v79, 1LL, 0LL);
    uint64_t v14 = *v13;
    *uint64_t v13 = (uint64_t)_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(v14);
    sub_1002EC3D8();
    uint64_t v15 = (void *)((char *)v2 + *(void *)(*v2 + 432LL));
    swift_beginAccess(v15, v78, 1LL, 0LL);
    uint64_t v16 = *v15;
    *uint64_t v15 = (uint64_t)_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(v16);
    type metadata accessor for NANDiscoveryEngine(0LL, v5, v6, v17);
    uint64_t v18 = swift_retain();
    uint64_t v19 = sub_10029FBEC(v18);
    swift_release(v2);
    uint64_t v20 = *(void *)(*v2 + 632LL);
    uint64_t v21 = *(void *)((char *)v2 + v20);
    *(void *)((char *)v2 + v20) = v19;
    swift_release(v21);
    type metadata accessor for NANOutOfBoundActionFrameTransmitter(0LL, v5, v6, v22);
    uint64_t v23 = swift_retain();
    uint64_t v24 = sub_1002CECE0(v23);
    swift_release(v2);
    uint64_t v25 = *(void *)(*v2 + 640LL);
    uint64_t v26 = *(void *)((char *)v2 + v25);
    *(void *)((char *)v2 + v25) = v24;
    swift_release(v26);
    uint64_t v27 = *(void *)(*v2 + 616LL);
    uint64_t v28 = *((unsigned __int8 *)v2 + v27);
    *((_BYTE *)v2 + v27) = 5;
    sub_1002ECAC0(v28);
    uint64_t v29 = (char *)v2 + *(void *)(*v2 + 624LL);
    *(void *)uint64_t v29 = 0LL;
    v29[8] = 1;
    unint64_t v30 = sub_100245F98((uint64_t)_swiftEmptyArrayStorage);
    sub_1002EA7E8(v30);
    uint64_t v31 = *(void *)(*v2 + 472LL);
    uint64_t v32 = *(void *)((char *)v2 + v31);
    *(void *)((char *)v2 + v3sub_100058090(v4, v0 + 1) = 0LL;
    swift_unknownObjectRelease(v32);
    uint64_t v33 = *(void **)((char *)v2 + *(void *)(*v2 + 480LL));
    [v33 setNANEnabled:0];
    [v33 unregisterClient];
    uint64_t v34 = *(void *)((char *)v2 + *(void *)(*v2 + 688LL));
    swift_unownedRetainStrong(v34);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v74, v34 + *(void *)(*(void *)v34 + 96LL), v8);
    uint64_t v71 = v34;
    swift_release(v34);
    uint64_t v35 = *(void *)(v6 + 8);
    uint64_t v36 = swift_getAssociatedTypeWitness(255LL, v35, v5, &protocol requirements base descriptor for P2PControls);
    uint64_t v37 = swift_getAssociatedConformanceWitness( v35,  v5,  v36,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
    uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t))(v37 + 32);
    uint64_t v39 = swift_checkMetadataState(0LL, v36);
    uint64_t v40 = v38(v39, v37);
    uint64_t v41 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v8,  &protocol requirements base descriptor for InfrastructureController,  &associated conformance descriptor for InfrastructureController.P2PControls.Driver: InfrastructureWiFiDriver);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 136))(v40, 0LL, v8, v41);
    uint64_t v55 = (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v74, v8);
    uint64_t v56 = v71;
    uint64_t v57 = (os_log_s *)Logger.logObject.getter(v55);
    os_log_type_t v58 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v57, v58))
    {
      __n128 v60 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)__n128 v60 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v57,  v58,  "Attempting to update soft AP band to 5G on disabling NAN",  v60,  2u);
      swift_slowDealloc(v60, -1LL, -1LL);
    }

    swift_unownedRetainStrong(v56);
    sub_1002D4720(1);
    swift_release(v56);
  }

  uint64_t v61 = swift_retain();
  uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
  os_log_type_t v63 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v62, v63))
  {
    uint64_t v64 = swift_slowAlloc(22LL, -1LL);
    uint64_t v65 = swift_slowAlloc(64LL, -1LL);
    v77[0] = v65;
    *(_DWORD *)uint64_t v64 = 136315394;
    uint64_t v66 = WiFiInterface.description.getter();
    unint64_t v68 = v67;
    uint64_t v76 = sub_10000235C(v66, v67, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77);
    swift_release(v2);
    swift_bridgeObjectRelease(v68);
    *(_WORD *)(v64 + 12) = 2080;
    if ((v72 & 1) != 0) {
      uint64_t v69 = 0x64656C62616E65LL;
    }
    else {
      uint64_t v69 = 0x64656C6261736964LL;
    }
    if ((v72 & 1) != 0) {
      unint64_t v70 = 0xE700000000000000LL;
    }
    else {
      unint64_t v70 = 0xE800000000000000LL;
    }
    uint64_t v76 = sub_10000235C(v69, v70, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77);
    swift_bridgeObjectRelease(v70);
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "%s %s NAN", (uint8_t *)v64, 0x16u);
    swift_arrayDestroy(v65, 2LL, &type metadata for Any[8]);
    swift_slowDealloc(v65, -1LL, -1LL);
    swift_slowDealloc(v64, -1LL, -1LL);
  }

  else
  {
    swift_release(v2);
  }
}

uint64_t sub_1002F61E4()
{
  swift_release(*(void *)(v0 + *(void *)(*(void *)v0 + 496LL)));
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 504LL), &qword_100405D40);
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 512LL), &qword_100405D40);
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 520LL), &qword_10040FE30);
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 528LL), (uint64_t *)&unk_10040FE60);
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 536LL), (uint64_t *)&unk_10040FEA0);
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 544LL), &qword_10040FE48);
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 552LL), &qword_10040FE40);
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 560LL), &qword_10040FE38);
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 568LL), &qword_10040FE98);
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 576LL), &qword_10040FE58);
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 584LL), (uint64_t *)&unk_10040FC30);
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 592LL), qword_10040E570);
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 600LL), (uint64_t *)&unk_10040FE88);
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 608LL), (uint64_t *)&unk_10040FE88);
  swift_release(*(void *)(v0 + *(void *)(*(void *)v0 + 632LL)));
  swift_release(*(void *)(v0 + *(void *)(*(void *)v0 + 640LL)));
  swift_release(*(void *)(v0 + *(void *)(*(void *)v0 + 648LL)));
  sub_10005802C(v0 + *(void *)(*(void *)v0 + 656LL), type metadata accessor for NANDriverCapabilities);
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 672LL);
  uint64_t v2 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_bridgeObjectRelease(*(void *)(v0 + *(void *)(*(void *)v0 + 680LL) + 8));
  return swift_unownedRelease(*(void *)(v0 + *(void *)(*(void *)v0 + 688LL)));
}

uint64_t sub_1002F646C()
{
  uint64_t v1 = v0;
  uint64_t v2 = swift_retain();
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v7 = WiFiInterface.description.getter();
    unint64_t v9 = v8;
    uint64_t v14 = sub_10000235C(v7, v8, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15);
    swift_release(v1);
    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Destroyed %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {

    swift_release(v0);
  }

  uint64_t v10 = WiFiInterface.deinit();
  swift_release(*(void *)(v10 + *(void *)(*(void *)v10 + 424LL)));
  swift_bridgeObjectRelease(*(void *)(v10 + *(void *)(*(void *)v10 + 432LL)));
  swift_bridgeObjectRelease(*(void *)(v10 + *(void *)(*(void *)v10 + 440LL)));
  swift_release(*(void *)(v10 + *(void *)(*(void *)v10 + 448LL)));
  swift_release(*(void *)(v10 + *(void *)(*(void *)v10 + 456LL)));
  swift_unknownObjectRelease(*(void *)(v10 + *(void *)(*(void *)v10 + 472LL)));

  swift_release(*(void *)(v10 + *(void *)(*(void *)v10 + 496LL)));
  sub_1000225EC(v10 + *(void *)(*(void *)v10 + 504LL), &qword_100405D40);
  sub_1000225EC(v10 + *(void *)(*(void *)v10 + 512LL), &qword_100405D40);
  sub_1000225EC(v10 + *(void *)(*(void *)v10 + 520LL), &qword_10040FE30);
  sub_1000225EC(v10 + *(void *)(*(void *)v10 + 528LL), (uint64_t *)&unk_10040FE60);
  sub_1000225EC(v10 + *(void *)(*(void *)v10 + 536LL), (uint64_t *)&unk_10040FEA0);
  sub_1000225EC(v10 + *(void *)(*(void *)v10 + 544LL), &qword_10040FE48);
  sub_1000225EC(v10 + *(void *)(*(void *)v10 + 552LL), &qword_10040FE40);
  sub_1000225EC(v10 + *(void *)(*(void *)v10 + 560LL), &qword_10040FE38);
  sub_1000225EC(v10 + *(void *)(*(void *)v10 + 568LL), &qword_10040FE98);
  sub_1000225EC(v10 + *(void *)(*(void *)v10 + 576LL), &qword_10040FE58);
  sub_1000225EC(v10 + *(void *)(*(void *)v10 + 584LL), (uint64_t *)&unk_10040FC30);
  sub_1000225EC(v10 + *(void *)(*(void *)v10 + 592LL), qword_10040E570);
  sub_1000225EC(v10 + *(void *)(*(void *)v10 + 600LL), (uint64_t *)&unk_10040FE88);
  sub_1000225EC(v10 + *(void *)(*(void *)v10 + 608LL), (uint64_t *)&unk_10040FE88);
  swift_release(*(void *)(v10 + *(void *)(*(void *)v10 + 632LL)));
  swift_release(*(void *)(v10 + *(void *)(*(void *)v10 + 640LL)));
  swift_release(*(void *)(v10 + *(void *)(*(void *)v10 + 648LL)));
  sub_10005802C(v10 + *(void *)(*(void *)v10 + 656LL), type metadata accessor for NANDriverCapabilities);
  uint64_t v11 = v10 + *(void *)(*(void *)v10 + 672LL);
  uint64_t v12 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(v11, v12);
  swift_bridgeObjectRelease(*(void *)(v10 + *(void *)(*(void *)v10 + 680LL) + 8));
  swift_unownedRelease(*(void *)(v10 + *(void *)(*(void *)v10 + 688LL)));
  return v10;
}

uint64_t sub_1002F684C()
{
  uint64_t v0 = sub_1002F646C();
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for NANInterface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NANInterface);
}

void sub_1002F6878(uint64_t *a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = (uint64_t *)(a4 + *(void *)(*(void *)a4 + 440LL));
  swift_beginAccess(v7, v11, 33LL, 0LL);
  uint64_t v8 = *v7;
  *uint64_t v7 = 0x8000000000000000LL;
  if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
  {
    uint64_t v12 = v8;
    sub_10032BCC4();
    uint64_t v8 = v12;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  if (v5 < 0 || v5 >= 1LL << *(_BYTE *)(v8 + 32))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (((*(void *)(v8 + (((unint64_t)v5 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> v5) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if (*(_DWORD *)(v8 + 36) == (_DWORD)v6)
  {
    uint64_t v9 = *(void *)(v8 + 56);
    uint64_t v10 = type metadata accessor for NANPeer(0LL);
    a2(v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * v5);
    *uint64_t v7 = v8;
    swift_endAccess(v11);
    sub_1002EC3D8();
    return;
  }

uint64_t sub_1002F699C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = a2 + 16;
  swift_beginAccess(a2 + 16, v38, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v7);
  if (!result) {
    return result;
  }
  uint64_t v9 = result;
  uint64_t v10 = result + *(void *)(*(void *)result + 432LL);
  swift_beginAccess(v10, v37, 33LL, 0LL);
  uint64_t v11 = a3 & 0xFFFFFFFFFFFFLL;
  uint64_t v12 = sub_1002E9D6C(v36, a3 & 0xFFFFFFFFFFFFLL);
  if (!*v13) {
    goto LABEL_7;
  }
  uint64_t v14 = sub_1002E9DB8(v35, a4);
  if (!*v15)
  {
    ((void (*)(void *, void))v14)(v35, 0LL);
LABEL_7:
    ((void (*)(void *, void))v12)(v36, 0LL);
    swift_endAccess(v37);
    goto LABEL_8;
  }

  uint64_t v16 = sub_1002F7CA4(a1 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id);
  uint64_t v18 = v17;
  ((void (*)(void *, void))v14)(v35, 0LL);
  ((void (*)(void *, void))v12)(v36, 0LL);
  swift_endAccess(v37);
  if (v16) {
    sub_100021018(v16, v18);
  }
LABEL_8:
  swift_beginAccess(v10, v36, 32LL, 0LL);
  uint64_t v19 = *(void *)v10;
  if (*(void *)(*(void *)v10 + 16LL)
    && (unint64_t v20 = sub_10001C15C(v11), (v21 & 1) != 0)
    && (uint64_t v22 = *(void *)(*(void *)(v19 + 56) + 8 * v20), *(void *)(v22 + 16))
    && (unint64_t v23 = sub_100327790(a4), (v24 & 1) != 0))
  {
    uint64_t v25 = *(void *)(*(void *)(v22 + 56) + 8 * v23);
    swift_endAccess(v36);
    if (*(void *)(v25 + 16)) {
      goto LABEL_17;
    }
    swift_beginAccess(v10, v35, 33LL, 0LL);
    uint64_t v26 = sub_1002E9D6C(v36, v11);
    if (*v27)
    {
      uint64_t v28 = sub_1002F83C0(a4);
      ((void (*)(void *, void))v26)(v36, 0LL);
      swift_endAccess(v35);
      swift_bridgeObjectRelease(v28);
      goto LABEL_17;
    }

    ((void (*)(void *, void))v26)(v36, 0LL);
    uint64_t v29 = v35;
  }

  else
  {
    uint64_t v29 = v36;
  }

  swift_endAccess(v29);
LABEL_17:
  swift_beginAccess(v10, v36, 32LL, 0LL);
  uint64_t v30 = *(void *)v10;
  if (*(void *)(*(void *)v10 + 16LL) && (unint64_t v31 = sub_10001C15C(v11), (v32 & 1) != 0))
  {
    uint64_t v33 = *(void *)(*(void *)(v30 + 56) + 8 * v31);
    swift_endAccess(v36);
    if (!*(void *)(v33 + 16))
    {
      swift_beginAccess(v10, v36, 33LL, 0LL);
      uint64_t v34 = sub_1002F8310(v11);
      swift_endAccess(v36);
      swift_release(v9);
      return swift_bridgeObjectRelease(v34);
    }
  }

  else
  {
    swift_endAccess(v36);
  }

  return swift_release(v9);
}

uint64_t sub_1002F6C48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v19 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
  aBlock[4] = a1;
  uint64_t v22 = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000021F0;
  aBlock[3] = &unk_1003FADD0;
  uint64_t v12 = _Block_copy(aBlock);
  id v13 = v11;
  uint64_t v14 = swift_retain();
  static DispatchQoS.unspecified.getter(v14);
  unint64_t v20 = _swiftEmptyArrayStorage;
  uint64_t v15 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v16 = sub_100002274((uint64_t *)&unk_1004052A0);
  uint64_t v17 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v4, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v6, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release(v22);
}

uint64_t sub_1002F6E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = a2;
  uint64_t v3 = type metadata accessor for DriverEvent(0LL);
  __chkstk_darwin();
  uint64_t v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchTime(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  id v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v15 = (char *)v30 - v14;
  a1 += 16LL;
  swift_beginAccess(a1, v38, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1);
  if (result)
  {
    uint64_t v17 = result;
    if (*(void *)(result + *(void *)(*(void *)result + 496LL)))
    {
      uint64_t v34 = v3;
      uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v15, v35, v10);
      uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
      os_log_type_t v20 = static os_log_type_t.error.getter();
      LODWORD(v35) = v20;
      if (os_log_type_enabled(v19, v20))
      {
        os_log_t v33 = v19;
        char v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v32 = swift_slowAlloc(32LL, -1LL);
        uint64_t v37 = v32;
        *(_DWORD *)char v21 = 136315138;
        v30[1] = v21 + 12;
        unint64_t v31 = v21;
        v30[0] = v21 + 4;
        type metadata accessor for P2PTimer(0LL);
        variable initialization expression of AWDLPeer.lastUpdated();
        DispatchTime.distance(to:)(v13);
        uint64_t v22 = *(void (**)(char *, uint64_t))(v11 + 8);
        v22(v13, v10);
        uint64_t v23 = DispatchTimeInterval.description.getter();
        unint64_t v25 = v24;
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        uint64_t v36 = sub_10000235C(v23, v25, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
        __n128 v26 = swift_bridgeObjectRelease(v25);
        ((void (*)(char *, uint64_t, __n128))v22)(v15, v10, v26);
        uint64_t v19 = v33;
        uint64_t v27 = v31;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  (os_log_type_t)v35,  "Watchdog reset timed out because it has been in progress since %s",  v31,  0xCu);
        uint64_t v28 = v32;
        swift_arrayDestroy(v32, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v28, -1LL, -1LL);
        swift_slowDealloc(v27, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
      }

      uint64_t v29 = v34;
      *uint64_t v5 = 1;
      swift_storeEnumTagMultiPayload(v5, v29, 4LL);
      sub_1002F1154(v5);
      swift_release(v17);
      return sub_10005802C((uint64_t)v5, type metadata accessor for DriverEvent);
    }

    else
    {
      return swift_release(result);
    }
  }

  return result;
}

uint64_t sub_1002F7150(uint64_t a1)
{
  uint64_t v3 = &v8[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v4 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 0LL, 1LL, v4);
  uint64_t v5 = a1 + *(void *)(*(void *)a1 + 504LL);
  swift_beginAccess(v5, v8, 33LL, 0LL);
  sub_10022B968((uint64_t)v3, v5);
  return swift_endAccess(v8);
}

void sub_1002F7220(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchTime(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  id v13 = (char *)&v29 - v12;
  a1 += 16LL;
  swift_beginAccess(a1, v36, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    uint64_t v15 = Strong;
    if (*(void *)(Strong + *(void *)(*(void *)Strong + 496LL)))
    {
      uint64_t v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v13, a2, v8);
      uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
      os_log_type_t v18 = static os_log_type_t.error.getter();
      int v19 = v18;
      if (os_log_type_enabled(v17, v18))
      {
        os_log_t v33 = v17;
        uint64_t v20 = swift_slowAlloc(12LL, -1LL);
        int v31 = v19;
        char v21 = (uint8_t *)v20;
        uint64_t v32 = swift_slowAlloc(32LL, -1LL);
        uint64_t v35 = v32;
        uint64_t v30 = v21;
        *(_DWORD *)char v21 = 136315138;
        uint64_t v29 = v21 + 4;
        type metadata accessor for P2PTimer(0LL);
        variable initialization expression of AWDLPeer.lastUpdated();
        DispatchTime.distance(to:)(v11);
        uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
        v22(v11, v8);
        uint64_t v23 = DispatchTimeInterval.description.getter();
        unint64_t v25 = v24;
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        uint64_t v34 = sub_10000235C(v23, v25, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
        __n128 v26 = swift_bridgeObjectRelease(v25);
        ((void (*)(char *, uint64_t, __n128))v22)(v13, v8, v26);
        uint64_t v17 = v33;
        uint64_t v27 = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  (os_log_type_t)v31,  "Interface re-creation timed out because it has been in progress since %s",  v30,  0xCu);
        uint64_t v28 = v32;
        swift_arrayDestroy(v32, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v28, -1LL, -1LL);
        swift_slowDealloc(v27, -1LL, -1LL);
        swift_release(v15);
      }

      else
      {
        swift_release(v15);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
      }
    }

    else
    {
      swift_release(Strong);
    }
  }

void sub_1002F74E4()
{
}

void sub_1002F7510(uint64_t a1, unint64_t *a2, uint64_t *a3, unint64_t *a4, void (*a5)(void))
{
  if (!*a2)
  {
    uint64_t v10 = sub_1000022F8(a3);
    uint64_t v11 = sub_100087780(a4, a3, a5, (uint64_t)&protocol conformance descriptor for <A> A?);
    unint64_t v13 = type metadata accessor for MutableDriverProperty(a1, v10, v11, v12);
    if (!v14) {
      atomic_store(v13, a2);
    }
  }

void sub_1002F7598(uint64_t a1)
{
  if (!qword_10040FD70)
  {
    uint64_t v2 = sub_1000022F8(&qword_10040FD78);
    uint64_t v3 = sub_100087780( (unint64_t *)&unk_10040FD80,  &qword_10040FD78,  (void (*)(void))sub_1000878E0,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
    unint64_t v5 = type metadata accessor for ObservableWiFiProperty(a1, v2, v3, v4);
    if (!v6) {
      atomic_store(v5, (unint64_t *)&qword_10040FD70);
    }
  }

void sub_1002F7624(uint64_t a1)
{
  if (!qword_10040FD90)
  {
    uint64_t v2 = sub_1000022F8(&qword_10040FD98);
    unint64_t v3 = sub_1002F7688();
    unint64_t v5 = type metadata accessor for MutableDriverProperty(a1, v2, v3, v4);
    if (!v6) {
      atomic_store(v5, (unint64_t *)&qword_10040FD90);
    }
  }

unint64_t sub_1002F7688()
{
  unint64_t result = qword_10040FDA0;
  if (!qword_10040FDA0)
  {
    uint64_t v1 = sub_1000022F8(&qword_10040FD98);
    sub_10000AF70( &qword_10040B168,  type metadata accessor for NANAttribute,  (uint64_t)&protocol conformance descriptor for NANAttribute);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10040FDA0);
  }

  return result;
}

void sub_1002F7704(uint64_t a1)
{
  if (!qword_10040FDB0)
  {
    uint64_t v2 = sub_1000022F8(&qword_10040FDB8);
    uint64_t v3 = sub_100087780( (unint64_t *)&unk_10040FDC0,  &qword_10040FDB8,  (void (*)(void))sub_1001D48F0,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    unint64_t v5 = type metadata accessor for MutableDriverProperty(a1, v2, v3, v4);
    if (!v6) {
      atomic_store(v5, (unint64_t *)&qword_10040FDB0);
    }
  }

uint64_t sub_1002F7790(char *a1, uint64_t a2)
{
  uint64_t v41 = a2;
  uint64_t v3 = type metadata accessor for DispatchTime(0LL);
  uint64_t v45 = *(void *)(v3 - 8);
  uint64_t v46 = v3;
  __chkstk_darwin();
  uint64_t v43 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v40 = (char *)&v38 - v5;
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v47 = *(void *)(v6 - 8);
  uint64_t v48 = v6;
  __chkstk_darwin();
  uint64_t v44 = (void *)((char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v42 = (char *)&v38 - v8;
  uint64_t v9 = sub_100002274(&qword_10040FE78);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin();
  uint64_t v14 = (char *)&v38 - v13;
  char v15 = *a1;
  char v16 = a1[1];
  char v17 = a1[2];
  char v18 = a1[3];
  int v19 = a1[4];
  unsigned __int8 v20 = a1[5];
  int v38 = v20;
  int v39 = v19;
  char v21 = (char *)&v38 + *(int *)(v12 + 48) - v13;
  *uint64_t v14 = v15;
  v14[1] = v16;
  v14[2] = v17;
  v14[3] = v18;
  v14[4] = v19;
  v14[5] = v20;
  sub_100057FE8(v41, (uint64_t)v21, type metadata accessor for NANPeer);
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v22 = (uint64_t)&v11[*(int *)(v9 + 48)];
  *uint64_t v11 = v15;
  v11[1] = v16;
  void v11[2] = v17;
  _OWORD v11[3] = v18;
  v11[4] = v39;
  v11[5] = v38;
  sub_100057FE8((uint64_t)v21, v22, type metadata accessor for NANPeer);
  uint64_t v23 = type metadata accessor for NANPeer(0LL);
  uint64_t v25 = v45;
  uint64_t v24 = v46;
  __n128 v26 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v43, v22 + *(int *)(v23 + 24), v46);
  sub_10005802C(v22, type metadata accessor for NANPeer);
  uint64_t v27 = v42;
  uint64_t v28 = v40;
  DispatchTime.distance(to:)(v40);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v25 + 8);
  v29(v26, v24);
  v29(v28, v24);
  uint64_t v30 = (uint64_t)v44;
  *uint64_t v44 = 30LL;
  uint64_t v31 = v47;
  uint64_t v32 = v48;
  (*(void (**)(uint64_t, void, uint64_t))(v47 + 104))( v30,  enum case for DispatchTimeInterval.seconds(_:),  v48);
  uint64_t v33 = (uint64_t)v27;
  uint64_t v34 = v27;
  uint64_t v35 = v30;
  LOBYTE(v30) = static DispatchTimeInterval.< infix(_:_:)(v33, v30);
  uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
  v36(v35, v32);
  v36((uint64_t)v34, v32);
  sub_1000225EC((uint64_t)v14, &qword_10040FE78);
  return v30 & 1;
}

BOOL sub_1002F7A70(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = *(unsigned int *)(a1 + 2);
  uint64_t v10 = (uint64_t *)(a3 + *(void *)(*(void *)a3 + 440LL));
  swift_beginAccess(v10, v21, 32LL, 0LL);
  uint64_t v11 = *v10;
  if (*(void *)(v11 + 16) && (unint64_t v12 = sub_10001C15C(v7 | (v8 << 8) | (v9 << 16)), (v13 & 1) != 0))
  {
    unint64_t v14 = v12;
    uint64_t v15 = *(void *)(v11 + 56);
    uint64_t v16 = type metadata accessor for NANPeer(0LL);
    uint64_t v17 = *(void *)(v16 - 8);
    sub_100057FE8(v15 + *(void *)(v17 + 72) * v14, (uint64_t)v6, type metadata accessor for NANPeer);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v17 + 56))(v6, 0LL, 1LL, v16);
  }

  else
  {
    uint64_t v16 = type metadata accessor for NANPeer(0LL);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v6, 1LL, 1LL, v16);
  }

  swift_endAccess(v21);
  type metadata accessor for NANPeer(0LL);
  BOOL v18 = (*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48LL))(v6, 1LL, v16) != 1;
  sub_1000225EC((uint64_t)v6, &qword_10040FE50);
  return v18;
}

uint64_t sub_1002F7BDC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192LL;
    return __clz(__rbit64(v1)) + v2;
  }

  if (v6 < 9) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 96);
  if (v1)
  {
    uint64_t v2 = 256LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 5) {
    unint64_t v7 = 5LL;
  }
  unint64_t v8 = v7 - 5;
  uint64_t v9 = (unint64_t *)(a1 + 104);
  uint64_t v2 = 256LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t sub_1002F7CA4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  unint64_t v5 = sub_10001C578(a1);
  LOBYTE(asub_100058090(v4, v0 + 1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v8 = *v2;
  uint64_t v14 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100329D7C();
    uint64_t v8 = v14;
  }

  uint64_t v9 = *(void *)(v8 + 48);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))( v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * v5,  v10);
  uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 16 * v5);
  sub_10032863C(v5, v8);
  uint64_t v12 = *v2;
  *uint64_t v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1002F7D90(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain(v3);
  unint64_t v5 = sub_10001C15C(v4);
  char v7 = v6;
  swift_bridgeObjectRelease(v3);
  if ((v7 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v9 = *v2;
  uint64_t v13 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10032A0E0();
    uint64_t v9 = v13;
  }

  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v5);
  sub_100328640(v5, v9);
  uint64_t v11 = *v2;
  *uint64_t v2 = v9;
  swift_bridgeObjectRelease(v11);
  return v10;
}

void sub_1002F7E40(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  unint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain(v5);
  unint64_t v7 = sub_10001C15C(v6);
  char v9 = v8;
  swift_bridgeObjectRelease(v5);
  if ((v9 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v11 = *v3;
    uint64_t v16 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10032A298();
      uint64_t v11 = v16;
    }

    uint64_t v12 = *(void *)(v11 + 56) + 24 * v7;
    __int16 v13 = *(_WORD *)(v12 + 4);
    char v14 = *(_BYTE *)(v12 + 6);
    *(_DWORD *)a2 = *(_DWORD *)v12;
    *(_WORD *)(a2 + 4) = v13;
    *(_BYTE *)(a2 + 6) = v14;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(v12 + 8);
    sub_100328814(v7, v11);
    uint64_t v15 = *v3;
    *uint64_t v3 = v11;
    swift_bridgeObjectRelease(v15);
  }

  else
  {
    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = 0LL;
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xB000000000000000LL;
  }

uint64_t sub_1002F7F24(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  swift_bridgeObjectRetain(v4);
  unint64_t v5 = sub_1003277F4(a1);
  LOBYTE(asub_100058090(v4, v0 + 1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v8 = *v2;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10032A484();
    uint64_t v8 = v12;
  }

  uint64_t v9 = *(void *)(*(void *)(v8 + 56) + 8 * v5);
  sub_100328A00(v5, v8);
  uint64_t v10 = *v2;
  *uint64_t v2 = v8;
  swift_bridgeObjectRelease(v10);
  return v9;
}

uint64_t sub_1002F7FF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002F8010( a1,  type metadata accessor for NANPeer.Service.AuthenticationStatus,  (void (*)(unint64_t, uint64_t))sub_10032901C,  (void (*)(void))sub_10032B2F8,  a2);
}

uint64_t sub_1002F8010@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, void (*a3)(unint64_t, uint64_t)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = v5;
  uint64_t v11 = *v5;
  unint64_t v12 = a1 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain(v11);
  unint64_t v13 = sub_10001C08C(v12);
  char v15 = v14;
  __n128 v16 = swift_bridgeObjectRelease(v11);
  if ((v15 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
    uint64_t v18 = *v9;
    uint64_t v27 = *v9;
    *uint64_t v9 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a4();
      uint64_t v18 = v27;
    }

    uint64_t v19 = *(void *)(v18 + 56);
    uint64_t v20 = a2(0LL);
    uint64_t v21 = *(void *)(v20 - 8);
    sub_100022628(v19 + *(void *)(v21 + 72) * v13, a5, a2);
    a3(v13, v18);
    uint64_t v22 = *v9;
    *uint64_t v9 = v18;
    __n128 v23 = swift_bridgeObjectRelease(v22);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, __n128))(v21 + 56))(a5, 0LL, 1LL, v20, v23);
  }

  else
  {
    uint64_t v25 = ((uint64_t (*)(void, __n128))a2)(0LL, v16);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v25 - 8) + 56LL))( a5,  1LL,  1LL,  v25,  v26);
  }

double sub_1002F8134@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_10001C578(a1);
  LOBYTE(asub_100058090(v4, v0 + 1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v10 = *v3;
    uint64_t v15 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10032BA84();
      uint64_t v10 = v15;
    }

    uint64_t v11 = *(void *)(v10 + 48);
    uint64_t v12 = type metadata accessor for UUID(0LL);
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))( v11 + *(void *)(*(void *)(v12 - 8) + 72LL) * v7,  v12);
    sub_1000589F8((__int128 *)(*(void *)(v10 + 56) + 40 * v7), a2);
    sub_10032924C(v7, v10);
    uint64_t v13 = *v3;
    *uint64_t v3 = v10;
    *(void *)&double result = swift_bridgeObjectRelease(v13).n128_u64[0];
  }

  else
  {
    *(void *)(a2 + 32) = 0LL;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
  }

  return result;
}

uint64_t sub_1002F8238(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  unint64_t v5 = sub_10001C578(a1);
  LOBYTE(asub_100058090(v4, v0 + 1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v8 = *v2;
  uint64_t v14 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10032C37C();
    uint64_t v8 = v14;
  }

  uint64_t v9 = *(void *)(v8 + 48);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))( v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * v5,  v10);
  uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v5);
  sub_100329908(v5, v8);
  uint64_t v12 = *v2;
  *uint64_t v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1002F8310(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain(v3);
  unint64_t v5 = sub_10001C15C(v4);
  char v7 = v6;
  swift_bridgeObjectRelease(v3);
  if ((v7 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v9 = *v2;
  uint64_t v13 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100329F28();
    uint64_t v9 = v13;
  }

  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v5);
  sub_100328640(v5, v9);
  uint64_t v11 = *v2;
  *uint64_t v2 = v9;
  swift_bridgeObjectRelease(v11);
  return v10;
}

uint64_t sub_1002F83C0(char a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_100327790(a1);
  if ((v4 & 1) == 0) {
    return 0LL;
  }
  unint64_t v5 = v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  uint64_t v7 = *v1;
  uint64_t v11 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100329D88();
    uint64_t v7 = v11;
  }

  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v5);
  sub_100329BA8(v5, v7);
  uint64_t v9 = *v2;
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease(v9);
  return v8;
}

uint64_t sub_1002F8454@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002F8470( a1,  type metadata accessor for AWDLPeer,  (void (*)(unint64_t, uint64_t))sub_100328BB0,  (void (*)(void))sub_10032A624,  a2);
}

uint64_t sub_1002F8470@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, void (*a3)(unint64_t, uint64_t)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = v5;
  uint64_t v11 = *v5;
  unint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain(v11);
  unint64_t v13 = sub_10001C15C(v12);
  char v15 = v14;
  swift_bridgeObjectRelease(v11);
  if ((v15 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
    uint64_t v17 = *v9;
    uint64_t v24 = *v9;
    *uint64_t v9 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a4();
      uint64_t v17 = v24;
    }

    uint64_t v18 = *(void *)(v17 + 56);
    uint64_t v19 = a2(0LL);
    uint64_t v20 = *(void *)(v19 - 8);
    sub_100022628(v18 + *(void *)(v20 + 72) * v13, a5, a2);
    a3(v13, v17);
    uint64_t v21 = *v9;
    *uint64_t v9 = v17;
    swift_bridgeObjectRelease(v21);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(a5, 0LL, 1LL, v19);
  }

  else
  {
    uint64_t v23 = a2(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))( a5,  1LL,  1LL,  v23);
  }

void (*sub_1002F8594(void *a1, unsigned __int8 a2))(uint64_t)
{
  unint64_t v5 = malloc(0x50uLL);
  *a1 = v5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  void v5[8] = sub_10013EAA4(v5);
  void v5[9] = sub_1002F8874((uint64_t)(v5 + 4), a2, isUniquelyReferenced_nonNull_native);
  return sub_1002F8610;
}

void (*sub_1002F8614(void *a1, uint64_t a2))(uint64_t a1)
{
  unint64_t v5 = malloc(0x68uLL);
  *a1 = v5;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  void v5[8] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  void v5[9] = v7;
  uint64_t v8 = malloc(*(void *)(v7 + 64));
  void v5[10] = v8;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v8, a2, v6);
  v5[11] = sub_10013EA78(v5);
  void v5[12] = sub_1002F8A30(v5 + 4, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  return sub_1002F86D4;
}

void sub_1002F86D4(uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 88LL);
  uint64_t v4 = *(void *)(*(void *)a1 + 72LL);
  unint64_t v3 = *(void **)(*(void *)a1 + 80LL);
  uint64_t v5 = *(void *)(*(void *)a1 + 64LL);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 96LL))(*(void *)a1 + 32LL, 0LL);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  v2(v1, 0LL);
  free(v3);
  free(v1);
}

void (*sub_1002F8740(void *a1, char a2))(uint64_t)
{
  uint64_t v5 = malloc(0x50uLL);
  *a1 = v5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  void v5[8] = sub_10013EAA4(v5);
  void v5[9] = sub_1002F8B88((uint64_t)(v5 + 4), a2, isUniquelyReferenced_nonNull_native);
  return sub_1002F8610;
}

void (*sub_1002F87BC(void *a1, uint64_t a2))(uint64_t)
{
  uint64_t v5 = malloc(0x50uLL);
  *a1 = v5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  void v5[8] = sub_10013EAA4(v5);
  void v5[9] = sub_1002F8CE0(v5 + 4, a2 & 0xFFFFFFFFFFFFLL, isUniquelyReferenced_nonNull_native);
  return sub_1002F8610;
}

void sub_1002F8838(uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 64LL);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 72LL))(*(void *)a1 + 32LL, 0LL);
  v2(v1, 0LL);
  free(v1);
}

void (*sub_1002F8874(uint64_t a1, unsigned __int8 a2, char a3))(uint64_t a1)
{
  uint64_t v4 = v3;
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 24) = a2;
  uint64_t v8 = sub_100002274(&qword_10040E460);
  uint64_t v9 = malloc(*(void *)(*(void *)(v8 - 8) + 64LL));
  *(void *)(a1 + 8) = v9;
  uint64_t v10 = *v3;
  unint64_t v12 = sub_100327958(a2);
  *(_BYTE *)(a1 + 25) = v11 & 1;
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = *(void *)(v10 + 24);
    if (v17 >= v15 && (a3 & 1) != 0)
    {
LABEL_7:
      *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v18 = *(void *)(*v4 + 56LL);
        uint64_t v19 = type metadata accessor for NANPeer.Service(0LL);
        uint64_t v20 = *(void *)(v19 - 8);
        sub_100022628(v18 + *(void *)(v20 + 72) * v12, (uint64_t)v9, type metadata accessor for NANPeer.Service);
        uint64_t v21 = 0LL;
LABEL_12:
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v9, v21, 1LL, v19);
        return sub_1002F89EC;
      }

void sub_1002F89EC(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 8);
  sub_10029EC68((uint64_t)v1, *(_BYTE *)(a1 + 25), *(uint64_t **)a1, *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
  sub_1000225EC((uint64_t)v1, &qword_10040E460);
  free(v1);
}

void (*sub_1002F8A30(void *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  _OWORD v8[2] = v4;
  uint64_t v9 = *v4;
  unint64_t v11 = sub_10001C578(a2);
  *((_BYTE *)v8 + 32) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }

  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      void v8[3] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = *(void *)(*(void *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *uint64_t v8 = v17;
        return sub_1002F8B4C;
      }

void sub_1002F8B4C(uint64_t **a1)
{
  unint64_t v1 = *a1;
  sub_10029EFA0(*a1, *((_BYTE *)*a1 + 32), (uint64_t *)(*a1)[2], (*a1)[3], (*a1)[1]);
  swift_bridgeObjectRelease(*v1);
  free(v1);
}

unint64_t (*sub_1002F8B88(uint64_t a1, char a2, char a3))(unint64_t result)
{
  uint64_t v4 = v3;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 24) = a2;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100327790(a2);
  *(_BYTE *)(a1 + 25) = v9 & 1;
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = *(void *)(v8 + 24);
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        uint64_t v16 = *(void *)(*(void *)(*v4 + 56LL) + 8 * v10);
LABEL_12:
        *(void *)a1 = v16;
        return sub_1002F8C98;
      }

unint64_t sub_1002F8C98(unint64_t result)
{
  uint64_t v1 = *(void *)result;
  if (*(void *)result)
  {
    uint64_t v2 = **(void ***)(result + 8);
    if ((*(_BYTE *)(result + 25) & 1) != 0) {
      *(void *)(v2[7] + 8LL * *(void *)(result + sub_1002E4618(*(void *)(v0 + 16)) = v1;
    }
    else {
      return sub_100244B34(*(void *)(result + 16), *(_BYTE *)(result + 24), v1, v2);
    }
  }

  else if ((*(_BYTE *)(result + 25) & 1) != 0)
  {
    return sub_100329BA8(*(void *)(result + 16), **(void **)(result + 8));
  }

  return result;
}

void (*sub_1002F8CE0(void *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  _OWORD v8[2] = v4;
  uint64_t v9 = *v4;
  unint64_t v10 = a2 & 0xFFFFFFFFFFFFLL;
  unint64_t v12 = sub_10001C15C(a2 & 0xFFFFFFFFFFFFLL);
  *((_BYTE *)v8 + 32) = v11 & 1;
  uint64_t v13 = *(void *)(v9 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = *(void *)(v9 + 24);
    if (v17 >= v15 && (a3 & 1) != 0)
    {
LABEL_7:
      void v8[3] = v12;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v18 = *(void *)(*(void *)(*v4 + 56) + 8 * v12);
LABEL_12:
        *uint64_t v8 = v18;
        return sub_1002F8E00;
      }

void sub_1002F8E00(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  char v3 = *((_BYTE *)*a1 + 32);
  if (v2)
  {
    unint64_t v4 = v1[3];
    uint64_t v5 = *(void **)v1[2];
    if ((v3 & 1) != 0) {
      *(void *)(v5[7] + 8 * v4) = v2;
    }
    else {
      sub_100244B78(v4, v1[1] & 0xFFFFFFFFFFFFLL, v2, v5);
    }
  }

  else if (((*a1)[4] & 1) != 0)
  {
    sub_100328640(v1[3], *(void *)v1[2]);
  }

  uint64_t v6 = *v1;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRelease(v6);
  free(v1);
}

uint64_t sub_1002F8E84( uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, unint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = v4;
  uint64_t v9 = isStackAllocationSafe;
  char v10 = *(_BYTE *)(a3 + 32);
  unsigned int v11 = v10 & 0x3F;
  unint64_t v12 = (1LL << v10) + 63;
  unint64_t v13 = v12 >> 6;
  size_t v14 = 8 * (v12 >> 6);
  if (v11 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v12 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v18 - ((v14 + 15) & 0x3FFFFFFFFFFFFFF0LL), v14);
    uint64_t v15 = a4((char *)&v18 - ((v14 + 15) & 0x3FFFFFFFFFFFFFF0LL), v13, a3, v9, a2);
    if (v4) {
      swift_willThrow(v15);
    }
    else {
      return v15;
    }
  }

  else
  {
    char v16 = (void *)swift_slowAlloc(v14, -1LL);
    bzero(v16, v14);
    uint64_t v6 = a4((char *)v16, v13, a3, v9, a2);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  return v6;
}

uint64_t sub_1002F9000(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(int *, uint64_t *))
{
  unint64_t v22 = (unint64_t *)result;
  int64_t v7 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v24 = a3 + 64;
  uint64_t v8 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 64);
  int64_t v25 = (unint64_t)(v8 + 63) >> 6;
  while (v10)
  {
    unint64_t v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v12 = v11 | (v7 << 6);
LABEL_17:
    uint64_t v16 = *(void *)(a3 + 56);
    uint64_t v17 = *(void *)(a3 + 48) + 6 * v12;
    __int16 v18 = *(_WORD *)(v17 + 4);
    int v27 = *(_DWORD *)v17;
    __int16 v28 = v18;
    uint64_t v19 = *(void *)(v16 + 8 * v12);
    uint64_t v26 = v19;
    swift_bridgeObjectRetain(v19);
    char v20 = a4(&v27, &v26);
    double result = swift_bridgeObjectRelease(v19);
    if (v4) {
      return result;
    }
    if ((v20 & 1) != 0)
    {
      *(unint64_t *)((char *)v22 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
      BOOL v13 = __OFADD__(v23++, 1LL);
      if (v13) {
        goto LABEL_30;
      }
    }
  }

  BOOL v13 = __OFADD__(v7++, 1LL);
  if (v13)
  {
    __break(1u);
    goto LABEL_29;
  }

  if (v7 >= v25) {
    return sub_1002F9B8C(v22, a2, v23, a3);
  }
  unint64_t v14 = *(void *)(v24 + 8 * v7);
  if (v14)
  {
LABEL_16:
    unint64_t v10 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v7 << 6);
    goto LABEL_17;
  }

  int64_t v15 = v7 + 1;
  if (v7 + 1 >= v25) {
    return sub_1002F9B8C(v22, a2, v23, a3);
  }
  unint64_t v14 = *(void *)(v24 + 8 * v15);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v7 + 2;
  if (v7 + 2 >= v25) {
    return sub_1002F9B8C(v22, a2, v23, a3);
  }
  unint64_t v14 = *(void *)(v24 + 8 * v15);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v7 + 3;
  if (v7 + 3 >= v25) {
    return sub_1002F9B8C(v22, a2, v23, a3);
  }
  unint64_t v14 = *(void *)(v24 + 8 * v15);
  if (v14)
  {
LABEL_15:
    int64_t v7 = v15;
    goto LABEL_16;
  }

  while (1)
  {
    int64_t v7 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v7 >= v25) {
      return sub_1002F9B8C(v22, a2, v23, a3);
    }
    unint64_t v14 = *(void *)(v24 + 8 * v7);
    ++v15;
    if (v14) {
      goto LABEL_16;
    }
  }

void *sub_1002F9208(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(int *, char *))
{
  uint64_t v30 = a4;
  uint64_t v24 = a2;
  int64_t v25 = a1;
  uint64_t v29 = *(void *)(type metadata accessor for NANPeer(0LL) - 8);
  double result = (void *)__chkstk_darwin();
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v9 = 0LL;
  uint64_t v10 = *(void *)(a3 + 64);
  uint64_t v26 = 0LL;
  uint64_t v27 = a3 + 64;
  uint64_t v11 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v28 = (unint64_t)(v11 + 63) >> 6;
  while (v13)
  {
    unint64_t v14 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    unint64_t v15 = v14 | (v9 << 6);
LABEL_17:
    uint64_t v19 = *(void *)(a3 + 56);
    uint64_t v20 = *(void *)(a3 + 48) + 6 * v15;
    __int16 v21 = *(_WORD *)(v20 + 4);
    int v31 = *(_DWORD *)v20;
    __int16 v32 = v21;
    sub_100057FE8(v19 + *(void *)(v29 + 72) * v15, (uint64_t)v8, type metadata accessor for NANPeer);
    char v22 = v30(&v31, v8);
    double result = (void *)sub_10005802C((uint64_t)v8, type metadata accessor for NANPeer);
    if (v4) {
      return result;
    }
    if ((v22 & 1) != 0)
    {
      *(unint64_t *)((char *)v25 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      BOOL v16 = __OFADD__(v26++, 1LL);
      if (v16) {
        goto LABEL_30;
      }
    }
  }

  BOOL v16 = __OFADD__(v9++, 1LL);
  if (v16)
  {
    __break(1u);
    goto LABEL_29;
  }

  if (v9 >= v28) {
    return sub_1002F9E9C(v25, v24, v26, (void *)a3);
  }
  unint64_t v17 = *(void *)(v27 + 8 * v9);
  if (v17)
  {
LABEL_16:
    unint64_t v13 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
    goto LABEL_17;
  }

  int64_t v18 = v9 + 1;
  if (v9 + 1 >= v28) {
    return sub_1002F9E9C(v25, v24, v26, (void *)a3);
  }
  unint64_t v17 = *(void *)(v27 + 8 * v18);
  if (v17) {
    goto LABEL_15;
  }
  int64_t v18 = v9 + 2;
  if (v9 + 2 >= v28) {
    return sub_1002F9E9C(v25, v24, v26, (void *)a3);
  }
  unint64_t v17 = *(void *)(v27 + 8 * v18);
  if (v17) {
    goto LABEL_15;
  }
  int64_t v18 = v9 + 3;
  if (v9 + 3 >= v28) {
    return sub_1002F9E9C(v25, v24, v26, (void *)a3);
  }
  unint64_t v17 = *(void *)(v27 + 8 * v18);
  if (v17)
  {
LABEL_15:
    int64_t v9 = v18;
    goto LABEL_16;
  }

  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v28) {
      return sub_1002F9E9C(v25, v24, v26, (void *)a3);
    }
    unint64_t v17 = *(void *)(v27 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_16;
    }
  }

void *sub_1002F9464(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v47 = a1;
  uint64_t v48 = a2;
  uint64_t v51 = *(void *)(type metadata accessor for NANPeer.Service.AuthenticationStatus(0LL) - 8);
  __chkstk_darwin();
  __chkstk_darwin();
  uint64_t v50 = (uint64_t)&v46 - v7;
  if (!a3) {
    return _swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return a4;
  }

  uint64_t v56 = (void *)v6;
  sub_100002274(&qword_10040FE80);
  double result = (void *)static _DictionaryStorage.allocate(capacity:)(a3);
  uint64_t v57 = result;
  if (v48 < 1) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *v47;
  }
  uint64_t v10 = 0LL;
  uint64_t v11 = v57 + 8;
  uint64_t v49 = a4;
  while (1)
  {
    uint64_t v55 = a3;
    if (v9)
    {
      uint64_t v52 = (v9 - 1) & v9;
      uint64_t v53 = v10;
      unint64_t v12 = __clz(__rbit64(v9)) | (v10 << 6);
    }

    else
    {
      uint64_t v13 = v10 + 1;
      if (__OFADD__(v10, 1LL)) {
        goto LABEL_40;
      }
      if (v13 >= v48) {
        return v57;
      }
      unint64_t v14 = v47[v13];
      uint64_t v15 = v10 + 1;
      if (!v14)
      {
        uint64_t v15 = v10 + 2;
        if (v10 + 2 >= v48) {
          return v57;
        }
        unint64_t v14 = v47[v15];
        if (!v14)
        {
          uint64_t v15 = v10 + 3;
          if (v10 + 3 >= v48) {
            return v57;
          }
          unint64_t v14 = v47[v15];
          if (!v14)
          {
            uint64_t v16 = v10 + 4;
            if (v10 + 4 >= v48) {
              return v57;
            }
            unint64_t v14 = v47[v16];
            if (!v14)
            {
              while (1)
              {
                uint64_t v15 = v16 + 1;
                if (__OFADD__(v16, 1LL)) {
                  goto LABEL_41;
                }
                if (v15 >= v48) {
                  return v57;
                }
                unint64_t v14 = v47[v15];
                ++v16;
                if (v14) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v15 = v10 + 4;
          }
        }
      }

uint64_t sub_1002F9840(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v47 = type metadata accessor for UUID(0LL);
  uint64_t v43 = *(void *)(v47 - 8);
  __chkstk_darwin();
  uint64_t v46 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  BOOL v42 = (char *)&v38 - v9;
  if (!a3) {
    return (uint64_t)_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }

  sub_100002274((uint64_t *)&unk_100410560);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)(a3);
  uint64_t v11 = result;
  unint64_t v39 = a1;
  uint64_t v40 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0LL;
  }
  else {
    unint64_t v12 = *a1;
  }
  uint64_t v13 = 0LL;
  uint64_t v14 = result + 64;
  unint64_t v41 = a4;
  uint64_t v15 = v47;
  while (1)
  {
    if (v12)
    {
      uint64_t v44 = (v12 - 1) & v12;
      uint64_t v45 = v13;
      unint64_t v16 = __clz(__rbit64(v12)) | (v13 << 6);
    }

    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_40;
      }
      if (v17 >= v40) {
        return v11;
      }
      unint64_t v18 = v39[v17];
      uint64_t v19 = v13 + 1;
      if (!v18)
      {
        uint64_t v19 = v13 + 2;
        if (v13 + 2 >= v40) {
          return v11;
        }
        unint64_t v18 = v39[v19];
        if (!v18)
        {
          uint64_t v19 = v13 + 3;
          if (v13 + 3 >= v40) {
            return v11;
          }
          unint64_t v18 = v39[v19];
          if (!v18)
          {
            uint64_t v20 = v13 + 4;
            if (v13 + 4 >= v40) {
              return v11;
            }
            unint64_t v18 = v39[v20];
            if (!v18)
            {
              while (1)
              {
                uint64_t v19 = v20 + 1;
                if (__OFADD__(v20, 1LL)) {
                  goto LABEL_41;
                }
                if (v19 >= v40) {
                  return v11;
                }
                unint64_t v18 = v39[v19];
                ++v20;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v19 = v13 + 4;
          }
        }
      }

Swift::Int sub_1002F9B8C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }

  sub_100002274((uint64_t *)&unk_10040CC70);
  Swift::Int result = static _DictionaryStorage.allocate(capacity:)(v5);
  Swift::Int v7 = result;
  if (a2 < 1) {
    unint64_t v8 = 0LL;
  }
  else {
    unint64_t v8 = *a1;
  }
  uint64_t v9 = 0LL;
  Swift::Int v10 = result + 64;
  uint64_t v36 = v4;
  while (1)
  {
    if (v8)
    {
      uint64_t v37 = (v8 - 1) & v8;
      uint64_t v38 = v9;
      unint64_t v11 = __clz(__rbit64(v8)) | (v9 << 6);
    }

    else
    {
      uint64_t v12 = v9 + 1;
      if (__OFADD__(v9, 1LL)) {
        goto LABEL_40;
      }
      if (v12 >= a2) {
        return v7;
      }
      unint64_t v13 = a1[v12];
      uint64_t v14 = v9 + 1;
      if (!v13)
      {
        uint64_t v14 = v9 + 2;
        if (v9 + 2 >= a2) {
          return v7;
        }
        unint64_t v13 = a1[v14];
        if (!v13)
        {
          uint64_t v14 = v9 + 3;
          if (v9 + 3 >= a2) {
            return v7;
          }
          unint64_t v13 = a1[v14];
          if (!v13)
          {
            uint64_t v15 = v9 + 4;
            if (v9 + 4 >= a2) {
              return v7;
            }
            unint64_t v13 = a1[v15];
            if (!v13)
            {
              while (1)
              {
                uint64_t v14 = v15 + 1;
                if (__OFADD__(v15, 1LL)) {
                  goto LABEL_41;
                }
                if (v14 >= a2) {
                  return v7;
                }
                unint64_t v13 = a1[v14];
                ++v15;
                if (v13) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v14 = v9 + 4;
          }
        }
      }

void *sub_1002F9E9C(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v45 = *(void *)(type metadata accessor for NANPeer(0LL) - 8);
  __chkstk_darwin();
  __chkstk_darwin();
  uint64_t v44 = (uint64_t)&v39 - v7;
  if (!a3) {
    return _swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return a4;
  }

  uint64_t v43 = v6;
  sub_100002274(&qword_10040FE70);
  Swift::Int result = (void *)static _DictionaryStorage.allocate(capacity:)(a3);
  uint64_t v50 = result;
  if (v41 < 1) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *v40;
  }
  uint64_t v10 = 0LL;
  unint64_t v11 = v50 + 8;
  uint64_t v12 = (uint64_t)v43;
  BOOL v42 = a4;
  while (1)
  {
    uint64_t v49 = a3;
    if (v9)
    {
      uint64_t v46 = (v9 - 1) & v9;
      uint64_t v47 = v10;
      unint64_t v13 = __clz(__rbit64(v9)) | (v10 << 6);
    }

    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1LL)) {
        goto LABEL_40;
      }
      if (v14 >= v41) {
        return v50;
      }
      unint64_t v15 = v40[v14];
      uint64_t v16 = v10 + 1;
      if (!v15)
      {
        uint64_t v16 = v10 + 2;
        if (v10 + 2 >= v41) {
          return v50;
        }
        unint64_t v15 = v40[v16];
        if (!v15)
        {
          uint64_t v16 = v10 + 3;
          if (v10 + 3 >= v41) {
            return v50;
          }
          unint64_t v15 = v40[v16];
          if (!v15)
          {
            uint64_t v17 = v10 + 4;
            if (v10 + 4 >= v41) {
              return v50;
            }
            unint64_t v15 = v40[v17];
            if (!v15)
            {
              while (1)
              {
                uint64_t v16 = v17 + 1;
                if (__OFADD__(v17, 1LL)) {
                  goto LABEL_41;
                }
                if (v16 >= v41) {
                  return v50;
                }
                unint64_t v15 = v40[v16];
                ++v17;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v16 = v10 + 4;
          }
        }
      }

Swift::Int sub_1002FA254(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }

  sub_100002274((uint64_t *)&unk_10040CCC0);
  Swift::Int result = static _DictionaryStorage.allocate(capacity:)(v5);
  Swift::Int v8 = result;
  uint64_t v36 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0LL;
  Swift::Int v11 = result + 64;
  uint64_t v38 = v4;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      uint64_t v39 = v10;
      unint64_t v13 = v12 | (v10 << 6);
    }

    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1LL)) {
        goto LABEL_43;
      }
      if (v14 >= v36) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      uint64_t v16 = v10 + 1;
      if (!v15)
      {
        uint64_t v16 = v10 + 2;
        if (v10 + 2 >= v36) {
          return v8;
        }
        unint64_t v15 = a1[v16];
        if (!v15)
        {
          uint64_t v16 = v10 + 3;
          if (v10 + 3 >= v36) {
            return v8;
          }
          unint64_t v15 = a1[v16];
          if (!v15)
          {
            uint64_t v17 = v10 + 4;
            if (v10 + 4 >= v36) {
              return v8;
            }
            unint64_t v15 = a1[v17];
            if (!v15)
            {
              while (1)
              {
                uint64_t v16 = v17 + 1;
                if (__OFADD__(v17, 1LL)) {
                  goto LABEL_44;
                }
                if (v16 >= v36) {
                  return v8;
                }
                unint64_t v15 = a1[v16];
                ++v17;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v16 = v10 + 4;
          }
        }
      }

Swift::Int sub_1002FA578(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v2 = sub_10026E760(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_1002FA5E0(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_1002FA5E0(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      uint64_t v80 = 0LL;
      uint64_t v81 = *v2;
      uint64_t v82 = 1LL;
      while (1)
      {
        char v83 = *(_BYTE *)(v81 + v82);
        unsigned int v84 = byte_100360132[v83];
        uint64_t v85 = v80;
        do
        {
          uint64_t v86 = *(char *)(v81 + v85);
          if (v84 >= byte_100360132[v86]) {
            break;
          }
          if (!v81) {
            goto LABEL_142;
          }
          *(_BYTE *)(v81 + v85 + sub_100058090(v4, v0 + 1) = v86;
          *(_BYTE *)(v81 + v85--) = v83;
        }

        while (v85 != -1);
        ++v82;
        ++v80;
        if (v82 == v3) {
          return result;
        }
      }
    }

    goto LABEL_138;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1)
  {
LABEL_147:
    Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
    __break(1u);
    return result;
  }

  Swift::Int v95 = result;
  if (v3 < 2)
  {
    Swift::Int v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      Swift::Int v11 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_104;
    }

    uint64_t v94 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)( v5 >> 1,  &type metadata for NANAttribute.AttributeType);
    *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
    uint64_t v94 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }

  Swift::Int v9 = 0LL;
  uint64_t v93 = v2;
  uint64_t v10 = *v2;
  Swift::Int v11 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v96 = v3;
  uint64_t v97 = *v2;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      uint64_t v14 = *(char *)(v10 + v9);
      unsigned int v15 = byte_100360132[v14];
      unsigned int v16 = byte_100360132[*(char *)(v10 + v13)];
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        while (v15 < v16 != byte_100360132[*(char *)(v10 + v9)] >= byte_100360132[(char)v14])
        {
          LOBYTE(v14) = *(_BYTE *)(v10 + v9++);
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }

      if (v15 < v16)
      {
        if (v9 < v13) {
          goto LABEL_139;
        }
        if (v13 < v9)
        {
          Swift::Int v17 = v9 - 1;
          Swift::Int v18 = v13;
          do
          {
            if (v18 != v17)
            {
              if (!v10) {
                goto LABEL_145;
              }
              char v19 = *(_BYTE *)(v10 + v18);
              *(_BYTE *)(v10 + v18) = *(_BYTE *)(v10 + v17);
              *(_BYTE *)(v10 + v17) = v19;
            }

            BOOL v59 = ++v18 < v17--;
          }

          while (v59);
        }
      }
    }

    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_137;
      }
      if (v9 - v13 < v95)
      {
        Swift::Int v20 = v13 + v95;
        if (__OFADD__(v13, v95)) {
          goto LABEL_140;
        }
        if (v20 >= v3) {
          Swift::Int v20 = v3;
        }
        if (v20 < v13) {
          goto LABEL_141;
        }
        if (v9 != v20)
        {
          uint64_t v21 = (_BYTE *)(v10 + v9);
          do
          {
            char v22 = *(_BYTE *)(v10 + v9);
            unsigned int v23 = byte_100360132[v22];
            Swift::Int v24 = v13;
            uint64_t v25 = v21;
            do
            {
              uint64_t v26 = (char)*(v25 - 1);
              if (v23 >= byte_100360132[v26]) {
                break;
              }
              if (!v10) {
                goto LABEL_143;
              }
              *uint64_t v25 = v26;
              *--uint64_t v25 = v22;
              ++v24;
            }

            while (v9 != v24);
            ++v9;
            ++v21;
          }

          while (v9 != v20);
          Swift::Int v9 = v20;
        }
      }
    }

    if (v9 < v13)
    {
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }

    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0) {
      Swift::Int v11 = sub_1000EA720(0LL, *((void *)v11 + 2) + 1LL, 1, v11);
    }
    unint64_t v28 = *((void *)v11 + 2);
    unint64_t v27 = *((void *)v11 + 3);
    unint64_t v12 = v28 + 1;
    uint64_t v10 = v97;
    if (v28 >= v27 >> 1)
    {
      uint64_t v77 = sub_1000EA720((char *)(v27 > 1), v28 + 1, 1, v11);
      uint64_t v10 = v97;
      Swift::Int v11 = v77;
    }

    *((void *)v11 + 2) = v12;
    unint64_t v29 = v11 + 32;
    char v30 = &v11[16 * v28 + 32];
    *(void *)char v30 = v13;
    *((void *)v30 + sub_100058090(v4, v0 + 1) = v9;
    if (v28) {
      break;
    }
    unint64_t v12 = 1LL;
LABEL_15:
    Swift::Int v3 = v96;
    if (v9 >= v96)
    {
      uint64_t v2 = v93;
      Swift::Int v8 = v94;
LABEL_104:
      uint64_t v79 = v11;
      uint64_t v94 = v8;
      if (v12 < 2) {
        goto LABEL_95;
      }
      uint64_t v87 = *v2;
      while (1)
      {
        unint64_t v88 = v12 - 2;
        if (v12 < 2) {
          break;
        }
        if (!v87) {
          goto LABEL_146;
        }
        uint64_t v78 = v79;
        uint64_t v89 = *(void *)&v79[16 * v88 + 32];
        uint64_t v90 = *(void *)&v79[16 * v12 + 24];
        sub_1002FAC9C((char *)(v87 + v89), (char *)(v87 + *(void *)&v79[16 * v12 + 16]), v87 + v90, __dst);
        if (v1) {
          goto LABEL_94;
        }
        if (v90 < v89) {
          goto LABEL_134;
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v78) & 1) == 0) {
          uint64_t v78 = sub_1000EAA0C((uint64_t)v78);
        }
        if (v88 >= *((void *)v78 + 2)) {
          goto LABEL_135;
        }
        uint64_t v91 = &v78[16 * v88 + 32];
        *(void *)uint64_t v91 = v89;
        *((void *)v91 + sub_100058090(v4, v0 + 1) = v90;
        unint64_t v92 = *((void *)v78 + 2);
        if (v12 > v92) {
          goto LABEL_136;
        }
        memmove(&v78[16 * v12 + 16], &v78[16 * v12 + 32], 16 * (v92 - v12));
        uint64_t v79 = v78;
        *((void *)v78 + 2) = v92 - 1;
        unint64_t v12 = v92 - 1;
        if (v92 <= 2) {
          goto LABEL_95;
        }
      }

uint64_t sub_1002FAC9C(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char v22 = __src;
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  size_t v8 = a2 - __src;
  unint64_t v9 = a3 - (void)a2;
  uint64_t v21 = __dst;
  if (a2 - __src >= (uint64_t)(a3 - (void)a2))
  {
    if ((v9 & 0x8000000000000000LL) == 0)
    {
      uint64_t v14 = &v4[v9];
      Swift::Int v20 = &v4[v9];
      char v22 = v6;
      if (v7 < v6 && (char *)a3 != v6)
      {
        unsigned int v15 = (char *)(a3 - 1);
        while (1)
        {
          unsigned int v16 = v6 - 1;
          uint64_t v17 = *(v6 - 1);
          Swift::Int v18 = v15 + 1;
          if (byte_100360132[*(v14 - 1)] >= byte_100360132[v17])
          {
            Swift::Int v20 = v14 - 1;
            if (v18 < v14 || v15 >= v14 || v18 != v14) {
              *unsigned int v15 = *(v14 - 1);
            }
            --v14;
            if (v6 <= v7) {
              goto LABEL_38;
            }
          }

          else
          {
            if (v18 != v6 || v15 >= v6) {
              *unsigned int v15 = v17;
            }
            char v22 = --v6;
            if (v16 <= v7) {
              goto LABEL_38;
            }
          }

          --v15;
          if (v14 <= v4) {
            goto LABEL_38;
          }
        }
      }

      goto LABEL_38;
    }
  }

  else if ((v8 & 0x8000000000000000LL) == 0)
  {
    if (__dst != __src || a2 <= __dst) {
      memmove(__dst, __src, v8);
    }
    uint64_t v10 = &v4[v8];
    Swift::Int v20 = &v4[v8];
    if (v6 != v7 && (unint64_t)v6 < a3)
    {
      do
      {
        uint64_t v11 = *v6;
        uint64_t v12 = *v4;
        if (byte_100360132[v11] >= byte_100360132[v12])
        {
          if (v7 != v4) {
            *uint64_t v7 = v12;
          }
          uint64_t v21 = ++v4;
          Swift::Int v13 = v6;
        }

        else
        {
          Swift::Int v13 = v6 + 1;
          if (v7 < v6 || v7 >= v13 || v7 != v6) {
            *uint64_t v7 = v11;
          }
        }

        ++v7;
        if (v4 >= v10) {
          break;
        }
        uint64_t v6 = v13;
      }

      while ((unint64_t)v13 < a3);
      char v22 = v7;
    }

uint64_t sub_1002FAF00(uint64_t *a1)
{
  uint64_t v1 = *a1;
  v5[0] = 0LL;
  v5[1] = 0xE000000000000000LL;
  uint64_t v4 = v1;
  uint64_t v2 = sub_100002274(&qword_10040FDB8);
  _print_unlocked<A, B>(_:_:)( &v4,  v5,  v2,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  return v5[0];
}

uint64_t sub_1002FAF58(int *a1)
{
  __int16 v1 = *((_WORD *)a1 + 2);
  char v2 = *((_BYTE *)a1 + 6);
  uint64_t v3 = *((void *)a1 + 1);
  v9[0] = 0LL;
  v9[1] = 0xE000000000000000LL;
  int v5 = *a1;
  __int16 v6 = v1;
  char v7 = v2;
  uint64_t v8 = v3;
  _print_unlocked<A, B>(_:_:)( &v5,  v9,  &type metadata for NANAttribute.DataCluster,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  return v9[0];
}

uint64_t sub_1002FAFC0(int *a1)
{
  int v1 = *a1;
  __int16 v2 = *((_WORD *)a1 + 2);
  v6[0] = 0LL;
  v6[1] = 0xE000000000000000LL;
  int v4 = v1;
  __int16 v5 = v2;
  _print_unlocked<A, B>(_:_:)( &v4,  v6,  &type metadata for Channel,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  return v6[0];
}

uint64_t sub_1002FB018(__int16 *a1)
{
  return sub_1002FB030(a1, (uint64_t)&type metadata for NANAwakeDWPeriods);
}

uint64_t sub_1002FB024(__int16 *a1)
{
  return sub_1002FB030(a1, (uint64_t)&type metadata for NANAttribute.MasterIndication);
}

uint64_t sub_1002FB030(__int16 *a1, uint64_t a2)
{
  __int16 v2 = *a1;
  v5[0] = 0LL;
  v5[1] = 0xE000000000000000LL;
  __int16 v4 = v2;
  _print_unlocked<A, B>(_:_:)( &v4,  v5,  a2,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  return v5[0];
}

uint64_t sub_1002FB07C(char *a1)
{
  char v1 = *a1;
  v4[0] = 0LL;
  v4[1] = 0xE000000000000000LL;
  char v3 = v1;
  _print_unlocked<A, B>(_:_:)( &v3,  v4,  &type metadata for NANState,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  return v4[0];
}

void *sub_1002FB0CC(uint64_t a1, char *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v5 = 0LL;
  __int16 v6 = _swiftEmptyArrayStorage;
  do
  {
    char v16 = *(_BYTE *)(a1 + v5 + 32);
    sub_10026AAC8((unint64_t)&v16, a2, &v14);
    if (v2)
    {
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(a1);
      return v6;
    }

    uint64_t v8 = v15;
    if (v15)
    {
      int v9 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0) {
        __int16 v6 = sub_1000A71D8(0LL, v6[2] + 1LL, 1, v6);
      }
      unint64_t v11 = v6[2];
      unint64_t v10 = v6[3];
      if (v11 >= v10 >> 1) {
        __int16 v6 = sub_1000A71D8((void *)(v10 > 1), v11 + 1, 1, v6);
      }
      void v6[2] = v11 + 1;
      char v7 = &v6[2 * v11];
      *((_BYTE *)v7 + 32) = v9;
      *((_WORD *)v7 + 17) = HIWORD(v9);
      v7[5] = v8;
    }

    ++v5;
  }

  while (v3 != v5);
  swift_bridgeObjectRelease(a1);
  return v6;
}

unint64_t sub_1002FB218(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for NANAttribute(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v9 = *(void *)(a1 + 16);
  unint64_t v10 = _swiftEmptyArrayStorage;
  if (!v9) {
    return (unint64_t)v10;
  }
  uint64_t v19 = v2;
  uint64_t v21 = _swiftEmptyArrayStorage;
  unint64_t result = sub_1000699D4(0, v9, 0);
  unint64_t v10 = v21;
  uint64_t v12 = (char *)(a1 + 32);
  Swift::Int v13 = type metadata accessor for NANAttribute;
  uint64_t v20 = a2;
  while (*(void *)(a2 + 16))
  {
    unint64_t result = sub_100327790(*v12);
    if ((v14 & 1) == 0) {
      goto LABEL_10;
    }
    uint64_t v15 = *(void *)(v6 + 72);
    sub_100057FE8(*(void *)(a2 + 56) + v15 * result, (uint64_t)v8, v13);
    uint64_t v21 = v10;
    char v16 = v13;
    unint64_t v18 = v10[2];
    unint64_t v17 = v10[3];
    if (v18 >= v17 >> 1)
    {
      sub_1000699D4(v17 > 1, v18 + 1, 1);
      unint64_t v10 = v21;
    }

    __int128 v10[2] = v18 + 1;
    unint64_t result = sub_100022628( (uint64_t)v8,  (uint64_t)v10 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
             + v18 * v15,
               v16);
    ++v12;
    --v9;
    a2 = v20;
    Swift::Int v13 = v16;
    if (!v9) {
      return (unint64_t)v10;
    }
  }

  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1002FB398()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002FB3BC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1002FB3E0()
{
  return sub_1002EC5F8(*(void *)(v0 + 32));
}

uint64_t sub_1002FB3EC(char *a1, uint64_t a2)
{
  return sub_1002F7790(a1, a2) & 1;
}

BOOL sub_1002FB40C(unsigned __int8 *a1, uint64_t a2)
{
  return sub_1002F7A70(a1, a2, v2);
}

uint64_t sub_1002FB428()
{
  return swift_deallocObject(v0, 47LL, 7LL);
}

uint64_t sub_1002FB44C(uint64_t a1)
{
  return sub_1002F699C( a1,  *(void *)(v1 + 32),  *(unsigned __int16 *)(v1 + 40) | ((unint64_t)*(unsigned int *)(v1 + 42) << 16),  *(_BYTE *)(v1 + 46));
}

uint64_t sub_1002FB468()
{
  return sub_1002F6C48(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1002FB470(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002FB480(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1002FB488()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 608LL);
  swift_beginAccess(v1, v3, 0LL, 0LL);
  return *(void *)(v1 + *(int *)(sub_100002274((uint64_t *)&unk_10040FE88) + 40));
}

uint64_t sub_1002FB4DC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1002FB500(unsigned __int16 *a1)
{
  return sub_1002FB53C(a1);
}

uint64_t sub_1002FB514(void *a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*a1, a1[1]);
}

uint64_t sub_1002FB53C(unsigned __int16 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_1002FB560(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(v1 + 16))(a1 & 0xFFFFFFFFFFFFLL);
}

uint64_t sub_1002FB584(unsigned int *a1)
{
  return (*(uint64_t (**)(unint64_t))(v1 + 16))(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40));
}

uint64_t sub_1002FB5B8(unsigned int *a1)
{
  return (*(uint64_t (**)(unint64_t))(v1 + 16))(*a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32));
}

uint64_t sub_1002FB5E4(unsigned int *a1)
{
  return (*(uint64_t (**)(unint64_t, void))(v1 + 16))( *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)a1 + 6) << 48),  *((void *)a1 + 1));
}

uint64_t sub_1002FB628(uint64_t *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(swift_getAssociatedTypeWitness( 0LL,  *(void *)(v4 + 8),  v3,  &protocol requirements base descriptor for P2PControls)
                                      - 8)
                          + 80LL);
  return sub_1002F0998(a1, v1 + ((v5 + 32) & ~v5), v3, v4);
}

uint64_t sub_1002FB69C()
{
  return sub_1002FB8D0((uint64_t (*)(void))&type metadata accessor for Logger);
}

void sub_1002FB6A8(uint64_t a1)
{
}

uint64_t sub_1002FB6FC()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unownedRelease(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1002FB78C(char a1)
{
  uint64_t v2 = a1 & 1;
  uint64_t v3 = *(void *)(type metadata accessor for Logger(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_1002F401C( v2,  *(void *)(v1 + 32),  v1 + v4,  *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1002FB800()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1002FB824(char a1)
{
  return sub_1002F551C(a1 & 1, *(void *)(v1 + 32));
}

uint64_t sub_1002FB834(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_1002FB858(char a1)
{
  return sub_1002F55D8(a1 & 1, *(void *)(v1 + 32));
}

uint64_t sub_1002FB868(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NANDriverCapabilities(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002FB8AC()
{
  return sub_1002FB8D0((uint64_t (*)(void))&type metadata accessor for DispatchTime);
}

uint64_t sub_1002FB8B8()
{
  return sub_1002FB954((uint64_t (*)(void, char *, uint64_t, uint64_t))sub_1002F7220);
}

uint64_t sub_1002FB8C4()
{
  return sub_1002FB8D0((uint64_t (*)(void))&type metadata accessor for DispatchTime);
}

uint64_t sub_1002FB8D0(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 40) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  swift_release(*(void *)(v1 + 32));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_1002FB948()
{
  return sub_1002FB954((uint64_t (*)(void, char *, uint64_t, uint64_t))sub_1002F6E2C);
}

uint64_t sub_1002FB954(uint64_t (*a1)(void, char *, uint64_t, uint64_t))
{
  uint64_t v2 = *((void *)v1 + 2);
  uint64_t v3 = *((void *)v1 + 3);
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for DispatchTime(0LL) - 8) + 80LL);
  return a1(*((void *)v1 + 4), &v1[(v4 + 40) & ~v4], v2, v3);
}

void *sub_1002FB9B0(void *a1)
{
  uint64_t v15 = a1[30];
  uint64_t v16 = a1[29];
  uint64_t v2 = a1[33];
  uint64_t v12 = a1[32];
  uint64_t v3 = a1[34];
  uint64_t v4 = a1[35];
  uint64_t v5 = a1[36];
  uint64_t v6 = a1[37];
  uint64_t v7 = a1[38];
  uint64_t v8 = a1[39];
  uint64_t v9 = a1[40];
  uint64_t v10 = a1[41];
  uint64_t v13 = a1[44];
  uint64_t v14 = a1[31];
  swift_bridgeObjectRelease(a1[42]);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t sub_1002FBAA0(__int16 *a1)
{
  return sub_1002FBAB4(a1);
}

uint64_t sub_1002FBAB4(__int16 *a1)
{
  __int16 v1 = *a1;
  uint64_t v2 = sub_1002ECECC();
  sub_1002FCC14(v1);
  return swift_release(v2);
}

void sub_1002FBAF8(uint64_t *a1)
{
}

uint64_t sub_1002FBB18(uint64_t a1)
{
  return sub_1002FBB54(a1, sub_1002F0E34);
}

uint64_t sub_1002FBB38(uint64_t a1)
{
  return sub_1002FBB54(a1, sub_1002F0C98);
}

uint64_t sub_1002FBB54(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(swift_getAssociatedTypeWitness( 0LL,  *(void *)(v6 + 8),  v5,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver)
                                      - 8)
                          + 80LL);
  return a2(a1, v2 + ((v7 + 32) & ~v7), v5, v6);
}

uint64_t sub_1002FBBD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(swift_getAssociatedTypeWitness( 0LL,  *(void *)(v6 + 8),  v5,  &protocol requirements base descriptor for P2PControls)
                                      - 8)
                          + 80LL);
  return sub_1002F0818(v4, a2, v2 + ((v7 + 32) & ~v7), v5, v6);
}

uint64_t sub_1002FBC60(uint64_t a1)
{
  return sub_1002FBD84(a1, sub_1002F063C);
}

uint64_t sub_1002FBC80(uint64_t a1)
{
  return sub_1002FBD84(a1, sub_1002F04A0);
}

uint64_t sub_1002FBCA0(uint64_t a1)
{
  return sub_1002FBB54(a1, sub_1002F0304);
}

uint64_t sub_1002FBCC0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(swift_getAssociatedTypeWitness( 0LL,  *(void *)(v6 + 8),  v5,  &protocol requirements base descriptor for P2PControls)
                                      - 8)
                          + 80LL);
  return sub_1002F00F4(a1, a2, v2 + ((v7 + 32) & ~v7), v5, v6);
}

uint64_t sub_1002FBD48(uint64_t a1)
{
  return sub_1002FBB54(a1, sub_1002EFF58);
}

uint64_t sub_1002FBD68(uint64_t a1)
{
  return sub_1002FBD84(a1, sub_1002EFDBC);
}

uint64_t sub_1002FBD84(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(swift_getAssociatedTypeWitness( 0LL,  *(void *)(v6 + 8),  v5,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver)
                                      - 8)
                          + 80LL);
  return a2(v4, v2 + ((v7 + 32) & ~v7), v5, v6);
}

uint64_t sub_1002FBE08()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(*(void *)(v0 + 24) + 8LL),  *(void *)(v0 + 16),  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, AssociatedTypeWitness);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002FBE80(char a1)
{
  char v2 = a1 & 1;
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(swift_getAssociatedTypeWitness( 0LL,  *(void *)(v4 + 8),  v3,  &protocol requirements base descriptor for P2PControls)
                                      - 8)
                          + 80LL);
  return sub_1002EFC20(v2, v1 + ((v5 + 32) & ~v5), v3, v4);
}

uint64_t sub_1002FBEF4(void *a1)
{
  return sub_100220C4C(a1);
}

uint64_t sub_1002FBF44(unsigned __int8 *a1)
{
  return sub_100220BC8(a1);
}

uint64_t sub_1002FBF5C(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_100360188;
    void v4[2] = &unk_1003601A0;
    void v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = &unk_1003601B8;
    void v4[5] = &unk_1003601D0;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 6LL, v4, a1 + 104);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

BOOL sub_1002FBFFC(char *a1, char *a2)
{
  return static AWDLPeer.Reachability.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_1002FC014()
{
  return AWDLPeer.Reachability.hashValue.getter(*v0);
}

void sub_1002FC024(uint64_t a1)
{
}

Swift::Int sub_1002FC034(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1002FC07C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 80LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v1,  v2,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v1,  v2,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v5 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v6 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v5,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.PreferencesBacking: PreferencesStorage);
  uint64_t v8 = type metadata accessor for Preferences(0LL, v5, v6, v7);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  unint64_t v11 = (char *)&v22 - v10;
  uint64_t v12 = *(void *)(v0 + qword_10040FF00);
  uint64_t v13 = swift_unownedRetainStrong(v12);
  (*(void (**)(uint64_t))(*(void *)v12 + 168LL))(v13);
  swift_release(v12);
  uint64_t v14 = Preferences.enableUserspaceP2POptions.getter(v8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if ((*(void *)PreferenceDefaults.EnableUserspaceP2POptions.localeManager.unsafeMutableAddressor() & ~v14) != 0)
  {
    char v20 = 0;
  }

  else
  {
    uint64_t v15 = swift_unownedRetainStrong(v12);
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 176LL))(v15);
    swift_release(v12);
    uint64_t v17 = *WiFiDriverCapabilities.peerCountryCodeLearningCapable.unsafeMutableAddressor();
    uint64_t v22 = v16;
    uint64_t v23 = v17;
    unint64_t v18 = sub_100270384();
    swift_bridgeObjectRetain_n(v17, 2LL);
    ExtendableOptionSet.formIntersection(_:)( (uint64_t (*)(_BYTE *, void))&v22,  &type metadata for WiFiDriverCapabilities.Kind,  v18);
    uint64_t v19 = v23;
    char v20 = sub_10007990C(v23, v17);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v19);
  }

  return v20 & 1;
}

void sub_1002FC274()
{
  uint64_t v1 = v0;
  uint64_t v2 = swift_retain_n(v0, 2LL);
  oslog = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v5 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v11 = v5;
    uint64_t v6 = CountryCode.description.getter(*(_WORD *)(v1 + qword_10040FEE8));
    unint64_t v8 = v7;
    uint64_t v10 = sub_10000235C(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
    swift_release_n(v1, 2LL);
    swift_bridgeObjectRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Peer country code: %s", v4, 0xCu);
    swift_arrayDestroy(v5, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v5, -1LL, -1LL);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v0, 2LL);
  }

uint64_t sub_1002FC400()
{
  return *(unsigned __int16 *)(v0 + qword_10040FEE8);
}

void sub_1002FC410(__int16 a1)
{
  *(_WORD *)(v1 + qword_10040FEE8) = a1;
  sub_1002FC274();
}

void sub_1002FC420()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = swift_retain_n(v0, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    LOBYTE(v13) = *((_BYTE *)v1 + qword_10040FEF0);
    uint64_t v8 = type metadata accessor for LocaleManager.State(0LL, v2[10], v2[11], v2[12]);
    uint64_t v9 = String.init<A>(describing:)(&v13, v8);
    unint64_t v11 = v10;
    uint64_t v13 = sub_10000235C(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
    swift_release_n(v1, 2LL);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Current country code state: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v1, 2LL);
  }

  sub_1002FC81C(v12);
}

uint64_t sub_1002FC5BC()
{
  return *(unsigned __int8 *)(v0 + qword_10040FEF0);
}

void sub_1002FC5CC(char a1)
{
  *(_BYTE *)(v1 + qword_10040FEF0) = a1;
  sub_1002FC420();
}

void sub_1002FC5DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = swift_retain();
  oslog = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v5 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v13 = v5;
    uint64_t v6 = *(void *)(v1 + qword_10040FEF8);
    uint64_t v7 = swift_bridgeObjectRetain(v6);
    uint64_t v8 = Array.description.getter(v7, &type metadata for Channel);
    unint64_t v10 = v9;
    swift_bridgeObjectRelease(v6);
    uint64_t v12 = sub_10000235C(v8, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
    swift_release(v1);
    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Supported channels information: %s", v4, 0xCu);
    swift_arrayDestroy(v5, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v5, -1LL, -1LL);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  else
  {
    swift_release(v0);
  }

void sub_1002FC78C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + qword_10040FEF8);
  *(void *)(v1 + qword_10040FEF8) = a1;
  swift_bridgeObjectRelease(v2);
  sub_1002FC5DC();
}

uint64_t sub_1002FC7B4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  __int16 v3 = *a2;
  __int16 v4 = a2[1];
  uint64_t v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v8, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v5);
  if (result)
  {
    uint64_t v7 = result;
    sub_1002FCB9C(v3 | (v4 << 8));
    return swift_release(v7);
  }

  return result;
}

void sub_1002FC81C(uint64_t a1)
{
  uint64_t v2 = v1;
  if (*(_BYTE *)(v1 + qword_10040FEF0) == 3)
  {
    uint64_t v3 = swift_retain_n(v1, 2LL);
    __int16 v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v7 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v6 = 136315138;
      uint64_t v15 = v7;
      uint64_t v8 = CountryCode.description.getter(*(_WORD *)(v2 + qword_10040FEE8));
      unint64_t v10 = v9;
      uint64_t v14 = sub_10000235C(v8, v9, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15);
      swift_release_n(v2, 2LL);
      swift_bridgeObjectRelease(v10);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Would have set country code %s received from peer", v6, 0xCu);
      swift_arrayDestroy(v7, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v7, -1LL, -1LL);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v2, 2LL);
    }

    *(_BYTE *)(v2 + qword_10040FEF0) = 4;
    sub_1002FC420();
  }

  else
  {
    oslog = (os_log_s *)Logger.logObject.getter(a1);
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v11, "Nothing to do", v12, 2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }
  }

void sub_1002FCA44(__int16 a1)
{
  uint64_t v2 = v1;
  unsigned __int8 v3 = a1;
  int v4 = HIBYTE(a1);
  uint64_t v5 = *v1;
  uint64_t v6 = *(void *)(*v1 + 96);
  uint64_t v7 = *(void *)(v5 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v6,  v7,  &protocol requirements base descriptor for P2PControls);
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  os_log_type_t v11 = (char *)&v18 - v10;
  uint64_t v12 = CountryCode.unknown.unsafeMutableAddressor();
  if (*(unsigned __int8 *)v12 == v3 && *((unsigned __int8 *)v12 + 1) == v4)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v14 = *(uint64_t *)((char *)v2 + qword_10040FF00);
    swift_unownedRetainStrong(v14);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))( v11,  v14 + *(void *)(*(void *)v14 + 96LL),  AssociatedTypeWitness);
    swift_release(v14);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v6,  v7,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 128))( AssociatedTypeWitness,  AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  }

  uint64_t v17 = *(uint64_t *)((char *)v2 + qword_10040FEF8);
  *(uint64_t *)((char *)v2 + qword_10040FEF8) = (uint64_t)v16;
  swift_bridgeObjectRelease(v17);
  sub_1002FC5DC();
}

void sub_1002FCB9C(__int16 a1)
{
  if ((sub_1002FC07C() & 1) != 0)
  {
    unsigned __int8 v3 = CountryCode.unknown.unsafeMutableAddressor();
    if (*((unsigned __int8 *)v3 + 1) == (unsigned __int16)(a1 & 0xFF00) >> 8
      && *(unsigned __int8 *)v3 == a1)
    {
      char v5 = 2;
    }

    else
    {
      char v5 = 1;
    }

    *(_BYTE *)(v1 + qword_10040FEF0) = v5;
    sub_1002FC420();
    sub_1002FCA44(a1);
    sub_1002FCDE0(v6);
  }

void sub_1002FCC14(__int16 a1)
{
  if ((sub_1002FC07C() & 1) != 0)
  {
    *(_WORD *)(v1 + qword_10040FEE8) = a1;
    sub_1002FC274();
    *(_BYTE *)(v1 + qword_10040FEF0) = 3;
    sub_1002FC420();
  }

uint64_t sub_1002FCC64()
{
  uint64_t v1 = v0 + qword_100410C40;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_bridgeObjectRelease(*(void *)(v0 + qword_10040FEF8));
  swift_unownedRelease(*(void *)(v0 + qword_10040FF00));
  swift_release(*(void *)(v0 + qword_10040FF08));
  return v0;
}

uint64_t sub_1002FCCD8()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for LocaleManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LocaleManager);
}

uint64_t sub_1002FCD08(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1002FCD54 + 4 * byte_100360165[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1002FCD88 + 4 * byte_100360160[v4]))();
}

uint64_t sub_1002FCD88(uint64_t result)
{
  *(_BYTE *)(result + sub_100058090(v4, v0 + 1) = v1;
  return result;
}

uint64_t sub_1002FCD90(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_100058090(v4, v0 + 1) = 0;
  if (a2) {
    JUMPOUT(0x1002FCD98LL);
  }
  return result;
}

uint64_t sub_1002FCDA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_100058090(v4, v0 + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1002FCDACLL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1002FCDB0(uint64_t result)
{
  *(_DWORD *)(result + sub_100058090(v4, v0 + 1) = v1;
  return result;
}

uint64_t sub_1002FCDB8(uint64_t result)
{
  *(_WORD *)(result + sub_100058090(v4, v0 + 1) = v1;
  return result;
}

uint64_t type metadata accessor for LocaleManager.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LocaleManager.State);
}

uint64_t sub_1002FCDD0(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100360268, a1);
}

void sub_1002FCDE0(uint64_t a1)
{
  oslog = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "WARNING: Calling empty updateSocialChannels()", v2, 2u);
    swift_slowDealloc(v2, -1LL, -1LL);
  }
}

void sub_1002FCE78(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  type metadata accessor for Logger(0LL);
  __chkstk_darwin();
  uint64_t v5 = qword_10040FEE8;
  *(_WORD *)((char *)v2 + v5) = *CountryCode.unknown.unsafeMutableAddressor();
  *((_BYTE *)v2 + qword_10040FEF0) = 0;
  *(void *)((char *)v2 + qword_10040FEF8) = _swiftEmptyArrayStorage;
  *(void *)((char *)v2 + qword_10040FF08) = 0LL;
  *(void *)((char *)v2 + qword_10040FF00) = a1;
  uint64_t v6 = *(void *)(v4 + 96);
  uint64_t v7 = *(void *)(v4 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v6,  v7,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v6,  v7,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
  uint64_t v10 = *(unsigned __int8 (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  swift_unownedRetain(a1);
  uint64_t v11 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  uint64_t v12 = (char *)sub_1002FCFDC + 4 * byte_10036016A[v10(v11, AssociatedConformanceWitness)];
  __asm { BR              X10 }

uint64_t sub_1002FCFDC()
{
  uint64_t v6 = swift_allocObject(&unk_1003FB420, 24LL, 7LL);
  swift_weakInit(v6 + 16, v0);
  uint64_t v7 = (void *)swift_allocObject(&unk_1003FB448, 48LL, 7LL);
  _OWORD v7[2] = v3;
  v7[3] = *(void *)(v2 + 88);
  void v7[4] = v1;
  v7[5] = v6;
  uint64_t v8 = (uint64_t *)(v0 + qword_10040FF08);
  swift_beginAccess(v0 + qword_10040FF08, v5 - 112, 33LL, 0LL);
  uint64_t v9 = sub_100002274((uint64_t *)&unk_10040FED0);
  uint64_t v10 = *(void *)(v5 - 120);
  ObservableWiFiProperty.registerForChanges(on:using:valueUpdateHandler:)( *(void **)(v5 - 128),  v8,  (uint64_t)sub_1002FD1DC,  (uint64_t)v7,  v9,  v5 - 82);
  swift_endAccess(v5 - 112);
  swift_release(v7);
  sub_1002FCB9C(*(_WORD *)(v5 - 82));
  sub_1002FD1E8(v10);
  return v0;
}

void sub_1002FD138(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for LocaleManager(0LL, v1[10], v1[11], v1[12]);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  sub_1002FCE78(a1);
}

uint64_t sub_1002FD194()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002FD1B8()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1002FD1DC(uint64_t a1, unsigned __int8 *a2)
{
  return sub_1002FC7B4(a1, a2, *(void *)(v2 + 40));
}

uint64_t sub_1002FD1E8(uint64_t a1)
{
  uint64_t v2 = sub_100002274((uint64_t *)&unk_10040FED0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1002FD228(uint64_t a1)
{
  v2[0] = "\b";
  v2[1] = "\b";
  return swift_initClassMetadata2(a1, 0LL, 2LL, v2, a1 + 112);
}

uint64_t sub_1002FD268()
{
  uint64_t result = swift_allocObject(v0, 32LL, 7LL);
  *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  return result;
}

uint64_t sub_1002FD28C()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for PeerCacheManager(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for PeerCacheManager);
}

char *sub_1002FD2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v51 = *(void *)(v5 - 8);
  uint64_t v52 = v5;
  __chkstk_darwin(v5);
  uint64_t v50 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v49 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v49);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = OBJC_IVAR____TtC12wifip2pdCore9XPCServer_lock;
  uint64_t v13 = type metadata accessor for Lock();
  swift_allocObject(v13, 24LL, 7LL);
  uint64_t v14 = v2;
  *(void *)&v2[v12] = Lock.init()();
  *(void *)&v14[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_gracePeriodEndedTimer] = 0LL;
  *(void *)&v14[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_pendingSessions] = _swiftEmptyArrayStorage;
  uint64_t v15 = &v14[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_lastProcessName];
  *(void *)uint64_t v15 = 0LL;
  *((void *)v15 + sub_100058090(v4, v0 + 1) = 0LL;
  uint64_t v16 = &v14[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_lastProcessID];
  *(_DWORD *)uint64_t v16 = 0;
  v16[4] = 1;
  *(_DWORD *)&v14[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_unlockObserver] = -1;
  uint64_t v17 = &v14[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_newSessionGracePeriod];
  *(void *)&v14[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_newSessionGracePeriod] = 60LL;
  uint64_t v18 = enum case for DispatchTimeInterval.seconds(_:);
  uint64_t v19 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104LL))(v17, v18, v19);
  char v20 = &v14[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_newSessionHandler];
  *(void *)char v20 = 0LL;
  *((void *)v20 + sub_100058090(v4, v0 + 1) = 0LL;
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  Logger.init(subsystem:category:)(0xD000000000000012LL, 0x8000000100360620LL, 6516856LL, 0xE300000000000000LL);
  id v21 = objc_allocWithZone(&OBJC_CLASS___NSXPCListener);
  swift_bridgeObjectRetain(a2);
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v23 = [v21 initWithMachServiceName:v22];

  *(void *)&v14[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_listener] = v23;
  Swift::Int v24 = (void *)objc_opt_self(&OBJC_CLASS___NSXPCListener);
  id v25 = [v24 anonymousListener];
  *(void *)&v14[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_p2pListener] = v25;
  id v26 = [v24 anonymousListener];
  *(void *)&v14[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_awdlListener] = v26;
  id v27 = [v24 anonymousListener];
  *(void *)&v14[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_nanListener] = v27;
  unint64_t v28 = &v14[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_entitlement];
  *(void *)unint64_t v28 = a1;
  *((void *)v28 + sub_100058090(v4, v0 + 1) = a2;

  unint64_t v29 = (objc_class *)type metadata accessor for XPCServer(0LL);
  v54.receiver = v14;
  v54.super_class = v29;
  char v30 = (char *)objc_msgSendSuper2(&v54, "init");
  uint64_t v31 = OBJC_IVAR____TtC12wifip2pdCore9XPCServer_listener;
  uint64_t v32 = *(void **)&v30[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_listener];
  sub_100058CD0(0LL, (unint64_t *)&qword_1004044D0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v33 = v30;
  id v34 = v32;
  static DispatchQoS.unspecified.getter(v34);
  uint64_t v53 = _swiftEmptyArrayStorage;
  uint64_t v35 = sub_10000AF70( (unint64_t *)&unk_100410200,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v36 = sub_100002274((uint64_t *)&unk_1004044E0);
  uint64_t v37 = sub_10012137C(qword_100410210, (uint64_t *)&unk_1004044E0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v53, v36, v37, v49, v35);
  uint64_t v38 = v50;
  (*(void (**)(char *, void, uint64_t))(v51 + 104))( v50,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v52);
  uint64_t v39 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000024LL,  0x800000010036A510LL,  v11,  v8,  v38,  0LL);
  [v34 _setQueue:v39];

  [*(id *)&v30[v31] setDelegate:v33];
  uint64_t v40 = OBJC_IVAR____TtC12wifip2pdCore9XPCServer_p2pListener;
  id v41 = *(id *)&v33[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_p2pListener];
  [v41 _setQueue:*OS_dispatch_queue.p2p.unsafeMutableAddressor()];

  [*(id *)&v33[v40] setDelegate:v33];
  uint64_t v42 = OBJC_IVAR____TtC12wifip2pdCore9XPCServer_awdlListener;
  id v43 = *(id *)&v33[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_awdlListener];
  [v43 _setQueue:*OS_dispatch_queue.awdl.unsafeMutableAddressor()];

  [*(id *)&v33[v42] setDelegate:v33];
  uint64_t v44 = OBJC_IVAR____TtC12wifip2pdCore9XPCServer_nanListener;
  id v45 = *(id *)&v33[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_nanListener];
  [v45 _setQueue:*OS_dispatch_queue.nan.unsafeMutableAddressor()];

  id v46 = *(id *)&v33[v44];
  [v46 setDelegate:v33];

  return v33;
}

void sub_1002FD7D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v39 = a2;
  uint64_t v40 = a1;
  uint64_t v35 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v38 = *(void *)(v35 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v36 = *(void *)(v6 - 8);
  uint64_t v37 = v6;
  __chkstk_darwin();
  uint64_t v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v31[1] = *(void *)(v2 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_lock);
  Lock.lock()();
  uint64_t v9 = *(void *)(v2 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_gracePeriodEndedTimer);
  *(void *)(v2 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_gracePeriodEndedTimer) = 0LL;
  swift_release(v9);
  uint64_t v32 = v2;
  uint64_t v10 = (uint64_t *)(v2 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_pendingSessions);
  swift_beginAccess(v3 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_pendingSessions, v44, 1LL, 0LL);
  uint64_t v11 = *v10;
  uint64_t *v10 = (uint64_t)_swiftEmptyArrayStorage;
  if (!((unint64_t)v11 >> 62))
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v11);
    if (v12) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease_n(v11, 2LL);
    id v27 = (void *)(v32 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_newSessionHandler);
    uint64_t v28 = *(void *)(v32 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_newSessionHandler);
    uint64_t v29 = *(void *)(v32 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_newSessionHandler + 8);
    uint64_t v30 = v39;
    *id v27 = v40;
    v27[1] = v30;
    swift_retain();
    sub_100021018(v28, v29);
    Lock.unlock()();
    return;
  }

  if (v11 < 0) {
    uint64_t v26 = v11;
  }
  else {
    uint64_t v26 = v11 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v11);
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v26);
  if (!v12) {
    goto LABEL_13;
  }
LABEL_3:
  if (v12 >= 1)
  {
    uint64_t v13 = 0LL;
    unint64_t v33 = v11 & 0xC000000000000001LL;
    uint64_t v34 = v11;
    do
    {
      if (v33) {
        id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v11);
      }
      else {
        id v14 = *(id *)(v11 + 8 * v13 + 32);
      }
      uint64_t v15 = v14;
      ++v13;
      uint64_t v16 = (void *)swift_allocObject(&unk_1003FB658, 40LL, 7LL);
      uint64_t v18 = v39;
      uint64_t v17 = v40;
      _OWORD v16[2] = v15;
      v16[3] = v17;
      v16[4] = v18;
      aBlock[4] = sub_1002FF3B0;
      id v43 = v16;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1000021F0;
      aBlock[3] = &unk_1003FB670;
      uint64_t v19 = _Block_copy(aBlock);
      swift_retain();
      id v20 = v15;
      static DispatchQoS.unspecified.getter(v20);
      id v41 = _swiftEmptyArrayStorage;
      uint64_t v21 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v22 = sub_100002274((uint64_t *)&unk_1004052A0);
      uint64_t v23 = sub_10012137C((unint64_t *)&qword_100408960, (uint64_t *)&unk_1004052A0);
      uint64_t v24 = v35;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v22, v23, v35, v21);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v5, v19);
      _Block_release(v19);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v5, v24);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v8, v37);
      id v25 = v43;

      swift_release(v25);
      uint64_t v11 = v34;
    }

    while (v12 != v13);
    goto LABEL_13;
  }

  __break(1u);
}

uint64_t sub_1002FDB24(void *a1, uint64_t (*a2)(void))
{
  id v3 = a1;
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = a2;
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v7 = 138412290;
    id v12 = v3;
    id v9 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
    *uint64_t v8 = v3;

    a2 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Resuming %@ after Wi-Fi is ready", v7, 0xCu);
    uint64_t v10 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v8, 1LL, v10);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
  }

  return a2(v3);
}

void sub_1002FDCA0()
{
  uint64_t v1 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v22 - v5;
  __chkstk_darwin();
  uint64_t v8 = (char *)&v22 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))( (char *)&v22 - v7,  (uint64_t)v0 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_newSessionGracePeriod,  v1);
  id v9 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v10 = *(void (**)(char *, void, uint64_t))(v2 + 104);
  v10(v6, enum case for DispatchTimeInterval.never(_:), v1);
  uint64_t v11 = swift_allocObject(&unk_1003FB6A8, 24LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v0;
  *(void *)uint64_t v4 = 100LL;
  v10(v4, enum case for DispatchTimeInterval.milliseconds(_:), v1);
  uint64_t v12 = type metadata accessor for P2PTimer(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  id v13 = v9;
  id v14 = v0;
  uint64_t v15 = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)( (uint64_t)v8,  v13,  (uint64_t)v6,  (uint64_t)v4,  (uint64_t)sub_1002FF3E0,  v11);
  uint64_t v16 = *(void *)&v14[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_gracePeriodEndedTimer];
  *(void *)&v14[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_gracePeriodEndedTimer] = v15;
  objc_msgSend( *(id *)&v14[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_listener],  "activate",  swift_release(v16).n128_f64[0]);
  [*(id *)&v14[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_p2pListener] activate];
  [*(id *)&v14[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_awdlListener] activate];
  [*(id *)&v14[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_nanListener] activate];
  uint64_t v17 = (const char *)[(id)objc_opt_self(WiFiP2PXPCConnection) wifiPeerToPeerAvailableNotification];
  uint64_t v18 = notify_post(v17);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "Successfully started XPC server listening for new incoming client connections",  v21,  2u);
    swift_slowDealloc(v21, -1LL, -1LL);
  }
}

void sub_1002FDF0C(uint64_t a1)
{
  v26[1] = *(void *)(a1 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_lock);
  Lock.lock()();
  uint64_t v2 = *(void *)(a1 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_gracePeriodEndedTimer);
  *(void *)(a1 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_gracePeriodEndedTimer) = 0LL;
  __n128 v3 = swift_release(v2);
  uint64_t v4 = (uint64_t *)(a1 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_pendingSessions);
  v3.n128_u64[0] = 138412290LL;
  __n128 v27 = v3;
  while (1)
  {
    swift_beginAccess(v4, v30, 33LL, 0LL);
    uint64_t v9 = *v4;
    if ((unint64_t)*v4 >> 62)
    {
      if (v9 < 0) {
        uint64_t v24 = *v4;
      }
      else {
        uint64_t v24 = v9 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*v4);
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter(v24);
      swift_bridgeObjectRelease(v9);
      if (!v25)
      {
LABEL_20:
        swift_endAccess(v30);
        Lock.unlock()();
        return;
      }
    }

    else if (!*(void *)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      goto LABEL_20;
    }

    uint64_t v10 = *v4;
    uint64_t isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
    *uint64_t v4 = v10;
    if (!(_DWORD)isUniquelyReferenced_nonNull_bridgeObject || v10 < 0 || (v10 & 0x4000000000000000LL) != 0)
    {
      uint64_t isUniquelyReferenced_nonNull_bridgeObject = sub_10032CC28(v10);
      uint64_t v10 = isUniquelyReferenced_nonNull_bridgeObject;
      *uint64_t v4 = isUniquelyReferenced_nonNull_bridgeObject;
    }

    uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    if (!v12) {
      break;
    }
    uint64_t v13 = v12 - 1;
    id v14 = *(void **)((v10 & 0xFFFFFFFFFFFFFF8LL) + 8 * v13 + 0x20);
    *(void *)((v10 & 0xFFFFFFFFFFFFFF8LL) + 0x10) = v13;
    specialized Array._endMutation()(isUniquelyReferenced_nonNull_bridgeObject);
    swift_endAccess(v30);
    uint64_t v15 = v14;
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc(12LL, -1LL);
      uint64_t v19 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v18 = v27.n128_u32[0];
      *(void *)(v18 + 4) = v15;
      *uint64_t v19 = v15;

      _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "Rejecting XPC connection from %@ because there is no Wi-Fi",  (uint8_t *)v18,  0xCu);
      uint64_t v20 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v19, 1LL, v20);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {
    }

    memset(v30, 0, sizeof(v30));
    uint64_t v21 = OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection;
    uint64_t v22 = *(void **)&v15[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection];
    sub_100089C80((uint64_t)v30, (uint64_t)v28);
    uint64_t v23 = v29;
    if (v29)
    {
      sub_100021104(v28, v29);
      uint64_t v5 = *(void *)(v23 - 8);
      __chkstk_darwin();
      uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v5 + 16))(v7);
      uint64_t v8 = _bridgeAnythingToObjectiveC<A>(_:)(v7, v23);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v23);
      sub_100002AC4(v28);
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    [v22 setExportedObject:v8];
    swift_unknownObjectRelease(v8);
    sub_1000B2F2C((uint64_t)v30);
    [*(id *)&v15[v21] activate];
  }

  __break(1u);
}

id sub_1002FE248()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for XPCServer(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1002FE3B8()
{
  return type metadata accessor for XPCServer(0LL);
}

uint64_t type metadata accessor for XPCServer(uint64_t a1)
{
  uint64_t result = qword_100410128;
  if (!qword_100410128) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for XPCServer);
  }
  return result;
}

uint64_t sub_1002FE3FC(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[1] = &unk_100360320;
  void v6[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v6[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v6[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  _BYTE v6[6] = &unk_100360338;
  v6[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[8] = &unk_100360350;
  void v6[9] = &unk_100360368;
  v6[10] = (char *)&value witness table for Builtin.Int32 + 64;
  uint64_t result = type metadata accessor for DispatchTimeInterval(319LL);
  if (v3 <= 0x3F)
  {
    v6[11] = *(void *)(result - 8) + 64LL;
    v6[12] = &unk_100360350;
    uint64_t result = type metadata accessor for DispatchTime(319LL);
    if (v4 <= 0x3F)
    {
      v6[13] = *(void *)(result - 8) + 64LL;
      uint64_t result = type metadata accessor for Logger(319LL);
      if (v5 <= 0x3F)
      {
        v6[14] = *(void *)(result - 8) + 64LL;
        return swift_updateClassMetadata2(a1, 256LL, 15LL, v6, a1 + 80);
      }
    }
  }

  return result;
}

uint64_t sub_1002FE504(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v72 = type metadata accessor for DispatchTime(0LL);
  uint64_t v70 = *(void *)(v72 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v71 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v8 = *(void *)(v71 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for Logger(0LL);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(v2 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_entitlement);
  uint64_t v13 = *(void **)(v2 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_entitlement + 8);
  v15._countAndFlagsBits = v14;
  v15._object = v13;
  if (!NSXPCConnection.has(entitlement:)(v15))
  {
    id v27 = a2;
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v30 = 67109120;
      LODWORD(aBlock._countAndFlagsBits) = [v27 processIdentifier];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock._countAndFlagsBits + 4);

      uint64_t v31 = "Rejecting XPC connection from unentitled process with PID %d";
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v28, v29, v31, v30, 8u);
      swift_slowDealloc(v30, -1LL, -1LL);
LABEL_21:

      return 0LL;
    }

void sub_1002FEF6C(uint64_t a1, uint64_t a2)
{
  if (MKBDeviceUnlockedSinceBoot() == 1)
  {
    uint64_t v3 = a2 + 16;
    unint64_t v4 = (const char *)[(id)objc_opt_self(WiFiP2PXPCConnection) wifiPeerToPeerAvailableNotification];
    notify_post(v4);
    swift_beginAccess(v3, v9, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3);
    if (Strong)
    {
      uint64_t v6 = (void *)Strong;
      uint64_t v7 = (int *)(Strong + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_unlockObserver);
      swift_beginAccess(Strong + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_unlockObserver, &v8, 1LL, 0LL);
      if (*v7 != -1)
      {
        notify_cancel(*v7);
        *uint64_t v7 = -1;
      }
    }
  }

void sub_1002FF01C(void *a1)
{
  v3[4] = NANBitmap.Channel.operatingClass.getter;
  v3[5] = 0LL;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 1107296256LL;
  v3[2] = sub_1000021F0;
  v3[3] = &unk_1003FB620;
  uint64_t v2 = _Block_copy(v3);
  [a1 setInvalidationHandler:v2];
  _Block_release(v2);
}

void sub_1002FF190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)objc_opt_self(&OBJC_CLASS___NSXPCConnection);
  id v11 = [v10 currentConnection];
  uint64_t v12 = v11;
  if (v11)
  {
    unsigned int v13 = [v11 processIdentifier];
  }

  else
  {
    unsigned int v13 = 0;
  }

  uint64_t v14 = a4 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_lastProcessID;
  *(_DWORD *)uint64_t v14 = v13;
  *(_BYTE *)(v14 + 4) = v12 == 0LL;
  Swift::String v15 = (void *)(a4 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_lastProcessName);
  uint64_t v16 = *(void *)(a4 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_lastProcessName + 8);
  *Swift::String v15 = a2;
  v15[1] = a3;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v16);
  Lock.unlock()();
  if (a1 == 2)
  {
    id v17 = [*(id *)(a4 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_awdlListener) endpoint];
  }

  else if (a1 == 1)
  {
    id v17 = [*(id *)(a4 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_nanListener) endpoint];
  }

  else
  {
    if (a1)
    {
      id v18 = [v10 currentConnection];
      [v18 invalidate];
      goto LABEL_12;
    }

    id v17 = [*(id *)(a4 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_p2pListener) endpoint];
  }

  id v18 = v17;
  (*(void (**)(uint64_t))(a5 + 16))(a5);
LABEL_12:
}

uint64_t sub_1002FF338()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1002FF35C(uint64_t a1)
{
}

uint64_t sub_1002FF364(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002FF374(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_1002FF37C()
{
}

uint64_t sub_1002FF384()
{
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1002FF3B0()
{
  return sub_1002FDB24(*(void **)(v0 + 16), *(uint64_t (**)(void))(v0 + 24));
}

uint64_t sub_1002FF3BC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1002FF3E0()
{
}

void sub_1002FF404(uint64_t a1)
{
  v7[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v7[1] = "\b";
  _OWORD v7[2] = "\b";
  v7[3] = &unk_100360400;
  void v7[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v7[5] = &unk_100360418;
  v7[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v7[7] = "\b";
  v7[8] = &unk_100360418;
  void v7[9] = (char *)&value witness table for Builtin.Int64 + 64;
  v7[10] = &unk_100360430;
  sub_100056310( 319LL,  (unint64_t *)&qword_100405C10,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTime);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(v2 - 8) + 64LL;
    v7[11] = v4;
    v7[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v7[13] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v7[14] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v7[15] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v7[16] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v7[17] = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t v5 = type metadata accessor for DispatchTime(319LL);
    if (v6 <= 0x3F)
    {
      uint64_t v8 = *(void *)(v5 - 8) + 64LL;
      uint64_t v9 = (char *)&value witness table for Builtin.BridgeObject + 64;
      uint64_t v10 = (char *)&value witness table for Builtin.BridgeObject + 64;
      id v11 = "\b";
      uint64_t v12 = v8;
      uint64_t v13 = v4;
      uint64_t v14 = v4;
      Swift::String v15 = (char *)&value witness table for Builtin.UnknownObject + 64;
      uint64_t v16 = &unk_100360418;
      id v17 = &unk_100360418;
      id v18 = &unk_100360418;
      Swift::Bool v19 = "\b";
      uint64_t v20 = v4;
      uint64_t v21 = "\b";
      uint64_t v22 = &unk_100360418;
      uint64_t v23 = "\b";
      id v24 = (char *)&value witness table for Builtin.UnknownObject + 64;
      id v25 = &unk_100360448;
      uint64_t v26 = "\b";
      id v27 = (char *)&value witness table for Builtin.BridgeObject + 64;
      uint64_t v28 = (char *)&value witness table for Builtin.BridgeObject + 64;
      os_log_type_t v29 = &unk_100360418;
      uint64_t v30 = (char *)&value witness table for Builtin.BridgeObject + 64;
      uint64_t v31 = "\b";
      swift_initClassMetadata2(a1, 0LL, 42LL, v7, a1 + 424);
    }
  }

void sub_1002FF550(void (*a1)(int *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v26 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain(a3);
  int64_t v10 = 0LL;
  while (v9)
  {
    unint64_t v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v12 = v11 | (v10 << 6);
LABEL_5:
    uint64_t v13 = *(void *)(a3 + 56) + 24 * v12;
    __int16 v14 = *(_WORD *)(v13 + 4);
    char v15 = *(_BYTE *)(v13 + 6);
    uint64_t v16 = *(void *)(v13 + 8);
    unint64_t v17 = *(void *)(v13 + 16);
    int v21 = *(_DWORD *)v13;
    __int16 v22 = v14;
    char v23 = v15;
    uint64_t v24 = v16;
    unint64_t v25 = v17;
    sub_10002255C(v16, v17);
    a1(&v21);
    sub_100020B40(v16, v17);
    if (v3) {
      goto LABEL_24;
    }
  }

  if (__OFADD__(v10++, 1LL))
  {
    __break(1u);
    goto LABEL_26;
  }

  if (v10 >= v26) {
    goto LABEL_24;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v10);
  if (v19)
  {
LABEL_19:
    unint64_t v9 = (v19 - 1) & v19;
    unint64_t v12 = __clz(__rbit64(v19)) + (v10 << 6);
    goto LABEL_5;
  }

  int64_t v20 = v10 + 1;
  if (v10 + 1 >= v26) {
    goto LABEL_24;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19) {
    goto LABEL_18;
  }
  int64_t v20 = v10 + 2;
  if (v10 + 2 >= v26) {
    goto LABEL_24;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19) {
    goto LABEL_18;
  }
  int64_t v20 = v10 + 3;
  if (v10 + 3 >= v26) {
    goto LABEL_24;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19) {
    goto LABEL_18;
  }
  int64_t v20 = v10 + 4;
  if (v10 + 4 >= v26)
  {
LABEL_24:
    swift_release(a3);
    return;
  }

  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
LABEL_18:
    int64_t v10 = v20;
    goto LABEL_19;
  }

  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v10 >= v26) {
      goto LABEL_24;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_19;
    }
  }

uint64_t sub_1002FF724(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  char v23 = a1;
  uint64_t v5 = *(void *)(type metadata accessor for AWDLPeer.AdvertisedService(0LL) - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v9 = (char *)&v21 - v8;
  uint64_t v10 = *(void *)(a3 + 56);
  uint64_t v21 = a3 + 56;
  uint64_t v11 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v22 = (unint64_t)(v11 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a3);
  int64_t v15 = 0LL;
  while (v13)
  {
    unint64_t v16 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    unint64_t v17 = v16 | (v15 << 6);
LABEL_5:
    sub_100057FE8( *(void *)(a3 + 48) + *(void *)(v5 + 72) * v17,  (uint64_t)v9,  type metadata accessor for AWDLPeer.AdvertisedService);
    sub_100022628((uint64_t)v9, (uint64_t)v7, type metadata accessor for AWDLPeer.AdvertisedService);
    v23(v7);
    uint64_t result = sub_10005802C((uint64_t)v7, type metadata accessor for AWDLPeer.AdvertisedService);
    if (v3) {
      return swift_release(a3);
    }
  }

  if (__OFADD__(v15++, 1LL))
  {
    __break(1u);
    goto LABEL_26;
  }

  if (v15 >= v22) {
    return swift_release(a3);
  }
  unint64_t v19 = *(void *)(v21 + 8 * v15);
  if (v19)
  {
LABEL_19:
    unint64_t v13 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v15 << 6);
    goto LABEL_5;
  }

  int64_t v20 = v15 + 1;
  if (v15 + 1 >= v22) {
    return swift_release(a3);
  }
  unint64_t v19 = *(void *)(v21 + 8 * v20);
  if (v19) {
    goto LABEL_18;
  }
  int64_t v20 = v15 + 2;
  if (v15 + 2 >= v22) {
    return swift_release(a3);
  }
  unint64_t v19 = *(void *)(v21 + 8 * v20);
  if (v19) {
    goto LABEL_18;
  }
  int64_t v20 = v15 + 3;
  if (v15 + 3 >= v22) {
    return swift_release(a3);
  }
  unint64_t v19 = *(void *)(v21 + 8 * v20);
  if (v19) {
    goto LABEL_18;
  }
  int64_t v20 = v15 + 4;
  if (v15 + 4 >= v22) {
    return swift_release(a3);
  }
  unint64_t v19 = *(void *)(v21 + 8 * v20);
  if (v19)
  {
LABEL_18:
    int64_t v15 = v20;
    goto LABEL_19;
  }

  while (1)
  {
    int64_t v15 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v15 >= v22) {
      return swift_release(a3);
    }
    unint64_t v19 = *(void *)(v21 + 8 * v15);
    ++v20;
    if (v19) {
      goto LABEL_19;
    }
  }

uint64_t sub_1002FF960(void (*a1)(__int128 *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a3);
  int64_t v12 = 0LL;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    __int128 v20 = *(_OWORD *)(*(void *)(a3 + 56) + 16 * i);
    uint64_t v18 = *((void *)&v20 + 1);
    swift_retain(*((void *)&v20 + 1));
    a1(&v20);
    if (v3)
    {
      swift_release(a3);
      uint64_t v19 = v18;
      return swift_release(v19);
    }

    uint64_t result = swift_release(v18);
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v12++, 1LL)) {
      break;
    }
    if (v12 >= v10) {
      goto LABEL_26;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    if (!v16)
    {
      int64_t v17 = v12 + 1;
      if (v12 + 1 >= v10) {
        goto LABEL_26;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v17);
      if (v16) {
        goto LABEL_16;
      }
      int64_t v17 = v12 + 2;
      if (v12 + 2 >= v10) {
        goto LABEL_26;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v17);
      if (v16) {
        goto LABEL_16;
      }
      int64_t v17 = v12 + 3;
      if (v12 + 3 >= v10) {
        goto LABEL_26;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v17);
      if (v16)
      {
LABEL_16:
        int64_t v12 = v17;
        goto LABEL_17;
      }

      int64_t v17 = v12 + 4;
      if (v12 + 4 < v10)
      {
        unint64_t v16 = *(void *)(v6 + 8 * v17);
        if (!v16)
        {
          while (1)
          {
            int64_t v12 = v17 + 1;
            if (__OFADD__(v17, 1LL)) {
              goto LABEL_29;
            }
            if (v12 >= v10) {
              goto LABEL_26;
            }
            unint64_t v16 = *(void *)(v6 + 8 * v12);
            ++v17;
            if (v16) {
              goto LABEL_17;
            }
          }
        }

        goto LABEL_16;
      }

uint64_t sub_1002FFB08(uint64_t (*a1)(int *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a3);
  int64_t v12 = 0LL;
  while (v9)
  {
    unint64_t v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v14 = v13 | (v12 << 6);
LABEL_5:
    uint64_t v15 = *(void *)(a3 + 48) + 6 * v14;
    __int16 v16 = *(_WORD *)(v15 + 4);
    uint64_t v17 = *(void *)(*(void *)(a3 + 56) + 8 * v14);
    int v21 = *(_DWORD *)v15;
    __int16 v22 = v16;
    uint64_t v23 = v17;
    uint64_t result = a1(&v21);
    if (v3) {
      return swift_release(a3);
    }
  }

  if (__OFADD__(v12++, 1LL))
  {
    __break(1u);
    goto LABEL_26;
  }

  if (v12 >= v10) {
    return swift_release(a3);
  }
  unint64_t v19 = *(void *)(v6 + 8 * v12);
  if (v19)
  {
LABEL_19:
    unint64_t v9 = (v19 - 1) & v19;
    unint64_t v14 = __clz(__rbit64(v19)) + (v12 << 6);
    goto LABEL_5;
  }

  int64_t v20 = v12 + 1;
  if (v12 + 1 >= v10) {
    return swift_release(a3);
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19) {
    goto LABEL_18;
  }
  int64_t v20 = v12 + 2;
  if (v12 + 2 >= v10) {
    return swift_release(a3);
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19) {
    goto LABEL_18;
  }
  int64_t v20 = v12 + 3;
  if (v12 + 3 >= v10) {
    return swift_release(a3);
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19) {
    goto LABEL_18;
  }
  int64_t v20 = v12 + 4;
  if (v12 + 4 >= v10) {
    return swift_release(a3);
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
LABEL_18:
    int64_t v12 = v20;
    goto LABEL_19;
  }

  while (1)
  {
    int64_t v12 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v12 >= v10) {
      return swift_release(a3);
    }
    unint64_t v19 = *(void *)(v6 + 8 * v12);
    ++v20;
    if (v19) {
      goto LABEL_19;
    }
  }

uint64_t sub_1002FFCA0(void (*a1)(void), uint64_t a2)
{
  return sub_1003000F4( a1,  a2,  (uint64_t *)&unk_100410550,  (unint64_t)sub_1003333FC,  (void (*)(uint64_t *))sub_100333230,  (void (*)(_BYTE *))sub_100333258);
}

uint64_t sub_1002FFCD4(uint64_t (*a1)(int *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 56;
  uint64_t v7 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a3);
  int64_t v12 = 0LL;
  while (v9)
  {
    unint64_t v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v14 = v13 | (v12 << 6);
LABEL_5:
    uint64_t v15 = *(void *)(a3 + 48) - v14 + 8 * v14;
    __int16 v16 = *(_WORD *)(v15 + 4);
    char v17 = *(_BYTE *)(v15 + 6);
    int v21 = *(_DWORD *)v15;
    __int16 v22 = v16;
    char v23 = v17;
    uint64_t result = a1(&v21);
    if (v3) {
      return swift_release(a3);
    }
  }

  if (__OFADD__(v12++, 1LL))
  {
    __break(1u);
    goto LABEL_26;
  }

  if (v12 >= v10) {
    return swift_release(a3);
  }
  unint64_t v19 = *(void *)(v6 + 8 * v12);
  if (v19)
  {
LABEL_19:
    unint64_t v9 = (v19 - 1) & v19;
    unint64_t v14 = __clz(__rbit64(v19)) + (v12 << 6);
    goto LABEL_5;
  }

  int64_t v20 = v12 + 1;
  if (v12 + 1 >= v10) {
    return swift_release(a3);
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19) {
    goto LABEL_18;
  }
  int64_t v20 = v12 + 2;
  if (v12 + 2 >= v10) {
    return swift_release(a3);
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19) {
    goto LABEL_18;
  }
  int64_t v20 = v12 + 3;
  if (v12 + 3 >= v10) {
    return swift_release(a3);
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19) {
    goto LABEL_18;
  }
  int64_t v20 = v12 + 4;
  if (v12 + 4 >= v10) {
    return swift_release(a3);
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
LABEL_18:
    int64_t v12 = v20;
    goto LABEL_19;
  }

  while (1)
  {
    int64_t v12 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v12 >= v10) {
      return swift_release(a3);
    }
    unint64_t v19 = *(void *)(v6 + 8 * v12);
    ++v20;
    if (v19) {
      goto LABEL_19;
    }
  }

uint64_t sub_1002FFE64(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v30 = a1;
  uint64_t v29 = sub_100002274((uint64_t *)&unk_10040E410);
  __chkstk_darwin();
  uint64_t v28 = (uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  id v27 = (char *)&v25 - v6;
  uint64_t v7 = *(void *)(a3 + 64);
  uint64_t v25 = a3 + 64;
  uint64_t v8 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v26 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v31 = a3;
  uint64_t result = swift_bridgeObjectRetain(a3);
  int64_t v12 = 0LL;
  while (v10)
  {
    unint64_t v13 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v14 = v13 | (v12 << 6);
LABEL_5:
    uint64_t v15 = *(void *)(v31 + 56);
    uint64_t v16 = *(void *)(v31 + 48) + 6 * v14;
    __int16 v17 = *(_WORD *)(v16 + 4);
    uint64_t v18 = v15 + *(void *)(*(void *)(sub_100002274((uint64_t *)&unk_10040CC50) - 8) + 72LL) * v14;
    unint64_t v19 = v27;
    LODWORD(vswift_unknownObjectWeakDestroy(v0 + 16) = *(_DWORD *)v16;
    sub_1000226B0(v18, (uint64_t)&v27[*(int *)(v29 + 48)], (uint64_t *)&unk_10040CC50);
    *(_DWORD *)unint64_t v19 = v16;
    *((_WORD *)v19 + 2) = v17;
    uint64_t v20 = (uint64_t)v19;
    uint64_t v21 = v28;
    sub_1000586C0(v20, v28, (uint64_t *)&unk_10040E410);
    v30(v21);
    uint64_t result = sub_1000225EC(v21, (uint64_t *)&unk_10040E410);
    if (v3) {
      return swift_release(v31);
    }
  }

  if (__OFADD__(v12++, 1LL))
  {
    __break(1u);
    goto LABEL_26;
  }

  if (v12 >= v26) {
    return swift_release(v31);
  }
  unint64_t v23 = *(void *)(v25 + 8 * v12);
  if (v23)
  {
LABEL_19:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v14 = __clz(__rbit64(v23)) + (v12 << 6);
    goto LABEL_5;
  }

  int64_t v24 = v12 + 1;
  if (v12 + 1 >= v26) {
    return swift_release(v31);
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23) {
    goto LABEL_18;
  }
  int64_t v24 = v12 + 2;
  if (v12 + 2 >= v26) {
    return swift_release(v31);
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23) {
    goto LABEL_18;
  }
  int64_t v24 = v12 + 3;
  if (v12 + 3 >= v26) {
    return swift_release(v31);
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23) {
    goto LABEL_18;
  }
  int64_t v24 = v12 + 4;
  if (v12 + 4 >= v26) {
    return swift_release(v31);
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23)
  {
LABEL_18:
    int64_t v12 = v24;
    goto LABEL_19;
  }

  while (1)
  {
    int64_t v12 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v12 >= v26) {
      return swift_release(v31);
    }
    unint64_t v23 = *(void *)(v25 + 8 * v12);
    ++v24;
    if (v23) {
      goto LABEL_19;
    }
  }

uint64_t sub_1003000F4( void (*a1)(void), uint64_t a2, uint64_t *a3, unint64_t a4, void (*a5)(uint64_t *), void (*a6)(_BYTE *))
{
  uint64_t v10 = *v6;
  uint64_t v32 = v6[1];
  uint64_t v33 = v6[2];
  char v11 = *((_BYTE *)v6 + 24);
  uint64_t v30 = v6[4];
  uint64_t v31 = v6[5];
  char v12 = *((_BYTE *)v6 + 48);
  uint64_t v44 = *v6;
  __int128 v38 = *((_OWORD *)v6 + 2);
  char v29 = v12;
  char v39 = v12;
  if ((v11 & 1) != 0) {
    goto LABEL_38;
  }
  unint64_t v13 = a3;
  sub_1000586C0((uint64_t)&v38, (uint64_t)v40, a3);
  ((void (*)(__int128 *))a4)(&v38);
  a5(&v44);
  uint64_t result = sub_1000586C0((uint64_t)v40, (uint64_t)&v41, v13);
  if ((v43 & 1) == 0)
  {
    uint64_t v35 = v10 + 64;
    a4 = v32;
    id v34 = v13;
    uint64_t v16 = v33;
    int v17 = v33;
    do
    {
      if (v17 != v42)
      {
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        sub_100333224(v32, v33, 1);
        ((void (*)(__int128 *))a4)(&v38);
        a5(&v44);
        uint64_t result = sub_100333224(v32, v33, 1);
        break;
      }

      if (a4 == v41)
      {
        swift_bridgeObjectRelease(v10);
        sub_100022588(v32, v33, 0);
        sub_100022588(v30, v31, v29 & 1);
        uint64_t v26 = a4;
        uint64_t v27 = v16;
        return sub_100022588(v26, v27, 0);
      }

      if ((a4 & 0x8000000000000000LL) != 0) {
        goto LABEL_35;
      }
      a5 = (void (*)(uint64_t *))(1LL << *(_BYTE *)(v10 + 32));
      unint64_t v18 = a4 >> 6;
      unint64_t v19 = *(void *)(v35 + 8 * (a4 >> 6));
      if (((v19 >> a4) & 1) == 0) {
        goto LABEL_36;
      }
      if (*(_DWORD *)(v10 + 36) != (_DWORD)v16) {
        goto LABEL_37;
      }
      int v17 = v16;
      unint64_t v20 = v19 & (-2LL << (a4 & 0x3F));
      if (v20)
      {
        a5 = (void (*)(uint64_t *))(__clz(__rbit64(v20)) | a4 & 0xFFFFFFFFFFFFFFC0LL);
        goto LABEL_17;
      }

      uint64_t v21 = a1;
      unint64_t v22 = v18 + 1;
      unint64_t v23 = ((unint64_t)a5 + 63) >> 6;
      if (v18 + 1 >= v23) {
        goto LABEL_16;
      }
      unint64_t v24 = *(void *)(v35 + 8 * v22);
      if (v24) {
        goto LABEL_14;
      }
      unint64_t v22 = v18 + 2;
      if (v18 + 2 >= v23) {
        goto LABEL_15;
      }
      unint64_t v24 = *(void *)(v35 + 8 * v22);
      if (v24) {
        goto LABEL_14;
      }
      unint64_t v22 = v18 + 3;
      if (v18 + 3 >= v23)
      {
        a1 = v21;
      }

      else
      {
        unint64_t v24 = *(void *)(v35 + 8 * v22);
        if (v24)
        {
LABEL_28:
          a6(v40);
          sub_100022588(a4, v16, 0);
LABEL_14:
          a5 = (void (*)(uint64_t *))(__clz(__rbit64(v24)) + (v22 << 6));
LABEL_15:
          unint64_t v13 = v34;
LABEL_16:
          a1 = v21;
          goto LABEL_17;
        }

        unint64_t v25 = v23 - 4;
        a1 = v21;
        while (v25 != v18)
        {
          unint64_t v24 = *(void *)(v10 + 96 + 8 * v18++);
          if (v24)
          {
            unint64_t v22 = v18 + 3;
            goto LABEL_28;
          }
        }
      }

      a6(v40);
      sub_100022588(a4, v16, 0);
      unint64_t v13 = v34;
LABEL_17:
      v36[0] = a4;
      v36[1] = v16;
      char v37 = 0;
      a1(v36);
      sub_100022588(a4, v16, 0);
      if (v7)
      {
        swift_bridgeObjectRelease(v10);
        sub_100022588(v32, v33, 0);
        sub_100022588(v30, v31, v29 & 1);
        uint64_t v26 = (uint64_t)a5;
        uint64_t v27 = v33;
        return sub_100022588(v26, v27, 0);
      }

      uint64_t result = sub_1000586C0((uint64_t)v40, (uint64_t)&v41, v13);
      uint64_t v16 = v33;
      a4 = (unint64_t)a5;
    }

    while ((v43 & 1) == 0);
  }

  __break(1u);
  return result;
}

uint64_t sub_100300440(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 56;
  uint64_t v7 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a3);
  int64_t v12 = 0LL;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    uint64_t v18 = *(void *)(a3 + 48) + 24 * i;
    uint64_t v19 = *(void *)v18;
    uint64_t v20 = *(void *)(v18 + 8);
    char v21 = *(_BYTE *)(v18 + 16);
    LOBYTE(v18) = *(_BYTE *)(v18 + 17);
    v22[0] = v19;
    v22[1] = v20;
    char v23 = v21;
    char v24 = v18;
    swift_bridgeObjectRetain(v20);
    a1(v22);
    if (v3)
    {
      swift_release(a3);
      return swift_bridgeObjectRelease(v20);
    }

    uint64_t result = swift_bridgeObjectRelease(v20);
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v12++, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v12 >= v10) {
      return swift_release(a3);
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    if (!v16) {
      break;
    }
LABEL_17:
    unint64_t v9 = (v16 - 1) & v16;
  }

  int64_t v17 = v12 + 1;
  if (v12 + 1 >= v10) {
    return swift_release(a3);
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 2;
  if (v12 + 2 >= v10) {
    return swift_release(a3);
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 3;
  if (v12 + 3 >= v10) {
    return swift_release(a3);
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 4;
  if (v12 + 4 >= v10) {
    return swift_release(a3);
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_16:
    int64_t v12 = v17;
    goto LABEL_17;
  }

  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v12 >= v10) {
      return swift_release(a3);
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_17;
    }
  }

uint64_t sub_100300600(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 56;
  uint64_t v7 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a3);
  int64_t v12 = 0LL;
  while (v9)
  {
    unint64_t v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v14 = v13 | (v12 << 6);
LABEL_5:
    uint64_t v18 = *(void *)(*(void *)(a3 + 48) + 8 * v14);
    uint64_t result = a1(&v18);
    if (v3) {
      return swift_release(a3);
    }
  }

  if (__OFADD__(v12++, 1LL))
  {
    __break(1u);
    goto LABEL_26;
  }

  if (v12 >= v10) {
    return swift_release(a3);
  }
  unint64_t v16 = *(void *)(v6 + 8 * v12);
  if (v16)
  {
LABEL_19:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v12 << 6);
    goto LABEL_5;
  }

  int64_t v17 = v12 + 1;
  if (v12 + 1 >= v10) {
    return swift_release(a3);
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_18;
  }
  int64_t v17 = v12 + 2;
  if (v12 + 2 >= v10) {
    return swift_release(a3);
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_18;
  }
  int64_t v17 = v12 + 3;
  if (v12 + 3 >= v10) {
    return swift_release(a3);
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_18;
  }
  int64_t v17 = v12 + 4;
  if (v12 + 4 >= v10) {
    return swift_release(a3);
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_18:
    int64_t v12 = v17;
    goto LABEL_19;
  }

  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v12 >= v10) {
      return swift_release(a3);
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_19;
    }
  }

void sub_100300778(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void *))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4(a2);
  swift_release(v3);
}

void sub_1003007CC(void *a1)
{
  uint64_t v2 = v1;
  id v4 = sub_100331960(a1, 0, 1);
  if (v4)
  {
    swift_willThrow(v4);
  }

  else
  {
    uint64_t v5 = *(void *)(*(void *)v1 + 544LL);
    uint64_t v6 = (void *)(v1 + v5);
    swift_beginAccess(v2 + v5, v11, 33LL, 0LL);
    id v7 = a1;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    unint64_t v9 = *(void *)((*v6 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v8 = *(void *)((*v6 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v9 >= v8 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1LL);
    }
    uint64_t v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
    specialized Array._endMutation()(v10);
    swift_endAccess(v11);
    sub_100306904();
  }

double sub_1003008A8(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 544LL));
  swift_beginAccess(v3, v12, 0LL, 0LL);
  uint64_t v4 = *v3;
  swift_bridgeObjectRetain(*v3);
  sub_100320DC0(a1, v4);
  unint64_t v6 = v5;
  char v8 = v7;
  *(void *)&double result = swift_bridgeObjectRelease(v4).n128_u64[0];
  if ((v8 & 1) == 0)
  {
    swift_beginAccess(v3, v11, 33LL, 0LL);
    uint64_t v10 = (void *)sub_100320F58(v6);
    swift_endAccess(v11);

    return sub_100306904();
  }

  return result;
}

void sub_100300968(void *a1)
{
  uint64_t v3 = v2;
  unint64_t v5 = (void *)*v1;
  sub_100002274(qword_100410330);
  __chkstk_darwin();
  uint64_t v85 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_100405D40);
  __chkstk_darwin();
  unsigned int v84 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v9 = (char *)&v79 - v8;
  uint64_t v10 = type metadata accessor for DispatchTime(0LL);
  uint64_t v86 = *(void *)(v10 - 8);
  uint64_t v87 = v10;
  __chkstk_darwin();
  int64_t v12 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = v5[51];
  uint64_t v14 = v5[52];
  uint64_t v16 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation(255LL, v13, v14, v15);
  uint64_t v17 = type metadata accessor for Optional(0LL, v16);
  uint64_t v82 = *(void *)(v17 - 8);
  uint64_t v83 = v17;
  __chkstk_darwin();
  uint64_t v81 = (char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v88 = (uint64_t)&v79 - v19;
  uint64_t v89 = *(void *)(v16 - 8);
  uint64_t v90 = v16;
  __chkstk_darwin();
  char v21 = (char *)&v79 - v20;
  uint64_t v22 = v5[69];
  unint64_t v92 = v1;
  char v23 = (char *)v1 + v22;
  swift_beginAccess((char *)v1 + v22, v95, 0LL, 0LL);
  uint64_t v24 = *(void *)v23;
  if (*(void *)(*(void *)v23 + 16LL))
  {
    uint64_t v91 = v2;
    swift_bridgeObjectRetain(v24);
    unint64_t v25 = sub_1003278A0((uint64_t)a1);
    if ((v26 & 1) != 0)
    {
      unint64_t v27 = v25;
      uint64_t v28 = *(unsigned int *)(v24 + 36);
      swift_bridgeObjectRelease(v24);
      swift_beginAccess(v23, v94, 33LL, 0LL);
      uint64_t v29 = sub_100058CD0( 255LL,  (unint64_t *)&unk_10040CC00,  &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
      unint64_t v30 = sub_100245750();
      uint64_t v31 = v90;
      uint64_t v32 = type metadata accessor for Dictionary(0LL, v29, v90, v30);
      Dictionary.remove(at:)(v93, v21, v27, v28, 0LL, v32);
      uint64_t v33 = (void *)v93[0];
      swift_endAccess(v94);

      double v34 = sub_100306904();
      uint64_t v35 = v88;
      uint64_t v36 = v89;
      (*(void (**)(uint64_t, char *, uint64_t, double))(v89 + 16))(v88, v21, v31, v34);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v35, 0LL, 1LL, v31);
      v93[0] = a1;
      swift_beginAccess(v23, v94, 33LL, 0LL);
      id v37 = a1;
      Dictionary.subscript.setter(v35, v93, v32);
      swift_endAccess(v94);
      v38.n128_f64[0] = sub_100306904();
      (*(void (**)(char *, uint64_t, __n128))(v36 + 8))(v21, v31, v38);
      return;
    }

    swift_bridgeObjectRelease(v24);
    uint64_t v3 = v91;
  }

  char v39 = v92;
  sub_100314480(a1, 1);
  if (!v3)
  {
    uint64_t v91 = 0LL;
    uint64_t v40 = (void *)((char *)v39 + *(void *)(*v39 + 536LL));
    swift_beginAccess(v40, v94, 0LL, 0LL);
    uint64_t v80 = v40;
    uint64_t v41 = *v40;
    if (*(void *)(*v40 + 16LL))
    {
      swift_bridgeObjectRetain(*v40);
      uint64_t v79 = a1;
      unint64_t v42 = sub_1003278A0((uint64_t)a1);
      if ((v43 & 1) != 0)
      {
        unint64_t v44 = v42;
        uint64_t v45 = *(unsigned int *)(v41 + 36);
        swift_bridgeObjectRelease(v41);
        id v46 = v80;
        swift_beginAccess(v80, v93, 33LL, 0LL);
        uint64_t v47 = sub_100058CD0( 255LL,  (unint64_t *)&unk_10040CC00,  &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
        unint64_t v48 = sub_100245750();
        uint64_t v49 = v90;
        uint64_t v50 = type metadata accessor for Dictionary(0LL, v47, v90, v48);
        Dictionary.remove(at:)(&v96, v21, v44, v45, 0LL, v50);
        uint64_t v51 = v96;
        swift_endAccess(v93);

        double v52 = sub_100306904();
        uint64_t v53 = v88;
        uint64_t v54 = v89;
        (*(void (**)(uint64_t, char *, uint64_t, double))(v89 + 16))(v88, v21, v49, v52);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v54 + 56))(v53, 0LL, 1LL, v49);
        uint64_t v55 = v79;
        id v96 = v79;
        swift_beginAccess(v46, v93, 33LL, 0LL);
        id v56 = v55;
        Dictionary.subscript.setter(v53, &v96, v50);
        swift_endAccess(v93);
        v57.n128_f64[0] = sub_100306904();
        (*(void (**)(char *, uint64_t, __n128))(v54 + 8))(v21, v49, v57);
        return;
      }

      swift_bridgeObjectRelease(v41);
    }

    type metadata accessor for P2PTimer(0LL);
    id v58 = a1;
    variable initialization expression of AWDLPeer.lastUpdated();
    BOOL v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v86 + 56);
    v59(v9, 1LL, 1LL, v87);
    uint64_t v60 = type metadata accessor for UUID(0LL);
    uint64_t v61 = (uint64_t)v85;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56LL))(v85, 1LL, 1LL, v60);
    uint64_t v62 = v88;
    sub_100312F78((uint64_t)v12, (uint64_t)v9, v61, v13, v14, v88);
    uint64_t v64 = v89;
    uint64_t v63 = v90;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v89 + 56))(v62, 0LL, 1LL, v90);
    id v96 = v58;
    unint64_t v65 = v80;
    swift_beginAccess(v80, v93, 33LL, 0LL);
    uint64_t v66 = sub_100058CD0( 255LL,  (unint64_t *)&unk_10040CC00,  &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
    unint64_t v67 = sub_100245750();
    uint64_t v68 = type metadata accessor for Dictionary(0LL, v66, v63, v67);
    Dictionary.subscript.setter(v62, &v96, v68);
    swift_endAccess(v93);
    id v69 = objc_msgSend(v58, "uniqueIdentifier", sub_100306904());
    int v70 = AWDLTrafficRegistrationService.serviceType.getter((uint64_t)v69);

    if (v70 == 2)
    {
      swift_beginAccess(v65, v93, 32LL, 0LL);
      uint64_t v71 = *v65;
      id v96 = v58;
      id v72 = v58;
      uint64_t v73 = v81;
      Dictionary.subscript.getter(&v96, v71, v66, v63);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v73, 1LL, v63))
      {
        (*(void (**)(char *, uint64_t))(v82 + 8))(v73, v83);
        swift_endAccess(v93);
        uint64_t v74 = 1LL;
        uint64_t v75 = v92;
        uint64_t v76 = (uint64_t)v84;
        uint64_t v77 = v87;
      }

      else
      {
        uint64_t v77 = v87;
        uint64_t v76 = (uint64_t)v84;
        (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v84, v73, v87);
        (*(void (**)(char *, uint64_t))(v82 + 8))(v73, v83);
        swift_endAccess(v93);
        uint64_t v74 = 0LL;
        uint64_t v75 = v92;
      }

      v59((char *)v76, v74, 1LL, v77);
      uint64_t v78 = (uint64_t)v75 + *(void *)(*v75 + 512LL);
      swift_beginAccess(v78, v93, 33LL, 0LL);
      sub_100057104(v76, v78, &qword_100405D40);
      swift_endAccess(v93);
      *(void *)((char *)v75 + *(void *)(*v75 + 496LL)) = 0LL;
      *((_BYTE *)v75 + *(void *)(*v75 + 504LL)) = 2;
    }
  }

void sub_1003010B0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v207 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v206 = *(void *)(v207 - 8);
  __chkstk_darwin();
  id v205 = (uint64_t *)((char *)&v201 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_100002274(qword_100410330);
  __chkstk_darwin();
  uint64_t v212 = (char *)&v201 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_100405D40);
  __chkstk_darwin();
  __n128 v203 = (char *)&v201 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v211 = (char *)&v201 - v8;
  uint64_t v214 = type metadata accessor for DispatchTime(0LL);
  uint64_t v213 = *(void *)(v214 - 8);
  __chkstk_darwin();
  uint64_t v210 = (char *)&v201 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void *)(v4 + 408);
  uint64_t v10 = *(void *)(v4 + 416);
  uint64_t v12 = *(void *)(v10 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v12,  v11,  &protocol requirements base descriptor for P2PControls);
  uint64_t v201 = v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v12,  v11,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v15 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v221 = AssociatedConformanceWitness;
  unint64_t v222 = AssociatedTypeWitness;
  uint64_t v16 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v15,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.PreferencesBacking: PreferencesStorage);
  uint64_t v18 = (void *)type metadata accessor for Preferences(0LL, v15, v16, v17);
  uint64_t v219 = *(v18 - 1);
  uint64_t v220 = (void (*)(void, void))v18;
  __chkstk_darwin();
  uint64_t v218 = (char *)&v201 - v19;
  uint64_t v215 = v10;
  uint64_t v216 = v11;
  uint64_t v21 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation(255LL, v11, v10, v20);
  uint64_t v22 = type metadata accessor for Optional(0LL, v21);
  uint64_t v224 = *(void *)(v22 - 8);
  uint64_t v225 = v22;
  __chkstk_darwin();
  uint64_t v204 = (char *)&v201 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v209 = (uint64_t)&v201 - v24;
  __chkstk_darwin();
  uint64_t v223 = (char *)&v201 - v25;
  __chkstk_darwin();
  unint64_t v27 = (char *)&v201 - v26;
  uint64_t v28 = *(void *)(v21 - 8);
  __chkstk_darwin();
  unint64_t v30 = (char *)&v201 - v29;
  id v31 = [a1 peerAddress];
  WiFiMACAddress.wifiAddress.getter();
  uint64_t v202 = v32;

  uint64_t v33 = (char *)v2 + *(void *)(*v2 + 552LL);
  swift_beginAccess(v33, v230, 0LL, 0LL);
  uint64_t v34 = *(void *)v33;
  uint64_t v35 = *(void *)(*(void *)v33 + 16LL);
  unint64_t v227 = v2;
  if (v35)
  {
    swift_bridgeObjectRetain(v34);
    unint64_t v36 = sub_1003278A0((uint64_t)a1);
    if ((v37 & 1) != 0)
    {
      unint64_t v38 = v36;
      uint64_t v39 = *(unsigned int *)(v34 + 36);
      swift_bridgeObjectRelease(v34);
      swift_beginAccess(v33, v229, 33LL, 0LL);
      uint64_t v40 = sub_100058CD0( 255LL,  (unint64_t *)&unk_10040CC00,  &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
      unint64_t v41 = sub_100245750();
      uint64_t v42 = type metadata accessor for Dictionary(0LL, v40, v21, v41);
      Dictionary.remove(at:)(&v231, v30, v38, v39, 0LL, v42);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v21);
      id v43 = v231;
      swift_endAccess(v229);

      uint64_t v2 = v227;
      sub_100306904();
    }

    else
    {
      swift_bridgeObjectRelease(v34);
      uint64_t v2 = v227;
    }
  }

  unint64_t v44 = (void *)((char *)v2 + *(void *)(*v2 + 560LL));
  swift_beginAccess(v44, v229, 32LL, 0LL);
  uint64_t v45 = *v44;
  id v231 = a1;
  id v46 = a1;
  uint64_t v47 = sub_100058CD0(0LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  unint64_t v48 = sub_100245750();
  id v49 = v46;
  uint64_t v50 = v45;
  uint64_t v51 = v223;
  Dictionary.subscript.getter(&v231, v50, v47, v21);

  swift_endAccess(v229);
  uint64_t v226 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  int v52 = v226(v51, 1LL, v21);
  uint64_t v53 = v21;
  uint64_t v228 = v49;
  uint64_t v208 = v47;
  if (v52 == 1)
  {
    uint64_t v54 = v51;
    uint64_t v55 = (void *)((char *)v2 + *(void *)(*v2 + 576LL));
    swift_beginAccess(v55, v229, 32LL, 0LL);
    uint64_t v56 = *v55;
    id v231 = v49;
    id v57 = v49;
    Dictionary.subscript.getter(&v231, v56, v47, v53);

    swift_endAccess(v229);
    uint64_t v59 = v224;
    uint64_t v58 = v225;
    (*(void (**)(char *, uint64_t))(v224 + 8))(v54, v225);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v27, v51, v21);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v27, 0LL, 1LL, v21);
    uint64_t v59 = v224;
    uint64_t v58 = v225;
  }

  int v60 = v226(v27, 1LL, v53);
  uint64_t v61 = *(void (**)(char *, uint64_t))(v59 + 8);
  v61(v27, v58);
  BOOL v62 = v60 == 1;
  uint64_t v63 = v228;
  if (v62)
  {
    id v64 = sub_100331960(v228, 1, 1);
    if (v64) {
      goto LABEL_23;
    }
  }

  unint64_t v65 = v48;
  uint64_t v224 = v53;
  id v66 = [v63 uniqueIdentifier];
  uint64_t v67 = AWDLTrafficRegistrationServiceEdgeKit;
  uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
  uint64_t v70 = v69;
  uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
  uint64_t v73 = v71;
  if (v68 == v72 && v70 == v71)
  {

    swift_bridgeObjectRelease_n(v70, 2LL);
LABEL_15:
    uint64_t v75 = v221;
    uint64_t v76 = *(void (**)(uint64_t, uint64_t))(v221 + 120);
    uint64_t v77 = swift_checkMetadataState(0LL, v222);
    uint64_t v78 = v218;
    v76(v77, v75);
    uint64_t v79 = v220;
    LOBYTE(v76) = Preferences.edgeKitSupport.getter((uint64_t)v220);
    uint64_t v80 = (*(uint64_t (**)(char *, void))(v219 + 8))(v78, v79);
    uint64_t v91 = (os_log_s *)Logger.logObject.getter(v80);
    os_log_type_t v92 = static os_log_type_t.error.getter(v91);
    if (os_log_type_enabled(v91, v92))
    {
      uint64_t v93 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v93 = 0;
      _os_log_impl((void *)&_mh_execute_header, v91, v92, "EdgeKit is not supported", v93, 2u);
      swift_slowDealloc(v93, -1LL, -1LL);
    }

    unint64_t v94 = sub_1000033FC();
    id v64 = (id)swift_allocError(&type metadata for WiFiError, v94, 0LL, 0LL);
    *(_OWORD *)uint64_t v95 = xmmword_10033A970;
    *(_BYTE *)(v95 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
LABEL_23:
    swift_willThrow(v64);
    return;
  }

  char v74 = _stringCompareWithSmolCheck(_:_:expecting:)(v68, v70, v72, v71, 0LL);

  swift_bridgeObjectRelease(v70);
  swift_bridgeObjectRelease(v73);
  if ((v74 & 1) != 0) {
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v81 = v228;
  uint64_t v82 = v217;
  sub_100314480(v228, 1);
  if (v82) {
    return;
  }
  id v83 = [v81 uniqueIdentifier];
  uint64_t v84 = AWDLTrafficRegistrationServiceAirPlayConnectivity;
  uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
  uint64_t v87 = v86;
  uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
  uint64_t v90 = v88;
  if (v85 == v89 && v87 == v88)
  {

    swift_bridgeObjectRelease_n(v87, 2LL);
    return;
  }

  char v96 = _stringCompareWithSmolCheck(_:_:expecting:)(v85, v87, v89, v88, 0LL);

  swift_bridgeObjectRelease(v87);
  *(void *)&double v97 = swift_bridgeObjectRelease(v90).n128_u64[0];
  if ((v96 & 1) != 0) {
    return;
  }
  uint64_t v223 = 0LL;
  int v98 = v228;
  id v99 = objc_msgSend(v228, "uniqueIdentifier", v97);
  int v100 = AWDLTrafficRegistrationService.serviceType.getter((uint64_t)v99);

  if (v100 != 2)
  {
    unint64_t v222 = v65;
    uint64_t v101 = v227;
LABEL_33:
    uint64_t v103 = v213;
    goto LABEL_36;
  }

  uint64_t v101 = v227;
  uint64_t v102 = *(void *)((char *)v101 + *(void *)(*v101 + 592LL));
  uint64_t v103 = v213;
  if (v102)
  {
    swift_retain();
    uint64_t v104 = (unsigned __int16 *)WiFiAddress.zero.unsafeMutableAddressor();
    uint64_t v105 = v202 & 0xFFFFFFFFFFFFLL;
    if (static WiFiAddress.!= infix(_:_:)( v202 & 0xFFFFFFFFFFFFLL,  *v104 | ((unint64_t)*(unsigned int *)(v104 + 1) << 16)))
    {
      WiFiAddress.ipv6LinkLocalAddress.getter(v105);
      uint64_t v107 = v106;
      uint64_t v109 = v108;
      uint64_t v111 = v110;
      uint64_t v113 = v112;
      uint64_t v114 = *(uint64_t (**)(uint64_t *))(*(void *)v102 + 392LL);
      uint64_t v221 = v102;
      uint64_t v220 = (void (*)(void, void))v114(v229);
      uint64_t v116 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable(0LL, v216, v201, v115);
      unint64_t v222 = v105;
      unsigned int v117 = v223;
      WiFiInterface.NeighborDiscoveryTable.postPeerPresence(macAddress:ipv6Address:)(v105, v107, v109, v111, v113, v116);
      if (v117)
      {
        v220(v229, 1LL);
        swift_bridgeObjectRelease(v113);
        unsigned __int16 v118 = v228;
        swift_retain();
        swift_errorRetain(v117);
        id v119 = v118;
        swift_retain();
        uint64_t v120 = swift_errorRetain(v117);
        uint64_t v121 = (os_log_s *)Logger.logObject.getter(v120);
        os_log_type_t v122 = static os_log_type_t.error.getter(v121);
        int v123 = v122;
        if (os_log_type_enabled(v121, v122))
        {
          uint64_t v124 = swift_slowAlloc(42LL, -1LL);
          uint64_t v223 = v117;
          uint64_t v125 = v124;
          uint64_t v226 = (uint64_t (*)(char *, uint64_t, uint64_t))swift_slowAlloc(8LL, -1LL);
          uint64_t v228 = (void *)swift_slowAlloc(96LL, -1LL);
          v229[0] = (uint64_t)v228;
          *(_DWORD *)uint64_t v125 = 136315906;
          uint64_t v126 = v221;
          id v127 = [v119 uniqueIdentifier];
          LODWORD(v225) = v123;
          id v128 = v127;
          uint64_t v129 = static String._unconditionallyBridgeFromObjectiveC(_:)(v127);
          unint64_t v131 = v130;

          id v231 = (id)sub_10000235C(v129, v131, v229);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, &v232);

          swift_bridgeObjectRelease(v131);
          *(_WORD *)(v125 + 12) = 2080;
          uint64_t v132 = WiFiAddress.description.getter(v222);
          unint64_t v134 = v133;
          id v231 = (id)sub_10000235C(v132, v133, v229);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, &v232);
          swift_bridgeObjectRelease(v134);
          *(_WORD *)(v125 + 22) = 2080;
          uint64_t v135 = (uint64_t *)(v126 + *(void *)(*(void *)v126 + 104LL));
          uint64_t v136 = *v135;
          unint64_t v137 = v135[1];
          swift_bridgeObjectRetain(v137);
          id v231 = (id)sub_10000235C(v136, v137, v229);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, &v232);
          uint64_t v138 = v126;
          swift_release_n(v126, 2LL);
          swift_bridgeObjectRelease(v137);
          *(_WORD *)(v125 + 32) = 2112;
          swift_errorRetain(v223);
          uint64_t v139 = (void *)_swift_stdlib_bridgeErrorToNSError(v223);
          id v231 = v139;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, &v232);
          uint64_t v140 = v226;
          *(void *)uint64_t v226 = v139;
          swift_errorRelease(v223);
          swift_errorRelease(v223);
          _os_log_impl( (void *)&_mh_execute_header,  v121,  (os_log_type_t)v225,  "Will clear traffic registration for %s to %s because failed to post peer presence on %s: %@",  (uint8_t *)v125,  0x2Au);
          uint64_t v141 = sub_100002274(&qword_100404DE0);
          swift_arrayDestroy(v140, 1LL, v141);
          swift_slowDealloc(v140, -1LL, -1LL);
          uint64_t v142 = v228;
          swift_arrayDestroy(v228, 3LL, &type metadata for Any[8]);
          swift_slowDealloc(v142, -1LL, -1LL);
          swift_slowDealloc(v125, -1LL, -1LL);
        }

        else
        {
          uint64_t v138 = v221;
          swift_release_n(v221, 2LL);

          swift_errorRelease(v117);
          swift_errorRelease(v117);
        }

        sub_100314480(v119, 0);
        swift_willThrow(v200);
        swift_release(v138);
        return;
      }

      unint64_t v222 = v65;
      uint64_t v223 = 0LL;
      v220(v229, 0LL);
      swift_release(v221);
      swift_bridgeObjectRelease(v113);
      uint64_t v101 = v227;
      int v98 = v228;
      goto LABEL_33;
    }

    unint64_t v222 = v65;
    swift_release(v102);
  }

  else
  {
    unint64_t v222 = v65;
  }

void sub_1003022E8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v5 = *(void *)(*(void *)v1 + 408LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 416LL);
  uint64_t v6 = *(void *)(v4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v6,  v5,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v6,  v5,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v7 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v136 = *(void *)(v7 - 8);
  __chkstk_darwin();
  unint64_t v130 = (char *)&v123 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v132 = (char *)&v123 - v9;
  sub_100002274(qword_100410330);
  __chkstk_darwin();
  uint64_t v131 = (uint64_t)&v123 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v140 = (uint64_t)&v123 - v11;
  uint64_t v13 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation(255LL, v5, v4, v12);
  uint64_t v139 = type metadata accessor for Optional(0LL, v13);
  uint64_t v14 = *(void *)(v139 - 8);
  __chkstk_darwin();
  uint64_t v138 = (char *)&v123 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v141 = (char *)&v123 - v16;
  uint64_t v142 = v13;
  uint64_t v143 = *(void *)(v13 - 8);
  __chkstk_darwin();
  unint64_t v133 = (char *)&v123 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v19 = (char *)&v123 - v18;
  id v145 = a1;
  id v20 = [a1 uniqueIdentifier];
  int v21 = AWDLTrafficRegistrationService.serviceType.getter((uint64_t)v20);

  uint64_t v137 = v7;
  if (v21 != 2 || !*(void *)(v2 + *(void *)(*(void *)v2 + 592LL)))
  {
    uint64_t v69 = v142;
    uint64_t v68 = v143;
LABEL_10:
    uint64_t v70 = v141;
    goto LABEL_11;
  }

  uint64_t v128 = v2;
  uint64_t v126 = v14;
  id v127 = v19;
  uint64_t v25 = swift_retain();
  uint64_t v26 = v145;
  id v27 = [v145 peerAddress];
  WiFiMACAddress.wifiAddress.getter();
  uint64_t v129 = v28;

  id v29 = [v26 peerAddress];
  WiFiMACAddress.wifiAddress.getter();
  uint64_t v31 = v30;

  WiFiAddress.ipv6LinkLocalAddress.getter(v31 & 0xFFFFFFFFFFFFLL);
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v40 = v25;
  unint64_t v41 = (void (*)(uint64_t *, uint64_t))(*(uint64_t (**)(uint64_t *))(*(void *)v25 + 392LL))(v146);
  uint64_t v43 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable(0LL, v5, v6, v42);
  uint64_t v44 = v144;
  WiFiInterface.NeighborDiscoveryTable.postPeerAbsence(macAddress:ipv6Address:)( v129 & 0xFFFFFFFFFFFFLL,  v33,  v35,  v37,  v39,  v43);
  uint64_t v144 = v44;
  if (v44)
  {
    v41(v146, 1LL);
    swift_bridgeObjectRelease(v39);
    uint64_t v2 = v128;
    uint64_t v45 = v40;
    swift_retain();
    id v46 = v145;
    uint64_t v47 = v144;
    swift_errorRetain(v144);
    swift_retain();
    id v48 = v46;
    uint64_t v49 = swift_errorRetain(v47);
    uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = static os_log_type_t.error.getter(v50);
    int v52 = v51;
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v53 = swift_slowAlloc(32LL, -1LL);
      uint64_t v124 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v129 = swift_slowAlloc(64LL, -1LL);
      v146[0] = v129;
      *(_DWORD *)uint64_t v53 = 136315650;
      int v125 = v52;
      id v54 = [v48 peerAddress];
      WiFiMACAddress.wifiAddress.getter();
      uint64_t v56 = v55;

      uint64_t v57 = WiFiAddress.description.getter(v56 & 0xFFFFFFFFFFFFLL);
      unint64_t v59 = v58;
      uint64_t v147 = sub_10000235C(v57, v58, v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);

      swift_bridgeObjectRelease(v59);
      *(_WORD *)(v53 + 12) = 2080;
      int v60 = (uint64_t *)(v45 + *(void *)(*(void *)v45 + 104LL));
      uint64_t v61 = *v60;
      unint64_t v62 = v60[1];
      swift_bridgeObjectRetain(v62);
      uint64_t v147 = sub_10000235C(v61, v62, v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);
      swift_release_n(v45, 2LL);
      swift_bridgeObjectRelease(v62);
      *(_WORD *)(v53 + 22) = 2112;
      uint64_t v63 = v144;
      swift_errorRetain(v144);
      uint64_t v64 = _swift_stdlib_bridgeErrorToNSError(v63);
      uint64_t v147 = v64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);
      unint64_t v65 = v124;
      *uint64_t v124 = v64;
      swift_errorRelease(v63);
      swift_errorRelease(v63);
      _os_log_impl( (void *)&_mh_execute_header,  v50,  (os_log_type_t)v125,  "Failed to clear peer %s on %s: %@",  (uint8_t *)v53,  0x20u);
      uint64_t v66 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v65, 1LL, v66);
      swift_slowDealloc(v65, -1LL, -1LL);
      uint64_t v67 = v129;
      swift_arrayDestroy(v129, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v67, -1LL, -1LL);
      swift_slowDealloc(v53, -1LL, -1LL);
      swift_release(v45);
      swift_errorRelease(v63);
    }

    else
    {
      swift_release(v45);
      uint64_t v71 = v144;
      swift_errorRelease(v144);
      swift_release_n(v45, 2LL);

      swift_errorRelease(v71);
      swift_errorRelease(v71);
    }

    uint64_t v144 = 0LL;
    uint64_t v69 = v142;
    uint64_t v68 = v143;
    uint64_t v19 = v127;
    uint64_t v14 = v126;
    goto LABEL_10;
  }

  v41(v146, 0LL);
  swift_release(v40);
  swift_bridgeObjectRelease(v39);
  uint64_t v69 = v142;
  uint64_t v68 = v143;
  uint64_t v19 = v127;
  uint64_t v14 = v126;
  uint64_t v70 = v141;
  uint64_t v2 = v128;
LABEL_11:
  sub_100323018(v145, v22, v23, v24);
  uint64_t v72 = *(void **)(v2 + *(void *)(*(void *)v2 + 752LL));
  if (v72)
  {
    sub_100058CD0(0LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
    uint64_t v73 = v145;
    id v74 = v72;
    char v75 = static NSObject.== infix(_:_:)(v73, v74);

    if ((v75 & 1) != 0) {
      sub_10031C650(v73);
    }
  }

  uint64_t v147 = (uint64_t)v145;
  swift_beginAccess(v2 + *(void *)(*(void *)v2 + 552LL), v146, 33LL, 0LL);
  uint64_t v76 = sub_100058CD0(255LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  unint64_t v77 = sub_100245750();
  uint64_t v78 = type metadata accessor for Dictionary(0LL, v76, v69, v77);
  Dictionary.removeValue(forKey:)(&v147, v78);
  swift_endAccess(v146);
  double v79 = sub_100306904();
  uint64_t v80 = *(unsigned int (**)(char *, uint64_t, uint64_t, double))(v68 + 48);
  if (v80(v70, 1LL, v69, v79) == 1)
  {
    uint64_t v81 = *(void (**)(char *, uint64_t))(v14 + 8);
    uint64_t v82 = v70;
    uint64_t v83 = v139;
    v81(v82, v139);
    uint64_t v147 = (uint64_t)v145;
    swift_beginAccess(v2 + *(void *)(*(void *)v2 + 536LL), v146, 33LL, 0LL);
    uint64_t v84 = v138;
    Dictionary.removeValue(forKey:)(&v147, v78);
    swift_endAccess(v146);
    double v85 = sub_100306904();
    if (v80(v84, 1LL, v69, v85) == 1)
    {
      v81(v84, v83);
    }

    else
    {
      uint64_t v91 = (uint64_t)v133;
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v133, v84, v69);
      uint64_t v92 = v131;
      sub_1000226B0(v91 + *(int *)(v69 + 40), v131, qword_100410330);
      uint64_t v93 = type metadata accessor for UUID(0LL);
      uint64_t v94 = *(void *)(v93 - 8);
      uint64_t v95 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v94 + 48))(v92, 1LL, v93);
      if ((_DWORD)v95 == 1)
      {
        sub_1000225EC(v92, qword_100410330);
      }

      else
      {
        uint64_t v109 = UUID.uuidString.getter(v95);
        uint64_t v111 = v110;
        (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v92, v93);
        uint64_t v112 = AssociatedConformanceWitness;
        uint64_t v113 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 136);
        uint64_t v114 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
        uint64_t v115 = v130;
        v113(v114, v112);
        uint64_t v116 = v114;
        uint64_t v117 = v137;
        uint64_t v118 = swift_getAssociatedConformanceWitness( v112,  v116,  v137,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.ActivityCoordinator: ActivityCoordinatorControls);
        id v119 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v118 + 8))(v117, v118);
        (*(void (**)(char *, uint64_t))(v136 + 8))(v115, v117);
        if (v119)
        {
          uint64_t v120 = sub_100002274((uint64_t *)&unk_10040CD70);
          uint64_t v121 = swift_allocObject(v120, 48LL, 7LL);
          *(_OWORD *)(v121 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
          *(void *)(v121 + 32) = v109;
          *(void *)(v121 + 40) = v111;
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v119, "removeNotificationsWithIdentifiers:", isa, swift_bridgeObjectRelease(v121).n128_f64[0]);

          swift_unknownObjectRelease(v119);
        }

        else
        {
          swift_bridgeObjectRelease(v111);
        }

        uint64_t v68 = v143;
        uint64_t v91 = (uint64_t)v133;
      }

      sub_1003239D4(v145, v91, 1);
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v91, v69);
    }

    sub_100314480(v145, 0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v19, v70, v69);
    uint64_t v86 = (uint64_t)v19;
    uint64_t v87 = v140;
    sub_1000226B0((uint64_t)&v19[*(int *)(v69 + 40)], v140, qword_100410330);
    uint64_t v88 = type metadata accessor for UUID(0LL);
    uint64_t v89 = *(void *)(v88 - 8);
    uint64_t v90 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v87, 1LL, v88);
    if ((_DWORD)v90 == 1)
    {
      sub_1000225EC(v87, qword_100410330);
    }

    else
    {
      uint64_t v142 = UUID.uuidString.getter(v90);
      uint64_t v97 = v96;
      (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v87, v88);
      uint64_t v98 = AssociatedConformanceWitness;
      id v99 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 136);
      uint64_t v100 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
      uint64_t v101 = v132;
      v99(v100, v98);
      uint64_t v102 = v100;
      uint64_t v103 = v137;
      uint64_t v104 = swift_getAssociatedConformanceWitness( v98,  v102,  v137,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.ActivityCoordinator: ActivityCoordinatorControls);
      uint64_t v105 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v104 + 8))(v103, v104);
      (*(void (**)(char *, uint64_t))(v136 + 8))(v101, v103);
      if (v105)
      {
        uint64_t v106 = sub_100002274((uint64_t *)&unk_10040CD70);
        uint64_t v107 = swift_allocObject(v106, 48LL, 7LL);
        *(_OWORD *)(v107 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
        *(void *)(v107 + 32) = v142;
        *(void *)(v107 + 40) = v97;
        Class v108 = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v105, "removeNotificationsWithIdentifiers:", v108, swift_bridgeObjectRelease(v107).n128_f64[0]);

        swift_unknownObjectRelease(v105);
      }

      else
      {
        swift_bridgeObjectRelease(v97);
      }

      uint64_t v68 = v143;
    }

    sub_1003239D4(v145, v86, 1);
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v86, v69);
  }

uint64_t sub_100302E9C( void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v40 = a5;
  uint64_t v41 = a8;
  id v48 = a1;
  uint64_t v49 = a2;
  uint64_t v39 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  uint64_t v50 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v13 + 8),  v14,  &protocol requirements base descriptor for Sequence,  &associated type descriptor for Sequence.Element);
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v17 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v19 = (char *)&v39 - v18;
  __chkstk_darwin(v17);
  int v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = swift_getAssociatedTypeWitness( 0LL,  a6,  a3,  &protocol requirements base descriptor for Collection,  &associated type descriptor for Collection.Index);
  uint64_t v42 = *(void *)(v22 - 8);
  uint64_t v43 = v22;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v39 - v23;
  uint64_t v25 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v25) {
    return static Array._allocateUninitialized(_:)(0LL, a4);
  }
  uint64_t v46 = AssociatedTypeWitness;
  uint64_t v26 = v8;
  uint64_t v27 = a4;
  Swift::Int v28 = v25;
  uint64_t v54 = ContiguousArray.init()(v27);
  uint64_t v44 = type metadata accessor for ContiguousArray(0LL, v27);
  ContiguousArray.reserveCapacity(_:)(v28);
  uint64_t v47 = v26;
  uint64_t result = dispatch thunk of Collection.startIndex.getter(a3, a6);
  if ((v28 & 0x8000000000000000LL) == 0)
  {
    Swift::Int v30 = v28;
    uint64_t v45 = v21;
    while (v30)
    {
      Swift::Int v51 = v30;
      uint64_t v31 = (void (*)(_BYTE *, void))dispatch thunk of Collection.subscript.read(v53, v24, a3, a6);
      uint64_t v32 = *(void (**)(char *))(v16 + 16);
      uint64_t v33 = v16;
      uint64_t v34 = v46;
      v32(v19);
      v31(v53, 0LL);
      uint64_t v35 = v24;
      uint64_t v36 = v19;
      uint64_t v37 = v45;
      uint64_t v38 = v52;
      v48(v36, v50);
      if (v38)
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v36, v34);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v43);
        swift_release(v54);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v41, v50, v40);
      }

      uint64_t v52 = 0LL;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v36, v34);
      ContiguousArray.append(_:)(v37, v44);
      uint64_t result = dispatch thunk of Collection.formIndex(after:)(v35, a3, a6);
      Swift::Int v30 = v51 - 1;
      uint64_t v16 = v33;
      uint64_t v19 = v36;
      uint64_t v24 = v35;
      if (v51 == 1)
      {
        (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v43);
        return v54;
      }
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

void sub_10030318C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AWDLPeer.AdvertisedService(0LL) - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v18 - v6;
  uint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v19 = a1 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  unint64_t v11 = v10 & v8;
  int64_t v20 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v12 = 0LL;
  if (!v11) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    sub_100057FE8( *(void *)(a1 + 48) + *(void *)(v3 + 72) * i,  (uint64_t)v7,  type metadata accessor for AWDLPeer.AdvertisedService);
    sub_100022628((uint64_t)v7, (uint64_t)v5, type metadata accessor for AWDLPeer.AdvertisedService);
    sub_10031BEBC((uint64_t)v5, &v21);
    sub_10005802C((uint64_t)v5, type metadata accessor for AWDLPeer.AdvertisedService);
    if (v1)
    {
      swift_release(a1);
      swift_bridgeObjectRelease(v22);
      return;
    }

    sub_10019D750(v21);
    if (v11) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v12++, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v12 >= v20) {
      goto LABEL_26;
    }
    unint64_t v16 = *(void *)(v19 + 8 * v12);
    if (!v16) {
      break;
    }
LABEL_17:
    unint64_t v11 = (v16 - 1) & v16;
  }

  int64_t v17 = v12 + 1;
  if (v12 + 1 >= v20) {
    goto LABEL_26;
  }
  unint64_t v16 = *(void *)(v19 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 2;
  if (v12 + 2 >= v20) {
    goto LABEL_26;
  }
  unint64_t v16 = *(void *)(v19 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 3;
  if (v12 + 3 >= v20) {
    goto LABEL_26;
  }
  unint64_t v16 = *(void *)(v19 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 4;
  if (v12 + 4 >= v20)
  {
LABEL_26:
    swift_release(a1);
    return;
  }

  unint64_t v16 = *(void *)(v19 + 8 * v17);
  if (v16)
  {
LABEL_16:
    int64_t v12 = v17;
    goto LABEL_17;
  }

  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v12 >= v20) {
      goto LABEL_26;
    }
    unint64_t v16 = *(void *)(v19 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_17;
    }
  }

void sub_1003033F4()
{
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 736);
  if ((*((_BYTE *)v0 + v3) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v2 + 408);
    uint64_t v4 = *(void *)(v2 + 416);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(v4 + 8),  v5,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v4,  v5,  AssociatedTypeWitness,  &protocol requirements base descriptor for AWDLController,  &associated conformance descriptor for AWDLController.P2PControls.Driver: AWDLWiFiDriver);
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 96);
    uint64_t v9 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
    v8(2LL, v9, AssociatedConformanceWitness);
    if (!v1) {
      *((_BYTE *)v0 + v3) = 1;
    }
  }

void sub_1003034C8()
{
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 736);
  if (*((_BYTE *)v0 + v3) == 1)
  {
    uint64_t v5 = *(void *)(v2 + 408);
    uint64_t v4 = *(void *)(v2 + 416);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(v4 + 8),  v5,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v4,  v5,  AssociatedTypeWitness,  &protocol requirements base descriptor for AWDLController,  &associated conformance descriptor for AWDLController.P2PControls.Driver: AWDLWiFiDriver);
    uint64_t v8 = *(void (**)(void, uint64_t, uint64_t))(AssociatedConformanceWitness + 96);
    uint64_t v9 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
    v8(0LL, v9, AssociatedConformanceWitness);
    if (!v1) {
      *((_BYTE *)v0 + v3) = 0;
    }
  }

void sub_10030359C(Swift::UInt a1)
{
  uint64_t v3 = v1;
  switch(a1)
  {
    case 0xFuLL:
      goto LABEL_8;
    case 0x10uLL:
      unint64_t v5 = sub_1000033FC();
      uint64_t v6 = swift_allocError(&type metadata for WiFiError, v5, 0LL, 0LL);
      *(_OWORD *)uint64_t v7 = xmmword_10033A940;
      *(_BYTE *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
      swift_willThrow(v6);
      return;
    case 0x11uLL:
      sub_100318790(17LL, 1u);
      if (v2) {
        return;
      }
      uint64_t v8 = *(void *)(v1 + *(void *)(*(void *)v1 + 704LL));
      swift_unownedRetainStrong(*(void *)(v3 + *(void *)(*(void *)v3 + 704LL)));
      sub_1002D4494(1);
      swift_release(v8);
LABEL_8:
      swift_beginAccess(v3 + *(void *)(*(void *)v3 + 520LL), v12, 33LL, 0LL);
      sub_10032CC94(&v13, a1);
      swift_endAccess(v12);
      return;
    case 0x13uLL:
      uint64_t v9 = *(void *)(*(void *)v1 + 704LL);
      uint64_t v10 = *(void *)(v1 + v9);
      swift_unownedRetainStrong(*(void *)(v3 + v9));
      unint64_t v11 = sub_1003323F8((uint64_t)&off_1003F1C18);
      sub_1002D3C68(1, (uint64_t)v11);
      swift_release(v10);
      swift_bridgeObjectRelease(v11);
      goto LABEL_8;
    default:
      sub_100318790(a1, 1u);
      if (!v2) {
        goto LABEL_8;
      }
      return;
  }

void sub_100303718(Swift::UInt a1)
{
  uint64_t v2 = v1;
  swift_beginAccess(v1 + *(void *)(*(void *)v1 + 520LL), v13, 33LL, 0LL);
  sub_100330C34(a1);
  swift_endAccess(v13);
  switch(a1)
  {
    case 0xFuLL:
      return;
    case 0x10uLL:
      unint64_t v4 = sub_1000033FC();
      uint64_t v5 = swift_allocError(&type metadata for WiFiError, v4, 0LL, 0LL);
      *(_OWORD *)uint64_t v6 = xmmword_10033A940;
      *(_BYTE *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
      swift_willThrow(v5);
      return;
    case 0x11uLL:
      uint64_t v7 = *(void *)(*(void *)v1 + 704LL);
      uint64_t v8 = *(void *)(v1 + v7);
      swift_unownedRetainStrong(*(void *)(v2 + v7));
      sub_1002D4494(0);
      swift_release(v8);
      uint64_t v9 = 17LL;
      goto LABEL_6;
    case 0x13uLL:
      uint64_t v10 = *(void *)(*(void *)v1 + 704LL);
      uint64_t v11 = *(void *)(v1 + v10);
      swift_unownedRetainStrong(*(void *)(v2 + v10));
      int64_t v12 = sub_1003323F8((uint64_t)&off_1003F1C40);
      sub_1002D3C68(0, (uint64_t)v12);
      swift_release(v11);
      swift_bridgeObjectRelease(v12);
      uint64_t v9 = 19LL;
      goto LABEL_6;
    default:
      uint64_t v9 = a1;
LABEL_6:
      sub_100318790(v9, 0);
      return;
  }

uint64_t sub_100303874(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3LL;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 88);
  uint64_t v2 = 128LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

BOOL sub_100303914(Swift::UInt a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0LL;
  }
  Hasher.init(_seed:)(v13, *(void *)(a2 + 40));
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1LL;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
    return 0LL;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }

  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  return result;
}

BOOL sub_100303A00(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)(v13, *(void *)(a2 + 40));
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  NANClusterChangeEvent.hash(into:)((int)v13, a1 & 0xFFFFFFFFFFFFLL);
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v7 = v5 & ~v6;
  uint64_t v8 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
    return 0;
  }
  if (static NANClusterChangeEvent.__derived_struct_equals(_:_:)( *(unsigned __int16 *)(*(void *)(a2 + 48) + 6 * v7) | ((unint64_t)*(unsigned int *)(*(void *)(a2 + 48) + 6 * v7 + 2) << 16),  v4))
  {
    return 1;
  }

  uint64_t v10 = ~v6;
  unint64_t v11 = (v7 + 1) & v10;
  if (((*(void *)(v8 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    BOOL v9 = static NANClusterChangeEvent.__derived_struct_equals(_:_:)( *(unsigned __int16 *)(*(void *)(a2 + 48) + 6 * v11) | ((unint64_t)*(unsigned int *)(*(void *)(a2 + 48) + 6 * v11 + 2) << 16),  v4);
    if (v9) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }

  while (((*(void *)(v8 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  return v9;
}

BOOL sub_100303B24(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  if (!*(void *)(a4 + 16)) {
    return 0;
  }
  Swift::UInt8 v8 = HIBYTE(a3);
  Hasher.init(_seed:)(v29, *(void *)(a4 + 40));
  Swift::String v9 = String.lowercased()();
  String.hash(into:)(v29, v9._countAndFlagsBits, v9._object);
  swift_bridgeObjectRelease(v9._object);
  uint64_t v10 = (a3 & 1) != 0 ? 7365749LL : 7365492LL;
  String.hash(into:)(v29, v10, 0xE300000000000000LL);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  Hasher._combine(_:)(v8);
  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1LL << *(_BYTE *)(a4 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v14 = a4 + 56;
  if (((*(void *)(a4 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
    return 0;
  }
  uint64_t v15 = *(void *)(a4 + 48) + 24 * v13;
  uint64_t v16 = *(void *)(v15 + 8);
  uint64_t v28 = *(void *)v15;
  __int16 v17 = *(unsigned __int8 *)(v15 + 16) | (*(unsigned __int8 *)(v15 + 17) << 8);
  __int16 v18 = a3 & 0xFF01;
  swift_bridgeObjectRetain(v16);
  BOOL v19 = static DNSRecords.Identifier.== infix(_:_:)(v28, v16, v17, a1, a2, a3 & 0xFF01);
  swift_bridgeObjectRelease(v16);
  if (v19) {
    return 1;
  }
  uint64_t v21 = ~v12;
  unint64_t v22 = (v13 + 1) & ~v12;
  if (((*(void *)(v14 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v22) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v23 = *(void *)(a4 + 48) + 24 * v22;
    uint64_t v24 = *(void *)v23;
    uint64_t v25 = *(void *)(v23 + 8);
    __int16 v26 = *(unsigned __int8 *)(v23 + 16) | (*(unsigned __int8 *)(v23 + 17) << 8);
    swift_bridgeObjectRetain(v25);
    BOOL v20 = static DNSRecords.Identifier.== infix(_:_:)(v24, v25, v26, a1, a2, v18);
    swift_bridgeObjectRelease(v25);
    if (v20) {
      break;
    }
    unint64_t v22 = (v22 + 1) & v21;
  }

  while (((*(void *)(v14 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v22) & 1) != 0);
  return v20;
}

BOOL sub_100303D14(unint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  unint64_t v4 = HIWORD(a1);
  unint64_t v5 = HIDWORD(a1);
  unint64_t v6 = a1 >> 24;
  unint64_t v7 = a1 >> 16;
  Hasher.init(_seed:)(v17, *(void *)(a2 + 40));
  Hasher._combine(_:)(a1);
  NANClusterChangeEvent.hash(into:)( (int)v17,  ((unint64_t)BYTE5(a1) << 32) & 0xFFFF00FF00000000LL | ((unint64_t)v4 << 40) | ((unint64_t)v5 << 24) | ((unint64_t)v6 << 16) | ((unint64_t)v7 << 8) | BYTE1(a1));
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = v8 & ~v9;
  uint64_t v11 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
    return 0;
  }
  uint64_t v12 = (unsigned __int16 *)(*(void *)(a2 + 48) - v10 + 8 * v10);
  if (static NANPeerServiceIdentifier.__derived_struct_equals(_:_:)( *v12 | ((unint64_t)*((unsigned __int8 *)v12 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v12 + 3) << 24),  ((unint64_t)BYTE5(a1) << 40) | ((unint64_t)BYTE6(a1) << 48) | ((unint64_t)BYTE4(a1) << 32) | ((unint64_t)BYTE3(a1) << 24) | ((unint64_t)BYTE2(a1) << 16) | ((unint64_t)BYTE1(a1) << 8) | a1))
  {
    return 1;
  }

  unint64_t v14 = (v10 + 1) & ~v9;
  if (((*(void *)(v11 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v15 = (unsigned __int16 *)(*(void *)(a2 + 48) - v14 + 8 * v14);
    BOOL v13 = static NANPeerServiceIdentifier.__derived_struct_equals(_:_:)( *v15 | ((unint64_t)*((unsigned __int8 *)v15 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v15 + 3) << 24),  ((unint64_t)BYTE5(a1) << 40) | ((unint64_t)BYTE6(a1) << 48) | ((unint64_t)BYTE4(a1) << 32) | ((unint64_t)BYTE3(a1) << 24) | ((unint64_t)BYTE2(a1) << 16) | ((unint64_t)BYTE1(a1) << 8) | a1);
    if (v13) {
      break;
    }
    unint64_t v14 = (v14 + 1) & ~v9;
  }

  while (((*(void *)(v11 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) != 0);
  return v13;
}

uint64_t sub_100303EB0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a2 + 40);
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    uint64_t v7 = v6;
    Hasher.init(_seed:)(v30, v4);
    String.hash(into:)(v30, v5, v7);
    Swift::Int v8 = Hasher._finalize()();
    swift_bridgeObjectRelease(v7);
    uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
    unint64_t v10 = v8 & ~v9;
    uint64_t v11 = a2 + 56;
    if (((*(void *)(a2 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
    {
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(a2 + 48) + 8 * v10));
      uint64_t v14 = v13;
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      if (v12 == v15 && v14 == v16)
      {
LABEL_17:
        swift_bridgeObjectRelease_n(v14, 2LL);
        goto LABEL_18;
      }

      uint64_t v18 = v16;
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v15, v16, 0LL);
      swift_bridgeObjectRelease(v14);
      swift_bridgeObjectRelease(v18);
      if ((v19 & 1) != 0)
      {
LABEL_18:
        char v28 = 1;
        return v28 & 1;
      }

      uint64_t v20 = ~v9;
      unint64_t v21 = (v10 + 1) & v20;
      if (((*(void *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) != 0)
      {
        while (1)
        {
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(a2 + 48) + 8 * v21));
          uint64_t v14 = v23;
          uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v22 == v24 && v14 == v25) {
            break;
          }
          uint64_t v27 = v25;
          char v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v14, v24, v25, 0LL);
          swift_bridgeObjectRelease(v14);
          swift_bridgeObjectRelease(v27);
          if ((v28 & 1) == 0)
          {
            unint64_t v21 = (v21 + 1) & v20;
            if (((*(void *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) != 0) {
              continue;
            }
          }

          return v28 & 1;
        }

        goto LABEL_17;
      }
    }
  }

  char v28 = 0;
  return v28 & 1;
}

uint64_t *sub_100304074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)v4 + 440LL);
  if (*(void *)(v4 + v5))
  {
    uint64_t v6 = *(uint64_t **)(v4 + v5);
  }

  else
  {
    uint64_t v7 = v4;
    type metadata accessor for AWDLDiscoveryEngine( 0LL,  *(void *)(*(void *)v4 + 408LL),  *(void *)(*(void *)v4 + 416LL),  a4);
    uint64_t v8 = swift_retain();
    uint64_t v6 = sub_1002B32D0(v8);
    swift_release(v7);
    uint64_t v9 = *(void *)(v7 + v5);
    *(void *)(v7 + v5) = v6;
    swift_retain();
    swift_release(v9);
  }

  swift_retain();
  return v6;
}

uint64_t sub_1003040F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin();
  uint64_t v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  UUID.init()(v9);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v11, a3, v7);
  uint64_t v12 = swift_allocObject(&unk_1003FBA48, 32LL, 7LL);
  *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  uint64_t v13 = (void *)(v3 + *(void *)(*(void *)v3 + 744LL));
  swift_beginAccess(v13, v19, 33LL, 0LL);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v13);
  uint64_t v18 = *v13;
  *uint64_t v13 = 0x8000000000000000LL;
  sub_1002441B0((uint64_t)sub_100056B6C, v12, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
  uint64_t v15 = *v13;
  *uint64_t v13 = v18;
  __n128 v16 = swift_bridgeObjectRelease(v15);
  (*(void (**)(_BYTE *, uint64_t, __n128))(v8 + 8))(v11, v7, v16);
  return swift_endAccess(v19);
}

uint64_t sub_100304230(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 744LL));
  swift_beginAccess(v3, v16, 33LL, 0LL);
  uint64_t v4 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v5 = sub_10001C578(a1);
  char v7 = v6;
  swift_bridgeObjectRelease(v4);
  if ((v7 & 1) == 0) {
    return swift_endAccess(v16);
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v9 = *v3;
  uint64_t v15 = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_10032A644((uint64_t *)&unk_100410570);
    uint64_t v9 = v15;
  }

  uint64_t v10 = *(void *)(v9 + 48);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * v5,  v11);
  uint64_t v12 = *(void *)(*(void *)(v15 + 56) + 16 * v5 + 8);
  sub_100328BBC(v5, v15);
  uint64_t v13 = *v3;
  *uint64_t v3 = v15;
  swift_bridgeObjectRelease(v13);
  swift_endAccess(v16);
  return swift_release(v12);
}

void sub_100304340(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 56;
  uint64_t v7 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain(a3);
  int64_t v11 = 0LL;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    id v19 = *(id *)(*(void *)(a3 + 48) + 8 * i);
    id v17 = v19;
    char v18 = a1(&v19);
    if (v3)
    {
      swift_release(a3);

      return;
    }

    if ((v18 & 1) != 0)
    {
LABEL_27:
      swift_release(a3);
      return;
    }

    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v11++, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v11 >= v10) {
      goto LABEL_27;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    if (!v15) {
      break;
    }
LABEL_17:
    unint64_t v9 = (v15 - 1) & v15;
  }

  int64_t v16 = v11 + 1;
  if (v11 + 1 >= v10) {
    goto LABEL_27;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 2;
  if (v11 + 2 >= v10) {
    goto LABEL_27;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 3;
  if (v11 + 3 >= v10) {
    goto LABEL_27;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 4;
  if (v11 + 4 >= v10) {
    goto LABEL_27;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
LABEL_16:
    int64_t v11 = v16;
    goto LABEL_17;
  }

  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v11 >= v10) {
      goto LABEL_27;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_17;
    }
  }

BOOL sub_1003044F0(BOOL result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  unsigned int v3 = (0x801004u >> (8 * result)) & 0xFFC;
  if (((0x801004u >> (8 * *(_BYTE *)(a2 + 32))) & 0xFFC) == v3) {
    return 1LL;
  }
  if (v2 == 1) {
    return 0LL;
  }
  for (uint64_t i = 33LL; ; ++i)
  {
    uint64_t v5 = i - 31;
    if (__OFADD__(i - 32, 1LL)) {
      break;
    }
    int v6 = (0x801004u >> (8 * *(_BYTE *)(a2 + i)));
    BOOL result = v6 == v3;
    if (v6 == v3 || v5 == v2) {
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10030457C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(a2 + 32));
  uint64_t v7 = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v5 == v8 && v7 == v9)
  {
LABEL_20:
    swift_bridgeObjectRelease_n(v7, 2LL);
    return 1LL;
  }

  uint64_t v11 = v9;
  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0LL);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v7);
  uint64_t result = swift_bridgeObjectRelease(v11);
  if ((v12 & 1) != 0)
  {
LABEL_7:
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  if (v2 == 1)
  {
LABEL_17:
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  uint64_t v14 = 5LL;
  while (1)
  {
    uint64_t v15 = v14 - 3;
    if (__OFADD__(v14 - 4, 1LL)) {
      break;
    }
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(a2 + 8 * v14));
    uint64_t v7 = v17;
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v16 == v18 && v7 == v19)
    {
      swift_bridgeObjectRelease(a2);
      goto LABEL_20;
    }

    uint64_t v21 = v19;
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v7, v18, v19, 0LL);
    swift_bridgeObjectRelease(v7);
    uint64_t result = swift_bridgeObjectRelease(v21);
    if ((v22 & 1) != 0) {
      goto LABEL_7;
    }
    ++v14;
    if (v15 == v2) {
      goto LABEL_17;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1003046D0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = (uint64_t (*)(_BYTE *))result;
  uint64_t v19 = *(void *)(a3 + 16);
  if (v19)
  {
    unint64_t v4 = 0LL;
    uint64_t v5 = (char *)(a3 + 37);
    uint64_t v6 = _swiftEmptyArrayStorage;
    uint64_t v18 = a3;
    while (v4 < *(void *)(a3 + 16))
    {
      char v11 = *(v5 - 5);
      char v12 = *(v5 - 4);
      char v13 = *(v5 - 3);
      char v14 = *(v5 - 2);
      char v15 = *(v5 - 1);
      char v16 = *v5;
      v22[0] = v11;
      v22[1] = v12;
      void v22[2] = v13;
      void v22[3] = v14;
      uint64_t v22[4] = v15;
      char v21 = v16;
      v22[5] = v16;
      uint64_t result = v20(v22);
      if (v3)
      {
        swift_release(v6);
        uint64_t v17 = v18;
        goto LABEL_15;
      }

      if ((result & 1) != 0)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native(v6);
        uint64_t v23 = v6;
        if ((result & 1) == 0)
        {
          uint64_t result = sub_100267FCC(0, v6[2] + 1LL, 1);
          uint64_t v6 = v23;
        }

        unint64_t v8 = v6[2];
        unint64_t v7 = v6[3];
        unint64_t v9 = v8 + 1;
        if (v8 >= v7 >> 1)
        {
          uint64_t result = sub_100267FCC(v7 > 1, v8 + 1, 1);
          unint64_t v9 = v8 + 1;
          uint64_t v3 = 0LL;
          uint64_t v6 = v23;
        }

        void v6[2] = v9;
        int64_t v10 = (char *)v6 + 6 * v8;
        v10[32] = v11;
        v10[33] = v12;
        v10[34] = v13;
        v10[35] = v14;
        v10[36] = v15;
        v10[37] = v21;
      }

      ++v4;
      v5 += 6;
      a3 = v18;
      if (v19 == v4) {
        goto LABEL_13;
      }
    }

    __break(1u);
  }

  else
  {
    uint64_t v6 = _swiftEmptyArrayStorage;
LABEL_13:
    uint64_t v17 = a3;
LABEL_15:
    swift_bridgeObjectRelease(v17);
    return (uint64_t)v6;
  }

  return result;
}

void sub_100304878(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1002C9E94(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

void sub_1003049D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1002CA0C8(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

void sub_100304B2C()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)*v0;
  sub_100002274(&qword_10040BDC8);
  __chkstk_darwin();
  int64_t v4 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_10040FEC0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)((char *)v0 + v2[88]);
  swift_unownedRetainStrong(v7);
  char v8 = sub_1002CF17C();
  swift_release(v7);
  if ((v8 & 1) != 0 && *((_BYTE *)v1 + *(void *)(*v1 + 488LL)) == 1)
  {
    WiFiInterface.linkState.setter(1);
    uint64_t v9 = v2[51];
    uint64_t v10 = *(void *)(v2[52] + 8LL);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v10,  v9,  &protocol requirements base descriptor for P2PControls);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v10,  v9,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
    uint64_t v49 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
    int v14 = v13(v49, AssociatedConformanceWitness);
    uint64_t v15 = WiFiInterface.linkState.getter();
    if (v14 == 2 || ((v15 ^ v14) & 1) != 0)
    {
      char v16 = (os_log_s *)Logger.logObject.getter(v15);
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Forcing new link state because of mismatch", v18, 2u);
        swift_slowDealloc(v18, -1LL, -1LL);
      }

      WiFiInterface.$linkState.getter((uint64_t)v6);
      MutableDriverProperty.restore()();
      sub_1000225EC((uint64_t)v6, (uint64_t *)&unk_10040FEC0);
    }

    uint64_t v19 = *(void *)(*v1 + 592LL);
    uint64_t v20 = *(void *)((char *)v1 + v19);
    if (v20)
    {
      char v21 = *(void (**)(uint64_t))(*(void *)v20 + 192LL);
      swift_retain();
      v21(1LL);
      swift_release(v20);
    }

    uint64_t v22 = sub_100002274((uint64_t *)&unk_100410470);
    uint64_t v23 = swift_allocObject(v22, 64LL, 7LL);
    *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
    uint64_t v24 = WiFiInterface.macAddress.getter();
    WiFiAddress.ipv6LinkLocalAddress.getter(v24 & 0xFFFFFFFFFFFFLL);
    *(void *)(v23 + 32) = v25;
    *(void *)(v23 + 40) = v26;
    *(void *)(v23 + 48) = v27;
    *(void *)(v23 + 56) = v28;
    WiFiInterface.ipv6Addresses.setter(v23);
    uint64_t v29 = *(void *)((char *)v1 + v19);
    uint64_t v30 = v49;
    if (v29)
    {
      swift_retain();
      uint64_t v31 = WiFiInterface.ipv6Addresses.getter();
      (*(void (**)(uint64_t))(*(void *)v29 + 336LL))(v31);
      swift_release(v29);
    }

    uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 96);
    uint64_t v33 = v32(v30, AssociatedConformanceWitness);
    uint64_t v34 = WiFiInterface.ipv6Addresses.getter();
    char v35 = sub_10007FD10(v33, v34);
    swift_bridgeObjectRelease(v33);
    __n128 v37 = swift_bridgeObjectRelease(v34);
    if ((v35 & 1) == 0)
    {
      uint64_t v38 = (os_log_s *)Logger.logObject.getter(v36);
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v40 = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Forcing new IPv6 addresses because of mismatch", v40, 2u);
        swift_slowDealloc(v40, -1LL, -1LL);
      }

      WiFiInterface.$ipv6Addresses.getter((uint64_t)v4);
      MutableDriverProperty.restore()();
      sub_1000225EC((uint64_t)v4, &qword_10040BDC8);
    }

    if (*(void *)((char *)v1 + v19))
    {
      uint64_t v41 = ((uint64_t (*)(uint64_t, uint64_t, __n128))v32)(v30, AssociatedConformanceWitness, v37);
      uint64_t v42 = WiFiInterface.ipv6Addresses.getter();
      if (v41)
      {
        uint64_t v43 = swift_bridgeObjectRetain(v41);
        char v44 = sub_10007FD10(v43, v42);
        swift_bridgeObjectRelease_n(v41, 2LL);
        swift_bridgeObjectRelease(v42);
        if ((v44 & 1) != 0) {
          return;
        }
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v42 = WiFiInterface.ipv6Addresses.getter();
    }

    swift_bridgeObjectRelease(v42);
LABEL_22:
    uint64_t v45 = *(void *)((char *)v1 + v19);
    if (v45)
    {
      uint64_t v46 = *(void (**)(uint64_t))(*(void *)v45 + 352LL);
      uint64_t v47 = swift_retain();
      v46(v47);
      swift_release(v45);
      MutableDriverProperty.restore()();
      sub_1000225EC((uint64_t)v4, &qword_10040BDC8);
    }
  }

uint64_t sub_100304FBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin();
  char v8 = &v19[-v7 - 8];
  uint64_t v9 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 424LL));
  swift_beginAccess(v9, v19, 32LL, 0LL);
  uint64_t v10 = *v9;
  if (*(void *)(v10 + 16)
    && (uint64_t v11 = sub_100327838( a1 & 0xFFFFFFFFFFFFLL,  (void (*)(void *, uint64_t))NANClusterChangeEvent.hash(into:),  (uint64_t (*)(uint64_t, Swift::Int))sub_10001CC98),  (v12 & 1) != 0))
  {
    uint64_t v13 = v11;
    uint64_t v14 = *(void *)(v10 + 56);
    uint64_t v15 = type metadata accessor for AWDLPeer(0LL);
    uint64_t v16 = *(void *)(v15 - 8);
    sub_100057FE8(v14 + *(void *)(v16 + 72) * v13, (uint64_t)v8, type metadata accessor for AWDLPeer);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v16 + 56))(v8, 0LL, 1LL, v15);
  }

  else
  {
    uint64_t v15 = type metadata accessor for AWDLPeer(0LL);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v8, 1LL, 1LL, v15);
  }

  sub_1000586C0((uint64_t)v8, (uint64_t)v6, (uint64_t *)&unk_10040E540);
  type metadata accessor for AWDLPeer(0LL);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v6, 1LL, v15) == 1)
  {
    AWDLPeer.init(macAddress:)(a1 & 0xFFFFFFFFFFFFLL, a2);
    sub_1000225EC((uint64_t)v6, (uint64_t *)&unk_10040E540);
  }

  else
  {
    sub_100022628((uint64_t)v6, a2, type metadata accessor for AWDLPeer);
  }

  return swift_endAccess(v19);
}

char *sub_100305178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003095D8(a1, a2, a3);
}

void sub_1003051C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v6 = sub_100304074(a1, a2, a3, a4);
  sub_1002A9260();
  swift_release(v6);
  uint64_t v7 = *(void *)(*(void *)v5 + 680LL);
  char v8 = *(_BYTE *)(v5 + v7);
  sub_100307BD4(0);
  *(_BYTE *)(v5 + v7) = 0;
  sub_100308378(v8);
}

uint64_t sub_100305220(char *a1, void *a2)
{
  uint64_t v3 = (uint64_t)v2;
  uint64_t v6 = *v2;
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (uint64_t *)((char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  char v12 = (void *)*v11;
  uint64_t *v10 = *v11;
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v10);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_30;
  }

  swift_beginAccess(v3 + *(void *)(*(void *)v3 + 448LL), &v78, 33LL, 0LL);
  uint64_t v15 = sub_100002274(&qword_100410590);
  IDPool.availableID()(v15, (uint64_t)&v76);
  swift_endAccess(&v78);
  if ((v77 & 1) != 0)
  {
    unint64_t v16 = sub_1000033FC();
    uint64_t v17 = swift_allocError(&type metadata for WiFiError, v16, 0LL, 0LL);
    uint64_t v19 = 4LL;
LABEL_8:
    *(void *)uint64_t v18 = v19;
    *(void *)(v18 + 8) = 0LL;
    *(_BYTE *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
    return swift_willThrow(v17);
  }

  uint64_t v20 = a2;
  char v21 = v76;
  id v22 =  [(id)objc_opt_self(NSXPCInterface) interfaceWithProtocol:&OBJC_PROTOCOL___WiFiP2PAWDLStateMonitorXPCDelegate];
  uint64_t v23 = *(void **)&a1[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection];
  [v23 setRemoteObjectInterface:v22];

  uint64_t v24 = swift_allocObject(&unk_1003FB908, 24LL, 7LL);
  swift_weakInit(v24 + 16, v3);
  uint64_t v25 = (void (*)())swift_allocObject(&unk_1003FBA70, 56LL, 7LL);
  uint64_t v73 = *(os_log_s **)(v6 + 408);
  id v74 = v21;
  *((void *)v25 + 2) = v73;
  uint64_t v26 = *(void *)(v6 + 416);
  *((void *)v25 + 3) = v26;
  *((void *)v25 + 4) = v24;
  *((void *)v25 + 5) = v20;
  *((void *)v25 + 6) = v21;
  uint64_t v27 = (void (**)())&a1[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
  char v75 = a1;
  uint64_t v29 = *(void *)&a1[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
  uint64_t v28 = (uint64_t)v27[1];
  *uint64_t v27 = sub_1003332EC;
  v27[1] = v25;
  id v30 = v20;
  sub_100021018(v29, v28);
  id v31 = [v23 remoteObjectProxy];
  _bridgeAnyObjectToAny(_:)(&v78, v31);
  swift_unknownObjectRelease(v31);
  uint64_t v32 = sub_100002274(&qword_100410598);
  if (!swift_dynamicCast(&v76, &v78, &type metadata for Any[8], v32, 6LL))
  {
    unint64_t v49 = sub_1000033FC();
    uint64_t v17 = swift_allocError(&type metadata for WiFiError, v49, 0LL, 0LL);
    uint64_t v19 = 2LL;
    goto LABEL_8;
  }

  uint64_t v34 = v75;
  uint64_t v33 = v76;
  uint64_t v78 = v75;
  v79[0] = v76;
  v79[1] = v30;
  id v80 = v74;
  swift_beginAccess(v3 + *(void *)(*(void *)v3 + 456LL), &v76, 33LL, 0LL);
  uint64_t v36 = type metadata accessor for AWDLInterface.StateMonitoringClient(255LL, (uint64_t)v73, v26, v35);
  uint64_t v37 = type metadata accessor for Dictionary(0LL, &type metadata for UInt64, v36, &protocol witness table for UInt64);
  id v38 = v30;
  id v39 = v34;
  swift_unknownObjectRetain(v33);
  Dictionary.subscript.setter(&v78, &v80, v37);
  swift_endAccess(&v76);
  uint64_t v40 = v39;
  uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
  os_log_type_t v42 = static os_log_type_t.default.getter(v41);
  BOOL v43 = os_log_type_enabled(v41, v42);
  id v74 = v38;
  if (v43)
  {
    uint64_t v73 = v41;
    char v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v45 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)char v44 = 138412290;
    uint64_t v71 = v44 + 4;
    uint64_t v72 = v44;
    uint64_t v78 = v40;
    uint64_t v46 = v40;
    uint64_t v41 = v73;
    id v38 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, v79);
    *uint64_t v45 = v75;

    uint64_t v47 = v72;
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "%@ is monitoring AWDL state information", v72, 0xCu);
    uint64_t v48 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v45, 1LL, v48);
    swift_slowDealloc(v45, -1LL, -1LL);
    swift_slowDealloc(v47, -1LL, -1LL);
  }

  else
  {
  }

  if ([v38 options])
  {
    uint64_t v50 = sub_1003058D8(0);
    if (v50)
    {
      Swift::Int v51 = (void *)v50;
      [v33 updatedAWDLState:v50];
    }
  }

  if (([v38 options] & 0x20) != 0)
  {
    uint64_t v52 = *(void *)(v3 + *(void *)(*(void *)v3 + 472LL));
    uint64_t v53 = j___s7CoreP2P15ChannelSequenceV8endIndexSivg(v52);
    uint64_t v54 = _swiftEmptyArrayStorage;
    if (!v53)
    {
LABEL_19:
      sub_100058CD0(0LL, (unint64_t *)&unk_100410450, &OBJC_CLASS___WiFiChannel_ptr);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v33, "channelSequenceChangedEvent:", isa, swift_bridgeObjectRelease(v54).n128_f64[0]);

      id v38 = v74;
      goto LABEL_20;
    }

    uint64_t v55 = v53;
    char v75 = v33;
    uint64_t v78 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v52);
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)(v55);
    if ((v55 & 0x8000000000000000LL) == 0)
    {
      unint64_t v56 = 0LL;
      do
      {
        unint64_t v57 = v56 + 1;
        unint64_t v58 = ChannelSequence.subscript.getter(v56, v52);
        id v59 = Optional<A>.apiChannel.getter(v58 & 0xFFFFFFFFFFFFLL);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v60 = v78[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v60);
        uint64_t v61 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v60, v59);
        specialized ContiguousArray._endMutation()(v61);
        unint64_t v56 = v57;
      }

      while (v55 != v57);
      uint64_t v54 = v78;
      swift_bridgeObjectRelease(v52);
      uint64_t v33 = v75;
      goto LABEL_19;
    }

uint64_t sub_1003058D8(char a1)
{
  uint64_t v2 = v1;
  uint64_t v5 = *(void *)(*(void *)v1 + 408LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 416LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(v4 + 8),  v5,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v4,  v5,  AssociatedTypeWitness,  &protocol requirements base descriptor for AWDLController,  &associated conformance descriptor for AWDLController.P2PControls.Driver: AWDLWiFiDriver);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
  uint64_t v9 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  uint64_t v43 = v8(v9, AssociatedConformanceWitness);
  uint64_t v44 = v10;
  uint64_t v11 = *(void *)(v2 + *(void *)(*(void *)v2 + 104LL) + 8);
  uint64_t v42 = v12;
  swift_bridgeObjectRetain(v11);
  uint64_t v13 = WiFiInterface.capabilities.getter();
  uint64_t v14 = *WiFiDriverCapabilities.supportsAWDLSoloMode.unsafeMutableAddressor();
  uint64_t v46 = v13;
  uint64_t v47 = (void *)v14;
  unint64_t v15 = sub_100270384();
  swift_bridgeObjectRetain_n(v14, 2LL);
  ExtendableOptionSet.formIntersection(_:)( (uint64_t (*)(_BYTE *, void))&v46,  &type metadata for WiFiDriverCapabilities.Kind,  v15);
  unint64_t v16 = v47;
  char v45 = sub_10007990C(v47, v14);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  __n128 v17 = swift_bridgeObjectRelease(v16);
  uint64_t v18 = _swiftEmptyArrayStorage;
  if ((a1 & 1) != 0)
  {
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(AssociatedConformanceWitness + 56))( v9,  AssociatedConformanceWitness,  v17);
    uint64_t v20 = j___s7CoreP2P15ChannelSequenceV8endIndexSivg(v19);
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v47 = _swiftEmptyArrayStorage;
      uint64_t result = specialized ContiguousArray.reserveCapacity(_:)(v20);
      if (v21 < 0)
      {
        __break(1u);
        return result;
      }

      unint64_t v23 = 0LL;
      do
      {
        unint64_t v24 = v23 + 1;
        unint64_t v25 = ChannelSequence.subscript.getter(v23, v19);
        id v26 = Optional<A>.apiChannel.getter(v25 & 0xFFFFFFFFFFFFLL);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v27 = v47[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v27);
        uint64_t v28 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v26);
        specialized ContiguousArray._endMutation()(v28);
        unint64_t v23 = v24;
      }

      while (v21 != v24);
      uint64_t v18 = v47;
      swift_bridgeObjectRelease(v19);
    }

    else
    {
      swift_bridgeObjectRelease(v19);
    }
  }

  if (*(_BYTE *)(v2 + *(void *)(*(void *)v2 + 680LL)) == 1)
  {
    char v29 = 1;
    unint64_t v30 = 0xE700000000000000LL;
  }

  else
  {
    unint64_t v30 = 0xE800000000000000LL;
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x64656C6261736964LL,  0xE800000000000000LL,  0x64656C62616E65LL,  0xE700000000000000LL,  0LL);
  }

  __n128 v31 = swift_bridgeObjectRelease(v30);
  uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(AssociatedConformanceWitness + 40))( v9,  AssociatedConformanceWitness,  v31);
  uint64_t v33 = WiFiInterface.macAddress.getter();
  id v34 = WiFiAddress.apiAddress.getter(v33 & 0xFFFFFFFFFFFFLL);
  id v35 = Optional<A>.apiChannel.getter(v43 & 0xFFFFFFFFFFFFLL);
  id v36 = Optional<A>.apiChannel.getter(v44 & 0xFFFFFFFFFFFFLL);
  id v37 = Optional<A>.apiChannel.getter(v42 & 0xFFFFFFFFFFFFLL);
  id v38 = objc_allocWithZone(&OBJC_CLASS___WiFiP2PAWDLState);
  NSString v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  sub_100058CD0(0LL, (unint64_t *)&unk_100410450, &OBJC_CLASS___WiFiChannel_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v41 = objc_msgSend( v38,  "initWithInterfaceName:supportsSoloMode:supportsDataTransfer:channelSequence:isEnabled:substate:macAddress:peer MasterChannel:peerPrimaryPreferredChannel:peerSecondaryPreferredChannel:",  v39,  v45 & 1,  1,  isa,  v29 & 1,  v32,  swift_bridgeObjectRelease(v18).n128_f64[0],  v34,  v35,  v36,  v37);

  return (uint64_t)v41;
}

BOOL sub_100305C50(uint64_t a1)
{
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 424LL));
  swift_beginAccess(v5, v16, 32LL, 0LL);
  uint64_t v6 = *v5;
  if (*(void *)(v6 + 16)
    && (uint64_t v7 = sub_100327838( a1 & 0xFFFFFFFFFFFFLL,  (void (*)(void *, uint64_t))NANClusterChangeEvent.hash(into:),  (uint64_t (*)(uint64_t, Swift::Int))sub_10001CC98),  (v8 & 1) != 0))
  {
    uint64_t v9 = v7;
    uint64_t v10 = *(void *)(v6 + 56);
    uint64_t v11 = type metadata accessor for AWDLPeer(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    sub_100057FE8(v10 + *(void *)(v12 + 72) * v9, (uint64_t)v4, type metadata accessor for AWDLPeer);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v12 + 56))(v4, 0LL, 1LL, v11);
  }

  else
  {
    uint64_t v11 = type metadata accessor for AWDLPeer(0LL);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v4, 1LL, 1LL, v11);
  }

  swift_endAccess(v16);
  type metadata accessor for AWDLPeer(0LL);
  BOOL v13 = (*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v4, 1LL, v11) != 1;
  sub_1000225EC((uint64_t)v4, (uint64_t *)&unk_10040E540);
  return v13;
}

uint64_t sub_100305DB0()
{
  void (*v17)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  unint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t result;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  int v40;
  char v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _OWORD v47[2];
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  void v52[502];
  _BYTE v53[4016];
  _BYTE v54[4016];
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v44 = *(void *)(v3 - 8);
  char v45 = v3;
  __chkstk_darwin();
  uint64_t v43 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchTime(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  char v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v42 = (char *)&v42 - v9;
  sub_100002274(&qword_100405D40);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = v2 + 408;
  uint64_t v12 = *(void *)(v2 + 408);
  uint64_t v13 = *(void *)(v14 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(v13 + 8),  v12,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v13,  v12,  AssociatedTypeWitness,  &protocol requirements base descriptor for AWDLController,  &associated conformance descriptor for AWDLController.P2PControls.Driver: AWDLWiFiDriver);
  __n128 v17 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 160);
  uint64_t v18 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  v17(v52, v18, AssociatedConformanceWitness);
  sub_1000586C0((uint64_t)v52, (uint64_t)v53, &qword_100406958);
  if (sub_100057FCC((uint64_t)v53) == 1)
  {
    uint64_t v19 = sub_10000D658((uint64_t)_swiftEmptyArrayStorage);
  }

  else
  {
    memcpy(v54, v53, sizeof(v54));
    uint64_t v19 = apple80211_awdl_low_latency_statistics.eventPayload()();
  }

  Swift::Int v51 = v19;
  uint64_t v20 = (uint64_t)v0 + *(void *)(*v0 + 512);
  swift_beginAccess((char *)v1 + *(void *)(*v1 + 512), &v48, 0LL, 0LL);
  sub_1000226B0(v20, (uint64_t)v11, &qword_100405D40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1LL, v5) == 1)
  {
    unint64_t v49 = 0u;
    uint64_t v50 = 0u;
LABEL_8:
    sub_1000225EC((uint64_t)&v49, &qword_100405280);
    sub_10001E720(0xD000000000000019LL, 0x80000001003662A0LL, v47);
    sub_1000225EC((uint64_t)v47, &qword_100405280);
    uint64_t v27 = v51;
    goto LABEL_9;
  }

  uint64_t v21 = v42;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v42, v11, v5);
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  id v22 = v43;
  DispatchTime.distance(to:)(v8);
  unint64_t v23 = *(void (**)(char *, uint64_t))(v6 + 8);
  v23(v8, v5);
  unint64_t v24 = DispatchTimeInterval.rawSeconds.getter();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v22, v45);
  *((void *)&v50 + sub_100058090(v4, v0 + 1) = &type metadata for Int;
  *(void *)&unint64_t v49 = v24;
  v23(v21, v5);
  if (!*((void *)&v50 + 1)) {
    goto LABEL_8;
  }
  sub_100022594(&v49, v47);
  unint64_t v25 = v51;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v51);
  uint64_t v46 = v25;
  sub_10001EDDC(v47, 0xD000000000000019LL, 0x80000001003662A0LL, isUniquelyReferenced_nonNull_native);
  uint64_t v27 = v46;
  swift_bridgeObjectRelease(0x8000000000000000LL);
LABEL_9:
  uint64_t v28 = *(void *)(*v1 + 496);
  char v29 = *(uint64_t *)((char *)v1 + v28);
  *((void *)&v50 + sub_100058090(v4, v0 + 1) = &type metadata for Int;
  *(void *)&unint64_t v49 = v29;
  sub_100022594(&v49, v47);
  unint64_t v30 = swift_isUniquelyReferenced_nonNull_native(v27);
  uint64_t v46 = v27;
  sub_10001EDDC(v47, 0xD000000000000028LL, 0x8000000100366220LL, v30);
  __n128 v31 = v46;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  if (*(void *)(v31 + 16))
  {
    uint64_t v32 = sub_10001C008(0xD000000000000029LL, 0x8000000100366250LL);
    if ((v33 & 1) != 0)
    {
      sub_100002AE4(*(void *)(v31 + 56) + 32 * v32, (uint64_t)&v49);
      uint64_t result = swift_dynamicCast(v47, &v49, &type metadata for Any[8], &type metadata for Int, 6LL);
      if ((result & 1) != 0)
      {
        id v35 = *(uint64_t *)((char *)v1 + v28);
        if (__OFSUB__(*(void *)&v47[0], v35))
        {
          __break(1u);
          return result;
        }

        *((void *)&v50 + sub_100058090(v4, v0 + 1) = &type metadata for Int;
        *(void *)&unint64_t v49 = *(void *)&v47[0] - v35;
        sub_100022594(&v49, v47);
        id v36 = swift_isUniquelyReferenced_nonNull_native(v31);
        uint64_t v46 = v31;
        sub_10001EDDC(v47, 0xD000000000000029LL, 0x8000000100366250LL, v36);
        __n128 v31 = v46;
        swift_bridgeObjectRelease(0x8000000000000000LL);
      }
    }
  }

  id v37 = *(uint64_t *)((char *)v1 + v28);
  *((void *)&v50 + sub_100058090(v4, v0 + 1) = &type metadata for Int;
  *(void *)&unint64_t v49 = v37;
  sub_100022594(&v49, v47);
  id v38 = swift_isUniquelyReferenced_nonNull_native(v31);
  uint64_t v46 = v31;
  sub_10001EDDC(v47, 0xD000000000000025LL, 0x8000000100366540LL, v38);
  NSString v39 = v46;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v40 = *((unsigned __int8 *)v1 + *(void *)(*v1 + 504));
  if (v40 != 2)
  {
    *((void *)&v50 + sub_100058090(v4, v0 + 1) = &type metadata for Bool;
    LOBYTE(v49) = v40 & 1;
    sub_100022594(&v49, v47);
    id v41 = swift_isUniquelyReferenced_nonNull_native(v39);
    uint64_t v46 = v39;
    sub_10001EDDC(v47, 0xD000000000000012LL, 0x80000001003664C0LL, v41);
    NSString v39 = v46;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  return v39;
}

uint64_t sub_100306324(uint64_t a1)
{
  id v2 = [objc_allocWithZone(AWDLTrafficRegistrationConfiguration) initWithUniqueIdentifier:AWDLTrafficRegistrationServiceAirPlay peerAddress:a1];
  id v3 = sub_100331960(v2, 1, 1);

  if (v3)
  {
    swift_errorRelease();
    return 16LL;
  }

  else
  {
    id v5 = [objc_allocWithZone(AWDLTrafficRegistrationConfiguration) initWithUniqueIdentifier:AWDLTrafficRegistrationServiceAirPlayConnectivity peerAddress:a1];
    sub_1003010B0(v5);

    return 0LL;
  }

double sub_10030646C(char a1)
{
  uint64_t v2 = v1;
  id v3 = *(void **)v1;
  int v4 = *(unsigned __int8 *)(v1 + *(void *)(*(void *)v1 + 464LL));
  if (v4 != (a1 & 1))
  {
    uint64_t v5 = *(void *)(v2 + v3[88]);
    swift_unownedRetainStrong(v5);
    uint64_t v6 = sub_1003323F8((uint64_t)&off_1003F2150);
    sub_1002D3C68(v4, (uint64_t)v6);
    swift_release(v5);
    swift_bridgeObjectRelease(v6);
    uint64_t v18 = sub_100331588();
    __chkstk_darwin();
    uint64_t v7 = v3[52];
    uint64_t v16 = v3[51];
    uint64_t v17 = v7;
    uint64_t v9 = type metadata accessor for AWDLInterface.StateMonitoringClient(255LL, v16, v7, v8);
    uint64_t v10 = type metadata accessor for Dictionary.Values( 0LL,  &type metadata for UInt64,  v9,  &protocol witness table for UInt64);
    swift_bridgeObjectRetain(v18);
    uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v10);
    uint64_t v18 = Sequence.filter(_:)(sub_100333158, &v15, v10, WitnessTable);
    uint64_t v12 = type metadata accessor for Array(0LL, v9);
    uint64_t v13 = swift_getWitnessTable(&protocol conformance descriptor for [A], v12);
    Sequence.forEach(_:)(sub_10033318C, v2, v12, v13);
    *(void *)&double result = swift_bridgeObjectRelease(v18).n128_u64[0];
  }

  return result;
}

void sub_1003065DC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 472);
  uint64_t v6 = *(uint64_t *)((char *)v1 + v5);
  uint64_t v7 = swift_bridgeObjectRetain(v6);
  LOBYTE(asub_100058090(v4, v0 + 1) = static ChannelSequence.__derived_struct_equals(_:_:)(v7, a1);
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) == 0)
  {
    uint64_t v8 = *(uint64_t *)((char *)v2 + v5);
    uint64_t v9 = j___s7CoreP2P15ChannelSequenceV8endIndexSivg(v8);
    uint64_t v10 = _swiftEmptyArrayStorage;
    if (v9)
    {
      uint64_t v11 = v9;
      __n128 v31 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v8);
      specialized ContiguousArray.reserveCapacity(_:)(v11);
      if (v11 < 0)
      {
        __break(1u);
        return;
      }

      unint64_t v12 = 0LL;
      do
      {
        unint64_t v13 = v12 + 1;
        unint64_t v14 = ChannelSequence.subscript.getter(v12, v8);
        id v15 = Optional<A>.apiChannel.getter(v14 & 0xFFFFFFFFFFFFLL);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v16 = v31[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
        uint64_t v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v15);
        specialized ContiguousArray._endMutation()(v17);
        unint64_t v12 = v13;
      }

      while (v11 != v13);
      uint64_t v10 = v31;
      swift_bridgeObjectRelease(v8);
    }

    __n128 v31 = (void *)sub_100331588();
    __chkstk_darwin();
    uint64_t v18 = *(void *)(v4 + 408);
    uint64_t v19 = *(void *)(v4 + 416);
    char v29 = (void *)v18;
    uint64_t v30 = v19;
    uint64_t v21 = type metadata accessor for AWDLInterface.StateMonitoringClient(255LL, v18, v19, v20);
    uint64_t v22 = type metadata accessor for Dictionary.Values( 0LL,  &type metadata for UInt64,  v21,  &protocol witness table for UInt64);
    swift_bridgeObjectRetain(v31);
    uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v22);
    __n128 v31 = (void *)Sequence.filter(_:)(sub_1003315E4, v28, v22, WitnessTable);
    __chkstk_darwin();
    v28[0] = v18;
    v28[1] = v19;
    char v29 = v10;
    uint64_t v24 = type metadata accessor for Array(0LL, v21);
    uint64_t v25 = swift_getWitnessTable(&protocol conformance descriptor for [A], v24);
    Sequence.forEach(_:)(sub_100331618, &v27, v24, v25);
    id v26 = v31;
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v26);
  }

void sub_100306804(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  sub_100058CD0(0LL, (unint64_t *)&unk_100410450, &OBJC_CLASS___WiFiChannel_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v1 channelSequenceChangedEvent:isa];
}

double sub_100306874(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 472LL);
  uint64_t v3 = *(void *)(v1 + v2);
  *(void *)(v1 + sub_1000E77F4(v3, v2) = a1;
  sub_1003065DC(v3);
  *(void *)&double result = swift_bridgeObjectRelease(v3).n128_u64[0];
  return result;
}

double sub_1003068A8(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 536LL));
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  swift_bridgeObjectRelease(v4);
  return sub_100306904();
}

double sub_100306904()
{
  uint64_t v1 = v0;
  uint64_t v3 = *(void *)(*(void *)v0 + 408LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 416LL);
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v49 = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v4,  v3,  &protocol requirements base descriptor for P2PControls);
  uint64_t v48 = v3;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v4,  v3,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v45 = AssociatedConformanceWitness;
  uint64_t v7 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v50 = v7;
  uint64_t v51 = v8;
  __chkstk_darwin();
  uint64_t v47 = (char *)&v44 - v9;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 136);
  uint64_t v46 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  v10(v46, AssociatedConformanceWitness);
  uint64_t v11 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 576LL));
  swift_beginAccess(v11, v55, 0LL, 0LL);
  uint64_t v12 = *v11;
  uint64_t v13 = sub_100058CD0(0LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  uint64_t v15 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation(0LL, v3, v2, v14);
  unint64_t v16 = sub_100245750();
  uint64_t v17 = NANBitmap.Channel.operatingClass.getter(v12);
  v54[0] = v17;
  uint64_t v18 = type metadata accessor for Dictionary.Keys(0LL, v13, v15, v16);
  type metadata accessor for AWDLTrafficRegistrationService(0LL);
  uint64_t v20 = v19;
  swift_bridgeObjectRetain(v17);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v18);
  uint64_t v44 = sub_100302E9C( (void (*)(char *, char *))sub_1003333DC,  0LL,  v18,  v20,  (uint64_t)&type metadata for Never,  WitnessTable,  (uint64_t)&protocol witness table for Never,  v22);
  swift_bridgeObjectRelease(v17);
  unint64_t v23 = (void *)(v1 + *(void *)(*(void *)v1 + 560LL));
  swift_beginAccess(v23, v54, 0LL, 0LL);
  uint64_t v24 = NANBitmap.Channel.operatingClass.getter(*v23);
  v53[0] = v24;
  swift_bridgeObjectRetain(v24);
  uint64_t v26 = sub_100302E9C( (void (*)(char *, char *))sub_10032481C,  0LL,  v18,  v20,  (uint64_t)&type metadata for Never,  WitnessTable,  (uint64_t)&protocol witness table for Never,  v25);
  swift_bridgeObjectRelease(v24);
  v53[0] = v44;
  sub_1003049D0(v26);
  uint64_t v27 = v53[0];
  uint64_t v28 = sub_1003316A4(v53[0]);
  swift_bridgeObjectRelease(v27);
  uint64_t v29 = v50;
  uint64_t v30 = swift_getAssociatedConformanceWitness( v45,  v46,  v50,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.ActivityCoordinator: ActivityCoordinatorControls);
  __n128 v31 = v47;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 24))(v28, v29, v30);
  __n128 v32 = swift_bridgeObjectRelease(v28);
  (*(void (**)(char *, uint64_t, __n128))(v51 + 8))(v31, v29, v32);
  uint64_t v33 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 584LL));
  swift_beginAccess(v33, v53, 0LL, 0LL);
  uint64_t v34 = *v33;
  uint64_t v36 = type metadata accessor for AWDLInterface.TrafficRegistrationServiceAvailabilityMonitor(0LL, v48, v49, v35);
  uint64_t v37 = sub_10000AF70( &qword_100404A20,  (uint64_t (*)(uint64_t))type metadata accessor for AWDLTrafficRegistrationService,  (uint64_t)&unk_1003384F0);
  uint64_t v38 = NANBitmap.Channel.operatingClass.getter(v34);
  uint64_t v52 = v38;
  uint64_t v39 = type metadata accessor for Dictionary.Keys(0LL, v20, v36, v37);
  swift_bridgeObjectRetain(v38);
  uint64_t v40 = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v39);
  uint64_t v52 = Array.init<A>(_:)(&v52, v20, v39, v40);
  uint64_t v41 = sub_100002274(&qword_100410468);
  uint64_t v42 = swift_getWitnessTable(&protocol conformance descriptor for [A], v41);
  Sequence.forEach(_:)(sub_100331744, v1, v41, v42);
  *(void *)&double result = swift_bridgeObjectRelease(v52).n128_u64[0];
  return result;
}

double sub_100306D0C(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 560LL));
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  swift_bridgeObjectRelease(v4);
  return sub_100306904();
}

double sub_100306D68(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 576LL));
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  swift_bridgeObjectRelease(v4);
  return sub_100306904();
}

void sub_100306DC4(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)((char *)v1 + *(void *)(*v1 + 584));
  swift_beginAccess(v4, v40, 32LL, 0LL);
  uint64_t v5 = *v4;
  v35[0] = a1;
  type metadata accessor for AWDLTrafficRegistrationService(0LL);
  uint64_t v7 = v6;
  uint64_t v9 = type metadata accessor for AWDLInterface.TrafficRegistrationServiceAvailabilityMonitor( 0LL,  *(void *)(v3 + 408),  *(void *)(v3 + 416),  v8);
  uint64_t v10 = sub_10000AF70( &qword_100404A20,  (uint64_t (*)(uint64_t))type metadata accessor for AWDLTrafficRegistrationService,  (uint64_t)&unk_1003384F0);
  id v11 = a1;
  Dictionary.subscript.getter(v35, v5, v7, v9);

  uint64_t v13 = v36;
  uint64_t v12 = v37[0];
  swift_endAccess(v40);
  if (v13 == 1)
  {
    uint64_t v14 = (void *)objc_opt_self(&OBJC_CLASS___WiFiMACAddress);
    id v15 = v11;
    id v16 = [v14 zeroAddress];
    uint64_t v17 = v10;
    id v18 = [objc_allocWithZone(AWDLTrafficRegistrationConfiguration) initWithUniqueIdentifier:v15 peerAddress:v16];

    id v19 = sub_100331960(v18, 0, 0);
    uint64_t v10 = v17;
    uint64_t v41 = (uint64_t)v19;
    uint64_t v42 = 0LL;
  }

  else
  {
    uint64_t v41 = v13;
    uint64_t v42 = v12;
    if (v12) {
      goto LABEL_11;
    }
  }

  uint64_t v34 = v7;
  id v20 = v11;
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc(22LL, -1LL);
    uint64_t v33 = v10;
    uint64_t v24 = swift_slowAlloc(64LL, -1LL);
    v40[0] = v24;
    *(_DWORD *)uint64_t v23 = 136315394;
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    unint64_t v27 = v26;
    uint64_t v36 = sub_10000235C(v25, v26, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37);

    swift_bridgeObjectRelease(v27);
    *(_WORD *)(v23 + 12) = 2080;
    swift_beginAccess(&v41, v35, 0LL, 0LL);
    if (v41) {
      uint64_t v28 = 7630702LL;
    }
    else {
      uint64_t v28 = 7827310LL;
    }
    uint64_t v36 = sub_10000235C(v28, 0xE300000000000000LL, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37);
    swift_bridgeObjectRelease(0xE300000000000000LL);
    _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "New client started monitoring availability for %s, %s available",  (uint8_t *)v23,  0x16u);
    swift_arrayDestroy(v24, 2LL, &type metadata for Any[8]);
    uint64_t v29 = v24;
    uint64_t v10 = v33;
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v7 = v34;
LABEL_11:
  swift_beginAccess(&v41, v40, 1LL, 0LL);
  uint64_t v30 = v42;
  if (__OFADD__(v42, 1LL))
  {
    __break(1u);
  }

  else
  {
    ++v42;
    v39[0] = v41;
    v39[1] = v30 + 1;
    id v38 = v11;
    swift_beginAccess(v4, &v36, 33LL, 0LL);
    id v31 = v11;
    swift_errorRetain();
    uint64_t v32 = type metadata accessor for Dictionary(0LL, v7, v9, v10);
    Dictionary.subscript.setter(v39, &v38, v32);
    swift_endAccess(&v36);
  }

void sub_100307164(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)((char *)v1 + *(void *)(*v1 + 584));
  swift_beginAccess(v4, v42, 0LL, 0LL);
  uint64_t v5 = *v4;
  if (*(void *)(*v4 + 16LL))
  {
    swift_bridgeObjectRetain(*v4);
    unint64_t v6 = sub_10032798C((uint64_t)a1);
    if ((v7 & 1) == 0)
    {
      swift_bridgeObjectRelease(v5);
      return;
    }

    unint64_t v8 = v6;
    uint64_t v9 = *(unsigned int *)(v5 + 36);
    swift_bridgeObjectRelease(v5);
    uint64_t v10 = *v4;
    type metadata accessor for AWDLTrafficRegistrationService(0LL);
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)(v3 + 408);
    uint64_t v14 = *(void *)(v3 + 416);
    uint64_t v15 = v9;
    uint64_t v17 = type metadata accessor for AWDLInterface.TrafficRegistrationServiceAvailabilityMonitor(0LL, v13, v14, v16);
    uint64_t v18 = sub_10000AF70( &qword_100404A20,  (uint64_t (*)(uint64_t))type metadata accessor for AWDLTrafficRegistrationService,  (uint64_t)&unk_1003384F0);
    swift_bridgeObjectRetain(v10);
    Dictionary.subscript.getter(&v40, v38, v8, v15, 0LL, v10, v12, v17, v18);
    swift_bridgeObjectRelease(v10);

    swift_errorRelease();
    if (v38[1] == 1)
    {
      uint64_t v37 = v12;
      id v19 = a1;
      id v20 = (os_log_s *)Logger.logObject.getter(v19);
      os_log_type_t v21 = static os_log_type_t.default.getter(v20);
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v36 = v15;
        os_log_type_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v35 = swift_slowAlloc(32LL, -1LL);
        v38[0] = v35;
        *(_DWORD *)os_log_type_t v22 = 136315138;
        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        unint64_t v25 = v24;
        id v40 = (id)sub_10000235C(v23, v24, v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);

        unint64_t v26 = v25;
        uint64_t v15 = v36;
        swift_bridgeObjectRelease(v26);
        _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "All clients stopped monitoring availability for %s",  v22,  0xCu);
        swift_arrayDestroy(v35, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v35, -1LL, -1LL);
        swift_slowDealloc(v22, -1LL, -1LL);
      }

      else
      {
      }

      swift_beginAccess(v4, v38, 33LL, 0LL);
      uint64_t v34 = type metadata accessor for Dictionary(0LL, v37, v17, v18);
      Dictionary.remove(at:)(&v39, &v40, v8, v15, 0LL, v34);
      swift_endAccess(v38);
      swift_errorRelease();
    }

    else
    {
      swift_beginAccess(v4, &v40, 33LL, 0LL);
      id v39 = a1;
      id v27 = a1;
      uint64_t v28 = type metadata accessor for Dictionary._Variant(0LL, v12, v17, v18);
      uint64_t v29 = (void (*)(uint64_t *, void))Dictionary._Variant.subscript.modify(v38, &v39, v28);
      if (*v30 != 1LL)
      {
        uint64_t v31 = v30[1];
        BOOL v32 = __OFSUB__(v31, 1LL);
        uint64_t v33 = v31 - 1;
        if (!v32)
        {
          v30[1] = v33;
          v29(v38, 0LL);

          swift_endAccess(&v40);
          return;
        }

        __break(1u);
      }

      __break(1u);
    }
  }

uint64_t sub_1003074D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = type metadata accessor for DispatchTime(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  unint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin();
  uint64_t v10 = &v17[-v9 - 8];
  uint64_t v11 = v1 + *(void *)(*(void *)v1 + 608LL);
  swift_beginAccess(v11, v17, 0LL, 0LL);
  sub_1000226B0(v11, (uint64_t)v4, &qword_100405D40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
  {
    sub_1000225EC((uint64_t)v4, &qword_100405D40);
    uint64_t v12 = enum case for DispatchTimeInterval.never(_:);
    uint64_t v13 = type metadata accessor for DispatchTimeInterval(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104LL))(a1, v12, v13);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v10, v4, v5);
    type metadata accessor for P2PTimer(0LL);
    variable initialization expression of AWDLPeer.lastUpdated();
    DispatchTime.distance(to:)(v8);
    uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
    v15(v8, v5);
    return ((uint64_t (*)(char *, uint64_t))v15)(v10, v5);
  }

uint64_t sub_10030767C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = type metadata accessor for DispatchTime(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  unint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin();
  uint64_t v10 = &v17[-v9 - 8];
  uint64_t v11 = v1 + *(void *)(*(void *)v1 + 616LL);
  swift_beginAccess(v11, v17, 0LL, 0LL);
  sub_1000226B0(v11, (uint64_t)v4, &qword_100405D40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
  {
    sub_1000225EC((uint64_t)v4, &qword_100405D40);
    uint64_t v12 = enum case for DispatchTimeInterval.never(_:);
    uint64_t v13 = type metadata accessor for DispatchTimeInterval(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104LL))(a1, v12, v13);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v10, v4, v5);
    type metadata accessor for P2PTimer(0LL);
    variable initialization expression of AWDLPeer.lastUpdated();
    DispatchTime.distance(to:)(v8);
    uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
    v15(v8, v5);
    return ((uint64_t (*)(char *, uint64_t))v15)(v10, v5);
  }

uint64_t sub_100307828(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin();
  uint64_t v10 = (char *)&v13 - v9;
  a1(v8);
  *(void *)uint64_t v7 = a2;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchTimeInterval.seconds(_:), v4);
  LOBYTE(a2) = static DispatchTimeInterval.< infix(_:_:)((uint64_t)v10, (uint64_t)v7);
  uint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v7, v4);
  v11(v10, v4);
  return a2 & 1;
}

uint64_t sub_100307910@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = type metadata accessor for DispatchTime(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin();
  uint64_t v10 = &v17[-v9 - 8];
  uint64_t v11 = v1 + *(void *)(*(void *)v1 + 664LL);
  swift_beginAccess(v11, v17, 0LL, 0LL);
  sub_1000226B0(v11, (uint64_t)v4, &qword_100405D40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
  {
    sub_1000225EC((uint64_t)v4, &qword_100405D40);
    uint64_t v12 = enum case for DispatchTimeInterval.never(_:);
    uint64_t v13 = type metadata accessor for DispatchTimeInterval(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104LL))(a1, v12, v13);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v10, v4, v5);
    type metadata accessor for P2PTimer(0LL);
    variable initialization expression of AWDLPeer.lastUpdated();
    DispatchTime.distance(to:)(v8);
    uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
    v15(v8, v5);
    return ((uint64_t (*)(char *, uint64_t))v15)(v10, v5);
  }

uint64_t sub_100307ABC()
{
  uint64_t v1 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v13 - v5;
  sub_100307910((uint64_t)&v13 - v5);
  *(void *)uint64_t v4 = 10LL;
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchTimeInterval.seconds(_:), v1);
  BOOL v7 = static DispatchTimeInterval.< infix(_:_:)((uint64_t)v6, (uint64_t)v4);
  uint64_t v8 = *(void (**)(char *, uint64_t))(v2 + 8);
  v8(v4, v1);
  v8(v6, v1);
  if (!v7) {
    return 0LL;
  }
  uint64_t v9 = *(void *)(v0 + *(void *)(*(void *)v0 + 704LL));
  swift_unownedRetainStrong(v9);
  sub_1002CF2F0();
  uint64_t v11 = v10;
  swift_release(v9);
  if (v11)
  {
    swift_bridgeObjectRelease(v11);
    return 0LL;
  }

  return 1LL;
}

void sub_100307BD4(char a1)
{
  uint64_t v3 = *v1;
  if (*((_BYTE *)v1 + *(void *)(*v1 + 680))) {
    uint64_t v4 = 0x64656C62616E65LL;
  }
  else {
    uint64_t v4 = 0x64656C6261736964LL;
  }
  if (*((_BYTE *)v1 + *(void *)(*v1 + 680))) {
    unint64_t v5 = 0xE700000000000000LL;
  }
  else {
    unint64_t v5 = 0xE800000000000000LL;
  }
  if ((a1 & 1) != 0) {
    uint64_t v6 = 0x64656C62616E65LL;
  }
  else {
    uint64_t v6 = 0x64656C6261736964LL;
  }
  if ((a1 & 1) != 0) {
    unint64_t v7 = 0xE700000000000000LL;
  }
  else {
    unint64_t v7 = 0xE800000000000000LL;
  }
  if (v4 == v6 && v5 == v7)
  {
    swift_bridgeObjectRelease_n(v5, 2LL);
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0LL);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v7);
    if ((a1 & 1) == 0 && (v9 & 1) == 0)
    {
      uint64_t v10 = (uint64_t *)((char *)v1 + *(void *)(*v1 + 536));
      swift_beginAccess(v10, v23, 0LL, 0LL);
      uint64_t v11 = *v10;
      uint64_t v12 = sub_100058CD0( 0LL,  (unint64_t *)&unk_10040CC00,  &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
      uint64_t v14 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation( 0LL,  *(void *)(v3 + 408),  *(void *)(v3 + 416),  v13);
      unint64_t v15 = sub_100245750();
      uint64_t v16 = swift_bridgeObjectRetain(v11);
      char v17 = Dictionary.isEmpty.getter(v16, v12, v14, v15);
      swift_bridgeObjectRelease(v11);
      if ((v17 & 1) != 0)
      {
        uint64_t v18 = (uint64_t *)((char *)v1 + *(void *)(*v1 + 560));
        swift_beginAccess(v18, &v22, 0LL, 0LL);
        uint64_t v19 = *v18;
        uint64_t v20 = swift_bridgeObjectRetain(v19);
        char v21 = Dictionary.isEmpty.getter(v20, v12, v14, v15);
        swift_bridgeObjectRelease(v19);
        if ((v21 & 1) != 0)
        {
          sub_100307D70();
          sub_100308174();
        }
      }
    }
  }

void sub_100307D70()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 408);
  uint64_t v4 = *(void *)(*(void *)(v2 + 416) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v4,  v3,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v4,  v3,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v7 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v8 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v7,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.PreferencesBacking: PreferencesStorage);
  uint64_t v10 = type metadata accessor for Preferences(0LL, v7, v8, v9);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v43 - v12;
  uint64_t v14 = WiFiInterface.linkState.getter();
  if ((v14 & 1) != 0)
  {
    char v17 = (uint64_t *)((char *)v1 + *(void *)(*v1 + 520));
    swift_beginAccess(v17, v46, 0LL, 0LL);
    BOOL v18 = sub_100303914(0xFuLL, *v17);
    if (v18)
    {
      uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
      os_log_type_t v20 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v19, v20))
      {
        char v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)char v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Skipping address rotation because in use", v21, 2u);
        swift_slowDealloc(v21, -1LL, -1LL);
      }
    }

    else
    {
      WiFiInterface.preferences.getter();
      uint64_t v25 = Preferences.awdlMACAddress.getter(v10, v22, v23, v24);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      if ((v25 & 0x1000000000000LL) != 0) {
        static WiFiAddress.random()();
      }
      WiFiAddress.linkLocalAddress()(v26);
      WiFiInterface.macAddress.setter(v27 & 0xFFFFFFFFFFFFLL);
      uint64_t v28 = sub_100002274((uint64_t *)&unk_100410470);
      uint64_t v29 = swift_allocObject(v28, 64LL, 7LL);
      *(_OWORD *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v30 = WiFiInterface.macAddress.getter();
      WiFiAddress.ipv6LinkLocalAddress.getter(v30 & 0xFFFFFFFFFFFFLL);
      *(void *)(v29 + 32) = v31;
      *(void *)(v29 + 40) = v32;
      *(void *)(v29 + 48) = v33;
      *(void *)(v29 + 56) = v34;
      WiFiInterface.ipv6Addresses.setter(v29);
      uint64_t v35 = swift_retain();
      uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
      os_log_type_t v37 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v36, v37))
      {
        id v38 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v39 = swift_slowAlloc(32LL, -1LL);
        uint64_t v45 = v39;
        *(_DWORD *)id v38 = 136315138;
        uint64_t v40 = WiFiInterface.description.getter();
        unint64_t v42 = v41;
        uint64_t v44 = sub_10000235C(v40, v41, &v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
        swift_release(v1);
        swift_bridgeObjectRelease(v42);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Updated %s", v38, 0xCu);
        swift_arrayDestroy(v39, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v39, -1LL, -1LL);
        swift_slowDealloc(v38, -1LL, -1LL);
      }

      else
      {
        swift_release(v1);
      }
    }
  }

  else
  {
    uint64_t v43 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v15, "Skipping address rotation because link is down", v16, 2u);
      swift_slowDealloc(v16, -1LL, -1LL);
    }
  }

void sub_100308174()
{
  uint64_t v1 = *(void *)(v0 + *(void *)(*(void *)v0 + 592LL));
  if (v1)
  {
    uint64_t v2 = *(void (**)(uint64_t))(*(void *)v1 + 192LL);
    swift_retain();
    v2(1LL);
    uint64_t v3 = WiFiInterface.macAddress.getter();
    (*(void (**)(uint64_t))(*(void *)v1 + 240LL))(v3 & 0xFFFFFFFFFFFFLL);
    uint64_t v4 = sub_100002274((uint64_t *)&unk_100410470);
    uint64_t v5 = swift_allocObject(v4, 64LL, 7LL);
    *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)v1 + 232LL))();
    WiFiAddress.ipv6LinkLocalAddress.getter(v6 & 0xFFFFFFFFFFFFLL);
    *(void *)(v5 + 32) = v7;
    *(void *)(v5 + 40) = v8;
    *(void *)(v5 + 48) = v9;
    *(void *)(v5 + 56) = v10;
    (*(void (**)(uint64_t))(*(void *)v1 + 336LL))(v5);
    uint64_t v11 = swift_retain();
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      uint64_t v20 = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      uint64_t v16 = WiFiInterface.description.getter();
      unint64_t v18 = v17;
      uint64_t v19 = sub_10000235C(v16, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
      swift_release(v1);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Updated %s", v14, 0xCu);
      swift_arrayDestroy(v15, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);

      swift_release(v1);
    }

    else
    {

      swift_release_n(v1, 2LL);
    }
  }

void sub_100308378(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchTime(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  if (*(_BYTE *)(v1 + *(void *)(*(void *)v1 + 680LL))) {
    uint64_t v8 = 0x64656C62616E65LL;
  }
  else {
    uint64_t v8 = 0x64656C6261736964LL;
  }
  if (*(_BYTE *)(v1 + *(void *)(*(void *)v1 + 680LL))) {
    unint64_t v9 = 0xE700000000000000LL;
  }
  else {
    unint64_t v9 = 0xE800000000000000LL;
  }
  if ((a1 & 1) != 0) {
    uint64_t v10 = 0x64656C62616E65LL;
  }
  else {
    uint64_t v10 = 0x64656C6261736964LL;
  }
  if ((a1 & 1) != 0) {
    unint64_t v11 = 0xE700000000000000LL;
  }
  else {
    unint64_t v11 = 0xE800000000000000LL;
  }
  if (v8 == v10 && v9 == v11)
  {
    swift_bridgeObjectRelease_n(v9, 2LL);
  }

  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v10, v11, 0LL);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v11);
    if ((v13 & 1) == 0)
    {
      sub_1003084DC(0LL);
      type metadata accessor for P2PTimer(0LL);
      variable initialization expression of AWDLPeer.lastUpdated();
      uint64_t v14 = v2 + *(void *)(*(void *)v2 + 600LL);
      __n128 v15 = swift_beginAccess(v14, v17, 33LL, 0LL);
      (*(void (**)(uint64_t, _BYTE *, uint64_t, __n128))(v5 + 40))(v14, v7, v4, v15);
      swift_endAccess(v17);
    }
  }

void sub_1003084DC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v132 = a1;
  uint64_t v3 = (void *)*v1;
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v128 = *(void *)(v4 - 8);
  uint64_t v129 = v4;
  __chkstk_darwin();
  id v127 = (uint64_t *)((char *)&v125 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = v3[51];
  uint64_t v7 = v3[52];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v7,  v6,  &protocol requirements base descriptor for AWDLController);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v7,  v6,  AssociatedTypeWitness,  &protocol requirements base descriptor for AWDLController,  &associated conformance descriptor for AWDLController.AWDLController.InfraController: InfrastructureController);
  uint64_t v10 = swift_getAssociatedTypeWitness( 0LL,  *(void *)(AssociatedConformanceWitness + 8),  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  char v13 = (char *)&v125 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v131 = (char *)&v125 - v14;
  uint64_t v130 = v3[85];
  int v15 = *((unsigned __int8 *)v2 + v130);
  uint64_t v133 = 0LL;
  if (v15 == 1)
  {
    uint64_t v128 = v10;
    uint64_t v129 = v11;
    uint64_t v16 = AssociatedConformanceWitness;
    unint64_t v17 = (void *)((char *)v2 + v3[66]);
    swift_beginAccess(v17, &v135, 1LL, 0LL);
    uint64_t v18 = *v17;
    *unint64_t v17 = (uint64_t)&_swiftEmptySetSingleton;
    swift_bridgeObjectRelease(v18);
    uint64_t v19 = (void *)((char *)v2 + *(void *)(*v2 + 96LL));
    uint64_t v126 = *(void *)(v7 + 8);
    uint64_t v20 = swift_getAssociatedTypeWitness(255LL, v126, v6, &protocol requirements base descriptor for P2PControls);
    uint64_t v21 = swift_getAssociatedConformanceWitness( v7,  v6,  v20,  &protocol requirements base descriptor for AWDLController,  &associated conformance descriptor for AWDLController.P2PControls.Driver: AWDLWiFiDriver);
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 56);
    uint64_t v23 = swift_checkMetadataState(0LL, v20);
    id v127 = v19;
    uint64_t v24 = v22(v23, v21);
    uint64_t v25 = *(void *)(*v2 + 472LL);
    uint64_t v26 = *(void *)((char *)v2 + v25);
    *(void *)((char *)v2 + v25) = v24;
    sub_1003065DC(v26);
    swift_bridgeObjectRelease(v26);
    if (((unint64_t)"fficRegistration" & 0x1000000000000000LL) != 0)
    {
      sub_100002274((uint64_t *)&unk_10040FEB0);
      uint64_t v28 = v133;
      _StringGuts._slowWithCString<A>(_:)(&v139, sub_100265CE4, 0LL);
      uint64_t v88 = v139;
      uint64_t v27 = v128;
      uint64_t v29 = v131;
    }

    else
    {
      uint64_t v27 = v128;
      uint64_t v28 = v133;
      uint64_t v29 = v131;
      if (((unint64_t)"fficRegistration" & 0x2000000000000000LL) != 0)
      {
        uint64_t v139 = 0xD000000000000023LL;
        v140[0] = (unint64_t)"fficRegistration" & 0xFFFFFFFFFFFFFFLL;
        uint64_t v88 = os_transaction_create(&v139);
      }

      else
      {
        sub_100265CE4(&v139);
        uint64_t v88 = v139;
      }
    }

    uint64_t v89 = *(void *)(*v2 + 688LL);
    uint64_t v90 = *(void *)((char *)v2 + v89);
    *(void *)((char *)v2 + v89) = v88;
    swift_unknownObjectRelease(v90);
    uint64_t v91 = *(void **)((char *)v2 + *(void *)(*v2 + 696LL));
    [v91 registerClient:38 queue:*OS_dispatch_queue.awdl.unsafeMutableAddressor()];
    [v91 setAWDLEnabled:1];
    uint64_t v92 = *(void *)((char *)v2 + *(void *)(*v2 + 704LL));
    swift_unownedRetainStrong(v92);
    uint64_t v93 = v129;
    (*(void (**)(char *, uint64_t, uint64_t))(v129 + 16))(v29, v92 + *(void *)(*(void *)v92 + 96LL), v27);
    swift_release(v92);
    uint64_t v94 = swift_getAssociatedConformanceWitness( v126,  v6,  v23,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
    uint64_t v95 = (*(uint64_t (**)(uint64_t, uint64_t))(v94 + 32))(v23, v94);
    uint64_t v96 = swift_getAssociatedConformanceWitness( v16,  AssociatedTypeWitness,  v27,  &protocol requirements base descriptor for InfrastructureController,  &associated conformance descriptor for InfrastructureController.P2PControls.Driver: InfrastructureWiFiDriver);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v96 + 136))(v95, 1LL, v27, v96);
    if (v28)
    {
      (*(void (**)(char *, uint64_t))(v93 + 8))(v29, v27);
      swift_errorRetain(v28);
      uint64_t v97 = swift_errorRetain(v28);
      uint64_t v98 = (os_log_s *)Logger.logObject.getter(v97);
      os_log_type_t v99 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v98, v99))
      {
        uint64_t v100 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v101 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v100 = 138412290;
        swift_errorRetain(v28);
        uint64_t v102 = _swift_stdlib_bridgeErrorToNSError(v28);
        uint64_t v139 = v102;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, v140);
        uint64_t *v101 = v102;
        swift_errorRelease(v28);
        swift_errorRelease(v28);
        _os_log_impl( (void *)&_mh_execute_header,  v98,  v99,  "Failed to notify AWDL enabled to infrastructure: %@",  v100,  0xCu);
        uint64_t v103 = sub_100002274(&qword_100404DE0);
        swift_arrayDestroy(v101, 1LL, v103);
        swift_slowDealloc(v101, -1LL, -1LL);
        swift_slowDealloc(v100, -1LL, -1LL);
        swift_errorRelease(v28);
      }

      else
      {
        swift_errorRelease(v28);

        swift_errorRelease(v28);
        swift_errorRelease(v28);
      }
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v93 + 8))(v29, v27);
    }

    goto LABEL_37;
  }

  uint64_t v30 = v3[90];
  uint64_t v131 = (char *)AssociatedConformanceWitness;
  uint64_t v31 = (void *)((char *)v2 + v30);
  swift_beginAccess((char *)v2 + v30, &v139, 1LL, 0LL);
  uint64_t v32 = *v31;
  *uint64_t v31 = (uint64_t)&_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v32);
  sub_100318AC8();
  uint64_t v33 = *(void *)(*v2 + 688LL);
  uint64_t v34 = *(void *)((char *)v2 + v33);
  *(void *)((char *)v2 + v33) = 0LL;
  swift_unknownObjectRelease(v34);
  uint64_t v35 = *(void **)((char *)v2 + *(void *)(*v2 + 696LL));
  [v35 setAWDLEnabled:0];
  [v35 unregisterClient];
  uint64_t v36 = *(void *)((char *)v2 + *(void *)(*v2 + 704LL));
  swift_unownedRetainStrong(v36);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v36 + *(void *)(*(void *)v36 + 96LL), v10);
  swift_release(v36);
  uint64_t v37 = *(void *)(v7 + 8);
  uint64_t v38 = swift_getAssociatedTypeWitness(255LL, v37, v6, &protocol requirements base descriptor for P2PControls);
  uint64_t v125 = v37;
  uint64_t v126 = v6;
  uint64_t v39 = swift_getAssociatedConformanceWitness( v37,  v6,  v38,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
  uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t))(v39 + 32);
  uint64_t v41 = swift_checkMetadataState(0LL, v38);
  uint64_t v42 = v40(v41, v39);
  uint64_t v43 = swift_getAssociatedConformanceWitness( v131,  AssociatedTypeWitness,  v10,  &protocol requirements base descriptor for InfrastructureController,  &associated conformance descriptor for InfrastructureController.P2PControls.Driver: InfrastructureWiFiDriver);
  uint64_t v44 = v133;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 136))(v42, 0LL, v10, v43);
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    swift_errorRetain(v44);
    uint64_t v45 = swift_errorRetain(v44);
    uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v49 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v48 = 138412290;
      swift_errorRetain(v44);
      uint64_t v50 = _swift_stdlib_bridgeErrorToNSError(v44);
      uint64_t v135 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136);
      *uint64_t v49 = v50;
      swift_errorRelease(v44);
      swift_errorRelease(v44);
      _os_log_impl( (void *)&_mh_execute_header,  v46,  v47,  "Failed to notify AWDL disabled to infrastructure: %@",  v48,  0xCu);
      uint64_t v51 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v49, 1LL, v51);
      swift_slowDealloc(v49, -1LL, -1LL);
      swift_slowDealloc(v48, -1LL, -1LL);
      swift_errorRelease(v44);
    }

    else
    {
      swift_errorRelease(v44);

      swift_errorRelease(v44);
      swift_errorRelease(v44);
    }
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  uint64_t v53 = v125;
  uint64_t v52 = v126;
  uint64_t v54 = *ChannelSequence.none.unsafeMutableAddressor();
  uint64_t v55 = *(void *)(*v2 + 472LL);
  uint64_t v56 = *(void *)((char *)v2 + v55);
  *(void *)((char *)v2 + v55) = v54;
  swift_bridgeObjectRetain(v54);
  sub_1003065DC(v56);
  swift_bridgeObjectRelease(v56);
  swift_beginAccess((char *)v2 + *(void *)(*v2 + 152LL), &v135, 33LL, 0LL);
  type metadata accessor for WiFiInterface.NeighborDiscoveryTable(0LL, v52, v53, v57);
  WiFiInterface.NeighborDiscoveryTable.clearAllPeerPresence()();
  if (v58)
  {
    swift_endAccess(&v135);
    goto LABEL_13;
  }

  swift_endAccess(&v135);
  uint64_t v85 = *(void *)((char *)v2 + *(void *)(*v2 + 592LL));
  if (!v85)
  {
LABEL_37:
    uint64_t v110 = swift_retain_n(v2, 3LL);
    uint64_t v111 = (os_log_s *)Logger.logObject.getter(v110);
    os_log_type_t v112 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v111, v112))
    {
      uint64_t v113 = swift_slowAlloc(32LL, -1LL);
      uint64_t v114 = swift_slowAlloc(96LL, -1LL);
      uint64_t v137 = v114;
      *(_DWORD *)uint64_t v113 = 136315650;
      uint64_t v115 = WiFiInterface.description.getter();
      unint64_t v117 = v116;
      uint64_t v134 = sub_10000235C(v115, v116, &v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135);
      swift_release(v2);
      swift_bridgeObjectRelease(v117);
      *(_WORD *)(v113 + 12) = 2080;
      int v118 = *((unsigned __int8 *)v2 + v130);
      swift_release(v2);
      if (v118) {
        uint64_t v119 = 0x64656C62616E65LL;
      }
      else {
        uint64_t v119 = 0x64656C6261736964LL;
      }
      if (v118) {
        unint64_t v120 = 0xE700000000000000LL;
      }
      else {
        unint64_t v120 = 0xE800000000000000LL;
      }
      uint64_t v134 = sub_10000235C(v119, v120, &v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135);
      swift_release(v2);
      swift_bridgeObjectRelease(v120);
      *(_WORD *)(v113 + 22) = 2080;
      uint64_t v134 = v132;
      unint64_t v121 = sub_1000C0114();
      uint64_t v122 = FixedWidthInteger.retryText.getter((uint64_t)&type metadata for Int, v121);
      unint64_t v124 = v123;
      uint64_t v134 = sub_10000235C(v122, v123, &v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135);
      swift_bridgeObjectRelease(v124);
      _os_log_impl((void *)&_mh_execute_header, v111, v112, "%s %s AWDL after %s", (uint8_t *)v113, 0x20u);
      swift_arrayDestroy(v114, 3LL, &type metadata for Any[8]);
      swift_slowDealloc(v114, -1LL, -1LL);
      swift_slowDealloc(v113, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v2, 3LL);
    }

    return;
  }

  uint64_t v86 = *(uint64_t (**)(uint64_t *))(*(void *)v85 + 392LL);
  swift_retain();
  uint64_t v87 = (void (*)(uint64_t *, uint64_t))v86(&v135);
  WiFiInterface.NeighborDiscoveryTable.clearAllPeerPresence()();
  if (!v58)
  {
    v87(&v135, 0LL);
    swift_release(v85);
    goto LABEL_37;
  }

  v87(&v135, 1LL);
  swift_release(v85);
LABEL_13:
  uint64_t v59 = v132;
  if (v132 > 2)
  {
    uint64_t v72 = swift_retain_n(v2, 2LL);
    uint64_t v73 = (os_log_s *)Logger.logObject.getter(v72);
    os_log_type_t v74 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v75 = v59;
      uint64_t v76 = swift_slowAlloc(22LL, -1LL);
      uint64_t v77 = swift_slowAlloc(64LL, -1LL);
      uint64_t v135 = v77;
      *(_DWORD *)uint64_t v76 = 136315394;
      uint64_t v78 = NANState.actionDescription.getter(*((_BYTE *)v2 + v130));
      unint64_t v80 = v79;
      uint64_t v137 = sub_10000235C(v78, v79, &v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138);
      swift_release_n(v2, 2LL);
      swift_bridgeObjectRelease(v80);
      *(_WORD *)(v76 + 12) = 2080;
      uint64_t v137 = v75;
      unint64_t v81 = sub_1000C0114();
      uint64_t v82 = FixedWidthInteger.retryText.getter((uint64_t)&type metadata for Int, v81);
      unint64_t v84 = v83;
      uint64_t v137 = sub_10000235C(v82, v83, &v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138);
      swift_bridgeObjectRelease(v84);
      _os_log_impl( (void *)&_mh_execute_header,  v73,  v74,  "Giving up attempt to %s AWDL after %s",  (uint8_t *)v76,  0x16u);
      swift_arrayDestroy(v77, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v77, -1LL, -1LL);
      swift_slowDealloc(v76, -1LL, -1LL);
      swift_errorRelease(v58);
    }

    else
    {
      swift_errorRelease(v58);
      swift_release_n(v2, 2LL);
    }
  }

  else
  {
    uint64_t v60 = v132 + 1;
    swift_retain();
    swift_errorRetain(v58);
    swift_retain();
    uint64_t v61 = swift_errorRetain(v58);
    unint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
    os_log_type_t v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = swift_slowAlloc(32LL, -1LL);
      uint64_t v65 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v133 = swift_slowAlloc(32LL, -1LL);
      uint64_t v135 = v133;
      *(_DWORD *)uint64_t v64 = 136315650;
      int v66 = *((unsigned __int8 *)v2 + v130);
      swift_release(v2);
      if (v66) {
        uint64_t v67 = 0x64656C62616E65LL;
      }
      else {
        uint64_t v67 = 0x64656C6261736964LL;
      }
      if (v66) {
        unint64_t v68 = 0xE700000000000000LL;
      }
      else {
        unint64_t v68 = 0xE800000000000000LL;
      }
      uint64_t v137 = sub_10000235C(v67, v68, &v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138);
      swift_release(v2);
      swift_bridgeObjectRelease(v68);
      *(_WORD *)(v64 + 12) = 2112;
      swift_errorRetain(v58);
      uint64_t v69 = _swift_stdlib_bridgeErrorToNSError(v58);
      uint64_t v137 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138);
      *uint64_t v65 = v69;
      uint64_t v60 = v59 + 1;
      swift_errorRelease(v58);
      swift_errorRelease(v58);
      *(_WORD *)(v64 + 22) = 2048;
      uint64_t v137 = v59 + 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138);
      _os_log_impl( (void *)&_mh_execute_header,  v62,  v63,  "AWDL failed to be %s because: %@. Attempting retry #%ld",  (uint8_t *)v64,  0x20u);
      uint64_t v70 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v65, 1LL, v70);
      swift_slowDealloc(v65, -1LL, -1LL);
      uint64_t v71 = v133;
      swift_arrayDestroy(v133, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v71, -1LL, -1LL);
      swift_slowDealloc(v64, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v2, 2LL);
      swift_errorRelease(v58);
      swift_errorRelease(v58);
    }

    type metadata accessor for P2PTimer(0LL);
    uint64_t v105 = (uint64_t)v127;
    uint64_t v104 = v128;
    *id v127 = v60;
    uint64_t v106 = v129;
    (*(void (**)(uint64_t, void, uint64_t))(v104 + 104))( v105,  enum case for DispatchTimeInterval.seconds(_:),  v129);
    uint64_t v107 = (void *)*OS_dispatch_queue.awdl.unsafeMutableAddressor();
    uint64_t v108 = swift_allocObject(&unk_1003FB890, 32LL, 7LL);
    *(void *)(v108 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
    *(void *)(v108 + 24) = v60;
    swift_retain();
    id v109 = v107;
    static P2PTimer.async(after:on:execute:)(v105, v109, (uint64_t)sub_100328328, v108);

    swift_release(v108);
    swift_errorRelease(v58);
    (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v105, v106);
  }

void sub_100309484(char a1)
{
  char v2 = a1 & 1;
  uint64_t v3 = *(void *)(*(void *)v1 + 680LL);
  char v4 = *(_BYTE *)(v1 + v3);
  sub_100307BD4(a1 & 1);
  *(_BYTE *)(v1 + v3) = v2;
  sub_100308378(v4);
}

uint64_t sub_1003094C4()
{
  uint64_t v1 = (uint64_t)v0;
  char v2 = *v0;
  sub_100002274((uint64_t *)&unk_10040FED0);
  __chkstk_darwin();
  char v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = v2[89];
  if (*(void *)(v1 + v5))
  {
    uint64_t v6 = *(void *)(v1 + v5);
  }

  else
  {
    type metadata accessor for LocaleManager(0LL, v2[51], (uint64_t)v2, *(void *)(v2[52] + 8));
    uint64_t v7 = *(void *)(v1 + v2[88]);
    swift_unownedRetainStrong(v7);
    sub_1002CFDC8((uint64_t)v4);
    swift_retain();
    swift_release(v7);
    id v8 = (id)*OS_dispatch_queue.awdl.unsafeMutableAddressor();
    sub_1002FD138(v1);
    uint64_t v6 = v9;
    swift_release(v1);

    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v6;
    swift_retain();
    swift_release(v10);
  }

  swift_retain();
  return v6;
}

char *sub_1003095D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v141 = a3;
  uint64_t v138 = a2;
  uint64_t v136 = a1;
  uint64_t v5 = *(void **)v3;
  uint64_t v122 = sub_100002274((uint64_t *)&unk_100410500);
  __chkstk_darwin();
  uint64_t v123 = (uint64_t)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = v5[51];
  uint64_t v8 = v5[52];
  uint64_t v9 = *(void *)(v8 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v9,  v7,  &protocol requirements base descriptor for P2PControls);
  uint64_t v132 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  id v127 = (char *)&v122 - v11;
  uint64_t v128 = v9;
  uint64_t v142 = swift_getAssociatedTypeWitness(0LL, v9, v7, &protocol requirements base descriptor for P2PControls);
  uint64_t v137 = *(void *)(v142 - 8);
  __chkstk_darwin();
  uint64_t v131 = (char *)&v122 - v12;
  uint64_t v133 = AssociatedTypeWitness;
  uint64_t v139 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  uint64_t v135 = *(void *)(v139 - 8);
  __chkstk_darwin();
  uint64_t v130 = (char *)&v122 - v13;
  uint64_t v143 = type metadata accessor for Logger(0LL);
  uint64_t v145 = *(void *)(v143 - 8);
  __chkstk_darwin();
  uint64_t v126 = (char *)&v122 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v129 = (char *)&v122 - v15;
  uint64_t v125 = v16;
  __chkstk_darwin();
  uint64_t v144 = (char *)&v122 - v17;
  *(void *)(v3 + v5[53]) = _swiftEmptyDictionarySingleton;
  *(void *)(v3 + *(void *)(*(void *)v3 + 432LL)) = 0LL;
  *(void *)(v3 + *(void *)(*(void *)v3 + 440LL)) = 0LL;
  uint64_t v18 = (void *)(v4 + *(void *)(*(void *)v4 + 448LL));
  *uint64_t v18 = &_swiftEmptySetSingleton;
  v18[1] = 0LL;
  uint64_t v19 = *(void *)(*(void *)v3 + 456LL);
  uint64_t v140 = v8;
  uint64_t v21 = type metadata accessor for AWDLInterface.StateMonitoringClient(0LL, v7, v8, v20);
  swift_retain();
  *(void *)(v4 + v19) = Dictionary.init()(&type metadata for UInt64, v21, &protocol witness table for UInt64);
  *(_BYTE *)(v4 + *(void *)(*(void *)v4 + 464LL)) = 0;
  uint64_t v22 = *(void *)(*(void *)v4 + 472LL);
  uint64_t v23 = ChannelSequence.none.unsafeMutableAddressor();
  uint64_t v24 = *v23;
  *(void *)(v4 + v22) = *v23;
  *(void *)(v4 + *(void *)(*(void *)v4 + 480LL)) = 0LL;
  *(_BYTE *)(v4 + *(void *)(*(void *)v4 + 488LL)) = 1;
  *(void *)(v4 + *(void *)(*(void *)v4 + 496LL)) = 0LL;
  *(_BYTE *)(v4 + *(void *)(*(void *)v4 + 504LL)) = 2;
  uint64_t v25 = v4 + *(void *)(*(void *)v4 + 512LL);
  uint64_t v26 = type metadata accessor for DispatchTime(0LL);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL);
  v27(v25, 1LL, 1LL, v26);
  *(void *)(v4 + *(void *)(*(void *)v4 + 520LL)) = &_swiftEmptySetSingleton;
  *(void *)(v4 + *(void *)(*(void *)v4 + 528LL)) = &_swiftEmptySetSingleton;
  uint64_t v28 = *(void *)(*(void *)v4 + 536LL);
  uint64_t v29 = sub_100058CD0(0LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  uint64_t v31 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation(0LL, v7, v8, v30);
  unint64_t v32 = sub_100245750();
  swift_bridgeObjectRetain(v24);
  *(void *)(v4 + v28) = Dictionary.init()(v29, v31, v32);
  *(void *)(v4 + *(void *)(*(void *)v4 + 544LL)) = _swiftEmptyArrayStorage;
  uint64_t v33 = *(void *)(*(void *)v4 + 552LL);
  *(void *)(v4 + v33) = Dictionary.init()(v29, v31, v32);
  uint64_t v34 = *(void *)(*(void *)v4 + 560LL);
  *(void *)(v4 + v34) = Dictionary.init()(v29, v31, v32);
  DispatchTime.init(uptimeNanoseconds:)(0LL);
  uint64_t v35 = *(void *)(*(void *)v4 + 576LL);
  *(void *)(v4 + v35) = Dictionary.init()(v29, v31, v32);
  uint64_t v36 = *(void *)(*(void *)v4 + 584LL);
  type metadata accessor for AWDLTrafficRegistrationService(0LL);
  uint64_t v38 = v37;
  uint64_t v134 = v7;
  uint64_t v39 = v141;
  uint64_t v41 = type metadata accessor for AWDLInterface.TrafficRegistrationServiceAvailabilityMonitor(0LL, v7, v140, v40);
  uint64_t v42 = sub_10000AF70( &qword_100404A20,  (uint64_t (*)(uint64_t))type metadata accessor for AWDLTrafficRegistrationService,  (uint64_t)&unk_1003384F0);
  *(void *)(v4 + v36) = Dictionary.init()(v38, v41, v42);
  *(void *)(v4 + *(void *)(*(void *)v4 + 592LL)) = 0LL;
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  v27(v4 + *(void *)(*(void *)v4 + 608LL), 1LL, 1LL, v26);
  v27(v4 + *(void *)(*(void *)v4 + 616LL), 1LL, 1LL, v26);
  uint64_t v43 = *(void *)(*(void *)v4 + 624LL);
  id v44 = [objc_allocWithZone(NSDateFormatter) init];
  NSString v45 = String._bridgeToObjectiveC()();
  [v44 setDateFormat:v45];

  *(void *)(v4 + v43) = v44;
  *(void *)(v4 + *(void *)(*(void *)v4 + 656LL)) = 0LL;
  uint64_t v46 = v26;
  uint64_t v47 = v136;
  uint64_t v48 = v137;
  v27(v4 + *(void *)(*(void *)v4 + 664LL), 1LL, 1LL, v46);
  uint64_t v49 = v139;
  *(void *)(v4 + *(void *)(*(void *)v4 + 672LL)) = 0LL;
  *(_BYTE *)(v4 + *(void *)(*(void *)v4 + 680LL)) = 0;
  *(void *)(v4 + *(void *)(*(void *)v4 + 688LL)) = 0LL;
  uint64_t v50 = *(void *)(*(void *)v4 + 696LL);
  id v51 = objc_allocWithZone(&OBJC_CLASS___WRM_UCMInterface);
  uint64_t v52 = v135;
  *(void *)(v4 + v50) = [v51 init];
  uint64_t v53 = v138;
  *(void *)(v4 + *(void *)(*(void *)v4 + 712LL)) = 0LL;
  *(void *)(v4 + *(void *)(*(void *)v4 + 720LL)) = &_swiftEmptySetSingleton;
  *(void *)(v4 + *(void *)(*(void *)v4 + 728LL)) = _swiftEmptyDictionarySingleton;
  *(_BYTE *)(v4 + *(void *)(*(void *)v4 + 736LL)) = 0;
  *(void *)(v4 + *(void *)(*(void *)v4 + 744LL)) = _swiftEmptyDictionarySingleton;
  *(void *)(v4 + *(void *)(*(void *)v4 + 752LL)) = 0LL;
  *(void *)(v4 + *(void *)(*(void *)v4 + 704LL)) = v39;
  *(_BYTE *)(v4 + *(void *)(*(void *)v4 + 632LL)) = 0;
  *(_BYTE *)(v4 + *(void *)(*(void *)v4 + 648LL)) = 0;
  *(_BYTE *)(v4 + *(void *)(*(void *)v4 + 640LL)) = 0;
  swift_unownedRetain(v39);
  swift_release(v4);
  uint64_t v54 = v144;
  Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xEE006C6477612E65LL,  0x6361667265746E69LL,  0xE900000000000065LL);
  uint64_t v55 = v52;
  uint64_t v56 = v130;
  uint64_t v57 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v130, v47, v49);
  uint64_t v58 = v48;
  uint64_t v59 = (uint64_t)v131;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v131, v53, v142);
  uint64_t v60 = (uint64_t)v129;
  unint64_t v124 = *(void (**)(char *, char *, uint64_t))(v145 + 16);
  v124(v129, v54, v143);
  unint64_t v62 = WiFiInterface.init(driver:components:logger:)(v56, v59, v60, v61);
  if (!v62)
  {
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v53, v142);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v47, v57);
    (*(void (**)(char *, uint64_t))(v145 + 8))(v54, v143);
LABEL_11:
    swift_release(v141);
    return 0LL;
  }

  os_log_type_t v63 = v62;
  uint64_t v64 = (char *)v62 + *(void *)(*v62 + 96);
  uint64_t v66 = v133;
  uint64_t v65 = v134;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v140,  v134,  v133,  &protocol requirements base descriptor for AWDLController,  &associated conformance descriptor for AWDLController.P2PControls.Driver: AWDLWiFiDriver);
  unint64_t v68 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  swift_retain();
  *((_BYTE *)v63 + *(void *)(*v63 + 680)) = v68(v66, AssociatedConformanceWitness) & 1;
  uint64_t v131 = (char *)v63;
  sub_100304B2C();
  uint64_t v69 = (unsigned __int16 *)WiFiAddress.bonjourMulticastAddress.unsafeMutableAddressor();
  uint64_t v70 = *(unsigned int *)(v69 + 1);
  uint64_t v71 = *v69;
  uint64_t v72 = v128;
  uint64_t v73 = v65;
  os_log_type_t v74 = v64;
  uint64_t v75 = swift_getAssociatedConformanceWitness( v128,  v73,  v66,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 112))(v71 | (v70 << 16), v66, v75);
  uint64_t v76 = v145;
  uint64_t v130 = (char *)AssociatedConformanceWitness;
  uint64_t v77 = v132;
  uint64_t v78 = v133;
  unint64_t v79 = v131;
  (*(void (**)(void, void, unint64_t, void, unint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 128))( 0LL,  0LL,  0xC000000000000000LL,  0LL,  0xF000000000000000LL,  v133,  AssociatedConformanceWitness);
  uint64_t v80 = v76;
  unint64_t v81 = v144;
  uint64_t v82 = v134;
  swift_beginAccess(&v79[*(void *)(*(void *)v79 + 152LL)], &v146, 33LL, 0LL);
  type metadata accessor for WiFiInterface.NeighborDiscoveryTable(0LL, v82, v72, v83);
  swift_retain();
  WiFiInterface.NeighborDiscoveryTable.clearAllPeerPresence()();
  if (v84)
  {
    swift_endAccess(&v146);
    uint64_t v85 = v139;
    swift_release(v79);
    swift_errorRetain(v84);
    swift_retain();
    uint64_t v97 = swift_errorRetain(v84);
    uint64_t v98 = (os_log_s *)Logger.logObject.getter(v97);
    os_log_type_t v99 = static os_log_type_t.error.getter(v98);
    if (os_log_type_enabled(v98, v99))
    {
      uint64_t v100 = swift_slowAlloc(22LL, -1LL);
      uint64_t v101 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v102 = swift_slowAlloc(32LL, -1LL);
      uint64_t v146 = v102;
      *(_DWORD *)uint64_t v100 = 136315394;
      uint64_t v103 = (uint64_t *)&v79[*(void *)(*(void *)v79 + 104LL)];
      uint64_t v104 = *v103;
      unint64_t v105 = v103[1];
      swift_bridgeObjectRetain(v105);
      uint64_t v147 = sub_10000235C(v104, v105, &v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);
      swift_release_n(v79, 2LL);
      swift_bridgeObjectRelease(v105);
      *(_WORD *)(v100 + 12) = 2112;
      swift_errorRetain(v84);
      uint64_t v106 = _swift_stdlib_bridgeErrorToNSError(v84);
      uint64_t v147 = v106;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);
      uint64_t *v101 = v106;
      swift_errorRelease(v84);
      swift_errorRelease(v84);
      _os_log_impl( (void *)&_mh_execute_header,  v98,  v99,  "Unable to create AWDLInterface for %s because initialization error: %@",  (uint8_t *)v100,  0x16u);
      uint64_t v107 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v101, 1LL, v107);
      swift_slowDealloc(v101, -1LL, -1LL);
      swift_arrayDestroy(v102, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v102, -1LL, -1LL);
      swift_slowDealloc(v100, -1LL, -1LL);

      swift_errorRelease(v84);
      (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v138, v142);
      (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v136, v139);
      (*(void (**)(char *, uint64_t))(v145 + 8))(v144, v143);
    }

    else
    {

      swift_errorRelease(v84);
      swift_errorRelease(v84);
      swift_release_n(v79, 2LL);
      swift_errorRelease(v84);
      (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v138, v142);
      (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v136, v85);
      (*(void (**)(char *, uint64_t))(v80 + 8))(v81, v143);
    }

    swift_release(v79);
    goto LABEL_11;
  }

  swift_endAccess(&v146);
  swift_release(v79);
  uint64_t v86 = v127;
  (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v127, v74, v78);
  uint64_t v87 = swift_allocObject(&unk_1003FB908, 24LL, 7LL);
  swift_weakInit(v87 + 16, v79);
  uint64_t v88 = v126;
  uint64_t v89 = v143;
  v124(v126, v81, v143);
  uint64_t v90 = *(unsigned __int8 *)(v80 + 80);
  uint64_t v91 = (v90 + 40) & ~v90;
  uint64_t v92 = v78;
  uint64_t v93 = (char *)swift_allocObject(&unk_1003FB980, v91 + v125, v90 | 7);
  uint64_t v94 = v140;
  *((void *)v93 + 2) = v134;
  *((void *)v93 + 3) = v94;
  *((void *)v93 + 4) = v87;
  (*(void (**)(char *, char *, uint64_t))(v80 + 32))(&v93[v91], v88, v89);
  uint64_t v95 = v130;
  uint64_t v96 = (void (*)(void (*)(uint64_t), char *, uint64_t, char *))*((void *)v130 + 3);
  swift_retain();
  v96(sub_100332D9C, v93, v92, v95);
  (*(void (**)(char *, uint64_t))(v132 + 8))(v86, v92);
  swift_release(v87);
  swift_release(v93);
  uint64_t v109 = sub_10030D6E8();
  uint64_t v110 = *(void *)(*(void *)v79 + 592LL);
  uint64_t v111 = *(void *)&v79[v110];
  *(void *)&v79[v110] = v109;
  swift_release(v111);
  uint64_t v112 = v140;
  uint64_t v113 = v141;
  uint64_t v114 = v135;
  uint64_t v115 = v136;
  uint64_t v116 = v123;
  sub_1002CF298(v123);
  unint64_t v117 = (void *)*OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v118 = swift_allocObject(&unk_1003FB908, 24LL, 7LL);
  swift_weakInit(v118 + 16, v79);
  uint64_t v119 = (void *)swift_allocObject(&unk_1003FB9A8, 40LL, 7LL);
  v119[2] = v134;
  v119[3] = v112;
  v119[4] = v118;
  unint64_t v120 = (uint64_t *)&v79[*(void *)(*(void *)v79 + 480LL)];
  swift_beginAccess(v120, &v146, 33LL, 0LL);
  id v121 = v117;
  ObservableWiFiProperty.registerForChanges(on:using:valueUpdateHandler:)( v121,  v120,  (uint64_t)sub_100332E14,  (uint64_t)v119,  v122,  (uint64_t)&v147);
  swift_endAccess(&v146);

  swift_release(v119);
  sub_1000225EC(v116, (uint64_t *)&unk_100410500);
  sub_10030DC70(v147);
  (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v138, v142);
  (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v115, v139);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v144, v143);
  swift_release(v113);
  swift_release(v79);
  return v79;
}

void sub_10030A838(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (uint64_t *)((char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v11 = (void *)*v10;
  *uint64_t v9 = *v10;
  (*(void (**)(uint64_t *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = v11;
  LOBYTE(v1sub_100058090(v4, v0 + 1) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
  if ((v11 & 1) != 0)
  {
    uint64_t v13 = a2 + 16;
    swift_beginAccess(v13, v27, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v13);
    if (Strong)
    {
      uint64_t v15 = Strong;
      sub_10030AAA8(a1);
      swift_release(v15);
    }

    else
    {
      uint64_t v16 = sub_100057FE8(a1, (uint64_t)v5, type metadata accessor for DriverEvent);
      uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v20 = swift_slowAlloc(32LL, -1LL);
        uint64_t v26 = v20;
        *(_DWORD *)uint64_t v19 = 136315138;
        DriverEvent.shortDescription.getter();
        unint64_t v22 = v21;
        uint64_t v25 = sub_10000235C(v23, v21, &v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
        swift_bridgeObjectRelease(v22);
        sub_10005802C((uint64_t)v5, type metadata accessor for DriverEvent);
        _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Failed to dispatch event %s because the AWDLInterface was deallocated before the event was received from the driver",  v19,  0xCu);
        swift_arrayDestroy(v20, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v20, -1LL, -1LL);
        swift_slowDealloc(v19, -1LL, -1LL);
      }

      else
      {

        sub_10005802C((uint64_t)v5, type metadata accessor for DriverEvent);
      }
    }
  }

  else
  {
    __break(1u);
  }

void sub_10030AAA8(uint64_t a1)
{
  uint64_t v44 = a1;
  uint64_t v38 = 0LL;
  uint64_t v2 = *v1;
  v35[13] = sub_100002274(&qword_10040BDC8);
  __chkstk_darwin();
  v35[12] = (char *)v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = sub_100002274((uint64_t *)&unk_10040FE60);
  __chkstk_darwin();
  uint64_t v40 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v35[9] = sub_100002274((uint64_t *)&unk_10040FEC0);
  __chkstk_darwin();
  v35[8] = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_10040E540);
  __chkstk_darwin();
  v35[5] = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for AWDLPeer(0LL);
  void v35[3] = *(void *)(v7 - 8);
  void v35[4] = v7;
  __chkstk_darwin();
  v35[1] = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchTimeInterval(0LL);
  v35[22] = *(void *)(v9 - 8);
  v35[23] = v9;
  __chkstk_darwin();
  v35[17] = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v35[16] = (char *)v35 - v11;
  __chkstk_darwin();
  v35[26] = (char *)v35 - v12;
  sub_100002274(&qword_100405D40);
  __chkstk_darwin();
  v35[11] = (char *)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v35[2] = (char *)v35 - v14;
  uint64_t v36 = type metadata accessor for DispatchTime(0LL);
  _BYTE v35[24] = *(void *)(v36 - 8);
  __chkstk_darwin();
  v35[15] = (char *)v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v35[25] = (char *)v35 - v16;
  v35[14] = v17;
  __chkstk_darwin();
  v35[0] = (char *)v35 - v18;
  type metadata accessor for AWDLStatistics.LowLatencyStatistics(0LL);
  __chkstk_darwin();
  v35[6] = (char *)v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = *(void *)(v2 + 408);
  uint64_t v37 = *(void *)(v2 + 416);
  uint64_t v21 = *(void *)(v37 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v21,  v20,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v21,  v20,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v24 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  v35[20] = *(void *)(v24 - 8);
  v35[21] = v24;
  __chkstk_darwin();
  v35[19] = (char *)v35 - v25;
  type metadata accessor for AWDLIdleActivity(0LL);
  __chkstk_darwin();
  uint64_t v41 = v21;
  uint64_t v43 = v20;
  uint64_t v42 = swift_getAssociatedTypeWitness(0LL, v21, v20, &protocol requirements base descriptor for P2PControls);
  v35[10] = *(void *)(v42 - 8);
  __chkstk_darwin();
  v35[7] = (char *)v35 - v26;
  uint64_t v27 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  v35[18] = AssociatedConformanceWitness;
  uint64_t v28 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v27,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.PreferencesBacking: PreferencesStorage);
  type metadata accessor for Preferences(0LL, v27, v28, v29);
  __chkstk_darwin();
  type metadata accessor for AWDLActionFrame.Header(0LL);
  __chkstk_darwin();
  uint64_t v30 = type metadata accessor for DriverEvent(0LL);
  __chkstk_darwin();
  __chkstk_darwin();
  unint64_t v32 = (char *)v35 - v31;
  sub_100057FE8(v44, (uint64_t)v35 - v31, v33);
  uint64_t v34 = (char *)&loc_10030B008 + *((int *)qword_10030D680 + swift_getEnumCaseMultiPayload(v32, v30));
  __asm { BR              X10 }

uint64_t sub_10030B018()
{
  return sub_1002A732C(v0 + 480);
}

uint64_t sub_10030D6E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)v0;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v70 = v3;
  uint64_t v71 = v4;
  __chkstk_darwin();
  uint64_t v69 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = v2[51];
  uint64_t v7 = *(void *)(v2[52] + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v7,  v6,  &protocol requirements base descriptor for P2PControls);
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v59 - v10;
  uint64_t v12 = swift_getAssociatedTypeWitness(255LL, v7, v6, &protocol requirements base descriptor for P2PControls);
  type metadata accessor for Optional(0LL, v12);
  uint64_t v13 = __chkstk_darwin();
  uint64_t v15 = (char *)&v59 - v14;
  uint64_t v16 = v2[74];
  uint64_t v17 = *(void *)&v1[v16];
  if (v17)
  {
    uint64_t v18 = swift_retain_n(v17, 2LL);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      v73[0] = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      uint64_t v23 = WiFiInterface.description.getter();
      unint64_t v25 = v24;
      uint64_t v74 = sub_10000235C(v23, v24, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);
      swift_release(v17);
      swift_bridgeObjectRelease(v25);
      _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "Ignoring request to create AWDL companion low latency interface since it is already present: %s",  v21,  0xCu);
      swift_arrayDestroy(v22, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      swift_release(v17);
    }
  }

  else
  {
    uint64_t v64 = v12;
    uint64_t v65 = v15;
    uint64_t v61 = v16;
    uint64_t v66 = v9;
    uint64_t v67 = AssociatedTypeWitness;
    unint64_t v68 = v11;
    uint64_t v60 = &v1[v2[20]];
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v13);
    uint64_t v27 = static os_log_type_t.info.getter();
    uint64_t v28 = v1;
    if (os_log_type_enabled(v26, (os_log_type_t)v27))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  (os_log_type_t)v27,  "Creating companion low latency interface",  v29,  2u);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    uint64_t v30 = (uint64_t *)&v1[*(void *)(*(void *)v1 + 104LL)];
    uint64_t v31 = *v30;
    uint64_t v32 = v30[1];
    uint64_t v33 = WiFiInterface.macAddress.getter();
    uint64_t v62 = v6;
    uint64_t v63 = v7;
    uint64_t v34 = v7;
    uint64_t v35 = v64;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v34,  v6,  v64,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
    uint64_t v37 = v65;
    uint64_t v38 = v72;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))( 4LL,  v31,  v32,  v33 & 0xFFFFFFFFFFFFLL,  v35,  AssociatedConformanceWitness);
    uint64_t v40 = v71;
    uint64_t v17 = v67;
    uint64_t v41 = (uint64_t)v68;
    uint64_t v42 = v66;
    if (!v38)
    {
      type metadata accessor for WiFiInterface(0LL, v62, v63, v39);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL))(v37, 0LL, 1LL, v35);
      (*(void (**)(uint64_t, char *, uint64_t))(v42 + 16))(v41, &v28[*(void *)(*(void *)v28 + 112LL)], v17);
      uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
      uint64_t v45 = (uint64_t)v69;
      v44(v69, v60, v70);
      uint64_t v46 = WiFiInterface.__allocating_init(driver:components:logger:)(v37, v41, v45);
      uint64_t v47 = v61;
      uint64_t v48 = *(void *)&v28[v61];
      *(void *)&v28[v61] = v46;
      uint64_t v49 = swift_release(v48);
      uint64_t v17 = *(void *)&v28[v47];
      if (v17)
      {
        swift_retain();
        sub_100308174();
        uint64_t v50 = (void (*)(uint64_t *, uint64_t))(*(uint64_t (**)(uint64_t *))(*(void *)v17 + 392LL))(v73);
        type metadata accessor for WiFiInterface.NeighborDiscoveryTable(0LL, v62, v63, v51);
        WiFiInterface.NeighborDiscoveryTable.clearAllPeerPresence()();
        if (v52)
        {
          v50(v73, 1LL);
          swift_release(v17);
        }

        else
        {
          v50(v73, 0LL);
        }
      }

      else
      {
        uint64_t v53 = (os_log_s *)Logger.logObject.getter(v49);
        os_log_type_t v54 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v53, v54))
        {
          uint64_t v55 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v55 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v53,  v54,  "Failed to create AWDL companion low latency interface",  v55,  2u);
          swift_slowDealloc(v55, -1LL, -1LL);
        }

        unint64_t v56 = sub_1000033FC();
        uint64_t v57 = swift_allocError(&type metadata for WiFiError, v56, 0LL, 0LL);
        *(_OWORD *)uint64_t v58 = xmmword_100337000;
        *(_BYTE *)(v58 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
        swift_willThrow(v57);
      }
    }
  }

  return v17;
}

uint64_t sub_10030DC14(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a3 + 16;
  swift_beginAccess(a3 + 16, v7, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v4);
  if (result)
  {
    uint64_t v6 = result;
    sub_10030DC70(v3);
    return swift_release(v6);
  }

  return result;
}

void sub_10030DC70(uint64_t a1)
{
  uint64_t v2 = v1;
  if ((a1 & 1) != 0)
  {
    if (*(_BYTE *)(v1 + *(void *)(*(void *)v1 + 488LL)) == 1)
    {
      uint64_t v3 = swift_retain();
      uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
      os_log_type_t v5 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v7 = swift_slowAlloc(32LL, -1LL);
        uint64_t v25 = v7;
        *(_DWORD *)uint64_t v6 = 136315138;
        uint64_t v8 = WiFiInterface.description.getter();
        unint64_t v10 = v9;
        uint64_t v24 = sub_10000235C(v8, v9, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
        swift_release(v2);
        swift_bridgeObjectRelease(v10);
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "WiFi powered on, setting link up on %s", v6, 0xCu);
        swift_arrayDestroy(v7, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v7, -1LL, -1LL);
        swift_slowDealloc(v6, -1LL, -1LL);
      }

      else
      {
        swift_release(v1);
      }

      WiFiInterface.linkState.setter(1);
      sub_100304B2C();
    }

    else
    {
      oslog = (os_log_s *)Logger.logObject.getter(a1);
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(oslog, v19))
      {
        os_log_type_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)os_log_type_t v20 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  oslog,  v19,  "WiFi powered on but system sleep active, skipping link up till system wake indication",  v20,  2u);
        swift_slowDealloc(v20, -1LL, -1LL);
      }
    }
  }

  else
  {
    uint64_t v11 = swift_retain();
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      uint64_t v25 = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      uint64_t v16 = WiFiInterface.description.getter();
      unint64_t v18 = v17;
      uint64_t v24 = sub_10000235C(v16, v17, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
      swift_release(v2);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "WiFi powered off, setting link down on %s", v14, 0xCu);
      swift_arrayDestroy(v15, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    else
    {
      swift_release(v1);
    }

    WiFiInterface.linkState.setter(0);
    uint64_t v21 = *(void *)(*(void *)v2 + 680LL);
    char v22 = *(_BYTE *)(v2 + v21);
    sub_100307BD4(0);
    *(_BYTE *)(v2 + v2sub_100058090(v4, v0 + 1) = 0;
    sub_100308378(v22);
  }

void sub_10030DFBC()
{
  uint64_t v1 = (void *)(v0 + *(void *)(*(void *)v0 + 448LL));
  uint64_t v2 = v1[1];
  swift_bridgeObjectRelease(*v1);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(*(void *)(v0 + *(void *)(*(void *)v0 + 456LL)));
  swift_bridgeObjectRelease(*(void *)(v0 + *(void *)(*(void *)v0 + 472LL)));
  swift_release(*(void *)(v0 + *(void *)(*(void *)v0 + 480LL)));
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 512LL), &qword_100405D40);
  swift_bridgeObjectRelease(*(void *)(v0 + *(void *)(*(void *)v0 + 520LL)));
  swift_bridgeObjectRelease(*(void *)(v0 + *(void *)(*(void *)v0 + 528LL)));
  swift_bridgeObjectRelease(*(void *)(v0 + *(void *)(*(void *)v0 + 536LL)));
  swift_bridgeObjectRelease(*(void *)(v0 + *(void *)(*(void *)v0 + 544LL)));
  swift_bridgeObjectRelease(*(void *)(v0 + *(void *)(*(void *)v0 + 552LL)));
  swift_bridgeObjectRelease(*(void *)(v0 + *(void *)(*(void *)v0 + 560LL)));
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 568LL);
  uint64_t v4 = type metadata accessor for DispatchTime(0LL);
  os_log_type_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v5(v3, v4);
  swift_bridgeObjectRelease(*(void *)(v0 + *(void *)(*(void *)v0 + 576LL)));
  swift_bridgeObjectRelease(*(void *)(v0 + *(void *)(*(void *)v0 + 584LL)));
  __n128 v6 = swift_release(*(void *)(v0 + *(void *)(*(void *)v0 + 592LL)));
  ((void (*)(uint64_t, uint64_t, __n128))v5)(v0 + *(void *)(*(void *)v0 + 600LL), v4, v6);
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 608LL), &qword_100405D40);
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 616LL), &qword_100405D40);

  swift_release(*(void *)(v0 + *(void *)(*(void *)v0 + 656LL)));
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 664LL), &qword_100405D40);
  swift_release(*(void *)(v0 + *(void *)(*(void *)v0 + 672LL)));
  swift_unknownObjectRelease(*(void *)(v0 + *(void *)(*(void *)v0 + 688LL)));

  swift_unownedRelease(*(void *)(v0 + *(void *)(*(void *)v0 + 704LL)));
  swift_release(*(void *)(v0 + *(void *)(*(void *)v0 + 712LL)));
  swift_bridgeObjectRelease(*(void *)(v0 + *(void *)(*(void *)v0 + 720LL)));
  swift_bridgeObjectRelease(*(void *)(v0 + *(void *)(*(void *)v0 + 728LL)));
  swift_bridgeObjectRelease(*(void *)(v0 + *(void *)(*(void *)v0 + 744LL)));
}

uint64_t sub_10030E234()
{
  uint64_t v1 = v0;
  uint64_t v2 = swift_retain();
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    uint64_t v19 = v6;
    *(_DWORD *)os_log_type_t v5 = 136315138;
    uint64_t v7 = WiFiInterface.description.getter();
    unint64_t v9 = v8;
    uint64_t v18 = sub_10000235C(v7, v8, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_release(v1);
    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Destroyed %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {

    swift_release(v0);
  }

  uint64_t v10 = WiFiInterface.deinit();
  swift_bridgeObjectRelease(*(void *)(v10 + *(void *)(*(void *)v10 + 424LL)));
  swift_release(*(void *)(v10 + *(void *)(*(void *)v10 + 432LL)));
  swift_release(*(void *)(v10 + *(void *)(*(void *)v10 + 440LL)));
  uint64_t v11 = (void *)(v10 + *(void *)(*(void *)v10 + 448LL));
  uint64_t v12 = v11[1];
  swift_bridgeObjectRelease(*v11);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(*(void *)(v10 + *(void *)(*(void *)v10 + 456LL)));
  swift_bridgeObjectRelease(*(void *)(v10 + *(void *)(*(void *)v10 + 472LL)));
  swift_release(*(void *)(v10 + *(void *)(*(void *)v10 + 480LL)));
  sub_1000225EC(v10 + *(void *)(*(void *)v10 + 512LL), &qword_100405D40);
  swift_bridgeObjectRelease(*(void *)(v10 + *(void *)(*(void *)v10 + 520LL)));
  swift_bridgeObjectRelease(*(void *)(v10 + *(void *)(*(void *)v10 + 528LL)));
  swift_bridgeObjectRelease(*(void *)(v10 + *(void *)(*(void *)v10 + 536LL)));
  swift_bridgeObjectRelease(*(void *)(v10 + *(void *)(*(void *)v10 + 544LL)));
  swift_bridgeObjectRelease(*(void *)(v10 + *(void *)(*(void *)v10 + 552LL)));
  swift_bridgeObjectRelease(*(void *)(v10 + *(void *)(*(void *)v10 + 560LL)));
  uint64_t v13 = v10 + *(void *)(*(void *)v10 + 568LL);
  uint64_t v14 = type metadata accessor for DispatchTime(0LL);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8LL);
  v15(v13, v14);
  swift_bridgeObjectRelease(*(void *)(v10 + *(void *)(*(void *)v10 + 576LL)));
  swift_bridgeObjectRelease(*(void *)(v10 + *(void *)(*(void *)v10 + 584LL)));
  __n128 v16 = swift_release(*(void *)(v10 + *(void *)(*(void *)v10 + 592LL)));
  ((void (*)(uint64_t, uint64_t, __n128))v15)(v10 + *(void *)(*(void *)v10 + 600LL), v14, v16);
  sub_1000225EC(v10 + *(void *)(*(void *)v10 + 608LL), &qword_100405D40);
  sub_1000225EC(v10 + *(void *)(*(void *)v10 + 616LL), &qword_100405D40);

  swift_release(*(void *)(v10 + *(void *)(*(void *)v10 + 656LL)));
  sub_1000225EC(v10 + *(void *)(*(void *)v10 + 664LL), &qword_100405D40);
  swift_release(*(void *)(v10 + *(void *)(*(void *)v10 + 672LL)));
  swift_unknownObjectRelease(*(void *)(v10 + *(void *)(*(void *)v10 + 688LL)));

  swift_unownedRelease(*(void *)(v10 + *(void *)(*(void *)v10 + 704LL)));
  swift_release(*(void *)(v10 + *(void *)(*(void *)v10 + 712LL)));
  swift_bridgeObjectRelease(*(void *)(v10 + *(void *)(*(void *)v10 + 720LL)));
  swift_bridgeObjectRelease(*(void *)(v10 + *(void *)(*(void *)v10 + 728LL)));
  swift_bridgeObjectRelease(*(void *)(v10 + *(void *)(*(void *)v10 + 744LL)));

  return v10;
}

uint64_t sub_10030E5F4()
{
  uint64_t v0 = sub_10030E234();
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for AWDLInterface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AWDLInterface);
}

void sub_10030E620(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int16 *a4)
{
  os_log_type_t v5 = v4;
  uint64_t v502 = a3;
  unint64_t v9 = (void *)*v4;
  uint64_t v11 = v9[51];
  uint64_t v10 = v9[52];
  uint64_t v12 = *(void (**)(void, void))(v10 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  (void (*)(_BYTE *, uint64_t))v12,  v11,  &protocol requirements base descriptor for P2PControls);
  v498 = (void (*)(_BYTE *, uint64_t))v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( (void (*)(_BYTE *, uint64_t))v12,  v11,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v473 = AssociatedTypeWitness;
  uint64_t v477 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v476 = *(void *)(v477 - 8);
  __chkstk_darwin();
  v474 = &v443[-v14];
  uint64_t v494 = type metadata accessor for UUID(0LL);
  uint64_t v493 = *(void *)(v494 - 8);
  __chkstk_darwin();
  v484 = &v443[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v16 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v490 = *(void *)(v16 - 8);
  __chkstk_darwin();
  v455 = &v443[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  v458 = &v443[-v18];
  __chkstk_darwin();
  v471 = &v443[-v19];
  __chkstk_darwin();
  v472 = &v443[-v20];
  sub_100002274(qword_100410330);
  __chkstk_darwin();
  v478 = &v443[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  v486 = &v443[-v22];
  __chkstk_darwin();
  v469 = &v443[-v23];
  uint64_t v499 = v11;
  uint64_t v495 = v10;
  uint64_t v25 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation(255LL, v11, v10, v24);
  uint64_t v492 = type metadata accessor for Optional(0LL, v25);
  uint64_t v491 = *(void *)(v492 - 8);
  __chkstk_darwin();
  v480 = &v443[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  v463 = &v443[-v27];
  __chkstk_darwin();
  v483 = &v443[-v28];
  __chkstk_darwin();
  v481 = &v443[-v29];
  sub_100002274(&qword_100405D40);
  __chkstk_darwin();
  v461 = &v443[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  v462 = &v443[-v31];
  __chkstk_darwin();
  v468 = &v443[-v32];
  __chkstk_darwin();
  v466 = &v443[-v33];
  uint64_t v34 = *(void *)(v25 - 8);
  __chkstk_darwin();
  v467 = &v443[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  v485 = &v443[-v36];
  __chkstk_darwin();
  v457 = &v443[-v37];
  __chkstk_darwin();
  v460 = &v443[-v38];
  __chkstk_darwin();
  v489 = &v443[-v39];
  __chkstk_darwin();
  v488 = &v443[-v40];
  __chkstk_darwin();
  v465 = &v443[-v41];
  uint64_t v487 = type metadata accessor for DispatchTime(0LL);
  uint64_t v482 = *(void *)(v487 - 8);
  __chkstk_darwin();
  v456 = &v443[-((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  v479 = &v443[-v43];
  __chkstk_darwin();
  v464 = &v443[-v44];
  sub_100002274(&qword_100407450);
  __chkstk_darwin();
  v470 = &v443[-((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  v459 = &v443[-v46];
  __chkstk_darwin();
  v496 = &v443[-v47];
  sub_100002274((uint64_t *)&unk_1004104A0);
  __chkstk_darwin();
  v497 = &v443[-((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  v454 = &v443[-v49];
  __chkstk_darwin();
  v500 = &v443[-v50];
  __chkstk_darwin();
  v501 = (void **)&v443[-v51];
  __chkstk_darwin();
  uint64_t v53 = &v443[-v52];
  os_log_type_t v54 = (int *)type metadata accessor for AWDLPeer(0LL);
  __chkstk_darwin();
  if (*((_BYTE *)v5 + v9[85]) != 1) {
    return;
  }
  v453 = &v443[-((v55 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v447 = v34;
  uint64_t v446 = v16;
  uint64_t v450 = v25;
  uint64_t v56 = swift_allocBox(v54);
  uint64_t v58 = v57;
  sub_100304FBC(*a4 | ((unint64_t)*(unsigned int *)(a4 + 1) << 16), v57);
  uint64_t v59 = *(void *)(v58 + v54[20]);
  uint64_t v60 = (unsigned __int16 *)(v58 + v54[11]);
  int v448 = *v60;
  int v451 = *((unsigned __int8 *)v60 + 2);
  swift_bridgeObjectRetain(v59);
  unsigned int v61 = a2;
  uint64_t v62 = v58;
  AWDLPeer.received(actionFrame:with:)(a1 & 0xFFFFFFFF00FF01FFLL, v61, v502, (uint64_t)a4);
  uint64_t v63 = v54[27];
  char v64 = *(_BYTE *)(v62 + v63);
  uint64_t v502 = v56;
  uint64_t v452 = v59;
  if ((v64 & 1) != 0)
  {
    v498 = 0LL;
    uint64_t v65 = v54;
  }

  else
  {
    v449 = v54;
    unint64_t v66 = *(unsigned __int16 *)(v62 + v54[5]) | ((unint64_t)*(unsigned int *)(v62 + v54[5] + 2) << 16);
    WiFiAddress.ipv6LinkLocalAddress.getter(v66);
    uint64_t v67 = v62;
    uint64_t v69 = v68;
    uint64_t v71 = v70;
    uint64_t v73 = v72;
    uint64_t v75 = v74;
    swift_beginAccess((char *)v5 + *(void *)(*v5 + 152LL), &aBlock, 33LL, 0LL);
    uint64_t v77 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable(0LL, v499, (uint64_t)v498, v76);
    WiFiInterface.NeighborDiscoveryTable.postPeerPresence(macAddress:ipv6Address:)(v66, v69, v71, v73, v75, v77);
    v498 = 0LL;
    swift_endAccess(&aBlock);
    swift_bridgeObjectRelease(v75);
    *(_BYTE *)(v67 + v63) = 1;
    uint64_t v56 = v502;
    uint64_t v65 = v449;
    uint64_t v62 = v67;
    uint64_t v59 = v452;
  }

  swift_beginAccess(v62, &v513, 0LL, 0LL);
  uint64_t v78 = (unsigned __int16 *)(v62 + v65[5]);
  uint64_t v79 = *(unsigned int *)(v78 + 1);
  uint64_t v80 = *v78;
  unint64_t v81 = v453;
  sub_100057FE8(v62, (uint64_t)v453, type metadata accessor for AWDLPeer);
  sub_100311BF8((uint64_t)v81, v80 | (v79 << 16));
  char v512 = 0;
  sub_1000226B0(v62 + v65[14], (uint64_t)v53, (uint64_t *)&unk_1004104A0);
  uint64_t v82 = type metadata accessor for AWDLActionFrame.DataPathState(0LL);
  uint64_t v83 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v82 - 8) + 48LL);
  if (v83(v53, 1LL, v82) == 1)
  {
    sub_1000225EC((uint64_t)v53, (uint64_t *)&unk_1004104A0);
    goto LABEL_15;
  }

  int v84 = v53[64];
  sub_10005802C((uint64_t)v53, type metadata accessor for AWDLActionFrame.DataPathState);
  if (v84 != 43)
  {
    uint64_t v85 = (_BYTE *)sub_100058CD0( 0LL,  (unint64_t *)&unk_10040CC00,  &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
    AWDLTrafficRegistrationConfiguration.init(peerAddress:umiOptions:isActive:)( *(unsigned __int16 *)(v62 + v65[5]) | ((unint64_t)*(unsigned int *)(v62 + v65[5] + 2) << 16),  v84);
    if (v86)
    {
      uint64_t v444 = v62;
      v453 = v85;
      if (v512 != 1)
      {
        id v510 = v86;
        uint64_t v172 = v86;
        swift_beginAccess((char *)v5 + *(void *)(*v5 + 560LL), &aBlock, 33LL, 0LL);
        unint64_t v173 = sub_100245750();
        uint64_t v174 = v450;
        uint64_t v175 = type metadata accessor for Dictionary(0LL, v85, v450, v173);
        uint64_t v176 = v480;
        Dictionary.removeValue(forKey:)(&v510, v175);
        swift_endAccess(&aBlock);
        double v177 = sub_100306904();
        uint64_t v178 = v447;
        int v179 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, double))(v447 + 48))(v176, 1LL, v174, v177);
        if (v179 != 1)
        {
          v449 = v65;
          (*(void (**)(char *, _BYTE *, uint64_t))(v178 + 32))(v489, v176, v174);
          uint64_t v213 = v172;
          uint64_t v214 = (os_log_s *)Logger.logObject.getter(v213);
          os_log_type_t v215 = static os_log_type_t.default.getter(v214);
          BOOL v216 = os_log_type_enabled(v214, v215);
          v501 = (void **)v213;
          if (v216)
          {
            uint64_t v217 = swift_slowAlloc(22LL, -1LL);
            uint64_t v218 = (void **)swift_slowAlloc(64LL, -1LL);
            Swift::String aBlock = v218;
            *(_DWORD *)uint64_t v217 = 136315394;
            id v219 = [v213 uniqueIdentifier];
            uint64_t v220 = static String._unconditionallyBridgeFromObjectiveC(_:)(v219);
            unint64_t v222 = v221;

            id v510 = (id)sub_10000235C(v220, v222, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v510, v511);

            *(void *)&double v223 = swift_bridgeObjectRelease(v222).n128_u64[0];
            *(_WORD *)(v217 + 12) = 2080;
            id v224 = objc_msgSend(v213, "peerAddress", v223);
            WiFiMACAddress.wifiAddress.getter();
            uint64_t v226 = v225;

            unint64_t v227 = v226 & 0xFFFFFFFFFFFFLL;
            uint64_t v59 = v452;
            uint64_t v228 = WiFiAddress.description.getter(v227);
            unint64_t v230 = v229;
            id v510 = (id)sub_10000235C(v228, v229, (uint64_t *)&aBlock);
            uint64_t v56 = v502;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v510, v511);

            swift_bridgeObjectRelease(v230);
            _os_log_impl( (void *)&_mh_execute_header,  v214,  v215,  "Successfully cleared traffic registration for %s from %s",  (uint8_t *)v217,  0x16u);
            swift_arrayDestroy(v218, 2LL, &type metadata for Any[8]);
            swift_slowDealloc(v218, -1LL, -1LL);
            swift_slowDealloc(v217, -1LL, -1LL);
          }

          else
          {
          }

          uint64_t v65 = v449;
          uint64_t v62 = v444;
          uint64_t v245 = v447;
          uint64_t v246 = v483;
          uint64_t v247 = v450;
          (*(void (**)(_BYTE *, char *, uint64_t))(v447 + 16))(v483, v489, v450);
          (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v245 + 56))(v246, 0LL, 1LL, v247);
          __int128 v248 = v501;
          sub_100313C9C(v501, (uint64_t)v246, v249, v250);

          (*(void (**)(_BYTE *, uint64_t))(v491 + 8))(v246, v492);
          (*(void (**)(char *, uint64_t))(v245 + 8))(v489, v247);
          goto LABEL_105;
        }

        v501 = (void **)v172;
        double v180 = *(_BYTE **)(v491 + 8);
        ((void (*)(_BYTE *, uint64_t))v180)(v176, v492);
        uint64_t v181 = *(void *)(*v5 + 576LL);
        v445 = v5;
        id v182 = (void *)((char *)v5 + v181);
        swift_beginAccess((char *)v5 + v181, &aBlock, 0LL, 0LL);
        uint64_t v183 = *v182;
        if (*(void *)(*v182 + 16LL))
        {
          swift_bridgeObjectRetain(*v182);
          uint64_t v184 = v501;
          unint64_t v185 = sub_1003278A0((uint64_t)v501);
          if ((v186 & 1) != 0)
          {
            unint64_t v187 = v185;
            v500 = v180;
            v449 = v65;
            uint64_t v188 = *(unsigned int *)(v183 + 36);
            swift_bridgeObjectRelease(v183);
            uint64_t v189 = *v182;
            swift_bridgeObjectRetain(*v182);
            v441 = (_BYTE *)v173;
            char v190 = v460;
            uint64_t v499 = v188;
            uint64_t v191 = v450;
            Dictionary.subscript.getter(&v510, v460, v187, v188, 0LL, v189, v453, v450, v441);
            swift_bridgeObjectRelease(v189);

            uint64_t v192 = v461;
            sub_1000226B0((uint64_t)&v190[*(int *)(v191 + 36)], (uint64_t)v461, &qword_100405D40);
            uint64_t v193 = *(void (**)(_BYTE *, uint64_t))(v447 + 8);
            v193(v190, v191);
            uint64_t v194 = v482;
            uint64_t v195 = v487;
            if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v482 + 48))(v192, 1LL, v487) == 1)
            {

              sub_1000225EC((uint64_t)v192, &qword_100405D40);
              uint64_t v65 = v449;
            }

            else
            {
              v498 = v193;
              (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v194 + 32))(v456, v192, v195);
              type metadata accessor for P2PTimer(0LL);
              v385 = v479;
              variable initialization expression of AWDLPeer.lastUpdated();
              v386 = v458;
              DispatchTime.distance(to:)(v385);
              v497 = *(_BYTE **)(v194 + 8);
              ((void (*)(_BYTE *, uint64_t))v497)(v385, v195);
              swift_beginAccess(v182, &v510, 33LL, 0LL);
              Dictionary.remove(at:)(&v509, v457, v187, v499, 0LL, v175);
              id v387 = v509;
              swift_endAccess(&v510);

              double v388 = sub_100306904();
              uint64_t v389 = v490;
              v390 = v455;
              uint64_t v391 = v446;
              (*(void (**)(_BYTE *, _BYTE *, uint64_t, double))(v490 + 16))(v455, v386, v446, v388);
              v392 = v501;
              v393 = (os_log_s *)Logger.logObject.getter(v392);
              os_log_type_t v394 = static os_log_type_t.default.getter(v393);
              int v395 = v394;
              if (os_log_type_enabled(v393, v394))
              {
                uint64_t v396 = swift_slowAlloc(32LL, -1LL);
                v501 = (void **)swift_slowAlloc(96LL, -1LL);
                id v510 = v501;
                *(_DWORD *)uint64_t v396 = 136315650;
                LODWORD(v499) = v395;
                id v397 = [v392 uniqueIdentifier];
                uint64_t v398 = static String._unconditionallyBridgeFromObjectiveC(_:)(v397);
                uint64_t v399 = v59;
                unint64_t v401 = v400;

                v509 = (char *)sub_10000235C(v398, v401, (uint64_t *)&v510);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v509, &v510);

                *(void *)&double v402 = swift_bridgeObjectRelease(v401).n128_u64[0];
                *(_WORD *)(v396 + 12) = 2080;
                id v403 = objc_msgSend(v392, "peerAddress", v402);
                WiFiMACAddress.wifiAddress.getter();
                uint64_t v405 = v404;

                unint64_t v406 = v405 & 0xFFFFFFFFFFFFLL;
                uint64_t v59 = v399;
                uint64_t v407 = WiFiAddress.description.getter(v406);
                unint64_t v409 = v408;
                v509 = (char *)sub_10000235C(v407, v408, (uint64_t *)&v510);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v509, &v510);

                swift_bridgeObjectRelease(v409);
                *(_WORD *)(v396 + 22) = 2080;
                v410 = v455;
                uint64_t v411 = DispatchTimeInterval.description.getter();
                unint64_t v413 = v412;
                v509 = (char *)sub_10000235C(v411, v412, (uint64_t *)&v510);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v509, &v510);
                __n128 v414 = swift_bridgeObjectRelease(v413);
                v415 = *(void (**)(_BYTE *, uint64_t, __n128))(v490 + 8);
                v415(v410, v391, v414);
                _os_log_impl( (void *)&_mh_execute_header,  v393,  (os_log_type_t)v499,  "Successfully cleared traffic registration for %s from %s (in recovery for %s)",  (uint8_t *)v396,  0x20u);
                v416 = v501;
                swift_arrayDestroy(v501, 3LL, &type metadata for Any[8]);
                swift_slowDealloc(v416, -1LL, -1LL);
                swift_slowDealloc(v396, -1LL, -1LL);
              }

              else
              {

                v415 = *(void (**)(_BYTE *, uint64_t, __n128))(v389 + 8);
                ((void (*)(_BYTE *, uint64_t))v415)(v390, v391);
              }

              uint64_t v65 = v449;
              v423 = (void (*)(_BYTE *, uint64_t))v500;
              uint64_t v424 = v447;
              v425 = v483;
              v426 = v457;
              uint64_t v427 = v450;
              (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v447 + 16))(v483, v457, v450);
              (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v424 + 56))(v425, 0LL, 1LL, v427);
              sub_100313C9C(v392, (uint64_t)v425, v428, v429);

              v423(v425, v492);
              v498(v426, v427);
              ((void (*)(_BYTE *, uint64_t))v415)(v458, v446);
              ((void (*)(_BYTE *, uint64_t))v497)(v456, v487);
              uint64_t v56 = v502;
            }
          }

          else
          {

            swift_bridgeObjectRelease(v183);
          }
        }

        else
        {
        }

LABEL_104:
        uint64_t v62 = v444;
        goto LABEL_105;
      }

      v501 = (void **)v86;
      uint64_t v87 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v490 + 56);
      v87(v496, 1LL, 1LL, v446);
      uint64_t v88 = (char *)v5 + *(void *)(*v5 + 576LL);
      swift_beginAccess(v88, &aBlock, 0LL, 0LL);
      uint64_t v89 = *(void *)v88;
      uint64_t v90 = *(void *)(*(void *)v88 + 16LL);
      v500 = v88;
      if (v90)
      {
        uint64_t v91 = v85;
        swift_bridgeObjectRetain(v89);
        unint64_t v92 = sub_1003278A0((uint64_t)v501);
        if ((v93 & 1) != 0)
        {
          uint64_t v94 = (_BYTE *)v92;
          uint64_t v95 = (_BYTE *)*(unsigned int *)(v89 + 36);
          swift_bridgeObjectRelease(v89);
          uint64_t v96 = *(void *)v88;
          uint64_t v97 = (_BYTE *)sub_100245750();
          swift_bridgeObjectRetain(v96);
          v497 = v97;
          v441 = v97;
          uint64_t v98 = v465;
          uint64_t v99 = v450;
          Dictionary.subscript.getter(&v510, v465, v94, v95, 0LL, v96, v91, v450, v441);
          swift_bridgeObjectRelease(v96);

          uint64_t v100 = v466;
          sub_1000226B0((uint64_t)&v98[*(int *)(v99 + 36)], (uint64_t)v466, &qword_100405D40);
          v489 = *(char **)(v447 + 8);
          ((void (*)(_BYTE *, uint64_t))v489)(v98, v99);
          uint64_t v101 = v482;
          uint64_t v102 = v487;
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v482 + 48))(v100, 1LL, v487) == 1)
          {
            sub_1000225EC((uint64_t)v100, &qword_100405D40);
          }

          else
          {
            __int128 v251 = *(void (**)(void))(v101 + 32);
            v486 = v94;
            v251();
            type metadata accessor for P2PTimer(0LL);
            __int128 v252 = v479;
            variable initialization expression of AWDLPeer.lastUpdated();
            v485 = v95;
            uint64_t v253 = (uint64_t)v459;
            DispatchTime.distance(to:)(v252);
            __int128 v254 = *(void (**)(_BYTE *, uint64_t))(v101 + 8);
            v254(v252, v102);
            uint64_t v255 = (void (*)(_BYTE *, uint64_t, double))v254;
            uint64_t v256 = (uint64_t)v496;
            sub_1000225EC((uint64_t)v496, &qword_100407450);
            v87((_BYTE *)v253, 0LL, 1LL, v446);
            sub_1000586C0(v253, v256, &qword_100407450);
            swift_beginAccess(v500, &v510, 33LL, 0LL);
            uint64_t v257 = type metadata accessor for Dictionary(0LL, v453, v99, v497);
            v258 = v488;
            Dictionary.remove(at:)(&v509, v488, v486, v485, 0LL, v257);
            ((void (*)(_BYTE *, uint64_t))v489)(v258, v99);
            id v259 = v509;
            swift_endAccess(&v510);

            double v260 = sub_100306904();
            v255(v464, v102, v260);
          }

          uint64_t v56 = v502;
          uint64_t v59 = v452;
          uint64_t v85 = v453;
        }

        else
        {
          swift_bridgeObjectRelease(v89);
        }
      }

      v261 = (void *)((char *)v5 + *(void *)(*v5 + 560LL));
      swift_beginAccess(v261, &v510, 32LL, 0LL);
      uint64_t v262 = *v261;
      v263 = v501;
      v509 = (char *)v501;
      v264 = (void **)sub_100245750();
      v265 = v263;
      v266 = v481;
      v267 = v85;
      uint64_t v268 = v450;
      v501 = v264;
      Dictionary.subscript.getter(&v509, v262, v267, v450);

      swift_endAccess(&v510);
      uint64_t v269 = v447;
      v497 = *(_BYTE **)(v447 + 48);
      LODWORD(v262) = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v497)(v266, 1LL, v268);
      uint64_t v491 = *(void *)(v491 + 8);
      ((void (*)(_BYTE *, uint64_t))v491)(v266, v492);
      if ((_DWORD)v262 != 1)
      {
        v290 = v265;
        uint64_t v291 = swift_retain();
        v292 = (os_log_s *)Logger.logObject.getter(v291);
        os_log_type_t v293 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v292, v293))
        {
          uint64_t v294 = swift_slowAlloc(22LL, -1LL);
          v295 = (void *)swift_slowAlloc(64LL, -1LL);
          v449 = v65;
          v296 = v295;
          id v510 = v295;
          *(_DWORD *)uint64_t v294 = 136315394;
          id v297 = [v290 uniqueIdentifier];
          uint64_t v298 = static String._unconditionallyBridgeFromObjectiveC(_:)(v297);
          unint64_t v300 = v299;

          v509 = (char *)sub_10000235C(v298, v300, (uint64_t *)&v510);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v509, &v510);

          swift_bridgeObjectRelease(v300);
          *(_WORD *)(v294 + 12) = 2080;
          uint64_t v301 = v444;
          uint64_t v302 = WiFiAddress.description.getter(*(unsigned __int16 *)(v444 + v449[5]) | ((unint64_t)*(unsigned int *)(v444 + v449[5] + 2) << 16));
          unint64_t v304 = v303;
          v509 = (char *)sub_10000235C(v302, v303, (uint64_t *)&v510);
          uint64_t v56 = v502;
          uint64_t v62 = v301;
          uint64_t v59 = v452;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v509, &v510);
          swift_release(v56);
          swift_bridgeObjectRelease(v304);
          _os_log_impl( (void *)&_mh_execute_header,  v292,  v293,  "Received a duplicate traffic registration indication for %s from %s",  (uint8_t *)v294,  0x16u);
          swift_arrayDestroy(v296, 2LL, &type metadata for Any[8]);
          v305 = v296;
          uint64_t v65 = v449;
          swift_slowDealloc(v305, -1LL, -1LL);
          swift_slowDealloc(v294, -1LL, -1LL);

          unsigned __int16 v160 = &qword_100407450;
          uint64_t v159 = (uint64_t)v496;
          goto LABEL_34;
        }

        swift_release(v56);
LABEL_86:
        sub_1000225EC((uint64_t)v496, &qword_100407450);
        goto LABEL_104;
      }

      type metadata accessor for P2PTimer(0LL);
      v270 = v265;
      v488 = v261;
      v271 = (char *)v270;
      uint64_t v272 = (uint64_t)v479;
      variable initialization expression of AWDLPeer.lastUpdated();
      uint64_t v273 = (uint64_t)v468;
      v486 = *(_BYTE **)(v482 + 56);
      ((void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))v486)(v468, 1LL, 1LL, v487);
      v274 = v469;
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v493 + 56))(v469, 1LL, 1LL, v494);
      v275 = v483;
      uint64_t v276 = (uint64_t)v274;
      v277 = v271;
      v278 = (uint64_t *)v488;
      sub_100312F78(v272, v273, v276, v499, v495, (uint64_t)v483);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v269 + 56))(v275, 0LL, 1LL, v268);
      v509 = v277;
      swift_beginAccess(v278, &v510, 33LL, 0LL);
      uint64_t v279 = type metadata accessor for Dictionary(0LL, v453, v268, v501);
      Dictionary.subscript.setter(v275, &v509, v279);
      swift_endAccess(&v510);
      id v280 = objc_msgSend(v277, "uniqueIdentifier", sub_100306904());
      swift_beginAccess((char *)v5 + *(void *)(*v5 + 528LL), &v510, 33LL, 0LL);
      sub_1000D32C8(&v509, v280);
      swift_endAccess(&v510);

      id v281 = [v277 uniqueIdentifier];
      LODWORD(v272) = AWDLTrafficRegistrationService.serviceType.getter((uint64_t)v281);

      v282 = v472;
      if ((_DWORD)v272 == 2)
      {
        swift_beginAccess(v278, &v510, 32LL, 0LL);
        uint64_t v283 = *v278;
        v509 = v277;
        v284 = v277;
        v285 = v463;
        uint64_t v286 = v450;
        Dictionary.subscript.getter(&v509, v283, v453, v450);

        if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v497)(v285, 1LL, v286))
        {
          ((void (*)(_BYTE *, uint64_t))v491)(v285, v492);
          swift_endAccess(&v510);
          uint64_t v287 = 1LL;
          uint64_t v288 = v487;
          uint64_t v289 = (uint64_t)v462;
        }

        else
        {
          uint64_t v289 = (uint64_t)v462;
          uint64_t v288 = v487;
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v482 + 16))(v462, v285, v487);
          ((void (*)(_BYTE *, uint64_t))v491)(v285, v492);
          swift_endAccess(&v510);
          uint64_t v287 = 0LL;
        }

        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v486)(v289, v287, 1LL, v288);
        uint64_t v306 = (uint64_t)v5 + *(void *)(*v5 + 512LL);
        swift_beginAccess(v306, &v510, 33LL, 0LL);
        sub_100057104(v289, v306, &qword_100405D40);
        swift_endAccess(&v510);
        *(void *)((char *)v5 + *(void *)(*v5 + 496LL)) = 0LL;
        *((_BYTE *)v5 + *(void *)(*v5 + 504LL)) = 2;
      }

      v307 = v470;
      sub_1000226B0((uint64_t)v496, (uint64_t)v470, &qword_100407450);
      uint64_t v308 = v490;
      uint64_t v309 = v446;
      int v310 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v490 + 48))(v307, 1LL, v446);
      v311 = v471;
      v489 = v277;
      if (v310 == 1)
      {
        sub_1000225EC((uint64_t)v307, &qword_100407450);
        sub_10031301C(v277);
        v312 = v277;
        uint64_t v56 = v502;
        uint64_t v313 = swift_retain();
        v314 = (os_log_s *)Logger.logObject.getter(v313);
        os_log_type_t v315 = static os_log_type_t.default.getter(v314);
        if (os_log_type_enabled(v314, v315))
        {
          uint64_t v316 = swift_slowAlloc(22LL, -1LL);
          uint64_t v499 = swift_slowAlloc(64LL, -1LL);
          id v510 = (id)v499;
          *(_DWORD *)uint64_t v316 = 136315394;
          v497 = (_BYTE *)(v316 + 4);
          id v317 = [v312 uniqueIdentifier];
          v318 = v65;
          v319 = v5;
          uint64_t v320 = static String._unconditionallyBridgeFromObjectiveC(_:)(v317);
          unint64_t v322 = v321;

          uint64_t v323 = v320;
          os_log_type_t v5 = v319;
          uint64_t v65 = v318;
          v509 = (char *)sub_10000235C(v323, v322, (uint64_t *)&v510);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v509, &v510);

          swift_bridgeObjectRelease(v322);
          *(_WORD *)(v316 + 12) = 2080;
          uint64_t v324 = WiFiAddress.description.getter(*(unsigned __int16 *)(v444 + v318[5]) | ((unint64_t)*(unsigned int *)(v444 + v318[5] + 2) << 16));
          unint64_t v326 = v325;
          v509 = (char *)sub_10000235C(v324, v325, (uint64_t *)&v510);
          uint64_t v59 = v452;
          p_os_log_type_t type = (char **)(&stru_100401FF0 + 16);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v509, &v510);
          swift_release(v56);
          swift_bridgeObjectRelease(v326);
          _os_log_impl( (void *)&_mh_execute_header,  v314,  v315,  "Successfully set traffic registration for %s from %s",  (uint8_t *)v316,  0x16u);
          uint64_t v328 = v499;
          swift_arrayDestroy(v499, 2LL, &type metadata for Any[8]);
          swift_slowDealloc(v328, -1LL, -1LL);
          swift_slowDealloc(v316, -1LL, -1LL);

          v329 = (uint64_t *)v500;
LABEL_84:
          v359 = v489;
          id v360 = objc_msgSend(v489, p_type[472]);
          int v361 = AWDLTrafficRegistrationService.serviceType.getter((uint64_t)v360);

          if (v361 != 2)
          {
            sub_1000225EC((uint64_t)v496, &qword_100407450);

            goto LABEL_104;
          }

          uint64_t v362 = *v329;
          __chkstk_darwin();
          *(void *)&v443[-32] = v359;
          *(void *)&v443[-24] = v5;
          v441 = (_BYTE *)v56;
          swift_bridgeObjectRetain(v362);
          uint64_t v363 = Dictionary.filter(_:)(sub_1003330B0, &v443[-48], v362, v453, v450, v501);
          sub_100306D68(v363);

          goto LABEL_86;
        }

        swift_release(v56);
      }

      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v308 + 32))(v282, v307, v309);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v308 + 16))(v311, v282, v309);
        v330 = v277;
        uint64_t v56 = v502;
        uint64_t v331 = swift_retain();
        uint64_t v332 = v308;
        v333 = (os_log_s *)Logger.logObject.getter(v331);
        os_log_type_t v334 = static os_log_type_t.default.getter(v333);
        int v335 = v334;
        if (os_log_type_enabled(v333, v334))
        {
          uint64_t v336 = swift_slowAlloc(32LL, -1LL);
          uint64_t v499 = swift_slowAlloc(96LL, -1LL);
          id v510 = (id)v499;
          *(_DWORD *)uint64_t v336 = 136315650;
          LODWORD(v497) = v335;
          id v337 = [v330 uniqueIdentifier];
          v445 = v5;
          id v338 = v337;
          uint64_t v339 = v59;
          uint64_t v340 = static String._unconditionallyBridgeFromObjectiveC(_:)(v337);
          unint64_t v342 = v341;

          uint64_t v343 = v340;
          uint64_t v59 = v339;
          v509 = (char *)sub_10000235C(v343, v342, (uint64_t *)&v510);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v509, &v510);

          swift_bridgeObjectRelease(v342);
          *(_WORD *)(v336 + 12) = 2080;
          uint64_t v344 = WiFiAddress.description.getter(*(unsigned __int16 *)(v444 + v65[5]) | ((unint64_t)*(unsigned int *)(v444 + v65[5] + 2) << 16));
          unint64_t v346 = v345;
          v509 = (char *)sub_10000235C(v344, v345, (uint64_t *)&v510);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v509, &v510);
          swift_release(v502);
          swift_bridgeObjectRelease(v346);
          *(_WORD *)(v336 + 22) = 2080;
          uint64_t v347 = DispatchTimeInterval.description.getter();
          unint64_t v349 = v348;
          v509 = (char *)sub_10000235C(v347, v348, (uint64_t *)&v510);
          os_log_type_t v5 = v445;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v509, &v510);
          __n128 v350 = swift_bridgeObjectRelease(v349);
          v351 = *(void (**)(_BYTE *, uint64_t, __n128))(v490 + 8);
          v352 = v311;
          uint64_t v353 = v446;
          v351(v352, v446, v350);
          _os_log_impl( (void *)&_mh_execute_header,  v333,  (os_log_type_t)v497,  "Successfully recovered traffic registration for %s from %s (in recovery for %s)",  (uint8_t *)v336,  0x20u);
          uint64_t v354 = v499;
          swift_arrayDestroy(v499, 3LL, &type metadata for Any[8]);
          swift_slowDealloc(v354, -1LL, -1LL);
          uint64_t v355 = v336;
          uint64_t v56 = v502;
          swift_slowDealloc(v355, -1LL, -1LL);

          ((void (*)(_BYTE *, uint64_t))v351)(v472, v353);
          p_os_log_type_t type = (char **)(&stru_100401FF0 + 16);
          v329 = (uint64_t *)v500;
          goto LABEL_84;
        }

        swift_release(v56);

        v356 = *(void (**)(_BYTE *, uint64_t))(v332 + 8);
        v357 = v311;
        uint64_t v358 = v446;
        v356(v357, v446);

        v356(v282, v358);
      }

      v329 = (uint64_t *)v500;
      p_os_log_type_t type = &stru_100401FF0.type;
      goto LABEL_84;
    }
  }

LABEL_120:
        __break(1u);
        return;
      }

      __break(1u);
      goto LABEL_120;
    }

    swift_bridgeObjectRelease(v452);
    uint64_t v205 = swift_retain();
    uint64_t v206 = (os_log_s *)Logger.logObject.getter(v205);
    os_log_type_t v207 = static os_log_type_t.error.getter(v206);
    if (os_log_type_enabled(v206, v207))
    {
      uint64_t v208 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v209 = (void **)swift_slowAlloc(32LL, -1LL);
      Swift::String aBlock = v209;
      *(_DWORD *)uint64_t v208 = 136315138;
      uint64_t v210 = WiFiAddress.description.getter(*(unsigned __int16 *)(v444 + v449[5]) | ((unint64_t)*(unsigned int *)(v444 + v449[5] + 2) << 16));
      unint64_t v212 = v211;
      v509 = (char *)sub_10000235C(v210, v211, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v509, &v510);
      swift_release(v56);
      swift_bridgeObjectRelease(v212);
      _os_log_impl( (void *)&_mh_execute_header,  v206,  v207,  "Peer %s notified about infrastructure disconnect but already presented notification for this session",  v208,  0xCu);
      swift_arrayDestroy(v209, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v209, -1LL, -1LL);
      swift_slowDealloc(v208, -1LL, -1LL);
      sub_100022570(v499, (uint64_t)v497, v492);
      swift_release(v56);
    }

    else
    {
      sub_100022570(v499, (uint64_t)v497, v492);
      swift_release_n(v56, 2LL);
    }
  }

void sub_100311BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  unint64_t v173 = (uint64_t *)type metadata accessor for DispatchTime(0LL);
  uint64_t v174 = *(v173 - 1);
  __chkstk_darwin();
  unint64_t v165 = (char *)&v156 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  double v177 = (char *)&v156 - v7;
  uint64_t v169 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v168 = *(void *)(v169 - 8);
  __chkstk_darwin();
  uint64_t v167 = (uint64_t *)((char *)&v156 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  id v166 = (char *)&v156 - v9;
  uint64_t v10 = type metadata accessor for AWDLPeer(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v172 = (uint64_t)&v156 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v156 - v13;
  uint64_t v15 = *(void *)(v5 + 416);
  unint64_t v163 = *(void *)(v5 + 408);
  uint64_t v162 = v15;
  uint64_t v181 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation(255LL, v163, v15, v16);
  uint64_t v170 = type metadata accessor for Optional(0LL, v181);
  uint64_t v17 = *(void *)(v170 - 8);
  __chkstk_darwin();
  uint64_t v19 = (char *)&v156 - v18;
  sub_100002274((uint64_t *)&unk_10040E540);
  __chkstk_darwin();
  uint64_t v158 = (uint64_t)&v156 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v161 = (uint64_t)&v156 - v21;
  __chkstk_darwin();
  uint64_t v159 = (uint64_t)&v156 - v22;
  __chkstk_darwin();
  uint64_t v157 = (uint64_t)&v156 - v23;
  __chkstk_darwin();
  uint64_t v160 = (uint64_t)&v156 - v24;
  __chkstk_darwin();
  uint64_t v26 = (char *)&v156 - v25;
  unint64_t v164 = a2;
  a2 &= 0xFFFFFFFFFFFFuLL;
  BOOL v27 = sub_100305C50(a2);
  id v183 = WiFiAddress.apiAddress.getter(a2);
  uint64_t v180 = a1;
  sub_100057FE8(a1, (uint64_t)v26, type metadata accessor for AWDLPeer);
  uint64_t v175 = v11;
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t v179 = v10;
  uint64_t v29 = a2;
  BOOL v30 = v27;
  uint64_t v176 = v28;
  v28((uint64_t)v26, 0LL, 1LL, v10);
  uint64_t v31 = *(void *)(*v2 + 424);
  uint64_t v184 = v2;
  uint64_t v32 = (uint64_t *)((char *)v2 + v31);
  swift_beginAccess(v32, v191, 33LL, 0LL);
  uint64_t v178 = v29;
  id v182 = v32;
  sub_1002E94C8((uint64_t)v26, v29);
  swift_endAccess(v191);
  if (!v27)
  {
    uint64_t v33 = AWDLTrafficRegistrationServiceAssistedDiscovery;
    id v34 = objc_allocWithZone(&OBJC_CLASS___AWDLTrafficRegistrationConfiguration);
    uint64_t v35 = [v34 initWithUniqueIdentifier:v33 peerAddress:v183];
    uint64_t v36 = (uint64_t *)((char *)v184 + *(void *)(*v184 + 536));
    swift_beginAccess(v36, v191, 32LL, 0LL);
    uint64_t v37 = *v36;
    char v190 = v35;
    uint64_t v38 = sub_100058CD0(0LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
    sub_100245750();
    uint64_t v39 = v181;
    Dictionary.subscript.getter(&v190, v37, v38, v181);

    swift_endAccess(v191);
    LODWORD(v35) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48LL))(v19, 1LL, v39);
    uint64_t v40 = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v170);
    if ((_DWORD)v35 != 1)
    {
      uint64_t v44 = sub_100304074(v40, v41, v42, v43);
      sub_1002AAB78();
      swift_release(v44);
    }
  }

  LODWORD(v45) = sub_100307ABC();
  sub_100057FE8(v180, (uint64_t)v14, type metadata accessor for AWDLPeer);
  BOOL v171 = v27;
  LODWORD(v170) = v45;
  if (!v27)
  {
    sub_10005802C((uint64_t)v14, type metadata accessor for AWDLPeer);
    uint64_t v47 = (uint64_t)v173;
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v177;
    if ((v45 & 1) != 0)
    {
      unint64_t v51 = sub_100307ABC();
      uint64_t v50 = (uint64_t)v182;
      swift_beginAccess(v182, v191, 33LL, 0LL);
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)v50);
      char v190 = *(void **)v50;
      uint64_t v52 = (uint64_t)v190;
      *(void *)uint64_t v50 = 0x8000000000000000LL;
      uint64_t v54 = sub_100327838( v178,  (void (*)(void *, uint64_t))NANClusterChangeEvent.hash(into:),  (uint64_t (*)(uint64_t, Swift::Int))sub_10001CC98);
      uint64_t v55 = *(void *)(v52 + 16);
      BOOL v56 = (v53 & 1) == 0;
      uint64_t v57 = v55 + v56;
      if (__OFADD__(v55, v56)) {
        goto LABEL_60;
      }
      LOBYTE(v45) = v53;
      if (*(void *)(v52 + 24) >= v57)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          goto LABEL_66;
        }
        goto LABEL_24;
      }

      sub_100240434(v57, isUniquelyReferenced_nonNull_native);
      uint64_t v58 = sub_100327838( v178,  (void (*)(void *, uint64_t))NANClusterChangeEvent.hash(into:),  (uint64_t (*)(uint64_t, Swift::Int))sub_10001CC98);
      if ((v45 & 1) == (v59 & 1))
      {
        uint64_t v54 = v58;
        goto LABEL_24;
      }

      goto LABEL_73;
    }

uint64_t sub_100312F78@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL))(a6, a1, v12);
  uint64_t v14 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation(0LL, a4, a5, v13);
  sub_1000586C0(a2, a6 + *(int *)(v14 + 36), &qword_100405D40);
  return sub_1000586C0(a3, a6 + *(int *)(v14 + 40), qword_100410330);
}

uint64_t sub_10031301C(void *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for AWDLPeer(0LL);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v6 = [a1 uniqueIdentifier];
  char v7 = AWDLTrafficRegistrationService.showsInfraDisconnectUINotifications.getter((uint64_t)v6);

  if ((v7 & 1) != 0)
  {
    sub_1003211B8((char *)a1, 0);
    int v9 = v8;
    int v10 = BYTE1(v8);
    *(_BYTE *)(v2 + *(void *)(*(void *)v2 + 504LL)) = v8;
  }

  else
  {
    int v10 = 2;
    int v9 = 2;
  }

  id v11 = [a1 peerAddress];
  WiFiMACAddress.wifiAddress.getter();
  uint64_t v13 = v12;

  sub_100304FBC(v13 & 0xFFFFFFFFFFFFLL, (uint64_t)v5);
  sub_100323C88(a1, v10, v9, (uint64_t)v5);
  return sub_10005802C((uint64_t)v5, type metadata accessor for AWDLPeer);
}

BOOL sub_100313144(void **a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v133 = a5;
  id v152 = a3;
  uint64_t v136 = a4;
  uint64_t v7 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation( 255LL,  *(void *)(*(void *)a4 + 408LL),  *(void *)(*(void *)a4 + 416LL),  a4);
  uint64_t v132 = type metadata accessor for Optional(0LL, v7);
  uint64_t v131 = *(void *)(v132 - 8);
  __chkstk_darwin();
  unint64_t v130 = (char *)&v123 - v8;
  uint64_t v134 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v143 = *(void *)(v134 - 8);
  __chkstk_darwin();
  uint64_t v142 = (char *)&v123 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  BOOL v145 = (char *)&v123 - v10;
  sub_100002274(&qword_100405D40);
  __chkstk_darwin();
  uint64_t v137 = (uint64_t)&v123 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v148 = type metadata accessor for DispatchTime(0LL);
  uint64_t v138 = *(void *)(v148 - 8);
  __chkstk_darwin();
  char v128 = (char *)&v123 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v135 = (char *)&v123 - v13;
  uint64_t v14 = sub_100058CD0(255LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, v14, v7, "key value ", 0LL);
  uint64_t v154 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  uint64_t v144 = (void **)((char *)&v123 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v141 = (char *)&v123 - v17;
  __chkstk_darwin();
  char v129 = (void **)((char *)&v123 - v18);
  __chkstk_darwin();
  os_log_t v127 = (os_log_t)((char *)&v123 - v19);
  __chkstk_darwin();
  uint64_t v140 = (char *)&v123 - v20;
  __chkstk_darwin();
  uint64_t v139 = (void **)((char *)&v123 - v21);
  __chkstk_darwin();
  uint64_t v126 = (uint64_t *)((char *)&v123 - v22);
  __chkstk_darwin();
  uint64_t v24 = (uint64_t *)((char *)&v123 - v23);
  __chkstk_darwin();
  uint64_t v26 = (uint64_t *)((char *)&v123 - v25);
  uint64_t v27 = __chkstk_darwin();
  uint64_t v29 = *a1;
  BOOL v30 = (char *)&v123 + *(int *)(v27 + 48) - v28;
  char v149 = (char *)&v123 - v28;
  *(uint64_t *)((char *)&v123 - v28) = (uint64_t)v29;
  uint64_t v153 = *(void *)(v7 - 8);
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v153 + 16);
  v31(v30, a2, v7);
  uint64_t v150 = TupleTypeMetadata2;
  uint64_t v151 = v31;
  uint64_t v32 = (char *)v26 + *(int *)(TupleTypeMetadata2 + 48);
  *uint64_t v26 = v29;
  uint64_t v147 = v30;
  uint64_t v33 = v7;
  v31(v32, (uint64_t)v30, v7);
  id v146 = v29;
  id v34 = [v146 uniqueIdentifier];
  id v35 = [v152 uniqueIdentifier];
  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  uint64_t v38 = v37;
  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  uint64_t v41 = v39;
  if (v36 == v40 && v38 == v39)
  {
    int v42 = 1;
    uint64_t v41 = v38;
  }

  else
  {
    int v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v40, v39, 0LL);
  }

  swift_bridgeObjectRelease(v38);
  swift_bridgeObjectRelease(v41);

  uint64_t v43 = *(void (**)(char *, uint64_t))(v153 + 8);
  uint64_t v44 = v33;
  v43(v32, v33);
  if ((v42 & 1) != 0)
  {
    LODWORD(v152) = v42;
    uint64_t v45 = v150;
    char v46 = (void (*)(char *, char *, uint64_t))v151;
    uint64_t v47 = (char *)v24 + *(int *)(v150 + 48);
    uint64_t v48 = v147;
    void *v24 = v146;
    v46(v47, v48, v33);
    uint64_t v49 = v137;
    sub_1000226B0((uint64_t)&v47[*(int *)(v33 + 36)], v137, &qword_100405D40);
    v43(v47, v33);
    uint64_t v50 = v138;
    uint64_t v51 = v148;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v138 + 48))(v49, 1LL, v148) == 1)
    {
      (*(void (**)(char *, uint64_t))(v154 + 8))(v149, v45);
      sub_1000225EC(v49, &qword_100405D40);
    }

    else
    {
      uint64_t v124 = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v135, v49, v51);
      type metadata accessor for P2PTimer(0LL);
      uint64_t v52 = v128;
      variable initialization expression of AWDLPeer.lastUpdated();
      DispatchTime.distance(to:)(v52);
      uint64_t v138 = *(void *)(v50 + 8);
      ((void (*)(char *, uint64_t))v138)(v52, v51);
      char v53 = (os_log_s *)v126;
      uint64_t v54 = (char *)v126 + *(int *)(v45 + 48);
      id v55 = v146;
      *uint64_t v126 = v146;
      v46(v54, v48, v44);
      uint64_t v56 = v154;
      uint64_t v57 = *(void (**)(void **, os_log_t, uint64_t))(v154 + 16);
      v57(v139, v53, v45);
      uint64_t v125 = v44;
      uint64_t v58 = *(void (**)(char *, os_log_t, uint64_t))(v56 + 32);
      v58(v140, v53, v45);
      os_log_t v59 = v127;
      uint64_t v60 = (char *)v127 + *(int *)(v45 + 48);
      *(void *)os_log_t v127 = v55;
      v46(v60, v48, v44);
      unsigned int v61 = v129;
      v57(v129, v59, v45);
      v58(v141, v59, v45);
      uint64_t v62 = v45;
      uint64_t v63 = v134;
      (*(void (**)(char *, char *, uint64_t))(v143 + 16))(v142, v145, v134);
      id v64 = v55;
      uint64_t v65 = v133;
      swift_retain_n(v133, 2LL);
      id v146 = v64;
      uint64_t v66 = (os_log_s *)Logger.logObject.getter(v146);
      os_log_type_t v67 = static os_log_type_t.default.getter(v66);
      int v68 = v67;
      BOOL v69 = os_log_type_enabled(v66, v67);
      char v70 = v144;
      uint64_t v71 = v61;
      if (v69)
      {
        uint64_t v72 = swift_slowAlloc(42LL, -1LL);
        LODWORD(v128) = v68;
        uint64_t v73 = v72;
        uint64_t v137 = swift_slowAlloc(128LL, -1LL);
        uint64_t v158 = v137;
        *(_DWORD *)uint64_t v73 = 136315906;
        os_log_t v127 = v66;
        uint64_t v126 = (void *)(v73 + 4);
        uint64_t v74 = *(int *)(v62 + 48);
        char v75 = (char *)v70 + v74;
        uint64_t v76 = v139;
        uint64_t v77 = (char *)v139 + v74;
        char v78 = *v139;
        *char v70 = *v139;
        uint64_t v79 = v125;
        v151((char *)v70 + v74, (uint64_t)v77, v125);
        id v80 = [v78 uniqueIdentifier];
        v124(v75, v79);
        uint64_t v81 = *(void (**)(void **, uint64_t))(v154 + 8);
        v81(v76, v62);
        uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
        unint64_t v84 = v83;

        uint64_t v156 = sub_10000235C(v82, v84, &v158);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v157);
        __n128 v85 = swift_bridgeObjectRelease(v84);
        ((void (*)(char *, uint64_t, __n128))v81)(v140, v62, v85);
        *(_WORD *)(v73 + 12) = 2080;
        uint64_t v86 = *(int *)(v62 + 48);
        uint64_t v87 = (char *)v144 + v86;
        uint64_t v88 = *v71;
        *uint64_t v144 = *v71;
        v151(v87, (uint64_t)v71 + v86, v125);
        id v89 = [v88 peerAddress];
        WiFiMACAddress.wifiAddress.getter();
        uint64_t v91 = v90;

        v124(v87, v125);
        char v92 = v71;
        uint64_t v93 = v62;
        v81(v92, v62);
        uint64_t v94 = WiFiAddress.description.getter(v91 & 0xFFFFFFFFFFFFLL);
        unint64_t v96 = v95;
        uint64_t v156 = sub_10000235C(v94, v95, &v158);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v157);
        __n128 v97 = swift_bridgeObjectRelease(v96);
        ((void (*)(char *, uint64_t, __n128))v81)(v141, v62, v97);
        uint64_t v98 = v144;
        *(_WORD *)(v73 + 22) = 2080;
        uint64_t v99 = type metadata accessor for AWDLPeer(0LL);
        uint64_t v100 = v133;
        uint64_t v101 = swift_projectBox(v133);
        swift_beginAccess(v101, &v156, 0LL, 0LL);
        uint64_t v102 = WiFiAddress.description.getter(*(unsigned __int16 *)(v101 + *(int *)(v99 + 20)) | ((unint64_t)*(unsigned int *)(v101 + *(int *)(v99 + 20) + 2) << 16));
        unint64_t v104 = v103;
        uint64_t v155 = sub_10000235C(v102, v103, &v158);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156);
        swift_release_n(v100, 2LL);
        swift_bridgeObjectRelease(v104);
        *(_WORD *)(v73 + 32) = 2080;
        int v105 = v142;
        uint64_t v106 = DispatchTimeInterval.description.getter();
        unint64_t v108 = v107;
        uint64_t v155 = sub_10000235C(v106, v107, &v158);
        uint64_t v63 = v134;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156);
        __n128 v109 = swift_bridgeObjectRelease(v108);
        uint64_t v110 = *(void (**)(char *, uint64_t, __n128))(v143 + 8);
        v110(v105, v63, v109);
        os_log_t v111 = v127;
        _os_log_impl( (void *)&_mh_execute_header,  v127,  (os_log_type_t)v128,  "Cleared responder traffic registration for %s from %s (new registration from %s while in recovery for %s)",  (uint8_t *)v73,  0x2Au);
        uint64_t v112 = v137;
        swift_arrayDestroy(v137, 4LL, &type metadata for Any[8]);
        swift_slowDealloc(v112, -1LL, -1LL);
        swift_slowDealloc(v73, -1LL, -1LL);

        uint64_t v113 = v153;
      }

      else
      {
        uint64_t v114 = *(void (**)(void **, uint64_t))(v154 + 8);
        uint64_t v93 = v62;
        v114(v61, v62);
        v114(v139, v62);

        v114((void **)v140, v62);
        v114((void **)v141, v62);
        swift_release_n(v65, 2LL);
        uint64_t v110 = *(void (**)(char *, uint64_t, __n128))(v143 + 8);
        ((void (*)(char *, uint64_t))v110)(v142, v63);
        uint64_t v113 = v153;
        uint64_t v98 = v70;
      }

      unint64_t v115 = (char *)v98 + *(int *)(v93 + 48);
      id v117 = v146;
      uint64_t v116 = v147;
      _BYTE *v98 = v146;
      uint64_t v118 = v125;
      v151(v115, (uint64_t)v116, v125);
      uint64_t v119 = (uint64_t)v130;
      (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v130, v115, v118);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v113 + 56))(v119, 0LL, 1LL, v118);
      sub_100313C9C(v117, v119, v120, v121);
      (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v119, v132);
      ((void (*)(char *, uint64_t))v110)(v145, v63);
      ((void (*)(char *, uint64_t))v138)(v135, v148);
      (*(void (**)(char *, uint64_t))(v154 + 8))(v149, v93);
    }

    LOBYTE(v42) = (_BYTE)v152;
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v154 + 8))(v149, v150);
  }

  return (v42 & 1) == 0;
}

void sub_100313C9C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation( 255LL,  *(void *)(*(void *)v4 + 408LL),  *(void *)(*(void *)v4 + 416LL),  a4);
  uint64_t v9 = type metadata accessor for Optional(0LL, v8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v20 - v11;
  uint64_t v13 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v20 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1LL, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, v8);
    sub_1003239D4(a1, (uint64_t)v15, 0);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v8);
  }

  uint64_t v16 = *(void **)(v5 + *(void *)(*(void *)v5 + 752LL));
  if (v16)
  {
    sub_100058CD0(0LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
    id v17 = a1;
    id v18 = v16;
    char v19 = static NSObject.== infix(_:_:)(v18, v17);

    if ((v19 & 1) != 0) {
      sub_10031C650(v17);
    }
  }

BOOL sub_100313E30(id *a1, uint64_t a2)
{
  id v3 = [*a1 peerAddress];
  WiFiMACAddress.wifiAddress.getter();
  uint64_t v5 = v4;

  swift_beginAccess(a2, v8, 0LL, 0LL);
  uint64_t v6 = type metadata accessor for AWDLPeer(0LL);
  return static NANClusterChangeEvent.__derived_struct_equals(_:_:)( v5 & 0xFFFFFFFFFFFFLL,  *(unsigned __int16 *)(a2 + *(int *)(v6 + 20)) | ((unint64_t)*(unsigned int *)(a2 + *(int *)(v6 + 20)
                                                                                              + 2) << 16));
}

void sub_100313EC8(id *a1, uint64_t a2, uint64_t a3)
{
  id v5 = [*a1 copy];
  _bridgeAnyObjectToAny(_:)(&v48, v5);
  swift_unknownObjectRelease(v5);
  uint64_t v6 = sub_100058CD0(0LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  swift_dynamicCast(&v50, &v48, &type metadata for Any[8], v6, 7LL);
  uint64_t v7 = v50;
  uint64_t v8 = *(void *)AWDLTrafficRegistrationOptions.forceUnicastMasterIndicationFrame.unsafeMutableAddressor();
  unint64_t v9 = (unint64_t)[v7 options];
  if ((v8 & ~v9) != 0) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = 0LL;
  }
  [v7 setOptions:v10 | v9];
  sub_100314480(v7, 1);
  if (v3)
  {
    id v11 = v7;
    swift_retain();
    swift_errorRetain();
    id v12 = v11;
    swift_retain();
    uint64_t v13 = swift_errorRetain();
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      os_log_type_t type = v15;
      uint64_t v16 = swift_slowAlloc(32LL, -1LL);
      int v42 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v45 = swift_slowAlloc(64LL, -1LL);
      uint64_t v50 = (void *)v45;
      *(_DWORD *)uint64_t v16 = 136315650;
      id v17 = [v12 uniqueIdentifier];
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      unint64_t v20 = v19;

      uint64_t v48 = sub_10000235C(v18, v20, (uint64_t *)&v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49);

      swift_bridgeObjectRelease(v20);
      *(_WORD *)(v16 + 12) = 2080;
      uint64_t v21 = type metadata accessor for AWDLPeer(0LL);
      uint64_t v22 = swift_projectBox(a3);
      swift_beginAccess(v22, &v48, 0LL, 0LL);
      uint64_t v23 = WiFiAddress.description.getter(*(unsigned __int16 *)(v22 + *(int *)(v21 + 20)) | ((unint64_t)*(unsigned int *)(v22 + *(int *)(v21 + 20) + 2) << 16));
      unint64_t v25 = v24;
      uint64_t v47 = sub_10000235C(v23, v24, (uint64_t *)&v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      swift_release_n(a3, 2LL);
      swift_bridgeObjectRelease(v25);
      *(_WORD *)(v16 + 22) = 2112;
      swift_errorRetain();
      uint64_t v26 = _swift_stdlib_bridgeErrorToNSError(v3);
      uint64_t v47 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      *int v42 = v26;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v14,  type,  "Failed to recover the traffic registration for %s to %s: %@",  (uint8_t *)v16,  0x20u);
      uint64_t v27 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v42, 1LL, v27);
      swift_slowDealloc(v42, -1LL, -1LL);
      swift_arrayDestroy(v45, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v45, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);

      swift_errorRelease();
    }

    else
    {

      swift_errorRelease();
      swift_release_n(a3, 2LL);

      swift_errorRelease();
      swift_errorRelease();
    }
  }

  else
  {
    id v28 = v7;
    swift_retain_n(a3, 2LL);
    id v29 = v28;
    BOOL v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.default.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      os_log_type_t v46 = v31;
      uint64_t v32 = swift_slowAlloc(22LL, -1LL);
      uint64_t typea = swift_slowAlloc(64LL, -1LL);
      uint64_t v50 = (void *)typea;
      *(_DWORD *)uint64_t v32 = 136315394;
      id v33 = [v29 uniqueIdentifier];
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      unint64_t v36 = v35;

      uint64_t v48 = sub_10000235C(v34, v36, (uint64_t *)&v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49);

      swift_bridgeObjectRelease(v36);
      *(_WORD *)(v32 + 12) = 2080;
      uint64_t v37 = type metadata accessor for AWDLPeer(0LL);
      uint64_t v38 = swift_projectBox(a3);
      swift_beginAccess(v38, &v48, 0LL, 0LL);
      uint64_t v39 = WiFiAddress.description.getter(*(unsigned __int16 *)(v38 + *(int *)(v37 + 20)) | ((unint64_t)*(unsigned int *)(v38 + *(int *)(v37 + 20) + 2) << 16));
      unint64_t v41 = v40;
      uint64_t v47 = sub_10000235C(v39, v40, (uint64_t *)&v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      swift_release_n(a3, 2LL);
      swift_bridgeObjectRelease(v41);
      _os_log_impl( (void *)&_mh_execute_header,  v30,  v46,  "Successfully recovered registration for %s to %s",  (uint8_t *)v32,  0x16u);
      swift_arrayDestroy(typea, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(typea, -1LL, -1LL);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    else
    {
      swift_release_n(a3, 2LL);
    }
  }

void sub_100314480(void *a1, char a2)
{
  uint64_t v70 = *v2;
  id v4 = [a1 uniqueIdentifier];
  unint64_t v5 = (unint64_t)[a1 options];
  id v6 = [a1 uniqueIdentifier];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceRemoteCamera);
  uint64_t v9 = v8;
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  if (v7 == v10 && v9 == v11)
  {

    swift_bridgeObjectRelease_n(v9, 2LL);
  }

  else
  {
    uint64_t v13 = v11;
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);

    swift_bridgeObjectRelease(v9);
    *(void *)&double v15 = swift_bridgeObjectRelease(v13).n128_u64[0];
    if ((v14 & 1) == 0) {
      goto LABEL_11;
    }
  }

  id v16 = AWDLTrafficRegistrationServiceSidecar;

  uint64_t v17 = *(void *)AWDLTrafficRegistrationOptions.remoteCamera.unsafeMutableAddressor();
  if ((v17 & ~v5) == 0) {
    uint64_t v17 = 0LL;
  }
  v5 |= v17;
  id v4 = v16;
LABEL_11:
  id v18 = objc_msgSend(a1, "uniqueIdentifier", v15);
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceTVRemoteCamera);
  uint64_t v21 = v20;
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  uint64_t v24 = v22;
  if (v19 == v23 && v21 == v22)
  {

    swift_bridgeObjectRelease_n(v21, 2LL);
  }

  else
  {
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v23, v22, 0LL);

    swift_bridgeObjectRelease(v21);
    *(void *)&double v26 = swift_bridgeObjectRelease(v24).n128_u64[0];
    if ((v25 & 1) == 0) {
      goto LABEL_18;
    }
  }

  id v27 = AWDLTrafficRegistrationServiceSidecar;

  uint64_t v28 = *(void *)AWDLTrafficRegistrationOptions.tvRemoteCamera.unsafeMutableAddressor();
  if ((v28 & ~v5) == 0) {
    uint64_t v28 = 0LL;
  }
  v5 |= v28;
  id v4 = v27;
LABEL_18:
  id v29 = objc_msgSend(a1, "uniqueIdentifier", v26);
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceRemoteScreen);
  uint64_t v32 = v31;
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  uint64_t v35 = v33;
  if (v30 == v34 && v32 == v33)
  {

    swift_bridgeObjectRelease_n(v32, 2LL);
    id v36 = (id)AWDLTrafficRegistrationServiceSidecar;
  }

  else
  {
    char v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v32, v34, v33, 0LL);

    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v35);
    id v36 = (id)AWDLTrafficRegistrationServiceSidecar;
    if ((v37 & 1) == 0) {
      goto LABEL_25;
    }
  }

  id v36 = v36;

  uint64_t v38 = *(void *)AWDLTrafficRegistrationOptions.remoteScreen.unsafeMutableAddressor();
  if ((v38 & ~v5) == 0) {
    uint64_t v38 = 0LL;
  }
  v5 |= v38;
  id v4 = v36;
LABEL_25:
  uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
  uint64_t v41 = v40;
  uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v44 = v42;
  uint64_t v71 = v4;
  if (v39 == v43 && v41 == v42)
  {
    swift_bridgeObjectRelease_n(v41, 2LL);
  }

  else
  {
    char v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v41, v43, v42, 0LL);
    swift_bridgeObjectRelease(v41);
    swift_bridgeObjectRelease(v44);
    if ((v45 & 1) == 0)
    {
LABEL_33:
      unint64_t v73 = 0LL;
      unsigned __int8 v58 = 1;
      goto LABEL_34;
    }
  }

  uint64_t v46 = *(void *)(v74 + *(void *)(*(void *)v74 + 704LL));
  swift_unownedRetainStrong(v46);
  uint64_t v47 = sub_1002CF2F0();
  uint64_t v49 = v48;
  swift_release(v46);
  if (!v49) {
    goto LABEL_33;
  }
  v75[0] = v47;
  v75[1] = v49;
  swift_bridgeObjectRetain(v49);
  sub_10031CDE8(v75, a1, &v76);
  uint64_t v50 = swift_bridgeObjectRelease_n(v49, 2LL);
  unint64_t v73 = v76 | ((unint64_t)BYTE1(v76) << 8) | ((unint64_t)BYTE2(v76) << 16) | ((unint64_t)BYTE3(v76) << 24) | ((unint64_t)BYTE4(v76) << 32) | ((unint64_t)BYTE5(v76) << 40);
  uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
  os_log_type_t v52 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v51, v52))
  {
    char v53 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v54 = swift_slowAlloc(32LL, -1LL);
    v75[0] = v54;
    *(_DWORD *)char v53 = 136315138;
    uint64_t v55 = WiFiAddress.description.getter(v73);
    unint64_t v57 = v56;
    uint64_t v76 = sub_10000235C(v55, v56, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
    swift_bridgeObjectRelease(v57);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Using SSID hash for traffic registration: %s", v53, 0xCu);
    swift_arrayDestroy(v54, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v54, -1LL, -1LL);
    swift_slowDealloc(v53, -1LL, -1LL);
  }

  unsigned __int8 v58 = 0;
LABEL_34:
  id v59 = [a1 peerAddress];
  WiFiMACAddress.wifiAddress.getter();
  uint64_t v61 = v60;

  id v62 = [a1 preferredChannel];
  id v63 = [a1 secondaryPreferredChannel];
  uint64_t v65 = *(void *)(v70 + 408);
  uint64_t v64 = *(void *)(v70 + 416);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(v64 + 8),  v65,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v64,  v65,  AssociatedTypeWitness,  &protocol requirements base descriptor for AWDLController,  &associated conformance descriptor for AWDLController.P2PControls.Driver: AWDLWiFiDriver);
  int v68 = *(void (**)(void *, uint64_t, void, id, id, unint64_t, unint64_t, void, uint64_t, uint64_t))(AssociatedConformanceWitness + 72);
  uint64_t v69 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  LOBYTE(v75[0]) = v58;
  v68( v71,  v61 & 0xFFFFFFFFFFFFLL,  0LL,  v62,  v63,  v5,  v73 & 0xFFFFFFFFFFFFLL | ((unint64_t)v58 << 48),  a2 & 1,  v69,  AssociatedConformanceWitness);
}

uint64_t sub_100314A6C(void **a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = a2;
  uint64_t v7 = sub_100058CD0(255LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  uint64_t v9 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation(255LL, a3, a4, v8);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, v7, v9, "key value ", 0LL);
  uint64_t v40 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  uint64_t v38 = (void **)((char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = __chkstk_darwin();
  char v14 = (uint64_t *)((char *)&v36 - v13);
  uint64_t v15 = *(int *)(v12 + 48);
  id v16 = (char *)&v36 + v15 - v13;
  char v37 = a1;
  uint64_t v17 = (char *)a1 + v15;
  id v18 = *a1;
  *(uint64_t *)((char *)&v36 - v13) = (uint64_t)*a1;
  uint64_t v19 = *(void *)(v9 - 8);
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  v20(v16, (char *)a1 + v15, v9);
  id v21 = [v18 peerAddress];
  WiFiMACAddress.wifiAddress.getter();
  uint64_t v23 = v22;

  uint64_t v24 = v39;
  swift_beginAccess(v39, v41, 0LL, 0LL);
  uint64_t v25 = type metadata accessor for AWDLPeer(0LL);
  LOBYTE(v23) = static NANClusterChangeEvent.__derived_struct_equals(_:_:)( v23 & 0xFFFFFFFFFFFFLL,  *(unsigned __int16 *)&v24[*(int *)(v25 + 20)] | ((unint64_t)*(unsigned int *)&v24[*(int *)(v25 + 20) + 2] << 16));
  double v26 = *(char **)(v19 + 8);
  id v27 = v38;
  uint64_t v39 = v26;
  ((void (*)(char *, uint64_t))v26)(v16, v9);
  uint64_t v28 = (char *)v27 + *(int *)(TupleTypeMetadata2 + 48);
  id v29 = *v37;
  *id v27 = *v37;
  v20(v28, v17, v9);
  if ((v23 & 1) != 0)
  {
    uint64_t v30 = (char *)v14 + *(int *)(TupleTypeMetadata2 + 48);
    *char v14 = v29;
    v20(v30, v28, v9);
    id v31 = [v29 uniqueIdentifier];
    char v32 = AWDLTrafficRegistrationService.showsInfraDisconnectUINotifications.getter((uint64_t)v31);

    (*(void (**)(void **, uint64_t))(v40 + 8))(v27, TupleTypeMetadata2);
    ((void (*)(char *, uint64_t))v39)(v30, v9);
  }

  else
  {
    uint64_t v33 = *(void (**)(void **, uint64_t))(v40 + 8);
    id v34 = v29;
    v33(v27, TupleTypeMetadata2);
    char v32 = 0;
  }

  return v32 & 1;
}

uint64_t sub_100314CC8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  unint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = Logger.init(subsystem:category:)(0xD000000000000012LL, 0x8000000100360620LL, 6516856LL, 0xE300000000000000LL);
  if (a1)
  {
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v7 = swift_errorRetain();
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v11 = swift_slowAlloc(8LL, -1LL);
      uint64_t v20 = v2;
      uint64_t v12 = (void *)v11;
      *(_DWORD *)uint64_t v10 = 138412290;
      swift_errorRetain();
      uint64_t v13 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v21 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
      *uint64_t v12 = v13;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to add notification request: %@", v10, 0xCu);
      uint64_t v14 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v12, 1LL, v14);
      uint64_t v15 = v12;
      uint64_t v2 = v20;
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v10, -1LL, -1LL);

      swift_errorRelease();
    }

    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }

  else
  {
    id v16 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Successfully added notification request", v18, 2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_100314F3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  __int16 v5 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v6 = (void *)(a2 + *(void *)(*(void *)a2 + 728LL));
  __int16 v7 = *(unsigned __int8 *)(a1 + 17);
  swift_beginAccess(v6, v24, 33LL, 0LL);
  swift_bridgeObjectRetain(v3);
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
  uint64_t v25 = *v6;
  uint64_t v9 = v25;
  *uint64_t v6 = 0x8000000000000000LL;
  __int16 v10 = v5 | (v7 << 8);
  unint64_t v12 = sub_100327A0C(v4, v3, v10);
  uint64_t v13 = *(void *)(v9 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_11;
  }

  char v2 = v11;
  if (*(void *)(v9 + 24) >= v15)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_12;
    }
  }

  else
  {
    sub_100243934(v15, isUniquelyReferenced_nonNull_native);
    uint64_t v9 = v25;
    unint64_t v16 = sub_100327A0C(v4, v3, v10);
    if ((v2 & 1) != (v17 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DNSRecords.Identifier);
      __break(1u);
      return;
    }

    unint64_t v12 = v16;
  }

  while (1)
  {
    uint64_t v18 = *v6;
    *uint64_t v6 = v9;
    swift_bridgeObjectRelease(v18);
    uint64_t v19 = *v6;
    if ((v2 & 1) == 0)
    {
      sub_100245180(v12, v4, v3, v10, 0LL, (void *)*v6);
      swift_bridgeObjectRetain(v3);
    }

    uint64_t v20 = *(void *)(v19 + 56);
    uint64_t v21 = *(void *)(v20 + 8 * v12);
    BOOL v22 = __OFADD__(v21, 1LL);
    uint64_t v23 = v21 + 1;
    if (!v22) {
      break;
    }
LABEL_11:
    __break(1u);
LABEL_12:
    sub_10032C5AC();
    uint64_t v9 = v25;
  }

  *(void *)(v20 + 8 * v12) = v23;
  swift_endAccess(v24);
  swift_bridgeObjectRelease(v3);
}

double sub_1003150D0(uint64_t a1)
{
  uint64_t v514 = a1;
  uint64_t v2 = *v1;
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v482 = *(void *)(v3 - 8);
  uint64_t v483 = v3;
  __chkstk_darwin();
  v481 = (char *)&v478 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v494 = type metadata accessor for AWDLIdleActivity(0LL);
  __chkstk_darwin();
  uint64_t v488 = (uint64_t)&v478 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v520 = (char *)&v478 - v6;
  __chkstk_darwin();
  uint64_t v489 = (uint64_t)&v478 - v7;
  __chkstk_darwin();
  v516 = (char *)&v478 - v8;
  __chkstk_darwin();
  uint64_t v518 = (uint64_t)&v478 - v9;
  uint64_t v11 = *(void *)(v2 + 408);
  uint64_t v10 = *(void *)(v2 + 416);
  uint64_t v504 = v11;
  uint64_t v505 = v10;
  uint64_t v12 = *(void *)(v10 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v12,  v11,  &protocol requirements base descriptor for P2PControls);
  uint64_t v484 = v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v12,  v11,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v15 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v16 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v15,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.PreferencesBacking: PreferencesStorage);
  os_log_t v525 = 0LL;
  uint64_t v18 = type metadata accessor for Preferences(0LL, v15, v16, v17);
  uint64_t v500 = *(void *)(v18 - 8);
  uint64_t v501 = v18;
  __chkstk_darwin();
  uint64_t v499 = (char *)&v478 - v19;
  sub_100002274(&qword_100407450);
  __chkstk_darwin();
  v509 = (char *)&v478 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v498 = (uint64_t)&v478 - v21;
  sub_100002274(&qword_100405D40);
  __chkstk_darwin();
  uint64_t v495 = (char *)&v478 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for DispatchTimeInterval(0LL);
  __chkstk_darwin();
  uint64_t v485 = (uint64_t)&v478 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v503 = (char *)&v478 - v25;
  __chkstk_darwin();
  uint64_t v502 = (char *)&v478 - v26;
  __chkstk_darwin();
  uint64_t v517 = (uint64_t)&v478 - v27;
  __chkstk_darwin();
  uint64_t v492 = (char *)&v478 - v28;
  __chkstk_darwin();
  uint64_t v491 = (char *)&v478 - v29;
  __chkstk_darwin();
  id v31 = (os_log_s **)((char *)&v478 - v30);
  __chkstk_darwin();
  uint64_t v33 = (os_log_s **)((char *)&v478 - v32);
  __chkstk_darwin();
  uint64_t v35 = (uint64_t *)((char *)&v478 - v34);
  __chkstk_darwin();
  char v37 = (uint64_t *)((char *)&v478 - v36);
  __chkstk_darwin();
  uint64_t v39 = (uint64_t *)((char *)&v478 - v38);
  __chkstk_darwin();
  BOOL v545 = 0;
  *(uint64_t *)((char *)&v478 - v40) = 300LL;
  uint64_t v41 = enum case for DispatchTimeInterval.seconds(_:);
  uint64_t v522 = v42;
  uint64_t v43 = *(void (**)(void))(v42 + 104);
  v515 = (char *)&v478 - v40;
  v43();
  *uint64_t v39 = 300LL;
  v521 = v39;
  ((void (*)(void *, uint64_t, uint64_t))v43)(v39, v41, v23);
  void *v37 = 300LL;
  char v512 = v37;
  uint64_t v44 = v37;
  uint64_t v45 = v23;
  uint64_t v46 = v525;
  ((void (*)(void *, uint64_t, uint64_t))v43)(v44, v41, v45);
  *uint64_t v35 = 7200LL;
  v511 = v35;
  ((void (*)(void *, uint64_t, uint64_t))v43)(v35, v41, v45);
  *uint64_t v33 = v46;
  v519 = v33;
  ((void (*)(os_log_s **, uint64_t, uint64_t))v43)(v33, v41, v45);
  *id v31 = v46;
  uint64_t v513 = v31;
  uint64_t v47 = v31;
  uint64_t v48 = v523;
  unsigned int v507 = v41;
  v506 = v43;
  uint64_t v49 = ((uint64_t (*)(os_log_s **, uint64_t, uint64_t))v43)(v47, v41, v45);
  char v53 = sub_100304074(v49, v50, v51, v52);
  sub_1002A8174(&v539);
  swift_release(v53);
  uint64_t v54 = v539;
  uint64_t v56 = type metadata accessor for AWDLDiscoveryEngine.Browse((uint64_t)v46, v504, v505, v55);
  unint64_t v57 = sub_100004DEC();
  LOBYTE(v39) = Dictionary.Keys.isEmpty.getter(v54, &type metadata for DNSRecords.Identifier, v56, v57);
  swift_bridgeObjectRelease(v54);
  uint64_t v510 = v45;
  uint64_t v524 = v56;
  unint64_t v508 = v57;
  if ((v39 & 1) == 0)
  {
    id v62 = sub_100304074(v58, v59, v60, v61);
    sub_1002A81E4(&v539);
    swift_release(v62);
    uint64_t v63 = *(void *)(v539 + 16);
    __n128 v64 = swift_bridgeObjectRelease(v539);
    if (v63)
    {
      uint64_t v65 = v522;
      uint64_t v66 = v515;
      (*(void (**)(char *, uint64_t, __n128))(v522 + 8))(v515, v45, v64);
      *(void *)uint64_t v66 = 3600LL;
      uint64_t v67 = ((uint64_t (*)(char *, void, uint64_t))v506)(v66, v507, v45);
      uint64_t v71 = sub_100304074(v67, v68, v69, v70);
      sub_1002A8174(&v539);
      swift_release(v71);
      uint64_t v72 = v539;
      v537 = (void *)v539;
      uint64_t v73 = type metadata accessor for Dictionary.Keys(0LL, &type metadata for DNSRecords.Identifier, v56, v57);
      uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v73);
      uint64_t v76 = sub_100302E9C( (void (*)(char *, char *))sub_1003333C8,  0LL,  v73,  (uint64_t)&type metadata for String,  (uint64_t)&type metadata for Never,  WitnessTable,  (uint64_t)&protocol witness table for Never,  v75);
      os_log_t v525 = v46;
      swift_bridgeObjectRelease(v72);
      uint64_t v539 = v76;
      uint64_t v77 = sub_100002274((uint64_t *)&unk_100410510);
      v497 = (void *)sub_1000572E4( &qword_10040FEE0,  (uint64_t *)&unk_100410510,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v78 = BidirectionalCollection<>.joined(separator:)(45LL, 0xE100000000000000LL, v77, v497);
      id v80 = v79;
      swift_bridgeObjectRelease(v76);
      uint64_t v539 = 0x203A6573776F7242LL;
      unint64_t v540 = 0xE800000000000000LL;
      v81._countAndFlagsBits = v78;
      v81._object = v80;
      String.append(_:)(v81);
      swift_bridgeObjectRelease(v80);
      unint64_t v82 = v540;
      swift_bridgeObjectRetain(v540);
      v83._countAndFlagsBits = 0x6974726576644120LL;
      v83._object = (void *)0xEC000000203A6573LL;
      String.append(_:)(v83);
      swift_bridgeObjectRelease(v82);
      uint64_t v496 = v539;
      unint64_t v84 = v540;
      id v89 = sub_100304074(v85, v86, v87, v88);
      sub_1002A81E4(&v539);
      swift_release(v89);
      uint64_t v90 = v539;
      int64_t v91 = *(void *)(v539 + 16);
      if (v91)
      {
        unint64_t v490 = v84;
        uint64_t v493 = (void *)v77;
        v537 = _swiftEmptyArrayStorage;
        sub_1000696B4(0, v91, 0);
        char v92 = v537;
        uint64_t v93 = (uint64_t *)(v90 + 40);
        do
        {
          uint64_t v94 = *(v93 - 1);
          uint64_t v95 = *v93;
          v537 = v92;
          unint64_t v97 = v92[2];
          unint64_t v96 = v92[3];
          swift_bridgeObjectRetain(v95);
          if (v97 >= v96 >> 1)
          {
            sub_1000696B4(v96 > 1, v97 + 1, 1);
            char v92 = v537;
          }

          v93 += 3;
          v92[2] = v97 + 1;
          uint64_t v98 = &v92[2 * v97];
          v98[4] = v94;
          v98[5] = v95;
          --v91;
        }

        while (v91);
        swift_bridgeObjectRelease(v90);
        uint64_t v65 = v522;
        uint64_t v48 = v523;
        uint64_t v77 = (uint64_t)v493;
        unint64_t v84 = v490;
      }

      else
      {
        swift_bridgeObjectRelease(v539);
        char v92 = _swiftEmptyArrayStorage;
      }

      uint64_t v480 = 0xD00000000000002ELL;
      uint64_t v539 = (uint64_t)v92;
      uint64_t v190 = BidirectionalCollection<>.joined(separator:)(45LL, 0xE100000000000000LL, v77, v497);
      uint64_t v192 = v191;
      swift_bridgeObjectRelease(v92);
      uint64_t v539 = v496;
      unint64_t v540 = v84;
      swift_bridgeObjectRetain(v84);
      v193._countAndFlagsBits = v190;
      v193._object = v192;
      String.append(_:)(v193);
      swift_bridgeObjectRelease(v84);
      uint64_t v194 = v192;
      goto LABEL_28;
    }
  }

  uint64_t v99 = sub_100304074(v58, v59, v60, v61);
  sub_1002A8174(&v539);
  swift_release(v99);
  uint64_t v100 = v539;
  char v101 = Dictionary.Keys.isEmpty.getter(v539, &type metadata for DNSRecords.Identifier, v56, v57);
  swift_bridgeObjectRelease(v100);
  uint64_t v106 = sub_100304074(v102, v103, v104, v105);
  if ((v101 & 1) != 0)
  {
    sub_1002A81E4(&v539);
    swift_release(v106);
    uint64_t v107 = *(void *)(v539 + 16);
    __n128 v108 = swift_bridgeObjectRelease(v539);
    __n128 v109 = v515;
    uint64_t v65 = v522;
    if (!v107)
    {
      uint64_t v480 = 0xD00000000000002ELL;
      strcpy((char *)v546, "ActiveSocket");
      BYTE5(v546[1]) = 0;
      HIWORD(v546[1]) = -5120;
      BOOL v545 = (sub_100307828((void (*)(uint64_t))sub_10030767C, 300LL) & 1) == 0;
LABEL_29:
      v497 = (void *)0x800000010036AAB0LL;
      uint64_t v189 = (uint64_t)v516;
      goto LABEL_30;
    }

    (*(void (**)(char *, uint64_t, __n128))(v522 + 8))(v515, v45, v108);
    *(void *)__n128 v109 = 3600LL;
    uint64_t v110 = ((uint64_t (*)(char *, void, uint64_t))v506)(v109, v507, v45);
    uint64_t v114 = sub_100304074(v110, v111, v112, v113);
    sub_1002A81E4(&v539);
    swift_release(v114);
    uint64_t v115 = v539;
    int64_t v116 = *(void *)(v539 + 16);
    if (v116)
    {
      v537 = _swiftEmptyArrayStorage;
      sub_1000696B4(0, v116, 0);
      id v117 = v537;
      uint64_t v118 = (uint64_t *)(v115 + 40);
      do
      {
        uint64_t v119 = *(v118 - 1);
        uint64_t v120 = *v118;
        v537 = v117;
        unint64_t v122 = v117[2];
        unint64_t v121 = v117[3];
        swift_bridgeObjectRetain(v120);
        if (v122 >= v121 >> 1)
        {
          sub_1000696B4(v121 > 1, v122 + 1, 1);
          id v117 = v537;
        }

        v118 += 3;
        void v117[2] = v122 + 1;
        uint64_t v123 = &v117[2 * v122];
        v123[4] = v119;
        v123[5] = v120;
        --v116;
      }

      while (v116);
      swift_bridgeObjectRelease(v115);
      uint64_t v65 = v522;
      uint64_t v48 = v523;
    }

    else
    {
      swift_bridgeObjectRelease(v539);
      id v117 = _swiftEmptyArrayStorage;
    }

    uint64_t v480 = 0xD00000000000002ELL;
    uint64_t v539 = (uint64_t)v117;
    uint64_t v195 = sub_100002274((uint64_t *)&unk_100410510);
    uint64_t v196 = sub_1000572E4(&qword_10040FEE0, (uint64_t *)&unk_100410510, (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v197 = BidirectionalCollection<>.joined(separator:)(45LL, 0xE100000000000000LL, v195, v196);
    os_log_type_t v199 = v198;
    swift_bridgeObjectRelease(v117);
    uint64_t v539 = 0x7369747265766441LL;
    unint64_t v540 = 0xEB00000000203A65LL;
    v200._countAndFlagsBits = v197;
    v200._object = v199;
    String.append(_:)(v200);
    uint64_t v194 = v199;
LABEL_28:
    swift_bridgeObjectRelease(v194);
    v546[0] = v539;
    v546[1] = v540;
    BOOL v545 = 0;
    type metadata accessor for P2PTimer(0LL);
    uint64_t v201 = (uint64_t)v495;
    variable initialization expression of AWDLPeer.lastUpdated();
    uint64_t v202 = type metadata accessor for DispatchTime(0LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v202 - 8) + 56LL))(v201, 0LL, 1LL, v202);
    uint64_t v203 = v48 + *(void *)(*(void *)v48 + 616LL);
    swift_beginAccess(v203, &v539, 33LL, 0LL);
    sub_100057104(v201, v203, &qword_100405D40);
    swift_endAccess(&v539);
    goto LABEL_29;
  }

  sub_1002A8174(&v537);
  swift_release(v106);
  uint64_t v124 = v537;
  v536 = v537;
  uint64_t v125 = DNSRecords.Identifier.airplay.unsafeMutableAddressor();
  unint64_t v126 = *((void *)v125 + 1);
  char v127 = v125[16];
  char v128 = v125[17];
  uint64_t v539 = *(void *)v125;
  unint64_t v540 = v126;
  LOBYTE(v54sub_100058090(v4, v0 + 1) = v127;
  BYTE1(v54sub_100058090(v4, v0 + 1) = v128;
  uint64_t v129 = type metadata accessor for Dictionary.Keys(0LL, &type metadata for DNSRecords.Identifier, v56, v57);
  uint64_t v130 = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v129);
  unint64_t v131 = sub_1000FBA58();
  char v132 = Sequence<>.contains(_:)(&v539, v129, v130, v131);
  __n128 v137 = swift_bridgeObjectRelease(v124);
  uint64_t v138 = (uint64_t *)v515;
  if ((v132 & 1) != 0) {
    goto LABEL_21;
  }
  uint64_t v139 = sub_100304074(v133, v134, v135, v136);
  sub_1002A8174(&v537);
  swift_release(v139);
  uint64_t v140 = v537;
  v536 = v537;
  uint64_t v141 = DNSRecords.Identifier.airdrop.unsafeMutableAddressor();
  unint64_t v142 = *((void *)v141 + 1);
  char v143 = v141[16];
  char v144 = v141[17];
  uint64_t v539 = *(void *)v141;
  unint64_t v540 = v142;
  LOBYTE(v54sub_100058090(v4, v0 + 1) = v143;
  BYTE1(v54sub_100058090(v4, v0 + 1) = v144;
  LOBYTE(v139) = Sequence<>.contains(_:)(&v539, v129, v130, v131);
  __n128 v137 = swift_bridgeObjectRelease(v140);
  char v149 = sub_100304074(v145, v146, v147, v148);
  sub_1002A8174(&v537);
  swift_release(v149);
  uint64_t v150 = v537;
  v536 = v537;
  uint64_t v151 = DNSRecords.Identifier.companionLink.unsafeMutableAddressor();
  unint64_t v152 = v151[1];
  char v153 = *((_BYTE *)v151 + 16);
  char v154 = *((_BYTE *)v151 + 17);
  uint64_t v539 = *v151;
  unint64_t v540 = v152;
  LOBYTE(v54sub_100058090(v4, v0 + 1) = v153;
  BYTE1(v54sub_100058090(v4, v0 + 1) = v154;
  LOBYTE(v149) = Sequence<>.contains(_:)(&v539, v129, v130, v131);
  __n128 v137 = swift_bridgeObjectRelease(v150);
  uint64_t v159 = sub_100304074(v155, v156, v157, v158);
  sub_1002A8174(&v537);
  swift_release(v159);
  uint64_t v160 = v537;
  v536 = v537;
  uint64_t v161 = DNSRecords.Identifier.remoteDisplay.unsafeMutableAddressor();
  unint64_t v162 = *((void *)v161 + 1);
  char v163 = v161[16];
  char v164 = v161[17];
  uint64_t v539 = *(void *)v161;
  unint64_t v540 = v162;
  LOBYTE(v54sub_100058090(v4, v0 + 1) = v163;
  BYTE1(v54sub_100058090(v4, v0 + 1) = v164;
  LOBYTE(v159) = Sequence<>.contains(_:)(&v539, v129, v130, v131);
  __n128 v137 = swift_bridgeObjectRelease(v160);
  if ((v159 & 1) != 0)
  {
LABEL_21:
    uint64_t v169 = v510;
    (*(void (**)(uint64_t *, uint64_t, __n128))(v522 + 8))(v138, v510, v137);
    uint64_t v170 = 600LL;
  }

  else
  {
    id v387 = sub_100304074(v165, v166, v167, v168);
    sub_1002A8174(&v537);
    swift_release(v387);
    double v388 = v537;
    v536 = v537;
    uint64_t v389 = DNSRecords.Identifier.assistedDiscovery.unsafeMutableAddressor();
    unint64_t v390 = *((void *)v389 + 1);
    char v391 = v389[16];
    char v392 = v389[17];
    uint64_t v539 = *(void *)v389;
    unint64_t v540 = v390;
    LOBYTE(v54sub_100058090(v4, v0 + 1) = v391;
    BYTE1(v54sub_100058090(v4, v0 + 1) = v392;
    LOBYTE(v387) = Sequence<>.contains(_:)(&v539, v129, v130, v131);
    __n128 v393 = swift_bridgeObjectRelease(v388);
    uint64_t v169 = v510;
    (*(void (**)(uint64_t *, uint64_t, __n128))(v522 + 8))(v138, v510, v393);
    uint64_t v170 = 900LL;
  }

  *uint64_t v138 = v170;
  uint64_t v171 = ((uint64_t (*)(uint64_t *, void, uint64_t))v506)(v138, v507, v169);
  uint64_t v48 = v523;
  uint64_t v175 = sub_100304074(v171, v172, v173, v174);
  sub_1002A8174(&v539);
  swift_release(v175);
  uint64_t v176 = v539;
  v537 = (void *)v539;
  uint64_t v177 = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v129);
  uint64_t v179 = sub_100302E9C( (void (*)(char *, char *))sub_100318BE4,  0LL,  v129,  (uint64_t)&type metadata for String,  (uint64_t)&type metadata for Never,  v177,  (uint64_t)&protocol witness table for Never,  v178);
  os_log_t v525 = v46;
  swift_bridgeObjectRelease(v176);
  uint64_t v539 = v179;
  uint64_t v180 = sub_100002274((uint64_t *)&unk_100410510);
  uint64_t v181 = sub_1000572E4(&qword_10040FEE0, (uint64_t *)&unk_100410510, (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v182 = BidirectionalCollection<>.joined(separator:)(45LL, 0xE100000000000000LL, v180, v181);
  uint64_t v184 = v183;
  swift_bridgeObjectRelease(v179);
  uint64_t v539 = 0x203A6573776F7242LL;
  unint64_t v540 = 0xE800000000000000LL;
  v185._countAndFlagsBits = v182;
  v185._object = v184;
  String.append(_:)(v185);
  swift_bridgeObjectRelease(v184);
  v546[0] = v539;
  v546[1] = v540;
  BOOL v545 = 1;
  type metadata accessor for P2PTimer(0LL);
  uint64_t v186 = (uint64_t)v495;
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v187 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v187 - 8) + 56LL))(v186, 0LL, 1LL, v187);
  uint64_t v188 = v48 + *(void *)(*(void *)v48 + 616LL);
  swift_beginAccess(v188, &v539, 33LL, 0LL);
  sub_100057104(v186, v188, &qword_100405D40);
  swift_endAccess(&v539);
  uint64_t v480 = 0LL;
  v497 = (void *)0xE000000000000000LL;
  uint64_t v189 = (uint64_t)v516;
  uint64_t v65 = v522;
LABEL_30:
  uint64_t v204 = sub_100002274(&qword_10040F240);
  uint64_t inited = swift_initStackObject(v204, v544);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339910;
  uint64_t v206 = DNSRecords.Identifier.dfsMonitoring.unsafeMutableAddressor();
  uint64_t v207 = *((void *)v206 + 1);
  char v208 = v206[16];
  char v209 = v206[17];
  *(void *)(inited + 32) = *(void *)v206;
  *(void *)(inited + 40) = v207;
  *(_BYTE *)(inited + 48) = v208;
  *(_BYTE *)(inited + 49) = v209;
  swift_bridgeObjectRetain(v207);
  uint64_t v210 = DNSRecords.Identifier.testAWDLService.unsafeMutableAddressor();
  uint64_t v211 = *((void *)v210 + 1);
  char v212 = v210[16];
  char v213 = v210[17];
  *(void *)(inited + 56) = *(void *)v210;
  *(void *)(inited + 64) = v211;
  *(_BYTE *)(inited + 72) = v212;
  *(_BYTE *)(inited + 73) = v213;
  swift_bridgeObjectRetain(v211);
  uint64_t v214 = DNSRecords.Identifier.atpAWDLService.unsafeMutableAddressor();
  uint64_t v215 = *((void *)v214 + 1);
  char v216 = v214[16];
  char v217 = v214[17];
  *(void *)(inited + 80) = *(void *)v214;
  *(void *)(inited + 88) = v215;
  *(_BYTE *)(inited + 96) = v216;
  *(_BYTE *)(inited + 97) = v217;
  swift_bridgeObjectRetain(v215);
  uint64_t v218 = sub_100332B50(inited);
  swift_setDeallocating(inited);
  uint64_t v219 = swift_arrayDestroy(inited + 32, 3LL, &type metadata for DNSRecords.Identifier);
  double v223 = sub_100304074(v219, v220, v221, v222);
  sub_1002A8174(&v539);
  swift_release(v223);
  v537 = (void *)v539;
  __chkstk_darwin();
  *(&v478 - 2) = v218;
  uint64_t v224 = type metadata accessor for Dictionary.Keys(0LL, &type metadata for DNSRecords.Identifier, v524, v508);
  uint64_t v225 = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v224);
  uint64_t v486 = v224;
  uint64_t v226 = v224;
  os_log_t v227 = v525;
  LOBYTE(v223) = Sequence.contains(where:)(sub_1003331C8, &v478 - 4, v226, v225);
  os_log_t v487 = v227;
  swift_bridgeObjectRelease(v537);
  if ((v223 & 1) != 0)
  {
    swift_bridgeObjectRelease(v218);
    LODWORD(v508) = 1;
    uint64_t v236 = (uint64_t)v520;
    uint64_t v238 = (uint64_t)v509;
    uint64_t v237 = v510;
    if (!v545)
    {
      char v265 = 0;
      goto LABEL_53;
    }
  }

  else
  {
    uint64_t v524 = v218;
    uint64_t v239 = sub_100304074(v228, v229, v230, v231);
    sub_1002A81E4((uint64_t *)&v537);
    swift_release(v239);
    unint64_t v240 = v537[2];
    LODWORD(v508) = v240 != 0;
    uint64_t v236 = (uint64_t)v520;
    uint64_t v238 = (uint64_t)v509;
    uint64_t v237 = v510;
    if (v240)
    {
      uint64_t v493 = v537 + 4;
      uint64_t v241 = v524;
      os_log_t v525 = (os_log_t)(v524 + 56);
      v479 = v537;
      swift_bridgeObjectRetain(v537);
      uint64_t v242 = 0LL;
      unint64_t v490 = v240;
      do
      {
        if (*(void *)(v241 + 16))
        {
          uint64_t v243 = &v493[3 * v242];
          uint64_t v245 = *v243;
          uint64_t v244 = v243[1];
          int v246 = *((unsigned __int8 *)v243 + 16);
          int v247 = *((unsigned __int8 *)v243 + 17);
          Hasher.init(_seed:)(&v539, *(void *)(v241 + 40));
          Swift::String v248 = String.lowercased()();
          swift_bridgeObjectRetain(v244);
          String.hash(into:)(&v539, v248._countAndFlagsBits, v248._object);
          swift_bridgeObjectRelease(v248._object);
          if (v246) {
            uint64_t v249 = 7365749LL;
          }
          else {
            uint64_t v249 = 7365492LL;
          }
          String.hash(into:)(&v539, v249, 0xE300000000000000LL);
          swift_bridgeObjectRelease(0xE300000000000000LL);
          LODWORD(v496) = v247;
          Hasher._combine(_:)(v247);
          Swift::Int v250 = Hasher._finalize()();
          uint64_t v251 = -1LL << *(_BYTE *)(v241 + 32);
          unint64_t v252 = v250 & ~v251;
          if (((*(void *)((char *)v525 + ((v252 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v252) & 1) != 0)
          {
            uint64_t v253 = *(void *)(v241 + 48) + 24 * v252;
            __int16 v254 = v246;
            uint64_t v256 = *(void *)v253;
            uint64_t v255 = *(void *)(v253 + 8);
            __int16 v257 = *(unsigned __int8 *)(v253 + 16) | (*(unsigned __int8 *)(v253 + 17) << 8);
            __int16 v258 = v254 | ((_WORD)v496 << 8);
            swift_bridgeObjectRetain(v255);
            LOBYTE(v256) = static DNSRecords.Identifier.== infix(_:_:)(v256, v255, v257, v245, v244, v258);
            swift_bridgeObjectRelease(v255);
            if ((v256 & 1) != 0)
            {
LABEL_46:
              v264 = v479;
              swift_bridgeObjectRelease(v479);
              swift_bridgeObjectRelease(v244);
              swift_bridgeObjectRelease(v264);
              swift_bridgeObjectRelease(v524);
              uint64_t v238 = (uint64_t)v509;
              uint64_t v237 = v510;
              uint64_t v65 = v522;
              uint64_t v48 = v523;
              uint64_t v236 = (uint64_t)v520;
              uint64_t v189 = (uint64_t)v516;
              if (!v545) {
                goto LABEL_50;
              }
              goto LABEL_52;
            }

            uint64_t v259 = ~v251;
            while (1)
            {
              unint64_t v252 = (v252 + 1) & v259;
              uint64_t v241 = v524;
              uint64_t v260 = *(void *)(v524 + 48) + 24 * v252;
              uint64_t v261 = *(void *)v260;
              uint64_t v262 = *(void *)(v260 + 8);
              __int16 v263 = *(unsigned __int8 *)(v260 + 16) | (*(unsigned __int8 *)(v260 + 17) << 8);
              swift_bridgeObjectRetain(v262);
              LOBYTE(v26sub_100058090(v4, v0 + 1) = static DNSRecords.Identifier.== infix(_:_:)(v261, v262, v263, v245, v244, v258);
              swift_bridgeObjectRelease(v262);
              if ((v261 & 1) != 0) {
                goto LABEL_46;
              }
            }
          }

          swift_bridgeObjectRelease(v244);
          uint64_t v65 = v522;
          uint64_t v48 = v523;
          uint64_t v236 = (uint64_t)v520;
          uint64_t v189 = (uint64_t)v516;
          unint64_t v240 = v490;
        }

        ++v242;
      }

      while (v242 != v240);
      swift_bridgeObjectRelease(v241);
      uint64_t v232 = swift_bridgeObjectRelease_n(v479, 2LL);
      LODWORD(v508) = 0;
      char v265 = 0;
      uint64_t v238 = (uint64_t)v509;
      uint64_t v237 = v510;
      if (!v545) {
        goto LABEL_53;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v537);
      swift_bridgeObjectRelease(v524);
      if (!v545)
      {
LABEL_50:
        char v265 = 0;
        goto LABEL_53;
      }
    }
  }

id sub_100317790(uint64_t a1, unint64_t a2, unsigned __int16 a3)
{
  unint64_t v3 = HIDWORD(a2) | ((unint64_t)a3 << 32);
  uint64_t v4 = *(void **)(a1 + 8);
  if ((v3 & 0xFF00000000LL) == 0x300000000LL)
  {
    LOWORD(v3) = 0;
    return [v4 softAPChannelChangedEvent:a2 & 1 channelNumber:(unsigned __int16)v3];
  }

  if (HIDWORD(a2) < 0x10000) {
    return [v4 softAPChannelChangedEvent:a2 & 1 channelNumber:(unsigned __int16)v3];
  }
  id result = (id)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  __break(1u);
  return result;
}

void sub_10031784C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  type metadata accessor for AWDLPeer(0LL);
  uint64_t v5 = __chkstk_darwin();
  uint64_t v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v59 = v5;
  uint64_t v8 = *(int *)(v5 + 20);
  uint64_t v60 = a1;
  unint64_t v9 = *(unsigned __int16 *)(a1 + v8) | ((unint64_t)*(unsigned int *)(a1 + v8 + 2) << 16);
  id v10 = WiFiAddress.apiAddress.getter(v9);
  uint64_t v77 = 0LL;
  uint64_t v78 = 0LL;
  uint64_t v11 = (uint64_t *)((char *)v2 + *(void *)(*v2 + 536));
  swift_beginAccess(v11, v76, 0LL, 0LL);
  uint64_t v12 = *v11;
  id v66 = v10;
  uint64_t v67 = v2;
  uint64_t v68 = &v78;
  uint64_t v13 = sub_100058CD0(0LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  uint64_t v14 = *(void *)(v4 + 416);
  uint64_t v57 = *(void *)(v4 + 408);
  uint64_t v56 = v14;
  uint64_t v16 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation(0LL, v57, v14, v15);
  unint64_t v17 = sub_100245750();
  swift_bridgeObjectRetain(v12);
  uint64_t v18 = Dictionary.filter(_:)(sub_100331634, v65, v12, v13, v16, v17);
  sub_1003068A8(v18);
  uint64_t v19 = (uint64_t *)((char *)v2 + *(void *)(*v2 + 560));
  swift_beginAccess(v19, v75, 0LL, 0LL);
  uint64_t v20 = *v19;
  id v58 = v10;
  id v62 = v10;
  unint64_t v21 = v9;
  uint64_t v63 = v2;
  __n128 v64 = &v77;
  swift_bridgeObjectRetain(v20);
  uint64_t v22 = Dictionary.filter(_:)(sub_100331654, v61, v20, v13, v16, v17);
  sub_100306D0C(v22);
  if (v78 > 0 || v77 >= 1)
  {
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc(32LL, -1LL);
      uint64_t v30 = swift_slowAlloc(32LL, -1LL);
      v74[0] = v30;
      *(_DWORD *)uint64_t v29 = 136315650;
      uint64_t v31 = WiFiAddress.description.getter(v21);
      unint64_t v33 = v32;
      uint64_t v71 = sub_10000235C(v31, v32, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
      swift_bridgeObjectRelease(v33);
      *(_WORD *)(v29 + 12) = 2048;
      swift_beginAccess(&v78, &v71, 0LL, 0LL);
      uint64_t v69 = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70);
      *(_WORD *)(v29 + 22) = 2048;
      swift_beginAccess(&v77, &v69, 0LL, 0LL);
      uint64_t v73 = v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
      _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "Aged out %s with total traffic registrations: %ld, total responder traffic registrations: %ld",  (uint8_t *)v29,  0x20u);
      swift_arrayDestroy(v30, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
    }
  }

  uint64_t v34 = sub_100304074(v23, v24, v25, v26);
  uint64_t v35 = v60;
  sub_1002AF0A4(v60);
  uint64_t v36 = swift_release(v34);
  uint64_t v40 = sub_100304074(v36, v37, v38, v39);
  AWDLPeer.init(macAddress:)(v21, (uint64_t)v7);
  uint64_t v41 = v59;
  sub_1002AACFC((uint64_t)v7, *(void *)(v35 + *(int *)(v59 + 80)));
  swift_release(v40);
  sub_10005802C((uint64_t)v7, type metadata accessor for AWDLPeer);
  if (*(_BYTE *)(v35 + *(int *)(v41 + 108)) == 1)
  {
    WiFiAddress.ipv6LinkLocalAddress.getter(v21);
    uint64_t v43 = v42;
    uint64_t v45 = v44;
    uint64_t v47 = v46;
    uint64_t v49 = v48;
    swift_beginAccess((char *)v2 + *(void *)(*v2 + 152), v74, 33LL, 0LL);
    uint64_t v51 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable(0LL, v57, *(void *)(v56 + 8), v50);
    WiFiInterface.NeighborDiscoveryTable.postPeerAbsence(macAddress:ipv6Address:)(v21, v43, v45, v47, v49, v51);
    swift_endAccess(v74);
    swift_bridgeObjectRelease(v49);
  }

  uint64_t v52 = v58;
  char v53 = (uint64_t *)((char *)v2 + *(void *)(*v2 + 744));
  swift_beginAccess(v53, v74, 0LL, 0LL);
  uint64_t v54 = *v53;
  __chkstk_darwin();
  *(&v55 - 2) = v35;
  swift_bridgeObjectRetain(v54);
  sub_1002FF960((void (*)(__int128 *))sub_100331674, (uint64_t)(&v55 - 4), v54);
  swift_bridgeObjectRelease(v54);
}

void sub_100317F14(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = a2;
  uint64_t v3 = type metadata accessor for DriverEvent(0LL);
  __chkstk_darwin();
  uint64_t v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  unint64_t v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchTime(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v15 = (char *)v30 - v14;
  a1 += 16LL;
  swift_beginAccess(a1, v38, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    uint64_t v17 = Strong;
    if (*(void *)(Strong + *(void *)(*(void *)Strong + 656LL)))
    {
      uint64_t v34 = v3;
      uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v15, v35, v10);
      uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
      os_log_type_t v20 = static os_log_type_t.error.getter(v19);
      LODWORD(v35) = v20;
      if (os_log_type_enabled(v19, v20))
      {
        os_log_t v33 = v19;
        unint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v32 = swift_slowAlloc(32LL, -1LL);
        uint64_t v37 = v32;
        *(_DWORD *)unint64_t v21 = 136315138;
        v30[1] = v21 + 12;
        uint64_t v31 = v21;
        v30[0] = v21 + 4;
        type metadata accessor for P2PTimer(0LL);
        variable initialization expression of AWDLPeer.lastUpdated();
        DispatchTime.distance(to:)(v13);
        uint64_t v22 = *(void (**)(char *, uint64_t))(v11 + 8);
        v22(v13, v10);
        uint64_t v23 = DispatchTimeInterval.description.getter();
        unint64_t v25 = v24;
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        uint64_t v36 = sub_10000235C(v23, v25, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
        __n128 v26 = swift_bridgeObjectRelease(v25);
        ((void (*)(char *, uint64_t, __n128))v22)(v15, v10, v26);
        uint64_t v19 = v33;
        uint64_t v27 = v31;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  (os_log_type_t)v35,  "Watchdog reset timed out because it has been in progress since %s",  v31,  0xCu);
        uint64_t v28 = v32;
        swift_arrayDestroy(v32, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v28, -1LL, -1LL);
        swift_slowDealloc(v27, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
      }

      uint64_t v29 = v34;
      *uint64_t v5 = 1;
      swift_storeEnumTagMultiPayload(v5, v29, 4LL);
      sub_10030AAA8((uint64_t)v5);
      swift_release(v17);
      sub_10005802C((uint64_t)v5, type metadata accessor for DriverEvent);
    }

    else
    {
      swift_release(Strong);
    }
  }

void sub_100318238(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = a2;
  uint64_t v3 = type metadata accessor for DriverEvent(0LL);
  __chkstk_darwin();
  uint64_t v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  unint64_t v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchTime(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v15 = (char *)v30 - v14;
  a1 += 16LL;
  swift_beginAccess(a1, v38, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    uint64_t v17 = Strong;
    if (*(void *)(Strong + *(void *)(*(void *)Strong + 672LL)))
    {
      uint64_t v34 = v3;
      uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v15, v35, v10);
      uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
      os_log_type_t v20 = static os_log_type_t.error.getter(v19);
      LODWORD(v35) = v20;
      if (os_log_type_enabled(v19, v20))
      {
        os_log_t v33 = v19;
        unint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v32 = swift_slowAlloc(32LL, -1LL);
        uint64_t v37 = v32;
        *(_DWORD *)unint64_t v21 = 136315138;
        v30[1] = v21 + 12;
        uint64_t v31 = v21;
        v30[0] = v21 + 4;
        type metadata accessor for P2PTimer(0LL);
        variable initialization expression of AWDLPeer.lastUpdated();
        DispatchTime.distance(to:)(v13);
        uint64_t v22 = *(void (**)(char *, uint64_t))(v11 + 8);
        v22(v13, v10);
        uint64_t v23 = DispatchTimeInterval.description.getter();
        unint64_t v25 = v24;
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        uint64_t v36 = sub_10000235C(v23, v25, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
        __n128 v26 = swift_bridgeObjectRelease(v25);
        ((void (*)(char *, uint64_t, __n128))v22)(v15, v10, v26);
        uint64_t v19 = v33;
        uint64_t v27 = v31;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  (os_log_type_t)v35,  "Waiting interface power on timed out because it has been in progress since %s",  v31,  0xCu);
        uint64_t v28 = v32;
        swift_arrayDestroy(v32, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v28, -1LL, -1LL);
        swift_slowDealloc(v27, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
      }

      uint64_t v29 = v34;
      *uint64_t v5 = 5;
      swift_storeEnumTagMultiPayload(v5, v29, 4LL);
      sub_10030AAA8((uint64_t)v5);
      swift_release(v17);
      sub_10005802C((uint64_t)v5, type metadata accessor for DriverEvent);
    }

    else
    {
      swift_release(Strong);
    }
  }

void sub_10031855C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  sub_100318790(*a1, 1u);
  if (v1)
  {
    swift_errorRetain();
    uint64_t v3 = swift_errorRetain();
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc(22LL, -1LL);
      uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v13 = swift_slowAlloc(32LL, -1LL);
      uint64_t v16 = v13;
      *(_DWORD *)uint64_t v6 = 136315394;
      unint64_t v8 = WiFiP2PSPITransactionType.description.getter(v2);
      unint64_t v10 = v9;
      uint64_t v14 = sub_10000235C(v8, v9, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15);
      swift_bridgeObjectRelease(v10);
      *(_WORD *)(v6 + 12) = 2112;
      swift_errorRetain();
      uint64_t v11 = _swift_stdlib_bridgeErrorToNSError(v1);
      uint64_t v14 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15);
      *uint64_t v7 = v11;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to recover transaction %s: %@", (uint8_t *)v6, 0x16u);
      uint64_t v12 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v7, 1LL, v12);
      swift_slowDealloc(v7, -1LL, -1LL);
      swift_arrayDestroy(v13, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_slowDealloc(v6, -1LL, -1LL);
      swift_errorRelease();
    }

    else
    {
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();
    }
  }

void sub_100318790(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v4 = *v2;
  if (a1 == 9)
  {
    uint64_t v6 = *(void *)(v4 + 408);
    uint64_t v5 = *(void *)(v4 + 416);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(v5 + 8),  v6,  &protocol requirements base descriptor for P2PControls);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v5,  v6,  AssociatedTypeWitness,  &protocol requirements base descriptor for AWDLController,  &associated conformance descriptor for AWDLController.P2PControls.Driver: AWDLWiFiDriver);
    unint64_t v9 = *(void (**)(void, uint64_t, uint64_t))(AssociatedConformanceWitness + 112);
    uint64_t v10 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
    v9(a2 & 1, v10, AssociatedConformanceWitness);
  }

  else
  {
    uint64_t v26 = (a1 == 17) & a2;
    id v12 = WiFiP2PSPITransactionType.serviceIdentifier.getter(a1);
    uint64_t v13 = (unsigned __int8 *)WiFiAddress.zero.unsafeMutableAddressor();
    uint64_t v25 = *v13;
    uint64_t v14 = v13[1];
    unint64_t v15 = (unint64_t)*(unsigned int *)(v13 + 2) << 16;
    uint64_t v16 = a1 - 1;
    uint64_t v17 = 1LL;
    switch(v16)
    {
      case 0LL:
        break;
      case 1LL:
        uint64_t v17 = 2LL;
        break;
      case 2LL:
        uint64_t v17 = 3LL;
        break;
      case 3LL:
        uint64_t v17 = 4LL;
        break;
      case 11LL:
        uint64_t v17 = 5LL;
        break;
      case 17LL:
        uint64_t v17 = 6LL;
        break;
      default:
        uint64_t v17 = 0LL;
        break;
    }

    uint64_t v20 = v4 + 408;
    uint64_t v19 = *(void *)(v4 + 408);
    uint64_t v18 = *(void *)(v20 + 8);
    uint64_t v21 = swift_getAssociatedTypeWitness( 255LL,  *(void *)(v18 + 8),  v19,  &protocol requirements base descriptor for P2PControls);
    uint64_t v22 = swift_getAssociatedConformanceWitness( v18,  v19,  v21,  &protocol requirements base descriptor for AWDLController,  &associated conformance descriptor for AWDLController.P2PControls.Driver: AWDLWiFiDriver);
    uint64_t v23 = *(void (**)(id, unint64_t, uint64_t, void, void, uint64_t, uint64_t, void, uint64_t, uint64_t))(v22 + 72);
    uint64_t v24 = swift_checkMetadataState(0LL, v21);
    v23(v12, v25 | (v14 << 8) | v15, v17, 0LL, 0LL, v26, 0x1000000000000LL, a2 & 1, v24, v22);
  }

uint64_t sub_1003189A0(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLPeer(0LL);
  *(_BYTE *)(a1 + *(int *)(result + 10swift_bridgeObjectRelease(*(void *)(v0 + qword_10040F7F8 + 8)) = 0;
  return result;
}

uint64_t sub_1003189CC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 424LL));
  swift_beginAccess(v5, v17, 0LL, 0LL);
  uint64_t v6 = *v5;
  uint64_t v7 = sub_100303874(v6);
  uint64_t v9 = v8;
  uint64_t v10 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v11 = *(unsigned int *)(v6 + 36);
  char v13 = v12 & 1;
  uint64_t v18 = v6;
  uint64_t v19 = v7;
  uint64_t v20 = v8;
  char v21 = v12 & 1;
  uint64_t v22 = v10;
  uint64_t v23 = v11;
  char v24 = 0;
  v15[2] = a1;
  v15[3] = a2;
  uint64_t v16 = v2;
  swift_bridgeObjectRetain(v6);
  sub_1003000F4( (void (*)(void))sub_100333208,  (uint64_t)v15,  &qword_100410528,  (unint64_t)sub_1003333FC,  (void (*)(uint64_t *))sub_1003333F4,  (void (*)(_BYTE *))sub_1003333FC);
  swift_bridgeObjectRelease(v6);
  return sub_100022588(v7, v9, v13);
}

uint64_t sub_100318AC8()
{
  uint64_t v2 = &v10[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v3 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 424LL));
  swift_beginAccess(v3, v11, 0LL, 0LL);
  for (uint64_t result = *v3; *(void *)(*v3 + 16); uint64_t result = *v3)
  {
    uint64_t v5 = sub_100303874(result);
    uint64_t v7 = v6;
    char v9 = v8 & 1;
    swift_beginAccess(v3, v10, 33LL, 0LL);
    sub_10032C864((uint64_t)v2, v5, v7);
    swift_endAccess(v10);
    sub_100022588(v5, v7, v9);
    sub_10031784C((uint64_t)v2);
    sub_10005802C((uint64_t)v2, type metadata accessor for AWDLPeer);
  }

  return result;
}

uint64_t sub_100318BE4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  *a2 = v3;
  a2[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100318C00(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = a3;
  uint64_t v9 = sub_100058CD0(255LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  uint64_t v11 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation(255LL, a4, a5, v10);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, v9, v11, "key value ", 0LL);
  uint64_t v26 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  uint64_t v14 = (uint64_t *)((char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = __chkstk_darwin();
  uint64_t v17 = (char *)&v24 - v16;
  uint64_t v18 = *a1;
  uint64_t v19 = (char *)&v24 + *(int *)(v15 + 48) - v16;
  *(uint64_t *)((char *)&v24 - vswift_unknownObjectWeakDestroy(v0 + 16) = (uint64_t)v18;
  uint64_t v25 = *(void *)(v11 - 8);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  v20(v19, a2, v11);
  sub_100058CD0(0LL, (unint64_t *)&qword_100405DF0, &OBJC_CLASS___NSObject_ptr);
  char v21 = (char *)v14 + *(int *)(TupleTypeMetadata2 + 48);
  *uint64_t v14 = v18;
  v20(v21, (uint64_t)v19, v11);
  id v22 = [v18 peerAddress];
  LOBYTE(v14) = static NSObject.== infix(_:_:)(v22, v27);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v17, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v21, v11);
  return v14 & 1;
}

uint64_t sub_100318DB8(void **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v132 = a3;
  unint64_t v3 = (unint64_t)a2;
  uint64_t v5 = *a2;
  sub_100002274((uint64_t *)&unk_10040E540);
  __chkstk_darwin();
  uint64_t v128 = (uint64_t)&v124 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation( 255LL,  *(void *)(v5 + 408),  *(void *)(v5 + 416),  v7);
  type metadata accessor for Optional(0LL, v8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v124 - v9;
  char v143 = (void (*)(char *, uint64_t, double))sub_100058CD0( 255LL,  (unint64_t *)&unk_10040CC00,  &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  uint64_t v139 = *(void *)(swift_getTupleTypeMetadata2(0LL, v143, v8, "key value ", 0LL) - 8);
  __chkstk_darwin();
  unint64_t v142 = (char *)&v124 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v141 = (void **)((char *)&v124 - v12);
  __chkstk_darwin();
  uint64_t v129 = (uint64_t *)((char *)&v124 - v13);
  __chkstk_darwin();
  uint64_t v135 = (char *)&v124 - v14;
  __chkstk_darwin();
  os_log_t v131 = (os_log_t)((char *)&v124 - v15);
  __chkstk_darwin();
  uint64_t v130 = (void **)((char *)&v124 - v16);
  __chkstk_darwin();
  uint64_t v125 = (uint64_t *)((char *)&v124 - v17);
  uint64_t v147 = __chkstk_darwin();
  uint64_t v19 = *(int *)(v147 + 48);
  uint64_t v20 = (char *)&v124 + v19 - v18;
  char v21 = *a1;
  char v144 = (void **)((char *)&v124 - v18);
  uint64_t v145 = (char *)a1 + v19;
  *(uint64_t *)((char *)&v124 - v18) = (uint64_t)v21;
  id v22 = *(void **)(v8 - 8);
  uint64_t v146 = (void (*)(char *))v22[2];
  v146(v20);
  uint64_t v134 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v22[7];
  v134(v10, 1LL, 1LL, v8);
  char v149 = v21;
  unint64_t v23 = v3 + *(void *)(*(void *)v3 + 552LL);
  swift_beginAccess(v23, v148, 33LL, 0LL);
  unint64_t v24 = sub_100245750();
  uint64_t v25 = type metadata accessor for Dictionary(0LL, v143, v8, v24);
  uint64_t v26 = v21;
  unint64_t v27 = v3;
  uint64_t v138 = v10;
  uint64_t v136 = v25;
  unint64_t v126 = v23;
  Dictionary.subscript.setter(v10, &v149, v25);
  swift_endAccess(v148);
  double v28 = sub_100306904();
  uint64_t v133 = v22;
  char v143 = (void (*)(char *, uint64_t, double))v22[1];
  v143(v20, v8, v28);
  __n128 v137 = a1;
  uint64_t v29 = *a1;
  uint64_t v30 = v140;
  sub_1003010B0(*a1);
  if (!v30)
  {
    unint64_t v142 = 0LL;
    id v66 = (void (*)(char *, char *, uint64_t))v146;
    uint64_t v65 = v147;
    uint64_t v67 = v125;
    uint64_t v68 = (char *)v125 + *(int *)(v147 + 48);
    *uint64_t v125 = v29;
    uint64_t v69 = v145;
    v66(v68, v145, v8);
    uint64_t v70 = v139;
    (*(void (**)(void **, void *, uint64_t))(v139 + 16))(v130, v67, v65);
    (*(void (**)(os_log_t, void *, uint64_t))(v70 + 32))(v131, v67, v65);
    uint64_t v71 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v72 = static os_log_type_t.info.getter();
    int v73 = v72;
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v74 = swift_slowAlloc(22LL, -1LL);
      uint64_t v141 = (void **)swift_slowAlloc(64LL, -1LL);
      v148[0] = (uint64_t)v141;
      *(_DWORD *)uint64_t v74 = 136315394;
      uint64_t v129 = (void *)(v74 + 4);
      uint64_t v75 = *(int *)(v147 + 48);
      uint64_t v76 = v144;
      LODWORD(v140) = v73;
      uint64_t v77 = (char *)v144 + v75;
      uint64_t v78 = v130;
      uint64_t v79 = (char *)v130 + v75;
      id v80 = *v130;
      *char v144 = *v130;
      v66((char *)v76 + v75, v79, v8);
      id v81 = [v80 uniqueIdentifier];
      ((void (*)(char *, uint64_t))v143)(v77, v8);
      unint64_t v82 = *(void (**)(void **, uint64_t))(v70 + 8);
      v82(v78, v147);
      uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
      uint64_t v127 = v8;
      unint64_t v85 = v84;

      char v149 = (void *)sub_10000235C(v83, v85, v148);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150);
      __n128 v86 = swift_bridgeObjectRelease(v85);
      ((void (*)(os_log_t, uint64_t, __n128))v82)(v131, v147, v86);
      *(_WORD *)(v74 + 12) = 2080;
      uint64_t v87 = WiFiAddress.description.getter(v132 & 0xFFFFFFFFFFFFLL);
      unint64_t v89 = v88;
      char v149 = (void *)sub_10000235C(v87, v88, v148);
      uint64_t v8 = v127;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150);
      unint64_t v90 = v89;
      int64_t v91 = v144;
      swift_bridgeObjectRelease(v90);
      _os_log_impl( (void *)&_mh_execute_header,  v71,  (os_log_type_t)v140,  "Successfully recovered traffic registration for %s to %s",  (uint8_t *)v74,  0x16u);
      char v92 = v141;
      swift_arrayDestroy(v141, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v92, -1LL, -1LL);
      uint64_t v93 = v74;
      uint64_t v69 = v145;
      uint64_t v65 = v147;
      swift_slowDealloc(v93, -1LL, -1LL);
    }

    else
    {
      id v117 = *(void (**)(void **, uint64_t))(v70 + 8);
      v117(v130, v65);

      v117((void **)v131, v65);
      int64_t v91 = v144;
    }

    uint64_t v112 = (char *)v91 + *(int *)(v65 + 48);
    uint64_t v118 = *v137;
    *int64_t v91 = *v137;
    v66(v112, v69, v8);
    uint64_t v119 = &v135[*(int *)(v65 + 48)];
    v66(v119, v69, v8);
    uint64_t v120 = v138;
    ((void (*)(char *, char *, uint64_t))v133[4])(v138, v119, v8);
    v134(v120, 0LL, 1LL, v8);
    char v149 = v118;
    swift_beginAccess(v27 + *(void *)(*(void *)v27 + 536LL), v148, 33LL, 0LL);
    unint64_t v121 = v118;
    Dictionary.subscript.setter(v120, &v149, v136);
    swift_endAccess(v148);
    sub_100306904();
    return ((uint64_t (*)(char *, uint64_t))v143)(v112, v8);
  }

  uint64_t v31 = v147;
  uint64_t v32 = v129;
  os_log_t v33 = (char *)v129 + *(int *)(v147 + 48);
  *uint64_t v129 = v29;
  ((void (*)(char *, char *, uint64_t))v146)(v33, v145, v8);
  uint64_t v34 = v139;
  (*(void (**)(void **, void *, uint64_t))(v139 + 16))(v141, v32, v31);
  (*(void (**)(char *, void *, uint64_t))(v34 + 32))(v142, v32, v31);
  swift_errorRetain();
  id v35 = v29;
  uint64_t v36 = swift_errorRetain();
  uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v38 = static os_log_type_t.error.getter(v37);
  int v39 = v38;
  BOOL v40 = os_log_type_enabled(v37, v38);
  uint64_t v127 = v8;
  if (v40)
  {
    uint64_t v41 = swift_slowAlloc(32LL, -1LL);
    os_log_t v131 = v37;
    uint64_t v42 = v34;
    uint64_t v43 = v8;
    uint64_t v44 = v41;
    uint64_t v130 = (void **)swift_slowAlloc(8LL, -1LL);
    uint64_t v140 = swift_slowAlloc(64LL, -1LL);
    v148[0] = v140;
    *(_DWORD *)uint64_t v44 = 136315650;
    uint64_t v125 = (void *)(v44 + 4);
    uint64_t v45 = *(int *)(v31 + 48);
    uint64_t v46 = v144;
    uint64_t v47 = (char *)v144 + v45;
    LODWORD(v129) = v39;
    uint64_t v48 = v141;
    uint64_t v49 = (char *)v141 + v45;
    uint64_t v50 = *v141;
    *char v144 = *v141;
    ((void (*)(char *, char *, uint64_t))v146)((char *)v46 + v45, v49, v43);
    id v51 = [v50 uniqueIdentifier];
    ((void (*)(char *, uint64_t))v143)(v47, v43);
    uint64_t v52 = *(void (**)(void **, uint64_t))(v42 + 8);
    v52(v48, v31);
    uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
    unint64_t v3 = v54;

    char v149 = (void *)sub_10000235C(v53, v3, v148);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150);
    __n128 v55 = swift_bridgeObjectRelease(v3);
    ((void (*)(char *, uint64_t, __n128))v52)(v142, v31, v55);
    *(_WORD *)(v44 + 12) = 2080;
    uint64_t v56 = v132 & 0xFFFFFFFFFFFFLL;
    uint64_t v57 = WiFiAddress.description.getter(v132 & 0xFFFFFFFFFFFFLL);
    unint64_t v59 = v58;
    char v149 = (void *)sub_10000235C(v57, v58, v148);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150);
    swift_bridgeObjectRelease(v59);
    *(_WORD *)(v44 + 22) = 2112;
    LOBYTE(v3) = v44 + 24;
    swift_errorRetain();
    uint64_t v60 = _swift_stdlib_bridgeErrorToNSError(v30);
    char v149 = (void *)v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150);
    uint64_t v61 = v130;
    *uint64_t v130 = (void *)v60;
    swift_errorRelease();
    swift_errorRelease();
    os_log_t v62 = v131;
    _os_log_impl( (void *)&_mh_execute_header,  v131,  (os_log_type_t)v129,  "Failed to recover traffic registration for %s to %s: %@",  (uint8_t *)v44,  0x20u);
    uint64_t v63 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v61, 1LL, v63);
    swift_slowDealloc(v61, -1LL, -1LL);
    uint64_t v64 = v140;
    swift_arrayDestroy(v140, 2LL, &type metadata for Any[8]);
    swift_slowDealloc(v64, -1LL, -1LL);
    swift_slowDealloc(v44, -1LL, -1LL);
  }

  else
  {
    uint64_t v94 = *(void (**)(void **, uint64_t))(v34 + 8);
    v94(v141, v31);

    v94((void **)v142, v31);
    swift_errorRelease();
    swift_errorRelease();
    uint64_t v56 = v132 & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v95 = (void *)(v27 + *(void *)(*(void *)v27 + 424LL));
  swift_beginAccess(v95, v148, 33LL, 0LL);
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v95);
  char v149 = (void *)*v95;
  uint64_t v97 = (uint64_t)v149;
  *uint64_t v95 = 0x8000000000000000LL;
  unint64_t v99 = sub_100327838( v56,  (void (*)(void *, uint64_t))NANClusterChangeEvent.hash(into:),  (uint64_t (*)(uint64_t, Swift::Int))sub_10001CC98);
  uint64_t v100 = *(void *)(v97 + 16);
  BOOL v101 = (v98 & 1) == 0;
  uint64_t v102 = v100 + v101;
  if (__OFADD__(v100, v101))
  {
    __break(1u);
    goto LABEL_19;
  }

  LOBYTE(v3) = v98;
  if (*(void *)(v97 + 24) >= v102)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v98 & 1) != 0)
      {
LABEL_14:
        uint64_t v105 = v149[7];
        uint64_t v106 = type metadata accessor for AWDLPeer(0LL);
        uint64_t v107 = *(void *)(v106 - 8);
        uint64_t v108 = v128;
        sub_100022628(v105 + *(void *)(v107 + 72) * v99, v128, type metadata accessor for AWDLPeer);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v107 + 56))(v108, 0LL, 1LL, v106);
        *(_BYTE *)(v108 + *(int *)(v106 + 112)) = 1;
        sub_10029F08C(v108, 1, (uint64_t *)&v149, v99, v56);
        sub_1000225EC(v108, (uint64_t *)&unk_10040E540);
        *uint64_t v95 = v149;
        swift_endAccess(v148);
        uint64_t v110 = (void (*)(char *, char *, uint64_t))v146;
        uint64_t v109 = v147;
        uint64_t v111 = v145;
        uint64_t v112 = (char *)v144 + *(int *)(v147 + 48);
        uint64_t v113 = *v137;
        *char v144 = *v137;
        uint64_t v8 = v127;
        v110(v112, v111, v127);
        uint64_t v114 = &v135[*(int *)(v109 + 48)];
        v110(v114, v111, v8);
        uint64_t v115 = v138;
        ((void (*)(char *, char *, uint64_t))v133[4])(v138, v114, v8);
        v134(v115, 0LL, 1LL, v8);
        char v149 = v113;
        swift_beginAccess(v126, v148, 33LL, 0LL);
        int64_t v116 = v113;
        Dictionary.subscript.setter(v115, &v149, v136);
        swift_endAccess(v148);
        sub_100306904();
        swift_errorRelease();
        return ((uint64_t (*)(char *, uint64_t))v143)(v112, v8);
      }

uint64_t sub_1003199F4(void **a1, uint64_t a2, os_log_s *a3, uint64_t a4)
{
  uint64_t v150 = a3;
  uint64_t v157 = a2;
  uint64_t v142 = a4;
  uint64_t v5 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation( 255LL,  *(void *)(*(void *)a4 + 408LL),  *(void *)(*(void *)a4 + 416LL),  a4);
  uint64_t v140 = type metadata accessor for Optional(0LL, v5);
  uint64_t v139 = *(void *)(v140 - 8);
  __chkstk_darwin();
  uint64_t v138 = (char *)&v131 - v6;
  uint64_t v7 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v151 = *(void *)(v7 - 8);
  uint64_t v152 = v7;
  __chkstk_darwin();
  char v144 = (char *)&v131 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v145 = (void (*)(char *, uint64_t))((char *)&v131 - v9);
  __chkstk_darwin();
  uint64_t v158 = (uint64_t *)((char *)&v131 - v10);
  __chkstk_darwin();
  char v153 = (char *)&v131 - v11;
  sub_100002274(&qword_100405D40);
  __chkstk_darwin();
  uint64_t v156 = (uint64_t *)((char *)&v131 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v161 = type metadata accessor for DispatchTime(0LL);
  uint64_t v13 = *(void *)(v161 - 8);
  __chkstk_darwin();
  char v149 = (char *)&v131 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v159 = (char *)&v131 - v15;
  uint64_t v16 = sub_100058CD0(255LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, v16, v5, "key value ", 0LL);
  uint64_t v160 = *(void (***)(char *, uint64_t))(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  uint64_t v148 = (char *)&v131 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  char v143 = (void **)((char *)&v131 - v19);
  __chkstk_darwin();
  __n128 v137 = (uint64_t *)((char *)&v131 - v20);
  __chkstk_darwin();
  uint64_t v147 = (char *)&v131 - v21;
  __chkstk_darwin();
  uint64_t v146 = (void **)((char *)&v131 - v22);
  __chkstk_darwin();
  uint64_t v136 = (uint64_t *)((char *)&v131 - v23);
  __chkstk_darwin();
  char v154 = (void **)((char *)&v131 - v24);
  __chkstk_darwin();
  uint64_t v26 = (uint64_t *)((char *)&v131 - v25);
  uint64_t v27 = __chkstk_darwin();
  uint64_t v29 = (char *)&v131 - v28;
  uint64_t v30 = *a1;
  uint64_t v31 = (char *)&v131 + *(int *)(v27 + 48) - v28;
  *(uint64_t *)((char *)&v131 - v28) = (uint64_t)v30;
  uint64_t v32 = *(void *)(v5 - 8);
  os_log_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 16);
  v33(v31, v157, v5);
  uint64_t v157 = TupleTypeMetadata2;
  uint64_t v34 = (char *)v26 + *(int *)(TupleTypeMetadata2 + 48);
  *uint64_t v26 = v30;
  uint64_t v155 = (uint64_t)v31;
  v33(v34, (uint64_t)v31, v5);
  id v35 = (void (*)(void, void))v156;
  sub_1000226B0((uint64_t)&v34[*(int *)(v5 + 36)], (uint64_t)v156, &qword_100405D40);
  uint64_t v135 = v32;
  uint64_t v36 = *(void (**)(char *, uint64_t))(v32 + 8);
  id v37 = v30;
  os_log_type_t v38 = v36;
  uint64_t v39 = v161;
  BOOL v40 = (char *)v37;
  v38(v34, v5);
  if ((*(unsigned int (**)(void (*)(void, void), uint64_t, uint64_t))(v13 + 48))(v35, 1LL, v39) == 1)
  {
    v160[1](v29, v157);

    sub_1000225EC((uint64_t)v35, &qword_100405D40);
    return 0LL;
  }

  uint64_t v134 = v29;
  uint64_t v42 = v13;
  uint64_t v43 = *(void (**)(char *, void (*)(void, void), uint64_t))(v13 + 32);
  uint64_t v141 = v38;
  v43(v159, v35, v39);
  type metadata accessor for P2PTimer(0LL);
  uint64_t v44 = v149;
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v45 = v40;
  uint64_t v46 = v153;
  DispatchTime.distance(to:)(v44);
  uint64_t v156 = *(uint64_t **)(v42 + 8);
  ((void (*)(char *, uint64_t))v156)(v44, v39);
  sub_100058CD0(0LL, (unint64_t *)&qword_100405DF0, &OBJC_CLASS___NSObject_ptr);
  uint64_t v47 = v157;
  uint64_t v48 = v155;
  uint64_t v49 = (char *)v154 + *(int *)(v157 + 48);
  *char v154 = v45;
  uint64_t v133 = v33;
  v33(v49, v48, v5);
  char v149 = v45;
  id v50 = [v45 peerAddress];
  char v51 = static NSObject.== infix(_:_:)(v50, v150);

  v141(v49, v5);
  uint64_t v52 = v151;
  uint64_t v53 = v152;
  unint64_t v54 = *(os_log_s **)(v151 + 16);
  ((void (*)(uint64_t *, char *, uint64_t))v54)(v158, v46, v152);
  __n128 v55 = v46;
  uint64_t v56 = v47;
  if ((v51 & 1) != 0)
  {
    uint64_t v57 = *(void (**)(uint64_t *, uint64_t))(v52 + 8);
    v57(v158, v53);
    unint64_t v58 = v159;
    unint64_t v59 = v134;
    uint64_t v60 = v160;
  }

  else
  {
    uint64_t v150 = v54;
    uint64_t v132 = v5;
    uint64_t v61 = (uint64_t)v145;
    *(void *)uint64_t v145 = 180LL;
    (*(void (**)(uint64_t, void, uint64_t))(v52 + 104))( v61,  enum case for DispatchTimeInterval.seconds(_:),  v53);
    os_log_t v62 = v158;
    BOOL v63 = static DispatchTimeInterval.< infix(_:_:)((uint64_t)v158, v61);
    uint64_t v57 = *(void (**)(uint64_t *, uint64_t))(v52 + 8);
    v57((uint64_t *)v61, v53);
    v57(v62, v53);
    uint64_t v60 = v160;
    if (!v63)
    {
      uint64_t v158 = (uint64_t *)v57;
      uint64_t v64 = v155;
      uint64_t v65 = (char *)v154 + *(int *)(v47 + 48);
      id v66 = v149;
      *char v154 = v149;
      uint64_t v67 = v132;
      v133(v65, v64, v132);
      uint64_t v68 = v135;
      uint64_t v69 = (uint64_t)v138;
      (*(void (**)(char *, char *, uint64_t))(v135 + 32))(v138, v65, v67);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v68 + 56))(v69, 0LL, 1LL, v67);
      uint64_t v70 = v142;
      sub_100313C9C(v66, v69, v71, v72);
      (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v69, v140);
      uint64_t v151 = v70 + *(void *)(*(void *)v70 + 160LL);
      int v73 = v136;
      uint64_t v74 = (char *)v136 + *(int *)(v56 + 48);
      uint64_t v75 = v66;
      *uint64_t v136 = v66;
      uint64_t v76 = v133;
      v133(v74, v155, v67);
      uint64_t v145 = v60[2];
      ((void (*)(void **, void *, uint64_t))v145)(v146, v73, v56);
      uint64_t v77 = v60[4];
      ((void (*)(char *, void *, uint64_t))v77)(v147, v73, v56);
      uint64_t v78 = v137;
      uint64_t v79 = (char *)v137 + *(int *)(v56 + 48);
      *__n128 v137 = v66;
      v76(v79, v155, v67);
      id v80 = v143;
      ((void (*)(void **, void *, uint64_t))v145)(v143, v78, v56);
      ((void (*)(char *, void *, uint64_t))v77)(v148, v78, v56);
      id v81 = v153;
      unint64_t v82 = v144;
      ((void (*)(char *, char *, uint64_t))v150)(v144, v153, v53);
      uint64_t v83 = (os_log_s *)Logger.logObject.getter(v75);
      os_log_type_t v84 = static os_log_type_t.error.getter(v83);
      int v85 = v84;
      if (os_log_type_enabled(v83, v84))
      {
        uint64_t v86 = swift_slowAlloc(32LL, -1LL);
        LODWORD(v15sub_100058090(v4, v0 + 1) = v85;
        uint64_t v87 = v132;
        uint64_t v88 = v86;
        uint64_t v155 = swift_slowAlloc(96LL, -1LL);
        uint64_t v164 = v155;
        *(_DWORD *)uint64_t v88 = 136315650;
        char v149 = (char *)(v88 + 4);
        uint64_t v150 = v83;
        uint64_t v89 = *(int *)(v56 + 48);
        uint64_t v90 = v56;
        int64_t v91 = v154;
        char v92 = (char *)v154 + v89;
        uint64_t v93 = v146;
        uint64_t v94 = (char *)v146 + v89;
        uint64_t v95 = *v146;
        *char v154 = *v146;
        v133((char *)v91 + v89, (uint64_t)v94, v87);
        id v96 = [v95 uniqueIdentifier];
        v141(v92, v87);
        uint64_t v97 = v160[1];
        uint64_t v98 = v90;
        v97((char *)v93, v90);
        unint64_t v99 = v97;
        uint64_t v145 = v97;
        uint64_t v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
        unint64_t v102 = v101;

        uint64_t v162 = sub_10000235C(v100, v102, &v164);
        uint64_t v160 = (void (**)(char *, uint64_t))v163;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, v163);
        __n128 v103 = swift_bridgeObjectRelease(v102);
        ((void (*)(char *, uint64_t, __n128))v99)(v147, v98, v103);
        *(_WORD *)(v88 + 12) = 2080;
        uint64_t v104 = *(int *)(v98 + 48);
        uint64_t v105 = (char *)v91 + v104;
        uint64_t v106 = v143;
        uint64_t v107 = (char *)v143 + v104;
        uint64_t v108 = *v143;
        *int64_t v91 = *v143;
        v133((char *)v91 + v104, (uint64_t)v107, v87);
        id v109 = [v108 peerAddress];
        WiFiMACAddress.wifiAddress.getter();
        uint64_t v111 = v110;

        v141(v105, v87);
        uint64_t v112 = v98;
        uint64_t v113 = v98;
        uint64_t v114 = v145;
        v145((char *)v106, v113);
        uint64_t v115 = WiFiAddress.description.getter(v111 & 0xFFFFFFFFFFFFLL);
        unint64_t v117 = v116;
        uint64_t v162 = sub_10000235C(v115, v116, &v164);
        uint64_t v118 = v160;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, v160);
        __n128 v119 = swift_bridgeObjectRelease(v117);
        ((void (*)(char *, uint64_t, __n128))v114)(v148, v112, v119);
        *(_WORD *)(v88 + 22) = 2080;
        uint64_t v120 = v144;
        uint64_t v121 = DispatchTimeInterval.description.getter();
        unint64_t v123 = v122;
        uint64_t v162 = sub_10000235C(v121, v122, &v164);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, v118);
        __n128 v124 = swift_bridgeObjectRelease(v123);
        uint64_t v125 = v152;
        unint64_t v126 = (void (*)(char *, uint64_t))v158;
        ((void (*)(char *, uint64_t, __n128))v158)(v120, v152, v124);
        os_log_t v127 = v150;
        _os_log_impl( (void *)&_mh_execute_header,  v150,  (os_log_type_t)v151,  "Cleared responder traffic registration for %s from %s (expired while in recovery for %s)",  (uint8_t *)v88,  0x20u);
        uint64_t v128 = v155;
        swift_arrayDestroy(v155, 3LL, &type metadata for Any[8]);
        swift_slowDealloc(v128, -1LL, -1LL);
        swift_slowDealloc(v88, -1LL, -1LL);

        v126(v153, v125);
        ((void (*)(char *, uint64_t))v156)(v159, v161);
        v114(v134, v112);
      }

      else
      {
        uint64_t v129 = v160[1];
        v129((char *)v80, v56);
        v129((char *)v146, v56);

        uint64_t v130 = (void (*)(char *, uint64_t))v158;
        ((void (*)(char *, uint64_t))v158)(v82, v53);
        v129(v148, v56);
        v129(v147, v56);
        v130(v81, v53);
        ((void (*)(char *, uint64_t))v156)(v159, v161);
        v129(v134, v56);
      }

      return 0LL;
    }

    unint64_t v58 = v159;
    unint64_t v59 = v134;
  }

  v57((uint64_t *)v55, v53);
  ((void (*)(char *, uint64_t))v156)(v58, v161);
  v60[1](v59, v47);
  return 1LL;
}

uint64_t sub_10031A510(void **a1, void (*a2)(char *, uint64_t), void *a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v170 = a2;
  uint64_t v157 = a5;
  uint64_t v158 = a3;
  uint64_t v152 = a4;
  uint64_t v6 = *a3;
  uint64_t v159 = type metadata accessor for DispatchTimeInterval(0LL);
  unint64_t v162 = *(void *)(v159 - 8);
  __chkstk_darwin();
  uint64_t v161 = (uint64_t *)((char *)&v139 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v166 = (char *)&v139 - v8;
  sub_100002274(&qword_100405D40);
  __chkstk_darwin();
  uint64_t v164 = (void (*)(char *, char *, uint64_t))((char *)&v139 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v168 = type metadata accessor for DispatchTime(0LL);
  uint64_t v165 = *(void *)(v168 - 8);
  __chkstk_darwin();
  char v154 = (char *)&v139 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  char v163 = (char *)&v139 - v11;
  uint64_t v12 = sub_100058CD0(255LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  uint64_t v13 = *(void *)(v6 + 416);
  uint64_t v149 = *(void *)(v6 + 408);
  uint64_t v148 = v13;
  uint64_t v15 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation(255LL, v149, v13, v14);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, v12, v15, "key value ", 0LL);
  uint64_t v156 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  uint64_t v147 = (char *)&v139 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v150 = (void **)((char *)&v139 - v18);
  __chkstk_darwin();
  uint64_t v146 = (void **)((char *)&v139 - v19);
  __chkstk_darwin();
  uint64_t v160 = (void **)((char *)&v139 - v20);
  __chkstk_darwin();
  uint64_t v155 = (void **)((char *)&v139 - v21);
  __chkstk_darwin();
  char v153 = (char *)&v139 - v22;
  __chkstk_darwin();
  uint64_t v24 = (void **)((char *)&v139 - v23);
  __chkstk_darwin();
  uint64_t v26 = (void **)((char *)&v139 - v25);
  sub_100058CD0(0LL, (unint64_t *)&qword_100405DF0, &OBJC_CLASS___NSObject_ptr);
  uint64_t v27 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v28 = (char *)v26 + v27;
  uint64_t v29 = (char *)a1 + v27;
  uint64_t v167 = a1;
  uint64_t v30 = *a1;
  uint64_t v151 = v26;
  *uint64_t v26 = v30;
  uint64_t v31 = *(void *)(v15 - 8);
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
  v32(v28, v29, v15);
  id v33 = [v30 peerAddress];
  LOBYTE(v6) = static NSObject.== infix(_:_:)(v33, v170);

  uint64_t v34 = *(uint64_t (**)(char *, uint64_t))(v31 + 8);
  uint64_t v35 = v15;
  uint64_t result = v34(v28, v15);
  if ((v6 & 1) == 0) {
    return result;
  }
  uint64_t v37 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v170 = (void (*)(char *, uint64_t))v34;
  os_log_type_t v38 = (char *)v24 + v37;
  char *v24 = *v167;
  v32((char *)v24 + v37, v29, v15);
  uint64_t v39 = v164;
  sub_1000226B0((uint64_t)&v38[*(int *)(v15 + 36)], (uint64_t)v164, &qword_100405D40);
  v170(v38, v15);
  uint64_t v40 = v165;
  uint64_t v41 = v168;
  (*(void (**)(char *, void, uint64_t))(v40 + 32))(v163, v39, v41);
  type metadata accessor for P2PTimer(0LL);
  uint64_t v42 = v154;
  variable initialization expression of AWDLPeer.lastUpdated();
  DispatchTime.distance(to:)(v42);
  uint64_t v165 = *(void *)(v40 + 8);
  ((void (*)(char *, uint64_t))v165)(v42, v41);
  uint64_t v43 = (char *)v158 + *(void *)(*v158 + 160LL);
  uint64_t v44 = v153;
  uint64_t v45 = &v153[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v46 = *v167;
  *(void *)char v153 = *v167;
  char v143 = v29;
  uint64_t v164 = v32;
  v32(v45, v29, v15);
  uint64_t v48 = v155;
  uint64_t v47 = v156;
  uint64_t v142 = *(void (**)(void **, char *, uint64_t))(v156 + 16);
  v142(v155, v44, TupleTypeMetadata2);
  char v153 = *(char **)(v47 + 32);
  ((void (*)(void **, char *, uint64_t))v153)(v160, v44, TupleTypeMetadata2);
  uint64_t v49 = TupleTypeMetadata2;
  uint64_t v50 = v35;
  uint64_t v51 = v159;
  (*(void (**)(uint64_t *, char *, uint64_t))(v162 + 16))(v161, v166, v159);
  id v52 = v46;
  char v154 = v43;
  uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
  os_log_type_t v54 = static os_log_type_t.default.getter(v53);
  int v55 = v54;
  BOOL v56 = os_log_type_enabled(v53, v54);
  uint64_t v145 = v49;
  uint64_t v144 = v50;
  if (!v56)
  {
    uint64_t v95 = *(void (**)(void **, uint64_t))(v47 + 8);
    v95(v48, v49);

    id v96 = v160;
    uint64_t v160 = (void **)v95;
    v95(v96, v49);
    uint64_t v79 = *(uint64_t (**)(uint64_t *, uint64_t))(v162 + 8);
    uint64_t v83 = v79(v161, v51);
    uint64_t v68 = v168;
    os_log_type_t v84 = v169;
    int v85 = v157;
    unint64_t v82 = (uint64_t (*)(char *, uint64_t))v165;
    if ((*v157 & 1) == 0) {
      goto LABEL_7;
    }
LABEL_10:
    v79((uint64_t *)v166, v51);
    return v82(v163, v68);
  }

  uint64_t v57 = swift_slowAlloc(32LL, -1LL);
  uint64_t v141 = swift_slowAlloc(96LL, -1LL);
  uint64_t v173 = (void **)v141;
  *(_DWORD *)uint64_t v57 = 136315650;
  uint64_t v139 = v57 + 4;
  uint64_t v58 = *(int *)(v49 + 48);
  unint64_t v59 = v151;
  int v140 = v55;
  uint64_t v60 = (char *)v151 + v58;
  uint64_t v61 = *v48;
  *uint64_t v151 = *v48;
  v164((char *)v59 + v58, (char *)v48 + v58, v50);
  id v62 = [v61 uniqueIdentifier];
  v170(v60, v50);
  BOOL v63 = *(void (**)(void **, uint64_t))(v47 + 8);
  v63(v48, v49);
  uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
  unint64_t v66 = v65;

  uint64_t v171 = sub_10000235C(v64, v66, (uint64_t *)&v173);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172);
  unint64_t v67 = v66;
  uint64_t v68 = v168;
  __n128 v69 = swift_bridgeObjectRelease(v67);
  uint64_t v70 = v160;
  uint64_t v160 = (void **)v63;
  ((void (*)(void **, uint64_t, __n128))v63)(v70, v49, v69);
  *(_WORD *)(v57 + 12) = 2080;
  uint64_t v71 = WiFiAddress.description.getter(v152 & 0xFFFFFFFFFFFFLL);
  unint64_t v73 = v72;
  uint64_t v171 = sub_10000235C(v71, v72, (uint64_t *)&v173);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172);
  swift_bridgeObjectRelease(v73);
  *(_WORD *)(v57 + 22) = 2080;
  uint64_t v51 = v159;
  uint64_t v74 = v161;
  uint64_t v75 = DispatchTimeInterval.description.getter();
  unint64_t v77 = v76;
  uint64_t v171 = sub_10000235C(v75, v76, (uint64_t *)&v173);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172);
  __n128 v78 = swift_bridgeObjectRelease(v77);
  uint64_t v79 = *(uint64_t (**)(uint64_t *, uint64_t))(v162 + 8);
  ((void (*)(uint64_t *, uint64_t, __n128))v79)(v74, v51, v78);
  _os_log_impl( (void *)&_mh_execute_header,  v53,  (os_log_type_t)v140,  "Attempting to recover responder traffic registration for %s from %s (in recovery for %s)",  (uint8_t *)v57,  0x20u);
  uint64_t v80 = v141;
  swift_arrayDestroy(v141, 3LL, &type metadata for Any[8]);
  swift_slowDealloc(v80, -1LL, -1LL);
  uint64_t v81 = v57;
  unint64_t v82 = (uint64_t (*)(char *, uint64_t))v165;
  swift_slowDealloc(v81, -1LL, -1LL);

  os_log_type_t v84 = v169;
  int v85 = v157;
  if ((*v157 & 1) != 0) {
    goto LABEL_10;
  }
LABEL_7:
  uint64_t v86 = (os_log_s *)Logger.logObject.getter(v83);
  os_log_type_t v87 = static os_log_type_t.info.getter();
  BOOL v88 = os_log_type_enabled(v86, v87);
  uint64_t v169 = v79;
  if (v88)
  {
    uint64_t v89 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v90 = swift_slowAlloc(32LL, -1LL);
    uint64_t v173 = (void **)v90;
    *(_DWORD *)uint64_t v89 = 136315138;
    uint64_t v91 = v152 & 0xFFFFFFFFFFFFLL;
    uint64_t v92 = WiFiAddress.description.getter(v152 & 0xFFFFFFFFFFFFLL);
    unint64_t v94 = v93;
    uint64_t v171 = sub_10000235C(v92, v93, (uint64_t *)&v173);
    int v85 = v157;
    uint64_t v51 = v159;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172);
    swift_bridgeObjectRelease(v94);
    _os_log_impl( (void *)&_mh_execute_header,  v86,  v87,  "Attempting to send responder traffic registration recovery frame to %s",  v89,  0xCu);
    swift_arrayDestroy(v90, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v90, -1LL, -1LL);
    swift_slowDealloc(v89, -1LL, -1LL);
  }

  else
  {

    uint64_t v91 = v152 & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v97 = v150;
  uint64_t v98 = v149;
  uint64_t v99 = v148;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(v148 + 8),  v149,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v99,  v98,  AssociatedTypeWitness,  &protocol requirements base descriptor for AWDLController,  &associated conformance descriptor for AWDLController.P2PControls.Driver: AWDLWiFiDriver);
  unint64_t v102 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
  uint64_t v103 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  uint64_t v104 = v84;
  v102(31LL, v91, v103, AssociatedConformanceWitness);
  if (v84)
  {
    unint64_t v162 = v91;
    uint64_t v105 = v145;
    uint64_t v106 = v146;
    uint64_t v107 = (char *)v146 + *(int *)(v145 + 48);
    uint64_t v108 = *v167;
    *uint64_t v146 = *v167;
    uint64_t v109 = v144;
    v164(v107, v143, v144);
    v142(v97, (char *)v106, v105);
    uint64_t v110 = v147;
    ((void (*)(char *, void **, uint64_t))v153)(v147, v106, v105);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v111 = (os_log_s *)Logger.logObject.getter(v108);
    os_log_type_t v112 = static os_log_type_t.error.getter(v111);
    int v113 = v112;
    BOOL v114 = os_log_type_enabled(v111, v112);
    uint64_t v115 = v168;
    if (v114)
    {
      uint64_t v116 = swift_slowAlloc(32LL, -1LL);
      uint64_t v161 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v167 = (void **)swift_slowAlloc(64LL, -1LL);
      uint64_t v173 = v167;
      *(_DWORD *)uint64_t v116 = 136315650;
      uint64_t v158 = (void *)(v116 + 4);
      uint64_t v117 = *(int *)(v105 + 48);
      uint64_t v118 = v151;
      LODWORD(v159) = v113;
      __n128 v119 = (char *)v151 + v117;
      uint64_t v120 = (char *)v97 + v117;
      uint64_t v121 = v97;
      unint64_t v122 = *v97;
      *uint64_t v151 = v122;
      v164((char *)v118 + v117, v120, v109);
      id v123 = [v122 uniqueIdentifier];
      v170(v119, v109);
      __n128 v124 = (void (*)(char *, uint64_t, __n128))v160;
      ((void (*)(void **, uint64_t))v160)(v121, v105);
      uint64_t v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(v123);
      unint64_t v127 = v126;

      uint64_t v171 = sub_10000235C(v125, v127, (uint64_t *)&v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172);
      __n128 v128 = swift_bridgeObjectRelease(v127);
      v124(v147, v105, v128);
      *(_WORD *)(v116 + 12) = 2080;
      uint64_t v129 = WiFiAddress.description.getter(v162);
      unint64_t v131 = v130;
      uint64_t v171 = sub_10000235C(v129, v130, (uint64_t *)&v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172);
      swift_bridgeObjectRelease(v131);
      *(_WORD *)(v116 + 22) = 2112;
      swift_errorRetain();
      uint64_t v132 = _swift_stdlib_bridgeErrorToNSError(v104);
      uint64_t v171 = v132;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172);
      uint64_t v133 = v161;
      *uint64_t v161 = v132;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v111,  (os_log_type_t)v159,  "Failed to send responder traffic registration recovery frame for %s to %s: %@",  (uint8_t *)v116,  0x20u);
      uint64_t v134 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v133, 1LL, v134);
      swift_slowDealloc(v133, -1LL, -1LL);
      uint64_t v135 = v167;
      swift_arrayDestroy(v167, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v135, -1LL, -1LL);
      swift_slowDealloc(v116, -1LL, -1LL);

      swift_errorRelease();
      v169((uint64_t *)v166, v51);
      uint64_t v136 = v163;
      uint64_t v137 = v168;
    }

    else
    {
      uint64_t v138 = (void (*)(char *, uint64_t))v160;
      ((void (*)(void **, uint64_t))v160)(v97, v105);

      swift_errorRelease();
      swift_errorRelease();
      v138(v110, v105);
      swift_errorRelease();
      v169((uint64_t *)v166, v51);
      uint64_t v136 = v163;
      uint64_t v137 = v115;
    }

    return ((uint64_t (*)(char *, uint64_t))v165)(v136, v137);
  }

  else
  {
    v169((uint64_t *)v166, v51);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v165)(v163, v168);
    _BYTE *v85 = 1;
  }

  return result;
}

void sub_10031B204(uint64_t *a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = (uint64_t *)(a4 + *(void *)(*(void *)a4 + 424LL));
  swift_beginAccess(v7, v11, 33LL, 0LL);
  uint64_t v8 = *v7;
  *uint64_t v7 = 0x8000000000000000LL;
  if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
  {
    sub_10032BCD8(type metadata accessor for AWDLPeer, &qword_10040CCB8);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  if (v5 < 0 || v5 >= 1LL << *(_BYTE *)(v8 + 32))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (((*(void *)(v8 + (((unint64_t)v5 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> v5) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if (*(_DWORD *)(v8 + 36) == (_DWORD)v6)
  {
    uint64_t v9 = *(void *)(v8 + 56);
    uint64_t v10 = type metadata accessor for AWDLPeer(0LL);
    a2(v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * v5);
    *uint64_t v7 = v8;
    swift_endAccess(v11);
    return;
  }

uint64_t sub_10031B324(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100058CD0(255LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  uint64_t v10 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation(255LL, a3, a4, v9);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, v8, v10, "key value ", 0LL);
  uint64_t v35 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  uint64_t v13 = (uint64_t *)((char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = __chkstk_darwin();
  uint64_t v16 = (char *)&v34 - v15;
  uint64_t v17 = *a1;
  uint64_t v18 = (char *)&v34 + *(int *)(v14 + 48) - v15;
  *(uint64_t *)((char *)&v34 - v15) = (uint64_t)v17;
  uint64_t v19 = *(void *)(v10 - 8);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v20(v18, a2, v10);
  uint64_t v21 = (char *)v13 + *(int *)(TupleTypeMetadata2 + 48);
  *uint64_t v13 = v17;
  v20(v21, (uint64_t)v18, v10);
  id v22 = [v17 uniqueIdentifier];
  uint64_t v23 = AWDLTrafficRegistrationServiceAssistedDiscovery;
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  uint64_t v26 = v25;
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  uint64_t v29 = v28;
  if (v24 == v27 && v26 == v28) {
    char v31 = 1;
  }
  else {
    char v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v26, v27, v28, 0LL);
  }

  swift_bridgeObjectRelease(v26);
  __n128 v32 = swift_bridgeObjectRelease(v29);
  (*(void (**)(char *, uint64_t, __n128))(v35 + 8))(v16, TupleTypeMetadata2, v32);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v10);
  return v31 & 1;
}

uint64_t sub_10031B508@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_100058CD0(255LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  uint64_t v10 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation(255LL, a2, a3, v9);
  swift_getTupleTypeMetadata2(0LL, v8, v10, "key value ", 0LL);
  uint64_t v11 = __chkstk_darwin();
  uint64_t v13 = (void **)((char *)&v22 - v12);
  uint64_t v14 = *(int *)(v11 + 48);
  uint64_t v15 = (char *)v13 + v14;
  uint64_t v16 = *a1;
  *uint64_t v13 = *a1;
  uint64_t v17 = *(void *)(v10 - 8);
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))((char *)v13 + v14, (char *)a1 + v14, v10);
  id v18 = [v16 peerAddress];
  WiFiMACAddress.wifiAddress.getter();
  uint64_t v20 = v19;

  *(_WORD *)a4 = v20;
  *(_BYTE *)(a4 + 2) = BYTE2(v20);
  *(_BYTE *)(a4 + 3) = BYTE3(v20);
  *(_BYTE *)(a4 + 4) = BYTE4(v20);
  *(_BYTE *)(a4 + 5) = BYTE5(v20);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v15, v10);
}

uint64_t sub_10031B654@<X0>(unsigned __int16 *a1@<X0>, void *a2@<X8>)
{
  id v62 = a2;
  unint64_t v3 = (int *)type metadata accessor for AWDLPeer(0LL);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v61 - v6;
  __chkstk_darwin();
  uint64_t v9 = (char *)&v61 - v8;
  uint64_t v10 = *(unsigned int *)(a1 + 1);
  uint64_t v11 = *a1;
  uint64_t v71 = _swiftEmptyDictionarySingleton;
  sub_100002274((uint64_t *)&unk_10040D5A0);
  Dictionary.reserveCapacity(_:)(10LL);
  sub_100304FBC(v11 | (v10 << 16), (uint64_t)v9);
  uint64_t v12 = WiFiAddress.data.getter(*(unsigned __int16 *)&v9[v3[5]] | ((unint64_t)*(unsigned int *)&v9[v3[5] + 2] << 16));
  *((void *)&v70 + sub_100058090(v4, v0 + 1) = &type metadata for Data;
  *(void *)&__int128 v69 = v12;
  *((void *)&v69 + sub_100058090(v4, v0 + 1) = v13;
  sub_100022594(&v69, &v67);
  uint64_t v14 = v71;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v71);
  *(void *)&__int128 v65 = v14;
  sub_10001EDDC(&v67, 0x5F4E4F4954415453LL, 0xEB0000000043414DLL, isUniquelyReferenced_nonNull_native);
  uint64_t v16 = v65;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v17 = &v9[v3[24]];
  uint64_t v18 = *(void *)v17;
  LOBYTE(v1sub_100058090(v4, v0 + 1) = v17[8];
  sub_100057FE8((uint64_t)v9, (uint64_t)v7, type metadata accessor for AWDLPeer);
  if ((v11 & 1) != 0)
  {
    uint64_t v19 = &v7[v3[23]];
    uint64_t v18 = *(void *)v19;
    int v20 = v19[8];
    sub_10005802C((uint64_t)v7, type metadata accessor for AWDLPeer);
    if (v20) {
      uint64_t v18 = 0LL;
    }
  }

  else
  {
    sub_10005802C((uint64_t)v7, type metadata accessor for AWDLPeer);
  }

  *((void *)&v70 + sub_100058090(v4, v0 + 1) = &type metadata for Int;
  *(void *)&__int128 v69 = v18;
  sub_100022594(&v69, &v67);
  char v21 = swift_isUniquelyReferenced_nonNull_native(v16);
  *(void *)&__int128 v65 = v16;
  sub_10001EDDC(&v67, 0x5F4E4F4954415453LL, 0xEC00000049535352LL, v21);
  uint64_t v22 = v65;
  uint64_t v71 = (void *)v65;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v23 = &v9[v3[9]];
  if ((v23[48] & 1) != 0)
  {
    __int128 v67 = 0u;
    __int128 v68 = 0u;
  }

  else
  {
    uint64_t v24 = *((void *)v23 + 3);
    if ((v23[32] & 1) != 0) {
      LODWORD(v24) = dword_10036057C[v24 >> 32];
    }
    else {
      uint64_t v24 = HIDWORD(v24);
    }
    *((void *)&v68 + sub_100058090(v4, v0 + 1) = &type metadata for UInt32;
    LODWORD(v67) = v24;
  }

  sub_100057FE8((uint64_t)v9, (uint64_t)v5, type metadata accessor for AWDLPeer);
  if (*((void *)&v68 + 1))
  {
    sub_10005802C((uint64_t)v5, type metadata accessor for AWDLPeer);
    sub_100022594(&v67, &v69);
LABEL_21:
    sub_100022594(&v69, &v65);
    char v28 = swift_isUniquelyReferenced_nonNull_native(v22);
    *(void *)&v64[0] = v22;
    sub_10001EDDC(&v65, 0xD00000000000001CLL, 0x800000010036AC10LL, v28);
    uint64_t v71 = *(void **)&v64[0];
    swift_bridgeObjectRelease(0x8000000000000000LL);
    goto LABEL_22;
  }

  uint64_t v25 = &v5[v3[8]];
  if ((v25[25] & 1) != 0)
  {
    sub_10005802C((uint64_t)v5, type metadata accessor for AWDLPeer);
    __int128 v69 = 0u;
    __int128 v70 = 0u;
  }

  else
  {
    char v26 = v25[24];
    uint64_t v27 = *((void *)v25 + 2);
    if ((v26 & 1) != 0) {
      LODWORD(v27) = dword_10036057C[v27 >> 32];
    }
    else {
      uint64_t v27 = HIDWORD(v27);
    }
    *((void *)&v70 + sub_100058090(v4, v0 + 1) = &type metadata for UInt32;
    LODWORD(v69) = v27;
    sub_10005802C((uint64_t)v5, type metadata accessor for AWDLPeer);
  }

  sub_1000225EC((uint64_t)&v67, &qword_100405280);
  if (*((void *)&v70 + 1)) {
    goto LABEL_21;
  }
  sub_1000225EC((uint64_t)&v69, &qword_100405280);
  sub_10001E720(0xD00000000000001CLL, 0x800000010036AC10LL, &v65);
  sub_1000225EC((uint64_t)&v65, &qword_100405280);
LABEL_22:
  uint64_t v29 = &v9[v3[13]];
  uint64_t v30 = *((void *)v29 + 2);
  if (v30)
  {
    uint64_t v31 = *((void *)v29 + 1);
    unint64_t v66 = &type metadata for String;
    *(void *)&__int128 v65 = v31;
    *((void *)&v65 + sub_100058090(v4, v0 + 1) = v30;
    sub_100022594(&v65, v64);
    swift_bridgeObjectRetain(v30);
    __n128 v32 = v71;
    char v33 = swift_isUniquelyReferenced_nonNull_native(v71);
    BOOL v63 = v32;
    sub_10001EDDC(v64, 0xD000000000000010LL, 0x800000010036AC30LL, v33);
    uint64_t v71 = v63;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    if ((v23[48] & 1) != 0) {
      goto LABEL_24;
    }
  }

  else
  {
    sub_10001E720(0xD000000000000010LL, 0x800000010036AC30LL, &v65);
    sub_1000225EC((uint64_t)&v65, &qword_100405280);
    if ((v23[48] & 1) != 0)
    {
LABEL_24:
      sub_10001E720(0xD000000000000017LL, 0x800000010036AC50LL, &v65);
      sub_1000225EC((uint64_t)&v65, &qword_100405280);
      if ((v23[48] & 1) == 0) {
        goto LABEL_25;
      }
LABEL_29:
      sub_10001E720(0xD000000000000018LL, 0x800000010036AC70LL, &v65);
      sub_1000225EC((uint64_t)&v65, &qword_100405280);
      if ((v23[48] & 1) == 0) {
        goto LABEL_26;
      }
      goto LABEL_30;
    }
  }

  uint64_t v42 = WiFiAddress.data.getter(*(void *)v23 & 0xFFFFFFFFFFFFLL);
  unint64_t v66 = &type metadata for Data;
  *(void *)&__int128 v65 = v42;
  *((void *)&v65 + sub_100058090(v4, v0 + 1) = v43;
  sub_100022594(&v65, v64);
  uint64_t v44 = v71;
  char v45 = swift_isUniquelyReferenced_nonNull_native(v71);
  BOOL v63 = v44;
  sub_10001EDDC(v64, 0xD000000000000017LL, 0x800000010036AC50LL, v45);
  uint64_t v71 = v63;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  if ((v23[48] & 1) != 0) {
    goto LABEL_29;
  }
LABEL_25:
  uint64_t v34 = WiFiAddress.data.getter(*((unsigned __int16 *)v23 + 3) | ((unint64_t)*((void *)v23 + 1) << 16));
  unint64_t v66 = &type metadata for Data;
  *(void *)&__int128 v65 = v34;
  *((void *)&v65 + sub_100058090(v4, v0 + 1) = v35;
  sub_100022594(&v65, v64);
  uint64_t v36 = v71;
  char v37 = swift_isUniquelyReferenced_nonNull_native(v71);
  BOOL v63 = v36;
  sub_10001EDDC(v64, 0xD000000000000018LL, 0x800000010036AC70LL, v37);
  uint64_t v71 = v63;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  if ((v23[48] & 1) == 0)
  {
LABEL_26:
    uint64_t v38 = *((void *)v23 + 2);
    unint64_t v66 = &type metadata for UInt32;
    LODWORD(v65) = v38;
    sub_100022594(&v65, v64);
    uint64_t v39 = v71;
    char v40 = swift_isUniquelyReferenced_nonNull_native(v71);
    BOOL v63 = v39;
    sub_10001EDDC(v64, 0xD000000000000019LL, 0x800000010036AC90LL, v40);
    uint64_t v41 = v63;
    uint64_t v71 = v63;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    goto LABEL_31;
  }

void sub_10031BEBC(uint64_t a1@<X0>, void *a2@<X8>)
{
  __int128 v27 = *(_OWORD *)(a1 + 24);
  __int16 v28 = *(_WORD *)(a1 + 40);
  __int128 v29 = *(_OWORD *)(a1 + 8);
  __int128 v30 = v27;
  __int16 v31 = v28;
  sub_1000209DC((uint64_t)&v29);
  sub_1000209DC((uint64_t)&v30);
  uint64_t v4 = DNSRecords.PTR.description.getter();
  uint64_t v6 = v5;
  sub_100020A04((uint64_t)&v29);
  sub_100020A04((uint64_t)&v30);
  v7._countAndFlagsBits = 1381257274LL;
  v7._object = (void *)0xE400000000000000LL;
  String.append(_:)(v7);
  uint64_t v8 = v6;
  uint64_t v9 = sub_1000A60A0(0LL, 1LL, 1, _swiftEmptyArrayStorage);
  unint64_t v11 = v9[2];
  unint64_t v10 = v9[3];
  if (v11 >= v10 >> 1) {
    uint64_t v9 = sub_1000A60A0((void *)(v10 > 1), v11 + 1, 1, v9);
  }
  void v9[2] = v11 + 1;
  uint64_t v12 = &v9[2 * v11];
  v12[4] = v4;
  v12[5] = v8;
  if (*(void *)(a1 + 56))
  {
    sub_1000209DC((uint64_t)&v29);
    sub_1000209DC((uint64_t)&v30);
    uint64_t v13 = DNSRecords.PTR.description.getter();
    uint64_t v15 = v14;
    sub_100020A04((uint64_t)&v29);
    sub_100020A04((uint64_t)&v30);
    v16._countAndFlagsBits = 1415074874LL;
    v16._object = (void *)0xE400000000000000LL;
    String.append(_:)(v16);
    unint64_t v18 = v9[2];
    unint64_t v17 = v9[3];
    if (v18 >= v17 >> 1) {
      uint64_t v9 = sub_1000A60A0((void *)(v17 > 1), v18 + 1, 1, v9);
    }
    void v9[2] = v18 + 1;
    uint64_t v19 = &v9[2 * v18];
    v19[4] = v13;
    v19[5] = v15;
  }

  sub_1000209DC((uint64_t)&v29);
  sub_1000209DC((uint64_t)&v30);
  uint64_t v20 = DNSRecords.PTR.description.getter();
  uint64_t v22 = v21;
  sub_100020A04((uint64_t)&v29);
  sub_100020A04((uint64_t)&v30);
  v23._countAndFlagsBits = 1448235834LL;
  v23._object = (void *)0xE400000000000000LL;
  String.append(_:)(v23);
  unint64_t v25 = v9[2];
  unint64_t v24 = v9[3];
  if (v25 >= v24 >> 1) {
    uint64_t v9 = sub_1000A60A0((void *)(v24 > 1), v25 + 1, 1, v9);
  }
  void v9[2] = v25 + 1;
  char v26 = &v9[2 * v25];
  uint64_t v26[4] = v20;
  v26[5] = v22;
  *a2 = v9;
}

uint64_t sub_10031C0E0(void **a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  __int128 v70 = a5;
  uint64_t v73 = a3;
  uint64_t v75 = a4;
  uint64_t v7 = *a4;
  sub_100002274(qword_100410330);
  __chkstk_darwin();
  __int128 v69 = &v55[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_100002274(&qword_100405D40);
  __chkstk_darwin();
  __int128 v68 = &v55[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = type metadata accessor for DispatchTime(0LL);
  uint64_t v61 = *(void *)(v10 - 8);
  uint64_t v62 = v10;
  __chkstk_darwin();
  uint64_t v12 = *(void *)(v7 + 416);
  uint64_t v64 = *(void *)(v7 + 408);
  __int128 v65 = &v55[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v63 = v12;
  uint64_t v14 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation(255LL, v64, v12, v13);
  type metadata accessor for Optional(0LL, v14);
  __chkstk_darwin();
  __int128 v67 = &v55[-v15];
  uint64_t v71 = sub_100058CD0(255LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, v71, v14, "key value ", 0LL);
  uint64_t v74 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  uint64_t v60 = &v55[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  char v58 = &v55[-v18];
  __chkstk_darwin();
  uint64_t v20 = &v55[-v19];
  uint64_t v21 = __chkstk_darwin();
  Swift::String v23 = &v55[-v22];
  unint64_t v24 = *a1;
  unint64_t v25 = &v55[*(int *)(v21 + 48) - v22];
  *(void *)&v55[-v22] = v24;
  uint64_t v26 = *(void *)(v14 - 8);
  __int128 v27 = *(void (**)(void))(v26 + 16);
  ((void (*)(_BYTE *, uint64_t, uint64_t))v27)(v25, a2, v14);
  uint64_t v72 = sub_100058CD0(0LL, (unint64_t *)&qword_100405DF0, &OBJC_CLASS___NSObject_ptr);
  __int16 v28 = (char *)v20 + *(int *)(TupleTypeMetadata2 + 48);
  unint64_t v59 = v20;
  *uint64_t v20 = v24;
  char v57 = v25;
  ((void (*)(char *, _BYTE *, uint64_t))v27)(v28, v25, v14);
  id v29 = v24;
  id v30 = [v29 peerAddress];
  int v31 = static NSObject.== infix(_:_:)(v30, v73);

  uint64_t v73 = v26;
  __n128 v32 = *(void (**)(char *, uint64_t))(v26 + 8);
  v32(v28, v14);
  if ((v31 & 1) == 0)
  {
    (*(void (**)(_BYTE *, uint64_t))(v74 + 8))(v23, TupleTypeMetadata2);

    return (v31 & 1) == 0;
  }

  uint64_t v72 = (uint64_t)v23;
  uint64_t v66 = TupleTypeMetadata2;
  char v33 = (char *)v58 + *(int *)(TupleTypeMetadata2 + 48);
  *char v58 = v29;
  uint64_t v34 = v57;
  ((void (*)(char *, _BYTE *, uint64_t))v27)(v33, v57, v14);
  uint64_t v35 = *(void **)((char *)v75 + *(void *)(*v75 + 752LL));
  int v56 = v31;
  if (v35)
  {
    id v36 = v29;
    id v37 = v35;
    LODWORD(v58) = static NSObject.== infix(_:_:)(v36, v37);

    v32(v33, v14);
    uint64_t v38 = v32;
  }

  else
  {
    v32(v33, v14);
    uint64_t v38 = v32;
  }

  uint64_t v39 = v66;
  char v58 = (void *)((char *)v59 + *(int *)(v66 + 48));
  *unint64_t v59 = v29;
  v27();
  uint64_t v40 = *(int *)(v39 + 48);
  uint64_t v41 = v60;
  uint64_t v42 = (char *)v60 + v40;
  *uint64_t v60 = v29;
  ((void (*)(char *, _BYTE *, uint64_t))v27)((char *)v41 + v40, v34, v14);
  uint64_t v43 = v14;
  uint64_t v45 = v61;
  uint64_t v44 = v62;
  uint64_t v46 = (uint64_t)v65;
  (*(void (**)(_BYTE *, char *, uint64_t))(v61 + 16))(v65, v42, v62);
  v38(v42, v14);
  type metadata accessor for P2PTimer(0LL);
  uint64_t v47 = (uint64_t)v68;
  variable initialization expression of AWDLPeer.lastUpdated();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v45 + 56))(v47, 0LL, 1LL, v44);
  uint64_t v48 = type metadata accessor for UUID(0LL);
  uint64_t v49 = (uint64_t)v69;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56LL))(v69, 1LL, 1LL, v48);
  char v50 = v67;
  sub_100312F78(v46, v47, v49, v64, v63, (uint64_t)v67);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v73 + 56))(v50, 0LL, 1LL, v43);
  id v77 = v29;
  swift_beginAccess((char *)v75 + *(void *)(*v75 + 552LL), v76, 33LL, 0LL);
  unint64_t v51 = sub_100245750();
  uint64_t v52 = type metadata accessor for Dictionary(0LL, v71, v43, v51);
  Dictionary.subscript.setter(v50, &v77, v52);
  swift_endAccess(v76);
  double v53 = sub_100306904();
  (*(void (**)(uint64_t, uint64_t, double))(v74 + 8))(v72, v66, v53);
  uint64_t result = ((uint64_t (*)(void *, uint64_t))v38)(v58, v43);
  if (!__OFADD__(*v70, 1LL))
  {
    ++*v70;
    LOBYTE(v3sub_100058090(v4, v0 + 1) = v56;
    return (v31 & 1) == 0;
  }

  __break(1u);
  return result;
}

void sub_10031C650(void *a1)
{
  uint64_t v2 = v1;
  id v4 = [a1 peerAddress];
  WiFiMACAddress.wifiAddress.getter();
  uint64_t v6 = v5;

  id v7 = a1;
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc(22LL, -1LL);
    uint64_t v21 = swift_slowAlloc(64LL, -1LL);
    uint64_t v23 = v21;
    *(_DWORD *)uint64_t v10 = 136315394;
    id v11 = [v7 uniqueIdentifier];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    unint64_t v14 = v13;

    uint64_t v22 = sub_10000235C(v12, v14, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);

    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v15 = WiFiAddress.description.getter(v6 & 0xFFFFFFFFFFFFLL);
    unint64_t v17 = v16;
    uint64_t v22 = sub_10000235C(v15, v16, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
    swift_bridgeObjectRelease(v17);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "Exiting retro mode for %s from %s, enabling infrastructure Wi-Fi",  (uint8_t *)v10,  0x16u);
    swift_arrayDestroy(v21, 2LL, &type metadata for Any[8]);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v18 = *(void *)(v2 + *(void *)(*(void *)v2 + 704LL));
  swift_unownedRetainStrong(v18);
  sub_1002D4410();
  swift_release(v18);
  uint64_t v19 = *(void *)(*(void *)v2 + 752LL);
  uint64_t v20 = *(void **)(v2 + v19);
  *(void *)(v2 + v19) = 0LL;
}

uint64_t sub_10031C878(void **a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  __int128 v70 = a5;
  uint64_t v73 = a3;
  uint64_t v75 = a4;
  uint64_t v7 = *a4;
  sub_100002274(qword_100410330);
  __chkstk_darwin();
  __int128 v69 = &v55[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_100002274(&qword_100405D40);
  __chkstk_darwin();
  __int128 v68 = &v55[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = type metadata accessor for DispatchTime(0LL);
  uint64_t v61 = *(void *)(v10 - 8);
  uint64_t v62 = v10;
  __chkstk_darwin();
  uint64_t v12 = *(void *)(v7 + 416);
  uint64_t v64 = *(void *)(v7 + 408);
  __int128 v65 = &v55[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v63 = v12;
  uint64_t v14 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation(255LL, v64, v12, v13);
  type metadata accessor for Optional(0LL, v14);
  __chkstk_darwin();
  __int128 v67 = &v55[-v15];
  uint64_t v71 = sub_100058CD0(255LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, v71, v14, "key value ", 0LL);
  uint64_t v74 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  uint64_t v60 = &v55[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  char v58 = &v55[-v18];
  __chkstk_darwin();
  uint64_t v20 = &v55[-v19];
  uint64_t v21 = __chkstk_darwin();
  uint64_t v23 = &v55[-v22];
  unint64_t v24 = *a1;
  unint64_t v25 = &v55[*(int *)(v21 + 48) - v22];
  *(void *)&v55[-v22] = v24;
  uint64_t v26 = *(void *)(v14 - 8);
  __int128 v27 = *(void (**)(void))(v26 + 16);
  ((void (*)(_BYTE *, uint64_t, uint64_t))v27)(v25, a2, v14);
  uint64_t v72 = sub_100058CD0(0LL, (unint64_t *)&qword_100405DF0, &OBJC_CLASS___NSObject_ptr);
  __int16 v28 = (char *)v20 + *(int *)(TupleTypeMetadata2 + 48);
  unint64_t v59 = v20;
  *uint64_t v20 = v24;
  char v57 = v25;
  ((void (*)(char *, _BYTE *, uint64_t))v27)(v28, v25, v14);
  id v29 = v24;
  id v30 = [v29 peerAddress];
  int v31 = static NSObject.== infix(_:_:)(v30, v73);

  uint64_t v73 = v26;
  __n128 v32 = *(void (**)(char *, uint64_t))(v26 + 8);
  v32(v28, v14);
  if ((v31 & 1) == 0)
  {
    (*(void (**)(_BYTE *, uint64_t))(v74 + 8))(v23, TupleTypeMetadata2);

    return (v31 & 1) == 0;
  }

  uint64_t v72 = (uint64_t)v23;
  uint64_t v66 = TupleTypeMetadata2;
  char v33 = (char *)v58 + *(int *)(TupleTypeMetadata2 + 48);
  *char v58 = v29;
  uint64_t v34 = v57;
  ((void (*)(char *, _BYTE *, uint64_t))v27)(v33, v57, v14);
  uint64_t v35 = *(void **)((char *)v75 + *(void *)(*v75 + 752LL));
  int v56 = v31;
  if (v35)
  {
    id v36 = v29;
    id v37 = v35;
    LODWORD(v58) = static NSObject.== infix(_:_:)(v36, v37);

    v32(v33, v14);
    uint64_t v38 = v32;
  }

  else
  {
    v32(v33, v14);
    uint64_t v38 = v32;
  }

  uint64_t v39 = v66;
  char v58 = (void *)((char *)v59 + *(int *)(v66 + 48));
  *unint64_t v59 = v29;
  v27();
  uint64_t v40 = *(int *)(v39 + 48);
  uint64_t v41 = v60;
  uint64_t v42 = (char *)v60 + v40;
  *uint64_t v60 = v29;
  ((void (*)(char *, _BYTE *, uint64_t))v27)((char *)v41 + v40, v34, v14);
  uint64_t v43 = v14;
  uint64_t v45 = v61;
  uint64_t v44 = v62;
  uint64_t v46 = (uint64_t)v65;
  (*(void (**)(_BYTE *, char *, uint64_t))(v61 + 16))(v65, v42, v62);
  v38(v42, v14);
  type metadata accessor for P2PTimer(0LL);
  uint64_t v47 = (uint64_t)v68;
  variable initialization expression of AWDLPeer.lastUpdated();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v45 + 56))(v47, 0LL, 1LL, v44);
  uint64_t v48 = type metadata accessor for UUID(0LL);
  uint64_t v49 = (uint64_t)v69;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56LL))(v69, 1LL, 1LL, v48);
  char v50 = v67;
  sub_100312F78(v46, v47, v49, v64, v63, (uint64_t)v67);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v73 + 56))(v50, 0LL, 1LL, v43);
  id v77 = v29;
  swift_beginAccess((char *)v75 + *(void *)(*v75 + 576LL), v76, 33LL, 0LL);
  unint64_t v51 = sub_100245750();
  uint64_t v52 = type metadata accessor for Dictionary(0LL, v71, v43, v51);
  Dictionary.subscript.setter(v50, &v77, v52);
  swift_endAccess(v76);
  double v53 = sub_100306904();
  (*(void (**)(uint64_t, uint64_t, double))(v74 + 8))(v72, v66, v53);
  uint64_t result = ((uint64_t (*)(void *, uint64_t))v38)(v58, v43);
  if (!__OFADD__(*v70, 1LL))
  {
    ++*v70;
    LOBYTE(v3sub_100058090(v4, v0 + 1) = v56;
    return (v31 & 1) == 0;
  }

  __break(1u);
  return result;
}

uint64_t sub_10031CDE8@<X0>(uint64_t *a1@<X0>, void *a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  swift_bridgeObjectRetain(v6);
  uint64_t v7 = sub_1000EF90C(v5, v6);
  unint64_t v9 = v8;
  WiFiInterface.macAddress.getter();
  id v10 = [a2 peerAddress];
  WiFiMACAddress.wifiAddress.getter();

  sub_10031CED4(v7, v9);
  LOBYTE(v10) = v11;
  unint64_t v12 = v11 >> 8;
  unint64_t v13 = v11 >> 16;
  unint64_t v14 = v11 >> 24;
  unint64_t v15 = HIDWORD(v11);
  unint64_t v16 = v11 >> 40;
  uint64_t result = sub_1000208D8(v7, v9);
  *a3 = (_BYTE)v10;
  a3[1] = v12;
  a3[2] = v13;
  a3[3] = v14;
  a3[4] = v15;
  a3[5] = v16;
  return result;
}

void sub_10031CED4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for SHA256Digest(0LL);
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for SHA256(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  SHA256.init()(v5);
  __asm { BR              X10 }

uint64_t sub_10031CFB0()
{
  *(void *)(v4 - 112) = v3;
  *(_WORD *)(v4 - 104) = v2;
  *(_BYTE *)(v4 - 102) = BYTE2(v2);
  *(_BYTE *)(v4 - 10sub_100058090(v4, v0 + 1) = BYTE3(v2);
  *(_BYTE *)(v4 - 100) = BYTE4(v2);
  *(_BYTE *)(v4 - 99) = BYTE5(v2);
  uint64_t v5 = sub_10000AF70( &qword_1004060F0,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
  dispatch thunk of HashFunction.update(bufferPointer:)(v4 - 112, v4 - 112 + BYTE6(v2), v1, v5);
  sub_1000208D8(v3, v2);
  WiFiAddress.data.getter(v0 & 0xFFFFFFFFFFFFLL);
  return ((uint64_t (*)(void))((char *)&loc_10031D194 + dword_10031D5AC[v6 >> 62]))();
}

uint64_t sub_10031D1A4()
{
  *(void *)(v4 - 112) = v3;
  *(_WORD *)(v4 - 104) = v2;
  *(_BYTE *)(v4 - 102) = BYTE2(v2);
  *(_BYTE *)(v4 - 10sub_100058090(v4, v0 + 1) = BYTE3(v2);
  *(_BYTE *)(v4 - 100) = BYTE4(v2);
  *(_BYTE *)(v4 - 99) = BYTE5(v2);
  uint64_t v5 = sub_10000AF70( &qword_1004060F0,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
  dispatch thunk of HashFunction.update(bufferPointer:)(v4 - 112, v4 - 112 + BYTE6(v2), v0, v5);
  sub_1000208D8(v3, v2);
  sub_1000208D8(v3, v2);
  WiFiAddress.data.getter(v1 & 0xFFFFFFFFFFFFLL);
  return ((uint64_t (*)(void))((char *)&loc_10031D370 + dword_10031D5BC[v6 >> 62]))();
}

unint64_t sub_10031D380()
{
  *(void *)(v5 - 112) = v4;
  *(_WORD *)(v5 - 104) = v3;
  *(_BYTE *)(v5 - 102) = BYTE2(v3);
  *(_BYTE *)(v5 - 10sub_100058090(v4, v0 + 1) = BYTE3(v3);
  *(_BYTE *)(v5 - 100) = BYTE4(v3);
  *(_BYTE *)(v5 - 99) = BYTE5(v3);
  uint64_t v6 = sub_10000AF70( &qword_1004060F0,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
  dispatch thunk of HashFunction.update(bufferPointer:)(v5 - 112, v5 - 112 + BYTE6(v3), v1, v6);
  sub_1000208D8(v4, v3);
  uint64_t v7 = sub_1000208D8(v4, v3);
  SHA256.finalize()(v7);
  SHA256Digest.withUnsafeBytes<A>(_:)((void *)(v5 - 112), sub_100325D14, 0LL, &type metadata for WiFiAddress);
  (*(void (**)(uint64_t, void))(*(void *)(v5 - 128) + 8LL))(v0, *(void *)(v5 - 120));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 136) + 8LL))(v2, v1);
  return *(unsigned __int16 *)(v5 - 112) | ((unint64_t)*(unsigned int *)(v5 - 110) << 16);
}

id sub_10031D5CC(unint64_t a1, void *a2, char *a3, uint64_t a4)
{
  int v406 = a4;
  id v442 = a2;
  unint64_t v444 = a1;
  uint64_t v5 = *(void *)a3;
  uint64_t v7 = *(void *)(*(void *)a3 + 408LL);
  uint64_t v6 = *(void *)(*(void *)a3 + 416LL);
  uint64_t v8 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation(255LL, v7, v6, a4);
  uint64_t v402 = type metadata accessor for Optional(0LL, v8);
  uint64_t v401 = *(void *)(v402 - 8);
  __chkstk_darwin();
  uint64_t v400 = (char *)&v395 - v9;
  uint64_t v424 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v423 = *(void *)(v424 - 8);
  __chkstk_darwin();
  unint64_t v422 = (unint64_t)&v395 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v421.n128_u64[0] = type metadata accessor for DispatchQoS(0LL);
  uint64_t v420 = *(char **)(v421.n128_u64[0] - 8);
  __chkstk_darwin();
  uint64_t v419 = (char *)&v395 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v449 = v6;
  uint64_t v12 = *(void *)(v6 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v12,  v7,  &protocol requirements base descriptor for P2PControls);
  uint64_t v450 = (char *)v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v12,  v7,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v418 = AssociatedTypeWitness;
  uint64_t v446 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v416 = *(void *)(v446 - 8);
  __chkstk_darwin();
  uint64_t v415 = (char *)&v395 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v441 = v14;
  __chkstk_darwin();
  Swift::String v445 = (char *)&v395 - v15;
  uint64_t v451 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v431 = *(void *)(v451 - 8);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v395 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v405 = (char *)&v395 - v18;
  __chkstk_darwin();
  uint64_t v407 = (char *)&v395 - v19;
  __chkstk_darwin();
  uint64_t v21 = (char *)&v395 - v20;
  __chkstk_darwin();
  Swift::String v430 = (uint64_t *)((char *)&v395 - v22);
  __chkstk_darwin();
  unint64_t v24 = (char *)&v395 - v23;
  sub_100002274(&qword_100405D40);
  __chkstk_darwin();
  uint64_t v404 = (char *)&v395 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  os_log_t v426 = (os_log_t)((char *)&v395 - v26);
  uint64_t v27 = type metadata accessor for DispatchTime(0LL);
  uint64_t v429 = *(void *)(v27 - 8);
  __chkstk_darwin();
  unint64_t v408 = (char *)&v395 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  Swift::String v428 = (char *)&v395 - v29;
  __chkstk_darwin();
  uint64_t v447 = (uint64_t *)((char *)&v395 - v30);
  uint64_t v453 = v8;
  uint64_t v433 = *(void *)(v8 - 8);
  __chkstk_darwin();
  id v403 = (char *)&v395 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  Swift::String v425 = (char *)&v395 - v32;
  __chkstk_darwin();
  os_log_t v452 = (os_log_t)((char *)&v395 - v33);
  uint64_t v34 = (os_log_t *)&a3[*(void *)(v5 + 544)];
  swift_beginAccess(v34, v470, 0LL, 0LL);
  os_log_t v35 = *v34;
  id v36 = (id)v444;
  uint64_t v37 = swift_bridgeObjectRetain(v35);
  os_log_type_t v38 = OS_LOG_TYPE_DEFAULT;
  unint64_t v444 = sub_10033176C(v37, (uint64_t)v36);
  uint64_t v40 = v39;
  swift_bridgeObjectRelease(v35);
  id v443 = v36;

  uint64_t v454 = a3;
  if ((v40 & 1) == 0)
  {
    if ((v406 & 1) == 0) {
      goto LABEL_22;
    }
    os_log_t v35 = (os_log_t)&a3[*(void *)(*(void *)a3 + 160LL)];
    id v41 = v443;
    swift_retain_n(a3, 2LL);
    id v42 = v41;
    uint64_t v40 = Logger.logObject.getter(v42);
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v40, v38))
    {

      swift_release_n(a3, 2LL);
      goto LABEL_22;
    }

    os_log_t v35 = (os_log_t)swift_slowAlloc(22LL, -1LL);
    id v36 = (id)swift_slowAlloc(64LL, -1LL);
    id v469 = v36;
    *(_DWORD *)os_log_t v35 = 136315394;
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    unint64_t v45 = v44;
    id aBlock = (id)sub_10000235C(v43, v44, (uint64_t *)&v469);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v456);

    swift_bridgeObjectRelease(v45);
    *((_WORD *)v35 + 6) = 2080;
    swift_beginAccess(v34, &aBlock, 32LL, 0LL);
    os_log_t v46 = *v34;
    uint64_t v47 = &v471;
    if ((v444 & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (v444 < *(void *)(((unint64_t)v46 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      for (id i = *((id *)v46 + v444 + 4);
            ;
            id i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(*((void *)v47 - 32), v46))
      {
        uint64_t v49 = i;
        swift_endAccess(&aBlock);
        id v50 = [v49 uniqueIdentifier];
        unint64_t v51 = v454;
        swift_release(v454);

        uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
        unint64_t v54 = v53;

        id aBlock = (id)sub_10000235C(v52, v54, (uint64_t *)&v469);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v456);
        swift_release(v51);
        swift_bridgeObjectRelease(v54);
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v40,  v38,  "Rejecting %s because of conflict with reservation for %s",  (uint8_t *)v35,  0x16u);
        swift_arrayDestroy(v36, 2LL, &type metadata for Any[8]);
        swift_slowDealloc(v36, -1LL, -1LL);
        swift_slowDealloc(v35, -1LL, -1LL);

LABEL_22:
        swift_beginAccess(v34, &aBlock, 32LL, 0LL);
        os_log_t v46 = *v34;
        uint64_t v47 = &v471;
        if ((v444 & 0x8000000000000000LL) != 0)
        {
          __break(1u);
        }

        else
        {
          uint64_t v47 = *(char **)(((unint64_t)v46 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          if (v444 < (unint64_t)v47)
          {
            id v163 = *((id *)v46 + v444 + 4);
            goto LABEL_26;
          }
        }

        __break(1u);
LABEL_70:
        ;
      }

      id v163 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v444, v46);
LABEL_26:
      uint64_t v164 = v163;
      swift_endAccess(&aBlock);
      id v165 = [v164 uniqueIdentifier];

      return v165;
    }

    __break(1u);
LABEL_73:
    sub_1000225EC((uint64_t)v35, &qword_100405D40);
    id aBlock = 0LL;
    unint64_t v456 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(73LL);
    v370._object = (void *)0x800000010036A990LL;
    v370._countAndFlagsBits = 0xD000000000000041LL;
    String.append(_:)(v370);
    id v371 = v438;
    id v372 = [v438 uniqueIdentifier];
    v373._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v372);
    object = v373._object;
    String.append(_:)(v373);

    swift_bridgeObjectRelease(object);
    v375._countAndFlagsBits = 544175136LL;
    v375._object = (void *)0xE400000000000000LL;
    String.append(_:)(v375);
    id v376 = [v371 peerAddress];
    WiFiMACAddress.wifiAddress.getter();
    uint64_t v378 = v377;

    v379._countAndFlagsBits = WiFiAddress.description.getter(v378 & 0xFFFFFFFFFFFFLL);
    uint64_t v276 = v379._object;
    String.append(_:)(v379);
    swift_bridgeObjectRelease(v276);
    uint64_t v380 = (uint64_t)aBlock;
    unint64_t v381 = v456;
    int v394 = 0;
    for (uint64_t j = 1189LL; ; uint64_t j = 1215LL)
    {
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v380,  v381,  "wifip2pdCore/AWDLInterface.swift",  32LL,  2LL,  j,  v394);
      __break(1u);
LABEL_75:
      sub_1000225EC((uint64_t)v276, &qword_100405D40);
      uint64_t v461 = 0LL;
      unint64_t v462 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(75LL);
      v383._object = (void *)0x800000010036A990LL;
      v383._countAndFlagsBits = 0xD000000000000041LL;
      String.append(_:)(v383);
      id v384 = v440;
      id v385 = [v440 uniqueIdentifier];
      v386._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v385);
      id v387 = v386._object;
      String.append(_:)(v386);

      swift_bridgeObjectRelease(v387);
      v388._countAndFlagsBits = 0x206D6F726620LL;
      v388._object = (void *)0xE600000000000000LL;
      String.append(_:)(v388);
      id v389 = [v384 peerAddress];
      WiFiMACAddress.wifiAddress.getter();
      uint64_t v391 = v390;

      v392._countAndFlagsBits = WiFiAddress.description.getter(v391 & 0xFFFFFFFFFFFFLL);
      uint64_t v276 = v392._object;
      String.append(_:)(v392);
      swift_bridgeObjectRelease(v276);
      uint64_t v380 = v461;
      unint64_t v381 = v462;
      int v394 = 0;
    }
  }

  uint64_t v399 = v21;
  uint64_t v411 = v24;
  uint64_t v398 = v17;
  uint64_t v448 = v27;
  id v55 = v442;
  if (v442)
  {
    id v56 = objc_allocWithZone(&OBJC_CLASS___AWDLTrafficRegistrationConfiguration);
    uint64_t v57 = (uint64_t)v443;
    id v58 = [v56 initWithUniqueIdentifier:v443 peerAddress:v55];
  }

  else
  {
    id v58 = 0LL;
    uint64_t v57 = (uint64_t)v443;
  }

  unint64_t v59 = &a3[*(void *)(*(void *)a3 + 536LL)];
  swift_beginAccess(v59, &v469, 0LL, 0LL);
  uint64_t v60 = *(void *)v59;
  uint64_t v61 = sub_100058CD0(0LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  unint64_t v62 = sub_100245750();
  uint64_t v63 = v453;
  uint64_t v64 = NANBitmap.Channel.operatingClass.getter(v60);
  uint64_t v467 = v64;
  __chkstk_darwin();
  *(&v395 - 4) = v57;
  *(&v395 - 3) = (uint64_t)v55;
  id v393 = v58;
  uint64_t v65 = type metadata accessor for Dictionary.Keys(0LL, v61, v63, v62);
  swift_bridgeObjectRetain(v64);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v65);
  Sequence.first(where:)(&aBlock, sub_100332194, &v395 - 6, v65, WitnessTable);
  *(void *)&double v67 = swift_bridgeObjectRelease(v467).n128_u64[0];
  id v68 = aBlock;
  id v432 = v58;
  if (aBlock)
  {
    p_os_log_type_t type = &stru_100401FF0.type;
    if ((v406 & 1) != 0)
    {
      id v70 = aBlock;
      id v71 = v443;
      id v72 = v70;
      id v73 = v71;
      id v74 = v72;
      uint64_t v75 = (os_log_s *)Logger.logObject.getter(v74);
      os_log_type_t v76 = static os_log_type_t.error.getter();
      int v77 = v76;
      if (os_log_type_enabled(v75, v76))
      {
        uint64_t v78 = swift_slowAlloc(32LL, -1LL);
        uint64_t v79 = (void *)swift_slowAlloc(96LL, -1LL);
        id aBlock = v79;
        *(_DWORD *)uint64_t v78 = 136315650;
        LODWORD(v454) = v77;
        uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
        unint64_t v82 = v81;
        uint64_t v467 = sub_10000235C(v80, v81, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, v468);

        *(void *)&double v83 = swift_bridgeObjectRelease(v82).n128_u64[0];
        *(_WORD *)(v78 + 12) = 2080;
        id v84 = objc_msgSend(v74, "uniqueIdentifier", v83);
        uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
        unint64_t v87 = v86;

        uint64_t v467 = sub_10000235C(v85, v87, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, v468);

        *(void *)&double v88 = swift_bridgeObjectRelease(v87).n128_u64[0];
        *(_WORD *)(v78 + 22) = 2080;
        id v89 = objc_msgSend(v74, "peerAddress", v88);
        WiFiMACAddress.wifiAddress.getter();
        uint64_t v91 = v90;

        uint64_t v92 = WiFiAddress.description.getter(v91 & 0xFFFFFFFFFFFFLL);
        unint64_t v94 = v93;
        uint64_t v467 = sub_10000235C(v92, v93, (uint64_t *)&aBlock);
        p_os_log_type_t type = (char **)(&stru_100401FF0 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, v468);

        swift_bridgeObjectRelease(v94);
        _os_log_impl( (void *)&_mh_execute_header,  v75,  (os_log_type_t)v454,  "Rejecting %s because of conflict with registration for %s to %s",  (uint8_t *)v78,  0x20u);
        swift_arrayDestroy(v79, 3LL, &type metadata for Any[8]);
        swift_slowDealloc(v79, -1LL, -1LL);
        swift_slowDealloc(v78, -1LL, -1LL);
      }

      else
      {
      }
    }

    id v165 = objc_msgSend(v68, p_type[472], v67);

LABEL_37:
    return v165;
  }

  unint64_t v444 = 0LL;
  uint64_t v396 = WitnessTable;
  uint64_t v397 = v65;
  uint64_t v95 = v63;
  id v96 = &v454[*(void *)(*(void *)v454 + 552LL)];
  swift_beginAccess(v96, &v467, 0LL, 0LL);
  unsigned int v413 = enum case for DispatchTimeInterval.seconds(_:);
  uint64_t v409 = v441 + 7;
  uint64_t v427 = v61;
  unint64_t v414 = v62;
  uint64_t v97 = type metadata accessor for Dictionary(0LL, v61, v95, v62);
  uint64_t v98 = v449;
  id v99 = v432;
  uint64_t v412 = v97;
  uint64_t v410 = v96;
  while (1)
  {
    unint64_t v465 = *(void **)v96;
    uint64_t v100 = __chkstk_darwin();
    *(&v395 - 6) = v101;
    *(&v395 - 5) = v98;
    uint64_t v102 = (uint64_t)v443;
    uint64_t v103 = (uint64_t)v442;
    *(&v395 - 4) = (uint64_t)v443;
    *(&v395 - 3) = v103;
    id v393 = v99;
    swift_bridgeObjectRetain(v100);
    uint64_t v104 = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v97);
    uint64_t v105 = v97;
    unint64_t v106 = v444;
    Collection.firstIndex(where:)(&aBlock, sub_1003321B4, &v395 - 8, v105, v104);
    unint64_t v444 = v106;
    swift_bridgeObjectRelease(v465);
    uint64_t v107 = v96;
    id v108 = aBlock;
    uint64_t v109 = (void (*)(char *, uint64_t))v456;
    LODWORD(v44sub_100058090(v4, v0 + 1) = v457;
    uint64_t v110 = v457 & 1;
    uint64_t v111 = *(void *)v107;
    swift_bridgeObjectRetain(*(void *)v107);
    unint64_t v112 = v414;
    os_log_t v113 = v452;
    uint64_t v114 = v427;
    uint64_t v115 = v453;
    Dictionary.subscript.getter(&aBlock, v452, v108, v109, v110, v111, v427, v453, v414);
    __n128 v116 = swift_bridgeObjectRelease(v111);
    uint64_t v117 = *(void (**)(os_log_t, uint64_t, __n128))(v433 + 8);
    v117(v113, v115, v116);
    id v438 = aBlock;
    uint64_t v118 = *(void *)v107;
    swift_bridgeObjectRetain(*(void *)v107);
    __n128 v119 = v425;
    id v440 = v108;
    char v439 = v109;
    LODWORD(v435) = v110;
    Dictionary.subscript.getter(&aBlock, v425, v108, v109, v110, v118, v114, v115, v112);
    swift_bridgeObjectRelease(v118);

    os_log_t v35 = v426;
    sub_1000226B0((uint64_t)&v119[*(int *)(v115 + 36)], (uint64_t)v426, &qword_100405D40);
    Swift::String v434 = (void (*)(os_log_t, uint64_t))v117;
    ((void (*)(char *, uint64_t))v117)(v119, v115);
    uint64_t v120 = v429;
    uint64_t v121 = v448;
    unint64_t v122 = v447;
    (*(void (**)(uint64_t *, os_log_t, uint64_t))(v120 + 32))(v447, v35, v121);
    type metadata accessor for P2PTimer(0LL);
    id v123 = v428;
    variable initialization expression of AWDLPeer.lastUpdated();
    uint64_t v124 = (uint64_t)v411;
    DispatchTime.distance(to:)(v123);
    uint64_t v125 = *(void (**)(char *, uint64_t))(v120 + 8);
    v125(v123, v121);
    uint64_t v126 = (uint64_t)v430;
    *Swift::String v430 = 300LL;
    uint64_t v127 = v431;
    uint64_t v128 = v451;
    (*(void (**)(uint64_t, void, uint64_t))(v431 + 104))(v126, v413, v451);
    BOOL v129 = static DispatchTimeInterval.< infix(_:_:)(v124, v126);
    unint64_t v130 = *(void (**)(uint64_t, uint64_t))(v127 + 8);
    v130(v126, v128);
    char v437 = v125;
    Swift::String v436 = v130;
    if (v129)
    {
      uint64_t v199 = v124;
      id v200 = v438;
      if ((v406 & 1) != 0)
      {
        uint64_t v201 = *(void (**)(char *, uint64_t, uint64_t))(v127 + 16);
        uint64_t v202 = v399;
        v201(v399, v199, v128);
        id v203 = v200;
        id v204 = v443;
        id v205 = v203;
        id v206 = v204;
        id v207 = v205;
        char v208 = (os_log_s *)Logger.logObject.getter(v207);
        os_log_type_t v209 = static os_log_type_t.error.getter();
        int v210 = v209;
        if (os_log_type_enabled(v208, v209))
        {
          uint64_t v211 = swift_slowAlloc(42LL, -1LL);
          uint64_t v454 = (char *)swift_slowAlloc(128LL, -1LL);
          id aBlock = v454;
          *(_DWORD *)uint64_t v211 = 136315906;
          LODWORD(v453) = v210;
          uint64_t v212 = static String._unconditionallyBridgeFromObjectiveC(_:)(v206);
          os_log_t v452 = v208;
          unint64_t v214 = v213;
          unint64_t v465 = (void *)sub_10000235C(v212, v213, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v465, v466);

          swift_bridgeObjectRelease(v214);
          *(_WORD *)(v211 + 12) = 2080;
          uint64_t v215 = DispatchTimeInterval.description.getter();
          unint64_t v217 = v216;
          unint64_t v465 = (void *)sub_10000235C(v215, v216, (uint64_t *)&aBlock);
          uint64_t v450 = v466;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v465, v466);
          __n128 v218 = swift_bridgeObjectRelease(v217);
          uint64_t v219 = v202;
          uint64_t v220 = v436;
          ((void (*)(char *, uint64_t, __n128))v436)(v219, v128, v218);
          *(_WORD *)(v211 + 22) = 2080;
          id v221 = [v207 uniqueIdentifier];
          uint64_t v222 = static String._unconditionallyBridgeFromObjectiveC(_:)(v221);
          unint64_t v224 = v223;

          unint64_t v465 = (void *)sub_10000235C(v222, v224, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v465, v466);

          unint64_t v225 = v224;
          uint64_t v128 = v451;
          *(void *)&double v226 = swift_bridgeObjectRelease(v225).n128_u64[0];
          *(_WORD *)(v211 + 32) = 2080;
          unint64_t v122 = v447;
          id v227 = objc_msgSend(v207, "peerAddress", v226);
          WiFiMACAddress.wifiAddress.getter();
          uint64_t v229 = v228;

          uint64_t v230 = WiFiAddress.description.getter(v229 & 0xFFFFFFFFFFFFLL);
          unint64_t v232 = v231;
          unint64_t v465 = (void *)sub_10000235C(v230, v231, (uint64_t *)&aBlock);
          unint64_t v130 = v220;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v465, v450);

          swift_bridgeObjectRelease(v232);
          os_log_t v233 = v452;
          _os_log_impl( (void *)&_mh_execute_header,  v452,  (os_log_type_t)v453,  "Rejecting %s because of conflict with registration (in recovery for %s) for %s to %s",  (uint8_t *)v211,  0x2Au);
          uint64_t v234 = v454;
          swift_arrayDestroy(v454, 4LL, &type metadata for Any[8]);
          swift_slowDealloc(v234, -1LL, -1LL);
          uint64_t v235 = v211;
          uint64_t v121 = v448;
          swift_slowDealloc(v235, -1LL, -1LL);
        }

        else
        {

          unint64_t v130 = v436;
          v436((uint64_t)v202, v128);
        }

        uint64_t v125 = v437;
      }

      id v165 = [v200 uniqueIdentifier];

      sub_100022570((uint64_t)v440, (uint64_t)v439, v441);
      v130(v199, v128);
      v125((char *)v122, v121);
      return v165;
    }

    uint64_t v131 = AssociatedConformanceWitness;
    uint64_t v132 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 136);
    uint64_t v133 = swift_checkMetadataState(0LL, v418);
    uint64_t v134 = v445;
    v132(v133, v131);
    uint64_t v135 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
    uint64_t v136 = v416;
    uint64_t v137 = v415;
    uint64_t v138 = v134;
    uint64_t v139 = v446;
    (*(void (**)(char *, char *, uint64_t))(v416 + 16))(v415, v138, v446);
    uint64_t v140 = *(unsigned __int8 *)(v136 + 80);
    uint64_t v141 = (v140 + 32) & ~v140;
    unint64_t v142 = (v409 + v141) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v143 = swift_allocObject(&unk_1003FB8B8, v142 + 8, v140 | 7);
    uint64_t v144 = v449;
    *(void *)(v143 + swift_unknownObjectWeakDestroy(v0 + 16) = v450;
    *(void *)(v143 + 24) = v144;
    (*(void (**)(uint64_t, char *, uint64_t))(v136 + 32))(v143 + v141, v137, v139);
    id v145 = v438;
    *(void *)(v143 + v142) = v438;
    uint64_t v459 = sub_10033231C;
    uint64_t v460 = v143;
    id aBlock = _NSConcreteStackBlock;
    unint64_t v456 = 1107296256LL;
    v457 = sub_1000021F0;
    uint64_t v458 = &unk_1003FB8D0;
    uint64_t v146 = _Block_copy(&aBlock);
    id v147 = v135;
    id v438 = v145;
    uint64_t v148 = v419;
    static DispatchQoS.unspecified.getter(v438);
    unint64_t v465 = _swiftEmptyArrayStorage;
    uint64_t v149 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v150 = sub_100002274((uint64_t *)&unk_1004052A0);
    uint64_t v151 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
    unint64_t v152 = v422;
    uint64_t v153 = v424;
    uint64_t v154 = v451;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v465, v150, v151, v424, v149);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v148, v152, v146);
    _Block_release(v146);

    (*(void (**)(unint64_t, uint64_t))(v423 + 8))(v152, v153);
    (*((void (**)(char *, unint64_t))v420 + 1))(v148, v421.n128_u64[0]);
    swift_release(v460);
    id v96 = v410;
    swift_beginAccess(v410, &aBlock, 33LL, 0LL);
    os_log_t v155 = v452;
    uint64_t v156 = (uint64_t)v440;
    uint64_t v157 = v439;
    uint64_t v158 = v412;
    Dictionary.remove(at:)(&v465, v452, v440, v439, v435, v412);
    v434(v155, v453);
    id v159 = v465;
    swift_endAccess(&aBlock);

    sub_100306904();
    uint64_t v160 = (uint64_t)v157;
    uint64_t v161 = v154;
    sub_100022570(v156, v160, v441);

    uint64_t v97 = v158;
    unint64_t v162 = *(void (**)(char *, uint64_t))(v136 + 8);
    uint64_t v98 = v449;
    v162(v445, v446);
    v436(v124, v161);
    v437((char *)v447, v448);
    id v99 = v432;
  }

  uint64_t v166 = v454;
  uint64_t v167 = &v454[*(void *)(*(void *)v454 + 560LL)];
  swift_beginAccess(v167, &aBlock, 0LL, 0LL);
  unint64_t v168 = v414;
  uint64_t v461 = NANBitmap.Channel.operatingClass.getter(*(void *)v167);
  uint64_t v169 = __chkstk_darwin();
  id v170 = v99;
  uint64_t v171 = (uint64_t)v442;
  *(&v395 - 4) = v102;
  *(&v395 - 3) = v171;
  id v393 = v170;
  swift_bridgeObjectRetain(v169);
  id v172 = (id)v444;
  Sequence.first(where:)(&v465, sub_1003321D4, &v395 - 6, v397, v396);
  *(void *)&double v173 = swift_bridgeObjectRelease(v461).n128_u64[0];
  id v174 = v465;
  if (v465)
  {
    if ((v406 & 1) != 0)
    {
      uint64_t v175 = v465;
      id v176 = v443;
      uint64_t v177 = v175;
      id v178 = v176;
      uint64_t v179 = v177;
      uint64_t v180 = (os_log_s *)Logger.logObject.getter(v179);
      os_log_type_t v181 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v180, v181))
      {
        uint64_t v182 = swift_slowAlloc(32LL, -1LL);
        uint64_t v454 = (char *)swift_slowAlloc(96LL, -1LL);
        unint64_t v465 = v454;
        *(_DWORD *)uint64_t v182 = 136315650;
        uint64_t v183 = static String._unconditionallyBridgeFromObjectiveC(_:)(v178);
        unint64_t v185 = v184;
        uint64_t v461 = sub_10000235C(v183, v184, (uint64_t *)&v465);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v461, &v462);

        *(void *)&double v186 = swift_bridgeObjectRelease(v185).n128_u64[0];
        *(_WORD *)(v182 + 12) = 2080;
        id v187 = objc_msgSend(v179, "uniqueIdentifier", v186);
        uint64_t v188 = static String._unconditionallyBridgeFromObjectiveC(_:)(v187);
        unint64_t v190 = v189;

        uint64_t v461 = sub_10000235C(v188, v190, (uint64_t *)&v465);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v461, &v462);

        *(void *)&double v191 = swift_bridgeObjectRelease(v190).n128_u64[0];
        *(_WORD *)(v182 + 22) = 2080;
        id v192 = objc_msgSend(v179, "peerAddress", v191);
        WiFiMACAddress.wifiAddress.getter();
        uint64_t v194 = v193;

        uint64_t v195 = WiFiAddress.description.getter(v194 & 0xFFFFFFFFFFFFLL);
        unint64_t v197 = v196;
        uint64_t v461 = sub_10000235C(v195, v196, (uint64_t *)&v465);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v461, &v462);

        swift_bridgeObjectRelease(v197);
        _os_log_impl( (void *)&_mh_execute_header,  v180,  v181,  "Rejecting %s because of conflict with responder for %s from %s",  (uint8_t *)v182,  0x20u);
        id v198 = v454;
        swift_arrayDestroy(v454, 3LL, &type metadata for Any[8]);
        swift_slowDealloc(v198, -1LL, -1LL);
        swift_slowDealloc(v182, -1LL, -1LL);
      }

      else
      {
      }
    }

    id v165 = objc_msgSend(v174, "uniqueIdentifier", v173);

    goto LABEL_37;
  }

  uint64_t v237 = (uint64_t *)&v166[*(void *)(*(void *)v166 + 576LL)];
  __n128 v238 = swift_beginAccess(v237, &v465, 0LL, 0LL);
  Swift::String v435 = &v462;
  uint64_t v239 = 0x6172747369676572LL;
  if (!v171) {
    uint64_t v239 = 0x7461767265736572LL;
  }
  uint64_t v423 = v239;
  unint64_t v240 = 0xEC0000006E6F6974LL;
  if (!v171) {
    unint64_t v240 = 0xEB000000006E6F69LL;
  }
  unint64_t v422 = v240;
  v238.n128_u64[0] = 136316418LL;
  __n128 v421 = v238;
  uint64_t v420 = &type metadata for Any[8];
  uint64_t v241 = v448;
  uint64_t v242 = v412;
  Swift::String v434 = (void (*)(os_log_t, uint64_t))v104;
  uint64_t v447 = v237;
  while (1)
  {
    uint64_t v464 = (void *)*v237;
    uint64_t v258 = __chkstk_darwin();
    uint64_t v259 = v449;
    *(&v395 - 6) = (uint64_t)v450;
    *(&v395 - 5) = v259;
    *(&v395 - 4) = (uint64_t)v443;
    *(&v395 - 3) = v171;
    id v260 = v432;
    id v393 = v432;
    swift_bridgeObjectRetain(v258);
    Collection.firstIndex(where:)(&v461, sub_1003321F4, &v395 - 8, v242, v104);
    swift_bridgeObjectRelease(v464);
    LODWORD(v446) = v463;
    if (v463 == 255)
    {

      return 0LL;
    }

    id v438 = v172;
    uint64_t v261 = v237;
    unint64_t v263 = v461;
    uint64_t v262 = v462;
    uint64_t v264 = v446 & 1;
    uint64_t v265 = *v261;
    swift_bridgeObjectRetain(*v261);
    os_log_t v266 = v452;
    uint64_t v267 = v427;
    uint64_t v268 = v453;
    Dictionary.subscript.getter(&v461, v452, v263, v262, v264, v265, v427, v453, v168);
    __n128 v269 = swift_bridgeObjectRelease(v265);
    unint64_t v270 = v168;
    uint64_t v271 = v241;
    uint64_t v272 = *(void (**)(os_log_t, uint64_t, __n128))(v433 + 8);
    v272(v266, v268, v269);
    unint64_t v273 = v270;
    id v440 = (id)v461;
    uint64_t v274 = *v261;
    swift_bridgeObjectRetain(*v261);
    uint64_t v275 = v403;
    unint64_t v444 = v263;
    uint64_t v441 = v262;
    Dictionary.subscript.getter(&v461, v403, v263, v262, v264, v274, v267, v268, v273);
    swift_bridgeObjectRelease(v274);

    uint64_t v276 = v404;
    sub_1000226B0((uint64_t)&v275[*(int *)(v268 + 36)], (uint64_t)v404, &qword_100405D40);
    char v437 = (void (*)(char *, uint64_t))v272;
    ((void (*)(char *, uint64_t))v272)(v275, v268);
    uint64_t v277 = v271;
    uint64_t v278 = v429;
    (*(void (**)(char *, void *, uint64_t))(v278 + 32))(v408, v276, v271);
    type metadata accessor for P2PTimer(0LL);
    uint64_t v279 = v428;
    variable initialization expression of AWDLPeer.lastUpdated();
    uint64_t v280 = (uint64_t)v407;
    DispatchTime.distance(to:)(v279);
    uint64_t v281 = *(void (**)(char *, uint64_t))(v278 + 8);
    v281(v279, v271);
    uint64_t v282 = (uint64_t)v430;
    *Swift::String v430 = 20LL;
    uint64_t v283 = v431;
    uint64_t v284 = v451;
    (*(void (**)(uint64_t, void, uint64_t))(v431 + 104))(v282, v413, v451);
    BOOL v285 = static DispatchTimeInterval.< infix(_:_:)(v280, v282);
    uint64_t v286 = *(void (**)(uint64_t, uint64_t))(v283 + 8);
    v286(v282, v284);
    char v439 = v281;
    Swift::String v445 = (char *)v286;
    if (v285) {
      break;
    }
    LODWORD(v436) = v264;
    unint64_t v287 = v405;
    (*(void (**)(char *, uint64_t, uint64_t))(v283 + 16))(v405, v280, v284);
    id v288 = v440;
    id v289 = v442;
    id v290 = v288;
    id v291 = v289;
    id v292 = v443;
    id v293 = v443;
    id v294 = v290;
    id v295 = v291;
    id v296 = v293;
    id v297 = v294;
    id v298 = v295;
    uint64_t v299 = (os_log_s *)Logger.logObject.getter(v298);
    int v300 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v299, (os_log_type_t)v300))
    {
      LODWORD(v425) = v300;
      os_log_t v426 = v299;
      uint64_t v301 = swift_slowAlloc(62LL, -1LL);
      uint64_t v424 = swift_slowAlloc(192LL, -1LL);
      uint64_t v464 = (void *)v424;
      *(_DWORD *)uint64_t v301 = v421.n128_u32[0];
      id v302 = [v297 uniqueIdentifier];
      uint64_t v303 = static String._unconditionallyBridgeFromObjectiveC(_:)(v302);
      unint64_t v305 = v304;

      uint64_t v461 = sub_10000235C(v303, v305, (uint64_t *)&v464);
      char v306 = v435;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v461, v435);

      *(void *)&double v307 = swift_bridgeObjectRelease(v305).n128_u64[0];
      *(_WORD *)(v301 + 12) = 2080;
      id v308 = objc_msgSend(v297, "peerAddress", v307);
      WiFiMACAddress.wifiAddress.getter();
      uint64_t v310 = v309;

      uint64_t v311 = WiFiAddress.description.getter(v310 & 0xFFFFFFFFFFFFLL);
      unint64_t v313 = v312;
      uint64_t v461 = sub_10000235C(v311, v312, (uint64_t *)&v464);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v461, v306);

      id v440 = v297;
      swift_bridgeObjectRelease(v313);
      *(_WORD *)(v301 + 22) = 2080;
      unint64_t v314 = v422;
      uint64_t v461 = sub_10000235C(v423, v422, (uint64_t *)&v464);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v461, v306);

      swift_bridgeObjectRelease(v314);
      *(_WORD *)(v301 + 32) = 2080;
      uint64_t v315 = static String._unconditionallyBridgeFromObjectiveC(_:)(v292);
      unint64_t v317 = v316;
      uint64_t v461 = sub_10000235C(v315, v316, (uint64_t *)&v464);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v461, v306);

      *(void *)&double v318 = swift_bridgeObjectRelease(v317).n128_u64[0];
      *(_WORD *)(v301 + 42) = 2080;
      if (v442)
      {
        uint64_t v461 = 544175136LL;
        unint64_t v462 = 0xE400000000000000LL;
        id v319 = objc_msgSend(v298, "description", v318);
        uint64_t v320 = static String._unconditionallyBridgeFromObjectiveC(_:)(v319);
        uint64_t v322 = v321;

        v323._countAndFlagsBits = v320;
        v323._object = v322;
        String.append(_:)(v323);
        swift_bridgeObjectRelease(v322);
        uint64_t v324 = v461;
        unint64_t v325 = v462;
      }

      else
      {
        uint64_t v324 = 0LL;
        unint64_t v325 = 0xE000000000000000LL;
      }

      unint64_t v326 = v405;
      uint64_t v244 = v447;
      uint64_t v461 = sub_10000235C(v324, v325, (uint64_t *)&v464);
      os_log_type_t v327 = v435;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v461, v435);

      swift_bridgeObjectRelease(v325);
      *(_WORD *)(v301 + 52) = 2080;
      uint64_t v328 = DispatchTimeInterval.description.getter();
      unint64_t v330 = v329;
      uint64_t v461 = sub_10000235C(v328, v329, (uint64_t *)&v464);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v461, v327);
      __n128 v331 = swift_bridgeObjectRelease(v330);
      uint64_t v284 = v451;
      ((void (*)(char *, uint64_t, __n128))v445)(v326, v451, v331);
      os_log_t v332 = v426;
      _os_log_impl( (void *)&_mh_execute_header,  v426,  (os_log_type_t)v425,  "Cleared responder traffic registration for %s from %s (new %s for %s%s while in recovery for %s)",  (uint8_t *)v301,  0x3Eu);
      uint64_t v333 = v424;
      swift_arrayDestroy(v424, 6LL, v420);
      swift_slowDealloc(v333, -1LL, -1LL);
      swift_slowDealloc(v301, -1LL, -1LL);

      id v243 = v440;
    }

    else
    {

      ((void (*)(char *, uint64_t))v445)(v287, v284);
      id v243 = v297;
      uint64_t v244 = v447;
    }

    uint64_t v245 = *v244;
    swift_bridgeObjectRetain(*v244);
    unint64_t v168 = v414;
    uint64_t v246 = (uint64_t)v400;
    unint64_t v247 = v444;
    uint64_t v248 = v441;
    uint64_t v249 = v436;
    uint64_t v250 = v453;
    Dictionary.subscript.getter(&v461, v400, v444, v441, v436, v245, v427, v453, v414);
    swift_bridgeObjectRelease(v245);

    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v433 + 56))(v246, 0LL, 1LL, v250);
    sub_100313C9C(v243, v246, v251, v252);
    (*(void (**)(uint64_t, uint64_t))(v401 + 8))(v246, v402);
    swift_beginAccess(v447, &v461, 33LL, 0LL);
    uint64_t v253 = v243;
    os_log_t v254 = v452;
    uint64_t v255 = v249;
    uint64_t v242 = v412;
    Dictionary.remove(at:)(&v464, v452, v247, v248, v255, v412);
    v437((char *)v254, v250);
    uint64_t v256 = v464;
    swift_endAccess(&v461);

    sub_100306904();
    uint64_t v257 = v247;
    uint64_t v237 = v447;
    sub_100022570(v257, v248, v446);

    ((void (*)(char *, uint64_t))v445)(v407, v284);
    uint64_t v241 = v448;
    v439(v408, v448);
    uint64_t v171 = (uint64_t)v442;
    uint64_t v104 = (uint64_t)v434;
    id v172 = v438;
  }

  id v334 = v432;
  id v335 = v440;
  if ((v406 & 1) != 0)
  {
    BOOL v336 = v398;
    uint64_t v337 = v451;
    (*(void (**)(char *, uint64_t, uint64_t))(v283 + 16))(v398, v280, v451);
    id v338 = v335;
    id v339 = v443;
    id v340 = v443;
    id v341 = v338;
    id v342 = v340;
    id v343 = v341;
    uint64_t v344 = (os_log_s *)Logger.logObject.getter(v343);
    os_log_type_t v345 = static os_log_type_t.error.getter();
    int v346 = v345;
    if (os_log_type_enabled(v344, v345))
    {
      uint64_t v347 = swift_slowAlloc(42LL, -1LL);
      uint64_t v454 = (char *)swift_slowAlloc(128LL, -1LL);
      uint64_t v461 = (uint64_t)v454;
      *(_DWORD *)uint64_t v347 = 136315906;
      LODWORD(v453) = v346;
      uint64_t v348 = static String._unconditionallyBridgeFromObjectiveC(_:)(v339);
      unint64_t v350 = v349;
      uint64_t v464 = (void *)sub_10000235C(v348, v349, &v461);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v464, &v465);

      swift_bridgeObjectRelease(v350);
      *(_WORD *)(v347 + 12) = 2080;
      uint64_t v351 = DispatchTimeInterval.description.getter();
      unint64_t v353 = v352;
      uint64_t v464 = (void *)sub_10000235C(v351, v352, &v461);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v464, &v465);
      __n128 v354 = swift_bridgeObjectRelease(v353);
      uint64_t v355 = v336;
      uint64_t v286 = (void (*)(uint64_t, uint64_t))v445;
      ((void (*)(char *, uint64_t, __n128))v445)(v355, v337, v354);
      *(_WORD *)(v347 + 22) = 2080;
      id v356 = [v343 uniqueIdentifier];
      uint64_t v357 = static String._unconditionallyBridgeFromObjectiveC(_:)(v356);
      unint64_t v359 = v358;

      uint64_t v464 = (void *)sub_10000235C(v357, v359, &v461);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v464, &v465);

      *(void *)&double v360 = swift_bridgeObjectRelease(v359).n128_u64[0];
      *(_WORD *)(v347 + 32) = 2080;
      id v361 = objc_msgSend(v343, "peerAddress", v360);
      WiFiMACAddress.wifiAddress.getter();
      uint64_t v363 = v362;

      uint64_t v364 = WiFiAddress.description.getter(v363 & 0xFFFFFFFFFFFFLL);
      unint64_t v366 = v365;
      uint64_t v464 = (void *)sub_10000235C(v364, v365, &v461);
      uint64_t v280 = (uint64_t)v407;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v464, &v465);

      swift_bridgeObjectRelease(v366);
      _os_log_impl( (void *)&_mh_execute_header,  v344,  (os_log_type_t)v453,  "Rejecting %s because of conflict with responder (in recovery for %s) for %s from %s",  (uint8_t *)v347,  0x2Au);
      uint64_t v367 = v454;
      swift_arrayDestroy(v454, 4LL, &type metadata for Any[8]);
      swift_slowDealloc(v367, -1LL, -1LL);
      uint64_t v368 = v347;
      uint64_t v281 = v439;
      swift_slowDealloc(v368, -1LL, -1LL);
    }

    else
    {

      unint64_t v369 = v336;
      uint64_t v286 = (void (*)(uint64_t, uint64_t))v445;
      ((void (*)(char *, uint64_t))v445)(v369, v337);
    }

    id v334 = v432;
    uint64_t v277 = v448;
  }

  id v165 = [v335 uniqueIdentifier];

  sub_100022570(v444, v441, v446);
  v286(v280, v451);
  v281(v408, v277);
  return v165;
}

uint64_t sub_10031FF40(id *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = *a1;
  id v8 = [*a1 uniqueIdentifier];
  int v9 = AWDLTrafficRegistrationService.serviceType.getter((uint64_t)v8);
  char v10 = AWDLTrafficRegistrationService.serviceType.getter(a2);
  if (v9 != 2 || v10 != 2)
  {

    goto LABEL_11;
  }

  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v13 = v12;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v11 == v14 && v13 == v15)
  {

    swift_bridgeObjectRelease_n(v13, 2LL);
    if (a3) {
      goto LABEL_14;
    }
LABEL_11:
    char v20 = 0;
    return v20 & 1;
  }

  uint64_t v17 = v15;
  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v14, v15, 0LL);

  swift_bridgeObjectRelease(v13);
  *(void *)&double v19 = swift_bridgeObjectRelease(v17).n128_u64[0];
  if ((v18 & 1) != 0)
  {
    char v20 = 0;
    if (!a3) {
      return v20 & 1;
    }
  }

uint64_t sub_10032014C(void **a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v75 = a4;
  uint64_t v11 = sub_100058CD0(255LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  uint64_t v13 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation(255LL, a5, a6, v12);
  v73[1] = v11;
  uint64_t v79 = *(void *)(swift_getTupleTypeMetadata2(0LL, v11, v13, "key value ", 0LL) - 8);
  __chkstk_darwin();
  os_log_type_t v76 = (char *)v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v80 = (void **)((char *)v73 - v15);
  __chkstk_darwin();
  id v74 = (char *)v73 - v16;
  __chkstk_darwin();
  unint64_t v82 = (void **)((char *)v73 - v17);
  uint64_t v19 = __chkstk_darwin();
  uint64_t v20 = *(int *)(v19 + 48);
  uint64_t v21 = (char *)v73 + v20 - v18;
  id v22 = (char *)a1 + v20;
  uint64_t v78 = a1;
  id v23 = *a1;
  *(void *)((char *)v73 - v18) = v23;
  uint64_t v24 = *(void *)(v13 - 8);
  id v25 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  double v83 = v22;
  unint64_t v81 = v25;
  ((void (*)(char *))v25)(v21);
  id v26 = [v23 uniqueIdentifier];
  BOOL v27 = a3 != 0;
  LODWORD(a3) = AWDLTrafficRegistrationService.serviceType.getter((uint64_t)v26);
  uint64_t v77 = a2;
  char v28 = AWDLTrafficRegistrationService.serviceType.getter(a2);
  if ((_DWORD)a3 != 2 || v28 != 2)
  {

    BOOL v27 = 0;
    goto LABEL_7;
  }

  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  uint64_t v31 = v30;
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
  uint64_t v34 = v32;
  if (v29 == v33 && v31 == v32)
  {

    swift_bridgeObjectRelease_n(v31, 2LL);
LABEL_7:
    os_log_t v35 = v80;
    id v36 = v78;
    goto LABEL_8;
  }

  char v71 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, v33, v32, 0LL);

  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v34);
  os_log_t v35 = v80;
  id v36 = v78;
  if ((v71 & 1) == 0) {
    BOOL v27 = 1;
  }
LABEL_8:
  uint64_t v37 = v82;
  uint64_t v78 = *(void ***)(v24 + 8);
  ((void (*)(char *, uint64_t))v78)(v21, v13);
  os_log_type_t v38 = (char *)v37 + *(int *)(v19 + 48);
  uint64_t v39 = *v36;
  os_log_s *v37 = *v36;
  uint64_t v40 = v81;
  v81(v38, v83, v13);
  if (v27)
  {
    uint64_t v41 = *(int *)(v19 + 48);
    id v42 = v74;
    uint64_t v43 = &v74[v41];
    *(void *)id v74 = v39;
    v40(&v42[v41], v38, v13);
    unint64_t v44 = v75;
    if (v75)
    {
      id v45 = v39;
      id v46 = v44;
      char v47 = static NSObject.== infix(_:_:)(v45, v46);
      uint64_t v48 = *(void (**)(void **, uint64_t))(v79 + 8);
      v48(v82, v19);

      uint64_t v40 = v81;
      os_log_t v35 = v80;
      char v49 = v47 ^ 1;
    }

    else
    {
      uint64_t v52 = *(void (**)(void **, uint64_t))(v79 + 8);
      id v53 = v39;
      uint64_t v48 = v52;
      v52(v82, v19);
      char v49 = 1;
    }

    ((void (*)(char *, uint64_t))v78)(v43, v13);
  }

  else
  {
    id v50 = *(void (**)(void **, uint64_t))(v79 + 8);
    id v51 = v39;
    uint64_t v48 = v50;
    v50(v37, v19);
    char v49 = 0;
  }

  unint64_t v54 = (char *)v35 + *(int *)(v19 + 48);
  id v55 = *v36;
  *os_log_t v35 = *v36;
  v40(v54, v83, v13);
  if ((v49 & 1) != 0)
  {
    double v83 = (char *)v48;
    uint64_t v56 = *(int *)(v19 + 48);
    uint64_t v57 = v76;
    id v58 = &v76[v56];
    *(void *)os_log_type_t v76 = v55;
    v40(&v57[v56], v54, v13);
    id v59 = [v55 uniqueIdentifier];
    uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
    uint64_t v62 = v61;
    uint64_t v63 = v77;
    uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
    uint64_t v66 = v64;
    if (v60 == v65 && v62 == v64)
    {

      swift_bridgeObjectRelease_n(v62, 2LL);
      ((void (*)(char *, uint64_t))v78)(v58, v13);
    }

    else
    {
      char v69 = _stringCompareWithSmolCheck(_:_:expecting:)(v60, v62, v65, v64, 0LL);

      swift_bridgeObjectRelease(v62);
      __n128 v70 = swift_bridgeObjectRelease(v66);
      ((void (*)(char *, uint64_t, __n128))v78)(v58, v13, v70);
      if ((v69 & 1) == 0)
      {
        char v68 = 1;
        goto LABEL_24;
      }
    }

    char v68 = AWDLTrafficRegistrationService.allowsMultipleConcurrentPeers.getter(v63) ^ 1;
LABEL_24:
    uint64_t v48 = (void (*)(void **, uint64_t))v83;
    goto LABEL_25;
  }

  id v67 = v55;
  char v68 = 0;
LABEL_25:
  v48(v35, v19);
  return v68 & 1;
}

uint64_t sub_100320608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v6,  a3,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Components);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v6,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v9 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents,  &associated type descriptor for P2PComponents.ActivityCoordinator);
  uint64_t v10 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v9,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.ActivityCoordinator: ActivityCoordinatorControls);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  uint64_t v12 = swift_checkMetadataState(0LL, v9);
  return v11(a2, v12, v10);
}

uint64_t sub_1003206F0(id *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = *a1;
  id v8 = [*a1 uniqueIdentifier];
  int v9 = AWDLTrafficRegistrationService.serviceType.getter((uint64_t)v8);
  char v10 = AWDLTrafficRegistrationService.serviceType.getter(a2);
  if (v9 != 2 || v10 != 2)
  {

    goto LABEL_11;
  }

  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v13 = v12;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v11 == v14 && v13 == v15)
  {

    swift_bridgeObjectRelease_n(v13, 2LL);
    if (a3)
    {
LABEL_14:
      if (a4)
      {
        sub_100058CD0(0LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
        id v21 = v7;
        id v22 = a4;
        char v23 = static NSObject.== infix(_:_:)(v21, v22);

        char v19 = v23 ^ 1;
      }

      else
      {
        char v19 = 1;
      }

      return v19 & 1;
    }

uint64_t sub_10032085C(void **a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v57 = a4;
  uint64_t v11 = sub_100058CD0(255LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  uint64_t v13 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation(255LL, a5, a6, v12);
  uint64_t v55 = v11;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, v11, v13, "key value ", 0LL);
  uint64_t v60 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  uint64_t v56 = &v53[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  uint64_t v17 = &v53[-v16];
  uint64_t v19 = *(int *)(__chkstk_darwin() + 48);
  uint64_t v20 = (char *)a1 + v19;
  id v58 = &v53[v19 - v18];
  id v59 = a1;
  id v21 = *a1;
  *(void *)&v53[-v18] = v21;
  uint64_t v22 = *(void *)(v13 - 8);
  char v23 = *(void (**)(void))(v22 + 16);
  uint64_t v61 = v20;
  v23();
  id v24 = [v21 uniqueIdentifier];
  BOOL v25 = a3 != 0;
  LODWORD(a3) = AWDLTrafficRegistrationService.serviceType.getter((uint64_t)v24);
  char v26 = AWDLTrafficRegistrationService.serviceType.getter(a2);
  if ((_DWORD)a3 != 2 || v26 != 2)
  {

    BOOL v25 = 0;
    goto LABEL_7;
  }

  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  uint64_t v28 = a2;
  uint64_t v30 = v29;
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  if (v27 == v32 && v30 == v31)
  {

    swift_bridgeObjectRelease_n(v30, 2LL);
LABEL_7:
    uint64_t v33 = v58;
    uint64_t v34 = v59;
    goto LABEL_8;
  }

  uint64_t v51 = v27;
  uint64_t v52 = v31;
  int v54 = _stringCompareWithSmolCheck(_:_:expecting:)(v51, v30, v32, v31, 0LL);

  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(v52);
  uint64_t v33 = v58;
  uint64_t v34 = v59;
  if ((v54 & 1) == 0) {
    BOOL v25 = 1;
  }
LABEL_8:
  os_log_t v35 = *(void (**)(char *, uint64_t))(v22 + 8);
  v35(v33, v13);
  id v36 = (char *)v17 + *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v37 = *v34;
  *uint64_t v17 = v37;
  ((void (*)(char *, char *, uint64_t))v23)(v36, v61, v13);
  if (v25)
  {
    uint64_t v38 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v39 = v56;
    uint64_t v40 = (char *)v56 + v38;
    *uint64_t v56 = v37;
    ((void (*)(char *, char *, uint64_t))v23)((char *)v39 + v38, v36, v13);
    uint64_t v41 = v57;
    if (v57)
    {
      id v42 = v37;
      id v43 = v41;
      char v44 = static NSObject.== infix(_:_:)(v42, v43);
      (*(void (**)(void *, uint64_t))(v60 + 8))(v17, TupleTypeMetadata2);

      char v45 = v44 ^ 1;
    }

    else
    {
      uint64_t v48 = *(void (**)(void *, uint64_t))(v60 + 8);
      id v49 = v37;
      v48(v17, TupleTypeMetadata2);
      char v45 = 1;
    }

    v35(v40, v13);
  }

  else
  {
    id v46 = *(void (**)(void *, uint64_t))(v60 + 8);
    id v47 = v37;
    v46(v17, TupleTypeMetadata2);
    char v45 = 0;
  }

  return v45 & 1;
}

BOOL sub_100320B7C(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for AWDLPeer(0LL);
  __chkstk_darwin();
  char v10 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *a1;
  id v12 = [a2 uniqueIdentifier];
  int v13 = AWDLTrafficRegistrationService.serviceType.getter(v11);
  char v14 = AWDLTrafficRegistrationService.serviceType.getter((uint64_t)v12);

  if (v13 != 2 || v14 != 2) {
    return 0LL;
  }
  v39[1] = a3;
  uint64_t v16 = AWDLTrafficRegistrationServiceAirPlay;
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v19 = v18;
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  if (v17 == v20 && v19 == v21)
  {
    swift_bridgeObjectRelease_n(v19, 2LL);
    p_os_log_type_t type = &stru_100401FF0.type;
  }

  else
  {
    uint64_t v23 = v21;
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v20, v21, 0LL);
    swift_bridgeObjectRelease(v19);
    *(void *)&double v25 = swift_bridgeObjectRelease(v23).n128_u64[0];
    p_os_log_type_t type = (char **)(&stru_100401FF0 + 16);
    if ((v24 & 1) == 0) {
      return 1LL;
    }
  }

  id v27 = objc_msgSend(a2, p_type[472], v25);
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  uint64_t v30 = v29;
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  uint64_t v33 = v31;
  if (v28 == v32 && v30 == v31)
  {

    swift_bridgeObjectRelease_n(v30, 2LL);
  }

  else
  {
    char v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v32, v31, 0LL);

    swift_bridgeObjectRelease(v30);
    swift_bridgeObjectRelease(v33);
    if ((v34 & 1) == 0) {
      return 1LL;
    }
  }

  sub_100304FBC(a4 & 0xFFFFFFFFFFFFLL, (uint64_t)v10);
  os_log_t v35 = &v10[*(int *)(v8 + 68)];
  uint64_t v36 = *(void *)v35;
  uint64_t v37 = v35[12];
  sub_10005802C((uint64_t)v10, type metadata accessor for AWDLPeer);
  if (v37 << 32 == 0x400000000LL) {
    return 0LL;
  }
  return (*(unsigned __int8 *)AWDLActionFrame.RealtimeGroup.Flags.airPlaySender.unsafeMutableAddressor() & ~(_DWORD)v36) == 0;
}

void sub_100320DC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v4)
  {
    while (1)
    {
      if ((a2 & 0xC000000000000001LL) != 0)
      {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a2);
      }

      else
      {
        if (!*(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10))
        {
          __break(1u);
          return;
        }

        id v5 = *(id *)(a2 + 32);
      }

      uint64_t v6 = v5;
      sub_100058CD0(0LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
      char v7 = static NSObject.== infix(_:_:)(v6, a1);

      if ((v7 & 1) == 0)
      {
        for (uint64_t i = 0LL; ; ++i)
        {
          unint64_t v12 = i + 1;
          if (__OFADD__(i, 1LL)) {
            break;
          }
          if (v12 == v4) {
            return;
          }
          if ((a2 & 0xC000000000000001LL) != 0)
          {
            id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i + 1, a2);
          }

          else
          {
            if ((v12 & 0x8000000000000000LL) != 0) {
              goto LABEL_18;
            }
            if (v12 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
              goto LABEL_19;
            }
            id v9 = *(id *)(a2 + 32 + 8 * v12);
          }

          char v10 = v9;
          char v11 = static NSObject.== infix(_:_:)(v9, a1);

          if ((v11 & 1) != 0) {
            return;
          }
        }

        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        uint64_t v13 = a2 < 0 ? a2 : a2 & 0xFFFFFFFFFFFFFF8LL;
        swift_bridgeObjectRetain(a2);
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v13);
        swift_bridgeObjectRelease(a2);
        if (v4) {
          continue;
        }
      }

      return;
    }
  }

uint64_t sub_100320F58(unint64_t a1)
{
  uint64_t v3 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *uint64_t v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v3 < 0 || (v3 & 0x4000000000000000LL) != 0)
  {
    uint64_t v3 = sub_10032CC2C(v3);
    *uint64_t v1 = v3;
  }

  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8LL;
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      uint64_t v9 = v5 + 8 * a1;
      uint64_t v10 = *(void *)(v9 + 32);
      char v11 = memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
      specialized Array._endMutation()(v11);
      return v10;
    }
  }

  char v13 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v13,  1046LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_100321038(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v22, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v7);
  if (result)
  {
    uint64_t v9 = result;
    uint64_t v10 = (uint64_t *)(result + *(void *)(*(void *)result + 536LL));
    swift_beginAccess(v10, v19, 0LL, 0LL);
    uint64_t v18 = *v10;
    __chkstk_darwin();
    v17[2] = a3;
    v17[3] = a4;
    uint64_t v17[4] = a2;
    uint64_t v11 = sub_100058CD0( 255LL,  (unint64_t *)&unk_10040CC00,  &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
    uint64_t v13 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation(255LL, a3, a4, v12);
    unint64_t v14 = sub_100245750();
    uint64_t v15 = type metadata accessor for Dictionary(0LL, v11, v13, v14);
    swift_bridgeObjectRetain(v18);
    uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v15);
    Collection.firstIndex(where:)(v20, sub_100333400, v17, v15, WitnessTable);
    swift_bridgeObjectRelease(v18);
    LODWORD(v13) = v21;
    sub_100022570(v20[0], v20[1], v21);
    if ((_DWORD)v13 != 255) {
      sub_1003211B8(a2, 1);
    }
    return swift_release(v9);
  }

  return result;
}

void sub_1003211B8(char *a1, int a2)
{
  uint64_t v3 = v2;
  int v285 = a2;
  uint64_t v5 = *(void *)v2;
  uint64_t v271 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v270 = *(void *)(v271 - 8);
  __chkstk_darwin();
  __n128 v269 = (uint64_t *)((char *)&v262 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = *(void *)(v5 + 408);
  uint64_t v8 = *(void *)(v5 + 416);
  uint64_t v9 = *(void *)(v8 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v9,  v7,  &protocol requirements base descriptor for P2PControls);
  uint64_t v304 = v9;
  uint64_t v305 = v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v9,  v7,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v12 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v302 = AssociatedConformanceWitness;
  uint64_t v303 = AssociatedTypeWitness;
  uint64_t v13 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v12,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.PreferencesBacking: PreferencesStorage);
  uint64_t v15 = type metadata accessor for Preferences(0LL, v12, v13, v14);
  uint64_t v300 = *(void *)(v15 - 8);
  uint64_t v301 = v15;
  __chkstk_darwin();
  uint64_t v299 = (char *)&v262 - v16;
  sub_100002274((uint64_t *)&unk_1004104A0);
  __chkstk_darwin();
  uint64_t v263 = (uint64_t)&v262 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v273 = (uint64_t)&v262 - v18;
  __chkstk_darwin();
  uint64_t v272 = (uint64_t)&v262 - v19;
  __chkstk_darwin();
  unsigned __int8 v21 = (char *)&v262 - v20;
  uint64_t v22 = type metadata accessor for AWDLPeer(0LL);
  uint64_t v266 = *(void *)(v22 - 8);
  __chkstk_darwin();
  char v24 = (char *)&v262 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v264 = (uint64_t)&v262 - v25;
  __chkstk_darwin();
  uint64_t v265 = (uint64_t)&v262 - v26;
  __chkstk_darwin();
  uint64_t v286 = (uint64_t)&v262 - v27;
  __chkstk_darwin();
  uint64_t v287 = (uint64_t)&v262 - v28;
  __chkstk_darwin();
  uint64_t v291 = (uint64_t)&v262 - v29;
  __chkstk_darwin();
  uint64_t v308 = (uint64_t)&v262 - v30;
  uint64_t v267 = v31;
  __chkstk_darwin();
  uint64_t v33 = (char *)&v262 - v32;
  uint64_t v309 = a1;
  id v34 = [a1 peerAddress];
  WiFiMACAddress.wifiAddress.getter();
  uint64_t v36 = v35;

  unint64_t v306 = v36 & 0xFFFFFFFFFFFFLL;
  sub_100304FBC(v36 & 0xFFFFFFFFFFFFLL, (uint64_t)v33);
  uint64_t v37 = *(void *)&v3[*(void *)(*(void *)v3 + 704LL)];
  swift_unownedRetainStrong(v37);
  uint64_t v38 = sub_1002CF2F0();
  unint64_t v313 = v39;
  uint64_t v314 = v40;
  uint64_t v42 = v41;
  uint64_t v282 = v37;
  swift_release(v37);
  uint64_t v310 = (int *)v22;
  sub_1000226B0((uint64_t)&v33[*(int *)(v22 + 56)], (uint64_t)v21, (uint64_t *)&unk_1004104A0);
  uint64_t v43 = type metadata accessor for AWDLActionFrame.DataPathState(0LL);
  char v44 = *(uint64_t (**)(void, void))(*(void *)(v43 - 8) + 48LL);
  uint64_t v280 = v43;
  uint64_t v279 = (unsigned int (*)(void, void, void))v44;
  int v45 = v44(v21, 1LL);
  uint64_t v268 = v24;
  if (v45 == 1)
  {
    sub_1000225EC((uint64_t)v21, (uint64_t *)&unk_1004104A0);
    uint64_t v46 = 0LL;
    unint64_t v47 = 0LL;
    unint64_t v295 = 0LL;
    unint64_t v294 = 0LL;
    uint64_t v296 = 0LL;
    uint64_t v293 = 0LL;
    int v312 = 1;
  }

  else
  {
    uint64_t v48 = *((unsigned __int16 *)v21 + 15);
    uint64_t v49 = *(unsigned int *)(v21 + 26);
    unint64_t v50 = v49 | (unint64_t)(v48 << 32);
    int v312 = v21[32];
    sub_10005802C((uint64_t)v21, type metadata accessor for AWDLActionFrame.DataPathState);
    uint64_t v296 = v48;
    uint64_t v51 = v48 >> 8;
    uint64_t v46 = v49;
    unint64_t v47 = v50 >> 8;
    unint64_t v295 = v50 >> 16;
    unint64_t v294 = v50 >> 24;
    uint64_t v293 = v51;
  }

  uint64_t v52 = v313;
  uint64_t v283 = v8;
  uint64_t v290 = v46;
  if (v313)
  {
    v315[0] = v38;
    v315[1] = (uint64_t)v313;
    __int16 v316 = v42;
    char v317 = BYTE2(v42);
    char v318 = BYTE3(v42);
    char v319 = BYTE4(v42);
    char v320 = BYTE5(v42);
    int v321 = v314;
    __int16 v322 = WORD2(v314);
    swift_bridgeObjectRetain(v313);
    sub_100324024(v315, &v323);
    uint64_t v281 = 0LL;
    swift_bridgeObjectRelease(v52);
    uint64_t v53 = BYTE2(v323);
    uint64_t v54 = BYTE3(v323);
    uint64_t v55 = BYTE4(v323);
    uint64_t v278 = v323;
    uint64_t v277 = BYTE1(v323);
    uint64_t v288 = BYTE5(v323);
    BOOL v56 = (v312 & 1) == 0
       && static NANClusterChangeEvent.__derived_struct_equals(_:_:)( ((unint64_t)v296 << 32) | (v293 << 40) | ((unint64_t)v294 << 24) | ((unint64_t)v295 << 16) | ((unint64_t)v47 << 8) | v46,  v323 | ((unint64_t)BYTE1(v323) << 8) | ((unint64_t)BYTE2(v323) << 16) | ((unint64_t)BYTE3(v323) << 24) | ((unint64_t)BYTE4(v323) << 32) | ((unint64_t)BYTE5(v323) << 40));
    uint64_t v274 = v55;
    uint64_t v275 = v54;
    uint64_t v276 = v53;
    swift_bridgeObjectRelease(v52);
  }

  else
  {
    uint64_t v278 = 0LL;
    uint64_t v277 = 0LL;
    uint64_t v276 = 0LL;
    uint64_t v275 = 0LL;
    uint64_t v274 = 0LL;
    uint64_t v288 = 0LL;
    uint64_t v281 = 0LL;
    uint64_t v314 = 0x300000000LL;
    BOOL v56 = v312;
  }

  uint64_t v292 = AWDLPeer.infrastructureChannel.getter();
  uint64_t v57 = (uint64_t (*)(void, void))(v292 & 0xFFFFFFFFFFFFLL);
  id v58 = &v3[*(void *)(*(void *)v3 + 160LL)];
  id v59 = v309;
  uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
  os_log_type_t v61 = static os_log_type_t.default.getter();
  BOOL v62 = os_log_type_enabled(v60, v61);
  uint64_t v309 = v3;
  uint64_t v311 = v58;
  unint64_t v289 = v47;
  uint64_t v284 = v59;
  double v307 = v57;
  if (v62)
  {
    uint64_t v63 = swift_slowAlloc(42LL, -1LL);
    uint64_t v64 = swift_slowAlloc(128LL, -1LL);
    v315[0] = v64;
    *(_DWORD *)uint64_t v63 = 136315906;
    BOOL v298 = v56;
    id v65 = [v59 uniqueIdentifier];
    uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
    id v297 = v33;
    unint64_t v68 = v67;

    uint64_t v323 = sub_10000235C(v66, v68, v315);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v323, &v324);

    swift_bridgeObjectRelease(v68);
    *(_WORD *)(v63 + 12) = 2080;
    uint64_t v69 = Optional<A>.description.getter(v314 & 0xFFFFFFFFFFFFLL);
    unint64_t v71 = v70;
    uint64_t v323 = sub_10000235C(v69, v70, v315);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v323, &v324);
    swift_bridgeObjectRelease(v71);
    *(_WORD *)(v63 + 22) = 2080;
    uint64_t v72 = WiFiAddress.description.getter(v306);
    unint64_t v74 = v73;
    uint64_t v323 = sub_10000235C(v72, v73, v315);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v323, &v324);
    swift_bridgeObjectRelease(v74);
    *(_WORD *)(v63 + 32) = 2080;
    BOOL v75 = v298;
    uint64_t v76 = Optional<A>.description.getter((uint64_t)v307);
    unint64_t v78 = v77;
    uint64_t v323 = sub_10000235C(v76, v77, v315);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v323, &v324);
    unint64_t v79 = v78;
    uint64_t v33 = v297;
    swift_bridgeObjectRelease(v79);
    _os_log_impl( (void *)&_mh_execute_header,  v60,  v61,  "Evaluating retro mode for %s with my infra: %s, peer %s infra: %s",  (uint8_t *)v63,  0x2Au);
    swift_arrayDestroy(v64, 4LL, &type metadata for Any[8]);
    swift_slowDealloc(v64, -1LL, -1LL);
    swift_slowDealloc(v63, -1LL, -1LL);

    uint64_t v80 = v310;
  }

  else
  {

    uint64_t v80 = v310;
    BOOL v75 = v56;
  }

  unint64_t v81 = &v33[v80[16]];
  if ((v81[2] & 1) != 0) {
    goto LABEL_18;
  }
  uint64_t v83 = v304;
  uint64_t v82 = v305;
  uint64_t v84 = swift_getAssociatedTypeWitness(255LL, v304, v305, &protocol requirements base descriptor for P2PControls);
  uint64_t v85 = swift_getAssociatedConformanceWitness( v83,  v82,  v84,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
  unint64_t v86 = *(uint64_t (**)(void, void))(v85 + 8);
  uint64_t v87 = swift_checkMetadataState(0LL, v84);
  uint64_t v88 = v86(v87, v85);
  uint64_t v89 = *WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor();
  uint64_t v323 = v88;
  v315[0] = v89;
  unint64_t v90 = sub_100270384();
  swift_bridgeObjectRetain_n(v89, 2LL);
  ExtendableOptionSet.formIntersection(_:)( (uint64_t (*)(_BYTE *, void))&v323,  &type metadata for WiFiDriverCapabilities.Kind,  v90);
  uint64_t v91 = v315[0];
  LOBYTE(v90) = sub_10007990C(v315[0], v89);
  swift_bridgeObjectRelease(v88);
  swift_bridgeObjectRelease(v89);
  swift_bridgeObjectRelease(v91);
  if ((v90 & 1) != 0)
  {
    int v92 = *PreferenceDefaults.isiPad.unsafeMutableAddressor();
    uint64_t v93 = v308;
    sub_100057FE8((uint64_t)v33, v308, type metadata accessor for AWDLPeer);
    if (v92 == 1)
    {
      uint64_t v94 = sub_10005802C(v93, type metadata accessor for AWDLPeer);
LABEL_23:
      uint64_t v103 = (os_log_s *)Logger.logObject.getter(v94);
      os_log_type_t v104 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v103, v104))
      {
        uint64_t v105 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v105 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v103,  v104,  "Skipping evaluation of infra disconnect policy",  v105,  2u);
        swift_slowDealloc(v105, -1LL, -1LL);
      }

      sub_10005802C((uint64_t)v33, type metadata accessor for AWDLPeer);
      return;
    }
  }

  else
  {
LABEL_18:
    uint64_t v93 = v308;
    sub_100057FE8((uint64_t)v33, v308, type metadata accessor for AWDLPeer);
  }

  uint64_t v95 = v93 + v80[17];
  if ((unint64_t)*(unsigned __int8 *)(v95 + 12) << 32 == 0x400000000LL)
  {
    sub_10005802C(v93, type metadata accessor for AWDLPeer);
  }

  else
  {
    int v96 = *(unsigned __int8 *)(v95 + 24);
    int v97 = *(unsigned __int8 *)AWDLActionFrame.RealtimeGroup.AdditionalFlags.disableWiFiDisconnect.unsafeMutableAddressor() & ~v96;
    uint64_t v94 = sub_10005802C(v93, type metadata accessor for AWDLPeer);
    if (!v97) {
      goto LABEL_23;
    }
  }

  uint64_t v98 = v302;
  id v99 = *(void (**)(void, void))(v302 + 120);
  uint64_t v100 = swift_checkMetadataState(0LL, v303);
  uint64_t v101 = v299;
  v99(v100, v98);
  uint64_t v102 = v301;
  LOBYTE(v99) = Preferences.disableWiFiDisconnectRemoteCamera.getter(v301);
  uint64_t v94 = (*(uint64_t (**)(char *, uint64_t))(v300 + 8))(v101, v102);
  uint64_t v106 = v314 & 0xFF00000000LL;
  uint64_t v107 = BYTE4(v314);
  BOOL v298 = v75;
  if ((v314 & 0xFF00000000LL) == 0x300000000LL || BYTE4(v314))
  {
    uint64_t v118 = v291;
    sub_100057FE8((uint64_t)v33, v291, type metadata accessor for AWDLPeer);
    unint64_t v119 = (unint64_t)v307;
  }

  else
  {
    uint64_t v109 = v304;
    uint64_t v108 = v305;
    uint64_t v110 = swift_getAssociatedTypeWitness(255LL, v304, v305, &protocol requirements base descriptor for P2PControls);
    uint64_t v111 = swift_getAssociatedConformanceWitness( v109,  v108,  v110,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
    unint64_t v112 = *(uint64_t (**)(void, void))(v111 + 8);
    uint64_t v113 = swift_checkMetadataState(0LL, v110);
    uint64_t v114 = v112(v113, v111);
    uint64_t v115 = *WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor();
    uint64_t v323 = v114;
    v315[0] = v115;
    unint64_t v116 = sub_100270384();
    swift_bridgeObjectRetain_n(v115, 2LL);
    ExtendableOptionSet.formIntersection(_:)( (uint64_t (*)(_BYTE *, void))&v323,  &type metadata for WiFiDriverCapabilities.Kind,  v116);
    uint64_t v117 = v315[0];
    LOBYTE(v1swift_unknownObjectWeakDestroy(v0 + 16) = sub_10007990C(v315[0], v115);
    swift_bridgeObjectRelease(v114);
    swift_bridgeObjectRelease(v115);
    swift_bridgeObjectRelease(v117);
    uint64_t v118 = v291;
    sub_100057FE8((uint64_t)v33, v291, type metadata accessor for AWDLPeer);
    unint64_t v119 = (unint64_t)v307;
    if ((v116 & 1) == 0)
    {
      sub_10005802C(v118, type metadata accessor for AWDLPeer);
      uint64_t v120 = v119 & 0xFF00000000LL;
      BOOL v121 = 1;
      uint64_t v122 = v292;
      goto LABEL_35;
    }
  }

  uint64_t v120 = v119 & 0xFF00000000LL;
  if ((v119 & 0xFF00000000LL) == 0x300000000LL)
  {
    uint64_t v123 = v287;
    sub_100057FE8(v118, v287, type metadata accessor for AWDLPeer);
    uint64_t v122 = v292;
LABEL_34:
    sub_10005802C(v123, type metadata accessor for AWDLPeer);
    sub_10005802C(v118, type metadata accessor for AWDLPeer);
    BOOL v121 = 0;
    goto LABEL_35;
  }

  uint64_t v122 = v292;
  uint64_t v123 = v287;
  sub_100057FE8(v118, v287, type metadata accessor for AWDLPeer);
  if ((v122 & 0xFF00000000LL) != 0) {
    goto LABEL_34;
  }
  uint64_t v126 = v272;
  sub_1000226B0(v123 + v80[14], v272, (uint64_t *)&unk_1004104A0);
  if (v279(v126, 1LL, v280) == 1)
  {
    sub_1000225EC(v126, (uint64_t *)&unk_1004104A0);
    sub_10005802C(v123, type metadata accessor for AWDLPeer);
    sub_10005802C(v118, type metadata accessor for AWDLPeer);
  }

  else
  {
    char v236 = *(_BYTE *)(v126 + 84);
    sub_10005802C(v126, type metadata accessor for AWDLActionFrame.DataPathState);
    sub_10005802C(v123, type metadata accessor for AWDLPeer);
    sub_10005802C(v118, type metadata accessor for AWDLPeer);
    if ((v236 & 1) != 0)
    {
      BOOL v121 = 0;
      goto LABEL_35;
    }
  }

  BOOL v121 = v106 == 0x300000000LL || (_DWORD)v314 != (_DWORD)v122;
LABEL_35:
  if (v106 == 0x300000000LL)
  {
    char v124 = v120 != 0x300000000LL || v121;
    if ((v124 & 1) == 0) {
      goto LABEL_111;
    }
    goto LABEL_57;
  }

  if (v120 != 0x300000000LL && (_DWORD)v122 == (_DWORD)v314)
  {
    if ((_DWORD)v107 == 3)
    {
      char v125 = BYTE4(v122) != 3 || v121;
      if ((v125 & 1) == 0) {
        goto LABEL_111;
      }
      goto LABEL_58;
    }

    if (BYTE4(v122) != 3
      && ((0x801004u >> (8 * BYTE4(v314))) & 0xFFC) == ((0x801004u >> (8 * BYTE4(v122))) & 0xFFC)
      && !v121)
    {
      goto LABEL_111;
    }
  }

  if (v107 < 2)
  {
LABEL_57:
    BOOL v128 = 0;
    goto LABEL_64;
  }

LABEL_128:
  sub_10005802C(v258, type metadata accessor for AWDLPeer);
  uint64_t v149 = sub_10005802C(v144, type metadata accessor for AWDLPeer);
  if (v234 == 0x300000000LL) {
    goto LABEL_129;
  }
LABEL_82:
  uint64_t v150 = (os_log_s *)Logger.logObject.getter(v149);
  os_log_type_t v151 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v150, v151))
  {
    uint64_t v152 = swift_slowAlloc(22LL, -1LL);
    uint64_t v153 = swift_slowAlloc(64LL, -1LL);
    v315[0] = v153;
    unsigned __int8 v154 = v290;
    unsigned __int8 v155 = v289;
    *(_DWORD *)uint64_t v152 = 136315394;
    unsigned __int8 v156 = v295;
    unsigned __int8 v157 = v294;
    unsigned __int8 v158 = v296;
    uint64_t v159 = v293;
    uint64_t v160 = v309;
    if (v312)
    {
      uint64_t v161 = (unsigned __int8 *)WiFiAddress.zero.unsafeMutableAddressor();
      unsigned __int8 v154 = *v161;
      unsigned __int8 v155 = v161[1];
      unsigned __int8 v156 = v161[2];
      unsigned __int8 v157 = v161[3];
      unsigned __int8 v158 = v161[4];
      uint64_t v159 = v161[5];
    }

    uint64_t v162 = WiFiAddress.description.getter(((unint64_t)v158 << 32) | (v159 << 40) | ((unint64_t)v157 << 24) | ((unint64_t)v156 << 16) | ((unint64_t)v155 << 8) | v154);
    unint64_t v164 = v163;
    uint64_t v323 = sub_10000235C(v162, v163, v315);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v323, &v324);
    swift_bridgeObjectRelease(v164);
    unsigned int v165 = v278;
    *(_WORD *)(v152 + 12) = 2080;
    unsigned int v166 = v277;
    unsigned int v167 = v276;
    unsigned int v168 = v275;
    uint64_t v169 = v274;
    uint64_t v170 = v288;
    if (!v313)
    {
      uint64_t v171 = (unsigned __int8 *)WiFiAddress.zero.unsafeMutableAddressor();
      unsigned int v165 = *v171;
      unsigned int v166 = v171[1];
      unsigned int v167 = v171[2];
      unsigned int v168 = v171[3];
      uint64_t v169 = v171[4];
      uint64_t v170 = v171[5];
    }

    uint64_t v172 = WiFiAddress.description.getter((v169 << 32) | (v170 << 40) | ((unint64_t)v168 << 24) | ((unint64_t)v167 << 16) | ((unint64_t)v166 << 8) | v165);
    unint64_t v174 = v173;
    uint64_t v323 = sub_10000235C(v172, v173, v315);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v323, &v324);
    swift_bridgeObjectRelease(v174);
    _os_log_impl( (void *)&_mh_execute_header,  v150,  v151,  "Comparing peer SSID hash %s with my SSID hash %s",  (uint8_t *)v152,  0x16u);
    swift_arrayDestroy(v153, 2LL, &type metadata for Any[8]);
    swift_slowDealloc(v153, -1LL, -1LL);
    swift_slowDealloc(v152, -1LL, -1LL);
  }

  else
  {

    uint64_t v160 = v309;
  }

  uint64_t v175 = v284;
  if ((v285 & 1) == 0)
  {
    if ((v312 & 1) != 0)
    {
      if (!v313) {
        goto LABEL_95;
      }
    }

    else if (v313 {
           && static NANClusterChangeEvent.__derived_struct_equals(_:_:)( ((unint64_t)v296 << 32) | (v293 << 40) | ((unint64_t)v294 << 24) | ((unint64_t)v295 << 16) | ((unint64_t)v289 << 8) | v290,  (v274 << 32) | (v288 << 40) | ((unint64_t)v275 << 24) | ((unint64_t)v276 << 16) | ((unint64_t)v277 << 8) | v278))
    }
    {
LABEL_95:
      id v176 = v175;
      uint64_t v177 = (os_log_s *)Logger.logObject.getter(v176);
      os_log_type_t v178 = static os_log_type_t.default.getter();
      BOOL v179 = os_log_type_enabled(v177, v178);
      uint64_t v314 = (uint64_t)v176;
      if (v179)
      {
        uint64_t v180 = swift_slowAlloc(22LL, -1LL);
        uint64_t v181 = swift_slowAlloc(64LL, -1LL);
        v315[0] = v181;
        *(_DWORD *)uint64_t v180 = 136315394;
        id v182 = [v176 uniqueIdentifier];
        uint64_t v183 = static String._unconditionallyBridgeFromObjectiveC(_:)(v182);
        unint64_t v185 = v184;

        uint64_t v323 = sub_10000235C(v183, v185, v315);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v323, &v324);

        swift_bridgeObjectRelease(v185);
        *(_WORD *)(v180 + 12) = 2080;
        uint64_t v186 = WiFiAddress.description.getter(v306);
        unint64_t v188 = v187;
        uint64_t v323 = sub_10000235C(v186, v187, v315);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v323, &v324);
        swift_bridgeObjectRelease(v188);
        _os_log_impl( (void *)&_mh_execute_header,  v177,  v178,  "Not entering retro mode on responder for %s from %s because expecting to steer infra",  (uint8_t *)v180,  0x16u);
        swift_arrayDestroy(v181, 2LL, &type metadata for Any[8]);
        swift_slowDealloc(v181, -1LL, -1LL);
        swift_slowDealloc(v180, -1LL, -1LL);
      }

      else
      {
      }

      uint64_t v238 = (uint64_t)v297;
      unint64_t v313 = (void *)type metadata accessor for P2PTimer(0LL);
      uint64_t v239 = (uint64_t)v269;
      *__n128 v269 = 5LL;
      uint64_t v240 = v270;
      uint64_t v241 = v271;
      (*(void (**)(uint64_t, void, uint64_t))(v270 + 104))( v239,  enum case for DispatchTimeInterval.seconds(_:),  v271);
      uint64_t v242 = (void *)*OS_dispatch_queue.awdl.unsafeMutableAddressor();
      uint64_t v243 = swift_allocObject(&unk_1003FB908, 24LL, 7LL);
      swift_weakInit(v243 + 16, v160);
      uint64_t v244 = v238;
      uint64_t v245 = (uint64_t)v268;
      sub_100057FE8(v244, (uint64_t)v268, type metadata accessor for AWDLPeer);
      uint64_t v246 = *(unsigned __int8 *)(v266 + 80);
      uint64_t v247 = (v246 + 48) & ~v246;
      uint64_t v248 = (void *)swift_allocObject(&unk_1003FB958, v247 + v267, v246 | 7);
      uint64_t v249 = v283;
      v248[2] = v305;
      v248[3] = v249;
      uint64_t v250 = (void *)v314;
      v248[4] = v243;
      v248[5] = v250;
      sub_100022628(v245, (uint64_t)v248 + v247, type metadata accessor for AWDLPeer);
      id v251 = v250;
      id v252 = v242;
      swift_retain();
      static P2PTimer.async(after:on:execute:)(v239, v252, (uint64_t)sub_100332990, (uint64_t)v248);

      swift_release(v248);
      (*(void (**)(uint64_t, uint64_t))(v240 + 8))(v239, v241);
      sub_10005802C((uint64_t)v297, type metadata accessor for AWDLPeer);
      swift_release(v243);
      return;
    }
  }

  unint64_t v189 = v175;
  unint64_t v190 = (os_log_s *)Logger.logObject.getter(v189);
  os_log_type_t v191 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v190, v191))
  {
    uint64_t v192 = swift_slowAlloc(22LL, -1LL);
    uint64_t v193 = swift_slowAlloc(64LL, -1LL);
    v315[0] = v193;
    *(_DWORD *)uint64_t v192 = 136315394;
    id v194 = [v189 uniqueIdentifier];
    uint64_t v195 = static String._unconditionallyBridgeFromObjectiveC(_:)(v194);
    unint64_t v197 = v196;

    uint64_t v323 = sub_10000235C(v195, v197, v315);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v323, &v324);

    swift_bridgeObjectRelease(v197);
    *(_WORD *)(v192 + 12) = 2080;
    uint64_t v198 = WiFiAddress.description.getter(v306);
    unint64_t v200 = v199;
    uint64_t v323 = sub_10000235C(v198, v199, v315);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v323, &v324);
    swift_bridgeObjectRelease(v200);
    _os_log_impl( (void *)&_mh_execute_header,  v190,  v191,  "Entering retro mode for %s from %s, disabling infrastructure Wi-Fi",  (uint8_t *)v192,  0x16u);
    swift_arrayDestroy(v193, 2LL, &type metadata for Any[8]);
    swift_slowDealloc(v193, -1LL, -1LL);
    swift_slowDealloc(v192, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v201 = (uint64_t)v297;
  uint64_t v202 = v282;
  swift_unownedRetainStrong(v282);
  sub_1002D4384(1);
  swift_release(v202);
  uint64_t v203 = *(void *)(*(void *)v160 + 752LL);
  id v204 = *(void **)&v160[v203];
  *(void *)&v160[v203] = v189;

  uint64_t v205 = *(void *)(*(void *)v160 + 496LL);
  uint64_t v206 = *(void *)&v160[v205];
  BOOL v207 = __OFADD__(v206, 1LL);
  uint64_t v208 = v206 + 1;
  if (v207)
  {
    __break(1u);
  }

  else
  {
    *(void *)&v160[v205] = v208;
    uint64_t v209 = v305;
    uint64_t v210 = swift_getAssociatedTypeWitness(255LL, v304, v305, &protocol requirements base descriptor for P2PControls);
    uint64_t v211 = swift_getAssociatedConformanceWitness( v283,  v209,  v210,  &protocol requirements base descriptor for AWDLController,  &associated conformance descriptor for AWDLController.P2PControls.Driver: AWDLWiFiDriver);
    uint64_t v212 = *(void (**)(void, void, void, void))(v211 + 80);
    unint64_t v213 = v189;
    uint64_t v214 = swift_checkMetadataState(0LL, v210);
    uint64_t v215 = v281;
    v212(32LL, v306, v214, v211);
    if (v215)
    {
      unint64_t v216 = v213;
      swift_errorRetain(v215);
      unint64_t v217 = v216;
      uint64_t v218 = swift_errorRetain(v215);
      uint64_t v219 = (os_log_s *)Logger.logObject.getter(v218);
      os_log_type_t v220 = static os_log_type_t.error.getter(v219);
      if (os_log_type_enabled(v219, v220))
      {
        uint64_t v221 = swift_slowAlloc(32LL, -1LL);
        unint64_t v313 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v314 = swift_slowAlloc(64LL, -1LL);
        v315[0] = v314;
        *(_DWORD *)uint64_t v221 = 136315650;
        id v222 = [v217 uniqueIdentifier];
        uint64_t v223 = static String._unconditionallyBridgeFromObjectiveC(_:)(v222);
        unint64_t v225 = v224;

        uint64_t v323 = sub_10000235C(v223, v225, v315);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v323, &v324);

        swift_bridgeObjectRelease(v225);
        *(_WORD *)(v221 + 12) = 2080;
        uint64_t v226 = WiFiAddress.description.getter(v306);
        unint64_t v228 = v227;
        uint64_t v323 = sub_10000235C(v226, v227, v315);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v323, &v324);
        swift_bridgeObjectRelease(v228);
        *(_WORD *)(v221 + 22) = 2112;
        swift_errorRetain(v215);
        uint64_t v229 = _swift_stdlib_bridgeErrorToNSError(v215);
        uint64_t v323 = v229;
        uint64_t v201 = (uint64_t)v297;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v323, &v324);
        uint64_t v230 = v313;
        *unint64_t v313 = v229;
        swift_errorRelease(v215);
        swift_errorRelease(v215);
        _os_log_impl( (void *)&_mh_execute_header,  v219,  v220,  "Failed to disable infrastructure Wi-Fi on entering retro mode for %s from %s: %@",  (uint8_t *)v221,  0x20u);
        uint64_t v231 = sub_100002274(&qword_100404DE0);
        swift_arrayDestroy(v230, 1LL, v231);
        swift_slowDealloc(v230, -1LL, -1LL);
        uint64_t v232 = v314;
        swift_arrayDestroy(v314, 2LL, &type metadata for Any[8]);
        swift_slowDealloc(v232, -1LL, -1LL);
        swift_slowDealloc(v221, -1LL, -1LL);
        swift_errorRelease(v215);
      }

      else
      {
        swift_errorRelease(v215);

        swift_errorRelease(v215);
        swift_errorRelease(v215);
      }
    }

    sub_10005802C(v201, type metadata accessor for AWDLPeer);
  }

void sub_100323018(id a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v7 = *v4;
  uint64_t v8 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation(255LL, v7[51], v7[52], a4);
  uint64_t v9 = type metadata accessor for Optional(0LL, v8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = &v104[-v11];
  uint64_t v115 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v114 = &v104[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  uint64_t v113 = &v104[-v14];
  __chkstk_darwin();
  uint64_t v16 = &v104[-v15];
  uint64_t v17 = (uint64_t **)((char *)v5 + v7[72]);
  swift_beginAccess(v17, v120, 0LL, 0LL);
  uint64_t v18 = *v17;
  if (*(void *)(*v17 + 16LL))
  {
    swift_bridgeObjectRetain(*v17);
    unint64_t v19 = sub_1003278A0((uint64_t)a1);
    if ((v20 & 1) != 0)
    {
      unint64_t v21 = v19;
      id v109 = a1;
      uint64_t v110 = v10;
      uint64_t v111 = v9;
      unint64_t v112 = v12;
      uint64_t v22 = *(unsigned int *)(v18 + 36);
      swift_bridgeObjectRelease(v18);
      uint64_t v23 = *v17;
      uint64_t v24 = sub_100058CD0( 0LL,  (unint64_t *)&unk_10040CC00,  &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
      unint64_t v25 = sub_100245750();
      swift_bridgeObjectRetain(v23);
      Dictionary.subscript.getter(v119, v16, v21, v22, 0LL, v23, v24, v8, v25);
      __n128 v26 = swift_bridgeObjectRelease(v23);
      uint64_t v27 = *(void (**)(_BYTE *, uint64_t, __n128))(v115 + 8);
      v27(v16, v8, v26);
      id v107 = v119[0];
      uint64_t v28 = *v17;
      swift_bridgeObjectRetain(*v17);
      Dictionary.subscript.getter(v119, v113, v21, v22, 0LL, v28, v24, v8, v25);
      swift_bridgeObjectRelease(v28);

      swift_beginAccess(v17, v119, 33LL, 0LL);
      uint64_t v29 = type metadata accessor for Dictionary(0LL, v24, v8, v25);
      Dictionary.remove(at:)(&v116, v16, v21, v22, 0LL, v29);
      uint64_t v108 = (void (*)(_BYTE *, uint64_t))v27;
      ((void (*)(_BYTE *, uint64_t))v27)(v16, v8);
      id v30 = v116;
      swift_endAccess(v119);

      sub_100306904();
      id v31 = v107;
      uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
      os_log_type_t v33 = static os_log_type_t.default.getter();
      int v34 = v33;
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v35 = swift_slowAlloc(32LL, -1LL);
        id v107 = (id)swift_slowAlloc(96LL, -1LL);
        v119[0] = v107;
        *(_DWORD *)uint64_t v35 = 136315650;
        os_log_t v106 = v32;
        id v36 = [v31 uniqueIdentifier];
        uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
        int v105 = v34;
        unint64_t v39 = v38;

        id v116 = (id)sub_10000235C(v37, v39, (uint64_t *)v119);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v117);

        *(void *)&double v40 = swift_bridgeObjectRelease(v39).n128_u64[0];
        *(_WORD *)(v35 + 12) = 2080;
        id v41 = objc_msgSend(v31, "peerAddress", v40);
        WiFiMACAddress.wifiAddress.getter();
        uint64_t v43 = v42;

        uint64_t v44 = WiFiAddress.description.getter(v43 & 0xFFFFFFFFFFFFLL);
        unint64_t v46 = v45;
        id v116 = (id)sub_10000235C(v44, v45, (uint64_t *)v119);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v117);

        *(void *)&double v47 = swift_bridgeObjectRelease(v46).n128_u64[0];
        *(_WORD *)(v35 + 22) = 2080;
        id v48 = objc_msgSend(v31, "peerAddress", v47);
        WiFiMACAddress.wifiAddress.getter();
        uint64_t v50 = v49;

        uint64_t v51 = WiFiAddress.description.getter(v50 & 0xFFFFFFFFFFFFLL);
        unint64_t v53 = v52;
        id v116 = (id)sub_10000235C(v51, v52, (uint64_t *)v119);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v117);

        swift_bridgeObjectRelease(v53);
        uint64_t v32 = v106;
        _os_log_impl( (void *)&_mh_execute_header,  v106,  (os_log_type_t)v105,  "Cleared responder traffic registration for %s from %s (cleared initiator registration to %s while in recovery)",  (uint8_t *)v35,  0x20u);
        id v54 = v107;
        swift_arrayDestroy(v107, 3LL, &type metadata for Any[8]);
        swift_slowDealloc(v54, -1LL, -1LL);
        swift_slowDealloc(v35, -1LL, -1LL);
      }

      else
      {
      }

      uint64_t v12 = v112;
      uint64_t v55 = v113;
      uint64_t v56 = v115;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v115 + 16))(v112, v113, v8);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v56 + 56))(v12, 0LL, 1LL, v8);
      sub_100313C9C(v31, (uint64_t)v12, v57, v58);

      uint64_t v10 = v110;
      uint64_t v9 = v111;
      (*(void (**)(_BYTE *, uint64_t))(v110 + 8))(v12, v111);
      v108(v55, v8);
      a1 = v109;
    }

    else
    {
      swift_bridgeObjectRelease(v18);
    }
  }

  id v59 = (uint64_t **)((char *)v5 + (*v5)[70]);
  swift_beginAccess(v59, v119, 0LL, 0LL);
  uint64_t v60 = *v59;
  if (*(void *)(*v59 + 16LL))
  {
    swift_bridgeObjectRetain(*v59);
    unint64_t v61 = sub_1003278A0((uint64_t)a1);
    if ((v62 & 1) != 0)
    {
      unint64_t v63 = v61;
      uint64_t v111 = v9;
      unint64_t v112 = v12;
      uint64_t v110 = v10;
      uint64_t v64 = *(unsigned int *)(v60 + 36);
      swift_bridgeObjectRelease(v60);
      uint64_t v65 = *v59;
      uint64_t v66 = sub_100058CD0( 0LL,  (unint64_t *)&unk_10040CC00,  &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
      unint64_t v67 = sub_100245750();
      swift_bridgeObjectRetain(v65);
      Dictionary.subscript.getter(&v116, v16, v63, v64, 0LL, v65, v66, v8, v67);
      __n128 v68 = swift_bridgeObjectRelease(v65);
      uint64_t v69 = *(_BYTE **)(v115 + 8);
      ((void (*)(_BYTE *, uint64_t, __n128))v69)(v16, v8, v68);
      id v109 = v116;
      uint64_t v70 = *v59;
      swift_bridgeObjectRetain(*v59);
      Dictionary.subscript.getter(&v116, v114, v63, v64, 0LL, v70, v66, v8, v67);
      swift_bridgeObjectRelease(v70);

      swift_beginAccess(v59, &v116, 33LL, 0LL);
      uint64_t v71 = type metadata accessor for Dictionary(0LL, v66, v8, v67);
      Dictionary.remove(at:)(&v118, v16, v63, v64, 0LL, v71);
      uint64_t v113 = v69;
      ((void (*)(_BYTE *, uint64_t))v69)(v16, v8);
      uint64_t v72 = (void *)v118;
      swift_endAccess(&v116);

      sub_100306904();
      id v73 = v109;
      unint64_t v74 = (os_log_s *)Logger.logObject.getter(v73);
      os_log_type_t v75 = static os_log_type_t.default.getter();
      int v76 = v75;
      if (os_log_type_enabled(v74, v75))
      {
        uint64_t v77 = swift_slowAlloc(32LL, -1LL);
        id v109 = (id)swift_slowAlloc(96LL, -1LL);
        id v116 = v109;
        *(_DWORD *)uint64_t v77 = 136315650;
        LODWORD(v108) = v76;
        id v78 = [v73 uniqueIdentifier];
        uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
        unint64_t v81 = v80;

        uint64_t v118 = sub_10000235C(v79, v81, (uint64_t *)&v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v119);

        *(void *)&double v82 = swift_bridgeObjectRelease(v81).n128_u64[0];
        *(_WORD *)(v77 + 12) = 2080;
        id v83 = objc_msgSend(v73, "peerAddress", v82);
        WiFiMACAddress.wifiAddress.getter();
        uint64_t v85 = v84;

        uint64_t v86 = WiFiAddress.description.getter(v85 & 0xFFFFFFFFFFFFLL);
        unint64_t v88 = v87;
        uint64_t v118 = sub_10000235C(v86, v87, (uint64_t *)&v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v119);

        *(void *)&double v89 = swift_bridgeObjectRelease(v88).n128_u64[0];
        *(_WORD *)(v77 + 22) = 2080;
        id v90 = objc_msgSend(v73, "peerAddress", v89);
        WiFiMACAddress.wifiAddress.getter();
        uint64_t v92 = v91;

        uint64_t v93 = WiFiAddress.description.getter(v92 & 0xFFFFFFFFFFFFLL);
        unint64_t v95 = v94;
        uint64_t v118 = sub_10000235C(v93, v94, (uint64_t *)&v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v119);

        swift_bridgeObjectRelease(v95);
        _os_log_impl( (void *)&_mh_execute_header,  v74,  (os_log_type_t)v108,  "Cleared responder traffic registration for %s from %s (cleared initiator registration to %s)",  (uint8_t *)v77,  0x20u);
        id v96 = v109;
        swift_arrayDestroy(v109, 3LL, &type metadata for Any[8]);
        swift_slowDealloc(v96, -1LL, -1LL);
        swift_slowDealloc(v77, -1LL, -1LL);
      }

      else
      {
      }

      uint64_t v98 = v110;
      uint64_t v97 = v111;
      uint64_t v99 = (uint64_t)v112;
      uint64_t v101 = v114;
      uint64_t v100 = v115;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v115 + 16))(v112, v114, v8);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v100 + 56))(v99, 0LL, 1LL, v8);
      sub_100313C9C(v73, v99, v102, v103);

      (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v99, v97);
      ((void (*)(_BYTE *, uint64_t))v113)(v101, v8);
    }

    else
    {
      swift_bridgeObjectRelease(v60);
    }
  }

uint64_t sub_1003239D4(void *a1, uint64_t a2, int a3)
{
  int v34 = a3;
  v29[1] = a2;
  id v31 = a1;
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(*v3 + 408);
  uint64_t v6 = *(void *)(*(void *)(v4 + 416) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v6,  v5,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v6,  v5,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v8 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v32 = v8;
  uint64_t v33 = v9;
  __chkstk_darwin();
  uint64_t v11 = (char *)v29 - v10;
  v29[0] = type metadata accessor for AWDLStatistics.TrafficRegistrationStop(0LL);
  __chkstk_darwin();
  uint64_t v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchTime(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin();
  uint64_t v17 = (char *)v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin();
  unint64_t v21 = (char *)v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  DispatchTime.distance(to:)(v17);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  id v22 = [v31 uniqueIdentifier];
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(&v13[*(int *)(v29[0] + 24LL)], v21, v18);
  *(void *)uint64_t v13 = v22;
  v13[8] = v34;
  uint64_t v23 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 144);
  uint64_t v24 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  v23(v24, AssociatedConformanceWitness);
  uint64_t v25 = v24;
  uint64_t v26 = v32;
  uint64_t v27 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  v25,  v32,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.CoreAnalytics: CoreAnalyticsControls);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 40))(v13, v26, v27);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v26);
  sub_10005802C((uint64_t)v13, type metadata accessor for AWDLStatistics.TrafficRegistrationStop);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
}

uint64_t sub_100323C88(void *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v51 = a4;
  int v47 = a3;
  int v48 = a2;
  uint64_t v7 = *(void *)(*(void *)v5 + 408LL);
  uint64_t v8 = *(void *)(*(void *)(*(void *)v5 + 416LL) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v8,  v7,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v8,  v7,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v46 = AssociatedTypeWitness;
  uint64_t v11 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v53 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v45 - v12;
  sub_100002274((uint64_t *)&unk_1004104A0);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v52 = [a1 uniqueIdentifier];
  uint64_t v16 = *(void *)(v5 + *(void *)(*(void *)v5 + 704LL));
  swift_unownedRetainStrong(v16);
  sub_1002CF2F0();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  swift_release(v16);
  uint64_t v45 = v11;
  if (v18)
  {
    swift_bridgeObjectRelease(v18);
    uint64_t v21 = v20 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v21 = 0x300000000LL;
  }

  uint64_t v50 = v21;
  uint64_t v22 = v51;
  uint64_t v49 = AWDLPeer.infrastructureChannel.getter();
  uint64_t v23 = swift_getAssociatedTypeWitness(255LL, v8, v7, &protocol requirements base descriptor for P2PControls);
  uint64_t v24 = swift_getAssociatedConformanceWitness( v8,  v7,  v23,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8);
  uint64_t v26 = swift_checkMetadataState(0LL, v23);
  uint64_t v27 = v25(v26, v24);
  uint64_t v28 = *WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor();
  uint64_t v54 = v27;
  uint64_t v55 = v28;
  unint64_t v29 = sub_100270384();
  swift_bridgeObjectRetain_n(v28, 2LL);
  ExtendableOptionSet.formIntersection(_:)( (uint64_t (*)(_BYTE *, void))&v54,  &type metadata for WiFiDriverCapabilities.Kind,  v29);
  uint64_t v30 = v55;
  char v31 = sub_10007990C(v55, v28);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v30);
  uint64_t v32 = type metadata accessor for AWDLPeer(0LL);
  sub_1000226B0(v22 + *(int *)(v32 + 56), (uint64_t)v15, (uint64_t *)&unk_1004104A0);
  uint64_t v33 = type metadata accessor for AWDLActionFrame.DataPathState(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48LL))(v15, 1LL, v33) == 1)
  {
    sub_1000225EC((uint64_t)v15, (uint64_t *)&unk_1004104A0);
    uint64_t v34 = 0LL;
  }

  else
  {
    int v35 = v15[84];
    sub_10005802C((uint64_t)v15, type metadata accessor for AWDLActionFrame.DataPathState);
    if (v35) {
      uint64_t v34 = 0x100000000000000LL;
    }
    else {
      uint64_t v34 = 0LL;
    }
  }

  int v37 = v47;
  unsigned __int8 v36 = v48;
  uint64_t v38 = v45;
  unint64_t v39 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 144);
  uint64_t v40 = swift_checkMetadataState(0LL, v46);
  v39(v40, AssociatedConformanceWitness);
  uint64_t v41 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  v40,  v38,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.CoreAnalytics: CoreAnalyticsControls);
  uint64_t v42 = 0x1000000000000LL;
  if ((v31 & 1) == 0) {
    uint64_t v42 = 0LL;
  }
  uint64_t v43 = v52;
  (*(void (**)(id, uint64_t, unint64_t, void, uint64_t, uint64_t))(v41 + 32))( v52,  v50,  v42 & 0xFFFF000000000000LL | v49 & 0xFFFFFFFFFFFFLL | v34,  v36 | (v37 << 8),  v38,  v41);

  return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v13, v38);
}

uint64_t sub_100324024@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  swift_bridgeObjectRetain(v4);
  uint64_t v5 = sub_1000EF90C(v3, v4);
  unint64_t v7 = v6;
  type metadata accessor for AWDLPeer(0LL);
  WiFiInterface.macAddress.getter();
  sub_10031CED4(v5, v7);
  char v9 = v8;
  unint64_t v10 = v8 >> 8;
  unint64_t v11 = v8 >> 16;
  unint64_t v12 = v8 >> 24;
  unint64_t v13 = HIDWORD(v8);
  unint64_t v14 = v8 >> 40;
  uint64_t result = sub_1000208D8(v5, v7);
  *a2 = v9;
  a2[1] = v10;
  a2[2] = v11;
  a2[3] = v12;
  a2[4] = v13;
  a2[5] = v14;
  return result;
}

uint64_t sub_1003240FC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1 + 16;
  swift_beginAccess(a1 + 16, v25, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v9);
  if (result)
  {
    uint64_t v11 = result;
    unint64_t v12 = (uint64_t *)(result + *(void *)(*(void *)result + 560LL));
    swift_beginAccess(v12, v22, 0LL, 0LL);
    uint64_t v21 = *v12;
    __chkstk_darwin();
    uint64_t v20[2] = a4;
    void v20[3] = a5;
    void v20[4] = a2;
    uint64_t v13 = sub_100058CD0( 255LL,  (unint64_t *)&unk_10040CC00,  &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
    uint64_t v15 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation(255LL, a4, a5, v14);
    unint64_t v16 = sub_100245750();
    uint64_t v17 = type metadata accessor for Dictionary(0LL, v13, v15, v16);
    swift_bridgeObjectRetain(v21);
    uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v17);
    Collection.firstIndex(where:)(v23, sub_1003329DC, v20, v17, WitnessTable);
    swift_bridgeObjectRelease(v21);
    LODWORD(v15) = v24;
    sub_100022570(v23[0], v23[1], v24);
    if ((_DWORD)v15 != 255)
    {
      int v19 = sub_1003211B8(a2, 1LL);
      sub_100323C88(a2, BYTE1(v19), v19, a3);
    }

    return swift_release(v11);
  }

  return result;
}

BOOL sub_10032429C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100058CD0(255LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  uint64_t v10 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation(255LL, a3, a4, v9);
  swift_getTupleTypeMetadata2(0LL, v8, v10, "key value ", 0LL);
  uint64_t v11 = __chkstk_darwin();
  uint64_t v13 = (char *)&v20 - v12;
  uint64_t v14 = *(int *)(v11 + 48);
  uint64_t v15 = &v13[v14];
  unint64_t v16 = (char *)a1 + v14;
  uint64_t v17 = *a1;
  *(void *)uint64_t v13 = v17;
  uint64_t v18 = *(void *)(v10 - 8);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(&v13[v14], v16, v10);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v10);
  return v17 == a2;
}

void sub_100324398(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (uint64_t *)&v31[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v15 = (void *)*v14;
  *uint64_t v13 = *v14;
  (*(void (**)(uint64_t *, void, uint64_t))(v11 + 104))( v13,  enum case for DispatchPredicate.onQueue(_:),  v10);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
  if ((v15 & 1) != 0)
  {
    uint64_t v17 = a1 + 16;
    swift_beginAccess(v17, v33, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v17);
    if (Strong)
    {
      uint64_t v19 = Strong;
      id v20 = [a2 servicesRequiringAvailabilityNotification];
      if (v20)
      {
        uint64_t v21 = v20;
        type metadata accessor for AWDLTrafficRegistrationService(0LL);
        uint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

        uint64_t v24 = *(void *)(v23 + 16);
        if (v24)
        {
          swift_bridgeObjectRetain(v23);
          uint64_t v25 = 0LL;
          do
          {
            uint64_t v26 = *(void **)(v23 + 8 * v25++ + 32);
            id v27 = v26;
            sub_100307164(v27);
          }

          while (v24 != v25);
          swift_bridgeObjectRelease(v23);
        }

        swift_bridgeObjectRelease(v23);
      }

      v32[0] = a3;
      swift_beginAccess(v19 + *(void *)(*(void *)v19 + 456LL), v31, 33LL, 0LL);
      uint64_t v29 = type metadata accessor for AWDLInterface.StateMonitoringClient(255LL, a4, a5, v28);
      uint64_t v30 = type metadata accessor for Dictionary( 0LL,  &type metadata for UInt64,  v29,  &protocol witness table for UInt64);
      Dictionary.removeValue(forKey:)(v32, v30);
      swift_endAccess(v31);
      swift_release(v19);
      sub_1003332FC((void *)v32[1], v32[2], (void *)v32[3]);
    }
  }

  else
  {
    __break(1u);
  }

void sub_1003245A0(void **a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5 = *a1;
  id v6 = a3;
  id v7 = v5;
  id v8 = v6;
  id v9 = v7;
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v24 = a4;
    uint64_t v12 = swift_slowAlloc(22LL, -1LL);
    uint64_t v21 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    uint64_t v27 = v23;
    *(_DWORD *)uint64_t v12 = 138412546;
    os_log_type_t type = v11;
    uint64_t v25 = (uint64_t)v8;
    id v13 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
    *uint64_t v21 = v8;

    *(_WORD *)(v12 + 12) = 2080;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    unint64_t v16 = v15;
    uint64_t v25 = sub_10000235C(v14, v15, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);

    swift_bridgeObjectRelease(v16);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  type,  "%@ is monitoring AWDL state information %s",  (uint8_t *)v12,  0x16u);
    uint64_t v17 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v21, 1LL, v17);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_arrayDestroy(v23, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v23, -1LL, -1LL);
    uint64_t v18 = v12;
    a4 = v24;
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {
  }

  sub_100306DC4(v9);
  if (v19)
  {
    id v20 = (void *)_convertErrorToNSError(_:)(v19);
    swift_errorRelease();
  }

  else
  {
    id v20 = 0LL;
  }

  objc_msgSend(a4, "availabilityUpdatedForService:error:", v9, v20, v21);
}

id sub_10032481C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 uniqueIdentifier];
  *a2 = result;
  return result;
}

void sub_10032485C(void **a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *a1;
  unint64_t v4 = (uint64_t *)((char *)a2 + *(void *)(*a2 + 584));
  swift_beginAccess(v4, v59, 32LL, 0LL);
  uint64_t v5 = *v4;
  id v62 = v3;
  type metadata accessor for AWDLTrafficRegistrationService(0LL);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v2 + 416);
  uint64_t v54 = *(void *)(v2 + 408);
  uint64_t v10 = type metadata accessor for AWDLInterface.TrafficRegistrationServiceAvailabilityMonitor(0LL, v54, v8, v9);
  uint64_t v11 = sub_10000AF70( &qword_100404A20,  (uint64_t (*)(uint64_t))type metadata accessor for AWDLTrafficRegistrationService,  (uint64_t)&unk_1003384F0);
  id v12 = v3;
  uint64_t v55 = v11;
  Dictionary.subscript.getter(&v62, v5, v7, v10);

  uint64_t v13 = v60;
  uint64_t v56 = v10;
  uint64_t v57 = v7;
  if (v60 == 1)
  {
    swift_endAccess(v59);
    uint64_t v13 = 0LL;
  }

  else
  {
    swift_endAccess(v59);
    swift_errorRetain(v13);
    sub_10033175C(v13);
  }

  uint64_t v14 = (void *)objc_opt_self(&OBJC_CLASS___WiFiMACAddress);
  id v15 = v12;
  id v16 = [v14 zeroAddress];
  id v17 = [objc_allocWithZone(AWDLTrafficRegistrationConfiguration) initWithUniqueIdentifier:v15 peerAddress:v16];

  id v18 = sub_100331960(v17, 0, 0);
  if (v13)
  {
    if (v18)
    {
      swift_errorRelease(v13);
      swift_errorRelease(v18);
      return;
    }
  }

  else if (!v18)
  {
    return;
  }

  uint64_t v53 = v4;
  id v19 = v15;
  swift_errorRetain(v18);
  id v20 = v19;
  uint64_t v21 = swift_errorRetain(v18);
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.default.getter();
  uint64_t v51 = v8;
  uint64_t v52 = v13;
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc(22LL, -1LL);
    uint64_t v50 = swift_slowAlloc(64LL, -1LL);
    v59[0] = v50;
    *(_DWORD *)uint64_t v24 = 136315394;
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    unint64_t v27 = v26;
    uint64_t v60 = sub_10000235C(v25, v26, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61);

    swift_bridgeObjectRelease(v27);
    *(_WORD *)(v24 + 12) = 2080;
    if (v18) {
      uint64_t v28 = 7630702LL;
    }
    else {
      uint64_t v28 = 7827310LL;
    }
    uint64_t v60 = sub_10000235C(v28, 0xE300000000000000LL, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61);
    swift_bridgeObjectRelease(0xE300000000000000LL);
    swift_errorRelease(v18);
    swift_errorRelease(v18);
    _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "Notifying clients that %s is %s available",  (uint8_t *)v24,  0x16u);
    swift_arrayDestroy(v50, 2LL, &type metadata for Any[8]);
    swift_slowDealloc(v50, -1LL, -1LL);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease(v18);
    swift_errorRelease(v18);
  }

  swift_beginAccess(v53, &v60, 33LL, 0LL);
  id v62 = v20;
  id v29 = v20;
  uint64_t v30 = type metadata accessor for Dictionary._Variant(0LL, v57, v56, v55);
  uint64_t v31 = Dictionary._Variant.subscript.modify(v59, &v62, v30);
  uint64_t v33 = *v32;
  if (*v32 == 1)
  {
    swift_errorRelease(v18);
    __break(1u);
  }

  else
  {
    uint64_t v34 = (void (*)(uint64_t *, void))v31;
    *uint64_t v32 = (uint64_t)v18;
    swift_errorRetain(v18);
    swift_errorRelease(v33);
    v34(v59, 0LL);

    swift_endAccess(&v60);
    uint64_t v35 = sub_100331588();
    v59[0] = v35;
    __chkstk_darwin();
    uint64_t v36 = v54;
    uint64_t v37 = v51;
    uint64_t v46 = v54;
    uint64_t v47 = v51;
    id v48 = v29;
    uint64_t v39 = type metadata accessor for AWDLInterface.StateMonitoringClient(255LL, v54, v51, v38);
    uint64_t v40 = type metadata accessor for Dictionary.Values( 0LL,  &type metadata for UInt64,  v39,  &protocol witness table for UInt64);
    swift_bridgeObjectRetain(v35);
    uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v40);
    uint64_t v42 = v58;
    v59[0] = Sequence.filter(_:)(sub_100332130, v45, v40, WitnessTable);
    __chkstk_darwin();
    uint64_t v46 = v36;
    uint64_t v47 = v37;
    id v48 = v29;
    id v49 = v18;
    uint64_t v43 = type metadata accessor for Array(0LL, v39);
    uint64_t v44 = swift_getWitnessTable(&protocol conformance descriptor for [A], v43);
    Sequence.forEach(_:)(sub_100332150, v45, v43, v44);
    uint64_t v58 = v42;
    swift_errorRelease(v18);
    swift_errorRelease(v52);
    swift_bridgeObjectRelease(v59[0]);
  }

id sub_100324DB0(uint64_t a1, uint64_t a2)
{
  id result = [*(id *)(a1 + 16) servicesRequiringAvailabilityNotification];
  if (result)
  {
    unint64_t v4 = result;
    type metadata accessor for AWDLTrafficRegistrationService(0LL);
    uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

    char v7 = sub_10030457C(a2, v6);
    swift_bridgeObjectRelease(v6);
    return (id)(v7 & 1);
  }

  return result;
}

void sub_100324E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = *(void **)(a1 + 8);
  if (a3) {
    uint64_t v5 = (void *)_convertErrorToNSError(_:)(a3);
  }
  else {
    uint64_t v5 = 0LL;
  }
  [v4 availabilityUpdatedForService:a2 error:v5];
}

void sub_100324E98()
{
}

void *sub_100324EC4(void *a1, void *a2)
{
  uint64_t v4 = *a2;
  swift_errorRetain(*a2);
  uint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  return a1;
}

uint64_t sub_100324F04(void *a1)
{
  return swift_errorRelease(*a1);
}

uint64_t *sub_100324F0C(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  swift_errorRetain(*a2);
  *a1 = v5;
  swift_errorRelease(v4);
  a1[1] = a2[1];
  return a1;
}

uint64_t *sub_100324F5C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_errorRelease(v4);
  a1[1] = a2[1];
  return a1;
}

uint64_t sub_100324F98(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_100324FF4(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)id result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    }
    if (a2) {
      *(void *)id result = a2;
    }
  }

  return result;
}

uint64_t type metadata accessor for AWDLInterface.TrafficRegistrationServiceAvailabilityMonitor( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for AWDLInterface.TrafficRegistrationServiceAvailabilityMonitor);
}

void sub_100325050(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchTime(319LL);
  if (v3 <= 0x3F)
  {
    v8[0] = *(void *)(v2 - 8) + 64LL;
    sub_100056310( 319LL,  (unint64_t *)&qword_100405C10,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTime);
    if (v5 <= 0x3F)
    {
      v8[1] = *(void *)(v4 - 8) + 64LL;
      sub_100056310( 319LL,  (unint64_t *)&unk_10040B328,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      if (v7 <= 0x3F)
      {
        _OWORD v8[2] = *(void *)(v6 - 8) + 64LL;
        swift_initStructMetadata(a1, 0LL, 3LL, v8, a1 + 32);
      }
    }
  }

char *sub_100325110(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v14 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for DispatchTime(0LL);
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    uint64_t v10 = *(int *)(a3 + 36);
    uint64_t v11 = &a1[v10];
    id v12 = &a2[v10];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(&a2[v10], 1LL, v7))
    {
      uint64_t v13 = sub_100002274(&qword_100405D40);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      v9(v11, v12, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v11, 0LL, 1LL, v7);
    }

    uint64_t v15 = *(int *)(a3 + 40);
    id v16 = &a1[v15];
    id v17 = &a2[v15];
    uint64_t v18 = type metadata accessor for UUID(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
    {
      uint64_t v20 = sub_100002274(qword_100410330);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
    }
  }

  return a1;
}

uint64_t sub_100325294(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTime(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  uint64_t v7 = a1 + *(int *)(a2 + 36);
  uint64_t v8 = a1 + *(int *)(a2 + 40);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  return result;
}

char *sub_100325360(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v9], 1LL, v6))
  {
    uint64_t v12 = sub_100002274(&qword_100405D40);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0LL, 1LL, v6);
  }

  uint64_t v13 = *(int *)(a3 + 40);
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for UUID(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
  {
    uint64_t v18 = sub_100002274(qword_100410330);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
  }

  return a1;
}

uint64_t sub_1003254B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v13 = v12(a1 + v9, 1LL, v6);
  int v14 = v12((uint64_t)v11, 1LL, v6);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v10, v11, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    uint64_t v15 = sub_100002274(&qword_100405D40);
    memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  v8((uint64_t)v10, (uint64_t)v11, v6);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 40);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = type metadata accessor for UUID(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1LL, v19);
  int v23 = v21(v18, 1LL, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 24))(v17, v18, v19);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_12;
  }

  if (v23)
  {
LABEL_12:
    uint64_t v24 = sub_100002274(qword_100410330);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
  return a1;
}

char *sub_1003256A0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v9], 1LL, v6))
  {
    uint64_t v12 = sub_100002274(&qword_100405D40);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0LL, 1LL, v6);
  }

  uint64_t v13 = *(int *)(a3 + 40);
  int v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for UUID(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
  {
    uint64_t v18 = sub_100002274(qword_100410330);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
  }

  return a1;
}

uint64_t sub_1003257F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v13 = v12(a1 + v9, 1LL, v6);
  int v14 = v12((uint64_t)v11, 1LL, v6);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v10, v11, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    uint64_t v15 = sub_100002274(&qword_100405D40);
    memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  v8((uint64_t)v10, (uint64_t)v11, v6);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 40);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = type metadata accessor for UUID(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1LL, v19);
  int v23 = v21(v18, 1LL, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 40))(v17, v18, v19);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_12;
  }

  if (v23)
  {
LABEL_12:
    uint64_t v24 = sub_100002274(qword_100410330);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v20 + 32))(v17, v18, v19);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
  return a1;
}

uint64_t sub_1003259E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003259EC);
}

uint64_t sub_1003259EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v11 = sub_100002274(&qword_100405D40);
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      uint64_t v8 = v11;
      uint64_t v13 = *(int *)(a3 + 36);
    }

    else
    {
      uint64_t v8 = sub_100002274(qword_100410330);
      uint64_t v12 = *(void *)(v8 - 8);
      uint64_t v13 = *(int *)(a3 + 40);
    }

    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_100325A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100325A98);
}

uint64_t sub_100325A98(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchTime(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v13 = sub_100002274(&qword_100405D40);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v15 = *(int *)(a4 + 36);
    }

    else
    {
      uint64_t v10 = sub_100002274(qword_100410330);
      uint64_t v14 = *(void *)(v10 - 8);
      uint64_t v15 = *(int *)(a4 + 40);
    }

    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for AWDLInterface.AdditionalTrafficRegistrationInformation);
}

void sub_100325B50(uint64_t a1)
{
}

void *sub_100325B80(void *a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  a1[2] = v5;
  id v6 = v3;
  swift_unknownObjectRetain(v4);
  id v7 = v5;
  return a1;
}

uint64_t sub_100325BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  swift_unknownObjectRetain(v7);
  swift_unknownObjectRelease(v8);
  uint64_t v9 = *(void **)(a2 + 16);
  uint64_t v10 = *(void **)(a1 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  id v11 = v9;

  return a1;
}

uint64_t sub_100325C34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease(v4);
  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);

  return a1;
}

uint64_t sub_100325C80(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t sub_100325CC8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for AWDLInterface.StateMonitoringClient( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AWDLInterface.StateMonitoringClient);
}

uint64_t sub_100325D14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1000EF854(a1, a2);
  unint64_t v5 = v4;
  Data.load<A>(as:)((uint64_t)&type metadata for WiFiAddress);
  if (!v2) {
    return sub_1000208D8(v3, v5);
  }
  sub_1000208D8(v3, v5);
  uint64_t result = swift_unexpectedError(v2, "wifip2pdCore/AWDLInterface.swift", 32LL, 1LL);
  __break(1u);
  return result;
}

uint64_t sub_100325DA4(uint64_t a1, uint64_t a2)
{
  return sub_100326DF4(a1, a2);
}

uint64_t sub_100325DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2) {
      return 1LL;
    }
    uint64_t v3 = 0LL;
    uint64_t v4 = a1 + 32;
    uint64_t v30 = a2 + 32;
    while (1)
    {
      uint64_t v5 = v4 + 56 * v3;
      id v6 = *(_BYTE **)v5;
      uint64_t v7 = v30 + 56 * v3;
      uint64_t v8 = *(_BYTE **)v7;
      uint64_t v9 = *(void *)(*(void *)v5 + 16LL);
      if (v9 != *(void *)(*(void *)v7 + 16LL)) {
        break;
      }
      uint64_t v11 = *(void *)(v5 + 8);
      uint64_t v10 = *(void *)(v5 + 16);
      unint64_t v12 = *(void *)(v5 + 24);
      int v13 = *(unsigned __int8 *)(v5 + 32);
      uint64_t v14 = *(void *)(v5 + 40);
      double v15 = *(double *)(v5 + 48);
      uint64_t v16 = *(void *)(v7 + 8);
      uint64_t v36 = *(void *)(v7 + 16);
      unint64_t v17 = *(void *)(v7 + 24);
      int v18 = *(unsigned __int8 *)(v7 + 32);
      uint64_t v19 = *(void *)(v7 + 40);
      if (v9) {
        BOOL v20 = v6 == v8;
      }
      else {
        BOOL v20 = 1;
      }
      double v21 = *(double *)(v7 + 48);
      if (!v20)
      {
        if (v9 != 1)
        {
          int v23 = v6 + 34;
          uint64_t v24 = v8 + 34;
          for (uint64_t i = v9 - 2; i; --i)
          {
            char v27 = *v23++;
            char v26 = v27;
            char v28 = *v24++;
          }
        }
      }

      uint64_t v32 = v19;
      uint64_t v33 = v14;
      int v34 = v18;
      int v35 = v13;
      uint64_t v31 = v3;
      if (v12 >> 60 != 15)
      {
        if (v17 >> 60 == 15)
        {
LABEL_29:
          sub_100058430(v11, v10, v12);
          sub_100058430(v16, v36, v17);
          sub_100057CA0(v11, v10, v12);
          sub_100057CA0(v16, v36, v17);
          return 0LL;
        }

        if ((unsigned __int16)v11 == (unsigned __int16)v16) {
          __asm { BR              X8 }
        }

        return 0LL;
      }

      if (v17 >> 60 != 15) {
        goto LABEL_29;
      }
      uint64_t v22 = v4;
      swift_bridgeObjectRetain(v6);
      sub_100058430(v11, v10, v12);
      swift_bridgeObjectRetain(v8);
      sub_100058430(v16, v36, v17);
      swift_bridgeObjectRelease(v8);
      sub_100057CA0(v16, v36, v17);
      swift_bridgeObjectRelease(v6);
      sub_100057CA0(v11, v10, v12);
      uint64_t result = 0LL;
      if (v35 == v34 && v33 == v32)
      {
        uint64_t v4 = v22;
        if (v15 == v21)
        {
          uint64_t v3 = v31 + 1;
          uint64_t result = 1LL;
          if (v31 + 1 != v2) {
            continue;
          }
        }
      }

      return result;
    }
  }

  return 0LL;
}

BOOL sub_100326640(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  if (((0x801004u >> (8 * *(_BYTE *)(a1 + 32))) & 0xFFC) != ((0x801004u >> (8 * *(_BYTE *)(a2 + 32))) & 0xFFC)) {
    return 0LL;
  }
  uint64_t v3 = (char *)(a1 + 33);
  uint64_t v4 = (char *)(a2 + 33);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    char v8 = *v3++;
    char v7 = v8;
    char v9 = *v4++;
    --v5;
  }

  while ((0x801004u >> (8 * v7)) == (0x801004u >> (8 * v9)));
  return result;
}

uint64_t sub_1003266E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2) {
      return 1LL;
    }
    uint64_t v5 = 0LL;
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + v5 + 40);
      uint64_t v8 = *(void *)(a1 + v5 + 48);
      unint64_t v7 = *(void *)(a1 + v5 + 56);
      uint64_t v9 = *(void *)(a1 + v5 + 72);
      double v10 = *(double *)(a1 + v5 + 80);
      uint64_t v17 = v5;
      uint64_t v11 = *(void *)(a2 + v5 + 40);
      uint64_t v13 = *(void *)(a2 + v5 + 48);
      unint64_t v12 = *(void *)(a2 + v5 + 56);
      int v19 = *(unsigned __int8 *)(a2 + v5 + 64);
      int v20 = *(unsigned __int8 *)(a1 + v5 + 64);
      uint64_t v18 = *(void *)(a2 + v5 + 72);
      double v14 = *(double *)(a2 + v5 + 80);
      uint64_t v21 = *(void *)(a2 + v5 + 32);
      uint64_t v22 = *(void *)(a1 + v5 + 32);
      uint64_t v16 = v2;
      if (v7 >> 60 != 15)
      {
        if (v12 >> 60 == 15)
        {
LABEL_17:
          sub_100058430(v6, v8, v7);
          sub_100058430(v11, v13, v12);
          sub_100057CA0(v6, v8, v7);
          sub_100057CA0(v11, v13, v12);
          return 0LL;
        }

        if ((unsigned __int16)v6 == (unsigned __int16)v11) {
          __asm { BR              X8 }
        }

        return 0LL;
      }

      if (v12 >> 60 != 15) {
        goto LABEL_17;
      }
      swift_bridgeObjectRetain(v22);
      sub_100058430(v6, v8, v7);
      swift_bridgeObjectRetain(v21);
      sub_100058430(v11, v13, v12);
      swift_bridgeObjectRelease(v21);
      sub_100057CA0(v11, v13, v12);
      swift_bridgeObjectRelease(v22);
      sub_100057CA0(v6, v8, v7);
      uint64_t result = 0LL;
      if (v20 != v19 || v9 != v18 || v10 != v14) {
        return result;
      }
      uint64_t v5 = v17 + 56;
      --v2;
      if (v16 == 1) {
        return 1LL;
      }
    }
  }

  return 0LL;
}

uint64_t sub_100326DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2) {
      return 1LL;
    }
    uint64_t v3 = a1;
    if (a1 == a2) {
      return 1LL;
    }
    uint64_t v4 = 0LL;
    uint64_t v21 = a2;
    while (1)
    {
      uint64_t v5 = v3 + v4;
      uint64_t v6 = a2 + v4;
      if (*(_DWORD *)(v5 + 32) != *(_DWORD *)(a2 + v4 + 32)
        || (0x801004u >> (8 * *(_BYTE *)(v5 + 36))) != (0x801004u >> (8 * *(_BYTE *)(v6 + 36))))
      {
        break;
      }

      int v7 = *(unsigned __int8 *)(v5 + 37);
      uint64_t v9 = *(void *)(v5 + 40);
      uint64_t v8 = *(void *)(v5 + 48);
      unint64_t v10 = *(void *)(v5 + 56);
      int v11 = *(unsigned __int8 *)(v5 + 64);
      uint64_t v12 = *(void *)(v5 + 72);
      double v13 = *(double *)(v5 + 80);
      int v14 = *(unsigned __int8 *)(v6 + 37);
      uint64_t v16 = *(void *)(v6 + 40);
      uint64_t v15 = *(void *)(v6 + 48);
      unint64_t v17 = *(void *)(v6 + 56);
      double v18 = *(double *)(v6 + 80);
      switch(v7)
      {
        case 2:
          if (v14 != 2) {
            return 0LL;
          }
          break;
        case 3:
          if (v14 != 3) {
            return 0LL;
          }
          break;
        case 4:
          if (v14 != 4) {
            return 0LL;
          }
          break;
        case 5:
          if (v14 != 5) {
            return 0LL;
          }
          break;
        case 6:
          if (v14 != 6) {
            return 0LL;
          }
          break;
        default:
          break;
      }

      int v23 = *(unsigned __int8 *)(v6 + 64);
      int v24 = v11;
      uint64_t v25 = v12;
      uint64_t v22 = *(void *)(v6 + 72);
      if (v10 >> 60 != 15)
      {
        if (v17 >> 60 == 15)
        {
LABEL_32:
          sub_100058430(v9, v8, v10);
          sub_100058430(v16, v15, v17);
          sub_100057CA0(v9, v8, v10);
          sub_100057CA0(v16, v15, v17);
          return 0LL;
        }

        if ((unsigned __int16)v9 == (unsigned __int16)v16) {
          __asm { BR              X8 }
        }

        return 0LL;
      }

      if (v17 >> 60 != 15) {
        goto LABEL_32;
      }
      sub_100058430(v9, v8, v10);
      sub_100058430(v16, v15, v17);
      sub_100057CA0(v16, v15, v17);
      sub_100057CA0(v9, v8, v10);
      uint64_t result = 0LL;
      uint64_t v3 = a1;
      a2 = v21;
      if (v24 == v23 && v25 == v22 && v13 == v18)
      {
        v4 += 56LL;
        uint64_t result = 1LL;
        if (--v2) {
          continue;
        }
      }

      return result;
    }
  }

  return 0LL;
}

uint64_t sub_1003274D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    goto LABEL_12;
  }
  if (!v2 || a1 == a2) {
    goto LABEL_11;
  }
  uint64_t v5 = 0x100000000000000LL;
  if (*(_BYTE *)(a1 + 39)) {
    uint64_t v6 = 0x100000000000000LL;
  }
  else {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = v6 | ((unint64_t)*(unsigned __int8 *)(a1 + 38) << 48) | ((unint64_t)*(unsigned __int8 *)(a1 + 37) << 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 36) << 32) | *(unsigned int *)(a1 + 32);
  if (!*(_BYTE *)(a2 + 39)) {
    uint64_t v5 = 0LL;
  }
  if ((static RadioResources.PreferredChannel.__derived_struct_equals(_:_:)( v7,  v5 | ((unint64_t)*(unsigned __int8 *)(a2 + 38) << 48) | ((unint64_t)*(unsigned __int8 *)(a2 + 37) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 36) << 32) | *(unsigned int *)(a2 + 32)) & 1) == 0)
  {
LABEL_12:
    char v8 = 0;
    return v8 & 1;
  }

  if (v2 == 1)
  {
LABEL_11:
    char v8 = 1;
    return v8 & 1;
  }

  uint64_t v10 = 0LL;
  uint64_t v11 = v2 - 2;
  do
  {
    if (*(_BYTE *)(a1 + v10 + 47)) {
      uint64_t v12 = 0x100000000000000LL;
    }
    else {
      uint64_t v12 = 0LL;
    }
    if (*(_BYTE *)(a2 + v10 + 47)) {
      uint64_t v13 = 0x100000000000000LL;
    }
    else {
      uint64_t v13 = 0LL;
    }
    char v8 = static RadioResources.PreferredChannel.__derived_struct_equals(_:_:)( v12 | ((unint64_t)*(unsigned __int8 *)(a1 + v10 + 46) << 48) | ((unint64_t)*(unsigned __int8 *)(a1 + v10 + 45) << 40) | ((unint64_t)*(unsigned __int8 *)(a1 + v10 + 44) << 32) | *(unsigned int *)(a1 + v10 + 40),  v13 | ((unint64_t)*(unsigned __int8 *)(a2 + v10 + 46) << 48) | ((unint64_t)*(unsigned __int8 *)(a2 + v10 + 45) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + v10 + 44) << 32) | *(unsigned int *)(a2 + v10 + 40));
    BOOL v15 = v11-- != 0;
    if ((v8 & 1) == 0) {
      break;
    }
    v10 += 8LL;
  }

  while (v15);
  return v8 & 1;
}

uint64_t sub_100327620(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v1 = v5;
  uint64_t v2 = NANServiceName.description.getter(v4, v5);
  swift_bridgeObjectRelease(v1);
  return v2;
}

uint64_t sub_100327678(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v1 = 0x656D69746C616572LL;
  if ((_BYTE)v3) {
    return v1;
  }
  else {
    return 0x6576697470616461LL;
  }
}

uint64_t sub_100327700(void (*a1)(uint64_t *__return_ptr))
{
  return WiFiAddress.description.getter((unsigned __int16)v2 | ((unint64_t)*(unsigned int *)((char *)&v2 + 2) << 16));
}

unint64_t sub_100327738(Swift::UInt8 a1)
{
  Swift::Int v3 = Hasher._finalize()();
  return sub_100327AD4(a1, v3);
}

unint64_t sub_100327790(char a1)
{
  Swift::Int v3 = Hasher._finalize()();
  return sub_100327B74(a1, v3);
}

unint64_t sub_1003277F4(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100327C28(a1, v4);
}

uint64_t sub_100327824(uint64_t a1)
{
  return sub_100327838( a1,  (void (*)(void *, uint64_t))Channel.hash(into:),  (uint64_t (*)(uint64_t, Swift::Int))sub_100327D30);
}

uint64_t sub_100327838( uint64_t a1, void (*a2)(void *, uint64_t), uint64_t (*a3)(uint64_t, Swift::Int))
{
  uint64_t v5 = v3;
  Hasher.init(_seed:)(v10, *(void *)(v5 + 40));
  a2(v10, a1 & 0xFFFFFFFFFFFFLL);
  Swift::Int v7 = Hasher._finalize()();
  return a3(a1 & 0xFFFFFFFFFFFFLL, v7);
}

unint64_t sub_1003278A0(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100327E54(a1, v4);
}

unint64_t sub_1003278D0(Swift::UInt a1)
{
  Swift::Int v3 = Hasher._finalize()();
  return sub_10001D704(a1, v3);
}

unint64_t sub_100327928(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100327F6C(a1, v4);
}

unint64_t sub_100327958(unsigned __int8 a1)
{
  uint64_t v3 = static Hasher._hash(seed:bytes:count:)(*(void *)(v1 + 40), a1, 1LL);
  return sub_100327AD4(a1, v3);
}

unint64_t sub_10032798C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  Swift::Int v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_100328030(a1, v7);
}

unint64_t sub_100327A0C(uint64_t a1, uint64_t a2, __int16 a3)
{
  Swift::String v7 = String.lowercased()();
  String.hash(into:)(v11, v7._countAndFlagsBits, v7._object);
  swift_bridgeObjectRelease(v7._object);
  if ((a3 & 1) != 0) {
    uint64_t v8 = 7365749LL;
  }
  else {
    uint64_t v8 = 7365492LL;
  }
  String.hash(into:)(v11, v8, 0xE300000000000000LL);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  Hasher._combine(_:)(HIBYTE(a3));
  Swift::Int v9 = Hasher._finalize()();
  return sub_1003281A4(a1, a2, a3 & 0xFF01, v9);
}

unint64_t sub_100327AD4(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
      }
    }
  }

  return result;
}

unint64_t sub_100327B74(char a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    int v7 = byte_100360598[a1];
    uint64_t v8 = *(void *)(v2 + 48);
    if (byte_100360598[*(char *)(v8 + result)] != v7)
    {
      uint64_t v9 = ~v5;
      for (unint64_t result = (result + 1) & v9;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v9)
      {
      }
    }
  }

  return result;
}

unint64_t sub_100327C28(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    type metadata accessor for XPCSession(0LL);
    id v7 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v8 = static NSObject.== infix(_:_:)(v7, a1);

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = static NSObject.== infix(_:_:)(v10, a1);

        if ((v11 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

unint64_t sub_100327D30(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v6 = ~v4;
    while (1)
    {
      uint64_t v7 = *(void *)(v2 + 48) + 8 * result;
      if (*(_DWORD *)v7 == (_DWORD)a1
        && ((0x801004u >> ((a1 >> 29) & 0xF8)) & 0xFFC) == (0x801004u >> (8 * *(_BYTE *)(v7 + 4))))
      {
        break;
      }

unint64_t sub_100327E54(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    sub_100058CD0(0LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
    id v7 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v8 = static NSObject.== infix(_:_:)(v7, a1);

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = static NSObject.== infix(_:_:)(v10, a1);

        if ((v11 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

unint64_t sub_100327F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_1003329FC(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_1002DD57C((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

unint64_t sub_100328030(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2LL);
      return v5;
    }

    uint64_t v13 = v11;
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = ~v4;
      unint64_t v5 = (v5 + 1) & v15;
      if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
      {
        while (1)
        {
          uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
          uint64_t v9 = v17;
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19) {
            break;
          }
          uint64_t v21 = v19;
          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0LL);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v15;
            if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
              continue;
            }
          }

          return v5;
        }

        goto LABEL_16;
      }
    }
  }

  return v5;
}

unint64_t sub_1003281A4(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t i = a4 & ~v6;
  if (((*(void *)(v4 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v10 = *(void *)(v4 + 48) + 24 * i;
    uint64_t v11 = *(void *)v10;
    uint64_t v12 = *(void *)(v10 + 8);
    __int16 v13 = *(unsigned __int8 *)(v10 + 16) | (*(unsigned __int8 *)(v10 + 17) << 8);
    __int16 v14 = a3 & 0xFF01;
    swift_bridgeObjectRetain(v12);
    LOBYTE(v1sub_100058090(v4, v0 + 1) = static DNSRecords.Identifier.== infix(_:_:)(v11, v12, v13, a1, a2, v14);
    swift_bridgeObjectRelease(v12);
    if ((v11 & 1) == 0)
    {
      uint64_t v15 = ~v6;
      for (unint64_t i = (i + 1) & v15; ((*(void *)(v5 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v15)
      {
        uint64_t v16 = *(void *)(v4 + 48) + 24 * i;
        uint64_t v17 = *(void *)v16;
        uint64_t v18 = *(void *)(v16 + 8);
        __int16 v19 = *(unsigned __int8 *)(v16 + 16) | (*(unsigned __int8 *)(v16 + 17) << 8);
        swift_bridgeObjectRetain(v18);
        LOBYTE(v17) = static DNSRecords.Identifier.== infix(_:_:)(v17, v18, v19, a1, a2, v14);
        swift_bridgeObjectRelease(v18);
        if ((v17 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

uint64_t sub_100328304()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100328328()
{
  return sub_1003084DC(*(void *)(v0 + 24));
}

uint64_t sub_10032834C(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr))
{
  uint64_t v5 = *a1 + 8;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v7, &v8);
  *a1 = v5;
  return result;
}

uint64_t sub_1003283A4(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr))
{
  uint64_t v5 = *a1 + 1;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v7, (char *)&v7 + 1);
  *a1 = v5;
  return result;
}

uint64_t sub_1003283FC(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr))
{
  uint64_t v5 = *a1 + 4;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v7, (char *)&v7 + 4);
  *a1 = v5;
  return result;
}

unint64_t sub_100328454(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        uint64_t v9 = *(char *)(*(void *)(a2 + 48) + v6);
        Hasher.init(_seed:)(v28, *(void *)(a2 + 40));
        Hasher._combine(_:)(byte_100360598[v9]);
        uint64_t result = Hasher._finalize()();
        unint64_t v10 = result & v7;
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (_BYTE *)(v11 + v3);
        __int16 v13 = (_BYTE *)(v11 + v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          *uint64_t v12 = *v13;
        }
        uint64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = type metadata accessor for NANAttribute(0LL);
        uint64_t v16 = *(void *)(*(void *)(v15 - 8) + 72LL);
        int64_t v17 = v16 * v3;
        uint64_t result = v14 + v16 * v3;
        int64_t v18 = v16 * v6;
        uint64_t v19 = v14 + v16 * v6;
        unint64_t v20 = v19 + v16;
        if (v17 < v18 || result >= v20)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack(result, v19, 1LL, v15);
        }

        else
        {
          int64_t v3 = v6;
          if (v17 == v18) {
            goto LABEL_6;
          }
          uint64_t result = swift_arrayInitWithTakeBackToFront(result);
        }

        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }

      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      goto LABEL_12;
    }

unint64_t sub_100328640(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = (unsigned __int16 *)(*(void *)(a2 + 48) + 6 * v6);
        uint64_t v10 = *(unsigned int *)(v9 + 1);
        uint64_t v11 = *v9;
        Hasher.init(_seed:)(v26, *(void *)(a2 + 40));
        NANClusterChangeEvent.hash(into:)((int)v26, v11 | (v10 << 16));
        uint64_t result = Hasher._finalize()();
        unint64_t v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }

        else if (v12 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          unint64_t v14 = v13 + 6 * v3;
          uint64_t v15 = (int *)(v13 + 6 * v6);
          if (v3 != v6 || v14 >= (unint64_t)v15 + 6)
          {
            int v16 = *v15;
            *(_WORD *)(v14 + 4) = *((_WORD *)v15 + 2);
            *(_DWORD *)unint64_t v14 = v16;
          }

          uint64_t v17 = *(void *)(a2 + 56);
          int64_t v18 = (void *)(v17 + 8 * v3);
          uint64_t v19 = (void *)(v17 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *int64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }

unint64_t sub_100328814(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v10 = (unsigned __int16 *)(*(void *)(a2 + 48) + 6 * v6);
        uint64_t v11 = *(unsigned int *)(v10 + 1);
        uint64_t v12 = *v10;
        Hasher.init(_seed:)(v27, *(void *)(a2 + 40));
        NANClusterChangeEvent.hash(into:)((int)v27, v12 | (v11 << 16));
        uint64_t result = Hasher._finalize()();
        unint64_t v13 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          unint64_t v15 = v14 + 6 * v3;
          int v16 = (int *)(v14 + 6 * v6);
          if (v3 != v6 || v15 >= (unint64_t)v16 + 6)
          {
            int v17 = *v16;
            *(_WORD *)(v15 + 4) = *((_WORD *)v16 + 2);
            *(_DWORD *)unint64_t v15 = v17;
          }

          uint64_t v18 = *(void *)(a2 + 56);
          unint64_t v19 = v18 + 24 * v3;
          unint64_t v20 = (__int128 *)(v18 + 24 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= (unint64_t)v20 + 24))
          {
            __int128 v9 = *v20;
            *(void *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = *((void *)v20 + 2);
            *(_OWORD *)unint64_t v19 = v9;
            int64_t v3 = v6;
          }
        }

unint64_t sub_1003289F4(unint64_t a1, uint64_t a2)
{
  return sub_100329028(a1, a2, type metadata accessor for NANInternetSharingStatistics.Requester);
}

void sub_100328A00(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            int v17 = (void *)(v16 + 8 * v3);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              *int v17 = *v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            unint64_t v20 = (void *)(v19 + 8 * v3);
            uint64_t v21 = (void *)(v19 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              *unint64_t v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }

        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1LL << a1) - 1;
  }

  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1LL);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

unint64_t sub_100328BB0(unint64_t a1, uint64_t a2)
{
  return sub_100329504(a1, a2, type metadata accessor for AWDLPeer);
}

unint64_t sub_100328BBC(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v38 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin();
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v37 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v38 + 72);
      uint64_t v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v8;
        uint64_t v15 = v12;
        int64_t v16 = v12 * v10;
        uint64_t v17 = v13;
        v36(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        uint64_t v18 = *(void *)(a2 + 40);
        uint64_t v19 = sub_10000AF70( &qword_10040F8C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v4);
        uint64_t v13 = v17;
        unint64_t v21 = v20 & v17;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v24 = *(void *)(a2 + 48);
            unint64_t result = v24 + v15 * a1;
            uint64_t v25 = v24 + v16;
            uint64_t v8 = v14;
            if (v15 * a1 < v16 || (uint64_t v12 = v15, result >= v25 + v15))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v25, 1LL, v4);
LABEL_21:
              uint64_t v13 = v17;
              uint64_t v12 = v15;
            }

            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront(result);
              goto LABEL_21;
            }

            uint64_t v26 = *(void *)(a2 + 56);
            uint64_t v27 = (_OWORD *)(v26 + 16 * a1);
            char v28 = (_OWORD *)(v26 + 16 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= v28 + 1))
            {
              *uint64_t v27 = *v28;
              a1 = v10;
            }

            goto LABEL_5;
          }
        }

        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }

        uint64_t v8 = v14;
        uint64_t v12 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v13;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    id v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1LL << a1) - 1;
  }

  else
  {
    id v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1LL << a1) - 1;
  }

  uint64_t *v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1LL);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_100328E5C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        unint64_t v10 = (_BYTE *)(v9 + v6);
        unint64_t result = static Hasher._hash(seed:bytes:count:)(*(void *)(a2 + 40), *(unsigned __int8 *)(v9 + v6), 1LL);
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
        }

        else if (v11 < v8 && v3 < (uint64_t)v11)
        {
          goto LABEL_6;
        }

        uint64_t v14 = (_BYTE *)(v9 + v3);
        if (v3 != v6 || v14 >= v10 + 1) {
          *uint64_t v14 = *v10;
        }
        uint64_t v15 = *(void *)(a2 + 56);
        uint64_t v16 = type metadata accessor for NANPeer.Service(0LL);
        uint64_t v17 = *(void *)(*(void *)(v16 - 8) + 72LL);
        int64_t v18 = v17 * v3;
        unint64_t result = v15 + v17 * v3;
        int64_t v19 = v17 * v6;
        uint64_t v20 = v15 + v17 * v6;
        unint64_t v21 = v20 + v17;
        if (v18 < v19 || result >= v21)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v20, 1LL, v16);
        }

        else
        {
          int64_t v3 = v6;
          if (v18 == v19) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront(result);
        }

        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v24 = *v23;
    uint64_t v25 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v25 = *v23;
    uint64_t v24 = (-1LL << result) - 1;
  }

  *uint64_t v23 = v25 & v24;
  uint64_t v26 = *(void *)(a2 + 16);
  BOOL v27 = __OFSUB__(v26, 1LL);
  uint64_t v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_10032901C(unint64_t a1, uint64_t a2)
{
  return sub_100329028(a1, a2, type metadata accessor for NANPeer.Service.AuthenticationStatus);
}

unint64_t sub_100329028(unint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  int64_t v4 = result;
  uint64_t v5 = a2 + 64;
  uint64_t v6 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v7 = (result + 1) & ~v6;
  if (((1LL << v7) & *(void *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    uint64_t v8 = ~v6;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v6);
    if ((*(void *)(v5 + 8 * (v7 >> 6)) & (1LL << v7)) != 0)
    {
      unint64_t v9 = (result + 1) & v8;
      while (1)
      {
        uint64_t v10 = *(void *)(a2 + 48) - v7 + 8 * v7;
        uint64_t v11 = *(unsigned int *)(v10 + 3);
        Swift::UInt8 v12 = *(_BYTE *)v10;
        uint64_t v13 = *(unsigned __int16 *)(v10 + 1);
        Hasher.init(_seed:)(v35, *(void *)(a2 + 40));
        Hasher._combine(_:)(v12);
        NANClusterChangeEvent.hash(into:)((int)v35, v13 | (v11 << 16));
        unint64_t result = Hasher._finalize()();
        unint64_t v14 = result & v8;
        if (v14 < v9) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v15 = *(void *)(a2 + 48);
        unint64_t v16 = v15 - v4 + 8 * v4;
        uint64_t v17 = v15 - v7 + 8 * v7;
        if (v4 != v7 || v16 >= v17 + 7)
        {
          int v18 = *(_DWORD *)v17;
          __int16 v19 = *(_WORD *)(v17 + 4);
          *(_BYTE *)(v16 + 6) = *(_BYTE *)(v17 + 6);
          *(_WORD *)(v16 + 4) = v19;
          *(_DWORD *)unint64_t v16 = v18;
        }

        uint64_t v20 = *(void *)(a2 + 56);
        uint64_t v21 = a3(0LL);
        uint64_t v22 = *(void *)(*(void *)(v21 - 8) + 72LL);
        int64_t v23 = v22 * v4;
        unint64_t result = v20 + v22 * v4;
        int64_t v24 = v22 * v7;
        uint64_t v25 = v20 + v22 * v7;
        unint64_t v26 = v25 + v22;
        if (v23 < v24 || result >= v26)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v25, 1LL, v21);
        }

        else
        {
          int64_t v4 = v7;
          if (v23 == v24) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront(result);
        }

        int64_t v4 = v7;
LABEL_6:
        unint64_t v7 = (v7 + 1) & v8;
        if (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
          goto LABEL_21;
        }
      }

      if (v14 < v9) {
        goto LABEL_6;
      }
LABEL_11:
      goto LABEL_12;
    }

unint64_t sub_10032924C(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v40 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin();
  unint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v39 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v40 + 72);
      uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v8;
        uint64_t v15 = v12;
        int64_t v16 = v12 * v10;
        uint64_t v17 = v13;
        v38(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        uint64_t v18 = *(void *)(a2 + 40);
        uint64_t v19 = sub_10000AF70( &qword_10040F8C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v7, v4);
        uint64_t v13 = v17;
        unint64_t v21 = v20 & v17;
        if (a1 >= (uint64_t)v39)
        {
          if (v21 >= v39 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v24 = *(void *)(a2 + 48);
            unint64_t result = v24 + v15 * a1;
            uint64_t v25 = v24 + v16;
            uint64_t v8 = v14;
            if (v15 * a1 < v16 || (uint64_t v12 = v15, result >= v25 + v15))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v25, 1LL, v4);
LABEL_21:
              uint64_t v13 = v17;
              uint64_t v12 = v15;
            }

            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront(result);
              goto LABEL_21;
            }

            uint64_t v26 = *(void *)(a2 + 56);
            unint64_t v27 = v26 + 40 * a1;
            uint64_t v28 = (__int128 *)(v26 + 40 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= (unint64_t)v28 + 40))
            {
              __int128 v29 = *v28;
              __int128 v30 = v28[1];
              *(void *)(v27 + 32) = *((void *)v28 + 4);
              *(_OWORD *)unint64_t v27 = v29;
              *(_OWORD *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = v30;
              a1 = v10;
            }

            goto LABEL_5;
          }
        }

        else if (v21 >= v39 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }

        uint64_t v8 = v14;
        uint64_t v12 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v13;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    uint64_t v31 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v31;
    uint64_t v33 = (-1LL << a1) - 1;
  }

  else
  {
    uint64_t v31 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v33 = *v31;
    uint64_t v32 = (-1LL << a1) - 1;
  }

  *uint64_t v31 = v33 & v32;
  uint64_t v34 = *(void *)(a2 + 16);
  BOOL v35 = __OFSUB__(v34, 1LL);
  uint64_t v36 = v34 - 1;
  if (v35)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v36;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_1003294F8(unint64_t a1, uint64_t a2)
{
  return sub_100329504(a1, a2, type metadata accessor for NANPeer);
}

unint64_t sub_100329504(unint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  int64_t v4 = result;
  uint64_t v5 = a2 + 64;
  uint64_t v6 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v7 = (result + 1) & ~v6;
  if (((1LL << v7) & *(void *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    uint64_t v9 = ~v6;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v6);
    if ((*(void *)(v5 + 8 * (v7 >> 6)) & (1LL << v7)) != 0)
    {
      unint64_t v10 = (result + 1) & v9;
      while (1)
      {
        uint64_t v11 = (unsigned __int16 *)(*(void *)(a2 + 48) + 6 * v7);
        uint64_t v12 = *(unsigned int *)(v11 + 1);
        uint64_t v13 = *v11;
        Hasher.init(_seed:)(v33, *(void *)(a2 + 40));
        NANClusterChangeEvent.hash(into:)((int)v33, v13 | (v12 << 16));
        unint64_t result = Hasher._finalize()();
        unint64_t v14 = result & v9;
        if (v14 < v10) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v15 = *(void *)(a2 + 48);
        unint64_t v16 = v15 + 6 * v4;
        uint64_t v17 = (int *)(v15 + 6 * v7);
        if (v4 != v7 || v16 >= (unint64_t)v17 + 6)
        {
          int v18 = *v17;
          *(_WORD *)(v16 + 4) = *((_WORD *)v17 + 2);
          *(_DWORD *)unint64_t v16 = v18;
        }

        uint64_t v19 = *(void *)(a2 + 56);
        uint64_t v20 = a3(0LL);
        uint64_t v21 = *(void *)(*(void *)(v20 - 8) + 72LL);
        int64_t v22 = v21 * v4;
        unint64_t result = v19 + v21 * v4;
        int64_t v23 = v21 * v7;
        uint64_t v24 = v19 + v21 * v7;
        unint64_t v25 = v24 + v21;
        if (v22 < v23 || result >= v25)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v24, 1LL, v20);
        }

        else
        {
          int64_t v4 = v7;
          if (v22 == v23) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront(result);
        }

        int64_t v4 = v7;
LABEL_6:
        unint64_t v7 = (v7 + 1) & v9;
        if (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
          goto LABEL_21;
        }
      }

      if (v14 < v10) {
        goto LABEL_6;
      }
LABEL_11:
      goto LABEL_12;
    }

unint64_t sub_100329704(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        uint64_t v9 = (unsigned __int16 *)(*(void *)(a2 + 48) + 6 * v6);
        uint64_t v10 = *(unsigned int *)(v9 + 1);
        uint64_t v11 = *v9;
        Hasher.init(_seed:)(v31, *(void *)(a2 + 40));
        NANClusterChangeEvent.hash(into:)((int)v31, v11 | (v10 << 16));
        unint64_t result = Hasher._finalize()();
        unint64_t v12 = result & v7;
        if (v12 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v13 = *(void *)(a2 + 48);
        unint64_t v14 = v13 + 6 * v3;
        uint64_t v15 = (int *)(v13 + 6 * v6);
        if (v3 != v6 || v14 >= (unint64_t)v15 + 6)
        {
          int v16 = *v15;
          *(_WORD *)(v14 + 4) = *((_WORD *)v15 + 2);
          *(_DWORD *)unint64_t v14 = v16;
        }

        uint64_t v17 = *(void *)(a2 + 56);
        uint64_t v18 = sub_100002274((uint64_t *)&unk_10040CC50);
        uint64_t v19 = *(void *)(*(void *)(v18 - 8) + 72LL);
        int64_t v20 = v19 * v3;
        unint64_t result = v17 + v19 * v3;
        int64_t v21 = v19 * v6;
        uint64_t v22 = v17 + v19 * v6;
        unint64_t v23 = v22 + v19;
        if (v20 < v21 || result >= v23)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v22, 1LL, v18);
        }

        else
        {
          int64_t v3 = v6;
          if (v20 == v21) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront(result);
        }

        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }

      if (v12 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      goto LABEL_12;
    }

unint64_t sub_100329908(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v38 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin();
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v37 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v38 + 72);
      uint64_t v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v8;
        uint64_t v15 = v12;
        int64_t v16 = v12 * v10;
        uint64_t v17 = v13;
        v36(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        uint64_t v18 = *(void *)(a2 + 40);
        uint64_t v19 = sub_10000AF70( &qword_10040F8C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v4);
        uint64_t v13 = v17;
        unint64_t v21 = v20 & v17;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v24 = *(void *)(a2 + 48);
            unint64_t result = v24 + v15 * a1;
            uint64_t v25 = v24 + v16;
            uint64_t v8 = v14;
            if (v15 * a1 < v16 || (uint64_t v12 = v15, result >= v25 + v15))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v25, 1LL, v4);
LABEL_21:
              uint64_t v13 = v17;
              uint64_t v12 = v15;
            }

            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront(result);
              goto LABEL_21;
            }

            uint64_t v26 = *(void *)(a2 + 56);
            uint64_t v27 = (void *)(v26 + 8 * a1);
            uint64_t v28 = (void *)(v26 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= v28 + 1))
            {
              *uint64_t v27 = *v28;
              a1 = v10;
            }

            goto LABEL_5;
          }
        }

        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }

        uint64_t v8 = v14;
        uint64_t v12 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v13;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    BOOL v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1LL << a1) - 1;
  }

  else
  {
    BOOL v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1LL << a1) - 1;
  }

  uint64_t *v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1LL);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_100329BA8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(char *)(*(void *)(a2 + 48) + v6);
        Hasher.init(_seed:)(v23, *(void *)(a2 + 40));
        Hasher._combine(_:)(byte_100360598[v9]);
        unint64_t result = Hasher._finalize()();
        unint64_t v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }

        else if (v10 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_BYTE *)(v11 + v3);
          uint64_t v13 = (_BYTE *)(v11 + v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          int64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }

void *sub_100329D68()
{
  return sub_10032ADB4(type metadata accessor for NANAttribute, (uint64_t *)&unk_100410530);
}

void *sub_100329D7C()
{
  return sub_10032A644((uint64_t *)&unk_10040CC80);
}

void *sub_100329D88()
{
  uint64_t v1 = v0;
  sub_100002274((uint64_t *)&unk_1004104E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }

void *sub_100329F28()
{
  uint64_t v1 = v0;
  sub_100002274((uint64_t *)&unk_10040CC70);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void sub_10032A0E0()
{
  uint64_t v1 = v0;
  sub_100002274((uint64_t *)&unk_1004104D0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void sub_10032A298()
{
  uint64_t v1 = v0;
  sub_100002274((uint64_t *)&unk_1004104F0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v27 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }

void *sub_10032A470()
{
  return sub_10032B30C(type metadata accessor for NANInternetSharingStatistics.Requester, &qword_1004050C8);
}

id sub_10032A484()
{
  uint64_t v1 = v0;
  sub_100002274((uint64_t *)&unk_100410480);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }

void *sub_10032A624()
{
  return sub_10032BCD8(type metadata accessor for AWDLPeer, &qword_10040CCB8);
}

void *sub_10032A638()
{
  return sub_10032A644((uint64_t *)&unk_100410570);
}

void *sub_10032A644(uint64_t *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(a1);
  uint64_t v8 = *v1;
  uint64_t v9 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
    id result = (void *)swift_release(v8);
LABEL_28:
    *uint64_t v3 = v10;
    return result;
  }

  unint64_t v28 = v3;
  id result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1LL << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  uint64_t v29 = v8 + 64;
  int64_t v14 = 0LL;
  *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v25 >= v18) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v29 + 8 * v25);
    ++v14;
    if (!v26)
    {
      int64_t v14 = v25 + 1;
      if (v25 + 1 >= v18) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v29 + 8 * v14);
      if (!v26) {
        break;
      }
    }

void *sub_10032A880()
{
  uint64_t v1 = v0;
  sub_100002274(&qword_10040CDA8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void *sub_10032AA24()
{
  uint64_t v1 = v0;
  sub_100002274(&qword_10040CD90);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void *sub_10032ABD8()
{
  return sub_10032AC08((uint64_t *)&unk_10040CD00);
}

void *sub_10032ABE4()
{
  return sub_10032AC08(&qword_10040CCF0);
}

void *sub_10032ABF0()
{
  return sub_10032AC08(&qword_10040CCF8);
}

void *sub_10032ABFC()
{
  return sub_10032AC08(&qword_10040CCE8);
}

void *sub_10032AC08(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100002274(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v3);
    *uint64_t v2 = v5;
    return result;
  }

  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v18 >= v14) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v7 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v7 + 8 * v10);
      if (!v19) {
        break;
      }
    }

void *sub_10032ADA0()
{
  return sub_10032ADB4(type metadata accessor for NANPeer.Service, &qword_10040CCE0);
}

void *sub_10032ADB4(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v5 = v2;
  uint64_t v6 = a1(0LL);
  uint64_t v30 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v27 - v7;
  sub_100002274(a2);
  uint64_t v9 = *v2;
  uint64_t v10 = static _DictionaryStorage.copy(original:)(*v2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    id result = (void *)swift_release(v9);
LABEL_28:
    *uint64_t v5 = v11;
    return result;
  }

  unint64_t v28 = v5;
  id result = (void *)(v10 + 64);
  unint64_t v13 = (unint64_t)((1LL << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  uint64_t v29 = v9 + 64;
  int64_t v15 = 0LL;
  *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v17 = -1LL;
  if (v16 < 64) {
    uint64_t v17 = ~(-1LL << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 64);
  int64_t v19 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v21 = v20 | (v15 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v24 >= v19) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v24);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v24 + 1;
      if (v24 + 1 >= v19) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v29 + 8 * v15);
      if (!v25) {
        break;
      }
    }

void *sub_10032AFD4()
{
  uint64_t v1 = v0;
  sub_100002274((uint64_t *)&unk_100410540);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }

void *sub_10032B15C()
{
  uint64_t v1 = v0;
  sub_100002274(&qword_10040CD10);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

void *sub_10032B2F8()
{
  return sub_10032B30C(type metadata accessor for NANPeer.Service.AuthenticationStatus, &qword_10040FE80);
}

void *sub_10032B30C(uint64_t (*a1)(void), uint64_t *a2)
{
  unint64_t v37 = a1;
  uint64_t v36 = *(void *)(a1(0LL) - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v33 - v4;
  sub_100002274(a2);
  BOOL v33 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static _DictionaryStorage.copy(original:)(*v2);
  uint64_t v8 = *(void *)(v6 + 16);
  uint64_t v38 = v7;
  if (!v8)
  {
    id result = (void *)swift_release(v6);
    uint64_t v32 = v38;
    uint64_t v31 = v33;
LABEL_28:
    *uint64_t v31 = v32;
    return result;
  }

  uint64_t v9 = v7;
  id result = (void *)(v7 + 64);
  unint64_t v11 = (unint64_t)((1LL << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v6 || (unint64_t)result >= v6 + 64 + 8 * v11)
  {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v11);
    uint64_t v9 = v38;
  }

  int64_t v13 = 0LL;
  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v6 + 16);
  uint64_t v14 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & *(void *)(v6 + 64);
  uint64_t v34 = v6 + 64;
  int64_t v35 = (unint64_t)(v14 + 63) >> 6;
  for (i = v37; ; id result = (void *)sub_100022628((uint64_t)v5, *(void *)(v26 + 56) + v24, i))
  {
    if (v16)
    {
      unint64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }

    int64_t v28 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v28 >= v35) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v34 + 8 * v28);
    ++v13;
    if (!v29)
    {
      int64_t v13 = v28 + 1;
      if (v28 + 1 >= v35) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v34 + 8 * v13);
      if (!v29) {
        break;
      }
    }

void *sub_10032B570()
{
  uint64_t v1 = v0;
  sub_100002274((uint64_t *)&unk_100405150);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }

void *sub_10032B730()
{
  uint64_t v1 = v0;
  sub_100002274((uint64_t *)&unk_10040CCD0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }

void *sub_10032B8E4()
{
  uint64_t v1 = v0;
  sub_100002274((uint64_t *)&unk_10040CCA0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }

void *sub_10032BA84()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_10040CD80);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release(v6);
LABEL_28:
    *uint64_t v1 = v8;
    return result;
  }

  int64_t v25 = v1;
  id result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  uint64_t v26 = v6 + 64;
  int64_t v12 = 0LL;
  *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v21 >= v16) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v26 + 8 * v21);
    ++v12;
    if (!v22)
    {
      int64_t v12 = v21 + 1;
      if (v21 + 1 >= v16) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v26 + 8 * v12);
      if (!v22) {
        break;
      }
    }

void *sub_10032BCC4()
{
  return sub_10032BCD8(type metadata accessor for NANPeer, &qword_10040FE70);
}

void *sub_10032BCD8(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v31 = *(void *)(a1(0LL) - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v28 - v5;
  sub_100002274(a2);
  unint64_t v28 = v2;
  uint64_t v7 = *v2;
  uint64_t v8 = static _DictionaryStorage.copy(original:)(*v2);
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v7);
    *unint64_t v28 = v9;
    return result;
  }

  id result = (void *)(v8 + 64);
  unint64_t v11 = (unint64_t)((1LL << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  int64_t v13 = 0LL;
  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v7 + 16);
  uint64_t v14 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  uint64_t v29 = v7 + 64;
  int64_t v30 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v25 >= v30) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v29 + 8 * v25);
    ++v13;
    if (!v26)
    {
      int64_t v13 = v25 + 1;
      if (v25 + 1 >= v30) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v29 + 8 * v13);
      if (!v26) {
        break;
      }
    }

void *sub_10032BF08()
{
  uint64_t v1 = v0;
  uint64_t v27 = *(void *)(sub_100002274((uint64_t *)&unk_10040CC50) - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_1004104B0);
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    id result = (void *)swift_release(v4);
LABEL_25:
    *uint64_t v1 = v6;
    return result;
  }

  uint64_t v24 = v1;
  id result = (void *)(v5 + 64);
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v4 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v4 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v4 + 64);
  uint64_t v25 = v4 + 64;
  int64_t v26 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v13 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v14 = v13 | (v9 << 6);
      goto LABEL_9;
    }

    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v21 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v9);
      if (!v22) {
        break;
      }
    }

void sub_10032C154()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_100410560);
  uint64_t v25 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_26:
    swift_release(v5);
    *uint64_t v25 = v7;
    return;
  }

  unint64_t v8 = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  int64_t v11 = 0LL;
  *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  uint64_t v26 = v5 + 64;
  int64_t v27 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v27) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v26 + 8 * v21);
    ++v11;
    if (!v22)
    {
      int64_t v11 = v21 + 1;
      if (v21 + 1 >= v27) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v26 + 8 * v11);
      if (!v22) {
        break;
      }
    }

void sub_10032C37C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_10040CD20);
  uint64_t v24 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_26:
    swift_release(v5);
    uint64_t *v24 = v7;
    return;
  }

  unint64_t v8 = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v25 = v5 + 64;
  int64_t v11 = 0LL;
  *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }

void sub_10032C5AC()
{
  uint64_t v1 = v0;
  sub_100002274((uint64_t *)&unk_10040CCC0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }

uint64_t sub_10032C76C(void *a1, unint64_t a2, int a3)
{
  uint64_t v4 = v3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v3);
  if ((result & 1) == 0)
  {
    uint64_t v13 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_10032A484();
    uint64_t v9 = *v3;
    *uint64_t v3 = v13;
    uint64_t result = swift_bridgeObjectRelease(v9);
  }

  if ((a2 & 0x8000000000000000LL) != 0 || (uint64_t v10 = *v3, 1LL << *(_BYTE *)(*v4 + 32) <= (uint64_t)a2))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (((*(void *)(v10 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a2) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if (*(_DWORD *)(v10 + 36) == a3)
  {
    *uint64_t v4 = 0x8000000000000000LL;
    uint64_t v11 = *(void *)(*(void *)(v10 + 48) + 8 * a2);
    *a1 = *(void *)(*(void *)(v10 + 56) + 8 * a2);
    sub_100328A00(a2, v10);
    uint64_t v12 = *v4;
    *uint64_t v4 = v10;
    swift_bridgeObjectRelease(v12);
    return v11;
  }

void sub_10032C864(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native(*v3) & 1) == 0)
  {
    uint64_t v13 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_10032BCD8(type metadata accessor for AWDLPeer, &qword_10040CCB8);
    uint64_t v8 = *v3;
    *uint64_t v3 = v13;
    swift_bridgeObjectRelease(v8);
  }

  if ((a2 & 0x8000000000000000LL) != 0 || (uint64_t v9 = *v3, 1LL << *(_BYTE *)(*v4 + 32) <= (uint64_t)a2))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (((*(void *)(v9 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a2) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if (*(_DWORD *)(v9 + 36) == a3)
  {
    *uint64_t v4 = 0x8000000000000000LL;
    uint64_t v10 = *(void *)(v9 + 56);
    uint64_t v11 = type metadata accessor for AWDLPeer(0LL);
    sub_100022628(v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a2, a1, type metadata accessor for AWDLPeer);
    sub_100329504(a2, v9, type metadata accessor for AWDLPeer);
    uint64_t v12 = *v4;
    *uint64_t v4 = v9;
    swift_bridgeObjectRelease(v12);
    return;
  }

void sub_10032C9A0(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native(*v3) & 1) == 0)
  {
    uint64_t v13 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_10032ADB4(type metadata accessor for NANPeer.Service, &qword_10040CCE0);
    uint64_t v8 = *v3;
    *uint64_t v3 = v13;
    swift_bridgeObjectRelease(v8);
  }

  if ((a2 & 0x8000000000000000LL) != 0 || (uint64_t v9 = *v3, 1LL << *(_BYTE *)(*v4 + 32) <= (uint64_t)a2))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (((*(void *)(v9 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a2) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if (*(_DWORD *)(v9 + 36) == a3)
  {
    *uint64_t v4 = 0x8000000000000000LL;
    uint64_t v10 = *(void *)(v9 + 56);
    uint64_t v11 = type metadata accessor for NANPeer.Service(0LL);
    sub_100022628(v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a2, a1, type metadata accessor for NANPeer.Service);
    sub_100328E5C(a2, v9);
    uint64_t v12 = *v4;
    *uint64_t v4 = v9;
    swift_bridgeObjectRelease(v12);
    return;
  }

void sub_10032CAC0(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v5 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native(*v4) & 1) == 0)
  {
    uint64_t v18 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    sub_10032B30C(type metadata accessor for NANPeer.Service.AuthenticationStatus, &qword_10040FE80);
    uint64_t v10 = *v4;
    *uint64_t v4 = v18;
    swift_bridgeObjectRelease(v10);
  }

  if ((a3 & 0x8000000000000000LL) != 0 || (uint64_t v11 = *v4, 1LL << *(_BYTE *)(*v5 + 32) <= (uint64_t)a3))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (((*(void *)(v11 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a3) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if (*(_DWORD *)(v11 + 36) == a4)
  {
    *uint64_t v5 = 0x8000000000000000LL;
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = *(void *)(v11 + 48) - a3 + 8 * a3;
    __int16 v14 = *(_WORD *)(v13 + 4);
    char v15 = *(_BYTE *)(v13 + 6);
    *(_DWORD *)a1 = *(_DWORD *)v13;
    *(_WORD *)(a1 + 4) = v14;
    *(_BYTE *)(a1 + 6) = v15;
    uint64_t v16 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0LL);
    sub_100022628( v12 + *(void *)(*(void *)(v16 - 8) + 72LL) * a3,  a2,  type metadata accessor for NANPeer.Service.AuthenticationStatus);
    sub_100329028(a3, v11, type metadata accessor for NANPeer.Service.AuthenticationStatus);
    uint64_t v17 = *v5;
    *uint64_t v5 = v11;
    swift_bridgeObjectRelease(v17);
    return;
  }

void *sub_10032CC00(void *a1)
{
  return sub_1002C9E94(0LL, a1[2], 0, a1);
}

void *sub_10032CC14(void *a1)
{
  return sub_1002C9FBC(0LL, a1[2], 0, a1);
}

uint64_t sub_10032CC2C(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v2, 0LL, a1);
}

uint64_t sub_10032CC94(Swift::UInt *a1, Swift::UInt a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v14, *(void *)(*v2 + 40LL));
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v14[0] = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    sub_10032ED18(a2, v8, isUniquelyReferenced_nonNull_native);
    uint64_t v13 = *v2;
    *uint64_t v2 = v14[0];
    swift_bridgeObjectRelease(v13);
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v9 = *(void *)(v5 + 48);
  if (*(void *)(v9 + 8 * v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (*(void *)(v9 + 8 * v8) != a2);
  }

  uint64_t result = 0LL;
  a2 = *(void *)(*(void *)(*v2 + 48LL) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_10032CDB0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v24, *(void *)(*v3 + 40LL));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    uint64_t v13 = v12[1];
    BOOL v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0LL) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      char v15 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0LL;
    }

    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v19 = (void *)(v11 + 16 * v10);
      uint64_t v20 = v19[1];
      BOOL v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0LL) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease(v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(a3);
  sub_10032EE64(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v23 = *v3;
  *uint64_t v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

int8x8_t sub_10032CF5C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  unint64_t v6 = *v2;
  Hasher.init(_seed:)(v21, *(void *)(*v2 + 40LL));
  NANClusterChangeEvent.hash(into:)((int)v21, a2 & 0xFFFFFFFFFFFFLL);
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  unint64_t v10 = v6 + 56;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
    goto LABEL_8;
  }
  unint64_t v11 = *(unsigned __int16 *)(*(void *)(v6 + 48) + 6 * v9) | ((unint64_t)*(unsigned int *)(*(void *)(v6 + 48)
                                                                                                  + 6 * v9
                                                                                                  + 2) << 16);
  swift_bridgeObjectRetain(v6);
  if (!static NANClusterChangeEvent.__derived_struct_equals(_:_:)(v11, a2 & 0xFFFFFFFFFFFFLL))
  {
    unint64_t v9 = (v9 + 1) & ~v8;
    if (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) != 0)
    {
      while (!static NANClusterChangeEvent.__derived_struct_equals(_:_:)( *(unsigned __int16 *)(*(void *)(v6 + 48) + 6 * v9) | ((unint64_t)*(unsigned int *)(*(void *)(v6 + 48) + 6 * v9 + 2) << 16),  a2 & 0xFFFFFFFFFFFFLL))
      {
        unint64_t v9 = (v9 + 1) & ~v8;
        if (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
          goto LABEL_7;
        }
      }

      goto LABEL_3;
    }

uint64_t sub_10032D140(_BYTE *a1, unint64_t a2)
{
  unint64_t v3 = a2;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = a2 >> 24;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v8 = HIWORD(a2);
  unint64_t v9 = *v2;
  Hasher.init(_seed:)(v30, *(void *)(*v2 + 40));
  Hasher._combine(_:)(v3);
  char v26 = v7;
  char v27 = v6;
  char v28 = v5;
  NANClusterChangeEvent.hash(into:)( (int)v30,  ((unint64_t)BYTE5(v3) << 32) & 0xFFFF00FF00000000LL | ((unint64_t)v8 << 40) | ((unint64_t)v7 << 24) | ((unint64_t)v6 << 16) | ((unint64_t)v5 << 8) | BYTE1(v3));
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1LL << *(_BYTE *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0)
  {
    unint64_t v15 = ((unint64_t)BYTE5(v3) << 40) | ((unint64_t)BYTE6(v3) << 48) | ((unint64_t)BYTE4(v3) << 32) | ((unint64_t)BYTE3(v3) << 24) | ((unint64_t)BYTE2(v3) << 16) | ((unint64_t)BYTE1(v3) << 8) | v3;
LABEL_8:
    unint64_t v9 = v3 >> 8;
    unint64_t v22 = v3 >> 40;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v29);
    v30[0] = *v29;
    void *v29 = 0x8000000000000000LL;
    sub_10032F1CC(v15, v12, isUniquelyReferenced_nonNull_native);
    uint64_t v25 = *v29;
    void *v29 = v30[0];
    swift_bridgeObjectRelease(v25);
    uint64_t result = 1LL;
    char v20 = v27;
    char v19 = v28;
    char v23 = v8;
    char v21 = v26;
    goto LABEL_9;
  }

  uint64_t v13 = (unsigned __int16 *)(*(void *)(v9 + 48) - v12 + 8 * v12);
  unint64_t v14 = *v13 | ((unint64_t)*((unsigned __int8 *)v13 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v13 + 3) << 24);
  unint64_t v15 = ((unint64_t)BYTE5(v3) << 40) | ((unint64_t)BYTE6(v3) << 48) | ((unint64_t)BYTE4(v3) << 32) | ((unint64_t)BYTE3(v3) << 24) | ((unint64_t)BYTE2(v3) << 16) | ((unint64_t)BYTE1(v3) << 8) | v3;
  swift_bridgeObjectRetain(v9);
  if (!static NANPeerServiceIdentifier.__derived_struct_equals(_:_:)(v14, v15))
  {
    while (1)
    {
      unint64_t v12 = (v12 + 1) & ~v11;
      if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
        break;
      }
      int32x4_t v16 = (unsigned __int16 *)(*(void *)(v9 + 48) - v12 + 8 * v12);
      if (static NANPeerServiceIdentifier.__derived_struct_equals(_:_:)( *v16 | ((unint64_t)*((unsigned __int8 *)v16 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v16 + 3) << 24),  v15))
      {
        goto LABEL_5;
      }
    }

    swift_bridgeObjectRelease(v9);
    goto LABEL_8;
  }

uint64_t sub_10032D3C0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v5 = v4;
  unsigned int v6 = a4;
  Swift::UInt8 v10 = BYTE1(a4);
  uint64_t v11 = *v5;
  Hasher.init(_seed:)(v47, *(void *)(*v5 + 40LL));
  uint64_t v45 = a2;
  Swift::String v12 = String.lowercased()();
  swift_bridgeObjectRetain(v11);
  String.hash(into:)(v47, v12._countAndFlagsBits, v12._object);
  swift_bridgeObjectRelease(v12._object);
  if ((v6 & 1) != 0) {
    uint64_t v13 = 7365749LL;
  }
  else {
    uint64_t v13 = 7365492LL;
  }
  String.hash(into:)(v47, v13, 0xE300000000000000LL);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  Hasher._combine(_:)(v10);
  Swift::Int v14 = Hasher._finalize()();
  uint64_t v15 = -1LL << *(_BYTE *)(v11 + 32);
  unint64_t v16 = v14 & ~v15;
  uint64_t v17 = v11 + 56;
  char v44 = v6 & 1;
  if (((*(void *)(v11 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0)
  {
    uint64_t v46 = a3;
    uint64_t v27 = a2;
    swift_bridgeObjectRelease(v11);
    __int16 v32 = v6 & 0xFF01;
    goto LABEL_11;
  }

  uint64_t v42 = v5;
  uint64_t v43 = a1;
  uint64_t v18 = 24 * v16;
  uint64_t v19 = *(void *)(v11 + 48) + 24 * v16;
  uint64_t v20 = *(void *)v19;
  uint64_t v21 = *(void *)(v19 + 8);
  unsigned int v22 = v6;
  __int16 v23 = *(unsigned __int8 *)(v19 + 16) | (*(unsigned __int8 *)(v19 + 17) << 8);
  unsigned int v41 = v22;
  __int16 v24 = v22 & 0xFF01;
  swift_bridgeObjectRetain(v21);
  LOBYTE(v23) = static DNSRecords.Identifier.== infix(_:_:)(v20, v21, v23, v45, a3, v24);
  swift_bridgeObjectRelease(v21);
  uint64_t v25 = a3;
  if ((v23 & 1) == 0)
  {
    uint64_t v46 = a3;
    uint64_t v26 = ~v15;
    unint64_t v16 = (v16 + 1) & v26;
    uint64_t v27 = v45;
    if (((*(void *)(v17 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
    {
      while (1)
      {
        uint64_t v18 = 24 * v16;
        uint64_t v28 = *(void *)(v11 + 48) + 24 * v16;
        uint64_t v29 = *(void *)v28;
        uint64_t v30 = *(void *)(v28 + 8);
        __int16 v31 = *(unsigned __int8 *)(v28 + 16) | (*(unsigned __int8 *)(v28 + 17) << 8);
        swift_bridgeObjectRetain(v30);
        LOBYTE(v29) = static DNSRecords.Identifier.== infix(_:_:)(v29, v30, v31, v45, v46, v24);
        swift_bridgeObjectRelease(v30);
        if ((v29 & 1) != 0) {
          break;
        }
        unint64_t v16 = (v16 + 1) & v26;
        if (((*(void *)(v17 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0) {
          goto LABEL_9;
        }
      }

      uint64_t v25 = v46;
      goto LABEL_13;
    }

void sub_10032D6AC(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_10032D724()
{
  unint64_t v2 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(v1 + 32));
  if (((*(void *)(v1 + 56 + ((v2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v2) & 1) != 0) {
    __asm { BR              X9 }
  }

  swift_bridgeObjectRelease(v1);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
  uint64_t v8 = *v6;
  *unsigned int v6 = 0x8000000000000000LL;
  sub_10032F6B8(v0, v2, isUniquelyReferenced_nonNull_native);
  uint64_t v4 = *v6;
  *unsigned int v6 = v8;
  swift_bridgeObjectRelease(v4);
  uint64_t result = 1LL;
  *unint64_t v7 = (_BYTE)v0;
  return result;
}

Swift::Int sub_10032DA44(uint64_t a1)
{
  unint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100002274((uint64_t *)&unk_10040ED20);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  Swift::Int v6 = result;
  if (*(void *)(v3 + 16))
  {
    uint64_t v29 = v2;
    int64_t v7 = 0LL;
    uint64_t v8 = (void *)(v3 + 56);
    uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v3 + 56);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    Swift::Int v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v7 << 6);
      }

      else
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          int64_t v7 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_36;
          }
          unint64_t v18 = v8[v7];
          if (!v18)
          {
            int64_t v7 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_36;
            }
            unint64_t v18 = v8[v7];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                uint64_t v28 = 1LL << *(_BYTE *)(v3 + 32);
                if (v28 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v8 = -1LL << v28;
                }
                unint64_t v2 = v29;
                *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v7 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v7 >= v12) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v8[v7];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v7 = v19;
            }
          }
        }

uint64_t sub_10032DCEC(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100002274((uint64_t *)&unk_100410580);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    __int16 v32 = v2;
    unsigned int v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v10) {
          goto LABEL_36;
        }
        unint64_t v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v10) {
            goto LABEL_36;
          }
          unint64_t v19 = v33[v13];
          if (!v19)
          {
            int64_t v13 = v18 + 2;
            if (v18 + 2 >= v10) {
              goto LABEL_36;
            }
            unint64_t v19 = v33[v13];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                unint64_t v2 = v32;
                uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *unsigned int v33 = -1LL << v31;
                }
                *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v13 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v10) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v33[v13];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v20;
            }
          }
        }

Swift::Int sub_10032DFC8(uint64_t a1)
{
  unint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100002274((uint64_t *)&unk_1004104C0);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  Swift::Int v6 = result;
  if (*(void *)(v3 + 16))
  {
    int64_t v7 = 0LL;
    uint64_t v37 = (void *)(v3 + 56);
    Swift::Int v38 = v3;
    uint64_t v8 = 1LL << *(_BYTE *)(v3 + 32);
    if (v8 < 64) {
      uint64_t v9 = ~(-1LL << v8);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v3 + 56);
    uint64_t v35 = v2;
    int64_t v36 = (unint64_t)(v8 + 63) >> 6;
    Swift::Int v11 = result + 56;
    while (1)
    {
      if (v10)
      {
        unint64_t v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v39 = v7;
        unint64_t v15 = v14 | (v7 << 6);
      }

      else
      {
        int64_t v16 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v16 >= v36) {
          goto LABEL_36;
        }
        unint64_t v17 = v37[v16];
        int64_t v18 = v7 + 1;
        if (!v17)
        {
          int64_t v18 = v16 + 1;
          if (v16 + 1 >= v36) {
            goto LABEL_36;
          }
          unint64_t v17 = v37[v18];
          if (!v17)
          {
            int64_t v18 = v16 + 2;
            if (v16 + 2 >= v36) {
              goto LABEL_36;
            }
            unint64_t v17 = v37[v18];
            if (!v17)
            {
              int64_t v19 = v16 + 3;
              if (v19 >= v36)
              {
LABEL_36:
                uint64_t v34 = 1LL << *(_BYTE *)(v3 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v37 = -1LL << v34;
                }
                unint64_t v2 = v35;
                *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v17 = v37[v19];
              if (!v17)
              {
                while (1)
                {
                  int64_t v18 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v18 >= v36) {
                    goto LABEL_36;
                  }
                  unint64_t v17 = v37[v18];
                  ++v19;
                  if (v17) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v18 = v19;
            }
          }
        }

Swift::Int sub_10032E2F8(uint64_t a1)
{
  unint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100002274((uint64_t *)&unk_10040ED50);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  Swift::Int v6 = result;
  if (*(void *)(v3 + 16))
  {
    int64_t v7 = 0LL;
    uint64_t v37 = (void *)(v3 + 56);
    Swift::Int v38 = v3;
    uint64_t v8 = 1LL << *(_BYTE *)(v3 + 32);
    if (v8 < 64) {
      uint64_t v9 = ~(-1LL << v8);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v3 + 56);
    uint64_t v35 = v2;
    int64_t v36 = (unint64_t)(v8 + 63) >> 6;
    Swift::Int v11 = result + 56;
    while (1)
    {
      if (v10)
      {
        uint64_t v39 = (v10 - 1) & v10;
        int64_t v40 = v7;
        unint64_t v14 = __clz(__rbit64(v10)) | (v7 << 6);
      }

      else
      {
        int64_t v15 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v15 >= v36) {
          goto LABEL_36;
        }
        unint64_t v16 = v37[v15];
        int64_t v17 = v7 + 1;
        if (!v16)
        {
          int64_t v17 = v7 + 2;
          if (v7 + 2 >= v36) {
            goto LABEL_36;
          }
          unint64_t v16 = v37[v17];
          if (!v16)
          {
            int64_t v17 = v7 + 3;
            if (v7 + 3 >= v36) {
              goto LABEL_36;
            }
            unint64_t v16 = v37[v17];
            if (!v16)
            {
              uint64_t v18 = v7 + 4;
              if (v7 + 4 >= v36)
              {
LABEL_36:
                uint64_t v34 = 1LL << *(_BYTE *)(v3 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v37 = -1LL << v34;
                }
                unint64_t v2 = v35;
                *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v16 = v37[v18];
              if (!v16)
              {
                while (1)
                {
                  int64_t v17 = v18 + 1;
                  if (__OFADD__(v18, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v17 >= v36) {
                    goto LABEL_36;
                  }
                  unint64_t v16 = v37[v17];
                  ++v18;
                  if (v16) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v17 = v7 + 4;
            }
          }
        }

uint64_t sub_10032E640(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100002274((uint64_t *)&unk_10040ED40);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    Swift::Int v38 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v36 = v2;
    int64_t v37 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v10 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v16 = v15 | (v12 << 6);
      }

      else
      {
        int64_t v17 = v12 + 1;
        if (__OFADD__(v12, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        if (v17 >= v37) {
          goto LABEL_39;
        }
        unint64_t v18 = v38[v17];
        ++v12;
        if (!v18)
        {
          int64_t v12 = v17 + 1;
          if (v17 + 1 >= v37) {
            goto LABEL_39;
          }
          unint64_t v18 = v38[v12];
          if (!v18)
          {
            int64_t v12 = v17 + 2;
            if (v17 + 2 >= v37) {
              goto LABEL_39;
            }
            unint64_t v18 = v38[v12];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v37)
              {
LABEL_39:
                swift_release(v3);
                unint64_t v2 = v36;
                uint64_t v35 = 1LL << *(_BYTE *)(v3 + 32);
                if (v35 > 63) {
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v38 = -1LL << v35;
                }
                *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v38[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v12 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_45;
                  }
                  if (v12 >= v37) {
                    goto LABEL_39;
                  }
                  unint64_t v18 = v38[v12];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v12 = v19;
            }
          }
        }

uint64_t sub_10032E9A8(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100002274(qword_10040ED60);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  if (!*(void *)(v3 + 16)) {
    goto LABEL_28;
  }
  unint64_t v18 = v2;
  uint64_t v6 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v7 = (void *)(v3 + 56);
  if (v6 < 64) {
    uint64_t v8 = ~(-1LL << v6);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v3 + 56);
  int64_t v10 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    unint64_t v11 = __clz(__rbit64(v9));
    goto LABEL_23;
  }

  if (v10 > 1)
  {
    unint64_t v12 = *(void *)(v3 + 64);
    uint64_t v13 = 1LL;
    if (v12) {
      goto LABEL_22;
    }
    uint64_t v13 = 2LL;
    if (v10 > 2)
    {
      unint64_t v12 = *(void *)(v3 + 72);
      if (v12) {
        goto LABEL_22;
      }
      uint64_t v13 = 3LL;
      if (v10 > 3)
      {
        unint64_t v12 = *(void *)(v3 + 80);
        if (!v12)
        {
          uint64_t v14 = 4LL;
          if (v10 > 4)
          {
            unint64_t v12 = *(void *)(v3 + 88);
            if (v12)
            {
              uint64_t v13 = 4LL;
              goto LABEL_22;
            }

            while (1)
            {
              uint64_t v13 = v14 + 1;
              if (__OFADD__(v14, 1LL))
              {
                __break(1u);
                JUMPOUT(0x10032ED04LL);
              }

              if (v13 >= v10) {
                break;
              }
              unint64_t v12 = v7[v13];
              ++v14;
              if (v12) {
                goto LABEL_22;
              }
            }
          }

          goto LABEL_24;
        }

uint64_t sub_10032ED18(uint64_t result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10032DA44(v8);
  }

  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_1002B1788();
      goto LABEL_14;
    }

    sub_10032FA8C(v8);
  }

  uint64_t v9 = *v3;
  Hasher.init(_seed:)(v18, *(void *)(*v3 + 40));
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v9 + 48);
    if (*(void *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for WiFiP2PSPITransactionType(0LL);
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }

    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v11 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }

uint64_t sub_10032EE64(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  Swift::UInt v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_10032DCEC(v11);
  }

  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_1002B191C();
      goto LABEL_22;
    }

    sub_10032FD04(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v28, *(void *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  uint64_t result = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  uint64_t v14 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v12 + 48);
    BOOL v16 = (void *)(v15 + 16 * a3);
    uint64_t v17 = v16[1];
    BOOL v18 = *v16 == v8 && v17 == a2;
    if (v18 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0LL), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v20 = (void *)(v15 + 16 * a3);
        uint64_t v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0LL);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_21;
      }
    }
  }

uint64_t sub_10032EFFC(uint64_t result, unint64_t i, char a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_13;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10032DFC8(v9);
  }

  else
  {
    if (v8 > v7)
    {
      uint64_t result = (uint64_t)sub_1002B1ACC();
      goto LABEL_13;
    }

    sub_10032FFB0(v9);
  }

  uint64_t v10 = *v3;
  Hasher.init(_seed:)(v19, *(void *)(*v3 + 40));
  NANClusterChangeEvent.hash(into:)((int)v19, v6 & 0xFFFFFFFFFFFFLL);
  uint64_t result = Hasher._finalize()();
  uint64_t v11 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t i = result & ~v11;
  uint64_t v12 = v10 + 56;
  if (((*(void *)(v10 + 56 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t result = static NANClusterChangeEvent.__derived_struct_equals(_:_:)( *(unsigned __int16 *)(*(void *)(v10 + 48) + 6 * i) | ((unint64_t)*(unsigned int *)(*(void *)(v10 + 48) + 6 * i + 2) << 16),  v6 & 0xFFFFFFFFFFFFLL);
    if ((result & 1) != 0) {
      goto LABEL_16;
    }
    uint64_t v13 = ~v11;
    for (unint64_t i = (i + 1) & v13; ((*(void *)(v12 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v13)
    {
      uint64_t result = static NANClusterChangeEvent.__derived_struct_equals(_:_:)( *(unsigned __int16 *)(*(void *)(v10 + 48) + 6 * i) | ((unint64_t)*(unsigned int *)(*(void *)(v10 + 48) + 6 * i + 2) << 16),  v6 & 0xFFFFFFFFFFFFLL);
      if ((result & 1) != 0) {
        goto LABEL_16;
      }
    }
  }

unint64_t sub_10032F1CC(unint64_t result, unint64_t a2, char a3)
{
  unint64_t v5 = result;
  unint64_t v6 = HIWORD(result);
  unint64_t v7 = HIDWORD(result);
  unint64_t v8 = *(void *)(*v3 + 16);
  unint64_t v9 = *(void *)(*v3 + 24);
  unint64_t v22 = result >> 16;
  unint64_t v23 = result >> 24;
  if (v9 > v8 && (a3 & 1) != 0)
  {
    unint64_t v10 = HIDWORD(result);
    unint64_t v11 = HIWORD(result);
    goto LABEL_14;
  }

  uint64_t v12 = v8 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10032E2F8(v12);
  }

  else
  {
    if (v9 > v8)
    {
      LOBYTE(v10) = v7;
      LOBYTE(v1sub_100058090(v4, v0 + 1) = v6;
      uint64_t result = (unint64_t)sub_1002B1C74();
      goto LABEL_14;
    }

    sub_1003302AC(v12);
  }

  uint64_t v13 = *v3;
  Hasher.init(_seed:)(v24, *(void *)(*v3 + 40));
  Hasher._combine(_:)(v5);
  LOBYTE(v1sub_100058090(v4, v0 + 1) = v6;
  LOBYTE(v10) = v7;
  NANClusterChangeEvent.hash(into:)( (int)v24,  ((unint64_t)BYTE5(v5) << 32) & 0xFFFF00FF00000000LL | ((unint64_t)v6 << 40) | ((unint64_t)v7 << 24) | ((unint64_t)v23 << 16) | ((unint64_t)v22 << 8) | BYTE1(v5));
  uint64_t result = Hasher._finalize()();
  uint64_t v14 = -1LL << *(_BYTE *)(v13 + 32);
  a2 = result & ~v14;
  if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v15 = (unsigned __int16 *)(*(void *)(v13 + 48) - a2 + 8 * a2);
    uint64_t result = static NANPeerServiceIdentifier.__derived_struct_equals(_:_:)( *v15 | ((unint64_t)*((unsigned __int8 *)v15 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v15 + 3) << 24),  ((unint64_t)BYTE5(v5) << 40) | ((unint64_t)BYTE6(v5) << 48) | ((unint64_t)BYTE4(v5) << 32) | ((unint64_t)BYTE3(v5) << 24) | ((unint64_t)BYTE2(v5) << 16) | ((unint64_t)BYTE1(v5) << 8) | v5);
    if ((result & 1) != 0)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for NANPeerServiceIdentifier);
      __break(1u);
    }

    else
    {
      while (1)
      {
        a2 = (a2 + 1) & ~v14;
        if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        uint64_t v16 = (unsigned __int16 *)(*(void *)(v13 + 48) - a2 + 8 * a2);
        uint64_t result = static NANPeerServiceIdentifier.__derived_struct_equals(_:_:)( *v16 | ((unint64_t)*((unsigned __int8 *)v16 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v16 + 3) << 24),  ((unint64_t)BYTE5(v5) << 40) | ((unint64_t)BYTE6(v5) << 48) | ((unint64_t)BYTE4(v5) << 32) | ((unint64_t)BYTE3(v5) << 24) | ((unint64_t)BYTE2(v5) << 16) | ((unint64_t)BYTE1(v5) << 8) | v5);
        if ((result & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

void sub_10032F428(uint64_t a1, uint64_t a2, __int16 a3, unint64_t a4, char a5)
{
  int v10 = a3 & 1;
  unint64_t v11 = *(void *)(*v5 + 16);
  unint64_t v12 = *(void *)(*v5 + 24);
  char v39 = a3 & 1;
  char v37 = HIBYTE(a3);
  if (v12 > v11 && (a5 & 1) != 0) {
    goto LABEL_17;
  }
  uint64_t v13 = v11 + 1;
  if ((a5 & 1) != 0)
  {
    sub_10032E640(v13);
  }

  else
  {
    if (v12 > v11)
    {
      uint64_t v14 = a1;
      sub_1002B1E24();
      goto LABEL_18;
    }

    sub_1003305C0(v13);
  }

  uint64_t v15 = *v5;
  Hasher.init(_seed:)(v40, *(void *)(*v5 + 40));
  Swift::String v16 = String.lowercased()();
  String.hash(into:)(v40, v16._countAndFlagsBits, v16._object);
  swift_bridgeObjectRelease(v16._object);
  uint64_t v17 = v10 ? 7365749LL : 7365492LL;
  String.hash(into:)(v40, v17, 0xE300000000000000LL);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  Hasher._combine(_:)(HIBYTE(a3));
  a4 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(v15 + 32));
  if (((*(void *)(v15 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a4) & 1) == 0) {
    goto LABEL_17;
  }
  __int16 v18 = a3;
  uint64_t v36 = -1LL << *(_BYTE *)(v15 + 32);
  uint64_t v19 = *(void *)(v15 + 48) + 24 * a4;
  uint64_t v20 = *(void *)v19;
  uint64_t v21 = *(void *)(v19 + 8);
  uint64_t v22 = a2;
  __int16 v23 = *(unsigned __int8 *)(v19 + 16) | (*(unsigned __int8 *)(v19 + 17) << 8);
  __int16 v24 = v18 & 0xFF01;
  swift_bridgeObjectRetain(v21);
  __int16 v25 = v23;
  a2 = v22;
  uint64_t v14 = a1;
  LOBYTE(v20) = static DNSRecords.Identifier.== infix(_:_:)(v20, v21, v25, a1, v22, v24);
  swift_bridgeObjectRelease(v21);
  if ((v20 & 1) != 0)
  {
LABEL_16:
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DNSRecords.Identifier);
    __break(1u);
LABEL_17:
    uint64_t v14 = a1;
    goto LABEL_18;
  }

  a1 = ~v36;
  while (1)
  {
    a4 = (a4 + 1) & a1;
    if (((*(void *)(v15 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a4) & 1) == 0) {
      break;
    }
    uint64_t v26 = *(void *)(v15 + 48) + 24 * a4;
    uint64_t v27 = *(void *)v26;
    uint64_t v28 = *(void *)(v26 + 8);
    __int16 v29 = *(unsigned __int8 *)(v26 + 16) | (*(unsigned __int8 *)(v26 + 17) << 8);
    swift_bridgeObjectRetain(v28);
    __int16 v30 = v29;
    a2 = v22;
    LOBYTE(v27) = static DNSRecords.Identifier.== infix(_:_:)(v27, v28, v30, v14, v22, v24);
    swift_bridgeObjectRelease(v28);
    if ((v27 & 1) != 0) {
      goto LABEL_16;
    }
  }

void *sub_10032F6B8(void *result, unint64_t a2, char a3)
{
  char v5 = (char)result;
  unint64_t v6 = *(void *)(*(void *)v3 + 16LL);
  unint64_t v7 = *(void *)(*(void *)v3 + 24LL);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    uint64_t v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      sub_10032E9A8(v8);
      goto LABEL_8;
    }

    if (v7 <= v6)
    {
      sub_1003308F8(v8);
LABEL_8:
      Hasher.init(_seed:)(v15, *(void *)(*(void *)v3 + 40LL));
      __asm { BR              X10 }
    }

    uint64_t result = sub_1002B1FE8();
  }

  uint64_t v9 = *v13;
  *(void *)(*v13 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(_BYTE *)(*(void *)(v9 + 48) + a2) = v14;
  uint64_t v10 = *(void *)(v9 + 16);
  BOOL v11 = __OFADD__(v10, 1LL);
  uint64_t v12 = v10 + 1;
  if (v11)
  {
    __break(1u);
    JUMPOUT(0x10032FA34LL);
  }

  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
  return result;
}

Swift::Int sub_10032FA8C(uint64_t a1)
{
  unint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100002274((uint64_t *)&unk_10040ED20);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  Swift::Int v6 = result;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *unint64_t v2 = v6;
    return result;
  }

  uint64_t v28 = v2;
  int64_t v7 = 0LL;
  Swift::Int v8 = v3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  Swift::Int v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }

uint64_t sub_10032FD04(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100002274((uint64_t *)&unk_100410580);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
LABEL_38:
    *unint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v13);
      if (!v19)
      {
        int64_t v13 = v18 + 2;
        if (v18 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v13);
        if (!v19) {
          break;
        }
      }
    }

Swift::Int sub_10032FFB0(uint64_t a1)
{
  unint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100002274((uint64_t *)&unk_1004104C0);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  Swift::Int v6 = result;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *unint64_t v2 = v6;
    return result;
  }

  int64_t v7 = 0LL;
  BOOL v34 = v2;
  Swift::Int v35 = v3 + 56;
  uint64_t v8 = 1LL << *(_BYTE *)(v3 + 32);
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  Swift::Int v37 = v3;
  Swift::Int v11 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v14 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v38 = v7;
      unint64_t v15 = v14 | (v7 << 6);
      goto LABEL_27;
    }

    int64_t v16 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v16 >= v36) {
      goto LABEL_36;
    }
    unint64_t v17 = *(void *)(v35 + 8 * v16);
    int64_t v18 = v7 + 1;
    if (!v17)
    {
      int64_t v18 = v16 + 1;
      if (v16 + 1 >= v36) {
        goto LABEL_36;
      }
      unint64_t v17 = *(void *)(v35 + 8 * v18);
      if (!v17)
      {
        int64_t v18 = v16 + 2;
        if (v16 + 2 >= v36) {
          goto LABEL_36;
        }
        unint64_t v17 = *(void *)(v35 + 8 * v18);
        if (!v17) {
          break;
        }
      }
    }

Swift::Int sub_1003302AC(uint64_t a1)
{
  unint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100002274((uint64_t *)&unk_10040ED50);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  Swift::Int v6 = result;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *unint64_t v2 = v6;
    return result;
  }

  int64_t v7 = 0LL;
  BOOL v34 = v2;
  Swift::Int v35 = v3 + 56;
  uint64_t v8 = 1LL << *(_BYTE *)(v3 + 32);
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  Swift::Int v37 = v3;
  Swift::Int v11 = result + 56;
  while (1)
  {
    if (v10)
    {
      uint64_t v38 = (v10 - 1) & v10;
      int64_t v39 = v7;
      unint64_t v14 = __clz(__rbit64(v10)) | (v7 << 6);
      goto LABEL_27;
    }

    int64_t v15 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v15 >= v36) {
      goto LABEL_36;
    }
    unint64_t v16 = *(void *)(v35 + 8 * v15);
    int64_t v17 = v7 + 1;
    if (!v16)
    {
      int64_t v17 = v7 + 2;
      if (v7 + 2 >= v36) {
        goto LABEL_36;
      }
      unint64_t v16 = *(void *)(v35 + 8 * v17);
      if (!v16)
      {
        int64_t v17 = v7 + 3;
        if (v7 + 3 >= v36) {
          goto LABEL_36;
        }
        unint64_t v16 = *(void *)(v35 + 8 * v17);
        if (!v16) {
          break;
        }
      }
    }

uint64_t sub_1003305C0(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100002274((uint64_t *)&unk_10040ED40);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
LABEL_41:
    *unint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  BOOL v34 = v2;
  uint64_t v35 = v3 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v3 + 56);
  int64_t v36 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0LL;
  for (i = v3; ; uint64_t v3 = i)
  {
    if (v9)
    {
      unint64_t v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }

    if (v17 >= v36) {
      goto LABEL_39;
    }
    unint64_t v18 = *(void *)(v35 + 8 * v17);
    ++v12;
    if (!v18)
    {
      int64_t v12 = v17 + 1;
      if (v17 + 1 >= v36) {
        goto LABEL_39;
      }
      unint64_t v18 = *(void *)(v35 + 8 * v12);
      if (!v18)
      {
        int64_t v12 = v17 + 2;
        if (v17 + 2 >= v36) {
          goto LABEL_39;
        }
        unint64_t v18 = *(void *)(v35 + 8 * v12);
        if (!v18) {
          break;
        }
      }
    }

uint64_t sub_1003308F8(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100002274(qword_10040ED60);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
    goto LABEL_26;
  }

  unint64_t v16 = v2;
  uint64_t v6 = 1LL << *(_BYTE *)(v3 + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  else {
    uint64_t v7 = -1LL;
  }
  unint64_t v8 = v7 & *(void *)(v3 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  if (v8)
  {
    unint64_t v10 = __clz(__rbit64(v8));
    goto LABEL_23;
  }

  if (v9 > 1)
  {
    unint64_t v11 = *(void *)(v3 + 64);
    uint64_t v12 = 1LL;
    if (v11) {
      goto LABEL_22;
    }
    uint64_t v12 = 2LL;
    if (v9 > 2)
    {
      unint64_t v11 = *(void *)(v3 + 72);
      if (v11) {
        goto LABEL_22;
      }
      uint64_t v12 = 3LL;
      if (v9 > 3)
      {
        unint64_t v11 = *(void *)(v3 + 80);
        if (!v11)
        {
          uint64_t v13 = 4LL;
          if (v9 > 4)
          {
            unint64_t v11 = *(void *)(v3 + 88);
            if (v11)
            {
              uint64_t v12 = 4LL;
              goto LABEL_22;
            }

            while (1)
            {
              uint64_t v12 = v13 + 1;
              if (__OFADD__(v13, 1LL))
              {
                __break(1u);
                JUMPOUT(0x100330C20LL);
              }

              if (v12 >= v9) {
                break;
              }
              unint64_t v11 = *(void *)(v3 + 56 + 8 * v12);
              ++v13;
              if (v11) {
                goto LABEL_22;
              }
            }
          }

          goto LABEL_24;
        }

uint64_t sub_100330C34(Swift::UInt a1)
{
  uint64_t v3 = *v1;
  Hasher.init(_seed:)(v14, *(void *)(*v1 + 40LL));
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v3 + 48);
  if (*(void *)(v7 + 8 * v6) != a1)
  {
    uint64_t v8 = ~v5;
    do
    {
      unint64_t v6 = (v6 + 1) & v8;
      if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
        return 0LL;
      }
    }

    while (*(void *)(v7 + 8 * v6) != a1);
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  uint64_t v10 = *v1;
  v14[0] = *v1;
  *uint64_t v1 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1002B1788();
    uint64_t v10 = v14[0];
  }

  uint64_t v11 = *(void *)(*(void *)(v10 + 48) + 8 * v6);
  sub_1002B217C(v6);
  uint64_t v12 = *v1;
  *uint64_t v1 = v14[0];
  swift_bridgeObjectRelease(v12);
  return v11;
}

unint64_t sub_100330D58(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = *v2;
  Hasher.init(_seed:)(v21, *(void *)(*v2 + 40LL));
  uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  NANClusterChangeEvent.hash(into:)((int)v21, a1 & 0xFFFFFFFFFFFFLL);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t v8 = v6 & ~v7;
  uint64_t v9 = v4 + 56;
  if (((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
    goto LABEL_10;
  }
  unint64_t v10 = *(unsigned __int16 *)(*(void *)(v4 + 48) + 6 * v8) | ((unint64_t)*(unsigned int *)(*(void *)(v4 + 48)
                                                                                                  + 6 * v8
                                                                                                  + 2) << 16);
  swift_bridgeObjectRetain(v4);
  if (!static NANClusterChangeEvent.__derived_struct_equals(_:_:)(v10, v5))
  {
    unint64_t v8 = (v8 + 1) & ~v7;
    if (((*(void *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
    {
      while (!static NANClusterChangeEvent.__derived_struct_equals(_:_:)( *(unsigned __int16 *)(*(void *)(v4 + 48) + 6 * v8) | ((unint64_t)*(unsigned int *)(*(void *)(v4 + 48) + 6 * v8 + 2) << 16),  v5))
      {
        unint64_t v8 = (v8 + 1) & ~v7;
        if (((*(void *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
          goto LABEL_9;
        }
      }

      goto LABEL_3;
    }

void sub_100330F0C(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v8 = HIWORD(a1);
  uint64_t v9 = *v2;
  Hasher.init(_seed:)(v23, *(void *)(*v2 + 40LL));
  Hasher._combine(_:)(a1);
  NANClusterChangeEvent.hash(into:)( (int)v23,  ((unint64_t)BYTE5(a1) << 32) & 0xFFFF00FF00000000LL | ((unint64_t)v8 << 40) | ((unint64_t)v7 << 24) | ((unint64_t)v6 << 16) | ((unint64_t)v5 << 8) | BYTE1(a1));
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1LL << *(_BYTE *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0)
  {
LABEL_9:
    *(_BYTE *)(a2 + 6) = 0;
    *(_WORD *)(a2 + 4) = 0;
    char v22 = 1;
    *(_DWORD *)a2 = 0;
    goto LABEL_10;
  }

  uint64_t v13 = (unsigned __int16 *)(*(void *)(v9 + 48) - v12 + 8 * v12);
  unint64_t v14 = *v13 | ((unint64_t)*((unsigned __int8 *)v13 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v13 + 3) << 24);
  swift_bridgeObjectRetain(v9);
  if (!static NANPeerServiceIdentifier.__derived_struct_equals(_:_:)( v14,  ((unint64_t)BYTE5(a1) << 40) | ((unint64_t)BYTE6(a1) << 48) | ((unint64_t)BYTE4(a1) << 32) | ((unint64_t)BYTE3(a1) << 24) | ((unint64_t)BYTE2(a1) << 16) | ((unint64_t)BYTE1(a1) << 8) | a1))
  {
    while (1)
    {
      unint64_t v12 = (v12 + 1) & ~v11;
      if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
        break;
      }
      uint64_t v15 = (unsigned __int16 *)(*(void *)(v9 + 48) - v12 + 8 * v12);
      if (static NANPeerServiceIdentifier.__derived_struct_equals(_:_:)( *v15 | ((unint64_t)*((unsigned __int8 *)v15 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v15 + 3) << 24),  ((unint64_t)BYTE5(a1) << 40) | ((unint64_t)BYTE6(a1) << 48) | ((unint64_t)BYTE4(a1) << 32) | ((unint64_t)BYTE3(a1) << 24) | ((unint64_t)BYTE2(a1) << 16) | ((unint64_t)BYTE1(a1) << 8) | a1))
      {
        goto LABEL_5;
      }
    }

    swift_bridgeObjectRelease(v9);
    goto LABEL_9;
  }

void **sub_100331124(uint64_t a1, void **a2)
{
  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (1LL << v5) + 63;
  uint64_t v8 = v7 >> 6;
  size_t v9 = 8 * (v7 >> 6);
  if (v6 <= 0xD || (swift_stdlib_isStackAllocationSafe(8 * (v7 >> 6), 8LL) & 1) != 0)
  {
    __chkstk_darwin();
    bzero((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0LL), v9);
    sub_100331288((unint64_t *)((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v8, a1, a2);
    if (v2) {
      swift_willThrow(v10);
    }
    else {
      return (void **)v10;
    }
  }

  else
  {
    uint64_t v11 = (void *)swift_slowAlloc(v9, -1LL);
    bzero(v11, v9);
    sub_100331288((unint64_t *)v11, v8, a1, a2);
    a2 = v12;
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  return a2;
}

void sub_100331288(unint64_t *a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v4 = a3;
  uint64_t v28 = 0LL;
  int64_t v5 = 0LL;
  uint64_t v6 = *(void *)(a3 + 64);
  uint64_t v29 = a3 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & v6;
  int64_t v30 = (unint64_t)(v7 + 63) >> 6;
  if ((v8 & v6) != 0) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v13 = v5 + 1;
  if (!__OFADD__(v5, 1LL))
  {
    if (v13 < v30)
    {
      unint64_t v14 = *(void *)(v29 + 8 * v13);
      ++v5;
      if (v14) {
        goto LABEL_21;
      }
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v30) {
        goto LABEL_29;
      }
      unint64_t v14 = *(void *)(v29 + 8 * v5);
      if (v14) {
        goto LABEL_21;
      }
      int64_t v5 = v13 + 2;
      if (v13 + 2 >= v30) {
        goto LABEL_29;
      }
      unint64_t v14 = *(void *)(v29 + 8 * v5);
      if (v14)
      {
LABEL_21:
        unint64_t v9 = (v14 - 1) & v14;
        for (unint64_t i = __clz(__rbit64(v14)) + (v5 << 6); ; unint64_t i = v11 | (v5 << 6))
        {
          if (*(uint64_t *)(*(void *)(v4 + 56) + 8 * i) > 2)
          {
            *(unint64_t *)((char *)a1 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
            if (__OFADD__(v28++, 1LL)) {
              goto LABEL_32;
            }
            if (!v9) {
              goto LABEL_8;
            }
          }

          else
          {
            uint64_t v16 = *(void *)(v4 + 48) + 24 * i;
            uint64_t v17 = *(void *)v16;
            uint64_t v18 = *(void *)(v16 + 8);
            char v19 = *(_BYTE *)(v16 + 16);
            char v20 = *(_BYTE *)(v16 + 17);
            uint64_t v21 = *a4;
            swift_bridgeObjectRetain_n(v18, 2LL);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v21);
            *a4 = v21;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              uint64_t v21 = sub_1002CA8E8(0LL, v21[2] + 1LL, 1, v21);
              *a4 = v21;
            }

            unint64_t v24 = v21[2];
            unint64_t v23 = v21[3];
            if (v24 >= v23 >> 1)
            {
              uint64_t v21 = sub_1002CA8E8((void *)(v23 > 1), v24 + 1, 1, v21);
              *a4 = v21;
            }

            v21[2] = v24 + 1;
            Swift::String v25 = &v21[3 * v24];
            _BYTE v25[4] = v17;
            v25[5] = v18;
            *((_BYTE *)v25 + 48) = v19;
            *((_BYTE *)v25 + 49) = v20;
            swift_bridgeObjectRelease(v18);
            uint64_t v4 = a3;
            if (!v9) {
              goto LABEL_8;
            }
          }

uint64_t sub_100331510(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  if (!v3) {
    return v5;
  }
  return result;
}

void *sub_10033154C@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X2>, void *a2@<X8>)
{
  uint64_t result = a1(&v5);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_100331588()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (uint64_t *)((char *)v0 + *(void *)(*v0 + 456));
  swift_beginAccess(v2, v6, 0LL, 0LL);
  uint64_t v3 = *v2;
  type metadata accessor for AWDLInterface.StateMonitoringClient(0LL, *(void *)(v1 + 408), *(void *)(v1 + 416), v4);
  return v3;
}

unint64_t sub_1003315E4(uint64_t a1)
{
  return ((unint64_t)[*(id *)(a1 + 16) options] >> 5) & 1;
}

void sub_100331618(uint64_t a1)
{
}

uint64_t sub_100331634(void **a1, uint64_t a2)
{
  return sub_10031C0E0(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32)) & 1;
}

uint64_t sub_100331654(void **a1, uint64_t a2)
{
  return sub_10031C878(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32)) & 1;
}

uint64_t sub_100331674(uint64_t (**a1)(void))
{
  return (*a1)(*(void *)(v1 + 16));
}

uint64_t sub_1003316A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for AWDLTrafficRegistrationService(0LL);
  uint64_t v4 = v3;
  uint64_t v5 = sub_10000AF70( &qword_100404A20,  (uint64_t (*)(uint64_t))type metadata accessor for AWDLTrafficRegistrationService,  (uint64_t)&unk_1003384F0);
  uint64_t result = Set.init(minimumCapacity:)(v2, v4, v5);
  uint64_t v10 = result;
  if (v2)
  {
    uint64_t v7 = (void **)(a1 + 32);
    do
    {
      uint64_t v8 = *v7++;
      sub_1000D32C8(&v9, v8);

      --v2;
    }

    while (v2);
    return v10;
  }

  return result;
}

void sub_100331744(void **a1)
{
}

uint64_t sub_10033175C(uint64_t result)
{
  if (result != 1) {
    return swift_errorRelease(result);
  }
  return result;
}

uint64_t sub_10033176C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v24 = a1;
    }
    else {
      uint64_t v24 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v24);
    swift_bridgeObjectRelease(v3);
    if (v4) {
      goto LABEL_3;
    }
    return 0LL;
  }

  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v4) {
    return 0LL;
  }
LABEL_3:
  uint64_t v5 = 0LL;
  unint64_t v6 = v3 & 0xC000000000000001LL;
  p_os_log_type_t type = &stru_100401FF0.type;
  uint64_t v26 = v4;
  while (1)
  {
    if (v6) {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
    }
    else {
      id v8 = *(id *)(v3 + 8 * v5 + 32);
    }
    id v9 = v8;
    id v10 = objc_msgSend(v8, p_type[472]);
    int v11 = AWDLTrafficRegistrationService.serviceType.getter((uint64_t)v10);
    char v12 = AWDLTrafficRegistrationService.serviceType.getter(a2);
    if (v11 != 2 || v12 != 2)
    {

      goto LABEL_16;
    }

    unint64_t v13 = v6;
    uint64_t v14 = v3;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v17 = v16;
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
    if (v15 == v18 && v17 == v19) {
      break;
    }
    uint64_t v21 = v19;
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v18, v19, 0LL);

    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v21);
    uint64_t v3 = v14;
    unint64_t v6 = v13;
    uint64_t v4 = v26;
    p_os_log_type_t type = (char **)(&stru_100401FF0 + 16);
    if ((v22 & 1) == 0) {
      return v5;
    }
LABEL_16:
    uint64_t v23 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      goto LABEL_21;
    }
LABEL_17:
    ++v5;
    if (v23 == v4) {
      return 0LL;
    }
  }

  swift_bridgeObjectRelease_n(v17, 2LL);
  uint64_t v3 = v14;
  unint64_t v6 = v13;
  uint64_t v4 = v26;
  p_os_log_type_t type = (char **)(&stru_100401FF0 + 16);
  uint64_t v23 = v5 + 1;
  if (!__OFADD__(v5, 1LL)) {
    goto LABEL_17;
  }
LABEL_21:
  __break(1u);
  return 0LL;
}

id sub_100331960(void *a1, char a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)v4;
  uint64_t v9 = type metadata accessor for AWDLPeer(0LL);
  __chkstk_darwin();
  int v11 = (char *)v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = v8 + 408;
  uint64_t v12 = *(void *)(v8 + 408);
  uint64_t v14 = *(void *)(*(void *)(v13 + 8) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v14,  v12,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v14,  v12,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v16 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v95 = *(void *)(v16 - 8);
  uint64_t v96 = v16;
  __chkstk_darwin();
  unint64_t v94 = (char *)v88 - v17;
  id v18 = [a1 uniqueIdentifier];
  id v19 = 0LL;
  if ((a2 & 1) != 0) {
    id v19 = [a1 peerAddress];
  }
  id v20 = sub_10031D5CC((unint64_t)v18, v19, v4, a3 & 1);

  if (v20)
  {
    if ((a2 & 1) != 0)
    {
      uint64_t v21 = AssociatedConformanceWitness;
      char v22 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 144);
      uint64_t v23 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
      uint64_t v24 = v94;
      v22(v23, v21);
      id v25 = v20;
      id v26 = [a1 uniqueIdentifier];
      uint64_t v27 = v23;
      uint64_t v28 = v96;
      uint64_t v29 = swift_getAssociatedConformanceWitness( v21,  v27,  v96,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.CoreAnalytics: CoreAnalyticsControls);
      (*(void (**)(id, id, uint64_t, uint64_t))(v29 + 24))(v25, v26, v28, v29);

      (*(void (**)(char *, uint64_t))(v95 + 8))(v24, v28);
    }

    id v30 = [a1 uniqueIdentifier];
    static PreferenceDefaults.deviceName.getter();
    uint64_t v32 = v31;
    NSString v33 = String._bridgeToObjectiveC()();
    NSString v34 = objc_msgSend(a1, "localization", swift_bridgeObjectRelease(v32).n128_f64[0]);
    if (!v34)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v36 = v35;
      NSString v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v36);
    }

    id v37 =  [(id)objc_opt_self(AWDLTrafficRegistrationConfiguration) localizedErrorForConflictBetweenExistingService:v20 withNewService:v30 localDeviceName:v33 localization:v34];
  }

  else
  {
    if ((a2 & 1) == 0) {
      return 0LL;
    }
    id v38 = [a1 peerAddress];
    WiFiMACAddress.wifiAddress.getter();
    uint64_t v40 = v39;

    unint64_t v91 = v40 & 0xFFFFFFFFFFFFLL;
    sub_100304FBC(v40 & 0xFFFFFFFFFFFFLL, (uint64_t)v11);
    unsigned int v41 = &v11[*(int *)(v9 + 68)];
    uint64_t v42 = *(void *)v41;
    uint64_t v43 = *((void *)v41 + 1);
    uint64_t v44 = *((void *)v41 + 3);
    uint64_t v92 = *((void *)v41 + 2);
    uint64_t v45 = *((void *)v41 + 4);
    sub_10005802C((uint64_t)v11, type metadata accessor for AWDLPeer);
    if ((v43 & 0xFF00000000LL) == 0x400000000LL)
    {
      uint64_t v46 = &_swiftEmptySetSingleton;
    }

    else
    {
      __int16 v99 = v42;
      char v100 = BYTE2(v42);
      char v101 = BYTE3(v42);
      char v102 = BYTE4(v42);
      char v103 = BYTE5(v42);
      char v104 = BYTE6(v42);
      int v105 = v43;
      __int16 v106 = WORD2(v43);
      uint64_t v107 = v92;
      char v108 = v44;
      *((void *)&v47 + sub_100058090(v4, v0 + 1) = v45;
      *(void *)&__int128 v47 = v44;
      int v109 = HIDWORD(v44);
      __int16 v110 = (unint64_t)(v47 >> 32) >> 32;
      char v111 = BYTE2(v45);
      char v112 = BYTE3(v45);
      char v113 = BYTE4(v45);
      char v114 = BYTE5(v45);
      char v115 = BYTE6(v45);
      char v116 = HIBYTE(v45);
      uint64_t v46 = AWDLActionFrame.RealtimeGroup.activeServiceIdentifiers.getter();
    }

    __chkstk_darwin();
    v88[-4] = a1;
    v88[-3] = v4;
    LOBYTE(v88[-2]) = v40;
    BYTE1(v88[-2]) = v48;
    BYTE2(v88[-2]) = v49;
    BYTE3(v88[-2]) = v50;
    BYTE4(v88[-2]) = v51;
    BYTE5(v88[-2]) = v52;
    sub_100304340((uint64_t (*)(id *))sub_10033216C, (uint64_t)&v88[-6], (uint64_t)v46);
    uint64_t v54 = v53;
    swift_bridgeObjectRelease(v46);
    if (!v54) {
      return 0LL;
    }
    if ((a3 & 1) != 0)
    {
      id v55 = a1;
      id v56 = v54;
      id v57 = v55;
      id v58 = v56;
      id v59 = (os_log_s *)Logger.logObject.getter(v58);
      os_log_type_t v60 = static os_log_type_t.error.getter();
      int v61 = v60;
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v62 = swift_slowAlloc(32LL, -1LL);
        os_log_t v90 = v59;
        uint64_t v63 = v62;
        uint64_t v92 = swift_slowAlloc(96LL, -1LL);
        v98[0] = v92;
        *(_DWORD *)uint64_t v63 = 136315650;
        v88[1] = v63 + 4;
        id v64 = [v57 uniqueIdentifier];
        int v89 = v61;
        id v65 = v64;
        uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        unint64_t v68 = v67;

        uint64_t v97 = sub_10000235C(v66, v68, v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98);

        swift_bridgeObjectRelease(v68);
        *(_WORD *)(v63 + 12) = 2080;
        uint64_t v69 = WiFiAddress.description.getter(v91);
        unint64_t v71 = v70;
        uint64_t v97 = sub_10000235C(v69, v70, v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98);
        swift_bridgeObjectRelease(v71);
        *(_WORD *)(v63 + 22) = 2080;
        uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
        unint64_t v74 = v73;
        uint64_t v97 = sub_10000235C(v72, v73, v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98);

        swift_bridgeObjectRelease(v74);
        os_log_t v75 = v90;
        _os_log_impl( (void *)&_mh_execute_header,  v90,  (os_log_type_t)v89,  "Rejecting %s because peer %s would conflict with its active service for %s",  (uint8_t *)v63,  0x20u);
        uint64_t v76 = v92;
        swift_arrayDestroy(v92, 3LL, &type metadata for Any[8]);
        swift_slowDealloc(v76, -1LL, -1LL);
        swift_slowDealloc(v63, -1LL, -1LL);
      }

      else
      {
      }
    }

    uint64_t v78 = AssociatedConformanceWitness;
    uint64_t v79 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 144);
    uint64_t v80 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
    unint64_t v81 = v94;
    v79(v80, v78);
    id v20 = v54;
    id v82 = [a1 uniqueIdentifier];
    uint64_t v83 = v80;
    uint64_t v84 = v96;
    uint64_t v85 = swift_getAssociatedConformanceWitness( v78,  v83,  v96,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.CoreAnalytics: CoreAnalyticsControls);
    (*(void (**)(id, id, uint64_t, uint64_t))(v85 + 24))(v20, v82, v84, v85);

    (*(void (**)(char *, uint64_t))(v95 + 8))(v81, v84);
    NSString v33 = [a1 uniqueIdentifier];
    NSString v34 = [a1 localization];
    if (!v34)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v87 = v86;
      NSString v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v87);
    }

    id v37 =  [(id)objc_opt_self(AWDLTrafficRegistrationConfiguration) localizedErrorForConflictBetweenExistingService:v20 withNewService:v33 localDeviceName:0 localization:v34];
  }

  return v37;
}

unint64_t sub_100332130(uint64_t a1)
{
  return (unint64_t)sub_100324DB0(a1, *(void *)(v1 + 32)) & 1;
}

void sub_100332150(uint64_t a1)
{
}

BOOL sub_10033216C(uint64_t *a1)
{
  return sub_100320B7C( a1,  *(void **)(v1 + 16),  *(void *)(v1 + 24),  *(unsigned __int16 *)(v1 + 32) | ((unint64_t)*(unsigned int *)(v1 + 34) << 16));
}

uint64_t sub_100332194(id *a1)
{
  return sub_10031FF40(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32)) & 1;
}

uint64_t sub_1003321B4(uint64_t a1)
{
  return sub_100332214(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_10032014C) & 1;
}

uint64_t sub_1003321D4(id *a1)
{
  return sub_1003206F0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32)) & 1;
}

uint64_t sub_1003321F4(uint64_t a1)
{
  return sub_100332214(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_10032085C) & 1;
}

uint64_t sub_100332214(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[4], v2[5], v2[6], v2[2], v2[3]) & 1;
}

uint64_t sub_10033223C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(*(void *)(v0 + 24) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v2,  v1,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Components);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v2,  v1,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v5 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents,  &associated type descriptor for P2PComponents.ActivityCoordinator);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 + 32) & ~v7;
  uint64_t v9 = v7 | 7;
  unint64_t v10 = (*(void *)(v6 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v5);

  return swift_deallocObject(v0, v10 + 8, v9);
}

uint64_t sub_10033231C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v3,  v1,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v3,  v1,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents)
                 - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  return sub_100320608(v0 + v7, *(void *)(v0 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFF8LL)), v1, v2);
}

uint64_t sub_1003323E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1003323F0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void *sub_1003323F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100002274(qword_10040ED60);
    uint64_t v3 = static _SetStorage.allocate(capacity:)(v1);
    uint64_t v4 = *(unsigned __int8 *)(a1 + 32);
    Hasher.init(_seed:)(v6, *(void *)(v3 + 40));
    __asm { BR              X8 }
  }

  return &_swiftEmptySetSingleton;
}

uint64_t sub_1003327AC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1003327D0()
{
  return sub_1003332B4(48LL);
}

uint64_t sub_1003327D8()
{
  return sub_100321038(*(void *)(v0 + 32), *(char **)(v0 + 40), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1003327E4()
{
  uint64_t v1 = (int *)type metadata accessor for AWDLPeer(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release(*(void *)(v0 + 32));

  uint64_t v6 = v0 + v4;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v0 + v4, v7);
  uint64_t v8 = v0 + v4 + v1[6];
  uint64_t v9 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  uint64_t v10 = v0 + v4 + v1[10];
  unint64_t v11 = *(void *)(v10 + 24);
  if (v11 >> 60 != 15) {
    sub_1000208D8(*(void *)(v10 + 16), v11);
  }
  swift_bridgeObjectRelease(*(void *)(v6 + v1[12] + 40));
  swift_bridgeObjectRelease(*(void *)(v6 + v1[13] + 16));
  uint64_t v12 = v6 + v1[14];
  uint64_t v13 = type metadata accessor for AWDLActionFrame.DataPathState(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48LL))(v12, 1LL, v13))
  {
    swift_bridgeObjectRelease(*(void *)(v12 + 48));
    uint64_t v14 = v12 + *(int *)(v13 + 136);
    uint64_t v15 = type metadata accessor for DispatchTimeInterval(0LL);
    uint64_t v16 = *(void *)(v15 - 8);
  }

  uint64_t v17 = v3 | 7;
  swift_bridgeObjectRelease(*(void *)(v6 + v1[18] + 8));
  id v18 = (void *)(v6 + v1[19]);
  swift_bridgeObjectRelease(*v18);
  swift_bridgeObjectRelease(v18[1]);
  swift_bridgeObjectRelease(*(void *)(v6 + v1[20]));
  return swift_deallocObject(v0, v4 + v5, v17);
}

uint64_t sub_100332990()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for AWDLPeer(0LL) - 8) + 80LL);
  return sub_1003240FC(*(void *)(v0 + 32), *(void **)(v0 + 40), v0 + ((v3 + 48) & ~v3), v1, v2);
}

BOOL sub_1003329DC(uint64_t *a1)
{
  return sub_10032429C(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_1003329FC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100332A38(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_10032CDB0(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }

    while (v2);
    return v8;
  }

  return result;
}

uint64_t sub_100332ACC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = sub_10017B5C8();
  uint64_t result = Set.init(minimumCapacity:)(v2, &type metadata for NANPeerServiceIdentifier, v3);
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v5 = (unsigned int *)(a1 + 35);
    do
    {
      sub_10032D140( v6,  *(unsigned __int16 *)((char *)v5 - 3) | ((unint64_t)*((unsigned __int8 *)v5 - 1) << 16) | ((unint64_t)*v5 << 24));
      uint64_t v5 = (unsigned int *)((char *)v5 + 7);
      --v2;
    }

    while (v2);
    return v7;
  }

  return result;
}

uint64_t sub_100332B50(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = sub_100004DEC();
  uint64_t result = Set.init(minimumCapacity:)(v2, &type metadata for DNSRecords.Identifier, v3);
  uint64_t v12 = result;
  if (v2)
  {
    uint64_t v5 = (unsigned __int8 *)(a1 + 49);
    do
    {
      uint64_t v6 = *(void *)(v5 - 17);
      uint64_t v7 = *(void *)(v5 - 9);
      int v8 = *(v5 - 1);
      int v9 = *v5;
      v5 += 24;
      unsigned int v10 = v8 | (v9 << 8);
      swift_bridgeObjectRetain(v7);
      sub_10032D3C0((uint64_t)v11, v6, v7, v10);
      swift_bridgeObjectRelease(v11[1]);
      --v2;
    }

    while (v2);
    return v12;
  }

  return result;
}

double sub_100332BF4(void (*a1)(void *, __n128))
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)v1;
  uint64_t v5 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 536LL));
  swift_beginAccess(v5, v26, 0LL, 0LL);
  uint64_t v6 = *v5;
  uint64_t v8 = *(void *)(v4 + 416);
  uint64_t v23 = *(void *)(v4 + 408);
  uint64_t v7 = v23;
  uint64_t v24 = v8;
  uint64_t v9 = sub_100058CD0(0LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  uint64_t v11 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation(0LL, v23, v8, v10);
  unint64_t v12 = sub_100245750();
  swift_bridgeObjectRetain(v6);
  uint64_t v25 = Dictionary.filter(_:)(sub_10033333C, v22, v6, v9, v11, v12);
  v21[2] = v7;
  v21[3] = v8;
  uint64_t v13 = type metadata accessor for Dictionary(0LL, v9, v11, v12);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v13);
  uint64_t v16 = sub_100302E9C( (void (*)(char *, char *))sub_100333358,  (uint64_t)v21,  v13,  (uint64_t)&type metadata for WiFiAddress,  (uint64_t)&type metadata for Never,  WitnessTable,  (uint64_t)&protocol witness table for Never,  v15);
  swift_bridgeObjectRelease(v25);
  uint64_t v17 = sub_1003046D0((uint64_t)sub_100333374, v2, v16);
  id v18 = sub_1002D77E8((void (*)(uint64_t *__return_ptr, int *))sub_1003333A8, v2, v17);
  __n128 v19 = swift_bridgeObjectRelease(v17);
  a1(v18, v19);
  *(void *)&double result = swift_bridgeObjectRelease(v18).n128_u64[0];
  return result;
}

uint64_t sub_100332D90()
{
  return sub_1002FB8D0((uint64_t (*)(void))&type metadata accessor for Logger);
}

void sub_100332D9C(uint64_t a1)
{
}

uint64_t sub_100332DF0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100332E14(uint64_t a1, unsigned __int8 *a2)
{
  return sub_10030DC14(a1, a2, *(void *)(v2 + 32));
}

void sub_100332E20(uint64_t *a1)
{
}

uint64_t sub_100332E38()
{
  return sub_1002FB8D0((uint64_t (*)(void))&type metadata accessor for DispatchTime);
}

uint64_t sub_100332E44()
{
  return sub_1002FB954((uint64_t (*)(void, char *, uint64_t, uint64_t))sub_100318238);
}

uint64_t sub_100332E50()
{
  return sub_1002FB8D0((uint64_t (*)(void))&type metadata accessor for DispatchTime);
}

uint64_t sub_100332E5C()
{
  return sub_1002FB954((uint64_t (*)(void, char *, uint64_t, uint64_t))sub_100317F14);
}

unint64_t sub_100332E68(uint64_t a1)
{
  return ((unint64_t)[*(id *)(a1 + 16) options] >> 4) & 1;
}

id sub_100332E9C(uint64_t a1)
{
  LOBYTE(v3) = *(_BYTE *)(v1 + 32);
  HIDWORD(v3) = *(_DWORD *)(v1 + 36);
  return sub_100317790(a1, v3, *(_WORD *)(v1 + 40));
}

unint64_t sub_100332ED4(uint64_t a1)
{
  return ((unint64_t)[*(id *)(a1 + 16) options] >> 3) & 1;
}

void sub_100332F08(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  [v1 threadCoexistenceEvent:isa];
}

unint64_t sub_100332F78(uint64_t a1)
{
  return ((unint64_t)[*(id *)(a1 + 16) options] >> 1) & 1;
}

id sub_100332FAC(uint64_t a1)
{
  return [*(id *)(a1 + 8) updatedStatistics];
}

unint64_t sub_100332FDC(uint64_t a1)
{
  return (unint64_t)[*(id *)(a1 + 16) options] & 1;
}

id sub_100333010(uint64_t a1)
{
  return [*(id *)(a1 + 8) updatedAWDLState:*(void *)(v1 + 32)];
}

void sub_100333044(uint64_t a1)
{
}

uint64_t sub_10033305C(void **a1)
{
  return sub_100314A6C(a1, *(char **)(v1 + 32), *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

BOOL sub_10033307C(id *a1)
{
  return sub_100313E30(a1, *(void *)(v1 + 16));
}

void sub_100333098(id *a1)
{
}

BOOL sub_1003330B0(void **a1, uint64_t a2)
{
  return sub_100313144(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_1003330D0(void **a1, uint64_t a2)
{
  return sub_100318C00(a1, a2, v2[4], v2[2], v2[3]) & 1;
}

uint64_t sub_1003330F0(void **a1)
{
  return sub_100318DB8( a1,  *(uint64_t **)(v1 + 16),  *(unsigned __int16 *)(v1 + 24) | ((unint64_t)*(unsigned int *)(v1 + 26) << 16));
}

uint64_t sub_100333114(void **a1, uint64_t a2)
{
  return sub_1003199F4(a1, a2, *(os_log_s **)(v2 + 16), *(void *)(v2 + 24)) & 1;
}

uint64_t sub_100333130(void **a1)
{
  return sub_10031A510( a1,  *(void (**)(char *, uint64_t))(v1 + 16),  *(void **)(v1 + 24),  *(unsigned __int16 *)(v1 + 32) | ((unint64_t)*(unsigned int *)(v1 + 34) << 16),  *(_BYTE **)(v1 + 40));
}

unint64_t sub_100333158(uint64_t a1)
{
  return ((unint64_t)[*(id *)(a1 + 16) options] >> 2) & 1;
}

id sub_10033318C(uint64_t a1)
{
  return [*(id *)(a1 + 8) updatedRealtimeMode:*(unsigned __int8 *)(v1 + *(void *)(*(void *)v1 + 464))];
}

BOOL sub_1003331C8(uint64_t a1)
{
  return sub_100303B24( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned __int8 *)(a1 + 16) | (*(unsigned __int8 *)(a1 + 17) << 8),  *(void *)(v1 + 16));
}

void sub_100333208(uint64_t *a1)
{
}

uint64_t sub_100333224(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRetain(result);
  }
  return result;
}

void *sub_100333230(void *a1)
{
  return a1;
}

uint64_t sub_100333258(uint64_t a1)
{
  return a1;
}

uint64_t sub_100333288()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1003332AC()
{
  return sub_1003332B4(56LL);
}

uint64_t sub_1003332B4(uint64_t a1)
{
  return swift_deallocObject(v1, a1, 7LL);
}

void sub_1003332EC()
{
}

void sub_1003332FC(void *a1, uint64_t a2, void *a3)
{
  if (a1)
  {

    swift_unknownObjectRelease(a2);
  }

uint64_t sub_10033333C(void **a1, uint64_t a2)
{
  return sub_10031B324(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24)) & 1;
}

uint64_t sub_100333358@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10031B508(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

BOOL sub_100333374(unsigned __int16 *a1)
{
  return sub_100305C50(*a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 16));
}

uint64_t sub_1003333A8@<X0>(unsigned __int16 *a1@<X0>, void *a2@<X8>)
{
  return sub_10031B654(a1, a2);
}

uint64_t sub_1003333C8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_100318BE4(a1, a2);
}

id sub_1003333DC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  return sub_10032481C(a1, a2);
}

BOOL sub_100333400(uint64_t *a1)
{
  return sub_1003329DC(a1);
}

void sub_100333418(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)(a1);
  }
  else {
    uint64_t v3 = 0LL;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

void sub_100333468(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = [objc_allocWithZone(PBSBulletin) init];
  uint64_t v6 = sub_100002274(&qword_100410638);
  uint64_t inited = swift_initStackObject(v6, v40);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100339910;
  id aBlock = (void **)static String._unconditionallyBridgeFromObjectiveC(_:)(PBSSystemBulletinTitleKey);
  uint64_t v35 = v8;
  AnyHashable.init<A>(_:)( (void *)(inited + 32),  &aBlock,  &type metadata for String,  &protocol witness table for String);
  id v9 = [a1 content];
  id v10 = [v9 title];

  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v13 = v12;

  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 72) = v11;
  *(void *)(inited + 80) = v13;
  id aBlock = (void **)static String._unconditionallyBridgeFromObjectiveC(_:)(PBSSystemBulletinMessageKey);
  uint64_t v35 = v14;
  AnyHashable.init<A>(_:)( (void *)(inited + 104),  &aBlock,  &type metadata for String,  &protocol witness table for String);
  id v15 = [a1 content];
  id v16 = [v15 body];

  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  uint64_t v19 = v18;

  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 144) = v17;
  *(void *)(inited + 152) = v19;
  id aBlock = (void **)static String._unconditionallyBridgeFromObjectiveC(_:)(PBSSystemBulletinImageIDKey);
  uint64_t v35 = v20;
  AnyHashable.init<A>(_:)( (void *)(inited + 176),  &aBlock,  &type metadata for String,  &protocol witness table for String);
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(PBSSystemBulletinImageIDAlert);
  *(void *)(inited + 240) = &type metadata for String;
  *(void *)(inited + 2swift_weakDestroy(v0 + 16) = v21;
  *(void *)(inited + 224) = v22;
  unint64_t v23 = sub_10022F214(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v5, "setMessage:", isa, swift_bridgeObjectRelease(v23).n128_f64[0]);

  [v5 setViewControllerClassName:PBSSystemBulletinViewControllerClassName];
  [v5 setServiceIdentifier:PBSSystemBulletinServiceName];
  id v25 = [(id)objc_opt_self(PBSSystemServiceConnection) sharedConnection];
  if (v25)
  {
    id v26 = v25;
    id v27 = [v25 bulletinServiceProxy];

    if (v27)
    {
      [v27 setDelegate:v3];
      uint64_t v28 = swift_allocObject(&unk_1003FBAD8, 32LL, 7LL);
      *(void *)(v28 + swift_weakDestroy(v0 + 16) = a2;
      *(void *)(v28 + 24) = a3;
      id v38 = sub_100333994;
      uint64_t v39 = v28;
      id aBlock = _NSConcreteStackBlock;
      uint64_t v35 = 1107296256LL;
      uint64_t v36 = sub_1003337E0;
      id v37 = &unk_1003FBAF0;
      uint64_t v29 = _Block_copy(&aBlock);
      uint64_t v30 = v39;
      swift_unknownObjectRetain(v27);
      id v31 = v5;
      swift_retain();
      objc_msgSend(v27, "presentBulletin:withCompletion:", v31, v29, swift_release(v30).n128_f64[0]);

      swift_unknownObjectRelease_n(v27, 2LL);
      _Block_release(v29);
    }
  }

  else
  {
    __break(1u);
  }

void sub_1003337E0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v7 = a3;
  v6(a2, a3);
  swift_release(v5);
}

id sub_1003338FC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WiFiP2PtvOSUIAgent();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for WiFiP2PtvOSUIAgent()
{
  return objc_opt_self(&OBJC_CLASS____TtC12wifip2pdCore18WiFiP2PtvOSUIAgent);
}

uint64_t sub_10033394C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100333970()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100333994(char a1, uint64_t a2)
{
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = a2;
  }
  return (*(uint64_t (**)(uint64_t))(v2 + 16))(v3);
}

uint64_t sub_1003339BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1003339CC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

BOOL sub_1003339D4()
{
  uint64_t v0 = getpid();
  return sandbox_check(v0, 0LL, SANDBOX_CHECK_NO_REPORT) != 0;
}

uint64_t sub_100333A04(unsigned int a1)
{
  if (a1 > 8) {
    return 0LL;
  }
  else {
    return qword_1003605E8[a1];
  }
}

uint64_t sub_100333A24(int a1)
{
  if (a1 == -536870272) {
    int v1 = 2;
  }
  else {
    int v1 = 0;
  }
  if (a1 == -536870144) {
    unsigned int v2 = 3;
  }
  else {
    unsigned int v2 = v1;
  }
  if (a1 == -536870288) {
    return 1LL;
  }
  else {
    return v2;
  }
}

dispatch_workloop_t sub_100333A64(const char *a1)
{
  return dispatch_workloop_create(a1);
}

void *sub_100333A78(uint64_t a1, void *a2)
{
  id v4 = malloc(0x3BDC8uLL);
  v4[183] = 0x10000LL;
  __strlcpy_chk((char *)v4 + 10, a1, 128LL, 128LL);
  *a2 = 245192LL;
  return v4;
}

_DWORD *sub_100333ADC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = malloc(0x3B8A0uLL);
  v6[60965] = 0;
  *((_WORD *)v6 + 121932) = 0;
  *((void *)v6 + 17) = a2;
  __strlcpy_chk(v6 + 1, a1, 128LL, 128LL);
  *a3 = 243872LL;
  return v6;
}

char *sub_100333B58(uint64_t a1, void *a2)
{
  id v4 = (char *)malloc(0x84uLL);
  __strlcpy_chk(v4 + 4, a1, 128LL, 128LL);
  *a2 = 132LL;
  return v4;
}