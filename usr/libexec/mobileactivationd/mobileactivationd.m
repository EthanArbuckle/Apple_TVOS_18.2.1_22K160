id __copy_helper_block_e8_32s(uint64_t a1, uint64_t a2)
{
  return *(id *)(a2 + 32);
}

void __destroy_helper_block_e8_32s(uint64_t a1)
{
}

void *copyLoggingHandle()
{
  if (copyLoggingHandle_onceToken != -1) {
    dispatch_once(&copyLoggingHandle_onceToken, &__block_literal_global_40);
  }
  return copyLoggingHandle_logHandle;
}

id __copy_helper_block_e8_32s40s(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)(a2 + 32);
  return *(id *)(a2 + 40);
}

void __destroy_helper_block_e8_32s40s(uint64_t a1)
{
}

void maLog(uint64_t a1, uint64_t a2, id a3, ...)
{
  id v5 = a3;
  v6 = -[NSMutableString initWithFormat:arguments:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithFormat:arguments:",  v5,  va);

  if (a1 && gPersistentLogFunctionNameLoggingEnabled)
  {
    v7 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%s: %@", a1, v6);

    v6 = (NSMutableString *)v7;
  }

  id v8 = +[MALog getSharedInstance](&OBJC_CLASS___MALog, "getSharedInstance");
  [v8 logMessage:v6 toSyslog:a2];
}

NSError *createAndLogError(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, id a5, void *a6, ...)
{
  id v11 = a5;
  id v12 = a6;
  id v13 = a3;
  v14 = -[NSMutableString initWithFormat:arguments:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithFormat:arguments:",  v12,  va);

  v15 = createMobileActivationError(a1, a2, v13, a4, v11, @"%@", v14);
  if (a1 && gPersistentLogFunctionNameLoggingEnabled)
  {
    if (v11) {
      v16 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s: %@ // %@",  a1,  v14,  v11);
    }
    else {
      v16 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%s: %@", a1, v14, v20);
    }
    v17 = v16;

    v14 = v17;
  }

  id v18 = +[MALog getSharedInstance](&OBJC_CLASS___MALog, "getSharedInstance");
  [v18 logMessage:v14 toSyslog:0];

  return v15;
}

void deleteExpiredPersistentLogFiles()
{
  id v0 = +[MALog getSharedInstance](&OBJC_CLASS___MALog, "getSharedInstance");
  [v0 deleteExpiredLogFiles];
}

void __copyLoggingHandle_block_invoke(id a1)
{
  os_log_t v1 = os_log_create("com.apple.mobileactivationd", "daemon");
  v2 = copyLoggingHandle_logHandle;
  copyLoggingHandle_logHandle = v1;
}

id copyRTCResetSerialQueue()
{
  if (copyRTCResetSerialQueue_onceToken != -1) {
    dispatch_once(&copyRTCResetSerialQueue_onceToken, &__block_literal_global_0);
  }
  return (id)copyRTCResetSerialQueue_queue;
}

void __copyRTCResetSerialQueue_block_invoke(id a1)
{
  os_log_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.mobileactivationd.rtcreset", v1);
  id v3 = (void *)copyRTCResetSerialQueue_queue;
  copyRTCResetSerialQueue_queue = (uint64_t)v2;
}

id copyMobileActivationSerialQueue()
{
  if (copyMobileActivationSerialQueue_onceToken != -1) {
    dispatch_once(&copyMobileActivationSerialQueue_onceToken, &__block_literal_global_2);
  }
  return (id)copyMobileActivationSerialQueue_queue;
}

void __copyMobileActivationSerialQueue_block_invoke(id a1)
{
  os_log_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.mobileactivationd", v1);
  id v3 = (void *)copyMobileActivationSerialQueue_queue;
  copyMobileActivationSerialQueue_queue = (uint64_t)v2;
}

uint64_t certificatePublicKeyMatchesSystemPublicKey( uint64_t a1, uint64_t a2, __SecCertificate *a3, NSError **a4)
{
  id v5 = a3;
  CFErrorRef error = 0LL;
  if (a3)
  {
    if ((_DWORD)a2 == 2)
    {
      id v20 = 0LL;
      id v21 = 0LL;
      id v8 = security_copy_system_key(a1, (const __CFData **)&v21, &v20);
      v9 = (NSData *)v21;
      v10 = (NSError *)v20;
      if (!v8)
      {
        MobileActivationError = createMobileActivationError( (uint64_t)"certificatePublicKeyMatchesSystemPublicKey",  204LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v10,  @"Failed to copy UIK.");
        goto LABEL_17;
      }

      if (v9)
      {
LABEL_10:
        v14 = SecCertificateCopyKey(v5);
        id v5 = v14;
        if (v14)
        {
          CFDataRef v11 = SecKeyCopyExternalRepresentation(v14, &error);
          if (v11)
          {
            if (-[NSData isEqualToData:](v9, "isEqualToData:", v11))
            {
              uint64_t v12 = 1LL;
              goto LABEL_24;
            }

            v17 = createMobileActivationError( (uint64_t)"certificatePublicKeyMatchesSystemPublicKey",  235LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Certificate public key does not match systemKey public key.");
          }

          else
          {
            v17 = createMobileActivationError( (uint64_t)"certificatePublicKeyMatchesSystemPublicKey",  228LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to encode certificate public key as data.");
          }

          v16 = v17;

LABEL_22:
          v10 = v16;
          if (a4) {
            goto LABEL_23;
          }
LABEL_7:
          uint64_t v12 = 0LL;
          goto LABEL_24;
        }

        v16 =  createMobileActivationError( (uint64_t)"certificatePublicKeyMatchesSystemPublicKey",  222LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve certificate public key.");

LABEL_18:
        CFDataRef v11 = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      v10 = 0LL;
      id v8 = 0LL;
    }

    id v13 = v10;
    id v19 = v10;
    v9 = libaks_system_key_get_public(a2, a1, (NSError **)&v19);
    v10 = (NSError *)v19;

    if (v9) {
      goto LABEL_10;
    }
    MobileActivationError = createMobileActivationError( (uint64_t)"certificatePublicKeyMatchesSystemPublicKey",  213LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v10,  @"Failed to query systemKey (%d / %d) public key.",  a2,  a1);
LABEL_17:
    v16 = MobileActivationError;

    id v5 = 0LL;
    goto LABEL_18;
  }

  v10 =  createMobileActivationError( (uint64_t)"certificatePublicKeyMatchesSystemPublicKey",  196LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
  v9 = 0LL;
  id v8 = 0LL;
  CFDataRef v11 = 0LL;
  if (!a4) {
    goto LABEL_7;
  }
LABEL_23:
  v10 = v10;
  uint64_t v12 = 0LL;
  *a4 = v10;
LABEL_24:
  if (v8) {
    CFRelease(v8);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (error) {
    CFRelease(error);
  }
  CFErrorRef error = 0LL;

  return v12;
}

void scheduleXPCActivity( void *a1, const char *a2, unsigned int a3, int a4, unsigned int a5, unsigned int a6, void *a7)
{
  id v13 = a1;
  id v14 = a7;
  xpc_object_t v15 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_BOOL(v15, XPC_ACTIVITY_REPEATING, 0);
  xpc_dictionary_set_int64(v15, XPC_ACTIVITY_DELAY, a3);
  xpc_dictionary_set_string(v15, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
  xpc_dictionary_set_BOOL(v15, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  xpc_dictionary_set_BOOL(v15, XPC_ACTIVITY_POWER_NAP, 1);
  xpc_dictionary_set_int64(v15, XPC_ACTIVITY_GRACE_PERIOD, 30LL);
  xpc_dictionary_set_BOOL(v15, XPC_ACTIVITY_REQUIRES_CLASS_C, 0);
  if (a4)
  {
    xpc_dictionary_set_BOOL(v15, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
    xpc_dictionary_set_int64(v15, XPC_ACTIVITY_NETWORK_UPLOAD_SIZE, a5);
    xpc_dictionary_set_int64(v15, XPC_ACTIVITY_NETWORK_DOWNLOAD_SIZE, a6);
  }

  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3254779904LL;
  handler[2] = __scheduleXPCActivity_block_invoke;
  handler[3] = &__block_descriptor_56_e8_32s40bs_e33_v16__0__NSObject_OS_xpc_object__8l;
  id v20 = v14;
  id v21 = a2;
  id v19 = v13;
  id v16 = v13;
  id v17 = v14;
  xpc_activity_register(a2, v15, handler);
}

void __scheduleXPCActivity_block_invoke(uint64_t a1, id a2)
{
  id v3 = (_xpc_activity_s *)a2;
  if (xpc_activity_get_state(v3) == 2 && xpc_activity_should_defer(v3))
  {
    if (xpc_activity_set_state(v3, 3LL)) {
      goto LABEL_9;
    }
    v4 = copyLoggingHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      __scheduleXPCActivity_block_invoke_cold_1(a1, v4);
    }
  }

  if (xpc_activity_get_state(v3) == 2) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
LABEL_9:
}

void __copy_helper_block_e8_32s40b(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 7);
}

NSData *copyDCRT(void *a1, __SecCertificate **a2, SecCertificateRef *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a4;
  if (platform_supports_activation())
  {
    id v11 = data_ark_copy(v9, 0LL, @"ActivationState");
    uint64_t v12 = (__CFString *)isNSString(v11);

    if (!v12) {
      uint64_t v12 = @"Unactivated";
    }
    if ((-[__CFString isEqualToString:](v12, "isEqualToString:", @"Activated") & 1) == 0)
    {
      id v13 =  createMobileActivationError( (uint64_t)"copyDCRT",  366LL,  @"com.apple.MobileActivation.ErrorDomain",  -8LL,  0LL,  @"Device is not activated (%@).",  v12);
      v70 = 0LL;
      v66 = 0LL;
      id v67 = 0LL;
      id v14 = 0LL;
      id v68 = 0LL;
      xpc_object_t v15 = 0LL;
LABEL_47:
      id v69 = 0LL;
      goto LABEL_52;
    }
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  id v16 = [v10 objectForKeyedSubscript:@"CanonicalizeDcrtOIDs"];
  xpc_object_t v15 = v16;
  if (v16)
  {
    id v17 = isNSNumber(v16);

    if (!v17)
    {
      id v13 =  createMobileActivationError( (uint64_t)"copyDCRT",  373LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid option (%@).",  @"CanonicalizeDcrtOIDs");
      v70 = 0LL;
      v66 = 0LL;
      id v67 = 0LL;
      id v14 = 0LL;
      id v68 = 0LL;
      goto LABEL_47;
    }
  }

  id v18 = [v10 objectForKeyedSubscript:@"ValidateCriticalDcrtOIDs"];
  id v19 = v18;
  id v69 = v18;
  if (v18)
  {
    id v20 = isNSNumber(v18);

    if (!v20)
    {
      id v13 =  createMobileActivationError( (uint64_t)"copyDCRT",  379LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid option (%@).",  @"ValidateCriticalDcrtOIDs");
      v70 = 0LL;
      v66 = 0LL;
      id v67 = 0LL;
      id v14 = 0LL;
      id v68 = 0LL;
      goto LABEL_52;
    }
  }

  v64 = a2;
  id v21 = [v10 objectForKeyedSubscript:@"sdcrtAttestation"];
  v22 = v21;
  id v68 = v21;
  if (v21)
  {
    id v23 = isNSNumber(v21);

    if (!v23)
    {
      id v13 =  createMobileActivationError( (uint64_t)"copyDCRT",  385LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid option (%@).",  @"sdcrtAttestation");
      v70 = 0LL;
      v66 = 0LL;
      id v67 = 0LL;
      id v14 = 0LL;
LABEL_52:
      obj = 0LL;
      v39 = 0LL;
      SecCertificateRef v41 = 0LL;
      v43 = 0LL;
      if (!a5) {
        goto LABEL_64;
      }
      goto LABEL_62;
    }
  }

  v65 = v15;
  if (([v22 BOOLValue] & 1) != 0 || objc_msgSend(v15, "BOOLValue"))
  {
    v24 = copy_required_dcrt_oids();
LABEL_16:
    obj = v24;
    goto LABEL_17;
  }

  if ([v19 BOOLValue])
  {
    v24 = copy_critical_dcrt_oids();
    goto LABEL_16;
  }

  obj = 0LL;
LABEL_17:
  unsigned int v25 = [v22 BOOLValue];
  if (v25) {
    v26 = @"SDCRT";
  }
  else {
    v26 = @"DCRT";
  }
  v27 = @"SDAK";
  if (!v25) {
    v27 = @"DAK";
  }
  v59 = v27;
  if (v25) {
    int v28 = 10;
  }
  else {
    int v28 = 9;
  }
  unsigned int v61 = v28;
  id v29 = copy_dcrt_path();
  unsigned int v30 = [v22 BOOLValue];
  v31 = &SDCRT_FILENAME;
  if (!v30) {
    v31 = &DCRT_FILENAME;
  }
  id v32 = [v29 stringByAppendingPathComponent:*v31];

  if (!v32)
  {
    id v13 =  createMobileActivationError( (uint64_t)"copyDCRT",  413LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create %@ file path.",  v26);
    v70 = 0LL;
    id v67 = 0LL;
LABEL_59:
    v66 = 0LL;
    id v14 = 0LL;
    v39 = 0LL;
LABEL_60:
    SecCertificateRef v41 = 0LL;
    v43 = 0LL;
    goto LABEL_61;
  }

  v63 = v26;
  v58 = a3;
  v33 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
  unsigned __int8 v34 = -[NSFileManager fileExistsAtPath:](v33, "fileExistsAtPath:", v32);

  id v67 = v32;
  if ((v34 & 1) == 0)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"copyDCRT",  418LL,  @"com.apple.MobileActivation.ErrorDomain",  -10LL,  0LL,  @"%@ is unavailable.",  v26);
LABEL_58:
    id v13 = MobileActivationError;
    v70 = 0LL;
    goto LABEL_59;
  }

  v35 = -[NSData initWithContentsOfFile:](objc_alloc(&OBJC_CLASS___NSData), "initWithContentsOfFile:", v32);
  if (!v35)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"copyDCRT",  424LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to encode %@.",  v26);
    goto LABEL_58;
  }

  id v78 = 0LL;
  v70 = v35;
  v36 = parseDERCertificatesFromChain(v35, &v78);
  id v37 = v78;
  if (!v36)
  {
    id v13 =  createMobileActivationError( (uint64_t)"copyDCRT",  430LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v37,  @"Failed to query certificate(s) from DER data.");

    goto LABEL_59;
  }

  v38 = (const __CFData *)-[NSMutableArray objectAtIndexedSubscript:](v36, "objectAtIndexedSubscript:", 0LL);
  v39 = SecCertificateCreateWithData(kCFAllocatorDefault, v38);

  v66 = v36;
  if (!v39)
  {
    id v13 =  createMobileActivationError( (uint64_t)"copyDCRT",  436LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v37,  @"Failed to create certificate from pem data.");

    id v14 = 0LL;
    goto LABEL_60;
  }

  v57 = a5;
  v40 = (const __CFData *)-[NSMutableArray objectAtIndexedSubscript:](v36, "objectAtIndexedSubscript:", 1LL);
  SecCertificateRef v41 = SecCertificateCreateWithData(kCFAllocatorDefault, v40);

  if (!v41)
  {
    id v13 =  createMobileActivationError( (uint64_t)"copyDCRT",  442LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v37,  @"Failed to create certificate from pem data.");

    id v14 = 0LL;
    v43 = 0LL;
    goto LABEL_75;
  }

  id v77 = v37;
  char v42 = certificatePublicKeyMatchesSystemPublicKey(2LL, v61, v39, (NSError **)&v77);
  id v13 = (NSError *)v77;

  if ((v42 & 1) == 0)
  {
    v55 =  createMobileActivationError( (uint64_t)"copyDCRT",  447LL,  @"com.apple.MobileActivation.ErrorDomain",  -10LL,  v13,  @"%@ does not match committed %@.",  v63,  v59);

    id v14 = 0LL;
    v43 = 0LL;
LABEL_74:
    id v13 = v55;
    goto LABEL_75;
  }

  v43 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  if (!v43)
  {
    v55 =  createMobileActivationError( (uint64_t)"copyDCRT",  453LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate array.");

    id v14 = 0LL;
    goto LABEL_74;
  }

  v56 = v12;
  id v60 = v10;
  id v62 = v9;
  __int128 v75 = 0u;
  __int128 v76 = 0u;
  __int128 v73 = 0u;
  __int128 v74 = 0u;
  obj = obj;
  id v44 = -[NSArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v73,  v79,  16LL);
  if (v44)
  {
    id v45 = v44;
    uint64_t v46 = *(void *)v74;
    do
    {
      v47 = 0LL;
      v48 = v13;
      do
      {
        if (*(void *)v74 != v46) {
          objc_enumerationMutation(obj);
        }
        v49 = *(void **)(*((void *)&v73 + 1) + 8LL * (void)v47);
        id v72 = v48;
        v50 = lockcrypto_query_certificate_properties((uint64_t)v39, v49, &v72);
        id v13 = (NSError *)v72;

        if (!v50) {
          -[NSMutableArray addObject:](v43, "addObject:", v49);
        }
        v47 = (char *)v47 + 1;
        v48 = v13;
      }

      while (v45 != v47);
      id v45 = -[NSArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v73,  v79,  16LL);
    }

    while (v45);
  }

  if (-[NSMutableArray count](v43, "count"))
  {
    v51 =  createMobileActivationError( (uint64_t)"copyDCRT",  464LL,  @"com.apple.MobileActivation.ErrorDomain",  -10LL,  0LL,  @"Existing %@ is missing required OID(s) (%@).",  v63,  v43);

    id v14 = 0LL;
    id v13 = v51;
    id v10 = v60;
    id v9 = v62;
    uint64_t v12 = v56;
LABEL_75:
    a5 = v57;
LABEL_61:
    xpc_object_t v15 = v65;
    if (!a5) {
      goto LABEL_64;
    }
    goto LABEL_62;
  }

  id v10 = v60;
  id v9 = v62;
  uint64_t v12 = v56;
  xpc_object_t v15 = v65;
  if (v64)
  {
    *v64 = v39;
    v39 = 0LL;
  }

  a5 = v57;
  if (v58)
  {
    SecCertificateRef *v58 = v41;
    SecCertificateRef v41 = 0LL;
  }

  id v14 = v70;
  v70 = v14;
  if (v57)
  {
LABEL_62:
    if (!v14) {
      *a5 = v13;
    }
  }

LABEL_64:
  if (v39) {
    CFRelease(v39);
  }
  if (v41) {
    CFRelease(v41);
  }
  v53 = v14;

  return v53;
}

uint64_t storeDCRT(void *a1, void *a2, void *a3, void *a4)
{
  id v6 = a1;
  id v7 = a2;
  id v8 = a3;
  id v9 = v8;
  if (!v7)
  {
    id v17 =  createMobileActivationError( (uint64_t)"storeDCRT",  521LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    uint64_t v18 = 0LL;
    id v19 = 0LL;
    SecCertificateRef v13 = 0LL;
    id v20 = 0LL;
    id v92 = 0LL;
    id v93 = 0LL;
    id v89 = 0LL;
    id v90 = 0LL;
    id v91 = 0LL;
    v87 = 0LL;
    v88 = 0LL;
    id v21 = 0LL;
    goto LABEL_8;
  }

  if (!v8)
  {
    id v90 = 0LL;
    v22 = 0LL;
    id v11 = 0LL;
    id v23 = 0LL;
    int v84 = 0;
    uint64_t v12 = a4;
    goto LABEL_17;
  }

  id v10 = [v8 objectForKeyedSubscript:@"UseCommittedDAK"];
  id v11 = v10;
  uint64_t v12 = a4;
  if (v10)
  {
    SecCertificateRef v13 = (SecCertificateRef)isNSNumber(v10);

    if (!v13)
    {
      id v92 = v11;
      id v17 =  createMobileActivationError( (uint64_t)"storeDCRT",  528LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid value for option (%@).",  @"UseCommittedDAK");
      uint64_t v18 = 0LL;
      id v19 = 0LL;
      id v20 = 0LL;
      id v93 = 0LL;
      id v89 = 0LL;
      id v90 = 0LL;
LABEL_74:
      id v91 = 0LL;
      v87 = 0LL;
      v88 = 0LL;
      goto LABEL_75;
    }
  }

  id v14 = [v9 objectForKeyedSubscript:@"ServerResponseDate"];
  id v15 = isNSDate(v14);

  BOOL v16 = v15 != 0LL;
  if (v15) {
    id v90 = [v9 objectForKeyedSubscript:@"ServerResponseDate"];
  }
  else {
    id v90 = 0LL;
  }
  id v24 = [v9 objectForKeyedSubscript:@"SkipCertificateValidation"];
  v22 = v24;
  if (v24)
  {
    SecCertificateRef v13 = (SecCertificateRef)isNSNumber(v24);

    if (!v13)
    {
      id v89 = v22;
      id v92 = v11;
      id v17 =  createMobileActivationError( (uint64_t)"storeDCRT",  539LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid value for option (%@).",  @"SkipCertificateValidation");
      uint64_t v18 = 0LL;
      id v19 = 0LL;
      id v20 = 0LL;
      id v93 = 0LL;
      goto LABEL_74;
    }
  }

  id v25 = [v9 objectForKeyedSubscript:@"sdcrtAttestation"];
  id v23 = v25;
  if (v25)
  {
    SecCertificateRef v13 = (SecCertificateRef)isNSNumber(v25);

    if (!v13)
    {
      id v92 = v11;
      id v93 = v23;
      id v89 = v22;
      id v17 =  createMobileActivationError( (uint64_t)"storeDCRT",  545LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid option (%@).",  @"sdcrtAttestation");
      uint64_t v18 = 0LL;
      id v19 = 0LL;
      goto LABEL_73;
    }
  }

  int v84 = v16;
LABEL_17:
  id v93 = v23;
  unsigned int v26 = [v23 BOOLValue];
  if (v26) {
    v27 = @"SDAK";
  }
  else {
    v27 = @"DAK";
  }
  if (v26) {
    int v28 = @"SDCRT";
  }
  else {
    int v28 = @"DCRT";
  }
  id v109 = 0LL;
  if (v26) {
    int v29 = 10;
  }
  else {
    int v29 = 9;
  }
  unsigned int v86 = v29;
  uint64_t v18 = parseDERCertificatesFromChain(v7, &v109);
  id v21 = v109;
  id v92 = v11;
  id v89 = v22;
  if (!v18)
  {
    id v17 =  createMobileActivationError( (uint64_t)"storeDCRT",  558LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v21,  @"Failed to decode certificates.");

    id v19 = 0LL;
    SecCertificateRef v13 = 0LL;
LABEL_73:
    id v20 = 0LL;
    goto LABEL_74;
  }

  id v91 = (id)v18;
  v82 = v27;
  v83 = v28;
  if ([v22 BOOLValue])
  {
    id v80 = v7;
    *(void *)v85 = v6;
    v87 = 0LL;
    v88 = 0LL;
    id v20 = 0LL;
    SecCertificateRef v13 = 0LL;
    id v19 = 0LL;
    goto LABEL_29;
  }

  if (is_internal_build())
  {
    v39 = objc_alloc(&OBJC_CLASS___NSUserDefaults);
    v40 =  -[NSUserDefaults persistentDomainForName:]( v39,  "persistentDomainForName:",  @"com.apple.mobileactivationd");

    id v41 = -[NSDictionary objectForKeyedSubscript:](v40, "objectForKeyedSubscript:", @"UseQACertificates");
    id v42 = isNSNumber(v41);

    v88 = v40;
    if (v42)
    {
      id v43 = -[NSDictionary objectForKeyedSubscript:](v40, "objectForKeyedSubscript:", @"UseQACertificates");
      LODWORD(v42) = [v43 BOOLValue];
    }
  }

  else
  {
    v88 = 0LL;
    LODWORD(v42) = 0;
  }

  id v108 = v21;
  BOOL is_legacy = security_committed_uik_is_legacy(&v108);
  id v46 = v108;

  if (!is_legacy && v46)
  {
    id v17 =  createMobileActivationError( (uint64_t)"storeDCRT",  575LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v46,  @"Failed to query legacy UIK support.");
    v47 = v46;
LABEL_87:

    uint64_t v18 = 0LL;
    id v19 = 0LL;
    SecCertificateRef v13 = 0LL;
    id v20 = 0LL;
    v87 = 0LL;
    goto LABEL_75;
  }

  int v48 = platform_supports_activation() ^ 1 | is_legacy;
  unsigned int v49 = [v93 BOOLValue];
  if (v48) {
    unsigned int v50 = 2;
  }
  else {
    unsigned int v50 = 1;
  }
  if (v49) {
    uint64_t v51 = 5LL;
  }
  else {
    uint64_t v51 = v50;
  }
  id v107 = v46;
  v52 = copyRootCertificate(v51, (int)v42, (NSError **)&v107);
  id v53 = v107;

  if (!v52)
  {
    id v17 =  createMobileActivationError( (uint64_t)"storeDCRT",  596LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v53,  @"Failed to load BAA root CA certificate.");
    v47 = v53;
    goto LABEL_87;
  }

  id v106 = v53;
  id v20 = lockcrypto_cert_from_pem_data(v52, (NSError **)&v106);
  id v54 = v106;

  v87 = v52;
  if (v20)
  {
    id v81 = v54;
    v55 = (const __CFData *)[v91 objectAtIndexedSubscript:0];
    SecCertificateRef v13 = SecCertificateCreateWithData(kCFAllocatorDefault, v55);

    if (v13)
    {
      v56 = (const __CFData *)[v91 objectAtIndexedSubscript:1];
      id v19 = SecCertificateCreateWithData(kCFAllocatorDefault, v56);

      if (v19)
      {
        else {
          uint64_t v57 = 3LL;
        }
        id v105 = v81;
        char v58 = certificatePublicKeyMatchesSystemPublicKey(v57, v86, v13, (NSError **)&v105);
        id v59 = v105;

        if ((v58 & 1) != 0)
        {
          id v104 = v59;
          char v60 = evaluateBAATrustWithCerts(v13, v19, v20, v48, v84, v90, &v104);
          unsigned int v61 = (NSError *)v104;
          id v62 = v59;
          id v17 = v61;

          if ((v60 & 1) == 0)
          {
            v95 =  createMobileActivationError( (uint64_t)"storeDCRT",  628LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v17,  @"Failed to verify %@.",  v83);

            uint64_t v18 = 0LL;
            id v21 = 0LL;
            id v17 = v95;
            if (!v12) {
              goto LABEL_78;
            }
            goto LABEL_76;
          }

          id v80 = v7;
          *(void *)v85 = v6;
          __int128 v102 = 0u;
          __int128 v103 = 0u;
          __int128 v100 = 0u;
          __int128 v101 = 0u;
          obj = copy_required_dcrt_oids();
          id v63 = -[NSArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v100,  v112,  16LL);
          if (v63)
          {
            id v64 = v63;
            *(void *)v79 = *(void *)v101;
            while (2)
            {
              v65 = 0LL;
              v66 = v17;
              do
              {
                if (*(void *)v101 != *(void *)v79) {
                  objc_enumerationMutation(obj);
                }
                id v67 = *(void **)(*((void *)&v100 + 1) + 8LL * (void)v65);
                id v99 = v66;
                id v68 = lockcrypto_query_certificate_properties((uint64_t)v13, v67, &v99);
                id v17 = (NSError *)v99;

                if (!v68)
                {
                  id v77 =  createMobileActivationError( (uint64_t)"storeDCRT",  636LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v17,  @"%@ is missing required OID: %@",  v83,  v67);

                  id v17 = v77;
                  goto LABEL_102;
                }

                v65 = (char *)v65 + 1;
                v66 = v17;
              }

              while (v64 != v65);
              id v64 = -[NSArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v100,  v112,  16LL);
              if (v64) {
                continue;
              }
              break;
            }
          }

LABEL_102:
          id v21 = 0LL;
          if (v17)
          {
            uint64_t v18 = 0LL;
            goto LABEL_43;
          }

LABEL_29:
          unsigned int v30 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
          id v31 = copy_dcrt_path();
          NSFileAttributeKey v110 = NSFilePosixPermissions;
          v111 = &off_10026D428;
          id v32 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v111,  &v110,  1LL);
          id v98 = v21;
          unsigned __int8 v33 = -[NSFileManager createDirectoryAtPath:withIntermediateDirectories:attributes:error:]( v30,  "createDirectoryAtPath:withIntermediateDirectories:attributes:error:",  v31,  1LL,  v32,  &v98);
          id v34 = v98;

          if ((v33 & 1) != 0)
          {
            id v35 = copy_dcrt_path();
            unsigned int v36 = [v93 BOOLValue];
            id v37 = &SDCRT_FILENAME;
            if (!v36) {
              id v37 = &DCRT_FILENAME;
            }
            id v21 = [v35 stringByAppendingPathComponent:*v37];

            id v7 = v80;
            if (v21)
            {
              id v97 = v34;
              char v38 = store_data(v21, v80, &v97);
              id v17 = (NSError *)v97;

              id v6 = *(id *)v85;
              if ((v38 & 1) != 0)
              {
                if ([v92 BOOLValue])
                {
                  uint64_t v18 = 1LL;
                }

                else
                {
                  id v96 = v17;
                  char v71 = libaks_system_key_operate(v86, 2LL, (NSError **)&v96);
                  id v72 = (NSError *)v96;

                  if ((v71 & 1) != 0)
                  {
                    uint64_t v18 = 1LL;
                    id v17 = v72;
                  }

                  else
                  {
                    id v17 =  createMobileActivationError( (uint64_t)"storeDCRT",  670LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v72,  @"Failed to commit %@.",  v82);

                    uint64_t v18 = 0LL;
                  }
                }

                if (v17)
                {
                  __int128 v74 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
                  -[NSFileManager removeItemAtPath:error:](v74, "removeItemAtPath:error:", v21, 0LL);
                }
              }

              else
              {
                v70 =  createMobileActivationError( (uint64_t)"storeDCRT",  660LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v17,  @"Failed to store %@ at %@.",  v83,  v21);

                uint64_t v18 = 0LL;
                id v17 = v70;
              }
            }

            else
            {
              id v17 =  createMobileActivationError( (uint64_t)"storeDCRT",  655LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create %@ file path.",  v83);

              uint64_t v18 = 0LL;
              id v6 = *(id *)v85;
            }

  return v35;
}

  if (v10) {
    (*((void (**)(id, void, NSError *))v10 + 2))(v10, 0LL, v36);
  }
}

                    __break(1u);
                    goto LABEL_30;
                  }
                }

                __break(0x5500u);
                goto LABEL_29;
              }
            }
          }
        }
      }
    }
  }

  return result;
}

LABEL_8:
            uint64_t v12 = a4;
            if (!a4) {
              goto LABEL_78;
            }
            goto LABEL_76;
          }

          id v44 = copy_dcrt_path();
          id v17 =  createMobileActivationError( (uint64_t)"storeDCRT",  649LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v34,  @"Failed to create %@.",  v44);

          uint64_t v18 = 0LL;
          id v21 = 0LL;
LABEL_43:
          id v6 = *(id *)v85;
          id v7 = v80;
          goto LABEL_8;
        }

        __int128 v75 =  createMobileActivationError( (uint64_t)"storeDCRT",  621LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v59,  @"%@ public key does not match %@ public key.",  v83,  v82);
        id v76 = v59;
        id v17 = v75;
        __int128 v73 = v76;
      }

      else
      {
        id v17 =  createMobileActivationError( (uint64_t)"storeDCRT",  614LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create certificate.");
        __int128 v73 = v81;
      }

      uint64_t v18 = 0LL;
    }

    else
    {
      id v17 =  createMobileActivationError( (uint64_t)"storeDCRT",  608LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create certificate.");

      uint64_t v18 = 0LL;
      id v19 = 0LL;
    }
  }

  else
  {
    id v17 =  createMobileActivationError( (uint64_t)"storeDCRT",  602LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v54,  @"Failed to create certificate from pem data.");

    uint64_t v18 = 0LL;
    id v19 = 0LL;
    SecCertificateRef v13 = 0LL;
  }

    id v7 =  +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:");
    if (v7)
    {
      id v8 = v7;
      id v9 = 0LL;
      goto LABEL_15;
    }

    id v4 = @"Failed to convert validity date.";
    id v5 = 1862LL;
    goto LABEL_11;
  }

  if (SecCertificateNotValidAfter() != 0.0) {
    goto LABEL_8;
  }
  id v4 = @"Failed to obtain 'not valid after' date.";
  id v5 = 1849LL;
LABEL_11:
  MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_copy_certificate_validity_date",  v5,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  v4);
LABEL_12:
  id v10 = MobileActivationError;
  id v9 = v10;
  if (a3)
  {
    id v9 = v10;
    id v8 = 0LL;
    *a3 = v9;
  }

  else
  {
    id v8 = 0LL;
  }

    id v5 = 0LL;
  }

  if (a2 && !v6) {
    *a2 = v7;
  }

  return v6;
}

    uint64_t v12 = v12;
    SecCertificateRef v13 = 0LL;
    *a2 = v12;
LABEL_11:
    id v9 = v4;
    goto LABEL_12;
  }

  id v9 = [v4 stringByAppendingPathComponent:@"activation_record.plist"];

  id v10 =  +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v3);
  id v11 = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", 2LL);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  v11,  @"LDActivationVersion");

  BOOL v16 = v8;
  LOBYTE(v11) = store_dict(v9, v10, &v16);
  uint64_t v12 = (NSError *)v16;

  if ((v11 & 1) == 0)
  {
    id v14 =  createMobileActivationError( (uint64_t)"store_activation_record",  327LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v12,  @"Failed to write activation record to %@.",  v9);

    id v4 = v9;
    uint64_t v12 = v14;
    if (!a2) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }

  SecCertificateRef v13 = 1LL;
LABEL_12:

  return v13;
}

  id v20 = v20;
  id v23 = 0LL;
  *a5 = v20;
LABEL_27:

  return v23;
}

    id v8 = v8;
    id v9 = 0LL;
    *a2 = v8;
    goto LABEL_11;
  }

  uint64_t v12 = v6;
  id v7 = -[NSData initWithContentsOfFile:options:error:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithContentsOfFile:options:error:",  v5,  0LL,  &v12);
  id v8 = (NSError *)v12;

  if (!v7)
  {
    id v10 =  createMobileActivationError( (uint64_t)"copyPersonalizedFirmwareData",  41LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v8,  @"Failed to load firmware data from %@.",  v5);

    id v8 = v10;
    if (!a2) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }

  id v9 = v7;
LABEL_11:

  return v9;
}

    id v7 = v7;
    SecCertificateRef v13 = 0LL;
    id v9 = 0LL;
    *a3 = v7;
    goto LABEL_13;
  }

  id v17 = 0LL;
  id v6 =  +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v5,  100LL,  0LL,  &v17);
  id v7 = (NSError *)v17;
  if (!v6)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"createXMLRequest",  67LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v7,  @"Failed to convert dictionary to data");
    goto LABEL_11;
  }

  id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableURLRequest);
  if (!v8)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"createXMLRequest",  74LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate request.");
LABEL_11:
    id v15 = MobileActivationError;

    id v7 = v15;
    if (!a3) {
      goto LABEL_12;
    }
    goto LABEL_8;
  }

  id v9 = v8;
  -[NSMutableURLRequest setCachePolicy:](v8, "setCachePolicy:", 0LL);
  LODWORD(v10) = NETWORK_TIMEOUT_SECONDS;
  -[NSMutableURLRequest setTimeoutInterval:](v9, "setTimeoutInterval:", (double)v10);
  -[NSMutableURLRequest setHTTPMethod:](v9, "setHTTPMethod:", @"POST");
  id v11 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"application/xml");
  -[NSMutableURLRequest setValue:forHTTPHeaderField:](v9, "setValue:forHTTPHeaderField:", v11, @"Content-Type");

  uint64_t v12 =  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%lu",  -[NSData length](v6, "length"));
  -[NSMutableURLRequest setValue:forHTTPHeaderField:](v9, "setValue:forHTTPHeaderField:", v12, @"Content-Length");

  -[NSMutableURLRequest setHTTPBody:](v9, "setHTTPBody:", v6);
  if (a2)
  {
    id v9 = v9;
    *a2 = v9;
  }

  SecCertificateRef v13 = 1LL;
LABEL_13:

  return v13;
}

  id v11 = *(void *)(a1 + 56);
  if (v11) {
    (*(void (**)(uint64_t, NSDictionary *, NSError *))(v11 + 16))(v11, v7, v8);
  }
}

LABEL_75:
  id v21 = 0LL;
  if (!v12) {
    goto LABEL_78;
  }
LABEL_76:
  if ((v18 & 1) == 0) {
    *uint64_t v12 = v17;
  }
LABEL_78:
  if (v13) {
    CFRelease(v13);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v20) {
    CFRelease(v20);
  }

  return v18;
}

uint64_t deleteDCRT(uint64_t a1, void *a2, NSError **a3)
{
  id v4 = [a2 objectForKeyedSubscript:@"sdcrtAttestation"];
  id v5 = v4;
  if (v4 && (id v6 = isNSNumber(v4), v6, !v6))
  {
    id v15 =  createMobileActivationError( (uint64_t)"deleteDCRT",  704LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid option (%@).",  @"sdcrtAttestation");
    id v10 = 0LL;
    if (a3) {
      goto LABEL_13;
    }
  }

  else
  {
    id v7 = copy_dcrt_path();
    unsigned int v8 = [v5 BOOLValue];
    id v9 = &SDCRT_FILENAME;
    if (!v8) {
      id v9 = &DCRT_FILENAME;
    }
    id v10 = [v7 stringByAppendingPathComponent:*v9];

    if (v10)
    {
      id v11 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
      unsigned int v12 = -[NSFileManager fileExistsAtPath:](v11, "fileExistsAtPath:", v10);

      if (v12)
      {
        SecCertificateRef v13 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
        id v19 = 0LL;
        unsigned __int8 v14 = -[NSFileManager removeItemAtPath:error:](v13, "removeItemAtPath:error:", v10, &v19);
        id v15 = (NSError *)v19;

        if ((v14 & 1) == 0)
        {
          BOOL v16 =  createMobileActivationError( (uint64_t)"deleteDCRT",  716LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v15,  @"Failed to delete %@.",  v10);

          id v15 = v16;
          if (!a3) {
            goto LABEL_11;
          }
LABEL_13:
          id v15 = v15;
          uint64_t v17 = 0LL;
          *a3 = v15;
          goto LABEL_16;
        }
      }

      else
      {
        id v15 = 0LL;
      }

      uint64_t v17 = 1LL;
      goto LABEL_16;
    }

    id v15 =  createMobileActivationError( (uint64_t)"deleteDCRT",  710LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create DCRT file path.");
    if (a3) {
      goto LABEL_13;
    }
  }

LABEL_11:
  uint64_t v17 = 0LL;
LABEL_16:

  return v17;
}

      objc_autoreleasePoolPop(v6);
      if (!a3) {
        goto LABEL_14;
      }
      goto LABEL_12;
    }

  unsigned __int8 v14 = objc_alloc_init(&OBJC_CLASS___NSMutableData);
  if (!v14)
  {
    id v20 =  createMobileActivationError( (uint64_t)"evaluateUCRTTrustWithCerts",  205LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate data.");
    goto LABEL_21;
  }

  id v15 = SecCertificateCopyData(a1);
  if (!v15)
  {
    id v20 =  createMobileActivationError( (uint64_t)"evaluateUCRTTrustWithCerts",  211LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy certificate.");
    uint64_t v17 = 0LL;
    goto LABEL_23;
  }

  -[NSMutableData appendData:](v14, "appendData:", v15);
  BOOL v16 = SecCertificateCopyData(a2);

  if (!v16)
  {
    id v20 =  createMobileActivationError( (uint64_t)"evaluateUCRTTrustWithCerts",  219LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy certificate.");
    uint64_t v17 = 0LL;
LABEL_36:
    id v15 = 0LL;
    goto LABEL_24;
  }

  -[NSMutableData appendData:](v14, "appendData:", v16);
  uint64_t v17 = SecCertificateCopyData(a3);

  if (!v17)
  {
    id v20 =  createMobileActivationError( (uint64_t)"evaluateUCRTTrustWithCerts",  227LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy certificate.");
    goto LABEL_22;
  }

  -[NSMutableData appendData:](v14, "appendData:", v17);
  uint64_t v18 = SecCertificateCopyKey(a3);
  BOOL v16 = v18;
  if (!v18)
  {
    id v20 =  createMobileActivationError( (uint64_t)"evaluateUCRTTrustWithCerts",  241LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy public key.");
    goto LABEL_36;
  }

  id v15 = SecKeyCopyExternalRepresentation(v18, &error);
  if (v15)
  {
    id v25 = 0LL;
    id v19 = evaluateUCRTTrust(v14, v15, (NSError **)&v25);
    id v20 = (NSError *)v25;
    if ((v19 & 1) != 0)
    {
      id v21 = 1LL;
LABEL_27:
      CFRelease(v16);
      v22 = v21;
      goto LABEL_28;
    }

    id v24 =  createMobileActivationError( (uint64_t)"evaluateUCRTTrustWithCerts",  254LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v20,  @"Failed to verify UCRT.");

    id v20 = v24;
  }

  else
  {
    id v20 =  createMobileActivationError( (uint64_t)"evaluateUCRTTrustWithCerts",  247LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to copy public key data.");
  }

  return v18;
}

  BOOL v16 = objc_alloc_init(&OBJC_CLASS___NSMutableData);
  if (!v16)
  {
    unsigned int v26 = createMobileActivationError( (uint64_t)"evaluateBAATrustWithCerts",  342LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate data.");
LABEL_23:
    id v24 = v26;
    goto LABEL_24;
  }

  uint64_t v17 = SecCertificateCopyData(a1);
  if (!v17)
  {
    unsigned int v26 = createMobileActivationError( (uint64_t)"evaluateBAATrustWithCerts",  348LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy certificate.");
    goto LABEL_23;
  }

  uint64_t v18 = v17;
  -[NSMutableData appendData:](v16, "appendData:", v17);
  id v19 = SecCertificateCopyData(a2);

  if (!v19)
  {
    id v24 =  createMobileActivationError( (uint64_t)"evaluateBAATrustWithCerts",  356LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy certificate.");
    id v20 = 0LL;
    goto LABEL_26;
  }

  -[NSMutableData appendData:](v16, "appendData:", v19);
  id v20 = SecCertificateCopyData(a3);

  if (!v20)
  {
    id v24 =  createMobileActivationError( (uint64_t)"evaluateBAATrustWithCerts",  364LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy certificate.");
    goto LABEL_25;
  }

  -[NSMutableData appendData:](v16, "appendData:", v20);
  id v21 = SecCertificateCopyKey(a3);
  v22 = v21;
  if (v21)
  {
    id v19 = SecKeyCopyExternalRepresentation(v21, &error);
    if (v19)
    {
      unsigned int v30 = 0LL;
      id v23 = evaluateBAATrust(v16, v19, a4, (NSError **)&v30);
      id v24 = (NSError *)v30;
      if ((v23 & 1) != 0)
      {
        id v25 = 1LL;
LABEL_30:
        CFRelease(v22);
        v27 = v25;
        goto LABEL_31;
      }

      int v29 =  createMobileActivationError( (uint64_t)"evaluateBAATrustWithCerts",  391LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v24,  @"Failed to verify BAA certificate.");

      id v24 = v29;
    }

    else
    {
      id v24 =  createMobileActivationError( (uint64_t)"evaluateBAATrustWithCerts",  384LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to copy public key data.");
    }
  }

  else
  {
    id v24 =  createMobileActivationError( (uint64_t)"evaluateBAATrustWithCerts",  378LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy public key.");
    id v19 = 0LL;
  }

  id v15 = objc_alloc_init(&OBJC_CLASS___NSMutableData);
  if (!v15)
  {
    id v21 =  createMobileActivationError( (uint64_t)"evaluateAccessoryTrustWithCerts",  511LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate data.");
    goto LABEL_21;
  }

  BOOL v16 = SecCertificateCopyData(a1);
  if (!v16)
  {
    id v21 =  createMobileActivationError( (uint64_t)"evaluateAccessoryTrustWithCerts",  517LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy certificate.");
    uint64_t v18 = 0LL;
    goto LABEL_23;
  }

  -[NSMutableData appendData:](v15, "appendData:", v16);
  uint64_t v17 = SecCertificateCopyData(a2);

  if (!v17)
  {
    id v21 =  createMobileActivationError( (uint64_t)"evaluateAccessoryTrustWithCerts",  525LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy certificate.");
    uint64_t v18 = 0LL;
LABEL_36:
    BOOL v16 = 0LL;
    goto LABEL_24;
  }

  -[NSMutableData appendData:](v15, "appendData:", v17);
  uint64_t v18 = SecCertificateCopyData(a3);

  if (!v18)
  {
    id v21 =  createMobileActivationError( (uint64_t)"evaluateAccessoryTrustWithCerts",  533LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy certificate.");
    goto LABEL_22;
  }

  -[NSMutableData appendData:](v15, "appendData:", v18);
  id v19 = SecCertificateCopyKey(a3);
  uint64_t v17 = v19;
  if (!v19)
  {
    id v21 =  createMobileActivationError( (uint64_t)"evaluateAccessoryTrustWithCerts",  547LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy public key.");
    goto LABEL_36;
  }

  BOOL v16 = SecKeyCopyExternalRepresentation(v19, &error);
  if (v16)
  {
    unsigned int v26 = 0LL;
    id v20 = evaluateAccessoryTrust(v15, v16, 0LL, (NSError **)&v26);
    id v21 = (NSError *)v26;
    if ((v20 & 1) != 0)
    {
      v22 = 1LL;
LABEL_27:
      CFRelease(v17);
      id v23 = v22;
      goto LABEL_28;
    }

    id v25 =  createMobileActivationError( (uint64_t)"evaluateAccessoryTrustWithCerts",  560LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v21,  @"Failed to verify MFi certificate.");

    id v21 = v25;
  }

  else
  {
    id v21 =  createMobileActivationError( (uint64_t)"evaluateAccessoryTrustWithCerts",  553LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to copy public key data.");
  }

      goto LABEL_55;
    }

    goto LABEL_32;
  }

  id v53 = 0LL;
  id v54 = 0LL;
  id v19 = 0LL;
  id v20 = 0LL;
  uint64_t v18 = 0LL;
  uint64_t v17 = 0LL;
LABEL_27:
  if (a3) {
    -[NSURLSessionConfiguration setWaitsForConnectivity:](v16, "setWaitsForConnectivity:", 1LL);
  }
  [v11 timeoutInterval];
  -[NSURLSessionConfiguration setTimeoutIntervalForResource:](v16, "setTimeoutIntervalForResource:");
  v27 =  +[NSURLSession sessionWithConfiguration:delegate:delegateQueue:]( &OBJC_CLASS___NSURLSession,  "sessionWithConfiguration:delegate:delegateQueue:",  v16,  v15,  0LL);
  if (v27)
  {
    v57[0] = _NSConcreteStackBlock;
    v57[1] = 3254779904LL;
    v57[2] = __talkToServerWithError_block_invoke;
    v57[3] = &__block_descriptor_120_e8_32s40s48s56s64s72r80r88r96r104r112r_e46_v32__0__NSData_8__NSURLResponse_16__NSError_24l;
    id v63 = &v88;
    id v64 = &v92;
    v65 = v69;
    v66 = &v70;
    char v58 = v11;
    BOOL v16 = v16;
    id v59 = v16;
    id v19 = v19;
    char v60 = v19;
    id v20 = v20;
    unsigned int v61 = v20;
    id v15 = v15;
    id v62 = v15;
    id v67 = &v82;
    id v68 = &v76;
    int v28 =  -[NSURLSession dataTaskWithRequest:completionHandler:]( v27,  "dataTaskWithRequest:completionHandler:",  v58,  v57);

    -[NSURLSessionDataTask resume](v28, "resume");
    dispatch_semaphore_wait((dispatch_semaphore_t)v77[5], 0xFFFFFFFFFFFFFFFFLL);
    goto LABEL_17;
  }

  id v34 =  createMobileActivationError( (uint64_t)"talkToServerWithError",  268LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create session.");
  id v35 = (void *)v71[5];
  v71[5] = (uint64_t)v34;

LABEL_56:
  v27 = 0LL;
  int v28 = 0LL;
LABEL_17:
  -[NSURLSession invalidateAndCancel](v27, "invalidateAndCancel");
  if (a5) {
    *a5 = (id) v93[5];
  }
  if (a6) {
    *a6 = v89[3];
  }
  int v29 = (void *)v83[5];
  if (a7 && !v29)
  {
    *a7 = (id) v71[5];
    int v29 = (void *)v83[5];
  }

  unsigned int v30 = v29;
  _Block_object_dispose(v69, 8);

  _Block_object_dispose(&v70, 8);
  _Block_object_dispose(&v76, 8);

  _Block_object_dispose(&v82, 8);
  _Block_object_dispose(&v88, 8);
  _Block_object_dispose(&v92, 8);

  return v30;
}

    id v5 = v5;
    unsigned int v12 = 0LL;
    *a4 = v5;
    goto LABEL_14;
  }

  id v10 = -[MATelephonyInfo telephonyClient](self, "telephonyClient");
  id v15 = 0LL;
  id v11 = -[CoreTelephonyClient getSIMStatus:error:](v10, "getSIMStatus:error:", v6, &v15);
  id v5 = (NSError *)v15;

  if (!v11)
  {
    SecCertificateRef v13 =  createMobileActivationError( (uint64_t)"-[MATelephonyInfo _copySIMStatusWithSlotID:error:]",  406LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v5,  @"Failed to retrieve SIM status for SIM slot ID %d.",  -[CTXPCServiceSubscriptionContext slotID](v6, "slotID"));

    id v5 = v13;
    if (!a4) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }

  unsigned int v12 = v11;
LABEL_14:

  return v12;
}

  a1[6] = -528097532;
  return result;
}

uint64_t deleteUCRT(uint64_t a1, NSError **a2)
{
  id v3 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
  id v4 = copy_ucrt_path();
  unsigned int v5 = -[NSFileManager fileExistsAtPath:](v3, "fileExistsAtPath:", v4);

  if (!v5)
  {
    id v9 = 0LL;
    goto LABEL_6;
  }

  id v6 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
  id v7 = copy_ucrt_path();
  id v14 = 0LL;
  unsigned __int8 v8 = -[NSFileManager removeItemAtPath:error:](v6, "removeItemAtPath:error:", v7, &v14);
  id v9 = (NSError *)v14;

  if ((v8 & 1) != 0)
  {
LABEL_6:
    uint64_t v12 = 1LL;
    goto LABEL_7;
  }

  id v10 = copy_ucrt_path();
  id v11 =  createMobileActivationError( (uint64_t)"deleteUCRT",  740LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v9,  @"Failed to delete %@.",  v10);

  if (a2)
  {
    id v9 = v11;
    uint64_t v12 = 0LL;
    *a2 = v9;
  }

  else
  {
    uint64_t v12 = 0LL;
    id v9 = v11;
  }

LABEL_7:
  return v12;
}

  return v5;
}

  return v11;
}

    unsigned __int8 v8 = 0LL;
    id v6 = 0LL;
    goto LABEL_9;
  }

  unsigned int v5 = (NSError *)objc_opt_class(&OBJC_CLASS___MCProfileConnection);
  if (!v5) {
    goto LABEL_7;
  }
  id v6 = [v3 objectForKeyedSubscript:@"DeviceConfigurationFlags"];
  id v7 = isNSString(v6);

  if (v7)
  {
    id v11 = @"DeviceConfigurationFlags";
    uint64_t v12 = v6;
    unsigned __int8 v8 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v12,  &v11,  1LL);
    id v9 = +[MCProfileConnection sharedConnection](&OBJC_CLASS___MCProfileConnection, "sharedConnection");
    [v9 lockdownDidReceiveActivationRecord:v8];

    unsigned int v5 = 0LL;
  }

  else
  {
    unsigned int v5 = 0LL;
    unsigned __int8 v8 = 0LL;
  }

      *a1 = v9;
      goto LABEL_8;
    }
  }

  else
  {
    id v9 = 0LL;
  }

  id v11 = 1LL;
LABEL_12:
  free(v2);
  uint64_t v12 = v11;
LABEL_13:

  return v12;
}

  if (v12) {
    ewFHQ(v12);
  }
  if (v10) {
    ZyNF2D9((uint64_t)v10);
  }
}

  id v10 = v9;
  id v11 = 0LL;
LABEL_17:

  return v10;
}

  uint64_t v12 = a3 + a4;
  v14[0] = a3;
  v14[1] = v12;
  id v15 = 0LL;
  if (ccder_blob_decode_tag(v14, &v15)
    && v15 == v11
    && !encode_list_add_der(a1, v10, a3, v12))
  {
    return 0LL;
  }

  return v8;
}

uint64_t storeUCRT(void *a1, void *a2, void *a3, void *a4)
{
  id v44 = a1;
  id v6 = a2;
  id v7 = a3;
  unsigned __int8 v8 = v7;
  if (!v6)
  {
    uint64_t v12 =  createMobileActivationError( (uint64_t)"storeUCRT",  777LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    id v13 = 0LL;
    id v14 = 0LL;
    uint64_t v15 = 0LL;
    id v11 = 0LL;
    id v16 = 0LL;
    uint64_t v17 = 0LL;
    id v10 = &__kCFBooleanFalse;
    goto LABEL_34;
  }

  if (v7)
  {
    id v9 = [v7 objectForKeyedSubscript:@"UseCommittedUIK"];
    id v10 = v9;
    if (v9)
    {
      id v11 = isNSNumber(v9);

      if (!v11)
      {
        uint64_t v12 =  createMobileActivationError( (uint64_t)"storeUCRT",  784LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid option (%@).",  @"UseCommittedUIK");
        id v13 = 0LL;
        id v14 = 0LL;
        uint64_t v15 = 0LL;
LABEL_27:
        id v16 = 0LL;
        uint64_t v17 = 0LL;
        goto LABEL_34;
      }
    }
  }

  else
  {
    id v10 = &__kCFBooleanFalse;
  }

  uint64_t v18 = copyLoggingHandle();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    id v19 = formatURLResponse(v6, 200LL, 0LL);
    *(_DWORD *)buf = 138412290;
    v56 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Activation message:\n%@", buf, 0xCu);
  }

  id v13 = [v8 mutableCopy];
  [v13 setObject:&__kCFBooleanTrue forKeyedSubscript:@"UseEnhancedValidation"];
  [v13 setObject:&__kCFBooleanTrue forKeyedSubscript:@"UseEnhancedValidationWithVersionCheck"];
  id v52 = 0LL;
  id v14 = lockcrypto_decode_pems(v6, "CERTIFICATE", (NSError **)&v52);
  id v20 = v52;
  if (!v14)
  {
    uint64_t v12 =  createMobileActivationError( (uint64_t)"storeUCRT",  797LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v20,  @"Failed to query certificate(s) from pem data.");

    uint64_t v15 = 0LL;
    id v11 = 0LL;
    goto LABEL_27;
  }

  id v21 = (const __CFData *)-[NSMutableArray objectAtIndexedSubscript:](v14, "objectAtIndexedSubscript:", 0LL);
  uint64_t v17 = SecCertificateCreateWithData(kCFAllocatorDefault, v21);

  if (!v17)
  {
    uint64_t v12 =  createMobileActivationError( (uint64_t)"storeUCRT",  803LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v20,  @"Failed to create certificate from pem data.");
    id v37 = v20;
LABEL_33:

    uint64_t v15 = 0LL;
    id v11 = 0LL;
    id v16 = 0LL;
    goto LABEL_34;
  }

  else {
    uint64_t v22 = 3LL;
  }
  id v51 = v20;
  char v23 = certificatePublicKeyMatchesSystemPublicKey(v22, 2LL, v17, (NSError **)&v51);
  id v24 = v51;

  if ((v23 & 1) == 0)
  {
    uint64_t v12 =  createMobileActivationError( (uint64_t)"storeUCRT",  808LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v24,  @"UCRT public key does not match UIK public key.");
    id v37 = v24;
    goto LABEL_33;
  }

  id v50 = v24;
  char v25 = verify_ucrt(v6, v13, &v50);
  id v26 = v50;

  if ((v25 & 1) == 0)
  {
    uint64_t v12 =  createMobileActivationError( (uint64_t)"storeUCRT",  813LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v26,  @"Failed to verify UCRT.");
LABEL_32:
    id v37 = v26;
    goto LABEL_33;
  }

  v27 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
  id v28 = copy_ucrt_path();
  NSFileAttributeKey v53 = NSFilePosixPermissions;
  id v54 = &off_10026D428;
  int v29 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v54,  &v53,  1LL);
  id v49 = v26;
  unsigned __int8 v40 = -[NSFileManager createDirectoryAtPath:withIntermediateDirectories:attributes:error:]( v27,  "createDirectoryAtPath:withIntermediateDirectories:attributes:error:",  v28,  1LL,  v29,  &v49);
  id v41 = v49;

  if ((v40 & 1) == 0)
  {
    id v26 = copy_ucrt_path();
    uint64_t v12 =  createMobileActivationError( (uint64_t)"storeUCRT",  870LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v41,  @"Failed to create %@.",  v26);

    goto LABEL_32;
  }

  id v30 = v41;
  id v31 = copy_ucrt_path();
  id v16 = [v31 stringByAppendingPathComponent:@"ucrt.pem"];

  if (!v16)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"storeUCRT",  876LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create UCRT file path.");
LABEL_42:
    uint64_t v12 = MobileActivationError;

    uint64_t v15 = 0LL;
    id v11 = 0LL;
    goto LABEL_34;
  }

  id v48 = v41;
  char v32 = store_data(v16, v6, &v48);
  id v30 = v48;

  if ((v32 & 1) == 0)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"storeUCRT",  881LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v30,  @"Failed to store UCRT at %@.",  v16);
    goto LABEL_42;
  }

  if (([v10 BOOLValue] & 1) == 0)
  {
    id v47 = v30;
    char v33 = libaks_system_key_operate(2LL, 2LL, (NSError **)&v47);
    id v34 = v47;

    if ((v33 & 1) == 0)
    {
      uint64_t v12 =  createMobileActivationError( (uint64_t)"storeUCRT",  889LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v34,  @"Failed to commit UIK.");

      id v11 = 0LL;
      uint64_t v15 = 0LL;
      goto LABEL_47;
    }

    id v30 = v34;
  }

  id v46 = v30;
  char v35 = security_delete_legacy_uik(&v46);
  uint64_t v12 = (NSError *)v46;

  if ((v35 & 1) != 0)
  {
    id v36 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
    id v11 = [v36 copyAnswer:@"BuildVersion"];

    uint64_t v15 = (uint64_t)isNSString(v11);
    if (v15)
    {
      uint64_t v15 = 1LL;
      data_ark_set(v44, 0LL, @"LastActivated", v11, 1);
      data_ark_set(v44, 0LL, @"ActivationState", @"Activated", 1);
      goto LABEL_47;
    }

    id v42 =  createMobileActivationError( (uint64_t)"storeUCRT",  903LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve build version.");
  }

  else
  {
    id v42 =  createMobileActivationError( (uint64_t)"storeUCRT",  896LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v12,  @"Failed to delete legacy UIK.");

    id v11 = 0LL;
    uint64_t v15 = 0LL;
  }

  uint64_t v12 = v42;
LABEL_47:
  if (v12)
  {
    id v43 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
    -[NSFileManager removeItemAtPath:error:](v43, "removeItemAtPath:error:", v16, 0LL);
  }

LABEL_34:
  if (a4 && (v15 & 1) == 0) {
    *a4 = v12;
  }
  if (v17) {
    CFRelease(v17);
  }

  return v15;
}
}

  id v28 = v35;
  if (a3 && v34) {
    *a3 = v34;
  }
  if (a4 && v26) {
    *(void *)a4 = v26;
  }
  if (a5 && v20) {
    *(void *)a5 = v20;
  }
  char v25 = 1LL;
  id v21 = v34;
  if (v33 && identityRef)
  {
    CFRetain(identityRef);
    NSFileManager *v33 = identityRef;
  }

          __break(0x5519u);
          return result;
        }

        uint64_t v12 = 786432LL;
      }

      else
      {
        if (v7 != 16) {
          goto LABEL_30;
        }
        if (*(void *)v8 != 0x2D20656761766153LL || *(void *)(v8 + 8) != 0x79726F7463614620LL) {
          goto LABEL_30;
        }
        uint64_t v12 = 3LL;
      }

      id v13 = v12 & 0xFFFF0000FFFFFFFFLL | 0x30000000000LL;
    }

    *a2 = v10 | v13;
    goto LABEL_30;
  }

  return result;
}

uint64_t verify_ucrt(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = v6;
  id v91 = a3;
  if (v6)
  {
    id v8 = [v6 objectForKeyedSubscript:@"UseEnhancedValidation"];
    id v9 = isNSNumber(v8);

    if (v9)
    {
      id v10 = [v7 objectForKeyedSubscript:@"UseEnhancedValidation"];
      unsigned int v11 = [v10 BOOLValue];
    }

    else
    {
      unsigned int v11 = 0;
    }

    id v13 = [v7 objectForKeyedSubscript:@"UseEnhancedValidationWithVersionCheck"];
    id v14 = isNSNumber(v13);

    if (v14)
    {
      id v15 = [v7 objectForKeyedSubscript:@"UseEnhancedValidationWithVersionCheck"];
      unsigned int v12 = [v15 BOOLValue];
    }

    else
    {
      unsigned int v12 = 0;
    }

    id v16 = [v7 objectForKeyedSubscript:@"ServerResponseDate"];
    id v17 = isNSDate(v16);

    if (v17)
    {
      id v109 = [v7 objectForKeyedSubscript:@"ServerResponseDate"];
      int v18 = 1;
      goto LABEL_13;
    }

    id v109 = 0LL;
  }

  else
  {
    id v109 = 0LL;
    unsigned int v11 = 0;
    unsigned int v12 = 0;
  }

  int v18 = 0;
LABEL_13:
  if (is_internal_build())
  {
    id v19 = objc_alloc(&OBJC_CLASS___NSUserDefaults);
    id v20 =  -[NSUserDefaults persistentDomainForName:]( v19,  "persistentDomainForName:",  @"com.apple.mobileactivationd");

    id v21 = -[NSDictionary objectForKeyedSubscript:](v20, "objectForKeyedSubscript:", @"UseQACertificates");
    id v22 = isNSNumber(v21);

    if (v22)
    {
      id v23 = -[NSDictionary objectForKeyedSubscript:](v20, "objectForKeyedSubscript:", @"UseQACertificates");
      LODWORD(v22) = [v23 BOOLValue];
    }
  }

  else
  {
    id v20 = 0LL;
    LODWORD(v22) = 0;
  }

  v120 = 0LL;
  id v24 = lockcrypto_decode_pems(v5, "CERTIFICATE", &v120);
  char v25 = v120;
  __int128 v100 = v20;
  id v101 = v5;
  id v99 = v24;
  if (!v24)
  {
    id v30 =  createMobileActivationError( (uint64_t)"verify_ucrt",  3158LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v25,  @"Failed to query certificate(s) from pem data.");
    id v98 = 0LL;
    NSFileAttributeKey v110 = 0LL;
    v111 = 0LL;
    cf = 0LL;
LABEL_23:
    id v96 = 0LL;
    id v97 = 0LL;
    id v92 = 0LL;
    id v93 = 0LL;
    id v102 = 0LL;
    id v104 = 0LL;
    id v31 = 0LL;
    id v32 = 0LL;
    id v95 = 0LL;
    id v107 = 0LL;
    id v108 = 0LL;
    id v105 = 0LL;
    id v106 = 0LL;
LABEL_24:
    id v33 = 0LL;
    v27 = 0LL;
    goto LABEL_59;
  }

  unsigned int v103 = v11;
  unsigned int v89 = v12;
  id v26 = (const __CFData *)-[NSMutableArray objectAtIndexedSubscript:](v24, "objectAtIndexedSubscript:", 0LL);
  v27 = (NSData *)SecCertificateCreateWithData(kCFAllocatorDefault, v26);

  v111 = (__SecCertificate *)v27;
  if (!v27)
  {
    id v30 =  createMobileActivationError( (uint64_t)"verify_ucrt",  3164LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v25,  @"Failed to create certificate from pem data.");
    id v98 = 0LL;
    v111 = 0LL;
    goto LABEL_54;
  }

  if ((unint64_t)-[NSMutableArray count](v24, "count") >= 2)
  {
    id v28 = (const __CFData *)-[NSMutableArray objectAtIndexedSubscript:](v24, "objectAtIndexedSubscript:", 1LL);
    v27 = (NSData *)SecCertificateCreateWithData(kCFAllocatorDefault, v28);

    NSFileAttributeKey v110 = (__SecCertificate *)v27;
    if (v27)
    {
      int v29 = 0LL;
      goto LABEL_29;
    }

    id v30 =  createMobileActivationError( (uint64_t)"verify_ucrt",  3175LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v25,  @"Failed to create intermediate certificate from pem data.");
    id v98 = 0LL;
LABEL_54:
    NSFileAttributeKey v110 = 0LL;
LABEL_55:
    id v93 = 0LL;
    cf = 0LL;
    id v96 = 0LL;
    id v97 = 0LL;
    id v92 = 0LL;
    id v102 = 0LL;
    id v104 = 0LL;
    id v24 = 0LL;
    id v31 = 0LL;
    id v32 = 0LL;
    id v95 = 0LL;
    id v107 = 0LL;
    id v108 = 0LL;
    id v105 = 0LL;
    id v106 = 0LL;
    id v33 = 0LL;
    goto LABEL_59;
  }

  v119 = v25;
  id v24 = copyRootCertificate(9LL, (int)v22, &v119);
  id v34 = v119;

  if (!v24)
  {
    id v30 =  createMobileActivationError( (uint64_t)"verify_ucrt",  3185LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v34,  @"Failed to load UCRT intermediate CA certificate.");
    id v97 = 0LL;
    id v98 = 0LL;
    NSFileAttributeKey v110 = 0LL;
    id v93 = 0LL;
    cf = 0LL;
    id v96 = 0LL;
    id v92 = 0LL;
    id v102 = 0LL;
    id v104 = 0LL;
LABEL_35:
    id v31 = 0LL;
    id v32 = 0LL;
    id v95 = 0LL;
    id v107 = 0LL;
    id v108 = 0LL;
    id v105 = 0LL;
    id v106 = 0LL;
    id v33 = 0LL;
    v27 = 0LL;
    char v25 = v34;
    goto LABEL_59;
  }

  v118 = v34;
  v27 = (NSData *)lockcrypto_cert_from_pem_data(v24, &v118);
  char v25 = v118;

  NSFileAttributeKey v110 = (__SecCertificate *)v27;
  if (!v27)
  {
    id v98 = v24;
    id v30 =  createMobileActivationError( (uint64_t)"verify_ucrt",  3191LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v25,  @"Failed to create certificate from pem data.");
    goto LABEL_54;
  }

  int v29 = v24;
LABEL_29:
  char v35 = v25;
  v117 = v25;
  id v36 = lockcrypto_extract_public_key_size(v111, &v117);
  char v25 = v117;

  if (!(_DWORD)v36)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"verify_ucrt",  3200LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v25,  @"Failed to query UCRT public key size.");
LABEL_58:
    id v30 = MobileActivationError;
    id v93 = 0LL;
    cf = 0LL;
    id v96 = 0LL;
    id v97 = 0LL;
    id v92 = 0LL;
    id v102 = 0LL;
    id v104 = 0LL;
    id v24 = 0LL;
    id v31 = 0LL;
    id v32 = 0LL;
    id v95 = 0LL;
    id v107 = 0LL;
    id v108 = 0LL;
    id v105 = 0LL;
    id v106 = 0LL;
    id v33 = 0LL;
    v27 = 0LL;
    id v98 = v29;
    goto LABEL_59;
  }

  if ((_DWORD)v36 == P256_PUBKEY_BYTES_LEN)
  {
    uint64_t v37 = 7LL;
    goto LABEL_38;
  }

  if ((_DWORD)v36 != P384_PUBKEY_BYTES_LEN)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"verify_ucrt",  3209LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid key size: %d",  v36);
    goto LABEL_58;
  }

  uint64_t v37 = 8LL;
LABEL_38:
  v116 = v25;
  v27 = copyRootCertificate(v37, (int)v22, &v116);
  v39 = v116;

  if (!v27)
  {
    id v30 =  createMobileActivationError( (uint64_t)"verify_ucrt",  3215LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v39,  @"Failed to load UCRT root CA certificate.");
    id v97 = 0LL;
    id v98 = 0LL;
    id v93 = 0LL;
    cf = 0LL;
    id v95 = 0LL;
    id v96 = 0LL;
    id v92 = 0LL;
    id v102 = 0LL;
    id v104 = 0LL;
    id v24 = 0LL;
    id v31 = 0LL;
    id v32 = 0LL;
    id v107 = 0LL;
    id v108 = 0LL;
    id v105 = 0LL;
    id v106 = 0LL;
    id v33 = 0LL;
    char v25 = v39;
    goto LABEL_59;
  }

  v115 = v39;
  id v98 = v27;
  v27 = (NSData *)lockcrypto_cert_from_pem_data(v27, &v115);
  char v25 = v115;

  if (!v27)
  {
    id v30 =  createMobileActivationError( (uint64_t)"verify_ucrt",  3221LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v25,  @"Failed to create certificate from pem data.");
    goto LABEL_55;
  }

  v114 = v25;
  cf = v27;
  char v40 = evaluateUCRTTrustWithCerts(v111, v110, (__SecCertificate *)v27, v18, v109, &v114);
  id v34 = v114;

  if ((v40 & 1) == 0)
  {
    id v30 =  createMobileActivationError( (uint64_t)"verify_ucrt",  3228LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v34,  @"Failed to verify UCRT.");
    id v96 = 0LL;
    id v97 = 0LL;
    id v92 = 0LL;
    id v93 = 0LL;
    id v102 = 0LL;
    id v104 = 0LL;
    id v24 = 0LL;
    goto LABEL_35;
  }

  v113 = v34;
  id v24 = lockcrypto_query_certificate_properties((uint64_t)v111, @"1.2.840.113635.100.10.1", &v113);
  char v25 = v113;

  if (!v24)
  {
    id v30 =  createMobileActivationError( (uint64_t)"verify_ucrt",  3240LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v25,  @"Failed to query UCRT device identifiers.");
    goto LABEL_23;
  }

  id v41 = -[NSMutableArray objectForKeyedSubscript:](v24, "objectForKeyedSubscript:", @"srnm");
  id v108 = -[NSMutableArray objectForKeyedSubscript:](v24, "objectForKeyedSubscript:", @"udid");
  id v107 = -[NSMutableArray objectForKeyedSubscript:](v24, "objectForKeyedSubscript:", @"meid");
  id v106 = -[NSMutableArray objectForKeyedSubscript:](v24, "objectForKeyedSubscript:", @"imei");
  id v105 = -[NSMutableArray objectForKeyedSubscript:](v24, "objectForKeyedSubscript:", @"ime2");
  id v42 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v43 = [v42 copyAnswer:@"SerialNumber"];

  id v44 = isNSString(v41);
  id v96 = v43;
  id v97 = v24;
  id v95 = v41;
  if (!v44) {
    goto LABEL_72;
  }
  id v45 = v44;
  id v46 = isNSString(v43);
  if (!v46)
  {

    goto LABEL_72;
  }

  id v47 = v46;
  unsigned __int8 v48 = [v43 isEqualToString:v41];

  if ((v48 & 1) == 0)
  {
LABEL_72:
    id v30 =  createMobileActivationError( (uint64_t)"verify_ucrt",  3252LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid Serial.");
    id v93 = 0LL;
LABEL_73:
    id v92 = 0LL;
    goto LABEL_74;
  }

  id v49 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v50 = [v49 copyAnswer:@"UniqueDeviceID"];

  id v51 = isNSString(v108);
  id v93 = v50;
  if (!v51) {
    goto LABEL_79;
  }
  id v52 = v51;
  id v53 = isNSString(v50);
  if (!v53)
  {

    goto LABEL_79;
  }

  id v54 = v50;
  v55 = v53;
  unsigned __int8 v56 = [v54 isEqualToString:v108];

  if ((v56 & 1) == 0)
  {
LABEL_79:
    id v30 =  createMobileActivationError( (uint64_t)"verify_ucrt",  3258LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid UDID.");
    goto LABEL_73;
  }

  if ((v103 | v89) != 1)
  {
    id v92 = 0LL;
    id v102 = 0LL;
    id v104 = 0LL;
LABEL_81:
    id v24 = 0LL;
    id v31 = 0LL;
    id v32 = 0LL;
    id v33 = 0LL;
    v27 = 0LL;
    uint64_t v63 = 1LL;
    id v30 = v25;
    goto LABEL_82;
  }

  id v57 = isNSString(v107);

  if (v57)
  {
    id v58 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
    id v59 = [v58 copyAnswer:@"MobileEquipmentIdentifier"];

    id v60 = isNSString(v59);
    if (!v60
      || (unsigned int v61 = v60,
          unsigned __int8 v62 = [v59 isEqualToString:v107],
          v61,
          (v62 & 1) == 0))
    {
      id v92 = v59;
      id v30 =  createMobileActivationError( (uint64_t)"verify_ucrt",  3266LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid MEID.");
LABEL_74:
      id v104 = 0LL;
LABEL_75:
      id v102 = 0LL;
LABEL_76:
      id v24 = 0LL;
LABEL_77:
      id v31 = 0LL;
      id v32 = 0LL;
      goto LABEL_24;
    }
  }

  else
  {
    id v59 = 0LL;
  }

  id v68 = isNSString(v106);

  id v92 = v59;
  if (v68)
  {
    id v69 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
    id v70 = [v69 copyAnswer:@"InternationalMobileEquipmentIdentity"];

    id v104 = v70;
    id v71 = isNSString(v70);
    if (!v71
      || (id v72 = v71,
          unsigned __int8 v73 = [v70 isEqualToString:v106],
          v72,
          (v73 & 1) == 0))
    {
      id v30 =  createMobileActivationError( (uint64_t)"verify_ucrt",  3274LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid IMEI.");
      goto LABEL_75;
    }
  }

  else
  {
    id v104 = 0LL;
  }

  id v74 = isNSString(v105);

  if (v74)
  {
    id v75 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
    id v76 = [v75 copyAnswer:@"xRyzf9zFE/ycr/wJPweZvQ"];

    id v102 = v76;
    id v77 = isNSString(v76);
    if (!v77
      || (id v78 = v77,
          unsigned __int8 v79 = [v76 isEqualToString:v105],
          v78,
          (v79 & 1) == 0))
    {
      id v30 =  createMobileActivationError( (uint64_t)"verify_ucrt",  3282LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid IMEI2.");
      goto LABEL_76;
    }
  }

  else
  {
    id v102 = 0LL;
  }

  if (!v89) {
    goto LABEL_81;
  }
  v112 = v25;
  id v24 = lockcrypto_query_certificate_properties((uint64_t)v111, @"1.2.840.113635.100.8.7", &v112);
  id v90 = v112;

  if (!v24)
  {
    char v25 = v90;
    id v30 =  createMobileActivationError( (uint64_t)"verify_ucrt",  3293LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v90,  @"Failed to query UCRT device OS information.");
    goto LABEL_77;
  }

  id v33 = -[NSMutableArray objectForKeyedSubscript:](v24, "objectForKeyedSubscript:", @"1400");
  v27 = (NSData *)-[NSMutableArray objectForKeyedSubscript:](v24, "objectForKeyedSubscript:", @"1403");
  id v80 = isNSString(v33);

  if (!v80)
  {
    id v31 = 0LL;
LABEL_102:
    id v32 = isNSString(v27);

    if (v32)
    {
      id v85 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
      id v32 = [v85 copyAnswer:@"BuildVersion"];

      id v86 = isNSString(v32);
      if (!v86
        || (v87 = v86,
            unsigned __int8 v88 = [v32 isEqualToString:v27],
            v87,
            (v88 & 1) == 0))
      {
        id v30 =  createMobileActivationError( (uint64_t)"verify_ucrt",  3311LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid BuildVersion.");
        goto LABEL_107;
      }
    }

    uint64_t v63 = 1LL;
    id v30 = v90;
LABEL_82:
    v65 = v110;
    id v64 = v111;
    v66 = cf;
LABEL_62:
    CFRelease(v64);
    goto LABEL_63;
  }

  id v81 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v31 = [v81 copyAnswer:@"ProductVersion"];

  id v82 = isNSString(v31);
  if (v82)
  {
    v83 = v82;
    unsigned __int8 v84 = [v31 isEqualToString:v33];

    if ((v84 & 1) != 0) {
      goto LABEL_102;
    }
  }

  id v30 =  createMobileActivationError( (uint64_t)"verify_ucrt",  3303LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid ProductVersion.");
  id v32 = 0LL;
LABEL_107:
  char v25 = v90;
LABEL_59:

  if (v91) {
    *id v91 = v30;
  }
  uint64_t v63 = 0LL;
  v65 = v110;
  id v64 = v111;
  v66 = cf;
  if (v111) {
    goto LABEL_62;
  }
LABEL_63:
  if (v65) {
    CFRelease(v65);
  }
  if (v66) {
    CFRelease(v66);
  }

  return v63;
}

SecCertificateRef copyUCRT(void *a1, NSError **a2)
{
  id v3 = data_ark_copy(a1, 0LL, @"ActivationState");
  id v4 = (__CFString *)isNSString(v3);

  if (!v4) {
    id v4 = @"Unactivated";
  }
  if ((-[__CFString isEqualToString:](v4, "isEqualToString:", @"Activated") & 1) == 0)
  {
    unsigned int v12 =  createMobileActivationError( (uint64_t)"copyUCRT",  947LL,  @"com.apple.MobileActivation.ErrorDomain",  -8LL,  0LL,  @"Device is not activated (%@).",  v4);
    id v10 = 0LL;
    id v6 = 0LL;
    goto LABEL_14;
  }

  id v5 = copy_ucrt_path();
  id v6 = [v5 stringByAppendingPathComponent:@"ucrt.pem"];

  if (!v6)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"copyUCRT",  953LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create UCRT file path.");
LABEL_13:
    unsigned int v12 = MobileActivationError;
    id v10 = 0LL;
    goto LABEL_14;
  }

  id v7 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
  unsigned __int8 v8 = -[NSFileManager fileExistsAtPath:](v7, "fileExistsAtPath:", v6);

  if ((v8 & 1) == 0)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"copyUCRT",  958LL,  @"com.apple.MobileActivation.ErrorDomain",  -4LL,  0LL,  @"UCRT is unavailable.");
    goto LABEL_13;
  }

  id v9 = -[NSData initWithContentsOfFile:](objc_alloc(&OBJC_CLASS___NSData), "initWithContentsOfFile:", v6);
  id v10 = v9;
  if (!v9)
  {
    unsigned int v12 =  createMobileActivationError( (uint64_t)"copyUCRT",  964LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to encode UCRT.");
LABEL_14:
    unsigned int v11 = 0LL;
    if (!a2)
    {
LABEL_19:
      SecCertificateRef v14 = 0LL;
      goto LABEL_20;
    }

    goto LABEL_15;
  }

  id v19 = 0LL;
  unsigned int v11 = lockcrypto_decode_pems(v9, "CERTIFICATE", (NSError **)&v19);
  unsigned int v12 = (NSError *)v19;
  if (!v11)
  {
    id v15 = createMobileActivationError( (uint64_t)"copyUCRT",  970LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v12,  @"Failed to query certificate(s) from pem data.");
LABEL_18:
    id v17 = v15;

    unsigned int v12 = v17;
    if (!a2) {
      goto LABEL_19;
    }
LABEL_15:
    unsigned int v12 = v12;
    SecCertificateRef v14 = 0LL;
    *a2 = v12;
    goto LABEL_20;
  }

  id v13 = (const __CFData *)-[NSMutableArray objectAtIndexedSubscript:](v11, "objectAtIndexedSubscript:", 0LL);
  SecCertificateRef v14 = SecCertificateCreateWithData(kCFAllocatorDefault, v13);

  if (!v14)
  {
    id v15 = createMobileActivationError( (uint64_t)"copyUCRT",  976LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create certificate from pem data.");
    goto LABEL_18;
  }

LABEL_20:
  return v14;
}

  if (!v11) {
    *a2 = v4;
  }
LABEL_22:
  id v20 = v11;

  return v20;
}

            memset_s(v13, v11, 0, v11);
            free(v13);
            if (v18)
            {
              memset_s(v18, v16, 0, v16);
              free(v18);
            }
          }

          else
          {
            return 0xFFFFFFFFLL;
          }
        }
      }
    }
  }

  return v3;
}

NSDictionary *create_ucrt_info(void *a1, void *a2, void *a3)
{
  id v4 = a1;
  id v5 = a2;
  CFErrorRef error = 0LL;
  id v41 = v5;
  id v42 = v4;
  if (!v4)
  {
    id v10 =  createMobileActivationError( (uint64_t)"create_ucrt_info",  1030LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    unsigned __int8 v8 = 0LL;
    id v9 = 0LL;
    unsigned int v11 = 0LL;
    id v43 = 0LL;
    id v40 = 0LL;
LABEL_25:
    id v21 = 0LL;
    int v18 = 0LL;
    SecAccessControlRef v17 = 0LL;
LABEL_26:
    SecCertificateRef v14 = 0LL;
    goto LABEL_27;
  }

  id v6 = v5;
  if (v5)
  {
    id v7 = [v5 objectForKeyedSubscript:@"UseCommittedUIK"];
    unsigned __int8 v8 = v7;
    if (v7)
    {
      id v9 = (NSData *)isNSNumber(v7);

      if (!v9)
      {
        id v10 =  createMobileActivationError( (uint64_t)"create_ucrt_info",  1045LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid option (%@).",  @"UseCommittedUIK");
        unsigned int v11 = 0LL;
        id v43 = 0LL;
        id v40 = 0LL;
LABEL_24:
        id v4 = 0LL;
        goto LABEL_25;
      }
    }
  }

  else
  {
    unsigned __int8 v8 = 0LL;
  }

  id v12 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v13 = [v12 copyAnswer:@"HasPKA"];

  SecCertificateRef v14 = (NSMutableDictionary *)isNSNumber(v13);
  id v40 = v13;
  if (!v14)
  {
    id v10 =  createMobileActivationError( (uint64_t)"create_ucrt_info",  1052LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve PKA state.");
    id v9 = 0LL;
    unsigned int v11 = 0LL;
    id v43 = 0LL;
    id v4 = 0LL;
    id v21 = 0LL;
    int v18 = 0LL;
    SecAccessControlRef v17 = 0LL;
LABEL_27:
    id v30 = 0LL;
    goto LABEL_28;
  }

  else {
    uint64_t v15 = 3LL;
  }
  id v52 = 0LL;
  unsigned int v11 = security_copy_system_key(v15, 0LL, &v52);
  id v16 = v52;
  if (!v11)
  {
    id v10 =  createMobileActivationError( (uint64_t)"create_ucrt_info",  1061LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v16,  @"Failed to copy UIK.");

    id v9 = 0LL;
    id v43 = 0LL;
    goto LABEL_24;
  }

  SecAccessControlRef v17 = SecAccessControlCreateWithFlags(0LL, kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate, 0x40000000uLL, &error);
  if (!v17)
  {
    id v10 =  createMobileActivationError( (uint64_t)"create_ucrt_info",  1070LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to create access control.");

    CFRelease(v11);
    id v9 = 0LL;
    unsigned int v11 = 0LL;
    id v43 = 0LL;
    id v4 = 0LL;
    id v21 = 0LL;
    int v18 = 0LL;
    goto LABEL_26;
  }

  id v51 = v16;
  int v18 = (__SecKey *)createReferenceKeyBlob(v17, (char)[v13 BOOLValue], 0, &v51);
  id v19 = v51;

  SecAccessControlRef cf = v17;
  char v38 = v11;
  v39 = v18;
  if (!v18)
  {
    id v10 =  createMobileActivationError( (uint64_t)"create_ucrt_info",  1076LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v19,  @"Failed to create ref key.");
    id v33 = v19;
LABEL_37:

    id v30 = 0LL;
    SecCertificateRef v14 = 0LL;
    SecAccessControlRef v17 = 0LL;
    id v21 = 0LL;
    id v4 = 0LL;
    id v43 = 0LL;
    goto LABEL_42;
  }

  id v50 = v19;
  int v18 = (__SecKey *)security_create_attestation((uint64_t)v18, (uint64_t)v11, (NSError **)&v50);
  id v20 = v50;

  if (!v18)
  {
    id v10 =  createMobileActivationError( (uint64_t)"create_ucrt_info",  1084LL,  @"com.apple.MobileActivation.ErrorDomain",  -11LL,  v20,  @"Failed to attest ref key to UIK.");
    id v33 = v20;
    goto LABEL_37;
  }

  id v49 = v20;
  id v21 = copy_uik_certificate_info(v6, &v49);
  id v22 = v49;

  id v43 = v18;
  if (!v21)
  {
    id v10 =  createMobileActivationError( (uint64_t)"create_ucrt_info",  1119LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v22,  @"Failed to copy UIK certification info.");

    id v30 = 0LL;
    SecCertificateRef v14 = 0LL;
    SecAccessControlRef v17 = 0LL;
LABEL_40:
    int v18 = 0LL;
LABEL_41:
    id v4 = 0LL;
    goto LABEL_42;
  }

  id v48 = v22;
  SecAccessControlRef v17 = (SecAccessControlRef)copy_device_id_info(v23, (NSError **)&v48);
  id v24 = v48;

  if (!v17)
  {
    id v10 =  createMobileActivationError( (uint64_t)"create_ucrt_info",  1127LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v24,  @"Failed to copy device id info.");

    id v30 = 0LL;
    SecCertificateRef v14 = 0LL;
    goto LABEL_40;
  }

  id v47 = v24;
  int v18 = (__SecKey *)copy_device_info(v25, (NSError **)&v47);
  id v26 = v47;

  if (!v18)
  {
    id v10 =  createMobileActivationError( (uint64_t)"create_ucrt_info",  1135LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v26,  @"Failed to copy device info.");

    id v30 = 0LL;
    SecCertificateRef v14 = 0LL;
    goto LABEL_41;
  }

  BOOL v27 = is_product_cellular();
  if (v27)
  {
    id v46 = v26;
    id v4 = copy_baseband_request_info(v27, v28, (NSError **)&v46);
    id v29 = v46;

    if (v4)
    {
      id v26 = v29;
      goto LABEL_47;
    }

    id v10 =  createMobileActivationError( (uint64_t)"create_ucrt_info",  1146LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v29,  @"Failed to copy baseband request info.");

    id v30 = 0LL;
    SecCertificateRef v14 = 0LL;
LABEL_42:
    unsigned int v11 = 0LL;
    id v9 = 0LL;
    goto LABEL_43;
  }

  id v4 = 0LL;
LABEL_47:
  v56[0] = @"DeviceID";
  v56[1] = @"DeviceInfo";
  v57[0] = v17;
  v57[1] = v18;
  v56[2] = @"UIKCertification";
  v57[2] = v21;
  id v34 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v57,  v56,  3LL);
  SecCertificateRef v14 =  +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v34);

  if (v4) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v14,  "setObject:forKeyedSubscript:",  v4,  @"BasebandRequestInfo");
  }
  id v45 = 0LL;
  id v9 =  +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v14,  100LL,  0LL,  &v45);
  id v10 = (NSError *)v45;

  if (v9)
  {
    CFDataRef v35 = SecKeyCreateSignature(v39, kSecKeyAlgorithmECDSASignatureMessageX962SHA256, (CFDataRef)v9, &error);
    unsigned int v11 = v35;
    if (v35)
    {
      v54[0] = @"ActivationInfoXML";
      v54[1] = @"RKCertification";
      v55[0] = v9;
      v55[1] = v43;
      v54[2] = @"RKSignature";
      v55[2] = v35;
      id v30 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v55,  v54,  3LL);
      goto LABEL_43;
    }

    id v36 =  createMobileActivationError( (uint64_t)"create_ucrt_info",  1187LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to sign activation data with ref key.");

    id v30 = 0LL;
  }

  else
  {
    id v36 =  createMobileActivationError( (uint64_t)"create_ucrt_info",  1178LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v10,  @"Could not convert dictionary to xml data.");

    id v30 = 0LL;
    unsigned int v11 = 0LL;
  }

  id v10 = v36;
LABEL_43:
  CFRelease(cf);
  CFRelease(v38);
  if (v39) {
    CFRelease(v39);
  }
LABEL_28:
  if (error) {
    CFRelease(error);
  }
  CFErrorRef error = 0LL;
  if (a3 && !v30) {
    *a3 = v10;
  }
  id v31 = v30;

  return v31;
}

__SecKey *copy_uik_certificate_info(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    id v6 = 0LL;
LABEL_6:
    else {
      uint64_t v14 = 3LL;
    }
    id v33 = 0LL;
    unsigned int v11 = security_copy_system_key(v14, 0LL, &v33);
    id v15 = v33;
    id v16 = v15;
    if (!v11)
    {
      unsigned __int8 v8 =  createMobileActivationError( (uint64_t)"copy_uik_certificate_info",  2726LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v15,  @"Failed to copy UIK.");

      id v9 = 0LL;
      id v31 = 0LL;
      id v10 = 0LL;
      id v12 = 0LL;
      id v13 = 0LL;
      id v7 = 0LL;
      goto LABEL_23;
    }

    id v32 = v15;
    id v7 = (__SecKey *)security_create_system_key_attestation((uint64_t)v11, 0LL, 0LL, &v32);
    unsigned __int8 v8 = (NSError *)v32;

    id v29 = a2;
    id v30 = v7;
    if (v7)
    {
      id v17 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
      id v18 = [v17 copyAnswer:@"BluetoothAddress"];

      id v31 = v18;
      id v12 = isNSString(v18);

      if (v12)
      {
        id v19 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
        id v9 = [v19 copyAnswer:@"WifiAddress"];

        id v12 = isNSString(v9);
        if (v12)
        {
          id v20 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
          id v10 = [v20 copyAnswer:@"EthernetMacAddress"];

          id v12 = isNSString(v10);
          if (v12)
          {
            id v21 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
            id v13 = [v21 copyAnswer:@"BoardId"];

            id v12 = isNSNumber(v13);
            if (v12)
            {
              id v22 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
              id v12 = [v22 copyAnswer:@"ChipID"];

              id v23 = isNSNumber(v12);
              if (v23)
              {
                v34[0] = @"UIKCertification";
                v34[1] = @"BluetoothAddress";
                v35[0] = v7;
                v35[1] = v31;
                v34[2] = @"WifiAddress";
                v34[3] = @"BoardId";
                v35[2] = v9;
                v35[3] = v13;
                v34[4] = @"ChipID";
                v35[4] = v12;
                id v24 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v35,  v34,  5LL);
                id v7 = (__SecKey *)-[NSDictionary mutableCopy](v24, "mutableCopy");

                -[__SecKey setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  v10,  @"EthernetMacAddress");
LABEL_22:
                CFRelease(v11);
                a2 = v29;
                unsigned int v11 = v30;
                goto LABEL_23;
              }

              MobileActivationError = createMobileActivationError( (uint64_t)"copy_uik_certificate_info",  2782LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve chip id.");
            }

            else
            {
              MobileActivationError = createMobileActivationError( (uint64_t)"copy_uik_certificate_info",  2776LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve board id.");
            }

            uint64_t v25 = MobileActivationError;

            id v7 = 0LL;
          }

          else
          {
            uint64_t v25 =  createMobileActivationError( (uint64_t)"copy_uik_certificate_info",  2768LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve ethernet mac address.");

            id v7 = 0LL;
            id v13 = 0LL;
          }
        }

        else
        {
          uint64_t v25 =  createMobileActivationError( (uint64_t)"copy_uik_certificate_info",  2758LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve WiFi address.");

          id v7 = 0LL;
          id v13 = 0LL;
          id v10 = 0LL;
        }

LABEL_21:
        unsigned __int8 v8 = v25;
        goto LABEL_22;
      }

      uint64_t v25 =  createMobileActivationError( (uint64_t)"copy_uik_certificate_info",  2752LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve bluetooth address.");

      id v7 = 0LL;
      id v13 = 0LL;
      id v10 = 0LL;
    }

    else
    {
      uint64_t v25 =  createMobileActivationError( (uint64_t)"copy_uik_certificate_info",  2734LL,  @"com.apple.MobileActivation.ErrorDomain",  -11LL,  v8,  @"Failed to attest UIK to SIK.");

      id v13 = 0LL;
      id v12 = 0LL;
      id v10 = 0LL;
      id v31 = 0LL;
    }

    id v9 = 0LL;
    goto LABEL_21;
  }

  id v5 = [v3 objectForKeyedSubscript:@"UseCommittedUIK"];
  id v6 = v5;
  if (!v5) {
    goto LABEL_6;
  }
  id v7 = (__SecKey *)isNSNumber(v5);

  if (v7) {
    goto LABEL_6;
  }
  unsigned __int8 v8 =  createMobileActivationError( (uint64_t)"copy_uik_certificate_info",  2716LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid option (%@).",  @"UseCommittedUIK");
  id v9 = 0LL;
  id v31 = 0LL;
  id v10 = 0LL;
  unsigned int v11 = 0LL;
  id v12 = 0LL;
  id v13 = 0LL;
LABEL_23:
  if (a2 && !v7) {
    *a2 = v8;
  }
  id v26 = v7;

  return v26;
}

    *a4 = v11;
    goto LABEL_22;
  }

  unsigned int v11 = 0LL;
  id v15 = 1LL;
LABEL_23:
  CFRelease(v9);
  id v17 = v15;
LABEL_24:
  if (v12) {
    CFRelease(v12);
  }
  if (error) {
    CFRelease(error);
  }
  CFErrorRef error = 0LL;

  return v17;
}

  if (v7) {
    (*((void (**)(id, void, NSError *))v7 + 2))(v7, 0LL, v28);
  }
}

id copy_device_id_info(uint64_t a1, NSError **a2)
{
  id v3 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v10 = 0LL;
  id v4 = [v3 copyDeviceIDInfo:&v10];
  id v5 = v10;

  if (v4) {
    BOOL v6 = v5 == 0LL;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    id v8 = v4;
    id v7 = 0LL;
  }

  else
  {
    id v7 =  createMobileActivationError( (uint64_t)"copy_device_id_info",  2648LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy device ID info: %@",  v5);
    if (a2)
    {
      id v7 = v7;
      id v8 = 0LL;
      *a2 = v7;
    }

    else
    {
      id v8 = 0LL;
    }
  }

  return v8;
}

id copy_device_info(uint64_t a1, NSError **a2)
{
  id v3 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v10 = 0LL;
  id v4 = [v3 copyDeviceInfo:&v10];
  id v5 = v10;

  if (v4) {
    BOOL v6 = v5 == 0LL;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    id v8 = v4;
    id v7 = 0LL;
  }

  else
  {
    id v7 =  createMobileActivationError( (uint64_t)"copy_device_info",  2673LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy device info: %@",  v5);
    if (a2)
    {
      id v7 = v7;
      id v8 = 0LL;
      *a2 = v7;
    }

    else
    {
      id v8 = 0LL;
    }
  }

  return v8;
}

NSMutableDictionary *copy_baseband_request_info(uint64_t a1, uint64_t a2, NSError **a3)
{
  if (!is_product_cellular())
  {
    id v8 =  createMobileActivationError( (uint64_t)"copy_baseband_request_info",  1979LL,  @"com.apple.MobileActivation.ErrorDomain",  -3LL,  0LL,  @"BasebandInfo does not exist for non cellular devices.");
    id v4 = 0LL;
    goto LABEL_11;
  }

  id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  if (!v4)
  {
    id v8 =  createMobileActivationError( (uint64_t)"copy_baseband_request_info",  1985LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create BasebandRequestInfo dictionary.");
LABEL_11:
    id v6 = 0LL;
    id v7 = 0LL;
    id v9 = 0LL;
    id v10 = 0LL;
    unsigned int v11 = 0LL;
    id v5 = 0LL;
    if (!a3) {
      goto LABEL_31;
    }
    goto LABEL_22;
  }

  id v5 = +[MATelephonyInfo sharedInstance](&OBJC_CLASS___MATelephonyInfo, "sharedInstance");
  if (!v5)
  {
    id v8 =  createMobileActivationError( (uint64_t)"copy_baseband_request_info",  1991LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy telephony instance.");
    id v6 = 0LL;
    id v7 = 0LL;
    id v9 = 0LL;
LABEL_20:
    id v10 = 0LL;
    goto LABEL_21;
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"ActivationRequiresActivationTicket");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"SupportsPostponement");
  id v6 = -[MATelephonyInfo copyPhoneNumberWithSlotID:error:](v5, "copyPhoneNumberWithSlotID:error:", 1LL, 0LL);
  if (v6) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v6, @"PhoneNumber");
  }
  if (-[MATelephonyInfo dualSIMCapable](v5, "dualSIMCapable"))
  {
    id v7 = -[MATelephonyInfo copyPhoneNumberWithSlotID:error:](v5, "copyPhoneNumberWithSlotID:error:", 2LL, 0LL);
    if (v7) {
      -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v7, @"PhoneNumber2");
    }
  }

  else
  {
    id v7 = 0LL;
  }

  id v22 = 0LL;
  id v9 = -[MATelephonyInfo copySIMStatusWithSlotID:error:](v5, "copySIMStatusWithSlotID:error:", 1LL, &v22);
  id v12 = v22;
  if (!v9)
  {
    id v8 =  createMobileActivationError( (uint64_t)"copy_baseband_request_info",  2015LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v12,  @"Failed to retrieve SIM status.");

    goto LABEL_20;
  }

  if (-[MATelephonyInfo dualSIMCapable](v5, "dualSIMCapable"))
  {
    id v21 = v12;
    id v10 = -[MATelephonyInfo copySIMStatusWithSlotID:error:](v5, "copySIMStatusWithSlotID:error:", 2LL, &v21);
    id v13 = v21;

    if (v10)
    {
      id v12 = v13;
      goto LABEL_24;
    }

    id v8 =  createMobileActivationError( (uint64_t)"copy_baseband_request_info",  2022LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v13,  @"Failed to retrieve SIM status.");

LABEL_21:
    unsigned int v11 = 0LL;
    if (!a3) {
      goto LABEL_31;
    }
    goto LABEL_22;
  }

  id v10 = 0LL;
LABEL_24:
  id v20 = v12;
  unsigned int v11 = copy_postponement_info(&v20);
  id v8 = (NSError *)v20;

  if (v11)
  {
    id v15 = -[NSMutableDictionary objectForKey:](v11, "objectForKey:", @"InternationalMobileEquipmentIdentity");

    if (v15)
    {
      -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v9, @"SIMStatus");
      -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v10, @"SIMStatus2");
      -[NSMutableDictionary removeObjectForKey:](v11, "removeObjectForKey:", kCTPostponementStatus);
      -[NSMutableDictionary removeObjectForKey:](v11, "removeObjectForKey:", kCTPostponementStatusErrorReason);
      -[NSMutableDictionary removeObjectForKey:](v11, "removeObjectForKey:", kCTPostponementInfoUniqueID);
      -[NSMutableDictionary addEntriesFromDictionary:](v4, "addEntriesFromDictionary:", v11);
      uint64_t v14 = v4;
      id v4 = v14;
      goto LABEL_32;
    }

    MobileActivationError = createMobileActivationError( (uint64_t)"copy_baseband_request_info",  2034LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Postponement info is missing required identifiers (%@ / %@) : %@",  v9,  v10,  @"InternationalMobileEquipmentIdentity");
  }

  else
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"copy_baseband_request_info",  2029LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v8,  @"Failed to retrieve postponement info (%@ / %@).",  v9,  v10);
  }

  id v17 = MobileActivationError;

  id v8 = v17;
  if (!a3)
  {
LABEL_31:
    uint64_t v14 = 0LL;
    goto LABEL_32;
  }

LABEL_22:
  id v8 = v8;
  uint64_t v14 = 0LL;
  *a3 = v8;
LABEL_32:
  id v18 = v14;

  return v18;
}

      __break(0x5519u);
    }
  }

  else if (a2)
  {
    if (a3) {
      *a3 = 0;
    }
    return 1LL;
  }

  return 0LL;
}

NSMutableDictionary *copyUCRTVersionInformation(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    uint64_t v14 =  createMobileActivationError( (uint64_t)"copyUCRTVersionInformation",  1269LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid input.");
    id v15 = 0LL;
    SecCertificateRef v5 = 0LL;
    goto LABEL_14;
  }

  id v20 = 0LL;
  SecCertificateRef v5 = copyUCRT(v3, (NSError **)&v20);
  id v6 = (NSError *)v20;
  if (!v5)
  {
    uint64_t v14 =  createMobileActivationError( (uint64_t)"copyUCRTVersionInformation",  1275LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v6,  @"Failed to copy UCRT.");

    id v15 = 0LL;
    goto LABEL_14;
  }

  id v21 = 0LL;
  id v7 = lockcrypto_query_certificate_properties((uint64_t)v5, @"1.2.840.113635.100.8.7", &v21);
  id v8 = (NSError *)v21;
  id v19 = a2;
  if (!v7)
  {
    id v16 =  createAndLogError( (uint64_t)"copy_ucrt_version_info",  122LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v8,  @"Failed to query UCRT device OS information.");

    id v10 = 0LL;
    id v9 = 0LL;
    id v8 = v16;
    goto LABEL_9;
  }

  id v9 = -[NSMutableDictionary objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", @"1400");
  id v10 = -[NSMutableDictionary objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", @"1403");
  unsigned int v11 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v9, @"ProductVersion");
  -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v10, @"BuildVersion");
  if (!v11)
  {
LABEL_9:
    id v8 = v8;
    unsigned int v11 = 0LL;
    int v12 = 1;
    id v13 = v8;
    goto LABEL_10;
  }

  int v12 = 0;
  id v13 = v6;
LABEL_10:

  uint64_t v14 = v13;
  if (v12)
  {
    id v17 =  createMobileActivationError( (uint64_t)"copyUCRTVersionInformation",  1281LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v14,  @"Failed to copy UCRT version info.");

    id v15 = 0LL;
    uint64_t v14 = v17;
  }

  else
  {
    id v15 = v11;
  }

  a2 = v19;
LABEL_14:
  if (a2 && !v15) {
    *a2 = v14;
  }
  if (v5) {
    CFRelease(v5);
  }

  return v15;
}

NSData *create_cert_request(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v36 = 0LL;
  uint64_t v37 = (id *)&v36;
  uint64_t v38 = 0x3032000000LL;
  v39 = __Block_byref_object_copy_;
  id v40 = __Block_byref_object_dispose_;
  id v41 = 0LL;
  uint64_t v30 = 0LL;
  id v31 = &v30;
  uint64_t v32 = 0x3032000000LL;
  id v33 = __Block_byref_object_copy_;
  id v34 = __Block_byref_object_dispose_;
  id v35 = 0LL;
  uint64_t v24 = 0LL;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x3032000000LL;
  BOOL v27 = __Block_byref_object_copy_;
  uint64_t v28 = __Block_byref_object_dispose_;
  id v29 = 0LL;
  if (create_cert_request_onceToken != -1) {
    dispatch_once(&create_cert_request_onceToken, &__block_literal_global_127);
  }
  id v4 = (dispatch_queue_s *)create_cert_request_queue;
  if (!create_cert_request_queue)
  {
    id v6 =  createMobileActivationError( (uint64_t)"create_cert_request",  1775LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create queue.");
LABEL_7:
    id v7 = v6;
    SecCertificateRef v5 = 0LL;
LABEL_8:
    id v8 = v37[5];
    v37[5] = v7;

    goto LABEL_9;
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3254779904LL;
  block[2] = __create_cert_request_block_invoke_2;
  block[3] = &__block_descriptor_64_e8_32s40r48r56r_e5_v8__0l;
  id v21 = &v30;
  id v20 = v3;
  id v22 = &v24;
  id v23 = &v36;
  dispatch_sync(v4, block);

  if (v37[5])
  {
    SecCertificateRef v5 = 0LL;
LABEL_9:
    id v9 = 0LL;
    goto LABEL_10;
  }

  int v12 = +[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID");
  SecCertificateRef v5 = v12;
  if (!v12)
  {
    id v6 =  createMobileActivationError( (uint64_t)"create_cert_request",  1815LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create UUID.");
    goto LABEL_7;
  }

  id v13 = -[NSUUID UUIDString](v12, "UUIDString");
  id v9 = v13;
  if (!v13)
  {
    id v7 =  createMobileActivationError( (uint64_t)"create_cert_request",  1821LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create UUID string.");
    goto LABEL_8;
  }

  uint64_t v14 = (void *)v31[5];
  id v15 = (void *)v25[5];
  id v16 = v37;
  id obj = v37[5];
  id v10 = lockcrypto_create_cert_request(v13, v14, v15, &obj);
  objc_storeStrong(v16 + 5, obj);
  if (v10) {
    goto LABEL_12;
  }
  id v17 =  createMobileActivationError( (uint64_t)"create_cert_request",  1827LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v37[5],  @"Failed to create cert request.");
LABEL_10:
  id v10 = 0LL;
  if (a2) {
    *a2 = v37[5];
  }
LABEL_12:
  _Block_object_dispose(&v24, 8);

  _Block_object_dispose(&v30, 8);
  _Block_object_dispose(&v36, 8);

  return v10;
}

void sub_10000B974( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void __create_cert_request_block_invoke(id a1)
{
  os_log_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.mobileactivationd.fairplay", v1);
  id v3 = (void *)create_cert_request_queue;
  create_cert_request_queue = (uint64_t)v2;
}

void __create_cert_request_block_invoke_2(uint64_t a1)
{
  id v2 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"PublicKey");
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  id v5 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"PrivateKey");
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  id v8 = isNSData(*(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
  if (!v8
    || (id v9 = v8,
        id v10 = isNSData(*(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL)),
        v10,
        v9,
        !v10))
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8LL);
    int v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = 0LL;

    uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = 0LL;

    uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v16 = *(void **)(v15 + 40);
    uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v24 = *(id *)(v17 + 40);
    id obj = v16;
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v23 = *(id *)(v18 + 40);
    char v19 = lockcrypto_genenerate_keypair(1024LL, &obj, (NSData **)&v24, &v23);
    objc_storeStrong((id *)(v15 + 40), obj);
    objc_storeStrong((id *)(v17 + 40), v24);
    objc_storeStrong((id *)(v18 + 40), v23);
    if ((v19 & 1) != 0)
    {
      data_ark_set( *(void **)(a1 + 32),  0LL,  @"PublicKey",  *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL),  0);
      data_ark_set( *(void **)(a1 + 32),  0LL,  @"PrivateKey",  *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL),  0);
    }

    else
    {
      id v20 =  createMobileActivationError( (uint64_t)"create_cert_request_block_invoke_2",  1789LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL),  @"Failed to generate public/or private key.");
      uint64_t v21 = *(void *)(*(void *)(a1 + 56) + 8LL);
      id v22 = *(void **)(v21 + 40);
      *(void *)(v21 + 40) = v20;
    }
  }
}

void __copy_helper_block_e8_32s40r48r56r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 8);
  _Block_object_assign((void *)(a1 + 48), *(const void **)(a2 + 48), 8);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 8);
}

void __destroy_helper_block_e8_32s40r48r56r(uint64_t a1)
{
}

uint64_t deliver_baseband_ticket(int a1, id a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v27 = v7;
  if (!v6 || !v7)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"deliver_baseband_ticket",  1854LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
LABEL_20:
    id v22 = MobileActivationError;
    id v9 = 0LL;
    uint64_t v18 = 0LL;
    id v12 = 0LL;
    goto LABEL_21;
  }

  if (([v7 isEqualToString:@"Activated"] & 1) == 0
    && ([v7 isEqualToString:@"FactoryActivated"] & 1) == 0)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"deliver_baseband_ticket",  1859LL,  @"com.apple.MobileActivation.ErrorDomain",  -8LL,  0LL,  @"Device is not activated: %@",  v7);
    goto LABEL_20;
  }

  id v9 = [v6 objectForKeyedSubscript:@"ActivationTicket"];
  id v10 = isNSString(v9);

  if (!v10)
  {
    id v11 = [v6 objectForKeyedSubscript:@"WildcardTicket"];

    id v9 = v11;
  }

  id v12 = isNSString(v9);

  if (!v12)
  {
    id v22 =  createMobileActivationError( (uint64_t)"deliver_baseband_ticket",  1872LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Account token missing activation ticket.");
    uint64_t v18 = 0LL;
LABEL_21:
    id v15 = 0LL;
    id v13 = 0LL;
    goto LABEL_22;
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v9, @"ActivationTicket");
  -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v7, @"ActivationState");
  id v13 = [v6 objectForKeyedSubscript:@"PhoneNumberNotificationURL"];
  if (v13) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  v13,  @"PhoneNumberNotificationURL");
  }
  id v12 = [v6 objectForKeyedSubscript:@"ActivityURL"];
  id v14 = isNSString(v12);

  if (v14) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v12, @"ActivityURL");
  }
  id v15 = [v6 objectForKeyedSubscript:@"PostponementInfo"];
  id v16 = isNSDictionary(v15);

  if (v16) {
    -[NSMutableDictionary addEntriesFromDictionary:](v8, "addEntriesFromDictionary:", v15);
  }
  uint64_t v17 = _CTServerConnectionCreate(kCFAllocatorDefault, 0LL, 0LL);
  uint64_t v18 = (const void *)v17;
  if (v17)
  {
    unint64_t v19 = _CTServerConnectionSetPostponementTicket(v17, v8);
    if (!HIDWORD(v19))
    {
      id v23 = v8;
      id v22 = 0LL;
      uint64_t v24 = 1LL;
LABEL_25:
      CFRelease(v18);
      uint64_t v25 = v24;
      goto LABEL_26;
    }

    id v20 = createMobileActivationError( (uint64_t)"deliver_baseband_ticket",  1902LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to issue baseband ticket: %d.%d",  v19,  HIDWORD(v19));
  }

  else
  {
    id v20 = createMobileActivationError( (uint64_t)"deliver_baseband_ticket",  1896LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to connect to CommCenter.");
  }

  id v22 = v20;
LABEL_22:
  id v23 = v8;
  if (a4) {
    *a4 = v22;
  }
  uint64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  if (v18) {
    goto LABEL_25;
  }
LABEL_26:

  return v25;
}

NSMutableDictionary *copy_postponement_info(void *a1)
{
  CFDictionaryRef theDict = 0LL;
  uint64_t v2 = _CTServerConnectionCreate(kCFAllocatorDefault, 0LL, 0LL);
  uint64_t v3 = (const void *)v2;
  if (!v2)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"copy_postponement_info",  1930LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to connect to CommCenter.");
LABEL_9:
    id v7 = MobileActivationError;
    id v8 = 0LL;
    id v9 = 0LL;
    if (!a1) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }

  uint64_t v4 = _CTServerConnectionCopyPostponementStatus(v2, &theDict);
  if (HIDWORD(v4)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = theDict == 0LL;
  }
  if (v5)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"copy_postponement_info",  1936LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy postponement status: %ld.%ld",  (int)v4,  v4 >> 32);
    goto LABEL_9;
  }

  id v10 = (id)CFDictionaryGetValue(theDict, kCTPostponementStatus);
  id v9 = v10;
  if (!v10)
  {
    id v11 = createMobileActivationError( (uint64_t)"copy_postponement_info",  1942LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"No postponement status in postponement info.");
LABEL_15:
    id v7 = v11;
    id v8 = 0LL;
    if (!a1) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }

  if ([v10 isEqualToString:kCTPostponementStatusError])
  {
    Value = CFDictionaryGetValue(theDict, kCTPostponementStatusErrorReason);
    id v11 = createMobileActivationError( (uint64_t)"copy_postponement_info",  1947LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"CommCenter reported an error: %@",  Value);
    goto LABEL_15;
  }

  id v8 =  +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  theDict);
  id v7 = 0LL;
  if (!a1) {
    goto LABEL_20;
  }
LABEL_18:
  if (!v8) {
    *a1 = v7;
  }
LABEL_20:
  if (theDict) {
    CFRelease(theDict);
  }
  CFDictionaryRef theDict = 0LL;
  if (v3) {
    CFRelease(v3);
  }

  return v8;
}

NSDictionary *create_activation_info(void *a1, void *a2, void *a3)
{
  uint64_t v4 = a1;
  id v5 = a2;
  memset(v89, 0, 256);
  unsigned int v83 = 256;
  bzero(v88, 0x1000uLL);
  unsigned int v82 = 4096;
  CFErrorRef error = 0LL;
  id v61 = v5;
  unsigned __int8 v62 = v4;
  if (!v4)
  {
    id v9 =  createMobileActivationError( (uint64_t)"create_activation_info",  2093LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    id v8 = 0LL;
    id v10 = 0LL;
    id v11 = 0LL;
    id v66 = 0LL;
    id v67 = 0LL;
    id v68 = 0LL;
    id v64 = 0LL;
    v65 = 0LL;
    id v12 = 0LL;
    id v13 = 0LL;
    id v14 = 0LL;
    id v15 = 0LL;
    id v60 = 0LL;
    goto LABEL_7;
  }

  if (v5)
  {
    id v6 = [v5 objectForKeyedSubscript:@"UseCommittedUIK"];
    id v7 = v6;
    if (v6)
    {
      id v8 = (NSDictionary *)isNSNumber(v6);

      if (!v8)
      {
        id v60 = v7;
        id v9 =  createMobileActivationError( (uint64_t)"create_activation_info",  2100LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid option (%@).",  @"UseCommittedUIK");
        id v10 = 0LL;
        id v11 = 0LL;
        id v66 = 0LL;
        id v67 = 0LL;
        id v68 = 0LL;
        id v64 = 0LL;
        v65 = 0LL;
        id v12 = 0LL;
        id v13 = 0LL;
        id v14 = 0LL;
        id v15 = 0LL;
        uint64_t v4 = 0LL;
LABEL_7:
        id v59 = 0LL;
LABEL_29:
        uint64_t v63 = 0LL;
        CFDataRef v36 = 0LL;
        goto LABEL_30;
      }
    }
  }

  else
  {
    id v7 = 0LL;
  }

  id v16 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v17 = [v16 copyAnswer:@"HasPKA"];

  id v18 = isNSNumber(v17);
  id v59 = v17;
  id v60 = v7;
  if (!v18)
  {
    id v9 =  createMobileActivationError( (uint64_t)"create_activation_info",  2107LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve PKA state.");
LABEL_27:
    id v8 = 0LL;
    id v10 = 0LL;
    goto LABEL_28;
  }

  else {
    uint64_t v19 = 3LL;
  }
  id v80 = 0LL;
  id v10 = (NSMutableDictionary *)security_copy_system_key(v19, 0LL, &v80);
  id v20 = v80;
  if (!v10)
  {
    id v9 =  createMobileActivationError( (uint64_t)"create_activation_info",  2115LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v20,  @"Failed to copy UIK.");

    id v8 = 0LL;
LABEL_28:
    id v11 = 0LL;
    id v66 = 0LL;
    id v67 = 0LL;
    id v68 = 0LL;
    id v64 = 0LL;
    v65 = 0LL;
    id v12 = 0LL;
    id v13 = 0LL;
    id v14 = 0LL;
    id v15 = 0LL;
    uint64_t v4 = 0LL;
    goto LABEL_29;
  }

  SecAccessControlRef v21 = SecAccessControlCreateWithFlags(0LL, kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate, 0x40000000uLL, &error);
  if (!v21)
  {
    id v9 =  createMobileActivationError( (uint64_t)"create_activation_info",  2124LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to create access control.");

    CFRelease(v10);
    goto LABEL_27;
  }

  SecAccessControlRef v22 = v21;
  id v79 = v20;
  id v12 = (__SecKey *)createReferenceKeyBlob(v21, (char)[v17 BOOLValue], 0, &v79);
  id v23 = v79;

  SecAccessControlRef cf = v22;
  id v57 = v10;
  id v58 = v12;
  if (!v12)
  {
    id v9 =  createMobileActivationError( (uint64_t)"create_activation_info",  2130LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v23,  @"Failed to create ref key.");
    v39 = v23;
LABEL_38:

    id v8 = 0LL;
    id v10 = 0LL;
    id v11 = 0LL;
    id v66 = 0LL;
    id v67 = 0LL;
    id v68 = 0LL;
    id v64 = 0LL;
    v65 = 0LL;
    id v13 = 0LL;
    id v14 = 0LL;
    id v15 = 0LL;
    uint64_t v4 = 0LL;
    uint64_t v63 = 0LL;
LABEL_48:
    CFDataRef v36 = 0LL;
    goto LABEL_49;
  }

  id v78 = v23;
  id v12 = (__SecKey *)security_create_attestation((uint64_t)v12, (uint64_t)v10, (NSError **)&v78);
  id v24 = v78;

  if (!v12)
  {
    id v9 =  createMobileActivationError( (uint64_t)"create_activation_info",  2138LL,  @"com.apple.MobileActivation.ErrorDomain",  -11LL,  v24,  @"Failed to attest ref key to UIK.");
    v39 = v24;
    goto LABEL_38;
  }

  id v77 = v24;
  id v13 = copy_uik_certificate_info(v5, &v77);
  id v25 = v77;

  uint64_t v63 = v12;
  if (!v13)
  {
    id v9 =  createMobileActivationError( (uint64_t)"create_activation_info",  2146LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v25,  @"Failed to copy UIK certification info.");

    id v8 = 0LL;
    id v10 = 0LL;
    id v11 = 0LL;
    id v66 = 0LL;
    id v67 = 0LL;
    id v68 = 0LL;
    id v64 = 0LL;
    v65 = 0LL;
    id v12 = 0LL;
LABEL_45:
    id v14 = 0LL;
LABEL_46:
    id v15 = 0LL;
LABEL_47:
    uint64_t v4 = 0LL;
    goto LABEL_48;
  }

  id v76 = v25;
  id v27 = copy_device_id_info(v26, (NSError **)&v76);
  id v28 = v76;

  v65 = v13;
  if (!v27)
  {
    id v9 =  createMobileActivationError( (uint64_t)"create_activation_info",  2154LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v28,  @"Failed to copy device id info.");

    id v8 = 0LL;
    id v10 = 0LL;
    id v11 = 0LL;
    id v66 = 0LL;
LABEL_42:
    id v68 = 0LL;
LABEL_43:
    id v64 = 0LL;
    id v67 = 0LL;
    id v12 = 0LL;
LABEL_44:
    id v13 = 0LL;
    goto LABEL_45;
  }

  id v66 = v27;
  id v75 = v28;
  id v30 = copy_device_info(v29, (NSError **)&v75);
  id v31 = v75;

  id v68 = v30;
  if (!v30)
  {
    id v9 =  createMobileActivationError( (uint64_t)"create_activation_info",  2162LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v31,  @"Failed to copy device info.");

    id v8 = 0LL;
    id v10 = 0LL;
    id v11 = 0LL;
    goto LABEL_42;
  }

  id v74 = v31;
  uint64_t v32 = copy_activation_request_info(v4, v5, &v74);
  id v33 = v74;

  if (!v32)
  {
    id v9 =  createMobileActivationError( (uint64_t)"create_activation_info",  2170LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v33,  @"Failed to copy activation request info.");

    id v8 = 0LL;
    id v10 = 0LL;
    id v11 = 0LL;
    goto LABEL_43;
  }

  BOOL v34 = is_product_cellular();
  id v64 = v32;
  if (v34)
  {
    id v73 = v33;
    id v15 = copy_baseband_request_info(v34, v35, (NSError **)&v73);
    id v53 = v73;

    id v67 = v15;
    if (!v15)
    {
      id v9 =  createMobileActivationError( (uint64_t)"create_activation_info",  2179LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v53,  @"Failed to copy baseband request info.");

      id v8 = 0LL;
      id v10 = 0LL;
      id v11 = 0LL;
      id v67 = 0LL;
      id v12 = 0LL;
      id v13 = 0LL;
      id v14 = 0LL;
      goto LABEL_47;
    }

    id v33 = v53;
  }

  else
  {
    id v67 = 0LL;
  }

  id v72 = v33;
  id v12 = (__SecKey *)copy_regulatory_images_request_info((NSError **)&v72);
  id v40 = v72;

  if (!v12)
  {
    id v9 =  createMobileActivationError( (uint64_t)"create_activation_info",  2188LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v40,  @"Failed to copy regulatory images request info.");

    id v8 = 0LL;
    id v10 = 0LL;
    id v11 = 0LL;
    goto LABEL_44;
  }

  id v13 = copy_software_update_request_info();
  id v41 = v40;

  if (!v13)
  {
    id v9 =  createMobileActivationError( (uint64_t)"create_activation_info",  2196LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v41,  @"Failed to copy managed update request info.");

    id v8 = 0LL;
    id v10 = 0LL;
    id v11 = 0LL;
    goto LABEL_45;
  }

  id v71 = v41;
  id v14 = create_cert_request(v4, &v71);
  id v42 = v71;

  if (!v14)
  {
    id v9 =  createMobileActivationError( (uint64_t)"create_activation_info",  2203LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v42,  @"Failed to create certificate request.");

    id v8 = 0LL;
    id v10 = 0LL;
    id v11 = 0LL;
    goto LABEL_46;
  }

  v86[0] = @"DeviceID";
  v86[1] = @"DeviceInfo";
  v87[0] = v66;
  v87[1] = v68;
  v86[2] = @"ActivationRequestInfo";
  v86[3] = @"RegulatoryImages";
  v87[2] = v32;
  v87[3] = v12;
  v86[4] = @"SoftwareUpdateRequestInfo";
  v86[5] = @"DeviceCertRequest";
  v87[4] = v13;
  v87[5] = v14;
  v86[6] = @"UIKCertification";
  v87[6] = v65;
  id v43 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v87,  v86,  7LL);
  id v10 =  +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v43);

  if (v67) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  v67,  @"BasebandRequestInfo");
  }
  id v44 = [v5 objectForKeyedSubscript:@"ActivationLockInfo"];
  id v45 = isNSString(v44);

  if (v45)
  {
    id v46 = [v5 objectForKeyedSubscript:@"ActivationLockInfo"];
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  v46,  @"ActivationLockInfo");
  }

  id v70 = 0LL;
  id v11 =  +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v10,  100LL,  0LL,  &v70);
  id v9 = (NSError *)v70;

  if (!v11)
  {
    v55 =  createMobileActivationError( (uint64_t)"create_activation_info",  2232LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v9,  @"Could not convert dictionary to xml data.");

    id v8 = 0LL;
    id v15 = 0LL;
    uint64_t v4 = 0LL;
    CFDataRef v36 = 0LL;
LABEL_73:
    id v9 = v55;
    goto LABEL_49;
  }

  CFDataRef v36 = SecKeyCreateSignature(v58, kSecKeyAlgorithmECDSASignatureMessageX962SHA256, (CFDataRef)v11, &error);
  if (!v36)
  {
    v55 =  createMobileActivationError( (uint64_t)"create_activation_info",  2240LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to sign activation data with ref key.");

    id v8 = 0LL;
    id v15 = 0LL;
LABEL_72:
    uint64_t v4 = 0LL;
    goto LABEL_73;
  }

  id v15 = (NSMutableDictionary *)malloc(0x23uLL);
  if (!v15)
  {
    v55 =  createMobileActivationError( (uint64_t)"create_activation_info",  2248LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate sha1 digest memory.");

    id v8 = 0LL;
    goto LABEL_72;
  }

  id v11 = v11;
  id v54 = v15;
  if (CCDigest( 8LL,  -[NSData bytes](v11, "bytes"),  -[NSData length](v11, "length"),  (char *)&v15[1].super.super.isa + 7))
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"create_activation_info",  2258LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to digest data.");
LABEL_76:
    id v52 = MobileActivationError;

    id v8 = 0LL;
    id v15 = 0LL;
LABEL_77:
    uint64_t v4 = 0LL;
    goto LABEL_78;
  }

  v15->super.super.isa = (Class)0xE2B050609302130LL;
  LODWORD(v15[1].super.super.isa) = 85590531;
  WORD2(v15[1].super.super.isa) = 1024;
  BYTE6(v15[1].super.super.isa) = 20;
  wyjYwk((uint64_t)v15, 35LL, (uint64_t)v89, (uint64_t)&v83, (uint64_t)v88, (uint64_t)&v82);
  if (v48)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"create_activation_info",  2291LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to compute activation signature: %ld",  v48);
    goto LABEL_76;
  }

  id v49 = objc_alloc(&OBJC_CLASS___NSData);
  id v15 = -[NSData initWithBytes:length:](v49, "initWithBytes:length:", v89, v83);
  if (!v15)
  {
    id v52 =  createMobileActivationError( (uint64_t)"create_activation_info",  2298LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to encode activation signature.");

    id v8 = 0LL;
    goto LABEL_77;
  }

  id v50 = objc_alloc(&OBJC_CLASS___NSData);
  id v51 = -[NSData initWithBytes:length:](v50, "initWithBytes:length:", v88, v82);
  uint64_t v4 = v51;
  if (v51)
  {
    v84[0] = @"ActivationInfoXML";
    v84[1] = @"FairPlaySignature";
    v85[0] = v11;
    v85[1] = v15;
    v84[2] = @"FairPlayCertChain";
    v84[3] = @"RKCertification";
    int v85[2] = v51;
    v85[3] = v63;
    v84[4] = @"RKSignature";
    v85[4] = v36;
    id v8 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v85,  v84,  5LL);
    goto LABEL_79;
  }

  id v52 =  createMobileActivationError( (uint64_t)"create_activation_info",  2304LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to encode certificate chain.");

  id v8 = 0LL;
LABEL_78:
  id v9 = v52;
LABEL_79:
  free(v54);
LABEL_49:
  CFRelease(cf);
  CFRelease(v57);
  if (v58) {
    CFRelease(v58);
  }
LABEL_30:
  if (error) {
    CFRelease(error);
  }
  CFErrorRef error = 0LL;
  if (a3 && !v8) {
    *a3 = v9;
  }
  uint64_t v37 = v8;

  return v37;
}

NSDictionary *copy_activation_request_info(void *a1, id a2, void *a3)
{
  id v5 = a2;
  id v6 = data_ark_copy(a1, 0LL, @"ActivationState");
  if (v6)
  {
    id v7 = [v5 objectForKeyedSubscript:@"ActivationRandomness"];
    id v8 = isNSString(v7);

    if (v8)
    {
      v14[0] = @"FMiPAccountExists";
      id v9 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", FindMyDeviceIsEnabled(0LL));
      v15[0] = v9;
      v15[1] = v6;
      v14[1] = @"ActivationState";
      v14[2] = @"ActivationRandomness";
      v15[2] = v7;
      id v10 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v15,  v14,  3LL);

      id v11 = 0LL;
      if (!a3) {
        goto LABEL_10;
      }
    }

    else
    {
      id v11 =  createMobileActivationError( (uint64_t)"copy_activation_request_info",  1740LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid nonce.");
      id v10 = 0LL;
      if (!a3) {
        goto LABEL_10;
      }
    }
  }

  else
  {
    id v11 =  createMobileActivationError( (uint64_t)"copy_activation_request_info",  1731LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to lookup activation state.");
    id v10 = 0LL;
    id v7 = 0LL;
    if (!a3) {
      goto LABEL_10;
    }
  }

  if (!v10) {
    *a3 = v11;
  }
LABEL_10:
  id v12 = v10;

  return v12;
}

id copy_regulatory_images_request_info(NSError **a1)
{
  id v2 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v11 = 0LL;
  id v3 = [v2 copyRegulatoryImagesInfo:&v11];
  id v4 = v11;

  if (v3) {
    BOOL v5 = v4 == 0LL;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    id v8 = v3;
    id v7 = 0LL;
  }

  else
  {
    id v6 =  createMobileActivationError( (uint64_t)"copy_regulatory_images_request_info",  1700LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to regulatory images info: %@",  v4);
    id v7 = v6;
    if (a1)
    {
      id v7 = v6;
      id v8 = 0LL;
      *a1 = v7;
    }

    else
    {
      id v8 = 0LL;
    }
  }

  id v9 = v8;

  return v9;
}

NSDictionary *copy_software_update_request_info()
{
  os_log_t v1 = @"Enabled";
  id v2 = &__kCFBooleanTrue;
  return   +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v2,  &v1,  1LL);
}

NSDictionary *create_activation_info_legacy(void *a1, void *a2, void *a3)
{
  id v4 = a1;
  id v5 = a2;
  __int128 v55 = 0uLL;
  int v56 = 0;
  memset(v54, 0, 35);
  memset(v53, 0, sizeof(v53));
  unsigned int v49 = 256;
  bzero(v52, 0x1000uLL);
  unsigned int v48 = 4096;
  id v36 = v5;
  uint64_t v37 = v4;
  if (!v4)
  {
    id v18 =  createMobileActivationError( (uint64_t)"create_activation_info_legacy",  2358LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    id v7 = 0LL;
    id v8 = 0LL;
    uint64_t v19 = 0LL;
LABEL_13:
    id v20 = 0LL;
    SecAccessControlRef v21 = 0LL;
    uint64_t v38 = 0LL;
    v39 = 0LL;
    id v11 = 0LL;
LABEL_14:
    id v16 = 0LL;
LABEL_15:
    id v22 = 0LL;
    goto LABEL_16;
  }

  id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v7 = v6;
  if (!v6)
  {
    id v18 =  createMobileActivationError( (uint64_t)"create_activation_info_legacy",  2365LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create dictionary.");
    id v8 = 0LL;
LABEL_12:
    uint64_t v19 = 0LL;
    id v4 = 0LL;
    goto LABEL_13;
  }

  id v47 = 0LL;
  id v8 = (NSData *)copy_device_id_info((uint64_t)v6, (NSError **)&v47);
  id v9 = v47;
  id v10 = v9;
  if (!v8)
  {
    id v18 =  createMobileActivationError( (uint64_t)"create_activation_info_legacy",  2373LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v9,  @"Failed to copy device id info.");

    goto LABEL_12;
  }

  v39 = v8;
  id v46 = v9;
  id v11 = (NSDictionary *)copy_device_info((uint64_t)v9, (NSError **)&v46);
  id v12 = v46;

  if (!v11)
  {
    id v18 =  createMobileActivationError( (uint64_t)"create_activation_info_legacy",  2381LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v12,  @"Failed to copy device info.");

    id v8 = 0LL;
    uint64_t v19 = 0LL;
    id v4 = 0LL;
    id v20 = 0LL;
    SecAccessControlRef v21 = 0LL;
    uint64_t v38 = 0LL;
    goto LABEL_14;
  }

  uint64_t v38 = v11;
  id v45 = v12;
  id v11 = copy_activation_request_info(v4, v5, &v45);
  id v13 = v45;

  if (!v11)
  {
    id v18 =  createMobileActivationError( (uint64_t)"create_activation_info_legacy",  2389LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v13,  @"Failed to copy activation request info.");

    id v8 = 0LL;
    uint64_t v19 = 0LL;
    id v4 = 0LL;
    id v20 = 0LL;
    SecAccessControlRef v21 = 0LL;
    goto LABEL_14;
  }

  BOOL v14 = is_product_cellular();
  if (!v14)
  {
    id v16 = 0LL;
    goto LABEL_23;
  }

  id v44 = v13;
  id v16 = copy_baseband_request_info(v14, v15, (NSError **)&v44);
  id v17 = v44;

  if (!v16)
  {
    id v18 =  createMobileActivationError( (uint64_t)"create_activation_info_legacy",  2398LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v17,  @"Failed to copy baseband request info.");

    id v8 = 0LL;
    uint64_t v19 = 0LL;
    id v4 = 0LL;
    id v20 = 0LL;
    SecAccessControlRef v21 = 0LL;
    goto LABEL_15;
  }

  id v13 = v17;
LABEL_23:
  id v43 = v13;
  id v22 = copy_regulatory_images_request_info((NSError **)&v43);
  id v25 = v43;

  if (v22)
  {
    id v42 = v25;
    uint64_t v19 = create_cert_request(v4, &v42);
    id v26 = v42;

    if (v19)
    {
      -[NSMutableDictionary addEntriesFromDictionary:](v7, "addEntriesFromDictionary:", v39);
      -[NSMutableDictionary addEntriesFromDictionary:](v7, "addEntriesFromDictionary:", v38);
      -[NSMutableDictionary addEntriesFromDictionary:](v7, "addEntriesFromDictionary:", v11);
      -[NSMutableDictionary addEntriesFromDictionary:](v7, "addEntriesFromDictionary:", v22);
      if (v16) {
        -[NSMutableDictionary addEntriesFromDictionary:](v7, "addEntriesFromDictionary:", v16);
      }
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  v19,  @"DeviceCertRequest");
      id v41 = 0LL;
      id v8 =  +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v7,  100LL,  0LL,  &v41);
      id v18 = (NSError *)v41;

      if (v8)
      {
        id v8 = v8;
        if (CCDigest(8LL, -[NSData bytes](v8, "bytes"), -[NSData length](v8, "length"), &v55))
        {
          id v27 = @"Failed to digest data.";
          uint64_t v28 = 2442LL;
        }

        else
        {
          *(void *)&v54[0] = 0xE2B050609302130LL;
          DWORD2(v54[0]) = 85590531;
          WORD6(v54[0]) = 1024;
          BYTE14(v54[0]) = 20;
          *(_OWORD *)((char *)v54 + 15) = v55;
          *(_DWORD *)((char *)&v54[1] + 15) = v56;
          wyjYwk((uint64_t)v54, 35LL, (uint64_t)v53, (uint64_t)&v49, (uint64_t)v52, (uint64_t)&v48);
          if (!v30)
          {
            id v31 = objc_alloc(&OBJC_CLASS___NSData);
            id v4 = -[NSData initWithBytes:length:](v31, "initWithBytes:length:", v53, v49);
            if (v4)
            {
              uint64_t v32 = objc_alloc(&OBJC_CLASS___NSData);
              id v33 = -[NSData initWithBytes:length:](v32, "initWithBytes:length:", v52, v48);
              id v20 = v33;
              if (v33)
              {
                v50[0] = @"ActivationInfoXML";
                v50[1] = @"FairPlaySignature";
                v51[0] = v8;
                v51[1] = v4;
                v50[2] = @"FairPlayCertChain";
                v50[3] = @"ActivationInfoComplete";
                v51[2] = v33;
                v51[3] = &__kCFBooleanTrue;
                SecAccessControlRef v21 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v51,  v50,  4LL);
                goto LABEL_16;
              }

              uint64_t v35 =  createMobileActivationError( (uint64_t)"create_activation_info_legacy",  2489LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to encode certificate chain.");

              goto LABEL_40;
            }

            uint64_t v35 =  createMobileActivationError( (uint64_t)"create_activation_info_legacy",  2483LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to encode activation signature.");

LABEL_39:
            id v20 = 0LL;
LABEL_40:
            SecAccessControlRef v21 = 0LL;
            id v18 = v35;
            goto LABEL_16;
          }

          uint64_t v34 = v30;
          id v27 = @"Failed to compute activation signature: %ld";
          uint64_t v28 = 2476LL;
        }

        MobileActivationError = createMobileActivationError( (uint64_t)"create_activation_info_legacy",  v28,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  v27,  v34);
      }

      else
      {
        MobileActivationError = createMobileActivationError( (uint64_t)"create_activation_info_legacy",  2433LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v18,  @"Could not convert dictionary to xml data.");
      }

      uint64_t v35 = MobileActivationError;

      id v4 = 0LL;
      goto LABEL_39;
    }

    id v18 =  createMobileActivationError( (uint64_t)"create_activation_info_legacy",  2414LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v26,  @"Failed to create certificate request.");

    id v8 = 0LL;
  }

  else
  {
    id v18 =  createMobileActivationError( (uint64_t)"create_activation_info_legacy",  2407LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v25,  @"Failed to copy regulatory images request info.");

    id v8 = 0LL;
    uint64_t v19 = 0LL;
  }

  id v4 = 0LL;
  id v20 = 0LL;
  SecAccessControlRef v21 = 0LL;
LABEL_16:
  if (a3 && !v21) {
    *a3 = v18;
  }
  id v23 = v21;

  return v23;
}

NSDictionary *create_baseband_info( void *a1, __SecKey *a2, __SecCertificate *a3, __SecCertificate *a4, void *a5, void *a6)
{
  id v10 = a1;
  CFErrorRef error = 0LL;
  id v40 = a5;
  id v41 = v10;
  if (!v10 || !a2 || !a3 || !a4)
  {
    uint64_t v29 =  createMobileActivationError( (uint64_t)"create_baseband_info",  2527LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
    uint64_t v32 = 0LL;
    id v27 = 0LL;
    uint64_t v28 = 0LL;
    id v13 = 0LL;
    CFDataRef v17 = 0LL;
    id v18 = 0LL;
    CFDataRef v31 = 0LL;
    BOOL v14 = 0LL;
    CFDataRef v38 = 0LL;
    v39 = 0LL;
    id v11 = 0LL;
    goto LABEL_31;
  }

  id v11 = objc_alloc_init(&OBJC_CLASS___NSMutableData);
  if (!v11)
  {
    uint64_t v29 =  createMobileActivationError( (uint64_t)"create_baseband_info",  2535LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create data.");
    uint64_t v32 = 0LL;
    id v27 = 0LL;
    uint64_t v28 = 0LL;
    id v13 = 0LL;
LABEL_20:
    CFDataRef v17 = 0LL;
    id v18 = 0LL;
    CFDataRef v31 = 0LL;
    BOOL v14 = 0LL;
    CFDataRef v38 = 0LL;
    v39 = 0LL;
    goto LABEL_31;
  }

  CFDataRef v12 = SecCertificateCopyData(a3);
  id v13 = (NSMutableDictionary *)v12;
  if (!v12)
  {
    uint64_t v29 =  createMobileActivationError( (uint64_t)"create_baseband_info",  2541LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy certificate data.");
    uint64_t v32 = 0LL;
    id v27 = 0LL;
    uint64_t v28 = 0LL;
    goto LABEL_20;
  }

  id v48 = 0LL;
  BOOL v14 = lockcrypto_create_pem(v12, "CERTIFICATE", &v48);
  id v15 = v48;
  v39 = v13;
  if (!v14)
  {
    uint64_t v29 =  createMobileActivationError( (uint64_t)"create_baseband_info",  2547LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create PEM data.");

    uint64_t v32 = 0LL;
    id v27 = 0LL;
    uint64_t v28 = 0LL;
    id v13 = 0LL;
    CFDataRef v17 = 0LL;
LABEL_23:
    id v18 = 0LL;
    CFDataRef v31 = 0LL;
    CFDataRef v38 = 0LL;
    goto LABEL_31;
  }

  -[NSMutableData appendData:](v11, "appendData:", v14);
  CFDataRef v16 = SecCertificateCopyData(a4);
  CFDataRef v17 = v16;
  if (!v16)
  {
    uint64_t v29 =  createMobileActivationError( (uint64_t)"create_baseband_info",  2555LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy certificate data.");

    uint64_t v32 = 0LL;
    id v27 = 0LL;
    uint64_t v28 = 0LL;
    id v13 = 0LL;
    goto LABEL_23;
  }

  id v47 = v15;
  id v18 = lockcrypto_create_pem(v16, "CERTIFICATE", &v47);
  id v19 = v47;

  CFDataRef v38 = v17;
  if (!v18)
  {
    uint64_t v29 =  createMobileActivationError( (uint64_t)"create_baseband_info",  2561LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create PEM data.");

    uint64_t v32 = 0LL;
    id v27 = 0LL;
    uint64_t v28 = 0LL;
    id v13 = 0LL;
    CFDataRef v17 = 0LL;
    CFDataRef v31 = 0LL;
    BOOL v14 = 0LL;
    goto LABEL_31;
  }

  id v20 = [@"\n" dataUsingEncoding:4];
  -[NSMutableData appendData:](v11, "appendData:", v20);

  id v46 = v19;
  CFDataRef v17 = (CFDataRef) copy_device_id_info( (uint64_t)-[NSMutableData appendData:](v11, "appendData:", v18),  (NSError **)&v46);
  id v21 = v46;

  if (!v17)
  {
    uint64_t v29 =  createMobileActivationError( (uint64_t)"create_baseband_info",  2572LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v21,  @"Failed to copy device id info.");

    uint64_t v32 = 0LL;
    id v27 = 0LL;
    uint64_t v28 = 0LL;
    id v13 = 0LL;
    BOOL v14 = v18;
    id v18 = 0LL;
    CFDataRef v31 = 0LL;
    goto LABEL_31;
  }

  uint64_t v37 = v18;
  id v45 = v21;
  id v18 = (NSData *)copy_device_info(v22, (NSError **)&v45);
  id v23 = v45;

  if (!v18)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"create_baseband_info",  2580LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v23,  @"Failed to copy device info.");
LABEL_28:
    uint64_t v29 = MobileActivationError;

    uint64_t v32 = 0LL;
    id v27 = 0LL;
    uint64_t v28 = 0LL;
    id v13 = 0LL;
LABEL_29:
    CFDataRef v31 = 0LL;
    goto LABEL_30;
  }

  BOOL v24 = is_product_cellular();
  if (!v24)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"create_baseband_info",  2587LL,  @"com.apple.MobileActivation.ErrorDomain",  -3LL,  v23,  @"Device doesn't support telephony.");
    goto LABEL_28;
  }

  id v44 = v23;
  id v13 = copy_baseband_request_info(v24, v25, (NSError **)&v44);
  id v26 = v44;

  if (!v13)
  {
    uint64_t v29 =  createMobileActivationError( (uint64_t)"create_baseband_info",  2593LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v26,  @"Failed to copy baseband request info.");

    uint64_t v32 = 0LL;
    id v27 = 0LL;
    uint64_t v28 = 0LL;
    goto LABEL_29;
  }

  v52[0] = @"BasebandRequestInfo";
  v52[1] = @"DeviceID";
  v53[0] = v13;
  v53[1] = v17;
  v52[2] = @"DeviceInfo";
  v53[2] = v18;
  id v27 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v53,  v52,  3LL);
  id v43 = 0LL;
  uint64_t v28 =  +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v27,  100LL,  0LL,  &v43);
  uint64_t v29 = (NSError *)v43;

  if (!v28)
  {
    id v36 =  createMobileActivationError( (uint64_t)"create_baseband_info",  2606LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v29,  @"Could not convert dictionary to xml data.");

    uint64_t v32 = 0LL;
    CFDataRef v31 = 0LL;
LABEL_40:
    uint64_t v29 = v36;
    goto LABEL_30;
  }

  CFDataRef v30 = SecKeyCreateSignature(a2, kSecKeyAlgorithmECDSASignatureMessageX962SHA256, (CFDataRef)v28, &error);
  CFDataRef v31 = v30;
  if (!v30)
  {
    id v36 =  createMobileActivationError( (uint64_t)"create_baseband_info",  2614LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to sign baseband data with ref key.");

    uint64_t v32 = 0LL;
    goto LABEL_40;
  }

  v50[0] = @"ActivationInfoXML";
  v50[1] = @"RKCertification";
  v51[0] = v28;
  v51[1] = v11;
  v50[2] = @"RKSignature";
  v51[2] = v30;
  uint64_t v32 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v51,  v50,  3LL);
LABEL_30:
  BOOL v14 = v37;
LABEL_31:
  if (error) {
    CFRelease(error);
  }
  CFErrorRef error = 0LL;
  if (a6 && !v32) {
    *a6 = v29;
  }
  uint64_t v34 = v32;

  return v34;
}

uint64_t valid_ucrt_and_uik_legacy(uint64_t a1, uint64_t *a2, void *a3)
{
  if (!a1 || !a2)
  {
    id v9 =  createMobileActivationError( (uint64_t)"valid_ucrt_and_uik_legacy",  2866LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
    id v5 = 0LL;
    goto LABEL_10;
  }

  id v17 = 0LL;
  id v5 = libaks_ref_key_get_public(a2, (NSError **)&v17);
  id v6 = v17;
  if (!v5)
  {
    id v9 =  createMobileActivationError( (uint64_t)"valid_ucrt_and_uik_legacy",  2874LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v6,  @"Failed to retrieve UIK public key.");

LABEL_10:
    id v8 = 0LL;
    CFDataRef v10 = 0LL;
    if (!a3) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }

  uint64_t v18 = a1;
  id v7 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v18, 1LL);
  id v16 = v6;
  id v8 = lockcrypto_extract_public(v7, (NSError **)&v16);
  id v9 = (NSError *)v16;

  if (v8)
  {
    CFDataRef v10 = SecKeyCopyExternalRepresentation(v8, 0LL);
    if (v10)
    {
      if (-[NSData isEqualToData:](v5, "isEqualToData:", v10))
      {
        uint64_t v11 = 1LL;
LABEL_13:
        CFRelease(v8);
        uint64_t v12 = v11;
        goto LABEL_14;
      }

      MobileActivationError = createMobileActivationError( (uint64_t)"valid_ucrt_and_uik_legacy",  2895LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"UCRT public key does not match UIK public key.");
    }

    else
    {
      MobileActivationError = createMobileActivationError( (uint64_t)"valid_ucrt_and_uik_legacy",  2888LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to encode UCRT public key as data.");
    }

    BOOL v14 = MobileActivationError;
  }

  else
  {
    BOOL v14 =  createMobileActivationError( (uint64_t)"valid_ucrt_and_uik_legacy",  2882LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v9,  @"Failed to retrieve UCRT public key.");

    CFDataRef v10 = 0LL;
  }

  id v9 = v14;
  if (a3) {
LABEL_11:
  }
    *a3 = v9;
LABEL_12:
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  if (v8) {
    goto LABEL_13;
  }
LABEL_14:

  return v12;
}

uint64_t valid_ucrt_and_uik(__SecCertificate *a1, SecKeyRef key, NSError **a3)
{
  id v4 = a1;
  CFErrorRef error = 0LL;
  if (!a1)
  {
    CFDataRef v10 =  createMobileActivationError( (uint64_t)"valid_ucrt_and_uik",  2931LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid ucrt.");
    CFDataRef v7 = 0LL;
    id v6 = 0LL;
    goto LABEL_14;
  }

  if (!key)
  {
    CFDataRef v10 =  createMobileActivationError( (uint64_t)"valid_ucrt_and_uik",  2943LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid UIK.");
    CFDataRef v7 = 0LL;
    id v6 = 0LL;
LABEL_13:
    id v4 = 0LL;
    goto LABEL_14;
  }

  id v5 = SecKeyCopyPublicKey(key);
  id v6 = v5;
  if (!v5)
  {
    CFDataRef v10 =  createMobileActivationError( (uint64_t)"valid_ucrt_and_uik",  2951LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy UIK public key.");
    CFDataRef v7 = 0LL;
    goto LABEL_13;
  }

  CFDataRef v7 = SecKeyCopyExternalRepresentation(v5, &error);
  if (!v7)
  {
    CFDataRef v10 =  createMobileActivationError( (uint64_t)"valid_ucrt_and_uik",  2957LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to copy UIK public key buffer.");
    goto LABEL_13;
  }

  id v8 = SecCertificateCopyKey(v4);
  id v4 = v8;
  if (v8)
  {
    CFDataRef v9 = SecKeyCopyExternalRepresentation(v8, 0LL);
    if (v9)
    {
      if ((-[__CFData isEqualToData:](v7, "isEqualToData:", v9) & 1) != 0)
      {
        CFDataRef v10 = 0LL;
        uint64_t v11 = 1LL;
        goto LABEL_21;
      }

      MobileActivationError = createMobileActivationError( (uint64_t)"valid_ucrt_and_uik",  2979LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"UCRT public key does not match UIK public key.");
    }

    else
    {
      MobileActivationError = createMobileActivationError( (uint64_t)"valid_ucrt_and_uik",  2972LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to encode UCRT public key as data.");
    }

    CFDataRef v10 = MobileActivationError;
    if (!a3) {
      goto LABEL_20;
    }
LABEL_15:
    CFDataRef v10 = v10;
    uint64_t v11 = 0LL;
    *a3 = v10;
    goto LABEL_21;
  }

  CFDataRef v10 =  createMobileActivationError( (uint64_t)"valid_ucrt_and_uik",  2966LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve UCRT public key.");
LABEL_14:
  CFDataRef v9 = 0LL;
  if (a3) {
    goto LABEL_15;
  }
LABEL_20:
  uint64_t v11 = 0LL;
LABEL_21:
  if (error) {
    CFRelease(error);
  }
  CFErrorRef error = 0LL;
  if (v6) {
    CFRelease(v6);
  }
  if (v4) {
    CFRelease(v4);
  }

  return v11;
}

BOOL data_ark_register_set_notification(void *a1, void *a2, void *a3, void *a4, int a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  uint64_t v23 = 0LL;
  BOOL v24 = &v23;
  uint64_t v25 = 0x2020000000LL;
  char v26 = 0;
  if (v9)
  {
    id v13 = (dispatch_queue_s *)[v9 queue];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3254779904LL;
    v16[2] = __data_ark_register_set_notification_block_invoke;
    v16[3] = &__block_descriptor_76_e8_32s40s48s56s64r_e5_v8__0l;
    int v22 = a5;
    id v21 = &v23;
    id v17 = v9;
    id v18 = v10;
    id v19 = v11;
    id v20 = v12;
    dispatch_barrier_sync(v13, v16);

    BOOL v14 = *((_BYTE *)v24 + 24) != 0;
  }

  else
  {
    BOOL v14 = 0LL;
  }

  _Block_object_dispose(&v23, 8);

  return v14;
}

void sub_10000F1F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void __data_ark_register_set_notification_block_invoke(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 72) & 8) != 0)
  {
    id v2 = objc_msgSend(*(id *)(a1 + 32), "change_notifications");
    *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = _register_notification( v2,  *(void **)(a1 + 40),  *(void **)(a1 + 48),  *(void **)(a1 + 56));
  }

  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL))
  {
    if ((*(_BYTE *)(a1 + 72) & 2) == 0
      || (id v3 = objc_msgSend(*(id *)(a1 + 32), "set_notifications"),
          *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = _register_notification( v3,  *(void **)(a1 + 40),  *(void **)(a1 + 48),  *(void **)(a1 + 56)),  v3,  !*(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL)))
    {
      if ((*(_BYTE *)(a1 + 72) & 4) != 0)
      {
        id v4 = objc_msgSend(*(id *)(a1 + 32), "remove_notifications");
        *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = _register_notification( v4,  *(void **)(a1 + 40),  *(void **)(a1 + 48),  *(void **)(a1 + 56));
      }
    }
  }

__CFString *_register_notification(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = v10;
  if (v7 && v10)
  {
    id v12 = _create_mapkey(v8, v9);
    if (v12)
    {
      [v7 setObject:v11 forKeyedSubscript:v12];

      id v12 = (__CFString *)1;
    }

    else
    {
      maLog((uint64_t)"_register_notification", 0LL, @"failed to create mapkey for %@-%@", v8, v9);
    }
  }

  else
  {
    maLog((uint64_t)"_register_notification", 0LL, @"invalid inputs");
    id v12 = 0LL;
  }

  return v12;
}

void __copy_helper_block_e8_32s40s48s56s64r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  id v6 = *(id *)(a2 + 48);
  id v7 = *(id *)(a2 + 56);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64r(uint64_t a1)
{
}

BOOL data_ark_set(void *a1, void *a2, void *a3, void *a4, char a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  uint64_t v23 = 0LL;
  BOOL v24 = &v23;
  uint64_t v25 = 0x2020000000LL;
  char v26 = 0;
  if (v9)
  {
    id v13 = (dispatch_queue_s *)[v9 queue];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3254779904LL;
    v16[2] = __data_ark_set_block_invoke;
    v16[3] = &__block_descriptor_73_e8_32s40s48s56s64r_e5_v8__0l;
    id v17 = v9;
    id v18 = v12;
    id v19 = v10;
    char v22 = a5;
    id v20 = v11;
    id v21 = &v23;
    dispatch_barrier_sync(v13, v16);

    BOOL v14 = *((_BYTE *)v24 + 24) != 0;
  }

  else
  {
    BOOL v14 = 0LL;
  }

  _Block_object_dispose(&v23, 8);

  return v14;
}

void sub_10000F618( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void __data_ark_set_block_invoke(uint64_t a1)
{
  id v2 = (NSMutableDictionary *)[*(id *)(a1 + 32) path];
  id v3 = load_dict(v2);

  if (!*(void *)(a1 + 40))
  {
    maLog((uint64_t)"data_ark_set_block_invoke", 0LL, @"invalid value");
    goto LABEL_34;
  }

  id v4 = [*(id *)(a1 + 32) store];

  if (v4)
  {
    if (!v3) {
      id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    }
    id v5 = _create_mapkey(*(void **)(a1 + 48), *(void **)(a1 + 56));
    id v6 = _create_mapkey(*(void **)(a1 + 48), 0LL);
    id v7 = [*(id *)(a1 + 32) store];
    id v8 = [v7 objectForKeyedSubscript:v5];

    BOOL v9 = !v8 || ([v8 isEqual:*(void *)(a1 + 40)] & 1) == 0;
    uint64_t v10 = *(void *)(a1 + 40);
    id v11 = [*(id *)(a1 + 32) store];
    [v11 setObject:v10 forKeyedSubscript:v5];

    if (*(_BYTE *)(a1 + 72)) {
      goto LABEL_11;
    }
    id v18 = -[NSMutableDictionary objectForKey:](v3, "objectForKey:", v5);

    if (!v18)
    {
LABEL_13:
      if (v9)
      {
        id v13 = objc_msgSend(*(id *)(a1 + 32), "change_notifications");

        if (v13)
        {
          id v14 = objc_msgSend(*(id *)(a1 + 32), "change_notifications");
          id v15 = [v14 objectForKeyedSubscript:v5];

          if (v15) {
            [*(id *)(a1 + 32) postNotification:v15];
          }
          if (v6)
          {
            id v16 = objc_msgSend(*(id *)(a1 + 32), "change_notifications");
            id v17 = [v16 objectForKeyedSubscript:v6];

            if (v17)
            {
              [*(id *)(a1 + 32) postNotification:v17];
              id v15 = v17;
            }

            else
            {
              id v15 = 0LL;
            }
          }
        }
      }

      id v19 = objc_msgSend(*(id *)(a1 + 32), "set_notifications");

      if (v19)
      {
        id v20 = objc_msgSend(*(id *)(a1 + 32), "set_notifications");
        id v21 = [v20 objectForKeyedSubscript:v5];

        if (v21) {
          [*(id *)(a1 + 32) postNotification:v21];
        }
        if (v6)
        {
          id v22 = objc_msgSend(*(id *)(a1 + 32), "set_notifications");
          id v23 = [v22 objectForKeyedSubscript:v6];

          if (v23)
          {
            [*(id *)(a1 + 32) postNotification:v23];
            id v21 = v23;
          }

          else
          {
            id v21 = 0LL;
          }
        }
      }

      *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 1;

      goto LABEL_34;
    }

    if (*(_BYTE *)(a1 + 72)) {
LABEL_11:
    }
      -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", *(void *)(a1 + 40), v5);
    else {
      -[NSMutableDictionary removeObjectForKey:](v3, "removeObjectForKey:", v5);
    }
    id v12 = [*(id *)(a1 + 32) path];
    store_dict(v12, v3, 0LL);

    goto LABEL_13;
  }

__CFString *_create_mapkey(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3 && v4)
  {
    id v6 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@-%@", v3, v4);
  }

  else if (v3)
  {
    id v6 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@-", v3, v9);
  }

  else
  {
    if (!v4)
    {
      id v7 = @"-";
      goto LABEL_9;
    }

    id v6 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"-%@", v4, v9);
  }

  id v7 = v6;
LABEL_9:

  return v7;
}

id data_ark_copy(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  uint64_t v16 = 0LL;
  id v17 = &v16;
  uint64_t v18 = 0x3032000000LL;
  id v19 = __Block_byref_object_copy__0;
  id v20 = __Block_byref_object_dispose__0;
  id v21 = 0LL;
  if (v5)
  {
    id v8 = (dispatch_queue_s *)[v5 queue];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3254779904LL;
    v11[2] = __data_ark_copy_block_invoke;
    v11[3] = &__block_descriptor_64_e8_32s40s48s56r_e5_v8__0l;
    id v12 = v5;
    id v13 = v7;
    id v14 = v6;
    id v15 = &v16;
    dispatch_sync(v8, v11);

    id v9 = (id)v17[5];
  }

  else
  {
    id v9 = 0LL;
  }

  _Block_object_dispose(&v16, 8);

  return v9;
}

void sub_10000FBC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void __data_ark_copy_block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) store];

  if (v2)
  {
    id v3 = *(void **)(a1 + 40);
    if (v3)
    {
      id v4 = _create_mapkey(*(void **)(a1 + 48), v3);
      id v5 = [*(id *)(a1 + 32) store];
      id v6 = [v5 objectForKeyedSubscript:v4];
      uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8LL);
      id v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = v6;

      id v9 = v5;
    }

    else
    {
      id v10 = [*(id *)(a1 + 32) store];
      id v11 = *(void **)(a1 + 48);
      id v4 = (__CFString *)v10;
      id v12 = v11;
      uint64_t v21 = 0LL;
      id v22 = &v21;
      uint64_t v23 = 0x3032000000LL;
      BOOL v24 = __Block_byref_object_copy__0;
      uint64_t v25 = __Block_byref_object_dispose__0;
      id v26 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      if (v4)
      {
        if (v12) {
          id v13 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@-", v12);
        }
        else {
          id v13 = @"-";
        }
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3254779904LL;
        v18[2] = ___copy_domain_block_invoke;
        v18[3] = &__block_descriptor_48_e8_32s40r_e15_v32__0_8_16_B24l;
        id v14 = v13;
        id v19 = v14;
        id v20 = &v21;
        -[__CFString enumerateKeysAndObjectsUsingBlock:](v4, "enumerateKeysAndObjectsUsingBlock:", v18);
        if (![(id)v22[5] count])
        {
          uint64_t v16 = (void *)v22[5];
          v22[5] = 0LL;
        }

        id v15 = (id)v22[5];
      }

      else
      {
        id v14 = 0LL;
        id v15 = 0LL;
      }

      _Block_object_dispose(&v21, 8);

      uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8LL);
      id v9 = *(void **)(v17 + 40);
      *(void *)(v17 + 40) = v15;
    }
  }

void sub_10000FE10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void __copy_helper_block_e8_32s40s48s56r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  id v6 = *(id *)(a2 + 48);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 8);
}

void __destroy_helper_block_e8_32s40s48s56r(uint64_t a1)
{
}

void data_ark_remove(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v5)
  {
    id v8 = (dispatch_queue_s *)[v5 queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3254779904LL;
    block[2] = __data_ark_remove_block_invoke;
    block[3] = &__block_descriptor_56_e8_32s40s48s_e5_v8__0l;
    id v10 = v5;
    id v11 = v6;
    id v12 = v7;
    dispatch_barrier_sync(v8, block);
  }
}

void __data_ark_remove_block_invoke(id *a1)
{
  id v2 = (NSMutableDictionary *)[a1[4] path];
  id v3 = load_dict(v2);

  id v4 = (__CFString *)[a1[4] store];
  if (v4)
  {
    id v4 = _create_mapkey(a1[5], a1[6]);
    id v5 = [a1[4] store];
    id v6 = [v5 objectForKey:v4];

    if (v6)
    {
      id v7 = [a1[4] store];
      [v7 removeObjectForKey:v4];

      -[NSMutableDictionary removeObjectForKey:](v3, "removeObjectForKey:", v4);
      if (v3)
      {
        id v8 = [a1[4] path];
        store_dict(v8, v3, 0LL);
      }

      id v9 = objc_msgSend(a1[4], "remove_notifications");

      if (v9)
      {
        id v10 = objc_msgSend(a1[4], "remove_notifications");
        id v11 = [v10 objectForKeyedSubscript:v4];

        if (v11) {
          [a1[4] postNotification:v11];
        }
      }
    }
  }
}

id __copy_helper_block_e8_32s40s48s(uint64_t a1, id *a2)
{
  id v3 = a2[4];
  id v4 = a2[5];
  return a2[6];
}

void __destroy_helper_block_e8_32s40s48s(id *a1)
{
}

BOOL data_ark_exists(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  uint64_t v16 = 0LL;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000LL;
  char v19 = 0;
  if (v5)
  {
    id v8 = (dispatch_queue_s *)[v5 queue];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3254779904LL;
    v11[2] = __data_ark_exists_block_invoke;
    v11[3] = &__block_descriptor_64_e8_32s40s48s56r_e5_v8__0l;
    id v12 = v5;
    id v13 = v6;
    id v14 = v7;
    id v15 = &v16;
    dispatch_sync(v8, v11);

    BOOL v9 = *((_BYTE *)v17 + 24) != 0;
  }

  else
  {
    BOOL v9 = 0LL;
  }

  _Block_object_dispose(&v16, 8);

  return v9;
}

void sub_1000102CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void __data_ark_exists_block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) store];

  if (v2)
  {
    id v3 = _create_mapkey(*(void **)(a1 + 40), *(void **)(a1 + 48));
    id v4 = [*(id *)(a1 + 32) store];
    id v5 = [v4 objectForKey:v3];
    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = v5 != 0LL;
  }

void ___copy_domain_block_invoke(uint64_t a1, id a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([v5 hasPrefix:*(void *)(a1 + 32)])
  {
    id v7 = *(void **)(a1 + 32);
    id v8 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    id v9 = objc_msgSend(v5, "substringFromIndex:", objc_msgSend(v7, "length"));
    [v8 setObject:v6 forKeyedSubscript:v9];
  }
}

void __copy_helper_block_e8_32s40r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 8);
}

void __destroy_helper_block_e8_32s40r(uint64_t a1)
{
}

LABEL_6:
  return (MACollectionInterface *)a3;
}

    id v14 = 0LL;
    goto LABEL_11;
  }

  id v14 =  createMobileActivationError( (uint64_t)"lockcrypto_create_pem",  1376LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
  id v8 = 0LL;
  if (!a3) {
    goto LABEL_14;
  }
LABEL_12:
  if (!v8) {
    *a3 = v14;
  }
LABEL_14:

  return v8;
}

    id v6 = v6;
    id v8 = 0LL;
    *a2 = v6;
    goto LABEL_11;
  }

  id v12 = 0LL;
  id v5 = lockcrypto_decode_pem(v3, "RSA PUBLIC KEY", (NSError **)&v12);
  id v6 = (NSError *)v12;
  if (!v5)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_public_key_from_pem_data",  1814LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v6,  @"Failed to decode data.");
    goto LABEL_9;
  }

  id v5 = v5;
  RSAPublicKey = SecKeyCreateRSAPublicKey( kCFAllocatorDefault,  -[NSData bytes](v5, "bytes"),  -[NSData length](v5, "length"),  1LL);
  if (!RSAPublicKey)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_public_key_from_pem_data",  1820LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create public key from data.");
LABEL_9:
    id v10 = MobileActivationError;

    id v6 = v10;
    if (!a2) {
      goto LABEL_10;
    }
    goto LABEL_6;
  }

  id v8 = RSAPublicKey;
LABEL_11:

  return v8;
}

    id v6 = v6;
    id v5 = 0LL;
    *a2 = v6;
  }

    id v6 = v6;
    id v8 = 0LL;
    *a2 = v6;
    goto LABEL_11;
  }

  id v12 = 0LL;
  id v5 = lockcrypto_decode_pem(v3, "CERTIFICATE", (NSError **)&v12);
  id v6 = (NSError *)v12;
  if (!v5)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_cert_from_pem_data",  1740LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v6,  @"Failed to decode data.");
    goto LABEL_9;
  }

  id v7 = SecCertificateCreateWithData(kCFAllocatorDefault, (CFDataRef)v5);
  if (!v7)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_cert_from_pem_data",  1746LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create certificate with cert data.");
LABEL_9:
    id v10 = MobileActivationError;

    id v6 = v10;
    if (!a2) {
      goto LABEL_10;
    }
    goto LABEL_6;
  }

  id v8 = v7;
LABEL_11:

  return v8;
}

    id v11 = (NSString *)v9;
  }

    id v8 = v8;
    id v7 = 0LL;
    *a3 = v8;
    goto LABEL_11;
  }

  id v4 = SecKeyCopyAttributes(a1);
  id v5 = v4;
  if (!v4)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"security_create_external_representation",  334LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy RK attributes.");
    goto LABEL_9;
  }

  id v6 = -[__CFDictionary objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", kSecAttrTokenOID);
  if (!v6)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"security_create_external_representation",  340LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to encode RK as data.");
LABEL_9:
    id v8 = MobileActivationError;
    if (!a3) {
      goto LABEL_10;
    }
    goto LABEL_6;
  }

  id v7 = v6;
  id v8 = 0LL;
LABEL_11:

  return v7;
}

  id v8 = v7 + 1;
  id v3 = 327693;
  result = 327693LL;
  if (a3 < 0 || v5 > (unint64_t)v8)
  {
LABEL_34:
    __break(0x5519u);
    return result;
  }

  if (__CFADD__(v8, v6 - (void)v8)) {
    goto LABEL_31;
  }
  if (v6 - (void)v8 != 2 * a3) {
    return (v3 + 1);
  }
  if (__CFADD__(a2, a3) || v7 == (unsigned __int8 *)-2LL)
  {
LABEL_31:
    __break(0x5513u);
    return (v3 + 1);
  }

  id v9 = v7 + 2;
  id v10 = a2;
  while (1)
  {
    result = 0LL;
    id v11 = v9 - 1;
    id v12 = &asciiNibbleToByte[*v11];
    result = (uint64_t)&CTOidAppleImg4Manifest;
    if (v11 < v7) {
      goto LABEL_34;
    }
    id v14 = &asciiNibbleToByte[*v9];
    result = (uint64_t)&CTOidAppleImg4Manifest;
    id v15 = *v12;
    result = 327695LL;
    if (v15 > 0xF) {
      return result;
    }
    uint64_t v16 = *v14;
    if (v16 > 0xF) {
      return result;
    }
    if (v10 < a2) {
      goto LABEL_34;
    }
    *v10++ = v16 | (16 * v15);
    v9 += 2;
    if (!v9) {
      goto LABEL_31;
    }
  }

LABEL_5:
    id v6 = v6;
    id v7 = 0LL;
    *a3 = v6;
    goto LABEL_8;
  }

  id v10 = 0LL;
  id v5 =  security_create_system_key_attestation( (uint64_t)-[MACollectionInterface signingKey](self, "signingKey"),  0LL,  0LL,  &v10);
  id v6 = (NSError *)v10;
  if (!v5)
  {
    id v8 =  createMobileActivationError( (uint64_t)"-[MACollectionInterface collectSigningAttestation:]",  160LL,  @"com.apple.MobileActivation.ErrorDomain",  -11LL,  v6,  @"Failed to attest RK to SIK.");

    id v6 = v8;
    if (!a3) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }

  id v7 = v5;
LABEL_8:

  return v7;
}

  id v9 = SecTrustEvaluate(trust, &result);
  id v10 = result;
  if (v9 || (id v12 = 0LL, v13 = 1LL, result != kSecTrustResultProceed) && result != kSecTrustResultUnspecified)
  {
    id v11 = (void *)SecTrustCopyFailureDescription(trust);
    id v12 =  createMobileActivationError( (uint64_t)"lockcrypto_verify_device_cert",  1249LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to evaluate trust: %d (%@)",  v10,  v11);

    if (!a4) {
      goto LABEL_13;
    }
LABEL_9:
    id v12 = v12;
    id v13 = 0LL;
    *a4 = v12;
  }

LABEL_13:
  id v13 = v18;
  if (v18)
  {
    char v19 = 0LL;
    id v20 = &v19;
    uint64_t v21 = 0x2020000000LL;
    id v14 = getZshgJnRaSlwnSymbolLoc_ptr;
    id v22 = getZshgJnRaSlwnSymbolLoc_ptr;
    if (!getZshgJnRaSlwnSymbolLoc_ptr)
    {
      id v15 = (void *)libInFieldCollectionLibrary();
      id v14 = dlsym(v15, "ZshgJnRaSlwn");
      v20[3] = (uint64_t)v14;
      getZshgJnRaSlwnSymbolLoc_ptr = v14;
    }

    _Block_object_dispose(&v19, 8);
    if (!v14) {
      -[MACollectionInterface collectPCRT:].cold.2();
    }
    ((void (*)(uint64_t))v14)(v13);
  }

  return v10;
}

    *a4 = v19;
    goto LABEL_14;
  }

  uint64_t v23 = v15;
  uint64_t v18 = lockcrypto_create_pem(CertificateRequestWithParameters, "CERTIFICATE REQUEST", &v23);
  char v19 = (NSError *)v23;

  if (!v18)
  {
    id v20 =  createMobileActivationError( (uint64_t)"lockcrypto_create_cert_request",  1190LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v19,  @"Failed to encode the certificate request.");

    char v19 = v20;
    if (!a4) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }

    id v15 = v15;
    id v14 = 0LL;
    *a2 = v15;
    goto LABEL_18;
  }

  id v8 = (size_t)v7;
  id v9 = snprintf(__str, 0x50uLL, "-----BEGIN %s-----\n", "ERROR");
  snprintf(__little, 0x50uLL, "\n-----END %s-----", "ERROR");
  id v10 = strnstr(v6, __str, v8);
  id v11 = strnstr(v6, __little, v8);
  if (!v10 || !v11)
  {
    uint64_t v17 = @"Invalid error data.";
    uint64_t v18 = 1452LL;
    goto LABEL_11;
  }

  id v12 = -[NSData initWithBytesNoCopy:length:freeWhenDone:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBytesNoCopy:length:freeWhenDone:",  &v10[v9],  v11 - &v10[v9],  0LL);
  if (!v12)
  {
    char v19 = createMobileActivationError( (uint64_t)"lockcrypto_decode_error",  1460LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to decode data.");
    goto LABEL_16;
  }

  id v13 = -[NSString initWithData:encoding:](objc_alloc(&OBJC_CLASS___NSString), "initWithData:encoding:", v12, 4LL);
  if (!v13)
  {
    char v19 = createMobileActivationError( (uint64_t)"lockcrypto_decode_error",  1466LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create string.");
LABEL_16:
    id v15 = v19;
    if (!a2) {
      goto LABEL_17;
    }
    goto LABEL_13;
  }

  id v14 = v13;
  id v15 = 0LL;
LABEL_18:

  return v14;
}

    uint64_t v17 = v17;
    uint64_t v16 = 0LL;
    *a3 = v17;
    goto LABEL_16;
  }

  id v10 = v9;
  id v11 = snprintf(__str, 0x50uLL, "-----BEGIN %s-----\n", a2);
  snprintf(__little, 0x50uLL, "\n-----END %s-----", a2);
  id v12 = strnstr(v8, __str, v10);
  id v13 = strnstr(v8, __little, v10);
  if (!v12 || !v13)
  {
    char v19 = @"Invalid pem data.";
    id v20 = 1505LL;
    goto LABEL_11;
  }

  id v14 = -[NSData initWithBytesNoCopy:length:freeWhenDone:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBytesNoCopy:length:freeWhenDone:",  &v12[v11],  v13 - &v12[v11],  0LL);
  id v15 = -[NSData initWithBase64EncodedData:options:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBase64EncodedData:options:",  v14,  1LL);
  if (!v15)
  {
    uint64_t v17 =  createMobileActivationError( (uint64_t)"lockcrypto_decode_pem",  1516LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to decode data.");
    if (!a3) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }

  uint64_t v16 = v15;
  uint64_t v17 = 0LL;
LABEL_16:

  return v16;
}
}
}

  return v17;
}

    uint64_t v23 = 0LL;
    char v19 = 0LL;
    goto LABEL_19;
  }

  id v27 = 0LL;
  id v8 =  +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v7,  100LL,  0LL,  &v27);
  id v9 = (NSError *)v27;
  if (!v8)
  {
    BOOL v24 =  createMobileActivationError( (uint64_t)"createActivationRequest",  45LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v9,  @"Failed to convert dictionary to data.");

    id v10 = 0LL;
LABEL_16:
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    id v11 = 0LL;
    goto LABEL_17;
  }

  id v10 = -[NSString initWithData:encoding:](objc_alloc(&OBJC_CLASS___NSString), "initWithData:encoding:", v8, 4LL);
  if (!v10)
  {
    BOOL v24 =  createMobileActivationError( (uint64_t)"createActivationRequest",  51LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v9,  @"Failed to convert data to string.");

    goto LABEL_16;
  }

  id v11 =  +[NSMutableCharacterSet alphanumericCharacterSet]( &OBJC_CLASS___NSMutableCharacterSet,  "alphanumericCharacterSet");
  -[NSMutableCharacterSet addCharactersInString:](v11, "addCharactersInString:", @"*-._");
  -[NSMutableCharacterSet addCharactersInString:](v11, "addCharactersInString:", @" ");
  id v12 =  -[NSString stringByAddingPercentEncodingWithAllowedCharacters:]( v10,  "stringByAddingPercentEncodingWithAllowedCharacters:",  v11);

  id v10 =  -[NSString stringByReplacingOccurrencesOfString:withString:]( v12,  "stringByReplacingOccurrencesOfString:withString:",  @" ",  @"+");
  id v13 = objc_alloc(&OBJC_CLASS___NSString);
  id v14 = @"activation-info";
  if (a3) {
    id v14 = @"certify-me-info";
  }
  id v15 = -[NSString initWithFormat:](v13, "initWithFormat:", @"%@=%@", v14, v10);
  uint64_t v16 = v15;
  if (!v15)
  {
    BOOL v24 =  createMobileActivationError( (uint64_t)"createActivationRequest",  64LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v9,  @"Failed to convert dictionary to URL encoding.");

    uint64_t v17 = 0LL;
    goto LABEL_17;
  }

  uint64_t v17 = -[NSString dataUsingEncoding:allowLossyConversion:](v15, "dataUsingEncoding:allowLossyConversion:", 4LL, 0LL);
  if (!v17)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"createActivationRequest",  70LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v9,  @"Failed to convert string to data.");
LABEL_23:
    BOOL v24 = MobileActivationError;

LABEL_17:
    id v9 = v24;
    if (a4) {
      goto LABEL_18;
    }
    goto LABEL_13;
  }

  uint64_t v18 = objc_alloc_init(&OBJC_CLASS___NSMutableURLRequest);
  if (!v18)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"createActivationRequest",  76LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate request.");
    goto LABEL_23;
  }

  char v19 = v18;
  -[NSMutableURLRequest setCachePolicy:](v18, "setCachePolicy:", 0LL);
  -[NSMutableURLRequest setTimeoutInterval:](v19, "setTimeoutInterval:", 60.0);
  -[NSMutableURLRequest setHTTPMethod:](v19, "setHTTPMethod:", @"POST");
  id v20 =  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"application/x-www-form-urlencoded");
  -[NSMutableURLRequest setValue:forHTTPHeaderField:](v19, "setValue:forHTTPHeaderField:", v20, @"Content-Type");

  uint64_t v21 =  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%lu",  -[NSData length](v17, "length"));
  -[NSMutableURLRequest setValue:forHTTPHeaderField:](v19, "setValue:forHTTPHeaderField:", v21, @"Content-Length");

  -[NSMutableURLRequest setHTTPBody:](v19, "setHTTPBody:", v17);
  -[NSMutableURLRequest setValue:forHTTPHeaderField:]( v19,  "setValue:forHTTPHeaderField:",  @"iOS Device Activator (MobileActivation-1015.60.1)",  @"User-Agent");
  id v22 =  +[NSURL URLWithString:]( &OBJC_CLASS___NSURL,  "URLWithString:",  @"https://albert.apple.com/deviceservices/deviceActivation");
  -[NSMutableURLRequest setURL:](v19, "setURL:", v22);

  if (a2)
  {
    char v19 = v19;
    *a2 = v19;
  }

  uint64_t v23 = 1LL;
LABEL_19:

  return v23;
}

  return v9;
}

  uint64_t v17 = 0LL;
LABEL_18:
  (*((void (**)(id, void, NSDictionary *))v5 + 2))(v5, 0LL, v17);
}

    if (*(_BYTE *)(v3 + 17)) {
      result = X509PolicySetFlagsForTestAnchor((void *)v3, a2);
    }
    goto LABEL_15;
  }

  if ((v4 & 0x1C00000000LL) == 0) {
    goto LABEL_15;
  }
  result = compare_octet_string(a2 + 88, (uint64_t)&MFi4RootSpki);
  if ((_DWORD)result) {
    goto LABEL_13;
  }
  id v5 = *(void *)(a2 + 240) | 0x1C00000000LL;
LABEL_11:
  *(void *)(a2 + 240) = v5;
LABEL_15:
  if (*(_BYTE *)(v3 + 16))
  {
    if (*(_BYTE *)(v3 + 17))
    {
      result = compare_octet_string(a2 + 88, (uint64_t)&TestAppleRootCASPKI);
      if (!(_DWORD)result
        || (result = compare_octet_string(a2 + 88, (uint64_t)&TestAppleRootG2SPKI), !(_DWORD)result)
        || (result = compare_octet_string(a2 + 88, (uint64_t)&TestAppleRootG3SPKI), !(_DWORD)result))
      {
        *(void *)(a2 + 240) |= 0x58E30653FFF8uLL;
      }
    }

    if (*(_BYTE *)(v3 + 16) && *(_BYTE *)(v3 + 17))
    {
      result = compare_octet_string(a2 + 88, (uint64_t)&TestAppleRootECCSPKI);
      if (!(_DWORD)result) {
        *(void *)(a2 + 240) |= 0x6400000uLL;
      }
    }
  }

  return result;
}

  id v10 = 0LL;
LABEL_23:
  if (v10 == a2) {
    return 0LL;
  }
  else {
    return 589829LL;
  }
}

  __break(0x5513u);
  return result;
}

void sub_100010FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

LABEL_9:
  if (error) {
    CFRelease(error);
  }
  CFErrorRef error = 0LL;
  if (v5) {
    CFRelease(v5);
  }

  return v7;
}

  return v11;
}

  return v6;
}

  return v14;
}

  return v15;
}

  return v15;
}

  return v4 != 0;
}

  _Block_object_dispose(&v33, 8);
  _Block_object_dispose(&v39, 8);
  _Block_object_dispose(&v43, 8);

  _Block_object_dispose(&v49, 8);
}

  return v8;
}

    id v11 = v11;
    id v12 = 0LL;
    *a3 = v11;
  }

  return v10;
}

  if (!v11) {
    *a4 = v5;
  }
LABEL_11:

  return v11;
}

  id v13 = SecCertificateCopyKey(a3);
  id v12 = v13;
  if (!v13)
  {
    id v11 =  createMobileActivationError( (uint64_t)"security_certificate_matches_key",  557LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve certificate public key.");
    goto LABEL_20;
  }

  id v14 = SecKeyCopyExternalRepresentation(v13, &error);
  if (!v14)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"security_certificate_matches_key",  563LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to encode certificate public key as data.");
    goto LABEL_16;
  }

  if ((-[__CFData isEqualToData:](v10, "isEqualToData:", v14) & 1) == 0)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"security_certificate_matches_key",  570LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Certificate public key does not match RK public key.");
LABEL_16:
    id v11 = MobileActivationError;
    if (!a4)
    {
LABEL_22:
      id v15 = 0LL;
      uint64_t v17 = 0LL;
      if (!v9) {
        goto LABEL_24;
      }
      goto LABEL_23;
    }

  return v8;
}

LABEL_14:
  uint64_t v16 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  unsigned int v49 = [v16 copyAnswer:@"SerialNumber"];

  uint64_t v17 = isNSString(v49);
  LODWORD(v16) = v17 == 0LL;

  if ((_DWORD)v16)
  {
    id v12 =  createMobileActivationError( (uint64_t)"-[MACollectionInterface copyIngestData:]",  449LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve serial number.");
    id v13 = 0LL;
    id v14 = 0LL;
    id v15 = 0LL;
    goto LABEL_28;
  }

  uint64_t v18 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  char v19 = [v18 copyAnswer:@"ProductType"];

  id v20 = isNSString(v19);
  LODWORD(v1_Block_object_dispose(va, 8) = v20 == 0LL;

  if ((_DWORD)v18)
  {
    id v12 =  createMobileActivationError( (uint64_t)"-[MACollectionInterface copyIngestData:]",  455LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve product type.");
    id v13 = 0LL;
    id v14 = 0LL;
    id v15 = 0LL;
    goto LABEL_29;
  }

  uint64_t v21 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v22 = [v21 copyAnswer:@"ProductVersion"];

  uint64_t v23 = isNSString(v22);
  LODWORD(v21) = v23 == 0LL;

  if ((_DWORD)v21)
  {
    id v12 =  createMobileActivationError( (uint64_t)"-[MACollectionInterface copyIngestData:]",  461LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve product version.");
    id v13 = 0LL;
    id v14 = 0LL;
    id v15 = 0LL;
    goto LABEL_30;
  }

  BOOL v24 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v15 = [v24 copyAnswer:@"UniqueDeviceID"];

  uint64_t v25 = isNSString(v15);
  LODWORD(v24) = v25 == 0LL;

  if ((_DWORD)v24)
  {
    id v12 =  createMobileActivationError( (uint64_t)"-[MACollectionInterface copyIngestData:]",  467LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve UDID.");
    id v13 = 0LL;
    id v14 = 0LL;
    goto LABEL_30;
  }

  id v26 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v27 = [v26 copyAnswer:@"BuildVersion"];

  uint64_t v28 = isNSString(v27);
  LODWORD(v26) = v28 == 0LL;

  if ((_DWORD)v26)
  {
    CFDataRef v38 =  createMobileActivationError( (uint64_t)"-[MACollectionInterface copyIngestData:]",  473LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve OS build.");
LABEL_43:
    id v12 = v38;
    id v13 = 0LL;
LABEL_44:
    id v14 = 0LL;
    goto LABEL_31;
  }

  uint64_t v29 = (id *)(v61 + 5);
  id obj = (id)v61[5];
  id v13 = -[MACollectionInterface collectSIK:](self, "collectSIK:", &obj);
  objc_storeStrong(v29, obj);
  if (!v13)
  {
    CFDataRef v38 =  createMobileActivationError( (uint64_t)"-[MACollectionInterface copyIngestData:]",  481LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  (void *)v61[5],  @"Failed to collect SIK.");
    goto LABEL_43;
  }

  CFDataRef v30 = [v13 base64EncodedStringWithOptions:0];
  if (!v30)
  {
    id v12 =  createMobileActivationError( (uint64_t)"-[MACollectionInterface copyIngestData:]",  487LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to encode data as string.");
    goto LABEL_44;
  }

  if (!-[MACollectionInterface collectionLibraryLoaded](self, "collectionLibraryLoaded"))
  {
    v39 =  createMobileActivationError( (uint64_t)"-[MACollectionInterface copyIngestData:]",  492LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to load collection library (verify this is a UI build).");
LABEL_47:
    id v12 = v39;
    id v14 = 0LL;
    goto LABEL_32;
  }

  CFDataRef v31 = (dispatch_queue_s *)copyIngestData__queue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3254779904LL;
  block[2] = __40__MACollectionInterface_copyIngestData___block_invoke_2;
  block[3] = &__block_descriptor_80_e8_32s40s48r56r64r72r_e5_v8__0l;
  __int128 v55 = &v68;
  void block[4] = self;
  int v56 = v66;
  id v27 = v27;
  id v54 = v27;
  id v57 = v74;
  id v58 = &v60;
  dispatch_sync(v31, block);

  uint64_t v32 = (id *)(v61 + 5);
  if (v61[5])
  {
    id v14 = 0LL;
    id v33 = 0LL;
    uint64_t v34 = 0LL;
    goto LABEL_34;
  }

  id v52 = 0LL;
  id v14 = -[MACollectionInterface collectSigningAttestation:](self, "collectSigningAttestation:", &v52);
  objc_storeStrong(v32, v52);
  if (!v14)
  {
    v39 =  createMobileActivationError( (uint64_t)"-[MACollectionInterface copyIngestData:]",  528LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  (void *)v61[5],  @"Failed to collect signing key attestation.");
    goto LABEL_47;
  }

  id v40 = [v14 base64EncodedStringWithOptions:0];
  id v33 = v40;
  if (!v40)
  {
    id v12 =  createMobileActivationError( (uint64_t)"-[MACollectionInterface copyIngestData:]",  534LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to encode data as string.");
    goto LABEL_32;
  }

  if ((unint64_t)[v40 length] > 0xFA0)
  {
    id v41 = -[MACollectionInterface dark](self, "dark");
    [v33 length];
    writeSplunkLog( v41,  14LL,  -1LL,  (uint64_t)"-[MACollectionInterface copyIngestData:]",  539,  0LL,  @"%@ is too long: %ld > 4000",  v42,  (uint64_t)@"scrt-part2");
  }

  v76[0] = @"scrt-part1";
  v76[1] = @"scrt-part2";
  v77[0] = v30;
  v77[1] = v33;
  v76[2] = @"serial-number";
  v76[3] = @"productType";
  v77[2] = v49;
  v77[3] = v19;
  v76[4] = @"os-version";
  v76[5] = @"udid";
  v77[4] = v22;
  v77[5] = v15;
  v76[6] = @"os-build";
  v77[6] = v27;
  id v43 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v77,  v76,  7LL);
  uint64_t v34 =  +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v43);

  if (v47) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v34, "setObject:forKeyedSubscript:", v47, @"imei");
  }
  if (v48) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v34, "setObject:forKeyedSubscript:", v48, @"ime2");
  }
  if (v46) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v34, "setObject:forKeyedSubscript:", v46, @"meid");
  }
  id v44 = v69[5];
  if (v44) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v34, "setObject:forKeyedSubscript:", v44, @"pcrt");
  }
  location = (id *)(v61 + 5);
  id v51 = (id)v61[5];
  id v36 =  +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  v34,  0LL,  &v51);
  objc_storeStrong(location, v51);
  if (!v36)
  {
    id v12 =  createMobileActivationError( (uint64_t)"-[MACollectionInterface copyIngestData:]",  572LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  (void *)v61[5],  @"Failed to convert dictionary to JSON data.");
    goto LABEL_33;
  }

    *a4 = v17;
    goto LABEL_15;
  }

  if (a2) {
    *a2 = v13;
  }
  if (a3)
  {
    uint64_t v16 = v16;
    *a3 = v16;
  }

  uint64_t v18 = 1LL;
LABEL_16:
  CFRelease(v12);
  char v19 = v16;
  id v20 = v18;
LABEL_17:
  if (v10) {
    CFRelease(v10);
  }
  if (error) {
    CFRelease(error);
  }
  CFErrorRef error = 0LL;

  return v20;
}

  if (signedData) {
    free(signedData);
  }
  signedData = 0LL;

  return v21;
}

  if (FactoryDeviceCertificate) {
    CFRelease(FactoryDeviceCertificate);
  }
  if (trust) {
    CFRelease(trust);
  }
  trust = 0LL;

  return v13;
}

    *a4 = v13;
    goto LABEL_15;
  }

  if (!-[NSString isEqualToString:](v24, "isEqualToString:", cf))
  {
    id v26 = createMobileActivationError( (uint64_t)"lockcrypto_verify_factory_ucrt",  1345LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid factory UCRT common name (actual, expected): %@, %@",  cf,  v16);
    goto LABEL_38;
  }

  uint64_t v17 = 1LL;
LABEL_16:
  CFRelease(AppleFDRProvisioning);
  uint64_t v18 = v17;
LABEL_17:
  if (trust) {
    CFRelease(trust);
  }
  trust = 0LL;
  if (cf) {
    CFRelease(cf);
  }

  return v18;
}

  return v11;
}

  if (v21) {
    free(v21);
  }
  uint64_t v21 = 0LL;

  return v13;
}

    id v9 = 0LL;
    goto LABEL_15;
  }

  id v5 = is_virtual_machine();
  id v6 = &isSupportedDeviceIdentityClient_virtualDeviceSupportedList;
  if (!v5) {
    id v6 = &isSupportedDeviceIdentityClient_physicalDeviceSupportedList;
  }
  id v7 = (id)*v6;
  if (([v7 containsObject:v4] & 1) == 0)
  {
    id v8 =  createMobileActivationError( (uint64_t)"isSupportedDeviceIdentityClient",  302LL,  @"com.apple.MobileActivation.ErrorDomain",  -25LL,  0LL,  @"%@ is not allowed to use this API. File a radar with 'MobileActivation | all' for support.",  v4);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT))
    {
      isSupportedDeviceIdentityClient_cold_1(v8);
      if (a2) {
        goto LABEL_12;
      }
    }

    else if (a2)
    {
      goto LABEL_12;
    }

    goto LABEL_14;
  }

  id v8 = 0LL;
  id v9 = 1LL;
LABEL_15:

  return v9;
}

  id v20 = v66;
  char v19 = v67;
  if (v67 < v66) {
    goto LABEL_186;
  }
  uint64_t v21 = v70;
  if (v70 > v67 - v66) {
    goto LABEL_186;
  }
  *(void *)(a1 + 136) = v66;
  *(void *)(a1 + 144) = v21;
  if (__CFADD__(v20, v21)) {
    goto LABEL_187;
  }
  id v22 = v20 + v21;
  if (v20 > v22 || v22 > v19) {
    goto LABEL_186;
  }
  id v66 = v22;
  BOOL v24 = v66;
  uint64_t v23 = v67;
  if (v67 < v66) {
    goto LABEL_186;
  }
  uint64_t v25 = v70;
  if (v70 > v67 - v66) {
    goto LABEL_186;
  }
  *(void *)(a1 + 120) = v66;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = v25;
  if (__CFADD__(v24, v25)) {
    goto LABEL_187;
  }
  id v26 = v24 + v25;
  if (v24 > v26 || v26 > v23) {
    goto LABEL_186;
  }
  id v66 = v26;
  uint64_t v28 = v66;
  id v27 = v67;
  if (v67 < v66) {
    goto LABEL_186;
  }
  uint64_t v29 = v70;
  if (v70 > v67 - v66) {
    goto LABEL_186;
  }
  *(void *)(a1 + 72) = v66;
  *(void *)(a1 + 80) = v29;
  if (__CFADD__(v28, v29)) {
    goto LABEL_187;
  }
  CFDataRef v30 = v28 + v29;
  if (v28 > v30 || v30 > v27) {
    goto LABEL_186;
  }
  id v66 = v30;
  CFDataRef v31 = v66;
  uint64_t v32 = v67;
  if (v67 < v66) {
    goto LABEL_186;
  }
  id v33 = v70;
  if (v70 > v67 - v66) {
    goto LABEL_186;
  }
  *(void *)(a1 + 104) = v66;
  *(void *)(a1 + 112) = v33;
  if (__CFADD__(v31, v33)) {
    goto LABEL_187;
  }
  uint64_t v34 = v31 + v33;
  if (v31 > v31 + v33 || v34 > v32) {
    goto LABEL_186;
  }
  id v66 = v31 + v33;
  result = ccder_blob_decode_tl(&v66, 0x2000000000000010LL, &v70);
  if (!(_DWORD)result) {
    return 720922LL;
  }
  uint64_t v35 = v66;
  id v36 = v70;
  uint64_t v37 = v66 - v34 + v70;
  if (!__CFADD__(v66 - v34, v70))
  {
    if (v37 > v32 - v34) {
      goto LABEL_186;
    }
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = v34;
    *(void *)(a1 + 96) = v37;
    if (__CFADD__(v35, v36)) {
      goto LABEL_187;
    }
    CFDataRef v38 = v35 + v36;
    if (v35 > v38 || v38 > v67) {
      goto LABEL_186;
    }
    v65 = v67;
    id v66 = v38;
    id v64 = v38;
    if ((ccder_blob_decode_tl(&v64, 0x8000000000000001LL, &v70) & 1) != 0) {
      return 720923LL;
    }
    if (v66 > v67) {
      goto LABEL_186;
    }
    id v64 = v66;
    v65 = v67;
    if ((ccder_blob_decode_tl(&v64, 0x8000000000000002LL, &v70) & 1) != 0) {
      return 720924LL;
    }
    if (v66 > v67) {
      goto LABEL_186;
    }
    id v64 = v66;
    v65 = v67;
    if (ccder_blob_decode_tl(&v64, 0xA000000000000003LL, &v70))
    {
      unsigned __int8 v62 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v63 = 0xAAAAAAAAAAAAAAAALL;
      if (__CFADD__(v64, v70)) {
        goto LABEL_187;
      }
      if (v64 > v64 + v70 || v64 + v70 > v65) {
        goto LABEL_186;
      }
      unsigned __int8 v62 = v64;
      uint64_t v63 = v64 + v70;
      v39 = v62;
      if (__CFADD__(v62, v70)) {
LABEL_187:
      }
        __break(0x5513u);
      id v40 = v62 + v70;
      if (v62 > v62 + v70 || v40 > v63) {
        goto LABEL_186;
      }
      uint64_t v63 = v62 + v70;
      *(_BYTE *)(a1 + 266) = 0;
      memset(&v72[2], 0, 128);
      if (a3) {
        id v41 = a4 == 0;
      }
      else {
        id v41 = 1;
      }
      id v42 = !v41;
      memset(v72, 0, 32);
      if (v39 < v40)
      {
        __int128 v55 = 0;
        id v43 = 0;
        do
        {
          id v60 = 0xAAAAAAAAAAAAAAAALL;
          id v61 = 0xAAAAAAAAAAAAAAAALL;
          id v59 = 0;
          id v58 = 0LL;
          if ((ccder_blob_decode_tl(&v62, 0x2000000000000010LL, &v58) & 1) == 0) {
            return 720926LL;
          }
          int v56 = 0xAAAAAAAAAAAAAAAALL;
          id v57 = 0xAAAAAAAAAAAAAAAALL;
          if (__CFADD__(v62, v58)) {
            goto LABEL_187;
          }
          if (v62 > v62 + v58 || v62 + v58 > v63) {
            goto LABEL_186;
          }
          int v56 = v62;
          id v57 = v62 + v58;
          if (v57 < v56 || v70 > v57 - v56) {
            goto LABEL_186;
          }
          id v60 = v56;
          id v61 = v70;
          if (__CFADD__(v56, v70)) {
            goto LABEL_187;
          }
          if (v56 > v56 + v70 || v56 + v70 > v57) {
            goto LABEL_186;
          }
          v56 += v70;
          if (__CFADD__(v56, v70)) {
            goto LABEL_187;
          }
          if (v57 != v56 + v70) {
            return 720929LL;
          }
          if (v42 && !compare_octet_string_raw((uint64_t)&v60, a3, a4))
          {
            if (v57 < v56) {
              goto LABEL_186;
            }
            id v45 = v70;
            if (v70 > v57 - v56) {
              goto LABEL_186;
            }
            *(void *)(a1 + 24_Block_object_dispose(va, 8) = v56;
            *(void *)(a1 + 256) = v45;
          }

          if (v61 == 3)
          {
            if (*(_WORD *)v60 == 7509 && *(_BYTE *)(v60 + 2) == 15)
            {
              uint64_t v18 = 720930LL;
              v43 |= 1u;
              goto LABEL_155;
            }

            if (*(_WORD *)v60 == 7509 && *(_BYTE *)(v60 + 2) == 19)
            {
              uint64_t v18 = 720931LL;
              if ((v43 & 2) != 0
                || (X509ExtensionParseBasicConstraints(&v56, (unint64_t *)(a1 + 200), (BOOL *)(a1 + 265)) & 1) == 0)
              {
                return v18;
              }

              v43 |= 2u;
              goto LABEL_155;
            }

            if (*(_WORD *)v60 == 7509 && *(_BYTE *)(v60 + 2) == 35)
            {
              uint64_t v18 = 720932LL;
              if ((v43 & 4) != 0
                || (X509ExtensionParseAuthorityKeyIdentifier( &v56,  (unint64_t *)(a1 + 168),  (unint64_t *)(a1 + 176)) & 1) == 0)
              {
                return v18;
              }

              v43 |= 4u;
              goto LABEL_155;
            }

            if (*(_WORD *)v60 == 7509 && *(_BYTE *)(v60 + 2) == 14)
            {
              uint64_t v18 = 720933LL;
              if ((v43 & 8) != 0
                || (X509ExtensionParseSubjectKeyIdentifier( &v56,  (unint64_t *)(a1 + 184),  (unint64_t *)(a1 + 192)) & 1) == 0)
              {
                return v18;
              }

              v43 |= 8u;
              goto LABEL_155;
            }

            if (*(_WORD *)v60 == 7509 && *(_BYTE *)(v60 + 2) == 37)
            {
              uint64_t v18 = 720934LL;
              if ((v43 & 0x10) != 0
                || (X509ExtensionParseExtendedKeyUsage( &v56,  (unint64_t *)(a1 + 208),  (unint64_t *)(a1 + 216)) & 1) == 0)
              {
                return v18;
              }

              v43 |= 0x10u;
              goto LABEL_155;
            }

            if (*(_WORD *)v60 == 7509 && *(_BYTE *)(v60 + 2) == 17)
            {
              uint64_t v18 = 720935LL;
              if ((v43 & 0x20) != 0
                || (X509ExtensionParseSubjectAltName( &v56,  (unint64_t *)(a1 + 224),  (unint64_t *)(a1 + 232)) & 1) == 0)
              {
                return v18;
              }

              v43 |= 0x20u;
              goto LABEL_155;
            }
          }

          else if (v61 >= 8 && *(_DWORD *)v60 == -2042067414 && *(_DWORD *)(v60 + 3) == 1684273030)
          {
            uint64_t v18 = 720936LL;
            result = X509ExtensionParseAppleExtension( (uint64_t)&v56,  v60,  v61,  (unint64_t *)(a1 + 240),  (unint64_t *)(a1 + 248),  v42);
            if (!(_DWORD)result) {
              return v18;
            }
            if (v55 == 0xFF) {
              goto LABEL_189;
            }
            ++v55;
            goto LABEL_155;
          }

          if (__CFADD__(v56, v70)) {
            goto LABEL_187;
          }
          if (v56 > v56 + v70 || v56 + v70 > v57) {
            goto LABEL_186;
          }
          v56 += v70;
          if (v59) {
            *(_BYTE *)(a1 + 266) = 1;
          }
LABEL_155:
          if (v56 != v57) {
            return 720926LL;
          }
          if (__CFADD__(v62, v58)) {
            goto LABEL_187;
          }
          v39 = v62 + v58;
          if (v62 > v62 + v58) {
            goto LABEL_186;
          }
          id v40 = v63;
          if (v39 > v63) {
            goto LABEL_186;
          }
          v62 += v58;
        }

        while (v39 < v63);
      }

      if (v39 != v40) {
        return 720925LL;
      }
      if (v39 > v67 || v66 > v39) {
        goto LABEL_186;
      }
      id v66 = v39;
    }

    if (*(void *)(a1 + 32) < 3uLL)
    {
      uint64_t v18 = 720915LL;
      if (v66 != v67) {
        return v18;
      }
LABEL_170:
      if (__CFADD__(v68, v71)) {
        goto LABEL_187;
      }
      if (v68 > v68 + v71 || v68 + v71 > v69) {
        goto LABEL_186;
      }
      v68 += v71;
      *(void *)&v72[0] = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v72[0] + 1) = 0xAAAAAAAAAAAAAAAALL;
      unsigned __int8 v62 = 0LL;
      result = ccder_blob_decode_bitstring(&v68, v72, &v62);
      if (!(_DWORD)result) {
        return 720938LL;
      }
      if (v62 < 0xFFFFFFFFFFFFFFF9LL)
      {
        if (*((void *)&v72[0] + 1) >= *(void *)&v72[0])
        {
          id v53 = (v62 + 7) >> 3;
          if (v53 <= *((void *)&v72[0] + 1) - *(void *)&v72[0])
          {
            *(void *)(a1 + 56) = *(void *)&v72[0];
            *(void *)(a1 + 64) = v53;
            id v54 = v69;
            if (v68 <= v69)
            {
              uint64_t v18 = 0LL;
              *a2 = v68;
              a2[1] = v54;
              return v18;
            }
          }
        }

        goto LABEL_186;
      }

      goto LABEL_188;
    }

    if (v67 <= a2[1] && *a2 <= v67)
    {
      *a2 = v67;
      goto LABEL_170;
    }

LABEL_36:
  _Block_object_dispose(&v60, 8);
  _Block_object_dispose(v66, 8);

  _Block_object_dispose(&v68, 8);
  _Block_object_dispose(v74, 8);

  return v36;
}
}

  id v41 = -[MobileActivationDaemon creationQueue](self, "creationQueue");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3254779904LL;
  block[2] = __90__MobileActivationDaemon_copyAttestationDictionaryWithCompletionBlock_options_completion___block_invoke_293;
  block[3] = &__block_descriptor_72_e8_32s40s48s56bs64r_e5_v8__0l;
  id v58 = &v65;
  id v54 = v17;
  __int128 v55 = v8;
  int v56 = v9;
  id v57 = v10;
  dispatch_async((dispatch_queue_t)v41, block);

  if (cf) {
    CFRelease(cf);
  }
LABEL_27:
  _Block_object_dispose(&v65, 8);
}

void sub_100012140( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43)
{
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void __copy_helper_block_e8_32s40s48r56r64r72r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  _Block_object_assign((void *)(a1 + 48), *(const void **)(a2 + 48), 8);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 8);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 8);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 8);
}

void __destroy_helper_block_e8_32s40s48r56r64r72r(uint64_t a1)
{
}

uint64_t libInFieldCollectionLibraryCore(uint64_t a1)
{
  uint64_t v3 = 0LL;
  id v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v1 = libInFieldCollectionLibraryCore_frameworkLibrary;
  uint64_t v6 = libInFieldCollectionLibraryCore_frameworkLibrary;
  if (!libInFieldCollectionLibraryCore_frameworkLibrary)
  {
    __int128 v7 = *(_OWORD *)off_100255050;
    uint64_t v8 = 0LL;
    uint64_t v1 = _sl_dlopen(&v7, a1);
    v4[3] = v1;
    libInFieldCollectionLibraryCore_frameworkLibrary = v1;
  }

  _Block_object_dispose(&v3, 8);
  return v1;
}

void sub_100012750( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t libInFieldCollectionLibrary()
{
  uint64_t v3 = 0LL;
  uint64_t v0 = libInFieldCollectionLibraryCore((uint64_t)&v3);
  if (!v0) {
    libInFieldCollectionLibrary_cold_1(&v3);
  }
  uint64_t v1 = v0;
  if (v3) {
    free(v3);
  }
  return v1;
}

void OUTLINED_FUNCTION_0()
{
}

void reply_and_disconnect(uint64_t a1, id a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (NSDictionary *)&__NSDictionary0__struct;
  if (v8 && v9)
  {
    uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSError);
    if ((objc_opt_isKindOfClass(v9, v11) & 1) != 0)
    {
      id v12 = -[NSString localizedDescription](v9, "localizedDescription");
      id v13 = -[NSString userInfo](v9, "userInfo");
      id v14 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@ (%@)", v12, v13);

      id v9 = v14;
    }

    id v16 = v8;
    uint64_t v17 = v9;
    id v10 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL);
  }

  uint64_t v15 = lockdown_send_message(a1, v10, 100LL);
  if ((_DWORD)v15) {
    maLog((uint64_t)"reply_and_disconnect", 0LL, @"Failed to send response message: %d", v15);
  }
  lockdown_disconnect(a1);
}

BOOL init_lockdown_server(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  uint64_t v13 = 0LL;
  id v14 = &v13;
  uint64_t v15 = 0x2020000000LL;
  int v16 = 0;
  if (v4 && &_lockdown_checkin_xpc)
  {
    id v6 = [@"com.apple.mobileactivationd.lockdown" UTF8String];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3254779904LL;
    v10[2] = __init_lockdown_server_block_invoke;
    v10[3] = &__block_descriptor_48_e8_32s40r_e51_v24__0___lockdown_connection__8____CFDictionary__16l;
    id v11 = v3;
    id v12 = &v13;
    uint64_t v7 = lockdown_checkin_xpc(v6, 0LL, v5, v10);
    *((_DWORD *)v14 + 6) = v7;
    if ((_DWORD)v7)
    {
      maLog((uint64_t)"init_lockdown_server", 0LL, @"failed to checkin with lockdown: 0x%08x", v7);
      BOOL v8 = *((_DWORD *)v14 + 6) == 0;
    }

    else
    {
      BOOL v8 = 1LL;
    }
  }

  else
  {
    if (v4) {
      maLog((uint64_t)"init_lockdown_server", 0LL, @"Platform does not support lockdown.");
    }
    else {
      maLog((uint64_t)"init_lockdown_server", 0LL, @"invalid input");
    }
    BOOL v8 = 0LL;
  }

  _Block_object_dispose(&v13, 8);

  return v8;
}

void sub_100013288( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void __init_lockdown_server_block_invoke(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  id v82 = 0LL;
  unsigned int v83 = 0LL;
  uint64_t v77 = 0LL;
  id v78 = &v77;
  uint64_t v79 = 0x3032000000LL;
  id v80 = __Block_byref_object_copy__2;
  id v81 = __Block_byref_object_dispose__2;
  uint64_t v71 = 0LL;
  id v72 = (id *)&v71;
  uint64_t v73 = 0x3032000000LL;
  id v74 = __Block_byref_object_copy__2;
  id v75 = __Block_byref_object_dispose__2;
  id v76 = 0LL;
  if (!a3
    || (id v6 = -[__CFDictionary objectForKeyedSubscript:](a3, "objectForKeyedSubscript:", @"ClientName"),
        id v7 = isNSString(v6),
        BOOL v8 = v7 == 0LL,
        v7,
        v6,
        v8))
  {
    id v9 = @"unknown";
  }

  else
  {
    id v9 = (id)CFDictionaryGetValue(a3, @"ClientName");
  }

  id v10 = [*(id *)(a1 + 32) dark];
  data_ark_set(v10, 0LL, @"HostProcessName", v9, 0);

  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = lockdown_receive_message(a2, &v83);
  if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    id v59 = v83;
    id v21 = isNSDictionary(v83);
    BOOL v22 = v21 == 0LL;

    if (v22)
    {
      objc_storeStrong(v72 + 5, @"Error");
      id v11 =  createMobileActivationError( (uint64_t)"init_lockdown_server_block_invoke",  115LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid request.");
      id v12 = 0LL;
      id v13 = 0LL;
      id v14 = 0LL;
      id v15 = 0LL;
      id v58 = 0LL;
      goto LABEL_7;
    }

    id v60 = [v59 objectForKeyedSubscript:@"Command"];
    id v23 = isNSString(v60);
    BOOL v24 = v23 == 0LL;

    if (v24)
    {
      objc_storeStrong(v72 + 5, @"Error");
      id v11 =  createMobileActivationError( (uint64_t)"init_lockdown_server_block_invoke",  122LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Request missing required key: %@",  @"Command");
      id v12 = 0LL;
      id v13 = 0LL;
      id v14 = 0LL;
      id v15 = 0LL;
      id v58 = 0LL;
LABEL_33:
      int v16 = 0LL;
      goto LABEL_8;
    }

    id v25 = [v59 objectForKeyedSubscript:@"Options"];
    id v58 = v25;
    if (!v25) {
      goto LABEL_19;
    }
    id v26 = isNSDictionary(v25);
    BOOL v27 = v26 == 0LL;

    if (v27)
    {
      objc_storeStrong(v72 + 5, @"Error");
      uint64_t v37 =  createMobileActivationError( (uint64_t)"init_lockdown_server_block_invoke",  130LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid request value for key %@.",  @"Options");
      goto LABEL_30;
    }

    id v28 = [v58 objectForKeyedSubscript:@"FactoryActivation"];
    id v29 = isNSNumber(v28);

    if (v29)
    {
      id v30 = [v58 objectForKeyedSubscript:@"FactoryActivation"];
      unsigned int v31 = [v30 BOOLValue];
    }

    else
    {
LABEL_19:
      unsigned int v31 = 0;
    }

    maLog((uint64_t)"init_lockdown_server_block_invoke", 0LL, @"Host connection (%@): %@", v9, v60);
    if (([v60 isEqualToString:@"CreateActivationInfoRequest"] & 1) != 0
      || [v60 isEqualToString:@"CreateTunnel1ActivationInfoRequest"])
    {
      if (!v31)
      {
        id v34 = [v59 objectForKeyedSubscript:@"Value"];
        id v19 = isNSData(v34);

        uint64_t v35 = *(void **)(a1 + 32);
        v69[0] = _NSConcreteStackBlock;
        v69[1] = 3254779904LL;
        v69[2] = __init_lockdown_server_block_invoke_28;
        v69[3] = &__block_descriptor_64_e8_32s40r48r_e34_v24__0__NSDictionary_8__NSError_16l;
        v69[5] = &v71;
        v69[6] = &v77;
        v69[7] = a2;
        id v33 = v69;
        v69[4] = v9;
        [v35 createTunnel1ActivationInfo:v19 options:v58 withCompletionBlock:v69];
        int v16 = 0LL;
        uint64_t v18 = 0LL;
        id v15 = 0LL;
        id v14 = 0LL;
        id v13 = 0LL;
        goto LABEL_26;
      }

      uint64_t v32 = *(void **)(a1 + 32);
      v70[0] = _NSConcreteStackBlock;
      v70[1] = 3254779904LL;
      v70[2] = __init_lockdown_server_block_invoke_2;
      v70[3] = &__block_descriptor_64_e8_32s40r48r_e34_v24__0__NSDictionary_8__NSError_16l;
      v70[5] = &v71;
      v70[6] = &v77;
      v70[7] = a2;
      id v33 = v70;
      v70[4] = v9;
      [v32 createActivationInfoWithCompletionBlock:v70];
LABEL_24:
      int v16 = 0LL;
      uint64_t v18 = 0LL;
      id v15 = 0LL;
      id v14 = 0LL;
      id v13 = 0LL;
      id v19 = 0LL;
LABEL_26:
      id v12 = 0LL;
LABEL_27:
      id v36 = (id *)(v33 + 4);
LABEL_28:

      goto LABEL_10;
    }

    if ([v60 isEqualToString:@"HandleActivationInfoWithSessionRequest"])
    {
      id v13 = [v59 objectForKeyedSubscript:@"Value"];
      id v38 = isNSData(v13);
      BOOL v39 = v38 == 0LL;

      if (!v39)
      {
        id v68 = 0LL;
        id v12 = getActivationRecordFromData((uint64_t)v13, &v68);
        id v40 = (NSError *)v68;
        if (!v12)
        {
          unsigned int v49 = v40;
          id v67 = v40;
          id v12 = getSessionActivationRecordFromData(v13, &v67);
          int v16 = (NSError *)v67;

          if (v12)
          {
            id v50 = [v59 objectForKeyedSubscript:@"ActivationResponseHeaders"];
            id v14 = v50;
            if (!v50
              || (id v51 = isNSDictionary(v50),
                  BOOL v52 = v51 == 0LL,
                  v51,
                  !v52))
            {
              id v15 = [v14 objectForCaseInsensitiveKey:@"ARS"];
              id v53 = isNSString(v15);
              BOOL v54 = v53 == 0LL;

              if (v54)
              {
                objc_storeStrong(v72 + 5, @"Error");
                id v11 =  createMobileActivationError( (uint64_t)"init_lockdown_server_block_invoke_2",  217LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Request contains invalid key: %@",  @"ARS");
                goto LABEL_8;
              }

              uint64_t v18 = -[NSData initWithBase64EncodedString:options:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBase64EncodedString:options:",  v15,  1LL);
              if (!v18)
              {
                id v57 =  createMobileActivationError( (uint64_t)"init_lockdown_server_block_invoke_2",  223LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid activation signature");
                uint64_t v17 = v16;
                int v16 = v57;
                goto LABEL_9;
              }

              __int128 v55 = *(void **)(a1 + 32);
              v66[0] = _NSConcreteStackBlock;
              v66[1] = 3254779904LL;
              v66[2] = __init_lockdown_server_block_invoke_3;
              v66[3] = &__block_descriptor_64_e8_32s40r48r_e34_v24__0__NSDictionary_8__NSError_16l;
              v66[5] = &v71;
              v66[6] = &v77;
              v66[7] = a2;
              id v33 = v66;
              v66[4] = v9;
              [v55 handleActivationInfoWithSession:v13 activationSignature:v18 completionBlock:v66];
              id v19 = 0LL;
              goto LABEL_27;
            }

            objc_storeStrong(v72 + 5, @"Error");
            id v11 =  createMobileActivationError( (uint64_t)"init_lockdown_server_block_invoke_2",  207LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Request contains invalid key: %@",  @"ActivationResponseHeaders");
          }

          else
          {
            objc_storeStrong(v72 + 5, @"Error");
            id v11 =  createMobileActivationError( (uint64_t)"init_lockdown_server_block_invoke_2",  196LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  v16,  @"Failed to extract activation record.");
            id v12 = 0LL;
            id v14 = 0LL;
          }

          id v15 = 0LL;
          goto LABEL_8;
        }

        int v16 = v40;
        id v41 = *(void **)(a1 + 32);
        id v86 = @"ActivationRecord";
        id v87 = v12;
        id v42 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v87,  &v86,  1LL);
        v65[0] = _NSConcreteStackBlock;
        v65[1] = 3254779904LL;
        v65[2] = __init_lockdown_server_block_invoke_4;
        v65[3] = &__block_descriptor_64_e8_32s40r48r_e34_v24__0__NSDictionary_8__NSError_16l;
        v65[5] = &v71;
        v65[6] = &v77;
        v65[7] = a2;
        uint64_t v43 = v65;
        v65[4] = v9;
        [v41 handleActivationInfo:v42 withCompletionBlock:v65];
LABEL_41:
        id v36 = (id *)(v43 + 4);

        uint64_t v18 = 0LL;
        id v15 = 0LL;
        id v14 = 0LL;
        id v19 = 0LL;
        goto LABEL_28;
      }

      objc_storeStrong(v72 + 5, @"Error");
      id v11 =  createMobileActivationError( (uint64_t)"init_lockdown_server_block_invoke_2",  187LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Request missing required key: %@",  @"Value");
      id v12 = 0LL;
      goto LABEL_32;
    }

    if ([v60 isEqualToString:@"HandleActivationInfoRequest"])
    {
      id v12 = [v59 objectForKeyedSubscript:@"Value"];
      id v44 = isNSDictionary(v12);
      BOOL v45 = v44 == 0LL;

      if (!v45)
      {
        id v46 = *(void **)(a1 + 32);
        unsigned __int8 v84 = @"ActivationRecord";
        id v85 = v12;
        id v42 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v85,  &v84,  1LL);
        v64[0] = _NSConcreteStackBlock;
        v64[1] = 3254779904LL;
        v64[2] = __init_lockdown_server_block_invoke_5;
        v64[3] = &__block_descriptor_64_e8_32s40r48r_e34_v24__0__NSDictionary_8__NSError_16l;
        v64[5] = &v71;
        v64[6] = &v77;
        v64[7] = a2;
        uint64_t v43 = v64;
        v64[4] = v9;
        [v46 handleActivationInfo:v42 withCompletionBlock:v64];
        int v16 = 0LL;
        id v13 = 0LL;
        goto LABEL_41;
      }

      objc_storeStrong(v72 + 5, @"Error");
      id v11 =  createMobileActivationError( (uint64_t)"init_lockdown_server_block_invoke_2",  253LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Request missing required key: %@",  @"Value");
      goto LABEL_31;
    }

    if ([v60 isEqualToString:@"DeactivateRequest"])
    {
      id v47 = *(void **)(a1 + 32);
      v63[0] = _NSConcreteStackBlock;
      v63[1] = 3254779904LL;
      v63[2] = __init_lockdown_server_block_invoke_6;
      v63[3] = &__block_descriptor_64_e8_32s40r48r_e34_v24__0__NSDictionary_8__NSError_16l;
      v63[5] = &v71;
      v63[6] = &v77;
      v63[7] = a2;
      id v33 = v63;
      v63[4] = v9;
      [v47 deactivateDeviceWithCompletionBlock:v63];
      goto LABEL_24;
    }

    if ([v60 isEqualToString:@"CreateTunnel1SessionInfoRequest"])
    {
      id v48 = *(void **)(a1 + 32);
      v62[0] = _NSConcreteStackBlock;
      v62[1] = 3254779904LL;
      v62[2] = __init_lockdown_server_block_invoke_7;
      v62[3] = &__block_descriptor_64_e8_32s40r48r_e34_v24__0__NSDictionary_8__NSError_16l;
      v62[5] = &v71;
      v62[6] = &v77;
      v62[7] = a2;
      id v33 = v62;
      v62[4] = v9;
      [v48 createTunnel1SessionInfoWithCompletionBlock:v62];
      goto LABEL_24;
    }

    if ([v60 isEqualToString:@"GetActivationStateRequest"])
    {
      int v56 = *(void **)(a1 + 32);
      v61[0] = _NSConcreteStackBlock;
      v61[1] = 3254779904LL;
      v61[2] = __init_lockdown_server_block_invoke_8;
      v61[3] = &__block_descriptor_64_e8_32s40r48r_e34_v24__0__NSDictionary_8__NSError_16l;
      v61[5] = &v71;
      v61[6] = &v77;
      v61[7] = a2;
      id v33 = v61;
      v61[4] = v9;
      [v56 getActivationStateWithCompletionBlock:v61];
      goto LABEL_24;
    }

    objc_storeStrong(v72 + 5, @"Error");
    uint64_t v37 =  createMobileActivationError( (uint64_t)"init_lockdown_server_block_invoke_2",  312LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Received unknown command: %@",  v60);
LABEL_30:
    id v11 = v37;
    id v12 = 0LL;
LABEL_31:
    id v13 = 0LL;
LABEL_32:
    id v14 = 0LL;
    id v15 = 0LL;
    goto LABEL_33;
  }

  objc_storeStrong(v72 + 5, @"Error");
  id v11 =  createMobileActivationError( (uint64_t)"init_lockdown_server_block_invoke",  108LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to receive request from host: 0x%08x",  *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL));
  id v12 = 0LL;
  id v13 = 0LL;
  id v14 = 0LL;
  id v15 = 0LL;
  id v58 = 0LL;
  id v59 = 0LL;
LABEL_7:
  int v16 = 0LL;
  id v60 = 0LL;
LABEL_8:
  uint64_t v17 = (NSError *)v78[5];
  v78[5] = (uint64_t)v11;
LABEL_9:

  reply_and_disconnect(a2, v9, v72[5], (void *)v78[5]);
  uint64_t v18 = 0LL;
  id v19 = 0LL;
LABEL_10:
  id v20 = [*(id *)(a1 + 32) dark];
  data_ark_remove(v20, 0LL, @"HostProcessName");

  _Block_object_dispose(&v71, 8);
  _Block_object_dispose(&v77, 8);
}

void sub_1000140C0(_Unwind_Exception *a1)
{
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void __init_lockdown_server_block_invoke_2(uint64_t a1, id a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  if (!v5 || v6)
  {
    objc_storeStrong(v7, @"Error");
    BOOL v8 =  createMobileActivationError( (uint64_t)"init_lockdown_server_block_invoke_2",  151LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  v6,  @"Failed to retrieve activation info.");
  }

  else
  {
    objc_storeStrong(v7, @"Value");
    BOOL v8 = (NSError *)[v5 copy];
  }

  id v9 = v8;
  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

  reply_and_disconnect( *(void *)(a1 + 56),  *(id *)(a1 + 32),  *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL),  *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
}

void __copy_helper_block_e8_32s40r48r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 8);
  _Block_object_assign((void *)(a1 + 48), *(const void **)(a2 + 48), 8);
}

void __destroy_helper_block_e8_32s40r48r(uint64_t a1)
{
}

void __init_lockdown_server_block_invoke_28(uint64_t a1, id a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  if (!v5 || v6)
  {
    objc_storeStrong(v7, @"Error");
    BOOL v8 =  createMobileActivationError( (uint64_t)"init_lockdown_server_block_invoke",  167LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  v6,  @"Failed to retrieve activation info.");
  }

  else
  {
    objc_storeStrong(v7, @"Value");
    BOOL v8 = (NSError *)[v5 copy];
  }

  id v9 = v8;
  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

  reply_and_disconnect( *(void *)(a1 + 56),  *(id *)(a1 + 32),  *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL),  *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
}

void __init_lockdown_server_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), @"Error");
    id v5 = a3;
    id v6 =  createMobileActivationError( (uint64_t)"init_lockdown_server_block_invoke_3",  230LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v5,  @"Failed to activate device.");

    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
    BOOL v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }

  reply_and_disconnect( *(void *)(a1 + 56),  *(id *)(a1 + 32),  *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL),  *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
}

void __init_lockdown_server_block_invoke_4(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), @"Error");
    id v5 = a3;
    id v6 =  createMobileActivationError( (uint64_t)"init_lockdown_server_block_invoke_4",  240LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v5,  @"Failed to activate device.");

    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
    BOOL v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }

  reply_and_disconnect( *(void *)(a1 + 56),  *(id *)(a1 + 32),  *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL),  *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
}

void __init_lockdown_server_block_invoke_5(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), @"Error");
    id v5 = a3;
    id v6 =  createMobileActivationError( (uint64_t)"init_lockdown_server_block_invoke_5",  260LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v5,  @"Failed to activate device.");

    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
    BOOL v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }

  reply_and_disconnect( *(void *)(a1 + 56),  *(id *)(a1 + 32),  *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL),  *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
}

void __init_lockdown_server_block_invoke_6(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), @"Error");
    id v5 = a3;
    id v6 =  createMobileActivationError( (uint64_t)"init_lockdown_server_block_invoke_6",  272LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v5,  @"Failed to deactivate device.");

    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
    BOOL v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }

  reply_and_disconnect( *(void *)(a1 + 56),  *(id *)(a1 + 32),  *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL),  *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
}

void __init_lockdown_server_block_invoke_7(uint64_t a1, id a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  if (!v5 || v6)
  {
    objc_storeStrong(v7, @"Error");
    BOOL v8 =  createMobileActivationError( (uint64_t)"init_lockdown_server_block_invoke_7",  284LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v6,  @"Failed to retrieve session info.");
  }

  else
  {
    objc_storeStrong(v7, @"Value");
    BOOL v8 = (NSError *)[v5 copy];
  }

  id v9 = v8;
  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

  reply_and_disconnect( *(void *)(a1 + 56),  *(id *)(a1 + 32),  *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL),  *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
}

void __init_lockdown_server_block_invoke_8(uint64_t a1, id a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  if (!v5 || v6)
  {
    objc_storeStrong(v7, @"Error");
    id v12 =  createMobileActivationError( (uint64_t)"init_lockdown_server_block_invoke_8",  299LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v6,  @"Failed to retrieve activation state.");
    uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v8 = *(id *)(v13 + 40);
    *(void *)(v13 + 40) = v12;
  }

  else
  {
    objc_storeStrong(v7, @"Value");
    id v8 = [v5 objectForKeyedSubscript:@"ActivationState"];
    id v9 = [v8 copy];
    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;
  }

  reply_and_disconnect( *(void *)(a1 + 56),  *(id *)(a1 + 32),  *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL),  *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
}

NSMutableDictionary *lockcrypto_query_certificate_properties(uint64_t a1, id a2, void *a3)
{
  id v5 = a2;
  id v6 = v5;
  id v149 = 0LL;
  id v150 = 0LL;
  v147[1] = 0LL;
  uint64_t v148 = 0LL;
  unint64_t v146 = 0LL;
  v147[0] = 0LL;
  __int128 v145 = 0uLL;
  __int128 v143 = 0uLL;
  unint64_t v144 = 0LL;
  int v142 = 0;
  unint64_t v141 = 0LL;
  BOOL v140 = 0;
  if (!a1 || !v5)
  {
    id v9 =  createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  229LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
    uint64_t v7 = 0LL;
    goto LABEL_15;
  }

  uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  if (!v7)
  {
    id v9 =  createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  235LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate dictionary.");
LABEL_15:
    id v10 = 0LL;
    id v14 = 0LL;
    id v15 = 0LL;
    int v16 = 0LL;
    if (v9) {
      goto LABEL_229;
    }
    goto LABEL_179;
  }

  if (&_SecCertificateCopyExtensionValue)
  {
    id v8 = (id)SecCertificateCopyExtensionValue(a1, v6, 0LL);
    id v9 = 0LL;
    if (v8) {
      goto LABEL_6;
    }
LABEL_177:
    uint64_t v13 =  createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  245LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v9,  @"Failed to query DERSequence data for OID %@.",  v6);

    id v10 = 0LL;
LABEL_178:
    id v14 = 0LL;
    id v15 = 0LL;
    int v16 = 0LL;
    id v9 = v13;
    if (v13) {
      goto LABEL_229;
    }
    goto LABEL_179;
  }

  id v17 = v6;
  if (lockcrypto_query_oid_der_sequence_data_onceToken != -1) {
    dispatch_once(&lockcrypto_query_oid_der_sequence_data_onceToken, &__block_literal_global_3);
  }
  uint64_t v18 = (void *)SecCertificateCopyProperties(a1);
  id v19 = v18;
  if (v18)
  {
    v128 = v6;
    __int128 v157 = 0u;
    __int128 v158 = 0u;
    __int128 v155 = 0u;
    __int128 v156 = 0u;
    v127 = v18;
    id v20 = v18;
    id v21 = -[NSError countByEnumeratingWithState:objects:count:]( v20,  "countByEnumeratingWithState:objects:count:",  &v155,  &v162,  16LL);
    if (!v21)
    {
      id v23 = 0LL;
      goto LABEL_174;
    }

    id v22 = v21;
    id v23 = 0LL;
    v133 = v7;
    id v135 = *(id *)v156;
    v130 = v20;
    id v131 = v17;
    while (1)
    {
      BOOL v24 = 0LL;
      do
      {
        if (*(id *)v156 != v135) {
          objc_enumerationMutation(v20);
        }
        id v25 = *(void **)(*((void *)&v155 + 1) + 8LL * (void)v24);
        uint64_t v26 = objc_opt_class(&OBJC_CLASS___NSDictionary);
        if ((objc_opt_isKindOfClass(v25, v26) & 1) != 0)
        {
          id v27 = [v25 objectForKeyedSubscript:@"label"];
          uint64_t v28 = objc_opt_class(&OBJC_CLASS___NSString);
          if ((objc_opt_isKindOfClass(v27, v28) & 1) != 0 && [v27 isEqualToString:v17])
          {
            id v29 = [v25 objectForKeyedSubscript:@"value"];

            if (v29)
            {
              uint64_t v30 = objc_opt_class(&OBJC_CLASS___NSArray);
              if ((objc_opt_isKindOfClass(v29, v30) & 1) != 0)
              {
                id v132 = v22;
                __int128 v153 = 0u;
                __int128 v154 = 0u;
                __int128 v151 = 0u;
                __int128 v152 = 0u;
                id v23 = v29;
                id v31 = [v23 countByEnumeratingWithState:&v151 objects:&v159 count:16];
                if (!v31) {
                  goto LABEL_47;
                }
                id v32 = v31;
                uint64_t v33 = *(void *)v152;
                while (1)
                {
                  for (i = 0LL; i != v32; i = (char *)i + 1)
                  {
                    if (*(void *)v152 != v33) {
                      objc_enumerationMutation(v23);
                    }
                    uint64_t v35 = *(void **)(*((void *)&v151 + 1) + 8LL * (void)i);
                    uint64_t v36 = objc_opt_class(&OBJC_CLASS___NSDictionary);
                    if ((objc_opt_isKindOfClass(v35, v36) & 1) == 0)
                    {
                      id v37 = 0LL;
LABEL_44:
                      id v8 = 0LL;
                      goto LABEL_45;
                    }

                    id v37 = [v35 objectForKeyedSubscript:@"label"];
                    if (!v37) {
                      goto LABEL_44;
                    }
                    uint64_t v38 = objc_opt_class(&OBJC_CLASS___NSString);
                    if ((objc_opt_isKindOfClass(v37, v38) & 1) == 0
                      || ![v37 isEqualToString:@"Unparsed Data"])
                    {
                      goto LABEL_44;
                    }

                    id v8 = [v35 objectForKeyedSubscript:@"value"];
                    if (v8)
                    {
                      uint64_t v39 = objc_opt_class(&OBJC_CLASS___NSData);
                      if ((objc_opt_isKindOfClass(v8, v39) & 1) != 0
                        && ![v8 isEqualToData:lockcrypto_query_oid_der_sequence_data_ASN1DERNull])
                      {

                        __int128 v100 = 0LL;
                        id v6 = v128;
                        uint64_t v7 = v133;
                        id v101 = v130;
                        id v17 = v131;
                        id v19 = v127;
                        goto LABEL_176;
                      }
                    }

LABEL_45:
                  }

                  id v32 = [v23 countByEnumeratingWithState:&v151 objects:&v159 count:16];
                  if (!v32)
                  {
LABEL_47:

                    id v22 = v132;
                    uint64_t v7 = v133;
                    id v20 = v130;
                    id v17 = v131;
                    goto LABEL_49;
                  }
                }
              }

              id v23 = v29;
            }

            else
            {
              id v23 = 0LL;
            }
          }
        }

        else
        {
          id v27 = 0LL;
        }

  if ((v22 & 1) != 0) {
    goto LABEL_10;
  }
  id v37 = data_ark_copy(*(void **)(a1 + 40), 0LL, *(void **)(a1 + 96));
  uint64_t v38 = *(void *)(*(void *)(a1 + 136) + 8LL);
  uint64_t v39 = *(void **)(v38 + 40);
  *(void *)(v38 + 40) = v37;

  id v40 = isNSNumber(*(void **)(*(void *)(*(void *)(a1 + 136) + 8LL) + 40LL));
  if (!v40)
  {
    id v41 = *(void *)(*(void *)(a1 + 136) + 8LL);
    id v42 = *(void **)(v41 + 40);
    *(void *)(v41 + 40) = &off_10026D530;
  }

  [*(id *)(*(void *)(*(void *)(a1 + 136) + 8) + 40) doubleValue];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 144) + 8LL) + 24LL) = (exp2(v43) * 60.0);
  id v44 = copyLoggingHandle();
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v45 = *(void *)(a1 + 72);
    uint64_t v46 = *(_DWORD *)(*(void *)(*(void *)(a1 + 144) + 8LL) + 24LL);
    *(_DWORD *)buf = 138543618;
    int v55 = v45;
    int v56 = 1024;
    LODWORD(v57) = v46;
    _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "Rescheduling %{public}@ OOB for %d seconds.",  buf,  0x12u);
  }

  uint64_t v47 = *(void **)(a1 + 40);
  uint64_t v48 = (const char *)[*(id *)(a1 + 104) UTF8String];
  unsigned int v49 = *(_DWORD *)(*(void *)(*(void *)(a1 + 144) + 8LL) + 24LL);
  v51[0] = _NSConcreteStackBlock;
  v51[1] = 3221225472LL;
  v51[2] = __dcrt_oob_activity_handler_block_invoke_343;
  void v51[3] = &__block_descriptor_33_e17_v16__0__DataArk_8l;
  BOOL v52 = *(_BYTE *)(a1 + 160);
  scheduleXPCActivity(v47, v48, v49, 1, 0x4000u, 0x1000u, v51);
LABEL_11:
  data_ark_set(*(void **)(a1 + 40), 0LL, *(void **)(a1 + 112), &__kCFBooleanFalse, 0);
  id v19 = *(void *)(*(void *)(a1 + 152) + 8LL);
  id v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = 0LL;
}

LABEL_49:
        BOOL v24 = (char *)v24 + 1;
      }

      while (v24 != v22);
      id v40 = -[NSError countByEnumeratingWithState:objects:count:]( v20,  "countByEnumeratingWithState:objects:count:",  &v155,  &v162,  16LL);
      id v22 = v40;
      if (!v40)
      {
LABEL_174:

        id v99 = 0LL;
        id v6 = v128;
        id v19 = v127;
        goto LABEL_175;
      }
    }
  }

  id v99 =  createMobileActivationError( (uint64_t)"lockcrypto_query_oid_der_sequence_data",  137LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy certificate properties.");
  id v23 = 0LL;
LABEL_175:
  id v101 = v99;
  id v8 = 0LL;
  __int128 v100 = v101;
LABEL_176:

  id v9 = v100;
  if (!v8) {
    goto LABEL_177;
  }
LABEL_6:
  id v10 = v8;
  id v149 = [v10 bytes];
  id v150 = [v10 length];
  uint64_t v11 = DERDecodeSeqInit((uint64_t)&v149, &v148, v147);
  if ((_DWORD)v11 == 2)
  {
    uint64_t v11 = DERDecodeItem((uint64_t)&v149, (unint64_t *)&v145);
    if (!(_DWORD)v11 && (void)v145 == 4LL) {
      uint64_t v11 = DERDecodeSeqInit((uint64_t)&v145 + 8, &v148, v147);
    }
  }

  if ((_DWORD)v11)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  267LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to intialize DER sequence: %d",  v11);
LABEL_12:
    uint64_t v13 = MobileActivationError;

    goto LABEL_178;
  }

  if (v148 == 0x2000000000000010LL)
  {
    uint64_t v102 = DERDecodeSeqNext(v147, (unint64_t *)&v145);
    id v14 = 0LL;
    v129 = v6;
    v134 = v7;
    if ((_DWORD)v102 || !*((void *)&v145 + 1))
    {
      id v15 = 0LL;
      int v16 = 0LL;
LABEL_225:
      if ((_DWORD)v102 != 1)
      {
        v118 =  createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  299LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to decode DER sequence: %d",  v102);

        id v9 = v118;
      }

      id v6 = v129;
      goto LABEL_228;
    }

    int v16 = 0LL;
    id v15 = 0LL;
    id v14 = 0LL;
    while (1)
    {
      unsigned int v103 = v14;
      id v104 =  +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  (unint64_t)v145 & 0x5FFFFFFFFFFFFFFFLL);
      id v14 = -[NSNumber stringValue](v104, "stringValue");

      if (!DERDecodeItem((uint64_t)&v145 + 8, (unint64_t *)&v143))
      {
        __int128 v145 = v143;
        unint64_t v146 = v144;
      }

      uint64_t v105 = v145 & 0x5FFFFFFFFFFFFFFFLL;
      if ((v145 & 0x5FFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v109 = DERParseBoolean((unsigned __int8 **)&v145 + 1, &v140);
        if ((_DWORD)v109)
        {
          NSFileAttributeKey v110 = createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  353LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to decode DER encoded ASN1_BOOLEAN: %d",  v109);
          goto LABEL_200;
        }

        v115 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v140);
      }

      else
      {
        if (v105 != 2)
        {
          if (v105 != 4) {
            goto LABEL_211;
          }

          if (v146)
          {
            uint64_t v106 = 0LL;
            int v107 = 0;
            while ((*(char *)(*((void *)&v145 + 1) + v106) & 0x80000000) == 0)
            {
              uint64_t v106 = ++v107;
              if (v146 <= v107)
              {
                id v108 = objc_alloc(&OBJC_CLASS___NSString);
                int v16 = -[NSString initWithBytes:length:encoding:]( v108,  "initWithBytes:length:encoding:",  *((void *)&v145 + 1),  v146,  1LL);
                if (v16)
                {
                  id v15 = 0LL;
                  goto LABEL_204;
                }

                v112 =  createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  326LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to decode DER encoded ANS1_OCTET_STRING.");

                id v15 = 0LL;
                goto LABEL_201;
              }
            }
          }

          v113 = objc_alloc(&OBJC_CLASS___NSData);
          id v15 = -[NSData initWithBytes:length:](v113, "initWithBytes:length:", *((void *)&v145 + 1), v146);
          if (v15)
          {
            int v16 = 0LL;
LABEL_204:
            if (v16) {
              v114 = (NSData *)v16;
            }
            else {
              v114 = v15;
            }
            -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v114, v14);
            goto LABEL_211;
          }

          v112 =  createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  332LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to decode DER encoded ANS1_OCTET_STRING.");

          int v16 = 0LL;
          goto LABEL_201;
        }

        uint64_t v111 = DERParseInteger64((char **)&v145 + 1, &v141);
        if ((_DWORD)v111)
        {
          NSFileAttributeKey v110 = createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  343LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to decode DER encoded ASN1_INTEGER: %d",  v111);
LABEL_200:
          v112 = v110;

LABEL_201:
          id v9 = v112;
          goto LABEL_211;
        }

        v115 = +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v141);
      }

      v116 = v115;
      -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v115, v14);

LABEL_211:
      uint64_t v102 = DERDecodeSeqNext(v147, (unint64_t *)&v145);
      if ((_DWORD)v102 || !*((void *)&v145 + 1)) {
        goto LABEL_225;
      }
    }
  }

  if (v148 != 0x2000000000000011LL)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  717LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Expected ASN1_CONSTR_SET or ASN1_CONSTR_SEQUENCE tag.");
    goto LABEL_12;
  }

  v134 = v7;
  id v41 = a3;
  id v42 = v6;
  __int128 v155 = 0uLL;
  __int128 v151 = 0uLL;
  uint64_t v162 = 0LL;
  v163 = 0LL;
  unint64_t v164 = 0LL;
  uint64_t v43 = DERDecodeSeqNext(v147, (unint64_t *)&v145);
  id v44 = 0LL;
  if ((_DWORD)v43 || (uint64_t v45 = *((void *)&v145 + 1)) == 0)
  {
    id v15 = 0LL;
    int v16 = 0LL;
LABEL_218:
    if ((_DWORD)v43 == 1) {
      goto LABEL_222;
    }
    uint64_t v126 = v43;
    v124 = @"Failed to decode DER sequence: %d";
    uint64_t v125 = 468LL;
    goto LABEL_220;
  }

  int v16 = 0LL;
  id v15 = 0LL;
  id v14 = 0LL;
  while (1)
  {
    *(void *)&__int128 v155 = v45;
    *((void *)&v155 + 1) = v146;
    uint64_t v46 = DERDecodeSeqInit((uint64_t)&v155, &v148, &v151);
    if ((_DWORD)v46)
    {
      v121 =  createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  479LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to intialize DER sequence: %d",  v46);

LABEL_241:
      id v9 = v121;
      goto LABEL_223;
    }

    id v6 = v42;
    a3 = v41;
    if (v148 != 0x2000000000000010LL)
    {
      v122 = createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  484LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Expected ASN1_CONSTR_SEQUENCE tag.",  v126);
      goto LABEL_239;
    }

    uint64_t v47 = DERDecodeSeqNext((unint64_t *)&v151, (unint64_t *)&v162);
    if ((_DWORD)v47 || !v163)
    {
      v122 = createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  492LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to decode DER sequence: %d",  v47);
      goto LABEL_239;
    }

    if (v162 != 22)
    {
      v122 = createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  497LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid DER tag.",  v126);
      goto LABEL_239;
    }

    uint64_t v48 = DERParseInteger((char **)&v163, &v142);
    if ((_DWORD)v48)
    {
      v122 = createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  503LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to parse DER integer: %d",  v48);
      goto LABEL_239;
    }

    if (v164 != 4) {
      break;
    }
    unsigned int v49 = objc_alloc(&OBJC_CLASS___NSString);
    id v44 = -[NSString initWithBytes:length:encoding:](v49, "initWithBytes:length:encoding:", v163, v164, 1LL);

    if (!v44)
    {
      v121 =  createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  514LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create string.");

      id v14 = 0LL;
      goto LABEL_241;
    }

    uint64_t v50 = DERDecodeSeqNext((unint64_t *)&v151, (unint64_t *)&v162);
    if ((_DWORD)v50 || !v163)
    {
      uint64_t v126 = v50;
      v124 = @"Failed to decode DER sequence: %d";
      uint64_t v125 = 520LL;
LABEL_220:
      v117 =  createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  v125,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  v124,  v126);

LABEL_221:
      id v9 = v117;
LABEL_222:
      id v14 = v44;
LABEL_223:
      id v6 = v42;
      a3 = v41;
      goto LABEL_228;
    }

    if (v162 <= 1)
    {
      switch(v162)
      {
        case 0xA000000000000000LL:
          id v60 = v134;
          id v61 = (NSData *)&off_10026D458;
          break;
        case 0xA000000000000001LL:
          id v60 = v134;
          id v61 = (NSData *)&off_10026D470;
          break;
        case 1LL:
          uint64_t v51 = DERParseBoolean(&v163, &v140);
          if (!(_DWORD)v51)
          {
            BOOL v52 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v140);
LABEL_93:
            uint64_t v63 = v52;
            -[NSMutableDictionary setObject:forKeyedSubscript:](v134, "setObject:forKeyedSubscript:", v52, v44);

            goto LABEL_149;
          }

          uint64_t v126 = v51;
          v124 = @"Failed to decode DER encoded ASN1_BOOLEAN: %d";
          uint64_t v125 = 559LL;
          goto LABEL_220;
        default:
          goto LABEL_149;
      }

          id v9 = v58;
          if (!v2) {
            goto LABEL_24;
          }
          goto LABEL_17;
        }

        id v2 =  createMobileActivationError( (uint64_t)"collection_activity_handler_block_invoke_2",  5025LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create collection interface.");
        id v17 = 0;
        id v4 = 0LL;
        id v5 = 0LL;
        id v6 = 0LL;
LABEL_48:
        id v8 = 0LL;
        goto LABEL_49;
      }

      id v2 =  createMobileActivationError( (uint64_t)"collection_activity_handler_block_invoke_2",  5019LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve OS build.");
      id v17 = 0;
    }

    else
    {
      id v2 =  createMobileActivationError( (uint64_t)"collection_activity_handler_block_invoke_2",  5013LL,  @"com.apple.MobileActivation.ErrorDomain",  -6LL,  *(void **)(a1 + 40),  @"Invalid server response.");
      id v17 = 0;
      id v3 = 0LL;
    }

    id v4 = 0LL;
    id v5 = 0LL;
    id v6 = 0LL;
    uint64_t v7 = 0LL;
    goto LABEL_48;
  }

  if (v10)
  {
    if (v10 == (id)-1LL)
    {
      id v2 =  createMobileActivationError( (uint64_t)"collection_activity_handler_block_invoke_2",  4994LL,  @"com.apple.MobileActivation.ErrorDomain",  -6LL,  *(void **)(a1 + 40),  @"Internal error.");
    }

    else
    {
      uint64_t v18 = *(void **)(a1 + 40);
      id v19 =  +[NSHTTPURLResponse localizedStringForStatusCode:]( &OBJC_CLASS___NSHTTPURLResponse,  "localizedStringForStatusCode:",  *(void *)(a1 + 96));
      id v20 =  createMobileActivationError( (uint64_t)"collection_activity_handler_block_invoke_2",  5000LL,  @"com.apple.MobileActivation.ServerErrorDomain",  (uint64_t)v10,  v18,  @"Server error: %ld (%@)",  v10,  v19);

      id v21 = *(void *)(a1 + 96);
      id v22 =  +[NSHTTPURLResponse localizedStringForStatusCode:]( &OBJC_CLASS___NSHTTPURLResponse,  "localizedStringForStatusCode:",  v21);
      id v2 =  createMobileActivationError( (uint64_t)"collection_activity_handler_block_invoke_2",  5000LL,  @"com.apple.MobileActivation.ErrorDomain",  -6LL,  v20,  @"Server error: %ld (%@)",  v21,  v22);
    }

    id v17 = 0;
    id v3 = 0LL;
    id v4 = 0LL;
    id v5 = 0LL;
    id v6 = 0LL;
    uint64_t v7 = 0LL;
    id v8 = 0LL;
    id v9 = 0LL;
    id v10 = 0LL;
    if (!v2) {
      goto LABEL_24;
    }
  }

  else
  {
    id v2 =  createMobileActivationError( (uint64_t)"collection_activity_handler_block_invoke_2",  4997LL,  @"com.apple.MobileActivation.ErrorDomain",  -6LL,  *(void **)(a1 + 40),  @"Network communication error.");
    id v17 = 0;
    id v3 = 0LL;
    id v4 = 0LL;
    id v5 = 0LL;
    id v6 = 0LL;
    uint64_t v7 = 0LL;
    id v8 = 0LL;
    id v9 = 0LL;
    if (!v2) {
      goto LABEL_24;
    }
  }

        __break(0x5519u);
      }

      goto LABEL_50;
    }

    int v16 = a1[1];
    if (*a1 > v16) {
      goto LABEL_49;
    }
    id v21 = *a1;
    id v22 = v16;
    result = ccder_blob_decode_tl(&v21, 0xA000000000000004LL, &v23);
    if ((_DWORD)result)
    {
      id v10 = v21;
      if (v22 < v21) {
        goto LABEL_49;
      }
      uint64_t v11 = v23;
      if (v23 > v22 - v21) {
        goto LABEL_49;
      }
      *a3 = v21;
      a3[1] = v11;
      id v12 = 4;
      goto LABEL_18;
    }

    id v17 = a1[1];
    if (*a1 > v17) {
      goto LABEL_49;
    }
    id v21 = *a1;
    id v22 = v17;
    result = ccder_blob_decode_tl(&v21, 0xA000000000000005LL, &v23);
    if ((_DWORD)result)
    {
      id v15 = 5;
      goto LABEL_27;
    }

    uint64_t v18 = a1[1];
    if (*a1 > v18) {
      goto LABEL_49;
    }
    id v21 = *a1;
    id v22 = v18;
    result = ccder_blob_decode_tl(&v21, 0x8000000000000006LL, &v23);
    if ((_DWORD)result)
    {
      id v10 = v21;
      if (v22 < v21) {
        goto LABEL_49;
      }
      uint64_t v11 = v23;
      if (v23 > v22 - v21) {
        goto LABEL_49;
      }
      *a3 = v21;
      a3[1] = v11;
      id v12 = 6;
      goto LABEL_18;
    }

    id v19 = a1[1];
    if (*a1 > v19) {
      goto LABEL_49;
    }
    id v21 = *a1;
    id v22 = v19;
    result = ccder_blob_decode_tl(&v21, 0x8000000000000007LL, &v23);
    if ((_DWORD)result)
    {
      id v10 = v21;
      if (v22 < v21) {
        goto LABEL_49;
      }
      uint64_t v11 = v23;
      if (v23 > v22 - v21) {
        goto LABEL_49;
      }
      *a3 = v21;
      a3[1] = v11;
      id v12 = 7;
LABEL_18:
      *a2 = v12;
      if (!__CFADD__(v10, v11))
      {
        id v8 = v10 + v11;
        goto LABEL_20;
      }

    __break(0x5519u);
    goto LABEL_50;
  }

  if (v2 != v4) {
    return 720904LL;
  }
  if (a2[1] && *a2) {
    return 0LL;
  }
  *a2 = 0LL;
  a2[1] = 0LL;
  return 720905LL;
}

LABEL_148:
      -[NSMutableDictionary setObject:forKeyedSubscript:](v60, "setObject:forKeyedSubscript:", v61, v44);
      goto LABEL_149;
    }

    if (v162 == 2)
    {
      uint64_t v62 = DERParseInteger64((char **)&v163, &v141);
      if (!(_DWORD)v62)
      {
        BOOL v52 = +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v141);
        goto LABEL_93;
      }

      uint64_t v126 = v62;
      v124 = @"Failed to decode DER encoded ASN1_INTEGER: %d";
      uint64_t v125 = 551LL;
      goto LABEL_220;
    }

    if (v162 != 0x2000000000000011LL)
    {
      if (v162 != 4) {
        goto LABEL_149;
      }

      if (v164)
      {
        uint64_t v53 = 0LL;
        int v54 = 0;
        while (((char)v163[v53] & 0x80000000) == 0)
        {
          uint64_t v53 = ++v54;
          if (v164 <= v54)
          {
            int v55 = DERDecodeItem((uint64_t)&v163, (unint64_t *)&v143);
            int v56 = objc_alloc(&OBJC_CLASS___NSString);
            id v57 = (unsigned __int8 **)&v143 + 1;
            if (v55) {
              id v57 = &v163;
            }
            id v58 = *v57;
            id v59 = &v144;
            if (v55) {
              id v59 = &v164;
            }
            int v16 = -[NSString initWithBytes:length:encoding:](v56, "initWithBytes:length:encoding:", v58, *v59, 1LL);
            if (!v16)
            {
              v124 = @"Failed to decode DER encoded ANS1_OCTET_STRING.";
              uint64_t v125 = 536LL;
              goto LABEL_220;
            }

            goto LABEL_144;
          }
        }
      }

      id v93 = objc_alloc(&OBJC_CLASS___NSData);
      v94 = -[NSData initWithBytes:length:](v93, "initWithBytes:length:", v163, v164);

      if (!v94)
      {
        v117 =  createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  542LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to decode DER encoded ANS1_OCTET_STRING.");

        id v15 = 0LL;
        int v16 = 0LL;
        goto LABEL_221;
      }

      int v16 = 0LL;
      id v15 = v94;
LABEL_144:
      if (v16) {
        id v61 = (NSData *)v16;
      }
      else {
        id v61 = v15;
      }
      id v60 = v134;
      goto LABEL_148;
    }

    id v64 = DERDecodeSeqContentInit((unint64_t *)&v163, (unint64_t *)&v151);
    if ((_DWORD)v64)
    {
      uint64_t v126 = (uint64_t)v64;
      v124 = @"Failed to intialize DER sequence: %d";
      uint64_t v125 = 571LL;
      goto LABEL_220;
    }

    v65 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v134, "setObject:forKeyedSubscript:", v65, v44);

    v138 = 0LL;
    unint64_t v139 = 0LL;
    unint64_t v136 = 0LL;
    uint64_t v137 = 0LL;
    uint64_t v159 = 0LL;
    v160 = 0LL;
    unint64_t v161 = 0LL;
    uint64_t v66 = DERDecodeSeqNext((unint64_t *)&v151, (unint64_t *)&v162);
    if (!(_DWORD)v66)
    {
      id v67 = v163;
      if (v163)
      {
        while (1)
        {
          v138 = v67;
          unint64_t v139 = v164;
          uint64_t v68 = DERDecodeSeqInit((uint64_t)&v138, &v148, &v136);
          if ((_DWORD)v68)
          {
            id v96 = createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  601LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to intialize DER sequence: %d",  v68);
            goto LABEL_156;
          }

          if (v148 != 0x2000000000000010LL)
          {
            id v96 = createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  606LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Expected ASN1_CONSTR_SEQUENCE tag.",  v126);
            goto LABEL_156;
          }

          uint64_t v69 = DERDecodeSeqNext(&v136, (unint64_t *)&v159);
          if ((_DWORD)v69 || !v160)
          {
            id v96 = createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  614LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to decode DER sequence: %d",  v69);
            goto LABEL_156;
          }

          if (v159 != 22)
          {
            id v96 = createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  619LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid DER tag.",  v126);
            goto LABEL_156;
          }

          uint64_t v70 = DERParseInteger((char **)&v160, &v142);
          if ((_DWORD)v70)
          {
            id v96 = createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  625LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to parse DER integer: %d",  v70);
            goto LABEL_156;
          }

          if (v161 != 4)
          {
            id v96 = createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  630LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid property key length: %ld",  v164);
            goto LABEL_156;
          }

          uint64_t v71 = objc_alloc(&OBJC_CLASS___NSString);
          id v72 = -[NSString initWithBytes:length:encoding:](v71, "initWithBytes:length:encoding:", v160, v161, 1LL);
          if (!v72)
          {
            id v96 = createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  636LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create string.",  v126);
            goto LABEL_156;
          }

          uint64_t v73 = (NSError *)v72;
          uint64_t v74 = DERDecodeSeqNext(&v136, (unint64_t *)&v159);
          if ((_DWORD)v74 || !v160)
          {
            id v98 = createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  644LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to decode DER sequence: %d",  v74);
LABEL_167:
            id v97 = v98;

            goto LABEL_168;
          }

          if (v159 <= 0) {
            break;
          }
          switch(v159)
          {
            case 1LL:
              uint64_t v85 = DERParseBoolean(&v160, &v140);
              if ((_DWORD)v85)
              {
                id v98 = createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  683LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to decode DER encoded ASN1_BOOLEAN: %d",  v85);
                goto LABEL_167;
              }

              id v86 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v140);
              break;
            case 2LL:
              uint64_t v87 = DERParseInteger64((char **)&v160, &v141);
              if ((_DWORD)v87)
              {
                id v98 = createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  675LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to decode DER encoded ASN1_INTEGER: %d",  v87);
                goto LABEL_167;
              }

              id v86 =  +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v141);
              break;
            case 4LL:

              if (v161)
              {
                uint64_t v75 = 0LL;
                int v76 = 0;
                while (((char)v160[v75] & 0x80000000) == 0)
                {
                  uint64_t v75 = ++v76;
                  if (v161 <= v76)
                  {
                    int v77 = DERDecodeItem((uint64_t)&v160, (unint64_t *)&v143);
                    id v78 = objc_alloc(&OBJC_CLASS___NSString);
                    uint64_t v79 = (unsigned __int8 **)&v143 + 1;
                    if (v77) {
                      uint64_t v79 = &v160;
                    }
                    id v80 = *v79;
                    id v81 = &v144;
                    if (v77) {
                      id v81 = &v161;
                    }
                    int v16 = -[NSString initWithBytes:length:encoding:]( v78,  "initWithBytes:length:encoding:",  v80,  *v81,  1LL);
                    if (!v16)
                    {
                      id v98 = createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  660LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to decode DER encoded ANS1_OCTET_STRING.",  v126);
                      goto LABEL_167;
                    }

                    goto LABEL_132;
                  }
                }
              }

              unsigned int v89 = objc_alloc(&OBJC_CLASS___NSData);
              id v90 = -[NSData initWithBytes:length:](v89, "initWithBytes:length:", v160, v161);

              if (!v90)
              {
                id v97 =  createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  666LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to decode DER encoded ANS1_OCTET_STRING.");

                id v15 = 0LL;
                int v16 = 0LL;
LABEL_168:
                id v9 = v73;
LABEL_157:

                id v9 = v97;
                goto LABEL_149;
              }

              int v16 = 0LL;
              id v15 = v90;
LABEL_132:
              if (v16) {
                p_isa = v16;
              }
              else {
                p_isa = (NSString *)&v15->super.isa;
              }
              id v82 = (NSNumber *)-[NSMutableDictionary objectForKeyedSubscript:](v134, "objectForKeyedSubscript:", v44);
              unsigned int v83 = v82;
              unsigned __int8 v84 = p_isa;
LABEL_136:
              -[NSNumber setObject:forKeyedSubscript:](v82, "setObject:forKeyedSubscript:", v84, v73);
              goto LABEL_137;
            default:
              goto LABEL_138;
          }

          unsigned int v83 = v86;
          id v88 = -[NSMutableDictionary objectForKeyedSubscript:](v134, "objectForKeyedSubscript:", v44);
          [v88 setObject:v83 forKeyedSubscript:v73];

LABEL_137:
LABEL_138:
          uint64_t v92 = DERDecodeSeqNext(&v136, (unint64_t *)&v159);
          if ((_DWORD)v92 != 1)
          {
            id v98 = createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  696LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"DER sequence is invalid: %d",  v92);
            goto LABEL_167;
          }

          v138 = 0LL;
          unint64_t v139 = 0LL;
          unint64_t v136 = 0LL;
          uint64_t v137 = 0LL;
          uint64_t v159 = 0LL;
          v160 = 0LL;
          unint64_t v161 = 0LL;
          uint64_t v66 = DERDecodeSeqNext((unint64_t *)&v151, (unint64_t *)&v162);
          if (!(_DWORD)v66)
          {
            id v67 = v163;
            if (v163) {
              continue;
            }
          }

          goto LABEL_154;
        }

        if (v159 == 0xA000000000000000LL)
        {
          id v82 = (NSNumber *)-[NSMutableDictionary objectForKeyedSubscript:](v134, "objectForKeyedSubscript:", v44);
          unsigned int v83 = v82;
          unsigned __int8 v84 = (NSString *)&off_10026D458;
        }

        else
        {
          if (v159 != 0xA000000000000001LL) {
            goto LABEL_138;
          }
          id v82 = (NSNumber *)-[NSMutableDictionary objectForKeyedSubscript:](v134, "objectForKeyedSubscript:", v44);
          unsigned int v83 = v82;
          unsigned __int8 v84 = (NSString *)&off_10026D470;
        }

        goto LABEL_136;
      }
    }

      v21 |= 4u;
      goto LABEL_154;
    }

    if (*(void *)v24 == 0x96463F78648862ALL && v24[8] == 1)
    {
      if ((v21 & 8) != 0) {
        goto LABEL_170;
      }
      id v82 = (_BYTE *)0xAAAAAAAAAAAAAAAALL;
      uint64_t v50 = ccder_blob_decode_tl(&v77, 0x2000000000000011LL, &v82);
      result = v74;
      if (v50)
      {
        *(void *)uint64_t v85 = 0xAAAAAAAAAAAAAAAALL;
        uint64_t v51 = *(void *)v85;
        if (__CFADD__(v77, *(void *)v85)) {
          goto LABEL_207;
        }
        if (&v77[*(void *)v85] == v78)
        {
          if (!*(_DWORD *)(a3 + 104))
          {
            if (v77 > &v77[*(void *)v85]) {
              goto LABEL_206;
            }
            *(void *)(a3 + 112) = v77;
            *(void *)(a3 + 120) = v51;
          }

          result = 0LL;
        }

        else
        {
LABEL_124:
          result = 262148LL;
        }
      }

      v21 |= 8u;
      goto LABEL_154;
    }

    if (*(void *)v24 != 0x9010DF78648862ALL || v24[8] != 52)
    {
      id v31 = *(void *)v24;
      id v32 = v24[8];
      if (v31 != 0x9010DF78648862ALL || v32 != 15)
      {
LABEL_168:
        result = 262150LL;
LABEL_202:
        if (*v17 == v87)
        {
          NSError *v17 = 0LL;
          *(void *)(a3 + 136) = 0LL;
        }

        return result;
      }

      if ((v21 & 0x40) != 0) {
        goto LABEL_170;
      }
      id v82 = (_BYTE *)0xAAAAAAAAAAAAAAAALL;
      id v34 = ccder_blob_decode_tl(&v77, 0x2000000000000011LL, &v82);
      result = v74;
      if (v34)
      {
        *(void *)uint64_t v85 = 0xAAAAAAAAAAAAAAAALL;
        if ((ccder_blob_decode_tl(&v77, v75, v85) & 1) != 0)
        {
          if (__CFADD__(v77, *(void *)v85)) {
            goto LABEL_207;
          }
          if (&v77[*(void *)v85] == v78) {
            result = 0LL;
          }
          else {
            result = 262148LL;
          }
        }

        else
        {
          result = 262148LL;
        }
      }

      v21 |= 0x40u;
      goto LABEL_154;
    }

    if ((v21 & 0x20) != 0)
    {
LABEL_170:
      result = 262149LL;
      goto LABEL_202;
    }

    v21 |= 0x20u;
LABEL_155:
    id v80 = v22;
  }

  while ((unint64_t)v22 < v81);
  if ((~v21 & 3) != 0)
  {
    result = 262156LL;
    goto LABEL_202;
  }

  int v55 = ccder_sizeof_tag(0x2000000000000011LL);
  int v56 = *(void *)(a3 + 48);
  result = ccder_sizeof_len(v56);
  id v57 = __CFADD__(v55, result);
  id v58 = v55 + result;
  if (v57) {
    goto LABEL_208;
  }
  if (v58 > 0x14)
  {
    result = 327689LL;
    goto LABEL_202;
  }

  memset(v85, 170, sizeof(v85));
  id v82 = (_BYTE *)0xAAAAAAAAAAAAAAAALL;
  unsigned int v83 = (_BYTE *)0xAAAAAAAAAAAAAAAALL;
  if (__CFADD__(v85, v58)) {
    goto LABEL_207;
  }
  if (&v85[v58] > (_BYTE *)&v86 || v85 > &v85[v58]) {
    goto LABEL_206;
  }
  id v82 = v85;
  unsigned int v83 = &v85[v58];
  result = ccder_blob_encode_tl(&v82, 0x2000000000000011LL, v56);
  if (!(_DWORD)result)
  {
    result = 327688LL;
    goto LABEL_202;
  }

  id v59 = v9[1];
  id v57 = __CFADD__(v59, 8LL);
  id v60 = v59 + 8;
  if (!v57)
  {
    id v61 = v9[2];
    id v57 = __CFADD__(v60, v61);
    uint64_t v62 = v60 + v61;
    if (!v57)
    {
      id v57 = __CFADD__(v62, 4LL);
      uint64_t v63 = v62 + 4;
      if (!v57 && v63 < 0xFFFFFFFFFFFFFFF8LL)
      {
        __chkstk_darwin(result);
        v65 = (char *)&v70 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        memset(v65, 170, ((v66 - 9) & 0xFFFFFFFFFFFFFFF8LL) + 8);
        ccdigest_init(v9, v65);
        ccdigest_update(v9, v65, v58, v85);
        ccdigest_update(v9, v65, *(void *)(a3 + 48), *(void *)(a3 + 40));
        id v15 = ((uint64_t (*)(unint64_t *, char *, _OWORD *))v9[7])(v9, v65, v87);
        goto LABEL_185;
      }
    }
  }

LABEL_154:
    if ((_DWORD)v66 != 1)
    {
      id v96 = createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  590LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to decode DER sequence: %d",  v66);
LABEL_156:
      id v97 = v96;
      goto LABEL_157;
    }

LABEL_149:
    if (v9) {
      goto LABEL_222;
    }
    uint64_t v95 = DERDecodeSeqNext((unint64_t *)&v151, (unint64_t *)&v162);
    if ((_DWORD)v95 != 1)
    {
      id v9 =  createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  710LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"DER sequence is invalid: %d",  v95);
      goto LABEL_222;
    }

    __int128 v155 = 0uLL;
    __int128 v151 = 0uLL;
    uint64_t v162 = 0LL;
    v163 = 0LL;
    unint64_t v164 = 0LL;
    uint64_t v43 = DERDecodeSeqNext(v147, (unint64_t *)&v145);
    id v9 = 0LL;
    if (!(_DWORD)v43)
    {
      uint64_t v45 = *((void *)&v145 + 1);
      id v14 = v44;
      if (*((void *)&v145 + 1)) {
        continue;
      }
    }

    goto LABEL_218;
  }

  v122 = createMobileActivationError( (uint64_t)"lockcrypto_query_certificate_properties",  508LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid property key length: %ld",  v164);
LABEL_239:
  v123 = v122;

  id v9 = v123;
LABEL_228:
  uint64_t v7 = v134;
  if (v9) {
    goto LABEL_229;
  }
LABEL_179:
  if (!v7) {
    goto LABEL_230;
  }
  if (-[NSMutableDictionary count](v7, "count")) {
    goto LABEL_232;
  }
LABEL_229:

LABEL_230:
  uint64_t v7 = 0LL;
  if (a3) {
    *a3 = v9;
  }
LABEL_232:
  v119 = v7;

  return v119;
}

uint64_t lockcrypto_digest_data(void *a1, void *a2)
{
  id v3 = a1;
  if (!v3 || !a2)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_digest_data",  744LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
LABEL_8:
    id v8 = MobileActivationError;
    goto LABEL_9;
  }

  id v4 = calloc(1uLL, 0x14uLL);
  if (!v4)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_digest_data",  750LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate memory.");
    goto LABEL_8;
  }

  id v5 = v4;
  id v6 = v3;
  if (!CCDigest(8, [v6 bytes], objc_msgSend(v6, "length"), v5))
  {
    *a2 = v5;
    uint64_t v10 = 20LL;
    goto LABEL_10;
  }

  uint64_t v7 =  createMobileActivationError( (uint64_t)"lockcrypto_digest_data",  761LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to digest data.");
  free(v5);
  id v8 = v7;
LABEL_9:

  uint64_t v10 = 0xFFFFFFFFLL;
LABEL_10:

  return v10;
}

NSData *lockcrypto_create_pem_from_key(__SecKey *a1, const char *a2, NSError **a3)
{
  CFErrorRef error = 0LL;
  if (a1 && a2)
  {
    CFDataRef v5 = SecKeyCopyExternalRepresentation(a1, &error);
    CFDataRef v6 = v5;
    if (v5)
    {
      id v11 = 0LL;
      uint64_t v7 = lockcrypto_create_pem(v5, a2, &v11);
      id v8 = (NSError *)v11;
      if (v7) {
        goto LABEL_11;
      }
      id v9 =  createMobileActivationError( (uint64_t)"lockcrypto_create_pem_from_key",  800LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v8,  @"Failed to create pem data.");

      id v8 = v9;
      if (!a3) {
        goto LABEL_10;
      }
LABEL_8:
      id v8 = v8;
      uint64_t v7 = 0LL;
      *a3 = v8;
      goto LABEL_11;
    }

    id v8 =  createMobileActivationError( (uint64_t)"lockcrypto_create_pem_from_key",  794LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to convert SecKey to data.");
    if (a3) {
      goto LABEL_8;
    }
  }

  else
  {
    id v8 =  createMobileActivationError( (uint64_t)"lockcrypto_create_pem_from_key",  788LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
    CFDataRef v6 = 0LL;
    if (a3) {
      goto LABEL_8;
    }
  }

LABEL_10:
  uint64_t v7 = 0LL;
LABEL_11:
  if (error) {
    CFRelease(error);
  }

  return v7;
}

    *a3 = v12;
    goto LABEL_11;
  }

  id v14 = v13;
LABEL_12:
  CFRelease(v11);
  id v15 = v14;
LABEL_13:
  if (v8) {
    CFRelease(v8);
  }

  return v15;
}

  return v10;
}

  return v12;
}

  if (cf) {
    CFRelease(cf);
  }
  SecAccessControlRef cf = 0LL;

  return v5;
}

    id v11 = v11;
    uint64_t v10 = 0LL;
    *a2 = v11;
    goto LABEL_17;
  }

  CFDataRef v6 = v3;
  uint64_t v7 = (void *)remote_device_copy_property(v5, [v6 UTF8String]);
  id v8 = v7;
  if (!v7)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"copyBridgeKey",  284LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve bridgeOS key: %@",  v6);
    goto LABEL_15;
  }

  if (xpc_get_type(v7) == (xpc_type_t)&_xpc_type_uint64)
  {
    id v9 =  +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  xpc_uint64_get_value(v8));
    if (v9) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

  id v9 = (NSNumber *)_CFXPCCreateCFObjectFromXPCObject(v8);
  if (!v9)
  {
LABEL_14:
    MobileActivationError = createMobileActivationError( (uint64_t)"copyBridgeKey",  294LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to convert value.");
LABEL_15:
    id v11 = MobileActivationError;
    if (!a2) {
      goto LABEL_16;
    }
    goto LABEL_10;
  }

    uint64_t v7 = *(void *)((char *)*(&off_10025B940 + (int)(v3 + 1882357538))
                   + 8
                   * (int)((50
                          * (((uint64_t (*)(void))*(&off_10025B940 + (int)(v3 + 1882357690)))(v3 + 874779862 + *((_DWORD *)*(&off_10025B940 + (int)(v3 + 1882357511)) + 6 * v6 + 4)) != 0)) ^ (v3 + 1882357617))
                   - 4)
       - 4LL;
    __asm { BR              X9 }
  }

  if (v4 == 1153981959)
  {
    CFDataRef v6 = 0;
    goto LABEL_10;
  }

  if (v4 == 1153981962)
  {
    CFDataRef v6 = 2;
    goto LABEL_10;
  }

  CFDataRef v5 = 0LL;
  do
  {
    CFDataRef v6 = *v3++;
    CFDataRef v5 = v6 | (v5 << 8);
    --v2;
  }

  while (v2);
  result = 0LL;
  *a2 = v5;
  return result;
}

NSData *lockcrypto_create_pem(void *a1, const char *a2, void *a3)
{
  id v5 = a1;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  *(_OWORD *)__str = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  *(_OWORD *)__src = 0u;
  __int128 v17 = 0u;
  if (v5 && a2)
  {
    CFDataRef v6 = objc_autoreleasePoolPush();
    id v7 = [v5 base64EncodedDataWithOptions:1];
    id v8 = (NSData *)[v7 length];
    if (v8)
    {
      int v9 = snprintf(__str, 0x50uLL, "-----BEGIN %s-----\n", a2);
      uint64_t v10 = (char *)v8 + v9 + snprintf(__src, 0x50uLL, "\n-----END %s-----", a2);
      id v11 = (char *)malloc((size_t)(v10 + 1));
      if (v11)
      {
        id v12 = v11;
        uint64_t v13 = &strcpy(v11, __str)[v9];
        objc_msgSend(v7, "getBytes:range:", v13, 0, v8);
        strcpy((char *)v8 + (void)v13, __src);
        id v8 = -[NSData initWithBytesNoCopy:length:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBytesNoCopy:length:",  v12,  v10);
        if (v8) {
          goto LABEL_6;
        }
        id v14 =  createMobileActivationError( (uint64_t)"lockcrypto_create_pem",  1404LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create pem data.");
        free(v12);
      }

      else
      {
        id v14 =  createMobileActivationError( (uint64_t)"lockcrypto_create_pem",  1391LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate buffer.");
        id v8 = 0LL;
      }

uint64_t lockcrypto_genenerate_keypair(uint64_t a1, void *a2, NSData **a3, void *a4)
{
  CFErrorRef error = 0LL;
  v27[0] = kSecAttrKeyTypeRSA;
  v26[0] = kSecAttrKeyType;
  v26[1] = kSecAttrKeySizeInBits;
  id v7 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1);
  v27[1] = v7;
  id v8 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v27,  v26,  2LL);

  int v9 = SecKeyCreateRandomKey((CFDictionaryRef)v8, &error);
  uint64_t v10 = v9;
  if (!v9)
  {
    __int128 v17 =  createMobileActivationError( (uint64_t)"lockcrypto_genenerate_keypair",  835LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to generate private key.");
    uint64_t v13 = 0LL;
    id v12 = 0LL;
    if (!a4) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }

  id v11 = SecKeyCopyPublicKey(v9);
  id v12 = v11;
  if (!v11)
  {
    __int128 v17 =  createMobileActivationError( (uint64_t)"lockcrypto_genenerate_keypair",  841LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query public key.");
    uint64_t v13 = 0LL;
    if (!a4) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }

  id v24 = 0LL;
  uint64_t v13 = lockcrypto_create_pem_from_key(v11, "RSA PUBLIC KEY", (NSError **)&v24);
  id v14 = (NSError *)v24;
  if (!a2)
  {
    id v15 =  createMobileActivationError( (uint64_t)"lockcrypto_genenerate_keypair",  847LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v14,  @"Failed to create public key pem data.");

    id v14 = v15;
  }

  id v23 = v14;
  int v16 = lockcrypto_create_pem_from_key(v10, "RSA PRIVATE KEY", (NSError **)&v23);
  __int128 v17 = (NSError *)v23;

  if (!v16)
  {
    __int128 v22 =  createMobileActivationError( (uint64_t)"lockcrypto_genenerate_keypair",  852LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v17,  @"Failed to create private key pem data.");

    __int128 v17 = v22;
    if (!a4)
    {
LABEL_15:
      int v16 = 0LL;
      uint64_t v18 = 0LL;
      __int128 v19 = 0LL;
      uint64_t v20 = 0LL;
      if (!v12) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }

NSData *lockcrypto_sign(__SecKey *a1, id a2, NSError **a3)
{
  id v5 = a2;
  CFDataRef v6 = v5;
  dataToSign = 0LL;
  if (!a1 || !v5)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_sign",  891LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
    goto LABEL_9;
  }

  int v7 = lockcrypto_digest_data(v5, &dataToSign);
  if (v7 <= 0)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_sign",  899LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to digest data.");
LABEL_9:
    uint64_t v13 = MobileActivationError;
    int v9 = 0LL;
    if (!a3) {
      goto LABEL_16;
    }
LABEL_10:
    uint64_t v13 = v13;
    id v14 = 0LL;
    *a3 = v13;
    goto LABEL_17;
  }

  unsigned int v8 = v7;
  size_t sigLen = SecKeyGetBlockSize(a1);
  int v9 = (uint8_t *)malloc(sigLen);
  if (v9)
  {
    OSStatus v10 = SecKeyRawSign(a1, 0x8002u, dataToSign, v8, v9, &sigLen);
    if (v10)
    {
      id v11 = createMobileActivationError( (uint64_t)"lockcrypto_sign",  920LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to sign data: %ld",  v10);
    }

    else
    {
      id v15 = objc_alloc(&OBJC_CLASS___NSData);
      int v16 = -[NSData initWithBytesNoCopy:length:](v15, "initWithBytesNoCopy:length:", v9, sigLen);
      if (v16)
      {
        id v14 = v16;
        uint64_t v13 = 0LL;
        int v9 = 0LL;
        goto LABEL_17;
      }

      id v11 = createMobileActivationError( (uint64_t)"lockcrypto_sign",  928LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to encode signature.");
    }
  }

  else
  {
    id v11 = createMobileActivationError( (uint64_t)"lockcrypto_sign",  909LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate memory.");
  }

  uint64_t v13 = v11;
  if (a3) {
    goto LABEL_10;
  }
LABEL_16:
  id v14 = 0LL;
LABEL_17:
  if (dataToSign) {
    free(dataToSign);
  }
  dataToSign = 0LL;
  if (v9) {
    free(v9);
  }

  return v14;
}

uint64_t lockcrypto_verify(__SecKey *a1, id a2, void *a3, NSError **a4)
{
  id v7 = a2;
  id v8 = a3;
  int v9 = v8;
  signedData = 0LL;
  if (a1 && v7 && v8)
  {
    int v10 = lockcrypto_digest_data(v8, &signedData);
    if (v10 <= 0)
    {
      int v16 = @"Invalid digest length.";
      uint64_t v17 = 971LL;
    }

    else
    {
      unsigned int v11 = v10;
      id v12 = v7;
      uint64_t v13 = (const uint8_t *)[v12 bytes];
      id v14 = [v12 length];
      uint64_t v15 = SecKeyRawVerify(a1, 0x8002u, signedData, v11, v13, (size_t)v14);
      if (!(_DWORD)v15)
      {
        uint64_t v20 = 0LL;
        uint64_t v21 = 1LL;
        goto LABEL_14;
      }

      uint64_t v23 = v15;
      int v16 = @"Failed to verify signature: %d";
      uint64_t v17 = 987LL;
    }

    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_verify",  v17,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  v16,  v23);
  }

  else
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_verify",  963LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
  }

  __int128 v19 = MobileActivationError;
  uint64_t v20 = v19;
  if (a4)
  {
    uint64_t v20 = v19;
    uint64_t v21 = 0LL;
    *a4 = v20;
  }

  else
  {
    uint64_t v21 = 0LL;
  }

id lockcrypto_extract_public_key_size(__SecCertificate *a1, void *a2)
{
  CFErrorRef error = 0LL;
  id v3 = SecCertificateCopyKey(a1);
  id v4 = v3;
  if (v3)
  {
    CFDataRef v5 = SecKeyCopyExternalRepresentation(v3, &error);
    if (v5)
    {
      CFDataRef v6 = v5;
      id v7 = -[__CFData length](v5, "length");

      id v8 = 0LL;
      if (!a2) {
        goto LABEL_10;
      }
      goto LABEL_8;
    }

    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_extract_public_key_size",  1025LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to copy public key data.");
  }

  else
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_extract_public_key_size",  1019LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy public key.");
  }

  id v8 = MobileActivationError;
  id v7 = 0LL;
  if (!a2) {
    goto LABEL_10;
  }
LABEL_8:
  if (!(_DWORD)v7) {
    *a2 = v8;
  }
LABEL_10:
  if (error) {
    CFRelease(error);
  }
  CFErrorRef error = 0LL;
  if (v4) {
    CFRelease(v4);
  }

  return v7;
}

SecKeyRef lockcrypto_extract_public(void *a1, NSError **a2)
{
  id v3 = a1;
  SecTrustRef trust = 0LL;
  if (!v3)
  {
    CFDataRef v6 =  createMobileActivationError( (uint64_t)"lockcrypto_extract_public",  1052LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    SecPolicyRef BasicX509 = 0LL;
    if (a2) {
      goto LABEL_12;
    }
LABEL_6:
    SecKeyRef v7 = 0LL;
    goto LABEL_13;
  }

  SecPolicyRef BasicX509 = SecPolicyCreateBasicX509();
  if (BasicX509)
  {
    if (SecTrustCreateWithCertificates(v3, BasicX509, &trust))
    {
      MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_extract_public",  1067LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create trust.");
    }

    else
    {
      SecKeyRef v8 = SecTrustCopyPublicKey(trust);
      if (v8)
      {
        SecKeyRef v7 = v8;
        CFDataRef v6 = 0LL;
        goto LABEL_13;
      }

      MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_extract_public",  1076LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy public key.");
    }
  }

  else
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_extract_public",  1058LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create policy.");
  }

  CFDataRef v6 = MobileActivationError;
  if (!a2) {
    goto LABEL_6;
  }
LABEL_12:
  CFDataRef v6 = v6;
  SecKeyRef v7 = 0LL;
  *a2 = v6;
LABEL_13:
  if (trust) {
    CFRelease(trust);
  }
  SecTrustRef trust = 0LL;
  if (BasicX509) {
    CFRelease(BasicX509);
  }

  return v7;
}

SecKeyRef lockcrypto_extract_public_with_intermediate(void *a1, NSError **a2)
{
  id v3 = a1;
  SecTrustRef trust = 0LL;
  SecTrustResultType result = kSecTrustResultInvalid;
  if (!v3)
  {
    CFDataRef v6 =  createMobileActivationError( (uint64_t)"lockcrypto_extract_public_with_intermediate",  1101LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    id v4 = 0LL;
    if (a2)
    {
LABEL_9:
      CFDataRef v6 = v6;
      SecKeyRef v7 = 0LL;
      *a2 = v6;
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  id v4 = (const void *)SecPolicyCreateiPhoneActivation();
  if (!v4)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_extract_public_with_intermediate",  1107LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create policy.");
    goto LABEL_8;
  }

  if (SecTrustCreateWithCertificates(v3, v4, &trust))
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_extract_public_with_intermediate",  1112LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create trust.");
    goto LABEL_8;
  }

  OSStatus v8 = SecTrustEvaluate(trust, &result);
  uint64_t v9 = result;
  if (v8 || result != kSecTrustResultProceed && result != kSecTrustResultUnspecified)
  {
    int v10 = (void *)SecTrustCopyFailureDescription(trust);
    CFDataRef v6 =  createMobileActivationError( (uint64_t)"lockcrypto_extract_public_with_intermediate",  1120LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to evaluate trust: %d (%@)",  v9,  v10);

    if (a2) {
      goto LABEL_9;
    }
LABEL_12:
    SecKeyRef v7 = 0LL;
    goto LABEL_13;
  }

  SecKeyRef v12 = SecTrustCopyPublicKey(trust);
  if (!v12)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_extract_public_with_intermediate",  1129LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy public key.");
LABEL_8:
    CFDataRef v6 = MobileActivationError;
    if (a2) {
      goto LABEL_9;
    }
    goto LABEL_12;
  }

  SecKeyRef v7 = v12;
  CFDataRef v6 = 0LL;
LABEL_13:
  if (trust) {
    CFRelease(trust);
  }
  SecTrustRef trust = 0LL;
  if (v4) {
    CFRelease(v4);
  }

  return v7;
}

NSData *lockcrypto_create_cert_request(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  int v10 = v9;
  uint64_t v57 = kSecOidCommonName;
  char v58 = SecASN1PrintableString;
  id v59 = v7;
  uint64_t v60 = 0LL;
  uint64_t v61 = 0LL;
  uint64_t v62 = 0LL;
  uint64_t v51 = kSecOidCountryName;
  char v52 = SecASN1PrintableString;
  uint64_t v53 = @"US";
  uint64_t v54 = 0LL;
  uint64_t v55 = 0LL;
  uint64_t v56 = 0LL;
  uint64_t v45 = kSecOidStateProvinceName;
  char v46 = SecASN1PrintableString;
  uint64_t v47 = @"CA";
  uint64_t v48 = 0LL;
  uint64_t v49 = 0LL;
  uint64_t v50 = 0LL;
  uint64_t v39 = kSecOidLocalityName;
  char v40 = SecASN1PrintableString;
  id v41 = @"Cupertino";
  uint64_t v42 = 0LL;
  uint64_t v43 = 0LL;
  uint64_t v44 = 0LL;
  uint64_t v33 = kSecOidOrganization;
  char v34 = SecASN1PrintableString;
  uint64_t v35 = @"Apple Inc.";
  uint64_t v36 = 0LL;
  uint64_t v37 = 0LL;
  uint64_t v38 = 0LL;
  v26[6] = 0LL;
  uint64_t v27 = kSecOidOrganizationalUnit;
  char v28 = SecASN1PrintableString;
  id v29 = @"iPhone";
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  uint64_t v32 = 0LL;
  v26[0] = &v57;
  v26[1] = &v51;
  void v26[2] = &v45;
  v26[3] = &v39;
  v26[4] = &v33;
  v26[5] = &v27;
  if (!v8 || !v9)
  {
    __int128 v19 =  createMobileActivationError( (uint64_t)"lockcrypto_create_cert_request",  1166LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
    unsigned int v11 = 0LL;
LABEL_11:
    SecKeyRef v14 = 0LL;
    goto LABEL_12;
  }

  id v25 = 0LL;
  unsigned int v11 = (const void *)lockcrypto_public_key_from_pem_data(v8, (NSError **)&v25);
  id v12 = v25;
  uint64_t v13 = v12;
  if (!v11)
  {
    __int128 v19 =  createMobileActivationError( (uint64_t)"lockcrypto_create_cert_request",  1172LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v12,  @"Failed to retrieve public key from data.");

    goto LABEL_11;
  }

  id v24 = v12;
  SecKeyRef v14 = lockcrypto_private_key_from_pem_data(v10, (NSError **)&v24);
  id v15 = v24;

  if (!v14)
  {
    __int128 v19 =  createMobileActivationError( (uint64_t)"lockcrypto_create_cert_request",  1178LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v15,  @"Failed to retrieve private key from data.");

LABEL_12:
    uint64_t v17 = 0LL;
    if (!a4) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }

  CertificateRequestWithParameters = (void *)SecGenerateCertificateRequestWithParameters(v26, 0LL, v11, v14);
  uint64_t v17 = CertificateRequestWithParameters;
  if (!CertificateRequestWithParameters)
  {
    __int128 v19 =  createMobileActivationError( (uint64_t)"lockcrypto_create_cert_request",  1184LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to generate certificate request.");

    if (!a4)
    {
LABEL_14:
      uint64_t v18 = 0LL;
      uint64_t v21 = 0LL;
      if (!v11) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }

LABEL_15:
  CFRelease(v11);
  uint64_t v21 = v18;
LABEL_16:
  if (v14) {
    CFRelease(v14);
  }

  return v21;
}

  return v8;
}

  if (*(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL))
  {
    uint64_t v18 = copyLoggingHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v19 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL);
      *(_DWORD *)buf = 138543362;
      int v77 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Failed to perform collection: %{public}@",  buf,  0xCu);
    }

    if (*(void *)(a1 + 104)
      && (mobileactivationErrorHasDomainAndErrorCode( *(void **)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL),  @"com.apple.MobileActivation.ErrorDomain",  (id)0xFFFFFFFFFFFFFFEALL) & 1) == 0)
    {
      writeSplunkLog( *(void **)(a1 + 32),  16LL,  *(void *)(a1 + 104),  (uint64_t)"issueCollection_block_invoke",  2590,  0LL,  @"%@",  v20,  *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL));
    }
  }

  data_ark_set(*(void **)(a1 + 32), 0LL, @"InFieldCollectionInFlight", &__kCFBooleanFalse, 0);
  SecTrustResultType result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL),  *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL));
  }
  return result;
}

    *a4 = v9;
    goto LABEL_16;
  }

  int v16 = 0LL;
  id v8 = security_copy_system_key(a2, 0LL, &v16);
  id v9 = (NSError *)v16;
  if (!v8)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"security_create_system_key_attestation",  248LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v9,  @"Failed to copy attestation key.");
    goto LABEL_14;
  }

  if (v7)
  {
    if ((unint64_t)[v7 length] >= 0x21)
    {
      MobileActivationError = createMobileActivationError( (uint64_t)"security_create_system_key_attestation",  254LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Nonce is too big (> 32 bytes).");
      goto LABEL_14;
    }

    if (!SecKeySetParameter(v8, kSecKeyParameterSETokenAttestationNonce, v7, &cf))
    {
      MobileActivationError = createMobileActivationError( (uint64_t)"security_create_system_key_attestation",  259LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  (void *)cf,  @"Failed to set nonce.");
LABEL_14:
      uint64_t v13 = MobileActivationError;

      id v9 = v13;
      if (!a4) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
  }

  unsigned int v11 = (void *)SecKeyCreateAttestation(v8, a1, &cf);
  if (!v11)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"security_create_system_key_attestation",  266LL,  @"com.apple.MobileActivation.ErrorDomain",  -11LL,  (void *)cf,  @"Failed to create attestation.");
    goto LABEL_14;
  }

  id v12 = v11;
LABEL_17:
  CFRelease(v8);
  SecKeyRef v14 = v12;
LABEL_18:
  if (cf) {
    CFRelease(cf);
  }
  SecAccessControlRef cf = 0LL;

  return v14;
}

  return v5;
}

  return v11;
}

  __break(0x5519u);
  return result;
}

    __break(0x5519u);
  }

  return result;
}

    __break(0x5519u);
  }

  return result;
}

uint64_t lockcrypto_public_key_from_pem_data(void *a1, NSError **a2)
{
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    CFDataRef v6 =  createMobileActivationError( (uint64_t)"lockcrypto_public_key_from_pem_data",  1808LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    CFDataRef v5 = 0LL;
    if (!a2)
    {
LABEL_10:
      uint64_t v8 = 0LL;
      goto LABEL_11;
    }

SecKeyRef lockcrypto_private_key_from_pem_data(void *a1, NSError **a2)
{
  id v3 = a1;
  id v4 = v3;
  CFErrorRef error = 0LL;
  if (v3)
  {
    id v12 = 0LL;
    CFDataRef v5 = lockcrypto_decode_pem(v3, "RSA PRIVATE KEY", (NSError **)&v12);
    CFDataRef v6 = (NSError *)v12;
    if (v5)
    {
      v14[0] = kSecAttrKeyType;
      v14[1] = kSecAttrKeyClass;
      v15[0] = kSecAttrKeyTypeRSA;
      v15[1] = kSecAttrKeyClassPrivate;
      id v7 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v15,  v14,  2LL);
      SecKeyRef v8 = SecKeyCreateWithData((CFDataRef)v5, (CFDictionaryRef)v7, &error);
      if (v8)
      {
        SecKeyRef v9 = v8;
        goto LABEL_11;
      }

      int v10 =  createMobileActivationError( (uint64_t)"lockcrypto_private_key_from_pem_data",  1785LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to create private key from key data.");
    }

    else
    {
      int v10 =  createMobileActivationError( (uint64_t)"lockcrypto_private_key_from_pem_data",  1775LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v6,  @"Failed to decode data.");

      id v7 = 0LL;
    }

    CFDataRef v6 = v10;
    if (a2) {
      goto LABEL_10;
    }
LABEL_6:
    SecKeyRef v9 = 0LL;
    goto LABEL_11;
  }

  CFDataRef v6 =  createMobileActivationError( (uint64_t)"lockcrypto_private_key_from_pem_data",  1769LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
  CFDataRef v5 = 0LL;
  id v7 = 0LL;
  if (!a2) {
    goto LABEL_6;
  }
LABEL_10:
  CFDataRef v6 = v6;
  SecKeyRef v9 = 0LL;
  *a2 = v6;
LABEL_11:
  if (error) {
    CFRelease(error);
  }
  CFErrorRef error = 0LL;

  return v9;
}

uint64_t lockcrypto_verify_device_cert(uint64_t a1, uint64_t a2, uint64_t a3, NSError **a4)
{
  SecTrustRef trust = 0LL;
  SecTrustResultType result = kSecTrustResultInvalid;
  if (!a1 || !a2)
  {
    id v12 =  createMobileActivationError( (uint64_t)"lockcrypto_verify_device_cert",  1222LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid input(s).");
    CFDataRef v6 = 0LL;
    FactoryDeviceCertificate = 0LL;
    SecKeyRef v8 = 0LL;
    if (a4) {
      goto LABEL_9;
    }
LABEL_13:
    uint64_t v13 = 0LL;
    goto LABEL_14;
  }

  if (a3)
  {
    v20[0] = a1;
    v20[1] = a2;
    v20[2] = a3;
    CFDataRef v6 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v20, 3LL);
    FactoryDeviceCertificate = (const void *)SecPolicyCreateiPhoneDeviceCertificate();
    SecKeyRef v8 = 0LL;
    if (!SecTrustCreateWithCertificates(v6, FactoryDeviceCertificate, &trust)) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }

  uint64_t v19 = a1;
  CFDataRef v6 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v19, 1LL);
  uint64_t v18 = a2;
  SecKeyRef v8 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v18, 1LL);
  FactoryDeviceCertificate = (const void *)SecPolicyCreateFactoryDeviceCertificate();
  if (SecTrustCreateWithCertificates(v6, FactoryDeviceCertificate, &trust))
  {
LABEL_11:
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_verify_device_cert",  1236LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to trust.");
    goto LABEL_12;
  }

  if (v8 && SecTrustSetAnchorCertificates(trust, (CFArrayRef)v8))
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_verify_device_cert",  1241LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to set anchor certs.");
LABEL_12:
    id v12 = MobileActivationError;
    if (a4) {
      goto LABEL_9;
    }
    goto LABEL_13;
  }

uint64_t lockcrypto_verify_factory_ucrt(__SecCertificate *a1, uint64_t a2, id a3, void *a4)
{
  id v7 = a3;
  SecKeyRef v8 = v7;
  SecTrustResultType result = kSecTrustResultInvalid;
  CFTypeRef cf = 0LL;
  SecTrustRef trust = 0LL;
  if (!a1 || !a2 || !v7)
  {
    uint64_t v13 =  createMobileActivationError( (uint64_t)"lockcrypto_verify_factory_ucrt",  1289LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
    OSStatus v9 = 0LL;
    uint64_t v10 = 0LL;
    SecKeyRef v14 = 0LL;
    id v15 = 0LL;
    int v16 = 0LL;
    AppleFDRProvisioning = 0LL;
    if (!a4) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }

  char v34 = a1;
  OSStatus v9 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v34, 1LL);
  uint64_t v33 = a2;
  uint64_t v10 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v33, 1LL);
  AppleFDRProvisioning = (const void *)SecPolicyCreateAppleFDRProvisioning();
  if (!AppleFDRProvisioning)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_verify_factory_ucrt",  1298LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create policy.");
    goto LABEL_12;
  }

  if (SecTrustCreateWithCertificates(v9, AppleFDRProvisioning, &trust))
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_verify_factory_ucrt",  1303LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create trust.");
LABEL_12:
    uint64_t v13 = MobileActivationError;
    goto LABEL_13;
  }

  if (SecTrustSetAnchorCertificates(trust, (CFArrayRef)v10))
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_verify_factory_ucrt",  1308LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to set anchors.");
    goto LABEL_12;
  }

  OSStatus v20 = SecTrustEvaluate(trust, &result);
  uint64_t v21 = result;
  if (v20 || result != kSecTrustResultProceed && result != kSecTrustResultUnspecified)
  {
    __int128 v22 = (void *)SecTrustCopyFailureDescription(trust);
    uint64_t v13 =  createMobileActivationError( (uint64_t)"lockcrypto_verify_factory_ucrt",  1316LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to evaluate trust: %d (%@)",  v21,  v22);

LABEL_13:
    SecKeyRef v14 = 0LL;
    id v15 = 0LL;
    int v16 = 0LL;
    if (!a4) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }

  uint64_t v23 = SecCertificateCopyCommonName(a1, (CFStringRef *)&cf);
  if ((_DWORD)v23)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_verify_factory_ucrt",  1322LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy common name: %d",  v23);
    goto LABEL_12;
  }

  id v29 = 0LL;
  SecKeyRef v14 = libaks_system_key_get_public(1LL, 1LL, (NSError **)&v29);
  uint64_t v13 = (NSError *)v29;
  if (!v14)
  {
    id v25 =  createMobileActivationError( (uint64_t)"lockcrypto_verify_factory_ucrt",  1328LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v13,  @"Failed to query SIK public key.");

    id v15 = 0LL;
LABEL_35:
    int v16 = 0LL;
    goto LABEL_39;
  }

  id v15 = -[NSData hexString](v14, "hexString");
  if (!v15)
  {
    id v25 =  createMobileActivationError( (uint64_t)"lockcrypto_verify_factory_ucrt",  1334LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate string from data.");

    goto LABEL_35;
  }

  id v24 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"sik-%@-%@", v8, v15);
  int v16 = v24;
  if (!v24)
  {
    uint64_t v26 = createMobileActivationError( (uint64_t)"lockcrypto_verify_factory_ucrt",  1340LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create string.",  v27,  v28);
LABEL_38:
    id v25 = v26;

LABEL_39:
    uint64_t v13 = v25;
    if (!a4)
    {
LABEL_15:
      uint64_t v17 = 0LL;
      uint64_t v18 = 0LL;
      if (!AppleFDRProvisioning) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }

NSString *lockcrypto_decode_error(void *a1, NSError **a2)
{
  id v3 = a1;
  id v4 = v3;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  *(_OWORD *)__str = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  *(_OWORD *)__little = 0u;
  __int128 v22 = 0u;
  if (!v3)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_decode_error",  1435LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    goto LABEL_12;
  }

  id v5 = v3;
  CFDataRef v6 = (const char *)[v5 bytes];
  id v7 = [v5 length];
  if (!v7)
  {
    uint64_t v17 = @"Invalid data length.";
    uint64_t v18 = 1442LL;
LABEL_11:
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_decode_error",  v18,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  v17);
LABEL_12:
    id v15 = MobileActivationError;
    id v12 = 0LL;
    if (!a2)
    {
LABEL_17:
      SecKeyRef v14 = 0LL;
      goto LABEL_18;
    }

NSData *lockcrypto_decode_pem(void *a1, const char *a2, NSError **a3)
{
  id v5 = a1;
  CFDataRef v6 = v5;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v26 = 0u;
  *(_OWORD *)__str = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  *(_OWORD *)__little = 0u;
  __int128 v23 = 0u;
  if (!v5 || !a2)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_decode_pem",  1489LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid inputs.");
    goto LABEL_12;
  }

  id v7 = v5;
  size_t v8 = (const char *)[v7 bytes];
  size_t v9 = (size_t)[v7 length];
  if ((v9 & 0x8000000000000000LL) != 0)
  {
    uint64_t v19 = @"Invalid data length.";
    uint64_t v20 = 1496LL;
LABEL_11:
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_decode_pem",  v20,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  v19);
LABEL_12:
    uint64_t v17 = MobileActivationError;
    SecKeyRef v14 = 0LL;
    if (!a3)
    {
LABEL_15:
      int v16 = 0LL;
      goto LABEL_16;
    }

NSMutableArray *lockcrypto_decode_pems(void *a1, const char *a2, NSError **a3)
{
  id v5 = a1;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v26 = 0u;
  *(_OWORD *)__str = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  *(_OWORD *)__little = 0u;
  __int128 v23 = 0u;
  if (!v5 || !a2)
  {
    id v12 =  createMobileActivationError( (uint64_t)"lockcrypto_decode_pems",  1547LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid input(s).");
    size_t v10 = 0LL;
LABEL_13:
    CFDataRef v6 = 0LL;
    goto LABEL_23;
  }

  CFDataRef v6 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  if (!v6)
  {
    id v12 =  createMobileActivationError( (uint64_t)"lockcrypto_decode_pems",  1553LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate array.");
    size_t v10 = 0LL;
    goto LABEL_23;
  }

  id v7 = v5;
  size_t v8 = (const char *)[v7 bytes];
  uint64_t v9 = (uint64_t)[v7 length];
  size_t v10 = 0LL;
  if (v8)
  {
    int64_t v11 = v9;
    id v12 = 0LL;
    if (v9 >= 1)
    {
      uint64_t v21 = a3;
      uint64_t v13 = 0LL;
      while (1)
      {
        int v14 = snprintf(__str, 0x50uLL, "-----BEGIN %s-----\n", a2);
        int v15 = snprintf(__little, 0x50uLL, "\n-----END %s-----", a2);
        int v16 = strnstr(v8, __str, v11);
        uint64_t v17 = strnstr(v8, __little, v11);
        if (!v16) {
          break;
        }
        id v12 = (NSError *)v17;
        if (!v17) {
          goto LABEL_18;
        }
        uint64_t v18 = -[NSData initWithBytesNoCopy:length:freeWhenDone:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBytesNoCopy:length:freeWhenDone:",  &v16[v14],  v17 - &v16[v14],  0LL);
        size_t v10 = -[NSData initWithBase64EncodedData:options:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBase64EncodedData:options:",  v18,  1LL);

        if (!v10)
        {
          id v12 =  createMobileActivationError( (uint64_t)"lockcrypto_decode_pems",  1582LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to decode data.");

          goto LABEL_19;
        }

        -[NSMutableArray addObject:](v6, "addObject:", v10);
        uint64_t v19 = (char *)v12 + v15;
        int64_t v11 = &v8[v11] - v19;

        size_t v8 = v19;
        uint64_t v13 = v10;
        if (v11 <= 0)
        {
          id v12 = 0LL;
          goto LABEL_19;
        }
      }

      id v12 = 0LL;
LABEL_18:
      size_t v10 = v13;
LABEL_19:
      a3 = v21;
    }
  }

  else
  {
    id v12 = 0LL;
  }

  if (!-[NSMutableArray count](v6, "count"))
  {

    if (a3)
    {
      id v12 = v12;
      CFDataRef v6 = 0LL;
      *a3 = v12;
      goto LABEL_23;
    }

    goto LABEL_13;
  }

LABEL_23:
  return v6;
}

  __int128 v26 = 0LL;
  if (v7) {
LABEL_24:
  }
    (*((void (**)(id, NSDictionary *, NSError *))v7 + 2))(v7, v26, v19);
LABEL_25:
}

    mach_msg_destroy(&msg);
    return v12;
  }

  mig_put_reply_port(msg.msgh_local_port);
  return v12;
}

  __break(0x5519u);
LABEL_24:
  __break(1u);
  return result;
}

NSData *lockcrypto_decode_pem_trailing_data(void *a1, uint64_t a2, NSError **a3)
{
  id v5 = a1;
  if (!v5 || !a2)
  {
    int64_t v11 =  createMobileActivationError( (uint64_t)"lockcrypto_decode_pem_trailing_data",  1615LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
    id v7 = 0LL;
    CFDataRef v6 = 0LL;
    if (!a3) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }

  CFDataRef v6 = -[NSString initWithData:encoding:](objc_alloc(&OBJC_CLASS___NSString), "initWithData:encoding:", v5, 4LL);
  if (!v6)
  {
    int64_t v11 =  createMobileActivationError( (uint64_t)"lockcrypto_decode_pem_trailing_data",  1621LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create string from pem data.");
    id v7 = 0LL;
    if (!a3) {
      goto LABEL_10;
    }
LABEL_18:
    int64_t v11 = v11;
    id v12 = 0LL;
    *a3 = v11;
    goto LABEL_19;
  }

  id v7 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"\n-----END %s-----",  a2);
  if (v7)
  {
    size_t v8 = -[NSString rangeOfString:](v6, "rangeOfString:", v7);
    if (v8 == (_BYTE *)0x7FFFFFFFFFFFFFFFLL)
    {
      MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_decode_pem_trailing_data",  1633LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"String does not exist.");
    }

    else
    {
      uint64_t v13 = v8;
      uint64_t v14 = v9;
      if (v8 >= [v5 length] || &v13[v14] >= objc_msgSend(v5, "length"))
      {
        MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_decode_pem_trailing_data",  1638LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid or no trailing data.");
      }

      else
      {
        int v15 = objc_alloc(&OBJC_CLASS___NSData);
        id v16 = v5;
        uint64_t v17 = -[NSData initWithBytes:length:]( v15,  "initWithBytes:length:",  &v13[(void)[v16 bytes] + v14],  (_BYTE *)objc_msgSend(v16, "length") - &v13[v14]);
        if (v17)
        {
          id v12 = v17;
          int64_t v11 = 0LL;
          goto LABEL_19;
        }

        MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_decode_pem_trailing_data",  1644LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to encode data.");
      }
    }
  }

  else
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_decode_pem_trailing_data",  1627LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create string.");
  }

  int64_t v11 = MobileActivationError;
  if (a3) {
    goto LABEL_18;
  }
LABEL_10:
  id v12 = 0LL;
LABEL_19:

  return v12;
}

NSData *lockcrypto_trailing_data_from_cert_pem_data(void *a1, NSError **a2)
{
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    CFDataRef v6 =  createMobileActivationError( (uint64_t)"lockcrypto_trailing_data_from_cert_pem_data",  1664LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_6;
  }

  id v9 = 0LL;
  id v5 = lockcrypto_decode_pem_trailing_data(v3, (uint64_t)"CERTIFICATE", (NSError **)&v9);
  CFDataRef v6 = (NSError *)v9;
  if (!v5)
  {
    id v7 =  createMobileActivationError( (uint64_t)"lockcrypto_trailing_data_from_cert_pem_data",  1670LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v6,  @"Failed to retrieve trailing pem data.");

    CFDataRef v6 = v7;
    if (!a2)
    {
LABEL_4:
      id v5 = 0LL;
      goto LABEL_7;
    }

uint64_t lockcrypto_identity_from_pem_data(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = v6;
  if (!v5 || !v6)
  {
    id v12 =  createMobileActivationError( (uint64_t)"lockcrypto_identity_from_pem_data",  1692LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
    SecCertificateRef v8 = 0LL;
    goto LABEL_9;
  }

  id v20 = 0LL;
  SecCertificateRef v8 = lockcrypto_cert_from_pem_data(v5, (NSError **)&v20);
  id v9 = v20;
  size_t v10 = v9;
  if (!v8)
  {
    id v12 =  createMobileActivationError( (uint64_t)"lockcrypto_identity_from_pem_data",  1698LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v9,  @"Failed to get certificate from pem data.");

LABEL_9:
    SecKeyRef v11 = 0LL;
    if (!a3) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }

  id v19 = v9;
  SecKeyRef v11 = lockcrypto_private_key_from_pem_data(v7, (NSError **)&v19);
  id v12 = (NSError *)v19;

  if (!v11)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_identity_from_pem_data",  1704LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v12,  @"Failed to get private key from pem data.");
    goto LABEL_18;
  }

  uint64_t v13 = SecIdentityCreate(0LL, v8, v11);
  if (!v13)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_identity_from_pem_data",  1710LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create identity from certificate/private key.");
LABEL_18:
    uint64_t v18 = MobileActivationError;

    id v12 = v18;
    if (!a3)
    {
LABEL_11:
      uint64_t v14 = 0LL;
      uint64_t v15 = 0LL;
      if (!v11) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

SecCertificateRef lockcrypto_cert_from_pem_data(void *a1, NSError **a2)
{
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    id v6 =  createMobileActivationError( (uint64_t)"lockcrypto_cert_from_pem_data",  1734LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    id v5 = 0LL;
    if (!a2)
    {
LABEL_10:
      SecCertificateRef v8 = 0LL;
      goto LABEL_11;
    }

NSDate *lockcrypto_copy_certificate_validity_date(uint64_t a1, int a2, NSError **a3)
{
  if (!a1)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"lockcrypto_copy_certificate_validity_date",  1842LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    goto LABEL_12;
  }

  if (!a2)
  {
    if (SecCertificateNotValidBefore() == 0.0)
    {
      id v4 = @"Failed to obtain 'not valid before' date.";
      uint64_t v5 = 1855LL;
      goto LABEL_11;
    }

void __lockcrypto_query_oid_der_sequence_data_block_invoke(id a1)
{
  uint64_t v1 = +[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", &unk_1001FAACE, 2LL);
  id v2 = (void *)lockcrypto_query_oid_der_sequence_data_ASN1DERNull;
  lockcrypto_query_oid_der_sequence_data_ASN1DERNull = (uint64_t)v1;
}

BOOL device_supports_mfi_certificates()
{
  uint64_t v0 = +[DeviceType sharedInstance](&OBJC_CLASS___DeviceType, "sharedInstance");
  BOOL v1 = -[DeviceType device_supports_mfi_certificates](v0, "device_supports_mfi_certificates");

  return v1;
}

BOOL device_supports_eda_certificates()
{
  uint64_t v0 = +[DeviceType sharedInstance](&OBJC_CLASS___DeviceType, "sharedInstance");
  BOOL v1 = -[DeviceType device_supports_eda_certificates](v0, "device_supports_eda_certificates");

  return v1;
}

uint64_t platform_supports_activation()
{
  return os_variant_is_darwinos([@"com.apple.mobileactivationd" UTF8String]) ^ 1;
}

BOOL device_supports_dcrt_oob()
{
  uint64_t v0 = +[DeviceType sharedInstance](&OBJC_CLASS___DeviceType, "sharedInstance");
  BOOL v1 = -[DeviceType device_supports_dcrt_oob](v0, "device_supports_dcrt_oob");

  return v1;
}

BOOL is_prodfused_demoted()
{
  uint64_t v0 = +[DeviceType sharedInstance](&OBJC_CLASS___DeviceType, "sharedInstance");
  BOOL v1 = -[DeviceType is_prodfused_demoted](v0, "is_prodfused_demoted");

  return v1;
}

BOOL is_devfused_undemoted()
{
  uint64_t v0 = +[DeviceType sharedInstance](&OBJC_CLASS___DeviceType, "sharedInstance");
  BOOL v1 = -[DeviceType is_devfused_undemoted](v0, "is_devfused_undemoted");

  return v1;
}

BOOL is_dev_board()
{
  uint64_t v0 = +[DeviceType sharedInstance](&OBJC_CLASS___DeviceType, "sharedInstance");
  BOOL v1 = -[DeviceType is_dev_board](v0, "is_dev_board");

  return v1;
}

BOOL is_product_fpga()
{
  uint64_t v0 = +[DeviceType sharedInstance](&OBJC_CLASS___DeviceType, "sharedInstance");
  BOOL v1 = -[DeviceType is_fpga](v0, "is_fpga");

  return v1;
}

NSString *get_device_type()
{
  uint64_t v0 = +[DeviceType sharedInstance](&OBJC_CLASS___DeviceType, "sharedInstance");
  BOOL v1 = -[DeviceType product_type](v0, "product_type");

  return v1;
}

BOOL is_product_pod()
{
  uint64_t v0 = +[DeviceType sharedInstance](&OBJC_CLASS___DeviceType, "sharedInstance");
  BOOL v1 = -[DeviceType is_ipod](v0, "is_ipod");

  return v1;
}

BOOL is_product_pad()
{
  uint64_t v0 = +[DeviceType sharedInstance](&OBJC_CLASS___DeviceType, "sharedInstance");
  BOOL v1 = -[DeviceType is_ipad](v0, "is_ipad");

  return v1;
}

BOOL is_product_phone()
{
  uint64_t v0 = +[DeviceType sharedInstance](&OBJC_CLASS___DeviceType, "sharedInstance");
  BOOL v1 = -[DeviceType is_iphone](v0, "is_iphone");

  return v1;
}

BOOL is_product_cellular()
{
  uint64_t v0 = +[DeviceType sharedInstance](&OBJC_CLASS___DeviceType, "sharedInstance");
  BOOL v1 = -[DeviceType has_baseband](v0, "has_baseband");

  return v1;
}

BOOL is_product_audio_accessory()
{
  uint64_t v0 = +[DeviceType sharedInstance](&OBJC_CLASS___DeviceType, "sharedInstance");
  BOOL v1 = -[DeviceType is_audio_accessory](v0, "is_audio_accessory");

  return v1;
}

BOOL is_internal_build()
{
  uint64_t v0 = +[DeviceType sharedInstance](&OBJC_CLASS___DeviceType, "sharedInstance");
  BOOL v1 = -[DeviceType is_internal_build](v0, "is_internal_build");

  return v1;
}

BOOL has_internal_diagnostics()
{
  uint64_t v0 = +[DeviceType sharedInstance](&OBJC_CLASS___DeviceType, "sharedInstance");
  BOOL v1 = -[DeviceType has_internal_diagnostics](v0, "has_internal_diagnostics");

  return v1;
}

NSString *get_device_class()
{
  uint64_t v0 = +[DeviceType sharedInstance](&OBJC_CLASS___DeviceType, "sharedInstance");
  BOOL v1 = -[DeviceType device_class](v0, "device_class");

  return v1;
}

BOOL use_hactivation()
{
  uint64_t v0 = +[DeviceType sharedInstance](&OBJC_CLASS___DeviceType, "sharedInstance");
  BOOL v1 = -[DeviceType should_hactivate](v0, "should_hactivate");

  return v1;
}

id copy_bootsession_uuid()
{
  uint64_t v0 = +[DeviceType sharedInstance](&OBJC_CLASS___DeviceType, "sharedInstance");
  id v1 = -[DeviceType copyBootSessionUUID](v0, "copyBootSessionUUID");

  return v1;
}

NSString *copy_soc_generation()
{
  uint64_t v0 = +[DeviceType sharedInstance](&OBJC_CLASS___DeviceType, "sharedInstance");
  id v1 = -[DeviceType soc_generation](v0, "soc_generation");

  return v1;
}

id copy_trusted_local_policy_hash()
{
  uint64_t v0 = +[DeviceType sharedInstance](&OBJC_CLASS___DeviceType, "sharedInstance");
  id v1 = [@"IODeviceTree" stringByAppendingString:@":/chosen"];
  id v2 = -[DeviceType copyDeviceTreeProperty:key:]( v0,  "copyDeviceTreeProperty:key:",  v1,  @"trusted-boot-policy-measurement");

  id v3 = isNSData(v2);
  if (!v3) {
    goto LABEL_8;
  }
  id v4 = v3;
  id v5 = [v2 length];

  if (!v5) {
    goto LABEL_9;
  }
  id v6 = calloc(1uLL, (size_t)[v2 length]);
  if (!v6)
  {
LABEL_8:
    id v5 = 0LL;
    goto LABEL_9;
  }

  SecCertificateRef v7 = v6;
  objc_msgSend(v2, "getBytes:length:", v6, objc_msgSend(v2, "length"));
  if (!*v7 && !memcmp(v7, v7 + 1, (size_t)[v2 length] - 1)) {
    id v5 = 0LL;
  }
  else {
    id v5 = v2;
  }
  free(v7);
LABEL_9:

  return v5;
}

id copy_sfr_manifest()
{
  uint64_t v0 = +[DeviceType sharedInstance](&OBJC_CLASS___DeviceType, "sharedInstance");
  id v1 = [@"IODeviceTree" stringByAppendingString:@":/chosen/iBoot"];
  id v2 = -[DeviceType copyDeviceTreeInt:key:defaultValue:]( v0,  "copyDeviceTreeInt:key:defaultValue:",  v1,  @"sfr-manifest-size",  0LL);

  if (!v2 || ![v2 unsignedIntValue])
  {
    id v6 = 0LL;
    goto LABEL_8;
  }

  id v3 = +[DeviceType sharedInstance](&OBJC_CLASS___DeviceType, "sharedInstance");
  id v4 = [@"IODeviceTree" stringByAppendingString:@":/chosen/iBoot"];
  id v5 = -[DeviceType copyDeviceTreeProperty:key:](v3, "copyDeviceTreeProperty:key:", v4, @"sfr-manifest-data");

  id v6 = isNSData(v5);
  if (v6)
  {
    id v7 = [v5 length];

    if (!v7)
    {
      id v6 = 0LL;
      goto LABEL_9;
    }

    id v6 = objc_msgSend(v5, "subdataWithRange:", 0, objc_msgSend(v2, "unsignedIntValue"));

    if (v6)
    {
      id v6 = v6;
      id v5 = v6;
      goto LABEL_9;
    }

BOOL bridge_init_server(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  dispatch_queue_t v5 = dispatch_queue_create("com.apple.mobileactivationd.bridge", 0LL);
  remote_service_listener = (void *)xpc_remote_connection_create_remote_service_listener( [@"com.apple.mobileactivationd.bridge" UTF8String],  v5,  0);
  if (remote_service_listener)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3254779904LL;
    v8[2] = __bridge_init_server_block_invoke;
    v8[3] = &__block_descriptor_48_e8_32s40s_e33_v16__0__NSObject_OS_xpc_object__8l;
    id v9 = v4;
    id v10 = v3;
    xpc_remote_connection_set_event_handler(remote_service_listener, v8);
    xpc_remote_connection_activate(remote_service_listener);
  }

  else
  {
    maLog((uint64_t)"bridge_init_server", 0LL, @"Failed to create remote listener.");
  }

  return remote_service_listener != 0LL;
}

void __bridge_init_server_block_invoke(uint64_t a1, id a2)
{
  id v3 = a2;
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_remote_connection)
  {
    xpc_remote_connection_set_target_queue(v3, *(void *)(a1 + 32));
    id v5 = *(id *)(a1 + 40);
    id v6 = v3;
    xpc_remote_connection_set_event_handler();
    xpc_remote_connection_activate(v6);
  }

  else
  {
    id v4 = xpc_copy_description(v3);
    maLog((uint64_t)"bridge_init_server_block_invoke", 0LL, @"Unexpected event: %s", v4);
    if (v4) {
      free(v4);
    }
  }
}

void __bridge_init_server_block_invoke_2(uint64_t a1, id a2)
{
  id v3 = a2;
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_error)
  {
    id v10 = 0LL;
    SecKeyRef v11 = 0LL;
    uint64_t v15 = 0LL;
    id v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    id v19 = 0LL;
    goto LABEL_33;
  }

  if (xpc_get_type(v3) != (xpc_type_t)&_xpc_type_dictionary)
  {
    id v4 = @"Error";
    MobileActivationError = createMobileActivationError( (uint64_t)"bridge_init_server_block_invoke_2",  126LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid XPC message.");
LABEL_4:
    id v6 = MobileActivationError;
    uint64_t v44 = 0LL;
    id v7 = 0LL;
    goto LABEL_5;
  }

  xpc_object_t v28 =  xpc_dictionary_get_value( v3,  (const char *)[@"BridgeXPCRequestEncodedDictionary" UTF8String]);
  if (!v28)
  {
    id v4 = @"Error";
    MobileActivationError = createMobileActivationError( (uint64_t)"bridge_init_server_block_invoke_2",  133LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"XPC message missing key (%@) : %@",  @"BridgeXPCRequestEncodedDictionary",  v3);
    goto LABEL_4;
  }

  xpc_object_t v29 = v28;
  id v7 = (void *)_CFXPCCreateCFObjectFromXPCObject();
  id v30 = isNSDictionary(v7);

  uint64_t v44 = v29;
  if (v30)
  {
    __int128 v31 = (__CFString *)[v7 objectForKeyedSubscript:@"HostProcessName"];
    id v32 = isNSString(v31);

    if (!v32)
    {

      __int128 v31 = @"unknown";
    }

    id v33 = [*(id *)(a1 + 32) dark];
    data_ark_set(v33, 0LL, @"HostProcessName", v31, 0);

    id v34 = [v7 objectForKeyedSubscript:@"Command"];
    id v35 = isNSString(v34);

    id v41 = v34;
    uint64_t v42 = v31;
    if (v35)
    {
      id v36 = [v7 objectForKeyedSubscript:@"Options"];
      id v40 = v36;
      if (v36 && (id v37 = isNSDictionary(v36), v37, !v37))
      {
        id v4 = @"Error";
        uint64_t v38 = createMobileActivationError( (uint64_t)"bridge_init_server_block_invoke_2",  161LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid key: %@",  @"Options");
      }

      else
      {
        maLog((uint64_t)"bridge_init_server_block_invoke_2", 0LL, @"Host connection (%@): %@", v31, v34);
        id v4 = @"Error";
        uint64_t v38 = createMobileActivationError( (uint64_t)"bridge_init_server_block_invoke_2",  432LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Received unknown command: %@",  v34);
      }

      id v6 = v38;
    }

    else
    {
      id v4 = @"Error";
      id v6 =  createMobileActivationError( (uint64_t)"bridge_init_server_block_invoke_2",  154LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Request missing required key: %@",  @"Command");
      id v40 = 0LL;
    }

    goto LABEL_6;
  }

  id v4 = @"Error";
  id v6 =  createMobileActivationError( (uint64_t)"bridge_init_server_block_invoke_2",  140LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create dictionary from XPC message.");
LABEL_5:
  id v40 = 0LL;
  id v41 = 0LL;
  uint64_t v42 = 0LL;
LABEL_6:
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v10 = v4;
  SecKeyRef v11 = v6;
  if (v11) {
    BOOL v12 = v10 == 0LL;
  }
  else {
    BOOL v12 = 1;
  }
  uint64_t v43 = v7;
  if (v12)
  {
    uint64_t v13 = (NSDictionary *)&__NSDictionary0__struct;
    p_isa = (NSString *)&v11->super.isa;
  }

  else
  {
    uint64_t v20 = objc_opt_class(&OBJC_CLASS___NSError);
    char isKindOfClass = objc_opt_isKindOfClass(v11, v20);
    p_isa = (NSString *)&v11->super.isa;
    if ((isKindOfClass & 1) != 0)
    {
      __int128 v22 = -[NSError localizedDescription](v11, "localizedDescription");
      __int128 v23 = -[NSError userInfo](v11, "userInfo");
      p_isa = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@ (%@)", v22, v23);
    }

    uint64_t v45 = v10;
    char v46 = p_isa;
    uint64_t v13 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v46,  &v45,  1LL);
  }

  __int128 v24 = (void *)_CFXPCCreateXPCObjectFromCFObject(v13);
  if (v24)
  {
    uint64_t v25 = a1;
    xpc_object_t reply = xpc_dictionary_create_reply(v9);
    if (reply)
    {
      __int128 v27 = reply;
      xpc_dictionary_set_value( reply,  (const char *)[@"BridgeXPCResponseEncodedDictionary" UTF8String],  v24);
      xpc_remote_connection_send_message(v8, v27);
    }

    else
    {
      maLog((uint64_t)"send_reply", 0LL, @"Failed to create XPC reply.");
    }

    a1 = v25;
  }

  else
  {
    maLog((uint64_t)"send_reply", 0LL, @"Failed to create XPC dictionary.");
  }

  uint64_t v18 = v43;
  id v19 = v44;
  uint64_t v17 = v41;
  uint64_t v15 = v42;
  id v16 = v40;
LABEL_33:
  id v39 = [*(id *)(a1 + 32) dark];
  data_ark_remove(v39, 0LL, @"HostProcessName");
}

BOOL isAutomaticTimeEnabled()
{
  return &_TMIsAutomaticTimeEnabled && TMIsAutomaticTimeEnabled() != 0;
}

uint64_t copyRTCResetCount()
{
  if (&_TMGetRTCResetCount) {
    return TMGetRTCResetCount();
  }
  else {
    return 0LL;
  }
}

double copyMonotonicClockTimeInterval(void *a1)
{
  if (&_TMGetKernelMonotonicClock && (double v2 = TMGetKernelMonotonicClock(), v2 > 0.0))
  {
    double v3 = v2;
    id v4 = 0LL;
    if (!a1) {
      goto LABEL_8;
    }
  }

  else
  {
    id v4 =  createMobileActivationError( (uint64_t)"copyMonotonicClockTimeInterval",  78LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query monotonic clock time.");
    double v3 = 0.0;
    if (!a1) {
      goto LABEL_8;
    }
  }

  if (v3 == 0.0) {
    *a1 = v4;
  }
LABEL_8:

  return v3;
}

NSMutableArray *parseDERCertificatesFromChain(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = v3;
  memset(v16, 0, sizeof(v16));
  unint64_t v15 = 0LL;
  if (!v3)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"parseDERCertificatesFromChain",  106LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    goto LABEL_13;
  }

  id v5 = v3;
  id v6 = [v5 bytes];
  uint64_t v7 = CTParseCertificateSet( (unint64_t)v6,  (unint64_t)[v5 length] + (void)v6,  v16,  3,  &v15);
  if ((_DWORD)v7 || !v15)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"parseDERCertificatesFromChain",  115LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to parse certificate set: 0x%08x",  v7);
LABEL_13:
    BOOL v12 = MobileActivationError;
    id v8 = 0LL;
    if (!a2) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }

  id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  if (v8)
  {
    if (v15)
    {
      uint64_t v9 = 0LL;
      int v10 = 0;
      do
      {
        SecKeyRef v11 = -[NSData initWithBytes:length:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBytes:length:",  *(void *)&v16[v9],  *((void *)&v16[v9] + 1));
        -[NSMutableArray setObject:atIndexedSubscript:](v8, "setObject:atIndexedSubscript:", v11, v9);

        uint64_t v9 = ++v10;
      }

      while (v15 > v10);
    }

    id v8 = v8;
  }

  BOOL v12 = 0LL;
  if (a2)
  {
LABEL_14:
    if (!v8) {
      *a2 = v12;
    }
  }

LABEL_16:
  return v8;
}

  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef cf = 0LL;
  if (privateKeyRef) {
    CFRelease(privateKeyRef);
  }
  privateKeyRef = 0LL;
  if (v24) {
    CFRelease(v24);
  }
  if (identityRef) {
    CFRelease(identityRef);
  }
  identityRef = 0LL;

  return v25;
}

    __break(0x5519u);
  }

  return result;
}

uint64_t evaluateUCRTTrust(void *a1, void *a2, NSError **a3)
{
  id v5 = a1;
  id v6 = a2;
  if (v5)
  {
    id v7 = v5;
    id v8 = [v7 bytes];
    id v9 = [v7 length];
    id v10 = v6;
    uint64_t v11 = CTEvaluateUcrtTestRoot( (unint64_t)v8,  (uint64_t)v9,  (uint64_t)[v10 bytes],  (uint64_t)objc_msgSend(v10, "length"),  0,  0);
    if (!(_DWORD)v11)
    {
      uint64_t v13 = 0LL;
      uint64_t v14 = 1LL;
      goto LABEL_9;
    }

    MobileActivationError = createMobileActivationError( (uint64_t)"evaluateUCRTTrust",  153LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to evaluate trust: 0x%08x",  v11);
  }

  else
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"evaluateUCRTTrust",  147LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
  }

  uint64_t v13 = MobileActivationError;
  if (a3)
  {
    uint64_t v13 = v13;
    uint64_t v14 = 0LL;
    *a3 = v13;
  }

  else
  {
    uint64_t v14 = 0LL;
  }

uint64_t evaluateUCRTTrustWithCerts( __SecCertificate *a1, __SecCertificate *a2, __SecCertificate *a3, int a4, id a5, void *a6)
{
  uint64_t v11 = (NSDate *)a5;
  BOOL v12 = v11;
  CFErrorRef error = 0LL;
  if (!a1 || !a2 || !a3)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"evaluateUCRTTrustWithCerts",  180LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
LABEL_20:
    uint64_t v20 = MobileActivationError;
    uint64_t v14 = 0LL;
LABEL_21:
    CFDataRef v17 = 0LL;
LABEL_22:
    CFDataRef v15 = 0LL;
LABEL_23:
    CFDataRef v16 = 0LL;
    goto LABEL_24;
  }

  if (v11)
  {
    if (!a4) {
      goto LABEL_11;
    }
  }

  else
  {
    BOOL v12 = +[NSDate date](&OBJC_CLASS___NSDate, "date");
    if (!a4) {
      goto LABEL_11;
    }
  }

  -[NSDate timeIntervalSinceReferenceDate](v12, "timeIntervalSinceReferenceDate");
  if (!SecCertificateIsValid(a1)
    || (-[NSDate timeIntervalSinceReferenceDate](v12, "timeIntervalSinceReferenceDate"),
        (SecCertificateIsValid(a2) & 1) == 0))
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"evaluateUCRTTrustWithCerts",  196LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Certificate is expired.");
    goto LABEL_20;
  }

LABEL_24:
  if (a6) {
    *a6 = v20;
  }
  uint64_t v21 = 0LL;
  uint64_t v22 = 0LL;
  if (v16) {
    goto LABEL_27;
  }
LABEL_28:
  if (error) {
    CFRelease(error);
  }

  return v22;
}

  if (a7) {
    *a7 = v21;
  }
  uint64_t v22 = 0LL;
  __int128 v23 = 0LL;
  if (v17) {
    goto LABEL_27;
  }
LABEL_28:
  if (error) {
    CFRelease(error);
  }

  return v23;
}

uint64_t evaluateBAATrust(void *a1, void *a2, int a3, NSError **a4)
{
  id v7 = a1;
  id v8 = a2;
  if (v7)
  {
    id v9 = v7;
    id v10 = [v9 bytes];
    id v11 = [v9 length];
    id v12 = v8;
    id v13 = [v12 bytes];
    id v14 = [v12 length];
    if (a3)
    {
      unint64_t v15 = CTEvaluateBAASystemTestRoot((unint64_t)v10, (uint64_t)v11, (uint64_t)v13, (uint64_t)v14, 0LL, 0LL, 0LL);
      if ((_DWORD)v15)
      {
LABEL_4:
        MobileActivationError = createMobileActivationError( (uint64_t)"evaluateBAATrust",  290LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to evaluate trust: 0x%08x",  v15);
        goto LABEL_6;
      }
    }

    else
    {
      unint64_t v15 = CTEvaluateBAAUserTestRoot((unint64_t)v10, (uint64_t)v11, (uint64_t)v13, (uint64_t)v14, 0LL, 0LL, 0LL);
      if ((_DWORD)v15) {
        goto LABEL_4;
      }
    }

    CFDataRef v17 = 0LL;
    uint64_t v18 = 1LL;
    goto LABEL_11;
  }

  MobileActivationError = createMobileActivationError( (uint64_t)"evaluateBAATrust",  280LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
LABEL_6:
  CFDataRef v17 = MobileActivationError;
  if (a4)
  {
    CFDataRef v17 = v17;
    uint64_t v18 = 0LL;
    *a4 = v17;
  }

  else
  {
    uint64_t v18 = 0LL;
  }

uint64_t evaluateBAATrustWithCerts( __SecCertificate *a1, __SecCertificate *a2, __SecCertificate *a3, int a4, int a5, id a6, void *a7)
{
  id v13 = (NSDate *)a6;
  id v14 = v13;
  CFErrorRef error = 0LL;
  if (!a1 || !a2 || !a3)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"evaluateBAATrustWithCerts",  317LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
LABEL_20:
    __int128 v24 = MobileActivationError;
    CFDataRef v16 = 0LL;
LABEL_24:
    CFDataRef v20 = 0LL;
LABEL_25:
    CFDataRef v19 = 0LL;
LABEL_26:
    uint64_t v22 = 0LL;
    goto LABEL_27;
  }

  if (v13)
  {
    if (!a5) {
      goto LABEL_11;
    }
  }

  else
  {
    id v14 = +[NSDate date](&OBJC_CLASS___NSDate, "date");
    if (!a5) {
      goto LABEL_11;
    }
  }

  -[NSDate timeIntervalSinceReferenceDate](v14, "timeIntervalSinceReferenceDate");
  if (!SecCertificateIsValid(a1)
    || (-[NSDate timeIntervalSinceReferenceDate](v14, "timeIntervalSinceReferenceDate"),
        (SecCertificateIsValid(a2) & 1) == 0))
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"evaluateBAATrustWithCerts",  333LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Certificate is expired.");
    goto LABEL_20;
  }

LABEL_27:
  if (a7) {
    *a7 = v24;
  }
  uint64_t v25 = 0LL;
  uint64_t v27 = 0LL;
  if (v22) {
    goto LABEL_30;
  }
LABEL_31:
  if (error) {
    CFRelease(error);
  }

  return v27;
}

  if ((v14 | v13) == 1)
  {
    if (v14) {
      uint64_t v38 = 13LL;
    }
    else {
      uint64_t v38 = 10LL;
    }
    id v101 = v33;
    id v39 = copyRootCertificate(v38, v14, &v101);
    id v40 = v101;

    if (v39)
    {
      __int128 v100 = v40;
      id v80 = v39;
      id v41 = lockcrypto_cert_from_pem_data(v39, &v100);
      uint64_t v42 = v100;

      if (!v41)
      {
        uint64_t v49 =  createMobileActivationError( (uint64_t)"verify_activation_record_certificates",  3736LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v42,  @"Failed to create certificate from pem data.");

        goto LABEL_56;
      }

      uint64_t v106 = v41;
      id v99 = v42;
      id v78 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v106, 1LL);
      public_with_intermediate = lockcrypto_extract_public(v78, &v99);
      uint64_t v44 = v99;

      if (!public_with_intermediate)
      {
        uint64_t v49 =  createMobileActivationError( (uint64_t)"verify_activation_record_certificates",  3750LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v44,  @"Failed to extract the public key from the factory cert chain.");

        uint64_t v45 = 0LL;
        CFTypeRef cf = 0LL;
        id v88 = 0LL;
        uint64_t v47 = 0LL;
        goto LABEL_58;
      }

      uint64_t v75 = v44;
      uint64_t v45 = 0LL;
      char v46 = 0LL;
      id v88 = 0LL;
      uint64_t v47 = 0LL;
      int v77 = 0LL;
      id v82 = 0LL;
      uint64_t v48 = 0LL;
      goto LABEL_83;
    }

    uint64_t v49 =  createMobileActivationError( (uint64_t)"verify_activation_record_certificates",  3730LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v40,  @"Failed to load activation certificate.");

    id v78 = 0LL;
    id v80 = 0LL;
    id v41 = 0LL;
    uint64_t v45 = 0LL;
    CFTypeRef cf = 0LL;
    id v88 = 0LL;
    public_with_intermediate = 0LL;
    uint64_t v47 = 0LL;
    int v77 = 0LL;
    id v82 = 0LL;
    id v86 = 0LL;
LABEL_51:
    uint64_t v62 = 0LL;
    goto LABEL_61;
  }

  uint64_t v50 = [v7 objectForKeyedSubscript:@"AccountTokenCertificate"];
  uint64_t v48 = isNSData(v50);

  if (!v48)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"verify_activation_record_certificates",  3759LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve account token certificate from activation record.");
LABEL_55:
    uint64_t v49 = MobileActivationError;

    id v80 = 0LL;
    id v41 = 0LL;
LABEL_56:
    uint64_t v45 = 0LL;
    CFTypeRef cf = 0LL;
    goto LABEL_57;
  }

  id v98 = v33;
  uint64_t v47 = lockcrypto_cert_from_pem_data(v48, (NSError **)&v98);
  uint64_t v51 = (NSError *)v98;

  if (!v47)
  {
    id v86 = v48;
    uint64_t v49 =  createMobileActivationError( (uint64_t)"verify_activation_record_certificates",  3765LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v51,  @"Failed to create certificate from pem data.");

    id v80 = 0LL;
    id v41 = 0LL;
    uint64_t v45 = 0LL;
    CFTypeRef cf = 0LL;
    public_with_intermediate = 0LL;
LABEL_94:
    id v88 = 0LL;
    int v77 = 0LL;
    id v78 = 0LL;
    id v82 = 0LL;
    goto LABEL_59;
  }

  if (v25)
  {
    char v52 = [v7 objectForKeyedSubscript:@"DeviceCertificate"];
    public_with_intermediate = (SecKeyRef)isNSData(v52);

    id v86 = v48;
    if (public_with_intermediate)
    {
      id v97 = v51;
      uint64_t v53 = v51;
      uint64_t v45 = (NSData *)lockcrypto_cert_from_pem_data(public_with_intermediate, (NSError **)&v97);
      uint64_t v54 = v97;

      id v88 = v45;
      id v82 = public_with_intermediate;
      if (v45)
      {
        id v96 = v54;
        uint64_t v45 = copyRootCertificate(14LL, 0, (NSError **)&v96);
        uint64_t v55 = v96;
        uint64_t v56 = v54;
        id v39 = v45;

        if (!v45)
        {
          uint64_t v49 =  createMobileActivationError( (uint64_t)"verify_activation_record_certificates",  3790LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v55,  @"Failed to load iPhone CA certificate.");

          id v78 = 0LL;
          id v80 = 0LL;
          id v41 = 0LL;
          CFTypeRef cf = 0LL;
          public_with_intermediate = 0LL;
          int v77 = 0LL;
          goto LABEL_51;
        }

        uint64_t v95 = v55;
        uint64_t v45 = (NSData *)lockcrypto_cert_from_pem_data(v45, (NSError **)&v95);
        uint64_t v79 = v95;

        CFTypeRef cf = v45;
        if (v45)
        {
          v94 = v79;
          uint64_t v45 = copyRootCertificate(12LL, 0, (NSError **)&v94);
          id v81 = v94;

          if (v45)
          {
            id v93 = v81;
            uint64_t v57 = v45;
            uint64_t v45 = (NSData *)lockcrypto_cert_from_pem_data(v45, (NSError **)&v93);
            char v58 = v93;

            if (!v45)
            {
              uint64_t v49 =  createMobileActivationError( (uint64_t)"verify_activation_record_certificates",  3812LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v58,  @"Failed to create certificate from pem data.");

              id v41 = 0LL;
              uint64_t v73 = v57;
              public_with_intermediate = 0LL;
              int v77 = 0LL;
              id v78 = 0LL;
              uint64_t v62 = 0LL;
              id v39 = 0LL;
              id v80 = v73;
              goto LABEL_61;
            }

            id v80 = v57;
            uint64_t v92 = v58;
            char v46 = cf;
            id v59 = lockcrypto_verify_device_cert((uint64_t)v88, (uint64_t)v45, (uint64_t)cf, (NSError **)&v92);
            uint64_t v60 = v92;

            if ((v59 & 1) != 0)
            {
              v105[0] = v47;
              v105[1] = cf;
              id v91 = v60;
              int v77 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v105, 2LL);
              public_with_intermediate = lockcrypto_extract_public_with_intermediate(v77, (NSError **)&v91);
              uint64_t v61 = (NSError *)v91;

              if (!public_with_intermediate)
              {
                uint64_t v49 =  createMobileActivationError( (uint64_t)"verify_activation_record_certificates",  3829LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v61,  @"Failed to extract public key from production cert chain.");

                id v41 = 0LL;
                id v78 = 0LL;
                goto LABEL_59;
              }

              uint64_t v75 = v61;
              id v41 = 0LL;
              id v78 = 0LL;
              goto LABEL_83;
            }

            uint64_t v49 =  createMobileActivationError( (uint64_t)"verify_activation_record_certificates",  3819LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v60,  @"Failed to verify device certificate.");
          }

          else
          {
            uint64_t v49 =  createMobileActivationError( (uint64_t)"verify_activation_record_certificates",  3806LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v81,  @"Failed to load device CA certificate.");

            id v80 = 0LL;
          }

          id v41 = 0LL;
        }

        else
        {
          id v80 = v39;
          uint64_t v49 =  createMobileActivationError( (uint64_t)"verify_activation_record_certificates",  3796LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v79,  @"Failed to create certificate from pem data.");

          id v41 = 0LL;
          CFTypeRef cf = 0LL;
        }
      }

      else
      {
        uint64_t v49 =  createMobileActivationError( (uint64_t)"verify_activation_record_certificates",  3780LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v54,  @"Failed to create certificate from pem data.");

        id v80 = 0LL;
        id v41 = 0LL;
        CFTypeRef cf = 0LL;
        id v88 = 0LL;
      }

      public_with_intermediate = 0LL;
      int v77 = 0LL;
      id v78 = 0LL;
      goto LABEL_59;
    }

    uint64_t v71 = createMobileActivationError( (uint64_t)"verify_activation_record_certificates",  3774LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve device certificate from activation record.");
    goto LABEL_93;
  }

  public_with_intermediate = SecCertificateCopyKey(v47);
  if (!public_with_intermediate)
  {
    id v86 = v48;
    uint64_t v71 = createMobileActivationError( (uint64_t)"verify_activation_record_certificates",  3835LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve certificate public key.");
LABEL_93:
    uint64_t v49 = v71;

    id v80 = 0LL;
    id v41 = 0LL;
    uint64_t v45 = 0LL;
    CFTypeRef cf = 0LL;
    goto LABEL_94;
  }

  uint64_t v75 = v51;
  id v78 = 0LL;
  id v80 = 0LL;
  id v41 = 0LL;
  uint64_t v45 = 0LL;
  char v46 = 0LL;
  id v88 = 0LL;
  int v77 = 0LL;
  id v82 = 0LL;
LABEL_83:
  CFTypeRef cf = v46;
  id v67 = [v7 objectForKeyedSubscript:@"AccountToken"];
  uint64_t v68 = v7;
  uint64_t v62 = isNSData(v67);

  id v86 = v48;
  if (!v62)
  {
    uint64_t v49 =  createMobileActivationError( (uint64_t)"verify_activation_record_certificates",  3845LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Failed to retrieve account token from activation record.");

    goto LABEL_60;
  }

  uint64_t v69 = [v68 objectForKeyedSubscript:@"AccountTokenSignature"];
  id v39 = (NSData *)isNSData(v69);

  if (v39)
  {
    id v90 = v75;
    uint64_t v70 = lockcrypto_verify(public_with_intermediate, v39, v62, (NSError **)&v90);
    uint64_t v49 = (NSError *)v90;

    if ((v70 & 1) != 0)
    {
      id v64 = v47;
      v65 = 1LL;
      if (!v41) {
        goto LABEL_64;
      }
LABEL_63:
      CFRelease(v41);
      goto LABEL_64;
    }

    id v72 =  createMobileActivationError( (uint64_t)"verify_activation_record_certificates",  3856LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v49,  @"Failed to verify account token signature.");

    uint64_t v49 = v72;
  }

  else
  {
    uint64_t v49 =  createMobileActivationError( (uint64_t)"verify_activation_record_certificates",  3851LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Failed to retrieve account token signature from activation record.");
  }

  return a4;
}

  return v50;
}

uint64_t evaluateAppleSSLTrust(void *a1, void *a2, uint64_t a3, NSError **a4)
{
  id v7 = a1;
  id v8 = a2;
  if (v7)
  {
    id v9 = v7;
    id v10 = [v9 bytes];
    id v11 = [v9 length];
    id v12 = v8;
    id v13 = [v12 UTF8String];
    id v14 = [v12 length];
    uint64_t v15 = 1LL;
    uint64_t v16 = CTEvaluateAppleSSLWithOptionalTemporalCheck( (unint64_t)v10,  (uint64_t)v11,  (uint64_t)v13,  (uint64_t)v14,  a3,  0,  1);
    if (!(_DWORD)v16)
    {
      CFDataRef v18 = 0LL;
      goto LABEL_9;
    }

    MobileActivationError = createMobileActivationError( (uint64_t)"evaluateAppleSSLTrust",  430LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to evaluate trust: 0x%08x",  v16);
  }

  else
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"evaluateAppleSSLTrust",  418LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
  }

  CFDataRef v18 = MobileActivationError;
  if (a4)
  {
    CFDataRef v18 = v18;
    uint64_t v15 = 0LL;
    *a4 = v18;
  }

  else
  {
    uint64_t v15 = 0LL;
  }

uint64_t evaluateAccessoryTrust(void *a1, void *a2, uint64_t a3, NSError **a4)
{
  id v6 = a1;
  id v7 = a2;
  if (v6)
  {
    id v8 = v6;
    id v9 = [v8 bytes];
    id v10 = [v8 length];
    id v11 = v7;
    uint64_t v12 = CTEvaluateBAAAccessory( (unint64_t)v9,  (uint64_t)v10,  (uint64_t)[v11 bytes],  (uint64_t)objc_msgSend(v11, "length"),  0,  0,  0,  0);
    if (!(_DWORD)v12)
    {
      id v14 = 0LL;
      uint64_t v15 = 1LL;
      goto LABEL_9;
    }

    MobileActivationError = createMobileActivationError( (uint64_t)"evaluateAccessoryTrust",  459LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to evaluate trust: 0x%08x",  v12);
  }

  else
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"evaluateAccessoryTrust",  453LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
  }

  id v14 = MobileActivationError;
  if (a4)
  {
    id v14 = v14;
    uint64_t v15 = 0LL;
    *a4 = v14;
  }

  else
  {
    uint64_t v15 = 0LL;
  }

uint64_t evaluateAccessoryTrustWithCerts( __SecCertificate *a1, __SecCertificate *a2, __SecCertificate *a3, int a4, int a5, id a6, void *a7)
{
  uint64_t v12 = (NSDate *)a6;
  id v13 = v12;
  CFErrorRef error = 0LL;
  if (!a1 || !a2 || !a3)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"evaluateAccessoryTrustWithCerts",  486LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
LABEL_20:
    uint64_t v21 = MobileActivationError;
    uint64_t v15 = 0LL;
LABEL_21:
    CFDataRef v18 = 0LL;
LABEL_22:
    CFDataRef v16 = 0LL;
LABEL_23:
    CFDataRef v17 = 0LL;
    goto LABEL_24;
  }

  if (v12)
  {
    if (!a5) {
      goto LABEL_11;
    }
  }

  else
  {
    id v13 = +[NSDate date](&OBJC_CLASS___NSDate, "date");
    if (!a5) {
      goto LABEL_11;
    }
  }

  -[NSDate timeIntervalSinceReferenceDate](v13, "timeIntervalSinceReferenceDate");
  if (!SecCertificateIsValid(a1)
    || (-[NSDate timeIntervalSinceReferenceDate](v13, "timeIntervalSinceReferenceDate"),
        (SecCertificateIsValid(a2) & 1) == 0))
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"evaluateAccessoryTrustWithCerts",  502LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Certificate is expired.");
    goto LABEL_20;
  }

uint64_t FindMyRemoveActivationLock(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 =  createMobileActivationError( (uint64_t)"FindMyRemoveActivationLock",  404LL,  @"com.apple.MobileActivation.ErrorDomain",  -3LL,  0LL,  @"Operation not supported on this platform.");
  id v5 = v4;
  if (a3) {
    *a3 = v4;
  }

  return 0LL;
}

uint64_t FindMyCopyMaskedActivationLockUserName(void *a1)
{
  double v2 =  createMobileActivationError( (uint64_t)"_FindMyCopyMaskedActivationLockUserNameiOS",  308LL,  @"com.apple.MobileActivation.ErrorDomain",  -3LL,  0LL,  @"API not supported on tvOS or watchOS.");
  id v3 = v2;
  if (a1) {
    *a1 = v2;
  }

  return 0LL;
}

uint64_t FindMyDeviceIsActivationLocked(void *a1)
{
  if (a1) {
    *a1 = 0LL;
  }
  return 0LL;
}

uint64_t FindMyDeviceIsEnabled(void *a1)
{
  if (a1) {
    *a1 = 0LL;
  }
  return 0LL;
}

void post_notification(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, v1, v1, 0LL, 1u);
  }

uint64_t store_fairplay_blob(void *a1, void *a2, NSError **a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = isNSData(v6);

  if (!v7)
  {
    id v11 =  createMobileActivationError( (uint64_t)"store_fairplay_blob",  103LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    id v8 = 0LL;
    goto LABEL_7;
  }

  id v30 = 0LL;
  id v8 = lockcrypto_decode_pem(v6, "CONTAINER", (NSError **)&v30);
  id v9 = (NSError *)v30;
  if (!v8)
  {
    id v11 =  createMobileActivationError( (uint64_t)"store_fairplay_blob",  109LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v9,  @"Failed to decode fairplay data.");

LABEL_7:
    id v12 = 0LL;
    if (a3) {
      goto LABEL_8;
    }
LABEL_24:
    uint64_t v13 = 0LL;
    goto LABEL_28;
  }

  xpc_object_t v29 = a3;
  id v28 = data_ark_copy(v5, @"com.apple.fairplay", @"FairPlayContextID");
  id v10 = isNSNumber(v28);

  if (!v10)
  {
    char v14 = 1;
    while (1)
    {
      id v15 = v5;
      memset(v32, 0, sizeof(v32));
      int v31 = 0;
      if (!is_product_fpga()) {
        break;
      }
      char v16 = 1;
      CFDataRef v17 = (NSNumber *)v9;
LABEL_20:

      id v11 = v17;
      char v22 = v14 & (v16 ^ 1);
      id v9 = v11;
      char v14 = 0;
      if ((v22 & 1) == 0) {
        goto LABEL_21;
      }
    }

    zxcm2Qme0x(0LL, 0LL, (uint64_t)v32);
    if (v18)
    {
      MobileActivationError = createMobileActivationError( (uint64_t)"create_fairplay_context",  56LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query fairplay HW info: %ld",  v18);
    }

    else
    {
      int v20 = XtCqEf5X(0LL, (uint64_t)v32, (uint64_t)"/private/var/mobile/Media/iTunes_Control/iTunes", (uint64_t)&v31);
      if (!v20 && v31)
      {
        uint64_t v21 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:");
        data_ark_set(v15, @"com.apple.fairplay", @"FairPlayContextID", v21, 0);
        char v16 = 1;
        CFDataRef v17 = (NSNumber *)v9;
LABEL_19:

        goto LABEL_20;
      }

      MobileActivationError = createMobileActivationError( (uint64_t)"create_fairplay_context",  62LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to initialize fairplay context: %ld",  v20);
    }

    uint64_t v21 = MobileActivationError;
    char v16 = 0;
    CFDataRef v17 = v21;
    goto LABEL_19;
  }

  id v11 = v9;
LABEL_21:
  id v12 = data_ark_copy(v5, @"com.apple.fairplay", @"FairPlayContextID");

  id v23 = isNSNumber(v12);
  if (!v23)
  {
    id v26 =  createMobileActivationError( (uint64_t)"store_fairplay_blob",  124LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v11,  @"Failed to create fairplay context.");

    id v11 = v26;
    a3 = v29;
    if (v29) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }

  [v12 unsignedIntValue];
  id v8 = v8;
  -[NSData bytes](v8, "bytes");
  -[NSData length](v8, "length");
  DLHL();
  a3 = v29;
  if (!(_DWORD)v24)
  {
    uint64_t v13 = 1LL;
    goto LABEL_28;
  }

  uint64_t v25 =  createMobileActivationError( (uint64_t)"store_fairplay_blob",  130LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to import key vault: %d",  v24);

  id v11 = v25;
  if (!v29) {
    goto LABEL_24;
  }
LABEL_8:
  id v11 = v11;
  uint64_t v13 = 0LL;
  *a3 = v11;
LABEL_28:

  return v13;
}

uint64_t copy_keys_and_certs( void *a1, id a2, void *a3, unint64_t a4, unint64_t a5, SecIdentityRef *a6, NSError **a7)
{
  SecKeyRef privateKeyRef = 0LL;
  SecIdentityRef identityRef = 0LL;
  CFTypeRef cf = 0LL;
  uint64_t v45 = @"UseSystemKeychainSharediPadOnly";
  char v46 = &__kCFBooleanTrue;
  id v13 = a2;
  id v14 = a1;
  id v40 = 0LL;
  id v35 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v46,  &v45,  1LL);
  int v15 = load_identity((CFTypeRef *)&identityRef, v14, v13, v35, 0LL, &v40);

  char v16 = (NSError *)v40;
  if (v15) {
    BOOL v17 = identityRef == 0LL;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"copy_keys_and_certs",  175LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v16,  @"Failed to load device identity.");
    goto LABEL_7;
  }

  if (a3)
  {
    SecIdentityCopyPrivateKey(identityRef, &privateKeyRef);
    if (privateKeyRef)
    {
      id v39 = v16;
      uint64_t v24 = lockcrypto_create_pem_from_key(privateKeyRef, "RSA PRIVATE KEY", (NSError **)&v39);
      uint64_t v27 = (NSError *)v39;

      id v34 = v24;
      if (v24)
      {
        char v16 = v27;
        goto LABEL_26;
      }

      CFDataRef v19 =  createMobileActivationError( (uint64_t)"copy_keys_and_certs",  188LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v27,  @"Failed to create pem data for private key.");
      int v20 = 0LL;
      uint64_t v21 = 0LL;
      CFDataRef v22 = 0LL;
      id v23 = 0LL;
      char v16 = v27;
LABEL_8:

      if (a7)
      {
        char v16 = v19;
        uint64_t v25 = 0LL;
        id v26 = 0LL;
        *a7 = v16;
      }

      else
      {
        uint64_t v25 = 0LL;
        id v26 = 0LL;
        char v16 = v19;
      }

      id v28 = v35;
      goto LABEL_16;
    }

    MobileActivationError = createMobileActivationError( (uint64_t)"copy_keys_and_certs",  182LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy private key.");
LABEL_7:
    CFDataRef v19 = MobileActivationError;
    int v20 = 0LL;
    uint64_t v21 = 0LL;
    CFDataRef v22 = 0LL;
    id v23 = 0LL;
    uint64_t v24 = 0LL;
    goto LABEL_8;
  }

  id v34 = 0LL;
LABEL_26:
  if (!(a4 | a5))
  {
    id v33 = a6;
    int v20 = 0LL;
    id v26 = 0LL;
    CFDataRef v22 = 0LL;
LABEL_33:
    id v23 = 0LL;
    uint64_t v24 = 0LL;
    goto LABEL_34;
  }

  SecIdentityCopyCertificate(identityRef, (SecCertificateRef *)&cf);
  if (!cf)
  {
    CFDataRef v19 =  createMobileActivationError( (uint64_t)"copy_keys_and_certs",  196LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy certificate from device identity.");
    int v20 = 0LL;
    CFDataRef v22 = 0LL;
LABEL_55:
    id v23 = 0LL;
    uint64_t v24 = 0LL;
    goto LABEL_60;
  }

  if (!a5)
  {
    int v20 = 0LL;
    CFDataRef v22 = 0LL;
    goto LABEL_50;
  }

  CFDataRef v30 = SecCertificateCopyData((SecCertificateRef)cf);
  CFDataRef v22 = v30;
  if (!v30)
  {
    CFDataRef v19 =  createMobileActivationError( (uint64_t)"copy_keys_and_certs",  203LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy certificate data.");
    int v20 = 0LL;
    goto LABEL_55;
  }

  id v38 = v16;
  int v20 = lockcrypto_create_pem(v30, "CERTIFICATE", &v38);
  int v31 = (NSError *)v38;

  if (!v20)
  {
    CFDataRef v19 =  createMobileActivationError( (uint64_t)"copy_keys_and_certs",  209LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v31,  @"Failed to create pem data for certificate.");
    id v23 = 0LL;
    uint64_t v24 = 0LL;
LABEL_59:
    char v16 = v31;
    goto LABEL_60;
  }

  char v16 = v31;
LABEL_50:
  id v33 = a6;
  if (!a4)
  {
    id v26 = 0LL;
    goto LABEL_33;
  }

  CFTypeRef v44 = cf;
  id v23 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v44, 1LL);
  id v37 = v16;
  uint64_t v24 = (NSData *)lockcrypto_extract_public(v23, (NSError **)&v37);
  int v31 = (NSError *)v37;

  if (!v24)
  {
    CFDataRef v19 =  createMobileActivationError( (uint64_t)"copy_keys_and_certs",  222LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v31,  @"Failed to extract public key from certificate chain.");
    goto LABEL_59;
  }

  id v36 = v31;
  id v32 = v31;
  id v26 = lockcrypto_create_pem_from_key((__SecKey *)v24, "RSA PUBLIC KEY", (NSError **)&v36);
  char v16 = (NSError *)v36;

  if (!v26)
  {
    CFDataRef v19 =  createMobileActivationError( (uint64_t)"copy_keys_and_certs",  228LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v16,  @"Failed to create pem data for public key.");
LABEL_60:
    uint64_t v21 = v34;
    goto LABEL_8;
  }

id copy_device_certificate(NSError **a1)
{
  id v2 = 0LL;
  copy_keys_and_certs( @"lockdown-identities",  @"com.apple.lockdown.identity.activation",  0LL,  0LL,  (unint64_t)&v2,  0LL,  a1);
  return v2;
}

id copy_activation_record(void *a1)
{
  id v1 = load_activation_records(a1);
  if (-[NSMutableDictionary count](v1, "count"))
  {
    id v2 = -[NSMutableDictionary allValues](v1, "allValues");
    id v3 = [v2 objectAtIndex:0];
  }

  else
  {
    id v3 = 0LL;
  }

  return v3;
}

uint64_t load_and_validate_activation_record(void *a1, void *a2, char *a3, NSError **a4)
{
  id v7 = a1;
  id v8 = copy_activation_record(v7);
  if (!v8)
  {
    char v16 =  createMobileActivationError( (uint64_t)"load_and_validate_activation_record",  304LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Could not find an activation record.");
    id v12 = 0LL;
    id v10 = 0LL;
    if (!a4) {
      goto LABEL_17;
    }
    goto LABEL_10;
  }

  id v9 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v10 = v9;
  if (!v9)
  {
    char v16 =  createMobileActivationError( (uint64_t)"load_and_validate_activation_record",  310LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate dictionary.");
    id v12 = 0LL;
    if (!a4) {
      goto LABEL_17;
    }
LABEL_10:
    char v16 = v16;
    char v17 = 0;
    uint64_t v18 = 0LL;
    *a4 = v16;
    goto LABEL_18;
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:]( v9,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"UseCommittedUIK");
  if (is_internal_build())
  {
    id v11 = objc_alloc(&OBJC_CLASS___NSUserDefaults);
    id v12 =  -[NSUserDefaults persistentDomainForName:]( v11,  "persistentDomainForName:",  @"com.apple.mobileactivationd");

    id v13 = -[NSDictionary objectForKeyedSubscript:](v12, "objectForKeyedSubscript:", @"UseQACertificates");
    id v14 = isNSNumber(v13);

    if (v14)
    {
      id v15 = -[NSDictionary objectForKeyedSubscript:](v12, "objectForKeyedSubscript:", @"UseQACertificates");
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  v15,  @"UseQACertificates");
    }
  }

  else
  {
    id v12 = 0LL;
  }

  id v25 = 0LL;
  char v19 = verify_activation_record(v7, v8, v10, (uint64_t)&v25);
  char v16 = (NSError *)v25;
  if ((v19 & 1) != 0)
  {
    char v17 = 0;
    uint64_t v18 = 1LL;
    goto LABEL_18;
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"UseFactoryCertificates");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  &__kCFBooleanFalse,  @"UseQACertificates");
  id v24 = v16;
  char v20 = verify_activation_record(v7, v8, v10, (uint64_t)&v24);
  uint64_t v21 = (NSError *)v24;

  if ((v20 & 1) != 0)
  {
    char v17 = 1;
    uint64_t v18 = 1LL;
    char v16 = v21;
    goto LABEL_18;
  }

  char v16 =  createMobileActivationError( (uint64_t)"load_and_validate_activation_record",  341LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v21,  @"Failed to validate activation record.");

  if (a4) {
    goto LABEL_10;
  }
LABEL_17:
  char v17 = 0;
  uint64_t v18 = 0LL;
LABEL_18:
  if (a3) {
    *a3 = v17;
  }
  char v22 = v18 ^ 1;
  if (!a2) {
    char v22 = 1;
  }
  if ((v22 & 1) == 0) {
    *a2 = v8;
  }

  return v18;
}

BOOL send_activation_record_to_mc(void *a1, NSError **a2)
{
  id v3 = a1;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___MCProfileConnection);
  if (!v4)
  {
    id v5 =  createMobileActivationError( (uint64_t)"send_activation_record_to_mc",  370LL,  @"com.apple.MobileActivation.ErrorDomain",  -3LL,  0LL,  @"ManagedConfirguation is not supported on this platform.");
    if (a2)
    {
      id v5 = v5;
      id v8 = 0LL;
      id v6 = 0LL;
      *a2 = v5;
      goto LABEL_9;
    }

uint64_t store_software_update_configuration_flags()
{
  return 0LL;
}

id talkToServerWithError(void *a1, id a2, int a3, void *a4, void *a5, void *a6, void *a7)
{
  id v11 = a1;
  id v56 = a4;
  uint64_t v92 = 0LL;
  id v93 = &v92;
  uint64_t v94 = 0x3032000000LL;
  uint64_t v95 = __Block_byref_object_copy__3;
  id v96 = __Block_byref_object_dispose__3;
  id v97 = 0LL;
  uint64_t v88 = 0LL;
  unsigned int v89 = &v88;
  uint64_t v90 = 0x2020000000LL;
  uint64_t v91 = 0LL;
  uint64_t v82 = 0LL;
  unsigned int v83 = &v82;
  uint64_t v84 = 0x3032000000LL;
  uint64_t v85 = __Block_byref_object_copy__3;
  id v86 = __Block_byref_object_dispose__3;
  id v87 = 0LL;
  uint64_t v76 = 0LL;
  int v77 = &v76;
  uint64_t v78 = 0x3032000000LL;
  uint64_t v79 = __Block_byref_object_copy__3;
  id v80 = __Block_byref_object_dispose__3;
  id v81 = 0LL;
  uint64_t v70 = 0LL;
  uint64_t v71 = &v70;
  uint64_t v72 = 0x3032000000LL;
  uint64_t v73 = __Block_byref_object_copy__3;
  uint64_t v74 = __Block_byref_object_dispose__3;
  id v75 = 0LL;
  v69[0] = 0LL;
  v69[1] = v69;
  v69[2] = 0x2020000000LL;
  v69[3] = -1LL;
  if (!v11)
  {
    uint64_t v21 =  createMobileActivationError( (uint64_t)"talkToServerWithError",  175LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    char v22 = (void *)v71[5];
    v71[5] = (uint64_t)v21;

LABEL_15:
    id v53 = 0LL;
    id v54 = 0LL;
    id v19 = 0LL;
    id v20 = 0LL;
    id v15 = 0LL;
LABEL_16:
    char v16 = 0LL;
    uint64_t v27 = 0LL;
    id v28 = 0LL;
    id v18 = 0LL;
    id v17 = 0LL;
    goto LABEL_17;
  }

  dispatch_semaphore_t v12 = dispatch_semaphore_create(0LL);
  id v13 = (void *)v77[5];
  v77[5] = (uint64_t)v12;

  if (!v77[5])
  {
    id v23 =  createMobileActivationError( (uint64_t)"talkToServerWithError",  181LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create semaphore.");
    id v24 = (void *)v71[5];
    v71[5] = (uint64_t)v23;

    goto LABEL_15;
  }

  id v14 = objc_alloc_init(&OBJC_CLASS___MANetworkServiceClientVersion);
  id v15 = v14;
  if (!v14)
  {
    id v25 =  createMobileActivationError( (uint64_t)"talkToServerWithError",  187LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create delegate.");
    id v26 = (void *)v71[5];
    v71[5] = (uint64_t)v25;

    goto LABEL_15;
  }

  -[MANetworkServiceClientVersion setAllowInvalidCert:](v14, "setAllowInvalidCert:", a2);
  char v16 =  +[NSURLSessionConfiguration defaultSessionConfiguration]( &OBJC_CLASS___NSURLSessionConfiguration,  "defaultSessionConfiguration");
  if (!v16)
  {
    id v32 =  createMobileActivationError( (uint64_t)"talkToServerWithError",  195LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query session configuration.");
    id v33 = (void *)v71[5];
    v71[5] = (uint64_t)v32;

    id v53 = 0LL;
    id v54 = 0LL;
    id v19 = 0LL;
    id v20 = 0LL;
    goto LABEL_16;
  }

  if (v56)
  {
    id v17 = [v56 objectForKey:@"NetworkProxyHost"];
    id v18 = [v56 objectForKey:@"NetworkProxyPort"];
    id v54 = [v56 objectForKey:@"SOCKSProxyHost"];
    id v53 = [v56 objectForKey:@"SOCKSProxyPort"];
    id v19 = [v56 objectForKey:@"NetworkServiceType"];
    id v20 = [v56 objectForKey:@"NetworkSecondaryIdentifier"];
    if (v17)
    {
      a2 = isNSString(v17);
      if (!a2) {
        goto LABEL_11;
      }
      if (!v18)
      {
LABEL_32:
        if (v19)
        {
          id v48 = isNSString(v19);
          if (!v48)
          {
            BOOL v49 = 1;
            goto LABEL_52;
          }

          if (!v20)
          {
            BOOL v49 = 0;
            goto LABEL_39;
          }
        }

        else if (!v20)
        {
          BOOL v49 = 0;
          goto LABEL_52;
        }

        id v36 = isNSString(v20);
        BOOL v49 = v36 == 0LL;

        if (v19)
        {
LABEL_39:

          if (!v18) {
            goto LABEL_40;
          }
          goto LABEL_53;
        }

LABEL_52:
        if (!v18)
        {
LABEL_40:
          if (!v17) {
            goto LABEL_41;
          }
          goto LABEL_54;
        }

LABEL_53:
        if (!v17)
        {
LABEL_41:
          if (v49) {
            goto LABEL_55;
          }
LABEL_42:
          if (v54)
          {
            id v37 = isNSString(v54);
            a2 = v37;
            if (!v37) {
              goto LABEL_59;
            }
            if (v53)
            {
              id v38 = v53;
              goto LABEL_48;
            }
          }

          else
          {
            id v38 = v53;
            if (v53)
            {
LABEL_48:
              id v39 = isNSNumber(v38);

              if (v54)
              {

                if (!v39) {
                  goto LABEL_59;
                }
                goto LABEL_63;
              }

              if (v39)
              {
                id v54 = 0LL;
                goto LABEL_63;
              }

  uint64_t v68 = v60;
  id v59 = verify_activation_record_certificates(v63, v7, v8, (NSError **)&v68);
  id v14 = (NSError *)v68;

  if ((v59 & 1) != 0)
  {
    a4 = 1LL;
    goto LABEL_27;
  }

  id v54 =  createMobileActivationError( (uint64_t)"verify_activation_record",  4030LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v14,  @"Failed to verify activation record certificate.");

  id v14 = v54;
LABEL_25:
  a4 = v61;
  if (v61)
  {
LABEL_26:
    id v14 = v14;
    id v37 = (void *)a4;
    a4 = 0LL;
    *id v37 = v14;
  }

LABEL_59:
              uint64_t v42 =  createMobileActivationError( (uint64_t)"talkToServerWithError",  213LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid SOCKS proxy dictionary: {%@, %@, %@}",  v54,  v53,  v19);
              uint64_t v43 = (void *)v71[5];
              v71[5] = (uint64_t)v42;

              goto LABEL_56;
            }

            id v54 = 0LL;
          }

          id v53 = 0LL;
LABEL_63:
          if (v19)
          {
            -[NSURLSessionConfiguration set_CTDataConnectionServiceType:](v16, "set_CTDataConnectionServiceType:", v19);
            if ([v19 isEqualToString:kCTDataConnectionServiceTypeOTAActivation])
            {
              if ([v18 isEqualToNumber:&off_10026D518]) {
                -[NSURLSessionConfiguration set_requiresSecureHTTPSProxyConnection:]( v16,  "set_requiresSecureHTTPSProxyConnection:",  1LL);
              }
            }
          }

          if (v20) {
            -[NSURLSessionConfiguration set_sourceApplicationSecondaryIdentifier:]( v16,  "set_sourceApplicationSecondaryIdentifier:",  v20);
          }
          if (v17 && v18)
          {
            id v44 = [v11 URL];
            id v45 = [v44 scheme];
            unsigned int v50 = [v45 isEqualToString:@"https"];

            if (v50)
            {
              v102[0] = kCFStreamPropertyHTTPSProxyHost;
              v102[1] = kCFStreamPropertyHTTPSProxyPort;
              v103[0] = v17;
              v103[1] = v18;
              char v46 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v103,  v102,  2LL);
            }

            else
            {
              v100[0] = kCFStreamPropertyHTTPProxyHost;
              v100[1] = kCFStreamPropertyHTTPProxyPort;
              v101[0] = v17;
              v101[1] = v18;
              char v46 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v101,  v100,  2LL);
            }

            -[NSURLSessionConfiguration setConnectionProxyDictionary:](v16, "setConnectionProxyDictionary:", v46);
          }

          if (v54 && v53)
          {
            v98[0] = @"SOCKSProxy";
            v98[1] = @"SOCKSPort";
            v99[0] = v54;
            v99[1] = v53;
            v98[2] = @"SOCKSEnable";
            v99[2] = &__kCFBooleanTrue;
            uint64_t v47 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v99,  v98,  3LL);
            -[NSURLSessionConfiguration setConnectionProxyDictionary:](v16, "setConnectionProxyDictionary:", v47);
          }

          goto LABEL_27;
        }

LABEL_54:
        if (v49) {
          goto LABEL_55;
        }
        goto LABEL_42;
      }
    }

    else if (!v18)
    {
      goto LABEL_32;
    }

    id v7 = isNSNumber(v18);
    if (!v7)
    {
      if (!v17)
      {
LABEL_55:
        id v40 =  createMobileActivationError( (uint64_t)"talkToServerWithError",  208LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid proxy dictionary: {%@, %@, %@}",  v17,  v18,  v19);
        id v41 = (void *)v71[5];
        v71[5] = (uint64_t)v40;

        goto LABEL_56;
      }

    __break(0x5513u);
    goto LABEL_55;
  }

  id v9 = *v6;
  id v10 = v9 != 128 && v9 >= 0x1F;
  if (!v10) {
    return 3LL;
  }
  id v8 = 0LL;
  SecTrustResultType result = 3LL;
  while (v7 >= 2)
  {
    id v11 = v8;
    if (v8 >> 57) {
      break;
    }
    if (v6 >= v5 || v6 < v4) {
      goto LABEL_55;
    }
    dispatch_semaphore_t v12 = (char *)(v6 + 1);
    --v7;
    id v13 = *v6;
    id v8 = *v6++ & 0x7F | (v8 << 7);
    if ((v13 & 0x80) == 0)
    {
      if (v11 >> 54) {
        return 3LL;
      }
      goto LABEL_20;
    }
  }

  return result;
}

void sub_10001E10C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void __talkToServerWithError_block_invoke(uint64_t a1, id a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  id v9 = a3;
  *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = [v9 statusCode];
  id v10 = [v9 allHeaderFields];

  uint64_t v11 = *(void *)(*(void *)(a1 + 80) + 8LL);
  dispatch_semaphore_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  if (!v7 || v8)
  {
    if ((mobileactivationErrorHasDomainAndErrorCode(v8, NSURLErrorDomain, (id)0xFFFFFFFFFFFFFC17LL) & 1) != 0)
    {
      uint64_t v16 = -18LL;
    }

    else if ((mobileactivationErrorHasDomainAndErrorCode(v8, NSURLErrorDomain, (id)0xFFFFFFFFFFFFFC19LL) & 1) != 0)
    {
      uint64_t v16 = -19LL;
    }

    else if ((mobileactivationErrorHasDomainAndErrorCode(v8, NSURLErrorDomain, (id)0xFFFFFFFFFFFFFC0FLL) & 1) != 0)
    {
      uint64_t v16 = -17LL;
    }

    else if ((mobileactivationErrorHasDomainAndErrorCode(v8, NSURLErrorDomain, (id)0xFFFFFFFFFFFFFC15LL) & 1) != 0)
    {
      uint64_t v16 = -20LL;
    }

    else
    {
      if (!mobileactivationErrorHasDomainAndErrorCode(v8, (void *)kCFErrorDomainCFNetwork, (id)0x136))
      {
LABEL_15:
        uint64_t v26 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL);
        id v15 = [*(id *)(a1 + 32) URL];
        id v17 = [*(id *)(a1 + 40) connectionProxyDictionary];
        uint64_t v19 = *(void *)(a1 + 48);
        uint64_t v18 = *(void *)(a1 + 56);
        id v20 = +[NSURLSessionTask description](&OBJC_CLASS___NSURLSessionTask, "description");
        uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL);
        id v22 = [*(id *)(a1 + 64) lastNetworkError];
        id v23 =  createMobileActivationError( (uint64_t)"talkToServerWithError_block_invoke",  290LL,  @"com.apple.MobileActivation.ErrorDomain",  v26,  v8,  @"Failed to send HTTP request to %@ (proxy settings: %@ // service type: %@ // secondary identifier: %@ // session: %@): %ld (%@)",  v15,  v17,  v19,  v18,  v20,  v21,  v22);
        uint64_t v24 = *(void *)(*(void *)(a1 + 96) + 8LL);
        id v25 = *(void **)(v24 + 40);
        *(void *)(v24 + 40) = v23;

        goto LABEL_16;
      }

      uint64_t v16 = -21LL;
    }

    *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL) = v16;
    goto LABEL_15;
  }

  id v13 = +[NSData dataWithData:](&OBJC_CLASS___NSData, "dataWithData:", v7);
  uint64_t v14 = *(void *)(*(void *)(a1 + 104) + 8LL);
  id v15 = *(id *)(v14 + 40);
  *(void *)(v14 + 40) = v13;
LABEL_16:

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(*(void *)(a1 + 112) + 8LL) + 40LL));
}

void __copy_helper_block_e8_32s40s48s56s64s72r80r88r96r104r112r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  id v6 = *(id *)(a2 + 48);
  id v7 = *(id *)(a2 + 56);
  id v8 = *(id *)(a2 + 64);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 8);
  _Block_object_assign((void *)(a1 + 80), *(const void **)(a2 + 80), 8);
  _Block_object_assign((void *)(a1 + 88), *(const void **)(a2 + 88), 8);
  _Block_object_assign((void *)(a1 + 96), *(const void **)(a2 + 96), 8);
  _Block_object_assign((void *)(a1 + 104), *(const void **)(a2 + 104), 8);
  _Block_object_assign((void *)(a1 + 112), *(const void **)(a2 + 112), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64s72r80r88r96r104r112r(uint64_t a1)
{
}

NSMutableDictionary *copyCellularProxyDictionary(char a1, NSError **a2)
{
  id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  if (!v4)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"copyCellularProxyDictionary",  348LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to dictionary.");
    goto LABEL_18;
  }

  if ((a1 & 1) == 0)
  {
    id v13 = objc_alloc(&OBJC_CLASS___CoreTelephonyClient);
    uint64_t v14 = dispatch_get_global_queue(0LL, 0LL);
    id v5 = -[CoreTelephonyClient initWithQueue:](v13, "initWithQueue:", v14);

    if (v5)
    {
      id v9 =  -[CoreTelephonyClient getCurrentDataSubscriptionContextSync:]( v5,  "getCurrentDataSubscriptionContextSync:",  0LL);
      id v15 = [[CTBundle alloc] initWithBundleType:1];
      id v10 = v15;
      id v6 = 0LL;
      id v7 = 0LL;
      uint64_t v11 = 0LL;
      if (v9 && v15)
      {
        id v6 = -[CoreTelephonyClient copyCarrierBundleValue:key:bundleType:error:]( v5,  "copyCarrierBundleValue:key:bundleType:error:",  v9,  @"OTAActivationProxyHost",  v15,  0LL);
        id v7 = -[CoreTelephonyClient copyCarrierBundleValue:key:bundleType:error:]( v5,  "copyCarrierBundleValue:key:bundleType:error:",  v9,  @"OTAActivationProxyPort",  v10,  0LL);
        id v16 = [v9 uuid];
        uint64_t v11 = (__CFString *)[v16 UUIDString];
      }

      id v8 = kCTDataConnectionServiceTypeOTAActivation;
      if (v8) {
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  v8,  @"NetworkServiceType");
      }
      if (!v11) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    MobileActivationError = createMobileActivationError( (uint64_t)"copyCellularProxyDictionary",  357LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create Telephony client.");
LABEL_18:
    uint64_t v19 = MobileActivationError;
    uint64_t v18 = v19;
    if (a2)
    {
      uint64_t v18 = v19;
      id v10 = 0LL;
      id v9 = 0LL;
      uint64_t v11 = 0LL;
      id v8 = 0LL;
      id v7 = 0LL;
      id v6 = 0LL;
      id v5 = 0LL;
      id v17 = 0LL;
      *a2 = v18;
    }

    else
    {
      id v10 = 0LL;
      id v9 = 0LL;
      uint64_t v11 = 0LL;
      id v8 = 0LL;
      id v7 = 0LL;
      id v6 = 0LL;
      id v5 = 0LL;
      id v17 = 0LL;
    }

    goto LABEL_21;
  }

  id v5 = 0LL;
  id v6 = 0LL;
  id v7 = 0LL;
  id v8 = 0LL;
  id v9 = 0LL;
  id v10 = 0LL;
  uint64_t v11 = @"com.apple.CommCenter.CellularPlanProvisioning";
LABEL_12:
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  v11,  @"NetworkSecondaryIdentifier");
LABEL_13:
  if (v6 && v7)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  v6,  @"NetworkProxyHost");
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  v7,  @"NetworkProxyPort");
  }

  id v17 = v4;
  uint64_t v18 = 0LL;
LABEL_21:
  id v20 = v17;

  return v20;
}

uint64_t performMigration(void *a1, void *a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3254779904LL;
  block[2] = __performMigration_block_invoke;
  block[3] = &__block_descriptor_40_e8_32s_e5_v8__0l;
  id v3 = a1;
  id v7 = v3;
  if (performMigration_onceToken != -1) {
    dispatch_once(&performMigration_onceToken, block);
  }
  uint64_t v4 = performMigration_retval;
  if (a2 && (performMigration_retval & 1) == 0)
  {
    *a2 = (id) performMigration_localError;
    uint64_t v4 = performMigration_retval;
  }

  return v4;
}

void __performMigration_block_invoke(uint64_t a1)
{
  id v2 = copySignpostLoggingHandle();
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v2,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "PerformMigration",  "",  buf,  2u);
  }

  id v3 = *(void **)(a1 + 32);
  if (!v3)
  {
    id v17 =  createMobileActivationError( (uint64_t)"performMigration_block_invoke",  2075LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid input(s).");
    goto LABEL_92;
  }

  id v4 = v3;
  id v5 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v6 = [v5 copyAnswer:@"BuildVersion"];

  id v7 = isNSString(v6);
  if (!v7)
  {
    uint64_t v18 =  createMobileActivationError( (uint64_t)"perform_data_migration",  1730LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve %@.",  @"BuildVersion");
    unint64_t v161 = 0LL;
    id v162 = 0LL;
LABEL_15:
    v160 = 0LL;
LABEL_76:
    uint64_t v57 = v18;
    char v16 = 0;
    id v15 = v57;
LABEL_77:

    goto LABEL_78;
  }

  id v8 = (__CFString *)data_ark_copy(v4, 0LL, @"BuildVersion");
  id v9 = isNSString(v8);

  if (!v9)
  {

    id v8 = &stru_100265508;
  }

  id v10 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v11 = [v10 copyAnswer:@"ProductVersion"];

  id v162 = v11;
  id v12 = isNSString(v11);

  unint64_t v161 = v8;
  if (!v12)
  {
    uint64_t v18 =  createMobileActivationError( (uint64_t)"perform_data_migration",  1741LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve %@.",  @"ProductVersion");
    goto LABEL_15;
  }

  id v13 = (__CFString *)data_ark_copy(v4, 0LL, @"ProductVersion");
  id v14 = isNSString(v13);

  if (!v14)
  {

    id v13 = &stru_100265508;
  }

  v160 = v13;
  if (([v6 isEqualToString:v8] & 1) == 0)
  {
    maLog((uint64_t)"perform_data_migration", 0LL, @"Upgrade from %@ (%@) to %@ (%@) detected.", v8, v13, v6, v11);
    id v168 = 0LL;
    char v19 = perform_sydro_data_migration_tasks(v4, (NSMutableDictionary *)&v168);
    id v20 = (NSError *)v168;
    if ((v19 & 1) == 0)
    {
      uint64_t v18 =  createMobileActivationError( (uint64_t)"perform_data_migration",  1759LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v20,  @"Failed to perform data migration task.");
      id v34 = v20;
LABEL_75:

      goto LABEL_76;
    }

    id v21 = v4;
    id v22 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
    id v23 = [v22 copyAnswer:@"BuildVersion"];

    id obj = v23;
    id v24 = isNSString(v23);

    id v157 = v21;
    if (v24)
    {
      id v25 = (__CFString *)data_ark_copy(v21, 0LL, @"BuildVersion");
      id v26 = isNSString(v25);

      if (!v26)
      {

        id v25 = &stru_100265508;
      }

      id v27 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
      id v28 = [v27 copyAnswer:@"ProductVersion"];

      id v151 = v28;
      id v29 = isNSString(v28);

      if (v29)
      {
        id v30 = obj;
        if ([obj isEqualToString:v25])
        {
          v163 = 0LL;
          id v159 = 0LL;
          int v31 = 0LL;
          __int128 v153 = 0LL;
          __int128 v155 = 0LL;
          char v32 = 1;
          id v33 = v20;
LABEL_37:
          id v36 = v151;
          goto LABEL_38;
        }

        id v37 = copy_legacy_dcrt_path();
        id v38 = [v37 stringByAppendingPathComponent:@"dcrt.der"];

        id v39 = copy_dcrt_path();
        id v159 = [v39 stringByAppendingPathComponent:@"dcrt.der"];

        v163 = v38;
        id v40 = -[NSData initWithContentsOfFile:](objc_alloc(&OBJC_CLASS___NSData), "initWithContentsOfFile:", v38);
        if (!v40)
        {
          int v31 = 0LL;
          __int128 v153 = 0LL;
          __int128 v155 = 0LL;
          char v32 = 1;
          id v33 = v20;
          id v30 = obj;
          goto LABEL_37;
        }

        id v41 = v40;
        *(void *)buf = 0LL;
        uint64_t v42 = parseDERCertificatesFromChain(v40, buf);
        id v43 = *(id *)buf;
        __int128 v155 = v41;
        if (v42)
        {
          __int128 v153 = v42;
          id v44 = (const __CFData *)-[NSMutableArray objectAtIndexedSubscript:](v42, "objectAtIndexedSubscript:", 0LL);
          SecCertificateRef v45 = SecCertificateCreateWithData(0LL, v44);

          char v46 = v45;
          id v36 = v151;
          if (v46)
          {
            *(void *)handler = v43;
            CFTypeRef cf = v46;
            int v47 = certificatePublicKeyMatchesSystemPublicKey(2LL, 9LL, v46, (NSError **)handler);
            int v31 = (NSError *)*(id *)handler;

            if (v47)
            {
              id v147 = v6;
              id v149 = v4;
              id v48 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
              id v49 = copy_dcrt_path();
              *(void *)&__int128 v178 = NSFilePosixPermissions;
              *(void *)&__int128 v187 = &off_10026D548;
              unsigned int v50 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v187,  &v178,  1LL);
              *(void *)v195 = v31;
              unsigned __int8 v51 = -[NSFileManager createDirectoryAtPath:withIntermediateDirectories:attributes:error:]( v48,  "createDirectoryAtPath:withIntermediateDirectories:attributes:error:",  v49,  1LL,  v50,  v195);
              id v52 = *(id *)v195;

              if ((v51 & 1) != 0)
              {
                maLog( (uint64_t)"perform_dawn_data_migration_tasks",  0LL,  @"Moving DCRT from legacy path to system location.");
                id v53 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
                -[NSFileManager removeItemAtPath:error:](v53, "removeItemAtPath:error:", v159, 0LL);

                id v54 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
                v193[0] = v52;
                unsigned __int8 v55 = -[NSFileManager copyItemAtPath:toPath:error:]( v54,  "copyItemAtPath:toPath:error:",  v163,  v159,  v193);
                int v31 = (NSError *)v193[0];

                if ((v55 & 1) != 0)
                {
                  maLog( (uint64_t)"perform_dawn_data_migration_tasks",  0LL,  @"Successfuly moved DCRT to system location.");
                  id v6 = v147;
                  id v4 = v149;
                  id v36 = v151;
                  goto LABEL_35;
                }

                __int128 v145 =  createMobileActivationError( (uint64_t)"perform_dawn_data_migration_tasks",  1690LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v31,  @"Failed to copy %@ to %@.",  v163,  v159);
              }

              else
              {
                int v31 = (NSError *)copy_dcrt_path();
                __int128 v145 =  createMobileActivationError( (uint64_t)"perform_dawn_data_migration_tasks",  1680LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v52,  @"Failed to create %@.",  v31);
              }

              id v6 = v147;
              id v4 = v149;

              id v33 = v145;
              char v32 = 0;
              int v31 = v33;
              id v30 = obj;
              id v36 = v151;
              goto LABEL_100;
            }

LABEL_35:
            id v56 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
            -[NSFileManager removeItemAtPath:error:](v56, "removeItemAtPath:error:", v163, 0LL);

            char v32 = 1;
            id v33 = v20;
            id v30 = obj;
LABEL_100:
            CFRelease(cf);
            goto LABEL_38;
          }

          id v35 =  createMobileActivationError( (uint64_t)"perform_dawn_data_migration_tasks",  1674LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create certificate.");

LABEL_27:
          id v33 = v35;
          char v32 = 0;
          int v31 = v33;
          id v30 = obj;
LABEL_38:

          uint64_t v57 = v33;
          if ((v32 & 1) != 0)
          {
            __int128 v156 = v57;
            id v158 = v157;
            id v58 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
            id v59 = copy_splunk_directory_path();
            v191[0] = NSFilePosixPermissions;
            v193[0] = &off_10026D548;
            id v60 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v193,  v191,  1LL);
            v173[0] = 0LL;
            unsigned int v61 = -[NSFileManager createDirectoryAtPath:withIntermediateDirectories:attributes:error:]( v58,  "createDirectoryAtPath:withIntermediateDirectories:attributes:error:",  v59,  1LL,  v60,  v173);
            id v62 = (NSError *)v173[0];

            char v154 = v61;
            if (v61)
            {
              id v148 = v6;
              id v150 = v4;
              uint64_t v152 = a1;
              uint64_t v63 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
              id v64 = copy_software_update_splunk_directory_path();
              v65 = +[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v64);
              uint64_t v66 =  -[NSFileManager contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:]( v63,  "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:",  v65,  0LL,  4LL,  0LL);

              *(_OWORD *)v189 = 0u;
              __int128 v190 = 0u;
              __int128 v187 = 0u;
              __int128 v188 = 0u;
              obja = v66;
              id v67 = -[NSArray countByEnumeratingWithState:objects:count:]( obja,  "countByEnumeratingWithState:objects:count:",  &v187,  buf,  16LL);
              if (v67)
              {
                id v68 = v67;
                uint64_t v69 = *(void *)v188;
                do
                {
                  uint64_t v70 = 0LL;
                  id v164 = v68;
                  do
                  {
                    if (*(void *)v188 != v69) {
                      objc_enumerationMutation(obja);
                    }
                    uint64_t v71 = *(void **)(*((void *)&v187 + 1) + 8LL * (void)v70);
                    id v72 = [v71 pathExtension];
                    unsigned int v73 = [v72 isEqualToString:@"splunklog"];

                    if (v73)
                    {
                      id v74 = copy_splunk_directory_path();
                      id v75 = [v71 lastPathComponent];
                      id v76 = [v74 stringByAppendingPathComponent:v75];

                      int v77 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
                      -[NSFileManager removeItemAtPath:error:](v77, "removeItemAtPath:error:", v76, 0LL);

                      uint64_t v78 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
                      id v79 = [v71 path];
                      v171[0] = v62;
                      unsigned __int8 v80 = -[NSFileManager copyItemAtPath:toPath:error:]( v78,  "copyItemAtPath:toPath:error:",  v79,  v76,  v171);
                      id v81 = (NSError *)v171[0];

                      if ((v80 & 1) != 0)
                      {
                        uint64_t v82 = (NSError *)[v71 path];
                        maLog( (uint64_t)"performRestoreLogMigrationTasks",  0LL,  @"Successfully copied %@ to %@.",  v82,  v76);
                      }

                      else
                      {
                        unsigned int v83 = copyLoggingHandle();
                        if (os_log_type_enabled(v83, OS_LOG_TYPE_FAULT))
                        {
                          id v84 = [v71 path];
                          id v85 = copy_splunk_directory_path();
                          *(_DWORD *)handler = 138412802;
                          *(void *)&void handler[4] = v84;
                          *(_WORD *)&handler[12] = 2112;
                          *(void *)&handler[14] = v85;
                          *(_WORD *)&handler[22] = 2112;
                          v176 = v81;
                          _os_log_fault_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_FAULT,  "Failed to copy %@ to %@: %@",  handler,  0x20u);
                        }

                        uint64_t v82 = v81;
                        id v81 = 0LL;
                      }

                      id v68 = v164;

                      id v62 = v81;
                    }

                    uint64_t v70 = (char *)v70 + 1;
                  }

                  while (v68 != v70);
                  id v68 = -[NSArray countByEnumeratingWithState:objects:count:]( obja,  "countByEnumeratingWithState:objects:count:",  &v187,  buf,  16LL);
                }

                while (v68);
              }

              id v86 = &CCDigest_ptr;
              id v87 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
              id v88 = copy_software_update_log_directory_path();
              unsigned int v89 = +[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v88);
              uint64_t v90 =  -[NSFileManager contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:]( v87,  "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:",  v89,  0LL,  4LL,  0LL);

              *(_OWORD *)v180 = 0u;
              __int128 v181 = 0u;
              __int128 v178 = 0u;
              __int128 v179 = 0u;
              objb = v90;
              id v91 = -[NSArray countByEnumeratingWithState:objects:count:]( objb,  "countByEnumeratingWithState:objects:count:",  &v178,  handler,  16LL);
              if (v91)
              {
                id v92 = v91;
                uint64_t v93 = *(void *)v179;
                do
                {
                  for (i = 0LL; i != v92; i = (char *)i + 1)
                  {
                    if (*(void *)v179 != v93) {
                      objc_enumerationMutation(objb);
                    }
                    uint64_t v95 = *(void **)(*((void *)&v178 + 1) + 8LL * (void)i);
                    id v96 = copy_log_directory_path();
                    id v97 = [v95 lastPathComponent];
                    id v98 = [v96 stringByAppendingPathComponent:v97];

                    id v99 = [v86[70] defaultManager];
                    [v99 removeItemAtPath:v98 error:0];

                    id v100 = [v86[70] defaultManager];
                    id v101 = [v95 path];
                    v169[0] = v62;
                    unsigned __int8 v102 = [v100 copyItemAtPath:v101 toPath:v98 error:v169];
                    unsigned int v103 = (NSError *)v169[0];

                    if ((v102 & 1) != 0)
                    {
                      id v104 = (NSError *)[v95 path];
                      maLog( (uint64_t)"performRestoreLogMigrationTasks",  0LL,  @"Successfully copied %@ to %@.",  v104,  v98);
                      id v62 = v103;
                    }

                    else
                    {
                      uint64_t v105 = copyLoggingHandle();
                      if (os_log_type_enabled(v105, OS_LOG_TYPE_FAULT))
                      {
                        id v106 = [v95 path];
                        *(_DWORD *)v195 = 138412802;
                        *(void *)&v195[4] = v106;
                        *(_WORD *)&v195[12] = 2112;
                        *(void *)&v195[14] = v98;
                        *(_WORD *)&v195[22] = 2112;
                        v196 = v103;
                        _os_log_fault_impl( (void *)&_mh_execute_header,  v105,  OS_LOG_TYPE_FAULT,  "Failed to copy %@ to %@: %@",  v195,  0x20u);
                      }

                      id v62 = 0LL;
                      id v104 = v103;
                    }

                    id v86 = &CCDigest_ptr;
                  }

                  id v92 = -[NSArray countByEnumeratingWithState:objects:count:]( objb,  "countByEnumeratingWithState:objects:count:",  &v178,  handler,  16LL);
                }

                while (v92);
              }

              int v107 = v156;
              id v108 = v156;
              id v4 = v150;
              a1 = v152;
              id v6 = v148;
            }

            else
            {
              id v110 = copy_splunk_directory_path();
              uint64_t v111 =  createMobileActivationError( (uint64_t)"performRestoreLogMigrationTasks",  138LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v62,  @"Failed to create %@.",  v110);

              id v62 = v111;
              id v108 = v62;
              int v107 = v156;
            }

            uint64_t v57 = v108;
            if ((v154 & 1) != 0)
            {
              char v16 = 1;
              data_ark_set(v158, 0LL, @"PreSydroDataMigrationCompleted", &__kCFBooleanTrue, 1);
              data_ark_set(v158, 0LL, @"PreDawnDataMigrationCompleted", &__kCFBooleanTrue, 1);
              data_ark_set(v158, 0LL, @"BuildVersion", v6, 1);
              data_ark_set(v158, 0LL, @"ProductVersion", v162, 1);
              rollSplunkLogUUID(v158);
              id v15 = 0LL;
              goto LABEL_77;
            }

            uint64_t v109 =  createAndLogError( (uint64_t)"perform_data_migration",  1769LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v57,  @"Failed to perform restore log migration task.");
          }

          else
          {
            uint64_t v109 =  createMobileActivationError( (uint64_t)"perform_data_migration",  1764LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v57,  @"Failed to perform data migration task.");
          }

          uint64_t v18 = v109;
          id v34 = v57;
          goto LABEL_75;
        }

        id v35 =  createMobileActivationError( (uint64_t)"perform_dawn_data_migration_tasks",  1668LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v43,  @"Failed to parse DCRT DER cert chain.");
      }

      else
      {
        id v35 =  createMobileActivationError( (uint64_t)"perform_dawn_data_migration_tasks",  1649LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve %@.",  @"ProductVersion");
        v163 = 0LL;
        id v159 = 0LL;
        __int128 v155 = 0LL;
      }

      __int128 v153 = 0LL;
      id v36 = v151;
      goto LABEL_27;
    }

    id v35 =  createMobileActivationError( (uint64_t)"perform_dawn_data_migration_tasks",  1638LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve %@.",  @"BuildVersion");
    v163 = 0LL;
    id v159 = 0LL;
    __int128 v153 = 0LL;
    __int128 v155 = 0LL;
    id v25 = 0LL;
    id v36 = 0LL;
    goto LABEL_27;
  }

  id v15 = 0LL;
  char v16 = 1;
LABEL_78:

  v112 = v15;
  if ((v16 & 1) != 0)
  {
    v113 = *(void **)(a1 + 32);
    if (v113)
    {
      id v114 = v113;
      data_ark_register_set_notification( v114,  0LL,  @"BrickState",  @"com.apple.mobile.lockdown.brick_state",  8);
      data_ark_register_set_notification( v114,  0LL,  @"ActivationState",  @"com.apple.mobile.lockdown.activation_state",  8);
      data_ark_register_set_notification( v114,  0LL,  @"CollectionLastPerformed",  @"com.apple.mobile.activation.collection_performed",  2);
      data_ark_register_set_notification( v114,  0LL,  @"UCRTOOBLastPerformed",  @"com.apple.mobile.activation.ucrt_oob_performed",  2);
      data_ark_register_set_notification( v114,  0LL,  @"DCRTOOBLastPerformed",  @"com.apple.mobile.activation.dcrt_oob_performed",  2);
      v115 = v112;
    }

    else
    {
      id v117 = 0LL;
      v115 = createMobileActivationError( (uint64_t)"register_notifications", 1805LL, @"com.apple.MobileActivation.ErrorDomain", -2LL, 0LL, @"Invalid intput.");
    }

    v118 = v115;
    if (v113)
    {
      id v119 = *(id *)(a1 + 32);
      if (v119)
      {
        v120 = (const char *)[@"com.apple.mobileactivationd.factoryactivation" UTF8String];
        *(void *)buf = _NSConcreteStackBlock;
        uint64_t v183 = 3254779904LL;
        v184 = __register_xpc_activities_block_invoke;
        v185 = &__block_descriptor_40_e8_32s_e33_v16__0__NSObject_OS_xpc_object__8l;
        v121 = (NSError *)v119;
        v186 = v121;
        xpc_activity_register(v120, XPC_ACTIVITY_CHECK_IN, buf);
        v122 = (const char *)[@"com.apple.mobileactivationd.collection" UTF8String];
        *(void *)handler = _NSConcreteStackBlock;
        *(void *)&handler[8] = 3254779904LL;
        *(void *)&handler[16] = __register_xpc_activities_block_invoke_503;
        v176 = (NSError *)&__block_descriptor_40_e8_32s_e33_v16__0__NSObject_OS_xpc_object__8l;
        v123 = v121;
        id v177 = v123;
        xpc_activity_register(v122, XPC_ACTIVITY_CHECK_IN, handler);
        v124 = (const char *)[@"com.apple.mobileactivationd.UCRT.OOB" UTF8String];
        *(void *)&__int128 v187 = _NSConcreteStackBlock;
        *((void *)&v187 + 1) = 3254779904LL;
        *(void *)&__int128 v188 = __register_xpc_activities_block_invoke_504;
        *((void *)&v188 + 1) = &__block_descriptor_40_e8_32s_e33_v16__0__NSObject_OS_xpc_object__8l;
        uint64_t v125 = v123;
        v189[0] = v125;
        xpc_activity_register(v124, XPC_ACTIVITY_CHECK_IN, &v187);
        uint64_t v126 = (const char *)[@"com.apple.mobileactivationd.DCRT.OOB" UTF8String];
        *(void *)&__int128 v178 = _NSConcreteStackBlock;
        *((void *)&v178 + 1) = 3254779904LL;
        *(void *)&__int128 v179 = __register_xpc_activities_block_invoke_505;
        *((void *)&v179 + 1) = &__block_descriptor_40_e8_32s_e33_v16__0__NSObject_OS_xpc_object__8l;
        v127 = v125;
        v180[0] = v127;
        xpc_activity_register(v126, XPC_ACTIVITY_CHECK_IN, &v178);
        v128 = (const char *)[@"com.apple.mobileactivationd.SDCRT.OOB" UTF8String];
        *(void *)v195 = _NSConcreteStackBlock;
        *(void *)&v195[8] = 3254779904LL;
        *(void *)&v195[16] = __register_xpc_activities_block_invoke_506;
        v196 = (NSError *)&__block_descriptor_40_e8_32s_e33_v16__0__NSObject_OS_xpc_object__8l;
        v129 = v127;
        v197 = v129;
        xpc_activity_register(v128, XPC_ACTIVITY_CHECK_IN, v195);
        v130 = (const char *)[@"com.apple.mobileactivationd.DCRT.OOB.LoadSpreading" UTF8String];
        v193[0] = _NSConcreteStackBlock;
        v193[1] = (id)3254779904LL;
        v193[2] = __register_xpc_activities_block_invoke_507;
        v193[3] = &__block_descriptor_40_e8_32s_e33_v16__0__NSObject_OS_xpc_object__8l;
        id v131 = v129;
        v194 = v131;
        xpc_activity_register(v130, XPC_ACTIVITY_CHECK_IN, v193);
        id v132 = (const char *)[@"com.apple.mobileactivationd.SDCRT.OOB.LoadSpreading" UTF8String];
        v191[0] = _NSConcreteStackBlock;
        v191[1] = 3254779904LL;
        v191[2] = __register_xpc_activities_block_invoke_508;
        v191[3] = &__block_descriptor_40_e8_32s_e33_v16__0__NSObject_OS_xpc_object__8l;
        v133 = v131;
        v192 = v133;
        xpc_activity_register(v132, XPC_ACTIVITY_CHECK_IN, v191);
        v134 = (const char *)[@"com.apple.mobileactivationd.splunklogging" UTF8String];
        v173[0] = _NSConcreteStackBlock;
        v173[1] = (id)3254779904LL;
        v173[2] = __register_xpc_activities_block_invoke_509;
        v173[3] = &__block_descriptor_40_e8_32s_e33_v16__0__NSObject_OS_xpc_object__8l;
        id v135 = v133;
        id v174 = v135;
        xpc_activity_register(v134, XPC_ACTIVITY_CHECK_IN, v173);
        unint64_t v136 = (const char *)[@"com.apple.mobileactivationd.splunklogging.daily" UTF8String];
        v171[0] = _NSConcreteStackBlock;
        v171[1] = (id)3254779904LL;
        v171[2] = __register_xpc_activities_block_invoke_510;
        v171[3] = &__block_descriptor_40_e8_32s_e33_v16__0__NSObject_OS_xpc_object__8l;
        id v137 = v135;
        id v172 = v137;
        xpc_activity_register(v136, XPC_ACTIVITY_CHECK_IN, v171);
        v138 = (const char *)[@"com.apple.mobileactivationd.splunklogging.rollidentifier" UTF8String];
        v169[0] = _NSConcreteStackBlock;
        v169[1] = (id)3254779904LL;
        v169[2] = __register_xpc_activities_block_invoke_511;
        v169[3] = &__block_descriptor_40_e8_32s_e33_v16__0__NSObject_OS_xpc_object__8l;
        id v170 = v137;
        xpc_activity_register(v138, XPC_ACTIVITY_CHECK_IN, v169);

        unint64_t v139 = v186;
        BOOL v140 = v118;
      }

      else
      {
        unint64_t v139 = createMobileActivationError( (uint64_t)"register_xpc_activities", 1833LL, @"com.apple.MobileActivation.ErrorDomain", -2LL, 0LL, @"Invalid intput(s).");
        BOOL v140 = v139;
      }

      id v17 = v140;
      if (v119)
      {
        dealwith_activation(*(void **)(a1 + 32), 0LL);
        performMigration_retval = 1;
      }

      else
      {
        unint64_t v141 =  createAndLogError( (uint64_t)"performMigration_block_invoke",  2090LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v17,  @"Failed to register XPC activities.");

        id v17 = v141;
      }

      goto LABEL_92;
    }

    id v17 =  createAndLogError( (uint64_t)"performMigration_block_invoke",  2085LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v118,  @"Failed to register notifications.");
    v116 = v118;
  }

  else
  {
    id v17 =  createAndLogError( (uint64_t)"performMigration_block_invoke",  2080LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v112,  @"Data migration failed.");
    v116 = v112;
  }

LABEL_92:
  int v142 = (void *)performMigration_localError;
  performMigration_localError = (uint64_t)v17;
  __int128 v143 = v17;

  data_ark_set(*(void **)(a1 + 32), 0LL, @"DataMigrationCompleted", &__kCFBooleanTrue, 0);
  unint64_t v144 = copySignpostLoggingHandle();
  if (os_signpost_enabled(v144))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v144,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "performMigration",  "",  buf,  2u);
  }
}

  return a4;
}

uint64_t dealwith_activation(void *a1, void *a2)
{
  id v3 = a1;
  char v24 = 0;
  id v4 = data_ark_copy(v3, 0LL, @"ActivationState");
  id v5 = (__CFString *)isNSString(v4);

  if (!v5) {
    id v5 = @"Unactivated";
  }
  if (use_hactivation())
  {
    maLog( (uint64_t)"dealwith_activation",  0LL,  @"Hactivation is enabled, short circuiting activation state to Activated.");
    data_ark_set(v3, 0LL, @"ActivationState", @"Activated", 0);
    data_ark_set(v3, 0LL, @"BrickState", &__kCFBooleanFalse, 0);
    id v6 = 0LL;
    id v7 = 0LL;
    id v8 = 0LL;
    id v9 = 0LL;
    uint64_t v10 = 1LL;
  }

  else
  {
    id v22 = 0LL;
    id v23 = 0LL;
    char v11 = load_and_validate_activation_record(v3, &v23, &v24, (NSError **)&v22);
    id v7 = v23;
    id v12 = (NSError *)v22;
    if ((v11 & 1) != 0)
    {
      id v6 = 0LL;
      if (data_ark_exists(v3, 0LL, @"CollectionLastPerformed"))
      {
        id v13 = copy_suinfo_directory_path();
        id v6 = [v13 stringByAppendingPathComponent:@"psc.sui"];

        if (v6)
        {
          id v14 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
          unsigned __int8 v15 = -[NSFileManager fileExistsAtPath:isDirectory:](v14, "fileExistsAtPath:isDirectory:", v6, 0LL);

          if ((v15 & 1) == 0)
          {
            id v16 = data_ark_copy(v3, 0LL, @"CollectionLastPerformed");
            maLog((uint64_t)"dealwith_activation", 0LL, @"suinfo from %@ is now missing.", v16);

            data_ark_remove(v3, 0LL, @"PCRTToken");
            data_ark_remove(v3, 0LL, @"CollectionLastPerformed");
          }
        }
      }

      id v17 = data_ark_copy(v3, 0LL, @"ActivationExpired");
      id v8 = isNSNumber(v17);

      if ([v8 BOOLValue])
      {
        maLog((uint64_t)"dealwith_activation", 0LL, @"Activation has expired, deactivating device.");
        handle_deactivate(v3, 1);
        uint64_t v10 = 0LL;
      }

      else
      {
        data_ark_set(v3, 0LL, @"BrickState", &__kCFBooleanFalse, 1);
        if (v24)
        {
          data_ark_set(v3, 0LL, @"ActivationState", @"FactoryActivated", 0);
          uint64_t v10 = 1LL;
        }

        else
        {
          uint64_t v10 = 1LL;
          data_ark_set(v3, 0LL, @"ActivationState", @"Activated", 1);
        }
      }

      id v9 = v12;
    }

    else
    {
      id v9 =  createAndLogError( (uint64_t)"dealwith_activation",  3484LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v12,  @"Failed to load or validate activation record.");

      if (-[__CFString isEqualToString:](v5, "isEqualToString:", @"Activated"))
      {
        uint64_t v18 = copyLoggingHandle();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT)) {
          dealwith_activation_cold_1();
        }

        writeSplunkLog(v3, 34LL, -1LL, (uint64_t)"dealwith_activation", 3488, 0LL, @"%@", v19, (uint64_t)v9);
      }

      handle_deactivate(v3, 1);
      id v6 = 0LL;
      id v8 = 0LL;
      uint64_t v10 = 0LL;
    }
  }

  id v20 = data_ark_copy(v3, 0LL, @"ActivationState");
  maLog((uint64_t)"dealwith_activation", 0LL, @"Activation State: %@", v20);

  data_ark_set(v3, 0LL, @"ActivationExpired", &__kCFBooleanFalse, 1);
  if (a2 && (v10 & 1) == 0) {
    *a2 = v9;
  }

  return v10;
}

id preSydroDataMigrationCompleted(void *a1)
{
  id v1 = data_ark_copy(a1, 0LL, @"PreSydroDataMigrationCompleted");
  id v2 = isNSNumber(v1);
  if (v2)
  {
    id v3 = v2;
    id v4 = [v1 BOOLValue];
  }

  else
  {
    id v4 = 0LL;
  }

  return v4;
}

id dataMigrationCompleted(void *a1)
{
  id v1 = data_ark_copy(a1, 0LL, @"DataMigrationCompleted");
  id v2 = isNSNumber(v1);
  if (v2)
  {
    id v3 = v2;
    id v4 = [v1 BOOLValue];
  }

  else
  {
    id v4 = 0LL;
  }

  return v4;
}

void issueDCRT(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  char v11 = (dispatch_queue_s *)copyMobileActivationSerialQueue();
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3254779904LL;
  v16[2] = __issueDCRT_block_invoke;
  _OWORD v16[3] = &__block_descriptor_64_e8_32s40s48s56bs_e5_v8__0l;
  id v17 = v9;
  id v18 = v7;
  id v19 = v8;
  id v20 = v10;
  id v12 = v10;
  id v13 = v8;
  id v14 = v7;
  id v15 = v9;
  dispatch_async(v11, v16);
}

void __issueDCRT_block_invoke(uint64_t a1)
{
  uint64_t v114 = 0LL;
  v115 = &v114;
  uint64_t v116 = 0x3032000000LL;
  id v117 = __Block_byref_object_copy__4;
  v118 = __Block_byref_object_dispose__4;
  id v119 = 0LL;
  id v81 = @"DCRTIssuanceInFlight";
  uint64_t v108 = 0LL;
  uint64_t v109 = &v108;
  uint64_t v110 = 0x3032000000LL;
  uint64_t v111 = __Block_byref_object_copy__4;
  v112 = __Block_byref_object_dispose__4;
  id v113 = 0LL;
  uint64_t v102 = 0LL;
  unsigned int v103 = &v102;
  uint64_t v104 = 0x3032000000LL;
  uint64_t v105 = __Block_byref_object_copy__4;
  id v106 = __Block_byref_object_dispose__4;
  id v107 = 0LL;
  CFTypeRef cf = 0LL;
  id v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"sdcrtAttestation"];
  id v3 = v2;
  if (v2)
  {
    id v4 = isNSNumber(v2);
    BOOL v5 = v4 == 0LL;

    if (v5)
    {
      id v9 =  createMobileActivationError( (uint64_t)"issueDCRT_block_invoke",  2186LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid option (%@).",  @"sdcrtAttestation");
      goto LABEL_19;
    }
  }

  if ([v3 BOOLValue])
  {
    id v6 = @"SDCRTIssuanceInFlight";

    int v75 = 3;
    uint64_t v7 = 10LL;
    id v76 = @"SDAK";
    id v81 = v6;
    id v8 = @"SDCRT";
  }

  else
  {
    int v75 = 1;
    uint64_t v7 = 9LL;
    id v76 = @"DAK";
    id v8 = @"DCRT";
  }

  uint64_t v78 = v8;
  if (is_virtual_machine())
  {
    id v9 =  createMobileActivationError( (uint64_t)"issueDCRT_block_invoke",  2199LL,  @"com.apple.MobileActivation.ErrorDomain",  -3LL,  0LL,  @"%@ not supported on virtual machines.",  v78);
LABEL_19:
    id v22 = v9;
    id v23 = 0LL;
    id v19 = 0LL;
    id v79 = 0LL;
    id v80 = 0LL;
LABEL_20:
    id v24 = 0LL;
LABEL_21:
    id v25 = v115;
    goto LABEL_22;
  }

  id v80 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"IgnoreExistingDCRT"];
  if (v80)
  {
    id v10 = isNSNumber(v80);
    BOOL v11 = v10 == 0LL;

    if (v11)
    {
      id v22 =  createMobileActivationError( (uint64_t)"issueDCRT_block_invoke",  2207LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid option (%@).",  @"IgnoreExistingDCRT");
      id v23 = 0LL;
      id v19 = 0LL;
      id v79 = 0LL;
      goto LABEL_20;
    }
  }

  id v79 = copyDCRT(*(void **)(a1 + 40), 0LL, 0LL, *(void **)(a1 + 32), 0LL);
  unsigned __int8 v12 = [v80 BOOLValue];
  if (v79) {
    char v13 = v12;
  }
  else {
    char v13 = 1;
  }
  if ((v13 & 1) != 0) {
    goto LABEL_31;
  }
  id v14 = (id *)v115;
  id obj = (id)v115[5];
  id v15 = parseDERCertificatesFromChain(v79, &obj);
  objc_storeStrong(v14 + 5, obj);
  id v16 = (void *)v109[5];
  v109[5] = (uint64_t)v15;

  id v17 = (void *)v109[5];
  if (!v17)
  {
LABEL_31:
    id v19 = 0LL;
  }

  else
  {
    id v18 = (const __CFData *)[v17 objectAtIndexedSubscript:0];
    id v19 = SecCertificateCreateWithData(kCFAllocatorDefault, v18);

    if (v19)
    {
      id v20 = (id *)v115;
      id v99 = (id)v115[5];
      int v21 = certificatePublicKeyMatchesSystemPublicKey(2LL, v7, v19, (NSError **)&v99);
      objc_storeStrong(v20 + 5, v99);
      if (v21)
      {
        v120 = @"RKCertification";
        v121 = v79;
        id v22 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v121,  &v120,  1LL);
        id v23 = 0LL;
        id v24 = 0LL;
        id v25 = v103;
LABEL_22:
        id v26 = (void *)v25[5];
        v25[5] = (uint64_t)v22;

        id v27 = 0LL;
        char v28 = 0;
        id v29 = 0LL;
        id v30 = 0LL;
        id v31 = 0LL;
        goto LABEL_23;
      }
    }
  }

  id v33 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"UseCellularBootstrapProxy"];
  if (v33
    || (id v33 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"UseCellularOTAProxy"]) != 0
    || (id v33 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"SOCKSProxyHost"]) != 0)
  {
  }

  else
  {
    id v56 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"SOCKSProxyPort"];
    BOOL v57 = v56 == 0LL;

    if (v57)
    {
      id v58 = (id *)v115;
      id v98 = (id)v115[5];
      BOOL v59 = networkReachable();
      objc_storeStrong(v58 + 5, v98);
      if (!v59)
      {
        id v22 =  createMobileActivationError( (uint64_t)"issueDCRT_block_invoke",  2234LL,  @"com.apple.MobileActivation.ErrorDomain",  -17LL,  (void *)v115[5],  @"Network is unavailable.");
        id v23 = 0LL;
        goto LABEL_20;
      }
    }
  }

  id v23 = data_ark_copy(*(void **)(a1 + 40), 0LL, v81);
  id v34 = isNSNumber(v23);
  BOOL v35 = v34 == 0LL;

  if (v35)
  {

    id v23 = &__kCFBooleanFalse;
  }

  if ([v23 BOOLValue])
  {
    id v22 =  createMobileActivationError( (uint64_t)"issueDCRT_block_invoke",  2247LL,  @"com.apple.MobileActivation.ErrorDomain",  -13LL,  0LL,  @"Another %@ request is already in flight.",  v78);
    goto LABEL_20;
  }

  id v36 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:");
  id v37 = isNSNumber(v36);

  if (v37)
  {
    id v24 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"NetworkTimeoutInterval"];
    [v24 doubleValue];
    if (v38 <= 0.0)
    {
      id v39 =  createMobileActivationError( (uint64_t)"issueDCRT_block_invoke",  2256LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid network timeout requested: %@",  v24);
LABEL_50:
      id v22 = v39;
      goto LABEL_21;
    }
  }

  else
  {
    id v24 = 0LL;
  }

  id v40 = (id *)v115;
  id v97 = (id)v115[5];
  char v41 = libaks_system_key_operate(v7, 1LL, (NSError **)&v97);
  objc_storeStrong(v40 + 5, v97);
  if ((v41 & 1) == 0)
  {
    id v39 =  createMobileActivationError( (uint64_t)"issueDCRT_block_invoke",  2264LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  (void *)v115[5],  @"Failed to bump %@.",  v76);
    goto LABEL_50;
  }

  uint64_t v42 = (id *)v115;
  id v96 = (id)v115[5];
  BOOL is_legacy = security_committed_uik_is_legacy(&v96);
  objc_storeStrong(v42 + 5, v96);
  if (!is_legacy)
  {
    id v44 = (void *)v115[5];
    if (v44)
    {
      id v39 =  createMobileActivationError( (uint64_t)"issueDCRT_block_invoke",  2276LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v44,  @"Failed to query legacy UIK support.");
      goto LABEL_50;
    }
  }

  unsigned int v71 = platform_supports_activation() ^ 1 | is_legacy;
  if ((v71 & 1) != 0)
  {
    SecCertificateRef v73 = 0LL;
    unsigned int v45 = 1;
  }

  else
  {
    char v46 = *(void **)(a1 + 40);
    int v47 = (id *)v115;
    id v95 = (id)v115[5];
    SecCertificateRef v73 = copyUCRT(v46, (NSError **)&v95);
    objc_storeStrong(v47 + 5, v95);
    if (!v73)
    {
      id v39 =  createMobileActivationError( (uint64_t)"issueDCRT_block_invoke",  2293LL,  @"com.apple.MobileActivation.ErrorDomain",  -4LL,  (void *)v115[5],  @"UCRT is unavailable.");
      goto LABEL_50;
    }

    unsigned int v45 = 0;
  }

  id v48 = (id *)v115;
  id v94 = (id)v115[5];
  id v30 = libaks_system_key_collection(v7, 3LL, v45, 0LL, (NSError **)&v94);
  objc_storeStrong(v48 + 5, v94);
  if (!v30)
  {
    if (v71) {
      id v60 = "SIK";
    }
    else {
      id v60 = "UIK";
    }
    unsigned int v61 =  createMobileActivationError( (uint64_t)"issueDCRT_block_invoke",  2300LL,  @"com.apple.MobileActivation.ErrorDomain",  -11LL,  (void *)v115[5],  @"Failed to attest %@ to %s.",  v76,  v60);
    goto LABEL_72;
  }

  id v49 = (id *)v115;
  id v93 = (id)v115[5];
  id v29 = libaks_system_key_get_public(v7, 3LL, (NSError **)&v93);
  objc_storeStrong(v49 + 5, v93);
  if (!v29)
  {
    unsigned int v61 =  createMobileActivationError( (uint64_t)"issueDCRT_block_invoke",  2308LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  (void *)v115[5],  @"Failed to query %@ public key.",  v76);
LABEL_72:
    id v62 = v61;
    id v29 = 0LL;
    goto LABEL_73;
  }

  uint64_t v50 = SecAccessControlCreate(0LL, &cf);
  CFTypeRef v77 = (CFTypeRef)v50;
  if (v50)
  {
    uint64_t v51 = kSecAttrAccessibleUntilReboot;
    if ((SecAccessControlSetProtection(v50, kSecAttrAccessibleUntilReboot, &cf) & 1) != 0)
    {
      id v52 = *(void **)(a1 + 32);
      id v53 = (id *)v115;
      id v92 = (id)v115[5];
      uint64_t v70 = (__SecKey *)createReferenceKeyBlob(v77, 0, v52, &v92);
      objc_storeStrong(v53 + 5, v92);
      if (v70)
      {
        id v54 = (id *)v115;
        id v91 = (id)v115[5];
        id v31 = security_create_external_representation(v70, 0LL, (NSError **)&v91);
        objc_storeStrong(v54 + 5, v91);
        if (v31)
        {
          id v27 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
          if (v27)
          {
            uint64_t v69 = copy_required_dcrt_oids();
            -[NSMutableDictionary setObject:forKeyedSubscript:]( v27,  "setObject:forKeyedSubscript:",  v69,  @"OIDSToInclude");

            -[NSMutableDictionary setObject:forKeyedSubscript:]( v27,  "setObject:forKeyedSubscript:",  v30,  @"ClientAttestationData");
            -[NSMutableDictionary setObject:forKeyedSubscript:]( v27,  "setObject:forKeyedSubscript:",  v29,  @"ClientAttestationPublicKey");
            id v72 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v71);
            -[NSMutableDictionary setObject:forKeyedSubscript:]( v27,  "setObject:forKeyedSubscript:",  v72,  @"scrtAttestation");

            -[NSMutableDictionary setObject:forKeyedSubscript:]( v27,  "setObject:forKeyedSubscript:",  v3,  @"sdcrtAttestation");
            else {
              unsigned __int8 v55 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 0LL);
            }
            id v67 = v55;
            -[NSMutableDictionary setObject:forKeyedSubscript:]( v27,  "setObject:forKeyedSubscript:",  v55,  @"CertType");

            if (v24) {
              -[NSMutableDictionary setObject:forKeyedSubscript:]( v27,  "setObject:forKeyedSubscript:",  v24,  @"NetworkTimeoutInterval");
            }
            data_ark_set(*(void **)(a1 + 40), 0LL, v81, &__kCFBooleanTrue, 0);
            id v68 = *(void **)(a1 + 40);
            id v74 = *(void **)(a1 + 48);
            v82[0] = _NSConcreteStackBlock;
            v82[1] = 3254779904LL;
            v82[2] = __issueDCRT_block_invoke_2;
            v82[3] = &__block_descriptor_96_e8_32s40s48s56s64bs72r80r88r_e34_v24__0__NSDictionary_8__NSError_16l;
            id v88 = &v114;
            unsigned int v83 = v78;
            id v84 = *(id *)(a1 + 32);
            unsigned int v89 = &v108;
            id v85 = *(id *)(a1 + 40);
            uint64_t v90 = &v102;
            id v86 = v81;
            id v87 = *(id *)(a1 + 56);
            issueClientCertificateWithReferenceKey(v68, v74, v31, v75, v27, v82);

            char v28 = 1;
            uint64_t v66 = (__CFString *)v83;
            goto LABEL_82;
          }

          v65 =  createMobileActivationError( (uint64_t)"issueDCRT_block_invoke",  2342LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate dictionary.");
        }

        else
        {
          v65 =  createMobileActivationError( (uint64_t)"issueDCRT_block_invoke",  2334LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  (void *)v115[5],  @"Failed to encode RK as data.");
          id v31 = 0LL;
        }

LABEL_81:
        char v28 = 0;
        id v27 = 0LL;
        uint64_t v66 = (__CFString *)v115[5];
        v115[5] = (uint64_t)v65;
LABEL_82:

        CFRelease(v77);
        if (v70) {
          CFRelease(v70);
        }
        goto LABEL_74;
      }

      id v64 =  createMobileActivationError( (uint64_t)"issueDCRT_block_invoke",  2328LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  (void *)v115[5],  @"Failed to create reference key.");
    }

    else
    {
      id v64 =  createMobileActivationError( (uint64_t)"issueDCRT_block_invoke",  2322LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  (void *)cf,  @"Failed to set ACL protection to %@.",  v51);
    }

    v65 = v64;
    id v31 = 0LL;
    uint64_t v70 = 0LL;
    goto LABEL_81;
  }

  id v62 =  createMobileActivationError( (uint64_t)"issueDCRT_block_invoke",  2317LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  (void *)cf,  @"Failed to create access control.");
LABEL_73:
  uint64_t v63 = (void *)v115[5];
  v115[5] = (uint64_t)v62;

  id v31 = 0LL;
  char v28 = 0;
  id v27 = 0LL;
LABEL_74:
  if (v73) {
    CFRelease(v73);
  }
LABEL_23:
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef cf = 0LL;
  if (v19) {
    CFRelease(v19);
  }
  if ((v28 & 1) == 0)
  {
    uint64_t v32 = *(void *)(a1 + 56);
    if (v32) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v32, v103[5], v115[5]);
    }
  }

  _Block_object_dispose(&v102, 8);

  _Block_object_dispose(&v108, 8);
  _Block_object_dispose(&v114, 8);
}

void sub_100021814( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, char a45)
{
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void issueClientCertificateWithReferenceKey(void *a1, void *a2, void *a3, int a4, void *a5, void *a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a5;
  id v15 = a6;
  id v16 = (dispatch_queue_s *)copyMobileActivationSerialQueue();
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3254779904LL;
  v22[2] = __issueClientCertificateWithReferenceKey_block_invoke;
  v22[3] = &__block_descriptor_76_e8_32s40s48s56s64bs_e5_v8__0l;
  id v23 = v11;
  id v24 = v12;
  id v25 = v13;
  id v26 = v14;
  int v28 = a4;
  id v27 = v15;
  id v17 = v15;
  id v18 = v14;
  id v19 = v13;
  id v20 = v12;
  id v21 = v11;
  dispatch_async(v16, v22);
}

void __issueDCRT_block_invoke_2(uint64_t a1, id a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (dispatch_queue_s *)copyMobileActivationSerialQueue();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3254779904LL;
  v13[2] = __issueDCRT_block_invoke_3;
  v13[3] = &__block_descriptor_112_e8_32s40s48s56s64s72s80bs88r96r104r_e5_v8__0l;
  uint64_t v8 = *(void *)(a1 + 72);
  id v14 = v6;
  uint64_t v21 = v8;
  id v15 = *(id *)(a1 + 32);
  id v16 = *(id *)(a1 + 40);
  id v17 = v5;
  uint64_t v22 = *(void *)(a1 + 80);
  id v9 = *(id *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 88);
  id v18 = v9;
  uint64_t v23 = v10;
  id v19 = *(id *)(a1 + 56);
  id v20 = *(id *)(a1 + 64);
  id v11 = v5;
  id v12 = v6;
  dispatch_async(v7, v13);
}

void __issueDCRT_block_invoke_3(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    id v3 =  createMobileActivationError( (uint64_t)"issueDCRT_block_invoke_3",  2367LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v2,  @"Failed to retrieve %@.",  *(void *)(a1 + 40));
    uint64_t v4 = *(void *)(*(void *)(a1 + 88) + 8LL);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
    id v6 = v5;
LABEL_9:

    id v14 = 0LL;
    goto LABEL_10;
  }

  id v7 = [*(id *)(a1 + 48) mutableCopy];
  id v8 = [*(id *)(a1 + 56) objectForKeyedSubscript:@"ServerResponseDate"];
  [v7 setObject:v8 forKeyedSubscript:@"ServerResponseDate"];

  id v9 = [*(id *)(a1 + 56) objectForKeyedSubscript:@"RKCertification"];
  id v10 = isNSArray(v9);
  uint64_t v11 = *(void *)(*(void *)(a1 + 96) + 8LL);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  id v13 = *(void **)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL);
  if (!v13 || [v13 count] != (id)2)
  {
    uint64_t v22 =  createMobileActivationError( (uint64_t)"issueDCRT_block_invoke_3",  2376LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve %@.",  *(void *)(a1 + 40));
    uint64_t v23 = *(void *)(*(void *)(a1 + 88) + 8LL);
    id v24 = *(void **)(v23 + 40);
    *(void *)(v23 + 40) = v22;

    id v6 = v7;
    goto LABEL_9;
  }

  id v14 = objc_alloc_init(&OBJC_CLASS___NSMutableData);
  if (!v14)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"issueDCRT_block_invoke_3",  2382LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create data.");
LABEL_15:
    id v20 = MobileActivationError;
    uint64_t v21 = *(void *)(a1 + 88);
    goto LABEL_16;
  }

  id v15 = [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) objectAtIndexedSubscript:0];
  -[NSMutableData appendData:](v14, "appendData:", v15);

  id v16 = [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) objectAtIndexedSubscript:1];
  -[NSMutableData appendData:](v14, "appendData:", v16);

  id v17 = *(void **)(a1 + 64);
  uint64_t v18 = *(void *)(*(void *)(a1 + 88) + 8LL);
  id obj = *(id *)(v18 + 40);
  char v19 = storeDCRT(v17, v14, v7, &obj);
  objc_storeStrong((id *)(v18 + 40), obj);
  if ((v19 & 1) == 0)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"issueDCRT_block_invoke_3",  2390LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  *(void **)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL),  @"Failed to store %@.",  *(void *)(a1 + 40));
    goto LABEL_15;
  }

  id v30 = @"RKCertification";
  id v31 = v14;
  id v20 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v31,  &v30,  1LL);
  uint64_t v21 = *(void *)(a1 + 104);
LABEL_16:
  uint64_t v27 = *(void *)(v21 + 8);
  int v28 = *(void **)(v27 + 40);
  *(void *)(v27 + 40) = v20;

LABEL_10:
  data_ark_set(*(void **)(a1 + 64), 0LL, *(void **)(a1 + 72), &__kCFBooleanFalse, 0);
  uint64_t v25 = *(void *)(a1 + 80);
  if (v25) {
    (*(void (**)(uint64_t, void, void))(v25 + 16))( v25,  *(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 40LL),  *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL));
  }
}

void __copy_helper_block_e8_32s40s48s56s64s72s80b88r96r104r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  id v6 = *(id *)(a2 + 48);
  id v7 = *(id *)(a2 + 56);
  id v8 = *(id *)(a2 + 64);
  id v9 = *(id *)(a2 + 72);
  _Block_object_assign((void *)(a1 + 80), *(const void **)(a2 + 80), 7);
  _Block_object_assign((void *)(a1 + 88), *(const void **)(a2 + 88), 8);
  _Block_object_assign((void *)(a1 + 96), *(const void **)(a2 + 96), 8);
  _Block_object_assign((void *)(a1 + 104), *(const void **)(a2 + 104), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64s72s80s88r96r104r(uint64_t a1)
{
}

void __copy_helper_block_e8_32s40s48s56s64b72r80r88r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  id v6 = *(id *)(a2 + 48);
  id v7 = *(id *)(a2 + 56);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 7);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 8);
  _Block_object_assign((void *)(a1 + 80), *(const void **)(a2 + 80), 8);
  _Block_object_assign((void *)(a1 + 88), *(const void **)(a2 + 88), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64s72r80r88r(uint64_t a1)
{
}

void __copy_helper_block_e8_32s40s48s56b(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  id v6 = *(id *)(a2 + 48);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 7);
}

void __destroy_helper_block_e8_32s40s48s56s(id *a1)
{
}

void issueCollection(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  uint64_t v11 = (dispatch_queue_s *)copyMobileActivationSerialQueue();
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3254779904LL;
  v16[2] = __issueCollection_block_invoke;
  _OWORD v16[3] = &__block_descriptor_64_e8_32s40s48s56bs_e5_v8__0l;
  id v17 = v9;
  id v18 = v7;
  id v19 = v8;
  id v20 = v10;
  id v12 = v10;
  id v13 = v8;
  id v14 = v7;
  id v15 = v9;
  dispatch_async(v11, v16);
}

void __issueCollection_block_invoke(uint64_t a1)
{
  uint64_t v46 = 0LL;
  int v47 = (id *)&v46;
  uint64_t v48 = 0x3032000000LL;
  id v49 = __Block_byref_object_copy__4;
  uint64_t v50 = __Block_byref_object_dispose__4;
  id v51 = 0LL;
  uint64_t v40 = 0LL;
  char v41 = &v40;
  uint64_t v42 = 0x3032000000LL;
  id v43 = __Block_byref_object_copy__4;
  id v44 = __Block_byref_object_dispose__4;
  id v45 = 0LL;
  uint64_t v34 = 0LL;
  BOOL v35 = &v34;
  uint64_t v36 = 0x3032000000LL;
  id v37 = __Block_byref_object_copy__4;
  double v38 = __Block_byref_object_dispose__4;
  id v39 = 0LL;
  id v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"NetworkTimeoutInterval"];
  id v3 = isNSNumber(v2);

  if (!v3)
  {
    id v4 = 0LL;
LABEL_5:
    id v7 = data_ark_copy(*(void **)(a1 + 40), 0LL, @"ActivationState");
    id v8 = isNSString(v7);
    id v9 = (void *)v41[5];
    v41[5] = (uint64_t)v8;

    if (([(id)v41[5] isEqualToString:@"Activated"] & 1) == 0)
    {
      id v6 =  createMobileActivationError( (uint64_t)"issueCollection_block_invoke",  2448LL,  @"com.apple.MobileActivation.ErrorDomain",  -8LL,  0LL,  @"Device is not activated (%@).",  v41[5]);
      goto LABEL_12;
    }

    id v10 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"IgnoreExistingCollection"];
    id v11 = v10;
    if (v10 && (id v12 = isNSNumber(v10), v12, !v12))
    {
      uint64_t v22 =  createMobileActivationError( (uint64_t)"issueCollection_block_invoke",  2457LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid option (%@).",  @"IgnoreExistingCollection");
    }

    else
    {
      if (([v11 BOOLValue] & 1) == 0 && collectionAlreadyPerformed(*(void **)(a1 + 40)))
      {
        id v13 = 0LL;
        goto LABEL_15;
      }

      id v17 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"UseCellularBootstrapProxy"];
      if (v17
        || (id v17 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"UseCellularOTAProxy"]) != 0
        || (id v17 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"SOCKSProxyHost"]) != 0)
      {

LABEL_22:
        id v13 = data_ark_copy(*(void **)(a1 + 40), 0LL, @"InFieldCollectionInFlight");
        id v18 = isNSNumber(v13);

        if (!v18)
        {

          id v13 = &__kCFBooleanFalse;
        }

        if (![v13 BOOLValue])
        {
          data_ark_set(*(void **)(a1 + 40), 0LL, @"InFieldCollectionInFlight", &__kCFBooleanTrue, 0);
          id v20 = *(void **)(a1 + 32);
          id v19 = *(void **)(a1 + 40);
          uint64_t v21 = *(void **)(a1 + 48);
          v26[0] = _NSConcreteStackBlock;
          v26[1] = 3254779904LL;
          void v26[2] = __issueCollection_block_invoke_2;
          v26[3] = &__block_descriptor_80_e8_32s40s48bs56r64r72r_e48_v40__0__NSData_8__NSDictionary_16q24__NSError_32l;
          id v30 = &v40;
          id v27 = v19;
          id v31 = &v46;
          id v11 = v11;
          id v28 = v11;
          id v29 = *(id *)(a1 + 56);
          uint64_t v32 = &v34;
          performInFieldCollection(v27, v20, v21, v26);

          goto LABEL_17;
        }

        id v14 =  createMobileActivationError( (uint64_t)"issueCollection_block_invoke",  2484LL,  @"com.apple.MobileActivation.ErrorDomain",  -13LL,  0LL,  @"Another collection request is already in flight.");
        goto LABEL_14;
      }

      id v23 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"SOCKSProxyPort"];

      if (v23) {
        goto LABEL_22;
      }
      id v24 = v47;
      id obj = v47[5];
      BOOL v25 = networkReachable();
      objc_storeStrong(v24 + 5, obj);
      if (v25) {
        goto LABEL_22;
      }
      uint64_t v22 =  createMobileActivationError( (uint64_t)"issueCollection_block_invoke",  2471LL,  @"com.apple.MobileActivation.ErrorDomain",  -17LL,  v47[5],  @"Network is unavailable.");
    }

    id v14 = v22;
    goto LABEL_13;
  }

  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"NetworkTimeoutInterval"];
  [v4 doubleValue];
  if (v5 > 0.0) {
    goto LABEL_5;
  }
  id v6 =  createMobileActivationError( (uint64_t)"issueCollection_block_invoke",  2439LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid network timeout requested: %@",  v4);
LABEL_12:
  id v14 = v6;
  id v11 = 0LL;
LABEL_13:
  id v13 = 0LL;
LABEL_14:
  id v15 = v47[5];
  v47[5] = v14;

LABEL_15:
  uint64_t v16 = *(void *)(a1 + 56);
  if (v16) {
    (*(void (**)(uint64_t, uint64_t, id))(v16 + 16))(v16, v35[5], v47[5]);
  }
LABEL_17:
  _Block_object_dispose(&v34, 8);

  _Block_object_dispose(&v40, 8);
  _Block_object_dispose(&v46, 8);
}

void sub_100022794( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

BOOL collectionAlreadyPerformed(void *a1)
{
  id v1 = data_ark_copy(a1, 0LL, @"CollectionLastPerformed");
  id v2 = isNSString(v1);

  BOOL v6 = 0;
  if (v2)
  {
    id v3 = copy_suinfo_directory_path();
    id v2 = [v3 stringByAppendingPathComponent:@"psc.sui"];

    if (!v2
      || (id v4 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),
          unsigned int v5 = -[NSFileManager fileExistsAtPath:isDirectory:](v4, "fileExistsAtPath:isDirectory:", v2, 0LL),
          v4,
          v5))
    {
      BOOL v6 = 1;
    }
  }

  return v6;
}

void performInFieldCollection(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = dispatch_get_global_queue(0LL, 0LL);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3254779904LL;
  v16[2] = __performInFieldCollection_block_invoke;
  _OWORD v16[3] = &__block_descriptor_64_e8_32s40s48s56bs_e5_v8__0l;
  id v17 = v8;
  id v18 = v7;
  id v19 = v9;
  id v20 = v10;
  id v12 = v9;
  id v13 = v7;
  id v14 = v8;
  id v15 = v10;
  dispatch_async(v11, v16);
}

void __issueCollection_block_invoke_2(uint64_t a1, id a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3254779904LL;
  v22[2] = __issueCollection_block_invoke_3;
  v22[3] = &__block_descriptor_112_e8_32s40s48s56s64s72bs80r88r96r_e5_v8__0l;
  uint64_t v29 = *(void *)(a1 + 56);
  id v12 = *(id *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 64);
  id v23 = v12;
  uint64_t v30 = v13;
  id v14 = *(id *)(a1 + 40);
  uint64_t v32 = a4;
  id v24 = v14;
  id v25 = v11;
  id v26 = v10;
  id v27 = v9;
  id v15 = *(id *)(a1 + 48);
  uint64_t v16 = *(void *)(a1 + 72);
  id v28 = v15;
  uint64_t v31 = v16;
  id v17 = v9;
  id v18 = v10;
  id v19 = v11;
  dispatch_block_t v20 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, v22);
  uint64_t v21 = (dispatch_queue_s *)copyMobileActivationSerialQueue();
  dispatch_async(v21, v20);
}

uint64_t __issueCollection_block_invoke_3(uint64_t a1)
{
  id v2 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"ActivationState");
  id v3 = isNSString(v2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 80) + 8LL);
  unsigned int v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  if (([*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) isEqualToString:@"Activated"] & 1) == 0)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"issueCollection_block_invoke_3",  2506LL,  @"com.apple.MobileActivation.ErrorDomain",  -8LL,  0LL,  @"Device is not activated (%@).",  *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL));
    goto LABEL_13;
  }

  if (([*(id *)(a1 + 40) BOOLValue] & 1) != 0
    || !collectionAlreadyPerformed(*(void **)(a1 + 32)))
  {
    uint64_t v6 = *(void *)(a1 + 104);
    if (v6 != 200)
    {
      if (v6)
      {
        if (v6 != -1)
        {
          uint64_t v22 = *(void **)(a1 + 48);
          id v23 =  +[NSHTTPURLResponse localizedStringForStatusCode:]( &OBJC_CLASS___NSHTTPURLResponse,  "localizedStringForStatusCode:",  *(void *)(a1 + 104));
          id v24 =  createMobileActivationError( (uint64_t)"issueCollection_block_invoke_3",  2521LL,  @"com.apple.MobileActivation.ServerErrorDomain",  v6,  v22,  @"Server error: %ld (%@)",  v6,  v23);

          uint64_t v25 = *(void *)(a1 + 104);
          id v26 =  +[NSHTTPURLResponse localizedStringForStatusCode:]( &OBJC_CLASS___NSHTTPURLResponse,  "localizedStringForStatusCode:",  v25);
          id v27 =  createMobileActivationError( (uint64_t)"issueCollection_block_invoke_3",  2521LL,  @"com.apple.MobileActivation.ErrorDomain",  -6LL,  v24,  @"Server error: %ld (%@)",  v25,  v26);

          uint64_t v28 = *(void *)(*(void *)(a1 + 88) + 8LL);
          id v17 = *(void **)(v28 + 40);
          *(void *)(v28 + 40) = v27;
          goto LABEL_14;
        }

        id v7 = *(void **)(a1 + 48);
        id v8 = @"Internal error.";
        uint64_t v9 = 2515LL;
      }

      else
      {
        id v7 = *(void **)(a1 + 48);
        id v8 = @"Network communication error.";
        uint64_t v9 = 2518LL;
      }

      MobileActivationError = createMobileActivationError( (uint64_t)"issueCollection_block_invoke_3",  v9,  @"com.apple.MobileActivation.ErrorDomain",  -6LL,  v7,  v8);
LABEL_13:
      id v14 = MobileActivationError;
      uint64_t v15 = *(void *)(*(void *)(a1 + 88) + 8LL);
      uint64_t v16 = *(void **)(v15 + 40);
      *(void *)(v15 + 40) = v14;
      id v17 = v16;
LABEL_14:

      goto LABEL_15;
    }

    id v11 = [*(id *)(a1 + 56) objectForKeyedSubscript:@"X-Apple-Invalid-Reason"];
    id v12 = [*(id *)(a1 + 56) objectForKeyedSubscript:@"X-Apple-Retry-After"];
    id v13 = isNSString(v11);
    if (v13)
    {

LABEL_26:
      uint64_t v30 = *(void *)(a1 + 104);
      uint64_t v31 = *(void **)(a1 + 48);
      uint64_t v32 =  +[NSHTTPURLResponse localizedStringForStatusCode:]( &OBJC_CLASS___NSHTTPURLResponse,  "localizedStringForStatusCode:",  v30);
      id v33 =  createMobileActivationError( (uint64_t)"issueCollection_block_invoke_3",  2529LL,  @"com.apple.MobileActivation.ServerErrorDomain",  v30,  v31,  @"Server error: %ld (%@) / %@ / %@",  v30,  v32,  v11,  v12);

      uint64_t v34 = *(void *)(a1 + 104);
      BOOL v35 =  +[NSHTTPURLResponse localizedStringForStatusCode:]( &OBJC_CLASS___NSHTTPURLResponse,  "localizedStringForStatusCode:",  v34);
      uint64_t v36 =  createMobileActivationError( (uint64_t)"issueCollection_block_invoke_3",  2529LL,  @"com.apple.MobileActivation.ErrorDomain",  -6LL,  v33,  @"Server error: %ld (%@) / %@ / %@",  v34,  v35,  v11,  v12);

      uint64_t v37 = *(void *)(*(void *)(a1 + 88) + 8LL);
      double v38 = *(MACollectionInterface **)(v37 + 40);
      *(void *)(v37 + 40) = v36;
LABEL_27:

      id v17 = v11;
      goto LABEL_14;
    }

    id v29 = isNSNumber(v12);

    if (v29) {
      goto LABEL_26;
    }
    if (!*(void *)(a1 + 64))
    {
      id v56 =  createMobileActivationError( (uint64_t)"issueCollection_block_invoke_3",  2534LL,  @"com.apple.MobileActivation.ErrorDomain",  -6LL,  *(void **)(a1 + 48),  @"Invalid server response.");
      uint64_t v57 = *(void *)(*(void *)(a1 + 88) + 8LL);
      id v58 = *(MACollectionInterface **)(v57 + 40);
      *(void *)(v57 + 40) = v56;
      double v38 = v58;
      goto LABEL_27;
    }

    id v39 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
    uint64_t v40 = (NSData *)[v39 copyAnswer:@"BuildVersion"];

    id v41 = isNSString(v40);
    if (v41)
    {
      uint64_t v42 = -[MACollectionInterface initWithContext:]( objc_alloc(&OBJC_CLASS___MACollectionInterface),  "initWithContext:",  *(void *)(a1 + 32));
      if (v42)
      {
        id v43 = v42;
        uint64_t v44 = *(void *)(a1 + 64);
        uint64_t v45 = *(void *)(*(void *)(a1 + 88) + 8LL);
        id obj = *(id *)(v45 + 40);
        uint64_t v46 = (MACollectionInterface *) +[NSJSONSerialization JSONObjectWithData:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "JSONObjectWithData:options:error:",  v44,  0LL,  &obj);
        objc_storeStrong((id *)(v45 + 40), obj);
        if (!v46)
        {
          uint64_t v63 =  createMobileActivationError( (uint64_t)"issueCollection_block_invoke_3",  2552LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to deserialize JSON data: %@",  *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL));
          uint64_t v64 = *(void *)(*(void *)(a1 + 88) + 8LL);
          v65 = *(void **)(v64 + 40);
          *(void *)(v64 + 40) = v63;

          double v38 = v43;
          goto LABEL_27;
        }

        id v47 = -[MACollectionInterface objectForKeyedSubscript:](v46, "objectForKeyedSubscript:", @"suinfo");
        id v48 = isNSString(v47);

        if (v48)
        {
          id v49 = -[NSData initWithBase64EncodedString:options:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBase64EncodedString:options:",  v47,  1LL);
          if (v49)
          {
            uint64_t v50 = v49;
            uint64_t v51 = *(void *)(*(void *)(a1 + 88) + 8LL);
            id v74 = *(id *)(v51 + 40);
            unsigned __int8 v52 = -[MACollectionInterface processSUInfo:withError:](v43, "processSUInfo:withError:", v49, &v74);
            objc_storeStrong((id *)(v51 + 40), v74);
            if ((v52 & 1) != 0)
            {
              data_ark_remove(*(void **)(a1 + 32), 0LL, @"PCRTToken");
              id v53 = (NSData *)[*(id *)(a1 + 56) objectForKeyedSubscript:@"x-iservice-token"];
              id v54 = isNSString(v53);

              if (v54) {
                data_ark_set(*(void **)(a1 + 32), 0LL, @"PCRTToken", v53, 1);
              }
              data_ark_set(*(void **)(a1 + 32), 0LL, @"CollectionLastPerformed", v40, 1);

              unsigned __int8 v55 = v53;
            }

            else
            {
              unsigned int v71 =  createMobileActivationError( (uint64_t)"issueCollection_block_invoke_3",  2569LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to process SUInfo: %@",  *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL));
              uint64_t v72 = *(void *)(*(void *)(a1 + 88) + 8LL);
              SecCertificateRef v73 = *(void **)(v72 + 40);
              *(void *)(v72 + 40) = v71;

              unsigned __int8 v55 = v40;
            }

            uint64_t v70 = v50;
            goto LABEL_48;
          }

          uint64_t v66 = createMobileActivationError( (uint64_t)"issueCollection_block_invoke_3",  2564LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to decode SUInfo.");
        }

        else
        {
          uint64_t v66 = createMobileActivationError( (uint64_t)"issueCollection_block_invoke_3",  2558LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid SUInfo: %@",  v47);
        }

        id v67 = v66;
        uint64_t v68 = *(void *)(*(void *)(a1 + 88) + 8LL);
        uint64_t v69 = *(void **)(v68 + 40);
        *(void *)(v68 + 40) = v67;

        uint64_t v70 = v40;
LABEL_48:

        double v38 = v46;
        goto LABEL_27;
      }

      BOOL v59 = createMobileActivationError( (uint64_t)"issueCollection_block_invoke_3",  2546LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create collection interface.");
    }

    else
    {
      BOOL v59 = createMobileActivationError( (uint64_t)"issueCollection_block_invoke_3",  2540LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve OS build.");
    }

    id v60 = v59;
    uint64_t v61 = *(void *)(*(void *)(a1 + 88) + 8LL);
    id v62 = *(void **)(v61 + 40);
    *(void *)(v61 + 40) = v60;

    double v38 = (MACollectionInterface *)v40;
    goto LABEL_27;
  }

void __copy_helper_block_e8_32s40s48s56s64s72b80r88r96r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  id v6 = *(id *)(a2 + 48);
  id v7 = *(id *)(a2 + 56);
  id v8 = *(id *)(a2 + 64);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 7);
  _Block_object_assign((void *)(a1 + 80), *(const void **)(a2 + 80), 8);
  _Block_object_assign((void *)(a1 + 88), *(const void **)(a2 + 88), 8);
  _Block_object_assign((void *)(a1 + 96), *(const void **)(a2 + 96), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64s72s80r88r96r(uint64_t a1)
{
}

void __copy_helper_block_e8_32s40s48b56r64r72r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  _Block_object_assign((void *)(a1 + 48), *(const void **)(a2 + 48), 7);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 8);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 8);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 8);
}

void __destroy_helper_block_e8_32s40s48s56r64r72r(uint64_t a1)
{
}

void issueUCRT(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = (dispatch_queue_s *)copyMobileActivationSerialQueue();
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3254779904LL;
  v16[2] = __issueUCRT_block_invoke;
  _OWORD v16[3] = &__block_descriptor_64_e8_32s40s48s56bs_e5_v8__0l;
  id v17 = v9;
  id v18 = v7;
  id v19 = v8;
  id v20 = v10;
  id v12 = v10;
  id v13 = v8;
  id v14 = v7;
  id v15 = v9;
  dispatch_async(v11, v16);
}

void __issueUCRT_block_invoke(uint64_t a1)
{
  uint64_t v54 = 0LL;
  unsigned __int8 v55 = (id *)&v54;
  uint64_t v56 = 0x3032000000LL;
  uint64_t v57 = __Block_byref_object_copy__4;
  id v58 = __Block_byref_object_dispose__4;
  id v59 = 0LL;
  uint64_t v48 = 0LL;
  id v49 = &v48;
  uint64_t v50 = 0x3032000000LL;
  uint64_t v51 = __Block_byref_object_copy__4;
  unsigned __int8 v52 = __Block_byref_object_dispose__4;
  id v53 = 0LL;
  if (!is_virtual_machine())
  {
    id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"IgnoreExistingUCRT"];
    id v3 = v4;
    if (v4)
    {
      id v5 = isNSNumber(v4);

      if (!v5)
      {
        id v9 =  createMobileActivationError( (uint64_t)"issueUCRT_block_invoke",  2638LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid option (%@).",  @"IgnoreExistingUCRT");
        goto LABEL_27;
      }
    }

    id v6 = v55;
    id obj = v55[5];
    BOOL is_legacy = security_committed_uik_is_legacy(&obj);
    objc_storeStrong(v6 + 5, obj);
    if (!is_legacy)
    {
      id v8 = v55[5];
      if (v8)
      {
        id v9 =  createMobileActivationError( (uint64_t)"issueUCRT_block_invoke",  2644LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v8,  @"Failed to query legacy UIK support.");
LABEL_27:
        id v2 = v9;
        goto LABEL_28;
      }
    }

    id v10 = data_ark_copy(*(void **)(a1 + 40), 0LL, @"UCRTHealingRequired");
    id v11 = isNSNumber(v10);

    if (!v11)
    {

      id v10 = &__kCFBooleanFalse;
    }

    id v12 = data_ark_copy(*(void **)(a1 + 40), 0LL, @"UIKUpgradeRequired");
    id v13 = isNSNumber(v12);

    if (!v13)
    {

      id v12 = &__kCFBooleanFalse;
    }

    id v14 = *(void **)(a1 + 40);
    id v15 = v55;
    id v46 = v55[5];
    SecCertificateRef v16 = copyUCRT(v14, (NSError **)&v46);
    objc_storeStrong(v15 + 5, v46);
    unsigned int v17 = [v3 BOOLValue];
    if (v16) {
      int v18 = v17;
    }
    else {
      int v18 = 1;
    }
    if (((v18 | is_legacy) & 1) == 0
      && ([v10 BOOLValue] & 1) == 0
      && ![v12 BOOLValue])
    {
      id v20 = 0LL;
      char v31 = 0;
      uint64_t v25 = 0LL;
      id v24 = 0LL;
LABEL_40:
      CFRelease(v16);
LABEL_41:
      if ((v31 & 1) != 0) {
        goto LABEL_31;
      }
      goto LABEL_29;
    }

    id v19 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"UseCellularBootstrapProxy"];
    if (v19
      || (id v19 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"UseCellularOTAProxy"]) != 0
      || (id v19 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"SOCKSProxyHost"]) != 0)
    {
    }

    else
    {
      id v34 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"SOCKSProxyPort"];

      if (!v34)
      {
        BOOL v35 = v55;
        id v45 = v55[5];
        BOOL v36 = networkReachable();
        objc_storeStrong(v35 + 5, v45);
        if (!v36)
        {
          id v33 =  createMobileActivationError( (uint64_t)"issueUCRT_block_invoke",  2674LL,  @"com.apple.MobileActivation.ErrorDomain",  -17LL,  v55[5],  @"Network is unavailable.");
          id v24 = 0LL;
          uint64_t v25 = 0LL;
          char v31 = 0;
          id v20 = 0LL;
          goto LABEL_38;
        }
      }
    }

    id v20 = data_ark_copy(*(void **)(a1 + 40), 0LL, @"UCRTIssuanceInFlight");
    id v21 = isNSNumber(v20);

    if (!v21)
    {

      id v20 = &__kCFBooleanFalse;
    }

    if ([v20 BOOLValue])
    {
      uint64_t v22 =  createMobileActivationError( (uint64_t)"issueUCRT_block_invoke",  2687LL,  @"com.apple.MobileActivation.ErrorDomain",  -13LL,  0LL,  @"Another UCRT request is already in flight.");
    }

    else
    {
      id v27 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      if (v27)
      {
        id v24 = [*(id *)(a1 + 32) mutableCopy];

        [v24 setObject:&__kCFBooleanFalse forKeyedSubscript:@"UseCommittedUIK"];
        uint64_t v28 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        id v29 = v28;
        if (v28)
        {
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v28,  "setObject:forKeyedSubscript:",  *(void *)(a1 + 48),  @"clientName");
          data_ark_set(*(void **)(a1 + 40), 0LL, @"UCRTIssuanceInFlight", &__kCFBooleanTrue, 0);
          uint64_t v30 = *(void **)(a1 + 48);
          uint64_t v37 = *(void **)(a1 + 40);
          v38[0] = _NSConcreteStackBlock;
          v38[1] = 3254779904LL;
          v38[2] = __issueUCRT_block_invoke_2;
          v38[3] = &__block_descriptor_80_e8_32s40s48s56bs64r72r_e48_v40__0__NSData_8__NSDictionary_16q24__NSError_32l;
          id v43 = &v54;
          id v24 = v24;
          id v39 = v24;
          id v40 = *(id *)(a1 + 40);
          uint64_t v25 = v29;
          id v41 = v25;
          id v42 = *(id *)(a1 + 56);
          uint64_t v44 = &v48;
          char v31 = 1;
          performUCRTOOB(v37, 1, v30, v24, v38);

          id v32 = v39;
          goto LABEL_39;
        }

        id v33 =  createMobileActivationError( (uint64_t)"issueUCRT_block_invoke",  2704LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate dictionary.");
        goto LABEL_37;
      }

      uint64_t v22 =  createMobileActivationError( (uint64_t)"issueUCRT_block_invoke",  2695LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate dictionary.");
    }

    id v33 = v22;
    id v24 = 0LL;
LABEL_37:
    uint64_t v25 = 0LL;
    char v31 = 0;
LABEL_38:
    id v32 = v55[5];
    v55[5] = v33;
LABEL_39:

    if (!v16) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }

  id v2 =  createMobileActivationError( (uint64_t)"issueUCRT_block_invoke",  2630LL,  @"com.apple.MobileActivation.ErrorDomain",  -3LL,  0LL,  @"UCRT not supported on virtual machines.");
  id v3 = 0LL;
LABEL_28:
  id v23 = v55[5];
  v55[5] = v2;

  id v24 = 0LL;
  uint64_t v25 = 0LL;
  id v12 = 0LL;
  id v10 = 0LL;
  id v20 = 0LL;
LABEL_29:
  uint64_t v26 = *(void *)(a1 + 56);
  if (v26) {
    (*(void (**)(uint64_t, uint64_t, id))(v26 + 16))(v26, v49[5], v55[5]);
  }
LABEL_31:

  _Block_object_dispose(&v48, 8);
  _Block_object_dispose(&v54, 8);
}

void sub_100023E5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

void performUCRTOOB(void *a1, int a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (a2)
  {
    id v13 = v9;
    id v14 = v10;
    id v15 = v11;
    id v16 = v12;
    unsigned int v17 = dispatch_get_global_queue(0LL, 0LL);
    int v18 = v17;
    id v20 = _NSConcreteStackBlock;
    uint64_t v21 = 3254779904LL;
    id v19 = ___performUCRTHealingOOB_block_invoke;
  }

  else
  {
    id v13 = v9;
    id v14 = v10;
    id v15 = v11;
    id v16 = v12;
    unsigned int v17 = dispatch_get_global_queue(0LL, 0LL);
    int v18 = v17;
    id v20 = _NSConcreteStackBlock;
    uint64_t v21 = 3254779904LL;
    id v19 = ___performUCRTOOB_block_invoke;
  }

  uint64_t v22 = v19;
  id v23 = &__block_descriptor_64_e8_32s40s48s56bs_e5_v8__0l;
  id v24 = v13;
  id v25 = v14;
  id v26 = v15;
  id v27 = v16;
  dispatch_async(v17, &v20);
}

void __issueUCRT_block_invoke_2(uint64_t a1, id a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  id v12 = (dispatch_queue_s *)copyMobileActivationSerialQueue();
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3254779904LL;
  v19[2] = __issueUCRT_block_invoke_3;
  v19[3] = &__block_descriptor_112_e8_32s40s48s56s64s72s80bs88r96r_e5_v8__0l;
  uint64_t v29 = a4;
  uint64_t v13 = *(void *)(a1 + 64);
  id v20 = v11;
  id v21 = v9;
  uint64_t v27 = v13;
  id v22 = v10;
  id v23 = *(id *)(a1 + 32);
  id v24 = *(id *)(a1 + 40);
  id v25 = *(id *)(a1 + 48);
  id v14 = *(id *)(a1 + 56);
  uint64_t v15 = *(void *)(a1 + 72);
  id v26 = v14;
  uint64_t v28 = v15;
  id v16 = v10;
  id v17 = v9;
  id v18 = v11;
  dispatch_async(v12, v19);
}

uint64_t __issueUCRT_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  switch(v2)
  {
    case 200LL:
      if (!*(void *)(a1 + 40))
      {
        id v3 = *(void **)(a1 + 32);
        id v4 = @"Invalid server response.";
        uint64_t v5 = 2733LL;
        goto LABEL_15;
      }

      id v6 = (NSDateFormatter *)[*(id *)(a1 + 48) objectForKeyedSubscript:@"Date"];
      if (!v6)
      {
        MobileActivationError = createMobileActivationError( (uint64_t)"issueUCRT_block_invoke_3",  2739LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve server response date.");
        goto LABEL_16;
      }

      id v7 = v6;
      id v8 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
      if (!v8)
      {
        BOOL v35 =  createMobileActivationError( (uint64_t)"issueUCRT_block_invoke_3",  2745LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate date formatter.");
        uint64_t v36 = *(void *)(*(void *)(a1 + 88) + 8LL);
        uint64_t v37 = *(void **)(v36 + 40);
        *(void *)(v36 + 40) = v35;

        uint64_t v27 = v7;
        goto LABEL_17;
      }

      id v9 = v8;
      uint64_t v10 = *(void *)(*(void *)(a1 + 88) + 8LL);
      id obj = *(id *)(v10 + 40);
      id v11 = -[NSDateFormatter dateFromServerString:withError:](v8, "dateFromServerString:withError:", v7, &obj);
      objc_storeStrong((id *)(v10 + 40), obj);
      if (!v11)
      {
        double v38 =  createMobileActivationError( (uint64_t)"issueUCRT_block_invoke_3",  2751LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  *(void **)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL),  @"Failed to convert date string.");
        uint64_t v39 = *(void *)(*(void *)(a1 + 88) + 8LL);
        id v40 = *(void **)(v39 + 40);
        *(void *)(v39 + 40) = v38;

        uint64_t v27 = v9;
        goto LABEL_17;
      }

      id v12 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
      uint64_t v13 = (NSDateFormatter *)[v12 copyAnswer:@"BuildVersion"];

      id v14 = isNSString(v13);
      if (v14)
      {
        [*(id *)(a1 + 56) setObject:v11 forKeyedSubscript:@"ServerResponseDate"];
        uint64_t v15 = *(void **)(a1 + 40);
        id v17 = *(void **)(a1 + 56);
        id v16 = *(void **)(a1 + 64);
        uint64_t v18 = *(void *)(*(void *)(a1 + 88) + 8LL);
        id v45 = *(id *)(v18 + 40);
        char v19 = storeUCRT(v16, v15, v17, &v45);
        objc_storeStrong((id *)(v18 + 40), v45);
        if ((v19 & 1) != 0)
        {
          data_ark_set(*(void **)(a1 + 64), 0LL, @"UCRTOOBLastPerformed", v13, 1);
          data_ark_remove(*(void **)(a1 + 64), 0LL, @"UCRTOOBForbiddenCount");
          data_ark_remove(*(void **)(a1 + 64), 0LL, @"UCRTOOBRetryAttempt");
          data_ark_remove(*(void **)(a1 + 64), 0LL, @"UCRTUpgradeRequired");
          data_ark_remove(*(void **)(a1 + 64), 0LL, @"UCRTHealingRequired");
          data_ark_remove(*(void **)(a1 + 64), 0LL, @"UIKUpgradeRequired");
LABEL_29:

          uint64_t v27 = v13;
          goto LABEL_17;
        }

        id v41 = createMobileActivationError( (uint64_t)"issueUCRT_block_invoke_3",  2766LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  *(void **)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL),  @"Failed to store UCRT.");
      }

      else
      {
        id v41 = createMobileActivationError( (uint64_t)"issueUCRT_block_invoke_3",  2757LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve OS build.");
      }

      id v42 = v41;
      uint64_t v43 = *(void *)(*(void *)(a1 + 88) + 8LL);
      uint64_t v44 = *(void **)(v43 + 40);
      *(void *)(v43 + 40) = v42;

      goto LABEL_29;
    case 0LL:
      id v3 = *(void **)(a1 + 32);
      id v4 = @"Network communication error.";
      uint64_t v5 = 2725LL;
      goto LABEL_15;
    case -1LL:
      id v3 = *(void **)(a1 + 32);
      id v4 = @"Internal error.";
      uint64_t v5 = 2722LL;
LABEL_15:
      MobileActivationError = createMobileActivationError( (uint64_t)"issueUCRT_block_invoke_3",  v5,  @"com.apple.MobileActivation.ErrorDomain",  -6LL,  v3,  v4);
LABEL_16:
      uint64_t v29 = MobileActivationError;
      uint64_t v30 = *(void *)(*(void *)(a1 + 88) + 8LL);
      char v31 = *(NSDateFormatter **)(v30 + 40);
      *(void *)(v30 + 40) = v29;
      uint64_t v27 = v31;
      goto LABEL_17;
  }

  id v20 = *(void **)(a1 + 32);
  id v21 =  +[NSHTTPURLResponse localizedStringForStatusCode:]( &OBJC_CLASS___NSHTTPURLResponse,  "localizedStringForStatusCode:",  v2);
  id v22 =  createMobileActivationError( (uint64_t)"issueUCRT_block_invoke_3",  2728LL,  @"com.apple.MobileActivation.ServerErrorDomain",  v2,  v20,  @"Server error: %ld (%@)",  v2,  v21);

  uint64_t v23 = *(void *)(a1 + 104);
  id v24 =  +[NSHTTPURLResponse localizedStringForStatusCode:]( &OBJC_CLASS___NSHTTPURLResponse,  "localizedStringForStatusCode:",  v23);
  id v25 =  createMobileActivationError( (uint64_t)"issueUCRT_block_invoke_3",  2728LL,  @"com.apple.MobileActivation.ErrorDomain",  -6LL,  v22,  @"Server error: %ld (%@)",  v23,  v24);

  uint64_t v26 = *(void *)(*(void *)(a1 + 88) + 8LL);
  uint64_t v27 = *(NSDateFormatter **)(v26 + 40);
  *(void *)(v26 + 40) = v25;
LABEL_17:

  if (*(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL))
  {
    uint64_t v33 = *(void *)(a1 + 104);
    if (v33) {
      writeSplunkLog( *(void **)(a1 + 64),  32LL,  v33,  (uint64_t)"issueUCRT_block_invoke_3",  2784,  *(void **)(a1 + 72),  @"%@",  v32,  *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL));
    }
  }

  data_ark_set(*(void **)(a1 + 64), 0LL, @"UCRTIssuanceInFlight", &__kCFBooleanFalse, 0);
  uint64_t result = *(void *)(a1 + 80);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL),  *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL));
  }
  return result;
}

void __copy_helper_block_e8_32s40s48s56s64s72s80b88r96r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  id v6 = *(id *)(a2 + 48);
  id v7 = *(id *)(a2 + 56);
  id v8 = *(id *)(a2 + 64);
  id v9 = *(id *)(a2 + 72);
  _Block_object_assign((void *)(a1 + 80), *(const void **)(a2 + 80), 7);
  _Block_object_assign((void *)(a1 + 88), *(const void **)(a2 + 88), 8);
  _Block_object_assign((void *)(a1 + 96), *(const void **)(a2 + 96), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64s72s80s88r96r(uint64_t a1)
{
}

void __copy_helper_block_e8_32s40s48s56b64r72r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  id v6 = *(id *)(a2 + 48);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 7);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 8);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64r72r(uint64_t a1)
{
}

void __issueClientCertificateWithReferenceKey_block_invoke(uint64_t a1)
{
  uint64_t v78 = 0LL;
  id v79 = (id *)&v78;
  uint64_t v80 = 0x3032000000LL;
  id v81 = __Block_byref_object_copy__4;
  uint64_t v82 = __Block_byref_object_dispose__4;
  id v83 = 0LL;
  uint64_t v72 = 0LL;
  SecCertificateRef v73 = &v72;
  uint64_t v74 = 0x3032000000LL;
  int v75 = __Block_byref_object_copy__4;
  id v76 = __Block_byref_object_dispose__4;
  id v77 = 0LL;
  char v71 = 0;
  if (*(void *)(a1 + 32) && *(void *)(a1 + 40) && *(void *)(a1 + 48))
  {
    uint64_t v2 = *(void **)(a1 + 56);
    if (v2)
    {
      id v3 = [v2 objectForKeyedSubscript:@"scrtAttestation"];
      id v4 = isNSNumber(v3);

      if (v4)
      {
        id v5 = [*(id *)(a1 + 56) objectForKeyedSubscript:@"scrtAttestation"];
        unsigned __int8 v53 = [v5 BOOLValue];
      }

      else
      {
        unsigned __int8 v53 = 0;
      }

      id v15 = [*(id *)(a1 + 56) objectForKeyedSubscript:@"NetworkTimeoutInterval"];
      id v16 = isNSNumber(v15);

      if (v16)
      {
        id v8 = [*(id *)(a1 + 56) objectForKeyedSubscript:@"NetworkTimeoutInterval"];
        [v8 doubleValue];
        if (v17 <= 0.0)
        {
          id v6 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke",  2838LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid network timeout requested: %@",  v8);
          id v7 = 0LL;
          goto LABEL_8;
        }
      }

      else
      {
        id v8 = 0LL;
      }

      id v18 = [*(id *)(a1 + 56) objectForKeyedSubscript:@"CertType"];
      id v19 = isNSNumber(v18);

      if (v19)
      {
        id v7 = [*(id *)(a1 + 56) objectForKeyedSubscript:@"CertType"];
        id v20 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 0LL);
        if ([v7 isEqualToNumber:v20])
        {
        }

        else
        {
          id v21 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 1LL);
          if ([v7 isEqualToNumber:v21])
          {
          }

          else
          {
            id v22 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 2LL);
            unsigned __int8 v23 = [v7 isEqualToNumber:v22];

            if ((v23 & 1) == 0)
            {
              id v6 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke",  2847LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid value for option (%@): %@",  @"CertType",  v7);
              goto LABEL_8;
            }
          }
        }

        id v24 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 1LL);
        unsigned __int8 v25 = [v7 isEqualToNumber:v24];

        if ((v25 & 1) != 0)
        {
          unsigned __int8 v14 = 0;
          char v13 = 1;
        }

        else
        {
          uint64_t v26 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 2LL);
          unsigned __int8 v14 = [v7 isEqualToNumber:v26];

          char v13 = 0;
        }
      }

      else
      {
        id v7 = 0LL;
        char v13 = 0;
        unsigned __int8 v14 = 0;
      }
    }

    else
    {
      id v7 = 0LL;
      unsigned __int8 v53 = 0;
      char v13 = 0;
      unsigned __int8 v14 = 0;
      id v8 = 0LL;
    }

    id v27 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"ActivationState");
    id v9 = (__CFString *)isNSString(v27);

    if (!v9) {
      id v9 = @"Unactivated";
    }
    if ((v53 & 1) != 0)
    {
      uint64_t v28 = 0LL;
      id v11 = 0LL;
      goto LABEL_34;
    }

    if ((-[__CFString isEqualToString:](v9, "isEqualToString:", @"Activated") & 1) == 0)
    {
      id v6 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke",  2866LL,  @"com.apple.MobileActivation.ErrorDomain",  -8LL,  0LL,  @"Device is not activated: %@",  v9);
      goto LABEL_9;
    }

    uint64_t v33 = *(void **)(a1 + 32);
    id v34 = v79;
    id obj = v79[5];
    uint64_t v28 = copyUCRT(v33, (NSError **)&obj);
    objc_storeStrong(v34 + 5, obj);
    if (!v28)
    {
      uint64_t v44 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke",  2872LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v79[5],  @"Failed to copy UCRT.");
      id v45 = v79[5];
      v79[5] = v44;

      if (mobileactivationErrorHasDomainAndErrorCode( v79[5],  @"com.apple.MobileActivation.ErrorDomain",  (id)0xFFFFFFFFFFFFFFFCLL))
      {
        data_ark_remove(*(void **)(a1 + 32), 0LL, @"UCRTOOBRetryAttempt");
        data_ark_set(*(void **)(a1 + 32), 0LL, @"UCRTHealingRequired", &__kCFBooleanTrue, 1);
        id v46 = copyLoggingHandle();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "Scheduled UCRT OOB to attempt recovery of missing UCRT.",  buf,  2u);
        }

        scheduleXPCActivity( *(void **)(a1 + 32),  (const char *)[@"com.apple.mobileactivationd.UCRT.OOB" UTF8String],  5u,  1,  0x3000u,  0x1000u,  &__block_literal_global_5);
      }

      goto LABEL_10;
    }

    BOOL v35 = v79;
    id v68 = v79[5];
    char v36 = deleteLegacyUIKIfMismatched(v28, &v71, (NSError **)&v68);
    objc_storeStrong(v35 + 5, v68);
    if ((v36 & 1) != 0)
    {
      if (v71)
      {
        maLog((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_2", 0LL, @"Legacy UIK purged.");
        data_ark_remove(*(void **)(a1 + 32), 0LL, @"UIKUpgradeRequired");
      }

      id v37 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"UCRTHealingRequired");
      double v38 = (void *)v73[5];
      v73[5] = (uint64_t)v37;

      id v39 = isNSNumber((void *)v73[5]);
      if (!v39)
      {
        id v40 = (void *)v73[5];
        v73[5] = (uint64_t)&__kCFBooleanFalse;
      }

      id v11 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"UCRTOOBForbidden");
      id v41 = isNSNumber(v11);

      if (!v41)
      {

        id v11 = &__kCFBooleanFalse;
      }

      if (![(id)v73[5] BOOLValue])
      {
LABEL_34:
        id v29 = [*(id *)(a1 + 56) objectForKeyedSubscript:@"UseCellularBootstrapProxy"];
        if (v29
          || (id v29 = [*(id *)(a1 + 56) objectForKeyedSubscript:@"UseCellularOTAProxy"]) != 0
          || (id v29 = [*(id *)(a1 + 56) objectForKeyedSubscript:@"SOCKSProxyHost"]) != 0)
        {
        }

        else
        {
          id v48 = [*(id *)(a1 + 56) objectForKeyedSubscript:@"SOCKSProxyPort"];

          if (!v48)
          {
            id v49 = v79;
            id v67 = v79[5];
            BOOL v50 = networkReachable();
            objc_storeStrong(v49 + 5, v67);
            if (!v50)
            {
              uint64_t v51 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_2",  2949LL,  @"com.apple.MobileActivation.ErrorDomain",  -17LL,  v79[5],  @"Network is unavailable.");
              char v31 = 0;
              id v32 = v79[5];
              v79[5] = v51;
LABEL_39:

              if (!v28)
              {
LABEL_69:
                if ((v31 & 1) != 0) {
                  goto LABEL_13;
                }
                goto LABEL_11;
              }

LABEL_68:
              CFRelease(v28);
              goto LABEL_69;
            }
          }
        }

        uint64_t v30 = dispatch_get_global_queue(0LL, 0LL);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3254779904LL;
        block[2] = __issueClientCertificateWithReferenceKey_block_invoke_3;
        block[3] = &__block_descriptor_103_e8_32s40s48s56s64s72bs80r88r_e5_v8__0l;
        uint64_t v61 = &v78;
        id v55 = *(id *)(a1 + 40);
        id v56 = *(id *)(a1 + 56);
        id v57 = *(id *)(a1 + 48);
        int v63 = *(_DWORD *)(a1 + 72);
        id v58 = v8;
        unsigned __int8 v64 = v53;
        char v65 = v13;
        unsigned __int8 v66 = v14;
        id v59 = *(id *)(a1 + 32);
        id v62 = &v72;
        id v60 = *(id *)(a1 + 64);
        dispatch_async(v30, block);

        char v31 = 1;
        id v32 = v55;
        goto LABEL_39;
      }

      objc_storeStrong(v79 + 5, v79[5]);
      id v42 = v79[5];
      if (v42)
      {
        uint64_t v43 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_2",  2924LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v42,  @"Failed to query UCRT healing support.");
      }

      else if ([v11 BOOLValue])
      {
        uint64_t v43 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_2",  2934LL,  @"com.apple.MobileActivation.ErrorDomain",  -16LL,  0LL,  @"UCRT healing required but not supported (max failure retries attempted).");
      }

      else
      {
        uint64_t v43 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_2",  2938LL,  @"com.apple.MobileActivation.ErrorDomain",  -16LL,  0LL,  @"UCRT healing required but not performed yet (try again later).");
      }

      id v47 = v43;
    }

    else
    {
      id v47 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_2",  2895LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v79[5],  @"Failed to delete invalid legacy UIK.");
      id v11 = 0LL;
    }

    id v52 = v79[5];
    v79[5] = v47;

    char v31 = 0;
    goto LABEL_68;
  }

  id v6 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke",  2826LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid input(s).");
  id v7 = 0LL;
  id v8 = 0LL;
LABEL_8:
  id v9 = 0LL;
LABEL_9:
  id v10 = v79[5];
  v79[5] = v6;

LABEL_10:
  id v11 = 0LL;
LABEL_11:
  uint64_t v12 = *(void *)(a1 + 64);
  if (v12) {
    (*(void (**)(uint64_t, void, id))(v12 + 16))(v12, 0LL, v79[5]);
  }
LABEL_13:

  _Block_object_dispose(&v72, 8);
  _Block_object_dispose(&v78, 8);
}

    __break(0x5513u);
    goto LABEL_69;
  }

  id v9 = *v6;
  id v10 = v9 != 128 && v9 >= 0x1F;
  if (!v10) {
    return 3LL;
  }
  id v8 = 0LL;
  uint64_t result = 3LL;
  while (v7 >= 2)
  {
    id v11 = v8;
    if (v8 >> 57) {
      break;
    }
    if (v6 >= v5 || v6 < v4) {
      goto LABEL_69;
    }
    uint64_t v12 = (char *)(v6 + 1);
    --v7;
    char v13 = *v6;
    id v8 = *v6++ & 0x7F | (v8 << 7);
    if ((v13 & 0x80) == 0)
    {
      if (v11 >> 54) {
        return 3LL;
      }
      goto LABEL_20;
    }
  }

  return result;
}

void sub_1000253F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30)
{
}

void __issueClientCertificateWithReferenceKey_block_invoke_131(id a1, DataArk *a2)
{
}

void ucrt_oob_activity_handler(void *a1, int a2)
{
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3254779904LL;
      block[2] = __ucrt_oob_activity_handler_block_invoke;
      block[3] = &__block_descriptor_40_e8_32s_e5_v8__0l;
      id v12 = v3;
      dispatch_block_t v5 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, block);
      id v6 = (dispatch_queue_s *)copyMobileActivationSerialQueue();
      dispatch_async(v6, v5);

      id v7 = v12;
    }

    else
    {
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3254779904LL;
      v9[2] = __ucrt_oob_activity_handler_block_invoke_3;
      v9[3] = &__block_descriptor_40_e8_32s_e5_v8__0l;
      id v10 = v3;
      dispatch_block_t v5 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, v9);
      id v8 = (dispatch_queue_s *)copyMobileActivationSerialQueue();
      dispatch_async(v8, v5);

      id v7 = v10;
    }
  }

  else
  {
    maLog((uint64_t)"ucrt_oob_activity_handler", 0LL, @"Invalid input.");
  }
}

uint64_t deleteLegacyUIKIfMismatched(__SecCertificate *a1, _BYTE *a2, NSError **a3)
{
  id v18 = 0LL;
  BOOL is_legacy = security_committed_uik_is_legacy(&v18);
  id v7 = (NSError *)v18;
  id v8 = v7;
  if (!is_legacy && v7)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"deleteLegacyUIKIfMismatched",  1578LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v7,  @"Failed to query legacy UIK support.");
    goto LABEL_4;
  }

  if (!is_legacy)
  {
LABEL_13:
    uint64_t v11 = 1LL;
    goto LABEL_14;
  }

  id v17 = v7;
  char v12 = certificatePublicKeyMatchesSystemPublicKey(2LL, 2LL, a1, (NSError **)&v17);
  char v13 = (NSError *)v17;

  if ((v12 & 1) != 0)
  {
    id v8 = v13;
    goto LABEL_11;
  }

  id v16 = v13;
  char v14 = security_delete_legacy_uik(&v16);
  id v8 = (NSError *)v16;

  if ((v14 & 1) != 0)
  {
LABEL_11:
    if (a2) {
      *a2 = v12 ^ 1;
    }
    goto LABEL_13;
  }

  MobileActivationError = createMobileActivationError( (uint64_t)"deleteLegacyUIKIfMismatched",  1589LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v8,  @"Failed to delete legacy UIK.");
LABEL_4:
  id v10 = MobileActivationError;

  if (a3)
  {
    id v8 = v10;
    uint64_t v11 = 0LL;
    *a3 = v8;
  }

  else
  {
    uint64_t v11 = 0LL;
    id v8 = v10;
  }

uint64_t ucrtHealingSupported()
{
  return 1LL;
}

void __issueClientCertificateWithReferenceKey_block_invoke_3(uint64_t a1)
{
  CFErrorRef error = 0LL;
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v3 = v2;
  if (!v2)
  {
    id v18 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_3",  2979LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate dictionary.");
    uint64_t v19 = *(void *)(*(void *)(a1 + 80) + 8LL);
    id v20 = *(void **)(v19 + 40);
    *(void *)(v19 + 40) = v18;

    id v12 = 0LL;
    char v13 = 0LL;
    char v14 = 0LL;
    id v15 = 0LL;
    id v16 = 0LL;
    id v17 = 0LL;
    id v80 = 0LL;
    id v81 = 0LL;
    id v6 = 0LL;
    goto LABEL_8;
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  *(void *)(a1 + 32),  @"clientName");
  id v4 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"UseCellularBootstrapProxy"];
  id v5 = isNSNumber(v4);

  if (v5)
  {
    id v6 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"UseCellularBootstrapProxy"];
    if (is_product_cellular() && [v6 BOOLValue])
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 80) + 8LL);
      uint64_t v102 = *(NSError **)(v7 + 40);
      id v8 = copyCellularProxyDictionary(1, &v102);
      objc_storeStrong((id *)(v7 + 40), v102);
      id v81 = v8;
      if (!v8)
      {
        id v9 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_3",  2990LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  *(void **)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL),  @"Failed to query cellular network proxy info.");
        uint64_t v10 = *(void *)(*(void *)(a1 + 80) + 8LL);
        uint64_t v11 = *(void **)(v10 + 40);
        *(void *)(v10 + 40) = v9;

        id v12 = 0LL;
        char v13 = 0LL;
        char v14 = 0LL;
        id v15 = 0LL;
        id v16 = 0LL;
        id v17 = 0LL;
        id v80 = 0LL;
        id v81 = 0LL;
        goto LABEL_50;
      }
    }

    else
    {
      id v81 = 0LL;
    }
  }

  else
  {
    id v81 = 0LL;
    id v6 = 0LL;
  }

  id v21 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"UseCellularOTAProxy"];
  id v22 = isNSNumber(v21);

  if (v22)
  {
    id v23 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"UseCellularOTAProxy"];
    id v80 = v23;
    if (is_product_cellular() && [v23 BOOLValue])
    {
      uint64_t v24 = *(void *)(*(void *)(a1 + 80) + 8LL);
      id v101 = *(NSError **)(v24 + 40);
      id v17 = copyCellularProxyDictionary(0, &v101);
      objc_storeStrong((id *)(v24 + 40), v101);

      if (v17)
      {
        char v78 = 1;
        id v81 = v17;
        goto LABEL_18;
      }

      id v39 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_3",  3003LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  *(void **)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL),  @"Failed to query cellular network proxy info.");
      uint64_t v40 = *(void *)(*(void *)(a1 + 80) + 8LL);
      id v41 = *(void **)(v40 + 40);
      *(void *)(v40 + 40) = v39;

      id v12 = 0LL;
      char v13 = 0LL;
      char v14 = 0LL;
      id v15 = 0LL;
      id v16 = 0LL;
      id v81 = 0LL;
LABEL_8:
      LOBYTE(v_Block_object_dispose((const void *)(v30 - 136), 8) = 0;
      goto LABEL_50;
    }
  }

  else
  {
    id v80 = 0LL;
  }

  char v78 = 0;
LABEL_18:
  id v25 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"SOCKSProxyHost"];
  id v26 = isNSString(v25);
  id v79 = v6;
  if (v26)
  {
    id v27 = v26;
    id v28 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"SOCKSProxyPort"];
    id v29 = isNSNumber(v28);

    if (!v29) {
      goto LABEL_22;
    }
    v106[0] = @"SOCKSProxyHost";
    id v25 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"SOCKSProxyHost"];
    v107[0] = v25;
    v106[1] = @"SOCKSProxyPort";
    id v30 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"SOCKSProxyPort"];
    v107[1] = v30;
    char v31 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v107,  v106,  2LL);

    id v81 = (NSMutableDictionary *)v31;
  }

LABEL_22:
  if (!is_internal_build())
  {
    id v17 = 0LL;
    goto LABEL_31;
  }

  id v32 = objc_alloc(&OBJC_CLASS___NSUserDefaults);
  id v17 =  -[NSUserDefaults persistentDomainForName:]( v32,  "persistentDomainForName:",  @"com.apple.mobileactivationd");

  id v33 = -[NSMutableDictionary objectForKeyedSubscript:](v17, "objectForKeyedSubscript:", @"UseReverseProxy");
  id v34 = isNSNumber(v33);
  if (!v34)
  {

    goto LABEL_31;
  }

  BOOL v35 = v34;
  id v36 = -[NSMutableDictionary objectForKeyedSubscript:](v17, "objectForKeyedSubscript:", @"UseReverseProxy");
  unsigned int v37 = [v36 BOOLValue];

  if (!v37) {
    goto LABEL_31;
  }
  if (!v81)
  {
    id v81 = copyReverseProxyDictionary(0LL, 0LL, 0LL);
LABEL_31:
    SecAccessControlRef v42 = SecAccessControlCreateWithFlags(0LL, kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate, 0x40000000uLL, &error);
    if (!v42)
    {
      MobileActivationError = createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_3",  3035LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to create access control.");
      goto LABEL_40;
    }

    SecAccessControlRef v43 = v42;
    v104[0] = kSecAttrIsPermanent;
    v104[1] = kSecAttrTokenID;
    v105[0] = &__kCFBooleanFalse;
    v105[1] = kSecAttrTokenIDAppleKeyStore;
    v104[2] = kSecAttrTokenOID;
    v104[3] = kSecAttrAccessControl;
    v105[2] = *(void *)(a1 + 48);
    v105[3] = v42;
    id v15 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v105,  v104,  4LL);
    uint64_t v44 = SecKeyCreateWithData((CFDataRef)+[NSData data](&OBJC_CLASS___NSData, "data"), (CFDictionaryRef)v15, &error);
    id v8 = (NSMutableDictionary *)v44;
    if (!v44)
    {
      id v56 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_3",  3050LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  error,  @"Failed to convert RK data blob.");
      uint64_t v57 = *(void *)(*(void *)(a1 + 80) + 8LL);
      id v58 = *(void **)(v57 + 40);
      *(void *)(v57 + 40) = v56;

      id v12 = 0LL;
      char v13 = 0LL;
      char v14 = 0LL;
      id v16 = 0LL;
LABEL_48:
      CFRelease(v43);
      goto LABEL_49;
    }

    id v45 = *(void **)(a1 + 40);
    uint64_t v46 = *(void *)(*(void *)(a1 + 80) + 8LL);
    id obj = *(id *)(v46 + 40);
    char v13 = create_baa_info(v44, v45, &obj);
    objc_storeStrong((id *)(v46 + 40), obj);
    CFTypeRef cf = v8;
    if (v13)
    {
      uint64_t v47 = *(void *)(*(void *)(a1 + 80) + 8LL);
      id v98 = *(id *)(v47 + 40);
      id v99 = 0LL;
      char XMLRequest = createXMLRequest(v13, (NSMutableURLRequest **)&v99, (NSError **)&v98);
      id v12 = v99;
      objc_storeStrong((id *)(v47 + 40), v98);
      if ((XMLRequest & 1) != 0)
      {
        id v49 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
        id v16 = [v49 copyAnswer:@"UniqueDeviceID"];

        id v8 = (NSMutableDictionary *)isNSString(v16);
        if (!v8)
        {
          id v59 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_3",  3067LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query %@.",  @"UniqueDeviceID");
          char v14 = 0LL;
          goto LABEL_46;
        }

        BOOL v50 =  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ - %@",  @"iOS Device Activator (MobileActivation-1015.60.1)",  *(void *)(a1 + 32));
        char v14 = v50;
        int v51 = *(_DWORD *)(a1 + 96);
        if (v51 == 1)
        {
          id v52 = @" (DCRT)";
        }

        else
        {
          if (v51 != 3)
          {
LABEL_61:
            if (v14)
            {
              [v12 setValue:v14 forHTTPHeaderField:@"User-Agent"];
              [v12 setValue:v16 forHTTPHeaderField:@"x-jmet-deviceid"];
              BOOL v65 = is_virtual_machine();
              unsigned __int8 v66 = &VMBAA_URL;
              if (!v65) {
                unsigned __int8 v66 = &BAA_URL;
              }
              id v67 = +[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", *v66);
              [v12 setURL:v67];

              id v68 = *(void **)(a1 + 56);
              if (v68)
              {
                [v68 doubleValue];
                objc_msgSend(v12, "setTimeoutInterval:");
              }

              if (is_internal_build())
              {
                id v75 = -[NSMutableDictionary objectForKeyedSubscript:](v17, "objectForKeyedSubscript:");
                id v69 = isNSString(v75);

                if (v69)
                {
                  id v76 =  -[NSMutableDictionary objectForKeyedSubscript:]( v17,  "objectForKeyedSubscript:",  @"BAAOverrideURL");
                  uint64_t v70 = +[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v76);
                  [v12 setURL:v70];
                }
              }

              id v8 = dispatch_get_global_queue(0LL, 0LL);
              block[0] = _NSConcreteStackBlock;
              block[1] = 3254779904LL;
              block[2] = __issueClientCertificateWithReferenceKey_block_invoke_4;
              block[3] = &__block_descriptor_128_e8_32s40s48s56s64s72s80s88s96bs104r112r_e5_v8__0l;
              int v94 = *(_DWORD *)(a1 + 96);
              id v71 = *(id *)(a1 + 32);
              uint64_t v72 = *(void *)(a1 + 80);
              id v83 = v71;
              uint64_t v92 = v72;
              id v12 = v12;
              id v84 = v12;
              id v85 = v79;
              id v86 = v80;
              char v95 = v78;
              id v87 = v81;
              char v96 = *(_BYTE *)(a1 + 100);
              id v88 = v17;
              __int16 v97 = *(_WORD *)(a1 + 101);
              id v89 = *(id *)(a1 + 64);
              SecCertificateRef v73 = v3;
              uint64_t v74 = *(void *)(a1 + 88);
              id v90 = v73;
              uint64_t v93 = v74;
              id v91 = *(id *)(a1 + 72);
              dispatch_async((dispatch_queue_t)v8, block);

              LOBYTE(v_Block_object_dispose((const void *)(v30 - 136), 8) = 1;
              uint64_t v61 = v83;
              goto LABEL_47;
            }

            id v59 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_3",  3083LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create user agent string.");
            goto LABEL_45;
          }

          id v52 = @" (SDCRT)";
        }

        unsigned __int8 v64 = -[NSString stringByAppendingString:](v50, "stringByAppendingString:", v52);

        char v14 = v64;
        goto LABEL_61;
      }

      id v59 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_3",  3061LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  *(void **)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL),  @"Failed to create XML request.");
    }

    else
    {
      id v59 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_3",  3056LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  *(void **)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL),  @"Failed to create BAA info.");
      id v12 = 0LL;
    }

    char v14 = 0LL;
    id v16 = 0LL;
LABEL_45:
    LOBYTE(v_Block_object_dispose((const void *)(v30 - 136), 8) = 0;
LABEL_46:
    uint64_t v60 = *(void *)(*(void *)(a1 + 80) + 8LL);
    uint64_t v61 = *(void **)(v60 + 40);
    *(void *)(v60 + 40) = v59;
LABEL_47:

    CFRelease(cf);
    goto LABEL_48;
  }

  MobileActivationError = createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_3",  3019LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Cannot set both '%@' override and '%@'/'%@' option.",  @"UseReverseProxy",  @"UseCellularBootstrapProxy",  @"UseCellularOTAProxy");
LABEL_40:
  unsigned __int8 v53 = MobileActivationError;
  uint64_t v54 = *(void *)(*(void *)(a1 + 80) + 8LL);
  id v55 = *(void **)(v54 + 40);
  *(void *)(v54 + 40) = v53;

  id v12 = 0LL;
  char v13 = 0LL;
  char v14 = 0LL;
  id v15 = 0LL;
  id v16 = 0LL;
  LOBYTE(v_Block_object_dispose((const void *)(v30 - 136), 8) = 0;
LABEL_49:
  id v6 = v79;
LABEL_50:
  if (error) {
    CFRelease(error);
  }
  CFErrorRef error = 0LL;
  if ((v8 & 1) == 0)
  {
    if ((mobileactivationErrorHasDomainAndErrorCode( *(void **)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL),  @"com.apple.MobileActivation.ErrorDomain",  (id)0xFFFFFFFFFFFFFFFDLL) & 1) == 0) {
      writeSplunkLog( *(void **)(a1 + 64),  17LL,  -1LL,  (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke",  3354,  v3,  @"%@",  v62,  *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL));
    }
    uint64_t v63 = *(void *)(a1 + 72);
    if (v63) {
      (*(void (**)(uint64_t, void, void))(v63 + 16))( v63,  0LL,  *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL));
    }
  }
}

void __issueClientCertificateWithReferenceKey_block_invoke_4(uint64_t a1)
{
  uint64_t v170 = 0LL;
  uint64_t v2 = *(unsigned int *)(a1 + 120);
  uint64_t v3 = v2;
  id v4 =  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  off_100255880[(int)v2],  *(void *)(a1 + 32));
  if (!v4)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 120);
LABEL_37:
    id v45 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_4",  3144LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid certificate type: %d",  v3);
    uint64_t v46 = *(void *)(*(void *)(a1 + 104) + 8LL);
    uint64_t v47 = *(void **)(v46 + 40);
    *(void *)(v46 + 40) = v45;

    id v149 = 0LL;
    CFTypeRef cf = 0LL;
    id v41 = 0LL;
    id v42 = 0LL;
    SecAccessControlRef v43 = 0LL;
    uint64_t v44 = 0LL;
    uint64_t v7 = 0LL;
LABEL_38:
    uint64_t v36 = 0LL;
    id v151 = 0LL;
    id v24 = 0LL;
    id v23 = 0LL;
    id v33 = 0LL;
    goto LABEL_39;
  }

  id v5 = v4;
  id v6 = copy_log_directory_path();
  uint64_t v7 = (NSData *)[v6 stringByAppendingPathComponent:v5];

  if (!v7)
  {
    uint64_t v61 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_4",  3150LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create log filename.");
    uint64_t v62 = *(void *)(*(void *)(a1 + 104) + 8LL);
    uint64_t v63 = *(void **)(v62 + 40);
    *(void *)(v62 + 40) = v61;

    id v149 = 0LL;
    CFTypeRef cf = 0LL;
    id v41 = 0LL;
    id v42 = 0LL;
    SecAccessControlRef v43 = 0LL;
    uint64_t v44 = 0LL;
    goto LABEL_38;
  }

  if (is_internal_build() || (*(_DWORD *)(a1 + 120) - 1) <= 2)
  {
    id v8 = formatURLRequest(*(void **)(a1 + 40));
    id v9 = -[NSData stringByAppendingString:](v7, "stringByAppendingString:", @"_request.txt");
    -[NSMutableString writeToFile:atomically:encoding:error:]( v8,  "writeToFile:atomically:encoding:error:",  v9,  0LL,  4LL,  0LL);
  }

  unint64_t v146 = v7;
  if (is_product_cellular())
  {
    if ([*(id *)(a1 + 48) BOOLValue])
    {
      uint64_t v10 = +[MATelephonyInfo sharedInstance](&OBJC_CLASS___MATelephonyInfo, "sharedInstance");
      uint64_t v11 = *(void *)(*(void *)(a1 + 104) + 8LL);
      id v169 = *(id *)(v11 + 40);
      unsigned __int8 v12 = -[MATelephonyInfo setCellularBootstrapAssertion:withError:]( v10,  "setCellularBootstrapAssertion:withError:",  1LL,  &v169);
      objc_storeStrong((id *)(v11 + 40), v169);

      if ((v12 & 1) == 0)
      {
        char v13 = copyLoggingHandle();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT)) {
          __issueClientCertificateWithReferenceKey_block_invoke_4_cold_4();
        }
      }
    }

    if ([*(id *)(a1 + 56) BOOLValue])
    {
      char v14 = +[MATelephonyInfo sharedInstance](&OBJC_CLASS___MATelephonyInfo, "sharedInstance");
      uint64_t v15 = *(void *)(*(void *)(a1 + 104) + 8LL);
      id v168 = *(id *)(v15 + 40);
      unsigned __int8 v16 = -[MATelephonyInfo setOTAActivationAssertion:withError:]( v14,  "setOTAActivationAssertion:withError:",  1LL,  &v168);
      objc_storeStrong((id *)(v15 + 40), v168);

      if ((v16 & 1) == 0)
      {
        id v17 = copyLoggingHandle();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT)) {
          __issueClientCertificateWithReferenceKey_block_invoke_4_cold_3();
        }
      }
    }
  }

  uint64_t v18 = a1 + 104;
  uint64_t v19 = *(void **)(a1 + 40);
  int v20 = *(unsigned __int8 *)(a1 + 124);
  id v21 = *(void **)(a1 + 64);
  uint64_t v22 = *(void *)(*(void *)(a1 + 104) + 8LL);
  id v166 = *(id *)(v22 + 40);
  id v167 = 0LL;
  id v23 = talkToServerWithError(v19, 0LL, v20, v21, &v167, &v170, &v166);
  id v24 = v167;
  objc_storeStrong((id *)(v22 + 40), v166);
  if (is_product_cellular())
  {
    if ([*(id *)(a1 + 48) BOOLValue])
    {
      id v25 = +[MATelephonyInfo sharedInstance](&OBJC_CLASS___MATelephonyInfo, "sharedInstance");
      uint64_t v26 = *(void *)(*(void *)v18 + 8LL);
      id v165 = *(id *)(v26 + 40);
      unsigned __int8 v27 = -[MATelephonyInfo setCellularBootstrapAssertion:withError:]( v25,  "setCellularBootstrapAssertion:withError:",  0LL,  &v165);
      objc_storeStrong((id *)(v26 + 40), v165);

      if ((v27 & 1) == 0)
      {
        id v28 = copyLoggingHandle();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT)) {
          __issueClientCertificateWithReferenceKey_block_invoke_4_cold_2();
        }
      }
    }

    if ([*(id *)(a1 + 56) BOOLValue])
    {
      id v29 = +[MATelephonyInfo sharedInstance](&OBJC_CLASS___MATelephonyInfo, "sharedInstance");
      uint64_t v30 = *(void *)(*(void *)v18 + 8LL);
      id v164 = *(id *)(v30 + 40);
      unsigned __int8 v31 = -[MATelephonyInfo setOTAActivationAssertion:withError:]( v29,  "setOTAActivationAssertion:withError:",  0LL,  &v164);
      objc_storeStrong((id *)(v30 + 40), v164);

      if ((v31 & 1) == 0)
      {
        id v32 = copyLoggingHandle();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT)) {
          __issueClientCertificateWithReferenceKey_block_invoke_4_cold_1();
        }
      }
    }
  }

  id v33 = v146;
  if (is_internal_build() || (*(_DWORD *)(a1 + 120) - 1) <= 2)
  {
    id v34 = formatURLResponse(v23, v170, v24);
    id v35 = -[NSData stringByAppendingString:](v146, "stringByAppendingString:", @"_response.txt");
    -[NSMutableString writeToFile:atomically:encoding:error:]( v34,  "writeToFile:atomically:encoding:error:",  v35,  0LL,  4LL,  0LL);
  }

  uint64_t v36 = v170;
  if (v170 == 400)
  {
    uint64_t v64 = -6LL;
    __int128 v145 = v23;
    BOOL v65 = v24;
    if (!*(_BYTE *)(a1 + 125))
    {
      id v91 = lockcrypto_decode_error(v23, 0LL);
      unsigned int v92 = -[NSString isEqualToString:]( v91,  "isEqualToString:",  @"29:ECC signature verification failed: signature incorrect.");

      if (v92) {
        uint64_t v64 = -16LL;
      }
      uint64_t v152 = v64;
      uint64_t v36 = v170;
      goto LABEL_67;
    }

    uint64_t v36 = 400LL;
LABEL_66:
    uint64_t v152 = -6LL;
LABEL_67:
    id v76 = *(void **)(*(void *)(*(void *)v18 + 8LL) + 40LL);
    id v77 =  +[NSHTTPURLResponse localizedStringForStatusCode:]( &OBJC_CLASS___NSHTTPURLResponse,  "localizedStringForStatusCode:",  v36);
    id v78 = [v65 objectForKeyedSubscript:@"HUMBUG_XHEADER_STATUS"];
    id v79 = lockcrypto_decode_error(v145, 0LL);
    id v80 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke",  3206LL,  @"com.apple.MobileActivation.ServerErrorDomain",  v36,  v76,  @"Server error: %ld (%@) // %@ (%@)",  v36,  v77,  v78,  v79);

    uint64_t v81 = v170;
    uint64_t v82 =  +[NSHTTPURLResponse localizedStringForStatusCode:]( &OBJC_CLASS___NSHTTPURLResponse,  "localizedStringForStatusCode:",  v170);
    id v83 = v65;
    id v84 = [v65 objectForKeyedSubscript:@"HUMBUG_XHEADER_STATUS"];
    id v85 = lockcrypto_decode_error(v145, 0LL);
    id v86 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke",  3206LL,  @"com.apple.MobileActivation.ErrorDomain",  v152,  v80,  @"Server error: %ld (%@) // %@ (%@)",  v81,  v82,  v84,  v85);

    id v87 = v84;
    id v23 = v145;

    id v88 = v82;
    id v24 = v83;

    uint64_t v89 = *(void *)(*(void *)(a1 + 104) + 8LL);
    id v90 = *(void **)(v89 + 40);
    *(void *)(v89 + 40) = v86;

    id v149 = 0LL;
    CFTypeRef cf = 0LL;
    id v41 = 0LL;
    id v42 = 0LL;
    SecAccessControlRef v43 = 0LL;
    uint64_t v44 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v36 = 0LL;
    id v151 = 0LL;
    id v33 = v146;
    goto LABEL_39;
  }

  if (v170 != 200)
  {
    if (!v170)
    {
      unsigned int v37 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke",  3187LL,  @"com.apple.MobileActivation.ErrorDomain",  -6LL,  *(void **)(*(void *)(*(void *)v18 + 8LL) + 40LL),  @"Network communication error.");
      uint64_t v38 = *(void *)(*(void *)v18 + 8LL);
      id v39 = *(void **)(v38 + 40);
      *(void *)(v38 + 40) = v37;

      id v149 = 0LL;
      CFTypeRef cf = 0LL;
      id v41 = 0LL;
      id v42 = 0LL;
      SecAccessControlRef v43 = 0LL;
      uint64_t v44 = 0LL;
      uint64_t v7 = 0LL;
LABEL_75:
      id v151 = 0LL;
      goto LABEL_39;
    }

    __int128 v145 = v23;
    BOOL v65 = v24;
    goto LABEL_66;
  }

  if (!v23)
  {
    uint64_t v93 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke",  3211LL,  @"com.apple.MobileActivation.ErrorDomain",  -6LL,  *(void **)(*(void *)(*(void *)v18 + 8LL) + 40LL),  @"Failed to retrieve client certificate.");
    uint64_t v94 = *(void *)(*(void *)v18 + 8LL);
    char v95 = *(void **)(v94 + 40);
    *(void *)(v94 + 40) = v93;

    id v149 = 0LL;
    CFTypeRef cf = 0LL;
    id v41 = 0LL;
    id v42 = 0LL;
LABEL_73:
    SecAccessControlRef v43 = 0LL;
    uint64_t v44 = 0LL;
LABEL_74:
    uint64_t v7 = 0LL;
    uint64_t v36 = 0LL;
    goto LABEL_75;
  }

  id v42 = [v24 objectForKeyedSubscript:@"Date"];
  if (!v42)
  {
    char v96 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke",  3217LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve server response date.");
    uint64_t v97 = *(void *)(*(void *)v18 + 8LL);
    id v98 = *(void **)(v97 + 40);
    *(void *)(v97 + 40) = v96;

    id v149 = 0LL;
    CFTypeRef cf = 0LL;
    id v41 = 0LL;
    goto LABEL_73;
  }

  unsigned __int8 v66 = (uint64_t *)(a1 + 104);
  id v67 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  uint64_t v44 = v67;
  if (!v67)
  {
    id v99 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke",  3223LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate date formatter.");
    uint64_t v100 = *(void *)(*v66 + 8);
    id v101 = *(void **)(v100 + 40);
    *(void *)(v100 + 40) = v99;

    id v149 = 0LL;
    CFTypeRef cf = 0LL;
    id v41 = 0LL;
    SecAccessControlRef v43 = 0LL;
    goto LABEL_74;
  }

  uint64_t v68 = *(void *)(*v66 + 8);
  id obj = *(id *)(v68 + 40);
  id v69 = -[NSDateFormatter dateFromServerString:withError:](v67, "dateFromServerString:withError:", v42, &obj);
  uint64_t v70 = (id *)(v68 + 40);
  SecAccessControlRef v43 = v69;
  objc_storeStrong(v70, obj);
  if (!v43)
  {
    id v106 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke",  3229LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  *(void **)(*(void *)(*v66 + 8) + 40LL),  @"Failed to convert date string.");
    uint64_t v107 = *(void *)(*v66 + 8);
    uint64_t v108 = *(void **)(v107 + 40);
    *(void *)(v107 + 40) = v106;

    id v149 = 0LL;
    CFTypeRef cf = 0LL;
    id v41 = 0LL;
    goto LABEL_74;
  }

  id v144 = v43;
  uint64_t v71 = *(void *)(*v66 + 8);
  id v162 = *(id *)(v71 + 40);
  uint64_t v36 = lockcrypto_decode_pems(v23, "CERTIFICATE", (NSError **)&v162);
  objc_storeStrong((id *)(v71 + 40), v162);
  if (!v36 || [(id)v36 count] != (id)2)
  {
    uint64_t v102 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke",  3235LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  *(void **)(*(void *)(*v66 + 8) + 40LL),  @"Failed to decode certificates.");
    uint64_t v103 = *v66;
LABEL_78:
    uint64_t v104 = *(void *)(v103 + 8);
    uint64_t v105 = *(void **)(v104 + 40);
    *(void *)(v104 + 40) = v102;

    id v149 = 0LL;
    CFTypeRef cf = 0LL;
    id v41 = 0LL;
    uint64_t v7 = 0LL;
    id v151 = 0LL;
    SecAccessControlRef v43 = v144;
    goto LABEL_39;
  }

  __int128 v143 = (void *)v36;
  if (is_internal_build())
  {
    id v72 = [*(id *)(a1 + 72) objectForKeyedSubscript:@"UseQACertificates"];
    id v73 = isNSNumber(v72);

    if (v73)
    {
      id v74 = [*(id *)(a1 + 72) objectForKeyedSubscript:@"UseQACertificates"];
      int v75 = [v74 BOOLValue];
    }

    else
    {
      int v75 = 0;
    }

    uint64_t v36 = (uint64_t)v143;
  }

  else
  {
    int v75 = 0;
  }

  if (*(_BYTE *)(a1 + 126))
  {
    if (is_virtual_machine())
    {
      uint64_t v102 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke",  3247LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Certificate type (%d) is not supported on virtual machines.",  *(unsigned int *)(a1 + 120));
      uint64_t v103 = *(void *)(a1 + 104);
      goto LABEL_78;
    }

    uint64_t v113 = 3LL;
  }

  else
  {
    int v109 = *(unsigned __int8 *)(a1 + 127);
    BOOL v110 = is_virtual_machine();
    if (v109)
    {
      if (v110)
      {
        uint64_t v111 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke",  3254LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Certificate type (%d) is not supported on virtual machines.",  *(unsigned int *)(a1 + 120));
        uint64_t v112 = *(void *)(a1 + 104);
LABEL_104:
        uint64_t v126 = *(void *)(v112 + 8);
        v127 = *(void **)(v126 + 40);
        *(void *)(v126 + 40) = v111;

        id v149 = 0LL;
        CFTypeRef cf = 0LL;
        id v41 = 0LL;
        uint64_t v7 = 0LL;
LABEL_106:
        id v151 = 0LL;
        uint64_t v36 = (uint64_t)v143;
        SecAccessControlRef v43 = v144;
        goto LABEL_39;
      }

      uint64_t v113 = 5LL;
    }

    else if (v110)
    {
      uint64_t v113 = 4LL;
    }

    else if (*(_BYTE *)(a1 + 125))
    {
      uint64_t v113 = 2LL;
    }

    else
    {
      uint64_t v113 = 1LL;
    }
  }

  uint64_t v114 = *(void *)(*v66 + 8);
  id v161 = *(id *)(v114 + 40);
  v115 = copyRootCertificate(v113, v75, (NSError **)&v161);
  objc_storeStrong((id *)(v114 + 40), v161);
  if (!v115)
  {
    uint64_t v111 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke",  3269LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  *(void **)(*(void *)(*v66 + 8) + 40LL),  @"Failed to load BAA root CA certificate.");
    uint64_t v112 = *v66;
    goto LABEL_104;
  }

  uint64_t v116 = *(void *)(*v66 + 8);
  id v160 = *(id *)(v116 + 40);
  int v142 = lockcrypto_cert_from_pem_data(v115, (NSError **)&v160);
  objc_storeStrong((id *)(v116 + 40), v160);
  uint64_t v7 = v115;
  if (!v142)
  {
    v128 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke",  3275LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  *(void **)(*(void *)(*v66 + 8) + 40LL),  @"Failed to create certificate from pem data.");
    uint64_t v129 = *(void *)(*v66 + 8);
    v130 = *(void **)(v129 + 40);
    *(void *)(v129 + 40) = v128;

    id v149 = 0LL;
    CFTypeRef cf = 0LL;
    id v41 = 0LL;
    goto LABEL_106;
  }

  id v148 = v115;
  uint64_t v36 = (uint64_t)v143;
  id v117 = (const __CFData *)[v143 objectAtIndexedSubscript:0];
  SecCertificateRef v118 = SecCertificateCreateWithData(kCFAllocatorDefault, v117);

  CFTypeRef cf = v118;
  if (!v118)
  {
    id v131 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke",  3281LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create certificate.");
    uint64_t v132 = *(void *)(*v66 + 8);
    v133 = *(void **)(v132 + 40);
    *(void *)(v132 + 40) = v131;

    CFTypeRef cf = 0LL;
LABEL_109:
    id v149 = 0LL;
    id v151 = 0LL;
    SecAccessControlRef v43 = v144;
    uint64_t v7 = v148;
    goto LABEL_114;
  }

  id v119 = (const __CFData *)[v143 objectAtIndexedSubscript:1];
  SecCertificateRef v120 = SecCertificateCreateWithData(kCFAllocatorDefault, v119);

  if (!v120)
  {
    v134 =  createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke",  3287LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create certificate.");
    uint64_t v135 = *(void *)(*v66 + 8);
    unint64_t v136 = *(void **)(v135 + 40);
    *(void *)(v135 + 40) = v134;

    goto LABEL_109;
  }

  v121 = v120;
  uint64_t v122 = *(void *)(*(void *)(a1 + 104) + 8LL);
  __int128 v153 = (id *)(v122 + 40);
  uint64_t v7 = v148;
  id v149 = v121;
  BOOL v123 = *(unsigned __int8 *)(a1 + 125) != 0;
  if (*(_BYTE *)(a1 + 126))
  {
    id v159 = *(id *)(v122 + 40);
    char v124 = evaluateAccessoryTrustWithCerts(cf, v121, v142, v123, 1, v144, &v159);
    objc_storeStrong(v153, v159);
    if ((v124 & 1) == 0)
    {
      MobileActivationError = createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke",  3295LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  *(void **)(*(void *)(*v66 + 8) + 40LL),  @"Failed to verify MFi certificate.");
LABEL_113:
      unint64_t v139 = MobileActivationError;
      uint64_t v140 = *(void *)(*v66 + 8);
      unint64_t v141 = *(void **)(v140 + 40);
      *(void *)(v140 + 40) = v139;

      id v151 = 0LL;
      SecAccessControlRef v43 = v144;
      goto LABEL_114;
    }
  }

  else
  {
    id v158 = *(id *)(v122 + 40);
    char v137 = evaluateBAATrustWithCerts(cf, v121, v142, v123, 1, v144, &v158);
    objc_storeStrong(v153, v158);
    if ((v137 & 1) == 0)
    {
      MobileActivationError = createMobileActivationError( (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke",  3300LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  *(void **)(*(void *)(*v66 + 8) + 40LL),  @"Failed to verify BAA certificate.");
      goto LABEL_113;
    }
  }

  v172[0] = v143;
  v171[0] = @"RKCertification";
  v171[1] = @"ServerResponseCode";
  v138 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v170);
  v171[2] = @"ServerResponseDate";
  SecAccessControlRef v43 = v144;
  v172[1] = v138;
  v172[2] = v144;
  id v151 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v172,  v171,  3LL);

LABEL_114:
  id v41 = v142;
LABEL_39:
  if (*(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 40LL)) {
    BOOL v48 = v170 == 0;
  }
  else {
    BOOL v48 = 1;
  }
  if (!v48)
  {
    writeSplunkLog( *(void **)(a1 + 80),  17LL,  v170,  (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke",  3312,  *(void **)(a1 + 88),  @"%@",  v40,  *(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 40LL));
    id v147 = v7;
    uint64_t v49 = v36;
    BOOL v50 = v43;
    int v51 = v44;
    id v52 = v42;
    id v53 = v23;
    id v54 = v24;
    id v55 = v33;
    id v56 = (dispatch_queue_s *)copyMobileActivationSerialQueue();
    block[0] = _NSConcreteStackBlock;
    block[1] = 3254779904LL;
    block[2] = __issueClientCertificateWithReferenceKey_block_invoke_2;
    block[3] = &__block_descriptor_56_e8_32s40r48r_e5_v8__0l;
    uint64_t v156 = *(void *)(a1 + 112);
    id v57 = *(id *)(a1 + 80);
    uint64_t v58 = *(void *)(a1 + 104);
    id v155 = v57;
    uint64_t v157 = v58;
    dispatch_async(v56, block);
    id v59 = v56;
    id v33 = v55;
    id v24 = v54;
    id v23 = v53;
    id v42 = v52;
    uint64_t v44 = v51;
    SecAccessControlRef v43 = v50;
    uint64_t v36 = v49;
    uint64_t v7 = v147;
  }

  uint64_t v60 = *(void *)(a1 + 96);
  if (v60) {
    (*(void (**)(uint64_t, NSDictionary *, void))(v60 + 16))( v60,  v151,  *(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 40LL));
  }
  if (v41) {
    CFRelease(v41);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v149) {
    CFRelease(v149);
  }
}

void __issueClientCertificateWithReferenceKey_block_invoke_2(uint64_t a1)
{
  id v2 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"UCRTHealingRequired");
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  id v5 = isNSNumber(*(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
  if (!v5)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = &__kCFBooleanFalse;
  }

  if (mobileactivationErrorHasDomainAndErrorCode( *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL),  @"com.apple.MobileActivation.ErrorDomain",  (id)0xFFFFFFFFFFFFFFF0LL)
    && ([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) BOOLValue] & 1) == 0)
  {
    data_ark_remove(*(void **)(a1 + 32), 0LL, @"UCRTOOBRetryAttempt");
    data_ark_set(*(void **)(a1 + 32), 0LL, @"UCRTHealingRequired", &__kCFBooleanTrue, 1);
    id v8 = copyLoggingHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v9 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Scheduled UCRT OOB to attempt mismatch recovery.",  v9,  2u);
    }

    scheduleXPCActivity( *(void **)(a1 + 32),  (const char *)[@"com.apple.mobileactivationd.UCRT.OOB" UTF8String],  5u,  1,  0x3000u,  0x1000u,  &__block_literal_global_214);
  }

void __issueClientCertificateWithReferenceKey_block_invoke_213(id a1, DataArk *a2)
{
}

void __copy_helper_block_e8_32s40s48s56s64s72s80s88s96b104r112r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  id v6 = *(id *)(a2 + 48);
  id v7 = *(id *)(a2 + 56);
  id v8 = *(id *)(a2 + 64);
  id v9 = *(id *)(a2 + 72);
  id v10 = *(id *)(a2 + 80);
  id v11 = *(id *)(a2 + 88);
  _Block_object_assign((void *)(a1 + 96), *(const void **)(a2 + 96), 7);
  _Block_object_assign((void *)(a1 + 104), *(const void **)(a2 + 104), 8);
  _Block_object_assign((void *)(a1 + 112), *(const void **)(a2 + 112), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64s72s80s88s96s104r112r(uint64_t a1)
{
}

void __copy_helper_block_e8_32s40s48s56s64s72b80r88r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  id v6 = *(id *)(a2 + 48);
  id v7 = *(id *)(a2 + 56);
  id v8 = *(id *)(a2 + 64);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 7);
  _Block_object_assign((void *)(a1 + 80), *(const void **)(a2 + 80), 8);
  _Block_object_assign((void *)(a1 + 88), *(const void **)(a2 + 88), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64s72s80r88r(uint64_t a1)
{
}

void __copy_helper_block_e8_32s40s48s56s64b(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  id v6 = *(id *)(a2 + 48);
  id v7 = *(id *)(a2 + 56);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 7);
}

void __destroy_helper_block_e8_32s40s48s56s64s(id *a1)
{
}

uint64_t dcrtOOBAlreadyPerformed(void *a1, int a2, uint64_t a3)
{
  id v6 = @"DCRTOOBForbidden";
  id v7 = a1;
  id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  if (a2)
  {
    id v9 = @"SDCRTOOBForbidden";

    -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"sdcrtAttestation");
    id v6 = v9;
  }

  id v10 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a3);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  v10,  @"CanonicalizeDcrtOIDs");

  id v11 = data_ark_copy(v7, 0LL, v6);
  unsigned __int8 v12 = copyDCRT(v7, 0LL, 0LL, v8, 0LL);

  if (v12)
  {
    unsigned int v13 = 0;
  }

  else
  {
    id v14 = isNSNumber(v11);
    if (v14) {
      unsigned int v13 = [v11 BOOLValue] ^ 1;
    }
    else {
      unsigned int v13 = 1;
    }
  }

  return v13 ^ 1;
}

uint64_t ucrtOOBAlreadyPerformed(void *a1)
{
  id v1 = a1;
  id v2 = data_ark_copy(v1, 0LL, @"UCRTOOBForbidden");
  SecCertificateRef v3 = copyUCRT(v1, 0LL);

  if (v3)
  {
    CFRelease(v3);
    unsigned int v4 = 0;
  }

  else
  {
    id v5 = isNSNumber(v2);
    if (v5) {
      unsigned int v4 = [v2 BOOLValue] ^ 1;
    }
    else {
      unsigned int v4 = 1;
    }
  }

  return v4 ^ 1;
}

void handle_deactivate(void *a1, int a2)
{
  id v3 = a1;
  if (a2)
  {
    id v4 = copy_activation_records_directory_path();
    delete_an_item(v4);

    id v5 = copy_uik_path();
    delete_an_item(v5);

    id v6 = copy_regulatory_images_directory_path();
    id v7 = [v6 stringByAppendingPathComponent:@"regulatory_images.plist"];
    delete_an_item(v7);

    uint64_t v22 = @"UseSystemKeychainSharediPadOnly";
    id v23 = &__kCFBooleanTrue;
    id v8 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v23,  &v22,  1LL);
    id v21 = 0LL;
    char v9 = delete_identity( @"lockdown-identities",  @"com.apple.lockdown.identity.activation",  v8,  (NSError **)&v21);
    id v10 = v21;
    if ((v9 & 1) == 0) {
      maLog((uint64_t)"handle_deactivate", 0LL, @"Failed to delete device identity: %@", v10);
    }
    id v11 = copy_ucrt_path();
    delete_an_item(v11);

    id v20 = v10;
    char v12 = libaks_system_key_operate(2LL, 1LL, (NSError **)&v20);
    id v13 = v20;

    if ((v12 & 1) == 0)
    {
      id v14 = copyLoggingHandle();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT)) {
        handle_deactivate_cold_2();
      }
    }

    id v19 = v13;
    char v15 = libaks_system_key_operate(2LL, 2LL, (NSError **)&v19);
    id v16 = v19;

    if ((v15 & 1) == 0)
    {
      id v17 = copyLoggingHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT)) {
        handle_deactivate_cold_1();
      }
    }

    data_ark_remove(v3, 0LL, @"UCRTOOBForbidden");
    data_ark_remove(v3, 0LL, @"UCRTOOBForbiddenCount");
    data_ark_remove(v3, 0LL, @"DCRTOOBForbidden");
    data_ark_remove(v3, 0LL, @"DCRTOOBForbiddenCount");
    data_ark_remove(v3, 0LL, @"SDCRTOOBForbidden");
    data_ark_remove(v3, 0LL, @"SDCRTOOBForbiddenCount");
    data_ark_remove(v3, 0LL, @"UCRTHealingRequired");
    data_ark_remove(v3, 0LL, @"UCRTUpgradeRequired");
    data_ark_remove(v3, 0LL, @"UIKUpgradeRequired");
    data_ark_remove(v3, 0LL, @"LastActivated");
    data_ark_remove(v3, 0LL, @"ActivationExpired");
  }

  else
  {
    id v16 = 0LL;
  }

  data_ark_set(v3, 0LL, @"BrickState", &__kCFBooleanTrue, 1);
  data_ark_set(v3, 0LL, @"ActivationState", @"Unactivated", 1);
  xpc_activity_unregister((const char *)[@"com.apple.mobileactivationd.factoryactivation" UTF8String]);
  uint64_t v18 = (void *)gFactoryActivationTransaction;
  gFactoryActivationTransaction = 0LL;
}

NSMutableDictionary *load_activation_records(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v3 = data_ark_copy(v1, 0LL, @"ActivationState");
  if ([v3 isEqualToString:@"FactoryActivated"])
  {
    id v4 = data_ark_copy(v1, 0LL, @"FactoryActivationRecord");
    if (v4) {
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v4, @"DEFAULT_RECORD");
    }
    id v5 = 0LL;
    id v6 = 0LL;
    id v7 = 0LL;
    if (!v2) {
      goto LABEL_36;
    }
LABEL_34:
    if (!-[NSMutableDictionary count](v2, "count"))
    {

      id v2 = 0LL;
    }

    goto LABEL_36;
  }

  BOOL v48 = v2;
  id v47 = v3;
  id v8 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
  id v9 = copy_activation_records_directory_path();
  id v10 = +[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v9);
  NSURLResourceKey v57 = NSURLIsRegularFileKey;
  id v11 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v57, 1LL);
  char v12 =  -[NSFileManager enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:]( v8,  "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:",  v10,  v11,  0LL,  &__block_literal_global_230);

  __int128 v54 = 0u;
  __int128 v55 = 0u;
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  id obj = v12;
  id v13 = -[NSDirectoryEnumerator countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v52,  v56,  16LL);
  if (v13)
  {
    id v14 = v13;
    id v46 = v1;
    id v5 = 0LL;
    id v6 = 0LL;
    id v7 = 0LL;
    id v15 = 0LL;
    uint64_t v16 = *(void *)v53;
    NSURLResourceKey v17 = NSURLIsRegularFileKey;
    do
    {
      uint64_t v18 = 0LL;
      id v49 = v14;
      do
      {
        id v19 = v15;
        if (*(void *)v53 != v16) {
          objc_enumerationMutation(obj);
        }
        id v20 = *(void **)(*((void *)&v52 + 1) + 8LL * (void)v18);
        id v51 = 0LL;
        [v20 getResourceValue:&v51 forKey:v17 error:0];
        id v15 = v51;

        if ([v15 BOOLValue])
        {
          id v21 = (NSMutableDictionary *)[v20 path];
          uint64_t v22 = load_dict(v21);

          if (v22)
          {
            id v23 =  -[NSMutableDictionary objectForKeyedSubscript:]( v22,  "objectForKeyedSubscript:",  @"LDActivationVersion");
            id v24 = isNSNumber(v23);

            if (v24 && (uint64_t)[v24 integerValue] <= 1)
            {
              maLog((uint64_t)"load_activation_records", 0LL, @"Deleting out-of-date activation record");
              id v25 = [v20 path];
              delete_an_item(v25);
            }

            else
            {
              uint64_t v26 = v6;
              id v27 = [v20 path];
              id v28 = [v27 lastPathComponent];
              unsigned __int8 v29 = [v28 isEqualToString:@"activation_record.plist"];

              uint64_t v30 = @"DEFAULT_RECORD";
              if ((v29 & 1) != 0) {
                goto LABEL_21;
              }
              id v31 = [v20 path];
              id v32 = [v31 lastPathComponent];
              unsigned __int8 v33 = [v32 isEqualToString:@"pod_record.plist"];

              uint64_t v30 = @"POD_RECORD";
              if ((v33 & 1) != 0) {
                goto LABEL_21;
              }
              id v34 = [v20 path];
              id v35 = [v34 lastPathComponent];
              unsigned __int8 v36 = [v35 isEqualToString:@"unlock_record.plist"];

              uint64_t v30 = @"UNLOCK_RECORD";
              if ((v36 & 1) != 0) {
                goto LABEL_21;
              }
              id v37 = [v20 path];
              id v38 = [v37 lastPathComponent];
              unsigned __int8 v39 = [v38 isEqualToString:@"wildcard_record.plist"];

              uint64_t v30 = @"WILDCARD_RECORD";
              if ((v39 & 1) != 0
                || (id v40 = [v20 path],
                    id v41 = [v40 lastPathComponent],
                    unsigned int v42 = [v41 isEqualToString:@"care_flag.plist"],
                    v41,
                    v40,
                    uint64_t v30 = @"CARE_FLAG_RECORD",
                    v42))
              {
LABEL_21:
                id v6 = v30;
              }

              else
              {
                id v6 = v26;
              }

              NSURLResourceKey v17 = NSURLIsRegularFileKey;
              if (v6) {
                -[NSMutableDictionary setObject:forKey:](v48, "setObject:forKey:", v22, v6);
              }
            }

            id v5 = v22;
            id v7 = v24;
          }

          else
          {
            maLog((uint64_t)"load_activation_records", 0LL, @"Could not load %@", v20);
            id v5 = 0LL;
          }

          id v14 = v49;
        }

        uint64_t v18 = (char *)v18 + 1;
      }

      while (v14 != v18);
      id v43 = -[NSDirectoryEnumerator countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v52,  v56,  16LL);
      id v14 = v43;
    }

    while (v43);

    id v1 = v46;
  }

  else
  {
    id v5 = 0LL;
    id v6 = 0LL;
    id v7 = 0LL;
  }

  id v4 = 0LL;
  id v3 = v47;
  id v2 = v48;
  if (v48) {
    goto LABEL_34;
  }
LABEL_36:
  uint64_t v44 = v2;

  return v44;
}

BOOL __load_activation_records_block_invoke(id a1, NSURL *a2, NSError *a3)
{
  return 1;
}

void delete_an_item(void *a1)
{
  id v1 = a1;
  id v2 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
  unsigned int v3 = -[NSFileManager fileExistsAtPath:](v2, "fileExistsAtPath:", v1);

  if (v3)
  {
    id v4 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
    id v7 = 0LL;
    unsigned __int8 v5 = -[NSFileManager removeItemAtPath:error:](v4, "removeItemAtPath:error:", v1, &v7);
    id v6 = v7;

    if ((v5 & 1) != 0) {
      maLog((uint64_t)"delete_an_item", 0LL, @"Successfully deleted %@", v1);
    }
    else {
      maLog((uint64_t)"delete_an_item", 0LL, @"Failed to delete %@: %@", v1, v6);
    }
  }
}

uint64_t verify_activation_record_certificates(void *a1, void *a2, void *a3, NSError **a4)
{
  id v6 = a1;
  id v7 = a2;
  id v8 = a3;
  id v9 = v8;
  if (v8)
  {
    id v10 = [v8 objectForKeyedSubscript:@"UseFactoryCertificates"];
    id v11 = isNSNumber(v10);

    if (v11)
    {
      id v12 = [v9 objectForKeyedSubscript:@"UseFactoryCertificates"];
      unsigned int v13 = [v12 BOOLValue];
    }

    else
    {
      unsigned int v13 = 0;
    }

    id v16 = [v9 objectForKeyedSubscript:@"UseQACertificates"];
    id v17 = isNSNumber(v16);

    if (v17)
    {
      id v18 = [v9 objectForKeyedSubscript:@"UseQACertificates"];
      int v14 = [v18 BOOLValue];
    }

    else
    {
      int v14 = 0;
    }

    id v19 = [v9 objectForKeyedSubscript:@"UseCommittedUIK"];
    id v20 = isNSNumber(v19);

    if (v20)
    {
      id v21 = [v9 objectForKeyedSubscript:@"UseCommittedUIK"];
      unsigned int v15 = [v21 BOOLValue];
    }

    else
    {
      unsigned int v15 = 0;
    }

    id v22 = [v9 objectForKeyedSubscript:@"UseEnhancedValidation"];
    id v23 = isNSNumber(v22);

    if (v23)
    {
      id v24 = [v9 objectForKeyedSubscript:@"UseEnhancedValidation"];
      unsigned int v25 = [v24 BOOLValue];

      goto LABEL_15;
    }
  }

  else
  {
    unsigned int v13 = 0;
    int v14 = 0;
    unsigned int v15 = 0;
  }

  unsigned int v25 = 0;
LABEL_15:
  id v26 = [v7 objectForKeyedSubscript:@"UniqueDeviceCertificate"];
  id v84 = v7;
  id v85 = v6;
  id v83 = v26;
  if (!v26)
  {
    unsigned __int8 v33 = 0LL;
    uint64_t v89 = 0LL;
    goto LABEL_27;
  }

  id v27 = v26;
  id v28 = isNSData(v26);

  if (!v28)
  {
    id v49 =  createMobileActivationError( (uint64_t)"verify_activation_record_certificates",  3699LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid value for UCRT.");
LABEL_49:
    id v80 = 0LL;
    SecCertificateRef v41 = 0LL;
    id v45 = 0LL;
    CFTypeRef cf = 0LL;
    uint64_t v89 = 0LL;
LABEL_57:
    SecKeyRef public_with_intermediate = 0LL;
    id v88 = 0LL;
    id v47 = 0LL;
    id v78 = 0LL;
LABEL_58:
    id v77 = 0LL;
    SecKeyRef v82 = 0LL;
    id v86 = 0LL;
LABEL_59:
    id v62 = 0LL;
LABEL_60:
    unsigned __int8 v39 = 0LL;
    goto LABEL_61;
  }

  uint64_t v104 = 0LL;
  unsigned __int8 v29 = lockcrypto_cert_from_pem_data(v27, &v104);
  uint64_t v30 = v104;
  uint64_t v89 = v29;
  if (!v29)
  {
    id v49 =  createMobileActivationError( (uint64_t)"verify_activation_record_certificates",  3705LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v30,  @"Failed to create certificate from pem data.");

    goto LABEL_49;
  }

  if (v25)
  {
    if (v15) {
      uint64_t v31 = 2LL;
    }
    else {
      uint64_t v31 = 3LL;
    }
    uint64_t v103 = v30;
    char v32 = certificatePublicKeyMatchesSystemPublicKey(v31, 2LL, v29, &v103);
    unsigned __int8 v33 = v103;

    if ((v32 & 1) == 0)
    {
      unsigned __int8 v36 = @"UCRT public key does not match UIK public key.";
      uint64_t v37 = 3711LL;
      goto LABEL_54;
    }

    uint64_t v30 = v33;
  }

  uint64_t v102 = v30;
  char v34 = verify_ucrt(v27, v9, &v102);
  unsigned __int8 v33 = v102;

  if ((v34 & 1) == 0)
  {
    writeSplunkLog(v6, 5LL, -1LL, (uint64_t)"verify_activation_record_certificates", 3717, 0LL, 0LL, v35, v74);
    unsigned __int8 v36 = @"Failed to verify UCRT.";
    uint64_t v37 = 3718LL;
LABEL_54:
    MobileActivationError = createMobileActivationError( (uint64_t)"verify_activation_record_certificates",  v37,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v33,  v36);
    goto LABEL_55;
  }

LABEL_61:
  uint64_t v64 = v47;
  if (a4)
  {
    id v49 = v49;
    uint64_t v65 = 0LL;
    *a4 = v49;
    if (!v41) {
      goto LABEL_64;
    }
    goto LABEL_63;
  }

  uint64_t v65 = 0LL;
  if (v41) {
    goto LABEL_63;
  }
LABEL_64:
  if (v45) {
    CFRelease(v45);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v88) {
    CFRelease(v88);
  }
  if (v64) {
    CFRelease(v64);
  }
  if (v89) {
    CFRelease(v89);
  }

  return v65;
}

  id v56 = [v3 objectForKeyedSubscript:@"CertType"];
  NSURLResourceKey v57 = isNSNumber(v56);

  if (v57)
  {
    id v58 = (NSNumber *)[v3 objectForKeyedSubscript:@"CertType"];

    char v59 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 0LL);
    if (-[NSNumber isEqualToNumber:](v58, "isEqualToNumber:", v59))
    {
LABEL_65:

      goto LABEL_67;
    }

    id v60 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 1LL);
    if (-[NSNumber isEqualToNumber:](v58, "isEqualToNumber:", v60))
    {

      goto LABEL_65;
    }

    v184 = v20;
    uint64_t v68 = v19;
    id v69 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 2LL);
    char v70 = -[NSNumber isEqualToNumber:](v58, "isEqualToNumber:", v69);

    if ((v70 & 1) == 0)
    {
      v201 = v58;
      MobileActivationError = createMobileActivationError( (uint64_t)"create_baa_info",  305LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid value for option (%@): %@",  @"CertType",  v58);
      goto LABEL_112;
    }

    id v19 = v68;
    id v20 = v184;
  }

  else
  {
    id v58 = v201;
  }

uint64_t verify_activation_record(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v63 = a1;
  id v7 = a2;
  id v8 = a3;
  id v9 = isNSDictionary(v7);

  if (!v9)
  {
    maLog((uint64_t)"verify_activation_record", 0LL, @"activation record is invalid");
    int v14 = 0LL;
    id v15 = 0LL;
    id v66 = 0LL;
    id v67 = 0LL;
    id v16 = 0LL;
    unint64_t v17 = 0LL;
    unint64_t v18 = 0LL;
    unint64_t v64 = 0LL;
    id v65 = 0LL;
    id v19 = 0LL;
    unint64_t v62 = 0LL;
    if (!a4) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }

  uint64_t v61 = a4;
  if (v8)
  {
    id v10 = [v8 objectForKeyedSubscript:@"UseFactoryCertificates"];
    id v11 = isNSNumber(v10);

    if (v11)
    {
      id v12 = [v8 objectForKeyedSubscript:@"UseFactoryCertificates"];
      unsigned int v13 = [v12 BOOLValue];
    }

    else
    {
      unsigned int v13 = 0;
    }

    id v20 = [v8 objectForKeyedSubscript:@"UseEnhancedValidation"];
    id v21 = isNSNumber(v20);

    if (v21)
    {
      id v22 = [v8 objectForKeyedSubscript:@"UseEnhancedValidation"];
      unsigned int v23 = [v22 BOOLValue];

      goto LABEL_12;
    }
  }

  else
  {
    unsigned int v13 = 0;
  }

  unsigned int v23 = 0;
LABEL_12:
  id v69 = 0LL;
  id v15 = extract_account_token(v7, &v69);
  id v24 = v69;
  if (!v15)
  {
    int v14 =  createMobileActivationError( (uint64_t)"verify_activation_record",  3940LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v24,  @"Failed to retrieve account token.");

    id v66 = 0LL;
    id v67 = 0LL;
    id v16 = 0LL;
    unint64_t v17 = 0LL;
    unint64_t v18 = 0LL;
    unint64_t v64 = 0LL;
    id v65 = 0LL;
    id v19 = 0LL;
    id v9 = 0LL;
    unint64_t v62 = 0LL;
    goto LABEL_25;
  }

  id v25 = [v8 objectForKeyedSubscript:@"ActivationRandomness"];
  id v26 = isNSString(v25);

  id v60 = v24;
  unsigned int v56 = v13;
  unsigned int v57 = v23;
  if (v26) {
    id v66 = [v8 objectForKeyedSubscript:@"ActivationRandomness"];
  }
  else {
    id v66 = 0LL;
  }
  id v27 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v28 = [v27 copyAnswer:@"SerialNumber"];

  id v29 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v16 = [v29 copyAnswer:@"UniqueDeviceID"];

  id v65 = [v15 objectForKeyedSubscript:@"ActivationRandomness"];
  id v19 = [v15 objectForKeyedSubscript:@"SerialNumber"];
  id v9 = [v15 objectForKeyedSubscript:@"UniqueDeviceID"];
  unint64_t v64 = (unint64_t)[v15 objectForKeyedSubscript:@"MobileEquipmentIdentifier"];
  unint64_t v62 = (unint64_t)[v15 objectForKeyedSubscript:@"InternationalMobileEquipmentIdentity"];
  id v67 = v28;
  id v30 = isNSString(v28);
  if (v30
    && (v31 = v30, id v32 = isNSString(v19), v32, v31, v32))
  {
    unsigned int v33 = [v28 isEqualToString:v19] ^ 1;
  }

  else
  {
    unsigned int v33 = 1;
  }

  id v34 = isNSString(v16);
  if (!v34
    || (uint64_t v35 = v34, v36 = isNSString(v9), v36, v35, !v36)
    || (v33 | [v16 isEqualToString:v9] ^ 1) == 1)
  {
    int v14 =  createMobileActivationError( (uint64_t)"verify_activation_record",  3973LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid Serial/UDID.");

    unint64_t v17 = 0LL;
    unint64_t v18 = 0LL;
    goto LABEL_25;
  }

  if (!v57)
  {
    unint64_t v17 = 0LL;
    unint64_t v18 = 0LL;
    goto LABEL_53;
  }

  id v39 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  unint64_t v17 = (unint64_t)[v39 copyAnswer:@"MobileEquipmentIdentifier"];

  id v40 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  unint64_t v18 = (unint64_t)[v40 copyAnswer:@"InternationalMobileEquipmentIdentity"];

  if (v18 | v62)
  {
    id v41 = isNSString((void *)v18);
    if (v41
      && (unsigned int v42 = v41,
          id v43 = isNSString((void *)v62),
          v43,
          v42,
          v43))
    {
      unsigned int v44 = [(id)v18 isEqualToString:v62] ^ 1;
    }

    else
    {
      unsigned int v44 = 1;
    }

    unsigned int v58 = v44;
  }

  else
  {
    unsigned int v58 = 0;
  }

  a4 = v61;
  if (v17 | v64)
  {
    id v45 = isNSString((void *)v17);
    if (v45)
    {
      id v46 = v45;
      id v47 = isNSString((void *)v64);

      if (v47) {
        unsigned int v48 = [(id)v17 isEqualToString:v64] ^ 1;
      }
      else {
        unsigned int v48 = 1;
      }
      int v55 = v48;
      a4 = v61;
    }

    else
    {
      int v55 = 1;
    }
  }

  else
  {
    int v55 = 0;
  }

  id v49 = isNSString(v66);
  if (!v49) {
    goto LABEL_49;
  }
  id v50 = v49;
  id v51 = isNSString(v65);

  if (!v51)
  {
    LODWORD(v49) = 0;
    a4 = v61;
LABEL_49:
    id v52 = v65;
    goto LABEL_50;
  }

  id v52 = v65;
  LODWORD(v49) = [v66 isEqualToString:v65];
  a4 = v61;
LABEL_50:
  if (((v56 | v49) & 1) == 0)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"verify_activation_record",  4017LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid Randomness (actual, expected): %@, %@",  v52,  v66);
LABEL_57:
    int v14 = MobileActivationError;

    if (!a4) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }

  if ((v58 | v55) == 1)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"verify_activation_record",  4023LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid IMEI/MEID.");
    goto LABEL_57;
  }

id extract_account_token(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = isNSDictionary(v3);

  if (!v4)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"extract_account_token",  350LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
LABEL_7:
    id v7 = MobileActivationError;
    id v6 = 0LL;
    goto LABEL_8;
  }

  id v5 = [v3 objectForKeyedSubscript:@"AccountToken"];
  id v4 = isNSData(v5);

  if (!v4)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"extract_account_token",  356LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Activation record is missing the account token XML.");
    goto LABEL_7;
  }

  id v12 = 0LL;
  id v6 =  +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v4,  0LL,  0LL,  &v12);
  id v7 = (NSError *)v12;
  id v8 = isNSDictionary(v6);

  if (!v8)
  {
    id v9 =  createMobileActivationError( (uint64_t)"extract_account_token",  362LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v7,  @"Failed to serialize data.");

    id v6 = 0LL;
    id v7 = v9;
  }

uint64_t handle_activate(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v119 = v9;
  id v120 = v8;
  if (!v7 || !v8)
  {
    id v21 =  createMobileActivationError( (uint64_t)"handle_activate",  4076LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
    id v127 = 0LL;
    id v128 = 0LL;
    id v22 = 0LL;
    char v124 = 0LL;
    uint64_t v126 = 0LL;
    id v23 = 0LL;
    id v116 = 0LL;
    id v117 = 0LL;
    id v121 = 0LL;
    BOOL v123 = 0LL;
    SecCertificateRef v118 = 0LL;
    uint64_t v114 = 0LL;
    id v115 = 0LL;
LABEL_11:
    id v12 = 0LL;
    id v24 = 0LL;
    id v25 = 0LL;
    SecCertificateRef v14 = 0LL;
    goto LABEL_82;
  }

  id v10 = v9;
  id v113 = v7;
  id v11 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v12 = (NSDate *)v11;
  if (!v11)
  {
    id v21 =  createMobileActivationError( (uint64_t)"handle_activate",  4082LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate dictionary.");
    id v127 = 0LL;
    id v128 = 0LL;
    id v22 = 0LL;
    char v124 = 0LL;
    uint64_t v126 = 0LL;
    id v23 = 0LL;
    id v116 = 0LL;
    id v117 = 0LL;
    id v121 = 0LL;
    BOOL v123 = 0LL;
    SecCertificateRef v118 = 0LL;
    uint64_t v114 = 0LL;
    id v115 = 0LL;
    id v24 = 0LL;
    id v25 = 0LL;
    SecCertificateRef v14 = 0LL;
    goto LABEL_34;
  }

  if (v10) {
    -[NSMutableDictionary addEntriesFromDictionary:](v11, "addEntriesFromDictionary:", v10);
  }
  id v13 = [v8 objectForKeyedSubscript:@"ActivationRecord"];
  SecCertificateRef v14 = (SecCertificateRef)isNSDictionary(v13);

  uint64_t v126 = v12;
  if (!v14)
  {
    id v128 = v13;
    id v21 =  createMobileActivationError( (uint64_t)"handle_activate",  4092LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Message does not contain a valid activation record.");
    id v127 = 0LL;
    id v22 = 0LL;
    BOOL v123 = 0LL;
    char v124 = 0LL;
    id v23 = 0LL;
    id v116 = 0LL;
    id v117 = 0LL;
    id v121 = 0LL;
    SecCertificateRef v118 = 0LL;
    uint64_t v114 = 0LL;
    id v115 = 0LL;
    id v12 = 0LL;
    id v24 = 0LL;
    id v25 = 0LL;
    goto LABEL_34;
  }

  if (is_internal_build())
  {
    id v15 = objc_alloc(&OBJC_CLASS___NSUserDefaults);
    id v16 =  -[NSUserDefaults persistentDomainForName:]( v15,  "persistentDomainForName:",  @"com.apple.mobileactivationd");

    id v17 = -[NSDictionary objectForKeyedSubscript:](v16, "objectForKeyedSubscript:", @"UseQACertificates");
    id v18 = isNSNumber(v17);

    if (v18)
    {
      id v19 = -[NSDictionary objectForKeyedSubscript:](v16, "objectForKeyedSubscript:", @"UseQACertificates");
      id v20 = [v19 BOOLValue];
    }

    else
    {
      id v20 = 0LL;
    }

    id v26 = -[NSDictionary objectForKeyedSubscript:](v16, "objectForKeyedSubscript:", @"DSPExpirationDate");
    id v27 = isNSString(v26);

    if (v27) {
      BOOL v123 = (__CFString *) -[NSDictionary objectForKeyedSubscript:]( v16,  "objectForKeyedSubscript:",  @"DSPExpirationDate");
    }
    else {
      BOOL v123 = 0LL;
    }
  }

  else
  {
    id v16 = 0LL;
    BOOL v123 = 0LL;
    id v20 = 0LL;
  }

  SecCertificateRef v118 = v16;
  id v28 = -[NSDate objectForKeyedSubscript:](v12, "objectForKeyedSubscript:", @"UseFactoryCertificates");
  id v29 = isNSNumber(v28);
  uint64_t v112 = a4;
  if (v29)
  {
    id v30 = v29;
    uint64_t v31 = v12;
    id v32 = -[NSDate objectForKeyedSubscript:](v12, "objectForKeyedSubscript:", @"UseFactoryCertificates");
    unsigned int v33 = [v32 BOOLValue];

    if (v33)
    {
      -[NSDate setObject:forKeyedSubscript:]( v31,  "setObject:forKeyedSubscript:",  &__kCFBooleanFalse,  @"UseQACertificates");
      -[NSDate setObject:forKeyedSubscript:]( v31,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"UseEnhancedValidation");
      -[NSDate setObject:forKeyedSubscript:]( v31,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"UseEnhancedValidationWithVersionCheck");
      id v143 = 0LL;
      char v34 = verify_activation_record(v113, v13, v31, (uint64_t)&v143);
      id v21 = (NSError *)v143;
      if ((v34 & 1) == 0)
      {
        uint64_t v35 =  createMobileActivationError( (uint64_t)"handle_activate",  4119LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v21,  @"Failed to validate activation record with factory certificates.");

        if (is_internal_build() && is_virtual_machine())
        {
          -[NSDate setObject:forKeyedSubscript:]( v126,  "setObject:forKeyedSubscript:",  &__kCFBooleanFalse,  @"UseFactoryCertificates");
          id v36 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v20);
          -[NSDate setObject:forKeyedSubscript:](v126, "setObject:forKeyedSubscript:", v36, @"UseQACertificates");

          int v142 = v35;
          char v37 = verify_activation_record(v113, v13, v126, (uint64_t)&v142);
          uint64_t v38 = v142;

          if ((v37 & 1) == 0)
          {
            id v128 = v13;
            id v21 =  createMobileActivationError( (uint64_t)"handle_activate",  4130LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v38,  @"Failed to validate activation record with production certificates.");

            id v127 = 0LL;
            id v22 = 0LL;
            char v124 = 0LL;
            id v23 = 0LL;
            id v116 = 0LL;
            id v117 = 0LL;
            id v121 = 0LL;
            uint64_t v114 = 0LL;
            id v115 = 0LL;
            id v12 = 0LL;
            id v24 = 0LL;
            id v25 = 0LL;
            SecCertificateRef v14 = 0LL;
LABEL_80:
            id v7 = v113;
            goto LABEL_81;
          }

          id v39 = 0LL;
          int v40 = 0;
          a4 = v112;
          goto LABEL_36;
        }

        id v21 = v35;
      }

      id v39 = 0LL;
      a4 = v112;
      if (!v21)
      {
        int v40 = 1;
        goto LABEL_36;
      }

      id v127 = 0LL;
      id v128 = v13;
      id v22 = 0LL;
      char v124 = 0LL;
      id v23 = 0LL;
      id v116 = 0LL;
      id v117 = 0LL;
      id v121 = 0LL;
      uint64_t v114 = 0LL;
      id v115 = 0LL;
      id v12 = 0LL;
      id v24 = 0LL;
      id v25 = 0LL;
      SecCertificateRef v14 = 0LL;
LABEL_34:
      id v7 = v113;
      goto LABEL_82;
    }

    id v12 = v31;
    a4 = v112;
  }

  else
  {
  }

  -[NSDate setObject:forKeyedSubscript:]( v12,  "setObject:forKeyedSubscript:",  &__kCFBooleanFalse,  @"UseFactoryCertificates");
  id v41 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v20);
  -[NSDate setObject:forKeyedSubscript:](v12, "setObject:forKeyedSubscript:", v41, @"UseQACertificates");

  -[NSDate setObject:forKeyedSubscript:]( v12,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"UseEnhancedValidation");
  -[NSDate setObject:forKeyedSubscript:]( v12,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"UseEnhancedValidationWithVersionCheck");
  id v141 = 0LL;
  LOBYTE(v41) = verify_activation_record(v113, v13, v12, (uint64_t)&v141);
  id v39 = (NSError *)v141;
  if ((v41 & 1) == 0)
  {
    id v128 = v13;
    id v21 =  createMobileActivationError( (uint64_t)"handle_activate",  4151LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v39,  @"Failed to validate activation record with production certificates.");
    unsigned int v42 = v39;
LABEL_50:

    id v127 = 0LL;
    id v22 = 0LL;
    char v124 = 0LL;
    id v23 = 0LL;
    id v116 = 0LL;
    id v117 = 0LL;
    id v121 = 0LL;
    uint64_t v114 = 0LL;
    id v115 = 0LL;
    id v12 = 0LL;
    id v24 = 0LL;
    id v25 = 0LL;
    SecCertificateRef v14 = 0LL;
    id v7 = v113;
    goto LABEL_82;
  }

  int v40 = 0;
LABEL_36:
  id v43 = v39;
  uint64_t v140 = v39;
  id v44 = extract_account_token(v13, &v140);
  id v45 = v140;

  if (!v44)
  {
    id v128 = v13;
    id v21 =  createMobileActivationError( (uint64_t)"handle_activate",  4159LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v45,  @"Failed to retrieve account token.");
    unsigned int v42 = v45;
    goto LABEL_50;
  }

  int v110 = v40;
  id v111 = v113;
  id v46 = v13;
  id v47 = v46;
  id v127 = v44;
  id v128 = v46;
  if (!v46)
  {
    unint64_t v64 =  createMobileActivationError( (uint64_t)"store_regulatory_images",  241LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid input.");
    unsigned int v57 = 0LL;
    unint64_t v49 = 0LL;
    unint64_t v51 = 0LL;
LABEL_55:
    id v59 = 0LL;
LABEL_63:
    id v63 = v64;
    char v62 = 0;
    uint64_t v61 = v63;
    id v56 = v47;
    goto LABEL_64;
  }

  id v48 = [v46 objectForKeyedSubscript:@"RegulatoryImages"];
  unint64_t v49 = (unint64_t)isNSArray(v48);

  id v50 = [v47 objectForKeyedSubscript:@"RegulatoryInfo"];
  unint64_t v51 = (unint64_t)isNSData(v50);

  if (!(v49 | v51))
  {
    uint64_t v61 = 0LL;
    id v59 = 0LL;
    unint64_t v51 = 0LL;
    unint64_t v49 = 0LL;
    unsigned int v57 = 0LL;
    id v56 = 0LL;
    char v62 = 1;
    id v63 = v45;
    goto LABEL_65;
  }

  id v47 = copy_regulatory_images_directory_path();
  if (!v47)
  {
    unint64_t v64 =  createMobileActivationError( (uint64_t)"store_regulatory_images",  251LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve regulatory images path.");
    unsigned int v57 = 0LL;
    goto LABEL_55;
  }

  id v125 = (id)v49;
  id v52 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
  NSFileAttributeKey v148 = NSFilePosixPermissions;
  id v149 = &off_10026D560;
  __int128 v53 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v149,  &v148,  1LL);
  id v145 = 0LL;
  unsigned __int8 v54 = -[NSFileManager createDirectoryAtPath:withIntermediateDirectories:attributes:error:]( v52,  "createDirectoryAtPath:withIntermediateDirectories:attributes:error:",  v47,  1LL,  v53,  &v145);
  int v55 = (NSError *)v145;

  if ((v54 & 1) == 0)
  {
    unint64_t v64 =  createMobileActivationError( (uint64_t)"store_regulatory_images",  256LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v55,  @"Failed to create %@.",  v47);

    unsigned int v57 = 0LL;
    id v59 = 0LL;
LABEL_59:
    unint64_t v49 = (unint64_t)v125;
    goto LABEL_63;
  }

  uint64_t v122 = v55;
  id v56 = [v47 stringByAppendingPathComponent:@"regulatory_images.plist"];

  unsigned int v57 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  if (!v57)
  {
    unint64_t v64 =  createMobileActivationError( (uint64_t)"store_regulatory_images",  264LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create dictionary.");

    id v59 = 0LL;
    id v47 = v56;
    goto LABEL_59;
  }

  id v58 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v59 = [v58 copyAnswer:@"ProductVersion"];

  unint64_t v49 = (unint64_t)v125;
  if (!v59)
  {
    unint64_t v64 =  createMobileActivationError( (uint64_t)"store_regulatory_images",  270LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve product version.");
    id v65 = v122;
LABEL_62:

    id v47 = v56;
    goto LABEL_63;
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:](v57, "setObject:forKeyedSubscript:", v59, @"ProductVersion");
  if (v125) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v57,  "setObject:forKeyedSubscript:",  v125,  @"RegulatoryImages");
  }
  if (v51) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v57,  "setObject:forKeyedSubscript:",  v51,  @"RegulatoryInfo");
  }
  id v144 = v122;
  char v60 = store_dict(v56, v57, &v144);
  uint64_t v61 = v144;

  if ((v60 & 1) == 0)
  {
    unint64_t v64 =  createMobileActivationError( (uint64_t)"store_regulatory_images",  285LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v61,  @"Failed to store regulatory images at %@.",  v56);
    id v65 = v61;
    goto LABEL_62;
  }

  char v62 = 1;
  id v63 = v45;
LABEL_64:
  id v47 = v128;
LABEL_65:

  id v21 = v63;
  if ((v62 & 1) == 0)
  {
    id v78 =  createMobileActivationError( (uint64_t)"handle_activate",  4165LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v21,  @"Failed to store regulatory images.");

    id v22 = 0LL;
    char v124 = 0LL;
    id v23 = 0LL;
    id v116 = 0LL;
    id v117 = 0LL;
    id v121 = 0LL;
    uint64_t v114 = 0LL;
    id v115 = 0LL;
    id v12 = 0LL;
    id v24 = 0LL;
    id v25 = 0LL;
    SecCertificateRef v14 = 0LL;
    id v21 = v78;
    goto LABEL_80;
  }

  if (v110) {
    id v66 = @"FactoryActivated";
  }
  else {
    id v66 = @"Activated";
  }
  id v67 = v66;
  a4 = v112;
  char v124 = v67;
  if (-[__CFString isEqualToString:](v67, "isEqualToString:", @"FactoryActivated"))
  {
    id v7 = v113;
    if (!is_product_cellular())
    {
LABEL_73:
      data_ark_remove(v111, 0LL, @"LastActivated");
      uint64_t v70 = os_transaction_create([@"com.apple.mobileactivationd.factoryactivation" UTF8String]);
      uint64_t v71 = (void *)gFactoryActivationTransaction;
      gFactoryActivationTransaction = v70;

      id v72 = (const char *)[@"com.apple.mobileactivationd.factoryactivation" UTF8String];
      v137[0] = _NSConcreteStackBlock;
      v137[1] = 3254779904LL;
      v137[2] = __handle_activate_block_invoke;
      v137[3] = &__block_descriptor_40_e8_32s_e17_v16__0__DataArk_8l;
      id v138 = v111;
      scheduleXPCActivity(v138, v72, 0x5460u, 0, 0, 0, v137);

      id v116 = 0LL;
      id v117 = 0LL;
      id v121 = 0LL;
      uint64_t v114 = 0LL;
      id v115 = 0LL;
      id v12 = 0LL;
      id v24 = 0LL;
      id v25 = 0LL;
      SecCertificateRef v14 = 0LL;
LABEL_74:
      id v73 = [v128 objectForKeyedSubscript:@"FairPlayKeyData"];
      id v22 = isNSData(v73);

      if (!v22)
      {
LABEL_77:
        id v76 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
        id v23 = [v76 copyAnswer:@"BuildVersion"];

        id v77 = isNSString(v23);
        if (v77)
        {
          data_ark_set(v111, 0LL, @"ActivationState", v124, v110 ^ 1);
          data_ark_set(v111, 0LL, @"LastActivated", v23, v110 ^ 1);
          data_ark_set(v111, 0LL, @"BrickState", &__kCFBooleanFalse, v110 ^ 1);
          a4 = 1LL;
          goto LABEL_84;
        }

        uint64_t v104 =  createMobileActivationError( (uint64_t)"handle_activate",  4360LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve build version.");

        goto LABEL_115;
      }

      id v129 = v21;
      char v74 = store_fairplay_blob(v111, v22, (NSError **)&v129);
      int v75 = (NSError *)v129;

      if ((v74 & 1) != 0)
      {
        id v21 = v75;
        goto LABEL_77;
      }

      id v21 =  createMobileActivationError( (uint64_t)"handle_activate",  4348LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v75,  @"Failed to store fairplay blob.");

      id v23 = 0LL;
LABEL_81:
      a4 = v112;
      goto LABEL_82;
    }

    data_ark_set(v111, 0LL, @"FactoryActivationRecord", v47, 0);
    unint64_t v139 = v21;
    char v68 = deliver_baseband_ticket((int)v111, v127, v67, &v139);
    id v69 = v139;

    if ((v68 & 1) != 0)
    {
      id v21 = v69;
      goto LABEL_73;
    }

    id v101 = @"Failed to deliver baseband ticket.";
    uint64_t v102 = 4182LL;
    goto LABEL_112;
  }

  id v136 = v21;
  BOOL v83 = send_activation_record_to_mc(v47, (NSError **)&v136);
  id v69 = (NSError *)v136;

  id v7 = v113;
  if (!v83
    && (!os_variant_is_darwinos([@"com.apple.mobileactivationd" UTF8String])
     || (mobileactivationErrorHasDomainAndErrorCode( v69,  @"com.apple.MobileActivation.ErrorDomain",  (id)0xFFFFFFFFFFFFFFFDLL) & 1) == 0))
  {
    id v101 = @"Failed to send activation record to managed configuration.";
    uint64_t v102 = 4212LL;
LABEL_112:
    uint64_t v103 = v69;
LABEL_117:
    id v21 =  createMobileActivationError( (uint64_t)"handle_activate",  v102,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v103,  v101);
    uint64_t v105 = v69;
LABEL_118:

    id v22 = 0LL;
    id v23 = 0LL;
    id v116 = 0LL;
    id v117 = 0LL;
    id v121 = 0LL;
    id v115 = 0LL;
LABEL_119:
    uint64_t v114 = 0LL;
    id v12 = 0LL;
LABEL_120:
    id v24 = 0LL;
    id v25 = 0LL;
    SecCertificateRef v14 = 0LL;
    goto LABEL_82;
  }

  if (is_product_cellular())
  {
    id v135 = v69;
    char v84 = deliver_baseband_ticket((int)v111, v127, v67, &v135);
    id v85 = (NSError *)v135;

    if ((v84 & 1) == 0)
    {
      id v21 =  createMobileActivationError( (uint64_t)"handle_activate",  4228LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v85,  @"Failed to deliver baseband ticket.");
      uint64_t v105 = v85;
      goto LABEL_118;
    }

    id v69 = v85;
  }

  if (!is_product_audio_accessory())
  {
    if (!getMSDKManagedDeviceClass()
      || (id v86 = [getMSDKManagedDeviceClass() sharedInstance],
          unsigned __int8 v87 = [v86 clearOwnershipWarning],
          v86,
          (v87 & 1) == 0))
    {
      id v101 = @"Failed to update demo device ownership warning.";
      uint64_t v102 = 4235LL;
      uint64_t v103 = 0LL;
      goto LABEL_117;
    }
  }

  id v88 = [v47 objectForKeyedSubscript:@"DeviceCertificate"];
  id v12 = (NSDate *)isNSData(v88);

  if (!v12)
  {
    id v21 =  createMobileActivationError( (uint64_t)"handle_activate",  4244LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Activation record does not contain device certificate.");

    id v22 = 0LL;
    id v23 = 0LL;
    id v116 = 0LL;
    id v117 = 0LL;
    id v121 = 0LL;
    uint64_t v114 = 0LL;
    id v115 = 0LL;
    goto LABEL_120;
  }

  unint64_t v146 = @"UseSystemKeychainSharediPadOnly";
  id v147 = &__kCFBooleanTrue;
  uint64_t v89 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v147,  &v146,  1LL);
  id v116 = data_ark_copy(v111, 0LL, @"PrivateKey");
  id v90 = isNSData(v116);
  id v134 = v69;
  id v115 = v89;
  LOBYTE(v89) = store_pem_as_identity( v90,  v12,  @"lockdown-identities",  @"com.apple.lockdown.identity.activation",  v89,  &v134);
  id v91 = v134;

  id v117 = v12;
  if ((v89 & 1) == 0)
  {
    id v21 =  createMobileActivationError( (uint64_t)"handle_activate",  4254LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v91,  @"Failed to store activation identity.");

    id v22 = 0LL;
    id v23 = 0LL;
    id v121 = 0LL;
    goto LABEL_119;
  }

  post_notification(@"com.apple.mobile.lockdown.activation_identity_changed");
  id v92 = [v47 objectForKeyedSubscript:@"UniqueDeviceCertificate"];
  id v93 = isNSData(v92);
  id v121 = v92;
  if (v93)
  {
  }

  else if (!is_internal_build() || !is_virtual_machine())
  {
    id v21 =  createMobileActivationError( (uint64_t)"handle_activate",  4265LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Activation record does not contain a UCRT.");
    SecCertificateRef v106 = v91;
LABEL_131:

    id v22 = 0LL;
    id v23 = 0LL;
    uint64_t v114 = 0LL;
    goto LABEL_11;
  }

  SecCertificateRef v14 = (SecCertificateRef)isNSData(v92);

  if (!v14)
  {
    uint64_t v114 = 0LL;
    id v12 = 0LL;
    id v24 = 0LL;
    id v25 = 0LL;
    goto LABEL_128;
  }

  id v133 = v91;
  id v94 = lockcrypto_decode_pems(v92, "CERTIFICATE", (NSError **)&v133);
  id v95 = v133;

  if (!v94)
  {
    id v21 =  createMobileActivationError( (uint64_t)"handle_activate",  4272LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v95,  @"Failed to query certificate(s) from pem data.");
    SecCertificateRef v106 = v95;
    goto LABEL_131;
  }

  uint64_t v114 = v94;
  id v96 = (const __CFData *)-[NSMutableArray objectAtIndexedSubscript:](v94, "objectAtIndexedSubscript:", 0LL);
  SecCertificateRef v14 = SecCertificateCreateWithData(kCFAllocatorDefault, v96);

  if (v14)
  {
    id v132 = v95;
    id v12 = lockcrypto_copy_certificate_validity_date((uint64_t)v14, 0, (NSError **)&v132);
    id v97 = v132;

    if (!v12)
    {
      id v21 =  createMobileActivationError( (uint64_t)"handle_activate",  4284LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v97,  @"Failed to copy certificate validity date.");

      id v22 = 0LL;
      id v23 = 0LL;
      id v24 = 0LL;
      id v25 = 0LL;
      goto LABEL_81;
    }

    if (is_dsp_device())
    {
      id v98 = v123;
      if (!v123) {
        id v98 = @"2025-07-20T12:00:00-0700";
      }
      id v24 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
      -[NSDateFormatter setDateFormat:](v24, "setDateFormat:", @"yyyy-MM-dd'T'HH:mm:ssZZZZZ");
      BOOL v123 = (__CFString *)v98;
      id v99 = -[NSDateFormatter dateFromString:](v24, "dateFromString:", v98);
      id v25 = v99;
      if (!v99)
      {
        MobileActivationError = createMobileActivationError( (uint64_t)"handle_activate",  4298LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create date from %@ (must be in format '%@').",  v98,  v24);
        goto LABEL_139;
      }

      if (-[NSDate compare:](v99, "compare:", v12) == NSOrderedAscending)
      {
        MobileActivationError = createMobileActivationError( (uint64_t)"handle_activate",  4306LL,  @"com.apple.MobileActivation.ErrorDomain",  -23LL,  0LL,  @"Activation has expired (%@ < %@).",  v25,  v12);
LABEL_139:
        id v21 = MobileActivationError;
        int v109 = v97;
        goto LABEL_140;
      }
    }

    else
    {
      id v24 = 0LL;
      id v25 = 0LL;
    }

    id v131 = v97;
    char v108 = storeUCRT(v111, v121, v126, &v131);
    id v91 = v131;

    if ((v108 & 1) == 0)
    {
      id v21 =  createMobileActivationError( (uint64_t)"handle_activate",  4331LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v91,  @"Failed to store UCRT.");
      int v109 = v91;
LABEL_140:

      id v22 = 0LL;
      id v23 = 0LL;
      id v7 = v113;
      goto LABEL_81;
    }

    id v7 = v113;
LABEL_128:
    id v130 = v91;
    char v107 = store_activation_record(v128, (NSError **)&v130);
    id v21 = (NSError *)v130;

    if ((v107 & 1) == 0)
    {
      uint64_t v104 =  createMobileActivationError( (uint64_t)"handle_activate",  4339LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v21,  @"Failed to store activation record.");

      id v22 = 0LL;
      id v23 = 0LL;
LABEL_115:
      id v21 = v104;
      goto LABEL_81;
    }

    goto LABEL_74;
  }

  id v21 =  createMobileActivationError( (uint64_t)"handle_activate",  4278LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v95,  @"Failed to create certificate from pem data.");

  id v22 = 0LL;
  id v23 = 0LL;
  id v12 = 0LL;
  id v24 = 0LL;
  id v25 = 0LL;
LABEL_82:
  handle_deactivate(v7, 1);
  if (a4)
  {
    id v21 = v21;
    id v79 = (void *)a4;
    a4 = 0LL;
    *id v79 = v21;
  }

LABEL_84:
  id v80 = v7;
  id v81 = data_ark_copy(v7, 0LL, @"ActivationState");
  maLog((uint64_t)"handle_activate", 0LL, @"Activation State: %@", v81);

  if (v14) {
    CFRelease(v14);
  }

  return a4;
}

void __handle_activate_block_invoke(uint64_t a1)
{
}

void factory_activation_activity_handler(void *a1)
{
  id v1 = a1;
  id v2 = (dispatch_queue_s *)copyMobileActivationSerialQueue();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3254779904LL;
  block[2] = __factory_activation_activity_handler_block_invoke;
  block[3] = &__block_descriptor_40_e8_32s_e5_v8__0l;
  id v5 = v1;
  id v3 = v1;
  dispatch_async(v2, block);
}

id getMSDKManagedDeviceClass()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)getMSDKManagedDeviceClass_softClass;
  uint64_t v7 = getMSDKManagedDeviceClass_softClass;
  if (!getMSDKManagedDeviceClass_softClass)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3254779904LL;
    v3[2] = __getMSDKManagedDeviceClass_block_invoke;
    v3[3] = &__block_descriptor_40_e8_32r_e5_v8__0l;
    v3[4] = &v4;
    __getMSDKManagedDeviceClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10002BB00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t store_activation_record(void *a1, NSError **a2)
{
  id v3 = a1;
  id v4 = copy_activation_records_directory_path();
  if (!v4)
  {
    id v12 =  createMobileActivationError( (uint64_t)"store_activation_record",  311LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve activation records path.");
    goto LABEL_7;
  }

  id v5 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
  NSFileAttributeKey v18 = NSFilePosixPermissions;
  id v19 = &off_10026D560;
  uint64_t v6 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v19,  &v18,  1LL);
  id v17 = 0LL;
  unsigned __int8 v7 = -[NSFileManager createDirectoryAtPath:withIntermediateDirectories:attributes:error:]( v5,  "createDirectoryAtPath:withIntermediateDirectories:attributes:error:",  v4,  1LL,  v6,  &v17);
  id v8 = v17;

  if ((v7 & 1) == 0)
  {
    id v12 =  createMobileActivationError( (uint64_t)"store_activation_record",  317LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v8,  @"Failed to create %@.",  v4);

LABEL_7:
    id v10 = 0LL;
    if (!a2)
    {
LABEL_10:
      uint64_t v13 = 0LL;
      goto LABEL_11;
    }

uint64_t handle_unbrick(void *a1, void *a2)
{
  id v7 = 0LL;
  uint64_t v3 = dealwith_activation(a1, &v7);
  id v4 = v7;
  id v5 = v4;
  if (a2 && (v3 & 1) == 0) {
    *a2 = v4;
  }

  return v3;
}

uint64_t handle_recert(void *a1, void *a2, void *a3, NSError **a4)
{
  id v6 = a1;
  id v7 = a2;
  id v8 = a3;
  id v53 = v8;
  id v54 = v6;
  if (!v7)
  {
    uint64_t v31 =  createMobileActivationError( (uint64_t)"handle_recert",  4419LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Input invalid.");
    id v13 = 0LL;
    id v25 = 0LL;
    id v17 = 0LL;
    id v22 = 0LL;
    id v52 = 0LL;
    id v29 = 0LL;
    id v20 = 0LL;
    id v11 = 0LL;
LABEL_23:
    id v16 = 0LL;
    unint64_t v51 = 0LL;
    goto LABEL_24;
  }

  id v9 = v8;
  id v10 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v11 = v10;
  if (!v10)
  {
    uint64_t v31 =  createMobileActivationError( (uint64_t)"handle_recert",  4425LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate dictionary.");
    id v13 = 0LL;
LABEL_22:
    id v25 = 0LL;
    id v17 = 0LL;
    id v22 = 0LL;
    id v52 = 0LL;
    id v29 = 0LL;
    id v20 = 0LL;
    goto LABEL_23;
  }

  if (v9) {
    -[NSMutableDictionary addEntriesFromDictionary:](v10, "addEntriesFromDictionary:", v9);
  }
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v11,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"UseEnhancedValidation");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v11,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"UseEnhancedValidationWithVersionCheck");
  id v12 = [v7 objectForKeyedSubscript:@"certify-me"];
  id v13 = isNSDictionary(v12);

  if (!v13)
  {
    uint64_t v31 =  createMobileActivationError( (uint64_t)"handle_recert",  4438LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Message did not contain a certification record.");
    goto LABEL_22;
  }

  id v58 = 0LL;
  id v14 = extract_account_token(v13, &v58);
  id v15 = v58;
  id v47 = v14;
  if (!v14)
  {
    id v32 =  createMobileActivationError( (uint64_t)"handle_recert",  4444LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v15,  @"Failed to retrieve account token.");

    uint64_t v31 = v32;
    goto LABEL_22;
  }

  id v46 = [v9 objectForKeyedSubscript:@"ReCertRandomness"];
  id v16 = (NSDictionary *)isNSString(v46);

  if (!v16)
  {
    char v34 =  createMobileActivationError( (uint64_t)"handle_recert",  4450LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid nonce.");

    uint64_t v31 = v34;
    id v17 = 0LL;
LABEL_30:
    id v22 = 0LL;
    unint64_t v51 = 0LL;
    id v52 = 0LL;
    id v29 = 0LL;
    id v25 = v46;
    id v20 = v47;
    goto LABEL_24;
  }

  id v17 = [v14 objectForKeyedSubscript:@"ActivationRandomness"];
  id v16 = (NSDictionary *)isNSString(v17);

  if (!v16)
  {
    uint64_t v35 =  createMobileActivationError( (uint64_t)"handle_recert",  4456LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"No activation randomness in the record.");

    uint64_t v31 = v35;
    goto LABEL_30;
  }

  id v45 = v17;
  if (([v46 isEqualToString:v17] & 1) == 0)
  {
    id v36 =  createMobileActivationError( (uint64_t)"handle_recert",  4461LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"The randomness does not match.");

    uint64_t v31 = v36;
    id v22 = 0LL;
    unint64_t v51 = 0LL;
    id v52 = 0LL;
    id v29 = 0LL;
    id v16 = 0LL;
    id v25 = v46;
    id v20 = v47;
    id v17 = v45;
    goto LABEL_24;
  }

  data_ark_remove(v6, 0LL, @"ReCertRandomness");
  id v57 = v15;
  char v18 = verify_activation_record_certificates(v6, v13, v11, (NSError **)&v57);
  id v19 = v57;

  id v20 = v47;
  if ((v18 & 1) == 0)
  {
    char v37 =  createMobileActivationError( (uint64_t)"handle_recert",  4471LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v19,  @"Could not verify record with production certificates.");

    uint64_t v31 = v37;
    id v22 = 0LL;
    unint64_t v51 = 0LL;
    id v52 = 0LL;
    id v29 = 0LL;
    id v16 = 0LL;
    id v17 = v45;
    id v25 = v46;
    goto LABEL_24;
  }

  id v44 = [v13 objectForKeyedSubscript:@"DeviceCertificate"];
  id v21 = isNSData(v44);

  if (!v21)
  {
    uint64_t v38 =  createMobileActivationError( (uint64_t)"handle_recert",  4477LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Activation record does not contain device certificate.");

    uint64_t v31 = v38;
    id v22 = 0LL;
    unint64_t v51 = 0LL;
    id v52 = 0LL;
    id v16 = 0LL;
    id v17 = v45;
    id v25 = v46;
LABEL_35:
    id v29 = v44;
    goto LABEL_24;
  }

  id v22 = (__CFString *)data_ark_copy(v6, 0LL, @"ActivationState");
  id v23 = isNSString(v22);

  if (!v23)
  {
    id v24 = @"Unactivated";

    id v22 = v24;
  }

  id v17 = v45;
  id v25 = v46;
  if ((-[__CFString isEqualToString:](v22, "isEqualToString:", @"Activated") & 1) == 0)
  {
    id v39 =  createMobileActivationError( (uint64_t)"handle_recert",  4487LL,  @"com.apple.MobileActivation.ErrorDomain",  -8LL,  0LL,  @"Device is not activated: %@",  v22);

    uint64_t v31 = v39;
    unint64_t v51 = 0LL;
    id v52 = 0LL;
    id v16 = 0LL;
    goto LABEL_35;
  }

  uint64_t v61 = @"UseSystemKeychainSharediPadOnly";
  char v62 = &__kCFBooleanTrue;
  id v56 = v19;
  id v43 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v62,  &v61,  1LL);
  char v26 = delete_identity( @"lockdown-identities",  @"com.apple.lockdown.identity.activation",  v43,  (NSError **)&v56);
  id v49 = v56;

  if ((v26 & 1) != 0)
  {
    id v59 = @"UseSystemKeychainSharediPadOnly";
    char v60 = &__kCFBooleanTrue;
    id v27 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v60,  &v59,  1LL);
    id v52 = data_ark_copy(v54, 0LL, @"PrivateKey");
    id v28 = isNSData(v52);
    id v55 = v49;
    id v29 = v44;
    unint64_t v51 = v27;
    char v42 = store_pem_as_identity( v28,  v44,  @"lockdown-identities",  @"com.apple.lockdown.identity.activation",  v27,  &v55);
    id v30 = (NSError *)v55;

    if ((v42 & 1) != 0)
    {
      post_notification(@"com.apple.mobile.lockdown.activation_identity_changed");
      unsigned int v50 = 1;
      uint64_t v31 = v30;
      id v16 = v43;
      goto LABEL_27;
    }

    id v41 =  createMobileActivationError( (uint64_t)"handle_recert",  4507LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v30,  @"Failed to store activation identity.");

    uint64_t v31 = v41;
  }

  else
  {
    int v40 =  createMobileActivationError( (uint64_t)"handle_recert",  4497LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v49,  @"Failed to delete existing identity.");

    uint64_t v31 = v40;
    unint64_t v51 = 0LL;
    id v52 = 0LL;
    id v29 = v44;
  }

  id v16 = v43;
LABEL_24:
  if (a4)
  {
    uint64_t v31 = v31;
    unsigned int v50 = 0;
    *a4 = v31;
  }

  else
  {
    unsigned int v50 = 0;
  }

void __factory_activation_activity_handler_block_invoke(uint64_t a1)
{
  id v1 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"ActivationState");
  id v2 = isNSString(v1);

  if ([v2 isEqualToString:@"FactoryActivated"])
  {
    maLog((uint64_t)"factory_activation_activity_handler_block_invoke", 0LL, @"Time's up Cinderella, rebooting!");
    reboot3(0x8000000000000000LL);
  }
}

void dcrt_oob_load_spreading_activity_handler(void *a1, char a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3254779904LL;
  v5[2] = __dcrt_oob_load_spreading_activity_handler_block_invoke;
  v5[3] = &__block_descriptor_41_e8_32s_e5_v8__0l;
  char v7 = a2;
  id v6 = a1;
  id v2 = v6;
  dispatch_block_t v3 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, v5);
  id v4 = (dispatch_queue_s *)copyMobileActivationSerialQueue();
  dispatch_async(v4, v3);
}

void __dcrt_oob_load_spreading_activity_handler_block_invoke(uint64_t a1)
{
  id v2 = &kMASDCRTUpgradeRequired;
  if (!*(_BYTE *)(a1 + 40)) {
    id v2 = &kMADCRTUpgradeRequired;
  }
  dispatch_block_t v3 = *v2;
  id v4 = &kMASDCRTOOBActivityID;
  if (!*(_BYTE *)(a1 + 40)) {
    id v4 = &kMADCRTOOBActivityID;
  }
  id v5 = *v4;
  if (*(_BYTE *)(a1 + 40)) {
    id v6 = @"SDCRT";
  }
  else {
    id v6 = @"DCRT";
  }
  char v7 = v6;
  if ((dcrtOOBAlreadyPerformed(*(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 40), 1LL) & 1) == 0)
  {
    data_ark_set(*(void **)(a1 + 32), 0LL, v3, &__kCFBooleanTrue, 1);
    id v8 = copyLoggingHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543618;
      id v14 = v7;
      __int16 v15 = 2114;
      id v16 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%{public}@ is missing 1+ canonical OIDs. Scheduling %{public}@ OOB activity.",  buf,  0x16u);
    }

    id v9 = *(void **)(a1 + 32);
    id v10 = (const char *)-[__CFString UTF8String](v5, "UTF8String");
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = __dcrt_oob_load_spreading_activity_handler_block_invoke_333;
    v11[3] = &__block_descriptor_33_e17_v16__0__DataArk_8l;
    char v12 = *(_BYTE *)(a1 + 40);
    scheduleXPCActivity(v9, v10, 5u, 1, 0x4000u, 0x1000u, v11);
  }
}

void __dcrt_oob_load_spreading_activity_handler_block_invoke_333(uint64_t a1, void *a2)
{
}

void dcrt_oob_activity_handler(void *a1, int a2, int a3)
{
  id v5 = a1;
  id v6 = @"DCRTUpgradeRequired";
  char v7 = @"DCRTOOBRetryAttempt";
  id v8 = @"DCRTIssuanceInFlight";
  id v9 = @"com.apple.mobileactivationd.DCRT.OOB";
  id v10 = @"DCRTOOBForbidden";
  id v11 = @"DCRTOOBLastPerformed";
  char v12 = @"DCRTOOBForbiddenCount";
  if (v5)
  {
    id v29 = v11;
    int v13 = a3;
    if (a2)
    {
      id v24 = @"SDCRTUpgradeRequired";

      id v27 = @"SDCRTOOBRetryAttempt";
      id v25 = @"SDCRTIssuanceInFlight";

      id v14 = @"com.apple.mobileactivationd.SDCRT.OOB";
      id v15 = v5;
      id v16 = @"SDCRTOOBForbidden";

      id v17 = @"SDCRTOOBLastPerformed";
      char v18 = @"SDCRTOOBForbiddenCount";

      id v19 = v25;
      char v7 = v27;
      char v26 = v16;
      id v28 = v19;
      id v9 = v14;
      id v5 = v15;
      id v29 = v17;
      char v12 = v18;
      id v6 = v24;
      id v20 = @"SDCRT";
    }

    else
    {
      char v26 = v10;
      id v28 = v8;
      id v20 = @"DCRT";
    }

    if (v13)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3254779904LL;
      block[2] = __dcrt_oob_activity_handler_block_invoke;
      block[3] = &__block_descriptor_57_e8_32s40s48s_e5_v8__0l;
      id v42 = v5;
      char v7 = v7;
      id v43 = v7;
      id v9 = v9;
      id v44 = v9;
      char v45 = a2;
      dispatch_block_t v21 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, block);
      id v22 = (dispatch_queue_s *)copyMobileActivationSerialQueue();
      dispatch_async(v22, v21);

      id v10 = v26;
      id v8 = v28;
      id v11 = v29;
    }

    else
    {
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3254779904LL;
      v30[2] = __dcrt_oob_activity_handler_block_invoke_334;
      v30[3] = &__block_descriptor_105_e8_32s40s48s56s64s72s80s88s96s_e5_v8__0l;
      id v31 = v5;
      id v6 = v6;
      id v32 = v6;
      char v40 = a2;
      char v7 = v7;
      id v33 = v7;
      id v8 = v28;
      id v34 = v8;
      id v35 = v20;
      id v9 = v9;
      id v36 = v9;
      id v10 = v26;
      id v37 = v10;
      id v11 = v29;
      id v38 = v11;
      char v12 = v12;
      id v39 = v12;
      dispatch_block_t v21 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, v30);
      id v23 = (dispatch_queue_s *)copyMobileActivationSerialQueue();
      dispatch_async(v23, v21);
    }
  }

  else
  {
    dispatch_block_t v21 = copyLoggingHandle();
    if (os_log_type_enabled((os_log_t)v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v21, OS_LOG_TYPE_DEFAULT, "Invalid input.", buf, 2u);
    }
  }
}

void __dcrt_oob_activity_handler_block_invoke(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  dispatch_block_t v3 = (const char *)[*(id *)(a1 + 48) UTF8String];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = __dcrt_oob_activity_handler_block_invoke_2;
  v4[3] = &__block_descriptor_33_e17_v16__0__DataArk_8l;
  char v5 = *(_BYTE *)(a1 + 56);
  scheduleXPCActivity(v2, v3, 5u, 1, 0x4000u, 0x1000u, v4);
}

uint64_t __dcrt_oob_activity_handler_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return dcrt_oob_activity_handler(a2, *(unsigned __int8 *)(a1 + 32), 0LL);
}

void __dcrt_oob_activity_handler_block_invoke_334(uint64_t a1)
{
  uint64_t v93 = 0LL;
  id v94 = &v93;
  uint64_t v95 = 0x3032000000LL;
  id v96 = __Block_byref_object_copy__4;
  id v97 = __Block_byref_object_dispose__4;
  id v98 = 0LL;
  uint64_t v87 = 0LL;
  id v88 = &v87;
  uint64_t v89 = 0x3032000000LL;
  id v90 = __Block_byref_object_copy__4;
  id v91 = __Block_byref_object_dispose__4;
  id v92 = 0LL;
  uint64_t v83 = 0LL;
  char v84 = &v83;
  uint64_t v85 = 0x2020000000LL;
  int v86 = 0;
  uint64_t v77 = 0LL;
  id v78 = &v77;
  uint64_t v79 = 0x3032000000LL;
  id v80 = __Block_byref_object_copy__4;
  id v81 = __Block_byref_object_dispose__4;
  id v82 = 0LL;
  uint64_t v71 = 0LL;
  id v72 = &v71;
  uint64_t v73 = 0x3032000000LL;
  char v74 = __Block_byref_object_copy__4;
  int v75 = __Block_byref_object_dispose__4;
  id v76 = 0LL;
  id v2 = data_ark_copy(*(void **)(a1 + 32), 0LL, *(void **)(a1 + 40));
  dispatch_block_t v3 = (void *)v72[5];
  v72[5] = (uint64_t)v2;

  id v4 = isNSNumber((void *)v72[5]);
  BOOL v5 = v4 == 0LL;

  if (v5)
  {
    id v6 = (void *)v72[5];
    v72[5] = (uint64_t)&__kCFBooleanFalse;
  }

  if (dcrtOOBAlreadyPerformed(*(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 104), 0LL)
    && ![(id)v72[5] BOOLValue]
    || (id v7 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"ActivationState"),
        id v8 = isNSString(v7),
        id v9 = (void *)v94[5],
        v94[5] = (uint64_t)v8,
        v9,
        v7,
        use_hactivation())
    || is_virtual_machine()
    || ([(id)v94[5] isEqualToString:@"Activated"] & 1) == 0)
  {
    data_ark_remove(*(void **)(a1 + 32), 0LL, *(void **)(a1 + 40));
    id v18 = 0LL;
    id v19 = 0LL;
    goto LABEL_12;
  }

  id v10 = data_ark_copy(*(void **)(a1 + 32), 0LL, *(void **)(a1 + 48));
  id v11 = (void *)v88[5];
  v88[5] = (uint64_t)v10;

  id v12 = isNSNumber((void *)v88[5]);
  BOOL v13 = v12 == 0LL;

  if (v13)
  {
    id v17 = (void *)v88[5];
    v88[5] = (uint64_t)&off_10026D530;
  }

  else
  {
    id v14 =  +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  (char *)[(id)v88[5] unsignedLongLongValue] + 1);
    id v15 = (void *)v88[5];
    v88[5] = (uint64_t)v14;

    id v16 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:");
    id v17 = (void *)v88[5];
    v88[5] = (uint64_t)v16;
  }

LABEL_15:
  data_ark_set(*(void **)(a1 + 32), 0LL, *(void **)(a1 + 48), (void *)v88[5], 1);
  [(id)v88[5] doubleValue];
  double v21 = exp2(v20);
  *((_DWORD *)v84 + 6) = (v21 * 60.0);
  id v19 = data_ark_copy(*(void **)(a1 + 32), 0LL, *(void **)(a1 + 56));
  id v22 = isNSNumber(v19);
  BOOL v23 = v22 == 0LL;

  if (v23)
  {

    id v19 = &__kCFBooleanFalse;
  }

  if ([v19 BOOLValue])
  {
    id v24 = copyLoggingHandle();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = *(void *)(a1 + 64);
      int v26 = *((_DWORD *)v84 + 6);
      *(_DWORD *)buf = 138543874;
      uint64_t v100 = v25;
      __int16 v101 = 2114;
      uint64_t v102 = v25;
      __int16 v103 = 1024;
      int v104 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Another %{public}@ request is already in flight, rescheduling %{public}@ OOB for %d seconds.",  buf,  0x1Cu);
    }

    id v27 = *(void **)(a1 + 32);
    id v28 = (const char *)[*(id *)(a1 + 72) UTF8String];
    unsigned int v29 = *((_DWORD *)v84 + 6);
    v69[0] = _NSConcreteStackBlock;
    v69[1] = 3221225472LL;
    v69[2] = __dcrt_oob_activity_handler_block_invoke_336;
    v69[3] = &__block_descriptor_33_e17_v16__0__DataArk_8l;
    char v70 = *(_BYTE *)(a1 + 104);
    scheduleXPCActivity(v27, v28, v29, 1, 0x4000u, 0x1000u, v69);
    id v18 = 0LL;
    goto LABEL_12;
  }

  id v18 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"UCRTIssuanceInFlight");
  id v30 = isNSNumber(v18);
  BOOL v31 = v30 == 0LL;

  if (v31)
  {

    id v18 = &__kCFBooleanFalse;
  }

  if ([v18 BOOLValue])
  {
    id v32 = copyLoggingHandle();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v33 = *(void *)(a1 + 64);
      int v34 = *((_DWORD *)v84 + 6);
      *(_DWORD *)buf = 138543618;
      uint64_t v100 = v33;
      __int16 v101 = 1024;
      LODWORD(v102) = v34;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "UCRT request is in flight, rescheduling %{public}@ OOB for %d seconds.",  buf,  0x12u);
    }

    id v35 = *(void **)(a1 + 32);
    id v36 = (const char *)[*(id *)(a1 + 72) UTF8String];
    unsigned int v37 = *((_DWORD *)v84 + 6);
    char v68 = _NSConcreteStackBlock;
    id v38 = __dcrt_oob_activity_handler_block_invoke_337;
    id v39 = &v68;
LABEL_34:
    v39[1] = (void **)3221225472LL;
    v39[2] = (void **)v38;
    v39[3] = (void **)&__block_descriptor_33_e17_v16__0__DataArk_8l;
    *((_BYTE *)v39 + 32) = *(_BYTE *)(a1 + 104);
    scheduleXPCActivity(v35, v36, v37, 1, 0x4000u, 0x1000u, v39);
    goto LABEL_12;
  }

  if ((ucrtOOBAlreadyPerformed(*(void **)(a1 + 32)) & 1) == 0)
  {
    id v47 = copyLoggingHandle();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v48 = *(void *)(a1 + 64);
      int v49 = *((_DWORD *)v84 + 6);
      *(_DWORD *)buf = 138543618;
      uint64_t v100 = v48;
      __int16 v101 = 1024;
      LODWORD(v102) = v49;
      _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "UCRT OOB not performed yet. Rescheduling %{public}@ OOB for %d seconds.",  buf,  0x12u);
    }

    id v35 = *(void **)(a1 + 32);
    id v36 = (const char *)[*(id *)(a1 + 72) UTF8String];
    unsigned int v37 = *((_DWORD *)v84 + 6);
    id v67 = _NSConcreteStackBlock;
    id v38 = __dcrt_oob_activity_handler_block_invoke_338;
    id v39 = &v67;
    goto LABEL_34;
  }

  data_ark_set(*(void **)(a1 + 32), 0LL, *(void **)(a1 + 56), &__kCFBooleanTrue, 0);
  char v40 = copyLoggingHandle();
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v41 = *(void *)(a1 + 64);
    *(_DWORD *)buf = 138543362;
    uint64_t v100 = v41;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Performing %{public}@ OOB.", buf, 0xCu);
  }

  uint64_t v42 = os_transaction_create([*(id *)(a1 + 72) UTF8String]);
  id v43 = (void *)v78[5];
  v78[5] = v42;

  id v44 = *(void **)(a1 + 32);
  char v45 = *(_BYTE *)(a1 + 104);
  v50[0] = _NSConcreteStackBlock;
  v50[1] = 3254779904LL;
  v50[2] = __dcrt_oob_activity_handler_block_invoke_340;
  void v50[3] = &__block_descriptor_146_e8_32s40s48s56s64s72s80s88s96s104r112r120r128r136r_e34_v24__0__NSDictionary_8__NSError_16l;
  char v60 = &v71;
  id v51 = v44;
  id v46 = *(id *)(a1 + 40);
  char v65 = *(_BYTE *)(a1 + 104);
  id v52 = v46;
  uint64_t v61 = &v93;
  char v66 = 1;
  id v53 = *(id *)(a1 + 80);
  id v54 = *(id *)(a1 + 64);
  id v55 = *(id *)(a1 + 88);
  id v56 = *(id *)(a1 + 96);
  id v57 = *(id *)(a1 + 48);
  char v62 = &v87;
  id v63 = &v83;
  id v58 = *(id *)(a1 + 72);
  id v59 = *(id *)(a1 + 56);
  unint64_t v64 = &v77;
  performDCRTOOB(v51, v45, v50);

LABEL_12:
  _Block_object_dispose(&v71, 8);

  _Block_object_dispose(&v77, 8);
  _Block_object_dispose(&v83, 8);
  _Block_object_dispose(&v87, 8);

  _Block_object_dispose(&v93, 8);
}

void sub_10002D8C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, char a49)
{
}

uint64_t __dcrt_oob_activity_handler_block_invoke_336(uint64_t a1, uint64_t a2)
{
  return dcrt_oob_activity_handler(a2, *(unsigned __int8 *)(a1 + 32), 0LL);
}

uint64_t __dcrt_oob_activity_handler_block_invoke_337(uint64_t a1, uint64_t a2)
{
  return dcrt_oob_activity_handler(a2, *(unsigned __int8 *)(a1 + 32), 0LL);
}

uint64_t __dcrt_oob_activity_handler_block_invoke_338(uint64_t a1, uint64_t a2)
{
  return dcrt_oob_activity_handler(a2, *(unsigned __int8 *)(a1 + 32), 0LL);
}

void performDCRTOOB(void *a1, char a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  id v7 = dispatch_get_global_queue(0LL, 0LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3254779904LL;
  block[2] = __performDCRTOOB_block_invoke;
  block[3] = &__block_descriptor_49_e8_32s40bs_e5_v8__0l;
  id v11 = v5;
  id v12 = v6;
  char v13 = a2;
  id v8 = v6;
  id v9 = v5;
  dispatch_async(v7, block);
}

void __dcrt_oob_activity_handler_block_invoke_340(uint64_t a1, id a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3254779904LL;
  block[2] = __dcrt_oob_activity_handler_block_invoke_2_341;
  block[3] = &__block_descriptor_162_e8_32s40s48s56s64s72s80s88s96s104s112s120r128r136r144r152r_e5_v8__0l;
  uint64_t v7 = *(void *)(a1 + 104);
  id v16 = v6;
  uint64_t v27 = v7;
  id v17 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  __int16 v31 = *(_WORD *)(a1 + 144);
  uint64_t v28 = *(void *)(a1 + 112);
  id v18 = v8;
  id v19 = v5;
  id v20 = *(id *)(a1 + 48);
  id v21 = *(id *)(a1 + 56);
  id v22 = *(id *)(a1 + 64);
  id v23 = *(id *)(a1 + 72);
  id v24 = *(id *)(a1 + 80);
  __int128 v29 = *(_OWORD *)(a1 + 120);
  id v25 = *(id *)(a1 + 88);
  id v9 = *(id *)(a1 + 96);
  uint64_t v10 = *(void *)(a1 + 136);
  id v26 = v9;
  uint64_t v30 = v10;
  id v11 = v5;
  id v12 = v6;
  dispatch_block_t v13 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, block);
  id v14 = (dispatch_queue_s *)copyMobileActivationSerialQueue();
  dispatch_async(v14, v13);
}

void __dcrt_oob_activity_handler_block_invoke_2_341(uint64_t a1)
{
  if ((mobileactivationErrorHasDomainAndErrorCode( *(void **)(a1 + 32),  @"com.apple.MobileActivation.ErrorDomain",  (id)0xFFFFFFFFFFFFFFFDLL) & 1) != 0) {
    goto LABEL_9;
  }
  id v2 = data_ark_copy(*(void **)(a1 + 40), 0LL, *(void **)(a1 + 48));
  uint64_t v3 = *(void *)(*(void *)(a1 + 120) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (dcrtOOBAlreadyPerformed(*(void **)(a1 + 40), *(unsigned __int8 *)(a1 + 160), 0LL))
  {
  }

  id v5 = data_ark_copy(*(void **)(a1 + 40), 0LL, @"ActivationState");
  id v6 = isNSString(v5);
  uint64_t v7 = *(void *)(*(void *)(a1 + 128) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  id v9 = 0LL;
  id v10 = 0LL;
  id v11 = 0LL;
  id v12 = 0LL;
  id v13 = 0LL;
  id v14 = 0LL;
  if (use_hactivation())
  {
LABEL_10:
    data_ark_remove(*(void **)(a1 + 40), 0LL, *(void **)(a1 + 48));
    goto LABEL_11;
  }

  if (is_virtual_machine()
    || ![*(id *)(*(void *)(*(void *)(a1 + 128) + 8) + 40) isEqualToString:@"Activated"])
  {
LABEL_9:
    id v9 = 0LL;
    id v10 = 0LL;
    id v11 = 0LL;
    id v12 = 0LL;
    id v13 = 0LL;
    id v14 = 0LL;
    goto LABEL_10;
  }

  id v15 = [*(id *)(a1 + 56) objectForKeyedSubscript:@"ServerResponseCode"];
  id v16 = isNSNumber(v15);

  if (v16)
  {
    id v17 = [*(id *)(a1 + 56) objectForKeyedSubscript:@"ServerResponseCode"];
    signed int v18 = [v17 intValue];
  }

  else
  {
    signed int v18 = 0;
  }

  id v21 = *(void **)(a1 + 32);
  if (v21)
  {
    id v14 = v21;
    if (*(_BYTE *)(a1 + 161)
      || !mobileactivationErrorHasDomainAndErrorCode( *(void **)(a1 + 32),  @"com.apple.MobileActivation.ErrorDomain",  (id)0xFFFFFFFFFFFFFFF0LL))
    {
      id v13 = 0LL;
      id v12 = 0LL;
      id v11 = 0LL;
      id v10 = 0LL;
      id v9 = 0LL;
      char v22 = 0;
    }

    else
    {
      char v22 = 1;
      data_ark_set(*(void **)(a1 + 40), 0LL, *(void **)(a1 + 64), &__kCFBooleanTrue, 1);
      id v13 = 0LL;
      id v12 = 0LL;
      id v11 = 0LL;
      id v10 = 0LL;
      id v9 = 0LL;
    }

    goto LABEL_38;
  }

  id v12 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  if (!v12)
  {
    id v14 =  createMobileActivationError( (uint64_t)"dcrt_oob_activity_handler_block_invoke_2",  4785LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate dictionary.");
    char v22 = 0;
    id v9 = 0LL;
    id v10 = 0LL;
    id v11 = 0LL;
    goto LABEL_31;
  }

  id v23 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 160));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v12,  "setObject:forKeyedSubscript:",  v23,  @"sdcrtAttestation");

  id v11 = [*(id *)(a1 + 56) objectForKeyedSubscript:@"ServerResponseDate"];
  id v9 = (NSMutableData *)isNSDate(v11);

  if (!v9)
  {
    id v14 =  createMobileActivationError( (uint64_t)"dcrt_oob_activity_handler_block_invoke_2",  4793LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve server response date.");
    char v22 = 0;
    id v10 = 0LL;
LABEL_31:
    id v13 = 0LL;
    if (!v14) {
      goto LABEL_45;
    }
    goto LABEL_38;
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:]( v12,  "setObject:forKeyedSubscript:",  v11,  @"ServerResponseDate");
  id v24 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v13 = [v24 copyAnswer:@"BuildVersion"];

  id v9 = (NSMutableData *)isNSString(v13);
  if (!v9)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"dcrt_oob_activity_handler_block_invoke_2",  4801LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve OS build.");
    goto LABEL_37;
  }

  id v9 = objc_alloc_init(&OBJC_CLASS___NSMutableData);
  if (!v9)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"dcrt_oob_activity_handler_block_invoke_2",  4807LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create data.");
LABEL_37:
    id v14 = MobileActivationError;
    char v22 = 0;
    id v10 = 0LL;
    if (!v14) {
      goto LABEL_45;
    }
    goto LABEL_38;
  }

  id v25 = [*(id *)(a1 + 56) objectForKeyedSubscript:@"RKCertification"];
  id v10 = isNSArray(v25);

  if (!v10 || [v10 count] != (id)2)
  {
    id v14 =  createMobileActivationError( (uint64_t)"dcrt_oob_activity_handler_block_invoke_2",  4813LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve %@.",  *(void *)(a1 + 72));
    char v22 = 0;
    if (!v14) {
      goto LABEL_45;
    }
    goto LABEL_38;
  }

  id v26 = [v10 objectAtIndexedSubscript:0];
  -[NSMutableData appendData:](v9, "appendData:", v26);

  id v27 = [v10 objectAtIndexedSubscript:1];
  -[NSMutableData appendData:](v9, "appendData:", v27);

  uint64_t v28 = *(void **)(a1 + 40);
  id v53 = 0LL;
  char v29 = storeDCRT(v28, v9, v12, &v53);
  id v14 = (NSError *)v53;
  if ((v29 & 1) == 0)
  {
    unsigned int v50 =  createMobileActivationError( (uint64_t)"dcrt_oob_activity_handler_block_invoke_2",  4821LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v14,  @"Failed to store %@.",  *(void *)(a1 + 72));

    char v22 = 0;
    id v14 = v50;
    if (!v50) {
      goto LABEL_45;
    }
    goto LABEL_38;
  }

  data_ark_set(*(void **)(a1 + 40), 0LL, *(void **)(a1 + 80), v13, 1);
  data_ark_remove(*(void **)(a1 + 40), 0LL, *(void **)(a1 + 88));
  data_ark_remove(*(void **)(a1 + 40), 0LL, *(void **)(a1 + 96));
  uint64_t v30 = copyLoggingHandle();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v31 = *(void *)(a1 + 72);
    *(_DWORD *)buf = 138543362;
    uint64_t v55 = v31;
    _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Successfully performed %{public}@ OOB.",  buf,  0xCu);
  }

  char v22 = 1;
  if (v14)
  {
LABEL_38:
    uint64_t v33 = copyLoggingHandle();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v34 = *(void *)(a1 + 72);
      *(_DWORD *)buf = 138543618;
      uint64_t v55 = v34;
      __int16 v56 = 2114;
      id v57 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Failed to perform %{public}@ OOB: %{public}@",  buf,  0x16u);
    }

    if (v18)
    {
      if (*(_BYTE *)(a1 + 160)) {
        uint64_t v36 = 33LL;
      }
      else {
        uint64_t v36 = 29LL;
      }
      writeSplunkLog( *(void **)(a1 + 40),  v36,  v18,  (uint64_t)"dcrt_oob_activity_handler_block_invoke",  4841,  0LL,  @"%@",  v35,  (uint64_t)v14);
    }
  }

uint64_t __dcrt_oob_activity_handler_block_invoke_343(uint64_t a1, uint64_t a2)
{
  return dcrt_oob_activity_handler(a2, *(unsigned __int8 *)(a1 + 32), 0LL);
}

void __copy_helper_block_e8_32s40s48s56s64s72s80s88s96s104s112s120r128r136r144r152r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  id v6 = *(id *)(a2 + 48);
  id v7 = *(id *)(a2 + 56);
  id v8 = *(id *)(a2 + 64);
  id v9 = *(id *)(a2 + 72);
  id v10 = *(id *)(a2 + 80);
  id v11 = *(id *)(a2 + 88);
  id v12 = *(id *)(a2 + 96);
  id v13 = *(id *)(a2 + 104);
  id v14 = *(id *)(a2 + 112);
  _Block_object_assign((void *)(a1 + 120), *(const void **)(a2 + 120), 8);
  _Block_object_assign((void *)(a1 + 128), *(const void **)(a2 + 128), 8);
  _Block_object_assign((void *)(a1 + 136), *(const void **)(a2 + 136), 8);
  _Block_object_assign((void *)(a1 + 144), *(const void **)(a2 + 144), 8);
  _Block_object_assign((void *)(a1 + 152), *(const void **)(a2 + 152), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64s72s80s88s96s104s112s120r128r136r144r152r(uint64_t a1)
{
}

void __copy_helper_block_e8_32s40s48s56s64s72s80s88s96s104r112r120r128r136r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  id v6 = *(id *)(a2 + 48);
  id v7 = *(id *)(a2 + 56);
  id v8 = *(id *)(a2 + 64);
  id v9 = *(id *)(a2 + 72);
  id v10 = *(id *)(a2 + 80);
  id v11 = *(id *)(a2 + 88);
  id v12 = *(id *)(a2 + 96);
  _Block_object_assign((void *)(a1 + 104), *(const void **)(a2 + 104), 8);
  _Block_object_assign((void *)(a1 + 112), *(const void **)(a2 + 112), 8);
  _Block_object_assign((void *)(a1 + 120), *(const void **)(a2 + 120), 8);
  _Block_object_assign((void *)(a1 + 128), *(const void **)(a2 + 128), 8);
  _Block_object_assign((void *)(a1 + 136), *(const void **)(a2 + 136), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64s72s80s88s96s104r112r120r128r136r(uint64_t a1)
{
}

id __copy_helper_block_e8_32s40s48s56s64s72s80s88s96s(uint64_t a1, id *a2)
{
  id v3 = a2[4];
  id v4 = a2[5];
  id v5 = a2[6];
  id v6 = a2[7];
  id v7 = a2[8];
  id v8 = a2[9];
  id v9 = a2[10];
  id v10 = a2[11];
  return a2[12];
}

void __destroy_helper_block_e8_32s40s48s56s64s72s80s88s96s(id *a1)
{
}

void collection_activity_handler(void *a1, int a2)
{
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3254779904LL;
      block[2] = __collection_activity_handler_block_invoke;
      block[3] = &__block_descriptor_40_e8_32s_e5_v8__0l;
      id v12 = v3;
      dispatch_block_t v5 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, block);
      id v6 = (dispatch_queue_s *)copyMobileActivationSerialQueue();
      dispatch_async(v6, v5);

      id v7 = v12;
    }

    else
    {
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3254779904LL;
      v9[2] = __collection_activity_handler_block_invoke_3;
      v9[3] = &__block_descriptor_40_e8_32s_e5_v8__0l;
      id v10 = v3;
      dispatch_block_t v5 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, v9);
      id v8 = (dispatch_queue_s *)copyMobileActivationSerialQueue();
      dispatch_async(v8, v5);

      id v7 = v10;
    }
  }

  else
  {
    maLog((uint64_t)"collection_activity_handler", 0LL, @"Invalid input.");
  }
}

void __collection_activity_handler_block_invoke(uint64_t a1)
{
}

void __collection_activity_handler_block_invoke_2(id a1, DataArk *a2)
{
}

void __collection_activity_handler_block_invoke_3(uint64_t a1)
{
  uint64_t v49 = 0LL;
  unsigned int v50 = &v49;
  uint64_t v51 = 0x3032000000LL;
  char v52 = __Block_byref_object_copy__4;
  id v53 = __Block_byref_object_dispose__4;
  id v54 = 0LL;
  uint64_t v43 = 0LL;
  id v44 = &v43;
  uint64_t v45 = 0x3032000000LL;
  int v46 = __Block_byref_object_copy__4;
  id v47 = __Block_byref_object_dispose__4;
  id v48 = 0LL;
  uint64_t v39 = 0LL;
  id v40 = &v39;
  uint64_t v41 = 0x2020000000LL;
  int v42 = 0;
  uint64_t v33 = 0LL;
  uint64_t v34 = &v33;
  uint64_t v35 = 0x3032000000LL;
  uint64_t v36 = __Block_byref_object_copy__4;
  id v37 = __Block_byref_object_dispose__4;
  id v38 = 0LL;
  if (collectionAlreadyPerformed(*(void **)(a1 + 32))
    || (id v2 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"ActivationState"),
        id v3 = isNSString(v2),
        id v4 = (void *)v50[5],
        v50[5] = (uint64_t)v3,
        v4,
        v2,
        use_hactivation())
    || is_virtual_machine()
    || ![(id)v50[5] isEqualToString:@"Activated"])
  {
    id v13 = 0LL;
    goto LABEL_9;
  }

  id v5 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"CollectionRetryAttempt");
  id v6 = (void *)v44[5];
  v44[5] = (uint64_t)v5;

  id v7 = isNSNumber((void *)v44[5]);
  BOOL v8 = v7 == 0LL;

  if (v8)
  {
    id v12 = (void *)v44[5];
    v44[5] = (uint64_t)&off_10026D530;
    goto LABEL_11;
  }

  id v9 =  +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  (char *)[(id)v44[5] unsignedLongLongValue] + 1);
  id v10 = (void *)v44[5];
  v44[5] = (uint64_t)v9;

  if ((unint64_t)[(id)v44[5] unsignedLongLongValue] > 6)
  {
    id v11 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:");
    id v12 = (void *)v44[5];
    v44[5] = (uint64_t)v11;
LABEL_11:
  }

  data_ark_set(*(void **)(a1 + 32), 0LL, @"CollectionRetryAttempt", (void *)v44[5], 1);
  [(id)v44[5] doubleValue];
  double v15 = exp2(v14);
  *((_DWORD *)v40 + 6) = (v15 * 60.0);
  id v13 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"InFieldCollectionInFlight");
  id v16 = isNSNumber(v13);
  BOOL v17 = v16 == 0LL;

  if (v17)
  {

    id v13 = &__kCFBooleanFalse;
  }

  if ([v13 BOOLValue])
  {
    signed int v18 = copyLoggingHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = *((_DWORD *)v40 + 6);
      *(_DWORD *)buf = 67109120;
      int v56 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Collection request is in flight, rescheduling collection for %d seconds.",  buf,  8u);
    }

    id v20 = *(void **)(a1 + 32);
    id v21 = (const char *)[@"com.apple.mobileactivationd.collection" UTF8String];
    scheduleXPCActivity(v20, v21, *((_DWORD *)v40 + 6), 1, 0x5000u, 0x1000u, &__block_literal_global_348);
  }

  else
  {
    char v22 = copyLoggingHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Performing collection.", buf, 2u);
    }

    uint64_t v23 = os_transaction_create([@"com.apple.mobileactivationd.collection" UTF8String]);
    id v24 = (void *)v34[5];
    void v34[5] = v23;

    id v25 = *(void **)(a1 + 32);
    id v26 = copy_current_process_name();
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3254779904LL;
    void v27[2] = __collection_activity_handler_block_invoke_349;
    v27[3] = &__block_descriptor_72_e8_32s40r48r56r64r_e48_v40__0__NSData_8__NSDictionary_16q24__NSError_32l;
    id v28 = *(id *)(a1 + 32);
    char v29 = &v49;
    uint64_t v30 = &v39;
    uint64_t v31 = &v43;
    id v32 = &v33;
    performInFieldCollection(v25, 0LL, v26, v27);
  }

void sub_10002EF88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void __collection_activity_handler_block_invoke_347(id a1, DataArk *a2)
{
}

void __collection_activity_handler_block_invoke_349(uint64_t a1, id a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3254779904LL;
  block[2] = __collection_activity_handler_block_invoke_2_350;
  block[3] = &__block_descriptor_104_e8_32s40s48s56s64r72r80r88r_e5_v8__0l;
  id v12 = *(id *)(a1 + 32);
  uint64_t v26 = a4;
  id v20 = v12;
  id v21 = v11;
  id v22 = v10;
  id v23 = v9;
  __int128 v13 = *(_OWORD *)(a1 + 56);
  __int128 v24 = *(_OWORD *)(a1 + 40);
  __int128 v25 = v13;
  id v14 = v9;
  id v15 = v10;
  id v16 = v11;
  dispatch_block_t v17 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, block);
  signed int v18 = (dispatch_queue_s *)copyMobileActivationSerialQueue();
  dispatch_async(v18, v17);
}

void __collection_activity_handler_block_invoke_2_350(uint64_t a1)
{
  if (collectionAlreadyPerformed(*(void **)(a1 + 32)))
  {
    id v2 = 0LL;
    id v3 = 0LL;
    id v4 = 0LL;
    id v5 = 0LL;
    id v6 = 0LL;
    id v7 = 0LL;
    id v8 = 0LL;
    id v9 = 0LL;
    id v10 = 0LL;
    goto LABEL_32;
  }

  id v11 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"ActivationState");
  id v12 = isNSString(v11);
  uint64_t v13 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v12;

  id v2 = 0LL;
  id v3 = 0LL;
  id v4 = 0LL;
  id v5 = 0LL;
  id v6 = 0LL;
  id v7 = 0LL;
  id v8 = 0LL;
  id v9 = 0LL;
  id v10 = 0LL;
  if (![*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) isEqualToString:@"Activated"]) {
    goto LABEL_32;
  }
  id v10 = *(id *)(a1 + 96);
  if (v10 == (id)200)
  {
    id v10 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"X-Apple-Invalid-Reason"];
    id v15 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"X-Apple-Retry-After"];
    id v16 = isNSString(v10);
    id v58 = v15;
    if (v16)
    {

      goto LABEL_16;
    }

    id v23 = isNSNumber(v15);

    if (v23)
    {
LABEL_16:
      uint64_t v24 = *(void *)(a1 + 96);
      __int128 v25 = *(void **)(a1 + 40);
      uint64_t v26 =  +[NSHTTPURLResponse localizedStringForStatusCode:]( &OBJC_CLASS___NSHTTPURLResponse,  "localizedStringForStatusCode:",  v24);
      id v27 =  createMobileActivationError( (uint64_t)"collection_activity_handler_block_invoke_2",  5008LL,  @"com.apple.MobileActivation.ServerErrorDomain",  v24,  v25,  @"Server error: %ld (%@) / %@ / %@",  v24,  v26,  v10,  v58);

      uint64_t v28 = *(void *)(a1 + 96);
      uint64_t v29 =  +[NSHTTPURLResponse localizedStringForStatusCode:]( &OBJC_CLASS___NSHTTPURLResponse,  "localizedStringForStatusCode:",  v28);
      id v2 =  createMobileActivationError( (uint64_t)"collection_activity_handler_block_invoke_2",  5008LL,  @"com.apple.MobileActivation.ErrorDomain",  -6LL,  v27,  @"Server error: %ld (%@) / %@ / %@",  v28,  v29,  v10,  v58);

      uint64_t v30 = v27;
      id v9 = v58;

      char v17 = 0;
      id v3 = 0LL;
      id v4 = 0LL;
      id v5 = 0LL;
      id v6 = 0LL;
      id v7 = 0LL;
      id v8 = 0LL;
      if (!v2) {
        goto LABEL_24;
      }
      goto LABEL_17;
    }

    if (*(void *)(a1 + 56))
    {
      id v46 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
      id v3 = [v46 copyAnswer:@"BuildVersion"];

      id v47 = isNSString(v3);
      if (v47)
      {
        id v7 = -[MACollectionInterface initWithContext:]( objc_alloc(&OBJC_CLASS___MACollectionInterface),  "initWithContext:",  *(void *)(a1 + 32));
        if (v7)
        {
          uint64_t v48 = *(void *)(a1 + 56);
          id v61 = 0LL;
          id v8 =  +[NSJSONSerialization JSONObjectWithData:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "JSONObjectWithData:options:error:",  v48,  0LL,  &v61);
          id v49 = v61;
          unsigned int v50 = v49;
          if (v8)
          {
            id v6 = [v8 objectForKeyedSubscript:@"suinfo"];
            id v51 = isNSString(v6);

            if (v51)
            {
              id v5 = -[NSData initWithBase64EncodedString:options:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBase64EncodedString:options:",  v6,  1LL);
              if (v5)
              {
                id v60 = v50;
                unsigned __int8 v52 = -[MACollectionInterface processSUInfo:withError:](v7, "processSUInfo:withError:", v5, &v60);
                id v2 = (NSError *)v60;

                if ((v52 & 1) != 0)
                {
                  data_ark_remove(*(void **)(a1 + 32), 0LL, @"PCRTToken");
                  id v4 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"x-iservice-token"];
                  id v53 = isNSString(v4);

                  if (v53) {
                    data_ark_set(*(void **)(a1 + 32), 0LL, @"PCRTToken", v4, 1);
                  }
                  data_ark_set(*(void **)(a1 + 32), 0LL, @"CollectionLastPerformed", v3, 1);
                  data_ark_remove(*(void **)(a1 + 32), 0LL, @"CollectionRetryAttempt");
                  id v54 = copyLoggingHandle();
                  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "Successfully performed collection.",  buf,  2u);
                  }

                  char v17 = 1;
                }

                else
                {
                  uint64_t v55 =  createMobileActivationError( (uint64_t)"collection_activity_handler_block_invoke_2",  5048LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to process SUInfo: %@",  v2);

                  char v17 = 0;
                  id v4 = 0LL;
                  id v2 = v55;
                }
              }

              else
              {
                id v2 =  createMobileActivationError( (uint64_t)"collection_activity_handler_block_invoke_2",  5043LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to decode SUInfo.");

                char v17 = 0;
                id v4 = 0LL;
              }
            }

            else
            {
              id v2 =  createMobileActivationError( (uint64_t)"collection_activity_handler_block_invoke_2",  5037LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid SUInfo: %@",  v6);

              char v17 = 0;
              id v4 = 0LL;
              id v5 = 0LL;
            }
          }

          else
          {
            id v2 =  createMobileActivationError( (uint64_t)"collection_activity_handler_block_invoke_2",  5031LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to deserialize JSON data: %@",  v49);

            char v17 = 0;
            id v4 = 0LL;
            id v5 = 0LL;
            id v6 = 0LL;
          }

LABEL_17:
  char v56 = v17;
  id v57 = v3;
  id v31 = v10;
  id v32 = v9;
  uint64_t v33 = copyLoggingHandle();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    id v63 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Failed to perform collection: %{public}@",  buf,  0xCu);
  }

  if (!*(void *)(a1 + 96))
  {
    id v9 = v32;
    id v10 = v31;
    id v3 = v57;
    if ((v56 & 1) != 0) {
      goto LABEL_32;
    }
    goto LABEL_27;
  }

  id v9 = v32;
  if ((mobileactivationErrorHasDomainAndErrorCode( v2,  @"com.apple.MobileActivation.ErrorDomain",  (id)0xFFFFFFFFFFFFFFEALL) & 1) == 0) {
    writeSplunkLog( *(void **)(a1 + 32),  16LL,  *(void *)(a1 + 96),  (uint64_t)"collection_activity_handler_block_invoke",  5074,  0LL,  @"%@",  v34,  (uint64_t)v2);
  }
  id v10 = v31;
  id v3 = v57;
  char v17 = v56;
  if (*(void *)(a1 + 96) == 403LL) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = 86400;
  }
LABEL_24:
  if ((v17 & 1) != 0) {
    goto LABEL_32;
  }
LABEL_27:
  id v59 = v9;
  id v35 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"CollectionRetryAttempt");
  uint64_t v36 = *(void *)(*(void *)(a1 + 80) + 8LL);
  id v37 = *(void **)(v36 + 40);
  *(void *)(v36 + 40) = v35;

  id v38 = isNSNumber(*(void **)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL));
  if (!v38)
  {
    uint64_t v39 = *(void *)(*(void *)(a1 + 80) + 8LL);
    id v40 = *(void **)(v39 + 40);
    *(void *)(v39 + 40) = &off_10026D530;
  }

  [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) doubleValue];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = (exp2(v41) * 60.0);
  int v42 = copyLoggingHandle();
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    int v43 = *(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL);
    *(_DWORD *)buf = 67109120;
    LODWORD(v63) = v43;
    _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Rescheduling collection for %d seconds.",  buf,  8u);
  }

  scheduleXPCActivity( *(void **)(a1 + 32),  (const char *)[@"com.apple.mobileactivationd.collection" UTF8String],  *(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 8) + 24),  1,  0x5000u,  0x1000u,  &__block_literal_global_353);
  id v9 = v59;
LABEL_32:
  uint64_t v44 = *(void *)(*(void *)(a1 + 88) + 8LL);
  uint64_t v45 = *(void **)(v44 + 40);
  *(void *)(v44 + 40) = 0LL;
}

    __break(0x5519u);
  }

  id v7 = a1[1];
  if (*a1 > v7) {
    goto LABEL_17;
  }
  id v11 = *a1;
  id v12 = v7;
  id v8 = ccder_blob_decode_tl(&v11, 24LL, &v13);
  uint64_t result = 0LL;
  if (v8)
  {
    id v6 = v13;
    if (v13 == 15) {
      goto LABEL_8;
    }
  }

  return result;
}

        __break(0x5513u);
        goto LABEL_18;
      }
    }
  }

  return result;
}

void __collection_activity_handler_block_invoke_352(id a1, DataArk *a2)
{
}

void __copy_helper_block_e8_32s40s48s56s64r72r80r88r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  id v6 = *(id *)(a2 + 48);
  id v7 = *(id *)(a2 + 56);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 8);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 8);
  _Block_object_assign((void *)(a1 + 80), *(const void **)(a2 + 80), 8);
  _Block_object_assign((void *)(a1 + 88), *(const void **)(a2 + 88), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64r72r80r88r(uint64_t a1)
{
}

void __copy_helper_block_e8_32s40r48r56r64r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 8);
  _Block_object_assign((void *)(a1 + 48), *(const void **)(a2 + 48), 8);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 8);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 8);
}

void __destroy_helper_block_e8_32s40r48r56r64r(uint64_t a1)
{
}

void __ucrt_oob_activity_handler_block_invoke(uint64_t a1)
{
}

void __ucrt_oob_activity_handler_block_invoke_2(id a1, DataArk *a2)
{
}

void __ucrt_oob_activity_handler_block_invoke_3(uint64_t a1)
{
  uint64_t v101 = 0LL;
  uint64_t v102 = &v101;
  uint64_t v103 = 0x3032000000LL;
  int v104 = __Block_byref_object_copy__4;
  uint64_t v105 = __Block_byref_object_dispose__4;
  id v106 = 0LL;
  uint64_t v95 = 0LL;
  id v96 = &v95;
  uint64_t v97 = 0x3032000000LL;
  id v98 = __Block_byref_object_copy__4;
  id v99 = __Block_byref_object_dispose__4;
  id v100 = 0LL;
  uint64_t v91 = 0LL;
  id v92 = &v91;
  uint64_t v93 = 0x2020000000LL;
  int v94 = 0;
  uint64_t v85 = 0LL;
  int v86 = &v85;
  uint64_t v87 = 0x3032000000LL;
  id v88 = __Block_byref_object_copy__4;
  uint64_t v89 = __Block_byref_object_dispose__4;
  id v90 = 0LL;
  uint64_t v79 = 0LL;
  id v80 = &v79;
  uint64_t v81 = 0x3032000000LL;
  id v82 = __Block_byref_object_copy__4;
  uint64_t v83 = __Block_byref_object_dispose__4;
  id v84 = 0LL;
  uint64_t v73 = 0LL;
  char v74 = &v73;
  uint64_t v75 = 0x3032000000LL;
  id v76 = __Block_byref_object_copy__4;
  uint64_t v77 = __Block_byref_object_dispose__4;
  id v78 = &__kCFBooleanFalse;
  uint64_t v67 = 0LL;
  char v68 = &v67;
  uint64_t v69 = 0x3032000000LL;
  char v70 = __Block_byref_object_copy__4;
  uint64_t v71 = __Block_byref_object_dispose__4;
  id v72 = &__kCFBooleanFalse;
  char v66 = 0;
  id v2 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"UIKUpgradeRequired");
  id v3 = (void *)v68[5];
  v68[5] = (uint64_t)v2;

  id v4 = isNSNumber((void *)v68[5]);
  BOOL v5 = v4 == 0LL;

  if (v5)
  {
    id v6 = (void *)v68[5];
    v68[5] = (uint64_t)&__kCFBooleanFalse;
  }

  if ([(id)v68[5] BOOLValue])
  {
    id v7 = copyUCRT(*(void **)(a1 + 32), 0LL);
    id v8 = v7;
    if (v7)
    {
      id v65 = 0LL;
      char v9 = deleteLegacyUIKIfMismatched(v7, &v66, (NSError **)&v65);
      id v10 = v65;
      if ((v9 & 1) == 0)
      {
        id v11 = copyLoggingHandle();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT)) {
          __ucrt_oob_activity_handler_block_invoke_3_cold_1();
        }
      }

      if (v66)
      {
        maLog((uint64_t)"ucrt_oob_activity_handler_block_invoke", 0LL, @"Legacy UIK purged.");
        if (certificatePublicKeyMatchesSystemPublicKey(2LL, 2LL, v8, 0LL))
        {
          id v12 = (void *)v68[5];
          v68[5] = (uint64_t)&__kCFBooleanFalse;

          data_ark_remove(*(void **)(a1 + 32), 0LL, @"UIKUpgradeRequired");
        }
      }
    }
  }

  else
  {
    id v8 = 0LL;
  }

  id v13 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"UCRTUpgradeRequired");
  id v14 = (void *)v80[5];
  v80[5] = (uint64_t)v13;

  id v15 = isNSNumber((void *)v80[5]);
  BOOL v16 = v15 == 0LL;

  if (v16)
  {
    char v17 = (void *)v80[5];
    v80[5] = (uint64_t)&__kCFBooleanFalse;
  }

  id v18 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"UCRTHealingRequired");
  int v19 = (void *)v74[5];
  v74[5] = (uint64_t)v18;

  id v20 = isNSNumber((void *)v74[5]);
  BOOL v21 = v20 == 0LL;

  if (v21)
  {
    id v22 = (void *)v74[5];
    v74[5] = (uint64_t)&__kCFBooleanFalse;
  }

  if (ucrtOOBAlreadyPerformed(*(void **)(a1 + 32))
    && ([(id)v80[5] BOOLValue] & 1) == 0
    && ([(id)v74[5] BOOLValue] & 1) == 0
    && ![(id)v68[5] BOOLValue])
  {
    uint64_t v34 = 0LL;
    id v35 = 0LL;
    goto LABEL_28;
  }

  id v23 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"ActivationState");
  id v24 = isNSString(v23);
  __int128 v25 = (void *)v102[5];
  v102[5] = (uint64_t)v24;

  if (use_hactivation()
    || is_virtual_machine()
    || ([(id)v102[5] isEqualToString:@"Activated"] & 1) == 0)
  {
    data_ark_remove(*(void **)(a1 + 32), 0LL, @"UCRTUpgradeRequired");
    data_ark_remove(*(void **)(a1 + 32), 0LL, @"UCRTHealingRequired");
    data_ark_remove(*(void **)(a1 + 32), 0LL, @"UIKUpgradeRequired");
    uint64_t v34 = 0LL;
    id v35 = 0LL;
    goto LABEL_28;
  }

  id v26 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"UCRTOOBRetryAttempt");
  id v27 = (void *)v96[5];
  v96[5] = (uint64_t)v26;

  id v28 = isNSNumber((void *)v96[5]);
  BOOL v29 = v28 == 0LL;

  if (v29)
  {
    uint64_t v33 = (void *)v96[5];
    v96[5] = (uint64_t)&off_10026D530;
  }

  else
  {
    uint64_t v30 =  +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  (char *)[(id)v96[5] unsignedLongLongValue] + 1);
    id v31 = (void *)v96[5];
    v96[5] = (uint64_t)v30;

    id v32 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:");
    uint64_t v33 = (void *)v96[5];
    v96[5] = (uint64_t)v32;
  }

LABEL_34:
  data_ark_set(*(void **)(a1 + 32), 0LL, @"UCRTOOBRetryAttempt", (void *)v96[5], 1);
  [(id)v96[5] doubleValue];
  double v37 = exp2(v36);
  *((_DWORD *)v92 + 6) = (v37 * 60.0);
  id v35 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"UCRTIssuanceInFlight");
  id v38 = isNSNumber(v35);
  BOOL v39 = v38 == 0LL;

  if (v39)
  {

    id v35 = &__kCFBooleanFalse;
  }

  if ([v35 BOOLValue])
  {
    id v40 = copyLoggingHandle();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      int v41 = *((_DWORD *)v92 + 6);
      *(_DWORD *)buf = 67109120;
      int v110 = v41;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "UCRT request is in flight, rescheduling UCRT OOB for %d seconds.",  buf,  8u);
    }

    int v42 = *(void **)(a1 + 32);
    int v43 = (const char *)[@"com.apple.mobileactivationd.UCRT.OOB" UTF8String];
    uint64_t v44 = &__block_literal_global_356;
LABEL_47:
    scheduleXPCActivity(v42, v43, *((_DWORD *)v92 + 6), 1, 0x3000u, 0x1000u, v44);
    uint64_t v34 = 0LL;
    goto LABEL_28;
  }

  if (!collectionAlreadyPerformed(*(void **)(a1 + 32)))
  {
    id v46 = copyLoggingHandle();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      int v47 = *((_DWORD *)v92 + 6);
      *(_DWORD *)buf = 67109120;
      int v110 = v47;
      _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "Collection not performed yet. Rescheduling UCRT OOB for %d seconds.",  buf,  8u);
    }

    int v42 = *(void **)(a1 + 32);
    int v43 = (const char *)[@"com.apple.mobileactivationd.UCRT.OOB" UTF8String];
    uint64_t v44 = &__block_literal_global_358;
    goto LABEL_47;
  }

  BOOL v45 = ([(id)v74[5] BOOLValue] & 1) != 0
     || [(id)v68[5] BOOLValue];
  uint64_t v48 = copyLoggingHandle();
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Performing UCRT OOB.", buf, 2u);
  }

  uint64_t v49 = os_transaction_create([@"com.apple.mobileactivationd.UCRT.OOB" UTF8String]);
  unsigned int v50 = (void *)v86[5];
  v86[5] = v49;

  data_ark_set(*(void **)(a1 + 32), 0LL, @"UCRTIssuanceInFlight", &__kCFBooleanTrue, 0);
  char v107 = @"UseCommittedUIK";
  id v51 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", !v45);
  char v108 = v51;
  uint64_t v34 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v108,  &v107,  1LL);

  unsigned __int8 v52 = *(void **)(a1 + 32);
  id v53 = copy_current_process_name();
  v54[0] = _NSConcreteStackBlock;
  v54[1] = 3254779904LL;
  v54[2] = __ucrt_oob_activity_handler_block_invoke_361;
  _OWORD v54[3] = &__block_descriptor_98_e8_32s40r48r56r64r72r80r88r_e48_v40__0__NSData_8__NSDictionary_16q24__NSError_32l;
  char v56 = &v67;
  id v55 = *(id *)(a1 + 32);
  id v57 = &v79;
  id v58 = &v73;
  id v59 = &v101;
  BOOL v63 = v45;
  char v64 = 1;
  id v60 = &v95;
  id v61 = &v91;
  char v62 = &v85;
  performUCRTOOB(v52, v45, v53, v34, v54);

LABEL_28:
  if (v8) {
    CFRelease(v8);
  }

  _Block_object_dispose(&v67, 8);
  _Block_object_dispose(&v73, 8);

  _Block_object_dispose(&v79, 8);
  _Block_object_dispose(&v85, 8);

  _Block_object_dispose(&v91, 8);
  _Block_object_dispose(&v95, 8);

  _Block_object_dispose(&v101, 8);
}

void sub_1000308B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43)
{
}

void __ucrt_oob_activity_handler_block_invoke_355(id a1, DataArk *a2)
{
}

void __ucrt_oob_activity_handler_block_invoke_357(id a1, DataArk *a2)
{
}

void __ucrt_oob_activity_handler_block_invoke_361(uint64_t a1, id a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3254779904LL;
  block[2] = __ucrt_oob_activity_handler_block_invoke_2_362;
  block[3] = &__block_descriptor_130_e8_32s40s48s56s64r72r80r88r96r104r112r_e5_v8__0l;
  id v12 = *(void **)(a1 + 32);
  uint64_t v25 = *(void *)(a1 + 40);
  id v13 = v12;
  __int128 v14 = *(_OWORD *)(a1 + 64);
  __int128 v26 = *(_OWORD *)(a1 + 48);
  __int128 v27 = v14;
  uint64_t v29 = a4;
  id v21 = v13;
  id v22 = v11;
  __int16 v30 = *(_WORD *)(a1 + 96);
  id v23 = v9;
  id v24 = v10;
  __int128 v28 = *(_OWORD *)(a1 + 80);
  id v15 = v10;
  id v16 = v9;
  id v17 = v11;
  dispatch_block_t v18 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, block);
  int v19 = (dispatch_queue_s *)copyMobileActivationSerialQueue();
  dispatch_async(v19, v18);
}

void __ucrt_oob_activity_handler_block_invoke_2_362(uint64_t a1)
{
  id v2 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"UIKUpgradeRequired");
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  id v5 = isNSNumber(*(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL));
  if (!v5)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 64) + 8LL);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = &__kCFBooleanFalse;
  }

  id v8 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"UCRTUpgradeRequired");
  uint64_t v9 = *(void *)(*(void *)(a1 + 72) + 8LL);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  id v11 = isNSNumber(*(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL));
  if (!v11)
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 72) + 8LL);
    id v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = &__kCFBooleanFalse;
  }

  id v14 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"UCRTHealingRequired");
  uint64_t v15 = *(void *)(*(void *)(a1 + 80) + 8LL);
  id v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v14;

  id v17 = isNSNumber(*(void **)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL));
  if (!v17)
  {
    uint64_t v18 = *(void *)(*(void *)(a1 + 80) + 8LL);
    int v19 = *(void **)(v18 + 40);
    *(void *)(v18 + 40) = &__kCFBooleanFalse;
  }

  if (ucrtOOBAlreadyPerformed(*(void **)(a1 + 32))
    && ([*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) BOOLValue] & 1) == 0
    && ([*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) BOOLValue] & 1) == 0
    && ![*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) BOOLValue])
  {
    id v24 = 0LL;
    uint64_t v25 = 0LL;
    id v26 = 0LL;
    id v27 = 0LL;
    __int128 v28 = 0LL;
    id v29 = 0LL;
    __int16 v30 = 0LL;
    goto LABEL_48;
  }

  id v20 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"ActivationState");
  id v21 = isNSString(v20);
  uint64_t v22 = *(void *)(*(void *)(a1 + 88) + 8LL);
  id v23 = *(void **)(v22 + 40);
  *(void *)(v22 + 40) = v21;

  id v24 = 0LL;
  uint64_t v25 = 0LL;
  id v26 = 0LL;
  id v27 = 0LL;
  __int128 v28 = 0LL;
  id v29 = 0LL;
  __int16 v30 = 0LL;
  if (![*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) isEqualToString:@"Activated"])
  {
LABEL_48:
    data_ark_remove(*(void **)(a1 + 32), 0LL, @"UCRTUpgradeRequired");
    data_ark_remove(*(void **)(a1 + 32), 0LL, @"UCRTHealingRequired");
    data_ark_remove(*(void **)(a1 + 32), 0LL, @"UIKUpgradeRequired");
    goto LABEL_58;
  }

  id v24 = *(NSNumber **)(a1 + 120);
  if (v24 != (NSNumber *)200)
  {
    if (!v24)
    {
      __int16 v30 =  createMobileActivationError( (uint64_t)"ucrt_oob_activity_handler_block_invoke_2",  5350LL,  @"com.apple.MobileActivation.ErrorDomain",  -6LL,  *(void **)(a1 + 40),  @"Network communication error.");
LABEL_38:
      uint64_t v25 = 0LL;
      id v26 = 0LL;
LABEL_39:
      id v27 = 0LL;
      __int128 v28 = 0LL;
LABEL_40:
      char v40 = 0;
LABEL_41:
      id v29 = 0LL;
      goto LABEL_42;
    }

    if (v24 != (NSNumber *)-1LL)
    {
      int v41 = *(void **)(a1 + 40);
      int v42 =  +[NSHTTPURLResponse localizedStringForStatusCode:]( &OBJC_CLASS___NSHTTPURLResponse,  "localizedStringForStatusCode:",  v24);
      uint64_t v43 =  createMobileActivationError( (uint64_t)"ucrt_oob_activity_handler_block_invoke_2",  5353LL,  @"com.apple.MobileActivation.ServerErrorDomain",  (uint64_t)v24,  v41,  @"Server error: %ld (%@)",  v24,  v42);

      uint64_t v44 = *(void *)(a1 + 120);
      if (v44 == 403) {
        uint64_t v45 = -5LL;
      }
      else {
        uint64_t v45 = -6LL;
      }
      id v46 =  +[NSHTTPURLResponse localizedStringForStatusCode:]( &OBJC_CLASS___NSHTTPURLResponse,  "localizedStringForStatusCode:",  *(void *)(a1 + 120));
      __int16 v30 =  createMobileActivationError( (uint64_t)"ucrt_oob_activity_handler_block_invoke_2",  5353LL,  @"com.apple.MobileActivation.ErrorDomain",  v45,  v43,  @"Server error: %ld (%@)",  v44,  v46);

      uint64_t v47 = *(void *)(a1 + 120);
      if (v47 == 500)
      {
        if (!*(_BYTE *)(a1 + 128)) {
          goto LABEL_37;
        }
        id v62 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"UCRTOOBForbiddenCount");
        id v63 = isNSNumber(v62);

        if (v63) {
          id v24 =  +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  (char *)[v62 unsignedLongLongValue] + 1);
        }
        else {
          id v24 = (NSNumber *)&off_10026D530;
        }

        data_ark_set(*(void **)(a1 + 32), 0LL, @"UCRTOOBForbiddenCount", v24, 1);
        if (-[NSNumber unsignedLongLongValue](v24, "unsignedLongLongValue") < 0xB) {
          goto LABEL_38;
        }
        char v40 = 1;
        data_ark_set(*(void **)(a1 + 32), 0LL, @"UCRTOOBForbidden", &__kCFBooleanTrue, 1);
      }

      else
      {
        if (v47 != 403)
        {
LABEL_37:
          id v24 = 0LL;
          goto LABEL_38;
        }

        if (!*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 129))
        {
          data_ark_set(*(void **)(a1 + 32), 0LL, @"UCRTHealingRequired", &__kCFBooleanTrue, 1);
          goto LABEL_37;
        }

        char v40 = 1;
        data_ark_set(*(void **)(a1 + 32), 0LL, @"UCRTOOBForbidden", &__kCFBooleanTrue, 1);
        id v24 = 0LL;
      }

      uint64_t v25 = 0LL;
      id v26 = 0LL;
      id v27 = 0LL;
      __int128 v28 = 0LL;
      goto LABEL_41;
    }

    MobileActivationError = createMobileActivationError( (uint64_t)"ucrt_oob_activity_handler_block_invoke_2",  5347LL,  @"com.apple.MobileActivation.ErrorDomain",  -6LL,  *(void **)(a1 + 40),  @"Internal error.");
LABEL_36:
    __int16 v30 = MobileActivationError;
    goto LABEL_37;
  }

  if (!*(void *)(a1 + 48))
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"ucrt_oob_activity_handler_block_invoke_2",  5390LL,  @"com.apple.MobileActivation.ErrorDomain",  -6LL,  *(void **)(a1 + 40),  @"Invalid server response.");
    goto LABEL_36;
  }

  id v26 = [*(id *)(a1 + 56) objectForKeyedSubscript:@"Date"];
  if (!v26)
  {
    __int16 v30 =  createMobileActivationError( (uint64_t)"ucrt_oob_activity_handler_block_invoke_2",  5396LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve server response date.");
    id v24 = 0LL;
    uint64_t v25 = 0LL;
    goto LABEL_39;
  }

  id v32 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  __int128 v28 = v32;
  if (!v32)
  {
    __int16 v30 =  createMobileActivationError( (uint64_t)"ucrt_oob_activity_handler_block_invoke_2",  5402LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate date formatter.");
    id v24 = 0LL;
    uint64_t v25 = 0LL;
    id v27 = 0LL;
    goto LABEL_40;
  }

  id v66 = 0LL;
  id v27 = -[NSDateFormatter dateFromServerString:withError:](v32, "dateFromServerString:withError:", v26, &v66);
  id v33 = v66;
  if (!v27)
  {
    __int16 v30 =  createMobileActivationError( (uint64_t)"ucrt_oob_activity_handler_block_invoke_2",  5408LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v33,  @"Failed to convert date string.");

    id v24 = 0LL;
    uint64_t v25 = 0LL;
    goto LABEL_40;
  }

  id v34 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v29 = [v34 copyAnswer:@"BuildVersion"];

  id v35 = isNSString(v29);
  if (!v35)
  {
    __int16 v30 =  createMobileActivationError( (uint64_t)"ucrt_oob_activity_handler_block_invoke_2",  5414LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve OS build.");

    id v24 = 0LL;
    uint64_t v25 = 0LL;
LABEL_73:
    char v40 = 0;
    goto LABEL_42;
  }

  uint64_t v25 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  if (!v25)
  {
    __int16 v30 =  createMobileActivationError( (uint64_t)"ucrt_oob_activity_handler_block_invoke_2",  5420LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate dictionary.");

    id v24 = 0LL;
    goto LABEL_73;
  }

  double v36 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(_BYTE *)(a1 + 128) == 0);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v25,  "setObject:forKeyedSubscript:",  v36,  @"UseCommittedUIK");

  -[NSMutableDictionary setObject:forKeyedSubscript:]( v25,  "setObject:forKeyedSubscript:",  v27,  @"ServerResponseDate");
  double v37 = *(void **)(a1 + 32);
  id v38 = *(void **)(a1 + 48);
  id v65 = v33;
  LOBYTE(v36) = storeUCRT(v37, v38, v25, &v65);
  __int16 v30 = (NSError *)v65;

  if ((v36 & 1) != 0)
  {
    data_ark_set(*(void **)(a1 + 32), 0LL, @"UCRTOOBLastPerformed", v29, 1);
    data_ark_remove(*(void **)(a1 + 32), 0LL, @"UCRTOOBForbiddenCount");
    data_ark_remove(*(void **)(a1 + 32), 0LL, @"UCRTOOBRetryAttempt");
    BOOL v39 = copyLoggingHandle();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Successfully performed UCRT OOB.", buf, 2u);
    }

    id v24 = 0LL;
    char v40 = 1;
  }

  else
  {
    char v64 =  createMobileActivationError( (uint64_t)"ucrt_oob_activity_handler_block_invoke_2",  5430LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v30,  @"Failed to store UCRT.");

    id v24 = 0LL;
    char v40 = 0;
    __int16 v30 = v64;
  }

  if (!v30) {
    goto LABEL_47;
  }
LABEL_42:
  uint64_t v48 = copyLoggingHandle();
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    char v68 = v30;
    _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "Failed to perform UCRT OOB: %{public}@",  buf,  0xCu);
  }

  if (*(void *)(a1 + 120)
    && (mobileactivationErrorHasDomainAndErrorCode( v30,  @"com.apple.MobileActivation.ErrorDomain",  (id)0xFFFFFFFFFFFFFFEALL) & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 128)) {
      uint64_t v50 = 31LL;
    }
    else {
      uint64_t v50 = 15LL;
    }
    writeSplunkLog( *(void **)(a1 + 32),  v50,  *(void *)(a1 + 120),  (uint64_t)"ucrt_oob_activity_handler_block_invoke",  5450,  0LL,  @"%@",  v49,  (uint64_t)v30);
    if ((v40 & 1) != 0) {
      goto LABEL_48;
    }
  }

  else
  {
LABEL_47:
    if ((v40 & 1) != 0) {
      goto LABEL_48;
    }
  }

  id v51 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"UCRTOOBRetryAttempt");
  uint64_t v52 = *(void *)(*(void *)(a1 + 96) + 8LL);
  id v53 = *(void **)(v52 + 40);
  *(void *)(v52 + 40) = v51;

  id v54 = isNSNumber(*(void **)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL));
  if (!v54)
  {
    uint64_t v55 = *(void *)(*(void *)(a1 + 96) + 8LL);
    char v56 = *(void **)(v55 + 40);
    *(void *)(v55 + 40) = &off_10026D530;
  }

  [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) doubleValue];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 24LL) = (exp2(v57) * 60.0);
  id v58 = copyLoggingHandle();
  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
  {
    int v59 = *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 24LL);
    *(_DWORD *)buf = 67109120;
    LODWORD(v6_Block_object_dispose((const void *)(v43 - 160), 8) = v59;
    _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "Rescheduling UCRT OOB for %d seconds.",  buf,  8u);
  }

  scheduleXPCActivity( *(void **)(a1 + 32),  (const char *)[@"com.apple.mobileactivationd.UCRT.OOB" UTF8String],  *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8) + 24),  1,  0x3000u,  0x1000u,  &__block_literal_global_364);
LABEL_58:
  data_ark_set(*(void **)(a1 + 32), 0LL, @"UCRTIssuanceInFlight", &__kCFBooleanFalse, 0);
  uint64_t v60 = *(void *)(*(void *)(a1 + 112) + 8LL);
  id v61 = *(void **)(v60 + 40);
  *(void *)(v60 + 40) = 0LL;
}

void __ucrt_oob_activity_handler_block_invoke_363(id a1, DataArk *a2)
{
}

void __copy_helper_block_e8_32s40s48s56s64r72r80r88r96r104r112r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  id v6 = *(id *)(a2 + 48);
  id v7 = *(id *)(a2 + 56);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 8);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 8);
  _Block_object_assign((void *)(a1 + 80), *(const void **)(a2 + 80), 8);
  _Block_object_assign((void *)(a1 + 88), *(const void **)(a2 + 88), 8);
  _Block_object_assign((void *)(a1 + 96), *(const void **)(a2 + 96), 8);
  _Block_object_assign((void *)(a1 + 104), *(const void **)(a2 + 104), 8);
  _Block_object_assign((void *)(a1 + 112), *(const void **)(a2 + 112), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64r72r80r88r96r104r112r(uint64_t a1)
{
}

void __copy_helper_block_e8_32s40r48r56r64r72r80r88r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 8);
  _Block_object_assign((void *)(a1 + 48), *(const void **)(a2 + 48), 8);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 8);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 8);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 8);
  _Block_object_assign((void *)(a1 + 80), *(const void **)(a2 + 80), 8);
  _Block_object_assign((void *)(a1 + 88), *(const void **)(a2 + 88), 8);
}

void __destroy_helper_block_e8_32s40r48r56r64r72r80r88r(uint64_t a1)
{
}

NSMutableArray *copy_splunk_log_array(uint64_t a1, void *a2)
{
  uint64_t v25 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  if (!v25)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"copy_splunk_log_array",  6054LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate array.");
    goto LABEL_22;
  }

  uint64_t v3 = copySortedSplunkFileList();
  if (!v3)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"copy_splunk_log_array",  6060LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query splunk file list.");
LABEL_22:
    id v6 = MobileActivationError;
    uint64_t v18 = 0LL;
    int v19 = 0LL;
    if (!a2) {
      goto LABEL_28;
    }
    goto LABEL_26;
  }

  uint64_t v22 = v3;
  id v23 = a2;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  id obj = -[NSMutableArray reverseObjectEnumerator](v3, "reverseObjectEnumerator");
  id v4 = [obj countByEnumeratingWithState:&v28 objects:v36 count:16];
  if (v4)
  {
    id v5 = v4;
    id v6 = 0LL;
    uint64_t v7 = *(void *)v29;
    do
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v29 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void *)(*((void *)&v28 + 1) + 8LL * (void)i);
        id v10 = objc_alloc(&OBJC_CLASS___NSData);
        id v27 = v6;
        id v11 = -[NSData initWithContentsOfFile:options:error:]( v10,  "initWithContentsOfFile:options:error:",  v9,  0LL,  &v27);
        uint64_t v12 = (NSError *)v27;

        if (v11)
        {
          -[NSMutableArray addObject:](v25, "addObject:", v11);
        }

        else
        {
          id v13 = copyLoggingHandle();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 138412546;
            uint64_t v33 = v9;
            __int16 v34 = 2112;
            id v35 = v12;
            _os_log_fault_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Failed to load %@: %@", buf, 0x16u);
          }
        }

        id v14 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
        id v26 = v12;
        unsigned __int8 v15 = -[NSFileManager removeItemAtPath:error:](v14, "removeItemAtPath:error:", v9, &v26);
        id v6 = (NSError *)v26;

        if ((v15 & 1) == 0)
        {
          id v16 = copyLoggingHandle();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 138412546;
            uint64_t v33 = v9;
            __int16 v34 = 2112;
            id v35 = v6;
            _os_log_fault_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_FAULT,  "Failed to delete %@: %@",  buf,  0x16u);
          }
        }
      }

      id v5 = [obj countByEnumeratingWithState:&v28 objects:v36 count:16];
    }

    while (v5);
  }

  else
  {
    id v6 = 0LL;
  }

  int v19 = v25;
  uint64_t v18 = v22;
  a2 = v23;
  if (v23)
  {
LABEL_26:
    if (!v19) {
      *a2 = v6;
    }
  }

LABEL_28:
  id v20 = v19;
  return v20;
}

          __break(0x5519u);
        }

        id v11 = 0xAAAAAAAAAAAAAAAALL;
        uint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
        if (v8 > v9 || v9 > v14) {
          goto LABEL_28;
        }
        id v11 = v9;
        uint64_t v12 = v14;
        uint64_t result = ccder_blob_decode_tl(&v11, 5LL, &v15);
        if (!(_DWORD)result) {
          return result;
        }
        if (v11 != v14) {
          return 0LL;
        }
        if (!__CFADD__(v11, v15))
        {
          id v10 = v11 + v15;
          if (v11 + v15 <= a1[1] && *a1 <= v10)
          {
            *a1 = v10;
            return 1LL;
          }

          goto LABEL_28;
        }
      }
    }

    __break(0x5513u);
  }

  return result;
}

uint64_t perform_sydro_data_migration_tasks(void *a1, NSMutableDictionary *a2)
{
  id v248 = a1;
  SecCertificateRef certificate = 0LL;
  CFTypeRef v303 = 0LL;
  int v302 = -1;
  if ((preSydroDataMigrationCompleted(v248) & 1) != 0)
  {
    id v257 = 0LL;
    SecAccessControlRef cf = 0LL;
    v236 = 0LL;
    id v237 = 0LL;
    id v265 = 0LL;
    uint64_t v3 = 0LL;
    v221 = 0LL;
    v222 = 0LL;
    id v224 = 0LL;
    v232 = 0LL;
    v233 = 0LL;
    id v4 = 0LL;
    id v5 = 0LL;
    v234 = 0LL;
    v235 = 0LL;
    id v253 = 0LL;
    v255 = 0LL;
    id v229 = 0LL;
    v230 = 0LL;
    v250 = 0LL;
    v251 = 0LL;
    CFDataRef v241 = 0LL;
    CFDataRef v242 = 0LL;
    v220 = 0LL;
    v243 = 0LL;
    v244 = 0LL;
    id v6 = 0LL;
    v231 = 0LL;
    id v7 = 0LL;
    v225 = 0LL;
    id v227 = 0LL;
    id v223 = 0LL;
    v246 = 0LL;
    id v8 = 0LL;
    v228 = 0LL;
    a2 = 0LL;
    id v249 = 0LL;
    id v9 = 0LL;
    id v10 = 0LL;
    id v240 = 0LL;
    v262 = 0LL;
    uint64_t v11 = 1LL;
    goto LABEL_38;
  }

  id v12 = copy_ucrt_path();
  id v229 = v12;
  if (!v12)
  {
    v262 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1104LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy UCRT path.");
    id v240 = 0LL;
    id v10 = 0LL;
    id v9 = 0LL;
    id v27 = 0LL;
    v228 = 0LL;
    __int128 v31 = 0LL;
    v246 = 0LL;
    id v32 = 0LL;
    id v223 = 0LL;
    id v224 = 0LL;
    v220 = 0LL;
    id v4 = 0LL;
    uint64_t v33 = 0LL;
    v222 = 0LL;
    uint64_t v3 = 0LL;
    id v34 = 0LL;
    id v35 = 0LL;
    id v36 = 0LL;
LABEL_34:
    id v257 = v36;
    SecAccessControlRef cf = v33;
    id v253 = v32;
    id v237 = v35;
    id v265 = v34;
    id v249 = v27;
    if (a2)
    {
      uint64_t v48 = v4;
      uint64_t v49 = v262;
      id v4 = v48;
      uint64_t v11 = 0LL;
      v232 = 0LL;
      v233 = 0LL;
      v221 = 0LL;
      id v5 = 0LL;
      v234 = 0LL;
      v235 = 0LL;
      v255 = 0LL;
      v230 = 0LL;
      v231 = 0LL;
      v236 = 0LL;
      v250 = 0LL;
      v251 = 0LL;
      CFDataRef v241 = 0LL;
      CFDataRef v242 = 0LL;
      v243 = 0LL;
      v244 = 0LL;
      id v6 = 0LL;
      id v7 = 0LL;
      id v227 = 0LL;
      id v8 = 0LL;
      uint64_t v50 = a2;
      a2 = 0LL;
      v262 = v49;
      v50->super.super.isa = (Class)v49;
    }

    else
    {
      uint64_t v11 = 0LL;
      v232 = 0LL;
      v233 = 0LL;
      v221 = 0LL;
      id v5 = 0LL;
      v234 = 0LL;
      v235 = 0LL;
      v255 = 0LL;
      v230 = 0LL;
      v231 = 0LL;
      v236 = 0LL;
      v250 = 0LL;
      v251 = 0LL;
      CFDataRef v241 = 0LL;
      CFDataRef v242 = 0LL;
      v243 = 0LL;
      v244 = 0LL;
      id v6 = 0LL;
      id v7 = 0LL;
      id v227 = 0LL;
      id v8 = 0LL;
    }

    v225 = v31;
    goto LABEL_38;
  }

  v245 = a2;
  id v13 = (void **)&CCDigest_ptr;
  id v14 = v12;
  unsigned __int8 v15 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
  NSFileAttributeKey v324 = NSFilePosixPermissions;
  v325 = &off_10026D548;
  id v16 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v325,  &v324,  1LL);
  id v301 = 0LL;
  unsigned __int8 v17 = -[NSFileManager createDirectoryAtPath:withIntermediateDirectories:attributes:error:]( v15,  "createDirectoryAtPath:withIntermediateDirectories:attributes:error:",  v14,  1LL,  v16,  &v301);
  id v18 = v301;

  if ((v17 & 1) == 0)
  {
    v262 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1109LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v18,  @"Failed to create %@.",  v14);

    id v240 = 0LL;
    id v10 = 0LL;
    id v9 = 0LL;
    id v27 = 0LL;
    v228 = 0LL;
    __int128 v31 = 0LL;
    v246 = 0LL;
    id v32 = 0LL;
    id v223 = 0LL;
    id v224 = 0LL;
    v220 = 0LL;
    id v4 = 0LL;
    uint64_t v33 = 0LL;
    v222 = 0LL;
    id v34 = 0LL;
    id v35 = 0LL;
    id v36 = 0LL;
LABEL_32:
    uint64_t v3 = 0LL;
    goto LABEL_33;
  }

  id v19 = [v14 stringByAppendingPathComponent:@"ucrt.pem"];
  if (!v19)
  {
    v262 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1115LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create UCRT file path.");

    id v240 = 0LL;
    id v10 = 0LL;
    id v9 = 0LL;
    id v27 = 0LL;
    v228 = 0LL;
    goto LABEL_17;
  }

  id v20 = v19;
  id v300 = v18;
  load_certificate( (CFTypeRef *)&certificate,  @"lockdown-identities",  @"com.apple.mobileactivation.ucrt",  &v302,  &v300);
  id v21 = (NSError *)v300;

  if (v302 != -25300 && v302)
  {
    v262 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1121LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v21,  @"Failed to query keychain.");
    double v37 = v21;
    goto LABEL_29;
  }

  if (certificate)
  {
    maLog((uint64_t)"perform_sydro_data_migration_tasks", 0LL, @"Migrating UCRT from the keychain.");
    CFDataRef v22 = SecCertificateCopyData(certificate);
    id v10 = (NSDictionary *)v22;
    if (!v22)
    {
      v262 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1130LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy UCRT certificate data.");

      id v240 = 0LL;
LABEL_30:
      id v9 = 0LL;
      v228 = 0LL;
LABEL_31:
      __int128 v31 = 0LL;
      v246 = 0LL;
      id v32 = 0LL;
      id v223 = 0LL;
      id v224 = 0LL;
      v220 = 0LL;
      id v4 = 0LL;
      uint64_t v33 = 0LL;
      v222 = 0LL;
      id v34 = 0LL;
      id v35 = 0LL;
      id v36 = 0LL;
      id v27 = v20;
      goto LABEL_32;
    }

    id v299 = v21;
    id v23 = lockcrypto_create_pem(v22, "CERTIFICATE", &v299);
    id v24 = (NSError *)v299;
    uint64_t v25 = v21;
    id v26 = v23;

    if (v23)
    {
      id v298 = v24;
      id v27 = v20;
      v228 = v26;
      char v28 = store_data(v20, v26, &v298);
      id v29 = v298;

      if ((v28 & 1) != 0)
      {
        id v297 = v29;
        char v30 = delete_certificate( @"lockdown-identities",  @"com.apple.mobileactivation.ucrt",  (NSError **)&v297);
        id v21 = (NSError *)v297;

        if ((v30 & 1) != 0)
        {
          maLog( (uint64_t)"perform_sydro_data_migration_tasks",  0LL,  @"Successfully migrated UCRT from the keychain.");
          goto LABEL_20;
        }

        v262 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1146LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v21,  @"Failed to delete UCRT.");

        id v240 = 0LL;
        id v10 = 0LL;
        id v9 = 0LL;
        goto LABEL_31;
      }

      v262 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1141LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v29,  @"Failed to store UCRT at %@.",  v20);

      id v240 = 0LL;
      id v10 = 0LL;
      id v9 = 0LL;
LABEL_17:
      __int128 v31 = 0LL;
      v246 = 0LL;
      id v32 = 0LL;
      id v223 = 0LL;
      id v224 = 0LL;
      v220 = 0LL;
      id v4 = 0LL;
      uint64_t v33 = 0LL;
      v222 = 0LL;
      uint64_t v3 = 0LL;
      id v34 = 0LL;
      id v35 = 0LL;
      id v36 = 0LL;
      goto LABEL_33;
    }

    v262 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1136LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v24,  @"Failed to create UCRT PEM data.");
    double v37 = v24;
LABEL_29:

    id v240 = 0LL;
    id v10 = 0LL;
    goto LABEL_30;
  }

  v228 = 0LL;
LABEL_20:
  id v249 = v20;
  id v38 = objc_alloc(&OBJC_CLASS___NSData);
  id v307 = 0LL;
  BOOL v39 = -[NSData initWithContentsOfFile:options:error:](v38, "initWithContentsOfFile:options:error:", v249, 0LL, &v307);
  char v40 = (NSError *)v307;
  if (!v39)
  {
    uint64_t v43 = 0LL;
    goto LABEL_27;
  }

  SecCertificateRef v41 = SecCertificateCreateWithData(kCFAllocatorDefault, v39);
  if (v41)
  {
    SecCertificateRef v42 = v41;
    id v306 = v40;
    uint64_t v43 = lockcrypto_create_pem(v39, "CERTIFICATE", &v306);
    uint64_t v44 = (NSError *)v306;

    if (v43)
    {
      id v305 = v44;
      int v45 = store_data(v249, v43, &v305);
      char v40 = (NSError *)v305;

      if (v45)
      {
        CFRelease(v42);
LABEL_27:
        char v46 = 1;
        uint64_t v47 = v21;
        goto LABEL_65;
      }

      double v57 =  createMobileActivationError( (uint64_t)"convert_ucrt_from_der_to_pem",  210LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v40,  @"Failed to store UCRT at %@.",  v249);
      uint64_t v44 = v40;
    }

    else
    {
      double v57 =  createMobileActivationError( (uint64_t)"convert_ucrt_from_der_to_pem",  205LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v44,  @"Failed to create UCRT PEM data.");
    }

    CFRelease(v42);
    uint64_t v47 = v57;
    char v46 = 0;
    char v40 = v47;
  }

  else
  {
    char v46 = 1;
    uint64_t v47 = v21;
    uint64_t v43 = (NSData *)v39;
  }

LABEL_65:
  id v58 = v47;
  if ((v46 & 1) == 0)
  {
    v262 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1156LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v58,  @"Failed to migrate UCRT from DER to PEM.");

    id v240 = 0LL;
    id v10 = 0LL;
    id v9 = 0LL;
    __int128 v31 = 0LL;
    v246 = 0LL;
    id v32 = 0LL;
    id v223 = 0LL;
    id v224 = 0LL;
    v220 = 0LL;
    id v4 = 0LL;
    uint64_t v33 = 0LL;
    v222 = 0LL;
    uint64_t v3 = 0LL;
    id v34 = 0LL;
    id v35 = 0LL;
    id v36 = 0LL;
    id v27 = v249;
    goto LABEL_33;
  }

  id v296 = v58;
  v219 = (NSData *) copy_keychain_data( @"lockdown-identities",  @"com.apple.mobileactivationd.dcrt",  &v302,  &v296);
  int v59 = (NSError *)v296;

  if (v302 != -25300 && v302)
  {
    char v64 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1164LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v59,  @"Failed to query keychain.");

    id v240 = 0LL;
    id v10 = 0LL;
    id v9 = 0LL;
    v246 = 0LL;
    goto LABEL_123;
  }

  if (v219)
  {
    maLog((uint64_t)"perform_sydro_data_migration_tasks", 0LL, @"Migrating DCRT from the keychain.");
    v322[0] = @"UseCommittedDAK";
    v322[1] = @"SkipCertificateValidation";
    v323[0] = &__kCFBooleanTrue;
    v323[1] = &__kCFBooleanTrue;
    uint64_t v60 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v323,  v322,  2LL);
    id v295 = v59;
    char v61 = storeDCRT(v248, v219, v60, &v295);
    id v62 = v295;

    if ((v61 & 1) == 0)
    {
      v246 = v60;
      v262 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1182LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v62,  @"Failed to store DCRT.");

      id v240 = 0LL;
      id v10 = 0LL;
      id v9 = 0LL;
      id v32 = 0LL;
      id v223 = 0LL;
      id v224 = 0LL;
      v220 = 0LL;
      id v4 = 0LL;
      uint64_t v33 = 0LL;
      v222 = 0LL;
      uint64_t v3 = 0LL;
      id v34 = 0LL;
      id v35 = 0LL;
      id v36 = 0LL;
LABEL_124:
      id v27 = v249;
      goto LABEL_125;
    }

    id v294 = v62;
    char v63 = delete_keychain_data( @"lockdown-identities",  @"com.apple.mobileactivationd.dcrt",  (NSError **)&v294);
    int v59 = (NSError *)v294;

    if ((v63 & 1) != 0)
    {
      maLog((uint64_t)"perform_sydro_data_migration_tasks", 0LL, @"Successfully migrated DCRT from the keychain.");
      goto LABEL_75;
    }

    v246 = v60;
    char v64 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1187LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v59,  @"Failed to delete DCRT.");

    id v240 = 0LL;
    id v10 = 0LL;
    id v9 = 0LL;
LABEL_123:
    id v32 = 0LL;
    id v223 = 0LL;
    id v224 = 0LL;
    v220 = 0LL;
    id v4 = 0LL;
    uint64_t v33 = 0LL;
    v222 = 0LL;
    uint64_t v3 = 0LL;
    id v34 = 0LL;
    id v35 = 0LL;
    id v36 = 0LL;
    v262 = v64;
    goto LABEL_124;
  }

  uint64_t v60 = 0LL;
LABEL_75:
  v246 = v60;
  __int128 v292 = 0u;
  __int128 v293 = 0u;
  __int128 v290 = 0u;
  __int128 v291 = 0u;
  id v254 = [&off_10026DAD0 countByEnumeratingWithState:&v290 objects:v321 count:16];
  uint64_t v3 = 0LL;
  if (v254)
  {
    id v265 = 0LL;
    id v35 = 0LL;
    id v36 = 0LL;
    id v252 = *(id *)v291;
    do
    {
      CFTypeRef v65 = 0LL;
      id v66 = v36;
      do
      {
        if (*(id *)v291 != v252) {
          objc_enumerationMutation(&off_10026DAD0);
        }
        uint64_t v67 = *(void **)(*((void *)&v290 + 1) + 8LL * (void)v65);
        id v68 = [v13[70] defaultManager];
        id v263 = v67;
        id v36 = [v68 contentsOfDirectoryAtPath:v67 error:0];

        if ([v36 count])
        {
          CFTypeRef v256 = v65;
          id v69 = copy_activation_records_directory_path();

          char v70 = v13;
          id v71 = [v13[70] defaultManager];
          NSFileAttributeKey v319 = NSFilePosixPermissions;
          v320 = &off_10026D560;
          id v72 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v320,  &v319,  1LL);
          id v289 = v59;
          unsigned __int8 v73 = [v71 createDirectoryAtPath:v69 withIntermediateDirectories:1 attributes:v72 error:&v289];
          char v74 = (NSError *)v289;

          if ((v73 & 1) == 0) {
            maLog((uint64_t)"perform_sydro_data_migration_tasks", 0LL, @"Could not create path %@: %@", v69, v74);
          }
          __int128 v287 = 0u;
          __int128 v288 = 0u;
          __int128 v285 = 0u;
          __int128 v286 = 0u;
          id v258 = v36;
          id cfa = v36;
          id v75 = [cfa countByEnumeratingWithState:&v285 objects:v318 count:16];
          if (v75)
          {
            id v76 = v75;
            uint64_t v77 = *(void *)v286;
            do
            {
              id v78 = 0LL;
              uint64_t v79 = v265;
              id v80 = v35;
              do
              {
                if (*(void *)v286 != v77) {
                  objc_enumerationMutation(cfa);
                }
                uint64_t v81 = *(void *)(*((void *)&v285 + 1) + 8LL * (void)v78);
                id v82 = [v263 stringByAppendingPathComponent:v81];

                id v83 = [v69 stringByAppendingPathComponent:v81];
                maLog((uint64_t)"perform_sydro_data_migration_tasks", 0LL, @"Migrating %@ to %@", v82, v83);
                id v84 = [v70[70] defaultManager];
                id v284 = v74;
                id v265 = v83;
                LOBYTE(v83) = [v84 copyItemAtPath:v82 toPath:v83 error:&v284];
                id v85 = v284;

                id v86 = [v70[70] defaultManager];
                id v283 = v85;
                unsigned __int8 v87 = [v86 removeItemAtPath:v82 error:&v283];
                char v74 = (NSError *)v283;

                if ((v87 & 1) == 0) {
                  maLog((uint64_t)"perform_sydro_data_migration_tasks", 0LL, @"Failed to delete %@: %@", v82, v74);
                }
                id v78 = (char *)v78 + 1;
                uint64_t v79 = v265;
                id v80 = v82;
              }

              while (v76 != v78);
              id v35 = v82;
              id v76 = [cfa countByEnumeratingWithState:&v285 objects:v318 count:16];
            }

            while (v76);
          }

          int v59 = v74;
          uint64_t v3 = v69;
          id v13 = v70;
          CFTypeRef v65 = v256;
          id v36 = v258;
        }

        CFTypeRef v65 = (char *)v65 + 1;
        id v66 = v36;
      }

      while (v65 != v254);
      id v254 = [&off_10026DAD0 countByEnumeratingWithState:&v290 objects:v321 count:16];
    }

    while (v254);
  }

  else
  {
    id v265 = 0LL;
    id v35 = 0LL;
    id v36 = 0LL;
  }

  id v88 = [v13[70] defaultManager];
  unsigned int v89 = [v88 fileExistsAtPath:@"/private/var/mobile/Library/mad/data_ark.plist"];

  if (v89)
  {
    v222 =  +[NSDictionary dictionaryWithContentsOfFile:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithContentsOfFile:",  @"/private/var/mobile/Library/mad/data_ark.plist");
    id v90 = -[NSDictionary objectForKeyedSubscript:](v222, "objectForKeyedSubscript:", @"-LastActivated");
    id v91 = isNSString(v90);
    if (v91)
    {
      id v92 = v91;
      BOOL v93 = data_ark_exists(v248, 0LL, @"LastActivated");

      if (!v93) {
        data_ark_set(v248, 0LL, @"LastActivated", v90, 1);
      }
    }

    id v94 = v90;
    id v95 = [v13[70] defaultManager];
    id v282 = v59;
    unsigned __int8 v96 = [v95 removeItemAtPath:@"/private/var/mobile/Library/mad/data_ark.plist" error:&v282];
    uint64_t v97 = (NSError *)v282;

    if ((v96 & 1) == 0) {
      maLog( (uint64_t)"perform_sydro_data_migration_tasks",  0LL,  @"Failed to delete %@: %@",  @"/private/var/mobile/Library/mad/data_ark.plist",  v97);
    }
    int v59 = v97;
    id v98 = v94;
  }

  else
  {
    id v98 = 0LL;
    v222 = 0LL;
  }

  id v99 = data_ark_copy(v248, 0LL, @"UIKLegacyMigrationCompleted");
  id v100 = isNSNumber(v99);
  id v223 = v99;
  id v224 = v98;
  if (!v100
    || (uint64_t v101 = v100, v102 = [v99 BOOLValue], v101, (v102 & 1) == 0))
  {
    id v281 = v59;
    id v110 = copy_keychain_data(@"lockdown-identities", @"com.apple.mobileactivation.uik", &v302, &v281);
    id v111 = v281;

    id v240 = v110;
    if (v302 != -25300 && v302)
    {
      MobileActivationError = createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1250LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v111,  @"Failed to copy UIK from keychain.");
    }

    else
    {
      if (!v110)
      {
        SecAccessControlRef cf = 0LL;
        id v10 = 0LL;
LABEL_151:
        id v278 = v111;
        v218 = (__SecKey *)copy_keychain_item( @"lockdown-identities",  @"com.apple.mobileactivationd.uik.v2",  0LL,  &v302,  &v278);
        int v59 = (NSError *)v278;

        if (v302 == -25300 || !v302)
        {
          v216 = v10;
          if (!v218)
          {
            id v170 = 0LL;
            goto LABEL_169;
          }

          id v277 = v59;
          id v164 = security_create_external_representation(v218, 0LL, (NSError **)&v277);
          id v165 = v277;

          if (v164)
          {
            id v9 = copy_uik_path();
            if (v9)
            {
              v212 = v3;
              id v239 = v35;
              id v166 = [v13[70] defaultManager];
              NSFileAttributeKey v314 = NSFilePosixPermissions;
              v315 = &off_10026D560;
              id v167 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v315,  &v314,  1LL);
              id v276 = v165;
              unsigned __int8 v168 = [v166 createDirectoryAtPath:v9 withIntermediateDirectories:1 attributes:v167 error:&v276];
              id v169 = v276;

              if ((v168 & 1) != 0)
              {
                id v170 = [v9 stringByAppendingPathComponent:@"uik.pem"];

                id v275 = v169;
                char v171 = store_data(v170, v164, &v275);
                id v172 = v275;

                if ((v171 & 1) != 0)
                {
                  id v274 = v172;
                  char v173 = delete_keychain_item( @"lockdown-identities",  @"com.apple.mobileactivationd.uik.v2",  (NSError **)&v274);
                  int v59 = (NSError *)v274;

                  if ((v173 & 1) != 0)
                  {
                    id v240 = v164;
                    id v35 = v239;
                    uint64_t v3 = v212;
                    id v13 = (void **)&CCDigest_ptr;
LABEL_169:
                    uint64_t v103 = v248;
                    data_ark_set(v248, 0LL, @"UIKLegacyMigrationCompleted", &__kCFBooleanTrue, 1);
                    id v209 = v170;
                    id v10 = v216;
                    goto LABEL_111;
                  }

                  id v177 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1322LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v59,  @"Failed to delete UIK from keychain.");

                  id v32 = 0LL;
                  v220 = 0LL;
                  v262 = v177;
                }

                else
                {
                  v262 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1317LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v172,  @"Failed to store UIK.");

                  id v32 = 0LL;
                  v220 = 0LL;
                }

                id v240 = v164;
                id v9 = v170;
              }

              else
              {
                v262 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1310LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v169,  @"Failed to create %@.",  v9);

                id v32 = 0LL;
                v220 = 0LL;
                id v240 = v164;
              }

              id v27 = v249;
              id v35 = v239;
              goto LABEL_181;
            }

            v262 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1305LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve UIK path.");

            id v32 = 0LL;
            v220 = 0LL;
            id v240 = v164;
          }

          else
          {
            v262 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1299LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v165,  @"Failed to encode UIK as data.");

            id v240 = 0LL;
            id v9 = 0LL;
            id v32 = 0LL;
            v220 = 0LL;
          }

          id v27 = v249;
          id v34 = v265;
LABEL_182:
          id v4 = v218;
          __int128 v31 = v219;
          goto LABEL_183;
        }

        id v174 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1292LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v59,  @"Failed to copy UIK from keychain.");

        id v9 = 0LL;
        id v32 = 0LL;
        v220 = 0LL;
        v262 = v174;
        id v27 = v249;
        id v34 = v265;
        id v4 = v218;
        __int128 v31 = v219;
        uint64_t v33 = cf;
LABEL_33:
        a2 = v245;
        goto LABEL_34;
      }

      maLog((uint64_t)"perform_sydro_data_migration_tasks", 0LL, @"Converting legacy UIK.");
      SecAccessControlRef v112 = SecAccessControlCreateWithFlags( 0LL,  kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate,  0x40000000uLL,  (CFErrorRef *)&v303);
      if (v112)
      {
        v316[0] = kSecAttrIsPermanent;
        v316[1] = kSecAttrTokenID;
        v317[0] = &__kCFBooleanFalse;
        v317[1] = kSecAttrTokenIDAppleKeyStore;
        v316[2] = kSecAttrTokenOID;
        v316[3] = kSecAttrAccessControl;
        v317[2] = v110;
        SecAccessControlRef cf = v112;
        v317[3] = v112;
        v216 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v317,  v316,  4LL);
        SecKeyRef v113 = SecKeyCreateWithData( (CFDataRef)+[NSData data](&OBJC_CLASS___NSData, "data"),  (CFDictionaryRef)v216,  (CFErrorRef *)&v303);
        if (!v113)
        {
          v262 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1270LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  (void *)v303,  @"Failed to convert legacy UIK.");

          id v9 = 0LL;
          id v32 = 0LL;
          v220 = 0LL;
          id v4 = 0LL;
          id v27 = v249;
          id v34 = v265;
          __int128 v31 = v219;
LABEL_183:
          uint64_t v33 = cf;
          id v10 = v216;
          goto LABEL_33;
        }

        v212 = v3;
        id v280 = v111;
        v218 = v113;
        char v114 = store_keychain_item( (uint64_t)v113,  @"lockdown-identities",  @"com.apple.mobileactivationd.uik.v2",  0LL,  (NSError **)&v280);
        id v115 = v280;

        if ((v114 & 1) != 0)
        {
          id v279 = v115;
          char v116 = delete_keychain_data( @"lockdown-identities",  @"com.apple.mobileactivation.uik",  (NSError **)&v279);
          id v111 = v279;

          if ((v116 & 1) != 0)
          {
            maLog((uint64_t)"perform_sydro_data_migration_tasks", 0LL, @"Successfully converted legacy UIK.");
            CFRelease(v218);
            uint64_t v3 = v212;
            id v10 = v216;
            goto LABEL_151;
          }

          v262 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1280LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v111,  @"Failed to delete UIK from keychain.");
          v176 = v111;
        }

        else
        {
          v262 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1275LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v115,  @"Failed to store UIK.");
          v176 = v115;
        }

        id v9 = 0LL;
        id v32 = 0LL;
        v220 = 0LL;
        id v27 = v249;
LABEL_181:
        id v34 = v265;
        uint64_t v3 = v212;
        goto LABEL_182;
      }

      MobileActivationError = createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1259LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  (void *)v303,  @"Failed to create access control.");
    }

    v262 = MobileActivationError;

    id v10 = 0LL;
    id v9 = 0LL;
    id v32 = 0LL;
    v220 = 0LL;
    id v4 = 0LL;
    uint64_t v33 = 0LL;
    id v27 = v249;
    id v34 = v265;
LABEL_125:
    __int128 v31 = v219;
    goto LABEL_33;
  }

  id v240 = 0LL;
  id v10 = 0LL;
  id v209 = 0LL;
  v218 = 0LL;
  SecAccessControlRef cf = 0LL;
  uint64_t v103 = v248;
LABEL_111:
  id v104 = data_ark_copy(v103, 0LL, @"MFIFactoryCertificatesMigrationCompleted");
  id v105 = isNSNumber(v104);
  id v253 = v104;
  if (v105)
  {
    id v106 = v105;
    unsigned __int8 v107 = [v104 BOOLValue];

    if ((v107 & 1) != 0)
    {
      v215 = v10;
      v230 = 0LL;
      v231 = 0LL;
      v208 = 0LL;
      v235 = 0LL;
      v236 = 0LL;
      v243 = 0LL;
      v244 = 0LL;
      v220 = 0LL;
      v221 = 0LL;
      v250 = 0LL;
      v251 = 0LL;
      CFDataRef v241 = 0LL;
      CFDataRef v242 = 0LL;
      v255 = 0LL;
      v233 = 0LL;
      v234 = 0LL;
      SecCertificateRef v108 = 0LL;
      v232 = 0LL;
      int v109 = v248;
      goto LABEL_218;
    }
  }

  id v273 = 0LL;
  id v117 = copyRootCertificate(3LL, 0, (NSError **)&v273);
  id v118 = v273;
  id v119 = v118;
  if (!v117)
  {
    v262 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1341LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v118,  @"Failed to load BAA root CA certificate.");

    v220 = 0LL;
    id v27 = v249;
    id v34 = v265;
    id v4 = v218;
    __int128 v31 = v219;
    uint64_t v33 = cf;
    id v9 = v209;
    a2 = v245;
LABEL_166:
    id v32 = v253;
    goto LABEL_34;
  }

  id v272 = v118;
  SecCertificateRef v120 = lockcrypto_cert_from_pem_data(v117, (NSError **)&v272);
  int v59 = (NSError *)v272;

  a2 = v245;
  v210 = v120;
  v220 = v117;
  if (!v120)
  {
    v175 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1347LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v59,  @"Failed to create certificate from pem data.");

    v262 = v175;
    id v27 = v249;
    id v34 = v265;
    id v4 = v218;
    __int128 v31 = v219;
    uint64_t v33 = cf;
    id v9 = v209;
    goto LABEL_166;
  }

  id v121 = [v13[70] defaultManager];
  unsigned int v122 = [v121 fileExistsAtPath:@"/private/var/hardware/factory/mfi"];

  if (!v122)
  {
    v230 = 0LL;
    v231 = 0LL;
    v208 = 0LL;
    v235 = 0LL;
    v236 = 0LL;
    v243 = 0LL;
    v244 = 0LL;
    v250 = 0LL;
    v251 = 0LL;
    CFDataRef v241 = 0LL;
    CFDataRef v242 = 0LL;
    v255 = 0LL;
    v233 = 0LL;
    v234 = 0LL;
    v221 = 0LL;
    v232 = 0LL;
    int v109 = v248;
    SecCertificateRef v108 = v120;
    goto LABEL_217;
  }

  v213 = v3;
  v217 = v10;
  v264 = v59;
  id v259 = v36;
  id v238 = v35;
  BOOL v123 = 0LL;
  char v124 = 0LL;
  id v125 = 0LL;
  CFDataRef v206 = 0LL;
  v207 = 0LL;
  v226 = 0LL;
  uint64_t v126 = 0LL;
  id v127 = 0LL;
  id v128 = 0LL;
  id v129 = 0LL;
  id v130 = 0LL;
  uint64_t v131 = 1LL;
  CFTypeRef protection = (CFTypeRef)kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
  uint64_t v203 = kSecAttrTokenIDAppleKeyStore;
  uint64_t v202 = kSecAttrTokenOID;
  while (1)
  {
    id v132 = v128;
    id v133 = v126;
    id v134 = v124;
    v208 = @"com.apple.mfiaccessory";

    id v135 =  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@%u",  @"mfi-baa",  v131);
    id v136 = v130;
    id v130 = v135;

    v235 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@-rk-scrt", v130);
    v244 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@-combined-scrt", v130);

    char v137 =  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"/private/var/hardware/factory/mfi/mfi%u-cert.der",  v131);
    id v138 =  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"/private/var/hardware/factory/mfi/mfi%u-key.der",  v131);

    v236 = v137;
    unint64_t v139 = -[NSData initWithContentsOfFile:](objc_alloc(&OBJC_CLASS___NSData), "initWithContentsOfFile:", v137);

    v230 = v138;
    v231 = v130;
    v243 = v139;
    if (!v139)
    {
      v205 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1364LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to load %@.",  v236);
      v255 = 0LL;
      v233 = 0LL;
      v234 = 0LL;
      v221 = 0LL;
      v232 = 0LL;
      id v35 = v238;
      uint64_t v3 = v213;
      id v147 = v264;
LABEL_190:
      SecCertificateRef v108 = v210;
      NSFileAttributeKey v148 = v226;
      goto LABEL_199;
    }

    id v271 = v264;
    uint64_t v140 = parseDERCertificatesFromChain(v139, &v271);
    id v141 = (NSError *)v271;

    if (!v140)
    {
      v205 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1370LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v141,  @"Failed to parse certificate chain from data.");
      id v125 = 0LL;
      v255 = 0LL;
      v233 = 0LL;
      v234 = 0LL;
      v221 = 0LL;
      v232 = 0LL;
      id v147 = v141;
LABEL_189:
      id v35 = v238;
      uint64_t v3 = v213;
      goto LABEL_190;
    }

    int v142 = (const __CFData *)-[NSMutableArray objectAtIndexedSubscript:](v140, "objectAtIndexedSubscript:", 0LL);
    SecCertificateRef v143 = SecCertificateCreateWithData(0LL, v142);

    v255 = v143;
    if (!v143)
    {
      v205 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1376LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create leaf certificate from data.");
      v255 = 0LL;
LABEL_188:
      v233 = 0LL;
      v234 = 0LL;
      v221 = 0LL;
      v232 = 0LL;
      id v147 = v141;
      id v125 = v140;
      goto LABEL_189;
    }

    id v144 = (const __CFData *)-[NSMutableArray objectAtIndexedSubscript:](v140, "objectAtIndexedSubscript:", 1LL);
    id v145 = SecCertificateCreateWithData(0LL, v144);

    if (!v145)
    {
      v205 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1382LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create intermediate certificate from data.");
      goto LABEL_188;
    }

    v251 = v140;
    id v270 = v141;
    v234 = v145;
    char v146 = evaluateAccessoryTrustWithCerts(v255, v145, v210, 0, 0, 0LL, &v270);
    id v147 = (NSError *)v270;

    NSFileAttributeKey v148 = v226;
    if ((v146 & 1) == 0)
    {
      v205 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1387LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v147,  @"Failed to verify BAA certificate chain.");
LABEL_193:
      v221 = 0LL;
      v232 = 0LL;
      v233 = 0LL;
      goto LABEL_198;
    }

    id v149 = -[NSData initWithContentsOfFile:](objc_alloc(&OBJC_CLASS___NSData), "initWithContentsOfFile:", v138);

    id v127 = v244;
    if (!v149)
    {
      v205 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1395LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to load %@.",  v138);
      NSFileAttributeKey v148 = 0LL;
      goto LABEL_193;
    }

    if (cf) {
      CFRelease(cf);
    }
    SecAccessControlRef v150 = SecAccessControlCreateWithFlags(0LL, protection, 0x40000000uLL, (CFErrorRef *)&v303);
    if (!v150)
    {
      v205 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1402LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  (void *)v303,  @"Failed to create access control.");
      v221 = 0LL;
      v232 = 0LL;
      v233 = 0LL;
      SecAccessControlRef cf = 0LL;
      NSFileAttributeKey v148 = v149;
      goto LABEL_198;
    }

    v312[0] = kSecAttrIsPermanent;
    v312[1] = kSecAttrTokenID;
    v313[0] = &__kCFBooleanFalse;
    v313[1] = v203;
    v312[2] = v202;
    v312[3] = kSecAttrAccessControl;
    v250 = v149;
    v313[2] = v149;
    SecAccessControlRef cf = v150;
    v313[3] = v150;
    id v151 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v313,  v312,  4LL);

    uint64_t v152 = SecKeyCreateWithData( (CFDataRef)+[NSData data](&OBJC_CLASS___NSData, "data"),  (CFDictionaryRef)v151,  (CFErrorRef *)&v303);
    if (!v152)
    {
      v205 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1414LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  (void *)v303,  @"Failed to convert RK data blob.");
      v221 = 0LL;
LABEL_197:
      v232 = 0LL;
      v233 = 0LL;
      v217 = v151;
      NSFileAttributeKey v148 = v250;
LABEL_198:
      id v125 = v251;
      id v35 = v238;
      SecCertificateRef v108 = v210;
      uint64_t v3 = v213;
LABEL_199:
      __int128 v178 = v206;
      CFDataRef v179 = v207;
      goto LABEL_210;
    }

    __int128 v153 = v152;
    char v154 = SecKeyCopyPublicKey(v152);
    if (!v154)
    {
      v221 = v153;
      v205 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1420LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy RK public key.");
      goto LABEL_197;
    }

    v233 = v154;
    CFDataRef v155 = SecKeyCopyExternalRepresentation(v154, (CFErrorRef *)&v303);

    if (!v155)
    {
      v221 = v153;
      v205 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1426LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  (void *)v303,  @"Failed to copy RK public key buffer.");
      v232 = 0LL;
      v217 = v151;
      CFDataRef v179 = 0LL;
      NSFileAttributeKey v148 = v250;
      goto LABEL_202;
    }

    uint64_t v156 = SecCertificateCopyKey(v255);
    if (!v156) {
      break;
    }
    v232 = v156;
    CFDataRef v157 = SecKeyCopyExternalRepresentation(v156, (CFErrorRef *)&v303);

    if (!v157)
    {
      v221 = v153;
      v205 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1438LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  (void *)v303,  @"Failed to encode certificate public key as data.");
      __int128 v178 = 0LL;
      v217 = v151;
      NSFileAttributeKey v148 = v250;
      CFDataRef v179 = v155;
LABEL_209:
      id v125 = v251;
      id v35 = v238;
      SecCertificateRef v108 = v210;
      uint64_t v3 = v213;
      goto LABEL_210;
    }

    CFDataRef v241 = v157;
    CFDataRef v242 = v155;
    if ((-[__CFData isEqualToData:](v155, "isEqualToData:", v157) & 1) == 0)
    {
      v221 = v153;
      v180 = createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1445LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Certificate public key does not match RK public key.");
      goto LABEL_207;
    }

    id v269 = v147;
    char v158 = store_keychain_data(v243, v208, v244, (NSError **)&v269);
    id v159 = (NSError *)v269;

    if ((v158 & 1) == 0)
    {
      v221 = v153;
      v205 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1452LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v159,  @"Failed to store leaf/intermediate certificates.");
      id v147 = v159;
      goto LABEL_208;
    }

    id v268 = v159;
    id v128 = v235;
    char v160 = store_keychain_item((uint64_t)v153, v208, v235, 0LL, (NSError **)&v268);
    v264 = (NSError *)v268;

    if ((v160 & 1) == 0)
    {
      v221 = v153;
      id v147 = v264;
      v180 = createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1457LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v264,  @"Failed to store reference key.");
LABEL_207:
      v205 = v180;
LABEL_208:
      v217 = v151;
      NSFileAttributeKey v148 = v250;
      __int128 v178 = v241;
      CFDataRef v179 = v242;
      goto LABEL_209;
    }

    id v161 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
    -[NSFileManager removeItemAtPath:error:](v161, "removeItemAtPath:error:", v236, 0LL);

    id v162 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
    BOOL v123 = v230;
    -[NSFileManager removeItemAtPath:error:](v162, "removeItemAtPath:error:", v230, 0LL);

    CFRelease(v255);
    CFRelease(v234);
    CFRelease(v153);
    CFRelease(v233);
    CFRelease(v232);
    char v124 = v236;
    uint64_t v131 = (v131 + 1);
    CFDataRef v206 = v241;
    v207 = v242;
    id v125 = v251;
    v226 = v250;
    v217 = v151;
    id v129 = v208;
    uint64_t v126 = v243;
    if ((_DWORD)v131 == 5)
    {
      v255 = 0LL;
      v233 = 0LL;
      v234 = 0LL;
      v221 = 0LL;
      v232 = 0LL;
      v217 = v151;
      id v35 = v238;
      id v36 = v259;
      SecCertificateRef v108 = v210;
      uint64_t v3 = v213;
      int v59 = v264;
      goto LABEL_211;
    }
  }

  v221 = v153;
  v205 =  createMobileActivationError( (uint64_t)"perform_sydro_data_migration_tasks",  1432LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve certificate public key.");
  v232 = 0LL;
  v217 = v151;
  NSFileAttributeKey v148 = v250;
  CFDataRef v179 = v155;
LABEL_202:
  id v125 = v251;
  id v35 = v238;
  SecCertificateRef v108 = v210;
  uint64_t v3 = v213;
  __int128 v178 = v206;
LABEL_210:

  int v59 = v205;
  v250 = v148;
  v251 = v125;
  CFDataRef v241 = v178;
  CFDataRef v242 = v179;
  id v36 = v259;
LABEL_211:
  id v10 = v217;
  if (v59)
  {
    __int128 v181 = copyLoggingHandle();
    if (os_log_type_enabled(v181, OS_LOG_TYPE_FAULT)) {
      perform_sydro_data_migration_tasks_cold_3();
    }

    int v59 = 0LL;
  }

  else
  {
    maLog((uint64_t)"perform_sydro_data_migration_tasks", 0LL, @"Successfully migrated factory MFi certs/key.");
  }

  int v109 = v248;
LABEL_217:
  v215 = v10;
  data_ark_set(v109, 0LL, @"MFIFactoryCertificatesMigrationCompleted", &__kCFBooleanTrue, 1);
LABEL_218:
  id v182 = data_ark_copy(v109, 0LL, @"FactoryDCRTMigrationCompleted");
  id v183 = isNSNumber(v182);
  *(void *)v211 = v108;
  v214 = v3;
  id v237 = v35;
  id v227 = v182;
  if (!v183
    || (v184 = v183, unsigned __int8 v185 = [v182 BOOLValue], v184, (v185 & 1) == 0))
  {
    __int128 v187 = -[NSData initWithContentsOfFile:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithContentsOfFile:",  @"/private/var/hardware/dcrt/dcrt.der");

    id v6 = v208;
    v225 = v187;
    if (v187)
    {
      v310 = @"UseCommittedDAK";
      v311 = &__kCFBooleanTrue;
      __int128 v188 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v311,  &v310,  1LL);

      id v267 = v59;
      char v189 = storeDCRT(v248, v187, v188, &v267);
      __int128 v190 = (NSError *)v267;

      if ((v189 & 1) == 0)
      {
        v191 = copyLoggingHandle();
        id v9 = v209;
        if (os_log_type_enabled(v191, OS_LOG_TYPE_FAULT)) {
          perform_sydro_data_migration_tasks_cold_2();
        }

        __int128 v190 = 0LL;
        goto LABEL_229;
      }

      maLog((uint64_t)"perform_sydro_data_migration_tasks", 0LL, @"Successfully migrated factory DCRT certs/key.");
    }

    else
    {
      __int128 v190 = v59;
      __int128 v188 = v246;
    }

    id v9 = v209;
LABEL_229:
    v192 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
    -[NSFileManager removeItemAtPath:error:]( v192,  "removeItemAtPath:error:",  @"/private/var/hardware/dcrt/dcrt.der",  0LL);

    v186 = v248;
    data_ark_set(v248, 0LL, @"FactoryDCRTMigrationCompleted", &__kCFBooleanTrue, 1);
    v262 = v190;
    v246 = v188;
    goto LABEL_230;
  }

  v262 = v59;
  v225 = v219;
  v186 = v248;
  id v6 = v208;
  id v9 = v209;
LABEL_230:
  id v257 = v36;
  id v7 = data_ark_copy(v186, 0LL, @"FactorySDCRTMigrationCompleted");
  id v193 = isNSNumber(v7);
  if (v193 && (v194 = v193, unsigned __int8 v195 = [v7 BOOLValue], v194, (v195 & 1) != 0))
  {
    id v8 = 0LL;
    id v5 = *(const void **)v211;
  }

  else
  {
    id v8 = -[NSData initWithContentsOfFile:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithContentsOfFile:",  @"/private/var/hardware/sdcrt/sdcrt.der");
    if (v8)
    {
      v308[0] = @"UseCommittedDAK";
      v308[1] = @"sdcrtAttestation";
      v309[0] = &__kCFBooleanTrue;
      v309[1] = &__kCFBooleanTrue;
      v196 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v309,  v308,  2LL);

      id v266 = v262;
      v247 = v196;
      LOBYTE(v196) = storeDCRT(v248, v8, v196, &v266);
      v197 = (NSError *)v266;

      id v5 = *(const void **)v211;
      if ((v196 & 1) != 0)
      {
        maLog( (uint64_t)"perform_sydro_data_migration_tasks",  0LL,  @"Successfully migrated factory SDCRT certs/key.");
      }

      else
      {
        v199 = copyLoggingHandle();
        if (os_log_type_enabled(v199, OS_LOG_TYPE_FAULT)) {
          perform_sydro_data_migration_tasks_cold_1();
        }

        v197 = 0LL;
      }

      v198 = v247;
    }

    else
    {
      v197 = v262;
      v198 = v246;
      id v5 = *(const void **)v211;
    }

    v200 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
    -[NSFileManager removeItemAtPath:error:]( v200,  "removeItemAtPath:error:",  @"/private/var/hardware/sdcrt/sdcrt.der",  0LL);

    data_ark_set(v248, 0LL, @"FactorySDCRTMigrationCompleted", &__kCFBooleanTrue, 1);
    v262 = v197;
    v246 = v198;
  }

  v201 = certificate;
  uint64_t v3 = v214;
  if (certificate || (v201 = copyUCRT(v248, 0LL), (SecCertificateRef certificate = v201) != 0LL))
  {
    a2 = lockcrypto_query_certificate_properties((uint64_t)v201, @"1.2.840.113635.100.8.7", 0LL);
    if (!a2)
    {
      maLog( (uint64_t)"perform_sydro_data_migration_tasks",  0LL,  @"Existing UCRT does not contain the OID %@.",  @"1.2.840.113635.100.8.7");
      uint64_t v11 = 1LL;
      data_ark_set(v248, 0LL, @"UCRTUpgradeRequired", &__kCFBooleanTrue, 1);
      goto LABEL_248;
    }
  }

  else
  {
    a2 = 0LL;
  }

  uint64_t v11 = 1LL;
LABEL_248:
  id v10 = v215;
  id v4 = v218;
LABEL_38:
  if (certificate)
  {
    id v51 = v5;
    uint64_t v52 = v6;
    id v53 = v9;
    id v54 = v10;
    uint64_t v55 = v4;
    CFRelease(certificate);
    id v4 = v55;
    id v10 = v54;
    id v9 = v53;
    id v6 = v52;
    id v5 = v51;
  }

  SecCertificateRef certificate = 0LL;
  if (v4) {
    CFRelease(v4);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v303) {
    CFRelease(v303);
  }
  CFTypeRef v303 = 0LL;
  if (v255) {
    CFRelease(v255);
  }
  if (v234) {
    CFRelease(v234);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v221) {
    CFRelease(v221);
  }
  if (v233) {
    CFRelease(v233);
  }
  if (v232) {
    CFRelease(v232);
  }

  return v11;
}

void __register_xpc_activities_block_invoke(uint64_t a1, id a2)
{
  uint64_t v3 = (_xpc_activity_s *)a2;
  if (xpc_activity_get_state(v3) == 2 && xpc_activity_should_defer(v3))
  {
    if (xpc_activity_set_state(v3, 3LL)) {
      goto LABEL_9;
    }
    id v4 = copyLoggingHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      __register_xpc_activities_block_invoke_cold_1();
    }
  }

  if (xpc_activity_get_state(v3) == 2) {
    factory_activation_activity_handler(*(void **)(a1 + 32));
  }
LABEL_9:
}

void __register_xpc_activities_block_invoke_503(uint64_t a1, id a2)
{
  uint64_t v3 = (_xpc_activity_s *)a2;
  if (xpc_activity_get_state(v3) == 2 && xpc_activity_should_defer(v3))
  {
    if (xpc_activity_set_state(v3, 3LL)) {
      goto LABEL_11;
    }
    id v4 = copyLoggingHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      __register_xpc_activities_block_invoke_503_cold_1();
    }
  }

  xpc_object_t v5 = xpc_activity_copy_criteria(v3);
  if (!v5 || xpc_activity_get_state(v3) == 2) {
    collection_activity_handler(*(void **)(a1 + 32), v5 == 0LL);
  }

LABEL_11:
}

void __register_xpc_activities_block_invoke_504(uint64_t a1, id a2)
{
  uint64_t v3 = (_xpc_activity_s *)a2;
  if (xpc_activity_get_state(v3) == 2 && xpc_activity_should_defer(v3))
  {
    if (xpc_activity_set_state(v3, 3LL)) {
      goto LABEL_11;
    }
    id v4 = copyLoggingHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      __register_xpc_activities_block_invoke_504_cold_1();
    }
  }

  xpc_object_t v5 = xpc_activity_copy_criteria(v3);
  if (!v5 || xpc_activity_get_state(v3) == 2) {
    ucrt_oob_activity_handler(*(void **)(a1 + 32), v5 == 0LL);
  }

LABEL_11:
}

void __register_xpc_activities_block_invoke_505(uint64_t a1, id a2)
{
  uint64_t v3 = (_xpc_activity_s *)a2;
  if (xpc_activity_get_state(v3) == 2 && xpc_activity_should_defer(v3))
  {
    if (xpc_activity_set_state(v3, 3LL)) {
      goto LABEL_13;
    }
    id v4 = copyLoggingHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      __register_xpc_activities_block_invoke_505_cold_1();
    }
  }

  if (device_supports_dcrt_oob())
  {
    xpc_object_t v5 = xpc_activity_copy_criteria(v3);
    id v6 = v5;
    if (!v5 || xpc_dictionary_get_BOOL(v5, XPC_ACTIVITY_REPEATING) || xpc_activity_get_state(v3) == 2) {
      dcrt_oob_activity_handler(*(void **)(a1 + 32), 0, v6 == 0LL);
    }
  }

void __register_xpc_activities_block_invoke_506(uint64_t a1, id a2)
{
  uint64_t v3 = (_xpc_activity_s *)a2;
  if (xpc_activity_get_state(v3) == 2 && xpc_activity_should_defer(v3))
  {
    if (xpc_activity_set_state(v3, 3LL)) {
      goto LABEL_13;
    }
    id v4 = copyLoggingHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      __register_xpc_activities_block_invoke_506_cold_1();
    }
  }

  if (device_supports_dcrt_oob())
  {
    xpc_object_t v5 = xpc_activity_copy_criteria(v3);
    id v6 = v5;
    if (!v5 || xpc_dictionary_get_BOOL(v5, XPC_ACTIVITY_REPEATING) || xpc_activity_get_state(v3) == 2) {
      dcrt_oob_activity_handler(*(void **)(a1 + 32), 1, v6 == 0LL);
    }
  }

void __register_xpc_activities_block_invoke_507(uint64_t a1, id a2)
{
  uint64_t v3 = (_xpc_activity_s *)a2;
  if (xpc_activity_get_state(v3) == 2 && xpc_activity_should_defer(v3))
  {
    if (xpc_activity_set_state(v3, 3LL)) {
      goto LABEL_10;
    }
    id v4 = copyLoggingHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      __register_xpc_activities_block_invoke_507_cold_1();
    }
  }

  if (device_supports_dcrt_oob() && xpc_activity_get_state(v3) == 2) {
    dcrt_oob_load_spreading_activity_handler(*(void **)(a1 + 32), 0);
  }
LABEL_10:
}

void __register_xpc_activities_block_invoke_508(uint64_t a1, id a2)
{
  uint64_t v3 = (_xpc_activity_s *)a2;
  if (xpc_activity_get_state(v3) == 2 && xpc_activity_should_defer(v3))
  {
    if (xpc_activity_set_state(v3, 3LL)) {
      goto LABEL_10;
    }
    id v4 = copyLoggingHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      __register_xpc_activities_block_invoke_508_cold_1();
    }
  }

  if (device_supports_dcrt_oob() && xpc_activity_get_state(v3) == 2) {
    dcrt_oob_load_spreading_activity_handler(*(void **)(a1 + 32), 1);
  }
LABEL_10:
}

void __register_xpc_activities_block_invoke_509(uint64_t a1, id a2)
{
  uint64_t v3 = (_xpc_activity_s *)a2;
  if (xpc_activity_get_state(v3) == 2 && xpc_activity_should_defer(v3))
  {
    if (xpc_activity_set_state(v3, 3LL)) {
      goto LABEL_11;
    }
    id v4 = copyLoggingHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      __register_xpc_activities_block_invoke_509_cold_1();
    }
  }

  xpc_object_t v5 = xpc_activity_copy_criteria(v3);
  if (!v5 || xpc_activity_get_state(v3) == 2) {
    splunk_activity_handler(*(void **)(a1 + 32), v5 == 0LL);
  }

LABEL_11:
}

void __register_xpc_activities_block_invoke_510(uint64_t a1, id a2)
{
  uint64_t v3 = (_xpc_activity_s *)a2;
  if (xpc_activity_get_state(v3) == 2 && xpc_activity_should_defer(v3))
  {
    if (xpc_activity_set_state(v3, 3LL)) {
      goto LABEL_9;
    }
    id v4 = copyLoggingHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      __register_xpc_activities_block_invoke_510_cold_1();
    }
  }

  if (xpc_activity_get_state(v3) == 2) {
    splunk_daily_stats_activity_handler(*(void **)(a1 + 32));
  }
LABEL_9:
}

void __register_xpc_activities_block_invoke_511(uint64_t a1, id a2)
{
  uint64_t v3 = (_xpc_activity_s *)a2;
  if (xpc_activity_get_state(v3) == 2 && xpc_activity_should_defer(v3))
  {
    if (xpc_activity_set_state(v3, 3LL)) {
      goto LABEL_9;
    }
    id v4 = copyLoggingHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      __register_xpc_activities_block_invoke_511_cold_1();
    }
  }

  if (xpc_activity_get_state(v3) == 2) {
    splunk_roll_uuid_activity_handler(*(void **)(a1 + 32));
  }
LABEL_9:
}

void __performInFieldCollection_block_invoke(uint64_t a1)
{
  uint64_t v69 = -1LL;
  if (!*(void *)(a1 + 56))
  {
    id v6 =  createMobileActivationError( (uint64_t)"performInFieldCollection_block_invoke",  898LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    uint64_t v60 = 0LL;
    char v61 = 0LL;
    id v7 = 0LL;
    id v8 = 0LL;
    id v9 = 0LL;
    id v10 = 0LL;
    uint64_t v11 = 0LL;
    id v12 = 0LL;
    id v13 = 0LL;
    id v14 = 0LL;
    id v59 = 0LL;
LABEL_22:
    id v58 = 0LL;
    CFDataRef v22 = 0LL;
    goto LABEL_23;
  }

  id v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"NetworkTimeoutInterval"];
  id v3 = isNSNumber(v2);

  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"NetworkTimeoutInterval"];
    [v4 doubleValue];
    if (v5 <= 0.0)
    {
      id v59 = v4;
      id v6 =  createMobileActivationError( (uint64_t)"performInFieldCollection_block_invoke",  905LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid network timeout requested: %@",  v4);
      uint64_t v60 = 0LL;
LABEL_20:
      id v7 = 0LL;
      id v8 = 0LL;
      id v9 = 0LL;
      goto LABEL_21;
    }
  }

  else
  {
    id v4 = 0LL;
  }

  id v59 = v4;
  if (is_product_cellular())
  {
    uint64_t v15 = *(void *)(a1 + 40);
    id v68 = 0LL;
    id v14 = copy_baseband_request_info(v15, 0LL, (NSError **)&v68);
    id v16 = v68;

    if (!v14)
    {
      id v6 =  createMobileActivationError( (uint64_t)"performInFieldCollection_block_invoke",  915LL,  @"com.apple.MobileActivation.ErrorDomain",  -22LL,  v16,  @"Failed to copy baseband info.");

      uint64_t v60 = 0LL;
      char v61 = 0LL;
      id v7 = 0LL;
      id v8 = 0LL;
      id v9 = 0LL;
      id v10 = 0LL;
      uint64_t v11 = 0LL;
      id v12 = 0LL;
      id v13 = 0LL;
      goto LABEL_22;
    }
  }

  else
  {
    id v16 = 0LL;
  }

  unsigned __int8 v17 = -[MACollectionInterface initWithContext:]( objc_alloc(&OBJC_CLASS___MACollectionInterface),  "initWithContext:",  *(void *)(a1 + 40));
  id v9 = (NSMutableURLRequest *)v17;
  if (!v17)
  {
    id v6 =  createMobileActivationError( (uint64_t)"performInFieldCollection_block_invoke",  923LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create collection interface.");

    uint64_t v60 = 0LL;
    id v7 = 0LL;
    id v8 = 0LL;
LABEL_21:
    id v10 = 0LL;
    uint64_t v11 = 0LL;
    id v12 = 0LL;
    id v13 = 0LL;
    char v61 = 0LL;
    id v14 = 0LL;
    goto LABEL_22;
  }

  uint64_t v60 = v17;
  if (!-[MACollectionInterface collectionLibraryLoaded](v17, "collectionLibraryLoaded"))
  {
    id v6 =  createMobileActivationError( (uint64_t)"performInFieldCollection_block_invoke",  928LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Collection library not loaded.");

    goto LABEL_20;
  }

  id v18 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"UseCellularBootstrapProxy"];
  id v19 = isNSNumber(v18);

  if (!v19)
  {
    char v61 = 0LL;
    id v57 = 0LL;
LABEL_28:
    id v25 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"UseCellularOTAProxy"];
    id v26 = isNSNumber(v25);

    if (v26)
    {
      id v27 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"UseCellularOTAProxy"];
      id v58 = v27;
      if (is_product_cellular() && [v27 BOOLValue])
      {
        id v66 = v16;
        id v10 = copyCellularProxyDictionary(0, (NSError **)&v66);
        id v28 = v66;

        if (!v10)
        {
          id v6 =  createMobileActivationError( (uint64_t)"performInFieldCollection_block_invoke",  950LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  v28,  @"Failed to query cellular network proxy info.");

          id v7 = 0LL;
          id v8 = 0LL;
          id v9 = 0LL;
          uint64_t v11 = 0LL;
          id v12 = 0LL;
          id v13 = 0LL;
          char v61 = 0LL;
LABEL_64:
          id v14 = 0LL;
          goto LABEL_65;
        }

        int v55 = 1;
        id v16 = v28;
        char v61 = v10;
LABEL_35:
        id v29 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"SOCKSProxyHost"];
        id v30 = isNSString(v29);
        if (v30)
        {
          __int128 v31 = v30;
          id v32 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"SOCKSProxyPort"];
          id v33 = isNSNumber(v32);

          if (!v33)
          {
            id v9 = (NSMutableURLRequest *)v60;
LABEL_40:
            if (is_internal_build())
            {
              id v36 = objc_alloc(&OBJC_CLASS___NSUserDefaults);
              id v13 =  -[NSUserDefaults persistentDomainForName:]( v36,  "persistentDomainForName:",  @"com.apple.mobileactivationd");

              id v37 =  -[NSDictionary objectForKeyedSubscript:]( v13,  "objectForKeyedSubscript:",  @"UseReverseProxy");
              id v38 = isNSNumber(v37);
              if (v38)
              {
                BOOL v39 = v38;
                id v40 =  -[NSDictionary objectForKeyedSubscript:]( v13,  "objectForKeyedSubscript:",  @"UseReverseProxy");
                unsigned int v41 = [v40 BOOLValue];

                if (v41)
                {
                  if (v61)
                  {
                    id v6 =  createMobileActivationError( (uint64_t)"performInFieldCollection_block_invoke",  966LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Cannot set both '%@' override and '%@'/'%@' option.",  @"UseReverseProxy",  @"UseCellularBootstrapProxy",  @"UseCellularOTAProxy");

                    id v7 = 0LL;
                    goto LABEL_60;
                  }

                  char v61 = copyReverseProxyDictionary(0LL, 0LL, 0LL);
                }

                id v9 = (NSMutableURLRequest *)v60;
              }

              else
              {
              }
            }

            else
            {
              id v13 = 0LL;
            }

            id v65 = v16;
            id v7 = -[NSMutableURLRequest copyIngestData:](v9, "copyIngestData:", &v65);
            id v42 = v65;

            if (v7)
            {
              id v64 = v42;
              id v8 = -[NSMutableURLRequest copyIngestHeaders:withError:](v9, "copyIngestHeaders:withError:", v7, &v64);
              id v43 = v64;

              if (v8)
              {
                uint64_t v44 = objc_alloc(&OBJC_CLASS___NSMutableURLRequest);
                id v45 = +[MACollectionInterface copyIngestURL](&OBJC_CLASS___MACollectionInterface, "copyIngestURL");
                LODWORD(v46) = NETWORK_TIMEOUT_SECONDS;
                id v9 = -[NSMutableURLRequest initWithURL:cachePolicy:timeoutInterval:]( v44,  "initWithURL:cachePolicy:timeoutInterval:",  v45,  0LL,  (double)v46);

                if (v9)
                {
                  id v47 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
                  id v14 = (NSMutableDictionary *)[v47 copyAnswer:@"UniqueDeviceID"];

                  id v48 = isNSString(v14);
                  if (v48)
                  {
                    id v12 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ - %@",  @"iOS Device Activator (MobileActivation-1015.60.1)",  *(void *)(a1 + 48));
                    if (v12)
                    {
                      id v53 = v43;
                      -[NSMutableURLRequest setAllHTTPHeaderFields:](v9, "setAllHTTPHeaderFields:", v8);
                      -[NSMutableURLRequest setValue:forHTTPHeaderField:]( v9,  "setValue:forHTTPHeaderField:",  v12,  @"User-Agent");
                      -[NSMutableURLRequest setValue:forHTTPHeaderField:]( v9,  "setValue:forHTTPHeaderField:",  v14,  @"x-jmet-deviceid");
                      -[NSMutableURLRequest setHTTPMethod:](v9, "setHTTPMethod:", @"POST");
                      -[NSMutableURLRequest setHTTPBody:](v9, "setHTTPBody:", v7);
                      if (v59)
                      {
                        [v59 doubleValue];
                        -[NSMutableURLRequest setTimeoutInterval:](v9, "setTimeoutInterval:");
                      }

                      uint64_t v49 = formatURLRequest(v9);
                      id v50 = copy_log_directory_path();
                      id v51 = [v50 stringByAppendingPathComponent:@"collection_oob_request.txt"];
                      -[NSMutableString writeToFile:atomically:encoding:error:]( v49,  "writeToFile:atomically:encoding:error:",  v51,  0LL,  4LL,  0LL);

                      id v62 = v53;
                      id v63 = 0LL;
                      uint64_t v11 = (NSMutableDictionary *)talkToServerWithError(v9, 0LL, v55, v61, &v63, &v69, &v62);
                      id v10 = (NSMutableDictionary *)v63;
                      id v6 = (NSError *)v62;

                      char v56 = formatURLResponse(v11, v69, v10);
                      id v54 = copy_log_directory_path();
                      id v52 = [v54 stringByAppendingPathComponent:@"collection_oob_response.txt"];
                      -[NSMutableString writeToFile:atomically:encoding:error:]( v56,  "writeToFile:atomically:encoding:error:",  v52,  0LL,  4LL,  0LL);
                    }

                    else
                    {
                      id v6 =  createMobileActivationError( (uint64_t)"performInFieldCollection_block_invoke",  1007LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create user agent string.");

                      id v10 = 0LL;
                      uint64_t v11 = 0LL;
                    }
                  }

                  else
                  {
                    id v6 =  createMobileActivationError( (uint64_t)"performInFieldCollection_block_invoke",  1000LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query %@.",  @"UniqueDeviceID");

                    id v10 = 0LL;
                    uint64_t v11 = 0LL;
                    id v12 = 0LL;
                  }

                  goto LABEL_65;
                }

                id v6 =  createMobileActivationError( (uint64_t)"performInFieldCollection_block_invoke",  994LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate request.");

                goto LABEL_63;
              }

              id v6 =  createMobileActivationError( (uint64_t)"performInFieldCollection_block_invoke",  984LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v43,  @"Failed to copy ingest headers.");

LABEL_62:
              id v9 = 0LL;
LABEL_63:
              id v10 = 0LL;
              uint64_t v11 = 0LL;
              id v12 = 0LL;
              goto LABEL_64;
            }

            id v6 =  createMobileActivationError( (uint64_t)"performInFieldCollection_block_invoke",  978LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v42,  @"Failed to copy ingest data.");

LABEL_60:
            id v8 = 0LL;
            goto LABEL_62;
          }

          v70[0] = @"SOCKSProxyHost";
          id v29 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"SOCKSProxyHost"];
          v71[0] = v29;
          v70[1] = @"SOCKSProxyPort";
          id v34 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"SOCKSProxyPort"];
          v71[1] = v34;
          id v35 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v71,  v70,  2LL);

          char v61 = (NSMutableDictionary *)v35;
          id v9 = (NSMutableURLRequest *)v60;
        }

        goto LABEL_40;
      }
    }

    else
    {
      id v58 = 0LL;
    }

    int v55 = 0;
    goto LABEL_35;
  }

  id v20 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"UseCellularBootstrapProxy"];
  id v57 = v20;
  if (!is_product_cellular() || ![v20 BOOLValue])
  {
    char v61 = 0LL;
    goto LABEL_28;
  }

  id v67 = v16;
  uint64_t v11 = copyCellularProxyDictionary(1, (NSError **)&v67);
  id v21 = v67;

  char v61 = v11;
  if (v11)
  {
    id v16 = v21;
    goto LABEL_28;
  }

  id v6 =  createMobileActivationError( (uint64_t)"performInFieldCollection_block_invoke",  937LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  v21,  @"Failed to query cellular network proxy info.");

  id v7 = 0LL;
  id v8 = 0LL;
  id v9 = 0LL;
  id v10 = 0LL;
  id v12 = 0LL;
  id v13 = 0LL;
  char v61 = 0LL;
  id v14 = 0LL;
  id v58 = 0LL;
LABEL_65:
  CFDataRef v22 = v57;
LABEL_23:
  uint64_t v23 = *(void *)(a1 + 56);
  if (v23)
  {
    id v24 = v22;
    (*(void (**)(uint64_t, NSMutableDictionary *, NSMutableDictionary *, uint64_t, NSError *))(v23 + 16))( v23,  v11,  v10,  v69,  v6);
    CFDataRef v22 = v24;
  }
}

void ___performUCRTHealingOOB_block_invoke(uint64_t a1)
{
  uint64_t v99 = 0LL;
  id v100 = (id *)&v99;
  uint64_t v101 = 0x3032000000LL;
  unsigned __int8 v102 = __Block_byref_object_copy__4;
  uint64_t v103 = __Block_byref_object_dispose__4;
  id v104 = 0LL;
  v97[0] = 0LL;
  v97[1] = v97;
  v97[2] = 0x3032000000LL;
  v97[3] = __Block_byref_object_copy__4;
  v97[4] = __Block_byref_object_dispose__4;
  id v98 = 0LL;
  uint64_t v91 = 0LL;
  id v92 = &v91;
  uint64_t v93 = 0x3032000000LL;
  id v94 = __Block_byref_object_copy__4;
  id v95 = __Block_byref_object_dispose__4;
  id v96 = 0LL;
  uint64_t v85 = 0LL;
  id v86 = &v85;
  uint64_t v87 = 0x3032000000LL;
  id v88 = __Block_byref_object_copy__4;
  unsigned int v89 = __Block_byref_object_dispose__4;
  id v90 = 0LL;
  uint64_t v81 = 0LL;
  id v82 = &v81;
  uint64_t v83 = 0x2020000000LL;
  uint64_t v84 = -1LL;
  uint64_t v77 = 0LL;
  id v78 = &v77;
  uint64_t v79 = 0x2020000000LL;
  uint64_t v80 = 0LL;
  if (!*(void *)(a1 + 32) || !*(void *)(a1 + 40) || !*(void *)(a1 + 56))
  {
    id v20 =  createMobileActivationError( (uint64_t)"_performUCRTHealingOOB_block_invoke",  533LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
    id v21 = 0LL;
    CFDataRef v22 = 0LL;
    id v18 = 0LL;
    id v9 = 0LL;
    id v13 = 0LL;
    uint64_t v23 = 0LL;
    double v5 = 0LL;
    id v3 = 0LL;
LABEL_14:
    id v24 = 0LL;
    goto LABEL_15;
  }

  id v2 = objc_alloc(&OBJC_CLASS___NSUserDefaults);
  id v3 =  -[NSUserDefaults persistentDomainForName:]( v2,  "persistentDomainForName:",  @"com.apple.mobileactivationd");

  id v4 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"PromptForCredentials"];
  double v5 = v4;
  if (v4)
  {
    id v6 = isNSNumber(v4);
    BOOL v7 = v6 == 0LL;

    if (v7)
    {
      id v20 =  createAndLogError( (uint64_t)"_performUCRTHealingOOB_block_invoke",  541LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid option (%@).",  @"PromptForCredentials");
      id v21 = 0LL;
      CFDataRef v22 = 0LL;
      id v18 = 0LL;
      id v9 = 0LL;
LABEL_23:
      id v13 = 0LL;
      goto LABEL_39;
    }
  }

  id v8 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"ActivationLockUsername"];
  id v9 = v8;
  if (v8)
  {
    id v10 = isNSString(v8);
    BOOL v11 = v10 == 0LL;

    if (v11)
    {
      id v20 =  createAndLogError( (uint64_t)"_performUCRTHealingOOB_block_invoke",  547LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid option (%@).",  @"ActivationLockUsername");
      id v21 = 0LL;
      CFDataRef v22 = 0LL;
      id v18 = 0LL;
      goto LABEL_23;
    }
  }

  id v12 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"ActivationLockPET"];
  id v13 = v12;
  if (v12)
  {
    id v14 = isNSString(v12);
    BOOL v15 = v14 == 0LL;

    if (v15)
    {
      id v20 =  createAndLogError( (uint64_t)"_performUCRTHealingOOB_block_invoke",  553LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid option (%@).",  @"ActivationLockPET");
      id v21 = 0LL;
      CFDataRef v22 = 0LL;
      id v18 = 0LL;
      goto LABEL_39;
    }
  }

  id v16 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"NetworkTimeoutInterval"];
  id v17 = isNSNumber(v16);

  if (v17)
  {
    id v18 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"NetworkTimeoutInterval"];
    [v18 doubleValue];
    if (v19 <= 0.0)
    {
      id v20 =  createMobileActivationError( (uint64_t)"_performUCRTHealingOOB_block_invoke",  560LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid network timeout requested: %@",  v18);
      id v21 = 0LL;
      CFDataRef v22 = 0LL;
LABEL_39:
      uint64_t v23 = 0LL;
      goto LABEL_14;
    }
  }

  else
  {
    id v18 = 0LL;
  }

  id v29 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"UseCommittedUIK"];
  uint64_t v23 = v29;
  if (v29)
  {
    id v30 = isNSNumber(v29);
    BOOL v31 = v30 == 0LL;

    if (v31)
    {
      id v33 =  createMobileActivationError( (uint64_t)"_performUCRTHealingOOB_block_invoke",  567LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid option (%@).",  @"UseCommittedUIK");
      goto LABEL_42;
    }
  }

  if (([v23 BOOLValue] & 1) == 0)
  {
    uint64_t v32 = aks_system_key_operate(2u, 1u, 0LL, 0LL);
    if ((_DWORD)v32)
    {
      id v33 =  createMobileActivationError( (uint64_t)"_performUCRTHealingOOB_block_invoke",  574LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to bump UIK: 0x%08x",  v32);
LABEL_42:
      id v20 = v33;
      id v21 = 0LL;
      CFDataRef v22 = 0LL;
      goto LABEL_14;
    }
  }

  id v34 = *(void **)(a1 + 32);
  id v35 = *(void **)(a1 + 48);
  id v36 = v100;
  id obj = v100[5];
  id v24 = create_ucrt_info(v34, v35, &obj);
  objc_storeStrong(v36 + 5, obj);
  if (!v24)
  {
    id v33 =  createMobileActivationError( (uint64_t)"_performUCRTHealingOOB_block_invoke",  581LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v100[5],  @"Failed to create UCRT info.");
    goto LABEL_42;
  }

  id v37 = v100;
  id v75 = v100[5];
  id v38 = (__SecKey *)createReferenceKeyBlob(0LL, 1, 0LL, &v75);
  objc_storeStrong(v37 + 5, v75);
  v78[3] = (uint64_t)v38;
  if (!v38)
  {
    id v45 =  createMobileActivationError( (uint64_t)"_performUCRTHealingOOB_block_invoke",  587LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v100[5],  @"Failed to create reference key.");
LABEL_50:
    id v20 = v45;
    id v21 = 0LL;
    CFDataRef v22 = 0LL;
    goto LABEL_15;
  }

  BOOL v39 = v100;
  id v74 = v100[5];
  id v21 = security_create_external_representation(v38, 0LL, (NSError **)&v74);
  objc_storeStrong(v39 + 5, v74);
  if (!v21)
  {
    id v45 =  createMobileActivationError( (uint64_t)"_performUCRTHealingOOB_block_invoke",  593LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to encode RK as data.");
    goto LABEL_50;
  }

  v106[0] = @"Validity";
  v106[1] = @"scrtAttestation";
  v107[0] = &off_10026D578;
  v107[1] = &__kCFBooleanTrue;
  id v40 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v107,  v106,  2LL);
  unsigned int v41 =  +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v40);
  id v42 = v40;
  CFDataRef v22 = v41;

  if (v18) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v22,  "setObject:forKeyedSubscript:",  v18,  @"NetworkTimeoutInterval");
  }
  id v52 = objc_alloc(&OBJC_CLASS___NSMutableArray);
  v105[0] = @"1.2.840.113635.100.8.3";
  v105[1] = @"1.2.840.113635.100.10.1";
  void v105[2] = @"1.2.840.113635.100.8.4";
  v105[3] = @"1.2.840.113635.100.8.5";
  void v105[4] = @"1.2.840.113635.100.8.7";
  char v56 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v105, 5LL);
  id v53 = -[NSMutableArray initWithArray:](v52, "initWithArray:", v56);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v22, "setObject:forKeyedSubscript:", v53, @"OIDSToInclude");

  id v54 = v100 + 5;
  id v73 = v100[5];
  int IsEnabled = FindMyDeviceIsEnabled(&v73);
  objc_storeStrong(v54, v73);
  if ((IsEnabled & 1) != 0 || (id v43 = v100[5]) == 0LL)
  {
    id v46 = [v5 BOOLValue];
    location = v100 + 5;
    id v72 = v100[5];
    id v55 = (id)copyTokenForActivationLock( (uint64_t)v9,  (uint64_t)v13,  (uint64_t)v46,  0LL,  &v72);
    objc_storeStrong(location, v72);
    int v47 = IsEnabled;
    if (v55) {
      int v47 = 0;
    }
    if (v47 != 1)
    {
      id v48 = v100[5];
      v100[5] = 0LL;

      uint64_t v49 = *(void **)(a1 + 40);
      locationa = *(id **)(a1 + 32);
      v59[0] = _NSConcreteStackBlock;
      v59[1] = 3254779904LL;
      v59[2] = ___performUCRTHealingOOB_block_invoke_2;
      v59[3] = &__block_descriptor_128_e8_32s40s48s56s64s72bs80r88r96r104r112r120r_e34_v24__0__NSDictionary_8__NSError_16l;
      id v66 = &v99;
      id v58 = v55;
      id v60 = v58;
      id v24 = v24;
      id v61 = v24;
      id v67 = &v77;
      id v68 = v97;
      id v62 = *(id *)(a1 + 40);
      id v18 = v18;
      id v63 = v18;
      id v3 = v3;
      id v64 = v3;
      uint64_t v69 = &v85;
      char v70 = &v91;
      id v71 = &v81;
      id v65 = *(id *)(a1 + 56);
      issueClientCertificateWithReferenceKey(locationa, v49, v21, 0, v22, v59);

      goto LABEL_20;
    }

    uint64_t v44 =  createMobileActivationError( (uint64_t)"_performUCRTHealingOOB_block_invoke",  621LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v100[5],  @"Failed to retrieve auth token.");
  }

  else
  {
    uint64_t v44 =  createMobileActivationError( (uint64_t)"_performUCRTHealingOOB_block_invoke",  615LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v43,  @"Failed to query FindMy state.");
  }

  id v20 = v44;
LABEL_15:
  id v25 = v100[5];
  v100[5] = v20;

  uint64_t v26 = *(void *)(a1 + 56);
  if (v26) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, id))(v26 + 16))(v26, v86[5], v92[5], v82[3], v100[5]);
  }
  id v27 = v78;
  id v28 = (const void *)v78[3];
  if (v28)
  {
    CFRelease(v28);
    id v27 = v78;
  }

  v27[3] = 0LL;
LABEL_20:

  _Block_object_dispose(&v77, 8);
  _Block_object_dispose(&v81, 8);
  _Block_object_dispose(&v85, 8);

  _Block_object_dispose(&v91, 8);
  _Block_object_dispose(v97, 8);

  _Block_object_dispose(&v99, 8);
}

void sub_1000368B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, char a40, uint64_t a41, uint64_t a42, uint64_t a43, char a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
}

void ___performUCRTHealingOOB_block_invoke_2(uint64_t a1, id a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  BOOL v7 = dispatch_get_global_queue(0LL, 0LL);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3254779904LL;
  v10[2] = ___performUCRTHealingOOB_block_invoke_3;
  v10[3] = &__block_descriptor_144_e8_32s40s48s56s64s72s80s88bs96r104r112r120r128r136r_e5_v8__0l;
  uint64_t v19 = *(void *)(a1 + 80);
  id v11 = v6;
  id v12 = v5;
  id v13 = *(id *)(a1 + 32);
  id v14 = *(id *)(a1 + 40);
  __int128 v20 = *(_OWORD *)(a1 + 88);
  id v15 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 56);
  id v17 = *(id *)(a1 + 64);
  __int128 v21 = *(_OWORD *)(a1 + 104);
  uint64_t v22 = *(void *)(a1 + 120);
  id v18 = *(id *)(a1 + 72);
  id v8 = v5;
  id v9 = v6;
  dispatch_async(v7, v10);
}

void ___performUCRTHealingOOB_block_invoke_3(uint64_t a1)
{
  CFErrorRef error = 0LL;
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL), v2);
    id v3 = 0LL;
LABEL_27:
    id v12 = 0LL;
LABEL_28:
    id v15 = 0LL;
LABEL_29:
    CFDataRef v22 = 0LL;
    __int128 v20 = 0LL;
    id v18 = 0LL;
    id v17 = 0LL;
LABEL_30:
    uint64_t v26 = 0LL;
    id v24 = 0LL;
    goto LABEL_31;
  }

  id v3 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"RKCertification"];
  id v4 = isNSArray(v3);
  if (!v4 || [v3 count] != (id)2) {
    goto LABEL_25;
  }
  id v5 = [v3 objectAtIndexedSubscript:0];
  id v6 = isNSData(v5);
  if (!v6)
  {

LABEL_25:
    goto LABEL_26;
  }

  BOOL v7 = v6;
  id v8 = [v3 objectAtIndexedSubscript:1];
  id v9 = isNSData(v8);

  if (!v9)
  {
LABEL_26:
    BOOL v31 =  createMobileActivationError( (uint64_t)"_performUCRTHealingOOB_block_invoke_3",  652LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve BAA certificates.");
    uint64_t v32 = *(void *)(*(void *)(a1 + 96) + 8LL);
    id v33 = *(void **)(v32 + 40);
    *(void *)(v32 + 40) = v31;

    goto LABEL_27;
  }

  id v10 = [v3 objectAtIndexedSubscript:0];
  uint64_t v11 = *(void *)(*(void *)(a1 + 96) + 8LL);
  id obj = *(id *)(v11 + 40);
  id v12 = lockcrypto_create_pem(v10, "CERTIFICATE", &obj);
  objc_storeStrong((id *)(v11 + 40), obj);

  if (!v12)
  {
    id v37 =  createMobileActivationError( (uint64_t)"_performUCRTHealingOOB_block_invoke_3",  658LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  *(void **)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL),  @"Failed to create PEM.");
    uint64_t v38 = *(void *)(*(void *)(a1 + 96) + 8LL);
    BOOL v39 = *(void **)(v38 + 40);
    *(void *)(v38 + 40) = v37;

    goto LABEL_28;
  }

  id v13 = [v3 objectAtIndexedSubscript:1];
  uint64_t v14 = *(void *)(*(void *)(a1 + 96) + 8LL);
  id v100 = *(id *)(v14 + 40);
  id v15 = lockcrypto_create_pem(v13, "CERTIFICATE", &v100);
  objc_storeStrong((id *)(v14 + 40), v100);

  if (!v15)
  {
    id v40 =  createMobileActivationError( (uint64_t)"_performUCRTHealingOOB_block_invoke_3",  664LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  *(void **)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL),  @"Failed to create PEM.");
    uint64_t v41 = *(void *)(*(void *)(a1 + 96) + 8LL);
    id v42 = *(void **)(v41 + 40);
    *(void *)(v41 + 40) = v40;

    goto LABEL_29;
  }

  id v16 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v17 = [v16 copyAnswer:@"UniqueDeviceID"];

  id v18 = (NSData *)isNSString(v17);
  if (!v18)
  {
    id v43 =  createMobileActivationError( (uint64_t)"_performUCRTHealingOOB_block_invoke_3",  670LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query %@.",  @"UniqueDeviceID");
    uint64_t v44 = *(void *)(*(void *)(a1 + 96) + 8LL);
    id v45 = *(void **)(v44 + 40);
    *(void *)(v44 + 40) = v43;

    CFDataRef v22 = 0LL;
    __int128 v20 = 0LL;
    goto LABEL_30;
  }

  uint64_t v19 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v20 = v19;
  if (!v19)
  {
    id v46 =  createMobileActivationError( (uint64_t)"_performUCRTHealingOOB_block_invoke_3",  676LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate dictionary.");
    uint64_t v47 = *(void *)(*(void *)(a1 + 96) + 8LL);
    id v48 = *(void **)(v47 + 40);
    *(void *)(v47 + 40) = v46;

    CFDataRef v22 = 0LL;
    id v18 = 0LL;
    goto LABEL_30;
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:](v19, "setObject:forKeyedSubscript:", v17, @"UniqueDeviceID");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v20,  "setObject:forKeyedSubscript:",  *(void *)(a1 + 48),  @"ActivationLockToken");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v20,  "setObject:forKeyedSubscript:",  *(void *)(a1 + 56),  @"UCRTRequestInfo");
  __int128 v21 = (id *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL);
  id v99 = 0LL;
  id v18 =  +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v20,  100LL,  0LL,  &v99);
  objc_storeStrong(v21, v99);
  if (!v18)
  {
    uint64_t v49 =  createMobileActivationError( (uint64_t)"_performUCRTHealingOOB_block_invoke_3",  686LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  *(void **)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL),  @"Could not convert dictionary to xml data.");
    uint64_t v50 = *(void *)(*(void *)(a1 + 96) + 8LL);
    id v51 = *(void **)(v50 + 40);
    *(void *)(v50 + 40) = v49;

    CFDataRef v22 = 0LL;
    goto LABEL_30;
  }

  CFDataRef v22 = SecKeyCreateSignature( *(SecKeyRef *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 24LL),  kSecKeyAlgorithmECDSASignatureMessageX962SHA256,  (CFDataRef)v18,  &error);
  if (!v22)
  {
    id v52 =  createMobileActivationError( (uint64_t)"_performUCRTHealingOOB_block_invoke_3",  692LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to sign data with ref key.");
    uint64_t v53 = *(void *)(*(void *)(a1 + 96) + 8LL);
    id v54 = *(void **)(v53 + 40);
    *(void *)(v53 + 40) = v52;

    goto LABEL_30;
  }

  uint64_t v23 = objc_alloc_init(&OBJC_CLASS___NSMutableData);
  id v24 = v23;
  if (!v23)
  {
    id v55 =  createMobileActivationError( (uint64_t)"_performUCRTHealingOOB_block_invoke_3",  698LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate data.");
    uint64_t v56 = *(void *)(*(void *)(a1 + 96) + 8LL);
    id v57 = *(void **)(v56 + 40);
    *(void *)(v56 + 40) = v55;

    uint64_t v26 = 0LL;
    goto LABEL_31;
  }

  -[NSMutableData appendData:](v23, "appendData:", v12);
  id v25 = [@"\n" dataUsingEncoding:4];
  -[NSMutableData appendData:](v24, "appendData:", v25);

  -[NSMutableData appendData:](v24, "appendData:", v15);
  v103[0] = @"UCRTRequestInfoXML";
  v103[1] = @"BAACertification";
  v104[0] = v18;
  v104[1] = v24;
  void v103[2] = @"BAASignature";
  v104[2] = v22;
  uint64_t v26 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v104,  v103,  3LL);
  uint64_t v27 = *(void *)(*(void *)(a1 + 112) + 8LL);
  id v28 = *(void **)(v27 + 40);
  locationa = (id *)(v27 + 40);
  uint64_t v93 = (id *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL);
  id v97 = *v93;
  id v98 = v28;
  char XMLRequest = createXMLRequest(v26, (NSMutableURLRequest **)&v98, (NSError **)&v97);
  objc_storeStrong(locationa, v98);
  objc_storeStrong(v93, v97);
  if ((XMLRequest & 1) != 0)
  {
    id v29 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ - %@",  @"iOS Device Activator (MobileActivation-1015.60.1)",  *(void *)(a1 + 64));
    if (v29)
    {
      locationb = *(id **)(*(void *)(*(void *)(a1 + 112) + 8LL) + 40LL);
      id v94 = v29;
      uint64_t v79 =  +[NSURL URLWithString:]( &OBJC_CLASS___NSURL,  "URLWithString:",  @"https://albert.apple.com/deviceservices/ucertVend");
      [locationb setURL:v79];

      [*(id *)(*(void *)(*(void *)(a1 + 112) + 8) + 40) setValue:v94 forHTTPHeaderField:@"User-Agent"];
      [*(id *)(*(void *)(*(void *)(a1 + 112) + 8) + 40) setValue:v17 forHTTPHeaderField:@"x-jmet-deviceid"];
      id v30 = *(void **)(a1 + 72);
      if (v30)
      {
        locationc = *(id **)(*(void *)(*(void *)(a1 + 112) + 8LL) + 40LL);
        [v30 doubleValue];
        objc_msgSend(locationc, "setTimeoutInterval:");
      }

      if (is_internal_build())
      {
        locationd = (id *)objc_msgSend(*(id *)(a1 + 80), "objectForKeyedSubscript:");
        id v80 = isNSString(locationd);

        if (v80)
        {
          locatione = *(id **)(*(void *)(*(void *)(a1 + 112) + 8LL) + 40LL);
          id v81 = [*(id *)(a1 + 80) objectForKeyedSubscript:@"UCRTOOBHealOverrideURL"];
          id v73 = +[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v81);
          [locatione setURL:v73];
        }

        location = (id *)objc_msgSend(*(id *)(a1 + 80), "objectForKeyedSubscript:");
        id v82 = isNSNumber(location);
        if (v82)
        {
          id v69 = [*(id *)(a1 + 80) objectForKeyedSubscript:@"UseReverseProxy"];
          unsigned int v74 = [v69 BOOLValue];

          if (v74)
          {
            uint64_t v83 = copyReverseProxyDictionary(0LL, 0LL, 0LL);
LABEL_50:
            locationf = objc_retainAutoreleasedReturnValue(formatURLRequest(*(void **)(*(void *)(*(void *)(a1 + 112)
                                                                                                 + 8LL)
                                                                                     + 40LL)));
            id v75 = copy_log_directory_path();
            id v70 = [v75 stringByAppendingPathComponent:@"ucrt_oob_request.txt"];
            -[NSMutableString writeToFile:atomically:encoding:error:]( locationf,  "writeToFile:atomically:encoding:error:",  v70,  0LL,  4LL,  0LL);

            id v63 = *(void **)(*(void *)(*(void *)(a1 + 112) + 8LL) + 40LL);
            uint64_t v64 = *(void *)(*(void *)(a1 + 128) + 8LL);
            id v65 = *(void **)(v64 + 40);
            id v76 = (id *)(v64 + 40);
            id v66 = (void *)(*(void *)(*(void *)(a1 + 136) + 8LL) + 24LL);
            locationg = (id *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL);
            id v95 = *locationg;
            id v96 = v65;
            id v71 = talkToServerWithError(v63, 0LL, 0, v83, &v96, v66, &v95);
            objc_storeStrong(v76, v96);
            objc_storeStrong(locationg, v95);
            uint64_t v67 = *(void *)(*(void *)(a1 + 120) + 8LL);
            id v68 = *(void **)(v67 + 40);
            *(void *)(v67 + 40) = v71;

            locationh =  formatURLResponse( *(void **)(*(void *)(*(void *)(a1 + 120) + 8LL) + 40LL),  *(void *)(*(void *)(*(void *)(a1 + 136) + 8LL) + 24LL),  *(void **)(*(void *)(*(void *)(a1 + 128) + 8LL) + 40LL));
            id v77 = copy_log_directory_path();
            id v72 = [v77 stringByAppendingPathComponent:@"ucrt_oob_response.txt"];
            -[NSMutableString writeToFile:atomically:encoding:error:]( locationh,  "writeToFile:atomically:encoding:error:",  v72,  0LL,  4LL,  0LL);

            id v62 = v83;
            goto LABEL_51;
          }
        }

        else
        {
        }
      }

      uint64_t v83 = 0LL;
      goto LABEL_50;
    }

    MobileActivationError = createMobileActivationError( (uint64_t)"_performUCRTHealingOOB_block_invoke_3",  717LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create user agent string.");
  }

  else
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"_performUCRTHealingOOB_block_invoke_3",  711LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create request.");
  }

  id v59 = MobileActivationError;
  uint64_t v60 = *(void *)(*(void *)(a1 + 96) + 8LL);
  id v61 = *(NSMutableDictionary **)(v60 + 40);
  *(void *)(v60 + 40) = v59;
  id v62 = v61;
LABEL_51:

LABEL_31:
  uint64_t v34 = *(void *)(a1 + 88);
  if (v34) {
    (*(void (**)(uint64_t, void, void, void, void))(v34 + 16))( v34,  *(void *)(*(void *)(*(void *)(a1 + 120) + 8LL) + 40LL),  *(void *)(*(void *)(*(void *)(a1 + 128) + 8LL) + 40LL),  *(void *)(*(void *)(*(void *)(a1 + 136) + 8LL) + 24LL),  *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL));
  }
  if (error) {
    CFRelease(error);
  }
  CFErrorRef error = 0LL;
  uint64_t v35 = *(void *)(*(void *)(a1 + 104) + 8LL);
  id v36 = *(const void **)(v35 + 24);
  if (v36)
  {
    CFRelease(v36);
    uint64_t v35 = *(void *)(*(void *)(a1 + 104) + 8LL);
  }

  *(void *)(v35 + 24) = 0LL;
}

void __copy_helper_block_e8_32s40s48s56s64s72s80s88b96r104r112r120r128r136r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  id v6 = *(id *)(a2 + 48);
  id v7 = *(id *)(a2 + 56);
  id v8 = *(id *)(a2 + 64);
  id v9 = *(id *)(a2 + 72);
  id v10 = *(id *)(a2 + 80);
  _Block_object_assign((void *)(a1 + 88), *(const void **)(a2 + 88), 7);
  _Block_object_assign((void *)(a1 + 96), *(const void **)(a2 + 96), 8);
  _Block_object_assign((void *)(a1 + 104), *(const void **)(a2 + 104), 8);
  _Block_object_assign((void *)(a1 + 112), *(const void **)(a2 + 112), 8);
  _Block_object_assign((void *)(a1 + 120), *(const void **)(a2 + 120), 8);
  _Block_object_assign((void *)(a1 + 128), *(const void **)(a2 + 128), 8);
  _Block_object_assign((void *)(a1 + 136), *(const void **)(a2 + 136), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64s72s80s88s96r104r112r120r128r136r(uint64_t a1)
{
}

void __copy_helper_block_e8_32s40s48s56s64s72b80r88r96r104r112r120r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  id v6 = *(id *)(a2 + 48);
  id v7 = *(id *)(a2 + 56);
  id v8 = *(id *)(a2 + 64);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 7);
  _Block_object_assign((void *)(a1 + 80), *(const void **)(a2 + 80), 8);
  _Block_object_assign((void *)(a1 + 88), *(const void **)(a2 + 88), 8);
  _Block_object_assign((void *)(a1 + 96), *(const void **)(a2 + 96), 8);
  _Block_object_assign((void *)(a1 + 104), *(const void **)(a2 + 104), 8);
  _Block_object_assign((void *)(a1 + 112), *(const void **)(a2 + 112), 8);
  _Block_object_assign((void *)(a1 + 120), *(const void **)(a2 + 120), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64s72s80r88r96r104r112r120r(uint64_t a1)
{
}

void ___performUCRTOOB_block_invoke(uint64_t a1)
{
  uint64_t v55 = -1LL;
  if (!*(void *)(a1 + 32) || !*(void *)(a1 + 40) || !*(void *)(a1 + 56))
  {
    id v5 =  createMobileActivationError( (uint64_t)"_performUCRTOOB_block_invoke",  786LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
    id v6 = 0LL;
    id v7 = 0LL;
    id v48 = 0LL;
    id v8 = 0LL;
    id v9 = 0LL;
    id v10 = 0LL;
    uint64_t v11 = 0LL;
    id v3 = 0LL;
    goto LABEL_8;
  }

  if (is_product_cellular())
  {
    uint64_t v2 = *(void *)(a1 + 32);
    id v54 = 0LL;
    id v3 = copy_baseband_request_info(v2, 0LL, (NSError **)&v54);
    id v4 = v54;

    if (!v3)
    {
      id v5 =  createMobileActivationError( (uint64_t)"_performUCRTOOB_block_invoke",  795LL,  @"com.apple.MobileActivation.ErrorDomain",  -22LL,  v4,  @"Failed to copy baseband info.");

      id v6 = 0LL;
      id v7 = 0LL;
      id v48 = 0LL;
      id v8 = 0LL;
      id v9 = 0LL;
      id v10 = 0LL;
      uint64_t v11 = 0LL;
LABEL_8:
      id v12 = 0LL;
      goto LABEL_9;
    }
  }

  else
  {
    id v4 = 0LL;
  }

  uint64_t v14 = objc_alloc(&OBJC_CLASS___NSUserDefaults);
  id v15 =  -[NSUserDefaults persistentDomainForName:]( v14,  "persistentDomainForName:",  @"com.apple.mobileactivationd");

  id v16 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"NetworkTimeoutInterval"];
  id v17 = isNSNumber(v16);

  id v48 = v15;
  if (v17)
  {
    id v12 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"NetworkTimeoutInterval"];
    [v12 doubleValue];
    if (v18 <= 0.0)
    {
      id v5 =  createMobileActivationError( (uint64_t)"_performUCRTOOB_block_invoke",  806LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid network timeout requested: %@",  v12);

      id v6 = 0LL;
      id v7 = 0LL;
      id v8 = 0LL;
      id v9 = 0LL;
      id v10 = 0LL;
      uint64_t v11 = 0LL;
      id v3 = 0LL;
      goto LABEL_9;
    }

    uint64_t v47 = v12;
  }

  else
  {
    uint64_t v47 = 0LL;
  }

  uint64_t v19 = *(void **)(a1 + 32);
  __int128 v20 = *(void **)(a1 + 48);
  id v53 = v4;
  __int128 v21 = create_ucrt_info(v19, v20, &v53);
  id v22 = v53;

  if (!v21)
  {
    id v5 =  createMobileActivationError( (uint64_t)"_performUCRTOOB_block_invoke",  813LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v22,  @"Failed to create UCRT info.");

    id v6 = 0LL;
    id v7 = 0LL;
LABEL_32:
    id v8 = 0LL;
    id v9 = 0LL;
    id v10 = 0LL;
    uint64_t v11 = 0LL;
    id v3 = 0LL;
    goto LABEL_40;
  }

  id v51 = v22;
  id v52 = 0LL;
  char XMLRequest = createXMLRequest(v21, (NSMutableURLRequest **)&v52, (NSError **)&v51);
  id v6 = v52;
  id v24 = v51;

  if ((XMLRequest & 1) == 0)
  {
    id v7 = v21;
    id v5 =  createMobileActivationError( (uint64_t)"_performUCRTOOB_block_invoke",  818LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create request.");

    goto LABEL_32;
  }

  id v25 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  uint64_t v26 = (NSMutableDictionary *)[v25 copyAnswer:@"UniqueDeviceID"];

  id v10 = (NSString *)isNSString(v26);
  if (v10)
  {
    id v10 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ - %@",  @"iOS Device Activator (MobileActivation-1015.60.1)",  *(void *)(a1 + 40));
    if (v10)
    {
      uint64_t v27 = +[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", @"https://tbsc.apple.com/oob/vend");
      [v6 setURL:v27];

      [v6 setValue:v10 forHTTPHeaderField:@"User-Agent"];
      [v6 setValue:v26 forHTTPHeaderField:@"x-jmet-deviceid"];
      if (v47)
      {
        [v47 doubleValue];
        objc_msgSend(v6, "setTimeoutInterval:");
      }

      id v45 = v24;
      if (is_internal_build())
      {
        id v28 = v15;
        id v29 = -[NSDictionary objectForKeyedSubscript:](v15, "objectForKeyedSubscript:", @"UCRTOOBOverrideURL");
        id v30 = isNSString(v29);

        if (v30)
        {
          id v31 = -[NSDictionary objectForKeyedSubscript:](v28, "objectForKeyedSubscript:", @"UCRTOOBOverrideURL");
          uint64_t v32 = +[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v31);
          [v6 setURL:v32];
        }

        id v33 = -[NSDictionary objectForKeyedSubscript:](v28, "objectForKeyedSubscript:", @"UseReverseProxy");
        id v34 = isNSNumber(v33);
        if (v34)
        {
          uint64_t v35 = v34;
          id v3 = v26;
          id v7 = v21;
          id v36 = -[NSDictionary objectForKeyedSubscript:](v28, "objectForKeyedSubscript:", @"UseReverseProxy");
          unsigned int v37 = [v36 BOOLValue];

          if (v37)
          {
            uint64_t v11 = copyReverseProxyDictionary(0LL, 0LL, 0LL);
LABEL_39:
            BOOL v39 = formatURLRequest(v6);
            id v40 = copy_log_directory_path();
            id v41 = [v40 stringByAppendingPathComponent:@"ucrt_oob_request.txt"];
            -[NSMutableString writeToFile:atomically:encoding:error:]( v39,  "writeToFile:atomically:encoding:error:",  v41,  0LL,  4LL,  0LL);

            id v49 = v45;
            id v50 = 0LL;
            id v9 = talkToServerWithError(v6, 0LL, 0, v11, &v50, &v55, &v49);
            id v8 = v50;
            id v5 = (NSError *)v49;

            uint64_t v44 = formatURLResponse(v9, v55, v8);
            id v46 = copy_log_directory_path();
            id v42 = [v46 stringByAppendingPathComponent:@"ucrt_oob_response.txt"];
            -[NSMutableString writeToFile:atomically:encoding:error:](v44, "writeToFile:atomically:encoding:error:");

            goto LABEL_40;
          }
        }

        else
        {
          id v3 = v26;
          id v7 = v21;
        }
      }

      else
      {
        id v3 = v26;
        id v7 = v21;
      }

      uint64_t v11 = 0LL;
      goto LABEL_39;
    }

    id v3 = v26;
    id v7 = v21;
    MobileActivationError = createMobileActivationError( (uint64_t)"_performUCRTOOB_block_invoke",  830LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create user agent string.",  v43);
  }

  else
  {
    id v3 = v26;
    id v7 = v21;
    MobileActivationError = createMobileActivationError( (uint64_t)"_performUCRTOOB_block_invoke",  824LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query %@.",  @"UniqueDeviceID");
  }

  id v5 = MobileActivationError;

  id v8 = 0LL;
  id v9 = 0LL;
  uint64_t v11 = 0LL;
LABEL_40:
  id v12 = v47;
LABEL_9:
  uint64_t v13 = *(void *)(a1 + 56);
  if (v13) {
    (*(void (**)(uint64_t, id, id, uint64_t, NSError *))(v13 + 16))(v13, v9, v8, v55, v5);
  }
}

Class __getMSDKManagedDeviceClass_block_invoke(uint64_t a1)
{
  id v3 = 0LL;
  if (!MobileStoreDemoKitLibraryCore_frameworkLibrary)
  {
    __int128 v4 = off_100255808;
    uint64_t v5 = 0LL;
    MobileStoreDemoKitLibraryCore_frameworkLibrary = _sl_dlopen(&v4, &v3);
  }

  if (!MobileStoreDemoKitLibraryCore_frameworkLibrary) {
    __getMSDKManagedDeviceClass_block_invoke_cold_1(&v3);
  }
  if (v3) {
    free(v3);
  }
  Class result = objc_getClass("MSDKManagedDevice");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    __getMSDKManagedDeviceClass_block_invoke_cold_2();
  }
  getMSDKManagedDeviceClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

void __copy_helper_block_e8_32r(uint64_t a1, uint64_t a2)
{
}

void __destroy_helper_block_e8_32r(uint64_t a1)
{
}

void __performDCRTOOB_block_invoke(uint64_t a1)
{
  uint64_t v43 = 0LL;
  uint64_t v44 = &v43;
  uint64_t v45 = 0x2020000000LL;
  uint64_t v46 = 0LL;
  CFTypeRef cf = 0LL;
  if (!*(void *)(a1 + 32) || !*(void *)(a1 + 40))
  {
    id v17 =  createMobileActivationError( (uint64_t)"performDCRTOOB_block_invoke",  395LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
    id v10 = 0LL;
    id v16 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v11 = 0LL;
    goto LABEL_30;
  }

  if (*(_BYTE *)(a1 + 48)) {
    uint64_t v2 = @"SDAK";
  }
  else {
    uint64_t v2 = @"DAK";
  }
  if (*(_BYTE *)(a1 + 48)) {
    uint64_t v3 = 10LL;
  }
  else {
    uint64_t v3 = 9LL;
  }
  id v41 = 0LL;
  char v4 = libaks_system_key_operate(v3, 1LL, (NSError **)&v41);
  uint64_t v5 = (NSError *)v41;
  id v6 = v5;
  if ((v4 & 1) != 0)
  {
    id v40 = v5;
    BOOL is_legacy = security_committed_uik_is_legacy(&v40);
    id v8 = (NSError *)v40;

    if (v8) {
      char v9 = is_legacy;
    }
    else {
      char v9 = 1;
    }
    if ((v9 & 1) == 0)
    {
      id v17 =  createMobileActivationError( (uint64_t)"performDCRTOOB_block_invoke",  419LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v8,  @"Failed to query legacy UIK support.");
      id v10 = 0LL;
      goto LABEL_27;
    }

    id v39 = v8;
    id v10 = libaks_system_key_collection(v3, 3LL, is_legacy, 0LL, (NSError **)&v39);
    id v6 = (NSError *)v39;

    if (v10)
    {
      id v38 = v6;
      uint64_t v11 = libaks_system_key_get_public(v3, 3LL, (NSError **)&v38);
      id v8 = (NSError *)v38;

      if (v11)
      {
        uint64_t v12 = SecAccessControlCreate(0LL, &cf);
        uint64_t v13 = (const void *)v12;
        if (v12)
        {
          uint64_t v14 = kSecAttrAccessibleUntilReboot;
          if ((SecAccessControlSetProtection(v12, kSecAttrAccessibleUntilReboot, &cf) & 1) != 0)
          {
            id v37 = v8;
            id v15 = (__SecKey *)createReferenceKeyBlob(v13, 0, 0LL, &v37);
            id v6 = (NSError *)v37;

            v44[3] = (uint64_t)v15;
            if (v15)
            {
              id v36 = v6;
              id v16 = security_create_external_representation(v15, 0LL, (NSError **)&v36);
              id v17 = (NSError *)v36;

              if (v16)
              {
                double v18 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
                if (v18)
                {
                  uint64_t v19 = copy_required_dcrt_oids();
                  -[NSMutableDictionary setObject:forKeyedSubscript:]( v18,  "setObject:forKeyedSubscript:",  v19,  @"OIDSToInclude");

                  -[NSMutableDictionary setObject:forKeyedSubscript:]( v18,  "setObject:forKeyedSubscript:",  v10,  @"ClientAttestationData");
                  -[NSMutableDictionary setObject:forKeyedSubscript:]( v18,  "setObject:forKeyedSubscript:",  v11,  @"ClientAttestationPublicKey");
                  __int128 v20 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", is_legacy);
                  -[NSMutableDictionary setObject:forKeyedSubscript:]( v18,  "setObject:forKeyedSubscript:",  v20,  @"scrtAttestation");

                  if (*(_BYTE *)(a1 + 48)) {
                    __int128 v21 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 2LL);
                  }
                  else {
                    __int128 v21 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 0LL);
                  }
                  id v29 = v21;
                  -[NSMutableDictionary setObject:forKeyedSubscript:]( v18,  "setObject:forKeyedSubscript:",  v21,  @"CertType");

                  id v30 = *(void **)(a1 + 32);
                  id v31 = copy_calling_process_name();
                  if (*(_BYTE *)(a1 + 48)) {
                    int v32 = 3;
                  }
                  else {
                    int v32 = 1;
                  }
                  v33[0] = _NSConcreteStackBlock;
                  v33[1] = 3254779904LL;
                  v33[2] = __performDCRTOOB_block_invoke_2;
                  v33[3] = &__block_descriptor_48_e8_32bs40r_e34_v24__0__NSDictionary_8__NSError_16l;
                  id v34 = *(id *)(a1 + 40);
                  uint64_t v35 = &v43;
                  issueClientCertificateWithReferenceKey(v30, v31, v16, v32, v18, v33);

LABEL_35:
                  CFRelease(v13);
                  uint64_t v26 = v18;
                  goto LABEL_36;
                }

                id v28 =  createMobileActivationError( (uint64_t)"performDCRTOOB_block_invoke",  471LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate dictionary.");
              }

              else
              {
                id v28 =  createMobileActivationError( (uint64_t)"performDCRTOOB_block_invoke",  463LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v17,  @"Failed to encode RK as data.");
                id v16 = 0LL;
              }

              id v6 = v17;
              id v17 = v28;
            }

            else
            {
              id v17 =  createMobileActivationError( (uint64_t)"performDCRTOOB_block_invoke",  457LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v6,  @"Failed to create reference key.");
              id v16 = 0LL;
            }

            goto LABEL_29;
          }

          id v17 =  createMobileActivationError( (uint64_t)"performDCRTOOB_block_invoke",  451LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  (void *)cf,  @"Failed to set ACL protection to %@.",  v14);
          id v16 = 0LL;
        }

        else
        {
          id v17 =  createMobileActivationError( (uint64_t)"performDCRTOOB_block_invoke",  446LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  (void *)cf,  @"Failed to create access control.");
          id v16 = 0LL;
          uint64_t v13 = 0LL;
        }

        goto LABEL_28;
      }

      id v17 =  createMobileActivationError( (uint64_t)"performDCRTOOB_block_invoke",  437LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v8,  @"Failed to query %@ public key.",  v2);
LABEL_27:
      id v16 = 0LL;
      uint64_t v13 = 0LL;
      uint64_t v11 = 0LL;
LABEL_28:
      id v6 = v8;
      goto LABEL_29;
    }

    uint64_t v27 = "UIK";
    if (is_legacy) {
      uint64_t v27 = "SIK";
    }
    id v22 =  createMobileActivationError( (uint64_t)"performDCRTOOB_block_invoke",  429LL,  @"com.apple.MobileActivation.ErrorDomain",  -11LL,  v6,  @"Failed to attest %@ to %s.",  v2,  v27);
  }

  else
  {
    id v22 =  createMobileActivationError( (uint64_t)"performDCRTOOB_block_invoke",  407LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v5,  @"Failed to bump %@.",  v2);
  }

  id v17 = v22;
  id v10 = 0LL;
  id v16 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v11 = 0LL;
LABEL_29:

LABEL_30:
  uint64_t v23 = *(void *)(a1 + 40);
  if (v23) {
    (*(void (**)(uint64_t, void, NSError *))(v23 + 16))(v23, 0LL, v17);
  }
  id v24 = v44;
  id v25 = (const void *)v44[3];
  if (v25)
  {
    CFRelease(v25);
    id v24 = v44;
  }

  double v18 = 0LL;
  uint64_t v26 = 0LL;
  v24[3] = 0LL;
  if (v13) {
    goto LABEL_35;
  }
LABEL_36:
  if (cf) {
    CFRelease(cf);
  }
  _Block_object_dispose(&v43, 8);
}

void sub_100038950( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

void __performDCRTOOB_block_invoke_2(uint64_t a1, id a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v5, v6);
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
  char v9 = *(const void **)(v8 + 24);
  if (v9)
  {
    CFRelease(v9);
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
  }

  *(void *)(v8 + 24) = 0LL;
}

void __copy_helper_block_e8_32b40r(uint64_t a1, uint64_t a2)
{
}

void OUTLINED_FUNCTION_0_0( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_3(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

  ;
}

NSMutableDictionary *copySplunkDeviceIdentifiers(void *a1, void *a2)
{
  id v2 = a1;
  id v60 = 0LL;
  id v61 = &v60;
  uint64_t v62 = 0x3032000000LL;
  id v63 = __Block_byref_object_copy__5;
  uint64_t v64 = __Block_byref_object_dispose__5;
  id v65 = 0LL;
  uint64_t v3 = (dispatch_queue_s *)copySplunkUUIDQueue();
  if (v3)
  {
    block = (const __CFString *)_NSConcreteStackBlock;
    uint64_t v50 = 3254779904LL;
    id v51 = __copySplunkLogUUID_block_invoke;
    id v52 = (const __CFString *)&__block_descriptor_48_e8_32s40r_e5_v8__0l;
    id v53 = v2;
    id v54 = (const __CFString *)&v60;
    dispatch_sync(v3, &block);

    id v4 = v61[5];
  }

  else
  {
    id v5 = copyLoggingHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)) {
      copySplunkDeviceIdentifiers_cold_1();
    }

    id v4 = 0LL;
  }

  _Block_object_dispose(&v60, 8);

  if (!v4)
  {
    id v34 =  createMobileActivationError( (uint64_t)"copy_splunk_identifier_info",  165LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query %@.",  @"uuidString");
    id v19 = 0LL;
    id v32 = 0LL;
    id v29 = 0LL;
    id v22 = 0LL;
    id v42 = 0LL;
    id v43 = 0LL;
    id v44 = 0LL;
    id v45 = 0LL;
    id v46 = 0LL;
    id v48 = 0LL;
LABEL_30:
    uint64_t v27 = 0LL;
LABEL_31:
    id v34 = v34;

    uint64_t v35 = 0LL;
    int v36 = 1;
    goto LABEL_32;
  }

  id v6 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v48 = [v6 copyAnswer:@"DeviceClass"];

  id v7 = isNSString(v48);
  LODWORD(v6) = v7 == 0LL;

  if ((_DWORD)v6)
  {
    id v34 =  createMobileActivationError( (uint64_t)"copy_splunk_identifier_info",  171LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query %@.",  @"DeviceClass");
    id v19 = 0LL;
    id v32 = 0LL;
    id v29 = 0LL;
    id v22 = 0LL;
    id v42 = 0LL;
    id v43 = 0LL;
    id v44 = 0LL;
    id v45 = 0LL;
    id v46 = 0LL;
    goto LABEL_30;
  }

  id v8 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v46 = [v8 copyAnswer:@"DeviceVariant"];

  id v9 = isNSString(v46);
  LODWORD(v_Block_object_dispose(va, 8) = v9 == 0LL;

  if ((_DWORD)v8)
  {
    id v34 =  createMobileActivationError( (uint64_t)"copy_splunk_identifier_info",  177LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query %@.",  @"DeviceVariant");
    id v19 = 0LL;
    id v32 = 0LL;
    id v29 = 0LL;
    id v22 = 0LL;
    id v42 = 0LL;
    id v43 = 0LL;
    id v44 = 0LL;
    id v45 = 0LL;
    goto LABEL_30;
  }

  id v10 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v45 = [v10 copyAnswer:@"HWModelStr"];

  id v11 = isNSString(v45);
  LODWORD(v10) = v11 == 0LL;

  if ((_DWORD)v10)
  {
    id v34 =  createMobileActivationError( (uint64_t)"copy_splunk_identifier_info",  183LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query %@.",  @"HWModelStr");
    id v19 = 0LL;
    id v32 = 0LL;
    id v29 = 0LL;
    id v22 = 0LL;
    id v42 = 0LL;
    id v43 = 0LL;
    id v44 = 0LL;
    goto LABEL_30;
  }

  id v12 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v44 = [v12 copyAnswer:@"ProductType"];

  id v13 = isNSString(v44);
  LODWORD(v12) = v13 == 0LL;

  if ((_DWORD)v12)
  {
    id v34 =  createMobileActivationError( (uint64_t)"copy_splunk_identifier_info",  189LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query %@.",  @"ProductType");
    id v19 = 0LL;
    id v32 = 0LL;
    id v29 = 0LL;
    id v22 = 0LL;
    id v42 = 0LL;
    id v43 = 0LL;
    goto LABEL_30;
  }

  id v14 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v43 = [v14 copyAnswer:@"BuildVersion"];

  id v15 = isNSString(v43);
  LODWORD(v14) = v15 == 0LL;

  if ((_DWORD)v14)
  {
    id v34 =  createMobileActivationError( (uint64_t)"copy_splunk_identifier_info",  195LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query %@.",  @"BuildVersion");
    id v19 = 0LL;
    id v32 = 0LL;
    id v29 = 0LL;
    id v22 = 0LL;
    id v42 = 0LL;
    goto LABEL_30;
  }

  id v16 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v42 = [v16 copyAnswer:@"ProductVersion"];

  id v17 = isNSString(v42);
  LODWORD(v16) = v17 == 0LL;

  if ((_DWORD)v16)
  {
    id v34 =  createMobileActivationError( (uint64_t)"copy_splunk_identifier_info",  201LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query %@.",  @"ProductVersion");
    id v19 = 0LL;
LABEL_29:
    id v32 = 0LL;
    id v29 = 0LL;
    id v22 = 0LL;
    goto LABEL_30;
  }

  id v18 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v19 = [v18 copyAnswer:@"SigningFuse"];

  id v20 = isNSNumber(v19);
  LODWORD(v1_Block_object_dispose(va, 8) = v20 == 0LL;

  if ((_DWORD)v18)
  {
    id v34 =  createMobileActivationError( (uint64_t)"copy_splunk_identifier_info",  207LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query %@.",  @"SigningFuse");
    goto LABEL_29;
  }

  id v21 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v22 = (__CFString *)[v21 copyAnswer:@"ReleaseType"];

  id v23 = isNSString(v22);
  LODWORD(v21) = v23 == 0LL;

  if ((_DWORD)v21)
  {

    id v22 = @"Customer";
  }

  id v24 = objc_alloc(&OBJC_CLASS___NSMutableDictionary);
  block = @"deviceClass";
  uint64_t v50 = (uint64_t)@"deviceVariant";
  id v60 = v48;
  id v61 = (id *)v46;
  id v51 = (void (*)(uint64_t))@"hardwareModel";
  id v52 = @"productType";
  uint64_t v62 = (uint64_t)v45;
  id v63 = (uint64_t (*)(uint64_t, uint64_t))v44;
  id v53 = @"buildVersion";
  id v54 = @"productVersion";
  uint64_t v64 = (void (*)(uint64_t))v43;
  id v65 = v42;
  uint64_t v55 = @"releaseType";
  uint64_t v56 = @"productionFused";
  id v66 = v22;
  id v67 = v19;
  id v68 = v4;
  id v57 = @"uuidString";
  id v58 = @"hactivationEnabled";
  id v25 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", use_hactivation());
  id v69 = v25;
  id v59 = @"diagnosticsCheckEnabled";
  id v70 = &__kCFBooleanTrue;
  uint64_t v26 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v60,  &block,  11LL);
  uint64_t v27 = -[NSMutableDictionary initWithDictionary:](v24, "initWithDictionary:", v26);

  if (!has_internal_diagnostics() && !is_internal_build())
  {
    id v29 = 0LL;
    id v32 = 0LL;
    goto LABEL_41;
  }

  id v28 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v29 = [v28 copyAnswer:@"SerialNumber"];

  id v30 = isNSString(v29);
  LODWORD(v2_Block_object_dispose(va, 8) = v30 == 0LL;

  if ((_DWORD)v28)
  {
    id v34 =  createMobileActivationError( (uint64_t)"copy_splunk_identifier_info",  233LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query %@.",  @"SerialNumber");
    id v32 = 0LL;
    goto LABEL_31;
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:](v27, "setObject:forKeyedSubscript:", v29, @"serialNumber");
  id v31 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v32 = [v31 copyAnswer:@"UniqueDeviceID"];

  id v33 = isNSString(v32);
  LODWORD(v31) = v33 == 0LL;

  if ((_DWORD)v31)
  {
    id v34 =  createMobileActivationError( (uint64_t)"copy_splunk_identifier_info",  241LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query %@.",  @"UniqueDeviceID");
    goto LABEL_31;
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:](v27, "setObject:forKeyedSubscript:", v32, @"uniqueDeviceID");
LABEL_41:
  uint64_t v35 = v27;
  id v34 = 0LL;
  if (!v35)
  {
    uint64_t v27 = 0LL;
    goto LABEL_31;
  }

  uint64_t v27 = v35;
  int v36 = 0;
LABEL_32:
  id v37 = v35;

  id v38 = v34;
  if (v36)
  {
    id v39 =  createAndLogError( (uint64_t)"copySplunkDeviceIdentifiers",  828LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v38,  @"Failed to query splunk identifier info.");

    id v40 = 0LL;
    id v38 = v39;
  }

  else
  {
    id v40 = v37;
  }

  if (a2 && !v40) {
    *a2 = v38;
  }

  return v40;
}

void sub_100039514( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
}

NSMutableDictionary *copySplunkDailyStatistics(void *a1, NSError **a2)
{
  id v3 = a1;
  id v55 = data_ark_copy(v3, 0LL, @"ActivationState");
  id v4 = copy_ucrt_path();
  id v5 = [v4 stringByAppendingPathComponent:@"ucrt.pem"];

  id v51 = a2;
  if (!v5)
  {
    id v24 =  createMobileActivationError( (uint64_t)"copy_splunk_daily_statistics_info",  307LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create UCRT file path.");
    id v53 = 0LL;
    id v54 = 0LL;
    id v52 = 0LL;
    id v25 = 0LL;
    id v10 = 0LL;
LABEL_18:
    id v15 = 0LL;
LABEL_19:
    id v26 = 0LL;
    id v27 = 0LL;
    id v28 = 0LL;
    id v50 = 0LL;
LABEL_20:
    id v29 = v24;

    id v30 = 0LL;
    goto LABEL_21;
  }

  id v6 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
  unsigned int v7 = -[NSFileManager fileExistsAtPath:](v6, "fileExistsAtPath:", v5);

  if (v7) {
    id v8 = &__kCFBooleanTrue;
  }
  else {
    id v8 = &__kCFBooleanFalse;
  }
  id v9 = copy_dcrt_path();
  id v10 = [v9 stringByAppendingPathComponent:@"dcrt.der"];

  if (!v10)
  {
    id v24 =  createMobileActivationError( (uint64_t)"copy_splunk_daily_statistics_info",  321LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create DCRT file path.");
    id v53 = 0LL;
    id v54 = 0LL;
    id v52 = 0LL;
    id v25 = 0LL;
    goto LABEL_18;
  }

  id v11 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
  unsigned int v12 = -[NSFileManager fileExistsAtPath:](v11, "fileExistsAtPath:", v10);

  if (v12) {
    id v13 = &__kCFBooleanTrue;
  }
  else {
    id v13 = &__kCFBooleanFalse;
  }
  id v49 = v13;
  id v14 = copy_dcrt_path();
  id v15 = [v14 stringByAppendingPathComponent:@"sdcrt.der"];

  if (!v15)
  {
    id v24 =  createMobileActivationError( (uint64_t)"copy_splunk_daily_statistics_info",  335LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create SDCRT file path.");
    id v53 = 0LL;
    id v54 = 0LL;
    id v52 = 0LL;
    id v25 = 0LL;
    id v10 = 0LL;
    goto LABEL_19;
  }

  id v16 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
  unsigned int v17 = -[NSFileManager fileExistsAtPath:](v16, "fileExistsAtPath:", v15);

  if (v17) {
    id v18 = &__kCFBooleanTrue;
  }
  else {
    id v18 = &__kCFBooleanFalse;
  }
  uint64_t v47 = v18;
  id v19 = copy_suinfo_directory_path();
  id v20 = [v19 stringByAppendingPathComponent:@"psc.sui"];

  id v50 = v20;
  id v48 = v8;
  if (v20
    && (id v21 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),
        unsigned __int8 v22 = -[NSFileManager fileExistsAtPath:isDirectory:](v21, "fileExistsAtPath:isDirectory:", v20, 0LL),
        v21,
        (v22 & 1) != 0))
  {
    id v23 = &__kCFBooleanTrue;
  }

  else
  {
    id v23 = &__kCFBooleanFalse;
  }

  id v45 = v23;
  id v54 = data_ark_copy(v3, 0LL, @"CollectionLastPerformed");
  id v38 = data_ark_copy(v3, 0LL, @"UCRTOOBLastPerformed");
  id v53 = isNSString(v38);

  id v39 = data_ark_copy(v3, 0LL, @"DCRTOOBLastPerformed");
  id v52 = isNSString(v39);

  id v40 = data_ark_copy(v3, 0LL, @"SDCRTOOBLastPerformed");
  id v25 = isNSString(v40);

  id v41 = data_ark_copy(v3, 0LL, @"LastActivated");
  id v10 = isNSString(v41);

  id v42 = data_ark_copy(v3, 0LL, @"UCRTHealingRequired");
  id v26 = isNSNumber(v42);

  if (!v26) {
    id v26 = &__kCFBooleanFalse;
  }
  id v43 = data_ark_copy(v3, 0LL, @"UIKUpgradeRequired");
  id v27 = isNSNumber(v43);

  if (!v27) {
    id v27 = &__kCFBooleanFalse;
  }
  id v28 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", is_dsp_device());
  id v44 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  if (!v44)
  {
    id v24 =  createMobileActivationError( (uint64_t)"copy_splunk_daily_statistics_info",  498LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate dictionary.");
    goto LABEL_20;
  }

  id v30 = v44;
  if (v55) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v44,  "setObject:forKeyedSubscript:",  v55,  @"activationState");
  }
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v30,  "setObject:forKeyedSubscript:",  v48,  @"ucrtAvailable",  v45);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v30, "setObject:forKeyedSubscript:", v46, @"pcrtAvailable");
  -[NSMutableDictionary setObject:forKeyedSubscript:](v30, "setObject:forKeyedSubscript:", v49, @"dcrtAvailable");
  -[NSMutableDictionary setObject:forKeyedSubscript:](v30, "setObject:forKeyedSubscript:", v47, @"sdcrtAvailable");
  if (v54) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v30,  "setObject:forKeyedSubscript:",  v54,  @"collectionLastPerformedBuild");
  }
  if (v53) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v30,  "setObject:forKeyedSubscript:",  v53,  @"ucrtOOBLastPerformedBuild");
  }
  if (v52) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v30,  "setObject:forKeyedSubscript:",  v52,  @"dcrtOOBLastPerformedBuild");
  }
  if (v25) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v30,  "setObject:forKeyedSubscript:",  v25,  @"sdcrtOOBLastPerformedBuild");
  }
  if (v10) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v30,  "setObject:forKeyedSubscript:",  v10,  @"activationLastPerformedBuild");
  }
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v30,  "setObject:forKeyedSubscript:",  v26,  @"ucrtHealingRequired");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v30,  "setObject:forKeyedSubscript:",  v27,  @"uikUpgradeRequired");
  if (v28) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v30, "setObject:forKeyedSubscript:", v28, @"DSPDevice");
  }
  id v29 = 0LL;
LABEL_21:

  id v31 = v29;
  if (v30)
  {
    id v32 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v33 = v51;
    if (v32)
    {
      id v34 = v32;
      -[NSMutableDictionary addEntriesFromDictionary:](v32, "addEntriesFromDictionary:", v30);
      uint64_t v35 = v34;
      goto LABEL_29;
    }

    int v36 =  createAndLogError( (uint64_t)"copySplunkDailyStatistics",  911LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate dictionary.");
  }

  else
  {
    int v36 =  createAndLogError( (uint64_t)"copySplunkDailyStatistics",  882LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v31,  @"Failed to query daily splunk info.");
    id v33 = v51;
  }

  if (v33)
  {
    id v31 = v36;
    uint64_t v35 = 0LL;
    void *v33 = v31;
  }

  else
  {
    uint64_t v35 = 0LL;
    id v31 = v36;
  }

NSMutableArray *copySortedSplunkFileList()
{
  uint64_t v0 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  if (v0)
  {
    id v1 = copy_splunk_directory_path();
    id v2 = copy_sorted_file_list(v1);

    if (v2)
    {
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      id v16 = v2;
      id v3 = v2;
      id v4 = -[NSArray countByEnumeratingWithState:objects:count:]( v3,  "countByEnumeratingWithState:objects:count:",  &v17,  v21,  16LL);
      if (v4)
      {
        id v5 = v4;
        uint64_t v6 = *(void *)v18;
        do
        {
          for (i = 0LL; i != v5; i = (char *)i + 1)
          {
            if (*(void *)v18 != v6) {
              objc_enumerationMutation(v3);
            }
            id v8 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)i);
            id v9 = isNSURL(v8);
            if (v9)
            {
              id v10 = v9;
              id v11 = [v8 pathExtension];
              unsigned int v12 = [v11 isEqualToString:@"splunklog"];

              if (v12)
              {
                id v13 = [v8 path];
                -[NSMutableArray addObject:](v0, "addObject:", v13);
              }
            }
          }

          id v5 = -[NSArray countByEnumeratingWithState:objects:count:]( v3,  "countByEnumeratingWithState:objects:count:",  &v17,  v21,  16LL);
        }

        while (v5);
      }

      id v2 = v16;
    }

    id v14 = v0;
  }

  return v0;
}

void writeSplunkLog( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6, void *a7, uint64_t a8, uint64_t a9)
{
  id v15 = a1;
  id v16 = a6;
  id v17 = a7;
  if (DiagnosticLogSubmissionEnabled())
  {
    __int128 v18 = (dispatch_queue_s *)copySplunkQueue();
    if (v18)
    {
      __int128 v19 = v18;
      if (v17)
      {
        id v30 = &a9;
        __int128 v20 = -[NSMutableString initWithFormat:arguments:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithFormat:arguments:",  v17,  &a9);
      }

      else
      {
        __int128 v20 = 0LL;
      }

      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3254779904LL;
      v22[2] = __writeSplunkLog_block_invoke;
      v22[3] = &__block_descriptor_84_e8_32s40s48s_e5_v8__0l;
      id v23 = v15;
      uint64_t v26 = a2;
      uint64_t v27 = a3;
      int v29 = a5;
      id v24 = v16;
      id v25 = v20;
      uint64_t v28 = a4;
      id v21 = v20;
      dispatch_async(v19, v22);
    }

    else
    {
      __int128 v19 = copyLoggingHandle();
      if (os_log_type_enabled((os_log_t)v19, OS_LOG_TYPE_FAULT)) {
        copySplunkDeviceIdentifiers_cold_1();
      }
    }
  }
}

id copySplunkQueue()
{
  if (copySplunkQueue_onceToken != -1) {
    dispatch_once(&copySplunkQueue_onceToken, &__block_literal_global_104);
  }
  return (id)copySplunkQueue_splunkQueue;
}

void __writeSplunkLog_block_invoke(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = (os_log_s *)copy_splunk_directory_path();
    if (v2)
    {
      id v3 = v2;
      id v4 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
      NSFileAttributeKey v113 = NSFilePosixPermissions;
      char v114 = &off_10026D590;
      id v5 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v114,  &v113,  1LL);
      id v105 = 0LL;
      unsigned __int8 v6 = -[NSFileManager createDirectoryAtPath:withIntermediateDirectories:attributes:error:]( v4,  "createDirectoryAtPath:withIntermediateDirectories:attributes:error:",  v3,  1LL,  v5,  &v105);
      id v7 = v105;

      if ((v6 & 1) == 0)
      {
        id v25 = copyLoggingHandle();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT)) {
          __writeSplunkLog_block_invoke_cold_11();
        }
        uint64_t v26 = v25;
        goto LABEL_34;
      }

      id v8 = +[NSDate date](&OBJC_CLASS___NSDate, "date");
      -[NSDate timeIntervalSince1970](v8, "timeIntervalSince1970");
      id v10 = +[NSNumber numberWithLong:](&OBJC_CLASS___NSNumber, "numberWithLong:", 1000 * (uint64_t)v9);

      id v11 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      if (!v11)
      {
        uint64_t v27 = copyLoggingHandle();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT)) {
          __writeSplunkLog_block_invoke_cold_3();
        }

        uint64_t v26 = v10;
        goto LABEL_34;
      }

      unsigned int v12 = v11;
      id v13 = *(void **)(a1 + 32);
      id v104 = v7;
      id v14 = copySplunkDeviceIdentifiers(v13, &v104);
      id v15 = v104;

      if (!v14)
      {
        uint64_t v28 = copyLoggingHandle();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT)) {
          __writeSplunkLog_block_invoke_cold_4();
        }

        int v29 = v15;
        goto LABEL_35;
      }

      if (*(void *)(a1 + 40)) {
        -[NSMutableDictionary addEntriesFromDictionary:](v12, "addEntriesFromDictionary:");
      }
      -[NSMutableDictionary addEntriesFromDictionary:](v12, "addEntriesFromDictionary:", v14);
      id v16 = -[NSNumber stringValue](v10, "stringValue");
      -[NSMutableDictionary setObject:forKeyedSubscript:](v12, "setObject:forKeyedSubscript:", v16, @"eventTime");

      id v17 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 56));
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v12,  "setObject:forKeyedSubscript:",  v17,  @"splunkErrorCategory");

      __int128 v18 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 64));
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v12,  "setObject:forKeyedSubscript:",  v18,  @"spiErrorCode");

      -[NSMutableDictionary setObject:forKeyedSubscript:]( v12,  "setObject:forKeyedSubscript:",  @"1015.60.1",  @"projectVersion");
      __int128 v19 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v12, "setObject:forKeyedSubscript:", v19, @"lineNumber");

      uint64_t v20 = *(void *)(a1 + 48);
      if (v20) {
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v12,  "setObject:forKeyedSubscript:",  v20,  @"errorString");
      }
      if (*(void *)(a1 + 72))
      {
        id v21 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:");
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v12,  "setObject:forKeyedSubscript:",  v21,  @"functionName");
      }

      id v103 = 0LL;
      unsigned __int8 v22 =  +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v12,  200LL,  0LL,  &v103);
      id v7 = v103;

      if (!v22)
      {
        id v30 = copyLoggingHandle();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_FAULT)) {
          __writeSplunkLog_block_invoke_cold_5();
        }
        id v24 = (NSData *)v30;
        goto LABEL_33;
      }

      if (-[NSData length](v22, "length") > 0x100000)
      {
        id v23 = copyLoggingHandle();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT)) {
          __writeSplunkLog_block_invoke_cold_6(v22, v23);
        }

        id v24 = v22;
LABEL_33:

        uint64_t v26 = v14;
LABEL_34:

        int v29 = v7;
LABEL_35:

        goto LABEL_36;
      }

      id v31 = copySortedSplunkFileList();
      uint64_t v83 = a1;
      uint64_t v84 = v31;
      unsigned int v89 = v12;
      if (v31)
      {
        id v31 = -[NSMutableArray initWithArray:](objc_alloc(&OBJC_CLASS___NSMutableArray), "initWithArray:", v31);
        if ((unint64_t)-[NSMutableArray count](v31, "count") >= 0x15)
        {
          do
          {
            id v32 = copyLoggingHandle();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT)) {
              __writeSplunkLog_block_invoke_cold_10(v111, v31, &v112, v32);
            }

            id v33 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
            id v34 = -[NSMutableArray lastObject](v31, "lastObject");
            -[NSFileManager removeItemAtPath:error:](v33, "removeItemAtPath:error:", v34, 0LL);

            -[NSMutableArray removeLastObject](v31, "removeLastObject");
          }

          while ((unint64_t)-[NSMutableArray count](v31, "count") > 0x14);
        }
      }

      uint64_t v87 = v3;
      id v88 = v22;
      uint64_t v85 = v14;
      id v86 = v10;
      __int128 v102 = 0u;
      __int128 v100 = 0u;
      __int128 v101 = 0u;
      __int128 v99 = 0u;
      id obj = v31;
      id v35 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v99,  v110,  16LL);
      if (v35)
      {
        id v36 = v35;
        id v37 = 0LL;
        uint64_t v38 = *(void *)v100;
LABEL_44:
        uint64_t v39 = 0LL;
        while (1)
        {
          id v40 = v37;
          if (*(void *)v100 != v38) {
            objc_enumerationMutation(obj);
          }
          id v41 = *(void **)(*((void *)&v99 + 1) + 8 * v39);
          id v42 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
          id v98 = v7;
          id v37 = -[NSFileManager attributesOfItemAtPath:error:](v42, "attributesOfItemAtPath:error:", v41, &v98);
          id v43 = v98;

          if (v37)
          {
            id v44 = -[NSDictionary objectForKeyedSubscript:](v37, "objectForKeyedSubscript:", NSFileSize);
            id v45 = isNSNumber(v44);

            if (v45)
            {
              uint64_t v46 = objc_alloc(&OBJC_CLASS___NSData);
              id v97 = v43;
              uint64_t v47 = -[NSData initWithContentsOfFile:options:error:]( v46,  "initWithContentsOfFile:options:error:",  v41,  0LL,  &v97);
              id v48 = v97;

              if (v47)
              {
                id v95 = 0LL;
                id v49 =  +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v47,  0LL,  0LL,  &v95);
                id v7 = v95;

                id v50 = isNSArray(v49);
                if (v50)
                {
                  id v51 = v50;
                  id v52 = [v49 count];

                  if ((unint64_t)v52 < 0x3E9)
                  {
                    id v62 = -[NSDictionary objectForKeyedSubscript:](v37, "objectForKeyedSubscript:", NSFileSize);
                    unsigned int v63 = [v62 integerValue];

                    uint64_t v64 = +[NSMutableArray arrayWithArray:](&OBJC_CLASS___NSMutableArray, "arrayWithArray:", v49);
                    id v65 = v41;

                    if (!v64) {
                      goto LABEL_76;
                    }
                    id v66 = v88;
                    if (-[NSMutableArray count](v64, "count") != (id)1000
                      && -[NSData length](v88, "length") + v63 <= 0x100000)
                    {
                      -[NSMutableArray addObject:](v64, "addObject:", v89);
                      goto LABEL_78;
                    }

                    goto LABEL_77;
                  }
                }

                id v53 = copyLoggingHandle();
                if (os_log_type_enabled(v53, OS_LOG_TYPE_FAULT))
                {
                  *(_DWORD *)buf = 138412546;
                  unsigned __int8 v107 = v41;
                  __int16 v108 = 2112;
                  id v109 = v7;
                  _os_log_fault_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_FAULT,  "Invalid splunk file (%@): %@",  buf,  0x16u);
                }

                id v54 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
                -[NSFileManager removeItemAtPath:error:](v54, "removeItemAtPath:error:", 0LL, 0LL);

                id v55 = v49;
              }

              else
              {
                id v60 = copyLoggingHandle();
                if (os_log_type_enabled(v60, OS_LOG_TYPE_FAULT))
                {
                  *(_DWORD *)buf = 138412546;
                  unsigned __int8 v107 = v41;
                  __int16 v108 = 2112;
                  id v109 = v48;
                  _os_log_fault_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_FAULT,  "Failed to load %@: %@",  buf,  0x16u);
                }

                uint64_t v47 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
                id v96 = v48;
                -[NSFileManager removeItemAtPath:error:](v47, "removeItemAtPath:error:", v41, &v96);
                id v7 = v96;
                id v55 = v48;
              }

              goto LABEL_64;
            }

            uint64_t v56 = copyLoggingHandle();
            if (os_log_type_enabled(v56, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 138412290;
              unsigned __int8 v107 = v41;
              id v57 = v56;
              id v58 = "Failed to retrieve size of %@.";
              uint32_t v59 = 12;
              goto LABEL_67;
            }
          }

          else
          {
            uint64_t v56 = copyLoggingHandle();
            if (os_log_type_enabled(v56, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 138412546;
              unsigned __int8 v107 = v41;
              __int16 v108 = 2112;
              id v109 = v43;
              id v57 = v56;
              id v58 = "Failed to retrieve attributes for %@: (%@)";
              uint32_t v59 = 22;
LABEL_67:
              _os_log_fault_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_FAULT, v58, buf, v59);
            }
          }

          uint64_t v47 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
          -[NSFileManager removeItemAtPath:error:](v47, "removeItemAtPath:error:", v41, 0LL);
          id v7 = v43;
LABEL_64:

          if (v36 == (id)++v39)
          {
            id v61 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v99,  v110,  16LL);
            id v36 = v61;
            if (v61) {
              goto LABEL_44;
            }
            goto LABEL_75;
          }
        }
      }

      id v37 = 0LL;
LABEL_75:

      uint64_t v64 = 0LL;
      id v65 = 0LL;
LABEL_76:
      id v66 = v88;
LABEL_77:
      id v67 = v65;
      id v68 = v64;
      id v69 = objc_alloc(&OBJC_CLASS___NSString);
      id v70 = copy_splunk_directory_path();
      id v71 = +[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID");
      id v72 = -[NSUUID UUIDString](v71, "UUIDString");
      id v65 = -[NSString initWithFormat:](v69, "initWithFormat:", @"%@/%@.splunklog", v70, v72, v83);

      uint64_t v64 = -[NSMutableArray initWithObjects:](objc_alloc(&OBJC_CLASS___NSMutableArray), "initWithObjects:", v89, 0LL);
      if (v64)
      {
LABEL_78:
        id v94 = 0LL;
        id v73 =  +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v64,  200LL,  0LL,  &v94);
        id v74 = v94;

        if (!v73)
        {
          id v80 = copyLoggingHandle();
          if (os_log_type_enabled(v80, OS_LOG_TYPE_FAULT)) {
            __writeSplunkLog_block_invoke_cold_8();
          }

          id v81 = v74;
          goto LABEL_92;
        }

        id v93 = v74;
        char v75 = store_data(v65, v73, &v93);
        id v7 = v93;

        if ((v75 & 1) != 0)
        {
          id v76 = (const char *)[@"com.apple.mobileactivationd.splunklogging" UTF8String];
          handler[0] = _NSConcreteStackBlock;
          handler[1] = 3254779904LL;
          handler[2] = __writeSplunkLog_block_invoke_34;
          handler[3] = &__block_descriptor_40_e8_32s_e33_v16__0__NSObject_OS_xpc_object__8l;
          id v92 = (os_log_s *)*(id *)(v83 + 32);
          xpc_activity_register(v76, XPC_ACTIVITY_CHECK_IN, handler);
          id v77 = v92;
        }

        else
        {
          id v82 = copyLoggingHandle();
          if (os_log_type_enabled(v82, OS_LOG_TYPE_FAULT)) {
            __writeSplunkLog_block_invoke_cold_9();
          }
          id v77 = v82;
        }

        uint64_t v79 = v73;
      }

      else
      {
        id v78 = copyLoggingHandle();
        if (os_log_type_enabled(v78, OS_LOG_TYPE_FAULT)) {
          __writeSplunkLog_block_invoke_cold_7();
        }

        uint64_t v79 = (NSData *)v86;
      }

      id v81 = v7;
LABEL_92:

      id v3 = v87;
      goto LABEL_36;
    }

    id v3 = copyLoggingHandle();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT)) {
      __writeSplunkLog_block_invoke_cold_2();
    }
  }

  else
  {
    id v3 = copyLoggingHandle();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT)) {
      __writeSplunkLog_block_invoke_cold_1();
    }
  }

void __writeSplunkLog_block_invoke_34(uint64_t a1, id a2)
{
  id v3 = (_xpc_activity_s *)a2;
  if (xpc_activity_get_state(v3) == 2 && xpc_activity_should_defer(v3))
  {
    if (xpc_activity_set_state(v3, 3LL)) {
      goto LABEL_11;
    }
    id v4 = copyLoggingHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      __writeSplunkLog_block_invoke_34_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }

  xpc_object_t v12 = xpc_activity_copy_criteria(v3);
  if (!v12 || xpc_activity_get_state(v3) == 2) {
    splunk_activity_handler(*(void **)(a1 + 32), v12 == 0LL);
  }

LABEL_11:
}

void splunk_activity_handler(void *a1, int a2)
{
  id v3 = a1;
  id v4 = (dispatch_queue_s *)copySplunkQueue();
  if (v4)
  {
    if (a2)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3254779904LL;
      block[2] = __splunk_activity_handler_block_invoke;
      block[3] = &__block_descriptor_40_e8_32s_e5_v8__0l;
      id v12 = v3;
      dispatch_block_t v5 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, block);
      dispatch_async(v4, v5);
      id v6 = v12;
    }

    else
    {
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3254779904LL;
      v8[2] = __splunk_activity_handler_block_invoke_38;
      v8[3] = &__block_descriptor_48_e8_32s40s_e5_v8__0l;
      id v9 = v3;
      uint64_t v7 = v4;
      id v10 = v7;
      dispatch_block_t v5 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, v8);
      dispatch_async(v7, v5);

      id v6 = v9;
    }
  }

  else
  {
    dispatch_block_t v5 = copyLoggingHandle();
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_FAULT)) {
      copySplunkDeviceIdentifiers_cold_1();
    }
  }
}

void __splunk_activity_handler_block_invoke(uint64_t a1)
{
}

void __splunk_activity_handler_block_invoke_2(id a1, DataArk *a2)
{
}

void __splunk_activity_handler_block_invoke_38(uint64_t a1)
{
  uint64_t v39 = 0LL;
  id v40 = (id *)&v39;
  uint64_t v41 = 0x3032000000LL;
  id v42 = __Block_byref_object_copy__5;
  id v43 = __Block_byref_object_dispose__5;
  id v44 = 0LL;
  id v2 = copySortedSplunkFileList();
  id v25 = v2;
  if (!v2)
  {
    id v20 = 0LL;
    id v4 = 0LL;
    goto LABEL_24;
  }

  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  id v3 = -[NSMutableArray reverseObjectEnumerator](v2, "reverseObjectEnumerator");
  id v4 = [v3 countByEnumeratingWithState:&v35 objects:v49 count:16];
  if (!v4)
  {
LABEL_18:
    id v20 = 0LL;
    id v21 = 0LL;
LABEL_22:

    goto LABEL_25;
  }

  uint64_t v5 = *(void *)v36;
LABEL_4:
  uint64_t v6 = 0LL;
  while (1)
  {
    if (*(void *)v36 != v5) {
      objc_enumerationMutation(v3);
    }
    uint64_t v7 = *(void **)(*((void *)&v35 + 1) + 8 * v6);
    uint64_t v8 = objc_alloc(&OBJC_CLASS___NSData);
    id v9 = v40 + 5;
    id obj = v40[5];
    id v10 = -[NSData initWithContentsOfFile:options:error:](v8, "initWithContentsOfFile:options:error:", v7, 0LL, &obj);
    objc_storeStrong(v9, obj);
    if (!v10)
    {
      id v17 = copyLoggingHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
      {
        id v19 = v40[5];
        *(_DWORD *)buf = 138412546;
        uint64_t v46 = v7;
        __int16 v47 = 2112;
        id v48 = v19;
        _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Failed to load %@: %@", buf, 0x16u);
      }

      id v12 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
      -[NSFileManager removeItemAtPath:error:](v12, "removeItemAtPath:error:", v7, 0LL);
      goto LABEL_16;
    }

    uint64_t v11 = v40;
    id v33 = 0LL;
    id v12 = (NSFileManager *) +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v10,  0LL,  0LL,  &v33);
    objc_storeStrong(v11 + 5, v33);
    id v13 = isNSArray(v12);
    if (v13)
    {
      BOOL v14 = (unint64_t)-[NSFileManager count](v12, "count") > 0x3E8;

      if (!v14) {
        break;
      }
    }

    id v15 = copyLoggingHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
    {
      id v18 = v40[5];
      *(_DWORD *)buf = 138412546;
      uint64_t v46 = v7;
      __int16 v47 = 2112;
      id v48 = v18;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_FAULT,  "Invalid splunk file (%@): %@",  buf,  0x16u);
    }

    id v16 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
    -[NSFileManager removeItemAtPath:error:](v16, "removeItemAtPath:error:", v7, 0LL);

LABEL_16:
    if (v4 == (id)++v6)
    {
      id v4 = [v3 countByEnumeratingWithState:&v35 objects:v49 count:16];
      if (v4) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }

  id v4 = v7;

  if (v12)
  {
    id v22 = [v4 stringByAppendingString:@".inflight"];
    id v23 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
    -[NSFileManager moveItemAtPath:toPath:error:](v23, "moveItemAtPath:toPath:error:", v4, v22, 0LL);

    id v24 = dispatch_get_global_queue(0LL, 0LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3254779904LL;
    block[2] = __splunk_activity_handler_block_invoke_41;
    block[3] = &__block_descriptor_80_e8_32s40s48s56s64s72r_e5_v8__0l;
    id v20 = v22;
    id v27 = v20;
    id v21 = v12;
    uint64_t v28 = v21;
    id v4 = v4;
    id v29 = v4;
    id v32 = &v39;
    id v30 = *(id *)(a1 + 32);
    id v31 = *(id *)(a1 + 40);
    dispatch_async(v24, block);

    id v3 = v27;
    goto LABEL_22;
  }

  id v20 = 0LL;
LABEL_24:
  id v21 = 0LL;
LABEL_25:
  _Block_object_dispose(&v39, 8);
}

void sub_10003B6B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void __splunk_activity_handler_block_invoke_41(uint64_t a1)
{
  uint64_t v71 = 0LL;
  id v72 = &v71;
  uint64_t v73 = 0x3032000000LL;
  id v74 = __Block_byref_object_copy__5;
  char v75 = __Block_byref_object_dispose__5;
  id v76 = 0LL;
  id v2 = copyLoggingHandle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Performing splunk logging (%@).", buf, 0xCu);
  }

  uint64_t v4 = os_transaction_create([@"com.apple.mobileactivationd.splunklogging" UTF8String]);
  uint64_t v5 = (void *)v72[5];
  v72[5] = v4;

  v62[0] = _NSConcreteStackBlock;
  v62[1] = 3254779904LL;
  unsigned int v63 = __splunk_activity_handler_block_invoke_42;
  uint64_t v64 = &__block_descriptor_80_e8_32s40s48s56s64r72r_e48_v40__0__NSData_8__NSDictionary_16q24__NSError_32l;
  uint64_t v6 = *(void **)(a1 + 40);
  id v65 = *(id *)(a1 + 32);
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 72);
  id v66 = v7;
  uint64_t v69 = v8;
  id v67 = *(id *)(a1 + 56);
  id v70 = &v71;
  id v68 = *(id *)(a1 + 64);
  id v9 = v6;
  id v10 = v62;
  uint64_t v79 = 0LL;
  if (!v9)
  {
    id v16 =  createMobileActivationError( (uint64_t)"performSplunkPost",  664LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
    id v60 = 0LL;
    id v61 = 0LL;
    goto LABEL_24;
  }

  if (!is_internal_build())
  {
    id v60 = 0LL;
    id v61 = 0LL;
    goto LABEL_12;
  }

  uint64_t v11 = objc_alloc(&OBJC_CLASS___NSUserDefaults);
  id v61 =  -[NSUserDefaults persistentDomainForName:]( v11,  "persistentDomainForName:",  @"com.apple.mobileactivationd");

  id v12 = -[NSDictionary objectForKeyedSubscript:](v61, "objectForKeyedSubscript:", @"UseReverseProxy");
  id v13 = isNSNumber(v12);
  if (!v13)
  {

    goto LABEL_11;
  }

  id v14 = -[NSDictionary objectForKeyedSubscript:](v61, "objectForKeyedSubscript:", @"UseReverseProxy");
  unsigned int v15 = [v14 BOOLValue];

  if (!v15)
  {
LABEL_11:
    id v60 = 0LL;
    goto LABEL_12;
  }

  id v60 = copyReverseProxyDictionary(0LL, 0LL, 0LL);
LABEL_12:
  id v17 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v18 = v17;
  if (v17)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v9, @"events");
    id v19 = +[NSDate date](&OBJC_CLASS___NSDate, "date");
    -[NSDate timeIntervalSince1970](v19, "timeIntervalSince1970");
    id v21 = +[NSNumber numberWithLong:](&OBJC_CLASS___NSNumber, "numberWithLong:", 1000 * (uint64_t)v20);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v18, "setObject:forKeyedSubscript:", v21, @"postTime");

    id v78 = 0LL;
    id v22 =  +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  v18,  0LL,  &v78);
    id v23 = (NSError *)v78;
    id v24 = v23;
    if (v22)
    {
      id v25 = objc_alloc(&OBJC_CLASS___NSMutableURLRequest);
      uint64_t v26 =  +[NSURL URLWithString:]( &OBJC_CLASS___NSURL,  "URLWithString:",  @"https://init.itunes.apple.com/bag.xml?ix=5");
      LODWORD(v27) = NETWORK_TIMEOUT_SECONDS;
      uint64_t v28 = -[NSMutableURLRequest initWithURL:cachePolicy:timeoutInterval:]( v25,  "initWithURL:cachePolicy:timeoutInterval:",  v26,  0LL,  (double)v27);

      if (!v28)
      {
        id v16 =  createMobileActivationError( (uint64_t)"performSplunkPost",  698LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate request.");
        id v29 = 0LL;
        id v46 = 0LL;
        uint64_t v28 = 0LL;
LABEL_43:
        id v47 = 0LL;
        goto LABEL_44;
      }

      -[NSMutableURLRequest setValue:forHTTPHeaderField:](v28, "setValue:forHTTPHeaderField:");
      id v77 = v24;
      id v29 = (NSError *)talkToServerWithError(v28, 0LL, 0, v60, 0LL, 0LL, &v77);
      id v58 = v77;

      if (v29)
      {
        *(void *)buf = 0LL;
        id v57 =  +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v29,  0LL,  0LL,  buf);
        id v30 = (NSError *)*(id *)buf;
        id v31 = isNSDictionary(v57);
        BOOL v32 = v31 == 0LL;

        if (v32)
        {
          id v48 =  createMobileActivationError( (uint64_t)"copySplunkBaseURLFromStorebag",  607LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v30,  @"Failed to create dictionary from data.");
          id v53 = 0LL;
          id v54 = 0LL;
          id v55 = 0LL;
          id v56 = 0LL;
        }

        else
        {
          id v56 = [v57 objectForKey:@"bag"];
          id v33 = isNSData(v56);
          BOOL v34 = v33 == 0LL;

          if (v34)
          {
            id v48 =  createMobileActivationError( (uint64_t)"copySplunkBaseURLFromStorebag",  613LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Storebag data is missing 'bag' key.");
            id v53 = 0LL;
            id v54 = 0LL;
            id v55 = 0LL;
          }

          else
          {
            id v80 = 0LL;
            id v55 =  +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v56,  0LL,  0LL,  &v80);
            __int128 v35 = v80;

            id v36 = isNSDictionary(v55);
            BOOL v37 = v36 == 0LL;

            if (v37)
            {
              id v48 =  createMobileActivationError( (uint64_t)"copySplunkBaseURLFromStorebag",  622LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v35,  @"Failed to create dictionary from data.");
              id v53 = 0LL;
              id v54 = 0LL;
            }

            else
            {
              id v54 = [v55 objectForKeyedSubscript:@"metrics"];
              id v38 = isNSDictionary(v54);
              BOOL v39 = v38 == 0LL;

              if (v39)
              {
                id v48 =  createMobileActivationError( (uint64_t)"copySplunkBaseURLFromStorebag",  628LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Storebag data is missing 'metrics' key.");
                id v53 = 0LL;
              }

              else
              {
                id v40 = [v54 objectForKey:@"metricsUrl"];
                id v41 = isNSString(v40);
                id v53 = v40;
                LODWORD(v40) = v41 == 0LL;

                if (!(_DWORD)v40)
                {
                  id v42 = v53;
                  if (v42)
                  {
                    id v43 = v42;
                    char v44 = 0;
                    id v53 = v42;
                    id v45 = v58;
LABEL_36:

                    id v24 = v45;
                    if ((v44 & 1) != 0)
                    {
                      MobileActivationError = createMobileActivationError( (uint64_t)"performSplunkPost",  712LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v24,  @"Failed to retrieve Splunk base URL from iTunes storebag.");
                    }

                    else
                    {
                      id v47 =  [v43 stringByAppendingPathComponent:@"2/xp_coreos_mobile_activation"];

                      if (v47)
                      {
                        uint32_t v59 = objc_alloc_init(&OBJC_CLASS___NSMutableURLRequest);

                        if (v59)
                        {
                          -[NSMutableURLRequest setValue:forHTTPHeaderField:]( v59,  "setValue:forHTTPHeaderField:",  @"iOS Device Activator (MobileActivation-1015.60.1)",  @"User-Agent");
                          id v50 =  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"application/json");
                          -[NSMutableURLRequest setValue:forHTTPHeaderField:]( v59,  "setValue:forHTTPHeaderField:",  v50,  @"Content-Type");

                          -[NSMutableURLRequest setHTTPMethod:](v59, "setHTTPMethod:", @"POST");
                          -[NSMutableURLRequest setHTTPBody:](v59, "setHTTPBody:", v22);
                          id v51 = +[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v47);
                          -[NSMutableURLRequest setURL:](v59, "setURL:", v51);

                          id v80 = v24;
                          *(void *)buf = 0LL;
                          id v52 = (NSError *)talkToServerWithError(v59, 0LL, 0, v60, buf, &v79, &v80);
                          id v46 = *(id *)buf;
                          id v16 = v80;

                          id v24 = v29;
                          id v29 = v52;
                          uint64_t v28 = v59;
                        }

                        else
                        {
                          id v16 =  createMobileActivationError( (uint64_t)"performSplunkPost",  726LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate request.");
                          id v46 = 0LL;
                          uint64_t v28 = 0LL;
                        }

                        goto LABEL_44;
                      }

                      MobileActivationError = createMobileActivationError( (uint64_t)"performSplunkPost",  718LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create Splunk URL.");
                    }

                    id v16 = MobileActivationError;
                    id v46 = 0LL;
                    goto LABEL_43;
                  }

                  id v53 = 0LL;
LABEL_35:
                  __int128 v35 = v35;
                  id v43 = 0LL;
                  char v44 = 1;
                  id v45 = v35;
                  goto LABEL_36;
                }

                id v48 =  createMobileActivationError( (uint64_t)"copySplunkBaseURLFromStorebag",  634LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Storebag data is missing 'metricsURL' key.");
              }
            }

            id v30 = v35;
          }
        }

        __int128 v35 = v48;
        goto LABEL_35;
      }

      id v16 =  createMobileActivationError( (uint64_t)"performSplunkPost",  706LL,  @"com.apple.MobileActivation.ErrorDomain",  -6LL,  v58,  @"iTunes storebag request failed.");
      id v29 = 0LL;
      id v46 = 0LL;
      id v47 = 0LL;
      id v24 = v58;
    }

    else
    {
      id v16 =  createMobileActivationError( (uint64_t)"performSplunkPost",  688LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v23,  @"Failed to serialize data: %@",  v23);
      id v29 = 0LL;
      id v46 = 0LL;
      uint64_t v28 = 0LL;
      id v47 = 0LL;
      id v22 = 0LL;
    }

LABEL_44:
    goto LABEL_45;
  }

  id v16 =  createMobileActivationError( (uint64_t)"performSplunkPost",  679LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create post dictionary.");
LABEL_24:
  id v29 = 0LL;
  id v46 = 0LL;
  uint64_t v28 = 0LL;
  id v47 = 0LL;
  id v22 = 0LL;
  id v18 = 0LL;
LABEL_45:
  v63((uint64_t)v10, (int)v29, (int)v46, v79, v16);

  _Block_object_dispose(&v71, 8);
}

void sub_10003C278( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void __splunk_activity_handler_block_invoke_42(uint64_t a1, int a2, int a3, uint64_t a4, id a5)
{
  id v7 = a5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3254779904LL;
  block[2] = __splunk_activity_handler_block_invoke_2_43;
  block[3] = &__block_descriptor_88_e8_32s40s48s56s64r72r_e5_v8__0l;
  uint64_t v20 = a4;
  id v14 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 64);
  id v15 = v8;
  id v16 = v7;
  id v9 = *(id *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 72);
  id v17 = v9;
  uint64_t v19 = v10;
  id v11 = v7;
  dispatch_block_t v12 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, block);
  dispatch_async(*(dispatch_queue_t *)(a1 + 56), v12);
}

void __splunk_activity_handler_block_invoke_2_43(uint64_t a1)
{
  else {
    uint64_t v2 = 6LL;
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if ((unint64_t)(v3 - 200) >= 0x64)
  {
    if ((unint64_t)(v3 - 300) >= 0xC8)
    {
      id v14 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
      -[NSFileManager moveItemAtPath:toPath:error:]( v14,  "moveItemAtPath:toPath:error:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  0LL);

      uint64_t v15 = *(void *)(a1 + 80);
      id v16 = *(void **)(a1 + 48);
      id v17 =  +[NSHTTPURLResponse localizedStringForStatusCode:]( &OBJC_CLASS___NSHTTPURLResponse,  "localizedStringForStatusCode:",  v15);
      uint64_t v18 =  createMobileActivationError( (uint64_t)"splunk_activity_handler_block_invoke_2",  1387LL,  @"com.apple.MobileActivation.ServerErrorDomain",  v15,  v16,  @"Server error: %ld (%@)",  v15,  v17);

      uint64_t v19 = *(void *)(a1 + 80);
      uint64_t v20 =  +[NSHTTPURLResponse localizedStringForStatusCode:]( &OBJC_CLASS___NSHTTPURLResponse,  "localizedStringForStatusCode:",  v19);
      id v21 =  createMobileActivationError( (uint64_t)"splunk_activity_handler_block_invoke_2",  1387LL,  @"com.apple.MobileActivation.ErrorDomain",  -6LL,  v18,  @"Server error: %ld (%@)",  v19,  v20);

      uint64_t v22 = *(void *)(*(void *)(a1 + 64) + 8LL);
      id v23 = *(void **)(v22 + 40);
      *(void *)(v22 + 40) = v21;

      goto LABEL_11;
    }

    uint64_t v4 = *(void **)(a1 + 48);
    uint64_t v5 =  +[NSHTTPURLResponse localizedStringForStatusCode:]( &OBJC_CLASS___NSHTTPURLResponse,  "localizedStringForStatusCode:",  *(void *)(a1 + 80));
    uint64_t v6 =  createMobileActivationError( (uint64_t)"splunk_activity_handler_block_invoke_2",  1392LL,  @"com.apple.MobileActivation.ServerErrorDomain",  v3,  v4,  @"Server error: %ld (%@)",  v3,  v5);

    uint64_t v7 = *(void *)(a1 + 80);
    id v8 =  +[NSHTTPURLResponse localizedStringForStatusCode:]( &OBJC_CLASS___NSHTTPURLResponse,  "localizedStringForStatusCode:",  v7);
    id v9 =  createMobileActivationError( (uint64_t)"splunk_activity_handler_block_invoke_2",  1392LL,  @"com.apple.MobileActivation.ErrorDomain",  -5LL,  v6,  @"Server error: %ld (%@)",  v7,  v8);

    uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8LL);
    id v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    dispatch_block_t v12 = copyLoggingHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT)) {
      __splunk_activity_handler_block_invoke_2_43_cold_1(a1, a1 + 64, v12);
    }
  }

  id v13 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
  -[NSFileManager removeItemAtPath:error:](v13, "removeItemAtPath:error:", *(void *)(a1 + 32), 0LL);

  data_ark_remove(*(void **)(a1 + 56), 0LL, @"SplunkRetryAttempt");
LABEL_11:
  id v24 = copySortedSplunkFileList();
  id v25 = v24;
  if (!v24 || !-[NSMutableArray count](v24, "count")) {
    goto LABEL_24;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL))
  {
    uint64_t v26 = (NSNumber *)data_ark_copy(*(void **)(a1 + 56), 0LL, @"SplunkRetryAttempt");
    id v27 = isNSNumber(v26);

    if (v27)
    {
      uint64_t v28 =  +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  (char *)-[NSNumber longLongValue](v26, "longLongValue") + 1);

      if (-[NSNumber unsignedLongLongValue](v28, "unsignedLongLongValue") <= v2)
      {
LABEL_20:
        data_ark_set(*(void **)(a1 + 56), 0LL, @"SplunkRetryAttempt", v28, 1);
        -[NSNumber doubleValue](v28, "doubleValue");
        unsigned int v29 = (exp2(v30) * 60.0);

        goto LABEL_21;
      }

      uint64_t v26 = v28;
      uint64_t v28 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v2);
    }

    else
    {
      uint64_t v28 = (NSNumber *)&off_10026D5A8;
    }

    goto LABEL_20;
  }

  unsigned int v29 = 5;
LABEL_21:
  id v31 = copyLoggingHandle();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    unsigned int v36 = v29;
    _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Rescheduling splunk logging for %d seconds.",  buf,  8u);
  }

  scheduleXPCActivity( *(void **)(a1 + 56),  (const char *)[@"com.apple.mobileactivationd.splunklogging" UTF8String],  v29,  1,  0x400u,  0x400u,  &__block_literal_global_49);
LABEL_24:
  BOOL v32 = copyLoggingHandle();
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Successfully performed splunk logging.",  buf,  2u);
  }

  uint64_t v33 = *(void *)(*(void *)(a1 + 72) + 8LL);
  BOOL v34 = *(void **)(v33 + 40);
  *(void *)(v33 + 40) = 0LL;
}

void __splunk_activity_handler_block_invoke_48(id a1, DataArk *a2)
{
}

void __copy_helper_block_e8_32s40s48s56s64r72r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  id v6 = *(id *)(a2 + 48);
  id v7 = *(id *)(a2 + 56);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 8);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 8);
}

void __copy_helper_block_e8_32s40s48s56s64s72r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  id v6 = *(id *)(a2 + 48);
  id v7 = *(id *)(a2 + 56);
  id v8 = *(id *)(a2 + 64);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64s72r(uint64_t a1)
{
}

void splunk_daily_stats_activity_handler(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = (dispatch_queue_s *)copySplunkQueue();
    if (v2)
    {
      uint64_t v3 = v2;
      block[0] = _NSConcreteStackBlock;
      block[1] = 3254779904LL;
      block[2] = __splunk_daily_stats_activity_handler_block_invoke;
      block[3] = &__block_descriptor_40_e8_32s_e5_v8__0l;
      id v6 = v1;
      dispatch_block_t v4 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, block);

      dispatch_async(v3, v4);
    }

    else
    {
      dispatch_block_t v4 = copyLoggingHandle();
      if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_FAULT)) {
        copySplunkDeviceIdentifiers_cold_1();
      }
    }
  }

  else
  {
    dispatch_block_t v4 = copyLoggingHandle();
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v4, OS_LOG_TYPE_DEFAULT, "Invalid input.", buf, 2u);
    }
  }
}

void __splunk_daily_stats_activity_handler_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v8 = 0LL;
  uint64_t v3 = copySplunkDailyStatistics(v2, (NSError **)&v8);
  id v5 = v8;
  if (!v3)
  {
    id v6 = copyLoggingHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)) {
      __splunk_daily_stats_activity_handler_block_invoke_cold_1();
    }
  }

  writeSplunkLog( *(void **)(a1 + 32),  25LL,  -1LL,  (uint64_t)"splunk_daily_stats_activity_handler_block_invoke",  1474,  v3,  0LL,  v4,  v7);
}

void splunk_roll_uuid_activity_handler(void *a1)
{
  id v1 = a1;
  uint64_t v11 = 0LL;
  dispatch_block_t v12 = &v11;
  uint64_t v13 = 0x3032000000LL;
  id v14 = __Block_byref_object_copy__5;
  uint64_t v15 = __Block_byref_object_dispose__5;
  id v16 = 0LL;
  if (v1)
  {
    uint64_t v2 = (dispatch_queue_s *)copySplunkQueue();
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = os_transaction_create([@"com.apple.mobileactivationd.splunklogging.rollidentifier" UTF8String]);
      id v5 = (void *)v12[5];
      v12[5] = v4;

      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3254779904LL;
      v7[2] = __splunk_roll_uuid_activity_handler_block_invoke;
      v7[3] = &__block_descriptor_48_e8_32s40r_e5_v8__0l;
      id v8 = v1;
      id v9 = &v11;
      dispatch_block_t v6 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, v7);

      dispatch_async(v3, v6);
    }

    else
    {
      dispatch_block_t v6 = copyLoggingHandle();
      if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_FAULT)) {
        copySplunkDeviceIdentifiers_cold_1();
      }
    }
  }

  else
  {
    dispatch_block_t v6 = copyLoggingHandle();
    if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v6, OS_LOG_TYPE_DEFAULT, "Invalid input.", buf, 2u);
    }
  }

  _Block_object_dispose(&v11, 8);
}

void sub_10003CD98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void __splunk_roll_uuid_activity_handler_block_invoke(uint64_t a1)
{
  uint64_t v2 = copyLoggingHandle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Successfully rolled splunk logging UUID.",  v5,  2u);
  }

  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0LL;
}

void rollSplunkLogUUID(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (dispatch_queue_s *)copySplunkUUIDQueue();
  if (v2)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3254779904LL;
    block[2] = __rollSplunkLogUUID_block_invoke;
    block[3] = &__block_descriptor_40_e8_32s_e5_v8__0l;
    id v5 = v1;
    dispatch_async(v2, block);
    uint64_t v3 = (os_log_s *)v5;
  }

  else
  {
    uint64_t v3 = copyLoggingHandle();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT)) {
      copySplunkDeviceIdentifiers_cold_1();
    }
  }
}

id copySplunkUUIDQueue()
{
  if (copySplunkUUIDQueue_onceToken != -1) {
    dispatch_once(&copySplunkUUIDQueue_onceToken, &__block_literal_global_148);
  }
  return (id)copySplunkUUIDQueue_splunkQueue;
}

void __rollSplunkLogUUID_block_invoke(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = +[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID");
  uint64_t v3 = -[NSUUID UUIDString](v2, "UUIDString");
  data_ark_set(v1, 0LL, @"uuidString", v3, 1);
}

void __copySplunkLogUUID_block_invoke(uint64_t a1)
{
  if (!data_ark_exists(*(void **)(a1 + 32), 0LL, @"uuidString"))
  {
    uint64_t v2 = *(void **)(a1 + 32);
    uint64_t v3 = +[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID");
    uint64_t v4 = -[NSUUID UUIDString](v3, "UUIDString");
    data_ark_set(v2, 0LL, @"uuidString", v4, 1);
  }

  id v5 = data_ark_copy(*(void **)(a1 + 32), 0LL, @"uuidString");
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void __copySplunkQueue_block_invoke(id a1)
{
  id v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.mobileactivationd.splunk", v1);
  uint64_t v3 = (void *)copySplunkQueue_splunkQueue;
  copySplunkQueue_splunkQueue = (uint64_t)v2;
}

void __copySplunkUUIDQueue_block_invoke(id a1)
{
  id v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.mobileactivationd.splunk.uuid", v1);
  uint64_t v3 = (void *)copySplunkUUIDQueue_splunkQueue;
  copySplunkUUIDQueue_splunkQueue = (uint64_t)v2;
}

void OUTLINED_FUNCTION_0_1( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void OUTLINED_FUNCTION_3_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

  ;
}

NSData *copyRootCertificate(uint64_t a1, int a2, NSError **a3)
{
  switch((int)a1)
  {
    case 1:
      BOOL v4 = a2 == 0;
      if (a2) {
        id v5 = "-----BEGIN CERTIFICATE-----\n"
      }
             "MIICGDCCAZ+gAwIBAgIIMyDS5tjDo60wCgYIKoZIzj0EAwMwUjEmMCQGA1UEAwwd\n"
             "VEVTVCBVQ1JUIEFUVEVTVEFUSU9OIFJPT1QgQ0ExEzARBgNVBAoMCkFwcGxlIElu\n"
             "Yy4xEzARBgNVBAgMCkNhbGlmb3JuaWEwHhcNMTcwMzE3MTg0NzIzWhcNMzIwMzE3\n"
             "MTg0NzIzWjBSMSYwJAYDVQQDDB1URVNUIFVDUlQgQVRURVNUQVRJT04gUk9PVCBD\n"
             "QTETMBEGA1UECgwKQXBwbGUgSW5jLjETMBEGA1UECAwKQ2FsaWZvcm5pYTB2MBAG\n"
             "ByqGSM49AgEGBSuBBAAiA2IABK8j8XvaJOsMr8X6albKQ1LFlMi3k+b8Jooja8Qs\n"
             "0lsrRmax8FItjsoWcxj3c1sPjPF59FI2sCb+9cUZ8KgTeJ3b5748pO1XRGByMNHp\n"
             "tmIuLYRvqRHhkWl638PWGRUoYKNCMEAwHQYDVR0OBBYEFGnDBpAIQSifJVW2RWKm\n"
             "f6jT3iIXMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMAoGCCqGSM49\n"
             "BAMDA2cAMGQCMBFwSHXop87Ghm50PPMGFHtpB/o3K2Gx5747Q0mlR2qE0DsmrJSu\n"
             "2LO+9QEQL5HZRwIwBMg0g5oYcfMMDWwFSRESii+SqHxFgbmVuzHR5Cu0peL1MiMB\n"
             "nMjKoG3YyhB4geQ9\n"
             "-----END CERTIFICATE-----";
      else {
        id v5 = "-----BEGIN CERTIFICATE-----\n"
      }
             "MIICGjCCAaGgAwIBAgIIO0EdkA1/e+swCgYIKoZIzj0EAwMwUzEnMCUGA1UEAwwe\n"
             "QmFzaWMgQXR0ZXN0YXRpb24gVXNlciBSb290IENBMRMwEQYDVQQKDApBcHBsZSBJ\n"
             "bmMuMRMwEQYDVQQIDApDYWxpZm9ybmlhMB4XDTE3MDQxOTIxNDE1NloXDTMyMDMy\n"
             "MjAwMDAwMFowUzEnMCUGA1UEAwweQmFzaWMgQXR0ZXN0YXRpb24gVXNlciBSb290\n"
             "IENBMRMwEQYDVQQKDApBcHBsZSBJbmMuMRMwEQYDVQQIDApDYWxpZm9ybmlhMHYw\n"
             "EAYHKoZIzj0CAQYFK4EEACIDYgAE639EEPCGvFOPAbzd5eGJM46/I+N1rpRhPBc2\n"
             "+hvNC5vlVyv1hVNPSTIcF0sLPgCeEEQqGIZsUPO48ECh03YzXUT86015HwktM439\n"
             "bWGKGE/VRepW8S8EDRLh6+83XZ9do0IwQDAPBgNVHRMBAf8EBTADAQH/MB0GA1Ud\n"
             "DgQWBBSD5aMhnrB0w/lhkP2XTiMQdqSj8jAOBgNVHQ8BAf8EBAMCAQYwCgYIKoZI\n"
             "zj0EAwMDZwAwZAIwQol5uLqv1SXY9G1wHSx2EYIULFlLssYTnTwbSlZPj2yF9cgk\n"
             "7xJO8bw6nTklgnHhAjBgMvsir7UEVzw7uxn8y3GGf9KSCFV5scySrYDZnJhETYlc\n"
             "yPYSFsZIerKNPP6v28Y=\n"
             "-----END CERTIFICATE-----";
      uint64_t v6 = (unsigned int *)&QABAAUCRTRootCAPEMLen;
      uint64_t v7 = (unsigned int *)&BAAUCRTRootCAPEMLen;
      goto LABEL_48;
    case 2:
      BOOL v4 = a2 == 0;
      if (a2) {
        id v5 = "-----BEGIN CERTIFICATE-----\n"
      }
             "MIIB/zCCAYWgAwIBAgIIMyDS5tjDo6wwCgYIKoZIzj0EAwMwRTEZMBcGA1UEAwwQ\n"
             "VEVTVCBTRVAgUk9PVCBDQTETMBEGA1UECgwKQXBwbGUgSW5jLjETMBEGA1UECAwK\n"
             "Q2FsaWZvcm5pYTAeFw0xNzAzMTcxNzQ4MzBaFw0zMjAzMTcxNzQ4MzBaMEUxGTAX\n"
             "BgNVBAMMEFRFU1QgU0VQIFJPT1QgQ0ExEzARBgNVBAoMCkFwcGxlIEluYy4xEzAR\n"
             "BgNVBAgMCkNhbGlmb3JuaWEwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAARPM4laW0B+\n"
             "fOrILxB1SgluOqUops+ps7POnbPvuhEZq3A+/zMJpvuA9r81okf3hb2irmpUAuvd\n"
             "pbjz1pDf73/8VC/uMSJsWXEc39kpm2j6DwBOIxJ++OwnhEU7pf0gCQ6jQjBAMB0G\n"
             "A1UdDgQWBBRWyfg8mg8Ak5e1SZm7V0WL85j2NDAPBgNVHRMBAf8EBTADAQH/MA4G\n"
             "A1UdDwEB/wQEAwIBBjAKBggqhkjOPQQDAwNoADBlAjEAiOkQ9WnIfqiQXIKRjOhu\n"
             "eWd+RPxKGQt1XmVQZGiNDwIu6SVQ0UVDGZg4ywsotyLNAjAOQgMucccaDYgsmELm\n"
             "YpYzgzyReDQx/ajwQdc97/unxkOWYP/5TPptimsc9E0u9bU=\n"
             "-----END CERTIFICATE-----";
      else {
        id v5 = "-----BEGIN CERTIFICATE-----\n"
      }
             "MIICIDCCAaWgAwIBAgIIePhG1bNbWBcwCgYIKoZIzj0EAwMwVTEpMCcGA1UEAwwg\n"
             "QmFzaWMgQXR0ZXN0YXRpb24gU3lzdGVtIFJvb3QgQ0ExEzARBgNVBAoMCkFwcGxl\n"
             "IEluYy4xEzARBgNVBAgMCkNhbGlmb3JuaWEwHhcNMTcwNDIwMDAyMjA5WhcNMzIw\n"
             "MzIyMDAwMDAwWjBVMSkwJwYDVQQDDCBCYXNpYyBBdHRlc3RhdGlvbiBTeXN0ZW0g\n"
             "Um9vdCBDQTETMBEGA1UECgwKQXBwbGUgSW5jLjETMBEGA1UECAwKQ2FsaWZvcm5p\n"
             "YTB2MBAGByqGSM49AgEGBSuBBAAiA2IABN7OnRlUVkOVlHTw7UF9qForIhvM8pLL\n"
             "WTrHm6Be42c3LZFIM2RNT5FZZDkIgQfYLS6vsRpfrhEMKIHIWomtyuCxp2c/AIxu\n"
             "wEml4f2d8IktTRcNHwqKzUgzPJV3CyKh2KNCMEAwDwYDVR0TAQH/BAUwAwEB/zAd\n"
             "BgNVHQ4EFgQU/tHRwggHA9W5PDSyu/18OpklG48wDgYDVR0PAQH/BAQDAgEGMAoG\n"
             "CCqGSM49BAMDA2kAMGYCMQCmU03bvMmBE4X03P8MdpxEE/LpNcRmsnktIav8tpNh\n"
             "Gmo4mv2FyZKKvaJtO2OhIrwCMQDxMBcXge5NpWx/VBcFTj2Tb2VxQ8zMKbWapLE/\n"
             "HPN4kbBaiIIUl52drBlQjS/c3P8=\n"
             "-----END CERTIFICATE-----\n";
      uint64_t v6 = (unsigned int *)&QABAASCRTRootCAPEMLen;
      uint64_t v7 = (unsigned int *)&BAASCRTRootCAPEMLen;
      goto LABEL_48;
    case 3:
      BOOL v4 = a2 == 0;
      if (a2) {
        id v5 = "-----BEGIN CERTIFICATE-----\n"
      }
             "MIICGDCCAZ+gAwIBAgIIMyDS5tjDo60wCgYIKoZIzj0EAwMwUjEmMCQGA1UEAwwd\n"
             "VEVTVCBVQ1JUIEFUVEVTVEFUSU9OIFJPT1QgQ0ExEzARBgNVBAoMCkFwcGxlIElu\n"
             "Yy4xEzARBgNVBAgMCkNhbGlmb3JuaWEwHhcNMTcwMzE3MTg0NzIzWhcNMzIwMzE3\n"
             "MTg0NzIzWjBSMSYwJAYDVQQDDB1URVNUIFVDUlQgQVRURVNUQVRJT04gUk9PVCBD\n"
             "QTETMBEGA1UECgwKQXBwbGUgSW5jLjETMBEGA1UECAwKQ2FsaWZvcm5pYTB2MBAG\n"
             "ByqGSM49AgEGBSuBBAAiA2IABK8j8XvaJOsMr8X6albKQ1LFlMi3k+b8Jooja8Qs\n"
             "0lsrRmax8FItjsoWcxj3c1sPjPF59FI2sCb+9cUZ8KgTeJ3b5748pO1XRGByMNHp\n"
             "tmIuLYRvqRHhkWl638PWGRUoYKNCMEAwHQYDVR0OBBYEFGnDBpAIQSifJVW2RWKm\n"
             "f6jT3iIXMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMAoGCCqGSM49\n"
             "BAMDA2cAMGQCMBFwSHXop87Ghm50PPMGFHtpB/o3K2Gx5747Q0mlR2qE0DsmrJSu\n"
             "2LO+9QEQL5HZRwIwBMg0g5oYcfMMDWwFSRESii+SqHxFgbmVuzHR5Cu0peL1MiMB\n"
             "nMjKoG3YyhB4geQ9\n"
             "-----END CERTIFICATE-----";
      else {
        id v5 = "-----BEGIN CERTIFICATE-----\n"
      }
             "MIIB9DCCAZqgAwIBAgIUfK8gpf3d6f7acICzvf5MBWnAVEYwCgYIKoZIzj0EAwIw\n"
             "VzErMCkGA1UEAwwiQXBwbGUgQWNjZXNzb3J5IFJvb3QgQ0EgLSAwMDAwMDAwMTET\n"
             "MBEGA1UECgwKQXBwbGUgSW5jLjETMBEGA1UECAwKQ2FsaWZvcm5pYTAgFw0yMDA5\n"
             "MTYxODI5MzRaGA8yMDUwMDkxNDAwMDAwMFowVzErMCkGA1UEAwwiQXBwbGUgQWNj\n"
             "ZXNzb3J5IFJvb3QgQ0EgLSAwMDAwMDAwMTETMBEGA1UECgwKQXBwbGUgSW5jLjET\n"
             "MBEGA1UECAwKQ2FsaWZvcm5pYTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABMGo\n"
             "QSB6dmrLAhjkTUVAoAC1RwaOmEmEk7SYEnnm6aBw9HZZQt5pkncuTXxvL6NDvx4D\n"
             "8Wn3frxp+UOTgEalb0ajQjBAMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFAZD\n"
             "Zup+SdTmXls49aokHuK+fHKjMA4GA1UdDwEB/wQEAwIBBjAKBggqhkjOPQQDAgNI\n"
             "ADBFAiEA4HcCYv5+W+1/HOy1v1cYVozNEW4+2WvR84Japg8rabkCIDP9zynWiR60\n"
             "O06J60wrt0rQfBOPnoeY1+ydbP2g8Tiy\n"
             "-----END CERTIFICATE-----";
      uint64_t v6 = (unsigned int *)&QABAAMFiRootCAPEMLen;
      uint64_t v7 = (unsigned int *)&BAAMFiRootCAPEMLen;
      goto LABEL_48;
    case 4:
      BOOL v4 = a2 == 0;
      if (a2) {
        id v5 = "-----BEGIN CERTIFICATE-----\n"
      }
             "MIIBgzCCASkCFDjx/NbFt/axSboRZlQvaFKmOM9cMAoGCCqGSM49BAMCMEQxGDAW\n"
             "BgNVBAMMD1JPT1QgVk1Ib3N0IERFVjETMBEGA1UECgwKQXBwbGUgSW5jLjETMBEG\n"
             "A1UECAwKQ2FsaWZvcm5pYTAeFw0yMjEyMjAyMjQ5MjNaFw0zMjEyMTcyMjQ5MjNa\n"
             "MEQxGDAWBgNVBAMMD1JPT1QgVk1Ib3N0IERFVjETMBEGA1UECgwKQXBwbGUgSW5j\n"
             "LjETMBEGA1UECAwKQ2FsaWZvcm5pYTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IA\n"
             "BFEzB9BX594q7qqyNgDRIB2qQm6uhylOPgS3zX6kVNpCe+IGeuYGVKu+n0oVoUEq\n"
             "ah/zwVwo9xZPJycEbHBhGlAwCgYIKoZIzj0EAwIDSAAwRQIhAJxxz1ciDUVxdnIz\n"
             "34ondjHZD90U6Pzvu9abpIU1TsJxAiAKxVubHXInckv6HidbV1J2RghMPdxOyKnw\n"
             "ZR6YEAfSMQ==\n"
             "-----END CERTIFICATE-----";
      else {
        id v5 = "-----BEGIN CERTIFICATE-----\n"
      }
             "MIICLDCCAbOgAwIBAgIUfj+NzqI5TD5k+plnCuu7oXn/1NYwCgYIKoZIzj0EAwMw\n"
             "VjEqMCgGA1UEAwwhQmFzaWMgQXR0ZXN0YXRpb24gVk0gUm9vdCBDQSAtIEcxMRMw\n"
             "EQYDVQQKDApBcHBsZSBJbmMuMRMwEQYDVQQIDApDYWxpZm9ybmlhMB4XDTIyMTEx\n"
             "NzE5MjQ0NloXDTQ3MTExNzAwMDAwMFowVjEqMCgGA1UEAwwhQmFzaWMgQXR0ZXN0\n"
             "YXRpb24gVk0gUm9vdCBDQSAtIEcxMRMwEQYDVQQKDApBcHBsZSBJbmMuMRMwEQYD\n"
             "VQQIDApDYWxpZm9ybmlhMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEh+bXFjhVZxpY\n"
             "SW1tUJhQc7Mesr7Ua/2EIJDhZnq1eUV666b7j8V1apF7zQdcVc1GHqBMRfeagBk0\n"
             "ktB5PgRQ4hFX3OAbfjSVnmuPVuHznBbS/1f/ABuTlJJjO592E9JVo0IwQDAPBgNV\n"
             "HRMBAf8EBTADAQH/MB0GA1UdDgQWBBTHKW8b5x+bDXk9PC/lPsufj3wUEzAOBgNV\n"
             "HQ8BAf8EBAMCAQYwCgYIKoZIzj0EAwMDZwAwZAIwXsNPIuolYDriFDkULrsZy81O\n"
             "yAk4v7Y4f1p86Ox2J7g4xdGIwAyLw/JNRKGoHGpVAjBk20GA6ZvKKoO+HvE9v2xu\n"
             "wiVPsqk37xSmgK+RHJDMMy+hrhJVsCsBzeYpI9Cz4sI=\n"
             "-----END CERTIFICATE-----";
      uint64_t v6 = (unsigned int *)&QABAAVMRootCAPEMLen;
      uint64_t v7 = (unsigned int *)&BAAVMRootCAPEMLen;
      goto LABEL_48;
    case 5:
      BOOL v4 = a2 == 0;
      if (a2) {
        id v5 = "-----BEGIN CERTIFICATE-----\n"
      }
             "MIIB9jCCAXwCFGyFzDAIXLHwUcHOxFEzhqQrOQOPMAoGCCqGSM49BAMDMF8xMzAx\n"
             "BgNVBAMMKkJhc2ljIEF0dGVzdGF0aW9uIFNFUCBBcHAgRGV2IFJvb3QgQ0EgLSBH\n"
             "MTETMBEGA1UECgwKQXBwbGUgSW5jLjETMBEGA1UECAwKQ2FsaWZvcm5pYTAeFw0y\n"
             "MzAxMTkyMTEzNTFaFw0zMzAxMTYyMTEzNTFaMF8xMzAxBgNVBAMMKkJhc2ljIEF0\n"
             "dGVzdGF0aW9uIFNFUCBBcHAgRGV2IFJvb3QgQ0EgLSBHMTETMBEGA1UECgwKQXBw\n"
             "bGUgSW5jLjETMBEGA1UECAwKQ2FsaWZvcm5pYTB2MBAGByqGSM49AgEGBSuBBAAi\n"
             "A2IABOnVQFqNs86j5R5dAcjUlpotBUkO2q3+udEnqwkzzcrptPz6FIp5GQagMCQk\n"
             "wDgzXTe3jUqDkGxMNUjLt6DkzbwX7SrHhvIf9RlTXmlgrCUUrR21089VP+FZu8sD\n"
             "38l7PTAKBggqhkjOPQQDAwNoADBlAjEA7qwslEakgN0e+27DzPtrOqbud2pXVdRP\n"
             "qGFmLcklmZWHF1UIn6JlD1TNLVHQlCr3AjBkSmV+m5D/pJVRvg4ewQq+9oeyuYg8\n"
             "JHQGGaubDFMjZXhJ3NXrLHmIWDRQW2lgChA=\n"
             "-----END CERTIFICATE-----";
      else {
        id v5 = "-----BEGIN CERTIFICATE-----\n"
      }
             "MIICODCCAb2gAwIBAgIUW5y5rEfNQCu9iSCmlQjrP1Rz/tAwCgYIKoZIzj0EAwMw\n"
             "WzEvMC0GA1UEAwwmQmFzaWMgQXR0ZXN0YXRpb24gU0VQIEFwcCBSb290IENBIC0g\n"
             "RzExEzARBgNVBAoMCkFwcGxlIEluYy4xEzARBgNVBAgMCkNhbGlmb3JuaWEwHhcN\n"
             "MjIwOTEyMTc1OTM0WhcNNDcwOTEyMDAwMDAwWjBbMS8wLQYDVQQDDCZCYXNpYyBB\n"
             "dHRlc3RhdGlvbiBTRVAgQXBwIFJvb3QgQ0EgLSBHMTETMBEGA1UECgwKQXBwbGUg\n"
             "SW5jLjETMBEGA1UECAwKQ2FsaWZvcm5pYTB2MBAGByqGSM49AgEGBSuBBAAiA2IA\n"
             "BAXaHBhlPwzGbPrirq+GvLIVTB4ym+88OQOB2Aq3ZuWIDz2DV9EWt7/3tpHL276X\n"
             "WE4ObPymHzrbl5aNpIzjm9W0tgiZRWw8l3YEuoz56dh3sZqVdDxszB3CQw1KX+62\n"
             "YaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUywowhXlxUMVVx846sCHP\n"
             "XQIrUR4wDgYDVR0PAQH/BAQDAgEGMAoGCCqGSM49BAMDA2kAMGYCMQC/AZhw1x8+\n"
             "XBPQw3lTl2A4SxY5UvCMjyseU9uUD0qgFDYlvUzH0qi8KB5BZled0cYCMQClhMgI\n"
             "rl3Txh1EJBb5yoWhvs8Gy+qkov9/SIDIEGpmZ7OUngbjN5zheCyJio90Xig=\n"
             "-----END CERTIFICATE-----";
      uint64_t v6 = (unsigned int *)&QABAAASMFiOSRootCAPEMLen;
      uint64_t v7 = (unsigned int *)&BAAASMFiOSRootCAPEMLen;
      goto LABEL_48;
    case 6:
      unsigned int v9 = *(_DWORD *)"&\b";
      id v5 = "-----BEGIN CERTIFICATE-----\n"
           "MIIF2DCCA8CgAwIBAgIBADANBgkqhkiG9w0BAQsFADB9MQswCQYDVQQGEwJVUzET\n"
           "MBEGA1UEChMKQXBwbGUgSW5jLjFZMFcGA1UEAxNQRkRSLUNBMS1ST09ULUNNIDg2\n"
           "QkQ1QkFFQ0JBNEQ5RUM0QzdBOUJGRUZEM0I3QTE0Mzc5QTE1RTVGQjM2MDNCQ0U2\n"
           "OTA1MDczRUMwNjBBM0YwHhcNMTQwNjExMjEwODM5WhcNNDQwNjExMjEwODM5WjB9\n"
           "MQswCQYDVQQGEwJVUzETMBEGA1UEChMKQXBwbGUgSW5jLjFZMFcGA1UEAxNQRkRS\n"
           "LUNBMS1ST09ULUNNIDg2QkQ1QkFFQ0JBNEQ5RUM0QzdBOUJGRUZEM0I3QTE0Mzc5\n"
           "QTE1RTVGQjM2MDNCQ0U2OTA1MDczRUMwNjBBM0YwggIiMA0GCSqGSIb3DQEBAQUA\n"
           "A4ICDwAwggIKAoICAQDRSE8a8Xl+OFgz07qfQf610WJgBhQUMqYqLME8yNW6HRAo\n"
           "ZmRJCZhKzJCW7W77utpo/QZqCs/Tmc8yAuyw06MlLdb/EaFbIJhnd8KvhNO2aBn1\n"
           "0zTF3BrKu/iBj4Cb31nzd+P3BAyIIhnNfqnJ1YDGrXDHApFKs96bRNYfFj/cm55e\n"
           "+5ZaVAE4pGq3I45pO1HMEObvysFnbEw4R5EZ8BsyNaSe+EEprYZQqjfGciVZn+WD\n"
           "nP0g1TONgE8yAplaud+0QQIcLxE82toZqnAEErojrXbb9KYiW6OH+w8p8ITKrA0a\n"
           "byud5ZwU8x2dwJngg2P53vzdaEPgl+oEWm5uTtOBS5kGh9N0Ky3N094qn6Y9OmLD\n"
           "eXsYXGE3Q91AZ6Ps+0cmZYAMvnlTMh6h6TRgIG6kUi/7fIn6umQHgavSMP+XWNET\n"
           "CzbwE7YZnTnhMlW3Oaey40bKDgxZAgVAVKt+qf/B9Exb074GqicYr5RH3MmYYqVo\n"
           "bHZTPkeKykUxUJoNm/jRoyXQnStl0uBclShH3ORMOHL6MeQMSGIEIVbD6AJz3rIX\n"
           "7nidx3ePUeA7QVV/vhL09DU4Q5KKQsbgl4qSGzxA87ClUGworLaWa+AUE+MP5NLJ\n"
           "tSlsY4+Fl3VLq51AJA2oeOwF6KCTRTZWG56anqaSrEU0UKsWgQ6ys+9153eGTwID\n"
           "AQABo2MwYTAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4E\n"
           "FgQUESXWmKVwOl5LaoSB35L33xPje14wHwYDVR0jBBgwFoAUESXWmKVwOl5LaoSB\n"
           "35L33xPje14wDQYJKoZIhvcNAQELBQADggIBAJcISq7FqhBfFRpgEAiedVPPzff5\n"
           "rU2uNQLpApMb3A6jFSostHTwypA//pc0PbTPTi5t2CcF14Gznqt4Gf1Ej75C+fgK\n"
           "QoWjcgYPCXkK+6KkTW8EMLsL+n8ZL1tqdOuJCOBTRBTU3Lbwon5uYF98CdBlPIam\n"
           "ZqDEbEiwrp/I5uBMkut1P2sftxu5ysu3+A1bGMDI5T84sXbG0eJU6zmx1p/WUHAc\n"
           "HZy9/S7Ad5vJRMQrWx4JDdLvJ+1PXqdJtZUkp4TNPchxA9OzGsatVJJ5T/5EVDuL\n"
           "QgLaZNiWeAC19+clUREnS247RjLNIZZq0hj2Rk5zO6sSyt8vM+kJZrTVdGaSk++l\n"
           "OFWzSdo0Ev/izPkuL/cH146YZS1UWZJI61mdvbvvxqqQaoTmviuMDqDoCZ7crLu3\n"
           "LRoS6/+w+xir5s6hmAF8D6FzAkVmeAroyd6Hclk6CnhlcQP5GxjTQjA2YGe/9X54\n"
           "30qL4fjiDwdLYqxyL5J28/yxt068aoVaukoRAgiGoZouyieTV9DabenxYBOygijS\n"
           "4G4RVf4qVnQ7wGkQokhz4WIkMr4C4ydWU3GhSuM3T9Tx9ASscch/oLMczDMLKYMe\n"
           "3sdtc60+gxrctSq/B3E/5nddDj9vQ7BdRWcvJ+n/ESsXgwk5z15YZUwU/qW0j5rD\n"
           "4bPy9nox5DLds+/l\n"
           "-----END CERTIFICATE-----";
      goto LABEL_52;
    case 7:
      BOOL v4 = a2 == 0;
      if (a2) {
        id v5 = "-----BEGIN CERTIFICATE-----\n"
      }
             "MIIBtDCCAVqgAwIBAgIBJzAKBggqhkjOPQQDAjBIMRwwGgYDVQQDDBNTRVAgUm9v\n"
             "dCBDQSAoTG9jYWwpMRMwEQYDVQQKDApBcHBsZSBJbmMuMRMwEQYDVQQIDApDYWxp\n"
             "Zm9ybmlhMB4XDTE2MDQyMjIyMTgzOVoXDTI2MDQyMDIyMTgzOVowSDEcMBoGA1UE\n"
             "AwwTU0VQIFJvb3QgQ0EgKExvY2FsKTETMBEGA1UECgwKQXBwbGUgSW5jLjETMBEG\n"
             "A1UECAwKQ2FsaWZvcm5pYTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABLbmMPmv\n"
             "ubyAcSjOqIvq+HkYPAn68WV+DopU/kfpNtEo0y0kjdxYGyuiaKC3LPqBmgM8pHlJ\n"
             "pP81SMyx900L5YyjNTAzMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0PBAQDAgEGMBMG\n"
             "CSqGSIb3Y2QGLAQGFgR1Y3J0MAoGCCqGSM49BAMCA0gAMEUCIQCz/HH34JCprRWh\n"
             "srjvjvb0vUjLY22yA/3uJS0zZ2LRGgIgahGt0ZuEvMzPDnG9n8wRXEOB46xu7zDy\n"
             "rXK+zQjBPMY=\n"
             "-----END CERTIFICATE-----";
      else {
        id v5 = "-----BEGIN CERTIFICATE-----\n"
      }
             "MIIB9DCCAXugAwIBAgIIMyDS5tjDo6wwCgYIKoZIzj0EAwMwQDEUMBIGA1UEAwwL\n"
             "U0VQIFJvb3QgQ0ExEzARBgNVBAoMCkFwcGxlIEluYy4xEzARBgNVBAgMCkNhbGlm\n"
             "b3JuaWEwHhcNMTQwNjI0MjE0MzI0WhcNMjkwNjI0MjE0MzI0WjBAMRQwEgYDVQQD\n"
             "DAtTRVAgUm9vdCBDQTETMBEGA1UECgwKQXBwbGUgSW5jLjETMBEGA1UECAwKQ2Fs\n"
             "aWZvcm5pYTB2MBAGByqGSM49AgEGBSuBBAAiA2IABEBGXhKwc7q3iFvkUoGDP6j2\n"
             "drpxSCxsSCODaDQIqGwd53wZJ0xIJIv0RTf2TS7+/u4KzhrANzb19r+TQzwqFJMp\n"
             "hp3mI3yY4pukIFc/kWS7DLQAx/ftWBXX6vl4ig3wEqNCMEAwHQYDVR0OBBYEFFjv\n"
             "1r7FgrBUzRimhK2i9nt7On/PMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQD\n"
             "AgEGMAoGCCqGSM49BAMDA2cAMGQCMCWRVB9DxwYdXsJ8KVZwbU5y0rfNEWJwpH5B\n"
             "bH3HoiOT/k7TIzlcXWiWAZVVBsDf/gIwC5wq3OepHwBMMCa3Q4ZvpT4Qs0dmc4oa\n"
             "GYxqUZYACJiGD7vRVavVMFnf0s4xG0JG\n"
             "-----END CERTIFICATE-----";
      uint64_t v6 = (unsigned int *)&QAUCRTRootCAPEMLen;
      goto LABEL_33;
    case 8:
      BOOL v4 = a2 == 0;
      if (a2) {
        id v5 = "-----BEGIN CERTIFICATE-----\n"
      }
             "MIICXjCCAeWgAwIBAgIJAO5ey/a/ZXo9MAoGCCqGSM49BAMDMGQxNzA1BgNVBAMT\n"
             "LmltZzQgdGVzdCBzZWNwMzg0cjEgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkx\n"
             "FDASBgNVBAoTC0FwcGxlLCBJbmMuMRMwEQYDVQQIEwpDYWxpZm9ybmlhMB4XDTE1\n"
             "MDgyNzA0MTk1MloXDTI1MDgyNDA0MTk1MlowZDE3MDUGA1UEAxMuaW1nNCB0ZXN0\n"
             "IHNlY3AzODRyMSBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eTEUMBIGA1UEChML\n"
             "QXBwbGUsIEluYy4xEzARBgNVBAgTCkNhbGlmb3JuaWEwdjAQBgcqhkjOPQIBBgUr\n"
             "gQQAIgNiAARmiQLNit/MHLEymNygtXRdYvZ2V9ujKbG78XPHs815eRetxfbAe0SU\n"
             "3LOKQ0xvpm77RUDARHdFyNzRSkKxTY2iBUGOapBwlwzfZlUmJU4JRXE9ATRwYNco\n"
             "KfVcrL0BFnejYzBhMB0GA1UdDgQWBBTFrjb8IhN7kz3HMYTxcqKeXtGm5DAPBgNV\n"
             "HRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFMWuNvwiE3uTPccxhPFyop5e0abkMA4G\n"
             "A1UdDwEB/wQEAwIBhjAKBggqhkjOPQQDAwNnADBkAjB5ryjJQJlO6BD0fqejchDc\n"
             "HB9su7+GoJMD5Kv9hoDeDlCTYoxE1fUp/36BAM3Ph/4CMB+QED5D9Nf7Fas99Xst\n"
             "xQ+EdLq74wvw/0YFQlsLVUH3UAnFE1uWnmwHkDZYF1EkcA==\n"
             "-----END CERTIFICATE-----";
      else {
        id v5 = "-----BEGIN CERTIFICATE-----\n"
      }
             "MIIB9DCCAXugAwIBAgIIMyDS5tjDo6wwCgYIKoZIzj0EAwMwQDEUMBIGA1UEAwwL\n"
             "U0VQIFJvb3QgQ0ExEzARBgNVBAoMCkFwcGxlIEluYy4xEzARBgNVBAgMCkNhbGlm\n"
             "b3JuaWEwHhcNMTQwNjI0MjE0MzI0WhcNMjkwNjI0MjE0MzI0WjBAMRQwEgYDVQQD\n"
             "DAtTRVAgUm9vdCBDQTETMBEGA1UECgwKQXBwbGUgSW5jLjETMBEGA1UECAwKQ2Fs\n"
             "aWZvcm5pYTB2MBAGByqGSM49AgEGBSuBBAAiA2IABEBGXhKwc7q3iFvkUoGDP6j2\n"
             "drpxSCxsSCODaDQIqGwd53wZJ0xIJIv0RTf2TS7+/u4KzhrANzb19r+TQzwqFJMp\n"
             "hp3mI3yY4pukIFc/kWS7DLQAx/ftWBXX6vl4ig3wEqNCMEAwHQYDVR0OBBYEFFjv\n"
             "1r7FgrBUzRimhK2i9nt7On/PMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQD\n"
             "AgEGMAoGCCqGSM49BAMDA2cAMGQCMCWRVB9DxwYdXsJ8KVZwbU5y0rfNEWJwpH5B\n"
             "bH3HoiOT/k7TIzlcXWiWAZVVBsDf/gIwC5wq3OepHwBMMCa3Q4ZvpT4Qs0dmc4oa\n"
             "GYxqUZYACJiGD7vRVavVMFnf0s4xG0JG\n"
             "-----END CERTIFICATE-----";
      uint64_t v6 = (unsigned int *)&QAUCRTRootCAP384PEMLen;
LABEL_33:
      uint64_t v7 = (unsigned int *)&UCRTRootCAPEMLen;
      goto LABEL_48;
    case 9:
      BOOL v4 = a2 == 0;
      if (a2) {
        id v5 = "-----BEGIN CERTIFICATE-----\n"
      }
             "MIIBtjCCAVugAwIBAgIBJTAKBggqhkjOPQQDAjBIMRwwGgYDVQQDDBNTRVAgUm9v\n"
             "dCBDQSAoTG9jYWwpMRMwEQYDVQQKDApBcHBsZSBJbmMuMRMwEQYDVQQIDApDYWxp\n"
             "Zm9ybmlhMB4XDTE2MDQyMjIyMDMwMloXDTI2MDQyMDIyMDMwMlowSTETMBEGA1UE\n"
             "CAwKQ2FsaWZvcm5pYTETMBEGA1UECgwKQXBwbGUgSW5jLjEdMBsGA1UEAwwUdWNy\n"
             "dCBWZW5kaW5nIFNlcnZpY2UwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQooWKn\n"
             "j4PQnKhSGEpmJok/4CSDeG6fIk6A4vCDtuC5T2twqSmM0VWT3SY5B8QKMAspxnnT\n"
             "fxPmUJ+d2vhNPocFozUwMzAPBgNVHRMBAf8EBTADAQH/MAsGA1UdDwQEAwIBBjAT\n"
             "BgkqhkiG92NkBiwEBhYEdWNydDAKBggqhkjOPQQDAgNJADBGAiEAq6YVB2GvW4uu\n"
             "b17G+wTS/pehuM8tHLOH6RfJzUarkpUCIQDViFsKmYnrNx3yi9whnCHUE2SqvdRK\n"
             "YFSjST8cXO8B2g==\n"
             "-----END CERTIFICATE-----";
      else {
        id v5 = "-----BEGIN CERTIFICATE-----\n"
      }
             "MIICFzCCAZygAwIBAgIIOcUqQ8IC/hswCgYIKoZIzj0EAwIwQDEUMBIGA1UEAwwL\n"
             "U0VQIFJvb3QgQ0ExEzARBgNVBAoMCkFwcGxlIEluYy4xEzARBgNVBAgMCkNhbGlm\n"
             "b3JuaWEwHhcNMTYwNDI1MjM0NTQ3WhcNMjkwNjI0MjE0MzI0WjBFMRMwEQYDVQQI\n"
             "DApDYWxpZm9ybmlhMRMwEQYDVQQKDApBcHBsZSBJbmMuMRkwFwYDVQQDDBBGRFJE\n"
             "Qy1VQ1JULVNVQkNBMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEaDc2O/MruYvP\n"
             "VPaUbKR7RRzn66B14/8KoUMsEDb7nHkGEMX6eC+0gStGHe4HYMrLyWcap1tDFYmE\n"
             "DykGQ3uM2aN7MHkwHQYDVR0OBBYEFLSqOkOtG+V+zgoMOBq10hnLlTWzMA8GA1Ud\n"
             "EwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAUWO/WvsWCsFTNGKaEraL2e3s6f88wDgYD\n"
             "VR0PAQH/BAQDAgEGMBYGCSqGSIb3Y2QGLAEB/wQGFgR1Y3J0MAoGCCqGSM49BAMC\n"
             "A2kAMGYCMQDf5zNiiKN/Jqms1w+3CDYkESOPieJMpEkLe9a0UjWXEBDL0VEsq/Cd\n"
             "E3aKXkc6R10CMQDS4MiWiymY+Rxkvy/hicDDQqI/BL+N3LHqzJZUuw2Sx0afDX7B\n"
             "6LyKk+sLq4urkMY=\n"
             "-----END CERTIFICATE-----";
      uint64_t v6 = (unsigned int *)&QAUCRTSubCAPEMLen;
      uint64_t v7 = (unsigned int *)&UCRTSubCAPEMLen;
      goto LABEL_48;
    case 10:
      unsigned int v9 = 1115;
      id v5 = "-----BEGIN CERTIFICATE-----\n"
           "MIIDCjCCAnOgAwIBAgIJAKLEjm9wthY+MA0GCSqGSIb3DQEBBQUAMGIxCzAJBgNV\n"
           "BAYTAlVTMQswCQYDVQQIEwJDQTESMBAGA1UEBxMJQ3VwZXJ0aW5vMRMwEQYDVQQK\n"
           "EwpBcHBsZSBJbmMuMQwwCgYDVQQLEwNFVFMxDzANBgNVBAMTBlJhcHRvcjAeFw0x\n"
           "MTA2MjMxOTA1NDNaFw0xOTA5MDkxOTA1NDNaMGIxCzAJBgNVBAYTAlVTMQswCQYD\n"
           "VQQIEwJDQTESMBAGA1UEBxMJQ3VwZXJ0aW5vMRMwEQYDVQQKEwpBcHBsZSBJbmMu\n"
           "MQwwCgYDVQQLEwNFVFMxDzANBgNVBAMTBlJhcHRvcjCBnzANBgkqhkiG9w0BAQEF\n"
           "AAOBjQAwgYkCgYEAyckOSUo0WP7JAPTWXeVyEfeJ7JUm1cVzL4hURR/Kr9PR8x1g\n"
           "ptLaxWVcni+9D6eHmn9FxmmQFXRbIQCs5/qj4PhFZLC3c77wvi/8OL2EwSIOq9MN\n"
           "Hpm0P0jh/0e8AxJZS98gPfz6YF58H1/Vi5yYlM7zsGPdXaUiQokAbTcyXZUCAwEA\n"
           "AaOBxzCBxDAdBgNVHQ4EFgQUMSXJGuBw9hqPqJDExjgE206NyD4wgZQGA1UdIwSB\n"
           "jDCBiYAUMSXJGuBw9hqPqJDExjgE206NyD6hZqRkMGIxCzAJBgNVBAYTAlVTMQsw\n"
           "CQYDVQQIEwJDQTESMBAGA1UEBxMJQ3VwZXJ0aW5vMRMwEQYDVQQKEwpBcHBsZSBJ\n"
           "bmMuMQwwCgYDVQQLEwNFVFMxDzANBgNVBAMTBlJhcHRvcoIJAKLEjm9wthY+MAwG\n"
           "A1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEFBQADgYEAqrgiRsSNB4ubv2ZDUqH7p1a1\n"
           "Hca1vMmXZy1bTBXTbxoNJ/tHnkBZrQHoRq31931Sd6CDLnN/8h+Zpcg7C40vKMBu\n"
           "nJ4gaPVrPZlv36rrW/xNf6ZLETt0Q8VM554/P2QfT4aU/2v2rFb/orAqsKSW6wtJ\n"
           "9WmL1qAfmVJAPdcwYbY=\n"
           "-----END CERTIFICATE-----";
      goto LABEL_52;
    case 11:
      unsigned int v9 = 1143;
      id v5 = "-----BEGIN CERTIFICATE-----\n"
           "MIIDHzCCAoigAwIBAgIJAK/qJPz+p+3XMA0GCSqGSIb3DQEBBQUAMGkxCzAJBgNV\n"
           "BAYTAlVTMQswCQYDVQQIEwJDQTESMBAGA1UEBxMJQ3VwZXJ0aW5vMRMwEQYDVQQK\n"
           "EwpBcHBsZSBJbmMuMQwwCgYDVQQLEwNFVFMxFjAUBgNVBAMTDVJhcHRvciBEZXZp\n"
           "Y2UwHhcNMTEwNjIzMTkwNjE3WhcNMTkwOTA5MTkwNjE3WjBpMQswCQYDVQQGEwJV\n"
           "UzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzETMBEGA1UEChMKQXBw\n"
           "bGUgSW5jLjEMMAoGA1UECxMDRVRTMRYwFAYDVQQDEw1SYXB0b3IgRGV2aWNlMIGf\n"
           "MA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDOPR58emAZ3QBW6U3tZXmTjELxK495\n"
           "JavHz3yZm1lX1z7K9tmbqcmUuEXpBbxHtgEkTTmwZQIgM3f6asTn8CKln8kq7aYj\n"
           "AWbSNOCy35hLDCy+hCN9hi++3LqqHiuQ9whVAvyrqpX7xPfgGwheIgpp/sPoPbZF\n"
           "x5EiwPt7/uHzfQIDAQABo4HOMIHLMB0GA1UdDgQWBBSWWwNRWUp2XVKrcZ8yKR4r\n"
           "Zh/4wDCBmwYDVR0jBIGTMIGQgBSWWwNRWUp2XVKrcZ8yKR4rZh/4wKFtpGswaTEL\n"
           "MAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRIwEAYDVQQHEwlDdXBlcnRpbm8xEzAR\n"
           "BgNVBAoTCkFwcGxlIEluYy4xDDAKBgNVBAsTA0VUUzEWMBQGA1UEAxMNUmFwdG9y\n"
           "IERldmljZYIJAK/qJPz+p+3XMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEFBQAD\n"
           "gYEAP2PMyy+666s+vDH4mLhFb2ZUFUM/nyxnLbjEyxgxR5Z5iZ/H0BEp7s59Matv\n"
           "dO0dzhP1+khkcM6opicPG3Vu5eDI0odn41m7LDj6Z3lgrxFTKIm/Ghc7c7c0qdWA\n"
           "YLTvijBQsDqsY1YoAXr+80ReSSouJgkNvljBAoPFPpoK2xQ=\n"
           "-----END CERTIFICATE-----";
      goto LABEL_52;
    case 12:
      BOOL v4 = a2 == 0;
      if (a2) {
        id v5 = "Certificate:\n"
      }
             "    Data:\n"
             "        Version: 3 (0x2)\n"
             "        Serial Number: 1 (0x1)\n"
             "        Signature Algorithm: sha1WithRSAEncryption\n"
             "        Issuer: C=US, O=Apple Inc., OU=Apple Certification Authority, CN=[TEST] Apple iPhone Certification "
             "Authority\n"
             "        Validity\n"
             "            Not Before: Mar 21 06:20:50 2007 GMT\n"
             "            Not After : Mar 12 06:20:50 2022 GMT\n"
             "        Subject: C=US, O=Apple Inc., OU=Apple iPhone, CN=[TEST] Apple iPhone Device CA\n"
             "        Subject Public Key Info:\n"
             "            Public Key Algorithm: rsaEncryption\n"
             "            RSA Public Key: (1024 bit)\n"
             "                Modulus (1024 bit):\n"
             "                    00:d7:60:52:2a:fa:93:52:dc:db:ae:92:6b:d6:ac:\n"
             "                    59:17:1f:9a:20:ed:34:ae:c2:15:e8:e3:f0:3b:63:\n"
             "                    84:d8:6d:8d:02:65:74:e6:62:18:27:d1:fc:78:c3:\n"
             "                    2f:36:83:39:91:9f:3d:32:e0:95:7f:90:3b:ab:47:\n"
             "                    be:f1:47:85:8c:5d:ab:1c:5c:bb:10:69:47:56:b8:\n"
             "                    15:bf:34:4a:f0:49:6e:8a:35:4a:4f:47:bb:3e:ea:\n"
             "                    cc:df:2e:f4:b8:96:16:94:dd:38:f6:f0:82:cf:26:\n"
             "                    fd:67:a1:73:01:43:d8:25:bd:02:2c:82:89:7c:70:\n"
             "                    01:68:c2:8a:85:60:84:77:83\n"
             "                Exponent: 65537 (0x10001)\n"
             "        X509v3 extensions:\n"
             "            X509v3 Key Usage: critical\n"
             "                Digital Signature, Certificate Sign, CRL Sign\n"
             "            X509v3 Basic Constraints: critical\n"
             "                CA:TRUE\n"
             "            X509v3 Subject Key Identifier:\n"
             "                38:05:20:A9:3F:C6:79:F4:EC:9A:6F:7F:47:02:5E:6E:A4:79:11:F5\n"
             "            X509v3 Authority Key Identifier:\n"
             "                keyid:45:A2:4C:A9:8A:5B:4A:27:5E:85:A6:4D:05:1C:27:44:A5:87:76:17\n"
             "\n"
             "            X509v3 CRL Distribution Points:\n"
             "                URI:http://www.apple.com/appleca/iphone.crl\n"
             "\n"
             "    Signature Algorithm: sha1WithRSAEncryption\n"
             "        8d:be:6b:c8:4e:80:9e:78:86:0c:09:d0:6e:ed:c1:dc:30:f7:\n"
             "        29:4b:20:4e:2c:6c:b3:24:72:fd:ce:24:34:60:95:30:d7:32:\n"
             "        61:31:e5:d4:d5:63:aa:3f:89:81:f6:44:ab:71:d0:bc:17:db:\n"
             "        ab:bc:ec:bb:a4:40:6a:e7:e4:57:c6:28:6f:11:72:fc:0c:51:\n"
             "        07:31:db:40:54:ee:b5:e6:1e:e3:dc:9b:f9:3c:6a:ba:d8:c3:\n"
             "        20:f1:dd:49:cb:3a:a6:29:cd:52:f9:f3:f3:18:5e:dd:82:83:\n"
             "        b8:e8:4e:94:10:7a:1e:11:a0:63:4d:8e:60:4a:1d:45:72:4d:\n"
             "        a0:ac:1f:b0:98:8b:b4:33:5a:85:60:cf:7f:89:35:62:65:d1:\n"
             "        1b:48:a4:ec:ca:60:1a:9d:a6:d1:b9:3d:f3:64:a4:67:d1:a5:\n"
             "        1b:b6:d9:e7:65:75:cb:af:2f:7a:db:d8:a1:f4:f3:09:bf:9a:\n"
             "        99:1a:34:a6:ed:1f:82:84:0b:b6:a8:68:5d:ec:49:d4:b3:34:\n"
             "        84:af:cb:a4:d9:00:f0:bc:07:6c:17:e7:95:bb:c3:3d:d9:bb:\n"
             "        6a:13:1d:34:bd:2f:c1:9a:f1:4d:67:5f:56:33:90:b2:ef:ff:\n"
             "        27:da:19:60:55:b0:78:c2:8c:34:5b:61:3a:e1:ec:61:92:8b:\n"
             "        2f:04:9a:c6\n"
             "-----BEGIN CERTIFICATE-----\n"
             "MIIDeDCCAmCgAwIBAgIBATANBgkqhkiG9w0BAQUFADCBgDELMAkGA1UEBhMCVVMx\n"
             "EzARBgNVBAoTCkFwcGxlIEluYy4xJjAkBgNVBAsTHUFwcGxlIENlcnRpZmljYXRp\n"
             "b24gQXV0aG9yaXR5MTQwMgYDVQQDFCtbVEVTVF0gQXBwbGUgaVBob25lIENlcnRp\n"
             "ZmljYXRpb24gQXV0aG9yaXR5MB4XDTA3MDMyMTA2MjA1MFoXDTIyMDMxMjA2MjA1\n"
             "MFowYTELMAkGA1UEBhMCVVMxEzARBgNVBAoTCkFwcGxlIEluYy4xFTATBgNVBAsT\n"
             "DEFwcGxlIGlQaG9uZTEmMCQGA1UEAxQdW1RFU1RdIEFwcGxlIGlQaG9uZSBEZXZp\n"
             "Y2UgQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBANdgUir6k1Lc266Sa9as\n"
             "WRcfmiDtNK7CFejj8DtjhNhtjQJldOZiGCfR/HjDLzaDOZGfPTLglX+QO6tHvvFH\n"
             "hYxdqxxcuxBpR1a4Fb80SvBJboo1Sk9Huz7qzN8u9LiWFpTdOPbwgs8m/WehcwFD\n"
             "2CW9AiyCiXxwAWjCioVghHeDAgMBAAGjgZ4wgZswDgYDVR0PAQH/BAQDAgGGMA8G\n"
             "A1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFDgFIKk/xnn07Jpvf0cCXm6keRH1MB8G\n"
             "A1UdIwQYMBaAFEWiTKmKW0onXoWmTQUcJ0Slh3YXMDgGA1UdHwQxMC8wLaAroCmG\n"
             "J2h0dHA6Ly93d3cuYXBwbGUuY29tL2FwcGxlY2EvaXBob25lLmNybDANBgkqhkiG\n"
             "9w0BAQUFAAOCAQEAjb5ryE6AnniGDAnQbu3B3DD3KUsgTixssyRy/c4kNGCVMNcy\n"
             "YTHl1NVjqj+JgfZEq3HQvBfbq7zsu6RAaufkV8YobxFy/AxRBzHbQFTuteYe49yb\n"
             "+TxqutjDIPHdScs6pinNUvnz8xhe3YKDuOhOlBB6HhGgY02OYEodRXJNoKwfsJiL\n"
             "tDNahWDPf4k1YmXRG0ik7MpgGp2m0bk982SkZ9GlG7bZ52V1y68vetvYofTzCb+a\n"
             "mRo0pu0fgoQLtqhoXexJ1LM0hK/LpNkA8LwHbBfnlbvDPdm7ahMdNL0vwZrxTWdf\n"
             "VjOQsu//J9oZYFWweMKMNFthOuHsYZKLLwSaxg==\n"
             "-----END CERTIFICATE-----";
      else {
        id v5 = "Bag Attributes\n"
      }
             "    localKeyID: 7C 29 15 15 12 C9 CF F6 15 2B 5B 25 70 3D A7 9A 98 14 36 06\n"
             "subject=/C=US/O=Apple Inc./OU=Apple iPhone/CN=Apple iPhone Device CA\n"
             "issuer=/C=US/O=Apple Inc./OU=Apple Certification Authority/CN=Apple iPhone Certification Authority\n"
             "-----BEGIN CERTIFICATE-----\n"
             "MIIDaTCCAlGgAwIBAgIBATANBgkqhkiG9w0BAQUFADB5MQswCQYDVQQGEwJVUzET\n"
             "MBEGA1UEChMKQXBwbGUgSW5jLjEmMCQGA1UECxMdQXBwbGUgQ2VydGlmaWNhdGlv\n"
             "biBBdXRob3JpdHkxLTArBgNVBAMTJEFwcGxlIGlQaG9uZSBDZXJ0aWZpY2F0aW9u\n"
             "IEF1dGhvcml0eTAeFw0wNzA0MTYyMjU0NDZaFw0xNDA0MTYyMjU0NDZaMFoxCzAJ\n"
             "BgNVBAYTAlVTMRMwEQYDVQQKEwpBcHBsZSBJbmMuMRUwEwYDVQQLEwxBcHBsZSBp\n"
             "UGhvbmUxHzAdBgNVBAMTFkFwcGxlIGlQaG9uZSBEZXZpY2UgQ0EwgZ8wDQYJKoZI\n"
             "hvcNAQEBBQADgY0AMIGJAoGBAPGUSsnquloYYK3Lok1NTlQZaRdZB2bLl+hmmkdf\n"
             "Rq5nerVKc1SxywT2vTa4DFU4ioSDMVJl+TPhl3ecK0wmsCU/6TKqewh0lOzBSzgd\n"
             "Z04IUpRai1mjXNeT9KD+VYW7TEaXXm6yd0UvZ1y8Cxi/WblshvcqdXbSGXH0KWO5\n"
             "JQuvAgMBAAGjgZ4wgZswDgYDVR0PAQH/BAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8w\n"
             "HQYDVR0OBBYEFLL+ISNEhpVqedWBJo5zENinTI50MB8GA1UdIwQYMBaAFOc0Ki4i\n"
             "3jlga7SUzneDYS8xoHw1MDgGA1UdHwQxMC8wLaAroCmGJ2h0dHA6Ly93d3cuYXBw\n"
             "bGUuY29tL2FwcGxlY2EvaXBob25lLmNybDANBgkqhkiG9w0BAQUFAAOCAQEAd13P\n"
             "Z3pMViukVHe9WUg8Hum+0I/0kHKvjhwVd/IMwGlXyU7DhUYWdja2X/zqj7W24Aq5\n"
             "7dEKm3fqqxK5XCFVGY5HI0cRsdENyTP7lxSiiTRYj2mlPedheCn+k6T5y0U4Xr40\n"
             "FXwWb2nWqCF1AgIudhgvVbxlvqcxUm8Zz7yDeJ0JFovXQhyO5fLUHRLCQFssAbf8\n"
             "B4i8rYYsBUhYTspVJcxVpIIltkYpdIRSIARA49HNvKK4hzjzMS/OhKQpVKw+OCEZ\n"
             "xptCVeN2pjbdt9uzi175oVo/u6B2ArKAW17u6XEHIdDMOe7cb33peVI6TD15W4MI\n"
             "pyQPbp8orlXe+tA8JA==\n"
             "-----END CERTIFICATE-----";
      uint64_t v6 = (unsigned int *)&QAIphoneDeviceCAPEMLen;
      uint64_t v7 = (unsigned int *)&iPhoneDeviceCAPEMLen;
      goto LABEL_48;
    case 13:
      BOOL v4 = a2 == 0;
      if (a2) {
        id v5 = "Certificate:\n"
      }
             "    Data:\n"
             "        Version: 3 (0x2)\n"
             "        Serial Number: 2 (0x2)\n"
             "        Signature Algorithm: sha1WithRSAEncryption\n"
             "        Issuer: C=US, O=Apple Inc., OU=Apple Certification Authority, CN=[TEST] Apple iPhone Certification "
             "Authority\n"
             "        Validity\n"
             "            Not Before: Mar 21 06:20:50 2007 GMT\n"
             "            Not After : Mar 12 06:20:50 2022 GMT\n"
             "        Subject: C=US, O=Apple Inc., OU=Apple iPhone, CN=[TEST] Apple iPhone Activation\n"
             "        Subject Public Key Info:\n"
             "            Public Key Algorithm: rsaEncryption\n"
             "            RSA Public Key: (1024 bit)\n"
             "                Modulus (1024 bit):\n"
             "                    00:b3:62:65:ec:48:dd:dd:ed:44:d4:f1:fe:fb:c2:\n"
             "                    6f:42:d0:82:09:03:00:a6:01:e8:b1:07:09:26:5b:\n"
             "                    12:65:db:7f:51:15:ef:4f:45:b3:8f:ce:4d:16:1d:\n"
             "                    38:84:01:10:57:4e:8c:71:e1:5e:de:67:14:75:da:\n"
             "                    48:9a:4c:6f:f0:45:65:66:e8:9c:b5:a2:4c:f4:53:\n"
             "                    c1:ec:98:62:90:b0:94:be:12:f2:a0:ac:5c:77:16:\n"
             "                    07:73:72:5a:97:ba:50:4e:67:30:52:1e:f0:30:4e:\n"
             "                    8f:b2:a4:d3:d1:fa:f8:66:79:87:91:2f:a1:ef:4e:\n"
             "                    e6:41:8d:94:18:29:e0:f2:cf\n"
             "                Exponent: 65537 (0x10001)\n"
             "        X509v3 extensions:\n"
             "            X509v3 Key Usage: critical\n"
             "                Digital Signature\n"
             "            X509v3 Basic Constraints: critical\n"
             "                CA:FALSE\n"
             "            X509v3 Subject Key Identifier:\n"
             "                C0:6F:3A:4A:1B:ED:51:DD:9D:A3:4B:C0:41:F6:6A:11:F9:AB:8B:F1\n"
             "            X509v3 Authority Key Identifier:\n"
             "                keyid:45:A2:4C:A9:8A:5B:4A:27:5E:85:A6:4D:05:1C:27:44:A5:87:76:17\n"
             "\n"
             "            X509v3 CRL Distribution Points:\n"
             "                URI:http://www.apple.com/appleca/iphone.crl\n"
             "\n"
             "    Signature Algorithm: sha1WithRSAEncryption\n"
             "        0e:4f:55:00:9d:1e:4c:75:28:e8:79:bb:db:5c:5c:cc:45:93:\n"
             "        46:d3:3b:14:00:2d:5b:b0:8c:2e:15:3e:19:60:43:25:59:7f:\n"
             "        7b:3a:b2:7c:cf:c2:96:dd:b0:d7:70:5a:8e:28:c4:cc:32:2c:\n"
             "        f4:c2:43:e3:e1:1f:b3:b1:df:ec:86:dd:43:93:45:60:a1:53:\n"
             "        05:ba:6a:70:43:44:11:a1:9e:dd:c1:71:8b:cb:30:cd:d3:15:\n"
             "        21:e0:27:30:35:8a:76:8e:c2:23:fb:44:22:bd:96:f6:aa:55:\n"
             "        bf:4d:11:b1:0e:c4:7f:cf:86:8d:f8:30:dd:80:48:5d:9e:41:\n"
             "        4e:e0:29:96:25:cc:d6:4a:0d:47:05:87:c4:61:f6:b0:1e:1a:\n"
             "        da:48:56:a3:c1:c1:56:95:b3:4e:84:82:1b:a5:4d:d3:d0:5d:\n"
             "        60:cf:fd:e5:75:3c:91:13:e2:e4:f1:60:4a:58:93:de:3f:e9:\n"
             "        3c:bf:da:c9:f6:ef:9b:9e:b1:6e:78:9e:81:f6:e7:4c:09:b3:\n"
             "        1c:87:25:bf:8f:6e:3f:d6:03:53:1e:09:a3:5b:00:4b:9e:98:\n"
             "        fb:ae:13:86:e4:47:6a:1a:44:f8:15:c8:fb:30:c7:bd:b0:e8:\n"
             "        8c:ac:2d:73:08:af:ed:b2:e8:f5:6d:a1:e2:d9:45:de:d5:b9:\n"
             "        98:89:16:72\n"
             "-----BEGIN CERTIFICATE-----\n"
             "MIIDdjCCAl6gAwIBAgIBAjANBgkqhkiG9w0BAQUFADCBgDELMAkGA1UEBhMCVVMx\n"
             "EzARBgNVBAoTCkFwcGxlIEluYy4xJjAkBgNVBAsTHUFwcGxlIENlcnRpZmljYXRp\n"
             "b24gQXV0aG9yaXR5MTQwMgYDVQQDFCtbVEVTVF0gQXBwbGUgaVBob25lIENlcnRp\n"
             "ZmljYXRpb24gQXV0aG9yaXR5MB4XDTA3MDMyMTA2MjA1MFoXDTIyMDMxMjA2MjA1\n"
             "MFowYjELMAkGA1UEBhMCVVMxEzARBgNVBAoTCkFwcGxlIEluYy4xFTATBgNVBAsT\n"
             "DEFwcGxlIGlQaG9uZTEnMCUGA1UEAxQeW1RFU1RdIEFwcGxlIGlQaG9uZSBBY3Rp\n"
             "dmF0aW9uMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCzYmXsSN3d7UTU8f77\n"
             "wm9C0IIJAwCmAeixBwkmWxJl239RFe9PRbOPzk0WHTiEARBXToxx4V7eZxR12kia\n"
             "TG/wRWVm6Jy1okz0U8HsmGKQsJS+EvKgrFx3FgdzclqXulBOZzBSHvAwTo+ypNPR\n"
             "+vhmeYeRL6HvTuZBjZQYKeDyzwIDAQABo4GbMIGYMA4GA1UdDwEB/wQEAwIHgDAM\n"
             "BgNVHRMBAf8EAjAAMB0GA1UdDgQWBBTAbzpKG+1R3Z2jS8BB9moR+auL8TAfBgNV\n"
             "HSMEGDAWgBRFokypiltKJ16Fpk0FHCdEpYd2FzA4BgNVHR8EMTAvMC2gK6Aphido\n"
             "dHRwOi8vd3d3LmFwcGxlLmNvbS9hcHBsZWNhL2lwaG9uZS5jcmwwDQYJKoZIhvcN\n"
             "AQEFBQADggEBAA5PVQCdHkx1KOh5u9tcXMxFk0bTOxQALVuwjC4VPhlgQyVZf3s6\n"
             "snzPwpbdsNdwWo4oxMwyLPTCQ+PhH7Ox3+yG3UOTRWChUwW6anBDRBGhnt3BcYvL\n"
             "MM3TFSHgJzA1inaOwiP7RCK9lvaqVb9NEbEOxH/Pho34MN2ASF2eQU7gKZYlzNZK\n"
             "DUcFh8Rh9rAeGtpIVqPBwVaVs06EghulTdPQXWDP/eV1PJET4uTxYEpYk94/6Ty/\n"
             "2sn275uesW54noH250wJsxyHJb+Pbj/WA1MeCaNbAEuemPuuE4bkR2oaRPgVyPsw\n"
             "x72w6IysLXMIr+2y6PVtoeLZRd7VuZiJFnI=\n"
             "-----END CERTIFICATE-----\n";
      else {
        id v5 = "Bag Attributes\n"
      }
             "    localKeyID: 75 60 9A FA 74 F6 E1 90 9C 00 2D 77 E5 10 D6 1C B3 E5 1F 4B\n"
             "subject=/C=US/O=Apple Inc./OU=Apple iPhone/CN=Apple iPhone Activation\n"
             "issuer=/C=US/O=Apple Inc./OU=Apple Certification Authority/CN=Apple iPhone Certification Authority\n"
             "-----BEGIN CERTIFICATE-----\n"
             "MIIDZzCCAk+gAwIBAgIBAjANBgkqhkiG9w0BAQUFADB5MQswCQYDVQQGEwJVUzET\n"
             "MBEGA1UEChMKQXBwbGUgSW5jLjEmMCQGA1UECxMdQXBwbGUgQ2VydGlmaWNhdGlv\n"
             "biBBdXRob3JpdHkxLTArBgNVBAMTJEFwcGxlIGlQaG9uZSBDZXJ0aWZpY2F0aW9u\n"
             "IEF1dGhvcml0eTAeFw0wNzA0MTYyMjU1MDJaFw0xNDA0MTYyMjU1MDJaMFsxCzAJ\n"
             "BgNVBAYTAlVTMRMwEQYDVQQKEwpBcHBsZSBJbmMuMRUwEwYDVQQLEwxBcHBsZSBp\n"
             "UGhvbmUxIDAeBgNVBAMTF0FwcGxlIGlQaG9uZSBBY3RpdmF0aW9uMIGfMA0GCSqG\n"
             "SIb3DQEBAQUAA4GNADCBiQKBgQDFAXzRImArmoiHfbS2oPcqAfbEv0d1jk7GbnX7\n"
             "+4YUlyIfprzBVdlmz2JHYv1+04IzJtL7cL97UI7fk0i0OMY0al8a+JPQa4Ug611T\n"
             "bqEt+njAmAkge3HXWDBdAXD9MhkC7T/9o77zOQ1oli4cUdzlnYWfzmW0PduOxuve\n"
             "AeYY4wIDAQABo4GbMIGYMA4GA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMB0G\n"
             "A1UdDgQWBBShoNL+t7Rz/psUaq/NPXNPH+/WlDAfBgNVHSMEGDAWgBTnNCouIt45\n"
             "YGu0lM53g2EvMaB8NTA4BgNVHR8EMTAvMC2gK6AphidodHRwOi8vd3d3LmFwcGxl\n"
             "LmNvbS9hcHBsZWNhL2lwaG9uZS5jcmwwDQYJKoZIhvcNAQEFBQADggEBAF9qmrUN\n"
             "dA+FROYGP7pWcYTAK+pLyOf9zOaE7aeVI885V8Y/BKHhlwAo+zEkiOU3FbEPCS9V\n"
             "tS18ZBcwD/+d5ZQTMFknhcUJwdPqqjnm9LqTfH/x4pw8ONHRDzxHdp96gOV3A4+8\n"
             "abkoASfcYqvIRypXnbur3bRRhTzAs4VILS6jTyFYymZeSewtBubmmigo1kCQiZGc\n"
             "76c5feDAyHb2bzEqtvx3WprljtS46QT5CR6YelinZnio32jAzRYTxtS6r3JsvZDi\n"
             "J07+EHcmfGdpxwgO+7btW1pFar0ZjF9/jYKKnOYNyvCrwszhafbSYwzAG5EJoXFB\n"
             "4d+piWHUDcPxtcc=\n"
             "-----END CERTIFICATE-----";
      uint64_t v6 = (unsigned int *)&QAIphoneActivationPEMLen;
      uint64_t v7 = (unsigned int *)&iPhoneActivationPEMLen;
LABEL_48:
      if (v4) {
        uint64_t v6 = v7;
      }
      unsigned int v9 = *v6;
      goto LABEL_52;
    case 14:
      unsigned int v9 = 4721;
      id v5 = iPhoneCAPEM;
      goto LABEL_52;
    default:
      id v8 =  createMobileActivationError( (uint64_t)"copyRootCertificate",  118LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid certificate type: %d",  a1);
      if (v8) {
        goto LABEL_55;
      }
      unsigned int v9 = 0;
      id v5 = 0LL;
LABEL_52:
      uint64_t v10 = -[NSData initWithBytesNoCopy:length:freeWhenDone:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBytesNoCopy:length:freeWhenDone:",  v5,  v9,  0LL);
      if (v10)
      {
        uint64_t v11 = v10;
        id v8 = 0LL;
      }

      else
      {
        id v8 =  createMobileActivationError( (uint64_t)"copyRootCertificate",  128LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create certificate.");
LABEL_55:
        if (a3)
        {
          id v8 = v8;
          uint64_t v11 = 0LL;
          *a3 = v8;
        }

        else
        {
          uint64_t v11 = 0LL;
        }
      }

      return v11;
  }

id copy_system_container_path()
{
  if (copy_system_container_path_onceToken != -1) {
    dispatch_once(&copy_system_container_path_onceToken, &__block_literal_global_7);
  }
  return (id)copy_system_container_path_retval;
}

void __copy_system_container_path_block_invoke(id a1)
{
  uint64_t v5 = 1LL;
  uint64_t v1 = container_system_path_for_identifier(0LL, &v5);
  if (v1)
  {
    dispatch_queue_t v2 = (void *)v1;
    uint64_t v3 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v1);
    BOOL v4 = (void *)copy_system_container_path_retval;
    copy_system_container_path_retval = (uint64_t)v3;

    free(v2);
  }

NSString *copy_group_container_path(uint64_t a1)
{
  uint64_t v5 = 1LL;
  if (!a1) {
    return (NSString *)0LL;
  }
  uint64_t v1 = container_system_group_path_for_identifier(0LL, a1, &v5);
  if (!v1) {
    return (NSString *)0LL;
  }
  dispatch_queue_t v2 = (void *)v1;
  uint64_t v3 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v1);
  free(v2);
  return v3;
}

id copy_regulatory_images_directory_path()
{
  if (copy_regulatory_images_directory_path_onceToken != -1) {
    dispatch_once(&copy_regulatory_images_directory_path_onceToken, &__block_literal_global_18);
  }
  return (id)copy_regulatory_images_directory_path_retval;
}

void __copy_regulatory_images_directory_path_block_invoke(id a1)
{
  uint64_t v1 = copy_group_container_path((uint64_t)[@"systemgroup.com.apple.regulatory_images" UTF8String]);
  dispatch_queue_t v2 = v1;
  if (v1)
  {
    uint64_t v3 =  -[NSString stringByAppendingPathComponent:]( v1,  "stringByAppendingPathComponent:",  @"Library/RegulatoryImages");
    BOOL v4 = (void *)copy_regulatory_images_directory_path_retval;
    copy_regulatory_images_directory_path_retval = (uint64_t)v3;
  }
}

id copy_suinfo_directory_path()
{
  if (copy_suinfo_directory_path_onceToken != -1) {
    dispatch_once(&copy_suinfo_directory_path_onceToken, &__block_literal_global_21);
  }
  return (id)copy_suinfo_directory_path_retval;
}

void __copy_suinfo_directory_path_block_invoke(id a1)
{
  uint64_t v1 = copy_group_container_path((uint64_t)[@"systemgroup.com.apple.pisco.suinfo" UTF8String]);
  dispatch_queue_t v2 = v1;
  if (v1)
  {
    uint64_t v3 =  -[NSString stringByAppendingPathComponent:]( v1,  "stringByAppendingPathComponent:",  @"Library/ProvenanceV2");
    BOOL v4 = (void *)copy_suinfo_directory_path_retval;
    copy_suinfo_directory_path_retval = (uint64_t)v3;
  }
}

id copy_software_update_log_directory_path()
{
  if (copy_software_update_log_directory_path_onceToken != -1) {
    dispatch_once(&copy_software_update_log_directory_path_onceToken, &__block_literal_global_24);
  }
  return (id)copy_software_update_log_directory_path_retval;
}

void __copy_software_update_log_directory_path_block_invoke(id a1)
{
  id v1 = [@"/private/var/hardware/MobileActivation" stringByAppendingPathComponent:@"logs"];
  dispatch_queue_t v2 = (void *)copy_software_update_log_directory_path_retval;
  copy_software_update_log_directory_path_retval = (uint64_t)v1;
}

id copy_software_update_splunk_directory_path()
{
  if (copy_software_update_splunk_directory_path_onceToken != -1) {
    dispatch_once(&copy_software_update_splunk_directory_path_onceToken, &__block_literal_global_27);
  }
  return (id)copy_software_update_splunk_directory_path_retval;
}

void __copy_software_update_splunk_directory_path_block_invoke(id a1)
{
  id v1 =  [@"/private/var/hardware/MobileActivation" stringByAppendingPathComponent:@"splunk"];
  dispatch_queue_t v2 = (void *)copy_software_update_splunk_directory_path_retval;
  copy_software_update_splunk_directory_path_retval = (uint64_t)v1;
}

id copy_uik_path()
{
  if (copy_uik_path_onceToken != -1) {
    dispatch_once(&copy_uik_path_onceToken, &__block_literal_global_30);
  }
  return (id)copy_uik_path_retval;
}

void __copy_uik_path_block_invoke(id a1)
{
  id v1 = copy_group_container_path((uint64_t)[@"systemgroup.com.apple.mobileactivationd" UTF8String]);
  dispatch_queue_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = -[NSString stringByAppendingPathComponent:](v1, "stringByAppendingPathComponent:", @"Library/uik");
    BOOL v4 = (void *)copy_uik_path_retval;
    copy_uik_path_retval = (uint64_t)v3;
  }
}

id copy_software_update_ucrt_directory_path()
{
  if (copy_software_update_ucrt_directory_path_onceToken != -1) {
    dispatch_once(&copy_software_update_ucrt_directory_path_onceToken, &__block_literal_global_33);
  }
  return (id)copy_software_update_ucrt_directory_path_retval;
}

void __copy_software_update_ucrt_directory_path_block_invoke(id a1)
{
  id v1 = copy_group_container_path((uint64_t)[@"systemgroup.com.apple.mobileactivationd" UTF8String]);
  dispatch_queue_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = -[NSString stringByAppendingPathComponent:](v1, "stringByAppendingPathComponent:", @"Library/ucrt");
    BOOL v4 = (void *)copy_software_update_ucrt_directory_path_retval;
    copy_software_update_ucrt_directory_path_retval = (uint64_t)v3;
  }
}

id copy_activation_records_directory_path()
{
  if (copy_activation_records_directory_path_onceToken != -1) {
    dispatch_once(&copy_activation_records_directory_path_onceToken, &__block_literal_global_36);
  }
  return (id)copy_activation_records_directory_path_retval;
}

void __copy_activation_records_directory_path_block_invoke(id a1)
{
  id v1 = copy_system_container_path();
  dispatch_queue_t v2 = v1;
  if (v1)
  {
    id v3 = [v1 stringByAppendingPathComponent:@"Library/activation_records"];
    BOOL v4 = (void *)copy_activation_records_directory_path_retval;
    copy_activation_records_directory_path_retval = (uint64_t)v3;
  }
}

id copy_ucrt_path()
{
  if (copy_ucrt_path_onceToken != -1) {
    dispatch_once(&copy_ucrt_path_onceToken, &__block_literal_global_39);
  }
  return (id)copy_ucrt_path_retval;
}

void __copy_ucrt_path_block_invoke(id a1)
{
  id v1 = copy_group_container_path((uint64_t)[@"systemgroup.com.apple.mobileactivationd" UTF8String]);
  dispatch_queue_t v2 = v1;
  if (v1)
  {
    id v3 = -[NSString stringByAppendingPathComponent:](v1, "stringByAppendingPathComponent:", @"Library/ucrt");
    BOOL v4 = (void *)copy_ucrt_path_retval;
    copy_ucrt_path_retval = (uint64_t)v3;
  }
}

id copy_dcrt_path()
{
  if (copy_dcrt_path_onceToken != -1) {
    dispatch_once(&copy_dcrt_path_onceToken, &__block_literal_global_40_0);
  }
  return (id)copy_dcrt_path_retval;
}

void __copy_dcrt_path_block_invoke(id a1)
{
  id v1 = [@"/private/var/hardware/MobileActivation" stringByAppendingPathComponent:@"dcrt"];
  dispatch_queue_t v2 = (void *)copy_dcrt_path_retval;
  copy_dcrt_path_retval = (uint64_t)v1;
}

id copy_legacy_dcrt_path()
{
  if (copy_legacy_dcrt_path_onceToken != -1) {
    dispatch_once(&copy_legacy_dcrt_path_onceToken, &__block_literal_global_43);
  }
  return (id)copy_legacy_dcrt_path_retval;
}

void __copy_legacy_dcrt_path_block_invoke(id a1)
{
  id v1 = copy_system_container_path();
  dispatch_queue_t v2 = v1;
  if (v1)
  {
    id v3 = [v1 stringByAppendingPathComponent:@"Library/dcrt"];
    BOOL v4 = (void *)copy_legacy_dcrt_path_retval;
    copy_legacy_dcrt_path_retval = (uint64_t)v3;
  }
}

id copy_data_ark_directory_path()
{
  if (copy_data_ark_directory_path_onceToken != -1) {
    dispatch_once(&copy_data_ark_directory_path_onceToken, &__block_literal_global_46);
  }
  return (id)copy_data_ark_directory_path_retval;
}

void __copy_data_ark_directory_path_block_invoke(id a1)
{
  id v1 = copy_system_container_path();
  dispatch_queue_t v2 = v1;
  if (v1)
  {
    id v3 = [v1 stringByAppendingPathComponent:@"Library/internal"];
    BOOL v4 = (void *)copy_data_ark_directory_path_retval;
    copy_data_ark_directory_path_retval = (uint64_t)v3;
  }
}

id copy_log_directory_path()
{
  if (copy_log_directory_path_onceToken != -1) {
    dispatch_once(&copy_log_directory_path_onceToken, &__block_literal_global_49_0);
  }
  return (id)copy_log_directory_path_retval;
}

void __copy_log_directory_path_block_invoke(id a1)
{
  id v1 = (void *)copy_log_directory_path_retval;
  copy_log_directory_path_retval = (uint64_t)@"/private/var/mobile/Library/Logs/mobileactivationd";
}

id copy_splunk_directory_path()
{
  if (copy_splunk_directory_path_onceToken != -1) {
    dispatch_once(&copy_splunk_directory_path_onceToken, &__block_literal_global_52);
  }
  return (id)copy_splunk_directory_path_retval;
}

void __copy_splunk_directory_path_block_invoke(id a1)
{
  id v1 = copy_system_container_path();
  dispatch_queue_t v2 = v1;
  if (v1)
  {
    id v3 = [v1 stringByAppendingPathComponent:@"Library/splunk"];
    BOOL v4 = (void *)copy_splunk_directory_path_retval;
    copy_splunk_directory_path_retval = (uint64_t)v3;
  }
}

uint64_t mobileactivationErrorHasDomainAndErrorCode(void *a1, void *a2, id a3)
{
  id v5 = a1;
  id v6 = a2;
  uint64_t v7 = v6;
  uint64_t v8 = 0LL;
  if (v5 && v6)
  {
    do
    {
      id v9 = [v5 domain];
      if ([v9 isEqualToString:v7])
      {
        id v10 = [v5 code];

        if (v10 == a3)
        {
          uint64_t v8 = 1LL;
          goto LABEL_9;
        }
      }

      else
      {
      }

      id v11 = [v5 userInfo];
      id v12 = [v11 objectForKeyedSubscript:NSUnderlyingErrorKey];

      id v5 = v12;
    }

    while (v12);
    uint64_t v8 = 0LL;
  }

uint64_t load_identity(CFTypeRef *a1, id a2, void *a3, void *a4, int *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  if (!a1 || !v12)
  {
    id v21 =  createMobileActivationError( (uint64_t)"load_identity",  57LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    uint64_t v22 = 0LL;
    id v15 = 0LL;
    int v20 = -1;
    if (!a5) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  v25[0] = kSecAttrLabel;
  v25[1] = kSecClass;
  v26[0] = v12;
  v26[1] = kSecClassIdentity;
  v25[2] = kSecReturnRef;
  v25[3] = kSecUseDataProtectionKeychain;
  void v26[2] = &__kCFBooleanTrue;
  v26[3] = &__kCFBooleanTrue;
  id v14 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v26,  v25,  4LL);
  id v15 = -[NSDictionary mutableCopy](v14, "mutableCopy");

  if (v11) {
    [v15 setObject:v11 forKeyedSubscript:kSecAttrAccessGroup];
  }
  if (v13)
  {
    id v16 = [v13 objectForKeyedSubscript:@"UseSystemKeychainSharediPadOnly"];
    id v17 = isNSNumber(v16);

    if (v17)
    {
      id v18 = [v13 objectForKeyedSubscript:@"UseSystemKeychainSharediPadOnly"];
      [v15 setObject:v18 forKeyedSubscript:kSecUseSystemKeychain];
    }
  }

  uint64_t v19 = SecItemCopyMatching((CFDictionaryRef)v15, a1);
  int v20 = v19;
  if ((_DWORD)v19)
  {
    id v21 =  createMobileActivationError( (uint64_t)"load_identity",  88LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy identity: %d",  v19);
    uint64_t v22 = 0LL;
    if (!a5) {
      goto LABEL_13;
    }
LABEL_12:
    *a5 = v20;
    goto LABEL_13;
  }

  id v21 = 0LL;
  uint64_t v22 = 1LL;
  if (a5) {
    goto LABEL_12;
  }
LABEL_13:
  if (a6) {
    char v23 = v22;
  }
  else {
    char v23 = 1;
  }
  if ((v23 & 1) == 0) {
    *a6 = v21;
  }

  return v22;
}

uint64_t delete_identity(void *a1, void *a2, void *a3, NSError **a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  if (!v8)
  {
    id v16 =  createMobileActivationError( (uint64_t)"delete_identity",  116LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    id v11 = 0LL;
    if (!a4) {
      goto LABEL_10;
    }
    goto LABEL_12;
  }

  v19[0] = kSecAttrLabel;
  v19[1] = kSecClass;
  v20[0] = v8;
  v20[1] = kSecClassIdentity;
  v19[2] = kSecReturnRef;
  v19[3] = kSecUseDataProtectionKeychain;
  v20[2] = &__kCFBooleanTrue;
  void v20[3] = &__kCFBooleanTrue;
  id v10 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v20,  v19,  4LL);
  id v11 = -[NSDictionary mutableCopy](v10, "mutableCopy");

  if (v7) {
    [v11 setObject:v7 forKeyedSubscript:kSecAttrAccessGroup];
  }
  if (v9)
  {
    id v12 = [v9 objectForKeyedSubscript:@"UseSystemKeychainSharediPadOnly"];
    id v13 = isNSNumber(v12);

    if (v13)
    {
      id v14 = [v9 objectForKeyedSubscript:@"UseSystemKeychainSharediPadOnly"];
      [v11 setObject:v14 forKeyedSubscript:kSecUseSystemKeychain];
    }
  }

  uint64_t v15 = SecItemDelete((CFDictionaryRef)v11);
  id v16 = 0LL;
  uint64_t v17 = 1LL;
  if ((_DWORD)v15 != -25300 && (_DWORD)v15)
  {
    id v16 =  createMobileActivationError( (uint64_t)"delete_identity",  146LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to remove existing identity: %d",  v15);
    if (!a4)
    {
LABEL_10:
      uint64_t v17 = 0LL;
      goto LABEL_13;
    }

LABEL_12:
    id v16 = v16;
    uint64_t v17 = 0LL;
    *a4 = v16;
  }

    id v13 = v13;
    uint64_t v19 = 0LL;
    *a5 = v13;
    goto LABEL_20;
  }

  char v23 = 0LL;
  id v12 = delete_certificate(v9, v10, (NSError **)&v23);
  id v13 = (NSError *)v23;
  if (!v12) {
    goto LABEL_11;
  }
  v25[0] = kSecAttrLabel;
  v25[1] = kSecClass;
  v26[0] = v11;
  v26[1] = kSecClassCertificate;
  v25[2] = kSecReturnRef;
  v25[3] = kSecValueRef;
  void v26[2] = &__kCFBooleanTrue;
  v26[3] = a1;
  void v25[4] = kSecUseDataProtectionKeychain;
  void v26[4] = &__kCFBooleanTrue;
  id v14 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v26,  v25,  5LL);
  uint64_t v15 = -[NSDictionary mutableCopy](v14, "mutableCopy");

  if (v9) {
    [v15 setObject:v9 forKeyedSubscript:kSecAttrAccessGroup];
  }
  id v16 = SecItemAdd((CFDictionaryRef)v15, 0LL);
  if ((_DWORD)v16 == -25299 && a4)
  {
    [v15 removeObjectForKey:kSecAttrLabel];
    uint64_t v17 = SecItemCopyMatching((CFDictionaryRef)v15, &result);
    if ((_DWORD)v17)
    {
      MobileActivationError = createMobileActivationError( (uint64_t)"store_certificate",  368LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query duplicate certificate: %d",  v17);
      goto LABEL_18;
    }

    int v20 = SecItemDelete((CFDictionaryRef)v15);
    if ((_DWORD)v20)
    {
      MobileActivationError = createMobileActivationError( (uint64_t)"store_certificate",  378LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to delete duplicate certificate: %d",  v20);
      goto LABEL_18;
    }

    [v15 setObject:v11 forKeyedSubscript:kSecAttrLabel];
    id v16 = SecItemAdd((CFDictionaryRef)v15, 0LL);
  }

  if ((_DWORD)v16)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"store_certificate",  392LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to add certificate (%@) to keychain: %d",  v11,  v16);
LABEL_18:
    id v21 = MobileActivationError;

    id v13 = v21;
    if (!a5) {
      goto LABEL_19;
    }
    goto LABEL_12;
  }

  uint64_t v19 = 1LL;
LABEL_20:
  if (result) {
    CFRelease(result);
  }
  Class result = 0LL;

  return v19;
}

  unsigned int v36 = v2;
LABEL_22:

  return v36;
}

  return v9;
}

  return v7;
}

  if (v16) {
    free(v16);
  }
  id v16 = 0LL;

  return v11;
}

    id v6 = 0LL;
    goto LABEL_13;
  }

  if (([(id)isSupportedActivationLockClient_supportedList containsObject:v4] & 1) == 0)
  {
    id v5 =  createMobileActivationError( (uint64_t)"isSupportedActivationLockClient",  377LL,  @"com.apple.MobileActivation.ErrorDomain",  -25LL,  0LL,  @"%@ is not allowed to use this API. File a radar with 'MobileActivation | all' for support.",  v4);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT))
    {
      isSupportedDeviceIdentityClient_cold_1(v5);
      if (a2) {
        goto LABEL_10;
      }
    }

    else if (a2)
    {
      goto LABEL_10;
    }

    goto LABEL_12;
  }

  id v5 = 0LL;
  id v6 = 1LL;
LABEL_13:

  return v6;
}

  __break(0x5519u);
  return result;
}

uint64_t store_identity(uint64_t a1, id a2, void *a3, void *a4, NSError **a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  if (a1 && v10)
  {
    id v23 = 0LL;
    char v12 = delete_identity(v9, v10, v11, (NSError **)&v23);
    id v13 = (NSError *)v23;
    if ((v12 & 1) != 0)
    {
      v24[0] = kSecAttrLabel;
      v24[1] = kSecValueRef;
      v25[0] = v10;
      v25[1] = a1;
      v24[2] = kSecUseDataProtectionKeychain;
      v24[3] = kSecAttrAccessible;
      v25[2] = &__kCFBooleanTrue;
      v25[3] = kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
      id v14 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v25,  v24,  4LL);
      id v15 = -[NSDictionary mutableCopy](v14, "mutableCopy");

      if (v9) {
        [v15 setObject:v9 forKeyedSubscript:kSecAttrAccessGroup];
      }
      if (v11)
      {
        id v16 = [v11 objectForKeyedSubscript:@"UseSystemKeychainSharediPadOnly"];
        id v17 = isNSNumber(v16);

        if (v17)
        {
          id v18 = [v11 objectForKeyedSubscript:@"UseSystemKeychainSharediPadOnly"];
          [v15 setObject:v18 forKeyedSubscript:kSecUseSystemKeychain];
        }
      }

      uint64_t v19 = SecItemAdd((CFDictionaryRef)v15, 0LL);
      if (!(_DWORD)v19)
      {
        uint64_t v21 = 1LL;
        goto LABEL_17;
      }

      int v20 =  createMobileActivationError( (uint64_t)"store_identity",  206LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to add identity to keychain: %d",  v19);
    }

    else
    {
      int v20 =  createMobileActivationError( (uint64_t)"store_identity",  176LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v13,  @"Failed to delete existing identity.");

      id v15 = 0LL;
    }

    id v13 = v20;
    if (!a5) {
      goto LABEL_15;
    }
  }

  else
  {
    id v13 =  createMobileActivationError( (uint64_t)"store_identity",  171LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    id v15 = 0LL;
    if (!a5)
    {
LABEL_15:
      uint64_t v21 = 0LL;
      goto LABEL_17;
    }
  }

  id v13 = v13;
  uint64_t v21 = 0LL;
  *a5 = v13;
LABEL_17:

  return v21;
}

uint64_t load_certificate(CFTypeRef *a1, id a2, void *a3, int *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = v10;
  CFTypeRef result = 0LL;
  if (!v10)
  {
    id v16 =  createMobileActivationError( (uint64_t)"load_certificate",  231LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid inputs.");
    uint64_t v17 = 0LL;
    id v13 = 0LL;
    int v15 = -1;
    if (!a4) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  v21[0] = kSecAttrLabel;
  v21[1] = kSecClass;
  v22[0] = v10;
  v22[1] = kSecClassCertificate;
  v21[2] = kSecReturnRef;
  v21[3] = kSecUseDataProtectionKeychain;
  v22[2] = &__kCFBooleanTrue;
  v22[3] = &__kCFBooleanTrue;
  char v12 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v22,  v21,  4LL);
  id v13 = -[NSDictionary mutableCopy](v12, "mutableCopy");

  if (v9) {
    [v13 setObject:v9 forKeyedSubscript:kSecAttrAccessGroup];
  }
  uint64_t v14 = SecItemCopyMatching((CFDictionaryRef)v13, &result);
  if ((_DWORD)v14)
  {
    int v15 = v14;
    id v16 =  createMobileActivationError( (uint64_t)"load_certificate",  253LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy certificate (%@): %d",  v11,  v14);
    uint64_t v17 = 0LL;
    if (!a4) {
      goto LABEL_9;
    }
LABEL_8:
    *a4 = v15;
    goto LABEL_9;
  }

  int v15 = 0;
  id v16 = 0LL;
  if (a1) {
    *a1 = CFRetain(result);
  }
  uint64_t v17 = 1LL;
  if (a4) {
    goto LABEL_8;
  }
LABEL_9:
  if (a5) {
    char v18 = v17;
  }
  else {
    char v18 = 1;
  }
  if ((v18 & 1) == 0) {
    *a5 = v16;
  }
  if (result) {
    CFRelease(result);
  }
  CFTypeRef result = 0LL;

  return v17;
}

uint64_t delete_certificate(void *a1, void *a2, NSError **a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = v6;
  if (!v6)
  {
    id v11 =  createMobileActivationError( (uint64_t)"delete_certificate",  287LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    id v9 = 0LL;
    if (!a3) {
      goto LABEL_7;
    }
    goto LABEL_9;
  }

  v14[0] = kSecAttrLabel;
  v14[1] = kSecClass;
  v15[0] = v6;
  v15[1] = kSecClassCertificate;
  void v14[2] = kSecReturnRef;
  void v14[3] = kSecUseDataProtectionKeychain;
  void v15[2] = &__kCFBooleanTrue;
  void v15[3] = &__kCFBooleanTrue;
  id v8 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v15,  v14,  4LL);
  id v9 = -[NSDictionary mutableCopy](v8, "mutableCopy");

  if (v5) {
    [v9 setObject:v5 forKeyedSubscript:kSecAttrAccessGroup];
  }
  uint64_t v10 = SecItemDelete((CFDictionaryRef)v9);
  id v11 = 0LL;
  uint64_t v12 = 1LL;
  if ((_DWORD)v10 != -25300 && (_DWORD)v10)
  {
    id v11 =  createMobileActivationError( (uint64_t)"delete_certificate",  309LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to remove existing certificate (%@): %d",  v7,  v10);
    if (!a3)
    {
LABEL_7:
      uint64_t v12 = 0LL;
      goto LABEL_10;
    }

uint64_t store_certificate(uint64_t a1, id a2, void *a3, int a4, NSError **a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = v10;
  CFTypeRef result = 0LL;
  if (!a1 || !v10)
  {
    id v13 =  createMobileActivationError( (uint64_t)"store_certificate",  334LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
LABEL_11:
    id v15 = 0LL;
    if (!a5)
    {
LABEL_19:
      uint64_t v19 = 0LL;
      goto LABEL_20;
    }

uint64_t update_certificate(void *a1, void *a2, void *a3, NSError **a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = v9;
  if (v8 && v9)
  {
    v17[0] = kSecAttrLabel;
    v17[1] = kSecClass;
    v18[0] = v8;
    v18[1] = kSecClassCertificate;
    v17[2] = kSecUseDataProtectionKeychain;
    v18[2] = &__kCFBooleanTrue;
    id v11 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v18,  v17,  3LL);
    id v12 = -[NSDictionary mutableCopy](v11, "mutableCopy");

    if (v7) {
      [v12 setObject:v7 forKeyedSubscript:kSecAttrAccessGroup];
    }
    uint64_t v13 = SecItemUpdate((CFDictionaryRef)v12, v10);
    if (!(_DWORD)v13)
    {
      uint64_t v14 = 0LL;
      uint64_t v15 = 1LL;
      goto LABEL_11;
    }

    uint64_t v14 =  createMobileActivationError( (uint64_t)"update_certificate",  440LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to update %@ in keychain: %d",  v8,  v13);
    if (!a4) {
      goto LABEL_7;
    }
LABEL_9:
    uint64_t v14 = v14;
    uint64_t v15 = 0LL;
    *a4 = v14;
    goto LABEL_11;
  }

  uint64_t v14 =  createMobileActivationError( (uint64_t)"update_certificate",  419LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
  id v12 = 0LL;
  if (a4) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v15 = 0LL;
LABEL_11:

  return v15;
}

uint64_t store_pem_as_identity(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  if (v11 && v12 && v14)
  {
    id v23 = 0LL;
    uint64_t v16 = (const void *)lockcrypto_identity_from_pem_data(v12, v11, &v23);
    id v17 = v23;
    char v18 = v17;
    if (v16)
    {
      id v22 = v17;
      uint64_t v19 = store_identity((uint64_t)v16, v13, v14, v15, (NSError **)&v22);
      uint64_t v20 = (NSError *)v22;

      if (!a6) {
        goto LABEL_12;
      }
      goto LABEL_10;
    }

    uint64_t v20 =  createMobileActivationError( (uint64_t)"store_pem_as_identity",  469LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v17,  @"Failed to create identity from pem data");
  }

  else
  {
    uint64_t v20 =  createMobileActivationError( (uint64_t)"store_pem_as_identity",  463LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid inputs.");
    uint64_t v16 = 0LL;
  }

  uint64_t v19 = 0LL;
  if (!a6) {
    goto LABEL_12;
  }
LABEL_10:
  if ((v19 & 1) == 0) {
    *a6 = v20;
  }
LABEL_12:
  if (v16) {
    CFRelease(v16);
  }

  return v19;
}

uint64_t store_pem_as_certificate(void *a1, void *a2, void *a3, int a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = v11;
  if (!v9 || !v11)
  {
    id v17 =  createMobileActivationError( (uint64_t)"store_pem_as_certificate",  499LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid inputs.");
    SecCertificateRef v13 = 0LL;
    if (!a5) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }

  id v23 = 0LL;
  SecCertificateRef v13 = lockcrypto_cert_from_pem_data(v9, (NSError **)&v23);
  id v14 = v23;
  id v15 = v14;
  if (!v13)
  {
    id v17 =  createMobileActivationError( (uint64_t)"store_pem_as_certificate",  505LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v14,  @"Failed to create certificate from pem data.");

    if (!a5) {
      goto LABEL_12;
    }
LABEL_11:
    *a5 = v17;
    goto LABEL_12;
  }

  id v22 = v14;
  char v16 = store_certificate((uint64_t)v13, v10, v12, a4, (NSError **)&v22);
  id v17 = (NSError *)v22;

  if ((v16 & 1) != 0)
  {
    uint64_t v18 = 1LL;
LABEL_13:
    CFRelease(v13);
    uint64_t v20 = v18;
    goto LABEL_14;
  }

  uint64_t v19 =  createMobileActivationError( (uint64_t)"store_pem_as_certificate",  511LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v17,  @"Failed to store certificate.");

  id v17 = v19;
  if (a5) {
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v18 = 0LL;
  uint64_t v20 = 0LL;
  if (v13) {
    goto LABEL_13;
  }
LABEL_14:

  return v20;
}

CFTypeRef copy_keychain_item(void *a1, void *a2, void *a3, int *a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = v11;
  CFTypeRef result = 0LL;
  if (!v10)
  {
    uint64_t v18 =  createMobileActivationError( (uint64_t)"copy_keychain_item",  542LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    CFTypeRef v19 = 0LL;
    int v20 = -1;
    if (!a4) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }

  uint64_t v28 = a5;
  if (v11)
  {
    id v13 = [v11 objectForKeyedSubscript:@"LocalAuthenticationContext"];
    if (v13)
    {
      id v14 = [v12 objectForKeyedSubscript:@"LocalAuthenticationContext"];
      id LAContextClass = getLAContextClass();
      uint64_t v16 = objc_opt_class(LAContextClass);
      char isKindOfClass = objc_opt_isKindOfClass(v14, v16);

      if ((isKindOfClass & 1) != 0) {
        id v13 = [v12 objectForKeyedSubscript:@"LocalAuthenticationContext"];
      }
      else {
        id v13 = 0LL;
      }
    }

    id v21 = [v12 objectForKeyedSubscript:@"UseAuthenticationUI"];
    id v22 = isNSString(v21);

    if (v22)
    {
      id v23 = [v12 objectForKeyedSubscript:@"UseAuthenticationUI"];
      goto LABEL_13;
    }
  }

  else
  {
    id v13 = 0LL;
  }

  id v23 = 0LL;
LABEL_13:
  v30[0] = kSecAttrLabel;
  v30[1] = kSecClass;
  v31[0] = v10;
  v31[1] = kSecClassKey;
  v30[2] = kSecReturnRef;
  v30[3] = kSecUseDataProtectionKeychain;
  v31[2] = &__kCFBooleanTrue;
  v31[3] = &__kCFBooleanTrue;
  id v24 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v31,  v30,  4LL);
  id v25 = -[NSDictionary mutableCopy](v24, "mutableCopy");

  if (v9) {
    [v25 setObject:v9 forKeyedSubscript:kSecAttrAccessGroup];
  }
  if (v13) {
    [v25 setObject:v13 forKeyedSubscript:kSecUseAuthenticationContext];
  }
  if (v23) {
    [v25 setObject:v23 forKeyedSubscript:kSecUseAuthenticationUI];
  }
  uint64_t v26 = SecItemCopyMatching((CFDictionaryRef)v25, &result);
  int v20 = v26;
  if ((_DWORD)v26)
  {
    uint64_t v18 =  createMobileActivationError( (uint64_t)"copy_keychain_item",  586LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy keychain item %@: %d",  v10,  v26);

    CFTypeRef v19 = 0LL;
  }

  else
  {
    CFTypeRef v19 = result;
    CFTypeRef result = 0LL;

    uint64_t v18 = 0LL;
  }

  a5 = v28;
  if (a4) {
LABEL_23:
  }
    *a4 = v20;
LABEL_24:
  if (a5 && !v19) {
    *a5 = v18;
  }
  if (result) {
    CFRelease(result);
  }
  CFTypeRef result = 0LL;

  return v19;
}

id getLAContextClass()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)getLAContextClass_softClass;
  uint64_t v7 = getLAContextClass_softClass;
  if (!getLAContextClass_softClass)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3254779904LL;
    v3[2] = __getLAContextClass_block_invoke;
    v3[3] = &__block_descriptor_40_e8_32r_e5_v8__0l;
    v3[4] = &v4;
    __getLAContextClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10003F874( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t delete_keychain_item(void *a1, void *a2, NSError **a3)
{
  id v5 = a1;
  id v6 = a2;
  uint64_t v7 = v6;
  if (!v6)
  {
    id v13 =  createMobileActivationError( (uint64_t)"delete_keychain_item",  617LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
    id v9 = 0LL;
    if (!a3)
    {
LABEL_13:
      uint64_t v12 = 0LL;
      goto LABEL_14;
    }

    goto LABEL_11;
  }

  v15[0] = kSecAttrLabel;
  v15[1] = kSecClass;
  v16[0] = v6;
  v16[1] = kSecClassKey;
  void v15[2] = kSecUseDataProtectionKeychain;
  v16[2] = &__kCFBooleanTrue;
  id v8 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v16,  v15,  3LL);
  id v9 = -[NSDictionary mutableCopy](v8, "mutableCopy");

  if (v5) {
    [v9 setObject:v5 forKeyedSubscript:kSecAttrAccessGroup];
  }
  uint64_t v10 = SecItemDelete((CFDictionaryRef)v9);
  if ((_DWORD)v10 != -25300 && (_DWORD)v10 != 0)
  {
    id v13 =  createMobileActivationError( (uint64_t)"delete_keychain_item",  638LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to remove existing keychain item %@: %d",  v7,  v10);
    if (!a3) {
      goto LABEL_13;
    }
LABEL_11:
    id v13 = v13;
    uint64_t v12 = 0LL;
    *a3 = v13;
    goto LABEL_14;
  }

  id v13 = 0LL;
  uint64_t v12 = 1LL;
LABEL_14:

  return v12;
}

uint64_t store_keychain_item(uint64_t a1, id a2, void *a3, void *a4, NSError **a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  uint64_t v12 = v11;
  if (a1 && v10)
  {
    if (v11)
    {
      id v13 = [v11 objectForKeyedSubscript:@"LocalAuthenticationContext"];
      if (v13
        && (id v14 = v13,
            id v15 = [v12 objectForKeyedSubscript:@"LocalAuthenticationContext"],
            id LAContextClass = getLAContextClass(),
            uint64_t v17 = objc_opt_class(LAContextClass),
            char isKindOfClass = objc_opt_isKindOfClass(v15, v17),
            v15,
            v14,
            (isKindOfClass & 1) != 0))
      {
        id v19 = [v12 objectForKeyedSubscript:@"LocalAuthenticationContext"];
      }

      else
      {
        id v19 = 0LL;
      }

      id v24 = [v12 objectForKeyedSubscript:@"UseAuthenticationUI"];
      id v25 = isNSString(v24);

      if (v25)
      {
        id v22 = [v12 objectForKeyedSubscript:@"UseAuthenticationUI"];
        goto LABEL_14;
      }
    }

    else
    {
      id v19 = 0LL;
    }

    id v22 = 0LL;
LABEL_14:
    id v31 = 0LL;
    char v26 = delete_keychain_item(v9, v10, (NSError **)&v31);
    int v20 = (NSError *)v31;
    if ((v26 & 1) != 0)
    {
      v32[0] = kSecAttrLabel;
      v32[1] = kSecClass;
      v33[0] = v10;
      v33[1] = kSecClassKey;
      v32[2] = kSecValueRef;
      void v32[3] = kSecUseDataProtectionKeychain;
      v33[2] = a1;
      v33[3] = &__kCFBooleanTrue;
      v32[4] = kSecAttrAccessible;
      void v33[4] = kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
      id v27 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v33,  v32,  5LL);
      id v21 = -[NSDictionary mutableCopy](v27, "mutableCopy");

      if (v9) {
        [v21 setObject:v9 forKeyedSubscript:kSecAttrAccessGroup];
      }
      if (v19) {
        [v21 setObject:v19 forKeyedSubscript:kSecUseAuthenticationContext];
      }
      if (v22) {
        [v21 setObject:v22 forKeyedSubscript:kSecUseAuthenticationUI];
      }
      uint64_t v28 = SecItemAdd((CFDictionaryRef)v21, 0LL);
      if (!(_DWORD)v28)
      {
        uint64_t v23 = 1LL;
        goto LABEL_27;
      }

      unsigned int v29 =  createMobileActivationError( (uint64_t)"store_keychain_item",  717LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to add %@ to keychain: %d",  v10,  v28);
    }

    else
    {
      unsigned int v29 =  createMobileActivationError( (uint64_t)"store_keychain_item",  684LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v20,  @"Failed to delete existing keychain item.");

      id v21 = 0LL;
    }

    int v20 = v29;
    if (!a5) {
      goto LABEL_25;
    }
    goto LABEL_8;
  }

  int v20 =  createMobileActivationError( (uint64_t)"store_keychain_item",  667LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
  id v21 = 0LL;
  id v19 = 0LL;
  id v22 = 0LL;
  if (!a5)
  {
LABEL_25:
    uint64_t v23 = 0LL;
    goto LABEL_27;
  }

uint64_t update_keychain_item(void *a1, void *a2, void *a3, NSError **a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = v9;
  if (v8 && v9)
  {
    v17[0] = kSecAttrLabel;
    v17[1] = kSecClass;
    v18[0] = v8;
    v18[1] = kSecClassKey;
    v17[2] = kSecUseDataProtectionKeychain;
    v18[2] = &__kCFBooleanTrue;
    id v11 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v18,  v17,  3LL);
    id v12 = -[NSDictionary mutableCopy](v11, "mutableCopy");

    if (v7) {
      [v12 setObject:v7 forKeyedSubscript:kSecAttrAccessGroup];
    }
    uint64_t v13 = SecItemUpdate((CFDictionaryRef)v12, v10);
    if (!(_DWORD)v13)
    {
      id v14 = 0LL;
      uint64_t v15 = 1LL;
      goto LABEL_11;
    }

    id v14 =  createMobileActivationError( (uint64_t)"update_keychain_item",  763LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to update %@ in keychain: %d",  v8,  v13);
    if (!a4) {
      goto LABEL_7;
    }
LABEL_9:
    id v14 = v14;
    uint64_t v15 = 0LL;
    *a4 = v14;
    goto LABEL_11;
  }

  id v14 =  createMobileActivationError( (uint64_t)"update_keychain_item",  742LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
  id v12 = 0LL;
  if (a4) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v15 = 0LL;
LABEL_11:

  return v15;
}

id copy_keychain_data(void *a1, void *a2, int *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = v8;
  CFTypeRef result = 0LL;
  if (v8)
  {
    v19[0] = kSecAttrLabel;
    v19[1] = kSecClass;
    v20[0] = v8;
    v20[1] = kSecClassGenericPassword;
    v19[2] = kSecReturnData;
    v19[3] = kSecUseDataProtectionKeychain;
    v20[2] = &__kCFBooleanTrue;
    void v20[3] = &__kCFBooleanTrue;
    id v10 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v20,  v19,  4LL);
    id v11 = -[NSDictionary mutableCopy](v10, "mutableCopy");

    if (v7) {
      [v11 setObject:v7 forKeyedSubscript:kSecAttrAccessGroup];
    }
    uint64_t v12 = SecItemCopyMatching((CFDictionaryRef)v11, &result);
    int v13 = v12;
    if ((_DWORD)v12)
    {
      id v14 =  createMobileActivationError( (uint64_t)"copy_keychain_data",  810LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy keychain item %@: %d",  v9,  v12);
      uint64_t v15 = 0LL;
      if (!a3) {
        goto LABEL_9;
      }
    }

    else
    {
      id v14 = 0LL;
      uint64_t v15 = (void *)result;
      CFTypeRef result = 0LL;
      if (!a3) {
        goto LABEL_9;
      }
    }

    goto LABEL_8;
  }

  id v14 =  createMobileActivationError( (uint64_t)"copy_keychain_data",  788LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
  uint64_t v15 = 0LL;
  id v11 = 0LL;
  int v13 = -1;
  if (a3) {
LABEL_8:
  }
    *a3 = v13;
LABEL_9:
  if (a4 && !v15) {
    *a4 = v14;
  }
  if (result) {
    CFRelease(result);
  }
  CFTypeRef result = 0LL;
  id v16 = v15;

  return v16;
}

uint64_t delete_keychain_data(void *a1, void *a2, NSError **a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = v6;
  if (!v6)
  {
    int v13 =  createMobileActivationError( (uint64_t)"delete_keychain_data",  841LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
    id v9 = 0LL;
    if (!a3)
    {
LABEL_13:
      uint64_t v12 = 0LL;
      goto LABEL_14;
    }

    goto LABEL_11;
  }

  v15[0] = kSecAttrLabel;
  v15[1] = kSecClass;
  v16[0] = v6;
  v16[1] = kSecClassGenericPassword;
  void v15[2] = kSecUseDataProtectionKeychain;
  v16[2] = &__kCFBooleanTrue;
  id v8 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v16,  v15,  3LL);
  id v9 = -[NSDictionary mutableCopy](v8, "mutableCopy");

  if (v5) {
    [v9 setObject:v5 forKeyedSubscript:kSecAttrAccessGroup];
  }
  uint64_t v10 = SecItemDelete((CFDictionaryRef)v9);
  if ((_DWORD)v10 != -25300 && (_DWORD)v10 != 0)
  {
    int v13 =  createMobileActivationError( (uint64_t)"delete_keychain_data",  862LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to remove existing keychain item %@: %d",  v7,  v10);
    if (!a3) {
      goto LABEL_13;
    }
LABEL_11:
    int v13 = v13;
    uint64_t v12 = 0LL;
    *a3 = v13;
    goto LABEL_14;
  }

  int v13 = 0LL;
  uint64_t v12 = 1LL;
LABEL_14:

  return v12;
}

uint64_t store_keychain_data(void *a1, void *a2, void *a3, NSError **a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  uint64_t v10 = v9;
  if (v7 && v9)
  {
    id v19 = 0LL;
    char v11 = delete_keychain_data(v8, v9, (NSError **)&v19);
    uint64_t v12 = (NSError *)v19;
    if ((v11 & 1) != 0)
    {
      v20[0] = kSecAttrLabel;
      v20[1] = kSecClass;
      v21[0] = v10;
      v21[1] = kSecClassGenericPassword;
      v20[2] = kSecValueData;
      void v20[3] = kSecUseDataProtectionKeychain;
      v21[2] = v7;
      v21[3] = &__kCFBooleanTrue;
      void v20[4] = kSecAttrService;
      v20[5] = kSecAttrAccount;
      void v21[4] = @"com.apple.mobileactivationd";
      v21[5] = v10;
      v20[6] = kSecAttrAccessible;
      v21[6] = kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
      int v13 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v21,  v20,  7LL);
      id v14 = -[NSDictionary mutableCopy](v13, "mutableCopy");

      if (v8) {
        [v14 setObject:v8 forKeyedSubscript:kSecAttrAccessGroup];
      }
      uint64_t v15 = SecItemAdd((CFDictionaryRef)v14, 0LL);
      if (!(_DWORD)v15)
      {
        uint64_t v17 = 1LL;
        goto LABEL_14;
      }

      id v16 =  createMobileActivationError( (uint64_t)"store_keychain_data",  920LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to add %@ to keychain: %d",  v10,  v15);
    }

    else
    {
      id v16 =  createMobileActivationError( (uint64_t)"store_keychain_data",  892LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v12,  @"Failed to delete existing keychain item.");

      id v14 = 0LL;
    }

    uint64_t v12 = v16;
    if (!a4) {
      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v12 =  createMobileActivationError( (uint64_t)"store_keychain_data",  887LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
    id v14 = 0LL;
    if (!a4)
    {
LABEL_12:
      uint64_t v17 = 0LL;
      goto LABEL_14;
    }
  }

  uint64_t v12 = v12;
  uint64_t v17 = 0LL;
  *a4 = v12;
LABEL_14:

  return v17;
}

uint64_t update_keychain_data(void *a1, void *a2, void *a3, NSError **a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  if (v8)
  {
    v16[0] = kSecAttrLabel;
    v16[1] = kSecClass;
    v17[0] = v8;
    v17[1] = kSecClassGenericPassword;
    v16[2] = kSecUseDataProtectionKeychain;
    void v16[3] = kSecAttrService;
    v17[2] = &__kCFBooleanTrue;
    void v17[3] = @"com.apple.mobileactivationd";
    void v16[4] = kSecAttrAccount;
    v17[4] = v8;
    uint64_t v10 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v17,  v16,  5LL);
    id v11 = -[NSDictionary mutableCopy](v10, "mutableCopy");

    if (v7) {
      [v11 setObject:v7 forKeyedSubscript:kSecAttrAccessGroup];
    }
    uint64_t v12 = SecItemUpdate((CFDictionaryRef)v11, v9);
    if (!(_DWORD)v12)
    {
      int v13 = 0LL;
      uint64_t v14 = 1LL;
      goto LABEL_10;
    }

    int v13 =  createMobileActivationError( (uint64_t)"update_keychain_data",  968LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to update %@ in keychain: %d",  v8,  v12);
    if (a4) {
      goto LABEL_6;
    }
LABEL_8:
    uint64_t v14 = 0LL;
    goto LABEL_10;
  }

  int v13 =  createMobileActivationError( (uint64_t)"update_keychain_data",  945LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
  id v11 = 0LL;
  if (!a4) {
    goto LABEL_8;
  }
LABEL_6:
  int v13 = v13;
  uint64_t v14 = 0LL;
  *a4 = v13;
LABEL_10:

  return v14;
}

Class __getLAContextClass_block_invoke(uint64_t a1)
{
  id v3 = 0LL;
  if (!LocalAuthenticationLibraryCore_frameworkLibrary)
  {
    __int128 v4 = off_100255CA0;
    uint64_t v5 = 0LL;
    LocalAuthenticationLibraryCore_frameworkLibrary = _sl_dlopen(&v4, &v3);
  }

  if (!LocalAuthenticationLibraryCore_frameworkLibrary) {
    __getLAContextClass_block_invoke_cold_1(&v3);
  }
  if (v3) {
    free(v3);
  }
  Class result = objc_getClass("LAContext");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    __getLAContextClass_block_invoke_cold_2();
  }
  getLAContextClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

void sub_100040B68(_Unwind_Exception *a1)
{
}

BOOL networkReachable()
{
  uint64_t v0 = +[NetworkProvider sharedInstance](&OBJC_CLASS___NetworkProvider, "sharedInstance");
  id v1 = v0;
  if (v0)
  {
    BOOL v2 = -[NetworkProvider networkReachable](v0, "networkReachable");
  }

  else
  {

    BOOL v2 = 0LL;
  }

  return v2;
}

NSSet *copy_unsupported_virtual_machine_oids()
{
  return +[NSSet setWithObjects:](&OBJC_CLASS___NSSet, "setWithObjects:", @"1.2.840.113635.100.10.1", 0LL);
}

NSArray *copy_required_dcrt_oids()
{
  v1[0] = @"1.2.840.113635.100.8.4";
  v1[1] = @"1.2.840.113635.100.8.12";
  v1[2] = @"1.2.840.113635.100.8.5";
  v1[3] = @"1.2.840.113635.100.8.7";
  return +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v1, 4LL);
}

NSArray *copy_critical_dcrt_oids()
{
  v1[0] = @"1.2.840.113635.100.8.4";
  v1[1] = @"1.2.840.113635.100.8.5";
  return +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v1, 2LL);
}

id client_requires_critical_dcrt_oids(uint64_t a1)
{
  return [&off_10026DAE8 containsObject:a1];
}

NSSet *copy_supported_eda_oids()
{
  return +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  @"1.2.840.113635.100.8.9.1",  @"1.2.840.113635.100.8.9.2",  @"1.2.840.113635.100.8.10.1",  @"1.2.840.113635.100.8.10.2",  @"1.2.840.113635.100.8.10.3",  @"1.2.840.113635.100.8.11.1",  @"1.2.840.113635.100.8.13.1",  @"1.2.840.113635.100.8.13.2",  @"1.2.840.113635.100.8.13.3",  @"1.2.840.113635.100.8.13.4",  @"1.2.840.113635.100.8.9.3",  @"1.2.840.113635.100.8.9.4",  0LL);
}

NSMutableSet *copy_supported_baa_oids()
{
  uint64_t v0 =  +[NSMutableSet setWithObjects:]( &OBJC_CLASS___NSMutableSet,  "setWithObjects:",  @"1.2.840.113635.100.10.1",  @"1.2.840.113635.100.10.2",  @"1.2.840.113635.100.8.1",  @"1.2.840.113635.100.8.2",  @"1.2.840.113635.100.8.3",  @"1.2.840.113635.100.8.4",  @"1.2.840.113635.100.8.5",  @"1.2.840.113635.100.8.6",  @"1.2.840.113635.100.8.7",  @"1.2.840.113635.100.8.12",  @"1.2.840.113635.100.6.71.1",  @"1.2.840.113635.100.6.71.2",  @"1.2.840.113635.100.6.71.3",  @"1.2.840.113635.100.8.9.4",  @"1.2.840.113635.100.8.10.4",  0LL);
  if (is_virtual_machine())
  {
    id v1 = +[NSSet setWithObjects:](&OBJC_CLASS___NSSet, "setWithObjects:", @"1.2.840.113635.100.10.1", 0LL);
    -[NSMutableSet minusSet:](v0, "minusSet:", v1);
  }

  return v0;
}

CFTypeRef createReferenceKeyBlob(const void *a1, char a2, id a3, void *a4)
{
  id v7 = a3;
  id v8 = (id)kSecAttrKeyTypeECSECPrimeRandom;
  CFErrorRef error = 0LL;
  if (v7
    && (id v9 = [v7 objectForKeyedSubscript:@"KeySizeInBits"],
        id v10 = isNSNumber(v9),
        v10,
        v9,
        v10))
  {
    id v11 = (_UNKNOWN **)[v7 objectForKeyedSubscript:@"KeySizeInBits"];
    if (([v11 isEqualToNumber:&off_10026D5C0] & 1) == 0
      && ([v11 isEqualToNumber:&off_10026D5D8] & 1) == 0)
    {
      uint64_t v12 =  createMobileActivationError( (uint64_t)"createReferenceKeyBlob",  73LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid value for option (%@): unsupported size (%@)",  @"KeySizeInBits",  v11);
      id v13 = 0LL;
LABEL_19:
      id v21 = 0LL;
      CFTypeRef v22 = 0LL;
      SecKeyRef v23 = 0LL;
      uint64_t v17 = 0LL;
      goto LABEL_30;
    }
  }

  else
  {
    id v11 = &off_10026D5C0;
  }

  id v14 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v13 = [v14 copyAnswer:@"HasPKA"];

  id v15 = isNSNumber(v13);
  if (!v15)
  {
    uint64_t v12 =  createMobileActivationError( (uint64_t)"createReferenceKeyBlob",  84LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve PKA state.");
    goto LABEL_19;
  }

  if ([v13 BOOLValue] && (a2 & 1) == 0)
  {
    id v16 = (__CFString *)kSecAttrKeyTypeECSECPrimeRandomPKA;

    id v8 = v16;
  }

  if (!a1 || (uint64_t v17 = CFRetain(a1)) == 0LL)
  {
    if ((isRunningInRecovery() & 1) != 0 || isRunningInDiagnosticsMode())
    {
      uint64_t v18 = SecAccessControlCreate(0LL, &error);
      uint64_t v17 = (const void *)v18;
      if (!v18)
      {
        MobileActivationError = createMobileActivationError( (uint64_t)"createReferenceKeyBlob",  104LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to create access control.");
        goto LABEL_28;
      }

      uint64_t v19 = kSecAttrAccessibleUntilReboot;
      if ((SecAccessControlSetProtection(v18, kSecAttrAccessibleUntilReboot, &error) & 1) == 0)
      {
        MobileActivationError = createMobileActivationError( (uint64_t)"createReferenceKeyBlob",  109LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to set ACL protection to %@.",  v19);
LABEL_28:
        uint64_t v12 = MobileActivationError;
        id v21 = 0LL;
        goto LABEL_29;
      }
    }

    else
    {
      uint64_t v17 = SecAccessControlCreateWithFlags( 0LL,  kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly,  0x40000000uLL,  &error);
      if (!v17)
      {
        MobileActivationError = createMobileActivationError( (uint64_t)"createReferenceKeyBlob",  115LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to create access control (%@).",  kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate);
        goto LABEL_28;
      }
    }
  }

  id v24 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v21 = v24;
  if (!v24)
  {
    uint64_t v12 =  createMobileActivationError( (uint64_t)"createReferenceKeyBlob",  123LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to alloc dictionary.");
LABEL_29:
    CFTypeRef v22 = 0LL;
    SecKeyRef v23 = 0LL;
    goto LABEL_30;
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:]( v24,  "setObject:forKeyedSubscript:",  &__kCFBooleanFalse,  kSecAttrIsPermanent);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v21,  "setObject:forKeyedSubscript:",  kSecAttrTokenIDAppleKeyStore,  kSecAttrTokenID);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v21, "setObject:forKeyedSubscript:", v8, kSecAttrKeyType);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v21, "setObject:forKeyedSubscript:", v17, kSecAttrAccessControl);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v21, "setObject:forKeyedSubscript:", v11, kSecAttrKeySizeInBits);
  SecKeyRef v25 = SecKeyCreateRandomKey((CFDictionaryRef)v21, &error);
  SecKeyRef v23 = v25;
  if (v25)
  {
    CFTypeRef v22 = CFRetain(v25);
    uint64_t v12 = 0LL;
  }

  else
  {
    uint64_t v12 =  createMobileActivationError( (uint64_t)"createReferenceKeyBlob",  141LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to create ref key.");
    CFTypeRef v22 = 0LL;
  }

LABEL_30:
  if (a4 && !v22) {
    *a4 = v12;
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (error) {
    CFRelease(error);
  }

  return v22;
}

  __int128 v35 = [v9 objectForKeyedSubscript:@"scrtAttestation"];
  unsigned int v36 = isNSNumber(v35);

  if (v36)
  {
    BOOL v37 = [v9 objectForKeyedSubscript:@"scrtAttestation"];
    id v38 = [v37 BOOLValue];

    goto LABEL_33;
  }

                      __break(0x5519u);
                      goto LABEL_31;
                    }

NSMutableDictionary *create_baa_info(__SecKey *a1, id a2, void *a3)
{
  id v3 = a2;
  CFErrorRef error = 0LL;
  __int128 v4 = objc_alloc(&OBJC_CLASS___NSMutableArray);
  v230[0] = @"1.2.840.113635.100.8.4";
  v230[1] = @"1.2.840.113635.100.8.5";
  v230[2] = @"1.2.840.113635.100.8.7";
  uint64_t v5 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v230, 3LL);
  id v6 = -[NSMutableArray initWithArray:](v4, "initWithArray:", v5);

  v201 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 0LL);
  if (!v3)
  {
    int v20 = 0;
    unsigned int v209 = 0;
    id v14 = 0LL;
    CFDataRef v206 = 0LL;
    id v199 = 0LL;
    SecKeyRef v23 = 0LL;
    id v24 = 0LL;
    id v195 = 0LL;
    id v196 = 0LL;
    id v197 = 0LL;
    __int128 v187 = 0LL;
    __int128 v188 = 0LL;
    id v193 = 0LL;
    id v194 = 0LL;
    unsigned int v25 = 0;
    char v26 = 1;
    id v27 = (NSNumber *)&off_10026D608;
    v191 = (NSNumber *)&off_10026D608;
    v192 = (NSNumber *)&off_10026D5F0;
    goto LABEL_24;
  }

  id v7 = [v3 objectForKeyedSubscript:@"OIDSToInclude"];
  id v8 = isNSArray(v7);

  if (v8)
  {
    v207 = v6;
    __int128 v224 = 0u;
    __int128 v225 = 0u;
    __int128 v222 = 0u;
    __int128 v223 = 0u;
    id v9 = [v3 objectForKeyedSubscript:@"OIDSToInclude"];
    id v10 = [v9 countByEnumeratingWithState:&v222 objects:v229 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v223;
      while (2)
      {
        for (i = 0LL; i != v11; i = (char *)i + 1)
        {
          if (*(void *)v223 != v12) {
            objc_enumerationMutation(v9);
          }

          if (!v14)
          {
            id v34 = [v3 objectForKeyedSubscript:@"OIDSToInclude"];
            v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  244LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid options (%@): %@",  @"OIDSToInclude",  v34);

            goto LABEL_28;
          }
        }

        id v11 = [v9 countByEnumeratingWithState:&v222 objects:v229 count:16];
        if (v11) {
          continue;
        }
        break;
      }
    }

    id v15 = objc_alloc(&OBJC_CLASS___NSMutableArray);
    id v16 = [v3 objectForKeyedSubscript:@"OIDSToInclude"];
    id v6 = -[NSMutableArray initWithArray:](v15, "initWithArray:", v16);

    if (is_virtual_machine())
    {
      uint64_t v17 = copy_unsupported_virtual_machine_oids();
      uint64_t v18 = -[NSSet allObjects](v17, "allObjects");
      -[NSMutableArray removeObjectsInArray:](v6, "removeObjectsInArray:", v18);
    }
  }

  if ((-[NSMutableArray containsObject:](v6, "containsObject:", @"1.2.840.113635.100.8.1") & 1) != 0
    || (-[NSMutableArray containsObject:](v6, "containsObject:", @"1.2.840.113635.100.8.7") & 1) != 0
    || (-[NSMutableArray containsObject:](v6, "containsObject:", @"1.2.840.113635.100.8.10.1") & 1) != 0
    || (-[NSMutableArray containsObject:](v6, "containsObject:", @"1.2.840.113635.100.8.10.2") & 1) != 0
    || -[NSMutableArray containsObject:](v6, "containsObject:", @"1.2.840.113635.100.8.10.3"))
  {
    unsigned int v19 = -[NSMutableArray containsObject:](v6, "containsObject:", @"1.2.840.113635.100.8.1");
    int v20 = 1;
  }

  else
  {
    int v20 = 0;
    unsigned int v19 = 0;
  }

  v207 = v6;
  if ((-[NSMutableArray containsObject:](v6, "containsObject:", @"1.2.840.113635.100.8.2") & 1) == 0
    && !-[NSMutableArray containsObject:](v6, "containsObject:", @"1.2.840.113635.100.8.11.1"))
  {
    id v204 = 0LL;
LABEL_60:
    id v202 = 0LL;
    goto LABEL_61;
  }

  id v21 = [v3 objectForKeyedSubscript:@"nonce"];
  id v22 = isNSData(v21);
  if (v22)
  {
  }

  else
  {
    unsigned int v49 = v19;
    id v50 = [v3 objectForKeyedSubscript:@"AppSpecificData"];
    id v14 = (NSMutableDictionary *)isNSData(v50);

    if (!v14)
    {
      v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  281LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Missing one of the required options: %@ / %@",  @"nonce",  @"AppSpecificData");
LABEL_28:
      double v30 = 0LL;
      id v193 = 0LL;
      id v194 = 0LL;
      id v204 = 0LL;
      id v205 = 0LL;
      id v196 = 0LL;
      id v197 = 0LL;
      __int128 v187 = 0LL;
      __int128 v188 = 0LL;
      id v195 = 0LL;
      id v202 = 0LL;
      CFDataRef v189 = 0LL;
      id v190 = 0LL;
      id v31 = 0LL;
      id v32 = 0LL;
      uint64_t v33 = 0LL;
      id v28 = 0LL;
      __int128 v35 = 0LL;
      unsigned int v36 = 0LL;
      BOOL v37 = 0LL;
      id v199 = 0LL;
      v200 = 0LL;
      CFDataRef v206 = 0LL;
      CFDataRef v179 = 0LL;
      SecKeyRef keya = 0LL;
      id v186 = 0LL;
      v198 = 0LL;
      goto LABEL_118;
    }

    unsigned int v19 = v49;
  }

  id v51 = [v3 objectForKeyedSubscript:@"nonce"];
  id v52 = [v3 objectForKeyedSubscript:@"AppSpecificData"];
  id v204 = v51;
  if (!v52) {
    goto LABEL_60;
  }
  id v53 = v52;
  id v32 = isNSData(v52);

  id v202 = v53;
  if (!v32)
  {
    v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  290LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid value for option (%@).",  @"AppSpecificData");
    double v30 = 0LL;
    id v193 = 0LL;
    id v194 = 0LL;
    id v205 = 0LL;
    id v196 = 0LL;
    id v197 = 0LL;
LABEL_76:
    __int128 v187 = 0LL;
    __int128 v188 = 0LL;
LABEL_77:
    id v195 = 0LL;
    id v190 = 0LL;
    id v31 = 0LL;
LABEL_116:
    uint64_t v33 = 0LL;
    id v28 = 0LL;
    __int128 v35 = 0LL;
    CFDataRef v189 = 0LL;
    unsigned int v36 = 0LL;
LABEL_117:
    BOOL v37 = 0LL;
    id v199 = 0LL;
    v200 = 0LL;
    CFDataRef v206 = 0LL;
    CFDataRef v179 = 0LL;
    SecKeyRef keya = 0LL;
    id v186 = 0LL;
    v198 = 0LL;
    id v14 = 0LL;
LABEL_118:
    id v48 = 0LL;
LABEL_119:
    id v183 = 0LL;
    uint64_t v203 = (NSNumber *)&off_10026D608;
    v191 = (NSNumber *)&off_10026D608;
    v192 = (NSNumber *)&off_10026D5F0;
    goto LABEL_120;
  }

  if ((unint64_t)[v53 length] >= 0x41)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"create_baa_info",  295,  @"com.apple.MobileActivation.ErrorDomain",  -2,  0,  @"Invalid value for option (%@): unexpected size (%lu)",  @"AppSpecificData",  [v53 length]);
LABEL_112:
    v210 = MobileActivationError;
LABEL_113:
    double v30 = 0LL;
    id v193 = 0LL;
    id v194 = 0LL;
    id v205 = 0LL;
    id v196 = 0LL;
    id v197 = 0LL;
    goto LABEL_114;
  }

LABEL_67:
  id v61 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 1LL);
  unsigned int v62 = -[NSNumber isEqualToNumber:](v58, "isEqualToNumber:", v61);

  v201 = v58;
  if (v62)
  {
    if (!device_supports_mfi_certificates())
    {
      MobileActivationError = createMobileActivationError( (uint64_t)"create_baa_info",  312LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Certificate type not supported on this platform: %@",  v58);
      goto LABEL_112;
    }

    if ((-[NSMutableArray containsObject:](v6, "containsObject:", @"1.2.840.113635.100.6.71.1") & 1) == 0)
    {
      MobileActivationError = createMobileActivationError( (uint64_t)"create_baa_info",  317LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Missing required OID for certificate type (%@): %@",  v58,  @"1.2.840.113635.100.6.71.1");
      goto LABEL_112;
    }
  }

  else if ((-[NSMutableArray containsObject:](v6, "containsObject:", @"1.2.840.113635.100.6.71.1") & 1) != 0 {
         || (-[NSMutableArray containsObject:](v6, "containsObject:", @"1.2.840.113635.100.6.71.2") & 1) != 0
  }
         || -[NSMutableArray containsObject:](v6, "containsObject:", @"1.2.840.113635.100.6.71.3"))
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"create_baa_info",  324LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid OID(s) for requested certificate type: %@",  v58);
    goto LABEL_112;
  }

  if (-[NSMutableArray containsObject:](v6, "containsObject:", @"1.2.840.113635.100.6.71.1")
    && (id v63 = [v3 objectForKeyedSubscript:@"MFiProperties"],
        id v64 = isNSData(v63),
        v64,
        v63,
        v64))
  {
    id v65 = [v3 objectForKeyedSubscript:@"MFiProperties"];
    id v66 = [v65 length];

    if (v66 != (id)32)
    {
      id v121 = [v3 objectForKeyedSubscript:@"MFiProperties"];
      v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  332,  @"com.apple.MobileActivation.ErrorDomain",  -2,  0,  @"Invalid value for option (%@): unexpected size (%lu)",  @"MFiProperties",  [v121 length]);

      goto LABEL_113;
    }

    id v197 = [v3 objectForKeyedSubscript:@"MFiProperties"];
  }

  else
  {
    id v197 = 0LL;
  }

  if (!-[NSMutableArray containsObject:](v6, "containsObject:", @"1.2.840.113635.100.6.71.2"))
  {
    id v48 = 0LL;
    unsigned int v36 = 0LL;
    goto LABEL_129;
  }

  id v100 = [v3 objectForKeyedSubscript:@"MFiPPUID"];
  id v32 = isNSString(v100);

  if (!v32)
  {
    v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  342LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Missing required option: %@",  @"MFiPPUID");
    double v30 = 0LL;
    id v193 = 0LL;
    id v194 = 0LL;
    id v205 = 0LL;
    id v196 = 0LL;
    goto LABEL_76;
  }

  id v101 = [v3 objectForKeyedSubscript:@"MFiPPUID"];
  id v102 = [v101 length];

  if ((unint64_t)v102 >= 0x25)
  {
    id v103 = [v3 objectForKeyedSubscript:@"MFiPPUID"];
    v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  347,  @"com.apple.MobileActivation.ErrorDomain",  -2,  0,  @"Invalid value for option (%@): unexpected size (%lu)",  @"MFiPPUID",  [v103 length]);

    double v30 = 0LL;
    id v193 = 0LL;
    id v194 = 0LL;
    id v205 = 0LL;
    id v196 = 0LL;
LABEL_114:
    __int128 v187 = 0LL;
    __int128 v188 = 0LL;
LABEL_115:
    id v195 = 0LL;
    id v190 = 0LL;
    id v31 = 0LL;
    id v32 = 0LL;
    goto LABEL_116;
  }

  id v123 = [v3 objectForKeyedSubscript:@"MFiPPUID"];
  id v48 = (NSMutableDictionary *) [v123 stringByPaddingToLength:36 withString:&stru_100266AE8 startingAtIndex:0];

  if (!v48)
  {
    v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  356LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Failed to pad string.");
    double v30 = 0LL;
    id v193 = 0LL;
    id v194 = 0LL;
    id v205 = 0LL;
    CFDataRef v206 = 0LL;
    id v195 = 0LL;
    id v196 = 0LL;
    __int128 v187 = 0LL;
    __int128 v188 = 0LL;
    CFDataRef v189 = 0LL;
    id v190 = 0LL;
    id v31 = 0LL;
    id v32 = 0LL;
    uint64_t v33 = 0LL;
    id v28 = 0LL;
    __int128 v35 = 0LL;
    unsigned int v36 = 0LL;
    BOOL v37 = 0LL;
    id v199 = 0LL;
    v200 = 0LL;
    CFDataRef v179 = 0LL;
    SecKeyRef keya = 0LL;
    id v186 = 0LL;
    v198 = 0LL;
    id v14 = 0LL;
    goto LABEL_119;
  }

  unsigned int v36 = (__SecKey *)-[NSMutableDictionary dataUsingEncoding:](v48, "dataUsingEncoding:", 4LL);
  if (!v36)
  {
    __int128 v187 = v48;
    v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  362LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Failed to convert string to data.");
    double v30 = 0LL;
    id v193 = 0LL;
    id v194 = 0LL;
    id v205 = 0LL;
    id v195 = 0LL;
    id v196 = 0LL;
    __int128 v188 = 0LL;
    CFDataRef v189 = 0LL;
    id v190 = 0LL;
    id v31 = 0LL;
    id v32 = 0LL;
    uint64_t v33 = 0LL;
    id v28 = 0LL;
    __int128 v35 = 0LL;
    goto LABEL_117;
  }

LABEL_129:
  __int128 v187 = v48;
  __int128 v188 = v36;
  if (!-[NSMutableArray containsObject:](v6, "containsObject:", @"1.2.840.113635.100.6.71.3"))
  {
    id v196 = 0LL;
    goto LABEL_160;
  }

  id v116 = [v3 objectForKeyedSubscript:@"MFiData"];
  id v32 = isNSData(v116);

  if (!v32)
  {
    v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  369LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Missing required option: %@",  @"MFiData");
    double v30 = 0LL;
    id v193 = 0LL;
    id v194 = 0LL;
    id v205 = 0LL;
    id v196 = 0LL;
    goto LABEL_77;
  }

  id v117 = [v3 objectForKeyedSubscript:@"MFiData"];
  id v118 = [v117 length];

  if ((unint64_t)v118 >= 0x4B0)
  {
    id v119 = [v3 objectForKeyedSubscript:@"MFiData"];
    v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  374,  @"com.apple.MobileActivation.ErrorDomain",  -2,  0,  @"Invalid value for option (%@): unexpected size (%lu)",  @"MFiData",  [v119 length]);

    double v30 = 0LL;
    id v193 = 0LL;
    id v194 = 0LL;
    id v205 = 0LL;
    id v196 = 0LL;
    goto LABEL_115;
  }

  id v196 = [v3 objectForKeyedSubscript:@"MFiData"];
LABEL_160:
  id v124 = [v3 objectForKeyedSubscript:@"UseRKSigningInterface"];
  id v125 = isNSNumber(v124);

  if (v125)
  {
    id v126 = [v3 objectForKeyedSubscript:@"UseRKSigningInterface"];
    unsigned int v25 = [v126 BOOLValue];
  }

  else
  {
    unsigned int v25 = 0;
  }

  id v127 = [v3 objectForKeyedSubscript:@"UseSoftwareGeneratedKey"];
  id v128 = isNSNumber(v127);

  unsigned int v209 = v19;
  if (v128)
  {
    id v129 = [v3 objectForKeyedSubscript:@"UseSoftwareGeneratedKey"];
    char v26 = [v129 BOOLValue];
  }

  else
  {
    char v26 = 1;
  }

  id v130 = [v3 objectForKeyedSubscript:@"Validity"];
  id v131 = isNSNumber(v130);

  if (v131)
  {
    id v132 = [v3 objectForKeyedSubscript:@"Validity"];
    v192 =  +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v132 unsignedIntegerValue]);
  }

  else
  {
    v192 = (NSNumber *)&off_10026D5F0;
  }

  id v133 = [v3 objectForKeyedSubscript:@"CACert"];
  id v134 = isNSNumber(v133);

  if (v134)
  {
    id v135 = [v3 objectForKeyedSubscript:@"CACert"];
    v191 =  +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v135 unsignedIntegerValue]);
  }

  else
  {
    v191 = (NSNumber *)&off_10026D608;
  }

  id v136 = [v3 objectForKeyedSubscript:@"scrtAttestation"];
  id v137 = isNSNumber(v136);

  if (v137)
  {
    id v138 = [v3 objectForKeyedSubscript:@"scrtAttestation"];
    uint64_t v203 =  +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v138 unsignedIntegerValue]);
  }

  else
  {
    uint64_t v203 = (NSNumber *)&off_10026D608;
  }

  id v139 = [v3 objectForKeyedSubscript:@"ClientAttestationData"];
  id v140 = isNSData(v139);

  if (!v140)
  {
    id v14 = 0LL;
    CFDataRef v206 = 0LL;
LABEL_180:
    id v199 = 0LL;
    goto LABEL_181;
  }

  id v141 = [v3 objectForKeyedSubscript:@"ClientAttestationPublicKey"];
  id v14 = (NSMutableDictionary *)isNSData(v141);

  if (!v14)
  {
    v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  411LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Missing required option for %@.",  @"ClientAttestationPublicKey");
    double v30 = 0LL;
    id v193 = 0LL;
    id v194 = 0LL;
    id v205 = 0LL;
    CFDataRef v206 = 0LL;
    id v195 = 0LL;
    CFDataRef v189 = 0LL;
    id v190 = 0LL;
    id v31 = 0LL;
    id v32 = 0LL;
    uint64_t v33 = 0LL;
    id v28 = 0LL;
    __int128 v35 = 0LL;
    unsigned int v36 = 0LL;
    BOOL v37 = 0LL;
    id v199 = 0LL;
    goto LABEL_88;
  }

  id v14 = (NSMutableDictionary *)[v3 objectForKeyedSubscript:@"ClientAttestationData"];
  CFDataRef v206 = (CFDataRef)[v3 objectForKeyedSubscript:@"ClientAttestationPublicKey"];
  id v142 = [v3 objectForKeyedSubscript:@"ClientDirectAttestationCertificate"];
  id v143 = isNSData(v142);

  if (!v143) {
    goto LABEL_180;
  }
  id v199 = [v3 objectForKeyedSubscript:@"ClientDirectAttestationCertificate"];
LABEL_181:
  id v144 = [v3 objectForKeyedSubscript:@"AppID"];
  id v145 = isNSString(v144);

  if (v145) {
    id v195 = [v3 objectForKeyedSubscript:@"AppID"];
  }
  else {
    id v195 = 0LL;
  }
  id v146 = [v3 objectForKeyedSubscript:@"LiveImage4Manifest"];
  id v147 = isNSData(v146);

  if (v147) {
    id v194 = [v3 objectForKeyedSubscript:@"LiveImage4Manifest"];
  }
  else {
    id v194 = 0LL;
  }
  id v148 = [v3 objectForKeyedSubscript:@"RepairImage4Manifest"];
  id v149 = isNSData(v148);

  if (v149) {
    id v193 = [v3 objectForKeyedSubscript:@"RepairImage4Manifest"];
  }
  else {
    id v193 = 0LL;
  }
  v201 = v58;
  id v27 = v203;
  SecKeyRef v23 = v204;
  id v24 = v202;
LABEL_24:
  id v202 = v24;
  v207 = v6;
  uint64_t v203 = v27;
  id v204 = v23;
  if (is_virtual_machine())
  {
    id v221 = 0LL;
    id v28 = vm_copy_host_certificate(0LL, &v221);
    id v29 = v221;
    id v205 = v28;
    if (!v28)
    {
      v200 = v14;
      v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  440LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v29,  @"Failed to copy VM host certificate.");

      double v30 = 0LL;
      id v205 = 0LL;
      id v190 = 0LL;
      id v31 = 0LL;
      id v32 = 0LL;
      uint64_t v33 = 0LL;
LABEL_47:
      __int128 v35 = 0LL;
      CFDataRef v189 = 0LL;
      unsigned int v36 = 0LL;
      BOOL v37 = 0LL;
      CFDataRef v179 = 0LL;
      SecKeyRef keya = 0LL;
      id v186 = 0LL;
      v198 = 0LL;
      id v14 = 0LL;
LABEL_48:
      id v48 = 0LL;
      id v183 = 0LL;
      goto LABEL_120;
    }
  }

  else
  {
    id v205 = 0LL;
    id v29 = 0LL;
  }

  if (!a1)
  {
    v200 = v14;
    v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  472LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    id v47 = v29;
LABEL_46:

    double v30 = 0LL;
    id v190 = 0LL;
    id v31 = 0LL;
    id v32 = 0LL;
    uint64_t v33 = 0LL;
    id v28 = 0LL;
    goto LABEL_47;
  }

  if (v14) {
    unsigned int v38 = 0;
  }
  else {
    unsigned int v38 = v25;
  }
  if (v38 != 1)
  {
    v175 = 0LL;
    v176 = 0LL;
    id v172 = 0LL;
LABEL_56:
    id v217 = v29;
    id v218 = 0LL;
    unsigned int v36 = security_copy_system_key(0LL, (const __CFData **)&v218, &v217);
    id v173 = v218;
    id v55 = v217;

    v200 = v14;
    if (!v36)
    {
      v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  524LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to copy SIK attestation key.");

      SecKeyRef keya = 0LL;
      id v183 = 0LL;
      id v48 = 0LL;
      id v177 = 0LL;
      CFDataRef v179 = 0LL;
      v198 = 0LL;
      id v186 = 0LL;
      CFDataRef v189 = 0LL;
      id v190 = 0LL;
      __int128 v35 = 0LL;
      id v28 = 0LL;
      uint64_t v33 = 0LL;
      id v32 = 0LL;
      id v31 = 0LL;
      id v174 = 0LL;
      id v67 = v172;
      BOOL v37 = v173;
      goto LABEL_150;
    }

    CFTypeRef cf = v36;
    if (-[NSNumber BOOLValue](v27, "BOOLValue"))
    {
      unsigned int v36 = 0LL;
      id v170 = 0LL;
    }

    else
    {
      id v215 = v55;
      id v216 = 0LL;
      __int128 v35 = security_copy_system_key(2LL, (const __CFData **)&v216, &v215);
      uint64_t v71 = (__SecKey *)v216;
      id v72 = v215;

      id v170 = v35;
      if (!v35)
      {
        v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  533LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v72,  @"Failed to copy UIK attestation key.");

        CFRelease(cf);
        SecKeyRef keya = 0LL;
        id v183 = 0LL;
        id v48 = 0LL;
        id v177 = 0LL;
        CFDataRef v179 = 0LL;
        v198 = 0LL;
        id v186 = 0LL;
        CFDataRef v189 = 0LL;
        id v190 = 0LL;
        uint64_t v33 = 0LL;
        id v32 = 0LL;
        id v31 = 0LL;
        id v174 = 0LL;
        id v67 = v172;
        BOOL v37 = v173;
        unsigned int v36 = v71;
        id v28 = 0LL;
        goto LABEL_150;
      }

      id v55 = v72;
      unsigned int v36 = v71;
    }

    uint64_t v73 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    if (v73)
    {
      unsigned __int8 v168 = v36;
      if (-[NSNumber BOOLValue](v27, "BOOLValue")
        || (id v74 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),
            id v75 = copy_ucrt_path(),
            id v76 = [v75 stringByAppendingPathComponent:@"ucrt.pem"],
            unsigned __int8 v77 = -[NSFileManager fileExistsAtPath:](v74, "fileExistsAtPath:", v76),
            v76,
            v75,
            v74,
            (v77 & 1) != 0))
      {
        id v78 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
        __int128 v35 = (__SecKey *)[v78 copyAnswer:@"UniqueChipID"];

        id v79 = isNSNumber(v35);
        if (v79)
        {
          id v167 = v35;
          id v80 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
          id v81 = [v80 copyAnswer:@"ChipID"];

          id v169 = v81;
          id v82 = isNSNumber(v81);

          if (v82)
          {
            id v83 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
            id v84 = [v83 copyAnswer:@"BoardId"];

            id v166 = v84;
            id v85 = isNSNumber(v84);

            if (v85)
            {
              id v86 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
              id v87 = [v86 copyAnswer:@"SecurityDomain"];

              id v165 = v87;
              id v88 = isNSNumber(v87);

              if (v88)
              {
                id v89 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
                id v31 = [v89 copyAnswer:@"SerialNumber"];

                id v90 = isNSString(v31);
                if (v90)
                {
                  id v91 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
                  id v92 = [v91 copyAnswer:@"BuildVersion"];

                  id v190 = v92;
                  id v93 = isNSString(v92);

                  if (v93)
                  {
                    id v94 = SecKeyCopyPublicKey(a1);
                    if (v94)
                    {
                      int v185 = v20;
                      id v174 = v94;
                      CFDataRef v95 = SecKeyCopyExternalRepresentation(v94, &error);
                      BOOL v37 = v173;
                      unsigned int v36 = v168;
                      if (v95)
                      {
                        CFDataRef v189 = v95;
                        if (v199)
                        {
                          id v214 = v55;
                          id v96 = &v214;
                          id v97 = &v214;
                          uint64_t v98 = (uint64_t)a1;
                          uint64_t v99 = 7LL;
                        }

                        else
                        {
                          if (-[NSNumber BOOLValue](v203, "BOOLValue")) {
                            uint64_t v99 = 0LL;
                          }
                          else {
                            uint64_t v99 = 2LL;
                          }
                          id v213 = v55;
                          id v96 = &v213;
                          id v97 = &v213;
                          uint64_t v98 = (uint64_t)a1;
                        }

                        id v151 = security_create_system_key_attestation(v98, v99, v204, v97);
                        id v180 = *v96;

                        if (v151)
                        {
                          id v186 = v151;
                          if (v14)
                          {
                            -[NSMutableDictionary setObject:forKeyedSubscript:]( v73,  "setObject:forKeyedSubscript:",  v14,  @"RKCertification");
                            -[NSMutableDictionary setObject:forKeyedSubscript:]( v73,  "setObject:forKeyedSubscript:",  v151,  @"RKSigning");
                            CFDataRef v152 = v189;
                            -[NSMutableDictionary setObject:forKeyedSubscript:]( v73,  "setObject:forKeyedSubscript:",  v189,  @"RKSigningPub");
                          }

                          else
                          {
                            -[NSMutableDictionary setObject:forKeyedSubscript:]( v73,  "setObject:forKeyedSubscript:",  v151,  @"RKCertification");
                            CFDataRef v152 = v189;
                          }

                          __int128 v153 = objc_alloc(&OBJC_CLASS___NSMutableDictionary);
                          v227[0] = @"UniqueChipID";
                          v227[1] = @"ChipID";
                          __int128 v35 = v167;
                          v228[0] = v167;
                          v228[1] = v169;
                          v227[2] = @"BoardId";
                          v227[3] = @"SecurityDomain";
                          v228[2] = v166;
                          v228[3] = v165;
                          v227[4] = @"SerialNumber";
                          v227[5] = @"OsBuildVersion";
                          v228[4] = v31;
                          v228[5] = v190;
                          v227[6] = @"scrtAttestation";
                          v227[7] = @"CertType";
                          v228[6] = v203;
                          v228[7] = v201;
                          v227[8] = @"Validity";
                          v227[9] = @"CACert";
                          v228[8] = v192;
                          v228[9] = v191;
                          v227[10] = @"OIDSToInclude";
                          v227[11] = @"SIKPub";
                          v228[10] = v207;
                          v228[11] = v173;
                          char v154 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v228,  v227,  12LL);
                          CFDataRef v155 = -[NSMutableDictionary initWithDictionary:](v153, "initWithDictionary:", v154);

                          v198 = v155;
                          if (v14)
                          {
                            -[NSMutableDictionary setObject:forKeyedSubscript:]( v155,  "setObject:forKeyedSubscript:",  v206,  @"RKCertificationPub");
                            -[NSMutableDictionary setObject:forKeyedSubscript:]( v155,  "setObject:forKeyedSubscript:",  v152,  @"RKSigningPub");
                            id v156 = v202;
                            if (v199) {
                              -[NSMutableDictionary setObject:forKeyedSubscript:]( v155,  "setObject:forKeyedSubscript:",  v199,  @"DirectAttestationCertificate");
                            }
                          }

                          else
                          {
                            -[NSMutableDictionary setObject:forKeyedSubscript:]( v155,  "setObject:forKeyedSubscript:",  v152,  @"RKCertificationPub");
                            id v156 = v202;
                          }

                          id v48 = v73;
                          if (v205) {
                            -[NSMutableDictionary setObject:forKeyedSubscript:]( v198,  "setObject:forKeyedSubscript:",  v205,  @"VMHostIdentityCertificate");
                          }
                          if (v168) {
                            -[NSMutableDictionary setObject:forKeyedSubscript:]( v198,  "setObject:forKeyedSubscript:",  v168,  @"UIKPub");
                          }
                          if (v156) {
                            -[NSMutableDictionary setObject:forKeyedSubscript:]( v198,  "setObject:forKeyedSubscript:",  v156,  @"AppSpecificData");
                          }
                          if (!v185)
                          {
                            id v183 = 0LL;
LABEL_232:
                            uint64_t v33 = v166;
                            if (v195) {
                              -[NSMutableDictionary setObject:forKeyedSubscript:]( v198,  "setObject:forKeyedSubscript:",  v195,  @"AppID");
                            }
                            if (v197) {
                              -[NSMutableDictionary setObject:forKeyedSubscript:]( v198,  "setObject:forKeyedSubscript:",  v197,  @"MFiProperties");
                            }
                            if (v188) {
                              -[NSMutableDictionary setObject:forKeyedSubscript:]( v198,  "setObject:forKeyedSubscript:",  v188,  @"MFiPPUID");
                            }
                            if (v196) {
                              -[NSMutableDictionary setObject:forKeyedSubscript:]( v198,  "setObject:forKeyedSubscript:",  v196,  @"MFiData");
                            }
                            id v32 = v165;
                            if (v194) {
                              -[NSMutableDictionary setObject:forKeyedSubscript:]( v198,  "setObject:forKeyedSubscript:",  v194,  @"LiveImage4Manifest");
                            }
                            if (v193) {
                              -[NSMutableDictionary setObject:forKeyedSubscript:]( v198,  "setObject:forKeyedSubscript:",  v193,  @"RepairImage4Manifest");
                            }
                            id v211 = 0LL;
                            char v160 =  +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v198,  100LL,  0LL,  &v211);
                            v210 = (NSError *)v211;

                            if (v160)
                            {
                              -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v160,  @"RKProperties");
                              id v161 = a1;
                              SecKeyRef keya = (SecKeyRef)v160;
                              CFDataRef v162 = SecKeyCreateSignature( v161,  kSecKeyAlgorithmECDSASignatureMessageX962SHA256,  (CFDataRef)v160,  &error);
                              if (v162)
                              {
                                CFDataRef v179 = v162;
                                -[NSMutableDictionary setObject:forKeyedSubscript:]( v48,  "setObject:forKeyedSubscript:",  v162,  @"RKPropertiesSignature");
                                id v177 = v48;
                                goto LABEL_147;
                              }

                              v163 =  createMobileActivationError( (uint64_t)"create_baa_info",  830LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to sign data with ref key.");

                              id v177 = 0LL;
                            }

                            else
                            {
                              v163 =  createMobileActivationError( (uint64_t)"create_baa_info",  819LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v210,  @"Could not convert dictionary to xml data.");

                              id v177 = 0LL;
                              SecKeyRef keya = 0LL;
                            }

                            CFDataRef v179 = 0LL;
                            v210 = v163;
                            goto LABEL_147;
                          }

                          id v212 = v180;
                          CFDataRef v157 = copyPersonalizedFirmwareData(2LL, (NSError **)&v212);
                          id v158 = v212;

                          if (v157)
                          {
                            id v183 = v157;
                            -[NSMutableDictionary setObject:forKeyedSubscript:]( v198,  "setObject:forKeyedSubscript:",  v157,  @"Image4Manifest");
                            id v159 = copy_sfr_manifest();
                            -[NSMutableDictionary setObject:forKeyedSubscript:]( v198,  "setObject:forKeyedSubscript:",  v159,  @"FWImage4Manifest");

                            id v180 = v158;
                            goto LABEL_232;
                          }

                          if (v209) {
                            id v164 = createMobileActivationError( (uint64_t)"create_baa_info",  722LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v158,  @"Failed to load boot manifest.");
                          }
                          else {
                            id v164 = createMobileActivationError( (uint64_t)"create_baa_info",  742LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v158,  @"Failed to load boot manifest.");
                          }
                          v210 = v164;

                          SecKeyRef keya = 0LL;
                          id v183 = 0LL;
                          id v177 = 0LL;
                          CFDataRef v179 = 0LL;
                          goto LABEL_207;
                        }

                        v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  614LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v180,  @"Failed to create reference key attestation (nonce: %@).",  v204);

                        SecKeyRef keya = 0LL;
                        id v183 = 0LL;
                        id v177 = 0LL;
                        CFDataRef v179 = 0LL;
                        v198 = 0LL;
                        id v186 = 0LL;
                      }

                      else
                      {
                        v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  601LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to encode RK public key as data.");

                        SecKeyRef keya = 0LL;
                        id v183 = 0LL;
                        id v177 = 0LL;
                        CFDataRef v179 = 0LL;
                        v198 = 0LL;
                        id v186 = 0LL;
                        CFDataRef v189 = 0LL;
                      }

LABEL_206:
                      id v48 = v73;
                      __int128 v35 = v167;
LABEL_207:
                      id v32 = v165;
                      uint64_t v33 = v166;
                      goto LABEL_147;
                    }

                    SecAccessControlRef v150 = createMobileActivationError( (uint64_t)"create_baa_info",  595LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy RK public key.");
                  }

                  else
                  {
                    SecAccessControlRef v150 = createMobileActivationError( (uint64_t)"create_baa_info",  586LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v55,  @"Failed to retrieve %@.",  @"BuildVersion");
                  }

                  v210 = v150;

                  SecKeyRef keya = 0LL;
                  id v183 = 0LL;
                  id v177 = 0LL;
                  CFDataRef v179 = 0LL;
                  v198 = 0LL;
                  id v186 = 0LL;
                  CFDataRef v189 = 0LL;
LABEL_205:
                  id v174 = 0LL;
                  BOOL v37 = v173;
                  unsigned int v36 = v168;
                  goto LABEL_206;
                }

                v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  580LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve %@.",  @"SerialNumber");

                SecKeyRef keya = 0LL;
                id v183 = 0LL;
                id v177 = 0LL;
                CFDataRef v179 = 0LL;
                v198 = 0LL;
                id v186 = 0LL;
                CFDataRef v189 = 0LL;
              }

              else
              {
                v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  574LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve %@.",  @"SecurityDomain");

                SecKeyRef keya = 0LL;
                id v183 = 0LL;
                id v177 = 0LL;
                CFDataRef v179 = 0LL;
                v198 = 0LL;
                id v186 = 0LL;
                CFDataRef v189 = 0LL;
                id v31 = 0LL;
              }

              id v190 = 0LL;
              goto LABEL_205;
            }

            v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  568LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve %@.",  @"BoardId");

            SecKeyRef keya = 0LL;
            id v183 = 0LL;
            id v177 = 0LL;
            CFDataRef v179 = 0LL;
            v198 = 0LL;
            id v186 = 0LL;
            CFDataRef v189 = 0LL;
            id v190 = 0LL;
            id v32 = 0LL;
            id v31 = 0LL;
            id v174 = 0LL;
            BOOL v37 = v173;
            unsigned int v36 = v168;
            id v48 = v73;
            uint64_t v33 = v166;
LABEL_147:
            id v67 = v172;
            CFRelease(cf);
            if (v170) {
              CFRelease(v170);
            }
            id v28 = v169;
LABEL_150:
            if (v67) {
              CFRelease(v67);
            }
            unsigned int v122 = v176;
            id v14 = v177;
            if (!v176) {
              goto LABEL_195;
            }
            goto LABEL_194;
          }

          v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  562LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve %@.",  @"ChipID");

          SecKeyRef keya = 0LL;
          id v183 = 0LL;
          id v177 = 0LL;
          CFDataRef v179 = 0LL;
          v198 = 0LL;
          id v186 = 0LL;
          CFDataRef v189 = 0LL;
          id v190 = 0LL;
          uint64_t v33 = 0LL;
          id v32 = 0LL;
          id v31 = 0LL;
          id v174 = 0LL;
          BOOL v37 = v173;
          unsigned int v36 = v168;
LABEL_146:
          id v48 = v73;
          goto LABEL_147;
        }

        v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  556LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve %@.",  @"UniqueChipID");

        SecKeyRef keya = 0LL;
        id v183 = 0LL;
        id v177 = 0LL;
        CFDataRef v179 = 0LL;
        v198 = 0LL;
        id v186 = 0LL;
        CFDataRef v189 = 0LL;
      }

      else
      {
        v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  548LL,  @"com.apple.MobileActivation.ErrorDomain",  -4LL,  0LL,  @"UCRT is unavailable.");

        SecKeyRef keya = 0LL;
        id v183 = 0LL;
        id v177 = 0LL;
        CFDataRef v179 = 0LL;
        v198 = 0LL;
        id v186 = 0LL;
        CFDataRef v189 = 0LL;
        __int128 v35 = 0LL;
      }

      id v169 = 0LL;
      uint64_t v33 = 0LL;
      id v32 = 0LL;
      id v31 = 0LL;
      id v190 = 0LL;
      id v174 = 0LL;
      BOOL v37 = v173;
      unsigned int v36 = v168;
      goto LABEL_146;
    }

    v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  541LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate dictionary.");

    SecKeyRef keya = 0LL;
    id v183 = 0LL;
    id v177 = 0LL;
    CFDataRef v179 = 0LL;
    v198 = 0LL;
    id v186 = 0LL;
    CFDataRef v189 = 0LL;
    id v190 = 0LL;
    __int128 v35 = 0LL;
    id v169 = 0LL;
    uint64_t v33 = 0LL;
    id v32 = 0LL;
    id v31 = 0LL;
    id v174 = 0LL;
    BOOL v37 = v173;
    goto LABEL_146;
  }

  if (-[NSNumber BOOLValue](v27, "BOOLValue")) {
    uint64_t v39 = 0LL;
  }
  else {
    uint64_t v39 = 2LL;
  }
  id v220 = v29;
  id v14 = (NSMutableDictionary *)security_create_system_key_attestation((uint64_t)a1, v39, v23, &v220);
  id v40 = v220;

  if (!v14)
  {
    v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  482LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v40,  @"Failed to create reference key attestation.");

    double v30 = 0LL;
    CFDataRef v189 = 0LL;
    id v190 = 0LL;
    id v31 = 0LL;
    id v32 = 0LL;
    uint64_t v33 = 0LL;
    id v28 = 0LL;
    __int128 v35 = 0LL;
    unsigned int v36 = 0LL;
    BOOL v37 = 0LL;
LABEL_88:
    v200 = 0LL;
    CFDataRef v179 = 0LL;
    SecKeyRef keya = 0LL;
    id v186 = 0LL;
    v198 = 0LL;
    goto LABEL_48;
  }

  id v41 = SecKeyCopyPublicKey(a1);
  v200 = v14;
  if (!v41)
  {
    v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  488LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy RK public key.");
    id v47 = v40;
    goto LABEL_46;
  }

  v176 = v41;
  CFDataRef v42 = SecKeyCopyExternalRepresentation(v41, &error);

  if (!v42)
  {
    SecCertificateRef v120 = createMobileActivationError( (uint64_t)"create_baa_info",  494LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to encode RK public key as data.");
LABEL_139:
    v210 = v120;
    v175 = 0LL;
    goto LABEL_193;
  }

  uint64_t v43 = SecAccessControlCreate(0LL, &error);
  if (!v43)
  {
    SecCertificateRef v120 = createMobileActivationError( (uint64_t)"create_baa_info",  502LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to create access control.");
    goto LABEL_139;
  }

  uint64_t v44 = kSecAttrAccessibleUntilReboot;
  id v45 = (const void *)v43;
  v175 = (const void *)v43;
  if ((SecAccessControlSetProtection(v43, kSecAttrAccessibleUntilReboot, &error) & 1) != 0)
  {
    id v219 = v40;
    id v46 = (__SecKey *)createReferenceKeyBlob(v45, v26, v3, &v219);
    id v29 = v219;

    if (v46)
    {
      CFDataRef v206 = v42;
      a1 = v46;
      id v172 = v46;
      goto LABEL_56;
    }

    v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  513LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v29,  @"Failed to create reference key.");
    id v40 = v29;
  }

  else
  {
    v210 =  createMobileActivationError( (uint64_t)"create_baa_info",  507LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to set ACL protection to %@.",  v44);
  }

LABEL_193:
  SecKeyRef keya = 0LL;
  id v183 = 0LL;
  id v48 = 0LL;
  id v14 = 0LL;
  v198 = 0LL;
  id v186 = 0LL;
  CFDataRef v179 = 0LL;
  BOOL v37 = 0LL;
  unsigned int v36 = 0LL;
  CFDataRef v189 = 0LL;
  id v190 = 0LL;
  __int128 v35 = 0LL;
  uint64_t v33 = 0LL;
  id v32 = 0LL;
  id v31 = 0LL;
  id v174 = 0LL;
  CFDataRef v206 = v42;
  id v28 = 0LL;
  unsigned int v122 = v176;
LABEL_194:
  CFRelease(v122);
LABEL_195:
  if (v174) {
    CFRelease(v174);
  }
  double v30 = v175;
LABEL_120:
  if (error)
  {
    __int128 v178 = v14;
    id v104 = v31;
    id v105 = v32;
    id v106 = v33;
    id v107 = v28;
    __int16 v108 = v35;
    id v109 = v3;
    id v110 = v48;
    id v111 = v36;
    uint64_t v112 = v37;
    NSFileAttributeKey v113 = v30;
    CFRelease(error);
    double v30 = v113;
    BOOL v37 = v112;
    unsigned int v36 = v111;
    id v48 = v110;
    id v3 = v109;
    __int128 v35 = v108;
    id v28 = v107;
    uint64_t v33 = v106;
    id v32 = v105;
    id v31 = v104;
    id v14 = v178;
  }

  CFErrorRef error = 0LL;
  if (v30) {
    CFRelease(v30);
  }
  if (a3 && !v14) {
    *a3 = v210;
  }
  char v114 = v14;

  return v114;
}

id vm_copy_host_certificate(void *a1, void *a2)
{
  id v3 = a1;
  if (is_virtual_machine())
  {
    __int128 v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    if (v4)
    {
      id v19 = 0LL;
      id v5 = libavp_copy_strong_identity_data(v3, (NSError **)&v19);
      id v6 = v19;
      if (v5)
      {
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  @"CopyVMHostCertificateRequest",  @"Command");
        -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v5, @"Value");
        id v18 = v6;
        id v7 = libavp_send_host_message(v4, &v18);
        id v8 = (NSError *)v18;

        id v9 = isNSDictionary(v7);
        if (v9)
        {
          id v9 = [v7 objectForKeyedSubscript:@"Error"];
          id v10 = isNSString(v9);

          if (!v10)
          {
            id v13 = [v7 objectForKeyedSubscript:@"Value"];
            id v14 = isNSDictionary(v13);

            if (v14)
            {
              id v14 = [v13 objectForKeyedSubscript:@"RKCertification"];
              id v12 = isNSData(v14);

              if (v12)
              {
                id v12 = v14;
                id v14 = v12;
                goto LABEL_11;
              }

              uint64_t v17 =  createMobileActivationError( (uint64_t)"vm_copy_host_certificate",  71LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid response message.");
            }

            else
            {
              uint64_t v17 =  createMobileActivationError( (uint64_t)"vm_copy_host_certificate",  65LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid response message.");

              id v12 = 0LL;
            }

            goto LABEL_17;
          }

          MobileActivationError = createMobileActivationError( (uint64_t)"vm_copy_host_certificate",  59LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Error occurred during request: %@",  v9);
        }

        else
        {
          MobileActivationError = createMobileActivationError( (uint64_t)"vm_copy_host_certificate",  53LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v8,  @"Failed to receive response.");
        }

        uint64_t v17 = MobileActivationError;

        id v12 = 0LL;
        id v13 = 0LL;
        id v14 = 0LL;
LABEL_17:
        id v8 = v17;
        goto LABEL_11;
      }

      id v8 =  createMobileActivationError( (uint64_t)"vm_copy_host_certificate",  44LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v6,  @"Failed to copy AVP identity data.");

      id v12 = 0LL;
    }

    else
    {
      id v8 =  createMobileActivationError( (uint64_t)"vm_copy_host_certificate",  38LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create dictionary.");
      id v12 = 0LL;
      id v5 = 0LL;
    }
  }

  else
  {
    id v8 =  createMobileActivationError( (uint64_t)"vm_copy_host_certificate",  32LL,  @"com.apple.MobileActivation.ErrorDomain",  -3LL,  0LL,  @"Device is not a VM (not supported).");
    id v12 = 0LL;
    id v5 = 0LL;
    __int128 v4 = 0LL;
  }

  id v7 = 0LL;
  id v13 = 0LL;
  id v14 = 0LL;
  id v9 = 0LL;
LABEL_11:
  if (a2 && !v12) {
    *a2 = v8;
  }
  id v15 = v12;

  return v15;
}

id vm_create_host_key_signature(void *a1, void *a2, void *a3, void *a4)
{
  id v6 = a1;
  id v7 = a2;
  id v25 = v7;
  id v26 = v6;
  if (!is_virtual_machine())
  {
    id v14 =  createMobileActivationError( (uint64_t)"vm_create_host_key_signature",  101LL,  @"com.apple.MobileActivation.ErrorDomain",  -3LL,  0LL,  @"Device is not a VM (not supported).");
    id v18 = 0LL;
    id v11 = 0LL;
    id v9 = 0LL;
LABEL_13:
    id v10 = 0LL;
LABEL_14:
    id v13 = 0LL;
    id v19 = 0LL;
    id v15 = 0LL;
    id v20 = 0LL;
    id v16 = 0LL;
    goto LABEL_15;
  }

  id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v9 = v8;
  if (!v8)
  {
    id v14 =  createMobileActivationError( (uint64_t)"vm_create_host_key_signature",  107LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create dictionary.");
    id v18 = 0LL;
    id v11 = 0LL;
    goto LABEL_13;
  }

  if (v7) {
    -[NSMutableDictionary addEntriesFromDictionary:](v8, "addEntriesFromDictionary:", v7);
  }
  id v10 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  if (!v10)
  {
    id v14 =  createMobileActivationError( (uint64_t)"vm_create_host_key_signature",  117LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create dictionary.");
    id v18 = 0LL;
    id v11 = 0LL;
    goto LABEL_14;
  }

  id v29 = 0LL;
  id v11 = libavp_copy_strong_identity_data(v7, (NSError **)&v29);
  id v12 = v29;
  if (!v11)
  {
    id v14 =  createMobileActivationError( (uint64_t)"vm_create_host_key_signature",  123LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v12,  @"Failed to copy AVP identity data.");

    id v18 = 0LL;
    goto LABEL_14;
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:](v9, "setObject:forKeyedSubscript:", v11, @"BIKData");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  @"CreateVMHostKeyAttestationRequest",  @"Command");
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v6, @"Value");
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v9, @"Options");
  id v28 = v12;
  id v13 = libavp_send_host_message(v10, &v28);
  id v14 = (NSError *)v28;

  id v15 = isNSDictionary(v13);
  if (!v15)
  {
    SecKeyRef v23 =  createMobileActivationError( (uint64_t)"vm_create_host_key_signature",  136LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v14,  @"Failed to receive response.");

    id v18 = 0LL;
    id v19 = 0LL;
    id v20 = 0LL;
    id v16 = 0LL;
    goto LABEL_22;
  }

  id v16 = [v13 objectForKeyedSubscript:@"Error"];
  id v17 = isNSString(v16);

  if (v17)
  {
    SecKeyRef v23 =  createMobileActivationError( (uint64_t)"vm_create_host_key_signature",  142LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Error occurred during request: %@",  v16);

    id v18 = 0LL;
    id v19 = 0LL;
    id v15 = 0LL;
LABEL_10:
    id v20 = 0LL;
LABEL_22:
    id v14 = v23;
    goto LABEL_15;
  }

  id v24 = a3;
  id v19 = [v13 objectForKeyedSubscript:@"Value"];
  id v15 = isNSDictionary(v19);

  if (!v15)
  {
    SecKeyRef v23 =  createMobileActivationError( (uint64_t)"vm_create_host_key_signature",  148LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid response message.");

    id v18 = 0LL;
    goto LABEL_10;
  }

  id v15 = [v19 objectForKeyedSubscript:@"RKCertification"];
  id v20 = isNSData(v15);

  if (!v20)
  {
    SecKeyRef v23 =  createMobileActivationError( (uint64_t)"vm_create_host_key_signature",  154LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid response message.");

    id v18 = 0LL;
    goto LABEL_22;
  }

  id v20 = [v19 objectForKeyedSubscript:@"RKSignature"];
  id v18 = isNSData(v20);

  if (!v18)
  {
    SecKeyRef v23 =  createMobileActivationError( (uint64_t)"vm_create_host_key_signature",  160LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid response message.");

    goto LABEL_22;
  }

  if (v24) {
    void *v24 = v15;
  }
  id v18 = v20;
  id v20 = v18;
LABEL_15:
  if (a4 && !v18) {
    *a4 = v14;
  }
  id v21 = v18;

  return v21;
}

void sub_100046B40(_Unwind_Exception *a1)
{
}

void sub_1000471A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

void sub_1000475FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10004794C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100047C9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

NSData *copyPersonalizedFirmwareData(uint64_t a1, NSError **a2)
{
  if (!getMSUDataAccessorClass())
  {
    id v8 =  createMobileActivationError( (uint64_t)"copyPersonalizedFirmwareData",  29LL,  @"com.apple.MobileActivation.ErrorDomain",  -3LL,  0LL,  @"MSUDataAccessor is not supported on this platform.");
    id v5 = 0LL;
    if (!a2) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }

  id v4 = [getMSUDataAccessorClass() sharedDataAccessor];
  id v13 = 0LL;
  id v5 = [v4 copyPathForPersonalizedData:a1 error:&v13];
  id v6 = v13;

  if (!v5)
  {
    id v8 =  createMobileActivationError( (uint64_t)"copyPersonalizedFirmwareData",  35LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v6,  @"Failed to retrieve path for firmware data type %d.",  a1);

    if (!a2)
    {
LABEL_10:
      uint64_t v9 = 0LL;
      goto LABEL_11;
    }

id getMSUDataAccessorClass()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)getMSUDataAccessorClass_softClass;
  uint64_t v7 = getMSUDataAccessorClass_softClass;
  if (!getMSUDataAccessorClass_softClass)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3254779904LL;
    v3[2] = __getMSUDataAccessorClass_block_invoke;
    v3[3] = &__block_descriptor_40_e8_32r_e5_v8__0l;
    v3[4] = &v4;
    __getMSUDataAccessorClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100048F24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class __getMSUDataAccessorClass_block_invoke(uint64_t a1)
{
  if (!MSUDataAccessorLibraryCore_frameworkLibrary)
  {
    __int128 v3 = off_100255D18;
    uint64_t v4 = 0LL;
    MSUDataAccessorLibraryCore_frameworkLibrary = _sl_dlopen(&v3, 0LL);
  }

  Class result = objc_getClass("MSUDataAccessor");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  getMSUDataAccessorClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

uint64_t createActivationRequest(void *a1, NSMutableURLRequest **a2, int a3, NSError **a4)
{
  id v7 = a1;
  if (!v7)
  {
    uint64_t v9 =  createMobileActivationError( (uint64_t)"createActivationRequest",  36LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    id v8 = 0LL;
    id v10 = 0LL;
    id v16 = 0LL;
    id v17 = 0LL;
    id v11 = 0LL;
    if (a4)
    {
LABEL_18:
      uint64_t v9 = v9;
      uint64_t v23 = 0LL;
      id v19 = 0LL;
      *a4 = v9;
      goto LABEL_19;
    }

id getSessionActivationRecordFromData(void *a1, void *a2)
{
  id v3 = a1;
  if (v3)
  {
    id v11 = 0LL;
    id v4 =  +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v3,  0LL,  0LL,  &v11);
    id v5 = (NSError *)v11;
    id v6 = isNSDictionary(v4);

    if (v6)
    {
      id v6 = [v4 objectForKeyedSubscript:@"ActivationRecord"];
      id v7 = isNSDictionary(v6);

      if (v7)
      {
        id v7 = v6;
        id v6 = v7;
        if (!a2) {
          goto LABEL_13;
        }
      }

      else
      {
        id v8 =  createMobileActivationError( (uint64_t)"getSessionActivationRecordFromData",  124LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Input data is missing activation record.");

        id v5 = v8;
        if (!a2) {
          goto LABEL_13;
        }
      }
    }

    else
    {
      id v7 = 0LL;
      if (!a2) {
        goto LABEL_13;
      }
    }
  }

  else
  {
    id v5 =  createMobileActivationError( (uint64_t)"getSessionActivationRecordFromData",  113LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    id v7 = 0LL;
    id v4 = 0LL;
    id v6 = 0LL;
    if (!a2) {
      goto LABEL_13;
    }
  }

  if (!v7) {
    *a2 = v5;
  }
LABEL_13:
  id v9 = v7;

  return v9;
}

id getActivationRecordFromData(uint64_t a1, void *a2)
{
  id v22 = 0LL;
  id v3 =  +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  a1,  0LL,  0LL,  &v22);
  id v4 = (NSError *)v22;
  id v5 = isNSDictionary(v3);

  if (v5)
  {
    id v6 = [v3 objectForKeyedSubscript:@"AccountToken"];
    if (v6)
    {
      id v7 = v6;
      id v8 = [v3 objectForKeyedSubscript:@"AccountTokenSignature"];
      if (v8)
      {
        id v9 = v8;
        id v10 = [v3 objectForKeyedSubscript:@"DeviceCertificate"];

        if (v10)
        {
          id v11 = v3;
          id v5 = 0LL;
          if (!a2) {
            goto LABEL_22;
          }
          goto LABEL_20;
        }
      }

      else
      {
      }
    }

    id v12 = @"device-activation";
    id v13 = [v3 objectForKeyedSubscript:@"device-activation"];

    if (v13
      || (id v12 = @"iphone-activation",
          id v14 = [v3 objectForKeyedSubscript:@"iphone-activation"],
          v14,
          v14))
    {
      id v5 = [v3 objectForKeyedSubscript:v12];
    }

    else
    {
      id v5 = 0LL;
    }

    id v15 = isNSDictionary(v5);

    if (v15)
    {
      id v16 = [v5 objectForKeyedSubscript:@"activation-record"];

      id v17 = isNSDictionary(v16);
      if (v17)
      {
        id v11 = v16;
        id v5 = v11;
        if (!a2) {
          goto LABEL_22;
        }
      }

      else
      {
        id v19 =  createMobileActivationError( (uint64_t)"getActivationRecordFromData",  173LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Input data is missing activation record.");

        id v11 = 0LL;
        id v4 = v19;
        id v5 = v16;
        if (!a2) {
          goto LABEL_22;
        }
      }
    }

    else
    {
      id v18 =  createMobileActivationError( (uint64_t)"getActivationRecordFromData",  167LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Input data is missing activation ticket.");

      id v11 = 0LL;
      id v4 = v18;
      if (!a2) {
        goto LABEL_22;
      }
    }
  }

  else
  {
    id v11 = 0LL;
    if (!a2) {
      goto LABEL_22;
    }
  }

NSDictionary *getRecertInfoFromData(void *a1, void *a2)
{
  id v3 = a1;
  if (v3)
  {
    id v10 = 0LL;
    id v4 =  +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v3,  0LL,  0LL,  &v10);
    id v5 = (NSError *)v10;
    id v6 = isNSDictionary(v4);

    if (v6)
    {
      id v6 = [v4 objectForKeyedSubscript:@"certify-me-info"];
      id v7 = (NSDictionary *)isNSDictionary(v6);

      if (v7)
      {
        id v11 = @"certify-me";
        id v12 = v6;
        id v7 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v12,  &v11,  1LL);
        if (!a2) {
          goto LABEL_13;
        }
        goto LABEL_11;
      }

      id v8 =  createMobileActivationError( (uint64_t)"getRecertInfoFromData",  209LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"XML data is missing certify-me-info.");
    }

    else
    {
      id v8 =  createMobileActivationError( (uint64_t)"getRecertInfoFromData",  203LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v5,  @"Failed to create dictionary from data.");

      id v7 = 0LL;
    }

    id v5 = v8;
    if (!a2) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }

  id v5 =  createMobileActivationError( (uint64_t)"getRecertInfoFromData",  197LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
  id v6 = 0LL;
  id v7 = 0LL;
  id v4 = 0LL;
  if (!a2) {
    goto LABEL_13;
  }
LABEL_11:
  if (!v7) {
    *a2 = v5;
  }
LABEL_13:

  return v7;
}

NSError *createMobileActivationError(uint64_t a1, uint64_t a2, id a3, uint64_t a4, void *a5, void *a6, ...)
{
  id v11 = a3;
  id v12 = a5;
  id v13 = a6;
  id v14 = -[NSMutableString initWithFormat:arguments:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithFormat:arguments:",  v13,  va);

  id v15 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v16 = v15;
  if (v14) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v15,  "setObject:forKeyedSubscript:",  v14,  NSLocalizedDescriptionKey);
  }
  if (v12) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v16, "setObject:forKeyedSubscript:", v12, NSUnderlyingErrorKey);
  }
  if (os_variant_allows_internal_security_policies(0LL))
  {
    if (a1)
    {
      id v17 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a1);
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v16,  "setObject:forKeyedSubscript:",  v17,  @"FunctionName");
    }

    if ((_DWORD)a2)
    {
      id v18 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v16, "setObject:forKeyedSubscript:", v18, @"SourceLine");
    }
  }

  id v19 =  +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v11,  a4,  v16);

  return v19;
}

uint64_t security_delete_legacy_uik(void *a1)
{
  uint64_t v15 = 1LL;
  BOOL v2 = (void *)container_system_group_path_for_identifier( 0,  [@"systemgroup.com.apple.mobileactivationd" UTF8String],  &v15);
  if (!v2)
  {
    id v9 =  createMobileActivationError( (uint64_t)"security_delete_legacy_uik",  105LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query group container path: %d",  v15);
    id v4 = 0LL;
    if (!a1) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  id v3 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v2);
  id v4 =  -[NSString stringByAppendingPathComponent:]( v3,  "stringByAppendingPathComponent:",  @"Library/uik/uik.pem");

  id v5 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
  unsigned int v6 = -[NSFileManager fileExistsAtPath:](v5, "fileExistsAtPath:", v4);

  if (v6)
  {
    id v7 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
    id v14 = 0LL;
    unsigned __int8 v8 = -[NSFileManager removeItemAtPath:error:](v7, "removeItemAtPath:error:", v4, &v14);
    id v9 = (NSError *)v14;

    if ((v8 & 1) == 0)
    {
      id v10 =  createMobileActivationError( (uint64_t)"security_delete_legacy_uik",  113LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v9,  @"Failed to delete %@.",  v4);

      id v9 = v10;
      if (!a1)
      {
LABEL_8:
        uint64_t v11 = 0LL;
        uint64_t v12 = 0LL;
        if (!v2) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }

BOOL security_committed_uik_is_legacy(void *a1)
{
  uint64_t v9 = 1LL;
  BOOL v2 = (void *)container_system_group_path_for_identifier( 0,  [@"systemgroup.com.apple.mobileactivationd" UTF8String],  &v9);
  if (v2)
  {
    id v3 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v2);
    id v4 =  -[NSString stringByAppendingPathComponent:]( v3,  "stringByAppendingPathComponent:",  @"Library/uik/uik.pem");

    id v5 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
    BOOL v6 = -[NSFileManager fileExistsAtPath:](v5, "fileExistsAtPath:", v4);

    id v7 = 0LL;
    if (!a1) {
      goto LABEL_7;
    }
  }

  else
  {
    id v7 =  createMobileActivationError( (uint64_t)"security_committed_uik_is_legacy",  142LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query group container path: %d",  v9);
    BOOL v6 = 0LL;
    if (!a1) {
      goto LABEL_7;
    }
  }

  if (!v6) {
    *a1 = v7;
  }
LABEL_7:
  if (v2) {
    free(v2);
  }

  return v6;
}

__SecKey *security_copy_system_key(uint64_t a1, const __CFData **a2, void *a3)
{
  BOOL v6 = 0LL;
  CFErrorRef v38 = 0LL;
  if ((_DWORD)a1 != 2) {
    goto LABEL_12;
  }
  id v37 = 0LL;
  BOOL is_legacy = security_committed_uik_is_legacy(&v37);
  unsigned __int8 v8 = (NSError *)v37;
  BOOL v6 = v8;
  if (!is_legacy && v8)
  {
    uint64_t v9 =  createMobileActivationError( (uint64_t)"security_copy_system_key",  180LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v8,  @"Failed to query legacy UIK support.");
    id v10 = 0LL;
LABEL_19:
    id v24 = 0LL;
    goto LABEL_23;
  }

  if (!is_legacy)
  {
LABEL_12:
    id v10 = (__SecKey *)SecKeyCopySystemKey(a1, &v38);
    if (!v10)
    {
      uint64_t v9 =  createMobileActivationError( (uint64_t)"security_copy_system_key",  195LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v38,  @"Failed to copy system key (%d).",  a1);
      goto LABEL_19;
    }

    goto LABEL_13;
  }

  uint64_t v40 = 1LL;
  CFErrorRef error = 0LL;
  uint64_t v11 = (void *)container_system_group_path_for_identifier( 0,  [@"systemgroup.com.apple.mobileactivationd" UTF8String],  &v40);
  if (!v11)
  {
    id v18 =  createMobileActivationError( (uint64_t)"copy_legacy_committed_uik",  44LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query group container path: %d",  v40);
    id v20 = 0LL;
    id v17 = 0LL;
    id v13 = 0LL;
LABEL_34:
    SecKeyRef v22 = 0LL;
    id v10 = 0LL;
    goto LABEL_40;
  }

  uint64_t v12 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v11);
  id v13 =  -[NSString stringByAppendingPathComponent:]( v12,  "stringByAppendingPathComponent:",  @"Library/uik/uik.pem");

  id v14 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
  unsigned __int8 v15 = -[NSFileManager fileExistsAtPath:](v14, "fileExistsAtPath:", v13);

  if ((v15 & 1) == 0)
  {
    id v18 =  createMobileActivationError( (uint64_t)"copy_legacy_committed_uik",  50LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Legacy UIK does not exist.");
    id v20 = 0LL;
    id v17 = 0LL;
    goto LABEL_34;
  }

  id v16 = objc_alloc(&OBJC_CLASS___NSData);
  id v39 = 0LL;
  id v17 = -[NSData initWithContentsOfFile:options:error:](v16, "initWithContentsOfFile:options:error:", v13, 0LL, &v39);
  id v18 = (NSError *)v39;
  if (v17)
  {
    SecAccessControlRef v19 = SecAccessControlCreateWithFlags(0LL, kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate, 0x40000000uLL, &error);
    if (v19)
    {
      v42[0] = kSecAttrIsPermanent;
      v42[1] = kSecAttrTokenID;
      v43[0] = &__kCFBooleanFalse;
      v43[1] = kSecAttrTokenIDAppleKeyStore;
      v42[2] = kSecAttrTokenOID;
      v42[3] = kSecAttrAccessControl;
      v43[2] = v17;
      v43[3] = v19;
      SecAccessControlRef cf = v19;
      id v20 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v43,  v42,  4LL);
      SecKeyRef v21 = SecKeyCreateWithData((CFDataRef)+[NSData data](&OBJC_CLASS___NSData, "data"), (CFDictionaryRef)v20, &error);
      SecKeyRef v22 = v21;
      if (v21)
      {
        id v10 = (__SecKey *)CFRetain(v21);
      }

      else
      {
        id v34 =  createMobileActivationError( (uint64_t)"copy_legacy_committed_uik",  74LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to query UIK.");

        id v10 = 0LL;
        id v18 = v34;
      }

      CFRelease(cf);
      goto LABEL_40;
    }

    MobileActivationError = createMobileActivationError( (uint64_t)"copy_legacy_committed_uik",  62LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to create access control.");
  }

  else
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"copy_legacy_committed_uik",  56LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v18,  @"Failed to load %@.",  v13);
  }

  id cfa = MobileActivationError;

  id v20 = 0LL;
  SecKeyRef v22 = 0LL;
  id v10 = 0LL;
  id v18 = cfa;
LABEL_40:
  if (error) {
    CFRelease(error);
  }
  CFErrorRef error = 0LL;
  if (v22) {
    CFRelease(v22);
  }
  if (v11) {
    free(v11);
  }
  id v32 = v6;
  if (!v10) {
    id v32 = v18;
  }

  uint64_t v33 = v32;
  if (!v10)
  {
    uint64_t v9 =  createMobileActivationError( (uint64_t)"security_copy_system_key",  189LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v33,  @"Failed to copy system key (legacy).");
    id v24 = 0LL;
    BOOL v6 = v33;
    goto LABEL_23;
  }

  BOOL v6 = v33;
LABEL_13:
  uint64_t v23 = SecKeyCopyPublicKey(v10);
  id v24 = v23;
  if (v23)
  {
    CFDataRef v25 = SecKeyCopyExternalRepresentation(v23, &v38);
    if (v25)
    {
      id v26 = v25;
      if (a2)
      {
        id v26 = v25;
        *a2 = v26;
      }

      uint64_t v9 = v6;
      goto LABEL_28;
    }

    id v27 = createMobileActivationError( (uint64_t)"security_copy_system_key",  208LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v38,  @"Failed to copy public key buffer.");
  }

  else
  {
    id v27 = createMobileActivationError( (uint64_t)"security_copy_system_key",  202LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy public key.");
  }

  uint64_t v9 = v27;
LABEL_23:

  if (a3) {
    *a3 = v9;
  }
  if (v10) {
    CFRelease(v10);
  }
  id v26 = 0LL;
  id v10 = 0LL;
  id v28 = 0LL;
  id v29 = 0LL;
  if (v24)
  {
LABEL_28:
    CFRelease(v24);
    id v28 = v26;
    id v29 = v10;
  }

  if (v38) {
    CFRelease(v38);
  }
  CFErrorRef v38 = 0LL;

  return v29;
}

id security_create_system_key_attestation(uint64_t a1, uint64_t a2, id a3, void *a4)
{
  id v7 = a3;
  CFTypeRef cf = 0LL;
  if (!a1)
  {
    uint64_t v9 =  createMobileActivationError( (uint64_t)"security_create_system_key_attestation",  242LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid input(s)");
    unsigned __int8 v8 = 0LL;
    if (!a4)
    {
LABEL_16:
      id v12 = 0LL;
      id v14 = 0LL;
      if (!v8) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }

id security_create_attestation(uint64_t a1, uint64_t a2, NSError **a3)
{
  CFTypeRef cf = 0LL;
  if (a1 && a2)
  {
    id v4 = (void *)SecKeyCreateAttestation(a2, a1, &cf);
    if (v4)
    {
      id v5 = v4;
      BOOL v6 = 0LL;
      goto LABEL_10;
    }

    MobileActivationError = createMobileActivationError( (uint64_t)"security_create_attestation",  299LL,  @"com.apple.MobileActivation.ErrorDomain",  -11LL,  (void *)cf,  @"Failed to create attestation.");
  }

  else
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"security_create_attestation",  293LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid input(s)");
  }

  unsigned __int8 v8 = MobileActivationError;
  BOOL v6 = v8;
  if (a3)
  {
    BOOL v6 = v8;
    id v5 = 0LL;
    *a3 = v6;
  }

  else
  {
    id v5 = 0LL;
  }

id security_create_external_representation(__SecKey *a1, uint64_t a2, NSError **a3)
{
  if (!a1)
  {
    unsigned __int8 v8 =  createMobileActivationError( (uint64_t)"security_create_external_representation",  328LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    CFDictionaryRef v5 = 0LL;
    if (!a3)
    {
LABEL_10:
      id v7 = 0LL;
      goto LABEL_11;
    }

uint64_t security_valid_security_enclave_reference_key( __SecKey *a1, int a2, unsigned __int8 *a3, NSError **a4)
{
  CFErrorRef error = 0LL;
  if (!a1)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"security_valid_security_enclave_reference_key",  394LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid input.");
LABEL_23:
    id v24 = MobileActivationError;
    CFDataRef v25 = 0LL;
    id v26 = 0LL;
    SecKeyRef v50 = 0LL;
    id v51 = 0LL;
    id v18 = 0LL;
    id v10 = 0LL;
    id v52 = 0LL;
    id v53 = 0LL;
    goto LABEL_35;
  }

  unsigned __int8 v8 = SecKeyCopyAttributes(a1);
  if (!v8)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"security_valid_security_enclave_reference_key",  400LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query attributes.");
    goto LABEL_23;
  }

  uint64_t v9 = v8;
  id v10 = (id)CFDictionaryGetValue(v8, kSecAttrTokenID);
  id v11 = isNSString(v10);

  if (!v11)
  {
    id v27 = createMobileActivationError( (uint64_t)"security_valid_security_enclave_reference_key",  406LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query attribute '%@'.",  kSecAttrTokenID);
LABEL_27:
    id v24 = v27;
    id v26 = 0LL;
    SecKeyRef v50 = 0LL;
    id v18 = 0LL;
    id v52 = 0LL;
LABEL_32:
    id v53 = 0LL;
    goto LABEL_33;
  }

  if (([v10 isEqualToString:kSecAttrTokenIDSecureEnclave] & 1) == 0
    && ([v10 isEqualToString:kSecAttrTokenIDAppleKeyStore] & 1) == 0)
  {
    id v27 = createMobileActivationError( (uint64_t)"security_valid_security_enclave_reference_key",  412LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid key type (actual, expected): (%@, %@)",  v10,  kSecAttrTokenIDSecureEnclave);
    goto LABEL_27;
  }

  id v12 = (id)CFDictionaryGetValue(v9, kSecAttrKeySizeInBits);
  id v13 = isNSNumber(v12);

  id v52 = v12;
  if (!v13)
  {
    id v28 = createMobileActivationError( (uint64_t)"security_valid_security_enclave_reference_key",  418LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query attribute '%@'.",  kSecAttrKeySizeInBits);
LABEL_31:
    id v24 = v28;
    id v26 = 0LL;
    SecKeyRef v50 = 0LL;
    id v18 = 0LL;
    goto LABEL_32;
  }

  if ([v12 unsignedIntValue] != 256
    && [v12 unsignedIntValue] != 384)
  {
    id v28 = createMobileActivationError( (uint64_t)"security_valid_security_enclave_reference_key",  423LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Unsupported key size: %@",  v12);
    goto LABEL_31;
  }

  unsigned int v49 = a3;
  id v14 = (id)CFDictionaryGetValue(v9, kSecAttrKeyType);
  id v15 = isNSString(v14);

  id v53 = v14;
  if (!v15)
  {
    id v29 = createMobileActivationError( (uint64_t)"security_valid_security_enclave_reference_key",  429LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query attribute '%@'.",  kSecAttrKeyType);
LABEL_29:
    id v24 = v29;
    id v26 = 0LL;
    SecKeyRef v50 = 0LL;
    id v18 = 0LL;
LABEL_33:
    id v51 = 0LL;
LABEL_34:
    CFDataRef v25 = v9;
    goto LABEL_35;
  }

  id v16 = v14;
  if ((objc_msgSend(v14, "isEqualToString:") & 1) == 0
    && ([v14 isEqualToString:kSecAttrKeyTypeECSECPrimeRandomPKA] & 1) == 0
    && ([v14 isEqualToString:kSecAttrKeyTypeSecureEnclaveAttestation] & 1) == 0
    && ([v14 isEqualToString:kSecAttrKeyTypeSecureEnclaveAnonymousAttestation] & 1) == 0)
  {
    id v29 = createMobileActivationError( (uint64_t)"security_valid_security_enclave_reference_key",  441LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Unsupported key type: %@",  v14);
    goto LABEL_29;
  }

  if (!a2)
  {
    SecKeyRef v22 = 0LL;
    SecKeyRef v50 = 0LL;
    id v51 = 0LL;
    SecKeyRef v21 = 0LL;
    CFDataRef v20 = 0LL;
    id v34 = 0LL;
    id v24 = 0LL;
    CFDataRef v25 = v9;
LABEL_49:
    if (v49)
    {
      if ([v16 isEqualToString:kSecAttrKeyTypeSecureEnclaveAttestation])
      {
        double v30 = v10;
        unsigned __int8 v39 = 1;
      }

      else
      {
        uint64_t v40 = v16;
        double v30 = v10;
        unsigned __int8 v39 = [v40 isEqualToString:kSecAttrKeyTypeSecureEnclaveAnonymousAttestation];
      }

      CFDataRef v25 = v9;
      unsigned __int8 *v49 = v39;
    }

    else
    {
      double v30 = v10;
    }

    uint64_t v33 = 1LL;
LABEL_38:
    CFRelease(v25);
    uint64_t v35 = v33;
    CFDataRef v36 = v20;
    id v37 = v34;
    goto LABEL_39;
  }

  uint64_t Duplicate = SecKeyCreateDuplicate(a1);
  id v18 = (__SecKey *)Duplicate;
  if (!Duplicate)
  {
    id v41 = createMobileActivationError( (uint64_t)"security_valid_security_enclave_reference_key",  448LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create duplicate RK.");
LABEL_58:
    id v24 = v41;
    id v26 = 0LL;
LABEL_59:
    SecKeyRef v50 = 0LL;
    goto LABEL_33;
  }

  if (!SecKeySetParameter(Duplicate, kSecUseAuthenticationUI, kSecUseAuthenticationUIFail, &error))
  {
    id v41 = createMobileActivationError( (uint64_t)"security_valid_security_enclave_reference_key",  456LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to set RK parameter.");
    goto LABEL_58;
  }

  if (([v16 isEqualToString:kSecAttrKeyTypeECSECPrimeRandom] & 1) != 0
    || [v16 isEqualToString:kSecAttrKeyTypeECSECPrimeRandomPKA])
  {
    CFDataRef v19 = SecKeyCreateSignature( v18,  kSecKeyAlgorithmECDSASignatureMessageX962SHA256,  (CFDataRef)+[NSData data](&OBJC_CLASS___NSData, "data"),  &error);
    if (v19)
    {
      CFDataRef v20 = v19;
      SecKeyRef v21 = v18;
      SecKeyRef v22 = 0LL;
      SecKeyRef v50 = 0LL;
LABEL_69:
      id v34 = 0LL;
      id v51 = 0LL;
      id v24 = 0LL;
      goto LABEL_70;
    }

    if (!mobileactivationErrorHasDomainAndErrorCode(error, TKErrorDomain, (id)0xFFFFFFFFFFFFFFFDLL))
    {
      SecKeyRef v21 = v18;
      SecKeyRef v22 = 0LL;
      SecKeyRef v50 = 0LL;
      CFDataRef v20 = 0LL;
      goto LABEL_69;
    }

    id v41 = createMobileActivationError( (uint64_t)"security_valid_security_enclave_reference_key",  464LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  error,  @"Failed to create test signature.");
    goto LABEL_58;
  }

  uint64_t v42 = SecAccessControlCreate(0LL, &error);
  id v26 = (const void *)v42;
  if (!v42)
  {
    id v47 = createMobileActivationError( (uint64_t)"security_valid_security_enclave_reference_key",  470LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to create access control.");
LABEL_73:
    id v24 = v47;
    goto LABEL_59;
  }

  uint64_t v43 = kSecAttrAccessibleUntilReboot;
  if ((SecAccessControlSetProtection(v42, kSecAttrAccessibleUntilReboot, &error) & 1) == 0)
  {
    id v47 = createMobileActivationError( (uint64_t)"security_valid_security_enclave_reference_key",  475LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to set ACL protection to %@.",  v43);
    goto LABEL_73;
  }

  v56[0] = kSecAttrIsPermanent;
  v56[1] = kSecAttrTokenID;
  v57[0] = &__kCFBooleanFalse;
  v57[1] = kSecAttrTokenIDAppleKeyStore;
  v56[2] = kSecAttrKeyType;
  void v56[3] = kSecAttrAccessControl;
  v57[2] = kSecAttrKeyTypeECSECPrimeRandom;
  void v57[3] = v26;
  v56[4] = kSecAttrKeySizeInBits;
  void v57[4] = &off_10026D638;
  uint64_t v44 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v57,  v56,  5LL);
  SecKeyRef v45 = SecKeyCreateRandomKey((CFDictionaryRef)v44, &error);
  id v51 = v44;
  if (!v45)
  {
    id v24 =  createMobileActivationError( (uint64_t)"security_valid_security_enclave_reference_key",  488LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to create reference key.");
    SecKeyRef v50 = 0LL;
    goto LABEL_34;
  }

  SecKeyRef v46 = v45;
  id v54 = 0LL;
  SecKeyRef v21 = v18;
  id v34 = security_create_attestation((uint64_t)v45, (uint64_t)v18, (NSError **)&v54);
  id v24 = (NSError *)v54;
  SecKeyRef v50 = v46;
  if (v34)
  {
    SecKeyRef v22 = v26;
    CFDataRef v20 = 0LL;
LABEL_70:
    CFDataRef v25 = v9;
    id v16 = v53;
    goto LABEL_49;
  }

  id v48 =  createMobileActivationError( (uint64_t)"security_valid_security_enclave_reference_key",  494LL,  @"com.apple.MobileActivation.ErrorDomain",  -11LL,  v24,  @"Failed to create test attestation.");

  id v24 = v48;
  CFDataRef v25 = v9;
LABEL_35:
  SecKeyRef v22 = v26;
  SecKeyRef v21 = v18;
  double v30 = v10;
  if (a4)
  {
    id v31 = v25;
    id v32 = v24;
    CFDataRef v25 = v31;
    *a4 = v32;
  }

  uint64_t v33 = 0LL;
  CFDataRef v20 = 0LL;
  id v34 = 0LL;
  uint64_t v35 = 0LL;
  CFDataRef v36 = 0LL;
  id v37 = 0LL;
  if (v25) {
    goto LABEL_38;
  }
LABEL_39:
  if (error) {
    CFRelease(error);
  }
  CFErrorRef error = 0LL;
  if (v22) {
    CFRelease(v22);
  }
  if (v50) {
    CFRelease(v50);
  }
  if (v21) {
    CFRelease(v21);
  }

  return v35;
}

uint64_t security_certificate_matches_key(__SecKey *a1, id a2, __SecCertificate *a3, void *a4)
{
  id v7 = a2;
  CFErrorRef error = 0LL;
  if (!a1 || !a3)
  {
    id v11 =  createMobileActivationError( (uint64_t)"security_certificate_matches_key",  533LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
    CFDataRef v10 = 0LL;
    id v12 = 0LL;
    uint64_t v9 = 0LL;
    goto LABEL_20;
  }

  unsigned __int8 v8 = SecKeyCopyPublicKey(a1);
  uint64_t v9 = v8;
  if (!v8)
  {
    id v11 =  createMobileActivationError( (uint64_t)"security_certificate_matches_key",  539LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy RK public key.");
    CFDataRef v10 = 0LL;
LABEL_19:
    id v12 = 0LL;
LABEL_20:
    CFDataRef v14 = 0LL;
    if (!a4) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }

  if (v7)
  {
    CFDataRef v10 = (CFDataRef)v7;
    goto LABEL_9;
  }

  CFDataRef v10 = SecKeyCopyExternalRepresentation(v8, &error);
  if (!v10)
  {
    id v11 =  createMobileActivationError( (uint64_t)"security_certificate_matches_key",  548LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  error,  @"Failed to copy RK public key buffer.");
    goto LABEL_19;
  }

BOOL is_virtual_machine()
{
  int v3 = 0;
  size_t v2 = 4LL;
  return !sysctlbyname("kern.hv_vmm_present", &v3, &v2, 0LL, 0LL) && v3 == 1;
}

uint64_t createXMLRequest(void *a1, NSMutableURLRequest **a2, NSError **a3)
{
  id v5 = a1;
  if (!v5)
  {
    id v7 =  createMobileActivationError( (uint64_t)"createXMLRequest",  57LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    id v6 = 0LL;
    if (!a3)
    {
LABEL_12:
      uint64_t v13 = 0LL;
      uint64_t v9 = 0LL;
      goto LABEL_13;
    }

uint64_t is_erase_installed_build()
{
  if (copyUserDataDisposition_onceToken != -1) {
    dispatch_once(&copyUserDataDisposition_onceToken, &__block_literal_global_8);
  }
  return copyUserDataDisposition_dataDisposition & 1;
}

uint64_t is_upgrade_installed_build()
{
  if (copyUserDataDisposition_onceToken != -1) {
    dispatch_once(&copyUserDataDisposition_onceToken, &__block_literal_global_8);
  }
  return (copyUserDataDisposition_dataDisposition >> 1) & 1;
}

id data_migration_supported()
{
  if (!_os_feature_enabled_impl("UserManagement", "LocalUserEnrollment")
    || (os_variant_is_darwinos([@"com.apple.mobileactivationd" UTF8String]) & 1) != 0
    || !xpc_user_sessions_enabled())
  {
    return 0LL;
  }

  if (copyUserDataDisposition_onceToken != -1) {
    dispatch_once(&copyUserDataDisposition_onceToken, &__block_literal_global_8);
  }
  if ((copyUserDataDisposition_dataDisposition & 2) == 0) {
    return 0LL;
  }
  id v1 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v2 = [v1 getBoolAnswer:@"DeviceSupportsMultiUser"];

  return v2;
}

void __copyUserDataDisposition_block_invoke(id a1)
{
  if ((os_variant_is_darwinos([@"com.apple.mobileactivationd" UTF8String]) & 1) == 0) {
    copyUserDataDisposition_dataDisposition = DMGetUserDataDisposition();
  }
}

uint64_t hasPrimaryICloudAccount(void *a1)
{
  id v2 =  createMobileActivationError( (uint64_t)"hasPrimaryICloudAccount",  44LL,  @"com.apple.MobileActivation.ErrorDomain",  -3LL,  0LL,  @"API not supported on tvOS.");
  int v3 = v2;
  if (a1) {
    *a1 = v2;
  }

  return 0LL;
}

uint64_t primaryICloudAccountIsHSA2(void *a1)
{
  id v2 =  createMobileActivationError( (uint64_t)"primaryICloudAccountIsHSA2",  76LL,  @"com.apple.MobileActivation.ErrorDomain",  -3LL,  0LL,  @"API not supported on tvOS.");
  int v3 = v2;
  if (a1) {
    *a1 = v2;
  }

  return 0LL;
}

uint64_t copyTokenForActivationLock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v6 =  createMobileActivationError( (uint64_t)"copyTokenForActivationLock",  129LL,  @"com.apple.MobileActivation.ErrorDomain",  -3LL,  0LL,  @"API not supported on tvOS.");
  id v7 = v6;
  if (a5) {
    *a5 = v6;
  }

  return 0LL;
}

id libavp_send_host_message(void *a1, void *a2)
{
  id v3 = a1;
  CFTypeRef cf = 0LL;
  if (!is_virtual_machine())
  {
    id v16 =  createMobileActivationError( (uint64_t)"libavp_send_host_message",  60LL,  @"com.apple.MobileActivation.ErrorDomain",  -3LL,  0LL,  @"Device is not a VM (not supported).");
LABEL_18:
    id v12 = v16;
    id v15 = 0LL;
    unint64_t v10 = 0LL;
    id v6 = 0LL;
    id v11 = 0LL;
    CFDictionaryRef v4 = 0LL;
    id v5 = 0LL;
    goto LABEL_19;
  }

  if (!AppleVirtualPlatformLibraryCore_frameworkLibrary)
  {
    __int128 v23 = off_100256B80;
    uint64_t v24 = 0LL;
    AppleVirtualPlatformLibraryCore_frameworkLibrary = _sl_dlopen(&v23, 0LL);
  }

  if (!AppleVirtualPlatformLibraryCore_frameworkLibrary)
  {
    id v16 =  createMobileActivationError( (uint64_t)"libavp_send_host_message",  65LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Virtualization library not loaded on this platform.");
    goto LABEL_18;
  }

  if (!v3)
  {
    id v16 =  createMobileActivationError( (uint64_t)"libavp_send_host_message",  70LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid intput.");
    goto LABEL_18;
  }

  CFDictionaryRef v4 = copy_calling_process_name();
  if (!v4)
  {
    id v16 =  createMobileActivationError( (uint64_t)"libavp_send_host_message",  76LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve process name.");
    goto LABEL_18;
  }

  id v5 = [v3 mutableCopy];
  [v5 setObject:v4 forKeyedSubscript:@"HostProcessName"];
  id v21 = 0LL;
  id v6 =  +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v5,  100LL,  0LL,  &v21);
  id v7 = v21;
  if (!v6)
  {
    id v12 =  createMobileActivationError( (uint64_t)"libavp_send_host_message",  85LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v7,  @"Could not convert dictionary to xml data.");

    id v15 = 0LL;
    unint64_t v10 = 0LL;
    id v6 = 0LL;
LABEL_27:
    id v11 = 0LL;
    goto LABEL_19;
  }

  *(void *)&__int128 v23 = 0LL;
  *((void *)&v23 + 1) = &v23;
  uint64_t v24 = 0x2020000000LL;
  unsigned __int8 v8 = getAppleVirtualPlatformSendSubsystemMessageToHostSymbolLoc_ptr;
  CFDataRef v25 = getAppleVirtualPlatformSendSubsystemMessageToHostSymbolLoc_ptr;
  if (!getAppleVirtualPlatformSendSubsystemMessageToHostSymbolLoc_ptr)
  {
    uint64_t v9 = (void *)AppleVirtualPlatformLibrary();
    unsigned __int8 v8 = dlsym(v9, "AppleVirtualPlatformSendSubsystemMessageToHost");
    *(void *)(*((void *)&v23 + 1) + 24LL) = v8;
    getAppleVirtualPlatformSendSubsystemMessageToHostSymbolLoc_ptr = v8;
  }

  _Block_object_dispose(&v23, 8);
  if (!v8) {
    libavp_send_host_message_cold_1();
  }
  unint64_t v10 = (void *)((uint64_t (*)(uint64_t, NSData *, CFTypeRef *))v8)(6LL, v6, &cf);
  if (!v10)
  {
    id v12 =  createMobileActivationError( (uint64_t)"libavp_send_host_message",  91LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  (void *)cf,  @"Failed to send message to host.");

    id v15 = 0LL;
    unint64_t v10 = 0LL;
    goto LABEL_27;
  }

  id v20 = 0LL;
  id v11 =  +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v10,  0LL,  0LL,  &v20);
  id v12 = (NSError *)v20;

  id v13 = isNSDictionary(v11);
  BOOL v14 = v13 == 0LL;

  if (v14)
  {
    CFDataRef v19 =  createMobileActivationError( (uint64_t)"libavp_send_host_message",  97LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v12,  @"Failed to serialize data as dictionary.");

    id v15 = 0LL;
    id v12 = v19;
  }

  else
  {
    id v15 = v11;
    id v11 = v15;
  }

LABEL_19:
  if (a2 && !v15) {
    *a2 = v12;
  }
  if (cf) {
    CFRelease(cf);
  }
  id v17 = v15;

  return v17;
}

  id v21 = v22;
LABEL_20:
  CFDataRef v25 = *(void *)(a1 + 40);
  if (v25) {
    (*(void (**)(uint64_t, NSMutableDictionary *, id))(v25 + 16))(v25, v22, v37[5]);
  }

  _Block_object_dispose(&v36, 8);
}
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  return v9;
}

          if (v14 != (_BYTE *)-1LL)
          {
            if (v23 <= (unint64_t)(v14 + 1))
            {
              v21[0] = v14 + 1;
              v21[1] = v23 + v22;
              CFDataRef v19 = 0LL;
              id v20 = 0LL;
              id v15 = CTConvertDashTerminatedHexstringTo64BitInteger((uint64_t)v21, &v20);
              Class result = 327697LL;
              if (!v15 && !HIDWORD(v20))
              {
                if (CTConvertDashTerminatedHexstringTo64BitInteger((uint64_t)v21, &v19))
                {
                  return 327698LL;
                }

                else
                {
                  Class result = 0LL;
                  if (a7)
                  {
                    *(_DWORD *)a7 = v20;
                    *(void *)(a7 + _Block_object_dispose(va, 8) = v19;
                  }
                }
              }

              return result;
            }

    __break(0x5519u);
LABEL_20:
    __break(0x5513u);
  }

  return v9 == v10 + v11;
}

void sub_10004C280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

id libavp_copy_strong_identity_data(void *a1, NSError **a2)
{
  id v3 = a1;
  CFTypeRef cf = 0LL;
  if (is_virtual_machine())
  {
    if (!AppleVirtualPlatformLibraryCore_frameworkLibrary)
    {
      __int128 v31 = off_100256B80;
      uint64_t v32 = 0LL;
      AppleVirtualPlatformLibraryCore_frameworkLibrary = _sl_dlopen(&v31, 0LL);
    }

    if (AppleVirtualPlatformLibraryCore_frameworkLibrary)
    {
      CFDictionaryRef v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      if (v4)
      {
        id v5 = [v3 objectForKeyedSubscript:@"NetworkTimeoutInterval"];
        id v6 = isNSNumber(v5);

        if (v6)
        {
          id v7 = [v3 objectForKeyedSubscript:@"NetworkTimeoutInterval"];
          [v7 doubleValue];
          if (v8 <= 0.0)
          {
            uint64_t v9 =  createMobileActivationError( (uint64_t)"libavp_copy_strong_identity_data",  144LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid network timeout requested: %@",  v7);
            goto LABEL_35;
          }
        }

        else
        {
          id v7 = 0LL;
        }

        id v13 =  -[NSMutableDictionary objectForKeyedSubscript:]( v4,  "objectForKeyedSubscript:",  @"SkipNetworkRequest");
        id v14 = isNSNumber(v13);

        if (v14)
        {
          id v15 =  -[NSMutableDictionary objectForKeyedSubscript:]( v4,  "objectForKeyedSubscript:",  @"SkipNetworkRequest");
          id v16 = [v15 BOOLValue];
        }

        else
        {
          id v16 = 0LL;
        }

        *(void *)&__int128 v31 = 0LL;
        *((void *)&v31 + 1) = &v31;
        uint64_t v32 = 0x2020000000LL;
        id v17 = (void *)getkAppleVirtualPlatformGuestStrongIdentityOptionSynchronousSymbolLoc_ptr;
        uint64_t v33 = (void *)getkAppleVirtualPlatformGuestStrongIdentityOptionSynchronousSymbolLoc_ptr;
        if (!getkAppleVirtualPlatformGuestStrongIdentityOptionSynchronousSymbolLoc_ptr)
        {
          id v18 = (void *)AppleVirtualPlatformLibrary();
          id v17 = dlsym(v18, "kAppleVirtualPlatformGuestStrongIdentityOptionSynchronous");
          *(void *)(*((void *)&v31 + 1) + 24LL) = v17;
          getkAppleVirtualPlatformGuestStrongIdentityOptionSynchronousSymbolLoc_ptr = (uint64_t)v17;
        }

        _Block_object_dispose(&v31, 8);
        if (!v17) {
          libavp_copy_strong_identity_data_cold_1();
        }
        -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, *v17);
        CFDataRef v19 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v16);
        *(void *)&__int128 v31 = 0LL;
        *((void *)&v31 + 1) = &v31;
        uint64_t v32 = 0x2020000000LL;
        id v20 = (void *)getkAppleVirtualPlatformGuestStrongIdentityOptionCachedOnlySymbolLoc_ptr;
        uint64_t v33 = (void *)getkAppleVirtualPlatformGuestStrongIdentityOptionCachedOnlySymbolLoc_ptr;
        if (!getkAppleVirtualPlatformGuestStrongIdentityOptionCachedOnlySymbolLoc_ptr)
        {
          id v21 = (void *)AppleVirtualPlatformLibrary();
          id v20 = dlsym(v21, "kAppleVirtualPlatformGuestStrongIdentityOptionCachedOnly");
          *(void *)(*((void *)&v31 + 1) + 24LL) = v20;
          getkAppleVirtualPlatformGuestStrongIdentityOptionCachedOnlySymbolLoc_ptr = (uint64_t)v20;
        }

        _Block_object_dispose(&v31, 8);
        if (!v20) {
          libavp_copy_strong_identity_data_cold_2();
        }
        -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v19, *v20);

        if (v7)
        {
          [v7 doubleValue];
          __int128 v23 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v22 * 1000000000.0);
          *(void *)&__int128 v31 = 0LL;
          *((void *)&v31 + 1) = &v31;
          uint64_t v32 = 0x2020000000LL;
          uint64_t v24 = (void *)getkAppleVirtualPlatformGuestStrongIdentityOptionSynchronousTimeoutNsecSymbolLoc_ptr;
          uint64_t v33 = (void *)getkAppleVirtualPlatformGuestStrongIdentityOptionSynchronousTimeoutNsecSymbolLoc_ptr;
          if (!getkAppleVirtualPlatformGuestStrongIdentityOptionSynchronousTimeoutNsecSymbolLoc_ptr)
          {
            CFDataRef v25 = (void *)AppleVirtualPlatformLibrary();
            uint64_t v24 = dlsym(v25, "kAppleVirtualPlatformGuestStrongIdentityOptionSynchronousTimeoutNsec");
            *(void *)(*((void *)&v31 + 1) + 24LL) = v24;
            getkAppleVirtualPlatformGuestStrongIdentityOptionSynchronousTimeoutNsecSymbolLoc_ptr = (uint64_t)v24;
          }

          _Block_object_dispose(&v31, 8);
          if (!v24) {
            libavp_copy_strong_identity_data_cold_4();
          }
          -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v23, *v24);
        }

        *(void *)&__int128 v31 = 0LL;
        *((void *)&v31 + 1) = &v31;
        uint64_t v32 = 0x2020000000LL;
        id v26 = getAppleVirtualPlatformGuestCopyStrongIdentityDataSymbolLoc_ptr;
        uint64_t v33 = getAppleVirtualPlatformGuestCopyStrongIdentityDataSymbolLoc_ptr;
        if (!getAppleVirtualPlatformGuestCopyStrongIdentityDataSymbolLoc_ptr)
        {
          id v27 = (void *)AppleVirtualPlatformLibrary();
          id v26 = dlsym(v27, "AppleVirtualPlatformGuestCopyStrongIdentityData");
          *(void *)(*((void *)&v31 + 1) + 24LL) = v26;
          getAppleVirtualPlatformGuestCopyStrongIdentityDataSymbolLoc_ptr = v26;
        }

        _Block_object_dispose(&v31, 8);
        if (!v26) {
          libavp_copy_strong_identity_data_cold_3();
        }
        id v28 = (void *)((uint64_t (*)(NSMutableDictionary *, CFTypeRef *))v26)(v4, &cf);
        if (v28)
        {
          id v12 = v28;
          id v11 = 0LL;
          goto LABEL_37;
        }

        uint64_t v9 =  createMobileActivationError( (uint64_t)"libavp_copy_strong_identity_data",  162LL,  @"com.apple.MobileActivation.ErrorDomain",  -24LL,  (void *)cf,  @"Failed to copy AVP guest identity data.");
LABEL_35:
        id v11 = v9;
        if (!a2) {
          goto LABEL_36;
        }
LABEL_13:
        id v11 = v11;
        id v12 = 0LL;
        *a2 = v11;
        goto LABEL_37;
      }

      unint64_t v10 =  createMobileActivationError( (uint64_t)"libavp_copy_strong_identity_data",  137LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate dictionary.");
    }

    else
    {
      unint64_t v10 =  createMobileActivationError( (uint64_t)"libavp_copy_strong_identity_data",  131LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Virtualization library not loaded on this platform.");
    }
  }

  else
  {
    unint64_t v10 =  createMobileActivationError( (uint64_t)"libavp_copy_strong_identity_data",  126LL,  @"com.apple.MobileActivation.ErrorDomain",  -3LL,  0LL,  @"Device is not a VM (not supported).");
  }

  id v11 = v10;
  CFDictionaryRef v4 = 0LL;
  id v7 = 0LL;
  if (a2) {
    goto LABEL_13;
  }
LABEL_36:
  id v12 = 0LL;
LABEL_37:
  if (cf) {
    CFRelease(cf);
  }

  return v12;
}

void sub_10004C7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

const void *libavp_copy_host_key_and_certs_with_data(void *a1, void *a2, NSMutableData **a3, void *a4)
{
  id v7 = a1;
  id v24 = a2;
  if (is_virtual_machine())
  {
    double v8 =  createMobileActivationError( (uint64_t)"libavp_copy_host_key_and_certs_with_data",  192LL,  @"com.apple.MobileActivation.ErrorDomain",  -3LL,  0LL,  @"Device is a VM (not supported).");
    goto LABEL_22;
  }

  if (!AppleVirtualPlatformLibraryCore_frameworkLibrary)
  {
    __int128 v30 = off_100256B80;
    __int128 v31 = 0LL;
    AppleVirtualPlatformLibraryCore_frameworkLibrary = _sl_dlopen(&v30, 0LL);
  }

  if (!AppleVirtualPlatformLibraryCore_frameworkLibrary)
  {
    double v8 =  createMobileActivationError( (uint64_t)"libavp_copy_host_key_and_certs_with_data",  197LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Virtualization library not loaded on this platform.");
    goto LABEL_22;
  }

  if (!v7)
  {
    double v8 =  createMobileActivationError( (uint64_t)"libavp_copy_host_key_and_certs_with_data",  202LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid intput.");
    goto LABEL_22;
  }

  uint64_t v9 = objc_alloc_init(&OBJC_CLASS___NSMutableData);
  if (!v9)
  {
    double v8 =  createMobileActivationError( (uint64_t)"libavp_copy_host_key_and_certs_with_data",  208LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to allocate data.");
LABEL_22:
    id v13 = v8;
    id v12 = 0LL;
    uint64_t v9 = 0LL;
    CFDataRef v18 = 0LL;
    id v17 = 0LL;
    id v20 = 0LL;
    id v15 = 0LL;
    if (!a4) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }

  uint64_t v26 = 0LL;
  id v27 = &v26;
  uint64_t v28 = 0x2050000000LL;
  unint64_t v10 = (void *)getAppleVirtualPlatformHostCertificateClass_softClass;
  uint64_t v29 = getAppleVirtualPlatformHostCertificateClass_softClass;
  if (!getAppleVirtualPlatformHostCertificateClass_softClass)
  {
    *(void *)&__int128 v30 = _NSConcreteStackBlock;
    *((void *)&v30 + 1) = 3254779904LL;
    __int128 v31 = __getAppleVirtualPlatformHostCertificateClass_block_invoke;
    uint64_t v32 = &__block_descriptor_40_e8_32r_e5_v8__0l;
    uint64_t v33 = &v26;
    __getAppleVirtualPlatformHostCertificateClass_block_invoke((uint64_t)&v30);
    unint64_t v10 = (void *)v27[3];
  }

  id v11 = v10;
  _Block_object_dispose(&v26, 8);
  id v25 = 0LL;
  id v12 = [[v11 alloc] initWithDataRepresentation:v7 error:&v25];
  id v13 = (NSError *)v25;
  if (!v12)
  {
    double v22 =  createMobileActivationError( (uint64_t)"libavp_copy_host_key_and_certs_with_data",  214LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v13,  @"Failed to initialize identity data.");

    id v12 = 0LL;
LABEL_33:
    CFDataRef v18 = 0LL;
    id v17 = 0LL;
    id v20 = 0LL;
    id v15 = 0LL;
    goto LABEL_38;
  }

  id v14 = [v12 hostKey];
  id v15 = v14;
  if (!v14)
  {
    double v22 =  createMobileActivationError( (uint64_t)"libavp_copy_host_key_and_certs_with_data",  220LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy AVP host key.");

    goto LABEL_33;
  }

  CFRetain(v14);
  id v16 = (__SecCertificate *)[v12 leafCertificate];
  id v17 = v16;
  if (!v16)
  {
    double v22 =  createMobileActivationError( (uint64_t)"libavp_copy_host_key_and_certs_with_data",  228LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy AVP host leaf certificate.");

    CFDataRef v18 = 0LL;
    id v17 = 0LL;
LABEL_37:
    id v20 = 0LL;
    goto LABEL_38;
  }

  CFRetain(v16);
  CFDataRef v18 = SecCertificateCopyData(v17);
  if (!v18)
  {
    double v22 =  createMobileActivationError( (uint64_t)"libavp_copy_host_key_and_certs_with_data",  236LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create PEM data from cert.");

    CFDataRef v18 = 0LL;
    goto LABEL_37;
  }

  -[NSMutableData appendData:](v9, "appendData:", v18);
  CFDataRef v19 = (__SecCertificate *)[v12 intermediateCertificate];
  id v20 = v19;
  if (!v19)
  {
    double v22 =  createMobileActivationError( (uint64_t)"libavp_copy_host_key_and_certs_with_data",  244LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy AVP host intermediate certificate.");

    goto LABEL_37;
  }

  CFRetain(v19);
  CFDataRef v23 = SecCertificateCopyData(v20);

  if (v23)
  {
    -[NSMutableData appendData:](v9, "appendData:");
    if (a3)
    {
      uint64_t v9 = v9;
      *a3 = v9;
    }

    CFDataRef v18 = v23;
    goto LABEL_27;
  }

  double v22 =  createMobileActivationError( (uint64_t)"libavp_copy_host_key_and_certs_with_data",  252LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create PEM data from cert.");

  CFDataRef v18 = 0LL;
LABEL_38:
  id v13 = v22;
  if (a4) {
LABEL_23:
  }
    *a4 = v13;
LABEL_24:
  if (v15) {
    CFRelease(v15);
  }
  id v15 = 0LL;
  if (v17) {
LABEL_27:
  }
    CFRelease(v17);
  if (v20) {
    CFRelease(v20);
  }

  return v15;
}

void sub_10004CD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t libavp_guest_has_host_key(void *a1)
{
  if (!is_virtual_machine())
  {
    id v7 =  createMobileActivationError( (uint64_t)"libavp_guest_has_host_key",  285LL,  @"com.apple.MobileActivation.ErrorDomain",  -3LL,  0LL,  @"Device is not a VM (not supported).");
    goto LABEL_12;
  }

  if (!AppleVirtualPlatformLibraryCore_frameworkLibrary)
  {
    __int128 v9 = off_100256B80;
    uint64_t v10 = 0LL;
    AppleVirtualPlatformLibraryCore_frameworkLibrary = _sl_dlopen(&v9, 0LL);
  }

  if (!AppleVirtualPlatformLibraryCore_frameworkLibrary)
  {
    id v7 =  createMobileActivationError( (uint64_t)"libavp_guest_has_host_key",  290LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Virtualization library not loaded on this platform.");
LABEL_12:
    id v6 = v7;
    uint64_t v5 = 0LL;
    if (!a1) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }

  *(void *)&__int128 v9 = 0LL;
  *((void *)&v9 + 1) = &v9;
  uint64_t v10 = 0x2020000000LL;
  id v2 = getAppleVirtualPlatformGuestHasHostKeySymbolLoc_ptr;
  id v11 = getAppleVirtualPlatformGuestHasHostKeySymbolLoc_ptr;
  if (!getAppleVirtualPlatformGuestHasHostKeySymbolLoc_ptr)
  {
    id v3 = (void *)AppleVirtualPlatformLibrary();
    id v2 = dlsym(v3, "AppleVirtualPlatformGuestHasHostKey");
    *(void *)(*((void *)&v9 + 1) + 24LL) = v2;
    getAppleVirtualPlatformGuestHasHostKeySymbolLoc_ptr = v2;
  }

  _Block_object_dispose(&v9, 8);
  if (!v2) {
    libavp_guest_has_host_key_cold_1();
  }
  uint64_t v5 = ((uint64_t (*)(uint64_t))v2)(v4);
  id v6 = 0LL;
  if (a1)
  {
LABEL_13:
    if ((v5 & 1) == 0) {
      *a1 = v6;
    }
  }

void sub_10004CF24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t AppleVirtualPlatformLibrary()
{
  id v2 = 0LL;
  if (!AppleVirtualPlatformLibraryCore_frameworkLibrary)
  {
    __int128 v3 = off_100256B80;
    uint64_t v4 = 0LL;
    AppleVirtualPlatformLibraryCore_frameworkLibrary = _sl_dlopen(&v3, &v2);
  }

  uint64_t v0 = AppleVirtualPlatformLibraryCore_frameworkLibrary;
  if (!AppleVirtualPlatformLibraryCore_frameworkLibrary) {
    AppleVirtualPlatformLibrary_cold_1(&v2);
  }
  if (v2) {
    free(v2);
  }
  return v0;
}

Class __getAppleVirtualPlatformHostCertificateClass_block_invoke(uint64_t a1)
{
  if (!AppleVirtualPlatformLibraryCore_frameworkLibrary)
  {
    __int128 v3 = off_100256B80;
    uint64_t v4 = 0LL;
    AppleVirtualPlatformLibraryCore_frameworkLibrary = _sl_dlopen(&v3, 0LL);
  }

  Class result = objc_getClass("AppleVirtualPlatformHostCertificate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  getAppleVirtualPlatformHostCertificateClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

char *OUTLINED_FUNCTION_1_0()
{
  return dlerror();
}

void OUTLINED_FUNCTION_2_1()
{
}

void sub_10004E0C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, char a40)
{
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

void __copy_helper_block_e8_32s40s48s56r64r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  id v6 = *(id *)(a2 + 48);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 8);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 8);
}

void __destroy_helper_block_e8_32s40s48s56r64r(uint64_t a1)
{
}

void sub_10004E75C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void __copy_helper_block_e8_32b(uint64_t a1, uint64_t a2)
{
}

void sub_10004F8C8(_Unwind_Exception *a1)
{
}

LABEL_47:
  id v61 = -[NSDictionary objectForKeyedSubscript:](v16, "objectForKeyedSubscript:", @"ActivationInfoXML");
  SecKeyRef v45 = objc_alloc(&OBJC_CLASS___NSMutableDictionary);
  v94[0] = v61;
  v93[0] = @"ActivationInfoXML";
  v93[1] = @"FairPlaySignature";
  unsigned int v62 = -[NSDictionary objectForKeyedSubscript:](v16, "objectForKeyedSubscript:");
  v94[1] = v62;
  v93[2] = @"FairPlayCertChain";
  SecKeyRef v46 = -[NSDictionary objectForKeyedSubscript:](v16, "objectForKeyedSubscript:");
  v94[2] = v46;
  v93[3] = @"RKCertification";
  id v47 = -[NSDictionary objectForKeyedSubscript:](v16, "objectForKeyedSubscript:");
  v94[3] = v47;
  v93[4] = @"RKSignature";
  id v48 = -[NSDictionary objectForKeyedSubscript:](v16, "objectForKeyedSubscript:");
  v94[4] = v48;
  unsigned int v49 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v94,  v93,  5LL);
  uint64_t v40 = -[NSMutableDictionary initWithDictionary:](v45, "initWithDictionary:", v49);

  SecKeyRef v50 = (dispatch_queue_s *)[*(id *)(a1 + 32) sessionQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3254779904LL;
  block[2] = __82__MobileActivationDaemon_createTunnel1ActivationInfo_options_withCompletionBlock___block_invoke_2;
  block[3] = &__block_descriptor_96_e8_32s40s48r56r64r72r80r88r_e5_v8__0l;
  id v51 = *(void *)(a1 + 72);
  void block[4] = *(void *)(a1 + 32);
  id v65 = v51;
  id v66 = v75;
  unsigned __int8 v39 = v61;
  id v64 = v39;
  id v67 = &v89;
  unsigned int v68 = &v85;
  uint64_t v69 = &v81;
  unsigned __int8 v70 = &v77;
  dispatch_sync(v50, block);

  if (*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL))
  {
    p_isa = (NSString *)&v40->super.super.isa;
    goto LABEL_30;
  }

  id v52 = objc_alloc(&OBJC_CLASS___NSData);
  id v53 = -[NSData initWithBytes:length:](v52, "initWithBytes:length:", v82[3], *((unsigned int *)v78 + 6));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v40, "setObject:forKeyedSubscript:", v53, @"serverKP");

  id v54 = objc_alloc(&OBJC_CLASS___NSData);
  id v55 = -[NSData initWithBytes:length:](v54, "initWithBytes:length:", v90[3], *((unsigned int *)v86 + 6));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v40, "setObject:forKeyedSubscript:", v55, @"signActRequest");

  p_isa = dictionary_to_xml((uint64_t)v40);
  maLog( (uint64_t)"-[MobileActivationDaemon createTunnel1ActivationInfo:options:withCompletionBlock:]_block_invoke",  0LL,  @"Activation info: \n%@",  p_isa);
LABEL_31:

  id v41 = v90[3];
  if (v41) {
    ewFHQ(v41);
  }
  uint64_t v42 = v82[3];
  if (v42) {
    ewFHQ(v42);
  }
  uint64_t v43 = *(void *)(a1 + 64);
  if (v43) {
    (*(void (**)(uint64_t, NSMutableDictionary *, void))(v43 + 16))( v43,  v40,  *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL));
  }

  _Block_object_dispose(v75, 8);
  _Block_object_dispose(&v77, 8);
  _Block_object_dispose(&v81, 8);
  _Block_object_dispose(&v85, 8);
  _Block_object_dispose(&v89, 8);
}

void sub_10005048C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41, uint64_t a42, uint64_t a43, uint64_t a44, char a45)
{
}

void __copy_helper_block_e8_32s40s48r56r64r72r80r88r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  _Block_object_assign((void *)(a1 + 48), *(const void **)(a2 + 48), 8);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 8);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 8);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 8);
  _Block_object_assign((void *)(a1 + 80), *(const void **)(a2 + 80), 8);
  _Block_object_assign((void *)(a1 + 88), *(const void **)(a2 + 88), 8);
}

void __destroy_helper_block_e8_32s40s48r56r64r72r80r88r(uint64_t a1)
{
}

void __copy_helper_block_e8_32s40s48s56s64b72r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  id v6 = *(id *)(a2 + 48);
  id v7 = *(id *)(a2 + 56);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 7);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 8);
}

void sub_100051174( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void __copy_helper_block_e8_32s40s48r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  _Block_object_assign((void *)(a1 + 48), *(const void **)(a2 + 48), 8);
}

void __destroy_helper_block_e8_32s40s48r(uint64_t a1)
{
}

void sub_100053BA8(_Unwind_Exception *a1)
{
}

void __copy_helper_block_e8_32s40b48r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 7);
  _Block_object_assign((void *)(a1 + 48), *(const void **)(a2 + 48), 8);
}

void __copy_helper_block_e8_32s40s48b56r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  _Block_object_assign((void *)(a1 + 48), *(const void **)(a2 + 48), 7);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 8);
}

void sub_100054D1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
}

void __copy_helper_block_e8_32s40b48r56r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 7);
  _Block_object_assign((void *)(a1 + 48), *(const void **)(a2 + 48), 8);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 8);
}

void __destroy_helper_block_e8_32s40s48r56r(uint64_t a1)
{
}

LABEL_32:
  CFErrorRef v38 = 0;
LABEL_33:
  unsigned __int8 v39 = -[MobileActivationDaemon dark](self, "dark");
  uint64_t v40 = data_ark_copy(v39, 0LL, @"ActivationState");
  __int128 v30 = (__CFString *)isNSString(v40);

  if (v30)
  {
    if ((v38 & 1) != 0)
    {
LABEL_35:
      uint64_t v28 = 0LL;
      uint64_t v29 = 0LL;
      CFTypeRef cf = 0LL;
      goto LABEL_36;
    }
  }

  else
  {
    __int128 v30 = @"Unactivated";
    if ((v38 & 1) != 0) {
      goto LABEL_35;
    }
  }

  if ((-[__CFString isEqualToString:](v30, "isEqualToString:", @"Activated") & 1) == 0)
  {
    id v27 =  createAndLogError( (uint64_t)"-[MobileActivationDaemon copyAttestationDictionaryWithCompletionBlock:options:completion:]",  1723LL,  @"com.apple.MobileActivation.ErrorDomain",  -8LL,  0LL,  @"Device is not activated: %@",  v30);
    uint64_t v28 = 0LL;
    uint64_t v29 = 0LL;
    goto LABEL_22;
  }

  uint64_t v42 = -[MobileActivationDaemon dark](self, "dark");
  uint64_t v28 = data_ark_copy(v42, 0LL, @"UCRTHealingRequired");

  uint64_t v43 = isNSNumber(v28);
  LODWORD(v42) = v43 == 0LL;

  if ((_DWORD)v42)
  {

    uint64_t v28 = &__kCFBooleanFalse;
  }

  uint64_t v44 = -[MobileActivationDaemon dark](self, "dark");
  uint64_t v29 = data_ark_copy(v44, 0LL, @"UCRTOOBForbidden");

  uint64_t v45 = isNSNumber(v29);
  LODWORD(v44) = v45 == 0LL;

  if ((_DWORD)v44)
  {

    uint64_t v29 = &__kCFBooleanFalse;
  }

  if ([v28 BOOLValue])
  {
    SecKeyRef v46 = (id *)(v66 + 5);
    id obj = (id)v66[5];
    id v47 = ucrtHealingSupported();
    objc_storeStrong(v46, obj);
    id v48 = (void *)v66[5];
    if (v48)
    {
      id v27 =  createMobileActivationError( (uint64_t)"-[MobileActivationDaemon copyAttestationDictionaryWithCompletionBlock:options:completion:]",  1743LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v48,  @"Failed to query UCRT healing support.");
    }

    else if ((v47 & 1) != 0)
    {
      if ([v29 BOOLValue]) {
        id v27 =  createMobileActivationError( (uint64_t)"-[MobileActivationDaemon copyAttestationDictionaryWithCompletionBlock:options:completion:]",  1753LL,  @"com.apple.MobileActivation.ErrorDomain",  -16LL,  0LL,  @"UCRT healing required but not supported (max failure retries attempted).");
      }
      else {
        id v27 =  createMobileActivationError( (uint64_t)"-[MobileActivationDaemon copyAttestationDictionaryWithCompletionBlock:options:completion:]",  1757LL,  @"com.apple.MobileActivation.ErrorDomain",  -16LL,  0LL,  @"UCRT healing required but not performed yet (try again later).");
      }
    }

    else
    {
      id v27 =  createMobileActivationError( (uint64_t)"-[MobileActivationDaemon copyAttestationDictionaryWithCompletionBlock:options:completion:]",  1748LL,  @"com.apple.MobileActivation.ErrorDomain",  -16LL,  0LL,  @"UCRT healing required but not supported (user signed into non-HSA2 iCloud account).");
    }

    goto LABEL_22;
  }

  unsigned int v49 = -[MobileActivationDaemon dark](self, "dark");
  SecKeyRef v50 = (id *)(v66 + 5);
  uint32_t v59 = (id)v66[5];
  id v51 = v49;
  CFTypeRef cf = copyUCRT(v49, (NSError **)&v59);
  objc_storeStrong(v50, v59);

  if (!cf)
  {
    id v27 =  createAndLogError( (uint64_t)"-[MobileActivationDaemon copyAttestationDictionaryWithCompletionBlock:options:completion:]",  1763LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  (id)v66[5],  @"Failed to copy UCRT.");
    goto LABEL_22;
  }

                  __break(0x5519u);
                  goto LABEL_33;
                }

      __break(0x5513u);
    }
  }

  return result;
}

void sub_100056198( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

void __copy_helper_block_e8_32s40s48s56b64r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  id v6 = *(id *)(a2 + 48);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 7);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 8);
}

void sub_1000571B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

LABEL_103:
  id v12 = v136;
LABEL_76:
  id v96 = v7;
  if (*(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL))
  {
    id v97 = v13;
    uint64_t v98 = v11;
    uint64_t v99 = v12;
    id v100 = [*(id *)(a1 + 72) dark];
    writeSplunkLog( v100,  27LL,  (uint64_t)v164,  (uint64_t)"-[MobileActivationDaemon updateBasebandTicket:baaCertData:baaIntermediateCert:options:withCompletionBlock:]_block_invoke",  2176,  v146,  @"%@",  v101,  *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL));
    id v102 = v100;
    id v12 = v99;
    uint64_t v11 = v98;
    id v13 = v97;
  }

  (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
  if (v13) {
    CFRelease(v13);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (error) {
    CFRelease(error);
  }
}

void __copy_helper_block_e8_32s40s48r56r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  _Block_object_assign((void *)(a1 + 48), *(const void **)(a2 + 48), 8);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 8);
}

void __copy_helper_block_e8_32s40s48s56s64s72s80s88b96r104r(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 32);
  id v5 = *(id *)(a2 + 40);
  id v6 = *(id *)(a2 + 48);
  id v7 = *(id *)(a2 + 56);
  id v8 = *(id *)(a2 + 64);
  id v9 = *(id *)(a2 + 72);
  id v10 = *(id *)(a2 + 80);
  _Block_object_assign((void *)(a1 + 88), *(const void **)(a2 + 88), 7);
  _Block_object_assign((void *)(a1 + 96), *(const void **)(a2 + 96), 8);
  _Block_object_assign((void *)(a1 + 104), *(const void **)(a2 + 104), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64s72s80s88s96r104r(uint64_t a1)
{
}

LABEL_33:
  if (v7) {
    (*((void (**)(id, void, NSError *))v7 + 2))(v7, 0LL, v32);
  }
LABEL_35:
}

  uint64_t v11 = v23;
  a4 = v29;
  if (v29)
  {
LABEL_34:
    uint64_t v11 = v11;
    id v24 = (void *)a4;
    a4 = 0LL;
    void *v24 = v11;
  }

void sub_10005B324( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

void *copySignpostLoggingHandle()
{
  if (copySignpostLoggingHandle_onceToken != -1) {
    dispatch_once(&copySignpostLoggingHandle_onceToken, &__block_literal_global_10);
  }
  return copySignpostLoggingHandle_logHandle;
}

void __copySignpostLoggingHandle_block_invoke(id a1)
{
  os_log_t v1 = os_log_create("com.apple.mobileactivationd", "analytics");
  id v2 = copySignpostLoggingHandle_logHandle;
  copySignpostLoggingHandle_logHandle = v1;
}

void **libaks_ref_key_create(int a1, unsigned int a2, void *a3)
{
  uint64_t v11 = 0LL;
  if (a1 == 13) {
    int v6 = -1;
  }
  else {
    int v6 = 0;
  }
  uint64_t v7 = aks_ref_key_create(v6, a1, a2, 0LL, 0LL, &v11);
  if (!(_DWORD)v7)
  {
    id v8 = 0LL;
    id v9 = v11;
    uint64_t v11 = 0LL;
    if (!a3) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }

  id v8 =  createMobileActivationError( (uint64_t)"libaks_ref_key_create",  31LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create ref key: 0x%08x",  v7);
  if (v11) {
    aks_ref_key_free((uint64_t *)&v11);
  }
  id v9 = 0LL;
  if (a3)
  {
LABEL_10:
    if (!v9) {
      *a3 = v8;
    }
  }

uint64_t libaks_ref_key_create_with_blob(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = v3;
  uint64_t v10 = 0LL;
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = aks_ref_key_create_with_blob(0, [v5 bytes], (size_t)objc_msgSend(v5, "length"), &v10);
    if (!(_DWORD)v6)
    {
      uint64_t v7 = 0LL;
      uint64_t v8 = v10;
      uint64_t v10 = 0LL;
      if (!a2) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }

    uint64_t v7 =  createMobileActivationError( (uint64_t)"libaks_ref_key_create_with_blob",  66LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create ref key from data: 0x%08x",  v6);
    if (v10) {
      aks_ref_key_free(&v10);
    }
  }

  else
  {
    uint64_t v7 =  createMobileActivationError( (uint64_t)"libaks_ref_key_create_with_blob",  60LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
  }

  uint64_t v8 = 0LL;
  if (!a2) {
    goto LABEL_11;
  }
LABEL_9:
  if (!v8) {
    *a2 = v7;
  }
LABEL_11:

  return v8;
}

NSData *libaks_ref_key_get_public(uint64_t *a1, NSError **a2)
{
  uint64_t v14 = 0LL;
  if (a1)
  {
    uint64_t public_key = aks_ref_key_get_public_key(a1, &v14);
    if (!public_key)
    {
      MobileActivationError = createMobileActivationError( (uint64_t)"libaks_ref_key_get_public",  102LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query public key.");
      goto LABEL_9;
    }

    uint64_t v4 = public_key;
    id v5 = objc_alloc(&OBJC_CLASS___NSData);
    uint64_t v6 = -[NSData initWithBytes:length:](v5, "initWithBytes:length:", v4, v14);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = 0LL;
      goto LABEL_12;
    }

    id v9 = @"Failed to create data.";
    uint64_t v10 = 108LL;
  }

  else
  {
    id v9 = @"Invalid input(s).";
    uint64_t v10 = 96LL;
  }

  MobileActivationError = createMobileActivationError( (uint64_t)"libaks_ref_key_get_public",  v10,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  v9);
LABEL_9:
  id v12 = MobileActivationError;
  uint64_t v8 = v12;
  if (a2)
  {
    uint64_t v8 = v12;
    uint64_t v7 = 0LL;
    *a2 = v8;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

uint64_t libaks_system_key_operate(uint64_t a1, uint64_t a2, NSError **a3)
{
  if ((a1 - 15) >= 0xFFFFFFF2 && (a2 - 4) > 0xFFFFFFFC)
  {
    uint64_t v8 = aks_system_key_operate(a1, a2, 0LL, 0LL);
    if (!(_DWORD)v8)
    {
      uint64_t v10 = 0LL;
      uint64_t v11 = 1LL;
      goto LABEL_15;
    }

    if ((_DWORD)v8 == -536870170) {
      uint64_t v9 = -3LL;
    }
    else {
      uint64_t v9 = -1LL;
    }
    MobileActivationError = createMobileActivationError( (uint64_t)"libaks_system_key_operate",  138LL,  @"com.apple.MobileActivation.ErrorDomain",  v9,  0LL,  @"Failed to perform system key (%d) operation (%d): 0x%08x",  a1,  a2,  v8);
  }

  else
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"libaks_system_key_operate",  132LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
  }

  uint64_t v10 = MobileActivationError;
  if (a3)
  {
    uint64_t v10 = v10;
    uint64_t v11 = 0LL;
    *a3 = v10;
  }

  else
  {
    uint64_t v11 = 0LL;
  }

NSData *libaks_system_key_get_public(uint64_t a1, uint64_t a2, NSError **a3)
{
  uint64_t v20 = 0LL;
  id v21 = 0LL;
  if ((a1 - 15) < 0xFFFFFFF2 || (a2 - 4) <= 0xFFFFFFFC)
  {
    id v5 = @"Invalid input(s).";
    uint64_t v6 = 165LL;
LABEL_6:
    uint64_t v7 = -2LL;
    goto LABEL_9;
  }

  uint64_t v10 = aks_system_key_get_public(a1, a2, 0LL, 0LL, &v21, &v20);
  if (!(_DWORD)v10)
  {
    uint64_t v14 = objc_alloc(&OBJC_CLASS___NSData);
    id v15 = -[NSData initWithBytesNoCopy:length:](v14, "initWithBytesNoCopy:length:", v21, v20);
    if (v15)
    {
      id v21 = 0LL;
      id v13 = v15;
      id v12 = 0LL;
      goto LABEL_14;
    }

    id v5 = @"Failed to create data.";
    uint64_t v6 = 177LL;
    goto LABEL_6;
  }

  uint64_t v18 = a2;
  uint64_t v19 = v10;
  uint64_t v17 = a1;
  id v5 = @"Failed to query system key (%d / %d) public key: 0x%08x";
  uint64_t v6 = 171LL;
  uint64_t v7 = -1LL;
LABEL_9:
  uint64_t v11 =  createMobileActivationError( (uint64_t)"libaks_system_key_get_public",  v6,  @"com.apple.MobileActivation.ErrorDomain",  v7,  0LL,  v5,  v17,  v18,  v19);
  id v12 = v11;
  if (a3)
  {
    id v12 = v11;
    id v13 = 0LL;
    *a3 = v12;
  }

  else
  {
    id v13 = 0LL;
  }

NSData *libaks_system_key_collection(uint64_t a1, uint64_t a2, unsigned int a3, id a4, NSError **a5)
{
  id v9 = a4;
  uint64_t v10 = v9;
  uint64_t v33 = 0LL;
  uint64_t v34 = a3;
  uint64_t v31 = 0LL;
  uint64_t v32 = 0LL;
  uint64_t v29 = 0LL;
  __int128 v30 = 0LL;
  if (a3 <= 0x3F && (a1 - 15) >= 0xFFFFFFF2 && (a2 - 4) > 0xFFFFFFFC)
  {
    if (a3 || v9)
    {
      uint64_t v18 = (void **)aks_params_create(0LL, 0LL);
      uint64_t v11 = v18;
      uint64_t v33 = v18;
      if (!v18)
      {
        uint64_t v20 = @"Failed to create aks params.";
        uint64_t v21 = 219LL;
        goto LABEL_24;
      }

      if (a3)
      {
        uint64_t v19 = aks_params_set_number(v18, 18, &v34);
        if ((_DWORD)v19)
        {
          uint64_t v28 = v19;
          uint64_t v20 = @"Failed to set aks data: 0x%08x";
          uint64_t v21 = 226LL;
          goto LABEL_24;
        }
      }

      if (v10)
      {
        id v24 = v10;
        uint64_t v25 = aks_params_set_data(v11, 3, (uint64_t)[v24 bytes], (uint64_t)objc_msgSend(v24, "length"));
        if ((_DWORD)v25)
        {
          uint64_t v28 = v25;
          uint64_t v20 = @"Failed to set aks data: 0x%08x";
          uint64_t v21 = 234LL;
          goto LABEL_24;
        }
      }

      uint64_t der = aks_params_get_der(v11, &v32, &v31);
      if ((_DWORD)der)
      {
        uint64_t v28 = der;
        uint64_t v20 = @"Failed to get DER encoded aks params: 0x%08x";
        uint64_t v21 = 241LL;
        goto LABEL_24;
      }

      uint64_t v12 = v31;
      id v13 = v32;
    }

    else
    {
      uint64_t v11 = 0LL;
      uint64_t v12 = 0LL;
      id v13 = 0LL;
    }

    uint64_t v14 = aks_system_key_collection(a1, a2, (uint64_t)v13, v12, &v30, &v29);
    if ((_DWORD)v14)
    {
      MobileActivationError = createMobileActivationError( (uint64_t)"libaks_system_key_collection",  248LL,  @"com.apple.MobileActivation.ErrorDomain",  -11LL,  0LL,  @"Failed to perform system key (%d / %d) collection (options=%lld): 0x%08x",  a1,  a2,  v34,  v14);
      goto LABEL_25;
    }

    double v22 = objc_alloc(&OBJC_CLASS___NSData);
    CFDataRef v23 = -[NSData initWithBytesNoCopy:length:](v22, "initWithBytesNoCopy:length:", v30, v29);
    if (v23)
    {
      __int128 v30 = 0LL;
      uint64_t v17 = v23;
      id v16 = 0LL;
      goto LABEL_27;
    }

    uint64_t v20 = @"Failed to create data.";
    uint64_t v21 = 254LL;
LABEL_24:
    MobileActivationError = createMobileActivationError( (uint64_t)"libaks_system_key_collection",  v21,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  v20,  v28);
LABEL_25:
    id v16 = MobileActivationError;
    if (!a5) {
      goto LABEL_26;
    }
LABEL_10:
    id v16 = v16;
    uint64_t v17 = 0LL;
    *a5 = v16;
    goto LABEL_27;
  }

  id v16 =  createMobileActivationError( (uint64_t)"libaks_system_key_collection",  212LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
  uint64_t v11 = 0LL;
  if (a5) {
    goto LABEL_10;
  }
LABEL_26:
  uint64_t v17 = 0LL;
LABEL_27:
  if (v11) {
    aks_params_free(&v33);
  }
  if (v30) {
    free(v30);
  }
  __int128 v30 = 0LL;
  if (v32) {
    free(v32);
  }
  uint64_t v32 = 0LL;

  return v17;
}

NSData *libaks_system_key_attest(uint64_t a1, uint64_t a2, uint64_t a3, NSError **a4)
{
  uint64_t v15 = 0LL;
  id v16 = 0LL;
  if (a1 && (a2 - 15) >= 0xFFFFFFF2 && (a3 - 4) > 0xFFFFFFFC)
  {
    uint64_t v7 = aks_system_key_attest(a2, a3, a1, 0LL, 0LL, &v16, &v15);
    if ((_DWORD)v7)
    {
      MobileActivationError = createMobileActivationError( (uint64_t)"libaks_system_key_attest",  295LL,  @"com.apple.MobileActivation.ErrorDomain",  -11LL,  0LL,  @"Failed to attest ref key to systemKey (%d / %d): 0x%08x",  a2,  a3,  v7);
    }

    else
    {
      uint64_t v12 = objc_alloc(&OBJC_CLASS___NSData);
      id v13 = -[NSData initWithBytesNoCopy:length:](v12, "initWithBytesNoCopy:length:", v16, v15);
      if (v13)
      {
        id v16 = 0LL;
        uint64_t v11 = v13;
        uint64_t v10 = 0LL;
        goto LABEL_12;
      }

      MobileActivationError = createMobileActivationError( (uint64_t)"libaks_system_key_attest",  301LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to encode RK attestation data.");
    }
  }

  else
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"libaks_system_key_attest",  289LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
  }

  id v9 = MobileActivationError;
  uint64_t v10 = v9;
  if (a4)
  {
    uint64_t v10 = v9;
    uint64_t v11 = 0LL;
    *a4 = v10;
  }

  else
  {
    uint64_t v11 = 0LL;
  }

uint64_t isRunningInRecovery()
{
  return 0LL;
}

uint64_t isRunningInRootLaunchdContext()
{
  return 0LL;
}

uint64_t isRunningInDiagnosticsMode()
{
  if (isRunningInDiagnosticsMode_onceToken != -1) {
    dispatch_once(&isRunningInDiagnosticsMode_onceToken, &__block_literal_global_11);
  }
  return isRunningInDiagnosticsMode_retval;
}

void __isRunningInDiagnosticsMode_block_invoke(id a1)
{
  os_log_t v1 = (void *)MGCopyAnswer(@"3kmXfug8VcxLI5yEmsqQKw", 0LL);
  id v2 = isNSNumber(v1);

  if (v2) {
    isRunningInDiagnosticsMode_retval = [v1 BOOLValue];
  }
}

id isNSNumber(void *a1)
{
  id v1 = a1;
  if (v1 && (uint64_t v2 = objc_opt_class(&OBJC_CLASS___NSNumber), (objc_opt_isKindOfClass(v1, v2) & 1) != 0)) {
    id v3 = v1;
  }
  else {
    id v3 = 0LL;
  }

  return v3;
}

uint64_t isSupportedDeviceIdentityClient(int a1, NSError **a2)
{
  if (isSupportedDeviceIdentityClient_onceToken != -1) {
    dispatch_once(&isSupportedDeviceIdentityClient_onceToken, &__block_literal_global_2_0);
  }
  uint64_t v4 = copy_process_name(a1);
  if (!v4)
  {
    uint64_t v8 =  createMobileActivationError( (uint64_t)"isSupportedDeviceIdentityClient",  295LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query process name.");
    id v7 = 0LL;
    if (a2)
    {
LABEL_12:
      uint64_t v8 = v8;
      uint64_t v9 = 0LL;
      *a2 = v8;
      goto LABEL_15;
    }

void __isSupportedDeviceIdentityClient_block_invoke(id a1)
{
  id v1 = (void *)isSupportedDeviceIdentityClient_virtualDeviceSupportedList;
  isSupportedDeviceIdentityClient_virtualDeviceSupportedList = (uint64_t)&off_10026DB00;

  uint64_t v2 = (void *)isSupportedDeviceIdentityClient_physicalDeviceSupportedList;
  isSupportedDeviceIdentityClient_physicalDeviceSupportedList = (uint64_t)&off_10026DB18;
}

NSString *copy_calling_process_name()
{
  return copy_process_name(1);
}

NSString *copy_current_process_name()
{
  return copy_process_name(0);
}

id isSupportedRecoveryLogClient(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (isSupportedRecoveryLogClient_onceToken != -1)
  {
    dispatch_once(&isSupportedRecoveryLogClient_onceToken, &__block_literal_global_239);
    if (v2) {
      goto LABEL_3;
    }
LABEL_5:
    id v3 = 0LL;
    goto LABEL_6;
  }

  if (!v1) {
    goto LABEL_5;
  }
LABEL_3:
  id v3 = [(id)isSupportedRecoveryLogClient_supportedList containsObject:v2];
LABEL_6:

  return v3;
}

void __isSupportedRecoveryLogClient_block_invoke(id a1)
{
  id v1 = (void *)isSupportedRecoveryLogClient_supportedList;
  isSupportedRecoveryLogClient_supportedList = (uint64_t)&off_10026DB30;
}

uint64_t isSupportedActivationLockClient(int a1, NSError **a2)
{
  if (isSupportedActivationLockClient_onceToken != -1) {
    dispatch_once(&isSupportedActivationLockClient_onceToken, &__block_literal_global_260);
  }
  uint64_t v4 = copy_process_name(a1);
  if (!v4)
  {
    BOOL v5 =  createMobileActivationError( (uint64_t)"isSupportedActivationLockClient",  372LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to query process name.");
    if (a2)
    {
LABEL_10:
      BOOL v5 = v5;
      uint64_t v6 = 0LL;
      *a2 = v5;
      goto LABEL_13;
    }

void __isSupportedActivationLockClient_block_invoke(id a1)
{
  id v1 = (void *)isSupportedActivationLockClient_supportedList;
  isSupportedActivationLockClient_supportedList = (uint64_t)&off_10026DB48;
}

NSArray *copy_sorted_file_list(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
  id v3 = +[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v1);

  uint64_t v4 = +[NSArray arrayWithObject:](&OBJC_CLASS___NSArray, "arrayWithObject:", NSURLCreationDateKey);
  BOOL v5 =  -[NSFileManager contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:]( v2,  "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:",  v3,  v4,  4LL,  0LL);

  if (v5 && -[NSArray count](v5, "count")) {
    uint64_t v6 = -[NSArray sortedArrayUsingComparator:](v5, "sortedArrayUsingComparator:", &__block_literal_global_266);
  }
  else {
    uint64_t v6 = 0LL;
  }

  return v6;
}

int64_t __copy_sorted_file_list_block_invoke(id a1, id a2, id a3)
{
  id v4 = a3;
  id v15 = 0LL;
  unsigned int v5 = [a2 getResourceValue:&v15 forKey:NSURLCreationDateKey error:0];
  id v6 = v15;
  if (v5)
  {
    id v14 = 0LL;
    unsigned int v7 = [v4 getResourceValue:&v14 forKey:NSURLCreationDateKey error:0];
    id v8 = v14;
    if (v7)
    {
      [v6 timeIntervalSince1970];
      double v10 = v9;
      [v8 timeIntervalSince1970];
      if (v10 < v11) {
        int64_t v12 = 1LL;
      }
      else {
        int64_t v12 = -1LL;
      }
    }

    else
    {
      int64_t v12 = 0LL;
    }
  }

  else
  {
    int64_t v12 = 0LL;
    id v8 = 0LL;
  }

  return v12;
}

id isNSDictionary(void *a1)
{
  id v1 = a1;
  if (v1 && (uint64_t v2 = objc_opt_class(&OBJC_CLASS___NSDictionary), (objc_opt_isKindOfClass(v1, v2) & 1) != 0)) {
    id v3 = v1;
  }
  else {
    id v3 = 0LL;
  }

  return v3;
}

id isNSArray(void *a1)
{
  id v1 = a1;
  if (v1 && (uint64_t v2 = objc_opt_class(&OBJC_CLASS___NSArray), (objc_opt_isKindOfClass(v1, v2) & 1) != 0)) {
    id v3 = v1;
  }
  else {
    id v3 = 0LL;
  }

  return v3;
}

id isNSString(void *a1)
{
  id v1 = a1;
  if (v1 && (uint64_t v2 = objc_opt_class(&OBJC_CLASS___NSString), (objc_opt_isKindOfClass(v1, v2) & 1) != 0)) {
    id v3 = v1;
  }
  else {
    id v3 = 0LL;
  }

  return v3;
}

id isNSData(void *a1)
{
  id v1 = a1;
  if (v1 && (uint64_t v2 = objc_opt_class(&OBJC_CLASS___NSData), (objc_opt_isKindOfClass(v1, v2) & 1) != 0)) {
    id v3 = v1;
  }
  else {
    id v3 = 0LL;
  }

  return v3;
}

id isNSURL(void *a1)
{
  id v1 = a1;
  if (v1 && (uint64_t v2 = objc_opt_class(&OBJC_CLASS___NSURL), (objc_opt_isKindOfClass(v1, v2) & 1) != 0)) {
    id v3 = v1;
  }
  else {
    id v3 = 0LL;
  }

  return v3;
}

id isNSDate(void *a1)
{
  id v1 = a1;
  if (v1 && (uint64_t v2 = objc_opt_class(&OBJC_CLASS___NSDate), (objc_opt_isKindOfClass(v1, v2) & 1) != 0)) {
    id v3 = v1;
  }
  else {
    id v3 = 0LL;
  }

  return v3;
}

NSString *dictionary_to_xml(uint64_t a1)
{
  id v1 =  +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  a1,  100LL,  0LL,  0LL);
  if (v1) {
    uint64_t v2 = -[NSString initWithData:encoding:](objc_alloc(&OBJC_CLASS___NSString), "initWithData:encoding:", v1, 4LL);
  }
  else {
    uint64_t v2 = 0LL;
  }

  return v2;
}

uint64_t store_data(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  unsigned int v7 = v6;
  if (!v5 || !v6)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"store_data",  532LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
    goto LABEL_11;
  }

  id v8 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
  unsigned __int8 v9 = -[NSFileManager fileExistsAtPath:](v8, "fileExistsAtPath:", v5);

  id v10 = v5;
  int v11 = open_dprotected_np((const char *)[v10 fileSystemRepresentation], 1794, 4, 0);
  if (v11 == -1)
  {
    uint64_t v21 = __error();
    uint64_t v26 = strerror(*v21);
    MobileActivationError = createMobileActivationError( (uint64_t)"store_data",  541LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create %@: %s",  v10,  v26);
LABEL_11:
    uint64_t v19 = MobileActivationError;
    int v12 = -1;
    if (!a3) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  int v12 = v11;
  if ((v9 & 1) != 0
    || (id v13 = v10, !chmod((const char *)[v13 fileSystemRepresentation], 0x1B6u)))
  {
    id v17 = v7;
    id v18 = (id)write(v12, [v17 bytes], (size_t)objc_msgSend(v17, "length"));
    if (v18 == [v17 length])
    {
      uint64_t v19 = 0LL;
      uint64_t v20 = 1LL;
LABEL_14:
      close(v12);
      uint64_t v22 = v20;
      goto LABEL_15;
    }

    id v24 = __error();
    id v27 = strerror(*v24);
    id v15 = createMobileActivationError( (uint64_t)"store_data",  554LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to write data to %@: %s",  v10,  v27);
  }

  else
  {
    id v14 = __error();
    uint64_t v25 = strerror(*v14);
    id v15 = createMobileActivationError( (uint64_t)"store_data",  548LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to update file permissions for %@: %s",  v13,  v25);
  }

  uint64_t v19 = v15;
  if (a3) {
LABEL_12:
  }
    *a3 = v19;
LABEL_13:
  uint64_t v20 = 0LL;
  uint64_t v22 = 0LL;
  if (v12 != -1) {
    goto LABEL_14;
  }
LABEL_15:

  return v22;
}

uint64_t store_dict(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  unsigned int v7 = v6;
  if (!v5 || !v6)
  {
    unsigned __int8 v9 =  createMobileActivationError( (uint64_t)"store_dict",  583LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input(s).");
    id v8 = 0LL;
    int v14 = -1;
    if (!a3) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  id v29 = 0LL;
  id v8 =  +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v6,  200LL,  0LL,  &v29);
  unsigned __int8 v9 = (NSError *)v29;
  if (!v8)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"store_dict",  591LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v9,  @"Failed to serialize dictionary.");
LABEL_17:
    id v24 = MobileActivationError;

    int v14 = -1;
    goto LABEL_20;
  }

  id v10 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
  unsigned __int8 v11 = -[NSFileManager fileExistsAtPath:](v10, "fileExistsAtPath:", v5);

  id v12 = v5;
  int v13 = open_dprotected_np((const char *)[v12 fileSystemRepresentation], 1794, 4, 0);
  if (v13 == -1)
  {
    CFDataRef v23 = __error();
    id v27 = strerror(*v23);
    MobileActivationError = createMobileActivationError( (uint64_t)"store_dict",  600LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create %@: %s",  v12,  v27);
    goto LABEL_17;
  }

  int v14 = v13;
  if ((v11 & 1) != 0
    || (id v15 = v12, !chmod((const char *)[v15 fileSystemRepresentation], 0x1B6u)))
  {
    id v8 = v8;
    uint64_t v22 = (void *)write(v14, -[NSData bytes](v8, "bytes"), -[NSData length](v8, "length"));
    if (v22 == (void *)-[NSData length](v8, "length"))
    {
      uint64_t v18 = 1LL;
      goto LABEL_11;
    }

    uint64_t v25 = __error();
    uint64_t v28 = strerror(*v25);
    id v17 = createMobileActivationError( (uint64_t)"store_dict",  613LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to write data to %@: %s",  v12,  v28);
  }

  else
  {
    id v16 = __error();
    uint64_t v26 = strerror(*v16);
    id v17 = createMobileActivationError( (uint64_t)"store_dict",  607LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to update file permissions for %@: %s",  v15,  v26);
  }

  id v24 = v17;

LABEL_20:
  unsigned __int8 v9 = v24;
  if (a3) {
LABEL_9:
  }
    *a3 = v9;
LABEL_10:
  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  if (v14 != -1)
  {
LABEL_11:
    close(v14);
    uint64_t v19 = v18;
  }

  return v19;
}

NSMutableDictionary *load_dict(NSMutableDictionary *a1)
{
  if (a1) {
    a1 =  +[NSMutableDictionary dictionaryWithContentsOfFile:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithContentsOfFile:",  a1);
  }
  return a1;
}

NSString *copy_process_name(int a1)
{
  if (a1
    && (uint64_t v2 = +[NSXPCConnection currentConnection](&OBJC_CLASS___NSXPCConnection, "currentConnection")) != 0LL)
  {
    id v3 = v2;
    pid_t v4 = -[NSXPCConnection processIdentifier](v2, "processIdentifier");
  }

  else
  {
    pid_t v4 = getpid();
  }

  proc_pidpath(v4, buffer, 0x1000u);
  int v5 = strlen(buffer);
  if ((v5 & 0x80000000) == 0)
  {
    while (buffer[v5] != 47)
    {
      if (v5-- <= 0)
      {
        int v5 = -1;
        break;
      }
    }
  }

  __strlcpy_chk(v8, &buffer[v5 + 1], 256LL, 256LL);
  return -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"%s", v8);
}

NSInteger numberOfDaysBetweenDates(void *a1, id a2)
{
  id v3 = a2;
  pid_t v4 = v3;
  id v5 = 0LL;
  id v6 = 0LL;
  unsigned int v7 = 0LL;
  NSInteger v8 = 0LL;
  if (a1 && v3)
  {
    id v9 = a1;
    unsigned int v7 = +[NSCalendar currentCalendar](&OBJC_CLASS___NSCalendar, "currentCalendar");
    id v16 = 0LL;
    unsigned int v10 = -[NSCalendar rangeOfUnit:startDate:interval:forDate:]( v7,  "rangeOfUnit:startDate:interval:forDate:",  16LL,  &v16,  0LL,  v9);

    id v5 = v16;
    if (v10)
    {
      id v15 = 0LL;
      unsigned int v11 = -[NSCalendar rangeOfUnit:startDate:interval:forDate:]( v7,  "rangeOfUnit:startDate:interval:forDate:",  16LL,  &v15,  0LL,  v4);
      id v6 = v15;
      if (v11)
      {
        id v12 =  -[NSCalendar components:fromDate:toDate:options:]( v7,  "components:fromDate:toDate:options:",  16LL,  v5,  v6,  0LL);
        if (v12)
        {
          int v13 = v12;
          NSInteger v8 = -[NSDateComponents day](v12, "day");

          goto LABEL_9;
        }
      }
    }

    else
    {
      id v6 = 0LL;
    }

    NSInteger v8 = 0LL;
  }

NSMutableString *formatURLRequest(void *a1)
{
  id v1 = a1;
  uint64_t v2 =  +[NSMutableString stringWithString:]( &OBJC_CLASS___NSMutableString,  "stringWithString:",  @"\n---------REQUEST START---------\n");
  id v3 = [v1 URL];
  id v4 = [v3 description];
  -[NSMutableString appendFormat:](v2, "appendFormat:", @"URL: %@\n", v4);

  id v5 = [v1 HTTPMethod];
  -[NSMutableString appendFormat:](v2, "appendFormat:", @"METHOD: %@\n", v5);

  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v6 = [v1 allHTTPHeaderFields];
  id v7 = [v6 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v18;
    do
    {
      for (i = 0LL; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v18 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void *)(*((void *)&v17 + 1) + 8LL * (void)i);
        id v12 = [v1 valueForHTTPHeaderField:v11];
        -[NSMutableString appendFormat:](v2, "appendFormat:", @"%@: %@\n", v11, v12);
      }

      id v8 = [v6 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }

    while (v8);
  }

  int v13 = objc_alloc(&OBJC_CLASS___NSString);
  id v14 = [v1 HTTPBody];
  id v15 = -[NSString initWithData:encoding:](v13, "initWithData:encoding:", v14, 4LL);
  -[NSMutableString appendFormat:](v2, "appendFormat:", @"BODY: \n%@\n", v15);

  -[NSMutableString appendString:](v2, "appendString:", @"----------REQUEST END----------\n");
  return v2;
}

NSMutableString *formatURLResponse(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  id v7 =  +[NSMutableString stringWithString:]( &OBJC_CLASS___NSMutableString,  "stringWithString:",  @"\n---------RESPONSE START---------\n");
  id v8 = +[NSHTTPURLResponse localizedStringForStatusCode:]( &OBJC_CLASS___NSHTTPURLResponse, "localizedStringForStatusCode:", a2);
  -[NSMutableString appendFormat:]( v7,  "appendFormat:",  @"HTTP Status Code: %ld (%s)\n",  a2,  -[NSString UTF8String](v8, "UTF8String"));

  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v9 = v6;
  id v10 = [v9 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v19;
    do
    {
      for (i = 0LL; i != v11; i = (char *)i + 1)
      {
        if (*(void *)v19 != v12) {
          objc_enumerationMutation(v9);
        }
        uint64_t v14 = *(void *)(*((void *)&v18 + 1) + 8LL * (void)i);
        id v15 = [v9 objectForKeyedSubscript:v14];
        -[NSMutableString appendFormat:](v7, "appendFormat:", @"%@: %@\n", v14, v15, (void)v18);
      }

      id v11 = [v9 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }

    while (v11);
  }

  id v16 = -[NSString initWithData:encoding:](objc_alloc(&OBJC_CLASS___NSString), "initWithData:encoding:", v5, 4LL);
  -[NSMutableString appendFormat:](v7, "appendFormat:", @"BODY: \n%@\n", v16);

  -[NSMutableString appendString:](v7, "appendString:", @"----------RESPONSE END----------\n");
  return v7;
}

  ;
}

int main(int argc, const char **argv, const char **envp)
{
  id v3 = objc_autoreleasePoolPush();
  memset(&v124, 0, sizeof(v124));
  id v123 = 0LL;
  bzero(v132, 0x400uLL);
  uint64_t v4 = os_transaction_create("com.apple.mobileactivationd.startup");
  if (setiopolicy_np(9, 0, 1)) {
    main_cold_12();
  }
  if ((_set_user_dir_suffix([@"com.apple.mobileactivationd" UTF8String]) & 1) == 0) {
    main_cold_11();
  }
  signal(30, (void (__cdecl *)(int))1);
  id v5 = copy_system_container_path();
  id v6 = copy_group_container_path((uint64_t)[@"systemgroup.com.apple.regulatory_images" UTF8String]);
  id v7 = copy_group_container_path((uint64_t)[@"systemgroup.com.apple.pisco.suinfo" UTF8String]);
  id v8 = copy_group_container_path((uint64_t)[@"systemgroup.com.apple.mobileactivationd" UTF8String]);
  if (!v5 || !v6 || !v7 || !v8) {
    main_cold_10();
  }
  id v107 = (id)v4;
  context = v3;
  id v109 = v6;
  id v110 = v5;
  v131[0] = v5;
  v131[1] = v6;
  id v105 = v8;
  id v106 = v7;
  v131[2] = v7;
  v131[3] = v8;
  __int128 v119 = 0u;
  __int128 v120 = 0u;
  __int128 v121 = 0u;
  __int128 v122 = 0u;
  id obj = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v131, 4LL);
  id v9 = -[NSArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v119,  v130,  16LL);
  if (v9)
  {
    id v10 = v9;
    id v11 = 0LL;
    uint64_t v12 = 0LL;
    id v13 = 0LL;
    uint64_t v14 = *(void *)v120;
    do
    {
      for (i = 0LL; i != v10; i = (char *)i + 1)
      {
        id v16 = v13;
        if (*(void *)v120 != v14) {
          objc_enumerationMutation(obj);
        }
        __int128 v17 =  +[NSURL fileURLWithPath:]( &OBJC_CLASS___NSURL,  "fileURLWithPath:",  *(void *)(*((void *)&v119 + 1) + 8LL * (void)i));

        id v117 = 0LL;
        id v118 = 0LL;
        unsigned __int8 v18 = -[NSURL getResourceValue:forKey:error:]( v17,  "getResourceValue:forKey:error:",  &v118,  NSURLIsExcludedFromBackupKey,  &v117);
        id v13 = v118;

        __int128 v19 = (NSError *)v117;
        if ((v18 & 1) == 0) {
          main_cold_9(v19);
        }
        id v11 = v17;
        id v20 = isNSNumber(v13);
        if (v20
          && (__int128 v21 = v20, v22 = [v13 BOOLValue], v21, (v22 & 1) != 0))
        {
          uint64_t v12 = v19;
        }

        else
        {
          id v116 = v19;
          unsigned __int8 v23 = -[NSURL setResourceValue:forKey:error:]( v11,  "setResourceValue:forKey:error:",  &__kCFBooleanTrue,  NSURLIsExcludedFromBackupKey,  &v116);
          uint64_t v12 = (NSError *)v116;

          if ((v23 & 1) == 0) {
            main_cold_8(v12);
          }
        }
      }

      id v10 = -[NSArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v119,  v130,  16LL);
    }

    while (v10);
  }

  else
  {
    id v11 = 0LL;
    uint64_t v12 = 0LL;
    id v13 = 0LL;
  }

  id v104 = v13;

  uid_t v24 = getuid();
  if (getpwuid_r(v24, &v124, v132, 0x400uLL, &v123) || !v123) {
    main_cold_7();
  }
  maLog((uint64_t)"main", 0LL, @"____________________ Mobile Activation Startup _____________________");
  id v25 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v26 = [v25 copyAnswer:@"BuildVersion"];
  maLog((uint64_t)"main", 0LL, @"build_version: %@", v26);

  else {
    id v27 = "false";
  }
  maLog((uint64_t)"main", 0LL, @"internal_build: %s", v27);
  maLog((uint64_t)"main", 0LL, @"uid: %d", v123->pw_uid);
  maLog((uint64_t)"main", 0LL, @"user_name: %s", v123->pw_name);
  maLog((uint64_t)"main", 0LL, @"system_container_path: %@", v110);
  maLog((uint64_t)"main", 0LL, @"regulatory_images_path: %@", v109);
  id v28 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v29 = [v28 copyAnswer:@"HWModelStr"];
  maLog((uint64_t)"main", 0LL, @"hardware_model: %@", v29);

  __int128 v30 = get_device_type();
  maLog((uint64_t)"main", 0LL, @"product_type: %@", v30);

  uint64_t v31 = get_device_class();
  maLog((uint64_t)"main", 0LL, @"device_class: %@", v31);

  if (is_product_cellular()) {
    uint64_t v32 = "true";
  }
  else {
    uint64_t v32 = "false";
  }
  maLog((uint64_t)"main", 0LL, @"has_baseband: %s", v32);
  if (use_hactivation()) {
    uint64_t v33 = "true";
  }
  else {
    uint64_t v33 = "false";
  }
  maLog((uint64_t)"main", 0LL, @"should_hactivate: %s", v33);
  if (is_product_fpga()) {
    uint64_t v34 = "true";
  }
  else {
    uint64_t v34 = "false";
  }
  maLog((uint64_t)"main", 0LL, @"is_fpga: %s", v34);
  if (is_devfused_undemoted()) {
    uint64_t v35 = "true";
  }
  else {
    uint64_t v35 = "false";
  }
  maLog((uint64_t)"main", 0LL, @"is_devfused_undemoted: %s", v35);
  if (is_prodfused_demoted()) {
    CFDataRef v36 = "true";
  }
  else {
    CFDataRef v36 = "false";
  }
  maLog((uint64_t)"main", 0LL, @"is_prodfused_demoted: %s", v36);
  id v37 = copy_soc_generation();
  maLog((uint64_t)"main", 0LL, @"soc_generation: %@", v37);

  maLog((uint64_t)"main", 0LL, @"____________________________________________________________________");
  id v38 = copyMobileActivationSerialQueue();
  if (!v38) {
    main_cold_1();
  }
  id v39 = v38;
  uint64_t v40 = objc_alloc(&OBJC_CLASS___DataArk);
  id v41 = copy_data_ark_directory_path();
  uint64_t v42 = -[DataArk initWithPath:](v40, "initWithPath:", v41);

  if (!v42) {
    main_cold_2();
  }
  uint64_t v43 = v42;
  id v102 = v39;
  if (is_internal_build())
  {
    uint64_t v44 = objc_alloc(&OBJC_CLASS___NSUserDefaults);
    uint64_t v45 =  -[NSUserDefaults persistentDomainForName:]( v44,  "persistentDomainForName:",  @"com.apple.mobileactivationd");

    id v46 = -[NSDictionary objectForKey:](v45, "objectForKey:", @"DeleteExistingUCRT");
    id v47 = isNSNumber(v46);

    if (v47)
    {
      id v48 = -[NSDictionary objectForKey:](v45, "objectForKey:", @"DeleteExistingUCRT");
      unsigned int v49 = [v48 BOOLValue];

      if (v49)
      {
        maLog((uint64_t)"perform_boot_initialization_tasks", 0LL, @"OVERRIDE: Deleting existing UCRT (OOB)");
        deleteUCRT((uint64_t)v43, 0LL);
        data_ark_remove(v43, 0LL, @"UCRTOOBForbidden");
      }
    }

    id v50 = -[NSDictionary objectForKey:](v45, "objectForKey:", @"UCRTHealingRequired");
    id v51 = isNSNumber(v50);

    if (v51)
    {
      id v52 = -[NSDictionary objectForKey:](v45, "objectForKey:", @"UCRTHealingRequired");
      unsigned int v53 = [v52 BOOLValue];

      if (v53)
      {
        maLog((uint64_t)"perform_boot_initialization_tasks", 0LL, @"OVERRIDE: Deleting existing UCRT (Healing)");
        deleteUCRT((uint64_t)v43, 0LL);
        data_ark_remove(v43, 0LL, @"UCRTOOBForbidden");
        data_ark_set(v43, 0LL, @"UCRTHealingRequired", &__kCFBooleanTrue, 1);
      }
    }

    id v54 = -[NSDictionary objectForKey:](v45, "objectForKey:", @"DeleteExistingDCRT");
    id v55 = isNSNumber(v54);

    if (v55
      && (id v56 = -[NSDictionary objectForKey:](v45, "objectForKey:", @"DeleteExistingDCRT"),
          unsigned int v57 = [v56 BOOLValue],
          v56,
          v57))
    {
      maLog((uint64_t)"perform_boot_initialization_tasks", 0LL, @"OVERRIDE: Deleting existing DCRT");
      deleteDCRT((uint64_t)v43, 0LL, 0LL);
      data_ark_remove(v43, 0LL, @"DCRTOOBForbidden");
      id v129 = 0LL;
      char v58 = libaks_system_key_operate(9LL, 1LL, (NSError **)&v129);
      id v59 = v129;
      id v60 = v59;
      if ((v58 & 1) == 0
        && (mobileactivationErrorHasDomainAndErrorCode( v59,  @"com.apple.MobileActivation.ErrorDomain",  (id)0xFFFFFFFFFFFFFFFDLL) & 1) == 0)
      {
        maLog((uint64_t)"perform_boot_initialization_tasks", 0LL, @"Failed to bump DAK: %@", v60);
      }

      id v128 = v60;
      char v61 = libaks_system_key_operate(9LL, 2LL, (NSError **)&v128);
      unsigned int v62 = (NSError *)v128;

      if ((v61 & 1) == 0
        && (mobileactivationErrorHasDomainAndErrorCode( v62,  @"com.apple.MobileActivation.ErrorDomain",  (id)0xFFFFFFFFFFFFFFFDLL) & 1) == 0)
      {
        maLog((uint64_t)"perform_boot_initialization_tasks", 0LL, @"Failed to commit DAK: %@", v62);
      }
    }

    else
    {
      unsigned int v62 = 0LL;
    }

    id v65 = -[NSDictionary objectForKey:](v45, "objectForKey:", @"DeleteExistingSDCRT");
    id v66 = isNSNumber(v65);

    if (!v66) {
      goto LABEL_68;
    }
    id v67 = -[NSDictionary objectForKey:](v45, "objectForKey:", @"DeleteExistingSDCRT");
    unsigned int v68 = [v67 BOOLValue];

    if (!v68) {
      goto LABEL_68;
    }
    maLog((uint64_t)"perform_boot_initialization_tasks", 0LL, @"OVERRIDE: Deleting existing SDCRT");
    id v138 = @"sdcrtAttestation";
    id v139 = &__kCFBooleanTrue;
    uint64_t v69 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v139,  &v138,  1LL);
    deleteDCRT((uint64_t)v43, v69, 0LL);

    data_ark_remove(v43, 0LL, @"SDCRTOOBForbidden");
    id v127 = v62;
    char v70 = libaks_system_key_operate(10LL, 1LL, (NSError **)&v127);
    id v71 = v127;

    if ((v70 & 1) == 0
      && (mobileactivationErrorHasDomainAndErrorCode( v71,  @"com.apple.MobileActivation.ErrorDomain",  (id)0xFFFFFFFFFFFFFFFDLL) & 1) == 0)
    {
      id v72 = copyLoggingHandle();
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v71;
        _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEFAULT,  "Failed to bump SDAK: %@",  (uint8_t *)&buf,  0xCu);
      }
    }

    id v126 = v71;
    char v73 = libaks_system_key_operate(10LL, 2LL, (NSError **)&v126);
    unsigned int v62 = (NSError *)v126;

    if ((v73 & 1) == 0)
    {
      id v63 = v43;
      if ((mobileactivationErrorHasDomainAndErrorCode( v62,  @"com.apple.MobileActivation.ErrorDomain",  (id)0xFFFFFFFFFFFFFFFDLL) & 1) == 0) {
        maLog((uint64_t)"perform_boot_initialization_tasks", 0LL, @"Failed to commit SDAK: %@", v62);
      }
    }

    else
    {
LABEL_68:
      id v63 = v43;
    }

    id v74 = -[NSDictionary objectForKey:](v45, "objectForKey:", @"DeleteExistingPCRT");
    id v64 = v45;
    id v75 = isNSNumber(v74);

    if (v75
      && (id v76 = -[NSDictionary objectForKey:](v64, "objectForKey:", @"DeleteExistingPCRT"),
          unsigned int v77 = [v76 BOOLValue],
          v76,
          v77))
    {
      maLog((uint64_t)"perform_boot_initialization_tasks", 0LL, @"OVERRIDE: Deleting existing PCRT");
      id v78 = copy_suinfo_directory_path();
      id v79 = [v78 stringByAppendingPathComponent:@"psc.sui"];

      if (v79)
      {
        id v80 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
        -[NSFileManager removeItemAtPath:error:](v80, "removeItemAtPath:error:", v79, 0LL);
      }

      data_ark_remove(v63, 0LL, @"PCRTToken");
      data_ark_remove(v63, 0LL, @"CollectionLastPerformed");
      data_ark_remove(v63, 0LL, @"PCRTCollectionString");
      data_ark_remove(v63, 0LL, @"PCRTCollectionStringBuild");
    }

    else
    {
      id v79 = 0LL;
    }

    id v103 = v79;
    CFPreferencesSetAppValue(@"DeleteExistingUCRT", kCFBooleanFalse, @"com.apple.mobileactivationd");
    CFPreferencesSetAppValue(@"UCRTHealingRequired", kCFBooleanFalse, @"com.apple.mobileactivationd");
    CFPreferencesSetAppValue(@"DeleteExistingPCRT", kCFBooleanFalse, @"com.apple.mobileactivationd");
    CFPreferencesSetAppValue(@"DeleteExistingDCRT", kCFBooleanFalse, @"com.apple.mobileactivationd");
    CFPreferencesSetAppValue(@"DeleteExistingSDCRT", kCFBooleanFalse, @"com.apple.mobileactivationd");
    CFPreferencesAppSynchronize(@"com.apple.mobileactivationd");
  }

  else
  {
    id v63 = v43;
    id v64 = 0LL;
    id v103 = 0LL;
    unsigned int v62 = 0LL;
  }

  id v81 = (__CFString *)data_ark_copy(v63, 0LL, @"BootSessionUUID");
  id v82 = isNSString(v81);

  if (!v82)
  {

    id v81 = &stru_100265508;
  }

  id v83 = copy_bootsession_uuid();
  id v84 = v83;
  if (!v83)
  {
    id v88 =  createMobileActivationError( (uint64_t)"perform_boot_initialization_tasks",  152LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve boot session UUID.");
LABEL_85:

    id v86 = v88;
    char v85 = 0;
    id v87 = v86;
    goto LABEL_89;
  }

  if ([v83 isEqualToString:v81])
  {
    char v85 = 1;
    id v86 = v12;
    id v87 = v62;
    goto LABEL_89;
  }

  id v125 = v62;
  BOOL is_legacy = security_committed_uik_is_legacy(&v125);
  id v87 = (NSError *)v125;

  if (!is_legacy && v87)
  {
    id v88 =  createMobileActivationError( (uint64_t)"perform_boot_initialization_tasks",  159LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v87,  @"Failed to query legacy UIK support.");
    unsigned int v62 = v87;
    goto LABEL_85;
  }

  if (is_legacy) {
    data_ark_set(v63, 0LL, @"UIKUpgradeRequired", &__kCFBooleanTrue, 1);
  }
  id v90 = (dispatch_queue_s *)copyRTCResetSerialQueue();
  *(void *)&__int128 buf = _NSConcreteStackBlock;
  *((void *)&buf + 1) = 3254779904LL;
  id v134 = __perform_boot_initialization_tasks_block_invoke;
  id v135 = &__block_descriptor_48_e8_32s40s_e5_v8__0l;
  id v91 = v63;
  id v136 = v91;
  id v137 = v84;
  dispatch_async(v90, &buf);

  data_ark_remove(v91, 0LL, @"UCRTOOBForbidden");
  data_ark_remove(v91, 0LL, @"UCRTOOBForbiddenCount");
  data_ark_remove(v91, 0LL, @"DCRTOOBForbidden");
  data_ark_remove(v91, 0LL, @"DCRTOOBForbiddenCount");
  data_ark_remove(v91, 0LL, @"SDCRTOOBForbidden");
  data_ark_remove(v91, 0LL, @"SDCRTOOBForbiddenCount");

  char v85 = 1;
  id v86 = v12;
LABEL_89:

  id v92 = v86;
  if ((v85 & 1) == 0) {
    main_cold_6(v92);
  }
  if (!data_migration_supported() || preSydroDataMigrationCompleted(v63))
  {
    id v115 = v92;
    char v93 = performMigration(v63, &v115);
    id v94 = (NSError *)v115;

    CFDataRef v95 = v102;
    if ((v93 & 1) == 0) {
      main_cold_5(v94);
    }
    id v92 = v94;
    goto LABEL_94;
  }

  CFDataRef v95 = v102;
  if (!data_migration_supported())
  {
LABEL_94:
    id v96 = v110;
    goto LABEL_95;
  }

  id v96 = v110;
  if ((preSydroDataMigrationCompleted(v63) & 1) == 0)
  {
    id v101 = dispatch_get_global_queue(0LL, 0LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3254779904LL;
    block[2] = __main_block_invoke;
    block[3] = &__block_descriptor_48_e8_32s40s_e5_v8__0l;
    id v113 = v102;
    id v114 = v63;
    dispatch_async(v101, block);
  }

LABEL_95:
  id v97 = -[MobileActivationDaemon initWithContext:Queue:]( objc_alloc(&OBJC_CLASS___MobileActivationDaemon),  "initWithContext:Queue:",  v63,  v95);
  if (!v97) {
    main_cold_3();
  }
  uint64_t v98 = v97;
  if ((os_variant_is_darwinos([@"com.apple.mobileactivationd" UTF8String]) & 1) == 0
    && !init_lockdown_server(v98, v95))
  {
    main_cold_4();
  }

  uint64_t v99 = -[NSXPCListener initWithMachServiceName:]( objc_alloc(&OBJC_CLASS___NSXPCListener),  "initWithMachServiceName:",  @"com.apple.mobileactivationd");
  -[NSXPCListener setDelegate:](v99, "setDelegate:", v98);
  -[NSXPCListener resume](v99, "resume");

  objc_autoreleasePoolPop(context);
  CFRunLoopRun();

  return 1;
}

void __main_block_invoke(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3254779904LL;
  block[2] = __main_block_invoke_2;
  block[3] = &__block_descriptor_40_e8_32s_e5_v8__0l;
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  dispatch_sync(v2, block);
}

void __main_block_invoke_2(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v4 = 0LL;
  char v2 = performMigration(v1, &v4);
  id v3 = v4;
  if ((v2 & 1) == 0) {
    __main_block_invoke_2_cold_1(v3);
  }
}

void __perform_boot_initialization_tasks_block_invoke(uint64_t a1)
{
  int v2 = copyRTCResetCount();
  id v15 = 0LL;
  double v3 = copyMonotonicClockTimeInterval(&v15);
  id v4 = v15;
  if (v3 <= 0.0)
  {
    id v5 = copyLoggingHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)) {
      __perform_boot_initialization_tasks_block_invoke_cold_1((uint64_t)v4, v5);
    }
  }

  id v6 = (_UNKNOWN **)data_ark_copy(*(void **)(a1 + 32), 0LL, @"LastBootClockTime");
  id v7 = isNSNumber(v6);

  if (!v7)
  {

    id v6 = &off_10026D650;
  }

  id v8 = (NSNumber *)data_ark_copy(*(void **)(a1 + 32), 0LL, @"TotalRTCResetCount");
  id v9 = isNSNumber(v8);

  if (!v9)
  {

    id v8 = (NSNumber *)&off_10026D650;
  }

  if (v2 || v3 <= 0.0 || ([v6 doubleValue], v10 > 0.0) && (objc_msgSend(v6, "doubleValue"), v11 > v3))
  {
    uint64_t v12 =  +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  -[NSNumber unsignedIntValue](v8, "unsignedIntValue") + 1);

    id v8 = v12;
  }

  data_ark_set(*(void **)(a1 + 32), 0LL, @"TotalRTCResetCount", v8, 1);
  id v13 = *(void **)(a1 + 32);
  uint64_t v14 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v3);
  data_ark_set(v13, 0LL, @"LastBootClockTime", v14, 1);

  data_ark_set(*(void **)(a1 + 32), 0LL, @"BootSessionUUID", *(void **)(a1 + 40), 1);
}

id OUTLINED_FUNCTION_1_2(void *a1, const char *a2)
{
  return [a1 UTF8String];
}

char *OUTLINED_FUNCTION_2_2(int *a1)
{
  return strerror(*a1);
}

uint64_t is_dsp_device()
{
  id v0 = +[GestaltHlpr getSharedInstance](&OBJC_CLASS___GestaltHlpr, "getSharedInstance");
  id v1 = [v0 copyAnswer:@"SerialNumber"];

  if (v1 && (int v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray)) != 0LL)
  {
    double v3 = v2;
    if (is_internal_build())
    {
      id v4 = objc_alloc(&OBJC_CLASS___NSUserDefaults);
      id v5 =  -[NSUserDefaults persistentDomainForName:]( v4,  "persistentDomainForName:",  @"com.apple.mobileactivationd");

      id v6 = -[NSDictionary objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", @"DSPList");
      id v7 = isNSArray(v6);

      if (v7)
      {
        id v8 = -[NSDictionary objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", @"DSPList");
        -[NSMutableArray addObjectsFromArray:](v3, "addObjectsFromArray:", v8);
      }
    }

    else
    {
      id v5 = 0LL;
    }

    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    double v10 = v3;
    uint64_t v9 = (uint64_t)-[NSMutableArray countByEnumeratingWithState:objects:count:]( v10,  "countByEnumeratingWithState:objects:count:",  &v16,  v20,  16LL);
    if (v9)
    {
      uint64_t v11 = *(void *)v17;
      while (2)
      {
        for (uint64_t i = 0LL; i != v9; ++i)
        {
          if (*(void *)v17 != v11) {
            objc_enumerationMutation(v10);
          }
          id v13 = *(void **)(*((void *)&v16 + 1) + 8 * i);
          id v14 = isNSString(v13);

          if (v14 && (objc_msgSend(v13, "isEqualToString:", v1, (void)v16) & 1) != 0)
          {
            uint64_t v9 = 1LL;
            goto LABEL_19;
          }
        }

        uint64_t v9 = (uint64_t)-[NSMutableArray countByEnumeratingWithState:objects:count:]( v10,  "countByEnumeratingWithState:objects:count:",  &v16,  v20,  16LL);
        if (v9) {
          continue;
        }
        break;
      }
    }

NSNumber *copyBridgeKey(void *a1, NSError **a2)
{
  id v3 = a1;
  if (!is_virtual_machine() || (uint64_t v4 = remote_device_copy_unique_of_type(9LL)) == 0)
  {
    uint64_t v11 =  createMobileActivationError( (uint64_t)"copyBridgeKey",  273LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to connect to remote device.");
    id v5 = 0LL;
    goto LABEL_9;
  }

  id v5 = (void *)v4;
  if (remote_device_get_state() != 2)
  {
    uint64_t v11 =  createMobileActivationError( (uint64_t)"copyBridgeKey",  278LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Remote device not connected yet.");
LABEL_9:
    id v8 = 0LL;
    if (!a2)
    {
LABEL_16:
      double v10 = 0LL;
      goto LABEL_17;
    }

uint64_t bridge_call(int a1, void *a2, uint64_t a3)
{
  return bridge_call_and_response_internal(a1, a2, 0LL, a3);
}

uint64_t bridge_call_and_response_internal(int a1, id a2, NSString **a3, uint64_t a4)
{
  id v7 = a2;
  if (!v7)
  {
    uint64_t v11 =  createMobileActivationError( (uint64_t)"bridge_call_and_response_internal",  162LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"Invalid input.");
    uint64_t v9 = 0LL;
    id v8 = 0LL;
    goto LABEL_10;
  }

  id v8 = -[NSMutableDictionary initWithDictionary:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:",  v7);
  if (!v8)
  {
    uint64_t v11 =  createMobileActivationError( (uint64_t)"bridge_call_and_response_internal",  168LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create dictionary.");
    uint64_t v9 = 0LL;
    goto LABEL_10;
  }

  uint64_t v9 = copy_calling_process_name();
  if (!v9)
  {
    uint64_t v11 =  createMobileActivationError( (uint64_t)"bridge_call_and_response_internal",  174LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to retrieve process name.");
LABEL_10:
    __int128 v30 = 0LL;
    xpc_object_t v12 = 0LL;
    a3 = 0LL;
    id v13 = 0LL;
    id v14 = 0LL;
    id v15 = 0LL;
    if (!a4) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v9, @"HostProcessName");
  uint64_t v29 = a4;
  __int128 v30 = v9;
  if (a1 == 1)
  {
    double v10 = &kMARecoveryLogBridgeConnectionID;
  }

  else
  {
    if (a1)
    {
      uint64_t v11 = 0LL;
LABEL_24:
      unsigned __int8 v23 =  createMobileActivationError( (uint64_t)"bridge_call_and_response_internal",  194LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v11,  @"Failed to create remote connection.");

      uint64_t v9 = 0LL;
      xpc_object_t v12 = 0LL;
      a3 = 0LL;
      id v13 = 0LL;
      id v14 = 0LL;
      id v15 = 0LL;
      goto LABEL_33;
    }

    double v10 = &kMABridgeConnectionID;
  }

  __int128 v16 = *v10;
  id v31 = 0LL;
  id v15 = copyRemoteServiceConnection(v16, (NSError **)&v31);
  id v17 = v31;
  __int128 v18 = v17;
  if (v15)
  {
    id v19 = v15;
    id v20 = 0LL;
  }

  else
  {
    id v20 = v17;
  }

  uint64_t v11 = (NSError *)v20;
  if (!v15) {
    goto LABEL_24;
  }
  id v13 = (void *)_CFXPCCreateXPCObjectFromCFObject(v8);
  if (!v13)
  {
    unsigned __int8 v23 =  createMobileActivationError( (uint64_t)"bridge_call_and_response_internal",  200LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  v11,  @"Failed to create XPC dictionary (%@).",  v8);

    uint64_t v9 = 0LL;
    xpc_object_t v12 = 0LL;
LABEL_27:
    a3 = 0LL;
LABEL_32:
    id v14 = 0LL;
    goto LABEL_33;
  }

  xpc_object_t v12 = xpc_dictionary_create(0LL, 0LL, 0LL);
  if (!v12)
  {
    unsigned __int8 v23 =  createMobileActivationError( (uint64_t)"bridge_call_and_response_internal",  206LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create xpc dictionary.");

    uint64_t v9 = 0LL;
    goto LABEL_27;
  }

  xpc_dictionary_set_value( v12,  (const char *)[@"BridgeXPCRequestEncodedDictionary" UTF8String],  v13);
  if (!a3)
  {
    xpc_remote_connection_send_message(v15, v12);
    id v14 = 0LL;
    uint64_t v9 = 0LL;
LABEL_29:
    a4 = 1LL;
    goto LABEL_35;
  }

  id v28 = a3;
  __int128 v21 = (NSString **)xpc_remote_connection_send_message_with_reply_sync(v15, v12);
  a3 = v21;
  if (!v21)
  {
    unsigned __int8 v23 =  createMobileActivationError( (uint64_t)"bridge_call_and_response_internal",  215LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to receive XPC reply.");

    goto LABEL_31;
  }

  if (xpc_get_type(v21) != (xpc_type_t)&_xpc_type_dictionary)
  {
    unsigned __int8 v22 = xpc_copy_description(a3);
    unsigned __int8 v23 =  createMobileActivationError( (uint64_t)"bridge_call_and_response_internal",  221LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Unexpected message: %s",  v22);

    free(v22);
LABEL_31:
    uint64_t v9 = 0LL;
    goto LABEL_32;
  }

  xpc_object_t v26 =  xpc_dictionary_get_value( a3,  (const char *)[@"BridgeXPCResponseEncodedDictionary" UTF8String]);
  id v14 = v26;
  if (v26)
  {
    uint64_t v9 = (NSString *)_CFXPCCreateCFObjectFromXPCObject(v26);
    id v27 = isNSDictionary(v9);

    if (v27)
    {
      uint64_t v9 = v9;
      *id v28 = v9;
      goto LABEL_29;
    }

    unsigned __int8 v23 =  createMobileActivationError( (uint64_t)"bridge_call_and_response_internal",  234LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create dictionary from XPC message.");
  }

  else
  {
    unsigned __int8 v23 =  createMobileActivationError( (uint64_t)"bridge_call_and_response_internal",  228LL,  @"com.apple.MobileActivation.ErrorDomain",  -2LL,  0LL,  @"XPC message missing key (%@) : %@",  @"BridgeXPCRequestEncodedDictionary",  a3);

    uint64_t v9 = 0LL;
  }

id bridge_call_and_response(int a1, void *a2, void *a3)
{
  id v9 = 0LL;
  id v10 = 0LL;
  int v4 = bridge_call_and_response_internal(a1, a2, (NSString **)&v10, (uint64_t)&v9);
  id v5 = v10;
  id v6 = v9;
  id v7 = 0LL;
  if (v4) {
    id v7 = v5;
  }
  if (a3 && !v7) {
    *a3 = v6;
  }

  return v7;
}

id copyRemoteServiceConnection(void *a1, NSError **a2)
{
  id v3 = a1;
  dispatch_semaphore_t v4 = dispatch_semaphore_create(0LL);
  if (!v4)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"copyRemoteServiceConnection",  35LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create semaphore.");
    goto LABEL_8;
  }

  if (!is_virtual_machine() || (uint64_t v5 = remote_device_copy_unique_of_type(9LL)) == 0)
  {
    MobileActivationError = createMobileActivationError( (uint64_t)"copyRemoteServiceConnection",  49LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to connect to remote device.");
LABEL_8:
    xpc_object_t v12 = MobileActivationError;
    id v6 = 0LL;
    goto LABEL_9;
  }

  id v6 = (void *)v5;
  id v7 = dispatch_get_global_queue(0LL, 0LL);
  uid_t v24 = _NSConcreteStackBlock;
  uint64_t v25 = 3254779904LL;
  xpc_object_t v26 = __copyRemoteServiceConnection_block_invoke;
  id v27 = &__block_descriptor_40_e8_32s_e26_v16__0__OS_remote_device_8l;
  id v8 = v4;
  id v28 = v8;
  remote_device_set_connected_callback(v6, v7, &v24);

  dispatch_time_t v9 = dispatch_time(0LL, 60000000000LL);
  if (dispatch_semaphore_wait(v8, v9))
  {
    id v10 = createMobileActivationError( (uint64_t)"copyRemoteServiceConnection",  60LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Remote device not connected after %d seconds.",  60LL,  v21,  v22,  v24,  v25,  v26,  v27);
LABEL_17:
    xpc_object_t v12 = v10;
LABEL_9:
    id v13 = 0LL;
    if (a2) {
      goto LABEL_10;
    }
LABEL_19:
    id v14 = 0LL;
    goto LABEL_20;
  }

  if (remote_device_get_state(v6) != 2)
  {
    id v10 = createMobileActivationError( (uint64_t)"copyRemoteServiceConnection",  65LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Remote device not connected after %d seconds.",  60LL,  v21,  v22,  v24,  v25,  v26,  v27);
    goto LABEL_17;
  }

  id v15 = v3;
  uint64_t v16 = remote_device_copy_service(v6, [v15 UTF8String]);
  if (!v16)
  {
    uint64_t v18 = *__error();
    id v19 = __error();
    unsigned __int8 v23 = strerror(*v19);
    id v10 = createMobileActivationError( (uint64_t)"copyRemoteServiceConnection",  71LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to connect to remote service %@: %d (%s)",  v15,  v18,  v23,  v24,  v25,  v26,  v27);
    goto LABEL_17;
  }

  id v13 = (void *)v16;
  id v17 = dispatch_get_global_queue(25LL, 0LL);
  id v14 = (void *)xpc_remote_connection_create_with_remote_service(v13, v17, 0LL);

  if (v14)
  {
    xpc_remote_connection_set_event_handler(v14, &__block_literal_global_12);
    xpc_remote_connection_activate(v14);
    xpc_object_t v12 = 0LL;
    goto LABEL_20;
  }

  xpc_object_t v12 =  createMobileActivationError( (uint64_t)"copyRemoteServiceConnection",  77LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create remote connection.");
  if (!a2) {
    goto LABEL_19;
  }
LABEL_10:
  xpc_object_t v12 = v12;
  id v14 = 0LL;
  *a2 = v12;
LABEL_20:

  return v14;
}

uint64_t __copyRemoteServiceConnection_block_invoke(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

NSMutableDictionary *copyReverseProxyDictionary(void *a1, uint64_t a2, NSError **a3)
{
  id v5 = a1;
  id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  if (v6)
  {
    if (v5) {
      id v7 = -[NSURL initWithString:](objc_alloc(&OBJC_CLASS___NSURL), "initWithString:", v5);
    }
    else {
      id v7 = 0LL;
    }
    uint64_t v21 = @"TestReachability";
    xpc_object_t v12 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2);
    uint64_t v22 = v12;
    id v10 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v22,  &v21,  1LL);

    RPSetLogLevel(0LL);
    id v13 = (void *)RPCopyProxyDictionaryWithOptions(v7, v10);
    dispatch_time_t v9 = v13;
    if (v13)
    {
      id v14 = [v13 objectForKeyedSubscript:@"SOCKSProxy"];
      if (v14)
      {
        id v15 = v14;
        id v16 = [v9 objectForKeyedSubscript:@"SOCKSPort"];

        if (v16)
        {
          id v17 = [v9 objectForKeyedSubscript:@"SOCKSProxy"];
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  v17,  @"SOCKSProxyHost");

          id v18 = [v9 objectForKeyedSubscript:@"SOCKSPort"];
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  v18,  @"SOCKSProxyPort");

          uint64_t v11 = v6;
          id v8 = 0LL;
          goto LABEL_15;
        }
      }

      MobileActivationError = createMobileActivationError( (uint64_t)"copyReverseProxyDictionary",  49LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Invalid proxy dictionary.");
    }

    else
    {
      MobileActivationError = createMobileActivationError( (uint64_t)"copyReverseProxyDictionary",  44LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to copy proxy dictionary (proxy likely not running on host).");
    }

    id v8 = MobileActivationError;
    if (a3)
    {
LABEL_14:
      id v8 = v8;
      uint64_t v11 = 0LL;
      *a3 = v8;
      goto LABEL_15;
    }
  }

  else
  {
    id v8 =  createMobileActivationError( (uint64_t)"copyReverseProxyDictionary",  31LL,  @"com.apple.MobileActivation.ErrorDomain",  -1LL,  0LL,  @"Failed to create dictionary.");
    dispatch_time_t v9 = 0LL;
    id v7 = 0LL;
    id v10 = 0LL;
    if (a3) {
      goto LABEL_14;
    }
  }

  uint64_t v11 = 0LL;
LABEL_15:

  return v11;
}

uint64_t sub_10006080C( mach_port_t a1, int a2, int *a3, uint64_t a4, int a5, _OWORD *a6, void *a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, _DWORD *a11, _DWORD *a12)
{
  int v30 = 1;
  uint64_t v31 = a4;
  int v32 = 16777472;
  int v33 = a5;
  NDR_record_t v34 = NDR_record;
  int v17 = *a3;
  int v35 = a2;
  int v36 = v17;
  int v37 = a5;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4B000000000LL;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v19 = mach_msg(&msg, 3, 0x40u, 0xDCu, reply_port, 0, 0);
  uint64_t v20 = v19;
  if ((v19 - 268435458) <= 0xE && ((1 << (v19 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }

  else
  {
    if (!(_DWORD)v19)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v20 = 4294966988LL;
      }

      else if (msg.msgh_id == 1300)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v20 = 4294966996LL;
          if (v30 == 2
            && msg.msgh_size == 212
            && !msg.msgh_remote_port
            && HIBYTE(v32) == 1
            && HIWORD(v35) << 16 == 1114112)
          {
            int v21 = v33;
            if (v33 == v47)
            {
              uint64_t v20 = 0LL;
              int v22 = *(_DWORD *)&v34.mig_vers;
              *a3 = v38;
              __int128 v23 = v46;
              a6[6] = v45;
              a6[7] = v23;
              __int128 v24 = v44;
              a6[4] = v43;
              a6[5] = v24;
              __int128 v25 = v40;
              *a6 = v39;
              a6[1] = v25;
              __int128 v26 = v42;
              a6[2] = v41;
              a6[3] = v26;
              *a7 = v31;
              *a8 = v21;
              int v27 = v49;
              *a9 = v48;
              *a10 = v27;
              *a11 = v50;
              *a12 = v22;
              return v20;
            }
          }
        }

        else if (msg.msgh_size == 36)
        {
          uint64_t v20 = 4294966996LL;
          if (HIDWORD(v31))
          {
            if (msg.msgh_remote_port) {
              uint64_t v20 = 4294966996LL;
            }
            else {
              uint64_t v20 = HIDWORD(v31);
            }
          }
        }

        else
        {
          uint64_t v20 = 4294966996LL;
        }
      }

      else
      {
        uint64_t v20 = 4294966995LL;
      }

      mach_msg_destroy(&msg);
      return v20;
    }

    mig_dealloc_reply_port(msg.msgh_local_port);
  }

  return v20;
}

uint64_t sub_100060A64(mach_port_t a1, unsigned int a2, __int128 *a3)
{
  __int128 v4 = a3[5];
  __int128 v19 = a3[4];
  __int128 v20 = v4;
  __int128 v5 = a3[7];
  __int128 v21 = a3[6];
  __int128 v22 = v5;
  __int128 v6 = a3[1];
  __int128 v15 = *a3;
  __int128 v16 = v6;
  __int128 v7 = a3[3];
  __int128 v17 = a3[2];
  NDR_record_t v13 = NDR_record;
  unsigned int v14 = a2;
  __int128 v18 = v7;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x4B100000000LL;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v9 = mach_msg(&msg, 3, 0xA4u, 0x2Cu, reply_port, 0, 0);
  uint64_t v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v10;
  }

  if ((_DWORD)v9)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v10;
  }

  if (msg.msgh_id == 71)
  {
    uint64_t v10 = 4294966988LL;
LABEL_17:
    mach_msg_destroy(&msg);
    return v10;
  }

  if (msg.msgh_id != 1301)
  {
    uint64_t v10 = 4294966995LL;
    goto LABEL_17;
  }

  uint64_t v10 = 4294966996LL;
  if ((msg.msgh_bits & 0x80000000) != 0) {
    goto LABEL_17;
  }
  if (msg.msgh_size != 36) {
    goto LABEL_17;
  }
  if (msg.msgh_remote_port) {
    goto LABEL_17;
  }
  uint64_t v10 = v14;
  if (v14) {
    goto LABEL_17;
  }
  return v10;
}

uint64_t sub_100060BF0( mach_port_t a1, int a2, int a3, int a4, _OWORD *a5, uint64_t a6, int a7, _OWORD *a8, void *a9, _DWORD *a10)
{
  int v18 = 1;
  uint64_t v19 = a6;
  int v20 = 16777472;
  int v21 = a7;
  NDR_record_t v22 = NDR_record;
  *(_DWORD *)__int128 v23 = a2;
  *(_DWORD *)&v23[4] = a3;
  *(_DWORD *)&v23[8] = a4;
  *(_OWORD *)&v23[12] = *a5;
  int v24 = a7;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4B200000000LL;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v13 = mach_msg(&msg, 3, 0x54u, 0x50u, reply_port, 0, 0);
  uint64_t v14 = v13;
  if ((v13 - 268435458) <= 0xE && ((1 << (v13 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }

  else
  {
    if (!(_DWORD)v13)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v14 = 4294966988LL;
      }

      else if (msg.msgh_id == 1302)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v14 = 4294966996LL;
          if (v18 == 1 && msg.msgh_size == 72 && !msg.msgh_remote_port && HIBYTE(v20) == 1)
          {
            int v15 = v21;
            if (v21 == *(_DWORD *)&v23[16])
            {
              uint64_t v14 = 0LL;
              *a8 = *(_OWORD *)v23;
              *a9 = v19;
              *a10 = v15;
              return v14;
            }
          }
        }

        else if (msg.msgh_size == 36)
        {
          uint64_t v14 = 4294966996LL;
          if (HIDWORD(v19))
          {
            if (msg.msgh_remote_port) {
              uint64_t v14 = 4294966996LL;
            }
            else {
              uint64_t v14 = HIDWORD(v19);
            }
          }
        }

        else
        {
          uint64_t v14 = 4294966996LL;
        }
      }

      else
      {
        uint64_t v14 = 4294966995LL;
      }

      mach_msg_destroy(&msg);
      return v14;
    }

    mig_dealloc_reply_port(msg.msgh_local_port);
  }

  return v14;
}

uint64_t sub_100060DDC(mach_port_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x4B300000000LL;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v11 = mach_msg(&msg, 3, 0x18u, 0x3Cu, reply_port, 0, 0);
  uint64_t v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if ((_DWORD)v11)
    {
      mig_dealloc_reply_port(msg.msgh_local_port);
      return v12;
    }

    if (msg.msgh_id == 71)
    {
      uint64_t v12 = 4294966988LL;
    }

    else if (msg.msgh_id == 1303)
    {
      if ((msg.msgh_bits & 0x80000000) == 0)
      {
        if (msg.msgh_size == 52)
        {
          if (!msg.msgh_remote_port)
          {
            uint64_t v12 = v18;
            if (!v18)
            {
              int v15 = v20;
              *a2 = v19;
              *a3 = v15;
              int v16 = v22;
              *a4 = v21;
              *a5 = v16;
              return v12;
            }

            goto LABEL_23;
          }
        }

        else if (msg.msgh_size == 36)
        {
          if (msg.msgh_remote_port) {
            BOOL v13 = 1;
          }
          else {
            BOOL v13 = v18 == 0;
          }
          if (v13) {
            uint64_t v12 = 4294966996LL;
          }
          else {
            uint64_t v12 = v18;
          }
          goto LABEL_23;
        }
      }

      uint64_t v12 = 4294966996LL;
    }

    else
    {
      uint64_t v12 = 4294966995LL;
    }

uint64_t sub_100060F54(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  __int16 v2 = *(_DWORD *)(result + 8) ^ (-2705 * ((2 * (result & 0xE860) - result + 6047) ^ 0x5EC6));
  *(_DWORD *)(v1 - 0x7F1325F673F67DF7LL) = (((2 * (v2 & 0x1FF ^ 0x1AA)) & 0x146) - (v2 & 0x1FF ^ 0x1AA) + 4956) ^ 0xDFD2B720;
  *(void *)(v1 - 0x7F1325F673F67E17LL) = 0x2D96AD95357B6407LL;
  *(_DWORD *)(v1 - 0x7F1325F673F67DFBLL) = 980646681;
  int v3 = v2 ^ 0xC8;
  if (v3 == 1)
  {
    int v4 = 980646697;
    goto LABEL_5;
  }

  if (v3 == 2)
  {
    *(_DWORD *)(v1 - 0x7F1325F673F67DFFLL) = -288310080;
    int v4 = 980646701;
LABEL_5:
    *(void *)(v1 - 0x7F1325F673F67E0FLL) = 0xC2CFF6B94A477E31LL;
    *(void *)(v1 - 0x7F1325F673F67E07LL) = 0x3D300946B5B881CELL;
    *(_DWORD *)(v1 - 0x7F1325F673F67DFBLL) = v4;
  }

  *(_DWORD *)(result + 16) = 4865213;
  return result;
}

void sub_1000610BC(uint64_t a1)
{
  int v1 = 460628867 * ((a1 & 0x73B15F3F | ~(a1 | 0x73B15F3F)) ^ 0xC0D822BD);
  unsigned int v2 = *(_DWORD *)(*(void *)(a1 + 32) - 0x14688F5EE1DFFFBCLL) + 2052273197;
  unsigned int v3 = *(_DWORD *)(a1 + 8) - v1 + 1701961640;
  BOOL v4 = v2 < 0x7F917812;
  BOOL v5 = v2 > v3;
  if (v3 < 0x7F917812 != v4) {
    BOOL v5 = v4;
  }
  __asm { BR              X10 }

uint64_t sub_1000611AC(uint64_t a1)
{
  int v4 = *(unsigned __int8 *)(*(void *)(a1 + 16) + ((43 * (v3 ^ 0x668)) ^ 0xFAC1BDB4) + v2);
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((29 * (((v4 - ((2 * v4) & 0xFFFFFFF7) - 1792580357) & 0x1F) != 4)) ^ v3))
                            - 8LL))();
}

uint64_t sub_100061214()
{
  int v4 = v3 ^ 0x161;
  unsigned int v5 = ((v4 - 1365) ^ 0x2DDF9D77) + v0;
  int v6 = ((v2 + 1119940959) < 0x47FF3543) ^ (v5 < ((v4 - 1663) | 2u) + 1207907517);
  BOOL v7 = v2 + 1119940959 > v5;
  if (v6) {
    BOOL v7 = (v2 + 1119940959) < 0x47FF3543;
  }
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * (v4 | (8 * !v7))) - 12LL))();
}

uint64_t sub_100061294(uint64_t a1)
{
  return ((uint64_t (*)(uint64_t, void))(*(void *)(v2
                                                              + 8LL
                                                              * (((*(unsigned __int8 *)(v1 + (v3 + v4)) >> 7)
                                                                * ((v5 ^ 0x128) + 1040)) ^ v5))
                                                  - 12LL))( a1,  ((2 * *(unsigned __int8 *)(v1 + (v3 + v4))) & 0x156)
}

uint64_t sub_1000612F0(uint64_t a1, uint64_t a2, int a3)
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * ((((((a3 + 1530) ^ 0x7FD) + v4) & 0x7F ^ 0xA9AEDBFD)
                                          + ((2 * (((a3 + 1530) ^ 0x7FD) + v4)) & 0xFA)
                                          + 1448158210 < 4) ^ a3))
                            - 4LL))();
}

uint64_t sub_100061348( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  unsigned int v12 = v10 + a8 - 488167948;
  BOOL v13 = v12 < (((v11 ^ 0x606) - 296) ^ 0x91D44553);
  BOOL v14 = v12 > v8 + 2008329579;
  return (*(uint64_t (**)(void))(v9 + 8LL * ((69 * !v14) ^ v11)))();
}

uint64_t sub_1000613C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v13 = *(unsigned __int8 *)(v8 + (v11 + v10 + 1));
  return ((uint64_t (*)(uint64_t, void, void))(*(void *)(v9 + 8LL * (v12 ^ (29 * (a8 != -1448158210))))
                                                          - 12LL))( a1,  (v13 ^ 0xFFCFFA56) + 1010724780 + (((v12 + 1305) ^ v12 ^ 0x5B5) & (2 * v13)),  (v12 + 296));
}

uint64_t sub_100061448(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  int v11 = *(unsigned __int8 *)(v7 + (v10 + a5)) | (a2 << 8);
  return ((uint64_t (*)(uint64_t, void))(*(void *)(v8 + 8LL * ((803 * (v9 - 1 == a6)) ^ a7)) - 12LL))( a1,  ((v11 - 241828352) ^ 0x7C9E6ED2) - 1083180240 + (((v11 - 241828352) << (a7 ^ 0x32)) & 0xF93CDDA4));
}

uint64_t sub_1000614BC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned int v12 = a2 + v9 + v10 + v11 - 2131863985 + 332790558;
  unsigned int v13 = v7 + 1705001702;
  int v14 = (v13 < 0x7FBFDB50) ^ (v12 < 0x7FBFDB50);
  BOOL v15 = v12 > v13;
  if (v14) {
    BOOL v15 = v12 < 0x7FBFDB50;
  }
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((491 * v15) ^ ((a7 ^ 0x49D) + 1338))) - 12LL))();
}

uint64_t *sub_100061544@<X0>(uint64_t *result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t v8 = result[5];
  uint64_t v7 = result[6];
  uint64_t v9 = *result;
  *a3 = v4 - 1722522700;
  *(_DWORD *)(v9 - 0x75E8EE415267DA57LL) = v5;
  *(_DWORD *)(v8 - 0x4FE3AE517815B46FLL) = a2;
  *(void *)(v7 - 0x6B80B300B999BABLL) = v3 + (v6 - 802911792);
  *((_DWORD *)result + 6) = 528123064;
  return result;
}

void sub_1000615BC(_DWORD *a1)
{
  unsigned int v1 = *a1 ^ (69008221 * ((-2 - ((a1 | 0xFC1C80D3) + (~(_DWORD)a1 | 0x3E37F2C))) ^ 0xD0412D26));
  __asm { BR              X9 }

void sub_100061674()
{
  *(_DWORD *)(v0 + 16) = 906255194;
}

void sub_10006193C(_DWORD *a1)
{
  unsigned int v1 = 831981571 * ((((2 * (_DWORD)a1) | 0xACFEB304) - (_DWORD)a1 + 696297086) ^ 0x4FDE89A6);
  unsigned int v2 = a1[1] - v1;
  BOOL v3 = (*a1 ^ v1) - 1636498695 < 0xFFFFFEFF;
  __asm { BR              X9 }

uint64_t sub_1000619DC(uint64_t result)
{
  *(_DWORD *)(result + 24) = 1833820915;
  return result;
}

void sub_100061D78(_DWORD *a1)
{
  unsigned int v1 = 1543737703 * ((1016161312 - (a1 | 0x3C916420) + (a1 | 0xC36E9BDF)) ^ 0xBD9ACBA3);
  unsigned int v2 = *a1 + v1;
  int v3 = a1[2] ^ v1;
  BOOL v5 = (v3 & 0x30000000) == 0x20000000 || (v3 & 0x3F000000) == 251658240;
  __asm { BR              X11 }

uint64_t sub_100061E58@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unsigned int a4, unint64_t *a5, char a6, int a7, int a8, unint64_t *a9, unint64_t *a10, uint64_t a11)
{
  uint64_t v15 = *(void *)(v12 + 16);
  unsigned int v16 = 1224239923 * ((~&a4 & 0xAE13C0ED | &a4 & 0x51EC3F12) ^ 0x5CA03D3A);
  a6 = (51 * ((~&a4 & 0xED | &a4 & 0x12) ^ 0x3A)) ^ 0x28;
  a5 = &STACK[0xB03DFD4CB3FB627];
  a7 = v16 - 1882357714 + v14;
  a10 = &STACK[0x1CAC648E56C350DC];
  a11 = v15;
  a9 = &STACK[0x30E75BECB5707F60];
  a4 = ((v11 ^ 0xBD6BF7BF) - 806846770 + ((2 * v11) & 0xE7BFBE6C ^ 0x85281000)) ^ v16;
  uint64_t v17 = ((uint64_t (*)(unsigned int *))(*(void *)(a1 + 8LL * (int)(v14 & 0xB5489169)) - 12LL))(&a4);
}

uint64_t sub_100061FA0()
{
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * (((v2 + 1266) * (v1 == 251658240)) ^ v2))
}

uint64_t sub_100061FD0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  return ((uint64_t (*)(uint64_t))(*(void *)(v10 + 8LL * ((31 * (a9 + 4 < a9)) ^ v9)) - 12LL))(a1);
}

uint64_t sub_100062060()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * (v0 ^ (1578
                                               * ((((v0 ^ 0x6A5) + 2113849492) & (2 * v1) ^ (v0 + 884901791))
                                                + (v1 ^ 0xA4A03B68)
                                                - 75628672 != 981296987))))
                            - 8LL))();
}

uint64_t sub_1000620D0()
{
  return (*(uint64_t (**)(void))(v3
                              + 8LL
                              * ((((v1 + v0 - 1056925659) > 0xB) * (((v2 - 1330570276) & 0x4F4EDDFB) - 231)) ^ v2)))();
}

uint64_t sub_100062124()
{
  return (*(uint64_t (**)(void))(v3
                              + 8LL
                              * ((109
                                * (((v2 - (v0 & 3) + 247) & 0xFFFFFFFC) <= v2
                                                                         + ((48 * (v1 ^ 0x734) + 347398935) & 0xEB4B1DEE)
                                                                         - 1068)) ^ (48 * (v1 ^ 0x734)))))();
}

uint64_t sub_100062188@<X0>(int a1@<W0>, unsigned int a2@<W1>, uint64_t a3@<X8>, uint8x8_t a4@<D0>)
{
  uint64_t v8 = (a1 - 689);
  a4.i32[0] = *(_DWORD *)(a3 + (v8 ^ 0x274) + a2);
  *(_DWORD *)(a3 - 3 + (v5 + v4)) = vmovn_s16((int16x8_t)vmovl_u8(a4)).u32[0];
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * (int)((1875 * (v6 != 4)) ^ v8)) - 8LL))();
}

uint64_t sub_1000621F0()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (v0 ^ (44 * (v1 != 0x9A5F5CB3)))) - 8LL))();
}

uint64_t sub_100062250@<X0>(uint64_t a1@<X8>)
{
  BOOL v9 = v4 > 0x5D03E630;
  *(_BYTE *)(a1 + ((v2 + 853) ^ 0xB8EA6FDB) + v7) = *(_BYTE *)(v1 + ((v2 + 853) ^ 0xB8EA6FDB) + v7);
  if (v9 == v7 + 1541833943 < v3) {
    BOOL v9 = v7 + 1541833943 < v5;
  }
  return ((uint64_t (*)(BOOL))(*(void *)(v8 + 8LL * ((v9 * v6) ^ v2)) - 8LL))(v7 + 1541833943 < v5);
}

uint64_t sub_1000622BC@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 - 3 + (v4 + v2)) = *(_DWORD *)(v1 - 3 + (v4 + v2));
  return ((uint64_t (*)(void))(*(void *)(v6
                                        + 8LL * (((v5 == 4) * ((v3 - 1133975844) & 0x43971EFF ^ 0x523)) ^ (v3 + 134)))
                            - 8LL))();
}

uint64_t sub_100062320()
{
}

uint64_t sub_10006235C@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  *(_BYTE *)(a2 + (v5 + v4)) = *(_BYTE *)(v2 + (v5 + v4));
}

uint64_t sub_1000623A0()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL * (((*(void *)(v1 + 24) != 0x1ED5BB0BF3801E93LL) * (v0 ^ 0x7FF)) ^ v0))
                            - 12LL))();
}

uint64_t sub_1000623D4@<X0>(uint64_t a1@<X8>, uint64_t a2, int a3)
{
  *(_DWORD *)(a1 - 0x1ED5BB0BF3801E93LL) = a3;
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((1908 * (*(void *)(v4 + 32) != 0x4AB8828D926C7A6CLL)) ^ ((v3 - 1076) | 0x52)))
                            - 4LL))();
}

void sub_100062434(uint64_t a1@<X8>)
{
  *(void *)(a1 - 0x4AB8828D926C7A6CLL) = v2;
  *(_DWORD *)(v1 + 4) = 528123064;
}

uint64_t sub_1000624D0(uint64_t a1)
{
  int v1 = 235795823 * ((2 * (a1 & 0x125A82D6) - a1 - 307921623) ^ 0x79083470);
  int v2 = *(_DWORD *)(a1 + 16) + v1;
  int v3 = *(_DWORD *)(*(void *)(a1 + 8) - 0x2A461383296CA240LL);
  int v4 = *(_DWORD *)(a1 + 4) - v1;
  unsigned int v6 = v3 - 1362986814;
  BOOL v5 = v3 - 1362986814 < 0;
  unsigned int v7 = 1362986814 - v3;
  if (v5) {
    unsigned int v6 = v7;
  }
  return (*(uint64_t (**)(void))((char *)*(&off_10025B940 + v2 - 1235)
                              + 8
}

uint64_t sub_10006259C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4
                                                                                 + 8LL
                                                                                 * (((v3 == ((v5 + 218382796) & 0xF2FBBD9F ^ 0x36CCBBED))
                                                                                   * (((v5 - 369) | 0x133) - 1290)) ^ v5))
                                                                     - 4LL))( a1,  a2,  a3,  414343733LL);
}

_DWORD *sub_1000625F8(_DWORD *result, uint64_t a2, uint64_t a3, int a4)
{
  *Class result = a4;
  return result;
}

uint64_t sub_100062600(uint64_t a1)
{
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v1
                                                               + 8LL
                                                               * ((368
                                                                 * (((((v2 - 729124245) & 0x2B758CB3) - 1084284195) & 0x40A0DDBA) == 1322)) ^ (v2 - 729124245) & 0x2B758CB3))
                                                   - 4LL))( a1,  688723389LL);
}

uint64_t sub_1000626A0@<X0>(uint64_t a1@<X0>, int a2@<W3>, int a3@<W4>, int a4@<W5>, int a5@<W8>)
{
  *(_BYTE *)(*(void *)(a1 + 24) + (a4 + a5)) = (a3 ^ v7) >> v8;
  return (*(uint64_t (**)(void))(v5 + 8LL * ((89 * (a4 - 1 != (a2 ^ 0x1B8) + v6)) ^ a2)))();
}

uint64_t sub_1000626E8(uint64_t a1, uint64_t a2, int a3)
{
}

uint64_t sub_10006272C(uint64_t a1, int a2, int a3)
{
  BOOL v7 = v3 > v6;
  if (v7 == a2 - 648251087 < ((2 * a3) ^ 0xC0E) - 2107012668) {
    BOOL v7 = a2 - 648251087 < v5;
  }
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((537 * v7) ^ a3)) - 4LL))();
}

uint64_t sub_100062798@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W8>)
{
  return sub_1000626A0(a1, a3 + 152, *(_DWORD *)(*v5 + 4LL * (a2 - 688723389)), v4, a4);
}

void sub_1000627C8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4) + 1224239923 * ((2 * (a1 & 0x188FD632) - a1 - 412079667) ^ 0x15C3D41A);
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned int v5 = v1 - 460628867 * (((&v3 | 0xA020558C) - (&v3 & 0xA020558C)) ^ 0xECB6D7F1) - 369;
  uint64_t v3 = v2;
  sub_10006292C((uint64_t)&v3);
  __asm { BR              X8 }

void sub_1000628C0()
{
  else {
    int v3 = v1 + 2;
  }
  *int v0 = v3;
}

uint64_t sub_10006292C(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)a1 - 0x2A461383296CA240LL);
  int v4 = v2 - 1362986814;
  BOOL v3 = v2 - 1362986814 < 0;
  int v5 = 1362986814 - v2;
  if (!v3) {
    int v5 = v4;
  }
  int v1 = *(_DWORD *)(a1 + 12) + 460628867 * ((((2 * a1) | 0x5510E07A) - a1 - 713584701) ^ 0x661EF240);
  return ((uint64_t (*)(void))(*(void *)((char *)*(&off_10025B940 + v1 - 639)
                                        + 8
                                        * ((126
                                          * ((v5 ^ (v1 + 2142226214))
                                           - 1075855435
                                           + ((2 * v5) & 0xFF5F93DE)
                                           + ((v1 + 1012) ^ 0xC07070E6) < 0x7FFFFFFF)) ^ (v1 + 1012))
                                        - 4)
                            - 12LL))();
}

uint64_t sub_100062A3C(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))(*(void *)(a2 + 8LL * (int)(((*(_DWORD *)(*v3 + 4LL * v6) != v5) * v4) ^ v2 ^ v4))
                            - ((v2 ^ v4)
                             + 1012)
                            + 1713LL))();
}

void sub_100062A74()
{
}

uint64_t sub_100062A7C(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(result + _Block_object_dispose(va, 8) = a3;
  return result;
}

void sub_100062A84(uint64_t a1, uint64_t a2)
{
  __asm { BR              X8 }

uint64_t sub_100062B10(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8LL * ((528 * (**(_BYTE **)(a2 + 8) == 0)) ^ 0x114)))( a1,  a2);
}

uint64_t sub_100062B68( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  *(void *)(*(void *)(a17 + 96) + 504LL) = v19 + 1;
  *(_DWORD *)(*(void *)(a17 + 96) + 496LL) = (v20 ^ 0xFFFFFC32) + a19;
  int v23 = 235795823 * ((((v22 - 160) | 0x8A773861) - (v22 - 160) + ((v22 - 160) & 0x7588C798)) ^ 0x1EDA7138);
  *(_DWORD *)(v22 - 152) = v23 ^ 0x4BBA54CA;
  *(_DWORD *)(v22 - 14_Block_object_dispose(va, 8) = v23 + v20 + 426522044;
  int v24 = v20 + 1057;
  *(void *)(v22 - 160) = &STACK[0x7F1325F673F68103];
  int v26 = v20;
  sub_100060F54(v22 - 160);
  return ((uint64_t (*)(uint64_t))(*(void *)(v21
                                                      + 8LL
                                                      * ((26
                                                        * (a19
                                                         + 1293088574
                                                         + ((2 * (STACK[0x2F0] & 0x3F)) ^ 0x2A)
}

uint64_t sub_100062D64@<X0>( uint64_t a1@<X0>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  unsigned int v15 = ((509 * (v14 ^ 0x20E)) ^ 0x15410F97) + a13;
  else {
    BOOL v16 = a2 + 374737227 < v15;
  }
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v13 + 8LL * ((21 * v16) ^ v14)) - 12LL))( a1,  2636611457LL);
}

uint64_t sub_100062DE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  int v21 = 831981571 * ((~((v20 - 160) | 0x33845586) + ((v20 - 160) & 0x33845586)) ^ 0x55DA7A5D);
  *(void *)(v20 - 152) = a16;
  *(_DWORD *)(v20 - 160) = (a19 + 544531033) ^ v21;
  *(_DWORD *)(v20 - 156) = v21 + a5 - 99;
  uint64_t v22 = sub_1000889FC(v20 - 160);
  uint64_t v23 = STACK[0x2F0] & 0x3F;
  *((_BYTE *)&STACK[0x2AC] + (v23 ^ 0x15)) = 46;
}

uint64_t sub_100062EF4@<X0>(uint64_t a1@<X0>, int a2@<W6>, int a3@<W8>)
{
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3
                                                               + 8LL
                                                               * ((((a3 - 1709673471) < 0x38)
                                                                 * (a2 + v4 + 2373)) ^ (a2 + v4 + 291)))
                                                   - 12LL))( a1,  -1709673471LL);
}

uint64_t sub_100062F38@<X0>(uint64_t a1@<X1>, int a2@<W4>, unsigned int a3@<W8>)
{
  uint64_t v5 = a1 + a3;
  else {
    uint64_t v6 = 56LL;
  }
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * (int)((((a2 + v3 + 397 + 1018862751) & 0xB731D7A7 ^ 0x42)
}

uint64_t sub_100062FA8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(unint64_t *)((char *)&STACK[0x2AC] + a2 + a1) = 0xAEAEAEAEAEAEAEAELL;
  return (*(uint64_t (**)(void))(v4
                              + 8LL
                              * ((3844 * (((v2 - 1130) ^ 0x290LL) == (v3 & 0xFFFFFFFFFFFFFFF8LL))) ^ v2)))();
}

uint64_t sub_100062FF8@<X0>(int a1@<W0>, int a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, int a5@<W8>)
{
  BOOL v11 = v5 < a3;
  *((_BYTE *)&STACK[0x2AC] + (v7 + a2)) = *(_BYTE *)(v8 + (a5 + a1))
  unsigned int v12 = a5 + 1 + a4;
  int v13 = v11 ^ (v12 < a3);
  BOOL v14 = v12 < v5;
  if (!v13) {
    BOOL v11 = v14;
  }
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * ((v11 * v6) ^ v10)) - 12LL))();
}

uint64_t sub_100063080(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3
                                                     + 8LL
                                                     * ((((((v2 - 1090) | 0x401) - 1047) ^ 0x7C) * (v1 != 63)) ^ v2)))( a1,  -1709673471LL);
}

uint64_t sub_1000630BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * ((((v8 - a7 - 742) ^ (a5 - 41)) * ((v7 ^ 0x2Au) > 7)) ^ v8))
                            + 202608557LL
                            - (a5 + v8 - 1115)))();
}

uint64_t sub_100063104@<X0>(uint64_t a1@<X1>, int a2@<W4>, int a3@<W6>, uint64_t a4@<X8>)
{
  *(unint64_t *)((char *)&STACK[0x2AC] + a4 + a1) = 0xAEAEAEAEAEAEAEAELL;
}

void sub_10006315C()
{
}

uint64_t sub_100063164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * (((v7 - 254) * (v5 != v6)) ^ v7))
                            + 202608557LL
                            - (a5 + v7 - 664)))();
}

uint64_t sub_10006319C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, int32x4_t a35, int32x4_t a36, int32x4_t a37, int32x4_t a38)
{
  int v44 = LOBYTE(STACK[0x30C]) ^ 0x1E;
  if (v44 == 1)
  {
    int v46 = a5 ^ (a5 - 760);
    unsigned int v51 = STACK[0x2F0];
    unsigned int v52 = STACK[0x2EC];
    int v53 = LODWORD(STACK[0x2F0]) >> ((a5 ^ (a5 + 8)) - 115);
    unsigned int v54 = (LODWORD(STACK[0x2F0]) >> 13) ^ 0xFFFFFFB5;
    LOBYTE(STACK[0x2E4]) = ((8 * LOBYTE(STACK[0x2F0])) ^ 0xA8) - ((2 * ((8 * LOBYTE(STACK[0x2F0])) ^ 0xA8)) & 0x55) - 82;
    LOBYTE(STACK[0x2E5]) = (v53 ^ 0x6C) - 2 * ((v53 ^ 0x6C) & 0x2F ^ v53 & 1) - 82;
    LOBYTE(STACK[0x2E6]) = v54 - ((2 * v54) & 0x5C) - 82;
    HIDWORD(v55) = v52 ^ 7;
    LODWORD(v55) = v51 ^ 0x20000000;
    LOBYTE(STACK[0x2E7]) = ((v51 >> 21) ^ 0x6C) - ((2 * ((v51 >> 21) ^ 0x6C)) & 0x5C) - 82;
    LOBYTE(STACK[0x2E8]) = (v55 >> 29) - ((2 * (v55 >> 29)) & 0x5C) - 82;
    LOBYTE(STACK[0x2E9]) = ((v52 >> 5) ^ 0x20) - 2 * (((v52 >> 5) ^ 0x20) & 0x2F ^ ((v52 & 0x20) != 0)) - 82;
    LOBYTE(STACK[0x2EA]) = ((v52 >> 13) ^ 0xDB) - ((2 * ((v52 >> 13) ^ 0xDB)) & 0x5C) - 82;
    unsigned int v50 = ((v52 >> 21) ^ 0xFFFFFFAB) - ((2 * ((v52 >> 21) ^ 0xFFFFFFAB)) & 0x5C) - 82;
  }

  else
  {
    int v45 = 202608569;
    if (v44 != 2) {
      goto LABEL_6;
    }
    int v46 = 444 * (a5 ^ (a5 + 2));
    unsigned int v47 = STACK[0x2EC];
    unsigned int v48 = STACK[0x2F0];
    unsigned int v50 = (LODWORD(STACK[0x2EC]) >> (-68 * (a5 ^ (a5 + 2)) - 99)) ^ 0xFFFFFFAB;
    LOBYTE(STACK[0x2E4]) = v50 - ((2 * v50) & 0x5C) - 82;
    LOBYTE(STACK[0x2E5]) = ((v47 >> 13) ^ 0xDB) - ((2 * ((v47 >> 13) ^ 0xDB)) & 0x5C) - 82;
    LOBYTE(STACK[0x2E6]) = ((v47 >> 5) ^ 0x20) - 2 * (((v47 >> 5) ^ 0x20) & 0x2F ^ ((v47 & 0x20) != 0)) - 82;
    HIDWORD(v49) = v47 ^ 7;
    LODWORD(v49) = v48 ^ 0x20000000;
    LOBYTE(STACK[0x2E7]) = (v49 >> 29) - ((2 * (v49 >> 29)) & 0x5C) - 82;
    LOBYTE(STACK[0x2E8]) = ((v48 >> 21) ^ 0x6C) - 2 * (((v48 >> 21) ^ 0x6C) & 0x2F ^ ((v48 & 0x200000) != 0)) - 82;
    LOBYTE(STACK[0x2E9]) = ((v48 >> 13) ^ 0xB5) - ((2 * ((v48 >> 13) ^ 0xB5)) & 0x5C) - 82;
    LOBYTE(STACK[0x2EA]) = ((v48 >> 5) ^ 0x6C) - 2 * (((v48 >> 5) ^ 0x6C) & 0x2F ^ ((v48 & 0x20) != 0)) - 82;
    LOBYTE(v50) = ((8 * v48) ^ 0xA8) + (~(2 * ((8 * v48) ^ 0xA8)) | 0xAF) - 81;
  }

  int v45 = (v46 + 1277865) | 0xC000C98;
  LOBYTE(STACK[0x2EB]) = v50;
LABEL_6:
  uint64_t v56 = v45 ^ (a5 - 719);
  unsigned int v57 = (uint64_t (*)(void, void, void, void, void, void, void, __n128, __n128, __n128, __n128, __n128))((v56 ^ 0xFFFFFFFFFFFFFCA7LL) + *(void *)(v42 + 8LL * (a7 + v45 - 275)));
  LODWORD(v116) = HIDWORD(a18) + 1066872040;
  uint64_t v115 = (v56 - a7 - 478) ^ 0xC138FB8LL;
  v58.n128_u64[0] = 0xAEAEAEAEAEAEAEAELL;
  v58.n128_u64[1] = 0xAEAEAEAEAEAEAEAELL;
  __n128 v59 = (__n128)vdupq_n_s32(0x1F7A84BCu);
  __n128 v60 = (__n128)vdupq_n_s32(0x1F7A84B8u);
  a27 = v40 - 1518;
  a28 = v38 - 16;
  v61.n128_u64[0] = 0x5C5C5C5C5C5C5C5CLL;
  v61.n128_u64[1] = 0x5C5C5C5C5C5C5C5CLL;
  __n128 v62 = (__n128)vdupq_n_s32(0x1F7A84BBu);
  unsigned int v63 = STACK[0x2F8];
  uint64_t v64 = LODWORD(STACK[0x2F4]);
  int v65 = STACK[0x2F8];
  unsigned int v66 = STACK[0x2FC];
  int v67 = STACK[0x300];
  uint64_t v68 = LODWORD(STACK[0x2FC]);
  uint64_t v69 = LODWORD(STACK[0x300]);
  int v70 = LOBYTE(STACK[0x30C]) ^ 0x1E;
  HIDWORD(a22) = LOBYTE(STACK[0x30C]) ^ 0x1E;
  if (v70 == 2)
  {
    HIDWORD(v116) = STACK[0x2F4];
    unint64_t v117 = __PAIR64__(v66, v63);
    LODWORD(a25) = STACK[0x300];
    id v118 = v57;
    int8x16x4_t v120 = vld4q_s8((const char *)&STACK[0x2AC]);
    uint64_t v95 = LODWORD(STACK[0x304]);
    uint8x16_t v96 = (uint8x16_t)veorq_s8(v120.val[0], (int8x16_t)v58);
    uint16x8_t v97 = vmovl_u8(*(uint8x8_t *)v96.i8);
    uint16x8_t v98 = vmovl_high_u8(v96);
    uint8x16_t v99 = (uint8x16_t)veorq_s8(v120.val[1], (int8x16_t)v58);
    _Q22 = vmovl_u8(*(uint8x8_t *)v99.i8);
    _Q21 = vmovl_high_u8(v99);
    __asm
    {
      SHLL2           V23.4S, V21.8H, #0x10
      SHLL2           V24.4S, V22.8H, #0x10
    }

    uint8x16_t v104 = (uint8x16_t)veorq_s8(v120.val[2], (int8x16_t)v58);
    uint16x8_t v105 = vmovl_high_u8(v104);
    uint16x8_t v106 = vmovl_u8(*(uint8x8_t *)v104.i8);
    v120.val[0] = veorq_s8(v120.val[3], (int8x16_t)v58);
    v120.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v120.val[0]);
    v120.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v120.val[1]);
    v120.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v120.val[1].i8);
    v120.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v120.val[0].i8);
    v120.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v120.val[0]);
    v120.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v120.val[0].i8);
    int32x4_t v107 = (int32x4_t)vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q22.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v106.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v97.i8), 0x18uLL)),  v120.val[0]);
    int32x4_t v108 = (int32x4_t)vorrq_s8( vorrq_s8( vorrq_s8(_Q24, (int8x16_t)vshll_high_n_u16(v106, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v97), 0x18uLL)),  v120.val[3]);
    int32x4_t v109 = (int32x4_t)vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v105.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v98.i8), 0x18uLL)),  v120.val[1]);
    int32x4_t v110 = (int32x4_t)vorrq_s8( vorrq_s8( vorrq_s8(_Q23, (int8x16_t)vshll_high_n_u16(v105, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v98), 0x18uLL)),  v120.val[2]);
    v120.val[0] = veorq_s8( vandq_s8((int8x16_t)v107, (int8x16_t)v59),  (int8x16_t)(*(_OWORD *)v120.val & __PAIR128__(0xFFFFFF04FFFFFF04LL, 0xFFFFFF04FFFFFF04LL)));
    v120.val[3] = veorq_s8( vandq_s8((int8x16_t)v108, (int8x16_t)v59),  (int8x16_t)(*(_OWORD *)&v120.val[3] & __PAIR128__(0xFFFFFF04FFFFFF04LL, 0xFFFFFF04FFFFFF04LL)));
    v120.val[1] = veorq_s8( vandq_s8((int8x16_t)v109, (int8x16_t)v59),  (int8x16_t)(*(_OWORD *)&v120.val[1] & __PAIR128__(0xFFFFFF04FFFFFF04LL, 0xFFFFFF04FFFFFF04LL)));
    v120.val[2] = veorq_s8( vandq_s8((int8x16_t)v110, (int8x16_t)v59),  (int8x16_t)(*(_OWORD *)&v120.val[2] & __PAIR128__(0xFFFFFF04FFFFFF04LL, 0xFFFFFF04FFFFFF04LL)));
    a37 = vaddq_s32(vsubq_s32(v109, vaddq_s32((int32x4_t)v120.val[1], (int32x4_t)v120.val[1])), (int32x4_t)v60);
    a38 = vaddq_s32(vsubq_s32(v110, vaddq_s32((int32x4_t)v120.val[2], (int32x4_t)v120.val[2])), (int32x4_t)v60);
    a35 = vaddq_s32(vsubq_s32(v107, vaddq_s32((int32x4_t)v120.val[0], (int32x4_t)v120.val[0])), (int32x4_t)v60);
    a36 = vaddq_s32(vsubq_s32(v108, vaddq_s32((int32x4_t)v120.val[3], (int32x4_t)v120.val[3])), (int32x4_t)v60);
    id v111 = (_DWORD *)&a35 + v40 + 819124372;
    int v112 = *((_DWORD *)&a35 + (a27 ^ 0x6FA) + 819124372) ^ *(v111 - 3);
    int v113 = *(v111 - 16) ^ *(v111 - 14) ^ (v112 + v39 - ((2 * v112) & 0x3EF50970));
    HIDWORD(v114) = v113 ^ v39;
    LODWORD(v114) = v113;
    _DWORD *v111 = (v114 >> 31) + v39 - ((2 * (v114 >> 31)) & 0x3EF50970);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t (*)(void, void, void, void, void, void, void, __n128, __n128, __n128, __n128, __n128), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 8LL * ((1326 * (v38 == 819124309)) ^ 0x2CCu)))( v69,  671088640LL,  974LL,  191LL,  84041008LL,  v95,  v68,  v64,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  v115,  a22,  v116,  v117,  a25,  v118,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35.i64[0],  a35.i64[1],  a36.i64[0],  a36.i64[1],  a37.i64[0],  a37.i64[1],  a38.i64[0],  a38.i64[1]);
  }

  else if (v70 == 1)
  {
    HIDWORD(v116) = STACK[0x2F4];
    LODWORD(a25) = STACK[0x300];
    int8x16x4_t v119 = vld4q_s8((const char *)&STACK[0x2AC]);
    uint8x16_t v71 = (uint8x16_t)veorq_s8(v119.val[0], (int8x16_t)v58);
    uint16x8_t v72 = vmovl_u8(*(uint8x8_t *)v71.i8);
    int8x16_t v73 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v72.i8);
    int8x16_t v74 = (int8x16_t)vmovl_high_u16(v72);
    uint16x8_t v75 = vmovl_high_u8(v71);
    int8x16_t v76 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v75.i8);
    int8x16_t v77 = (int8x16_t)vmovl_high_u16(v75);
    uint8x16_t v78 = (uint8x16_t)veorq_s8(v119.val[1], (int8x16_t)v58);
    uint16x8_t v79 = vmovl_high_u8(v78);
    uint16x8_t v80 = vmovl_u8(*(uint8x8_t *)v78.i8);
    uint8x16_t v81 = (uint8x16_t)veorq_s8(v119.val[2], (int8x16_t)v58);
    _Q26 = (int8x16_t)vmovl_high_u8(v81);
    _Q25 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v81.i8);
    int8x16_t v84 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q25.i8, 0x10uLL);
    __asm { SHLL2           V25.4S, V25.8H, #0x10 }

    int8x16_t v89 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q26.i8, 0x10uLL);
    __asm { SHLL2           V26.4S, V26.8H, #0x10 }

    v119.val[0] = veorq_s8(v119.val[3], (int8x16_t)v58);
    v119.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v119.val[0]);
    v119.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v119.val[1]);
    v119.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v119.val[0].i8);
    v119.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v119.val[0]);
    v119.val[0] = vorrq_s8( vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v119.val[0].i8), 0x18uLL), v84),  vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v80.i8, 8uLL), v73));
    v119.val[3] = vorrq_s8( vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v119.val[3], 0x18uLL), _Q25),  vorrq_s8((int8x16_t)vshll_high_n_u16(v80, 8uLL), v74));
    v119.val[1] = vorrq_s8( vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v119.val[1].i8), 0x18uLL), v89),  vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v79.i8, 8uLL), v76));
    v119.val[2] = vorrq_s8( vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v119.val[2], 0x18uLL), _Q26),  vorrq_s8((int8x16_t)vshll_high_n_u16(v79, 8uLL), v77));
    int32x4_t v90 = (int32x4_t)veorq_s8( vandq_s8(v119.val[0], (int8x16_t)v62),  (int8x16_t)(*(_OWORD *)&v73 & __PAIR128__(0xFFFFFF03FFFFFF03LL, 0xFFFFFF03FFFFFF03LL)));
    int32x4_t v91 = (int32x4_t)veorq_s8( vandq_s8(v119.val[3], (int8x16_t)v62),  (int8x16_t)(*(_OWORD *)&v74 & __PAIR128__(0xFFFFFF03FFFFFF03LL, 0xFFFFFF03FFFFFF03LL)));
    int32x4_t v92 = (int32x4_t)veorq_s8( vandq_s8(v119.val[1], (int8x16_t)v62),  (int8x16_t)(*(_OWORD *)&v76 & __PAIR128__(0xFFFFFF03FFFFFF03LL, 0xFFFFFF03FFFFFF03LL)));
    int32x4_t v93 = (int32x4_t)veorq_s8( vandq_s8(v119.val[2], (int8x16_t)v62),  (int8x16_t)(*(_OWORD *)&v77 & __PAIR128__(0xFFFFFF03FFFFFF03LL, 0xFFFFFF03FFFFFF03LL)));
    a37 = vaddq_s32(vsubq_s32((int32x4_t)v119.val[1], vaddq_s32(v92, v92)), (int32x4_t)v60);
    a38 = vaddq_s32(vsubq_s32((int32x4_t)v119.val[2], vaddq_s32(v93, v93)), (int32x4_t)v60);
    a35 = vaddq_s32(vsubq_s32((int32x4_t)v119.val[0], vaddq_s32(v90, v90)), (int32x4_t)v60);
    a36 = vaddq_s32(vsubq_s32((int32x4_t)v119.val[3], vaddq_s32(v91, v91)), (int32x4_t)v60);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void, uint64_t (**)(int, int, int, int, int, int, int, int, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t (*)(void, void, void, void, void, void, void, __n128, __n128, __n128, __n128, __n128), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 + 8LL * ((1714 * (a28 + 1 == v38)) ^ 0x3CEu)) - 12LL))( v69,  671088640LL,  974LL,  191LL,  -(byte_100203240[v40 + a28] - 65),  3290667251LL,  dword_100204C50[v40 + a28],  &off_10025B940,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  v115,  a22,  v116,  __PAIR64__(v66, v63),  a25,  v57,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34);
  }

  else
  {
    LODWORD(STACK[0x2F4]) = 2 * (LODWORD(STACK[0x2F4]) ^ v43) + v43 - (v41 & (4 * (LODWORD(STACK[0x2F4]) ^ v43)));
    LODWORD(STACK[0x2F8]) = (v65 ^ v43) + (v63 ^ v43) + v43 - (v41 & (2 * ((v65 ^ v43) + (v63 ^ v43))));
    LODWORD(STACK[0x2FC]) = (v68 ^ v43) + (v66 ^ v43) + v43 - (v41 & (2 * ((v68 ^ v43) + (v66 ^ v43))));
    LODWORD(STACK[0x300]) = (v69 ^ v43) + (v67 ^ v43) + v43 - (v41 & (2 * ((v69 ^ v43) + (v67 ^ v43))));
    a34 = 0LL;
    return v57(v69, 671088640LL, 974LL, 191LL, 202608569LL, a6, 4092359100LL, v58, v59, v60, v61, v62);
  }

uint64_t sub_10006435C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20, uint64_t a21, uint64_t a22, unsigned int a23)
{
  if (a23 < a6 != a20 + 1085024774 < a6) {
    BOOL v24 = a20 + 1085024774 < a6;
  }
  else {
    BOOL v24 = a20 + 1085024774 > a23;
  }
  return ((uint64_t (*)(uint64_t))(*(void *)(v23 + 8LL * ((35 * !v24) ^ (a7 + a5 + 610)))
                                          - ((4 * (a5 ^ (a5 - 127)) - 1397394991) & 0x534A8CED)
                                          + 201LL))(3305542363LL);
}

uint64_t sub_1000643FC@<X0>(int a1@<W0>, int a2@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * ((1693
                                          * (((29 * (v2 ^ 0xCB)) ^ (a1 + 217)) + a2 >= a2
                                                                                     - 1192033502
                                                                                     + ((v2 + 132796) | 0xC118830))) ^ v2))
                            - 12LL))();
}

uint64_t sub_100064470@<X0>( int a1@<W0>, int a2@<W4>, int a3@<W6>, int a4@<W8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return ((uint64_t (*)(void))(*(void *)(v19
                                        + 8LL
                                        * (((v17 - a15 - a17 - (unint64_t)(a4 + a1) < (unint64_t)((v18 + 201393874) | 0x128839u) - 202608553)
                                          * (a3 + a2 + v18 - 174 - 274)) ^ v18))
                            - 12LL))();
}

uint64_t sub_1000644E4@<X0>(int a1@<W0>, int a2@<W4>, int a3@<W6>, int a4@<W8>)
{
  *(_BYTE *)(v6 + v4) = *(_BYTE *)(v8 + (a4 + a1))
  BOOL v11 = v4 + 1 != ((v5 - a2 + 52) ^ v7);
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * (((4 * v11) | (32 * v11)) ^ (a3 + v5 + 1122))) - 12LL))();
}

uint64_t sub_10006453C@<X0>( int a1@<W0>, int a2@<W6>, int a3@<W7>, int a4@<W8>, int8x16_t a5@<Q0>, int8x16_t a6@<Q3>)
{
  int8x16_t *v7 = vaddq_s8( vsubq_s8( *(int8x16_t *)(v8 + (a4 + a1)),  vandq_s8( vaddq_s8(*(int8x16_t *)(v8 + (a4 + a1)), *(int8x16_t *)(v8 + (a4 + a1))),  a6)),  a5);
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * (a3 ^ (a2 + v6 + 1122))) - ((a2 + v6 - 325) | 4u) + 40LL))();
}

uint64_t sub_10006459C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, unsigned int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, int a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
  if (a23 == 2) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v33
  }
                                                                        + 8LL
                                                                        * ((960
                                                                          * (LODWORD(STACK[0x308]) != ((a5 - 302183354) & 0x5EF6575 ^ 0x3A737A6C))) ^ (a5 + a7))))( a1,  a10,  1007577602LL,  a15);
  if (a23 == 1) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v33
  }
                                                                        + 8LL
                                                                        * ((2 * (LODWORD(STACK[0x308]) != 980646681)) | (8 * (LODWORD(STACK[0x308]) != 980646681)) | (a5 + a7))))( a1,  a10,  1007577602LL,  a15);
  uint64_t v35 = (202609237 - a5);
  unint64_t v36 = ((v35 - 0x90FA88501000CC4LL) ^ (unint64_t)&a33)
      + ((2LL * (void)&a33) & 0xEDE0AEF5FDFFEBB0LL)
      + 0x7DFFFCFFE7FE7E2DLL;
  LOBYTE(STACK[0x307]) = ((v36 + a7 + 63) ^ 0xBA) * (v36 + 12);
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(v33 + 8LL * (int)v35))(a1, a10, 1007577602LL);
}

void sub_100064918()
{
}

uint64_t sub_100064920@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, int a8@<W8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35)
{
  *(_DWORD *)(&a35 + a34) = 1646874195;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(v35 + 8LL * (int)(((a8 ^ 0x1EF) - 61616469) ^ 0xFC53C818 ^ (a4 - 140) ^ ((a8 ^ 0x1EF) - 61616469) & 0xFBFBFF9 ^ a8 ^ 0x1EF)))( &a35 + a34,  a1,  a2,  a3,  a4,  a5,  a6,  a7,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  &a35 + a34 + 392);
}

uint64_t sub_1000649D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  return ((uint64_t (*)(uint64_t, uint64_t, char *))(*(void *)(v10
                                                                       + 8LL
                                                                       * ((21
                                                                         * (v9 != v8
                                                                                + ((v7 - a7 - 1586) ^ (a5 - 1916))
                                                                                - 1924)) ^ v7))
                                                           - 12LL))( a1,  a2,  (char *)*(&off_10025B940 + (v7 ^ 0x705)) - 4);
}

uint64_t sub_100064A24( uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, int a29, int a30)
{
  int v32 = (v30 - a5 - 1343770887) & 0x501857FF;
  int v33 = a7 + v30 + 1711;
  unsigned int v34 = a30 + 1766223185 + v32;
  int v35 = ((a2 + 846614062) < 0x6E84B830) ^ (v34 < 0x6E84B830);
  BOOL v36 = v34 < a2 + 846614062;
  if (v35) {
    BOOL v36 = (a2 + 846614062) < 0x6E84B830;
  }
  return ((uint64_t (*)(void))(*(void *)(v31 + 8LL * ((100 * v36) ^ v33)) - 4LL))();
}

uint64_t sub_100064C84( uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  int v30 = a5 + v27 - 1785;
  int v31 = 460628867 * ((v29 - 644137947 - 2 * ((v29 - 160) & 0xD99B3CC5)) ^ 0x950DBEB8);
  int v32 = (void *)(v29 - 160);
  void v32[5] = a12;
  v32[4] = a14;
  v32[2] = v26;
  v32[6] = a11;
  *(_DWORD *)(v29 - 132) = v27 - v31 - 1355;
  *(_DWORD *)(v29 - 152) = v31 + a2 - 569299352;
  *int v32 = a13;
  ((void (*)(uint64_t))((char *)*(&off_10025B940 + (int)(v27 - 1693)) - 4))(v29 - 160);
  return ((uint64_t (*)(uint64_t))(*(void *)(v28
                                                      + 8LL
                                                      * ((319
                                                        * (*(_DWORD *)(v29 - 136) == (v30 ^ 0x13690C63 ^ (126 * (v27 ^ 0x6F6))))) ^ v27))
                                          - 4LL))(a26);
}

uint64_t sub_100064D98(uint64_t a1)
{
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v4
                                                               + 8LL
                                                               * (((*(_DWORD *)(v1
                                                                              + 48LL
                                                                              * (v3
                                                                               - 836849197
                                                                               + ((v2 + 134350151) | 0x4118310))) == 306204905)
                                                                 * (46 * (v2 ^ 0x764) - 272)) | v2))
                                                   - 12LL))( a1,  v5);
}

uint64_t sub_100064E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  if ((v7 + 1792580379) <= 0x12 && ((1 << (v7 + 27)) & 0x4040D) != 0) {
    __asm { BR              X10 }
  }

  return v8 ^ 0xE085DF66;
}

void sub_1000652F4(uint64_t a1)
{
  BOOL v4 = *(void *)(a1 + 8) != 0x2F801B1FA3259451LL
    && *(void *)(a1 + 32) != 0x4385D97A3D2FFD95LL
    && *(void *)(a1 + 24) != 0x6CD36D505E8E72ABLL;
  int v1 = *(_DWORD *)(a1 + 16) ^ (69008221 * ((~(_DWORD)a1 & 0xFA1A7A5E | a1 & 0x5E585A1) ^ 0x29B82854));
  __asm { BR              X9 }

uint64_t sub_1000653F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20
                                                                                         + 8LL
                                                                                         * ((1143
                                                                                           * (*(_DWORD *)(a20 - 0x2F801B1FA3259439LL) == v21 + 528122754)) ^ v21)))( a1,  a2,  a3,  a4,  a5,  a6);
}

uint64_t sub_100065448( __n128 a1, __n128 a2, __n128 a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  unsigned int v28 = (v24 - 1234759568) & 0x4998EDFF;
  unsigned int v36 = *(_DWORD *)(a24 - 0x2F801B1FA3259441LL) - 1694208568;
  *(void *)(v27 - 144) = (v26 + 204080772) & 0xF3D5FD6D ^ 0xFFFFFFFFFFFFFAD0LL;
  v29.n128_u64[0] = 0x5C5C5C5C5C5C5C5CLL;
  v29.n128_u64[1] = 0x5C5C5C5C5C5C5C5CLL;
  v30.n128_u64[0] = 0xAEAEAEAEAEAEAEAELL;
  v30.n128_u64[1] = 0xAEAEAEAEAEAEAEAELL;
  BOOL v31 = v36 < (v28 ^ 0xDE034483);
  unsigned int v32 = ((v28 - 1242) ^ 0xBFA77940) + 509331227;
  int v33 = v31 ^ (v32 < 0xDE03405E);
  BOOL v34 = v32 < v36;
  if (!v33) {
    BOOL v31 = v34;
  }
  return ((uint64_t (*)(__n128, __n128, __n128, __n128, __n128, __n128))(*(void *)(v25
                                                                                             + 8LL
                                                                                             * (int)((49 * v31) ^ v28))
                                                                                 - (v28 ^ 0x4D1LL)))( a1,  a2,  a3,  a4,  v29,  v30);
}

uint64_t sub_1000656C4()
{
  return (*(uint64_t (**)(void))(v1 + 8LL * v0))();
}

uint64_t sub_100066378( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, unsigned int a13)
{
  *(_BYTE *)(*v16 + (v13 + a7)) = 46;
  BOOL v17 = v13 - 1252806172 < a13 + 852871265;
  return ((uint64_t (*)(void))(*(void *)(v15 + 8LL * (v14 ^ (4 * !v17))) - 12LL))();
}

uint64_t sub_1000663E4@<X0>(unsigned int a1@<W1>, int a2@<W6>, int a3@<W8>)
{
  BOOL v10 = a1 > v7;
  int v11 = v3 + 1;
  *(_BYTE *)(*v9 + (v11 + a2)) = -82;
  if (v10 == v11 + a3 < v4) {
    BOOL v10 = v11 + a3 < v6;
  }
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * (v5 | (4 * !v10))) - ((v5 + 1717545629) & 0x99A04F37) + 298LL))();
}

void sub_100066450(uint64_t a1, int a2)
{
  *(void *)(v4 - 0x4385D97A3D2FFD95LL) = *v2;
  *(_DWORD *)(v5 - 0x6CD36D505E8E72ABLL) = a2;
  void *v2 = 0LL;
  *(void *)(v8 - 0x2F801B1FA3259449LL) = 0x71851BB071851BB0LL;
  *int v3 = 1123996310;
  *(_DWORD *)(v8 - 0x2F801B1FA325943DLL) = ((*(_DWORD *)(v8 - 0x2F801B1FA325943DLL) & 0xFFFFFFFE ^ 0x64BF89B1) - 1) ^ 0x64BF89B0;
  _DWORD *v7 = *v6;
}

void sub_100066544(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 ^ (2078219279 * (((a1 | 0x2CA10C87) - (a1 & 0x2CA10C87)) ^ 0xF65B9AF3));
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v2 - 0x2A461383296CA240LL) - 1362986814 >= 0) {
    unsigned int v4 = *(_DWORD *)(v2 - 0x2A461383296CA240LL) - 1362986814;
  }
  else {
    unsigned int v4 = 1362986814 - *(_DWORD *)(v2 - 0x2A461383296CA240LL);
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (*(_DWORD *)(v3 - 0x2A461383296CA240LL) - 1362986814 >= 0) {
    unsigned int v5 = *(_DWORD *)(v3 - 0x2A461383296CA240LL) - 1362986814;
  }
  else {
    unsigned int v5 = 1362986814 - *(_DWORD *)(v3 - 0x2A461383296CA240LL);
  }
  v7[1] = v1
  uint64_t v8 = v2;
  sub_1000627C8((uint64_t)v7);
  if (v4 >= v5) {
    unsigned int v6 = v5;
  }
  else {
    unsigned int v6 = v4;
  }
  __asm { BR              X14 }

uint64_t sub_1000666D8@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = 4LL * (v8 + v6);
  int v13 = v10
      + 390819897
      + (*(_DWORD *)(*(void *)(v11 - 0x2A461383296CA23CLL) + v12) ^ v7)
      - (*(_DWORD *)(*(void *)(a3 - 0x2A461383296CA23CLL) + v12) ^ v7);
  *(_DWORD *)(*(void *)(a1 - 0x2A461383296CA23CLL) + v12) = v7 + (v5 ^ 0x1B0) + 112 + v13 - (v9 & (2 * v13)) - 351;
  BOOL v14 = v8 - 852439028 < (int)(v4 + 65763739);
  if (v4 > 0x7C148664 != v8 - 852439028 < -2081719909) {
    BOOL v14 = v4 > 0x7C148664;
  }
  return (*(uint64_t (**)(void))(v3 + 8LL * ((499 * !v14) ^ v5 ^ 0x1B0)))();
}

uint64_t sub_100066804()
{
  int v4 = (((v1 ^ 0x505) - 214) ^ 0xA2BEAA69) + v2;
  BOOL v6 = v4 > 1501123452 || v4 < v3 - 646360195;
  return (*(uint64_t (**)(void))(v0 + 8LL * ((54 * v6) ^ v1)))();
}

uint64_t sub_100066858@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v14 = 4LL * (v10 + v8);
  int v15 = v3 + v12 + (*(_DWORD *)(*(void *)(v13 - 0x2A461383296CA23CLL) + v14) ^ v9);
  *(_DWORD *)(*(void *)(a2 - 0x2A461383296CA23CLL) + v14) = v15
                                                            + v9
                                                            - ((v11 + ((a1 + 203375413) & 0xF3E0BBF4) - 900) & (2 * v15));
  BOOL v17 = v10 + v4 > v5 || v10 + v4 < v7;
  return (*(uint64_t (**)(void))(v2 + 8LL * ((v17 * v6) ^ (a1 - 763))))();
}

uint64_t sub_100066928()
{
  BOOL v4 = v2 + 4249861 < (int)(v3 + 922452629);
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * ((23 * !v4) ^ v1)) - 4LL))();
}

uint64_t sub_1000669A8()
{
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * ((104 * (v1 != 0x6B3AE2BF174B7038LL)) ^ v2))
                            - ((v2 ^ 0x2A8u)
                             + 1470)
                            + 1750LL))();
}

uint64_t sub_1000669EC()
{
  return (*(uint64_t (**)(void))(v0 + 8LL * ((147 * (v2 + v3 - 1 < (v1 + 2147483363))) | (v1 - 16))))();
}

uint64_t sub_100066C60@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL
                              * (((*(_DWORD *)(*(void *)(a1 - 0x2A461383296CA23CLL) + 4LL
}

uint64_t sub_100066CA8()
{
  BOOL v4 = (v3 + v2 + v1 - 270) < 0x7FFFFFFF;
  return (*(uint64_t (**)(void))(v0 + 8LL * (((8 * v4) | (32 * v4)) ^ v1)))();
}

uint64_t sub_100066CD8()
{
  return (*(uint64_t (**)(void))(v0
                              + 8LL * (((*(_DWORD *)(v2 + 4LL * (v3 + v5 - 1)) == v4) * (v1 + 1319)) ^ v1)))();
}

void sub_100066D04(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 - 0x2A461383296CA240LL) = (((v3 + v2) * (v1 - 308515109)) ^ 0xF1BDE73E)
                                         + 1602199552
                                         + ((2 * (v3 + v2) * (v1 - 308515109)) & 0xE37BCE7C);
}

void sub_100066D90(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32) + 1543737703 * ((150514792 - (a1 | 0x8F8AC68) + (a1 | 0xF7075397)) ^ 0x89F303EB);
  __asm { BR              X15 }

uint64_t sub_100066ECC@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v14 = v12 - 83691675;
  int v15 = 23 * (v10 ^ 0x722);
  int v16 = v10 - 1373;
  uint64_t v17 = 4LL * ((v15 ^ (a1 + 1171)) + v9);
  *(_DWORD *)(a9 + v17) = *(_DWORD *)(*(void *)(v11 - 0x2A461383296CA23CLL) + v17);
  BOOL v19 = v9 - 1545971511 < 2063791973 && v9 - 1545971511 >= v14;
  return ((uint64_t (*)(void))(*(void *)(v13 + 8LL * ((1066 * v19) ^ v16)) - 4LL))();
}

uint64_t sub_100066F60( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  BOOL v17 = v13 + 1983709193 <= 1298505381 && v13 + 1983709193 >= a13 - 848978266;
  return ((uint64_t (*)(void))(*(void *)(v15 + 8LL * ((v17 * ((v14 - 114) ^ 0x417)) ^ v14)) - 12LL))();
}

uint64_t sub_100066FD0@<X0>( int a1@<W1>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(_DWORD *)(a10 + 4LL * (v10 + a2)) = a1;
  int v17 = v10 + 1 + v13;
  BOOL v19 = v17 <= v12 + v14 && v17 >= v15;
  return ((uint64_t (*)(void))(*(void *)(v16 + 8LL * ((52 * v19) ^ v11)) - 12LL))();
}

uint64_t sub_10006700C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 8LL * (v6 ^ (30 * (v5 == 0)))))( a1,  a2,  a3,  a4,  a5);
}

uint64_t sub_100067038( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, uint64_t a11, int a12, int a13, uint64_t a14)
{
  int v17 = 3804331
      * ((((2 * ((v16 - 128) ^ 0x377493FC)) | 0xB4D0945C) - ((v16 - 128) ^ 0x377493FC) - 1516784174) ^ 0x13C9FC24);
  *(void *)(v16 - 120) = a14;
  *(_DWORD *)(v16 - 12_Block_object_dispose(va, 8) = v15 - v17 + 516;
  *(_DWORD *)(v16 - 124) = (((a13 << 6) & 0x35FBFB00) - 277091722 + (((v15 ^ 0x611) + 452852062) ^ (32 * a13))) ^ v17;
  sub_1000843DC(v16 - 128);
}

uint64_t sub_100067114( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(void *)(v17 - 112) = &STACK[0x2A461383296CA284];
  *(_DWORD *)(v17 - 120) = v15
                         + 831981571 * ((((2 * (v17 - 128)) | 0x7BACAC24) - (v17 - 128) - 1037456914) ^ 0xA4778636)
                         + 826;
  *(void *)(v17 - 12_Block_object_dispose(va, 8) = a14;
  sub_100082A9C(v17 - 128);
  *(_DWORD *)(v17 - 104) = (v15 + 1121) ^ (((((v17 - 128) | 0xD2A1CF3A) - ((v17 - 128) & 0xD2A1CF3A)) ^ 0x1039D30) * v16);
  *(void *)(v17 - 12_Block_object_dispose(va, 8) = a13;
  *(void *)(v17 - 112) = a14;
  uint64_t v18 = ((uint64_t (*)(uint64_t))((char *)*(&off_10025B940 + (v15 ^ 0x289)) - 8))(v17 - 128);
  BOOL v19 = *(_DWORD *)(v17 - 120) - 1898115906 < ((v15 - 368) ^ 0x96BA9187);
  return ((uint64_t (*)(uint64_t))(*(void *)(v14 + 8LL * ((2 * v19) | (4 * v19) | v15)) - 8LL))(v18);
}

uint64_t sub_100067240( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16)
{
  if (a16 - 1362986814 >= 0) {
    int v18 = a16 - 1362986814;
  }
  else {
    int v18 = ~(a16 - 1362986815);
  }
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v16
                                                               + 8LL
                                                               * ((955
                                                                 * ((((int)((v18 ^ 0x793FC7BF)
                                                                          - 671236225
                                                                          + (((v17 - 591) ^ 0xF27F8E8C) & (2 * v18))
                                                                          - 1362986815) >= 0) ^ (-55 * ((v17 + 10) & 0xFD ^ 0x40))) & 1)) ^ (v17 - 591)))
                                                   - 4LL))( 4294966797LL,  281LL);
}

uint64_t sub_1000672F4(uint64_t a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6)
{
}

void sub_10006731C()
{
}

uint64_t sub_10006732C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v20 = 3804331 * ((v19 - 128) ^ 0x7ED525F6);
  *(void *)(v19 - 12_Block_object_dispose(va, 8) = v18;
  *(_DWORD *)(v19 - 120) = v20 + v17 + 945;
  *(_DWORD *)(v19 - 116) = v14 - v20 + ((v17 - 64) ^ 0x9183E17);
  sub_100067BE4(v19 - 128);
  *(_DWORD *)(v19 - 104) = (v17 + 1057) ^ (69008221
                                         * ((((v19 - 128) | 0x867F775D) + (~(v19 - 128) | 0x798088A2)) ^ 0x55DD2556));
  *(void *)(v19 - 12_Block_object_dispose(va, 8) = a13;
  *(void *)(v19 - 112) = a14;
  uint64_t v21 = v15(v19 - 128);
  BOOL v22 = ((33 * ((v17 - 64) ^ 0x271) - 1025) | 0xA0u) + *(_DWORD *)(v19 - 120) - 1898116130 < 0x96BA9167;
  return ((uint64_t (*)(uint64_t))(*(void *)(v16 + 8LL * (((2 * v22) | (4 * v22)) ^ (v17 - 64))) - 8LL))(v21);
}

uint64_t sub_10006742C()
{
  *(void *)(v6 - 12_Block_object_dispose(va, 8) = v3;
  *(void *)(v6 - 112) = v5;
  *(_DWORD *)(v6 - 104) = (v0 + 1489) ^ (((v6 - 128) ^ 0xD3A2520A) * v4);
  uint64_t v7 = v1(v6 - 128);
  return ((uint64_t (*)(uint64_t))(*(void *)(v2 + 8LL * ((451 * (*(_DWORD *)(v6 - 120) > 0x7122F341u)) ^ v0))
}

uint64_t sub_1000674A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(_DWORD *)(v18 - 12_Block_object_dispose(va, 8) = (v13 + 617) ^ (268847287
                                        * ((((v18 - 128) | 0xD959A92C) - ((v18 - 128) & 0xD959A92C)) ^ 0x26F3B804));
  *(void *)(v18 - 120) = a13;
  *(void *)(v18 - 112) = v17;
  uint64_t v19 = ((uint64_t (*)(uint64_t))((char *)*(&off_10025B940 + (v13 ^ 0x71)) - 12))(v18 - 128);
  return ((uint64_t (*)(uint64_t))(*(void *)(v14
                                                      + 8LL * (((41 * (v13 ^ 0xF0) + 681) * (v16 == 1251020604)) ^ v13))
                                          - (v15 ^ 0x294)))(v19);
}

uint64_t sub_100067558( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(_DWORD *)(v19 - 104) = (v16 + 1057) ^ ((((((v19 - 128) | 0x22BA0E34) ^ 0xFFFFFFFE) - (~(v19 - 128) | 0xDD45F1CB)) ^ 0xEE7A3C1)
                                         * v17);
  *(void *)(v19 - 12_Block_object_dispose(va, 8) = v18;
  *(void *)(v19 - 112) = a14;
  uint64_t v20 = v14(v19 - 128);
  return ((uint64_t (*)(uint64_t))(*(void *)(v15
                                                      + 8LL
                                                      * ((1865
                                                        * (*(_DWORD *)(v19 - 120) - 1898115907 < ((v16 + 329917641) & 0xEC55DAF6 ^ 0xCEEF1B56))) ^ v16))
                                          - 4LL))(v20);
}

uint64_t sub_100067610()
{
  *(void *)(v2 - 112) = *(void *)(v4 + 16);
  *(void *)(v2 - 12_Block_object_dispose(va, 8) = v1;
  *(_DWORD *)(v2 - 120) = v0
                        + 831981571 * ((((v2 - 128) | 0x955F512A) - (v2 - 128) + ((v2 - 128) & 0x6AA0AED0)) ^ 0xCFE810E)
                        - 391;
  return sub_100082A9C(v2 - 128);
}

void sub_100067864(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) ^ (3804331 * ((-2 - ((a1 | 0x7F5042C2) + (~(_DWORD)a1 | 0x80AFBD3D))) ^ 0xFE7A98CB));
  __asm { BR              X10 }

uint64_t sub_10006791C(void *a1)
{
  return (*(uint64_t (**)(void))(v2 + 8LL * (((*(_DWORD *)(*a1 + v3) == v1) * ((v4 ^ 0x1E1) - 1504)) ^ v4)))();
}

uint64_t sub_10006794C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v6 = v1;
  unsigned int v5 = v2 + 831981571 * (&v4 ^ 0x99A1D024) + 921;
  uint64_t v4 = a1;
  return sub_100082A9C((uint64_t)&v4);
}

void sub_100067AB4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) ^ (831981571
                            * (((a1 ^ 0x8A003497) - 575953088 - 2 * ((a1 ^ 0x8A003497) & 0xDDABA740)) ^ 0xCE0A43F3));
  uint64_t v2 = *(void *)((char *)*(&off_10025B940 + (v1 ^ 0x17))
                 + 8 * ((221 * (((uint64_t (*)(uint64_t))*(&off_10025B940 + v1 + 133))(32LL) == 0)) ^ v1)
                 - 4)
     - ((v1 + 35) ^ 0x88LL);
  __asm { BR              X8 }

void sub_100067B64()
{
  *(_DWORD *)(v0 + 12) = -528097428;
}

void sub_100067BE4(uint64_t a1)
{
  int v1 = 3804331 * ((a1 - 881405234 - 2 * (a1 & 0xCB76D2CE)) ^ 0xB5A3F738);
  int v2 = *(_DWORD *)(a1 + 8) - v1;
  __asm { BR              X15 }

uint64_t sub_100067CB4@<X0>(int a1@<W8>)
{
  unsigned int v6 = ((2 * (v8 & 0x487604E0) - v8 + 931789599) ^ 0x495CDEE9) * v3;
  uint64_t v9 = v2;
  v8[0] = ((v4 - 332) | 0x240) - (((-1487759612 - v5) & 0x9BE64390) + a1 + v6) + 563898121;
  v8[1] = v6 + v4 - 395;
  return (*(uint64_t (**)(_DWORD *))(v1 + 8LL * (v4 - 1297)))(v8);
}

void sub_100067DF8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }

uint64_t sub_100067E60()
{
  return 4294925278LL;
}

void sub_100067FF8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 12) - 69008221 * ((-2 - ((~(_DWORD)a1 | 0x2A929A22) + (a1 | 0xD56D65DD))) ^ 0xF930C828);
  __asm { BR              X11 }

uint64_t sub_1000680DC@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((54 * (v1 != 0)) ^ a1 ^ 0x124)) - 8LL))();
}

uint64_t sub_10006811C()
{
  int v5 = v1 - 634;
  unsigned int v6 = (((v5 ^ 0x164) + 444) ^ 0xA9C3B9B1) + (*(_DWORD *)(v2 + 24) ^ v0);
  BOOL v8 = (*(_DWORD *)(v3 - 0x2F801B1FA325943DLL) & 1) == 149 * (v5 ^ 0x164) - 447 || v6 > 0xFFFFFFBE;
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((208 * v8) ^ v5)) - 4LL))();
}

uint64_t sub_1000681A8@<X0>( uint64_t (*a1)(uint64_t *)@<X8>, uint64_t a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, int a7)
{
  unsigned int v12 = 3804331 * ((-302084566 - (&a3 | 0xEDFE8E2A) + (&a3 | 0x120171D5)) ^ 0x6CD45423);
  a7 = (v11 - 178) ^ v12;
  a6 = v7;
  a4 = v12 ^ 0xCDECBD38;
  a5 = (v10 + 620799746) ^ v12;
  a3 = v8;
  uint64_t v13 = a1(&a3);
  return ((uint64_t (*)(uint64_t))(*(void *)(v9
                                                      + 8LL
                                                      * ((101
                                                        * (*(_DWORD *)(v8 - 0x2F801B1FA3259439LL) == ((v11 + 1503980736) & 0xA65B15FF ^ 0x1F7A84A8) + (v11 ^ 0x25E))) ^ v11))
                                          - 8LL))(v13);
}

uint64_t sub_10006828C()
{
  unsigned int v3 = v1 - ((2 * v1 + 1401385118) & 0xBB101D60) - 2025076993;
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * ((799
                                          * ((v3 ^ 0xA37772E9 ^ (v2 + 291722027) & 0xEE9CADF7)
                                           + ((2 * v3) & 0xFDFEF3F6 ^ 0xB9101160)
                                           - 33952136 != 2096719987)) ^ v2))
                            - 12LL))();
}

uint64_t sub_100068330()
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * (int)(((((v0 + 1622403484) & 0x9F4C17F5) - 1745)
                                               * ((v1 + v2 - 2130672123) < 8)) ^ v0))
                            - ((v0 + 1066670236) & 0xC06BE3FD)
                            + 560LL))();
}

uint64_t sub_1000683A8()
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * (((v2 - v0 < (unint64_t)((v1 - 888305624) & 0x34F277FF) - 1852)
                                          * (((v1 - 1812) | 0x21C) ^ 0x230)) ^ v1))
                            - 4LL))();
}

uint64_t sub_1000683FC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (*(uint64_t (**)(void))(v4 + 8LL * ((v3 < ((a3 - 498) ^ 0x68B) - 961) ^ a3)))();
}

uint64_t sub_100068424(uint64_t a1, int a2)
{
  unsigned int v9 = v5 + v6 + a2;
  v10.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
  v10.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
  v11.i64[0] = 0xAEAEAEAEAEAEAEAELL;
  v11.i64[1] = 0xAEAEAEAEAEAEAEAELL;
  uint64_t v12 = v7 + v9;
  int8x16_t v13 = vrev64q_s8(*(int8x16_t *)(v12 - 15));
  int8x16_t v14 = vextq_s8(v13, v13, 8uLL);
  int8x16_t v15 = vrev64q_s8(*(int8x16_t *)(v12 - 31));
  int8x16_t v16 = vextq_s8(v15, v15, 8uLL);
  uint64_t v17 = v2 + v9;
  int8x16_t v18 = vrev64q_s8(vaddq_s8(vsubq_s8(v14, vandq_s8(vaddq_s8(v14, v14), v10)), v11));
  *(int8x16_t *)(v17 - 15) = vextq_s8(v18, v18, 8uLL);
  int8x16_t v19 = vrev64q_s8(vaddq_s8(vsubq_s8(v16, vandq_s8(vaddq_s8(v16, v16), v10)), v11));
  *(int8x16_t *)(v17 - 31) = vextq_s8(v19, v19, 8uLL);
  return (*(uint64_t (**)(void))(v8 + 8LL * ((((v3 & 0xFFFFFFE0) == 32) * (v4 + 638)) ^ (v4 - 387))))();
}

void sub_1000684B8()
{
}

void sub_1000684C4()
{
  *(_DWORD *)(v0 + _Block_object_dispose(va, 8) = -528097439;
}

void sub_100068984()
{
  uint64_t v0 = qword_100273838 - qword_100273888 - (void)&v2;
  qword_100273888 = (56757557 * v0) ^ 0xE37D1100B7374749LL;
  qword_100273838 = 56757557 * (v0 ^ 0xE37D1100B7374749LL);
  *(_DWORD *)*(&off_10025B940
  uint64_t v1 = ((uint64_t (*)(uint64_t))*(&off_10025B940
                                         + ((53
  *(void *)((char *)*(&off_10025B940
                      + ((53 * ((qword_100273838 - qword_100273888) ^ 0x49)) ^ byte_10020DA60[byte_100208C40[(53 * ((qword_100273838 - qword_100273888) ^ 0x49))] ^ 0xE2])
                      - 194)
            - 4) = v1;
  __asm { BR              X8 }

void sub_100068B30()
{
  *uint64_t v1 = v0 + 101;
}

void sub_10006FB94(uint64_t a1)
{
  int v1 = 831981571 * ((-2 - ((~(_DWORD)a1 | 0xF33FFBC4) + (a1 | 0xCC0043B))) ^ 0x6A9E2BE0);
  int v2 = *(_DWORD *)(a1 + 8) + v1;
  int v3 = (unsigned __int16)(*(_WORD *)(a1 + 12) + v1);
  BOOL v5 = *(void *)a1 == 0x20409EC631A1596LL || v3 == 16736;
  __asm { BR              X8 }

uint64_t sub_10006FC84( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, int a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48)
{
  uint64_t v54 = (v49 + 858);
  HIDWORD(v56) = v51 ^ 0x475;
  LODWORD(v56) = v51 ^ 0x494;
  HIDWORD(a11) = v51 ^ 0x4D8;
  HIDWORD(a16) = v51 ^ 0x471;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, unint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(*(void *)(v52 + 8LL * (int)((22 * ((((_DWORD)v54 + 288128242) & 0xEED37FB3 ^ 0x90) != 32)) ^ v54)) - 8LL))( a1,  a2,  v48 - 0x20409EC631A1596LL,  (unsigned __int16)(v50 - 16736),  86LL,  4006838195LL,  144LL,  22LL,  a9,  a10,  a11,  v56,  &a48,  (unint64_t)&a31 % 0x25 + v54 - 1018,  a15,  a16,  5119 - 69008221 * ((((v53 - 152) | 0x97377B8E1D0D2CA1LL) - (v53 - 152) + ((v53 - 152) & 0x68C88471E2F2D358LL)) ^ 0xC5AB3D6DCEAF7EABLL),  69008221 * ((((v53 - 152) | 0x97377B8E1D0D2CA1LL) - (v53 - 152) + ((v53 - 152) & 0x68C88471E2F2D358LL)) ^ 0xC5AB3D6DCEAF7EABLL),  v48 - 0x20409EC631A1596LL,  a20);
}

uint64_t sub_10006FE5C()
{
  int v4 = (~((v3 - 152) | 0xAF2008FE) + ((v3 - 152) & 0xAF2008FE)) ^ 0xC472BE58;
  int v5 = v0 + 2064986640 - 235795823 * v4;
  *(_DWORD *)(v3 - 144) = ((v0 + 2064986640) ^ 0xF5) - 235795823 * v4;
  *(_DWORD *)(v3 - 140) = 235795823 * v4;
  *(_DWORD *)(v3 - 152) = v5;
  *(_DWORD *)(v3 - 132) = v5 + 121;
  *(_DWORD *)(v3 - 136) = (v0 - 1689052536) ^ (235795823 * v4);
  uint64_t v6 = ((uint64_t (*)(uint64_t))(*(void *)(v1 + 8LL * ((v0 + 108) ^ 0x431)) - 8LL))(v3 - 152);
  return ((uint64_t (*)(uint64_t))(*(void *)(v2 + 8LL * *(int *)(v3 - 148)) - 12LL))(v6);
}

uint64_t sub_10006FF74( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  unsigned int v23 = (*(uint64_t (**)(void))(v20 + 8LL * SHIDWORD(a11)))();
  unsigned int *v22 = v23;
  uint64_t v24 = (v23 ^ (v23 >> 30)) * (((257 * HIDWORD(a12) + 222698204) & 0xF2B9E6EE) + 1812432023) + 1;
  v22[1] = v24;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 + 8LL * ((257 * HIDWORD(a12)) ^ 0x65)) - 4LL))( v24,  v25,  v26,  v27,  v28,  v29,  v30,  v31,  a9,  a10,  a11,  a12,  a13,  a14,  v19,  a16,  a17,  a18,  a19);
}

uint64_t sub_100070000()
{
  unsigned int v4 = v3[1];
  unsigned int v5 = v3[398] ^ ((v3[2] & 0x7FFFFFFE | v4 & 0x80000000) >> 1) ^ *(_DWORD *)(v0 + 4 * (v3[2] & 1LL));
  *uint64_t v3 = v3[397] ^ ((v4 & ((v1 - 878) ^ 0x7FFFFEF6) | *v3 & 0x80000000) >> 1) ^ *(_DWORD *)(v0 + 4LL * (v4 & 1));
  v3[1] = v5;
  return (*(uint64_t (**)(void))(v2 + 8LL * ((v1 - 878) | 0xB6)))();
}

uint64_t sub_100070550@<X0>(int a1@<W1>, int a2@<W3>, int a3@<W8>)
{
  uint64_t v8 = (unsigned int *)(v7 + 4 * v4);
  uint64_t v9 = v4 + 1;
  *uint64_t v8 = *(_DWORD *)(v5 + 4 * (*(_DWORD *)(v7 + 4 * v9) & 1LL)) ^ v8[397] ^ ((*(_DWORD *)(v7 + 4 * v9) & (a3 ^ a2 ^ a1) | v3 & 0x80000000) >> 1);
  return (*(uint64_t (**)(void))(v6 + 8LL * (((8 * (v9 == 227)) | (16 * (v9 == 227))) ^ a3)))();
}

uint64_t sub_1000705A8(uint64_t a1, int a2)
{
  v5[227] = *(_DWORD *)(v3 + 4 * (v5[228] & 1LL)) ^ *v5 ^ ((v5[228] & 0x7FFFFFFE | (((v2 - 78) | 0x50) ^ (a2 + 2288)) & v5[227]) >> 1);
  return (*(uint64_t (**)(void))(v4 + 8LL * (v2 - 15)))();
}

void sub_100070610()
{
}

uint64_t sub_100070618( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, int a30, unsigned int a31)
{
  v34[623] = *(_DWORD *)(v32 + 4 * (*v34 & 1LL)) ^ v34[396] ^ ((*v34 & 0x7FFFFFFE | v34[623] & 0x80000000) >> 1);
  return ((uint64_t (*)(void))(*(void *)(v33
                                        + 8LL
                                        * ((248 * ((((v31 - 1016) ^ (a31 > ((v31 - 2) ^ 0x619u))) & 1) == 0)) ^ v31))
                            - 8LL))();
}

uint64_t sub_100070684( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, _DWORD *a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t (*a29)(uint64_t))
{
  *a20 = 1;
  *(_DWORD *)(v31 - 14_Block_object_dispose(va, 8) = a18 | 1;
  *(_DWORD *)(v31 - 144) = (((v29 | 0x400) - 1278430527) ^ 0x6E) + a18;
  *(_DWORD *)(v31 - 12_Block_object_dispose(va, 8) = (((v29 | 0x400) - 1278430527) ^ 0x15) - a18;
  *(_DWORD *)(v31 - 124) = (v29 | 0x400) - 1278430527 + a18;
  *(_DWORD *)(v31 - 112) = a18 + (v29 | 0x400) + 2021362625;
  uint64_t v32 = a29(v31 - 152);
  return ((uint64_t (*)(uint64_t))(*(void *)(v30 + 8LL * *(int *)(v31 - 152)) - 4LL))(v32);
}

uint64_t sub_10007072C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, int a22, int a23, uint64_t a24, _DWORD *a25, void *a26)
{
  int v32 = v28 ^ v31;
  _DWORD *v27 = 0;
  unsigned int v33 = ((v26 ^ (v26 >> 11)) << a17) & 0x9D2C5680 ^ v26 ^ (v26 >> 11);
  BOOL v34 = (_BYTE *)(a20 + (a23 - 1));
  unsigned int v35 = 904587747 * ((*(_DWORD *)(*a26 + (*a25 & 0x7C1A5268)) ^ v34) & 0x7FFFFFFF);
  unint64_t v36 = 904587747 * (v35 ^ HIWORD(v35));
  unint64_t v37 = v36 >> ((((v32 + 112) | 0x56) ^ 0x78) + ((v32 - 85) & 0xAEu));
  LOBYTE(v37) = *(_BYTE *)(*(void *)(v29 + 8LL * (v32 - 153)) + v37 - 12) ^ v33 ^ (((v33 << 15) & 0xEFC60000 ^ v33) >> 18) ^ *(_BYTE *)(*(void *)(v29 + 8LL * (v32 - 64)) + v37 - 12) ^ *(_BYTE *)(*(void *)(v29 + 8LL * (v32 ^ 0xA1)) + v37 - 6) ^ v36 ^ (-93 * v37);
  *BOOL v34 = v37;
  return ((uint64_t (*)(void))(*(void *)(v30 + 8LL * ((1222 * (a23 == (v37 != 0))) ^ v28 ^ v31)) - 12LL))();
}

void sub_100070888()
{
}

void sub_100070890()
{
  *(_DWORD *)(v1 + 16) = v0;
}

void sub_1000708D4(_DWORD *a1)
{
  unsigned int v1 = *a1 + 1543737703 * (a1 ^ 0x7EF4507C);
  v2[1] = v1
  sub_1000A80C0(v2);
  __asm { BR              X8 }

uint64_t sub_1000709C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  a13 = &STACK[0x5E5ED88ABFC56917];
  a14 = (v16 - 1340) ^ (831981571
                      * (((&a13 | 0xEDA12E04) - (&a13 & 0xEDA12E04)) ^ 0x7400FE20));
  sub_100067AB4((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17
                                                                                          + 8LL
                                                                                          * (((a15 == v15) * (v16 - 917)) ^ v16))
                                                                              - 4LL))( v18,  v19,  v20,  v21,  v22);
}

uint64_t sub_100070A4C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13, int a14, uint64_t a15, int a16)
{
  int v21 = *(_DWORD *)(v16 + 8) + v19;
  unsigned int v22 = 1224239923 * ((54336456 - (&a13 | 0x33D1BC8) + (&a13 | 0xFCC2E437)) ^ 0xE7119E0);
  a15 = a11;
  a13 = 170138991 * v21 - v22 - ((((v18 - 1160) | 0x488) + 340277982 * v21 + 200511053) & 0xBA057A34) + 1660716813;
  a16 = (v18 - 526) ^ v22;
  sub_10007D800((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 + 8LL * (((a14 == v17) | (8 * (a14 == v17))) ^ (v18 - 726)))
                                                                                       - 8LL))( v23,  v24,  v25,  v26,  v27,  v28);
}

uint64_t sub_100070B44( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, unsigned int a15, uint64_t a16, unint64_t *a17, int a18)
{
  unsigned int v22 = (((&a13 | 0x37E51031) + (~&a13 | 0xC81AEFCE)) ^ 0xC556EDE7) * v21;
  a13 = v22 ^ 0x44550099;
  a14 = (v19 + 368399470) ^ v22;
  a16 = a11;
  a17 = &STACK[0x2940FF9A650624E0];
  a15 = v22 ^ 0xF8359D78;
  uint64_t v23 = sub_1000A817C((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(void *)(v20 + 8LL
                                                            * ((1647 * (a18 == ((v19 + 726) ^ (v18 - 919)))) ^ v19))
                                          - 8LL))(v23);
}

uint64_t sub_100070BFC()
{
  unsigned int v14 = v5 - 944348131 * ((&v12 + 1244961591 - 2 * (&v12 & 0x4A349B37)) ^ 0xE92D3F79) - 216;
  uint64_t v12 = &STACK[0x5F366804CF4E55C1];
  int8x16_t v13 = v11;
  ((void (*)(unint64_t **))(*(void *)(v3 + 8LL * (v5 ^ 0x228)) - 4LL))(&v12);
  LODWORD(v13) = v5
  uint64_t v12 = v11;
  sub_10008DBEC((uint64_t)&v12);
  if (HIDWORD(v13) == v1 + v4 - 1433) {
    int v7 = v9;
  }
  else {
    int v7 = HIDWORD(v13);
  }
  int8x16_t v13 = v11;
  v6(&v12);
  int8x16_t v13 = v10;
  uint64_t result = ((uint64_t (*)(unint64_t **))v6)(&v12);
  *(_DWORD *)(v0 + 4) = v7;
  return result;
}

void OsjTR(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X8 }

uint64_t sub_100070E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((244 * (a3 == 0)) ^ 0x17Bu)) - 12LL))();
}

uint64_t sub_100070E64@<X0>(unsigned int a1@<W8>)
{
}

uint64_t sub_100070E9C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, unsigned int a16)
{
  a16 = v17
  uint64_t v18 = sub_1000A80C0(&a15);
  return (*(uint64_t (**)(uint64_t))(v16
                                            + 8LL
                                            * ((497 * (a15 == v17 - 1093341479 + ((v17 - 605) ^ 0x60A58AE0) + 148)) ^ v17)))(v18);
}

uint64_t sub_100070F38( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, unsigned int a16, int a17)
{
  a16 = (v17 - 970) ^ (831981571
                     * ((((2 * &a15) | 0x74AE8078) - &a15 + 1168687044) ^ 0x23F69018));
  a15 = &STACK[0x5E5ED88ABFC5691F];
  sub_100067AB4((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 + 8LL * (((a17 == 528123064) * (((v17 - 323) | 0x10) + 1093339175 + ((v17 - 1298920215) | 0xC40E4E1))) ^ v17))
                                                                                                - 12LL))( v19,  v20,  v21,  v22,  v23,  v24,  v25);
}

uint64_t sub_100071000( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned int a15, int a16, uint64_t a17, int a18)
{
  int v25 = v24 + 151;
  unsigned int v26 = 1224239923 * ((((2 * &a15) | 0xE12D7366) - &a15 - 1888926131) ^ 0x82254464);
  a17 = a12;
  a18 = (v24 + 151) ^ v26;
  a15 = v21 - ((2 * v21) & 0xBA057A34) + 1560460570 - v26;
  sub_10007D800((uint64_t)&a15);
  unsigned int v27 = 1224239923 * ((&a15 & 0x244F7FC | ~(&a15 | 0x244F7FC)) ^ 0xF08F5D4);
  a18 = (v24 + 151) ^ v27;
  a15 = v20 + 1560460570 - ((2 * v20) & 0xBA057A34) - v27 + ((v24 + 581086139) & 0xDD5D5577) - 1063;
  a17 = a12;
  sub_10007D800((uint64_t)&a15);
  if (v19) {
    int v28 = 1560460570;
  }
  else {
    int v28 = 1560460571;
  }
  unsigned int v29 = 1224239923 * ((&a15 - 107021952 - 2 * (&a15 & 0xF99EF980)) ^ 0xB2D0457);
  a15 = v28 - v29;
  a17 = a12;
  a18 = v25 ^ v29;
  sub_10007D800((uint64_t)&a15);
  int v30 = *v18;
  unsigned int v31 = (2 * *v18) & 0xBA057A34;
  unsigned int v32 = 1224239923 * ((2 * (&a15 & 0x71B1DCE0) - &a15 + 240001818) ^ 0xFCFDDECD);
  a17 = a12;
  a18 = v25 ^ v32;
  a15 = v30 - v32 + 1560460570 - v31;
  sub_10007D800((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 + 8LL * ((1567 * (a16 == v22)) ^ v24)) - 12LL))( v33,  v34,  v35,  v36,  v37,  v38,  v39,  v40);
}

uint64_t sub_100071220( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, unsigned int a17, uint64_t a18, unint64_t *a19, int a20)
{
  unsigned int v24 = ((2 * (&a15 & 0x137ED580) - &a15 - 327079302) ^ 0x1E32D7AD) * v20;
  a18 = a12;
  a19 = &STACK[0x2940FF9A650624E8];
  a15 = v24 ^ 0x6D201382;
  a16 = (v23 + 368399421) ^ v24;
  a17 = v24 ^ 0x8CDA0CDE;
  uint64_t v25 = sub_1000A817C((uint64_t)&a15);
}

uint64_t sub_1000712E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, uint64_t a14, unint64_t *a15, unint64_t *a16, unint64_t *a17, unint64_t *a18)
{
  a17 = &STACK[0x5F366804CF4E5675];
  a18 = a13;
  a16 = &STACK[0x60E62A17C8DAFC92];
  LODWORD(a15) = v18
               - 2078219279
  sub_1000A7D9C((uint64_t)&a15);
  LODWORD(a17) = v18
               - 192
               - 944348131
               * ((((&a15 | 0xA7B65146) ^ 0xFFFFFFFE) - (~&a15 | 0x5849AEB9)) ^ 0xFB500AF7);
  a15 = &STACK[0x5F366804CF4E5675];
  a16 = a13;
  int v20 = (void (*)(unint64_t **))((char *)*(&off_10025B940 + (v18 ^ 0x240)) - 4);
  v20(&a15);
  a15 = &STACK[0x5F366804CF4E5679];
  a16 = a13;
  LODWORD(a17) = v18 - 192 - 944348131 * (&a15 ^ 0xA319A44E);
  v20(&a15);
  a15 = a13;
  LODWORD(a16) = v18
  uint64_t v21 = sub_10008DBEC((uint64_t)&a15);
  return (*(uint64_t (**)(uint64_t))(v19
                                            + 8LL
}

uint64_t sub_1000714AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  if (a10) {
    BOOL v14 = a12 == ((v13 - 1076497131) & 0xFEFEFFFF ^ 0xA1AE8851) + 454 * (v13 ^ 0xD8);
  }
  else {
    BOOL v14 = 0;
  }
  int v15 = !v14;
  return ((uint64_t (*)(void))(*(void *)(v12 + 8LL * ((57 * v15) ^ v13)) - 4LL))();
}

uint64_t sub_10007150C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v11 = (v7 + 1093340275) | 0x90;
  *uint64_t v8 = (v9 + v11 - 756) ^ v14;
  unsigned int v17 = (v11 - 612) ^ (69008221
                     * ((((2 * &v17) | 0x865F37CA) - &v17 + 1020290075) ^ 0x108DC9EF));
  uint64_t v18 = v16;
  v13(&v17, a2, a3, a4, a5, a6, a7, 1093339175LL);
  uint64_t v18 = v15;
  unsigned int v17 = (v11 - 612) ^ (69008221 * (((&v17 | 0xB5CD1467) - (&v17 & 0xB5CD1467)) ^ 0x666F466D));
  ((void (*)(unsigned int *))v13)(&v17);
  return v10 ^ v9;
}

void sub_100071A2C(_DWORD *a1)
{
  unsigned int v1 = *a1 - 69008221 * (((_DWORD)a1 - 2 * (a1 & 0x90A0864D) - 1868528051) ^ 0x4302D447);
  __asm { BR              X13 }

uint64_t sub_100071B08(uint64_t a1, uint64_t a2)
{
  int v5 = (v4 - 1515) | 0x108;
  uint64_t v6 = (a2 + 864942250);
  else {
    BOOL v7 = v2 - 498044564 < (int)v6;
  }
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 8LL * ((58 * ((((v5 + 682) ^ v7) & 1) == 0)) ^ v5))
                                                   - 8LL))( v6,  a2);
}

uint64_t sub_100071C5C@<X0>( int a1@<W2>, unsigned int a2@<W3>, int a3@<W4>, int a4@<W5>, void *a5@<X7>, int a6@<W8>)
{
  unsigned int v14 = (v9 ^ 0x638F3419) + v10 + (((a3 - 702) | a6) ^ 0xCF5B7358) + v11 * (*(_DWORD *)(*a5 + 4LL * a1) ^ v9);
  *(_DWORD *)(v12 + 4 * v13) = v14 + v9 - ((a3 - 954309588) & (2 * v14));
  BOOL v15 = a1 + 1717376125 < a4;
  if (a2 > 0x19A2EB83 != a1 + 1717376125 < v7) {
    BOOL v15 = a2 > 0x19A2EB83;
  }
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * (a3 ^ (!v15 * v8))) - 4LL))();
}

uint64_t sub_100071D38()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * ((996
                                          * (((v1 == 0x6B51156330A48DFCLL) ^ (v2
                                                                                             - 85
                                                                                             + 3 * (v2 ^ 0xD5)
                                                                                             + 1)) & 1)) ^ v2))
                            - 8LL))();
}

uint64_t sub_100071D98@<X0>(int a1@<W1>, int a2@<W8>)
{
  int v4 = a2 - 712;
  int v5 = ((a2 - 712) ^ 0xA5C88EFE) + a1;
  BOOL v7 = v2 + 1418397688 > 633900853 || v2 + 1418397688 < v5;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3
                                                                                 + 8LL
                                                                                 * ((v7 * ((5 * (v4 ^ 0x1A9)) ^ 0x2B9)) ^ v4))
                                                                     - 4LL))( 649926191LL,  3645041133LL,  600LL,  944LL);
}

uint64_t sub_100071E58(int a1, int a2, char a3, char a4, int a5, uint64_t a6, int a7)
{
  unint64_t v15 = v9 - 0x6B51156330A48DFCLL + (*(_DWORD *)(v12 + 4 * v13) ^ v8);
  *(_DWORD *)(v12 + 4 * v13) = v15 + v8 - ((2 * v15) & 0xC71E6832);
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL
                                        * (((((v15 >> (((((a5 + a1) & a2) - 29) ^ a3) ^ a4)) ^ a6)
                                           + v10
                                           + ((2
                                             * (v15 >> (((((a5 + a1) & a2) - 29) ^ a3) ^ a4))) & a7) != v14)
                                          * v11) ^ (a5 + a1) & a2))
                            - 8LL))();
}

uint64_t sub_100071EF0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v11 = *v10 - 1249579886;
  int v12 = (v8 - 1249579886 < -2034076720) ^ (v11 < -2034076720);
  BOOL v13 = v8 - 1249579886 > v11;
  if (v12) {
    BOOL v13 = v8 - 1249579886 < -2034076720;
  }
}

void sub_100071F5C()
{
  *uint64_t v1 = v0;
}

void sub_100071F80(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20) - 1178560073 * ((-846133519 - (a1 | 0xCD9106F1) + (a1 | 0x326EF90E)) ^ 0xD55BDB66);
  __asm { BR              X10 }

void sub_100072064()
{
  *(_DWORD *)(v0 + 16) = v1;
}

void df35957c4e0()
{
  __asm { BR              X8 }

uint64_t sub_1000725FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  a14 = (831981571 * ((295820161 - (&a13 | 0x11A1DB81) + (&a13 | 0xEE5E247E)) ^ 0x77FFF45A)) ^ 0x5D;
  a13 = &STACK[0x5E5ED88ABFC5690F];
  sub_100067AB4((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16
                                                                                          + 8LL
                                                                                          * ((268 * (a15 == v15)) ^ 0x645u))
                                                                              - 8LL))( v17,  v18,  v19,  v20,  v21);
}

uint64_t sub_1000726B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13, int a14, uint64_t a15, int a16)
{
  unsigned int v21 = 1224239923
      * ((-1424351604 - (&a13 | 0xAB1A1E8C) + (&a13 | 0x54E5E173)) ^ 0xA6561CA4);
  a15 = a10;
  a16 = v21 ^ 0x38B;
  a13 = v16 - v21 - ((v16 << (v19 + (v20 ^ 0x8D) + 113)) & 0xBA057A34) + 1560460570;
  sub_10007D800((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 + 8LL * ((399 * (a14 == v17)) ^ v20))
                                                                                       - 8LL))( v22,  v23,  v24,  v25,  v26,  v27);
}

uint64_t sub_100072774( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, uint64_t a16, unint64_t *a17, int a18)
{
  unsigned int v22 = ((((2 * &a13) | 0x1A80A97C) - &a13 + 1925163842) ^ 0x7FF3A969) * v21;
  a16 = a10;
  a17 = &STACK[0x2940FF9A650624E0];
  a15 = v22 ^ 0x482E16DF;
  a13 = v22 ^ 0x44550099;
  a14 = (v20 + 368400033) ^ v22;
  uint64_t v23 = sub_1000A817C((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(void *)(v19 + 8LL * ((932 * (a18 == v18)) ^ (v20 + 1096)))
                                          - 535 * ((v20 + 1096) ^ 0x4DBu)
                                          + 1597LL))(v23);
}

uint64_t sub_10007283C@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, unint64_t *a6, uint64_t a7, unsigned int a8)
{
  a8 = v8
     - 944348131
  a6 = &STACK[0x5F366804CF4E5679];
  a7 = a1;
  ((void (*)(unint64_t **))(*(void *)(v10 + 8LL * (v8 ^ 0x433)) - 4LL))(&a6);
  a6 = a5;
  LODWORD(a7) = v8
              - 241568881
  uint64_t v11 = sub_10008DBEC((uint64_t)&a6);
  return ((uint64_t (*)(uint64_t))(*(void *)(v9
                                                      + 8LL
                                                      * ((321
                                                        * (((((v8 - 727) | 0x444) ^ 0x1F428E8D ^ (a5 == 0LL)) & 1) == 0)) ^ ((v8 - 727) | 0x444)))
                                          - 8LL))(v11);
}

uint64_t sub_100072970@<X0>( uint64_t a1@<X8>, uint64_t (*a2)(unsigned int *), uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  a6 = (v9 + v8) ^ (69008221 * (((&a6 | 0x6BD0036D) - (&a6 & 0x6BD0036D)) ^ 0xB8725167));
  a7 = a1;
  uint64_t v10 = a2(&a6);
  return ((uint64_t (*)(uint64_t))(*(void *)(v7 + 8LL * ((502 * (a3 == 0)) ^ (v8 + v9 + 620)))
                                          - ((v9 - 1821333866) & 0x4D4CD3AB)
                                          + 770LL))(v10);
}

uint64_t sub_100072A0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v7 = a1;
  unsigned int v6 = (v1 - 634) ^ (69008221
                   * (((&v6 | 0x4F9F18DC) - &v6 + (&v6 & 0xB060E720)) ^ 0x9C3D4AD6));
  v5(&v6);
  return v3 ^ v2;
}

void sub_100072AE4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) + 460628867 * ((-1228667218 - (a1 | 0xB6C406AE) + (a1 | 0x493BF951)) ^ 0x5AD7B2C);
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(unint64_t **)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  int v5 = *(unint64_t **)(v2 - 0x20BA795F69D3FA9LL);
  uint64_t v12 = *(void *)a1;
  unsigned int v11 = v1 - 1224239923 * ((&v7 - 1600500025 - 2 * (&v7 & 0xA09A4EC7)) ^ 0x5229B310) - 387;
  int v9 = v5;
  uint64_t v10 = v2;
  uint64_t v7 = v4;
  int v8 = &STACK[0x2A461383296CA264];
  ((void (*)(uint64_t *))((char *)*(&off_10025B940 + v1 - 1003) - 8))(&v7);
  uint64_t v6 = *(void *)(v2 - 0x20BA795F69D3FB1LL);
  LODWORD(v_Block_object_dispose(va, 8) = v1
              + 831981571
  uint64_t v7 = v6;
  int v9 = &STACK[0x2A461383296CA274];
  sub_100082A9C((uint64_t)&v7);
  int v8 = v3;
  LODWORD(v9) = (944348131 * (((&v7 | 0x113A7D54) - (&v7 & 0x113A7D54)) ^ 0xB223D91A)) ^ (v1 + 337);
  sub_10007CB40((uint64_t)&v7);
  __asm { BR              X8 }

uint64_t sub_100072D54( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t), uint64_t a11)
{
  int v19 = (v16 - 1451) | 0x420;
  *(void *)(v18 - 12_Block_object_dispose(va, 8) = v13;
  *(void *)(v18 - 120) = v15;
  *(void *)(v18 - 104) = a11;
  *(void *)(v18 - 144) = v14;
  *(void *)(v18 - 136) = v13;
  *(_DWORD *)(v18 - 112) = v16 - 1224239923 * ((v18 - 144) ^ 0xF2B3FDD7) - 782;
  uint64_t v20 = a10(v18 - 144);
  BOOL v21 = ((v19 + 395) ^ v17) + v12 < 0x7FFFFFFF;
  return ((uint64_t (*)(uint64_t))(*(void *)(v11 + 8LL * ((v21 | (2 * v21)) ^ v19)) - 12LL))(v20);
}

uint64_t sub_100072DD0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(_DWORD *)(v19 - 120) = v17 + 69008221 * ((v19 - 144) ^ 0xD3A2520A) - 39;
  *(void *)(v19 - 136) = v14;
  *(void *)(v19 - 12_Block_object_dispose(va, 8) = v14;
  *(void *)(v19 - 112) = v16;
  *(void *)(v19 - 144) = v15;
  ((void (*)(uint64_t))((char *)*(&off_10025B940 + (v17 ^ 0x623)) - 8))(v19 - 144);
  int v20 = 2078219279 * ((((v19 - 144) | 0xFA4A981B) - (v19 - 144) + ((v19 - 144) & 0x5B567E0)) ^ 0x20B00E6F);
  *(_DWORD *)(v19 - 140) = v13 - v20 + (((v17 - 1436) | 0x411) ^ (v18 + 550));
  *(void *)(v19 - 136) = a12;
  *(_DWORD *)(v19 - 12_Block_object_dispose(va, 8) = (v17 - 594) ^ v20;
  uint64_t v21 = sub_10008D730(v19 - 144);
  return ((uint64_t (*)(uint64_t))(*(void *)(v12
                                                      + 8LL * ((3628 * (*(_DWORD *)(v19 - 144) != 547591367)) ^ v17))
                                          - 8LL))(v21);
}

uint64_t sub_100072EC4()
{
  BOOL v4 = ((v2 + 395) ^ v3) + v1 < 0x7FFFFFFF;
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * ((v4 | (2 * v4)) ^ v2)) - 12LL))();
}

uint64_t sub_100072EF4()
{
  uint64_t v5 = *(void *)(v8 + 32);
  int v6 = 831981571 * ((((v4 - 144) | 0x90F04090) - ((v4 - 144) & 0x90F04090)) ^ 0x95190B4);
  *(void *)(v4 - 144) = v10;
  *(_DWORD *)(v4 - 136) = v0 - v6 - 284;
  *(_DWORD *)(v4 - 132) = v6 + 1054797342;
  sub_100087FA4(v4 - 144);
  *(void *)(v4 - 12_Block_object_dispose(va, 8) = v1;
  *(void *)(v4 - 120) = v3;
  *(_DWORD *)(v4 - 112) = v0 - 1224239923 * ((v4 - 144) ^ 0xF2B3FDD7) - 387;
  *(void *)(v4 - 144) = v2;
  *(void *)(v4 - 136) = v1;
  *(void *)(v4 - 104) = v10;
  v9(v4 - 144);
  *(_DWORD *)(v4 - 136) = v0 + 831981571 * (((v4 - 144) & 0x591B3C7C | ~((v4 - 144) | 0x591B3C7C)) ^ 0x3F4513A7) + 273;
  *(void *)(v4 - 144) = v1;
  *(void *)(v4 - 12_Block_object_dispose(va, 8) = v5;
  return sub_100082A9C(v4 - 144);
}

void sub_100073014(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24) - 1224239923 * ((-223099009 - (a1 | 0xF2B3C77F) + (a1 | 0xD4C3880)) ^ 0xFFFFC557);
  if (*(_DWORD *)(*(void *)(a1 + 8) - 0x2A461383296CA240LL) - 1362986814 >= 0) {
    unsigned int v3 = *(_DWORD *)(*(void *)(a1 + 8) - 0x2A461383296CA240LL) - 1362986814;
  }
  else {
    unsigned int v3 = 1362986814 - *(_DWORD *)(*(void *)(a1 + 8) - 0x2A461383296CA240LL);
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(_DWORD *)(v2 - 0x2A461383296CA240LL) - 1362986814 >= 0) {
    unsigned int v4 = *(_DWORD *)(v2 - 0x2A461383296CA240LL) - 1362986814;
  }
  else {
    unsigned int v4 = 1362986814 - *(_DWORD *)(v2 - 0x2A461383296CA240LL);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  v6[1] = v1 - 1224239923 * ((((2 * v6) | 0x15CF2FCC) - v6 + 1964533786) ^ 0x78546A31) + 496;
  sub_1000627C8((uint64_t)v6);
  if (v3 >= v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = v3;
  }
  __asm { BR              X13 }

uint64_t sub_1000731C8()
{
  BOOL v4 = v2 + 695588855 < (int)(v3 + 1447967842);
  if (v3 > 0x29B1C39D != v2 + 695588855 < -699515806) {
    BOOL v4 = v3 > 0x29B1C39D;
  }
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * ((1716 * v4) ^ v1)) - ((v1 ^ 0x37E) - 124) + 454LL))();
}

uint64_t sub_100073244(uint64_t a1, uint64_t a2, int a3)
{
  int v17 = a3 - 278;
  BOOL v18 = v16 > v8;
  uint64_t v19 = 4LL * (v13 + v9);
  int v20 = v4 + v12 + (*(_DWORD *)(*(void *)(v11 - 0x2A461383296CA23CLL) + v19) ^ v14);
  *(_DWORD *)(*(void *)(v15 - 0x2A461383296CA23CLL) + v19) = v20 + v14 - (v10 & (2 * v20));
  int v21 = v13 + 1 + v6;
  LODWORD(v19) = v18 ^ (v21 < v5);
  BOOL v22 = v21 < v7;
  if (!(_DWORD)v19) {
    BOOL v18 = v22;
  }
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((119 * v18) ^ v17)) - 8LL))();
}

uint64_t sub_100073324()
{
  BOOL v4 = v2 + 759785904 < (int)(v3 + 1512163950 + (v1 ^ 0x263));
  if (v3 > 0x25DE31E4 != v2 + 759785904 < -635318757) {
    BOOL v4 = v3 > 0x25DE31E4;
  }
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * (v1 ^ (16 * !v4))) - ((v1 + 1876733487) & 0x9023552B ^ 0x525LL)))();
}

uint64_t sub_1000733B0()
{
}

void sub_1000733F0()
{
  *(_DWORD *)(v2 - 0x2A461383296CA240LL) = (((v1 + v0) * (v3 - 308515109)) ^ 0x753DB77F)
                                         - 603992129
                                         + ((2 * (v1 + v0) * (v3 - 308515109)) & 0xEA7B6EFE);
}

void sub_100073710(uint64_t a1)
{
  BOOL v3 = *(_DWORD *)(*(void *)(a1 + 8) - 0x2A461383296CA240LL) == 1362986814
    || *(_DWORD *)(*(void *)a1 - 0x2A461383296CA240LL) == 1362986814;
  int v1 = *(_DWORD *)(a1 + 16) + 460628867 * ((-2 - ((a1 | 0x675F0E27) + (~(_DWORD)a1 | 0x98A0F1D8))) ^ 0xD43673A5);
  __asm { BR              X14 }

void sub_100073828()
{
  *int v0 = v1;
}

void jEHf8Xzsv8K(uint64_t a1)
{
  __asm { BR              X9 }

uint64_t sub_100073EE8@<X0>(uint64_t a1@<X8>)
{
  return 0LL;
}

uint64_t sub_100073EFC()
{
  return 4294925273LL;
}

void sub_100073F08(unint64_t a1)
{
  unsigned int v2 = 3804331 * ((-2 - ((~(_DWORD)a1 | 0x3DED129D) + (a1 | 0xC212ED62))) ^ 0x4338376B);
  int v3 = *(_DWORD *)(a1 + 28);
  unsigned int v4 = *(_DWORD *)(a1 + 24) + v2;
  unsigned int v5 = 235795823 * ((&v38 - 1061334659 - 2 * (&v38 & 0xC0BD517D)) ^ 0x54101824);
  unsigned int v6 = *(_DWORD *)(a1 + 40) + v2;
  unint64_t v19 = 3804331 * ((-2LL - ((~a1 | 0xEED202043DED129DLL) + (a1 | 0x112DFDFBC212ED62LL))) ^ 0x217B62004338376BLL);
  int v7 = v3 - v2;
  int v39 = v5 ^ 0x4BBA54CA;
  unsigned int v40 = v4 + v5 + 426522932;
  uint64_t v25 = &STACK[0x7F1325F673F680D3];
  uint64_t v38 = &STACK[0x7F1325F673F680D3];
  sub_100060F54((uint64_t)&v38);
  unsigned int v8 = v6;
  int v9 = (_DWORD *)a1;
  int v10 = (char *)*(&off_10025B940 + (int)(v4 ^ 0x1F)) - 4;
  uint64_t v27 = *(void *)&v10[8 * v4] - 8LL;
  int v15 = v7 - 804956994;
  int v18 = v7 + (v4 ^ 0x37C4ACB7);
  int v14 = v7 - 1166492465;
  int v13 = v7 + 877128813;
  v12[1] = (char *)&v12[-144923735] + 5;
  unsigned int v31 = v4 - 182145111;
  int v30 = v4 ^ 0x44;
  int v32 = v4 ^ 0x3C;
  int v20 = v4 ^ 0xDE;
  unsigned int v17 = 11 * (v4 ^ 0xDE);
  uint64_t v16 = v17;
  uint64_t v28 = v17;
  int v21 = v9;
  unsigned int v29 = v4;
  int32x4_t v23 = vdupq_n_s32(0x1F7A84B8u);
  int32x4_t v24 = vdupq_n_s32(0x1F7A84BCu);
  int32x4_t v22 = vdupq_n_s32(0x1F7A84BBu);
  uint64_t v26 = *((void *)v9 + 2);
  int v11 = v8 - ((2 * v8 - 286168754) & (((17 * (v4 ^ 0x27)) ^ 0x751) - 1230081527)) - 758125043;
  char v33 = (HIBYTE(v11) ^ 0xDB) - ((2 * (HIBYTE(v11) ^ 0xDB)) & 0x5C) - 82;
  char v34 = (BYTE2(v11) ^ 0x57) - ((2 * (BYTE2(v11) ^ 0x57)) & 0x5C) - 82;
  char v35 = (BYTE1(v11) ^ 0x39) - ((2 * (BYTE1(v11) ^ 0x39)) & 0x5C) - 82;
  char v36 = (v8 - ((2 * v8 + 78) & (((17 * (v4 ^ 0x27)) ^ 0x51) + 9)) + 13) ^ 0xC8;
  __asm { BR              X15 }

uint64_t sub_1000742D8(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v9 = v6 + a3;
  if (v9 <= 0x40) {
    unsigned int v9 = 64;
  }
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v8
                                                               + 8LL
                                                               * (((723 * (v3 ^ 0xC1) - 1429) * (v7 - v4 - v5 + v9 > 0xE)) ^ v3))
                                                   - 4LL))( 3890720078LL,  3890720274LL);
}

uint64_t sub_100074354(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v8 = v5 + v4 + a3;
  if (v8 <= 0x40) {
    int v9 = 64;
  }
  else {
    int v9 = v8;
  }
  BOOL v10 = !__CFADD__(v8 + v3 + 523 + ((v3 + 1863) ^ 0xDAC) - 2165, v6 + v9);
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * ((7 * v10) ^ (v3 + 1863))) - 8LL))();
}

uint64_t sub_1000743B0@<X0>( int a1@<W0>, uint64_t a2@<X3>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, arg31_1000743B0 a31)
{
  *(_OWORD *)(a2 + (a1 + v31 + a3)) = *(_OWORD *)&a31.arr[4];
}

uint64_t sub_100074404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)(a4 + v7) = *v4;
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * (((v6 == 0) * v8) ^ v5)) - 12LL))();
}

uint64_t sub_100074430()
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (((((v0 - 44104648) & 0x2A0FB36) + 1238) * (v1 == v2)) | v0)) - 4LL))();
}

uint64_t sub_100074484@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X6>, int a5@<W8>)
{
  *(_BYTE *)(a3 + (a1 + a5 + 195)) = *(_BYTE *)(v6 + a4 + v9);
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((((a5 + a2) > 0x3F) * v7) ^ v5)) - 4LL))();
}

uint64_t sub_1000744CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
  uint64_t v86 = v37;
  int v49 = (uint64_t (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))(((v36 - 2109934841) & 0x7DC30FDF ^ 0xFFFFFFFFFFFFFCEDLL) + *(void *)(v39 + 8LL * v36));
  int v50 = STACK[0x2C4];
  int v51 = STACK[0x2C8];
  uint64_t v52 = LODWORD(STACK[0x2C8]);
  int v53 = STACK[0x2CC];
  int v54 = STACK[0x2D0];
  int v55 = STACK[0x2CC];
  int v56 = STACK[0x2D0];
  int v57 = LOBYTE(STACK[0x2DC]) ^ 0x1E;
  if (v57 == 2)
  {
    int8x16x4_t v90 = vld4q_s8((const char *)&STACK[0x27C]);
    int v75 = (v47 + 12) | 0x684;
    uint8x16_t v76 = (uint8x16_t)veorq_s8(v90.val[1], v48);
    _Q17 = vmovl_u8(*(uint8x8_t *)v76.i8);
    _Q16 = vmovl_high_u8(v76);
    __asm
    {
      SHLL2           V18.4S, V16.8H, #0x10
      SHLL2           V19.4S, V17.8H, #0x10
    }

    uint64_t v81 = (v75 - 404);
    id v82 = (_DWORD *)(v38 + 4 * (v44 + 213750561));
    int v83 = *(v82 - 8) ^ *(v82 - 3);
    int v84 = *(v82 - 16);
    HIDWORD(v85) = v84 ^ *(_DWORD *)(v38 + 4 * (v44 + 213750561 + v81) - 5500) ^ (v83 + v42 - ((2 * v83) & 0x3EF50970)) ^ v42;
    LODWORD(v85) = v84 ^ *(_DWORD *)(v38 + 4 * (v44 + 213750561 + v81) - 5500) ^ (v83 + v42 - ((2 * v83) & 0x3EF50970));
    _DWORD *v82 = (v85 >> 31) + v42 - ((2 * (v85 >> 31)) & 0x3EF50970);
    return ((uint64_t (*)(uint64_t))(*(void *)(v39 + 8LL * ((26 * (v46 == 213750498)) ^ v75)) - 12LL))(671088640LL);
  }

  else if (v57 == 1)
  {
    HIDWORD(v87) = STACK[0x2D0];
    id v88 = v49;
    int8x16x4_t v89 = vld4q_s8((const char *)&STACK[0x27C]);
    uint8x16_t v58 = (uint8x16_t)veorq_s8(v89.val[2], v48);
    _Q21 = vmovl_high_u8(v58);
    _Q20 = vmovl_u8(*(uint8x8_t *)v58.i8);
    __asm
    {
      SHLL2           V20.4S, V20.8H, #0x10
      SHLL2           V21.4S, V21.8H, #0x10
    }

    uint64_t v65 = v40 ^ 0x740u;
    int v66 = v52 ^ (v43 + v65 - 1094);
    uint64_t v67 = *(void *)(v45 + 8LL * (v40 - 694)) - 4LL;
    uint64_t v68 = *(void *)(v45 + 8LL * SHIDWORD(a34)) - 12LL;
    uint64_t v69 = *(unsigned int *)(v68 + 4 * (v46 - 16 + v44));
    int v70 = (v50 ^ v43)
        + a8
        + ((v52 ^ 0xD2FDA2CF) & (v56 ^ v43) | v66 & (v55 ^ v43))
        + v69
        + (*(_DWORD *)(v38 + 4LL * (*(_BYTE *)(v67 + v46 - 16 + v44) - 86)) ^ v42);
    uint64_t v71 = *(void *)(v45 + 8LL * (v40 - 638)) - 8LL;
    unsigned int v72 = (v70 + v43 - (v41 & (2 * v70))) ^ v43;
    int v73 = ((v72 << (*(_BYTE *)(v71 + v46 - 16 + v44) - 65)) | (v72 >> (65 - *(_BYTE *)(v71 + v46 - 16 + v44)))) + v66;
    LODWORD(v87) = LOBYTE(STACK[0x2DC]) ^ 0x1E;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void), uint64_t, uint64_t, uint64_t))(*(void *)(v39 + 8LL * v40) - 12LL))( v67,  v68,  v71,  v65,  v73 + v43 - (v41 & (2 * v73)),  v46 - 15,  v69,  213750561LL,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  v86,  a30,  a31,  v87,  v88,  a34,  a35,  a36);
  }

  else
  {
    LODWORD(STACK[0x2C4]) = 2 * (v50 ^ v43) + v43 - (v41 & (4 * (v50 ^ v43)));
    LODWORD(STACK[0x2C8]) = (v52 ^ v43) + (v51 ^ v43) + v43 - (v41 & (2 * ((v52 ^ v43) + (v51 ^ v43))));
    LODWORD(STACK[0x2CC]) = (v55 ^ v43) + (v53 ^ v43) + v43 - (v41 & (2 * ((v55 ^ v43) + (v53 ^ v43))));
    LODWORD(STACK[0x2D0]) = (v56 ^ v43) + (v54 ^ v43) + v43 - (v41 & (2 * ((v56 ^ v43) + (v54 ^ v43))));
    return v49( v49,  a2,  3515036461LL,  a4,  v52,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23);
  }

uint64_t sub_100075730( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, int a29, uint64_t a30, int a31, int a32)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 + 8LL * ((((int)a3 + a29 + 144 >= (a32 & 0xADB5377u) - 891) * ((3 * a31) ^ 0xC)) ^ (v33 + 1980))) - 4LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25);
}

void sub_100075798()
{
}

uint64_t sub_1000757BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, unsigned int a13, uint64_t a14, int a15)
{
  else {
    BOOL v17 = a15 - 1749190758 > a13;
  }
  return (*(uint64_t (**)(void))(v15 + 8LL * ((1783 * !v17) ^ (v16 + 489))))();
}

uint64_t sub_100075840()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((147 * (v0 - 1619213588 < ((((v2 - 64) | 0x40) + 911) ^ 0x9F7CC149) + v0)) ^ (v2 + 802)))
                            - 4LL))();
}

uint64_t sub_100075898( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  *(_BYTE *)(a4 + v21) = *(_BYTE *)(v25 + (v20 + v24))
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 + 8LL * (((v21 == 63) * v23) ^ v22)) - 4LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20);
}

void sub_1000758E4()
{
}

uint64_t sub_100075910@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int8x16_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  *a4 = vaddq_s8( vsubq_s8( *(int8x16_t *)(v23 + (v21 + v22)),  vandq_s8( vaddq_s8(*(int8x16_t *)(v23 + (v21 + v22)), *(int8x16_t *)(v23 + (v21 + v22))),  v26)),  v25);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int8x16_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 + 8LL * ((3 * (a9 ^ 0x50) + 724) ^ (a9 + 1131))) - 4LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21);
}

uint64_t sub_100075974()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((1757 * (v1 + 85 < ((17 * (v0 ^ 0x373)) ^ 0x51))) ^ v0)) - 8LL))();
}

uint64_t sub_1000759AC@<X0>(int a1@<W2>, uint64_t a2@<X6>, unsigned int a3@<W8>)
{
  LOBYTE(STACK[0x27C]) = *(_BYTE *)(a2 + a3);
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * ((1252 * (a1 + v4 + (v3 ^ 0x323) + 1 < 4)) ^ v3)) - 8LL))();
}

void sub_1000759E8()
{
}

uint64_t sub_100075A50@<X0>(int a1@<W1>, uint64_t a2@<X3>, uint64_t a3@<X6>, int a4@<W8>)
{
  *(_BYTE *)(a2 + (a1 + a4 + 1)) = *(_BYTE *)(a3
                                                          + (((v4 - 801) + 4294967210LL) & (v6 + 3515036548LL)));
  return ((uint64_t (*)(void))(*(void *)(v8
                                        + 8LL
                                        * (v4 ^ ((4 * ((v7 + v5 + 88) < 4)) | (8
}

uint64_t sub_100075AA8@<X0>( int a1@<W1>, uint64_t a2@<X3>, uint64_t a3@<X6>, int a4@<W8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t (*a23)(uint64_t))
{
  *(_BYTE *)(a2 + (v23 ^ (a1 + 47)) + a4) = *(_BYTE *)(a3 + (v24 - 779930747));
  int v26 = 831981571
      * ((((v25 - 160) ^ 0xA1FAE2DE | 0x727E95CD)
        - ((v25 - 160) ^ 0xA1FAE2DE)
        + (((v25 - 160) ^ 0xA1FAE2DE) & 0x8D816A32)) ^ 0x4A25A737);
  *(_DWORD *)(v25 - 160) = v26 ^ 0x5C834C60;
  *(_DWORD *)(v25 - 156) = v26 + v23 + 834;
  *(void *)(v25 - 152) = a21;
  uint64_t v27 = sub_1000889FC(v25 - 160);
  return a23(v27);
}

uint64_t sub_100075B44()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((((v0 - 1159390511) > 0x37) | (4
                                                                                      * ((v0 - 1159390511) > 0x37))) ^ (v2 + 205)))
}

uint64_t sub_100075B8C()
{
  unint64_t v4 = v2 + v0 + 17 * (v1 ^ 0x222u) - 85;
  if (v4 <= 0x38) {
    unint64_t v4 = 56LL;
  }
}

uint64_t sub_100075BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = 18 * (v6 ^ 0x382u);
  *(void *)(a4 + v5 + ((((_DWORD)v9 - 677) | 0x24u) ^ 0xFFFFFFFFBAE51BF6LL)) = v8;
  return ((uint64_t (*)(uint64_t))(*(void *)(v7
                                                      + 8LL
}

void sub_100075C64()
{
}

uint64_t sub_100075C6C()
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((868 * (((v0 == v1) ^ (v2 - 38)) & 1)) ^ v2))
}

uint64_t sub_100075CBC@<X0>(uint64_t a1@<X3>, int a2@<W8>)
{
  *(_BYTE *)(v2 + v3 + a1 - 1) = v4;
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * ((((unint64_t)(v2 + v3) < 0x38) * v5) ^ (a2 + 210))) - 4LL))();
}

void sub_100075CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v7 = LOBYTE(STACK[0x2DC]) ^ 0x1E;
  if (v7 == 1)
  {
    unsigned int v13 = STACK[0x2C0];
    unsigned int v14 = STACK[0x2BC];
    int v15 = (LODWORD(STACK[0x2C0]) >> ((v6 ^ 0xC6) + 114)) ^ 0x6C;
    LOBYTE(STACK[0x2B4]) = ((8 * LOBYTE(STACK[0x2C0])) ^ 0xA8) - ((2 * ((8 * LOBYTE(STACK[0x2C0])) ^ 0xA8)) & 0x55) - 82;
    LOBYTE(STACK[0x2B5]) = v15 - (a6 & (2 * v15)) - 82;
    LOBYTE(STACK[0x2B6]) = ((v13 >> 13) ^ 0xB5) - (a6 & (2 * ((v13 >> 13) ^ 0xB5))) - 82;
    LOBYTE(STACK[0x2B7]) = ((v13 >> 21) ^ 0x6C) - 2 * (((v13 >> 21) ^ 0x6C) & 0x2F ^ ((v13 & 0x200000) != 0)) - 82;
    HIDWORD(v16) = v14 ^ 7;
    LODWORD(v16) = v13 ^ 0x20000000;
    LOBYTE(STACK[0x2B8]) = (v16 >> 29) - (a6 & (2 * (v16 >> 29))) - 82;
    LOBYTE(STACK[0x2B9]) = ((v14 >> 5) ^ 0x20) - 2 * (((v14 >> 5) ^ 0x20) & 0x2F ^ ((v14 & 0x20) != 0)) - 82;
    LOBYTE(STACK[0x2BA]) = ((v14 >> 13) ^ 0xDB) - (a6 & (2 * ((v14 >> 13) ^ 0xDB))) - 82;
    unsigned int v12 = ((v14 >> 21) ^ 0xFFFFFFAB) - (a6 & (2 * ((v14 >> 21) ^ 0xFFFFFFAB))) - 82;
  }

  else
  {
    if (v7 != 2) {
      goto LABEL_6;
    }
    unsigned int v8 = STACK[0x2BC];
    unsigned int v9 = STACK[0x2C0];
    unsigned int v12 = (LODWORD(STACK[0x2BC]) >> ((v6 + 62) ^ 0x86)) ^ 0xFFFFFFAB;
    unsigned int v10 = (LODWORD(STACK[0x2BC]) >> 13) ^ 0xFFFFFFDB;
    LOBYTE(STACK[0x2B4]) = v12 - (a6 & (2 * v12)) - 82;
    LOBYTE(STACK[0x2B5]) = v10 - (a6 & (2 * v10)) - 82;
    HIDWORD(v11) = v8 ^ 7;
    LODWORD(v11) = v9 ^ 0x20000000;
    LOBYTE(STACK[0x2B6]) = ((v8 >> 5) ^ 0x20) - (a6 & (2 * ((v8 >> 5) ^ 0x20))) - 82;
    LOBYTE(STACK[0x2B7]) = (v11 >> 29) - (a6 & (2 * (v11 >> 29))) - 82;
    LOBYTE(STACK[0x2B8]) = ((v9 >> 21) ^ 0x6C) - 2 * (((v9 >> 21) ^ 0x6C) & 0x2F ^ ((v9 & 0x200000) != 0)) - 82;
    LOBYTE(STACK[0x2B9]) = ((v9 >> 13) ^ 0xB5) - (a6 & (2 * ((v9 >> 13) ^ 0xB5))) - 82;
    LOBYTE(STACK[0x2BA]) = ((v9 >> 5) ^ 0x6C) - 2 * (((v9 >> 5) ^ 0x6C) & 0x2F ^ ((v9 & 0x20) != 0)) - 82;
    LOBYTE(v12) = ((8 * v9) ^ 0xA8) + (~(2 * ((8 * v9) ^ 0xA8)) | 0xAF) - 81;
  }

  LOBYTE(STACK[0x2BB]) = v12;
LABEL_6:
  JUMPOUT(0x100074C08LL);
}

uint64_t sub_100075F14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32, uint64_t a33, uint64_t a34, char a35)
{
  if (a32 == 2) {
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35
  }
                                                                                   + 8LL
                                                                                   * ((100
                                                                                     * (LODWORD(STACK[0x2D8]) != ((v36 - 85) | 0x487) + 980645522)) ^ (v36 + 1074)))
                                                                       - 12LL))( a1,  a2,  235795823LL,  a13);
  if (a32 == 1) {
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v35
  }
                                                                          + 8LL
                                                                          * ((55
                                                                            * (LODWORD(STACK[0x2D8]) != v36 + 980646596)) ^ (v36 + 1074)))
                                                              - 12LL))( a1,  a13,  235795823LL);
  uint64_t v38 = (v36 + 323);
  unint64_t v39 = ((unint64_t)&a35 ^ 0xFE5FE7EBF96DBA7FLL ^ v38)
      + ((2LL * (void)&a35) & 0xFCBFCFD7F2DB77C0LL)
      + 0x6DFD7FF7F7B77019LL;
  LOBYTE(STACK[0x2D7]) = (v39 ^ (((v36 + 67) ^ 0x13) + 47)) * (v39 + 17);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 8LL * (int)v38))(a1, a13, 235795823LL);
}

void sub_100076268()
{
}

uint64_t sub_100076270(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v9 = *(void *)(v3 + 8);
  *(void *)(v8 - 176) = 0xAEAEAEAEAEAEAEAELL;
  *(void *)(v8 - 16_Block_object_dispose(va, 8) = 0xAEAEAEAEAEAEAEAELL;
  int v10 = ((2 * ((v8 - 160) & 0x8B7C4E0) - (v8 - 160) - 146261217) ^ 0x63E57246) * a3;
  *(void *)(v8 - 120) = v8 - 176;
  *(void *)(v8 - 160) = v8 - 192;
  *(void *)(v8 - 144) = &STACK[0x268];
  *(void *)(v8 - 136) = v9;
  *(_DWORD *)(v8 - 124) = (v5 + 1733) ^ v10;
  *(_DWORD *)(v8 - 152) = v10 + 1862487499;
  uint64_t v11 = ((uint64_t (*)(uint64_t))(*(void *)(v7 + 8LL * (v5 + 15)) - 12LL))(v8 - 160);
  return ((uint64_t (*)(uint64_t))(*(void *)(v4
                                                      + 8LL
                                                      * (((*(_DWORD *)(v8 - 128) == v6) * (((2 * v5) ^ 0x70E) + 68)) ^ v5))
                                          - 8LL))(v11);
}

uint64_t sub_100076350()
{
  uint64_t v7 = v0 + 1;
  BOOL v9 = (v6 ^ 0xB75ECDFF) + 2142748311 + ((v6 << (v4 - 23)) & 0x6EBD9BFE) != 924224662 || v7 == v2 + 16;
  return (*(uint64_t (**)(void))(v3 + 8LL * (v4 | (2 * v9))))();
}

uint64_t sub_1000763CC@<X0>(unsigned int a1@<W8>)
{
  unint64_t v5 = 460628867 * ((~(v4 - 160) & 0x21D797604EF5C5DELL | (v4 - 160) & 0xDE28689FB10A3A21LL) ^ 0x6348DA0E026347A3LL);
  *(_DWORD *)(v4 - 144) = ((v2 + 1328982332) | 9) + v5;
  *(_DWORD *)(v4 - 140) = v2 + 1328982332 - v5;
  *(_DWORD *)(v4 - 14_Block_object_dispose(va, 8) = ((v2 + 1328982332) ^ 0x8B) - v5;
  *(void *)(v4 - 136) = v5 + a1;
  *(void *)(v4 - 12_Block_object_dispose(va, 8) = 924224662 - v5;
  *(_DWORD *)(v4 - 160) = v5;
  *(_DWORD *)(v4 - 156) = (v2 - 1017211359) ^ v5;
  uint64_t v6 = ((uint64_t (*)(uint64_t))(*(void *)(v3 + 8LL * (v2 - 1551)) - 8LL))(v4 - 160);
  return ((uint64_t (*)(uint64_t))(*(void *)(v1 + 8LL * *(int *)(v4 - 152)) - 8LL))(v6);
}

void sub_10007649C()
{
  *(_DWORD *)(v0 + 4) = 528123064;
}

void sub_1000764E8(uint64_t a1)
{
  __asm { BR              X8 }

uint64_t sub_100076584( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a19 = 1496627498;
  HIDWORD(va_start(va, a9) = 532256250;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t *))(*(void *)(v66 + 3936) - 12LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  &a19,  a9,  &a66);
}

uint64_t sub_1000766E4()
{
  return (*(uint64_t (**)(void))(v3
                              + 8LL
                              * (((v4 + v2 + ((v0 - 1042611303) & 0x3E24FAB6) - 164 - 570) * (v1 == 1972891485)) ^ v0)))();
}

uint64_t sub_100076738( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16)
{
  return ((uint64_t (*)(void))(*(void *)(v18
                                        + 8LL
                                        * ((28
                                          * (((v17 - 1007577602 + (v16 ^ 0x2F1) - 594) & 0xFFFFFFFC) - a16 != -1007577602)) ^ v16))
                            - 4LL))();
}

uint64_t sub_100076780( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  BOOL v24 = a19 - v21 != -919610908 || v19 == ((v20 - 340) | 0x286) + 1496626595;
  return ((uint64_t (*)(void))(*(void *)(v22 + 8LL * (((4 * v24) | (32 * v24)) ^ v20))
                            + a6
                            - ((v20 + 1086439863) | 0x28301912)))();
}

uint64_t sub_1000767F4@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  unsigned int v15 = (a1 - 1447336237) & 0xED52BE7F;
  int v16 = v14 + a1;
  int v17 = v14 + a1 - 514;
  int v18 = v16 + 364;
  unsigned int v19 = v12 + (v15 ^ 0x478EE91);
  BOOL v20 = a12 + 994644732 < v19;
  return ((uint64_t (*)(void))(*(void *)(v13 + 8LL * ((v20 * (v17 ^ 0x4A)) ^ v18)) - 4LL))();
}

uint64_t sub_100076990( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  int v21 = 460628867 * ((~((v20 - 160) | 0x6BDD079) + ((v20 - 160) & 0x6BDD079)) ^ 0xB5D4ADFB);
  a8[72] = v17;
  a8[76] = a12;
  a8[75] = a13;
  a8[74] = a15;
  a8[70] = a14;
  *(_DWORD *)(v20 - 152) = v21 + v18 - 569299352;
  *(_DWORD *)(v20 - 132) = v16 - v21 - 195;
  uint64_t v22 = ((uint64_t (*)(uint64_t))(*(void *)(a7 + 8LL * (v16 - 533)) - 4LL))(v20 - 160);
  return ((uint64_t (*)(uint64_t))(*(void *)(v19
                                                      + 8LL
                                                      * (((*(_DWORD *)(v20 - 136) == 528123064)
                                                        * (((v16 ^ (v15 + 593)) - v15 + 1335) ^ 0x2D2)) ^ v16))
                                          - 8LL))(v22);
}

uint64_t sub_100076A7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8
                                                                                                  + 8LL * (((*(_DWORD *)(v10 + 48LL * (v6 - 1972891486)) == ((v7 - 1005) ^ 0x47F76C60)) * (v7 - 1212)) ^ v7)))( a1,  a2,  a3,  a4,  a5,  a6,  v9);
}

uint64_t sub_100076AC8@<X0>(int a1@<W4>, uint64_t a2@<X7>, int a3@<W8>)
{
  if ((v3 + 1792580379) <= 0x12 && ((1 << (v3 + 27)) & 0x4040D) != 0)
  {
    uint64_t v11 = a3 & 0xFFFFFFFFFFFFFFFLL;
    if (v11)
    {
      if (v11 == 3)
      {
        *(void *)(a2 + 400) = v15;
        *(void *)(a2 + 416) = v5 + (v7 - 87966694);
        int v12 = (*(uint64_t (**)())(v8 + 48LL * a3 + 8))();
        __asm { BR              X8 }
      }

      __asm { BR              X0 }
    }

    __asm { BR              X11 }
  }

  return a1 ^ 0xE085DF66;
}

void sub_10007716C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_1000771B8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(*(void *)(a2 + 96) + 24LL) = v3;
  unsigned int v4 = *(_DWORD *)(a1 + 4) - ((2 * *(_DWORD *)(a1 + 4) - 2015155204) & 0xBB500992) - 1583768889;
  BOOL v5 = ((2 * v4) & 0xC3C7E2E6 ^ 0x83400082) + (v4 ^ 0x3C4BF5BA) + 2143256574 != 1638101361;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (((16 * v5) | (32 * v5)) ^ 0x550u)) - 4LL))(0LL);
}

uint64_t sub_100077274()
{
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * ((193 * ((v2 + v1 + 505155213) > 7)) ^ v3))
                            - 202 * (v3 ^ 0x45Eu)
                            + 400LL))();
}

uint64_t sub_1000772D8(int a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(v3 + 8LL * ((85 * (v4 - a3 - (unint64_t)(a1 ^ 0x178u) + 232 < 0x20)) ^ a1)))();
}

uint64_t sub_10007730C(int a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(v2
                                                            + 8LL
                                                            * ((239
                                                              * (((v3 < 0x20) ^ (((a1 - 37) & 0xF4) + 51)) & 1)) ^ (a1 - 1573147173) & 0x5DC455F4u)))( (((a1 - 1573147173) & 0x5DC455F4) - 1909531085) & 0x71D11F7D,  a2,  0LL);
}

uint64_t sub_100077370@<X0>(int a1@<W3>, uint64_t a2@<X8>)
{
  uint64_t v8 = v6 + ((272 * ((a1 - 931) ^ (v3 + 1091))) ^ 0x9E5C8BDE);
  __int128 v9 = *(_OWORD *)(v4 + v8 - 15);
  __int128 v10 = *(_OWORD *)(v4 + v8 - 31);
  uint64_t v11 = a2 + v8;
  *(_OWORD *)(v11 - 15) = v9;
  *(_OWORD *)(v11 - 31) = v10;
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((4 * ((v5 & 0xFFFFFFE0) == 32)) | (16 * ((v5 & 0xFFFFFFE0) == 32)) | (v7 + a1 - 931 + 679)))
                            - 12LL))();
}

void sub_1000773E0()
{
}

uint64_t sub_1000773EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return ((uint64_t (*)(void))(*(void *)(v7
                                                     + 8LL
                                                     * (int)((((((a7 - 1295) | 0x180) ^ (v9 + 365))
                                                             + ((a7 - 169971041) & 0xEF29BFDF))
                                                            * (v8 != a3)) ^ a7))
                                         - 4LL))(0LL);
}

uint64_t sub_100077438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(v6
                                                                     + 8LL
                                                                     * ((1189
                                                                       * (((a6 ^ 0x12D ^ ((v7 & 0x18) == a6 - 449)) & 1) == 0)) ^ a6)))( (a6 + 340),  a2,  a3,  (v8 - a3));
}

uint64_t sub_100077478@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)(a4 - 7 + (v8 + v7 + a2 - a3)) = *(void *)(v5 - 7 + (v8 + v7 + a2 - a3));
}

uint64_t sub_1000774D0(int a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + a2) = *(void *)(v7 + a2);
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * (((a3 == 0) * v6) ^ a1)) - 12LL))();
}

uint64_t sub_100077500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v6 + 8LL * (((((v9 - v10) ^ (v7 + 924)) + 498) * (v8 == a6)) ^ v9)))(0LL);
}

uint64_t sub_10007752C@<X0>(int a1@<W3>, int a2@<W4>, uint64_t a3@<X8>)
{
  uint64_t v7 = ((v4 + a2 + 860) ^ 0x7B54B941u) + a1;
  *(_BYTE *)(a3 + v7) = *(_BYTE *)(v6 + v7);
  return (*(uint64_t (**)(void))(v3 + 8LL * ((1011 * (a1 - 1 == v5)) ^ a2)))(0LL);
}

  ;
}

void sub_100077578(uint64_t a1)
{
  int v1 = 235795823 * ((-2 - ((a1 ^ 0x29040430 | 0x96E8ABCB) + (a1 ^ 0x10C0A082 | 0x69175434))) ^ 0x52961214);
  __asm { BR              X10 }

uint64_t sub_10007768C()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (v0 ^ (509 * (v1 == 0xC1037AD6))))
}

uint64_t sub_1000776D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v11 = v5 > 0x953938F9;
  *(_BYTE *)(a2 + (v8 - 106791734)) = *(_BYTE *)(v3 + (v8 - 106791734)) ^ (97 * ((v8 - 54) & 0xF)) ^ *(_BYTE *)(*(void *)(v9 + 8LL * (v4 - 1254)) + ((v8 - 106791734) & 0xFLL) - 12) ^ *(_BYTE *)(*(void *)(v9 + 8LL * (v4 ^ 0x454)) + (((_BYTE)v8 - 54) & 0xF) - 8LL) ^ *(_BYTE *)(*(void *)(v9 + 8LL * (v4 - 1242)) + (((_BYTE)v8 - 54) & 0xF)) ^ 0xAE;
  if (v11 == v8 + 1684620241 < v2) {
    LOBYTE(v11) = v8 + 1684620241 < v6;
  }
  return ((uint64_t (*)(uint64_t, BOOL))(*(void *)(v10
                                                            + 8LL
                                                            * (((((v4 - 51) ^ v11) & 1) * v7) ^ v4))
                                                - 12LL))( a1,  v8 + 1684620241 < v6);
}

uint64_t sub_1000777AC()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((833
                                          * (((2 * v1) & 0x2FBBF38E ^ ((v0 - 10) | 0x10) ^ 0x202F499)
                                           + (v1 ^ 0xD6DE8311)
                                           - 269559035
                                           + 955 != ((11 * (v0 ^ 0x53C)) ^ 0x7CCDAB6))) ^ v0))
                            - 12LL))();
}

uint64_t sub_100077830(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((((v3 ^ 0x2DA) + ((v3 - 561) | 0x750) - 379)
}

uint64_t sub_1000778A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v6
                              + 8LL
}

uint64_t sub_1000778FC@<X0>(int a1@<W1>, int a2@<W2>, int a3@<W5>, uint64_t a4@<X8>)
{
  uint64_t v10 = (a1 + v4 + a2) + a4;
  uint64_t v11 = ((_BYTE)a1 + (_BYTE)v4 + (_BYTE)a2) & 0xF;
  uint64_t v12 = v11 - v10;
  unint64_t v13 = v11 - v10 + v6;
  uint64_t v14 = (v7 | v11) - v10;
  BOOL v15 = v13 >= 0x10 && v5 - a4 >= ((((a3 - 209) | 0x710u) - 1419) ^ 0x1D5uLL);
  unint64_t v16 = v14 + 3;
  int v19 = !v15 || v16 < 0x10 || (unint64_t)(v12 + v8) < 0x10;
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * ((49 * v19) ^ a3)) - 8LL))();
}

uint64_t sub_100077974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)(v7
                                                                                      + 8LL
                                                                                      * ((992
                                                                                        * (v6 >= ((v4 - 1920122310) & 0x7272BF6F ^ 0x37Fu))) ^ v4))
                                                                          - ((v4 + 380) | 0x80u)
                                                                          + 957LL);
  *(_DWORD *)(v8 - 136) = v5;
  return v9(a1, a2, a3, a4, 0LL);
}

uint64_t sub_1000779D0@<X0>( int a1@<W1>, int a2@<W2>, int a3@<W3>, unsigned int a4@<W5>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42)
{
  *(_DWORD *)(v48 - 120) = a3 + 14;
  *(_DWORD *)(v48 - 12_Block_object_dispose(va, 8) = a3 + 13;
  v56.val[1].i64[0] = ((_BYTE)a3 + 6) & 0xF;
  v56.val[1].i64[1] = ((_BYTE)a3 + 5) & 0xF;
  v56.val[2].i64[0] = ((_BYTE)a3 + 4) & 0xF;
  v56.val[2].i64[1] = ((_BYTE)a3 + 3) & 0xF;
  v56.val[3].i64[0] = ((_BYTE)a3 + 2) & 0xF;
  v56.val[3].i64[1] = ((_BYTE)a3 + 1) & 0xF;
  v57.val[0].i64[0] = a3 & 0xF;
  v57.val[0].i64[1] = ((_BYTE)a3 - 1) & 0xF;
  unsigned int v49 = a1 + v42 + a2;
  v57.val[1].i64[0] = *(_DWORD *)(v48 - 120) & 0xF;
  v57.val[1].i64[1] = *(_DWORD *)(v48 - 128) & 0xF;
  v57.val[2].i64[0] = ((_BYTE)a3 + 12) & 0xF;
  v57.val[2].i64[1] = ((_BYTE)a3 + 11) & 0xF;
  v57.val[3].i64[0] = ((_BYTE)a3 + 10) & 0xF;
  v57.val[3].i64[1] = ((_BYTE)a3 + 9) & 0xF;
  v50.i64[0] = 0xE3E3E3E3E3E3E3E3LL;
  v50.i64[1] = 0xE3E3E3E3E3E3E3E3LL;
  v51.i64[0] = 0xAEAEAEAEAEAEAEAELL;
  v51.i64[1] = 0xAEAEAEAEAEAEAEAELL;
  v56.val[0].i64[0] = ((_BYTE)a1 + (_BYTE)v42 + (_BYTE)a2) & 0xF;
  v56.val[0].i64[1] = ((_BYTE)a3 + 7) & 0xF;
  v52.i64[0] = vqtbl4q_s8(v56, (int8x16_t)xmmword_1002013F0).u64[0];
  v52.i64[1] = vqtbl4q_s8(v57, (int8x16_t)xmmword_1002013F0).u64[0];
  int8x16_t v53 = vrev64q_s8( veorq_s8( veorq_s8( veorq_s8(*(int8x16_t *)(v43 - 15 + v49), *(int8x16_t *)(v44 + v56.val[0].i64[0] - 15)),  *(int8x16_t *)(v46 + v56.val[0].i64[0] - 15)),  *(int8x16_t *)(((a4 + 1627099725) & 0x9F046FEB) + v56.val[0].i64[0] + v45 - 1460)));
  int8x16_t v54 = vrev64q_s8(veorq_s8(veorq_s8(vextq_s8(v53, v53, 8uLL), v51), vmulq_s8(v52, v50)));
  *(int8x16_t *)(a5 - 15 + v49) = vextq_s8(v54, v54, 8uLL);
  return (*(uint64_t (**)(void))(a42 + 8LL * ((1180 * ((v47 & 0xFFFFFFF0) == 16)) ^ a4)))();
}

void sub_100077B5C()
{
}

uint64_t sub_100077B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7
                                                                                 + 8LL
                                                                                 * ((3512
                                                                                   * (((v6 == a5) ^ (v5 - 19)) & 1)) ^ v5))
                                                                     - (v5 - 995)
                                                                     + 449LL))( a1,  a2,  a3,  a4);
}

uint64_t sub_100077BBC()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((1012 * ((v0 & 8) == ((v1 + 1419) ^ 0x750))) ^ v1)) - 4LL))();
}

uint64_t sub_100077BFC@<X0>( int a1@<W1>, int a2@<W2>, int a3@<W4>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41)
{
  *(_DWORD *)(v49 - 144) = v48;
  *(void *)(v49 - 12_Block_object_dispose(va, 8) = a4 - 7;
  *(void *)(v49 - 120) = v42 - 7;
  *(_DWORD *)(v49 - 152) = v48 & 0xFFFFFFF8;
  unsigned int v50 = a3 - (v48 & 0xFFFFFFF8) + 8;
  char v51 = v47 + a1 + v41 - a3;
  char v52 = a1 + v41 + v46 + v47 - a3;
  unsigned int v53 = a1 + v41 + a2 - a3;
  *(_DWORD *)(v49 - 160) = v46 - 400;
  v55.val[0].i64[0] = v53 & 0xF;
  v55.val[0].i64[1] = (v51 - 62) & 0xF;
  v55.val[1].i64[0] = v52 & 0xF;
  v55.val[1].i64[1] = (v51 - 64) & 0xF;
  v55.val[2].i64[0] = (v51 - 65) & 0xF;
  v55.val[2].i64[1] = (v51 - 66) & 0xF;
  v55.val[3].i64[0] = (v51 - 67) & 0xF;
  v55.val[3].i64[1] = (v51 - 68) & 0xF;
  *(int8x8_t *)(*(void *)(v49 - 128) + v53) = vrev64_s8( veor_s8( veor_s8( vrev64_s8( veor_s8( veor_s8( *(int8x8_t *)(*(void *)(v49 - 120) + v53),  *(int8x8_t *)(v43 + v55.val[0].i64[0] - 7)),  veor_s8( *(int8x8_t *)(v55.val[0].i64[0] + v44 - 4),  *(int8x8_t *)(v45 + v55.val[0].i64[0] - 7)))),  (int8x8_t)0xAEAEAEAEAEAEAEAELL),  vmul_s8( (int8x8_t)*(_OWORD *)&vqtbl4q_s8( v55,  (int8x16_t)xmmword_100201400),  (int8x8_t)0xE3E3E3E3E3E3E3E3LL)));
  return ((uint64_t (*)(__n128))(*(void *)(a41 + 8LL * (v46 ^ (8 * (v50 == 0)))) - 12LL))((__n128)xmmword_100201400);
}

void sub_100077D50()
{
}

uint64_t sub_100077D58( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return ((uint64_t (*)(uint64_t))(*(void *)(v11
                                                      + 8LL
                                                      * (*(_DWORD *)(v12 - 160) ^ (1945
                                                                                 * (*(_DWORD *)(v12 - 144) == *(_DWORD *)(v12 - 152)))))
                                          - ((*(_DWORD *)(v12 - 160) + 740) ^ 0x511LL)))(a11);
}

uint64_t sub_100077DA8@<X0>(int a1@<W6>, int a2@<W7>, uint64_t a3@<X8>)
{
  uint64_t v9 = (a2 - 130865288);
  *(_BYTE *)(a3 + v9) = *(_BYTE *)(v3 + v9) ^ *(_BYTE *)(v5 + (v9 & 0xF)) ^ *(_BYTE *)((v9 & 0xF) + v6 + 3) ^ *(_BYTE *)(v7 + (v9 & 0xF)) ^ (-29 * (v9 & 0xF)) ^ 0xAE;
  return (*(uint64_t (**)(void))(v8 + 8LL * ((1622 * ((a1 ^ 0xFFFFF8AF) + a2 == v4)) ^ (a1 - 1619))))();
}

uint64_t sub_100077E24@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  uint64_t v40 = *(void *)(a1 + 24);
  *(int8x16_t *)(v39 - 112) = veorq_s8(*(int8x16_t *)*(void *)(a1 + 40), (int8x16_t)xmmword_100201410);
  if (a9) {
    BOOL v41 = v40 == 0x25FFE88E84438D31LL;
  }
  else {
    BOOL v41 = 1;
  }
  int v42 = !v41;
  LODWORD(a13) = v37 << ((-77 * (a6 ^ 0x17)) ^ 0x67);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 8LL * (int)((v42 * (26 * (a6 ^ 0x52E) - 1406)) ^ a6)))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37);
}

uint64_t sub_100077EB0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
  uint64_t v39 = (a12 & 0x3C6F23C6) + (v37 ^ 0x1E3791E3u);
  BOOL v41 = ((71 * (v36 ^ 0x5F3) - 908) & ((_DWORD)v39 + 13)) != 0 || (_DWORD)v39 == 506958307;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 + 8LL * ((1019 * ((((v36 - 1656344576) ^ v41) & 1) == 0)) ^ v36)) - 8LL))( v39,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36);
}

uint64_t sub_100077F3C@<X0>( int a1@<W0>, unsigned __int8 *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39)
{
  uint64_t v44 = *(void *)(v42 + 8LL * (v39 ^ 0x3B1)) - 12LL;
  int v45 = *(unsigned __int8 *)(v44 + (*(unsigned __int8 *)(v41 - 0x25FFE88E84438D30LL) ^ 0x85LL));
  HIDWORD(v46) = v45 ^ 0x30;
  LODWORD(v46) = ~v45 << 24;
  int v47 = (v46 >> 30) ^ 0x9F;
  uint64_t v48 = *(void *)(v42 + 8LL * (v39 - 759)) - 4LL;
  int v49 = *(unsigned __int8 *)(v48 + (*(unsigned __int8 *)(v41 - 0x25FFE88E84438D26LL) ^ 0xBFLL));
  HIDWORD(v46) = v49 ^ 0xE;
  LODWORD(v46) = ((v39 - 331) ^ v49 ^ 0xE0) << 24;
  LOBYTE(v49) = v46 >> 28;
  int v50 = v47 << 16;
  int v51 = *(unsigned __int8 *)(v44 + (*(unsigned __int8 *)(v41 - 0x25FFE88E84438D2CLL) ^ 0x6FLL));
  HIDWORD(v46) = v51 ^ 0x30;
  LODWORD(v46) = ~v51 << 24;
  uint64_t v52 = *(unsigned __int8 *)(v41 - 0x25FFE88E84438D27LL);
  *(_DWORD *)(v43 - 120) = a1;
  uint64_t v53 = *(void *)(v42 + 8LL * (v39 - 691)) - 12LL;
  LODWORD(v52) = v49 | ((*(unsigned __int8 *)(v53 + (v52 ^ 0xB7)) ^ 0x92) << 8);
  uint64_t v54 = *(void *)(v42 + 8LL * (v39 - 866));
  unsigned __int8 v55 = *(_BYTE *)(v54 + (*(unsigned __int8 *)(v41 - 0x25FFE88E84438D25LL) ^ 0xD8LL));
  unint64_t v56 = ((*(unsigned __int8 *)(v53 + (*(unsigned __int8 *)(v41 - 0x25FFE88E84438D23LL) ^ 0xC7LL)) ^ 0x72LL) << 8) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)(v55 ^ 0xB5u) << 24);
  int v57 = (((v46 >> 30) ^ 0x68) << 16) | ((*(unsigned __int8 *)(v53
                                                                             + (*(unsigned __int8 *)(v41 - 0x25FFE88E84438D2BLL) ^ 0xDFLL)) ^ 0xB3) << 8);
  int v58 = *(unsigned __int8 *)(v48 + (*(unsigned __int8 *)(v41 - 0x25FFE88E84438D22LL) ^ 0xBCLL));
  HIDWORD(v46) = v58 ^ 0xE;
  LODWORD(v46) = (v58 ^ 0xFFFFFFBF) << 24;
  LOBYTE(v5_Block_object_dispose(va, 8) = v46 >> 28;
  uint64_t v59 = v58 ^ 0x68LL;
  int v60 = v57 | ((*(unsigned __int8 *)(v54 + (*(unsigned __int8 *)(v41 - 0x25FFE88E84438D2DLL) ^ 0xAFLL)) ^ 0x65) << 24);
  int v61 = *(unsigned __int8 *)(v48 + (*(unsigned __int8 *)(v41 - 0x25FFE88E84438D2ALL) ^ 0x98LL));
  HIDWORD(v46) = v61 ^ 0xE;
  LODWORD(v46) = (v61 ^ 0xFFFFFFBF) << 24;
  unsigned int v62 = v60 & 0xFFFFFF00 | (v46 >> 28);
  LODWORD(v4_Block_object_dispose(va, 8) = *(unsigned __int8 *)(v48 + (*(unsigned __int8 *)(v41 - 0x25FFE88E84438D2ELL) ^ 0xD0LL));
  HIDWORD(v46) = v48 ^ 0xE;
  LODWORD(v46) = (v48 ^ 0xFFFFFFBF) << 24;
  int v63 = v50 | ((*(unsigned __int8 *)(v53 + (*(unsigned __int8 *)(v41 - 0x25FFE88E84438D2FLL) ^ 0x49LL)) ^ 0x39) << 8) | ((*(unsigned __int8 *)(v54 + (*v40 ^ 0xFELL)) ^ 0xBC) << 24);
  LODWORD(v53) = *(unsigned __int8 *)(v44 + (*(unsigned __int8 *)(v41 - 0x25FFE88E84438D24LL) ^ 0xB6LL));
  LOBYTE(v4_Block_object_dispose(va, 8) = (v46 >> 28) ^ 0x3C;
  HIDWORD(v46) = v53 ^ 0x30;
  LODWORD(v46) = ~(_DWORD)v53 << 24;
  uint64_t v64 = (v46 >> 30) ^ 0x21LL;
  LODWORD(v53) = v56 | ((_DWORD)v64 << 16) | v59;
  LODWORD(v44) = *(unsigned __int8 *)(v44 + (*(unsigned __int8 *)(v41 - 0x25FFE88E84438D28LL) ^ 0xC8LL));
  HIDWORD(v46) = v44 ^ 0x30;
  LODWORD(v46) = ~(_DWORD)v44 << 24;
  int v223 = v53 ^ 0x75F49EF4;
  int v65 = v52 & 0xFF00FFFF | (((v46 >> 30) ^ 0x37) << 16) | ((*(unsigned __int8 *)(v54
                                                                                                + (*(unsigned __int8 *)(v41 - 0x25FFE88E84438D29LL) ^ 0x18LL)) ^ 0xFA) << 24);
  uint64_t v66 = *(void *)(v42 + 8LL * (v39 - 821)) - 12LL;
  LODWORD(v54) = (((unsigned __int16)((v56 | v59) ^ 0x9EF4) >> 8)
                - ((2 * (((v56 | (v64 << 16) | v59) ^ 0x75F49EF4) >> 8)) & 0x1BC)
                + 1977648606) ^ *(_DWORD *)(v66
                                          + 4
                                          * (((unsigned __int16)((v56 | v59) ^ 0x9EF4) >> 8) ^ 0xF5LL));
  uint64_t v67 = *(void *)(v42 + 8LL * (v39 ^ 0x3AE)) - 8LL;
  int v68 = *(_DWORD *)(v67 + 4LL * (v55 ^ 0xAAu));
  HIDWORD(v46) = v68 ^ 2;
  LODWORD(v46) = v68 ^ 0xDA152904;
  int v69 = v54 - ((2 * v54) & 0xD215A26);
  uint64_t v70 = *(void *)(v42 + 8LL * (v39 ^ 0x3B7));
  int v71 = (v46 >> 2) ^ *(_DWORD *)(v70 + 4LL * (v64 ^ 0xDD)) ^ (v69 + 110144787);
  uint64_t v72 = v58 ^ 0xD9u;
  uint64_t v73 = *(void *)(v42 + 8LL * (v39 - 854)) - 8LL;
  unsigned int v224 = v63 & 0xFFFFFF00 | v48;
  int v74 = *(_DWORD *)(v73 + 4 * v72) ^ v224 ^ (v71 - ((2 * v71) & 0x4BDA7906) - 1511179133);
  int v222 = v65;
  int v220 = v62 ^ 0x2789BBD4 ^ v74;
  LODWORD(v53) = v220 ^ v65 ^ v53;
  int v75 = *(_DWORD *)(v67 + 4LL * (BYTE3(v53) ^ 0x54));
  HIDWORD(v46) = v75 ^ 2;
  LODWORD(v46) = v75 ^ 0xDA152904;
  int v76 = ((v46 >> 2) - ((2 * (v46 >> 2)) & 0x4BDA7906) - 1511179133) ^ *(_DWORD *)(v73
                                                                                + 4LL * (v53 ^ 0xCCu));
  int v77 = v53 ^ 0x166156B8;
  LODWORD(v53) = *(_DWORD *)(v66 + 4LL * (BYTE1(v53) ^ 0x80u)) ^ *(_DWORD *)(v70 + 4LL * (BYTE2(v53) ^ 0x7Bu)) ^ ((BYTE1(v53) ^ 0x75) - ((2 * ((v53 >> 8) ^ 0x3E5275)) & 0x1BC) + 1977648606) ^ (v76 - ((2 * v76) & 0xD215A26) + 110144787);
  unsigned int v225 = v62;
  int v218 = v220 ^ v65 ^ 0xE6;
  int v219 = v77;
  unsigned int v78 = v53 ^ v62 ^ v218;
  LODWORD(v72) = v78 ^ v77;
  unsigned int v79 = v78 ^ v77 ^ 0xA5844168;
  unsigned int v80 = v72 ^ 0xDD37108E;
  LODWORD(v72) = *(_DWORD *)(v67 + 4LL * (BYTE3(v72) ^ 0xB7));
  HIDWORD(v46) = v72 ^ 2;
  LODWORD(v46) = v72 ^ 0xDA152904;
  LODWORD(v72) = *(_DWORD *)(v66 + 4LL * (BYTE1(v80) ^ 0xF5u)) ^ *(_DWORD *)(v70 + 4LL * (BYTE2(v79) ^ 0x9Au)) ^ (BYTE1(v80) - ((v80 >> 7) & 0x1BC) + 1977648606) ^ ((v46 >> 2) - ((2 * (v46 >> 2)) & 0xD215A26) + 110144787);
  int v221 = v74;
  HIDWORD(v215) = v53 ^ v74;
  unint64_t v216 = __PAIR64__(v78, v79);
  int v81 = v53 ^ v74 ^ *(_DWORD *)(v73 + 4LL * (v79 ^ 0xA3u)) ^ (v72
                                                                             - ((2 * v72) & 0x4BDA7906)
                                                                             - 1511179133);
  int v217 = v53 ^ v62 ^ 0xCC6732;
  HIDWORD(v214) = ((v81 ^ 0x516EF336) - ((2 * (v81 ^ 0x516EF336)) & 0xEC565FA0) + 1982541776) ^ v217;
  unsigned int v82 = HIDWORD(v214) ^ 0x8EDEEA78 ^ v78;
  unsigned int v83 = v82 ^ v80;
  LODWORD(v72) = *(_DWORD *)(v67 + 4LL * (((v82 ^ v80) >> 24) ^ 0x11));
  HIDWORD(v46) = v72 ^ 2;
  LODWORD(v46) = v72 ^ 0xDA152904;
  LODWORD(v72) = (v46 >> 2) ^ *(_DWORD *)(v66 + 4LL * (BYTE1(v83) ^ 0xDFu)) ^ ((BYTE1(v83) ^ 0x2A)
                                                                             - ((2 * ((v83 >> 8) ^ 0x7B6C2A)) & 0x1BC)
                                                                             + 1977648606);
  LODWORD(v72) = (v72 - ((2 * v72) & 0x4BDA7906) - 1511179133) ^ *(_DWORD *)(v73
                                                                           + 4LL * ((v82 ^ v80) ^ 3u));
  LODWORD(v215) = v81;
  LODWORD(v72) = v81 ^ *(_DWORD *)(v70 + 4LL * (((v82 ^ v80) >> 16) ^ 0x45u)) ^ (v72
                                                                                                - ((2 * v72) & 0xD215A26)
                                                                                                + 110144787);
  LODWORD(v213) = v72 ^ 0x478E1C69;
  HIDWORD(v213) = v82 ^ v80;
  LODWORD(v214) = v82;
  int v84 = v72 ^ 0x478E1C69 ^ ((HIDWORD(v214) ^ 0x8EDEEA78) - ((2 * (HIDWORD(v214) ^ 0x8EDEEA78)) & 0x2DC1DEBE) + 383840095) ^ 0x307C325C;
  LODWORD(v212) = v84 ^ v82 ^ 0x2816F2D5;
  HIDWORD(v212) = v72 ^ 0x478E1C69 ^ ((HIDWORD(v214) ^ 0x8EDEEA78)
                                    - ((2 * (HIDWORD(v214) ^ 0x8EDEEA78)) & 0x2DC1DEBE)
                                    + 383840095);
  int v85 = *(_DWORD *)(v67 + 4LL * (((v212 ^ v83) >> 24) ^ 0xD2));
  HIDWORD(v46) = v85 ^ 2;
  LODWORD(v46) = v85 ^ 0xDA152904;
  int v86 = ((v46 >> 2) - ((2 * (v46 >> 2)) & 0x4BDA7906) - 1511179133) ^ *(_DWORD *)(v73
                                                                                + 4LL
                                                                                * ((v212 ^ v83) ^ 0xFAu));
  unsigned int v87 = v212 ^ v83 ^ 0xB80433BF;
  HIDWORD(v211) = v212 ^ v83;
  int v88 = *(_DWORD *)(v66 + 4LL * (BYTE1(v87) ^ 0xF5u)) ^ *(_DWORD *)(v70
                                                                  + 4LL
                                                                  * (((v212 ^ v83) >> 16) ^ 0x2Du)) ^ v72 ^ (BYTE1(v87) - ((v87 >> 7) & 0x1BC) + 1977648606) ^ (v86 - ((2 * v86) & 0xD215A26) + 110144787);
  int v89 = v88 ^ v82 ^ 0x2816F2D5;
  unsigned int v90 = v89 ^ v87;
  LODWORD(v53) = *(_DWORD *)(v67 + 4LL * (HIBYTE(v90) ^ 0x21));
  HIDWORD(v46) = v53 ^ 2;
  LODWORD(v46) = v53 ^ 0xDA152904;
  LODWORD(v53) = ((v46 >> 2) - ((2 * (v46 >> 2)) & 0xD215A26) + 110144787) ^ *(_DWORD *)(v70 + 4LL
                                                                                             * (BYTE2(v90) ^ 0xCEu));
  LODWORD(v53) = (v53 - ((2 * v53) & 0x4BDA7906) - 1511179133) ^ *(_DWORD *)(v73 + 4LL * (v90 ^ 0xA7u));
  LODWORD(v72) = ((unsigned __int16)(v90 ^ 0x48E2) >> 8);
  LODWORD(v53) = (v53 - ((2 * v53) & 0xEBC10BBC) + 1977648606) ^ *(_DWORD *)(v66 + 4LL * (v72 ^ 0xF5));
  LODWORD(v53) = v88 ^ 0xB34A470D ^ v72 ^ (v53 - ((2 * v53) & 0xC4496876) - 500911045);
  LODWORD(v211) = v88 ^ 0xB34A470D;
  HIDWORD(v209) = v88 ^ 0xB34A470D ^ (v84 - ((2 * v84) & 0xC4496876) - 500911045);
  unint64_t v210 = __PAIR64__(v89, v90);
  LODWORD(v209) = v53 ^ 0xA1564282;
  HIDWORD(v20_Block_object_dispose(va, 8) = v53 ^ 0xA1564282 ^ (HIDWORD(v209) - ((2 * HIDWORD(v209)) & 0x42AC8504) - 1588182398);
  LODWORD(v72) = HIDWORD(v208) ^ 0xE6F58988 ^ v89;
  unsigned int v91 = v72 ^ v90 ^ 0x4BE748E2;
  int v92 = *(_DWORD *)(v67 + 4LL * (HIBYTE(v91) ^ 0x12));
  LODWORD(v64) = (v39 - 331) | 0x500;
  HIDWORD(v46) = v92 ^ 2;
  LODWORD(v46) = v92 ^ 0xDA152904;
  unsigned int v93 = v72 ^ 0x5C9070A0;
  LODWORD(v20_Block_object_dispose(va, 8) = v91;
  int v94 = *(_DWORD *)(v66 + 4LL * (((unsigned __int16)(v91 ^ 0x8988) >> 8) ^ 0xF5u)) ^ *(_DWORD *)(v70 + 4LL * (BYTE2(v91) ^ 0xDCu)) ^ (((unsigned __int16)(v91 ^ 0x8988) >> 8) - (((v91 ^ 0x78F58988) >> 7) & 0x1BC) + 1977648606) ^ ((v46 >> 2) - ((2 * (v46 >> 2)) & 0xD215A26) + 110144787);
  LODWORD(v72) = *(_DWORD *)(v73 + 4LL * ((v72 ^ v90 ^ 0xE2) ^ 0xCDu)) ^ v53 ^ 0x8FEC6D3A ^ (v94 - ((2 * v94) & 0x4BDA7906) - 1511179133);
  HIDWORD(v206) = v72 ^ ((HIDWORD(v208) ^ 0xE6F58988) - ((2 * (HIDWORD(v208) ^ 0xE6F58988)) & 0x1FD8DA74) - 1880330950);
  int v95 = ((HIDWORD(v206) ^ 0x5BF36347) - ((2 * (HIDWORD(v206) ^ 0x5BF36347)) & 0x1BFD072C) + 234783638) ^ v93;
  unsigned int v96 = v95 ^ v91 ^ 0x78F58988;
  int v97 = ((BYTE1(v96) ^ 0xBB) - ((2 * ((v96 >> 8) ^ 0x1A89BB)) & 0x1BC) + 1977648606) ^ *(_DWORD *)(v66
                                                                                                 + 4LL
                                                                                                 * (BYTE1(v96) ^ 0x4Eu));
  int v98 = (v97 - ((2 * v97) & 0x4BDA7906) - 1511179133) ^ *(_DWORD *)(v73
                                                                  + 4LL
                                                                  * ((((BYTE4(v206) ^ 0x47)
                                                                                      - ((2 * (BYTE4(v206) ^ 0x47)) & 0x2C)
                                                                                      - 106) ^ v93 ^ v91 ^ 0x88) ^ 0x91u));
  LODWORD(v4_Block_object_dispose(va, 8) = *(_DWORD *)(v67 + 4LL * (HIBYTE(v96) ^ 0x70));
  HIDWORD(v46) = v48 ^ 2;
  LODWORD(v46) = v48 ^ 0xDA152904;
  int v99 = (v46 >> 2) ^ *(_DWORD *)(v70 + 4LL * (BYTE2(v96) ^ 0xA0u)) ^ (v98 - ((2 * v98) & 0xD215A26) + 110144787);
  unint64_t v207 = __PAIR64__(v93, v72);
  LODWORD(v205) = (v99 - 1880330950 + (~(2 * v99) | 0xE027258B) + 1) ^ v72;
  HIDWORD(v205) = v96;
  int v100 = v205 ^ 0x930000ED ^ HIDWORD(v206) ^ 0x5BF36347;
  LODWORD(v53) = v100 ^ 0x8D06EA22;
  HIDWORD(v204) = v100;
  LODWORD(v204) = v95 ^ 0x8BF8897F ^ ((v100 ^ 0x8D06EA22)
                                    - 2 * ((v100 ^ 0x8D06EA22) & 0x2CBD5990 ^ v100 & 0x10)
                                    - 1396876928);
  int v101 = v204 ^ v96;
  LODWORD(v4_Block_object_dispose(va, 8) = *(_DWORD *)(v67 + 4LL * (((v204 ^ v96) >> 24) ^ 0x23));
  HIDWORD(v46) = v48 ^ 2;
  LODWORD(v46) = v48 ^ 0xDA152904;
  int v102 = v204 ^ v96 ^ 0x49571195;
  LODWORD(v4_Block_object_dispose(va, 8) = *(_DWORD *)(v73 + 4LL * (v101 ^ 0xD0u)) ^ *(_DWORD *)(v66 + 4LL
                                                                                            * (BYTE1(v102) ^ 0xF5u)) ^ 0xD00DB95D ^ (v46 >> 2);
  HIDWORD(v203) = v101;
  int v103 = (v48 - ((2 * v48) & 0xD215A26) + 110144787) ^ *(_DWORD *)(v70 + 4LL * (BYTE2(v101) ^ 0x7Eu)) ^ v205 ^ 0x930000ED ^ BYTE1(v102);
  LODWORD(v206) = v95;
  LODWORD(v4_Block_object_dispose(va, 8) = v103 ^ v95 ^ v102;
  LODWORD(v67) = *(_DWORD *)(v67 + 4LL * (BYTE3(v48) ^ 0x63));
  unsigned int v104 = v48 ^ 0x2745D0FF;
  LODWORD(v203) = v48 ^ 0xCA94E269;
  HIDWORD(v46) = v67 ^ 2;
  LODWORD(v46) = v67 ^ 0xDA152904;
  LODWORD(v44) = *(_DWORD *)(v66 + 4LL * (BYTE1(v104) ^ 0xFDu)) ^ *(_DWORD *)(v73
                                                                            + 4LL
                                                                            * (~(_BYTE)v48 ^ 0xC4u)) ^ ((BYTE1(v104) ^ 8) - 2 * (((v104 >> 8) ^ 0x2E3F08) & 0xDF ^ (v104 >> 8) & 1) + 1977648606) ^ ((v46 >> 2) - ((2 * (v46 >> 2)) & 0x4BDA7906) - 1511179133);
  LODWORD(v44) = (v44 - ((2 * v44) & 0xD215A26) + 110144787) ^ *(_DWORD *)(v70
                                                                         + 4LL
                                                                         * (((v48 ^ 0x2745D0FF) >> 16) ^ 0x16u));
  LODWORD(v44) = v44 - ((2 * v44) & 0xD2DACFE8);
  uint16x8_t v105 = (char *)*(&off_10025B940 + (v39 ^ 0x30B)) - 8;
  int v106 = v105[*(unsigned __int8 *)(v43 - 109) ^ 0xA5LL];
  HIDWORD(v46) = v106 ^ 0x19;
  LODWORD(v46) = (v106 ^ 0x40) << 24;
  id v202 = (char *)*(&off_10025B940 + v39 - 743) - 12;
  uint64_t v200 = (uint64_t)*(&off_10025B940 + v39 - 747);
  uint64_t v201 = (uint64_t)*(&off_10025B940 + v39 - 872);
  unsigned int v107 = (((((v46 >> 30) ^ 0xDB) >> 2) | (((v46 >> 30) ^ 0xDB) << 6)) | ((*(unsigned __int8 *)(v201 + (*(unsigned __int8 *)(v43 - 111) ^ 0x7ALL)) ^ 0x22) << 16) | ((*(unsigned __int8 *)(v200 + (*(unsigned __int8 *)(v43 - 112) ^ 0x78LL)) ^ 0x3D) << 24) | (((v202[*(unsigned __int8 *)(v43 - 110) ^ 0x5DLL] + (*(_BYTE *)(v43 - 110) ^ 0x52) - 86) ^ 0x5D) << 8)) ^ 0xABF011B7;
  unsigned int v108 = ((v105[*(unsigned __int8 *)(v43 - 101) ^ 0x60LL] ^ 0x92) & 0xFFFF00FF | ((*(unsigned __int8 *)(v201 + (*(unsigned __int8 *)(v43 - 103) ^ 5LL)) ^ 0x73) << 16) | (((v202[*(unsigned __int8 *)(v43 - 102) ^ 4LL] + (*(_BYTE *)(v43 - 102) ^ 0xB) - 86) ^ 0x33) << 8) | ((*(unsigned __int8 *)(v200 + (*(unsigned __int8 *)(v43 - 104) ^ 0x1CLL)) ^ 0xC8) << 24)) ^ 0x6A15AC90;
  unsigned int v109 = ((v105[*(unsigned __int8 *)(v43 - 105) ^ 0x28LL] ^ 0x53) & 0xFFFF00FF | ((((*(_BYTE *)(v43 - 106) ^ 0xAC) + v202[*(unsigned __int8 *)(v43 - 106) ^ 0xA3LL] - 86) ^ 0xF6) << 8) | ((*(unsigned __int8 *)(v200 + (*(unsigned __int8 *)(v43 - 108) ^ 0xB2LL)) ^ 0x3F) << 24) | ((*(unsigned __int8 *)(v201 + (*(unsigned __int8 *)(v43 - 107) ^ 0x27LL)) ^ 0x17) << 16)) ^ 0x79CA115A;
  unsigned int v110 = ((v105[*(unsigned __int8 *)(v43 - 97) ^ 0x7BLL] ^ 0x26) & 0xFFFF00FF | ((((*(_BYTE *)(v43 - 98) ^ 0xD0) + v202[*(unsigned __int8 *)(v43 - 98) ^ 0xDFLL] - 86) ^ 0xE4) << 8) | ((*(unsigned __int8 *)(v201 + (*(unsigned __int8 *)(v43 - 99) ^ 0xAALL)) ^ 0x41) << 16) | ((*(unsigned __int8 *)(v200 + (*(unsigned __int8 *)(v43 - 100) ^ 0x45LL)) ^ 7) << 24)) ^ 0x3114371A;
  HIDWORD(v199) = *(_DWORD *)(v43 - 120) - 506958307;
  int v111 = v53 - ((2 * v53) & 0xD2DACFE8) - 378705932;
  LODWORD(v19_Block_object_dispose(va, 8) = v64 - 1123996001;
  HIDWORD(v197) = v64 ^ 0x7CB;
  LODWORD(v197) = v64 ^ 0x767;
  HIDWORD(v196) = v64 ^ 0x7DA;
  LODWORD(v196) = v103 ^ 0xE96D67F4 ^ v111;
  LODWORD(v199) = v103 ^ 0xE96D67F4;
  LODWORD(v195) = (v44 - 378705932) ^ v103 ^ 0xE96D67F4;
  HIDWORD(v195) = v64 ^ 0x702;
  *(_DWORD *)(v43 - 12_Block_object_dispose(va, 8) = v64;
  HIDWORD(a_Block_object_dispose(va, 8) = v64 ^ 0x71E;
  HIDWORD(a1_Block_object_dispose(va, 8) = v103 ^ v95 ^ 0x452FF2BF;
  HIDWORD(v19_Block_object_dispose(va, 8) = v111 ^ 0x3DC8BA5D ^ (v44 - 378705932);
  HIDWORD(a6) = HIDWORD(v198) ^ HIDWORD(a18);
  *(void *)(v43 - 20_Block_object_dispose(va, 8) = 7LL;
  int v112 = v105[a2[7] ^ 0x41LL];
  *(void *)(v43 - 16_Block_object_dispose(va, 8) = 12LL;
  uint64_t v113 = a2[12] ^ 0x60LL;
  uint64_t v114 = ((((_DWORD)v64 - 1123996001) & 0x42FECF76) - 1391) & 0x85799A89 ^ 0x85799A89;
  *(void *)(v43 - 160) = v114;
  LODWORD(v113) = *(unsigned __int8 *)(v200 + v113);
  uint64_t v115 = a2[v114];
  *(void *)(v43 - 136) = 1LL;
  LODWORD(v115) = *(unsigned __int8 *)(v200 + (v115 ^ 0xC1)) ^ 8;
  int v116 = *(unsigned __int8 *)(v201 + (a2[1] ^ 0x66LL)) ^ 0xCE;
  *(void *)(v43 - 144) = 15LL;
  uint64_t v117 = a2[15] ^ 0xE9LL;
  *(void *)(v43 - 176) = 11LL;
  LODWORD(v113) = v105[v117] ^ 0x84 | ((v113 ^ 0xBC) << 24);
  LODWORD(v117) = v105[a2[11] ^ 0xC3LL];
  *(void *)(v43 - 184) = 0LL;
  int v118 = (v116 << 16) | ((*(unsigned __int8 *)(v200 + (*a2 ^ 0x30LL)) ^ 0x8C) << 24);
  LODWORD(v117) = v117 ^ 0x4E;
  *(void *)(v43 - 152) = 2LL;
  unsigned int v119 = v118 & 0xFFFF00FF | (((v202[a2[2] ^ 0xC0LL] + (a2[2] ^ 0xCF) - 86) ^ 0xF9) << 8);
  *(void *)(v43 - 216) = 4LL;
  int v120 = *(unsigned __int8 *)(v200 + (a2[4] ^ 0xFCLL)) ^ 0x32;
  v112 ^= 0x54u;
  *(void *)(v43 - 224) = 9LL;
  uint64_t v121 = a2[9];
  *(void *)(v43 - 240) = 5LL;
  LODWORD(v56) = (*(unsigned __int8 *)(v201 + (v121 ^ 0x5D)) ^ 0x1D) << 16;
  *(void *)(v43 - 200) = 10LL;
  LODWORD(v115) = v56 & 0xFFFF00FF | (((v202[a2[10] ^ 0xD5LL] + (a2[10] ^ 0xDA) - 86) ^ 0xCF) << 8) | v117 | ((_DWORD)v115 << 24);
  *(void *)(v43 - 192) = 14LL;
  LODWORD(v121) = (*(unsigned __int8 *)(v201 + (a2[5] ^ 0xA9LL)) ^ 0xF3) << 16;
  LODWORD(v113) = v113 & 0xFFFF00FF | ((v202[a2[14] ^ 0xE4LL] + (a2[14] ^ 0xEB) + 42) << 8);
  *(void *)(v43 - 232) = 3LL;
  LODWORD(v4_Block_object_dispose(va, 8) = v105[a2[3] ^ 0xDCLL] ^ 0x90 | v119;
  *(void *)(v43 - 24_Block_object_dispose(va, 8) = 13LL;
  LODWORD(v53) = v113 | ((*(unsigned __int8 *)(v201 + (a2[13] ^ 0x92LL)) ^ 0x20) << 16);
  *(void *)(v43 - 256) = 6LL;
  LODWORD(v72) = v107 ^ v224 ^ (v48 - ((2 * v48) & 0x2493511C) + 306817166);
  unsigned int v122 = v109 ^ v225 ^ ((v121 & 0xFFFF00FF | (((v202[a2[6] ^ 0x4FLL] + (a2[6] ^ 0x40) - 86) ^ 0xB7) << 8) | v112 | (v120 << 24))
                      - 2
  LODWORD(v56) = v110 ^ v223 ^ (v53 - ((2 * v53) & 0x115B1D46) - 2001891677);
  unsigned int v123 = v108 ^ v222 ^ (v115 - 2 * (v115 & 0x53AC152F ^ v117 & 6) - 743697111);
  LODWORD(v121) = (v107 ^ v224 ^ (v48 - ((2 * v48) & 0x1C) - 114));
  *(_DWORD *)(v43 - 120) = -472037861;
  passwd v124 = (char *)*(&off_10025B940 + (int)(v64 ^ 0x767)) - 12;
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (HIBYTE(v123) ^ 0x3F)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  id v125 = (char *)*(&off_10025B940 + (int)(v64 ^ 0x7CB)) - 8;
  LODWORD(v115) = (v46 >> 1) ^ *(_DWORD *)&v125[4 * (BYTE2(v56) ^ 0x34)] ^ ((BYTE2(v56) ^ 0x68)
                                                                          + 1291556716
                                                                          - 2
                                                                          * ((BYTE2(v56) ^ 0x68) & 0x7E ^ WORD1(v56) & 0x12));
  id v126 = (char *)*(&off_10025B940 + *(_DWORD *)(v43 - 128) - 1845) - 8;
  unsigned int v127 = *(_DWORD *)&v126[4 * (v123 ^ 0xC6)] ^ *(_DWORD *)&v125[4 * (BYTE2(v72) ^ 0x89)] ^ ((BYTE2(v72) ^ 0xD5) + 1291556716 - ((2 * (WORD1(v72) ^ 0x6CD5)) & 0xD8)) ^ ((v123 ^ 0xAB) - 472037860 + ((2 * (v123 ^ 0xAB) + 254) & 0x338 ^ 0xEFC2FBFF));
  LODWORD(v117) = *(_DWORD *)&v125[4 * (BYTE2(v122) ^ 0x8C)] ^ *(_DWORD *)&v126[4 * (v56 ^ 0xB6)] ^ ((v56 ^ 0xDB) - 472037861 - ((2 * (v56 ^ 0xDB) + 306021630) & 0x103D0738)) ^ ((BYTE2(v122) ^ 0xD0) + 1291556716 - ((2 * (HIWORD(v122) ^ 0xC8D0)) & 0xD8));
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (HIBYTE(v122) ^ 0xC8)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  LODWORD(v53) = ((BYTE2(v123) ^ 0xAD) + 1291556716 - 2 * ((BYTE2(v123) ^ 0xAD) & 0x7C ^ HIWORD(v123) & 0x10)) ^ *(_DWORD *)&v126[4 * (v121 ^ 0x1C)] ^ ((v121 ^ 0x71) - 472037860 + ((2 * (v121 ^ 0x71) + 254) & 0x338 ^ 0xEFC2FBFF)) ^ (v46 >> 1) ^ *(_DWORD *)&v125[4 * (BYTE2(v123) ^ 0xF1)];
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (BYTE3(v72) ^ 0x6C)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  LODWORD(v4_Block_object_dispose(va, 8) = v46 >> 1;
  LODWORD(v121) = v53 + 127010640 - ((2 * v53) & 0xF240EA0);
  LODWORD(v73) = (v122 ^ 0x10)
               - 472037860
               + ((2 * (v122 ^ 0x10) + 254) & 0x338 ^ 0xEFC2FBFF);
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (BYTE3(v56) ^ 0xB7)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  id v128 = (char *)*(&off_10025B940 + (int)(v64 ^ 0x7DA)) - 8;
  LODWORD(v115) = *(_DWORD *)&v128[4 * (BYTE1(v72) ^ 0xDE)] ^ v218 ^ *(_DWORD *)&v126[4 * (v122 ^ 0x7D)] ^ (v115 + 127010640 - ((2 * v115) & 0xF240EA0));
  LODWORD(v53) = (v127 + 127010640 - ((2 * v127) & 0xF240EA0)) ^ *(_DWORD *)&v128[4 * (BYTE1(v122) ^ 0x2F)] ^ (v46 >> 1);
  int v129 = *(_DWORD *)&v128[4 * (BYTE1(v56) ^ 0x66)];
  unsigned int v130 = *(_DWORD *)&v128[4 * (BYTE1(v123) ^ 0x29)] ^ v221 ^ v48 ^ (v117 + 127010640 - ((2 * v117) & 0xF240EA0));
  LODWORD(v56) = v115 ^ v73;
  unsigned int v131 = v129 ^ v220 ^ v121;
  HIDWORD(v46) = *(_DWORD *)&v124[4 * ((v115 ^ ~(_DWORD)v73) >> 24)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  LODWORD(v121) = v46 >> 1;
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (HIBYTE(v130) ^ 0x91)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  LODWORD(v4_Block_object_dispose(va, 8) = v46 >> 1;
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (HIBYTE(v131) ^ 0xA3)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  LODWORD(v113) = v48 ^ ((BYTE2(v131) ^ 0xAC) + 1291556716 - 2 * ((HIWORD(v131) ^ 0xA3AC) & 0x6D ^ HIWORD(v131) & 1)) ^ *(_DWORD *)&v125[4 * (BYTE2(v131) ^ 0xF0)];
  int v132 = (v46 >> 1) ^ *(_DWORD *)&v126[4 * (v130 ^ 0x7B)] ^ *(_DWORD *)&v125[4 * (BYTE2(v56) ^ 0x15)] ^ ((BYTE2(v56) ^ 0x49) + 1291556716 - 2 * ((BYTE2(v56) ^ 0x49) & 0x7E ^ WORD1(v56) & 0x12)) ^ ((v130 ^ 0x16) - 472037860 + ((2 * (v130 ^ 0x16) + 254) & 0x338 ^ 0xEFC2FBFF));
  LODWORD(v115) = (v53 - ((2 * v53) & 0x50664662) + 674439985) ^ v219;
  LODWORD(v53) = (v132 + 127010640 - ((2 * v132) & 0xF240EA0)) ^ *(_DWORD *)&v128[4 * (BYTE1(v115) ^ 0x70)];
  LODWORD(v113) = (v113 + 127010640 - ((2 * v113) & 0xF240EA0)) ^ *(_DWORD *)&v128[4 * (BYTE1(v56) ^ 0x2C)];
  int v133 = v121 ^ *(_DWORD *)&v126[4 * (v131 ^ 3)] ^ ((v131 ^ 0x6E)
                                                                   - 472037860
                                                                   + ((2 * (v131 ^ 0x6E) + 254) & 0x338 ^ 0xEFC2FBFF)) ^ *(_DWORD *)&v125[4 * (BYTE2(v115) ^ 0xC3)] ^ ((BYTE2(v115) ^ 0x9F) + 1291556716 - ((2 * (WORD1(v115) ^ 0x259F)) & 0xD8));
  LODWORD(v117) = *(_DWORD *)&v125[4 * (BYTE2(v130) ^ 0x2E)] ^ ((BYTE2(v130) ^ 0x72)
                                                              + 1291556716
                                                              - ((2 * (HIWORD(v130) ^ 0x9172)) & 0xD8));
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (BYTE3(v115) ^ 0x25)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  LODWORD(v117) = ((v56 ^ 0xFC)
                 - 472037860
                 + ((2 * (v56 ^ 0xFC) + 254) & 0x338 ^ 0xEFC2FBFF)) ^ *(_DWORD *)&v128[4 * (BYTE1(v131) ^ 0xBD)] ^ *(_DWORD *)&v126[4 * (v56 ^ 0x91)] ^ (v117 + 127010640 - ((2 * v117) & 0xF240EA0));
  LODWORD(v56) = ((v115 ^ 0xD6) - 1726037377) ^ HIDWORD(v215) ^ *(_DWORD *)&v126[4
                                                                                                * (v115 ^ 0xBB)] ^ (v113 + 1253999516 - ((2 * v113) & 0x957D0738));
  unsigned int v134 = *(_DWORD *)&v128[4 * (BYTE1(v130) ^ 0x57)] ^ HIDWORD(v216) ^ (v133 + 127010640 - ((2 * v133) & 0xF240EA0));
  unsigned int v135 = ((v117 ^ (v46 >> 1)) - ((2 * (v117 ^ (v46 >> 1))) & 0xF6A05576) - 78632261) ^ v79;
  LODWORD(v72) = (v53 + 1982541776 - ((2 * v53) & 0xEC565FA0)) ^ v217;
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (HIBYTE(v135) ^ 0xA6)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  LODWORD(v113) = ((v72 ^ 0xA1)
                 - 472037860
                 + ((2 * (v72 ^ 0xA1) + 254) & 0x338 ^ 0xEFC2FBFF)) ^ *(_DWORD *)&v126[4 * (v72 ^ 0xCC)];
  int v136 = *(_DWORD *)&v125[4 * (BYTE2(v56) ^ 0xDB)] ^ ((BYTE2(v56) ^ 0x87)
                                                    + 1291556716
                                                    - ((2 * (WORD1(v56) ^ 0x3A87)) & 0xD8)) ^ (v46 >> 1);
  LODWORD(v113) = (v113 + 127010640 - ((2 * v113) & 0xF240EA0)) ^ *(_DWORD *)&v128[4 * (BYTE1(v56) ^ 0xDE)];
  LODWORD(v53) = ((v56 ^ 0x9E)
                + *(_DWORD *)(v43 - 120)
                - ((2 * (v56 ^ 0x9E) + 306021630) & 0x103D0738)) ^ *(_DWORD *)&v126[4 * (v56 ^ 0xF3)];
  int v137 = (v136 + 127010640 - ((2 * v136) & 0xF240EA0)) ^ *(_DWORD *)&v128[4 * (BYTE1(v72) ^ 0x57)];
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (HIBYTE(v134) ^ 0x41)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  LODWORD(v113) = *(_DWORD *)&v125[4 * (BYTE2(v135) ^ 0x20)] ^ BYTE2(v135) ^ (v46 >> 1) ^ (v113
                                                                                         + 1291556716
                                                                                         - ((2 * v113) & 0x99F72ED8));
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (BYTE3(v56) ^ 0x3A)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  LODWORD(v115) = BYTE2(v72) ^ *(_DWORD *)&v128[4 * (BYTE1(v134) ^ 0xF4)] ^ *(_DWORD *)&v125[4 * (BYTE2(v72) ^ 0xF6)] ^ (v46 >> 1);
  LODWORD(v56) = ((v135 ^ 0x8B) - 1726037377) ^ v215 ^ *(_DWORD *)&v126[4
                                                                                       * (v135 ^ 0xE6)] ^ ((v115 ^ 0x4B699096) + 1253999516 + ((2 * ((v115 ^ 0x4B699096) & 0x4ABE839E ^ v115 & 2)) ^ 0xFFFFFFFB) + 1);
  unsigned int v138 = *(_DWORD *)&v126[4 * (v134 ^ 0xB5)] ^ ((v134 ^ 0xD8) - 1726037377) ^ (v137 + 1253999516 - ((2 * v137) & 0x957D0738));
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (BYTE3(v72) ^ 0x7C)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  LODWORD(v117) = *(_DWORD *)&v128[4 * (BYTE1(v135) ^ 0xB)] ^ HIDWORD(v214) ^ ((BYTE2(v134) ^ 0xEB)
                                                                             + 1291556716
                                                                             - ((2 * (HIWORD(v134) ^ 0x2EB)) & 0xD8));
  unsigned int v139 = (v138 - ((2 * v138) & 0x67809C32) + 868240921) ^ HIDWORD(v213);
  LODWORD(v72) = ((v113 ^ 0x7C) - ((2 * (v113 ^ 0x7C)) & 0xCC195116) + 1712105611) ^ v214;
  unsigned int v140 = v117 ^ *(_DWORD *)&v125[4 * (BYTE2(v134) ^ 0xB7)] ^ (v53 + 127010640 - ((2 * v53) & 0xF240EA0)) ^ (v46 >> 1);
  LODWORD(v53) = (((v113 ^ 0x7C) - ((2 * (v113 ^ 0x7C)) & 0x16) - 117) ^ v214);
  LODWORD(v53) = ((v53 ^ 0xAA) - 472037860 + ((2 * (v53 ^ 0xAA) + 254) & 0x338 ^ 0xEFC2FBFF)) ^ *(_DWORD *)&v126[4 * (v53 ^ 0xC7)];
  LODWORD(v73) = v53 + 127010640 - ((2 * v53) & 0xF240EA0);
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (BYTE3(v56) ^ 0x2D)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  LODWORD(v113) = ((v138 - ((2 * v138) & 0x32) + 25) ^ BYTE4(v213));
  LODWORD(v53) = (v46 >> 1) ^ *(_DWORD *)&v126[4 * (v113 ^ 0xE4)] ^ ((v113 ^ 0x89)
                                                                                 - 472037860
                                                                                 + ((2 * (v113 ^ 0x89) + 254) & 0x338 ^ 0xEFC2FBFF));
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (HIBYTE(v139) ^ 0x6D)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  LODWORD(v121) = v46 >> 1;
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (BYTE3(v72) ^ 0xA9)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  LODWORD(v113) = v46 >> 1;
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (HIBYTE(v140) ^ 0xB4)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  LODWORD(v113) = v113 ^ *(_DWORD *)&v126[4 * (v140 ^ 0x8B)] ^ ((v140 ^ 0xE6)
                                                                               - 472037860
  LODWORD(v53) = ((BYTE2(v140) ^ 0x59) + 1291556716 - ((2 * (HIWORD(v140) ^ 0xB459)) & 0xD8)) ^ *(_DWORD *)&v125[4 * (BYTE2(v140) ^ 5)] ^ *(_DWORD *)&v128[4 * (BYTE1(v72) ^ 0x45)] ^ (v53 + 127010640 - ((2 * v53) & 0xF240EA0));
  LODWORD(v117) = BYTE2(v56) ^ 0x72;
  LODWORD(v115) = v117 + 1291556716 - ((2 * (WORD1(v56) ^ 0x2D72)) & 0xD8);
  int v141 = v56;
  LODWORD(v4_Block_object_dispose(va, 8) = (v56 ^ 0x16)
               - 472037860
               + ((2 * (v56 ^ 0x16) + 254) & 0x338 ^ 0xEFC2FBFF);
  LODWORD(v56) = ((BYTE2(v139) ^ 0x33) + 1291556716 - ((2 * (HIWORD(v139) ^ 0x6D33)) & 0xD8)) ^ v212 ^ *(_DWORD *)&v128[4 * (BYTE1(v56) ^ 0x57)] ^ *(_DWORD *)&v125[4 * (BYTE2(v139) ^ 0x6F)] ^ (v113 + 127010640 - ((2 * v113) & 0xF240EA0));
  unsigned int v142 = *(_DWORD *)&v128[4 * (BYTE1(v139) ^ 0x14)] ^ HIDWORD(v212) ^ ((v46 >> 1)
                                                                     + 127010640
                                                                     - ((2 * (v46 >> 1)) & 0xF240EA0)) ^ *(_DWORD *)&v126[4 * (v141 ^ 0x7B)] ^ ((BYTE2(v72) ^ 0x8F) + 1291556716 - ((2 * (WORD1(v72) ^ 0xEA8F)) & 0xD8)) ^ v48 ^ *(_DWORD *)&v125[4 * (BYTE2(v72) ^ 0xD3)];
  LODWORD(v72) = (v53 + 383840095 - ((2 * v53) & 0x2DC1DEBE)) ^ v213;
  unsigned int v143 = *(_DWORD *)&v128[4 * (BYTE1(v140) ^ 0x34)] ^ v212 ^ v83 ^ *(_DWORD *)&v125[4 * (v117 ^ 0x5C)] ^ v115 ^ v121 ^ v73;
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (HIBYTE(v143) ^ 0x9D)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  LODWORD(v73) = (v46 >> 1) + 127010640 - ((2 * (v46 >> 1)) & 0xF240EA0);
  LODWORD(v113) = ((BYTE2(v142) ^ 0x81) + 1291556716 - ((v142 >> 15) & 0xD8)) ^ *(_DWORD *)&v125[4
                                                                                               * (BYTE2(v142) ^ 0xDD)];
  int v144 = *(_DWORD *)(v43 - 120);
  unsigned int v145 = ((v142 ^ 0x51) - 472037860 + ((2 * (v142 ^ 0x51) + 254) & 0x338 ^ 0xEFC2FBFF)) ^ *(_DWORD *)&v126[4 * (v142 ^ 0x3C)];
  LODWORD(v117) = *(_DWORD *)&v125[4 * (BYTE2(v56) ^ 0xDB)] ^ ((BYTE2(v56) ^ 0x87)
                                                             + 1291556716
                                                             - ((2 * (WORD1(v56) ^ 0x7787)) & 0xD8));
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (HIBYTE(v142) ^ 0x14)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  int v146 = v46 >> 1;
  unsigned int v147 = ((v143 ^ 0xDE9BA169) >> 16) ^ *(_DWORD *)&v125[4
                                                                       * (((v143 ^ 0xDE9BA169) >> 16) ^ 0x5C)] ^ (v145 + 1291556716 - ((2 * v145) & 0x99F72ED8));
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (BYTE3(v72) ^ 0x9A)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  LODWORD(v113) = *(_DWORD *)&v126[4 * (v143 ^ 4)] ^ (v113 + 127010640 - ((2 * v113) & 0xF240EA0)) ^ *(_DWORD *)&v128[4 * (BYTE1(v56) ^ 0xDE)] ^ (v144 + (v143 ^ 0x69) - ((2 * (v143 ^ 0x69) + 306021630) & 0x103D0738)) ^ (v46 >> 1);
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (BYTE3(v56) ^ 0x77)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  int v148 = (v46 >> 1) ^ *(_DWORD *)&v128[4
                                     * (((unsigned __int16)((v53 - 4257 - ((2 * v53) & 0xDEBE)) ^ v213) >> 8) ^ 0x2D)] ^ (v147 + 127010640 - ((2 * v147) & 0xF240EA0));
  LODWORD(v56) = *(_DWORD *)&v128[4 * (BYTE1(v142) ^ 0x34)] ^ v210 ^ v73 ^ *(_DWORD *)&v125[4 * (BYTE2(v72) ^ 0xB5)] ^ ((v56 ^ 0x9E) - 472037860 + ((2 * (v56 ^ 0x9E) + 254) & 0x338 ^ 0xEFC2FBFF)) ^ ((BYTE2(v72) ^ 0xE9) + 1291556716 - ((2 * (WORD1(v72) ^ 0x9AE9)) & 0xD8)) ^ *(_DWORD *)&v126[4 * (v56 ^ 0xF3)];
  unsigned int v149 = *(_DWORD *)&v128[4 * (BYTE1(v143) ^ 0x43)] ^ HIDWORD(v209) ^ ((v72 ^ 0xA8)
                                                                     - 472037860
                                                                     + ((2 * (v72 ^ 0xA8) + 254) & 0x338 ^ 0xEFC2FBFF)) ^ v146 ^ *(_DWORD *)&v126[4 * (v72 ^ 0xC5)] ^ (v117 + 127010640 - ((2 * v117) & 0xF240EA0));
  LODWORD(v53) = v148 - ((2 * v148) & 0x7CEC1D6C);
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (HIBYTE(v149) ^ 0x6D)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  LODWORD(v117) = v46 >> 1;
  unsigned int v150 = (v113 - 500911045 - ((2 * v113) & 0xC4496876)) ^ v211;
  LODWORD(v115) = *(_DWORD *)&v124[4 * (HIBYTE(v150) ^ 0xFD)];
  LODWORD(v113) = *(_DWORD *)&v125[4 * (BYTE2(v149) ^ 0x52)] ^ ((_DWORD)v115 << 31) ^ (v115 >> 1) ^ ((BYTE2(v149) ^ 0xE) + 1291556716 + (~(2 * (HIWORD(v149) ^ 0x2E0E)) | 0xFFFFFF27) + 1) ^ 0x7DC7959D;
  unsigned int v151 = ((v149 ^ 0x4A) - 472037860 + ((2 * (v149 ^ 0x4A) + 254) & 0x338 ^ 0xEFC2FBFF)) ^ *(_DWORD *)&v126[4 * (v149 ^ 0x27)];
  LODWORD(v121) = (v53 + 1047924406) ^ HIDWORD(v210);
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (BYTE3(v121) ^ 0xC1)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  LODWORD(v53) = (v46 >> 1) ^ *(_DWORD *)&v128[4 * (BYTE1(v150) ^ 0xA4)] ^ (v151 + 127010640 - ((2 * v151) & 0xF240EA0));
  int v152 = *(_DWORD *)&v125[4 * (BYTE2(v121) ^ 0x22)] ^ v117 ^ *(_DWORD *)&v126[4 * (v150 ^ 0x4D)] ^ ((v150 ^ 0x20) - 472037860 + ((2 * (v150 ^ 0x20) + 254) & 0x338 ^ 0xEFC2FBFF)) ^ ((BYTE2(v121) ^ 0x7E) + 1291556716 - 2 * ((WORD1(v121) ^ 0xC17E) & 0x6D ^ WORD1(v121) & 1));
  LODWORD(v115) = v152 + 127010640 - ((2 * v152) & 0xF240EA0);
  LODWORD(v113) = ((v56 ^ 0x34) + v144 - ((2 * (v56 ^ 0x34) + 306021630) & 0x103D0738)) ^ *(_DWORD *)&v128[4 * (BYTE1(v121) ^ 0x81)] ^ *(_DWORD *)&v126[4 * (v56 ^ 0x59)] ^ (v113 + 127010640 - ((2 * v113) & 0xF240EA0));
  unsigned int v153 = ((v121 ^ 0x33) - 1599026736 + ((2 * (v121 ^ 0x33) + 254) & 0x2A0 ^ 0xFDDBFBFF)) ^ *(_DWORD *)&v128[4 * (BYTE1(v149) ^ 0x65)];
  unsigned int v154 = (v153 + 1253999516 - ((2 * v153) & 0x957D0738)) ^ *(_DWORD *)&v126[4 * (v121 ^ 0x5E)];
  int v155 = *(_DWORD *)&v125[4 * (BYTE2(v150) ^ 0x40)] ^ ((BYTE2(v150) ^ 0x1C)
                                                     + 1291556716
                                                     - ((2 * (HIWORD(v150) ^ 0xFD1C)) & 0xD8));
  unsigned int v156 = v155 ^ 0x81DAE616 ^ (v154 - 1027092795 - ((2 * v154) & 0x858F9D8A));
  v154 ^= 0x6500C283u;
  int v157 = (v154 + v156 + 1) ^ ((v155 ^ 0x261DEA50) + 1);
  LODWORD(v53) = BYTE2(v56) ^ *(_DWORD *)&v125[4 * (BYTE2(v56) ^ 0x24)] ^ (v53 + 1291556716 - ((2 * v53) & 0x99F72ED8)) ^ 0x78;
  LODWORD(v117) = *(_DWORD *)&v128[4 * (BYTE1(v56) ^ 0x38)];
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (BYTE3(v56) ^ 0x6E)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  LODWORD(v56) = (v53 + 234783638 - ((2 * v53) & 0x1BFD072C)) ^ HIDWORD(v207);
  LODWORD(v53) = ((v155 ^ 0x1B25DB6A ^ (v157 - 1027092795 - ((2 * v157) & 0x858F9D8A))) + v154) ^ (v46 >> 1);
  LODWORD(v72) = v117 ^ HIDWORD(v208) ^ v115;
  unsigned int v158 = (v113 - 1588182398 - ((2 * v113) & 0x42AC8504)) ^ v209;
  LODWORD(v113) = ((BYTE2(v158) ^ 0xE9) + 1291556716 - 2 * ((HIWORD(v158) ^ 0xB8E9) & 0x6E ^ HIWORD(v158) & 2)) ^ *(_DWORD *)&v125[4 * (BYTE2(v158) ^ 0xB5)];
  LODWORD(v73) = v113 + 127010640 - ((2 * v113) & 0xF240EA0);
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (BYTE3(v56) ^ 0x9D)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  int v159 = v46 >> 1;
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (BYTE3(v72) ^ 0x61)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  LODWORD(v113) = *(_DWORD *)&v126[4 * (v158 ^ 0xC5)] ^ (v46 >> 1) ^ *(_DWORD *)&v125[4 * (BYTE2(v56) ^ 0x28)] ^ ((v158 ^ 0xA8) - 472037860 + ((2 * (v158 ^ 0xA8) + 254) & 0x338 ^ 0xEFC2FBFF)) ^ ((BYTE2(v56) ^ 0x74) + 1291556716 - 2 * ((WORD1(v56) ^ 0x9D74) & 0x6D ^ WORD1(v56) & 1));
  LODWORD(v53) = (v53 - ((2 * v53) & 0x4B11C02) + 39357953) ^ v208;
  unsigned int v160 = v159 ^ ((BYTE2(v53) ^ 0xD0) + 1291556716 - ((2 * (WORD1(v53) ^ 0xE3D0)) & 0xD8)) ^ *(_DWORD *)&v125[4 * (BYTE2(v53) ^ 0x8C)];
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (HIBYTE(v158) ^ 0xB8)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  LODWORD(v64) = ((v117 ^ BYTE4(v208) ^ v115) ^ 0x85)
               - 472037860
               + ((2 * ((v117 ^ BYTE4(v208) ^ v115) ^ 0x85) + 254) & 0x338 ^ 0xEFC2FBFF);
  LODWORD(v117) = *(_DWORD *)&v126[4 * (v53 ^ 0x1E)] ^ *(_DWORD *)&v125[4 * (BYTE2(v72) ^ 0x54)] ^ ((BYTE2(v72) ^ 8) + 1291556716 - 2 * ((WORD1(v72) ^ 0x6108) & 0x6E ^ WORD1(v72) & 2)) ^ (v46 >> 1) ^ ((v53 ^ 0x73) + v144 - ((2 * (v53 ^ 0x73) + 306021630) & 0x103D0738));
  unsigned int v161 = *(_DWORD *)&v128[4 * (BYTE1(v53) ^ 0xA0)] ^ HIDWORD(v206) ^ (v113 + 127010640 - ((2 * v113) & 0xF240EA0));
  LODWORD(v113) = (v117 + 127010640 - ((2 * v117) & 0xF240EA0)) ^ *(_DWORD *)&v128[4 * (BYTE1(v56) ^ 0xBD)];
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (BYTE3(v53) ^ 0xE3)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  LODWORD(v53) = *(_DWORD *)&v126[4 * (v56 ^ 0xB4)] ^ *(_DWORD *)&v128[4 * (BYTE1(v72) ^ 0x8F)] ^ ((v56 ^ 0xD9) + v144 - ((2 * (v56 ^ 0xD9) + 306021630) & 0x103D0738)) ^ v73 ^ (v46 >> 1);
  int v162 = *(_DWORD *)&v126[4 * (v72 ^ 0xE8)];
  LODWORD(v72) = (v53 - ((2 * v53) & 0xC65E6436) + 1664037403) ^ HIDWORD(v205);
  LODWORD(v73) = *(_DWORD *)&v128[4 * (BYTE1(v158) ^ 0x2D)] ^ v95 ^ v64 ^ v162 ^ (v160
                                                                                + 127010640
                                                                                - ((2 * v160) & 0xF240EA0));
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (BYTE3(v72) ^ 0x5C)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  LODWORD(v56) = (v113 - 1880330950 - ((2 * v113) & 0x1FD8DA74)) ^ v207;
  LODWORD(v113) = ((BYTE2(v73) ^ 0x66) + 1291556716 - ((2 * (WORD1(v73) ^ 0xAE66)) & 0xD8)) ^ *(_DWORD *)&v125[4 * (BYTE2(v73) ^ 0x3A)];
  LODWORD(v53) = ((v46 >> 1) + 1291556716 - ((2 * (v46 >> 1)) & 0x99F72ED8)) ^ *(_DWORD *)&v125[4 * (BYTE2(v56) ^ 0x40)];
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (BYTE3(v56) ^ 0xEF)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  int v163 = (v46 >> 1) ^ *(_DWORD *)&v126[4 * (v72 ^ 0x74)] ^ ((v72 ^ 0x19)
                                                                           - 472037860
                                                                           + ((2 * (v72 ^ 0x19) + 254) & 0x338 ^ 0xEFC2FBFF));
  LODWORD(v121) = v113 + 127010640 - ((2 * v113) & 0xF240EA0);
  LODWORD(v113) = v163 + 127010640 - ((2 * v163) & 0xF240EA0);
  int v164 = ((v161 ^ 0x4A) + v144 - ((2 * (v161 ^ 0x4A) + 306021630) & 0x103D0738)) ^ *(_DWORD *)&v126[4 * (v161 ^ 0x27)];
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (BYTE3(v73) ^ 0xAE)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  int v165 = (v46 >> 1) ^ *(_DWORD *)&v125[4 * (BYTE2(v72) ^ 0x65)] ^ (v164 + 1291556716 - ((2 * v164) & 0x99F72ED8));
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (HIBYTE(v161) ^ 0xDC)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  unsigned int v166 = *(_DWORD *)&v128[4 * (BYTE1(v73) ^ 0x7C)] ^ v205 ^ ((BYTE2(v161) ^ 0xE)
                                                           + 1291556716
                                                           - 2 * ((HIWORD(v161) ^ 0xDC0E) & 0x6D ^ HIWORD(v161) & 1)) ^ *(_DWORD *)&v125[4 * (BYTE2(v161) ^ 0x52)] ^ v113;
  unsigned int v167 = *(_DWORD *)&v128[4 * (BYTE1(v72) ^ 0xF9)] ^ HIDWORD(v204) ^ *(_DWORD *)&v126[4 * (v56 ^ 0x4D)] ^ (v46 >> 1) ^ ((v56 ^ 0x20) - 472037860 + ((2 * (v56 ^ 0x20) + 254) & 0x338 ^ 0xEFC2FBFF)) ^ v121;
  unsigned int v168 = (v53 + 127010640 - ((2 * v53) & 0xF240EA0)) ^ HIDWORD(v203) ^ *(_DWORD *)&v128[4 * (BYTE1(v161) ^ 0x65)] ^ *(_DWORD *)&v126[4 * (v73 ^ 0xDE)] ^ ((v73 ^ 0xB3) - 472037860 + ((2 * (v73 ^ 0xB3) + 254) & 0x338 ^ 0xEFC2FBFF));
  LODWORD(v73) = *(_DWORD *)&v128[4 * (BYTE1(v56) ^ 0xA4)] ^ v204 ^ (v165 + 127010640 - ((2 * v165) & 0xF240EA0));
  int v169 = (v73 ^ BYTE2(v72));
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (HIBYTE(v168) ^ 0x6C)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  LODWORD(v113) = v46 >> 1;
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (HIBYTE(v166) ^ 0xF7)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  LODWORD(v4_Block_object_dispose(va, 8) = v46 >> 1;
  int v170 = ((BYTE2(v168) ^ 0xC8) + 1291556716 - 2 * ((BYTE2(v168) ^ 0xC8) & 0x7C ^ HIWORD(v168) & 0x10)) ^ *(_DWORD *)&v125[4 * (BYTE2(v168) ^ 0x94)];
  LODWORD(v121) = v170 + 127010640 - ((2 * v170) & 0xF240EA0);
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (BYTE3(v73) ^ 0xE7)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  LODWORD(v72) = v46 >> 1;
  LODWORD(v113) = v113 ^ *(_DWORD *)&v126[4 * (v169 ^ 0x72)] ^ *(_DWORD *)&v125[4 * (BYTE2(v166) ^ 0xB5)] ^ ((BYTE2(v166) ^ 0xE9) + 1291556716 - ((2 * (HIWORD(v166) ^ 0xF7E9)) & 0xD8)) ^ ((v169 ^ 0x1F) - 472037860 + ((2 * (v169 ^ 0x1F) + 254) & 0x338 ^ 0xEFC2FBFF));
  LODWORD(v113) = (v113 + 127010640 - ((2 * v113) & 0xF240EA0)) ^ *(_DWORD *)&v128[4 * (BYTE1(v167) ^ 0xEC)];
  int v171 = v48 ^ *(_DWORD *)&v125[4 * (BYTE2(v167) ^ 0xA7)] ^ *(_DWORD *)&v126[4
                                                                           * ((v168 ^ BYTE2(v56)) ^ 0x32)] ^ (((v168 ^ BYTE2(v56)) ^ 0x5F) - 472037860 + ((2 * ((v168 ^ BYTE2(v56)) ^ 0x5F) + 254) & 0x338 ^ 0xEFC2FBFF)) ^ ((BYTE2(v167) ^ 0xFB) + 1291556716 - ((2 * (HIWORD(v167) ^ 0x57FB)) & 0xD8));
  HIDWORD(v46) = *(_DWORD *)&v124[4 * (HIBYTE(v167) ^ 0x57)];
  LODWORD(v46) = HIDWORD(v46) ^ 0xFB8F2B3A;
  int v172 = (v171 + 127010640 - ((2 * v171) & 0xF240EA0)) ^ *(_DWORD *)&v128[4 * (BYTE1(v73) ^ 0x6D)];
  int v173 = ((BYTE2(v73) ^ 0x31) + 1291556716 - ((2 * (WORD1(v73) ^ 0xE731)) & 0xD8)) ^ *(_DWORD *)&v126[4 * (v166 ^ 0xC5)] ^ ((v166 ^ 0xA8) - 472037860 + ((2 * (v166 ^ 0xA8) + 254) & 0x338 ^ 0xEFC2FBFF)) ^ *(_DWORD *)&v125[4 * (BYTE2(v73) ^ 0x6D)] ^ (v46 >> 1);
  unsigned int v174 = v196 ^ *(_DWORD *)&v128[4 * (BYTE1(v168) ^ 0x61)] ^ (v173 + 127010640 - ((2 * v173) & 0xF240EA0));
  unsigned int v175 = v174 ^ 0xADE748E2;
  unsigned int v176 = (v172 - 378705932 - ((2 * v172) & 0xD2DACFE8)) ^ v199;
  LODWORD(v53) = (v113 - 1007797737 - ((2 * v113) & 0x87DC742E)) ^ v203;
  unsigned int v177 = *(_DWORD *)&v128[4 * (BYTE1(v166) ^ 0x2D)] ^ HIDWORD(a18) ^ v72 ^ *(_DWORD *)&v126[4
                                                                                          * (v167 ^ 0x42)] ^ ((v167 ^ 0x2F) - 472037860 + ((2 * (v167 ^ 0x2F) + 254) & 0x338 ^ 0xEFC2FBFF)) ^ v121;
  LODWORD(v115) = HIBYTE(v174) ^ 0x89;
  unsigned int v178 = *(_DWORD *)(v43 - 128);
  CFDataRef v179 = (char *)*(&off_10025B940 + (int)(v178 - 1808)) - 12;
  uint64_t v180 = (uint64_t)*(&off_10025B940 + SHIDWORD(v195));
  LODWORD(v117) = *(_DWORD *)&v179[4 * (v176 ^ 0xA2)];
  __int128 v181 = (char *)*(&off_10025B940 + (int)(v178 - 1771)) - 8;
  LODWORD(v64) = *(_DWORD *)&v179[4 * (v174 ^ 0xC8)];
  LODWORD(v113) = (*(_DWORD *)&v181[4 * (BYTE2(v176) ^ 0x9E)] - 1586562412) ^ (*(_DWORD *)&v179[4
                                                                                              * (v177 ^ 0xC9)]
                                                                             + 2145680834);
  int v182 = v64 - ((2 * v64 - 3605628) & 0xA97C6EEC);
  uint64_t v183 = *(unsigned int *)&v179[4 * (v53 ^ 0xB9)];
  uint64_t v184 = *(unsigned int *)(v180 + 4LL * (HIBYTE(v176) ^ 0xE7));
  LODWORD(v179) = *(_DWORD *)(v180 + 4LL * (HIBYTE(v177) ^ 0xB8));
  LODWORD(v115) = (*(_DWORD *)&v181[4 * (BYTE2(v177) ^ 0x38)] - 1586562412) ^ (*(_DWORD *)(v180
  int v185 = (char *)*(&off_10025B940 + (int)(v178 - 1783)) - 12;
  uint64_t v186 = *(unsigned int *)&v185[4 * (BYTE1(v175) ^ 0x29)];
  LODWORD(v113) = (v113 + 1421752182 - ((2 * v113) & 0xA97C6EEC)) ^ v186 ^ (*(_DWORD *)(v180 + 4LL * (BYTE3(v53) ^ 0x65))
                                                                          - 96190935);
  LODWORD(v12_Block_object_dispose(va, 8) = *(_DWORD *)&v185[4 * (BYTE1(v177) ^ 0xE9)];
  LODWORD(v180) = *(_DWORD *)&v185[4 * (BYTE1(v53) ^ 0x74)];
  LODWORD(v126) = *(_DWORD *)&v181[4 * (BYTE2(v175) ^ 0x6B)];
  LODWORD(v53) = *(_DWORD *)&v181[4 * (BYTE2(v53) ^ 0x1D)];
  unsigned int v187 = v180 ^ HIDWORD(v198) ^ (v115 + 1421752182 - ((2 * v115) & 0xA97C6EEC));
  uint64_t v188 = HIDWORD(v198) ^ HIDWORD(a18) ^ v203 ^ ((_DWORD)v113
                                                            - 1007797737
                                                            - ((2 * (_DWORD)v113) & 0x87DC742E));
  CFDataRef v189 = (char *)*(&off_10025B940 + (int)(v178 - 1643)) - 12;
  LODWORD(v113) = *(_DWORD *)&v185[4 * (BYTE1(v176) ^ 0xA0)] ^ HIDWORD(v198) ^ HIDWORD(a18) ^ (v182 - 727534280) ^ ((_DWORD)v179 - 96190935);
  a2[*(void *)(v43 - 256)] = v189[BYTE1(v187) ^ 0x99LL] ^ 0xBB;
  id v190 = (char *)*(&off_10025B940 + (int)(v178 - 1854)) - 4;
  a2[*(void *)(v43 - 248)] = (v190[BYTE2(v188) ^ 0xADLL] - 47) ^ 0xC5;
  v191 = (char *)*(&off_10025B940 + SHIDWORD(a8)) - 12;
  LODWORD(v113) = v113 ^ (v53 - 1586562412);
  a2[*(void *)(v43 - 208)] = v191[(v180 ^ BYTE4(v198) ^ (v115 + 118 - ((2 * v115) & 0xEC))) ^ 0xFCLL] ^ 0x31;
  a2[*(void *)(v43 - 224)] = (v190[BYTE2(v113) ^ 0x8CLL] - 47) ^ 0x47;
  v192 = (char *)*(&off_10025B940 + (int)(v178 - 1702)) - 12;
  a2[*(void *)(v43 - 216)] = (v192[HIBYTE(v187) ^ 0xDELL] - 29) ^ 0x1B;
  a2[*(void *)(v43 - 240)] = ((v190[BYTE2(v187) ^ 0x15LL] + ((v190[BYTE2(v187) ^ 0x15LL] - 47) ^ 0xDA) - 46) ^ 0xFE)
                             + v190[BYTE2(v187) ^ 0x15LL]
                             - 47;
  LODWORD(v53) = v195 ^ v128 ^ ((_DWORD)v126 - 1586562412) ^ (v183 + 2145680834) ^ (v184
                                                                                                - ((2 * v184 - 192381870) & 0xA97C6EEC)
                                                                                                + 1325561247);
  a2[*(void *)(v43 - 232)] = v191[(v195 ^ v128 ^ ((_BYTE)v126 - 108) ^ (v183 - 62) ^ (v184 - ((2 * v184 + 82) & 0xEC) - 97)) ^ 5LL] ^ 0xC3;
  a2[*(void *)(v43 - 168)] = (v192[BYTE3(v188) ^ 0x4ELL] - 29) ^ 0xE6;
  a2[*(void *)(v43 - 160)] = (v192[BYTE3(v113) ^ 0x9CLL] - 29) ^ 0xB8;
  LOBYTE(v115) = (v192[BYTE3(v53) ^ 0x67LL] - 29) ^ 0x91;
  uint64_t v193 = *(void *)(v43 - 184);
  a2[v193] = v115;
  a2[*(void *)(v43 - 176)] = v191[v113 ^ 0xF2LL] ^ 0xC9;
  a2[*(void *)(v43 - 200)] = v189[BYTE1(v113) ^ 0x1ELL] ^ 0x18;
  a2[*(void *)(v43 - 152)] = v189[((unsigned __int16)(v195 ^ (unsigned __int16)v128 ^ ((_WORD)v126 - 1388) ^ (v183 + 32194) ^ (v184 - ((2 * v184 + 31826) & 0x6EEC) + 30111)) >> 8) ^ 0x33LL] ^ 1;
  a2[*(void *)(v43 - 192)] = v189[BYTE1(v188) ^ 0xBCLL] ^ 0xCF;
  a2[*(void *)(v43 - 144)] = v191[v188 ^ 0x9FLL] ^ 0x31;
  a2[*(void *)(v43 - 136)] = (v190[BYTE2(v53) ^ 0xDLL] - 47) ^ 0x8E;
  return (*(uint64_t (**)(char *, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(a39 + 8LL * (int)((44 * ((((_DWORD)v193 - 2055628135 - 2 * (((_DWORD)v193 + 16) & 0x5799A8B)) ^ 0x85799A89) < HIDWORD(v199))) ^ (v178 - 571))))( v189,  49LL,  v178,  201LL,  v186,  v188,  v183,  v184,  a3,  a4,  a5,  a6,  a2,  a8,  v195,  v196,  v197,  v198,  v199,  v200,  v105,  v201,  v202,  a18,  v203,  v204,  v205,  v206,  v207,  v208,  v209,  v210,  v211,  v212,  v213,  v214,  v215,  v216);
}

void sub_10007B138()
{
}

uint64_t sub_10007B16C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, int a45, int a46)
{
  unsigned int v47 = a11 - (a13 & 0xD6DA76BC) + (((208 * (a46 ^ 0x56F) - 1339) | 0x48A) ^ 0x7C69EB3C);
  return (*(uint64_t (**)(void))(v46
                              + 8LL
                              * ((251
                                * (((2 * v47) & 0xE4FFEFEC ^ 0xC4DA66AC) + (v47 ^ 0x9912CCA8) - 537337878 != 1383651296)) ^ a46)))();
}

uint64_t sub_10007B238(uint64_t a1, int a2, int a3)
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((((a3 - 677228365) & 0x285DAFFD ^ 0x9F6)
}

uint64_t sub_10007B2B0(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v6
                              + 8LL
                              * ((((((a3 - 340) ^ 0x21B) - 185) ^ 0x68A) * ((a1 + a6 - 16) > 0xFFFFFFEF)) ^ (a3 - 340))))();
}

uint64_t sub_10007B2EC@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, unint64_t a4@<X8>)
{
  uint64_t v9 = a2 + v7 + ((495 * (a3 ^ 0x695)) ^ (a1 + 974));
  unint64_t v10 = a4 + ((36 * (a3 ^ 0x6A3u)) ^ 0x751LL) + v9;
  uint64_t v11 = ((_BYTE)a2 + (_BYTE)v7 + ((-17 * (a3 ^ 0x95)) ^ (a1 - 50))) & 0xF;
  unint64_t v12 = v5 + v11 - v9;
  unint64_t v13 = v11 + v5 + 1;
  unint64_t v14 = v11 + v6 - v9 + 2;
  unint64_t v15 = v11 + v6 + 3;
  uint64_t v16 = v11 + v4;
  unint64_t v17 = v16 - v9 + 4;
  unint64_t v18 = v16 + 5;
  BOOL v20 = v13 > a4 && v12 < v10;
  if (v15 > a4 && v14 < v10) {
    BOOL v20 = 1;
  }
  int v23 = v18 > a4 && v17 < v10 || v20;
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * (a3 | (8 * v23))) - 12LL))();
}

uint64_t sub_10007B398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(uint64_t, uint64_t, void))(*(void *)(v7
                                                                       + 8LL
                                                                       * (((((a6 - 511) ^ 0x607) - 1946) * (v6 > 0xF)) ^ a6))
                                                           - 12LL))( a1,  a2,  0LL);
}

uint64_t sub_10007B3C8@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W3>, uint64_t a4@<X8>)
{
  v16.val[1].i64[0] = ((_BYTE)v8 + 13) & 0xF;
  v16.val[1].i64[1] = ((_BYTE)v8 + 12) & 0xF;
  v16.val[2].i64[0] = ((_BYTE)v8 + 11) & 0xF;
  v16.val[2].i64[1] = ((_BYTE)v8 + 10) & 0xF;
  v16.val[3].i64[0] = ((_BYTE)v8 + 9) & 0xF;
  v16.val[3].i64[1] = ((_BYTE)v8 + 8) & 0xF;
  unsigned int v11 = a2 + v9 + a1;
  v12.i64[0] = 0x7777777777777777LL;
  v12.i64[1] = 0x7777777777777777LL;
  v16.val[0].i64[0] = v11 & 0xF;
  v16.val[0].i64[1] = ((_BYTE)v8 + 14) & 0xF;
  v13.i64[0] = vqtbl4q_s8(v16, (int8x16_t)xmmword_1002013F0).u64[0];
  v17.val[0].i64[1] = ((_BYTE)v8 + 6) & 0xF;
  v17.val[1].i64[1] = ((_BYTE)v8 + 4) & 0xF;
  v17.val[2].i64[1] = (v8 + 2) & 0xF;
  v17.val[3].i64[1] = v8 & 0xF;
  v17.val[0].i64[0] = ((_BYTE)v8 + 7) & 0xF;
  v17.val[1].i64[0] = ((_BYTE)v8 + 5) & 0xF;
  v17.val[2].i64[0] = (v8 + 3) & 0xF;
  v17.val[3].i64[0] = ((_BYTE)v8 + 1) & 0xF;
  v13.i64[1] = vqtbl4q_s8(v17, (int8x16_t)xmmword_1002013F0).u64[0];
  int8x16_t v14 = vrev64q_s8(vmulq_s8(v13, v12));
  *(int8x16_t *)(a4 - 15 + v11) = veorq_s8( veorq_s8( veorq_s8( *(int8x16_t *)(v6 + v16.val[0].i64[0] - 15),  *(int8x16_t *)(a4 - 15 + v11)),  veorq_s8( *(int8x16_t *)(v16.val[0].i64[0] + v7 - 13),  *(int8x16_t *)(v16.val[0].i64[0] + v4 - 11))),  vextq_s8(v14, v14, 8uLL));
  return ((uint64_t (*)(void))(*(void *)(v10 + 8LL * ((((v5 & 0xFFFFFFF0) == 16) * ((a3 - 316) ^ 0x729)) ^ a3)) - 12LL))();
}

void sub_10007B514()
{
}

uint64_t sub_10007B520(uint64_t a1, uint64_t a2, int a3)
{
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * ((494 * ((((v4 + 1) ^ (v3 == a3)) & 1) == 0)) ^ v4)) - 12LL))();
}

uint64_t sub_10007B550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v6
                                                                                + 8LL
                                                                                * ((49
                                                                                  * ((v3 & 8) != ((v5 + 1709) ^ 0x750))) ^ (v5 + 366)))
                                                                    - 8LL))( a1,  a2,  a3,  (v4 - a3));
}

uint64_t sub_10007B590@<X0>( int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W6>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42)
{
  *(_DWORD *)(v49 - 120) = v50;
  unsigned int v51 = (a4 + 226322471) & 0xF28297CF;
  *(_DWORD *)(v49 - 12_Block_object_dispose(va, 8) = v43;
  int v52 = (v51 - 2007) & v43;
  int v53 = -a3;
  *(_DWORD *)(v49 - 136) = v52;
  char v54 = v47 + a2 + v48;
  uint64_t v55 = (v53 + a2 + v48 + a1);
  v57.val[0].i64[0] = ((_BYTE)v53 + (_BYTE)a2 + (_BYTE)v48 + (_BYTE)a1) & 0xF;
  v57.val[0].i64[1] = ((_BYTE)v53 + v54 + 14) & 0xF;
  v57.val[1].i64[0] = ((_BYTE)v53 + v46 + (((v51 + 65) | 1) ^ 0xC)) & 0xF;
  v57.val[1].i64[1] = ((_BYTE)v53 + v54 + 12) & 0xF;
  v57.val[2].i64[0] = ((_BYTE)v53 + v54 + 11) & 0xF;
  v57.val[2].i64[1] = ((_BYTE)v53 + v54 + 10) & 0xF;
  v57.val[3].i64[0] = ((_BYTE)v53 + v54 + 9) & 0xF;
  v57.val[3].i64[1] = ((_BYTE)v53 + v54 + 8) & 0xF;
  *(int8x8_t *)(a5 - 7 + v55) = veor_s8( veor_s8( veor_s8(*(int8x8_t *)(v44 + (v55 & 0xF) - 7), *(int8x8_t *)(a5 - 7 + v55)),  veor_s8(*(int8x8_t *)((v55 & 0xF) + v45 - 5), *(int8x8_t *)((v55 & 0xF) + v42 - 3))),  vrev64_s8( vmul_s8( (int8x8_t)*(_OWORD *)&vqtbl4q_s8(v57, (int8x16_t)xmmword_100201400),  (int8x8_t)0x7777777777777777LL)));
  return ((uint64_t (*)(__n128))(*(void *)(a42 + 8LL * (int)((23 * (v53 != 8 - v52)) ^ v51)) - 12LL))((__n128)xmmword_100201400);
}

void sub_10007B6DC()
{
}

uint64_t sub_10007B704()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((((v0 - 1900014108) & 0x713FEF5A ^ 0x7D6)
                                          * (*(_DWORD *)(v2 - 128) == *(_DWORD *)(v2 - 136))) | v0))
                            - ((v0 + 221840872) & 0xF2C6FF56 ^ 0x758LL)))();
}

uint64_t sub_10007B76C@<X0>(int a1@<W3>, int a2@<W4>, uint64_t a3@<X8>)
{
  uint64_t v8 = (a1 - 1383651297);
  *(_BYTE *)(a3 + v8) ^= *(_BYTE *)(v5 + (v8 & 0xF)) ^ *(_BYTE *)((v8 & 0xF) + v6 + 2) ^ *(_BYTE *)((v8 & 0xF) + v4 + 4) ^ (119 * (v8 & 0xF));
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * ((a1 - 1 == v3) | (a2 - 1710))) - 12LL))();
}

void sub_10007B7D0()
{
  if (v0 == 2146216629) {
    int v1 = 528123064;
  }
  else {
    int v1 = -528097440;
  }
  *(_DWORD *)(v2 + 32) = v1;
}

uint64_t sub_10007B834(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))((char *)*(&off_100257500 + ((1906 * (*(_DWORD *)(a2 + 4) == 1007577603)) ^ 0x28Fu)) - 12))();
}

uint64_t sub_10007B874(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = (**(unsigned __int8 **)(a2 + 8) ^ 0x3DBFFBAE)
                       - 815284782
                       + ((2 * **(unsigned __int8 **)(a2 + 8)) & 0x15C);
  return 0LL;
}

uint64_t sub_10007B8AC()
{
  return 4294925278LL;
}

void sub_10007B8B4(_DWORD *a1)
{
  unsigned int v1 = *a1 + 1178560073 * ((((2 * (_DWORD)a1) | 0xD228BF70) - (_DWORD)a1 - 1762942904) ^ 0x8E217DD0);
  __asm { BR              X11 }

uint64_t sub_10007B96C@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
}

uint64_t sub_10007B9BC()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (((*v1 == 0) * (v0 - 1291)) ^ v0)) - 8LL))();
}

uint64_t sub_10007B9E0()
{
  int v5 = v0 ^ 0x357;
  uint64_t v6 = v3(*v4);
  return ((uint64_t (*)(uint64_t))(*(void *)(v2 + 8LL * (((*v1 == 0) * (v5 - 1291)) ^ v5)) - 8LL))(v6);
}

uint64_t sub_10007BA14()
{
  uint64_t result = v2(*v3);
  *unsigned int v1 = 0;
  *(_DWORD *)uint64_t v0 = 0;
  *(void *)(v0 + 344) = 0LL;
  *(void *)(v0 + 352) = 0LL;
  *(_DWORD *)(v0 + 360) = 1520508589;
  *(_DWORD *)(v0 + 56) = 1226533025;
  return result;
}

void Ejwmn62s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a4) {
    BOOL v5 = a5 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = v5;
  __asm { BR              X8 }

uint64_t sub_10007BAD0( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unsigned int a14)
{
  *a4 = 0LL;
  *a5 = 0;
  a14 = 1178560073 * ((&a13 & 0xFB2A6C05 | ~(&a13 | 0xFB2A6C05)) ^ 0xE3E0B192) - 1501685844;
  uint64_t v16 = sub_1000A80C0(&a13);
  return ((uint64_t (*)(uint64_t))(*(void *)(v14 + 8LL * ((1915 * (a13 == v15)) ^ 0x3D0u)) - 12LL))(v16);
}

uint64_t sub_10007BB60( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  a13 = &STACK[0x5E5ED88ABFC56917];
  a14 = (831981571 * (&a13 ^ 0x99A1D024)) ^ 0x5D;
  sub_100067AB4((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16
                                                                                          + 8LL
                                                                                          * ((1488
                                                                                            * (a15 == (v15 ^ 0x34C1925F) - 356977879)) ^ v15))
                                                                              - 12LL))( v17,  v18,  v19,  v20,  v21);
}

uint64_t sub_10007BBF0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16)
{
  unsigned int v21 = 1224239923 * ((2 * (&a13 & 0x7345948) - &a13 + 2026612400) ^ 0x8A785B67);
  LODWORD(a15) = v21 ^ 0x38B;
  a14 = a11;
  LODWORD(a13) = v18 - v21 - ((2 * v18) & 0xBA057A34) + 1560460570;
  sub_10007D800((uint64_t)&a13);
  unsigned int v22 = 69008221 * (&a13 ^ 0xD3A2520A);
  a13 = v16;
  a16 = v22 ^ ((v17 ^ 0xDFFC57B1) + 1983901696 + ((2 * v17) & 0xBFF8AF62));
  HIDWORD(a14) = v22 + 993;
  a15 = a11;
  uint64_t v23 = ((uint64_t (*)(uint64_t *))(*(void *)(v20 + 1456) - 4LL))(&a13);
  return ((uint64_t (*)(uint64_t))(*(void *)(v19 + 8LL * ((11 * ((_DWORD)a14 == 528123064)) ^ 0x245u)) - 12LL))(v23);
}

uint64_t sub_10007BD3C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, unsigned int a15, uint64_t a16, unint64_t *a17, int a18)
{
  unsigned int v21 = 1224239923 * ((2 * (&a13 & 0x619B6640) - &a13 - 1637574216) ^ 0x6CD7646F);
  a15 = v21 ^ 0x8EA035B3;
  a16 = a11;
  a17 = &STACK[0x2940FF9A650624D0];
  a13 = v21 ^ 0x44550099;
  a14 = (v19 + 368399596) ^ v21;
  uint64_t v22 = sub_1000A817C((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(void *)(v20
                                                      + 8LL
                                                      * ((1975 * (a18 == (((v19 ^ 0x340) + 715) ^ (v18 + 688)))) ^ v19))
                                          - 12LL))(v22);
}

uint64_t sub_10007BE08( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t *a10, uint64_t a11, uint64_t a12, unint64_t *a13, unint64_t *a14, unint64_t *a15, unint64_t *a16)
{
  a15 = &STACK[0x5F366804CF4E5665];
  a16 = a10;
  LODWORD(a13) = v16
               - 2078219279
  a14 = &STACK[0x60E62A17C8DAFC82];
  sub_1000A7D9C((uint64_t)&a13);
  a13 = &STACK[0x5F366804CF4E5669];
  a14 = a10;
  LODWORD(a15) = v16
  ((void (*)(unint64_t **))(*(void *)(v18 + 8LL * (int)(v16 - 26)) - 4LL))(&a13);
  a13 = a10;
  LODWORD(a14) = v16
  uint64_t v19 = sub_10008DBEC((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(void *)(v17
                                                      + 8LL
                                                      * (((HIDWORD(a14) == 528123064) * ((83 * (v16 ^ 0x102)) ^ 0x6C0)) ^ v16))
                                          - 8LL))(v19);
}

uint64_t sub_10007BF84( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
}

uint64_t sub_10007BFBC@<X0>(int a1@<W8>, int a2)
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
}

uint64_t sub_10007C00C()
{
  BOOL v5 = (*(uint64_t (**)(void))(v3 + 8LL * (v1 ^ 0x1E7)))(v0 ^ (v4 + 588) ^ ((v1 + 539) | 0x9Cu)) != 0;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((590 * v5) ^ v1)) - 8LL))();
}

uint64_t sub_10007C064( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  int v12 = (a9 ^ v11) - (((a9 ^ v11) << (v9 + 69)) & 0x5A319AB8) - 1390883492;
  return ((uint64_t (*)(void))(*(void *)(v10
                                        + 8LL
                                        * ((1968
                                          * (((2 * v12) & 0xFFFDBCBA ^ (v9 + 1513198844))
                                           + (v12 ^ 0x52E61301)
                                           + 2145613247 != 2145539100)) ^ v9))
                            - 8LL))();
}

uint64_t sub_10007C0F4()
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * ((806 * (v1 + v0 + 74147 >= ((v2 + 885099979) ^ (v2 + 534) ^ 0x34C1945Du))) ^ (v2 + 534)))
                            - 4LL))();
}

uint64_t sub_10007C15C(uint64_t a1)
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((((v1 + (v3 ^ (v4 + 470)) + 1301) ^ (v3 + 574))
}

uint64_t sub_10007C198(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return ((uint64_t (*)(void))(*(void *)(v6
                                        + 8LL
                                        * (((v4 + ((79 * (a4 ^ 0x7FA) + 545328994) | 0x1440818F) + 3408) * (v5 > 0x1F)) ^ a4))
                            - 8LL))();
}

uint64_t sub_10007C1E8(uint64_t a1)
{
  unsigned int v10 = v5 + v4 + v6;
  v11.i64[0] = 0xAEAEAEAEAEAEAEAELL;
  v11.i64[1] = 0xAEAEAEAEAEAEAEAELL;
  uint64_t v12 = v2 + v10;
  uint64_t v13 = a1 + v10;
  int8x16_t v14 = veorq_s8(*(int8x16_t *)(v12 - 31), v11);
  *(int8x16_t *)(v13 - 15) = veorq_s8(*(int8x16_t *)(v12 - 15), v11);
  *(int8x16_t *)(v13 - 31) = v14;
  return (*(uint64_t (**)(void))(v9 + 8LL * ((((v3 & 0xFFFFFFE0) == 32) * ((v7 - v8 + 558) ^ 0x1A4)) ^ (v7 + v1))))();
}

void sub_10007C24C()
{
}

uint64_t sub_10007C258(uint64_t a1)
{
  unsigned int v6 = (v1 + 83798362) & 0xFB0157E5;
  void *v4 = a1;
  *int v3 = v2;
  unsigned int v10 = (v6 - 437) ^ (69008221 * ((2 * (&v10 & 0x64DF65F8) - &v10 + 455121410) ^ 0xC882C808));
  uint64_t v11 = v8;
  v5(&v10);
  unsigned int v10 = ((v6 ^ 0x195) - 832) ^ (69008221
                              * (((&v10 | 0xD42F85AB) - (&v10 & 0xD42F85AB)) ^ 0x78DD7A1));
  uint64_t v11 = v9;
  v5(&v10);
  return 0LL;
}

void sub_10007C538(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) + 944348131 * ((((2 * a1) | 0x23956760) - a1 + 1848986704) ^ 0x32D317FE);
  int v2 = *(_DWORD *)(*(void *)a1 - 0x2A461383296CA240LL);
  uint64_t v5 = *(void *)a1;
  unsigned int v4 = v1 - 1224239923 * (((v3 | 0x11165558) - (v3 & 0x11165558)) ^ 0xE3A5A88F) - 380;
  sub_1000627C8((uint64_t)v3);
  __asm { BR              X9 }

uint64_t sub_10007C668@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8LL * ((v1 - 1314) ^ (57 * (((v3 - v2) & 0x1F) == 0x15)))))();
}

uint64_t sub_10007C6E0@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1
                                        + 8LL
                                        * (((((v3 - 685) ^ 0xA59) + v3 - 459)
                                          * ((v4 ^ 0x9709FFDE) + (v1 & 0x2E13FFBC) + v2 + 1760950516 < 0x7FFFFFFF)) ^ v3))
                            - 12LL))();
}

uint64_t sub_10007C754@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(*(void *)(v5 - 0x2A461383296CA23CLL) + 4LL * (v1 + 1845952333 + v4)) = *(_DWORD *)(*(void *)(v5 - 0x2A461383296CA23CLL)
                                                                                                 + 4LL
                                                                                                 * (v4 + v2));
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(a1
                                                               + 8LL
                                                               * ((589 * ((v4 - 1 + v2) > 0x7FFFFFFE)) ^ v3))
                                                   - ((v3 - 1139020900) & 0x43E41381)
                                                   + 885LL))( 1139020673LL,  2147483646LL);
}

void sub_10007C7D0()
{
}

uint64_t sub_10007C7D8@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1
                                        + 8LL
                                        * (int)(((((v3 ^ 0xFFFFAFDF)
                                                 + 1912199152
                                                 + (v1 & 0xFFFF5FBE)
                                                 - 1912179611
                                                 + ((v2 - 1509) | 0x283)) >> 31)
                                               * (((v2 - 1801) | 0x208) - 537)) ^ v2))
                            - 8LL))();
}

uint64_t sub_10007C86C@<X0>(int a1@<W4>, uint64_t a2@<X8>)
{
  *(_DWORD *)(*(void *)(v5 - 0x2A461383296CA23CLL) + 4LL * (v4 + v2)) = a1;
  return ((uint64_t (*)(void))(*(void *)(a2
                                        + 8LL
}

uint64_t sub_10007C8CC@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(*v5 + 4LL * (v1 + v4 - 1)) = v2;
  return ((uint64_t (*)(void))(*(void *)(a1
}

void sub_10007C908()
{
  BOOL v7 = *(_DWORD *)(*v5 + 4LL * (v0 + v2)) == v3;
  _DWORD *v6 = (v0 - v7 + ((v4 + 209) ^ (v2 - 845))) * v1 - 308515109 * (v0 - v7) + 1416852519;
}

uint64_t sub_10007CB40(uint64_t a1)
{
  int v1 = *(_DWORD *)(*(void *)(a1 + 8) - 0x2A461383296CA240LL);
  int v3 = v1 - 1362986814;
  if (v1 - 1362986814 < 0) {
    int v3 = 1362986814 - v1;
  }
  int v2 = (944348131 * ((-2 - ((a1 | 0x128ABCF6) + (~(_DWORD)a1 | 0xED754309))) ^ 0x4E6CE747)) ^ *(_DWORD *)(a1 + 16) ^ 0x5D1;
  return ((uint64_t (*)(void))(*(void *)((char *)*(&off_10025B940 + v2 + 47)
                                        + 8
                                        * ((188
                                          * (((v2 + 1455) ^ 0xFD9DFC4C)
                                           + (v2 ^ 0x5E7EB760 ^ v3)
                                           - 1545384194
                                           + ((2 * v3) & 0xBCFD6EF6) >= (v2 ^ 0x5D1u) + 2147482165)) ^ v2)
                                        - 4)
                            - 12LL))();
}

uint64_t sub_10007CC74(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5)
{
  BOOL v8 = *(_DWORD *)(*v6 + 4LL * a5) != v5;
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * ((v8 | (32 * v8)) ^ a4)) - 4LL))();
}

void sub_10007CC98()
{
}

_DWORD *sub_10007CCAC(_DWORD *result)
{
  *uint64_t result = 211458389;
  return result;
}

uint64_t sub_10007CCBC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * ((31 * ((a5 ^ v5) >> 31)) ^ (a4 + v7) & v8)) - 8LL))();
}

uint64_t sub_10007CCF8()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((31 * ((v1 >> v3) & 1)) ^ v0)) - 8LL))();
}

_DWORD *sub_10007CD1C@<X0>(_DWORD *result@<X0>, int a2@<W8>)
{
  *uint64_t result = ((v2 + 1187) | 0x80) - v3 + 32 * a2 + v4 - 1067857417;
  return result;
}

void sub_10007CD44(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) + 944348131 * ((2 * (a1 & 0x4CB3C068) - a1 - 1286848617) ^ 0x10559BD9);
  __asm { BR              X10 }

uint64_t sub_10007CE20@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, int a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  unsigned int v13 = 1178560073
      * (((&a4 | 0x93C5D81) - &a4 + (&a4 & 0xF6C3A278)) ^ 0xEE097FE9);
  a4 = &STACK[0x60E62A17C8DAFC6A];
  a5 = &STACK[0x5F366804CF4E5671];
  a9 = v11;
  a6 = v12 - v13 - 109;
  a7 = 1621553505 - v13;
  uint64_t v14 = (*(uint64_t (**)(unint64_t **))(a1 + 8LL * (int)(v12 & 0x842C8CB3)))(&a4);
  return ((uint64_t (*)(uint64_t))(*(void *)(v10
                                                      + 8LL
                                                      * (int)(((*(_DWORD *)(v11 - 0x2F801B1FA3259439LL) == v9)
                                                             * (v12 + 86)) ^ v12))
                                          - (v12 ^ 0x1F2LL)))(v14);
}

uint64_t sub_10007CF0C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  return ((uint64_t (*)(void))(*(void *)(v12
                                        + 8LL
                                        * (((a11 == (((v13 - 428) | 0x15E) ^ (v11 + 138)))
                                          * ((3 * (v13 ^ 0x2E6)) ^ 0x1D5)) ^ v13))
                            - 4LL))();
}

void sub_10007CF54(_DWORD *a1@<X8>)
{
  int v4 = v6[3] ^ 0xAE;
  int v5 = (((v1 - 80) ^ *v6) << 24) | ((v6[1] ^ 0xAE) << 16) | ((v6[2] ^ 0xAE) << 8) | v4;
  *(_DWORD *)(*(void *)v2 - 0x5F366804CF4E5665LL) = v5 + v3 - 2 * (v5 & (v3 + 4) ^ v4 & 4);
  *(_DWORD *)(v2 + 20) = *a1;
}

void sub_10007D010(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) ^ (831981571 * ((~(_DWORD)a1 & 0xE26CEAFC | a1 & 0x1D931503) ^ 0x7BCD3AD8));
  __asm { BR              X10 }

uint64_t sub_10007D0E8@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unsigned int a4, int a5, unint64_t *a6, int a7)
{
  unsigned int v10 = 3804331
      * (((&a3 | 0x4F6F6A9A) - &a3 + (&a3 & 0xB0909560)) ^ 0x31BA4F6C);
  a6 = &STACK[0x4205FFA8EF858547];
  a7 = (v7 - 218) ^ v10;
  a3 = v8;
  a4 = v10 ^ 0xCD4864E8;
  a5 = v10 ^ 0x7B3CEEBB;
  uint64_t v11 = ((uint64_t (*)(uint64_t *))(*(void *)(a1 + 8LL * (v7 - 348)) - 4LL))(&a3);
  return ((uint64_t (*)(uint64_t))(*(void *)(v9
                                                      + 8LL
                                                      * (((*(_DWORD *)(v8 - 0x2F801B1FA3259439LL) != 528123064)
                                                        * (((v7 - 404) | 0x1A4) - 487)) | v7))
                                          - 4LL))(v11);
}

void sub_10007D1CC(_DWORD *a1@<X8>)
{
  unint64_t v3 = 0x480243FFC08EA585LL * (*(void *)v1 ^ v2)
     - ((0x900487FF811D4B0ALL * (*(void *)v1 ^ v2) - 0x22E3EDFEE80FDE5ALL) & 0xFB1E154FCDF83D72LL)
     - 0x13E2EC578D0BD074LL;
  _BYTE *v4 = (HIBYTE(v3) ^ 0xFD) - ((2 * (HIBYTE(v3) ^ 0xFD)) & 0x5C) - 82;
  v4[1] = (BYTE6(v3) ^ 0x8F) - ((2 * (BYTE6(v3) ^ 0x8F)) & 0x5C) - 82;
  v4[2] = (BYTE5(v3) ^ 0xA) - 2 * ((BYTE5(v3) ^ 0xA) & 0x2F ^ BYTE5(v3) & 1) - 82;
  v4[3] = (BYTE4(v3) ^ 0xA7) - ((2 * (BYTE4(v3) ^ 0xA7)) & 0x5C) - 82;
  void v4[4] = (BYTE3(v3) ^ 0xE6) - ((2 * (BYTE3(v3) ^ 0xE6)) & 0x5C) - 82;
  v4[5] = (BYTE2(v3) ^ 0xFC) - ((2 * (BYTE2(v3) ^ 0xFC)) & 0x5C) - 82;
  v4[6] = (BYTE1(v3) ^ 0x1E) - ((2 * (BYTE1(v3) ^ 0x1E)) & 0x5C) - 82;
  v4[7] = v3 ^ 0x17;
  *(_DWORD *)(v1 + 12) = *a1;
}

void oGBEROq3()
{
  v0[1] = 1178560073 * ((v0 & 0x294D8B40 | ~(v0 | 0x294D8B40)) ^ 0x318756D7) - 1501685844;
  sub_1000A80C0(v0);
  __asm { BR              X8 }

uint64_t sub_10007D408( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  a13 = &STACK[0x5E5ED88ABFC56917];
  a14 = (831981571 * ((2 * (&a13 & 0x49672DD0) - &a13 - 1231498705) ^ 0x2F39020B)) ^ 0x5D;
  sub_100067AB4((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17
                                                                                          + 8LL
                                                                                          * ((180 * (a15 == v15)) ^ v16))
                                                                              - (v16
                                                                               + 1504986557)
                                                                              + 1504987150LL))( v18,  v19,  v20,  v21,  v22);
}

uint64_t sub_10007D4B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13, int a14, uint64_t a15, int a16)
{
  unsigned int v19 = 1224239923
      * ((((&a13 | 0x5C26CAC4) ^ 0xFFFFFFFE) - (~&a13 | 0xA3D9353B)) ^ 0x516AC8EC);
  a16 = v19 ^ 0x38B;
  a15 = a11;
  a13 = v16 - v19 - ((2 * v16) & 0xBA057A34) + 1560460570;
  sub_10007D800((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 + 8LL * ((904 * (a14 == v17)) ^ 0x4C7u))
                                                                                       - 8LL))( v20,  v21,  v22,  v23,  v24,  v25);
}

uint64_t sub_10007D58C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, unsigned int a15, uint64_t a16, unint64_t *a17, int a18)
{
  int v22 = v21 - 3;
  unsigned int v23 = ((&a13 & 0x94F48E05 | ~(&a13 | 0x94F48E05)) ^ 0x99B88C2D) * v20;
  a16 = a11;
  a17 = &STACK[0x2940FF9A650624D0];
  a15 = v23 ^ 0xA8F0FF44;
  a13 = v23 ^ 0x44550099;
  a14 = (v22 + 368398957) ^ v23;
  uint64_t v24 = sub_1000A817C((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(void *)(v19 + 8LL * ((a18 != v18) | (2 * (a18 != v18)) | v22))
                                          - ((v22 - 1144) | 0x211u)
                                          + 597LL))(v24);
}

uint64_t sub_10007D648()
{
  int v5 = (v4 - 1088) | 0x443;
  int v6 = 55 * (v5 ^ 0x4CC);
  unsigned int v14 = v5
  uint64_t v12 = &STACK[0x5F366804CF4E55D1];
  int v13 = v9;
  ((void (*)(unint64_t **))(*(void *)(v3 + 8LL * (v5 ^ 0x42C)) - 4LL))(&v12);
  LODWORD(v13) = v5 - 241568881 * (&v12 ^ 0xD6110442) - 624;
  uint64_t v12 = v9;
  sub_10008DBEC((uint64_t)&v12);
  if (HIDWORD(v13) == v1 + v6 - 605) {
    int v7 = v11;
  }
  else {
    int v7 = HIDWORD(v13);
  }
  int v13 = v9;
  v0(&v12);
  int v13 = v10;
  v0(&v12);
  return v7 ^ v1;
}

void sub_10007D800(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) ^ (1224239923 * ((((2 * a1) | 0x124C8F9E) - a1 - 153503695) ^ 0xFB95BA18));
  __asm { BR              X10 }

uint64_t sub_10007D8D4@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unsigned int a4, int a5, unint64_t *a6, int a7)
{
  unsigned int v10 = 3804331 * ((101839932 - (&a3 | 0x611F43C) + (&a3 | 0xF9EE0BC3)) ^ 0x873B2E35);
  a7 = (v7 - 638) ^ v10;
  a3 = v8;
  a4 = v10 ^ 0xCD4864E8;
  a5 = v10 ^ 0x7B3CEEB7;
  a6 = &STACK[0x4205FFA8EF858547];
  uint64_t v11 = ((uint64_t (*)(uint64_t *))(*(void *)(a1 + 8LL * (v7 ^ 0x300)) - 4LL))(&a3);
  return ((uint64_t (*)(uint64_t))(*(void *)(v9
                                                      + 8LL
                                                      * ((2993 * (*(_DWORD *)(v8 - 0x2F801B1FA3259439LL) == 528123064)) ^ v7))
                                          - 12LL))(v11);
}

void sub_10007D9B4(_DWORD *a1@<X8>)
{
  int v3 = *v1 + v2;
  _BYTE *v4 = (HIBYTE(v3) ^ 0x5D) - ((2 * (HIBYTE(v3) ^ 0x5D)) & 0x5C) - 82;
  v4[1] = (BYTE2(v3) ^ 2) - 2 * ((BYTE2(v3) ^ 2) & 0x2F ^ BYTE2(v3) & 1) - 82;
  v4[2] = (BYTE1(v3) ^ 0xBD) - ((2 * (BYTE1(v3) ^ 0xBD)) & 0x5C) - 82;
  v4[3] = v3 ^ 0xB4;
  v1[1] = *a1;
}

void sub_10007DA60(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24) ^ (3804331 * (((a1 | 0x16831F20) - (a1 | 0xE97CE0DF) - 377691937) ^ 0x68563AD6));
  __asm { BR              X10 }

uint64_t sub_10007DB40@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, unsigned int a5, int a6, unsigned int a7, uint64_t a8)
{
  int v14 = v8 ^ 2;
  uint64_t v15 = v8;
  unsigned int v16 = 235795823 * ((&a5 & 0x844DC5BB | ~(&a5 | 0x844DC5BB)) ^ 0xEF1F731D);
  a7 = (((v8 ^ 2) + 1178) ^ 0xF93F1270)
     - v16
     + (*(_DWORD *)(a1 + 12) ^ v13)
     + *(_DWORD *)(v9 - 0x2F801B1FA3259441LL)
     - 2067590827;
  a8 = v9;
  a5 = 1319917294 - v16;
  a6 = ((v8 ^ 2) + 1822) ^ v16;
  uint64_t v17 = (*(uint64_t (**)(unsigned int *))(a2 + 8LL * (int)(v8 ^ 0x111)))(&a5);
  return ((uint64_t (*)(uint64_t))(*(void *)(v12 + 8LL * ((1130 * (*v10 == v11)) ^ v14)) - v15 + 261))(v17);
}

uint64_t sub_10007DC30()
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL
                              * ((((((v2 - 1439) | 0x105) + 1587) ^ (v2 - 2120658348) & 0x7E66AF47)
                                * (*(void *)(v0 + 16) == 0x4205FFA8EF858547LL)) ^ v2)))();
}

uint64_t sub_10007DC94()
{
}

void sub_10007DCD4()
{
  *int v0 = -528097439;
}

void sub_10007DF4C(uint64_t a1)
{
  int v1 = 2078219279 * ((a1 & 0x58BF7D47 | ~(a1 | 0x58BF7D47)) ^ 0x7DBA14CC);
  if (*(void *)(a1 + 8) | *(void *)(a1 + 64)) {
    BOOL v2 = *(_DWORD *)(a1 + 24) + v1 == 839283906;
  }
  else {
    BOOL v2 = 1;
  }
  int v3 = v2;
  __asm { BR              X9 }

uint64_t sub_10007E09C@<X0>(int a1@<W8>)
{
  BOOL v4 = *(void *)(v1 + 16) != 0x2AAECA15FC566803LL && *(_OWORD *)(v1 + 40) != 0LL;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((1031 * v4) | a1)) - 12LL))();
}

uint64_t sub_10007E0E4@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, char a22)
{
  uint64_t v25 = *(void *)(v23 + 32);
  *(_DWORD *)(v22 - 0x2AAECA15FC566803LL) = 0;
  return ((uint64_t (*)(char *, char *, char *, uint64_t))(*(void *)(v24
                                                                              + 8LL
                                                                              * ((1785 * (v25 == 0x2A461383296CA244LL)) ^ ((a1 - 210) | 0x281)))
                                                                  - ((((a1 - 210) | 0x281u) - 446) ^ 0x101LL)))( &a22,  &a13,  &a20,  267LL);
}

uint64_t sub_10007E190( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, char a29)
{
  int v35 = (((v34 - 144) & 0xF81837B4 | ~((v34 - 144) | 0xF81837B4)) ^ 0x9E46186F) * v29;
  *(_DWORD *)(v34 - 136) = v30 - v35 + 596;
  *(_DWORD *)(v34 - 132) = v35 + 1054862878;
  *(void *)(v34 - 144) = &a22 + v31;
  sub_100087FA4(v34 - 144);
  return ((uint64_t (*)(char *, char *, char *, uint64_t))(*(void *)(v32
                                                                              + 8LL
                                                                              * (((12 * (v30 ^ 0x18C)
                                                                                 + 42 * (v30 ^ 0x12F)
                                                                                 - 2937)
                                                                                * (v33 == 0)) ^ (v30 + 567)))
                                                                  - 4LL))( &a29,  &a20,  &a27,  267LL);
}

uint64_t sub_10007E2AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v27 = v18 - 1133;
  int v28 = 831981571 * ((((2 * (v26 - 144)) | 0x4F0C6938) - (v26 - 144) + 1484376932) ^ 0x3E27E4B8);
  *(void *)(v26 - 136) = v19;
  *(void *)(v26 - 12_Block_object_dispose(va, 8) = v24;
  *(_DWORD *)(v26 - 144) = (((v18 - 1133) ^ 0x2F84868B) + v21) ^ v28;
  *(_DWORD *)(v26 - 140) = v28 + v18 - 977;
  BOOL v31 = v20 != 0;
  ((void (*)(uint64_t))(*(void *)(v23 + 8LL * (v18 ^ 0x608)) - 8LL))(v26 - 144);
  *(_DWORD *)(v26 - 144) = v27
                         - 1224239923
                         * ((((v26 - 144) | 0x608DC9E7) - (v26 - 144) + ((v26 - 144) & 0x9F723618)) ^ 0x923E3430)
                         - 337;
  *(void *)(v26 - 136) = a16;
  *(void *)(v26 - 12_Block_object_dispose(va, 8) = v22;
  ((void (*)(uint64_t))(*(void *)(v23 + 8LL * (v27 - 432)) - 8LL))(v26 - 144);
  *(_DWORD *)(v26 - 136) = v27
                         - 460628867 * ((((2 * (v26 - 144)) | 0x495F6FA2) - (v26 - 144) - 615495633) ^ 0x683935AC)
                         + 682;
  *(void *)(v26 - 12_Block_object_dispose(va, 8) = a17;
  *(void *)(v26 - 120) = v22;
  *(void *)(v26 - 144) = a15;
  *(void *)(v26 - 112) = a18;
  *(void *)(v26 - 104) = a16;
  uint64_t v29 = ((uint64_t (*)(uint64_t))(*(void *)(v23 + 8LL * (v27 - 224)) - 4LL))(v26 - 144);
}

uint64_t sub_10007E494()
{
  int v6 = 3804331 * ((((v5 - 144) | 0x65655D98) - ((v5 - 144) & 0x65655D98)) ^ 0x1BB0786E);
  *(void *)(v5 - 120) = v4;
  *(_DWORD *)(v5 - 12_Block_object_dispose(va, 8) = (v3 - 824) ^ v6;
  *(_DWORD *)(v5 - 124) = (((v3 - 956) ^ 0x4280C66F) + v1) ^ v6;
  *(void *)(v5 - 136) = v8;
  uint64_t result = ((uint64_t (*)(uint64_t))(*(void *)(v2 + 8LL * (v3 ^ 0x4AF)) - 8LL))(v5 - 144);
  _DWORD *v10 = v9;
  *(_DWORD *)(v0 + 56) = 528123064;
  return result;
}

void sub_10007E5DC(uint64_t a1)
{
  qword_100273840 = 56757557 * ((unint64_t)&v2[qword_100273838 - qword_100273840] ^ 0xE37D1100B7374749LL);
  qword_100273838 = qword_100273840;
  ((void (*)(void, void (*)()))*(&off_10025B940 + (unk_1002115EB ^ 0x1D) - 17))( *(&off_10025B940 + (unk_10021162F ^ 0x1D) - 34),  sub_1000A875C);
  __asm { BR              X9 }

uint64_t sub_10007E6B8@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * ((1014 * (**(void **)(v1 + 1752) != 0LL)) ^ 0x1F4)) - 12LL))();
}

uint64_t sub_10007E6F4()
{
  return (*(uint64_t (**)(uint64_t))(v1 + 1608))(v0);
}

  ;
}

void vQPeGmEL(uint64_t a1)
{
  __asm { BR              X8 }

uint64_t sub_10007E78C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, unsigned int a16)
{
  uint64_t v19 = sub_1000A80C0(&a15);
  return (*(uint64_t (**)(uint64_t))(v17 + 8LL * ((28 * (a15 == v16)) ^ v18)))(v19);
}

uint64_t sub_10007E7FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, unsigned int a16, int a17)
{
  a15 = &STACK[0x5E5ED88ABFC5691F];
  a16 = (831981571 * ((2 * (&a15 & 0x65541590) - &a15 + 447474284) ^ 0x830A3A48)) ^ 0x5D;
  sub_100067AB4((uint64_t)&a15);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18
                                                                                                  + 8LL * ((1087 * (a17 == ((v17 + 141) ^ 0x1FD))) ^ 0x32Cu)))( v19,  v20,  v21,  v22,  v23,  v24,  v25);
}

uint64_t sub_10007E898( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, unsigned int a17, uint64_t a18, unint64_t *a19, int a20)
{
  unsigned int v23 = 1224239923 * ((((2 * &a15) | 0x7801179A) - &a15 + 1140814899) ^ 0x4EB3761A);
  a16 = (v22 + 368399668) ^ v23;
  a17 = v23 ^ 0x8E2C1E03;
  a15 = v23 ^ 0x44550099;
  a18 = a12;
  a19 = &STACK[0x2940FF9A650624E8];
  uint64_t v24 = sub_1000A817C((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t))(*(void *)(v21
                                                      + 8LL
                                                      * ((1013 * (a20 == v20 + ((v22 + 425303234) & 0x35D) - 541)) ^ v22))
                                          - ((v22 + 425303234) ^ 0x19599D93)
                                          + 800LL))(v24);
}

uint64_t sub_10007E98C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, uint64_t a14, unint64_t *a15, unint64_t *a16, unsigned int a17)
{
  a17 = v20 - 50 - 944348131 * ((2 * (&a15 & 0x15D91B80) - &a15 + 1780933758) ^ 0xC93F4030);
  a15 = &STACK[0x5F366804CF4E5679];
  a16 = a13;
  uint64_t v21 = (void (*)(unint64_t **))(*(void *)(v19 + 8LL * (v20 ^ 0x2F6u)) - 4LL);
  v21(&a15);
  a15 = &STACK[0x5F366804CF4E5691];
  a16 = a13;
  a17 = v20 - 50 - 944348131 * (((&a15 | 0xA075B616) - (&a15 & 0xA075B616)) ^ 0x36C1258);
  v21(&a15);
  a15 = a13;
  LODWORD(a16) = v20
  uint64_t v22 = sub_10008DBEC((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t))(*(void *)(v18
                                                      + 8LL
                                                      * (int)(((HIDWORD(a16) == v17)
                                                             * (((v20 - 813720111) & 0xC11DB877) + 1055026958)) ^ v20))
                                          - 12LL))(v22);
}

uint64_t sub_10007EAE8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15)
{
  return ((uint64_t (*)(void))(*(void *)(v17
                                        + 8LL
                                        * (int)((((((v18 - 375399854) & 0xC11D9BF6) + 1372) ^ (v18 - v15 - 397))
                                               * (a15 == v16)) ^ v18))
                            - 12LL))();
}

uint64_t sub_10007EB30@<X0>(int a1@<W8>)
{
  int *v2 = v7 ^ v3;
  unsigned int v4 = 7 * (a1 ^ 0xC11D9812);
  unsigned int v10 = (a1 + v1) ^ (69008221 * (((&v10 | 0xE7563FA8) - (&v10 & 0xE7563FA8)) ^ 0x34F46DA2));
  uint64_t v11 = v9;
  v6(&v10);
  unsigned int v10 = (v4 - 668) ^ (69008221 * ((&v10 + 2080036327 - 2 * (&v10 & 0x7BFAD5E7)) ^ 0xA85887ED));
  uint64_t v11 = v8;
  v6(&v10);
  return v3 ^ 0x1F7A84B8u;
}

uint64_t sub_10007EC48(_DWORD *a1, uint64_t a2)
{
  return ((uint64_t (*)(void))((char *)*(&off_100257500
}

uint64_t sub_10007EC94@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * ((3419 * (v1 != 1007577602)) ^ 0x57Bu)) - 4LL))();
}

uint64_t sub_10007ECC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_BYTE *)(a1 + (v3 - 1584994389) + 4) = (**(_BYTE **)(a2 + 8) ^ 0xFD)
                                                       + ((2 * **(_BYTE **)(a2 + 8)) & 0xFB)
                                                       + 71;
  unsigned int v4 = *(_DWORD *)(a2 + 4) - 789795545;
  BOOL v5 = v4 < 0xCFB1729;
  BOOL v6 = v4 > 0xCFB172A;
  if (v5) {
    BOOL v6 = v5;
  }
  return ((uint64_t (*)(void))(*(void *)(a3 + 8LL * ((87 * !v6) ^ 0x52Cu)) - 4LL))();
}

void sub_10007ED78()
{
}

uint64_t sub_10007ED80()
{
  return 4294925278LL;
}

uint64_t sub_10007ED88(_DWORD *a1)
{
  *((_BYTE *)a1 + ((v2 - 243287566) & 0xF13CEDF7 ^ 0x50BA4F7C) + v1 + 4) = 68;
  *a1 = v1;
  return 0LL;
}

void sub_10007EDC8(uint64_t a1)
{
  int v2 = 1224239923 * ((-2 - ((~(_DWORD)a1 | 0xC412E5) + (a1 | 0xFF3BED1A))) ^ 0xF277EF32);
  int v3 = *(_DWORD *)(a1 + 20) - v2;
  int v31 = *(_DWORD *)(a1 + 44) ^ v2;
  unsigned int v4 = 235795823 * ((&v39 - 357749991 - 2 * (&v39 & 0xEAAD2B19)) ^ 0x7E006240);
  int v5 = *(_DWORD *)a1;
  unint64_t v15 = 1224239923 * ((-2LL - ((~a1 | 0x60AD954400C412E5LL) + (a1 | 0x9F526ABBFF3BED1ALL))) ^ 0x48F7202DF277EF32LL);
  int v6 = v5 - v2;
  int v40 = v4 ^ 0x4BBA54CA;
  int v41 = v3 + v4 + 426522968;
  int v18 = &STACK[0x7F1325F673F680E7];
  int v39 = &STACK[0x7F1325F673F680E7];
  sub_100060F54((uint64_t)&v39);
  int v7 = (char *)*(&off_10025B940 + (v3 ^ 0x7B)) - 4;
  int v29 = v6 - 1356346634;
  int v14 = v6 - 1715801123;
  int v16 = v6 + 1429661800;
  uint64_t v26 = &v36;
  v10[1] = (char *)&v10[-176275546] + 3;
  v10[0] = v37;
  int32x4_t v20 = vdupq_n_s32(0x1F7A84BCu);
  int32x4_t v22 = vdupq_n_s32(0x1F7A84B8u);
  int v25 = v3 ^ 0x29B;
  uint64_t v13 = (v3 - 742332914) & 0x2C3F19E4;
  int v12 = v3 ^ 0x71;
  unsigned int v24 = (v3 + 707613590) & 0xD5D2AEB8;
  int32x4_t v19 = vdupq_n_s32(0x1F7A84BBu);
  int v8 = v31;
  unsigned int v11 = 431 * (v3 ^ 0x32);
  uint64_t v21 = v11;
  uint64_t v23 = v11;
  int v27 = v3;
  int v28 = (v3 ^ 0x74A) + v6 - 1168912224;
  uint64_t v17 = a1;
  uint64_t v30 = *(void *)(a1 + 32);
  unsigned int v9 = v8 - (((v8 << ((v3 ^ 0x4A) - 122)) + 395530234) & 0xB6AE72CC) + 1730208099;
  char v32 = (HIBYTE(v9) ^ 0xDB) - ((2 * (HIBYTE(v9) ^ 0xDB)) & 0x5C) - 82;
  char v33 = (BYTE2(v9) ^ 0x57) - ((2 * (BYTE2(v9) ^ 0x57)) & 0x5C) - 82;
  char v34 = (BYTE1(v9) ^ 0x39) - ((2 * (BYTE1(v9) ^ 0x39)) & 0x5C) - 82;
  char v35 = (v8 - ((((_BYTE)v8 << ((v3 ^ 0x4A) - 122)) - 6) & 0xCC) + 99) ^ 0xC8;
  __asm { BR              X13 }

uint64_t sub_10007F200@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, int a40, char a41, char a42)
{
  int v45 = (v42 - 149) | 1;
  *(_BYTE *)(a7 + (v45 ^ (a1 + 654)) + v43) = a41;
  *(_BYTE *)(a7 + ((v45 - 657) | 0x31u) + a9 - 1863731127) = a42;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 + 8LL * (v45 ^ 0x3E)) - 4LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a10,  a11,  a12);
}

uint64_t sub_10007F2A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, int a39, char a40)
{
  *(_BYTE *)(a7 + v43 + (v40 ^ 0x2A0u) + 1) = *(&a40 + (v42 - 1691917227));
  return ((uint64_t (*)(void))(*(void *)(v44 + 8LL * (v40 ^ (1511 * ((v41 + 1508) < 4)))) - 4LL))();
}

uint64_t sub_10007F2F4@<X0>( uint64_t a1@<X6>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(uint64_t), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, int a33, char a34)
{
  int v38 = (v34 - 1517871448) & 0x5A78DEF7;
  *(_BYTE *)(a1 + (v36 + a2 + 51)) = *(&a34 + (v38 ^ 0x9B276467) + v35);
  int v39 = 831981571 * (((((v37 - 168) | 0xEC6C17E8) ^ 0xFFFFFFFE) - (~(v37 - 168) | 0x1393E817)) ^ 0x8A323833);
  *(void *)(v37 - 160) = a14;
  *(_DWORD *)(v37 - 16_Block_object_dispose(va, 8) = v39 ^ 0x5C834C60;
  *(_DWORD *)(v37 - 164) = v39 + v38 + 870;
  uint64_t v40 = sub_1000889FC(v37 - 168);
  return a13(v40);
}

uint64_t sub_10007F3A0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, int a35, unsigned int a36)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, void))(v37 + 8LL * (((a15 + ((2 * LODWORD(STACK[0x2D4])) & 0x5E ^ 0xA) + (STACK[0x2D4] & 0x3F ^ 0x5EF8A7FAu) < 0xFFFFFFC0) * (v36 + 1598)) ^ (v36 + 338))))( a1,  3248503823LL,  2812795136LL,  2327710885LL,  a5,  1281247390LL,  &STACK[0x290],  a36);
}

uint64_t sub_10007F444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v9 = v4 - 1593354223;
  else {
    int v10 = 64;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8
                                                                                          + 8LL
                                                                                          * ((v7 + 1994) ^ (7 * ((1593354222 - v5 - v6 + v10) < 0xF))))
                                                                              - ((((v7 + 219517702) & 0xF2EA6CF9) + 813) ^ 0x352LL)))( -1967256411LL,  a2,  a3,  a4,  709LL);
}

uint64_t sub_10007F4DC()
{
  int v5 = v1 + v0;
  unsigned int v6 = v5 + ((v2 - 813) ^ 0xA1075823);
  if (v6 <= 0x40) {
    unsigned int v6 = 64;
  }
  BOOL v7 = !__CFADD__(v5 - 1593354223, v3 + v6);
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((v7 * ((v2 + 818) ^ 0x6A7)) ^ v2)) - 8LL))();
}

uint64_t sub_10007F540@<X0>(uint64_t a1@<X2>, uint64_t a2@<X6>, uint64_t a3@<X8>)
{
  *(int8x16_t *)(a2 + ((431 * (v3 ^ 0x692u) + 4294966433LL) & (a3 + a1))) = vaddq_s8( vsubq_s8( *v5,  vandq_s8(vaddq_s8(*v5, *v5), v7)),  v8);
}

void sub_10007F5B0()
{
}

uint64_t sub_10007F5BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v17 = v11 - 623;
  int v18 = v11 - 78;
  unsigned int v19 = v12 + a1;
  if (v19 <= 0x40) {
    unsigned int v19 = 64;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 + 8LL * ((124 * (v15 - v13 - v14 + v18 + v19 < (v17 ^ 0x4B5u) - 1012)) ^ v17)) - 12LL))( a1,  2431236217LL,  2812795136LL,  2431236169LL,  a5,  1281247390LL,  a7,  a8,  a9,  a10,  a11);
}

uint64_t sub_10007F648(int a1)
{
  unsigned int v6 = v2 + v1 + a1;
  if (v6 <= 0x40) {
    int v7 = 64;
  }
  else {
    int v7 = v2 + v1 + a1;
  }
  BOOL v8 = __CFADD__(v6 - 1, v4 + ((v3 + 345733116) & 0xEB6486D7) + v7);
  return (*(uint64_t (**)(void))(v5 + 8LL * ((120 * (((v3 + 122) ^ v8) & 1)) | v3)))();
}

uint64_t sub_10007F6B0@<X0>(int a1@<W1>, uint64_t a2@<X6>, int a3@<W8>)
{
  *(_OWORD *)(a2 + (a3 + a1)) = *v5;
  return ((uint64_t (*)(void))(*(void *)(v6
                                        + 8LL
                                        * (((((((v4 - 1340) | 0x52Eu) + 0x1FFFFFA81LL) & (v3 + 1)) != 16)
                                          * (((((v4 - 1340) | 0x52E) - 1263) | 0x4A) ^ 0xD8)) ^ ((v4 - 1340) | 0x52E)))
                            - 8LL))();
}

void sub_10007F728()
{
}

uint64_t sub_10007F734()
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (((((v2 ^ 0x21D) - 697) ^ 0x233) * (v0 == v1)) ^ v2)) - 12LL))();
}

uint64_t sub_10007F770@<X0>(int a1@<W1>, int a2@<W3>, uint64_t a3@<X4>, uint64_t a4@<X6>, int a5@<W8>)
{
  *(_BYTE *)(a4 + (a5 + a1)) = *(_BYTE *)(v6 + v7 + ((v5 - 713) | 0x10u) + a3);
  return ((uint64_t (*)(void))(*(void *)(v8
                                        + 8LL
                                        * (((16 * ((a2 + a5 + 49) > 0x3F)) | (32
}

uint64_t sub_10007F7C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, int a31, int a32, int a33, unint64_t a34)
{
  int v52 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 8LL * v34);
  int v41 = STACK[0x2DC];
  int v42 = STACK[0x2E0];
  int v43 = STACK[0x2E4];
  int v44 = STACK[0x2E0];
  int v45 = STACK[0x2E4];
  uint64_t v46 = LOBYTE(STACK[0x2F0]) ^ 0x1Eu;
  if ((_DWORD)v46 == 2)
  {
    BOOL v51 = (unint64_t)&STACK[0x290] < a34 && v38 < (unint64_t)&STACK[0x2D0];
    return ((uint64_t (*)(uint64_t))(*(void *)(v37 + 8LL * ((v36 + 305) ^ (231 * v51)))
  }

  else if ((_DWORD)v46 == 1)
  {
    BOOL v48 = (unint64_t)&STACK[0x290] >= a34 || v38 >= (unint64_t)&STACK[0x2D0];
    return ((uint64_t (*)(void, uint64_t))(*(void *)(v37 + 8LL * ((1200 * v48) ^ (v36 + 590))) - 4LL))( (a32 - 1),  1248150939LL);
  }

  else
  {
    LODWORD(STACK[0x2D8]) = 2 * (LODWORD(STACK[0x2D8]) ^ v40) + v40 - (v39 & (4 * (LODWORD(STACK[0x2D8]) ^ v40)));
    LODWORD(STACK[0x2DC]) = 2 * (v41 ^ v40) + v40 - (v39 & (4 * (v41 ^ v40)));
    LODWORD(STACK[0x2E0]) = (v44 ^ v40) + (v42 ^ v40) + v40 - (v39 & (2 * ((v44 ^ v40) + (v42 ^ v40))));
    LODWORD(STACK[0x2E4]) = (v45 ^ v40) + (v43 ^ v40) + v40 - (v39 & (2 * ((v45 ^ v40) + (v43 ^ v40))));
    return v52( v46,  3248503823LL,  a3,  2327710885LL,  &STACK[0x290],  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  v35,  a27,  a28,  a29,  a30);
  }

uint64_t sub_10008056C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, int a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, unsigned int a35)
{
  else {
    BOOL v37 = a30 + 1093811151 > a35;
  }
  return (*(uint64_t (**)(void))(v36
                              + 8LL
                              * ((4 * ((v37 ^ (v35 + 116)) & 1)) & 0xDF | (32
                                                                                          * ((v37 ^ (v35 + 116)) & 1)) | (v35 + 338))))();
}

uint64_t sub_1000805F4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return ((uint64_t (*)(void))(*(void *)(v6
                                        + 8LL
                                        * (((17 * (((v5 + 115) | 0x640) ^ 0x6D9) - 1006)
}

uint64_t sub_100080638(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(_BYTE *)(a7 + v_Block_object_dispose(va, 8) = *(_BYTE *)(v10 + (v7 + a4))
  return ((uint64_t (*)(void))(*(void *)(v11
                                        + 8LL
}

uint64_t sub_100080688@<X0>(int a1@<W3>, int8x16_t *a2@<X6>, int a3@<W8>)
{
  int8x16_t v10 = *(int8x16_t *)(v6 + v3 + (a3 ^ 0x6D5 ^ v4 ^ (a1 + 19)));
  *a2 = vaddq_s8(vsubq_s8(v10, vandq_s8(vaddq_s8(v10, v10), v8)), v9);
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * (v5 ^ ((a3 ^ 0x6D5) + 988))) - 12LL))();
}

uint64_t sub_1000806EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, int a26)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27
                                                              + 8LL
                                                              * ((((a26 - 1691917170) < 0xFFFFFFFB)
                                                                * (a13 + 963)) ^ (v26 + 439))))( a1,  a2,  a3);
}

void sub_100080748()
{
}

uint64_t sub_10008076C( uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8)
{
  BOOL v11 = a8 < a2;
  unsigned int v12 = v9 - 936 + a6 + v8;
  int v13 = v11 ^ (v12 < a2);
  BOOL v14 = v12 < a8;
  if (!v13) {
    BOOL v11 = v14;
  }
  return ((uint64_t (*)(uint64_t))(*(void *)(v10 + 8LL * ((104 * v11) ^ v9)) - 4LL))(1852747807LL);
}

uint64_t sub_1000807D0@<X0>( unsigned int a1@<W1>, int a2@<W2>, int a3@<W3>, int a4@<W5>, uint64_t a5@<X6>, unsigned int a6@<W7>, int a7@<W8>)
{
  BOOL v13 = a6 < a1;
  *(_BYTE *)(a5 + (a7 + a2)) = *(_BYTE *)(v12 + (v7 + a3))
  unsigned int v14 = a4 + v7 + 23;
  int v15 = v13 ^ (v14 < a1);
  BOOL v16 = v14 < a6;
  if (!v15) {
    BOOL v13 = v16;
  }
  return ((uint64_t (*)(void))(*(void *)(v11 + 8LL * ((v13 * v9) ^ v8)) - 4LL))();
}

uint64_t sub_100080840( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  int v24 = 831981571 * ((v23 - 168) ^ 0x99A1D024);
  *(void *)(v23 - 160) = a21;
  *(_DWORD *)(v23 - 16_Block_object_dispose(va, 8) = v24 ^ a17;
  *(_DWORD *)(v23 - 164) = v24 + v21 + 897;
  uint64_t v25 = sub_1000889FC(v23 - 168);
  uint64_t v26 = STACK[0x2D4] & 0x3F;
  *((_BYTE *)&STACK[0x290] + (v26 ^ 0x15)) = 46;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22
                                                                                 + 8LL
                                                                                 * ((1823
                                                                                   * ((v26 ^ 0x15) > 0x37)) ^ v21))
                                                                     - ((v21 + 27) ^ (v21 + 1489) ^ 0x5D2LL)))( v25,  3248503823LL,  2812795136LL,  2327710885LL);
}

uint64_t sub_100080924@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * (((a1 == ((v1 - 1752362668) ^ 0x978D1704)) * (((v1 - 1752362668) & 0x6872EFEE) - 842)) ^ v1)))();
}

uint64_t sub_100080978()
{
  return (*(uint64_t (**)(void))(v2 + 8LL * ((124 * ((v0 ^ 0x2Au) < ((v1 - 1785) ^ 0x39))) ^ v1)))();
}

uint64_t sub_1000809AC@<X0>(unsigned int a1@<W8>, uint64_t a2)
{
  *(void *)(a2 + a1) = v5;
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((((v2 & 0x38) == 8LL) * ((v3 ^ 0x2D4) + 482)) ^ v3 ^ 0x2D4)) - 12LL))();
}

uint64_t sub_1000809F0()
{
  *unsigned int v1 = v5;
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * (((v3 == 0) * v2) ^ v0)) - 12LL))();
}

uint64_t sub_100080A14@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v3 + 8LL * (int)(((((a1 + 499703596) & 0xE2371AFD) + 288) * (v2 != v1)) ^ a1)))();
}

uint64_t sub_100080A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(_BYTE *)(a7 + v7 + v12) = v10;
  return ((uint64_t (*)(void))(*(void *)(v13
}

void sub_100080A90()
{
}

uint64_t sub_100080AB4()
{
}

uint64_t sub_100080B00@<X0>(int a1@<W8>)
{
  uint64_t v4 = v1;
  unint64_t v5 = ((269 * (((a1 - 223) | 0x31) ^ 0x36u)) ^ (unint64_t)(v2 + 860)) + v1;
  if (v5 <= 0x38) {
    unint64_t v5 = 56LL;
  }
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((1468 * (v5 - v4 + 1410205021 > 7)) ^ a1)) - 4LL))();
}

uint64_t sub_100080B6C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(a10 + v12) = v14;
  return ((uint64_t (*)(void))(*(void *)(v13
                                        + 8LL * ((((v11 & 0xFFFFFFFFFFFFFFF8LL) == 8) * ((v10 - 1660) ^ 0x24)) ^ v10))
                            - 8LL))();
}

uint64_t sub_100080BAC()
{
  *unsigned int v1 = v5;
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * (((v3 == 0) * v2) ^ v0)) - 8LL))();
}

uint64_t sub_100080BD0()
{
}

uint64_t sub_100080C20@<X0>(uint64_t a1@<X6>, uint64_t a2@<X8>)
{
  *(_BYTE *)(a1 + a2 + v5) = v3;
}

void sub_100080C50( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, char a12)
{
  int v14 = LOBYTE(STACK[0x2F0]) ^ 0x1E;
  if (v14 == 1)
  {
    unsigned int v21 = STACK[0x2D4];
    unsigned int v22 = STACK[0x2D0];
    LOBYTE(STACK[0x2C8]) = ((8 * LOBYTE(STACK[0x2D4])) ^ 0xA8)
    char v19 = 92;
    LOBYTE(STACK[0x2C9]) = ((v21 >> 5) ^ 0x6C) - ((2 * ((v21 >> 5) ^ 0x6C)) & 0x5C) - 82;
    LOBYTE(STACK[0x2CA]) = ((v21 >> 13) ^ 0xB5) - ((2 * ((v21 >> 13) ^ 0xB5)) & 0x5C) - 82;
    LOBYTE(STACK[0x2CB]) = ((v21 >> 21) ^ 0x6C) + ~(2 * (((v21 >> 21) ^ 0x6C) & 0x2F ^ ((v21 & 0x200000) != 0))) - 81;
    HIDWORD(v23) = v22 ^ 7;
    LODWORD(v23) = v21 ^ 0x20000000;
    LOBYTE(STACK[0x2CC]) = (v23 >> 29) - ((2 * (v23 >> 29)) & 0x5C) - 82;
    LOBYTE(STACK[0x2CD]) = ((v22 >> 5) ^ 0x20) - 2 * (((v22 >> 5) ^ 0x20) & 0x2F ^ ((v22 & 0x20) != 0)) - 82;
    LOBYTE(STACK[0x2CE]) = ((v22 >> 13) ^ 0xDB) - ((2 * ((v22 >> 13) ^ 0xDB)) & 0x5C) - 82;
    char v15 = a12;
    unsigned int v20 = (v22 >> 21) ^ 0xFFFFFFAB;
  }

  else
  {
    if (v14 != 2) {
      goto LABEL_6;
    }
    char v15 = v12 - 36;
    unsigned int v16 = STACK[0x2D0];
    unsigned int v17 = STACK[0x2D4];
    LOBYTE(STACK[0x2C8]) = ((LODWORD(STACK[0x2D0]) >> 21) ^ 0xAB)
                         - (v13 & (2 * ((LODWORD(STACK[0x2D0]) >> 21) ^ 0xAB)))
                         - 82;
    LOBYTE(STACK[0x2C9]) = ((v12 - 36) ^ (v16 >> 13) ^ 0xD6) + (~(2 * ((v12 - 36) ^ (v16 >> 13) ^ 0xD6)) | 0xA3) - 81;
    LOBYTE(STACK[0x2CA]) = ((v16 >> 5) ^ 0x20) - 2 * (((v16 >> 5) ^ 0x20) & 0x2F ^ ((v16 & 0x20) != 0)) - 82;
    HIDWORD(v1_Block_object_dispose(va, 8) = v16 ^ 7;
    LODWORD(v1_Block_object_dispose(va, 8) = v17 ^ 0x20000000;
    LOBYTE(STACK[0x2CB]) = (v18 >> 29) - (v13 & (2 * (v18 >> 29))) - 82;
    LOBYTE(STACK[0x2CC]) = ((v17 >> 21) ^ 0x6C) - (v13 & (2 * ((v17 >> 21) ^ 0x6C))) - 82;
    LOBYTE(STACK[0x2CD]) = ((v17 >> 13) ^ 0xB5) - (v13 & (2 * ((v17 >> 13) ^ 0xB5))) - 82;
    LOBYTE(STACK[0x2CE]) = ((v17 >> 5) ^ 0x6C) - 2 * (((v17 >> 5) ^ 0x6C) & 0x2F ^ ((v17 & 0x20) != 0)) - 82;
    char v19 = 80;
    unsigned int v20 = (8 * v17) ^ 0xFFFFFFA8;
  }

  LOBYTE(STACK[0x2CF]) = v20 - ((v20 << ((v15 + 36) ^ 0x30)) & v19) - 82;
LABEL_6:
  JUMPOUT(0x10007F89CLL);
}

uint64_t sub_100080E78@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((1318 * (a1 + 1505 < (((v1 ^ 0x2A0) - 625) | 0x11u) - 45)) | v1 ^ 0x2A0))
                            - 4LL))();
}

uint64_t sub_100080EB4@<X0>( unsigned int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, int a32, char a33)
{
  LOBYTE(STACK[0x290]) = *(&a33 + a1);
  return ((uint64_t (*)(void))(*(void *)(v35
                                        + 8LL * ((((v33 - 608) ^ 0x185) * ((v34 & 0xFFFFFFFC) == 1691917228)) ^ v33))
                            - 4LL))();
}

void sub_100080EF4()
{
}

uint64_t sub_100080F18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, int a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41)
{
  if (a36 == 2) {
    return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v42
  }
                                                                 + 8LL
                                                                 * ((56
                                                                   * (((LODWORD(STACK[0x2EC]) == 980646681) ^ (v41 - 98)) & 1)) ^ (v41 + 670)))
                                                     - 8LL))( a18,  235795823LL);
  if (a36 == 1) {
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v42
  }
                                                                          + 8LL
                                                                          * ((1576
                                                                            * (LODWORD(STACK[0x2EC]) != (v41 ^ 0x2FE) + 980645962)) ^ (v41 + 670)))
                                                              - 8LL))( a1,  235795823LL,  a18);
  unint64_t v44 = ((unint64_t)&a41 ^ 0x66EEFBFEEAA5BACFLL)
      - 0x24C4382422A110BELL
      + (((void)&a41 << (105 * (v41 ^ 0x36u) + 34)) & 0xCDDDF7FDD54B7590LL);
  LOBYTE(STACK[0x2EB]) = ((v44 - 17) ^ 0xBA) * v44;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 + 840LL * (v41 ^ 0x36))
                                                            - ((105 * (v41 ^ 0x36u) - 686) ^ 0x35LL)))( a1,  235795823LL,  a18);
}

void sub_100081270()
{
}

uint64_t sub_100081278@<X0>(int a1@<W1>, int a2@<W8>)
{
  uint64_t v3 = *(void *)(v8 + 24);
  uint64_t v4 = *(void *)(v8 + 8);
  *(void *)(v2 - 204) = 0xAEAEAEAEAEAEAEAELL;
  *(void *)(v2 - 196) = 0xAEAEAEAEAEAEAEAELL;
  int v5 = ((v2 - 168) ^ 0x94AD4959) * a1;
  uint64_t v6 = (void *)(v2 - 168);
  v6[5] = v2 - 204;
  void *v6 = v3;
  _DWORD v6[2] = v2 - 188;
  v6[3] = v4;
  *(_DWORD *)(v2 - 132) = (a2 + 1823) ^ v5;
  *(_DWORD *)(v2 - 160) = v5 + 1862487499;
  uint64_t result = ((uint64_t (*)(uint64_t))((char *)*(&off_10025B940 + (a2 ^ 0xAB)) - 12))(v2 - 168);
  *(_DWORD *)(v8 + 40) = *(_DWORD *)(v2 - 136);
  return result;
}

void sub_100081348(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) - 268847287 * ((((2 * a1) | 0x834EB920) - a1 - 1101487248) ^ 0xBE0D4DB8);
  __asm { BR              X9 }

uint64_t sub_100081408()
{
  return (*(uint64_t (**)(void))(v2 + 8LL * (((*(void *)(v1 + 16) == 0LL) * ((v0 + 791) ^ 0x7DB)) ^ v0)))();
}

uint64_t sub_100081470@<X0>(uint64_t (*a1)(uint64_t *)@<X8>)
{
  unsigned int v6 = (((&v8 | 0x2E438E06) - (&v8 & 0x2E438E06)) ^ 0x5096ABF0) * v2;
  uint64_t v11 = 0x4205FFA8EF858547LL;
  int v12 = (v3 - 777) ^ v6;
  uint64_t v8 = v5;
  int v9 = v6 ^ v1;
  int v10 = v6 ^ 0x7B3CEEB3;
  uint64_t result = a1(&v8);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(v5 - 0x2F801B1FA3259439LL);
  return result;
}

void sub_100081724(_DWORD *a1)
{
  unsigned int v1 = (*a1
  __asm { BR              X10 }

uint64_t sub_10008192C( uint64_t a1, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
}

uint64_t sub_100081960( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  *(_DWORD *)(a11 - 0x20BA795F69D3FA1LL) = 1156580852 - v18;
  int v24 = 831981571 * ((((v23 - 136) | 0x1D8DD29A) - (v23 - 136) + ((v23 - 136) & 0xE2722D60)) ^ 0x842C02BE);
  *(void *)(v23 - 136) = a12;
  *(_DWORD *)(v23 - 12_Block_object_dispose(va, 8) = v21 - v24 - 1072;
  *(_DWORD *)(v23 - 124) = v24 + 1054797342;
  sub_100087FA4(v23 - 136);
  int v25 = 3804331 * (((v23 - 136) & 0xBBAC2B3F | ~((v23 - 136) | 0xBBAC2B3F)) ^ 0x3A86F136);
  *(_DWORD *)(v23 - 12_Block_object_dispose(va, 8) = v25 + v21 - 332;
  *(_DWORD *)(v23 - 124) = ((v19 << 6) & 0xBFF7FF40) - v25 - 206746676 + ((v19 << ((v21 + 58) & 0x3B ^ 6)) ^ 0x5FFBFFB6);
  *(void *)(v23 - 136) = a12;
  sub_100067BE4(v23 - 136);
  *(_DWORD *)(v23 - 12_Block_object_dispose(va, 8) = v21
                         + 831981571 * (((v23 - 136) & 0x2C0498D9 | ~((v23 - 136) | 0x2C0498D9)) ^ 0x4A5AB702)
                         - 515;
  *(void *)(v23 - 136) = a18;
  *(void *)(v23 - 120) = &STACK[0x2A461383296CA294];
  sub_100082A9C(v23 - 136);
  *(_DWORD *)(v23 - 112) = (v21 - 220) ^ (69008221
                                        * (((v23 - 136) & 0xDFB6986 | ~((v23 - 136) | 0xDFB6986)) ^ 0x21A6C473));
  *(void *)(v23 - 136) = a12;
  *(void *)(v23 - 120) = a18;
  uint64_t v26 = ((uint64_t (*)(uint64_t))(*(void *)(v22 + 8LL * (v21 - 1716)) - 8LL))(v23 - 136);
  return ((uint64_t (*)(uint64_t))(*(void *)(v20
                                                      + 8LL
                                                      * ((16
}

uint64_t sub_100081BB8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  *(void *)(v19 - 136) = v17;
  *(void *)(v19 - 120) = a16;
  *(_DWORD *)(v19 - 12_Block_object_dispose(va, 8) = v18
                         + 831981571 * (((v19 - 136) & 0xF66E908A | ~((v19 - 136) | 0xF66E908A)) ^ 0x9030BF51)
                         + 1099;
  uint64_t v20 = sub_100082A9C(v19 - 136);
}

uint64_t sub_100081C54( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  *(void *)(v21 - 120) = a17;
  *(_DWORD *)(v21 - 12_Block_object_dispose(va, 8) = v20
                         + 831981571
                         * ((-882225999 - ((v21 - 136) | 0xCB6A4CB1) + ((v21 - 136) | 0x3495B34E)) ^ 0xAD34636A)
                         + 1292;
  *(void *)(v21 - 136) = a18;
  sub_100082A9C(v21 - 136);
  int v22 = 3804331 * (((v21 - 136) & 0xE7895B79 | ~((v21 - 136) | 0xE7895B79)) ^ 0x66A38170);
  *(void *)(v21 - 136) = v18;
  *(_DWORD *)(v21 - 12_Block_object_dispose(va, 8) = v22 + v20 + 1475;
  *(_DWORD *)(v21 - 124) = 1403603843 - v22;
  sub_100067BE4(v21 - 136);
  *(void *)(v21 - 120) = a18;
  *(void *)(v21 - 136) = v18;
  *(_DWORD *)(v21 - 112) = (v20 + 1587) ^ (69008221
                                         * (((v21 - 136) & 0xDA783752 | ~((v21 - 136) | 0xDA783752)) ^ 0xF6259AA7));
  uint64_t v23 = v19(v21 - 136);
  BOOL v24 = (*(_DWORD *)(v21 - 128) - 1898115906) < 0x9B615F7E;
}

uint64_t sub_100081E14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12)
{
  return ((uint64_t (*)(void))(*(void *)(v12
                                        + 8LL
                                        * ((15
                                          * (((2 * a12) & 0xFFD37FDE)
                                           + (a12 ^ 0xFFE9BF91 ^ ((v13 - 203) | 0x68))
                                           + 1458191 > 0x7FFFFFFD)) ^ v13))
                            - 4LL))();
}

  ;
}

uint64_t sub_100082A9C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) - 831981571 * ((2 * (a1 & 0x1F062D56) - a1 - 520498519) ^ 0x7958028D);
  return ((uint64_t (*)(void))(*(void *)((char *)*(&off_10025B940 + v1 - 1344)
                                        + 8
                                        * (int)(((*(void *)a1 == *(void *)(a1 + 16))
                                               * ((v1 + 173387345) & 0xF5AA4FFC ^ 0x3C9)) ^ v1)
                                        - 4)
                            - 12LL))();
}

uint64_t sub_100082B30@<X0>(uint64_t a1@<X8>)
{
  int v4 = *(_DWORD *)(v2 - 0x2A461383296CA240LL);
  int v5 = (((v3 ^ 0x652) - 1101) ^ 0xAEC279FF) + v4;
  if (v5 < 0) {
    int v5 = -v5;
  }
  *(_DWORD *)(v1 - 0x2A461383296CA240LL) = v4;
  return ((uint64_t (*)(void))(*(void *)(a1
                                        + 8LL
                                        * ((47 * ((v5 ^ 0xEED7FF6F) + 939354876 + ((2 * v5) & 0xDDAFFEDE) == 651520619)) ^ v3))
                            - 8LL))();
}

uint64_t sub_100082BBC@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(*(void *)(v3 - 0x2A461383296CA23CLL) + 4LL * (int)(v5 - 651522038 + ((v2 + 2085094989) & 0x83B7FDFF))) = *(_DWORD *)(*(void *)(v4 - 0x2A461383296CA23CLL) + 4LL * (int)(v5 - 651522038 + ((v2 + 2085094989) & 0x83B7FDFF)));
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * ((714 * (v5 - 1 == v1)) ^ v2)) - 8LL))();
}

void sub_100082C34()
{
}

void sub_100082C3C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24) + 1543737703 * (((a1 | 0xC7921CD6) - (a1 & 0xC7921CD6)) ^ 0xB9664CAA);
  __asm { BR              X10 }

void sub_100082CFC()
{
  *(_DWORD *)(v0 + _Block_object_dispose(va, 8) = -528097439;
}

void XpqjnD(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a5) {
    BOOL v8 = a6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  int v11 = !v8 && a7 != 0 && a8 != 0;
  __asm { BR              X8 }

uint64_t sub_100083404( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, _DWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, int a21, unsigned int a22)
{
  *a5 = 0LL;
  *a6 = 0;
  a22 = 1178560073 * (((&a21 | 0xD492092) - (&a21 & 0xD492092)) ^ 0xEA7C02FA) - 1501685844;
  uint64_t v25 = sub_1000A80C0(&a21);
  return ((uint64_t (*)(uint64_t))(*(void *)(v24 + 8LL * ((30 * (a21 != ((v23 + 276) ^ v22))) ^ 0x16Au)) - 4LL))(v25);
}

uint64_t sub_1000834A0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, unint64_t *a21, unsigned int a22, int a23)
{
  a21 = &STACK[0x5E5ED88ABFC56957];
  a22 = (v23 - 279) ^ (831981571 * (&a21 ^ 0x99A1D024));
  sub_100067AB4((uint64_t)&a21);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 + 8LL * ((1319 * (a23 == 528123064)) ^ v23)) - (((v23 + 538967733) | 0xC1C20090) ^ 0xE1E200BDLL)))( v26,  v27,  v28,  v29,  v30,  v31,  v32,  v33,  a9,  a10,  v24,  a12,  a13);
}

uint64_t sub_100083548( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  unsigned int v30 = v23 + 497;
  int v31 = 1224239923 * ((v28 & 0x2790CF84 | ~(v28 | 0x2790CF84)) ^ 0x2ADCCDAC);
  LODWORD(a23) = (v30 + 38) ^ v31;
  LODWORD(a21) = v27 - v31 + 1560460570 - ((v27 << ((v30 + 16) & 0xFE ^ 0x75)) & 0xBA057A34);
  a22 = a19;
  sub_10007D800((uint64_t)&a21);
  int v32 = 1224239923 * ((((2 * v28) | 0x97CE40C2) - v28 + 874045343) ^ 0x3954DDB6);
  a22 = a19;
  LODWORD(a21) = v26 - v32 + 1560460570 - (((v30 - 680759142) & 0x75F ^ 0xBA05796B) & (2 * v26));
  LODWORD(a23) = (v30 + 38) ^ v32;
  sub_10007D800((uint64_t)&a21);
  unint64_t v33 = 831981571 * ((v28 - 2 * (v28 & 0x26717E1E77E9F691LL) + 0x26717E1E77E9F691LL) ^ 0xF7813F5EEE4826B5LL);
  LODWORD(a22) = (v30 - 366) ^ v33;
  a23 = a19;
  a21 = v33 ^ (0x170A82F871258B4DLL * v25 + 0x676DD226A3C15F89LL);
  int v34 = (void (*)(uint64_t *))((char *)*(&off_10025B940 + (v30 ^ 0x38F)) - 8);
  v34(&a21);
  unint64_t v35 = 831981571 * ((-2LL - ((~v28 | 0x54A2F2BB4CFCE4EBLL) + (v28 | 0xAB5D0D44B3031B14LL))) ^ 0x8552B3FBD55D34CFLL);
  a23 = a19;
  a21 = v35 ^ (0x170A82F871258B4DLL * v24 + 0x676DD226A3C15F89LL);
  LODWORD(a22) = (v30 - 366) ^ v35;
  uint64_t v36 = ((uint64_t (*)(uint64_t *))v34)(&a21);
  return ((uint64_t (*)(uint64_t))(*(void *)(v29 + 8LL * ((1590 * (HIDWORD(a22) == 528123064)) ^ v30)) - 8LL))(v36);
}

uint64_t sub_1000837BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, int a22, int a23, int a24, uint64_t a25, unint64_t *a26, int a27)
{
  unsigned int v29 = 1224239923 * ((((2 * &a22) | 0xA63C9F70) - &a22 - 1394495416) ^ 0xA1ADB26F);
  a25 = a20;
  a26 = &STACK[0x2940FF9A650624F8];
  a23 = (a10 + 368399314) ^ v29;
  a24 = v29 ^ 0x339C14DD;
  a22 = v29 ^ 0x6D201382;
  uint64_t v30 = sub_1000A817C((uint64_t)&a22);
}

uint64_t sub_100083898( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, unint64_t *a21, unint64_t *a22, unint64_t *a23, unint64_t *a24)
{
  LODWORD(a21) = v24 - 2078219279 * (&a21 ^ 0xDAFA9674) - 231789157;
  a23 = &STACK[0x5F366804CF4E56A9];
  a24 = a15;
  a22 = &STACK[0x60E62A17C8DAFCC2];
  sub_1000A7D9C((uint64_t)&a21);
  LODWORD(a22) = v24
               + 3804331
  a21 = &STACK[0x4CB6A8AC7824C600];
  a23 = a15;
  a24 = &STACK[0x697D3DFF8FBD1912];
  ((void (*)(unint64_t **))((char *)*(&off_10025B940 + (int)(v24 - 195)) - 8))(&a21);
  LODWORD(a23) = v24 - 944348131 * (&a21 ^ 0xA319A44E) + 124;
  a21 = &STACK[0x5F366804CF4E56A5];
  a22 = a15;
  ((void (*)(unint64_t **))((char *)*(&off_10025B940 + (v24 ^ 0x184)) - 4))(&a21);
  LODWORD(a22) = v24
  a21 = a15;
  uint64_t v26 = sub_10008DBEC((uint64_t)&a21);
  return ((uint64_t (*)(uint64_t))(*(void *)(v25
                                                      + 8LL
                                                      * ((1755 * (HIDWORD(a22) == 79 * (v24 ^ 0x164) + 528122195)) ^ v24))
                                          - 8LL))(v26);
}

uint64_t sub_100083A88( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17)
{
  return ((uint64_t (*)(void))(*(void *)(v17 + 8LL * ((869 * (a17 == v19 + ((v18 + 660) | 0x6C) - 1135)) ^ v18)) - 8LL))();
}

uint64_t sub_100083AC4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17)
{
  unsigned int v20 = (a17 ^ (v19 + v17 - 203 - 932))
      - (((a17 ^ (v19 + v17 - 203 - 932)) << (((v17 + 16) & 0xEF) - 110)) & 0xBB500992)
      - 576191287;
  return ((uint64_t (*)(void))(*(void *)(v18
                                        + 8LL
                                        * ((200
                                          * (((2 * v20) & 0xC3C7E2E6 ^ 0x83400082) + (v20 ^ 0x3C4BF5BA) + 2143256574 == 1638101361)) ^ v17))
                            - 4LL))();
}

uint64_t sub_100083B84(uint64_t a1)
{
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v4
                                                               + 8LL
                                                               * (int)(((((a1 - 2145387291) | 0x61C20030) + 505282453)
                                                                      * ((v2 + v1 + 505155213) < 8)) ^ a1))
                                                   - 4LL))( a1,  v3);
}

uint64_t sub_100083BE8(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((((a1 + 1069 - v2 - 402082113) & 0x361547F4 ^ 0x6C8)
}

uint64_t sub_100083C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  return (*(uint64_t (**)(void))(v6 + 8LL * ((475 * (((v5 < 0x20) ^ (a5 + 13)) & 1)) ^ a5)))(0LL);
}

uint64_t sub_100083C70(uint64_t a1, int a2)
{
  unsigned int v10 = a2 & 0xEBEBC2BB;
  uint64_t v11 = v6 + (v10 ^ (v8 + 526) ^ (v3 + 214));
  __int128 v12 = *(_OWORD *)(v2 + v11 - 15);
  __int128 v13 = *(_OWORD *)(v2 + v11 - 31);
  uint64_t v14 = v7 + v11;
  *(_OWORD *)(v14 - 15) = v12;
  *(_OWORD *)(v14 - 31) = v13;
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * (int)((564 * ((v5 & 0xFFFFFFE0) == 32)) ^ (v4 + v10 + 274))) - 4LL))();
}

void sub_100083CDC()
{
}

uint64_t sub_100083CE8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * (int)((((a5 + 1126193669) & 0xBCDFA57F ^ 0x175) * (v5 == a1)) ^ a5))
                            - ((a5 + 1126193669) ^ 0x43205B8Fu)
                            + 88LL))();
}

uint64_t sub_100083D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(uint64_t, void))(*(void *)(v9
                                                              + 8LL
                                                              * ((210
                                                                * ((((v8 + a6 + 276) ^ (v8 + 1520) ^ 0x594) & v6) != 0)) ^ a6))
                                                  - 8LL))( a1,  (v7 - a1));
}

uint64_t sub_100083D70(int a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)(v9 - 7 + (v7 + v6 + v8 - a1)) = *(void *)(v4 - 7 + (v7 + v6 + v8 - a1));
  return (*(uint64_t (**)(void))(v10
                              + 8LL
                              * (int)(((a1 - (v5 & 0xFFFFFFF8) == -8) * ((a4 + 974583523) & 0xC5E903F0 ^ 0x3DE)) ^ a4)))();
}

void sub_100083DD8()
{
}

uint64_t sub_100083DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return ((uint64_t (*)(uint64_t, uint64_t, void))(*(void *)(v8 + 8LL * (v7 ^ (400 * (v6 == a5))))
                                                           - ((v7 - v5 - 1257859420) & 0x691769FF ^ 0x167LL)))( a1,  a2,  (v7 - v5 - 18));
}

uint64_t sub_100083E2C(uint64_t a1, int a2, int a3)
{
  *(_BYTE *)(v7 + (a2 + v5)) = *(_BYTE *)(v4 + (a2 + v5));
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * (((a2 - 1 != v3) * (v6 + a3 - 11)) ^ (v6 + a3 + 1113))) - 4LL))();
}

uint64_t sub_100083E68@<X0>( unsigned int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  *a7 = (a1 >> 2) ^ 0x7DEA12E;
  return ((uint64_t (*)(void))(*(void *)(v13 + 8LL * ((524 * (a11 != v11)) ^ v12)) - (v12 ^ 0x20Au) + 861LL))();
}

uint64_t sub_100083EBC@<X0>(int a1@<W8>)
{
  BOOL v4 = ((uint64_t (*)(void))*(&off_10025B940 + v2 - 141))(a1 ^ (v1 + 561) ^ (v2 + 226)) == 0;
}

uint64_t sub_100083F24( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  int v21 = (a18 ^ v19)
      - (((((v18 - 1292188245) & 0x4D053DBF) + 1513199131) ^ ((v18 - 294) | 0x44)) & (2 * (a18 ^ v19)))
      - 1390883492;
  return ((uint64_t (*)(void))(*(void *)(v20
                                        + 8LL
                                        * ((41
                                          * (((2 * v21) & 0xFFFDBCBA ^ 0x5A3198B8) + (v21 ^ 0x52E61301) + 2145613247 == 2145539100)) ^ v18))
                            - 12LL))();
}

uint64_t sub_100083FCC(uint64_t a1)
{
  int v4 = 11 * (v1 ^ 0x120);
  void *v7 = a1;
  _DWORD *v6 = v2;
  uint64_t v11 = v8;
  unsigned int v10 = (v4 - 725) ^ (69008221 * ((&v10 & 0x5AEC8B8A | ~(&v10 | 0x5AEC8B8A)) ^ 0x76B1267F));
  v3(&v10);
  uint64_t v11 = v9;
  unsigned int v10 = (v4 - 725) ^ (69008221 * (&v10 ^ 0xD3A2520A));
  v3(&v10);
  return 0LL;
}

void sub_1000843DC(uint64_t a1)
{
  int v1 = 3804331 * ((-2 - ((a1 | 0xD3EE21B) + (~(_DWORD)a1 | 0xF2C11DE4))) ^ 0x8C143812);
  __asm { BR              X15 }

uint64_t sub_1000844A4@<X0>(int a1@<W8>)
{
  unsigned int v6 = ((2 * (v8 & 0x3297F1E8) - v8 - 848818670) ^ 0xB3BD2BE4) * v3;
  uint64_t v9 = v2;
  v8[0] = a1 - v6 - ((277 * (v4 ^ 0x68B) - 1679409348) & (v5 - 351522858)) - 1015465549;
  v8[1] = v6 + v4 - 717;
  return (*(uint64_t (**)(_DWORD *))(v1 + 8LL * (v4 - 1619)))(v8);
}

void sub_1000845FC(uint64_t a1, uint64_t a2)
{
  **(_DWORD **)(a1 + 96) = *(_DWORD *)(a2 + 16);
  unsigned int v3 = 235795823
     * (((&v5 | 0xD878EB21) - &v5 + (&v5 & 0x278714D8)) ^ 0x4CD5A278);
  int v5 = &STACK[0x7F1325F673F6809B];
  int v6 = v3 ^ 0x4BBA54CA;
  unsigned int v7 = v3 + 426523017;
  sub_100060F54((uint64_t)&v5);
  __asm { BR              X9 }

uint64_t sub_1000847A0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v13 = v10 - 1877998762;
  if (v13 <= 0x40) {
    unsigned int v13 = 64;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 + 8LL * ((231 * ((_DWORD)a2 - v9 - v11 + v13 < 0xF)) ^ 0x674u)) - 4LL))( 1652LL,  a2,  a3,  3059237853LL,  a5,  a6,  a7,  a8,  a9);
}

uint64_t sub_100084810(uint64_t a1, int a2)
{
  int v8 = v4 + v3;
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * ((56 * (a2 - v8 >= (v6 + v2))) ^ 0x189)) - 8LL))();
}

uint64_t sub_100084854( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return ((uint64_t (*)(void))(*(void *)(v17
                                        + 8LL
                                        * (((((v16 + 127) | 0x4B0) ^ 0x26D)
}

uint64_t sub_1000848B0@<X0>(int a1@<W8>)
{
  v7.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
  v7.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
  v8.i64[0] = 0xAEAEAEAEAEAEAEAELL;
  v8.i64[1] = 0xAEAEAEAEAEAEAEAELL;
  *(int8x16_t *)(v3 + a1 + v1 + ((v2 - 1463) | 0x88)) = vaddq_s8(vsubq_s8(*v6, vandq_s8(vaddq_s8(*v6, *v6), v7)), v8);
}

void sub_100084928()
{
}

uint64_t sub_100084934@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((((a1 - 378608043) & 0x16911D3F ^ 0x54A) * (v1 == v2)) | a1))
}

uint64_t sub_10008497C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, int32x4_t a31, int32x4_t a32, int32x4_t a33, int32x4_t a34)
{
  LODWORD(v99) = HIDWORD(a13) + 1336763395;
  HIDWORD(v9_Block_object_dispose(va, 8) = 1689090189;
  int v43 = (const char *)(v41 - 220);
  v44.n128_u64[0] = 0xAEAEAEAEAEAEAEAELL;
  v44.n128_u64[1] = 0xAEAEAEAEAEAEAEAELL;
  __n128 v45 = (__n128)vdupq_n_s32(0x1F7A84BCu);
  __n128 v46 = (__n128)vdupq_n_s32(0x1F7A84B8u);
  a23 = v40 - 16;
  v47.n128_u64[0] = 0x5C5C5C5C5C5C5C5CLL;
  v47.n128_u64[1] = 0x5C5C5C5C5C5C5C5CLL;
  __n128 v48 = (__n128)vdupq_n_s32(0x1F7A84BBu);
  HIDWORD(v101) = 136;
  HIDWORD(a16) = 208;
  unsigned int v49 = *(_DWORD *)(v41 - 144);
  unsigned int v51 = *(_DWORD *)(v41 - 140);
  unsigned int v50 = *(_DWORD *)(v41 - 136);
  LODWORD(v9_Block_object_dispose(va, 8) = *(unsigned __int8 *)(v41 - 124) ^ 0x1E;
  int v52 = *(_BYTE *)(v41 - 124) ^ 0x1E;
  if (v52 == 2)
  {
    HIDWORD(v99) = *(_DWORD *)(v41 - 148);
    unint64_t v100 = __PAIR64__(v51, v49);
    LODWORD(v101) = *(_DWORD *)(v41 - 136);
    int8x16x4_t v103 = vld4q_s8(v43);
    uint8x16_t v78 = (uint8x16_t)veorq_s8(v103.val[0], (int8x16_t)v44);
    uint16x8_t v79 = vmovl_u8(*(uint8x8_t *)v78.i8);
    uint16x8_t v80 = vmovl_high_u8(v78);
    uint8x16_t v81 = (uint8x16_t)veorq_s8(v103.val[1], (int8x16_t)v44);
    _Q22 = vmovl_u8(*(uint8x8_t *)v81.i8);
    _Q21 = vmovl_high_u8(v81);
    __asm
    {
      SHLL2           V23.4S, V21.8H, #0x10
      SHLL2           V24.4S, V22.8H, #0x10
    }

    uint8x16_t v86 = (uint8x16_t)veorq_s8(v103.val[2], (int8x16_t)v44);
    uint16x8_t v87 = vmovl_high_u8(v86);
    uint16x8_t v88 = vmovl_u8(*(uint8x8_t *)v86.i8);
    v103.val[0] = veorq_s8(v103.val[3], (int8x16_t)v44);
    v103.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v103.val[0]);
    v103.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v103.val[1]);
    v103.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v103.val[1].i8);
    v103.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v103.val[0].i8);
    v103.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v103.val[0]);
    v103.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v103.val[0].i8);
    int32x4_t v89 = (int32x4_t)vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q22.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v88.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v79.i8), 0x18uLL)),  v103.val[0]);
    int32x4_t v90 = (int32x4_t)vorrq_s8( vorrq_s8( vorrq_s8(_Q24, (int8x16_t)vshll_high_n_u16(v88, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v79), 0x18uLL)),  v103.val[3]);
    int32x4_t v91 = (int32x4_t)vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v87.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v80.i8), 0x18uLL)),  v103.val[1]);
    int32x4_t v92 = (int32x4_t)vorrq_s8( vorrq_s8( vorrq_s8(_Q23, (int8x16_t)vshll_high_n_u16(v87, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v80), 0x18uLL)),  v103.val[2]);
    v103.val[0] = veorq_s8( vandq_s8((int8x16_t)v89, (int8x16_t)v45),  (int8x16_t)(*(_OWORD *)v103.val & __PAIR128__(0xFFFFFF04FFFFFF04LL, 0xFFFFFF04FFFFFF04LL)));
    v103.val[3] = veorq_s8( vandq_s8((int8x16_t)v90, (int8x16_t)v45),  (int8x16_t)(*(_OWORD *)&v103.val[3] & __PAIR128__(0xFFFFFF04FFFFFF04LL, 0xFFFFFF04FFFFFF04LL)));
    v103.val[1] = veorq_s8( vandq_s8((int8x16_t)v91, (int8x16_t)v45),  (int8x16_t)(*(_OWORD *)&v103.val[1] & __PAIR128__(0xFFFFFF04FFFFFF04LL, 0xFFFFFF04FFFFFF04LL)));
    v103.val[2] = veorq_s8( vandq_s8((int8x16_t)v92, (int8x16_t)v45),  (int8x16_t)(*(_OWORD *)&v103.val[2] & __PAIR128__(0xFFFFFF04FFFFFF04LL, 0xFFFFFF04FFFFFF04LL)));
    a33 = vaddq_s32(vsubq_s32(v91, vaddq_s32((int32x4_t)v103.val[1], (int32x4_t)v103.val[1])), (int32x4_t)v46);
    a34 = vaddq_s32(vsubq_s32(v92, vaddq_s32((int32x4_t)v103.val[2], (int32x4_t)v103.val[2])), (int32x4_t)v46);
    a31 = vaddq_s32(vsubq_s32(v89, vaddq_s32((int32x4_t)v103.val[0], (int32x4_t)v103.val[0])), (int32x4_t)v46);
    a32 = vaddq_s32(vsubq_s32(v90, vaddq_s32((int32x4_t)v103.val[3], (int32x4_t)v103.val[3])), (int32x4_t)v46);
    unsigned int v93 = (_DWORD *)&a31 + v38 + 386238644;
    int v94 = *(v93 - 8) ^ *(v93 - 3);
    uint64_t v95 = *(v93 - 16);
    int v96 = v95 ^ *(v93 - 14) ^ (v94 + v37 - ((2 * v94) & 0x3EF50970));
    HIDWORD(v97) = v96 ^ v37;
    LODWORD(v97) = v96;
    *unsigned int v93 = (v97 >> 31) + v37 - ((2 * (v97 >> 31)) & 0x3EF50970);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t (*)(uint64_t, uint64_t, __n128, __n128, __n128, __n128, __n128), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 + 8LL * ((551 * (v40 == 386238581)) ^ 0x5E5u)) - 12LL))( v95,  671088640LL,  365LL,  1056246128LL,  v50,  a6,  v42,  92LL,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  v98,  v99,  v100,  v101,  0x100000069LL,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30);
  }

  else if (v52 == 1)
  {
    HIDWORD(v99) = *(_DWORD *)(v41 - 148);
    LODWORD(v101) = *(_DWORD *)(v41 - 136);
    int8x16x4_t v102 = vld4q_s8(v43);
    uint8x16_t v53 = (uint8x16_t)veorq_s8(v102.val[0], (int8x16_t)v44);
    uint16x8_t v54 = vmovl_u8(*(uint8x8_t *)v53.i8);
    int8x16_t v55 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v54.i8);
    int8x16_t v56 = (int8x16_t)vmovl_high_u16(v54);
    uint16x8_t v57 = vmovl_high_u8(v53);
    int8x16_t v58 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v57.i8);
    int8x16_t v59 = (int8x16_t)vmovl_high_u16(v57);
    uint8x16_t v60 = (uint8x16_t)veorq_s8(v102.val[1], (int8x16_t)v44);
    uint16x8_t v61 = vmovl_high_u8(v60);
    uint16x8_t v62 = vmovl_u8(*(uint8x8_t *)v60.i8);
    uint8x16_t v63 = (uint8x16_t)veorq_s8(v102.val[2], (int8x16_t)v44);
    _Q26 = (int8x16_t)vmovl_high_u8(v63);
    _Q25 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v63.i8);
    int8x16_t v66 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q25.i8, 0x10uLL);
    __asm { SHLL2           V25.4S, V25.8H, #0x10 }

    int8x16_t v71 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q26.i8, 0x10uLL);
    __asm { SHLL2           V26.4S, V26.8H, #0x10 }

    v102.val[0] = veorq_s8(v102.val[3], (int8x16_t)v44);
    v102.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v102.val[0]);
    v102.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v102.val[1]);
    v102.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v102.val[0].i8);
    v102.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v102.val[0]);
    v102.val[0] = vorrq_s8( vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v102.val[0].i8), 0x18uLL), v66),  vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v62.i8, 8uLL), v55));
    v102.val[3] = vorrq_s8( vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v102.val[3], 0x18uLL), _Q25),  vorrq_s8((int8x16_t)vshll_high_n_u16(v62, 8uLL), v56));
    v102.val[1] = vorrq_s8( vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v102.val[1].i8), 0x18uLL), v71),  vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v61.i8, 8uLL), v58));
    v102.val[2] = vorrq_s8( vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v102.val[2], 0x18uLL), _Q26),  vorrq_s8((int8x16_t)vshll_high_n_u16(v61, 8uLL), v59));
    int32x4_t v72 = (int32x4_t)veorq_s8( vandq_s8(v102.val[0], (int8x16_t)v48),  (int8x16_t)(*(_OWORD *)&v55 & __PAIR128__(0xFFFFFF03FFFFFF03LL, 0xFFFFFF03FFFFFF03LL)));
    int32x4_t v73 = (int32x4_t)veorq_s8( vandq_s8(v102.val[3], (int8x16_t)v48),  (int8x16_t)(*(_OWORD *)&v56 & __PAIR128__(0xFFFFFF03FFFFFF03LL, 0xFFFFFF03FFFFFF03LL)));
    int32x4_t v74 = (int32x4_t)veorq_s8( vandq_s8(v102.val[1], (int8x16_t)v48),  (int8x16_t)(*(_OWORD *)&v58 & __PAIR128__(0xFFFFFF03FFFFFF03LL, 0xFFFFFF03FFFFFF03LL)));
    int32x4_t v75 = (int32x4_t)veorq_s8( vandq_s8(v102.val[2], (int8x16_t)v48),  (int8x16_t)(*(_OWORD *)&v59 & __PAIR128__(0xFFFFFF03FFFFFF03LL, 0xFFFFFF03FFFFFF03LL)));
    a33 = vaddq_s32(vsubq_s32((int32x4_t)v102.val[1], vaddq_s32(v74, v74)), (int32x4_t)v46);
    a34 = vaddq_s32(vsubq_s32((int32x4_t)v102.val[2], vaddq_s32(v75, v75)), (int32x4_t)v46);
    a31 = vaddq_s32(vsubq_s32((int32x4_t)v102.val[0], vaddq_s32(v72, v72)), (int32x4_t)v46);
    a32 = vaddq_s32(vsubq_s32((int32x4_t)v102.val[3], vaddq_s32(v73, v73)), (int32x4_t)v46);
    int v76 = (uint64_t (*)(_BYTE *, uint64_t, uint64_t, void, void, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, __n128, __n128, __n128, __n128, __n128), uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 + 8LL * ((2021 * (a23 + 1 == v40)) ^ 0x16Du)) - 8LL);
    return v76( byte_100203240,  671088640LL,  365LL,  v76,  v51,  2966230371LL,  3290667251LL,  -(byte_100203240[a23 + v38] - 65),  a9,  a10,  a11,  a12,  a13,  a14,  v42,  a16,  a17,  v98,  v99,  __PAIR64__(v51, v49),  v101,  0x100000069LL,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30);
  }

  else
  {
    *(_DWORD *)(v41 - 14_Block_object_dispose(va, 8) = 2 * (*(_DWORD *)(v41 - 148) ^ v36) + v36 - (v39 & (4 * (*(_DWORD *)(v41 - 148) ^ v36)));
    *(_DWORD *)(v41 - 144) = 2 * (v49 ^ v36) + v36 - (v39 & (4 * (v49 ^ v36)));
    *(_DWORD *)(v41 - 140) = 2 * (v51 ^ v36) + v36 - (v39 & (4 * (v51 ^ v36)));
    *(_DWORD *)(v41 - 136) = 2 * (v50 ^ v36) + v36 - (v39 & (4 * (v50 ^ v36)));
    return v42(2273900069LL, 671088640LL, v44, v45, v46, v47, v48);
  }

uint64_t sub_1000855A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, int a19, unsigned int a20, unsigned int a21)
{
  if (a21 < a20 != a17 - 331976974 < ((a6 + v22 - 226) ^ 0x64AD771Fu) + 199) {
    BOOL v23 = a17 - 331976974 < ((a6 + v22 - 226) ^ 0x64AD771Fu) + 199;
  }
  else {
    BOOL v23 = a17 - 331976974 > a21;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21
                                                                                          + 8LL
                                                                                          * ((49 * !v23) ^ (a6 + v22 + 855)))
                                                                              - 8LL))( a1,  a2,  a3,  a4,  52LL);
}

uint64_t sub_10008563C(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL
}

uint64_t sub_100085684( int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return ((uint64_t (*)(void))(*(void *)(v17
                                        + 8LL
                                        * (((a6 + ((v15 - 818220821) | 0x30C51000) - 103)
}

uint64_t sub_1000856D4( int a1, int8x16_t a2, double a3, double a4, int8x16_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, int a10)
{
  *uint64_t v12 = vaddq_s8( vsubq_s8( *(int8x16_t *)(v14 + (v10 + a1)),  vandq_s8( vaddq_s8(*(int8x16_t *)(v14 + (v10 + a1)), *(int8x16_t *)(v14 + (v10 + a1))),  a5)),  a2);
  return ((uint64_t (*)(void))(*(void *)(v13 + 8LL * (a10 + v11 - 201)) - ((a10 + v11 - 442) | a9) + 41LL))();
}

uint64_t sub_100085734@<X0>(int a1@<W0>, int a2@<W5>, char a3@<W7>, int a4@<W8>)
{
  *(_BYTE *)(v6 + v5) = *(_BYTE *)(v9 + (v4 + a1))
  return ((uint64_t (*)(void))(*(void *)(v8
}

uint64_t sub_100085784( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  BOOL v17 = v14 - 556548185 < (a14 + 1112192248);
  return ((uint64_t (*)(void))(*(void *)(v16 + 8LL * (v15 ^ (32 * v17))) - 12LL))();
}

uint64_t sub_1000857F0( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  int v22 = (a4 - 542830672) & 0x205AF76F;
  int v17 = v15 + a4 - 71;
  int v18 = 831981571 * ((((2 * (v16 - 120)) | 0xA7832B06) - (v16 - 120) - 1405195651) ^ 0xCA6045A7);
  *(void *)(v16 - 112) = a11;
  *(_DWORD *)(v16 - 120) = (a14 + 1199781842) ^ v18;
  *(_DWORD *)(v16 - 116) = v18 + a4 + 848;
  sub_1000889FC(v16 - 120);
  uint64_t v20 = *(_DWORD *)(v16 - 152) & 0x3F;
  *(_BYTE *)(v16 - 220 + (v20 ^ 0x15)) = 46;
  return ((uint64_t (*)(uint64_t))(*(void *)(v14
                                                      + 8LL
                                                      * ((((v20 ^ 0x15) > 0x37)
                                                        * (v22 + (v17 ^ 0x4F32EDB4))) ^ a4))
                                          - 8LL))(2273900069LL);
}

uint64_t sub_100085900()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
}

uint64_t sub_100085958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * (v7 ^ (716 * ((v6 ^ 0x2Au) > 7))))
                            - ((a6 + v9 + v7 - 1502 - 427) | 0xCEu)
                            + 214LL))();
}

uint64_t sub_10008599C()
{
  *(void *)(v4 - 220 + v1 + 1) = 0xAEAEAEAEAEAEAEAELL;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((1689 * ((v0 & 0x38) == 8LL)) ^ v2))
}

uint64_t sub_1000859E4(double a1)
{
  *uint64_t v3 = a1;
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * (((v5 == 0) * v4) ^ v2)) - v1 + 1428))();
}

uint64_t sub_100085A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  return ((uint64_t (*)(void))(*(void *)(v9
                                        + 8LL
                                        * (int)(((((v8 == v6) ^ (v7 - a6 + 35)) & 1)
                                               * (((v7 + 805636779) | 0x80C80520) ^ (v10 - 62))) ^ v7))
                            - 8LL))();
}

void sub_100085A58()
{
}

uint64_t sub_100085A68@<X0>(int a1@<W0>, int a2@<W1>, unsigned int a3@<W2>, int a4@<W8>)
{
  BOOL v11 = v4 < v7;
  *(_BYTE *)(v10 - 220 + (a4 - 1235729443)) = *(_BYTE *)(v9 + (v5 + a2))
  unsigned int v12 = v5 + 1 + a1;
  int v13 = v11 ^ (v12 < a3);
  BOOL v14 = v12 < v4;
  if (!v13) {
    BOOL v11 = v14;
  }
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * (v6 | (32 * v11))) - 12LL))();
}

uint64_t sub_100085ADC@<X0>(int a1@<W5>, int a2@<W8>)
{
  return ((uint64_t (*)(uint64_t))(*(void *)(v3
                                                      + 8LL
                                                      * ((1607 * ((a2 - 1711866057) < 0x38)) ^ (a1 + v2 + 334)))
}

uint64_t sub_100085B3C@<X0>(uint64_t a1@<X0>, unsigned int a2@<W8>)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1 + a2;
  else {
    uint64_t v6 = 56LL;
  }
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * ((1542 * (v6 - v4 + 1711866057 >= ((69 * (v2 ^ 0x31Fu)) ^ 0x63BuLL))) ^ v2))
                            - 8LL))();
}

uint64_t sub_100085BA0(uint64_t a1)
{
  *(void *)(v5 - 220 + v3 + a1) = 0xAEAEAEAEAEAEAEAELL;
  return (*(uint64_t (**)(void))(v4
                              + 8LL
                              * ((((v1 & 0xFFFFFFFFFFFFFFF8LL) == 8) * ((((v2 ^ 0x293) + 109) | 0x100) - 102)) ^ v2 ^ 0x293)))();
}

uint64_t sub_100085BEC(double a1)
{
  double *v2 = a1;
  return (*(uint64_t (**)(void))(v5 + 8LL * (((v4 == 0) * v3) ^ v1)))();
}

uint64_t sub_100085C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
}

void sub_100085C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  int v8 = *(unsigned __int8 *)(v7 - 124) ^ 0x1E;
  if (v8 == 1)
  {
    unsigned int v15 = *(_DWORD *)(v7 - 156);
    unsigned int v14 = *(_DWORD *)(v7 - 152);
    char v11 = a6 + v6 + 125;
    *(_BYTE *)(v7 - 164) = ((8 * v14) ^ 0xA8) - ((v11 ^ 0x68) & (2 * ((8 * v14) ^ 0xA8))) - 82;
    *(_BYTE *)(v7 - 163) = ((v14 >> 5) ^ 0x6C) - 2 * (((v14 >> 5) ^ 0x6C) & 0x2F ^ ((v14 & 0x20) != 0)) - 82;
    char v12 = 92;
    *(_BYTE *)(v7 - 162) = ((v14 >> 13) ^ 0xB5) - ((2 * ((v14 >> 13) ^ 0xB5)) & 0x5C) - 82;
    *(_BYTE *)(v7 - 161) = ((v14 >> 21) ^ 0x6C) - ((2 * ((v14 >> 21) ^ 0x6C)) & 0x5C) - 82;
    HIDWORD(v16) = v15 ^ 7;
    LODWORD(v16) = v14 ^ 0x20000000;
    *(_BYTE *)(v7 - 160) = (v16 >> 29) - ((2 * (v16 >> 29)) & 0x5C) - 82;
    *(_BYTE *)(v7 - 159) = ((v15 >> 5) ^ 0x20) - ((2 * ((v15 >> 5) ^ 0x20)) & 0x5C) - 82;
    *(_BYTE *)(v7 - 15_Block_object_dispose(va, 8) = ((v15 >> 13) ^ 0xDB) - ((2 * ((v15 >> 13) ^ 0xDB)) & 0x5C) - 82;
    unsigned int v13 = (v15 >> 21) ^ 0xFFFFFFAB;
  }

  else
  {
    if (v8 != 2) {
      goto LABEL_6;
    }
    unsigned int v9 = *(_DWORD *)(v7 - 156);
    unsigned int v13 = *(_DWORD *)(v7 - 152);
    HIDWORD(v10) = v9 ^ 7;
    LODWORD(v10) = v13 ^ 0x20000000;
    *(_BYTE *)(v7 - 164) = ((v9 >> 21) ^ 0xAB) - ((2 * ((v9 >> 21) ^ 0xAB)) & 0x5C) - 82;
    *(_BYTE *)(v7 - 163) = ((v9 >> (a6 + v6 + 82)) ^ 0xDB) - ((2 * ((v9 >> (a6 + v6 + 82)) ^ 0xDB)) & 0x5C) - 82;
    *(_BYTE *)(v7 - 162) = ((v9 >> 5) ^ 0x20) - 2 * (((v9 >> 5) ^ 0x20) & 0x2F ^ ((v9 & 0x20) != 0)) - 82;
    *(_BYTE *)(v7 - 161) = (v10 >> 29) - ((2 * (v10 >> 29)) & 0x5C) - 82;
    *(_BYTE *)(v7 - 160) = ((v13 >> 21) ^ 0x6C) - ((2 * ((v13 >> 21) ^ 0x6C)) & 0x5C) - 82;
    *(_BYTE *)(v7 - 159) = ((v13 >> 13) ^ 0xB5) - ((2 * ((v13 >> 13) ^ 0xB5)) & 0x5C) - 82;
    *(_BYTE *)(v7 - 15_Block_object_dispose(va, 8) = ((v13 >> 5) ^ 0x6C) - ((2 * ((v13 >> 5) ^ 0x6C)) & 0x5C) - 82;
    char v11 = a6 + v6 + 125;
    char v12 = 80;
    LOBYTE(v13) = (8 * v13) ^ 0xA8;
  }

  *(_BYTE *)(v7 - 157) = v13 - (((_BYTE)v13 << (((v11 - 73) ^ 0xEE) & 0x73)) & v12) - 82;
LABEL_6:
  JUMPOUT(0x100084A2CLL);
}

uint64_t sub_1000860E0@<X0>(uint64_t a1@<X4>, int a2@<W8>)
{
  unsigned int v9 = v5 + a2;
  unsigned int v10 = *(_DWORD *)(v8 - 220 + ((v5 + a2) & 0xFFFFFFFC) + 72);
  *(_BYTE *)(a1 + v9) = ((v10 >> (v3 ^ (v7 + 117) ^ (v7 + 24))) ^ 0x2D)
                      - ((2 * ((v10 >> (v3 ^ (v7 + 117) ^ (v7 + 24))) ^ 0x2D)) & 0x5C)
                      - 82;
  *(_BYTE *)(a1 + v9 + 2) = (BYTE1(v10) ^ 0x5D) - ((2 * (BYTE1(v10) ^ 0x5D)) & 0x5C) - 82;
  *(_BYTE *)(a1 + v9 + 1) = (BYTE2(v10) ^ 2) - 2 * ((BYTE2(v10) ^ 2) & 0x2F ^ BYTE2(v10) & 1) - 82;
  *(_BYTE *)(a1 + v9 + 3) = v10 ^ 0x9E;
  unsigned int v11 = *(_DWORD *)(v8 - 128) + 1635505288;
  BOOL v12 = v11 < v2;
  BOOL v13 = v5 - 2105878913 < v11;
  if (v5 - 2105878913 < v2 != v12) {
    BOOL v13 = v12;
  }
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * ((v13 * v4) ^ v3)) - 8LL))();
}

void sub_100086278()
{
}

uint64_t sub_100086284()
{
  return 0LL;
}

void sub_1000862C4(_DWORD *a1)
{
  unsigned int v1 = *a1 ^ (268847287 * (((a1 | 0xE34F1B4D) - (a1 & 0xE34F1B4D)) ^ 0x1CE50A65));
  __asm { BR              X14 }

uint64_t sub_10008637C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(v3
                              + 8LL
                              * ((208
                                * (*(_DWORD *)(*(void *)(a1 + 8) + v4) != ((9 * ((v1 + 784) ^ 0x62C) + 494426928) & 0xE287A3FB ^ v2))) ^ (v1 + 784))))();
}

uint64_t sub_1000863D0()
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL
                              * ((((v3 - 1362986814) * (v0 - 1362986814) >= 0) * (((v2 - 789) | 0x241) ^ 0x370)) ^ v2)))();
}

uint64_t sub_100086410@<X0>(uint64_t a1@<X8>)
{
  uint64_t v6 = v2;
  uint64_t v7 = v2;
  unsigned int v5 = (v3 - 557) ^ (2078219279
                   * (((&v5 | 0xEB04F5FB) - &v5 + (&v5 & 0x14FB0A00)) ^ 0x31FE638F));
  uint64_t v8 = a1;
  return (*(uint64_t (**)(unsigned int *))(v1 + 8LL * (v3 - 684)))(&v5);
}

void sub_10008656C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) + 1178560073 * ((2 * (a1 & 0xDA2E353F) - a1 + 634505920) ^ 0xC2E4E8A8);
  __asm { BR              X8 }

uint64_t sub_10008663C()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL * ((1084 * (*(_DWORD *)(v2 - 0x2F801B1FA3259439LL) == 528123064)) ^ v1))
                            - ((v1 - 295) | 0x100u)
                            + 393LL))();
}

uint64_t sub_100086688()
{
  unsigned int v3 = *(_DWORD *)(v2 - 0x2F801B1FA3259441LL) - 187182978;
  unsigned int v4 = (((v1 - 436) | 0x112) ^ 0xC651864A) + *(_DWORD *)(v2 - 0x2F801B1FA3259445LL);
  BOOL v5 = v3 < 0x37D6A30C;
  BOOL v6 = v3 > v4;
  if (v5 != v4 < 0x37D6A30C) {
    BOOL v6 = v5;
  }
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * ((v1 + 1593) | (4 * !v6))) - 8LL))();
}

uint64_t sub_100086720(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v9 = *(void *)(v8 - 0x2F801B1FA3259451LL);
  int v10 = *(unsigned __int8 *)(v9 + (v6 - 1123996307)) ^ 0xAE;
  return (*(uint64_t (**)(void))(v4
                              + 8LL
                              * ((((v11 + v5 - 2 * (v11 & (v5 + 4) ^ v10 & 4)) & 0xFFFFFF ^ 0x7A84B8)
                                - (v7
                                 + *(_DWORD *)(a1 + 20)) == -1605097481) | a4)))();
}

uint64_t sub_1000867F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(void))(*(void *)(v6
                                        + 8LL
                                        * ((4086
                                          * ((((a3 - 2064664884) & 0x7B1047E4 ^ 0x400005DB ^ (81 * (a3 ^ 0x7E4))) & a6) != 0)) ^ a3))
                            - 12LL))();
}

uint64_t sub_1000868C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((3758
}

uint64_t sub_100086910@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = v2;
  *(_DWORD *)(result + 24) = -528097395;
  return result;
}

uint64_t sub_1000869C8@<X0>(void *a1@<X0>, int a2@<W4>, _DWORD *a3@<X8>)
{
  *(void *)(*a1 - 0x60E62A17C8DAFC6ALL) = 0LL;
}

uint64_t sub_100086A24@<X0>(void *a1@<X0>, int a2@<W2>, _DWORD *a3@<X8>)
{
  uint64_t v7 = 44 * (a2 ^ 0x6AAu);
  *(void *)(*a1 - 0x60E62A17C8DAFC6ALL) = v5 + v6 + (v7 ^ 0x1B0);
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (int)((1853 * (*a3 == v4)) ^ v7)) - (v7 ^ 0x1B0LL)))();
}

void sub_100086A9C(uint64_t a1)
{
  *(_DWORD *)(*(void *)(a1 + 8) - 0x5F366804CF4E5665LL) = v3;
  _DWORD *v2 = v1;
  JUMPOUT(0x1000869B8LL);
}

void sub_100086AC0(_DWORD *a1)
{
  unsigned int v1 = *a1
     + 1178560073 * (((a1 | 0x375468D4) - (_DWORD)a1 + (a1 & 0xC8AB972B)) ^ 0xD0614ABC);
  __asm { BR              X14 }

uint64_t sub_100086C20()
{
  *(_DWORD *)(v3 + v1) = v0;
  *(void *)(v6 - 12_Block_object_dispose(va, 8) = v3;
  *(_DWORD *)(v6 - 136) = v2
                        - 23
                        + ((((v6 - 144) | 0xF8EEAC69) - (v6 - 144) + ((v6 - 144) & 0x7115390)) ^ 0x614F7C4D) * v4
                        + 331;
  *(void *)(v6 - 144) = v5;
  return sub_100082A9C(v6 - 144);
}

uint64_t sub_100087ECC(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t))((char *)*(&off_100257500
                                                    + ((345 * (*(_DWORD *)(a2 + 4) == 1007577615)) ^ 0x28Bu))
                                          - 8))(4294925278LL);
}

uint64_t sub_100087F14@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_BYTE *)(*(void *)(a2 + 96) + 448LL) = *(_BYTE *)(*(void *)(a1 + 8) + 12LL);
  return ((uint64_t (*)(void))(*(void *)(v2 + 3016) - 8LL))(0LL);
}

uint64_t sub_100087F70@<X0>(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + (v6 + v3)) = *(_BYTE *)(v2 + (v6 + v3));
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * (((v6 - 1 == v4) * v5) ^ v7)) - 8LL))(0LL);
}

uint64_t sub_100087FA4(uint64_t a1)
{
  int v1 = 831981571 * ((((2 * a1) | 0xFDCFEF62) - a1 - 2129131441) ^ 0xE7462795);
  int v2 = *(_DWORD *)(a1 + 8) + v1;
  int v3 = *(_DWORD *)(a1 + 12) - v1;
  unsigned int v5 = v3 - 1054797341;
  BOOL v4 = v3 - 1054797341 < 0;
  LODWORD(v6) = 1054797341 - v3;
  if (v4) {
    uint64_t v6 = v6;
  }
  else {
    uint64_t v6 = v5;
  }
  return ((uint64_t (*)(void))(*(void *)((char *)*(&off_10025B940 + (v2 ^ 0x317))
                                        + 8 * ((1222 * (v6 != ((2 * (_DWORD)v6) & 0xAAF97620))) ^ v2)
                                        - 4)
                            - 12LL))();
}

void sub_100088054(int a1@<W8>)
{
  **(_DWORD **)(v1 - 0x2A461383296CA23CLL) = (v2 + 1434237712) ^ 0x36F38F09;
  *(_DWORD *)(v1 - 0x2A461383296CA240LL) = a1 + 1;
}

uint64_t sub_1000880AC(_DWORD *a1)
{
  unsigned int v1 = 268847287
     * ((2 * ((a1 ^ 0x2D90AAAC) & 0xA0689A7) - (a1 ^ 0x2D90AAAC) + 1979283032) ^ 0xA7C3CDDC);
  return ((uint64_t (*)(void))(*(void *)((char *)*(&off_10025B940 + (int)((a1[4] - v1) ^ 0x769))
                                        + 8 * (int)((122 * ((*a1 ^ v1 ^ 0x1F7A84B8) - 1 > 0x62)) ^ (a1[4] - v1))
                                        - 4)
                            - 4LL))();
}

uint64_t sub_100088154()
{
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * (int)((((v1 + 823051299) & 0xCEF13BDC ^ 0x657) * ((v0 - 100) > 0x9B)) ^ (v1 + 823051299) & 0xCEF13BDC)))();
}

uint64_t sub_100088198@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  *(_DWORD *)(*(void *)(result + 8) - 0x721003D414281A36LL) = v3;
  return result;
}

void sub_100088210(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) - 3804331 * (((a1 | 0x51A664) - (a1 & 0x51A664)) ^ 0x7E848392);
  __asm { BR              X10 }

uint64_t sub_1000882D0@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, int a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  unsigned int v13 = 1178560073 * ((2 * (&a4 & 0x493717C8) - &a4 - 1228347340) ^ 0x51FDCA5C);
  a6 = v11 - v13 - 529;
  a7 = 1611372689 - v13;
  a9 = v12;
  a4 = &STACK[0x60E62A17C8DAFC6A];
  a5 = &STACK[0x5F366804CF4E5671];
  uint64_t v14 = (*(uint64_t (**)(unint64_t **))(a1 + 8LL * (v11 - 752)))(&a4);
  return (*(uint64_t (**)(uint64_t))(v10
                                            + 8LL
}

uint64_t sub_1000883B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  return (*(uint64_t (**)(void))(v12 + 8LL * ((7 * (((a11 == v11) ^ v13) & 1)) ^ v13)))();
}

uint64_t sub_1000883FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  *(_BYTE *)(v11 + (v13 + v12)) = *(_BYTE *)(a9 + (v13 + v12)) ^ (v16 - 91);
  return (*(uint64_t (**)(void))(v15 + 8LL * ((7 * (v13 + 1 + v12 < (a11 ^ v14))) ^ v16)))();
}

void sub_100088440(_DWORD *a1@<X8>)
{
  uint64_t v4 = *v3;
  *(void *)(v3[3] - 0x697D3DFF8FBD18CALL) = v1;
  *(_DWORD *)(v4 - 0x4CB6A8AC7824C5C4LL) = v2;
  *((_DWORD *)v3 + 3) = *a1;
}

void DLHL()
{
  v0[1] = 1178560073
  sub_1000A80C0(v0);
  __asm { BR              X8 }

uint64_t sub_100088578( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  a13 = &STACK[0x5E5ED88ABFC5691F];
  a14 = (831981571 * (((&a13 | 0x5366F27) + (~&a13 | 0xFAC990D8)) ^ 0x9C97BF02)) ^ 0x5D;
  sub_100067AB4((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17
                                                                                          + 8LL
                                                                                          * ((2600 * (a15 == v15)) ^ v16))
                                                                              - 12LL))( v18,  v19,  v20,  v21,  v22);
}

uint64_t sub_100088620( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16)
{
  unsigned int v23 = 1224239923
      * ((((2 * (&a13 ^ 0x9F5B1C94)) | 0xF1532BEC) - (&a13 ^ 0x9F5B1C94) + 123103754) ^ 0x954174B5);
  LODWORD(a13) = v18 - ((2 * v18) & 0xBA057A34) - v23 + 1560460570;
  LODWORD(a15) = (v20 - 717) ^ v23;
  a14 = a12;
  sub_10007D800((uint64_t)&a13);
  unsigned int v24 = 69008221 * (((~&a13 & 0x57029748) - (~&a13 | 0x57029749)) ^ 0x84A0C543);
  a13 = v16;
  a16 = v24 ^ ((v17 ^ 0xDE7CC7F7) + 2009038778 + ((2 * v17) & 0xBCF98FEE));
  a15 = a12;
  HIDWORD(a14) = v24 + v20 - 631;
  uint64_t v25 = ((uint64_t (*)(uint64_t *))(*(void *)(v21 + 8LL * (v20 - 1442)) - 4LL))(&a13);
  return (*(uint64_t (**)(uint64_t))(v22 + 8LL * ((287 * ((_DWORD)a14 == (v20 ^ 0x42E ^ (v19 + 534)))) ^ v20)))(v25);
}

uint64_t sub_100088774( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, uint64_t a16, unint64_t *a17, int a18)
{
  int v22 = ((&a13 + 487303392 - 2 * ((unint64_t)&a13 & 0x1D0BA8E0)) ^ 0xEFB85537) * v20;
  a14 = (v19 + 368398553) ^ v22;
  a15 = v22 ^ 0x3AA94DEE;
  a16 = a12;
  a17 = &STACK[0x2940FF9A650624D0];
  a13 = v22 ^ 0x44550099;
  uint64_t v23 = sub_1000A817C((uint64_t)&a13);
  return (*(uint64_t (**)(uint64_t))(v21
                                            + 8LL
                                            * ((328 * (a18 == v18 + ((v19 + 397724959) & 0xE84B2EFE) - 630)) ^ v19)))(v23);
}

uint64_t sub_10008883C()
{
  int v5 = (v3 - 998) | 4;
  unsigned int v13 = v3
  uint64_t v11 = &STACK[0x5F366804CF4E55C9];
  int v12 = v8;
  ((void (*)(unint64_t **))(*(void *)(v4 + 8LL * (v3 - 1389)) - 4LL))(&v11);
  LODWORD(v12) = v3
  uint64_t v11 = v8;
  sub_10008DBEC((uint64_t)&v11);
  if (HIDWORD(v12) == v2 + v5 - 630) {
    int v6 = v9;
  }
  else {
    int v6 = HIDWORD(v12);
  }
  int v12 = v8;
  LODWORD(v11) = (v3 - 1480) ^ (((((2 * (&v11 ^ 0x804118BC)) | 0x67E0F30A)
                                - (&v11 ^ 0x804118BC)
                                - 871397765) ^ 0x60133333)
                              * v1);
  v0(&v11);
  LODWORD(v11) = (v5 - 486) ^ (((&v11 & 0xFBD564C | ~(&v11 | 0xFBD564C)) ^ 0x23E0FBB9) * v1);
  int v12 = v10;
  v0(&v11);
  return v6 ^ v2;
}

uint64_t sub_1000889FC(uint64_t a1)
{
  int v1 = 831981571 * ((a1 & 0x847A176C | ~(a1 | 0x847A176C)) ^ 0xE22438B7);
  int v2 = *(_DWORD *)(a1 + 4) - v1;
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned int v4 = (*(_DWORD *)a1 ^ v1) - 1552108636;
  int v5 = v4
     + (*(_DWORD *)(v3 - 0x7F1325F673F67E13LL) ^ 0x2D96AD95)
     - ((2 * (v4 + (*(_DWORD *)(v3 - 0x7F1325F673F67E13LL) ^ 0x2D96AD95))) & 0x5B2D5B2A)
     + 764849557;
  *(_DWORD *)(v3 - 0x7F1325F673F67E13LL) = v5;
  return ((uint64_t (*)(void))(*(void *)((char *)*(&off_10025B940 + v2 - 845)
                                        + 8 * ((13 * ((v5 ^ 0x2D96AD95u) < v4)) ^ v2)
                                        - 4)
                            - 8LL))();
}

void sub_100088AC0(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 - 0x7F1325F673F67E17LL) = (*(_DWORD *)(a1 - 0x7F1325F673F67E17LL) ^ 0x357B6407)
                                         + 897278983
                                         - ((2 * (*(_DWORD *)(a1 - 0x7F1325F673F67E17LL) ^ 0x357B6407) + 2) & 0x6AF6C80E)
                                         + 1;
}

void sub_100088B08(uint64_t a1)
{
  int v1 = 268847287 * ((a1 - 2 * (a1 & 0x4542390B) + 1161967883) ^ 0xBAE82823);
  if (*(void *)(a1 + 24)) {
    BOOL v2 = (*(_DWORD *)(a1 + 4) ^ v1) == 1904548784;
  }
  else {
    BOOL v2 = 1;
  }
  char v3 = v2;
  __asm { BR              X9 }

uint64_t sub_100088BD4@<X0>(int a1@<W8>)
{
  unsigned int v3 = a1 & 0xFD8D04F7;
  BOOL v4 = (*(uint64_t (**)(uint64_t))(v1 + 8LL * (int)((a1 & 0xFD8D04F7) - 1045)))(32LL) != 0;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (int)((480 * v4) ^ v3)) - ((v3 ^ 0x2DF) - 927) + 637LL))();
}

uint64_t sub_100088C34()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * (((v1 == ((8 * v3) ^ 0x1260 ^ (v0 + 488)))
                                          * ((v3 - 1489376017) & 0x58C616AF ^ 0x633)) ^ v3))
                            - 8LL))();
}

uint64_t sub_100088C98@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unsigned int v11 = v2 - 1904548785;
  int v12 = v2 - 1;
  int v13 = *(unsigned __int8 *)(v8 + v11);
  if (v13 == 174) {
    __asm { BR              X11 }
  }

  if (v13 == 46)
  {
    int v14 = 528123064;
    uint64_t v15 = *(void *)(v4 + 16);
    int v16 = (*(_BYTE *)(v4 + 8) + v5);
    *(void *)uint64_t result = v8;
    *(_DWORD *)(result + _Block_object_dispose(va, 8) = v7;
    *(_DWORD *)(result + 12) = v12;
    if (v16 == 39) {
      int v17 = 1243934570;
    }
    else {
      int v17 = 1243934571;
    }
    *(_DWORD *)(result + 16) = 1123996310;
    *(_DWORD *)(result + 20) = v17;
    *(_DWORD *)(result + 24) = 528123064;
    *(void *)(v15 - 0x13240EAB5AFDBE9DLL) = a2;
  }

  else
  {
    uint64_t result = (*(uint64_t (**)(void))(v6 + 8LL * (v9 - 1550)))();
    int v14 = -528097439;
  }

  *(_DWORD *)(v4 + 12) = v14;
  return result;
}

void sub_100088D78(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }

uint64_t sub_100088DC0(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((417 * (**(_BYTE **)(a2 + 8) == 0)) ^ v3)) - 8LL))();
}

uint64_t sub_100088DEC()
{
  unsigned int v2 = v1 - ((2 * v1 - 2015155206) & 0xFC97EF2C) + 1111330195;
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * ((2205
                                          * (((2 * v2) & 0xF5BFAFDE ^ 0xF497AF0C) + (v2 ^ 0x84942079) + 2101280531 != 2015287042)) ^ 0xA8u))
                            - 8LL))();
}

uint64_t sub_100088E9C(uint64_t a1, uint64_t a2, int a3)
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * (a3 | (2
}

uint64_t sub_100088EF4( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v7
                                                                        + 8LL
                                                                        * ((46
                                                                          * (v9 - a7 - 1167 >= (unint64_t)(((a4 - 451) | 0x52) + 1156)
                                                                                             - 1590)) ^ a4))
                                                            - 4LL))( a1,  a2,  v8);
}

uint64_t sub_100088F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  BOOL v8 = v7 >= ((a6 - 2016817513) & 0xFF3F6FDF) + 2029435731;
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * (((16 * v8) | (32 * v8)) ^ a6)) - (((a6 - 580) | 0x140u) ^ 0x556LL)))();
}

uint64_t sub_100088F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  unsigned int v14 = v12 + v11 + v13;
  uint64_t v15 = v8 + v14;
  __int128 v16 = *(_OWORD *)(v15 - 31);
  uint64_t v17 = v9 + v14;
  *(_OWORD *)(v17 - 15) = *(_OWORD *)(v15 - 15);
  *(_OWORD *)(v17 - 31) = v16;
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL
}

void sub_100088FF0()
{
}

uint64_t sub_100088FFC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(a1 + 96) + 1424LL) = v2 - 1997194443 + ((v3 + 50920936) | 0x84004041);
  *(void *)(*(void *)(a1 + 96) + 520LL) = *(void *)(a2 + 8) + 1LL;
  return 0LL;
}

void sub_1000891F0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }

uint64_t sub_100089264@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((32
                                          * (((a1 - 1007577602) ^ 0x6DCF7EFEF8FFCCFBLL)
                                           - 0x6DCF7EFE0E80D58CLL
}

uint64_t sub_100089300()
{
  int v7 = *(unsigned __int8 *)(v3 + v4 - 0x5030BD1C343C9D05LL) - *(unsigned __int8 *)(v1 + v4 - 0x5030BD1C343C9D05LL);
  int v8 = ((v7 << (v6 + ((v2 + 42) & 0xBF))) & (v2 - 77903020)) + (v7 ^ v0) == v0;
  return ((uint64_t (*)(uint64_t))(*(void *)(v5 + 8LL * (((2 * v8) | (v8 << 6)) ^ v2)) - 4LL))(4294925278LL);
}

uint64_t sub_10008937C()
{
  BOOL v5 = v2 < v0;
  unint64_t v6 = v3 - 0x5030BD1B49BDA63BLL + ((v1 + 1448703809) & 0xA9A688BE);
  int v7 = v5 ^ (v6 < v0);
  BOOL v8 = v6 < v2;
  if (!v7) {
    BOOL v5 = v8;
  }
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((v1 - 19) | (32 * !v5))) - 8LL))();
}

uint64_t sub_1000893F8@<X0>(int a1@<W8>)
{
  BOOL v3 = a1 == ((v1 - 159) | 0x90) + 1007577460;
}

uint64_t sub_100089450()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((1902
                                          * ((((*v0 - 42) << ((v1 + 40) & 0xD3 ^ 0x92)) & 0x5FBCEFAC)
                                           + ((*v0 - 42) ^ 0xAFDE77D6) == -1344374826)) ^ v1))
                            - 4LL))();
}

uint64_t sub_1000894C4()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1346
                                          * ((((v3 + 508) ^ (v1 - 621)) & (2 * (*(unsigned __int8 *)(v2 + 1) - 134)))
}

uint64_t sub_100089508()
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((1741
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 2) - 72)))
}

uint64_t sub_100089548()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((486
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v2 + 3) - 134)))
}

uint64_t sub_10008958C()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((425
                                          * (((v2 ^ 0x204 ^ v3) & (2 * (*(unsigned __int8 *)(v1 + 4) - 247)))
}

uint64_t sub_1000895D0()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1000
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v2 + 5) - 13)))
}

uint64_t sub_100089618()
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((1046
                                          * ((v1 & (2 * (v4 + *(unsigned __int8 *)(v2 + 6) - 660)))
}

uint64_t sub_100089658()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((((v1 & (2 * (*(unsigned __int8 *)(v2 + 7) - 1)))
                                           + ((*(unsigned __int8 *)(v2 + 7) - 1) ^ v0) == v0)
                                          * (v3 + 1074)) ^ v3))
                            - 4LL))();
}

uint64_t sub_100089694()
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((1266
                                          * (((v1 + v2 - 659) & (2 * (*(unsigned __int8 *)(v3 + 8) - 4)))
}

uint64_t sub_1000896D4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(v5 + 96) + 1428LL) = 455103712;
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * (int)(((*(_DWORD *)(a2 + 4) != ((v3 - 1696148736) & 0x65192CEF ^ (v2 + 280)))
                                               * ((v3 + 2034997760) & 0x86B467FB ^ 0x2B3)) ^ v3))
                            - 4LL))();
}

uint64_t sub_100089750(uint64_t a1, uint64_t a2)
{
  int v6 = **(unsigned __int8 **)(a2 + 8) - 42;
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((402 * ((v3 & (2 * v6)) + (v6 ^ (v2 + (v4 ^ 0x222) - 177)) == v2)) ^ v4))
                            - 4LL))();
}

uint64_t sub_100089798()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1577
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 1) - 134)))
}

uint64_t sub_1000897DC()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1681
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 2) - 72)))
                                           + ((*(unsigned __int8 *)(v3 + 2) - 72) ^ v0) == v0
                                                                                         + ((v2 - 627) | 0x91)
                                                                                         - 177)) ^ v2))
                            - 4LL))();
}

uint64_t sub_100089824()
{
  int v5 = ((v2 - 514) | 0x20) + *(unsigned __int8 *)(v3 + 3) - 311;
  BOOL v6 = (v1 & (2 * v5)) + (v5 ^ v0) == v0;
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((v6 | (4 * v6)) ^ v2)) - 4LL))();
}

uint64_t sub_100089860()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1927
                                          * ((((*(unsigned __int8 *)(v3 + 4) - 247) << (((v2 + 106) & 0xB3) + 80)) & v1)
}

uint64_t sub_1000898B4()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((306
                                          * ((((*(unsigned __int8 *)(v3 + 5) - 13) << ((v2 ^ 0x22) + 80)) & v1)
}

uint64_t sub_1000898F8()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((((v1 & (2 * (*(unsigned __int8 *)(v3 + 6) - 1)))
                                           + ((*(unsigned __int8 *)(v3 + 6) - 1) ^ v0) == v0)
                                          * (v2 + 2033)) ^ v2))
                            - 4LL))();
}

uint64_t sub_100089930()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1514
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 7) - 1)))
}

uint64_t sub_100089978()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1702
                                          * (((v1 + 3 * (v2 ^ 0x2AE) - 183) & (2 * (*(unsigned __int8 *)(v3 + 8) - 5)))
}

uint64_t sub_1000899C8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(v5 + 96) + 1428LL) = 455103716;
}

uint64_t sub_100089A24(uint64_t a1, uint64_t a2)
{
  int v6 = **(unsigned __int8 **)(a2 + 8) - 42;
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL * ((1995 * ((v3 & (2 * v6)) + (v4 ^ 0x17 ^ (v2 - 102) ^ v6) == v2)) ^ v4))
                            - 4LL))();
}

uint64_t sub_100089A6C()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((565
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v2 + 1) - 134)))
}

uint64_t sub_100089AB0()
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((618
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v2 + 2) - 72)))
}

uint64_t sub_100089AF0()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * (v3 | (4
                                               * ((v1 & (2 * (*(unsigned __int8 *)(v2 + 3) - 134)))
                                                + ((*(unsigned __int8 *)(v2 + 3) - 134) ^ v0) == v0
                                                                                               + ((v3 + 1038415102) & 0xC21B0AF6)
                                                                                               - 166))))
                            - 4LL))();
}

uint64_t sub_100089B3C()
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((1558
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v2 + 4) - 247)))
}

uint64_t sub_100089B84()
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((935
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v2 + 5) - 13)))
}

uint64_t sub_100089BC4()
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((488
                                          * ((((*(unsigned __int8 *)(v2 + 6) - 1) << (v4 ^ 0xA7)) & v1)
}

uint64_t sub_100089C08()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1668
                                          * ((((*(unsigned __int8 *)(v2 + 7) - 1) << (((v3 - 43) | 0x20) + 91)) & v1)
}

uint64_t sub_100089C4C()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((491
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v2 + 8) - 11)))
}

uint64_t sub_100089C94( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, int a31)
{
  int v35 = (v31 - 181) | 0x85;
  *(_DWORD *)(*(void *)(v33 + 96) + 1428LL) = 455103728;
  int v36 = 235795823 * ((((v34 - 120) ^ 0x256BA31D) & 0xF7DF73A9 | ~((v34 - 120) ^ 0x256BA31D | 0xF7DF73A9)) ^ 0xB9E66612);
  *(_DWORD *)(v34 - 112) = (406 * (v35 ^ 0x84) + 1270501385) ^ v36;
  *(_DWORD *)(v34 - 10_Block_object_dispose(va, 8) = v36 + v35 + 426522882;
  *(void *)(v34 - 120) = &STACK[0x7F1325F673F67EC3];
  uint64_t v37 = sub_100060F54(v34 - 120);
  return ((uint64_t (*)(uint64_t))(*(void *)(v32
                                                      + 8LL
                                                      * ((43
                                                        * (*(_DWORD *)v33
                                                         - 1692668030
                                                         + ((2 * a31) & 0x68 ^ 0x28)
                                                         + (a31 & 0x3F ^ 0x4FE3FBA1u) < 0xFFFFFFC0)) ^ v35))
                                          - 8LL))(v37);
}

uint64_t sub_100089EA4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20)
{
  unsigned int v24 = v22 - 1340341171;
  if (v24 <= 0x40) {
    unsigned int v24 = 64;
  }
  return ((uint64_t (*)(void))(*(void *)(v23
                                        + 8LL * (((113 * (a20 ^ 0x4CA) - 889) * (a5 - v20 - v21 + v24 < 0xF)) ^ a20))
                            - 8LL))();
}

uint64_t sub_100089F34(int a1, int a2, uint64_t a3, int a4)
{
  int v9 = v5 + v4;
  int v10 = v9 + v6;
  return ((uint64_t (*)(void))(*(void *)(v8
                                        + 8LL * ((46 * (a4 + (v7 ^ 0x745u) - 1229 - v9 - 1334007261 < a2 + v10)) ^ v7))
                            - 12LL))();
}

uint64_t sub_100089F88( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, int a22, char a23)
{
  return ((uint64_t (*)(void))(*(void *)(v26
                                        + 8LL
                                        * (v25 ^ (315
}

uint64_t sub_100089FE8@<X0>(int a1@<W8>)
{
  v7.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
  v7.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
  v8.i64[0] = 0xAEAEAEAEAEAEAEAELL;
  v8.i64[1] = 0xAEAEAEAEAEAEAEAELL;
  *(int8x16_t *)(v3 + (a1 + v1)) = vaddq_s8(vsubq_s8(*v6, vandq_s8(vaddq_s8(*v6, *v6), v7)), v8);
}

void sub_10008A058()
{
}

uint64_t sub_10008A064(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

uint64_t sub_10008A0A8@<X0>( int a1@<W6>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17)
{
  *(&a17 + (a2 + v17)) = *(_BYTE *)(v18 + v22 - 1460632493)
                                     - ((2 * *(_BYTE *)(v18 + v22 - 1460632493)) & 0x5C)
                                     - 82;
  return ((uint64_t (*)(void))(*(void *)(v20
}

uint64_t sub_10008A110( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, int a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, int a32, int a33, int a34, int a35, int a36, int a37, int a38, unsigned __int8 a39, int32x4_t a40, int32x4_t a41, int32x4_t a42, int32x4_t a43)
{
  unsigned int v51 = (uint64_t (*)(uint64_t, __n128, __n128, __n128, __n128, __n128))(*(void *)(v45
                                                                                            + 8LL * (v48 + v43 - 531))
                                                                                - 8LL);
  v52.n128_u64[0] = 0xAEAEAEAEAEAEAEAELL;
  v52.n128_u64[1] = 0xAEAEAEAEAEAEAEAELL;
  __n128 v53 = (__n128)vdupq_n_s32(0x1F7A84BCu);
  __n128 v54 = (__n128)vdupq_n_s32(0x1F7A84B8u);
  __n128 v55 = (__n128)vdupq_n_s32(0x1F7A84BBu);
  v56.n128_u64[0] = 0x5C5C5C5C5C5C5C5CLL;
  v56.n128_u64[1] = 0x5C5C5C5C5C5C5C5CLL;
  int v57 = a39 ^ 0x1E;
  if (v57 == 2)
  {
    int8x16x4_t v102 = vld4q_s8(&a23);
    uint8x16_t v82 = (uint8x16_t)veorq_s8(v102.val[0], (int8x16_t)v52);
    uint16x8_t v83 = vmovl_u8(*(uint8x8_t *)v82.i8);
    uint16x8_t v84 = vmovl_high_u8(v82);
    uint8x16_t v85 = (uint8x16_t)veorq_s8(v102.val[1], (int8x16_t)v52);
    _Q22 = vmovl_u8(*(uint8x8_t *)v85.i8);
    _Q21 = vmovl_high_u8(v85);
    __asm
    {
      SHLL2           V23.4S, V21.8H, #0x10
      SHLL2           V24.4S, V22.8H, #0x10
    }

    uint8x16_t v90 = (uint8x16_t)veorq_s8(v102.val[2], (int8x16_t)v52);
    uint16x8_t v91 = vmovl_high_u8(v90);
    uint16x8_t v92 = vmovl_u8(*(uint8x8_t *)v90.i8);
    v102.val[0] = veorq_s8(v102.val[3], (int8x16_t)v52);
    v102.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v102.val[0]);
    v102.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v102.val[1]);
    v102.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v102.val[1].i8);
    v102.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v102.val[0].i8);
    v102.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v102.val[0]);
    v102.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v102.val[0].i8);
    int32x4_t v93 = (int32x4_t)vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q22.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v92.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v83.i8), 0x18uLL)),  v102.val[0]);
    int32x4_t v94 = (int32x4_t)vorrq_s8( vorrq_s8( vorrq_s8(_Q24, (int8x16_t)vshll_high_n_u16(v92, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v83), 0x18uLL)),  v102.val[3]);
    int32x4_t v95 = (int32x4_t)vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v91.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v84.i8), 0x18uLL)),  v102.val[1]);
    int32x4_t v96 = (int32x4_t)vorrq_s8( vorrq_s8( vorrq_s8(_Q23, (int8x16_t)vshll_high_n_u16(v91, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v84), 0x18uLL)),  v102.val[2]);
    v102.val[0] = veorq_s8( vandq_s8((int8x16_t)v93, (int8x16_t)v53),  (int8x16_t)(*(_OWORD *)v102.val & __PAIR128__(0xFFFFFF04FFFFFF04LL, 0xFFFFFF04FFFFFF04LL)));
    v102.val[3] = veorq_s8( vandq_s8((int8x16_t)v94, (int8x16_t)v53),  (int8x16_t)(*(_OWORD *)&v102.val[3] & __PAIR128__(0xFFFFFF04FFFFFF04LL, 0xFFFFFF04FFFFFF04LL)));
    v102.val[1] = veorq_s8( vandq_s8((int8x16_t)v95, (int8x16_t)v53),  (int8x16_t)(*(_OWORD *)&v102.val[1] & __PAIR128__(0xFFFFFF04FFFFFF04LL, 0xFFFFFF04FFFFFF04LL)));
    v102.val[2] = veorq_s8( vandq_s8((int8x16_t)v96, (int8x16_t)v53),  (int8x16_t)(*(_OWORD *)&v102.val[2] & __PAIR128__(0xFFFFFF04FFFFFF04LL, 0xFFFFFF04FFFFFF04LL)));
    a42 = vaddq_s32(vsubq_s32(v95, vaddq_s32((int32x4_t)v102.val[1], (int32x4_t)v102.val[1])), (int32x4_t)v54);
    a43 = vaddq_s32(vsubq_s32(v96, vaddq_s32((int32x4_t)v102.val[2], (int32x4_t)v102.val[2])), (int32x4_t)v54);
    a40 = vaddq_s32(vsubq_s32(v93, vaddq_s32((int32x4_t)v102.val[0], (int32x4_t)v102.val[0])), (int32x4_t)v54);
    a41 = vaddq_s32(vsubq_s32(v94, vaddq_s32((int32x4_t)v102.val[3], (int32x4_t)v102.val[3])), (int32x4_t)v54);
    unint64_t v97 = (_DWORD *)&a40 + v49 + 2067449659;
    int v98 = *(v97 - 8) ^ *(v97 - 3);
    int v99 = *(v97 - 16) ^ *(v97 - 14) ^ (v98 + v46 - ((2 * v98) & 0x3EF50970));
    HIDWORD(v100) = v99 ^ v46;
    LODWORD(v100) = v99;
    *unint64_t v97 = (v100 >> 31) + v46 - ((2 * (v100 >> 31)) & 0x3EF50970);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 8LL * ((864 * (v50 != 2067449596)) ^ 0x1E6u)))( 671088640LL,  84041008LL,  1056246128LL);
  }

  else if (v57 == 1)
  {
    int8x16x4_t v101 = vld4q_s8(&a23);
    uint8x16_t v58 = (uint8x16_t)veorq_s8(v101.val[0], (int8x16_t)v52);
    uint16x8_t v59 = vmovl_u8(*(uint8x8_t *)v58.i8);
    int8x16_t v60 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v59.i8);
    int8x16_t v61 = (int8x16_t)vmovl_high_u16(v59);
    uint16x8_t v62 = vmovl_high_u8(v58);
    int8x16_t v63 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v62.i8);
    int8x16_t v64 = (int8x16_t)vmovl_high_u16(v62);
    uint8x16_t v65 = (uint8x16_t)veorq_s8(v101.val[1], (int8x16_t)v52);
    uint16x8_t v66 = vmovl_high_u8(v65);
    uint16x8_t v67 = vmovl_u8(*(uint8x8_t *)v65.i8);
    uint8x16_t v68 = (uint8x16_t)veorq_s8(v101.val[2], (int8x16_t)v52);
    _Q26 = (int8x16_t)vmovl_high_u8(v68);
    _Q25 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v68.i8);
    int8x16_t v71 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q25.i8, 0x10uLL);
    __asm { SHLL2           V25.4S, V25.8H, #0x10 }

    int8x16_t v76 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q26.i8, 0x10uLL);
    __asm { SHLL2           V26.4S, V26.8H, #0x10 }

    v101.val[0] = veorq_s8(v101.val[3], (int8x16_t)v52);
    v101.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v101.val[0]);
    v101.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v101.val[1]);
    v101.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v101.val[0].i8);
    v101.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v101.val[0]);
    v101.val[0] = vorrq_s8( vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v101.val[0].i8), 0x18uLL), v71),  vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v67.i8, 8uLL), v60));
    v101.val[3] = vorrq_s8( vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v101.val[3], 0x18uLL), _Q25),  vorrq_s8((int8x16_t)vshll_high_n_u16(v67, 8uLL), v61));
    v101.val[1] = vorrq_s8( vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v101.val[1].i8), 0x18uLL), v76),  vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v66.i8, 8uLL), v63));
    v101.val[2] = vorrq_s8( vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v101.val[2], 0x18uLL), _Q26),  vorrq_s8((int8x16_t)vshll_high_n_u16(v66, 8uLL), v64));
    int32x4_t v77 = (int32x4_t)veorq_s8( vandq_s8(v101.val[0], (int8x16_t)v55),  (int8x16_t)(*(_OWORD *)&v60 & __PAIR128__(0xFFFFFF03FFFFFF03LL, 0xFFFFFF03FFFFFF03LL)));
    int32x4_t v78 = (int32x4_t)veorq_s8( vandq_s8(v101.val[3], (int8x16_t)v55),  (int8x16_t)(*(_OWORD *)&v61 & __PAIR128__(0xFFFFFF03FFFFFF03LL, 0xFFFFFF03FFFFFF03LL)));
    int32x4_t v79 = (int32x4_t)veorq_s8( vandq_s8(v101.val[1], (int8x16_t)v55),  (int8x16_t)(*(_OWORD *)&v63 & __PAIR128__(0xFFFFFF03FFFFFF03LL, 0xFFFFFF03FFFFFF03LL)));
    int32x4_t v80 = (int32x4_t)veorq_s8( vandq_s8(v101.val[2], (int8x16_t)v55),  (int8x16_t)(*(_OWORD *)&v64 & __PAIR128__(0xFFFFFF03FFFFFF03LL, 0xFFFFFF03FFFFFF03LL)));
    a42 = vaddq_s32(vsubq_s32((int32x4_t)v101.val[1], vaddq_s32(v79, v79)), (int32x4_t)v54);
    a43 = vaddq_s32(vsubq_s32((int32x4_t)v101.val[2], vaddq_s32(v80, v80)), (int32x4_t)v54);
    a40 = vaddq_s32(vsubq_s32((int32x4_t)v101.val[0], vaddq_s32(v77, v77)), (int32x4_t)v54);
    a41 = vaddq_s32(vsubq_s32((int32x4_t)v101.val[3], vaddq_s32(v78, v78)), (int32x4_t)v54);
    return ((uint64_t (*)(uint64_t))(*(void *)(v45 + 11984) - 4LL))(671088640LL);
  }

  else
  {
    a33 = 2 * (a33 ^ v47) + v47 - (v44 & (4 * (a33 ^ v47)));
    a34 = 2 * (a34 ^ v47) + v47 - (v44 & (4 * (a34 ^ v47)));
    a35 = v47 + 2 * (a35 ^ v47) - (v44 & (4 * (a35 ^ v47)));
    a36 = 2 * (a36 ^ v47) + v47 - (v44 & (4 * (a36 ^ v47)));
    return v51(671088640LL, v52, v53, v54, v55, v56);
  }

uint64_t sub_10008AC9C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, unsigned int a16)
{
  if (a16 < 0x1376F649 != a14 - 1134069028 < ((v17 + a7 - 375) ^ 0x1376F6A3u)) {
    BOOL v18 = a14 - 1134069028 < ((v17 + a7 - 375) ^ 0x1376F6A3u);
  }
  else {
    BOOL v18 = a14 - 1134069028 > a16;
  }
  return ((uint64_t (*)(void))(*(void *)(v16 + 8LL * ((1364 * !v18) ^ (v17 + a7 - 474))) - 8LL))();
}

uint64_t sub_10008AD28(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(v5
                              + 8LL
}

uint64_t sub_10008AD88( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return (*(uint64_t (**)(void))(v16
                              + 8LL
                              * ((639
                                * (a13 + v13 - v15 >= (((a7 + v14 - 1221) - 16LL) ^ (unint64_t)(v14 ^ (a7 + 965))))) ^ v14)))();
}

uint64_t sub_10008ADD0( int8x16_t a1, double a2, double a3, double a4, int8x16_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, unint64_t a10, int a11, uint64_t a12, int a13)
{
  int8x16_t *v14 = vaddq_s8( vsubq_s8( *(int8x16_t *)(v18 + (v15 + a8)),  vandq_s8( vaddq_s8(*(int8x16_t *)(v18 + (v15 + a8)), *(int8x16_t *)(v18 + (v15 + a8))),  a5)),  a1);
}

uint64_t sub_10008AE30@<X0>(int a1@<W2>, int a2@<W3>, uint64_t a3@<X8>)
{
  *(_BYTE *)(v4 + a3) = *(_BYTE *)(v8 + (v5 + a1))
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * (((a3 != 63) * a2) ^ (v7 + v3 + 112))) - 12LL))();
}

uint64_t sub_10008AE84( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  BOOL v16 = v13 + 2141271705 < (a13 - 1045389892);
  return ((uint64_t (*)(void))(*(void *)(v14 + 8LL * ((30 * !v16) ^ v15)) - 12LL))();
}

uint64_t sub_10008AEF8( int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, int a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
  int v36 = (a1 - 2040442544) | 0x19060010;
  int v37 = 831981571 * ((2 * ((v35 - 120) & 0x62362E68) - (v35 - 120) - 1647717994) ^ 0x46801B2);
  *(_DWORD *)(v35 - 120) = (a13 + 1199781842) ^ v37;
  *(_DWORD *)(v35 - 116) = v37 + a1 + 871;
  *(void *)(v35 - 112) = a10;
  uint64_t v38 = sub_1000889FC(v35 - 120);
  unsigned int v39 = a33 & 0x3F ^ (v34 + v36 - 588);
  *(&a24 + v39) = 46;
  return ((uint64_t (*)(uint64_t))(*(void *)(v33 + 8LL * ((738 * (v39 > 0x37)) ^ a1)) - 4LL))(v38);
}

uint64_t sub_10008AFF4()
{
}

uint64_t sub_10008B03C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v9
                              + 8LL
                              * ((((v7 ^ 0x2Au) < v8 - 1843) * (((v8 - 2059339195) | 0x1A265010) ^ (a7 - 54))) ^ (v8 - 1502))))();
}

uint64_t sub_10008B088@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, char a16)
{
  *(void *)(&a16 + (v18 + 263) + a1 - 738921087) = 0xAEAEAEAEAEAEAEAELL;
  return ((uint64_t (*)(void))(*(void *)(v19 + 8LL * ((738 * ((v16 & 0x38) == 8LL)) ^ (v17 - 55))) - 12LL))();
}

uint64_t sub_10008B0E4(double a1)
{
  double *v2 = a1;
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * (((v4 == 0) * v3) ^ v1)) - 12LL))();
}

uint64_t sub_10008B108@<X0>(int a1@<W6>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v4 + 8LL * (((v5 + a1 + a2 - 311 - 449) * (v3 != v2)) ^ a2)))();
}

void sub_10008B130()
{
}

uint64_t sub_10008B140@<X0>( int a1@<W2>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17)
{
  BOOL v25 = v17 < v18;
  *(&a17 + (v24 - 1335964798 + a2)) = *(_BYTE *)(v23 + (v20 + a1))
  unsigned int v26 = v20 + 1 + v21;
  int v27 = v25 ^ (v26 < v19);
  BOOL v28 = v26 < v17;
  if (!v27) {
    BOOL v25 = v28;
  }
  return ((uint64_t (*)(void))(*(void *)(v22 + 8LL * ((30 * !v25) ^ v24)) - 12LL))();
}

uint64_t sub_10008B1C0@<X0>(int a1@<W6>, int a2@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((1488 * (a2 + (v4 ^ (a1 - 318) ^ 0xD3F4F77A) < 0x38)) ^ (v3 + v4 + 404)))
                            - 8LL))();
}

uint64_t sub_10008B200@<X0>(unsigned int a1@<W8>)
{
  uint64_t v3 = a1;
  uint64_t v4 = a1 - 738920775LL;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((961 * ((unint64_t)(v4 - v3 + 738920776) > 7)) ^ v1)) - 12LL))();
}

uint64_t sub_10008B254( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, int a22, char a23)
{
  uint64_t v27 = (184 * (v24 ^ (a7 + 10)) + 639189051) & 0xD9E6BF94;
  *(void *)(&a23 + v25 + (v27 ^ 0xFFFFFFFFD3F4F1B8LL)) = 0xAEAEAEAEAEAEAEAELL;
  return (*(uint64_t (**)(void))(v26
                              + 8LL
                              * (int)((16 * (((v27 - 1800) & v23) != 8)) | (32 * (((v27 - 1800) & v23) != 8)) | v27)))();
}

uint64_t sub_10008B2DC(double a1)
{
  *(double *)(v4 + (v2 ^ v5) + v6) = a1;
  return (*(uint64_t (**)(void))(v7 + 8LL * ((16 * (v3 != v6)) | (32 * (v3 != v6)) | v1)))();
}

uint64_t sub_10008B308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return ((uint64_t (*)(void))(*(void *)(v10
                                        + 8LL
                                        * (int)(((((v9 - 1619569135) & 0xFFEFF9BC ^ 0xFFFFE43C) + a7 + v9 - 450)
                                               * (v7 == v8)) ^ v9))
                            - 12LL))();
}

void sub_10008B350()
{
}

uint64_t sub_10008B7F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, int a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, int a35)
{
  uint64_t v41 = (v38 + v35);
  unsigned int v42 = *(_DWORD *)(&a23 + v41 + 72);
  *(_BYTE *)(a4 + v41) = (HIBYTE(v42) ^ 0x2D) - ((2 * (HIBYTE(v42) ^ 0x2D)) & 0x5C) - 82;
  *(_BYTE *)(a4 + (v41 + 2)) = (BYTE1(v42) ^ 0x5D) - ((2 * (BYTE1(v42) ^ 0x5D)) & 0x5C) - 82;
  *(_BYTE *)(a4 + (v41 + 1)) = ((v42 >> (v40 + (v37 ^ (a7 + 97)) - 81)) ^ 2)
                                           - 2
                                           * (((v42 >> (v40 + (v37 ^ (a7 + 97)) - 81)) ^ 2) & 0x2F ^ (v42 >> (v40 + (v37 ^ (a7 + 97)) - 81)) & 1)
                                           - 82;
  *(_BYTE *)(a4 + (v41 + 3)) = v42 ^ 0x9E;
  BOOL v43 = v38 + 1783853360 < (a35 + 1955040655);
  if (v38 + 1783853360 < v36 != a35 + 1955040655 < v36) {
    BOOL v43 = a35 + 1955040655 < v36;
  }
  return ((uint64_t (*)(void))(*(void *)(v39 + 8LL * ((158 * v43) ^ v37)) - 8LL))();
}

void sub_10008B9A4()
{
}

  ;
}

void zxcm2Qme0x(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X8 }

uint64_t sub_10008BA64(uint64_t a1, int a2)
{
  if (a1) {
    BOOL v3 = a2 == 0;
  }
  else {
    BOOL v3 = 0;
  }
  int v4 = v3;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((2 * v4) | (16 * v4) | 0x2C4u)) - 8LL))();
}

uint64_t sub_10008BAB8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unsigned int a14)
{
  a14 = v16
  uint64_t v17 = sub_1000A80C0(&a13);
  return ((uint64_t (*)(uint64_t))(*(void *)(v15 + 8LL * ((1761 * (a13 == (v16 ^ (v14 + 438)))) ^ v16)) - 8LL))(v17);
}

uint64_t sub_10008BB3C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  a13 = &STACK[0x5E5ED88ABFC5691F];
  a14 = (v17 - 633) ^ (831981571 * (((&a13 | 0x8187B219) - (&a13 & 0x8187B219)) ^ 0x1826623D));
  sub_100067AB4((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(2392068381LL
                                                                              - (v17 - 1902899633)
                                                                              + *(void *)(v16
                                                                                          + 8LL
                                                                                          * ((11
                                                                                            * (a15 == v15 + v17 + 715 - 1441)) ^ v17))))( v18,  v19,  v20,  v21,  v22);
}

uint64_t sub_10008BBF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, unsigned int a17)
{
  unsigned int v23 = 69008221 * ((&a13 & 0x3E414D53 | ~(&a13 | 0x3E414D53)) ^ 0x121CE0A6);
  a16 = a12;
  a17 = v23 ^ ((v18 ^ 0x77FF6FF1) - 566437952 + ((2 * v18) & 0xEFFEDFE2));
  a13 = v17;
  a15 = v23 + v22 - 448;
  uint64_t v24 = ((uint64_t (*)(uint64_t *))(*(void *)(v20 + 8LL * (v22 ^ 0x517)) - 4LL))(&a13);
  return (*(uint64_t (**)(uint64_t))(v21
                                            + 8LL * (((a14 == v19) * (((v22 - 1567711938) & 0x5D715FF6) - 601)) ^ v22)))(v24);
}

uint64_t sub_10008BCD0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, unsigned int a15, uint64_t a16, unint64_t *a17, int a18)
{
  unsigned int v21 = 1224239923
      * (((&a13 | 0x2599EE82) - &a13 + (&a13 & 0xDA661178)) ^ 0xD72A1355);
  a16 = a12;
  a17 = &STACK[0x2940FF9A650624D0];
  a15 = v21 ^ 0xC1913DC4;
  a13 = v21 ^ 0x44550099;
  a14 = (v20 + 368398736) ^ v21;
  uint64_t v22 = sub_1000A817C((uint64_t)&a13);
  return (*(uint64_t (**)(uint64_t))(v19
                                            + 8LL
}

uint64_t sub_10008BDB4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, unint64_t *a14, uint64_t a15, unsigned int a16)
{
  a16 = v16 - 944348131 * ((2 * (&a14 & 0xA75C168) - &a14 + 1971994257) ^ 0xD6939ADF) - 1019;
  a14 = &STACK[0x5F366804CF4E5679];
  a15 = a10;
  uint64_t v20 = ((uint64_t (*)(unint64_t **))(*(void *)(v18 + 8LL * (v16 - 1275)) - 4LL))(&a14);
  return ((uint64_t (*)(uint64_t))(*(void *)(v19 + 8LL * (((a12 == v17) * (v16 - 1501)) ^ v16)) - 4LL))(v20);
}

uint64_t sub_10008BE60()
{
  uint64_t v14 = v0;
  uint64_t v11 = 0x3DD903E84EABE2FALL;
  uint64_t v12 = v8;
  unsigned int v13 = v6
      + v5
  ((void (*)(uint64_t *))(*(void *)(v4 + 8LL * (v6 + v5 + 21)) - 4LL))(&v11);
  uint64_t v11 = v8;
  LODWORD(v12) = v6
               - 241568881 * ((2 * (&v11 & 0x242697B0) - &v11 - 606508978) ^ 0xDC86C0C)
               + v5
               + 590;
  sub_10008DBEC((uint64_t)&v11);
  uint64_t v12 = v8;
  LODWORD(v11) = (v5 + 1902899051) ^ (69008221
                                    * ((2 * (&v11 & 0x7906D9E0) - &v11 + 116991516) ^ 0xD55B7416));
  v1(&v11);
  LODWORD(v11) = (6 * (v5 ^ (v3 + 781)) - 582) ^ (69008221
                                                * ((((2 * &v11) | 0x85777BEA)
                                                  - &v11
                                                  - 1119600117) ^ 0x9119EFFF));
  uint64_t v12 = v10;
  v1(&v11);
  return v9 ^ v2;
}

void sub_10008C03C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32) + 1224239923 * (a1 ^ 0xF2B3FDD7);
  __asm { BR              X11 }

void sub_10008C130(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a1 + a2) = 1362986814;
}

void sub_10008D064(uint64_t a1)
{
  int v1 = 460628867 * (((a1 | 0xB9F12765) - a1 + (a1 & 0x460ED89A)) ^ 0xF567A518);
  __asm { BR              X9 }

uint64_t sub_10008D108@<X0>(int a1@<W7>, uint64_t a2@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a2 + 8LL * ((855 * (a1 != 460997464)) ^ v2)) - 4LL))();
}

uint64_t sub_10008D158@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * (8 * (v1 ^ 0x2EF) + 521)) - 4LL))();
}

uint64_t sub_10008D24C@<X0>(int a1@<W4>, int a2@<W5>, uint64_t a3@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a3 + 8LL * (((v4 == ((v5 + 735) ^ a1) + v3) * a2) ^ v5)) - 8LL))();
}

uint64_t sub_10008D274@<X0>(int a1@<W7>, uint64_t a2@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a2
                                        + 8LL * ((((((a1 - 402743602) & 0x18015EEF) + 604) ^ 0x4EF) * (v2 == 0)) ^ a1))
                            - 4LL))();
}

uint64_t sub_10008D2B4@<X0>(uint64_t a1@<X8>)
{
  int v6 = 137 * (v4 ^ 0x50C);
  int v7 = (v6 ^ (v1 + 429)) + v2;
  int v8 = v2 + 1;
  *(_DWORD *)(*(void *)(v3 - 0x2A461383296CA23CLL) + 4LL * v7) = v5;
  *(_DWORD *)(v3 - 0x2A461383296CA240LL) = v8;
  int v9 = v8 + v1;
  if (v8 + v1 < 0) {
    int v9 = -v9;
  }
  return ((uint64_t (*)(void))(*(void *)(a1
                                        + 8LL
                                        * ((1375
                                          * ((int)((v9 ^ 0x7FBDB73F)
                                                 + ((v9 << (((v6 + 83) | 0x2F) ^ 0x2E)) & 0xFF7B6E7E)
}

uint64_t sub_10008D3A8@<X0>(uint64_t a1@<X8>)
{
  int v5 = *(_DWORD *)(*v3 + 4LL * v4) == v1 + ((v2 - 423) | 0x204) - 652;
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * (((2 * v5) | (v5 << 7)) ^ v2)) - 12LL))();
}

uint64_t sub_10008D3E4@<X0>(uint64_t a1@<X8>)
{
}

uint64_t sub_10008D420(uint64_t result)
{
  else {
    int v6 = v5;
  }
  int *v4 = v6;
  *(_DWORD *)(result + 4) = 1722922608;
  return result;
}

uint64_t sub_10008D45C(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)a1 - 0x2A461383296CA240LL) - 422600961;
  int v3 = *(_DWORD *)(*(void *)(a1 + 16) - 0x2A461383296CA240LL) - 422600961;
  int v4 = (v2 < -1207097795) ^ (v3 < -1207097795);
  BOOL v5 = v2 > v3;
  if (v4) {
    BOOL v6 = v2 < -1207097795;
  }
  else {
    BOOL v6 = v5;
  }
  int v1 = *(_DWORD *)(a1 + 24) ^ (69008221 * ((a1 - 1382558880 - 2 * (a1 & 0xAD97D360)) ^ 0x7E35816A));
  return (*(uint64_t (**)(void))((char *)*(&off_10025B940 + (v1 ^ 0x6FB)) + 8 * ((v6 * ((v1 ^ 0x2A3) - 1029)) ^ v1) - 4))();
}

uint64_t sub_10008D534(uint64_t a1)
{
  int v5 = ((((v3 + 191114147) & 0xF49BD6FB) - 178) ^ 0xCBF12BAE) + v2;
  BOOL v6 = v5 < -1657883249;
  BOOL v7 = v4 - 873386415 < v5;
  if (v4 - 873386415 < -1657883249 != v6) {
    BOOL v7 = v6;
  }
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v1 + 8LL * ((616 * !v7) | v3)) - 8LL))( a1,  1898115905LL);
}

uint64_t sub_10008D5B8@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  int v5 = -1568993668 - v3;
  return ((uint64_t (*)(uint64_t, void))(*(void *)(v2
                                                              + 8LL
                                                              * (((v5 - 1362986815 <= (int)((((16 * v4) ^ 0x5BF0) + 18) ^ 0xFFFFFBED))
                                                                * (((16 * v4) ^ 0x5BF0) - 1006)) | (16 * v4) ^ 0x5BF0))
                                                  - 8LL))( a1,  (a2 + 1));
}

uint64_t sub_10008D654(uint64_t a1)
{
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v1
                                                               + 8LL
                                                               * ((3106
                                                                 * ((*(_DWORD *)(*v4 + 4LL * v7) ^ v2) <= (*(_DWORD *)(*v5 + 4LL * v7) ^ v2))) ^ v6))
                                                   - 3 * (((v6 + 307) | 0x82) ^ 0x7FCu)
                                                   + 1705LL))( a1,  v3);
}

uint64_t sub_10008D6AC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (((((v5 - 455) ^ 0x2BC) - 1668) * (v4 >= a3)) ^ v5)) - 12LL))();
}

uint64_t sub_10008D6D8@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W8>)
{
  return ((uint64_t (*)(uint64_t, void))(*(void *)(v3
                                                              + 8LL
                                                              * (((v4 - 1362986815 <= (int)((a2 + 18) ^ 0xFFFFFBED))
                                                                * (a2 - 1006)) | a2))
                                                  - 8LL))( a1,  (a3 + 1));
}

uint64_t sub_10008D718(uint64_t result)
{
  *(_DWORD *)(result + _Block_object_dispose(va, 8) = (v2 ^ 0xE245E038) - v1;
  return result;
}

uint64_t sub_10008D730(uint64_t a1)
{
  int v1 = 2078219279 * (((a1 | 0x62FDDF9E) - (a1 & 0x62FDDF9E)) ^ 0xB80749EA);
  int v2 = *(_DWORD *)(a1 + 16) ^ v1;
  int v3 = *(_DWORD *)(a1 + 4) + v1;
  if (v3 < 0) {
    int v3 = -v3;
  }
  int v4 = *(_DWORD *)(*(void *)(a1 + 8) - 0x2A461383296CA240LL);
  unsigned int v6 = v4 - 1362986814;
  BOOL v5 = v4 - 1362986814 < 0;
  unsigned int v7 = 1362986814 - v4;
  if (!v5) {
    unsigned int v7 = v6;
  }
  return (*(uint64_t (**)(void))((char *)*(&off_10025B940 + (v2 ^ 0x3F8))
}

unsigned int *sub_10008D7E0@<X0>(unsigned int *result@<X0>, char a2@<W8>)
{
  unsigned int v4 = ((*(_DWORD *)(*(void *)(v2 - 0x2A461383296CA23CLL) + 4LL * v3) ^ 0x638F3419u) >> a2) ^ 0xD1033109;
  unsigned int v5 = (~(v4 & 0x2BB1367C) | 0x99E9A0F4) + (v4 & 0x9A12074 | 0x66165F0B);
  *uint64_t result = ((v5 ^ v4 & 0x2BB1367D ^ 0x67176F02) - ((2 * (v5 ^ v4 & 0x2BB1367D ^ 0x67176F02)) & 0x2EE7F59A) + 393476813) ^ 0x36D15E03;
  return result;
}

_DWORD *sub_10008D884(_DWORD *result)
{
  *uint64_t result = 547591367;
  return result;
}

void sub_10008D894(uint64_t a1)
{
  int v1 = 944348131 * ((a1 & 0x896AFC50 | ~(a1 | 0x896AFC50)) ^ 0xD58CA7E1);
  int v2 = *(_DWORD *)(a1 + 40) - v1;
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned int v4 = (*(_DWORD *)(a1 + 56) ^ v1 ^ 0xD1DCF711) + ((2 * (*(_DWORD *)(a1 + 56) ^ v1)) & 0xCD6EBDBA ^ 0x4C461198);
  unsigned int v5 = 69008221 * (((v7 | 0x904891BE) - v7 + (v7 & 0x6FB76E40)) ^ 0x43EAC3B4);
  unsigned int v6 = v5 + 1902111087 * (*(_DWORD *)a1 - v1);
  int v9 = v5 ^ (v2 - 371);
  unsigned int v12 = v6 + 724613549;
  uint64_t v8 = v3;
  v7[1] = v4 - v5 - 1141112960;
  uint64_t v10 = &STACK[0x6CD36D505E8E72BF];
  uint64_t v11 = &STACK[0x4385D97A3D2FFD9D];
  ((void (*)(_DWORD *))((char *)*(&off_10025B940 + v2 - 632) - 12))(v7);
  __asm { BR              X9 }

uint64_t sub_10008DA50( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, int a14, uint64_t a15, int a16, uint64_t a17, int a18, uint64_t a19, unsigned int a20)
{
  uint64_t v25 = *(void *)(v20 + 32);
  unsigned int v26 = 268847287 * ((270127462 - (&a13 | 0x1019D166) + (&a13 | 0xEFE62E99)) ^ 0x104C3FB1);
  a19 = *(void *)(v20 + 24);
  a17 = a10;
  a20 = (v22 ^ 0x33A0E269) - v26;
  a18 = v23 - v26 + 1695026691;
  a13 = v25;
  a15 = a10;
  a16 = 957769771 * a12 - v26 + 1519593704;
  uint64_t v27 = sub_1000A7F38((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(void *)(v24
                                                      + 8LL
                                                      * ((488 * (((v23 - 80) ^ (a14 == v21)) & 1)) ^ v23))
                                          - ((v23 - 248) | 0xA8u)
                                          + 669LL))(v27);
}

uint64_t sub_10008DB40()
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(v1 + 8LL * (v3 ^ 0x244)))( **(unsigned int **)(v1 + 8LL * (v3 ^ 0x278)),  v5,  v6);
  *(_DWORD *)(v0 + 16) = v2;
  return result;
}

uint64_t sub_10008DBEC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) + 241568881 * ((-720613086 - (a1 | 0xD50C5122) + (a1 | 0x2AF3AEDD)) ^ 0xFCE2AA9F);
  return ((uint64_t (*)(void))(*(void *)((char *)*(&off_10025B940 + (v1 ^ 0x21D))
                                        + 8 * ((43 * (*(void *)a1 != 0x2F801B1FA3259451LL)) ^ v1)
                                        - 4)
                            - 8LL))();
}

uint64_t sub_10008DC88()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL * ((1995 * (*(_DWORD *)(v2 - 0x2F801B1FA3259439LL) == 528123064)) ^ v0))
                            - 8LL))();
}

uint64_t sub_10008DCC8()
{
  unsigned int v3 = *(_DWORD *)(v2 - 0x2F801B1FA3259441LL) + 1850360465;
  unsigned int v4 = *(_DWORD *)(v2 - 0x2F801B1FA3259445LL) + 1069807991;
  BOOL v5 = v4 < 0xB1491527;
  BOOL v6 = v3 < v4;
  if (v3 < 0xB1491527 != v5) {
    BOOL v6 = v5;
  }
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((1343 * v6) ^ v0)) - 8LL))();
}

uint64_t sub_10008DD54@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  _DWORD *v2 = a2;
  *(_DWORD *)(result + 12) = -528097395;
  return result;
}

void tbttItCTp3MZ(uint64_t a1)
{
  __asm { BR              X9 }

uint64_t sub_10008DDB4@<X0>(unsigned int a1@<W1>, uint64_t a2@<X8>)
{
  BOOL v4 = (*(uint64_t (**)(void))(a2 + 1808))(a1) != 0;
  return ((uint64_t (*)(uint64_t))(*(void *)(v3 + 8LL * ((13 * v4) ^ v2)) - 12LL))(4294925268LL);
}

uint64_t sub_10008DDE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = 0LL;
  *uint64_t v1 = a1;
  return result;
}

void sub_10008DE00(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4) ^ (3804331 * (((a1 | 0x72B1B0A3) - a1 + (a1 & 0x8D4E4F5C)) ^ 0xC649555));
  __asm { BR              X9 }

uint64_t sub_10008DEB0()
{
  BOOL v3 = (*(uint64_t (**)(uint64_t))(v1 + 8LL * (v0 ^ 0x2D8)))(200LL) == 0;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((360 * (((((v0 ^ 0x5C) + 898677908) ^ v3) & 1) == 0)) ^ v0 ^ 0x5C))
                            - (((v0 ^ 0x5C) - 596682663) & 0x2390A77A)
                            + 566LL))();
}

uint64_t sub_10008DF28(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(v4 + 8LL * (int)(v6 & 0xCA6F433F ^ 0x247)))(a1, 0LL);
  if ((_DWORD)result == 16)
  {
    --v2;
    goto LABEL_7;
  }

  if ((_DWORD)result == 12)
  {
LABEL_7:
    uint64_t result = (*(uint64_t (**)(uint64_t))(v4 + 8LL * (v3 ^ 0x220)))(a1);
    int v9 = v2;
    goto LABEL_8;
  }

  if ((_DWORD)result)
  {
    v2 -= 2;
    goto LABEL_7;
  }

  *BOOL v5 = a1;
  int v9 = 1613569350;
LABEL_8:
  *uint64_t v1 = v9 - 1613569350;
  return result;
}

uint64_t sub_10008DFC0(_DWORD *a1)
{
  unsigned int v2 = 1224239923 * (((a1 | 0x1AEAD958) - (_DWORD)a1 + (a1 & 0xE51526A7)) ^ 0xE859248F);
  unsigned int v3 = a1[5] - v2;
  int v4 = *a1 ^ v2;
  v8[1] = v3
  uint64_t result = nullsub_1(v8);
  if (v4 > 1153981962)
  {
    if (v4 == 1439194634)
    {
      unsigned int v6 = 3;
    }

    else
    {
      if (v4 != 1153981963) {
        goto LABEL_11;
      }
      unsigned int v6 = 1;
    }

void sub_10008E5E4(_DWORD *a1)
{
  unsigned int v1 = *a1 + 241568881 * (((_DWORD)a1 - 348976960 - 2 * (a1 & 0xEB3308C0)) ^ 0x3D220C82);
  __asm { BR              X8 }

uint64_t sub_10008E694( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, unsigned int a16)
{
  a16 = v17
  uint64_t v18 = sub_1000A80C0(&a15);
  return (*(uint64_t (**)(uint64_t))(v16 + 8LL * ((1060 * (a15 == 528123064)) ^ v17)))(v18);
}

uint64_t sub_10008E70C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, unsigned int a16, int a17)
{
  a16 = (v19 - 870) ^ (831981571 * ((&a15 & 0x6D2950CC | ~(&a15 | 0x6D2950CC)) ^ 0xB777F17));
  a15 = &STACK[0x5E5ED88ABFC5691F];
  sub_100067AB4((uint64_t)&a15);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18
                                                                                                  + 8LL * (((a17 == v17) * (((v19 - 1021185476) & 0x3CDE0F88) - 354)) ^ v19)))( v20,  v21,  v22,  v23,  v24,  v25,  v26);
}

uint64_t sub_10008E7AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16, uint64_t a17, unsigned int a18)
{
  uint64_t v26 = v18[4];
  uint64_t v27 = v18[5];
  uint64_t v22 = v18[1];
  a18 = v21
      - 861
      - 1543737703 * ((-377324932 - (&a15 | 0xE9827A7C) + (&a15 | 0x167D8583)) ^ 0x6889D5FF);
  a17 = a12;
  a15 = v22;
  uint64_t v23 = *(void (**)(uint64_t *))(v20 + 8LL * (v21 ^ 0x516));
  v23(&a15);
  a18 = v21 - 861 - 1543737703 * (&a15 ^ 0x7EF4507C);
  a15 = v26;
  a17 = a12;
  v23(&a15);
  a16 = v21 + 268847287 * ((&a15 & 0xEDF895C2 | ~(&a15 | 0xEDF895C2)) ^ 0xEDAD7B15) - 562;
  a17 = v27;
  a15 = a12;
  uint64_t v24 = ((uint64_t (*)(uint64_t *))(*(void *)(v20 + 8LL * (int)(v21 - 1263)) - 4LL))(&a15);
  return ((uint64_t (*)(uint64_t))(*(void *)(v19 + 8LL * ((836 * (a18 == 528123064)) ^ v21))
                                          - 107 * (v21 ^ 0x581)
                                          + 951LL))(v24);
}

uint64_t sub_10008E908( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, int a17, uint64_t a18, unint64_t *a19, int a20)
{
  unsigned int v23 = 1224239923 * (&a15 ^ 0xF2B3FDD7);
  a18 = a12;
  a19 = &STACK[0x2940FF9A650624E8];
  a15 = v23 ^ 0x44550099;
  a16 = (v22 + 368398761) ^ v23;
  a17 = v23 ^ 0x2D2D7610;
  uint64_t v24 = sub_1000A817C((uint64_t)&a15);
  int v25 = a20 == ((v22 - 855480729) & 0x32FD94BF ^ (v21 - 161));
}

uint64_t sub_10008E9CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, uint64_t a14, unint64_t *a15, unint64_t *a16, unsigned int a17)
{
  a17 = v19 + 316 - 944348131 * ((&a15 & 0xD828319E | ~(&a15 | 0xD828319E)) ^ 0x84CE6A2F);
  a15 = &STACK[0x5F366804CF4E5691];
  a16 = a13;
  uint64_t v20 = (void (*)(unint64_t **))(*(void *)(v18 + 8LL * (v19 ^ 0x44)) - 4LL);
  v20(&a15);
  a17 = v19 + 316 - 944348131 * ((&a15 & 0x7C2082A7 | ~(&a15 | 0x7C2082A7)) ^ 0x20C6D916);
  a15 = &STACK[0x5F366804CF4E5679];
  a16 = a13;
  v20(&a15);
  LODWORD(a16) = v19
               - 241568881
  a15 = a13;
  uint64_t v21 = sub_10008DBEC((uint64_t)&a15);
  return (*(uint64_t (**)(uint64_t))(v17
                                            + 8LL
                                            * ((1721 * (HIDWORD(a16) == ((v19 + 788) ^ 0x1F7A87E3 ^ (4 * (v19 ^ 0x89))))) ^ v19)))(v21);
}

uint64_t sub_10008EB28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  return (*(uint64_t (**)(void))(v12
                              + 8LL
                              * (((a12 != ((321 * (v14 ^ 0x9B)) ^ (v13 + 707))) * ((3 * (v14 ^ 0x1D9)) ^ 0x3F4)) ^ v14)))();
}

uint64_t sub_10008EB70@<X0>(int a1@<W8>)
{
  int *v2 = v9 ^ v3;
  uint64_t v11 = v8;
  unsigned int v10 = (a1 - 819) ^ (69008221
                    * ((((&v10 | 0x475A7F8C) ^ 0xFFFFFFFE) - (~&v10 | 0xB8A58073)) ^ 0x6B07D279));
  v6(&v10);
  uint64_t v11 = v7;
  unsigned int v10 = (a1 - 819) ^ (69008221 * ((&v10 & 0x83CD08BF | ~(&v10 | 0x83CD08BF)) ^ 0xAF90A54A));
  uint64_t result = ((uint64_t (*)(unsigned int *))v6)(&v10);
  *(_DWORD *)(v1 + 24) = 528123064;
  return result;
}

uint64_t sub_10008EC78(uint64_t a1)
{
  int v1 = 3804331 * ((676526031 - (a1 | 0x2852F7CF) + (a1 | 0xD7AD0830)) ^ 0xA9782DC6);
  int v2 = *(_DWORD *)(a1 + 16) ^ v1;
  int v3 = *(_DWORD *)(*(void *)(a1 + 24) - 0x2A461383296CA240LL);
  int v4 = *(_DWORD *)(a1 + 20) ^ v1;
  unsigned int v6 = v3 - 1362986814;
  BOOL v5 = v3 - 1362986814 < 0;
  unsigned int v7 = 1362986814 - v3;
  if (v5) {
    unsigned int v6 = v7;
  }
  return ((uint64_t (*)(void))(*(void *)((char *)*(&off_10025B940 + (v2 ^ 0x1D6))
                                        + 8
                                        * ((92 * ((v4 - 1955019833) >= 4 * (unint64_t)v6)) ^ v2)
                                        - 4)
                            - 12LL))();
}

uint64_t sub_10008ED48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3
                                                                                 + 8LL
                                                                                 * (v5 ^ (922 * (v4 != 1955019833))))
                                                                     - (((v5 - 396) | 0x440u) ^ 0x45CLL)))( a1,  a2,  a3,  1804049797LL);
}

uint64_t sub_10008ED8C(uint64_t a1)
{
  return ((uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t, uint64_t))(*(void *)(v1 + 13360) - 4LL))( a1,  1242117193LL,  5 * (v3 ^ 0x417u),  (5 * (v3 ^ 0x417)) ^ 0x533u,  1670329369LL,  v2);
}

uint64_t sub_10008EE08@<X0>(uint64_t a1@<X0>, int a2@<W3>, int a3@<W4>, int a4@<W5>, int a5@<W8>)
{
  *(_BYTE *)(*(void *)(a1 + 8) + (a4 + a5)) = ((a3 ^ v7) >> v8) - ((2 * ((a3 ^ v7) >> v8)) & 0x5C) - 82;
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * ((59 * ((((a2 - 813) | 0x40) ^ 0xFFFFFE9C) + a4 == v6)) ^ a2)) - 4LL))();
}

uint64_t sub_10008EE68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)(v5
                                                                                                  + 8LL * (int)(((v7 == 24) * (a3 ^ 0x686)) ^ a3))
                                                                                      - 4LL))( a1,  a2,  a3,  a3 ^ 0x533,  a5,  v6);
}

uint64_t sub_10008EE9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v8 = v3 > 0x68A0FFFB;
  int v9 = (a3 ^ 0xCD55CAD8) + a2;
  int v10 = v8 ^ (v9 < -1755381756);
  BOOL v11 = v9 < v6;
  if (!v10) {
    BOOL v8 = v11;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)(v4
                                                                                                  + 8LL * (int)((931 * v8) ^ a3))
                                                                                      - 4LL))( a1,  a2,  a3,  a3 ^ v7,  1670329369LL,  v5);
}

uint64_t sub_10008EF0C@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W8>)
{
  return sub_10008EE08(a1, a3 ^ 0x533u, *(_DWORD *)(*v5 + 4LL * (int)((a3 ^ 0xB5F6CAD4) + a2)), v4, a4);
}

_DWORD *sub_10008EF3C(_DWORD *result, uint64_t a2, uint64_t a3, int a4)
{
  *uint64_t result = a4;
  return result;
}

uint64_t sub_10008EF44(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t))((char *)*(&off_100257500
                                                    + ((1409 * (*(_DWORD *)(a2 + 4) == 1007577615)) ^ 0x178u))
                                          - 8))(4294925278LL);
}

uint64_t sub_10008EF8C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_BYTE *)(*(void *)(a2 + 96) + 468LL) = *(_BYTE *)(*(void *)(a1 + 8) + 12LL);
  return ((uint64_t (*)(void))(*(void *)(v2 + 2824) - 8LL))(0LL);
}

void sub_10008EFF4()
{
}

void sub_10008F000(uint64_t a1)
{
  int v1 = 235795823 * (a1 ^ 0x94AD4959);
  unsigned int v2 = *(_DWORD *)(*(void *)(a1 + 16) - 0x2F801B1FA3259445LL) - 2024011092;
  unsigned int v3 = *(_DWORD *)(a1 + 8) + v1 - 1130152979;
  int v4 = (v3 < 0xF8E1265C) ^ (v2 < 0xF8E1265C);
  BOOL v5 = v2 < v3;
  if (v4) {
    BOOL v5 = v3 < 0xF8E1265C;
  }
  __asm { BR              X11 }

uint64_t sub_10008F100()
{
}

uint64_t sub_10008F148()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((133
                                          * (((*(_DWORD *)(v1 - 0x2F801B1FA3259441LL) == 1123996310) ^ (31 * (v0 ^ 0x49))) & 1)) ^ v0))
                            - (v0 ^ 0x951u)
                            + 2085LL))();
}

uint64_t sub_10008F1A8@<X0>(int a1@<W8>)
{
  unsigned int v6 = (v2 + 20080898) & 0xFECD96F3;
  *(_BYTE *)(*(void *)(v3 - 0x2F801B1FA3259451LL) + v5 + v6 + v1 + 185105205_Block_object_dispose(va, 8) = *(_BYTE *)(*(void *)(v3 - 0x2F801B1FA3259451LL)
                                                                                            + (v6 ^ 0xE4C)
                                                                                            + v1
                                                                                            - 1123998404);
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * (int)(((2 * (v1 - 1 != a1)) | (8 * (v1 - 1 != a1))) ^ v6)) - 4LL))();
}

void sub_10008F230()
{
}

uint64_t sub_10008F238()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((44
                                          * ((*(_DWORD *)(v1 - 0x2F801B1FA325943DLL) & 1) == ((v0 + 952048430) & 0xC740E17C)
                                                                                           - 380)) | v0))
                            - ((v0 + 1035453050) & 0xC2483EB7 ^ 0x607LL)))();
}

void sub_10008F2AC()
{
  *(_DWORD *)(v0 - 0x2F801B1FA3259439LL) = -528097428;
}

uint64_t sub_10008F7C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (qword_100273838 ^ qword_100273A70) - (void)&v7;
  qword_100273A70 = (56757557 * v2) ^ 0xE37D1100B7374749LL;
  qword_100273838 = 56757557 * (v2 ^ 0xE37D1100B7374749LL);
  int v3 = *(_DWORD *)(a2 + 4);
  uint64_t v4 = (char *)*(&off_10025B940
               + ((53 * ((qword_100273838 - ((53 * v2) ^ 0x49)) ^ 0x49)) ^ byte_100203E40[byte_1002116E0[(53 * ((qword_100273838 - ((53 * v2) ^ 0x49)) ^ 0x49))] ^ 0x89])
               - 26)
     - 4;
  if (v3 == 1007577605) {
    __asm { BR              X17 }
  }

  if (v3 == 1007577612)
  {
    int v5 = **(unsigned __int8 **)(a2 + 8) - 9;
    __asm { BR              X1 }
  }

  return 4294925278LL;
}

void sub_10008FEA8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 40) + 235795823 * (((a1 | 0xBFD03985) - a1 + (a1 & 0x402FC67A)) ^ 0x2B7D70DC);
  __asm { BR              X11 }

uint64_t sub_10008FFD4()
{
  unsigned int v4 = (v1 + 2050889366) & 0x85C1EE9E;
  BOOL v6 = (*(_DWORD *)(v2 + 44) ^ v0) == ((v4 + 388467352) ^ (v4 - 1333)) || *(_OWORD *)(v2 + 48) == 0LL;
  return (*(uint64_t (**)(void))(v3 + 8LL * (int)((62 * v6) ^ v4)))();
}

uint64_t sub_100090038()
{
  BOOL v4 = *(void *)(v1 + 32) == 0x104BB888F809F324LL || *(_OWORD *)v1 == 0LL;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((507 * (((v0 ^ 0x5AF ^ v4) & 1) == 0)) ^ v0)) - 12LL))();
}

uint64_t sub_100090094(uint64_t a1)
{
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3
                                                               + 8LL
                                                               * (((((v2 - 1075098219) & 0x4014AFBD) - 531) * (v1 != 0)) ^ v2))
                                                   - ((v2 + 528868725) & 0xE07A17DD ^ 0x295LL)))( a1,  831981571LL);
}

uint64_t sub_1000901C8@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  int v30 = v22 + 30;
  int v31 = 460628867 * ((2 * ((v29 - 144) & 0xE505430) - (v29 - 144) - 240145459) ^ 0xBD3929B0);
  *(_DWORD *)(v29 - 144) = v31 + v22 - 13;
  *(_DWORD *)(v29 - 136) = (((v22 + 30) ^ 0x452B04E) + v23) ^ v31;
  *(void *)(v29 - 12_Block_object_dispose(va, 8) = v20;
  *(void *)(v29 - 120) = v26;
  uint64_t v47 = a1 + v21;
  ((void (*)(uint64_t))(*(void *)(v24 + 8LL * (v22 ^ 0x2B0)) - 4LL))(v29 - 144);
  LODWORD(va_start(va, a9) = (v30 - 559) | 0x61;
  HIDWORD(a_Block_object_dispose(va, 8) = v30 - 569;
  *(_DWORD *)(v29 - 144) = v30
                         - 569
                         - 1224239923
                         * ((((v29 - 144) | 0x72DB4EC0) - (v29 - 144) + ((v29 - 144) & 0x8D24B138)) ^ 0x8068B317);
  *(void *)(v29 - 136) = a19;
  *(void *)(v29 - 12_Block_object_dispose(va, 8) = a18;
  int v46 = (void (*)(uint64_t))(*(void *)(v24 + 8LL * (v30 ^ 0x2A8)) - 8LL);
  v46(v29 - 144);
  HIDWORD(v44) = v30 + 1114;
  *(void *)(v29 - 144) = v26;
  *(void *)(v29 - 136) = a19;
  *(_DWORD *)(v29 - 112) = v30
                         + 1114
                         - 1543737703
                         * ((((v29 - 144) | 0x4EA87986) - (v29 - 144) + ((v29 - 144) & 0xB1578678)) ^ 0x305C29FA);
  *(void *)(v29 - 12_Block_object_dispose(va, 8) = a20;
  *(void *)(v29 - 120) = a18;
  uint64_t v45 = v26;
  uint64_t v32 = *(void (**)(uint64_t))(v24 + 8LL * (v30 - 579));
  v32(v29 - 144);
  HIDWORD(a6) = v30 + 63;
  *(void *)(v29 - 12_Block_object_dispose(va, 8) = v25;
  *(void *)(v29 - 120) = a19;
  *(void *)(v29 - 104) = a20;
  *(void *)(v29 - 144) = a18;
  *(void *)(v29 - 136) = a20;
  *(_DWORD *)(v29 - 112) = v30 + 63 - 1224239923 * ((v29 - 144) ^ 0xF2B3FDD7);
  uint64_t v33 = (void (*)(uint64_t))((char *)*(&off_10025B940 + (v30 ^ 0x239)) - 8);
  v33(v29 - 144);
  LODWORD(v44) = v30 + 392;
  *(_DWORD *)(v29 - 144) = v30
                         + 392
                         - 1178560073
                         * ((((v29 - 144) ^ 0xE0146109 | 0xF4B9EC4) + ((v29 - 144) ^ 0xF488E44 | 0xF0B4613B)) ^ 0x869CD24);
  *(void *)(v29 - 12_Block_object_dispose(va, 8) = a19;
  *(void *)(v29 - 120) = a20;
  *(void *)(v29 - 112) = a11;
  *(void *)(v29 - 104) = a20;
  *(void *)(v29 - 136) = a18;
  BOOL v43 = (void (*)(uint64_t))((char *)*(&off_10025B940 + v30 - 558) - 8);
  v43(v29 - 144);
  *(_DWORD *)(v29 - 144) = v30 - 569 - 1224239923 * ((v29 - 411936759 - 2 * ((v29 - 144) & 0xE7725899)) ^ 0x15C1A54E);
  *(void *)(v29 - 136) = a19;
  *(void *)(v29 - 12_Block_object_dispose(va, 8) = a14;
  v46(v29 - 144);
  *(_DWORD *)(v29 - 112) = v30
                         + 1114
                         - 1543737703 * (((v29 - 144) & 0xED32F927 | ~((v29 - 144) | 0xED32F927)) ^ 0x6C3956A4);
  *(void *)(v29 - 144) = v45;
  *(void *)(v29 - 136) = a19;
  *(void *)(v29 - 12_Block_object_dispose(va, 8) = v28;
  *(void *)(v29 - 120) = a14;
  v32(v29 - 144);
  *(_DWORD *)(v29 - 112) = v30
                         + 63
                         - 1224239923
                         * (((((v29 - 144) | 0x2E18EB56) ^ 0xFFFFFFFE) - (~(v29 - 144) | 0xD1E714A9)) ^ 0x2354E97E);
  *(void *)(v29 - 144) = a14;
  *(void *)(v29 - 136) = v28;
  *(void *)(v29 - 12_Block_object_dispose(va, 8) = v25;
  *(void *)(v29 - 120) = a19;
  *(void *)(v29 - 104) = v28;
  v33(v29 - 144);
  *(void *)(v29 - 136) = a14;
  *(void *)(v29 - 12_Block_object_dispose(va, 8) = a19;
  *(_DWORD *)(v29 - 144) = v30 + 392 - 1178560073 * ((v29 - 435891113 - 2 * ((v29 - 144) & 0xE604D4E7)) ^ 0x131F68F);
  *(void *)(v29 - 112) = a12;
  *(void *)(v29 - 104) = v28;
  *(void *)(v29 - 120) = v28;
  v43(v29 - 144);
  *(_DWORD *)(v29 - 144) = (v30 + 146) ^ (268847287
                                        * ((((v29 - 144) | 0x44694F9C) - (v29 - 144) + ((v29 - 144) & 0xBB96B060)) ^ 0xBBC35EB4));
  *(void *)(v29 - 136) = v28;
  *(void *)(v29 - 12_Block_object_dispose(va, 8) = a20;
  ((void (*)(uint64_t))((char *)*(&off_10025B940 + (v30 ^ 0x226)) - 12))(v29 - 144);
  *(void *)(v29 - 136) = v28;
  *(_DWORD *)(v29 - 140) = v30
                         - 1224239923 * ((((2 * (v29 - 144)) | 0xFB28F40) - (v29 - 144) + 2015803488) ^ 0x756ABA77)
                         + 387;
  sub_1000627C8(v29 - 144);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t), uint64_t, uint64_t, uint64_t, void (*)(uint64_t), uint64_t, uint64_t, void, void (*)(uint64_t), void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 + 8LL * ((440 * (*(_DWORD *)(v29 - 144) == (_DWORD)a9 + 308514875)) ^ v30)) - ((v30 + 849889592) & 0xCD57B4F9) + 225LL))( v34,  v35,  v36,  v37,  v38,  v39,  v40,  v41,  a2,  v43,  v44,  v45,  a6,  v46,  a8,  a9,  (v30 + 849889592) & 0xCD57B4F9,  v33,  *(&off_10025B940 + (v30 ^ 0x2E8)),  v47,  a14,  a15,  a16);
}

uint64_t sub_1000906F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void (*a18)(uint64_t), void (*a19)(uint64_t), uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31)
{
  *(void *)(v36 - 144) = v35;
  *(void *)(v36 - 136) = v33;
  *(_DWORD *)(v36 - 12_Block_object_dispose(va, 8) = (v32 + 264) ^ (3804331
                                        * ((2 * ((v36 - 144) & 0x24362F0) - (v36 - 144) + 2109512971) ^ 0x369B8FD));
  v31(v36 - 144);
  *(void *)(v36 - 104) = v35;
  *(void *)(v36 - 12_Block_object_dispose(va, 8) = a31;
  *(void *)(v36 - 120) = a26;
  *(_DWORD *)(v36 - 112) = v32
                         + 525
                         - 1224239923
                         * ((((v36 - 144) ^ 0xCA7DE41E) & 0xF0BA43E2 | ~((v36 - 144) ^ 0xCA7DE41E | 0xF0BA43E2)) ^ 0x378BA5D4);
  *(void *)(v36 - 144) = v33;
  *(void *)(v36 - 136) = v35;
  a18(v36 - 144);
  *(_DWORD *)(v36 - 112) = v32
                         + 525
                         - 1224239923 * ((((v36 - 144) | 0x4AD5FD1B) - ((v36 - 144) & 0x4AD5FD1B)) ^ 0xB86600CC);
  *(void *)(v36 - 104) = a20;
  *(void *)(v36 - 144) = v33;
  *(void *)(v36 - 136) = v35;
  *(void *)(v36 - 12_Block_object_dispose(va, 8) = v35;
  *(void *)(v36 - 120) = a26;
  a18(v36 - 144);
  *(_DWORD *)(v36 - 144) = v32
                         - 235795823 * (((v36 - 144) & 0x46F1697D | ~((v36 - 144) | 0x46F1697D)) ^ 0x2DA3DFDB)
                         + 2138963127;
  *(void *)(v36 - 136) = a25;
  *(void *)(v36 - 12_Block_object_dispose(va, 8) = v35;
  sub_1000A889C(v36 - 144);
  *(_DWORD *)(v36 - 12_Block_object_dispose(va, 8) = (v32 + 264) ^ (3804331
                                        * ((1507516239 - ((v36 - 144) | 0x59DADF4F) + ((v36 - 144) | 0xA62520B0)) ^ 0xD8F00546));
  *(void *)(v36 - 144) = v35;
  *(void *)(v36 - 136) = a27;
  a19(v36 - 144);
  *(void *)(v36 - 144) = v35;
  *(_DWORD *)(v36 - 136) = v32
                         + 831981571 * (((v36 - 144) & 0xA0A8D7DE | ~((v36 - 144) | 0xA0A8D7DE)) ^ 0xC6F6F805)
                         + 1185;
  *(void *)(v36 - 12_Block_object_dispose(va, 8) = a27;
  uint64_t v37 = sub_100082A9C(v36 - 144);
  return ((uint64_t (*)(uint64_t))(*(void *)(v34 + 8LL * ((v32 + 971) ^ (103 * (a22 != 0))))
                                          - ((v32 + 94) | 0x430u)
                                          + 1395LL))(v37);
}

uint64_t sub_100090970()
{
  int v6 = ((((2 * (v5 - 144)) | 0x1839231E) - (v5 - 144) + 1944284785) ^ 0xF2C9B479) * v0;
  *(void *)(v5 - 120) = v3;
  *(_DWORD *)(v5 - 12_Block_object_dispose(va, 8) = (v2 + 179) ^ v6;
  *(_DWORD *)(v5 - 124) = (v2 + 1166 + v9 + 1566549603) ^ v6;
  *(void *)(v5 - 136) = v4;
  uint64_t result = ((uint64_t (*)(uint64_t))((char *)*(&off_10025B940 + v2 - 110) - 8))(v5 - 144);
  *(_DWORD *)(v8 - 0x104BB888F809F324LL) = v9;
  *(_DWORD *)(v1 + 24) = 528123064;
  return result;
}

void sub_100090AC4(uint64_t a1)
{
  int v1 = 2078219279 * ((2 * (a1 & 0x636844EC) - a1 - 1667777773) ^ 0x466D2D67);
  int v2 = *(_DWORD *)(a1 + 64) - v1;
  int v3 = *(_DWORD *)(a1 + 40) ^ v1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)a1;
  int v6 = *(_DWORD *)(a1 + 60) - v1;
  unsigned int v7 = 831981571 * (((v8 | 0x3F000E94) - (v8 & 0x3F000E94)) ^ 0xA6A1DEB0);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = v4;
  v8[0] = v2 - v7 - 504207857;
  uint64_t v9 = v4;
  uint64_t v10 = v5;
  int v13 = (v3 - ((2 * v3 + 1831997754) & 0x745E3054) + 1892163783) ^ v7;
  int v14 = v7 + 975730075 * v6 - 1719770201;
  sub_1000A7B98((uint64_t)v8);
  __asm { BR              X8 }

uint64_t sub_100090C44( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, char a12, int a13, unint64_t *a14, uint64_t a15)
{
  char v22 = *(_BYTE *)(v15 + 56);
  unsigned int v23 = 268847287 * ((((2 * &a10) | 0x96A7D3F6) - &a10 + 883693061) ^ 0x34F9F8D3);
  a14 = &STACK[0x13240EAB5AFDBE9D];
  a15 = v21;
  a12 = v22
      - -73 * ((((2 * &a10) | 0xF6) - &a10 + 5) ^ 0xD3)
      - v20
      + ((v19 + 48) ^ 0x60);
  a10 = v23 + v19 + 749;
  a11 = (v16 + 1448961536) ^ v23;
  uint64_t v24 = (*(uint64_t (**)(int *))(v17 + 8LL * (v19 & 0x42374C06)))(&a10);
  return (*(uint64_t (**)(uint64_t))(v18 + 8LL * ((1800 * (a13 == 528123064)) ^ v19)))(v24);
}

uint64_t sub_100090D10()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * (int)(((v1 - 1231484773 < ((v2 + 927) ^ 0xFFFFFAF4))
                                               * ((v2 + 647975440) & 0xD960AFBF ^ 0x3F2)) ^ v2))
                            - 8LL))();
}

uint64_t sub_100090D68@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6)
{
  a3 = a1;
  a4 = a2;
  a5 = v8 - 944348131 * ((&a3 & 0xE4E14E4C | ~(&a3 | 0xE4E14E4C)) ^ 0xB80715FD) - 799;
  uint64_t v9 = ((uint64_t (*)(uint64_t *))(*(void *)(v6 + 8LL * (v8 - 1055)) - 4LL))(&a3);
}

void sub_100090E14(uint64_t a1@<X8>)
{
  *(void *)(*(void *)(v1 + 48) - 0x2940FF9A650624C8LL) = a1;
  *(_DWORD *)(v1 + 24) = 528123064;
}

void sub_100090EF8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24) - 69008221 * ((a1 - 1655620505 - 2 * (a1 & 0x9D513C67)) ^ 0x4EF36E6D);
  __asm { BR              X13 }

uint64_t sub_100091000@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11)
{
  int v14 = (v11 - 1262923268) & 0x4B46AD66;
  int v15 = v12 + a9 + 40 * (v14 ^ 0x551);
  if (v15 >= 0) {
    unsigned int v16 = v12 + a9 + 40 * (v14 ^ 0x551);
  }
  else {
    unsigned int v16 = -v15;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 8LL * ((25 * (((v14 + 1) ^ (v16 > 0x82)) & 1)) ^ v14)) - 8LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a10,  a11);
}

uint64_t sub_100091064( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, _DWORD *a24)
{
  int v26 = (v24 - 1617853163) & 0x606E7AD7;
  *a24 = 1670329369;
  BOOL v27 = a6 <= 0x56294088 && (v26 ^ 0x29D6BDE2) + (int)a6 < 701939576;
  uint64_t v28 = (uint64_t (*)(uint64_t, void, BOOL, void, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 + 8LL * ((!v27 * (v26 - 600)) ^ v26)) - 12LL);
  return v28(a1, v28, (v26 ^ 0x29D6BDE2) + (int)a6 < 701939576, 0LL, &STACK[0x2A461383296CA2B4], a6, a7, a8, a9);
}

void sub_10009114C()
{
}

void sub_100091154()
{
  *(_DWORD *)(v2 + v1) = v0;
}

void sub_100091E44(uint64_t a1)
{
  int v1 = 1178560073 * ((a1 - 2 * (a1 & 0xA5CBBCEE) - 1513374482) ^ 0x42FE9E86);
  int v2 = *(_DWORD *)(a1 + 32) ^ v1;
  int v3 = (*(_BYTE *)(a1 + 16) - v1);
  ((void (*)(char *, void (*)()))*(&off_10025B940 + (v2 ^ 0x1FF)))( (char *)*(&off_10025B940 + v2 - 126) - 12,  sub_1000A7948);
  uint64_t v5 = *(void *)((char *)*(&off_10025B940 + (v2 ^ 0x15B)) - 4);
  unsigned int v4 = (235795823 * (((&v4 | 0xAD911F22) - (&v4 & 0xAD911F22)) ^ 0x393C567B)) ^ (v2 + 33);
  sub_100092468((uint64_t)&v4);
  __asm { BR              X8 }

uint64_t sub_100091F70( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17)
{
  unsigned int v21 = (&a16 ^ 0xE7352268) * v17;
  a16 = v18 - v21 + 595;
  a17 = v21 ^ 0x57;
  sub_10007B8B4(&a16);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 + 8LL * (((v18 - 211) | 0x520) ^ (2 * (**(_DWORD **)(v20 + 8LL * (((v18 - 211) | 0x520) ^ 0x5D4)) == 0))))
                                                                                                - 2
                                                                                                * (((((v18 - 211) | 0x520) - 1383) | 0x11A) ^ 0x36Bu)
                                                                                                + 1244LL))( v22,  v23,  v24,  v25,  v26,  v27,  v28);
}

uint64_t sub_100092020@<X0>(int a1@<W8>)
{
  int v8 = *(unsigned int **)(v6 + 8LL * (a1 - 154));
  uint64_t v9 = *(void *)(v6 + 8LL * (a1 - 177));
  uint64_t v10 = *v8;
  int v11 = *(_BYTE **)(v9 - 4);
  v23[0] = *v11 - 57;
  v23[1] = v11[1] - 57;
  v23[2] = v11[2] - 57;
  v23[3] = v11[3] - 57;
  v23[4] = v11[4] - 57;
  v23[5] = v11[5] - 57;
  v23[6] = v11[6] - 57;
  v23[7] = v11[7] - 57;
  v23[8] = v11[8] - 57;
  v23[9] = v11[9] - 57;
  v23[10] = v11[10] - 57;
  v23[11] = v11[11] - 57;
  v23[12] = v11[12] - 57;
  v23[13] = v11[13] - 57;
  v23[14] = v11[14] - 57;
  v23[15] = v11[15] - 57;
  v23[16] = v11[16] - 57;
  v23[17] = v11[17] - 57;
  v23[18] = v11[18] - 57;
  v23[19] = v11[19] - 57;
  v23[20] = v11[20] - 57;
  v23[21] = v11[21] - 57;
  int v12 = *(_BYTE **)(v9 - 4);
  v23[22] = v12[22] - 57;
  v23[23] = v12[23] - 57;
  v23[24] = v12[24] - 57;
  v23[25] = v12[25] - 57;
  v23[26] = v12[26] - 57;
  v23[27] = v12[27] - 57;
  _BYTE v23[28] = v12[28] - 57;
  v23[29] = v12[29] - 57;
  uint64_t v13 = *(uint64_t (**)(uint64_t, _BYTE *, _DWORD *))(v6 + 8LL * (a1 - 54));
  int v14 = v13(v10, v23, v2);
  unsigned int v15 = ((2 * v14) & 0xEBFFD774) + (v14 ^ 0xF5FFEBBA);
  if (v15 != -167777350)
  {
    if (v15 == -167776248)
    {
      uint64_t v16 = *v8;
      int v17 = *(_BYTE **)(*(void *)(v6 + 8LL * (v4 ^ 0x19E)) - 4LL);
      v22[0] = *v17 - 2;
      v22[1] = v17[1] - 2;
      v22[2] = v17[2] - 2;
      v22[3] = v17[3] - 2;
      void v22[4] = v17[4] - 2;
      v22[5] = v17[5] - 2;
      v22[6] = v17[6] - 2;
      v22[7] = v17[7] - 2;
      v22[8] = v17[8] - 2;
      v22[9] = v17[9] - 2;
      v22[10] = v17[10] - 2;
      v22[11] = v17[11] - 2;
      v22[12] = v17[12] - 2;
      v22[13] = v17[13] - 2;
      v22[14] = v17[14] - 2;
      v22[15] = v17[15] - 2;
      v22[16] = v17[16] - 2;
      v22[17] = v17[17] - 2;
      v22[18] = v17[18] - 2;
      v22[19] = v17[19] - 2;
      int v18 = v13(v16, v22, v2);
      unsigned int v19 = (2 * v18) & 0xE63ED650;
      unsigned int v15 = (v18 ^ 0xF31F6B28) + 1023393792;
    }

    else
    {
      unsigned int v19 = 975126382;
    }

    __asm { BR              X8 }
  }

  *(_DWORD *)(v7 + 348) |= v4 - 277;
  *(_DWORD *)(v7 + 4_Block_object_dispose(va, 8) = 1226533025;
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, _DWORD *))(v6 + 8LL * (v4 - 180)))( *v2,  v7 + 336,  v7 + 340,  v7 + 344,  v3);
  uint64_t v21 = *(void *)(v1 + 24);
  *(_DWORD *)(*(void *)(v1 + 8) - 0x73495CDCA303A990LL) = *v2;
  *(_DWORD *)(v21 - 0x128359AFBCC7BB19LL) = *v3 + (v4 ^ 0x7896BC4C) - ((2 * *v3) & 0xF12D7AA6);
  *(_DWORD *)uint64_t v1 = 528123064;
  return result;
}

void sub_100092468(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 ^ (235795823 * (a1 ^ 0x94AD4959));
  uint64_t v2 = *(void *)(a1 + 8);
  ((void (*)(void, void (*)()))*(&off_10025B940 + v1 - 96))( *(&off_10025B940 + (v1 ^ 0x131)),  sub_1000A875C);
  __asm { BR              X10 }

uint64_t sub_100092508()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * ((1039 * (**(void **)(v1 + 8LL * ((v2 + 12) ^ 0x197)) == 0LL)) ^ (v2 + 12)))
                            - ((((v2 + 12) ^ 0x10C) + 1283) ^ (5 * ((v2 + 12) ^ 0x10Cu)) ^ 0x407LL)))();
}

  ;
}

uint64_t sub_100092568@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(uint64_t))(v2 + 8LL * (a1 - 1206)))(v1);
}

void sub_100092584(uint64_t a1)
{
  __asm { BR              X8 }

uint64_t sub_1000925C4()
{
  return 4294925273LL;
}

uint64_t sub_100092640(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))((char *)*(&off_100257500 + ((196 * (*(_DWORD *)(a2 + 4) != 1007577603)) ^ 0x14Fu)) - 8))();
}

uint64_t sub_100092680()
{
  return 4294925278LL;
}

uint64_t sub_100092688(uint64_t a1, uint64_t a2)
{
  int v2 = **(unsigned __int8 **)(a2 + 8);
  BOOL v3 = v2 == 0;
  char v4 = (v2 != 0) ^ 0xF;
  if (v3) {
    char v5 = -8;
  }
  else {
    char v5 = -6;
  }
  *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = v4 + v5;
  return 0LL;
}

void sub_1000926BC(uint64_t a1)
{
  uint64_t v2 = (qword_100273838 ^ qword_100273AB8) - (void)&v8;
  uint64_t v3 = 56757557 * v2 - 0x1C82EEFF48C8B8B7LL;
  unint64_t v4 = 56757557 * (v2 ^ 0xE37D1100B7374749LL);
  int v5 = byte_100203D40[(53 * ((v4 + v3) ^ 0x49))];
  uint64_t v6 = (void (*)(void, void (*)()))*(&off_10025B940
  qword_100273AB8 = v3;
  char v7 = byte_100208D40[v5 ^ 0xC0];
  qword_100273838 = v4;
  v6(*(&off_10025B940 + ((53 * ((v4 + v3) ^ 0x49)) ^ v7) - 135), sub_1000A875C);
  __asm { BR              X11 }

uint64_t sub_1000927D8()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((2004 * (**(void **)(v2 + 1752) == 0LL)) ^ v0)) - 8LL))();
}

  ;
}

uint64_t sub_100092810@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(uint64_t))(v2 + 8LL * (a1 ^ 0x498u)))(v1);
}

void sub_100092830(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 44) - 1224239923 * (((a1 | 0x1FD8AEE4) - a1 + (a1 & 0xE027511B)) ^ 0xED6B5333);
  __asm { BR              X14 }

uint64_t sub_10009295C(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((250
                                          * (((v1 - 1) ^ (((v1 + 2090925085) ^ a1)
                                                                         + 1869611004
                                                                         + ((2 * a1) & 0xB123DBAE ^ 0x21DB04) == 1208085971)) & 1)) ^ v1))
                            - 12LL))();
}

uint64_t sub_1000929CC(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * ((59
}

uint64_t sub_100092A3C(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v7
                              + 8LL
                              * ((((a2 + a4 + 142 + a7 - 1063) > 0xFFFFFFEF) * ((a4 - 6) ^ 0x4E7)) ^ a4)))();
}

uint64_t sub_100092A74@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v10 = (v8 + a1 + a2) + a4;
  uint64_t v11 = ((_BYTE)v8 + (_BYTE)a1 + (_BYTE)a2) & 0xF;
  unint64_t v12 = v11 + v6 - v10;
  unint64_t v13 = (v11 | v7) - v10;
  uint64_t v14 = (v11 | v5) - v10;
  BOOL v16 = (unint64_t)(v4 - a4) >= 0x10 && v12 >= 0x10 && v13 >= ((a3 + 148) ^ 0x407uLL);
  unint64_t v17 = v14 + ((a3 + 806) ^ 0x6A8LL);
  int v19 = !v16 || v17 < 0x10;
  return (*(uint64_t (**)(void))(v9 + 8LL * (((2 * v19) | (8 * v19)) ^ a3)))();
}

uint64_t sub_100092AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return ((uint64_t (*)(uint64_t, uint64_t, void, void))(*(void *)(v8
                                                                               + 8LL
                                                                               * (((((v7 < 0x10) ^ (a7 + 6)) & 1)
                                                                                 * (a7 - 1286)) ^ a7))
                                                                   - 12LL))( a1,  a2,  0LL,  (a7 - 1323));
}

uint64_t sub_100092B28@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W4>, uint64_t a4@<X8>)
{
  v17.val[1].i64[0] = ((_BYTE)v11 + 10) & 0xF;
  v17.val[1].i64[1] = ((_BYTE)v11 + 9) & 0xF;
  v17.val[2].i64[0] = ((_BYTE)v11 + 8) & 0xF;
  v17.val[2].i64[1] = ((_BYTE)v11 + 7) & 0xF;
  v17.val[3].i64[0] = ((_BYTE)v11 + 6) & 0xF;
  v17.val[3].i64[1] = ((_BYTE)v11 + 5) & 0xF;
  unsigned int v12 = a1 + v9 + a2;
  v13.i64[0] = 0x1717171717171717LL;
  v13.i64[1] = 0x1717171717171717LL;
  v17.val[0].i64[0] = ((_BYTE)a1 + (_BYTE)v9 + (_BYTE)a2) & 0xF;
  v17.val[0].i64[1] = ((_BYTE)v11 + 11) & 0xF;
  v14.i64[0] = vqtbl4q_s8(v17, (int8x16_t)xmmword_1002013F0).u64[0];
  v18.val[0].i64[1] = ((_BYTE)v11 + 3) & 0xF;
  v18.val[1].i64[1] = ((_BYTE)v11 + 1) & 0xF;
  v18.val[2].i64[1] = (v11 - 1) & 0xF;
  v18.val[3].i64[1] = ((_BYTE)v11 + 13) & 0xF;
  v18.val[0].i64[0] = ((_BYTE)v11 + 4) & 0xF;
  v18.val[1].i64[0] = ((_BYTE)v11 + 2) & 0xF;
  v18.val[2].i64[0] = v11 & 0xF;
  v18.val[3].i64[0] = (v11 + 14) & 0xF;
  v14.i64[1] = vqtbl4q_s8(v18, (int8x16_t)xmmword_1002013F0).u64[0];
  int8x16_t v15 = vrev64q_s8(vmulq_s8(v14, v13));
  *(int8x16_t *)(a4 - 15 + v12) = veorq_s8( veorq_s8( veorq_s8( veorq_s8(*(int8x16_t *)(v6 + (v12 & 0xF) - 15), *(int8x16_t *)(v4 - 15 + v12)),  *(int8x16_t *)(v7 + (v12 & 0xF) - 15)),  *(int8x16_t *)((a3 & 0xEBC493F7) - 537 + (unint64_t)(v12 & 0xF) + v5 - 412)),  vextq_s8(v15, v15, 8uLL));
  return ((uint64_t (*)(void))(*(void *)(v10
                                        + 8LL
}

void sub_100092C8C()
{
}

uint64_t sub_100092C98(int a1)
{
  return ((uint64_t (*)(uint64_t))(*(void *)(v2 + 8LL * ((164 * ((a1 ^ v1 ^ 0xA430E9BA) != 0)) ^ v1)) - 12LL))(1299419913LL);
}

uint64_t sub_100092CE4@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  BOOL v12 = v8 > 0x3CCA44D5;
  *(_BYTE *)(a2 + (a1 - 1299419913)) = *(_BYTE *)(v4 + (((_BYTE)a1 - 9) & 0xF)) ^ *(_BYTE *)(v2 + (a1 - 1299419913)) ^ *(_BYTE *)(v5 + (((_BYTE)a1 - 9) & 0xF)) ^ *(_BYTE *)(((a1 - 1299419913) & 0xFLL) + v3 + 1) ^ (23 * ((a1 - 9) & 0xF));
  unsigned int v13 = ((8 * v6) ^ 0x75C219E2) + a1;
  uint64_t v14 = (a1 + 1);
  int v15 = v12 ^ (v13 < v7);
  BOOL v16 = v13 < v9;
  if (!v15) {
    BOOL v12 = v16;
  }
  return ((uint64_t (*)(uint64_t))(*(void *)(v11 + 8LL * ((v12 * v10) ^ v6)) - 12LL))(v14);
}

uint64_t sub_100092D84( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v9
                              + 8LL * ((((5 * (a8 ^ 0xB7)) ^ (a8 - 323395494) & 0x13469FF7 ^ 0x7BA) * (v8 == a3)) ^ a8)))();
}

uint64_t sub_100092DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return ((uint64_t (*)(void))(*(void *)(v8
                                        + 8LL
}

uint64_t sub_100092E0C@<X0>( int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  *(_DWORD *)(v62 - 136) = v59;
  *(void *)(v62 - 120) = v55 - 7;
  *(void *)(v62 - 12_Block_object_dispose(va, 8) = a5 - 7;
  *(_DWORD *)(v62 - 140) = v59 & 0xFFFFFFF8;
  *(_DWORD *)(v62 - 132) = 8 - (v59 & 0xFFFFFFF8);
  int v64 = -a3;
  char v65 = v60 + a1 + v61;
  uint64_t v66 = (a1 + v61 + a2 + v64);
  v68.val[0].i64[0] = ((_BYTE)a1 + (_BYTE)v61 + (_BYTE)a2 + (_BYTE)v64) & 0xF;
  v68.val[0].i64[1] = (v65 + 11 + (_BYTE)v64) & 0xF;
  v68.val[1].i64[0] = (v65 + 10 + (_BYTE)v64) & 0xF;
  v68.val[1].i64[1] = (v63 + (_BYTE)v64 + (_BYTE)a4 + 75) & 0xF;
  v68.val[2].i64[0] = (v65 + 8 + (_BYTE)v64) & 0xF;
  v68.val[2].i64[1] = (v65 + 7 + (_BYTE)v64) & 0xF;
  v68.val[3].i64[0] = (v65 + 6 + (_BYTE)v64) & 0xF;
  v68.val[3].i64[1] = (v65 + 5 + (_BYTE)v64) & 0xF;
  *(int8x8_t *)(*(void *)(v62 - 128) + v66) = veor_s8( veor_s8( veor_s8( *(int8x8_t *)(v57 + (v66 & 0xF) - 7),  *(int8x8_t *)(*(void *)(v62 - 120) + v66)),  veor_s8( *(int8x8_t *)(v58 + (v66 & 0xF) - 7),  *(int8x8_t *)((v66 & 0xF) + v56 - 6))),  vrev64_s8( vmul_s8( (int8x8_t)*(_OWORD *)&vqtbl4q_s8( v68,  (int8x16_t)xmmword_100201400),  (int8x8_t)0x1717171717171717LL)));
}

void sub_100092F50()
{
}

uint64_t sub_100092F5C(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v2
                              + 8LL
}

uint64_t sub_100092F9C@<X0>(int a1@<W4>, int a2@<W5>, uint64_t a3@<X8>)
{
  int v9 = a2 ^ 0x5F7;
  *(_BYTE *)(a3 + (v9 + a1 - 1208086452)) = *(_BYTE *)(v5 + ((v9 + a1 - 1208086452) & 0xFLL)) ^ *(_BYTE *)(v3 + (v9 + a1 - 1208086452)) ^ *(_BYTE *)(v6 + (((a2 ^ 0xF7) + (_BYTE)a1 + 76) & 0xF)) ^ *(_BYTE *)((((a2 ^ 0xF7) + (_BYTE)a1 + 76) & 0xF) + v4 + 1) ^ (23 * ((v9 + a1 + 76) & 0xF));
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((108 * (a1 - 1 != v7)) ^ (a2 + 545))) - 12LL))();
}

uint64_t sub_100093010@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50)
{
  uint64_t v53 = *(void *)(v50 + 24);
  *(int8x16_t *)(v52 - 112) = veorq_s8(*(int8x16_t *)*(void *)(v50 + 16), (int8x16_t)xmmword_100201420);
  if (a9) {
    BOOL v54 = v53 == 0x25FFE88E84438D31LL;
  }
  else {
    BOOL v54 = 1;
  }
  int v55 = !v54;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v51 + 8LL * (int)((1165 * v55) ^ a4)) - 12LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48,  a49,  a50);
}

uint64_t sub_100093070( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49)
{
  int v50 = HIDWORD(a25) - ((2 * HIDWORD(a25) + 754764924) & 0x3070ED0A) + 246865091;
  int v51 = ((a4 + 1673988114) ^ v50) + ((2 * v50) & 0xF7FEFEEE ^ 0x3070EC0A);
  BOOL v53 = (((_BYTE)v51 + 9) & 0xF) != 0 || v51 == 2080341879;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v49 + 8LL * (int)((((v53 ^ (a4 - 91)) & 1) * (((a4 - 1133726690) & 0x43934FA5) - 1435)) ^ a4)) - 12LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48,  a49);
}

uint64_t sub_100093124@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51)
{
  int v56 = v53 | 0x50;
  uint64_t v57 = (char *)*(&off_10025B940 + (v53 | 0x50) + 14) - 8;
  int v58 = (v57[*(unsigned __int8 *)(v52 - 0x25FFE88E84438D2FLL) ^ 0xD7LL] ^ ((v53 | 0x50) + 86)) << 8;
  int v59 = (char *)*(&off_10025B940 + ((v53 | 0x50) ^ 0x9A)) - 8;
  int v60 = v59[*v51 ^ 0xB1LL];
  *(_DWORD *)(v55 - 20_Block_object_dispose(va, 8) = v54;
  uint64_t v61 = (uint64_t)*(&off_10025B940 + (v56 ^ 1));
  int v62 = *(unsigned __int8 *)(v61 + (*(unsigned __int8 *)(v52 - 0x25FFE88E84438D24LL) ^ 0x49LL));
  int v63 = v58 | ((v60 ^ 0x1C) << 24);
  HIDWORD(v64) = v62 ^ 2;
  LODWORD(v64) = (v62 ^ 0x2C) << 24;
  LOBYTE(v5_Block_object_dispose(va, 8) = v64 >> 26;
  char v65 = (char *)*(&off_10025B940 + v56 - 132) - 4;
  int v66 = v59[*(unsigned __int8 *)(v52 - 0x25FFE88E84438D25LL) ^ 0xB8LL];
  int v67 = *(unsigned __int8 *)(v61 + (*(unsigned __int8 *)(v52 - 0x25FFE88E84438D28LL) ^ 0x6BLL));
  HIDWORD(v64) = v67 ^ 2;
  LODWORD(v64) = (v67 ^ 0x2C) << 24;
  int v68 = ((v64 >> 26) ^ 0x53) << 16;
  LOBYTE(v62) = v57[*(unsigned __int8 *)(v52 - 0x25FFE88E84438D23LL) ^ 0x2ELL];
  int v69 = *(unsigned __int8 *)(v61 + (*(unsigned __int8 *)(v52 - 0x25FFE88E84438D30LL) ^ 0x47LL));
  HIDWORD(v64) = v69 ^ 2;
  LODWORD(v64) = (v69 ^ 0x2C) << 24;
  unsigned int v70 = v63 & 0xFF00FF00 | (v65[*(unsigned __int8 *)(v52 - 0x25FFE88E84438D2ELL) ^ 0xECLL] + 104) ^ 9 | (((v64 >> 26) ^ 0x1E) << 16);
  LODWORD(v61) = *(unsigned __int8 *)(v61 + (*(unsigned __int8 *)(v52 - 0x25FFE88E84438D2CLL) ^ 0xCBLL));
  int v71 = ((v58 ^ 0xFB) << 16) | ((v66 ^ 0xA4) << 24) | ((v62 ^ 0xEE) << 8);
  HIDWORD(v64) = v61 ^ 2;
  LODWORD(v64) = (v61 ^ 0x2C) << 24;
  unsigned int v72 = ((v65[*(unsigned __int8 *)(v52 - 0x25FFE88E84438D2ALL) ^ 0xA9LL] + 104) | ((v57[*(unsigned __int8 *)(v52 - 0x25FFE88E84438D2BLL) ^ 0x30LL] ^ 0x1E) << 8)) & 0xFF00FFFF | (((v64 >> 26) ^ 0xBA) << 16) | ((v59[*(unsigned __int8 *)(v52 - 0x25FFE88E84438D2DLL) ^ 0x35LL] ^ 0xD3) << 24);
  unsigned int v73 = v68 & 0xFFFFFF00 | ((v57[*(unsigned __int8 *)(v52 - 0x25FFE88E84438D27LL) ^ 0x77LL] ^ 0xE4) << 8) | (v65[*(unsigned __int8 *)(v52 - 0x25FFE88E84438D26LL) ^ 0xB5LL] + 104) ^ 0xA8 | ((v59[*(unsigned __int8 *)(v52 - 0x25FFE88E84438D29LL) ^ 0xBFLL] ^ 0xCA) << 24);
  LOBYTE(v57) = v65[*(unsigned __int8 *)(v52 - 0x25FFE88E84438D22LL) ^ 0x36LL] + 104;
  uint64_t v74 = (uint64_t)*(&off_10025B940 + (int)(v56 & 0xB9ABD8D0));
  int32x4_t v75 = (char *)*(&off_10025B940 + v56 - 26) - 4;
  unsigned int v76 = *(_DWORD *)(v74 + 4LL * (v57 ^ 0xFDu)) ^ 0xF6CBCA4C ^ *(_DWORD *)&v75[4
                                                                                             * (v58 ^ 0x61)];
  LODWORD(v61) = v76 - ((2 * v76) & 0xEA7EC264);
  *(_DWORD *)(v55 - 160) = v56;
  int32x4_t v77 = (char *)*(&off_10025B940 + v56 - 28) - 4;
  int v78 = (v61 - 180395726) ^ *(_DWORD *)&v77[4 * (v66 ^ 0x31)];
  uint64_t v79 = v62 ^ 0xD6u;
  int32x4_t v80 = (char *)*(&off_10025B940 + (v56 ^ 0x97)) - 8;
  HIDWORD(v512) = v70;
  LODWORD(v79) = *(_DWORD *)&v80[4 * v79] ^ v70 ^ (v78 - ((2 * v78) & 0x72BFC548) - 1184898396);
  LODWORD(v512) = v71 & 0xFFFFFF00 | v57 ^ 0x2A;
  int v81 = v512
  int v82 = v79 ^ v72;
  int v83 = v79;
  int v428 = v79;
  LODWORD(v57) = v79 ^ v72 ^ 0x4D;
  *(_DWORD *)(v55 - 176) = v79 ^ v72;
  *(_DWORD *)(v55 - 120) = v57 ^ v73;
  int v84 = (int)v57;
  unsigned __int8 v411 = v79 ^ v72 ^ 0x4D;
  LODWORD(v57) = v57 ^ v73 ^ v81;
  int v448 = BYTE1(v57);
  LODWORD(v79) = *(_DWORD *)&v75[4 * (BYTE2(v57) ^ 0xEB)] ^ *(_DWORD *)&v80[4 * (BYTE1(v57) ^ 0xF6)];
  unsigned int v85 = v57 ^ 0x12A22190;
  int v438 = BYTE2(v57);
  int v441 = v57;
  LODWORD(v57) = ((v79 ^ 0x688B59CE) - 2 * ((v79 ^ 0x688B59CE) & 0x271F7136 ^ v79 & 0x10) + 656372006) ^ *(_DWORD *)(v74 + 4LL * (v57 ^ 0x10u));
  unsigned int v443 = HIBYTE(v85);
  unsigned int v86 = v83 ^ *(_DWORD *)&v77[4 * (HIBYTE(v85) ^ 0x65)] ^ ((_DWORD)v57 - ((2 * (_DWORD)v57) & 0xEA7EC264) - 180395726);
  LODWORD(v57) = v82 ^ 0xBAF72DE4;
  unsigned int v87 = (2 * (v82 ^ 0xBAF72DE4)) & 0xC483D82E;
  unint64_t v511 = __PAIR64__(v72, v73);
  *(_DWORD *)(v55 - 200) = v86 ^ 0xE241EC17;
  unsigned int v88 = v86;
  *(_DWORD *)(v55 - 16_Block_object_dispose(va, 8) = v86;
  LODWORD(v79) = v86 ^ 0xE241EC17 ^ (v73 - ((2 * v73) & 0xC483D82E) - 498996201);
  unsigned int v89 = v79 ^ v85;
  LODWORD(v59) = v79;
  *(_DWORD *)(v55 - 12_Block_object_dispose(va, 8) = v79;
  int v459 = ((v79 ^ v85) >> 16);
  unsigned int v90 = (_DWORD)v57 - v87;
  int v456 = BYTE1(v89);
  LODWORD(v57) = *(_DWORD *)&v80[4 * (BYTE1(v89) ^ 0x9B)] ^ *(_DWORD *)&v75[4 * (v459 ^ 0x2E)];
  int v532 = v89;
  LODWORD(v57) = ((v57 ^ 0x688B59CE)
                + 656372007
                + ~(2 * ((v57 ^ 0x688B59CE) & 0x271F7127 ^ v57 & 1))) ^ *(_DWORD *)(v74 + 4LL * (v89 ^ 0xD2u));
  LODWORD(v79) = v89 ^ 0x3F3F6DAA;
  v89 >>= 24;
  *(_DWORD *)(v55 - 216) = v89;
  unsigned int v91 = ((_DWORD)v57 - ((2 * (_DWORD)v57) & 0xEA7EC264) - 180395726) ^ *(_DWORD *)&v77[4 * (v89 ^ 0x69)];
  int v92 = v91 ^ v84;
  unsigned int v93 = v91 ^ v84 ^ 0xD694C9D1;
  int v486 = v91 ^ v84;
  LODWORD(v59) = v93 ^ v59;
  *(_DWORD *)(v55 - 14_Block_object_dispose(va, 8) = (_DWORD)v59;
  unsigned int v94 = ((v59 ^ 0x4C12C43B) - ((2 * (v59 ^ 0x4C12C43B)) & 0x973199C6) + 1268305123) ^ v79 ^ 0x9547167F;
  int v495 = BYTE2(v94);
  int v504 = ((unsigned __int16)((((unsigned __int16)v59 ^ 0xC43B)
  int v95 = *(_DWORD *)&v75[4 * (BYTE2(v94) ^ 0x89)] ^ *(_DWORD *)&v80[4 * (v504 ^ 0x3A)] ^ 0x688B59CE;
  int v501 = (((v59 ^ 0x3B) - ((2 * (v59 ^ 0x3B)) & 0xC6) - 29) ^ v79);
  int v96 = (v95 - ((2 * v95) & 0x4E3EE24C) + 656372006) ^ *(_DWORD *)(v74 + 4LL * (v501 ^ 0xE4u));
  unsigned int v513 = HIBYTE(v94);
  unsigned int v97 = (v96 - ((2 * v96) & 0xEA7EC264) - 180395726) ^ *(_DWORD *)&v77[4 * (HIBYTE(v94) ^ 0x1D)];
  unsigned int v471 = v91 ^ v88;
  unsigned int v525 = (v97 - ((2 * v97) & 0xFBBB60AE) + 2111680599) ^ v91 ^ v88;
  int v98 = v525 ^ 0x7DDDB057 ^ v92;
  unsigned int v530 = v98;
  *(_DWORD *)(v55 - 24_Block_object_dispose(va, 8) = v525 ^ 0x7DDDB057;
  unsigned int v99 = ((v98 ^ 0xFE25CD6D) - 2 * ((v98 ^ 0xFD839AAA) & 0x18 ^ (v98 ^ 0xFE25CD6D) & 0x4B98CCFB) + 1268305123) ^ v79;
  int v100 = ((unsigned __int16)(((v98 ^ 0xCD6D)
                                             - 2 * ((v98 ^ 0x9AAA) & 0x18 ^ (v98 ^ 0xCD6D) & 0xCCFB)
                                             - 13085) ^ v79) >> 8);
  *(_DWORD *)(v55 - 220) = v100;
  int v101 = *(_DWORD *)&v80[4 * (v100 ^ 0x6F)];
  unsigned int v529 = v90 - 498996201;
  *(_DWORD *)(v55 - 232) = BYTE2(v99);
  int v102 = v101 ^ *(_DWORD *)&v75[4 * (BYTE2(v99) ^ 0xA8)] ^ 0x688B59CE;
  unsigned int v103 = (v102 - ((2 * v102) & 0xEA7EC264) - 180395726) ^ *(_DWORD *)&v77[4 * (HIBYTE(v99) ^ 0x85)];
  int v519 = (((v98 ^ 0x6D) - 2 * ((v98 ^ 0xAA) & 0x18 ^ (v98 ^ 0x6D) & 0xFB) - 29) ^ v79);
  int v104 = (v103 - ((2 * v103) & 0x4E3EE24C) + 656372006) ^ *(_DWORD *)(v74 + 4LL * (v519 ^ 0x25u));
  unsigned int v523 = v98 ^ 0xFD839AAA ^ v59;
  unsigned int v398 = (v104 - ((2 * v104) & 0xD8C7C8F0) + 1818485880) ^ v93;
  *(_DWORD *)(v55 - 132) = v523 ^ v398;
  int v105 = v99 ^ v523 ^ v398 ^ 0x4B9C9481;
  __int16 v393 = v523 ^ (v104 - ((2 * v104) & 0xC8F0) - 7048) ^ v93 ^ 0x9481;
  *(_DWORD *)(v55 - 256) = v99;
  unsigned int v434 = (v105 ^ 0xED797D13) >> 24;
  int v420 = ((v105 ^ 0xED797D13) >> 16);
  int v106 = *(_DWORD *)&v77[4 * (v434 ^ 0x1D)] ^ *(_DWORD *)&v75[4 * (v420 ^ 0x89)] ^ 0x24EBDA58;
  int v431 = ((unsigned __int16)(v105 ^ 0x7D13) >> 8);
  int v107 = (v106 - ((2 * v106) & 0x72BFC548) - 1184898396) ^ *(_DWORD *)&v80[4 * (v431 ^ 0x3A)];
  *(_DWORD *)(v55 - 184) = v525 ^ 0x7DDDB057 ^ v104;
  int v515 = (((v98 ^ 0x6D) - 2 * ((v98 ^ 0xAA) & 0x18 ^ (v98 ^ 0x6D) & 0xFB) - 29) ^ v79 ^ v523 ^ v398 ^ 0x81);
  int v108 = v525 ^ 0x7DDDB057 ^ v104 ^ *(_DWORD *)(v74 + 4LL * (v515 ^ 0x88u)) ^ (v107
                                                                             - ((2 * v107) & 0x4E3EE24C)
                                                                             + 656372006);
  int v109 = v108 ^ v398 ^ 0x7C166C11;
  int v491 = v108;
  unsigned int v110 = (v99 ^ v109) >> 24;
  *(_DWORD *)(v55 - 240) = v110;
  int v497 = (((v98 ^ 0x6D) - 2 * ((v98 ^ 0xAA) & 0x18 ^ (v98 ^ 0x6D) & 0xFB) - 29) ^ v79 ^ v109);
  unsigned int v111 = *(_DWORD *)&v77[4 * (v110 ^ 0x9B)] ^ *(_DWORD *)(v74 + 4LL * (v497 ^ 0x31u)) ^ 0xD2201014;
  int v480 = ((unsigned __int16)(((v98 ^ 0xCD6D)
                                             - 2 * ((v98 ^ 0x9AAA) & 0x18 ^ (v98 ^ 0xCD6D) & 0xCCFB)
                                             - 13085) ^ v79 ^ v109) >> 8) ^ 0x9A;
  int v112 = (v111 - ((2 * v111) & 0x72BFC548) - 1184898396) ^ *(_DWORD *)&v80[4
                                                                         * (((unsigned __int16)(((v98 ^ 0xCD6D) - 2 * ((v98 ^ 0x9AAA) & 0x18 ^ (v98 ^ 0xCD6D) & 0xCCFB) - 13085) ^ v79 ^ v109) >> 8) ^ 0xA0)];
  int v113 = v99 ^ v109 ^ 0xD3B2B0A;
  int v482 = ((v99 ^ v109) >> 16);
  unsigned int v114 = (v112 - ((2 * v112) & 0xA3A976D4) - 774587542) ^ *(_DWORD *)&v75[4 * (v482 ^ 0xA)];
  int v115 = (v114 - ((2 * v114) & 0x682C56DE) + 873868143) ^ v108;
  *(_DWORD *)(v55 - 136) = v115;
  unsigned int v425 = v115 ^ 0xC995B1C5 ^ v109;
  LODWORD(v59) = v115 ^ 0xC995B1C5;
  __int16 v417 = v115 ^ 0xB1C5;
  unsigned int v484 = v109 ^ v523 ^ v398 ^ 0x4B9C9481;
  *(_DWORD *)(v55 - 144) = v484 ^ 0x71A5DACC;
  unsigned int v116 = ((v425 ^ 0x5A137D54) + 541072148 + (~(2 * (v425 ^ 0x5A137D54)) | 0xBF7FC9D9)) ^ v484 ^ 0x71A5DACC;
  *(_DWORD *)(v55 - 140) = v116;
  int v117 = v116 ^ 0x78CDBFD6;
  unsigned int v118 = ((v116 ^ 0xFF5267D6) - 2 * ((v116 ^ 0x78CDBFD6) & 0x1D ^ (v116 ^ 0xFF5267D6) & 0xBB8B1BD) - 1950830176) ^ v113;
  unsigned int v119 = v118 ^ 0x479AB031;
  int v527 = ((unsigned __int16)(v118 ^ 0xB031) >> 8);
  int v507 = (((v116 ^ 0xD6) - 2 * ((v116 ^ 0xD6) & 0x1D ^ (v116 ^ 0xD6) & 0xBD) - 96) ^ v113);
  int v120 = *(_DWORD *)(v74 + 4LL * (v507 ^ 0xAAu)) ^ *(_DWORD *)&v80[4 * (v527 ^ 0x3A)];
  unsigned int v121 = ((v120 ^ 0x9E409382) - 2 * ((v120 ^ 0x9E409382) & 0x51D4BB6E ^ v120 & 4) - 774587542) ^ *(_DWORD *)&v75[4 * (BYTE2(v119) ^ 0x89)];
  unsigned int v122 = (v121 - ((2 * v121) & 0xEA7EC264) - 180395726) ^ *(_DWORD *)&v77[4 * (HIBYTE(v119) ^ 0x1D)];
  unsigned int v123 = v122 ^ v109;
  unsigned int v124 = ((v122 ^ v109 ^ 0xA6C48CD5) - ((2 * (v122 ^ v109 ^ 0xA6C48CD5)) & 0x17716340) - 1950830176) ^ v113;
  unsigned int v125 = HIBYTE(v124);
  int v126 = BYTE1(v124);
  LODWORD(v79) = *(_DWORD *)&v77[4 * (HIBYTE(v124) ^ 5)] ^ *(_DWORD *)&v80[4 * (BYTE1(v124) ^ 0x6F)] ^ 0x4C608396;
  int v489 = v124;
  LODWORD(v79) = (v79 - ((2 * v79) & 0x4E3EE24C) + 656372006) ^ *(_DWORD *)(v74 + 4LL * (v124 ^ 0x25u));
  LODWORD(v65) = v122 ^ v59;
  int v127 = BYTE2(v124);
  LODWORD(v79) = (v79 - ((2 * v79) & 0xA3A976D4) - 774587542) ^ *(_DWORD *)&v75[4 * (BYTE2(v124) ^ 0xA8)] ^ v122 ^ v59;
  unsigned int v128 = v116 ^ 0x78CDBFD6 ^ v79 ^ v124;
  unsigned int v462 = v116 ^ 0x78CDBFD6 ^ v79;
  int v517 = BYTE1(v128);
  int v129 = *(_DWORD *)(v55 - 200) ^ v529;
  unsigned int v394 = HIBYTE(v128);
  LODWORD(v77) = *(_DWORD *)&v77[4 * (HIBYTE(v128) ^ 0x47)] ^ *(_DWORD *)&v80[4 * (BYTE1(v128) ^ 0x44)];
  int v406 = v128;
  LODWORD(v59) = ((v77 ^ 0x4C608396)
  int v389 = BYTE2(v128);
  unsigned int v130 = ((_DWORD)v59 - ((2 * (_DWORD)v59) & 0xA3A976D4) - 774587542) ^ *(_DWORD *)&v75[4 * (BYTE2(v128) ^ 0xCB)];
  *(_DWORD *)(v55 - 192) = v79;
  HIDWORD(v510) = v79 ^ 0x61C1B0AF ^ (v130 - ((2 * v130) & 0xC26D3A0C) - 516514554);
  int v391 = v79 ^ v122 ^ v109;
  LODWORD(v510) = v391 ^ 0x71817813 ^ (HIDWORD(v510) - ((2 * HIDWORD(v510)) & 0xAA476E0E) + 1428403975);
  HIDWORD(v509) = v510 ^ v462 ^ 0x42632BF0 ^ 0x4662A266;
  LODWORD(v509) = (HIDWORD(v509) - 2 * (HIDWORD(v509) & 0xCFECBDD ^ (v510 ^ v462 ^ 0x42632BF0) & 0x10) + 218024909) ^ v128;
  int v131 = *(_DWORD *)(v55 - 160);
  int v132 = (char *)*(&off_10025B940 + (v131 ^ 0xA9)) - 8;
  LODWORD(v59) = (((v65 ^ 0x1B9155BD) >> 16)
                + 882457460
                + ((2 * ((v65 ^ 0x1B9155BD) >> 16) + 88) & 0x28E ^ 0xF67B7FFF)) ^ *(_DWORD *)&v132[4 * (((v65 ^ 0x1B9155BD) >> 16) ^ 0x2D)];
  *(_DWORD *)(v55 - 200) = 882457459;
  LODWORD(v57) = ((v127 ^ 0x89) + 882457459 - ((2 * (v127 ^ 0x89) + 160207960) & 0x984828E)) ^ *(_DWORD *)&v132[4 * (v127 ^ 0xA4)];
  int v133 = (char *)*(&off_10025B940 + (v131 ^ 0xA2)) - 8;
  unsigned int v134 = ((_DWORD)v59 - ((2 * (_DWORD)v59) & 0x91EA8898) - 923450292) ^ *(_DWORD *)&v133[4 * (BYTE1(v65) ^ 0x47)];
  unsigned int v135 = (char *)*(&off_10025B940 + (v131 ^ 0x1E)) - 4;
  unsigned int v136 = ((_DWORD)v57 - ((2 * (_DWORD)v57) & 0x87908AD8) - 1010285204) ^ *(_DWORD *)&v135[4 * (v125 ^ 0xCC)];
  int v137 = (char *)*(&off_10025B940 + v131 - 210) - 4;
  int v138 = *(_DWORD *)&v137[4 * ((v117 ^ v123) ^ 0x53)];
  unsigned int v139 = *(_DWORD *)&v132[4 * (((v117 ^ v123) >> 16) ^ 0xAA)] ^ *(_DWORD *)&v135[4
                                                                                                * (((v117 ^ v123) >> 24) ^ 0x3E)] ^ ((((v117 ^ v123) >> 16) ^ 0x87) + 882457460 + ((2 * (((v117 ^ v123) >> 16) ^ 0x87) + 88) & 0x28E ^ 0xF67B7FFF)) ^ (181304767 * v138 - ((362609534 * v138 + 499253162) & 0x87908AD8) + 1386825025);
  int v140 = *(_DWORD *)&v137[4 * (v123 ^ 0x74)];
  unsigned int v141 = (181304767 * v140 - ((362609534 * v140 + 499253162) & 0x91EA8898) + 1473659937) ^ *(_DWORD *)&v133[4 * (BYTE1(v123) ^ 0x5A)];
  unsigned int v499 = v141 - ((2 * v141) & 0x87908AD8);
  unsigned int v466 = v126 ^ 0xB0;
  unsigned int v476 = v136 - ((2 * v136) & 0x91EA8898);
  unsigned int v473 = v139 - ((2 * v139) & 0x91EA8898);
  HIDWORD(v514) = (v134 - ((2 * v134) & 0x87908AD8) - 1010285204) ^ *(_DWORD *)&v135[4
                                                                                   * ((v65 ^ 0x1B9155BD) >> 24)] ^ (181304767 * *(_DWORD *)&v137[4 * (v65 ^ 0x7D)] - 1897857067);
  unsigned int v142 = *(_DWORD *)&v132[4 * (((v129 ^ 0xE9B45E6C) >> 16) ^ 0xF5)] ^ ((((v129 ^ 0xE9B45E6C) >> 16) ^ 0xD8)
                                                                                      + 882457460
                                                                                      + ((2
  LODWORD(v65) = *(_DWORD *)(v55 - 128) ^ 0x31676F78;
  unsigned int v143 = *(_DWORD *)&v132[4 * (BYTE2(v65) ^ 0x7B)] ^ ((BYTE2(v65) ^ 0x56)
                                                    + 882457460
                                                    + ((2 * (BYTE2(v65) ^ 0x56) + 88) & 0x28E ^ 0xF67B7FFF));
  LODWORD(v65) = (v143 - ((2 * v143) & 0x87908AD8) - 1010285204) ^ *(_DWORD *)&v135[4 * (v65 >> 24)];
  int v144 = *(_DWORD *)&v132[4 * (v459 ^ 0x34)] ^ ((v459 ^ 0x19) + 882457459 - ((2 * (v459 ^ 0x19) + 160207960) & 0x984828E));
  LODWORD(v59) = (v144 - ((2 * v144) & 0x91EA8898) - 923450292) ^ *(_DWORD *)&v133[4 * (v456 ^ 5)];
  unsigned int v457 = (_DWORD)v65 - ((2 * (_DWORD)v65) & 0x91EA8898);
  unsigned int v460 = (_DWORD)v59 - ((2 * (_DWORD)v59) & 0x87908AD8);
  LODWORD(v59) = *(_DWORD *)&v137[4 * (*(_DWORD *)(v55 - 168) ^ 0xDF)];
  LODWORD(v65) = *(_DWORD *)(v55 - 168) ^ 0x5A18571F;
  LODWORD(v59) = *(_DWORD *)&v135[4 * (v65 >> 24)] ^ ((BYTE2(v65) ^ 0xC1)
                                                                  + 882457460
                                                                  + ((2 * (BYTE2(v65) ^ 0xC1) + 88) & 0x28E ^ 0xF67B7FFF)) ^ *(_DWORD *)&v132[4 * (BYTE2(v65) ^ 0xEC)] ^ (181304767 * (_DWORD)v59 - ((362609534 * (_DWORD)v59 + 499253162) & 0x87908AD8) + 1386825025);
  unsigned int v453 = (_DWORD)v59 - ((2 * (_DWORD)v59) & 0x91EA8898);
  unsigned int v145 = *(_DWORD *)&v135[4 * ((v129 ^ 0xE9B45E6C) >> 24)] ^ (v142 - ((2 * v142) & 0x87908AD8) - 1010285204);
  unsigned int v451 = v145 - ((2 * v145) & 0x91EA8898);
  LOWORD(v74) = v425 ^ 0x8EA4;
  unsigned int v146 = v425 ^ 0x35C48CD5;
  unsigned int v147 = *(_DWORD *)&v132[4 * (BYTE2(v119) ^ 0xDE)] ^ ((BYTE2(v119) ^ 0xF3)
                                                     + 882457460
                                                     + ((2 * (BYTE2(v119) ^ 0xF3) + 88) & 0x28E ^ 0xF67B7FFF));
  unsigned int v148 = *(_DWORD *)&v132[4 * (((v425 ^ 0x35C48CD5) >> 16) ^ 0xFE)] ^ ((((v425 ^ 0x35C48CD5) >> 16) ^ 0xD3)
                                                                                      + 882457460
                                                                                      + ((2
  LODWORD(v59) = *(_DWORD *)&v137[4 * (v117 ^ 0xC5)];
  LODWORD(v65) = (v147 - ((2 * v147) & 0x87908AD8) - 1010285204) ^ *(_DWORD *)&v135[4 * (HIBYTE(v119) ^ 0x36)];
  int v149 = BYTE2(*(_DWORD *)(v55 - 136));
  unsigned int v150 = *(_DWORD *)&v132[4 * (v149 ^ 0xB9)] ^ ((v149 ^ 0x94)
                                              + 882457460
                                              + ((2 * (v149 ^ 0x94) + 88) & 0x28E ^ 0xF67B7FFF));
  int v151 = (v150 - 923450291 + (~(2 * v150) | 0x6E157767)) ^ *(_DWORD *)&v133[4 * (HIBYTE(v417) ^ 0x8B)];
  unsigned int v426 = (_DWORD)v65 - ((2 * (_DWORD)v65) & 0x91EA8898);
  unsigned int v437 = v151 - ((2 * v151) & 0x87908AD8);
  LODWORD(v65) = *(_DWORD *)(v55 - 140) ^ 0x1A5267D6;
  LODWORD(v59) = *(_DWORD *)&v133[4 * (BYTE1(v65) ^ 0x20)] ^ ((BYTE2(v65) ^ 0xD7)
                                                            + 882457460
                                                            + ((2 * (BYTE2(v65) ^ 0xD7) + 88) & 0x28E ^ 0xF67B7FFF)) ^ *(_DWORD *)&v132[4 * (BYTE2(v65) ^ 0xFA)] ^ (181304767 * (_DWORD)v59 - ((362609534 * (_DWORD)v59 + 499253162) & 0x91EA8898) + 1473659937);
  LODWORD(v65) = (v148 - ((2 * v148) & 0x87908AD8) - 1010285204) ^ *(_DWORD *)&v135[4 * HIBYTE(v146)] ^ (181304767 * *(_DWORD *)&v137[4 * (v74 ^ 0x99)] - 1897857067);
  unsigned int v403 = BYTE1(v74) ^ 0x14;
  unsigned int v384 = v417 ^ 0xA3;
  unsigned int v415 = (_DWORD)v65 - ((2 * (_DWORD)v65) & 0x91EA8898);
  unsigned int v418 = (_DWORD)v59 - ((2 * (_DWORD)v59) & 0x87908AD8);
  int v152 = *(_DWORD *)(v55 - 120);
  unsigned int v401 = v428 ^ 0x2BEAE26B;
  LODWORD(v59) = *(_DWORD *)&v132[4 * (((v428 ^ 0x2BEAE26Bu) >> 16) ^ 0xEC)] ^ ((((v428 ^ 0x2BEAE26Bu) >> 16) ^ 0xC1)
                                                                                               + 882457460
                                                                                               + ((2
  LODWORD(v59) = ((_DWORD)v59 - ((2 * (_DWORD)v59) & 0x91EA8898) - 923450292) ^ *(_DWORD *)&v133[4 * (BYTE1(v428) ^ 8)];
  LODWORD(v65) = *(_DWORD *)&v132[4 * (v438 ^ 0x75)] ^ ((v438 ^ 0x58)
                                                      + 882457460
                                                      + ((2 * (v438 ^ 0x58) + 88) & 0x28E ^ 0xF67B7FFF));
  int v153 = *(_DWORD *)&v137[4 * (v411 ^ 0x55)];
  unsigned int v439 = (_DWORD)v59 - ((2 * (_DWORD)v59) & 0x87908AD8);
  LODWORD(v74) = *(_DWORD *)(v55 - 200);
  int v429 = (BYTE2(v152) ^ 0xA7) + v74 - ((2 * (BYTE2(v152) ^ 0xA7) + 160207960) & 0x984828E);
  LODWORD(v59) = ((_DWORD)v65 - ((2 * (_DWORD)v65) & 0x91EA8898) - 923450292) ^ *(_DWORD *)&v133[4 * (v448 ^ 0x9C)] ^ (181304767 * *(_DWORD *)&v137[4 * (v441 ^ 0x63)] - 1897857067);
  unsigned int v442 = v443 ^ 0x4B;
  unsigned int v444 = (_DWORD)v59 - ((2 * (_DWORD)v59) & 0x87908AD8);
  LODWORD(v57) = *(_DWORD *)(v55 - 176);
  LODWORD(v59) = (181304767 * v153 - ((362609534 * v153 + 499253162) & 0x87908AD8) + 1386825025) ^ ((BYTE2(v57) ^ 0xBA)
                                                                                                  + 882457460
                                                                                                  + ((2 * (BYTE2(v57) ^ 0xBA) + 88) & 0x28E ^ 0xF67B7FFF)) ^ *(_DWORD *)&v135[4 * ((v57 >> 24) ^ 0x2F)] ^ *(_DWORD *)&v132[4 * (BYTE2(v57) ^ 0x97)];
  unsigned int v412 = (_DWORD)v59 - ((2 * (_DWORD)v59) & 0x91EA8898);
  LODWORD(v59) = BYTE2(*(_DWORD *)(v55 - 132));
  LODWORD(v59) = *(_DWORD *)&v132[4 * (v59 ^ 0x12)] ^ ((v59 ^ 0x3F)
                                                                   + v74
                                                                   - ((2 * (v59 ^ 0x3F) + 160207960) & 0x984828E));
  unsigned int v154 = *(_DWORD *)(v55 - 184);
  LODWORD(v65) = *(_DWORD *)&v132[4 * (BYTE2(v154) ^ 0x56)] ^ ((BYTE2(v154) ^ 0x7B)
                                                             + 882457460
                                                             + ((2 * (BYTE2(v154) ^ 0x7B) + 88) & 0x28E ^ 0xF67B7FFF));
  unsigned int v155 = (_DWORD)v65 - ((2 * (_DWORD)v65) & 0x87908AD8);
  LODWORD(v65) = *(_DWORD *)&v137[4 * (v398 ^ 0xFB)];
  LODWORD(v59) = ((_DWORD)v59 - ((2 * (_DWORD)v59) & 0x91EA8898) - 923450292) ^ *(_DWORD *)&v133[4
                                                                                               * (HIBYTE(v393) ^ 0x3D)] ^ (181304767 * *(_DWORD *)&v137[4 * (v393 ^ 0x60)] - 1897857067);
  unsigned int v156 = (181304767 * (_DWORD)v65 - ((362609534 * (_DWORD)v65 + 499253162) & 0x91EA8898) + 1473659937) ^ *(_DWORD *)&v133[4 * (BYTE1(v398) ^ 0xEF)];
  HIDWORD(v392) = (_DWORD)v59 - ((2 * (_DWORD)v59) & 0x87908AD8);
  HIDWORD(v385) = v156 - ((2 * v156) & 0x87908AD8);
  LODWORD(v59) = (v155 - 1010285204) ^ *(_DWORD *)&v135[4 * (HIBYTE(v154) ^ 0xD9)] ^ (181304767
                                                                                    * *(_DWORD *)&v137[4 * (v154 ^ 0x79)]
                                                                                    - 1897857067);
  unsigned int v157 = *(_DWORD *)&v132[4 * (v420 ^ 0x86)] ^ ((v420 ^ 0xAB)
                                              + 882457460
                                              + ((2 * (v420 ^ 0xAB) + 88) & 0x28E ^ 0xF67B7FFF));
  unsigned int v158 = (v157 - ((2 * v157) & 0x87908AD8) - 1010285204) ^ *(_DWORD *)&v135[4 * v434];
  unsigned int v383 = v431 ^ 0xEE;
  unsigned int v432 = v158 - ((2 * v158) & 0x91EA8898);
  unsigned int v421 = (_DWORD)v59 - ((2 * (_DWORD)v59) & 0x91EA8898);
  int v449 = (BYTE2(v398) ^ 0x73) + v74 - ((2 * (BYTE2(v398) ^ 0x73) + 160207960) & 0x984828E);
  LODWORD(v59) = *(_DWORD *)&v132[4 * (v389 ^ 0x8B)] ^ ((v389 ^ 0xA6)
                                                      + 882457460
                                                      + ((2 * (v389 ^ 0xA6) + 88) & 0x28E ^ 0xF67B7FFF));
  unsigned int v435 = (BYTE2(v462) ^ 0x8F) + 882457460 + ((2 * (BYTE2(v462) ^ 0x8F) + 88) & 0x28E ^ 0xF67B7FFF);
  unsigned int v159 = v394 ^ 0x22;
  unsigned int v160 = *(_DWORD *)&v132[4 * (BYTE2(*(_DWORD *)(v55 - 192)) ^ 0xE8)] ^ ((BYTE2(*(_DWORD *)(v55 - 192)) ^ 0xC5)
                                                                                        + 882457460
                                                                                        + ((2
  unsigned int v161 = (181304767 * *(_DWORD *)&v137[4 * (*(_DWORD *)(v55 - 192) ^ 0xCA)] - 1897857067) ^ *(_DWORD *)&v135[4 * (HIBYTE(*(_DWORD *)(v55 - 192)) ^ 0x8E)] ^ (v160 - ((2 * v160) & 0x87908AD8) - 1010285204);
  unsigned int v395 = v391 ^ 0x44039AAA;
  unsigned int v162 = (181304767 * *(_DWORD *)&v137[4 * (v391 ^ 0xDB)] - 1897857067) ^ (((v391 ^ 0x44039AAAu) >> 16)
                                                                                          + 882457460
                                                                                          + ((2
  unsigned int v390 = v161 - ((2 * v161) & 0x91EA8898);
  unsigned int v163 = (v162 - ((2 * v162) & 0x91EA8898) - 923450292) ^ *(_DWORD *)&v133[4 * (BYTE1(v391) ^ 0xC0)];
  LODWORD(v59) = *(_DWORD *)&v135[4 * v159] ^ (181304767 * *(_DWORD *)&v137[4 * (v406 ^ 0xFE)] - 1897857067) ^ ((_DWORD)v59 - ((2 * (_DWORD)v59) & 0x87908AD8) - 1010285204);
  unsigned int v407 = v163 - ((2 * v163) & 0x87908AD8);
  LODWORD(v392) = (_DWORD)v59 - ((2 * (_DWORD)v59) & 0x91EA8898);
  int v164 = *(_DWORD *)&v137[4 * (v471 ^ 0xEC)];
  LODWORD(v59) = *(_DWORD *)&v132[4 * (v495 ^ 0x32)] ^ ((v495 ^ 0x1F)
                                                      + 882457460
                                                      + ((2 * (v495 ^ 0x1F) + 88) & 0x28E ^ 0xF67B7FFF));
  int v165 = *(_DWORD *)&v137[4 * (v486 ^ 0xE6)];
  unsigned int v166 = *(_DWORD *)&v135[4 * (HIBYTE(v471) ^ 0xCA)] ^ ((BYTE2(v471) ^ 0x2F)
                                                      + 882457460
                                                      + ((2 * (BYTE2(v471) ^ 0x2F) + 88) & 0x28E ^ 0xF67B7FFF)) ^ *(_DWORD *)&v132[4 * (BYTE2(v471) ^ 2)] ^ (181304767 * v164 - ((362609534 * v164 + 499253162) & 0x87908AD8) + 1386825025);
  LODWORD(v59) = ((_DWORD)v59 - ((2 * (_DWORD)v59) & 0x91EA8898) - 923450292) ^ *(_DWORD *)&v133[4 * (v504 ^ 0x8C)] ^ (181304767 * *(_DWORD *)&v137[4 * (v501 ^ 0xD9)] - 1897857067);
  unsigned int v167 = *(_DWORD *)&v135[4 * ((v486 ^ 0x49A657C7u) >> 24)] ^ ((((v486 ^ 0x49A657C7u) >> 16) ^ 0x35)
                                                             + 882457460
                                                             + ((2
  unsigned int v168 = *(_DWORD *)&v132[4 * (((*(_DWORD *)(v55 - 148) ^ 0x72EFD244u) >> 16) ^ 0x2D)] ^ (((*(_DWORD *)(v55 - 148) ^ 0x72EFD244u) >> 16) + 882457460 + ((2 * ((*(_DWORD *)(v55 - 148) ^ 0x72EFD244u) >> 16) + 88) & 0x28E ^ 0xF67B7FFF));
  unsigned int v505 = v513 ^ 0xAA;
  LODWORD(v514) = (v166 - ((2 * v166) & 0x91EA8898) - 923450292) ^ *(_DWORD *)&v133[4 * (BYTE1(v471) ^ 0x2E)];
  unsigned int v502 = (_DWORD)v59 - ((2 * (_DWORD)v59) & 0x87908AD8);
  unsigned int v386 = BYTE1(v486) ^ 0xB9;
  unsigned int v169 = (v168 - ((2 * v168) & 0x87908AD8) - 1010285204) ^ *(_DWORD *)&v135[4
                                                                          * ((*(_DWORD *)(v55 - 148) ^ 0x72EFD244u) >> 24)] ^ (181304767 * *(_DWORD *)&v137[4 * (*(_DWORD *)(v55 - 148) ^ 0xD4)] - 1897857067);
  unsigned int v487 = v169 - ((2 * v169) & 0x91EA8898);
  LODWORD(v59) = *(_DWORD *)&v132[4 * (v482 ^ 0xC1)] ^ ((v482 ^ 0xEC)
                                                      + 882457460
                                                      + ((2 * (v482 ^ 0xEC) + 88) & 0x28E ^ 0xF67B7FFF));
  unsigned int v170 = ((_DWORD)v59 - ((2 * (_DWORD)v59) & 0x91EA8898) - 923450292) ^ *(_DWORD *)&v133[4
                                                                                       * ((v480
                                                                                         - ((2
                                                                                           * (((v99 ^ v109) >> 8) ^ 0x86839A)) & 0x166)
                                                                                         + 179) ^ 0x54)] ^ (181304767 * *(_DWORD *)&v137[4 * (v497 ^ 0xE2)] - 1897857067);
  unsigned int v381 = BYTE1(v491) ^ 0x77;
  LODWORD(v59) = *(_DWORD *)&v137[4 * (*(_DWORD *)(v55 - 144) ^ 0x91)];
  LODWORD(v59) = (181304767 * (_DWORD)v59 - ((362609534 * (_DWORD)v59 + 499253162) & 0x87908AD8) + 1386825025) ^ *(_DWORD *)&v135[4 * (HIBYTE(v484) ^ 0xBE)];
  unsigned int v498 = v170 - ((2 * v170) & 0x87908AD8);
  unsigned int v481 = (_DWORD)v59 - ((2 * (_DWORD)v59) & 0x91EA8898);
  LODWORD(v59) = *(_DWORD *)&v132[4 * (((v109 ^ 0xEEA2BFA8) >> 16) ^ 0x86)] ^ ((((v109 ^ 0xEEA2BFA8) >> 16) ^ 0xAB)
                                                                                              + 882457460
                                                                                              + ((2
  unsigned int v171 = (181304767 * *(_DWORD *)&v137[4 * (v109 ^ 0x68)] - 1897857067) ^ *(_DWORD *)&v133[4 * (BYTE1(v109) ^ 0x55)] ^ ((_DWORD)v59 - ((2 * (_DWORD)v59) & 0x91EA8898) - 923450292);
  unsigned int v468 = v491 ^ 0x231B9DB5;
  int v172 = ((v491 ^ 0x231B9DB5u) >> 16);
  unsigned int v378 = v172 ^ 0xEC;
  unsigned int v478 = (v172 ^ 0xC1) + 882457460 + ((2 * (v172 ^ 0xC1) + 88) & 0x28E ^ 0xF67B7FFF);
  LODWORD(v380) = v171 - ((2 * v171) & 0x87908AD8);
  int v173 = BYTE2(v484);
  unsigned int v472 = (BYTE2(v484) ^ 0x3D) + 882457460 + ((2 * (BYTE2(v484) ^ 0x3D) + 88) & 0x28E ^ 0xF67B7FFF);
  unsigned int v174 = v525 ^ 0xEC7F7F43;
  int v175 = *(_DWORD *)&v137[4 * (v519 ^ 0x74)];
  unsigned int v176 = v462;
  int v177 = *(_DWORD *)&v137[4 * (v491 ^ 0x75)];
  LODWORD(v57) = *(_DWORD *)&v137[4 * (v525 ^ 0x7A)];
  int v492 = 181304767 * *(_DWORD *)&v137[4 * (v489 ^ 0x60)] - 1897857067;
  int v526 = 181304767 * *(_DWORD *)&v137[4 * (v532 ^ 0xFB)] - 1897857067;
  int v520 = 181304767 * *(_DWORD *)&v137[4 * (*(_DWORD *)(v55 - 128) ^ 0xB8)] - 1897857067;
  int v521 = 181304767 * *(_DWORD *)&v137[4 * (v129 ^ 0xAC)] - 1897857067;
  HIDWORD(v380) = 181304767 * *(_DWORD *)&v137[4 * v384] - 1897857067;
  int v485 = 181304767 * *(_DWORD *)&v137[4 * (v507 ^ 0xF0)] - 1897857067;
  int v533 = 181304767 * *(_DWORD *)&v137[4 * (v152 ^ 0x57)] - 1897857067;
  int v516 = 181304767 * *(_DWORD *)&v137[4 * (v515 ^ 0x2E)] - 1897857067;
  int v490 = 181304767 * *(_DWORD *)&v137[4 * (v462 ^ 0x78)] - 1897857067;
  LODWORD(v385) = 181304767 * v177 - 1897857067;
  LODWORD(a16) = 181304767 * (_DWORD)v57 - 1897857067;
  LODWORD(v57) = (181304767 * v175 - ((362609534 * v175 + 499253162) & 0x87908AD8) + 1386825025) ^ *(_DWORD *)&v135[4 * (HIBYTE(v99) ^ 0x7B)];
  LODWORD(v59) = *(_DWORD *)&v132[4 * (BYTE2(v523) ^ 0x4C)] ^ ((BYTE2(v523) ^ 0x61)
                                                             + 882457460
                                                             + ((2 * (BYTE2(v523) ^ 0x61) + 88) & 0x28E ^ 0xF67B7FFF)) ^ (181304767 * *(_DWORD *)&v137[4 * (v523 ^ 0xD3)] - 1897857067);
  LODWORD(v59) = ((_DWORD)v59 - ((2 * (_DWORD)v59) & 0x91EA8898) - 923450292) ^ *(_DWORD *)&v133[4
                                                                                               * (BYTE1(v523) ^ 0xFA)];
  LODWORD(v77) = *(_DWORD *)&v132[4 * (BYTE2(v174) ^ 0x3C)] ^ ((BYTE2(v174) ^ 0x11)
                                                             + v74
                                                             - ((2 * (BYTE2(v174) ^ 0x11) + 160207960) & 0x984828E));
  unsigned int v178 = (181304767 * *(_DWORD *)&v137[4 * (v530 ^ 0x2A)] - 1897857067) ^ ((BYTE2(v530) ^ 0x37)
                                                                                          + 882457460
                                                                                          + ((2 * (BYTE2(v530) ^ 0x37)
                                                                                            + 88) & 0x28E ^ 0xF67B7FFF)) ^ *(_DWORD *)&v132[4 * (BYTE2(v530) ^ 0x1A)];
  int v408 = (_DWORD)v57 - 923450291 + (~(2 * (_DWORD)v57) | 0x6E157767);
  unsigned int v179 = (v178 - ((2 * v178) & 0x87908AD8) - 1010285204) ^ *(_DWORD *)&v135[4 * (HIBYTE(v530) ^ 0xF9)];
  *(_DWORD *)(v55 - 200) = *(_DWORD *)&v132[4 * (BYTE2(v123) ^ 0x61)];
  int v410 = *(_DWORD *)&v132[4 * (BYTE2(v152) ^ 0x8A)];
  int v464 = *(_DWORD *)&v132[4 * (BYTE2(v398) ^ 0x5E)];
  LODWORD(v379) = *(_DWORD *)&v132[4 * (((v462 ^ 0x42632BF0) >> 16) ^ 0xC1)];
  HIDWORD(v387) = *(_DWORD *)&v132[4 * v378];
  HIDWORD(v379) = *(_DWORD *)&v132[4 * (v173 ^ 0x10)];
  int v180 = *(_DWORD *)(v55 - 232);
  *(_DWORD *)(v55 - 232) = *(_DWORD *)&v132[4 * (v180 ^ 0x1A)];
  LODWORD(v137) = ((*(_DWORD *)(v55 - 256) >> 15) & 0x58 ^ 0x48) + (v180 ^ 0x4C64A1B);
  HIDWORD(v377) = *(_DWORD *)&v133[4 * v466];
  int v467 = *(_DWORD *)&v133[4 * (((unsigned __int16)(v117 ^ v123) >> 8) ^ 0x8E)];
  *(_DWORD *)(v55 - 256) = *(_DWORD *)&v133[4 * (BYTE1(*(_DWORD *)(v55 - 128)) ^ 0x85)];
  *(_DWORD *)(v55 - 16_Block_object_dispose(va, 8) = *(_DWORD *)&v133[4 * (BYTE1(*(_DWORD *)(v55 - 168)) ^ 0xBD)];
  int v423 = *(_DWORD *)&v133[4 * (BYTE1(v129) ^ 0xB4)];
  LODWORD(v38_Block_object_dispose(va, 8) = *(_DWORD *)&v133[4 * (v527 ^ 0x1A)];
  unsigned int v447 = (_DWORD)v137 + 802353480 + ((2 * (_DWORD)v137) & 0x28E ^ 0xF67B7FFF);
  LODWORD(v377) = *(_DWORD *)&v133[4 * v403];
  int v528 = *(_DWORD *)&v133[4 * (BYTE1(v152) ^ 0xF5)];
  *(_DWORD *)(v55 - 176) = *(_DWORD *)&v133[4 * (BYTE1(*(_DWORD *)(v55 - 176)) ^ 0xD6)];
  int v404 = *(_DWORD *)&v133[4 * v383];
  LODWORD(v137) = (_DWORD)v59 - ((2 * (_DWORD)v59) & 0x87908AD8);
  int v397 = *(_DWORD *)&v133[4 * (BYTE1(*(_DWORD *)(v55 - 184)) ^ 0xD7)];
  int v463 = *(_DWORD *)&v133[4 * (BYTE1(v462) ^ 0x76)];
  int v181 = *(_DWORD *)&v133[4 * (BYTE1(*(_DWORD *)(v55 - 192)) ^ 0x16)];
  HIDWORD(v376) = *(_DWORD *)&v133[4 * (v517 ^ 0xBE)];
  *(_DWORD *)(v55 - 184) = *(_DWORD *)&v133[4 * v386];
  unsigned int v182 = v179 - ((2 * v179) & 0x91EA8898);
  *(_DWORD *)(v55 - 192) = *(_DWORD *)&v133[4 * (BYTE1(*(_DWORD *)(v55 - 148)) ^ 0x52)];
  LODWORD(v382) = *(_DWORD *)&v133[4 * v381];
  HIDWORD(v382) = *(_DWORD *)&v133[4 * (BYTE1(*(_DWORD *)(v55 - 144)) ^ 0x70)];
  *(_DWORD *)(v55 - 220) = *(_DWORD *)&v133[4 * (*(_DWORD *)(v55 - 220) ^ 0x84)];
  int v531 = *(_DWORD *)&v133[4 * (BYTE1(v530) ^ 0x2E)];
  LODWORD(v57) = *(_DWORD *)&v133[4 * (BYTE1(*(_DWORD *)(v55 - 248)) ^ 0xC8)];
  *(_DWORD *)(v55 - 12_Block_object_dispose(va, 8) = *(_DWORD *)&v135[4 * (HIBYTE(v123) ^ 0xB2)];
  unsigned int v477 = v476 - 923450292;
  unsigned int v474 = v473 - 923450292;
  *(_DWORD *)(v55 - 216) = *(_DWORD *)&v135[4 * (*(_DWORD *)(v55 - 216) ^ 7)];
  *(_DWORD *)(v55 - 24_Block_object_dispose(va, 8) = v457 - 923450292;
  LODWORD(v387) = v453 - 923450292;
  unsigned int v518 = v451 - 923450292;
  int v452 = *(_DWORD *)&v135[4 * (HIBYTE(*(_DWORD *)(v55 - 136)) ^ 0x25)];
  HIDWORD(v375) = v426 - 923450292;
  HIDWORD(v374) = v415 - 923450292;
  LODWORD(v376) = *(_DWORD *)&v135[4 * (HIBYTE(*(_DWORD *)(v55 - 140)) ^ 0x6D)];
  LODWORD(v132) = HIBYTE(v401);
  int v402 = *(_DWORD *)&v135[4 * (HIBYTE(*(_DWORD *)(v55 - 120)) ^ 0xB8)];
  int v427 = *(_DWORD *)&v135[4 * v442];
  unsigned int v413 = v412 - 923450292;
  int v416 = *(_DWORD *)&v135[4 * v132];
  int v458 = *(_DWORD *)&v135[4 * (HIBYTE(*(_DWORD *)(v55 - 132)) ^ 0xE9)];
  int v399 = *(_DWORD *)&v135[4 * (HIBYTE(v398) ^ 0xE8)];
  unsigned int v454 = v432 - 923450292;
  LODWORD(v375) = v421 - 923450292;
  int v183 = *(_DWORD *)&v135[4 * (HIBYTE(v176) ^ 0xA6)];
  int v494 = *(_DWORD *)&v135[4 * HIBYTE(v395)];
  unsigned int v184 = v390 - 923450292;
  int v185 = v392 - 923450292;
  unsigned int v433 = v487 - 923450292;
  HIDWORD(v38_Block_object_dispose(va, 8) = v481 - 923450292;
  int v422 = *(_DWORD *)&v135[4 * v505];
  HIDWORD(a3) = *(_DWORD *)&v135[4 * HIBYTE(v468)];
  int v469 = *(_DWORD *)&v135[4 * (*(_DWORD *)(v55 - 240) ^ 0x38)];
  LODWORD(v373) = *(_DWORD *)&v135[4 * ((v109 ^ 0xEEA2BFA8) >> 24)];
  LODWORD(v59) = v57 ^ ((_DWORD)v77 - ((2 * (_DWORD)v77) & 0x91EA8898) - 923450292);
  HIDWORD(v373) = *(_DWORD *)&v135[4 * HIBYTE(v174)];
  LODWORD(v374) = *(_DWORD *)&v135[4 * (HIBYTE(v523) ^ 0x1B)];
  *(_DWORD *)(v55 - 132) = v499 - 1010285204;
  LODWORD(v392) = v460 - 1010285204;
  unsigned int v186 = v418 - 1010285204;
  *(_DWORD *)(v55 - 240) = v439 - 1010285204;
  unsigned int v524 = v444 - 1010285204;
  unsigned int v445 = v502 - 1010285204;
  unsigned int v187 = v498 - 1010285204;
  int v188 = (_DWORD)v137 - 1010285204;
  unsigned int v189 = (_DWORD)v59 - ((2 * (_DWORD)v59) & 0x87908AD8) - 1010285204;
  int v190 = HIDWORD(v514) ^ v514 ^ 0x6285F181;
  int v191 = v184 ^ v181 ^ v190;
  uint64_t v192 = *(unsigned __int8 *)(v55 - 105) ^ 0xE4LL;
  int v193 = *(_DWORD *)(v55 - 160);
  id v194 = (char *)*(&off_10025B940 + (v193 ^ 0xF7)) - 4;
  int v195 = v194[*(unsigned __int8 *)(v55 - 104) ^ 0xD3LL] ^ (*(unsigned __int8 *)(v55 - 104)
  uint64_t v196 = (char *)*(&off_10025B940 + (v193 ^ 0xC8)) - 12;
  uint64_t v197 = (char *)*(&off_10025B940 + (v193 ^ 0xD)) - 4;
  int v198 = (((v197[*(unsigned __int8 *)(v55 - 99) ^ 0xF3LL] ^ 2) + 52) << 16) | ((v196[*(unsigned __int8 *)(v55 - 98) ^ 0x20LL] ^ 0xAD) << 8);
  uint64_t v199 = (char *)*(&off_10025B940 + (v193 ^ 0x16)) - 4;
  int v200 = v199[*(unsigned __int8 *)(v55 - 109) ^ 0x41LL];
  LOBYTE(v75) = (v197[*(unsigned __int8 *)(v55 - 111) ^ 0x40LL] + 52) ^ 0x5A;
  *(void *)(v55 - 120) = a1;
  uint64_t v201 = *(unsigned __int8 **)(v55 - 120);
  unsigned int v202 = (v200 ^ 0x13) & 0xFF00FFFF | (v75 << 16) | ((v196[*(unsigned __int8 *)(v55 - 110) ^ 0xBBLL] ^ 0x47) << 8) | ((v194[*(unsigned __int8 *)(v55 - 112) ^ 0x1ELL] ^ (*(unsigned __int8 *)(v55 - 112) - ((2 * *(unsigned __int8 *)(v55 - 112)) & 0x58) + 44) ^ 0x84) << 24);
  v506 = v196;
  v508 = v194;
  int v203 = v199[*(unsigned __int8 *)(v55 - 97) ^ 0x74LL] ^ 0xB4 | v198 | ((v194[*(unsigned __int8 *)(v55 - 100) ^ 0xF3LL] ^ (*(unsigned __int8 *)(v55 - 100) - ((2 * *(unsigned __int8 *)(v55 - 100)) & 0x58) + 44) ^ 0x85) << 24);
  v500 = v199;
  v503 = v197;
  unsigned int v204 = (v199[v192] ^ 0x25) & 0xFF00FFFF | ((v194[*(unsigned __int8 *)(v55 - 108) ^ 0x3ELL] ^ (*(unsigned __int8 *)(v55 - 108) - ((2 * *(unsigned __int8 *)(v55 - 108)) & 0x58) + 44) ^ 0xFFFFFFE1) << 24) | (((v197[*(unsigned __int8 *)(v55 - 107) ^ 0x27LL] + 52) ^ 0x96) << 16) | ((v196[*(unsigned __int8 *)(v55 - 106) ^ 9LL] ^ 0x42) << 8);
  unsigned int v205 = (v199[*(unsigned __int8 *)(v55 - 101) ^ 0xF2LL] ^ 0x9C) & 0xFF00FFFF | ((v195 ^ 0xE0) << 24) | ((v196[*(unsigned __int8 *)(v55 - 102) ^ 0xBELL] ^ 0xE5) << 8) & 0xFF00FFFF | (((v197[*(unsigned __int8 *)(v55 - 103) ^ 0xE9LL] + 52) ^ 0x8A) << 16);
  if ((v191 & 0x80) != 0) {
    int v206 = -128;
  }
  else {
    int v206 = 128;
  }
  *(_DWORD *)(v55 - 136) = v203 ^ 0x113E8AAE;
  *(_DWORD *)(v55 - 140) = v202 ^ 0xB05B07CF;
  *(_DWORD *)(v55 - 144) = v204 ^ 0xA61434B0;
  *(_DWORD *)(v55 - 14_Block_object_dispose(va, 8) = v205 ^ 0x24EA9D88;
  HIDWORD(v496) = v185 ^ HIDWORD(v376);
  LODWORD(v496) = v183 ^ v463 ^ v435 ^ v379 ^ v490;
  HIDWORD(v493) = (v407 - 1010285204) ^ v494;
  LODWORD(v493) = v492 ^ HIDWORD(v377) ^ v477;
  HIDWORD(v48_Block_object_dispose(va, 8) = v474 ^ v467;
  LODWORD(v48_Block_object_dispose(va, 8) = HIDWORD(v374) ^ v377;
  HIDWORD(v483) = HIDWORD(v375) ^ v388 ^ v485;
  LODWORD(v483) = (v437 - 1010285204) ^ v452 ^ HIDWORD(v380);
  HIDWORD(v479) = v186 ^ v376;
  LODWORD(v479) = v382 ^ HIDWORD(a3) ^ v478 ^ HIDWORD(v387) ^ v385;
  HIDWORD(v475) = HIDWORD(v382) ^ v472 ^ HIDWORD(v379) ^ HIDWORD(v388);
  LODWORD(v475) = (v380 - 1010285204) ^ v373;
  HIDWORD(v470) = v187 ^ v469;
  LODWORD(v470) = v375 ^ v397;
  HIDWORD(v465) = v399 ^ v449 ^ v464 ^ (HIDWORD(v385) - 1010285204);
  LODWORD(v465) = (HIDWORD(v392) - 1010285204) ^ v458;
  HIDWORD(v461) = v516 ^ v404 ^ v454;
  LODWORD(v461) = a16 ^ HIDWORD(v373) ^ v189;
  HIDWORD(v455) = (v182 - 923450292) ^ v531;
  LODWORD(v455) = v188 ^ v374;
  HIDWORD(v450) = *(_DWORD *)(v55 - 220) ^ v447 ^ *(_DWORD *)(v55 - 232) ^ v408;
  LODWORD(v450) = v445 ^ v422;
  HIDWORD(v446) = *(_DWORD *)(v55 - 184) ^ (v167 - ((2 * v167) & 0x91EA8898) - 923450292);
  LODWORD(v446) = v433 ^ *(_DWORD *)(v55 - 192);
  HIDWORD(v440) = v387 ^ *(_DWORD *)(v55 - 168);
  LODWORD(v440) = *(_DWORD *)(v55 - 248) ^ *(_DWORD *)(v55 - 256) ^ v520;
  HIDWORD(v436) = v521 ^ v423 ^ v518;
  LODWORD(v436) = v526 ^ *(_DWORD *)(v55 - 216) ^ v392;
  HIDWORD(v430) = v413 ^ *(_DWORD *)(v55 - 176);
  LODWORD(v430) = v528 ^ v429 ^ v402 ^ v410 ^ v533;
  HIDWORD(v424) = v524 ^ v427;
  LODWORD(v424) = *(_DWORD *)(v55 - 240) ^ v416;
  LODWORD(v419) = (v206 + (v191 ^ 0x2497E332)) ^ v190;
  HIDWORD(v419) = *(_DWORD *)(v55 - 208) - 2080341879;
  HIDWORD(v414) = *(_DWORD *)(v55 - 128) ^ ((BYTE2(v123) ^ 0x4C)
                                          + 882457460
                                          + ((2 * (BYTE2(v123) ^ 0x4C) + 88) & 0x28E ^ 0xF67B7FFF)) ^ *(_DWORD *)(v55 - 200) ^ *(_DWORD *)(v55 - 132);
  LODWORD(v414) = (v193 + 834) ^ 0x44A;
  HIDWORD(v409) = (v193 + 834) ^ 0x4F9;
  LODWORD(v409) = (v193 + 834) ^ 0x4D1;
  HIDWORD(v405) = (v193 + 834) ^ 0x428;
  LODWORD(v405) = (v193 + 834) ^ 0x464;
  HIDWORD(v400) = (v193 + 834) & 0x869F9BE6;
  LODWORD(v400) = (v193 + 834) ^ 0x404;
  HIDWORD(v396) = (v193 + 834) ^ 0x4BF;
  *(_DWORD *)(v55 - 132) = v193 + 834;
  LODWORD(v396) = (v193 + 834) ^ 0x498;
  int v207 = (*(_DWORD *)(v55 - 132) - 23) | 0x1A4;
  *(void *)(v55 - 192) = 13LL;
  char v208 = v197[v201[13] ^ 0xF3LL];
  *(void *)(v55 - 160) = 1LL;
  int v209 = ((v208 ^ (v207 + 94)) + 52) << 16;
  uint64_t v210 = v201[1] ^ 0x57LL;
  *(void *)(v55 - 16_Block_object_dispose(va, 8) = 10LL;
  uint64_t v211 = v201[10] ^ 0xB6LL;
  LODWORD(v210) = ((v503[v210] + 52) ^ 0xF6) << 16;
  *(void *)(v55 - 200) = 4LL;
  uint64_t v212 = v201[4];
  int v213 = v508[v212 ^ 0x9A];
  int v214 = (v196[v211] ^ 0xC8) << 8;
  *(void *)(v55 - 240) = 7LL;
  LODWORD(v211) = v213 ^ (v212 + (~(2 * v212) | 0xA7) + 45) ^ 0xFFFFFFCF;
  uint64_t v215 = v201[7] ^ 0xD6LL;
  *(void *)(v55 - 232) = 2LL;
  LODWORD(v211) = v500[v215] ^ 0x76 | ((_DWORD)v211 << 24);
  LODWORD(v215) = v196[v201[2]] ^ 0xDA;
  *(void *)(v55 - 184) = 3LL;
  LODWORD(v210) = v210 | ((_DWORD)v215 << 8);
  LODWORD(v215) = v500[v201[3] ^ 0x74LL];
  *(void *)(v55 - 176) = 12LL;
  LODWORD(v210) = v210 | v215 ^ 0xB4;
  LODWORD(v215) = v508[v201[12] ^ 0x6ELL] ^ (v201[12] - ((2 * v201[12]) & 0x58) + 44) ^ 0x51;
  *(void *)(v55 - 20_Block_object_dispose(va, 8) = 0LL;
  int v216 = v209 | ((_DWORD)v215 << 24);
  unsigned int v217 = v210 | ((v508[*v201 ^ 0x15LL] ^ (*v201 - ((2 * *v201) & 0x58) + 44) ^ 0xAE) << 24);
  LODWORD(v210) = v214 | ((v508[v201[8] ^ 0x46LL] ^ (v201[8] - ((2 * v201[8]) & 0x58) + 44) ^ 0xFFFFFFE7) << 24);
  *(_DWORD *)(v55 - 220) = 278802958;
  *(void *)(v55 - 216) = 14LL;
  LODWORD(v215) = v196[v201[14] ^ 0xD5LL] ^ 0x52;
  *(void *)(v55 - 24_Block_object_dispose(va, 8) = 5LL;
  int v218 = v216 | ((_DWORD)v215 << 8);
  LOBYTE(v215) = (v503[v201[5] ^ 0x9DLL] + 52) ^ 0xF7;
  int v219 = v500[v201[11] ^ 0xC2LL] ^ 0x91 | v210;
  uint64_t v220 = v201[6] ^ 0xA4LL;
  unsigned int v221 = v219 & 0xFF00FFFF | (((v503[v201[9] ^ 0x3ELL] + 52) ^ 0xDF) << 16);
  *(void *)(v55 - 256) = 15LL;
  int v222 = v500[v201[15] ^ 0x47LL] ^ 0xB4 | v218;
  int v522 = v211 & 0xFF00FFFF | (v215 << 16) | ((v196[v220] ^ 2) << 8);
  int v223 = (char *)*(&off_10025B940 + SHIDWORD(v409)) - 12;
  unsigned int v224 = ((((unsigned __int16)(v522 ^ v510) >> 8) ^ 0x4C)
        + 400146842
        - 2 * ((((v522 ^ v510) >> 8) ^ 0xB71C4C) & 0xBA ^ ((v522 ^ v510) >> 8) & 0x20)) ^ *(_DWORD *)&v223[4 * (((unsigned __int16)(v522 ^ v510) >> 8) ^ 0x21)];
  unsigned int v225 = (char *)*(&off_10025B940 + (int)v414) - 8;
  LODWORD(v211) = v217 ^ HIDWORD(v510) ^ 0x730032AA;
  int v226 = (v224 - 1832403857 - ((2 * v224) & 0x258F78DE)) ^ *(_DWORD *)&v225[4
                                                                          * ((v217 ^ BYTE4(v510)) ^ 0xAA)];
  LODWORD(v220) = v509 ^ v222;
  LODWORD(v215) = ((((unsigned __int16)(v509 ^ v222) >> 8) ^ 0xAA)
                 + 400146842
                 - 2 * ((((v509 ^ v222) >> 8) ^ 0x5A0EAA) & 0x9E ^ ((v509 ^ v222) >> 8) & 4)) ^ *(_DWORD *)&v223[4 * (((unsigned __int16)(v509 ^ v222) >> 8) ^ 0xC7)];
  int v227 = v215 + 1902353895 - ((2 * v215) & 0xE2C73BCE);
  LODWORD(v215) = (2 * v226) & 0xE2C73BCE;
  int v228 = v226 + 1902353895;
  unsigned int v229 = v221 ^ HIDWORD(v509);
  v230 = (char *)*(&off_10025B940 + SHIDWORD(v405)) - 8;
  int v231 = *(_DWORD *)&v230[4 * (((v221 ^ HIDWORD(v509)) >> 16) ^ 0x68)];
  LODWORD(v215) = v228 - v215;
  HIDWORD(v233) = v231 ^ 0xC23;
  LODWORD(v233) = v231 ^ 0xB4D5000;
  int v232 = v233 >> 12;
  int v234 = *(_DWORD *)&v230[4 * ((v217 ^ HIDWORD(v510)) >> 16)];
  HIDWORD(v233) = v234 ^ 0xC23;
  LODWORD(v233) = v234 ^ 0xB4D5000;
  v235 = (char *)*(&off_10025B940 + (int)v409) - 8;
  int v236 = v227 ^ *(_DWORD *)&v235[4 * (((v522 ^ v510) >> 24) ^ 0xB7)] ^ (v233 >> 12);
  int v237 = *(_DWORD *)&v230[4 * (((v509 ^ v222) >> 16) ^ 0xE)];
  HIDWORD(v233) = v237 ^ 0xC23;
  LODWORD(v233) = v237 ^ 0xB4D5000;
  int v238 = ((unsigned __int16)(v221 ^ WORD2(v509)) >> 8) ^ *(_DWORD *)&v225[4
                                                                                         * ((v522 ^ v510) ^ 0xFB)] ^ *(_DWORD *)&v223[4 * (((unsigned __int16)(v221 ^ WORD2(v509)) >> 8) ^ 0x23)] ^ (v233 >> 12);
  *(_DWORD *)(v55 - 12_Block_object_dispose(va, 8) = 1902353896;
  int v239 = *(_DWORD *)&v230[4 * ((BYTE2(v522) ^ BYTE2(v510)) ^ 0x1C)];
  HIDWORD(v233) = v239 ^ 0xC23;
  LODWORD(v233) = v239 ^ 0xB4D5000;
  int v240 = *(_DWORD *)&v235[4 * (HIBYTE(v229) ^ 0xF6)] ^ (BYTE1(v211) + 400146842 - ((v211 >> 7) & 0x134)) ^ *(_DWORD *)&v223[4 * (BYTE1(v211) ^ 0x6D)] ^ ((v233 >> 12) + 1902353895 - ((2 * (v233 >> 12)) & 0xE2C73BCE));
  int v241 = v236 - 1832403857 - ((2 * v236) & 0x258F78DE);
  int v242 = v185 ^ HIDWORD(v376) ^ *(_DWORD *)&v235[4 * (BYTE3(v220) ^ 0x5A)] ^ v232 ^ v215;
  unsigned int v243 = v496 ^ *(_DWORD *)&v225[4 * (v220 ^ 0x82)] ^ (v240 - 1832403857 - ((2 * v240) & 0x258F78DE));
  LODWORD(v215) = HIDWORD(v493) ^ *(_DWORD *)&v225[4 * (v229 ^ 0x5F)] ^ v241;
  unsigned int v244 = v419 ^ *(_DWORD *)&v235[4 * BYTE3(v211)] ^ ((v238 ^ 0x851E7DBB)
                                                   + 1902353896
                                                   + ((2 * ((v238 ^ 0x851E7DBB) & 0x71639DEF ^ v238 & 8)) ^ 0xFFFFFFEF));
  LODWORD(v211) = ((unsigned __int16)(v419 ^ *(_WORD *)&v235[4 * BYTE3(v211)] ^ ((v238 ^ 0x7DBB)
                                                                                                - 25112
                                                                                                + ((2
                                                                                                  * ((v238 ^ 0x7DBB) & 0x9DEF ^ v238 & 8)) ^ 0xFFEF))) >> 8) ^ 0x68;
  LODWORD(v220) = v242 ^ 0xF9388C2F;
  int v245 = *(_DWORD *)&v230[4 * ((v242 ^ 0xF9388C2F) >> 16)];
  HIDWORD(v233) = v245 ^ 0xC23;
  LODWORD(v233) = v245 ^ 0xB4D5000;
  int v246 = v233 >> 12;
  int v247 = *(_DWORD *)&v230[4 * (BYTE2(v243) ^ 0x45)];
  HIDWORD(v233) = v247 ^ 0xC23;
  LODWORD(v233) = v247 ^ 0xB4D5000;
  int v248 = v233 >> 12;
  int v249 = *(_DWORD *)&v230[4 * (BYTE2(v215) ^ 0x66)];
  HIDWORD(v233) = v249 ^ 0xC23;
  LODWORD(v233) = v249 ^ 0xB4D5000;
  LODWORD(v211) = (v233 >> 12) ^ *(_DWORD *)&v223[4 * (v211 ^ 0x6D)] ^ (v211
                                                                                    + 400146842
                                                                                    - 2
                                                                                    * (((v244 >> 8) ^ 0x42BD68) & 0x9E ^ (v244 >> 8) & 4));
  int v250 = (v246 - 1832403857 - ((2 * v246) & 0x258F78DE)) ^ *(_DWORD *)&v225[4 * (v215 ^ 0xB6)];
  LODWORD(v211) = (v211 - 1832403857 - ((2 * v211) & 0x258F78DE)) ^ *(_DWORD *)&v225[4 * (v242 ^ 0x61)];
  unsigned int v251 = (((unsigned __int16)(v242 ^ 0x8C2F) >> 8) + 400146842 - (((v242 ^ 0xF9388C2F) >> 7) & 0x134)) ^ 0xD678EAEF ^ *(_DWORD *)&v223[4 * (((unsigned __int16)(v242 ^ 0x8C2F) >> 8) ^ 0x6D)];
  unsigned int v252 = *(_DWORD *)&v235[4 * (BYTE3(v215) ^ 0x43)] ^ 0xD379C659;
  int v253 = v251 + v252 - 2 * (v251 & v252);
  int v254 = *(_DWORD *)&v230[4 * (BYTE2(v244) ^ 0xBD)];
  HIDWORD(v233) = v254 ^ 0xC23;
  LODWORD(v233) = v254 ^ 0xB4D5000;
  unsigned int v255 = *(_DWORD *)&v235[4 * BYTE3(v220)] ^ (v248 + 1902353895 - ((2 * v248) & 0xE2C73BCE));
  int v256 = (v255 - 1832403857 - ((2 * v255) & 0x258F78DE)) ^ *(_DWORD *)&v225[4 * (v244 ^ 0xAB)];
  int v257 = v211 + 1902353895 - ((2 * v211) & 0xE2C73BCE);
  LODWORD(v211) = *(_DWORD *)&v235[4 * (HIBYTE(v244) ^ 0x42)] ^ HIDWORD(v514) ^ *(_DWORD *)&v223[4
                                                                                               * (BYTE1(v243) ^ 0xF7)] ^ ((BYTE1(v243) ^ 0x9A) + 400146842 - 2 * (((v243 >> 8) ^ 0xDE459A) & 0x9E ^ (v243 >> 8) & 4)) ^ (v250 + 1902353895 - ((2 * v250) & 0xE2C73BCE));
  LOBYTE(v249) = BYTE1(v215) ^ 0x54;
  LODWORD(v215) = v493 ^ *(_DWORD *)&v223[4 * (BYTE1(v215) ^ 0x39)] ^ (v256 + 400146842 - ((2 * v256) & 0x2FB38334));
  LODWORD(v220) = HIDWORD(v414) ^ *(_DWORD *)&v225[4 * (v243 ^ 0x48)] ^ ((v253 ^ (v233 >> 12))
                                                                                        - 1832403857
                                                                                        - ((2 * (v253 ^ (v233 >> 12))) & 0x258F78DE));
  int v258 = *(_DWORD *)&v230[4 * (BYTE2(v220) ^ 0x79)];
  int v259 = HIDWORD(v488) ^ *(_DWORD *)&v235[4 * (HIBYTE(v243) ^ 0xDE)] ^ v257;
  HIDWORD(v233) = v258 ^ 0xC23;
  LODWORD(v233) = v258 ^ 0xB4D5000;
  BYTE1(v25_Block_object_dispose(va, 8) = BYTE1(v259) ^ 0x68;
  int v260 = ((v233 >> 12) + 1902353895 - ((2 * (v233 >> 12)) & 0xE2C73BCE)) ^ *(_DWORD *)&v235[4
                                                                                          * ((v259 ^ 0x2261685Eu) >> 24)];
  unsigned int v261 = ((BYTE1(v220) ^ 0xD0)
        + 400146842
        - 2 * (((v220 >> 8) ^ 0x679D0) & 0x9B ^ (v220 >> 8) & 1)) ^ *(_DWORD *)&v223[4 * (BYTE1(v220) ^ 0xBD)];
  int v262 = (v261 - 1832403857 - ((2 * v261) & 0x258F78DE)) ^ *(_DWORD *)&v225[4 * (v211 ^ 0x76)];
  unsigned int v263 = ((BYTE1(v215) ^ 0xEC) + 400146842 - ((2 * ((v215 >> 8) ^ 0xE5FEC)) & 0x134)) ^ *(_DWORD *)&v223[4 * (BYTE1(v215) ^ 0x81)];
  int v264 = *(_DWORD *)&v230[4 * (BYTE2(v215) ^ 0x5F)];
  HIDWORD(v233) = v264 ^ 0xC23;
  LODWORD(v233) = v264 ^ 0xB4D5000;
  int v265 = v233 >> 12;
  HIDWORD(v233) = *(_DWORD *)&v225[4 * (v259 ^ 0x5E)] ^ 0x7BD09BE7;
  LODWORD(v233) = HIDWORD(v233);
  int v266 = (v233 >> 28) ^ __ROR4__( *(_DWORD *)&v235[4 * (BYTE3(v220) ^ 6)] ^ 0x7462B151 ^ (v263 + 1902353895 - ((2 * v263) & 0xE2C73BCE)),  28);
  unsigned int v267 = (v265 + 1902353895 - ((2 * v265) & 0xE2C73BCE)) ^ *(_DWORD *)&v235[4 * (BYTE3(v211) ^ 0xD2)];
  LODWORD(v220) = (v267 - 1832403857 - ((2 * v267) & 0x258F78DE)) ^ *(_DWORD *)&v225[4 * (v220 ^ 0x4C)];
  int v268 = *(_DWORD *)&v230[4 * (BYTE2(v259) ^ 0x1B)];
  HIDWORD(v233) = v268 ^ 0xC23;
  LODWORD(v233) = v268 ^ 0xB4D5000;
  int v269 = v233 >> 12;
  unsigned int v270 = ((v211 >> 8) ^ 0xD2CCC0) & 0x9B ^ (v211 >> 8) & 1;
  int v271 = v220 + 400146842 - ((2 * v220) & 0x2FB38334);
  LODWORD(v220) = *(_DWORD *)&v230[4 * (BYTE2(v211) ^ 0xCC)];
  HIDWORD(v233) = v220 ^ 0xC23;
  LODWORD(v233) = v220 ^ 0xB4D5000;
  LODWORD(v220) = HIDWORD(v374) ^ v377 ^ (v233 >> 12) ^ __ROR4__(v266 ^ 0x78071371, 4);
  LOBYTE(v211) = v215 ^ v249;
  unsigned int v272 = HIDWORD(v483) ^ *(_DWORD *)&v235[4 * (BYTE3(v215) ^ 0xE)] ^ v269 ^ (v262
                                                                           + 1902353895
                                                                           - ((2 * v262) & 0xE2C73BCE));
  int v273 = BYTE1(v258);
  LODWORD(v215) = v483 ^ *(_DWORD *)&v223[4 * (BYTE1(v258) ^ 0x6D)] ^ v271;
  unsigned int v274 = v186 ^ v376 ^ ((BYTE1(v211) ^ 0xC0) + 400146842 - 2 * v270) ^ *(_DWORD *)&v225[4
                                                                                      * (v211 ^ 0xCA)] ^ *(_DWORD *)&v223[4 * (BYTE1(v211) ^ 0xAD)] ^ (v260 - 1832403857 - ((2 * v260) & 0x258F78DE));
  unsigned int v275 = v273 ^ 0x4552953C ^ v215;
  int v276 = *(_DWORD *)&v230[4 * BYTE2(v275)];
  HIDWORD(v233) = v276 ^ 0xC23;
  LODWORD(v233) = v276 ^ 0xB4D5000;
  int v277 = v233 >> 12;
  LODWORD(v211) = v220 ^ 0x99FEE750;
  int v278 = *(_DWORD *)&v230[4 * ((v220 ^ 0x99FEE750) >> 16)];
  HIDWORD(v233) = v278 ^ 0xC23;
  LODWORD(v233) = v278 ^ 0xB4D5000;
  int v279 = BYTE1(v272) ^ 0x29;
  int v280 = v279 + 400146842 - ((2 * ((v272 >> 8) ^ 0xA73B29)) & 0x134);
  int v281 = (BYTE1(v275) + 400146842 - ((v275 >> 7) & 0x134)) ^ *(_DWORD *)&v225[4 * (v272 ^ 0x72)] ^ *(_DWORD *)&v223[4 * (BYTE1(v275) ^ 0x6D)] ^ ((v233 >> 12) - 1832403857 - ((2 * (v233 >> 12)) & 0x258F78DE));
  int v282 = *(_DWORD *)&v230[4 * (BYTE2(v274) ^ 2)];
  HIDWORD(v233) = v282 ^ 0xC23;
  LODWORD(v233) = v282 ^ 0xB4D5000;
  int v283 = *(_DWORD *)&v235[4 * (HIBYTE(v272) ^ 0xA7)] ^ (v233 >> 12) ^ *(_DWORD *)&v225[4 * v275];
  int v284 = *(_DWORD *)&v230[4 * (BYTE2(v272) ^ 0x3B)];
  HIDWORD(v233) = v284 ^ 0xC23;
  LODWORD(v233) = v284 ^ 0xB4D5000;
  LODWORD(v220) = v479 ^ ((BYTE1(v274) ^ 0xD9) + 400146842 - ((2 * ((v274 >> 8) ^ 0x9802D9)) & 0x134)) ^ *(_DWORD *)&v225[4 * (v220 ^ 0x1E)] ^ *(_DWORD *)&v223[4 * (BYTE1(v274) ^ 0xB4)] ^ (v233 >> 12) ^ *(_DWORD *)&v235[4 * (BYTE3(v215) ^ 0x61)];
  unsigned int v285 = HIDWORD(v475) ^ *(_DWORD *)&v235[4 * (HIBYTE(v274) ^ 0x98)] ^ (v281 + 1902353895 - ((2 * v281) & 0xE2C73BCE));
  unsigned int v286 = v475 ^ *(_DWORD *)&v225[4 * (v274 ^ 0x3D)] ^ v280 ^ *(_DWORD *)&v235[4 * BYTE3(v211)] ^ *(_DWORD *)&v223[4 * (v279 ^ 0x6D)] ^ v277;
  int v287 = *(_DWORD *)&v230[4 * (BYTE2(v220) ^ 0x7F)];
  HIDWORD(v233) = v287 ^ 0xC23;
  LODWORD(v233) = v287 ^ 0xB4D5000;
  LODWORD(v215) = v233 >> 12;
  int v288 = *(_DWORD *)&v230[4 * (BYTE2(v286) ^ 0x4C)];
  HIDWORD(v233) = v288 ^ 0xC23;
  LODWORD(v233) = v288 ^ 0xB4D5000;
  unsigned int v289 = HIDWORD(v470) ^ *(_DWORD *)&v223[4 * (BYTE1(v211) ^ 0x6D)] ^ ((v283 ^ 0xE3A42188)
                                                                     + 400146842
                                                                     - 2 * ((v283 ^ 0xE3A42188) & 0x17D9C19E ^ v283 & 4));
  unsigned int v290 = v220 ^ 0x7E05B808;
  LODWORD(v220) = *(_DWORD *)&v225[4
                                 * ((BYTE4(v470) ^ v223[4 * (BYTE1(v211) ^ 0x6D)] ^ ((v283 ^ 0x88) - 102 - 2 * ((v283 ^ 0x88) & 0x9E ^ v283 & 4)) ^ BYTE1(v211)) ^ 0x41)] ^ (((unsigned __int16)(v220 ^ 0xB808) >> 8) + 400146842 - (((v220 ^ 0x7E05B808) >> 7) & 0x134)) ^ *(_DWORD *)&v223[4 * (((unsigned __int16)(v220 ^ 0xB808) >> 8) ^ 0x6D)] ^ ((v233 >> 12) - 1832403857 - ((2 * (v233 >> 12)) & 0x258F78DE));
  LODWORD(v211) = *(_DWORD *)&v230[4 * (BYTE2(v289) ^ 0x81)];
  HIDWORD(v233) = v211 ^ 0xC23;
  LODWORD(v233) = v211 ^ 0xB4D5000;
  LODWORD(v211) = ((v233 >> 12) + 1902353895 - ((2 * (v233 >> 12)) & 0xE2C73BCE)) ^ *(_DWORD *)&v235[4 * HIBYTE(v290)];
  LODWORD(v211) = (v211 - 1832403857 - ((2 * v211) & 0x258F78DE)) ^ *(_DWORD *)&v225[4 * (v286 ^ 0x8D)];
  int v291 = *(_DWORD *)&v225[4 * (v285 ^ 0xFC)] ^ (v215 - 1832403857 - ((2 * v215) & 0x258F78DE)) ^ *(_DWORD *)&v223[4 * (BYTE1(v289) ^ 0xCD)] ^ ((BYTE1(v289) ^ 0xA0) + 400146842 - 2 * (((v289 >> 8) ^ 0x6881A0) & 0x9B ^ (v289 >> 8) & 1));
  LODWORD(v215) = *(_DWORD *)&v230[4 * (BYTE2(v285) ^ 0xC6)];
  LODWORD(v233) = __ROR4__((v215 >> 12) ^ 0x26D69F7, 17) ^ 0xEE910136;
  HIDWORD(v233) = v233;
  int v292 = (v233 >> 15) + ((_DWORD)v215 << 20);
  LODWORD(v211) = v470 ^ *(_DWORD *)&v223[4 * (BYTE1(v285) ^ 0x75)] ^ (v211 + 400146842 - ((2 * v211) & 0x2FB38334));
  LODWORD(v215) = HIDWORD(v465) ^ *(_DWORD *)&v235[4 * (HIBYTE(v286) ^ 0x36)] ^ (v291
                                                                               + 1902353895
                                                                               - ((2 * v291) & 0xE2C73BCE));
  LODWORD(v220) = v465 ^ *(_DWORD *)&v235[4 * (HIBYTE(v285) ^ 0x5A)] ^ (v220
                                                                      + *(_DWORD *)(v55 - 128)
                                                                      + ~((2 * v220) & 0xE2C73BCE));
  unsigned int v293 = HIDWORD(v461) ^ ((BYTE1(v286) ^ 0xDE) + 400146842 - ((2 * ((v286 >> 8) ^ 0x364CDE)) & 0x134)) ^ *(_DWORD *)&v225[4 * v290] ^ *(_DWORD *)&v223[4 * (BYTE1(v286) ^ 0xB3)] ^ *(_DWORD *)&v235[4 * (HIBYTE(v289) ^ 0x68)] ^ v292;
  unsigned int v294 = ((BYTE1(v211) ^ 0x9D) + 400146842 - ((2 * ((v211 >> 8) ^ 0xC2489D)) & 0x134)) ^ *(_DWORD *)&v223[4 * (BYTE1(v211) ^ 0xF0)];
  unsigned int v295 = *(_DWORD *)&v230[4 * (BYTE2(v215) ^ 0x8F)];
  unsigned int v296 = *(_DWORD *)&v225[4 * (v293 ^ 2)] ^ (v295 << 20) ^ (v295 >> 12) ^ 0xC230B4D5 ^ (v294 - 1832403856 + ~((2 * v294) & 0x258F78DE));
  unsigned int v297 = v220 ^ 0xCFB8D782;
  int v298 = *(_DWORD *)&v230[4 * ((v220 ^ 0xCFB8D782) >> 16)];
  HIDWORD(v233) = v298 ^ 0xC23;
  LODWORD(v233) = v298 ^ 0xB4D5000;
  int v299 = ((v233 >> 12) - 1832403857 - ((2 * (v233 >> 12)) & 0x258F78DE)) ^ *(_DWORD *)&v225[4
                                                                                          * ((v211 ^ BYTE1(v285)) ^ 0x3F)];
  unsigned int v300 = v299 + 1902353895 - ((2 * v299) & 0xE2C73BCE);
  int v301 = BYTE1(v215) ^ 0xD9;
  unsigned int v302 = v301 + 400146842 - ((2 * ((v215 >> 8) ^ 0xC78FD9)) & 0x134);
  int v303 = *(_DWORD *)&v230[4 * (BYTE2(v211) ^ 0x48)];
  HIDWORD(v233) = v303 ^ 0xC23;
  LODWORD(v233) = v303 ^ 0xB4D5000;
  int v304 = *(_DWORD *)&v230[4 * (BYTE2(v293) ^ 0x1F)];
  LODWORD(v220) = ((BYTE1(v293) ^ 0x41) + 400146842 - ((v293 >> 7) & 0x134)) ^ *(_DWORD *)&v225[4
                                                                                              * (v220 ^ 0xCC)] ^ *(_DWORD *)&v223[4 * (BYTE1(v293) ^ 0x2C)] ^ ((v233 >> 12) - 1832403856 + ~((2 * (v233 >> 12)) & 0x258F78DE));
  HIDWORD(v233) = v304 ^ 0xC23;
  LODWORD(v233) = v304 ^ 0xB4D5000;
  LODWORD(v211) = v461 ^ (BYTE1(v297) + 400146842 - ((v297 >> 7) & 0x134)) ^ *(_DWORD *)&v225[4
                                                                                            * (v215 ^ 0x50)] ^ *(_DWORD *)&v223[4 * (BYTE1(v297) ^ 0x6D)] ^ (v233 >> 12) ^ *(_DWORD *)&v235[4 * (BYTE3(v211) ^ 0xC2)];
  unsigned int v305 = HIDWORD(v455) ^ *(_DWORD *)&v235[4 * (BYTE3(v215) ^ 0xC7)] ^ (v220 + 1902353895 - ((2 * v220) & 0xE2C73BCE));
  LODWORD(v215) = v188 ^ v374 ^ *(_DWORD *)&v235[4 * HIBYTE(v297)] ^ (v296 + 1902353895 - ((2 * v296) & 0xE2C73BCE));
  unsigned int v306 = HIDWORD(v450) ^ v302 ^ *(_DWORD *)&v235[4 * (HIBYTE(v293) ^ 7)] ^ *(_DWORD *)&v223[4 * (v301 ^ 0x6D)] ^ v300;
  unsigned int v307 = (((unsigned __int16)(v306 ^ 0xCCA2) >> 8) + 400146842 - (((v306 ^ 0x33C8CCA2) >> 7) & 0x134)) ^ *(_DWORD *)&v223[4 * (((unsigned __int16)(v306 ^ 0xCCA2) >> 8) ^ 0x6D)];
  int v308 = *(_DWORD *)&v230[4 * (BYTE2(v305) ^ 0xE6)];
  HIDWORD(v233) = v308 ^ 0xC23;
  LODWORD(v233) = v308 ^ 0xB4D5000;
  int v309 = v233 >> 12;
  int v310 = *(_DWORD *)&v230[4 * (BYTE2(v215) ^ 0x1C)];
  HIDWORD(v233) = v310 ^ 0xC23;
  LODWORD(v233) = v310 ^ 0xB4D5000;
  int v311 = (v233 >> 12) ^ *(_DWORD *)&v223[4 * (BYTE1(v305) ^ 0xD9)] ^ ((BYTE1(v305) ^ 0xB4)
                                                                    + 400146842
                                                                    - ((2 * ((v305 >> 8) ^ 0x4FE6B4)) & 0x134));
  int v312 = (v311 - 1832403857 - ((2 * v311) & 0x258F78DE)) ^ *(_DWORD *)&v225[4 * (v211 ^ 0x62)];
  int v313 = (v307 - 1832403856 + ~((2 * v307) & 0x258F78DE)) ^ *(_DWORD *)&v225[4 * (v215 ^ 0x3A)];
  int v314 = *(_DWORD *)&v225[4 * (v305 ^ 0x96)];
  HIDWORD(v233) = v314 ^ 0x12C7BC6F;
  LODWORD(v233) = v314 ^ 0x80000000;
  HIDWORD(v233) = (v233 >> 29) ^ 0x6615DA09;
  LODWORD(v233) = HIDWORD(v233);
  unsigned int v315 = *(_DWORD *)&v225[4 * (v306 ^ 0xA2)] ^ (((unsigned __int16)(v211 ^ 0x3562) >> 8)
                                                               + 400146842
                                                               - (((v211 ^ 0xFA973562) >> 7) & 0x134)) ^ *(_DWORD *)&v223[4 * (((unsigned __int16)(v211 ^ 0x3562) >> 8) ^ 0x6D)] ^ (v309 - 1832403857 - ((2 * v309) & 0x258F78DE));
  int v316 = (v233 >> 3) + 400146842 - ((2 * (v233 >> 3)) & 0x2FB38334);
  unsigned int v317 = v313 + 1902353895 - ((2 * v313) & 0xE2C73BCE);
  int v318 = *(_DWORD *)&v230[4 * ((v211 ^ 0xFA973562) >> 16)];
  HIDWORD(v233) = v318 ^ 0xC23;
  LODWORD(v233) = v318 ^ 0xB4D5000;
  int v319 = v233 >> 12;
  LODWORD(v220) = *(_DWORD *)&v230[4 * ((v306 ^ 0x33C8CCA2) >> 16)];
  HIDWORD(v233) = v220 ^ 0xC23;
  LODWORD(v233) = v220 ^ 0xB4D5000;
  unsigned int v320 = v450 ^ *(_DWORD *)&v235[4 * (HIBYTE(v306) ^ 0x17)] ^ (v312 + 1902353895 - ((2 * v312) & 0xE2C73BCE));
  LODWORD(v220) = BYTE1(v215);
  int v321 = v316 ^ *(_DWORD *)&v223[4 * (BYTE1(v215) ^ 0xD1)] ^ (v233 >> 12);
  int v322 = *(_DWORD *)(v55 - 128);
  LODWORD(v211) = *(_DWORD *)&v235[4 * (BYTE3(v211) ^ 0xDE)] ^ v514 ^ (v321 + v322 + ~((2 * v321) & 0xE2C73BCE));
  unsigned int v323 = HIDWORD(v446) ^ *(_DWORD *)&v235[4 * (HIBYTE(v305) ^ 0x4F)] ^ v319 ^ v317;
  unsigned int v324 = v446 ^ *(_DWORD *)&v235[4 * (BYTE3(v215) ^ 0x1B)] ^ (v315 + 1902353895 - ((2 * v315) & 0xE2C73BCE));
  int v325 = *(_DWORD *)&v230[4 * (BYTE2(v324) ^ 0x7E)];
  HIDWORD(v233) = v325 ^ 0xC23;
  LODWORD(v233) = v325 ^ 0xB4D5000;
  int v326 = v233 >> 12;
  int v327 = *(_DWORD *)&v230[4 * (BYTE2(v323) ^ 1)];
  HIDWORD(v233) = v327 ^ 0xC23;
  LODWORD(v233) = v327 ^ 0xB4D5000;
  int v328 = ((v233 >> 12) - 1832403857 - ((2 * (v233 >> 12)) & 0x258F78DE)) ^ *(_DWORD *)&v225[4
                                                                                          * (v320 ^ 0xC6)];
  LODWORD(v215) = ((BYTE1(v320) ^ 0x71) + 400146842 - ((2 * ((v320 >> 8) ^ 0xF25B71)) & 0x134)) ^ *(_DWORD *)&v223[4 * (BYTE1(v320) ^ 0x1C)];
  LODWORD(v215) = (v215 + v322 + ~((2 * v215) & 0xE2C73BCE)) ^ *(_DWORD *)&v235[4 * (HIBYTE(v323) ^ 0x1F)];
  int v329 = *(_DWORD *)&v230[4 * (BYTE2(v320) ^ 0x5B)];
  HIDWORD(v233) = v329 ^ 0xC23;
  LODWORD(v233) = v329 ^ 0xB4D5000;
  int v330 = v233 >> 12;
  LODWORD(v220) = v220 ^ 0x73F4E0AF ^ v211;
  int v331 = *(_DWORD *)&v230[4 * BYTE2(v220)];
  HIDWORD(v233) = v331 ^ 0xC23;
  LODWORD(v233) = v331 ^ 0xB4D5000;
  int v332 = v233 >> 12;
  HIDWORD(v233) = v326 ^ ((BYTE1(v323) ^ 0x81) + 400146842 - ((2 * ((v323 >> 8) ^ 0x1F0181)) & 0x134)) ^ 0xD678EAEF ^ *(_DWORD *)&v223[4 * (BYTE1(v323) ^ 0xEC)];
  LODWORD(v233) = HIDWORD(v233);
  LODWORD(v233) = (v233 >> 11) ^ __ROR4__(*(_DWORD *)&v235[4 * (HIBYTE(v320) ^ 0xF2)] ^ 0xD379C659, 11) ^ 0xD490839A;
  HIDWORD(v233) = v233;
  LODWORD(v211) = HIDWORD(v440) ^ *(_DWORD *)&v225[4 * (v323 ^ 0xB8)] ^ ((BYTE1(v324) ^ 0xAA)
                                                                                        + 400146842
                                                                                        - ((2 * ((v324 >> 8) ^ 0x967EAA)) & 0x134)) ^ *(_DWORD *)&v235[4 * (BYTE3(v211) ^ 0x57)] ^ v330 ^ *(_DWORD *)&v223[4 * (BYTE1(v324) ^ 0xC7)];
  unsigned int v333 = v440 ^ *(_DWORD *)&v235[4 * (HIBYTE(v324) ^ 0x96)] ^ (BYTE1(v220)
                                                             + 400146842
                                                             - ((v220 >> 7) & 0x134)) ^ (v328 + 1902353895 - ((2 * v328) & 0xE2C73BCE)) ^ *(_DWORD *)&v223[4 * (BYTE1(v220) ^ 0x6D)];
  unsigned int v334 = HIDWORD(v436) ^ *(_DWORD *)&v225[4 * (v324 ^ 0x88)] ^ v332 ^ (v215
                                                                                      - 1832403857
                                                                                      - ((2 * v215) & 0x258F78DE));
  LODWORD(v220) = v436 ^ *(_DWORD *)&v225[4 * v220] ^ ((v233 >> 21)
                                                                      - 1832403857
                                                                      - ((2 * (v233 >> 21)) & 0x258F78DE));
  BYTE2(v324) = BYTE2(v334) ^ 0x4A;
  int v335 = *(_DWORD *)&v230[4 * (BYTE2(v211) ^ 0x4F)];
  HIDWORD(v233) = v335 ^ 0xC23;
  LODWORD(v233) = v335 ^ 0xB4D5000;
  int v336 = v233 >> 12;
  int v337 = *(_DWORD *)&v223[4 * (BYTE1(v333) ^ 0x96)] ^ ((BYTE1(v333) ^ 0xFB)
                                                     + 400146842
                                                     - ((2 * ((v333 >> 8) ^ 0x3EA2FB)) & 0x134));
  int v338 = (v337 - 1832403857 - ((2 * v337) & 0x258F78DE)) ^ *(_DWORD *)&v225[4 * (v334 ^ 0x75)];
  int v339 = *(_DWORD *)&v230[4 * (BYTE2(v333) ^ 0xA2)];
  HIDWORD(v233) = v339 ^ 0xC23;
  LODWORD(v233) = v339 ^ 0xB4D5000;
  LODWORD(v215) = (((unsigned __int16)(v334 ^ 0xF075) >> 8)
                 + 400146842
                 - (((v334 ^ 0xB54AF075) >> 7) & 0x134)) ^ (v233 >> 12) ^ *(_DWORD *)&v223[4
                                                                                         * (((unsigned __int16)(v334 ^ 0xF075) >> 8) ^ 0x6D)];
  LODWORD(v215) = (v215 + 1902353895 - ((2 * v215) & 0xE2C73BCE)) ^ *(_DWORD *)&v235[4 * (BYTE3(v220) ^ 0xED)];
  int v340 = *(_DWORD *)&v235[4 * (HIBYTE(v334) ^ 0x91)];
  int v341 = *(_DWORD *)&v235[4 * (HIBYTE(v333) ^ 0x3E)];
  LODWORD(v235) = *(_DWORD *)&v235[4 * (BYTE3(v211) ^ 0x24)];
  LODWORD(v220) = v220 ^ 0xC9AF1D8F;
  int v342 = *(_DWORD *)&v225[4 * v220];
  int v343 = *(_DWORD *)&v225[4 * (v333 ^ 0x9A)];
  LODWORD(v225) = *(_DWORD *)&v225[4 * (v211 ^ 0xE7)];
  int v344 = *(_DWORD *)&v230[4 * BYTE2(v324)];
  HIDWORD(v233) = v344 ^ 0xC23;
  LODWORD(v233) = v344 ^ 0xB4D5000;
  unsigned int v345 = HIDWORD(v430) ^ v343 ^ v336 ^ (BYTE1(v220) + 400146842 - ((v220 >> 7) & 0x134)) ^ v340 ^ *(_DWORD *)&v223[4 * (BYTE1(v220) ^ 0x6D)];
  LODWORD(v211) = v430 ^ ((BYTE1(v211) ^ 0xE1) + 400146842 - ((2 * ((v211 >> 8) ^ 0x244FE1)) & 0x134)) ^ v341 ^ *(_DWORD *)&v223[4 * (BYTE1(v211) ^ 0x8C)] ^ v342 ^ (v233 >> 12);
  unsigned int v346 = HIDWORD(v424) ^ v225 ^ (v215 - 1832403857 - ((2 * v215) & 0x258F78DE));
  LODWORD(v220) = v424 ^ v235 ^ (*(_DWORD *)&v230[4 * BYTE2(v220)] >> 12) ^ (*(_DWORD *)&v230[4 * BYTE2(v220)] << 20) ^ (v338 + 1902353895 - ((2 * v338) & 0xE2C73BCE));
  v347 = (char *)*(&off_10025B940 + SHIDWORD(v400)) - 12;
  uint64_t v348 = (uint64_t)*(&off_10025B940 + (int)v405);
  LODWORD(v215) = *(_DWORD *)&v347[4 * (BYTE1(v220) ^ 0x97)] ^ *(_DWORD *)(v348
                                                                         + 4LL
                                                                         * ((BYTE4(v424) ^ v225 ^ (v215 + 111 - ((2 * v215) & 0xDE))) ^ 7u));
  LODWORD(v225) = *(_DWORD *)&v347[4 * (BYTE1(v345) ^ 0x50)];
  int v349 = *(_DWORD *)&v347[4 * ((unsigned __int16)(v346 ^ 0x6F07) >> 8)];
  LODWORD(v235) = *(_DWORD *)&v347[4 * (BYTE1(v211) ^ 0x65)];
  LODWORD(v347) = v215 ^ 0x866C2206;
  int v350 = (v215 ^ 0x866C2206) & 0x7440D53B ^ v215 & 1;
  v351 = (char *)*(&off_10025B940 + (int)v400) - 12;
  LODWORD(v215) = *(_DWORD *)&v351[4 * (HIBYTE(v346) ^ 0xEF)];
  int v352 = *(_DWORD *)&v351[4 * (BYTE3(v211) ^ 0x16)];
  LODWORD(v223) = *(_DWORD *)&v351[4 * (BYTE3(v220) ^ 0x5F)];
  LODWORD(v347) = (_DWORD)v347 + 1950405946 - 2 * v350;
  int v353 = *(_DWORD *)&v351[4 * (HIBYTE(v345) ^ 0xD2)];
  int v354 = *(_DWORD *)(v55 - 132);
  v355 = (char *)*(&off_10025B940 + v354 - 888) - 8;
  LODWORD(v351) = *(_DWORD *)&v355[4 * (BYTE2(v220) ^ 0x8C)];
  int v356 = *(_DWORD *)&v355[4 * (BYTE2(v346) ^ 0x2A)];
  uint64_t v357 = *(unsigned int *)&v355[4 * (BYTE2(v211) ^ 0x13)];
  LODWORD(v347) = (v347 ^ v352) - 2049991278 - ((2 * (v347 ^ v352)) & 0xB9F3B24);
  uint64_t v358 = *(unsigned int *)(v348 + 4LL * (v345 ^ 0x54u));
  LODWORD(v211) = *(_DWORD *)(v348 + 4LL * (v211 ^ 0x8Fu));
  unsigned int v359 = *(_DWORD *)&v355[4 * (BYTE2(v345) ^ 0x2F)] ^ v347;
  LODWORD(v230) = *(_DWORD *)(v348 + 4LL * (v220 ^ 0xEu));
  LODWORD(v34_Block_object_dispose(va, 8) = *(_DWORD *)(v55 - 148) ^ v511 ^ (v359 - ((2 * v359) & 0x4CD03E14) - 1503125750);
  v360 = (char *)*(&off_10025B940 + v354 - 811) - 4;
  *(_BYTE *)(*(void *)(v55 - 120) + 8LL) = v360[BYTE3(v348) ^ 0xD7LL] ^ 0x51;
  unsigned int v361 = ((v349 ^ v351 ^ 0x7B3EFE49)
        + 1950405946
        - 2 * ((v349 ^ v351 ^ 0x7B3EFE49) & 0x7440D53E ^ (v349 ^ v351) & 4)) ^ v353;
  int v362 = (v361 + 2023571933 - ((2 * v361) & 0xF13A83BA)) ^ v211;
  unsigned int v363 = *(_DWORD *)(v55 - 144) ^ HIDWORD(v511) ^ (v362 - ((2 * v362) & 0x492D6C64) + 613856818);
  v364 = (char *)*(&off_10025B940 + SHIDWORD(v396)) - 8;
  *(_BYTE *)(*(void *)(v55 - 120) + *(void *)(v55 - 240)) = (v364[v363 ^ 0xC7LL] - 90) ^ 0x5F;
  v365 = *(_BYTE **)(v55 - 120);
  uint64_t v366 = (uint64_t)*(&off_10025B940 + v354 - 874);
  LODWORD(v220) = *(unsigned __int8 *)(v366 + (BYTE1(v363) ^ 0x13LL));
  HIDWORD(v233) = v220 ^ 0x35;
  LODWORD(v233) = ~(_DWORD)v220 << 24;
  v365[6] = (v233 >> 30) ^ 0x40;
  LODWORD(v220) = ((v358 ^ 0xFD52DC4F ^ v356) + 1950405946 - ((2 * (v358 ^ 0xFD52DC4F ^ v356)) & 0xE881AA74)) ^ v223;
  LODWORD(v220) = (v220 - ((2 * v220) & 0xFDE2C7B6) - 17734693) ^ v235;
  LODWORD(v220) = *(_DWORD *)(v55 - 140) ^ HIDWORD(v512) ^ (v220 - ((2 * v220) & 0x65B30A9A) + 853116237);
  LODWORD(v347) = *(unsigned __int8 *)(v366 + BYTE1(v220));
  HIDWORD(v233) = v347 ^ 0x35;
  LODWORD(v233) = ~(_DWORD)v347 << 24;
  v365[*(void *)(v55 - 232)] = (v233 >> 30) ^ 0x7E;
  uint64_t v367 = (uint64_t)*(&off_10025B940 + (int)v396);
  v365[9] = *(_BYTE *)(v367 - 12 + (BYTE2(v348) ^ 0xFBLL)) ^ 0xB8;
  LODWORD(v225) = ((v215 ^ v225 ^ 0x8AB1B6E1)
                 - 2049991278
                 - 2 * ((v215 ^ v225 ^ 0x8AB1B6E1) & 0x5CF9D9E ^ (v215 ^ v225) & 0xC)) ^ v357;
  LODWORD(v225) = ((_DWORD)v225 + 2023571933 - ((2 * (_DWORD)v225) & 0xF13A83BA)) ^ v230;
  LODWORD(v225) = *(_DWORD *)(v55 - 136) ^ v512 ^ ((_DWORD)v225 - ((2 * (_DWORD)v225) & 0x2778111E) - 1816393585);
  v365[*(void *)(v55 - 192)] = *(_BYTE *)(v367 - 12 + (BYTE2(v225) ^ 0xB8LL)) ^ 0x6B;
  v365[11] = (v364[v348 ^ 0x1BLL] - 90) ^ 0x7D;
  v365[*(void *)(v55 - 248)] = *(_BYTE *)(v367 - 12 + (BYTE2(v363) ^ 3LL)) ^ 0x15;
  uint64_t v368 = *(void *)(v55 - 208);
  v365[*(void *)(v55 - 200)] = v360[HIBYTE(v363) ^ 0x6DLL] ^ 0xA9;
  int v369 = *(unsigned __int8 *)(v366 + (BYTE1(v348) ^ 0x92LL));
  HIDWORD(v233) = v369 ^ 0x35;
  LODWORD(v233) = ~v369 << 24;
  v365[*(void *)(v55 - 168)] = (v233 >> 30) ^ 0xD2;
  v365[v368] = v360[BYTE3(v220) ^ 0x53LL] ^ 0x45;
  v365[*(void *)(v55 - 184)] = (v364[v220 ^ 0x95LL] - 90) ^ 0xAF;
  v365[*(void *)(v55 - 256)] = (v364[v225 ^ 0x64LL] - 90) ^ 0x27;
  v365[*(void *)(v55 - 176)] = v360[(v225 >> 24) ^ 0x6ELL] ^ 0xD3;
  int v370 = *(unsigned __int8 *)(v366 + (BYTE1(v225) ^ 0x1FLL));
  HIDWORD(v233) = v370 ^ 0x35;
  LODWORD(v233) = ~v370 << 24;
  v365[*(void *)(v55 - 216)] = (v233 >> 30) ^ 0x58;
  v365[*(void *)(v55 - 160)] = *(_BYTE *)(v367 - 12 + (BYTE2(v220) ^ 0xC8LL)) ^ 0x3A;
  uint64_t v371 = (_DWORD)v368 + 278802970 - 2 * ((v368 + 16) & *(_DWORD *)(v55 - 220));
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *, char *, char *, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)(a51 + 8LL * ((1544 * ((v371 ^ 0x109E320A) < HIDWORD(v419))) | (v354 - 567))) - 12LL))( 9LL,  184LL,  v357,  v367,  v371,  53LL,  v367 - 12,  v358,  a2,  a3,  v373,  v374,  v375,  v376,  v377,  v379,  v380,  v382,  v385,  v387,  v388,  v392,  a16,  a17,  a18,  v396,  v400,  v405,  v409,  v414,  v419,  v424,  v430,  v436,  v440,  v446,  v450,  v455,  v461,  v465,  v470,  v475,  v479,  v483,  v488,  v493,  v496,  v500,  v503,
           v506,
           v508,
           v509,
           v510,
           v511,
           v512,
           v514);
}

void sub_100097958( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59,int a60,int a61,int a62)
{
  *(_DWORD *)(v62 - 136) = a59 ^ 0x488E53A3;
  *(_DWORD *)(v62 - 14_Block_object_dispose(va, 8) = a61 ^ 0x1D317EA5;
  *(_DWORD *)(v62 - 140) = a62 ^ 0x46CF4CB5;
  *(_DWORD *)(v62 - 144) = a60 ^ 0xDDCA292E;
  JUMPOUT(0x100095C34LL);
}

uint64_t sub_1000979AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, int a23, int a24, uint64_t a25, int a26, int a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59,int a60)
{
  unsigned int v61 = a27 - ((a24 << (((a60 + 110) | 5) ^ 0x16)) & 0xA56969AE) + 1228086037;
  return ((uint64_t (*)(void))(*(void *)(v60
                                        + 8LL
                                        * (a60 ^ (8
                                                * (((2 * v61) & 0xEBF9FABE ^ 0xA16968AE)
                                                 + (v61 ^ (((a60 + 257815126) & 0xF0A20FAF) + 659046878))
                                                 - 95430936 != 1884083271))))
                            - 12LL))();
}

uint64_t sub_100097A88(int a1, int a2)
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL * ((103 * (a2 + a1 + 349 * (v2 ^ 0x7A9u) - 1979514208 - 1046 < 8)) ^ v2))
                            - (((v2 ^ 0x7A9u) + 1915) ^ 0x776LL)))();
}

uint64_t sub_100097B14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8
                                                                                          + 8LL
                                                                                          * (int)((((a3 ^ 0x369) + 2888)
                                                                                                 * (a7 >> 4 == 123719638)) ^ a3))
                                                                              - 12LL))( a1,  a2,  a3,  a4,  v7);
}

uint64_t sub_100097B48@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, unint64_t a5@<X8>)
{
  uint64_t v9 = (a2 + a1 + a4);
  unint64_t v10 = v9 + a5 + 1;
  uint64_t v11 = (a2 + a1) & 0xF;
  uint64_t v12 = v11 - v9;
  unint64_t v13 = v7 + v12;
  ++v11;
  unint64_t v14 = v7 + v11;
  unint64_t v15 = v6 + v12;
  unint64_t v16 = v6 + v11;
  unint64_t v17 = v5 + v12;
  unint64_t v18 = v5 + v11;
  BOOL v20 = v16 > a5 && v15 < v10;
  char v22 = v14 > a5 && v13 < v10 || v20;
  if (v18 <= a5 || v17 >= v10) {
    char v24 = v22;
  }
  else {
    char v24 = 1;
  }
  return ((uint64_t (*)(void))(*(void *)(v8
                                        + 8LL
}

uint64_t sub_100097BD4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * (((v8 < ((a8 - 638) ^ 0x20Au)) * ((a8 ^ 0x771) - 912)) ^ a8)) - 12LL))();
}

uint64_t sub_100097C0C@<X0>( int a1@<W0>, int a2@<W1>, int a3@<W3>, int a4@<W4>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  *(_DWORD *)(v60 - 120) = v58 + 14;
  v68.val[1].i64[0] = ((_BYTE)v58 + 6) & 0xF;
  v68.val[1].i64[1] = ((_BYTE)v58 + 5) & 0xF;
  v68.val[2].i64[0] = ((_BYTE)v58 + 4) & 0xF;
  v68.val[2].i64[1] = ((_BYTE)v58 + 3) & 0xF;
  v68.val[3].i64[0] = ((_BYTE)v58 + 2) & 0xF;
  v68.val[3].i64[1] = ((_BYTE)v58 + 1) & 0xF;
  v69.val[0].i64[0] = v58 & 0xF;
  v69.val[0].i64[1] = ((_BYTE)v58 - 1) & 0xF;
  unsigned int v61 = a2 + a1 + a3;
  v69.val[1].i64[0] = *(_DWORD *)(v60 - 120) & 0xF;
  v69.val[1].i64[1] = ((_BYTE)v58 + 13) & 0xF;
  v69.val[2].i64[0] = ((_BYTE)v58 + 12) & 0xF;
  v69.val[2].i64[1] = ((_BYTE)v58 + 11) & 0xF;
  v69.val[3].i64[0] = ((_BYTE)v58 + 10) & 0xF;
  v69.val[3].i64[1] = (v58 + 9) & 0xF;
  v62.i64[0] = 0x505050505050505LL;
  v62.i64[1] = 0x505050505050505LL;
  v63.i64[0] = 0xAEAEAEAEAEAEAEAELL;
  v63.i64[1] = 0xAEAEAEAEAEAEAEAELL;
  v68.val[0].i64[0] = v61 & 0xF;
  v68.val[0].i64[1] = ((_BYTE)v58 + 7) & 0xF;
  v64.i64[0] = vqtbl4q_s8(v68, (int8x16_t)xmmword_1002013F0).u64[0];
  v64.i64[1] = vqtbl4q_s8(v69, (int8x16_t)xmmword_1002013F0).u64[0];
  int8x16_t v65 = vrev64q_s8( veorq_s8( veorq_s8(*(int8x16_t *)(a5 - 15 + v61), *(int8x16_t *)(v57 + v68.val[0].i64[0] - 15)),  veorq_s8(*(int8x16_t *)(v56 + v68.val[0].i64[0] - 15), *(int8x16_t *)(v55 + v68.val[0].i64[0] - 15))));
  int8x16_t v66 = vrev64q_s8(veorq_s8(veorq_s8(vextq_s8(v65, v65, 8uLL), v63), vmulq_s8(v64, v62)));
  *(int8x16_t *)(a5 - 15 + v61) = vextq_s8(v66, v66, 8uLL);
  return ((uint64_t (*)(void))(*(void *)(a55
                                        + 8LL
                                        * ((((v59 & 0xFFFFFFF0) == 16) * (((a4 - 2085784765) & 0x7C528DF7) + 346)) ^ a4))
                            - 8LL))();
}

void sub_100097D8C()
{
}

uint64_t sub_100097D98(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

uint64_t sub_100097DD0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v9 + 8LL * ((422 * (((a8 ^ 0x626 ^ ((a8 - 550) | 0x404)) & v8) != 0)) ^ a8)))();
}

uint64_t sub_100097E10@<X0>( char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  *(_DWORD *)(v63 - 132) = v59;
  *(_DWORD *)(v63 - 12_Block_object_dispose(va, 8) = v62;
  unsigned int v64 = v59 & 0xFFFFFFF8;
  *(_DWORD *)(v63 - 136) = v64;
  *(_DWORD *)(v63 - 120) = -v64;
  char v65 = v60 + a2 + a1;
  uint64_t v66 = v58 - v61 + (((v53 - 18) | 0x31) ^ v54);
  v68.val[0].i64[0] = ((_BYTE)v58 - (_BYTE)v61 + (((v53 - 18) | 0x31) ^ v54)) & 0xF;
  v68.val[0].i64[1] = (v65 + 7 - (_BYTE)v61) & 0xF;
  v68.val[1].i64[0] = (v65 + 6 - (_BYTE)v61) & 0xF;
  v68.val[1].i64[1] = (v65 + 5 - (_BYTE)v61) & 0xF;
  v68.val[2].i64[0] = (v65 + 4 - (_BYTE)v61) & 0xF;
  v68.val[2].i64[1] = (v65 + 3 - (_BYTE)v61) & 0xF;
  v68.val[3].i64[0] = (v65 + 2 - (_BYTE)v61) & 0xF;
  v68.val[3].i64[1] = (v65 + 1 - (_BYTE)v61) & 0xF;
  *(int8x8_t *)(a3 - 7 + v66) = vrev64_s8( veor_s8( veor_s8( vrev64_s8( veor_s8( veor_s8(*(int8x8_t *)(a3 - 7 + v66), *(int8x8_t *)(v57 + (v66 & 0xF) - 7)),  veor_s8( *(int8x8_t *)(v56 + (v66 & 0xF) - 7),  *(int8x8_t *)(v55 + (v66 & 0xF) - 7)))),  (int8x8_t)0xAEAEAEAEAEAEAEAELL),  vmul_s8( (int8x8_t)*(_OWORD *)&vqtbl4q_s8(v68, (int8x16_t)xmmword_100201400),  (int8x8_t)0x505050505050505LL)));
}

void sub_100097F7C()
{
}

uint64_t sub_100097F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(v6
                                                                                        + 8LL
                                                                                        * (int)(((((v5 - 958116418) & 0x391BB41F)
                                                                                                + (v5 ^ 0xFFFFF9D6))
                                                                                               * (*(_DWORD *)(v7 - 132) == *(_DWORD *)(v7 - 136))) | v5)))( a1,  a2,  a3,  a4,  a5,  v5 ^ 0x62Eu);
}

uint64_t sub_100097FD0@<X0>(int a1@<W4>, int a2@<W5>, uint64_t a3@<X8>)
{
  uint64_t v9 = (v4 + a1 + 567);
  *(_BYTE *)(a3 + v9) ^= *(_BYTE *)(v7 + (v9 & 0xF)) ^ *(_BYTE *)(v6 + (v9 & 0xF)) ^ *(_BYTE *)(v5 + (v9 & 0xF)) ^ (5 * (v9 & 0xF)) ^ 0xAE;
  return (*(uint64_t (**)(void))(v8 + 8LL * ((25 * (a1 - 1 == v3)) ^ (a2 - 497))))();
}

void sub_100098030()
{
  if (v0 == 924252542) {
    int v1 = 528123064;
  }
  else {
    int v1 = -528097440;
  }
  *(_DWORD *)(v2 + 40) = v1;
}

void sub_100098094(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    BOOL v2 = *(void *)(a1 + 8) == 0x2940FF9A650624C8LL;
  }
  else {
    BOOL v2 = 1;
  }
  int v3 = !v2;
  int v1 = *(_DWORD *)(a1 + 32) ^ (1224239923 * (((a1 | 0xB7698061) - a1 + (a1 & 0x48967F9E)) ^ 0x45DA7DB6));
  __asm { BR              X8 }

uint64_t sub_1000981C4()
{
  *(void *)(v3 - 184) = &STACK[0x73495CDCA303AF30];
  *(void *)(v3 - 16_Block_object_dispose(va, 8) = &STACK[0x128359AFBCC7BE5D];
  *(_DWORD *)(v3 - 160) = ((v0 ^ 0x6CD) - 291) ^ (1178560073
                                                * ((((v3 - 192) | 0xFAD1E183) - ((v3 - 192) | 0x52E1E7C) + 86908540) ^ 0x1DE4C3EB));
  LOBYTE(STACK[0x19A0]) = 73 * ((((v3 + 64) | 0x83) - ((v3 + 64) | 0x7C) + 124) ^ 0xEB) + 116;
  uint64_t v4 = ((uint64_t (*)(uint64_t))(*(void *)(v2 + 8LL * ((v0 ^ 0x6CD) - 395)) - 8LL))(v3 - 192);
  int v5 = *(_DWORD *)(v3 - 192);
  LODWORD(STACK[0x4FC]) = v5;
  return ((uint64_t (*)(uint64_t))(*(void *)(v1
                                                      + 8LL * ((1549 * (v5 == (v0 ^ 0x247) + 528121328)) ^ v0 ^ 0x6CD))
                                          - 8LL))(v4);
}

uint64_t sub_1000982CC()
{
  LODWORD(STACK[0x30C]) = v2;
  STACK[0x298] = (unint64_t)&STACK[0x14688F5EE1E00330];
  STACK[0x290] = (unint64_t)&STACK[0x75E8EE415267DEEF];
  STACK[0x288] = (unint64_t)&STACK[0x4FE3AE517815B9E7];
  STACK[0x280] = (unint64_t)&STACK[0x6B80B300B99A07B];
  *(void *)(v5 - 192) = &STACK[0x20409EC631A18FA];
  *(_DWORD *)(v5 - 184) = v0
                        - 831981571
                        * ((((2 * ((v5 - 192) ^ 0x5A635D1D)) | 0x9439548E) - ((v5 - 192) ^ 0x5A635D1D) + 904091065) ^ 0x9DE277E)
                        - 594;
  *(_WORD *)(v5 - 180) = 16740
                       - 2051 * ((((2 * ((v5 - 192) ^ 0x5D1D)) | 0x548E) - ((v5 - 192) ^ 0x5D1D) + 21945) ^ 0x277E);
  uint64_t v6 = ((uint64_t (*)(uint64_t))(*(void *)(v4 + 8LL * (v0 ^ 0x683)) - 4LL))(v5 - 192);
  int v7 = LOBYTE(STACK[0x367]);
  int v8 = (LOBYTE(STACK[0x364]) << 24) | (LOBYTE(STACK[0x365]) << 16) | (LOBYTE(STACK[0x366]) << 8) | v7;
  LODWORD(STACK[0x340]) = v8 - 1039150886 - ((v8 & 0x420FD31F ^ v7 & 3) << ((v0 - 58) ^ v1)) + 578;
  uint64_t v9 = *(void *)(v3 + 8LL * (((4 * ((STACK[0x344] & 8) == 0)) | (32 * ((STACK[0x344] & 8) == 0))) ^ v0));
  STACK[0x258] = *(void *)(v4 + 8LL * (v0 - 1710));
  STACK[0x250] = *(void *)(v4 + 8LL * (v0 - 1604)) - 4LL;
  uint64_t v10 = *(void *)(v4 + 8LL * (v0 ^ 0x61B));
  STACK[0x260] = v10 - 8;
  STACK[0x248] = v10 + 0x25FFE88E84438D4DLL;
  LODWORD(STACK[0x324]) = v2;
  return ((uint64_t (*)(uint64_t))(v9 - 12))(v6);
}

uint64_t sub_100098650@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W8>)
{
  if ((a5 & 2) != 0) {
    int v5 = 1520508590;
  }
  else {
    int v5 = 1520508591;
  }
  LODWORD(STACK[0x4CC]) = v5;
  LODWORD(STACK[0x2F0]) = 212141947;
  LODWORD(STACK[0x2F8]) = 1267802054;
  STACK[0x2D8] = (unint64_t)&STACK[0xE30];
  STACK[0x2E0] = (unint64_t)&STACK[0xEB0];
  STACK[0x318] = (unint64_t)&STACK[0x630];
  STACK[0x2E8] = (unint64_t)&STACK[0xF30];
  return sub_100098F24(a1, a2, a3, a4, 3766869857LL);
}

int *sub_1000986A4(int *result)
{
  *uint64_t result = v1 | 4;
  return result;
}

uint64_t sub_1000986AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W8>)
{
  int v7 = 1520508594;
  if ((a4 & 0x20) == 0) {
    int v7 = 1520508591;
  }
  LODWORD(STACK[0x598]) = v7;
  if (v4 > 1565342537)
  {
    uint64_t v8 = LODWORD(STACK[0x30C]);
    if (v4 == 1565342538 || v4 == 2030493040) {
      goto LABEL_11;
    }
    int v9 = 1713653836;
  }

  else
  {
    uint64_t v8 = LODWORD(STACK[0x30C]);
    if (v4 == -1607137447 || v4 == 372471675) {
      goto LABEL_11;
    }
    int v9 = 972747254;
  }

  if (v4 != v9) {
    JUMPOUT(0x100098678LL);
  }
LABEL_11:
  *(_OWORD *)&STACK[0x1910] = xmmword_100201430;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6
                                                                                          + 8LL
                                                                                          * ((((v5 - 697) ^ (v5 - 1158))
                                                                                            * ((a4 & 0x20) == 0)) ^ (v5 - 452)))
                                                                              - 12LL))( a1,  a2,  a3,  v8,  3766869857LL);
}

uint64_t sub_1000987B0@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, int a46, int a47, uint64_t a48)
{
  STACK[0x1948] = 0x5B35ABDC9167FB2LL;
  STACK[0x1940] = 0xEE0D7F6BA58B2CCELL;
  int v50 = a1 + 569;
  int v51 = STACK[0x598];
  LODWORD(STACK[0x4CC]) = STACK[0x598];
  int v52 = 944348131 * ((v49 - 192) ^ 0xA319A44E);
  *(void *)(v49 - 12_Block_object_dispose(va, 8) = &STACK[0x6A0DCBB00FAC3D98];
  *(void *)(v49 - 184) = a48;
  *(_DWORD *)(v49 - 136) = (v51 - ((2 * v51 + 1253950118) & 0x6ED75398) + 1556777759) ^ v52;
  *(void *)(v49 - 16_Block_object_dispose(va, 8) = &STACK[0x25FFE88E8443A641];
  *(void *)(v49 - 160) = &STACK[0x1940];
  *(void *)(v49 - 144) = &STACK[0x7F6B73F0467115A8];
  *(_DWORD *)(v49 - 152) = v52 + a1 + 1158 - 486;
  *(_DWORD *)(v49 - 192) = v52 + a47 + 953861913;
  uint64_t v53 = ((uint64_t (*)(uint64_t))((char *)*(&off_10025B940 + ((a1 + 1158) ^ 0x4CE)) - 12))(v49 - 192);
  int v54 = *(_DWORD *)(v49 - 176);
  LODWORD(STACK[0x4FC]) = v54;
  return ((uint64_t (*)(uint64_t))(*(void *)(v48 + 8LL * ((1324 * (v54 == 528123064)) | v50)) - 8LL))(v53);
}

uint64_t sub_100098950( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t (*a34)(void, void, void, void, unint64_t *, unint64_t, void, unint64_t *), uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, int a48, int a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (v68 == 1520508597 || v68 == 1520508594)
  {
    LOBYTE(STACK[0x60F]) = LOBYTE(STACK[0x194F]) ^ 0xAE;
    LOBYTE(STACK[0x60E]) = LOBYTE(STACK[0x194E]) ^ 0xAE;
    LOBYTE(STACK[0x60D]) = LOBYTE(STACK[0x194D]) ^ 0xAE;
    LOBYTE(STACK[0x60C]) = LOBYTE(STACK[0x194C]) ^ 0xAE;
    LOBYTE(STACK[0x60B]) = LOBYTE(STACK[0x194B]) ^ 0xAE;
    LOBYTE(STACK[0x60A]) = LOBYTE(STACK[0x194A]) ^ 0xAE;
    LOBYTE(STACK[0x609]) = LOBYTE(STACK[0x1949]) ^ 0xAE;
    LOBYTE(STACK[0x608]) = LOBYTE(STACK[0x1948]) ^ 0xAE;
    LOBYTE(STACK[0x607]) = LOBYTE(STACK[0x1947]) ^ 0xAE;
    LOBYTE(STACK[0x606]) = LOBYTE(STACK[0x1946]) ^ 0xAE;
    LOBYTE(STACK[0x605]) = LOBYTE(STACK[0x1945]) ^ 0xAE;
    LOBYTE(STACK[0x604]) = LOBYTE(STACK[0x1944]) ^ 0xAE;
    LOBYTE(STACK[0x603]) = LOBYTE(STACK[0x1943]) ^ 0xAE;
    LOBYTE(STACK[0x602]) = LOBYTE(STACK[0x1942]) ^ 0xAE;
    LOBYTE(STACK[0x601]) = LOBYTE(STACK[0x1941]) ^ 0xAE;
    LOBYTE(STACK[0x600]) = LOBYTE(STACK[0x1940]) ^ 0xAE;
  }

  int v71 = a34( LODWORD(STACK[0x5A0]),  (v68 - 1520508589),  a49 ^ 0x4F0E8C8Fu,  (((2 * v69) ^ 0xB5Cu) - 1039150886) ^ LODWORD(STACK[0x340]),  &STACK[0x600],  STACK[0x3D0],  LODWORD(STACK[0x550]),  &STACK[0x1930]);
  unsigned int v72 = ((2 * v71) & 0xD72B7FEC) + (v71 ^ 0x6B95BFF6);
  uint64_t v73 = a68(*a67, STACK[0x3D0], LODWORD(STACK[0x550]));
  return ((uint64_t (*)(uint64_t))(*(void *)(v70 + 8LL * ((87 * (v72 != 1804976118)) ^ (v69 + 280))) - 4LL))(v73);
}

void sub_100098AF8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32)
{
  int v35 = 268847287 * ((v34 - 192) ^ 0xFFAA1128);
  *(_DWORD *)(v34 - 192) = (v33 - (((v33 << (-123 * (v32 ^ 0x41) + 114)) + 685015060) & 0x3EF50970) - 1276853054) ^ v35;
  *(void *)(v34 - 184) = a32;
  *(_DWORD *)(v34 - 176) = v35 + v32 + 1249;
  sub_1000880AC((_DWORD *)(v34 - 192));
  *(_DWORD *)(v34 - 192) = (389 * (v32 ^ 0x241) - 2024874250) ^ (69008221 * ((v34 - 192) ^ 0xD3A2520A));
  sub_1000A8318((_DWORD *)(v34 - 192));
  JUMPOUT(0x100099698LL);
}

uint64_t sub_100098B7C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t (*a30)(uint64_t), uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49)
{
  if (v50 == 1520508594 || v50 == 1520508597)
  {
    int v53 = 916 * (LODWORD(STACK[0x324]) ^ 0x48D);
    LOBYTE(STACK[0x192F]) = LOBYTE(STACK[0x193F]) - ((2 * LOBYTE(STACK[0x193F])) & 0x5C) - 82;
    LOBYTE(STACK[0x192E]) = LOBYTE(STACK[0x193E]) - ((2 * LOBYTE(STACK[0x193E])) & 0x5C) - 82;
    LOBYTE(STACK[0x192D]) = LOBYTE(STACK[0x193D]) - ((v53 + 52) & (2 * LOBYTE(STACK[0x193D]))) - 82;
    LOBYTE(STACK[0x192C]) = LOBYTE(STACK[0x193C]) - ((2 * LOBYTE(STACK[0x193C])) & 0x5C) - 82;
    LOBYTE(STACK[0x192B]) = LOBYTE(STACK[0x193B]) - ((2 * LOBYTE(STACK[0x193B])) & 0x5C) - 82;
    LOBYTE(STACK[0x192A]) = LOBYTE(STACK[0x193A]) - ((2 * LOBYTE(STACK[0x193A])) & 0x5C) - 82;
    LOBYTE(STACK[0x1929]) = LOBYTE(STACK[0x1939]) - ((2 * LOBYTE(STACK[0x1939])) & 0x5C) - 82;
    LOBYTE(STACK[0x1928]) = LOBYTE(STACK[0x1938]) - ((2 * LOBYTE(STACK[0x1938])) & 0x5C) - 82;
    LOBYTE(STACK[0x1927]) = LOBYTE(STACK[0x1937]) - ((2 * LOBYTE(STACK[0x1937])) & 0x5C) - 82;
    LOBYTE(STACK[0x1926]) = LOBYTE(STACK[0x1936]) - ((2 * LOBYTE(STACK[0x1936])) & 0x5C) - 82;
    LOBYTE(STACK[0x1925]) = LOBYTE(STACK[0x1935]) - ((2 * LOBYTE(STACK[0x1935])) & 0x5C) - 82;
    LOBYTE(STACK[0x1924]) = LOBYTE(STACK[0x1934]) - ((2 * LOBYTE(STACK[0x1934])) & 0x5C) - 82;
    LOBYTE(STACK[0x1923]) = LOBYTE(STACK[0x1933]) - ((2 * LOBYTE(STACK[0x1933])) & 0x5C) - 82;
    LOBYTE(STACK[0x1922]) = LOBYTE(STACK[0x1932]) - ((2 * LOBYTE(STACK[0x1932])) & 0x5C) - 82;
    LOBYTE(STACK[0x1921]) = LOBYTE(STACK[0x1931]) - ((2 * LOBYTE(STACK[0x1931])) & 0x5C) - 82;
    int v50 = STACK[0x4CC];
    char v54 = LOBYTE(STACK[0x1930]) - ((2 * LOBYTE(STACK[0x1930])) & 0x5C) - 82;
  }

  else
  {
    int v53 = LODWORD(STACK[0x324]) + 665;
    LOBYTE(STACK[0x192F]) = STACK[0x194F];
    LODWORD(STACK[0x192B]) = STACK[0x194B];
    STACK[0x1923] = STACK[0x1943];
    LOWORD(STACK[0x1921]) = STACK[0x1941];
    char v54 = STACK[0x1940];
  }

  LOBYTE(STACK[0x1920]) = v54;
  unint64_t v55 = STACK[0x538];
  int v56 = STACK[0x3EC];
  int v57 = LODWORD(STACK[0x3EC]) ^ (v53 - 12587950 + 34 * (v53 ^ 0x739));
  int v58 = 2078219279 * ((v52 - 192 - 2 * ((v52 - 192) & 0x1033CA39) + 271829561) ^ 0xCAC95C4D);
  LOBYTE(STACK[0x19C8]) = 15 * ((v52 + 64 - 2 * ((v52 + 64) & 0x39) + 57) ^ 0x4D) + 29;
  *(_DWORD *)(v52 - 152) = (v50 - 289023818) ^ v58;
  *(void *)(v52 - 192) = v49;
  *(void *)(v52 - 184) = v55;
  *(void *)(v52 - 144) = a49;
  *(void *)(v52 - 176) = &STACK[0x1920];
  *(void *)(v52 - 160) = a31;
  *(_DWORD *)(v52 - 132) = v58 + ((2 * v56) & 0xFE7FEB78) + 468172788 + v57;
  *(_DWORD *)(v52 - 12_Block_object_dispose(va, 8) = v58 + v53 - 1005;
  uint64_t v59 = a30(v52 - 192);
  int v60 = *(_DWORD *)(v52 - 168);
  LODWORD(STACK[0x4FC]) = v60;
  return ((uint64_t (*)(uint64_t))(*(void *)(v51 + 8LL * ((124 * (v60 != 528123064)) ^ v53)) - 12LL))(v59);
}

void sub_100098E4C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
}

uint64_t sub_100098E70( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,int a53,int a54)
{
  return ((uint64_t (*)(void))(*(void *)(v56
                                        + 8LL
                                        * ((54
                                          * ((LODWORD(STACK[0x518]) ^ v54) != ((((v55 - 571) | 0x488) - 610182888) ^ (v55 + 589))
                                                                            + a54)) ^ v55))
                            - 8LL))();
}

void sub_100098EC0()
{
  LODWORD(STACK[0x4FC]) = v0 - 123;
  JUMPOUT(0x100099658LL);
}

uint64_t sub_100098ED0()
{
  uint64_t v4 = ((uint64_t (*)(void))STACK[0x258])();
  LODWORD(STACK[0x59C]) = v2;
}

uint64_t sub_100098F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  LODWORD(STACK[0x4FC]) = v5;
  return sub_100098F24(a1, a2, a3, a4, a5);
}

uint64_t sub_100098F24()
{
  int v3 = LODWORD(STACK[0x4FC]) == ((v0 + 1187259223) & 0xB93BDDDF ^ (v2 + v0 - 1027 - 966));
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * (((8 * v3) | (v3 << 6)) ^ (v0 + 783))) - 12LL))();
}

uint64_t sub_100098F74@<X0>(int a1@<W8>)
{
  LODWORD(STACK[0x59C]) = v2;
  STACK[0x388] = STACK[0x318];
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((11 * (*(_DWORD *)STACK[0x260] == 0)) ^ a1))
                            - 4 * (((a1 - 1285) | 0x608) ^ 0x664u)
                            + 680LL))();
}

uint64_t sub_100098FCC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  STACK[0x328] = 0LL;
  int v74 = 1543737703 * ((((2 * (v73 - 192)) | 0xC0B38ABC) - (v73 - 192) + 530987682) ^ 0x9EAD9522);
  *(_DWORD *)(v73 - 184) = v74 ^ 0xCFB4288F;
  *(_DWORD *)(v73 - 192) = v71 - v74 - 1487;
  *(void *)(v73 - 16_Block_object_dispose(va, 8) = a70;
  *(void *)(v73 - 160) = a71;
  *(void *)(v73 - 176) = 0x558B20A8A07603D1LL;
  uint64_t v75 = ((uint64_t (*)(uint64_t))STACK[0x250])(v73 - 192);
  return (*(uint64_t (**)(uint64_t))(v72
                                            + 8LL
                                            * (v71 ^ (16
                                                    * (*(_DWORD *)(v73 - 188) == ((100 * (v71 ^ 0x6DD)) ^ ((v71 ^ 0x205) + 528121500)))))))(v75);
}

uint64_t sub_10009909C()
{
  LODWORD(STACK[0x300]) = v1;
  STACK[0x310] = v0;
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((((LODWORD(STACK[0x334]) - 1007579651) > 0xFFFFF7FE)
                                          * ((v3 - 1774324469) & 0x69C207BF ^ 0x49E)) | v3))
                            - 4LL))();
}

uint64_t sub_1000990F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v9 = ((55 * ((v8 - 833) ^ 0x4AE)) ^ 0xA1999DD0) + v7 - ((2 * v7 - 2015155204) & 0xBB500992);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 8LL * ((38 * (((2 * v9) & 0xC3C7E2E6 ^ 0x83400082) + (v9 ^ 0x3C4BF5BA) + 2143256574 != 1638101361)) ^ (v8 - 821)))
                                                                                                - 8LL))( a1,  a2,  a3,  a4,  3766869857LL,  a6,  1638101361LL);
}

uint64_t sub_100099254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 + 8LL * ((70 * (v6 + v5 + ((3 * (v7 ^ 0x692)) ^ 0x1E1C0A02u) < 8)) ^ v7))
                                                                                       - ((v7 ^ 0x692u)
                                                                                        + 1334)
                                                                                       + 1719LL))( a1,  a2,  a3,  a4,  a5,  2656865398LL);
}

uint64_t sub_1000992AC@<X0>(uint64_t a1@<X8>)
{
}

uint64_t sub_1000992F4()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * (int)(((__PAIR64__(8 * (v1 ^ 0x67Du), v0) - 32) >> 32) + 8 * (v0 < 0x20)))
                            - (((8 * (v1 ^ 0x67D) - 550) | 0x85u)
                             - 139)
                            + 1024LL))();
}

uint64_t sub_100099334@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 - 7 + (v4 + 505154050 + v3 + 1162 - v5)) = *(void *)(v1
                                                                                    - 7
                                                                                    + (v4 + 505154050 + v3 + 1162 - v5));
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL
                                        * ((((((v6 - 77) ^ 0xFFFFFC4F) & v2) - v5 != 8)
                                          * ((211 * ((v6 - 77) ^ 0x3B4)) ^ 0x5CA)) ^ (v6 - 77)))
                            - 8LL))();
}

void sub_1000993AC()
{
}

uint64_t sub_1000993B4()
{
}

uint64_t sub_1000993DC@<X0>(unsigned int a1@<W5>, uint64_t a2@<X8>)
{
  uint64_t v7 = v4 + ((95 * (v5 ^ 0x487)) ^ a1);
  __int128 v8 = *(_OWORD *)(v2 + v7 - 15);
  __int128 v9 = *(_OWORD *)(v2 + v7 - 31);
  uint64_t v10 = a2 + v7;
  *(_OWORD *)(v10 - 15) = v8;
  *(_OWORD *)(v10 - 31) = v9;
  return (*(uint64_t (**)(void))(v6 + 8LL * ((701 * ((v3 & 0xFFFFFFE0) == 32)) ^ (v5 - 922))))();
}

void sub_100099438()
{
}

uint64_t sub_100099444(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v3
}

uint64_t sub_100099478()
{
  BOOL v3 = (((v1 + 425) ^ 0x41C) & v0) == ((v1 + 429) | 0x87) - 1167;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (((2 * v3) | (32 * v3)) ^ v1)) - 12LL))();
}

uint64_t sub_1000994BC@<X0>(int a1@<W5>, int a2@<W6>, uint64_t a3@<X8>)
{
  *(_BYTE *)(a3 + (a1 + v4 + 536)) = *(_BYTE *)(v3 + (a1 + v4 + 536));
  return (*(uint64_t (**)(void))(v7 + 8LL * (((v4 - 1 == a2) * v5) ^ (v6 + 418))))();
}

uint64_t sub_1000994EC()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((100 * (STACK[0x328] != 0)) ^ (v0 - 347))) - 8LL))();
}

uint64_t sub_100099524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LODWORD(STACK[0x59C]) = v5;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v6
                                                                                + 8LL
                                                                                * ((((v3 + 806) ^ 0x787) * (v4 ^ 1)) ^ (v3 - 246)))
                                                                    - 12LL))( a1,  a2,  a3,  LODWORD(STACK[0x30C]));
}

uint64_t sub_100099560@<X0>(int a1@<W8>)
{
  LODWORD(STACK[0x58C]) = STACK[0x2F0];
  LODWORD(STACK[0x52C]) = STACK[0x2F8];
  STACK[0x338] = STACK[0x2D8];
  STACK[0x438] = STACK[0x2E0];
  STACK[0x4D8] = STACK[0x2E8];
  STACK[0x558] = STACK[0x310];
  LODWORD(STACK[0x490]) = 2;
  STACK[0x3F0] = 0LL;
  LODWORD(STACK[0x4BC]) = 0;
  LODWORD(STACK[0x57C]) = 0;
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL * ((((v1 & 2) != 389 * (a1 ^ 0x7B6) - 1167) * ((a1 - 806) ^ 0x48C)) ^ a1))
                            - 4LL))();
}

void sub_1000995E4()
{
  LODWORD(STACK[0x40C]) = 1528691550;
  LODWORD(STACK[0x494]) = 1029510534;
  STACK[0x508] = STACK[0x3F0];
  STACK[0x458] = v2;
  STACK[0x500] = v1;
  int v3 = (char *)&STACK[0x610] + v0 - 0x1F595DDDBFA055EDLL;
  STACK[0x540] = (unint64_t)v3;
  STACK[0x3D8] = (unint64_t)&STACK[0x610] + v0 - 0x1F595DDDBFA0556DLL;
  *(void *)int v3 = 0x6370646600LL;
  v3[8] = 1;
  JUMPOUT(0x1000998FCLL);
}

uint64_t sub_1000995F8()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * (((STACK[0x3D0] == 0) * (v0 - 109)) ^ (v0 + 1855))) - 4LL))();
}

void sub_100099624()
{
}

uint64_t sub_1000996DC()
{
  LODWORD(STACK[0x58C]) = STACK[0x2F0];
  LODWORD(STACK[0x52C]) = STACK[0x2F8];
  STACK[0x338] = STACK[0x2D8];
  STACK[0x438] = STACK[0x2E0];
  STACK[0x4D8] = STACK[0x2E8];
  ++*(_DWORD *)(v1 + 52);
  LODWORD(STACK[0x4CC]) = *(_DWORD *)(v1 + 360);
  STACK[0x558] = ((v0 - 436) ^ 0x880LL) + v2 + ((v0 - 620) | 0x106u) - 2766;
  LODWORD(STACK[0x4FC]) = v4;
  LODWORD(STACK[0x2F8]) = STACK[0x52C];
  LODWORD(STACK[0x2F0]) = STACK[0x58C];
  return (*(uint64_t (**)(void))(v3 + 8LL * (((STACK[0x418] != 0) * (((v0 - 644) | 0x4A) ^ 0x78)) | (v0 - 436))))();
}

uint64_t sub_100099718()
{
  LODWORD(STACK[0x58C]) = STACK[0x2F0];
  LODWORD(STACK[0x52C]) = STACK[0x2F8];
  STACK[0x338] = STACK[0x2D8];
  STACK[0x438] = STACK[0x2E0];
  STACK[0x4D8] = STACK[0x2E8];
  LODWORD(STACK[0x59C]) = v0;
  unint64_t v3 = ((3 * ((v2 - 894) ^ 0xCBu)) ^ 0xFFFFFFFFFFFFF20FLL) + ((v2 - 894) ^ 0x8CELL) + v1;
  STACK[0x558] = v3;
  LODWORD(STACK[0x4FC]) = v0;
  LODWORD(STACK[0x2F8]) = STACK[0x52C];
  LODWORD(STACK[0x2F0]) = STACK[0x58C];
  int v4 = (char *)&STACK[0x610] + v3 - 0x1F595DDDBFA05F6DLL;
  STACK[0x2D8] = (unint64_t)(v4 + 2048);
  STACK[0x2E0] = (unint64_t)(v4 + 2176);
  STACK[0x318] = (unint64_t)v4;
  STACK[0x2E8] = (unint64_t)(v4 + 2304);
  return sub_100098F24();
}

uint64_t sub_100099760( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33)
{
  *(_DWORD *)(STACK[0x260] + 360) = 1520508591;
  uint64_t v40 = ((uint64_t (*)(void, uint64_t, unint64_t *, unint64_t, void, uint64_t, unint64_t *, unint64_t *))*(&off_10025B940 + (v33 ^ 0x4C6)))( LODWORD(STACK[0x300]),  2LL,  &STACK[0x490],  STACK[0x388],  (v38 - 1007577602),  a6,  &STACK[0x3F0],  &STACK[0x4BC]);
  uint64_t v42 = LODWORD(STACK[0x30C]);
  int v43 = ((2 * v40) & 0xF63BFEBC) + (v40 ^ 0xFB1DFF5E);
  LODWORD(STACK[0x40C]) = v43 + 1610611712;
  if (v43 == -81920162)
  {
    LODWORD(STACK[0x494]) = 1029510534;
    STACK[0x508] = STACK[0x3F0];
    STACK[0x458] = v35;
    STACK[0x500] = v34;
    uint64_t v45 = (char *)&STACK[0x610] + v36 - 0x1F595DDDBFA055EDLL;
    STACK[0x540] = (unint64_t)v45;
    STACK[0x3D8] = (unint64_t)&STACK[0x610] + v36 - 0x1F595DDDBFA0556DLL;
    *(void *)uint64_t v45 = 0x6370646600LL;
    v45[8] = 1;
    JUMPOUT(0x1000998FCLL);
  }

  if (v43 == 186515297)
  {
    LODWORD(STACK[0x59C]) = -528097408;
    int v44 = v42;
  }

  else
  {
    int v46 = 268847287 * ((((v39 - 192) | 0xA2D6F03B) - (v39 - 192) + ((v39 - 192) & 0x5D290FC0)) ^ 0x5D7CE113);
    *(_DWORD *)(v39 - 176) = v46 + LODWORD(STACK[0x324]) + 660;
    *(_DWORD *)(v39 - 192) = (v43 - ((2 * (v43 + 1610611712) + 163842372) & 0x3EF50970) + 610043226) ^ v46;
    *(void *)(v39 - 184) = a33;
    uint64_t v40 = sub_1000880AC((_DWORD *)(v39 - 192));
    int v44 = STACK[0x30C];
  }

  return ((uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)(v37
                                                                                          + 8LL
                                                                                          * (((STACK[0x3F0] != 0)
                                                                                            * (((v44 - 1094) | 0x102)
                                                                                             + ((v44 - 1930842523) & 0x73164FBF)
                                                                                             - 237)) ^ (v44 - 836)))
                                                                              - 4LL))( v40,  STACK[0x3F0],  v41,  v42);
}

uint64_t sub_1000999B4@<X0>( uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, int a7@<W8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char *a63)
{
  uint64_t v69 = (a7 - 434);
  uint64_t v70 = (a7 - 66);
  a64 = (unint64_t)&STACK[0x554] % (v70 ^ 0x513uLL) + 16;
  int v71 = (char *)&a8
      + v64
  STACK[0x240] = (v68 - 192) | 0x9DE0EE514AE67703LL;
  STACK[0x2F8] = 241568881
               * ((((v68 - 192) | 0x177EFC889DFBC00ALL) - (v68 - 192) + ((v68 - 192) & 0xE881037762043FF0LL)) ^ 0x182B28014BEAC448LL)
               + 3888197711u;
  STACK[0x2F0] = 241568881 * ((v68 - 192) ^ 0xF55D489D6110442LL) + 2977256415LL;
  STACK[0x2E8] = (v68 - 192) | 0xBD519F4144350A9FLL;
  LODWORD(STACK[0x2C8]) = v66 + 873636704;
  LODWORD(STACK[0x2B0]) = 11 * (v66 ^ 0x4A4);
  LODWORD(STACK[0x2A0]) = 4 * (v66 ^ 0x5B1);
  unint64_t v72 = 241568881
      * ((((v68 - 192) | 0xEF4B30ECC94F797CLL) - (v68 - 192) + ((v68 - 192) & 0x10B4CF1336B08680LL)) ^ 0xE01EE4651F5E7D3ELL);
  STACK[0x208] = v72;
  STACK[0x200] = v72 + 5119;
  STACK[0x300] = STACK[0x4E0];
  STACK[0x310] = (unint64_t)v71;
  a63 = v71 + 16;
  *(int32x4_t *)&STACK[0x220] = vdupq_n_s32(0x207F79D4u);
  *(int32x4_t *)&STACK[0x230] = vdupq_n_s32(0x7FFFFFFEu);
  *(int32x4_t *)&STACK[0x210] = vdupq_n_s32(0x103FBCEAu);
  uint64_t v73 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v67 + 8LL * (int)(v70 ^ 0x22D)) - (((_DWORD)v70 - 368) ^ v70 ^ 0x1B9 ^ 0x745LL));
  STACK[0x2D8] = *(void *)(v65 + 8LL * ((int)v70 - 1106));
  STACK[0x2E0] = *(void *)(v65 + 8LL * (int)(v70 ^ 0x537));
  return v73( 545225172LL,  272612586LL,  a1,  a2,  a3,  a4,  a5,  a6,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56);
}

uint64_t sub_100099C0C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  LODWORD(STACK[0x270]) = v76;
  LODWORD(STACK[0x1908]) = v75;
  LODWORD(STACK[0x190C]) = -1992881099;
  int v78 = *(_DWORD **)(v73 + 8LL * (v72 ^ 0x45A));
  STACK[0x268] = (unint64_t)v78;
  LODWORD(STACK[0x554]) = *v78;
  uint64_t v79 = *(unsigned int **)(v73 + 8LL * (v72 - 1007));
  STACK[0x278] = (unint64_t)v79;
  unint64_t v80 = (0x621F11AEB51988FCLL - ((v77 - 192) | 0x621F11AEB51988FCLL) + STACK[0x240]) ^ 0x955054AFDE4B3E5ALL;
  unint64_t v81 = *v79 ^ (235795823 * v80);
  int v82 = v72 + 496991255 - 235795823 * v80;
  *(_DWORD *)(v77 - 192) = v82;
  *(_DWORD *)(v77 - 184) = v82 - 8;
  *(_DWORD *)(v77 - 180) = 235795823 * v80;
  *(_DWORD *)(v77 - 176) = (v72 - 1689052669) ^ (235795823 * v80);
  *(_DWORD *)(v77 - 172) = ((v72 + 496991255) ^ 0x6B) - 235795823 * v80;
  *(void *)(v77 - 16_Block_object_dispose(va, 8) = -235795823LL * v80;
  *(void *)(v77 - 160) = v81;
  uint64_t v83 = a72(v77 - 192);
  int v84 = (uint64_t (*)(uint64_t))(*(void *)(v74 + 8LL * *(int *)(v77 - 188)) - 12LL);
  STACK[0x318] = *(void *)(v73 + 8LL * (v72 ^ 0x40C));
  return v84(v83);
}

uint64_t sub_100099D10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v73 = v69;
  int v74 = (v70 + 403) | 4;
  STACK[0x300] = a69(a65);
  unsigned int v75 = (*(uint64_t (**)(void))(v73 + 8LL * (v70 - 993)))();
  *int v72 = v75;
  v72[1] = (v75 ^ (v75 >> 30)) * (v74 + 1812431679) + 1;
  return ((uint64_t (*)(void))(*(void *)(v71 + 8LL * v74) - 12LL))();
}

uint64_t sub_100099D80()
{
  *(_DWORD *)(v5 + 4 * v1) = v1 + (v2 ^ (v2 >> 30)) * v0;
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((31 * (v1 > 0x26E)) ^ v3)) - 12LL))();
}

uint64_t sub_100099DB0@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  int v63 = (a1 - 1079668320) & 0x405A6CBF;
  LODWORD(STACK[0x554]) = v57;
  uint64_t v64 = ((uint64_t (*)(uint64_t, void))*(&off_10025B940 + (a1 ^ 0x662)))(a57, 0LL);
  uint64_t v65 = (_DWORD *)STACK[0x310];
  uint64_t v66 = *(void *)(STACK[0x310] + 16);
  v65[1] = *(_DWORD *)(STACK[0x310] + 24);
  v65[2] = v66;
  v65[3] = ((uint64_t (*)(uint64_t))v58)(v64);
  _DWORD *v65 = v58();
  v61[1] = *(_DWORD *)STACK[0x310] + ((1664525 * (*v61 ^ (*v61 >> 30))) ^ v61[1]);
  int v67 = (v63 + 273851473) ^ v59;
  *(void *)(v62 - 176) = STACK[0x2F8];
  *(void *)(v62 - 160) = v59 + 3888197713LL;
  *(_DWORD *)(v62 - 192) = v67;
  *(_DWORD *)(v62 - 18_Block_object_dispose(va, 8) = (v63 + 273851295) ^ v59;
  *(_DWORD *)(v62 - 152) = v59;
  *(_DWORD *)(v62 - 14_Block_object_dispose(va, 8) = v67 ^ 0x85;
  *(_DWORD *)(v62 - 184) = v59 + v63 + 2104631223;
  uint64_t v68 = ((uint64_t (*)(uint64_t))STACK[0x318])(v62 - 192);
  return ((uint64_t (*)(uint64_t))(*(void *)(v60 + 8LL * *(int *)(v62 - 168)) - 8LL))(v68);
}

uint64_t sub_100099EF8()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((((LODWORD(STACK[0x324]) ^ 0x556) - 464) * (v0 >= 0xE7C1304F)) | (LODWORD(STACK[0x324]) - 703)))
                            - 4LL))();
}

uint64_t sub_100099F34()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * (((v0 <= (LODWORD(STACK[0x2B0]) ^ 0xE7C13367)) | (8
                                                                                          * (v0 <= (LODWORD(STACK[0x2B0]) ^ 0xE7C13367)))) ^ (LODWORD(STACK[0x324]) - 703)))
                            - 4LL))();
}

uint64_t sub_100099F74()
{
  int v6 = v0 + 694;
  _DWORD *v4 = v4[623];
  int v7 = (v0 + 1498927911) ^ v1;
  *(_DWORD *)(v5 - 192) = v7;
  *(_DWORD *)(v5 - 18_Block_object_dispose(va, 8) = v7 ^ 0x35;
  *(_DWORD *)(v5 - 184) = v1 + v6 + 2104631223;
  *(_DWORD *)(v5 - 152) = v1;
  *(_DWORD *)(v5 - 14_Block_object_dispose(va, 8) = v7 ^ 0x52;
  *(void *)(v5 - 160) = (v3 + 1292116975) + v1;
  *(void *)(v5 - 176) = STACK[0x2F0];
  uint64_t v8 = ((uint64_t (*)(uint64_t))STACK[0x318])(v5 - 192);
  return ((uint64_t (*)(uint64_t))(*(void *)(v2 + 8LL * *(int *)(v5 - 168)) - 4LL))(v8);
}

uint64_t sub_100099FFC()
{
  return (*(uint64_t (**)(void))(v2 + 8LL * (((v0 >= v1 - 1317712048) * ((v1 ^ 0x77) - 1236)) ^ (v1 - 371))))();
}

uint64_t sub_10009A034()
{
  *(_DWORD *)STACK[0x310] ^= STACK[0x300];
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL * (((2 * ((v0 - 779) ^ 0x562) - 348) * (v1 != 1296017611)) ^ (v0 - 779)))
                            - 8LL))();
}

uint64_t sub_10009A1D0()
{
  *int v3 = v3[623];
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * (((((((v0 - 1974462315) & 0x75AFE5EF) - 478) | 0x480) - 1146)
                                          * (v1 == 232474006)) ^ (v0 - 1974462315) & 0x75AFE5EF))
                            - ((((v0 - 1974462315) & 0x75AFE5EF) + 3510534) & 0xFFCA6D5F)
                            + 75LL))();
}

uint64_t sub_10009A24C()
{
  *(_DWORD *)(v3 + 4LL * (v0 - 1075866315)) = 1075866315
                                                          - v0
                                                          + ((1566083941
                                                            * (*(_DWORD *)(v3 + 4LL * (v0 - 1075866316)) ^ (*(_DWORD *)(v3 + 4LL * (v0 - 1075866316)) >> 30))) ^ *(_DWORD *)(v3 + 4LL * (v0 - 1075866315)));
  unint64_t v5 = 69008221 * ((0x42AE60BEBBCAF560LL - ((v4 - 192) | 0x42AE60BEBBCAF560LL) + STACK[0x2E8]) ^ 0xEFCDD9A297975895LL);
  int v6 = v1 - 863035218 + v5;
  *(_DWORD *)(v4 - 18_Block_object_dispose(va, 8) = v5 ^ 1;
  *(_DWORD *)(v4 - 184) = v6 + 18;
  *(void *)(v4 - 176) = 3596417486u - v5;
  *(_DWORD *)(v4 - 152) = v5 + v1 + 2021362610;
  *(void *)(v4 - 160) = (v0 - 1774416124) - v5;
  *(_DWORD *)(v4 - 16_Block_object_dispose(va, 8) = ((v1 - 863035218) ^ 0x1B) - v5;
  *(_DWORD *)(v4 - 164) = v6;
  uint64_t v7 = ((uint64_t (*)(uint64_t))((char *)*(&off_10025B940 + (v1 ^ 0x451)) - 8))(v4 - 192);
  return ((uint64_t (*)(uint64_t))(*(void *)(v2 + 8LL * *(int *)(v4 - 192)) - 4LL))(v7);
}

uint64_t sub_10009A370()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * (((((LODWORD(STACK[0x324]) - 931) | 0x101) + 1082) * (v0 < 0xD65CF9CE)) ^ (LODWORD(STACK[0x324]) - 295)))
                            - 8LL))();
}

uint64_t sub_10009A3AC()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
}

uint64_t sub_10009A3FC@<X0>(int a1@<W2>, char a2@<W8>)
{
  uint64_t v8 = (_BYTE *)(v5 + (v7 - 1739270715));
  unsigned int v9 = 904587747
     * ((*(_DWORD *)(*(void *)STACK[0x2E0] + (*(unsigned int *)STACK[0x2D8] & ((2 * v3) ^ 0x53D7FD74LL))) ^ v8) & 0x7FFFFFFF);
  unint64_t v10 = 904587747 * (v9 ^ HIWORD(v9));
  unint64_t v11 = v10 >> ((v3 - 72) ^ 0x66u);
  LOBYTE(v11) = *(_BYTE *)(*(void *)(v4 + 8LL * (int)(v3 & 0xB26BE0A2)) + v11 - 8) ^ ((v2 ^ 0x971FF2CA) >> a2) ^ *(_BYTE *)(*(void *)(v4 + 8LL * (v3 ^ 0x3A7)) + v11 - 12) ^ *(_BYTE *)(*(void *)(v4 + 8LL * (v3 - 961)) + v11 - 7) ^ v10 ^ (-85 * v11);
  *uint64_t v8 = v11;
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * ((1625 * (v7 - (v11 != 0) == a1)) ^ v3)) - 12LL))();
}

void sub_10009A938()
{
}

uint64_t sub_10009A940( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t (*a47)(void))
{
  STACK[0x3A0] = v47;
  STACK[0x4E0] = STACK[0x300];
  return a47();
}

uint64_t sub_10009A970( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v14 = STACK[0x508];
  STACK[0x470] = *(void *)(v12 + 8LL * (v11 - 1108));
  unint64_t v15 = ((unint64_t)&STACK[0x3B0] ^ 0xDCD6DD5FFCADF79BLL)
      + v9
      + (((void)&STACK[0x3B0] << ((v11 + 110) ^ 0xFCu)) & 0xB9ADBABFF95BEF30LL);
  STACK[0x210] = v15;
  STACK[0x208] = v15 + 526;
  STACK[0x200] = (unint64_t)&a9 - 0x1F595DDDBFA058F6LL;
  LODWORD(STACK[0x278]) = v11 - 639268432;
  STACK[0x220] = (v11 - 402);
  STACK[0x558] = v10 + 112;
  STACK[0x368] = v14;
  if (v14) {
    BOOL v16 = v13 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  char v17 = v16;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v12
                                                                                + 8LL
                                                                                * ((504
                                                                                  * (((3 * (((v11 + 113) | 0xC2) ^ 0x47)) ^ v17) & 1)) ^ (v11 - 402)))
                                                                    - 8LL))( a1,  13LL,  1601LL,  (__n128)0LL);
}

uint64_t sub_10009AA68(__n128 a1, uint64_t a2, uint64_t a3)
{
  int v7 = (char *)&STACK[0x610] + v4 - 0x1F595DDDBFA05F6DLL;
  *(_DWORD *)int v7 = 352326794;
  *((void *)v7 + 1) = 0LL;
  *((_DWORD *)v7 + 4) = 220707200;
  *((_DWORD *)v7 + 6) = 1007577602;
  *((void *)v7 + 4) = 0LL;
  *((_DWORD *)v7 + 10) = 1007577602;
  STACK[0x520] = (unint64_t)(v7 + 40);
  *((void *)v7 + 6) = 0LL;
  STACK[0x5A8] = (unint64_t)(v7 + 48);
  *((_DWORD *)v7 + 14) = 1007577602;
  STACK[0x4C0] = (unint64_t)(v7 + 56);
  *((void *)v7 + _Block_object_dispose(va, 8) = 0LL;
  STACK[0x410] = (unint64_t)(v7 + 64);
  *((_DWORD *)v7 + 1_Block_object_dispose(va, 8) = 1007577602;
  STACK[0x580] = (unint64_t)(v7 + 72);
  *((void *)v7 + 10) = 0LL;
  STACK[0x530] = (unint64_t)(v7 + 80);
  v7[88] = 7;
  *(_DWORD *)uint64_t v6 = 352326794;
  *(__n128 *)(v6 + 4) = a1;
  *(_DWORD *)(v6 + 20) = 0;
  *(_DWORD *)(v6 + 24) = 1007577602;
  *(_DWORD *)(v6 + 2_Block_object_dispose(va, 8) = 1584994389;
  STACK[0x270] = v6 + 28;
  *(__n128 *)(v6 + 436) = a1;
  *(__n128 *)(v6 + 452) = a1;
  *(void *)(v6 + 46_Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(v6 + 232) = 1584994389;
  STACK[0x268] = v6 + 232;
  *(void *)(v6 + 112_Block_object_dispose(va, 8) = 0xAEAEAEAEAEAEAEAELL;
  *(void *)(v6 + 1136) = 0xAEAEAEAEAEAEAEAELL;
  *(void *)(v6 + 1144) = 2930683566LL;
  *(__n128 *)(v6 + 1152) = a1;
  *(__n128 *)(v6 + 116_Block_object_dispose(va, 8) = a1;
  *(__n128 *)(v6 + 1184) = a1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 8LL * (int)((1120 * ((v3 ^ 0x1C2LL) == 32)) ^ v3)))( 597LL,  a3,  27LL);
}

uint64_t sub_10009ABB4@<X0>(uint64_t (*a1)(void)@<X8>)
{
  STACK[0x2B0] = v2;
  STACK[0x558] = v2 - 112;
  STACK[0x318] = *(void *)(v3 + 8LL * (v1 ^ 0x4B9));
  return a1();
}

uint64_t sub_10009ABDC(unsigned int a1, int a2, unint64_t a3, __n128 a4)
{
  *(_DWORD *)(v9 + 1424) = 1275914757;
  *(_DWORD *)(v9 + 142_Block_object_dispose(va, 8) = 455103696;
  *(void *)(v9 + 1432) = v5;
  *(void *)(v9 + 1440) = v5;
  *(_DWORD *)(v9 + 144_Block_object_dispose(va, 8) = v6;
  *(__n128 *)(v9 + 1452) = a4;
  return (*(uint64_t (**)(void))(v8 + 8LL * ((((((v4 ^ a1) * a2) ^ a3) == 16) * v7) ^ v4)))();
}

void sub_10009AC30()
{
}

uint64_t sub_10009AC38( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a65 = v68;
  uint64_t v73 = (v65 - 1117240924) & 0x4297BF9A;
  *(void *)(v72 + 1516) = v66;
  *(void *)(v72 + 1524) = v66;
  *(_DWORD *)(v72 + 1532) = v67;
  *(void *)(v69 + 96) = v72;
  a60 = v72;
  *(_DWORD *)(v72 + 476) = 1594900770;
  STACK[0x2F8] = STACK[0x368];
  STACK[0x2F0] = *(void *)(v71 + 8LL * v65) + (v73 ^ 0xFFFFFFFFFFFFFE62LL);
  unint64_t v74 = STACK[0x558];
  unsigned int v75 = (char *)&a9 + STACK[0x558] - 0x1F595DDDBFA0595DLL;
  STACK[0x2B0] = STACK[0x558];
  STACK[0x2A0] = v74 + 432;
  STACK[0x310] = (unint64_t)v75;
  STACK[0x240] = (unint64_t)(v75 + 392);
  STACK[0x230] = v69;
  STACK[0x2C8] = v69;
  STACK[0x558] = STACK[0x2A0];
  LODWORD(STACK[0x498]) = -1792580357;
  LODWORD(STACK[0x2E8]) = -791536867;
  LODWORD(STACK[0x300]) = 262255941;
  LODWORD(STACK[0x578]) = 1007577602;
  STACK[0x4D0] = 0LL;
  LODWORD(STACK[0x318]) = 107215763;
  LODWORD(STACK[0x2D8]) = (v73 ^ 0x106) + 84622377;
  LODWORD(STACK[0x2E0]) = 983173195;
  LODWORD(STACK[0x374]) = 87966694;
  LODWORD(STACK[0x2D0]) = v70;
  *(_DWORD *)STACK[0x310] = a7;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v71 + 8LL * (int)((389 * (v73 ^ 0x199) + 624) ^ v73 ^ 0x106)) - (((v73 ^ 0x106) + 1214166363) & 0xB7A14FFD ^ 0x5FDLL)))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48,  a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60);
}

uint64_t sub_10009ADF0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return ((uint64_t (*)(void))(*(void *)(v10 + 8LL * (((89 * (v8 ^ 0x5FB) - 582) * (v9 == a8)) ^ v8))
                            - ((v8 - 747) | 0x4A4u)
                            + 1962LL))();
}

uint64_t sub_10009AE38()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((19
                                          * ((((v0 ^ 0x1C9) - 1643) & (v1 - 1007577599)) - LODWORD(STACK[0x2D0]) != -1007577602)) ^ v0))
                            - 8LL))();
}

uint64_t sub_10009AE80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  BOOL v12 = v8 == a7 || LODWORD(STACK[0x374]) - v9 != -919610908;
  return (*(uint64_t (**)(void))(v10 + 8LL * ((21 * (((49 * (v7 ^ 0x62)) ^ v12) & 1)) ^ v7)))();
}

uint64_t sub_10009AECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v9 + 8LL * ((21 * (((v8 == a7) ^ (v7 - 114)) & 1)) ^ v7)))();
}

uint64_t sub_10009AEF8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  uint64_t v13 = (_DWORD *)STACK[0x310];
  *uint64_t v13 = v9 - 1;
  unint64_t v14 = &v13[6 * (v9 - 2124120103)];
  int v15 = v14[2];
  STACK[0x2F8] = *((void *)v14 + 2);
  LODWORD(STACK[0x374]) = v14[6];
  return ((uint64_t (*)(void))(*(void *)(v11
                                        + 8LL
                                        * (((*(_DWORD *)(v12 + (v15 + a6) * (uint64_t)v10 + 36) == a8) * a2) ^ (v8 - 114)))
                            - 12 * ((v8 - 114) ^ 0x5F8u)
                            + 152LL))();
}

uint64_t sub_10009AFB4()
{
  unsigned int v3 = LODWORD(STACK[0x374]) + 345636577;
  int v4 = (v1 - 573974331 < (((v0 - 30) | 0x138) ^ 0x19D8473Fu)) ^ (v3 < 0x19D842C7);
  BOOL v5 = v3 < v1 - 573974331;
  if (v4) {
    BOOL v5 = v1 - 573974331 < (((v0 - 30) | 0x138) ^ 0x19D8473Fu);
  }
  return (*(uint64_t (**)(void))(v2 + 8LL * ((v5 * (((v0 - 1109) | 0x334) - 901)) ^ v0)))();
}

uint64_t sub_10009B030()
{
  int v4 = 460628867 * ((2120966109 - ((v3 - 192) | 0x7E6B5FDD) + ((v3 - 192) | 0x8194A022)) ^ 0xCD02225F);
  unint64_t v5 = STACK[0x280];
  *(void *)(v3 - 192) = STACK[0x290];
  *(void *)(v3 - 152) = STACK[0x288];
  *(void *)(v3 - 144) = v5;
  *(void *)(v3 - 160) = STACK[0x298];
  *(_DWORD *)(v3 - 164) = v0 - v4 - 527;
  *(_DWORD *)(v3 - 184) = v4 + v1 - 569299352;
  *(void *)(v3 - 176) = STACK[0x2F8];
  uint64_t v6 = ((uint64_t (*)(uint64_t))((char *)*(&off_10025B940 + (v0 ^ 0x3E1)) - 4))(v3 - 192);
  return ((uint64_t (*)(uint64_t, uint64_t, __n128))(*(void *)(v2
                                                                       + 8LL
                                                                       * ((1251 * (*(_DWORD *)(v3 - 168) == 528123064)) ^ v0))
                                                           - (((v0 - 825) | 0x40B) ^ ((v0 - 444) | 0x1Au) ^ 0x698LL)))( v6,  13LL,  (__n128)0);
}

uint64_t sub_10009B154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  BOOL v11 = *(_DWORD *)(v10 + (v7 + a6) * (uint64_t)v6) == ((v8 + 620) | 8) + 364214540;
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * (((8 * v11) | (16 * v11)) ^ (v8 - 20))) - 12LL))();
}

uint64_t sub_10009B1B0@<X0>(int a1@<W3>, int a2@<W8>)
{
  int v6 = a1;
  if ((a2 + 1792580379) <= 0x12 && (int v6 = a1, ((1 << (a2 + 27)) & 0x4040D) != 0)) {
    return (*(uint64_t (**)(void))(v4
  }
                                + 8LL
                                * ((232 * ((((a1 - 1022) ^ 0x90) & *(_DWORD *)(v5 + v3 * (uint64_t)v2 + 40)) == 0)) ^ (a1 - 546))))();
  else {
    return ((uint64_t (*)(void))(*(void *)(v4
  }
                                          + 8LL
                                          * ((1567
}

uint64_t sub_10009B4F4()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (v1 ^ (259 * ((v0 & 2) == 0)))) - (((v1 + 57) | 0x100u) ^ 0x1C2LL)))();
}

uint64_t sub_10009B524@<X0>(int a1@<W8>)
{
  unint64_t v7 = STACK[0x310];
  *(_DWORD *)(v7 + 392) = a1;
  *(_DWORD *)(v7 + 396) = STACK[0x578];
  *(void *)(v7 + 400) = STACK[0x4D0];
  *(_DWORD *)(v7 + 40_Block_object_dispose(va, 8) = 352326794 - v4 + LODWORD(STACK[0x374]);
  *(void *)(v7 + 416) = STACK[0x2F8] + (v4 - 87966694);
  int v8 = (*(uint64_t (**)(unint64_t, unint64_t))(v6 + v3 * (uint64_t)v1 + 8))( STACK[0x2C8],  STACK[0x240]);
  return ((uint64_t (*)(__n128))(*(void *)(v5
                                                     + 8LL
                                                     * ((13
                                                       * (v8
                                                        + ((v2 + 1022) ^ 0x1F7A8037)
                                                        - ((v8 << (((v2 + 110) & 0xCA) + 55)) & 0x3EF50970) != 528123064)) ^ v2))
                                         - 8LL))((__n128)0);
}

uint64_t sub_10009B610()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((122
                                          * (((LODWORD(STACK[0x578]) - 1007577602) ^ 0x3FEFFFD7EB9BCEFFLL)
                                           + (((v0 ^ 0x7AD) + 684604547) & 0xD731BFFD ^ 0xC01000286ADF9E76LL)
}

uint64_t sub_10009B6B8@<X0>(int a1@<W8>)
{
  int v5 = *(unsigned __int8 *)STACK[0x4D0]
     - (*(_BYTE *)(*(void *)(v4 + v2 * (uint64_t)v1 + 24) - 0x119B3373634ED76DLL) - 38);
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * (((((v5 << (((a1 - 67) & 0xFD ^ 0x32) + 114)) & 0xEDCDFDFE)
                                           + (v5 ^ 0x76E6FEFF) == 1994850047)
                                          * (((a1 - 1251805507) & 0x4A9D07FD) + 1071)) ^ (a1 - 1251805507) & 0x4A9D07FD))
                            - 12LL))();
}

uint64_t sub_10009B778()
{
  int v4 = v1 + 325;
  BOOL v5 = v0 < 0x567B6CCA;
  unsigned __int8 v6 = 63 * ((v1 + 69) ^ 1);
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((167 * ((v5 ^ v6) & 1)) ^ v4)) - 8LL))();
}

void sub_10009B7F4()
{
}

uint64_t sub_10009B7FC@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v5 + 8LL * (v4 ^ (1195 * (a2 + v2 - v3 == -754711357))))
                                                   - ((v4 + 210) ^ 0x545u)
                                                   + 446LL))( a1,  13LL);
}

uint64_t sub_10009B850( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return ((uint64_t (*)(void))(*(void *)(v10
                                        + 8LL
}

uint64_t sub_10009B880@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((1360 * (*(_DWORD *)STACK[0x310] - 2124120102 < ((a1 + 1011) ^ 0x49Fu))) ^ a1))
                            - 8LL))();
}

uint64_t sub_10009B8C8@<X0>(int a1@<W8>)
{
  int v8 = STACK[0x374];
  int v9 = (_DWORD *)STACK[0x310];
  unint64_t v10 = STACK[0x310] + 24LL * v4;
  *(_DWORD *)(v10 + _Block_object_dispose(va, 8) = v5;
  *(_DWORD *)(v10 + 12) = v6;
  *(void *)(v10 + 16) = STACK[0x2F8];
  *(_DWORD *)(v10 + 24) = v8;
  _DWORD *v9 = (v1 ^ 0x48E) + v2;
  BOOL v12 = v3 - 1753812552 > 353 * (a1 ^ 0x9E) - 2062861848 && v3 - 1753812552 < SLODWORD(STACK[0x2D8]);
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * ((673 * v12) ^ a1)) - 8LL))();
}

uint64_t sub_10009B948()
{
  STACK[0x2F8] = STACK[0x4D0];
  LODWORD(STACK[0x374]) = 87966694;
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * (((v2 == 528123064) * ((((v0 ^ 0x25E) - 147) | 0x486) ^ 0x589)) ^ v0 ^ 0x25E))
                            - 8LL))();
}

uint64_t sub_10009B97C@<X0>(int a1@<W8>)
{
  int v5 = a1 + 550;
  int v6 = *(_DWORD *)(v4 + v2 * (uint64_t)v1 + 36) - 855261890;
  BOOL v8 = v6 > -1164310480 && v6 < SLODWORD(STACK[0x2E0]);
}

void sub_10009BA30()
{
}

uint64_t sub_10009BA40()
{
  STACK[0x558] = STACK[0x2B0];
  return ((uint64_t (*)(void))STACK[0x2F0])();
}

uint64_t sub_10009BA54()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (((v1 + 1893) * (v0 == v3)) ^ (v1 - 197))) - 8LL))();
}

void sub_10009BA78()
{
  uint64_t v2 = (unint64_t *)STACK[0x5A8];
  STACK[0x2C8] = STACK[0x270];
  STACK[0x2F8] = *v2;
  STACK[0x2F0] = *(void *)(v1 + 8LL * (v0 - 1078));
  JUMPOUT(0x10009ACE4LL);
}

uint64_t sub_10009BB28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(void *)(a60 + 1560) = *(void *)STACK[0x530];
  *(_DWORD *)(a60 + 1552) = *(_DWORD *)STACK[0x580];
  unint64_t v70 = STACK[0x230];
  *(void *)(*(void *)(STACK[0x230] + 96) + 488LL) = *(void *)(STACK[0x230] + 8);
  *(_DWORD *)(*(void *)(v70 + 96) + 480LL) = *(_DWORD *)v70;
  *(_BYTE *)(STACK[0x200] + a6_Block_object_dispose(va, 8) = ((LOBYTE(STACK[0x210]) + LOBYTE(STACK[0x220])) ^ 0xBA) * STACK[0x208];
  return ((uint64_t (*)(void))(*(void *)(v69 + 8LL * (v68 - 627)) - 4LL))();
}

uint64_t sub_10009BBD4@<X0>(uint64_t a1@<X8>)
{
  STACK[0x3B0] = 104 - a1;
  uint64_t v4 = (uint64_t (*)(void))STACK[0x470];
  STACK[0x558] = v3 - 112;
  STACK[0x318] = *(void *)(v2 + 8LL * (((v1 - 408) | 0x40B) ^ 0x4B9));
  return v4();
}

uint64_t sub_10009BC10()
{
  return ((uint64_t (*)(uint64_t))(*(void *)(v2
                                                      + 8LL * (((467 * (v1 ^ 0x48B) - 600) * (v0 == v3)) ^ (v1 - 838)))
                                          - 8LL))(186LL);
}

uint64_t sub_10009BC50@<X0>(int a1@<W8>)
{
  unint64_t v2 = STACK[0x3D8];
  STACK[0x4A0] = STACK[0x3D8];
  STACK[0x4E8] = 0LL;
  LODWORD(STACK[0x564]) = 1007577602;
  STACK[0x570] = 0LL;
  LODWORD(STACK[0x464]) = 1007577602;
  STACK[0x4F0] = 0LL;
}

uint64_t sub_10009BCC4(uint64_t a1)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)(v3 + 8LL * ((((*(_BYTE *)(v1 + 32) - *((_BYTE *)*(&off_10025B940 + v2 - 1050) - 8) + 27) != (v2 ^ 0xD1)) * ((335 * (v2 ^ 0x48C)) ^ 0x389)) ^ (v2 - 348)))
                                                                                       - 8LL))( a1,  1164LL,  335LL,  0xCE61BD76058E05CBLL,  209LL);
}

uint64_t sub_10009BD6C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned int a8)
{
}

void sub_10009BDA4()
{
}

uint64_t sub_10009BDB0()
{
}

uint64_t sub_10009BDFC(int a1, uint64_t a2, int a3)
{
  int v8 = (*(unsigned __int8 *)(STACK[0x4F0] + 1516) ^ v6) - (*(_BYTE *)STACK[0x568] - 88);
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL
                                        * ((((a1 & (2 * v8)) + (v8 ^ v4) == ((389 * (v3 ^ v5 ^ 0x3C)) ^ (v4 + 1137)))
                                          * a3) ^ v3 ^ v5))
                            - 12LL))();
}

uint64_t sub_10009BE64@<X0>(uint64_t a1@<X8>)
{
}

uint64_t sub_10009BE98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  unsigned int v5 = ((v3 ^ 0x11C) + 1172582684) & 0xBA1BCDDF;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v4
                                                               + 8LL
                                                               * (int)((1017
                                                                      * ((((v5 - 111) | 0x19)
                                                                                         + *(_BYTE *)(a3 + a2)
                                                                                         - *(_BYTE *)*(&off_10025B940 + (int)(v5 - 1047))
                                                                                         - 30) == (v5 - 49))) ^ (v5 - 659)))
                                                   - 4LL))( a1,  25LL);
}

uint64_t sub_10009BF80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v7 + 8LL * ((((v5 + 86) ^ a5) * (v6 != 68)) ^ v5)))();
}

void sub_10009BFA0()
{
}

uint64_t sub_10009BFAC@<X0>(int a1@<W0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((((*(_BYTE *)(a3 + a2)
                                                             + ((v3 + 49) ^ 0xDB)
                                                             - *(_BYTE *)*(&off_10025B940 + v3 - 1130)) != 94)
                                          * a1) ^ (v3 - 1123)))
                            - (v3 ^ 0x735u)
                            + 946LL))();
}

uint64_t sub_10009C070(uint64_t a1, int a2, int a3, uint64_t a4, int a5)
{
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * ((((v6 + a2) & a3 ^ a5) * (v5 == 68)) ^ v6)) - 12LL))();
}

void sub_10009C098()
{
}

uint64_t sub_10009C0A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v71 = v69 - 631;
  uint64_t v72 = (v69 - 824);
  uint64_t v73 = a69(1576LL);
  STACK[0x4F0] = v73;
  return ((uint64_t (*)(void))(*(void *)(v70 + 8LL * (((v73 != 0) * (v71 + 365)) | v71)) - (v72 ^ 0x80)))();
}

uint64_t sub_10009C14C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v71 = a69(1576LL);
  STACK[0x390] = v71;
  return ((uint64_t (*)(void))(*(void *)(v70
}

uint64_t sub_10009C1B4()
{
  return (*(uint64_t (**)(void))(v2 + 8LL * ((v1 == ((v0 - 274) ^ 0x12B68CC4 ^ (9 * (v0 ^ 0x3AA)))) | v0)))();
}

uint64_t sub_10009C204( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  int v61 = 1543737703 * ((~((v60 - 192) | 0x395EF543) + ((v60 - 192) & 0x395EF543)) ^ 0xB8555AC0);
  *(_DWORD *)(v60 - 192) = v58 - v61 - 368;
  *(_DWORD *)(v60 - 184) = v61 ^ 0xCFB4288A;
  *(void *)(v60 - 176) = 0x558B20A8A07603D1LL;
  *(void *)(v60 - 16_Block_object_dispose(va, 8) = a57;
  *(void *)(v60 - 160) = a58;
  uint64_t v62 = ((uint64_t (*)(uint64_t))STACK[0x250])(v60 - 192);
  return ((uint64_t (*)(uint64_t))(*(void *)(v59
                                                      + 8LL
                                                      * (int)(((*(_DWORD *)(v60 - 188) == 528123064)
                                                             * (((v58 - 594) | 0x27) + ((v58 - 555) ^ 0xFFFFFFE4))) ^ v58))
                                          - 4LL))(v62);
}

uint64_t sub_10009C2F0@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((37 * (v2 != v1)) ^ a1)) - 3 * (a1 ^ 0x748u) + 606LL))();
}

uint64_t sub_10009C33C()
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (((((v2 - 581) | 0x1A) + 1960) * (v1 == v0)) ^ v2)) - 4LL))();
}

uint64_t sub_10009C374( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  int v65 = (((v60 | 0x173579D6) - (v60 & 0x173579D6)) ^ 0x69C129AA) * v58;
  *(void *)(v64 - 16_Block_object_dispose(va, 8) = a57;
  *(void *)(v64 - 160) = a58;
  *(void *)(v64 - 176) = v59;
  *(_DWORD *)(v64 - 192) = v61 - v65 - 368;
  *(_DWORD *)(v64 - 184) = v65 ^ 0xCFB4288A;
  uint64_t v66 = ((uint64_t (*)(uint64_t))STACK[0x250])(v64 - 192);
  return ((uint64_t (*)(uint64_t))(*(void *)(v62
                                                      + 8LL
                                                      * (((*(_DWORD *)(v64 - 188) == v63 + (v61 ^ 0x255) - 63)
                                                        * (((v61 - 567) | 0xC) ^ 0x25)) ^ v61))
                                          - 4LL))(v66);
}

uint64_t sub_10009C438@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51)
{
  int v56 = (a1 - 977799195) & 0x3A4802FE;
  int v57 = ((v53 + 742264651 - 2 * (v53 & 0x2C3E0F4B)) ^ 0x52CA5F37) * v51;
  *(void *)(v55 - 176) = v52;
  *(void *)(v55 - 16_Block_object_dispose(va, 8) = a50;
  *(_DWORD *)(v55 - 192) = v56 - v57 - 368;
  *(_DWORD *)(v55 - 184) = v57 ^ 0xCFB42888;
  *(void *)(v55 - 160) = a51;
  uint64_t v58 = ((uint64_t (*)(uint64_t))STACK[0x250])(v55 - 192);
  return ((uint64_t (*)(uint64_t))(*(void *)(v54
                                                      + 8LL
}

uint64_t sub_10009C538@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49)
{
  unsigned int v58 = (((v52 | 0xD09C481E) - (v52 & 0xD09C481E)) ^ 0xAE681862) * v50;
  *(void *)(v57 - 176) = v49;
  *(void *)(v57 - 16_Block_object_dispose(va, 8) = a48;
  *(_DWORD *)(v57 - 184) = a1 ^ v58;
  *(_DWORD *)(v57 - 192) = v54 - v58 + 187;
  *(void *)(v57 - 160) = a49;
  uint64_t v59 = v51(v57 - 192);
  int v60 = *(_DWORD *)(v57 - 188);
  STACK[0x568] = v53;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v55 + 8LL * ((1942 * (v60 == v56)) ^ v54)) - ((v54 - 253961024) & 0xF23278F) + 1155LL))( v59,  13LL,  1601LL,  LODWORD(STACK[0x30C]),  3766869857LL,  2456532237LL,  2124120102LL,  1838435058LL,  (__n128)0);
}

void sub_10009C618()
{
}

uint64_t sub_10009C664()
{
  STACK[0x568] = v0;
  return (*(uint64_t (**)(unint64_t))(v2
                                                     + 8LL * ((536 * (STACK[0x570] != 0)) ^ (((v1 + 963) | 0x8D) - 843))))(STACK[0x570]);
}

uint64_t sub_10009D108()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((504 * (STACK[0x4E8] != 0)) ^ (v0 + 421))) - 4LL))();
}

uint64_t sub_10009D138()
{
  return (*(uint64_t (**)(void))(v1 + 8LL * ((4070 * (STACK[0x4F0] != 0)) ^ (v0 + 859))))();
}

uint64_t sub_10009D164()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL * (((32 * (STACK[0x390] != 0)) | ((STACK[0x390] != 0) << 6)) ^ (v0 - 361)))
                            - 8LL))();
}

uint64_t sub_10009D194()
{
  uint64_t v3 = ((uint64_t (*)(void))STACK[0x258])();
}

uint64_t sub_10009D1DC()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((504 * (STACK[0x4E8] != 0)) ^ (v0 + 421))) - 4LL))();
}

uint64_t sub_10009D204()
{
  return (*(uint64_t (**)(void))(v1 + 8LL * ((4070 * (STACK[0x4F0] != 0)) ^ (v0 + 859))))();
}

uint64_t sub_10009D228()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL * (((32 * (STACK[0x390] != 0)) | ((STACK[0x390] != 0) << 6)) ^ (v0 - 361)))
                            - 8LL))();
}

uint64_t sub_10009D250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6
                                                                                          + 8LL
                                                                                          * (((v5 ^ 0x363)
                                                                                            * (v4 == 528123064)) ^ (v5 - 838)))
                                                                              - 8LL))( a1,  a2,  a3,  a4,  3766869857LL);
}

uint64_t sub_10009D290( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50)
{
  LODWORD(STACK[0x494]) = 1029510254;
  LODWORD(STACK[0x384]) = 128;
  unint64_t v53 = STACK[0x3D8];
  unint64_t v54 = STACK[0x540];
  unint64_t v55 = STACK[0x458];
  int v56 = 2078219279 * ((~((v52 - 192) | 0xAFF9E70E) + ((v52 - 192) & 0xAFF9E70E)) ^ 0x8AFC8E85);
  *(_DWORD *)(v52 - 132) = v56 + v50 - 62;
  *(void *)(v52 - 12_Block_object_dispose(va, 8) = v54;
  *(void *)(v52 - 184) = 0LL;
  *(void *)(v52 - 176) = a50;
  *(void *)(v52 - 152) = 0LL;
  *(void *)(v52 - 144) = v55;
  *(_DWORD *)(v52 - 16_Block_object_dispose(va, 8) = 839284034 - v56;
  *(void *)(v52 - 160) = v53 + 0x2A461383296CA564LL;
  *(void *)(v52 - 192) = v53 + 0x2A461383296CA454LL;
  uint64_t v57 = ((uint64_t (*)(uint64_t))STACK[0x318])(v52 - 192);
  return ((uint64_t (*)(uint64_t))(*(void *)(v51
                                                      + 8LL
                                                      * (((*(_DWORD *)(v52 - 136) != 528123064)
                                                        * (((v50 + 705) | 0x10) + 3 * (v50 ^ 0xC2) - 2201)) ^ v50))
                                          - 8LL))(v57);
}

uint64_t sub_10009D3A0()
{
  STACK[0x558] = STACK[0x2B0] - 1824;
  LODWORD(STACK[0x59C]) = v0;
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * (((STACK[0x3F0] != 0)
                                          * (((v1 - 1094) | 0x102) + ((v1 - 1930842523) & 0x73164FBF) - 237)) ^ (v1 - 836)))
                            - 4LL))();
}

uint64_t sub_10009D3B4()
{
  return (*(uint64_t (**)(void))(v2 + 8LL * (int)((52 * (v0 - STACK[0x500] < (v1 ^ 0x438uLL))) ^ v1)))();
}

uint64_t sub_10009D3F4()
{
  *(_BYTE *)(v0 + v2 - 209671998_Block_object_dispose(va, 8) = *(_BYTE *)(v4 + v2 - 2096719988)
                                   - ((2 * *(_BYTE *)(v4 + v2 - 2096719988)) & 0x5C)
                                   - 82;
  return (*(uint64_t (**)(void))(v5 + 8LL * (((v2 - 1 == v3) * (v1 - 887)) ^ v1)))();
}

uint64_t sub_10009D43C()
{
  uint64_t v5 = (v3 ^ 0x467LL) - v1;
  int8x16_t v6 = vrev64q_s8(*(int8x16_t *)(v2 + v5 - 15));
  int8x16_t v7 = vextq_s8(v6, v6, 8uLL);
  int8x16_t v8 = vrev64q_s8(*(int8x16_t *)(v2 + v5 - 31));
  int8x16_t v9 = vextq_s8(v8, v8, 8uLL);
  uint64_t v10 = v0 + v5;
  v11.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
  v11.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
  v12.i64[0] = 0xAEAEAEAEAEAEAEAELL;
  v12.i64[1] = 0xAEAEAEAEAEAEAEAELL;
  int8x16_t v13 = vrev64q_s8(vaddq_s8(vsubq_s8(v7, vandq_s8(vaddq_s8(v7, v7), v11)), v12));
  *(int8x16_t *)(v10 - 15) = vextq_s8(v13, v13, 8uLL);
  int8x16_t v14 = vrev64q_s8(vaddq_s8(vsubq_s8(v9, vandq_s8(vaddq_s8(v9, v9), v11)), v12));
  *(int8x16_t *)(v10 - 31) = vextq_s8(v14, v14, 8uLL);
  return (*(uint64_t (**)(void))(v4 + 8LL * (int)((v1 == 96) | ((v1 == 96) << 7) | v3)))();
}

uint64_t sub_10009D4CC@<X0>(int a1@<W8>)
{
  LODWORD(STACK[0x59C]) = v2;
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * (a1 | (16
                                               * ((*(_DWORD *)(STACK[0x260] + 360) - 1520508591) < 0xFFFFFFFE))))
                            - ((a1 + 1848893479) & 0x91CC1FBF)
                            + 1155LL))();
}

uint64_t sub_10009D524@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  int v31 = a1 ^ 0x27;
  uint64_t v32 = ((uint64_t (*)(void, void, unint64_t))*(&off_10025B940 + (a1 ^ 0x489)))( LODWORD(STACK[0x57C]),  (v26 + v27),  STACK[0x438]);
  int v39 = (v32 ^ 0xFB9DFFDF) + 1602222975 + ((v31 - 147064017) & (2 * v32));
  int v40 = STACK[0x324];
  if (v39 == 1528691550)
  {
    uint64_t v41 = (char *)&STACK[0x610] + v28 - 0x1F595DDDBFA05F6DLL;
    STACK[0x3B8] = (unint64_t)(v41 - 1824);
    STACK[0x300] = (unint64_t)(v41 - 1824);
    LODWORD(STACK[0x444]) = 388468959;
    STACK[0x558] = v28 - 192;
    STACK[0x348] = 0LL;
    LODWORD(STACK[0x54C]) = 1007577602;
    uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 + 8LL * (((4 * (v41 != (char *)1576)) | (8 * (v41 != (char *)1576))) ^ (v40 - 665))) - 4LL);
    STACK[0x2E8] = STACK[0x4D8];
    STACK[0x2F8] = (unint64_t)(v41 - 1596);
    return v42(v32, v33, v34, v35, 3766869857LL, v36, v37, v38, a2);
  }

  else
  {
    if (v39 != 1797127009)
    {
      int v43 = 268847287 * ((((v30 - 192) | 0x51786A13) + (~(v30 - 192) | 0xAE8795EC)) ^ 0xAED27B3A);
      *(_DWORD *)(v30 - 192) = (v39 - ((2 * v39 + 163842372) & 0x3EF50970) - 1000568486) ^ v43;
      *(void *)(v30 - 184) = a26;
      *(_DWORD *)(v30 - 176) = v43 + v40 + 660;
      JUMPOUT(0x10009DCBCLL);
    }

    LODWORD(STACK[0x59C]) = -528097408;
    return ((uint64_t (*)(void))(*(void *)(v29
                                          + 8LL
                                          * (((STACK[0x3F0] != 0)
                                            * (((LODWORD(STACK[0x30C]) - 1094) | 0x102)
                                             + ((LODWORD(STACK[0x30C]) - 1930842523) & 0x73164FBF)
                                             - 237)) ^ (LODWORD(STACK[0x30C]) - 836)))
                              - 4LL))();
  }

uint64_t sub_10009DCDC()
{
  return sub_10009D3A0();
}

uint64_t sub_10009DD00@<X0>(int a1@<W4>, uint64_t a2@<X8>)
{
  STACK[0x558] = (((v2 ^ 0xE6u) + 38) ^ 0xFFFFFFFFFFFFFB7FLL) + a2;
  return (*(uint64_t (**)(void))(v3 + 8LL * ((185 * (a1 == v4)) ^ v2 ^ 0xE6)))();
}

uint64_t sub_10009DD40()
{
  LODWORD(STACK[0x318]) = -528097428;
  LODWORD(STACK[0x5D0]) = -528097428;
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL * (((32 * (STACK[0x3E0] == 0)) | ((STACK[0x3E0] == 0) << 6)) ^ (v0 - 479)))
                            - 12LL))();
}

void sub_10009DD7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6)
{
  uint64_t v8 = v7 - 256 + v6;
  char v9 = *a6;
  *(void *)(v8 + 17) = *(void *)(a6 + 1);
  *(_DWORD *)(v8 + 25) = *(_DWORD *)(a6 + 9);
  *(_WORD *)(v8 + 29) = *(_WORD *)(a6 + 13);
  *(_BYTE *)(v8 + 31) = a6[15];
  uint64_t v10 = *((void *)a6 + 1);
  *(void *)uint64_t v8 = *(void *)a6;
  *(void *)(v8 + _Block_object_dispose(va, 8) = v10;
  *(_BYTE *)(v8 + 16) = v9;
  JUMPOUT(0x10009DDC4LL);
}

void sub_1000A03B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, unsigned __int8 a35, int a36, int a37, int a38, unsigned __int8 a39, int a40, unsigned __int8 a41, int a42, int a43, int a44, unsigned __int8 a45, int a46, char a47)
{
  LODWORD(STACK[0x2E0]) = (a35 | ((a43 ^ 0xC) << 24) | ((a41 ^ 0xEF) << 8) | ((a45 ^ 0x30) << 16)) ^ 0xBA1CA986;
  LODWORD(STACK[0x2D8]) = a42 ^ 0xEEE068BF;
  LODWORD(STACK[0x2F0]) = (a40 | (a38 << 24) | (a36 << 16) | (a44 << (a47 ^ 0x4F))) ^ 0x485EDF79;
  LODWORD(STACK[0x310]) = (((a37 ^ 0x1A) << 24) | (a46 << 16) | a39 | ((LODWORD(STACK[0x318]) ^ v47) << 8)) ^ 0x67DBAEFF;
  JUMPOUT(0x10009E15CLL);
}

uint64_t sub_1000A0488( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, unsigned int a19)
{
  unint64_t v21 = STACK[0x468];
  STACK[0x5B0] -= 32LL;
  *(_BYTE *)(v21 + 335) = *(_BYTE *)(a14 + 335) ^ 0xCD ^ *(_BYTE *)(*(void *)(v19 + 8LL * (a19 ^ 0x458)) + 7LL) ^ *(_BYTE *)(*(void *)(v19 + 8LL * (int)(a19 - 942)) + 9LL) ^ *(_BYTE *)(*(void *)(v19 + 8LL * (a19 ^ 0x433)) + 10LL) ^ 0xAE;
  return ((uint64_t (*)(void))(*(void *)(v20 + 8LL * ((826 * (-a19 == -801)) ^ a19)) - 8LL))();
}

void sub_1000A0534()
{
}

uint64_t sub_1000A053C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  STACK[0x558] -= 16LL;
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * ((a7 - 971) ^ 0x4B6)) - 2LL * (a7 + 31) + 2322))();
}

uint64_t sub_1000A0578@<X0>(int a1@<W8>)
{
  uint64_t v3 = (_BYTE *)STACK[0x448];
  v1[12] = ((0xDB573967 >> (a1 ^ 0x97)) ^ 0xDB) - ((2 * ((0xDB573967 >> (a1 ^ 0x97)) ^ 0xDB)) & 0x5C) - 82;
  v1[13] = -82;
  v1[14] = -82;
  v1[15] = -81;
  v3[16] ^= *v1 ^ 0xAE;
  v3[17] ^= v1[1] ^ 0xAE;
  v3[18] ^= v1[2] ^ 0xAE;
  v3[19] ^= v1[3] ^ 0xAE;
  v3[20] ^= v1[4] ^ 0xAE;
  v3[21] ^= v1[5] ^ 0xAE;
  v3[22] ^= v1[6] ^ 0xAE;
  v3[23] ^= v1[7] ^ 0xAE;
  v3[24] ^= v1[8] ^ 0xAE;
  v3[25] ^= v1[9] ^ 0xAE;
  v3[26] ^= v1[10] ^ 0xAE;
  v3[27] ^= v1[11] ^ 0xAE;
  v3[28] ^= v1[12] ^ 0xAE;
  v3[29] ^= v1[13] ^ 0xAE;
  v3[30] ^= v1[14] ^ 0xAE;
  v3[31] ^= v1[15] ^ 0xAE;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 8LL * (a1 + 255)))(57LL, 200LL, 174LL);
}

void sub_1000A0778()
{
}

uint64_t sub_1000A0780()
{
  int v2 = (v0 - 590) | 0x616;
  return ((uint64_t (*)(uint64_t))(*(void *)(v1
                                                      + 8LL
}

uint64_t sub_1000A0800@<X0>(int a1@<W0>, int a2@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v6
                                        + 8LL
                                        * (((((*(unsigned __int8 *)(v5 + (v4 - 1 + a1)) == 174) ^ ((v2 ^ a2) - 73)) & 1)
                                          * v3) ^ v2 ^ a2))
                            - 8LL))();
}

void sub_1000A083C()
{
}

uint64_t sub_1000A0848()
{
  LODWORD(STACK[0x408]) = 1007577602;
  LODWORD(STACK[0x318]) = -528097439;
  uint64_t v2 = (v0 + 345430863) & 0xEB6927A9;
  unint64_t v3 = STACK[0x448];
  unint64_t v4 = ((unint64_t)&STACK[0x3F8] ^ 0x5B5B77F971F7AFDFLL)
     - 0x4025816121AADFLL
     + ((v2 - 0x4949100D1C10A7D8LL) & (2LL * (void)&STACK[0x3F8]));
  STACK[0x3F8] = 335LL;
  *(_BYTE *)(v3 + 335) = (v4 ^ 0xBA) * (v4 + 17);
}

void sub_1000A0D84()
{
}

uint64_t sub_1000A0D8C()
{
  uint64_t v2 = ((uint64_t (*)(void))STACK[0x258])();
  int v3 = STACK[0x318];
  LODWORD(STACK[0x5D0]) = STACK[0x318];
  return ((uint64_t (*)(uint64_t))(*(void *)(v1
                                                      + 8LL * (((((v0 - 187) | 0x481) + 242) * (v3 == 528123064)) ^ v0))
                                          - 12LL))(v2);
}

uint64_t sub_1000A0DD0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v68 = LODWORD(STACK[0x30C]);
  unint64_t v69 = STACK[0x300];
  unint64_t v70 = STACK[0x2E8];
  STACK[0x278] = STACK[0x2E8] + 49;
  STACK[0x270] = v69 + 49;
  STACK[0x268] = v70 + 29;
  STACK[0x240] = v69 + 29;
  STACK[0x230] = v70 + 9;
  STACK[0x220] = v69 + 9;
  STACK[0x2F0] = (unint64_t)&a9 - 0x1F595DDDBFA0591DLL;
  STACK[0x2C8] = ((unint64_t)&STACK[0x430] ^ 0x6771FFFFCCEF76FBLL)
               - 0x2010043A084831FBLL
               + ((2LL * (void)&STACK[0x430]) & 0xCEE3FFFF99DEEDF0LL);
  LODWORD(v70) = STACK[0x324];
  LODWORD(STACK[0x2E0]) = LODWORD(STACK[0x324]) - 524;
  STACK[0x210] = v70 ^ 0x607;
  LODWORD(STACK[0x310]) = (v70 - 294292186) & 0x118A875F;
  *(int32x4_t *)&STACK[0x2A0] = vdupq_n_s32(0x1F7A84B8u);
  *(int32x4_t *)&STACK[0x2B0] = vdupq_n_s32(0x1F7A84BBu);
  LODWORD(STACK[0x208]) = v70 + 349721584;
  LODWORD(STACK[0x200]) = v70 + 325933855;
  a68 = v70 - 1620794672;
  LODWORD(STACK[0x2D8]) = v70 + 2032070732;
  STACK[0x2D0] = (2 * (_DWORD)v70) ^ 0xB28u;
  return sub_1000A1764(a1, a2, a3, a4, v68, a6, 174LL);
}

uint64_t sub_1000A0DF8()
{
  return ((uint64_t (*)(unint64_t))(*(void *)(v1
                                                               + 8LL
                                                               * (((32 * (STACK[0x3E0] == 0)) | ((STACK[0x3E0] == 0) << 6)) ^ (v0 - 479)))
                                                   - 12LL))(STACK[0x3E0]);
}

uint64_t sub_1000A0E20(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_BYTE *)(a1 + (v4 - 1394447613)) = *(_BYTE *)(v6 + (v4 - 1394447613));
  return (*(uint64_t (**)(void))(v7 + 8LL * (((v4 - 1 == a4) * ((v5 ^ 0x42A) + 1679)) ^ (v5 - 753))))();
}

uint64_t sub_1000A0E64()
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL
                              * ((169 * ((v0 & 1) == ((LODWORD(STACK[0x324]) - 1965895381) & 0x752D2B7F ^ 0x13A))) ^ (LODWORD(STACK[0x324]) - 1059))))();
}

uint64_t sub_1000A0EAC@<X0>(unsigned int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((2343 * (((v3 + (a1 ^ 0x5B5) - 1167) ^ v1) < 0x201)) ^ a1)) - 8LL))();
}

uint64_t sub_1000A0EF4@<X0>(unsigned int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((107
}

uint64_t sub_1000A0F40@<X0>(int a1@<W8>)
{
  v3[31] = 0x513D873E70C37312LL;
  v3[32] = v3 + 33;
  v3[65] = 0x513D873E70C37312LL;
  v3[66] = v3 + 67;
  STACK[0x2B0] = (unint64_t)v3 + 0x2A461383296CA44CLL;
  v3[99] = 0x513D873E70C37312LL;
  v3[100] = v3 + 101;
  STACK[0x2D0] = (unint64_t)v3 + 0x2A461383296CA55CLL;
  v3[133] = 0x513D873E70C37312LL;
  v3[134] = v3 + 135;
  STACK[0x2E0] = (unint64_t)v3 + 0x2A461383296CA66CLL;
  v3[167] = 0x513D873E70C37312LL;
  v3[168] = v3 + 169;
  STACK[0x2F0] = (unint64_t)v3 + 0x2A461383296CA77CLL;
  unint64_t v8 = STACK[0x348] + 4;
  STACK[0x278] = v8;
  LODWORD(STACK[0x2C8]) = v2;
  LODWORD(STACK[0x318]) = 2 * v5;
  STACK[0x2A0] = v1;
  LODWORD(STACK[0x310]) = a1 + 338;
  int v9 = 460628867 * ((v7 - 956244809 - 2 * ((v7 - 192) & 0xC700DD77)) ^ 0x8B965F0A);
  *(_DWORD *)(v7 - 192) = a1 + 338 + v9;
  *(_DWORD *)(v7 - 184) = ((v5 ^ 0x4001EFE4) - 1140926468 + ((2 * v5) & 0xBEF6D6B8 ^ 0x3EF40030)) ^ v9;
  *(void *)(v7 - 176) = v8;
  *(void *)(v7 - 16_Block_object_dispose(va, 8) = (char *)v3 + 0x2A461383296CA33CLL;
  uint64_t v10 = (void (*)(uint64_t))(*(void *)(v4 + 8LL * (a1 ^ 0x113u)) - 4LL);
  unint64_t v11 = 3 * (a1 ^ 0xBFu);
  STACK[0x2D8] = v11;
  v10(v7 - 192);
  int v12 = v11 ^ 0x7FFDFB76;
  LODWORD(v11) = STACK[0x318];
  unsigned int v13 = (v5 ^ 0xA0847B44) + 1534804828 + (v12 & STACK[0x318] ^ 0x3EF50970);
  int v14 = 460628867 * ((2 * ((v7 - 192) & 0x5BD9D9B8) - (v7 - 192) + 606479941) ^ 0x68B0A438);
  *(_DWORD *)(v7 - 192) = LODWORD(STACK[0x310]) + v14;
  *(_DWORD *)(v7 - 184) = v13 ^ v14;
  unint64_t v15 = STACK[0x2A0];
  unint64_t v16 = STACK[0x278] + STACK[0x2A0];
  STACK[0x278] = v16;
  *(void *)(v7 - 176) = v16;
  *(void *)(v7 - 16_Block_object_dispose(va, 8) = STACK[0x2B0];
  v10(v7 - 192);
  char v17 = v10;
  int v18 = 460628867 * ((-931669370 - ((v7 - 192) | 0xC877DA86) + ((v7 - 192) | 0x37882579)) ^ 0x7B1EA704);
  LODWORD(v10) = STACK[0x310];
  *(_DWORD *)(v7 - 184) = ((v5 ^ 0x6484E344) - 1619272868 + (v11 & 0xF7FCCFF8 ^ 0x36F40970)) ^ v18;
  *(_DWORD *)(v7 - 192) = (_DWORD)v10 + v18;
  unint64_t v19 = STACK[0x278] + v15;
  STACK[0x2B0] = v19;
  unint64_t v20 = STACK[0x2D0];
  *(void *)(v7 - 176) = v19;
  *(void *)(v7 - 16_Block_object_dispose(va, 8) = v20;
  unint64_t v21 = v17;
  v17(v7 - 192);
  int v22 = 460628867 * ((v7 + 1630206759 - 2 * ((v7 - 192) & 0x612AFBE7)) ^ 0x2DBC799A);
  int v23 = ((v5 ^ 0x85D7C2) - 75829282 + (STACK[0x318] & 0x3FFEA6F4 ^ 0x3EF40070)) ^ v22;
  *(_DWORD *)(v7 - 192) = (_DWORD)v10 + v22;
  *(_DWORD *)(v7 - 184) = v23;
  unint64_t v24 = STACK[0x2B0] + v15;
  unint64_t v25 = STACK[0x2E0];
  *(void *)(v7 - 176) = v24;
  *(void *)(v7 - 16_Block_object_dispose(va, 8) = v25;
  v21(v7 - 192);
  int v26 = v21;
  int v27 = 460628867 * ((((v7 - 192) | 0x37D75E9E) - (v7 - 192) + ((v7 - 192) & 0xC828A160)) ^ 0x7B41DCE3);
  unsigned int v28 = ((v5 ^ 0xC484F764) + 1065078652 + (STACK[0x318] & 0xB7FCE7B8 ^ 0x36F40130)) ^ v27;
  *(_DWORD *)(v7 - 192) = LODWORD(STACK[0x310]) + v27;
  *(_DWORD *)(v7 - 184) = v28;
  unint64_t v29 = STACK[0x2D8];
  unint64_t v30 = STACK[0x2F0];
  *(void *)(v7 - 176) = v24 + v15;
  *(void *)(v7 - 16_Block_object_dispose(va, 8) = v30;
  v26(v7 - 192);
  int v31 = STACK[0x2C8];
  LODWORD(STACK[0x318]) = STACK[0x5D0];
  unint64_t v32 = STACK[0x348];
  STACK[0x398] = (v31 - 1007577602);
  return (*(uint64_t (**)(unint64_t))(v6
                                                     + 8LL
                                                     * ((430 * (((v31 == 1007577602) ^ (v29 + 120)) & 1)) ^ ((int)v29 + 571))))(v32);
}

uint64_t sub_1000A13D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = ((unint64_t)&STACK[0x398] ^ 0xDFFFE3FCD37FFF95LL)
     + 0x3FD27EFFFCFC5FFCLL
     + ((2LL * (void)&STACK[0x398]) & 0xBFFFC7F9A6FFFF20LL);
  unint64_t v5 = a2 - 1;
  STACK[0x398] = v5;
  *(_BYTE *)(a1 + v5) = ((v4 + 111) ^ 0xBA) * (v4 + 0x80);
  return (*(uint64_t (**)(void))(v3 + 8LL * ((1996 * (STACK[0x398] == 0)) ^ ((v2 - 1161) | 0x100))))();
}

void sub_1000A1468()
{
}

uint64_t sub_1000A1474()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL * (((32 * (STACK[0x3E0] == 0)) | ((STACK[0x3E0] == 0) << 6)) ^ (v0 - 479)))
                            - 12LL))();
}

uint64_t sub_1000A14A4()
{
  uint64_t v2 = ((uint64_t (*)(void))STACK[0x258])();
  STACK[0x558] += v0 ^ 0xFFFFFFFFFFFFFB7FLL;
  return (*(uint64_t (**)(uint64_t))(v1 + 8LL * (int)((185 * (LODWORD(STACK[0x318]) == 528123064)) ^ (v0 - 38))))(v2);
}

uint64_t sub_1000A14F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46)
{
  int v50 = 235795823 * ((((v49 - 192) | 0x56014207) + (~(v49 - 192) | 0xA9FEBDF8)) ^ 0xC2AC0B5F);
  *(_DWORD *)(v49 - 152) = v48 - v50 - 896;
  *(_DWORD *)(v49 - 14_Block_object_dispose(va, 8) = v50 ^ 0x172790DF;
  *(void *)(v49 - 144) = 0LL;
  *(void *)(v49 - 136) = a16;
  *(void *)(v49 - 192) = STACK[0x300];
  *(void *)(v49 - 184) = 0LL;
  *(void *)(v49 - 160) = a46;
  *(void *)(v49 - 176) = a17;
  uint64_t v51 = ((uint64_t (*)(uint64_t))(*(void *)(v46 + 8LL * (v48 ^ 0x46D)) - 4LL))(v49 - 192);
  int v52 = *(_DWORD *)(v49 - 168);
  LODWORD(STACK[0x5D4]) = v52;
  return (*(uint64_t (**)(uint64_t))(v47
                                            + 8LL
                                            * (int)(((v52 == 528123064) * (((v48 + 38) ^ 0xFFFFFAF8) + v48 + 38)) ^ v48)))(v51);
}

void sub_1000A15B4()
{
}

void sub_1000A172C()
{
}

uint64_t sub_1000A1764@<X0>(uint64_t (*a1)(void)@<X8>)
{
  return a1();
}

uint64_t sub_1000A17C8()
{
  STACK[0x318] = v0;
  int v4 = STACK[0x354];
  int v5 = STACK[0x2E0];
  *(_DWORD *)(STACK[0x5F8] + ((v1 + v5 + LODWORD(STACK[0x354]) - 643) & 0xFFFFFFFC)) = v2;
  LODWORD(STACK[0x354]) = v4 + 4;
  return (*(uint64_t (**)(void))(v3 + 8LL * ((39 * (v4 + 4 + v1 < ((v5 - 643) ^ 0x40u))) ^ v5)))();
}

uint64_t sub_1000A2EE8@<X0>(uint64_t a1@<X8>)
{
  int v9 = v5 + v3;
  int v10 = *(_DWORD *)(a1 + 4LL * (v5 + v3 - 8)) ^ *(_DWORD *)(a1 + 4LL * (v5 + v3 - 3));
  int v11 = *(_DWORD *)(a1 + 4LL * (v9 - 16)) ^ *(_DWORD *)(a1 + 4LL * (v9 - 14)) ^ (v8 + v10 - (((v1 + 734) ^ (v7 + 673)) & (2 * v10)));
  HIDWORD(v12) = v11 ^ v8;
  LODWORD(v12) = v11;
  *(_DWORD *)(a1 + 4LL * (v2 + v5)) = (v12 >> 31) + v8 - (v7 & (2 * (v12 >> 31)));
  return (*(uint64_t (**)(void))(v6 + 8LL * ((((v2 + 1 + v5) > 0x4F) * v4) ^ v1)))();
}

uint64_t sub_1000A2F70()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * v0) - 8LL))();
}

void sub_1000A304C()
{
}

uint64_t sub_1000A3064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return ((uint64_t (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 + 8LL * ((127 * ((v10 + 21 + v8) < 0x28)) ^ (v7 - 21))) - 8LL))( (v10 + 40),  1572067138LL,  2614905041LL,  a4,  a5,  a6,  a7,  819LL);
}

void sub_1000A3110()
{
}

uint64_t sub_1000A3128(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((1480 * ((a1 + 1 + v2) > 0x3B)) ^ v1)) - 8LL))();
}

uint64_t sub_1000A31F0(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((497 * ((a2 + 1 + v3) < 0x50)) ^ v2)) - 4LL))();
}

void sub_1000A32B8()
{
  LODWORD(STACK[0x478]) = v1;
  LODWORD(STACK[0x47C]) = v5;
  LODWORD(STACK[0x51C]) = v3;
  LODWORD(STACK[0x48C]) = v4;
  LODWORD(STACK[0x454]) = v0;
  unint64_t v9 = STACK[0x5E8];
  int v10 = *(_DWORD *)(STACK[0x5E8] - 0x7F1325F673F67DFFLL);
  LODWORD(STACK[0x354]) = v8 + 80;
  int v11 = (v2 ^ (v7 - 633) ^ v10) + (v0 ^ v7);
  *(_DWORD *)(v9 - 0x7F1325F673F67DFFLL) = v11 + v7 - (v6 & (2 * v11));
  JUMPOUT(0x1000A331CLL);
}

uint64_t sub_1000A33F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = STACK[0x400];
  int v7 = *(unsigned __int8 *)(STACK[0x400] - 0x7F1325F673F67DF7LL) ^ 0x1E;
  if (v7 == 2) {
    return ((uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)(v5
  }
                                                                                            + 8LL
                                                                                            * ((639
                                                                                              * (*(_DWORD *)(v6 - 0x7F1325F673F67DFBLL) != 980646681)) ^ (LODWORD(STACK[0x324]) + 141)))
                                                                                - STACK[0x210]
                                                                                + 644))( a1,  STACK[0x248],  2461486866LL,  1833480445LL);
  unint64_t v8 = STACK[0x248];
  unint64_t v9 = STACK[0x2F8];
  if (v7 == 1)
  {
    BOOL v10 = *(_DWORD *)(v6 - 0x7F1325F673F67DFBLL) == ((LODWORD(STACK[0x324]) + 559) ^ 0x3A737DA7);
    return ((uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(*(void *)(v5 + 8LL * ((v10 | (4 * v10)) ^ (LODWORD(STACK[0x324]) + 675))) - 8LL))( a1,  v8,  2461486866LL,  1833480445LL,  a5,  v9);
  }

  else
  {
    int v12 = 4 * (a5 ^ 0x5CE);
    unint64_t v13 = STACK[0x2C8];
    uint64_t v14 = 3 * (v12 ^ 0x481u) - 1076LL;
    STACK[0x430] = v14;
    *(_BYTE *)(v6 - 0x7F1325F673F67E57LL + v14) = (v13 ^ 0xBA) * (v13 + 17);
    return ((uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(*(void *)(v5 + 8LL * ((3393 * (STACK[0x430] == 0)) ^ v12)) - 12LL))( a1,  v8,  2461486866LL,  1833480445LL,  1153LL,  v9);
  }

void sub_1000A3D40()
{
}

uint64_t sub_1000A3D48()
{
  return ((uint64_t (*)(void))STACK[0x590])();
}

uint64_t sub_1000A3D74()
{
  int v3 = LODWORD(STACK[0x324]) - 405;
  unsigned int v4 = ((v2 + ((LODWORD(STACK[0x324]) - 445) | 0x28) - 762) ^ LODWORD(STACK[0x5CC])) + (v0 ^ v2);
  *(_DWORD *)(STACK[0x260] + 52) = ((v4 % 0x2710) ^ 0xFD3FA9FC) + 1608447808 + ((2 * (v4 % 0x2710)) & 0x53F8);
  int v5 = STACK[0x5D4];
  STACK[0x558] -= 1616LL;
  LODWORD(STACK[0x59C]) = v5;
  return (*(uint64_t (**)(void))(v1 + 8LL * ((2026 * (v5 == v2)) ^ v3)))();
}

void sub_1000A3E14()
{
  *int v0 = STACK[0x57C];
  v0[85] = STACK[0x494];
  v0[86] = STACK[0x3C8];
  v0[87] = STACK[0x4AC];
  v0[88] = STACK[0x49C];
  JUMPOUT(0x1000A3E74LL);
}

uint64_t sub_1000A3EC4@<X0>( uint64_t a1@<X1>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,unsigned int *a60,uint64_t (*a61)(void, uint64_t, void))
{
  int v62 = a2 + 361;
  uint64_t v63 = a61(*a60, a1, LODWORD(STACK[0x4BC]));
  return ((uint64_t (*)(uint64_t))(*(void *)(v61
                                                      + 8LL
                                                      * ((1656 * (LODWORD(STACK[0x59C]) != (v62 ^ 0x3B4) + 528122808)) ^ v62))
                                          - 12LL))(v63);
}

uint64_t sub_1000A3F58()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL * ((1656 * (LODWORD(STACK[0x59C]) != v2 + (v0 ^ 0x3B4) + 78 - 334)) ^ v0))
                            - 12LL))();
}

uint64_t sub_1000A4008()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((180
                                          * (((((v0 - 54) | 0x10A) ^ 0xFFFFFA3F ^ (3 * (v0 ^ 0x1FF))) & STACK[0x4CC]) != 1520508590)) ^ v0))
                            - 12LL))();
}

uint64_t sub_1000A4170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  LODWORD(STACK[0x4FC]) = a5 - 10;
  unint64_t v6 = (char *)&STACK[0x610] + v5 - 0x1F595DDDBFA05F6DLL;
  STACK[0x2D8] = (unint64_t)(v6 + 2048);
  STACK[0x2E0] = (unint64_t)(v6 + 2176);
  STACK[0x318] = (unint64_t)v6;
  STACK[0x2E8] = (unint64_t)(v6 + 2304);
  return sub_100098F24();
}

uint64_t sub_1000A417C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  unint64_t v67 = STACK[0x3D0];
  int v68 = STACK[0x5A4];
  int v69 = 268847287 * ((((v66 - 192) | 0x63168F3F) - ((v66 - 192) & 0x63168F3F)) ^ 0x9CBC9E17);
  *(_DWORD *)(v66 - 136) = v63 - v69 - ((2 * v63 + 180208294) & 0x996974A) + 707407096;
  *(void *)(v66 - 144) = a62;
  *(_DWORD *)(v66 - 16_Block_object_dispose(va, 8) = -268847287 * ((((v66 - 192) | 0x63168F3F) - ((v66 - 192) & 0x63168F3F)) ^ 0x9CBC9E17)
                         + 957769771 * v68
                         + 1519593704;
  *(_DWORD *)(v66 - 152) = v64 - v69 + 1695027118;
  *(void *)(v66 - 160) = v67;
  *(void *)(v66 - 192) = a61;
  *(void *)(v66 - 176) = v62;
  uint64_t v70 = sub_1000A7F38(v66 - 192);
  int v71 = *(_DWORD *)(v66 - 184);
  LODWORD(STACK[0x4FC]) = v71;
}

uint64_t sub_1000A428C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, int a48, int a49)
{
  int v53 = STACK[0x550];
  int v54 = *(_DWORD *)(STACK[0x260] + 52) + 387428920 + 389 * (v50 ^ 0x14D);
  int v55 = 1224239923 * ((((v52 - 192) | 0xAFEE53DD) - ((v52 - 192) & 0xAFEE53DD)) ^ 0x5D5DAE0A);
  *(void *)(v52 - 184) = STACK[0x248];
  *(_DWORD *)(v52 - 176) = v54 ^ v55;
  *(_DWORD *)(v52 - 172) = v55 + v50 - 285;
  *(_DWORD *)(v52 - 14_Block_object_dispose(va, 8) = ((a49 ^ 0xB8F0D408)
                          + 2084044668
                          + ((19 * (v50 ^ 0x160) - 1910764124) ^ (2 * a49) & 0xEFFCB10E)) ^ v55;
  *(void *)(v52 - 16_Block_object_dispose(va, 8) = &STACK[0x600];
  *(void *)(v52 - 160) = v49;
  *(_DWORD *)(v52 - 192) = v55 + (v53 ^ 0xE77C67FF) + ((2 * v53) & 0xCEF8CFFE) + 533724149;
  uint64_t v56 = ((uint64_t (*)(uint64_t))((char *)*(&off_10025B940 + (v50 ^ 0x176)) - 4))(v52 - 192);
  int v57 = *(_DWORD *)(v52 - 152);
  LODWORD(STACK[0x4FC]) = v57;
  return ((uint64_t (*)(uint64_t))(*(void *)(v51 + 8LL * ((1740 * (v57 == 528123064)) ^ v50)) - 8LL))(v56);
}

uint64_t sub_1000A43F8()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((1723 * (v0 - 1520508589 + ((v2 - 741) | 0x40Au) - 1169 < 0xFFFFFFFE)) ^ v2))
                            - 4LL))();
}

uint64_t sub_1000A4438( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t (*a34)(void, uint64_t, void, void, unint64_t *, uint64_t, uint64_t, unint64_t *), uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, int a48, int a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v75 = a34( *(unsigned int *)STACK[0x260],  a2,  a49 ^ 0x4F0E8C8Fu,  ((v72 - 822486427) & 0x310626BFu) + *(_DWORD *)(STACK[0x260] + 52) - 1562289611,  &STACK[0x600],  v68,  v69,  &STACK[0x1930]);
  int v77 = (v75 ^ 0xFBFB1FE7) + 1335230431 + ((2 * v75) & 0xF7F63FCE);
  if (v77 == 1536237513)
  {
    LODWORD(STACK[0x2F8]) = 1536237513;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v71
                                                       + 8LL
                                                       * ((((LODWORD(STACK[0x324]) - 415668704) & 0x18C69D7F ^ 0xF35AF0AA)
                                                         + LODWORD(STACK[0x2F0]) > 2) ^ (LODWORD(STACK[0x324]) + 435))))( v75,  v76);
  }

  else if (v77 == 1267802054)
  {
    int v81 = STACK[0x324];
    a68(*a67, v68, v69);
    STACK[0x3D0] = 0LL;
    LODWORD(STACK[0x550]) = 0;
    unint64_t v82 = STACK[0x538];
    int v83 = *(_DWORD *)(STACK[0x260] + 52) - 1419204067;
    int v84 = 3804331 * ((((2 * (v74 - 192)) | 0x4D2722E6) - (v74 - 192) + 1500278413) ^ 0xD846B485);
    int v85 = v84 + (LODWORD(STACK[0x3EC]) ^ (v81 - 58721440)) + ((2 * LODWORD(STACK[0x3EC])) & 0xF8FFFFDE) + 733700096;
    *(_DWORD *)(v74 - 16_Block_object_dispose(va, 8) = v81 - v84 - 1082;
    *(_DWORD *)(v74 - 164) = v85;
    *(_DWORD *)(v74 - 152) = (a49 & 0x7FFFFFFF ^ 0x32D1E356) - v84 + (v70 & 0xFBBEDFB2 ^ 0x9A1C1912) + 178772864;
    *(_DWORD *)(v74 - 192) = v83 ^ v84;
    *(void *)(v74 - 160) = &STACK[0x1930];
    *(void *)(v74 - 184) = STACK[0x248];
    *(void *)(v74 - 176) = v82;
    uint64_t v86 = ((uint64_t (*)(uint64_t))((char *)*(&off_10025B940 + (v81 ^ 0x40F)) - 8))(v74 - 192);
    int v87 = *(_DWORD *)(v74 - 188);
    LODWORD(STACK[0x4FC]) = v87;
    return ((uint64_t (*)(uint64_t))(*(void *)(v71
                                                        + 8LL
                                                        * (((2 * (v87 == 528123064)) | ((v87 == 528123064) << 8)) ^ (v81 + 494)))
                                            - 4LL))(v86);
  }

  else
  {
    LODWORD(STACK[0x2F8]) = v77;
    int v78 = 268847287 * ((((v74 - 192) | 0xB5A806F) - (v74 - 192) + ((v74 - 192) & 0xF4A57F90)) ^ 0xF4F09147);
    *(_DWORD *)(v74 - 176) = v78 + LODWORD(STACK[0x324]) + 660;
    *(void *)(v74 - 184) = a32;
    *(_DWORD *)(v74 - 192) = (v77 - ((2 * v77 + 685621364) & 0x3EF50970) - 739678990) ^ v78;
    sub_1000880AC((_DWORD *)(v74 - 192));
    uint64_t v79 = (char *)&STACK[0x610] + v73 - 0x1F595DDDBFA05F6DLL;
    STACK[0x2D8] = (unint64_t)(v79 + 2048);
    STACK[0x2E0] = (unint64_t)(v79 + 2176);
    STACK[0x318] = (unint64_t)v79;
    STACK[0x2E8] = (unint64_t)(v79 + 2304);
    return sub_100098F24();
  }

uint64_t sub_1000A460C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  LODWORD(STACK[0x4FC]) = a5 + 31;
  unint64_t v6 = (char *)&STACK[0x610] + v5 - 0x1F595DDDBFA05F6DLL;
  STACK[0x2D8] = (unint64_t)(v6 + 2048);
  STACK[0x2E0] = (unint64_t)(v6 + 2176);
  STACK[0x318] = (unint64_t)v6;
  STACK[0x2E8] = (unint64_t)(v6 + 2304);
  return sub_100098F24();
}

uint64_t sub_1000A461C()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * (v0 ^ (16
}

uint64_t sub_1000A4678@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  int v60 = a1 - 231;
  unint64_t v61 = STACK[0x418];
  int v62 = 831981571 * ((v59 + 1478228203 - 2 * ((v59 - 192) & 0x581BF9AB)) ^ 0xC1BA298F);
  int v63 = v62 + 975730075 * LODWORD(STACK[0x5A4]) + 1947391287;
  *(void *)(v59 - 184) = v56;
  *(void *)(v59 - 176) = a55;
  *(_DWORD *)(v59 - 152) = (v55 - (((a1 - 231) ^ 0x745E34DB) & (v57 + 1253950118)) + 1603139965) ^ v62;
  *(_DWORD *)(v59 - 14_Block_object_dispose(va, 8) = v63;
  *(_DWORD *)(v59 - 192) = a1 - v62 - 504208428;
  *(void *)(v59 - 16_Block_object_dispose(va, 8) = a54;
  *(void *)(v59 - 160) = v61;
  uint64_t v64 = sub_1000A7B98(v59 - 192);
  int v65 = *(_DWORD *)(v59 - 188);
  LODWORD(STACK[0x4FC]) = v65;
  return ((uint64_t (*)(uint64_t))(*(void *)(v58 + 8LL * ((2316 * (v65 == 528123064)) ^ (v60 - 833)))
                                          - (v60 ^ 0x5C1u)
                                          + 326LL))(v64);
}

void sub_1000A4788( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void (*a27)(uint64_t), uint64_t a28, uint64_t a29)
{
  *(_DWORD *)(v30 - 192) = (v29 - 2024873417) ^ (69008221
                                               * ((20409577
                                                 - ((v30 - 192) ^ 0xBC004747 | 0x1376CE9)
                                                 + ((v30 - 192) ^ 0xBC004747 | 0xFEC89316)) ^ 0x916A865B));
  sub_1000A8318((_DWORD *)(v30 - 192));
  LODWORD(STACK[0x2F0]) = LODWORD(STACK[0x2F0]) + 389 * (v29 ^ 0x14D) - 1166;
  LOBYTE(STACK[0x19A0]) = 73 * ((~(v30 + 64) & 0x53 | (v30 + 64) & 0xAC) ^ 0x3B) + 117;
  *(void *)(v30 - 184) = a29;
  *(void *)(v30 - 16_Block_object_dispose(va, 8) = a28;
  *(_DWORD *)(v30 - 160) = (v29 - 47) ^ (1178560073
                                       * ((~(v30 - 192) & 0x3960D353 | (v30 - 192) & 0xC69F2CAC) ^ 0xDE55F13B));
  a27(v30 - 192);
  JUMPOUT(0x1000A4174LL);
}

uint64_t sub_1000A4A64()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((250 * ((v0 & 0xFFFFFFFE) != (((v1 - 627) | 0x4C3) ^ 0x5AA11871))) ^ (v1 - 54)))
                            - 12LL))();
}

uint64_t sub_1000A4AA8@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  LODWORD(STACK[0x4FC]) = v2 - 10;
  unint64_t v4 = STACK[0x538];
  unint64_t v5 = LODWORD(STACK[0x3EC]);
  STACK[0x358] = v5;
  return ((uint64_t (*)(uint64_t, unint64_t))(*(void *)(v3
                                                                        + 8LL
                                                                        * ((26 * ((_DWORD)v5 == ((a2 + 6) ^ 0x45F))) ^ (a2 - 46)))
                                                            - 11 * ((a2 + 54) ^ 0x418u)
                                                            + 1657LL))( a1,  v4);
}

void sub_1000A4C8C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
}

uint64_t sub_1000A4DF4()
{
  int v2 = *(_DWORD *)(STACK[0x260] + 56);
  *(_DWORD *)(STACK[0x260] + 56) = v2 + 1;
  return ((uint64_t (*)(void))(*(void *)(v1
}

void sub_1000A4E48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void (*a27)(uint64_t), uint64_t a28, uint64_t a29)
{
  *(_DWORD *)(v31 - 192) = (v29 - 2024873223) ^ (69008221
                                               * ((((v31 - 192) | 0x54517644) - ((v31 - 192) & 0x54517644)) ^ 0x87F3244E));
  sub_1000A8318((_DWORD *)(v31 - 192));
  *(void *)(v31 - 184) = a29;
  *(void *)(v31 - 16_Block_object_dispose(va, 8) = a28;
  *(_DWORD *)(v31 - 160) = (v29 + 147) ^ (((v31 - 192 - 2 * ((v31 - 192) & 0x9BD09A5) + 163383717) ^ 0xEE882BCD) * v30);
  LOBYTE(STACK[0x19A0]) = ((v31 + 64 - 2 * ((v31 + 64) & 0xA5) - 91) ^ 0xCD) * v30 + 117;
  a27(v31 - 192);
  JUMPOUT(0x1000995FCLL);
}

void sub_1000A4F14(uint64_t a1)
{
  __asm { BR              X8 }

void sub_1000A5040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  int v9 = **(unsigned __int8 **)(v8 + 80) - (**(unsigned __int8 **)(a3 + 176) ^ 0xAE);
  BOOL v11 = (v9 ^ 0xAFDE77D6) + ((2 * v9) & 0x5FBCEFAC) + 2075508544 != a6 || a7 == 3011088772LL;
  __asm { BR              X15 }

uint64_t sub_1000A61E4@<X0>(int a1@<W0>, int a2@<W4>, int a3@<W5>, uint64_t a4@<X8>)
{
  *(_BYTE *)(v4 + (a1 - 1638101362)) = *(_BYTE *)(a4 + (a1 - 1638101362));
}

void wyjYwk(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3) {
    BOOL v6 = a4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  int v9 = !v6 && a5 != 0 && a6 != 0;
  __asm { BR              X8 }

uint64_t sub_1000A62AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, int a21, unsigned int a22)
{
  a22 = 1178560073
  uint64_t v25 = sub_1000A80C0(&a21);
  return (*(uint64_t (**)(uint64_t))(v24 + 8LL * ((1180 * (a21 == v22)) ^ v23)))(v25);
}

uint64_t sub_1000A6344( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, unint64_t *a21, unsigned int a22, int a23)
{
  a22 = (831981571 * ((&a21 & 0xC67EF54C | ~(&a21 | 0xC67EF54C)) ^ 0xA020DA97)) ^ 0x5D;
  a21 = &STACK[0x5E5ED88ABFC5693F];
  sub_100067AB4((uint64_t)&a21);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 8LL * ((37 * (a23 == v23)) | 0x258u)))( v25,  v26,  v27,  v28,  v29,  v30,  v31,  v32,  a9,  a10,  a11,  a12,  a13);
}

uint64_t sub_1000A63D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, unsigned int a24)
{
  unsigned int v30 = 69008221 * ((&a21 & 0x60EEFFDA | ~(&a21 | 0x60EEFFDA)) ^ 0x4CB3522F);
  HIDWORD(a22) = v30 + 993;
  a24 = ((v26 ^ 0x5FFD77FD) - 163655756 + ((2 * v26) & 0xBFFAEFFA)) ^ v30;
  a23 = a16;
  a21 = v25;
  ((void (*)(uint64_t *))(*(void *)(v29 + 1456) - 4LL))(&a21);
  unsigned int v31 = 1224239923 * ((25684038 - (&a21 | 0x187E846) + (&a21 | 0xFE7817B9)) ^ 0xCCBEA6E);
  LODWORD(a21) = *v24 - v31 + 1560460570 - ((2 * *v24) & 0xBA057A34);
  LODWORD(a23) = v31 ^ 0x38B;
  a22 = a16;
  sub_10007D800((uint64_t)&a21);
  int v32 = *v28;
  unsigned int v33 = 1224239923 * ((((2 * &a21) | 0xC43AEF80) - &a21 + 501385280) ^ 0x10AE8A17);
  LODWORD(a23) = v33 ^ 0x38B;
  a22 = a16;
  LODWORD(a21) = v32 - v33 + 1560460570 - ((2 * v32) & 0xBA057A34);
  sub_10007D800((uint64_t)&a21);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *, int *, uint64_t, uint64_t, uint64_t))(v27 + 8LL * ((1649 * (HIDWORD(a21) == 528123064)) ^ 0x238u)))( v34,  v35,  v36,  v37,  v38,  v39,  v40,  v41,  a9,  a10,  v24,  v28,  a13,  a14,  a15);
}

uint64_t sub_1000A65B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, int a21, int a22, unsigned int a23, uint64_t a24, unint64_t *a25, int a26)
{
  unsigned int v30 = ((419254032 - (&a21 | 0x18FD4F10) + (&a21 | 0xE702B0EF)) ^ 0x15B14D38) * v27;
  a21 = v30 ^ 0x44550099;
  a22 = (v28 + 368399609) ^ v30;
  a24 = a16;
  a25 = &STACK[0x2940FF9A65062508];
  a23 = v30 ^ 0x9A04CD26;
  uint64_t v31 = sub_1000A817C((uint64_t)&a21);
  return (*(uint64_t (**)(uint64_t))(v29
                                            + 8LL
                                            * ((307 * (a26 == ((((v28 + 1659747781) & 0x42F7) - 157) ^ (v26 + 552)))) ^ v28)))(v31);
}

uint64_t sub_1000A6694( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, uint64_t a18, uint64_t a19, uint64_t a20, unint64_t *a21, unint64_t *a22, unint64_t *a23, unint64_t *a24)
{
  a23 = &STACK[0x5F366804CF4E56B1];
  a24 = a17;
  a22 = &STACK[0x60E62A17C8DAFCBA];
  LODWORD(a21) = v24
               - 231789547
               - 2078219279 * (((&a21 | 0x4113E74D) + (~&a21 | 0xBEEC18B2)) ^ 0x9BE97138);
  sub_1000A7D9C((uint64_t)&a21);
  LODWORD(a21) = v24 - 231789547 - 2078219279 * (&a21 ^ 0xDAFA9674);
  a23 = &STACK[0x5F366804CF4E56C1];
  a24 = a17;
  a22 = &STACK[0x60E62A17C8DAFC9A];
  sub_1000A7D9C((uint64_t)&a21);
  LODWORD(a23) = v24
  a21 = &STACK[0x5F366804CF4E5691];
  a22 = a17;
  ((void (*)(unint64_t **))(*(void *)(v26 + 8LL * (v24 ^ 0x21E)) - 4LL))(&a21);
  LODWORD(a22) = v24
               - 241568881
  a21 = a17;
  uint64_t v27 = sub_10008DBEC((uint64_t)&a21);
  return ((uint64_t (*)(uint64_t))(*(void *)(v25 + 8LL
                                                            * (((HIDWORD(a22) == 528123064) * (v24 ^ 0x7C0)) ^ v24))
                                          - 4LL))(v27);
}

uint64_t sub_1000A6850( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15)
{
  return ((uint64_t (*)(void))(*(void *)(v17 + 8LL * ((1807 * (a15 == v15)) ^ v16)) - (((v16 ^ 0x60E) - 707) ^ 0x23CLL)))();
}

uint64_t sub_1000A6888( uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  int v21 = a2 - 77 + (a19 ^ v19) - 1390884690 - ((2 * (a19 ^ v19)) & 0x5A319AB8);
  return ((uint64_t (*)(void))(*(void *)(v20
                                        + 8LL
                                        * ((463
                                          * (((2 * v21) & 0xFFFDBCBA ^ (a2 + 1513198525))
                                           + (v21 ^ 0x52E61301)
                                           + 2145613247 != 2145539100)) ^ a2))
                            - 8LL))();
}

uint64_t sub_1000A6940( uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v22
                                                               + 8LL
                                                               * ((412
                                                                 * (a5
                                                                  + a4
                                                                  + (((a7 - 158) | 0x122) ^ (v20 + 751)) < (a7 ^ v21) + v19)) ^ a7))
                                                   - 8LL))( a1,  a19);
}

uint64_t sub_1000A698C(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * (v3 ^ (704 * ((unint64_t)(a2 - v2) > 0x1F)))) - 8LL))();
}

uint64_t sub_1000A69C8(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t sub_1000A6A28(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  v10.i64[0] = 0xAEAEAEAEAEAEAEAELL;
  v10.i64[1] = 0xAEAEAEAEAEAEAEAELL;
  uint64_t v11 = (a5 + a4 + v6);
  uint64_t v12 = v7 + v11;
  int8x16_t v13 = veorq_s8(*(int8x16_t *)(a2 + v11 - 31), v10);
  *(int8x16_t *)(v12 - 15) = veorq_s8(*(int8x16_t *)(a2 + v11 - 15), v10);
  *(int8x16_t *)(v12 - 31) = v13;
}

void sub_1000A6A98()
{
}

uint64_t sub_1000A6AA0( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v9 + 8LL * ((((9 * ((v8 + 1703) ^ 0x62E)) ^ 0x4E3) * (a3 == a8)) ^ (v8 + 1703))))();
}

uint64_t sub_1000A6AE4(uint64_t a1, uint64_t a2, char a3)
{
  return ((uint64_t (*)(void))(v5
                            + *(void *)(v4 + 8LL * (v3 ^ 0x653 ^ (503 * ((a3 & 0x18) == 0))))
                            - ((v3 ^ 0x653u)
                             + 216)
                            - (((v3 ^ 0x653) + 1683489078) | 0x1126D401u)
                            + 460))();
}

uint64_t sub_1000A6B44(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  *(int8x8_t *)(v9 - 7 + (a5 + a4 + v8 - a8)) = veor_s8( *(int8x8_t *)(a2 - 7 + (a5 + a4 + v8 - a8)),  (int8x8_t)0xAEAEAEAEAEAEAEAELL);
  return ((uint64_t (*)(void))(*(void *)(v11
                                        + 8LL
                                        * ((31
}

void sub_1000A6BBC()
{
}

uint64_t sub_1000A6BC4(uint64_t a1, uint64_t a2, int a3)
{
}

uint64_t sub_1000A6C28@<X0>(uint64_t a1@<X1>, int a2@<W8>)
{
  *(_BYTE *)(v5 + (v4 + a2)) = *(_BYTE *)(a1 + (v4 + a2)) ^ 0xAE;
  BOOL v8 = v4 - 1 != v2 + ((v6 + 430995322) & 0x70D0B6DB) - 1161;
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * (((2 * v8) | (4 * v8)) ^ (v3 + v6 + 290))) - 4LL))();
}

uint64_t sub_1000A6C88( int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20, int a21)
{
  *unsigned int v28 = a1;
  int v31 = v25 + (a21 ^ v27) - (v24 & (2 * (a21 ^ v27))) + 1198;
  return ((uint64_t (*)(void))(*(void *)(v30
                                        + 8LL
                                        * ((35
                                          * (((v29 - 3 + v23) & (2 * v31) ^ (v24 - 512))
                                           + (((v29 - 996) | 0x250) ^ v26 ^ v31)
                                           + v22 == v21)) ^ v29))
                            - 8LL))();
}

uint64_t sub_1000A6CF8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL
                                        * (int)(((((a6 + 101022567) & 0xF9FA847F) - 186)
}

uint64_t sub_1000A6D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  BOOL v9 = v6 - v7 >= ((a6 - 505) ^ 0x2ADuLL);
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * (((2 * v9) | (16 * v9)) ^ a6)) - 8LL))();
}

uint64_t sub_1000A6D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return ((uint64_t (*)(void))(*(void *)(v10
                                        + 8LL
                                        * (((((v9 < 0x20) ^ ((a7 ^ 0x3B) + 1)) & 1)
                                          * ((a7 - v7 - 645) ^ (v8 + 896))) ^ a7))
                            - 8LL))();
}

uint64_t sub_1000A6DC4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int v12 = a2 + a5 + v6;
  v13.i64[0] = 0xAEAEAEAEAEAEAEAELL;
  v13.i64[1] = 0xAEAEAEAEAEAEAEAELL;
  uint64_t v14 = v7 + v12;
  uint64_t v15 = v10 + v12;
  int8x16_t v16 = veorq_s8(*(int8x16_t *)(v14 - 31), v13);
  *(int8x16_t *)(v15 - 15) = veorq_s8(*(int8x16_t *)(v14 - 15), v13);
  *(int8x16_t *)(v15 - 31) = v16;
  return ((uint64_t (*)(void))(*(void *)(v11
                                        + 8LL
                                        * ((((v8 & 0xFFFFFFE0) == 32) * ((v5 + v9 + 1186) ^ 0x12)) ^ (v5 + v9 + 821)))
                            - 4LL))();
}

void sub_1000A6E2C()
{
}

uint64_t sub_1000A6E38()
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (((((v2 - 565) | 0x80) ^ 0x1BC) * (v0 != v1)) ^ v2)) - 8LL))();
}

uint64_t sub_1000A6E64()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((((2 * (v1 - 541)) ^ 0x311) * ((v0 & 0x18) == 0)) ^ (v1 - 541)))
                            - 11 * ((v1 - 541) ^ 0x2EAu)
                            + 1125LL))();
}

uint64_t sub_1000A6EB0@<X0>(int a1@<W2>, int a2@<W8>)
{
  *(int8x8_t *)(v6 - 7 + (v3 + a2 - v5)) = veor_s8( *(int8x8_t *)(v2 - 7 + (v3 + a2 - v5)),  (int8x8_t)0xAEAEAEAEAEAEAEAELL);
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL
                                        * (int)((196
                                               * (v5
                                                + ((((a1 + 1033067836) & 0xC26CA27F) + 1979386989) & 0x8A04F5A6)
                                                - 1150 != ((((a1 + 1033067836) & 0xC26CA27F) - 634) & v4))) ^ (a1 + 1033067836) & 0xC26CA27F))
                            - 4LL))();
}

uint64_t sub_1000A6F38(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t, uint64_t, void))(*(void *)(v5
                                                                       + 8LL * ((((v3 - 25) ^ 0x441) * (v4 == v2)) ^ v3))
                                                           - 8LL))( a1,  a2,  (v3 - 25) ^ 0x698u);
}

uint64_t sub_1000A6F68@<X0>(int a1@<W3>, int a2@<W8>)
{
  *(_BYTE *)(v5 + (v4 + a2)) = *(_BYTE *)(v3 + (v4 + a2)) ^ 0xAE;
}

uint64_t sub_1000A6FBC( int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _DWORD *a8)
{
  int v10 = (a3 - 739371961) & 0x2C11EAFB;
  *a8 = a1;
  int v11 = v10 + 32;
  uint64_t v16 = v14;
  unsigned int v15 = (v10 - 424) ^ (69008221
                     * (((&v15 | 0x90C46521) - &v15 + (&v15 & 0x6F3B9AD8)) ^ 0x4366372B));
  v9(&v15);
  uint64_t v16 = v13;
  unsigned int v15 = (v11 - 456) ^ (69008221
                     * ((-128049727 - (&v15 | 0xF85E1DC1) + (&v15 | 0x7A1E23E)) ^ 0xD403B034));
  v9(&v15);
  return v8 ^ 0x1F7A84B8u;
}

void sub_1000A70E0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4) - 3804331 * ((2 * (a1 & 0x5C5A643E) - a1 - 1549427775) ^ 0xDD70BE37);
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned int v5 = v1
  uint64_t v3 = v2;
  sub_10006292C((uint64_t)&v3);
  __asm { BR              X9 }

uint64_t sub_1000A7238@<X0>(uint64_t a1@<X8>)
{
  unsigned int v5 = (((v4 + v3) >> 4) & 0x3BCE1FE ^ 0x9C201C) + (((v4 + v3) >> 5) ^ 0x1FB1E9F1);
  BOOL v6 = ((11 * (v1 ^ 0x3AA)) ^ 0xB1B33878) + v5 < v1 + v2 - 879646153;
  if (v2 > 0x346E51F3 != v5 < 0x19DE70FF) {
    BOOL v6 = v2 > 0x346E51F3;
  }
  return (*(uint64_t (**)(void))(a1 + 8LL * ((2021 * v6) ^ v1)))();
}

uint64_t sub_1000A72E0@<X0>(uint64_t a1@<X8>)
{
}

uint64_t sub_1000A7330@<X0>(uint64_t a1@<X8>)
{
  int v6 = v1 - 420360393;
  if (*v4 + 784496834 < 0) {
    int v6 = 447656245 - v1;
  }
  _DWORD *v4 = *v4 - 13647926 + v6;
  int v7 = v2 + 1905106051;
  BOOL v8 = v7 < -676385916;
  **(_DWORD **)(v5 - 0x2A461383296CA23CLL) = *(_DWORD *)(*(void *)(v5 - 0x2A461383296CA23CLL) + 4LL * (v1 - 434008319));
  if (v7 >= -676385916) {
    BOOL v8 = v7 > 1471097733;
  }
  return (*(uint64_t (**)(void))(a1 + 8LL * ((!v8 * ((2 * (v3 ^ 0x132)) ^ 0xD3)) ^ v3)))();
}

void sub_1000A741C()
{
}

void sub_1000A7424()
{
  *char v0 = 1362986814;
}

void sub_1000A765C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) ^ (235795823 * (((a1 | 0x87E968F1) - (a1 & 0x87E968F1)) ^ 0x134421A8));
  uint64_t v2 = *(void *)a1;
  ((void (*)(void, void (*)()))*(&off_10025B940 + v1 - 462))( *(&off_10025B940 + (v1 ^ 0x2DF)),  sub_1000A875C);
  __asm { BR              X10 }

uint64_t sub_1000A770C@<X0>(uint64_t a1@<X8>)
{
}

  ;
}

uint64_t sub_1000A776C()
{
  return (*(uint64_t (**)(uint64_t))(v2 + 8LL * (v0 - 1181)))(v1);
}

void sub_1000A7788(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }

uint64_t sub_1000A77E0()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((2 * (v0 == 1007577602)) | 0x7F4u)) - 8LL))();
}

uint64_t sub_1000A780C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = v4 + 128;
  *(_DWORD *)(*(void *)(a1 + 96) + 800LL) = 1891857170;
  *(_DWORD *)(*(void *)(a1 + 96) + 804LL) = 1362986814;
  *(void *)(*(void *)(a1 + 96) + 808LL) = *(void *)(a1 + 96) + 816LL;
  uint64_t v6 = *(void *)(a2 + 8) + (*(_DWORD *)(a2 + 4) - (v4 + 128));
  unsigned int v7 = 831981571 * (((v9 | 0xE5A776CE) - v9 + (v9 & 0x1A588930)) ^ 0x7C06A6EA);
  uint64_t v10 = *(void *)(a1 + 96) + 0x2A461383296CA564LL;
  uint64_t v11 = v6;
  v9[0] = ((v3 ^ 0x257C9184) + v5) ^ v7;
  v9[1] = v7 + v3 - 277;
  ((void (*)(_DWORD *))(*(void *)(a3 + 8LL * (v3 - 844)) - 8LL))(v9);
  return v12 ^ 0x92B2B92D;
}

void sub_1000A7948()
{
  unint64_t v0 = qword_100273898 ^ (unint64_t)&v1 ^ qword_100273838;
  qword_100273898 = 56757557 * v0 - 0x1C82EEFF48C8B8B7LL;
  qword_100273838 = 56757557 * (v0 ^ 0xE37D1100B7374749LL);
  unsigned int v3 = (3804331
      * (((&v2 | 0x175DD214) - &v2 + (&v2 & 0xE8A22DE8)) ^ 0x6988F7E2)) ^ 0x23A;
  LOBYTE(v0) = 53 * ((53 * v0 + 73) ^ 0x49 ^ qword_100273838);
  int v4 = (char *)*(&off_10025B940
               + (v0 ^ byte_100203E40[byte_1002116E0[v0] ^ 0x85])
               - 133)
     - 4;
  sub_10008DE00((uint64_t)&v2);
  int v4 = (char *)*(&off_10025B940
               + ((53 * ((qword_100273838 + qword_100273898) ^ 0x49)) ^ byte_10020DA60[byte_100208C40[(53 * ((qword_100273838 + qword_100273898) ^ 0x49))] ^ 0xEC])
               + 69)
     - 4;
  unsigned int v3 = (3804331 * ((1141020232 - (&v2 | 0x44029648) + (&v2 | 0xBBFD69B7)) ^ 0xC5284C41)) ^ 0x23A;
  sub_10008DE00((uint64_t)&v2);
  unsigned int v2 = 882 - 1178560073 * ((((2 * &v2) | 0x784A44C) - &v2 + 2084416986) ^ 0x64F7704E);
  LOBYTE(v3) = (73 * ((((2 * &v2) | 0x4C) - &v2 - 38) ^ 0x4E)) ^ 0x56;
  sub_10007B8B4(&v2);
}

uint64_t sub_1000A7B80(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 64) = *(void *)(a2 + 8);
  return 0LL;
}

uint64_t sub_1000A7B98(uint64_t a1)
{
  int v2 = 831981571 * ((a1 + 752367241 - 2 * (a1 & 0x2CD83689)) ^ 0xB579E6AD);
  int v3 = *(_DWORD *)a1 + v2;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = 1804658835 * (*(_DWORD *)(a1 + 44) - v2) + 1543879019;
  unsigned int v9 = 1224239923
     * (((&v11 | 0xF2B632B2) - &v11 + (&v11 & 0xD49CD48)) ^ 0x5CF65);
  int v17 = v3 + v9 + 504208077;
  uint64_t v11 = v7;
  uint64_t v14 = v4;
  uint64_t v15 = v5;
  uint64_t v13 = v6;
  unsigned int v12 = (v8 ^ 0x8DD7B9D3) - v9 + ((2 * v8) & 0x1BAF73A6) + 2074730479;
  uint64_t result = ((uint64_t (*)(uint64_t *))*(&off_10025B940 + (int)(v3 ^ 0xE1F2695A)))(&v11);
  *(_DWORD *)(a1 + 4) = v16;
  return result;
}

uint64_t sub_1000A7CFC(uint64_t result)
{
  unint64_t v1 = 460628867 * ((2 * (result & 0x6088BD7CEA4303EALL) - result - 0x6088BD7CEA4303EBLL) ^ 0xDDE80FED592A7E68LL);
  unint64_t v2 = *(void *)(result + 32) + v1;
  unint64_t v3 = *(void *)(result + 24) - v1;
  BOOL v4 = v3 >= v2;
  BOOL v5 = v3 != v2;
  int v6 = v4;
  if (((*(_DWORD *)result ^ (460628867 * ((2 * (result & 0xEA4303EA) - (_DWORD)result + 364706837) ^ 0x592A7E68))) & 1) != 0) {
    int v7 = v6;
  }
  else {
    int v7 = v5;
  }
  if (v7) {
    int v8 = *(_DWORD *)(result + 20) + 460628867 * ((2 * (result & 0xEA4303EA) - result + 364706837) ^ 0x592A7E68);
  }
  else {
    int v8 = *(_DWORD *)(result + 16) - 460628867 * ((2 * (result & 0xEA4303EA) - result + 364706837) ^ 0x592A7E68);
  }
  *(_DWORD *)(result + _Block_object_dispose(va, 8) = v8 ^ (*(_DWORD *)(result + 12)
                                + 460628867 * ((2 * (result & 0xEA4303EA) - result + 364706837) ^ 0x592A7E68));
  return result;
}

uint64_t sub_1000A7D9C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = 1178560073 * (v8 ^ 0xE7352268);
  int v6 = *(_DWORD *)a1 + 2078219279 * ((-2 - ((a1 | 0xC3B1469C) + (~(_DWORD)a1 | 0x3C4EB963))) ^ 0xE6B42F17) + 231788968;
  int v9 = v6 - v5 + 223;
  unsigned int v10 = 1611372689 - v5;
  uint64_t v12 = v2;
  v8[0] = v4;
  v8[1] = v3;
  uint64_t result = ((uint64_t (*)(void *))*(&off_10025B940 + v6))(v8);
  *(_DWORD *)(a1 + 4) = v11;
  return result;
}

uint64_t sub_1000A7E98(uint64_t result)
{
  unint64_t v1 = 241568881
     * (((result ^ 0x9C42EF4B24AB98A7LL)
       - 2 * ((result ^ 0x9C42EF4B24AB98A7LL) & 0xDC1EF8D758FBB55ELL)
       - 0x23E10728A7044AA2LL) ^ 0x4F09C315AA4129BBLL);
  uint64_t v2 = (_DWORD *)(result + 4);
  unint64_t v3 = *(void *)(result + 16) - v1;
  unint64_t v4 = *(void *)(result + 32) - v1;
  BOOL v5 = (uint64_t)v4 < (uint64_t)v3;
  BOOL v6 = v4 < v3;
  int v7 = v5;
  if (((*(_DWORD *)(result + 40) {
       - 241568881
  }
  else {
    int v8 = v6;
  }
  if (v8) {
    uint64_t v2 = (_DWORD *)result;
  }
  *(_DWORD *)(result + 24) = *(_DWORD *)(result + 44) ^ (241568881
                                                       * (((result ^ 0x24AB98A7)
                                                         - 2 * ((result ^ 0x24AB98A7) & 0x58FBB55E)
                                                         + 1492890974) ^ 0xAA4129BB)) ^ *v2 ^ (241568881
                                                                                             * (((result ^ 0x24AB98A7)
                                                                                               - 2
                                                                                               * ((result ^ 0x24AB98A7) & 0x58FBB55E)
                                                                                               + 1492890974) ^ 0xAA4129BB));
  return result;
}

uint64_t sub_1000A7F38(uint64_t a1)
{
  int v2 = 268847287 * (((a1 | 0x9AE06DE0) - (a1 & 0x9AE06DE0)) ^ 0x654A7CC8);
  int v3 = *(_DWORD *)(a1 + 40) + v2;
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = -1371597181 * (*(_DWORD *)(a1 + 24) + v2) + 1075192136;
  unsigned int v9 = 235795823
     * (((&v11 | 0x5FD02389) - &v11 + (&v11 & 0xA02FDC70)) ^ 0xCB7D6AD0);
  int v16 = v9 ^ (v3 - 1695025580);
  uint64_t v11 = v7;
  unsigned int v12 = v9 + (v8 ^ 0xFFEF5FFF) + ((2 * v8) & 0xFFDEBFFE) + 1863577020;
  uint64_t v17 = v5;
  uint64_t v13 = v6;
  uint64_t v14 = v4;
  uint64_t result = ((uint64_t (*)(uint64_t *))((char *)*(&off_10025B940 + (v3 ^ 0x65081066)) - 12))(&v11);
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = v15;
  return result;
}

uint64_t sub_1000A80A8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 32) = *(void *)(a2 + 8);
  return 0LL;
}

uint64_t sub_1000A80C0(int *a1)
{
  unsigned int v2 = a1[1] - 1178560073 * (((a1 | 0xB64875FC) - (a1 & 0xB64875FC)) ^ 0x517D5794);
  uint64_t result = ((uint64_t (*)(char *, char *))*(&off_10025B940 + (int)(v2 + 1501686068)))( (char *)*(&off_10025B940 + (int)(v2 ^ 0xA67E17FA)) - 8,  (char *)*(&off_10025B940 + (int)(v2 + 1501685889)) - 8);
  int v4 = *(_DWORD *)*(&off_10025B940 + (int)(v2 ^ 0xA67E17FB));
  if ((_DWORD)result) {
    int v4 = -528097786;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_1000A817C(uint64_t a1)
{
  int v2 = 1224239923 * ((-2 - ((a1 | 0xB4CFA43B) + (~(_DWORD)a1 | 0x4B305BC4))) ^ 0xB983A613);
  int v3 = *(_DWORD *)(a1 + 4) ^ v2;
  uint64_t v4 = *(void *)(a1 + 16);
  unsigned int v5 = -1633735639 * (*(_DWORD *)(a1 + 8) ^ v2) - ((1027496018 * (*(_DWORD *)(a1 + 8) ^ v2) - 932271984) & 0x9E1D191E);
  unsigned int v6 = (((2 * &v9) | 0xD9CF7000) - &v9 + 320358400) ^ 0x1E5445D7;
  unsigned int v7 = (((1478288729 * (*(_DWORD *)a1 ^ v2) - 1943147056) ^ 0xFEFEEED8)
      + 627030016
      + ((2 * (1478288729 * (*(_DWORD *)a1 ^ v2) - 1943147056)) & 0xFDFDDDB0)) ^ (1224239923 * v6);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v13 = v4;
  int v14 = (1224239923 * v6) ^ (v3 - 368399010);
  unsigned int v11 = v7;
  int v12 = v5 - 1224239923 * v6 + 860217559;
  uint64_t result = ((uint64_t (*)(int *))*(&off_10025B940 + (v3 ^ 0x15F55725)))(&v9);
  *(_DWORD *)(a1 + 32) = v9;
  return result;
}

void sub_1000A8318(_DWORD *a1)
{
  uint64_t v1 = *(void *)((char *)*(&off_10025B940
                           + (int)((*a1 ^ (69008221
                                         * ((((2 * (_DWORD)a1) | 0xE6169F4E) - (_DWORD)a1 + 217362521) ^ 0x20A91DAD)))
                                 + 2024873151))
                 - 4);
  unsigned int v3 = (235795823 * (((&v2 | 0x234F2E8E) - (&v2 & 0x234F2E8E)) ^ 0xB7E267D7)) ^ ((*a1 ^ (69008221 * ((((2 * (_DWORD)a1) | 0xE6169F4E) - (_DWORD)a1 + 217362521) ^ 0x20A91DAD))) + 2024873769);
  uint64_t v2 = v1;
  sub_1000A765C((uint64_t)&v2);
}

_BYTE *sub_1000A8404(_BYTE *result, char a2, unint64_t a3)
{
  unint64_t v3 = -(int)result & 7;
  if (v3 > a3) {
    LODWORD(v3) = a3;
  }
  switch((int)v3)
  {
    case 1:
      goto LABEL_10;
    case 2:
      goto LABEL_9;
    case 3:
      goto LABEL_8;
    case 4:
      goto LABEL_7;
    case 5:
      goto LABEL_6;
    case 6:
      goto LABEL_5;
    case 7:
      *result++ = a2;
LABEL_5:
      *result++ = a2;
LABEL_6:
      *result++ = a2;
LABEL_7:
      *result++ = a2;
LABEL_8:
      *result++ = a2;
LABEL_9:
      *result++ = a2;
LABEL_10:
      *result++ = a2;
      break;
    default:
      break;
  }

  unint64_t v4 = a3 - v3;
  unint64_t v6 = v4;
  unint64_t v5 = v4 & 7;
  switch(v6)
  {
    case 0uLL:
      return result;
    case 1uLL:
      goto LABEL_20;
    case 2uLL:
      goto LABEL_19;
    case 3uLL:
      goto LABEL_18;
    case 4uLL:
      goto LABEL_17;
    case 5uLL:
      goto LABEL_16;
    case 6uLL:
      goto LABEL_15;
    case 7uLL:
      *result++ = a2;
LABEL_15:
      *result++ = a2;
LABEL_16:
      *result++ = a2;
LABEL_17:
      *result++ = a2;
LABEL_18:
      *result++ = a2;
LABEL_19:
      *result++ = a2;
LABEL_20:
      *uint64_t result = a2;
      break;
    default:
      uint64_t result = (_BYTE *)((uint64_t (*)(void))((char *)&loc_1000A8494 + 4 * byte_100208E47[(v5 >> 3) & 7]))();
      break;
  }

  return result;
}

uint64_t sub_1000A84F8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  return 0LL;
}

uint64_t sub_1000A8510(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 24);
  return 0LL;
}

uint64_t XtCqEf5X(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = (unint64_t)&v6[qword_100273838 ^ qword_100273890];
  qword_100273890 = 56757557 * ((void)&STACK[0x1C82EEFF48C8B8B7] + (qword_100273838 ^ qword_100273890));
  qword_100273838 = 56757557 * (v4 ^ 0xE37D1100B7374749LL);
  unsigned int v7 = 963 - 241568881 * (&v7 ^ 0xD6110442);
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v8 = a1;
  uint64_t v9 = a4;
  ((void (*)(unsigned int *))((char *)*(&off_10025B940
                                                 + ((53 * ((qword_100273838 + qword_100273890) ^ 0x49)) ^ byte_100203E40[byte_1002116E0[(53 * ((qword_100273838 + qword_100273890) ^ 0x49))] ^ 0x42])
                                                 - 159)
                                       - 8))(&v7);
  return v10 ^ 0x1F7A84B8u;
}

uint64_t sub_1000A8648(uint64_t result)
{
  uint64_t v1 = 235795823 * (result ^ 0x8B0BAFE94AD4959LL);
  unint64_t v2 = *(void *)(result + 32) ^ v1;
  unint64_t v3 = *(void *)(result + 24) + v1;
  BOOL v4 = v2 > v3;
  BOOL v5 = v2 == v3;
  int v6 = v4;
  else {
    int v7 = v5;
  }
  if (v7) {
    uint64_t v8 = (_DWORD *)result;
  }
  else {
    uint64_t v8 = (_DWORD *)(result + 8);
  }
  *(_DWORD *)(result + 4) = (*v8 + v1) ^ (*(_DWORD *)(result + 20) + v1);
  return result;
}

uint64_t sub_1000A86B8(uint64_t result)
{
  unint64_t v1 = 69008221
     * (((result | 0xD11098B7B4482233LL) - (result | 0x2EEF67484BB7DDCCLL) + 0x2EEF67484BB7DDCCLL) ^ 0x838CDE5467EA7039LL);
  int v2 = *(_DWORD *)(result + 28) - v1;
  uint64_t v3 = *(void *)(result + 16);
  unint64_t v4 = v3 + v1;
  uint64_t v5 = *(void *)(result + 32);
  unint64_t v6 = v5 + v1;
  int v7 = *(_DWORD *)(result + 24) + v1;
  int v8 = *(_DWORD *)(result + 4) ^ v1;
  int v9 = *(_DWORD *)(result + 8) - v1;
  BOOL v10 = v3 == v5;
  BOOL v11 = v4 > v6;
  if ((v8 & 1) != 0) {
    BOOL v10 = v11;
  }
  if (!v10) {
    int v2 = v7;
  }
  *(_DWORD *)uint64_t result = v2 ^ v9;
  return result;
}

void sub_1000A875C()
{
  qword_100273848 = 56757557 * ((unint64_t)&v0[qword_100273848 + qword_100273838] ^ 0xE37D1100B7374749LL);
  qword_100273838 = qword_100273848;
  uint64_t v3 = (uint64_t)*(&off_10025B940
  int v2 = (3804331 * ((v1 + 117650343 - 2 * ((unint64_t)v1 & 0x70333A7)) ^ 0x79D61651)) ^ 0x23A;
  sub_10008DE00((uint64_t)v1);
}

uint64_t sub_1000A887C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = 7;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 80) = *(void *)(a2 + 8);
  return 0LL;
}

uint64_t sub_1000A889C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  int v3 = *(_DWORD *)a1 + 235795823 * (a1 ^ 0x94AD4959) - 2138963172;
  unsigned int v6 = v3
  v5[0] = v2;
  v5[1] = v1;
  return ((uint64_t (*)(void *))((char *)*(&off_10025B940 + v3) - 4))(v5);
}

uint64_t DERDecodeItem(uint64_t a1, unint64_t *a2)
{
  return DERDecodeItemPartialBufferGetLength(a1, a2, 0LL);
}

uint64_t DERDecodeItemPartialBufferGetLength(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *(void *)(result + 8);
  if (v3 < 2) {
    return 3LL;
  }
  unint64_t v4 = *(_BYTE **)result;
  if (*(void *)result == -1LL) {
    goto LABEL_68;
  }
  uint64_t v5 = &v4[v3];
  unsigned int v6 = v4 + 1;
  unint64_t v7 = v3 - 1;
  unint64_t v8 = *v4 & 0x1F;
  if ((*v4 & 0x1F) != 0x1F)
  {
    uint64_t v12 = v4 + 1;
LABEL_20:
    *a2 = v8 | ((unint64_t)(*v4 & 0xE0) << 56);
    if (v12 != (char *)-1LL)
    {
      if (v12 >= v5 || v12 < v4) {
        goto LABEL_69;
      }
      int v14 = v12 + 1;
      unint64_t v15 = *v12;
      unint64_t v16 = v7 - 1;
      if ((*v12 & 0x80000000) == 0)
      {
        if (a3 || v16 >= v15)
        {
          if (v16 >= v15) {
            unint64_t v17 = *v12;
          }
          else {
            unint64_t v17 = v7 - 1;
          }
          BOOL v10 = v5 >= v14;
          unint64_t v18 = v5 - v14;
          if (v10 && v4 <= v14 && v17 <= v18)
          {
            a2[1] = (unint64_t)v14;
            a2[2] = v17;
            if (!a3) {
              return 0LL;
            }
LABEL_34:
            uint64_t result = 0LL;
            *a3 = v15;
            return result;
          }

LABEL_69:
          __break(0x5519u);
LABEL_70:
          __break(0x5515u);
          return result;
        }

        return 3LL;
      }

      unint64_t v19 = v15 & 0x7F;
      if ((v15 & 0x7F) > 8) {
        return 3LL;
      }
      if ((v15 & 0x7F) == 0 || v16 < v19) {
        return 3LL;
      }
      if (v14 >= v5 || v14 < v4) {
        goto LABEL_69;
      }
      if (!*v14) {
        return 3LL;
      }
      unint64_t v15 = 0LL;
      uint64_t v21 = (v19 - 1);
      unint64_t v22 = v7 - v21 - 2;
      unint64_t v23 = (unint64_t)&v12[v21 + 2];
      while (v14 != (_BYTE *)-1LL)
      {
        if (v14 >= v5) {
          goto LABEL_69;
        }
        BOOL v10 = v16-- != 0;
        if (!v10) {
          goto LABEL_70;
        }
        unsigned int v24 = *v14++;
        unint64_t v15 = (v15 << 8) | v24;
        LODWORD(v19) = v19 - 1;
        if (!(_DWORD)v19)
        {
          if (a3) {
            BOOL v25 = 0;
          }
          else {
            BOOL v25 = v15 > v22;
          }
          char v26 = v25;
          uint64_t result = 3LL;
          if (v15 < 0x80 || (v26 & 1) != 0) {
            return result;
          }
          if (v15 >= v22) {
            unint64_t v27 = v22;
          }
          else {
            unint64_t v27 = v15;
          }
          BOOL v10 = (unint64_t)v5 >= v23;
          unsigned int v28 = &v5[-v23];
          a2[1] = v23;
          a2[2] = v27;
          if (a3) {
            goto LABEL_34;
          }
          return 0LL;
        }
      }
    }

uint64_t DERDecodeItemPartialBuffer(uint64_t result, unint64_t *a2, int a3)
{
  unint64_t v3 = *(void *)(result + 8);
  if (v3 < 2) {
    return 3LL;
  }
  unint64_t v4 = *(_BYTE **)result;
  if (*(void *)result == -1LL) {
    goto LABEL_54;
  }
  uint64_t v5 = &v4[v3];
  unsigned int v6 = v4 + 1;
  unint64_t v7 = v3 - 1;
  unint64_t v8 = *v4 & 0x1F;
  if ((*v4 & 0x1F) != 0x1F)
  {
    uint64_t v12 = v4 + 1;
LABEL_20:
    *a2 = v8 | ((unint64_t)(*v4 & 0xE0) << 56);
    if (v12 != (char *)-1LL)
    {
      if (v12 >= v5 || v12 < v4) {
        goto LABEL_55;
      }
      int v14 = v12 + 1;
      unint64_t v15 = *v12;
      unint64_t v16 = v7 - 1;
      if ((*v12 & 0x80000000) == 0)
      {
        BOOL v17 = v16 < v15 && a3 == 0;
        unint64_t v18 = (unint64_t)(v12 + 1);
        if (v17) {
          return 3LL;
        }
LABEL_28:
        if (v15 > (~v18 & 0x7FFFFFFFFFFFFFFFLL)) {
          return 7LL;
        }
        if (v18 <= v18 + v15)
        {
          uint64_t result = 0LL;
          a2[1] = v18;
          a2[2] = v15;
          return result;
        }

        goto LABEL_55;
      }

      unint64_t v19 = v15 & 0x7F;
      if ((v15 & 0x7F) > 8) {
        return 3LL;
      }
      if ((v15 & 0x7F) == 0 || v16 < v19) {
        return 3LL;
      }
      if (v14 >= v5 || v14 < v4)
      {
LABEL_55:
        __break(0x5519u);
LABEL_56:
        __break(0x5515u);
        return result;
      }

      if (!*v14) {
        return 3LL;
      }
      unint64_t v15 = 0LL;
      uint64_t v21 = (v19 - 1);
      unint64_t v22 = v7 - v21 - 2;
      unint64_t v18 = (unint64_t)&v12[v21 + 2];
      while (v14 != (_BYTE *)-1LL)
      {
        if (v14 >= v5) {
          goto LABEL_55;
        }
        BOOL v10 = v16-- != 0;
        if (!v10) {
          goto LABEL_56;
        }
        unsigned int v23 = *v14++;
        unint64_t v15 = (v15 << 8) | v23;
        LODWORD(v19) = v19 - 1;
        if (!(_DWORD)v19)
        {
          if (v15 <= v22) {
            char v24 = 1;
          }
          else {
            char v24 = a3;
          }
          uint64_t result = 3LL;
          if (v15 >= 0x80 && (v24 & 1) != 0) {
            goto LABEL_28;
          }
          return result;
        }
      }
    }

uint64_t DERParseBitString(uint64_t result, unint64_t *a2, _BYTE *a3)
{
  *a3 = 0;
  *a2 = 0LL;
  a2[1] = 0LL;
  if (!*(void *)(result + 8)) {
    return 3LL;
  }
  unsigned int v3 = **(unsigned __int8 **)result;
  *a3 = v3;
  uint64_t v4 = *(void *)(result + 8);
  if (v4 != 1)
  {
    if (v3 <= 7)
    {
      unint64_t v5 = v4 - 1;
      if (!v4)
      {
LABEL_20:
        __break(0x5515u);
        goto LABEL_21;
      }

      unint64_t v6 = *(void *)result;
      unint64_t v7 = *(void *)result + v4;
      unint64_t v8 = (unsigned __int8 *)(*(void *)result + v5);
      if ((unint64_t)v8 >= v7 || (unint64_t)v8 < v6)
      {
LABEL_19:
        __break(0x5519u);
        goto LABEL_20;
      }

      if (((0xFFu >> (8 - v3)) & *v8) == 0)
      {
        if (v6 == -1LL)
        {
LABEL_21:
          __break(0x5513u);
          return result;
        }

        unint64_t v10 = v6 + 1;
        if (v6 + 1 <= v7 && v6 <= v10)
        {
          uint64_t result = 0LL;
          *a2 = v10;
          a2[1] = v5;
          return result;
        }

        goto LABEL_19;
      }
    }

    return 3LL;
  }

  if (v3) {
    return 3LL;
  }
  else {
    return 0LL;
  }
}

uint64_t DERParseBoolean(unsigned __int8 **a1, BOOL *a2)
{
  int v2 = **a1;
  if (v2 != 255 && v2 != 0) {
    return 3LL;
  }
  uint64_t result = 0LL;
  *a2 = v2 != 0;
  return result;
}

uint64_t DERParseBooleanWithDefault(unsigned __int8 **a1, BOOL a2, BOOL *a3)
{
  unsigned int v3 = a1[1];
  if (!v3) {
    goto LABEL_9;
  }
  if (v3 == (unsigned __int8 *)1)
  {
    int v4 = **a1;
    if (v4 == 255 || v4 == 0)
    {
      a2 = v4 != 0;
LABEL_9:
      uint64_t result = 0LL;
      *a3 = a2;
      return result;
    }
  }

  return 3LL;
}

uint64_t DERParseInteger(char **a1, _DWORD *a2)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = DERParseInteger64(a1, &v4);
  if (!(_DWORD)result)
  {
    if (HIDWORD(v4))
    {
      return 7LL;
    }

    else
    {
      uint64_t result = 0LL;
      *a2 = v4;
    }
  }

  return result;
}

uint64_t DERParseInteger64(char **a1, unint64_t *a2)
{
  unint64_t v2 = (unint64_t)a1[1];
  if (!v2) {
    return 3LL;
  }
  unsigned int v3 = (unsigned __int8 *)*a1;
  if (**a1 < 0) {
    return 3LL;
  }
  if (**a1)
  {
    if (v2 > 8) {
      return 7LL;
    }
    goto LABEL_10;
  }

  if (v2 >= 2)
  {
    if (v2 > 9) {
      return 7LL;
    }
  }

uint64_t DERDecodeSeqInit(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = DERDecodeItemPartialBufferGetLength(a1, v8, 0LL);
  if (!(_DWORD)result)
  {
    unint64_t v6 = v8[0];
    *a2 = v8[0];
    if (v6 >> 1 == 0x1000000000000008LL)
    {
      if (__CFADD__(v8[1], v8[2]))
      {
        __break(0x5513u);
      }

      else
      {
        unint64_t v7 = v8[1] + v8[2];
        if (v8[1] <= v8[1] + v8[2])
        {
          uint64_t result = 0LL;
          *a3 = v8[1];
          a3[1] = v7;
          return result;
        }
      }

      __break(0x5519u);
    }

    else
    {
      return 2LL;
    }
  }

  return result;
}

unint64_t *DERDecodeSeqContentInit(unint64_t *result, unint64_t *a2)
{
  unint64_t v2 = *result;
  unint64_t v3 = result[1];
  if (__CFADD__(*result, v3))
  {
    __break(0x5513u);
  }

  else
  {
    unint64_t v4 = v2 + v3;
    if (v2 <= v4)
    {
      *a2 = v2;
      a2[1] = v4;
      return 0LL;
    }
  }

  __break(0x5519u);
  return result;
}

uint64_t DERDecodeSeqNext(unint64_t *a1, unint64_t *a2)
{
  v10[0] = 0LL;
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  if (*a1 >= v3) {
    return 1LL;
  }
  v10[0] = *a1;
  v10[1] = v3 - v2;
  uint64_t result = DERDecodeItemPartialBufferGetLength((uint64_t)v10, a2, 0LL);
  if (!(_DWORD)result)
  {
    unint64_t v8 = a2[1];
    unint64_t v7 = a2[2];
    if (!__CFADD__(v8, v7))
    {
      unint64_t v9 = v8 + v7;
      if (v9 <= a1[1] && *a1 <= v9)
      {
        uint64_t result = 0LL;
        *a1 = v9;
        return result;
      }

      __break(0x5519u);
    }

    __break(0x5513u);
  }

  return result;
}

uint64_t DERParseSequenceToObject( uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  uint64_t result = DERDecodeItemPartialBufferGetLength(a1, v12, 0LL);
  if (!(_DWORD)result)
  {
    if (v12[0] == 0x2000000000000010LL) {
      return DERParseSequenceContentToObject(&v12[1], a2, a3, a4, a5, a6);
    }
    else {
      return 2LL;
    }
  }

  return result;
}

uint64_t DERParseSequenceContentToObject( unint64_t *a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  unint64_t v32 = 0LL;
  if (a6)
  {
    if (a6 > a5) {
      goto LABEL_59;
    }
    bzero((void *)a4, a6);
  }

  unint64_t v10 = *a1;
  unint64_t v11 = a1[1];
  if (__CFADD__(*a1, v11)) {
    goto LABEL_58;
  }
  unint64_t v12 = v10 + v11;
  if (v10 > v12) {
LABEL_59:
  }
    __break(0x5519u);
  unint64_t v32 = *a1;
  unint64_t v33 = v12;
  if (a2)
  {
    unsigned __int16 v13 = 0;
    int v29 = (char *)(a4 + a5);
    while (1)
    {
      memset(v31, 170, sizeof(v31));
      unint64_t v15 = v32;
      unint64_t v14 = v33;
      uint64_t result = DERDecodeSeqNext(&v32, v31);
      if ((_DWORD)result) {
        break;
      }
      if (a2 <= v13) {
        return 2LL;
      }
      while (1)
      {
        unsigned __int16 v17 = v13;
        __int16 v18 = *(_WORD *)(a3 + 24LL * v13 + 16);
        if ((v18 & 2) != 0 || v31[0] == *(void *)(a3 + 24LL * v13 + 8)) {
          break;
        }
        uint64_t result = 2LL;
        if ((v18 & 1) != 0)
        {
          ++v13;
        }

        return result;
      }

      if ((v18 & 4) == 0)
      {
        unint64_t v19 = *(void *)(a3 + 24LL * v13);
        if (v19 > 0xFFFFFFFFFFFFFFEFLL || v19 + 16 > a5) {
          return 7LL;
        }
        if (v19 > ~a4) {
          goto LABEL_58;
        }
        uint64_t v21 = (char *)(a4 + v19);
        *(_OWORD *)uint64_t v21 = *(_OWORD *)&v31[1];
        if ((v18 & 8) != 0)
        {
          if (v15 >= v31[1])
          {
            if (v21 + 16 <= v29 && v14 >= v15 && *((void *)v21 + 1) <= v14 - v15)
            {
              *(void *)uint64_t v21 = v15;
              return 3LL;
            }

            goto LABEL_59;
          }

          if (v21 + 16 > v29) {
            goto LABEL_59;
          }
          uint64_t v23 = *((void *)v21 + 1);
          unint64_t v24 = v23 + v31[1] - v15;
          if (__CFADD__(v23, v31[1] - v15))
          {
            __break(0x5500u);
            return result;
          }

          if (v14 < v15 || v24 > v14 - v15) {
            goto LABEL_59;
          }
          *(void *)uint64_t v21 = v15;
          *((void *)v21 + 1) = v24;
        }
      }

      ++v13;
      if (a2 == (unsigned __int16)(v17 + 1))
      {
        if (!__CFADD__(v31[1], v31[2]))
        {
          unint64_t v28 = a1[1];
          if (!__CFADD__(*a1, v28))
          {
            unint64_t v10 = v31[1] + v31[2];
            unint64_t v12 = *a1 + v28;
            goto LABEL_47;
          }
        }

LABEL_58:
        __break(0x5513u);
        goto LABEL_59;
      }

      if (a2 <= (unsigned __int16)(v17 + 1))
      {
        unint64_t v10 = v32;
        unint64_t v12 = v33;
        goto LABEL_47;
      }
    }

    if ((_DWORD)result == 1)
    {
      if (a2 <= v13)
      {
        return 0LL;
      }

      else
      {
        BOOL v25 = (__int16 *)(a3 + 24LL * v13 + 16);
        unint64_t v26 = a2 - (unint64_t)v13;
        uint64_t result = 0LL;
        while (1)
        {
          __int16 v27 = *v25;
          v25 += 12;
          if ((v27 & 1) == 0) {
            break;
          }
          if (!--v26) {
            return result;
          }
        }

        return 5LL;
      }
    }
  }

  else
  {
LABEL_47:
    if (v10 == v12) {
      return 0LL;
    }
    else {
      return 3LL;
    }
  }

  return result;
}

uint64_t DERParseSequence(uint64_t result, unsigned int a2, uint64_t a3, unint64_t a4, size_t a5)
{
  if ((a4 | 0x7FFFFFFFFFFFFFFFLL) >= a4) {
    return DERParseSequenceToObject(result, a2, a3, a4, ~a4 & 0x7FFFFFFFFFFFFFFFLL, a5);
  }
  __break(0x5519u);
  return result;
}

unint64_t *DERParseSequenceContent( unint64_t *result, unsigned int a2, uint64_t a3, unint64_t a4, size_t a5)
{
  if ((a4 | 0x7FFFFFFFFFFFFFFFLL) >= a4) {
    return (unint64_t *)DERParseSequenceContentToObject(result, a2, a3, a4, ~a4 & 0x7FFFFFFFFFFFFFFFLL, a5);
  }
  __break(0x5519u);
  return result;
}

uint64_t DERDecodeSequenceWithBlock(uint64_t a1, uint64_t a2)
{
  uint64_t result = DERDecodeItemPartialBufferGetLength(a1, v4, 0LL);
  if (!(_DWORD)result)
  {
    if (v4[0] - 0x2000000000000012LL >= 0xFFFFFFFFFFFFFFFELL) {
      return DERDecodeSequenceContentWithBlock(&v4[1], a2);
    }
    else {
      return 2LL;
    }
  }

  return result;
}

uint64_t DERDecodeSequenceContentWithBlock(unint64_t *a1, uint64_t a2)
{
  v9[0] = 0LL;
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  if (__CFADD__(*a1, v3))
  {
    __break(0x5513u);
LABEL_13:
    __break(0x5519u);
  }

  unint64_t v4 = v2 + v3;
  if (v2 > v4) {
    goto LABEL_13;
  }
  v9[0] = *a1;
  v9[1] = v4;
  memset(v8, 170, sizeof(v8));
  char v7 = 0;
  while (1)
  {
    LODWORD(result) = DERDecodeSeqNext(v9, v8);
    if ((_DWORD)result) {
      break;
    }
    LODWORD(result) = (*(uint64_t (**)(uint64_t, unint64_t *, char *))(a2 + 16))(a2, v8, &v7);
    if ((_DWORD)result) {
      break;
    }
    if (v7) {
      return 0LL;
    }
  }

  else {
    return result;
  }
}

void *aks_params_create(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = calloc(8uLL, 1uLL);
  unint64_t v5 = v4;
  if (v4)
  {
    void *v4 = 0LL;
    if (a1)
    {
      if (encode_list_merge_dict((uint64_t)v4, a1, a1 + a2))
      {
        memset_s(v5, 8uLL, 0, 8uLL);
        free(v5);
        return 0LL;
      }
    }
  }

  return v5;
}

void *_params_get_der_key(int a1, int a2)
{
  switch(a1)
  {
    case 1:
      unint64_t v2 = (void **)&der_key_access_groups;
      goto LABEL_28;
    case 2:
      unint64_t v2 = (void **)&der_key_external_data;
      goto LABEL_28;
    case 3:
      unint64_t v2 = (void **)&der_key_acm_handle;
      goto LABEL_28;
    case 4:
      unint64_t v2 = (void **)&der_key_salt;
      goto LABEL_28;
    case 5:
      unint64_t v2 = (void **)&der_key_data;
      goto LABEL_28;
    case 6:
      unint64_t v2 = (void **)&der_key_ecdh_seed;
      goto LABEL_28;
    case 7:
      unint64_t v2 = (void **)&der_key_ecdh_iv;
      goto LABEL_28;
    case 8:
      unint64_t v4 = (void **)&der_key_raw_output;
      goto LABEL_30;
    case 9:
      unint64_t v4 = (void **)&der_key_options;
      goto LABEL_30;
    case 10:
      unint64_t v2 = (void **)&der_key_shared_info;
      goto LABEL_28;
    case 11:
      unint64_t v2 = (void **)&der_key_shared_info2;
      goto LABEL_28;
    case 12:
      unint64_t v2 = (void **)&der_key_transcode_shared_info;
      goto LABEL_28;
    case 13:
      unint64_t v2 = (void **)&der_key_transcode_shared_info2;
      goto LABEL_28;
    case 14:
      unint64_t v2 = (void **)&der_key_transcode_ecdh_seed;
      goto LABEL_28;
    case 15:
      unint64_t v2 = (void **)&der_key_persona_uuid;
      goto LABEL_28;
    case 16:
      unint64_t v4 = (void **)&der_key_sub_key_type;
      goto LABEL_30;
    case 17:
      unint64_t v2 = (void **)&der_key_system_key_client_seed;
      goto LABEL_28;
    case 18:
      unint64_t v4 = (void **)&der_key_system_key_options;
      goto LABEL_30;
    case 19:
      unint64_t v5 = der_key_system_key_no_img4;
      BOOL v6 = a2 == 3;
      goto LABEL_31;
    case 20:
      unint64_t v4 = (void **)&der_key_remote_session_signing_key_type;
      goto LABEL_30;
    case 21:
      unint64_t v2 = (void **)&der_key_remote_session_signing_key_certificate;
      goto LABEL_28;
    case 22:
      unint64_t v4 = (void **)&der_key_gid_ref_key_options;
      goto LABEL_30;
    case 23:
      unint64_t v4 = (void **)&der_key_pka_flags;
      goto LABEL_30;
    case 24:
      unint64_t v2 = (void **)&der_key_volume_uuid;
      goto LABEL_28;
    case 25:
      unint64_t v2 = (void **)&der_key_seed;
LABEL_28:
      unint64_t v5 = *v2;
      BOOL v6 = a2 == 2;
      goto LABEL_31;
    case 26:
      unint64_t v4 = (void **)&der_key_test_flags;
LABEL_30:
      unint64_t v5 = *v4;
      BOOL v6 = a2 == 1;
LABEL_31:
      if (v6) {
        uint64_t result = v5;
      }
      else {
        uint64_t result = 0LL;
      }
      break;
    default:
      uint64_t result = 0LL;
      break;
  }

  return result;
}

uint64_t aks_params_set_number(void *a1, int a2, uint64_t *a3)
{
  uint64_t v5 = 3758097090LL;
  der_key = (unsigned __int8 *)_params_get_der_key(a2, 1);
  if (der_key)
  {
    uint64_t v7 = (uint64_t)der_key;
    if (!encode_list_remove_key(a1, der_key)
      && (!a3 || !encode_list_add_number(a1, v7, *a3)))
    {
      return 0LL;
    }
  }

  return v5;
}

uint64_t aks_params_set_data(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 3758097090LL;
  der_key = (unsigned __int8 *)_params_get_der_key(a2, 2);
  if (!der_key) {
    return v8;
  }
  uint64_t v10 = (uint64_t)der_key;
  if (!a3) {
    return 0LL;
  }
  uint64_t v11 = 0x2000000000000010LL;
  if (a2 != 1)
  {
    if (a2 == 2)
    {
      uint64_t v11 = 0x2000000000000011LL;
      goto LABEL_7;
    }

    return 0LL;
  }

uint64_t aks_params_free(void ***a1)
{
  uint64_t result = 3758097090LL;
  if (a1)
  {
    unint64_t v3 = *a1;
    if (*a1)
    {
      *a1 = 0LL;
      encode_list_free(v3);
      memset_s(v3, 8uLL, 0, 8uLL);
      free(v3);
      return 0LL;
    }
  }

  return result;
}

uint64_t aks_ref_key_create(int a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5, void ***a6)
{
  uint64_t v12 = 3758097090LL;
  unsigned __int16 v13 = der_key_op_create;
  unint64_t v14 = (void **)calloc(8uLL, 1uLL);
  _BYTE *v14 = 0LL;
  encode_list_add_key(v14, (uint64_t)der_key_op, (uint64_t)v13);
  unint64_t v26 = 0LL;
  size_t v27 = 0LL;
  unint64_t v24 = 0LL;
  size_t v25 = 0LL;
  if (!a6) {
    goto LABEL_14;
  }
  uint64_t v15 = calloc(0x50uLL, 1uLL);
  uint64_t v23 = v15;
  if (!v15)
  {
    uint64_t v12 = 3758604298LL;
    goto LABEL_14;
  }

  unint64_t v16 = (void **)v15;
  memset_s(v15, 0x50uLL, 0, 0x50uLL);
  if (a4 && encode_list_merge_dict((uint64_t)v14, a4, a4 + a5)
    || encode_list_add_number(v14, (uint64_t)der_key_keybag_class, a2)
    || encode_list_add_number(v14, (uint64_t)der_key_type, a3)
    || encode_list_dict(v14, &v26, &v27))
  {
LABEL_17:
    aks_ref_key_free((uint64_t *)&v23);
    goto LABEL_14;
  }

  uint64_t v17 = _aks_operation(a1, v26, v27, &v24, &v25);
  if ((_DWORD)v17)
  {
    uint64_t v12 = v17;
    goto LABEL_17;
  }

  __int16 v18 = (char *)v24;
  size_t v19 = v25;
  void *v16 = v24;
  v16[1] = (void *)v19;
  *((_DWORD *)v16 + 10) = a1;
  v16[2] = &v18[v19];
  uint64_t v21 = 0LL;
  uint64_t v22 = 0LL;
  uint64_t v12 = 0LL;
  *a6 = v16;
  unint64_t v24 = 0LL;
  size_t v25 = 0LL;
LABEL_14:
  encode_list_free(v14);
  memset_s(v14, 8uLL, 0, 8uLL);
  free(v14);
  memset_s(v26, v27, 0, v27);
  free(v26);
  memset_s(v24, v25, 0, v25);
  free(v24);
  return v12;
}

uint64_t aks_ref_key_free(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    return 3758097090LL;
  }
  *a1 = 0LL;
  if (*(void *)v1)
  {
    memset_s(*(void **)v1, *(void *)(v1 + 8), 0, *(void *)(v1 + 8));
    free(*(void **)v1);
  }

  unint64_t v2 = *(void **)(v1 + 48);
  if (v2)
  {
    memset_s(v2, *(void *)(v1 + 56), 0, *(void *)(v1 + 56));
    free(*(void **)(v1 + 48));
  }

  unint64_t v3 = *(void **)(v1 + 64);
  if (v3)
  {
    memset_s(v3, *(void *)(v1 + 72), 0, *(void *)(v1 + 72));
    free(*(void **)(v1 + 64));
  }

  memset_s((void *)v1, 0x50uLL, 0, 0x50uLL);
  free((void *)v1);
  return 0LL;
}

uint64_t aks_ref_key_create_with_blob(int a1, const void *a2, size_t a3, uint64_t *a4)
{
  uint64_t v4 = 3758097090LL;
  if (a2)
  {
    if (a3)
    {
      if (der_get_sizeof((uint64_t)a2, (uint64_t)a2 + a3) == a3)
      {
        uint64_t v4 = 3758604298LL;
        unint64_t v9 = calloc(0x50uLL, 1uLL);
        uint64_t v12 = v9;
        if (v9)
        {
          uint64_t v10 = (uint64_t)v9;
          memset_s(v9, 0x50uLL, 0, 0x50uLL);
          *(_DWORD *)(v10 + 40) = a1;
          if (_set_blob(v10, a2, a3))
          {
            aks_ref_key_free((uint64_t *)&v12);
          }

          else
          {
            uint64_t v4 = 0LL;
            *a4 = v10;
          }
        }
      }
    }
  }

  return v4;
}

uint64_t _aks_operation(int a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a2)
    {
      mach_port_t v11 = aks_client_connection;
      uint64_t v12 = 3758097090LL;
      if (der_get_sizeof((uint64_t)a2, (uint64_t)a2 + a3) == a3)
      {
        bzero(__src, 0x8000uLL);
        size_t __count = 0x8000LL;
        uint64_t input = a1;
        uint64_t v12 = IOConnectCallMethod(v11, 0x2Bu, &input, 1u, a2, a3, 0LL, 0LL, __src, &__count);
        if (!(_DWORD)v12 && a4 && a5)
        {
          unsigned __int16 v13 = calloc(__count, 1uLL);
          *a4 = v13;
          if (v13)
          {
            memcpy(v13, __src, __count);
            uint64_t v12 = 0LL;
            *a5 = __count;
          }

          else
          {
            uint64_t v12 = 3758097085LL;
          }
        }
      }
    }

    else
    {
      uint64_t v12 = 3758097090LL;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_aks_operation",  ":",  457,  "",  0,  "",  "");
    uint64_t v12 = 3758097084LL;
  }

  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  return v12;
}

uint64_t _set_blob(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  if (*(void *)a1)
  {
    memset_s(*(void **)a1, *(void *)(a1 + 8), 0, *(void *)(a1 + 8));
    free(*(void **)a1);
    *(void *)a1 = 0LL;
    *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  }

  BOOL v6 = calloc(a3, 1uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a3;
  if (!v6) {
    return 3758604298LL;
  }
  memcpy(v6, a2, a3);
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void *)a1 + *(void *)(a1 + 8);
  *(void *)(a1 + 16) = v8;
  if ((der_dict_find_value((uint64_t)der_key_external_data, &v10, &v11, *(void *)a1, *(void *)(a1 + 16)) & 1) != 0
    || (uint64_t result = der_dict_find_value((uint64_t)der_key_auth_data, &v10, &v11, *(void *)a1, *(void *)(a1 + 16)),
        (_DWORD)result))
  {
    uint64_t result = 0LL;
    *(void *)(a1 + 24) = v10;
  }

  return result;
}

uint64_t _get_merged_params(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 3758604298LL;
  if (a1)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if ((!v8 || !encode_list_merge_dict((uint64_t)a2, v8, v8 + *(void *)(a1 + 56)))
      && (!a3 || !encode_list_merge_dict((uint64_t)a2, a3, a3 + a4)))
    {
      encode_list_remove_key(a2, (unsigned __int8 *)der_key_external_data);
      return 0LL;
    }
  }

  return v4;
}

uint64_t aks_ref_key_get_type(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    return 0LL;
  }
  uint64_t v3 = 0LL;
  uint64_t v4 = 0LL;
  uint64_t result = der_dict_find_value((uint64_t)der_key_type, &v3, &v4, v1, *(void *)(a1 + 16));
  if ((_DWORD)result) {
    return der_get_number(v3, v3 + v4);
  }
  return result;
}

uint64_t aks_ref_key_get_public_key(uint64_t *a1, void *a2)
{
  unsigned int v20 = 0;
  uint64_t v19 = 0LL;
  uint64_t v2 = a1[4];
  if (!v2) {
    return 0LL;
  }
  uint64_t v17 = 0LL;
  uint64_t v18 = 0LL;
  if (der_dict_find_value((uint64_t)der_key_public_key, &v17, &v18, v2, a1[2]))
  {
    *(void *)&__int128 v16 = v17;
    *((void *)&v16 + 1) = v17 + v18;
    der_utils_decode_implicit_raw_octet_string(&v16, 4LL, &v20, &v19);
  }

  int type = aks_ref_key_get_type((uint64_t)a1);
  if ((type - 7) < 2)
  {
    uint64_t v6 = ccec_cp_384();
    goto LABEL_9;
  }

  if ((type - 4) <= 1)
  {
    uint64_t v6 = ccec_cp_256();
LABEL_9:
    uint64_t v8 = (void *)v6;
    if (v6)
    {
      uint64_t v9 = firebloom_cp_prime_bitlen(v6);
      if (v20 == (unint64_t)(v9 + 7) >> 3)
      {
        if (v19 && !a1[8])
        {
          __chkstk_darwin();
          uint64_t v11 = (char *)&v15 - v10;
          bzero((char *)&v15 - v10, v10);
          ccec_compact_import_pub(v8, v20, v19, v11);
          size_t v12 = (2 * firebloom_cp_prime_size()) | 1;
          unsigned __int16 v13 = calloc(v12, 1uLL);
          a1[8] = (uint64_t)v13;
          a1[9] = v12;
          if (v13) {
            ccec_export_pub(v11, v13);
          }
          cc_clear(24LL * *v8 + 16, v11);
        }

        uint64_t v14 = a1[9];
        uint64_t v19 = a1[8];
        unsigned int v20 = v14;
      }
    }
  }

  *a2 = v20;
  return v19;
}

uint64_t aks_sik_optional_params( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v12 = 0LL;
  size_t v13 = 0LL;
  uint64_t v14 = 0LL;
  uint64_t v10 = 3758097090LL;
  if ((!a1 || a2 <= 0x20 && !encode_list_add_data(&v14, (uint64_t)der_key_salt, a1, a2))
    && (!a3 || !encode_list_add_data(&v14, (uint64_t)der_key_data, a3, a4)))
  {
    if (encode_list_is_empty(&v14))
    {
      uint64_t v10 = 0LL;
    }

    else if (!encode_list_dict(&v14, &v12, &v13))
    {
      uint64_t v10 = 0LL;
      *a5 = v12;
      *a6 = v13;
    }
  }

  encode_list_free(&v14);
  return v10;
}

uint64_t aks_sik_collection(uint64_t a1, uint64_t a2, void *a3, size_t *a4)
{
  uint64_t v8 = 3758097090LL;
  uint64_t v9 = der_key_op_sik_collection;
  uint64_t v10 = (void **)calloc(8uLL, 1uLL);
  unint64_t *v10 = 0LL;
  encode_list_add_key(v10, (uint64_t)der_key_op, (uint64_t)v9);
  __s = 0LL;
  rsize_t __n = 0LL;
  if ((!a1 || !encode_list_merge_dict((uint64_t)v10, a1, a1 + a2))
    && !encode_list_dict(v10, &__s, &__n))
  {
    uint64_t v8 = _aks_operation(-1, __s, __n, a3, a4);
  }

  encode_list_free(v10);
  memset_s(v10, 8uLL, 0, 8uLL);
  free(v10);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v8;
}

uint64_t aks_system_key_collection( unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v12 = 3758097090LL;
  size_t v13 = der_key_op_system_key_collect;
  uint64_t v14 = (void **)calloc(8uLL, 1uLL);
  void *v14 = 0LL;
  encode_list_add_key(v14, (uint64_t)der_key_op, (uint64_t)v13);
  __s = 0LL;
  rsize_t __n = 0LL;
  uint64_t v16 = 0LL;
  size_t v17 = 0LL;
  if ((!a3 || !encode_list_merge_dict((uint64_t)v14, a3, a3 + a4))
    && !encode_list_add_number(v14, (uint64_t)der_key_system_key_type, a1)
    && !encode_list_add_number(v14, (uint64_t)der_key_system_key_generation, a2)
    && !encode_list_dict(v14, &__s, &__n))
  {
    uint64_t v12 = _aks_operation(-1, __s, __n, &v16, &v17);
    if (!(_DWORD)v12)
    {
      *a5 = v16;
      *a6 = v17;
    }
  }

  encode_list_free(v14);
  memset_s(v14, 8uLL, 0, 8uLL);
  free(v14);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v12;
}

uint64_t aks_system_key_attest( unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v14 = 3758097090LL;
  uint64_t v15 = der_key_op_system_key_attest;
  uint64_t v16 = (void **)calloc(8uLL, 1uLL);
  void *v16 = 0LL;
  encode_list_add_key(v16, (uint64_t)der_key_op, (uint64_t)v15);
  __s = 0LL;
  rsize_t __n = 0LL;
  uint64_t v18 = 0LL;
  size_t v19 = 0LL;
  if (a3)
  {
    if (!_get_merged_params(a3, v16, a4, a5))
    {
      encode_list_remove_key(v16, (unsigned __int8 *)der_key_ref_key);
      if (!encode_list_add_der(v16, (uint64_t)der_key_ref_key, *(void *)a3, *(void *)(a3 + 16))
        && !encode_list_add_number(v16, (uint64_t)der_key_system_key_type, a1)
        && !encode_list_add_number(v16, (uint64_t)der_key_system_key_generation, a2)
        && !encode_list_dict(v16, &__s, &__n))
      {
        uint64_t v14 = _aks_operation(*(_DWORD *)(a3 + 40), __s, __n, &v18, &v19);
        if (!(_DWORD)v14)
        {
          *a6 = v18;
          *a7 = v19;
        }
      }
    }
  }

  encode_list_free(v16);
  memset_s(v16, 8uLL, 0, 8uLL);
  free(v16);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v14;
}

uint64_t aks_system_key_operate(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 3758097090LL;
  uint64_t v9 = der_key_op_system_key_operate;
  uint64_t v10 = (void **)calloc(8uLL, 1uLL);
  unint64_t *v10 = 0LL;
  encode_list_add_key(v10, (uint64_t)der_key_op, (uint64_t)v9);
  __s = 0LL;
  rsize_t __n = 0LL;
  uint64_t v12 = 0LL;
  rsize_t __smax = 0LL;
  if ((!a3 || !encode_list_merge_dict((uint64_t)v10, a3, a3 + a4))
    && !encode_list_add_number(v10, (uint64_t)der_key_system_key_type, a1)
    && !encode_list_add_number(v10, (uint64_t)der_key_system_key_operation, a2)
    && !encode_list_dict(v10, &__s, &__n))
  {
    uint64_t v8 = _aks_operation(-1, __s, __n, &v12, &__smax);
  }

  encode_list_free(v10);
  memset_s(v10, 8uLL, 0, 8uLL);
  free(v10);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  if (v12)
  {
    memset_s(v12, __smax, 0, __smax);
    free(v12);
  }

  return v8;
}

uint64_t aks_system_key_get_public( unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v12 = 3758097090LL;
  size_t v13 = der_key_op_system_key_get_public;
  uint64_t v14 = (void **)calloc(8uLL, 1uLL);
  void *v14 = 0LL;
  encode_list_add_key(v14, (uint64_t)der_key_op, (uint64_t)v13);
  __s = 0LL;
  rsize_t __n = 0LL;
  uint64_t v16 = 0LL;
  size_t v17 = 0LL;
  if ((!a3 || !encode_list_merge_dict((uint64_t)v14, a3, a3 + a4))
    && !encode_list_add_number(v14, (uint64_t)der_key_system_key_type, a1)
    && !encode_list_add_number(v14, (uint64_t)der_key_system_key_generation, a2)
    && !encode_list_dict(v14, &__s, &__n))
  {
    uint64_t v12 = _aks_operation(-1, __s, __n, &v16, &v17);
    if (!(_DWORD)v12)
    {
      *a5 = v16;
      *a6 = v17;
    }
  }

  encode_list_free(v14);
  memset_s(v14, 8uLL, 0, 8uLL);
  free(v14);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v12;
}

uint64_t get_aks_client_connection()
{
  if (get_aks_client_dispatch_queue_onceToken != -1) {
    dispatch_once(&get_aks_client_dispatch_queue_onceToken, &__block_literal_global_168);
  }
  dispatch_sync((dispatch_queue_t)get_aks_client_dispatch_queue_connection_queue, &__block_literal_global_150);
  uint64_t result = get_aks_client_connection_connection;
  if (!get_aks_client_connection_connection)
  {
    syslog(3, "failed to open connection to %s\n", "AppleKeyStore");
    return get_aks_client_connection_connection;
  }

  return result;
}

void __get_aks_client_connection_block_invoke(id a1)
{
  if (!get_aks_client_connection_connection) {
    get_aks_client_connection_connection = _copy_aks_client_connection( "IOService:/IOResources/AppleKeyStore",  "AppleKeyStore");
  }
}

void __get_aks_client_dispatch_queue_block_invoke(id a1)
{
  get_aks_client_dispatch_queue_connection_queue = (uint64_t)dispatch_queue_create("aks-client-queue", 0LL);
}

uint64_t _copy_aks_client_connection(char *path, const char *a2)
{
  kern_return_t v5;
  CFDictionaryRef v6;
  io_service_t MatchingService;
  io_object_t v8;
  uint64_t result;
  kern_return_t v10;
  io_connect_t connect;
  connect = 0;
  io_service_t v3 = IORegistryEntryFromPath(kIOMasterPortDefault, path);
  if (!v3 || (v4 = v3, uint64_t v5 = IOServiceOpen(v3, mach_task_self_, 0, &connect), IOObjectRelease(v4), v5))
  {
    uint64_t v6 = IOServiceMatching(a2);
    MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v6);
    if (MatchingService)
    {
      uint64_t v8 = MatchingService;
      IOServiceOpen(MatchingService, mach_task_self_, 0, &connect);
      IOObjectRelease(v8);
    }
  }

  uint64_t result = connect;
  if (connect)
  {
    uint64_t v10 = IOConnectCallMethod(connect, 0, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
    uint64_t result = connect;
    if (v10)
    {
      IOServiceClose(connect);
      return 0LL;
    }
  }

  return result;
}

uint64_t aks_absinthe_generate( unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, size_t *a7)
{
  uint64_t v21 = 0LL;
  uint64_t input = a1;
  int v20 = 0;
  uint64_t v7 = 3758097090LL;
  if (a2 && a6 && a7)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      mach_port_t v17 = aks_client_connection;
      aks_pack_data(&v21, (unsigned int *)&v20, 2, v12, v13, v14, v15, v16, a2);
      size_t v19 = *a7;
      uint64_t v7 = IOConnectCallMethod(v17, 0x51u, &input, 1u, v21, v20, 0LL, 0LL, a6, &v19);
      if (!(_DWORD)v7) {
        *a7 = (int)v19;
      }
    }

    else
    {
      fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_absinthe_generate",  ":",  3253,  "",  0,  "",  "");
      uint64_t v7 = 3758097084LL;
    }
  }

  free(v21);
  return v7;
}

unint64_t firebloom_cp_prime_size()
{
  return (unint64_t)(cczp_bitlen() + 7) >> 3;
}

BOOL der_equal(const void *a1, uint64_t a2, const void *a3, uint64_t a4)
{
  size_t v7 = der_get_sizeof((uint64_t)a1, a2);
  return v7 == der_get_sizeof((uint64_t)a3, a4) && memcmp(a1, a3, v7) == 0;
}

uint64_t der_get_sizeof(uint64_t a1, uint64_t a2)
{
  v6[0] = a1;
  v6[1] = a2;
  uint64_t v4 = 0LL;
  uint64_t v5 = 0LL;
  else {
    return 0LL;
  }
}

uint64_t der_dict_iterate( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  v11[0] = a1;
  v11[1] = a2;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t result = ccder_blob_decode_range(v11, 0x2000000000000011LL, v11);
  if ((_DWORD)result)
  {
    if (ccder_blob_decode_sequence_tl(v11, &v9))
    {
      while (1)
      {
        uint64_t v7 = v9;
        uint64_t result = ccder_blob_decode_tl(&v9, 12LL, &v8);
        if (!(_DWORD)result) {
          break;
        }
        if (v9 - v7 != 2) {
          return 0LL;
        }
        uint64_t result = a3(v7, v10 - v7, v9 + v8, v10 - (v9 + v8), a4);
        if (!(_DWORD)result) {
          return result;
        }
        v11[0] = v10;
        if ((ccder_blob_decode_sequence_tl(v11, &v9) & 1) == 0) {
          return 1LL;
        }
      }
    }

    else
    {
      return 1LL;
    }
  }

  return result;
}

uint64_t der_dict_find_value(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v10 = a1;
  uint64_t v11 = 0LL;
  if (a1)
  {
    der_dict_iterate( a4,  a5,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_dict_find_value_cb,  (uint64_t)&v10);
    if (a2)
    {
      if (a3)
      {
        uint64_t v7 = v11;
        uint64_t v8 = v12;
        *a2 = v11;
        *a3 = v8 - v7;
      }
    }
  }

  return v13;
}

BOOL _dict_find_value_cb(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v8 = der_equal( *(const void **)a5,  *(void *)a5 + *(unsigned __int8 *)(*(void *)a5 + 1LL) + 2LL,  a1,  (uint64_t)a1 + a2);
  if (v8)
  {
    *(_BYTE *)(a5 + 24) = 1;
    *(void *)(a5 + _Block_object_dispose(va, 8) = a3;
    *(void *)(a5 + 16) = a3 + a4;
  }

  return !v8;
}

uint64_t der_get_number(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0LL;
  v6[0] = a1;
  v6[1] = a2;
  uint64_t v2 = v7;
  io_service_t v3 = (unsigned __int8 *)v6[0];
  uint64_t result = (uint64_t)*(char *)v6[0] >> 7;
  do
  {
    unsigned int v5 = *v3++;
    uint64_t result = v5 | (unint64_t)(result << 8);
    --v2;
  }

  while (v2);
  return result;
}

double der_utils_decode_implicit_raw_octet_string(__int128 *a1, uint64_t a2, _DWORD *a3, void *a4)
{
  __int128 v11 = *a1;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  if (ccder_blob_decode_range(&v11, a2, &v9))
  {
    int v8 = v9;
    *a4 = v9;
    *a3 = v10 - v8;
    double result = *(double *)&v11;
    *a1 = v11;
  }

  return result;
}

uint64_t encode_list_free(void **a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    uint64_t v2 = *a1;
    if (!*a1) {
      break;
    }
    io_service_t v3 = (void *)*((void *)v2 + 1);
    *a1 = *(void **)v2;
    if (v3)
    {
      memset_s(v3, *((void *)v2 + 2), 0, *((void *)v2 + 2));
      free(*((void **)v2 + 1));
    }

    memset_s(v2, 0x18uLL, 0, 0x18uLL);
    free(v2);
  }

  return 0LL;
}

uint64_t encode_list_remove_key(void *a1, unsigned __int8 *a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = (void **)a1;
  uint64_t result = (uint64_t)_encode_list_find_key(a1, a2);
  if (result)
  {
    uint64_t v4 = result;
    for (uint64_t i = *v2; i != (void *)result; uint64_t i = (void *)*i)
      uint64_t v2 = (void **)i;
    void *v2 = *(void **)result;
    uint64_t v6 = *(void **)(result + 8);
    if (v6)
    {
      memset_s(v6, *(void *)(v4 + 16), 0, *(void *)(v4 + 16));
      free(*(void **)(v4 + 8));
    }

    memset_s((void *)v4, 0x18uLL, 0, 0x18uLL);
    free((void *)v4);
    return 0LL;
  }

  return result;
}

void *_encode_list_find_key(void *a1, unsigned __int8 *a2)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    do
    {
      uint64_t v4 = v2[1] + v2[2];
      uint64_t v6 = (const void *)v2[1];
      uint64_t v7 = v4;
      uint64_t v2 = (void *)*v2;
    }

    while (v2);
  }

  return v2;
}

uint64_t der_key_validate(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  v4[1] = a2;
  unint64_t v5 = 0LL;
  v4[0] = a1;
  if ((ccder_blob_decode_tl(v4, 12LL, &v5) & 1) == 0)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s bad 1%s\n", "aks", "", "", "", "der_key_validate");
    return 0LL;
  }

  if (v5 >= 0x11)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s bad 2%s\n", "aks", "", "", "", "der_key_validate");
    return 0LL;
  }

  return v2;
}

uint64_t encode_list_merge_dict(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    return der_dict_iterate( a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_merge_dict_cb,  a1)
  }
         - 1;
  else {
    return 4294967285LL;
  }
}

uint64_t _merge_dict_cb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  int v8 = (unsigned __int8 *)der_key_validate(a1, a1 + a2);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
  }

  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s fail%s\n", "aks", "", "", "", "_merge_dict_cb", ":", 647, "", 0, "", "");
  return 0LL;
}

uint64_t encode_list_dict(void *a1, void *a2, size_t *a3)
{
  uint64_t v3 = 0xFFFFFFFFLL;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t v7 = (void *)*a1;
        if (*a1)
        {
          unint64_t v8 = 0LL;
          uint64_t v9 = 0LL;
          uint64_t v10 = 0LL;
          do
          {
            v10 += v7[2];
            uint64_t v7 = (void *)*v7;
            v9 -= 16LL;
            --v8;
          }

          while (v7);
          if (v8 >= 0xF000000000000001LL && (rsize_t v11 = -v9, (v12 = (char *)calloc(-v9, 1uLL)) != 0LL))
          {
            uint64_t v13 = v12;
            uint64_t v14 = (void *)*a1;
            if (*a1)
            {
              uint64_t v15 = v12;
              do
              {
                *(_OWORD *)uint64_t v15 = *(_OWORD *)(v14 + 1);
                v15 += 16;
                uint64_t v14 = (void *)*v14;
              }

              while (v14);
            }

            qsort(v12, -(uint64_t)v8, 0x10uLL, (int (__cdecl *)(const void *, const void *))_qsort_compare);
            size_t v16 = ccder_sizeof(0x2000000000000011LL, v10);
            mach_port_t v17 = (char *)calloc(v16, 1uLL);
            uint64_t v18 = v17;
            if (v17)
            {
              size_t v25 = v17;
              unint64_t v26 = &v17[v16];
              unint64_t v19 = v8 - 1;
              int v20 = &v13[-v9 - 8];
              while (!__CFADD__(v19++, 1LL))
              {
                uint64_t v22 = v20 - 16;
                char v23 = ccder_blob_encode_body(&v25, *(void *)v20, *((void *)v20 - 1));
                int v20 = v22;
                if ((v23 & 1) == 0) {
                  goto LABEL_16;
                }
              }

              if (!ccder_blob_encode_tl(&v25, 0x2000000000000011LL, v10) || v25 != v26)
              {
LABEL_16:
                uint64_t v3 = 0xFFFFFFFFLL;
                goto LABEL_20;
              }

              uint64_t v3 = 0LL;
              *a2 = v18;
              *a3 = v16;
              uint64_t v18 = 0LL;
            }

            else
            {
              uint64_t v3 = 4294967279LL;
            }

uint64_t encode_list_add_der(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2 && a3 && a4)
  {
    unint64_t v9 = der_get_sizeof(a3, a4);
    if (v9 <= a4 - a3)
    {
      unint64_t v10 = v9;
      size_t v11 = ccder_sizeof(0x2000000000000010LL, v9 + *(unsigned __int8 *)(a2 + 1) + 2);
      uint64_t v12 = (char *)calloc(v11, 1uLL);
      if (!v12) {
        return 4294967279LL;
      }
      uint64_t v13 = v12;
      uint64_t v14 = &v12[v11];
      uint64_t v22 = v12;
      char v23 = &v12[v11];
      if (ccder_blob_encode_body(&v22, v10, a3))
      {
        unint64_t v24 = v13;
        size_t v25 = v23;
        int v15 = ccder_blob_encode_body(&v24, *(unsigned __int8 *)(a2 + 1) + 2LL, a2);
        size_t v16 = v25;
        if (!v15) {
          size_t v16 = 0LL;
        }
        unint64_t v24 = v13;
        size_t v25 = v16;
        int v17 = ccder_blob_encode_tl(&v24, 0x2000000000000010LL, v14 - v16);
        uint64_t v18 = v25;
        if (!v17) {
          uint64_t v18 = 0LL;
        }
        if (v18 && v18 == v13)
        {
          int v20 = calloc(0x18uLL, 1uLL);
          if (v20)
          {
            uint64_t v21 = v20;
            uint64_t result = 0LL;
            v21[1] = v13;
            v21[2] = v11;
            *uint64_t v21 = *a1;
            *a1 = v21;
            return result;
          }
        }
      }

      memset_s(v13, v11, 0, v11);
      free(v13);
    }

    return 0xFFFFFFFFLL;
  }

  return result;
}

uint64_t encode_list_add_key(void *a1, uint64_t a2, uint64_t a3)
{
  return encode_list_add_der(a1, a2, a3, a3 + *(unsigned __int8 *)(a3 + 1) + 2);
}

uint64_t encode_list_add_data(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2 && a3)
  {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 1);
    uint64_t v10 = ccder_sizeof(4LL, a4);
    size_t v11 = ccder_sizeof(0x2000000000000010LL, v9 + v10 + 2);
    uint64_t v12 = (char *)calloc(v11, 1uLL);
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = &v12[v11];
      uint64_t v22 = v12;
      char v23 = &v12[v11];
      unint64_t v24 = v13;
      size_t v25 = v23;
      int v15 = ccder_blob_encode_body(&v24, *(unsigned __int8 *)(a2 + 1) + 2LL, a2);
      size_t v16 = v25;
      if (!v15) {
        size_t v16 = 0LL;
      }
      unint64_t v24 = v13;
      size_t v25 = v16;
      int v17 = ccder_blob_encode_tl(&v24, 0x2000000000000010LL, v14 - v16);
      uint64_t v18 = v25;
      if (!v17) {
        uint64_t v18 = 0LL;
      }
      BOOL v19 = v18 && v18 == v13;
      if (v19 && (int v20 = calloc(0x18uLL, 1uLL)) != 0LL)
      {
        uint64_t v21 = v20;
        uint64_t result = 0LL;
        v21[1] = v13;
        v21[2] = v11;
        *uint64_t v21 = *a1;
        *a1 = v21;
      }

      else
      {
LABEL_19:
        memset_s(v13, v11, 0, v11);
        free(v13);
        return 0xFFFFFFFFLL;
      }
    }

    else
    {
      return 4294967279LL;
    }
  }

  return result;
}

uint64_t encode_list_add_number(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unint64_t v6 = HIBYTE(a3);
  if ((HIBYTE(a3) + 1) > 1u)
  {
    uint64_t v11 = 8LL;
  }

  else
  {
    uint64_t v7 = 9LL;
    uint64_t v8 = 48LL;
    uint64_t v9 = 1LL;
    while ((unint64_t)(v7 - 2) >= 2)
    {
      uint64_t v10 = a3 >> v8;
      --v7;
      v8 -= 8LL;
      if ((_DWORD)v6 != v10)
      {
        uint64_t v9 = v7 - 1;
        goto LABEL_8;
      }
    }

    uint64_t v7 = 2LL;
LABEL_8:
    else {
      uint64_t v11 = v9;
    }
  }

  uint64_t v30 = 0LL;
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    uint64_t v13 = *(unsigned __int8 *)(a2 + 1);
    uint64_t v14 = ccder_sizeof(2LL, v11);
    size_t v15 = ccder_sizeof(0x2000000000000010LL, v13 + v14 + 2);
    size_t v16 = (char *)calloc(v15, 1uLL);
    if (v16)
    {
      int v17 = v16;
      uint64_t v18 = v11;
      do
      {
        *((_BYTE *)&v30 + v18 - 1) = v3;
        v3 >>= 8;
        --v18;
      }

      while (v18);
      unint64_t v26 = v16;
      size_t v27 = &v16[v15];
      unint64_t v28 = v17;
      int v29 = v27;
      int v19 = ccder_blob_encode_body(&v28, *(unsigned __int8 *)(a2 + 1) + 2LL, a2);
      int v20 = v29;
      if (!v19) {
        int v20 = 0LL;
      }
      unint64_t v28 = v17;
      int v29 = v20;
      int v21 = ccder_blob_encode_tl(&v28, 0x2000000000000010LL, &v17[v15] - v20);
      uint64_t v22 = v29;
      if (!v21) {
        uint64_t v22 = 0LL;
      }
      BOOL v23 = v22 && v22 == v17;
      if (v23 && (unint64_t v24 = calloc(0x18uLL, 1uLL)) != 0LL)
      {
        size_t v25 = v24;
        uint64_t result = 0LL;
        v25[1] = v17;
        v25[2] = v15;
        *size_t v25 = *a1;
        *a1 = v25;
      }

      else
      {
LABEL_30:
        memset_s(v17, v15, 0, v15);
        free(v17);
        return 0xFFFFFFFFLL;
      }
    }

    else
    {
      return 4294967279LL;
    }
  }

  return result;
}

BOOL encode_list_is_empty(void *a1)
{
  return *a1 == 0LL;
}

uint64_t _qsort_compare(void *a1, void **a2)
{
  uint64_t v2 = *a1 + a1[1];
  v13[0] = *a1;
  v13[1] = v2;
  uint64_t v3 = (char *)a2[1] + (void)*a2;
  __s2[0] = *a2;
  __s2[1] = v3;
  unint64_t v17 = 0LL;
  unint64_t v15 = 0LL;
  unint64_t v16 = 0LL;
  unint64_t v14 = 0LL;
  uint64_t v4 = (const void *)v13[0];
  if (!v13[0]
    || !ccder_blob_decode_tag(__s2, &v15)
    || !ccder_blob_decode_len(__s2, &v14)
    || !__s2[0])
  {
    return 4294967293LL;
  }

  if (v17 > v15) {
    return 1LL;
  }
  if (v15 > v17) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v6 = v16;
  unint64_t v7 = v14;
  size_t v8 = v16 >= v14 ? v14 : v16;
  int v9 = memcmp(v4, __s2[0], v8);
  if (v9 > 0 || !v9 && v6 > v7) {
    return 1LL;
  }
  int v11 = v9 < 0 || v6 < v7;
  return (v11 << 31 >> 31);
}

char *aks_copy_packed_data(_DWORD *a1, const void *a2, int a3)
{
  uint64_t v3 = (char *)(a1 + 1);
  if (a2)
  {
    *a1 = a3;
    memcpy(a1 + 1, a2, a3);
    v3 += a3;
    int v5 = -a3;
    size_t v6 = -a3 & 3;
    if ((v5 & 3) != 0)
    {
      int __s = 0;
      memset_s(&__s, 4uLL, 0, 4uLL);
      memcpy(v3, &__s, v6);
      v3 += v6;
    }
  }

  else
  {
    *a1 = 0;
  }

  return v3;
}

char *aks_pack_data( char **a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v21 = &a9;
  unsigned int v12 = 4;
  if (a3)
  {
    int v13 = a3;
    do
    {
      unint64_t v14 = v21;
      v21 += 2;
      v12 += *((_DWORD *)v14 + 2) + (-*((_DWORD *)v14 + 2) & 3) + 4;
      --v13;
    }

    while (v13);
  }

  uint64_t result = (char *)calloc(1uLL, v12);
  unint64_t v16 = result;
  uint64_t v22 = (const void **)&a9;
  int v17 = 0;
  if (a3)
  {
    uint64_t v18 = 4LL;
    do
    {
      int v19 = v22;
      int v20 = *v22;
      v22 += 2;
      uint64_t result = aks_copy_packed_data(&v16[v18], v20, *((_DWORD *)v19 + 2));
      uint64_t v18 = result - v16;
      ++v17;
    }

    while (a3 != v17);
  }

  *(_DWORD *)unint64_t v16 = v17;
  *a1 = v16;
  *a2 = v12;
  return result;
}

uint64_t sub_1000ABF04( mach_port_t a1, unsigned int a2, uint64_t a3, unsigned int a4, unint64_t *a5, void *a6, unsigned int *a7)
{
  int v18 = 1;
  uint64_t v19 = a3;
  int v20 = 16777472;
  unsigned int v21 = a4;
  NDR_record_t v22 = NDR_record;
  unint64_t v23 = __PAIR64__(a4, a2);
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4B000000000LL;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v12 = mach_msg(&msg, 3, 0x3Cu, 0x48u, reply_port, 0, 0);
  uint64_t v13 = v12;
  if ((v12 - 268435458) <= 0xE && ((1 << (v12 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v13;
  }

  if ((_DWORD)v12)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v13;
  }

  if (msg.msgh_id == 71)
  {
    uint64_t v15 = 4294966988LL;
  }

  else if (msg.msgh_id == 1300)
  {
    if ((msg.msgh_bits & 0x80000000) != 0)
    {
      uint64_t v15 = 4294966996LL;
      if (v18 == 1 && msg.msgh_size == 64 && !msg.msgh_remote_port && HIBYTE(v20) == 1)
      {
        unsigned int v16 = v21;
        if (v21 == v24)
        {
          *a5 = v23;
          *a6 = v19;
          *a7 = v16;
          return 0LL;
        }
      }
    }

    else if (msg.msgh_size == 36)
    {
      uint64_t v15 = 4294966996LL;
      if (HIDWORD(v19))
      {
        if (msg.msgh_remote_port) {
          uint64_t v15 = 4294966996LL;
        }
        else {
          uint64_t v15 = HIDWORD(v19);
        }
      }
    }

    else
    {
      uint64_t v15 = 4294966996LL;
    }
  }

  else
  {
    uint64_t v15 = 4294966995LL;
  }

  mach_msg_destroy(&msg);
  return v15;
}

uint64_t sub_1000AC0F8(mach_port_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  int v11 = 1;
  uint64_t v12 = a4;
  int v13 = 16777472;
  int v14 = a5;
  NDR_record_t v15 = NDR_record;
  int v16 = a2;
  uint64_t v17 = a3;
  int v18 = a5;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4B100000000LL;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v7 = mach_msg(&msg, 3, 0x44u, 0x2Cu, reply_port, 0, 0);
  uint64_t v8 = v7;
  if ((v7 - 268435458) <= 0xE && ((1 << (v7 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v8;
  }

  if ((_DWORD)v7)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v8;
  }

  if (msg.msgh_id == 71)
  {
    uint64_t v8 = 4294966988LL;
LABEL_17:
    mach_msg_destroy(&msg);
    return v8;
  }

  if (msg.msgh_id != 1301)
  {
    uint64_t v8 = 4294966995LL;
    goto LABEL_17;
  }

  uint64_t v8 = 4294966996LL;
  if ((msg.msgh_bits & 0x80000000) != 0) {
    goto LABEL_17;
  }
  if (msg.msgh_size != 36) {
    goto LABEL_17;
  }
  if (msg.msgh_remote_port) {
    goto LABEL_17;
  }
  uint64_t v8 = HIDWORD(v12);
  if (HIDWORD(v12)) {
    goto LABEL_17;
  }
  return v8;
}

uint64_t sub_1000AC270(mach_port_t a1, int a2, uint64_t a3, uint64_t a4, int a5, void *a6, _DWORD *a7)
{
  int v17 = 1;
  uint64_t v18 = a4;
  int v19 = 16777472;
  int v20 = a5;
  NDR_record_t v21 = NDR_record;
  int v22 = a2;
  uint64_t v23 = a3;
  int v24 = a5;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4B200000000LL;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v11 = mach_msg(&msg, 3, 0x44u, 0x40u, reply_port, 0, 0);
  uint64_t v12 = v11;
  if ((v11 - 268435458) <= 0xE && ((1 << (v11 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v12;
  }

  if ((_DWORD)v11)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v12;
  }

  if (msg.msgh_id == 71)
  {
    uint64_t v14 = 4294966988LL;
  }

  else if (msg.msgh_id == 1302)
  {
    if ((msg.msgh_bits & 0x80000000) != 0)
    {
      uint64_t v14 = 4294966996LL;
      if (v17 == 1 && msg.msgh_size == 56 && !msg.msgh_remote_port && HIBYTE(v19) == 1)
      {
        int v15 = v20;
        if (v20 == v22)
        {
          *a6 = v18;
          *a7 = v15;
          return 0LL;
        }
      }
    }

    else if (msg.msgh_size == 36)
    {
      uint64_t v14 = 4294966996LL;
      if (HIDWORD(v18))
      {
        if (msg.msgh_remote_port) {
          uint64_t v14 = 4294966996LL;
        }
        else {
          uint64_t v14 = HIDWORD(v18);
        }
      }
    }

    else
    {
      uint64_t v14 = 4294966996LL;
    }
  }

  else
  {
    uint64_t v14 = 4294966995LL;
  }

  mach_msg_destroy(&msg);
  return v14;
}

uint64_t sub_1000AC460(mach_port_t a1, unsigned int a2, uint64_t a3)
{
  NDR_record_t v9 = NDR_record;
  unsigned int v10 = a2;
  uint64_t v11 = a3;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x4B300000000LL;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v5 = mach_msg(&msg, 3, 0x2Cu, 0x2Cu, reply_port, 0, 0);
  uint64_t v6 = v5;
  if ((v5 - 268435458) <= 0xE && ((1 << (v5 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v6;
  }

  if ((_DWORD)v5)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v6;
  }

  else
  {
    if (msg.msgh_id == 71)
    {
      uint64_t v6 = 4294966988LL;
    }

    else if (msg.msgh_id == 1303)
    {
      uint64_t v6 = 4294966996LL;
      if ((msg.msgh_bits & 0x80000000) == 0 && msg.msgh_size == 36 && !msg.msgh_remote_port)
      {
        uint64_t v6 = v10;
        if (!v10) {
          return v6;
        }
      }
    }

    else
    {
      uint64_t v6 = 4294966995LL;
    }

    mach_msg_destroy(&msg);
    return v6;
  }

void sub_1000AC5B0(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_1000AC668()
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL
                                             * (((((v1 + 121702045) & 0x856FEF6) - 4) * (v2 == 0)) ^ (v0 + v1 + 2)))
                            - 8LL))();
}

uint64_t sub_1000AC6A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(a1 + 8LL * (v1 - 3)))(v3);
  *(_DWORD *)(v2 + 24) = 0;
  return result;
}

void KxmB0CKvgWt(uint64_t a1, int a2)
{
  if (a1) {
    BOOL v2 = a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  int v3 = v2;
  __asm { BR              X9 }

uint64_t sub_1000AC880()
{
  return 4294923273LL;
}

void sub_1000AC9B0(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 ^ (646995413 * ((((2 * a1) | 0x8F18737E) - a1 + 947111489) ^ 0x534DB4D5));
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(unsigned int *)off_10025C5C0[v1 - 36];
  strcpy(v5, "com.apple.absd");
  uint64_t v4 = *(void *)((char *)off_10025C5C0[v1 - 46]
                 + 8
                 * ((123
                   * (((unsigned int (*)(uint64_t, char *, uint64_t))off_10025C5C0[v1 - 40])(v3, v5, v2) == 0)) ^ v1)
                 - 12)
     - ((v1 + 23) ^ 0x41LL);
  __asm { BR              X9 }

void sub_1000ACAB4()
{
  *(_DWORD *)(v0 + 4) = v1;
}

void nDYmeMqvWb(uint64_t a1, uint64_t a2, int a3)
{
  if (a1) {
    BOOL v3 = a2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  int v5 = v3 || a3 == 0;
  __asm { BR              X9 }

uint64_t sub_1000ACBB0()
{
  return 4294923273LL;
}

void sub_1000ACCD4(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_1000ACD80()
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t (*)()))(v2 + 8LL * (v0 & 0x40188)))( *(void *)(v2 + 8LL * (v0 & 0x40000402)),  nullsub_2);
  *int v1 = 1410186986;
  return result;
}

void t1BoNctgaUu66(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1) {
    BOOL v4 = a4 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  int v5 = !v4;
  __asm { BR              X9 }

uint64_t sub_1000ADDF4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v14[0] = *(void *)(v6 + 16);
  unsigned int v20 = 1829790799 * (((&v18 | 0xDC543C92) - (&v18 & 0xDC543C92)) ^ 0x1E9D9CD9) + 463207035;
  int v19 = v14;
  uint64_t v11 = *(void (**)(int *))(a6 + 48);
  v11(&v18);
  v14[0] = *(void *)(v6 + 248);
  v14[1] = a1;
  void v14[2] = a2;
  int v15 = a3;
  uint64_t v16 = a4;
  uint64_t v17 = a5;
  int v19 = v14;
  unsigned int v20 = 1829790799 * (&v18 ^ 0xC2C9A04B) + 463207035;
  v11(&v18);
  return (v18 - 1787617099);
}

uint64_t Be81a395Bf0(uint64_t a1)
{
  qword_100273C28 = 1681628227 * ((qword_100273C28 - (void)&v4 + qword_100273C18) ^ 0x68EECD5B1F580389LL);
  qword_100273C18 = qword_100273C28;
  uint64_t v1 = *(void *)((char *)off_10025C5C0[((67 * ((2 * qword_100273C28) ^ 0x89)) ^ byte_1002121E0[byte_1002120E0[(67 * ((2 * qword_100273C28) ^ 0x89))] ^ 0x34])
                                       - 49]
                 + 140)
     - 4LL;
  unint64_t v2 = 942846689 * ((unint64_t)&v5 ^ 0x2DF4282E8CBBA516LL);
  int v5 = v2 ^ 0xF067FA72;
  uint64_t v6 = a1;
  unint64_t v7 = v1 ^ v2;
  ((void (*)(int *))off_10025C5C0[(unk_100211F9D ^ 0xDB) - 185])(&v5);
  return v8;
}

uint64_t IW1PcFszqNK(uint64_t a1)
{
  qword_100273C20 = 1681628227 * ((qword_100273C18 + qword_100273C20) ^ (unint64_t)&v4 ^ 0x68EECD5B1F580389LL);
  qword_100273C18 = qword_100273C20;
  uint64_t v1 = *(void *)((char *)off_10025C5C0[((67 * ((2 * qword_100273C20) ^ 0x89)) ^ byte_100211DE0[byte_1002122E0[(67 * ((2 * qword_100273C20) ^ 0x89))] ^ 0xD6])
                                       - 8]
                 + 28)
     - 4LL;
  unint64_t v2 = 942846689
     * ((((unint64_t)&v5 | 0xDBD392286209E2F0LL)
  int v5 = v2 ^ 0xF067FA72;
  uint64_t v6 = a1;
  unint64_t v7 = v1 ^ v2;
  ((void (*)(int *))off_10025C5C0[(unk_1002120D9 ^ 0xDB) - 226])(&v5);
  return v8;
}

uint64_t sub_1000AE1FC(__SecKey *a1, const UInt8 *a2, CFIndex length, UInt8 **a4, unsigned int *a5)
{
  CFErrorRef error = 0LL;
  unsigned int v8 = CFDataCreate(0LL, a2, length);
  NDR_record_t v9 = SecKeyCreateSignature(a1, kSecKeyAlgorithmECDSASignatureMessageX962SHA256, v8, &error);
  if (!v9)
  {
    uint64_t v14 = 4294925247LL;
    if (!v8) {
      return v14;
    }
    goto LABEL_8;
  }

  unsigned int v10 = v9;
  unsigned int v11 = CFDataGetLength(v9);
  uint64_t v12 = (UInt8 *)malloc(v11);
  if (v12)
  {
    int v13 = v12;
    v17.length = CFDataGetLength(v10);
    v17.location = 0LL;
    CFDataGetBytes(v10, v17, v13);
    uint64_t v14 = 0LL;
    *a4 = v13;
    *a5 = v11;
  }

  else
  {
    uint64_t v14 = 4294925268LL;
  }

  CFRelease(v10);
  if (v8) {
LABEL_8:
  }
    CFRelease(v8);
  return v14;
}

uint64_t sub_1000AE2E4()
{
  uint64_t v8 = 0LL;
  NDR_record_t v9 = &v8;
  uint64_t v10 = 0x3052000000LL;
  unsigned int v11 = sub_1000AE4B8;
  uint64_t v12 = sub_1000AE4C8;
  uint64_t v13 = 0LL;
  int v0 = dispatch_semaphore_create(0LL);
  if (v0)
  {
    if (getenv("RunningTestSUInfoRefetch"))
    {
      v16[0] = @"IgnoreExistingCollection";
      v17[0] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", 1LL);
      v17[1] = &__kCFBooleanTrue;
      v16[1] = @"scheduleCollectionForCurrentBuild";
      v16[2] = @"NetworkTimeoutInterval";
      v17[2] = &off_10026D668;
      uint64_t v1 = (const __CFString **)v16;
      unint64_t v2 = (void **)v17;
      uint64_t v3 = 3LL;
    }

    else
    {
      uint64_t v14 = @"scheduleCollectionForCurrentBuild";
      int v15 = &__kCFBooleanTrue;
      uint64_t v1 = &v14;
      unint64_t v2 = &v15;
      uint64_t v3 = 1LL;
    }

    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3254779904LL;
    _DWORD v7[2] = sub_1000AE4D4;
    v7[3] = &unk_10025C638;
    void v7[4] = v0;
    v7[5] = &v8;
    MAEPerformCollectionWithCompletion( 0LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v2,  v1,  v3),  v7);
    dispatch_time_t v5 = dispatch_time(0LL, 70000000000LL);
    uint64_t v4 = 4294924355LL;
    if (!dispatch_semaphore_wait(v0, v5))
    {
      if (v9[5]) {
        uint64_t v4 = 4294924355LL;
      }
      else {
        uint64_t v4 = 0LL;
      }
    }
  }

  else
  {
    uint64_t v4 = 4294925268LL;
  }

  dispatch_release(v0);
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1000AE4A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_1000AE4B8(uint64_t a1, uint64_t a2)
{
}

void sub_1000AE4C8(uint64_t a1)
{
}

uint64_t sub_1000AE4D4(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000AE4E8(uint64_t a1, uint64_t a2)
{
}

void sub_1000AE524(uint64_t a1)
{
}

void sub_1000AE554(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_1000AE5F8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v10 = v9 + v6;
  if (a6) {
    BOOL v11 = v8 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  int v12 = !v11;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7
                                                                                          + 8LL * ((177 * v12) ^ v10))
                                                                              - 12LL))( a1,  a2,  a3,  a4,  a5);
}

uint64_t sub_1000AE64C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v10 = v9 + v6;
  if (a6) {
    BOOL v11 = v8 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  int v12 = !v11;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7
                                                                                          + 8LL * (v10 ^ (177 * v12)))
                                                                              - (v10 + 770)
                                                                              + 1820LL))( a1,  a2,  a3,  a4,  a5);
}

uint64_t sub_1000AE694( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11
                                                                                + 8LL
                                                                                * ((26
                                                                                  * (a11 == (((v12 - 1826) | 0x380) ^ 0x387))) ^ v12)))( a1,  a2,  a3,  a4,  a5);
}

uint64_t sub_1000AE6DC()
{
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * (((v2 - 886) * v1) ^ v2))
                            - ((v2 + 14224799) | 0x6800A280u)
                            + 1759097757LL))();
}

void sub_1000AE714(uint64_t a1@<X8>)
{
  uint64_t v17 = 0x40AF9B25784C106DLL;
  int v9 = (char *)&v5 + 4;
  uint64_t v10 = 0LL;
  uint64_t v12 = a1;
  uint64_t v13 = 0LL;
  unsigned int v4 = 562267567 * ((2 * (&v7 & 0x10B87750) - &v7 - 280524627) ^ 0xFCDD74EE);
  uint64_t v7 = &v5;
  uint64_t v8 = v1;
  uint64_t v11 = &v6;
  unsigned int v15 = v4 ^ 0xC84ECD32;
  int v16 = (v2 + 764) ^ v4;
  sub_1000AF120((uint64_t)&v7);
  *(_DWORD *)(v3 + 2_Block_object_dispose(va, 8) = v14;
}

uint64_t mbdz5ztWyQD(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  unint64_t v5 = 444472921
     * ((((unint64_t)v7 | 0xB9499F8FED8967C6LL) - ((unint64_t)v7 & 0xB9499F8FED8967C6LL)) ^ 0x3952472C50FD0028LL);
  uint64_t v8 = a4;
  int v9 = (char *)&loc_1000AE650 + v5 - 4;
  v7[0] = v5 ^ a5;
  v7[1] = v5 ^ a3;
  uint64_t v12 = a2;
  uint64_t v13 = a1;
  int v10 = v5 ^ 0x68D9B3A5;
  sub_1000AE554((uint64_t)v7);
  return v11;
}

uint64_t ewFHQ(uint64_t a1)
{
  unint64_t v1 = 941074649
     * (((unint64_t)&v3 - 2 * ((unint64_t)&v3 & 0xBB02B8911101A284LL) - 0x44FD476EEEFE5D7CLL) ^ 0xBA845F7311C96DE0LL);
  unsigned int v4 = (char *)&loc_1001DD6B8 + v1 - 4;
  uint64_t v5 = a1;
  int v6 = -804802556 - v1;
  sub_1001DD5F8((uint64_t)&v3);
  return v3;
}

void sub_1000AEA08(uint64_t a1)
{
  unsigned int v1 = 755310587 * ((a1 + 704913948 - 2 * (a1 & 0x2A04221C)) ^ 0x6B0879D5);
  unsigned int v2 = *(_DWORD *)(a1 + 8) - v1;
  uint64_t v3 = *(void *)(a1 + 56);
  unsigned int v4 = *(const UInt8 **)(a1 + 16);
  CFIndex v5 = *(_DWORD *)(a1 + 48) ^ v1;
  uint64_t v7 = 0LL;
  unsigned int v8 = 0;
  uint64_t v6 = (uint64_t)*(&off_10025C670
                + (int)(v2 ^ (32
                            * (((v2 - 1) ^ (sub_1000AE1FC( (__SecKey *)(*(void *)(v3 - 0x57F7A3E501E5FAB3LL)
                                                                                        - 0xF869F1E666387A4LL),
                                                                             v4,
                                                                             v5,
                                                                             &v7,
                                                                             &v8) == 0)) & 1))));
  __asm { BR              X8 }

uint64_t sub_1000AEAF8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void sub_1000AEB2C(void *a1)
{
  *(_DWORD *)(v1 + 24) = v2;
}

uint64_t sub_1000AF0AC(uint64_t result)
{
  unint64_t v1 = 516615401 * (result ^ 0x88BC887B73630632LL);
  unint64_t v2 = *(void *)(result + 16) ^ v1;
  int v3 = *(_DWORD *)(result + 24) ^ v1;
  int v4 = *(_DWORD *)result - v1;
  unint64_t v5 = *(void *)(result + 32) - v1;
  int v6 = *(_DWORD *)(result + 4) + v1;
  int v7 = *(_DWORD *)(result + 44) - v1;
  BOOL v8 = v5 == v2;
  BOOL v9 = v5 > v2;
  int v10 = v8;
  if ((v4 & 1) == 0) {
    BOOL v9 = v10;
  }
  if (v9) {
    int v11 = v6;
  }
  else {
    int v11 = v3;
  }
  *(_DWORD *)(result + _Block_object_dispose(va, 8) = v11 ^ v7;
  return result;
}

void sub_1000AF120(uint64_t a1)
{
  int v1 = 562267567 * ((~(_DWORD)a1 & 0xCACA2F0 | a1 & 0xF3535D0F) ^ 0x1F365EB3);
  unsigned int v2 = ((*(_DWORD *)(a1 + 64) ^ v1) + 1104762746) & 0xBE26A32F;
  __asm { BR              X13 }

uint64_t sub_1000AF368()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
}

uint64_t sub_1000AF3A0@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((a1 + 235) ^ (154 * (v1 < -167487494))))
                            - (a1 + 117)
                            - 7 * ((a1 + 235) ^ 0x159u)
                            + 525LL))();
}

uint64_t sub_1000AF3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 + 8LL * (v6 ^ (719 * (v7 == v5))))
                                                                                       - (v6 - 163)
                                                                                       - ((119 * (v6 ^ 0xF4u)) ^ 0xFFFFFFFFFFFFF933LL)))( a1,  a2,  a3,  a4,  a5,  4294924373LL);
}

uint64_t sub_1000AF42C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W8>)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)(v6
                                                                                                  + 8LL * ((1791 * (((*(void *)STACK[0x630] == 0LL) ^ (a6 - 72)) & 1)) ^ a6))
                                                                                      - (a6 ^ 0x6D5u)
                                                                                      + 1654LL))( a1,  a2,  a3,  a4,  a5,  0LL);
}

uint64_t sub_1000AF470@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((208 * (*(void *)(v1 + 48) != 0LL)) ^ ((a1 + 439) | 0x410)))
                            - ((((a1 + 439) | 0x410) - 402) | 0x122u)
                            + 1442LL))();
}

void sub_1000AF4B0(void *a1@<X0>, int a2@<W8>)
{
  unsigned int v3 = (a2 + 279674848) & 0xEF547FAF;
  free(a1);
  *(void *)(v2 + 4_Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(v2 + 56) = 448329679;
  __asm { BR              X10 }

uint64_t sub_1000B065C()
{
  *(_DWORD *)(v0 + 72) = 678136159;
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * ((681
                                * (((((v1 ^ 0x497) + 369) ^ (*(void *)(v0 + 120) == 0x57F7A3E501E5FAB3LL)) & 1) == 0)) ^ v1)))();
}

uint64_t sub_1000B0774@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * (a1 ^ (95 * (v3 == v1)))) - (v2 ^ ((a1 - 609) | 0x140u) ^ 0x57ALL)))();
}

uint64_t sub_1000B07AC()
{
  *(void *)(v1 + 120) = 0x57F7A3E501E5FAB3LL;
  return (*(uint64_t (**)(void))(v2
                              + 8LL
}

void sub_1000B147C(void *a1)
{
  *(void *)(v1 + 104) = 0LL;
  *(_DWORD *)(v1 + 112) = 1768032834;
  JUMPOUT(0x1000B149CLL);
}

void sub_1000B14D4()
{
  *int v0 = 1711260689;
  JUMPOUT(0x1000B1500LL);
}

uint64_t sub_1000B150C()
{
  int v1 = STACK[0x9B4];
  STACK[0x748] = 0x657CD3A60B29129ALL;
  LODWORD(STACK[0xA5C]) = 1461276729;
  BOOL v2 = malloc(((v1 - 1282311541) & 0xFFFFFFF0 ^ 0x9CF8EEBF) + ((2 * (v1 - 1282311541)) & 0x39F1DD60) + 1661407569) == 0LL;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
}

uint64_t sub_1000B15A8()
{
  BOOL v2 = (uint64_t (*)(void))*(&off_10025C670
  return v2();
}

uint64_t sub_1000B1608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((uint64_t (*)(void))(*(void *)(a3 + 8LL * (((v4 != 1282311541) * (98 * (v3 ^ 0x100) - 1596)) | v3)) - 8LL))();
}

uint64_t sub_1000B1664@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  *(_BYTE *)(v4 + a2 + 234696783 + ((unint64_t)(v2 > 0xDFD304F) << 32)) = *(_BYTE *)(STACK[0x618]
                                                                                          + a2
                                                                                          + 234696783
  BOOL v6 = (v5 + 183136455) > 0x5758F63D;
  return (*(uint64_t (**)(void))(a1 + 8LL * ((964 * !v6) ^ (34 * (v3 ^ 0x120) - 1177))))();
}

void sub_1000B1708()
{
}

uint64_t sub_1000B1710()
{
  STACK[0x7E0] = 0x657CD3A60B29129ALL;
  LODWORD(STACK[0x968]) = 1461276729;
  BOOL v3 = malloc( ((((v0 - 2066930280) & 0x7B32DDFF) + 802945528) ^ (v1 - 1282311541) & 0xFFFFFFF0)
       + ((v0 ^ 0x5FB7FDEE) & (2 * (v1 - 1282311541)))
       - 802947023) != 0LL;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((1978 * v3) ^ v0)) - 8LL))();
}

uint64_t sub_1000B17B8(unint64_t a1)
{
  LODWORD(STACK[0x658]) = v1;
  STACK[0x660] = a1;
  STACK[0x650] = v3;
  uint64_t v4 = (uint64_t (*)(unint64_t))((char *)*(&off_10025C670
                                                          + (((malloc(v3) != 0LL) * ((((v2 ^ 0x7C) + 491) | 0xC0) - 53)) ^ v2 ^ 0x7C))
                                                - 8);
  return v4(STACK[0x660]);
}

uint64_t sub_1000B1814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

uint64_t sub_1000B1878@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  unint64_t v6 = a2 + 677762745 + ((unint64_t)(v2 > 0x2865D6B9) << 32);
  *(_BYTE *)(v4 + v6) = ((2 * *(_BYTE *)(STACK[0x618] + v6)) & 0xB8) + (*(_BYTE *)(STACK[0x618] + v6) ^ 0x5C);
  BOOL v7 = (v5 + 1320341879) > 0x9B2156ED;
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * ((311 * !v7) ^ (v3 - 959))) - 12LL))();
}

void sub_1000B191C()
{
}

uint64_t sub_1000B1924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(v8
                                                                                        + 8LL
                                                                                        * (((v5 == v7 - 2)
                                                                                          * ((v6 ^ 0x79D) + 667)) ^ (v6 - 1379))))( a1,  a2,  a3,  a4,  a5,  0LL);
}

uint64_t sub_1000B1954@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(v7
                                                                                        + 8LL
                                                                                        * ((1233
                                                                                          * ((*(_DWORD *)(v6 + 96) & 2) != ((a6 - 1696739936) & 0x652237C2) - 1666)) ^ a6)))( a1,  a2,  a3,  a4,  a5,  0LL);
}

uint64_t sub_1000B1998@<X0>(int a1@<W8>)
{
}

uint64_t sub_1000B19CC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7
                                                                                         + 8LL
                                                                                         * ((537
                                                                                           * (v6 == (unsigned __int16)((((a6 + 1251) ^ 0x2B9) - 9625) ^ ((a6 + 1251) | 0x80)))) ^ a6)))( a1,  a2,  a3,  a4,  a5,  4294924368LL);
}

uint64_t sub_1000B1A0C()
{
  STACK[0x980] = 0x657CD3A60B29129ALL;
  LODWORD(STACK[0x868]) = 1461276729;
  unsigned int v2 = malloc( ((v0 << (((v1 ^ 0x55) + 115) ^ 0x60)) & 0xEFFF6640)
       + (v0 & 0xFFFFFFF0 ^ 0x77FFB5A7 ^ (7 * (v1 ^ 0x455)))
       - 2013246229);
  STACK[0x660] = (unint64_t)v2;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + ((635 * (v2 != 0LL)) ^ v1)) - 4))();
}

uint64_t sub_1000B1AB8()
{
  int v3 = *(uint64_t (**)(void))(v0 + 8LL * (((malloc(v1) == 0LL) * ((98 * (v2 ^ 0x170)) ^ 0x690)) | v2));
  return v3();
}

uint64_t sub_1000B1AF8(uint64_t a1)
{
  STACK[0x650] = a1 + 0x3BF73A4905DA790BLL;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + ((((((v2 ^ 0x98) - 505) | 0x94) ^ 0x39F) * (v1 != 0)) ^ v2 ^ 0x98))
                            - 4))();
}

uint64_t sub_1000B1B80@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  BOOL v10 = v8 > 0x53E4A1CB;
  unint64_t v11 = a3 + v4 + ((unint64_t)(v4 < v3) << 32);
  *(_BYTE *)(v9 + v11) = (*(_BYTE *)(a2 + v11) ^ 0x5E) + (((v6 + 11) & 0xFB ^ 0x44) & (2 * *(_BYTE *)(a2 + v11))) - 2;
  if (v10 == v4 - 2086203105 < v5) {
    BOOL v10 = v4 - 2086203105 < v7;
  }
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * ((504 * !v10) ^ v6)) - 4LL))();
}

uint64_t sub_1000B1C20@<X0>(uint64_t a1@<X8>)
{
  int v5 = v3 - 357;
  *(_BYTE *)(STACK[0x650]
           + ((unint64_t)(v2 < (v5 ^ (v1 + 108))) << 32)
           + a1
           + v2
           - 0x3BF73A4905DA790BLL) = -36;
  BOOL v6 = v2 - 1903885687 < v4 + 1056545929;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + ((46 * !v6) ^ v5)) - 12))();
}

uint64_t sub_1000B1C3C@<X0>(uint64_t a1@<X5>, unint64_t a2@<X6>, uint64_t a3@<X8>)
{
  int v4 = STACK[0x658];
  STACK[0x658] = a2;
  *(_BYTE *)(a2 + a3 + 357632335 - 0x3BF73A4905DA790BLL) = -36;
  BOOL v5 = (v4 - 981519104) < 0x255F1B0D || (v4 - 981519104) > 0x255F1B0E;
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * ((202 * v5) ^ (v3 - 1322))) - ((v3 ^ 0x7DAu) + 214) + 550LL))();
}

uint64_t sub_1000B1CF4@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  BOOL v11 = v4 < v5;
  *(_BYTE *)(v9 + (v10 ^ 0x22Fu) + v3 + a2 + ((unint64_t)((v10 ^ 0x22Fu) + v3 < v2) << 32)) = 92;
  unsigned int v12 = v6 + v3 + 1;
  int v13 = v11 ^ (v12 < v5);
  BOOL v14 = v12 < v4;
  if (!v13) {
    BOOL v11 = v14;
  }
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * ((v11 * v8) ^ v7)) - 8LL))();
}

uint64_t sub_1000B1D58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(v6 + 64);
  int v12 = *(_DWORD *)(v6 + 72);
  int v13 = 1448877107 * ((2 * ((v10 - 192) & 0x6AB54B10) - (v10 - 192) + 357217515) ^ 0x6471A9C1);
  *(_DWORD *)(v10 - 12_Block_object_dispose(va, 8) = v9 - v13 + 118;
  *(_DWORD *)(v10 - 192) = ((v9 + 596) | 0x200) - v13 + v12 + ((v9 + 596) ^ 0x320D7AEA);
  *(_DWORD *)(v10 - 18_Block_object_dispose(va, 8) = v13 + 1598548771;
  *(_DWORD *)(v10 - 160) = v13 ^ 0x5D49146A;
  *(void *)(v10 - 152) = v6 + 0x54BD9D2603AA2709LL;
  *(void *)(v10 - 144) = v6 + 0x5A78D2218AD9E76LL;
  *(void *)(v10 - 120) = v6 + 0x59E3FCAF6574EC83LL;
  *(_DWORD *)(v10 - 112) = v13 + 41966287;
  *(void *)(v10 - 176) = v7;
  *(void *)(v10 - 16_Block_object_dispose(va, 8) = v11;
  *(void *)(v10 - 136) = v8;
  sub_1001BF444(v10 - 192);
  return (*(uint64_t (**)(void))(a6 + 8LL * ((90 * (*(_DWORD *)(v10 - 184) != 0)) ^ v9)))();
}

uint64_t sub_1000B1E7C()
{
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + (int)(v1 ^ 0x7F0)) - (v1 ^ 0x686LL)))();
}

uint64_t sub_1000B1E94()
{
  unint64_t v5 = STACK[0x660];
  bzero((void *)STACK[0x660], v1);
  unint64_t v6 = STACK[0x778];
  int v7 = STACK[0x680];
  int v8 = 176504963 * ((((v4 - 192) | 0x5EA181C6) - (v4 - 192) + ((v4 - 192) & 0xA15E7E38)) ^ 0xD40768D9);
  *(_DWORD *)(v4 - 160) = v2 - v8 - 230;
  *(void *)(v4 - 152) = STACK[0x658];
  *(void *)(v4 - 136) = v5;
  *(void *)(v4 - 176) = &unk_10021B7D4;
  *(void *)(v4 - 16_Block_object_dispose(va, 8) = v6;
  LOBYTE(STACK[0x16C4]) = -125 * ((((v4 + 64) | 0xC6) - (v4 + 64) + ((v4 + 64) & 0x38)) ^ 0xD9) + 66;
  *(_DWORD *)(v4 - 144) = v3 - v8 - 639381030;
  *(_DWORD *)(v4 - 12_Block_object_dispose(va, 8) = v8 + 1320091323;
  *(_DWORD *)(v4 - 18_Block_object_dispose(va, 8) = v8 + v3 + (~(v2 + 31 + 2 * v3 + 1077949069) | 0x35CC54FF) + 87682946;
  *(_DWORD *)(v4 - 184) = v7 - v8 - 471107164;
  sub_10013AD98(v4 - 192);
  return (*(uint64_t (**)(void))(v0 + 8LL * ((756 * (*(_DWORD *)(v4 - 192) == 0)) ^ v2)))();
}

uint64_t sub_1000B1FC4()
{
  STACK[0xA38] = v3;
  LODWORD(STACK[0x8CC]) = v0 - 1062194574;
  free((void *)(STACK[0x778] - 0x657CD3A60B29129ALL));
  free(v1);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + (((833 * ((115 * (v2 ^ 0x139) - 161972722) & 0x9A782F8 ^ 0x262) + 129)
                                        * (v4 == 0)) ^ (115 * (v2 ^ 0x139))))
                            - 12))();
}

uint64_t sub_1000B2000@<X0>(int a1@<W8>)
{
}

uint64_t sub_1000B2080()
{
  unsigned int v3 = (v0 + 178230520) & 0xF5606A77;
  __int16 v4 = v2 + ((2 * v1) & 0xEB9C ^ 0x18) + ((((v0 - 27400) & 0x6A77) + 30123) ^ v1);
  LOWORD(STACK[0x906]) = v4 - 30155;
  unint64_t v5 = malloc((unsigned __int16)(v4 - 30514));
  STACK[0x9A8] = (unint64_t)v5;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + (int)((120 * (v5 == 0LL)) ^ v3))
                            + -(unint64_t)((v3 - 85) | 0x405)
                            - ((v3 - 54) | 0x128)
                            + 2312))();
}

uint64_t sub_1000B212C(_BYTE *a1)
{
  *a1 = 1;
  a1[1] = (((v1 - 31) | 0x20) - 97 - (((v2 - 362) >> 7) & 0x26) + ((unsigned __int16)(v2 - 362) >> 8) + 74) ^ 0x13;
  a1[2] = (v2 - ((2 * v2 + 44) & 0x36) + 49) ^ 0x9B;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((115 * (LODWORD(STACK[0x9F4]) != 68355794)) ^ v1)) - 4LL))();
}

uint64_t sub_1000B21C8(_BYTE *a1)
{
  a1[3] = 4;
  __int16 v4 = ((v1 + 15617) ^ 0xD949) + LOWORD(STACK[0x9F4]) - 2 * ((LOWORD(STACK[0x9F4]) + 31022) & 0x5F35 ^ STACK[0x9F4] & 1);
  a1[4] = HIBYTE(v4) ^ 0xDF;
  a1[5] = v4 ^ 0x34;
  unint64_t v5 = (LODWORD(STACK[0x9F4]) | ((unint64_t)(LODWORD(STACK[0x9F4]) < v2) << 32)) + 726252888;
  return (*(uint64_t (**)(void))(v3
                              + 8LL
                              * (int)(v1 ^ 0x2F5CC501 ^ (1890 * ((((v5 - v1) | (v1 - v5)) & 0x8000000000000000LL) == 0LL)))))();
}

uint64_t sub_1000B22AC()
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (((v0 ^ 0x7A9) - 441) ^ (556 * (v1 != v2))))
                            - ((v0 ^ 0x7A9u)
                             - 376)
                            - (((v0 ^ 0x7A9) - 642) | 0x122u)
                            + 2596LL))();
}

void sub_1000B2368()
{
}

uint64_t sub_1000B23E8()
{
  int v1 = malloc(0x10uLL);
  STACK[0x9A8] = (unint64_t)v1;
}

uint64_t sub_1000B2430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 8LL * (int)((614 * (v6 != 0)) ^ v5))
                                                                                       - (v5 ^ 0x176LL)))( a1,  a2,  a3,  a4,  a5,  4294925268LL);
}

uint64_t sub_1000B24B0(int a1, int a2)
{
  __int16 v4 = (uint64_t (*)(void))(*(void *)(v3 + 8LL * (a2 ^ (1667 * (a1 == -9820))))
                         - ((a2 + 53012120) & 0xFCD71F92)
                         + 1654LL);
  LODWORD(STACK[0x650]) = v2;
  return v4();
}

uint64_t sub_1000B24F8(uint64_t a1, uint64_t a2, int a3)
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((925
                                          * ((unsigned __int16)(v3
                                                              - (((a3 - 473) ^ 0xFBD2) & (2 * (v4 - 6778)))
                                                              + ((v4 - 6778) ^ ((a3 - 1650) | 0x10F) ^ 0x815D)
                                                              + 28638) < 0xFFFDu)) ^ (a3 - 264)))
                            - 8LL))();
}

uint64_t sub_1000B2578(int a1)
{
  uint64_t v7 = ((unsigned __int16)(v5 - 8936) ^ 0xFFF7FFEF) + ((v3 + 992) & (2 * (v5 + 56600))) + 820394683;
  unint64_t v8 = (v7 | ((unint64_t)(v7 < 0x30DE3AA9) << 32)) + v2 + STACK[0x608] + 0x4807B2AF5E102500LL;
  unsigned int v9 = (((*(unsigned __int8 *)v8 - ((2 * *(unsigned __int8 *)v8) & 0xA8)) << 8) - 11264) ^ 0xFFFFD400;
  LODWORD(v_Block_object_dispose(va, 8) = (v9 - ((2 * v9) & 0xFFFFAA00) + 21945) ^ 0x55B9 | (30975 - *(unsigned __int8 *)(v8 + 1)) ^ 0x78FF;
  return (*(uint64_t (**)(void))(v6
                              + 8LL
                              * ((1939
                                * ((v1 | ((v1 < 0xFDDu) << 16)) - 142223786 >= ((2
                                                                                                * (((_DWORD)v8
                                                                                                  - ((2 * (_DWORD)v8) & 0xFFFFB360)
                                                                                                  - 9808) ^ v4)) & 0x34FA)
}

uint64_t sub_1000B26A4(int a1, uint64_t a2, __int16 a3)
{
  int v6 = a1 ^ 0x118;
  int v7 = v6 + 1659;
  unint64_t v8 = (char *)(STACK[0x608] + v4 + ((v6 + 1659 + v3) ^ (238 * v6)));
  uint64_t v9 = (__int16)(a3 - 9804);
  int v10 = v7 - 149;
  BOOL v11 = *v8 >= (char)((v7 ^ 0x2A) + 90);
  return (*(uint64_t (**)(uint64_t))(v5 + 8LL * ((2 * v11) | (16 * v11) | v10)))(v9);
}

uint64_t sub_1000B270C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
}

uint64_t sub_1000B2744(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  STACK[0x658] = a2 + 3;
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * (((a1 < (__int16)(((a5 - 1664) | 0x55) ^ 0xD9F3))
                                          * (((a5 - 488) | 0x21) ^ 0x451)) ^ (a5 - 274)))
                            - 12LL))();
}

uint64_t sub_1000B2794(int a1, uint64_t a2, int a3)
{
  uint64_t v5 = (uint64_t (*)(void))(*(void *)(v4 + 8LL * (a3 ^ (350 * (a1 == -9836)))) - (((a3 - 185) | 0x280u) ^ 0x686LL));
  LODWORD(STACK[0x650]) = v3;
  return v5();
}

uint64_t sub_1000B27D4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  return (*(uint64_t (**)(void))(v5
                              + 8LL
}

uint64_t sub_1000B2824(int a1)
{
}

uint64_t sub_1000B2864(uint64_t a1, uint64_t a2)
{
  STACK[0x648] = a2 + 3;
  return sub_1000B24F8(a1, a2, (int)a1 + 1579);
}

void sub_1000B2874()
{
}

uint64_t sub_1000B28B4@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  *(_BYTE *)(a1 + (a2 - 1810100425)) = 1;
  int v6 = (_BYTE *)(((a2 - 260725330) | ((unint64_t)((a2 - 260725330) < 0x5C599676) << 32))
               + a1
               - 1549375094);
  _BYTE *v6 = 0;
  v6[1] = (v3 - ((((v2 - 35) ^ 0xCD) + 2 * v3) & (5 * (v2 ^ 0xD7) - 87)) - 110) ^ 0x39;
  return (*(uint64_t (**)(void))(v5 + 8LL * (v2 ^ (835 * (v3 > v4)))))();
}

uint64_t sub_1000B2984(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3
                                                              + 8LL
                                                              * (int)((1979
                                                                     * ((v1 ^ 0xFFFFFFFFDF44CCA6LL) + v2 < (unint64_t)(v1 - 734) - 281)) ^ v1)))( a1,  0x5A3700CAC178BD5LL,  0x845760FC234DD6BLL);
}

uint64_t sub_1000B2A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL
                                        * ((90
}

uint64_t sub_1000B2A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL
}

uint64_t sub_1000B2AC8(uint64_t a1, int a2)
{
  v6.i64[0] = 0xC8C8C8C8C8C8C8C8LL;
  v6.i64[1] = 0xC8C8C8C8C8C8C8C8LL;
  int8x16_t *v2 = vaddq_s8(*v4, v6);
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
}

uint64_t sub_1000B2B18()
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((962 * ((((v0 - 907) ^ 0x58B ^ (v2 == v1)) & 1) == 0)) ^ v0)) - 4LL))();
}

uint64_t sub_1000B2B50(_BYTE *a1)
{
  unint64_t v6 = (v4 | ((unint64_t)(v4 < (v3 ^ 0x495) + v2) << 32)) + v5 + 0x12182CD2E75B1EB2LL;
  *a1 = *(_BYTE *)(v6 - 0x12182CD30258084CLL);
  a1[1] = *(_BYTE *)(v6 - 0x12182CD30258084BLL);
  a1[2] = *(_BYTE *)(v6 - 0x12182CD30258084ALL);
  a1[3] = *(_BYTE *)(v6 - 0x12182CD302580849LL);
  a1[4] = *(_BYTE *)(v6 - 0x12182CD302580848LL);
  a1[5] = *(_BYTE *)(v6 + (v3 ^ 0xEDE7D32CFDA7F25ELL));
  a1[6] = *(_BYTE *)(v6 - 0x12182CD302580846LL);
  a1[7] = *(_BYTE *)(v6 - 0x12182CD302580845LL);
  a1[8] = *(_BYTE *)(v6 - 0x12182CD302580844LL);
  a1[9] = *(_BYTE *)(v6 - 0x12182CD302580843LL);
  a1[10] = *(_BYTE *)(v6 - 0x12182CD302580842LL);
  a1[11] = *(_BYTE *)(v6 - 0x12182CD302580841LL);
  a1[12] = *(_BYTE *)(v6 - 0x12182CD302580840LL);
  a1[13] = *(_BYTE *)(v6 - 0x12182CD30258083FLL);
  a1[14] = *(_BYTE *)(v6 - 0x12182CD30258083ELL);
  a1[15] = *(_BYTE *)(v6 - 0x12182CD30258083DLL);
  LOWORD(STACK[0x906]) = 375;
  uint64_t v7 = malloc((*(_DWORD *)(v1 + 56) - 448329679));
  STACK[0x770] = (unint64_t)v7;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + (int)((931 * (v7 != 0LL)) ^ v3)) - 8))();
}

uint64_t sub_1000B2C70()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((((*(unsigned int *)(v0 + 56) | ((unint64_t)(*(unsigned int *)(v0 + 56) < 0x1AB8F7CFuLL) << 32)) == 448329679)
                                          * (49 * (v1 ^ 0x16A) - 442)) ^ v1))
                            - 8LL))();
}

uint64_t sub_1000B2D00@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W8>)
{
  LOWORD(STACK[0x73E]) = ((v6 + 2097) ^ 0x977F) + 28566 + (((v6 + 2097) << (((2 * a6) ^ 0x76) - 113)) & 0x2EFE);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)(v8
                                                                                                  + 8LL * ((614 * (v7 != 0)) ^ (2 * a6) ^ 0xC76))
                                                                                      - ((2 * a6) ^ 0xD00LL)))( a1,  a2,  a3,  a4,  a5,  0LL);
}

uint64_t sub_1000B2E08@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  int v5 = v2 - 1462;
  *(_BYTE *)(v4 + a2 + 234696783 - 0x3BF73A4905DA790BLL) = -36;
  unsigned int v6 = v3 - 1921731385 + ((v2 - 1130) | 0x400);
  BOOL v7 = v6 > 0x2A6DA98F;
  if (v6 < 0x2A6DA98E) {
    BOOL v7 = 1;
  }
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * ((v7 * (v5 ^ 0xD4)) ^ v5)) - 8LL))();
}

uint64_t sub_1000B2EC0@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  *(_BYTE *)(v8 + v3 + ((8 * v6) ^ 0x78u) - 1559 + a2 + ((unint64_t)(v3 + ((8 * v6) ^ 0x78u) - 1559 < v2) << 32)) = 92;
  unsigned int v9 = v5 + v3 + 1;
  int v10 = (v7 < v4) ^ (v9 < v4);
  BOOL v11 = v9 < v7;
  if (v10) {
    BOOL v11 = v7 < v4;
  }
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * (((8 * v11) | (16 * v11)) ^ v6)) - 8LL))();
}

uint64_t sub_1000B2F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = STACK[0x668];
  uint64_t v8 = *(void *)(STACK[0x668] + 64);
  int v9 = *(_DWORD *)(STACK[0x668] + 72);
  int v10 = 1448877107 * (((v6 - 192) & 0x8D583415 | ~((v6 - 192) | 0x8D583415)) ^ 0x39CD6C0);
  *(_DWORD *)(v6 - 160) = v10 ^ 0x5D49146A;
  *(_DWORD *)(v6 - 112) = v10 + 41966287;
  *(void *)(v6 - 144) = v7 + 0x5A78D2218AD9E76LL;
  *(void *)(v6 - 136) = a5;
  *(void *)(v6 - 152) = v7 + 0x54BD9D2603AA2709LL;
  *(_DWORD *)(v6 - 192) = 839746794 - v10 + ((v5 - 1046439741) & 0x3E5F63FD) + v9 - 729;
  *(_DWORD *)(v6 - 18_Block_object_dispose(va, 8) = v10 + 1598548771;
  *(_DWORD *)(v6 - 12_Block_object_dispose(va, 8) = v5 - v10 - 884;
  *(void *)(v6 - 120) = v7 + 0x59E3FCAF6574EC83LL;
  *(void *)(v6 - 176) = a4;
  *(void *)(v6 - 16_Block_object_dispose(va, 8) = v8;
  sub_1001BF444(v6 - 192);
  return ((uint64_t (*)(void))(*(void *)(a3
                                        + 8LL * (((*(_DWORD *)(v6 - 184) == 0) * (((v5 - 1558) | 0x680) ^ 0x6B8)) ^ v5))
                            - 4LL))();
}

uint64_t sub_1000B3070()
{
  unint64_t v7 = STACK[0x748];
  int v8 = 176504963 * ((2 * ((v6 - 192) & 0x61636310) - (v6 - 192) + 513580264) ^ 0x943A75F7);
  int v9 = LODWORD(STACK[0xA5C]) - v8 - 471107164;
  *(_DWORD *)(v6 - 18_Block_object_dispose(va, 8) = v8 + v3 - (((v5 + 937) ^ 0xCA33AD82) & (2 * v3 - 972152158)) - 937367841;
  *(_DWORD *)(v6 - 184) = v9;
  *(void *)(v6 - 152) = v4;
  LOBYTE(STACK[0x16C4]) = -125 * ((2 * ((v6 + 64) & 0x10) - (v6 + 64) - 24) ^ 0xF7) + 66;
  *(_DWORD *)(v6 - 12_Block_object_dispose(va, 8) = v8 + 1320091323;
  *(void *)(v6 - 176) = &unk_10021B7D4;
  *(void *)(v6 - 16_Block_object_dispose(va, 8) = v7;
  *(_DWORD *)(v6 - 160) = v5 - v8 - 645;
  *(void *)(v6 - 136) = v1;
  *(_DWORD *)(v6 - 144) = v3 - v8 - 1664431816;
  sub_10013AD98(v6 - 192);
  return (*(uint64_t (**)(void))(v0 + 8LL * (((*(_DWORD *)(v6 - 192) == 0) | (2 * (*(_DWORD *)(v6 - 192) == 0))) ^ v5)))();
}

uint64_t sub_1000B3188()
{
  STACK[0xA38] = v0;
  LODWORD(STACK[0x8CC]) = v3 + (v1 ^ 0x83972F52);
  free((void *)(STACK[0x748] - 0x657CD3A60B29129ALL));
  free(v2);
  return ((uint64_t (*)(void))*(&off_10025C670 + ((929 * (v4 == ((v5 - 24346761) & 0x1737BCF) - 457)) ^ (v5 - 1157))))();
}

uint64_t sub_1000B38D4()
{
  int v1 = malloc(0x10uLL);
  STACK[0xA48] = (unint64_t)v1;
  return ((uint64_t (*)(void))*(&off_10025C670 + (((v1 != 0LL) * ((v0 + 1371) ^ 0x721)) ^ v0)))();
}

uint64_t sub_1000B3930(uint64_t a1)
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((103
                                          * (a1
                                           - (v1 ^ 0xBD218A5A)
                                           - STACK[0xA38]
                                           - (LODWORD(STACK[0x8CC]) + 1507809170)
                                           - ((unint64_t)((LODWORD(STACK[0x8CC]) + 1507809170) < 0x7A6F7021) << 32)
                                           + 0x13790FD9FLL > 0xF)) ^ v1))
                            - ((v1 + 12199643) & 0x745D3C9 ^ 0x1C5LL)))();
}

uint64_t sub_1000B3A08@<X0>(int8x16_t *a1@<X0>, uint64_t a2@<X8>)
{
  int8x16_t v5 = *(int8x16_t *)(v2 + ((2 * (v4 ^ 0x288u)) ^ (unint64_t)(a2 + 1028)) + v3);
  v6.i64[0] = 0xB9B9B9B9B9B9B9B9LL;
  v6.i64[1] = 0xB9B9B9B9B9B9B9B9LL;
  int8x16_t v7 = veorq_s8(v5, v6);
  v8.i64[0] = 0x7272727272727272LL;
  v8.i64[1] = 0x7272727272727272LL;
  int8x16_t v9 = vandq_s8(vaddq_s8(v5, v5), v8);
  v8.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
  v8.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
  *a1 = vaddq_s8(vaddq_s8(v7, v8), v9);
  return sub_1000B3B28();
}

uint64_t sub_1000B3A5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)(v5 + a1 - 0x631F69ED56FBD83ALL) = (*(_BYTE *)(v2 + (((_DWORD)v3 + 1733677685) & 0xDB88A68E) + a2 + v4) ^ 0xB9)
                                             + ((2 * *(_BYTE *)(v2 + (((_DWORD)v3 + 1733677685) & 0xDB88A68E) + a2 + v4)) & 0x72)
                                             + 127;
  return (*(uint64_t (**)(void))(v7
                              + 8LL
                              * (int)((681
                                     * (((v6 + 1 - (v3 | ((unint64_t)(v3 - 1060431777) << 32))) | ((v3 | ((unint64_t)(v3 - 1060431777) << 32)) - (v6 + 1))) >> 63)) ^ (v3 + 1121875019))))();
}

uint64_t sub_1000B3B28()
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL * (((STACK[0xA38] == 0) * (v0 - 1004 + 245 * (v0 ^ 0x681) - 1197)) ^ (v0 - 1060))))();
}

uint64_t sub_1000B3B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * ((((v6 - 366637800) & 0x15DA75EF ^ 0x169) * (a6 == 0)) ^ v6)) - 12LL))();
}

uint64_t sub_1000B3BAC@<X0>(void *a1@<X0>, int a2@<W5>, int a3@<W8>)
{
  unsigned int v3 = (a3 + 1076136297) & 0xBFDB76DF;
  free(a1);
  STACK[0xA38] = 0LL;
  LODWORD(STACK[0x8CC]) = 546314367;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
}

void sub_1000B3C30()
{
}

uint64_t sub_1000B3D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v10 = v6 ^ 0x4CD;
  free(v8);
  STACK[0xA38] = 0LL;
  LODWORD(STACK[0x8CC]) = v7;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + ((476 * (a6 == ((v10 + 133241776) & 0xF80EE7E7 ^ (v10 + 920)))) ^ v10))
                            - 8))();
}

uint64_t sub_1000B3D3C()
{
  uint64_t v1 = malloc(0x10uLL);
  STACK[0x740] = (unint64_t)v1;
}

uint64_t sub_1000B3D7C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(v4
                              + 8LL
                              * (v2 ^ (422
                                     * (a1
                                      - ((v1 + 182231395)
                                       + v3
}

void sub_1000B3E38(int8x16_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  int8x16_t v6 = *(int8x16_t *)(a2 + ((v4 - 1397674787) & 0x534ED6F6 ^ a3) + v3);
  v7.i64[0] = 0x404040404040404LL;
  v7.i64[1] = 0x404040404040404LL;
  v8.i64[0] = 0x202020202020202LL;
  v8.i64[1] = 0x202020202020202LL;
  *a1 = vaddq_s8(vsubq_s8(v6, vandq_s8(vaddq_s8(v6, v6), v7)), v8);
  LODWORD(STACK[0x8AC]) = v5 + 16;
  JUMPOUT(0x1000B3D14LL);
}

uint64_t sub_1000B3F88()
{
  return ((uint64_t (*)(unint64_t, unint64_t))(*(void *)(v0
                                                                                 + 8LL
                                                                                 * ((981
                                                                                   * (((v1 - 241) ^ 0x35B5C233LL) == 901104314)) ^ v1))
                                                                     - 4LL))( STACK[0x798],  STACK[0x648] + 1);
}

void sub_1000B4000()
{
}

void sub_1000B4010(void *a1)
{
  *(_DWORD *)(v2 + 56) = v1;
}

uint64_t sub_1000B401C(void *a1)
{
  unsigned int v3 = (v1 >> 4) ^ 0xE | v1 ^ 0xFFFFFFE8;
  int v4 = v3 - ((v3 << ((v2 - 120) ^ 0x83)) & 0x5E) + 47;
  int v5 = ((v4 & 0xFC) >> 2) ^ 0xB | v4 ^ 0x2F;
  int v6 = -42022 * ((((v5 & 1 | ((v5 & 2) != 0)) ^ 0xDD) + 24) ^ 0x79F0FB49) + 2064240104;
  free(a1);
  STACK[0x798] = 0LL;
  LODWORD(STACK[0x880]) = 708975256;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + ((1036 * (v6 == 0)) ^ v2)) - 8))();
}

uint64_t sub_1000B40D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(v8
                                                                                        + 8LL
                                                                                        * (((*(_DWORD *)(v5 + 4) == v7 - 2)
                                                                                          * ((v6 ^ 0x79D) + 667)) ^ (v6 - 1379))))( a1,  a2,  a3,  a4,  a5,  0LL);
}

uint64_t sub_1000B4108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7
                                                                                         + 8LL
                                                                                         * (int)(((((((v5 ^ 0x22C) + 1495) ^ (v6 == 0)) & 1) == 0)
                                                                                                * (((v5 ^ 0x22C)
                                                                                                  + 103622476) & 0xF9D2DDEF ^ 0xFB)) ^ v5 ^ 0x22C)))( a1,  a2,  a3,  a4,  a5,  4294925268LL);
}

uint64_t sub_1000B4168()
{
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + ((201 * (v0 == v1 + v2 - 55)) ^ v2)) - (v2 ^ 0x148u) + 275))();
}

uint64_t sub_1000B41A4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W8>)
{
  if (STACK[0x618]) {
    BOOL v7 = STACK[0x658] == 0;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = !v7;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6
                                                                                         + 8LL
                                                                                         * (((a6 ^ 0x79D ^ (a6 + 203))
                                                                                           * v8) ^ a6)))( a1,  a2,  a3,  a4,  a5,  4294925273LL);
}

uint64_t sub_1000B41DC@<X0>(int a1@<W8>)
{
  int v3 = a1 - 261;
  int v4 = 308 * (v3 ^ 0x18);
  STACK[0x950] = (unint64_t)&STACK[0xBE8];
  STACK[0xA88] = (unint64_t)&STACK[0xBA4];
  int v5 = (_BYTE *)STACK[0x658];
  LOBYTE(STACK[0xB80]) = *(_BYTE *)STACK[0x658];
  LOBYTE(STACK[0xB81]) = v5[1];
  LOBYTE(STACK[0xB82]) = v5[2];
  LOBYTE(STACK[0xB83]) = v5[3];
  LOBYTE(STACK[0xB84]) = v5[4];
  LOBYTE(STACK[0xB85]) = v5[5];
  LOBYTE(STACK[0xB86]) = v5[6];
  LOBYTE(STACK[0xB87]) = v5[7];
  LOBYTE(STACK[0xB88]) = v5[8];
  LOBYTE(STACK[0xB89]) = v5[9];
  LOBYTE(STACK[0xB8A]) = v5[10];
  LOBYTE(STACK[0xB8B]) = v5[11];
  LOBYTE(STACK[0xB8C]) = v5[12];
  LOBYTE(STACK[0xB8D]) = v5[13];
  LOBYTE(STACK[0xB8E]) = v5[14];
  LOBYTE(STACK[0xB8F]) = v5[15];
  LODWORD(STACK[0xC48]) = 781741397;
  STACK[0xC28] = 0xE8E125912DC2764BLL;
  STACK[0xC30] = 0xC5C1D9754D4951FDLL;
  STACK[0xC38] = 0x3A3E268AB2B6AE02LL;
  LODWORD(STACK[0xC40]) = -371289332;
  LODWORD(STACK[0xC44]) = 2028013733;
  LODWORD(v5) = (v1 ^ 0xEE7E8DF5) + 1576007552 + ((v4 - 587392638) & (2 * v1));
  STACK[0x8E8] = *(void *)(v2 + 8LL * v3) - 4LL;
  unint64_t v6 = STACK[0x618];
  STACK[0x618] = STACK[0x618];
  STACK[0xA68] = (unint64_t)&STACK[0xBE8];
  LODWORD(STACK[0x8E4]) = (_DWORD)v5;
  STACK[0x970] = v6;
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((208
                                          * ((_DWORD)v5
                                           + 1028141499
                                           + ((LODWORD(STACK[0xC2C]) << ((v4 + 75) & 0xCE ^ 0x83)) & 0x6A ^ (((v4 + 1642128791) & 0x9E1F1EF9) - 1751))
                                           + (STACK[0xC2C] & 0x3F ^ 0xFEFB7DA4)
                                           + 2001586907 < 0xFFFFFFC0)) ^ v4))
                            - 8LL))();
}

uint64_t sub_1000B4330()
{
  return (*(uint64_t (**)(void))(v3 + 8LL * (((((v2 - 1313) | 0x4C8) - 246) * (v0 != v1)) ^ v2)))();
}

uint64_t sub_1000B4368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v8
                                                               + 8LL
                                                               * (int)((((708 * ((a5 - 936) ^ 0x123)) ^ 0x7F7)
                                                                      * ((v5 >> 3) & 1)) ^ (a5 - 936)))
                                                   - 12LL))( a1,  v6 + v7);
}

uint64_t sub_1000B43B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(int8x8_t *)(v5 + v7) = vadd_s8(*(int8x8_t *)(v9 + v7), (int8x8_t)0xC8C8C8C8C8C8C8C8LL);
  return ((uint64_t (*)(uint64_t, unint64_t, uint64_t))(*(void *)(v10
                                                                                 + 8LL
                                                                                 * ((666
                                                                                   * (((((a5 - 1127)
                                                                                       - 281LL
                                                                                       - (v6 & 0xFFFFFFFFFFFFFFF8LL)
                                                                                       + v7) | ((v6 & 0xFFFFFFFFFFFFFFF8LL)
                                                                                              - v7
                                                                                              - (a5 - 1127)
                                                                                              + 281)) & 0x8000000000000000LL) == 0LL)) ^ a5))
                                                                     - 8LL))( a1,  (v6 & 0xFFFFFFFFFFFFFFF8LL) + v8,  281LL - (a5 - 1127));
}

void sub_1000B4420()
{
}

uint64_t sub_1000B442C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((((v7 ^ 0x5DC) + 269) * (v6 == a6)) ^ v7)) - 12LL))();
}

uint64_t sub_1000B4468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
}

uint64_t sub_1000B44B4@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  *(_BYTE *)(a1 + (((v2 - 889) | 4) ^ 0x941C0E48) + a2) = 2;
  int v6 = (_BYTE *)(((a2 - 136342551) | ((unint64_t)((a2 - 136342551) < 0x63C384B1) << 32))
               + a1
               - 1673757873);
  _BYTE *v6 = BYTE1(v4) ^ 2;
  v6[1] = v4 ^ 0x2C;
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * (v2 ^ (510
                                               * ((v4 ^ v3 ^ 0xDDFFFFF3FDFDFDF7LL)
                                                + 0x2200000C60A0218ALL
                                                + ((2LL * (v4 ^ v3)) & 0x1FBFBFBEELL) == 1587421057))))
                            - 4LL))();
}

uint64_t sub_1000B45DC@<X0>(uint64_t a1@<X8>)
{
  BOOL v9 = v3 < v1;
  *(_BYTE *)(v5 + a1 - 0x6F6E60911E2522A6LL) = *(_BYTE *)(((v2 - 1193) | 0x134u) + v4 + v7 - 0x2FECD2E6A52ACB92LL) ^ 2;
  if (v9 == v6 - 0x3C01E9432D4CCC57LL < v1) {
    BOOL v9 = v6 - 0x3C01E9432D4CCC57LL < v3;
  }
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((510 * !v9) ^ v2)) - 4LL))();
}

uint64_t sub_1000B4680()
{
  LOWORD(STACK[0x73E]) = 1816;
}

uint64_t sub_1000B46CC()
{
  LOWORD(STACK[0x73E]) = ((LOWORD(STACK[0xA84]) + 4363) ^ 0xD79D)
                       + 12158
                       + ((v0 - 21061) & (2 * (LOWORD(STACK[0xA84]) + 4363)));
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((398 * (v1 != v2)) ^ (v0 + 270))) - 4LL))();
}

uint64_t sub_1000B4738()
{
  LOWORD(STACK[0x73E]) = v2
                       + v0
                       - 481
                       + ((*(_WORD *)(STACK[0x668] + 56) + 2097) ^ 0xD6F3)
                       + ((2 * (*(_WORD *)(STACK[0x668] + 56) + 2097)) & 0xADE6)
                       + 10340;
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((((v0 - 481) ^ 0x539) * (v3 != v1)) ^ (v0 - 481))) - 4LL))();
}

uint64_t sub_1000B47A0()
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((398 * (v1 != v2)) ^ v0)) - 4LL))();
}

uint64_t sub_1000B47DC@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (((a1 ^ 0x539) * (v2 != v1)) ^ a1)) - 4LL))();
}

uint64_t sub_1000B480C@<X0>(int a1@<W8>)
{
  unint64_t v3 = STACK[0x668];
  LOWORD(STACK[0x73E]) = v1
                       + ((*(_WORD *)(STACK[0x668] + 56) + 2097) ^ 0x76FE)
                       + (((*(_WORD *)(STACK[0x668] + 56) + 2097) << (((a1 ^ 7) + 17) ^ 0xBD)) & 0xEDFC)
                       - 30459;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((100 * (*(void *)(v3 + 136) != 0LL)) ^ a1)) - 4LL))();
}

uint64_t sub_1000B4874()
{
  return (*(uint64_t (**)(void))(v2 + 8LL * (((*(_DWORD *)(v1 + 144) != 150298638) * (v0 ^ 0x5FA)) ^ v0)))();
}

uint64_t sub_1000B48A8@<X0>(__int16 a1@<W8>)
{
  int v3 = (v1 - 1330) | 0x21;
  __int16 v4 = v2 + ((2 * (a1 - 24590)) & 0xF3FC) + ((a1 - 24590) ^ v3 ^ 0x7955) - 31227;
  LOWORD(STACK[0x73E]) = v4;
  uint64_t v5 = malloc((unsigned __int16)(v4 - 1813));
  STACK[0x770] = (unint64_t)v5;
  return ((uint64_t (*)(void))*(&off_10025C670 + (((v5 != 0LL) * (((v3 ^ 0x54C) - 508) ^ 2)) ^ v3)))();
}

uint64_t sub_1000B4928(_BYTE *a1)
{
  *a1 = 1;
  a1[1] = (((unsigned __int16)(v2 - 1816) >> 8)
  a1[2] = (v2 - 2 * ((v2 + 8) & 0xB ^ v2 & 3) - 16) ^ 8;
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((1978 * (LODWORD(STACK[0x9F4]) != v3)) ^ v1)) - 8LL))();
}

uint64_t sub_1000B49AC@<X0>(_BYTE *a1@<X0>, int a2@<W8>)
{
  a1[3] = 4;
  int v3 = LOWORD(STACK[0xA84]) - (((LOWORD(STACK[0xA84]) << (((a2 - 107) ^ 1) & 0x7D)) + 534) & 0x1F1E) + 8346;
  a1[4] = BYTE1(v3) ^ 0xF;
  a1[5] = v3 ^ 0x8F;
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((226
}

uint64_t sub_1000B4A7C()
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL * (((((v0 | 0x682) - 1307) ^ 0x65F) * (v1 != v2)) ^ ((v0 | 0x682) - 671)))
                            - (((v0 | 0x682u) - 671) ^ 0x3EBLL)))();
}

uint64_t sub_1000B4B78@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  *(_BYTE *)(a1 + (a2 - 1209526082)) = 1;
  unint64_t v4 = STACK[0x668];
  __int16 v5 = *(_WORD *)(STACK[0x668] + 56)
     - ((2 * *(_WORD *)(STACK[0x668] + 56) + 4194) & (((v2 + 1305) | 2) + 15774))
     - 21951;
  uint64_t v6 = (_BYTE *)(((a2 - 1122171600) | ((unint64_t)((a2 - 1122171600) < 0x534EC71) << 32))
               + a1
               - 87354481);
  _BYTE *v6 = HIBYTE(v5) ^ 0xA2;
  v6[1] = v5 ^ 0x10;
  BOOL v7 = (*(unsigned int *)(v4 + 56) | ((unint64_t)(*(unsigned int *)(v4 + 56) < 0x1AB8F7CFuLL) << 32)) == 448329679;
  return (*(uint64_t (**)(void))(v3 + 8LL * ((v7 | (16 * v7)) ^ v2)))();
}

uint64_t sub_1000B4C9C()
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * (((((v0 - 1631) | 0x5C4) + ((v0 - 386753731) & 0x170D5FF2) - 1759) * (v2 != v1)) ^ (v0 - 1075)))
                            - 8LL))();
}

uint64_t sub_1000B4DF4@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  *(_BYTE *)(a1 + (a2 - 1209526082)) = 2;
  unint64_t v4 = STACK[0x668];
  __int16 v5 = *(_WORD *)(STACK[0x668] + 56) - ((2 * *(_WORD *)(STACK[0x668] + 56) + 4194) & 0x794E) + 17624;
  uint64_t v6 = (_BYTE *)(((a2 - 134145554) | ((unint64_t)((a2 - 134145554) < 0x4019012F) << 32))
               + ((2 * (v2 ^ 0x2F3)) ^ 0x315B80111FB7A5E3LL)
               + a1
               - 0x315B80115FD0A490LL);
  _BYTE *v6 = HIBYTE(v5) ^ 0x3C;
  v6[1] = v5 ^ 0xA7;
  return (*(uint64_t (**)(void))(v3
                              + 8LL
                              * ((802
                                * ((*(unsigned int *)(v4 + 56) | ((unint64_t)(*(unsigned int *)(v4 + 56) < 0x1AB8F7CFuLL) << 32)) == 448329679)) ^ v2)))();
}

uint64_t sub_1000B4F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)(v7
                                                                                                  + 8LL * ((1598 * (*(void *)(v5 + 136) != 0LL)) ^ (v6 - 1075)))
                                                                                      - ((v6 - 804358035) & 0x2FF181BB ^ 0xA3LL)))( a1,  a2,  a3,  a4,  a5,  0LL);
}

uint64_t sub_1000B5018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(v7
                                                                                        + 8LL
                                                                                        * ((79
                                                                                          * (((*(_DWORD *)(v5 + 144) == 150298638) ^ (v6 + 60)) & 1)) ^ v6)))( a1,  a2,  a3,  a4,  a5,  0LL);
}

uint64_t sub_1000B5064@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  int v7 = a2 + 90590467 + v4;
  *(_BYTE *)(a1 + v7 - 1748447736 + v3 + 1340) = 5;
  __int16 v8 = *(_WORD *)(v2 + 144) - ((2 * *(_WORD *)(v2 + 144) + 16356) & 0x2E60) - 18654;
  BOOL v9 = (_BYTE *)(((v7 - 125525280) | ((unint64_t)((v7 - 125525280) < 0x60BBCEF0) << 32))
               + a1
               - 1622920944);
  _BYTE *v9 = HIBYTE(v8) ^ 0x17;
  v9[1] = v8 ^ 0x30;
  return (*(uint64_t (**)(void))(v6
                              + 8LL
                              * ((22
                                * ((*(unsigned int *)(v2 + 144) | ((unint64_t)(*(_DWORD *)(v2 + 144) < v5) << 32)) != 150298638)) ^ v3)))();
}

uint64_t sub_1000B5194@<X0>(unint64_t a1@<X8>)
{
  BOOL v11 = v1 < a1;
  *(_BYTE *)(v4 + (v3 ^ 0xA6C45F6F4BC74DDALL) + v_Block_object_dispose(va, 8) = *(_BYTE *)(v7 + v5 - 0x6BCE7EBA2137C3FELL) - 53;
  if (v11 == v9 - 0x4583B8494AABB54ELL < a1) {
    BOOL v11 = v9 - 0x4583B8494AABB54ELL < v1;
  }
  return (*(uint64_t (**)(void))(v10 + 8LL * ((v11 * v6) ^ v2)))();
}

uint64_t sub_1000B5228(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_BYTE *)(v6 + v4 - 0x55E63EBFEA0FE26ELL) = *(_BYTE *)(a2 + v8 - 0x5A3700CAC178BD5LL) - 56;
  return (*(uint64_t (**)(void))(v9 + 8LL * ((479 * (v7 == v5 + 0x845760FA179ACC3LL)) ^ a4)))();
}

void sub_1000B5298()
{
}

void sub_1000B52AC()
{
}

uint64_t sub_1000B535C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v10 = v7 < v5;
  uint64_t v11 = (v3 + 1);
  *(_BYTE *)(v9 + v11 + a2 + ((unint64_t)(v11 < v2) << 32)) = 92;
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * (((((v4 + 95) ^ v10) & 1) * v8) ^ v4)) - 12LL))();
}

uint64_t sub_1000B53C0(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 64);
  int v8 = *(_DWORD *)(v2 + 72);
  *(void *)(v6 - 120) = v2 + 0x59E3FCAF6574EC83LL;
  int v9 = 1448877107 * ((((v6 - 192) | 0xC561C967) + (~(v6 - 192) | 0x3A9E3698)) ^ 0xB45AD44C);
  *(_DWORD *)(v6 - 160) = v9 ^ 0x5D49146A;
  *(_DWORD *)(v6 - 12_Block_object_dispose(va, 8) = v3 - v9 - 847;
  *(void *)(v6 - 136) = v5;
  *(_DWORD *)(v6 - 192) = v8 - v9 + 839746794;
  *(_DWORD *)(v6 - 18_Block_object_dispose(va, 8) = v9 + 1598548771;
  *(void *)(v6 - 176) = v4;
  *(void *)(v6 - 16_Block_object_dispose(va, 8) = v7;
  *(void *)(v6 - 152) = v2 + 0x54BD9D2603AA2709LL;
  *(void *)(v6 - 144) = v2 + 0x5A78D2218AD9E76LL;
  *(_DWORD *)(v6 - 112) = v9 + 41966287;
  sub_1001BF444(v6 - 192);
}

void sub_1000B54EC()
{
  *(_DWORD *)(v2 + 56) = v0;
}

void sub_1000B57BC(void *a1)
{
  int v3 = v1 ^ v2 ^ 0x57 | ((v2 & 0xF0) >> 4) ^ 0xA;
  unsigned int v4 = (((v3 - ((2 * v3) & 0x26) - 109) & 0xFCu) >> 2) ^ 0x24 | (v3 - ((2 * v3) & 0x26) - 109) ^ 0xFFFFFF93;
  int v5 = v4 & 1 | (((~(2 * v4) + v4) & 2) == 0);
  unsigned int v6 = -42022 * ((v5 | (2 * v5)) ^ 0xFFFEDEFD) + 1185885582;
  free(a1);
  *(_DWORD *)(v7 + 56) = v6;
}

uint64_t sub_1000B583C(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
}

uint64_t sub_1000B58A0(int a1, uint64_t a2, unsigned int a3)
{
  v18.val[1].i64[0] = ((_BYTE)v5 - 1) & 0xF;
  v18.val[1].i64[1] = v5 & 0xF;
  v18.val[2].i64[0] = ((_BYTE)v5 + 1) & 0xF;
  v18.val[2].i64[1] = ((_BYTE)v5 + 2) & 0xF;
  v18.val[3].i64[0] = ((_BYTE)v5 + 3) & 0xF;
  v18.val[3].i64[1] = ((_BYTE)v5 + 4) & 0xF;
  v19.val[0].i64[0] = ((_BYTE)v5 + 5) & 0xF;
  v19.val[0].i64[1] = ((_BYTE)v5 + 6) & 0xF;
  v19.val[1].i64[0] = (v5 + 7) & 0xF;
  v19.val[1].i64[1] = (v5 + 8) & 0xF;
  v19.val[2].i64[0] = (v5 + 9) & 0xF;
  v19.val[2].i64[1] = ((_BYTE)v5 + 10) & 0xF;
  v19.val[3].i64[0] = ((_BYTE)v5 + 11) & 0xF;
  v19.val[3].i64[1] = ((_BYTE)v5 + 12) & 0xF;
  unsigned int v13 = v5 + v4;
  v14.i64[0] = 0xE3E3E3E3E3E3E3E3LL;
  v14.i64[1] = 0xE3E3E3E3E3E3E3E3LL;
  v15.i64[0] = 0x3030303030303030LL;
  v15.i64[1] = 0x3030303030303030LL;
  v18.val[0].i64[0] = ((_BYTE)v5 + (_BYTE)v4) & 0xF;
  v18.val[0].i64[1] = ((_BYTE)v5 + 14) & 0xF;
  v16.i64[0] = vqtbl4q_s8(v18, (int8x16_t)xmmword_1002013F0).u64[0];
  v16.i64[1] = vqtbl4q_s8(v19, (int8x16_t)xmmword_1002013F0).u64[0];
  *(int8x16_t *)(v11 + (v3 + v6)) = veorq_s8( veorq_s8( veorq_s8( veorq_s8( veorq_s8( *(int8x16_t *)(v7 + v13),  *(int8x16_t *)(v8 + (v13 & 0xF))),  *(int8x16_t *)(a3 + 806 + (unint64_t)(v13 & 0xF)
                                                                       + v9
                                                                       - 1211)),
                                                        *(int8x16_t *)((v13 & 0xF) + v10 + 2)),
                                                      v15),
                                                    vmulq_s8(v16, v14));
  return (*(uint64_t (**)(void))(v12 + 8LL * ((732 * ((a1 & 0xFFFFFFF0) == 16)) ^ a3)))();
}

void sub_1000B59E4()
{
}

uint64_t sub_1000B59F4(int a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * (((((a1 == a2) ^ (a5 - 13)) & 1)
                                          * (((a5 - 1208) | 0x686) ^ 0x516)) ^ a5))
                            - 8LL))();
}

uint64_t sub_1000B5A4C( int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL
                                             * ((29 * (((((a8 - 609761308) ^ 0xDBA7CBF9) - 1411) & a1) != 0)) ^ a8))
                            - 12LL))();
}

uint64_t sub_1000B5A90(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v16 = (a7 ^ 0x2458318A) & a1;
  LODWORD(STACK[0x658]) = v16;
  v18.val[0].i64[0] = ((_BYTE)v9 + (_BYTE)v8 + (_BYTE)a2) & 0xF;
  v18.val[0].i64[1] = ((_BYTE)v9 + (_BYTE)a2 + 14) & 0xF;
  v18.val[1].i64[0] = ((_BYTE)v9 + (_BYTE)a2 + ((((a7 ^ 0xE) - 58) | 0x91) ^ 0xC)) & 0xF;
  v18.val[1].i64[1] = (v9 + a2) & 0xFLL;
  v18.val[2].i64[0] = ((_BYTE)v9 + (_BYTE)a2 + 1) & 0xF;
  v18.val[2].i64[1] = ((_BYTE)v9 + (_BYTE)a2 + 2) & 0xF;
  v18.val[3].i64[0] = ((_BYTE)v9 + (_BYTE)a2 + 3) & 0xF;
  v18.val[3].i64[1] = ((_BYTE)v9 + (_BYTE)a2 + 4) & 0xF;
  *(int8x8_t *)(v15 + (v7 + v10 + a2)) = veor_s8( veor_s8( veor_s8( veor_s8( *(int8x8_t *)(v11 + (v9 + v8 + a2)),  *(int8x8_t *)(v12 + v18.val[0].i64[0])),  veor_s8( *(int8x8_t *)(v18.val[0].i64[0] + v13 + 5),  *(int8x8_t *)(v18.val[0].i64[0] + v14 + 2))),  (int8x8_t)0x3030303030303030LL),  vmul_s8( (int8x8_t)*(_OWORD *)&vqtbl4q_s8( v18,  (int8x16_t)xmmword_100201400),  (int8x8_t)0xE3E3E3E3E3E3E3E3LL));
  return ((uint64_t (*)(__n128))*(&off_10025C670 + (int)((885 * (v16 - 8 == a2)) ^ a7 ^ 0xDBA7CF0E)))((__n128)xmmword_100201400);
}

void sub_1000B5BB0()
{
}

uint64_t sub_1000B5BB8(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((((((v1 - 918213396) & 0x36BAD5CB) + 134) ^ 2) * (a1 == LODWORD(STACK[0x658]))) ^ v1))
                            - 8LL))();
}

uint64_t sub_1000B5C00@<X0>(int a1@<W8>)
{
  _DWORD *v2 = v2[623];
  return (*(uint64_t (**)(void))(v1 + 8LL * (((v3 - 1 != ((a1 - 944) | 0x680) + 1521778934) * (a1 - 821)) ^ (a1 - 135))))();
}

uint64_t sub_1000B5C4C@<X0>(int a1@<W8>)
{
  uint64_t v4 = 4LL * (v1 - 1026811161);
  unsigned int v5 = *((_DWORD *)&xmmword_100273C44 + (v1 - 1026811162));
  int v6 = (*(_DWORD *)((char *)&xmmword_100273C44 + v4) ^ 0xCA8A73D4 ^ (1566083941 * (v5 ^ 0x1D5D65FB ^ (v5 >> 30))
                                                                   - ((-1162799414 * (v5 ^ 0x1D5D65FB ^ (v5 >> 30))) & 0xAFAE2C5E)
                                                                   - 673769937))
     - v1;
  *(_DWORD *)((char *)&xmmword_100273C44 + v4) = v6 - ((2 * v6 + 979880498) & 0x3ABACBF6) + 1519471380;
  unint64_t v7 = 1606104089 * ((v3 - 192) ^ 0xC2BEFB347517423ELL);
  *(_DWORD *)(v3 - 164) = -1231242048 - v7 + a1;
  *(_DWORD *)(v3 - 172) = ((a1 - 1340772251) ^ 0x5D) + v7;
  *(_DWORD *)(v3 - 16_Block_object_dispose(va, 8) = (a1 - 1340772251) ^ v7;
  *(_DWORD *)(v3 - 180) = v7;
  *(_DWORD *)(v3 - 176) = (a1 - 1340772247) ^ v7;
  *(void *)(v3 - 192) = (v1 - 99615332) + v7;
  *(void *)(v3 - 160) = 927195828 - v7;
  uint64_t v8 = sub_10013ACFC(v3 - 192);
  return ((uint64_t (*)(uint64_t))(*(void *)(v2 + 8LL * *(int *)(v3 - 184)) - 4LL))(v8);
}

uint64_t sub_1000B5DA4()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((1760
                                          * (v0 < ((LODWORD(STACK[0x660]) - 1539142471) & 0x5BBD6FEFu) + 927195017)) ^ (LODWORD(STACK[0x660]) - 720)))
                            - (((LODWORD(STACK[0x660]) - 1616) | 0x380u) ^ 0x3BALL)))();
}

uint64_t sub_1000B5E00()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((1760 * (v0 > ((LODWORD(STACK[0x660]) - 855) ^ 0x3743E608u))) ^ (LODWORD(STACK[0x660]) - 720)))
                            - (LODWORD(STACK[0x660]) ^ 0x68ALL)))();
}

uint64_t sub_1000B5E4C()
{
  LODWORD(xmmword_100273C44) = -1654823429;
  free((void *)STACK[0x650]);
  return sub_1000DE62C();
}

uint64_t sub_1000B5EBC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unsigned int v75 = (((v70 + 2105179262) >> 8) ^ 0x33EF8FEF)
      + v70
      + (((v70 + 2105179262) >> 7) & 0x1DF1FDE);
  unsigned int v76 = v75 + (((v75 + 1233841295) >> 5) ^ 0x38194000) - (((v75 + 1233841295) >> 4) & 0xFCD7FFE) + 1;
  int v77 = v76 - ((2 * v76 + 585324828) & 0x4E0B65CC) + 947347316;
  unsigned int v78 = ((2 * ((v77 ^ 0x2705B2E6) - 1879573490)) & 0xDF7D7F9E) + (((v77 ^ 0x2705B2E6) - 1879573490) ^ 0x6FBEBFCF);
  unsigned int v79 = (((v78 - 1874771919) >> 10) ^ 0x2FFB673F) + v78 + (((v78 - 1874771919) >> 9) & 0x76CE7E);
  unsigned int v80 = ((v79 + 1615190258) & 0xDFFECFE2) + v79 + (((v79 + 1615190258) >> 1) ^ 0x6FFF67F1);
  unsigned int v81 = v80 - ((2 * v80 - 527638014) & 0x9B8BD52A) - 1106486378;
  unsigned int v82 = ((2 * ((v81 ^ 0xCDC5EA95) + 1287124013)) & 0xEFDBFD84) + (((v81 ^ 0xCDC5EA95) + 1287124013) ^ 0x77EDFEC2);
  unsigned int v83 = v82 + (((v82 - 2012085954) >> 13) ^ 0x81001000) - ((2 * ((v82 - 2012085954) >> 13)) & 0xFDFFE);
  unsigned int v84 = v83 + (((v83 + 118616382) >> 6) ^ 0x48090009) - (((v83 + 118616382) >> 5) & 0x7EDFFEC) + 2;
  int v85 = v84 - ((2 * v84 + 504488550) & 0x145BC00E) + 1228329274;
  unsigned int v86 = ((2 * ((v85 ^ 0x8A2DE007) - 1282870125)) & 0xEBBBAE7E) + (((v85 ^ 0x8A2DE007) - 1282870125) ^ 0xF5DDD73F);
  unsigned int v87 = (((v86 + 170010817) >> 8) ^ 0xFF5EBDF7) + v86 + (((v86 + 170010817) >> 7) & 0xBD7BEE);
  unsigned int v88 = (((v87 + 180579018) >> 2) ^ 0xCCEFAFDE) + v87 + (((v87 + 180579018) >> 1) & 0x19DF5FBC);
  int v89 = v88 - ((2 * v88 + 463959512) & 0x19C87C98) - 893912776;
  unsigned int v90 = ((2 * ((v89 ^ 0x8CE43E4C) + 707258702)) & 0xFE7EDF76) + (((v89 ^ 0x8CE43E4C) + 707258702) ^ 0xFF3F6FBB);
  unsigned int v91 = (((v90 + 12619845) >> 13) ^ 0x1BAEF5FD) + v90 + (((v90 + 12619845) >> 12) & 0xDEBFA);
  unsigned int v92 = (((v91 - 451831224) >> 3) ^ 0xFD52FA6B) + v91 + (((v91 - 451831224) >> 2) & 0x3AA5F4D6);
  unsigned int v93 = v92 - ((2 * v92 + 1333608378) & 0x445982AA) - 1981062862;
  unsigned int v94 = (v93 ^ 0x29A397DF) + ((v93 >> 11) ^ 0x81953EE2) + ((v93 >> 10) & 0x1FEADE ^ 0xFFF5973B) + 2121266545;
  unsigned int v95 = (((((2 * v94) & 0xE775FFFE) + (v94 ^ 0xF3BAFFFF) + 205848577) >> 5) ^ 0xDBEFFF5B)
      + ((2 * v94) & 0xE775FFFE)
      + (v94 ^ 0xF3BAFFFF)
      + (((((2 * v94) & 0xE775FFFE) + (v94 ^ 0xF3BAFFFF) + 205848577) >> 4) & 0x7DFFEB6);
  unsigned int v96 = v95 - ((2 * v95 + 548012364) & 0x2F698E1E) + 1208600501;
  unsigned int v97 = (v96 ^ 0x23E813F7) + ((v96 >> 12) ^ 0x10A3E88) - 17301512 + ((2 * (v96 >> 12)) & 0xFFFEC ^ 0xFFFB82FF);
  unsigned int v98 = (((((2 * v97) & 0xD7EBDBFA) + (v97 ^ 0x6BF5EDFD) - 1811279357) >> 7) ^ 0xFBFFFADF)
      + ((2 * v97) & 0xD7EBDBFA)
      + (v97 ^ 0x6BF5EDFD)
      + ((2 * ((((2 * v97) & 0xD7EBDBFA) + (v97 ^ 0x6BF5EDFD) - 1811279357) >> 7)) & 0x3FFF5BE);
  unsigned int v99 = v98 - ((2 * v98 + 806628936) & 0xD18270A8) - 2134159496;
  unsigned int v100 = ((2 * ((v99 ^ 0xE8C13854) - 2045107421)) & 0xFF6BBEEE) + (((v99 ^ 0xE8C13854) - 2045107421) ^ 0xFFB5DF77);
  unsigned int v101 = (((v100 + 4857993) >> 11) ^ 0xBFF1BAFF) + v100 + (((v100 + 4857993) >> 10) & 0x2375FE);
  unsigned int v102 = v101 + (((v101 + 1079534986) >> 8) ^ 0x98014600) - (((v101 + 1079534986) >> 7) & 0x1FD73FE) + 1;
  unsigned int v103 = v102 - ((2 * v102 + 279854866) & 0x3FAACE64) - 936606021;
  unsigned int v104 = (((v89 ^ v77 ^ v99) >> 1) & 0x437A6022 ^ 0xC30C50E3 | ((v89 ^ v77 ^ v99) >> 1) & 0x3C81841C) - 1;
  unsigned int v105 = (v104 & 0x7318642C ^ 0x910406A1) + (v104 & 0xCE38012 ^ 0xE00013);
  unsigned int v106 = ((((v93 ^ v81 ^ v103) >> 1) & 0x27930410 ^ 0x22800291 | ((v93 ^ v81 ^ v103) >> 1) & 0x5868E02E) - 1) ^ 0xCBF385D9;
  unsigned int v107 = (v103 ^ 0x2545E961) + ((v103 >> 8) ^ 0x281E7C1) + ((v103 >> 7) & 0xB6BBAE ^ 0xFFFD747D) - 44343847;
  unsigned int v108 = (((((2 * v107) & 0x3DF79FF8) + (v107 ^ 0x9EFBCFFC) + 1627664388) >> 8) ^ 0x7FBFD5BF)
       + ((2 * v107) & 0x3DF79FF8)
       + (v107 ^ 0x9EFBCFFC)
       + (((((2 * v107) & 0x3DF79FF8) + (v107 ^ 0x9EFBCFFC) + 1627664388) >> 7) & 0x17FAB7E);
  int v109 = v108 - ((2 * v108 + 1116255370) & 0x5F2733A0) - 1864895467;
  unsigned int v110 = ((v96 ^ v85 ^ v109) >> 1) & 0x7FFBE43E ^ 0x453C018;
  unsigned int v111 = (v110 - ((2 * v110) & 0xDDB48860) - 287420560) ^ 0x44AB364C;
  unsigned int v112 = (v111 | 0x285AF694) - (v111 | 0xD7A5096B) - 677050005;
  unsigned int v113 = LODWORD(STACK[0x560]) ^ LODWORD(STACK[0x550]);
  unsigned int v114 = (((v113 >> 1) & 0x7FFBE43E ^ 0xEA0E1265) - 1) ^ 0xB3AA3E16;
  unsigned int v115 = a70 ^ v113 ^ 0xD93956E1 ^ (((2 * v114) & 0x11E850E8) - v114 - 150218870);
  unsigned int v116 = ((v115 & 0xFF188309 ^ 0xF7108009) - ((2 * (v115 & 0xFF188309 ^ 0xF7108009)) & 0xCE300200) - 411164334) ^ 0xF3B60DD0;
  unsigned int v117 = ((v116 | 0xFBBDC81) - (v116 | 0xF044237E) - 263969922) ^ 0xE56BF003 | (((2 * (v115 & 0xE77CF6 ^ 0x5163AC57)) | 0xE1B1BEA)
                                                                              - (v115 & 0xE77CF6 ^ 0x5163AC57)
                                                                              + 2029154827) ^ 0xD6A825B6;
  unsigned int v118 = v77 ^ (v117 - ((2 * v117) & 0xC70FCF0C) + 1669851014) ^ v72 ^ v89 ^ v99 ^ (v105 - 2);
  HIDWORD(v119) = LODWORD(STACK[0x5C8]) ^ 0x3020;
  LODWORD(v119) = LODWORD(STACK[0x5C8]) ^ 0x7EAAC000;
  int v120 = (v119 >> 14) - ((2 * (v119 >> 14)) & 0x25116360) + 310948272;
  HIDWORD(v119) = v118 ^ 0x2E72;
  LODWORD(v119) = v118 ^ 0x148B8000;
  int v121 = ((v119 >> 14) - ((2 * (v119 >> 14)) & 0x5114ED76) - 1467320645) ^ v120;
  HIDWORD(v119) = v121 ^ 0x8278;
  LODWORD(v119) = v121 ^ 0x27780000;
  int v122 = v119 >> 18;
  int v123 = (LODWORD(STACK[0x560]) >> 1) & 0x3D23A036 ^ 0x3D209121 | (LODWORD(STACK[0x560]) >> 1) & 0x42D84408;
  LODWORD(STACK[0x5C8]) = (2 * v122) & 0xB00DEBAA;
  LODWORD(STACK[0x570]) = v122 + 1476851157;
  unsigned int v124 = LODWORD(STACK[0x580]) ^ LODWORD(STACK[0x418]) ^ LODWORD(STACK[0x5A0]);
  int v125 = ((2 * ((v124 >> 1) & 0x7FFBE43E ^ 0x4EB0A032)) | 0x5120D008)
       - ((v124 >> 1) & 0x7FFBE43E ^ 0x4EB0A032)
       + 1466931196;
  int v126 = STACK[0x5D0];
  unsigned int v127 = ((LODWORD(STACK[0x500]) ^ LODWORD(STACK[0x590])) ^ LODWORD(STACK[0x5D0])) >> 1;
  unsigned int v128 = ((2 * ((LODWORD(STACK[0x590]) >> 1) & 0x7FFBE43E ^ 0xB7829615)) | 0x2188AF78)
       - ((LODWORD(STACK[0x590]) >> 1) & 0x7FFBE43E ^ 0xB7829615)
       + 1866180676;
  unsigned int v129 = LODWORD(STACK[0x418]) ^ LODWORD(STACK[0x394]) ^ LODWORD(STACK[0x580]) ^ LODWORD(STACK[0x5C0]) ^ LODWORD(STACK[0x5D8]) ^ LODWORD(STACK[0x35C]) ^ LODWORD(STACK[0x358]) ^ (((LODWORD(STACK[0x418]) >> 1) & 0x7FFBE43E ^ 0x6A129426 | 0xA5AEB1A6) - ((LODWORD(STACK[0x418]) >> 1) & 0x7FFBE43E ^ 0x6A129426 | 0x5A514E59) + 1515277913) ^ v124 ^ ((v125 & 0x9EA15B60 ^ 0x1E215360) + (v125 ^ 0xA098A819) - ((v125 ^ 0xA098A819) & 0x9EA15B60)) ^ v73 ^ v81;
  LODWORD(STACK[0x650]) = v123 - 1;
  LODWORD(STACK[0x35C]) = v129 ^ v93 ^ v103 ^ (v106 - 1);
  LODWORD(STACK[0x358]) = v128 ^ LODWORD(STACK[0x398]) ^ v126 ^ ((v127 & 0x47702000 ^ 0x46700A01 | v127 & 0x388BC43E) - 1) ^ v71 ^ v85 ^ v96 ^ v109 ^ v112 ^ 0x3D456B66;
  int v130 = LODWORD(STACK[0x460]) ^ 0x28;
  LODWORD(STACK[0x39C]) = LODWORD(STACK[0x340]) ^ 0x80F2EF9C;
  LODWORD(STACK[0x398]) = LODWORD(STACK[0x3D4]) ^ 0x1A69EAEA;
  LODWORD(STACK[0x394]) = LODWORD(STACK[0x3E0]) ^ 0x6B7E1DD8;
  unint64_t v131 = STACK[0xB58];
  int v132 = LODWORD(STACK[0x238]) ^ LODWORD(STACK[0x218]);
  int v133 = (v74 - 45) ^ 0x280;
  int v134 = (2 * ((v133 & STACK[0x3A4]) - ((2 * (v133 & STACK[0x3A4])) & 0x6D9ABDBC)) + 1838857660) ^ 0x6D9ABDBC;
  unsigned int v135 = (v134 - ((2 * v134) & 0xE88C366C) - 196732105) ^ 0x77091448;
  int v136 = ((((v135 ^ 0x7F) & LOBYTE(STACK[0x39C]))
                          - ((2 * ((v135 ^ 0x7F) & LOBYTE(STACK[0x39C]))) & 0xE4)
                          - 14) ^ 0xF2) >> STACK[0x5E8];
  unsigned int v137 = (2 * ((STACK[0x3A8] & 0x48FF756B) - ((2 * (STACK[0x3A8] & 0x48FF756B)) & 0x607E9A42)) - 528573886) ^ 0xE07E9A42;
  unsigned int v138 = (v137 - ((2 * v137) & 0x3189099C) - 1731951410) ^ 0xD03BF1A5;
  int v139 = (v138 & STACK[0x398]) - 1775220253 - ((2 * (v138 & STACK[0x398])) & 0x2C6093C6);
  unsigned int v140 = (((v138 & STACK[0x394]) - 1795783510 - ((2 * (v138 & STACK[0x394])) & 0x29ED0954)) ^ 0x94F684AA) >> STACK[0x3B0];
  uint64_t v141 = ((v139 ^ 0x963049E3) << LODWORD(STACK[0x3A0]))
       - ((2 * ((v139 ^ 0x963049E3) << LODWORD(STACK[0x3A0]))) & 0x59EE8CE4);
  uint64_t v142 = 4LL
       * ((LODWORD(STACK[0x620]) ^ (127 - ((v135 ^ 0x7F) << v130))) ^ 0x9Cu ^ (v136 - ((2 * v136) & 0xC8) - 28));
  *(_DWORD *)(STACK[0xB48] + v142) = v132 ^ 0xDC194ED ^ (v140 - 268195785 + ~((2 * v140) & 0xE007506C)) ^ (v141 - 1393080718);
  int v143 = (unsigned __int16)(unk_10023AF98 - 9869);
  uint64_t v144 = (2 * v143) & 0x16608;
  uint64_t v145 = v132 ^ 0x8D8E4FCC ^ (v143 - (_DWORD)v144 + 1781117700);
  *(_DWORD *)(v131 + v142) = v145;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)*(&off_10025C670 + ((359 * (((v133 + 1997083648 - ((2 * v133 + 2) & 0xEE122890) + 73) ^ 0x77091400) > 0xFF)) ^ v74)) - 8))( v145,  v144,  1508805860LL,  1781117700LL,  2901886578LL,  v141,  2519747043LL,  3994167440LL,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48,  a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58);
}

#error "1000B6D14: too big function (funcsize=0)"
void sub_1000CB7CC()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v0 = (LODWORD(STACK[0x244]) - 948615140) & 0x388AB7F7;
  LODWORD(STACK[0x2B0]) = LODWORD(STACK[0x658]) - 20982368;
  LODWORD(STACK[0x3D0]) = LODWORD(STACK[0x3C0]) - 640163848;
  LODWORD(STACK[0x258]) = (v0 + 23132887) ^ LODWORD(STACK[0x238]);
  LODWORD(STACK[0x250]) = LODWORD(STACK[0x240]) ^ 0xC8724BA3;
  LODWORD(STACK[0x248]) = LODWORD(STACK[0x23C]) ^ 0x95295CCE;
  LODWORD(STACK[0x254]) = LODWORD(STACK[0x230]) ^ 0x65C03C75;
  uint64_t v1 = STACK[0x3CC];
  uint64_t v2 = STACK[0x228];
  uint64_t v3 = STACK[0x3BC];
  if ((STACK[0x3CC] & 1) != 0) {
    uint64_t v4 = STACK[0x3BC];
  }
  else {
    uint64_t v4 = STACK[0x228];
  }
  if ((v1 & 1) != 0) {
    unsigned int v5 = STACK[0x218];
  }
  else {
    unsigned int v5 = STACK[0x224];
  }
  if ((v1 & 1) != 0) {
    uint64_t v3 = STACK[0x224];
  }
  else {
    uint64_t v2 = STACK[0x218];
  }
  if ((v1 & 2) != 0) {
    int v6 = v4;
  }
  else {
    int v6 = v5;
  }
  LODWORD(STACK[0x228]) = v6;
  if ((v1 & 2) != 0) {
    uint64_t v4 = v5;
  }
  LODWORD(STACK[0x224]) = v4;
  if ((v1 & 2) != 0) {
    unint64_t v7 = v2;
  }
  else {
    unint64_t v7 = v3;
  }
  LODWORD(STACK[0x218]) = v7;
  if ((v1 & 2) != 0) {
    uint64_t v8 = v3;
  }
  else {
    uint64_t v8 = v2;
  }
  LODWORD(STACK[0x3BC]) = v8;
  JUMPOUT(0x1000BF9B8LL);
}

uint64_t sub_1000CB8B4()
{
  return sub_10011C218();
}

uint64_t sub_1000CB8F0(uint64_t a1)
{
  *(_BYTE *)(v6 + v1 - 0x777C85519531D504LL) = ((2 * v5) ^ 0x38 ^ *(_BYTE *)(v3 + v2 - 0x6B14BB2BF8744D34LL) ^ 0xFD)
                                             + ((2 * *(_BYTE *)(v3 + v2 - 0x6B14BB2BF8744D34LL)) & 0xDF)
                                             - 66;
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * ((1209 * (a1 + 1 != v4 + 16)) ^ v5)) - 4LL))();
}

uint64_t sub_1000CB970()
{
  int v0 = STACK[0x5B0];
  unint64_t v1 = LODWORD(STACK[0x5B0]) ^ 0x80u;
  uint64_t v2 = malloc(0x408uLL);
  STACK[0xAD8] = (unint64_t)v2;
  STACK[0x648] = v1;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + (int)(((v2 != 0LL) * ((v0 + 211) ^ v1)) ^ v0)) - 12))();
}

uint64_t sub_1000CB9B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v9 = LODWORD(STACK[0x468]) ^ LODWORD(STACK[0x5F0]) ^ 0x30C59D1E;
  int v10 = (v9 + 55978900) & 0x3581483 ^ v9 & 2;
  v9 -= 1095876587;
  unsigned int v11 = ((((v9 - 2 * v10) ^ 0x30C59D1E)
        - 2 * ((((v9 - 2 * v10) ^ 0x30C59D1E) + 55978900) & 0x3581483 ^ ((v9 - 2 * v10) ^ 0x30C59D1E) & 2)
        - 1095876587) ^ 0x83581481)
      + LODWORD(STACK[0x5A0]);
  LOBYTE(v9) = ((v11 - ((2 * v11) & 0xC2) + 97) | v9 & 1) ^ 0x34;
  LOBYTE(v9) = (v9 - ((2 * v9) & 0x46) - 93) ^ 0xA3;
  unsigned int v12 = (((2 * (STACK[0x590] & 0x90BF9B66 ^ 0x8E1966)) & 0x1601288) - (STACK[0x590] & 0x90BF9B66 ^ 0x8E1966) - 61877726) ^ 0xBC4FD222;
  int v13 = dword_1002169E0[(((((v6 + 41) ^ 0xB3) - 18) * v9
                                         - ((2 * (((v6 + 41) ^ 0xB3) - 18) * v9) & 0xDE)
                                         - 17) ^ v8) ^ 0x35];
  *(_DWORD *)(a1
            + 4LL
            * (((((v6 + 41) ^ 0xB3) - 18) * v9 - ((2 * (((v6 + 41) ^ 0xB3) - 18) * v9) & 0xDE) - 17) ^ 0xEFu)) = ((STACK[0x590] & 0x6F406499 ^ 0x27006419) + (STACK[0x590] & 0x67400400 ^ 0xC06F9124) - ((STACK[0x590] & 0x6F406499 ^ 0x27006419) & 0x67400400)) & 0xFFC17D99 ^ (((2 * v12) & 0x639B7EC) - v12 + 2095260680) ^ a6 ^ LODWORD(STACK[0x608]) ^ 0x35D8BEBF ^ (v13 - ((2 * v13 + 1609614356) & 0xC23F1D98) - 1860701994);
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * (v6 - 1205)) - 4LL))();
}

void sub_1000CBC04()
{
}

uint64_t sub_1000CBC0C()
{
  unint64_t v1 = 137 * (v0 ^ 0x487u);
  uint64_t v2 = malloc(0x404uLL);
  STACK[0xAB0] = (unint64_t)v2;
  uint64_t v3 = (uint64_t)*(&off_10025C670 + ((366 * (((v2 == 0LL) ^ (v0 - 1)) & 1)) ^ v0));
  STACK[0x648] = v1;
  return ((uint64_t (*)(void))(v3 - (v1 ^ 0x5EB)))();
}

uint64_t sub_1000CBC68()
{
  int v2 = LODWORD(STACK[0x460]) ^ LODWORD(STACK[0x5B8]);
  char v3 = (((((v0 - 108) | 0xCE) - 70) ^ (2 * v2))
      - 2 * (((((v0 - 108) | 0xCE) - 70) ^ (2 * v2)) & 0x74 ^ (2 * v2) & 0x10)
      + 100) & 0x60;
  LOBYTE(bzero(v1, v2) = (v3 ^ 0x20) + (v2 ^ 0x48) - 2 * (((v3 ^ 0x20) + (v2 ^ 0x48)) & 0xDD ^ (v2 ^ 0x48) & 9) - 44;
  char v4 = (((2 * v2) ^ 0xA8) - 2 * (((2 * v2) ^ 0xA8) & 0x74 ^ (2 * v2) & 0x10) + 100) & 0x60;
  LOBYTE(bzero(v1, v2) = (v4 ^ 0x20) + (v2 ^ 0x48) - 2 * (((v4 ^ 0x20) + (v2 ^ 0x48)) & 0xDD ^ (v2 ^ 0x48) & 9) - 44;
  char v5 = (((2 * v2) ^ 0xA8) - 2 * (((2 * v2) ^ 0xA8) & 0x74 ^ (2 * v2) & 0x10) + 100) & 0x60;
  LOBYTE(bzero(v1, v2) = (v5 ^ 0x20) + (v2 ^ 0x48) - 2 * (((v5 ^ 0x20) + (v2 ^ 0x48)) & 0xDD ^ (v2 ^ 0x48) & 9) - 44;
  int v6 = STACK[0x580];
  int v7 = LODWORD(STACK[0x580]) ^ 0x700EB282;
  LODWORD(STACK[0x660]) = v7;
  char v8 = 2 * (((v2 ^ 0xD4) & v7) - ((2 * ((v2 ^ 0xD4) & v7)) & 0x28)) + 40;
  LOBYTE(bzero(v1, v2) = (v6 ^ 0x56 ^ v2) + (v8 ^ 0xED) + 59 + ((2 * v8) & 0x88);
  LOBYTE(bzero(v1, v2) = ((v2 & 0xFE) - ((2 * v2) & 0x5C) + 47) ^ 8;
  unsigned int v9 = LODWORD(STACK[0x560]) ^ 0x8C29496C;
  unsigned int v10 = v9
      + (((LODWORD(STACK[0x560]) ^ 0xD68EA24C) + 1) ^ 0x53B76F1E)
      + ((2 * ((LODWORD(STACK[0x560]) ^ 0xD68EA24C) + 1)) & 0xA76EDE3C)
      - 1404530462;
  unsigned int v11 = ((v10 - ((2 * v10) & 0xD5FF42F8) - 352345732) ^ 0x15005E82) + v9;
  int v12 = (63 * v2 + 110 - ((126 * v2) & 0xDC));
  unsigned int v13 = ((v12 ^ 0x8A17B6A2) - (((v12 ^ 0x8A17B6A2) << (((v0 - 108) | 0xCE) + 19)) & 0x80884) - 1243347646) ^ 0xBB4A930C;
  int v14 = dword_100221330[LODWORD(STACK[0x640]) ^ LODWORD(STACK[0x5E0]) ^ LODWORD(STACK[0x620]) ^ 0x5A1733BD ^ (v13 - ((2 * v13) & 0x1201E32) + 1536429849)];
  HIDWORD(v15) = v14 ^ 0xFA189;
  LODWORD(v15) = v14 ^ 0x3E500000;
  *(_DWORD *)(STACK[0xAB0] + 4LL * (v12 ^ 0x6Eu)) = (v11 - ((2 * v11) & 0xB9DF91F0) - 588265224) ^ LODWORD(STACK[0x600]) ^ LODWORD(STACK[0x550]) ^ LODWORD(STACK[0x570]) ^ LODWORD(STACK[0x458]) ^ LODWORD(STACK[0x5E8]) ^ LODWORD(STACK[0x498]) ^ 0x20E4788C ^ ((v15 >> 20) - ((2 * (v15 >> 20)) & 0x38651234) + 473073946);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 8LL * ((((v0 - 876) | 0xCE) - 41) ^ 0x2B)))( 3142226700LL,  1536429849LL,  1511470013LL,  dword_100221330,  1024393LL,  1045430272LL,  946147892LL,  473073946LL);
}

void sub_1000CC054()
{
}

uint64_t sub_1000CC064@<X0>(int a1@<W8>)
{
  int v1 = a1 + 597;
  unsigned __int8 v2 = a1 + 14;
  STACK[0x648] = (a1 + 1054);
  char v3 = malloc(0x404uLL);
  STACK[0xAF0] = (unint64_t)v3;
  return ((uint64_t (*)(void))*(&off_10025C670 + (((((v3 == 0LL) ^ v2) & 1) * (v1 - 977)) ^ v1)))();
}

uint64_t sub_1000CC0B4(uint64_t a1)
{
  unsigned int v3 = ((LODWORD(STACK[0x540]) ^ LODWORD(STACK[0x5F0]) ^ 0x9F815D2F)
      - ((2 * (LODWORD(STACK[0x540]) ^ LODWORD(STACK[0x5F0]) ^ 0x9F815D2F) + 363524808) & 0x57E48D80)
      - 1228423132) ^ 0x9F815D2F;
  unsigned int v4 = ((v3 - ((2 * v3 + 363524808) & 0x57E48D80) - 1228423132) ^ 0xABF246C0) + LODWORD(STACK[0x5A0]);
  unsigned int v5 = (v4 ^ 0x7E66FFFF) - 2120679423 + ((2 * v4) & 0xFCCDFFFE);
  unsigned int v6 = (v5 & 0xFFFFFFFE) - ((2 * v5) & 0x8D16E7D0) - 963939352;
  unsigned int v7 = (STACK[0x47C] & 8 | 0xE9F54C16) + ((2 * (STACK[0x47C] & 8)) ^ 0x10);
  unsigned int v8 = v7 + 369800162;
  char v9 = 60 - v7;
  unsigned int v11 = ((-448883050 * (v6 ^ 0x63021F3F)) & 0xF74D76FC) + ((1923042123 * (v6 ^ 0x63021F3F)) ^ 0x7BA6BB7E);
  if (((v11 - 2074524542) & v8) + 1595179159 - ((((v11 - 2074524542) & v8) << ((v1 & 0x7D) - 80)) & 0xBE290108) == 1595179159) {
    char v12 = (STACK[0x47C] & 8 | 0x16) + ((2 * (STACK[0x47C] & 8)) ^ 0x10);
  }
  else {
    char v12 = v9;
  }
  unsigned int v10 = (STACK[0x47C] & 0xF7 ^ 0xA3) + (STACK[0x47C] & 0x62 ^ 0xB70CE140) - ((STACK[0x47C] & 0xF7 ^ 0xA3) & 0x62);
  unsigned __int8 v13 = ((v10 & 0xB5 ^ 0xB1) + (v10 & 0x4A ^ 0x43) - 1) ^ LOBYTE(STACK[0x480]) ^ LOBYTE(STACK[0x470]) ^ (v12 + v11 - ((2 * (v12 + v11) - 56) & 0xDC) + 82);
  int v14 = (v13 ^ (v2 + 75)) + (v13 & 0xB9 ^ 0x4B1429A1) - ((v13 ^ (v2 + 75)) & (v2 + 168));
  *(_DWORD *)(a1 + 4LL * (v11 - 126)) = LODWORD(STACK[0x530]) ^ LODWORD(STACK[0x520]) ^ LODWORD(STACK[0x498]) ^ v14 ^ dword_100238DA0[((v13 ^ 0x10860178) + (v13 & 0x51 ^ 0xCD284C01) - ((v13 ^ 0x10860178) & 0x800151)) ^ 0xDD2E4C66] ^ ((v14 ^ 0x4B142937) - ((2 * (v14 ^ 0x4B142937) + 2036754586) & 0x7C7DDD2A) + 988947170) ^ 0xB308C448;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + (v1 & 0x6AFF357D)) - 8))();
}

void sub_1000CC3DC()
{
}

uint64_t sub_1000CC3EC@<X0>(int a1@<W8>)
{
  int v1 = a1 - 362;
  unint64_t v2 = (a1 + 911036586) & 0xC9B2AFE7;
  int v3 = a1 - 1095;
  unsigned int v4 = malloc(0x408uLL);
  STACK[0xAA8] = (unint64_t)v4;
  STACK[0x648] = v2;
  return ((uint64_t (*)(void))*(&off_10025C670 + (int)((((v2 ^ 0x310) + v3) * (v4 == 0LL)) ^ v1)))();
}

uint64_t sub_1000CC448(uint64_t a1)
{
  int v2 = (v1 - 10) | 4;
  unsigned int v3 = ((LODWORD(STACK[0x580]) ^ LODWORD(STACK[0x460]) ^ 0xE9C5DA46)
      - (((v2 ^ 0x527C99B2) + 2 * (LODWORD(STACK[0x580]) ^ LODWORD(STACK[0x460]) ^ 0xE9C5DA46)) & 0xE1A05170)
      - 1710328557) ^ 0x8D5D8894;
  unsigned int v4 = ((((v3 - 1710328557 - ((2 * v3 + 1383897270) & 0xE1A05170)) ^ 0xF0D028B8)
       + LODWORD(STACK[0x5A0])
       - ((2 * (((v3 - 1710328557 - ((2 * v3 + 1383897270) & 0xE1A05170)) ^ 0xF0D028B8) + LODWORD(STACK[0x5A0]))) & 0x98A5303E)
       + 1280481311) | (v3 - 1710328557) & 1) ^ 0x381BFF48;
  unsigned int v5 = (v4 - ((2 * v4) & 0x8E514F2A) + 1193846677) ^ 0x4728A795;
  int v6 = LODWORD(STACK[0x450]) ^ 0xF525;
  unsigned int v7 = ((1648467110 * v5) & 0x9FE9D6E2) + ((-1323250093 * v5) ^ 0x4FF4EB71);
  int v8 = 2 * (((v7 + 5263) & v6) - ((((v7 + 5263) & v6) << (((v2 - 38) & 0xAD) + 117)) & 0x11932)) - 658433742;
  unsigned int v9 = ((v6 - 1341451121 + v7) ^ 0xEEAC92FF)
     + ((2 * (v6 - 1341451121 + v7)) & 0xDD5925FE)
     + (v8 ^ 0xF8ED1BB3)
     + ((2 * v8) & 0xBFA7FAFC ^ 0x4E7DCD9B);
  int v10 = LODWORD(STACK[0x5C0]) ^ LODWORD(STACK[0x5C8]) ^ (v9
                                                       + 1
                                                       - 2 * ((v9 + 824666753) & 0x2E9A1F7D ^ (v9 + 1) & 5)
                                                       + 532777464);
  unsigned int v11 = (((32 * v10) ^ 0x5FF8E500) - 213362537) ^ 0xF3485897 | (v10 >> 3) ^ 5;
  int v12 = v11 - ((2 * v11) & 0x32) - 103;
  HIDWORD(v13) = v12 ^ 0x1D;
  LODWORD(v13) = v12 << 24;
  int v14 = dword_100216DF0[((v13 >> 29) - ((2 * (v13 >> 29)) & 0xFA) + 125) ^ 0x83];
  HIDWORD(v13) = v14 ^ 0x109FD12D;
  LODWORD(v13) = ~v14;
  *(_DWORD *)(a1 + 4LL * (v7 - 113)) = LODWORD(STACK[0x510]) ^ LODWORD(STACK[0x570]) ^ LODWORD(STACK[0x5E8]) ^ 0x67D39D61 ^ ((v13 >> 29) - ((2 * (v13 >> 29)) & 0xE08056C2) + 1883253601);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + (v2 ^ 0xE)) - 8))();
}

void sub_1000CC740()
{
}

uint64_t sub_1000CC750()
{
  unint64_t v1 = (v0 + 343);
  int v2 = malloc(0x404uLL);
  STACK[0xAE0] = (unint64_t)v2;
  unsigned int v3 = (uint64_t (*)(void))((char *)*(&off_10025C670 + ((401 * (((v2 == 0LL) ^ (v0 - 1)) & 1)) ^ v0))
                         - v1
                         + 1499);
  STACK[0x648] = v1;
  return v3();
}

uint64_t sub_1000CC79C(uint64_t a1)
{
  unsigned int v3 = (((LODWORD(STACK[0x418]) ^ 0x644CA32C)
       - ((2 * (LODWORD(STACK[0x418]) ^ 0x644CA32C) + 1225213828) & 0xD0055332)
       - 1937355429) ^ 0xE802A999)
     + LODWORD(STACK[0x660]);
  LOBYTE(v3) = (v3 ^ 0xDF) - 58 + ((2 * v3) & 0xBE) + 91;
  LOBYTE(v3) = ((v3 & 0xFE) - ((2 * v3) & 0x40) + 32) ^ 0x9D;
  int v4 = (-5 * v3 - 33 - ((-10 * v3) & 0xBE));
  unsigned int v5 = dword_100225670[LODWORD(STACK[0x640]) ^ LODWORD(STACK[0x5E0]) ^ LODWORD(STACK[0x620]) ^ 0x7DA2C853 ^ ((((v4 ^ 0xB8C095) << (((v1 + 70) ^ 0x5E) + 117)) & 0x1318154) - (v4 ^ 0xB8C095) - 132115371)];
  int v6 = LODWORD(STACK[0x438]) ^ LODWORD(STACK[0x590]) ^ LODWORD(STACK[0x440]) ^ LODWORD(STACK[0x658]) ^ LODWORD(STACK[0x650]) ^ LODWORD(STACK[0x4F0]) ^ LODWORD(STACK[0x5F8]) ^ LODWORD(STACK[0x430]) ^ LODWORD(STACK[0x428]) ^ LODWORD(STACK[0x448]) ^ v5 ^ (v5 >> 2) ^ (v5 >> 6) ^ 0x31A2732D;
  *(_DWORD *)(a1 + 4LL * (v4 ^ 0xDFu)) = LODWORD(STACK[0x610]) ^ LODWORD(STACK[0x500]) ^ 0xA85B8AD1 ^ (v6 - ((2 * v6) & 0xBDA017E) + 99418303);
  return (*(uint64_t (**)(void))(v2 + 8LL * (v1 - 186)))();
}

void sub_1000CC9A8()
{
}

uint64_t sub_1000CC9B8()
{
  unint64_t v1 = (v0 - 597468321) & 0x239CA5F7;
  uint64_t v2 = malloc(0x404uLL);
  uint64_t v3 = (uint64_t)*(&off_10025C670 + ((538 * (v2 != 0LL)) ^ v0));
  STACK[0xAE8] = (unint64_t)v2;
  STACK[0x648] = v1;
  return ((uint64_t (*)(void))(v3 - (((v0 + 2131744607) & 0xFBFF7476) + v1) + 2064602685))();
}

uint64_t sub_1000CCA30(uint64_t a1)
{
  int v3 = (v1 - 2064601038) | 0x20;
  unsigned int v4 = ((LODWORD(STACK[0x4E0]) ^ LODWORD(STACK[0x460]) ^ 0x8A3D6E7D)
      - ((2 * (LODWORD(STACK[0x4E0]) ^ LODWORD(STACK[0x460]) ^ 0x8A3D6E7D) + 654657334) & 0x33C02974)
      + 224573525) ^ 0x8A3D6E7D;
  unsigned int v5 = ((v4 - ((v3 + 2 * v4 + 654657154) & 0x33C02974) + 224573525) ^ 0x99E014BA) + LODWORD(STACK[0x5A0]);
  unsigned int v6 = (v5 ^ 0x77BF15DD) - 2009011677 + ((2 * v5) & 0xEF7E2BBA);
  int v7 = LODWORD(STACK[0x5C0]) ^ LODWORD(STACK[0x5C8]) ^ LODWORD(STACK[0x450]);
  unsigned int v8 = 1226662033 * (((v6 & 0xFFFFFFFE) - ((2 * v6) & 0x9FA3DE28) + 1339158293) ^ 0x41C6E680);
  unsigned __int8 v9 = v8 - ((v8 << ((((v1 + 50) | 0x20) ^ 0xD7) - 98)) & 0xC8) + 100;
  unsigned int v10 = (923291449
  *(_DWORD *)(a1 + 4LL * (v9 ^ 0x64u)) = LODWORD(STACK[0x4C0]) ^ LODWORD(STACK[0x500]) ^ LODWORD(STACK[0x448]) ^ (v10 - ((2 * v10) & 0xA3E19E0) + 85921008) ^ 0x3BCB896F ^ dword_100219980[(v10 - ((2 * v10) & 0xA3E19E0) + 85921008) ^ 0x851B4F48];
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * v3) - 4LL))();
}

void sub_1000CCC20()
{
}

uint64_t sub_1000CCC2C()
{
  char v1 = STACK[0xB8D];
  STACK[0x648] = (v0 + 128);
  int v2 = byte_100219E80[(v1 - ((((v0 + 0x80) ^ 0x27) + 2 * v1) & 0xE0) - 46) ^ 0x41LL];
  int v3 = (v2 - ((2 * v2 + 106) & 0xCE) - 100) ^ 0xD3;
  int v4 = (((v3 - ((2 * v3) & 0x82)) << 16) + 4259840) ^ 0x410000;
  int v5 = byte_100224000[(LOBYTE(STACK[0xB8F])
                                      - 2 * ((LOBYTE(STACK[0xB8F]) + 100) & 0x4F ^ STACK[0xB8F] & 3)
                                      - 80) ^ 0x76LL] ^ 0xF2;
  unsigned int v6 = (v5 - ((2 * v5) & 0xC6) - 1349786525) ^ 0xAF8BE463 | (v4 - ((2 * v4) & 0x9E9A0000) + 1330453826) ^ 0x4F4D1D42;
  int v7 = byte_100238A80[(LOBYTE(STACK[0xB8C]) - ((2 * LOBYTE(STACK[0xB8C]) + 2) & 0x26) - 76) ^ 0x6DLL] ^ (LOBYTE(STACK[0xB8C]) - ((2 * LOBYTE(STACK[0xB8C]) + 2) & 0x26) - 76) ^ 0x4A;
  int v8 = ((v7 - ((2 * v7) & 0x1C)) << 24) + 234881024;
  unsigned int v9 = ((v8 ^ 0xE000000) - ((2 * v8) & 0x62000000) + 838419600) ^ 0x31F94490 | (v6 - ((2 * v6) & 0xA3230102) + 1368490113) ^ 0x51918081;
  int v10 = byte_10023B920[((~(2 * LOBYTE(STACK[0xB8E]) + 70) | 0x47) + LOBYTE(STACK[0xB8E]) + 0x80) ^ 0xA6LL];
  int v11 = v10 ^ 0x8D ^ (((16 * v10) ^ 0x30) - ((2 * ((16 * v10) ^ 0x30)) & 0xA0) - 44);
  int v12 = (((v11 - ((2 * v11) & 0x18E)) << 8) + 1601619712) ^ 0x5F76C700;
  unsigned int v13 = (v12 - ((2 * v12) & 0x65200600) + 1922040746) ^ 0x729003AA | (v9 - ((2 * v9) & 0xB252B798) + 1495882700) ^ 0x59295BCC;
  int v14 = (v13 - 43785462 + (~(2 * v13) | 0x53839ED)) ^ LODWORD(STACK[0x580]);
  unsigned int v15 = ((25 - LODWORD(STACK[0x420])) & 0x40000 ^ 0xFFFFBBBF) + 2 * ((25 - LODWORD(STACK[0x420])) & 0x40000);
  BOOL v16 = ((v14 ^ 0x8D6C0000) & (v15 + 17473)) == ((2 * ((v14 ^ 0x8D6C0000) & (v15 + 17473))) & 0x41880000);
  unsigned __int8 v17 = byte_100219E80[(LOBYTE(STACK[0xB85])
                                       - 2 * ((LOBYTE(STACK[0xB85]) + 2) & 7 ^ STACK[0xB85] & 1)
                                       - 32) ^ 0xC8LL];
  int v18 = byte_10023B920[(LOBYTE(STACK[0xB86]) - ((2 * LOBYTE(STACK[0xB86]) + 54) & 0x78) - 41) ^ 0xCCLL];
  int v19 = v18 ^ 0x51 ^ (((16 * v18) ^ 0x35) - 4);
  int v20 = (((v19 - ((2 * v19) & 0x22)) << 8) + 1317081344) ^ 0x4E811100;
  unsigned __int8 v21 = (v17 - ((2 * v17 + 106) & 0x82) - 10) ^ 0x52;
  unsigned int v22 = (((v21 - 2 * (v21 & 3)) << 16) - 888995840) ^ 0xCB030000;
  unsigned int v23 = (v22 - ((2 * v22) & 0x3720000) - 1044822657) ^ 0xC1B9457F | (v20 - ((2 * v20) & 0x6F52AC00) - 1213639051) ^ 0xB7A95675;
  int v24 = byte_100238A80[((~(2 * LOBYTE(STACK[0xB84]) + 50) | 0x33) + LOBYTE(STACK[0xB84])) ^ 0x38LL] ^ ((~(2 * LOBYTE(STACK[0xB84]) + 50) | 0x33) + LOBYTE(STACK[0xB84])) ^ 0xD8;
  unsigned int v25 = (((v24 - ((2 * v24) & 0xFFFFFFDF)) << 24) - 285212672) ^ 0xEF000000;
  unsigned int v26 = (v25 - ((2 * v25) & 0xC3FFFFFF) + 1631451201) ^ 0x613DF841 | (v23 - ((2 * v23) & 0xCF3F9526) + 1738525331) ^ 0x679FCA93;
  int v27 = byte_100224000[(LOBYTE(STACK[0xB87]) - ((2 * LOBYTE(STACK[0xB87]) - 72) & 0x88) - 96) ^ 0x9DLL];
  HIDWORD(v2_Block_object_dispose(va, 8) = v27 ^ 0x12;
  LODWORD(v2_Block_object_dispose(va, 8) = ~v27 << 24;
  int v29 = (v28 >> 29) - ((2 * (v28 >> 29)) & 0xFFFFFF8F);
  HIDWORD(v2_Block_object_dispose(va, 8) = (v29 + 79) ^ 5;
  LODWORD(v2_Block_object_dispose(va, 8) = (-72 - v29) << 24;
  int v30 = ((((v28 >> 27) + (~(2 * (v28 >> 27)) | 0x67) + 77) ^ 0x4C)
       - ((2 * (((v28 >> 27) + (~(2 * (v28 >> 27)) | 0x67) + 77) ^ 0x4C)) & 0x132)
       - 377124967) ^ 0xE9858799 | (v26 - ((2 * v26) & 0xF94F68FC) - 56118146) ^ 0xFCA7B47E;
  int v31 = STACK[0x5F8];
  unsigned int v32 = LODWORD(STACK[0x5F8]) ^ LODWORD(STACK[0x4E0]) ^ (v30 - ((2 * v30) & 0xF6B53662) - 77948111);
  unsigned int v33 = v15 + 1607724784;
  unsigned int v34 = 1607689838 - v15;
  if (v16) {
    unsigned int v34 = v33;
  }
  int v35 = STACK[0x610];
  unsigned int v36 = (LODWORD(STACK[0x610]) ^ v32 ^ 0xEDEAE447) + 1;
  int v37 = v32 ^ 0x73D9D4EF;
  unsigned int v38 = v37 + (v36 ^ 0xAFA6FF4F) + ((2 * v36) & 0x5F4DFE9E) + 1348010161;
  unsigned int v39 = (((LODWORD(STACK[0x4A0]) ^ 0xBF4BBF3F)
        - ((2 * (LODWORD(STACK[0x4A0]) ^ 0xBF4BBF3F) + 250260704) & 0xE4E1206)
        - 1768136845) ^ LODWORD(STACK[0x610]) ^ 0x44DBB91E ^ (v38 - ((2 * v38) & 0x4460FE94) + 573603658))
      + v37;
  int v40 = STACK[0x5D8];
  unsigned int v41 = (v39 - ((2 * v39) & 0xA3E37046) - 772687837) ^ LODWORD(STACK[0x5D8]);
  char v42 = (v39 - ((2 * v39) & 0x46) + 35) ^ LOBYTE(STACK[0x5D8]) ^ 0xA3;
  unsigned int v43 = (v41 ^ 0x581216A3) % 0x3A5E0577;
  LOBYTE(v3_Block_object_dispose(va, 8) = LOBYTE(STACK[0xB8B]) + (~(2 * LOBYTE(STACK[0xB8B]) + 22) | 0xAD) - 11;
  LOBYTE(v3_Block_object_dispose(va, 8) = (v38 ^ 0xBC) + ((2 * ((2 * v38) ^ 0x12)) & 4) + ((((2 * v38) ^ 0x12) + 32) & 0x2A ^ 0xF7) + 41;
  char v44 = v38 + (~(2 * v38) | 0x5F);
  unsigned int v45 = LOBYTE(STACK[0xB81]) - ((2 * LOBYTE(STACK[0xB81]) - 84) & 0xFFFFFF87) + 25;
  int v46 = (v45 ^ 0x43) - ((2 * (v45 ^ 0x43)) & 0x8A) - 244854203;
  unsigned int v47 = ((2 * (v45 ^ 0xBF)) & 0x1DE) + (v45 ^ 0xFFBF7C50);
  unsigned int v48 = v46 ^ (300619312 - v47 - ((1065286614 - 2 * v47) & 0x2457308A)) ^ 0xFC46C0CD ^ ((v46 ^ 0xE982DBA)
                                                                                      - ((2 * (v46 ^ 0xE982DBA) + 2) & 0x3E15159A)
                                                                                      + 520784590);
  int v49 = v48 + 584656932 - ((2 * v48 + 504) & 0x45B2507E) + 279;
  unsigned int v50 = v49 ^ 0x22D92824;
  int v51 = v49 ^ 0xD378C4D ^ (((2 * (v49 ^ 0xAE)) & 0x24) - (v49 ^ 0xAE) - 1258979603);
  LOWORD(v46) = (v51 & 0xAC ^ 0x8C) - ((2 * (v51 & 0xAC ^ 0x8C)) & 0xFF3F) - 7459;
  unsigned int v52 = ((v46 & 0xC0 | v46 & 0x33C ^ 0x80281215) + 2118183935) ^ 0xFE68FC40 | (((2 * v51) & 0x84)
                                                                             + (v51 & 0x53 ^ 0xFFFFFFEF)
                                                                             - 246802114) ^ 0xF14A192E;
  int v53 = ((v52 - ((2 * v52) & 4) + 2) ^ 0x7D) + byte_100219E80[v50] + ((2 * (v52 - ((2 * v52) & 4) + 2)) ^ 4);
  unsigned int v54 = v53 + (~(2 * v53 + 26) | 0xFFFFFFD5) + 67;
  LODWORD(STACK[0x660]) = v54;
  int v55 = ((((v54 ^ 0xC1) - ((2 * (v54 ^ 0xC1)) & 0xBC)) << 16) + 224264192) ^ 0xD5E0000;
  unsigned int v56 = LOBYTE(STACK[0xB80]) - ((2 * LOBYTE(STACK[0xB80]) + 42) & 0xFFFFFFFB) + 18;
  int v57 = byte_100238A80[(LOBYTE(STACK[0xB80]) - ((2 * LOBYTE(STACK[0xB80]) + 42) & 0xFB) + 18) ^ 0xF1LL] ^ v56 ^ 0x6C;
  unsigned int v58 = (((v57 + (~(2 * v57) | 0x11111111)) << 24) - 0x8000000) ^ 0xF7000000;
  unsigned int v59 = v58 - ((2 * v58) & 0x1E000000);
  int v60 = byte_100219E80[(LOBYTE(STACK[0xB89]) - ((2 * LOBYTE(STACK[0xB89]) + 28) & 0x1E) - 19) ^ 0xECLL];
  int v61 = ((~(2 * v60 + 106) | 0x6B) + v60) ^ 0x21;
  int v62 = (((v61 - ((2 * v61) & 0xF6)) << 16) + 796590080) ^ 0x2F7B0000;
  int v63 = byte_100224000[(v44 + 81) ^ 0xEFLL] ^ 0xF2;
  unsigned int v64 = (v62 - ((2 * v62) & 0x9B40000) - 2066073087) ^ 0x84DA3A01 | (v63 - ((2 * v63) & 0xFC) - 1091074178) ^ 0xBEF7877E;
  int v65 = byte_10023B920[(LOBYTE(STACK[0xB8A]) - ((2 * LOBYTE(STACK[0xB8A]) + 62) & 0x6A) + 84) ^ 0x7ALL];
  int v66 = v65 ^ 0x36 ^ (((16 * v65) ^ 0x30) - ((2 * ((16 * v65) ^ 0x30)) & 0x20) - 102);
  int v67 = ((((~(2 * v66) | 0xFFFE43) + v66) << 8) + 1823923968) ^ 0x6CB6DE00;
  unsigned int v68 = (v64 - ((2 * v64) & 0xEF790DDC) - 138639634) ^ 0xF7BC86EE | (v67 - ((2 * v67) & 0x33A00) + 912629089) ^ 0x36659D61;
  int v69 = byte_100238A80[(LOBYTE(STACK[0xB88]) + ((-60 - 2 * LOBYTE(STACK[0xB88])) | 5) - 101) ^ 0xA2LL] ^ (LOBYTE(STACK[0xB88]) + ((-60 - 2 * LOBYTE(STACK[0xB88])) | 5) - 101) ^ 9;
  unsigned int v70 = (((v69 - ((2 * v69) & 0xD0)) << 24) - 402653184) ^ 0xE8000000;
  unsigned int v71 = (v68 - ((2 * v68) & 0x77E72122) - 1141665647) ^ 0xBBF39091 | (v70 + 440023992 + (~(2 * v70) | 0xCBFFFFFF) + 1) ^ 0x1A3A3BB8;
  int v72 = byte_10023B920[(LOBYTE(STACK[0xB82]) - 105) ^ 0xFALL];
  unsigned int v73 = v72 ^ 0x9B ^ (((16 * v72) ^ 0xFFFFFFE0) + (~(2 * ((16 * v72) ^ 0xFFFFFFE0)) | 0xBF) + 34);
  int v74 = (((v73 - ((2 * v73) & 0x34)) << 8) + 797514240) ^ 0x2F891A00;
  unsigned int v75 = (v74 - ((2 * v74) & 0x73B7B200) - 103032424) ^ 0xF9DBD998 | (v59 + 266349169) ^ 0xFE02A71;
  int v76 = byte_100224000[(LOBYTE(STACK[0xB83])
                                       - 2 * ((LOBYTE(STACK[0xB83]) + 24) & 0x17 ^ STACK[0xB83] & 1)
                                       - 18) ^ 0x48LL] ^ 0xF2;
  unsigned int v77 = (v75 - ((2 * v75) & 0x4CA6AF3C) - 1504487522) ^ 0xA653579E | (v76 - ((2 * v76) & 0xFC) + 97013630) ^ 0x5C84F7E;
  unsigned int v78 = (v55 - ((2 * v55) & 0x28520000) - 1809251117) ^ 0x942904D3 | (v77 - ((2 * v77) & 0x8C5AC022) - 970104815) ^ 0xC62D6011;
  unsigned int v79 = v40 ^ LODWORD(STACK[0x540]) ^ v35 ^ v31 ^ (v71 - ((2 * v71) & 0x6064E45C) + 808612398);
  unsigned int v80 = v40 ^ LODWORD(STACK[0x468]) ^ v35 ^ v31 ^ (v78 - ((2 * v78) & 0x80528122) - 1071038319);
  unsigned int v81 = v35 ^ v40 ^ ((v31 & 0xFFFBFFFF ^ 0xEF51935F | 0x9CF229B7)
                   - (v31 & 0xFFFBFFFF ^ 0xEF51935F | 0x630DD648)
                   + 1661851208) ^ ((v14 ^ 0x8D6D5139)
                                  - 1607707311
                                  + v34
                                  - ((2 * ((v14 ^ 0x8D6D5139) - 1607707311 + v34)) & 0x2604D03E)
                                  + 318924831);
  char v82 = (v43 ^ 0xAA) + 86 + ((2 * v43) & 0x54);
  if (((2 * v43) & 0x55FDD36E) + (v43 ^ 0x6AFEE9B7) != 1795090871) {
    char v82 = 0;
  }
  char v83 = v42 - v82;
  unint64_t v84 = STACK[0xAE8];
  unint64_t v85 = STACK[0xAE0];
  unint64_t v86 = STACK[0xAD0];
  int v87 = *(_DWORD *)(STACK[0xAE8] + 4LL * (BYTE2(v41) ^ 0x12u)) ^ 0x18A85BE ^ *(_DWORD *)(STACK[0xAE0]
                                                                                       + 4LL * (HIBYTE(v80) ^ 0x97));
  unsigned int v88 = *(_DWORD *)(STACK[0xAD0] + 4LL * (BYTE1(v79) ^ 0x5Au)) ^ 0xAE65CC52;
  int v89 = (v88 & v87) - ((2 * (v88 & v87)) & 0x419CD434);
  unsigned int v90 = ((v88 + v87) ^ 0xA7DBCAB9)
      + ((2 * (v88 + v87)) & 0x4FB79572)
      + ((2 * v89 + 1100796980) ^ 0x41BEB473)
      + ((2 * (2 * v89 + 1100796980)) & 0xFFBB3F70 ^ 0x7CC6D79F);
  unint64_t v91 = STACK[0xAD8];
  unsigned int v92 = *(_DWORD *)(STACK[0xAD0] + 4LL * (BYTE1(v81) ^ 0xF9u)) ^ *(_DWORD *)(STACK[0xAE8] + 4LL * (BYTE2(v79) ^ 0x21u)) ^ *(_DWORD *)(STACK[0xAE0] + 4LL * (HIBYTE(v41) ^ 0x58)) ^ *(_DWORD *)(STACK[0xAD8] + 4LL * (v80 ^ 0x51u));
  unsigned int v93 = (v90 + 1 - 2 * ((v90 + 402773249) & 0x2D973746 ^ (v90 + 1) & 2) - 2053567420) ^ *(_DWORD *)(STACK[0xAD8]
                                                                                                  + 4LL * (v81 ^ 0xB8u));
  unsigned int v94 = *(_DWORD *)(STACK[0xAE0] + 4LL * (HIBYTE(v79) ^ 0x87)) ^ *(_DWORD *)(STACK[0xAE8] + 4LL * (BYTE2(v81) ^ 0x39u)) ^ *(_DWORD *)(STACK[0xAD0] + 4LL * (BYTE1(v80) ^ 0xBDu)) ^ *(_DWORD *)(STACK[0xAD8] + 4LL * ((v83 ^ 0xAD) + ((2 * v83) & 0x5A) + 83));
  unsigned int v95 = *(_DWORD *)(STACK[0xAE8]
                  + 4LL
                  * (((BYTE2(v80) ^ 0x219CB798 | 0x6A18294A) - (BYTE2(v80) ^ 0x219CB798 | 0x95E7D6B5) - 1779968331) ^ 0x4B849E13)) ^ *(_DWORD *)(STACK[0xAD0] + 4LL * (BYTE1(v41) ^ 0x16u)) ^ *(_DWORD *)(STACK[0xAE0] + 4LL * (HIBYTE(v81) ^ 0xF5)) ^ *(_DWORD *)(STACK[0xAD8] + 4LL * ((v40 ^ LOBYTE(STACK[0x540]) ^ v35 ^ v31 ^ (v71 - ((2 * v71) & 0x5C) + 46)) ^ 0xCFu));
  int v96 = ((v95 >> 8) & 0xD6) + (BYTE1(v95) ^ 0xF6) - ((BYTE1(v95) ^ 0xF6) & 0xD6) - 2024524544;
  unsigned int v97 = *(_DWORD *)(STACK[0xAE8] + 4LL * (BYTE2(v92) ^ 0xE2u)) ^ *(_DWORD *)(STACK[0xAD0] + 4LL * (BYTE1(v94) ^ 0x9Fu)) ^ *(_DWORD *)(STACK[0xAD8] + 4LL * ((*(_BYTE *)(STACK[0xAE8] + 4LL * (((BYTE2(v80) ^ 0x219CB798 | 0x6A18294A) - (BYTE2(v80) ^ 0x219CB798 | 0x95E7D6B5) - 1779968331) ^ 0x4B849E13)) ^ *(_BYTE *)(STACK[0xAD0] + 4LL * (BYTE1(v41) ^ 0x16u)) ^ *(_BYTE *)(STACK[0xAE0] + 4LL * (HIBYTE(v81) ^ 0xF5)) ^ *(_BYTE *)(STACK[0xAD8] + 4LL * (v79 ^ 0xCFu))) ^ 0x11u)) ^ *(_DWORD *)(STACK[0xAE0] + 4LL * (HIBYTE(v93) ^ 0xCD));
  unsigned int v98 = *(_DWORD *)(STACK[0xAE8] + 4LL * (BYTE2(v94) ^ 0x5Fu)) ^ *(_DWORD *)(STACK[0xAE0] + 4LL * (HIBYTE(v92) ^ 0x31)) ^ *(_DWORD *)(STACK[0xAD0] + 4LL * (((v96 & 0x80103153 ^ 0x4020C801) + (v96 ^ 0x83D23556) - ((v96 ^ 0x83D23556) & 0x60153)) ^ 0xC4B0F95C)) ^ *(_DWORD *)(STACK[0xAD8] + 4LL * (v93 ^ 0x4Eu));
  unsigned int v99 = *(_DWORD *)(STACK[0xAE8] + 4LL * BYTE2(v95)) ^ *(_DWORD *)(STACK[0xAE0] + 4LL * (HIBYTE(v94) ^ 0xA9)) ^ *(_DWORD *)(STACK[0xAD8] + 4LL * (v92 ^ 0x44u)) ^ *(_DWORD *)(STACK[0xAD0] + 4LL * (BYTE1(v93) ^ 0xE7u));
  unsigned int v100 = *(_DWORD *)(STACK[0xAE8] + 4LL * (BYTE2(v93) ^ 0xD5u)) ^ *(_DWORD *)(STACK[0xAE0] + 4LL * (HIBYTE(v95) ^ 0x88)) ^ *(_DWORD *)(STACK[0xAD0] + 4LL * (BYTE1(v92) ^ 0xF1u)) ^ *(_DWORD *)(STACK[0xAD8] + 4LL * (v94 ^ 0xAu));
  unsigned int v101 = *(_DWORD *)(STACK[0xAE0] + 4LL * (HIBYTE(v98) ^ 0x34)) ^ *(_DWORD *)(STACK[0xAE8] + 4LL * (BYTE2(v99) ^ 8u)) ^ *(_DWORD *)(STACK[0xAD0] + 4LL * (BYTE1(v100) ^ 0x44u)) ^ *(_DWORD *)(STACK[0xAD8] + 4LL * (v97 ^ 0xD9u));
  unsigned int v102 = *(_DWORD *)(STACK[0xAE0] + 4LL * (HIBYTE(v97) ^ 0x97)) ^ *(_DWORD *)(STACK[0xAD0] + 4LL * (BYTE1(v99) ^ 0x4Au)) ^ *(_DWORD *)(STACK[0xAE8] + 4LL * (BYTE2(v98) ^ 0x6Cu)) ^ *(_DWORD *)(STACK[0xAD8] + 4LL * (v100 ^ 0xC2u));
  int v103 = ((2 * v102) ^ 0x2476EE88) + 151628 - ((2 * ((2 * v102) ^ 0x2476EE88)) & 0xBAA4) + 3335;
  unsigned int v104 = *(_DWORD *)(STACK[0xAD0] + 4LL * (BYTE1(v97) ^ 0x24u)) ^ *(_DWORD *)(STACK[0xAD8]
                                                                            + 4LL * (v98 ^ 0xD9u)) ^ *(_DWORD *)(STACK[0xAE0] + 4LL * (HIBYTE(v99) ^ 0xF)) ^ *(_DWORD *)(STACK[0xAE8] + 4LL * (BYTE2(v100) ^ 0x33u));
  unsigned int v105 = (((v102 ^ 0xF51C7765) + 61136) ^ 0xB7BDEBDD)
       + ((2 * ((v102 ^ 0xF51C7765) + 61136)) & 0x6F7BD7BA)
       + (v103 & 0x1DDA0 ^ 0x27655D81)
       + ((2 * v103) & 0x1BA40 ^ 0xFFFF45FF)
       + 551359395;
  unsigned int v106 = *(_DWORD *)(STACK[0xAE8] + 4LL * (BYTE2(v97) ^ 0xB5u)) ^ *(_DWORD *)(STACK[0xAD8]
                                                                            + 4LL * (v99 ^ 0x97u)) ^ *(_DWORD *)(STACK[0xAE0] + 4LL * (HIBYTE(v100) ^ 0x15)) ^ *(_DWORD *)(STACK[0xAD0] + 4LL * (BYTE1(v98) ^ 0xA2u));
  unsigned int v107 = *(_DWORD *)(STACK[0xAE8] + 4LL * (BYTE2(v104) ^ 0x78u)) ^ *(_DWORD *)(STACK[0xAD0] + 4LL
                                                                                            * (BYTE1(v106) ^ 0xACu)) ^ *(_DWORD *)(STACK[0xAE0] + 4LL * (HIBYTE(v101) ^ 0x53)) ^ *(_DWORD *)(STACK[0xAD8] + 4LL * (v102 ^ 0x65u));
  unsigned int v108 = *(_DWORD *)(STACK[0xAE8] + 4LL * (BYTE2(v101) ^ 0x4Bu)) ^ *(_DWORD *)(STACK[0xAD8]
                                                                             + 4LL * (v106 ^ 0xADu)) ^ *(_DWORD *)(STACK[0xAD0] + 4LL * (BYTE1(v104) ^ 0x9Fu)) ^ *(_DWORD *)(STACK[0xAE0] + 4LL * (HIBYTE(v102) ^ 0xF5));
  unsigned int v109 = *(_DWORD *)(STACK[0xAE8] + 4LL * (BYTE2(v106) ^ 0x70u)) ^ *(_DWORD *)(STACK[0xAE0] + 4LL
                                                                                            * (HIBYTE(v104) ^ 0xCE)) ^ *(_DWORD *)(STACK[0xAD0] + 4LL * (BYTE1(v102) ^ 0x77u)) ^ *(_DWORD *)(STACK[0xAD8] + 4LL * (v101 ^ 0xF8u));
  unsigned int v110 = *(_DWORD *)(STACK[0xAE8] + 4LL * ((BYTE2(v105) - ((v105 >> 15) & 0xC6) - 29) ^ 0xE3u)) ^ *(_DWORD *)(STACK[0xAE0] + 4LL * (HIBYTE(v106) ^ 0x49)) ^ *(_DWORD *)(STACK[0xAD0] + 4LL * (BYTE1(v101) ^ 0xA2u)) ^ *(_DWORD *)(STACK[0xAD8] + 4LL * (v104 ^ 0x2Bu));
  int v111 = *(_DWORD *)(STACK[0xAE8] + 4LL * (BYTE2(v107) ^ 0x5Bu)) ^ *(_DWORD *)(STACK[0xAE0] + 4LL
                                                                                            * (HIBYTE(v108) ^ 0xB8)) ^ *(_DWORD *)(STACK[0xAD0] + 4LL * (BYTE1(v109) ^ 0xD4u)) ^ *(_DWORD *)(STACK[0xAD8] + 4LL * ((*(_BYTE *)(STACK[0xAE8] + 4LL * ((BYTE2(v105) - ((v105 >> 15) & 0xC6) - 29) ^ 0xE3u)) ^ *(_BYTE *)(STACK[0xAE0] + 4LL * (HIBYTE(v106) ^ 0x49)) ^ *(_BYTE *)(STACK[0xAD0] + 4LL * (BYTE1(v101) ^ 0xA2u)) ^ *(_BYTE *)(STACK[0xAD8] + 4LL * (v104 ^ 0x2Bu))) ^ 0x94u));
  unsigned int v112 = ((2 * v111) & 0xEFDE7F76 ^ 0x4C502420) + (v111 ^ 0x59C72DAF);
  unsigned int v113 = *(_DWORD *)(STACK[0xAE8] + 4LL * (BYTE2(v109) ^ 0x18u)) ^ *(_DWORD *)(STACK[0xAE0] + 4LL
                                                                                            * (HIBYTE(v107) ^ 0x79)) ^ *(_DWORD *)(STACK[0xAD8] + 4LL * (v108 ^ 0xAEu)) ^ *(_DWORD *)(STACK[0xAD0] + 4LL * (BYTE1(v110) ^ 0xFu));
  unsigned int v114 = *(_DWORD *)(STACK[0xAE0] + 4LL * (HIBYTE(v109) ^ 0x25)) ^ *(_DWORD *)(STACK[0xAD0] + 4LL
                                                                                            * (BYTE1(v108) ^ 0xE9u)) ^ *(_DWORD *)(STACK[0xAD8] + 4LL * (v107 ^ 0x12u)) ^ *(_DWORD *)(STACK[0xAE8] + 4LL * (BYTE2(v110) ^ 0x53u));
  unsigned int v115 = v112 - 2012168123;
  int v116 = HIWORD(v115) - ((v115 >> 15) & 0x56);
  unsigned int v117 = *(_DWORD *)(STACK[0xAD8] + 4LL * (v109 ^ 0x7Du)) ^ *(_DWORD *)(STACK[0xAE8]
                                                                                       + 4LL * (BYTE2(v108) ^ 0x2Bu)) ^ *(_DWORD *)(STACK[0xAD0] + 4LL * (BYTE1(v107) ^ 0x3Cu)) ^ *(_DWORD *)(STACK[0xAE0] + 4LL * (HIBYTE(v110) ^ 0xFE));
  if (v112 - 395043541 >= 0x9F9CA31A) {
    char v118 = -76;
  }
  else {
    char v118 = -50;
  }
  if (v115 >= 0x9F9CA31A) {
    char v119 = 48;
  }
  else {
    char v119 = 22;
  }
  unsigned int v120 = ((((v114 ^ 0x726BFA7B) >> (BYTE2(v110) & 0x10 ^ 0x10))
         - ((2 * ((v114 ^ 0x726BFA7B) >> (BYTE2(v110) & 0x10 ^ 0x10))) & 0x5A2896DC)
         + 756304750) ^ 0x2D144B6E) >> (BYTE2(v110) & 0x10);
  char v121 = v112 + v119;
  if (v115 < 0x9F9CA31A) {
    char v118 = -24;
  }
  int v122 = *(_DWORD *)(v86 + 4LL * (BYTE1(v117) ^ 0x82u)) ^ *(_DWORD *)(v85 + 4LL * (HIBYTE(v113) ^ 0xC5)) ^ *(_DWORD *)(v84 + 4LL * v120) ^ *(_DWORD *)(v91 + 4LL * (v121 + v118 + 71));
  unsigned int v123 = *(_DWORD *)(v84 + 4LL * (BYTE2(v113) ^ 0x48u)) ^ *(_DWORD *)(v91 + 4LL * (v117 ^ 0xABu)) ^ *(_DWORD *)(v86 + 4LL * (BYTE1(v114) ^ 0xFAu)) ^ *(_DWORD *)(v85 + 4LL * HIBYTE(v115));
  int v124 = *(_DWORD *)(v84 + 4LL * (BYTE2(v117) ^ 3u)) ^ *(_DWORD *)(v85 + 4LL * (HIBYTE(v114) ^ 0x72)) ^ *(_DWORD *)(v91 + 4LL * (v113 ^ 0x42u)) ^ *(_DWORD *)(v86 + 4LL * ((BYTE1(v115) - ((v115 >> 7) & 0x52) + 41) ^ 0x29u));
  char v125 = (v56 & 0x18 ^ 8) - ((2 * (v56 & 0x18 ^ 8)) & 0x10);
  int v126 = *(_DWORD *)(v85 + 4LL * (HIBYTE(v117) ^ 0x1E));
  unsigned int v127 = (((2 * (v122 & 0xFFFFFFDF ^ 0xBE663183)) | 0x4A8F27AA) - (v122 & 0xFFFFFFDF ^ 0xBE663183) - 625447893) ^ (v122 & 0x20 | 0x8DE8AD91);
  unsigned int v128 = *(_DWORD *)(v84 + 4LL * ((v116 - 85) ^ 0xABu)) ^ v126 ^ *(_DWORD *)(v91
                                                                                            + 4LL
                                                                                            * (v114 ^ 0x7Bu)) ^ *(_DWORD *)(v86 + 4LL * (BYTE1(v113) ^ 0x59u));
  unsigned int v129 = (v124 ^ 0xAC2D59EF) >> (((v125 - 119) ^ 0x9F) & 0xF8);
  unsigned int v130 = ((v129 - ((2 * v129) & 0xF6DF3E1E) + 2070912783) ^ 0x7B6F9F0F) >> (((v125 - 119) ^ 0x80) & 0xF8);
  unsigned int v131 = *(_DWORD *)(v86 + 4LL * (BYTE1(v124) ^ 0x59u)) ^ *(_DWORD *)(v85 + 4LL * (HIBYTE(v123) ^ 0x1B)) ^ *(_DWORD *)(v91 + 4LL * v128) ^ *(_DWORD *)(v84 + 4LL * (BYTE2(v127) ^ 0xB4u));
  unsigned int v132 = (v130 - ((2 * v130) & 0x2A) - 107) ^ 0x95;
  unsigned int v133 = *(_DWORD *)(v84 + 4LL * (BYTE2(v124) ^ 0x2Du)) ^ *(_DWORD *)(v86 + 4LL * (BYTE1(v128) ^ 0xACu)) ^ *(_DWORD *)(v91 + 4LL * (v123 ^ 0xD6u)) ^ *(_DWORD *)(v85 + 4LL * (HIBYTE(v127) ^ 0x5A));
  unsigned int v134 = *(_DWORD *)(v91 + 4LL * (v127 ^ 0x17u)) ^ *(_DWORD *)(v84 + 4LL * (BYTE2(v128) ^ 0x15u)) ^ *(_DWORD *)(v86 + 4LL * (BYTE1(v123) ^ 0xFAu)) ^ *(_DWORD *)(v85 + 4LL * v132);
  unsigned int v135 = *(_DWORD *)(v85 + 4LL * (HIBYTE(v128) ^ 0x20)) ^ *(_DWORD *)(v91 + 4LL * (v124 ^ 0xEFu)) ^ *(_DWORD *)(v84 + 4LL * (BYTE2(v123) ^ 0xEu)) ^ *(_DWORD *)(v86 + 4LL * (BYTE1(v127) ^ 0xDBu));
  unsigned int v136 = ((2 * v134) & 0x212A1820 ^ 0xC2D60798)
       + (v134 & 0x9A958C13 ^ 0x9E947C33)
       + (((v134 ^ 0x55FCAF30) + 1) ^ 0xFF16FEFD)
       + ((2 * ((v134 ^ 0x55FCAF30) + 1)) & 0xFE2DFDFA);
  unsigned int v137 = (v136 - ((2 * v136 + 500425294) & 0xE75C6EB4) - 2103957375) ^ ((v134 & 0x9A958C13 ^ 0xB8C00012)
                                                                      - ((2 * (v134 & 0x9A958C13 ^ 0xB8C00012)) & 0x402A1826)
                                                                      - 518168937);
  unsigned int v138 = BYTE2(v131) ^ 0x39;
  unsigned int v139 = ((v136 - ((2 * v136 + 78) & 0xB4) - 127) ^ ((v134 & 0x13 ^ 0x12)
                                                                    - ((2 * (v134 & 0x13 ^ 0x12)) & 0x26)
                                                                    - 105)) ^ 0xDC;
  int v140 = *(_DWORD *)(v85 + 4LL * (HIBYTE(v131) ^ 0x2F));
  int v141 = *(_DWORD *)(v86
                   + 4LL
                   * (((unsigned __int16)((v136 - ((2 * v136 - 7602) & 0x6EB4) + 10369) ^ ((v134 & 0x8C13 ^ 0x12) - ((2 * (v134 & 0x8C13 ^ 0x12)) & 0x1826) + 24215)) >> 8) ^ 0x69u));
  int v142 = *(_DWORD *)(v91 + 4LL * (v135 ^ 0x67u));
  unsigned int v143 = *(_DWORD *)(v84 + 4LL * (BYTE2(v133) ^ 0x7Fu)) ^ v140 ^ v142 ^ v141;
  int v144 = *(_DWORD *)(v84 + 4LL * (BYTE2(v137) ^ 0x72u));
  int v145 = *(_DWORD *)(v85 + 4LL * (HIBYTE(v137) ^ 0x20));
  int v146 = *(_DWORD *)(v86 + 4LL * (BYTE1(v135) ^ 0xF8u));
  int v147 = *(_DWORD *)(v91 + 4LL * (v131 ^ 0x1Cu));
  int v148 = *(_DWORD *)(v86 + 4LL * (BYTE1(v131) ^ 0xAEu));
  unsigned int v149 = *(_DWORD *)(v85 + 4LL * (HIBYTE(v133) ^ 0xF1)) ^ v146 ^ v147 ^ v144;
  int v150 = *(_DWORD *)(v84 + 4LL * (BYTE2(v135) ^ 0x47u));
  unsigned int v151 = v145 ^ v148 ^ *(_DWORD *)(v91 + 4LL * (v133 ^ 0x88u)) ^ v150 ^ 0x923B7744;
  unsigned int v152 = v151 - ((2 * v151) & 0x96877A80) - 884753088;
  int v153 = *(_DWORD *)(v85 + 4LL * (HIBYTE(v135) ^ 0x7D)) ^ *(_DWORD *)(v84 + 4LL * v138);
  unsigned int v154 = v153 ^ *(_DWORD *)(v86 + 4LL * (BYTE1(v133) ^ 0xDu)) ^ *(_DWORD *)(v91 + 4LL * v139);
  int v155 = (v133 ^ 0xE80F277) + 1;
  v133 ^= 0x923B7744;
  unsigned int v156 = v133 + (v155 ^ 0xDF99D6DD) + ((2 * v155) & 0xBF33ADBA) + 543566115;
  unsigned int v157 = ((v156 + 1391615425 + (~(2 * v156) | 0x5A1B447F)) ^ 0xAD0DA238) + v133;
  unsigned int v158 = v157 - ((2 * v157) & 0x1FD1EAB0) - 1880558248;
  unsigned int v159 = v140 ^ v142 ^ *(_DWORD *)(v86 + 4LL * (BYTE1(v134) ^ 0x23u)) ^ *(_DWORD *)(v84 + 4LL * (BYTE2(v158) ^ 0xE8u));
  unsigned int v160 = *(_DWORD *)(v84 + 4LL * (BYTE2(v134) ^ 0x69u)) ^ v146 ^ v147 ^ *(_DWORD *)(v85 + 4LL * (HIBYTE(v158) ^ 0x8F));
  unsigned int v161 = v153 ^ *(_DWORD *)(v91 + 4LL * (v134 ^ 0x23u)) ^ *(_DWORD *)(v86 + 4LL * (BYTE1(v158) ^ 0xF5u));
  int v162 = *(_DWORD *)(v85 + 4LL * (HIBYTE(v134) ^ 0xCF)) ^ v150 ^ v148 ^ *(_DWORD *)(v91
                                                                                  + 4LL
                                                                                  * (v158 ^ 0x58u));
  unsigned int v163 = v162 ^ 0x923B7744;
  if ((v162 & 0x40000) != 0) {
    int v164 = -262144;
  }
  else {
    int v164 = 0x40000;
  }
  unsigned int v165 = v164 + v163 - ((2 * (v164 + v163)) & 0x312952AA) + 412395861;
  unsigned int v166 = v154 ^ 0x5A;
  unsigned __int8 v167 = v143;
  int v168 = *(_DWORD *)(v84 + 4LL * (BYTE2(v149) ^ 0x15u));
  int v169 = *(_DWORD *)(v84 + 4LL * (BYTE2(v152) ^ 0x3Fu));
  LODWORD(STACK[0x658]) = *(_DWORD *)(v84 + 4LL * (BYTE2(v154) ^ 0x3Bu));
  LODWORD(STACK[0x640]) = *(_DWORD *)(v84 + 4LL * (BYTE2(v143) ^ 0x51u));
  int v170 = *(_DWORD *)(v84 + 4LL * (BYTE2(v165) ^ 0xECu));
  int v171 = *(_DWORD *)(v84 + 4LL * (BYTE2(v161) ^ 0x3Bu));
  int v172 = *(_DWORD *)(v84 + 4LL * (BYTE2(v159) ^ 0x51u));
  int v173 = *(_DWORD *)(v91 + 4LL * (v161 ^ 0x5Au)) ^ *(_DWORD *)(v84 + 4LL * (BYTE2(v160) ^ 0x15u)) ^ *(_DWORD *)(v85 + 4LL * (HIBYTE(v159) ^ 0x35)) ^ *(_DWORD *)(v86 + 4LL * (BYTE1(v165) ^ 0x94u));
  unsigned int v174 = HIBYTE(v154) ^ 0xE4;
  int v175 = *(_DWORD *)(v86 + 4LL * (BYTE1(v154) ^ 0xC5u));
  unsigned int v176 = v152;
  int v177 = *(_DWORD *)(v86 + 4LL * (BYTE1(v152) ^ 0x80u));
  LODWORD(STACK[0x650]) = *(_DWORD *)(v86 + 4LL * (BYTE1(v143) ^ 0x64u));
  int v178 = *(_DWORD *)(v86 + 4LL * (BYTE1(v149) ^ 0x1Eu));
  unsigned int v179 = HIBYTE(v161) ^ 0xE4;
  int v180 = *(_DWORD *)(v86 + 4LL * (BYTE1(v161) ^ 0xC5u));
  int v181 = *(_DWORD *)(v86 + 4LL * (BYTE1(v159) ^ 0x64u));
  int v182 = *(_DWORD *)(v86 + 4LL * (BYTE1(v160) ^ 0x1Eu));
  int v183 = *(_DWORD *)(v85 + 4LL * (HIBYTE(v143) ^ 0x35));
  int v184 = *(_DWORD *)(v85 + 4LL * (HIBYTE(v149) ^ 0x56));
  int v185 = *(_DWORD *)(v85 + 4LL * v174);
  int v186 = *(_DWORD *)(v85 + 4LL * (HIBYTE(v176) ^ 0x52));
  int v187 = *(_DWORD *)(v85 + 4LL * (HIBYTE(v165) ^ 0x81));
  int v188 = *(_DWORD *)(v85 + 4LL * v179);
  int v189 = *(_DWORD *)(v85 + 4LL * (HIBYTE(v160) ^ 0x56)) ^ v180;
  unsigned int v190 = v159 ^ 0xD2;
  int v191 = (v183 ^ v168 ^ *(_DWORD *)(v91 + 4LL * v166) ^ 0x621DCA2 ^ v177) - 1202274211;
  unsigned int v192 = v191 ^ 0xF1DF566B;
  unsigned int v193 = (2 * v191) & 0xE3BEACD6;
  int v194 = v181 ^ v171 ^ *(_DWORD *)(v91 + 4LL * (v160 ^ 0x1Eu)) ^ v187;
  int v195 = v189 ^ *(_DWORD *)(v91 + 4LL * v190) ^ v170;
  int v196 = *(_DWORD *)(v91 + 4LL * (v149 ^ 0x1Eu));
  unsigned int v197 = v176;
  int v198 = *(_DWORD *)(v91 + 4LL * (v176 ^ 0x7Du));
  int v199 = *(_DWORD *)(v91 + 4LL * (v165 ^ 0x68u));
  unsigned int v200 = v193
       + v192
       + (v173 ^ 0xF9DE235D)
       - ((2 * (v193 + v192 + (v173 ^ 0xF9DE235D)) + 474043180) & 0xCD81BC50)
       - 186546242;
  unsigned int v201 = (v184 ^ v175 ^ *(_DWORD *)(v91 + 4LL * (v167 ^ 0xD2u)) ^ 0xC20FB5F8 ^ v169) + 758658806;
  int v202 = v182 ^ v172 ^ v188 ^ v199;
  int v203 = (v185 ^ LODWORD(STACK[0x640]) ^ v178 ^ 0x2D733ADB ^ v198) - 907041214;
  unsigned int v204 = ((2 * v203) & 0x77FC7BAE) + (v203 ^ 0x3BFE3DD7) + (v202 ^ 0xD28CC524);
  int v205 = (v196 ^ LODWORD(STACK[0x658]) ^ LODWORD(STACK[0x650]) ^ 0x5B7388C5 ^ v186) + 1794750297;
  unsigned int v206 = ((2 * v205) & 0x76FFE1EE) + (v205 ^ 0xBB7FF0F7) + (v194 ^ 0xA48C773A);
  unsigned int v207 = (v206 - ((2 * v206 + 151002644) & 0x48D63642) + 1760242219) ^ 0x931257AA;
  unsigned int v208 = ((-1397497827 * v207) ^ 0xFFEBEFFD) + ((1499971642 * v207) & 0xFFD7DFFA);
  unsigned int v209 = (((2 * v201) & 0xFD7D77E2)
        + (v201 ^ 0x7EBEBBF1)
        + (v195 ^ 0x3DF04A07)
        - 2
        * ((((2 * v201) & 0xFD7D77E2) + (v201 ^ 0x7EBEBBF1) + (v195 ^ 0x3DF04A07) + 21054480) & 0x6C4A1C2D ^ (((2 * v201) & 0xFD7D77E2) + (v201 ^ 0x7EBEBBF1) + (v195 ^ 0x3DF04A07)) & 4)
        - 309632967) ^ 0x50BB3C78;
  int v210 = ((1339632071 * v209) ^ 0x39DFFFFE) + ((531780494 * v209) & 0x73BFFFFC);
  unsigned int v211 = (v204 - 121452476 - ((2 * v204 + 134448212) & 0x6982007E) - 1499) ^ 0xA290FAA8;
  unsigned int v212 = ((-193647233 * v211) ^ 0x5FF79FF3) + ((-387294466 * v211) & 0xBFEF3FE6);
  unsigned int v213 = ((-619630751 * (v200 ^ 0x202FA21A)) ^ 0xEFCF6FFE) + ((-1239261502 * (v200 ^ 0x202FA21A)) & 0xDF9EDFFC) + v210;
  unsigned int v214 = v212 - v213 - 870454676 - ((2 * (v212 - v213 - 870454676) - 80491718) & 0xE282DA2A) - 287616334;
  unsigned int v215 = v210
       + ((v208 + 1312335 + (v214 ^ 0xF1416D15) + 2484) ^ 0x588400D0)
       - ((2 * (v208 + 1312335 + (v214 ^ 0xF1416D15) + 2484)) & 0x4EF7FE5E)
       + 1;
  unsigned int v216 = v212 + v208 - ((2 * (v212 + v208) + 1077469216) & 0x90086780) + 1746969552;
  int v217 = (v216 ^ 0x37FBCC3F) + v213 - ((2 * ((v216 ^ 0x37FBCC3F) + v213) + 748757002) & 0x4DEC8086) + 2101792840;
  int v218 = (v215 - ((2 * v215 + 1530396258) & 0x51E17A4A) - 1769161642) ^ v214;
  unsigned int v219 = (v173 ^ 0x621DCA2) + (v217 ^ 0x80B86F8C ^ v218) + 1;
  int v220 = v217 ^ v214;
  int v221 = (v217 ^ v214 ^ 0x57B72D56) + (v216 ^ 0x6EF27383 ^ v217);
  int v222 = v221 - ((2 * v221) & 0x7FE8994C);
  unsigned int v223 = ((2 * v219) & 0xEBFAEDFE)
       + (v219 ^ 0x75FD76FF)
       - ((2 * (((2 * v219) & 0xEBFAEDFE) + (v219 ^ 0x75FD76FF)) - 1551204038) & 0xFB1BF444)
       + 1330854591;
  unsigned int v224 = ((2 * ((v195 ^ 0xC20FB5F8) + (v220 ^ 0xA848D2A9) + 1)) & 0xFFBDADFE)
       + (((v195 ^ 0xC20FB5F8) + (v220 ^ 0xA848D2A9) + 1) ^ 0xFFDED6FF);
  unsigned int v225 = v224 - 2020846856 + (~(2 * v224 + 1067733826) | 0xB08BAD53);
  int v226 = (v222 - 1074508634) ^ 0x400BB359;
  unsigned int v227 = ((2 * ((v194 ^ 0x5B7388C5) + v226 + 1)) & 0xBDDFDDFE) + (((v194 ^ 0x5B7388C5) + v226 + 1) ^ 0x5EEFEEFF);
  unsigned int v228 = v218 ^ 0xD9B1D030;
  unsigned int v229 = ((v222 - 1074508634) ^ 0xBFF44CA6) & (v218 ^ 0xD9B1D030);
  unsigned int v230 = (v218 ^ 0xD9B1D030) + ((v222 - 1074508634) ^ 0x99BA6369 ^ v218) + 1;
  unsigned int v231 = v227 - ((2 * v227 + 733042046) & 0x37DC1A84) + 1908848641;
  unsigned int v232 = ((v222 - 1074508634) ^ (v226 - ((2 * v226 + 2) & 0x2A036938) + 352433309) ^ 0xC3899B61 ^ (v230
                                                                                                 - ((2 * v230) & 0xD2F8C6B6)
                                                                                                 + 1769759579))
       + v228;
  int v233 = 2 * (v229 - ((2 * v229) & 0x3409F99C)) + 873068956;
  unsigned int v234 = (v202 ^ 0x2D733ADB)
       + (v233 ^ 0x152969BD)
       + ((2 * v233) & 0xBDBEDFBC ^ 0xD7ED2CC7)
       + (v232 ^ 0x30D09908)
       - ((2 * v232) & 0x9E5ECDEE)
       - 1374759208;
  unsigned int v235 = ((2 * v234) & 0xFD73FBCE)
       + (v234 ^ 0xFEB9FDE7)
       + 334459460
       - ((2 * (((2 * v234) & 0xFD73FBCE) + (v234 ^ 0xFEB9FDE7)) - 1803481188) & 0x935DEDBE)
       + 3177;
  int v236 = *(_DWORD *)(STACK[0xAB0] + 4LL * (HIBYTE(v231) ^ 0x9B));
  unsigned int v237 = v236 ^ 0xA67DE88C;
  int v238 = *(_DWORD *)(STACK[0xAA8] + 4LL * (BYTE2(v235) ^ 0xAEu));
  unsigned int v239 = (v236 ^ 0xA67DE88C) + (v236 ^ 0x8B08F6AE ^ v238) + 1;
  unsigned int v240 = (v238 ^ ((v238 ^ 0x2D751E22) - ((2 * (v238 ^ 0x2D751E22) + 2) & 0xEF7F437C) + 2009047487) ^ (v239 - ((2 * v239) & 0x67E2996A) + 871451829) ^ 0x96C40CD6)
       + v237;
  int v241 = LODWORD(STACK[0x460]) ^ LODWORD(STACK[0x4B0]);
  int v242 = v241 ^ LODWORD(STACK[0x4D0]);
  unsigned int v243 = v242 ^ *(_DWORD *)(STACK[0xAA8] + 4LL * (BYTE2(v225) ^ 0xBAu)) ^ *(_DWORD *)(STACK[0xAF0]
                                                                                    + 4LL * (BYTE1(v231) ^ 0xDu)) ^ *(_DWORD *)(STACK[0xAB0] + 4LL * (HIBYTE(v223) ^ 0x7D)) ^ *(_DWORD *)(STACK[0xAC0] + 4LL * ((((2 * v234) & 0xCE) + (v234 ^ 0xE7) + 68 - ((2 * (((2 * v234) & 0xCE) + (v234 ^ 0xE7)) - 100) & 0xBE) + 105) ^ 0xDFu));
  int v244 = v241 ^ *(_DWORD *)(STACK[0xAA8] + 4LL * (BYTE2(v231) ^ 0xEEu)) ^ *(_DWORD *)(STACK[0xAC0]
                                                                                    + 4LL
                                                                                    * ((2 * v219 + ~(_BYTE)v219 - ((2 * (2 * v219 + ~(_BYTE)v219) + 58) & 0x44) - 65) ^ 0x22u)) ^ *(_DWORD *)(STACK[0xAB0] + 4LL * (HIBYTE(v225) ^ 0xA7)) ^ *(_DWORD *)(STACK[0xAF0] + 4LL * (BYTE1(v235) ^ 0xF6u));
  unsigned int v245 = v242 ^ *(_DWORD *)(STACK[0xAC0] + 4LL * (v225 ^ 0x56u)) ^ *(_DWORD *)(STACK[0xAF0]
                                                                                              + 4LL
                                                                                              * (BYTE1(v223) ^ 0xFAu)) ^ (v240 - ((2 * v240) & 0xEF9DF36C) + 2010053046);
  unsigned int v246 = v242 ^ *(_DWORD *)(STACK[0xAC0] + 4LL * (v231 ^ 0x42u)) ^ *(_DWORD *)(STACK[0xAA8]
                                                                                              + 4LL
                                                                                              * (BYTE2(v223) ^ 0x8Du)) ^ *(_DWORD *)(STACK[0xAF0] + 4LL * (BYTE1(v225) ^ 0x29u)) ^ *(_DWORD *)(STACK[0xAB0] + 4LL * (HIBYTE(v235) ^ 0x49));
  HIDWORD(v247) = LODWORD(STACK[0x4D0]) ^ 0xD4086F;
  LODWORD(v247) = LODWORD(STACK[0x4D0]) ^ 0x43000000;
  int v248 = (v247 >> 24) - ((2 * (v247 >> 24)) & 0x49008322);
  HIDWORD(v247) = v244 ^ 0x707F83;
  LODWORD(v247) = v244 ^ 0xFA000000;
  int v249 = ((v247 >> 24) - 1968264890 + (~(2 * (v247 >> 24)) | 0xEAA2AD75)) ^ (v248 - 1535098479);
  HIDWORD(v247) = v249 ^ 0x2B;
  LODWORD(v247) = v249 ^ 0x7E938C00;
  int v250 = (v247 >> 8) - ((2 * (v247 >> 8)) & 0x61A4E618) + 819098380;
  unsigned int v251 = (v250 & 0xC080B2 ^ 0x450409F3) + (v250 & 0x311405 ^ 0x9021120C);
  else {
    int v252 = -680223668;
  }
  unsigned int v253 = v250 ^ v252;
  unsigned int v254 = (((v250 ^ v252) & 0xFF0E6B48 ^ 0x82064240)
        - ((2 * ((v250 ^ v252) & 0xFF0E6B48 ^ 0x82064240)) & 0xB2048480)
        - 654162364) ^ 0xD3625640;
  unsigned int v255 = ((v254 | 0xDE748F6A) - (v254 | 0x218B7095) + 562786453) ^ 0x4E149F2E | (v251 - 1) ^ 0xD5A59FDE;
  unsigned int v256 = v255 + 1016232655 + (~(2 * v255) | 0x86DB0A63);
  int v257 = byte_100239300[BYTE1(v246) ^ 0xCLL];
  int v258 = v257 - ((2 * v257 + 18) & 0xFFFFFFA6);
  LOBYTE(v257) = (((2 * ((v258 + 92) & 0xBE ^ 0x36)) & 0x74) - ((v258 + 92) & 0xBE ^ 0x36) + 69) ^ 0x45;
  int v259 = ((v246 ^ 0x59) - ((2 * (v246 ^ 0x59)) & 0x1BC) + 1258345182) ^ 0x6F94D4EF;
  LOBYTE(v259) = byte_100213780[(((2 * v259) | 0x712C1466u) - v259 + 1198126541) ^ 0x9C020CA9LL];
  LOBYTE(STACK[0xB8E]) = ((((v258 + 92) >> 2) & 0x1D ^ 4) - (((v258 + 92) >> 1) & 0x20) - 80) ^ (((-93 - v258) | 0xBE) + ((2 * (((-93 - v258) & 0x41 | 2) ^ ((-93 - v258) | 0x7E))) ^ 0x2F) + 85) ^ 0x8E ^ ((v257 | 0xDE) - (v257 | 0x21) + 33);
  LOBYTE(STACK[0xB8F]) = v259 ^ 0x1F;
  uint64_t v260 = HIBYTE(v245);
  int v261 = 2 * (v260 ^ 0x47);
  int v262 = (v260 ^ 0x47) - (v261 & 0x94);
  unsigned int v263 = ((((v260 ^ 0x47) - (v261 & 0x55555555)) << 24) - 1442840576) ^ 0xAA000000;
  int v264 = v263 - ((2 * v263) & 0x3E000000) - 1621892273;
  LOBYTE(v261) = byte_1002146A0[HIBYTE(v246) ^ 2LL];
  LOBYTE(STACK[0xB8C]) = (v261 + (~(2 * v261 + 60) | 0xD5) + 84) ^ 0xA4;
  unsigned int v265 = ((((v262 << 24) - 894220469) ^ 0xCA000000) - 15) ^ 0x3C298FE5;
  int v266 = ((v264 ^ 0x7E980888) & v265) - ((2 * ((v264 ^ 0x7E980888) & v265)) & 0x5735DA7A);
  unsigned int v267 = (((v264 ^ 0x7EDC288E) + v265) ^ 0xFF7FFEF2)
       + ((2 * ((v264 ^ 0x7EDC288E) + v265)) & 0xFEFFFDE4)
       + ((2 * v266 - 684336518) ^ 0x3BF6DA3F)
       + 331153610
       + ((2 * (2 * v266 - 684336518)) & 0x2679FF74 ^ 0xD9964B8B);
  unsigned int v268 = ((v267 >> 22) - 1713205148 - ((v267 >> 21) & 0x12A) + 49) ^ 0x99E29064;
  unsigned int v269 = (((v268 >> 2) - ((v268 >> 1) & 0xFA) + 125) ^ 0xFFFFFF98) + 1;
  LOBYTE(v260) = (v269 ^ 0x7B) + byte_1002146A0[v260 ^ 0x62] + ((2 * v269) & 0xF7);
  int v270 = (HIWORD(v245) ^ 0x9ABB) + (HIWORD(v245) ^ 0x9AA4);
  LOBYTE(STACK[0xB88]) = (v260 + (~(2 * v260 + 60) | 0xD3) - 43) ^ 0xDB;
  unsigned int v271 = (((v270 ^ 0x7F) + 2 * v270 - 127) ^ 0x7E)
       + byte_100236BC0[((HIWORD(v245) & 0x92 ^ 0x61127203) + (HIWORD(v245) & 0x6D ^ 0x80A8040D) - 1) ^ 0xE1BA761FLL]
       + 4 * (((v270 ^ 0x7Fu) + 2 * v270 - 127) >> 1);
  LOBYTE(STACK[0xB89]) = (v271 - ((2 * v271 + 78) & 0xA4) + 121) ^ 0xE3;
  LOBYTE(v261) = byte_1002146A0[HIBYTE(v253) ^ 0xD1LL];
  LOBYTE(v271) = v261 - ((2 * v261 + 28) & 0x1A) + 75;
  LOBYTE(STACK[0xB84]) = ((-58 - v261 - ((4 - 2 * v261) & 8)) ^ v271 ^ 0xB4 ^ ((v271 ^ 0x10)
                                                                             - ((2 * (v271 ^ 0x10) + 70) & 0x7A)
                                                                             + 32))
                       + 98;
  unsigned int v272 = ((BYTE2(v246) ^ 0x5C | 0x80FFD192) - (BYTE2(v246) ^ 0x5C | 0x7F002E6D) + 2130718317) ^ 0x80FFD125;
  int v273 = (HIWORD(v246) ^ 0xB940) + (HIWORD(v246) ^ 0xB95F);
  LOBYTE(v273) = 2 * (v273 & 0x3F) + (v273 ^ 0xBF) + 65;
  LOBYTE(v273) = byte_100236BC0[v272] + (v273 ^ 0x5E) + ((2 * v273) & 0xBC);
  LOBYTE(STACK[0xB8D]) = (v273 + (~(2 * v273 - 114) | 0x63) - 106) ^ 0xE3;
  LOBYTE(STACK[0xB87]) = byte_100213780[(((2 * (v256 ^ 0x830286E7)) & 0x401043E)
  int v274 = (BYTE1(v245) ^ 0xB5) - ((2 * (BYTE1(v245) ^ 0xB5)) & 0x70) + 1441938232;
  LOBYTE(v274) = byte_100239300[((v274 ^ 0x7471D918) - (v274 & 0x10220A0) + (v274 & 0x41000A0 ^ 0x20000A0u)) ^ 0x2691C225LL];
  LOBYTE(STACK[0xB83]) = byte_100213780[((v243 ^ 0x880913EE | 0xEBDB37FA)
  char v275 = v274 - ((2 * v274 + 18) & 0x34) + 35;
  if ((v197 ^ 0x52000000) >> 24) {
    char v276 = v275 ^ 0x12;
  }
  else {
    char v276 = 116;
  }
  LOBYTE(STACK[0xB8A]) = v275 ^ ((((v276 & (v275 ^ 0x9A)) + (~(2 * (v276 & (v275 ^ 0x9A))) | 0x65) + 78) & 0xFC) >> 2) ^ 0x58;
  int v277 = (v245 & 0x25) + (v245 ^ 0xAD) - ((v245 ^ 0xAD) & 0x25) + 996175616;
  LOBYTE(STACK[0xB8B]) = byte_100213780[((v277 & 0x2A205ED4 ^ 0x8102D0)
                                       + (v277 ^ 0x3F707C05)
                                       - ((v277 ^ 0x3F707C05) & 0x4001ED4u)) ^ 0x2AB14DBELL] ^ 0xB9;
  int v278 = (HIWORD(v243) ^ 0xD007) + (HIWORD(v243) ^ 0xD018);
  int v279 = 2 * (v278 & 0x3F) + (v278 ^ 0x3F) - 63;
  unsigned int v280 = (v279 ^ 0x77)
       + ((2 * v279) & 0xFFFFFFEF)
       + byte_100236BC0[(((v243 >> 15) & 0x130) + (BYTE2(v243) ^ 0xFFFFFFFC) + 447656808) ^ 0x1AAEB3D7];
  HIDWORD(v281) = v280 - 26;
  LODWORD(v281) = (v280 << 24) + 771751936;
  int v282 = (v281 >> 27) - ((2 * (v281 >> 27)) & 0x76) - 69;
  HIDWORD(v281) = v282 ^ 0x10;
  LODWORD(v281) = (v282 ^ 0x20) << 24;
  LOBYTE(STACK[0xB81]) = ((v281 >> 29) - ((2 * (v281 >> 29)) & 0x84) + 66) ^ 0x48;
  int v283 = (((2 * (BYTE1(v243) ^ 0x32)) & 0x148) - (BYTE1(v243) ^ 0x32) + 188012635) ^ 0xF24405F;
  LOBYTE(v283) = byte_100239300[(v283 - ((2 * v283) & 0x82020EAu) + 1866010741) ^ 0x6B29886BLL];
  LOBYTE(v283) = v283 - ((2 * v283 + 18) & 0xE0) + 121;
  char v284 = (v283 >> 2) & 0x11 ^ 0x92 | (v283 >> 2) & 0xC;
  LOBYTE(STACK[0xB82]) = v283 ^ (((((v283 >> 2) & 0x11 ^ 0x92) & 0xFC | (v283 >> 2) & 0xC) ^ 0x18)
                               + (v284 ^ 0xE7)
                               - ((v284 ^ 0xE7) & 0x3C)) ^ 0xC3;
  int v285 = ((BYTE1(v256) ^ 0x61B15528) + ((v256 >> 8) & 0x65 ^ 0xE002A45) - ((BYTE1(v256) ^ 0x61B15528) & 0x1201165)) ^ 0xC986637;
  int v286 = byte_100239300[((v285 | 0xC22922D8) - (v285 | 0x3DD6DD27) + 1037491495) ^ 0xA0202A2DLL];
  unsigned int v287 = v286 - ((2 * v286 + 18) & 0xFFFFFFE0) + 121;
  unsigned int v288 = (((2 * ((v287 >> 2) & 0x1D ^ 9)) | 0xFFFFFFA4) - ((v287 >> 2) & 0x1D ^ 9) - 82) ^ 0xFFFFFFC7;
  int v289 = ((2 * ((HIWORD(v256) ^ 0x3C41) + (HIWORD(v256) ^ 0x3C5E))) & 0x1C)
       + (((HIWORD(v256) ^ 0x3C41) + (HIWORD(v256) ^ 0x3C5E)) ^ 0x8E);
  LOBYTE(STACK[0xB86]) = v287 ^ 0xC5 ^ (((2 * v288) | 0xA2) - v288 - 81);
  unsigned int v290 = (((2 * (BYTE2(v256) ^ 0x8B)) | 0x8F8A1CD2) - (BYTE2(v256) ^ 0x8B) + 943387031) ^ 0xF5C14769;
  LOBYTE(v290) = v289 + byte_100236BC0[(((2 * v290) & 0x66481B0) - v290 - 1127366873) ^ 0x8EC9F659LL];
  LOBYTE(STACK[0xB85]) = (v290 - ((2 * v290 + 46) & 0x38) + 51) ^ 0x43;
  char v291 = byte_1002146A0[HIBYTE(v243) ^ 0x93LL];
  LOBYTE(STACK[0xB80]) = (v291 + (~(2 * v291 + 124) | 0x67) + 11) ^ 0x4F;
  LODWORD(STACK[0xACC]) = 0;
  return sub_100127928();
}

uint64_t sub_1000CFDC8( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v13 = (((*v12 - ((2 * *v12) & 0x20)) << 8) + 4096) ^ 0x1000;
  unsigned int v14 = (v13 - ((2 * v13) & 0xFFFFB200) + a8) ^ a8 | (v12[1] - ((2 * v12[1]) & 0x60) + v10) ^ v10;
  unsigned int v15 = a3
      + 1073741058
      + ((unsigned __int16)(v14 - ((2 * v14) & 0x35EE) - 25865) ^ 0xEBE791AC)
      + ((2 * ((v14 - ((2 * v14) & 0x35EE) - 25865) ^ 0x9AF7)) & 0x16B6)
      + 595990111;
  BOOL v16 = v15 < v8;
  BOOL v17 = v15 > v9;
  if (v9 < v8 != v16) {
    BOOL v17 = v16;
  }
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + ((1912 * !v17) ^ (v11 - 837))) - 12))();
}

uint64_t sub_1000CFEF8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = 13 * (a4 ^ 0x6B0);
  __int16 v9 = ((v8 ^ 0xF39B)
      + ((*(unsigned __int8 *)(v7 + v5 - 0x5C01ACC5FE0FCFAELL + v6 + 0x5C01ACC5A73EFA1DLL)
  __int16 v10 = *(unsigned __int8 *)(v7 + v5 - 0x5C01ACC5FE0FCFAELL + v6 + 0x5C01ACC5A73EFA1ELL);
  __int16 v11 = (v9 - ((2 * v9) & 0x7400) + v4) ^ v4 | (v10 - ((2 * v10) & 0x14) - 2294) ^ 0xF70A;
  BOOL v12 = (__int16)(v11 - ((2 * v11) & 0x2448) - 28115) < (__int16)(v8 - 29028);
}

uint64_t sub_1000D0000(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return ((uint64_t (*)(void))(*(void *)(a7
                                        + 8LL
                                        * (int)((((((a4 + 728502884) & 0xD493EA79) + 705) ^ (a4 - 210) ^ 0x1F4)
                                               * (v7 == -28118)) ^ (a4 - 210)))
                            - 12LL))();
}

uint64_t sub_1000D004C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return ((uint64_t (*)(void))(*(void *)(a7 + 8LL * (((((v8 - 829) | 0x682) ^ 0x18F) * (v7 == 39655)) ^ v8))
                            - ((v8 - 1943260022) & 0x73D3CEBA)
                            + 1654LL))();
}

uint64_t sub_1000D00A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return ((uint64_t (*)(void))(*(void *)(a7 + 8LL * (v7 + 56)) - 8LL))();
}

void sub_1000D0120()
{
}

uint64_t sub_1000D0128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return ((uint64_t (*)(void))(*(void *)(a7 + 8LL * (((((v8 - 652) | 0x300) ^ 0x790) * (v7 == -28105)) ^ v8))
                            - ((v8 - 640) | 0x30u)
                            + 109LL))();
}

uint64_t sub_1000D0164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return ((uint64_t (*)(void))(*(void *)(a7 + 8LL * (((119 * (v7 ^ 0x333) - 1546) * (v8 == 39670)) ^ v7)) - 12LL))();
}

uint64_t sub_1000D019C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v11 = (v9 ^ 0x1F4) - 592;
  int v12 = *(unsigned __int8 *)(v10 + (a3 - 1456526854 + v11));
  LODWORD(STACK[0x648]) = v12 + 1148548335 - ((2 * v12) & 0xFFFFFFDF);
  BOOL v13 = v8 < v7;
  unint64_t v14 = (a3 + 5) - 512955774LL + ((unint64_t)((a3 + 5) < 0x56D0D591) << 32);
  int v15 = v13 ^ (v14 < v7);
  BOOL v16 = v14 <= v8;
  if (!v15) {
    BOOL v13 = v16;
  }
  return (*(uint64_t (**)(void))(a7 + 8LL * ((!v13 * (14 * (v11 ^ 0xE) - 1455)) ^ v11)))();
}

uint64_t sub_1000D02B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return sub_1000CFDC8(a1, a2, v8, a4, a5, a6, a7, a8);
}

void sub_1000D02C0()
{
  LODWORD(STACK[0x860]) = STACK[0x648];
  free((void *)(STACK[0x650] - 0x4378B8CC4843E522LL));
  JUMPOUT(0x100136268LL);
}

uint64_t sub_1000D02D0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4 = a4 ^ 0x6FB;
  LODWORD(STACK[0x860]) = STACK[0x648];
  uint64_t v5 = malloc((LODWORD(STACK[0x9B8]) - 448329679));
  STACK[0x8A0] = (unint64_t)v5;
  return ((uint64_t (*)(void))*(&off_10025C670 + ((352 * (((v5 == 0LL) ^ (v4 - 1)) & 1)) ^ (v4 - 570))))();
}

uint64_t sub_1000D02E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  BOOL v15 = v10 < v11;
  *(_BYTE *)(v13 + v9 - 0x7C65EBDE71DF5DDLL) = *((_BYTE *)&STACK[0xB80] + v12 - 0x5223ECBA77EC9A08LL) - 45;
  if (v15 == v14 - 0x70CA68FCB356AC5FLL < v8) {
    BOOL v15 = v14 - 0x70CA68FCB356AC5FLL < v10;
  }
  return ((uint64_t (*)(void))(*(void *)(a7 + 8LL * (((2 * v15) | (8 * v15)) ^ v7)) - 4LL))();
}

uint64_t sub_1000D0384()
{
  LODWORD(STACK[0x580]) = LODWORD(STACK[0x5B8]) ^ 0x369A7E1C;
  LODWORD(STACK[0x498]) = LODWORD(STACK[0x550]) + 1303212602;
  LODWORD(STACK[0x550]) = LODWORD(STACK[0x620]) ^ 0xE5296E40;
  int v1 = *(unsigned __int8 *)(STACK[0x658]
                          + (*(_BYTE *)(STACK[0x658]
                                      + ((*(_BYTE *)(STACK[0x658] + ((*(_BYTE *)(STACK[0x658] + 5) + 12) & 0xF)) + 6) & 0xF)) & 0xF))
     + 14;
  int v2 = ((v1 & 0xF) + (~(2 * v1) | 0xE7) - 35) ^ 0xDC;
  unsigned int v3 = ((2 * v2) & 0x56) + (v2 ^ 0x1F2F9F2B);
  unsigned int v4 = (v0 + 1555170427) & 0xA34DFB5F;
  LODWORD(STACK[0x5E8]) = (v4 + 1477571239) & 0xA7EE0E7F;
  BOOL v5 = v3 < 0x1F2F9F2B || v3 + 1306989744 > 0x6D16B3DC;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)*(&off_10025C670 + (int)((43 * v5) ^ v4)) - 4))( 1537814864LL,  3928587484LL,  2733201174LL);
}

uint64_t sub_1000D14DC()
{
  int v1 = STACK[0x5E0];
  if (LODWORD(STACK[0x640]) != -1965538105) {
    int v1 = STACK[0x5D8];
  }
  LODWORD(STACK[0x368]) = v1;
  LODWORD(STACK[0x3D4]) = LODWORD(STACK[0x460]) ^ LODWORD(STACK[0x3E8]);
  LODWORD(STACK[0x640]) = (LODWORD(STACK[0x5E8]) + 1962892176) & 0x8B00A0FF;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)*(&off_10025C670
                                                                      + (LODWORD(STACK[0x5E8]) ^ (((v0 + 1) > 0xF) << 9)))
                                                            - 12))( 1844608292LL,  1916524612LL,  3875987025LL);
}

#error "1000D47B8: call analysis failed (funcsize=2152)"
void sub_1000D47BC()
{
  JUMPOUT(0x1000D3D44LL);
}

uint64_t sub_1000D47C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,int a51,int a52,int a53,int a54,int a55,int a56,int a57,int a58,int a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v73 = (a5 - 276582046) & 0x107C4E93;
  STACK[0x5E8] = LODWORD(STACK[0x23C]) ^ v73 ^ 0x1Cu;
  LODWORD(STACK[0x3E0]) = LODWORD(STACK[0x228]) ^ LODWORD(STACK[0x5E0]);
  LODWORD(STACK[0x378]) = a70 - a72;
  LODWORD(STACK[0x4E0]) ^= LODWORD(STACK[0x550]) ^ LODWORD(STACK[0x560]) ^ LODWORD(STACK[0x47C]) ^ (a57 - 2 * a59);
  LODWORD(STACK[0x380]) = LODWORD(STACK[0x3E4]) ^ 0x51EEA42A;
  LODWORD(STACK[0x228]) = a55 - a56;
  LODWORD(STACK[0x560]) = a52 - a53;
  LODWORD(STACK[0x23C]) = LODWORD(STACK[0x338]) - a54;
  LODWORD(STACK[0x238]) = LODWORD(STACK[0x4A0]) ^ 0x631B314E;
  BOOL v74 = STACK[0x650] > v72 - 1395463997;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)*(&off_10025C670
                                                                      + (((2 * v74) | (8 * v74)) ^ v73))
                                                            - 12))( 0x7A7911952AB4018LL,  1847072088LL,  437999840LL);
}

void sub_1000D523C()
{
}

uint64_t sub_1000D5268( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,int a58,int a59,int a60,int a61,int a62,int a63)
{
  LODWORD(STACK[0x338]) = LODWORD(STACK[0x218]) ^ LODWORD(STACK[0x5E0]);
  LODWORD(STACK[0x468]) = LODWORD(STACK[0x4D0]) - LODWORD(STACK[0x468]);
  LODWORD(STACK[0x374]) = a73 - LODWORD(STACK[0x230]);
  LODWORD(STACK[0x358]) = a63 - a64;
  LODWORD(STACK[0x4D0]) = a65 ^ LODWORD(STACK[0x390]) ^ LODWORD(STACK[0x4B0]);
  LODWORD(STACK[0x4A0]) = a57 - a58;
  int v74 = STACK[0x5D8];
  LODWORD(STACK[0x230]) = a59 - a61;
  LODWORD(STACK[0x218]) = v74 ^ 0x95CE9246;
  char v75 = *(_BYTE *)(STACK[0x658]
                 + ((*(_BYTE *)(STACK[0x658]
                              + ((*(_BYTE *)(STACK[0x658] + ((*(_BYTE *)(STACK[0x658] + 13) + 10) & 0xF)) + 9) & 0xF))
                   + 3) & 0xF))
      + 11;
  int v76 = (v75 & 0xF) - 2 * (v75 & 1) + 1;
  LODWORD(STACK[0x4B0]) = LODWORD(STACK[0x4F0]) ^ 0xB3A16243;
  unsigned int v77 = (v76 ^ 0x9FFFEDA7) + ((2 * v76) & 0x14C) - 1518020783;
  LODWORD(STACK[0x5E0]) = v73;
  LODWORD(STACK[0x640]) = v73 ^ 0x503;
  LODWORD(STACK[0x5D8]) = -1611244054;
  BOOL v78 = v77 > 0x4584C4F8;
  if (v77 < 0x4584C4F7) {
    BOOL v78 = 1;
  }
  return ((uint64_t (*)(uint64_t))((char *)*(&off_10025C670 + ((1303 * !v78) ^ LODWORD(STACK[0x5E0]))) - 4))(3746159248LL);
}

uint64_t sub_1000D6B0C( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,int a62,int a63)
{
  int v72 = LODWORD(STACK[0x640]) - 15;
  LODWORD(STACK[0x3BC]) ^= LODWORD(STACK[0x224]);
  LODWORD(STACK[0x5D8]) = a70 - 2 * a71;
  LODWORD(STACK[0x224]) = a62 - a65;
  LODWORD(STACK[0x390]) = a67 - a68;
  int v73 = *(unsigned __int8 *)(STACK[0x658] + v71 + 681728843 + ((v72 - 164) ^ 0xD75DA763));
  unsigned int v74 = 1364176807 * (((2 * v73) & 0xFFFFFFC3) + (v73 ^ 0x7EE86BE1))
      - ((-1566613682 * (((2 * v73) & 0xFFFFFFC3) + (v73 ^ 0x7EE86BE1)) - 1301831054) & 0x8929BEFA)
      + 499691702;
  unsigned int v75 = v71 + 681728843 + (a2 ^ 0x5153A5FF ^ v74) + ((v72 - 164) ^ 0xD75DA763);
  unsigned int v76 = (((((2 * v75) & 0xEB76FFFE) + (v75 ^ 0x75BB7FFF) - 1975222271) >> 16) ^ 0xFDFEEDFC)
      + ((2 * v75) & 0xEB76FFFE)
      + (v75 ^ 0x75BB7FFF)
      + ((2 * ((((2 * v75) & 0xEB76FFFE) + (v75 ^ 0x75BB7FFF) - 1975222271) >> 16)) & 0x1DBF8);
  unsigned int v77 = (((v76 - 1941597691) >> 8) ^ 0x7F70FFC7) + v76 + (((v76 - 1941597691) >> 7) & 0xE1FF8E);
  unsigned int v78 = v77 - ((2 * v77 + 430515324) & 0x85994C02) + 1335965759;
  int v79 = 2 * (v78 ^ 0x42CCA601);
  unsigned int v80 = (v78 ^ 0x42CCA601) - ((v79 + 276970722) & 0xF24EA026) + 23621252;
  int v81 = (((2 * v80) ^ 0xF24EA026) - ((2 * ((2 * v80) ^ 0xF24EA026)) & 0x1701E7E0) + 1266742256) & a4 ^ 0x2A4726D8;
  uint64_t v82 = ((v81 - ((2 * v81) & 0x1CA146B0) + 240167770) & 0x1A72119A ^ 0x10601118)
      + ((v81 - ((2 * v81) & 0x1CA146B0) + 240167770) ^ 0x2A170CE7)
      - (((v81 - ((2 * v81) & 0x1CA146B0) + 240167770) ^ 0x2A170CE7) & 0x1A721198u);
  unsigned int v83 = (v78 ^ 0x42CCA601) - ((v79 + 553941444) & 0xA7D95614) - 462493716;
  int v84 = (((2 * v83) ^ 0xA7D95614) - ((2 * ((2 * v83) ^ 0xA7D95614)) & 0x437C7BEC) + 566115830) & a4 ^ 0x78019610;
  unsigned int v85 = (((2 * v84) & 0x96030C10) - v84 - 1262743055) ^ 0xACFED2B1;
  unsigned int v86 = ((2 * v85) | 0xE443917E) - v85;
  unsigned int v87 = v71 + 681728843 + (v74 ^ 0x97787477 ^ v83) + ((v72 - 164) ^ 0xD75DA763);
  unsigned int v88 = (((((2 * v87) & 0xFCC6FFBC) + (v87 ^ 0x7E637FDE) - 2120450014) >> 16) ^ 0xEFD9EFED)
      + ((2 * v87) & 0xFCC6FFBC)
      + (v87 ^ 0x7E637FDE)
      + ((2 * ((((2 * v87) & 0xFCC6FFBC) + (v87 ^ 0x7E637FDE) - 2120450014) >> 16)) & 0x1DFDA);
  unsigned int v89 = (((v88 - 1849520075) >> 8) ^ 0xFDE0DFAF) + v88 + (((v88 - 1849520075) >> 7) & 0x1C1BF5E);
  int v90 = v89 - ((2 * v89 + 1221057232) & 0x5CB95C8C) + 1388354478;
  int v91 = ((2 * v90) ^ 0x5CB95C8C) - ((2 * ((2 * v90) ^ 0x5CB95C8C)) & 0xDEAAE8C) - 2030741690;
  unsigned int v92 = v71 + 681728843 + (v74 ^ 0xEAC8713B ^ v90) + ((v72 - 164) ^ 0xD75DA763);
  unsigned int v93 = (((((2 * v92) & 0xF7FFFFDA) + (v92 ^ 0xFBFFFFED) + 67108883) >> 16) ^ 0x6BFA7FD7)
      + ((2 * v92) & 0xF7FFFFDA)
      + (v92 ^ 0xFBFFFFED)
      + (((((2 * v92) & 0xF7FFFFDA) + (v92 ^ 0xFBFFFFED) + 67108883) >> 15) & 0xFFAE);
  uint64_t v94 = (((v93 - 1744469956) >> 8) ^ 0xBFF5E8AD) + v93 + (((v93 - 1744469956) >> 7) & 0x1EBD15A);
  uint64_t v95 = v94 - ((2 * (_DWORD)v94 + 287549666) & 0x2B8EF504) - 27701517;
  int v96 = (((((2 * v95) ^ 0x2B8EF504) + 867768396 - 2 * (((2 * v95) ^ 0x2B8EF504) & 0x33B9184E ^ (2 * v95) & 2)) & a4 ^ 0x63BCC7A5)
       - 1) ^ 0x10C5D16D;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)*(&off_10025C670 + ((243 * ((v71 + 1) < 0x10)) ^ v72)) - 12))( v94,  v95,  2380150593LL,  a4,  v96 - ((2 * v96) & 0x10B029A0u),  1612747522LL,  a7 ^ v83 ^ (v86 - 1914816703) ^ v90 ^ ((v91 & a4 ^ 0x65113F49)
                                                + (v91 & 0x31018760 ^ 0x108680A4)
                                                - ((v91 & a4 ^ 0x65113F49) & 0x3101AF60)) ^ v95 ^ 0x41340AE9 ^ (v96 - ((2 * v96) & 0x10B029A0) + 148798676),
           v82,
           a9,
           a10,
           a11,
           a12,
           a13,
           a14,
           a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60);
}

uint64_t sub_1000D73EC( int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  LODWORD(STACK[0x370]) ^= LODWORD(STACK[0x550]) ^ LODWORD(STACK[0x47C]) ^ a66;
  LODWORD(STACK[0x5E0]) = a69 - a70;
  unsigned int v71 = (((a1 - 1568380730) >> 8) ^ 0x67DFEDF1)
      + a1
      + (((a1 - 1568380730) >> 7) & 0x1BFDBE2);
  unsigned int v72 = v71 + (((v71 + 983857877) >> 5) ^ 0x27A400C2) - (((v71 + 983857877) >> 4) & 0xB7FE7A) + 1;
  int v73 = v72 - ((2 * v72 + 637596708) & 0x35748B26) + 767213477;
  unsigned int v74 = ((2 * ((v73 ^ 0x1ABA4593) - 1879573490)) & 0x7FF7777E) + (((v73 ^ 0x1ABA4593) - 1879573490) ^ 0xBFFBBBBF);
  unsigned int v75 = (((v74 + 1074021441) >> 10) ^ 0xFEFDF9FF) + v74 + (((v74 + 1074021441) >> 9) & 0x7BF3FE);
  unsigned int v76 = ((v75 + 1090931266) & 0xFFBBFEFE) + v75 + (((v75 + 1090931266) >> 1) ^ 0xFFDDFF7F);
  unsigned int v77 = v76 - ((2 * v76 - 2108648058) & 0xAFEB36D6) - 1726093778;
  unsigned int v78 = ((2 * ((v77 ^ 0x57F59B6B) + 1287124013)) & 0x701FF77E) + (((v77 ^ 0x57F59B6B) + 1287124013) ^ 0xB80FFBBF);
  unsigned int v79 = v78 + (((v78 + 1206912065) >> 13) ^ 0x30409058) - (((v78 + 1206912065) >> 12) & 0xEDF4E);
  unsigned int v80 = (((v79 + 397374441) >> 5) & 0x39BEEFE) + (((v79 + 397374441) >> 6) ^ 0x55CDF77F);
  unsigned int v81 = v79 + v80 + ((2 * v80 + 1415844098) ^ 0x618681) - ((2 * (2 * v80 + 1415844098)) & 0xFF3CF2FC) + 1;
  int v82 = v81 - ((2 * v81 + 50326480) & 0x3E7BA50) + 1131664144;
  unsigned int v83 = ((2 * ((v82 ^ 0x81F3DD28) - 1282870125)) & 0x7FDDFB9E) + (((v82 ^ 0x81F3DD28) - 1282870125) ^ 0x3FEEFDCF);
  unsigned int v84 = (((v83 - 1072627151) >> 8) ^ 0x5FF3DF7) + v83 + (((v83 - 1072627151) >> 7) & 0x1FE7BEE);
  unsigned int v85 = (((v84 - 1173240774) >> 2) ^ 0xEDFFFFEF) + v84 + (((v84 - 1173240774) >> 1) & 0x5BFFFFDE);
  int v86 = v85 - ((2 * v85 + 404981910) & 0x5D6173B8) - 87917017;
  unsigned int v87 = ((2 * ((v86 ^ 0x2EB0B9DC) + 707258702)) & 0x7EBF7FFC) + (((v86 ^ 0x2EB0B9DC) + 707258702) ^ 0xBF5FBFFE);
  unsigned int v88 = (((v87 + 1084243970) >> 13) ^ 0x774F7717) + v87 + (((v87 + 1084243970) >> 12) & 0xEEE2E);
  unsigned int v89 = (((v88 - 917452565) >> 3) ^ 0xFFFE6AFB) + v88 + (((v88 - 917452565) >> 2) & 0x3FFCD5F6);
  unsigned int v90 = v89 - 2 * ((v89 + 156392944) & 0x893981F ^ v89 & 6) - 773458423;
  int v91 = v90 ^ v77;
  unsigned int v92 = (v90 ^ 0x831CCE93) + ((v90 >> 11) ^ 0x550FBFC) + ((v90 >> 10) & 0x3ECF34 ^ 0xFFDF38CF) - 88119396;
  unsigned int v93 = (((((2 * v92) & 0xF47E7F88) + (v92 ^ 0x7A3F3FC4) - 2050965444) >> 5) ^ 0x73D6FDEB)
      + ((2 * v92) & 0xF47E7F88)
      + (v92 ^ 0x7A3F3FC4)
      + (((((2 * v92) & 0xF47E7F88) + (v92 ^ 0x7A3F3FC4) - 2050965444) >> 4) & 0x7ADFBD6);
  unsigned int v94 = v93 - ((2 * v93 + 601064610) & 0xCA67ABC4) + 1998428211;
  unsigned int v95 = (v94 ^ 0x516F011A) + ((v94 >> 12) ^ 0x9A1D0632) + ((v94 >> 11) & 0xFDE7A ^ 0xFFF5F39F) + 1709698879;
  unsigned int v96 = (((((2 * v95) & 0xFFDEF5F6) + (v95 ^ 0x7FEF7AFB) - 2146401019) >> 7) ^ 0x7DEBAED7)
      + ((2 * v95) & 0xFFDEF5F6)
      + (v95 ^ 0x7FEF7AFB)
      + (((((2 * v95) & 0xFFDEF5F6) + (v95 ^ 0x7FEF7AFB) - 2146401019) >> 6) & 0x3D75DAE);
  unsigned int v97 = v96 - ((2 * v96 + 71937116) & 0xF2AC8EAA) - 75817597;
  unsigned int v98 = ((2 * ((v97 ^ 0xF9564755) - 2045107421)) & 0x47FEDFEC) + (((v97 ^ 0xF9564755) - 2045107421) ^ 0x23FF6FF6);
  unsigned int v99 = (((v98 - 603942902) >> 11) ^ 0xEB1BFFF1) + v98 + (((v98 - 603942902) >> 10) & 0x37FFE2);
  unsigned int v100 = v99 + (((v99 - 253456359) >> 8) ^ 0x8059028) - (((v99 - 253456359) >> 7) & 0x1F4DFAE) + 1;
  unsigned int v101 = v100 - ((2 * v100 - 776077344) & 0xC3BA8708) + 1253852020;
  unsigned int v102 = (v101 ^ 0x5B4DCDD7) + ((v101 >> 8) ^ 0x817B55CD) + ((v101 >> 7) & 0x1BFCFFE ^ 0xFF497465) + 2128603137;
  int v103 = ((2 * v102) & 0x5BF9DB4A) + (v102 ^ 0x2DFCEDA5);
  unsigned int v104 = (((v103 - 771550629) >> 8) ^ 0x3BFF9DF7)
       + v103
       + (((v103 - 771550629) >> 7) & 0x1FF3BEE)
       - 2
       * (((((v103 - 771550629) >> 8) ^ 0x3BFF9DF7)
         + v103
         + (((v103 - 771550629) >> 7) & 0x1FF3BEE)
  LODWORD(STACK[0x47C]) = (((((2 * (v91 ^ v101)) ^ 0x7D7681EC)
                           - ((2 * ((2 * (v91 ^ v101)) ^ 0x7D7681EC)) & 0x4B0A57B0)
                           + 1703226329) & a4 ^ 0x15E7256F)
                         - 1) & 0x32188468 ^ 0x2B8A04B;
  int v105 = LODWORD(STACK[0x5C0]) ^ LODWORD(STACK[0x5C8]);
  int v106 = STACK[0x468];
  LODWORD(STACK[0x550]) = v105;
  unsigned int v107 = ((2 * (v106 ^ v105)) ^ 0xA7D624DC) + 1246275268 + (~(2 * ((2 * (v106 ^ v105)) ^ 0xA7D624DC)) | 0xEB6EB27B);
  int v108 = (v107 & 0x6C080508 ^ 0x4460107 | v107 & 0x13119270) - 1;
  LODWORD(STACK[0x498]) = (v108 & 0x6001027A ^ 0x214020) + (v108 ^ 0xEE0EA7DE) - ((v108 ^ 0xEE0EA7DE) & 0xE04122F8);
  unint64_t v111 = STACK[0xB40];
  unint64_t v113 = STACK[0x570];
  unint64_t v114 = (*(void *)(STACK[0xB40]
                    + 8
                    * (((v112 ^ 0xBAFF37575DDFF963LL) + 0x4500C8A8A220069DLL + ((2 * v112) & 0x75FE6EAEBBBFF2C6LL))
                     % STACK[0x570])) ^ 0xC9C9C9C9C9C9C9C9LL)
       + 2207661067u;
  unint64_t v115 = (*(void *)(STACK[0xB40]
                    + 8
                    * (((v114 ^ 0xEFEFFFCDFD17DAFCLL) + 0x1010003202E82504LL + ((2 * v114) & 0xDFDFFF9BFA2FB5F8LL))
                     % STACK[0x570])) ^ 0xC9C9C9C9C9C9C9C9LL)
       + 1300402492;
  unint64_t v116 = ((v115 ^ 0xB3D7E2FBF37BFFBDLL) + 0x4C281D040C840043LL + ((2 * v115) & 0x67AFC5F7E6F7FF7ALL)) % STACK[0x570];
  STACK[0x640] = STACK[0xB40];
  unint64_t v117 = (*(void *)(v111 + 8 * v116) ^ 0xC9C9C9C9C9C9C9C9LL) + 214590498;
  int v118 = LODWORD(STACK[0x5D0]) ^ LODWORD(STACK[0x500]);
  LODWORD(STACK[0x39C]) = v82;
  LODWORD(v117) = ((v117 ^ 0x5FFF676FA6EDFECFLL) - 0x5FFF676FA6EDFECFLL + ((2 * v117) & 0xBFFECEDF4DDBFD9ELL)) % v113;
  unsigned int v119 = ((v117 - ((2 * v117) & 0x478F871C) + 600294286) ^ 0xDC313838)
       - 919437460
       + ((2 * (v117 - ((2 * v117) & 0x478F871C) + 600294286)) & 0xFFEDF76C ^ 0x478D870C);
  LODWORD(STACK[0x5B8]) = LODWORD(STACK[0x480]) ^ 0xD637AC8E;
  unsigned int v109 = ((2 * v106) ^ 0xDD448668) - 2 * (((2 * v106) ^ 0xDD448668) & 0x89C34BE ^ (2 * v106) & 6) - 929286984;
  unsigned int v110 = (v109 & a4 ^ 0x31191720) + (v109 & 0x9188620 ^ 0x88208800) - ((v109 & a4 ^ 0x31191720) & 0x9188620);
  LODWORD(STACK[0x570]) = (v110 & 0xABAC73B8 ^ 0xA84739F) + (v110 & 0x54538C40 ^ 0x40508C01) - 2;
  LODWORD(STACK[0x5B0]) = (((2 * (v118 ^ v82 ^ v94 ^ v104)) ^ 0x807C61C2)
                         - 2
                         * (((2 * (v118 ^ v82 ^ v94 ^ v104)) ^ 0x807C61C2) & 0x143D17C ^ (2 * (v118 ^ v82 ^ v94 ^ v104)) & 8)
                         - 1052520076) & a4 ^ 0x204318F2;
  BOOL v120 = v119 > 0xC9297B23;
  if (v119 < 0xC9297B22) {
    BOOL v120 = 1;
  }
  return ((uint64_t (*)(uint64_t))*(&off_10025C670 + ((1281 * !v120) ^ v70)))(580045674LL);
}

uint64_t sub_1000D8B2C@<X0>( int a1@<W1>, uint64_t a2@<X3>, uint64_t a3@<X5>, int a4@<W6>, unsigned int a5@<W8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,int a59,int a60,int a61,int a62,int a63)
{
  uint64_t v75 = a1 ^ 0xD44592FF;
  LODWORD(STACK[0x368]) -= LODWORD(STACK[0x36C]);
  int v76 = LODWORD(STACK[0x47C]) + a72;
  LODWORD(STACK[0x47C]) = a60 - a63;
  int v77 = HIDWORD(a57) ^ LODWORD(STACK[0x580]) ^ a59 ^ a58 ^ LODWORD(STACK[0x5D0]) ^ a64 ^ a71 ^ a70 ^ v73 ^ a69 ^ a68 ^ a66 ^ (v76 - 1);
  LODWORD(STACK[0x36C]) = LODWORD(STACK[0x5D0]) ^ LODWORD(STACK[0x38C]) ^ a4 ^ LODWORD(STACK[0x39C]) ^ a67 ^ a65 ^ (LODWORD(STACK[0x5B0]) + a57 - a56);
  LODWORD(STACK[0x640]) = v77;
  LODWORD(STACK[0x5B0]) = v77 ^ 0xD608FD9;
  unint64_t v78 = (v75 + 2104641018)
      + (unint64_t)v72
  unint64_t v79 = 0xC76BB339E9ED63B1LL * (*(void *)(STACK[0xB40] + 8 * v78) ^ 0xC9C9C9C9C9C9C9C9LL)
      - ((0xED76673D3DAC762LL * (*(void *)(STACK[0xB40] + 8 * v78) ^ 0xC9C9C9C9C9C9C9C9LL)) & 0x41039E30486DB53ALL)
      - 0x5F7E30E7DBC92563LL;
  unint64_t v80 = ((2 * ((v74 ^ 0x33A93D4A7C8C0D97LL ^ v79) + v78)) & 0xB0DBFFBFBE24373ELL)
      + (((v74 ^ 0x33A93D4A7C8C0D97LL ^ v79) + v78) ^ 0xD86DFFDFDF121B9FLL);
  unint64_t v81 = v80
      + (((v80 + 0x2792002020EDE461LL) >> 32) ^ 0xE0A04480040510D8LL)
      - ((2 * ((v80 + 0x2792002020EDE461LL) >> 32)) & 0x1F7F5DE4ELL);
  unint64_t v82 = v81
      + (((v81 + 0x46F1BBA01CE8D389LL) >> 16) ^ 0x73D5FA127F762F9FLL)
      + (((v81 + 0x46F1BBA01CE8D389LL) >> 15) & 0x1F424FEEC5F3ELL);
  unint64_t v83 = v82
      + (((v82 - 0x2CE43E72628D5C16LL) >> 8) ^ 0xBF5BF0B77F969EFFLL)
      + (((v82 - 0x2CE43E72628D5C16LL) >> 7) & 0xB7E16EFF2D3DFELL)
      + 1;
  unint64_t v84 = v83 - ((2 * v83 + 0x277FA1AC3BB809D4LL) & 0xF9FB7FFA507B0BB2LL) - 0x6F426F2CB9E6753DLL;
  uint64_t v85 = 2 * (v84 ^ 0x7CFDBFFD283D85D9LL);
  int v86 = ((v83 - ((2 * v83 + 1001916884) & 0x507B0BB2) + 1176079043) ^ 0x283D85D9) - ((v85 - 1601446758) & 0x6C67D090);
  unint64_t v87 = (v84 ^ 0x7CFDBFFD283D85D9LL) - ((v85 + 0x45D043FB4117B934LL) & 0xEC5A63760FF85004LL) - 0x66EAAC475777FB64LL;
  uint64_t v88 = ((2 * ((v79 ^ 0x56ACFEA323CAF29FLL ^ v87) + v78)) & 0x7FBBBF7FBDAFFFD2LL)
      + (((v79 ^ 0x56ACFEA323CAF29FLL ^ v87) + v78) ^ 0x3FDDDFBFDED7FFE9LL);
  unint64_t v89 = v88
  unint64_t v90 = v89
      + (((v89 - 0x47E5E20FDF0903EBLL) >> 16) ^ 0x2FF30DDE7FDFBB7FLL)
      + (((v89 - 0x47E5E20FDF0903EBLL) >> 15) & 0x1BBCFFBF76FELL);
  unint64_t v91 = v90
      + (((v90 - 0x77D8EFEE5EE8BF6ALL) >> 8) ^ 0x7DCD9F3D3FDEE7FALL)
      + (((v90 - 0x77D8EFEE5EE8BF6ALL) >> 7) & 0x19B3E7A7FBDCFF4LL)
      + 1;
  unint64_t v92 = (v91 - ((2 * v91 + 0x14B2E1A8C270B136LL) & 0x8ACFF9CF88080FCELL) + 0x4FC16DBC253C6082LL) ^ 0x4567FCE7C40407E7LL;
  uint64_t v93 = v92 - ((2 * v92 + 0x45D043FB4117B934LL) & 0x496DB103CB5B2532LL) + 0x479EFA7F86396F33LL;
  unint64_t v94 = ((2 * ((v79 ^ 0x4371799C19B4804LL ^ v93) + v78)) & 0xFDFFCFBFCEEDFFDELL)
      + (((v79 ^ 0x4371799C19B4804LL ^ v93) + v78) ^ 0x7EFFE7DFE776FFEFLL);
  unint64_t v95 = v94
      + (((v94 - 0x7EFFE7DFE776FFEFLL) >> 32) ^ 0x2292210061920140LL)
      - (((v94 - 0x7EFFE7DFE776FFEFLL) >> 31) & 0x13CDBFD7ELL);
  unint64_t v96 = v95
      + (((v95 + 0x5E6DF71FB6F6FED1LL) >> 16) ^ 0xFFD79B7EB6F7FFF9LL)
      + (((v95 + 0x5E6DF71FB6F6FED1LL) >> 15) & 0x136FD6DEFFFF2LL);
  unint64_t v97 = v96
      + (((v96 + 0x5E965BA0FFFEFED8LL) >> 8) ^ 0x37FD6FCF777D9CFFLL)
      + (((v96 + 0x5E965BA0FFFEFED8LL) >> 7) & 0x1FADF9EEEFB39FELL)
      + 1;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*(&off_10025C670 + (int)((226 * ((a5 + (unint64_t)STACK[0x650]) >> 32)) ^ v75)))( 1135170066LL,  v75,  789099451LL,  a2,  0x5CAA002181C8157CLL,  a3,  a2 & ((v86 + 108648085) >> 1),  v97 - ((2 * (_DWORD)v97 - 1316052918) & 0x32B42BF8) - 232692191,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57);
}

void sub_1000D94C0()
{
}

uint64_t sub_1000D94F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  int v59 = v58 ^ 0x7D724828;
  LODWORD(STACK[0x364]) = LODWORD(STACK[0x360]) - LODWORD(STACK[0x364]);
  LODWORD(STACK[0x360]) = LODWORD(STACK[0x570]) ^ LODWORD(STACK[0x5C0]) ^ LODWORD(STACK[0x498]) ^ LODWORD(STACK[0x47C]) ^ 0xE89F072A;
  int v60 = *(unsigned __int8 *)(STACK[0x658]
                           + ((*(_BYTE *)(STACK[0x658]
                                        + ((*(_BYTE *)(STACK[0x658] + ((*(_BYTE *)(STACK[0x658] + 8) + 9) & 0xF)) + 9) & 0xF))
                             + 5) & 0xF)) ^ 0x43;
  unsigned int v61 = v60 & 0xC6 ^ 0x97 ^ ((v60 & 0xFFFFFFC9 ^ 0x6C) + (v60 & 0xFFFFFFC8 ^ 0x90) - ((v60 & 0xFFFFFFC9 ^ 0x6C) & 0xF8));
  unsigned int v62 = (v61 ^ 0x7FEFF9F9) + ((2 * v61) & 0x1F2) - 1227887426;
  LODWORD(STACK[0x650]) = v59 ^ 0x490;
  int v63 = *(unsigned __int8 *)(STACK[0x658] + (v59 ^ 0x8D89BFC6) + 1920352812);
  unsigned int v64 = 1364176807 * ((v63 ^ 0x5EE731FF) + 2 * v63)
      - ((-559930546 - 1566613682 * ((v63 ^ 0x5EE731FF) + 2 * v63)) & 0xE6D83420)
      + 1656499127;
  unsigned int v65 = (v64 ^ 0x9B6CEE24) + (v59 ^ 0x8D89BFC6) + 1920352812;
  unsigned int v66 = (((((2 * v65) & 0xF6DFBFDE) + (v65 ^ 0x7B6FDFEF) - 2070929391) >> 16) ^ 0x7FBFCF2F)
      + ((2 * v65) & 0xF6DFBFDE)
      + (v65 ^ 0x7B6FDFEF)
      + ((2 * ((((2 * v65) & 0xF6DFBFDE) + (v65 ^ 0x7B6FDFEF) - 2070929391) >> 16)) & 0x19E5E);
  unsigned int v67 = (((v66 + 80761058) >> 8) ^ 0x7FD9D7FF) + v66 + (((v66 + 80761058) >> 7) & 0x1B3AFFE);
  unsigned int v68 = v67 - ((2 * v67 + 720464778) & 0x9BFF0B9E) + 1668823956;
  unsigned int v69 = (((v68 >> 1) & 0x7FFBE43E ^ 0x3D8B202A) - ((2 * ((v68 >> 1) & 0x7FFBE43E ^ 0x3D8B202A)) & 0xB293887C) - 649476802) ^ 0xDA6DF432;
  uint64_t v70 = 1284841368 - (v69 | 0x4C951F98) + (v69 | 0xB36AE067);
  unsigned int v71 = (v64 ^ 0xBE939FDF ^ v68) + (v59 ^ 0x8D89BFC6) + 1920352812;
  unsigned int v72 = (((((2 * v71) & 0xFAD5FC7E) + (v71 ^ 0x7D6AFE3F) - 2104163903) >> 16) ^ 0xB1FBDF6A)
      + ((2 * v71) & 0xFAD5FC7E)
      + (v71 ^ 0x7D6AFE3F)
      + ((2 * ((((2 * v71) & 0xFAD5FC7E) + (v71 ^ 0x7D6AFE3F) - 2104163903) >> 16)) & 0x1BED4);
  unsigned int v73 = ((v72 - 795270569) >> 7) & 0x1FCBEFA;
  unsigned int v74 = (((v72 - 795270569) >> 8) ^ 0x13FE5F7D) + v72;
  unsigned int v75 = v74 + v73;
  int v76 = v74 & 1;
  int v77 = v75 - 2 * ((v75 + 1016775386) & 0x38A930EB ^ v76) + 1967387588;
  unsigned int v78 = (v77 ^ 0xB8A930EA) - 2 * (((v77 ^ 0xB8A930EA) + 276970722) & 0x23B2341F ^ v76) + 875852032;
  unsigned int v79 = (v64 ^ 0x50DE2E0E ^ v78) + (v59 ^ 0x8D89BFC6) + 1920352812;
  unsigned int v80 = (((((2 * v79) & 0xDFF7E7F6) + (v79 ^ 0x6FFBF3FB) - 1878782971) >> 16) ^ 0xFEE617D7)
      + ((2 * v79) & 0xDFF7E7F6)
      + (v79 ^ 0x6FFBF3FB)
      + (((((2 * v79) & 0xDFF7E7F6) + (v79 ^ 0x6FFBF3FB) - 1878782971) >> 15) & 0x2FAE);
  unsigned int v81 = (((v80 - 1860307922) >> 8) ^ 0xDA7FBDFA) + v80 + (((v80 - 1860307922) >> 7) & 0xFF7BF4);
  BOOL v83 = v62 < 0x36BFE6B7 || v62 > 0x36BFE6B8;
  uint64_t v82 = (v81 - ((2 * v81 + 1832676456) & 0x9E958CF6) + 99155119) ^ 0x4F4AC67B;
  return ((uint64_t (*)(uint64_t, BOOL, void, uint64_t, uint64_t, void, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*(&off_10025C670 + ((1921 * !v83) ^ v59)))( 2980204309LL,  v83,  (((((v82 - ((2 * (_DWORD)v82 + 17070532) & 0x23EA026) + 295800053) >> 1) & 0x7FFBE43E ^ 0x57F2040A | 0xA73FD308)
           - (((v82 - ((2 * (_DWORD)v82 + 17070532) & 0x23EA026) + 295800053) >> 1) & 0x7FFBE43E ^ 0x57F2040A | 0x58C02CF7)
           + 1488989431) ^ 0xE63A4F08) & 0x2EF5767F,
           787838591LL,
           v82,
           (v77 ^ 0xB8A930EA) - ((2 * (v77 ^ 0xB8A930EA) + 276970722) & 0x7592A46A) + 1124757670,
           v70,
           (v78 >> 1) & 0x330A6418 ^ 0x12007BC9 | (v78 >> 1) & 0x4CF18026,
           a9,
           a10,
           a11,
           a12,
           a13,
           a14,
           a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58);
}

uint64_t sub_1000DAB08( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  int v61 = *(unsigned __int8 *)(STACK[0x658] + v60);
  unsigned int v62 = ((v61 << (5 * (LOBYTE(STACK[0x650]) ^ 0xB) + 84)) & 0x1E8) + (v61 ^ 0xF7DC5EF4);
  unsigned int v63 = 1364176807 * v62 - ((-1566613682 * v62 + 1376945576) & 0xECD36262) + 527627269;
  int v64 = v59 ^ 0x11F5013;
  int v65 = (v59 ^ 0x11F5013) + (v59 ^ 0x8891EDD ^ v63) + 1;
  unsigned int v66 = ((v60 + v64) ^ 0x7FFBF75D)
      - 2147220078
      + ((2 * (v60 + v64)) & 0xFFF7EEBA)
      + (v63 ^ ((v63 ^ 0x9964ECE) - ((2 * (v63 ^ 0x9964ECE) + 2) & 0xBC2D6412) - 568937974) ^ (v65
                                                                                             - ((2 * v65) & 0xC5757562)
                                                                                             - 491078991) ^ 0xCAC5B989)
      + 785;
  unsigned int v67 = (((((2 * v66) & 0xDFADFEF4) + (v66 ^ 0x6FD6FF7A) - 1876361082) >> 16) ^ 0x2CBFF6FB)
      + ((2 * v66) & 0xDFADFEF4)
      + (v66 ^ 0x6FD6FF7A)
      + ((2 * ((((2 * v66) & 0xDFADFEF4) + (v66 ^ 0x6FD6FF7A) - 1876361082) >> 16)) & 0x1EDF6);
  unsigned int v68 = (((v67 + 1667828107) >> 8) ^ 0xFBA3FBE5) + v67 + ((2 * ((v67 + 1667828107) >> 8)) & 0x147F7CA);
  int v69 = v68 - ((2 * v68 + 1334451020) & 0x5A5E1938) - 1795941822;
  unsigned int v70 = (v69 ^ 0x2D2F0C9C) - ((2 * (v69 ^ 0x2D2F0C9C) + 553941444) & 0xEB1B7EA2) - 2045772749;
  unsigned int v71 = ((2 * (v60 + (v63 ^ 0x83E40E60 ^ v70))) & 0x7AFFA7FE) + ((v60 + (v63 ^ 0x83E40E60 ^ v70)) ^ 0x3D7FD3FF);
  unsigned int v72 = (((v71 - 1031787519) >> 16) ^ 0xDE7FFFF2) + v71 + ((2 * ((v71 - 1031787519) >> 16)) & 0x1FFE4);
  unsigned int v73 = (((v72 - 469750769) >> 8) ^ 0x6FEE9FFE) + v72 + ((2 * ((v72 - 469750769) >> 8)) & 0x1DD3FFC);
  unsigned int v74 = v73 - ((2 * v73 + 153588198) & 0x9B770ED6) + 1380929630;
  unsigned int v75 = ((v74 >> 1) & 0x7FFBE43E ^ 0x46D9C1B4)
      - ((2 * ((v74 >> 1) & 0x7FFBE43E ^ 0x46D9C1B4)) & 0x88324B2C)
      + 1142767510;
  unsigned int v76 = ((1925595593 - v73 - ((-153588198 - 2 * v73) & 0xEEB41578)) ^ v74 ^ 0xE88FDF70 ^ ((v74 ^ 0x56594682 ^ v75)
                                                                                        + (v75 ^ 0x641D3E16)
                                                                                        + 1
                                                                                        - ((2
                                                                                          * ((v74 ^ 0x56594682 ^ v75)
                                                                                           + (v75 ^ 0x641D3E16)
                                                                                           + 1)) & 0xA4DCA54E)
                                                                                        - 764521817))
      + (v75 ^ 0x641D3E16);
  unsigned int v77 = ((2 * (v60 + (v63 ^ 0x3BD2365A ^ v74))) & 0xBE37D71E) + ((v60 + (v63 ^ 0x3BD2365A ^ v74)) ^ 0xDF1BEB8F);
  unsigned int v78 = (((v77 + 551818353) >> 16) ^ 0x7FFFA9BF) + v77 + ((2 * ((v77 + 551818353) >> 16)) & 0x1537E);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*(&off_10025C670 + ((((v60 + 1 > 0xF) << 7) | ((v60 + 1 > 0xF) << 9)) ^ (LODWORD(STACK[0x650]) - 489))))( 2147116162LL,  1732811094LL,  2765923662LL,  1172103873LL,  973319596LL,  689964042LL,  v76 - ((2 * v76) & 0x5D1D54A2),  ((((v78 - 1595643214) >> 8) ^ 0xEDDEBF6B) + v78 + (((v78 - 1595643214) >> 7) & 0x1BD7ED6)) & 2,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48,  a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59);
}

uint64_t sub_1000DB42C()
{
  io_object_t v1 = IOIteratorNext(STACK[0x9FC]);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + (((((2 * v1) & 0xEFE6DFEC) + (v1 ^ 0x77F36FF6) != 2012442614)
                                        * (((v0 + 1163125121) & 0x3AAC1E87) - 1283)) ^ v0))
                            - 12))();
}

uint64_t sub_1000DB4A4@<X0>(int a1@<W8>)
{
  kern_return_t v2;
  unsigned int v3;
  LODWORD(STACK[0x630]) = v1 + 1616641667;
  int v2 = IOServiceOpen(a1 - 2012442614, mach_task_self_, 0, (io_connect_t *)&STACK[0x9CC]);
  unsigned int v3 = ((((v1 + 1616641667) ^ 0x406) + 1061681500) & (2 * v2)) + (v2 ^ 0x9FA3FFEF);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
}

uint64_t sub_1000DB54C()
{
  uint64_t v2 = IOObjectRelease(STACK[0x9FC]);
  return ((uint64_t (*)(uint64_t))((char *)*(&off_10025C670
                                                    + ((726 * (dword_100273C3C == 485807923)) ^ (v0 - 527)))
                                          - ((4 * v0) ^ 0x1EE4u)
                                          + 1252))(v2);
}

void sub_1000DB5F4()
{
  STACK[0x870] = v1;
  free(v0);
  STACK[0x8A0] = 0LL;
  JUMPOUT(0x10012AB20LL);
}

void sub_1000DB600()
{
}

uint64_t sub_1000DB670@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X3>, int a4@<W8>)
{
  uint64_t v5 = (a4 + 1051) | 0x8Cu;
  unint64_t v6 = ((2LL * (void)&STACK[0x6F8]) & 0x5ED6FFF4DFFEF5F8LL)
     + 0x5094800590008502LL
     + ((v5 - 0x50948005900089AELL) ^ (unint64_t)&STACK[0x6F8]);
  STACK[0x5C8] = ((v6 % 0x25) ^ 0xFFBDB7BEBBBAFFE9LL) + 0x42484144450027LL + ((2 * (v6 % 0x25)) & 0x52LL);
  unint64_t v7 = STACK[0x870];
  STACK[0x5B0] = STACK[0x870];
  unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v4
                                                                     + 8LL
                                                                     * (int)((22
                                                                            * ((((_DWORD)v5 - 1872872645) & 0x6FA1C69A ^ 0x43F646FA) == 1140211832)) ^ v5))
                                                         - 4LL);
  STACK[0x650] = STACK[0xA18];
  STACK[0x658] = (unint64_t)&STACK[0xB80] + v7;
  STACK[0x5C0] = (unint64_t)&STACK[0xB80] + v7 + 16;
  STACK[0x5D0] = a3;
  return v8(a1, a2, 3932211280LL);
}

uint64_t sub_1000DB7DC@<X0>( int a1@<W2>, uint64_t a2@<X3>, int a3@<W4>, int a4@<W5>, unsigned int a5@<W6>, int a6@<W7>, int a7@<W8>)
{
  unint64_t v11 = (_BYTE *)(a2 + v9 + a3 + ((a7 - 1448) | 0x240u));
  *unint64_t v11 = (((v8 ^ a5) >> (v7 - 88)) - (((a7 - 1) ^ 0xD2) & (2 * ((v8 ^ a5) >> (v7 - 88)))) - 65) ^ 0xDF;
  LODWORD(v11) = ((*(_DWORD *)(qword_1002748C8 + (dword_100274AD0 & a1)) ^ v11) & 0x7FFFFFFF) * a4;
  unint64_t v12 = (v11 ^ (v11 >> 16)) * a4;
  return ((uint64_t (*)(void))(*(void *)(v10
                                        + 8LL
                                        * ((113
                                          * (v9
}

uint64_t sub_1000DE3A4()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL * ((22 * (v0 + 8 == ((v1 - 1872872645) & 0x6FA1C69A ^ 0x43F646FA))) ^ v1))
                            - 4LL))();
}

uint64_t sub_1000DE3F4()
{
  LODWORD(STACK[0x5E0]) = v1;
  STACK[0x1598] = 0x104BC93D894379E2LL;
  LODWORD(STACK[0x6F8]) = dword_100273C38 - 1227344546;
  unint64_t v4 = 1856021207
     * ((((v3 - 192) | 0x4E4EC8390FF411A2LL) - (v3 - 192) + ((v3 - 192) & 0xB1B137C6F00BEE58LL)) ^ 0xA35A5FA2419DC75CLL);
  int v5 = v4 ^ (v0 + 624098329);
  uint64_t v6 = dword_100273C40;
  *(_DWORD *)(v3 - 18_Block_object_dispose(va, 8) = v5 ^ 0x74;
  *(_DWORD *)(v3 - 184) = v5 ^ 0x2B;
  *(_DWORD *)(v3 - 180) = v0 + 624098329 + v4;
  *(void *)(v3 - 176) = v2 - v4;
  *(void *)(v3 - 16_Block_object_dispose(va, 8) = v6 ^ v4;
  *(_DWORD *)(v3 - 160) = v4 + v0 + 1123495911;
  *(_DWORD *)(v3 - 156) = v4;
  uint64_t v7 = sub_1001DD4A8(v3 - 192);
  return ((uint64_t (*)(uint64_t))((char *)*(&off_10025C670 + *(int *)(v3 - 192)) - 8))(v7);
}

uint64_t sub_1000DE4F0()
{
  int v3 = 76 * (v0 ^ 0x684);
  STACK[0x650] = (unint64_t)malloc(STACK[0x5C8]);
  uint32_t v4 = arc4random();
  unsigned int v5 = v4 + 492660219 - ((v3 + 985319982) & (2 * v4));
  LODWORD(xmmword_100273C44) = v5;
  *(_DWORD *)(v1 + 4) = (((v5 ^ 0x1D5D65FB ^ (v5 >> 30)) * v2) ^ 0xFF1C9FFE)
                      + (((v5 ^ 0x1D5D65FB ^ (v5 >> 30)) * (v3 ^ 0xD80F1302)) & 0xFE393FFC)
                      + 507561470
                      - ((2
                        * ((((v5 ^ 0x1D5D65FB ^ (v5 >> 30)) * v2) ^ 0xFF1C9FFE)
                         + (((v5 ^ 0x1D5D65FB ^ (v5 >> 30)) * (v3 ^ 0xD80F1302)) & 0xFE393FFC))
                        + 29802502) & 0x3ABACBF6);
  return ((uint64_t (*)(uint64_t))*(&off_10025C670 + v3))(1851021285LL);
}

void sub_1000DE608()
{
}

uint64_t sub_1000DE62C@<X0>(uint64_t a1@<X6>, int a2@<W8>)
{
  int8x16_t v6 = (int8x16_t)vld1q_dup_f32(v4);
  int32x4_t v7 = vdupq_n_s32(0xFD575052);
  v8.i64[0] = 0x8000000080000000LL;
  v8.i64[1] = 0x8000000080000000LL;
  uint64_t v9 = 4 * v2;
  uint64_t v10 = (float *)&v4[v2];
  uint64_t v11 = v2 + 4;
  *(float *)v5.i32 = *(const float *)((char *)v4 + (v9 | 4));
  *(float *)&v5.i32[1] = *(const float *)((char *)v4 + (v9 | 8));
  *(float *)&v5.i32[2] = *(const float *)((char *)v4 + (v9 | 0xC));
  int8x16_t v12 = vextq_s8(v6, v5, 0xCuLL);
  int8x16_t v13 = v5;
  *(float *)&v13.i32[3] = v4[v11];
  int8x16_t v14 = vandq_s8(v12, v8);
  int32x4_t v15 = (int32x4_t)veorq_s8(vandq_s8(v13, (int8x16_t)vdupq_n_s32(0x7FFFFFFEu)), (int8x16_t)vdupq_n_s32(0x1C6634C8u));
  int8x16_t v16 = veorq_s8( (int8x16_t)vaddq_s32( vsubq_s32( (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v15, v15), (int8x16_t)vdupq_n_s32(0x18C42668u)),  v15),  vdupq_n_s32(0x739DECCAu)),  (int8x16_t)vdupq_n_s32(0xF2BCEDE8));
  int32x4_t v17 = (int32x4_t)veorq_s8( (int8x16_t)vaddq_s32( vsubq_s32( (int32x4_t)vorrq_s8(v16, (int8x16_t)vdupq_n_s32(0x2A8AFADu)),  (int32x4_t)vorrq_s8(v16, (int8x16_t)v7)),  v7),  (int8x16_t)vdupq_n_s32(0x82B2FFBD));
  v18.i32[0] = *((_DWORD *)&STACK[0x1598] + ((*(_DWORD *)((_BYTE *)v4 + (v9 | 4)) & 1) == 0));
  v18.i32[1] = *((_DWORD *)&STACK[0x1598] + ((*(_DWORD *)((_BYTE *)v4 + (v9 | 8)) & 1) == 0));
  v18.i32[2] = *((_DWORD *)&STACK[0x1598] + (~*(_DWORD *)((char *)v4 + (v9 | 0xC)) & 1LL));
  v18.i32[3] = *((_DWORD *)&STACK[0x1598] + (~v13.i32[3] & 1LL));
  *(int8x16_t *)uint64_t v10 = veorq_s8( veorq_s8(veorq_s8(*(int8x16_t *)(v10 + 397), v18), (int8x16_t)vdupq_n_s32(0xBE7ACBF4)),  (int8x16_t)vshrq_n_u32( (uint32x4_t)vaddq_s32( vsubq_s32( (int32x4_t)vorrq_s8((int8x16_t)v17, v14),  (int32x4_t)vandq_s8( (int8x16_t)vaddq_s32(v17, v17),  (int8x16_t)vdupq_n_s32(0xDCE6C85A))),  vdupq_n_s32(0x6E73642Du)),  1uLL));
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * ((2025 * (v11 != 224)) ^ (38 * (v3 ^ a2)))) - 8LL))();
}

uint64_t sub_1000DE7EC@<X0>(int a1@<W8>)
{
  int v3 = 7 * (v1 ^ 0x4F8);
  LODWORD(STACK[0x6F8]) = a1 + 1;
  gettimeofday((timeval *)STACK[0x5C0], 0LL);
  uint32_t v4 = (_DWORD *)STACK[0x658];
  int v5 = *(_DWORD *)(STACK[0x658] + 16) + 492660219 - ((2 * *(_DWORD *)(STACK[0x658] + 16)) & 0x3ABACBF6);
  v4[1] = *(_DWORD *)(STACK[0x658] + 24) + 492660219 - ((*(_DWORD *)(STACK[0x658] + 24) << (v3 + 127)) & 0x3ABACBF6);
  void v4[2] = v5;
  uint32_t v6 = arc4random();
  unint64_t v4[3] = v6 + 492660219 - ((2 * v6) & 0x3ABACBF6);
  uint32_t v7 = arc4random();
  _DWORD *v4 = v7 + 492660219 - ((2 * v7) & 0x3ABACBF6);
  unint64_t v8 = 1606104089 * ((v2 - 192) ^ 0xC2BEFB347517423ELL);
  int v9 = STACK[0x660];
  LODWORD(STACK[0x648]) = 2 * (LODWORD(STACK[0x660]) ^ 0x729);
  LODWORD(STACK[0x640]) = v9 - 784817541;
  LODWORD(STACK[0x620]) = v9 + 1897003554;
  int v10 = (DWORD1(xmmword_100273C44) ^ 0xC98180E1 ^ (1664525
                                                 * (xmmword_100273C44 ^ 0x3F405F07 ^ ((xmmword_100273C44 >> 30) | 0x221D3AFC))
                                                 - ((3329050
                                                   * (xmmword_100273C44 ^ 0x3F405F07 ^ ((xmmword_100273C44 >> 30) | 0x221D3AFC))) & 0xA9B9CA34)
                                                 - 723720934))
      + (*(_DWORD *)STACK[0x658] ^ 0x1D5D65FB);
  unsigned int v11 = (v10 ^ 0xFD93F2FD) + 1799588838 + ((2 * v10) & 0xFB27E5FA);
  DWORD1(xmmword_100273C44) = v11 - ((2 * v11 + 777060922) & 0x3ABACBF6) - 1266292968;
  *(void *)(v2 - 192) = v8 + 16023497;
  *(_DWORD *)(v2 - 164) = -1231242048 - v8 + v3;
  *(_DWORD *)(v2 - 172) = ((v3 + 2051849892) ^ 0x4E) + v8;
  int v12 = (v3 + 2051849892) ^ v8;
  *(_DWORD *)(v2 - 16_Block_object_dispose(va, 8) = v12;
  *(_DWORD *)(v2 - 180) = v8;
  *(_DWORD *)(v2 - 176) = v12 ^ 0x4A;
  *(void *)(v2 - 160) = 16023495 - v8;
  uint64_t v13 = sub_10013ACFC(v2 - 192);
  return ((uint64_t (*)(uint64_t))((char *)*(&off_10025C670 + *(int *)(v2 - 184)) - 4))(v13);
}

uint64_t sub_1000DEAC8()
{
  return (*(uint64_t (**)(void))(v0
                              + 8LL
                              * (int)((((LODWORD(STACK[0x660]) - 107259358) ^ 0xF99B6436) * (v1 < 0xF47FC7)) ^ (LODWORD(STACK[0x660]) - 1375))))();
}

uint64_t sub_1000DEB08()
{
  return (*(uint64_t (**)(void))(v0
                              + 8LL
                              * (int)((((LODWORD(STACK[0x620]) | 0x88896000) ^ 0xF99B6436) * (v1 > 0xF48236)) ^ (LODWORD(STACK[0x660]) - 1375))))();
}

uint64_t sub_1000DEB58()
{
  int v5 = v0 + 107259358;
  LODWORD(xmmword_100273C44) = dword_100274600;
  uint64_t v6 = 516615401 * ((~(v2 | 0x638DFDEE411A7CD7LL) + (v2 & 0x638DFDEE411A7CD7LL)) ^ 0x14CE8A6ACD86851ALL);
  *(void *)(v4 - 160) = v6 + 4102253406LL;
  *(_DWORD *)(v4 - 16_Block_object_dispose(va, 8) = v6 ^ (v5 - 1110517940) ^ 0x6F;
  *(void *)(v4 - 176) = (v3 - 1992302727) ^ (unint64_t)v6;
  *(_DWORD *)(v4 - 152) = (v5 - 185257467) ^ v6;
  *(_DWORD *)(v4 - 14_Block_object_dispose(va, 8) = v6 + v5 - 1110517940 - 48;
  *(_DWORD *)(v4 - 192) = v6 + 1;
  *(_DWORD *)(v4 - 18_Block_object_dispose(va, 8) = v5 - 1110517940 - v6;
  uint64_t v7 = sub_1000AF0AC(v4 - 192);
  return (*(uint64_t (**)(uint64_t))(v1 + 8LL * *(int *)(v4 - 184)))(v7);
}

uint64_t sub_1000DEC38()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * ((456 * (v1 >= (((LODWORD(STACK[0x660]) ^ 0x5D4) - 657) ^ 0xF4836B9B))) ^ (LODWORD(STACK[0x660]) - 1469)))
                            - 4LL))();
}

uint64_t sub_1000DEC98()
{
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * ((456 * (v1 <= 0xF4836B61)) ^ (LODWORD(STACK[0x660]) - 1469)))
                            - (STACK[0x640] & 0x2EC757C7)
                            + 193LL))();
}

uint64_t sub_1000DECFC@<X0>(int a1@<W8>)
{
  int v4 = a1 ^ 0x393;
  uint64_t v5 = 4LL * (v2 - 1799589691 + (a1 ^ 0x393u));
  *(_DWORD *)(STACK[0x658] + v5) ^= 0x76DF22D1 ^ *(_DWORD *)(STACK[0x650] + v5);
  return (*(uint64_t (**)(void))(v1
                              + 8LL
                              * ((1856 * (v3 - 1 != 238 * ((v4 + 774613833) & 0xD1D457E2 ^ 0x685) + 1808180455)) ^ v4)))();
}

void sub_1000DEDA8()
{
}

uint64_t sub_1000DEDB0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  STACK[0x870] = STACK[0x5B0];
  int v6 = (v5 - 1822727854) & 0x6CA49D7B;
  STACK[0x710] = v4;
  STACK[0xA18] = STACK[0x650];
  free(a4);
  STACK[0x790] = 0LL;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
}

uint64_t sub_1000DEE30@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  uint64_t v4 = (a2 - 414);
  unint64_t v5 = ((unint64_t)&STACK[0xA14] ^ 0x655EF7FFBCB7BBDFLL)
     - 0x655EF7FFBCB7BBDFLL
     + ((2LL * (void)&STACK[0xA14]) & 0xCABDEFFF796F77B8LL);
  STACK[0x5C8] = ((v5 % 0x25) ^ 0x7FFEEEFEDFBDDFFFLL) + 2 * (v5 % 0x25) + (v4 ^ 0x80011101204220B2LL);
  unint64_t v6 = STACK[0x870];
  STACK[0x650] = STACK[0x8C0];
  STACK[0x5B0] = v6;
  BOOL v7 = (((_DWORD)v4 - 891694640) & 0x35262FCD ^ 0x4E7214B8) == 1316099833;
  STACK[0x658] = (unint64_t)&STACK[0xB80] + v6;
  STACK[0x5C0] = (unint64_t)&STACK[0xB80] + v6 + 16;
  unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 8LL * (int)(((2 * v7) | (4 * v7)) ^ v4))
  STACK[0x5D0] = v2;
  return v8(a1, 2492029045LL);
}

uint64_t sub_1000DEF74(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v4 + 8LL * (((v2 == 15) * a2) ^ v3)))();
}

uint64_t sub_1000DEFC4(uint64_t a1, int a2)
{
  return sub_1000DEF74(a1, a2);
}

uint64_t sub_1000DEFCC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7
                                                                                         + 8LL
                                                                                         * ((2019
                                                                                           * (v6 == ((unsigned __int16)((a6 ^ 0x277) + 1189) ^ 0x1B95))) ^ a6)))( a1,  a2,  a3,  a4,  a5,  4294924364LL);
}

uint64_t sub_1000DF008()
{
  LODWORD(STACK[0x5E8]) = STACK[0x86C];
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((632 * (dword_100273C3C == ((v0 - 1321893924) & 0x4ECA81BB) + 485807505)) ^ (v0 + 1254)))
                            - ((v0 + 56681329) & 0xFC9F1F9D)
                            + 789LL))();
}

uint64_t sub_1000DF09C()
{
  kern_return_t v1;
  uint64_t v1 = IOMainPort(0, (mach_port_t *)&STACK[0x9F8]);
  return ((uint64_t (*)(void))*(&off_10025C670
                             + (((((2 * v1) & 0x7FE7FF7A) + (v1 ^ 0x3FF3FFBD) == (((v0 - 33) | 0x20) ^ 0x3FF3FE1C))
                               * (v0 + 688)) ^ v0)))();
}

uint64_t sub_1000DF100()
{
  BOOL v1 = IOServiceMatching((const char *)&STACK[0x15B1]) == 0LL;
  return ((uint64_t (*)(void))*(&off_10025C670 + (((v0 + 156 + 19 * (v0 ^ 0x1B7) - 988) * v1) ^ v0)))();
}

uint64_t sub_1000DF148(const __CFDictionary *a1)
{
  kern_return_t MatchingServices;
  MatchingServices = IOServiceGetMatchingServices(STACK[0x9F8], a1, (io_iterator_t *)&STACK[0x69C]);
  return ((uint64_t (*)(void))*(&off_10025C670
                             + ((1696
                               * (((((v1 - 418) | 0x270) ^ ((v1 + 119) | 0x24) ^ 0xFF62FBE6) & (2 * MatchingServices))
                                + (MatchingServices ^ 0x7FB17DD5) == 2142338517)) ^ v1)))();
}

uint64_t sub_1000DF1B8()
{
  io_object_t v1 = IOIteratorNext(STACK[0x69C]);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + (((((2 * v1) & 0xBFEDFEEE) + (v1 ^ 0x5FF6FF77) == 3 * (v0 ^ 0x365) + 1610021944)
                                        * ((833 * (v0 ^ 0x272)) ^ 0x68B)) | v0))
                            - 12))();
}

uint64_t sub_1000DF22C()
{
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                                   + ((1741 * (*(_DWORD *)(v1 + 3132) != v0)) ^ (v2 - 1891529475) & 0x70BE6EBD))
                                         + -((v2 - 1891529475) & 0x70BE6EBD ^ 0x25F)
                                         + -17 * ((v2 - 1891529475) & 0x70BE6EBD ^ 0x25Fu)
                                         + 1760))(LODWORD(STACK[0x660]));
}

uint64_t sub_1000DF36C()
{
  *uint64_t v1 = v2;
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * ((87
}

uint64_t sub_1000DF420@<X0>(int a1@<W8>)
{
  v1[501] = LODWORD(STACK[0x5E8]) - 1282311541;
  STACK[0xA98] = 2008LL;
  BOOL v3 = IOConnectCallStructMethod( ((v2 + 1724226958) & 0x993A66B6 ^ 0xE30B2E4F) + a1,  0x22u,  v1,  0x7D8uLL,  v1,  &STACK[0xA98]) == 0;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + (int)((335 * v3) ^ v2)) - (v2 ^ 0x239LL)))(LODWORD(STACK[0x660]));
}

uint64_t sub_1000DF4B8()
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * (((((*(_DWORD *)(v0 + 2004) - LODWORD(STACK[0x5E8]) == v2) ^ (v1 + 93) ^ 0xBF) & 1)
                                          * (((v1 + 93) | 0x400) - 1642)) ^ v1))
                            - 4LL))();
}

uint64_t sub_1000DF500@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (((a1 + 1423) * (v1 != 0x74A3168E8AC5AD46LL)) ^ a1)) - 4LL))();
}

uint64_t sub_1000DF570()
{
  STACK[0x870] = v1;
  return v0();
}

uint64_t sub_1000DF578(int a1)
{
}

uint64_t sub_1000DF5C4@<X0>(int a1@<W8>)
{
  int v3 = STACK[0x6C0];
  unint64_t v4 = STACK[0x998];
  *(_BYTE *)(STACK[0x998] + (v3 - 383815302)) = 0x80;
  unint64_t v5 = (uint64_t (*)(void))(*(void *)(v2 + 8LL * a1) - 8LL);
  int v6 = 230600693 * ((((v1 - 192) | 0x39C247B7) - (v1 - 192) + ((v1 - 192) & 0xC63DB848)) ^ 0xEBFEC19C);
  *(_DWORD *)(v1 - 192) = (a1 + 656) ^ v6;
  *(void *)(v1 - 184) = v4 + (v3 - 383815301);
  *(void *)(v1 - 176) = v4;
  *(_DWORD *)(v1 - 164) = ((a1 + 1631) ^ 0x123570F8) + v3 - v6 - 186382337;
  sub_1001DD928((_DWORD *)(v1 - 192));
  return v5();
}

uint64_t sub_1000DF680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * ((v6 - 120) ^ (31 * (a6 != 0)))) - 109 * (v6 ^ 0x689u) + 1191LL))();
}

uint64_t sub_1000DF6B8()
{
  return sub_1000DEF74(15988LL, 13);
}

uint64_t sub_1000DF6F8()
{
  BOOL v10 = v2 < v1;
  *(_BYTE *)(v5 + v8 - 0x150D5D2714BF6C67LL) = *(_BYTE *)(v4 + v7 - 0x4D1A37C42FD5B30BLL);
  if (v10 == v6 - 0x45C4AA6B01F987C9LL < v1) {
    BOOL v10 = v6 - 0x45C4AA6B01F987C9LL < v2;
  }
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * ((!v10 * v3) ^ v0)) - 12LL))();
}

uint64_t sub_1000DF790(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((a1 - 614) ^ (35 * (v1 != 0))))
                            - ((a1 + 402364625) & 0xE80461BF)
                            + 271LL))();
}

uint64_t sub_1000DF7D0()
{
  LODWORD(STACK[0x5E8]) = STACK[0x844];
  return sub_100138714();
}

uint64_t sub_1000DF7E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W8>)
{
  BOOL v4 = *(unsigned __int8 *)(STACK[0x688] + 2) == 1;
  LODWORD(STACK[0x5E8]) = STACK[0x844];
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v3
                                                                        + 8LL
                                                                        * ((v4 * (((a3 ^ 0x111) + 1664) ^ 0x581)) ^ a3))
                                                            - 305 * (a3 ^ 0x111u)
                                                            + 602LL))( a1,  a2,  4294924392LL);
}

uint64_t sub_1000DF83C()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((145
                                          * (*(_BYTE *)(v1
                                                      + ((v0 - 335) ^ 0xB3917905 ^ (v0 + 56))
                                                      + LODWORD(STACK[0x5E8])) == 0)) | v0))
                            - 8LL))();
}

uint64_t sub_1000DF884()
{
  unsigned int v2 = ((v0 - 464167628) & 0x1BAAA6B3 ^ 0x8D1F913B) + LODWORD(STACK[0x5E8]);
  BOOL v3 = v2 < 0xD98E1D2E;
  BOOL v4 = v2 >= LODWORD(STACK[0x5E8]) - 1927309399;
  if (LODWORD(STACK[0x5E8]) - 1927309399 < ((v0 - 442) ^ 0xD98E1DCE) != v3) {
    BOOL v5 = v3;
  }
  else {
    BOOL v5 = v4;
  }
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((499 * !v5) ^ (v0 - 442))) - 8LL))();
}

uint64_t sub_1000DF918@<X0>(int a1@<W0>, int a2@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
}

void sub_1000DF950()
{
}

uint64_t sub_1000DF95C@<X0>(int a1@<W8>)
{
  BOOL v9 = v2 < v1;
  *(_BYTE *)(v4 + v6 - 0xE5EB4FEF436D4EALL) = *(_BYTE *)(v3 + v7 - 0x75D36765783E2E36LL);
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((1996 * v9) ^ a1)) - 4LL))();
}

uint64_t sub_1000DF9F8(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
}

uint64_t sub_1000DFA38()
{
  int v1 = malloc(0x10uLL);
  STACK[0x790] = (unint64_t)v1;
  uint64_t v2 = malloc(0x10uLL);
  STACK[0x818] = (unint64_t)v2;
  if (v1) {
    BOOL v3 = v2 == 0LL;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = !v3;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + ((v4 * ((v0 - 943982026) & 0x384402DD ^ 0x29D)) ^ v0)) - 8))();
}

uint64_t sub_1000DFAA0(uint64_t a1)
{
  int v5 = 2 * (v3 ^ 0x5D0);
  unsigned int v6 = ((2 * *(unsigned __int8 *)(v1 + 3)) & 0xFFDF) + (*(unsigned __int8 *)(v1 + 3) ^ 0xFE6FFFEF);
  unsigned int v7 = v6 + ((v5 - 1074643427) & 0x400DC1ED ^ 0x3FF04C31);
  int v8 = v2 - v6;
  LODWORD(STACK[0x85C]) = v7;
  LODWORD(STACK[0x76C]) = v8 - 26214436;
  return ((uint64_t (*)(uint64_t, unint64_t, uint64_t))(*(void *)(v4
                                                                                 + 8LL
                                                                                 * ((931
                                                                                   * ((((_BYTE)v8 + 7) & 0xF) == 2 * (((_BYTE)v8 + 7) & 3))) ^ v5))
                                                                     - 12LL))( a1,  STACK[0x618],  4294924393LL);
}

uint64_t sub_1000DFB48(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, int a5)
{
  STACK[0x850] = a4;
  STACK[0x760] = a1;
  STACK[0x6E8] = v7 + 510;
  STACK[0x910] = v7 + 528;
  LODWORD(STACK[0x758]) = -721523495;
  STACK[0x658] = v6 + 4;
  BOOL v10 = v6 != -4 || a5 == 1046498795;
  return (*(uint64_t (**)(void))(v8 + 8LL * (v5 ^ (575 * v10))))();
}

uint64_t sub_1000DFBC8()
{
  BOOL v5 = v0 != 603954228 && v1 == 0;
  return (*(uint64_t (**)(void))(v3 + 8LL * ((61 * (((((v2 ^ 0x7CD) - 1110) ^ v5) & 1) == 0)) ^ v2)))();
}

uint64_t sub_1000DFC08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v8 = v7 - 264;
  unint64_t v9 = ((v7 - 264) ^ 0xED617E04) + v6;
  LODWORD(STACK[0x648]) = a5;
  uint64_t v10 = qword_1002748C8;
  unint64_t v11 = dword_100274AD0 & 0xFFFFFFFFDC9C8948LL;
  LODWORD(STACK[0x640]) = v6;
  STACK[0x650] = (v5 - v6);
  BOOL v13 = v9 < 0x11611730 || (unint64_t)(v8 - 282) + 291574610 < v9;
  return ((uint64_t (*)(void, uint64_t, unint64_t))((char *)*(&off_10025C670 + ((509 * v13) ^ v8))
                                                                    - 124 * (v8 ^ 0x4F0u)
                                                                    + 980))( (v6 + a5 + 1585483946),  v10,  v11);
}

uint64_t sub_1000DFCEC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v11 = (((((*(_DWORD *)(a2 + a3) ^ ((_DWORD)v5 + (_DWORD)v6)) & 0x7FFFFFFFu) * v7) >> ((a4 + 34) ^ 0x10)) ^ (((*(_DWORD *)(a2 + a3) ^ ((_DWORD)v5 + (_DWORD)v6)) & 0x7FFFFFFF) * v7))
      * v7;
  int v12 = byte_100213680[v11 >> 24] ^ *(unsigned __int8 *)(v5 + v6) ^ byte_100215CA0[v11 >> 24] ^ byte_10023A170[v11 >> 24] ^ v11 ^ (17 * (v11 >> 24));
  *(_BYTE *)(v8 + v6) = *(_BYTE *)(v9 + v6) ^ (v12 - ((2 * v12) & 0xD0) - 24) ^ (((a4 + 26) ^ v10) + 58);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + ((a4 + 546) | ((v6 == 254) * v4))) - 12))();
}

void sub_1000DFF00()
{
}

uint64_t sub_1000DFF0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL
                                        * (((v6 ^ 0x678 ^ ((v6 - 1666) | 0xD1) ^ 0x5DC) * (a6 == 0)) ^ (v6 - 1457)))
                            - 8LL))();
}

uint64_t sub_1000DFF4C()
{
  STACK[0x7C0] = 1LL;
  BOOL v1 = container_system_group_path_for_identifier(0LL, "systemgroup.com.apple.pisco.suinfo", &STACK[0x7C0]) != 0;
}

uint64_t sub_1000DFFAC()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
}

uint64_t sub_1000DFFF4()
{
  size_t v2 = strlen(v1);
  BOOL v3 = malloc((v2 ^ 0xAB4925FF4F3FFF2ELL ^ ((v0 - 639) | 0x51u)) + ((2 * v2) & 0x56924BFE9E7FFFFELL) + 0x54B6DA00B0C0001ELL) != 0LL;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + ((1260 * v3) ^ v0)) - 8))();
}

uint64_t sub_1000E0088()
{
  LODWORD(STACK[0x660]) = umask(0);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + ((248 * (v1 + ((v0 - 754) | 0x102u) + 0x54B6DA00E7BA032ALL != 922354744)) ^ (v0 + 363)))
                            - 8))();
}

uint64_t sub_1000E0120@<X0>(unint64_t a1@<X8>)
{
  *(_BYTE *)(v2 + v6 - 0x6B7039DC39A1DCB6LL) = *(_BYTE *)(((v7 + 841896245) & 0xCDD1AB6F)
                                                        + v1
                                                        + v5
                                                        - 0x37F6FD83A32A181DLL);
  BOOL v9 = v3 - 0x1CB73F243BE87EEALL < a1;
  if (a1 < v8 != v3 - 0x1CB73F243BE87EEALL < v8) {
    BOOL v9 = a1 < v8;
  }
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((248 * v9) ^ v7)) - 8LL))();
}

uint64_t sub_1000E01C8()
{
  STACK[0x658] = v1;
  strcpy((char *)&v3[v4 + v5], "/Library");
  uint64_t v6 = v0;
  int v7 = mkdir(v3, 0x1EDu);
  return ((uint64_t (*)(void))(*(void *)(v6
                                        + 8LL
                                        * (int)(((((v2 ^ 0xFEF3FCF5) & (2 * v7)) + (v7 ^ 0x7F79FEFD) == 2138701564)
                                               * (((v2 + 692789776) & 0xD6B4DDEE) + 466)) ^ v2))
                            - 8LL))();
}

uint64_t sub_1000E0260()
{
  BOOL v1 = *__error() == (((v0 ^ 0x334) - 317) ^ (v0 - 34));
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + (v1 | v0)) - 8))();
}

uint64_t sub_1000E02A4()
{
  v1[v2 + 0x54B6DA00B0C00016LL] = 0;
  int v4 = mkdir(v1, 0x1EDu);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + ((115
                                        * (((v4 << (((v3 + 61) & 0xEA) - 97)) & ((v3 + 1979976469) & 0x89FBF3BE ^ 0x3EFD34F0))
                                         + (v4 ^ 0x9F7E9AFF) != -1619092738)) ^ v3))
                            - 8))();
}

uint64_t sub_1000E0380()
{
  BOOL v1 = *__error() == 17;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + ((v1 * (((v0 - 234) | 0xC8) ^ 0x3AB)) ^ v0)) - 8))();
}

uint64_t sub_1000E03D0()
{
  *(_DWORD *)uint64_t v3 = 1668509743;
  *(_WORD *)(v3 + 4) = 26926;
  *(_BYTE *)(v3 + 6) = 100;
  *(_BYTE *)(v0 + 2_Block_object_dispose(va, 8) = 0;
  *(_BYTE *)(v2 + STACK[0x658]) = 0;
  umask(STACK[0x660]);
  free(v1);
  return ((uint64_t (*)(void))*(&off_10025C670 + (int)(((((v4 ^ 0xDF45028E) - 171) | 0x90) + 185) ^ v4 ^ 0xDF45028E)))();
}

uint64_t sub_1000E0448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 8LL * ((v6 - 46) ^ (111 * (v5 == 0))))
                                                                                       - ((((v6 + 495525614) & 0xE276E6FF)
                                                                                         - 1504) ^ 0xF2LL)))( a1,  a2,  a3,  a4,  a5,  4294924388LL);
}

uint64_t sub_1000E0494()
{
  LODWORD(STACK[0x660]) = umask(0x12u);
  int v3 = open(v0, 289);
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((465
}

uint64_t sub_1000E0524@<X0>(int a1@<W8>)
{
  uint64_t v2 = fcntl(a1 - 1845492671, 64);
  return ((uint64_t (*)(uint64_t))*(&off_10025C670
                                           + (((v1 ^ 0x6DA) + 833) ^ v1 ^ 0x6DA ^ (29
                                                                                 * (((((v1 ^ 0x6DA) - 1) ^ ((((_DWORD)v2 - (v1 ^ 0x6DA)) | ((v1 ^ 0x6DA) - v2)) >> 31)) & 1) == 0)))))(v2);
}

uint64_t sub_1000E0594(int a1)
{
  return (*(uint64_t (**)(void))(v2 + 8LL * ((899 * (v1 != 0)) ^ (a1 - 1156))))();
}

uint64_t sub_1000E05C8()
{
  int v1 = LODWORD(STACK[0x86C]) - LODWORD(STACK[0xA20]);
  LODWORD(STACK[0x8BC]) = v1;
  uint64_t v2 = malloc((v1 - 150298638));
  STACK[0x988] = (unint64_t)v2;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + ((964 * (v2 == 0LL)) ^ v0)) - (((v0 ^ 0x17Eu) + 358) ^ 0x61DLL)))();
}

uint64_t sub_1000E062C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)(v7
                                                                                                  + 8LL * ((73 * ((((v6 | ((unint64_t)(v6 < 0x8F5600E) << 32)) == 150298638) ^ (v5 - 102)) & 1)) ^ v5))
                                                                                      - 8LL))( a1,  a2,  a3,  a4,  a5,  0LL);
}

uint64_t sub_1000E0684@<X0>(_BYTE *a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t v5 = 17 * (v3 ^ 0x677u);
  unint64_t v6 = v5 ^ (a2 - 638);
  int v7 = v5 - 1410;
  BOOL v8 = v2 < v6;
  *a1 = (*(_BYTE *)STACK[0x990] ^ 0xF7) + ((2 * *(_BYTE *)STACK[0x990]) & 0xEF) + 62;
  if (v8 == a2 > 0xD9517C82) {
    BOOL v8 = v2 > 0xD9517C82;
  }
  return (*(uint64_t (**)(void))(v4 + 8LL * ((893 * !v8) ^ v7)))();
}

void sub_1000E0770()
{
}

uint64_t sub_1000E0784()
{
  int v3 = LODWORD(STACK[0x648]) + LODWORD(STACK[0x640]) + 618599389;
  uint64_t v4 = (char *)&STACK[0xB80] + v0 + 383;
  STACK[0x870] = v2 + 1088;
  STACK[0x650] = (unint64_t)&STACK[0xB80] + v0 + 319;
  sub_1001E9C38(asc_1002391A0, (char *)&STACK[0xB80] + v0 + 319, 0x40uLL);
  STACK[0x658] = (unint64_t)v4;
  uint64_t v5 = sub_1001E9C38(asc_100226198, v4, 0x40uLL);
  return ((uint64_t (*)(char *))((char *)*(&off_10025C670
                                                   + ((1359 * (v3 + 2025914884 < (((v1 ^ 0x77E) - 1736) ^ 0xCDu))) ^ v1))
                                         - 8))(v5);
}

uint64_t sub_1000E082C()
{
  LODWORD(STACK[0x758]) = -721523658;
  _BYTE *v2 = *(_BYTE *)(v1 + 0u % (v0 + v3 - 1467));
  return (*(uint64_t (**)(void))(v4 + 8LL * ((v3 - 1467) ^ 0x7BF)))();
}

uint64_t sub_1000E08C8()
{
  unsigned int v6 = (39651 * (unsigned __int16)(((19 * (v3 ^ 0x126)) ^ 0x52F0) + v2)) >> 16;
  int v7 = *(unsigned __int8 *)(v4 + (v2 + v0 + 142) % 0x13Fu);
  HIDWORD(v_Block_object_dispose(va, 8) = v7 ^ 5;
  LODWORD(v_Block_object_dispose(va, 8) = (v7 ^ 0x80) << 24;
  uint64_t v9 = (unsigned __int16)(((19 * (v3 ^ 0x126)) ^ 0x52F0)
                        + v2
                        - 319
                        * ((unsigned __int16)(v6
                                                             + ((unsigned __int16)((((19 * (v3 ^ 0x126)) ^ 0x52F0)
                                                                                  + v2
                                                                                  - v6) & 0xFFFE) >> 1)) >> 8));
  int v10 = *(unsigned __int8 *)(v4 + (v2 + v0 + 98) % 0x13Fu);
  int v11 = (v8 >> 29) - ((2 * (v8 >> 29)) & 0x78) - 68;
  HIDWORD(v_Block_object_dispose(va, 8) = v10 ^ 5;
  LODWORD(v_Block_object_dispose(va, 8) = (v10 ^ 0x80) << 24;
  int v12 = ((v8 >> 27) ^ 0x65) + ((2 * (v8 >> 27)) & 0xFFFFFFCA) + (*(unsigned __int8 *)(v4 + v9) ^ v11 ^ 0x39);
  int v13 = *(unsigned __int8 *)(v4 + (v2 + v0) % 0x13Fu);
  HIDWORD(v_Block_object_dispose(va, 8) = ~v13;
  LODWORD(v_Block_object_dispose(va, 8) = (v13 ^ 0x84) << 24;
  int v14 = ((v8 >> 25) ^ 0x2D)
      - ((2 * (v8 >> 25)) & 0xFFFFFFA4)
      + ((v12 - 101) ^ 0xFFFFFFFA)
      + ((2 * (v12 - 101)) & 0xFFFFFFF4)
      + 1;
  int32x4_t v15 = *(uint64_t (**)(void))(v5 + 8LL * ((117 * (v2 + 1 != v1 + 1276)) ^ v3));
  *(_BYTE *)(v4 + v9) = v14 - ((2 * v14) & 0xA) + 93;
  return v15();
}

uint64_t sub_1000E0A30@<X0>(char a1@<W2>, int a2@<W8>)
{
  LODWORD(STACK[0x648]) = 0;
  int v7 = (v6[109] ^ 0x85) - ((2 * (v6[109] ^ 0x85)) & 0x7A) - 231653315;
  unsigned int v8 = (v6[21] ^ 0x85)
  unsigned int v9 = ((v8 ^ 0x4096DAF5 | v7 ^ 0xF231403D) - ((2 * (v8 ^ 0x4096DAF5 | v7 ^ 0xF231403D)) & 0xFFFFFFC3) + 97) & 0x73 ^ 0x1B080261;
  unsigned int v10 = (((2 * v9) & 0x36100446) - v9 - 536524708) ^ 0xFB0D4A5C | (((v8 ^ 0x40105AF5) & (v7 ^ 0x3D))
                                                                 - ((2 * ((v8 ^ 0x40105AF5) & (v7 ^ 0x3D))) & 0x548242CC)
                                                                 + 709042534) ^ 0x2A432166;
  unsigned int v11 = (v10 - ((2 * v10) & 0x52533C46) - 383148509) ^ 0xE9299E23;
  unsigned int v12 = ((2 * v11 * v11 * v11) & 0xFD7FEBFA) + ((v11 * v11 * v11) ^ 0x7EBFF5FD);
  unint64_t v13 = STACK[0x650];
  int v14 = (*(_BYTE *)(STACK[0x650] + (v6[40] & 0x3F ^ 5LL)) & a1) ^ 0x61;
  unsigned int v15 = ((v14 | 0xFFFFFFCC) - (v14 | 0x33) + 51) ^ 0xFFFFFFEC | ((((v6[352] & 0x8A) - 111) ^ 0x17) - 127) ^ 0xD;
  unsigned int v16 = v15 + (~(2 * v15) | 0xFFFFFF9F) + 49;
  unint64_t v17 = STACK[0x658];
  int v18 = v6[355];
  int v19 = (*(unsigned __int8 *)(STACK[0x658] + (v6[52] & 0x3F ^ 5LL)) ^ 0x4B) & (v18 ^ 0x4B);
  int v20 = v19 - ((2 * v19) & 0x40) - 96;
  unsigned int v21 = ((v18 & 0xB0 ^ 0xFFFFFFEF) - (v18 & 8)) ^ 0xFFFFFFE7;
  unsigned int v22 = v20 ^ 0xFFFFFFA0 | (((2 * v21) | 0xFFFFFF98) - v21 + 52) ^ 0x74;
  unsigned int v23 = v22 - ((2 * v22) & 0xFFFFFFBA) - 35;
  unsigned int v24 = (v23 ^ 0x99999999 | v16 ^ 0x20) & 0x2B ^ 0x76;
  unsigned int v25 = (v6[94] ^ 0xFFFFFF85)
      - ((v24 - ((2 * v24) & 0x18) + 12) ^ 0x7A | (((v23 ^ 0xFFFFFFDD) & (v16 ^ 0x30))
                                                 - 8 * (((v23 ^ 0xFFFFFFDD) & (v16 ^ 0x30)) >> 2)
                                                 - 4) ^ 0xFFFFFFFC);
  v6[94] = v25 - (v2 & (2 * v25)) - 123;
  LOBYTE(v25) = (((2 * v6[139]) & 4) + (v6[139] & 0x36 ^ 0xEF) + 117) ^ 0x74;
  v6[64] ^= v2 ^ (((2 * (v25 + 93)) & 4 ^ 0xEF)
                                                  + ((((v25 + 93 - ((2 * v25) & 0xB8)) ^ 0x49 | (((18
                                                                                                 - (byte_1002147A0[v6[85] & 0x3F ^ 5LL] | 0x3F)) ^ 0x5E)
                                                                                               + 122) & 0x40)
                                                    - 2 * ((v25 + 93 - ((2 * v25) & 0xB8)) & 0x22 ^ (v25 + 93) & 2)
                                                    + 32) & 0xF7 ^ 0x28)
                                                  + 11);
  unsigned int v26 = *(unsigned __int8 *)(v13 + (v6[157] & 0x3F ^ 5LL)) ^ 0xFFFFFFB4;
  LODWORD(STACK[0x5E0]) = v26 - ((2 * v26 - 4) & 0xFFFFFFEF);
  unsigned int v27 = v6[125] & 0xC9 ^ 0xFFFFFFE1;
  unsigned int v28 = ((v27 | 0x48) - (v27 | 0xFFFFFFB7) - 73) ^ 0x2A;
  LODWORD(STACK[0x5D8]) = v28 + (~(2 * v28) | 0x35);
  int v29 = *(unsigned __int8 *)(v13 + (v6[104] & 0x3F ^ 5LL)) ^ 0x4B;
  char v30 = v6[387];
  unsigned int v31 = (-(v30 & 0xA1 ^ 1) - 77) ^ 0xFFFFFFB3;
  unsigned int v32 = ((2 * v31) & 0xFFFFFF8A) - v31;
  unsigned int v33 = (v32 - 70) ^ 0xFFFFFFBA | v30 & 0x3E ^ 0x34;
  unsigned int v34 = (((v33 - 2 * (v33 & 7 ^ v32 & 1) + 14) ^ 6) - 8) & ((v29 * v29 - ((2 * v29 * v29) & 0xFFFFFFB2) - 39) ^ 0xFFFFFFD9);
  LODWORD(STACK[0x640]) = v34 - ((2 * v34) & 0x6C);
  LOBYTE(v34) = (v6[52] ^ 0x7A) + (v6[175] ^ 0x85) + 1;
  v6[175] = v34 - (v2 & (2 * v34)) - 123;
  unsigned int v35 = 205 * (*(unsigned __int8 *)(v17 + (v6[44] & 0x3F ^ 5LL)) ^ 0x4B);
  LODWORD(STACK[0x5D0]) = (v35 >> 10) - ((v35 >> 9) & 0x66666666);
  v6[100] = (v6[100] ^ 0x85) - ((2 * (v6[100] ^ 0x85) + 10) & v2) - 126;
  v6[327] = -73;
  LOBYTE(v35) = (v6[386] ^ 0x4B) + (*(_BYTE *)(v13 + (v6[17] & 0x3F ^ 5LL)) ^ 0x4B);
  v6[386] = v35 - ((2 * v35) & 0x96) + 75;
  LOBYTE(v35) = byte_1002147A0[v6[57] & 0x3F ^ 5LL];
  char v36 = ~v6[415] & 0x8C ^ 0x84 | ((v35 & v5) + (v35 & 0x60 ^ 0x49) - 1) ^ 0x6A;
  unsigned __int8 v37 = (v36 + (~(2 * v36) | 9) - 4) ^ 0xFB;
  unsigned int v38 = (v6[101] ^ 0xFFFFFF85)
      + ((v37 / 3u) ^ 0xFFFFFFAA)
  v6[101] = v38 - (v2 & (2 * v38)) - 123;
  LOBYTE(v3_Block_object_dispose(va, 8) = byte_1002147A0[v6[217] & 0x3F ^ 5LL];
  unsigned int v39 = (((v38 & 0x75 ^ 0xFFFFFFAA) - ((2 * (v38 & 0x75 ^ 0xFFFFFFAA)) & 0x60) + 48) ^ 0x30) & (v6[398] ^ 0x4B);
  unsigned int v40 = (v39 - ((2 * v39) & 0xFFFFFFA0) - 48) ^ 0xFFFFFFD0 | ((v38 & 0x8A ^ 0xFFFFFFC2 | 0xFFFFFFB5)
                                                            - (v38 & 0x8A ^ 0xFFFFFFC2 | 0x4A)
                                                            + 74) ^ 0xFFFFFFFD;
  int v41 = (v40 - ((2 * v40) & 0x44) + 34) ^ 0x22 | (v6[7] >> 1) ^ 0x42;
  LOBYTE(v41) = (v6[249] ^ 0x85) + (v41 ^ 8) - ((2 * v41) & 0xEF) - 8;
  v6[249] = v41 - (v2 & (2 * v41)) - 123;
  v6[30] ^= 0x58u;
  LOBYTE(v33) = *(_BYTE *)(v13 + (v6[241] & 0x3F ^ 5LL)) & 0xFC ^ 0x6E;
  LOBYTE(v41) = (v33 - ((2 * v33) & 0xD0) - 23) ^ 0xCF | ((v6[383] & 1) - (v6[383] | 0xFD) + 7) ^ 9;
  LOBYTE(v41) = (v41 - ((2 * v41) & 0xEC) + 118) ^ 0x76;
  v6[215] = v41 * v41 * v41 - (v2 & (2 * v41 * v41 * v41)) - 123;
  LODWORD(STACK[0x620]) = v12;
  v6[446] = *(_BYTE *)(v13 + ((61 - (_BYTE)v12) & 0x3F));
  LOBYTE(v41) = *(_BYTE *)(v13 + (v6[13] & 0x3F ^ 5LL));
  unsigned int v42 = ((((v41 & 0x2C ^ 0x20) + (v41 & 0x20) + 65 - ((v41 & 0x2C ^ 0x20) & 0x20)) ^ 0xE1)
       - ((2 * ((v41 & 0x2C ^ 0x20) + (v41 & 0x20) + 65)) & 8)
       + 21) & 0x7C ^ 0xFFFFFFBF;
  char v43 = (v6[146] ^ 0x1B) + 98 + ((2 * (v6[146] ^ v4)) & 0x3C);
  char v44 = ((v43 * v43 - ((2 * v43 * v43) & 0xE6) + 115) ^ 0x73) * v43;
  char v45 = ((2 * v44) & 0xDE) + (v44 ^ 0x6F);
  unsigned int v46 = (((v42 - ((2 * v42) & 8) - 126) ^ 0x86)
       - ((2 * (v42 - ((2 * v42) & 8) - 126)) & 0xC0)
       - 1205220000) ^ 0xB829CD60;
  v6[381] = ((v46 << ((v45 + 1) & 7)) - ((2 * (v46 << ((v45 + 1) & 7))) & 0x16) + 11) ^ ((v46 >> ((7 - v45) & 7))
                                                                                       - ((2 * (v46 >> ((7 - v45) & 7))) & 0x9A)
                                                                                       + 77) ^ 0xD;
  int v47 = v6[131] ^ 0x85;
  int v48 = (v6[393] ^ 0x4B) - ((2 * (v6[393] ^ 0x4B)) & 0x76) - 1145007301;
  unsigned int v49 = (((v48 ^ 0xBBC0933B | v47) - ((2 * (v48 ^ 0xBBC0933B | v47)) & 0xF48) + 4004) ^ 0xFA4) & (((v6[400] ^ 0x4B)
  unsigned int v50 = (v49 - ((2 * v49) & 0x65BD160C) + 1927187206) ^ 0x72DE8B06 | (((v48 ^ 0x3B) & v47)
                                                                    - ((2 * ((v48 ^ 0x3B) & v47)) & 0x58)
                                                                    - 1594200276) ^ 0xA0FA6F2C;
  LOBYTE(v4_Block_object_dispose(va, 8) = *(_BYTE *)(v17 + (v6[220] & 0x3F ^ 5LL));
  LOBYTE(v1_Block_object_dispose(va, 8) = (((2 * v48) | 0xFB) - (v48 & 3) - 62) ^ 0xBA;
  LOBYTE(v1_Block_object_dispose(va, 8) = ((2 * v18) & 0xBF) + (v18 ^ 0xDF);
  unsigned int v51 = (v50 - ((2 * v50) & 0x79E0C2BE) - 1125097121) ^ 0xBCF0615F;
  int v52 = ((v51 >> (v18 + 33)) - ((2 * (v51 >> (v18 + 33))) & 0xDC) + 238) ^ ((v51 << (-25 - v18))
                                                                          - ((2 * (v51 << (-25 - v18))) & 0x3A)
                                                                          + 157);
  LOBYTE(v52) = (v6[330] ^ 0x4B) + (v52 ^ 0xC) + ((2 * v52) ^ 0xE6) - 127;
  v6[330] = v52 - ((2 * v52) & 0x96) + 75;
  LOBYTE(v4_Block_object_dispose(va, 8) = (*(_BYTE *)(v17 + (v6[27] & 0x3F ^ 5LL)) ^ 0x31)
              - 122
              + ((2 * (*(_BYTE *)(v17 + (v6[27] & 0x3F ^ 5LL)) ^ 0x4B)) & 0xF4);
  LOBYTE(v4_Block_object_dispose(va, 8) = ((2 * v48 * v48) & 0xB4) + ((v48 * v48) ^ 0x5A);
  unsigned int v53 = (((v6[10] >> 1) ^ 0x42) - (v6[10] & 0x6A) + 1692375733) ^ 0x64DF9AB5;
  int v54 = ((v53 >> ((v48 + 6) & 7)) - ((2 * (v53 >> ((v48 + 6) & 7))) & 0xA0) + 80) ^ ((v53 << ((2 - v48) & 7))
                                                                                   - 2
                                                                                   * ((v53 << ((2 - v48) & 7)) & 0x3F)
                                                                                   + 63);
  LOBYTE(v54) = (v6[67] ^ 0x85) + (v54 ^ 0xEF) + ((2 * v54) ^ 0x21) - 127;
  v6[67] = v54 - (v2 & (2 * v54)) - 123;
  LOBYTE(v54) = (byte_1002147A0[v6[136] & 0x3F ^ 5LL] & 0xAC ^ 0xF3) - 1;
  LOBYTE(v54) = ((v54 & 0x44) + (v54 ^ 0x67) + (v54 | 0xBB)) & 0xEC | 1;
  LOBYTE(v54) = (v6[195] ^ 0x85) + (v54 ^ 0x86) + ((2 * v54) ^ 0xF2) + 3;
  v6[195] = v54 - (v2 & (2 * v54)) - 123;
  unsigned int v55 = 171 * (byte_1002147A0[v6[56] & 0x3F ^ 5LL] ^ 0x4C);
  int v56 = ((v55 >> 8) & 0xBE) + ((v55 >> 9) ^ 0x5F);
  LOBYTE(v47) = *(_BYTE *)(v13 + (v6[196] & 0x3F ^ 5LL)) ^ 0x4B;
  LOBYTE(v55) = *(_BYTE *)(v17 + (v6[21] & 0x3F ^ 5LL)) ^ 0x4B;
  char v57 = (v55 | v47) - ((2 * (v55 | v47)) & 0x54) + 106;
  LOBYTE(v55) = ((v57 & 0x41 ^ 0x81) + (v57 & 0x49 ^ 0x6A) - ((v57 & 0x49 ^ 0x6A) & 0xC7)) ^ 0xE1 | ((v55 & v47) + (~(2 * (v55 & v47)) | 0xF9) - 124) ^ 0x83;
  LOBYTE(v55) = (*(_BYTE *)(v17 + (v6[127] & 0x3F ^ 5LL)) ^ 0x4B) + (v55 ^ 6) - ((2 * v55) & 0xF3) - 6;
  LOBYTE(v55) = (v6[423] ^ 0x4B) + 2 * v55 + (v55 ^ 0x7F) - 127;
  v6[423] = v55 - ((2 * v55) & 0x96) + 75;
  LOBYTE(v55) = (3 - (~*(_BYTE *)(v17 + (v6[65] & 0x3F ^ 5LL)) & 2)) & 6 ^ v2;
  LOBYTE(v55) = ((v55 - ((2 * v55) & 0xF7) - 22) ^ 0xEA) & (v6[140] ^ 0x85);
  int v58 = *(unsigned __int8 *)(v13 + (v6[182] & 0x3F ^ 5LL));
  v6[369] = v55 - ((2 * v55) & 0x16) + 75;
  v6[321] = (((v6[134] & 9 ^ 0xD5) + (v6[134] & 0x80)) | 0x74u) / 5
  unsigned int v59 = 171 * (v6[339] ^ 0x4B);
  int v60 = ((v59 >> 9) - ((v59 >> 8) & 0x64) - 78) & 0x49 | ((v59 >> 9) - (BYTE1(v59) & 0x64) + 58) & 4;
  LOBYTE(v59) = (*(_BYTE *)(v13 + (v6[39] & 0x3F ^ 5LL)) ^ v2) + 50;
  LOBYTE(v60) = v60 | ((v59 & 0x32) - ((2 * v59) & 4) + 70) ^ 0x46;
  LOBYTE(v60) = (v6[330] ^ 0x4B) + (v60 ^ 0xF3) + ((2 * v60) & 0xE7) + 13;
  v6[330] = v60 - ((2 * v60) & 0x96) + 75;
  char v61 = ((v6[322] & 7 ^ 0x94) + 120) ^ 0xB3;
  LOBYTE(v32) = v61 + 68 + ((2 * (((v6[322] & 7 ^ 0x94) + 120) ^ 0xF)) & 8);
  unsigned int v62 = ((55 << v32) - ((110 << v32) & 0x7F3D781C) - 6374386) ^ ((0x37u >> ((4 - v61) & 7))
                                                               - ((0x6Eu >> ((4 - v61) & 7)) & 0x24)
                                                               + 639813586);
  unsigned int v63 = (((v62 & 0xFFFFFFD2 ^ 0xD9BC7BFD) - ((2 * (v62 & 0xFFFFFFD2 ^ 0xD9BC7BFD)) & 0x1AA) + 213) ^ 0xD5) & (((v6[401] ^ 0x4B) - ((2 * (v6[401] ^ 0x4B)) & 0x46) - 1366135261) ^ 0xAE926E23);
  int v64 = ((v63 - ((2 * v63) & 0x1D2F61A4) + 244822226) | v62 & v3 ^ 0xC) ^ 0xE97B0D2;
  unsigned int v65 = ((LODWORD(STACK[0x640]) + 54) ^ 0x7D)
      + ((v64 - ((2 * v64) & 0xC2) + 97) ^ 0x12)
      + ((2 * (v64 - ((2 * v64) & 0xC2) + 97)) & 0xFFFFFFE7 ^ 0xFFFFFFC2);
  LOBYTE(v63) = (v6[237] ^ 0x85) + (byte_1002147A0[v6[201] & 0x3F ^ 5LL] ^ 0x55);
  v6[237] = v63 - (v2 & (2 * v63)) - 123;
  int v66 = *(unsigned __int8 *)(v17 + (v6[120] & 0x3F ^ 5LL)) ^ 0x4B;
  int v67 = (v6[400] ^ 0x4B) - ((2 * (v6[400] ^ 0x4B)) & 0x1AC) + 844288726;
  int v68 = v66 - ((2 * v66) & 0xBE) + 1490743135;
  int v69 = (((v68 ^ 0x58DAEF5F | v67 ^ 0x3252D2D6) - ((2 * (v68 ^ 0x58DAEF5F | v67 ^ 0x3252D2D6)) & 0x36) + 27) ^ 0x1B) & (v6[392] ^ 0x4B);
  unsigned int v70 = (v69 - ((2 * v69) & 0xFFFFFF83) - 1990679871) ^ 0x8958A2C1 | (((v68 ^ 0x1052835F) & (v67 ^ 0x52D6))
                                                                    - ((2 * ((v68 ^ 0x1052835F) & (v67 ^ 0x52D6))) & 0x2EAD530C)
                                                                    + 391555462) ^ 0x1756A986;
  unsigned int v71 = ((v6[436] ^ 0x4B) - ((2 * (v6[436] ^ 0x4B)) & 0x12C) - 1001780842) ^ 0xC44A0996;
  int v72 = v70 - ((2 * v70) & 0x6D4C18CC) - 1230631834;
  unsigned int v73 = ((v72 ^ 0xB6A60C66 | v71) - ((2 * (v72 ^ 0xB6A60C66 | v71)) & 0x26) + 19) & 0x4F ^ 0x43;
  unsigned int v74 = ((((v73 | 0x55EEAC2B) - (v73 | 0xAA1153D4) - 1441705004) & 0x422AB84 ^ 0x2014204)
       + (((v73 | 0x55EEAC2B) - (v73 | 0xAA1153D4) - 1441705004) ^ 0xFDEEBDAB)
       - ((((v73 | 0x55EEAC2B) - (v73 | 0xAA1153D4) - 1441705004) ^ 0xFDEEBDAB) & 0x384)) ^ 0xAE23FA44 | (((v72 ^ 0xC66) & v71) - ((2 * ((v72 ^ 0xC66) & v71)) & 0x2127A70E) - 795618425) ^ 0xD093D387;
  LODWORD(STACK[0x5C8]) = v74 - ((2 * v74) & 0x44);
  STACK[0x640] = (((v58 ^ 0x4B) + 13) ^ 0xFFFFFFDF) + ((2 * ((v58 ^ 0x4B) + 13)) & 0xFFFFFFBF) + 33;
  int v75 = v6[327];
  int v76 = ((*(unsigned __int8 *)(v13
                             + (((((v58 ^ 0x4B) + 13) ^ 0xDF)
  LOBYTE(v5_Block_object_dispose(va, 8) = ((((v6[208] ^ 0x85) + 43) ^ 0x7F) + 2 * ((v6[208] ^ 0x85) + 43) - 127) & (v75 ^ 0xB4);
  LOBYTE(v76) = (v58 - ((2 * v58) & 0x56) + 43) ^ 0x2B | (v76 - ((2 * v76) & 0x72) - 71) ^ 0xB9;
  LOBYTE(v76) = (v6[335] ^ 0x4B) + (v76 ^ 0xBB) + ((2 * v76) & 0x76) + 69;
  v6[335] = v76 - ((2 * v76) & 0x96) + 75;
  LOBYTE(v76) = *(_BYTE *)(v17 + (v6[162] & 0x3F ^ 5LL));
  LOBYTE(v4_Block_object_dispose(va, 8) = ((((v76 & 0x81 ^ 0x7F) + 116) ^ 0x8C) & (v6[323] ^ 0x4B)) - 2 * ((v6[323] ^ 0x4B) & 6 ^ v6[323] & 4);
  LOBYTE(v76) = ((v76 & 0x7E ^ 0x4E) + (v76 & 0x32 ^ 0x30) - ((v76 & 0x7E ^ 0x4E) & 0x33)) ^ 0xB2;
  LOBYTE(v76) = (((2 * v76) & 0x48) - v76 + 90) ^ 0xDE | (v48 - 126) ^ 0x82;
  v6[394] ^= (((v76 - ((2 * v76) & 0x10) - 120) & 0xFE) >> 1) ^ 0x44;
  LOBYTE(v76) = *(_BYTE *)(v13 + (v6[65] & 0x3F ^ 5LL)) ^ 0x4B;
  LOBYTE(v76) = v6[356] ^ 0x98 ^ (v76 - ((2 * v76 + 98) & 0x6C) - 25);
  LOBYTE(v4_Block_object_dispose(va, 8) = (v6[103] ^ 0x7A) + (v6[436] ^ 0x4B) + 1;
  v6[436] = v48 - ((2 * v48) & 0x96) + 75;
  LOBYTE(v4_Block_object_dispose(va, 8) = *(_BYTE *)(v17 + (v6[173] & 0x3F ^ 5LL));
  v6[356] = v76;
  LOBYTE(v76) = ((2 * v48) ^ 0x1B) + (v6[227] ^ 0x85) + ((4 * v48) & 0xE7 ^ 0xDB) + 116;
  v6[227] = v76 + (~(2 * v76) | 0xF5) - 122;
  LODWORD(STACK[0x5E8]) = v56;
  v6[383] ^= *(_BYTE *)(v17 + (((_BYTE)v56 + 33) & 0x3F)) ^ 0x4B;
  LOBYTE(v76) = (v6[26] ^ 0x85) * (v6[26] ^ 0x85);
  LOBYTE(v76) = (v6[350] ^ 0x4B) + (v76 ^ 0x14) - ((2 * v76) & 0xD6) - 20;
  v6[350] = v76 - ((2 * v76) & 0x96) + 75;
  LOBYTE(v4_Block_object_dispose(va, 8) = *(_BYTE *)(v13 + (v6[136] & 0x3F ^ 5LL)) ^ 0x4B;
  LOBYTE(v1_Block_object_dispose(va, 8) = (v6[385] ^ 0x4B) - ((2 * (v6[385] ^ 0x4B)) & 0x3A) + 29;
  LOBYTE(v4_Block_object_dispose(va, 8) = v48 - ((2 * v48) & 0x3F) - 97;
  LOBYTE(v76) = (((v48 ^ 0x9F | v18 ^ 0x1D) - ((2 * (v48 ^ 0x9F | v18 ^ 0x1D)) & 0xE6) + 115) ^ 0x73) & (((v6[378] ^ 0x4B) - ((2 * (v6[378] ^ 0x4B)) & 0xE2) + 113) ^ 0x71);
  LOBYTE(v76) = (v76 - ((2 * v76) & 0x98) + 76) ^ 0x4C | (((v48 ^ 0x9F) & (v18 ^ 0x1D))
                                                        - ((2 * ((v48 ^ 0x9F) & (v18 ^ 0x1D))) & 0xA6)
                                                        - 45) ^ 0xD3;
  LOBYTE(v76) = v76 - ((2 * v76) & 0x32) + 25;
  LOBYTE(v1_Block_object_dispose(va, 8) = (v76 & 0xBD ^ 0xB9) - ((2 * (v76 & 0xBD ^ 0xB9)) & 0x28);
  int v77 = (v6[374] >> 1) ^ 0x25;
  LOBYTE(v76) = (((v76 & 0xC2) + 12) ^ 0x31) & ((v77 - ((2 * v77) & 0x99) - 52) ^ 0xCC);
  LOBYTE(v76) = (v76 - ((2 * v76) & 0xBC) - 34) ^ 0xDE | (v18 - 106) & 0xFD ^ 0x34;
  v6[358] = (v76 - ((2 * v76) & 0x88) - 60) ^ 0x8F;
  int v78 = v6[422] ^ 0x4B;
  int v79 = (2 * v78) & 0x194;
  v78 -= 2129406262;
  int v80 = v78 - v79;
  int v81 = ((v78 & 2 | v80 & 0x88 ^ 0x52ADE2D5) - 1) ^ 0x52AFF05D;
  unsigned int v82 = (((v6[92] ^ 0x85) - ((2 * (v6[92] ^ 0x85)) & 0x42) - 1026269663) ^ 0x80105621) & (v80 ^ 0x135);
  unsigned int v83 = ((v81 | 0xD8FF620A) - (v81 | 0x27009DF5) + 654351861) ^ 0xD8FD7009 | (v82 - ((2 * v82) & 0x390585AA) + 478331605) ^ 0x1C82C2D5;
  unsigned int v84 = ((205 * (v6[155] ^ 0x85u)) >> 10) & 7;
  unsigned int v85 = (v83 - ((2 * v83) & 0x10EE7A0) - 2138606640) ^ 0x808773D0;
  int v86 = ((v85 << ((v84 ^ 0xDF) + 2 * v84 + 33)) - ((2 * (v85 << ((v84 ^ 0xDF) + 2 * v84 + 33))) & 0x56) + 171) ^ ((v85 >> ((7 - ((v84 ^ 0xDF) + 2 * v84)) & 7)) - ((2 * (v85 >> ((7 - ((v84 ^ 0xDF) + 2 * v84)) & 7))) & 0x94) + 202);
  LOBYTE(v86) = (v86 ^ 0x31) + (v6[395] ^ 0x4B) + ((2 * v86) & 0x5E ^ 0xBD);
  v6[395] = v86 - ((2 * v86 + 98) & 0x96) - 4;
  v6[345] ^= 0xFDu;
  LOBYTE(v86) = (v6[366] ^ 0x4B) * (v6[366] ^ 0x4B);
  LOBYTE(v86) = (v6[343] ^ 0x4B) + ((-90 * v86) & 0xD8) + ((-45 * v86) ^ 0xEC) + 20;
  v6[343] = v86 + (~(2 * v86) | 0x69) + 76;
  LOBYTE(v73) = *(_BYTE *)(v17 + (v6[85] & 0x3F ^ 5LL));
  v6[96] = (((2 * v73) ^ 0x96) - ((4 * v73) & 0xD0) + 104) ^ 0x12;
  int v87 = (v6[39] & 0x18) + ((v6[39] >> 1) & 0x6C ^ 0x5E) + 72;
  LODWORD(STACK[0x5C0]) = v87;
  int v88 = (v87 & 0xFE) - ((2 * v87) & 0x7C);
  unsigned int v89 = v88 - 282455234;
  LOBYTE(v8_Block_object_dispose(va, 8) = (*(_BYTE *)(v13 + ((-63 - (_BYTE)v88) & 0x3E)) ^ 0x4B) & (byte_1002147A0[v6[33] & 0x3F ^ 5LL] ^ 0xAA);
  v6[373] ^= 0x41 ^ (v88 - ((2 * v88) & 0x83) + 65);
  uint64_t v90 = ((v6[239] & 0x3E ^ 0x77) - (~v6[239] | 0xFE) - 2) ^ 0x73LL;
  unsigned int v91 = *(unsigned __int8 *)(v17 + v90) ^ 0x4B | v6[148] ^ 0xFFFFFF85;
  unsigned int v92 = ((((v91 - ((2 * v91) & 0x12) + 9) & 0xFFFFFFC6 ^ 4) - ((2 * (v91 - ((2 * v91) & 0x12) + 9)) & 0xFFFFFF84) + 67) & 0xFFFFFFFE | ((((*(_BYTE *)(v17 + (v6[105] & 0x3F ^ 5LL)) & 0x18 ^ 0xF) + 29) ^ 7) + 29) & 0x18) ^ 0x46;
  unsigned int v93 = v92 - ((2 * v92) & 0x14);
  LOBYTE(v73) = v6[354];
  LOBYTE(v92) = (v6[221] ^ 0x85) & (v73 ^ 0x4B);
  LODWORD(STACK[0x5B0]) = (v65 - 115) ^ 0x5A;
  LODWORD(STACK[0x5A0]) = (2 * (v65 - 115)) & 0xFFFFFFB4;
  LOBYTE(v64) = (v6[339] ^ 0x4B) & (v73 ^ 0xB4);
  LOBYTE(v64) = (v64 + (~(2 * v64) | 0xCB) - 101) ^ 0x9A | (v92 - ((2 * v92) & 0x3C) - 98) ^ 0x9E;
  LOBYTE(v64) = ((v64 - 40) & 9 ^ 8) + ((v64 - 40 - ((2 * v64) & 0x30)) & 0x76 ^ 0x15) - 1;
  int v94 = *(unsigned __int8 *)(v13 + (v6[171] & 0x3F ^ 5LL));
  v6[441] = ((v64 & 0x1D ^ 0x18) + (v64 ^ 0x85) - ((v64 ^ 0x85) & 0x1D)) ^ 0x97;
  unsigned int v95 = (v6[24] ^ 0xFFFFFF85)
      + (((205 * (v94 ^ 0x4Bu)) >> 10) ^ 0x7E)
      + (((205 * (v94 ^ 0x4Bu)) >> 9) & 0x7C)
      - 126;
  v6[44] ^= (v95 - ((2 * v95) & 0x38) + 28) ^ 0x1C;
  LOBYTE(v95) = ((v6[329] & 0x52) + (v6[329] & 0x53 ^ 0x52) - ((v6[329] & 0x53 ^ 0x52) & 0xFE) + 32) ^ 0x6B;
  int v96 = v6[137] >> 1;
  LOBYTE(v65) = (((2 * v95) & 0x22) - v95 - 18) ^ 0xE6 | ((((v96 & 0x24 ^ 0x20) + (v96 & 0x20)) | 0x1A)
                                                        - ((v96 & 0x24 ^ 0x20) & 0x20)) & 0xE0 | ((v96 & 0x24 ^ 0x20)
                                                                                                + (v96 & 0x20)) & 4;
  v6[423] ^= 0xB1 ^ (v65 - ((2 * v65) & 0x62) - 79);
  v6[344] ^= 0x1D ^ (3 * (((v6[67] & 0xD0 ^ 0xAF) + (v6[67] >> 6 << 7) - 66) ^ 0xC2)
                                    - ((6 * (((v6[67] & 0xD0 ^ 0xAF) + (v6[67] >> 6 << 7) - 66) ^ 0xC2)) & 0x3E)
                                    + 29);
  v6[370] = -2;
  v6[419] ^= 0xBDu;
  LOBYTE(v95) = *(_BYTE *)(v13 + (v6[37] & 0x3F ^ 5LL));
  LOBYTE(v4_Block_object_dispose(va, 8) = ((((v95 & 6 ^ 0x7C) - (v95 & 0x58)) & 0x18 ^ 9)
               + (((v95 & 6 ^ 0x7C) - (v95 & 0x58)) ^ 0xF2)
               - ((((v95 & 6 ^ 0x7C) - (v95 & 0x58)) ^ 0xF2) & 0x98)) ^ 0x5D | (((2 * v6[400]) & 0x42)
                                                                              - (v6[400] & 0xA1)
                                                                              - 106) ^ 0x97;
  LOBYTE(v4_Block_object_dispose(va, 8) = ((v48 - ((2 * v48) & 0xDC) + 110) ^ 0x60) + (v6[188] ^ 0x85);
  LODWORD(STACK[0x590]) = byte_1002147A0[v90];
  LOBYTE(v65) = v6[61] ^ 0x85;
  LOBYTE(v24) = byte_1002147A0[v6[193] & 0x3F ^ 5LL] ^ 0xAA;
  char v97 = (((v24 | v65) - ((2 * (v24 | v65)) & 0xC7) - 29) ^ 0xE3) & (v6[403] ^ 0x4B);
  LOBYTE(v24) = (v97 - ((2 * v97) & 0x94) + 74) ^ 0x4A | ((v24 & v65) - ((2 * (v24 & v65)) & 0x2A) + 21) ^ 0x15;
  LOBYTE(v24) = (v6[357] ^ 0x4B) + (v24 ^ 0x84) - ((2 * v24) & 0xF7) + 124;
  v6[357] = v24 - ((2 * v24) & 0x96) + 75;
  unsigned int v98 = v93 - 118;
  LOBYTE(v93) = *(_BYTE *)(v13 + (v6[159] & 0x3F ^ 5LL)) ^ 0x4B;
  LODWORD(STACK[0x580]) = v98;
  LOBYTE(v93) = ((v93 & (v98 ^ 0x75)) - ((2 * (v93 & (v98 ^ 0x75))) & 8) - 124) & 0x9D ^ 0x89;
  LOBYTE(v93) = ((v93 | 0xFC) - (v93 | 3) + 3) & 0xDD ^ 0xF3;
  v6[371] ^= 0x5F ^ (v93 - ((2 * v93) & 0xBF) + 95);
  char v99 = (v6[116] ^ 0x85) + 72 + (~(2 * v6[116]) | 0x6F) + 1;
  LOBYTE(v90) = (v6[416] ^ 0x4B) - ((2 * (v6[416] ^ 0x4B)) & 0x9A) - 51;
  LOBYTE(v65) = (((v90 ^ 0xCD | v99 ^ 0x48) - ((2 * (v90 ^ 0xCD | v99 ^ 0x48)) & 0x92) - 55) ^ 0xC9) & (((v6[349] ^ 0x4B) - ((2 * (v6[349] ^ 0x4B)) & 0xE8) + 116) ^ 0x74);
  LOBYTE(v65) = (v65 - ((2 * v65) & 0x88) + 68) ^ 0x44 | (((v90 ^ 0xCD) & (v99 ^ 0x48))
                                                        - ((2 * ((v90 ^ 0xCD) & (v99 ^ 0x48))) & 0x5C)
                                                        - 82) ^ 0xAE;
  int v100 = (v89 >> 1) ^ 0x7795099F;
  LOBYTE(v65) = v65 - ((2 * v65) & 0xB8) + 92;
  LOBYTE(v93) = (((v65 ^ 0x5C | v100) - ((2 * (v65 ^ 0x5C | v100)) & 0x30) + 24) ^ 0x18) & (((v6[321] ^ 0x4B)
                                                                                           - ((2 * (v6[321] ^ 0x4B)) & 0xAA)
                                                                                           - 43) ^ 0xD5);
  LOBYTE(v93) = (v93 - ((2 * v93) & 0x74) - 70) ^ 0xBA | (((v65 ^ 0x5C) & v100)
                                                        - ((2 * ((v65 ^ 0x5C) & v100)) & 0xBC)
                                                        + 94) ^ 0x5E;
  v6[347] = (v93 - ((2 * v93) & 0xB8) - 36) ^ 0x97;
  LOBYTE(v64) = v48 - (v2 & (2 * v48)) - 123;
  v6[188] = v64;
  int v101 = *(unsigned __int8 *)(v17 + (v64 & 0x3F ^ 5LL));
  HIDWORD(v102) = ~v101;
  LODWORD(v102) = (v101 ^ 0x48) << 24;
  LOBYTE(v101) = (v6[381] ^ 0x4B) - ((2 * (v6[381] ^ 0x4B)) & 0x5A);
  LOBYTE(v4_Block_object_dispose(va, 8) = ((v6[4] & 7 ^ 0xB5 | 0x8B) - (v6[4] & 7 ^ 0xB5 | 0x74) + 116) ^ 0x43;
  LOBYTE(v4_Block_object_dispose(va, 8) = ((v48 | 0xB) - (v48 | 0xF4) - 12) ^ 0x73;
  LOBYTE(v4_Block_object_dispose(va, 8) = ((2 * v48) & 0xBE) + (v48 ^ 0xDF);
  unsigned int v103 = ((v6[430] ^ 0x4B) - (v2 & (2 * (v6[430] ^ 0x4B))) - 468098299) ^ 0xE4196305;
  int v104 = (v103 << (v48 + 33)) - ((2 * (v103 << (v48 + 33))) & 0x94B4D4);
  int v105 = (v103 >> ((7 - v48) & 7)) - ((2 * (v103 >> ((7 - v48) & 7))) & 0x1D9A32A) - 1058221675;
  LOBYTE(v4_Block_object_dispose(va, 8) = (v6[415] ^ 0x4B) - ((2 * (v6[415] ^ 0x4B)) & 0xCC);
  v6[151] = -123;
  LOBYTE(v17) = *(_BYTE *)(v17 + (v6[41] & 0x3F ^ 5LL)) ^ 0x4B;
  LOBYTE(v100) = (v6[247] ^ 0x85) - ((2 * (v6[247] ^ 0x85)) & 0xA4) - 46;
  LOBYTE(v17) = v17 - ((2 * v17) & 0xA2) + 81;
  LOBYTE(v4_Block_object_dispose(va, 8) = (((v17 ^ 0x51 | v100 ^ 0xD2) - ((2 * (v17 ^ 0x51 | v100 ^ 0xD2)) & 0x4A) + 37) ^ 0x25) & ((v48 + 102) ^ 0x66);
  LOBYTE(v4_Block_object_dispose(va, 8) = (v48 - ((2 * v48) & 0xF8) - 4) ^ 0xFC | (((v17 ^ 0x51) & (v100 ^ 0xD2))
                                                       - ((2 * ((v17 ^ 0x51) & (v100 ^ 0xD2))) & 0x10)
                                                       - 120) ^ 0x88;
  LOBYTE(v105) = ~(v104 + 106) ^ v105;
  LOBYTE(v4_Block_object_dispose(va, 8) = (v48 - ((2 * v48) & 0x86) - 61) ^ 0xC3;
  LOBYTE(v101) = (((v48 | v105) - ((2 * (v48 | v105)) & 0xCA) + 101) ^ 0x65) & ((v101 - 83) ^ 0xAD);
  LOBYTE(v105) = (v101 - ((2 * v101) & 0x76) + 59) ^ 0x3B | ((v48 & v105) - ((2 * (v48 & v105)) & 4) + 2) ^ 2;
  LOBYTE(v105) = (v6[354] ^ 0x4B)
               + ((v105 - ((2 * v105) & 0x94) + 74) ^ 0x95)
               + ((2 * (v105 - ((2 * v105) & 0x94) + 74)) & 0xBF ^ 0x94)
               + 33;
  v6[354] = v105 - ((2 * v105) & 0x96) + 75;
  LOBYTE(v105) = (v6[442] ^ 0x4B) - ((2 * (v6[442] ^ 0x4B)) & 0x56) + 43;
  LOBYTE(v101) = ((2 * (v105 & 0x23 ^ 2)) | 0xB2) - (v105 & 0x23 ^ 2) + 39;
  LOBYTE(v105) = (((v6[372] ^ 0x4B) - ((2 * (v6[372] ^ 0x4B)) & 0xD4) + 106) ^ 0x6A) & (v105 ^ 0xD4);
  LOBYTE(v105) = v101 ^ 0xF8 | (v105 - ((2 * v105) & 0xCA) - 27) ^ 0xE5;
  LOBYTE(v105) = (v105 - ((2 * v105) & 0x80) - 64) ^ 0xC0;
  v6[339] = (v105 * v105 - 2 * ((v105 * v105) & 3) + 3) ^ 0x48;
  LOBYTE(v105) = v6[444] & 0x25 ^ 0xC9;
  LOBYTE(vqmemcpy(v0, "/ProvenanceV2", 13) = (v6[322] ^ 0x4B)
              + (v6[361] ^ 0x4B)
              + ((v105 - ((2 * v105) & 0x83) - 45) & 0x75 ^ 0x51)
              + ((2 * (v105 - ((2 * v105) & 0x83) - 45)) & 0x6A ^ 0xDD)
              - 73;
  v6[361] = v13 - ((2 * v13) & 0x96) + 75;
  BOOL v106 = LODWORD(STACK[0x758]) != -721523674;
  LODWORD(STACK[0x5B8]) = LODWORD(STACK[0x5D0]) + 119;
  LODWORD(STACK[0x5C8]) += 57;
  LODWORD(STACK[0x5D8]) = (v102 >> 26) - ((2 * (v102 >> 26)) & 0x64) + 50;
  return ((uint64_t (*)(void))*(&off_10025C670 + ((1473 * v106) ^ a2)))();
}

uint64_t sub_1000E2E6C@<X0>(int a1@<W8>)
{
  int v4 = a1 ^ v3;
  LODWORD(STACK[0x648]) = v1 ^ v2;
  if ((v1 ^ v2) <= 1) {
    int v5 = 1;
  }
  else {
    int v5 = v1 ^ v2;
  }
  return ((uint64_t (*)(void))*(&off_10025C670
                             + ((784
                               * (((v4 + 122) ^ (v5 - 17 < ((v4 + 688047704) & 0xD6FD3EF9) - 1602)) & 1)) ^ v4)))();
}

uint64_t sub_1000E2EE0()
{
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * (((((v1 ^ 0x3E3) - 71) ^ 0x6D8) * (v2 < 0x10)) ^ v1)) - 12LL))();
}

uint64_t sub_1000E2F14()
{
  *int v1 = xmmword_1002123F0;
  return ((uint64_t (*)(void))*(&off_10025C670 + ((615 * (((v0 - 70) ^ 0x62C) == (v2 & 0xFFFFFFF0))) ^ (v0 - 267))))();
}

uint64_t sub_1000E2F5C(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7)
{
  *(__n128 *)(v10 + a5) = a1;
  return (*(uint64_t (**)(void))(v7 + 8LL * (((v9 + a5 == v11) * a7) ^ v8)))();
}

uint64_t sub_1000E2F7C@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(uint64_t))(*(void *)(v1
                                                      + 8LL
                                                      * (((((a1 - 1172) | 0x244) ^ 0x681 ^ (141 * (a1 ^ 0x636)))
                                                        * (v2 != v3)) ^ a1))
                                          - 4LL))(4294967210LL);
}

uint64_t sub_1000E2FDC()
{
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + ((839 * (((((v0 + 183) ^ 2) - 1587) & v1) == 0)) ^ v0)) - 12))();
}

uint64_t sub_1000E3014@<X0>(uint64_t a1@<X6>, uint64_t a2@<X7>, int a3@<W8>)
{
  int v7 = (a3 - 539) | 0x217;
  v9.val[0].i64[0] = v6 & 8;
  v9.val[0].i64[1] = v6 & 8 | (v7 - 1360) ^ 0xE6;
  v9.val[1].i64[0] = v9.val[0].i64[0] | 2;
  v9.val[1].i64[1] = v9.val[0].i64[0] | 3;
  v9.val[2].i64[0] = v9.val[0].i64[0] | 4;
  v9.val[2].i64[1] = v9.val[0].i64[0] | 5;
  v9.val[3].i64[0] = v9.val[0].i64[0] | 6;
  v9.val[3].i64[1] = v9.val[0].i64[0] | 7;
  *(int8x8_t *)(v3 + v6) = veor_s8( veor_s8( veor_s8( veor_s8(*(int8x8_t *)(v4 + v9.val[0].i64[0]), *(int8x8_t *)(a1 + v9.val[0].i64[0])),  *(int8x8_t *)(a2 + v9.val[0].i64[0] + 1)),  (int8x8_t)0x1818181818181818LL),  vmul_s8( (int8x8_t)*(_OWORD *)&vqtbl4q_s8(v9, (int8x16_t)xmmword_100201400),  (int8x8_t)0xE1E1E1E1E1E1E1E1LL));
  return ((uint64_t (*)(__n128))((char *)*(&off_10025C670
                                                   + (((4 * ((v5 & 0xFFFFFFF8) - 8 != v6)) | (8
                                                                                            * ((v5 & 0xFFFFFFF8) - 8 != v6))) ^ v7))
                                         - 4))((__n128)xmmword_100201400);
}

void sub_1000E30FC()
{
}

uint64_t sub_1000E3104()
{
  uint64_t v5 = v3 ^ 0x403u;
  STACK[0x870] = v2 - 448;
  *(void *)(v1 + 64) = 0xE8E125912DC2764BLL;
  *(void *)(v1 + 72) = 0xC5C1D9754D4951FDLL;
  *(void *)(v1 + 80) = 0x3A3E268AB2B6AE02LL;
  *(void *)(v1 + 92) = 0x2E986D5678E108A1LL;
  STACK[0x978] = v5 + *(void *)(v4 + 8LL * v3) - 1082;
  STACK[0xA70] = v1;
  LODWORD(STACK[0x864]) = -721523495;
  STACK[0x6E0] = v0;
  unsigned int v6 = (((v3 ^ 0x6B7) - 1544) ^ 0x404304EF)
     + 255
     + ((2 * *(_DWORD *)(v1 + 68)) & 0x56 ^ 2)
     + (*(_DWORD *)(v1 + 68) & 0x3F ^ 0xBFBCFB7A);
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * (int)((668
                                               * ((v6 ^ 0x43EF9BE7) - 1139776551 + ((2 * v6) & 0x87DF37CE) < 0xFFFFFFC0)) ^ v5))
                            - 4LL))();
}

uint64_t sub_1000E49C4( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_BYTE *)(v9 + (v13 - 632854094)) = *(_BYTE *)(v10 + ((v13 - 632854094) & 0xFLL)) ^ *(_BYTE *)(a7 + ((v13 - 632854094) & 0xFLL)) ^ *(_BYTE *)(((v13 - 632854094) & 0xFLL) + a8 + 1) ^ (-31 * ((v13 - 78) & 0xF)) ^ 0x18;
  BOOL v14 = ((((v13 - (v11 + v12 - 1)) | (v11 + v12 - 1 - v13)) >> (a4 - 26)) & 1) == 0;
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((v14 | (4 * v14)) ^ a4)) - 4LL))();
}

void sub_1000E4A38()
{
}

uint64_t sub_1000E4A40()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
}

uint64_t sub_1000E4A88()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((1984
}

uint64_t sub_1000E4B30(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_BYTE *)(a3 + v5 - 0x4A70B5C0CD2C0703LL) = (*(_BYTE *)(a2 + v4 - 0x5C43ECB90AC871FFLL) ^ 0xBD)
                                             + ((2 * *(_BYTE *)(a2 + v4 - 0x5C43ECB90AC871FFLL)) & 0x7A)
                                             + 112;
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * ((1990 * (a4 + 1 != v6 + 48)) ^ a1)) - 4LL))();
}

uint64_t sub_1000E4BC4()
{
  int8x16_t v5 = *(int8x16_t *)(v0 + v2);
  v6.i64[0] = 0xBDBDBDBDBDBDBDBDLL;
  v6.i64[1] = 0xBDBDBDBDBDBDBDBDLL;
  int8x16_t v7 = veorq_s8(v5, v6);
  v8.i64[0] = 0x7A7A7A7A7A7A7A7ALL;
  v8.i64[1] = 0x7A7A7A7A7A7A7A7ALL;
  int8x16_t v9 = vandq_s8(vaddq_s8(v5, v5), v8);
  v8.i64[0] = 0x7070707070707070LL;
  v8.i64[1] = 0x7070707070707070LL;
  *(int8x16_t *)(v1 + bzero(v1, v2) = vaddq_s8(vaddq_s8(v7, v8), v9);
  BOOL v10 = ((v2 + 16 - v3) | (v3 - (v2 + 16))) >= 0;
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((2 * v10) | (4 * v10) | ((int)v3 + 857))) - 4LL))();
}

uint64_t sub_1000E4C24@<X0>(unsigned int a1@<W8>)
{
  if (a1 >= 0xFFFFFFC0) {
    int v5 = -42023;
  }
  else {
    int v5 = 0;
  }
  int v6 = v1 + 48;
  else {
    int v7 = v5;
  }
  if (*v3 > 1u) {
    int v5 = v7;
  }
  LODWORD(STACK[0x658]) = v5;
  int8x16_t v8 = &v3[v6 - 570702965];
  char v9 = ((*(_BYTE *)(STACK[0xA00] + 8) ^ 0x68 ^ *v8) - ((2 * (*(_BYTE *)(STACK[0xA00] + 8) ^ 0x68 ^ *v8)) & 0xDC) + 110) ^ 0x6E | v8[1] ^ *(_BYTE *)(STACK[0xA00] + 9) ^ (v2 - 26);
  char v10 = (v9 - ((2 * v9) & 0xDC) + 110) ^ 0x6E | *(_BYTE *)(STACK[0xA00] + 10) ^ 0x68 ^ v8[2];
  LOBYTE(v_Block_object_dispose(va, 8) = (v10 - ((2 * v10) & 0xDC) + 110) ^ 0x6E | *(_BYTE *)(STACK[0xA00] + 11) ^ 0x68 ^ v8[3];
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
}

uint64_t sub_1000E4D84(uint64_t a1, char a2, uint64_t a3, uint64_t a4, int a5)
{
  int v11 = (a5 - 891) | 0x100;
  BOOL v12 = v5 > 0xFA;
  unsigned int v13 = (a2 + ((v11 + v7) & v8) + 72);
  int v14 = v12 ^ (v13 < 5);
  BOOL v15 = v13 < v6;
  if (!v14) {
    BOOL v12 = v15;
  }
  return ((uint64_t (*)(void))(*(void *)(v10 + 8LL * ((v12 * v9) ^ v11)) - 12LL))();
}

void sub_1000E4DDC()
{
}

uint64_t sub_1000E4E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v5
                              + 8LL
                              * ((118
                                * (((a5 - 120) ^ 0xF ^ ((STACK[0x860] & 0x80) == 35
                                                                                                * ((a5 + 648) ^ 0x627)
                                                                                                - 665)) & 1)) ^ (a5 + 648))))();
}

uint64_t sub_1000E4E68@<X0>(unsigned __int8 *a1@<X8>)
{
  LODWORD(STACK[0x6FC]) = v1;
  return (*(uint64_t (**)(void))(v3
                              + 8LL
                              * (((*a1 == (((v2 + 95) & 0xF7) + 111)) * (((v2 - 427) | 2) ^ 0xF6)) ^ v2)))();
}

uint64_t sub_1000E4EB4()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((960
}

uint64_t sub_1000E4F20()
{
  int v5 = v3 - 1520;
  BOOL v6 = v1 < v2 + v0 - 1666;
  *(_BYTE *)STACK[0x920] = 0;
  if (v6 == v0 > 0xBDA7FC3E) {
    BOOL v6 = v1 > 0xBDA7FC3E;
  }
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((1590 * v6) ^ v5)) - 8LL))();
}

void sub_1000E4FAC()
{
}

uint64_t sub_1000E4FB4@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *))(*(void *)(v7 + 8LL * (((((v5 == 1) ^ (v6 + 120)) & 1) * (v6 - 587)) ^ v6))
                                                                                                  - 4LL))( a5 + (LODWORD(STACK[0x5E8]) - 1282311541),  a1,  a2,  a3,  a4,  &STACK[0xB80]);
}

uint64_t sub_1000E5004()
{
  uint64_t v6 = ((32 * v3) ^ 0xE637ECEF)
     - 1961034185
     + ((v3 << 6) & 0x1215B7C0 ^ 0x121024D5 ^ (5 * ((v2 - 2112517058) & 0x7DEA73FD ^ 0x244)));
  unint64_t v7 = 0xFFFFFFFF00000000LL;
  return ((uint64_t (*)(uint64_t))(*(void *)(v5
                                                      + 8LL
                                                      * ((11 * (v1 + v0 + v4 + v6 - v7 - 2050480646 < 0x10)) ^ (v2 + 974)))
                                          - 4LL))(0x784C89EA6DEF2BD7LL);
}

uint64_t sub_1000E5100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t *a6)
{
  v9.i64[0] = 0x6F6F6F6F6F6F6F6FLL;
  v9.i64[1] = 0x6F6F6F6F6F6F6F6FLL;
  v10.i64[0] = 0xDEDEDEDEDEDEDEDELL;
  v10.i64[1] = 0xDEDEDEDEDEDEDEDELL;
  int8x16_t v11 = vandq_s8(vaddq_s8(*v8, *v8), v10);
  v10.i64[0] = 0xBEBEBEBEBEBEBEBELL;
  v10.i64[1] = 0xBEBEBEBEBEBEBEBELL;
  a6[3] = vaddq_s8(vaddq_s8(veorq_s8(*v8, v9), v10), v11);
  LODWORD(STACK[0x6FC]) = v7 + 64;
  BOOL v12 = (_BYTE *)STACK[0x920];
  *BOOL v12 = v8[1].i8[0];
  v12[1] = v8[1].i8[1];
  void v12[2] = v8[1].i8[2];
  unint64_t v12[3] = v8[1].i8[3];
  v12[4] = v8[1].i8[4];
  v12[5] = v8[1].i8[5];
  v12[6] = v8[1].i8[6];
  v12[7] = v8[1].i8[7];
  v12[8] = v8[1].i8[8];
  v12[9] = v8[1].i8[9];
  v12[10] = v8[1].i8[10];
  v12[11] = v8[1].i8[11];
  v12[12] = v8[1].i8[12];
  v12[13] = v8[1].i8[13];
  v12[14] = v8[1].i8[14];
  v12[15] = v8[1].i8[15];
  LODWORD(STACK[0x7FC]) = v6 + 16;
  return sub_100138A18();
}

uint64_t sub_1000E5440()
{
  *(_BYTE *)(v5 + v1 - 0x3D8E262AC220B0B7LL) = (*(_BYTE *)(v0 + v3 - 0x4A367A250EB0883ALL) ^ (v2 - 58))
                                             + ((2 * *(_BYTE *)(v0 + v3 - 0x4A367A250EB0883ALL)) & 0xFB)
                                             + 48;
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * ((120 * (v6 + 1 != v4 + 16)) ^ v2)) - 8LL))();
}

void sub_1000E54B8()
{
}

uint64_t sub_1000E54C0()
{
  int v1 = LODWORD(STACK[0x660]) - 363;
  unsigned int v2 = (LODWORD(STACK[0x660]) + 1684951413) & 0x9B91A9CA;
  int v3 = LODWORD(STACK[0x660]) - 1116;
  unint64_t v4 = STACK[0x818];
  unint64_t v5 = STACK[0xA40] - 0x3C4F01B694108146LL;
  STACK[0xB10] = v5;
  STACK[0xB18] = v4;
  STACK[0xB08] = v5;
  STACK[0xB20] = v5;
  if (v5) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  char v7 = v6;
  return (*(uint64_t (**)(void))(v0 + 8LL
                                   * (int)((((v1 ^ v7) & 1) * (v2 ^ 0x58F)) ^ v3)))();
}

uint64_t sub_1000E553C()
{
  STACK[0xB00] = 0LL;
  unsigned int v2 = malloc(0x408uLL);
  STACK[0xB28] = (unint64_t)v2;
  int v3 = malloc(0x404uLL);
  STACK[0xB00] = (unint64_t)v3;
  if (v2) {
    BOOL v4 = v3 == 0LL;
  }
  else {
    BOOL v4 = 1;
  }
  char v5 = !v4;
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL * ((15 * (((v0 + 16) ^ v5) & 1)) ^ v0))
                            - ((v0 - 381525348) & 0x16BD9F4F)
                            + 1791LL))();
}

uint64_t sub_1000E55AC()
{
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + ((((((((v1 - 981) | 0x80) - 319) | 0x170) ^ 0x810A05B) == 135350573)
                                        * ((((v1 - 981) | 0x80) + 212902803) ^ 0xCB0A2E2)) ^ ((v1 - 981) | 0x80)))
                            - 12))();
}

void sub_1000E55B8()
{
}

uint64_t sub_1000E55C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  HIDWORD(v65) = byte_100221930[v63[14] ^ 0xDELL];
  LODWORD(v65) = (HIDWORD(v65) ^ 0xDDDDDDDD) << 24;
  int v66 = (v65 >> 25) - 2 * ((v65 >> 25) & 1) - 127;
  HIDWORD(v65) = byte_100221930[v63[10] ^ 0x9CLL];
  LODWORD(v65) = (HIDWORD(v65) ^ 0xDDDDDDDD) << 24;
  int v68 = v67 - ((2 * v67) & 0x7A8A9600) - 1119532124;
  uint64_t v69 = v63[13] ^ 0xC8LL;
  unsigned int v70 = ((((((v65 >> 25) - ((2 * (v65 >> 25)) & 0xE8) - 12) ^ 0x5C)
  int v71 = v70 - ((2 * v70) & 0x17149600) + 1267354372;
  unsigned int v72 = byte_100217B10[v69] - ((2 * byte_100217B10[v69] + 126) & 0x74) - 71;
  unsigned int v73 = ((v72 >> 4) & 4 | 0xFFFFFFE0) ^ v72;
  LOBYTE(v69) = v69
              - 11
  char v74 = ((2 * v69) & 0x1C) + (v69 ^ 0x1E);
  LODWORD(v69) = ((((v73 ^ 0x5B) - ((2 * (v73 ^ 0x5B)) & 0x11A)) << 16) + 2089615360) ^ 0x7C8D0000;
  LODWORD(v69) = (v69 - ((2 * v69) & 0x27DE0000) - 739294981) ^ 0xD3EF40FB | v68 ^ 0xBD454BA4;
  int v75 = v69 - ((2 * v69) & 0x7A325046);
  HIDWORD(v65) = byte_100221930[v63[5] ^ 0x50LL];
  LODWORD(v65) = (HIDWORD(v65) ^ 0xDDDDDDDD) << 24;
  int v76 = (unsigned __int8 *)STACK[0xB18];
  unsigned int v77 = ((((((v65 >> 25) - ((2 * (v65 >> 25)) & 0x26) - 109) ^ 0xD3)
  int v78 = v77 - ((2 * v77) & 0x63820000) - 239007140;
  int v79 = byte_100236CC0[*v63 ^ 0x3DLL];
  int v80 = ((((v79 ^ 0xF3) - 2 * ((v79 ^ 0xF3) & 3)) << 24) + 251658240) ^ 0x3000000;
  int v81 = byte_100217B10[*(unsigned __int8 *)(STACK[0xB18] + (41 - v74) + (v74 - 30)) ^ 0x12LL];
  unsigned int v82 = v81 + (~(2 * v81 + 126) | 0xFFFFFF91) + 55;
  unint64_t v83 = *(unsigned __int8 *)(STACK[0xB18] + 6);
  STACK[0x4F0] = v83;
  unsigned int v84 = byte_100217B10[v83 ^ 0x22] - ((2 * byte_100217B10[v83 ^ 0x22] - 2) & 0xFFFFFFCF) + 102;
  int v85 = v82 ^ 0x6E ^ ((v82 >> 4) & 4 | 0x33);
  unsigned int v86 = (v85 - ((2 * v85) & 0x1FA) - 469421059) ^ 0xE40533FD | v71 ^ 0x4B8A4B04;
  unsigned int v87 = v86 - ((2 * v86) & 0x301188D8);
  int v88 = (((((v84 >> 4) & 4 ^ v84 ^ 0xF7) - ((2 * ((v84 >> 4) & 4 ^ v84 ^ 0xF7)) & 8)) << 8) + 1446839296) ^ 0x563D0400;
  unint64_t v89 = v76[4];
  STACK[0x510] = v89;
  unsigned int v90 = (v88 - ((2 * v88) & 0x2993E400) + 348779171) ^ 0x14C9F2A3 | v78 ^ 0xF1C10A5C;
  unsigned int v91 = v90 - ((2 * v90) & 0x392C6DB4);
  unsigned int v92 = byte_100217B10[v89 ^ 0xB8] - ((2 * byte_100217B10[v89 ^ 0xB8] - 2) & 0xFFFFFFDF) + 110;
  unsigned int v93 = ((v92 >> 4) & 0xFB | 0xFFFFFF80) ^ (v92 >> 4);
  unsigned int v94 = ((v93 ^ 0x7B) + ((2 * v93) | 0xFFFFFF8E) + 58) ^ 0x4D;
  int v95 = v92 ^ 0x77 ^ (2 * (v94 & 0xF) - v94 + 112);
  unsigned int v96 = (((((v95 - ((2 * v95) & 0xFFFFFFC3)) << 24) - 520093696) ^ 0xE1000000)
       - ((2 * ((((v95 - ((2 * v95) & 0xFFFFFFC3)) << 24) - 520093696) ^ 0xE1000000)) & 0x4E000000)
       - 1478703801) ^ 0xA7DCC547 | (v91 - 1667877158) ^ 0x9C9636DA;
  unint64_t v97 = v76[1];
  STACK[0x4D0] = v97;
  HIDWORD(v65) = byte_100221930[v97 ^ 2];
  LODWORD(v65) = (HIDWORD(v65) ^ 0xDDDDDDDD) << 24;
  unsigned int v98 = v96 - ((2 * v96) & 0x6CC98CEE);
  unsigned int v99 = ((((((v65 >> 25) - ((2 * (v65 >> 25)) & 0x30) + 24) ^ 9)
  unint64_t v100 = v76[15];
  STACK[0x500] = v100;
  unsigned int v101 = (v99 - ((2 * v99) & 0x32E00000) + 1500547852) ^ 0x59708B0C | (v80
                                                                     - ((2 * v80 - 402653184) & 0x94000000)
                                                                     + 1056877429) ^ 0x4AFEAB75;
  unsigned int v102 = v101 - ((2 * v101) & 0x8F497594);
  unsigned int v103 = byte_100217B10[v100 ^ 0x3A] - ((2 * byte_100217B10[v100 ^ 0x3A] - 2) & 0xFFFFFFE7) - 14;
  unint64_t v104 = v76[9];
  STACK[0x4A0] = v104;
  HIDWORD(v65) = byte_100221930[v104 ^ 0x2B];
  LODWORD(v65) = (HIDWORD(v65) ^ 0xDDDDDDDD) << 24;
  unsigned int v105 = (((-89 - ((v103 >> 4) | 0xFFFFFFFB)) ^ 0xFFFFFFB1) - 1) ^ v103;
  unsigned int v106 = ((((((v65 >> 25) + (~(2 * (v65 >> 25)) | 0xC9) + 28) ^ 0xE5)
  int v107 = (v106 - ((2 * v106) & 0xA340000) + 85606219) ^ 0x51A3F4B | (v87 + 403227756) ^ 0x1808C46C;
  int v108 = v107 - ((2 * v107) & 0x353ED314);
  unint64_t v109 = v76[3];
  STACK[0x498] = v109;
  HIDWORD(v65) = byte_100221930[v109 ^ 0x5B];
  LODWORD(v65) = (HIDWORD(v65) ^ 0xDDDDDDDD) << 24;
  int v110 = (v102 - 945505590) ^ 0xC7A4BACA | ((((v65 >> 25) - 2 * ((v65 >> 25) & 3) + 3) ^ 0x1E)
                                          - ((2 * (((v65 >> 25) - 2 * ((v65 >> 25) & 3) + 3) ^ 0x1E)) & 0x6E)
                                          - 528475849) ^ 0xE0801937;
  int v111 = v110 - ((2 * v110) & 0xC2442DB0);
  unint64_t v112 = v76[7];
  STACK[0x4C0] = v112;
  int v113 = byte_100217B10[v112 ^ 0xFB] - ((2 * byte_100217B10[v112 ^ 0xFB] + 126) & 0x5C) + 45;
  int v114 = v113 ^ (((v113 & 0x40) >> 4) | 0xB) ^ 0x60;
  unsigned int v115 = (v98 + 912574071) ^ 0x3664C677 | (v114 - ((2 * v114) & 0xBE) - 1377629857) ^ 0xADE3095F;
  unsigned int v116 = v115 - ((2 * v115) & 0xC3F23AFA) - 503767683;
  LODWORD(STACK[0x5B8]) = v116;
  unint64_t v117 = v76[8];
  STACK[0x480] = v117;
  HIDWORD(v65) = byte_100221930[v117 ^ 5];
  LODWORD(v65) = (HIDWORD(v65) ^ 0xDDDDDDDD) << 24;
  int v118 = ((v65 >> 25) - ((2 * (v65 >> 25)) & 0xD8) - 20) ^ 0x88;
  unsigned int v119 = (((v118 - ((2 * v118) & 0x5E)) << 24) - 1358954496) ^ 0xAF000000;
  int v120 = (v119 - ((2 * v119) & 0x18000000) + 205848322) ^ 0xC44FF02 | (v108 + 1520396682) ^ 0x5A9F698A;
  unsigned int v121 = v120 - ((2 * v120) & 0xF0902DA8) + 2017990356;
  LODWORD(STACK[0x5D8]) = v121;
  unint64_t v122 = v76[2];
  STACK[0x4E0] = v122;
  int v123 = byte_100236CC0[v122 ^ 0x7D] ^ 0xEE;
  int v124 = (((v123 - ((2 * v123) & 0x1C8)) << 8) + 1572398080) ^ 0x5DB8E400;
  uint64_t v125 = v76[12] ^ 0x5ALL;
  STACK[0x3E8] = v64;
  uint64_t v126 = byte_10023BE20[v125];
  unsigned int v127 = ((((v126 ^ 0xE6) - ((2 * (v126 ^ 0xE6)) & 0xB6)) << 24) + 1526726656) ^ 0x5B000000;
  unsigned int v128 = (v127 - ((2 * v127) & 0x38000000) - 1663001920) ^ 0x9CE09AC0 | ((v105 ^ 0x6F)
                                                                       - ((2 * (v105 ^ 0x6F)) & 0x1F0)
                                                                       - 526472968) ^ 0xE09EA8F8;
  unsigned int v129 = (v128 - ((2 * v128) & 0x6A55213C) + 891981982) ^ 0x352A909E | (v75 - 48682973) ^ 0xFD192823;
  unsigned int v130 = (v129 - ((2 * v129) & 0x1314AC5C) - 1987422674) ^ 0xB3F26D48;
  LODWORD(STACK[0x648]) = v130;
  unsigned __int8 v131 = v105 ^ 0xB;
  unsigned int v132 = (v111 + 1629624024) ^ 0x612216D8 | (v124 - ((2 * v124) & 0x10887C00) - 935051771) ^ 0xC8443E05;
  int v133 = v132 - ((2 * v132) & 0x7B1CD8D0) - 1114739608;
  LODWORD(STACK[0x658]) = v133;
  int v134 = dword_100214A30[v73 ^ 0x1E];
  HIDWORD(v65) = v134 ^ 0x81F9;
  LODWORD(v65) = v134 ^ 0x4A970000;
  int v135 = (v65 >> 16) - ((2 * (v65 >> 16)) & 0x2531E29C);
  int v136 = dword_100214A30[v126 ^ 0x43];
  HIDWORD(v65) = v136 ^ 0xFFFFFFF9;
  LODWORD(v65) = v136 ^ 0x4A978100;
  int v137 = dword_100218130[v131] ^ ((v65 >> 8) - ((2 * (v65 >> 8)) & 0xFAA21AAE) + 2102463831);
  int v138 = dword_100214A30[v66];
  HIDWORD(v65) = v138 ^ 0x9781F9;
  LODWORD(v65) = v138 ^ 0x4A000000;
  int v139 = (v135 - 1835470514) ^ v137 ^ ((v65 >> 24) - ((2 * (v65 >> 24)) & 0x9E6C0290) + 1328939336) ^ v133;
  LODWORD(STACK[0x5C8]) = v139;
  int v140 = v116 ^ v139 ^ v121;
  LODWORD(STACK[0x5E0]) = v140;
  LODWORD(v83) = v116 ^ v139;
  unsigned int v141 = v130 ^ v140 ^ 0xE862D81A;
  LODWORD(STACK[0x5C0]) = v140 ^ 0xE862D81A;
  int v142 = (((2 * (BYTE2(v141) ^ 0x28)) | 0x5710A22A) - (BYTE2(v141) ^ 0x28) - 730353941) ^ 0x3B9D5110;
  int v143 = dword_100214A30[(v142 - ((2 * v142) & 0x29180A44) + 1418462498) ^ 0x44990502];
  HIDWORD(v65) = v143 ^ 0x81F9;
  LODWORD(v65) = v143 ^ 0x4A970000;
  int v144 = (v65 >> 16) - ((2 * (v65 >> 16)) & 0x4FE0B0A4) + 670062674;
  int v145 = dword_100224320[HIBYTE(v141) ^ 3];
  HIDWORD(v65) = v145 ^ 0x17D;
  LODWORD(v65) = v145 ^ 0xBA404C00;
  int v146 = (v65 >> 9) - ((2 * (v65 >> 9)) & 0xC73D9576) - 476132677;
  unsigned int v147 = (((2 * v146) ^ 0xC73D9576) - 2 * (((2 * v146) ^ 0xC73D9576) & 0x19C66C98 ^ (2 * v146) & 8) + 969305232) & 0x32119686 ^ 0x730086B8;
  unsigned int v148 = ((v147 | 0x29C793C3) - (v147 | 0xD6386C3C) - 700945348) ^ v146;
  HIDWORD(v65) = v148 ^ 0xC2;
  LODWORD(v65) = v148 ^ 0x88DD4C00;
  int v149 = (v65 >> 8) - ((2 * (v65 >> 8)) & 0x7CC69954) + 1046695082;
  unsigned int v150 = (((2 * (BYTE1(v141) ^ 0x71)) & 0x7C) - (BYTE1(v141) ^ 0x71) + 249819841) ^ 0x8EC6B260;
  unsigned int v151 = (((2 * ((v130 ^ v140 ^ 0x1A) ^ 0x9F)) & 0xE8)
  int v152 = v151 - ((2 * v151 + 1896307116) & 0x710146D0) - 1255108546;
  int v153 = dword_100214A30[(v150 - ((2 * v150) & 0x4006CE) - 2143768729) ^ 0x1DEFB2];
  HIDWORD(v65) = v153 ^ 0x9781F9;
  LODWORD(v65) = v153 ^ 0x4A000000;
  int v154 = ((v65 >> 24) - ((2 * (v65 >> 24)) & 0x87D994B6) - 1007891877) ^ v144 ^ v139 ^ v149;
  int v155 = v152 ^ dword_1002229C0[(2 * (((v130 ^ v140 ^ 0x1A) ^ 0x6C) & 7)
  unsigned int v156 = ((2 * v154) & 0xDCE7FD7E ^ 0x14C70C5A) + (v154 ^ 0xF41079D2);
  unsigned int v157 = (((v154 ^ v155 ^ 0xB9EA9E27) + 1) ^ 0x7EF6F7D5) + v156 + ((2 * ((v154 ^ v155 ^ 0xB9EA9E27) + 1)) & 0xFDEDEFAA);
  int v158 = v156
       - 1853095615
       + (v155 ^ ((v155 ^ 0x2389194A) - ((2 * (v155 ^ 0x2389194A) + 2) & 0x7FF660B2) + 1073426522) ^ 0xF10F375 ^ (v157 - 2 * ((v157 + 311757164) & 0x6C9D259B ^ v157 & 2) - 13488379));
  unsigned int v159 = v158 - ((2 * v158) & 0xF89E8364) - 61914702;
  LODWORD(STACK[0x5D0]) = v141 ^ 0x3BFE6A1C;
  LODWORD(STACK[0x550]) = v116 ^ v139;
  LODWORD(STACK[0x5B0]) = v159 ^ v116 ^ v139;
  unsigned int v160 = v159;
  LODWORD(STACK[0x530]) = v159;
  unsigned int v161 = v159 ^ v116 ^ v139 ^ v140 ^ 0xE862D81A;
  int v162 = v161 ^ v141 ^ 0x3BFE6A1C;
  LODWORD(STACK[0x560]) = v162;
  unsigned int v163 = v161;
  LODWORD(STACK[0x540]) = v161;
  int v164 = dword_100218130[((unsigned __int16)(v162 ^ 0x5FDB) >> 8) ^ 0x74];
  HIDWORD(v65) = v164 ^ 0x28A649;
  LODWORD(v65) = v164 ^ 0xC5000000;
  int v165 = (v65 >> 24) - ((2 * (v65 >> 24)) & 0xA8DCE9DA) + 1416525037;
  unsigned int v166 = ((((v162 ^ 0x562C5FDBu) >> 24) ^ 0xA6)
        - 32372276
        + ((2 * (((v162 ^ 0x562C5FDBu) >> 24) ^ 0xA6) + 428) & 0x1EA ^ 0xFEFBE7FF)) ^ dword_1002229C0[((v162 ^ 0x562C5FDBu) >> 24) ^ 0x41];
  unsigned int v167 = (((2 * (((v162 ^ 0xDB) >> 1) ^ 0x69)) & 0xFFFFFFFB)
  unsigned int v168 = v167 - ((2 * v167) & 0x2121C576) - 1852120389;
  HIDWORD(v65) = v166 ^ 0xCCCCCCCC;
  LODWORD(v65) = v166 ^ 0x6F3C600;
  int v169 = (v65 >> 8) - ((2 * (v65 >> 8)) & 0x836F4220) - 1044930288;
  int v170 = (((2 * v168) ^ 0x98) - ((4 * (_BYTE)v168) & 0x8F) + 70) & 0xFE ^ 0x4C;
  unsigned int v171 = (v170 - ((2 * v170) & 0x4C) + 1744689447) ^ 0xAABDDB2E;
  unsigned int v172 = ((v171 | 0xB35CF75) - (v171 | 0xF4CA308A) - 188075894) ^ 0xC675CD76 | (v168 >> 7) ^ 0x12335C4;
  int v173 = ((v162 ^ 0x562C5FDBu) >> 16) ^ 0xCB;
  int v174 = dword_100224320[(-670964434 - v173 + ((2 * v173) & 0x15E) + 34) ^ 0xD801E52E];
  HIDWORD(v65) = v174 ^ 0x17D;
  LODWORD(v65) = v174 ^ 0xBA404C00;
  int v175 = (v65 >> 9) - ((2 * (v65 >> 9)) & 0xC9BE6CA4) + 1692350034;
  unsigned int v176 = (((2 * v175) ^ 0xC9BE6CA4) - ((2 * ((2 * v175) ^ 0xC9BE6CA4)) & 0xCC928CC) + 644125799) & 0x32119686 ^ 0x10100686;
  int v177 = (v176 - ((2 * v176) & 0x20030C08) + 1485033252) ^ 0x3331D534;
  int v178 = (((2 * v177) | 0x1D9F7DAC) - v177 + 1898987818) ^ v175;
  HIDWORD(v65) = v178 ^ 0x9796;
  LODWORD(v65) = v178 ^ 0xB2360000;
  int v179 = v165 ^ dword_100218130[(v172 - ((2 * v172) & 0x6705DE6C) + 864218934) ^ 0x3382EF9B] ^ v169 ^ ((v65 >> 16) - ((2 * (v65 >> 16)) & 0xA2F09174) - 780646214);
  int v180 = v83 ^ 0xCEDF60BC ^ v179;
  unsigned int v181 = v161 ^ 0xD56DBC09 ^ v180;
  LODWORD(STACK[0x590]) = v180;
  unsigned int v182 = v181 ^ v162 ^ 0x562C5FDB;
  LODWORD(STACK[0x570]) = v181;
  int v183 = dword_100218130[HIBYTE(v182) ^ 0x6A];
  HIDWORD(v65) = v183 ^ 0x49;
  LODWORD(v65) = v183 ^ 0xC528A600;
  unsigned int v184 = ((v182 ^ 0x5D) - 2 * ((v182 ^ 0x5D) & 0x1F) - 2023752417) ^ 0xC7594C1B;
  unsigned int v185 = ((BYTE2(v182) ^ 0xA6) - ((2 * (BYTE2(v182) ^ 0xA6)) & 0x2A) - 2129165547) ^ 0x814726A5;
  int v186 = ((v65 >> 8) - ((2 * (v65 >> 8)) & 0x87F416BC) + 1140460382) ^ dword_100218130[(((2 * v184) | 0xE49F22FC)
                                                                                      - v184
                                                                                      + 229666434) ^ 0xB2492056];
  int v187 = v182 ^ 0x558EDE0;
  LODWORD(STACK[0x580]) = v182 ^ 0x558EDE0;
  LOWORD(v182) = ((2 * (BYTE1(v182) ^ 0xA5)) & 0x2E) - (BYTE1(v182) ^ 0xA5) - 4120;
  int v188 = dword_100218130[(((2 * v185) & 0x805580) - v185 - 667495105) ^ 0xD8667084];
  HIDWORD(v65) = v188 ^ 0xA649;
  LODWORD(v65) = v188 ^ 0xC5280000;
  int v189 = (v65 >> 16) - ((2 * (v65 >> 16)) & 0x10EA9EFE) - 2005577857;
  int v190 = dword_100214A30[((v182 & 0x31BD ^ 0x80620115) + (v182 & 0xE42 ^ 0xC41) - 1) ^ 0x80622258];
  HIDWORD(v65) = v190 ^ 0x9781F9;
  LODWORD(v65) = v190 ^ 0x4A000000;
  LODWORD(STACK[0x5A0]) = v179 ^ v160;
  int v191 = v186 ^ ((v65 >> 24) - ((2 * (v65 >> 24)) & 0xE75758D4) - 206853014) ^ v189 ^ v179 ^ v160;
  LODWORD(STACK[0x520]) = v191 ^ v180;
  LODWORD(STACK[0x650]) = v191;
  unsigned int v192 = v191 ^ v180 ^ 0xAADD43E9;
  unsigned int v193 = v192 ^ v163 ^ 0xD56DBC09 ^ v180;
  unsigned int v194 = v193 ^ v187;
  int v195 = dword_100224320[(((v193 ^ v187) & 0x1F ^ 0xC9874607) + ((v193 ^ v187) & 0xE0 ^ 0xC1) - 1) ^ 0xC98746A5];
  unint64_t v196 = v76[13];
  STACK[0x3C0] = v196;
  LODWORD(v126) = (v196 ^ 0x3F) - 12 * ((171 * (v196 ^ 0x3F)) >> 11);
  HIDWORD(v65) = v195 ^ 0x17D;
  LODWORD(v65) = v195 ^ 0xBA404C00;
  int v197 = (v65 >> 9) - ((2 * (v65 >> 9)) & 0xC7A8A138) + 1674858652;
  int v198 = ((v193 ^ v187) >> 16) ^ 0x208411B4;
  int v199 = dword_100214A30[(v198 - ((2 * v198) & 0x344) - 1037881438) ^ 0xE2A73EAF];
  HIDWORD(v65) = v199 ^ 0x81F9;
  LODWORD(v65) = v199 ^ 0x4A970000;
  LODWORD(v83) = dword_100224320[((BYTE1(v194) ^ 0x59)
                                + ((v194 >> 8) & 0x55 ^ 0x5FE06004)
                                - ((BYTE1(v194) ^ 0x59) & 0x55555555)) ^ 0x5FE060F3];
  int v200 = (v65 >> 16) - ((2 * (v65 >> 16)) & 0x88A5442C);
  HIDWORD(v65) = v83 ^ 0x17D;
  LODWORD(v65) = v83 ^ 0xBA404C00;
  LODWORD(v83) = (v65 >> 9) - ((2 * (v65 >> 9)) & 0xDD1AC59C) + 1854759630;
  int v201 = (((2 * v83) ^ 0xDD1AC59C) - ((2 * ((2 * v83) ^ 0xDD1AC59C)) & 0x20261798) + 269683661) & 0x32119686 ^ 0x20000402;
  LODWORD(v83) = (((((2 * v201) & 0x4002808) - v201 - 38696278) & 0x1A2E861A ^ 0x120C0441)
                + ((((2 * v201) & 0x4002808) - v201 - 38696278) & 0xE41178A4 ^ 0xC4100825)
                - 2) ^ v83;
  LODWORD(v196) = v194 ^ 0xD3B400AB;
  LODWORD(STACK[0x430]) = v194 ^ 0xD3B400AB;
  HIDWORD(v65) = v83 ^ 0x357504;
  LODWORD(v65) = v83 ^ 0x75000000;
  LODWORD(v83) = (v65 >> 24) - ((2 * (v65 >> 24)) & 0x88F9105A) + 1149012013;
  unsigned int v202 = ((HIBYTE(v194) ^ 0xED) - 1897189607 + ((2 * (HIBYTE(v194) ^ 0xED) + 172) & 0x84 ^ 0xDFF8FFFF)) ^ dword_1002229C0[HIBYTE(v194) ^ 0xA];
  HIDWORD(v65) = v202 ^ 0x7B;
  LODWORD(v65) = v202 ^ 0x951A1800;
  int v203 = (v200 + 1146266134) ^ v197 ^ (((2 * v197) ^ 0xC7A8A138)
                                     - ((2 * ((2 * v197) ^ 0xC7A8A138)) & 0x32DC7200)
                                     + 426653952) & 0x32119686 ^ v191 ^ ((v65 >> 8)
                                                                       - ((2 * (v65 >> 8)) & 0x309DFBB4)
                                                                       + 407829978) ^ v83;
  LODWORD(STACK[0x448]) = v203;
  unsigned int v204 = v193 ^ 0xEAFC9EB2;
  LODWORD(STACK[0x47C]) = v193 ^ 0xEAFC9EB2;
  int v205 = v203 ^ 0x6CB58F4B;
  int v206 = v203 ^ 0x6CB58F4B ^ v192;
  LODWORD(STACK[0x470]) = v206;
  int v207 = v206 ^ 0x1AA1E287;
  unsigned int v208 = v206 ^ 0x1AA1E287 ^ v204;
  int v209 = v207;
  LODWORD(STACK[0x468]) = v207;
  unsigned int v210 = ((((v208 ^ v196) >> 24) ^ 0x5C)
  HIDWORD(v65) = v210 ^ 0x6D;
  LODWORD(v65) = v210 ^ 0xFC87C700;
  int v211 = (v65 >> 8) - ((2 * (v65 >> 8)) & 0x1C1E85E0);
  int v212 = ((unsigned __int16)(v208 ^ v196) >> 8);
  unsigned int v213 = v212 ^ 0x52;
  unsigned int v214 = (v212 ^ 0xF9) + (((v208 ^ v196) >> 8) & 0xB4 ^ 0xEB82BD04) - ((v212 ^ 0xF9) & 0xB4);
  unsigned int v215 = ((v214 & 0xCA0012AE ^ 0x61020E) + (v214 ^ 0xEA8EF5B0) - ((v214 ^ 0xEA8EF5B0) & 0xC42AE)) ^ 0xCB611AE6;
  int v216 = (v215 - ((2 * v215 + 1896307116) & 0x41964808) + 1498337498) ^ dword_1002229C0[v213];
  HIDWORD(v65) = v216 ^ 0xB6BE3D;
  LODWORD(v65) = v216 ^ 0xE3FFFFFF;
  int v217 = (v65 >> 24) - ((2 * (v65 >> 24)) & 0xE3184DC4) - 242473246;
  int v218 = v208 ^ v196 ^ 0xF4A0001D;
  LODWORD(STACK[0x418]) = v218;
  unsigned int v219 = ((((v208 ^ v196) >> 16) & 0xC4 ^ 0x6AA2A905) + (((v208 ^ v196) >> 16) & 0x3B) - 1) ^ 0x972E599B;
  LODWORD(STACK[0x420]) = v208;
  unsigned int v220 = (v141 ^ 0x51A1A909)
       + (((v141 ^ 0x57B556F6) + 1) ^ 0xF7DDFF7B)
       + ((2 * ((v141 ^ 0x57B556F6) + 1)) & 0xEFBBFEF6)
       + 136446085;
  int v221 = dword_100218130[(v219 - ((2 * v219) & 0x92014010) - 888952312) ^ 0x368F5A22];
  unsigned int v222 = ((v220 ^ 0x70A7EF5F) - 1890053983 + ((2 * v220) & 0xE14FDEBE)) | v221 ^ 0xC528A649;
  HIDWORD(v65) = (v222 - ((2 * v222) & 0x52E0) + 10608) ^ 0x2970;
  LODWORD(v65) = v221 ^ 0xC5280000;
  LODWORD(v196) = dword_100218130[(((v208 ^ v196) ^ 0xA000C88C)
  int v223 = v196 ^ v209;
  int v224 = v196;
  LODWORD(STACK[0x400]) = v196;
  HIDWORD(v65) = v223 ^ 0xCDB4;
  LODWORD(v65) = v223 ^ 0x52EC0000;
  int v225 = ((v65 >> 18) - ((2 * (v65 >> 18)) & 0x59813408) + 750819844) ^ (((v208 << 14) ^ 0xEFB04000)
                                                                       - ((2 * ((v208 << 14) ^ 0xEFB04000)) & 0x23BF0000)
                                                                       - 1847610692);
  HIDWORD(v65) = v225 ^ (v208 >> 18) ^ 0x2A17;
  LODWORD(v65) = v225 ^ 0x4A3AC000;
  LODWORD(v196) = (v65 >> 14) - ((2 * (v65 >> 14)) & 0xE227217A) - 250376003;
  unsigned int v226 = v218 ^ 0xF12C5F65 ^ v196;
  int v227 = v196;
  LODWORD(STACK[0x410]) = v196;
  unsigned int v228 = ((BYTE2(v226) ^ 0x39 | 0x6DB1BB33) - (BYTE2(v226) ^ 0x39 | 0x924E44CC) - 1840364340) ^ 0xCDB32DCF;
  int v229 = dword_100224320[(((2 * v228) & 0x9E6A9AD4) - v228 - 1328893291) ^ 0x10C82480];
  HIDWORD(v65) = v229 ^ 0x17D;
  LODWORD(v65) = v229 ^ 0xBA404C00;
  int v230 = (v65 >> 9) - ((2 * (v65 >> 9)) & 0x9EBBEE5C) + 1331558190;
  unsigned int v231 = (((2 * v230) ^ 0x9EBBEE5C) - ((2 * ((2 * v230) ^ 0x9EBBEE5C)) & 0x208B050) + 17061928) & 0x32119686 ^ 0x22110480;
  unsigned int v232 = (((2 * v231) | 0x9DF94B2A) - v231 - 1325180309) ^ 0xEFFDBD15;
  int v233 = (((2 * v232) & 0x15E10154) - v232 + 1963949908) ^ v230;
  unsigned int v234 = (v226 ^ 0x350336CB | 0x8F3E81D4)
  HIDWORD(v65) = v233 ^ 0x13F8;
  LODWORD(v65) = v233 ^ 0xB8C60000;
  int v235 = (v65 >> 16) - ((2 * (v65 >> 16)) & 0xDE63848E) - 281951673;
  unsigned int v236 = ((BYTE1(v226) ^ 0x97) - ((2 * (BYTE1(v226) ^ 0x97)) & 0xDC) - 266105490) ^ 0xA18B9D96;
  unsigned int v237 = ((BYTE1(v226) ^ 0xC8) + 832475421 + ((2 * (BYTE1(v226) ^ 0xC8) + 172) & 0x8C ^ 0x8FFAB7FF)) ^ dword_1002229C0[(((2 * v236) | 0xEA3899B0) - v236 - 1964788952) ^ 0x24B45C98];
  unsigned int v238 = (v237 ^ ((v237 ^ 0xA63F1E64) - ((2 * (v237 ^ 0xA63F1E64) + 2) & 0xAF8C9404) + 1472612867) ^ ((v237 ^ 0xC5988180) - ((2 * (v237 ^ 0xC5988180) + 122634186) & 0xB27C4AA) - 381976006) ^ 0x8B9549CC)
       + 1671929828;
  unsigned int v239 = ((2 * v238) & 0x9B774FD6) + (v238 ^ 0x4DBBA7EB);
  HIDWORD(v65) = v239 + 4478997;
  LODWORD(v65) = v239 - 1304143851;
  int v240 = dword_100214A30[((v234 & 0x1001AA11 ^ 0x4018810) + (v234 & 0xAA3C15EE ^ 0x2A3E55E9) - 1) ^ 0x94026A43] ^ v224 ^ ((v65 >> 24) - ((2 * (v65 >> 24)) & 0x9D3E970A) + 1319062405) ^ 0x6031C789 ^ v235;
  int v241 = ((v240 & 0x2387EEED ^ 0x1C4967D) - ((2 * (v240 & 0x2387EEED ^ 0x1C4967D)) & 0x4087D16A) + 1615063477) ^ 0x6000F9AD;
  unsigned int v242 = v241 | ((v240 & 0xDC781112 ^ 0x98DF3165) - 1) ^ 0xD4B73176;
  unsigned int v243 = v242 - 2 * (v242 & 0x770DF577 ^ v241 & 5);
  unsigned int v244 = v226;
  LODWORD(STACK[0x40C]) = v226;
  LODWORD(STACK[0x3BC]) = HIBYTE(v226);
  int v245 = dword_100214A30[HIBYTE(v226) ^ 0x4A];
  HIDWORD(v65) = v245 ^ 0xFFFFFFF9;
  LODWORD(v65) = v245 ^ 0x4A978100;
  int v246 = (v243 + 1997403506) ^ ((v65 >> 8) - ((2 * (v65 >> 8)) & 0xD93DCB9E) + 1822352847);
  int v247 = v223;
  LODWORD(STACK[0x3F8]) = v223;
  LODWORD(v196) = v223 ^ 0x70F77D61 ^ v246;
  int v248 = v246;
  LODWORD(STACK[0x3D0]) = v246;
  LODWORD(STACK[0x4B0]) = v196;
  int v249 = v196 ^ v227;
  LODWORD(v196) = v196 ^ v227 ^ 0x81271128;
  unsigned int v250 = v196 ^ v244;
  int v251 = v196;
  LODWORD(STACK[0x3E0]) = v196;
  int v252 = (v196 ^ v244);
  unsigned int v253 = ((v252 ^ 0xCC | 0xE3AC6BBA) - (v252 ^ 0xCC | 0x1C539445) + 475239493) ^ 0xE3AC6B3D;
  LODWORD(STACK[0x3E4]) = v196 ^ v244;
  int v254 = dword_100224320[((BYTE2(v250) ^ 0x2C)
  HIDWORD(v65) = v254 ^ 0x17D;
  LODWORD(v65) = v254 ^ 0xBA404C00;
  int v255 = (v65 >> 9) - ((2 * (v65 >> 9)) & 0xAFC3C858) - 673061844;
  unsigned int v256 = (((2 * v255) ^ 0xAFC3C858) - ((2 * ((2 * v255) ^ 0xAFC3C858)) & 0x35E402CC) + 452067687) & 0x32119686 ^ 0x2001482;
  unsigned int v257 = (((2 * v256) & 0x60222008) - v256 - 2107316542) ^ 0x864EE687;
  int v258 = (((2 * v257) | 0x623E3E8A) - v257 - 824123205) ^ v255;
  HIDWORD(v65) = v258 ^ 0x782A;
  LODWORD(v65) = v258 ^ 0xF3400000;
  int v259 = dword_100214A30[(((2 * (BYTE1(v250) ^ 0x813085B1)) | 0xF7A7EACC) - (BYTE1(v250) ^ 0x813085B1) - 2077488486) ^ 0xFAE3708E];
  int v260 = (v65 >> 16) - ((2 * (v65 >> 16)) & 0x8A4A773C);
  HIDWORD(v65) = v259 ^ 0x9781F9;
  LODWORD(v65) = v259 ^ 0x4A000000;
  int v261 = (v65 >> 24) - ((2 * (v65 >> 24)) & 0xE7215B4A) + 1938861477;
  int v262 = dword_100218130[HIBYTE(v250) ^ 0x62];
  HIDWORD(v65) = v262 ^ 0x49;
  LODWORD(v65) = v262 ^ 0xC528A600;
  int v263 = v261 ^ dword_1002229C0[v252 ^ 0xAC] ^ ((v65 >> 8) - ((2 * (v65 >> 8)) & 0xDBADDF9A) - 304681011) ^ (v253 - ((2 * v253 + 17258924) & 0x188E708) + 2034770010) ^ (v260 + 1160067998);
  LODWORD(v196) = v247 ^ 0x3E2F17A3 ^ v263;
  LODWORD(STACK[0x640]) = v196;
  LODWORD(v196) = v249 ^ 0x2079177F ^ v196;
  LODWORD(STACK[0x620]) = v196;
  unsigned int v264 = v196 ^ v250;
  int v265 = ((v196 ^ v250) >> 16) ^ 0x85;
  unsigned int v266 = (((v196 ^ v250) >> 16) & 0x41) + (((v196 ^ v250) >> 16) & 0xBE ^ 0x3B461B7) - 1;
  unsigned int v267 = ((v266 & 0x1042BC4 ^ 0xE0410A84) + (v266 ^ 0xF9EE173) - ((v266 ^ 0xF9EE173) & 0x8082BC4)) ^ 0xE567AB0C;
  int v268 = (v267 - ((2 * v267 + 822565292) & 0x312C23D4) + 286899904) ^ dword_1002229C0[(v265
  HIDWORD(v65) = v268 ^ 0x8BD3;
  LODWORD(v65) = v268 ^ 0x1BEB0000;
  int v269 = (v65 >> 16) - ((2 * (v65 >> 16)) & 0xDDF6CE72) - 285513927;
  int v270 = (((2 * (((unsigned __int16)(v196 ^ v250) >> 8) ^ 0xCD)) & 0x160)
  int v271 = dword_100218130[(((2 * v270) | 0x20BECF1C) - v270 + 1872795762) ^ 0xD95F470D];
  HIDWORD(v65) = v271 ^ 0x28A649;
  LODWORD(v65) = v271 ^ 0xC5000000;
  int v272 = (v65 >> 24) - ((2 * (v65 >> 24)) & 0xB8B638DE) - 598008721;
  int v273 = (v196 ^ v250);
  unsigned int v274 = (((2 * (v273 ^ 0x97)) & 0x156) - (v273 ^ 0x97) - 230437548) ^ 0xF243CDEF;
  int v275 = ((v273 ^ 0x60) + 2057354850 - ((2 * (v273 ^ 0x60)) & 0x192) + 103) ^ 0x7AA0BE62;
  int v276 = v196 ^ v250 ^ 0x59FF9414;
  LODWORD(STACK[0x3F0]) = v276;
  int v277 = dword_100224320[HIBYTE(v264) ^ 0x12];
  HIDWORD(v65) = v277 ^ 0x17D;
  LODWORD(v65) = v277 ^ 0xBA404C00;
  int v278 = (v65 >> 9) - ((2 * (v65 >> 9)) & 0xA676651A) + 1396388493;
  unsigned int v279 = (((((2 * v278) ^ 0xA676651A) - ((2 * ((2 * v278) ^ 0xA676651A)) & 0x39C23CE8) + 1021386356) & 0x32119686 ^ 0x4EC320D1)
        - 1) ^ 0xFDE24594;
  unsigned int v280 = ((v279 | 0x71BC96B7) - (v279 | 0x8E436948) - 1908184760) ^ v278;
  HIDWORD(v65) = v280 ^ 0xF8;
  LODWORD(v65) = v280 ^ 0xA0234000;
  int v281 = v272 ^ dword_1002229C0[v274];
  LODWORD(STACK[0x3D4]) = v263 ^ v248;
  LODWORD(v196) = v281 ^ v263 ^ v248 ^ (v275 - ((2 * v275 + 1896307116) & 0x538102BA) + 574893619) ^ v269 ^ ((v65 >> 8) - ((2 * (v65 >> 8)) & 0x46F1A73A) - 1552362595);
  LODWORD(STACK[0x3CC]) = v196;
  LODWORD(v196) = v196 ^ v251;
  LODWORD(STACK[0x460]) = v196;
  LODWORD(v196) = v196 ^ v276;
  int v282 = dword_100224320[BYTE3(v196) ^ 0xE5];
  HIDWORD(v65) = v282 ^ 0x17D;
  LODWORD(v65) = v282 ^ 0xBA404C00;
  int v283 = (v65 >> 9) - ((2 * (v65 >> 9)) & 0xB5AE14E8) - 623441292;
  unsigned int v284 = ((2 * v283) ^ 0xB5AE14E8) + 756908075 + (~(2 * ((2 * v283) ^ 0xB5AE14E8)) | 0xE5C4FFAB);
  unsigned int v285 = (v284 & 0x32119686 ^ 0x12100682)
       + (v284 & 0x20000482 ^ 0xEC840878)
       - ((v284 & 0x32119686 ^ 0x12100682) & 0x20000482);
  unsigned int v286 = ((v285 & 0xF211253A ^ 0x38102109) + (v285 & 0x6DAC4 ^ 0xA448C1) - 2) ^ v283;
  int v287 = ((BYTE1(v196) ^ 0xEC) - ((2 * (BYTE1(v196) ^ 0xEC)) & 0x1FC) - 1131305474) ^ 0x3891B7E2;
  HIDWORD(v65) = v286 ^ 0x44444444;
  LODWORD(v65) = v286 ^ 0x31E27E00;
  LODWORD(STACK[0x450]) = v65 >> 8;
  LODWORD(STACK[0x5E8]) = v196;
  unsigned int v288 = (v196 ^ 0xFFFFFF88) + 513418378 + ((2 * v196) | 0xC2CBB6EE);
  LODWORD(STACK[0x438]) = dword_100224320[(v287 - ((2 * v287) & 0x80029E6) + 111000819) ^ 0x829DAE29];
  LODWORD(STACK[0x440]) = dword_100224320[((BYTE2(v196) ^ 0x28B405 | 0xB6BE8EB8)
                                         - (BYTE2(v196) ^ 0x28B405 | 0x49417147)
                                         + 1229025607) ^ 0xB6963AAF];
  LODWORD(STACK[0x458]) = dword_100224320[((v288 & 0x61218016 ^ 0x14900004)
                                         + (v288 ^ 0xE923CD73)
                                         - ((v288 ^ 0xE923CD73) & 0x8440016)) ^ 0x75B396AD];
  uint64_t v290 = v76[11];
  uint64_t v291 = *v76;
  uint64_t v292 = v76[10];
  uint64_t v293 = v76[14];
  uint64_t v294 = v76[5];
  unsigned int v295 = (unint64_t *)STACK[0xB08];
  STACK[0x428] = STACK[0xB08];
  unint64_t v296 = *v295;
  STACK[0x3D8] = *v295;
  unint64_t v297 = STACK[0xB20];
  STACK[0x3B0] = STACK[0xB20];
  STACK[0x380] = STACK[0xB20];
  *(void *)unint64_t v297 = v296 ^ 0x9696969696969696LL;
  LODWORD(v297) = byte_100217B10[STACK[0x480] ^ 0x1D];
  LODWORD(v297) = v297 - ((2 * v297 + 126) & 0x5E) - 82;
  unsigned int v298 = ((((v297 ^ 0x57 ^ (v297 >> 4) & 4)
  HIDWORD(v65) = byte_100221930[STACK[0x4A0] ^ 0x15];
  LODWORD(v65) = (HIDWORD(v65) ^ 0xDDDDDDDD) << 24;
  int v299 = ((((((v65 >> 25) - 2 * ((v65 & 0x2000000) != 0) - 127) ^ 0x12)
  int v300 = v299 - ((2 * v299) & 0x7B2C0000) + 1033261172;
  unsigned int v301 = v298 + 871220539;
  int v302 = v298 + 871220539 - ((2 * v298) & 0x66666666);
  unsigned int v303 = (((((v300 & 0x4A0000 ^ 0xCE4D2E4F) - 1) ^ 0x3255A89) - 1) ^ 0xCD6A74C6 | ((v301 & 0x1000000 | v302 & 0xE8000000 ^ 0x2AA7B12B)
                                                                                 - 1) & 0xFF000001) ^ 0xB000000;
  int v304 = ((v302 & 0x16000000 ^ 0x6000000) - ((2 * (v302 & 0x16000000 ^ 0x6000000)) & 0x4000000) + 1664673030) ^ 0x7378BDC6;
  int v305 = ((2 * v304) & 0x30809180) - v304 - 1497983459;
  unsigned int v306 = v305 ^ 0xA2F6CEDD | ((((v300 & 0x40000) + (v300 & 0xB50000 ^ 0x150000)) | 0x1020000)
                            - ((v300 & 0xB50000 ^ 0x150000) & 0x40000)) & 0xFFFDFFFF ^ 0x1850000;
  int v307 = (v306 - 2 * (v306 & 0x2B72961E ^ v305 & 2) + 728929820) ^ 0x2B72961C | (v303
                                                                               + 1835278568
                                                                               + (~(2 * v303) | 0x25379E85)
                                                                               + 4054) ^ 0x6D6430BD;
  int v308 = byte_100236CC0[STACK[0x4D0] ^ 0xD8] ^ 0xF4;
  unsigned int v309 = (((v308 - ((2 * v308) & 0xD0)) << 16) - 1771569152) ^ 0x96680000;
  int v310 = byte_10023BE20[STACK[0x498] ^ 0x79] ^ 0x55;
  unsigned int v311 = (v309 - ((2 * v309) & 0x33E0000) - 1046515054) ^ 0xC19F7292 | (v310 - ((2 * v310) & 0x1DA) + 1187933933) ^ 0x46CE6EED;
  int v312 = byte_100217B10[STACK[0x4C0] ^ 0x68];
  unsigned int v313 = v311 - ((2 * v311) & 0x22E91B38);
  unsigned int v314 = byte_100217B10[v290 ^ 0x88] - ((2 * byte_100217B10[v290 ^ 0x88] - 2) & 0xFFFFFFC8) - 29;
  int v315 = v314 ^ 0x2A ^ (((v314 & 0x40) >> 4) | 0x4A);
  unsigned int v316 = (v307 - ((2 * v307) & 0x9B5A2C26) + 1303189011) ^ 0x4DAD1613 | (v315
                                                                       - ((2 * v315) & 0x15C)
                                                                       + 77196974) ^ 0x499EEAE;
  HIDWORD(v65) = byte_100221930[STACK[0x3C0] ^ 0xBE];
  LODWORD(v65) = (HIDWORD(v65) ^ 0xDDDDDDDD) << 24;
  unsigned int v317 = ((((((v65 >> 25) - ((2 * (v65 >> 25)) & 0xC8) - 28) ^ 0xFE)
  int v318 = byte_100236CC0[STACK[0x4F0] ^ 0x16] ^ 0xA7;
  unsigned int v319 = (((v318 - ((2 * v318) & 0x12E)) << 8) - 1860069632) ^ 0x91219700;
  unsigned int v320 = v312 - ((2 * v312 + 126) & 0x6E) + 54;
  unsigned int v321 = (v319 - ((2 * v319) & 0x2A427800) - 719242184) ^ 0xD5213C38 | ((v320 ^ 0xB7 ^ (v320 >> 4) & 4)
                                                                      - ((2 * (v320 ^ 0xB7 ^ (v320 >> 4) & 4)) & 0x104)
                                                                      - 866756222) ^ 0xCC565982;
  unsigned int v322 = v321 - ((2 * v321) & 0x10782FFC);
  unsigned int v323 = byte_100217B10[v291 ^ 0x13] - ((2 * byte_100217B10[v291 ^ 0x13] - 2) & 0xFFFFFF92) - 56;
  unsigned int v324 = ((((v323 ^ 0xA6 ^ (v323 >> 4) & 4) - ((2 * (v323 ^ 0xA6 ^ (v323 >> 4) & 4)) & 0x58)) << 24) - 1409286144) ^ 0xAC000000;
  unsigned int v325 = (v324 - ((2 * v324) & 0x3A000000) - 1646887063) ^ 0x9DD67F69 | (v313 + 292851100) ^ 0x11748D9C;
  unsigned int v326 = v325 - ((2 * v325) & 0x4A42AD8E);
  int v327 = byte_100236CC0[STACK[0x510] ^ 0x3F] ^ 0x48;
  unsigned int v328 = (((v327 - ((2 * v327) & 0xFFFFFFF3)) << 24) + 2030043136) ^ 0x79000000;
  unsigned int v329 = (v322 - 2009327618) ^ 0x883C17FE | (v328 - ((2 * v328) & 0x70000000) + 955552092) ^ 0x38F4915C;
  int v330 = byte_100236CC0[v292 ^ 0x7B] ^ 0x9A;
  int v331 = (((v330 - ((2 * v330) & 0x20)) << 8) + 98963456) ^ 0x5E61000;
  unsigned int v332 = (v316 - ((2 * v316) & 0xD843ECA4) - 333318574) ^ 0xEC21F652 | (v331 - ((2 * v331) & 0x753EB600) - 1163961357) ^ 0xBA9F5BF3;
  int v333 = v332 - ((2 * v332) & 0x758C1DA2) - 1161425199;
  uint64_t v334 = byte_10023BE20[v293 ^ 0x57];
  unsigned int v335 = ((((v334 ^ 0xCF) - ((2 * (v334 ^ 0xCF)) & 0x1C)) << 8) + 173149696) ^ 0xA520E00;
  int v336 = byte_100236CC0[v294 ^ 0x6B] ^ 0x6D;
  unsigned int v337 = (((v336 - ((2 * v336) & 0x144)) << 16) - 123600896) ^ 0xF8A20000;
  int v338 = (v337 - ((2 * v337) & 0x1F8A0000) + 1338373342) ^ 0x4FC5F4DE | (v329 - ((2 * v329) & 0x1985C79A) + 214098893) ^ 0xCC2E3CD;
  unsigned int v339 = v338 - ((2 * v338) & 0xDCDC9286) - 294762173;
  unsigned int v340 = (v335 - ((2 * v335) & 0x68531400) + 1948879362) ^ 0x74298A02 | ((v317 + 2112572597 + (~(2 * v317) | 0x8429FFFF)) | 1) ^ 0x7DEB4CB5;
  uint64_t v341 = byte_100236CC0[v289 ^ 0xA4];
  unsigned int v342 = ((((v341 ^ 0x3F) - ((2 * (v341 ^ 0x3F)) & 0x55555555)) << 24) + 704643072) ^ 0x2A000000;
  HIDWORD(v65) = byte_100221930[STACK[0x500] ^ 0xF1];
  LODWORD(v65) = (HIDWORD(v65) ^ 0xDDDDDDDD) << 24;
  int v343 = (v65 >> 25) - ((2 * (v65 >> 25)) & 0x40) + 32;
  unsigned int v344 = (v340 - ((2 * v340) & 0xBE438A82) + 1596048705) ^ 0x5F21C541 | (v342 - ((2 * v342) & 0x56000000) - 1420238670) ^ 0xAB58E0B2;
  int v345 = (v344 - ((2 * v344) & 0x20614B24) + 271623570) ^ 0x1030A592 | ((v343 ^ 0xB5)
                                                                      - ((2 * (v343 ^ 0xB5)) & 0x4C)
                                                                      + 729219878) ^ 0x2B770326;
  int v346 = v345 - ((2 * v345) & 0x35FB58B6) - 1694651301;
  LOBYTE(v294) = -1 - (STACK[0x3BC] & 0x10 | 0x62);
  int v347 = byte_10023BE20[STACK[0x4E0] ^ 0x5B] ^ 0xE7;
  unsigned int v348 = (((v347 - ((2 * v347) & 0x26)) << 8) - 1429138688) ^ 0xAAD11300;
  int v349 = (v348 - ((2 * v348) & 0x37962000) + 1540034647) ^ 0x5BCB1057 | (v326 + 622941895) ^ 0x252156C7;
  LODWORD(v294) = ((((v346 ^ 0x93148F7D) >> (v294 ^ 0x9D))
                  - ((2 * ((v346 ^ 0x93148F7D) >> (v294 ^ 0x9D))) & 0x351F5AB4)
                  + 445623642) ^ 0x1A8FAD5A) >> (v294 & 0x10);
  LOBYTE(v294) = v294 - ((2 * v294) & 4) + 2;
  int v350 = ((2 * (v294 ^ 0x6B896363)) | 0x6B6DA998) - (v294 ^ 0x6B896363) - 901174476;
  LODWORD(v297) = ((v294 ^ 0xF) + (v294 & 0x15 ^ 0x1910) - ((v294 ^ 0xF) & 0x15)) ^ 0x1937;
  LODWORD(v294) = ((v350 & 0x5C088342 ^ 0x10408043) + (v350 & 0x2373CBD) - 1) ^ 0x4E7F3727;
  LODWORD(v297) = (v294 - ((2 * v294 + 822565292) & 0x2539F736) - 1960793999) ^ dword_1002229C0[v297];
  HIDWORD(v65) = v297 ^ 0x61A2;
  LODWORD(v65) = v297 ^ 0x91E10000;
  LODWORD(v297) = (v65 >> 16) - ((2 * (v65 >> 16)) & 0x47405B0A) - 1549783675;
  LODWORD(v341) = dword_100214A30[v341 ^ 0x9A];
  HIDWORD(v65) = v341 ^ 0xFFFFFFF9;
  LODWORD(v65) = v341 ^ 0x4A978100;
  LODWORD(v341) = (v65 >> 8) - ((2 * (v65 >> 8)) & 0xE1664242) - 256696031;
  LODWORD(v334) = dword_100218130[v334 ^ 0xAE];
  HIDWORD(v65) = v334 ^ 0x28A649;
  LODWORD(v65) = v334 ^ 0xC5000000;
  LODWORD(v294) = ((2 * (v343 ^ 0x5B)) & 0x16E) + (v343 ^ 0x6A7BBEEC);
  int v351 = v341 ^ dword_1002229C0[v343 ^ 0xBC] ^ ((v65 >> 24)
                                                               - ((2 * (v65 >> 24)) & 0x948BB654)
                                                               + 1246092074) ^ (v294
                                                                              + 1772274431
                                                                              - ((2 * v294 + 470801470) & 0x3105B9F6)
                                                                              + 2075) ^ (v349
                                                                                       - ((2 * v349) & 0xC59CFB02)
                                                                                       - 489783935) ^ v297;
  unsigned int v352 = v339 ^ 0x94C8F3FB ^ v351;
  LODWORD(STACK[0x3BC]) = v352;
  int v353 = v333 ^ 0x7501F2EB ^ v352;
  LODWORD(v297) = v353 ^ v346;
  LODWORD(STACK[0x3C0]) = v353;
  int v354 = dword_100224320[(((v353 ^ v346) ^ 0xDE | 0x6479A898)
  HIDWORD(v65) = v354 ^ 0x17D;
  LODWORD(v65) = v354 ^ 0xBA404C00;
  int v355 = (v65 >> 9) - ((2 * (v65 >> 9)) & 0xD93D0B02) - 325155455;
  unsigned int v356 = ((2 * v355) ^ 0xD93D0B02) - ((2 * ((2 * v355) ^ 0xD93D0B02)) & 0x14509598) + 1781025485;
  LODWORD(v334) = dword_100218130[(((2 * (BYTE1(v297) ^ 0x3F)) & 0x14A) - (BYTE1(v297) ^ 0x3F) + 602) ^ 0x257];
  HIDWORD(v65) = v334 ^ 0x28A649;
  LODWORD(v65) = v334 ^ 0xC5000000;
  LODWORD(v334) = (v65 >> 24) - ((2 * (v65 >> 24)) & 0xA94E6F5A) + 1420244909;
  unsigned int v357 = ((2 * (BYTE2(v297) ^ 0x8D)) | 0x9A522210) - (BYTE2(v297) ^ 0x8D) - 1294536968;
  int v358 = dword_100224320[((v357 & 0x40000CE6 ^ 0x30820CC7) + (v357 & 0xD291319) - 1) ^ 0x7DAB1DA1];
  HIDWORD(v65) = v358 ^ 0x17D;
  LODWORD(v65) = v358 ^ 0xBA404C00;
  int v359 = (v65 >> 9) - ((2 * (v65 >> 9)) & 0x8CA3CC88) + 1179772484;
  unsigned int v360 = (((2 * v359) ^ 0x8CA3CC88) - 2 * (((2 * v359) ^ 0x8CA3CC88) & 0x15BD8E36 ^ (2 * v359) & 4) + 901615155) & 0x32119686;
  unsigned int v361 = ((v360 ^ 0xFFFFFF7F) + 2098092370 + ((2 * v360) | 0x5E34D5E)) ^ 0xA339206D;
  unsigned int v362 = (v361 - ((2 * v361) & 0xD6405E3C) + 1797271326) ^ v359;
  HIDWORD(v65) = v362 ^ 0x5E98;
  LODWORD(v65) = v362 ^ 0x3D2C0000;
  int v363 = (v65 >> 16) - ((2 * (v65 >> 16)) & 0xEFAE390A) - 136897403;
  LODWORD(v296) = v297 ^ 0x8109042D;
  LODWORD(v297) = dword_100218130[BYTE3(v297) ^ 0xC];
  HIDWORD(v65) = v297 ^ 0x49;
  LODWORD(v65) = v297 ^ 0xC528A600;
  int v364 = v355 ^ v334 ^ ((v65 >> 8) - ((2 * (v65 >> 8)) & 0x93A7C1AA) + 1238622421) ^ ((v356 & 0x32119686 ^ 0x10111680)
                                                                                    + (v356 & 0x11606 ^ 0x606047)
                                                                                    - ((v356 & 0x32119686 ^ 0x10111680) & 0x11606)) & 0xFE3FFFFF ^ 0xA9CBB700 ^ v363;
  LODWORD(v297) = v364 ^ v339;
  int v365 = v353 ^ v364 ^ v339;
  LODWORD(STACK[0x3A8]) = v296;
  unsigned int v366 = v296 ^ v365 ^ 0x8663B976;
  int v367 = ((2 * (BYTE2(v366) ^ 0x90)) & 0x60) - (BYTE2(v366) ^ 0x90) - 849249585;
  unsigned int v368 = ((v367 & 0x48205833 ^ 0x22928431) + (v367 ^ 0xDD287ACE) - ((v367 ^ 0xDD287ACE) & 0x10000033)) ^ 0x6AFBDC91;
  unsigned int v369 = ((HIWORD(v366) & 0x48 ^ 0xC95F7A48) - (HIWORD(v366) & 0x48) + (BYTE2(v366) ^ 0x95)) ^ 0x49DE7E4A;
  int v370 = (v368 - ((2 * v368 + 822565292) & 0x2C365B76) - 828450159) ^ dword_1002229C0[(((2 * v369) | 0x96A06376)
                                                                                     - v369
                                                                                     - 1263546811) ^ 0xCBD135F8];
  HIDWORD(v65) = v370 ^ 0xB782;
  LODWORD(v65) = v370 ^ 0x55660000;
  int v371 = (v65 >> 16) - ((2 * (v65 >> 16)) & 0xC677E7D6) - 482610197;
  unsigned int v372 = (((v296 ^ v365) ^ 0x15 | 0xF91C30C6)
  int v373 = BYTE1(v366);
  int v374 = dword_100218130[((v296 ^ v365) >> 24) ^ 0x2C];
  LODWORD(v341) = (v373 ^ 0x3E) - ((2 * (v373 ^ 0x3E) + 1896307116) & 0x6105583A) - 365254413;
  HIDWORD(v65) = v374 ^ 0x49;
  LODWORD(v65) = v374 ^ 0xC528A600;
  int v375 = (v65 >> 8) - ((2 * (v65 >> 8)) & 0x4F5C5B8A);
  int v376 = ((2 * (v373 ^ 0x3C)) & 0x162) - (v373 ^ 0x3C) - 1050812594;
  int v377 = v341 ^ dword_1002229C0[((v376 & 0xC0406960 ^ 0xE804020) + (v376 ^ 0xC147AF48) - ((v376 ^ 0xC147AF48) & 0x1A6960)) ^ 0xCEC01983];
  HIDWORD(v65) = v377 ^ 0xCB6624;
  LODWORD(v65) = v377 ^ 0x72000000;
  int v378 = (v375 - 1481757243) ^ v364;
  int v379 = dword_100214A30[((v372 | 0x1ABB75DB) - (v372 | 0xE5448A24) - 448493020) ^ 0x5CBB6C3D];
  LODWORD(STACK[0x370]) = v351;
  int v380 = v378 ^ v351 ^ v379 ^ ((v65 >> 24) - ((2 * (v65 >> 24)) & 0x8F853ADA) - 943547027) ^ v371;
  int v381 = v380 ^ v297;
  int v382 = v380 ^ v297 ^ 0xB97ED517;
  LODWORD(v297) = ((unsigned __int16)(v382 ^ v296) >> 8);
  unsigned int v383 = v297 ^ 0x54;
  LODWORD(v341) = (((2 * ((v382 ^ v296) >> 8)) ^ 0x8A22F6)
  LODWORD(v297) = (((v341 | 0x6CF18ECF) - (v341 | 0x930E7130) - 1827770064) ^ 0x6DF18D4D)
                + ((((2 * (v297 ^ 0x4205B)) | 0x23DCA356) - (v297 ^ 0x4205B) - 300831147) ^ 0x2969DD95);
  LODWORD(v297) = (v297 - ((2 * v297) & 0x6E2A7BC2) + 1997880801) ^ dword_1002229C0[v383];
  HIDWORD(v65) = v297 ^ 0x68A7D8;
  LODWORD(v65) = v297 ^ 0xB4000000;
  LODWORD(STACK[0x3A0]) = v380 ^ 0x8EAC9023;
  int v384 = (v65 >> 24) - ((2 * (v65 >> 24)) & 0x38F5EE48) + 477820708;
  LODWORD(v297) = dword_100224320[((v382 ^ v296) >> 24) ^ 0x17];
  HIDWORD(v65) = v297 ^ 0x17D;
  LODWORD(v65) = v297 ^ 0xBA404C00;
  LODWORD(v294) = (v65 >> 9) - ((2 * (v65 >> 9)) & 0x86CFD008) + 1130883076;
  LODWORD(v297) = ((2 * v294) ^ 0x86CFD008) - 2 * (((2 * v294) ^ 0x86CFD008) & 0x18497ADE ^ (2 * v294) & 2) + 1481210589;
  LODWORD(v341) = ((v297 & 0x10101000 ^ 0x405E2811) + (v297 & 0x22018686 ^ 0x22010401) - 2) ^ 0x965E7558;
  LODWORD(v341) = (v341 - ((2 * v341) & 0x28222D90) - 1787218215) ^ v294;
  LODWORD(v294) = (((v382 ^ v296) >> 16) & 0x9E ^ 0x1040488F)
  HIDWORD(v65) = v341 ^ 0x93;
  LODWORD(v65) = v341 ^ 0x339A0200;
  LODWORD(v341) = (v65 >> 8) - ((2 * (v65 >> 8)) & 0x50943FFC) + 675946494;
  unsigned int v385 = v382 ^ v296 ^ 0xD198CE1C;
  LODWORD(v334) = ((2 * ((v382 ^ v296) ^ 0x63)) | 0x5B14E70A)
  int v386 = dword_100214A30[((v294 & 0x10004847 ^ 0x28920501)
  HIDWORD(v65) = v386 ^ 0x81F9;
  LODWORD(v65) = v386 ^ 0x4A970000;
  LODWORD(v334) = dword_100218130[((v334 & 0x55E7190A ^ 0x44660802)
  int v387 = v365 ^ 0x13962D6D ^ v382;
  LODWORD(STACK[0x390]) = v387;
  LODWORD(STACK[0x394]) = v381 ^ 0x6EAE1B4A;
  int v388 = v387 ^ v381 ^ 0x6EAE1B4A ^ v334;
  int v389 = dword_100224320[(((v388 ^ v385) ^ 0xEE)
  HIDWORD(v65) = v389 ^ 0x17D;
  LODWORD(v65) = v389 ^ 0xBA404C00;
  int v390 = (v65 >> 9) - ((2 * (v65 >> 9)) & 0xDA47A5D4) + 1831064298;
  unsigned int v391 = (((2 * v390) ^ 0xDA47A5D4) - 2 * (((2 * v390) ^ 0xDA47A5D4) & 0x11100566 ^ (2 * v390) & 0x20) + 823133510) & 0x32119686 ^ 0x2000402;
  int v392 = (((2 * v391) & 0x2022090C) - v391 - 473001376) ^ 0x69CEB4E9;
  LODWORD(v341) = dword_100224320[(((2 * (((unsigned __int16)(v388 ^ v385) >> 8) ^ 0x34516386)) | 0xC743BBE6)
  HIDWORD(v65) = v341 ^ 0x17D;
  LODWORD(v65) = v341 ^ 0xBA404C00;
  LODWORD(v341) = (v65 >> 9) - ((2 * (v65 >> 9)) & 0x9DC798A8) + 1323551828;
  LODWORD(v294) = ((2 * v341) ^ 0x9DC798A8) - ((2 * ((2 * v341) ^ 0x9DC798A8)) & 0x76B6C3C) + 1135982110;
  LODWORD(v294) = (v294 & 0x12100200 | v294 & 0x20019486 ^ 0xCCE118F5) - 1;
  LODWORD(v341) = ((v294 & 0xD0309884 ^ 0x14580009) + (v294 & 0x22010602 ^ 0x3010703) - 2) ^ v341;
  HIDWORD(v65) = v341 ^ 0xED25E;
  LODWORD(v65) = v341 ^ 0x9A000000;
  LODWORD(v341) = (v65 >> 24) - ((2 * (v65 >> 24)) & 0x15ED8A08) - 1963539196;
  LODWORD(v294) = ((((v388 ^ v385) >> 16) & 0x16 ^ 0x92848411) + (((v388 ^ v385) >> 16) & 0xE9) - 1) ^ 0x92848450;
  int v393 = ((v388 ^ v385) >> 16) ^ 0x9A;
  unsigned int v394 = (((2 * v393) & 0xFFFFFF7F) - v393 + 138327872) ^ 0x50BEB542;
  LODWORD(v294) = (v294 - ((2 * v294 + 1896307116) & 0x5A3F1FD0) - 1516028738) ^ dword_1002229C0[(v394
                                                                                                - ((2 * v394) & 0x9100330E)
                                                                                                - 809035385) ^ 0x97471BB8];
  HIDWORD(v65) = v294 ^ 0x15D1;
  LODWORD(v65) = v294 ^ 0xAE620000;
  int v395 = dword_100214A30[((v388 ^ v385) >> 24) ^ 0xB6];
  LODWORD(v294) = (v65 >> 16) - ((2 * (v65 >> 16)) & 0xDEEB3882);
  HIDWORD(v65) = v395 ^ 0xFFFFFFF9;
  LODWORD(v65) = v395 ^ 0x4A978100;
  int v396 = v390 ^ ((v65 >> 8) - ((2 * (v65 >> 8)) & 0x9773E484) + 1270477378) ^ (v392
                                                                             - ((2 * v392) & 0x1038C93A)
                                                                             + 161244381) ^ (v294 + 1869978689) ^ 0x84B0140D ^ v341;
  unsigned int v397 = v381 ^ 0xF2E2F2F3 ^ v396;
  LODWORD(STACK[0x364]) = v385;
  unsigned int v398 = v397 ^ v385;
  LODWORD(STACK[0x36C]) = v397;
  unsigned int v399 = v397 ^ v385 ^ 0x9C733666;
  unsigned int v400 = (BYTE1(v399) ^ 0x57 | 0x69B01E12) - (BYTE1(v399) ^ 0x57 | 0x964FE1ED) - 1773149715;
  int v401 = dword_100214A30[((v400 & 0x612000BB ^ 0xB70200AB) + (v400 & 0x8901F44 ^ 0x8981C01) - 1) ^ 0xD62A0251];
  HIDWORD(v65) = v401 ^ 0x9781F9;
  LODWORD(v65) = v401 ^ 0x4A000000;
  int v402 = (v65 >> 24) - ((2 * (v65 >> 24)) & 0xD76C9784) - 340374590;
  unsigned int v403 = ((BYTE2(v399) ^ 0xA7) - 251503324 + ((2 * (BYTE2(v399) ^ 0xA7) + 172) & 0x9A ^ 0x8FFABFFF)) ^ dword_1002229C0[((HIWORD(v399) & 0x3F) - BYTE2(v399) + (BYTE2(v399) | 0xBE7DD1C0) - 39584000) ^ 0xBC21D080];
  unsigned int v404 = v397 ^ v385 ^ 0xB629E64A;
  HIDWORD(v65) = v403 ^ 0x2A74;
  LODWORD(v65) = v403 ^ 0x7B030000;
  int v405 = dword_100218130[HIBYTE(v398) ^ 0x17];
  int v406 = (v65 >> 16) - ((2 * (v65 >> 16)) & 0x35B5B580);
  HIDWORD(v65) = v405 ^ 0x49;
  LODWORD(v65) = v405 ^ 0xC528A600;
  int v407 = (v65 >> 8) - ((2 * (v65 >> 8)) & 0x26379758) - 1826894932;
  int v408 = dword_100224320[(((2 * (v399 ^ 0x5C96C0E3)) | 0xE3E3AAD4)
  HIDWORD(v65) = v408 ^ 0x17D;
  LODWORD(v65) = v408 ^ 0xBA404C00;
  int v409 = (v65 >> 9) + 2130309094 - ((2 * (v65 >> 9)) & 0xFDF3E32C) + 432;
  LODWORD(v296) = v402 ^ v407 ^ v409 ^ v334 ^ v396 ^ (v406 + 450550464) ^ 0x809C2355 ^ (((((2 * v409) ^ 0xFDF3E32C)
                                                                                        - ((2 * ((2 * v409) ^ 0xFDF3E32C)) & 0x3F7E6B24)
                                                                                        + 532624787) & 0x32119686 ^ 0x7B909899)
                                                                                      - 1);
  int v410 = v296 ^ v388;
  int v411 = v296;
  LODWORD(STACK[0x328]) = v296;
  LODWORD(v296) = v296 ^ v388 ^ 0x8C948DB7;
  LODWORD(STACK[0x38C]) = v296;
  LODWORD(STACK[0x374]) = v296 ^ v404;
  unsigned int v412 = ((((v296 ^ v404) >> 24) ^ 0x3F)
  HIDWORD(v65) = v412 ^ 0xE6;
  LODWORD(v65) = v412 ^ 0xDDA78200;
  int v413 = (v65 >> 8) - ((2 * (v65 >> 8)) & 0x7AD16720) - 1117211760;
  int v414 = ((v296 ^ v404) >> 16) ^ 0x2C;
  int v415 = (v296 ^ v404);
  int v416 = dword_100218130[(((v414 - ((2 * v414) & 0x8A) + 380726085) & 0x3D5 ^ 0x4A201090)
                        + ((v414 - ((2 * v414) & 0x8A) + 380726085) & 0xC2A ^ 0x1C0809)
                        - 1) ^ 0x4A3C13C3];
  HIDWORD(v65) = v416 ^ 0xA649;
  LODWORD(v65) = v416 ^ 0xC5280000;
  int v417 = dword_100214A30[((unsigned __int16)(v296 ^ v404) >> 8) ^ 0x11];
  int v418 = (v65 >> 16) - ((2 * (v65 >> 16)) & 0x52C21FB6);
  HIDWORD(v65) = v417 ^ 0x9781F9;
  LODWORD(v65) = v417 ^ 0x4A000000;
  int v419 = (v418 - 1453256741) ^ dword_1002229C0[(((v296 ^ v404) & 0x10)
                                              + 142465280
                                              + (v415 ^ 0x14)
                                              - ((v415 ^ 0x14) & 0x10)) ^ 0x87DD938] ^ ((v65 >> 24)
                                                                                      - ((2 * (v65 >> 24)) & 0x9928C4AC)
                                                                                      - 862690730) ^ ((v415 ^ 0xDB) + 953387391 + ((2 * (v415 ^ 0xDB) + 428) & 0x150 ^ 0xFFF8E7FF)) ^ v413;
  int v420 = v419 ^ v397 ^ 0x4B9BE17B;
  LODWORD(v294) = v419 ^ v397;
  LODWORD(v293) = v420 ^ v410;
  LODWORD(STACK[0x350]) = v420 ^ v410;
  unsigned int v421 = v420 ^ v404;
  int v422 = dword_100224320[HIBYTE(v421) ^ 0x3D];
  HIDWORD(v65) = v422 ^ 0x17D;
  LODWORD(v65) = v422 ^ 0xBA404C00;
  int v423 = (v65 >> 9) - ((2 * (v65 >> 9)) & 0xDA312980) + 1830327488;
  LODWORD(v297) = (((2 * v423) ^ 0xDA312980) - ((2 * ((2 * v423) ^ 0xDA312980)) & 0x32C7E2CC) + 425980262) & 0x32119686 ^ 0x22010080;
  LODWORD(v297) = ((v297 | 0xEDEDD7FD) - (v297 | 0x12122802) + 303179778) ^ 0xF7418778;
  int v424 = (v297 - ((2 * v297) & 0x68B89B88) + 878464452) ^ v423;
  LODWORD(v297) = ((v421 & 0x60 ^ 0x241) + (v421 & 0x9F) - 1) ^ 0x248;
  unsigned int v425 = ((v421 & 4) + (v421 ^ 0xFFFFFF26) + (v421 | 0x7241A7FB) + 1) ^ 0x260227FB;
  HIDWORD(v65) = v424 ^ 0x85;
  LODWORD(v65) = v424 ^ 0x706C8E00;
  int v426 = dword_100224320[(((2 * (BYTE2(v421) ^ 0xC75790F4)) | 0x8C8DD32) - (BYTE2(v421) ^ 0xC75790F4) + 2073792871) ^ 0x4333FEAB];
  int v427 = (v65 >> 8) - ((2 * (v65 >> 8)) & 0xB120FB90);
  HIDWORD(v65) = v426 ^ 0x17D;
  LODWORD(v65) = v426 ^ 0xBA404C00;
  int v428 = (v65 >> 9) - ((2 * (v65 >> 9)) & 0x583B2558) - 1407348052;
  int v429 = (((2 * v428) ^ 0x583B2558) - ((2 * ((2 * v428) ^ 0x583B2558)) & 0x36B914E4) + 995920499) & 0x32119686 ^ 0x22100204;
  unsigned int v430 = (((((2 * v429) & 0x64000108) - v429 - 871236006) & 0xE00187B2 ^ 0x6020C1A3 | (((2 * v429) & 0x64000108)
                                                                                     - v429
                                                                                     - 871236006) & 0x1E10184C)
        - 1) ^ v428;
  int v431 = v421 ^ 0x45909902;
  LODWORD(STACK[0x348]) = v421 ^ 0x45909902;
  int v432 = BYTE1(v421);
  LOWORD(v429) = (v432 ^ 0x2D) - ((2 * (v432 ^ 0x2D)) & 0x19A) + 26061;
  int v433 = ((v429 & 0x46D ^ 0x247F6408) + (v429 & 0x392 ^ 0x10001181) - 1) ^ 0x347F708A;
  HIDWORD(v65) = v430 ^ 0xDAD0;
  LODWORD(v65) = v430 ^ 0x11A80000;
  int v434 = (v65 >> 16) - ((2 * (v65 >> 16)) & 0x4B931624) - 1513518318;
  int v435 = ((v432 ^ 0xE) - ((2 * (v432 ^ 0xE)) & 0x12) + 511721737) ^ 0x3E674001;
  int v436 = (v433 - ((2 * v433 + 1896307116) & 0x6EDC3134) + 804373872) ^ dword_1002229C0[(v435
                                                                                      - ((2 * v435) & 0x14800BC)
                                                                                      + 1186201694) ^ 0x6653015D];
  HIDWORD(v65) = v436 ^ 0x1382A3;
  LODWORD(v65) = v436 ^ 0x34000000;
  int v437 = (v427 - 661619256) ^ dword_1002229C0[(((2 * v425) | 0x34E8010A) - v425 - 443809925) ^ 0x4E3780B3];
  LODWORD(STACK[0x2F0]) = v419 ^ v411;
  LODWORD(v296) = v437 ^ v419 ^ v411 ^ (v297 - ((2 * v297 + 17258924) & 0x102536E) + 2122114701) ^ ((v65 >> 24)
                                                                                                  - ((2 * (v65 >> 24)) & 0xFAF76F1E)
                                                                                                  + 2105259919) ^ v434;
  LODWORD(STACK[0x2A8]) = v296;
  LODWORD(STACK[0x340]) = v419 ^ v397;
  LODWORD(v297) = v419 ^ v397 ^ 0x2D193AFD ^ v296;
  LODWORD(STACK[0x300]) = v297;
  LODWORD(v296) = v297 ^ v293;
  LODWORD(v297) = v297 ^ v293 ^ 0xE72A2984;
  LODWORD(STACK[0x2C8]) = v296;
  LODWORD(STACK[0x2F8]) = v297;
  LODWORD(v297) = v297 ^ v431;
  unsigned int v438 = (2 * ((v297 ^ 0xC2) & 0x1F) - (v297 ^ 0xC2) + 736) ^ 0x279;
  int v439 = dword_100218130[(((((v297 >> 8) & 0x9F ^ 0xF5290682) & 0x2B4 | (v297 >> 8) & 0x20) ^ 0x14C95131)
  HIDWORD(v65) = v439 ^ 0x28A649;
  LODWORD(v65) = v439 ^ 0xC5000000;
  int v440 = (v65 >> 24) - ((2 * (v65 >> 24)) & 0xFF72595E) + 2142842031;
  int v441 = v297 ^ 0x7677CD86;
  LODWORD(STACK[0x2E0]) = v297 ^ 0x7677CD86;
  unsigned int v442 = BYTE3(v297) ^ 0x3A;
  LODWORD(v297) = ((WORD1(v297) & 0x18) + (BYTE2(v297) ^ 0xFFFFFFFA) + (BYTE2(v297) | 0x10A6D9E7) + 1) ^ 0x40A6DDE7;
  int v443 = dword_100218130[v442];
  HIDWORD(v65) = v443 ^ 0x49;
  LODWORD(v65) = v443 ^ 0xC528A600;
  LODWORD(v297) = dword_100224320[((v297 | 0xA178886F) - (v297 | 0x5E877790) + 1585936272) ^ 0xF1788C9C];
  int v444 = v440 ^ dword_100218130[v438] ^ ((v65 >> 8) - 211312452 - ((2 * (v65 >> 8)) & 0xE6CF3A40) - 924);
  HIDWORD(v65) = v297 ^ 0x17D;
  LODWORD(v65) = v297 ^ 0xBA404C00;
  LODWORD(v297) = (v65 >> 9) - ((2 * (v65 >> 9)) & 0x7B14A98) + 64529740;
  int v445 = (((2 * v297) ^ 0x7B14A98) - ((2 * ((2 * v297) ^ 0x7B14A98)) & 0x1159C5C) + 9096750) & 0x32119686 ^ 0x30008206;
  LODWORD(v297) = (((((2 * v445) | 0x4D58D15A) - v445 - 648833197) & 0xA4E09C06 ^ 0xA0E09443)
                 + ((((2 * v445) | 0x4D58D15A) - v445 - 648833197) & 0x5A1F63B8 ^ 0x2086099)
                 - 2) ^ v297;
  HIDWORD(v65) = v297 ^ 0xAAB8;
  LODWORD(v65) = v297 ^ 0xB6180000;
  int v446 = v444 ^ ((v65 >> 16) - ((2 * (v65 >> 16)) & 0xDA80FAFA) + 1832942973);
  LODWORD(STACK[0x258]) = v446;
  int v447 = v446 ^ v294 ^ 0x7188C5D4;
  LODWORD(STACK[0x2A0]) = v447;
  LODWORD(v297) = v447 ^ v296 ^ 0x86BBD359;
  LODWORD(STACK[0x2C4]) = v297;
  unsigned int v448 = v441 ^ v297;
  LODWORD(STACK[0x250]) = dword_100224320[(((v441 ^ v297) ^ 7 | 0x7EEAEF85)
  LODWORD(STACK[0x270]) = dword_100218130[((v441 ^ v297) >> 24) ^ 0x47];
  LODWORD(STACK[0x298]) = v441 ^ v297;
  LODWORD(v297) = (((unsigned __int16)(v441 ^ v297) >> 8) ^ 0x51)
  LODWORD(STACK[0x280]) = dword_1002229C0[((HIWORD(v448) & 0xE6 ^ 0xE1877CFD) - (HIWORD(v448) & 0x19)) ^ 0xE1877C34];
  unint64_t v449 = *(void *)(STACK[0x428] + 8);
  STACK[0x378] = v449;
  LODWORD(STACK[0x23C]) = dword_100214A30[((v297 & 0xC2231916 ^ 0x8000902)
  *(void *)(STACK[0x3B0] + _Block_object_dispose(va, 8) = v449 ^ 0x9696969696969696LL;
  HIDWORD(v65) = LODWORD(STACK[0x438]) ^ 0x17D;
  LODWORD(v65) = LODWORD(STACK[0x438]) ^ 0xBA404C00;
  int v450 = (v65 >> 9) - 772009860 + (~(2 * (v65 >> 9)) | 0x5C07DF09);
  unsigned int v451 = ((2 * v450) ^ 0xA3F820F6) - ((2 * ((2 * v450) ^ 0xA3F820F6)) & 0xE48C804) + 1730438147;
  unsigned int v452 = ((((v451 & 0x32119686 ^ 0x12109602)
          + (v451 & 0x2118606 ^ 0x4DA1686D)
          - ((v451 & 0x32119686 ^ 0x12109602) & 0x2118606)) ^ 0xCAC80B20)
        - 1) ^ v450;
  HIDWORD(v65) = v452 ^ 0x11F0B7;
  LODWORD(v65) = v452 ^ 0x65000000;
  int v453 = (v65 >> 24) - ((2 * (v65 >> 24)) & 0x181BA272) - 1945251527;
  HIDWORD(v65) = LODWORD(STACK[0x440]) ^ 0x17D;
  LODWORD(v65) = LODWORD(STACK[0x440]) ^ 0xBA404C00;
  int v454 = (v65 >> 9) - ((2 * (v65 >> 9)) & 0x271A8C58) - 1819458004;
  int v455 = ((2 * v454) ^ 0x271A8C58) - 2 * (((2 * v454) ^ 0x271A8C58) & 0x11BCF3F6 ^ (2 * v454) & 4) + 1371337714;
  int v456 = ((v455 & 0x10011682 ^ 0x104B6469 | v455 & 0x22108004) - 1) ^ v454;
  HIDWORD(v65) = v456 ^ 0x2744;
  LODWORD(v65) = v456 ^ 0x92520000;
  int v457 = (v65 >> 16) - ((2 * (v65 >> 16)) & 0x9265E3C8) + 1228075492;
  HIDWORD(v65) = LODWORD(STACK[0x458]) ^ 0x17D;
  LODWORD(v65) = LODWORD(STACK[0x458]) ^ 0xBA404C00;
  int v458 = (v65 >> 9) - ((2 * (v65 >> 9)) & 0x5CA9644E) - 1370181081;
  unsigned int v459 = (((2 * v458) ^ 0x5CA9644E) - ((2 * ((2 * v458) ^ 0x5CA9644E)) & 0x2B3C3C40) + 362683937) & 0x32119686 ^ 0x8388338E;
  LODWORD(v449) = v458 ^ ((v459 | 0x3F466484) - (v459 | 0xB99B7B) + 12163963) ^ v457 ^ (LODWORD(STACK[0x450])
                                                                                      - ((2 * LODWORD(STACK[0x450])) & 0x58C6A7DA)
                                                                                      - 1402776595);
  int v460 = STACK[0x3CC];
  unsigned int v461 = LODWORD(STACK[0x3CC]) ^ 0xF582166D;
  LODWORD(v449) = v449 ^ v461 ^ 0xAECE0E44 ^ v453;
  LODWORD(STACK[0x4F0]) = v449;
  int v462 = LODWORD(STACK[0x460]) ^ 0x11B49E4;
  LODWORD(STACK[0x4E0]) = v462;
  int v463 = STACK[0x540];
  LODWORD(STACK[0x440]) = (LODWORD(STACK[0x540]) ^ 0xF57284E2 ^ LODWORD(STACK[0x620]))
                        - ((2 * (LODWORD(STACK[0x540]) ^ 0xF57284E2 ^ LODWORD(STACK[0x620])) + 1608497226) & 0x67F6FC2C)
                        - 1544857029;
  int v464 = v460 ^ LODWORD(STACK[0x640]);
  int v465 = v460;
  int v466 = v449 ^ v464;
  int v467 = v449 ^ v464 ^ v462;
  int v468 = v467 ^ 0x107E7131;
  unsigned int v469 = v467 ^ 0xED43CF8A;
  int v470 = STACK[0x550];
  int v471 = LODWORD(STACK[0x550]) ^ 0x3CC8C702;
  unsigned int v472 = ((2 * (v469 + v471)) & 0x757A5E3E) + ((v469 + v471) ^ 0xBABD2F1F);
  LODWORD(STACK[0x460]) = v472 - ((2 * v472 + 833385132) & 0x7BD19B58) + 1455359746;
  int v473 = STACK[0x520];
  int v474 = LODWORD(STACK[0x520]) ^ 0x37BCDACA;
  LODWORD(v449) = STACK[0x560];
  LODWORD(v290) = (LODWORD(STACK[0x560]) ^ 0xAE7A65B8)
                + v474
                + 1
                - ((2 * ((LODWORD(STACK[0x560]) ^ 0xAE7A65B8) + v474 + 1)) & 0x67A3805A)
                + 869384237;
  LODWORD(v292) = STACK[0x5B8];
  LODWORD(v334) = (LODWORD(STACK[0x5B8]) ^ 0x89FBC02D) + 1299289891;
  int v475 = v334 ^ 0x7F7DEEFD;
  LODWORD(v289) = (2 * v334) & 0xFEFBDDFA;
  int v476 = STACK[0x448];
  unsigned int v477 = LODWORD(STACK[0x448]) ^ 0xD00BAB6C;
  LODWORD(v334) = ((2 * ((v463 ^ 0xC425A6AD) + v477 + 1)) & 0xEDFCFDCE)
                + (((v463 ^ 0xC425A6AD) + v477 + 1) ^ 0xF6FE7EE7);
  int v478 = STACK[0x3D0];
  LODWORD(v341) = LODWORD(STACK[0x3D0]) ^ 0x1177554A;
  int v479 = STACK[0x530];
  int v480 = ((2 * ((LODWORD(STACK[0x530]) ^ 0xE7B280A2) + v341 + 1)) & 0xEFAABFBC)
       + (((LODWORD(STACK[0x530]) ^ 0xE7B280A2) + v341 + 1) ^ 0x77D55FDE);
  LODWORD(STACK[0x428]) = v334 - ((2 * v334 - 434800294) & 0xF08CBFA2) - 347005826;
  LODWORD(v293) = STACK[0x3D4];
  LODWORD(v334) = LODWORD(STACK[0x3D4]) ^ 0xAE7525A1;
  LODWORD(STACK[0x438]) = (LODWORD(STACK[0x650]) ^ 0x8FC8B106 ^ v334)
                        - ((2 * (LODWORD(STACK[0x650]) ^ 0x8FC8B106 ^ v334) - 772342212) & 0xE25B886E)
                        + 1512653653;
  int v481 = v475 + v289 - 2138959613 + v474;
  LODWORD(STACK[0x3A4]) = v466 ^ 0x21404329;
  LODWORD(STACK[0x458]) = v480 - ((2 * v480 + 2024904346) & 0x4BECB2C8) + 575612081;
  LODWORD(STACK[0x510]) = (LODWORD(STACK[0x5E0]) ^ 0x945F5CDD ^ v466 ^ 0x21404329)
                        - ((2 * (LODWORD(STACK[0x5E0]) ^ 0x945F5CDD ^ v466 ^ 0x21404329) + 13834616) & 0x7186C2C)
                        + 1207288530;
  int v482 = v449;
  LODWORD(STACK[0x4D0]) = (v449 ^ 0xB9302A7D ^ LODWORD(STACK[0x468]))
                        - ((2 * (v449 ^ 0xB9302A7D ^ LODWORD(STACK[0x468])) + 843590444) & 0x51BFD2FA)
                        + 1107558163;
  int v483 = LODWORD(STACK[0x5E8]) ^ 0x46B31D10 ^ v468;
  LODWORD(v76) = (v464 ^ 0xA2FF332 ^ v483) - 1200248609 + (~(2 * (v464 ^ 0xA2FF332 ^ v483) - 1181361762) | 0x48AA87E1);
  int v484 = ((2 * (v341 + v477)) & 0xF83BEFEC) + ((v341 + v477) ^ 0xFC1DF7F6);
  LODWORD(v289) = ((2 * ((v465 ^ 0xFE079DA0) + (v464 ^ 0x6E12803) + 1)) & 0xF7D7EDEE)
                + (((v465 ^ 0xFE079DA0) + (v464 ^ 0x6E12803) + 1) ^ 0xFBEBF6F7);
  unsigned int v485 = v484 + 718545656 + (~(2 * v484 + 299194102) | 0xBC2D1107);
  LODWORD(STACK[0x450]) = v289 - ((2 * v289 + 587643580) & 0x95992D6A) + 1548743699;
  int v486 = ((2 * ((v293 ^ 0x280F7D66) + (LODWORD(STACK[0x5B0]) ^ 0x59EAE81B))) & 0xDFF7773A)
       + (((v293 ^ 0x280F7D66) + (LODWORD(STACK[0x5B0]) ^ 0x59EAE81B)) ^ 0xEFFBBB9D);
  LODWORD(v293) = 1595914182 - v486 - ((708260798 - 2 * v486) & 0x94083BCE);
  LODWORD(v341) = v470;
  int v487 = STACK[0x430];
  LODWORD(v449) = (v470 ^ 0xE65D7ADF ^ v487) - ((2 * (v470 ^ 0xE65D7ADF ^ v487) - 1454712364) & 0x88DC968C) - 1726760912;
  int v488 = STACK[0x470];
  unsigned int v489 = ((v471 + 813040745) ^ 0x7AFDFD73)
       + ((2 * (v471 + 813040745)) & 0xF5FBFAE6)
       - 2063465843
       + (LODWORD(STACK[0x470]) ^ 0xF21452BD);
  LODWORD(v297) = v461 ^ v292;
  int v490 = v292 ^ v449 ^ v293 ^ 0xF589E5E7;
  int v491 = v341 ^ 0x99670CF0;
  LODWORD(v289) = LODWORD(STACK[0x5B0]) ^ 0xDDC241A9;
  LODWORD(STACK[0x290]) = v485;
  LODWORD(STACK[0x28C]) = (_DWORD)v76;
  unsigned int v492 = v76 ^ v485;
  LODWORD(STACK[0x5E0]) = v482 ^ 0xD5AD33F5 ^ v492;
  LODWORD(STACK[0x550]) = v463 ^ 0xBFF2F0E0 ^ v492;
  LODWORD(STACK[0x540]) = v289 ^ v492;
  LODWORD(STACK[0x500]) = v479 ^ 0x9C65D6EF ^ v492;
  unsigned int v493 = v473 ^ 0xE3C51358;
  unsigned int v494 = v476 ^ 0xBC0E17E9;
  LODWORD(STACK[0x368]) = v478 ^ 0x1455DEE4;
  LODWORD(STACK[0x238]) = v481;
  unsigned int v495 = v481 - ((2 * v481) & 0xE659907A) + 1932314685;
  int v496 = v489 - ((2 * v489) & 0x6804B654) + 872569642;
  LODWORD(STACK[0x448]) = v496;
  int v497 = v496 ^ v495;
  LODWORD(STACK[0x398]) = v496 ^ v495 ^ 0x6DBA159A ^ v334;
  LODWORD(STACK[0x5B8]) = v465 ^ 0xB7C6184D;
  LODWORD(STACK[0x5B0]) = v464 ^ 0xB0DF5211;
  LODWORD(STACK[0x520]) = v495;
  LODWORD(STACK[0x530]) = v495 ^ v293;
  int v498 = v495 ^ v293 ^ 0xC4156B61 ^ v468;
  LODWORD(STACK[0x3D4]) = v290 ^ 0xF24754BA;
  int v499 = v498 + (v290 ^ 0xF24754BA);
  int v500 = 2 * ((v498 & (v290 ^ 0xF24754BA)) - ((2 * (v498 & (v290 ^ 0xF24754BA))) & 0x4791D214)) + 1200738836;
  unsigned int v501 = 2 * &unk_10023C020;
  LODWORD(STACK[0x470]) = v501;
  unsigned int v502 = (&unk_10023C020 ^ 0x7B178F59) - 2065141593 + (v501 & 0xF62F1EA0);
  unsigned int v503 = (v499 ^ 0x5FFFF8BF)
       + ((2 * v499) & 0xBFFFF17E)
       + (v500 ^ 0x4F918335)
       + ((2 * v500) & 0xEFFF5DBC ^ 0x70DCFBD7)
       + 1;
  unsigned int v504 = v503 - ((2 * v503 + 805268544) & 0xE0BE6FFE) - 2007044577;
  int v505 = LODWORD(STACK[0x3F8]) ^ v497;
  LODWORD(STACK[0x294]) = v290 ^ 0x3FD2739A;
  int v506 = v495 ^ v293 ^ v290 ^ 0x3FD2739A;
  int v507 = v483 ^ v506;
  unsigned int v508 = (v502 ^ 0x4FFF3DFF) + ((2 * v502) & 0x9FFE7BFE) - 1342127615 + (v505 ^ 0xD5B2538E ^ v507);
  unsigned int v509 = LODWORD(STACK[0x5C8]) ^ 0xCD3790A5;
  int v510 = LODWORD(STACK[0x418]) ^ 0x64EF9368;
  int v511 = LODWORD(STACK[0x4E0]) ^ 0x7088A422;
  LODWORD(v290) = ((2 * v508) & 0xE6F7ABFA)
                + (v508 ^ 0xF37BD5FD)
                - ((2 * (((2 * v508) & 0xE6F7ABFA) + (v508 ^ 0xF37BD5FD)) - 1273587382) & 0xE9C3FC06)
                - 823309656;
  int v512 = v507 ^ 0x82C1E34;
  int v513 = LODWORD(STACK[0x420]) ^ 0x66EE3EEE;
  int v514 = STACK[0x428];
  int v515 = LODWORD(STACK[0x458]) ^ LODWORD(STACK[0x428]);
  LODWORD(STACK[0x4C0]) = v494 ^ v515;
  unsigned int v516 = v488 ^ 0x9E11EE38 ^ v515;
  int v517 = v510 ^ v515;
  int v518 = v513 ^ v515;
  int v519 = LODWORD(STACK[0x400]) ^ v497;
  int v520 = v290 ^ v519;
  unsigned int v521 = v519 ^ 0xD909CF34;
  unsigned int v522 = v497 ^ 0xA3BF0E85 ^ LODWORD(STACK[0x3F0]);
  LODWORD(v76) = LODWORD(STACK[0x5D8]) ^ v293 ^ 0x45046C00;
  unsigned int v523 = LODWORD(STACK[0x47C]) ^ 0xE5EC147A;
  int v524 = LODWORD(STACK[0x658]) ^ v293 ^ 0xFFD1C21E;
  LODWORD(STACK[0x468]) = v293;
  LODWORD(v293) = LODWORD(STACK[0x648]) ^ v293 ^ 0xBD608A55;
  int v525 = v297 ^ 0x2F28EBA7;
  LODWORD(STACK[0x288]) = v449;
  int v526 = v76 ^ v297 ^ 0x2F28EBA7 ^ v449;
  int v527 = v524 ^ v297 ^ 0x2F28EBA7 ^ v449;
  int v528 = v293 ^ v297 ^ 0x2F28EBA7 ^ v449;
  LODWORD(STACK[0x29C]) = v297;
  int v529 = v490 ^ v297;
  int v530 = (1599557377 - (v520 | 0x7FFFFFFE)) & 0x48000301;
  LODWORD(STACK[0x2D8]) = v530;
  BOOL v531 = v530 == 1207960321;
  if (v530 == 1207960321) {
    int v532 = v529;
  }
  else {
    int v532 = v526;
  }
  if (v530 == 1207960321) {
    int v533 = v527;
  }
  else {
    int v533 = v529;
  }
  LODWORD(STACK[0x4A0]) = v533;
  if (v531) {
    int v534 = v526;
  }
  else {
    int v534 = v528;
  }
  LODWORD(STACK[0x3B0]) = v534;
  if (v531) {
    int v535 = v528;
  }
  else {
    int v535 = v527;
  }
  LODWORD(STACK[0x498]) = v535;
  unsigned int v536 = LODWORD(STACK[0x5C0]) ^ 0xBAF02AFF;
  unsigned int v537 = LODWORD(STACK[0x5D0]) ^ 0xB29F58A3;
  int v538 = LODWORD(STACK[0x440]) ^ v514;
  LODWORD(STACK[0x658]) = v538;
  int v539 = v491 ^ v538;
  int v540 = v536 ^ v538;
  if (v531) {
    int v541 = v509 ^ v538;
  }
  else {
    int v541 = v539;
  }
  LODWORD(STACK[0x5D8]) = v541;
  if (v531) {
    int v542 = v539;
  }
  else {
    int v542 = v540;
  }
  LODWORD(STACK[0x480]) = v542;
  int v543 = v537 ^ v538;
  if (v531) {
    int v544 = v537 ^ v538;
  }
  else {
    int v544 = v509 ^ v538;
  }
  LODWORD(STACK[0x47C]) = v544;
  if (v531) {
    int v545 = v540;
  }
  else {
    int v545 = v543;
  }
  LODWORD(STACK[0x5D0]) = v545;
  int v546 = LODWORD(STACK[0x570]) ^ 0x32BFADAF;
  unsigned int v547 = LODWORD(STACK[0x590]) ^ 0xB546BB22;
  int v548 = LODWORD(STACK[0x5A0]) ^ 0x4B3DC053;
  int v549 = LODWORD(STACK[0x580]) ^ 0x59007605;
  LODWORD(STACK[0x284]) = v525;
  int v550 = STACK[0x4D0];
  int v551 = v525 ^ LODWORD(STACK[0x4D0]);
  LODWORD(STACK[0x648]) = v551;
  int v552 = v546 ^ v551;
  int v553 = v547 ^ v551;
  int v554 = v548 ^ v551;
  if (v531) {
    int v555 = v553;
  }
  else {
    int v555 = v552;
  }
  LODWORD(STACK[0x560]) = v555;
  if (v531) {
    int v556 = v554;
  }
  else {
    int v556 = v553;
  }
  LODWORD(STACK[0x5C8]) = v556;
  if (v531) {
    int v557 = v549 ^ v551;
  }
  else {
    int v557 = v554;
  }
  LODWORD(STACK[0x39C]) = v557;
  if (v531) {
    int v558 = v552;
  }
  else {
    int v558 = v549 ^ v551;
  }
  LODWORD(STACK[0x5A0]) = v558;
  int v559 = LODWORD(STACK[0x438]) ^ v495;
  int v560 = v493 ^ v559;
  int v561 = v523 ^ v559;
  int v562 = LODWORD(STACK[0x650]) ^ 0x2234DFAC ^ v559;
  if (v531) {
    unsigned int v563 = v523 ^ v559;
  }
  else {
    unsigned int v563 = v487 ^ 0xF1138BB0 ^ v559;
  }
  LODWORD(STACK[0x3AC]) = v563;
  if (v531) {
    unsigned int v564 = v487 ^ 0xF1138BB0 ^ v559;
  }
  else {
    unsigned int v564 = v562;
  }
  LODWORD(STACK[0x3F8]) = v564;
  if (v531) {
    int v565 = v562;
  }
  else {
    int v565 = v560;
  }
  if (v531) {
    int v566 = v560;
  }
  else {
    int v566 = v561;
  }
  LODWORD(STACK[0x3F0]) = v566;
  LODWORD(STACK[0x3D0]) = v497;
  unsigned int v567 = LODWORD(STACK[0x3E4]) ^ 0xC8125D85;
  if (v531) {
    int v568 = v521;
  }
  else {
    int v568 = v505 ^ 0x59012D1A;
  }
  if (v531) {
    int v569 = v497 ^ 0x36FE0A6 ^ LODWORD(STACK[0x40C]);
  }
  else {
    int v569 = v521;
  }
  if (v531) {
    unsigned int v570 = v497 ^ 0x9214C23A ^ LODWORD(STACK[0x410]);
  }
  else {
    unsigned int v570 = v497 ^ 0x36FE0A6 ^ LODWORD(STACK[0x40C]);
  }
  if (v531) {
    unsigned int v571 = v505 ^ 0x59012D1A;
  }
  else {
    unsigned int v571 = v497 ^ 0x9214C23A ^ LODWORD(STACK[0x410]);
  }
  int v572 = LODWORD(STACK[0x3E0]) ^ 0x2E905D8D;
  unsigned int v573 = v497 ^ 0xDA976F12 ^ LODWORD(STACK[0x620]);
  unsigned int v574 = v497 ^ 0xBD9C9CCE ^ LODWORD(STACK[0x640]);
  unsigned int v575 = STACK[0x398];
  if (v531) {
    unsigned int v576 = v522;
  }
  else {
    unsigned int v576 = STACK[0x398];
  }
  if (v531) {
    unsigned int v577 = v497 ^ 0xDA976F12 ^ LODWORD(STACK[0x620]);
  }
  else {
    unsigned int v577 = v522;
  }
  LODWORD(STACK[0x640]) = v577;
  if (v531)
  {
    unsigned int v573 = v574;
    unsigned int v578 = v575;
  }

  else
  {
    unsigned int v578 = v574;
  }

  LODWORD(STACK[0x580]) = v578;
  int v579 = LODWORD(STACK[0x5E8]) ^ 0x68A935D1;
  LODWORD(STACK[0x224]) = v506;
  int v580 = v506 ^ 0x6780A0CF ^ LODWORD(STACK[0x3A4]);
  int v581 = v506 ^ 0x29F6FCBC ^ LODWORD(STACK[0x4F0]);
  if (v531) {
    int v582 = v506 ^ 0x6780A0CF ^ LODWORD(STACK[0x3A4]);
  }
  else {
    int v582 = v504;
  }
  LODWORD(STACK[0x4F0]) = v582;
  if (v531) {
    int v583 = v581;
  }
  else {
    int v583 = v580;
  }
  LODWORD(STACK[0x398]) = v583;
  if (v531) {
    unsigned int v584 = v504;
  }
  else {
    unsigned int v584 = v512;
  }
  if (v531) {
    int v585 = v512;
  }
  else {
    int v585 = v581;
  }
  int v586 = LODWORD(STACK[0x460]) ^ LODWORD(STACK[0x450]);
  int v587 = LODWORD(STACK[0x368]) ^ v586;
  int v588 = LODWORD(STACK[0x510]) ^ v550;
  int v589 = LODWORD(STACK[0x5B8]) ^ v588;
  int v590 = LODWORD(STACK[0x5B0]) ^ v588;
  int v591 = v511 ^ v588;
  LODWORD(STACK[0x260]) = v587;
  if (v531) {
    int v587 = v567 ^ v586;
  }
  LODWORD(STACK[0x3A4]) = v587;
  LODWORD(STACK[0x25C]) = v572 ^ v586;
  if (v531) {
    int v592 = v572 ^ v586;
  }
  else {
    int v592 = v567 ^ v586;
  }
  LODWORD(STACK[0x274]) = v592;
  int v593 = v579 ^ v588;
  if (v531) {
    int v594 = STACK[0x5E0];
  }
  else {
    int v594 = STACK[0x500];
  }
  if (v531) {
    int v595 = STACK[0x540];
  }
  else {
    int v595 = STACK[0x550];
  }
  LODWORD(STACK[0x3E4]) = v516;
  LODWORD(STACK[0x35C]) = v518;
  if (v531) {
    unsigned int v596 = v516;
  }
  else {
    unsigned int v596 = v518;
  }
  LODWORD(STACK[0x3E0]) = v517;
  if (v531) {
    int v597 = v517;
  }
  else {
    int v597 = STACK[0x4C0];
  }
  LODWORD(STACK[0x254]) = v589;
  LODWORD(STACK[0x248]) = v590;
  if (v531) {
    int v598 = v589;
  }
  else {
    int v598 = v590;
  }
  LODWORD(STACK[0x244]) = v591;
  LODWORD(STACK[0x240]) = v593;
  if (v531) {
    int v599 = v591;
  }
  else {
    int v599 = v593;
  }
  LODWORD(STACK[0x5E8]) = v520;
  if ((v520 & 2) != 0) {
    unsigned int v600 = v576;
  }
  else {
    unsigned int v600 = v573;
  }
  if ((v520 & 2) != 0) {
    unsigned int v601 = v573;
  }
  else {
    unsigned int v601 = v576;
  }
  LODWORD(STACK[0x310]) = v601;
  LODWORD(STACK[0x2B8]) = v568;
  LODWORD(STACK[0x27C]) = v570;
  if ((v520 & 2) != 0) {
    unsigned int v602 = v568;
  }
  else {
    unsigned int v602 = v570;
  }
  LODWORD(STACK[0x4E0]) = v602;
  LODWORD(STACK[0x2D0]) = v602 ^ 0x74C0575F;
  unsigned int v603 = (v602 ^ 0x74C0575F) - ((2 * (v602 ^ 0x74C0575F) + 937308564) & 0xCC23074C) - 2113889168;
  LODWORD(STACK[0x318]) = v569;
  LODWORD(STACK[0x2E8]) = v571;
  if ((v520 & 2) != 0) {
    unsigned int v604 = v571;
  }
  else {
    unsigned int v604 = v569;
  }
  LODWORD(STACK[0x620]) = v604;
  LODWORD(STACK[0x430]) = v600;
  int v605 = (v600 ^ 0x531121B5) + (v604 ^ 0x12D1D4F9 ^ v603) + 1;
  int v606 = 2 * (((2 * v605) & 0x57EBF7D2) + (v605 ^ 0x6BF5FBE9)) + 672401454;
  unint64_t v607 = 0xB3D5C9433319E527LL * STACK[0x378]
       - ((0x67AB92866633CA4ELL * STACK[0x378]) & 0xD5C30D44C87E49AELL)
       - 0x151E795D9BC0DB29LL;
  unint64_t v608 = 0xB3D5C9433319E527LL * STACK[0x3D8]
       - ((0x67AB92866633CA4ELL * STACK[0x3D8]) & 0xA815AD5BC07EA816LL)
       - 0x2BF529521FC0ABF5LL;
  unint64_t v609 = ((2 * v608) & 0xDBFE3FABFB3B7DFELL ^ 0x1B3A2203212130BCLL) + (v608 ^ 0x7062EEF46D0F27A1LL);
  unint64_t v610 = (((v609 + 0x1200E02A02624101LL) >> 32) ^ 0xB33D37FBFDBFFFDBLL)
       + v609
       + (((v609 + 0x1200E02A02624101LL) >> 31) & 0x1FB7FFFB6LL);
  unint64_t v611 = (((v610 + 0x5EC3A82E04A24126LL) >> 16) ^ 0xFFEFBEEEECB9EE63LL)
       + v610
       + (((v610 + 0x5EC3A82E04A24126LL) >> 15) & 0x17DDDD973DCC6LL);
  unint64_t v612 = (((v611 + 0x5ED3E93F17E852C3LL) >> 8) ^ 0xFF77BF6D6EE6FFAFLL)
       + v611
       + (((v611 + 0x5ED3E93F17E852C3LL) >> 7) & 0xEF7EDADDCDFF5ELL);
  STACK[0x5C0] = v612;
  unint64_t v613 = v612 - ((2 * v612 - 0xD5B8AFD293EECC4LL) & 0xCAA1295F5A144546LL) + 0x5EA2CF31186AAC41LL;
  unint64_t v614 = ((2 * (v613 ^ v608)) & 0xFF7F3E5FD3BFFF3ELL ^ 0x62340404922AED10LL) + (v613 ^ v608 ^ 0xCEE5DD2DA4EA8937LL);
  unint64_t v615 = (((v614 + 0x4060D016200061LL) >> 32) ^ 0xD3F979F9FFF77FBFLL)
       + v614
       + (((v614 + 0x4060D016200061LL) >> 31) & 0x1FFEEFF7ELL);
  unint64_t v616 = (((v615 + 0x2C46E6D6162880A2LL) >> 16) ^ 0x3F679FE6CBDDFDBFLL)
       + v615
       + (((v615 + 0x2C46E6D6162880A2LL) >> 15) & 0x13FCD97BBFB7ELL);
  unint64_t v617 = (((v616 - 0x1320B910B5B57D1DLL) >> 8) ^ 0xDFF55FC9F7FAF6B5LL)
       + v616
       + (((v616 - 0x1320B910B5B57D1DLL) >> 7) & 0x1EABF93EFF5ED6ALL);
  STACK[0x590] = v617;
  uint64_t v618 = v617 - ((2 * v617 + 0x4DBFEFAA295D8570LL) & 0x7510B9AC02A85B9CLL) - 0x1E97AB54E9FD0F7ALL;
  unint64_t v619 = ((2 * (v618 ^ v608)) & 0xEFBEFFF77CBCDFACLL ^ 0xCD0414F74094D388LL) + (v618 ^ v608 ^ 0x195DF5805F351613LL);
  unint64_t v620 = (((v619 - 0x77DF7FFBBE5E6FD6LL) >> 32) ^ 0xFFFF779E66BDDFF7LL)
       + v619
       + (((v619 - 0x77DF7FFBBE5E6FD6LL) >> 31) & 0xCD7BBFEE);
  unint64_t v621 = (((v620 - 0x77DEF79A251C4FCDLL) >> 16) ^ 0xFE7DAB2FEDEF7CEFLL)
       + v620
       + (((v620 - 0x77DEF79A251C4FCDLL) >> 15) & 0x1565FDBDEF9DELL);
  unint64_t v622 = (((v621 - 0x765CA2CA130BCCBCLL) >> 8) ^ 0xFFB27F579D3FFFFFLL)
       + v621
       + (((v621 - 0x765CA2CA130BCCBCLL) >> 7) & 0x164FEAF3A7FFFFELL);
  STACK[0x3D8] = v622;
  unint64_t v623 = v622 - ((2 * v622 + 0x47CDDD1C2426D39ELL) & 0xB249947036624560LL) - 0x2F44739D2BB7381LL;
  unint64_t v624 = ((2 * ((v607 ^ 0xB3C54C9A7F0E0667LL ^ v623) + 1)) & 0x70BDBFFFFDDB5BFELL)
       + (((v607 ^ 0xB3C54C9A7F0E0667LL ^ v623) + 1) ^ 0xB85EDFFFFEEDADFFLL);
  unint64_t v625 = (((v624 + 0x47A1200001125201LL) >> 32) ^ 0x7FFEDF47DFCFCF4FLL)
       + v624
       + (((v624 + 0x47A1200001125201LL) >> 31) & 0x1BF9F9E9ELL);
  unint64_t v626 = (((v625 - 0x385DBF47DEBD7D4ELL) >> 16) ^ 0x6E0FEFF92EADEBFALL)
       + v625
       + (((v625 - 0x385DBF47DEBD7D4ELL) >> 15) & 0x1DFF25D5BD7F4LL);
  unint64_t v627 = (((v626 + 0x599250BEF29496B8LL) >> 8) ^ 0xCB775FFEB6B835F7LL)
       + v626
       + (((v626 + 0x599250BEF29496B8LL) >> 7) & 0xEEBFFD6D706BEELL);
  STACK[0x230] = v627;
  uint64_t v628 = v627 - ((2 * v627 + 0x502202DFFC772E96LL) & 0x57034E908EB60DC4LL) + 0x5392A8B845969E2DLL;
  unint64_t v629 = ((2 * ((v607 ^ 0x416021EA23642235LL ^ v628) + 1)) & 0xFFD7F2FE5FDCFEB0LL)
       + (((v607 ^ 0x416021EA23642235LL ^ v628) + 1) ^ 0xFFEBF97F2FEE7F58LL);
  unint64_t v630 = (((v629 + 0x140680D01180A8LL) >> 32) ^ 0x6BFCF1B7FF771FE5LL)
       + v629
       + (((v629 + 0x140680D01180A8LL) >> 31) & 0x1FEEE3FCALL);
  unint64_t v631 = (((v630 - 0x6BE8EB372F659F3DLL) >> 16) ^ 0xFDF37EF3D0EF6BEFLL)
       + v630
       + (((v630 - 0x6BE8EB372F659F3DLL) >> 15) & 0xFDE7A1DED7DELL);
  unint64_t v632 = (((v631 - 0x69DC6A2B00550B2CLL) >> 8) ^ 0x5D7F4BFD9F77EFC2LL)
       + v631
       + (((v631 - 0x69DC6A2B00550B2CLL) >> 7) & 0xFE97FB3EEFDF84LL);
  STACK[0x228] = v632;
  uint64_t v633 = v632 - ((2 * v632 + 0x2534B50E45247738LL) & 0x58A4B02732830A42LL) + 0x7EECB29ABBD3C0BDLL;
  unint64_t v634 = ((2 * ((v607 ^ 0xC6B3DEB1FD7EA1F6LL ^ v633) + 1)) & 0xFFFEDB3FDBFAE27CLL)
       + (((v607 ^ 0xC6B3DEB1FD7EA1F6LL ^ v633) + 1) ^ 0xFFFF6D9FEDFD713ELL);
  unint64_t v635 = (((v634 + 0x926012028EC2LL) >> 32) ^ 0xFE5F4DFFFD3BFBDFLL)
       + v634
       + (((v634 + 0x926012028EC2LL) >> 31) & 0x1FA77F7BELL);
  unint64_t v636 = (((v635 + 0x1A1446014C692E3LL) >> 16) ^ 0xAB7E5FFBBDCCF5B7LL)
       + v635
       + (((v635 + 0x1A1446014C692E3LL) >> 15) & 0xBFF77B99EB6ELL);
  unint64_t v637 = ((v636 + 0x5622E46456F99D2CLL) >> 7) & 0x1FE773F36DAFBDCLL;
  unint64_t v638 = (((v636 + 0x5622E46456F99D2CLL) >> 8) ^ 0x2DFF3B9F9B6D7DEELL) + v636;
  STACK[0x218] = v638 + v637;
  uint64_t v639 = v638
       + v637
       - 2 * ((v638 + v637 + 0x4219B9747DEB55C8LL) & 0x5924CA381B3122B2LL ^ v638 & 2)
       - 0x64C17C5366E38788LL;
  LODWORD(v63_Block_object_dispose(va, 8) = v618 ^ v613 ^ v623 ^ v628 ^ (v632 - ((2 * v632 + 1160017720) & 0x32830A42) - 1143750467);
  LOBYTE(v61_Block_object_dispose(va, 8) = (v639 & 0x12 ^ 0xD1) - (v639 & 9) + 12;
  unint64_t v640 = ((((v639 ^ 0xE4F426CD7AC3249ELL) >> (v618 ^ 0xCDu))
  unint64_t v641 = (v639 ^ 0xE4F426CD7AC3249ELL)
       + (v640 ^ 0x4022099004090020LL)
       - ((2 * v640) & 0x7FBBECDFF7EDFFBELL)
       - 0x4022099004090020LL;
  unint64_t v642 = ((2 * v641) & 0xFFEBD2FFE7FFDB1ELL)
       + (v641 ^ 0x7FF5E97FF3FFED8FLL)
       + (((((2 * v641) & 0xFFEBD2FFE7FFDB1ELL) + (v641 ^ 0x7FF5E97FF3FFED8FLL) - 0x7FF5E97FF3FFED8FLL) >> 14) ^ 0x99292383200CE215LL)
       - (((((2 * v641) & 0xFFEBD2FFE7FFDB1ELL) + (v641 ^ 0x7FF5E97FF3FFED8FLL) - 0x7FF5E97FF3FFED8FLL) >> 13) & 0x5B8F9BFE63BD4LL);
  unint64_t v643 = v642
       + (((v642 - 0x191F0D03140CCFA4LL) >> 6) ^ 0xD473044A2488D546LL)
       - (((v642 - 0x191F0D03140CCFA4LL) >> 5) & 0x719F76BB6EE5572LL)
       + 2;
  uint64_t v644 = v643 - ((2 * v643 + 0x24DBDD658ED4B628LL) & 0x304B76570792B15ALL) - 0x556C5621B4CC4C3FLL;
  STACK[0x210] = v644;
  unint64_t v645 = ((2 * ((v644 ^ 0x9825BB2B83C958ADLL) + 0x301F1AB817992D55LL)) & 0x8FE77CDD7CFD77E0LL)
       + (((v644 ^ 0x9825BB2B83C958ADLL) + 0x301F1AB817992D55LL) ^ 0x47F3BE6EBE7EBBF0LL);
  unint64_t v646 = v645
       + (((v645 - 0x47F3BE6EBE7EBBF0LL) >> 24) ^ 0xD842022000038A90LL)
       - (((v645 - 0x47F3BE6EBE7EBBF0LL) >> 23) & 0x1BFFFF8EADELL);
  unint64_t v647 = v646
       + (((v646 - 0x2035C08EBE824680LL) >> 14) ^ 0x8200020489880200LL)
       - (((v646 - 0x2035C08EBE824680LL) >> 13) & 0x7FBF6ECEFFBFELL);
  unint64_t v648 = v647
       + (((v647 + 0x5DCA3D6CB7F5B780LL) >> 6) ^ 0x7AEF5FF753DAEBADLL)
       + (((v647 + 0x5DCA3D6CB7F5B780LL) >> 5) & 0x5DEBFEEA7B5D75ALL)
       + 2;
  unint64_t v649 = v648 - ((2 * v648 - 0x3A4A451537CA685ELL) & 0xA6A4473D1E4BC21ELL) + 0x362D0113F340ACE0LL;
  STACK[0x208] = v649;
  unint64_t v650 = ((2 * ((v649 ^ 0x5352239E8F25E10FLL) - 0x5C4C23E8A21DDE13LL)) & 0xBFBDFFFEEFB1DAD4LL)
       + (((v649 ^ 0x5352239E8F25E10FLL) - 0x5C4C23E8A21DDE13LL) ^ 0xDFDEFFFF77D8ED6ALL);
  unint64_t v651 = (((v650 + 0x2021000088271296LL) >> 27) ^ 0xDB5BBFBF5CD5F7F5LL)
       + v650
       + (((v650 + 0x2021000088271296LL) >> 26) & 0x3EB9ABEFEALL);
  unint64_t v652 = (((v651 + 0x44C540412B511AA1LL) >> 12) ^ 0x547BFC7F5EAC7F1FLL)
       + v651
       + (((v651 + 0x44C540412B511AA1LL) >> 11) & 0x17F8FEBD58FE3ELL);
  unint64_t v653 = v652
       + (((v652 - 0xFB6BC3E335B647ELL) >> 2) ^ 0x6004074208860A08LL)
       - (((v652 - 0xFB6BC3E335B647ELL) >> 1) & 0x3FF7F17BEEF3EBEELL);
  LODWORD(v623) = v653 + 1 - ((2 * (v653 + 1) - 2009259278) & 0xD4C067DC) - 1367423641;
  unint64_t v654 = v653
       + 1
       + (((v653 - 0x5C363EAC7BB54238LL) >> 30) ^ 0x251C8C0980C000A9LL)
       - (((v653 - 0x5C363EAC7BB54238LL) >> 29) & 0x4FE7FFEACLL);
  unint64_t v655 = v654
       + (((v654 + 0x7EAD354A038ABD1ELL) >> 12) ^ 0x8420E28014066444LL)
       - (((v654 + 0x7EAD354A038ABD1ELL) >> 11) & 0x1E3AFFD7F33776LL);
  unint64_t v656 = v655
       + (((v655 - 0x573AD36107BA726LL) >> 7) ^ 0x104440010020C065LL)
       - (((v655 - 0x573AD36107BA726LL) >> 6) & 0x3777FFDFFBE7F34LL)
       + 3;
  unint64_t v827 = v656 - ((2 * v656 - 0x2B6FDA6E2138CF1CLL) & 0xECF1562D5CD82ADELL) - 0x1F3F42206230521FLL;
  unint64_t v657 = ((2 * ((v827 ^ 0xF678AB16AE6C156FLL) + 0x3DEAA251E4C860FCLL)) & 0x7E51FFFF57DF97FELL)
       + (((v827 ^ 0xF678AB16AE6C156FLL) + 0x3DEAA251E4C860FCLL) ^ 0x3F28FFFFABEFCBFFLL);
  unint64_t v658 = (((v657 - 0x3F28FFFFABEFCBFFLL) >> 31) ^ 0xBDEDFFBEFFFFBFDBLL)
       + v657
       + (((v657 - 0x3F28FFFFABEFCBFFLL) >> 30) & 0x1FFFF7FB6LL);
  unint64_t v659 = (((v658 + 0x2E9004154107426LL) >> 8) ^ 0x9FF7FFE564ACA9F7LL)
       + v658
       + (((v658 + 0x2E9004154107426LL) >> 7) & 0x1EFFFCAC95953EELL);
  unint64_t v660 = (((v659 + 0x62F1005BEF63CA2FLL) >> 7) ^ 0x2DBFFDB3FEFCDFD6LL)
       + v659
       + (((v659 + 0x62F1005BEF63CA2FLL) >> 6) & 0x37FFB67FDF9BFACLL);
  unint64_t v661 = v660 - ((2 * v660 + 0xA62054FE0CDD4B2LL) & 0x16A5FAD14C4DBAB2LL) - 0x3F7BFFEF6972384ELL;
  STACK[0x200] = v661;
  unint64_t v662 = (v661 ^ 0xB51E3EB64B8BA996LL)
       + ((v661 >> 30) ^ 0x88D82DA6943C72EDLL)
       + ((v661 >> 29) & 0x77F76EF96LL ^ 0xFFFFFFFAD78F1A6DLL)
       + 0x7727D25BBFBB77CDLL;
  unint64_t v663 = (((((2 * v662) & 0xDDFF57FA7B3EFE5ALL) + (v662 ^ 0xEEFFABFD3D9F7F2DLL) + 0x11005402C26080D3LL) >> 13) ^ 0x7FED03FF25ADDD53LL)
       + ((2 * v662) & 0xDDFF57FA7B3EFE5ALL)
       + (v662 ^ 0xEEFFABFD3D9F7F2DLL)
       + (((((2 * v662) & 0xDDFF57FA7B3EFE5ALL) + (v662 ^ 0xEEFFABFD3D9F7F2DLL) + 0x11005402C26080D3LL) >> 12) & 0xA07FE4B5BBAA6LL);
  unint64_t v664 = v663
       + (((v663 - 0x6EECAFFC634D5C80LL) >> 2) ^ 0xD40280220218948DLL)
       - (((v663 - 0x6EECAFFC634D5C80LL) >> 1) & 0x57FAFFBBFBCED6E4LL);
  unsigned int v665 = ((2 * v606) & 0xFFD777B4)
       + (v606 ^ 0xFFEBBBDB)
       - ((2 * (((2 * v606) & 0xFFD777B4) + (v606 ^ 0xFFEBBBDB)) + 31845198) & 0x8E94595C)
       - 935517610;
  LODWORD(STACK[0x5B0]) = v665;
  LODWORD(v63_Block_object_dispose(va, 8) = v665 ^ v638 ^ v639 ^ v623 ^ (v664 + 1 - ((2 * (v664 + 1) + 892607972) & 0x7D0C7E9E) - 652194239) ^ 0xA535949F;
  int v666 = ((v638 & 0x34EEE5CD ^ 0x34C60589)
        + (v638 & 0x104CA440 ^ 0x119B252)
        - ((v638 & 0x34EEE5CD ^ 0x34C60589) & 0x104CA440)) ^ 0x915FB656;
  LODWORD(v63_Block_object_dispose(va, 8) = ((v638 & 0xCB111A32 ^ 0x80101030)
                 + (v638 & 0x89111202 ^ 0x2929828A)
                 - ((v638 & 0xCB111A32 ^ 0x80101030) & 0x89111202)) ^ 0xC8B93B4E;
  unint64_t v667 = v664
       + 1
       + (((v664 - 0x74712FCE516EFC51LL) >> 25) ^ 0x148010264081A10CLL)
       - (((v664 - 0x74712FCE516EFC51LL) >> 24) & 0xB37EFCBDE6LL);
  LODWORD(v63_Block_object_dispose(va, 8) = (v638 - ((2 * v638) & 0x7185A660) + 952292144) ^ 0x184272F4 | (v666
                                                                               - ((2 * v666) & 0xF77CD30A)
                                                                               + 2076076437) ^ 0xCFFE4995;
  unint64_t v668 = v667
       + (((v667 + 0x770EC00B6E0F62A2LL) >> 9) ^ 0xEAFAFB3D53F5BEB4LL)
       + (((v667 + 0x770EC00B6E0F62A2LL) >> 8) & 0xF5F67AA7EB7D68LL);
  unint64_t v669 = v668
       + ((v668 - 0x73EC3B31E5E65C12LL) & 0x533F7FBFFAEFF3BALL)
       + (((v668 - 0x73EC3B31E5E65C12LL) >> 1) ^ 0xA99FBFDFFD77F9DDLL)
       + 1;
  unint64_t v826 = v669 - ((2 * v669 - 0x3B17F623C6BCABE0LL) & 0xF5E716826BF33122LL) + 0x5D67902F529B42A1LL;
  unint64_t v670 = ((2 * ((v826 ^ 0x7AF38B4135F99891LL) + 0x38FC44A9709D19CALL)) & 0xFFABF97BA6FFB9FCLL)
       + (((v826 ^ 0x7AF38B4135F99891LL) + 0x38FC44A9709D19CALL) ^ 0x7FD5FCBDD37FDCFELL);
  unint64_t v671 = v670
       + (((v670 - 0x7FD5FCBDD37FDCFELL) >> 24) ^ 0x540052C833882218LL)
       - (((v670 - 0x7FD5FCBDD37FDCFELL) >> 23) & 0x6F98EFBBCELL);
  unint64_t v672 = v671
       + (((v671 + 0x2C29B079F8F800EALL) >> 15) ^ 0xB8040AB811244082LL)
       - (((v671 + 0x2C29B079F8F800EALL) >> 14) & 0x3EA8FDDB77EFALL);
  unint64_t v673 = v672
       + (((v672 + 0x7425A5C1E7D3C068LL) >> 8) ^ 0x67AFBEFF97F7CCE9LL)
       + (((v672 + 0x7425A5C1E7D3C068LL) >> 7) & 0x15F7DFF2FEF99D2LL)
       + 2;
  uint64_t v825 = v673 - ((2 * v673 + 0x18EBCD849FB7E6FALL) & 0x5DC1E88D6CD0B418LL) - 0x44A924F6F9BBB277LL;
  unint64_t v674 = ((2 * ((v825 ^ 0xAEE0F446B6685A0CLL) + 0x627FE9C2823FDEE7LL)) & 0xDFF5EBDDCEFFF9BCLL)
       + (((v825 ^ 0xAEE0F446B6685A0CLL) + 0x627FE9C2823FDEE7LL) ^ 0x6FFAF5EEE77FFCDELL);
  unint64_t v675 = (((v674 - 0x6FFAF5EEE77FFCDELL) >> 29) ^ 0x7DF97E787EDE5ED3LL)
       + v674
       + (((v674 - 0x6FFAF5EEE77FFCDELL) >> 28) & 0xFDBCBDA6);
  unint64_t v676 = v675
       + (((v675 + 0x120B8B9899A1A44FLL) >> 9) ^ 0x811440089041402LL)
       - (((v675 + 0x120B8B9899A1A44FLL) >> 8) & 0xDD77FEEDF7D7FALL);
  LODWORD(v667) = ((v676 + 0x9FA4798109D904DLL) >> 5) - (((v676 + 0x9FA4798109D904DLL) >> 4) & 0xCB00CF7C) - 444569666;
  LODWORD(v676) = ((2 * (v676 + 278761549)) & 0x7FEFFEE6)
                + ((v676 + 278761549) ^ 0xBFF7FF73)
                + (v667 ^ 0xDAF3BA41)
                + ((2 * v667) & 0x7EE7BBFE ^ 0x4A008B7C);
  LODWORD(v649) = (v676 - ((2 * v676 + 19416348) & 0xE40239A6) - 225099935) ^ (v638
                                                                             - ((2 * v638) & 0x5E064442)
                                                                             - 1358749151);
  LODWORD(v63_Block_object_dispose(va, 8) = (v649 & 2) + (v649 & 7 ^ 6) - ((v649 & 7 ^ 6) & 2) + 1906375032;
  int v677 = (v638 & 0x100000FA ^ 0x1A0488) + (v638 ^ 0x39C4B972) - ((v638 ^ 0x39C4B972) & 0x82040FA);
  LODWORD(STACK[0x5B8]) = v649;
  int v679 = STACK[0x4A0];
  if ((v520 & 2) == 0) {
    int v679 = STACK[0x3B0];
  }
  LODWORD(STACK[0x410]) = v679;
  LODWORD(STACK[0x320]) = v532;
  int v680 = STACK[0x498];
  if ((v520 & 2) != 0) {
    int v680 = v532;
  }
  LODWORD(STACK[0x40C]) = v680;
  int v681 = STACK[0x5D8];
  if ((v520 & 2) != 0) {
    int v681 = STACK[0x5D0];
  }
  LODWORD(STACK[0x368]) = v681;
  int v682 = STACK[0x480];
  if ((v520 & 2) != 0) {
    int v682 = STACK[0x47C];
  }
  LODWORD(STACK[0x308]) = v682;
  LODWORD(STACK[0x26C]) = v594;
  LODWORD(STACK[0x268]) = v595;
  if ((v520 & 2) != 0) {
    int v683 = v595;
  }
  else {
    int v683 = v594;
  }
  int v684 = STACK[0x560];
  if ((v520 & 2) == 0) {
    int v684 = STACK[0x39C];
  }
  LODWORD(STACK[0x418]) = v684;
  int v685 = STACK[0x3F8];
  if ((v520 & 2) != 0) {
    int v685 = STACK[0x3F0];
  }
  LODWORD(STACK[0x2CC]) = v685;
  LODWORD(STACK[0x360]) = v565;
  if ((v520 & 2) != 0) {
    int v686 = STACK[0x3AC];
  }
  else {
    int v686 = v565;
  }
  LODWORD(STACK[0x2AC]) = v596;
  LODWORD(STACK[0x278]) = v597;
  if ((v520 & 2) != 0) {
    unsigned int v687 = v597;
  }
  else {
    unsigned int v687 = v596;
  }
  int v688 = STACK[0x580];
  if ((v520 & 2) != 0) {
    int v688 = STACK[0x640];
  }
  LODWORD(STACK[0x3CC]) = v688;
  LODWORD(STACK[0x2B0]) = v598;
  LODWORD(STACK[0x2A4]) = v599;
  if ((v520 & 2) != 0) {
    int v689 = v598;
  }
  else {
    int v689 = v599;
  }
  LODWORD(STACK[0x338]) = v689;
  LODWORD(STACK[0x2B4]) = v585;
  if ((v520 & 2) == 0) {
    int v585 = STACK[0x4F0];
  }
  LODWORD(STACK[0x378]) = v584;
  unsigned int v690 = STACK[0x398];
  if ((v520 & 2) == 0) {
    unsigned int v690 = v584;
  }
  LODWORD(STACK[0x358]) = v690;
  if (v677 == 1348338934) {
    int v691 = 0;
  }
  else {
    int v691 = 255;
  }
  LODWORD(STACK[0x330]) = v678;
  LODWORD(STACK[0x650]) = v678 ^ 0xBD2DEFCF;
  int v824 = (v691 << (v678 ^ 0xCF)) - ((2 * (v691 << (v678 ^ 0xCF))) & 0x6D76342A);
  LODWORD(STACK[0x570]) = LODWORD(STACK[0x4B0]) ^ 0xD84E6E31;
  HIDWORD(v692) = LODWORD(STACK[0x250]) ^ 0x17D;
  LODWORD(v692) = LODWORD(STACK[0x250]) ^ 0xBA404C00;
  int v693 = (v692 >> 9) - ((2 * (v692 >> 9)) & 0x12DAD50) - 2137598296;
  int v694 = (((2 * v693) ^ 0x12DAD50) - 2 * (((2 * v693) ^ 0x12DAD50) & 0x2C3BEA6 ^ (2 * v693) & 2) + 46382756) & 0x32119686 ^ 0x20119400;
  HIDWORD(v692) = LODWORD(STACK[0x270]) ^ 0x49;
  LODWORD(v692) = LODWORD(STACK[0x270]) ^ 0xC528A600;
  int v695 = (v692 >> 8) - ((2 * (v692 >> 8)) & 0xDB352FDE) - 308635665;
  HIDWORD(v692) = LODWORD(STACK[0x23C]) ^ 0x9781F9;
  LODWORD(v692) = LODWORD(STACK[0x23C]) ^ 0x4A000000;
  int v696 = (v692 >> 24) - ((2 * (v692 >> 24)) & 0x47FFCC32) + 603973145;
  int v697 = LODWORD(STACK[0x298]) ^ 0x478EF6E6;
  int v698 = BYTE2(LODWORD(STACK[0x298])) ^ 0xAB;
  unsigned int v699 = (((2 * v698) & 0x140) - v698 - 844694177) ^ 0x8429315F;
  unsigned int v700 = (((2 * v699) & 0x930A0614) - v699 + 876272885) ^ 0x7DB51070;
  int v701 = (v700 - ((2 * v700 + 1896307116) & 0x4FFA2736) + 545308785) ^ LODWORD(STACK[0x280]);
  HIDWORD(v692) = v701 ^ 0x89A2;
  LODWORD(v692) = v701 ^ 0x24800000;
  int v702 = v693 ^ v695 ^ v696 ^ LODWORD(STACK[0x258]) ^ LODWORD(STACK[0x2A8]) ^ 0x7639D000 ^ ((v692 >> 16)
                                                                                          - ((2 * (v692 >> 16)) & 0xA651C0A8)
                                                                                          - 752295852) ^ 0x62C0A91C ^ ((v694 | 0x63BAAC6A) - (v694 | 0x9C455395) - 1673178219);
  HIDWORD(v692) = STACK[0x238];
  LODWORD(v692) = LODWORD(STACK[0x520]) ^ 0x732CC83C;
  int v703 = (v692 >> 1) - ((2 * (v692 >> 1)) & 0xF2561C2E) - 114618857;
  HIDWORD(v692) = LODWORD(STACK[0x2A8]) ^ ~LODWORD(STACK[0x448]);
  LODWORD(v692) = LODWORD(STACK[0x2A8]) ^ LODWORD(STACK[0x448]) ^ 0x41DB108A;
  int v704 = (v692 >> 1) - ((2 * (v692 >> 1)) & 0xA40CDD04) + 1376153218;
  HIDWORD(v692) = v704 ^ v703 ^ 0x2B2D6095;
  LODWORD(v692) = v704 ^ ~v703;
  int v705 = (v692 >> 31) - ((2 * (v692 >> 31)) & 0x8BEE34E6) + 1173822067;
  unsigned int v706 = LODWORD(STACK[0x2A0]) ^ 0xBE678168 ^ v702;
  int v707 = 2 * ((v706 & STACK[0x3D4]) - ((2 * (v706 & STACK[0x3D4])) & 0x537A18A0)) - 746973024;
  unsigned int v708 = ((2 * (v706 + LODWORD(STACK[0x3D4]))) & 0xBF85FFDA)
       + ((v706 + LODWORD(STACK[0x3D4])) ^ 0xDFC2FFED)
       + (v707 ^ 0xF3BE4B35)
       + ((2 * v707) & 0xBE7758D4 ^ 0x598BEFBF);
  unsigned int v709 = v708 - ((2 * v708 - 17737474) & 0xC93726D6) - 468434966;
  unsigned int v710 = (&unk_10023C020 ^ 0xFDDFBF7C) + 35668100 + (STACK[0x470] & 0xFBBF7EE0);
  int v711 = STACK[0x224];
  int v712 = LODWORD(STACK[0x2C8]) ^ LODWORD(STACK[0x224]) ^ v702;
  int v713 = LODWORD(STACK[0x3D0]) ^ LODWORD(STACK[0x36C]) ^ LODWORD(STACK[0x328]);
  int v714 = v712 ^ v697;
  unsigned int v715 = (v710 ^ 0x3AFF27FB) + ((2 * v710) & 0x75FE4FF6) - 989800443 + (v712 ^ v697 ^ v713 ^ 0xBD711757);
  unsigned int v716 = (&unk_10023C020 ^ 0xB6FED663) + 1224812957 + (STACK[0x470] & 0x6DFDACC0);
  unsigned int v717 = ((2 * v716) & 0xDF5F97D0) + (v716 ^ 0xEFAFCBE8);
  unsigned int v718 = ((2 * (v714 ^ v713 ^ 0x2006DE02)) & 0xD73FFEA6 ^ 0x122F92A2) + (v714 ^ v713 ^ 0xD6EEE804);
  unsigned int v719 = (&unk_10023C020 ^ 0x7AE7FDFB) - 2062024187 + (STACK[0x470] & 0xF5CFFBE0);
  int v720 = v717 + v718 - ((2 * (v717 + v718) + 611233486) & 0x37DD47A0) + 237370167;
  int v721 = LODWORD(STACK[0x328]) ^ LODWORD(STACK[0x3D0]);
  int v722 = STACK[0x3D0];
  unsigned int v723 = ((2 * v719) & 0xE76B7AFE) + (v719 ^ 0x73B5BD7F) + v718;
  LODWORD(STACK[0x2C8]) = (v723 + 1848731088) & 0x5CF4E067 ^ v723 & 2;
  LODWORD(STACK[0x250]) = v723 - 886686825;
  unsigned int v724 = (((2 * v715) & 0x7D3FE7BE)
        + (v715 ^ 0xBE9FF3DF)
        - 2123159452
        - ((2 * (((2 * v715) & 0x7D3FE7BE) + (v715 ^ 0xBE9FF3DF)) + 500063622) & 0xE5180D5A)
        + 3340) ^ v721;
  int v725 = (v724 & 2 | (2 * (v724 & 2)) ^ 0x21002184) + 1488580414;
  LODWORD(STACK[0x470]) = (v721 ^ ((v721 ^ 0x780279F8) - ((2 * (v721 ^ 0x780279F8) + 2) & 0x95FB894) - 2068849589) ^ 0x71465207 ^ ((v721 ^ 0xE3ECDA28 ^ v720) + (v720 ^ 0x9BEEA3D0) + 1 - ((2 * ((v721 ^ 0xE3ECDA28 ^ v720) + (v720 ^ 0x9BEEA3D0) + 1)) & 0xE4281094) + 1913915466))
                        + (v720 ^ 0x9BEEA3D0);
  LODWORD(STACK[0x36C]) = LODWORD(STACK[0x3BC]) ^ 0x33709ED5;
  int v726 = LODWORD(STACK[0x3A8]) ^ 0x5D1701E2;
  int v727 = LODWORD(STACK[0x3C0]) ^ 0x4F0A8AB2;
  LODWORD(STACK[0x328]) = v677;
  if (v677 == 1348338934) {
    char v728 = 56;
  }
  else {
    char v728 = (((2 * ((v824 + 21) ^ 0x55)) | 0x5C) - ((v824 + 21) ^ 0x55) + 82) ^ 0x29;
  }
  int v729 = v726 ^ LODWORD(STACK[0x658]);
  int v730 = v727 ^ LODWORD(STACK[0x658]);
  LODWORD(STACK[0x4B0]) = v724;
  BOOL v731 = (((((2 * v715) & 0xBE)
                           + (v715 ^ 0xDF)
                           + 100
                           - ((2 * (((2 * v715) & 0xBE) + (v715 ^ 0xDF)) - 122) & 0x5A)
                           + 12) ^ v721) & 1) == 0;
  if ((((((2 * v715) & 0xBE) {
                         + (v715 ^ 0xDF)
  }
                         + 100
                         - ((2 * (((2 * v715) & 0xBE) + (v715 ^ 0xDF)) - 122) & 0x5A)
  else {
    int v732 = v730;
  }
  LODWORD(STACK[0x2A8]) = v732;
  LODWORD(STACK[0x3C0]) = LODWORD(STACK[0x390]) ^ 0x98FF8526;
  if ((((((2 * v715) & 0xBE) {
                         + (v715 ^ 0xDF)
  }
                         + 100
                         - ((2 * (((2 * v715) & 0xBE) + (v715 ^ 0xDF)) - 122) & 0x5A)
  else {
    unsigned int v733 = LODWORD(STACK[0x3A0]) ^ 0x611F1273 ^ LODWORD(STACK[0x648]);
  }
  LODWORD(STACK[0x23C]) = v733;
  LODWORD(STACK[0x3BC]) = v722 ^ 0x34AFE483 ^ LODWORD(STACK[0x374]);
  unsigned int v734 = v722 ^ 0xD79A275F ^ LODWORD(STACK[0x38C]);
  int v735 = v713 ^ 0x149AF88D;
  int v736 = v586 ^ 0x48840782 ^ LODWORD(STACK[0x2F0]);
  int v737 = v586 ^ 0x72FF1D3A ^ LODWORD(STACK[0x348]);
  unsigned int v738 = v586 ^ 0x9FC1A69F ^ LODWORD(STACK[0x340]);
  int v739 = v586 ^ 0x4C8BB49C ^ LODWORD(STACK[0x350]);
  unsigned int v740 = v722 ^ 0x89D7939E ^ LODWORD(STACK[0x2E0]);
  unsigned int v741 = v705 ^ 0xBBDD2E65;
  unsigned int v742 = v722 ^ 0xD5A4EDDA ^ LODWORD(STACK[0x2F8]);
  int v743 = v722 ^ 0x26FEDE3A ^ LODWORD(STACK[0x300]);
  if (v731) {
    int v744 = v586 ^ 0x72FF1D3A ^ LODWORD(STACK[0x348]);
  }
  else {
    int v744 = v586 ^ 0x48840782 ^ LODWORD(STACK[0x2F0]);
  }
  LODWORD(STACK[0x3D4]) = v744;
  if (v731) {
    unsigned int v745 = v736;
  }
  else {
    unsigned int v745 = v738;
  }
  LODWORD(STACK[0x394]) = v745;
  if (v731) {
    unsigned int v746 = v738;
  }
  else {
    unsigned int v746 = v739;
  }
  LODWORD(STACK[0x3D0]) = v746;
  if (v731) {
    int v747 = v739;
  }
  else {
    int v747 = v737;
  }
  LODWORD(STACK[0x38C]) = v747;
  unsigned int v748 = v588 ^ 0x8E77C691 ^ LODWORD(STACK[0x2C4]);
  int v749 = LODWORD(STACK[0x530]) ^ 0x372248C8 ^ v709;
  int v750 = v712 ^ 0x2DC5B9BC;
  unsigned int v751 = v588 ^ 0xC72A04E8 ^ v697;
  int v752 = v714 ^ 0x6FAD6CCB;
  unsigned int v753 = v711 ^ 0x984FDAE3 ^ v702;
  if (v731) {
    int v754 = v749;
  }
  else {
    int v754 = v750;
  }
  if (v731) {
    int v755 = v750;
  }
  else {
    int v755 = v752;
  }
  if (v731) {
    unsigned int v756 = v711 ^ 0x984FDAE3 ^ v702;
  }
  else {
    unsigned int v756 = v749;
  }
  if (v731) {
    unsigned int v757 = v752;
  }
  else {
    unsigned int v757 = v753;
  }
  LODWORD(STACK[0x280]) = v721;
  unsigned int v758 = v721 ^ 0xD50F6866;
  LODWORD(STACK[0x238]) = v734;
  if (v731) {
    unsigned int v759 = v735;
  }
  else {
    unsigned int v759 = v734;
  }
  LODWORD(STACK[0x3A0]) = v759;
  LODWORD(STACK[0x224]) = v758;
  if (v731) {
    unsigned int v760 = v740;
  }
  else {
    unsigned int v760 = v741;
  }
  LODWORD(STACK[0x390]) = v760;
  if (v731) {
    unsigned int v761 = v741;
  }
  else {
    unsigned int v761 = v743;
  }
  if (v731) {
    unsigned int v762 = v742;
  }
  else {
    unsigned int v762 = v740;
  }
  if (v731) {
    unsigned int v763 = v748;
  }
  else {
    unsigned int v763 = v751;
  }
  LODWORD(STACK[0x3A8]) = v763;
  LODWORD(STACK[0x570]) = v725;
  BOOL v764 = v725 == 2042237120;
  if (v725 == 2042237120) {
    unsigned int v765 = v761;
  }
  else {
    unsigned int v765 = v762;
  }
  LODWORD(STACK[0x298]) = v765;
  if (v725 == 2042237120) {
    unsigned int v761 = v762;
  }
  LODWORD(STACK[0x258]) = v761;
  LODWORD(STACK[0x350]) = v585;
  LODWORD(STACK[0x420]) = v683;
  LODWORD(STACK[0x300]) = v683 ^ 0xFE6B62C1;
  unsigned int v766 = (((v585 ^ 0xF05F37FF) - ((2 * (v585 ^ 0xF05F37FF) - 1059470582) & 0xCC49D0BE) - 963524124) ^ 0x72818BFF)
       + (v683 ^ 0xFE6B62C1);
  LODWORD(STACK[0x2E0]) = v686;
  unsigned int v767 = ((v766 - ((2 * v766) & 0xB4A5055A) - 632126803) ^ 0x130BCBB) + (LODWORD(STACK[0x620]) ^ 0x74C0575F);
  LODWORD(STACK[0x400]) = v687;
  unsigned int v768 = (v767 ^ 0x7EB7FF79) - 2125987705 + ((2 * v767) & 0xFD6FFEF2);
  unsigned int v769 = ((LODWORD(STACK[0x3CC]) ^ v687 ^ ((v686 ^ 0x5678C598)
                                         - ((2 * (v686 ^ 0x5678C598) + 99801830) & 0x7F36E668)
                                         + 1117053095)) >> 1) ^ 0x63F2C8A8;
  unsigned int v770 = v769 - ((2 * v769 + 1015697154) & 0xE92552C8) - 1831350043;
  unsigned int v771 = ((v768 >> 1) ^ 0x77EEB5F2)
       + (v768 & 0xEFDD6BE4)
       - ((2 * (((v768 >> 1) ^ 0x77EEB5F2) + (v768 & 0xEFDD6BE4)) - 1617623086) & 0xEA19E8B8)
       + 1154971717;
  int v772 = ((2 * (STACK[0x218] - 1148444866)) & 0xB83FE7FE) + ((STACK[0x218] - 1148444866) ^ 0x5C1FF3FF);
  int v773 = STACK[0x5C0] - 1459530988;
  int v774 = ((2 * (STACK[0x590] + 1380944942)) & 0x6FFDFD56) + ((STACK[0x590] + 1380944942) ^ 0xB7FEFEAB);
  unsigned int v775 = (v774 - ((2 * v774 + 39926068) & 0xB9AC080) - 1359086374) ^ (((2 * v773) & 0xE4AFD3DA)
                                                                    + (v773 ^ 0x7257E9ED)
                                                                    - 2
                                                                    * ((((2 * v773) & 0xE4AFD3DA)
                                                                      + (v773 ^ 0x7257E9ED)
                                                                      + 1859629400) & 0x4DDB9ABF ^ (v773 ^ 0x7257E9ED) & 1)
                                                                    + 1018383382);
  int v776 = ((2 * (STACK[0x3D8] + 1337209669)) & 0xC3FFFFFF) + ((STACK[0x3D8] + 1337209669) ^ 0x61FFFFFF);
  unsigned int v777 = v775 ^ (v776 - ((2 * v776 - 27314548) & 0xB9C4065A) + 1544658547);
  int v778 = ((2 * (STACK[0x230] + 1004298433)) & 0x678663D6) + ((STACK[0x230] + 1004298433) ^ 0x33C331EB);
  unsigned int v779 = v777 ^ (v778 - ((2 * v778 + 1524159156) & 0xD3EFFB4C) - 1755027712);
  int v780 = ((2 * (STACK[0x228] + 1613956370)) & 0xFF3AFDFE) + ((STACK[0x228] + 1613956370) ^ 0x7F9D7EFF);
  int v781 = STACK[0x230] - ((2 * STACK[0x230] + 2008596866) & 0xB77262A2) + 395678226;
  int v782 = (STACK[0x590] - ((2 * STACK[0x590] - 1533077412) & 0xDC012C34) + 1078993480) ^ (STACK[0x5C0]
                                                                                       - ((2 * STACK[0x5C0] + 302163496) & 0x27D1EE98)
                                                                                       - 1125496224) ^ (STACK[0x3D8] - ((2 * STACK[0x3D8] - 1620547958) & 0xC07CFA9A) + 804434066) ^ v771;
  int v783 = v782 ^ 0x6BC34C63;
  int v784 = (v781 ^ 0x4F8582CD ^ v782) + (v782 ^ 0x6BC34C63) + 1;
  unsigned int v785 = (v781 ^ ((v781 ^ 0x2446CEAE) - 1532746802 - ((2 * (v781 ^ 0x2446CEAE) + 2) & 0x49485A1E) + 2370) ^ 0x836C68FA ^ (v784 - ((2 * v784) & 0xF8E2E948) - 59673436))
       + v783;
  unsigned int v786 = (STACK[0x218] - ((2 * STACK[0x218] + 119029372) & 0xC0178EA) - 1047733325) ^ (STACK[0x228]
                                                                                     - ((2 * STACK[0x228] + 6687268) & 0x3E1F880A)
                                                                                     - 12400361) ^ v827 ^ STACK[0x210] ^ v826 ^ (v785 - ((2 * v785) & 0x346E138E) + 439814599);
  int v787 = v779 ^ (v780 - ((2 * v780 - 1021036404) & 0xE7381088) - 718396278) ^ (v772
                                                                             - ((2 * v772 + 169823884) & 0x69D695C8)
                                                                             - 1174736342) ^ STACK[0x200] ^ STACK[0x208] ^ v825;
  unsigned int v788 = ((v786 & 0x7F ^ 0x10000064) - ((2 * (v786 & 0x7F ^ 0x10000064)) & 0x46) - 504607453) ^ 0xF1EC4D53;
  int v789 = (((_BYTE)v824 + 21) & 0xFD | ((_BYTE)v824 + 37) & 2) ^ 0x108052D1;
  unsigned int v790 = (((2 * v789) & 0x1000096) - v789 - 1254500684) ^ 0xA5B98470;
  LODWORD(STACK[0x228]) = (33686018 * v790) & 0xE1610AD0;
  LODWORD(STACK[0x218]) = 16843009 * v790 - 256866968;
  unsigned int v791 = v787 ^ v770;
  LODWORD(STACK[0x2C4]) = ((((v786 ^ 0x23 ^ v728) + 1) ^ 0xF7)
                                          + ((v728 ^ 0x38 | v786 ^ 0xE4) ^ 0xDF)
                                          + ((2 * ((v786 ^ 0x23 ^ v728) + 1)) & 0xEE)
                                          + ((2 * (v728 ^ 0x38 | v786 ^ 0xE4)) & 0xBE)
                                          + 42)
                        - 2
                        * (((((v786 ^ 0x23 ^ v728) + 1) ^ 0xF7)
                          + ((v728 ^ 0x38 | v786 ^ 0xE4) ^ 0xDF)
                          + ((2 * ((v786 ^ 0x23 ^ v728) + 1)) & 0xEE)
                          + ((2 * (v728 ^ 0x38 | v786 ^ 0xE4)) & 0xBE)
                          + 42) & 0x1F)
                        + 1176443167;
  LODWORD(STACK[0x5C0]) = v786;
  int v793 = 16843009 * v792 - ((33686018 * v792) & 0x1C967316) + 239810955;
  LODWORD(STACK[0x270]) = v791;
  int v794 = (((v791 ^ BYTE1(v791) ^ BYTE2(v791)) ^ 0x61)
  unsigned int v795 = 16843009 * v794 - ((33686018 * v794) & 0xF26C0C8E) - 113899961;
  v796 = (void *)STACK[0x380];
  int v797 = *(void *)(STACK[0x380]
                   + 8LL
                   * ((*(void *)(STACK[0x380]
                                 + 8LL
                                 * ((*(void *)(STACK[0x380] + 8LL * ((*(_DWORD *)STACK[0x380] & 1) == 0)) & 1) == 0)) & 1) == 0)) & 1;
  uint64_t v798 = (v797 ^ 0xAE7FFF77) + 2 * v797 + 1604359746;
  LODWORD(STACK[0x2A0]) = LODWORD(STACK[0x250]) + 2718;
  int v799 = STACK[0x470];
  LODWORD(STACK[0x230]) = (2 * LODWORD(STACK[0x470])) & 0xE653079A;
  LODWORD(STACK[0x200]) = v799 + 1932100557;
  HIDWORD(a63) = LODWORD(STACK[0x36C]) ^ LODWORD(STACK[0x658]);
  LODWORD(STACK[0x590]) = 33686018 * v788;
  LODWORD(STACK[0x470]) = v771;
  LODWORD(STACK[0x530]) = v770;
  unint64_t v800 = STACK[0x3E8];
  uint64_t v801 = STACK[0x3E8] ^ 0x54D42D7B;
  int v802 = STACK[0x3D4];
  if (v764) {
    int v802 = STACK[0x3D0];
  }
  LODWORD(STACK[0x250]) = v802;
  LODWORD(STACK[0x374]) = v754;
  LODWORD(STACK[0x36C]) = v757;
  if (v764) {
    unsigned int v803 = v754;
  }
  else {
    unsigned int v803 = v757;
  }
  LODWORD(STACK[0x2F0]) = v803;
  LODWORD(STACK[0x208]) = v755;
  if (v764) {
    unsigned int v804 = v756;
  }
  else {
    unsigned int v804 = v755;
  }
  LODWORD(STACK[0x2F8]) = v804;
  LODWORD(STACK[0x3D8]) = v788;
  LODWORD(STACK[0x348]) = v793;
  LODWORD(STACK[0x340]) = v795;
  LODWORD(STACK[0x3C0]) = v795 ^ v793;
  unint64_t v805 = 0xB3D5C9433319E527LL * (*v796 ^ 0x9696969696969696LL)
       - ((0x67AB92866633CA4ELL * (*v796 ^ 0x9696969696969696LL)) & (v801 - 0x47575AF9E44A400ELL))
       - 0x23ABAD7CC7BB0ACBLL;
  unint64_t v806 = ((2 * (v805 ^ 0x95C3750F48E93860LL)) & 0xB7DD6D4FF8D3BFFELL) + (v805 ^ 0xCE2DC3A8B480E79FLL);
  unint64_t v807 = (((v806 - 0x5BEEB6A7FC69DFFFLL) >> 32) ^ 0x1FFFE3D3E3CCDFFALL)
       + v806
       + (((v806 - 0x5BEEB6A7FC69DFFFLL) >> 31) & 0x1C799BFF4LL);
  unint64_t v808 = (((v807 - 0x7BEE9A7BE036BFF9LL) >> 16) ^ 0xBE3BE7EF6FAAEBBFLL)
       + v807
       + (((v807 - 0x7BEE9A7BE036BFF9LL) >> 15) & 0x1CFDEDF55D77ELL);
  unint64_t v809 = (((v808 - 0x3A2A826B4FE1ABB8LL) >> 8) ^ 0x5B5DDFEF5BE49FFBLL)
       + v808
       + (((v808 - 0x3A2A826B4FE1ABB8LL) >> 7) & 0xBBBFDEB7C93FF6LL);
  uint64_t v810 = v809 - ((2 * v809 + 0x8DB5CAA2D31D5AELL) & 0xF56A332DD0AC5BALL) + 0xC18FFEE851E4DB4LL;
  unint64_t v811 = ((2 * (v805 ^ 0x5BFF031A56C197E8LL ^ v810)) & 0xFC2577BD77F7DFFELL)
       + (v805 ^ 0x5BFF031A56C197E8LL ^ v810 ^ 0xFE12BBDEBBFBEFFFLL);
  unint64_t v812 = (((v811 + 0x1ED442144041001LL) >> 32) ^ 0xFE1DFFD1BFFDFE59LL)
       + v811
       + (((v811 + 0x1ED442144041001LL) >> 31) & 0x17FFBFCB2LL);
  unint64_t v813 = (((v812 + 0x3CF444F840611A8LL) >> 16) ^ 0xF77FBDF00FBDBECFLL)
       + v812
       + (((v812 + 0x3CF444F840611A8LL) >> 15) & 0x17BE01F7B7D9ELL);
  unint64_t v814 = (((v813 + 0xC4F865F744852D9LL) >> 8) ^ 0x6EFF993BFFFB89DDLL)
       + v813
       + (((v813 + 0xC4F865F744852D9LL) >> 7) & 0x1FF3277FFF713BALL);
  int v815 = ((2 * (v814 + 1951189244)) & 0xFECCFFEE) + ((v814 + 1951189244) ^ 0x7F667FF7);
  uint64_t v816 = v815 - ((2 * v815 + 59913884) & 0x2AA37C92u);
  uint64_t v817 = v814 - ((2 * v814 + 0x6E8BFBA66D57FF0CLL) & 0x61EDE541C5FA090ALL) - 0x17C30F8BE656FBF5LL;
  unint64_t v818 = ((2 * (v805 ^ 0xECA2A023DAB9F1B0LL ^ v817)) & 0xDF7FA1D3D7F7F8DCLL)
       + (v805 ^ 0xECA2A023DAB9F1B0LL ^ v817 ^ 0xEFBFD0E9EBFBFC6ELL);
  unint64_t v819 = (((v818 + 0x10402F1614040392LL) >> 32) ^ 0x7F78DD5A33BFF5F6LL)
       + v818
       + (((v818 + 0x10402F1614040392LL) >> 31) & 0x677FEBEC);
  unint64_t v820 = (((v819 - 0x6F38AE441FBBF264LL) >> 16) ^ 0x36FFF3775DEEEB71LL)
       + v819
       + (((v819 - 0x6F38AE441FBBF264LL) >> 15) & 0x1E6EEBBDDD6E2LL);
  BOOL v821 = v798 > 0xE2095BA;
  unint64_t v822 = (((v820 + 0x59C75E448255222BLL) >> 8) ^ 0xEBD7BE3E7FDABDE9LL)
       + v820
       + (((v820 + 0x59C75E448255222BLL) >> 7) & 0x1AF7C7CFFB57BD2LL);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)*(&off_10025C670 + ((59 * !v821) ^ v800)) - 12))( 296701324LL,  557325656LL,  0x3EF7CCC71F5F08D4LL,  v816,  1576517879LL,  64479794LL,  v798,  (((2 * ((_BYTE)v822 + 66)) & 0xDA) + ((v822 + 66) ^ 0xED)) & 2,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48,  a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61,
           a62,
           a63);
}

void sub_1000EE068()
{
}

uint64_t sub_1000EE074( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,int a63)
{
  if (LODWORD(STACK[0x2D8]) == 1207960321) {
    int v78 = STACK[0x550];
  }
  else {
    int v78 = STACK[0x5E0];
  }
  if (LODWORD(STACK[0x2D8]) == 1207960321) {
    int v79 = STACK[0x500];
  }
  else {
    int v79 = STACK[0x540];
  }
  if (LODWORD(STACK[0x2D8]) == 1207960321) {
    int v80 = STACK[0x4C0];
  }
  else {
    int v80 = STACK[0x3E4];
  }
  if (LODWORD(STACK[0x2D8]) == 1207960321) {
    int v81 = STACK[0x35C];
  }
  else {
    int v81 = STACK[0x3E0];
  }
  int v82 = STACK[0x248];
  if (LODWORD(STACK[0x2D8]) != 1207960321) {
    int v82 = STACK[0x244];
  }
  int v83 = STACK[0x254];
  if (LODWORD(STACK[0x2D8]) == 1207960321) {
    int v83 = STACK[0x240];
  }
  int v84 = LODWORD(STACK[0x370]) ^ LODWORD(STACK[0x658]);
  int v85 = LODWORD(STACK[0x364]) ^ LODWORD(STACK[0x648]);
  int v86 = LODWORD(STACK[0x218]) - LODWORD(STACK[0x228]);
  int v87 = v77 - 1423190263;
  int v88 = STACK[0x260];
  int v89 = a68;
  if (LODWORD(STACK[0x2D8]) != 1207960321)
  {
    int v88 = a68;
    int v89 = STACK[0x25C];
  }

  BOOL v90 = (STACK[0x5E8] & 2) == 0;
  int v91 = STACK[0x320];
  if ((STACK[0x5E8] & 2) != 0) {
    int v91 = STACK[0x498];
  }
  LODWORD(STACK[0x218]) = v91;
  int v92 = STACK[0x480];
  if (v90) {
    int v92 = STACK[0x47C];
  }
  LODWORD(STACK[0x3E8]) = v92;
  int v93 = STACK[0x26C];
  if (v90) {
    int v93 = STACK[0x268];
  }
  LODWORD(STACK[0x540]) = v93;
  int v94 = STACK[0x3F8];
  if (v90) {
    int v94 = STACK[0x3F0];
  }
  LODWORD(STACK[0x3E4]) = v94;
  int v95 = STACK[0x2B8];
  if (!v90) {
    int v95 = STACK[0x27C];
  }
  LODWORD(STACK[0x244]) = v95;
  int v96 = STACK[0x274];
  if (v90) {
    int v97 = v88;
  }
  else {
    int v97 = STACK[0x274];
  }
  LODWORD(STACK[0x648]) = v97;
  if (v90) {
    int v88 = v96;
  }
  LODWORD(STACK[0x210]) = v88;
  if (v90) {
    int v98 = v83;
  }
  else {
    int v98 = v82;
  }
  LODWORD(STACK[0x480]) = v98;
  if (!v90) {
    int v82 = v83;
  }
  LODWORD(STACK[0x3E0]) = v82;
  unsigned int v99 = v84 ^ 0xFC7FA510;
  LODWORD(STACK[0x4C0]) = v78;
  LODWORD(STACK[0x498]) = v79;
  if (v90) {
    int v100 = v78;
  }
  else {
    int v100 = v79;
  }
  LODWORD(STACK[0x274]) = v100;
  int v101 = STACK[0x5C8];
  if (v90) {
    int v101 = STACK[0x5A0];
  }
  LODWORD(STACK[0x3F0]) = v101;
  LODWORD(STACK[0x370]) = v80;
  LODWORD(STACK[0x364]) = v81;
  if (v90) {
    int v102 = v80;
  }
  else {
    int v102 = v81;
  }
  LODWORD(STACK[0x35C]) = v102;
  int v103 = STACK[0x3A4];
  LODWORD(STACK[0x260]) = v89;
  if (v90) {
    int v103 = v89;
  }
  LODWORD(STACK[0x25C]) = v103;
  BOOL v104 = (STACK[0x4B0] & 1) == 0;
  if ((STACK[0x4B0] & 1) != 0) {
    unsigned int v99 = a64;
  }
  LODWORD(STACK[0x26C]) = v99;
  int v105 = v85 ^ 0x34692984;
  if (v104) {
    int v105 = a65;
  }
  else {
    a74 = a76;
  }
  if (!v104) {
    a70 = a73;
  }
  int v108 = STACK[0x3BC];
  if (v104) {
    int v108 = STACK[0x238];
  }
  int v109 = STACK[0x570];
  BOOL v110 = LODWORD(STACK[0x570]) == 2042237120;
  if (LODWORD(STACK[0x570]) == 2042237120) {
    int v105 = STACK[0x23C];
  }
  LODWORD(STACK[0x248]) = v105;
  if (v109 == 2042237120) {
    int v111 = v108;
  }
  else {
    int v111 = a71;
  }
  LODWORD(STACK[0x23C]) = v111;
  if (v109 == 2042237120) {
    int v112 = a71;
  }
  else {
    int v112 = v108;
  }
  LODWORD(STACK[0x240]) = v112;
  int v113 = STACK[0x3D4];
  if (v109 != 2042237120) {
    int v113 = STACK[0x3D0];
  }
  LODWORD(STACK[0x228]) = v113;
  int v114 = STACK[0x208];
  if (v109 != 2042237120) {
    int v114 = a75;
  }
  LODWORD(STACK[0x2D8]) = v114;
  int v115 = STACK[0x5C0];
  LODWORD(STACK[0x550]) = LODWORD(STACK[0x5C0]) ^ 0xCC9E23DB;
  LODWORD(STACK[0x5E0]) = v115 & 0xBC404D80;
  LODWORD(STACK[0x268]) = v86;
  LODWORD(STACK[0x500]) = a66 ^ v86;
  LODWORD(STACK[0x380]) = ((v87 | 0x70) - 1735919624) ^ LODWORD(STACK[0x3C0]);
  LODWORD(STACK[0x238]) = v115 ^ 0xC02A84F7;
  STACK[0x658] = (v87 | 0x70) ^ 0x60DC9279u;
  int v116 = STACK[0x390];
  LODWORD(STACK[0x254]) = a74;
  if (!v110) {
    int v116 = a74;
  }
  LODWORD(STACK[0x208]) = v116;
  LODWORD(STACK[0x47C]) = a70;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)*(&off_10025C670
                                                             + ((1011 * ((v76 - 461865809) < 2)) ^ (v87 | 0x70)))
                                                   - 8))( 1300117685LL,  2311869588LL);
}

void sub_1000EEA4C()
{
}

uint64_t sub_1000EEA5C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  LODWORD(STACK[0x27C]) = LODWORD(STACK[0x200]) - LODWORD(STACK[0x230]);
  int v75 = a69 + LODWORD(STACK[0x5E0]);
  int v294 = v75;
  unint64_t v76 = (v73 ^ 0x22AB0A96EE5D8244LL)
      + ((v73 >> 27) ^ 0xA820320E51694C58LL)
      + ((v73 >> 26) & 0x2BF7EFC2F4LL ^ 0xFFFFFFF75D3D7F4FLL)
      + 0x57DFCDF5FBF7E17CLL;
  unint64_t v77 = ((2 * v76) & 0x9FDEDD5FB57EEFECLL)
      + (v76 ^ 0x4FEF6EAFDABF77F6LL)
      + (((((2 * v76) & 0x9FDEDD5FB57EEFECLL) + (v76 ^ 0x4FEF6EAFDABF77F6LL) - 0x4FEF6EAFDABF77F6LL) >> 14) ^ 0xE2D024528B0C0A20LL)
      - (((((2 * v76) & 0x9FDEDD5FB57EEFECLL) + (v76 ^ 0x4FEF6EAFDABF77F6LL) - 0x4FEF6EAFDABF77F6LL) >> 13) & 0x7B75AE9E7EBBELL);
  unint64_t v78 = v77
      + (((v77 - 0x32BF930265CB8216LL) >> 6) ^ 0x8A900001D47E22BBLL)
      - (((v77 - 0x32BF930265CB8216LL) >> 5) & 0x2DFFFFC5703BA88LL)
      + 2;
  unint64_t v79 = v78 - ((2 * v78 - 0x7A9F2608749349A6LL) & 0xB4F9ED3E62352F8ELL) - 0x62D29C65092F0D0CLL;
  unint64_t v80 = ((2 * v79) ^ 0xB4F9ED3E62352F8ELL)
      - ((2 * ((2 * v79) ^ 0xB4F9ED3E62352F8ELL)) & 0x6D5BA94BC5721C4LL)
      - 0x7C9522B5A1D46F1ELL;
  uint64_t v81 = (v79 ^ 0x6A63EC272683BA92LL)
      + (v80 & 0x603E35702F325AAALL ^ 0x2F93CABD71DF775DLL)
      + ((2 * v80) & 0x40702AE05E608554LL ^ 0x502A801C400144LL)
      - 0x2FB9DFFD7FFD67FFLL;
  unint64_t v82 = ((2 * v81) & 0xBFB73D87F1BBFE30LL)
      + (v81 ^ 0x5FDB9EC3F8DDFF18LL)
      + (((((2 * v81) & 0xBFB73D87F1BBFE30LL) + (v81 ^ 0x5FDB9EC3F8DDFF18LL) - 0x5FDB9EC3F8DDFF18LL) >> 24) ^ 0x1050101400280050LL)
      - (((((2 * v81) & 0xBFB73D87F1BBFE30LL) + (v81 ^ 0x5FDB9EC3F8DDFF18LL) - 0x5FDB9EC3F8DDFF18LL) >> 23) & 0x1D7FFAFFF5ELL);
  unint64_t v83 = v82
      + (((v82 - 0x702BAED7F905FF68LL) >> 14) ^ 0xE0482C41080A0008LL)
      - (((v82 - 0x702BAED7F905FF68LL) >> 13) & 0x7A77DEFEBFFEELL);
  unint64_t v84 = v83
      + (((v83 - 0x5073DB19010FFF70LL) >> 6) ^ 0x55BFFF7BBFF27FEFLL)
      + (((v83 - 0x5073DB19010FFF70LL) >> 5) & 0x37FFEF77FE4FFDELL)
      + 2;
  unint64_t v85 = v84 - ((2 * v84 - 0x4C67B5298204FEC2LL) & 0xB6A1C5FC108FDFD8LL) + 0x351D08694745708BLL;
  unint64_t v86 = ((2 * ((v85 ^ 0xDB50E2FE0847EFECLL) - 0x5C4C23E8A21DDE13LL)) & 0xFEF9575619EE7F7ALL)
      + (((v85 ^ 0xDB50E2FE0847EFECLL) - 0x5C4C23E8A21DDE13LL) ^ 0xFF7CABAB0CF73FBDLL);
  unint64_t v87 = (((v86 + 0x835454F308C043LL) >> 27) ^ 0xECF62BFD3BFB0AEDLL)
      + v86
      + (((v86 + 0x835454F308C043LL) >> 26) & 0x3A77F615DALL);
  unint64_t v88 = v87 - ((2 * v87 + 0x271A50AF6E1B6AACLL) & 0xA8493C47D83AEF48LL) - 0x184E39845CD4D306LL;
  unint64_t v89 = 2
      * ((((v88 >> 12) ^ 0xD4249E23EC1D7LL) & (v88 ^ 0xD4249E23EC1D77A4LL))
       - ((2 * (((v88 >> 12) ^ 0xD4249E23EC1D7LL) & (v88 ^ 0xD4249E23EC1D77A4LL))) & 0xF535A16BE483CLL))
      + 0x2D8F535A16BE483CLL;
  unint64_t v90 = (v88 ^ 0xD429DC6A0E23B673LL ^ (v88 >> 12))
      + (v89 ^ 0x56746AAEE121B773LL)
      - 0x7BFB39F4F79FFF4FLL
      + ((2 * v89) & 0x77F673E9EF3FFE9CLL ^ 0x531622A02D3C9018LL);
  unint64_t v91 = ((2 * v90) & 0xF77F5FCC77D56FFELL)
      + (v90 ^ 0x7BBFAFE63BEAB7FFLL)
      + (((((2 * v90) & 0xF77F5FCC77D56FFELL) + (v90 ^ 0x7BBFAFE63BEAB7FFLL) - 0x7BBFAFE63BEAB7FFLL) >> 2) ^ 0x2CC00003028A03LL)
      - (((((2 * v90) & 0xF77F5FCC77D56FFELL) + (v90 ^ 0x7BBFAFE63BEAB7FFLL) - 0x7BBFAFE63BEAB7FFLL) >> 1) & 0x7FA67FFFF9FAEBF8LL)
      + 1;
  unint64_t v92 = v91 - ((2 * v91 + 0x827203382257BFALL) & 0xBDB803C1AB050236LL) + 0x62EF91FA96953F18LL;
  unint64_t v93 = ((2 * ((v92 ^ 0xDEDC01E0D582811BLL) + 0x138484D3C02C2C4ELL)) & 0xFEB5FF9B7FBFA7F6LL)
      + (((v92 ^ 0xDEDC01E0D582811BLL) + 0x138484D3C02C2C4ELL) ^ 0x7F5AFFCDBFDFD3FBLL);
  unint64_t v94 = v93
      + (((v93 - 0x7F5AFFCDBFDFD3FBLL) >> 30) ^ 0xA285221C810A0099LL)
      - (((v93 - 0x7F5AFFCDBFDFD3FBLL) >> 29) & 0x6FDEBFECCLL);
  unint64_t v95 = v94
      + (((v94 - 0x21E021EA40E9D494LL) >> 12) ^ 0x42124229120A80LL)
      - (((v94 - 0x21E021EA40E9D494LL) >> 11) & 0x1BDB7BADDBEAFELL);
  unint64_t v96 = v95
      + (((v95 - 0x2222342C69FBDF14LL) >> 7) ^ 0x800006878400088LL)
      - (((v95 - 0x2222342C69FBDF14LL) >> 6) & 0x3FFFF2F0F7FFEEELL)
      + 3;
  uint64_t v97 = v96 - ((2 * v96 + 0x2BBB96D63B8840C2LL) & 0x3F1837394BF6FBDCLL) - 0xA9618F83C4061B1LL;
  unint64_t v98 = ((2 * ((v97 ^ 0x1F8C1B9CA5FB7DEELL) + 0x3DEAA251E4C860FCLL)) & 0xB31FF5FC7F34BBFELL)
      + (((v97 ^ 0x1F8C1B9CA5FB7DEELL) + 0x3DEAA251E4C860FCLL) ^ 0x598FFAFE3F9A5DFFLL);
  unint64_t v99 = (((v98 - 0x598FFAFE3F9A5DFFLL) >> 31) ^ 0xFE6DDF43FDC3FECFLL)
      + v98
      + (((v98 - 0x598FFAFE3F9A5DFFLL) >> 30) & 0x3FB87FD9ELL);
  unint64_t v100 = (((v99 - 0x57FDDA423D5E5CCELL) >> 8) ^ 0xBFA2D9FCBC659CF7LL)
       + v99
       + (((v99 - 0x57FDDA423D5E5CCELL) >> 7) & 0x145B3F978CB39EELL);
  unint64_t v101 = (((v100 - 0x17A0B43EF9C3F9C5LL) >> 7) ^ 0x7E6ADDFBEDFFF4FFLL)
       + v100
       + (((v100 - 0x17A0B43EF9C3F9C5LL) >> 6) & 0xD5BBF7DBFFE9FELL);
  unint64_t v102 = v101 - ((2 * v101 - 0x2C172475CF87DD88LL) & 0xCAF237933EB421C4LL) - 0x309276714869DDE2LL;
  unint64_t v103 = (v102 ^ 0x5B35D81772F7642DLL)
       + ((v102 >> 30) ^ 0x8201080974F66135LL)
       + ((v102 >> 29) & 0x7CFBDFD2ELL ^ 0xFFFFFFFD36533FD5LL)
       + 0x7DFEF7F7E7DEFE99LL;
  unint64_t v104 = (((((2 * v103) & 0xB6CFF7FFFEC99F72LL) + (v103 ^ 0x5B67FBFFFF64CFB9LL) - 0x5B67FBFFFF64CFB9LL) >> 13) ^ 0xEBDFFB7AFF2FBE3FLL)
       + ((2 * v103) & 0xB6CFF7FFFEC99F72LL)
       + (v103 ^ 0x5B67FBFFFF64CFB9LL)
       + (((((2 * v103) & 0xB6CFF7FFFEC99F72LL) + (v103 ^ 0x5B67FBFFFF64CFB9LL) - 0x5B67FBFFFF64CFB9LL) >> 12) & 0xFF6F5FE5F7C7ELL);
  unint64_t v105 = v104
       + (((v104 - 0x4747F77AFE948DF8LL) >> 2) ^ 0x2C4A001243000888LL)
       - (((v104 - 0x4747F77AFE948DF8LL) >> 1) & 0x276BFFDB79FFEEEELL)
       + 1;
  uint64_t v106 = v105 - ((2 * v105 + 0x18DC10E57CD6D2FELL) & 0x5FBCFB88C3BA7C66LL) - 0x43B379C8DFB7584ELL;
  uint64_t v107 = ((2 * ((v106 ^ 0x2FDE7DC461DD3E33LL) - 0x3181FFAFEC090B44LL)) & 0x6BBE9FDDE7FF7EEALL)
       + (((v106 ^ 0x2FDE7DC461DD3E33LL) - 0x3181FFAFEC090B44LL) ^ 0x35DF4FEEF3FFBF75LL);
  unint64_t v108 = v107
  unint64_t v109 = v108
       + (((v108 + 0x65DE8010919EBFCBLL) >> 9) ^ 0xA3F75F57D2FEACF7LL)
       + (((v108 + 0x65DE8010919EBFCBLL) >> 8) & 0xEEBEAFA5FD59EELL);
  unint64_t v110 = v109
       + ((v109 - 0x3E18DF47415FED2CLL) & 0xB41FFEBFCFFEFEF6LL)
       + (((v109 - 0x3E18DF47415FED2CLL) >> 1) ^ 0xDA0FFF5FE7FF7F7BLL)
       + 1;
  uint64_t v111 = v110 - ((2 * v110 + 0x4FAE42B1AD4126B0LL) & 0x6BED05A3C3F54FEALL) + 0x1DCDA42AB89B3B4DLL;
  unint64_t v112 = ((2 * ((v111 ^ 0x35F682D1E1FAA7F5LL) + 0x38FC44A9709D19CALL)) & 0x499DE7F5BF6FFA7ALL)
       + (((v111 ^ 0x35F682D1E1FAA7F5LL) + 0x38FC44A9709D19CALL) ^ 0xA4CEF3FADFB7FD3DLL);
  unint64_t v113 = v112
       + (((v112 + 0x5B310C05204802C3LL) >> 24) ^ 0xE50806406209E4LL)
       - (((v112 + 0x5B310C05204802C3LL) >> 23) & 0x1F37F3BEC36LL);
  unint64_t v114 = v113
       + (((v113 + 0x5A4C03FEDFE5F8DFLL) >> 15) ^ 0x1B40434004CCC840LL)
       - (((v113 + 0x5A4C03FEDFE5F8DFLL) >> 14) & 0x3797FF6666F7ELL);
  unint64_t v115 = v114
       + (((v114 + 0x3F0BC0BEDB19309FLL) >> 8) ^ 0xED9FFBFBBFEB2BFELL)
       + (((v114 + 0x3F0BC0BEDB19309FLL) >> 7) & 0x13FF7F77FD657FCLL)
       + 2;
  uint64_t v116 = v115 - ((2 * v115 + 0x22D78986365C093ELL) & 0x61999BF07E126E9ELL) - 0x7DC76D44A5C8C412LL;
  unint64_t v117 = (v116 ^ 0x30CCCDF83F09374FLL)
       - ((2 * (v116 ^ 0x30CCCDF83F09374FLL) + 0x44FFD385047FBDCELL) & 0x703090F8F7F191BCLL)
       - 0x6567CDC101C7583BLL;
  uint64_t v118 = 2
       * ((((v117 >> 29) ^ 0x1C0C243E3LL) & (v117 ^ 0x3818487C7BF8C8DELL))
        - ((2 * (((v117 >> 29) ^ 0x1C0C243E3LL) & (v117 ^ 0x3818487C7BF8C8DELL))) & 0xE8BD7A2EALL))
       - 0x3423CEF174285D16LL;
  unint64_t v119 = (v117 ^ 0x3818487DBB3A8B3DLL ^ (v117 >> 29))
       + (v118 ^ 0xBA8BFEE19C216F3FLL)
       - 0x7157CFEF17F6CDD5LL
       + ((2 * v118) & 0xE2AF9FDE2FED9BA8LL ^ 0x82A8021C07AD0180LL);
  unint64_t v120 = ((2 * v119) & 0xEFFCFF6FFF7AFDFELL)
       + (v119 ^ 0x77FE7FB7FFBD7EFFLL)
       + (((((2 * v119) & 0xEFFCFF6FFF7AFDFELL) + (v119 ^ 0x77FE7FB7FFBD7EFFLL) - 0x77FE7FB7FFBD7EFFLL) >> 9) ^ 0x3010024081000800LL)
       - (((((2 * v119) & 0xEFFCFF6FFF7AFDFELL) + (v119 ^ 0x77FE7FB7FFBD7EFFLL) - 0x77FE7FB7FFBD7EFFLL) >> 8) & 0xDFFB7EFDFFEFFELL);
  LODWORD(v120) = v120
                + (((v120 + 0x57F17E077F427901LL) >> 5) ^ 0xD77EDFF9)
                + (((v120 + 0x57F17E077F427901LL) >> 4) & 0xAEFDBFF2)
                + 1;
  int v121 = v106 ^ v92 ^ v71 ^ (v120 - ((2 * v120 + 1334260238) & 0xAA881EBE) + 2097653862);
  LODWORD(v106) = (((v121 ^ 0xC19187F4) + 1) ^ 3) + 2 * ((v121 ^ 0xC19187F4) + 1) + 5;
  unsigned int v122 = (v121 & 3) + (v121 & 7 ^ 0xFFFFFFFB) + (v121 & 3 | 0x45FC649C) + 1;
  int v123 = (v106 & 7) - ((2 * v106) & 8) + 657829404;
  LODWORD(STACK[0x230]) = v123;
  unint64_t v124 = v123 ^ 0x2735AE1Cu;
  uint64_t v125 = 255LL;
  if ((v121 & 3) + (v121 & 7 ^ 0xFFFFFFFB) + (v121 & 3 | 0x45FC649C) == 1174168730) {
    uint64_t v125 = 0LL;
  }
  uint64_t v126 = v125 << (v123 ^ 0x1Cu);
  unint64_t v127 = (v125 << v124) - ((2 * (v125 << v124)) & 0xD7A4E9D35551F6F0LL) - 0x142D8B1655570488LL;
  int v128 = 1366313899 - (((v127 >> 4) | 0xFFFFFFFC) + ((v127 >> 4) & 0xC));
  LODWORD(v126) = (((((16 * v127) ^ 0x80) - ((32 * (_BYTE)v126) & 0x40) + 39) & 0xF0 ^ 0xC822CC5F) - 1) ^ 0xC820D4F2;
  LODWORD(v126) = (((2 * v126) & 0xF0F0F0F0) - v126 - 1853750138) ^ 0x91801C0A | ((v128 & 0x1400821 ^ 0x808DB001)
                                                                                + (v128 ^ 0x51700FA8)
                                                                                - ((v128 ^ 0x51700FA8) & 0x21)) ^ 0x81CDFC21;
  LODWORD(v126) = v126 - ((2 * v126) & 0xA2) - 47;
  HIDWORD(v129) = v126 ^ 2;
  LODWORD(v129) = (v126 ^ 0xFFFFFF9F) << 24;
  int v130 = ((((v129 >> 28) - ((2 * (v129 >> 28)) & 0xC6) + 99) ^ 0xA8)
        - ((2 * (((v129 >> 28) - ((2 * (v129 >> 28)) & 0xC6) + 99) ^ 0xA8)) & 0x132)
        - 324523367) ^ 0xECA82A99;
  if ((v121 & 3) + (v121 & 7 ^ 0xFFFFFFFB) + (v121 & 3 | 0x45FC649C) == 1174168730) {
    int v131 = 0;
  }
  else {
    int v131 = v130;
  }
  BOOL v132 = (STACK[0x5E8] & 2) == 0;
  int v133 = STACK[0x5D8];
  if ((STACK[0x5E8] & 2) == 0) {
    int v133 = STACK[0x5D0];
  }
  LODWORD(STACK[0x200]) = v133;
  int v134 = STACK[0x4C0];
  if (v132) {
    int v134 = STACK[0x498];
  }
  int v295 = v134;
  int v135 = STACK[0x5C8];
  if (!v132) {
    int v135 = STACK[0x5A0];
  }
  LODWORD(STACK[0x2B8]) = v135;
  int v136 = STACK[0x2AC];
  if (v132) {
    int v136 = STACK[0x278];
  }
  LODWORD(STACK[0x3D0]) = v136;
  int v137 = STACK[0x318];
  if (v132) {
    int v137 = STACK[0x2E8];
  }
  LODWORD(STACK[0x2AC]) = v137;
  int v138 = STACK[0x640];
  if (!v132) {
    int v138 = STACK[0x580];
  }
  LODWORD(STACK[0x5C8]) = v138;
  int v139 = STACK[0x2B0];
  if (!v132) {
    int v139 = STACK[0x2A4];
  }
  LODWORD(STACK[0x3D4]) = v139;
  unsigned int v140 = v102 ^ v85 ^ v72 ^ v116;
  unsigned int v141 = STACK[0x5C0];
  unsigned int v142 = (LODWORD(STACK[0x648]) ^ 0xF206D0B7)
       + ((2092662510 * (v141 ^ 0x58E2B514)) & 0xE3F1FFFE)
       + ((1046331255 * (v141 ^ 0x58E2B514)) ^ 0xF1F8FFFF)
       + 235339777;
  int v143 = a65 - a71;
  LODWORD(STACK[0x3F8]) = a65 - a71;
  unsigned int v144 = ((a65 - a71) ^ 0xC12E21D5)
       + ((a65 - a71) & 0x87 ^ 0x24911402)
       - (((a65 - a71) ^ 0xC12E21D5) & 0xC0060087);
  LODWORD(STACK[0x3BC]) = v144 ^ 0x25B935D6;
  int v145 = v75 ^ 0x5AED3762;
  unsigned int v146 = ((2 * v142) & 0xFFBCBFF6)
       + (v142 ^ 0xFFDE5FFB)
       - 1046331255 * (((2 * ((v144 ^ 0x25B935D6) + v145)) & 0xF6CFF77E) + (((v144 ^ 0x25B935D6) + v145) ^ 0xFB67FBBF));
  LODWORD(STACK[0x640]) = (STACK[0x658] - 1625067400) | 0x7D;
  unsigned int v147 = v97 ^ v79 ^ v74 ^ v111;
  unsigned int v148 = (((2 * (v147 & 0x7F ^ 0x34)) | 0xADF64240) - (v147 & 0x7F ^ 0x34) + 688185056) ^ 0xD8FB5122;
  unsigned int v149 = ((v148 | 0x6D290961) - (v148 | 0x92D6F69E) - 1831405922) ^ 0x6329790B;
  LODWORD(STACK[0x580]) = 33686018 * v149;
  int v150 = 16843009 * v149 - ((33686018 * v149) & 0x48F82B48);
  unsigned int v151 = ((v147 & 0x39EE2800 ^ 0x30C60053) + (v147 & 0xC611D780 ^ 0xC610D401) - 2) ^ 0x35AB20CA;
  unsigned int v152 = (v151 | 0x882B943E) - (v151 | 0x77D46BC1) + 2010409921;
  unsigned int v153 = ((v127 ^ 0xA6 | 0x92FA8054) - (v127 ^ 0xA6 | 0x6D057FAB) + 1829076907) ^ 0x108A984A;
  unsigned int v154 = (v153 + 219775156 - ((2 * v153) & 0x1A331F48) + 3824) ^ 0x8F699764;
  unsigned int v155 = 16843009 * v154 - ((33686018 * v154) & 0xF6E1CF1A) + 2070996877;
  LODWORD(STACK[0x320]) = v121;
  unsigned int v156 = ((v121 & 0xFFFFFFF8 ^ 0x4D686600)
        + (v121 & 0xC8B6590 ^ 0x830192)
        - ((v121 & 0xFFFFFFF8 ^ 0x4D686600) & 0xC8B6590)) ^ 0x84020582;
  unsigned int v157 = (v131 & (v147 ^ 0xB1FD6796)) - ((2 * (v131 & (v147 ^ 0xB1FD6796))) & 0x482FA2D8) + 1679282540;
  int v158 = (v157 | (((257 * (_WORD)v154 - ((514 * (_WORD)v154) & 0xCF1A) - 6259) & 0x400 ^ 0x4B2) + 410) & 0x400) ^ 0x6417D16C;
  unsigned int v159 = (v158 - ((2 * v158) & 0x390D858E) - 595148089) ^ v155 & 0xFFFFFBFF;
  LODWORD(STACK[0x4C0]) = v159;
  int v160 = v159 ^ v157;
  int v161 = STACK[0x2E0];
  int v162 = ((v147 ^ (v147 >> 8)) & 0x11 ^ 0x4106010) + ((v147 ^ (v147 >> 8)) & 0xEE ^ 0x20E0000F) - 1;
  unsigned int v163 = (v160 ^ v161 ^ ((v161 ^ 0xA9873A67)
                       + (v160 ^ 0xC3E1F026)
                       + 1
                       - ((2 * ((v161 ^ 0xA9873A67) + (v160 ^ 0xC3E1F026) + 1)) & 0x9A3F8426)
                       - 853556717) ^ ((v160 ^ v161 ^ 0x6A66CA41)
                                     - ((2 * (v160 ^ v161 ^ 0x6A66CA41) + 2) & 0x726705E)
                                     + 59979824) ^ 0x5B15CF82)
       + (v160 ^ 0xC3E1F026);
  int v164 = v163 - ((2 * v163) & 0x2E380FF6) + 387713019;
  int v165 = ((HIWORD(v147) & 0x28 ^ 0x7BC11021) + (HIWORD(v147) & 0xD7) - 1) ^ 0x5BE0827D;
  unsigned int v166 = (((2 * v165) | 0xCFFF8038) - v165 + 402669540) ^ HIBYTE(v147) ^ ((v162 & 0x42010C2 ^ 0x10C1082)
                                                                        + (v162 ^ 0x2CB0E568)
                                                                        - ((v162 ^ 0x2CB0E568) & 0x84090C2)) ^ 0xC2F24715;
  LODWORD(STACK[0x47C]) = 16843009 * v166 - ((33686018 * v166) & 0xC36A59E2) + 1639263473;
  if ((((~(v140 & 0x10) & 0x1688993) + (v140 & 0x10 | 0x6844008)) | 0x98100240) - (v140 & 0x10 | 0x4840008) == -1686582317) {
    int v167 = 16;
  }
  else {
    int v167 = 240;
  }
  unsigned int v168 = HIWORD(v140) ^ (v140 >> 8) ^ (v167
                                     + (v140 ^ 0xF68883ED)
                                     - 2 * ((v167 + (v140 ^ 0xF68883ED)) & 0x53DF0A2E ^ (v140 ^ 0xF68883ED) & 4)
                                     + 298);
  LODWORD(STACK[0x318]) = v140 ^ 0x78424EEE;
  int v169 = HIBYTE(v140) ^ 0x804EA ^ ((v168 ^ 0x5A101142)
                                 + (v168 & 0x50 ^ 0xA6410)
                                 - ((v168 ^ 0x5A101142) & 0x1150)) & 0x807FF;
  LODWORD(STACK[0x498]) = 16843009 * v169 - ((33686018 * v169) & 0xE87EDFD6) - 197169173;
  int v170 = v122 ^ 0x45FC649B;
  LODWORD(STACK[0x658]) = 1544212497 * (v122 ^ 0x45FC649B)
                        - ((940941346 * (v122 ^ 0x45FC649B)) & 0x2C29FDE8)
                        + 370474740;
  int v171 = LODWORD(STACK[0x328]) ^ 0x505E04F6;
  LODWORD(STACK[0x3A8]) = 1544212497 * v171 - ((940941346 * v171) & 0x7B21C154) - 1114578774;
  LODWORD(STACK[0x5D8]) = v143 ^ 0xEFB23584;
  int v172 = dword_10021B3D0[(v143 ^ 0xEFB23584) % 0x101];
  unsigned int v173 = STACK[0x650];
  unsigned int v174 = (LODWORD(STACK[0x210]) ^ 0xF206D0B7)
       + ((826806322 * LODWORD(STACK[0x650])) & 0x5FED6F6E)
       + ((-1734080487 * LODWORD(STACK[0x650])) ^ 0xAFF6B7B7)
       + 1342785609;
  unsigned int v175 = (v172 ^ 0xE34B6652 ^ (((16 * v172) ^ 0xCA58B7F0) - ((2 * ((16 * v172) ^ 0xCA58B7F0)) & 0x6B158B20) + 898287006))
       + 1;
  unsigned int v176 = (LODWORD(STACK[0x274]) ^ 0xFE6B62C1) + (v175 ^ 0xDFF1D79B) + ((2 * v175) & 0xBFE3AF36) + 537798757;
  int v177 = ((2 * v174) & 0xE75F5D7A)
       + (v174 ^ 0x73AFAEBD)
       + ((-826806322 * v124) & 0xDFD70976)
       + ((1734080487 * v124) ^ 0xEFEB84BB);
  unsigned int v178 = v177 - ((2 * v177 + 952736016) & 0xE7F05160) - 1872956104;
  unsigned int v179 = STACK[0x3C0];
  int v180 = STACK[0x3D8];
  int v181 = v150 + 612111780;
  unsigned int v182 = (v150 + 612111780) ^ 0x247C15A4;
  LODWORD(STACK[0x5D0]) = v182;
  unsigned int v183 = (dword_1002165D0[v182 % 0x101] ^ 0x550B9F6) + (v176 ^ 0xBFDB0BBB) + ((2 * v176) & 0x7FB61776) + 1076163653;
  int v184 = v183 - ((2 * v183) & 0x2A88915A) + 356796589;
  LODWORD(STACK[0x2B4]) = -1650248603 * v171 - ((189163722 * v171) & 0xA3084D4) - 2062007702;
  HIDWORD(v290) = -414842303 * v180 - 1475485739;
  LODWORD(STACK[0x274]) = v149;
  LODWORD(v290) = -414842303 * v149 - 1524737157;
  LODWORD(STACK[0x224]) = -1650248603 * (v122 ^ 0x45FC649B)
                        - ((994470090 * (v122 ^ 0x45FC649B)) & 0xC58E1DBE)
                        - 490271009;
  LODWORD(a5_Block_object_dispose(va, 8) = (((v179 << 8) ^ 0x92D02300) - ((2 * ((v179 << 8) ^ 0x92D02300)) & 0xED030000) - 159285125) ^ LODWORD(STACK[0x218]);
  LODWORD(STACK[0x5A0]) = v171;
  int v185 = -2066764949 * v171 - ((161437398 * v171) & 0x54B1C472) - 1437015495;
  unsigned int v186 = -2066764949 * v170 - ((161437398 * v170) & 0xA26D5D34) - 784945510;
  int v187 = (v179 ^ 0x1892D023) + (v179 ^ 0x1495076C ^ v178) + 1;
  STACK[0x5E0] = v124;
  unsigned int v188 = (dword_1002165D0[v124] ^ 0xFAAF4609) + 1;
  unsigned int v189 = (LODWORD(STACK[0x308]) ^ 0x6E12EA35) + (v188 ^ 0x57FDEAF7) + ((2 * v188) & 0xAFFBD5EE) - 1476258551;
  unsigned int v190 = (v178 ^ ((v178 ^ 0xC07D74F) - ((2 * (v178 ^ 0xC07D74F) + 2) & 0x17CC5060) - 1947850703) ^ (v187
                                                                                                  - ((2 * v187) & 0xF4EE355E)
                                                                                                  + 2054625967) ^ 0x2691A2F)
       + (v179 ^ 0x1892D023);
  LODWORD(a55) = (2 * v190) & 0x39334932;
  LODWORD(a54) = v190 - 1667652455;
  unsigned int v191 = (((v147 ^ 0x296720DC) - 257) ^ 0x79FDAE5D) - 2046668381 + ((2 * ((v147 ^ 0x296720DC) - 257)) & 0xF3FB5CBA);
  unsigned int v192 = (v189 ^ 0xFB3F7F3B)
       + (dword_10021B3D0[v173] ^ 0x22F45B8F ^ (((16 * dword_10021B3D0[v173]) ^ 0xCA58B7F0)
                                              - ((2 * ((16 * dword_10021B3D0[v173]) ^ 0xCA58B7F0)) & 0x17940F60)
                                              + 197789628))
       + ((2 * v189) & 0xF67EFE76)
       + 79724741;
  unsigned int v193 = v192 - ((2 * v192) & 0xC9A2BB78);
  LODWORD(STACK[0x4F0]) = v181;
  unsigned int v194 = (v181 ^ 0x52) + (v181 & 0xEF ^ 0x9AD) - ((v181 ^ 0x52) & 0xFFFFFFEF);
  unsigned int v195 = ((v156 | 0xC0DA8509) - (v156 | 0x3F257AF6) + 1059420918) ^ 0x5C3043A1;
  int v196 = STACK[0x320];
  unsigned int v197 = (8 * LODWORD(STACK[0x320])) ^ 0xC85E05D8;
  HIDWORD(v289) = (2 * v197) & 0x2ADE46B0;
  LODWORD(v289) = v197 - 1787878561;
  unsigned int v198 = v147 ^ 0xCE935101;
  unsigned int v199 = v191 % 0x101 - ((2 * (v191 % 0x101)) & 0x3BA) - 403410467;
  if ((v147 ^ 0x296720DC) <= 0x100) {
    unsigned int v199 = v147 ^ 0xCE935101;
  }
  LODWORD(STACK[0x2E0]) = v164 ^ v199 ^ dword_1002165D0[(v152 ^ 0x6231493F ^ v194) % 0x101] ^ dword_100215DB0[v199 ^ 0xE7F471DD];
  int v200 = STACK[0x5B8];
  int v201 = (LODWORD(STACK[0x480]) ^ 0x1D6DA579) + (LODWORD(STACK[0x5B8]) ^ 0x617BD0FD) + 1;
  unsigned int v202 = (LODWORD(STACK[0x5B8]) ^ 0x9E842F02) + (v201 ^ 0x7FF7D5FF) + ((2 * v201) & 0xFFEFABFE) - 2146948607;
  int v203 = v294 ^ 0x56D64527 ^ v144;
  HIDWORD(v28_Block_object_dispose(va, 8) = (2 * v146 + 1365003676) & 0xF80DFA30;
  LODWORD(v28_Block_object_dispose(va, 8) = v146 + 615850982;
  unsigned int v204 = (LODWORD(STACK[0x5B8]) ^ 0x9E842F02) % 0x101;
  int v205 = STACK[0x238];
  LODWORD(STACK[0x338]) ^= LODWORD(STACK[0x238]) ^ v203 ^ ((v203 ^ v141) >> 4);
  LODWORD(STACK[0x480]) = (v204 - ((2 * v204) & 0x42) - 2093557215) ^ LODWORD(STACK[0x200]) ^ dword_1002165D0[v204] ^ dword_100215DB0[(v204 - ((2 * v204) & 0x42) - 2093557215) ^ 0x8336DA21];
  int v206 = (v194 ^ 0x919 | v152 ^ 0x62314026) - ((2 * (v194 ^ 0x919 | v152 ^ 0x62314026)) & 0x36B9D0E6) - 1688409997;
  unsigned int v207 = v196 ^ 0x590BC0BB;
  int v208 = v196;
  unsigned int v209 = -1867863333 * (v196 ^ 0x590BC0BB) - ((559240630 * (v196 ^ 0x590BC0BB)) & 0xCD2DC740) + 1721164704;
  LODWORD(STACK[0x308]) = v198 ^ v295 ^ v206 ^ ((v206 ^ v147) >> 4);
  LODWORD(STACK[0x648]) = v170;
  int v210 = 2 * (v195 | v170);
  unsigned int v211 = (v195 | v170) - (v210 & 0xDD42368A);
  unsigned int v212 = ((v195 | v170) - (v210 & 0xBD1439F6) - 561373957) ^ 0xDE8A1CFB;
  unsigned int v213 = (LODWORD(STACK[0x3BC]) | v145) - ((2 * (LODWORD(STACK[0x3BC]) | v145)) & 0xE47F8CBC) + 1916782174;
  unsigned int v214 = v211 - 291431611;
  LODWORD(STACK[0x2B0]) = v213 ^ v205 ^ ((v213 ^ v141) >> 3) ^ v184;
  unsigned int v215 = v207 % 0x101;
  int v216 = dword_10021B3D0[((v211 - 291431611) ^ 0xEEA11B45) % 0x101];
  int v217 = LODWORD(STACK[0x380]) ^ LODWORD(STACK[0x5C8]) ^ v198;
  int v218 = LODWORD(STACK[0x498]) ^ LODWORD(STACK[0x47C]);
  LODWORD(STACK[0x238]) = v218 ^ 0xC8765741;
  LODWORD(STACK[0x2E8]) = v217 ^ (((v147 << 7) ^ 0xB3906E00)
                                - ((2 * ((v147 << 7) ^ 0xB3906E00)) & 0x5295AE00)
                                + 692770580) ^ v206 ^ (((v206 << 7) ^ 0xAE743980)
                                                     - ((2 * ((v206 << 7) ^ 0xAE743980)) & 0x569DD800)
                                                     + 726592586) ^ v218 ^ 0xC8765741 ^ ((v218 ^ v179) >> 4);
  unsigned int v219 = (v216 ^ 0x5344D449 ^ (((16 * v216) ^ 0xCA58B7F0) - ((2 * ((16 * v216) ^ 0xCA58B7F0)) & 0xB0AEF00) - 2054850683))
       + 1;
  unsigned int v220 = (LODWORD(STACK[0x2CC]) ^ LODWORD(STACK[0x3A8]) ^ 0xFDFCDBC6 ^ LODWORD(STACK[0x658]))
       + (v219 ^ 0xFB39F8BF)
       + ((2 * v219) & 0xF673F17E)
       + 80086849;
  unsigned int v221 = (LODWORD(STACK[0x310]) ^ 0xACEEDE4A) + 618059542;
  unsigned int v222 = (dword_100219F80[v215] ^ 0x491201E8) + (v220 ^ 0xFEE3FF63) + ((2 * v220) & 0xFDC7FEC6);
  LODWORD(STACK[0x310]) = (2 * v222 + 37224762) & 0x78A90740;
  LODWORD(STACK[0x200]) = v222 + 1030784061;
  unsigned int v223 = STACK[0x640];
  int v224 = STACK[0x270];
  LODWORD(STACK[0x5C8]) = (LODWORD(STACK[0x640]) - 1321319213) ^ LODWORD(STACK[0x270]);
  unsigned int v225 = ((2 * v221) & 0xBFD5DBEA)
       + (v221 ^ 0xDFEAEDF5)
       + ((826091506 * (v224 ^ 0xDBBD1696 ^ LODWORD(STACK[0x318]))) & 0x4D0C7D7E)
       + ((-1734437895 * (v224 ^ 0xDBBD1696 ^ LODWORD(STACK[0x318]))) ^ 0xA6863EBF);
  HIDWORD(v291) = (2 * v225 - 216160616) & 0xBDEA0924;
  unsigned int v226 = v225 + 1485033252;
  unsigned int v227 = v200 ^ LODWORD(STACK[0x620]) ^ v185 ^ v208 ^ v209 ^ v186 ^ (-1867863333 * v212
                                                                   - ((559240630 * v212) & 0x9C4A925E)
                                                                   + 1311066415);
  unint64_t v228 = STACK[0xB20];
  unint64_t v229 = (*(void *)(STACK[0xB20] + 8LL * ((*(void *)(STACK[0xB20] + 8 * (*(void *)STACK[0xB20] & 1LL)) & 1) == 0)) ^ 0x9696969696969696LL)
       + 393514633;
  unint64_t v230 = ((2 * v229) & 0xBB8E5DE2F3FFF316LL) + (v229 ^ 0x5DC72EF179FFF98BLL);
  int v231 = (v229 & 1 ^ 0x7BFCFBAF) + 2 * (v229 & 1) - 1111491109;
  if (v230 - 0x5DC72EF179FFF98BLL < 2) {
    int v231 = v230 - 1078132737;
  }
  STACK[0x620] = v228;
  int v232 = *(void *)(v228 + 8LL * (v231 - 968685962)) & 1;
  unsigned int v233 = (v232 ^ 0xFEDFFF9B) + 2 * v232 - 653121526;
  LODWORD(STACK[0x2A4]) = LODWORD(STACK[0x340]) ^ 0x20F8F818;
  LODWORD(STACK[0x210]) = v218;
  HIDWORD(a51) = (v218 << 8) ^ 0xA46D3400;
  HIDWORD(v292) = LODWORD(STACK[0x3F8]) ^ LODWORD(STACK[0x2AC]);
  LODWORD(STACK[0x3CC]) = v193 - 456041028;
  LODWORD(STACK[0x218]) = v214;
  int v234 = (8 * v214) ^ 0x7508DA28;
  HIDWORD(v293) = (2 * v234) & 0x22966130;
  LODWORD(v293) = v234 + 290140315;
  int v235 = LODWORD(STACK[0x550]) ^ LODWORD(STACK[0x244]);
  LODWORD(STACK[0x278]) = v147;
  int v236 = v235 ^ v147;
  LODWORD(STACK[0x244]) = v226 + 2234;
  LODWORD(STACK[0x2CC]) = v236;
  LODWORD(STACK[0x3BC]) = v236 ^ 0x718EB765;
  unsigned int v237 = LODWORD(STACK[0x5B0]) ^ 0xC2704167;
  LODWORD(STACK[0x3C0]) = v227 ^ 0x4B704A3A;
  LODWORD(STACK[0x658]) = LODWORD(STACK[0x530]) ^ 0x1D9BCD52;
  BOOL v238 = v233 < 0xD7F227A5;
  unint64_t v239 = 0xB3D5C9433319E527LL * (*(void *)STACK[0x620] ^ 0x9696969696969696LL)
       - ((0x67AB92866633CA4ELL * (*(void *)STACK[0x620] ^ 0x9696969696969696LL)) & (v223 ^ 0x526236DE107FB677LL))
       + 0x29311B6F083FD905LL;
  unint64_t v240 = ((2 * (v239 ^ 0x60A63CE378921450LL)) & 0xFFF7FB7FAF5CFEA0LL) + (v239 ^ 0x1F5DC15CAF3C6B00LL);
  unint64_t v241 = (((v240 - 0x7FFBFDBFD7AE7F50LL) >> 32) ^ 0xF97FEC6FFFBDFA7ELL)
       + v240
       + (((v240 - 0x7FFBFDBFD7AE7F50LL) >> 31) & 0x1FF7BF4FCLL);
  unint64_t v242 = (((v241 - 0x797BEA2FD76C79CELL) >> 16) ^ 0xCFBEF7FCEE7EBF79LL)
       + v241
       + (((v241 - 0x797BEA2FD76C79CELL) >> 15) & 0x1EFF9DCFD7EF2LL);
  unint64_t v243 = (((v242 - 0x493AE22CC5EB3947LL) >> 8) ^ 0xDDD93397AF36F7FBLL)
       + v242
       + (((v242 - 0x493AE22CC5EB3947LL) >> 7) & 0x1B2672F5E6DEFF6LL);
  int v244 = (2 * v243 - ((4 * v243 + 729234168) & 0x493F0920) - 1168432628) & 0xDF03F2AC ^ 0x440280A0;
  int v245 = (v243 - 1965175106) ^ 0x9903BFBD ^ ((((v244 | 0x59001C99) - (v244 | 0xA6FFE366) - 1493179546) & 0x2AB2C ^ 0x2A305)
                                           + (((v244 | 0x59001C99) - (v244 | 0xA6FFE366) - 1493179546) & 0xFFFD54D1)
                                           - 1);
  int v246 = v245 - ((2 * v245) & 0xD937F934);
  int v247 = v243 + 20200376 + ~((2 * v243 - 669330426) & 0x2A4DA368);
  unsigned int v248 = (((2 * v247) ^ 0x2A4DA368) - 2 * (((2 * v247) ^ 0x2A4DA368) & 0x1A6D543A ^ (2 * v247) & 0x10) - 1704111062) & 0xDF03F2AC ^ 0xCC0070AC;
  unsigned int v249 = (-296772801 - (v248 | 0xEE4F9B3F) + (v248 | 0x11B064C0)) ^ 0x25906C86;
  unsigned int v250 = ((2 * v249) & 0x213E775E) - v249;
  unint64_t v251 = v243 - ((2 * v243 - 0x1A3C0A296585F570LL) & 0xAE226832C36DB6A8LL) + 0x49F32F04AEF3E09CLL;
  LODWORD(v243) = (2 * (v243 - ((2 * v243 - 1703277936) & 0xC36DB6A8) - 1359748964)) ^ 0xC36DB6A8;
  LODWORD(v243) = (v243 - ((2 * v243) & 0x69DDE254) - 1259409109) & 0xDF03F2AC ^ 0x9D0342AC;
  int v252 = ((((2 * v243) | 0xE6526CB6) - v243 + 215402917) & 0x73D0F3F8 ^ 0x1D04320)
       + ((((2 * v243) | 0xE6526CB6) - v243 + 215402917) ^ 0xFA28B4DE)
       - (((((2 * v243) | 0xE6526CB6) - v243 + 215402917) ^ 0xFA28B4DE) & 0x73D0F3F9);
  unint64_t v253 = ((2 * (v239 ^ 0x7E202F7669890251LL ^ v251)) & 0x576AFAED6FFF0DD6LL)
       + (v239 ^ 0x7E202F7669890251LL ^ v251 ^ 0xABB57D76B7FF86EBLL);
  unint64_t v254 = (((v253 + 0x544A828948007915LL) >> 32) ^ 0x5B9BF39EDDFFFFFDLL)
       + v253
       + (((v253 + 0x544A828948007915LL) >> 31) & 0x1BBFFFFFALL);
  unint64_t v255 = (((v254 - 0x751711595FF86E8LL) >> 16) ^ 0x3F7FCFFBEF7ED6DFLL)
       + v254
       + (((v254 - 0x751711595FF86E8LL) >> 15) & 0x19FF7DEFDADBELL);
  unint64_t v256 = (((v255 - 0x46D14111857E5DC7LL) >> 8) ^ 0xFF4DFFF7FF7D1BF9LL)
       + v255
       + (((v255 - 0x46D14111857E5DC7LL) >> 7) & 0x9BFFEFFEFA37F2LL);
  int v257 = (2 * v256 - ((4 * v256 + 739383552) & 0x3A0E587C) - 1827653441) & 0xDF03F2AC ^ 0x95012A3E;
  int v258 = (v256 + 2063894080) ^ 0x71D20FFB ^ (((2 * v257) | 0xF3A00BD2) - v257 - 2043676137);
  int v259 = v256 - ((2 * v256 - 1201126646) & 0x1E41B906) - 346751480;
  int v260 = ((2 * v259) ^ 0x1E41B906) - ((2 * ((2 * v259) ^ 0x1E41B906)) & 0x6C8F3224) - 1236821741;
  uint64_t v261 = ((v260 & 0xDF03F2AC ^ 0xDD028220)
        + (v260 & 0x40039020 ^ 0x851453)
        - ((v260 & 0xDF03F2AC ^ 0xDD028220) & 0x40039020)) ^ v259;
  uint64_t v262 = v256 - ((2 * v256 + 0x27AD9F4C7AC77994LL) & 0x627DAB6280C9A6C2LL) + 0x515A5577DC8902BLL;
  int v263 = ((2 * v262) ^ 0x80C9A6C2) - ((2 * ((2 * v262) ^ 0x80C9A6C2)) & 0x541511D8) - 1442150164;
  unsigned int v264 = ((v263 & 0x8801B228 ^ 0xA0008273) + (v263 & 0x57024084 ^ 0x54024085) - 2) ^ 0xEA20167A;
  unsigned int v265 = v264 - ((2 * v264) & 0x24026100);
  int v266 = (v237 ^ v251 ^ 0x6D412A71 ^ v252) - ((2 * (v237 ^ v251 ^ 0x6D412A71 ^ v252)) & 0x83001426);
  unint64_t v267 = ((2 * (v239 ^ 0x180FCEDE485B0A64LL ^ v262)) & 0xBEEFFF97BF8BDDE6LL)
       + (v239 ^ 0x180FCEDE485B0A64LL ^ v262 ^ 0xDF77FFCBDFC5EEF3LL);
  unint64_t v268 = (((v267 + 0x20880034203A110DLL) >> 32) ^ 0x5FEFFC7FF5C5EFF9LL)
       + v267
       + (((v267 + 0x20880034203A110DLL) >> 31) & 0x1EB8BDFF2LL);
  unint64_t v269 = (((v268 - 0x3F67FC4BD58BDEECLL) >> 16) ^ 0xFD0D8BDDFFFFEFFELL)
       + v268
       + (((v268 - 0x3F67FC4BD58BDEECLL) >> 15) & 0x117BBFFFFDFFCLL);
  unint64_t v270 = (((v269 - 0x3C758829D58BCEEALL) >> 8) ^ 0xFFA52FEEF6AFFFFBLL)
       + v269
       + (((v269 - 0x3C758829D58BCEEALL) >> 7) & 0x14A5FDDED5FFFF6LL);
  int v271 = (2 * v270 + 1736991286) & 0x6A4B94E4;
  int v272 = v270 - 387318899;
  int v273 = v272 - v271;
  LODWORD(v251) = (((2 * v273) ^ 0x6A4B94E4) + 1329305654 - 2
                                                          * (((2 * v273) ^ 0x6A4B94E4) & 0x4F3B983E ^ (2 * v273) & 8)) & 0xDF03F2AC ^ 0x49469F20;
  int v274 = (v251 - ((2 * v251) & 0x1E0DD840) + 792652832) ^ v273;
  unsigned int v275 = v273 ^ 0xB525CA72;
  unsigned int v276 = ((2 * (v275 - 516973755)) & 0xEE5E9FFE) + ((v275 - 516973755) ^ 0x772F4FFF);
  int v277 = v246 - 325321574;
  unsigned int v278 = v258 - ((2 * v258) & 0x903445DA) + 1209672429;
  if (v233 >= 0xD7F227A5) {
    BOOL v238 = v233 > 0xD7F227A6;
  }
  uint64_t v279 = LODWORD(STACK[0x470]) ^ 0xEC0EA028 ^ v277 ^ v278 ^ 0x38DFF721 ^ v274;
  unsigned int v280 = 2 * v276 - ((4 * v276 + 591577092) & 0x84ED7564) + 1410865844;
  unsigned int v281 = (v280 & 0xDF03F2AC ^ 0x222AA224)
       + (v280 & 0x9200B00C ^ 0x90041418)
       - ((v280 & 0xDF03F2AC ^ 0x222AA224) & 0xB200B00C);
  unsigned int v282 = v276 - 1999589375;
  unsigned int v283 = ((((v276 - 1999589375) ^ 0xD22CA498 ^ v281)
         - ((2 * ((v276 - 1999589375) ^ 0xD22CA498 ^ v281)) & 0x56C18AE2)
         + 727762289) ^ 0xD49F3A8E)
       + v276;
  unsigned int v284 = (v281 ^ ((v281 ^ 0x2DD35B67) - ((2 * (v281 ^ 0x2DD35B67) + 2) & 0xC2387C84) - 518242749) ^ 0x1F14D834 ^ (v283 - ((2 * v283 + 295788548) & 0x584885DC) - 1259015440))
       + v282;
  int v285 = v275 - 192685000 - 2 * ((v275 - 1033947510) & 0x3224A5AF ^ v272 & 1);
  LODWORD(STACK[0x658]) ^= v247 ^ (v250 - 278870960) ^ v261 ^ 0x28C72856 ^ (((2 * v284) & 0xF9BFFDBE)
                                                                          + (v284 ^ 0xFCDFFEDF)
                                                                          - ((2
                                                                            * (((2 * v284) & 0xF9BFFDBE)
                                                                             + (v284 ^ 0xFCDFFEDF))
                                                                            + 104858178) & 0x680C9F40)
                                                                          - 1222225727);
  unsigned int v286 = (((2 * v285) ^ 0x64494B5C) - ((2 * ((2 * v285) ^ 0x64494B5C)) & 0x6F17A1F0) - 1215573767) & 0xDF03F2AC ^ 0x17006008;
  LODWORD(v291) = ~(2 * HIDWORD(a51)) | 0x64F623FF;
  LODWORD(a59) = v202 + 18313490;
  LODWORD(v292) = (2 * v202) & 0x22EE224;
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)*(&off_10025C670 + ((237 * v238) ^ LODWORD(STACK[0x640]))) - 12))( 3000840387LL,  v262 ^ (v266 + 1098910227) ^ (v265 - 1294126909) ^ v285 ^ 0xC27643E0 ^ (((2 * v286) | 0x50DFB344)
                                                                                               - v286
                                                                                               - 678418850),
           4016096336LL,
           1745657664LL,
           v261,
           1943073784LL,
           v279,
           v262,
           a9,
           a10,
           a11,
           a12,
           a13,
           a14,
           a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           v288,
           v289,
           a54,
           a55,
           v290,
           v291,
           a58,
           a59,
           v292,
           v293);
}

uint64_t sub_1000F1B60( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  BOOL v75 = (STACK[0x5E8] & 2) == 0;
  int v76 = STACK[0x4A0];
  if ((STACK[0x5E8] & 2) != 0) {
    int v76 = STACK[0x3B0];
  }
  LODWORD(STACK[0x3A8]) = v76;
  int v77 = STACK[0x3AC];
  if (!v75) {
    int v77 = STACK[0x360];
  }
  LODWORD(STACK[0x2AC]) = v77;
  int v78 = STACK[0x3A4];
  if (!v75) {
    int v78 = STACK[0x260];
  }
  LODWORD(STACK[0x3AC]) = v78;
  LODWORD(STACK[0x270]) = LODWORD(STACK[0x2A0]) - 2 * LODWORD(STACK[0x2C8]);
  LODWORD(STACK[0x260]) = HIDWORD(a51) + 1300557434;
  int v79 = (HIDWORD(a56) - a68) ^ LODWORD(STACK[0x25C]);
  LODWORD(STACK[0x620]) = LODWORD(STACK[0x5B0]) ^ 0x17280CE2;
  LODWORD(STACK[0x3A4]) = v79 ^ (a56 - a65);
  LODWORD(STACK[0x2A0]) = LODWORD(STACK[0x348]) ^ 0x7BDD4ED1;
  LODWORD(STACK[0x3B0]) = a71 ^ LODWORD(STACK[0x230]);
  LODWORD(STACK[0x640]) = a54 - a55;
  LODWORD(STACK[0x360]) = a52 - HIDWORD(a52);
  LODWORD(STACK[0x4A0]) = LODWORD(STACK[0x480]) ^ 0x128F3049;
  LODWORD(STACK[0x3A0]) = LODWORD(STACK[0x2B0]) ^ 0x11B401B;
  unint64_t v80 = v74 - 435505799LL + ((unint64_t)(v74 < 0x19F54A87) << 32);
  unint64_t v81 = ((v71 - 476) ^ 0xCBD10277E7AE3E7CLL)
      - 0x4C2A36BCCCE61AD9LL * (*(void *)(STACK[0xB20] + 8 * v80) ^ 0x9696969696969696LL)
      - ((0x67AB92866633CA4ELL * (*(void *)(STACK[0xB20] + 8 * v80) ^ 0x9696969696969696LL)) & 0x97A204EFCF5C7AEELL);
  unint64_t v82 = ((2 * ((v73 ^ 0x88BDC02FD58A98D9LL ^ v81) + v80)) & 0xEBDEF7FDBBFFF3FELL)
      + (((v73 ^ 0x88BDC02FD58A98D9LL ^ v81) + v80) ^ 0x75EF7BFEDDFFF9FFLL);
  unint64_t v83 = (((v82 - 0x75EF7BFEDDFFF9FFLL) >> 32) ^ 0x6BF579FFFBFFFFFBLL)
      + v82
      + (((v82 - 0x75EF7BFEDDFFF9FFLL) >> 31) & 0x1F7FFFFF6LL);
  unint64_t v84 = (((v83 + 0x1E1B0A0126000606LL) >> 16) ^ 0xD25BF77FEEFDAA8FLL)
      + v83
      + (((v83 + 0x1E1B0A0126000606LL) >> 15) & 0x1EEFFDDFB551ELL);
  unint64_t v85 = v84 - ((2 * v84 + 0x177E25026E04B6EELL) & 0x3AB5A57671AFC29ALL) - 0x16E61AC39025C33CLL;
  unint64_t v86 = (((v85 >> 8) ^ 0x9D5AD2BB38D7E1LL) & (v85 ^ 0x9D5AD2BB38D7E14DLL))
      + 0x2556B27123E929D1LL
      + (~(2 * (((v85 >> 8) ^ 0x9D5AD2BB38D7E1LL) & (v85 ^ 0x9D5AD2BB38D7E14DLL))) | 0xFF529B1DB82DAC5FLL);
  unint64_t v87 = (v85 ^ 0x9DC7886983EF36ACLL ^ (v85 >> 8))
      + ((2 * v86) ^ 0x3577DB9DB8ADACD5LL)
      + ((4 * v86) & 0x9FB57EFFFEFFFEE8LL ^ 0x951048C48EA4A640LL)
      - 0x7FDABF7FFF7FFF75LL;
  unint64_t v88 = ((2 * v87) & 0xBF6DD79F9AFEFF2ELL) + (v87 ^ 0x5FB6EBCFCD7F7F97LL);
  LODWORD(v87) = (2 * v88 - ((4 * v88 - 905838172) & 0xE06EA890) + 1429755163) & v72 ^ 0x9461F5AC;
  LODWORD(v87) = (v88 + 847282281) ^ 0xB85B32D5 ^ (((2 * v87) & 0x684C118) - v87 - 63334543);
  LODWORD(v86) = v87 - ((2 * v87) & 0x42C43E1C);
  LODWORD(v87) = v88 - ((2 * v88 + 660617052) & 0xA251D5C2) - 455539057;
  int v89 = (((2 * v87) ^ 0xA251D5C2) - ((2 * ((2 * v87) ^ 0xA251D5C2)) & 0x8083F37C) + 1078065598) & v72 ^ 0x5300D0AC;
  LODWORD(v87) = (((2 * v89) & 0xA602E140) - v89 + 210143005) & 0xFFFFFFEC ^ v87;
  uint64_t v90 = v88 - ((2 * v88 + 0x347E49BFE9BF6DE6LL) & 0x2D156FF65B96C9F2LL) - 0x2F362324DD54E414LL;
  LODWORD(v8_Block_object_dispose(va, 8) = (2 * (v88 - ((2 * v88 - 373330458) & 0x5B96C9F2) + 581639148)) ^ 0x5B96C9F2;
  LODWORD(v8_Block_object_dispose(va, 8) = (((v88 - ((2 * v88) & 0xAB0307B4) + 1434551259) & v72 ^ 0x82028080)
                + ((v88 - ((2 * v88) & 0xAB0307B4) + 1434551259) & 0xDC005204 ^ 0x5CE85254)
                - (((v88 - ((2 * v88) & 0xAB0307B4) + 1434551259) & v72 ^ 0x82028080) & 0xDC005204)) ^ 0x7E6A5456;
  unint64_t v91 = ((2 * ((v81 ^ 0xDD5BB58CCA65598ELL ^ v90) + v80)) & 0x2FFDFB77FFBF7FD6LL)
      + (((v81 ^ 0xDD5BB58CCA65598ELL ^ v90) + v80) ^ 0x17FEFDBBFFDFBFEBLL);
  unint64_t v92 = (((v91 - 0x17FEFDBBFFDFBFEBLL) >> 32) ^ 0xDBFFBF7FBFB6B3FFLL)
      + v91
      + (((v91 - 0x17FEFDBBFFDFBFEBLL) >> 31) & 0x17F6D67FELL);
  unint64_t v93 = (((v92 + 0xC0142C440698C16LL) >> 16) ^ 0x5D79AFFAEFE7FFFFLL)
      + v92
      + (((v92 + 0xC0142C440698C16LL) >> 15) & 0x15FF5DFCFFFFELL);
  unint64_t v94 = (((v93 - 0x51786D36AF7E73E9LL) >> 8) ^ 0xA23B567FDC3EB34ALL)
      + v93
      + (((v93 - 0x51786D36AF7E73E9LL) >> 7) & 0x76ACFFB87D6694LL);
  int v95 = (2 * v94 - ((4 * v94 + 1359700788) & 0x5B806610) - 1773804382) & v72 ^ 0xA03B28C;
  int v96 = (((v95 - ((2 * v95) & 0xC000418) + 643042079) & 0x8700DF44 ^ 0x8710D141 | (v95
                                                                                 - ((2 * v95) & 0xC000418)
                                                                                 + 643042079) & 0x780320B8)
       - 1) ^ (v94 + 1950537933);
  int v97 = v94 - ((2 * v94 - 1427838940) & 0x7CF2DED8) + 334226302;
  int v98 = (((2 * v97) ^ 0x7CF2DED8) + 1529994538 - 2 * (((2 * v97) ^ 0x7CF2DED8) & 0x5B31DD2E ^ (2 * v97) & 4)) & v72 ^ 0x5B03D8BA;
  int v99 = (((2 * v98) | 0x72973AA8) - v98 - 961256788) ^ v97;
  uint64_t v100 = v94 - ((2 * v94 + 0xC8499F26D441EAELL) & 0x3ECBFABF0ECA90B6LL) + 0x45A84A58BE0757B2LL;
  unint64_t v101 = v81 ^ 0xCBD10277E7AE3D77LL;
  unint64_t v102 = (v81 ^ 0xCBD10277E7AE3D77LL) + (v81 ^ 0x2B4B00D79F348AD3LL ^ v100) + 1;
  int v103 = ((2 * v100) ^ 0xECA90B6) - ((2 * ((2 * v100) ^ 0xECA90B6)) & 0x824542FC) + 1092788607;
  unsigned int v104 = (v103 & v72 ^ 0x9B001220) + (v103 & 0x8401420C ^ 0x245D4D4F) - ((v103 & v72 ^ 0x9B001220) & 0x8401420C);
  uint64_t v105 = ((v104 & 0xB83FE8E8 ^ 0x982020E3 | v104 & 0x47401614) - 1) ^ ((_DWORD)v94
                                                                     - ((2 * (_DWORD)v94 + 1833180846) & 0xECA90B6)
                                                                     - 1106815054);
  unint64_t v106 = (0xBDD827FA2550C333LL - v94 - ((0xB37B660D92BBE152LL - 2 * v94) & 0xC834E9E6B7E5A514LL)) ^ v100 ^ 0xEE32DA94DD8B604ALL ^ (v102 - ((2 * v102) & 0x2A9AA6700239F536LL) + 0x154D5338011CFA9BLL);
  unint64_t v107 = v101
       + ((v106 + v80) ^ 0x77567DFDCFF694BFLL)
       + ((2 * (v106 + v80)) & 0xEEACFBFB9FED297ELL)
       - 0x77567DFDCFF694BFLL;
  unint64_t v108 = (((((2 * v107) & 0xDADFFFFAFB5FF5BCLL) + (v107 ^ 0x6D6FFFFD7DAFFADELL) - 0x6D6FFFFD7DAFFADELL) >> 32) ^ 0xDFD77DED5EFFCFA2LL)
       + ((2 * v107) & 0xDADFFFFAFB5FF5BCLL)
       + (v107 ^ 0x6D6FFFFD7DAFFADELL)
       + (((((2 * v107) & 0xDADFFFFAFB5FF5BCLL) + (v107 ^ 0x6D6FFFFD7DAFFADELL) - 0x6D6FFFFD7DAFFADELL) >> 31) & 0xBDFF9F44);
  unint64_t v109 = (((v108 - 0x4D477DEADCAFCA80LL) >> 16) ^ 0x65ED6BEBCF99655ELL)
       + v108
       + (((v108 - 0x4D477DEADCAFCA80LL) >> 15) & 0xD7D79F32CABCLL);
  unint64_t v110 = (((v109 + 0x4CCB162953B6D022LL) >> 8) ^ 0xFFFF9EB2DFF3F3E5LL)
       + v109
       + (((v109 + 0x4CCB162953B6D022LL) >> 7) & 0x1FF3D65BFE7E7CALL);
  LODWORD(v110) = v110 - ((2 * v110 - 410666886) & 0x11B5DF4) - 196048073;
  LODWORD(v106) = (((2 * v110) ^ 0x11B5DF4) - ((2 * ((2 * v110) ^ 0x11B5DF4)) & 0x6A88E250) + 893677865) & v72 ^ 0x5FFC699B;
  LODWORD(v106) = (v106 - ((2 * v106) & 0xB02265A) + 92346157) ^ v110;
  LODWORD(v110) = v110 ^ 0x808DAEFA;
  LODWORD(v101) = v110 - ((2 * v110 - 1033947510) & 0x3DD7E0E) - 484550068;
  uint64_t v111 = a7 ^ ((_DWORD)v86 - 1587405042) ^ (((2 * ((v96 ^ 0x26135AD8) & 0x5A0F169F ^ v96 & 0x10)) ^ 0xFFFFFFDF)
                                          + (v96 ^ 0x26135AD8)
                                          - 636545392) ^ 0xB49DA9E5 ^ v106;
  uint64_t v112 = (((2 * (_DWORD)v101) ^ 0x3DD7E0E) - ((2 * ((2 * (_DWORD)v101) ^ 0x3DD7E0E)) & 0xD2B4526C) - 379967177) & v72 ^ v101;
  LODWORD(STACK[0x658]) ^= 0x81732864 ^ v87 ^ v99 ^ v112;
  int v113 = (2 * (v110 - 192685000 - ((2 * v110 - 2067895020) & 0x64494B5C))) ^ 0x64494B5C;
  unsigned int v114 = (v113 - ((2 * v113) & 0xBB34BCC8) - 577085851) & v72 ^ 0xDA03B020;
  return ((uint64_t (*)(uint64_t, void, void, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*(&off_10025C670 + ((607 * ((v74 & 0xFFFFFFFE) != 435505798)) ^ v71)))( v112,  a2 ^ v90 ^ (((2 * (_DWORD)v88) & 0xB4099764) - (_DWORD)v88 - 1510263732) ^ v105 ^ 0xD5E19158 ^ (((((2 * v114) | 0xD9F6254E) - v114 - 1828393639) & 0x7196A530 ^ 0x10940411 | (((2 * v114) | 0xD9F6254E) - v114 - 1828393639) & 0x8E695ACC) - 1) ^ ((_DWORD)v110 - 192685000 - ((2 * (_DWORD)v110 - 2067895020) & 0x64494B5C)),  ((2 * (_DWORD)v88) & 0xB4099764) - v88,  2171807844LL,  v105,  0x86D984B064494B5CLL,  v111,  0x5D62D307F483DC38LL,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48,  a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60);
}

void sub_1000F286C()
{
}

uint64_t sub_1000F2874( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,int a58,int a59)
{
  BOOL v62 = (STACK[0x5E8] & 2) == 0;
  int v63 = STACK[0x560];
  if ((STACK[0x5E8] & 2) != 0) {
    int v63 = STACK[0x39C];
  }
  LODWORD(STACK[0x390]) = v63;
  int v64 = STACK[0x398];
  if (!v62) {
    int v64 = STACK[0x378];
  }
  LODWORD(STACK[0x2C8]) = v64;
  LODWORD(STACK[0x560]) = LODWORD(STACK[0x2C4]) ^ LODWORD(STACK[0x268]);
  int v65 = STACK[0x238];
  LODWORD(STACK[0x39C]) = a59 ^ LODWORD(STACK[0x380]) ^ LODWORD(STACK[0x238]) ^ (LODWORD(STACK[0x260]) + a57);
  LODWORD(STACK[0x398]) = LODWORD(STACK[0x640]) ^ v65;
  int v66 = STACK[0x2E0];
  unsigned int v67 = LODWORD(STACK[0x2E0]) ^ 0xFAD2E77E;
  LODWORD(STACK[0x38C]) = LODWORD(STACK[0x244]) - a58;
  unint64_t v68 = (v61 ^ 0xFEBC2EAD53D6A380LL)
      + ((v61 >> 27) ^ 0x20012218E387DD80LL)
      + ((v61 >> 26) & 0x3197FBEFAALL ^ 0xFFFFFFCE78F454FFLL)
      - 0x2001220734020829LL;
  unint64_t v69 = ((2 * v68) & 0x713DFB757E9C7B7ALL)
      + (v68 ^ 0x389EFDBABF4E3DBDLL)
      + (((((2 * v68) & 0x713DFB757E9C7B7ALL) + (v68 ^ 0x389EFDBABF4E3DBDLL) - 0x389EFDBABF4E3DBDLL) >> 14) ^ 0xE695890024980000LL)
      - (((((2 * v68) & 0x713DFB757E9C7B7ALL) + (v68 ^ 0x389EFDBABF4E3DBDLL) - 0x389EFDBABF4E3DBDLL) >> 13) & 0x4EDFFB6CFFFFELL);
  unint64_t v70 = v69
      + (((v69 - 0x1F3486BAE3E63DBDLL) >> 6) ^ 0x8A0D08684102830LL)
      - (((v69 - 0x1F3486BAE3E63DBDLL) >> 5) & 0x6BE5EF2F7DFAF9ELL)
      + 2;
  uint64_t v71 = v70 - ((2 * v70 + 0x1055517D30133422LL) & 0x167D0E32CA6150F6LL) + 0x63692FD7FD3A428CLL;
  unint64_t v72 = ((2 * ((v71 ^ 0x8B3E87196530A87BLL) + 0x301F1AB817992D55LL)) & 0xCEBBE1ED92FEEDFELL)
      + (((v71 ^ 0x8B3E87196530A87BLL) + 0x301F1AB817992D55LL) ^ 0x675DF0F6C97F76FFLL);
  unint64_t v73 = v72
      + (((v72 - 0x675DF0F6C97F76FFLL) >> 24) ^ 0x10820018848006LL)
      - (((v72 - 0x675DF0F6C97F76FFLL) >> 23) & 0x1FFCEF6FFF2LL);
  unint64_t v74 = v73
      + (((v73 - 0x676E72F6E203F705LL) >> 14) ^ 0x408587C00A4A9160LL)
      - (((v73 - 0x676E72F6E203F705LL) >> 13) & 0x4F07FEB6ADD3ELL);
  unint64_t v75 = v74
      + (((v74 + 0x580C054913B1779BLL) >> 6) ^ 0xFFFFFDFEFDF93F7ELL)
      + (((v74 + 0x580C054913B1779BLL) >> 5) & 0x7FFFBFDFBF27EFCLL);
  int v76 = 2 * (v75 + 2) + 728789046;
  LODWORD(STACK[0x268]) = v75 + 2 - (v76 & 0x882ACEBA) - 640835720;
  int v77 = (((2 * (v75 + 2 - (v76 & 0x29FC5CA2)) - 714289960) ^ 0xA9FC5CA2)
       - 2
       * (((2 * (v75 + 2 - (v76 & 0x29FC5CA2)) - 714289960) ^ 0xA9FC5CA2) & 0x4D897E9C ^ (2
                                                                                        * ((_BYTE)v75 + 2 - (v76 & 0xA2))
                                                                                        - 8) & 8)
       + 1300856468) & 0xDF03F2AC ^ 0xC903C08C;
  unsigned int v78 = (v77 - ((2 * v77) & 0x98048140) - 322810384) & 0xE668D4E8 ^ 0x40485469 | (v77
                                                                                - ((2 * v77) & 0x98048140)
                                                                                - 322810384) & 0x19172B04;
  unint64_t v79 = (((v75 - 0x4401C9E8C65A5F6LL) >> 27) ^ 0x6EFBFEFE7EF72F9CLL)
      + v75
      + 2
      + (((v75 - 0x4401C9E8C65A5F6LL) >> 26) & 0x3CFDEE5F38LL);
  unint64_t v80 = (((v79 - 0x733C1B9D0B5CD594LL) >> 12) ^ 0x77FFFBDFE1FFAB9ELL)
      + v79
      + (((v79 - 0x733C1B9D0B5CD594LL) >> 11) & 0x1FF7BFC3FF573CLL);
  unint64_t v81 = v80
      + (((v80 + 0x14C3E88312A37ECELL) >> 2) ^ 0x2BDA0D1404A00032LL)
      - (((v80 + 0x14C3E88312A37ECELL) >> 1) & 0x284BE5D7F6BFFF9ALL)
      + 1;
  uint64_t v82 = v81 - ((2 * v81 + 0x11D3B6DE1C06FD36LL) & 0x1EA16AAF4F0FE1B4LL) - 0x7C56F394A74908BLL;
  LODWORD(v73) = (((2 * v82) ^ 0x4F0FE1B4) - ((2 * ((2 * v82) ^ 0x4F0FE1B4)) & 0xC6D71F08) - 479490171) & v60 ^ 0xD60242A4;
  LODWORD(v73) = (425196736 - (v73 | 0x1957FCC0) + (v73 | 0xE6A8033F)) ^ 0xD3A8C73F;
  LODWORD(STACK[0x2C4]) = (((2 * v73) | 0x86C55EF2) - v73 + 1016942727) ^ v82;
  unint64_t v83 = ((2 * ((v82 ^ 0xF50B557A787F0DALL) + 0x138484D3C02C2C4ELL)) & 0xFEAEFBF6EBEFEDFCLL)
      + (((v82 ^ 0xF50B557A787F0DALL) + 0x138484D3C02C2C4ELL) ^ 0x7F577DFB75F7F6FELL);
  unint64_t v84 = v83
      + (((v83 - 0x7F577DFB75F7F6FELL) >> 30) ^ 0x841030020C08EB60LL)
      - (((v83 - 0x7F577DFB75F7F6FELL) >> 29) & 0x3E7EE293ELL);
  unint64_t v85 = v84
      + (((v84 - 0x367ADFD8200E25ELL) >> 12) ^ 0x20240A24612A02LL)
      - (((v84 - 0x367ADFD8200E25ELL) >> 11) & 0x1FB7EBB73DABFALL);
  unint64_t v86 = v85
      + (((v85 - 0x387D207A6620C60LL) >> 7) ^ 0xA990010024018A04LL)
      - (((v85 - 0x387D207A6620C60LL) >> 6) & 0xDFFDFFB7FCEBF6LL)
      + 3;
  unint64_t v87 = v86 - ((2 * v86 - 0x5A2FA60F94C72CCELL) & 0xE523006AD3172772LL) - 0x3A8652D260D802AELL;
  LODWORD(v71) = (((2 * v87) ^ 0xD3172772) - ((2 * ((2 * v87) ^ 0xD3172772)) & 0x496B288) + 38492485) & 0xDF03F2AC ^ 0x1903D028;
  int v88 = ((v71 - ((2 * v71) & 0x3C042048) - 1636951964) & 0x833A238 ^ 0x8712233)
      + ((v71 - ((2 * v71) & 0x3C042048) - 1636951964) & 0xF70C5DC4 ^ 0xB68C1045);
  unint64_t v89 = ((2 * ((v87 ^ 0x72918035698B93B9LL) + 0x3DEAA251E4C860FCLL)) & 0xEFF7BCFDFA76E5EELL)
      + (((v87 ^ 0x72918035698B93B9LL) + 0x3DEAA251E4C860FCLL) ^ 0x77FBDE7EFD3B72F7LL);
  unint64_t v90 = (((v89 - 0x77FBDE7EFD3B72F7LL) >> 31) ^ 0x3A3FBEFF9BFF27BBLL)
      + v89
      + (((v89 - 0x77FBDE7EFD3B72F7LL) >> 30) & 0x337FE4F76LL);
  unint64_t v91 = (((v90 + 0x4DC4628166C5654ELL) >> 8) ^ 0xC7FB77ABDFE6ECBFLL)
      + v90
      + (((v90 + 0x4DC4628166C5654ELL) >> 7) & 0x1F6EF57BFCDD97ELL);
  unint64_t v92 = (((v91 - 0x7A37152A79218771LL) >> 7) ^ 0x6EDFFFBE63D3FAFFLL)
      + v91
      + (((v91 - 0x7A37152A79218771LL) >> 6) & 0x1BFFF7CC7A7F5FELL);
  unint64_t v93 = v92 - 2 * ((v92 + 0x16E8EB17230A7D90LL) & 0x57FAED386161A8FFLL ^ v92 & 0xB) - 0x111C27B07B93D97CLL;
  unint64_t v94 = (v93 ^ 0xE9B62EE68CCCDC3BLL)
      + ((v93 >> 30) ^ 0x742224BAFC933CCLL)
      + ((v93 >> 29) & 0x7EDDCEF52LL ^ 0xFFFFFFF8B26F98EFLL)
      - 0x742224809118855LL;
  STACK[0x260] = v93;
  int v95 = (((2 * v93) ^ 0xC2C351E8) - ((2 * ((2 * v93) ^ 0xC2C351E8)) & 0xBFA7BB8C) - 539763258) & 0xDF03F2AC ^ 0x8203E20C;
  unsigned int v96 = (v95 - ((2 * v95) & 0xB2046148) - 112578124) ^ 0xE9E840C3;
  LODWORD(STACK[0x25C]) = v96 - ((2 * v96) & 0x774104FE) - 1146060161;
  unint64_t v97 = (((((2 * v94) & 0xEDFF8F659DFF67EELL) + (v94 ^ 0x76FFC7B2CEFFB3F7LL) - 0x76FFC7B2CEFFB3F7LL) >> 13) ^ 0xDFDFDBC7FDDFBF72LL)
      + ((2 * v94) & 0xEDFF8F659DFF67EELL)
      + (v94 ^ 0x76FFC7B2CEFFB3F7LL)
      + (((((2 * v94) & 0xEDFF8F659DFF67EELL) + (v94 ^ 0x76FFC7B2CEFFB3F7LL) - 0x76FFC7B2CEFFB3F7LL) >> 12) & 0xFB78FFBBF7EE4LL);
  unint64_t v98 = v97
      + (((v97 - 0x56DFA37ACCDF7369LL) >> 2) ^ 0xC24A04011E0A7860LL)
      - (((v97 - 0x56DFA37ACCDF7369LL) >> 1) & 0x7B6BF7FDC3EB0F3ELL);
  unint64_t v99 = v98
      + 1
      + (((v98 - 0x4AABA72BD6F2F70DLL) >> 25) ^ 0x810008212442A260LL)
      - (((v98 - 0x4AABA72BD6F2F70DLL) >> 24) & 0xBDB77ABB3ELL);
  unint64_t v100 = v99
       + (((v99 + 0x345450B304CA6692LL) >> 9) ^ 0xF74AFFD7FEFFFFFFLL)
       + (((v99 + 0x345450B304CA6692LL) >> 8) & 0x95FFAFFDFFFFFELL);
  unint64_t v101 = v100
       + ((v100 + 0x3D0950DB05CA6693LL) & 0xBE7B4A3B9F7FDC7CLL)
       + (((v100 + 0x3D0950DB05CA6693LL) >> 1) ^ 0xDF3DA51DCFBFEE3ELL);
  HIDWORD(v150) = v101 + 1 - 2 * ((v101 + 906655829) & 0x694505ED ^ (v101 + 1) & 1) - 1622180288;
  int v102 = 2 * (v101 + 1 - ((2 * (v101 + 1) + 202698920) & 0x1779E188)) + 59691568;
  LODWORD(v150) = (v102 ^ 0x9779E188) - 2 * ((v102 ^ 0x9779E188) & 0x13040834 ^ v102 & 4) - 1828452303;
  unint64_t v103 = v101
       + 1
       + (((v101 - 0x69380F9959586DE1LL) >> 24) ^ 0x2220442002881202LL)
       - (((v101 - 0x69380F9959586DE1LL) >> 23) & 0x1BFFAEFDBFALL);
  unint64_t v104 = v103
       + (((v103 + 0x74A7AC46A41F801CLL) >> 15) ^ 0xB000002E8400810LL)
       - (((v103 + 0x74A7AC46A41F801CLL) >> 14) & 0x3FFFA2F7FEFDELL);
  unint64_t v105 = v104
       + (((v104 + 0x69A7AC43BBDF780CLL) >> 8) ^ 0x77F7E9EFCDF7DF7CLL)
       + (((v104 + 0x69A7AC43BBDF780CLL) >> 7) & 0x1EFD3DF9BEFBEF8LL)
       + 2;
  uint64_t v106 = v105 - ((2 * v105 + 0x635F84A7DBCF311CLL) & 0x7219D783E5272006LL) + 0x2ABCAE15E07B2891LL;
  LODWORD(v105) = (2 * (v105 - ((2 * v105 - 607178468) & 0xE5272006) - 528799599)) ^ 0xE5272006;
  uint64_t v107 = ((_DWORD)v105 - ((2 * (_DWORD)v105) & 0x7E8B59F4) - 1085952774) & v60 ^ 0xCD02A020LL;
  unint64_t v108 = ((v107 | 0x5D0D90380DE17029LL) - (v107 | 0xA2F26FC7F21E8FD6LL) - 0x5D0D90380DE1702ALL) ^ 0xD0FC2B02D697020LL;
  uint64_t v148 = ((2 * v108) | 0x5BBA84F8) - v108 + 3525492100u;
  uint64_t v149 = v106;
  unint64_t v109 = ((2 * ((v106 ^ 0x390CEBC1F2939003LL) + 0x627FE9C2823FDEE7LL)) & 0xF3EB779FEF95C90ELL)
       + (((v106 ^ 0x390CEBC1F2939003LL) + 0x627FE9C2823FDEE7LL) ^ 0xF9F5BBCFF7CAE487LL);
  unint64_t v110 = (((v109 + 0x60A443008351B79LL) >> 29) ^ 0x3BFEA41BBEBDFEB5LL)
       + v109
       + (((v109 + 0x60A443008351B79LL) >> 28) & 0x77D7BFD6ALL);
  unint64_t v111 = v110
       + (((v110 - 0x35F45FEBB688E33CLL) >> 9) ^ 0x214412440004006LL)
       - (((v110 - 0x35F45FEBB688E33CLL) >> 8) & 0xD77DB77FFF7FF2LL);
  LODWORD(v87) = v111
               + (((v111 - 0x3808A10FF6892342LL) >> 5) ^ 0xF743F7FD)
               + (((v111 - 0x3808A10FF6892342LL) >> 4) & 0xEE87EFFA);
  LODWORD(v111) = v87 + 1;
  HIDWORD(v147) = v87 + 1 - 2 * ((v87 + 305325249) & 0x48B9E617 ^ (v87 + 1) & 4) - 622015789;
  int v112 = STACK[0x470];
  LODWORD(v87) = LODWORD(STACK[0x550]) ^ LODWORD(STACK[0x470]);
  LODWORD(STACK[0x394]) = v67;
  int v113 = STACK[0x540];
  LODWORD(v73) = (((2 * (v87 ^ v67)) ^ 0xD700A986) - ((2 * ((2 * (v87 ^ v67)) ^ 0xD700A986)) & 0xA8758A7C) + 1413137726) & 0xDF03F2AC ^ 0x80032004;
  LODWORD(v73) = (((2 * v73) & 0x14078008) - v73 + 1432368872) ^ 0x128FEC0;
  LODWORD(v147) = (v73 | 0x618CE1E1) - (v73 | 0x9E731E1E) - 1636622818;
  LODWORD(v73) = (((2 * v66) ^ 0x674981BC) - ((2 * ((2 * v66) ^ 0x674981BC)) & 0x8124AA0) + 67708240) & 0xDF03F2AC ^ 0x54012008;
  HIDWORD(v146) = ((((2 * v73) | 0x8C076712) - v73 - 1174647689) & 0xE0383B0D ^ 0x80380804)
                + ((((2 * v73) | 0x8C076712) - v73 - 1174647689) ^ 0x7603B399)
                - (((((2 * v73) | 0x8C076712) - v73 - 1174647689) ^ 0x7603B399) & 0xE0383B0C);
  LODWORD(v111) = (2 * (v111 - ((2 * v111 + 610650496) & 0x76E4CE9C)) - 1689610212) ^ 0x76E4CE9C;
  LODWORD(v111) = (v111 - ((2 * v111) & 0x437ADA2C) + 566062359) & 0xDF03F2AC ^ 0x4C0330A8;
  LODWORD(v73) = (v111 | 0xCA932637) - (v111 | 0x356CD9C8) + 896326088;
  int v114 = v73 & 0x3592E0B2 ^ 0x11808081;
  LODWORD(v146) = v73 & 0xCA0D1E4D;
  LODWORD(v73) = (LODWORD(STACK[0x540]) ^ LODWORD(STACK[0x530]) ^ 0xF506345A) + (LODWORD(STACK[0x530]) ^ 0xF492A964) + 1;
  LODWORD(v87) = (v113 ^ ((v113 ^ 0x1949D3E) - ((2 * (v113 ^ 0x1949D3E) + 2) & 0x635E02C0) - 1313930911) ^ (v73 - ((2 * v73) & 0xCD152D7E) + 1720358591) ^ 0x294EF51E)
               + (LODWORD(STACK[0x530]) ^ 0xF492A964);
  LODWORD(v87) = LODWORD(STACK[0x5C8]) ^ (v87 - ((2 * v87) & 0xCD23D728) + 1720839060);
  LODWORD(STACK[0x254]) = v87;
  LODWORD(v87) = (((2 * v87) ^ 0xA0862ED0) - 2 * (((2 * v87) ^ 0xA0862ED0) & 0x5C3CB45E ^ (2 * v87) & 8) + 1547482198) & 0xDF03F2AC ^ 0xC102402C;
  LODWORD(v87) = (v87 - ((2 * v87) & 0xA207A018) - 245638897) ^ 0xC81BB927;
  LODWORD(STACK[0x244]) = v87 - ((2 * v87) & 0xAC82E270) - 689866437;
  LODWORD(v87) = (((2 * v113) ^ 0xFCD6C582)
                - 2 * (((2 * v113) ^ 0xFCD6C582) & 0x497E63FE ^ (2 * v113) & 0x10)
                + 1233019887) & 0xDF03F2AC ^ 0xFC5EDE73;
  LODWORD(STACK[0x238]) = v87 - ((2 * v87) & 0x9282BDC6) - 907976989;
  LODWORD(v87) = (2 * (LODWORD(STACK[0x620]) ^ LODWORD(STACK[0x358]) ^ LODWORD(STACK[0x5B8]))) ^ 0x304D59CA;
  LODWORD(v87) = (v87 - ((2 * v87) & 0x9E2A20B0) - 820703143) & 0xDF03F2AC ^ 0xD602D20C;
  LODWORD(v87) = (((2 * v87) | 0x579FEFA4) - v87 - 735049682) ^ 0x36EF4C2;
  HIDWORD(v145) = v87 - ((2 * v87) & 0xE670B2D8) - 214410900;
  LODWORD(v87) = (((2 * LODWORD(STACK[0x358])) ^ 0xE0BE6FFE)
                - ((2 * ((2 * LODWORD(STACK[0x358])) ^ 0xE0BE6FFE)) & 0x5FD76334)
                + 803975579) & 0xDF03F2AC ^ 0xC0006204;
  LODWORD(v87) = (((2 * v87) & 0x12048418) - v87 - 155075359) ^ 0x7E4526E9;
  unint64_t v115 = (void *)STACK[0xB20];
  uint64_t v116 = *(void *)(STACK[0xB20] + 8 * (*(void *)(STACK[0xB20] + 8 * (*(void *)STACK[0xB20] & 1LL)) & 1LL));
  LODWORD(STACK[0x35C]) ^= ((2 * v87) | 0x47FA4DF6) - v87 + 1543690501;
  LODWORD(v87) = (1 - v115[v116 & 1]) & 1;
  unsigned int v117 = (v87 ^ 0x7BEB5D8B) + 2 * v87;
  LODWORD(STACK[0x380]) = LODWORD(STACK[0x338]) ^ 0xE256D546;
  LODWORD(STACK[0x378]) = LODWORD(STACK[0x2E8]) ^ 0xCE762E19;
  LODWORD(STACK[0x230]) = v78 - 1;
  LODWORD(STACK[0x5B0]) = v88 - 2;
  LODWORD(STACK[0x640]) = v117 + 717133929;
  unsigned int v118 = v112 ^ 0xC809E91E;
  BOOL v119 = v117 < 0x7BEB5D8B;
  uint64_t v120 = (v59 + 739);
  unint64_t v121 = 0xB3D5C9433319E527LL * (*v115 ^ 0x9696969696969696LL)
       - ((0x7AB92866633CA4ELL * (*v115 ^ 0x9696969696969696LL)) & (v120 + 0xEA51224793A5D7ELL))
       - 0x78AD76EDC362CE4ALL;
  unint64_t v122 = ((2 * (v121 ^ 0xCEC5AE9E4C30FCE3LL)) & 0x5F3D5E7F0EFE7FC6LL) + (v121 ^ 0xE15B01A1CB4FC300LL);
  unint64_t v123 = (((v122 - 0x2F9EAF3F877F3FE3LL) >> 32) ^ 0x5FFAE4FF7F77EDF7LL)
       + v122
       + (((v122 - 0x2F9EAF3F877F3FE3LL) >> 31) & 0xFEEFDBEE);
  unint64_t v124 = (((v123 + 0x70666BC0F908D226LL) >> 16) ^ 0xC4EEF7FBBBF6FF6DLL)
       + v123
       + (((v123 + 0x70666BC0F908D226LL) >> 15) & 0x1EFF777EDFEDALL);
  unint64_t v125 = (((v124 - 0x54888C3AC2EE2D47LL) >> 8) ^ 0x7D447DF8FF7FFEDFLL)
       + v124
       + (((v124 - 0x54888C3AC2EE2D47LL) >> 7) & 0x88FBF1FEFFFDBELL);
  unint64_t v126 = v125 - ((2 * v125 + 0x5C65EB987B23A7B4LL) & 0xDDEB6D219B93488ALL) + 0x1D28AC5D0B5B781FLL;
  LODWORD(v125) = (((4 * v126) ^ 0x37269114) - ((2 * ((4 * v126) ^ 0x37269114)) & 0x5C223BD8) - 1374609938) & 0x9A6FB9D0 ^ 0x63EB8CF4;
  unint64_t v127 = (v126 ^ 0xEEF5B690CDC9A445LL)
       - ((2 * (v126 ^ 0xEEF5B690CDC9A445LL) + 0x33EC215F84BE6D14LL) & 0xD9D0880000AFA8C2LL)
       - 0x7921AB503D48F515LL;
  unint64_t v128 = ((2 * (v121 ^ 0xEBBACD123CCAE5D7LL ^ v127)) & 0xF4FDDDFC57F4B7FELL)
       + (v121 ^ 0xEBBACD123CCAE5D7LL ^ v127 ^ 0xFA7EEEFE2BFA5BFFLL);
  unint64_t v129 = (((v128 + 0x5811101D405A401LL) >> 32) ^ 0x27DF59CFA6FEFBF7LL)
       + v128
       + (((v128 + 0x5811101D405A401LL) >> 31) & 0x14DFDF7EELL);
  unint64_t v130 = (((v129 - 0x225E48CDD2F957F6LL) >> 16) ^ 0x3FFF774DBFF5377CLL)
       + v129
       + (((v129 - 0x225E48CDD2F957F6LL) >> 15) & 0xEE9B7FEA6EF8LL);
  unint64_t v131 = (((v130 - 0x625DC01B92EE8F72LL) >> 8) ^ 0x11BFFDA5FFFBFD6FLL)
       + v130
       + (((v130 - 0x625DC01B92EE8F72LL) >> 7) & 0x17FFB4BFFF7FADELL);
  int v132 = (4 * v131 - ((8 * v131 + 1756076280) & 0xCE292FE0) - 1687526291) & 0x9A6FB9D0 ^ 0x1A4DB010;
  int v133 = (v131 + 1830122271) ^ 0x1442F550 ^ (v132 - ((2 * v132) & 0x10172120) - 1945381741) & 0xFFFFFFF0;
  int v134 = v133 - 2 * (v133 & 0x174E07D4 ^ (v131 + 1830122271) & 4);
  unint64_t v135 = v131 - ((2 * v131 + 0x4BB0A5DC5EE95352LL) & 0xE6B9367DB2292168LL) - 0x66CB11D2F776C5A3LL;
  LODWORD(v131) = 4 * (v131 - ((2 * v131 + 1592349522) & 0xB2292168) + 143211101);
  unint64_t v136 = ((v131 ^ 0x645242D0)
        + 792287519
        - 2 * ((v131 ^ 0x645242D0) & 0x2F39593C ^ v131 & 0x20)) & 0x9A6FB9D0 ^ v135;
  unint64_t v137 = ((2 * (v121 ^ 0x740E122CE589A102LL ^ v135)) & 0xF9BF777AFBA1FE7ELL)
       + (v121 ^ 0x740E122CE589A102LL ^ v135 ^ 0xFCDFBBBD7DD0FF3FLL);
  unint64_t v138 = (((v137 + 0x3204442822F00C1LL) >> 32) ^ 0xBDAFD7FFAB473E7FLL)
       + v137
       + (((v137 + 0x3204442822F00C1LL) >> 31) & 0x1568E7CFELL);
  unint64_t v139 = (((v138 + 0x45706C42D6E7C242LL) >> 16) ^ 0x1BEB6FFFFE7E77FFLL)
       + v138
       + (((v138 + 0x45706C42D6E7C242LL) >> 15) & 0xDFFFFCFCEFFELL);
  unint64_t v140 = (((v139 + 0x2984FC42D8694A43LL) >> 8) ^ 0x16F83FBB7FBBFEBELL)
       + v139
       + (((v139 + 0x2984FC42D8694A43LL) >> 7) & 0x1F07F76FF77FD7CLL);
  uint64_t v141 = v140 - ((2 * v140 + 0x519790EB15A970ALL) & 0xFBD5CAA953C50E8LL) - 0x659495235CB48C07LL;
  LODWORD(v135) = (((4 * v141) ^ 0x2A78A1D0) - ((2 * ((4 * v141) ^ 0x2A78A1D0)) & 0x1D42EEF8) + 245462909) & 0x9A6FB9D0 ^ 0xA688980;
  LODWORD(v135) = ((((v135 | 0xFBBE8E14) - (v135 | 0x44171EB) + 71397867) & 0xEAB13A80 ^ 0x20000880)
                 + (((v135 | 0xFBBE8E14) - (v135 | 0x44171EB) + 71397867) ^ 0xDABF364C)
                 - ((((v135 | 0xFBBE8E14) - (v135 | 0x44171EB) + 71397867) ^ 0xDABF364C) & 0xEAB13A80)) ^ v141;
  unint64_t v142 = v141 ^ 0x87DEAE554A9E2874LL;
  if (v117 >= 0x7BEB5D8B) {
    BOOL v119 = LODWORD(STACK[0x640]) > 0xA6A9F5F5;
  }
  LODWORD(v145) = v114 - 1;
  return ((uint64_t (*)(unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)*(&off_10025C670 + ((35 * !v119) ^ v59)) - 12))( v142 - ((2 * v142 + 0x33EC215F84BE6D14LL) & 0xC1E1D88ECBEE1CD2LL) - 0x5190308D7A9BB0DLL,  a2,  1958766593LL,  v136,  1347071497LL,  v120,  a7,  v143,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48,  a49,
           a50,
           v145,
           v146,
           v147,
           v148,
           v149,
           v150);
}

void sub_1000F48B0()
{
}

uint64_t sub_1000F48BC( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  int v63 = STACK[0x370];
  if ((STACK[0x5E8] & 2) == 0) {
    int v63 = STACK[0x364];
  }
  LODWORD(STACK[0x370]) = v63;
  LODWORD(STACK[0x36C]) = HIDWORD(a60) ^ LODWORD(STACK[0x4F0]);
  LODWORD(STACK[0x374]) = a59 - a60;
  LODWORD(STACK[0x640]) = LODWORD(STACK[0x200]) - LODWORD(STACK[0x310]);
  STACK[0x200] = a54 ^ a55;
  LODWORD(STACK[0x310]) = LODWORD(STACK[0x550]) ^ LODWORD(STACK[0x368]) ^ HIDWORD(a52) ^ a53 ^ a7 ^ a58 ^ LODWORD(STACK[0x5B0]) ^ HIDWORD(a56) ^ a56 & 0xDF03F2AC;
  int v64 = LODWORD(STACK[0x35C]) ^ LODWORD(STACK[0x5B8]) ^ HIDWORD(a51) ^ a2 ^ LODWORD(STACK[0x2C4]) ^ HIDWORD(a57) ^ a57 ^ HIDWORD(a53) ^ (a51 + a52);
  LODWORD(STACK[0x2C4]) = v64;
  LODWORD(STACK[0x368]) = v64 ^ 0xB16605C9;
  unint64_t v65 = a5 - 1347071496LL + ((unint64_t)(a5 < 0x504AAE08) << 32);
  unint64_t v66 = a6 ^ 0x9696969696969378LL ^ *(void *)(STACK[0xB20] + 8 * v65);
  unint64_t v67 = 0xB3D5C9433319E527LL * v66 - ((0x67AB92866633CA4ELL * v66) & 0x629C72727F4984C4LL) + 0x314E39393FA4C262LL;
  unint64_t v68 = ((2 * ((a1 ^ 0xD1BED57E5A53CC0BLL ^ v67) + v65)) & 0x7E9FF67E54BF7F6CLL)
      + (((a1 ^ 0xD1BED57E5A53CC0BLL ^ v67) + v65) ^ 0x3F4FFB3F2A5FBFB6LL);
  unint64_t v69 = (((v68 - 0x3F4FFB3F2A5FBFB6LL) >> 32) ^ 0x5EEFB7527BF78FBELL)
      + v68
      + (((v68 - 0x3F4FFB3F2A5FBFB6LL) >> 31) & 0xF7EF1F7C);
  unint64_t v70 = (((v69 + 0x61C04D6E59A8B08CLL) >> 16) ^ 0x6FB3FBFFDF5FEF5ELL)
      + v69
      + (((v69 + 0x61C04D6E59A8B08CLL) >> 15) & 0x1F7FFBEBFDEBCLL);
  unint64_t v71 = (((v70 - 0xDF3AE9185B73ED2LL) >> 8) ^ 0x3F7FEECE77BFDF37LL)
      + v70
      + (((v70 - 0xDF3AE9185B73ED2LL) >> 7) & 0xFFDD9CEF7FBE6ELL);
  uint64_t v72 = v71 - ((2 * v71 + 0x518C5400511C3EELL) & 0x8CC2581C1DB3356LL) - 0x490D8A9F1C89845ELL;
  LODWORD(v71) = (((4 * v72) ^ 0x83B666AC) - ((2 * ((4 * v72) ^ 0x83B666AC)) & 0x15D83048) - 1964238811) & v62 ^ 0x6CFC56AF;
  unint64_t v73 = (v72 ^ 0x46612C0E0ED99ABLL)
      - ((2 * (v72 ^ 0x46612C0E0ED99ABLL) + v61) & 0x98E8E9F6DB536EB4LL)
      + 0x666A85AB3008EDE4LL;
  uint64_t v74 = ((2 * ((v67 ^ 0x7D3A4DC2520D7538LL ^ v73) + v65)) & 0x6BAF57B53A4DF7FELL)
      + (((v67 ^ 0x7D3A4DC2520D7538LL ^ v73) + v65) ^ 0x35D7ABDA9D26FBFFLL);
  unint64_t v75 = (((unint64_t)(v74 - 0x35D7ABDA9D26FBFFLL) >> 32) ^ 0x77FFD93F3EFDBFB9LL)
      + v74
      + (((unint64_t)(v74 - 0x35D7ABDA9D26FBFFLL) >> 31) & 0x7DFB7F72);
  unint64_t v76 = (((v75 + 0x52287AE623DB4448LL) >> 16) ^ 0x7FF9BBBF9BBFFF9ELL)
      + v75
      + (((v75 + 0x52287AE623DB4448LL) >> 15) & 0x1777F377FFF3CLL);
  unint64_t v77 = (((v76 - 0x2DD140D977E4BB56LL) >> 8) ^ 0x65DF7BFFFFEE739CLL)
      + v76
      + (((v76 - 0x2DD140D977E4BB56LL) >> 7) & 0x1BEF7FFFFDCE738LL);
  unint64_t v78 = v77 - ((2 * v77 - 0x276179B2EFA65DE4LL) & 0xEADDE3B7C38B0E86LL) - 0x1E41CAFD960DA7AFLL;
  int v79 = (((4 * v78) ^ 0x87161D0C) - ((2 * ((4 * v78) ^ 0x87161D0C)) & 0x42796AF0) - 1589856903) & v62 ^ v78;
  v78 ^= 0x756EF1DBE1C58743uLL;
  int v80 = v78 - ((2 * v78 - 1033947510) & 0x24CF1CD8) - 208197199;
  int v81 = ((4 * v80) ^ 0x499E39B0) - ((2 * ((4 * v80) ^ 0x499E39B0)) & 0x1F06F158) + 260274350;
  unsigned int v82 = ((v81 & 0x106110D0 ^ 0x115054B5) + (v81 & 0x8A0EA900 ^ 0x880E8101) - 2) ^ 0x93D1D155;
  uint64_t v83 = v78 - ((2 * v78 + 0x3EC215F84BE6D14LL) & 0xC9F65EFA650DA8ELL) + 0x2045C3A79587A3D1LL;
  int v84 = ((4 * v83) ^ 0x4CA1B51C) - ((2 * ((4 * v83) ^ 0x4CA1B51C)) & 0x707656D0) - 1204081815;
  uint64_t v85 = ((v84 & 0x90091000 ^ 0x35900005) + (v84 & 0xA66A9D0 ^ 0x8428091) - 2) ^ v83;
  unint64_t v86 = ((2 * ((v67 ^ 0x37018BCEEC8CAF25LL ^ v83) + v65)) & 0xD97F925FFF86DCFELL)
      + (((v67 ^ 0x37018BCEEC8CAF25LL ^ v83) + v65) ^ 0x6CBFC92FFFC36E7FLL);
  unint64_t v87 = (((v86 - 0x6CBFC92FFFC36E7FLL) >> 32) ^ 0xCE7A79E5BF6EEBFFLL)
      + v86
      + (((v86 - 0x6CBFC92FFFC36E7FLL) >> 31) & 0x17EDDD7FELL);
  unint64_t v88 = (((v87 - 0x3B3A4315BF325A7ELL) >> 16) ^ 0xF9653FFFFB7F7EDFLL)
      + v87
      + (((v87 - 0x3B3A4315BF325A7ELL) >> 15) & 0x7FFFF6FEFDBELL);
  unint64_t v89 = (((v88 - 0x349F8315BAB1D95DLL) >> 8) ^ 0xFEFBDDF2E73FF5B7LL)
      + v88
      + (((v88 - 0x349F8315BAB1D95DLL) >> 7) & 0x1F7BBE5CE7FEB6ELL);
  LODWORD(v83) = 4 * v89 - 2 * ((4 * v89 + 943244208) & 0x35370CBC ^ (4 * v89) & 8) - 1385181081;
  LODWORD(v83) = (v89 + 1577988332) ^ 0xCD00CA87 ^ ((v83 & v62 ^ 0x30070B90)
                                                  + (v83 & 0x88208980 ^ 0xCD20C007)
                                                  - ((v83 & v62 ^ 0x30070B90) & 0xA8208980));
  return ((uint64_t (*)(unint64_t, _UNKNOWN **, unint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*(&off_10025C670 + (int)((834 * ((a5 - 1347071495) > 1)) ^ a6)))( v89 - ((2 * v89 - 0x334AA0B1BF253114LL) & 0xC1E1D88ECBEE1CD2LL) - 0x38B46411799B8A21LL,  &off_10025C670,  0xC1E1D88ECBEE1CD2LL,  v85,  a5,  a6,  (v82 - ((2 * v82) & 0x111B6222) - 376573675) ^ v80,  a8 ^ v72 ^ (((((2 * (_DWORD)v71) | 0xFD1E2C5A) - (_DWORD)v71 + 24177107) & 0xA7D23DC4 ^ 0x870011C1 | (((2 * (_DWORD)v71) | 0xFD1E2C5A) - (_DWORD)v71 + 24177107) & 0x582DC238)
                                   - 1) ^ v79 ^ 0x4A605ECF ^ ((int)v83
                                                            + 1417394239
                                                            - 2 * (v83 & 0x547BB83F ^ ((_DWORD)v89 + 1577988332) & 8)
                                                            - 8),
           a9,
           a10,
           a11,
           a12,
           a13,
           a14,
           a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61);
}

void sub_1000F5450()
{
}

uint64_t sub_1000F5460( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,int a62,uint64_t a63)
{
  unint64_t v68 = (v66 + 306656080) & 0xC8473FD8;
  int v69 = a62 ^ a65;
  STACK[0x5B0] = v68;
  unint64_t v70 = ((a1 >> 27) ^ 0x3B0448098688F740LL)
      + ((v68 + 0x5D2000B20405027FLL) ^ a1)
      + ((a1 >> 26) & 0x3BBAEE3DFELL ^ 0xFFFFFFECF7FFD37FLL)
      - 0x3B0448022288E0FFLL;
  unint64_t v71 = ((2 * v70) & 0x9F7F7BF7DFF5FBE6LL)
      + (v70 ^ 0x4FBFBDFBEFFAFDF3LL)
      + (((((2 * v70) & 0x9F7F7BF7DFF5FBE6LL) + (v70 ^ 0x4FBFBDFBEFFAFDF3LL) - 0x4FBFBDFBEFFAFDF3LL) >> 14) ^ 0x7125805C60000280LL)
      - (((((2 * v70) & 0x9F7F7BF7DFF5FBE6LL) + (v70 ^ 0x4FBFBDFBEFFAFDF3LL) - 0x4FBFBDFBEFFAFDF3LL) >> 13) & 0x4FF473FFFFAFELL);
  unint64_t v72 = v71
      + (((v71 + 0x3F1AC1A7B004FF8DLL) >> 6) ^ 0x906C800408A60D58LL)
      - (((v71 + 0x3F1AC1A7B004FF8DLL) >> 5) & 0x726FFF7EEB3E54ELL)
      + 2;
  unint64_t v73 = v72 - ((2 * v72 + 0x5D5C83474EBDE466LL) & 0x81446AF8DAC6B474LL) + 0x6F50772014C24C6DLL;
  unint64_t v74 = ((2 * ((v73 ^ 0xC0A2357C6D635A3ALL) + 0x301F1AB817992D55LL)) & 0x9F7EFA6FFF3FB97CLL)
      + (((v73 ^ 0xC0A2357C6D635A3ALL) + 0x301F1AB817992D55LL) ^ 0xCFBF7D37FF9FDCBELL);
  unint64_t v75 = v74
      + (((v74 + 0x304082C800602342LL) >> 24) ^ 0x401A87129540011LL)
      - (((v74 + 0x304082C800602342LL) >> 23) & 0x11DAD57FFDCLL);
  unint64_t v76 = v75
      + (((v75 + 0x2C3EDA56D70C2331LL) >> 14) ^ 0x18016872002346A0LL)
      - (((v75 + 0x2C3EDA56D70C2331LL) >> 13) & 0x52F1BFFB972BELL);
  unint64_t v77 = v76
      + (((v76 + 0x143D71E4D6E8DC91LL) >> 6) ^ 0xFBE9DF7BBEBFD9FFLL)
      + (((v76 + 0x143D71E4D6E8DC91LL) >> 5) & 0x7D3BEF77D7FB3FELL);
  int v78 = (4 * (v77 + 2 + (~(2 * (v77 + 2) + 810681632) | 0x17AB22AD)) - 1320303384) ^ 0x50A9BAA4;
  unsigned int v79 = (v78 - ((2 * v78) & 0x229F8528) - 1857043820) & 0x9A6FB9D0 ^ 0x804FA990;
  int v80 = ((2 * v79) | 0x31AB1E7A) - v79 + 1730834627;
  unint64_t v81 = (((v77 - 0x43F8917F89F4DB81LL) >> 27) ^ 0xFCEDD7DABFEDD67DLL)
      + v77
      + 2
      + (((v77 - 0x43F8917F89F4DB81LL) >> 26) & 0x357FDBACFALL);
  unint64_t v82 = (((v81 - 0x40E6695A49E2B200LL) >> 12) ^ 0xFEFBE96A6FFFDE36LL)
      + v81
      + (((v81 - 0x40E6695A49E2B200LL) >> 11) & 0x17D2D4DFFFBC6CLL);
  unint64_t v83 = v82
      + (((v82 - 0x3FE252C4B9E29036LL) >> 2) ^ 0x8418030E11138240LL)
      - (((v82 - 0x3FE252C4B9E29036LL) >> 1) & 0x77CFF9E3DDD8FB7ELL);
  int v84 = 2 * (v83 + 1);
  LODWORD(v6_Block_object_dispose(va, 8) = 4 * (v83 + 1 - ((v84 + 169073426) & 0x1A79ECA0));
  LODWORD(v6_Block_object_dispose(va, 8) = ((v68 - 1994682524) ^ 0xB4F3D940)
               - 2 * (((v68 - 1994682524) ^ 0xB4F3D940) & 0x49787314 ^ ((_BYTE)v68 + 108) & 4)
               - 914853103;
  LODWORD(v6_Block_object_dispose(va, 8) = ((v68 & 0x8A4BB1C0 ^ 0xCB53B085) + (v68 & 0x10240810 ^ 0x10000811) - 2) ^ 0xE67BBDC8;
  int v85 = v68 - ((2 * v68) & 0x5A516900) - 315050877;
  int v86 = v83 + 1 - ((v84 + 1779686162) & 0xF3031226) - 1366591844;
  unint64_t v87 = v83
      + 1
      + (((v83 + 0x4F8A2F00F53619D8LL) >> 30) ^ 0x8A44F84654048543LL)
      - (((v83 + 0x4F8A2F00F53619D8LL) >> 29) & 0x357F6F578LL);
  unint64_t v88 = v87
      + (((v87 - 0x3ABAC9455ECE6B6CLL) >> 12) ^ 0xA040100E00A21201LL)
      - (((v87 - 0x3ABAC9455ECE6B6CLL) >> 11) & 0x1FDFE3FEBBDBFCLL);
  unint64_t v89 = v88
      + (((v88 + 0x250526ACA08F8293LL) >> 7) ^ 0xC62828061328C0LL)
      - (((v88 + 0x250526ACA08F8293LL) >> 6) & 0x273AFAFF3D9AE7ELL);
  uint64_t v90 = v89 + 3 - 2 * ((v89 + 0x43EFE849A7C59D3LL) & 0xCE53B65237479E7LL ^ (v89 + 3) & 4) - 0x4EDBC616420F2C4DLL;
  unint64_t v91 = ((2 * ((v90 ^ 0x8CE53B65237479E3LL) + 0x3DEAA251E4C860FCLL)) & 0xDFBFFFEDBF7DBDF8LL)
      + (((v90 ^ 0x8CE53B65237479E3LL) + 0x3DEAA251E4C860FCLL) ^ 0x6FDFFFF6DFBEDEFCLL);
  unint64_t v92 = (((v91 - 0x6FDFFFF6DFBEDEFCLL) >> 31) ^ 0xFFDFBDFD67FD5C34LL)
      + v91
      + (((v91 - 0x6FDFFFF6DFBEDEFCLL) >> 30) & 0x2CFFAB868LL);
  unint64_t v93 = (((v92 - 0x6FBFBDF447BC3B30LL) >> 8) ^ 0xF7BF6C7BDBCFB9FFLL)
      + v92
      + (((v92 - 0x6FBFBDF447BC3B30LL) >> 7) & 0x17ED8F7B79F73FELL);
  unint64_t v94 = (((v93 - 0x677F2A70238BF52FLL) >> 7) ^ 0x492FAFFBEFEDDCFBLL)
      + v93
      + (((v93 - 0x677F2A70238BF52FLL) >> 6) & 0x25F5FF7DFDBB9F6LL);
  unint64_t v95 = v94 - ((2 * v94 - 0x615DB4D826F3A454LL) & 0x9B18C7214A4D839ELL) + 0x1CDD892491ACEFA5LL;
  unint64_t v96 = (v95 ^ 0xF3C0A04E488BB500LL)
      + ((v95 >> 30) ^ 0xC03088D747024938LL)
      + ((v95 >> 29) & 0x6EFFE6FFCLL ^ 0xFFFFFFF971FBFD8FLL)
      + 0x3FCF772B77FF3800LL;
  unint64_t v97 = (((((2 * v96) & 0xBEBFFE7E9F713FFELL) + (v96 ^ 0x5F5FFF3F4FB89FFFLL) - 0x5F5FFF3F4FB89FFFLL) >> 13) ^ 0xB1D7FDFBBFFDCF7ELL)
      + ((2 * v96) & 0xBEBFFE7E9F713FFELL)
      + (v96 ^ 0x5F5FFF3F4FB89FFFLL)
      + (((((2 * v96) & 0xBEBFFE7E9F713FFELL) + (v96 ^ 0x5F5FFF3F4FB89FFFLL) - 0x5F5FFF3F4FB89FFFLL) >> 12) & 0xFFBF77FFB9EFCLL);
  unint64_t v98 = v97
      + (((v97 - 0x1137FD3B0FB66F7DLL) >> 2) ^ 0xC100D20C13200000LL)
      - (((v97 - 0x1137FD3B0FB66F7DLL) >> 1) & 0x7DFE5BE7D9BFFFFELL)
      + 1;
  uint64_t v99 = v98 - ((2 * v98 + 0x1B8E6171BA532104LL) & 0x217DC884E44E8D4CLL) + 0x3E8614FB4F50D728LL;
  int v100 = ((4 * v99) ^ 0xC89D1A98) - ((2 * ((4 * v99) ^ 0xC89D1A98)) & 0x9002F810) + 1208056841;
  int v101 = ((v100 & v67 ^ 0x1DCF0D26) + (v100 & 0x2DB050 ^ 0x4030F251) - ((v100 & v67 ^ 0x1DCF0D26) & 0x12DB452)) & 0xFFFFFFF4 ^ v99;
  unint64_t v102 = ((2 * ((v99 ^ 0x10BEE442722746A6LL) - 0x3181FFAFEC090B44LL)) & 0xFF75EFE5F9BBF3EELL)
       + (((v99 ^ 0x10BEE442722746A6LL) - 0x3181FFAFEC090B44LL) ^ 0xFFBAF7F2FCDDF9F7LL);
  unint64_t v103 = v102
       + (((v102 + 0x45080D03220609LL) >> 25) ^ 0xA201246E29089198LL)
       - (((v102 + 0x45080D03220609LL) >> 24) & 0x23ADEEDCCELL);
  unint64_t v104 = v103
       + (((v103 + 0x5E43E39EDA197471LL) >> 9) ^ 0xF9EEDDFAD7FB333FLL)
       + (((v103 + 0x5E43E39EDA197471LL) >> 8) & 0xDDBBF5AFF6667ELL);
  unint64_t v105 = v104
       + ((v104 + 0x645505A4021E4132LL) & 0xF75CDFDC7977EEFELL)
       + (((v104 + 0x645505A4021E4132LL) >> 1) ^ 0xFBAE6FEE3CBBF77FLL);
  uint64_t v106 = v105 + 1 - 2 * ((v105 + 0x28A695B5C56249B3LL) & 0x23E1EE68E5533633LL ^ (v105 + 1) & 1) - 0x73777BE1554A801CLL;
  uint64_t v107 = ((2 * v106) ^ 0x47C3DCD1CAA66C64LL)
       - 2 * (((2 * v106) ^ 0x47C3DCD1CAA66C64LL) & 0x1D95F14163042E5ELL ^ (2 * v106) & 0x18)
       - 0x226A0EBE9CFBD1B9LL;
  unint64_t v108 = (v106 ^ 0x1B1DAAC195CE2FF8LL)
       + (v107 & 0x71F88952E13A3394LL ^ 0xCE74EBC9E57B7EBLL)
       + ((2 * v107) & 0xA2E112A1C2242308LL ^ 0xA2210280C2000008LL)
       - 0x5D77CFFCFF5795EFLL;
  unint64_t v109 = ((2 * v108) & 0x77EFDDDAFFDFFE7ALL)
       + (v108 ^ 0xBBF7EEED7FEFFF3DLL)
       + (((((2 * v108) & 0x77EFDDDAFFDFFE7ALL) + (v108 ^ 0xBBF7EEED7FEFFF3DLL) + 0x44081112801000C3LL) >> 24) ^ 0x4A0A343066CE000LL)
       - (((((2 * v108) & 0x77EFDDDAFFDFFE7ALL) + (v108 ^ 0xBBF7EEED7FEFFF3DLL) + 0x44081112801000C3LL) >> 23) & 0x179F3263FFELL);
  unint64_t v110 = v109
       + (((v109 + 0x3F676DCF79A320C3LL) >> 15) ^ 0x51E010081221890LL)
       - (((v109 + 0x3F676DCF79A320C3LL) >> 14) & 0x3FDFEFDBBCEDELL);
  unint64_t v111 = v110
       + (((v110 + 0x3A496CCEF8810833LL) >> 8) ^ 0x7EDB7BFD5FDFEFFELL)
       + (((v110 + 0x3A496CCEF8810833LL) >> 7) & 0x1B6F7FABFBFDFFCLL);
  int v112 = v111 + 2;
  LODWORD(v6_Block_object_dispose(va, 8) = 2 * (v111 + 2);
  unint64_t v113 = (((v111 + 0x1DEDDA941AE0F71CLL) >> 29) ^ 0x361D6C6DF6D77FFFLL)
       + v111
       + 2
       + (((v111 + 0x1DEDDA941AE0F71CLL) >> 28) & 0xBEDAEFFFELL);
  unint64_t v114 = v113
       + (((v113 - 0x182F91D9DBF688E5LL) >> 9) ^ 0x50E0010B4E060102LL)
       - (((v113 - 0x182F91D9DBF688E5LL) >> 8) & 0x3FFDE963F3FDFALL);
  LODWORD(v114) = v114
                + (((v114 - 0x690F92E529FC89E7LL) >> 5) ^ 0xF77FA6FF)
                + (((v114 - 0x690F92E529FC89E7LL) >> 4) & 0xEEFF4DFE)
                + 1;
  int v115 = v114 - ((2 * v114 - 1123574222) & 0xDB981C58) + 1280302405;
  int v116 = (4 * (v112 - ((v68 + 289550438) & 0x19C54F94)) + 370081780) ^ 0xB38A9F28;
  LODWORD(v6_Block_object_dispose(va, 8) = ((v116 - ((2 * v116) & 0xFD9B9D00) + 2127416963) & 0x9A6FB9D0 ^ 0x1A631040)
               + ((v116 - ((2 * v116) & 0xFD9B9D00) + 2127416963) & 0x98650150 ^ 0x8414071F)
               - (((v116 - ((2 * v116) & 0xFD9B9D00) + 2127416963) & 0x9A6FB9D0 ^ 0x1A631040) & 0x98650150);
  int v117 = v68 ^ 0xBC5915DF;
  HIDWORD(v152) = v68 & 0xB896BCDE ^ 0x86A800;
  LODWORD(v6_Block_object_dispose(va, 8) = (4 * (LODWORD(STACK[0x470]) ^ LODWORD(STACK[0x4E0]) ^ LODWORD(STACK[0x550]))) ^ 0x58D890F0;
  LODWORD(v152) = (((v68 - ((2 * v68) & 0xD8107230) - 335005415) & 0x9A6FB9D0 ^ 0x82781C0)
                 + ((v68 - ((2 * v68) & 0xD8107230) - 335005415) & 0x880189C0 ^ 0x84800E09)
                 - (((v68 - ((2 * v68) & 0xD8107230) - 335005415) & 0x9A6FB9D0 ^ 0x82781C0) & 0x880189C0)) & 0xFAFFFFD0;
  LODWORD(v6_Block_object_dispose(va, 8) = (((4 * LODWORD(STACK[0x4E0])) ^ 0xD3015D7C)
                - ((2 * ((4 * LODWORD(STACK[0x4E0])) ^ 0xD3015D7C)) & 0xECD5F800)
                + 1986722816) & 0x9A6FB9D0 ^ 0x904ABBC0;
  LODWORD(v114) = (4 * (v114 - ((2 * v114 + 1023909426) & 0x2F893488)) + 1495377268) ^ 0xDF126910;
  LODWORD(v114) = (v114 - ((2 * v114) & 0xCE12C90) - 2039441848) & 0x9A6FB9D0 ^ 0x184420D0;
  LODWORD(v114) = (v114 - ((2 * v114) & 0x14CF53A0) - 361239560) ^ 0x6D36FE2;
  int v118 = (v114 | 0xDBE14A8D) - (v114 | 0x241EB572) + 605992306;
  LODWORD(a55) = (((2 * v68) | 0x9C11120C) - v68 - 1309182214) ^ LODWORD(STACK[0x2AC]);
  unsigned int v119 = (4 * (LODWORD(STACK[0x530]) ^ LODWORD(STACK[0x350]) ^ LODWORD(STACK[0x5C8]))) ^ 0xC87D899C;
  unsigned int v120 = v119 - ((2 * v119) & 0xCB4B2040) - 442134493;
  LODWORD(v6_Block_object_dispose(va, 8) = (((4 * LODWORD(STACK[0x350])) ^ 0xC17CDFFC)
                - ((2 * ((4 * LODWORD(STACK[0x350])) ^ 0xC17CDFFC)) & 0x47A48338)
                - 1546501729) & 0x9A6FB9D0 ^ 0x180B8000;
  LODWORD(a54) = LODWORD(STACK[0x360]) ^ (((2 * v68) & 0x209340A0) - v68 + 1798725540);
  LODWORD(v6_Block_object_dispose(va, 8) = LODWORD(STACK[0x5B8]) ^ LODWORD(STACK[0x620]) ^ LODWORD(STACK[0x4A0]);
  LODWORD(v106) = (v68 & 0x95B91442 ^ 0x80981040 | 0xBE1B8D49)
                - (v68 & 0x95B91442 ^ 0x80981040 | 0x41E472B6)
                + 1105490614;
  LODWORD(v106) = ((v106 & 0xAEB0E909 ^ 0x24A0E308) + (v106 ^ 0xDA1B0801) - ((v106 ^ 0xDA1B0801) & 0xAEB0EB09)) ^ 0xDEB07A03 | v68 & 0x6A46EBBD ^ 0x400629BD;
  LODWORD(v106) = v106 - ((2 * v106) & 0x8C4A38EE) + 1176837239;
  int v121 = ((4 * v106) ^ 0x189471DC) - ((2 * ((4 * v106) ^ 0x189471DC)) & 0x6AF37990) - 1250313015;
  unsigned int v122 = v121 & 0x9A6FB9D0 ^ 0xEE85E24B;
  LODWORD(v6_Block_object_dispose(va, 8) = v68 & 0x10 ^ 0xFFDF2673;
  BOOL v123 = (v121 & ((_DWORD)v68 + 2152861)) == 0;
  int v124 = (2 * v121) & 0x34D83100 ^ 0x20D03100;
  LODWORD(v106) = ((v106 & 0xFFFFFFEF ^ 0x9DE36AA | 0xC516431F)
                 - (v106 & 0xFFFFFFEF ^ 0x9DE36AA | 0x3AE9BCE0)
                 + 988396768) ^ 0xC26B78C1;
  int v125 = ((2 * v106) & 0xDC6FE2E8) - v106 + 298323595;
  int v126 = v68 + 1392368575;
  int v127 = 1388062853 - v68;
  if (v123) {
    int v127 = v126;
  }
  HIDWORD(v151) = v120 & 0x9A6FB9D0;
  unsigned int v128 = (((4 * LODWORD(STACK[0x480])) ^ 0xB9A21BB0)
        - 2 * (((4 * LODWORD(STACK[0x480])) ^ 0xB9A21BB0) & 0x6253939C ^ (4 * LODWORD(STACK[0x480])) & 8)
        + 1649644438) & 0x9A6FB9D0 ^ 0x126B0110;
  unsigned int v129 = (((2 * v128) & 0x24CE01A0) - v128 - 871843574) ^ 0x8800A98A;
  unsigned int v130 = LODWORD(STACK[0x4A0]) ^ LODWORD(STACK[0x620]) ^ LODWORD(STACK[0x640]) ^ (v129
                                                                                - ((2 * v129) & 0xEECF4780)
                                                                                + 2003280839) ^ v125 ^ (v124 + v122 + v127 - ((2 * (v124 + v122 + v127) + 476923558) & 0x31F49AF2) - 953093940);
  LODWORD(STACK[0x35C]) = LODWORD(STACK[0x308]) ^ 0x7055BBDB;
  LODWORD(STACK[0x364]) = LODWORD(STACK[0x310]) ^ 0x3BF272A0;
  LODWORD(v151) = v80 & 0xFFFFFFFC;
  HIDWORD(a52) = v117 & 0xB896BCD0;
  int v131 = v130 ^ v65 ^ v86 ^ v85 ^ v101 ^ v115 ^ v118;
  LODWORD(STACK[0x2AC]) = v131;
  LODWORD(STACK[0x360]) = v131 ^ 0xC185B9A8;
  unsigned int v132 = LODWORD(STACK[0x328]) ^ 0xFFFFFFF6;
  int v133 = LODWORD(STACK[0x210]) ^ 0x27;
  LODWORD(STACK[0x640]) = LODWORD(STACK[0x4C0]) ^ 0xA7F6214A;
  uint64_t v134 = LODWORD(STACK[0x278]) ^ LODWORD(STACK[0x318]) ^ 0x5BE53523u;
  LODWORD(STACK[0x5E8]) = LODWORD(STACK[0x560]) ^ 0xB6AF9C77;
  LODWORD(STACK[0x470]) = v69;
  LODWORD(STACK[0x620]) = v69 ^ 0x58C5DC61;
  unint64_t v135 = STACK[0xB28];
  unint64_t v136 = STACK[0x5B0];
  int v137 = (STACK[0x5B0] - 456) | 0x118;
  LODWORD(STACK[0x5B8]) = v137;
  int v138 = v137 ^ 0x518;
  int v139 = (2 * ((v138 & STACK[0x5D0]) - ((2 * (v138 & STACK[0x5D0])) & 0x6931B018)) + 1764864024) ^ 0x6931B018;
  unsigned int v140 = (v139 - ((2 * v139) & 0xF7E84164) + 2079596723) ^ 0xF5073499;
  unsigned int v141 = ((v140 ^ 0x8EF3142A) & STACK[0x640]) - ((2 * ((v140 ^ 0x8EF3142A) & STACK[0x640])) & 8) + 388;
  unsigned int v142 = ((v141 & 0x17 ^ 0xB7B58C17) - (v141 & 0x17) + (v141 ^ 0xA0)) ^ 0xA15DDA9E;
  unsigned int v143 = ((((2 * v142) | 0xCE93165E) - v142 - 1732873007) ^ 0x71A1DD82) >> STACK[0x5E0];
  unsigned int v144 = (((v143 - ((2 * v143) & 0xA4) - 42) ^ 3) - 4) ^ 0xFFFFFFD1 | (((v140 ^ 0x2A) << v132)
                                                                     + (~(2 * ((v140 ^ 0x2A) << v132)) | 0x11)
                                                                     - 8) ^ 0xFFFFFFF7;
  LOBYTE(v140) = v144 - ((2 * v144) & 0x26);
  unsigned int v145 = (2 * ((STACK[0x5D8] & 0x1AB4AEAE) - ((2 * (STACK[0x5D8] & 0x1AB4AEAE)) & 0x5ED12762)) - 556718238) ^ 0xDED12762;
  unsigned int v146 = (v145 - ((2 * v145) & 0x6DC362FC) - 1226722946) ^ 0xAC551FD0;
  unsigned int v147 = (((v146 & STACK[0x5E8]) - 1020981579 - ((2 * (v146 & STACK[0x5E8])) & 0x864A1D6A)) ^ 0xC3250EB5) >> LODWORD(STACK[0x650]);
  unsigned int v148 = (((v146 & STACK[0x620]) - 1461922502 - ((2 * (v146 & STACK[0x620])) & 0x51B9AA74)) ^ 0xA8DCD53A) << LODWORD(STACK[0x648]);
  uint64_t v149 = 4LL * (v133 ^ (v140 + 19));
  *(_DWORD *)(STACK[0xB00] + v149) = LODWORD(STACK[0x5C0]) ^ LODWORD(STACK[0x5C8]) ^ (v147
                                                                                    + 1307718804
                                                                                    + (~(2 * v147) | 0x641B96D9)) ^ (v148 - ((2 * v148) & 0x15B211FC) - 1965487874) ^ 0xE9C871E4;
  *(_DWORD *)(v135 + v149) = v134 ^ 0x4A972FF9;
  return ((uint64_t (*)(uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)*(&off_10025C670 + (int)((7 * (((v138 - 184077951 - ((2 * v138 + 2) & 0xEA0E6932) + 793) ^ 0xF5073400) < 0x100)) ^ v136)) - 8))( v134,  4212237198LL,  &off_10025C670,  v149,  164LL,  4110889345LL,  3738249058LL,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48,  a49,
           a50,
           a51,
           a52,
           v151,
           a54,
           a55,
           v152);
}

#error "1000F6F28: too big function (funcsize=0)"
uint64_t sub_10010B73C(uint64_t a1, unint64_t a2)
{
  int v2;
  uint64_t v3;
  STACK[0x618] = a2;
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v3 + 8LL * v2))( 1760661928LL,  0xBFAF7BFAFFFE3FDFLL,  0x7F5EF7F5FFFC7FBELL,  0x405084050001C021LL);
}

void sub_10010B838()
{
}

uint64_t sub_10010B840(uint64_t a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t, uint64_t))(*(void *)(v4
                                                                                 + 8LL
                                                                                 * ((((48 * (v3 ^ 0xD4) - 57) == v2)
                                                                                   * (v1
                                                                                    + ((v3 + 134217362) | 0x4B0A501)
                                                                                    + 1530)) ^ v3))
                                                                     - 12LL))( a1,  STACK[0x618],  4294924393LL);
}

uint64_t sub_10010B8A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W8>)
{
  unint64_t v5 = STACK[0x790];
  STACK[0x870] += 16LL;
  BOOL v6 = ((a3 + 11) & 0xF) != (((a3 + 11) << ((((v3 - 41) & 0xCA) - 91) ^ 0x66)) & 0x14);
  return ((uint64_t (*)(uint64_t, uint64_t, unint64_t))(*(void *)(v4 + 8LL * (v6 | (16 * v6) | v3))
                                                                     - 12LL))( a1,  a2,  v5);
}

void sub_10010B930()
{
}

uint64_t sub_10010B938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = (_OWORD *)((char *)&STACK[0xB80] + v4);
  STACK[0x658] = (unint64_t)v6;
  _OWORD *v6 = xmmword_100212410;
  uint64_t v7 = a3 + 116370903;
  unsigned int v8 = -1263679611
     * (((v7 + ((v3 + 1133534020) ^ 0xF9105082)) ^ *(_DWORD *)(qword_1002748C8
                                                             + (int)(dword_100274AD0 & ((v3 + 1133534020) ^ 0xEA60CAFB)))) & 0x7FFFFFFF);
  *((_BYTE *)&STACK[0x15D0] + STACK[0xAA0] + ((v3 + 1133534020) ^ 0xFFFFFFFFF9105082LL) + 116370903) = byte_10023C420[(((v3 + 68) ^ 0x82) - 41) & 0xF | (16 * ((-1263679611 * (v8 ^ HIWORD(v8))) >> 24))] ^ *(_BYTE *)(v7 + ((v3 + 1133534020) ^ 0xFFFFFFFFF9105082LL)) ^ (-123 * (v8 ^ BYTE2(v8)));
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * ((v3 + 1133534020) ^ 0x1BE)) - 8LL))();
}

void sub_10010BA50()
{
}

uint64_t sub_10010BA58()
{
  STACK[0xAA0] = v2 + 32;
  STACK[0xB30] = v0;
  STACK[0xB38] = v3;
  STACK[0xB50] = v0;
  STACK[0xB40] = v0;
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * (v1 ^ (28 * (STACK[0x658] != v0)))) - 4LL))();
}

uint64_t sub_10010BAD4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, unint64_t))(v3
                                                              + 8LL
                                                              * ((27
                                                                * (((v1 == 0) ^ (((v2 + 80) ^ 0x55) - 45)) & 1)) ^ (v2 + 80))))( a1,  STACK[0x618]);
}

uint64_t sub_10010BB0C(uint64_t a1)
{
  uint64_t v5 = (char *)&STACK[0x15D0] + v2;
  *uint64_t v5 = *v1;
  v5[1] = v1[1];
  void v5[2] = v1[2];
  v5[3] = v1[3];
  void v5[4] = v1[4];
  v5[5] = v1[5];
  v5[6] = v1[6];
  v5[7] = v1[7];
  v5[8] = v1[8];
  v5[9] = v1[9];
  v5[10] = v1[10];
  v5[11] = v1[11];
  v5[12] = v1[12];
  v5[13] = v1[13];
  v5[14] = v1[14];
  char v6 = v1[15];
  STACK[0x658] = (unint64_t)v5;
  char v5[15] = v6;
  return (*(uint64_t (**)(uint64_t, unint64_t))(v4
                                                              + 8LL
                                                              * ((27
                                                                * (((v1 == 0LL) ^ (((119 * (v3 ^ 0xB6)) ^ 0x55)
                                                                                                  - 45)) & 1)) ^ (119 * (v3 ^ 0x5B6)))))( a1,  STACK[0x618]);
}

uint64_t sub_10010BBE0@<X0>(char a1@<W8>)
{
  unsigned int v4 = ((a1 & 0xB ^ 0xAA7DD60A) & 0x3F8 ^ 0x310309)
     + v1
     + 96
     + ((((v1 - 1101) | 0x420) + 2086) & (a1 & 0xB ^ 0xAA7DD60A | a1 & 4) ^ 0xA50ED850);
  BOOL v6 = v2 == -381926907 || v4 != -1522540010;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((56 * v6) ^ v1)) - 4LL))();
}

uint64_t sub_10010BC6C()
{
  LODWORD(STACK[0x650]) = v1;
  LODWORD(STACK[0x3CC]) = v0;
  STACK[0xB48] = 0LL;
  unsigned int v4 = malloc(0x408uLL);
  STACK[0xB58] = (unint64_t)v4;
  uint64_t v5 = malloc(0x408uLL);
  STACK[0xB48] = (unint64_t)v5;
  if (v4) {
    BOOL v7 = v5 == 0LL;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = !v7;
  return ((uint64_t (*)(void *, uint64_t))(*(void *)(v3 + 8LL * ((527 * v8) ^ v2))
                                                  - ((v2 + 554043650) | 0x605020u)
                                                  + 560356824LL))( v5,  v6);
}

#error "10010BCF0: too big function (funcsize=0)"
void sub_10011C1C8()
{
  JUMPOUT(0x10011BB88LL);
}

uint64_t sub_10011C218(uint64_t a1, unint64_t a2, int a3)
{
  STACK[0xAA0] = v8 + ((v9 - 623) ^ 0xFFFFFFFFFFFFFE22LL);
  uint64_t v13 = (v9 + 137404431) | 0x4800115u;
  STACK[0x870] = (v13 ^ 0xFFFFFFFFF34F5AA5LL) + v6;
  if (v11 == v10) {
    unint64_t v14 = v5 + v7;
  }
  else {
    unint64_t v14 = 0LL;
  }
  LODWORD(STACK[0x5E8]) = STACK[0x76C];
  unint64_t v15 = STACK[0x790];
  STACK[0x618] = a2;
  uint64_t v3 = (uint64_t (*)(void))(*(void *)(v12
                                     + 8LL
                                     * (int)(((v15 != 0) * (((v13 - 212902672) ^ 0x240) + 1936)) ^ (v13 - 212902672)))
                         - 55 * (((_DWORD)v13 - 212902672) ^ 0x240u)
                         + 271LL);
  LODWORD(STACK[0x5B8]) = a3;
  STACK[0x5D8] = v14;
  return v3();
}

uint64_t sub_10011C268( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v75 = LODWORD(STACK[0x3B0]) ^ LODWORD(STACK[0x3D8]) ^ LODWORD(STACK[0x210]) ^ 0x4528317F;
  int v76 = LODWORD(STACK[0x5D0]) ^ LODWORD(STACK[0x3D8]) ^ LODWORD(STACK[0x210]) ^ 0x62172C66;
  BOOL v77 = (STACK[0x510] & 1) == 0;
  if ((STACK[0x510] & 1) != 0) {
    int v78 = STACK[0x368];
  }
  else {
    int v78 = STACK[0x374];
  }
  int v79 = STACK[0x398];
  if ((STACK[0x510] & 1) != 0) {
    int v79 = STACK[0x35C];
  }
  LODWORD(STACK[0x5D0]) = v79;
  if (v77) {
    int v80 = STACK[0x36C];
  }
  else {
    int v80 = v75;
  }
  if (v77) {
    int v81 = v76;
  }
  else {
    int v81 = STACK[0x378];
  }
  if (v77) {
    int v82 = v75;
  }
  else {
    int v82 = v76;
  }
  if (v77) {
    int v83 = STACK[0x364];
  }
  else {
    int v83 = STACK[0x360];
  }
  if (v77) {
    int v84 = STACK[0x394];
  }
  else {
    int v84 = STACK[0x390];
  }
  BOOL v85 = LODWORD(STACK[0x640]) == -1965538105;
  int v86 = STACK[0x590];
  if (LODWORD(STACK[0x640]) == -1965538105) {
    int v86 = STACK[0x530];
  }
  LODWORD(STACK[0x374]) = v86;
  int v87 = STACK[0x430];
  if (v85) {
    int v87 = STACK[0x428];
  }
  LODWORD(STACK[0x378]) = v87;
  int v88 = STACK[0x500];
  if (v85) {
    int v88 = STACK[0x4C0];
  }
  LODWORD(STACK[0x36C]) = v88;
  int v89 = STACK[0x460];
  if (!v85) {
    int v89 = STACK[0x458];
  }
  LODWORD(STACK[0x390]) = v89;
  int v90 = STACK[0x450];
  if (!v85) {
    int v90 = STACK[0x448];
  }
  LODWORD(STACK[0x4C0]) = v90;
  int v91 = STACK[0x440];
  if (!v85) {
    int v91 = STACK[0x438];
  }
  LODWORD(STACK[0x400]) = v91;
  int v92 = STACK[0x580];
  LODWORD(STACK[0x430]) = v78;
  if (v85) {
    int v92 = v78;
  }
  LODWORD(STACK[0x2AC]) = v92;
  LODWORD(STACK[0x648]) = v80;
  LODWORD(STACK[0x440]) = v81;
  if (v85) {
    int v93 = v81;
  }
  else {
    int v93 = v80;
  }
  LODWORD(STACK[0x530]) = v93;
  int v94 = STACK[0x550];
  LODWORD(STACK[0x364]) = v82;
  if (!v85) {
    int v94 = v82;
  }
  LODWORD(STACK[0x590]) = v94;
  int v95 = STACK[0x620];
  LODWORD(STACK[0x368]) = v83;
  if (v85) {
    int v95 = v83;
  }
  LODWORD(STACK[0x398]) = v95;
  int v96 = STACK[0x560];
  LODWORD(STACK[0x3B0]) = v84;
  if (!v85) {
    int v96 = v84;
  }
  LODWORD(STACK[0x394]) = v96;
  if ((STACK[0x3D0] & 1) != 0) {
    int v97 = STACK[0x28C];
  }
  else {
    int v97 = STACK[0x288];
  }
  if ((STACK[0x3D0] & 1) != 0) {
    int v98 = STACK[0x268];
  }
  else {
    int v98 = STACK[0x260];
  }
  if ((STACK[0x3D0] & 1) != 0) {
    int v99 = STACK[0x2A8];
  }
  else {
    int v99 = STACK[0x270];
  }
  int v100 = STACK[0x248];
  if ((STACK[0x3D0] & 1) == 0) {
    int v100 = STACK[0x244];
  }
  LODWORD(STACK[0x460]) = v100;
  BOOL v101 = LODWORD(STACK[0x5E8]) == 413541838;
  int v102 = STACK[0x410];
  if (LODWORD(STACK[0x5E8]) != 413541838) {
    int v102 = STACK[0x40C];
  }
  LODWORD(STACK[0x428]) = v102;
  int v103 = STACK[0x224];
  if (!v101) {
    int v103 = a73;
  }
  LODWORD(STACK[0x448]) = v103;
  int v104 = STACK[0x218];
  if (!v101) {
    int v104 = a71;
  }
  LODWORD(STACK[0x450]) = v104;
  int v105 = STACK[0x3E0];
  if (v101) {
    int v105 = STACK[0x3D4];
  }
  LODWORD(STACK[0x438]) = v105;
  int v106 = STACK[0x3BC];
  if (!v101) {
    int v106 = STACK[0x228];
  }
  LODWORD(STACK[0x28C]) = v106;
  LODWORD(STACK[0x500]) = LODWORD(STACK[0x5B0]) ^ 0x8FC9A2DE;
  int v107 = STACK[0x3F0];
  LODWORD(STACK[0x3D4]) = v97;
  if (v101) {
    int v107 = v97;
  }
  LODWORD(STACK[0x2A8]) = v107;
  LODWORD(STACK[0x3E0]) = v98;
  LODWORD(STACK[0x3BC]) = v99;
  if (v101) {
    int v108 = v98;
  }
  else {
    int v108 = v99;
  }
  LODWORD(STACK[0x458]) = v108;
  unint64_t v109 = v74 - 1097366281LL + ((unint64_t)(v74 < 0x41687B09) << 32);
  *(void *)(STACK[0xB40] + 8 * v109) = *(void *)(STACK[0xB50] + 8 * v109) ^ 0xC9C9C9C9C9C9C9C9LL;
  BOOL v110 = v74 - 1097366280 >= STACK[0x650];
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + ((v110 | (2 * v110)) ^ v73)) - 8))();
}

void sub_10011CAF0()
{
}

uint64_t sub_10011CB24()
{
  if ((STACK[0x510] & 1) != 0) {
    int v1 = STACK[0x380];
  }
  else {
    int v1 = STACK[0x3A0];
  }
  BOOL v2 = LODWORD(STACK[0x640]) == -1965538105;
  int v3 = STACK[0x470];
  if (LODWORD(STACK[0x640]) != -1965538105) {
    int v3 = STACK[0x468];
  }
  LODWORD(STACK[0x468]) = v3;
  int v4 = STACK[0x648];
  if (!v2) {
    int v4 = STACK[0x440];
  }
  LODWORD(STACK[0x510]) = v4;
  int v5 = STACK[0x4F0];
  if (v2) {
    int v5 = STACK[0x4E0];
  }
  LODWORD(STACK[0x4E0]) = v5;
  int v6 = STACK[0x5D0];
  LODWORD(STACK[0x380]) = v1;
  if (!v2) {
    int v6 = v1;
  }
  LODWORD(STACK[0x470]) = v6;
  int v7 = STACK[0x4D0];
  if (!v2) {
    int v7 = STACK[0x4B0];
  }
  LODWORD(STACK[0x4F0]) = v7;
  int v8 = STACK[0x4A0];
  if (!v2) {
    int v8 = STACK[0x498];
  }
  LODWORD(STACK[0x40C]) = v8;
  int v9 = STACK[0x480];
  if (!v2) {
    int v9 = STACK[0x47C];
  }
  LODWORD(STACK[0x410]) = v9;
  LODWORD(STACK[0x648]) = LODWORD(STACK[0x284]) - LODWORD(STACK[0x278]);
  if ((STACK[0x3D0] & 1) != 0) {
    int v10 = STACK[0x2C4];
  }
  else {
    int v10 = STACK[0x340];
  }
  BOOL v11 = LODWORD(STACK[0x5E8]) == 413541838;
  int v12 = STACK[0x2A4];
  if (LODWORD(STACK[0x5E8]) == 413541838) {
    int v12 = STACK[0x294];
  }
  LODWORD(STACK[0x2A4]) = v12;
  int v13 = STACK[0x418];
  if (!v11) {
    int v13 = STACK[0x29C];
  }
  LODWORD(STACK[0x288]) = v13;
  int v14 = *(unsigned __int8 *)(STACK[0x658]
                           + ((*(_BYTE *)(STACK[0x658]
                                        + ((*(_BYTE *)(STACK[0x658] + ((*(_BYTE *)(STACK[0x658] + 1) + 10) & 0xF)) + 9) & 0xF))
                             + 6) & 0xF))
      + 11;
  int v15 = ((v14 & 0xF) - ((2 * v14) & 0x1A) + 109) ^ 0x6D;
  unsigned int v16 = (v15 ^ 0xDDFBDFFD) + ((2 * v15) & 0x1FA) - 917308935;
  int v17 = STACK[0x460];
  LODWORD(STACK[0x4B0]) = v10;
  if (v11) {
    int v17 = v10;
  }
  LODWORD(STACK[0x440]) = v17;
  BOOL v18 = v16 < 0xA74ED9F6;
  if (v16 >= 0xA74ED9F6) {
    BOOL v18 = v16 > 0xA74ED9F7;
  }
  return ((uint64_t (*)(void))*(&off_10025C670 + ((2033 * !v18) ^ v0)))();
}

uint64_t sub_10011DCA0()
{
  BOOL v2 = LODWORD(STACK[0x640]) == -1965538105;
  int v3 = STACK[0x580];
  if (LODWORD(STACK[0x640]) != -1965538105) {
    int v3 = STACK[0x430];
  }
  LODWORD(STACK[0x284]) = v3;
  int v4 = STACK[0x550];
  if (v2) {
    int v4 = STACK[0x364];
  }
  LODWORD(STACK[0x4D0]) = v4;
  int v5 = STACK[0x5C0];
  if (v2) {
    int v5 = STACK[0x5A0];
  }
  LODWORD(STACK[0x418]) = v5;
  int v6 = STACK[0x560];
  if (v2) {
    int v6 = STACK[0x3B0];
  }
  LODWORD(STACK[0x560]) = v6;
  BOOL v7 = LODWORD(STACK[0x5E8]) == 413541838;
  int v8 = STACK[0x3E0];
  if (LODWORD(STACK[0x5E8]) == 413541838) {
    int v8 = STACK[0x3BC];
  }
  LODWORD(STACK[0x248]) = v8;
  int v9 = STACK[0x3F8];
  if (!v7) {
    int v9 = STACK[0x3E8];
  }
  LODWORD(STACK[0x430]) = v9;
}

uint64_t sub_10011E128( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  unsigned int v11 = (((v9 - 2084684283) >> 8) ^ 0xFDBFDE5F)
      + v9
      + (((v9 - 2084684283) >> 7) & 0x17FBCBE);
  unsigned int v12 = ((v11 - 2046926938) >> 4) & 0x2EFFF7C;
  unsigned int v13 = v11 + (((v11 - 2046926938) >> 5) ^ 0x66880041) + 1;
  int v14 = v13 - v12 - 2 * ((v13 - v12 + 527851364) & 0x5D62B23F ^ v13 & 2) - 52883039;
  unsigned int v15 = ((2 * ((v14 ^ 0xDD62B23D) - 1879573490)) & 0x5FA6BDFA) + (((v14 ^ 0xDD62B23D) - 1879573490) ^ 0x2FD35EFD);
  unsigned int v16 = (((v15 - 802381565) >> 10) ^ 0x7FB77FDF) + v15 + (((v15 - 802381565) >> 9) & 0x6EFFBE);
  unsigned int v17 = ((v16 + 1349853476) & 0xFEEF6EFC) + v16 + (((v16 + 1349853476) >> 1) ^ 0xFF77B77E);
  unsigned int v18 = v17 - ((2 * v17 - 1577397428) & 0xCD99720A) + 935994027;
  unsigned int v19 = ((2 * ((v18 ^ 0xE6CCB905) + 1287124013)) & 0x52FF7FFE) + (((v18 ^ 0xE6CCB905) + 1287124013) ^ 0x297FBFFF);
  unsigned int v20 = v19 + (((v19 - 696238079) >> 13) ^ 0x440B498) - (((v19 - 696238079) >> 12) & 0xE96CE);
  unsigned int v21 = v20 + (((v20 - 767587479) >> 6) ^ 0xA01A02E9) - (((v20 - 767587479) >> 5) & 0x7CBFA2C) + 2;
  int v22 = v21 - ((2 * v21 + 72028412) & 0x18B62862) - 1098867537;
  unsigned int v23 = ((2 * ((v22 ^ 0x8C5B1431) - 1282870125)) & 0x5FB3EFF6) + (((v22 ^ 0x8C5B1431) - 1282870125) ^ 0xAFD9F7FB);
  unsigned int v24 = (((v23 + 1344669701) >> 8) ^ 0xBD5AFDBC) + v23 + (((v23 + 1344669701) >> 7) & 0xB5FB78);
  unsigned int v25 = (((v24 - 1832187319) >> 2) ^ 0x9BF3DBFE) + v24 + (((v24 - 1832187319) >> 1) & 0x37E7B7FC);
  int v26 = v25 - ((2 * v25 + 766401686) & 0x337DC5B6) - 1869213402;
  unsigned int v27 = ((2 * ((v26 ^ 0x99BEE2DB) + 707258702)) & 0xCFED7BBC) + (((v26 ^ 0x99BEE2DB) + 707258702) ^ 0xE7F6BDDE);
  unsigned int v28 = (((v27 + 403259938) >> 13) ^ 0x7E7F8D7E) + v27 + (((v27 + 403259938) >> 12) & 0xF1AFC);
  unsigned int v29 = (((v28 - 1719028572) >> 3) ^ 0x9CFDF6FC) + v28 + (((v28 - 1719028572) >> 2) & 0x39FBEDF8);
  unsigned int v30 = v29 - ((2 * v29 + 957840208) & 0x3FD38F52) - 1670019759;
  unsigned int v31 = (v30 ^ 0x14669123) + ((v30 >> 11) ^ 0xF0A3CD93) + ((v30 >> 10) & 0x3D7D7C ^ 0xFFFAE6DB) + 257867456;
  unsigned int v32 = (((((2 * v31) & 0xD7F36FF4) + (v31 ^ 0xEBF9B7FA) + 335955974) >> 5) ^ 0xBE63FF5D)
      + ((2 * v31) & 0xD7F36FF4)
      + (v31 ^ 0xEBF9B7FA)
      + (((((2 * v31) & 0xD7F36FF4) + (v31 ^ 0xEBF9B7FA) + 335955974) >> 4) & 0xCC7FEBA);
  unsigned int v33 = v32 - ((2 * v32 + 725913938) & 0x4D963F76) + 2087544932;
  unsigned int v34 = (v33 ^ 0x1297CB43) + ((v33 >> 12) ^ 0xC6813D7C) + ((v33 >> 11) & 0x1FD7FE ^ 0xFFFDAD07) + 964684801;
  unsigned int v35 = (((((2 * v34) & 0xF17FB9F8) + (v34 ^ 0x78BFDCFC) - 2025839868) >> 7) ^ 0x7F697FFE)
      + ((2 * v34) & 0xF17FB9F8)
      + (v34 ^ 0x78BFDCFC)
      + (((((2 * v34) & 0xF17FB9F8) + (v34 ^ 0x78BFDCFC) - 2025839868) >> 6) & 0x2D2FFFC);
  int v36 = v35 - ((2 * v35 + 263013900) & 0x225F375A) - 1727643981;
  unsigned int v37 = ((2 * ((v36 ^ 0x912F9BAD) - 2045107421)) & 0xFFFAF9FE) + (((v36 ^ 0x912F9BAD) - 2045107421) ^ 0xFFFD7CFF);
  unsigned int v38 = (((v37 + 164609) >> 11) ^ 0xDFEFBB77) + v37 + (((v37 + 164609) >> 10) & 0x1F76EE);
  unsigned int v39 = v38 + (((v38 + 538101642) >> 8) ^ 0x190808C0) - (((v38 + 538101642) >> 7) & 0x1EFEE7E) + 1;
  unsigned int v40 = v39 - ((2 * v39 + 236289426) & 0x59EDD35A) + 872523894;
  unsigned int v41 = (v40 ^ 0x166667FE) + ((v40 >> 8) ^ 0x87947667) + 2021519361 + ((2 * (v40 >> 8)) & 0xFBDFFE ^ 0xFFD73331);
  unsigned int v42 = (((((2 * v41) & 0xDF7F2FFA) + (v41 ^ 0x6FBF97FD) - 1874827261) >> 8) ^ 0xFFF3DFFA)
      + ((2 * v41) & 0xDF7F2FFA)
      + (v41 ^ 0x6FBF97FD)
      + (((((2 * v41) & 0xDF7F2FFA) + (v41 ^ 0x6FBF97FD) - 1874827261) >> 7) & 0x1E7BFF4);
  unsigned int v43 = v22 ^ a4 ^ v33 ^ (v42 - ((2 * v42 + 546902034) & 0x9194C662) + 1494674234);
  int v44 = (v43 & 5 ^ 0x4C357417) - (v43 & 2);
  int v45 = (((v43 ^ 3) + 1) & 7) - ((2 * ((v43 ^ 3) + 1)) & 0xA) - 1856789971;
  LODWORD(STACK[0x3A0]) = v44;
  unsigned int v46 = v44 ^ 0xB7B51AF2;
  if (v46 == -75469087) {
    int v47 = 0;
  }
  else {
    int v47 = 255;
  }
  LODWORD(STACK[0x3E0]) = v45;
  STACK[0x3B0] = v45 ^ 0x9153A22D;
  LODWORD(STACK[0x3BC]) = v46;
  unsigned int v48 = (v47 << (v45 ^ 0x2D)) - ((2 * (v47 << (v45 ^ 0x2D))) & 0xD686994A) - 347911003;
  char v49 = v48 ^ 0x5A;
  if (v46 == -75469087) {
    char v49 = 0;
  }
  BOOL v50 = LODWORD(STACK[0x640]) == -1965538105;
  int v51 = STACK[0x5D0];
  if (LODWORD(STACK[0x640]) == -1965538105) {
    int v51 = STACK[0x380];
  }
  LODWORD(STACK[0x4A0]) = v51;
  int v52 = STACK[0x620];
  if (!v50) {
    int v52 = STACK[0x368];
  }
  LODWORD(STACK[0x480]) = v52;
  int v53 = STACK[0x460];
  if (LODWORD(STACK[0x5E8]) != 413541838) {
    int v53 = STACK[0x4B0];
  }
  LODWORD(STACK[0x244]) = v53;
  int v54 = v18 ^ v8 ^ v30;
  unsigned int v55 = v14 ^ a8 ^ v26 ^ v36;
  unsigned int v56 = v54 ^ v40;
  unsigned int v57 = ((v55 & 0xFFFFFF80 ^ 0xCA9EA880)
       + (v55 & 0xCE36E180 ^ 0x4204155)
       - ((v55 & 0xFFFFFF80 ^ 0xCA9EA880) & 0xCE36E180)) ^ 0x4F5EE1E4;
  LODWORD(STACK[0x5D0]) = v43;
  unsigned int v58 = ((v43 & 0x9AA54B28 ^ 0x1A254029 | v43 & 0x655AB4D0) - 1) ^ 0xE6EC791B;
  LODWORD(STACK[0x550]) = (v58 | 0xB2528DC5) - (v58 | 0x4DAD723A);
  unsigned int v59 = ((v48 & 0x51 ^ 0xC26C8710) + (v48 & 0xAE ^ 0x29) - 1) ^ 0x88FD53E8;
  unsigned int v60 = (v59 - ((2 * v59) & 0x8002A438) + 1413960220) ^ 0x1ED68669;
  LODWORD(STACK[0x498]) = (33686018 * v60) & 0x99582814;
  LODWORD(STACK[0x3E8]) = 16843009 * v60 - 861137910;
  unsigned int v61 = ((1593835520 * v60 - ((-1107296256 * v60) & 0xAC000000) - 693530329) ^ 0xD6A99127) & (v56 ^ 0x36BEF6FF);
  LODWORD(STACK[0x460]) = v61 - ((2 * v61) & 0x5274023E) + 691667231;
  LODWORD(STACK[0x4B0]) = v55 ^ 0x43E3A17A;
  int v62 = ((v49 & (v55 ^ 0x7A)) - ((2 * (v49 & (v55 ^ 0x7A))) & 0x12) - 119) ^ 0x5C;
  LODWORD(STACK[0x368]) = ((2 * v62) | 0x98BDF686) - v62 - 1281293123;
  unsigned int v63 = (((2 * ((v55 ^ BYTE1(v55) ^ BYTE2(v55)) ^ 0x9F)) | 0x34DE3896)
  unsigned int v64 = (((2 * v63) & 0x2EF7AE0) - v63 - 24624497) ^ HIBYTE(v55) ^ 0xFC807BEE;
  unsigned int v65 = 16843009 * v64 - ((33686018 * v64) & 0xFA316944) - 48712542;
  unsigned int v66 = 0xE668D621 % STACK[0x650];
  LODWORD(STACK[0x5A0]) = v56;
  unsigned int v67 = (((2 * ((v56 ^ BYTE1(v56) ^ BYTE2(v56)) ^ 0x42888AC)) | 0x2577CCAE)
  unint64_t v68 = (*(void *)(STACK[0xB40] + 8LL * v66) ^ 0xC9C9C9C9C9C9C9C9LL) + 2103980986;
  unint64_t v69 = (*(void *)(STACK[0xB40]
                   + 8
                   * (((v68 ^ 0xBF7E3F7BEFDBCFEFLL) + 0x4081C08410243011LL + ((2 * v68) & 0x7EFC7EF7DFB79FDELL))
                    % STACK[0x570])) ^ 0xC9C9C9C9C9C9C9C9LL)
      + 815561086;
  unint64_t v70 = (*(void *)(STACK[0xB40]
                   + 8
                   * (((v69 ^ 0xEFFE7F67FFFBE5DELL) + 0x1001809800041A22LL + ((2 * v69) & 0xDFFCFECFFFF7CBBCLL))
                    % STACK[0x570])) ^ 0xC9C9C9C9C9C9C9C9LL)
      + 925802721;
  uint64_t v71 = *(void *)(STACK[0xB40]
                  + 8
                  * (((v70 ^ 0xE4C777F5FEF8DDCBLL) + 0x1B38880A01072235LL + ((2 * v70) & 0xC98EEFEBFDF1BB96LL))
                   % STACK[0x570]));
  int v72 = 16843009 * v67 - ((33686018 * v67) & 0x6FA196FA) - 1211053187;
  uint64_t v73 = 2 * v71 - ((4 * v71) & 0x61EAF99B66EC105CLL) - 0x4F0A83324C89F7D2LL;
  LODWORD(v71) = (v71
                + (v73 & 0x9393939393939392LL ^ 0x86C520819B11A223LL)
                + ((2 * v73) & 0x307072727202324LL ^ 0xFEFDFEFCD9DFFFFBLL)
                - 0x4C8A6636101FCADBLL)
               % STACK[0x570];
  unsigned int v74 = ((v71 - ((2 * v71) & 0x41920D94) - 1597438262) ^ 0x1F627E37)
      + 1735043060
      + ((2 * (v71 - ((2 * v71) & 0x41920D94) - 1597438262)) & 0x7F56F1FA ^ 0x41120190);
  LODWORD(STACK[0x580]) = v57;
  LODWORD(STACK[0x47C]) = (2 * v57) & 0xB1589222;
  LODWORD(STACK[0x5C0]) = v55;
  int v75 = v55 & 0x7F ^ 0x70;
  LODWORD(STACK[0x2C4]) = 33686018 * v75;
  LODWORD(STACK[0x380]) = (33686018 * v75) & 0xCA58EF92;
  LODWORD(STACK[0x29C]) = v75;
  LODWORD(STACK[0x360]) = 16843009 * v75 + 1697413065;
  LODWORD(STACK[0x3F8]) = v65;
  LODWORD(STACK[0x364]) = v72;
  LODWORD(STACK[0x620]) = v72 ^ v65;
  BOOL v76 = v74 > 0x271620F2;
  if (v74 < 0x271620F1) {
    BOOL v76 = 1;
  }
  return ((uint64_t (*)(void))*(&off_10025C670 + ((318 * !v76) ^ v10)))();
}

uint64_t sub_10011F4C8()
{
  LODWORD(STACK[0x278]) = LODWORD(STACK[0x3A4]) - LODWORD(STACK[0x3A8]);
  int v2 = STACK[0x3F0];
  if (LODWORD(STACK[0x5E8]) != 413541838) {
    int v2 = STACK[0x3D4];
  }
  LODWORD(STACK[0x260]) = v2;
  LODWORD(STACK[0x3F0]) = LODWORD(STACK[0x580]) - 659797667;
  LODWORD(STACK[0x380]) = LODWORD(STACK[0x360]) - LODWORD(STACK[0x380]);
  int v3 = LODWORD(STACK[0x3E8]) - LODWORD(STACK[0x498]);
  LODWORD(STACK[0x3E8]) = v3;
  LODWORD(STACK[0x340]) = v3 ^ LODWORD(STACK[0x368]);
  LODWORD(STACK[0x268]) = LODWORD(STACK[0x364]) ^ 0xAD020C0D;
  return ((uint64_t (*)(void))*(&off_10025C670 + ((1336 * (v1 - 1363646348 >= STACK[0x650])) ^ v0)))();
}

void sub_10011FC54()
{
}

uint64_t sub_10011FC98(uint64_t a1)
{
  *(_DWORD *)a1 = 1711260689;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 56) = 448329679;
  *(void *)(a1 + 64) = 0x4378B8CC4843E522LL;
  *(_DWORD *)(a1 + 72) = 678136159;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = HIBYTE(v4) ^ 0x37;
  *(_BYTE *)(a1 + 9) = (v4 >> (((v3 - 45) & 0xEA) - 114)) ^ (27 * (v3 ^ 0xDD) - 5);
  *(_BYTE *)(a1 + 10) = BYTE1(v4) ^ 0x10;
  *(_BYTE *)(a1 + 11) = v4 ^ 0xC4;
  *(_WORD *)(a1 + 92) = v5;
  *(_DWORD *)(a1 + 96) = v2;
  *(void *)(a1 + 104) = 0LL;
  *(_DWORD *)(a1 + 112) = 1768032834;
  *(void *)(a1 + 136) = 0LL;
  *(_DWORD *)(a1 + 144) = 150298638;
  *(void *)(a1 + 120) = 0x57F7A3E501E5FAB3LL;
  *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = 0;
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * (v3 ^ (1083 * ((v2 + 1062694304) < 8)))) - 12LL))();
}

uint64_t sub_10011FDB0()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * (((((0xEFu >> v1) & 1) == (((_BYTE)v0 + 75) & 0x93 ^ 0x82)) * (v0 - 572)) ^ v0))
                            - 12LL))();
}

uint64_t sub_10011FE04@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((a1 - 386) | (16 * (STACK[0xA28] == 0)))) - 4LL))();
}

uint64_t sub_10011FE28()
{
  STACK[0x650] = v4;
  STACK[0x658] = v2;
  *(_DWORD *)(v5 + 4) = dword_10023A670[v1];
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 8LL * (((((((v0 - 872625005) & 0x77AF7BDB) - 1135363075) ^ 0x6BBA2F08) >= (int)(((((v0 - 872625005) & 0x77AF7BDB) - 1475453243) ^ 0xEBBAACF2) + 1807360738)) * (((((v0 - 872625005) & 0x77AF7BDB) - 1475453243) & 0x7FFF7E2C) - 1807362008)) ^ (((v0 - 872625005) & 0x77AF7BDB) - 1135363075)))
                                                                                       - 8LL))( 412LL,  824LL,  107LL,  1540LL,  223LL,  1339LL);
}

uint64_t sub_10011FF0C()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
}

uint64_t sub_10011FF44(int a1)
{
  int v5 = v1 ^ a1;
  char v6 = arc4random();
  *(_BYTE *)(v3 + v2 + 12) = (v6 - 5 - ((v5 - 68) & (2 * v6))) ^ 0x6B;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)*(&off_10025C670
                                                                                                 + (((((((v5 ^ 0x338) - 1001) | 0x20) ^ v4) + (v5 ^ 0x338) - v4 - 831) * (v2 == 15)) ^ v5 ^ 0x338))
                                                                                       - 8))( 412LL,  824LL,  107LL,  1540LL,  223LL,  1339LL);
}

void sub_100120034()
{
}

uint64_t sub_10012003C()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((1131
                                          * (*(_DWORD *)(v2 + 4) == ((144 * (v0 ^ 0x230) + 104350201) ^ (v0 - 390)))) ^ v0))
                            - 4LL))();
}

uint64_t sub_100120088()
{
  uint64_t v2 = v0;
  STACK[0xA60] = STACK[0x658];
  STACK[0x6C8] = STACK[0x650];
  unint64_t v3 = STACK[0x870];
  STACK[0x6D8] = (unint64_t)&STACK[0xB80] + STACK[0x870];
  STACK[0x870] = v3 + 16;
  STACK[0x7C8] = 0LL;
  STACK[0x988] = 0LL;
  LODWORD(STACK[0x8BC]) = 150298638;
  STACK[0x6B8] = 1LL;
  BOOL v4 = container_system_group_path_for_identifier(0LL, "systemgroup.com.apple.pisco.suinfo", &STACK[0x6B8]) != 0;
  return (*(uint64_t (**)(void))(v2 + 8LL * ((v4 * (((v1 ^ 0x631) - 1456) ^ 0x1D6)) | v1)))();
}

uint64_t sub_100120114()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL * ((7 * (STACK[0x6B8] != ((v0 + 179729955) & 0xF54989DF) - 212LL)) ^ v0))
                            - ((v0 - 861430000) & 0x3358669F ^ 0x686LL)))();
}

uint64_t sub_100120178()
{
  size_t v2 = strlen(v0);
  BOOL v3 = malloc( (v1 + 68)
       - 0x3F61B7D60C7BB2FBLL
       + ((v2 << ((v1 - 83) ^ 0x83u)) & 0x7EC36FAC18F763FELL)
       + (v2 ^ 0x3F61B7D60C7BB1FFLL)) != 0LL;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + ((1725 * v3) ^ v1)) - 4))();
}

uint64_t sub_100120204()
{
  return (*(uint64_t (**)(void))(v0 + 8LL * (((((v2 + 1295) | 0x50) - 1567) * (v1 != 0x3F61B7D60C7BB1FFLL)) ^ v2)))();
}

uint64_t sub_10012027C@<X0>(unint64_t a1@<X8>)
{
  *(_BYTE *)(v3 + v7 - 0x1FFBDEA8F0D29ADALL) = *(_BYTE *)(v2 + v6 - 0x74E4ABEA472DD201LL);
  unint64_t v9 = v4 - 0x184B1885B45AE6C4LL;
  int v10 = (v1 < a1) ^ (v9 < a1);
  BOOL v11 = v9 < v1;
  if (v10) {
    BOOL v11 = v1 < a1;
  }
  return (*(uint64_t (**)(void))(v5 + 8LL * ((89 * v11) ^ v8)))();
}

uint64_t sub_100120310()
{
  v3[((v4 - 1477) ^ (unint64_t)(v0 + 425)) + v1] = 0;
  free(v2);
  uint64_t v5 = fopen(v3, "rb");
  free(v3);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + (((v5 == 0LL) * ((v4 + 10) ^ 0x63B)) ^ v4)) - 8))();
}

uint64_t sub_1001203E0()
{
  int v2 = ftell(v0);
  uint64_t v3 = ((v1 + 2) ^ 0x6FBD125D) + v2 - ((2 * v2) & 0xDF7A25D0);
  fseek(v0, 0LL, 0);
  int v4 = malloc(v3 ^ (((2 * v1) ^ 0x7E4u) + 1874660454LL));
  STACK[0x7C8] = (unint64_t)v4;
  return ((uint64_t (*)(void))*(&off_10025C670 + (((2 * (v4 != 0LL)) | ((v4 != 0LL) << 10)) ^ v1)))();
}

uint64_t sub_100120470(void *a1)
{
  LODWORD(STACK[0x650]) = 1282311541;
  LODWORD(STACK[0x648]) = 1132012903;
  int v5 = fread(a1, 1uLL, v3 ^ (v1 + 2199) ^ ((v4 - 176) | 0x610u), v2);
  STACK[0x658] = 0LL;
  unint64_t v6 = ((v5 - ((2 * v5) & 0x24F0BEF0) - 1837605000) & 0xD926C406 ^ 0x80471C011924C003LL)
     + ((v5 - ((2 * v5) & 0x24F0BEF0) - 1837605000) & 0x26D93BF9)
     - 1;
  STACK[0x640] = v6 ^ 0x37CEF88E14720140LL;
  return ((uint64_t (*)(void))*(&off_10025C670
                             + ((1306 * ((v6 ^ 0x37CEF88E14720140LL ^ v3) == 0xB789E48FF0938CD2LL)) ^ v4)))();
}

uint64_t sub_100120568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  STACK[0x658] = 0LL;
  return (*(uint64_t (**)(void))(a7
                              + 8LL
                              * ((749 * (*v7 == ((((v8 + 124) | 0x80) + 99) ^ ((v8 + 75) | 0x15)))) ^ v8)))();
}

uint64_t sub_1001205B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  STACK[0x658] = 0LL;
  return (*(uint64_t (**)(void))(a7
                              + 8LL
}

uint64_t sub_10012065C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

uint64_t sub_1001206B4(int a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  STACK[0x658] = 0LL;
  uint64_t v15 = a4 + a2 + v8 + v14 + 0xAD165B6CACB88DLL;
  __int16 v16 = (((*(unsigned __int8 *)v15
  LOWORD(v15) = (v16 - ((2 * v16) & 0xB000) - 10149) ^ 0xD85B | (*(unsigned __int8 *)(v15 + 1)
                                                               - ((2 * *(_BYTE *)(v15 + 1)) & 0xAA)
                                                               - 8363) ^ 0xDF55;
  LODWORD(v15) = (unsigned __int16)(v15 - ((2 * v15) & 0x80E8) + 16500) ^ 0x4074;
  uint64_t v17 = v7 + (v15 ^ v10) + ((v12 + 2962) & (2 * (_DWORD)v15)) - 1054863316;
  return (*(uint64_t (**)(void))(a7
                              + 8LL
                              * (a1 | (4
                                     * (v13 <= v9
                                             + (v17 | ((unint64_t)(v17 < v11) << 32))
                                             + 0xB10EF9A0D079F9ELL
                                             + 181)))))();
}

uint64_t sub_1001207C4()
{
  STACK[0x948] = 0xA71347E016010026LL;
  uint64_t v1 = malloc(0x15uLL);
  STACK[0xA28] = (unint64_t)v1;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + (int)(((((v0 - 17) ^ (v1 == 0LL)) & 1)
                                             * (((v0 + 883010214) & 0xCB5E56CB) - 1460)) ^ v0))
                            - 4))();
}

uint64_t sub_1001209F4(_BYTE *a1)
{
  *a1 = ((v1 & 0xDD) + 99) ^ 0xB1 ^ ((v2[4] & 0x7F ^ 0xBE)
                                   + ((2 * (v2[4] & 0x7F ^ 0xBE)) & 0xE3 ^ ((((v1 & 0xDD) + 100) | 0x8A) + 52))
                                   - 14);
  a1[1] = v2[12] ^ 0x90;
  a1[2] = v2[13] ^ 0x90;
  a1[3] = v2[14] ^ 0x90;
  a1[4] = v2[15] ^ 0x90;
  a1[5] = v2[16] ^ 0x90;
  a1[6] = v2[17] ^ 0x90;
  a1[7] = v2[18] ^ 0x90;
  a1[8] = v2[19] ^ 0x90;
  a1[9] = v2[20] ^ 0x90;
  a1[10] = v2[21] ^ 0x90;
  a1[11] = v2[22] ^ 0x90;
  a1[12] = v2[23] ^ 0x90;
  a1[13] = v2[24] ^ 0x90;
  a1[14] = v2[25] ^ 0x90;
  a1[15] = v2[26] ^ 0x90;
  a1[16] = v2[27] ^ 0x90;
  a1[17] = v2[8] ^ 0x68;
  a1[18] = v2[9] ^ 0x68;
  a1[19] = v2[10] ^ 0x68;
  a1[20] = v2[11] ^ 0x68;
  unint64_t v4 = STACK[0xA28] + 1;
  STACK[0xAA0] += 32LL;
  LODWORD(STACK[0xACC]) = 0;
  STACK[0xAB8] = v4;
  return ((uint64_t (*)(void))*(&off_10025C670 + ((62 * (v4 == 0)) ^ v1 & 0x486AEFDDu)))();
}

uint64_t sub_100120B9C()
{
  STACK[0xAA0] = v0;
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * v2) - 8LL))();
}

uint64_t sub_100120BCC(uint64_t a1)
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((v1 - 386) | (16 * (a1 == 0)))) - 4LL))();
}

void sub_100120BEC(void *a1)
{
}

uint64_t sub_100120C00()
{
  STACK[0x660] = v2;
  int v3 = (v1 - 535) | 0x206;
  int v4 = LOBYTE(STACK[0xB94]);
  int v5 = (((v1 - 23) | 6) ^ v4 ^ 0x12) - ((2 * (v3 ^ v4 ^ 0x12)) & 0x3C) + 986666782;
  unsigned int v6 = (v5 ^ 0xC530A88C) + 1;
  v5 ^= 0x3ACF571Eu;
  unsigned int v7 = v5 + (v6 ^ 0x7FFFF7BF) + ((2 * v6) & 0xFFFFEF7E) - 2147481535;
  LODWORD(STACK[0xACC]) = -1879803947;
  int v8 = byte_100238A80[((v7 - ((2 * v7) & 0xD96620BE) + 1823674463) ^ 0x934CEFA1) + v5];
  int v9 = byte_100219E80[LOBYTE(STACK[0xB9D]) ^ 0x9CLL];
  LOBYTE(v4) = v4 ^ ((v4 ^ 0xD8) - ((2 * (v4 ^ 0xD8) + 54) & 0xEF) - 110) ^ ((v4 ^ 0xC2)
                                                                           - ((2 * (v4 ^ 0xC2) + 2) & 0x5C)
                                                                           - 81) ^ 0xE4;
  int v10 = (v4 - ((2 * v4 + 52) & 0xF7) + 21);
  int v11 = (v9 - ((2 * v9 + 42) & 0x28) - 55) ^ 0x58;
  unsigned int v12 = (((v11 - ((2 * v11) & 0x50)) << 16) - 1255669760) ^ 0xB5280000;
  unsigned __int8 v13 = byte_10023B920[LOBYTE(STACK[0xB92]) ^ 0x46LL];
  int v14 = byte_100224000[LOBYTE(STACK[0xB9F]) ^ 0x32LL] ^ 0xF2;
  unsigned int v15 = (v12 - ((2 * v12) & 0x533C0000) - 1449257999) ^ 0xA99E13F1 | (v14 - 2 * (v14 & 0x3F) - 1845305281) ^ 0x9202E03F;
  unsigned int v16 = ((((v8 ^ v10 ^ 0x55) - ((2 * (v8 ^ v10 ^ 0x55)) & 0xBBBBBBBB)) << 24) + 1560281088) ^ 0x5D000000;
  int v17 = byte_100219E80[LOBYTE(STACK[0xB95]) ^ 0x73LL];
  unsigned __int8 v18 = v13 ^ 0xCF ^ (((16 * v13) ^ 0x30) - ((2 * ((16 * v13) ^ 0x30)) & 0xC0) + 102);
  unsigned int v19 = (((v18 - 2 * (v18 & 0x7F)) << 8) - 514425088) ^ 0xE1567F00;
  int v20 = byte_100224000[LOBYTE(STACK[0xB93]) ^ 0x95LL] ^ 0xF2;
  int v21 = (v19 - ((2 * v19) & 0x133FEA00) + 161478047) ^ 0x99FF59F | (v20 - ((2 * v20) & 0x96) + 1324882251) ^ 0x4EF8194B;
  HIDWORD(v2fseek(v0, 0LL, 2) = v17 + 1;
  LODWORD(v2fseek(v0, 0LL, 2) = (v17 << 24) - 1258291200;
  int v23 = (v22 >> 25) - ((2 * (v22 >> 25)) & 0x6A);
  HIDWORD(v2fseek(v0, 0LL, 2) = (v23 + 53) ^ 0x35;
  LODWORD(v2fseek(v0, 0LL, 2) = (74 - v23) << 24;
  unsigned int v24 = ((((((v22 >> 31) - ((2 * (v22 >> 31)) & 0x22) + 17) ^ 0x19)
  unsigned int v25 = (v24 - ((2 * v24) & 0x4D9C0000) + 1724785618) ^ 0x66CE23D2 | (v16 - ((2 * v16) & 0xF3FFFFFF) + 2030138771) ^ 0x79017593;
  unsigned int v26 = v25 - ((2 * v25) & 0x88FC819E);
  int v27 = byte_100219E80[LOBYTE(STACK[0xB91]) ^ 0x99LL];
  int v28 = LOBYTE(STACK[0xB98]) ^ 0x6F ^ byte_100238A80[LOBYTE(STACK[0xB98]) ^ 9LL];
  unsigned int v29 = (((v28 - ((2 * v28) & 0xFFFFFFCF)) << 24) - 419430400) ^ 0xE7000000;
  int v30 = byte_100224000[LOBYTE(STACK[0xB97]) ^ 0xD0LL];
  int v31 = (v27 - ((2 * v27 + 106) & v0) - 23) ^ 0x3A;
  unsigned int v32 = (((v31 - ((2 * v31) & 0x10C)) << 16) - 192544768) ^ 0xF4860000;
  unsigned int v33 = (v32 - ((2 * v32) & 0x711E0000) - 124823142) ^ 0xF88F599A | (v21 - ((2 * v21) & 0x52E94E94) + 695510858) ^ 0x2974A74A;
  unsigned int v34 = v33 - ((2 * v33) & 0xD2ED7EAE);
  unsigned int v35 = (v30 ^ 0xFFFFFFF2) - 78;
  int v36 = byte_100224000[LOBYTE(STACK[0xB9B]) ^ 0xDLL] ^ 0xF2;
  unsigned int v37 = (v29 - ((2 * v29) & 0xBFFFFFFF) + 1604727991) ^ 0x5FA634B7 | (v36 - ((2 * v36) & 0x13A) - 278421603) ^ 0xEF679F9D;
  int v38 = ((2 * v30) ^ 0x64) - ((4 * v30) & 0x14) - 54;
  int v39 = ((2 * v38) & 0x88 | v38 & 0x64) ^ 0x69;
  int v40 = byte_10023B920[LOBYTE(STACK[0xB96]) ^ 0x72LL];
  unsigned int v41 = (v26 - 998358833) ^ 0xC47E40CF | (((v35 ^ 0xFA) + ((2 * v35) & 0xF4) + v39 + 93)
                                        - ((2 * ((v35 ^ 0xFA) + ((2 * v35) & 0xF4) + v39 + 93)) & 0x14C)
                                        - 1283822426) ^ 0xB37A6CA6;
  int v42 = v40 ^ 5 ^ (((16 * v40) ^ 0x30) + ~(2 * ((16 * v40) ^ 0x30)) - 8);
  int v43 = (((v42 + 7982954 - ((2 * v42) & 0x15E)) << 8) + 673024) ^ 0x79D9AF00;
  int v44 = byte_100219E80[LOBYTE(STACK[0xB99]) ^ 0x73LL];
  unsigned int v45 = (v41 - ((2 * v41) & 0x51392166) - 1466134349) ^ 0xA89C90B3 | (v43 - ((2 * v43) & 0x4DAFDE00) + 651685749) ^ 0x26D7EF75;
  int v46 = byte_10023B920[LOBYTE(STACK[0xB9E]) ^ 0x46LL];
  unsigned int v47 = (((((v44 - ((2 * v44 + 106) & 0x82) + 118) ^ 0xC9)
         - ((2 * ((v44 - ((2 * v44 + 106) & 0x82) + 118) ^ 0xC9)) & 0x1D6)) << 16)
       - 1410662400) ^ 0xABEB0000;
  unsigned int v48 = (v47 - ((2 * v47) & 0x12320000) - 921045874) ^ 0xC919F48E | (v37 - ((2 * v37) & 0x54F3A2B8) + 712626524) ^ 0x2A79D15C;
  int v49 = (16 * v46) ^ 0x30;
  unsigned int v50 = 2 * ((v49 & (v46 ^ 0xFFFFFFA0)) - ((2 * (v49 & (v46 ^ 0xFFFFFFA0))) & 0x40)) + 68;
  unsigned int v51 = ((v49 + (v46 ^ 0xFFFFFFA9)) ^ 0x76)
      + ((2 * (v49 + (v46 ^ 0xFFFFFFA9))) & 0xEC)
      + (v50 ^ 0x81)
      - ((2 * v50) & 0x74);
  int v52 = ((((v51 - 59) - (v0 & (2 * (v51 - 59)))) << 8) + 1307587584) ^ 0x4DF03400;
  int v53 = byte_10023B920[LOBYTE(STACK[0xB9A]) ^ 0x50LL];
  unsigned int v54 = (v52 - ((2 * v52) & 0x3F3C0E00) - 1617033240) ^ 0x9F9E07E8 | (v15 - ((2 * v15) & 0x4B3ABC06) + 631070211) ^ 0x259D5E03;
  int v55 = LOBYTE(STACK[0xB9C]) ^ byte_100238A80[LOBYTE(STACK[0xB9C]) ^ 0xELL] ^ 0xFF;
  unsigned int v56 = (((v55 - ((2 * v55) & 0xDDDDDDDD)) << 24) - 301989888) ^ 0xEE000000;
  int v57 = ((16 * v53) ^ 0x30) - ((2 * ((16 * v53) ^ 0x30)) & 0x20);
  STACK[0xAB0] = 0LL;
  STACK[0xAE0] = 0LL;
  STACK[0xAD8] = 0LL;
  STACK[0xAA8] = 0LL;
  STACK[0xAD0] = 0LL;
  STACK[0xAE8] = 0LL;
  STACK[0xAF0] = 0LL;
  unsigned int v58 = (v54 - ((2 * v54) & 0x1450FE7C) + 1244167998) ^ 0x4A287F3E | (v56 - ((2 * v56) & 0xAAAAAAAA) - 707601190) ^ 0xD5D2DCDA;
  uint64_t v60 = LOBYTE(STACK[0xB90]);
  LODWORD(STACK[0x580]) = v58 + 1880011394 - ((2 * v58) & 0xE01D653A) + 27;
  unsigned int v61 = (v59 - ((2 * v59) & 0x3C4D4200) - 1641635535) ^ 0x9E26A131 | (v48 - ((2 * v48) & 0xB1514470) + 1487446584) ^ 0x58A8A238;
  int v62 = v60 ^ byte_100238A80[v60 ^ 0xB0];
  LODWORD(STACK[0x648]) = (2 * v61) & 0x1EE2BF42;
  LODWORD(STACK[0x640]) = v61 - 1888395359;
  unsigned int v63 = ((((v62 ^ 6) - ((2 * (v62 ^ 6)) & 0x14)) << 24) - 1979711488) ^ 0x8A000000;
  unsigned int v64 = v63 - ((2 * v63) & 0xDA000000) - 315373508;
  LODWORD(STACK[0x5B8]) = v64;
  LODWORD(STACK[0x5A0]) = v64 ^ 0xED33C83C;
  unsigned int v65 = v64 ^ 0xED33C83C | (v34 - 378093737) ^ 0xE976BF57;
  LODWORD(STACK[0x4E0]) = (v45 - ((2 * v45) & 0x7928D6D0) - 1131123864) ^ 0xC132B701;
  LODWORD(STACK[0x658]) = (2 * v65) & 0x56DA0DB0;
  LODWORD(STACK[0x650]) = v65 - 1418918184;
  int v66 = *(unsigned __int8 *)STACK[0xAB8];
  LOBYTE(v35) = (-95 - ((((v3 + 83) ^ 0x78) + 6) & 0x42)) ^ 0xA1;
  LOBYTE(STACK[0xB80]) = v66 + ((126 * v35) & 0xBF) + ((-65 * v35) ^ 0x5F) + 12;
  unsigned int v67 = (v66 ^ 0x9DD6DDFD) + ((2 * v66) & 0xFFFFFFFB) - 777145357;
  unsigned int v68 = (-1950399707 * v67 - ((394167882 * v67 + 18710366) & 0xE0D64BF2) - 252058200) ^ 0xEE2B1163;
  unsigned int v69 = ((v68 + 1363901570) ^ 0x84519062)
      + ((v68 % 0x101) ^ 0x7EF9FDEF)
      + ((2 * (v68 % 0x101)) & 0x3DE)
      - ((2 * (v68 + 1363901570)) & 0xF75CDF3A)
      + 1;
  unsigned int v70 = v69 - ((2 * v69 - 110566564) & 0x89BC38C4) + 1100123664;
  unsigned int v71 = (v70 ^ ((v70 ^ 0xBB21E39D) - ((2 * (v70 ^ 0xBB21E39D) + 2) & 0x1F6FD016) + 263710732) ^ ((v70 ^ 0xD7F0420)
                                                                                               - 1235294274
                                                                                               - ((2
                                                                                                 * ((v70 ^ 0xD7F0420)
                                                                                                  - 1235294274)) & 0x6D233014)
                                                                                               + 915511306) ^ 0x7DF86C63)
      - 1235294275;
  unsigned int v72 = (v71 - ((2 * v71) & 0xFD062800) + 2122519552) ^ 0x96A6EDD2;
  unsigned int v73 = v72 - ((2 * v72 + 247228098) & 0xB715E14C) + 1659446279;
  int v74 = v73 ^ 0x286C2606;
  unsigned int v75 = (v73 ^ 0xA4750F59) - 400164397 - ((2 * ((v73 ^ 0xA4750F59) - 400164397)) & 0x25D9AD48);
  int v76 = v73 ^ 0x5B8AF0A6;
  HIDWORD(v2fseek(v0, 0LL, 2) = v73 ^ 0x5B8AF0A6;
  LODWORD(v2fseek(v0, 0LL, 2) = v73;
  int v77 = (((v22 >> 31) ^ 0x7EFEFFFD)
       + 1722561068
       + ((2 * (v22 >> 31)) & 0xFDFDFFFA)
       + 1
       - ((2 * (((v22 >> 31) ^ 0x7EFEFFFD) + 1722561068 + ((2 * (v22 >> 31)) & 0xFDFDFFFA) + 1) - 1043943676) & 0xC6B67B8C)
       - 1002531512) ^ v73 ^ 0x286C2606;
  unsigned int v78 = ((v76 + 1363901570) ^ 0xBB7B5BF5) + ((2 * (v76 + 1363901570)) & 0x76F6B7EA) + 1149543435 + (v77 ^ 0xDC0FB0E3);
  uint64_t v79 = (v75 - 1829972316) ^ 0x4370F23 ^ v77;
  uint64_t v80 = v77 ^ 0xEC16C7A3;
  unsigned int v81 = (((v77 ^ 0xDC0FB0E3) + (v74 ^ 0xC5B8311D)) ^ 0x7BF7BDFD)
      + ((2 * v77) ^ 0x2D29644B)
      + ((4 * v77) & 0xD593F4E4 ^ 0xAFED3F7B)
      + ((2 * ((v77 ^ 0xDC0FB0E3) + (v74 ^ 0xC5B8311D))) & 0xF7EF7BFA)
      + 1;
  return ((uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))*(&off_10025C670 + (v3 ^ 0x6F)))( v81 - ((2 * v81 + 497318124) & 0x3C658376) - 1929052623,  (v78 ^ 0xEBDBF315) + 2128944623 + ((2 * v78) & 0xD7B7E62A),  2951561083LL,  2365914673LL,  v79,  v80);
}

void sub_1001219DC()
{
}

uint64_t sub_1001219E4(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v8 = LODWORD(STACK[0x640]) - LODWORD(STACK[0x648]);
  LODWORD(STACK[0x5B0]) = v8;
  LODWORD(STACK[0x540]) = v8 ^ 0x55AC71E7;
  unsigned int v9 = a1 ^ 0x9E32C1BB;
  int v10 = v9 - 1640840773 - ((2 * v9 + 2) & v6);
  int v11 = ((LOBYTE(STACK[0xB80]) - 107) - ((2 * (LOBYTE(STACK[0xB80]) + 149)) & 0x108) + 1241642628) ^ a6;
  return ((uint64_t (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))((char *)*(&off_10025C670 + ((77 * (((v10 + 25) & 2 | v9 & 1) != 3)) | (v7 - 864))) - 8))( (v10 + 1),  a2,  1241642628LL,  2048426436LL,  a5,  (v11 ^ 0x7A1881C4) - 908156145 + ~(2 * (((v11 ^ 0x7A1881C4) + 432352206) & 0x30197741 ^ v11 & 1u)),  432352206LL,  0xFFFFFFFFLL);
}

void sub_100121B24()
{
}

uint64_t sub_100121B2C(int a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  LODWORD(STACK[0x5F0]) = LODWORD(STACK[0x650]) - LODWORD(STACK[0x658]);
  unsigned int v9 = (2 * a6) ^ 0xC146FEC1;
  unsigned int v10 = (4 * a6) & 0xBD17DF7C ^ 0x7FFA22FF;
  int v11 = (a6 ^ v6)
      - 1752068653
  int v12 = (v11 ^ 0x3FDFFDFF) + v9 + v10 + ((2 * v11) & 0x7FBFFBFE);
  int v13 = v12 + 1;
  int v14 = a5 ^ 0x4AD46964;
  int v15 = v14 - a2 - 1989344572 + v12 + 1;
  unsigned int v16 = v15 ^ 0xEABD6F9F;
  unsigned int v17 = (2 * v15) & 0xD57ADF3E;
  else {
    int v18 = -226711626;
  }
  unsigned int v19 = v17
      + v16
      + (((v13 + 741296650 + v18) % 0x101u) ^ 0x7DBE3BBD)
      + ((2 * ((v13 + 741296650 + v18) % 0x101u)) & 0x37A);
  unsigned int v20 = (v19 - ((2 * v19 + 789096776) & 0xAA2976F6) - 325513185) ^ a1;
  int v21 = v20 ^ 0x7395FA8D;
  int v22 = (v20 ^ 0x7395FA8D ^ (a2 - 1791037700))
      - 1159072271
      - ((2 * (v20 ^ 0x7395FA8D ^ (a2 - 1791037700))) & 0x75D3EBE2);
  HIDWORD(v23) = v20 ^ 0x1395FA8D;
  LODWORD(v23) = v20 ^ 0x60000000;
  int v24 = ((v14 + (v20 ^ 0x8C6A0572) + 1 - ((2 * (v14 + (v20 ^ 0x8C6A0572) + 1)) & 0x31C0F4D8) - 1730119060) ^ 0x671F8593)
      + (v22 ^ 0x7D2853D8 ^ ((v23 >> 29) - ((2 * (v23 >> 29)) & 0x8F834C52) - 943610327))
      + 1;
  unsigned int v25 = v21 + (a1 ^ 0x9E32C1BB) - 1675705382 - ((2 * (v21 + (a1 ^ 0x9E32C1BB))) & 0x383D87B4);
  unsigned int v26 = v25 ^ 0x81027323 ^ (v24 - ((2 * v24) & 0x3A3961F2) + 488419577);
  unsigned int v27 = ((v26 - ((2 * v26 + 1655225282) & 0x6032EE80) - 512895711) ^ 0xCFE688BF) + 1;
  return ((uint64_t (*)(void, void, uint64_t))((char *)*(&off_10025C670 + ((v8 - 1473) ^ 7)) - 8))( v27 + (v25 ^ 0x9C1EC3DA) - 1640840773 - (v7 & (2 * (v27 + (v25 ^ 0x9C1EC3DA)))),  ((v27 + (v22 ^ 0xBAE9F5F1)) ^ 0x7AC51557) - 268698707 + ((2 * (v27 + (v22 ^ 0xBAE9F5F1))) & 0xF58A2AAE),  4119472814LL);
}

void sub_100121EA8()
{
}

uint64_t sub_100121EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  unsigned int v10 = ((v7 + (a6 ^ v7) - ((2 * (a6 ^ v7) + 2) & a7) + 1) ^ v7) % 3;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + ((22 * ((v10 ^ v8) + 2 * v10 == v8)) | (v9 - 994))) - 8))();
}

void sub_100121FB4()
{
}

uint64_t sub_100121FC0@<X0>(int a1@<W0>, int a2@<W4>, int a3@<W8>)
{
  LODWORD(STACK[0x640]) = v4 - 616;
  unint64_t v6 = (v4 - 159);
  STACK[0x648] = v6;
  LODWORD(STACK[0x5E8]) = v4 - 1243;
  int v7 = ((-134217728 * ((3 * ((a1 ^ (v5 - 99)) ^ v6)) & 3)
       - 1946157056 * (a1 ^ (v5 + 669) ^ v6)
       + 259787396) ^ 0xF7C0A84) & 0xFC000000 | ((844964643 * (a1 ^ (v5 + 669) ^ v6)
  unsigned int v8 = ((2 * v7) & 0xBFBEBE66 ^ 0x38C8422) + (v7 ^ 0x5E191D26);
  unsigned int v9 = ((192114608 * (a2 ^ 0xA8F90D2C) - ((384229216 * (a2 ^ 0xA8F90D2C)) & 0xAA4D14E0) - 718894468) ^ 0xD5268A7C) & 0xFFFFFFF0 | ((-524863749 * (a2 ^ 0xA8F90D2C) - ((24014326 * (a2 ^ 0xA8F90D2C)) & 0x1CCE660) - 2132380880) >> 28);
  unsigned int v10 = ((2 * v9) & 0xFF4FD7FE ^ 0x10) + (v9 ^ 0xFFA7EBF7);
  unsigned int v11 = ((-1365622360 * v3 - ((221545296 * v3) & 0xEDED780) - 2022741054) ^ 0x876F6BC2) & 0xFFFFFFF8 | ((-170702795 * v3 - ((-341405590 * v3) & 0xCBEC1DAC) + 1710624470) >> 29);
  unsigned int v12 = ((-913864192 * a3 - ((-1827728384 * a3 + 1029094400) & 0x815C3C00) + 1599700042) ^ 0xC0AE1E4A) & 0xFFFFFE00 | ((-1570454587 * a3 - ((1154058122 * a3 + 1553902430) & 0xA4496F00) - 2139878097) >> 23);
  unsigned int v13 = ((2 * v12) & 0xEFFFDEFC ^ 0x248) + (v12 ^ 0xF7FFEEDA);
  unsigned int v14 = v10 + (v11 ^ 0x5FBDFFFF) + ((2 * v11) & 0xBF7BFFF8) - v13 + v8 + 919941471;
  unsigned int v15 = ((-2123366400 * v14 - ((48234496 * v14 + 1960837120) & 0xABC00000) + 273987836) ^ 0x55E4B8FC) & 0xFFF00000 | ((741165079 * v14 - ((1482330158 * v14 - 1466157234) & 0x878A17C8) + 403908491) >> 12);
  unsigned int v16 = ((2 * v15) & 0x977AB77A ^ 0x183020) + (v15 ^ 0x4BB167ED);
  HIDWORD(v17) = v10 + 1;
  LODWORD(v17) = (-1279558367 * v10 - ((1735850562 * v10 - 1179377086) & 0x805AF8E6) + 487034260) ^ 0xC02D7C60;
  int v18 = (v17 >> 5) - ((2 * (v17 >> 5)) & 0xE0910940) - 263682912;
  unsigned int v19 = ((377029380 * v8 - ((754058760 * v8 + 43242600) & 0x3F7D77F0) + 554214958) ^ 0x9FBEBBFA) & 0xFFFFFFFC | ((-979484479 * v8 - ((188514690 * v8 + 1084552474) & 0x55B89062) - 1959869762) >> 30);
  LODWORD(v6) = ((2 * v19) & 0x7FF5FE7C ^ 4) + (v19 ^ 0x3FFAFF3C);
  unsigned int v20 = v18 ^ 0xF04884A0;
  unsigned int v21 = 1337753485 * (v18 ^ 0xF04884A0) - ((-1619460326 * (v18 ^ 0xF04884A0)) & 0xD2DE1EA0) + 1768886096;
  unsigned int v22 = 71091677 * v6 - ((142183354 * v6 - 1497505036) & 0xB777EAD4) + 790292196;
  unsigned int v23 = ((-2019103020 * v13 - ((256761256 * v13 - 479916208) & 0x9DB44860)) & 0xFFFFFFFC | ((1642707893 * v13
                                                                                           - ((1137932138 * v13
                                                                                             + 2027504596) & 0x7F74A40E)
                                                                                           - 1138297871) >> 30))
      - 1064522792;
  unsigned int v24 = ((2 * v23) & 0xFF6FB53E ^ 0x9D240024) + (v23 ^ 0xB16DFEAD) + v16;
  int v25 = (v18 ^ 0xA2D6A9CC ^ (v24 - ((2 * v24 + 1763021640) & 0xA53C5AD8) - 2027358448)) - v6;
  unsigned int v26 = ((2 * (v25 + 1073413950)) & 0xED5FC3BC) + ((v25 + 1073413950) ^ 0xF6AFE1DE);
  unsigned int v27 = -1146936625 * v26 - ((2001094046 * v26 + 1658700540) & 0xF539658A) - 1408527293;
  unsigned int v28 = (-141561440 * v20 - ((253748032 * v20) & 0x17B28200)) & 0xFFFFFFFC | ((2112093288 * v20
                                                                             - ((2076702928 * v20) & 0x5828B630)
                                                                             + 739531546) >> 30);
  unsigned int v29 = (((-774594648 * v16 - ((598294352 * v16 + 1417335280) & 0x6AD8CDB0) + 531222483) ^ 0xB56C66DB) & 0xFFFFFFF8 | ((1513788405 * v16 - ((880093162 * v16 + 445602366) & 0x5297AEB4) - 1231846279) >> 29)) ^ 1;
  unsigned int v30 = v29 - ((2 * v29) & 0xD491544A) - 364336603;
  int v31 = ((-1610612736 * v6 + 0x40000000) & 0x80000000) - 805306368 * v6 + 1670224753;
  int v32 = ((v28 + 198787356) ^ 0xBD9411C) - ((2 * ((v28 + 198787356) ^ 0xBD9411C)) & 0x4FF31B06) - 1476817505;
  LOBYTE(v6) = ((v21 >> 27) & 0x1C ^ 4) - 16 * (v21 >> 30) + 89;
  HIDWORD(v17) = v25;
  LODWORD(v17) = v27 ^ 0x7A9CB2C4;
  int v33 = (v17 >> 1) - ((2 * (v17 >> 1)) & 0xBED5F812) - 546636791;
  int v34 = (v32 ^ 0xA7F98D9F | v6 & 0x7C ^ 0x50) - ((2 * (v32 ^ 0xA7F98D9F | v6 & 0x7C ^ 0x50)) & 0x181D8A0) + 12643408;
  LODWORD(v6) = -721323363 * (v33 ^ 0xDF6AFC09) - ((-1442646726 * (v33 ^ 0xDF6AFC09)) & 0x8CB19048) - 967260124;
  HIDWORD(v17) = v32 ^ 2;
  LODWORD(v17) = v34 ^ 0x67E27364;
  unsigned int v35 = 2107421365 * (v30 ^ 0xEA48AA25) - ((-80124566 * (v30 ^ 0xEA48AA25)) & 0xD4AAA74C) + 1783976870;
  unsigned int v36 = ((v31 ^ 0xC38D9B71) & 0xF0000000 | (v22 >> 4)) ^ 0x5BBBF56;
  int v37 = v36 - ((2 * v36) & 0x55A59ED0) + 718458728;
  unsigned int v38 = -886353920 * (v30 ^ 0xEA48AA25) - ((-1772707840 * (v30 ^ 0xEA48AA25)) & 0xE0C56000) + 1885516969;
  int v39 = v37 ^ 0x2AD2CF68;
  unsigned int v40 = -1761270391 * (v37 ^ 0x2AD2CF68) - ((772426514 * (v37 ^ 0x2AD2CF68)) & 0xA21FB7A2) + 1359993809;
  int v41 = ((v17 >> 2) - ((2 * (v17 >> 2)) & 0x2F9215FE) - 1748432129) ^ v37 ^ v30 ^ 0xD1F13476 ^ v33;
  unsigned int v42 = (((-67108864 * ((v33 ^ 0xDF6AFC09) & 3) + 973078528 * (v33 ^ 0xDF6AFC09) + 129774855) ^ 0x7BC3507) & 0xFE000000 | (v6 >> 7)) ^ 0x18CB190;
  LODWORD(v6) = v42 - 2 * (v42 & 0x26DC172F ^ (v6 >> 7) & 8) - 1495525593;
  unsigned int v43 = ((v38 ^ 0x7062B4A9) & 0xFFFFF000 | (v35 >> 20)) ^ 0x6A5;
  unsigned int v44 = v43 - ((2 * v43) & 0xB70127B0) - 612330536;
  unsigned int v45 = ((1259470848 * v39 - ((371458048 * v39) & 0x46000000) + 587257158) ^ 0x2300D546) & 0xFFFE0000 | (v40 >> 15);
  unsigned int v46 = (v45 ^ 0xBFFD1FE0) + ((2 * v45) & 0x7FFB7BFE ^ 0x1403E) + 1073889793 + (v44 ^ 0xDB8093D8);
  int v47 = v6 ^ (v46 - ((2 * v46) & 0xD5297924) - 359351150);
  unsigned int v48 = (((-945815552 * v41 - ((-1891631104 * v41) & 0xC4800000) - 497633064) ^ 0xE256B8D8) & 0xFFE00000 | ((1719619133 * v41 - ((-855729030 * v41) & 0x9AA76126) + 1297330323) >> 11)) ^ 0x9AA76;
  unsigned int v49 = v48 - ((2 * v48) & 0xE52AE2CE) + 1922396519;
  int v50 = 2 * (((v47 ^ 0x4C48ABB5) & (v49 ^ 0x72957167)) - ((2 * ((v47 ^ 0x4C48ABB5) & (v49 ^ 0x72957167))) & 0x1353486A))
      - 1823258518;
  int v51 = (~(1843186062 * (v44 ^ v49 ^ v6 ^ 0x613E1B6B)) | 0x89A5B717)
      - 152148793 * (v44 ^ v49 ^ v6 ^ 0x613E1B6B)
      - 1154669451;
  unsigned int v52 = (v49 ^ 0x3EDDDAD2 ^ v47) + (v50 ^ 0x8EA8B788) - 503054389 + ((2 * v50) & 0x3BF7FFC4 ^ 0x22A690C4) + 83;
  int v53 = v52 - ((2 * v52) & 0x2C4DD26C) + 371648822;
  LODWORD(STACK[0x620]) = v53 ^ 0x1626E936;
  unsigned int v54 = 2 * (((v53 ^ 0x1626E936) & (v51 ^ 0xBB2D2474)) - ((2 * ((v53 ^ 0x1626E936) & (v51 ^ 0xBB2D2474))) & 0x7361AF48))
      - 211701944;
  unsigned int v55 = (v51 ^ 0xAD0BCD42 ^ v53) + (v54 ^ 0x40E9587) + 143705393 + ((2 * v54) & 0xEEDE759C ^ 0xE6C25490);
  unsigned int v56 = ((2 * v55) & 0xD79CD9EE) + (v55 ^ 0xEBCE6CF7);
  int v57 = 2 * v56 - 149247468;
  LODWORD(STACK[0x5D8]) = v57;
  LODWORD(STACK[0x5E0]) = v56;
  unsigned int v58 = v56 - (v57 & 0xFABF32CE) - 118690191;
  int v59 = v58 ^ v53;
  int v60 = v58 ^ 0x7D5F9967;
  LODWORD(STACK[0x4C0]) = v59;
  int v61 = v59 ^ 0x6B797051;
  int v62 = v60 + (v6 ^ 0xA6DC1727) - ((2 * (v60 + (v6 ^ 0xA6DC1727))) & 0x229B55C) + 18143918;
  LODWORD(v6) = -1909726993 * v60 - ((475513310 * v60) & 0xE8E53BC2) - 193815071;
  LODWORD(STACK[0x590]) = v62;
  int v63 = v62 ^ 0x114DAAE;
  unsigned int v64 = 1847209695 * (v62 ^ 0x114DAAE) - ((204758462 * (v62 ^ 0x114DAAE)) & 0x92C24E8) - 2070539660;
  int v65 = 2 * ((v60 & (v49 ^ 0x72957167)) - ((2 * (v60 & (v49 ^ 0x72957167))) & 0x5C18DD0E)) + 1545133326;
  unsigned int v66 = (v49 ^ 0xFCAE800 ^ v58) + (v65 ^ 0xA3C7A2F1) + 2129921 + ((2 * v65) & 0xFFBEFFFC ^ 0xB830BA1C);
  unsigned int v67 = v66 - ((2 * v66) & 0xD49B829E) - 364002993;
  unsigned int v68 = -2048885755 * v61 - ((197195786 * v61) & 0x35848D94) + 448939722;
  LODWORD(STACK[0x658]) = v67;
  unsigned int v69 = 198666509 * (v67 ^ 0xEA4DC14F) - ((397333018 * (v67 ^ 0xEA4DC14F)) & 0xE1F3C19A) + 1895424205;
  unsigned int v70 = 1571042304 * (v67 ^ 0xEA4DC14F) - ((457730048 * (v67 ^ 0xEA4DC14F)) & 0x1854F000) + 204109960;
  unsigned int v71 = HIWORD(v64);
  unsigned int v72 = ((2 * ((v70 ^ 0xC2A7888) & 0xFFFFFC00 | (v69 >> 22))) & 0xEFFF7F74 ^ 0x304)
      + (((v70 ^ 0xC2A7888) & 0xFFFFFC00 | (v69 >> 22)) ^ 0x77FFBE79);
  LODWORD(STACK[0x5C8]) = v61;
  unsigned int v73 = ((786366464 * v63 - ((1572732928 * v63) & 0xEA920000) - 179709406) ^ 0xF549DA22) & 0xFFFF0000 | HIWORD(v64);
  int v74 = ((2 * v73) & 0x7FB1F6F4 ^ 0x10024) + (v73 ^ 0x3FD87FEC);
  unsigned int v75 = (1002438656 * v60 - ((2004877312 * v60) & 0xE3FFFFFF) - 238649630) ^ 0xF1C67EE2 | (v6 >> 10);
  unsigned int v76 = (((260087808 * v61 - ((520175616 * v61) & 0x77378000) - 1147418638) ^ 0xBB9BC7F2) & 0xFFFFE000 | (v68 >> 19)) ^ 0x358;
  int v77 = v76 - 2 * (v76 & 0x301BEB1D ^ (v68 >> 19) & 1) - 1340347620;
  unsigned int v78 = ((2 * v75) & 0xF17AAEEE ^ 0x7A284E) + (v75 ^ 0xF8804BD0) - v74 + v72;
  unsigned int v79 = 943187215 * v74 - ((1886374430 * v74 + 1681802164) & 0x4181F198) - 1830806874;
  unsigned int v80 = v77 ^ 0x72907D40 ^ (v78 - ((2 * v78 - 1640511342) & 0x85172CB8) - 1851295067);
  int v81 = (v71 << 30) - (v74 << 29) - 1481660159;
  unsigned int v82 = ((-40894464 * v80 - ((-81788928 * v80) & 0x8F000000) + 1200341094) ^ 0x478BC066) & 0xFFF00000 | ((435343321 * v80 - ((870686642 * v80) & 0xC85FB382) + 1680857537) >> 12);
  int v83 = ((2 * v82) & 0x2EE7BF36 ^ 0x48532) + (v82 ^ 0x17759D66);
  unsigned int v84 = (((-1316814848 * v72 - ((1661337600 * v72 - 1817968640) & 0xC08E0000) - 1441180495) ^ 0x604754B1) & 0xFFFF0000 | ((182563203 * v72 - ((365126406 * v72 + 1009685412) & 0x37A95E02) - 1712588589) >> 16)) ^ 0x9BD4;
  int v85 = v84 - ((2 * v84) & 0x49CFCD9E) + 619177679;
  unsigned int v86 = ((2 * ((v81 ^ 0xE7AFA901) & 0xE0000000 | (v79 >> 3))) & 0xD9F3DBB2 ^ 0x8301A32)
      + (((v81 ^ 0xE7AFA901) & 0xE0000000 | (v79 >> 3)) ^ 0x68E1F2C0)
      + v83;
  int v87 = v86 - 2 * ((v86 + 999436940) & 0x283EB3DF ^ v86 & 1) + 600893034;
  unsigned int v88 = ((2019670016 * (v77 ^ 0xB01BEB1C) - ((-255627264 * (v77 ^ 0xB01BEB1C)) & 0xA7D45000) - 739628072) ^ 0xD3EA2BD8) & 0xFFFFF800 | (((~(366876782 * (v77 ^ 0xB01BEB1C)) | 0xBE8FC359) + 1257180215 * (v77 ^ 0xB01BEB1C) - 1598546348) >> 21);
  unsigned int v89 = ((2 * v88) & 0xFBFCF5AE ^ 0xA) + (v88 ^ 0xFDFE7FD2);
  unsigned int v90 = -1045817253 * v83 - ((-2091634506 * v83 - 371853362) & 0xDFA72378) + 1690209699;
  int v91 = v85 ^ 0x24E7E6CF;
  unsigned int v92 = 289091809 * (v85 ^ 0x24E7E6CF) - ((578183618 * (v85 ^ 0x24E7E6CF)) & 0x5E2ADE72) - 1357549767;
  v83 *= 204308480;
  unsigned int v93 = v90 >> 17;
  unsigned int v94 = (((v83 + 2113110016) & 0xFFFF8000 | (v90 >> 17)) ^ 0xC0CC36D9)
      + v83
      + ((2 * ((v83 + 2113110016) & 0xFFFF8000 | (v90 >> 17))) & 0x7E677D9E ^ 0xFFFF926D);
  unsigned int v95 = ((v93 ^ 0xFFFF8816) - ((2 * (v93 ^ 0xFFFF8816) + 2) & 0xC5631E66) + 1655803700) ^ v93 ^ (v94
                                                                                               - ((2 * v94 + 978222498) & 0x3C9143C2)
                                                                                               + 1534058674);
  unsigned int v96 = ((2 * ((v85 ^ 0x8CD95511 ^ v87) - v89 - 33654057)) & 0xFF8FDCAC)
      + (((v85 ^ 0x8CD95511 ^ v87) - v89 - 33654057) ^ 0xFFC7EE56);
  unsigned int v97 = (v95 ^ 0xFCF9593B)
      + v83
      + 2113110016
      - 2 * (((v95 ^ 0xFCF9593B) + v83 + 2113110016) & 0x34C69E ^ v95 & 4)
      + 3458714;
  unsigned int v98 = 1986118144 * v91 - ((-322731008 * v91) & 0x88071800) - 1006400239;
  unsigned int v99 = 1247651993 * v89 - ((347820338 * v89 + 409008898) & 0x2E9F6008) - 2088751739;
  unsigned int v100 = (-2145703632 * v96
        - 2 * ((-2145703632 * v96 + 1648724448) & 0x471592B0 ^ (-2145703632 * v96) & 0x10)
        + 693836938) ^ 0x471592AA | ((-1207848301 * v96 - ((1879270694 * v96 + 1011396924) & 0x7FA4FDC2) + 502716287) >> 28) ^ 0xB;
  unsigned int v101 = ((2 * v100) & 0xD63E7F8A) + (v100 ^ 0xEB1F3FC5);
  int v102 = v97 ^ 0x34C69A;
  unsigned int v103 = 492085891 * (v97 ^ 0x34C69A) - ((984171782 * (v97 ^ 0x34C69A)) & 0xF7A7712A) + 2077472917;
  unsigned int v104 = ((v98 ^ 0xC4038D11) & 0xFFFFFE00 | (v92 >> 23)) ^ 0x15E;
  unsigned int v105 = v104 - ((2 * v104) & 0x86597AB6) - 1020478117;
  unsigned int v106 = -1483399605 * v101 - ((1328168086 * v101 - 1486063982) & 0xFB26E5C8) + 1363783213;
  unsigned int v107 = v101 + (v105 ^ 0xC3187BC1 ^ v97) + 350273595;
  int v108 = v107 ^ 0x3EDFFAFB;
  int v109 = (2 * v107) & 0x7DBFF5F6;
  unsigned int v110 = (-1799663310 * v89 - ((695640676 * v89 + 818017796) & 0x38A18A54) + 1957806125) ^ 0x9C50C52B;
  unsigned int v111 = ((v110 & 0xFFFFFFFE | (v99 >> 31)) ^ 0xE77FDE7E) + ((2 * v110) & 0xCEFFBCFC);
  unsigned int v112 = (1968343564 * v102 - ((178590744 * v102) & 0xB9FFF78)) & 0xFFFFFFFC | (v103 >> 30);
  unsigned int v113 = v108 - v111 + v109;
  unsigned int v114 = 735663863 * v113 - ((1471327726 * v113 - 2021979446) & 0xDB44A324) + 828364535;
  int v115 = -162153024 * v113 - ((78347136 * v113 + 113422976) & 0x5A2CD80) - 231555066;
  int v116 = -224147104 * v101 - ((1699189440 * v101 + 1838076480) & 0x611A6AC0) - 1487626597;
  unsigned int v117 = ((v115 ^ 0x2D166C6) & 0xFFFFFFC0 | (v114 >> 26)) ^ 0x3B;
  int v118 = v117 - ((2 * v117) & 0x5106F3B4) + 679705050;
  unsigned int v119 = (((v116 ^ 0x308D357B) & 0xFFFFFFE0 | (v106 >> 27)) ^ 0xF)
       - ((2 * ((v116 ^ 0x308D357B) & 0xFFFFFFE0 | (v106 >> 27))) & 0x9FE35020)
       + 1341237264;
  unsigned int v120 = ((1507413208 * v111 - ((-1280140880 * v111 - 1635665056) & 0xC8442A50) + 862122718) ^ 0xE422152E) & 0xFFFFFFF8 | ((-348444261 * v111 - ((-696888522 * v111 - 741329044) & 0xF6925846) - 449755175) >> 29);
  int v121 = (v119 ^ 0x4FF1A810) + ((2 * (v112 - 2049966148)) & 0x51DFFCBC ^ 0x19FFC38) + ((v112 - 2049966148) ^ 0x2D2001E3);
  unsigned int v122 = v121 + (v120 ^ 0x3DFBD758) + ((2 * v120) & 0x7BF7AEB6 ^ 6) + 420751943;
  unsigned int v123 = ((2 * (v121 + 1460666786)) & 0xFECFE7EA) + ((v121 + 1460666786) ^ 0xFF67F3F5);
  unsigned int v124 = (v122 - ((2 * v122) & 0x9B40B68E) + 1302354759) ^ v118;
  HIDWORD(v17) = v118 ^ 0x1DA;
  LODWORD(v17) = v115 ^ 0x2D16400;
  int v125 = -1438646272 * v123 - ((343932928 * v123 + 562036736) & 0x33800000) + 1789350057;
  unsigned int v126 = (600736425 * v123 - ((1201472850 * v123 + 414126726) & 0x4BDB3F94) + 1917135117) >> 10;
  int v127 = ((((v125 ^ 0x19E750A9) & 0xFFC00000 | v126) ^ 0x297B67)
        - 2 * ((((v125 ^ 0x19E750A9) & 0xFFC00000 | v126) ^ 0x297B67) & 0x8033DB4 ^ v126 & 0x10)
        - 2013053532) ^ ((v17 >> 10) - ((2 * (v17 >> 10)) & 0xE09A6FFE) - 263374849);
  HIDWORD(v17) = v127 ^ 0x36210B;
  LODWORD(v17) = v127 ^ 0xDC400000;
  int v128 = ((v17 >> 22) - ((2 * (v17 >> 22)) & 0x7A5941EA) - 1121148683) ^ 0x5D81E265;
  int v129 = (-921885487 * v128 - ((303712674 * v128) & 0x643FC7BE) - 1306532897) ^ v124;
  unsigned int v130 = (((2 * v129) ^ 0xAE798284) - ((2 * ((2 * v129) ^ 0xAE798284)) & 0x15A0CDBC) + 181429983) & 0x38C21266;
  unsigned int v131 = (v129 ^ 0xCB5DC871) + (v130 ^ 0xF71FF939) + ((2 * v130) ^ 0x1180048C) + 2098305;
  int v132 = v131 + 1137969263 + (~(2 * v131) | 0x7857EF21) + 1;
  int v133 = v132 ^ v119;
  LODWORD(STACK[0x530]) = v132 ^ v118;
  int v134 = v132 ^ v118 ^ 0x6B5771B5;
  unsigned int v135 = (~(-815678926 * v134) | 0x52F3FA8F) - 407839463 * v134 - 695860551;
  unsigned int v136 = (v124 ^ 0x6523229D)
       + (v132 ^ 0xBC2BF790)
       + 1
       - ((2 * ((v124 ^ 0x6523229D) + (v132 ^ 0xBC2BF790) + 1)) & 0x511F2192)
       - 1466986295;
  unsigned int v137 = -939524096 * v134 - ((-1879048192 * v134) & 0xAAAAAAAA);
  unsigned int v138 = ((-1019281408 * (v133 ^ 0xC25A07F) - ((108920832 * (v133 ^ 0xC25A07F)) & 0x5CB00000) + 777584220) ^ 0x2E58FE5C) & 0xFFFF0000 | ((-932265153 * (v133 ^ 0xC25A07F) - ((-1864530306 * (v133 ^ 0xC25A07F)) & 0xFD72F26C) - 21399242) >> 16);
  unsigned int v139 = ((2 * v138) & 0xB33E75F6 ^ 0x7572) + (v138 ^ 0x599FC442);
  LODWORD(STACK[0x4D0]) = v132;
  int v140 = ((2 * ((v137 + 1413930644) ^ 0x5446DE94 | (v135 >> 5))) & 0x72BF7FB6 ^ 0x286022)
       + (((v137 + 1413930644) ^ 0x5446DE94 | (v135 >> 5)) ^ 0x3FEB8FCE);
  unsigned int v141 = ((876609536 * (v136 ^ 0xA88F90C9) - ((1753219072 * (v136 ^ 0xA88F90C9)) & 0x9A800000) + 1299097313) ^ 0x4D6EA6E1) & 0xFFC00000 | ((-1957866287 * (v136 ^ 0xA88F90C9) - ((379234722 * (v136 ^ 0xA88F90C9)) & 0x727839FC) + 960240894) >> 10);
  unsigned int v142 = ((2 * v141) & 0xFF43F4FE ^ 0x940E) + (v141 ^ 0xFFAFB578);
  unsigned int v143 = ((714735616 * (v132 ^ 0x43D4086F) - ((1429471232 * (v132 ^ 0x43D4086F)) & 0x820C0000) - 1056464228) ^ 0xC107A29C) & 0xFFFE0000 | (((~(1490234010 * (v132 ^ 0x43D4086F)) | 0xA1316EC1) + 1818858829 * (v132 ^ 0x43D4086F) - 1352185696) >> 15);
  unsigned int v144 = (v143 ^ 0x53FCE148) + ((2 * v143) & 0xA7FB7F0C ^ 0x23D0C) + v139 + v140 - v142 - 345773624;
  int v145 = -1985904479 * v140 - 943982026 - ((323158338 * v140 + 507489930) & 0x313862B8);
  unsigned int v146 = ((-1918894080 * v144 - ((457179136 * v144 + 801112064) & 0xDC400000) - 2045793306) ^ 0x6E2FABE6) & 0xFFE00000 | ((-742505363 * v144 - ((-1485010726 * v144 + 1889001854) & 0xA2743346) - 1987704222) >> 11);
  unsigned int v147 = ((2 * v146) & 0xFAFBF7FE ^ 0x304686) + (v146 ^ 0xFD67DCBC);
  unsigned int v148 = 1107296256 * v140 - ((-2080374784 * v140 + 335544320) & 0xBBBBBBBB) - 402964645;
  unsigned int v149 = (((~(-233665792 * v139 + 525580032) | 0x532FF9FF) - 116832896 * v139 - 435036449) ^ 0xD668035E) & 0xFFFFFF80 | ((-1007545717 * v139 - ((132392214 * v139 + 1681827694) & 0x4A2A9D3A) + 1463067220) >> 25);
  unsigned int v150 = v149 ^ 0xCD7D0FA8;
  unsigned int v151 = (2 * v149) & 0x9AFA1F74 ^ 0x24;
  unsigned int v153 = -597694891 * v152 - ((952093866 * v152 + 235209374) & 0x250313F0) + 1501825863;
  unsigned int v154 = ((553648128 * v142 - ((1107296256 * v142 + 1107296256) & 0xA0000000) + 1910811819) ^ 0xD0E4ACAB) & 0xFF000000 | ((1254474017 * v142 - ((-1786019262 * v142 - 384570046) & 0xBA67A77C) - 776091041) >> 8);
  unsigned int v155 = ((2 * v154) & 0xBFFDFFDE ^ 0xB86786) + (v154 ^ 0x5FA3CC3C);
  LOBYTE(v6) = ((2 * (v6 & 9 ^ 0xC3)) | 0xA2) - (v6 & 9 ^ 0xC3) - 81;
  unsigned int v156 = ((-80322113 * v147 - ((1986839422 * v147 + 1802943358) & 0x6D453E00) - 1403126593) ^ 0xB6A29F00) >> (v6 ^ 0x93);
  unsigned int v157 = ((v156 - ((2 * v156) & 0x8DAA2E2C) + 1188370198) ^ 0x46D51716) >> (v6 ^ 0x9A);
  unsigned int v158 = ((2 * v157) & 0xFF7F8E7C) + (v157 ^ 0x7FBFC73E);
  int v159 = v150 + v151 + v152 - v155 - v147 + 264816434;
  unsigned int v160 = v158 - 545259520 * v147;
  unsigned int v161 = -351613019 * v155 - ((-703226038 * v155 + 381260778) & 0xDF477554) + 2063631519;
  unsigned int v162 = (1239945263 * v159 - ((332406878 * v159 + 806917046) & 0x28A089DEu) + 207392458) >> 16;
  unsigned int v163 = 1409286144 * v152 - ((-1476395008 * v152 + 2013265920) & 0xA0000000) + 221491424;
  int v164 = 271515648 * v159 - ((543031296 * v159 + 330694656) & 0x3D360000) - 394865740;
  unsigned int v165 = v160 + 58720256;
  int v166 = 671088640 * v155 - ((1342177280 * v155 + 1342177280) & 0x70000000) + 1669407242;
  int v167 = ((2 * (v162 & 0x1ABD ^ 0x399050FD)) | 0x2A18FF1E) - (v162 & 0x1ABD ^ 0x399050FD) + 1794343025;
  unsigned int v168 = v167 ^ 0xAC9C3F62 | ((v164 & 0x9950000 ^ 0x9366FA7D) - 1345862172) ^ 0x4BBFC061;
  unsigned int v169 = (((((2 * (v162 & 0xE542 ^ 0x6540)) | 0x4BC03862) - (v162 & 0xE542 ^ 0x6540) - 635444273) ^ 0x23F378C) - 1) ^ 0x27DFCABC | ((v164 & 0xF66A0000 ^ 0x850B0090) + (v164 & 0x24080000 ^ 0x2010D12C) - ((v164 & 0xF66A0000 ^ 0x850B0090) & 0x24090090)) ^ 0x3718D12C;
  unsigned int v170 = (v169 - ((2 * v169) & 0xC73D72B2) + 1671346521) ^ 0x639EB959 | (v168
                                                                       - 2 * (v168 & 0x62ED4E5F ^ v167 & 8)
                                                                       - 487764393) ^ 0xE2ED4E57;
  unsigned int v171 = ((2 * v170) & 0xEBFAB7EC) + (v170 ^ 0x75FD5BF6);
  unsigned int v172 = (v163 ^ 0xD133B0E0) & 0xFC000000 | (v153 >> 6);
  int v173 = v172 ^ 0x5E31FB70;
  unsigned int v174 = (2 * v172) & 0xBCF7FAAE ^ 0x94080E;
  unsigned int v175 = -((-309554688 * v158 + 1148625920) & 0xD21A7000) - 154777344 * (v160 + 58720256) - 1958180109;
  LODWORD(STACK[0x5D0]) = v133;
  LODWORD(STACK[0x510]) = v136;
  int v176 = v133 ^ v118 ^ v136;
  unsigned int v177 = (-1745435063 * v165 - 2 * ((-1745435063 * v165 + 312621906) & 0x1150610F ^ (-1745435063 * v165) & 1) + 66231392) >> 24;
  LODWORD(STACK[0x560]) = v176;
  if (v176 == -1943451284) {
    int v178 = 33;
  }
  else {
    int v178 = v177 ^ 0xCF;
  }
  int v179 = (v178 & (v177 ^ 0x11)) - ((2 * (v178 & (v177 ^ 0x11))) & 0x66666666);
  unsigned int v180 = ((2 * ((v166 ^ 0xBB81220A) & 0xF8000000 | (v161 >> 5))) & 0xFCBA41F6 ^ 0xCBA01A2)
       + (((v166 ^ 0xBB81220A) & 0xF8000000 | (v161 >> 5)) ^ 0xF9203D2E);
  unsigned int v181 = ((v177 & 0xDE ^ 0x18) + (v177 & 0xC8 ^ 0xE272CFE1) - ((v177 & 0xDE ^ 0x18) & 0xC8)) ^ 0xE7720EE9;
  int v182 = -1125687931 - v181 + ((2 * v181) & 0x200C4F4);
  unsigned int v183 = (~(175802306 * v180 + 459973834) | 0xED5590F7) + 356336609 * v180 + 655002090;
  unsigned int v184 = ((v175 & 0xDD1EDE00 ^ 0xCC064000) - ((2 * (v175 & 0xDD1EDE00 ^ 0xCC064000)) & 0x9A118800) - 852966235) ^ 0xEB2895A9;
  unsigned int v185 = (v179 - 1731056333) ^ 0x98D22D33 | (((2 * v184) | 0x300EE7C4) - v184 + 1744342046) ^ 0xBB0D7AEE;
  int v186 = v173 + v174 + v180 - v165 - v171 - 288541355;
  unsigned int v187 = (v182 - 835584) ^ 0xB9DA5C8D | ((((v175 & 0x22E12100 ^ 0xF0C46EB) - 1) & 0x1C862C0 ^ 0x40801800)
                                       + (((v175 & 0x22E12100 ^ 0xF0C46EB) - 1) ^ 0xB5D66FE)
                                       - ((((v175 & 0x22E12100 ^ 0xF0C46EB) - 1) ^ 0xB5D66FE) & 0xC02014)) ^ 0x65987AC0;
  unsigned int v188 = ((2 * v185) & 0xF7FDEFBE) + (v185 ^ 0x7BFEF7DF) + (v187 ^ 0xAFDAE7FF) + ((2 * v187) & 0x5FB5CFFE);
  int v189 = v188 - ((2 * v188 + 676085828) & 0x4CB9DAAE) - 92074631;
  unsigned int v190 = 260308992 * v180 - ((520617984 * v180 - 1826095104) & 0xB9880000) + 643482839;
  unsigned int v191 = ((-585842332 * v171 - 2 * ((-585842332 * v171 + 1501273576) & 0x69C4E3F4 ^ (-585842332 * v171) & 4)) & 0xFFFFFFFC | ((-146460583 * v171 - ((-292921166 * v171 - 1396846860) & 0x92E27ACE) - 1613749023) >> 30))
       + 1128301016;
  unsigned int v192 = ((2 * v191) & 0xF57FFEF6 ^ 0xD109C6E2) + (v191 ^ 0x137B1C8A);
  unsigned int v193 = ((v190 ^ 0xDCC6C4D7) & 0xFFFC0000 | (v183 >> 14)) ^ 0x22554;
  int v194 = v193 - 2 * (v193 & 0x70269FED ^ (v183 >> 14) & 8) + 1881579493;
  unsigned int v195 = ((-1175453696 * v186 - ((1944059904 * v186 - 228589568) & 0xAF600000) - 790352540) ^ 0x57B42D64) & 0xFFF00000 | ((687160223 * v186 - ((300578622 * v186 + 400740134) & 0x18149BAEu) - 134498966) >> 12);
  unsigned int v196 = ((2 * v195) & 0x7EE8B7CE ^ 0x8148) + (v195 ^ 0xBF749B43);
  int v197 = (((v189 ^ 0x265CED57) - v192 - 177683611 + (~(2 * ((v189 ^ 0x265CED57) - v192) - 176161034) | 0xAAE782D)) ^ 0x50491431)
       - v196
       - 1082893337;
  int v198 = (v194 ^ 0x567A72B2 ^ v189)
       - (v196
        + v192)
       - ((2 * ((v194 ^ 0x567A72B2 ^ v189) - (v196 + v192)) + 73971396) & 0x5C40286)
       - 1122607963;
  unsigned int v199 = (1298035837 * (((2 * v197) & 0xF67E9EE8) + (v197 ^ 0xFB3F4F74))
        - ((-1698895622 * (((2 * v197) & 0xF67E9EE8) + (v197 ^ 0xFB3F4F74)) + 586893496) & 0x84AC8306)
        - 741087777) ^ v198;
  LODWORD(STACK[0x4A0]) = v199;
  unsigned int v200 = (v199 ^ 0x40B440C0) - ((2 * (v199 ^ 0x40B440C0) - 518696158) & 0xC3999EAE) - 766019352;
  int v201 = v198 ^ 0x2E20143;
  LODWORD(STACK[0x610]) = v200;
  int v202 = v200 ^ 0x61CCCF57;
  int v203 = (v202 & (v198 ^ 0x2E20143)) - ((2 * (v202 & (v198 ^ 0x2E20143))) & 0x25BA3688);
  unsigned int v204 = v196 + 1082893337 + v202 - ((2 * (v196 + 1082893337 + v202)) & 0xEBDFBB5C);
  unsigned int v205 = ((2 * (v192 + 88080517 + v202)) & 0xEABFDFFE) + ((v192 + 88080517 + v202) ^ 0x755FEFFF);
  unsigned int v206 = ((v202 + v201) ^ 0xE9D7E9FB)
       + ((2 * (v202 + v201)) & 0xD3AFD3F6)
       + ((2 * v203 - 1514523000) ^ 0x2DBEF60D)
       + ((2 * (2 * v203 - 1514523000)) & 0xEFF67EF4 ^ 0xB48B93EF)
       + 1;
  unsigned int v207 = v206 - ((2 * v206 + 474393344) & 0x9268413C) + 1465349662;
  LODWORD(STACK[0x500]) = v207;
  unsigned int v208 = v207 ^ 0xC934209E;
  unsigned int v209 = -835817011 * v202 - ((-1671634022 * v202) & 0xAE2232DE) + 1460738415;
  unsigned int v210 = v204 + 1978654126;
  LODWORD(STACK[0x650]) = v210;
  LODWORD(STACK[0x4F0]) = v205 - 1969221631;
  if (v205 - 1969221631 >= 0xF510DE7C) {
    int v211 = -438265827;
  }
  else {
    int v211 = -621709671;
  }
  LODWORD(STACK[0x5C0]) = v211;
  unsigned int v212 = ((-(((v205 << 28) + 0x10000000) & 0x30000000) - 2013265920 * v205 + 637031079) ^ 0x9DF852A7) & 0xF8000000 | ((-1679190127 * v205 - ((399716130 * v205 + 335892258) & 0x1DB9A3E8) - 1461749371) >> 5);
  int v213 = 1558419968 * v202 - ((969356288 * v202) & 0x454F7400);
  unsigned int v214 = ((1643700224 * (v210 ^ 0x75EFDDAE) - ((-1007566848 * (v210 ^ 0x75EFDDAE)) & 0xEAEA4000) - 176867034) ^ 0xF5753926) & 0xFFFFE000 | ((1019416519 * (v210 ^ 0x75EFDDAE) - ((2038833038 * (v210 ^ 0x75EFDDAE)) & 0x40E29A6A) - 1603187403) >> 19);
  unsigned int v215 = ((2 * v214) & 0x7DDFDED4 ^ 0x814) + (v214 ^ 0xBEEFFB64);
  int v216 = 2
       * ((v212 ^ 0x2A481364)
        + (v212 ^ 0xD70E6A3)
        + ((2 * v212) & 0x6DF3FFA6 ^ 0x771E32F9)
        + ((2 * v212) & 0x5C7DEBD6 ^ 0x86DC916))
       - 1854532652;
  unsigned int v217 = ((2 * v212) & 0xFE79F6FE ^ 0x869C41E) + (v212 ^ 0x7B4A1DF0) + (v216 ^ 0x7FFBA38F);
  unsigned int v218 = v217
       + ((2 * v216) & 0xFFF7471C)
       - 2 * ((v217 + ((2 * v216) & 0xFFF7471C) + 13066482) & 0x6181B69B ^ v217 & 1)
       - 498526324;
  unsigned int v219 = (((v213 + 581417814) ^ 0x22A7BB56) & 0xFFFFFE00 | (v209 >> 23)) ^ 0xAE;
  int v220 = v219 - 2 * (v219 & 0x6E7AF537 ^ (v209 >> 23) & 0x11) + 1853551910;
  unsigned int v221 = ((581304320 * v208 - ((1162608640 * v208) & 0xAEC40000) - 681419036) ^ 0xD7625EE4) & 0xFFFE0000 | (((~(987964070 * v208) | 0x594E6B05) - 1653501613 * v208 - 749155714) >> 15);
  unsigned int v222 = ((2 * v221) & 0x6FEDE7DA ^ 0x14542) + (v221 ^ 0xB7F7555C);
  unsigned int v223 = ((v215 + 1091571862 + (v220 ^ 0x8FFB43BC ^ v218)) ^ 0xBF95B78)
       - v222
       + ((2 * (v215 + 1091571862 + (v220 ^ 0x8FFB43BC ^ v218))) & 0x17F2B6F0);
  unsigned int v224 = v218 ^ 0xE181B69A;
  unsigned int v225 = -2019870771 * (v218 ^ 0xE181B69A) - ((255225754 * (v218 ^ 0xE181B69A)) & 0xBE74C184) + 1597661378;
  int v226 = -1067558529 * v215 - ((12366590 * v215 + 664846548) & 0x2AD325FA) + 154792807;
  unsigned int v227 = ((335544320 * v223 - ((671088640 * v223 + 1207959552) & 0xDFFFFFFF) + 312372720) ^ 0xEE9E6DF0 | ((-1797732091 * v223 - ((162632202 * v223 + 247443090) & 0xBB16B92) + 1161334034) >> 6)) ^ 0x21762D7;
  int v228 = 1501495296 * v215 - ((855506944 * v215 + 1087635456) & 0x54380000) - 1970892136;
  int v229 = 1020903016 * v224 - ((2041806032 * v224) & 0x513A30E0);
  unsigned int v230 = ((2 * ((v228 ^ 0x2A1C9298) & 0xFFFF0000 | HIWORD(v226))) & 0xFFAF6B6E ^ 0x12A42)
       + (((v228 ^ 0x2A1C9298) & 0xFFFF0000 | HIWORD(v226)) ^ 0xFFD720DE);
  unsigned int v231 = ((v229 + 681384050) ^ 0x289D1872) & 0xFFFFFFF8 | (v225 >> 29);
  int v232 = 2 * v230 + 5280914;
  unsigned int v233 = v232 ^ 0xE440C019;
  int v234 = (2 * v232) & 0x377E7FCC;
  unsigned int v235 = ((-2124698916 * v222 - ((45569464 * v222 + 253230248) & 0x181A5FB0) - 744935890) ^ 0xC0D2FDA) & 0xFFFFFFFC | ((542567095 * v222 - ((11392366 * v222 + 600178474) & 0x39306DB6) - 830785936) >> 30);
  unsigned int v236 = ((2 * v235) & 0x70FFFF6E ^ 4) + (v235 ^ 0xB87FFFB5);
  unsigned int v237 = v227 - ((2 * v227) & 0xDA3430BC) + 1830426718;
  int v238 = v237 ^ 0x6D1A185E;
  unsigned int v239 = 1896977585 * (v237 ^ 0x6D1A185E) - ((-501012126 * (v237 ^ 0x6D1A185E)) & 0x86E3B3A4) + 1131534802;
  int v240 = v230 + 2640457 + (((v231 ^ 2) - ((2 * v231) & 0x6194B558) + 818567852) ^ 0x5DD042F2 ^ v237);
  unsigned int v241 = v240 ^ 0xFFD7FBEF;
  unsigned int v242 = (2 * v240) & 0xFFAFF7DE;
  unsigned int v243 = -888650713 * v230 - ((101746766 * v230 + 105736766) & 0x63E8134) - 230296135;
  unsigned int v244 = v233 - v234 - 1547237950 - v236 + v241 + v242;
  int v245 = 123824069 * v244 - ((247648138 * v244 + 739116226) & 0x2B3F6728) + 1806087669;
  int v246 = 1634190592 * v244 - ((47155712 * v244 + 33866240) & 0x27BC400) - 2009054340;
  unsigned int v247 = (((573740576 * v238 - ((1147481152 * v238) & 0x9D26CD00) - 829200752) ^ 0xCE936690) & 0xFFFFFFE0 | (v239 >> 27)) ^ 8;
  unsigned int v248 = v247 - ((2 * v247) & 0xFBC56870);
  int v249 = 740364444 * v230 - ((1480728888 * v230 + 2033559800) & 0x56E4C788) + 1745696834;
  unsigned int v250 = ((v249 ^ 0xAB7263C6) & 0xFFFFFFFC | (v243 >> 30))
       - 2 * (((v249 ^ 0xAB7263C6) & 0x50587E18 | (v243 >> 30) & 0x50587E1B) ^ v249 & 0x10)
       + 1347976715;
  unsigned int v251 = ((2 * ((v246 ^ 0x813DE27C) & 0xFFFFFF00 | HIBYTE(v245))) & 0xCEBFB1F2 ^ 0x122)
       + (((v246 ^ 0x813DE27C) & 0xFFFFFF00 | HIBYTE(v245)) ^ 0x675FD86C);
  unsigned int v252 = 44593339 * v251 - ((89186678 * v251 + 827270202) & 0x30EAB084) + 1360849503;
  int v253 = (v248 + 2112009272) ^ 0x7DE2B438;
  int v254 = -805306368 * v253 - ((4 * v239) & 0x60000000);
  unsigned int v255 = (((457703424 * v236 - ((915406848 * v236 - 1894776832) & 0x8B500000) + 221753301) ^ 0x45AFAFD5) & 0xFFF80000 | ((1752761193 * v236 - ((-789444910 * v236 + 1006891490) & 0xBEFDFB1A) + 2105603710) >> 13)) ^ 0x6FBF7;
  LOBYTE(v247) = ((v239 >> 27) & 0x1E ^ 0xA) - ((2 * ((v239 >> 27) & 0x1E ^ 0xA)) & 0x34) - 37;
  unsigned int v256 = (v250 ^ 0x2DBACA33 ^ (v248 + 2112009272)) - 1734334713 + v251;
  unsigned int v257 = v255 - ((2 * v255) & 0xC7D06100) + 1676161152;
  int v258 = v257 ^ 0x63E83080;
  unsigned int v259 = 1287843335 * (v257 ^ 0x63E83080) - ((-1719280626 * (v257 ^ 0x63E83080)) & 0xA0EC73E8) + 1349925364;
  unsigned int v260 = v257 ^ 0xBBAE0094 ^ (v256 - ((2 * v256) & 0xB08C6028) - 666488812);
  unsigned int v261 = ((-54826807 * v260 - ((2037830034 * v260) & 0x7CA625C0) + 1045631712) ^ 0x3E5312E0) >> (v247 ^ 0xD9);
  unsigned int v262 = ((v254 + 838229640) ^ 0x31F65E88) & 0xF0000000 | ((-1510210467 * v253
                                                          - ((1274546362 * v253) & 0x48028814u)
                                                          + 604062730) >> 4);
  unsigned int v263 = ((2 * v262) & 0xF1CF7FFA ^ 0x802880) + (v262 ^ 0xFAA7ABBD);
  LOBYTE(v26fseek(v0, 0LL, 2) = v247 ^ 0xC7;
  unsigned int v264 = ((-869343120 * v258 - ((408797408 * v258) & 0x2A136AE0) + 352957818) ^ 0x1509B57A) & 0xFFFFFFF0 | (v259 >> 28);
  unsigned int v265 = ((v261 - ((2 * v261) & 0x49DE066A) + 619643701) ^ 0x24EF0335) >> v262;
  unsigned int v266 = ((1356953088 * v251 - ((566422528 * v251 + 508064768) & 0x57D24C00) - 83009308) ^ 0xABE926E4) & 0xFFFFFE00 | (v252 >> 23);
  int v267 = (v266 ^ 0x30) - 2 * ((v266 ^ 0x30) & 0x7E2E59F ^ (v252 >> 23) & 2);
  unsigned int v268 = ((2 * v264) & 0xDBB2F9D6 ^ 2) + (v264 ^ 0xEDD97CEE) - v263;
  unsigned int v269 = v268 - ((2 * v268 + 370968100) & 0x8BC1ED66) - 789628475;
  int v270 = v267 + 132310429;
  int v271 = (v267 + 132310429) ^ 0x7E2E59D;
  unsigned int v272 = 2 * ((v271 & (v269 ^ 0xC5E0F6B3)) - ((2 * (v271 & (v269 ^ 0xC5E0F6B3))) & 0x7F661A2)) + 133587362;
  unsigned int v273 = ((-219307228 * v260) ^ 0xFF56FFC3)
       + ((-438614456 * v260) & 0xFEADFF80)
       + ((-256 - -2 * v265) & 0x72)
       + ((127 - v265) ^ 0x67DB4E46);
  int v274 = v273 - 2 * ((v273 + 416133636) & 0x1855F233 ^ v273 & 2) + 824419381;
  unsigned int v275 = (v269 ^ v270 ^ 0xC202132E) + (v272 ^ 0x50C94F59) - 1463758587 + ((2 * v272) & 0xAE7E5DF4 ^ 0xE6C4144);
  unsigned int v276 = (v275 ^ 0x46FF3FEC) + ((2 * v275) & 0x8DFE7FD8) - 1191133164 + (v274 ^ 0x9855F231);
  unsigned int v277 = (v274 ^ 0x9855F231)
       + 1391156377
       * (((2 * (v263 + 119029372 + v271 + 391)) & 0xF9BBFFDC) + ((v263 + 119029372 + v271 + 391) ^ 0x7CDDFFEE))
       + 1809744578;
  int v278 = v276 - ((2 * v276) & 0x5C207A76) - 1374667461;
  unsigned int v279 = (v277 - ((2 * v277) & 0xD54423C8) + 1789006308) ^ v278;
  int v280 = (v279 ^ 0x8FA299B) + 1;
  LODWORD(STACK[0x4B0]) = v279 ^ 0xF9DFDE94;
  LODWORD(STACK[0x550]) = v274;
  unsigned int v281 = v279 ^ 0xF9DFDE94 ^ v274;
  unsigned int v282 = v280 + (v278 ^ 0xAE103D3B) - ((2 * (v280 + (v278 ^ 0xAE103D3B))) & 0x79432EFE) - 1130260609;
  LODWORD(STACK[0x570]) = v282;
  int v283 = v280 + v271 + 558302732;
  int v284 = v283 - ((2 * (v280 + v271)) & 0x428E0C18);
  LODWORD(STACK[0x600]) = v284;
  HIDWORD(v285) = v279;
  LODWORD(v285) = (1810100545 * (v279 ^ 0xF705D664) + 1790908392 - ((-674766206 * (v279 ^ 0xF705D664)) & 0xD57E2FD4) + 2) ^ 0x6ABF17E8;
  int v286 = (v285 >> 2) - ((2 * (v285 >> 2)) & 0xE6ADC320) + 1935073680;
  unsigned int v287 = ((1570816535 * (v284 ^ 0x2147060C) - ((994149422 * (v284 ^ 0x2147060C)) & 0x26CE159Eu) - 1821963569) >> 3) ^ 0x126CE159 | (((v283 << 29) ^ 0x60000000) - 142464520 + ((2 * ((v283 << 29) ^ 0x60000000) + 0x40000000) & 0x80000000)) ^ 0xD78229F8;
  LODWORD(STACK[0x520]) = v281;
  HIDWORD(v285) = v281 ^ 1;
  LODWORD(v285) = (-2094532911 * (v281 ^ 0x968FFAC1) - 1882631504 - ((105901474 * (v281 ^ 0x968FFAC1)) & 0x1F92A56C) + 6) ^ 0x8FC952B0;
  unsigned int v288 = v287 - ((2 * v287) & 0xEB75596E) + 1975168183;
  int v289 = v288 ^ 0x75BAACB7;
  int v290 = 59574554 * (v288 ^ 0x75BAACB7);
  unsigned int v291 = 29787277 * (v288 ^ 0x75BAACB7) - (v290 & 0xAA327854) + 1427717162;
  int v292 = (v285 >> 3) - ((2 * (v285 >> 3)) & 0x36CA2A06) + 459609347;
  unsigned int v293 = ((1992468288 * (v282 ^ 0xBCA1977F) - ((-310030720 * (v282 ^ 0xBCA1977F)) & 0xD4F5C380) - 361045519) ^ 0xEA7AE1F1) & 0xFFFFFFC0 | ((1037765277 * (v282 ^ 0xBCA1977F) - ((2075530554 * (v282 ^ 0xBCA1977F)) & 0x991D04B2) - 863075751) >> 26);
  unsigned int v294 = ((2 * v293) & 0xF836BBEE ^ 0x66) + (v293 ^ 0x7C1B5DC4);
  int v295 = (v288 ^ v286 ^ v292 ^ 0x1D895824) - v294 + 2082168311;
  unsigned int v296 = ((2 * v295) & 0xFFF72BEE) + (v295 ^ 0x7FFB95F7);
  unsigned int v297 = -652470813 * v296 - ((-1304941626 * v296 + 892438006) & 0xC4D495D0) - 50131485;
  unsigned int v298 = (((v290 - ((119149108 * v289) & 0xF348F1A0)) & 0xFFFFFFFE | (v291 >> 31)) - 106661680) ^ 0xF9A478D0;
  unsigned int v299 = v298 - ((2 * v298) & 0xC799DC9C) + 1674374734;
  unsigned int v300 = -2110409303 * v294 - ((74148690 * v294 + 750299618) & 0x4FBD5FC6) - 29686572;
  unsigned int v301 = (((1468792832 * v296 - ((-1357381632 * v296 + 400031744) & 0x86600000) + 1327314227) ^ 0x43313533) & 0xFFFC0000 | (v297 >> 14)) ^ 0x389A9;
  int v302 = 1800536064 * v294 - ((1453588480 * v294 + 1405353984) & 0x76440000) - 452661809;
  int v303 = v301 - 2 * (v301 & 0x2296BC33 ^ (v297 >> 14) & 0x10) + 580303907;
  unsigned int v304 = ((-1525776384 * (v292 ^ 0x1B651503) - ((1243414528 * (v292 ^ 0x1B651503)) & 0x827E0000) + 1094648425) ^ 0x413F0269) & 0xFFFF8000 | ((-826717667 * (v292 ^ 0x1B651503) - ((494048314 * (v292 ^ 0x1B651503)) & 0x572DE34Au) + 731312549) >> 17);
  unsigned int v305 = ((2 * v304) & 0x1FFBFF84 ^ 0x2B84) + (v304 ^ 0x8FFDEA09);
  unsigned int v306 = -1981558481 * v305 - ((331850334 * v305 + 789926596) & 0x2F77DE24) - 1354327948;
  unsigned int v307 = ((2 * ((v302 ^ 0x3B22EDCF) & 0xFFFE0000 | (v300 >> 15))) & 0x9DF32BAA ^ 0xB2A)
       + (((v302 ^ 0x3B22EDCF) & 0xFFFE0000 | (v300 >> 15)) ^ 0xCEF9DA68);
  int v308 = (v299 ^ 0x415A526D ^ v303) - (v307 + v305) + 1593283991;
  unsigned int v309 = ((2 * v308) & 0xBCEEDBDE) + (v308 ^ 0x5E776DEF);
  int v310 = 1327401336 * v305 - ((507319024 * v305 + 2024445472) & 0x75D7E780) - 146719018;
  HIDWORD(v285) = (v297 >> 14) ^ 1;
  LODWORD(v285) = (-1879532367 * (v303 ^ 0x2296BC23) + 376216744 - ((535902562 * (v303 ^ 0x2296BC23)) & 0x2CD93958) + 4) ^ 0x166C9CA8;
  unsigned int v311 = ((v310 ^ 0x3AEBF3C6) & 0xFFFFFFF8 | (v306 >> 29))
       - ((2 * ((v310 ^ 0x3AEBF3C6) & 0xFFFFFFF8 | (v306 >> 29))) & 0xE8187B22);
  int v312 = (v285 >> 3) - ((2 * (v285 >> 3)) & 0xA340337C) - 778036802;
  unsigned int v313 = v312 ^ 0xD1A019BE;
  unsigned int v314 = -2097495347 * (v312 ^ 0xD1A019BE) - ((99976602 * (v312 ^ 0xD1A019BE)) & 0x2A046120) - 1795018608;
  v311 -= 200524399;
  unsigned int v315 = (((-1085202432 * v309 + 849939910 - ((2124562432 * v309 + 1900429312) & 0x740BC000) + 2060) ^ 0x3A05F5D2) & 0xFFFFE000 | ((-1975125367 * v309 - ((344716562 * v309 - 1298167246) & 0xDCBD2D70) + 1202609105) >> 19)) ^ 0x1DCB;
  unsigned int v316 = v315 - ((2 * v315) & 0xCF1354DE) + 1737075311;
  unsigned int v317 = 2
       * (((v312 ^ 0xD1A019BE) & (v311 ^ 0xF40C3D91)) - ((2 * ((v312 ^ 0xD1A019BE) & (v311 ^ 0xF40C3D91))) & 0x6508F7AC))
       + 1695086508;
  unsigned int v318 = (((498728960 * v307 - ((997457920 * v307 + 75235328) & 0x40B80000) + 580565990) ^ 0x205CBBE6) & 0xFFFE0000 | ((1843957469 * v307 - 160825344 - ((466689466 * v307 + 248185406) & 0x1E0914EC) + 2965) >> 15)) ^ 0x11E09;
  unsigned int v319 = (v311 ^ 0x25AC242F ^ v312) + (v317 ^ 0x9BB7C853) + 21020673 + ((2 * v317) & 0xFD7E7FFC ^ 0xC8106F58);
  int v320 = v319 - 975663303 + (~(2 * v319) | 0x744EE18F);
  unsigned int v321 = v318 - ((2 * v318) & 0xE0669BBA) - 265073187;
  unsigned int v322 = v321 ^ 0xF0334DDD;
  unsigned int v323 = 901433759 * (v321 ^ 0xF0334DDD) - ((24482622 * (v321 ^ 0xF0334DDD)) & 0x1DC9F44) - 2131865694;
  int v324 = v321 ^ v316 ^ 0x5262688A ^ v320;
  unsigned int v325 = -1895857437 * v324 - ((503252422 * v324) & 0xB545418C) - 626876218;
  int v326 = -1049526272 * v324 - ((48431104 * v324) & 0xD330000);
  unsigned int v327 = (-1757413376 * (v316 ^ 0x6789AA6F) - ((780140544 * (v316 ^ 0x6789AA6F)) & 0xF1FFFFFF) - 121452476) ^ 0xF8C2C844 | ((-1046001059 * (v316 ^ 0x6789AA6F) - ((-2092002118 * (v316 ^ 0x6789AA6F)) & 0xA74B3F7A) + 1403363261) >> 10);
  unsigned int v328 = ((2 * v327) & 0xFFCFF4E6 ^ 0x9D0C6) + (v327 ^ 0xFFF31314);
  unsigned int v329 = (((v326 - 2036747509) ^ 0x8699B30B) & 0xFFFF8000 | (v325 >> 17)) ^ 0x6D51;
  unsigned int v330 = v329 - ((2 * v329) & 0xD55C1F3C);
  unsigned int v331 = ((-1218890784 * v322 - ((1857185728 * v322) & 0xED28DD80) - 158044474) ^ 0xF6946EC6) & 0xFFFFFFE0 | (v323 >> 27);
  unsigned int v332 = (((-175793664 * v313 - ((-351587328 * v313) & 0x84A30800) - 1034845133) ^ 0xC2518433) & 0xFFFFFE00 | (v314 >> 23)) ^ 0x12A;
  int v333 = v332 - ((2 * v332) & 0xC4E0030) - 2044264424;
  unsigned int v334 = v328 + 1574285 + (v333 ^ 0x86270018);
  unsigned int v335 = v328
       + 1574285
       + (((v331 ^ 0x10) - 2 * ((v331 ^ 0x10) & 0x6F940D9F ^ (v323 >> 27) & 0xC) + 1871973779) ^ 0xE9B30D8B ^ v333);
  int v336 = (v330 + 1789792158) ^ (v335 - ((2 * v335) & 0x241793FE) - 1844721153);
  int v337 = (v330 + 1789792158) ^ 0x6AAE0F9E;
  unsigned int v338 = (v334 ^ 0x6B5CB9FF) + ((2 * v334) & 0xD6B973FE) - 1801239039 + v337;
  unsigned int v339 = v336 ^ 0x8AAB7E05 ^ (((2 * v338) & 0x33FFFFB6)
                            + (v338 ^ 0x99FFFFDB)
                            - ((2 * (((2 * v338) & 0x33FFFFB6) + (v338 ^ 0x99FFFFDB)) + 1780832632) & 0xE41D70C8)
                            - 1490983648);
  unsigned int v340 = v339 - ((2 * v339 - 1701039570) & 0xEA4B26D2);
  LODWORD(STACK[0x5F8]) = v340 + 1114877056;
  LODWORD(STACK[0x660]) = ((v340 + 1114877056) ^ 0xF5259369)
                        + v337
                        + 234944236
                        - ((2 * (((v340 + 1114877056) ^ 0xF5259369) + v337)) & 0x1C01EDD8);
  LODWORD(STACK[0x608]) = ((v340 + 1114877056) ^ 0xADA6C96)
                        + v328
                        - ((2 * (((v340 + 1114877056) ^ 0xADA6C96) + v328) + 3148572) & 0xE1F65818)
                        - 250400358;
  uint64_t v341 = malloc(0x408uLL);
  STACK[0xAC0] = (unint64_t)v341;
  return ((uint64_t (*)(void))*(&off_10025C670 + ((78 * (v341 != 0LL)) ^ LODWORD(STACK[0x640]))))();
}

uint64_t sub_100126414(uint64_t a1)
{
  int v9 = STACK[0x5F0];
  LODWORD(STACK[0x468]) = LODWORD(STACK[0x5F0]) ^ 0x591A7AB9;
  LODWORD(STACK[0x440]) = (STACK[0x5C8] & v5) - ((2 * (STACK[0x5C8] & v5)) & 0x734E1C2A) + 967249429;
  LODWORD(STACK[0x438]) = (v5 | LODWORD(STACK[0x620])) - ((2 * (v5 | LODWORD(STACK[0x620]))) & 0xBCF5F93E) - 562365281;
  LODWORD(STACK[0x480]) = v7 >> 8;
  LODWORD(STACK[0x5C8]) = HIWORD(v7) ^ 0x3E0F9C74;
  LODWORD(STACK[0x420]) = v6 + 1114877082;
  unsigned int v10 = STACK[0x5F8];
  int v11 = LODWORD(STACK[0x5F8]) ^ v3;
  int v12 = (((2 * (v11 & 0x684CEC41 ^ 0x684CE040)) & 0x1011D880) - (v11 & 0x684CEC41 ^ 0x684CE040) + 2011562143) ^ 0x5522019F;
  int v13 = LODWORD(STACK[0x660]) ^ v1;
  LODWORD(STACK[0x430]) = (STACK[0x660] & 0xFFFFFDFF ^ 0x2602F7BC | 0xE9F3C520)
                        - (STACK[0x660] & 0xFFFFFDFF ^ 0x2602F7BC | 0x160C3ADF)
                        + 369900255;
  unsigned int v14 = (((2 * (v11 & 0x97B313BE ^ 0x17B1029A)) | 0xD398546A) - (v11 & 0x97B313BE ^ 0x17B1029A) - 1774987829) ^ 0x71AC2277;
  unsigned int v15 = (v14 & 0xA4A07C8C) - (v14 | 0xA4A07C8D);
  unsigned int v16 = LODWORD(STACK[0x608]) ^ 0xF0FB2C0C;
  LODWORD(STACK[0x428]) = v16 - 886089027 + v2 - ((2 * (v16 - 886089027 + v2)) & 0x88493E6C) - 1004232906;
  unsigned int v17 = (v12 - ((2 * v12) & 0x410DBA00) - 1601774314) ^ 0xE20E7856 | v15 ^ 0x510E98A3;
  int v18 = v17 - 2 * (v17 & 0x160E8493 ^ v12 & 1) + 370050194;
  LODWORD(STACK[0x448]) = v18;
  unsigned int v19 = (((-1933756032 * v13 - ((427455232 * v13) & 0x76B59400) + 995805790) ^ 0x3B5ACA5E) & 0xFFFFFF80 | ((119110259 * v13 - ((238220518 * v13) & 0x96394D30) + 1260168856) >> 25)) ^ 0x25;
  unsigned int v20 = v19 - ((2 * v19) & 0xD847E45C) + 1814295086;
  unsigned int v21 = ((1811939328 * v8 - ((1476395008 * v8) & 0x60000000) + 824216208) ^ 0x31208A90) & 0xFC000000 | ((-292073701 * v8 - ((1563336246 * v8) & 0x5D6B0724u) + 783647634) >> 6);
  unsigned int v22 = ((2 * v21) & 0xBBCFEB7C ^ 0x145A81C) + (v21 ^ 0x5D5D23B0);
  unsigned int v23 = ((-899678208 * (v18 ^ 0x160E8492) - ((348127232 * (v18 ^ 0x160E8492)) & 0x3B000000) - 1650778927) ^ 0x9D9B1CD1) & 0xFFE00000 | ((1892111955 * (v18 ^ 0x160E8492) - ((1636740262 * (v18 ^ 0x160E8492)) & 0x43D9389Cu) - 1578329010) >> 11);
  unsigned int v24 = ((2 * v23) & 0x176A9EBC ^ 0x281A24) + (v23 ^ 0x8BA172CD);
  unsigned int v25 = ((-228342528 * v16 - ((1690798592 * v16) & 0x6CAC2E00) - 1235871793) ^ 0xB65617CF) & 0xFFFFFF00 | ((-1259183163 * v16 - ((1776600970 * v16) & 0x7343702E) - 1180583913) >> 24);
  unsigned int v26 = ((2 * v25) & 0xEFEE1BFC ^ 0x170) + (v25 ^ 0xF7F70D47);
  int v27 = v22 - v26 + 1098279798 + ~(2 * ((v22 - v26 + 437196864) & 0x27675337 ^ (v22 - v26) & 2));
  int v28 = v20 ^ 0x6C23F22E;
  int v29 = 990449079 * (v20 ^ 0x6C23F22E) - ((907156334 * (v20 ^ 0x6C23F22E)) & 0x3FD5DF5A) + 535490477;
  unsigned int v30 = 2 * (((v27 ^ 0xA7675335) & (v20 ^ 0x6C23F22E)) - ((2 * ((v27 ^ 0xA7675335) & (v20 ^ 0x6C23F22E))) & 0xA7BD936))
      - 1971594954;
  unsigned int v31 = (v20 ^ 0xCB44A11B ^ v27) + (v30 ^ 0x54356E23) + 565266667 + ((2 * v30) & 0xBC9D6E28 ^ 0x14952228);
  HIDWORD(v3fseek(v0, 0LL, 2) = v24 + 1976430811 + (v31 ^ 0x33B99FD5);
  LODWORD(v3fseek(v0, 0LL, 2) = (1772274431 * (HIDWORD(v32) + ((2 * v31) & 0x67733FAA))
                - ((323323390 * (HIDWORD(v32) + ((2 * v31) & 0x67733FAA)) + 527199260) & 0x19C55942)
                + 1553523375) ^ 0xCE2ACA0;
  int v33 = (v32 >> 1) - ((2 * (v32 >> 1)) & 0x5CA75766) - 1370248269;
  unsigned int v34 = 1225264699 * (v33 ^ 0xAE53ABB3) + 1865223393 - ((-1844437898 * (v33 ^ 0xAE53ABB3)) & 0xDE5A058A);
  unsigned int v35 = 1757266405 * v26 - ((-780434486 * v26 - 740557932) & 0xCDB0678E) - 792317551;
  int v36 = 508559360 * v26 - ((1017118720 * v26 + 960495616) & 0x4C600000) - 2099918870;
  unsigned int v37 = ((-448640624 * v24 - ((-897281248 * v24 + 1414208064) & 0xCB50C2E0) - 1882329455) ^ 0x65A86171) & 0xFFFFFFF0 | ((-296475495 * v24 - ((-592950990 * v24 + 625258916) & 0xC546BDDE) + 1967503297) >> 28);
  unsigned int v38 = ((2 * v37) & 0xCBDE7FE6 ^ 4) + (v37 ^ 0x65EF3FFD);
  unsigned int v39 = ((151893760 * v28 - ((303787520 * v28) & 0x23D66200) + 300626340) ^ 0x11EB31A4) & 0xFFFFFF00 | HIBYTE(v29);
  unsigned int v40 = ((2 * v39) & 0x83EFBEFE ^ 0x3E) + (v39 ^ 0x41F7DF60);
  unsigned int v41 = ((v36 ^ 0xA635C7EA) & 0xFFF00000 | (v35 >> 12)) ^ 0x66D83;
  int v42 = v41 - ((2 * v41) & 0x17EA3138) + 200611996;
  unsigned int v43 = 513021603 * v38 - ((1026043206 * v38 + 761187470) & 0x941082BC) + 1622648741;
  int v44 = 189890560 * v38 - ((379781120 * v38 + 105316352) & 0x176C0000) - 1093029462;
  unsigned int v45 = 238747648 * (v33 ^ 0xAE53ABB3) - ((477495296 * (v33 ^ 0xAE53ABB3)) & 0x1C920000);
  unsigned int v46 = -1293815639 * v40 - ((1707336018 * v40 - 1435579822) & 0xB013A554) + 759248851;
  unsigned int v47 = STACK[0x610];
  LODWORD(STACK[0x640]) = HIBYTE(LODWORD(STACK[0x610])) ^ 0xF5E03B0;
  int v48 = 1895322752 * v40 - ((1643161856 * v40 + 929376512) & 0x72792200) - 722524697;
  unsigned int v49 = ((v40 - 1106763647 + (v42 ^ 0xA5A6B32F ^ v33)) ^ 0xBEBEFFFE)
      - v38
      + ((2 * (v40 - 1106763647 + (v42 ^ 0xA5A6B32F ^ v33))) & 0x7D7DFFFC);
  int v50 = 1275068416 * v49 - 1139897127;
  unsigned int v51 = -1183072685 * v49 - ((1928821926 * v49 - 1750653730) & 0x9304581A) - 1789542788;
  unsigned int v52 = (((v45 + 239677628) ^ 0xE4930BC) & 0xFFFF0000 | ((v34 - 2588) >> 16)) ^ 0x6F2D;
  int v53 = v52 - ((2 * v52) & 0x53D8792) - 2103524407;
  unsigned int v54 = v53 ^ 0x829EC3C9;
  unsigned int v55 = -1225981559 * (v53 ^ 0x829EC3C9) - ((1843004178 * (v53 ^ 0x829EC3C9)) & 0x4582A4A8) - 1564388780;
  unsigned int v56 = ((2 * (v50 & 0xFC000000 | (v51 >> 6))) & 0x5BA4597C ^ 0x2041160)
      + ((v50 & 0xFC000000 | (v51 >> 6)) ^ 0x2EF4240E);
  unsigned int v57 = ((v44 ^ 0xBB631AA) & 0xFFFF8000 | (v43 >> 17)) ^ 0x2504;
  unsigned int v58 = v57 - ((2 * v57) & 0xDC167638) - 301253860;
  unsigned int v59 = ((v48 ^ 0x393C9167) & 0xFFFFFF80 | (v46 >> 25)) ^ 0x6C;
  unsigned int v60 = ((v59 - ((2 * v59) & 0xA2C7C040) + 1365499936) ^ 0xD3FD23E9 ^ v53) - 768748734 + v56;
  int v61 = v60 - ((2 * v60) & 0x31A51CD6) - 1731031445;
  unsigned int v62 = 2 * (((v61 ^ 0x98D28E6B) & (v58 ^ 0xEE0B3B1C)) - ((2 * ((v61 ^ 0x98D28E6B) & (v58 ^ 0xEE0B3B1C))) & 0x157DF3B4))
      + 360575924;
  unsigned int v63 = (v58 ^ 0x76D9B577 ^ v61) + (v62 ^ 0x70950C53) - 1709768679 + ((2 * v62) & 0xCBD1FFCC ^ 0xAD1E748);
  unsigned int v64 = ((2 * v63) & 0x66BF7A7E) + (v63 ^ 0xB35FBD3F);
  unsigned int v65 = 1312000137 * v64 - ((-1670967022 * v64 + 2136638098) & 0xEEE933E0) + 924965689;
  LODWORD(STACK[0x5C0]) = HIWORD(v47) ^ 0x1A6A58B7;
  unsigned int v66 = (((824180736 * v54 - ((1648361472 * v54) & 0x74400000) + 976793814) ^ 0x3A38B0D6) & 0xFFE00000 | (v55 >> 11)) ^ 0x14582A;
  LODWORD(STACK[0x47C]) = v47 >> 8;
  int v67 = v66 - ((2 * v66) & 0x28FA1594) + 343739082;
  unsigned int v68 = (((-1978697760 * (v58 ^ 0xEE0B3B1C) - ((337571776 * (v58 ^ 0xEE0B3B1C)) & 0xE2544700) - 248896614) ^ 0xF12A239A) & 0xFFFFFFE0 | ((877689791 * (v58 ^ 0xEE0B3B1C) - ((1755379582 * (v58 ^ 0xEE0B3B1C)) & 0xBD3CAE3A) - 560048355) >> 27)) ^ 0x1B;
  unsigned int v69 = (1896947712 * v64 - ((1646411776 * v64 + 1347567616) & 0x60658000) + 1482418915) ^ 0xB032CAE3;
  unsigned int v70 = (((-1369833472 * v56 - ((1555300352 * v56 + 1114112000) & 0x718C0000) + 1509684129) ^ 0x38C7F3A1) & 0xFFFE0000 | ((-551430355 * v56 - ((1044622938 * v56 + 1341727028) & 0x59EC7C80) - 722284838) >> 15)) ^ 0x159EC;
  unsigned int v71 = v70 - ((2 * v70) & 0xBB66C748) + 1572037540;
  unsigned int v72 = ((2 * ((v67 ^ 0x147D0ACA) + (v71 ^ 0xA24C9C5B) + 1)) & 0xFFFE7DF2)
      + (((v67 ^ 0x147D0ACA) + (v71 ^ 0xA24C9C5B) + 1) ^ 0x7FFF3EF9);
  LODWORD(STACK[0x620]) = HIBYTE(v10) ^ 0x21312FEC;
  LODWORD(STACK[0x450]) = HIWORD(v10);
  unsigned int v73 = (v68 - ((2 * v68) & 0x412B1FE4) - 1600811022) ^ 0xB4E88538 ^ v67;
  unsigned int v74 = ((v69 & 0xFFFFE000 | (v65 >> 19)) ^ 0x1EEE)
      - 2 * (((v69 & 0xFFFFE000 | (v65 >> 19)) ^ 0x1EEE) & 0x424E12F3 ^ (v65 >> 19) & 0x10)
      - 1035070749;
  unsigned int v75 = ((2 * ((v71 ^ 0x5DB363A4) + v73)) & 0xBFC5FEFE) + (((v71 ^ 0x5DB363A4) + v73) ^ 0x5FE2FF7F) + (v74 ^ 0x3DB1ED1C);
  LODWORD(STACK[0x470]) = (v10 >> 8) ^ 0xB454549;
  int v76 = v75 - 1368703354 - ((2 * v75 + 3801348) & 0x1C9C8408) + 1024;
  int v77 = v74 ^ (v72 - ((2 * v72 + 519639732) & 0x122493C0) + 143577914) ^ v76;
  LODWORD(STACK[0x460]) = v77 ^ 0x23D9C379;
  LODWORD(STACK[0x498]) = (v74 ^ 0xC24E12E3)
                        + (v77 ^ 0x3860F46E)
                        + 1
                        - ((2 * ((v74 ^ 0xC24E12E3) + (v77 ^ 0x3860F46E) + 1)) & 0xCBDF3C24)
                        + 1710202386;
  unsigned int v78 = (v77 ^ 0xC79F0B91)
      + (v76 ^ 0xE4E4204)
      - ((2 * ((v77 ^ 0xC79F0B91) + (v76 ^ 0xE4E4204))) & 0xF7569E2C)
      + 2074824470;
  LODWORD(STACK[0x458]) = v71;
  unsigned int v79 = v71 ^ 0xEB0300A1 ^ v77;
  LODWORD(STACK[0x5D8]) = LODWORD(STACK[0x5E0]) - (STACK[0x5D8] & 0xCA46840C) - 525297904;
  int v80 = 79 * (LODWORD(STACK[0x5E8]) ^ 0x1A2);
  LODWORD(STACK[0x5E8]) = v78;
  unsigned int v81 = (((v78 ^ 0x93044117) - ((2 * (v78 ^ 0x93044117) - 2023407034) & 0xF7569E2C) - 1084362695) ^ 0x7BAB4F16)
      + (v9 ^ 0xAB6D06AC);
  unsigned int v82 = ((2 * v81) & 0xFA575FEE) + (v81 ^ v80 ^ 0x7D2BAE7C) - 2100015095;
  unsigned int v83 = ((v82 & 0xFFFFFFFE) + 612324504 + (~(2 * v82) | 0xB70156D3)) ^ 0x3FD7E5FA;
  int v84 = LODWORD(STACK[0x5D0]) ^ 0x7706C9AF ^ LODWORD(STACK[0x600]);
  LODWORD(STACK[0x5F0]) = v79;
  *(_DWORD *)(a1 + 4LL * ((-48 - -31 * v83 - ((62 * v83) & 0xA0)) ^ 0xD0u)) = v84 ^ v79 ^ dword_1002367A0[((((1816501712 - 992175073 * v83 - ((-1984350146 * v83) & 0xD88B3BA0)) ^ v47 ^ v7 ^ v10) & 0xCD ^ 0x40123744) + (((1816501712 - 992175073 * v83 - ((-1984350146 * v83) & 0xD88B3BA0)) ^ v47 ^ v7 ^ v10) & (v80 ^ 0x1B9) ^ 0x2004011) - 1) ^ 0x42127775];
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * (v80 ^ 0x2C)) - 4LL))();
}

void sub_100127528()
{
}

uint64_t sub_100127538()
{
  LODWORD(STACK[0x5E0]) = v1;
  unint64_t v2 = (v0 ^ 0x17Au) + 458;
  int v3 = malloc(0x404uLL);
  STACK[0xAD0] = (unint64_t)v3;
  STACK[0x648] = v2;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + (int)(((v3 != 0LL) * (v2 ^ 0x5EA)) ^ v0)) - 12))();
}

uint64_t sub_100127584(uint64_t a1)
{
  LODWORD(STACK[0x5D0]) = v3;
  int v5 = LODWORD(STACK[0x498]) ^ LODWORD(STACK[0x5B8]);
  LODWORD(STACK[0x418]) = v5;
  unsigned int v6 = ((v5 ^ 0x384DD18C) - ((2 * (v5 ^ 0x384DD18C) - 320007762) & 0xD0055332) + 1585001072) ^ 0x58932E3B;
  unsigned int v7 = ((v6 - ((2 * v6 - 320007762) & 0xD0055332) + 1585001072) ^ 0xE802A999) + (LODWORD(STACK[0x5B0]) ^ 0x8F715FB3);
  unsigned int v8 = ((((unsigned __int16)LODWORD(STACK[0x610]) >> 9) ^ 0xFFFFFFF3)
      - 1239829693
      + ((2 * ((unsigned __int16)LODWORD(STACK[0x610]) >> 9)) | 0x93CC997C)) ^ 0x8B5A6C76;
  int v9 = (((LODWORD(STACK[0x480]) << 7) ^ 0x3EAFCC80) + 589449753) ^ 0x23224A19 | (v4 >> 9) ^ 0x4C;
  int v10 = v9 - ((2 * v9) & 0xBE) + 223;
  unsigned int v11 = ((v8 | 0x66B0A973) - (v8 | 0x994F568C) - 1722853748) ^ 0xA40C89D0 | (((LODWORD(STACK[0x47C]) << 7) ^ 0x30E66780)
                                                                           + 615423741) ^ 0x24AE9EFD;
  int v12 = v11 - ((2 * v11) & 0xB2) + 217;
  unsigned int v13 = (((((2 * v7) & 0xFF77BFFC) + (v7 ^ 0xFFBBDFFE)) & 0xFFFFFFFE)
       - ((2 * (((2 * v7) & 0xFF77BFFC) + (v7 ^ 0xFFBBDFFE)) + 8929284) & 0x788EAA6C)
       - 1131711175) ^ 0x8E01B774;
  HIDWORD(v14) = v12 ^ v10 ^ 0x22;
  LODWORD(v14) = (v12 ^ ~v10) << 24;
  int v15 = LODWORD(STACK[0x470]) ^ ((((v14 >> 31) - ((2 * (v14 >> 31)) & 0x6A) - 75) ^ 0xB5)
                               - ((2 * (((v14 >> 31) - ((2 * (v14 >> 31)) & 0x6A) - 75) ^ 0xB5)) & 0x184)
                               - 1052510014);
  int v16 = 1447314827 * v13 - 1858777656;
  LODWORD(STACK[0x5B0]) = v2 ^ v1;
  int v17 = (v15 ^ (v16 - ((22 * v13) & 0x90)));
  unsigned int v18 = ((((v17 ^ 0x68AAF889) << (v2 ^ 0x18)) & 0x8141D006) - (v17 ^ 0x68AAF889) - 1206185476) ^ 0xC2E1A915;
  int v19 = dword_100215390[((v17 ^ 0x13840C2)
                       + ((v15 ^ (v16 - ((-1400337642 * v13) & 0x226A9B90))) & 0xA2 ^ 0x4828E20)
                       - ((v17 ^ 0x13840C2) & 0x3000A2)) ^ 0x58ACE7D];
  int v20 = ((((2 * v18) & 0x1FA6DF8C) - v18 - 1339256775) ^ 0x7698B663) + (v17 ^ 0xF3);
  *(_DWORD *)(a1 + 4LL * ((v16 - ((22 * v13) & 0x90)) ^ 0xC8u)) = LODWORD(STACK[0x658]) ^ LODWORD(STACK[0x650]) ^ LODWORD(STACK[0x660]) ^ v19 ^ 0xA4262DD0 ^ (v20 - ((2 * v20) & 0x1722021C) - 1953431282);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + v2) - 4))();
}

void sub_10012790C()
{
}

uint64_t sub_100127928@<X0>(int a1@<W8>)
{
  uint64_t v2 = (v1 + a1) & 0xAD4FFCB;
  free((void *)STACK[0xAB0]);
  free((void *)STACK[0xAD8]);
  free((void *)STACK[0xAA8]);
  free((void *)STACK[0xAF0]);
  free((void *)STACK[0xAC0]);
  free((void *)STACK[0xAD0]);
  free((void *)STACK[0xAE0]);
  free((void *)STACK[0xAE8]);
  if (LODWORD(STACK[0xACC])) {
    int v3 = -42885;
  }
  else {
    int v3 = 0;
  }
  unint64_t v4 = STACK[0xA28];
  STACK[0xAA0] += v2 ^ 0xFFFFFFFFFFFFFF2BLL;
  return ((uint64_t (*)(unint64_t))((char *)*(&off_10025C670 + (int)((1132 * (v3 == 0)) ^ v2)) - 8))(v4);
}

_BYTE *sub_1001279D0@<X0>(_BYTE *result@<X0>, int a2@<W8>)
{
  result[17] ^= v8 ^ 0xBD;
  result[18] ^= v9 ^ 0x7D;
  result[19] ^= v10 ^ 0x1A;
  result[20] ^= v11 ^ 0x25;
  _DWORD *v7 = 1711260690;
  void *v2 = result;
  *int v3 = (a2 + 1579) ^ v6 ^ 0x160106B1;
  void *v4 = v7;
  *(_DWORD *)(v5 + 56) = 0;
  return result;
}

uint64_t sub_100127A7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  STACK[0x658] = 0LL;
  unsigned int v10 = (v8 + 1376) ^ 0xFFFFF515 ^ (((*(unsigned __int8 *)(a4 + a2 + v9 - 1812025378)
  int v11 = *(unsigned __int8 *)(a4 + a2 + v9 - 1812025377);
  unsigned int v12 = (v10 - ((2 * v10) & 0xFFFFAA00) - 10903) ^ 0xFFFFD569 | (v11 - ((2 * v11) & 0x146) - 9309) ^ 0xFFFFDBA3;
  int v13 = (v12 - ((2 * v12) & 0x6CCA) - 18843) ^ 0xB665;
  int v14 = ((unsigned __int16)v13 ^ 0x7E7FF5F5) + ((2 * v13) & 0x1EBEA) - 840003712;
  unint64_t v15 = ((v7 + 242139981) | ((unint64_t)((v7 + 242139981) < 0x1A766983) << 32))
      + v9
      - 443967875;
  int v16 = (((*(unsigned __int8 *)v15 - ((2 * *(unsigned __int8 *)v15) & 0x7A)) << 8) + 15616) ^ 0x3D00;
  LODWORD(v15) = (v16 - ((2 * v16) & 0x5600) + 11011) ^ 0x2B03 | (*(unsigned __int8 *)(v15 + 1)
  LODWORD(v15) = (v15 - ((2 * v15) & 0xDEF4) - 4230) ^ 0xEF7A;
  LODWORD(STACK[0x648]) = ((unsigned __int16)v15 ^ 0x77FF657F) + ((2 * v15) & 0xCAFE) - 881213464;
  LODWORD(STACK[0x650]) = v14;
  return (*(uint64_t (**)(void))(a7
                              + 8LL
                              * ((1140
                                * (*(unsigned __int8 *)(v9 + (v7 + 850440383 + v14 + 1960387480)) == 128)) ^ v8)))();
}

uint64_t sub_100127C9C@<X0>(int a1@<W8>)
{
  int v6 = 519 * (v2 ^ 0xB6);
  STACK[0x658] = v4 + (v1 + v6);
  uint64_t v8 = fclose(v3);
  STACK[0x990] = v5;
  STACK[0x730] = STACK[0x658];
  LODWORD(STACK[0x86C]) = STACK[0x650];
  LODWORD(STACK[0xA20]) = STACK[0x648];
  return ((uint64_t (*)(uint64_t))((char *)*(&off_10025C670
                                                    + (((a1 == (((v6 - 1512) | 0x482) ^ 0x4AF)) * (v6 ^ 0x6C3)) ^ v6))
                                          - 8))(v8);
}

void sub_100127D38()
{
}

uint64_t sub_100127D9C()
{
  _DWORD *v2 = v2[623];
}

uint64_t sub_100127DF0()
{
  uint64_t v4 = 4LL * (v2 - 945548622);
  unsigned int v5 = *((_DWORD *)&xmmword_100273C44 + (v2 - 945548623));
  int v6 = (*(_DWORD *)((char *)&xmmword_100273C44 + v4) ^ 0x4D37A0C2 ^ (1566083941 * (v5 ^ 0x1D5D65FB ^ (v5 >> 30))
                                                                   - ((-1162799414 * (v5 ^ 0x1D5D65FB ^ (v5 >> 30))) & 0xA0D58A72)
                                                                   + 1349174585))
     - v2;
  *(_DWORD *)((char *)&xmmword_100273C44 + v4) = v6 - ((2 * v6 + 817355420) & 0x3ABACBF6) + 1438208841;
  unint64_t v7 = 516615401
     * ((((v3 - 192) | 0x5642CE80E520FB21LL) - (v3 - 192) + ((v3 - 192) & 0xA9BD317F1ADF04D8LL)) ^ 0xDEFE46FB9643FD13LL);
  *(void *)(v3 - 176) = (v2 - 580974362) ^ v7;
  *(_DWORD *)(v3 - 16_Block_object_dispose(va, 8) = (v0 - 655775285) ^ v7;
  *(void *)(v3 - 160) = v7 + 364574259;
  *(_DWORD *)(v3 - 19fseek(v0, 0LL, 2) = v7 | 1;
  *(_DWORD *)(v3 - 18_Block_object_dispose(va, 8) = v0 - 655775199 - v7;
  *(_DWORD *)(v3 - 15fseek(v0, 0LL, 2) = (v0 - 185257467) ^ v7;
  *(_DWORD *)(v3 - 14_Block_object_dispose(va, 8) = ((v0 - 655775199) ^ 0x83) + v7;
  uint64_t v8 = sub_1000AF0AC(v3 - 192);
  return ((uint64_t (*)(uint64_t))(*(void *)(v1 + 8LL * *(int *)(v3 - 184)) - 12LL))(v8);
}

uint64_t sub_100127F7C()
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL
                              * (((v0 >= 0x15BAF633) * ((LODWORD(STACK[0x660]) - 1982779075) & 0x762ECD7C ^ 0x501)) ^ (LODWORD(STACK[0x660]) - 557))))();
}

uint64_t sub_100127FD0()
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL
                              * (((v0 <= ((LODWORD(STACK[0x660]) - 538) ^ 0x15BAFCCAu)) * (LODWORD(STACK[0x660]) ^ 0x6BF)) ^ (LODWORD(STACK[0x660]) - 557))))();
}

uint64_t sub_100128014()
{
  LODWORD(xmmword_100273C44) = -1654823429;
  free((void *)STACK[0x650]);
  return sub_1001378C8(v1, v2, v3, v4, v5, v0);
}

uint64_t sub_100128080@<X0>(uint64_t a1@<X1>, int a2@<W2>, int a3@<W8>)
{
  int v7 = a2 ^ 0x25F;
  uint64_t v8 = a2 ^ 0x671u;
  v9.i64[0] = 0x6060606060606060LL;
  v9.i64[1] = 0x6060606060606060LL;
  v10.i64[0] = 0x3030303030303030LL;
  v10.i64[1] = 0x3030303030303030LL;
  *(int8x16_t *)(v4 + a3 + (v8 ^ v5)) = vaddq_s8(vsubq_s8(*v3, vandq_s8(vaddq_s8(*v3, *v3), v9)), v10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6
                                                              + 8LL * ((281 * (((a1 + 1) & 0x1FFFFFFF0LL) == 16)) ^ v7)))( ((a1 + 1) & 0x1FFFFFFF0LL) - 16,  (a1 + 1) & 0x1FFFFFFF0LL,  v8);
}

void sub_1001280EC()
{
}

uint64_t sub_1001280F8(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(v4 + 8LL * ((((a3 - 465750595) & 0x1BC2CADF ^ ((a3 ^ 0x210) + 622)) * (v3 == a2)) ^ a3)))();
}

uint64_t sub_10012813C(int a1)
{
  LODWORD(STACK[0x6C4]) = v1;
  STACK[0x810] = *(void *)(v2 + 8LL * a1);
  return sub_100139C94();
}

uint64_t sub_100128150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v8 = (LODWORD(STACK[0x660]) - 1318558917) & 0x4E9797FA;
  int8x16_t v9 = (int8x16_t)vld1q_dup_f32((const float *)v6);
  v10.i64[0] = 0x8000000080000000LL;
  v10.i64[1] = 0x8000000080000000LL;
  v11.i64[0] = 0x8000000080000000LL;
  v11.i64[1] = 0x8000000080000000LL;
  v12.i64[0] = -1LL;
  v12.i64[1] = -1LL;
  v7.i64[0] = *(void *)(v6 + 4);
  v7.i32[2] = *(_DWORD *)(v6 + 12);
  int8x16_t v13 = vextq_s8(v9, v7, 0xCuLL);
  int8x16_t v14 = v7;
  v14.i32[3] = *(_DWORD *)(v6 + 16);
  int32x4_t v15 = (int32x4_t)veorq_s8( (int8x16_t)vaddq_s32( (int32x4_t)vorrq_s8( veorq_s8( vandq_s8(v14, (int8x16_t)vdupq_n_s32(0x7FFFFFFEu)),  (int8x16_t)vdupq_n_s32(0x7EBF71D1u)),  vandq_s8( (int8x16_t)vaddq_s32( (int32x4_t)veorq_s8( (int8x16_t)vsubq_s32( vdupq_n_s32(0x4B92601Cu),  (int32x4_t)vorrq_s8(v13, v10)),  (int8x16_t)vdupq_n_s32(0x844B8FEA)),  vdupq_n_s32(0x17140B8Au)),  v11)),  v12),  (int8x16_t)vdupq_n_s32(0x63E2142Au));
  v16.i32[0] = *((_DWORD *)&STACK[0x1590] + ((*(_DWORD *)(v6 + 4) & 1) == 0));
  v16.i32[1] = *((_DWORD *)&STACK[0x1590] + ((*(_DWORD *)(v6 + 8) & 1) == 0));
  v16.i32[2] = *((_DWORD *)&STACK[0x1590] + (~*(_DWORD *)(v6 + 12) & 1LL));
  v16.i32[3] = *((_DWORD *)&STACK[0x1590] + (~v14.i32[3] & 1LL));
  *(int8x16_t *)uint64_t v6 = veorq_s8( veorq_s8(veorq_s8(*(int8x16_t *)(v6 + 1588), v16), (int8x16_t)vdupq_n_s32(0xC55F6C8u)),  (int8x16_t)vshrq_n_u32( (uint32x4_t)vaddq_s32( vsubq_s32( v15,  (int32x4_t)vandq_s8( (int8x16_t)vaddq_s32(v15, v15),  (int8x16_t)vdupq_n_s32(0x7FC9A478u))),  vdupq_n_s32(0xBFE4D23D)),  1uLL));
  return ((uint64_t (*)(void))(*(void *)(a6 + 8LL * (v8 ^ 0x21Au)) - 4LL))();
}

uint64_t sub_1001282F4@<X0>(int a1@<W3>, uint64_t a2@<X5>, unsigned int a3@<W8>)
{
  int v8 = (unsigned int *)(v5 + 4 * (v4 + v6));
  unsigned int v9 = ((1267884060 - (v3 | 0x7FFFFFFF)) ^ 0x844B8FEA) + 387189642;
  unsigned int v10 = v8[1];
  unsigned int v11 = (((v10 & 0x7FFFFFFE ^ a1) - 1) & 0x7FFFFFFE | v9 & 0x80000000) ^ 0x63E2142A;
  *int v8 = v8[397] ^ *((_DWORD *)&STACK[0x1590] + ((v10 & 1) == 0)) ^ ((v11 - ((2 * v11) & 0x7FC9A478) - 1075523011) >> 1) ^ 0xC55F6C8;
  return ((uint64_t (*)(void))(*(void *)(a2 + 8LL * ((114 * (v4 + ((a3 + 714) | 0x200) - 1665 == v7 + 3)) ^ a3)) - 4LL))();
}

uint64_t sub_1001283CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v10 = (const float *)&v8[56].i32[3];
  int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v10);
  int32x4_t v12 = vdupq_n_s32(0xAF7394DC);
  v13.i64[0] = 0x8000000080000000LL;
  v13.i64[1] = 0x8000000080000000LL;
  v9.i64[0] = v8[57].i64[0];
  v9.i32[2] = v8[57].i32[2];
  int8x16_t v14 = vextq_s8(v11, v9, 0xCuLL);
  int8x16_t v15 = v9;
  v15.i32[3] = v8[57].i32[3];
  int8x16_t v16 = (int8x16_t)vaddq_s32( (int32x4_t)veorq_s8( (int8x16_t)vaddq_s32( (int32x4_t)veorq_s8( vandq_s8(v14, v13),  (int8x16_t)vdupq_n_s32(0xCA64FAD4)),  vdupq_n_s32(0xE5255329)),  (int8x16_t)vdupq_n_s32(0xEE0AEFDC)),  vdupq_n_s32(0x37D52921u));
  int8x16_t v17 = veorq_s8(vandq_s8(v15, (int8x16_t)vdupq_n_s32(0x7FFFFFFEu)), (int8x16_t)vdupq_n_s32(0x319C6806u));
  int32x4_t v18 = (int32x4_t)veorq_s8( (int8x16_t)vaddq_s32( vsubq_s32( (int32x4_t)vorrq_s8(v17, (int8x16_t)vdupq_n_s32(0x508C6B23u)),  (int32x4_t)vorrq_s8(v17, (int8x16_t)v12)),  v12),  (int8x16_t)vdupq_n_s32(0x700D67CBu));
  int32x4_t v19 = (int32x4_t)veorq_s8( (int8x16_t)vaddq_s32( vsubq_s32( (int32x4_t)vandq_s8( (int8x16_t)vaddq_s32(v18, v18),  (int8x16_t)vdupq_n_s32(0x645C3E22u)),  v18),  vdupq_n_s32(0xCDD1E0EE)),  (int8x16_t)vdupq_n_s32(0xC191E1FA));
  v20.i32[0] = *(_DWORD *)(v6 + 4LL * ((v8[57].i32[0] & 1) == 0));
  v20.i32[1] = *(_DWORD *)(v6 + 4LL * ((v8[57].i32[1] & 1) == 0));
  v20.i32[2] = *(_DWORD *)(v6 + 4 * (~v8[57].i32[2] & 1LL));
  v20.i32[3] = *(_DWORD *)(v6 + 4 * (~v15.i32[3] & 1LL));
  *(int8x16_t *)((char *)v8 + 4 * (v7 - 1070) - 1476) = veorq_s8( veorq_s8( veorq_s8(*v8, v20),  (int8x16_t)vdupq_n_s32(0x23121F4u)),  (int8x16_t)vshrq_n_u32( (uint32x4_t)vaddq_s32( vsubq_s32( (int32x4_t)vorrq_s8((int8x16_t)v19, vandq_s8(v16, v13)),  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v19, v19), (int8x16_t)vdupq_n_s32(0x465AF88Au))),  vdupq_n_s32(0xA32D7C45)),  1uLL));
  return (*(uint64_t (**)(void))(a6 + 8LL * ((v7 - 351) ^ 0xBC)))();
}

void sub_100128598()
{
}

uint64_t sub_1001285A4@<X0>(uint64_t a1@<X5>, int a2@<W8>)
{
  unsigned int v3 = (((((2 * (a2 ^ 0x6E81706D ^ *v2 & 0x7FFFFFFE)) & 0xAFCAE6AC) - (a2 ^ 0x6E81706D ^ *v2 & 0x7FFFFFFE) + 672828584) ^ 0x61D86659)
      - 1) ^ 0x3A1EFD32;
  v2[623] = v2[396] ^ *((_DWORD *)&STACK[0x1590] + ((*v2 & 1) == 0)) ^ (((v3 | ((v2[623] & 0x80000000) - 1295977576) ^ 0xB2C0F398)
                                                                       - ((2 * v3) & 0xE806BB04)
                                                                       - 201106046) >> 1) ^ 0x29A63117;
  return ((uint64_t (*)(void))(*(void *)(a1
                                        + 8LL
                                        * (((4 * (LODWORD(STACK[0x9A4]) < 0x270)) | (32 * (LODWORD(STACK[0x9A4]) < 0x270))) ^ a2))
                            - 4LL))();
}

uint64_t sub_100128688()
{
  int v4 = LODWORD(STACK[0x9A4])++;
  *(_DWORD *)(v1 + 312_Block_object_dispose(va, 8) = v4 + 1227344547;
  uint64_t v5 = (dword_100273C40 - 1197679816);
  unint64_t v6 = 516615401 * ((v2 - ((v3 - 192) | v2) + ((v3 - 192) | 0x73BE0EBFEFBDFE6DLL)) ^ 0xFB0286C49CDEF85FLL);
  *(void *)(v3 - 160) = v6 + 4147057422u;
  *(void *)(v3 - 176) = v5 ^ v6;
  *(_DWORD *)(v3 - 16_Block_object_dispose(va, 8) = v6 ^ (v0 - 2132636614) ^ 0x70;
  *(_DWORD *)(v3 - 19fseek(v0, 0LL, 2) = v6 + 1;
  *(_DWORD *)(v3 - 18_Block_object_dispose(va, 8) = v0 - 2132636614 - v6;
  *(_DWORD *)(v3 - 15fseek(v0, 0LL, 2) = (v0 - 185257467) ^ v6;
  *(_DWORD *)(v3 - 14_Block_object_dispose(va, 8) = ((v0 - 2132636614) ^ 0x44) + v6;
  uint64_t v7 = sub_1000AF0AC(v3 - 192);
  return ((uint64_t (*)(uint64_t))*(&off_10025C670 + *(int *)(v3 - 184)))(v7);
}

void sub_100128780()
{
  if (v0 >= v1) {
    int v3 = dword_100273C40 + 1;
  }
  else {
    int v3 = v2;
  }
  dword_100273C40 = v3;
  JUMPOUT(0x1001288E8LL);
}

uint64_t sub_10012896C(int a1)
{
  return (*(uint64_t (**)(void))(v3 + 8LL * (((v1 + 8 == a1) * (((2 * v2) ^ 0x45E) + 6 * (v2 ^ 0x1AB) - 2821)) ^ v2)))();
}

uint64_t sub_1001289A8(uint64_t a1, uint64_t a2, int a3)
{
  LODWORD(STACK[0x620]) = a3;
  STACK[0x1590] = 0xCAAF2F0953A79FD6LL;
  LODWORD(STACK[0x9A4]) = dword_100273C38 - 1227344546;
  uint64_t v7 = dword_100273C40;
  unint64_t v8 = ((((2 * (v6 - 192)) | 0x7CACD15A334DE292LL) - (v6 - 192) - 0x3E5668AD19A6F149LL) ^ 0xD342FF3657CF27B7LL) * v4;
  *(_DWORD *)(v6 - 160) = v8 + v3 + 1123495911;
  *(_DWORD *)(v6 - 156) = v8;
  *(_DWORD *)(v6 - 180) = v3 + 209787347 + v8;
  *(void *)(v6 - 176) = v7 - v8;
  *(void *)(v6 - 16_Block_object_dispose(va, 8) = v8 ^ v5;
  *(_DWORD *)(v6 - 18_Block_object_dispose(va, 8) = (v3 + 209787356) ^ v8;
  *(_DWORD *)(v6 - 184) = v8 ^ (v3 + 209787347) ^ 0x1D;
  uint64_t v9 = sub_1001DD4A8(v6 - 192);
  return ((uint64_t (*)(uint64_t))((char *)*(&off_10025C670 + *(int *)(v6 - 192)) - 4))(v9);
}

uint64_t sub_100128A9C()
{
  int v1 = LODWORD(STACK[0x660]) - 241;
  STACK[0x650] = (unint64_t)malloc(STACK[0x5E8]);
  uint32_t v2 = arc4random();
  unsigned int v3 = v2 + (v1 ^ 0x1D5D606A) - ((2 * v2) & 0x3ABACBF6);
  LODWORD(xmmword_100273C44) = v3;
  int v4 = v3 ^ 0x1D5D65FB ^ (v3 >> ((2 * v1) ^ 0x3C));
  *(_DWORD *)(v0 + 4) = ((1812433253 * v4) ^ 0x6AFFF3F9)
                      + ((-670100790 * v4) & 0xD5FFE7F2)
                      - 1302498813
                      - ((2 * (((1812433253 * v4) ^ 0x6AFFF3F9) + ((-670100790 * v4) & 0xD5FFE7F2)) - 1442834416) & 0x3ABACBF6);
  return ((uint64_t (*)(uint64_t))((char *)*(&off_10025C670 + v1) - 4))(1285517069LL);
}

void sub_100128BB8()
{
}

uint64_t sub_100128BD4@<X0>(int a1@<W8>)
{
  int v4 = v1 ^ 0x590;
  LODWORD(STACK[0x9A4]) = a1 + 1;
  gettimeofday((timeval *)STACK[0x5E0], 0LL);
  int v5 = LODWORD(STACK[0xBB8]) + v2 - ((2 * LODWORD(STACK[0xBB8])) & 0x3ABACBF6);
  LODWORD(STACK[0xBA8]) = LODWORD(STACK[0xBB0]) + v2 - ((2 * LODWORD(STACK[0xBB0])) & 0x3ABACBF6);
  LODWORD(STACK[0xBA4]) = v5;
  uint32_t v6 = arc4random();
  LODWORD(STACK[0xBAC]) = v6 + v2 - ((v4 ^ 0x3ABACD74) & (2 * v6));
  uint32_t v7 = arc4random();
  LODWORD(STACK[0xBA0]) = v7 + v2 - ((2 * v7) & 0x3ABACBF6);
  int v8 = ((2 * STACK[0x650]) & 0x58DFEFFE) + (STACK[0x650] ^ 0xAC6FF7FF);
  LODWORD(STACK[0x648]) = v8 - 298726567 + (~(2 * v8 + 656412674) | 0xCABC7951);
  LODWORD(STACK[0x640]) = LODWORD(STACK[0x660]) - 382857805;
  int v9 = (DWORD1(xmmword_100273C44) ^ 0x2DC91DB9 ^ (1664525
                                                * (xmmword_100273C44 ^ v2 ^ (xmmword_100273C44 >> 30))
                                                - ((3329050
                                                  * (xmmword_100273C44 ^ v2 ^ (xmmword_100273C44 >> 30))) & 0x6128F084)
                                                + 815036482))
     + (*(_DWORD *)STACK[0x658] ^ v2);
  unsigned int v10 = (v9 ^ 0xD2EFFCB0) + 1875506962 + ((2 * v9) & 0xA5DFF960);
  DWORD1(xmmword_100273C44) = v10 - ((2 * v10 + 982259836) & 0x3ABACBF6) - 626822599;
  unint64_t v11 = 516615401
      * ((~((v3 - 192) | 0xAFE6AC81552A45E8LL) + ((v3 - 192) & 0xAFE6AC81552A45E8LL)) ^ 0xD8A5DB05D9B6BC25LL);
  *(void *)(v3 - 160) = v11 + 636925545;
  *(_DWORD *)(v3 - 19fseek(v0, 0LL, 2) = v11 + 1;
  *(_DWORD *)(v3 - 18_Block_object_dispose(va, 8) = v4 - 1453072791 - v11;
  *(void *)(v3 - 176) = v11 ^ 0x25F6B66B;
  *(_DWORD *)(v3 - 16_Block_object_dispose(va, 8) = v11 ^ (v4 - 1453072791) ^ 6;
  *(_DWORD *)(v3 - 15fseek(v0, 0LL, 2) = (v4 - 185257467) ^ v11;
  *(_DWORD *)(v3 - 14_Block_object_dispose(va, 8) = v11 + v4 - 1453072791 - 75;
  uint64_t v12 = sub_1000AF0AC(v3 - 192);
  return ((uint64_t (*)(uint64_t))*(&off_10025C670 + *(int *)(v3 - 184)))(v12);
}

uint64_t sub_100128EEC()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * ((LODWORD(STACK[0x660]) - 1429) ^ ((4 * (v1 >= 0x25F6B669)) | (16 * (v1 >= 0x25F6B669)))))
                            - 4LL))();
}

uint64_t sub_100128F20()
{
  unint64_t v2 = (-(uint64_t)((~(unint64_t)(LODWORD(STACK[0x660]) + 636924502) + v1) ^ (~(LODWORD(STACK[0x660])
                                                                                                  + 636924502)
                                                                                                + v1)) | (~(unint64_t)(LODWORD(STACK[0x660]) + 636924502) + v1)) >> 63;
}

uint64_t sub_100128F74()
{
  LODWORD(xmmword_100273C44) = dword_100274600;
  *(_DWORD *)(v7 - 164) = -1231242048 - v6 + v0;
  *(void *)(v7 - 19fseek(v0, 0LL, 2) = (v5 - 2144747187) + v6;
  *(void *)(v7 - 160) = v3;
  *(_DWORD *)(v7 - 17fseek(v0, 0LL, 2) = v6 + v1 + 4;
  *(_DWORD *)(v7 - 16_Block_object_dispose(va, 8) = v1 ^ v6;
  *(_DWORD *)(v7 - 180) = v6;
  *(_DWORD *)(v7 - 176) = v4 ^ v6;
  uint64_t v8 = sub_10013ACFC(v7 - 192);
  return ((uint64_t (*)(uint64_t))(*(void *)(v2 + 8LL * *(int *)(v7 - 184)) - 4LL))(v8);
}

uint64_t sub_100128FEC()
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL * (((v0 < (STACK[0x640] & 0x16D1EFCE ^ 0xEFF3BC5A)) * (v2 - 1472)) ^ (v2 - 1044))))();
}

uint64_t sub_10012902C()
{
  int v4 = (v0 - 1317957637) & 0x4E8E6ECF;
  *(_DWORD *)(STACK[0x658] + 4LL * (v3 - 1875506961)) ^= *(_DWORD *)(STACK[0x650]
                                                                                 + 4LL * (v3 - 1875506961)) ^ (v4 - 1620499030);
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((477
}

void sub_10012916C()
{
}

uint64_t sub_100129178()
{
  *uint64_t v1 = v1[623];
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((311 * (v3 - 1 == ((v0 + 1312975764) | 0x90100408) + 994728524)) ^ (v0 - 947)))
                            - 4LL))();
}

uint64_t sub_1001291D8@<X0>(int a1@<W8>)
{
  uint64_t v4 = 4LL * (v1 - 1824818057);
  unsigned int v5 = *((_DWORD *)&xmmword_100273C44 + (v1 - 1824818058));
  int v6 = (*(_DWORD *)((char *)&xmmword_100273C44 + v4) ^ 0xFC768E9F ^ (1566083941
                                                                   * (v5 ^ 0x6A9ECC27 ^ ((v5 >> 30) | 0x77C3A9DC))
                                                                   - ((-1162799414
                                                                     * (v5 ^ 0x6A9ECC27 ^ ((v5 >> 30) | 0x77C3A9DC))) & 0xC257D6C8)
                                                                   - 517215388))
     - v1;
  *(_DWORD *)((char *)&xmmword_100273C44 + v4) = v6 - ((2 * v6 + 428410642) & 0x3ABACBF6) - 1977489020;
  unint64_t v7 = 1606104089 * ((v3 - 192) ^ 0xC2BEFB347517423ELL);
  *(void *)(v3 - 160) = 1168281337 - v7;
  int v8 = (a1 + 1085921235) ^ v7;
  *(_DWORD *)(v3 - 180) = v7;
  *(_DWORD *)(v3 - 176) = v8 ^ 0x5E;
  *(_DWORD *)(v3 - 16_Block_object_dispose(va, 8) = v8;
  *(_DWORD *)(v3 - 164) = -1231242048 - v7 + a1;
  *(_DWORD *)(v3 - 17fseek(v0, 0LL, 2) = ((a1 + 1085921235) ^ 0x2F) + v7;
  *(void *)(v3 - 19fseek(v0, 0LL, 2) = (v1 - 656536719) + v7;
  uint64_t v9 = sub_10013ACFC(v3 - 192);
  return (*(uint64_t (**)(uint64_t))(v2 + 8LL * *(int *)(v3 - 184)))(v9);
}

uint64_t sub_100129330()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((LODWORD(STACK[0x660]) - 1009) ^ (90 * (v0 < 0x45A28EF9)))) - 4LL))();
}

uint64_t sub_100129360()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((LODWORD(STACK[0x660]) - 1009) ^ (90 * (v0 > 0x45A29168)))) - 4LL))();
}

void sub_100129394()
{
  LODWORD(xmmword_100273C44) = -1654823429;
  free((void *)STACK[0x650]);
  JUMPOUT(0x100128154LL);
}

uint64_t sub_10012940C()
{
  STACK[0x870] = 32LL;
  STACK[0x808] = v0;
  STACK[0x708] = STACK[0x650];
  return sub_100134EF8(-12LL);
}

uint64_t sub_100129440()
{
  LODWORD(STACK[0x650]) = v2;
  unsigned int v3 = (v1 + 1846751217) & 0x91ECCFBE;
  int v4 = dword_100274AD0;
  STACK[0x658] = qword_1002748C8;
  unsigned int v5 = *(unsigned __int8 **)(v0 + 8);
  int v6 = *v5;
  unint64_t v7 = -1263679611
     * ((((v5 ^ *(_DWORD *)(STACK[0x658] + (int)((v3 - 593721846) & v4))) & 0x7FFFFFFF)
       * ((((v3 - 797) | 0x4D4) - 1008) ^ 0xB4ADC680)) ^ ((((v5 ^ *(_DWORD *)(STACK[0x658]
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + (int)((1764
}

uint64_t sub_1001295A4( int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int8x16_t v15 = (char *)(v13 + (v8 ^ 0x3BFD9D3F) - 1006476607 + ((a3 + 2012952951) & a1));
  char v16 = *v15;
  unint64_t v17 = ((((v15 ^ v14) & 0x7FFFFFFF) * v9) ^ ((((v15 ^ v14) & 0x7FFFFFFF) * v9) >> 16)) * v9;
  return ((uint64_t (*)(uint64_t, void))(*(void *)(v10
                                                              + 8LL
                                                              * ((1558
                                                                * ((char)(*(_BYTE *)(a7 + (v17 >> (a3 ^ 0x1Du))) ^ v16 ^ *(_BYTE *)((v17 >> (a3 ^ 0x1Du)) + a8 + 3) ^ *(_BYTE *)((v17 >> (a3 ^ 0x1Du)) + v11 + 2) ^ v17 ^ ((v17 >> (a3 ^ 0x1Du)) * v12)) > 47)) ^ a3))
                                                  - 4LL))( 1373783571LL,  (a3 + 1405));
}

uint64_t sub_100129654(uint64_t a1, uint64_t a2, int a3, unsigned __int8 a4)
{
  return (*(uint64_t (**)(void))(v4
                              + 8LL
                              * (((a4 < ((a3 ^ 0x82) - 77)) * ((a3 ^ 0x782) - 1634)) ^ a3 ^ 0x782)))();
}

uint64_t sub_10012969C(int a1, uint64_t a2, int a3)
{
  uint64_t v11 = (_BYTE *)(v9 + (int)((v3 ^ v6) + a1 + 38 + ((v3 << ((a1 + 79) ^ 0xD7)) & 0xFCFFFEEC) - 2122319394));
  unint64_t v12 = ((((v11 ^ v10) & 0x7FFFFFFF) * v4) ^ ((((v11 ^ v10) & 0x7FFFFFFF) * v4) >> 16)) * v4;
  return (*(uint64_t (**)(void))(v7
                                           + 8LL
                                           * ((1957
                                             * ((char)(v12 ^ *v11 ^ *(_BYTE *)(v5 + (v12 >> 24)) ^ byte_100215CA0[v12 >> 24] ^ *(_BYTE *)(v8 + (v12 >> 24)) ^ (17 * BYTE3(v12))) > 47)) ^ (a1 - 1383))))((a3 - 637382647));
}

uint64_t sub_1001298A8( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ((uint64_t (*)(void))(*(void *)(v8
                                        + 8LL
                                        * ((((char)(a2 ^ v12 ^ (a5 * v10) ^ *(_BYTE *)(a7 + a3) ^ *(_BYTE *)(a8 + a3 + 3) ^ *(_BYTE *)(v9 + (a2 >> 24) + 2)) < 58)
                                          * ((833 * (v11 ^ 0x6AF)) ^ 0x6EB)) ^ v11))
}

uint64_t sub_10012991C(int a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6 = a4 - 397;
  BOOL v8 = a1 + 773700076 <= (int)(a4 ^ 0xFFFFF97D);
  signed int v7 = ((a4 - 1390) | 0x22A) ^ 0xFFFFFCC1;
  BOOL v8 = v8 && v4 + 1014302051 <= v7;
  int v9 = v8;
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * ((466 * v9) ^ v6)) - 12LL))();
}

uint64_t sub_100129B40(char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  char v13 = ((16 * a1 - (((16 * a1 - 64) & 0xD0 ^ (16 * a1) & 0x10) << (((v5 + 115) | 0x44) ^ 0xF4)) - 114) ^ 0xCE | (a5 - 49))
      - ((2
        * ((16 * a1 - (((16 * a1 - 64) & 0xD0 ^ (16 * a1) & 0x10) << (((v5 + 115) | 0x44) ^ 0xF4)) - 114) ^ 0xCE | (a5 - 49))) & 0xD6);
  int v14 = (_BYTE *)(v10 + v9 - 995949515);
  unint64_t v15 = ((((v14 ^ v12) & 0x7FFFFFFF) * v6) ^ ((((v14 ^ v12) & 0x7FFFFFFF) * v6) >> 16)) * v6;
  _BYTE *v14 = v15 ^ (17
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * (v5 ^ (176 * ((v9 - 995949514) < 0x14)))) - 12LL))();
}

void sub_100129C40()
{
}

uint64_t sub_100129C4C(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((((5 * (a2 ^ 0x4D6) - 155) ^ (7 * (a2 ^ 0x49E)))
                                          * (LODWORD(STACK[0x650]) == 0)) ^ a2))
                            - 12LL))();
}

uint64_t sub_100129C90@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
}

uint64_t sub_100129CCC(void *a1)
{
  int v5 = v2 ^ v1;
  free(a1);
  *(void *)(v3 + _Block_object_dispose(va, 8) = v4;
  *(_DWORD *)(v3 + 16) = 603954248;
  *(_DWORD *)uint64_t v3 = 65;
  STACK[0x890] = 1LL;
  BOOL v6 = container_system_group_path_for_identifier(0LL, "systemgroup.com.apple.pisco.suinfo", &STACK[0x890]) != 0;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + ((v6 * ((v5 - 1017) ^ 0x125)) ^ (v5 - 142))) - 12))();
}

uint64_t sub_100129D18(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = (a4 - 279);
  unint64_t v6 = STACK[0x910];
  unint64_t v7 = STACK[0x760];
  STACK[0xA08] = v5 + *(void *)(v4 + 8LL * (a4 - 1652)) - 1391;
  STACK[0x6F0] = v6;
  STACK[0x8F0] = v7;
  uint64_t v8 = *(_DWORD *)(v6 + 68) & 0x3F ^ ((a4 ^ 0x5D7u) + 503053463);
  uint64_t v9 = (2 * *(_DWORD *)(v6 + 68)) & 0x7ALL ^ 0x22;
  STACK[0x650] = v9 + v8 + 55601115;
  *(_BYTE *)(v6 + (v9 + v8 - 503054333)) = -80;
  return (*(uint64_t (**)(void))(v4 + 8LL * (int)((243 * ((v9 + v8 - 503054389) < 0xFFFFFFC8)) ^ v5)))();
}

uint64_t sub_100129D3C()
{
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + ((1100 * (STACK[0x820] == 0)) ^ v0)) - 12))();
}

void sub_100129DBC()
{
  *(_DWORD *)(v1 + 11fseek(v0, 0LL, 2) = v0 + 1768031168;
  *(void *)(v1 + 64) = v7;
  *(_DWORD *)(v1 + 7fseek(v0, 0LL, 2) = ((2 * (v4 ^ 0xF484)) & 0x1FBFE) + 2054916960 + ((98 * ((v0 - 1579) ^ 0x46)) ^ v4 ^ 0xADEF0FF9);
  *(void *)(v1 + 4_Block_object_dispose(va, 8) = v5;
  *(_DWORD *)(v1 + 56) = v6;
  *(_DWORD *)uint64_t v1 = 1711260691;
  *(_DWORD *)(v1 + 4) = v3;
  *(_DWORD *)(v2 + 56) = 0;
}

uint64_t sub_100129ED8()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * ((1008
                                          * ((*(unsigned int *)(STACK[0x9D0] + 112) ^ 0x7DFBFEB5BDDDE4B3LL)
                                           - 0x7DFBFEB58B53C1C9LL
}

uint64_t sub_100129FB4()
{
  BOOL v9 = v3 < v0;
  *(_BYTE *)(v5 + v7 - 0x62BF4538F69DF06CLL) = *(_BYTE *)(v4 + v2 - 0x63F2731D4E224A3BLL) - 99;
  if (v9 == v6 - 0x689EBD366E12E0C4LL < v0) {
    BOOL v9 = v6 - 0x689EBD366E12E0C4LL < v3;
  }
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((1008 * !v9) ^ v1)) - 8LL))();
}

uint64_t sub_10012A054()
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL
                              * ((1443 * (dword_100273C3C == ((313 * ((v0 + 926) ^ 0x3A5)) ^ 0x1CF4D12E))) ^ (v0 + 926))))();
}

uint64_t sub_10012A06C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ((uint64_t (*)(void))(*(void *)(a4
                                        + 8LL
                                        * (((v5 - 175)
                                          * ((v4 ^ 0x69DFFBFFDDEFFF7CLL)
                                           - 0x69DFFBFF33D55005LL
}

uint64_t sub_10012A10C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, int a4@<W8>)
{
  BOOL v9 = v5 < v4;
  *(_BYTE *)(v7 + a1 - 0x52409B5A06A5D9E9LL) = ((a4 + 39) & 0x9D)
                                             + *(_BYTE *)(v6 + a3 - 0x66FA53E4F828011FLL)
                                             - ((2 * *(_BYTE *)(v6 + a3 - 0x66FA53E4F828011FLL)) & 0xBC)
                                             - 63;
  if (v9 == v8 - 0x77F25AF5BE7781B4LL < v4) {
    BOOL v9 = v8 - 0x77F25AF5BE7781B4LL < v5;
  }
  return ((uint64_t (*)(void))(*(void *)(a2 + 8LL * ((41 * v9) ^ a4)) - 8LL))();
}

uint64_t sub_10012A1C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (v6 ^ 0x66F7F7DF) - 271000075 + (STACK[0x658] & 0x1EFBE);
  unint64_t v9 = v7 + v4 - 702118376;
  BOOL v10 = v9 < 0x383DC00F;
  unint64_t v11 = (v8 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v8 < 0x56D0D591) << 32)) - 512955774;
  int v12 = v10 ^ (v11 < 0x383DC00F);
  BOOL v13 = v11 <= v9;
  if (!v12) {
    BOOL v10 = v13;
  }
  return ((uint64_t (*)(void))(*(void *)(a4 + 8LL * (v5 ^ (906 * v10))) - 4LL))();
}

uint64_t sub_10012A284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  LODWORD(STACK[0x648]) = STACK[0x860];
  return sub_1000CFDC8(v9 + 12, 4294942180LL, v7, a4, 144LL, v8 - 1346280485, a7, -9816);
}

uint64_t sub_10012A34C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((uint64_t (*)(void))(*(void *)(a3
                                        + 8LL
                                        * ((42
                                          * ((v4 | ((unint64_t)(v4 < 0x1AB8F7CF) << 32))
                                           + 1923451596 != 67 * ((v3 - 744) ^ 0x38Bu) + 2371780136LL)) ^ (v3 - 744)))
                            - 12LL))();
}

uint64_t sub_10012A3E8@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, int a3@<W8>)
{
  BOOL v10 = v4 < v3;
  *(_BYTE *)(v7 + v9 - 0x62EFD5F2C490F45FLL) = (((2 * *(_BYTE *)(v6 + a2 - 0x7604C0E48B03D296LL)) & 0x8F)
                                              + (*(_BYTE *)(v6 + a2 - 0x7604C0E48B03D296LL) ^ 0xC7)) ^ 0x80;
  if (v10 == v8 - 0xFA96043415805B4LL < v3) {
    BOOL v10 = v8 - 0xFA96043415805B4LL < v4;
  }
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * ((v10 * v5) ^ a3)) - 12LL))();
}

uint64_t sub_10012A48C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LODWORD(STACK[0x640]) = STACK[0x860];
  LODWORD(STACK[0x648]) = *(unsigned __int16 *)(v4 + 92);
  return ((uint64_t (*)(void))(*(void *)(a3 + 8LL * ((230 * (dword_100273C3C == 485807923)) ^ v3))
                            - ((v3 - 1003) ^ 0x464u)
                            + 1252LL))();
}

uint64_t sub_10012A4E4()
{
  kern_return_t v1;
  uint64_t v1 = IOMainPort(0, (mach_port_t *)&STACK[0x96C]);
  return ((uint64_t (*)(void))*(&off_10025C670
                             + ((1375 * ((((v0 ^ 0x60A) + 1599829496) & (2 * v1)) + (v1 ^ 0x2FADBE3D) == 799915581)) ^ v0)))();
}

uint64_t sub_10012A53C()
{
  BOOL v1 = IOServiceMatching((const char *)&STACK[0x15B1]) != 0LL;
  return ((uint64_t (*)(void))*(&off_10025C670 + ((v1 * ((v0 + 1530) ^ 0x690)) | v0)))();
}

uint64_t sub_10012A574(const __CFDictionary *a1)
{
  kern_return_t MatchingServices;
  MatchingServices = IOServiceGetMatchingServices(STACK[0x96C], a1, (io_iterator_t *)&STACK[0x9FC]);
  return ((uint64_t (*)(void))*(&off_10025C670
                             + ((901
                               * (((((v1 - 370414089) & 0x161417F9) - 414408401) & (2 * MatchingServices))
                                + (MatchingServices ^ ((v1 ^ 0x60A) - 207205038)) == -207203372)) ^ v1)))();
}

void sub_10012A5F0()
{
}

uint64_t sub_10012A5F8()
{
  int v3 = (char *)&STACK[0xB80] + v2;
  *(_DWORD *)int v3 = LODWORD(STACK[0x640]) ^ 0x447574EF;
  *((_WORD *)v3 + fseek(v0, 0LL, 2) = LODWORD(STACK[0x648]) - 22113;
  *(_OWORD *)((char *)&STACK[0xB80] + v2 + 6) = *(_OWORD *)(v1 + 17);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + v0) - 213 * (v0 ^ 0x4EBu) + 1483))();
}

void sub_10012A678()
{
}

uint64_t sub_10012A680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return ((uint64_t (*)(void))(*(void *)(a7 + 8LL * ((11 * (((v8 == 738487159) ^ v7) & 1)) ^ v7)) - 4LL))();
}

uint64_t sub_10012A6B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  BOOL v10 = (v9 | ((unint64_t)(v9 < v8) << 32)) != 738487159;
  return ((uint64_t (*)(void))(*(void *)(a7 + 8LL * (v7 ^ ((2 * v10) | (8 * v10)))) - 4LL))();
}

uint64_t sub_10012A744@<X0>(_DWORD *a1@<X2>, void *a2@<X4>, uint64_t a3@<X6>, int a4@<W8>)
{
  kern_return_t v8;
  unint64_t v9;
  BOOL v10;
  a1[30] = v6 - 738487159;
  STACK[0x720] = 16LL;
  unsigned int v8 = IOConnectCallStructMethod(a4 - 485807923, 0x20u, a1, 0x7CuLL, a2, &STACK[0x720]);
  uint64_t v9 = STACK[0x720];
  BOOL v10 = v8 == ((v4 + 1737874356) & 0x986A235C ^ 0x118);
  STACK[0x870] = v5;
  if (v9 != 16) {
    BOOL v10 = 0;
  }
  return ((uint64_t (*)(void))(*(void *)(a3 + 8LL * ((1577 * v10) ^ v4)) - 4LL))();
}

uint64_t sub_10012A7E4()
{
  return ((uint64_t (*)(void))*(&off_10025C670
}

uint64_t sub_10012A830()
{
  STACK[0x820] = 256LL;
  LOBYTE(STACK[0xBD0]) = v0[12] ^ 0x90;
  LOBYTE(STACK[0xBD1]) = v0[13] ^ 0x90;
  LOBYTE(STACK[0xBD2]) = v0[14] ^ 0x90;
  LOBYTE(STACK[0xBD3]) = v0[15] ^ 0x90;
  LOBYTE(STACK[0xBD4]) = v0[16] ^ 0x90;
  LOBYTE(STACK[0xBD5]) = v0[17] ^ 0x90;
  LOBYTE(STACK[0xBD6]) = v0[18] ^ ((v1 ^ 0x4B) + 43);
  LOBYTE(STACK[0xBD7]) = v0[19] ^ 0x90;
  LOBYTE(STACK[0xBD8]) = v0[20] ^ 0x90;
  LOBYTE(STACK[0xBD9]) = v0[21] ^ 0x90;
  LOBYTE(STACK[0xBDA]) = v0[22] ^ 0x90;
  LOBYTE(STACK[0xBDB]) = v0[23] ^ 0x90;
  LOBYTE(STACK[0xBDC]) = v0[24] ^ 0x90;
  LOBYTE(STACK[0xBDD]) = v0[25] ^ 0x90;
  LOBYTE(STACK[0xBDE]) = v0[26] ^ 0x90;
  LOBYTE(STACK[0xBDF]) = v0[27] ^ 0x90;
  LOBYTE(STACK[0xBE0]) = v0[28] ^ 0x90;
  LOBYTE(STACK[0xBE1]) = v0[29] ^ 0x90;
  LOBYTE(STACK[0xBE2]) = v0[30] ^ 0x90;
  LOBYTE(STACK[0xBE3]) = v0[31] ^ 0x90;
  LOBYTE(STACK[0xBE4]) = v0[32] ^ 0x90;
  LOBYTE(STACK[0xBE5]) = v0[33] ^ 0x90;
  LOBYTE(STACK[0xBE6]) = v0[34] ^ 0x90;
  LOBYTE(STACK[0xBE7]) = v0[35] ^ 0x90;
  LOBYTE(STACK[0xBE8]) = v0[36] ^ 0x90;
  LOBYTE(STACK[0xBE9]) = v0[37] ^ 0x90;
  LOBYTE(STACK[0xBEA]) = v0[38] ^ 0x90;
  LOBYTE(STACK[0xBEB]) = v0[39] ^ 0x90;
  LOBYTE(STACK[0xBEC]) = v0[40] ^ 0x90;
  LOBYTE(STACK[0xBED]) = v0[41] ^ 0x90;
  LOBYTE(STACK[0xBEE]) = v0[42] ^ 0x90;
  LOBYTE(STACK[0xBEF]) = v0[43] ^ 0x90;
  BOOL v2 = aks_absinthe_generate( 1u,  STACK[0xA90],  (LODWORD(STACK[0x7FC]) - 549456566),  (uint64_t)&STACK[0xBD0],  32LL,  (void *)STACK[0x8D0],  &STACK[0x820]) != 0;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + (v1 | (16 * v2))) - 4))();
}

void sub_10012AA20()
{
  uint64_t v0 = (_DWORD *)STACK[0x928];
  *uint64_t v0 = 1711260691;
  v0[1] = STACK[0x660];
  STACK[0x650] = STACK[0xA50];
  JUMPOUT(0x10012AB14LL);
}

uint64_t sub_10012AA9C()
{
  int v1 = malloc(STACK[0x820]);
  *(void *)(STACK[0x928] + 104) = v1;
  return ((uint64_t (*)(void))*(&off_10025C670 + (((((49 * (v0 ^ 0x447) - 1665) | 0xB6) ^ 0xA4) * (v1 != 0LL)) ^ v0)))();
}

uint64_t sub_10012AB3C()
{
  uint64_t v3 = IOObjectRelease(STACK[0x704]);
  return ((uint64_t (*)(uint64_t))*(&off_10025C670
                                           + ((13 * (*(_DWORD *)(v1 + 3132) == ((v2 - 738) ^ (v0 - 1149)) + v2 - 101)) ^ (v2 - 738))))(v3);
}

uint64_t sub_10012AB8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W8>)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v3
                                                                        + 8LL
                                                                        * (((*(unsigned __int8 *)STACK[0x688] == ((a3 - 1544100441) & 0xC7 ^ 0x83))
                                                                          * ((a3 - 1888067869) & 0x7089A5CD ^ 0x2CD)) ^ a3))
                                                            - 8LL))( a1,  a2,  4294924391LL);
}

uint64_t sub_10012AC00()
{
  unint64_t v3 = STACK[0x870];
  int v4 = 230600693 * (((v2 - 192) & 0xB0AAFE3F | ~((v2 - 192) | 0xB0AAFE3F)) ^ 0x9D6987EB);
  *(_DWORD *)(v2 - 164) = LODWORD(STACK[0x75C]) - v4 - 651171671;
  *(_DWORD *)(v2 - 19fseek(v0, 0LL, 2) = (v1 - 785) ^ v4;
  *(void *)(v2 - 184) = (char *)&STACK[0xB80] + v3;
  *(void *)(v2 - 176) = v0;
  sub_1001DD928((_DWORD *)(v2 - 192));
  return ((uint64_t (*)(void))*(&off_10025C670 + (((*(_DWORD *)(v2 - 168) != 0) * ((v1 + 190) ^ 0x5BD)) ^ v1)))();
}

uint64_t sub_10012ACD4()
{
  STACK[0x870] = v0;
  return sub_100138714();
}

uint64_t sub_10012ACE4()
{
  return (*(uint64_t (**)(void))(v3 + 8LL * (v1 | (2 * (v0 + 1 == v2 + 16)))))();
}

uint64_t sub_10012AD60@<X0>(unsigned int a1@<W8>)
{
  int v4 = (((v1 >> 4) ^ 0x7C83068) - (((a1 ^ 0x7E6) - 1952154055) & (2 * ((v1 >> 4) ^ 0x7C83068))) + 1171406758) ^ 0x45D23FA6 | v1 ^ v2;
  signed int v5 = v4 - ((v4 << ((a1 - 115) ^ 0x83)) & 0x8C136CF2) - 972441991;
  unsigned int v6 = ((v5 >> 2) ^ 0xF1826D9E) - ((2 * ((v5 >> 2) ^ 0xF1826D9E)) & 0x5B8626B2) + 767759193;
  return (*(uint64_t (**)(void))(v3
                              + 8LL
                              * ((14
                                * ((v6 ^ 0x59 | v5 ^ 0x79) & 1 | ((((v6 ^ 0x2DC31359 | v5 ^ 0xC609B679) + ~(2 * (v6 ^ 0x2DC31359 | v5 ^ 0xC609B679)) + 2) & 2) != 0))) ^ a1)))();
}

uint64_t sub_10012AE2C(uint64_t a1, uint64_t a2)
{
  STACK[0x870] = v3;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v4
                                                                        + 8LL
                                                                        * (v2 ^ (1228
                                                                               * ((LODWORD(STACK[0x5E8]) - 1282311541) < 0x7D1))))
                                                            - 7 * (v2 ^ 0x1FDu)
                                                            + 1658LL))( a1,  a2,  4294924389LL);
}

void sub_10012AE80()
{
}

void sub_10012AEB4()
{
  LODWORD(STACK[0x9BC]) = v1 + v0;
  STACK[0x810] = ((v2 - 1829927452) ^ 0xFFFFFFFF6D1279E3LL) + *(void *)(v3 + 8LL * v2);
  JUMPOUT(0x10012AEECLL);
}

uint64_t sub_10012AEF8()
{
  STACK[0x870] = v2 + 320;
  LODWORD(STACK[0x7BC]) = *(_DWORD *)(v1 + 72);
  LODWORD(STACK[0x784]) = *(_DWORD *)(v1 + 76);
  LODWORD(STACK[0x6D0]) = *(_DWORD *)(v1 + 80);
  LODWORD(STACK[0x7D4]) = *(_DWORD *)(v1 + 84);
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * ((((char)(*(_BYTE *)(v1 + 96) ^ (v0 + 103)) < (char)(((2 * v0) ^ 0x12) + 91))
                                          * (((4 * v0) ^ 0x7B8) - 759)) ^ v0))
                            - 8LL))();
}

uint64_t sub_10012AF68(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v3 + 8LL * (((((a2 + 782) ^ 0x6C2) + 1943) * (v2 == -52)) ^ a2)))();
}

uint64_t sub_10012AF9C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v9 = (unsigned __int8 *)(v4 + v7 - 1122550474LL);
  unsigned int v10 = ((((v9[1] ^ 0x30) - ((2 * (v9[1] ^ 0x30)) & 0x1FC)) << 8) - 266207744) ^ 0xF021FE00;
  unsigned int v11 = (v10 - 157390924 - ((2 * v10) & 0x6D3CCE00)) ^ 0xF69E67B4 | ((*v9 ^ 0x30)
                                                                   + 1459317936
                                                                   - ((((v3 - 1531836497) & 0x5B4DF8F1) + 127) & (2 * (*v9 ^ 0x30)))) ^ 0x56FB6CB0;
  int v12 = ((((v9[2] ^ 0x30) - ((2 * (v9[2] ^ 0x30)) & 0x1C8)) << 16) + 82051072) ^ 0x4E40000;
  unsigned int v13 = (v11 - 1822465400 - ((2 * v11) & 0x26BEC510)) ^ 0x935F6288 | (v12 - 1794880235 - ((2 * v12) & 0x2A080000)) ^ 0x95044D15;
  LODWORD(v9) = ((((v9[3] ^ 0x30) - ((2 * (v9[3] ^ 0x30)) & 0x33333333)) << 24) + 419430400) ^ 0x19000000;
  LODWORD(v9) = (v13 + 2103430214 - ((2 * v13) & 0x7ABF988C)) ^ 0x7D5FCC46 | ((_DWORD)v9
                                                                            - 953153844
                                                                            - ((2 * (_DWORD)v9) & 0x8E000000)) ^ 0xC73006CC;
  *(_DWORD *)(v6 + ((v7 + v8) & 0xFFFFFFFC)) = (_DWORD)v9 + a3 - ((2 * (_DWORD)v9) & 0xEFA1EBAC);
  return (*(uint64_t (**)(void))(v5
                              + 8LL
                              * (int)((1753
                                     * (((-(uint64_t)((~(unint64_t)(v7 + 4 + v8) + v3) ^ (~(v7 + 4 + v8) + v3)) | (~(unint64_t)(v7 + 4 + v8) + v3)) & 0x8000000000000000LL) == 0LL)) ^ (v3 + 570))))();
}

uint64_t sub_10012B16C@<X0>(int a1@<W0>, int a2@<W2>, int a3@<W3>, int a4@<W4>, int a5@<W5>, int a6@<W8>)
{
  unsigned int v17 = (((a1 ^ a6) & (a3 ^ a5)) - 1999356611 - ((2 * ((a1 ^ a6) & (a3 ^ a5))) & 0x11A87A7A)) ^ 0x88D43D3D | (((a1 ^ a5) & (v11 ^ a5)) - 1143905235 - ((((v12 - 225) | 0x20) + 2007156794) & (2 * ((a1 ^ a5) & (v11 ^ a5))))) ^ 0xBBD1642D;
  unsigned int v18 = (v8 ^ a5) + (v17 ^ 0xFFFFFFDE) + ((2 * v17) & 0xFFFFFFBC) + 34;
  uint64_t v19 = (v16 + v10);
  unsigned int v20 = (*(_DWORD *)(v7 + 4LL * (*(_BYTE *)(v15 + v19) - 101)) ^ a2)
      + (v18 ^ 0xF93AEFF7)
      + 113577993
      + ((2 * v18) & 0xF275DFEE);
  unsigned int v21 = (v20 ^ 0xE7BFFDFA) + *(_DWORD *)(v13 + 4LL * v19);
  unsigned int v22 = v21
      + ((2 * v20) & 0xCF7FFBF4)
      - 2 * ((v21 + ((2 * v20) & 0xCF7FFBF4) + 965322796) & (a5 + 2) ^ v21 & 2)
      - 476701912;
  unsigned int v23 = (((v22 ^ a5) << (*(_BYTE *)(v9 + v19) - 5))
       - 997317521
       - ((2 * ((v22 ^ a5) << (*(_BYTE *)(v9 + v19) - 5))) & 0x891C48DE)) ^ 0xC48E246F | (((v22 ^ a5) >> (v14 - *(_BYTE *)(v9 + v19)))
                                                                                        - 572739111
                                                                                        - ((2
                                                                                          * ((v22 ^ a5) >> (v14 - *(_BYTE *)(v9 + v19)))) & 0xBBB963B2)) ^ 0xDDDCB1D9;
  unsigned int v24 = (a1 ^ a5) + (v23 ^ 0xBB7FEDAF) + ((2 * v23) & 0x76FFDB5E) + 1149243985;
  return (*(uint64_t (**)(void))(v6 + 8LL * ((667 * ((v16 + 1 + v10) < 0x10)) ^ v12)))(v24 + a5 - (a4 & (2 * v24)));
}

uint64_t sub_10012B360@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W4>, int a5@<W5>, int a6@<W8>)
{
  unsigned int v17 = ((v15 + 1637850078) & 0x9E6064BD ^ (a6 + 188) ^ a2) & (v12 ^ a5);
  unsigned int v18 = (((a1 ^ a5) & (a2 ^ a5)) - 1526676959 - ((2 * ((a1 ^ a5) & (a2 ^ a5))) & 0x4A018442)) ^ 0xA500C221 | (v17 - 1648781433 - ((2 * v17) & 0x3B732F0E)) ^ 0x9DB99787;
  unsigned int v19 = (v16 ^ a5) + (v18 ^ 0xDFF4FFE7) + ((2 * v18) & 0xBFE9FFCE) + 537591833;
  uint64_t v20 = (v6 + v10);
  unsigned int v21 = (*(_DWORD *)(v8 + 4LL * (*(_BYTE *)(v14 + v20) - 101)) ^ a3)
      + (v19 ^ 0x73F7EEFB)
      + ((2 * v19) & 0xE7EFDDF6)
      - 1945628411;
  unsigned int v22 = (v21 ^ 0xFFF7B7FB) + *(_DWORD *)(v11 + 4LL * v20) + ((2 * v21) & 0xFFEF6FF6);
  unsigned int v23 = (v22 - 883009845 - ((2 * v22 + 1118035030) & a4) + 2652) ^ a5;
  unsigned int v24 = ((v23 << (*(_BYTE *)(v9 + v20) - 5)) + 727521490 - ((2 * (v23 << (*(_BYTE *)(v9 + v20) - 5))) & 0x56BA31A4)) ^ 0x2B5D18D2 | ((v23 >> (v13 - *(_BYTE *)(v9 + v20))) - 1326741749 - ((2 * (v23 >> (v13 - *(_BYTE *)(v9 + v20)))) & 0x61D70E16)) ^ 0xB0EB870B;
  unsigned int v25 = (a1 ^ a5) + (v24 ^ 0x67BEE3FF) + ((2 * v24) & 0xCF7DC7FE) - 1740563455;
  return (*(uint64_t (**)(void))(v7
                                           + 8LL
                                           * (int)((93
                                                  * (((((v6 + 1 + v10) ^ v15) & v15) >> (__clz((v6 + 1 + v10) ^ v15 | 1) ^ 0x1F)) & 1)) ^ (v15 | 0x9C))))(v25 + a5 - (a4 & (2 * v25)));
}

uint64_t sub_10012B594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v7 + 8LL * ((1083 * ((v9 + 1 + v8) > 0x2F)) ^ a7)))();
}

uint64_t sub_10012B718()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * (int)(v3 ^ 0x771 ^ (126
}

uint64_t sub_10012B8C4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  LODWORD(STACK[0x7BC]) = v7;
  LODWORD(STACK[0x6D0]) = v9;
  LODWORD(STACK[0x784]) = v8;
  LODWORD(STACK[0x7D4]) = a2;
  int v10 = (v6[18] ^ a6) + (v7 ^ a6);
  int v11 = (v6[19] ^ a6) + (v8 ^ a6);
  v6[18] = v10 + a6 - (a5 & (2 * v10));
  v6[19] = v11 + a6 - (a5 & (2 * v11));
  int v12 = v6[21];
  int v13 = (v6[20] ^ a6) + (LODWORD(STACK[0x6D0]) ^ a6);
  v6[20] = v13 + a6 - (a5 & (2 * v13));
  v6[21] = (v12 ^ a6) + (LODWORD(STACK[0x7D4]) ^ a6) + a6 - (a5 & (2 * ((v12 ^ a6) + (LODWORD(STACK[0x7D4]) ^ a6))));
  STACK[0x870] -= 320LL;
  return ((uint64_t (*)(void))STACK[0x810])();
}

uint64_t sub_10012C278(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((97
                                          * ((LODWORD(STACK[0x658]) ^ (LODWORD(STACK[0x9BC])
                                                                                      - 947768835 > (LODWORD(STACK[0x864]) ^ 0xD4FE6C26))) & 1)) ^ (a4 - 68)))
                            - 12LL))();
}

uint64_t sub_10012C4B4()
{
  uint64_t v7 = ((_BYTE)v1 - 67) & 0xF;
  *(_BYTE *)STACK[0xA70] = *(_BYTE *)(STACK[0x6E0] + (v1 - 947768899)) ^ *(_BYTE *)(v0 + v7) ^ *(_BYTE *)(v7 + v4 + 5) ^ *(_BYTE *)((v2 - 422) + v5 + v7 - 57) ^ (v7 * v3) ^ 0x30;
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * v2) - 12LL))();
}

uint64_t sub_10012C538( int8x16_t a1, int8x16_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  int8x16_t *v10 = vaddq_s8( vaddq_s8(*(int8x16_t *)(v9 + (v11 + v12)), a2),  vmvnq_s8( vandq_s8( vaddq_s8(*(int8x16_t *)(v9 + (v11 + v12)), *(int8x16_t *)(v9 + (v11 + v12))),  a1)));
  return ((uint64_t (*)(void, void))(*(void *)(v13 + 8LL * (a9 - 724)) - 8LL))( (v11 + 64),  (a9 - 1612));
}

uint64_t sub_10012C594()
{
  BOOL v3 = v1 - 1412354252 < (v0 - 2127260958);
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((585 * v3) ^ (LODWORD(STACK[0x660]) - 478))) - 8LL))();
}

uint64_t sub_10012C5A8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return ((uint64_t (*)(void))(*(void *)(v6
                                        + 8LL
                                        * ((41 * (v5 - 947768899 < (((a4 ^ 0x681) + 1550) ^ v4 ^ 0xD4FE6A37))) | (a4 - 450)))
                            - ((241 * (a4 ^ 0x681u)) ^ 0x2DBLL)))();
}

uint64_t sub_10012C5C0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
}

uint64_t sub_10012C5F4()
{
}

uint64_t sub_10012C638@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * (((*(_DWORD *)(a1 + 92) == 2 * (v1 ^ 0x78B) + 2028012047) * ((v1 + 440) ^ 0x686)) | v1)))();
}

uint64_t sub_10012C678@<X0>(uint64_t a1@<X8>)
{
  BOOL v3 = (_BYTE *)STACK[0x8F0];
  int v4 = v1 - 1153;
  int v5 = *(_DWORD *)(a1 + 72);
  *BOOL v3 = unk_100212460 ^ unk_100214A03 ^ HIBYTE(v5) ^ unk_100217D10 ^ 0x2A;
  v3[1] = unk_100212461 ^ BYTE2(v5) ^ unk_100214A04 ^ 0xC7 ^ unk_100217D11 ^ 0xC;
  v3[2] = BYTE1(v5) ^ 0x8E ^ unk_100212462 ^ unk_100214A05 ^ unk_100217D12 ^ 0x72;
  v3[3] = v5 ^ 0x55 ^ unk_100212463 ^ unk_100214A06 ^ unk_100217D13 ^ 0xFC;
  unsigned int v6 = *(_DWORD *)(a1 + 92) - 1990822120;
  BOOL v7 = v6 < 0x2377FA9;
  BOOL v8 = v6 > 0x2377FAD;
  if (v7) {
    BOOL v8 = v7;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 8LL * ((285 * v8) ^ v4)) - 4LL))( 4294967239LL,  42LL,  0x40641C9FFDBB20CLL,  0x40641C9FFDBB20DLL,  114LL,  0x40641C9FFDBB20ELL,  2756851422LL,  2304145176LL);
}

void sub_10012C860()
{
}

uint64_t sub_10012C868()
{
  BOOL v3 = v1 == (v0 + 85);
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((v3 | (4 * v3)) ^ v0)) - 4LL))();
}

uint64_t sub_10012C88C@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * (((((v1 - 776798750) & 0x2E4D069E) - 1604)
                                          * (*(_DWORD *)(a1 + 92) != 2028013713)) | v1))
                            - 4LL))();
}

uint64_t sub_10012C8D4@<X0>(uint64_t a1@<X8>)
{
  BOOL v3 = (_BYTE *)STACK[0x8F0];
  int v4 = *(_DWORD *)(a1 + 72);
  *BOOL v3 = unk_100212460 ^ v4 ^ unk_100214A03 ^ unk_100217D10 ^ 0xFC;
  v3[1] = unk_100212451 ^ BYTE1(v4) ^ unk_10023B406 ^ 0xE3 ^ unk_1002378F3 ^ 0x72;
  v3[2] = BYTE2(v4) ^ 0xC6 ^ unk_100212452 ^ unk_10023B407 ^ unk_1002378F4 ^ 0xC;
  v3[3] = HIBYTE(v4) ^ 0xA9 ^ unk_100212453 ^ unk_10023B408 ^ unk_1002378F5 ^ 0x2A;
  unsigned int v5 = *(_DWORD *)(a1 + 92) + 1549385662;
  BOOL v6 = v5 < 0xD53AC84F;
  if (v6) {
    BOOL v7 = v6;
  }
  else {
    BOOL v7 = v5 > 0xD53AC853;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 8LL * ((464 * v7) ^ v1)) - 4LL))( 4294967239LL,  0x5B8D36BB22992F39LL,  4294967267LL,  114LL,  0x5B8D36BB22992F3ALL,  0x5B8D36BB22992F3BLL,  42LL,  2756797426LL);
}

void sub_10012CAE8()
{
}

uint64_t sub_10012CAF0()
{
  return ((uint64_t (*)(void))STACK[0xA08])();
}

uint64_t sub_10012CB00(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((((((a1 + 1332948025) ^ 0x4F73378F) + 2147482300) & 0x49EB9E30) != ((a1 + 1332948025) & 0xB08CCD5F) + 1240178197) ^ (a1 - 1252)))
                            - 12LL))();
}

void sub_10012CB7C(uint64_t a1, uint64_t a2, int a3)
{
  *(_BYTE *)(STACK[0x6E8] + v3 + v6 + (a3 ^ v4) * v5) ^= *(_BYTE *)(v8 + v3 + v6 + (a3 ^ v4) * v5) ^ v7;
  JUMPOUT(0x10012CB40LL);
}

uint64_t sub_10012CBAC(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((495
}

uint64_t sub_10012CC24()
{
  STACK[0x870] -= 32LL;
  return ((uint64_t (*)(void))STACK[0x750])();
}

uint64_t sub_10012CC38()
{
  return (*(uint64_t (**)(uint64_t))(v0
                                            + 8LL
                                            * ((1991
                                              * ((*(unsigned int *)(STACK[0x668] + 112) ^ 0x7BB7D8CF9E5555EDLL)
                                               - 0x7BB7D8CFDBBA85FDLL
                                               + (((unint64_t)(*(_DWORD *)(STACK[0x668] + 112) ^ 0x69620A42u) << (3 * (LOBYTE(STACK[0x660]) ^ 0x8Du) - 44)) & 0x1EE6EBF5ELL) != 461167026)) ^ (LODWORD(STACK[0x660]) - 661))))(0x6BC9DA2D825E2848LL);
}

uint64_t sub_10012CD18(uint64_t a1)
{
  BOOL v11 = v4 < v5;
  *(_BYTE *)(v8 + v9 - 0x1D0CEF7CA9A3E14ELL) = *(_BYTE *)(v7 + v3 - 0x51CC40A9AB7CA313LL) - 99;
  unint64_t v12 = a1 - 0x6BC9DA2D66E14E95LL;
  uint64_t v13 = a1 + 1;
  int v14 = v11 ^ (v12 < v1);
  BOOL v15 = v12 < v4;
  if (!v14) {
    BOOL v11 = v15;
  }
  return (*(uint64_t (**)(uint64_t))(v10 + 8LL * ((v11 * v6) ^ v2)))(v13);
}

void sub_10012CDAC()
{
}

uint64_t sub_10012CE0C()
{
  kern_return_t v2;
  STACK[0x658] = v1;
  int v2 = IOMainPort(0, (mach_port_t *)&STACK[0x944]);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + ((29
                                        * ((((v0 ^ 0x324) + 2145647450) & (2 * v2)) + (v2 ^ 0x3FF1FF7D) != ((v0 - 131) | 0x98) + 1072824036)) ^ v0))
                            - 8))();
}

uint64_t sub_10012CE80()
{
  BOOL v1 = IOServiceMatching((const char *)&STACK[0x15B1]) != 0LL;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + ((1590 * v1) ^ v0)) - ((32 * v0) ^ 0x1328LL)))();
}

uint64_t sub_10012CEC4(const __CFDictionary *a1)
{
  kern_return_t MatchingServices;
  MatchingServices = IOServiceGetMatchingServices(STACK[0x944], a1, (io_iterator_t *)&STACK[0x704]);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + ((781
                                        * (((MatchingServices << (v1 + 104)) & 0xFFFABBE8)
                                         + (MatchingServices ^ 0x7FFD5DF4) == ((v1 - 1071726778) & 0x3FE1453F ^ 0x7FFD58EB))) ^ v1))
                            - 8))();
}

uint64_t sub_10012CF48()
{
  io_object_t v1 = IOIteratorNext(STACK[0x704]);
  return ((uint64_t (*)(void))*(&off_10025C670
                             + ((44
                               * (((v1 << ((v0 - 60) ^ 0xE2)) & 0xBFAC7AF4) + (v0 ^ 0x39D ^ v1 ^ 0x5FD63BF8) != 1607875962)) ^ v0)))();
}

uint64_t sub_10012CFB0@<X0>(int a1@<W8>)
{
  kern_return_t v3;
  task_port_t v2 = mach_task_self_;
  LODWORD(STACK[0x650]) = a1 - 1607875962;
  uint64_t v3 = IOServiceOpen(a1 - 1607875962, v2, 0, (io_connect_t *)&STACK[0x6D4]);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + ((1685
                                        * (((2 * v3) & 0x5EFFCDFE) + (v3 ^ 0x2F7FE6FF) == (v1 ^ 0xDFDAF769) + 1336209269)) ^ v1))
                            - 8))();
}

uint64_t sub_10012D044()
{
  *(_DWORD *)(v1 + 313fseek(v0, 0LL, 2) = ((v0 | 2) ^ 0xDFFDFE82)
                         + (LODWORD(STACK[0x6D4]) ^ 0x3CF6DF33)
                         + ((2 * LODWORD(STACK[0x6D4])) & 0x79EDBE66);
  IOObjectRelease(STACK[0x650]);
  return sub_10012AB3C();
}

uint64_t sub_10012D080(uint64_t a1, int a2)
{
}

uint64_t sub_10012D0C0@<X0>(int a1@<W8>)
{
  unint64_t v3 = STACK[0x6E8];
  STACK[0xAF8] = v1;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (((v3 != 0) * (a1 - 264)) ^ a1)) - 12LL))();
}

uint64_t sub_10012D0F8()
{
  int v5 = (v1 + v2 + 141) | 2;
  int v6 = byte_100221A30[v0[9] ^ 0xD1 ^ ((v1 + v2 - 115) | 2)];
  char v7 = (32 * v6) ^ 0xC0;
  STACK[0x658] = v4;
  char v8 = v7 - 26;
  char v9 = 2 * v7;
  unsigned int v10 = (2 * v7 - (v7 - 26)) & 0x40;
  unsigned int v11 = (v10 & 0xFFFFFF7F | (((v10 >> 6) & 1) << 7)) ^ 0x6B;
  char v12 = v11 - 1;
  unsigned int v13 = -((v11 - 107) & (v6 ^ 0xFFFFFF80));
  char v14 = -43 - v11;
  if ((v13 & 0xFE) != 0) {
    char v15 = v14;
  }
  else {
    char v15 = v12;
  }
  uint64_t v16 = byte_10021A390[v0[3] ^ 0xAELL];
  int v17 = *v0;
  int v18 = 2 * (v17 ^ 0x99);
  HIDWORD(v19) = ((~v18 + (v17 ^ 0x99)) ^ 1) + 2;
  LODWORD(v19) = ((v17 ^ 0x99) - (v18 & 0xA8) - 1896117164) ^ 0x8EFB8C54;
  int v20 = (v19 >> 2) + 2103417191 - ((2 * (v19 >> 2)) & 0xFABF4C96);
  char v21 = (((2 * v17) ^ 0x32) - 2 * (((2 * v17) ^ 0x32) & 0x1E ^ (2 * v17) & 4) + 26) & 0x2E;
  LOBYTE(v17) = (v17 ^ 0xE) + (v21 ^ 0xA4) + ((2 * v21) ^ 0x14) + 82;
  HIDWORD(v19) = (v20 + 1073745124) ^ 0x1638AB7F;
  LODWORD(v19) = -3301 - v20;
  int v22 = byte_100221730[((v19 >> 30) - ((2 * (v19 >> 30)) & 0x2E297BC) - 2123281442) ^ 0x2CED7FEBLL] ^ (v17 + (~(2 * v17) | 0xE7) + 13) ^ 0xAD;
  int v23 = (((v22 - ((2 * v22) & 0xC8)) << 24) + 1677721600) ^ 0x64000000;
  int v24 = (v23 - ((2 * v23) & 0xF2000000) - 113618629) ^ 0xF93A513B | ((v16 ^ 0xDC)
                                                                   - ((2 * (v16 ^ 0xDC)) & 0xCE)
                                                                   + 1901998439) ^ 0x715E3167;
  int v25 = byte_10023A8F0[v0[2] ^ 0x4CLL];
  int v26 = (105 * v25 - ((-46 * v25 + 100) & 0xA2) - 125) ^ 0x48;
  unsigned int v27 = (((v26 - ((2 * v26) & 0x8A)) << 8) - 1681308416) ^ 0x9BC94500;
  int v28 = byte_100221A30[v0[1] ^ 0xA5LL];
  unsigned int v29 = (((32 * v28) ^ 0xFFFFFFC0) + (((32 * v28) ^ 0xFFFFFFC0) >> 6 << 7) + 78) ^ v28;
  LODWORD(STACK[0x650]) = v29;
  unsigned int v30 = ((((v29 ^ 0x9C) - ((2 * (v29 ^ 0x9C)) & 0xBE)) << 16) - 648085504) ^ 0xD95F0000;
  unsigned int v31 = (v24 - ((2 * v24) & 0xF3D09D2A) + 2045267605) ^ 0x79E84E95 | (v27 - ((2 * v27) & 0x7CEFD200) - 25695915) ^ 0xFE77E955;
  unsigned int v32 = (v31 - ((2 * v31) & 0xBD4E8180) - 559464256) ^ 0xDEA740C0 | (v30 - ((2 * v30) & 0x23520000) + 1370034730) ^ 0x51A9122A;
  unsigned int v33 = v32 - ((2 * v32) & 0x3A501D58) - 1658319188;
  int v34 = ((BYTE1(v33) ^ 0xCA) - ((2 * (BYTE1(v33) ^ 0xCA)) & 0x136) + 804924571) ^ 0x761219B;
  unsigned int v35 = (v34 | 0xB0810D9E) - (v34 | 0x4F7EF261) + 1333719649;
  unsigned int v36 = (v35 & 0xFFFFF7FF ^ 0xE1F5B7BA)
      + (v35 & 0xFFFFF7FF ^ 0xD99A4CF7)
      + ((2 * v35) & 0x7CFF66BE ^ 0xCFCBEF51)
      + ((2 * v35) & 0xF3DF6FDA ^ 0x3014108A);
  LOBYTE(v34) = (v8 + ~v9) & 0xA0 ^ 0x82;
  uint64_t v37 = byte_10021A390[v0[7] ^ 0x56LL];
  unsigned __int8 v38 = ((v6 ^ 0x9E) + v15 - 106 - ((2 * ((v6 ^ 0x9E) + v15 - 106)) & 0xF4) - 6) ^ (127 - v34);
  int v39 = byte_100221730[v0[4] ^ 0x5BLL] ^ 0x55 ^ ((v0[4] ^ 0xBC)
                                                                - ((2 * (v0[4] ^ 0xBC) + 14) & 0x12)
                                                                - 96);
  unsigned int v40 = (((v39 - ((2 * v39) & 0x8C)) << 24) - 973078528) ^ 0xC6000000;
  int v41 = (v40 - ((2 * v40) & 0xD4000000) - 354940517) ^ 0xEAD8099B | ((v37 ^ 0xDC)
                                                                   - ((2 * (v37 ^ 0xDC)) & 0x100)
                                                                   + 1349363840) ^ 0x506DA880;
  int v42 = v41 - ((2 * v41) & 0x4AA422A);
  LOWORD(v30) = byte_10023A8F0[v0[10] ^ 0xCCLL];
  LOWORD(v30) = (105 * v30 - ((-46 * v30 + 100) & 0xD4) - 100) ^ 0x53;
  LOWORD(v30) = (((v30 - ((2 * (_WORD)v30) & 0x162)) << 8) - 20224) ^ 0xB100;
  int v43 = byte_10023A8F0[v0[6] ^ 0xBBLL];
  LOWORD(v27) = (v30 - ((2 * v30) & 0x7600) - 17430) ^ 0xBBEA;
  uint64_t v45 = byte_10021A390[v0[15] ^ 0x2BLL];
  LOWORD(v41) = byte_10021A390[v0[11] ^ 0xA1LL];
  int v46 = byte_10023A8F0[v0[14] ^ 0x8BLL];
  int v47 = (((v44 << 8) + 2004692480) ^ 0x777D2E00) - ((2 * (((v44 << 8) + 2004692480) ^ 0x777D2E00)) & 0x6011F200);
  uint64_t v48 = v0[8];
  char v49 = (v48 ^ 0xE3) - ((2 * (v48 ^ 0xE3) + 6) & 4);
  LOWORD(v41) = ((v41 ^ 0xDC) - ((2 * (v41 ^ 0xDC)) & 0x2A) + 2581) ^ 0xA15;
  LOWORD(v41) = (v27 - ((2 * v27) & 0xEE4A) + 30501) ^ 0x7725 | (v41 - ((2 * v41) & 0x366) - 25165) ^ 0x9DB3;
  __int16 v50 = v41 - ((2 * v41) & 0xD974) + 27834;
  int v51 = (((((105 * v46 - ((-46 * v46 + 100) & 0x8A) - 9) ^ 0x41)
         - ((2 * ((105 * v46 - ((-46 * v46 + 100) & 0x8A) - 9) ^ 0x41)) & 0x8A)) << 8)
       + 1781089536) ^ 0x6A294500;
  int v52 = (v51 - ((2 * v51) & 0x707C4600) + 2017338330) ^ 0x783E23DA | ((v45 ^ 0xDC)
                                                                    - ((2 * (v45 ^ 0xDC)) & 0x7C)
                                                                    - 399250626) ^ 0xE833EB3E;
  LOBYTE(v27) = byte_100221730[v48 ^ 4];
  unsigned int v53 = ((v0[12] ^ 0x49) - ((2 * (v0[12] ^ 0x49) + 46) & 0xBBBBBBBB) - 12) ^ byte_100221730[v0[12] ^ 0xAELL];
  LODWORD(v4_Block_object_dispose(va, 8) = ((((v53 ^ 0xCD) - ((2 * (v53 ^ 0xCD)) & 0x36)) << 24) - 1694498816) ^ 0x9B000000;
  int v54 = byte_100221A30[v0[13] ^ 0x2FLL];
  unsigned int v55 = ((2 * ((2 * v54) ^ 0xFFFFFFB4)) & 0x70) - ((2 * v54) ^ 0xFFFFFFB4) + 70;
  unsigned int v56 = ((2 * ((v54 ^ 0xFFFFFFDA) + 68)) & 0x3C) + (((v54 ^ 0xFFFFFFDA) + 68) ^ 0xFFFFFF9E);
  unsigned int v57 = ((v55 & 0xFFFFFF88 | (16 * ((v55 >> 3) & 1))) ^ 0xFFFFFF91) + v56;
  int v58 = (32 * v56 - ((v54 & 1) << 6) - 10) ^ 0xE2 ^ (v57 - ((2 * v57 - 94) & 0xDC) + 63);
  unsigned int v59 = ((((~(2 * v58) | 0xFE13) + v58) << 16) - 487129088) ^ 0xE2F60000;
  int v60 = byte_100221A30[v0[5] ^ 0xF0LL];
  int v61 = ((v59 - 823701773 + (~(2 * v59) | 0xFA31FFFF)) | 1) ^ 0xCEE74EF3 | (v48 - ((2 * v48) & 0x68000000) + 873754569) ^ 0x34146FC9;
  unsigned int v62 = (v61 - ((2 * v61) & 0xE9FA0A40) + 1962738976) ^ 0x74FD0520 | (v52 - ((2 * v52) & 0x6FB4A3B2) + 2010796505) ^ 0x77DA51D9;
  unsigned int v63 = v62 - ((2 * v62) & 0x93EF4A06);
  LODWORD(v4_Block_object_dispose(va, 8) = (((32 * v60) ^ 0x40) + (((32 * v60) ^ 0x40u) >> 6 << 7) + 76) ^ v60;
  unsigned int v64 = ((((v48 ^ 0xFE) - ((2 * (v48 ^ 0xFE)) & 0x1EC)) << 16) - 789184512) ^ 0xD0F60000;
  int v65 = (v64 - ((2 * v64) & 0x2E0E0000) + 386335522) ^ 0x17070322 | (v47 + 1879636231) ^ 0x7008F907;
  unsigned int v66 = (v65 - ((2 * v65) & 0xED1AF132) + 1988982937) ^ 0x768D7899 | (v42 - 2108350187) ^ 0x82552115;
  unsigned int v67 = v66 - ((2 * v66) & 0xE10E9F66) - 259567693;
  int v68 = ((HIBYTE(v33) & 0xA ^ 0x20181007) + (HIBYTE(v33) & 0x51) - 1) ^ 0x528540D0;
  unsigned int v69 = (((((v63 + 1240966403) ^ 0x297F12CC) >> (v50 & 0x10))
        - ((2 * (((v63 + 1240966403) ^ 0x297F12CC) >> (v50 & 0x10))) & 0x1824FE6A)
        - 1944944843) ^ 0x8C127F35) >> (v50 & 0x10 ^ 0x10);
  char v70 = v69 - ((2 * v69) & 0x8F);
  unsigned int v71 = HIBYTE(v33) ^ 0x91;
  unsigned int v72 = (((2 * (HIBYTE(v33) & 0x5B ^ 0x44F654)) & 0x896C28) - (HIBYTE(v33) & 0x5B ^ 0x44F654) - 65320885) ^ 0xAC7AF8F4 ^ ((v68 & 0x41 ^ 0x50140060) + (v68 & 0x9E ^ 0xA04C05) - 1) | (((2 * (HIBYTE(v33) & 0xA4 ^ 0x4044B8)) & 0x808058) - (HIBYTE(v33) & 0xA4 ^ 0x4044B8) - 2034325614) ^ ((HIBYTE(v33) & 0xA4 ^ 0x844EB528) - ((2 * (HIBYTE(v33) & 0xA4 ^ 0x844EB528)) & 0x102A50) + 2073632041) ^ 0xF569DBAF;
  int v73 = v72 - ((2 * v72) & 0x71C43B82) - 1193140799;
  int v74 = dword_100213260[v48 ^ 0x8F];
  unsigned int v75 = (HIBYTE(v50) ^ 0x108C4 | 0x2BD206AF) - (HIBYTE(v50) ^ 0x108C4 | 0xD42DF950) - 735184560;
  int v76 = v75 ^ 0x59BD2CFC;
  int v77 = dword_1002171F0[v45 ^ 0xA0];
  HIDWORD(v19) = v77 ^ 0xFE;
  LODWORD(v19) = v77 ^ 0x9CA6E00;
  unsigned int v78 = v74 ^ dword_10023A270[v71] ^ (((32 * v74) ^ 0x9C67AFE0)
                                    - ((2 * ((32 * v74) ^ 0x9C67AFE0)) & 0x38E5ACC0)
                                    - 1670195601) ^ ((v19 >> 8) - ((2 * (v19 >> 8)) & 0x3AADD2C0) + 492235104) ^ *((_DWORD *)&unk_100218A50 + (((HIBYTE(v50) ^ 0xFFFFFF4A) - ((2 * (HIBYTE(v50) ^ 0xFFFFFF4A) + 226) & 0x5E18FE5C) - 1358135393) ^ v75 ^ 0x59BD2CFC ^ 0xEDB89C6F ^ ((v75 ^ 0xD42CF151) - ((2 * (v75 ^ 0xD42CF151) + 2) & 0x61B58226) + 819642644)) + 112) ^ v73;
  int v79 = dword_100213260[v38 ^ 0x17];
  int v80 = ((unsigned __int16)(v63 - 23293) >> 8);
  LODWORD(v16) = dword_1002171F0[v16 ^ 0x4A];
  HIDWORD(v19) = v16 ^ 0xFE;
  LODWORD(v19) = v16 ^ 0x9CA6E00;
  unsigned int v81 = v79 ^ dword_10023A270[HIBYTE(v67) ^ 0x29] ^ (((32 * v79) ^ 0x9C67AFE0)
                                                   - ((2 * ((32 * v79) ^ 0x9C67AFE0)) & 0x8138FE40)
                                                   + 1083997997) ^ ((v19 >> 8)
                                                                  - ((2 * (v19 >> 8)) & 0x6AF4B896)
                                                                  - 1250272181) ^ *((_DWORD *)&unk_100218A50
                                                                                  + ((((2 * (v80 ^ 0x28)) | 0xADE09680)
                                                                                    - (v80 ^ 0x28)
                                                                                    - 1458588480) ^ 0x56F04B0A));
  unsigned __int8 v82 = v27 ^ (v49 + 25) ^ 0xB5;
  unsigned int v84 = v36 - 1980236838;
  if (((v36 + 1150286708) & 0xCC591789) != ((2 * (v36 + 1150286708)) & 0x18802502)) {
    unsigned int v84 = 14157042 - v36;
  }
  int v85 = dword_1002171F0[v37 ^ 0x21];
  HIDWORD(v86) = v85 ^ 0xFE;
  LODWORD(v86) = v85 ^ 0x9CA6E00;
  int v83 = dword_100213260[(((2 * ((v70 - 57) ^ 0xB00C06DC)) & 0x6008080C)
  unsigned int v87 = dword_10023A270[v82] ^ v83 ^ (((32 * v83) ^ 0x9C67AFE0)
                                    - ((2 * ((32 * v83) ^ 0x9C67AFE0)) & 0x844563C0)
                                    + 1109570028) ^ ((v86 >> 8) - ((2 * (v86 >> 8)) & 0x53E9BAC) - 2103489066) ^ *((_DWORD *)&unk_100218A50 + (v35 ^ 0x473BBB9C ^ (v84 - ((2 * v84 + 232926790) & 0x26F15864) - 1704344747)));
  int v88 = dword_100213260[LODWORD(STACK[0x650]) ^ 0x30];
  unsigned int v89 = (v50 ^ 0x5F55579B) - ((2 * (v50 ^ 0x5F55579B)) & 0xA4A00C80) + 1392127552;
  int v90 = dword_1002171F0[((v89 & 0xC064A13 ^ 0x14008611) + (v89 ^ 0x4986594A) - ((v89 ^ 0x4986594A) & 0x1C00CE13)) ^ 0x582FEEB0];
  HIDWORD(v86) = v90 ^ 0xFE;
  LODWORD(v86) = v90 ^ 0x9CA6E00;
  unsigned int v91 = dword_10023A270[v53 ^ 0x80] ^ v88 ^ (((32 * v88) ^ 0x9C67AFE0)
                                                            - ((2 * ((32 * v88) ^ 0x9C67AFE0)) & 0x38E28580)
                                                            + 477184726) ^ *((_DWORD *)&unk_100218A50
                                                                           + ((((2 * (BYTE1(v67) ^ 0xB8000C20)) | 0xB569D53E)
                                                                             - (BYTE1(v67) ^ 0xB8000C20)
                                                                             + 625677665) ^ 0x62B4E6FB)) ^ ((BYTE1(v67) ^ 0x90A0901D | 0x9A4ACB5C) - (BYTE1(v67) ^ 0x90A0901D | 0x65B534A3) + 1706374307) ^ ((v86 >> 8) - ((2 * (v86 >> 8)) & 0xE18B3B0C) + 1891999110);
  int v92 = dword_100213260[(((2 * (BYTE2(v81) ^ 0x2A986081)) | 0x3941A1C) - (BYTE2(v81) ^ 0x2A986081) + 2117464818) ^ 0xAB526D32];
  unsigned int v93 = ((((unsigned __int16)(v35 ^ v87) >> 8) ^ 0x73)
       + ((((v35 ^ v87) >> 8) ^ 0xC2A435) & 0x50 ^ 0x188FA910)
       - ((((unsigned __int16)(v35 ^ v87) >> 8) ^ 0x73) & 0x50)) ^ 0xFB8EA840;
  int v94 = (((2 * (((unsigned __int16)(v35 ^ v87) >> 8) ^ 0xEA)) | 0x5F7E5DBA)
  unsigned int v95 = ((v94 | 0xF0C9381B) - (v94 | 0xF36C7E4) + 255248356) ^ 0xC6C53CEB;
  int v96 = dword_1002171F0[(((2 * (v91 ^ 0xA808016E)) & 0x10000382)
  HIDWORD(v86) = v96 ^ 0xFE;
  LODWORD(v86) = v96 ^ 0x9CA6E00;
  unsigned int v97 = ((BYTE2(v87) ^ 0xA7) - ((2 * (BYTE2(v87) ^ 0xA7)) & 0xEEEEEEEE) + 992454263) ^ 0xAEE3F71C;
  unsigned int v98 = (((2 * v97) | 0x5D12BA5A) - v97 + 1366729427) ^ 0x3B4D0C0A;
  BYTE1(v97) = BYTE1(v78) ^ BYTE1(v76);
  unsigned int v99 = dword_10023A270[((v78 ^ v76) >> 24) ^ 0x9A] ^ v92 ^ (((32 * v92) ^ 0x9C67AFE0)
                                                           - ((2 * ((32 * v92) ^ 0x9C67AFE0)) & 0xADEE2980)
                                                           - 688450365) ^ ((v86 >> 8)
                                                                         - ((2 * (v86 >> 8)) & 0xF9AE8924)
                                                                         - 53001070) ^ ((v93 | 0x8E4ADA5)
                                                                                      - (v93 | 0xF71B525A)
                                                                                      - 149204390) ^ *((_DWORD *)&unk_100218A50 + v95);
  unsigned int v100 = (BYTE1(v91) ^ 0xB9 | 0x6BF0CEE9) - (BYTE1(v91) ^ 0xB9 | 0x940F3116) - 1810943722;
  int v101 = dword_100213260[v98];
  unsigned int v102 = (((2 * (HIWORD(v91) & 0xFE ^ 0x56)) & 0x170) - (HIWORD(v91) & 0xFE ^ 0x56) - 807105466) ^ 0xC9E59C47;
  int v103 = ((((2 * v102) & 0x8000448) - v102 + 591773147) | HIWORD(v91) & 1) ^ 0x2544ADD9;
  int v104 = dword_1002171F0[(v78 ^ v76) ^ 0x7C];
  HIDWORD(v86) = v104 ^ 0xFE;
  LODWORD(v86) = v104 ^ 0x9CA6E00;
  unsigned int v105 = dword_10023A270[HIBYTE(v81) ^ 0x9C] ^ *((_DWORD *)&unk_100218A50 + (BYTE1(v91) ^ 0xE0u)) ^ v101 ^ ((v86 >> 8) - 613681977 + (~(2 * (v86 >> 8)) | 0x49281673)) ^ ((v100 & 0x41C049C2 ^ 0x44001102) + (v100 ^ 0x8BC14EC0) - ((v100 ^ 0x8BC14EC0) & 0xC00001C2)) ^ (((32 * v101) ^ 0x38199560) - 280005496 - ((2 * ((32 * v101) ^ 0x38199560)) & 0xDE9EF940) + 2079);
  int v106 = dword_100213260[(v103 - ((2 * v103) & 0x1F194150) - 812867416) ^ 0xCF8CA0B0];
  unsigned int v107 = v106 ^ ((v106 ^ 0xC63F3354) - ((2 * (v106 ^ 0xC63F3354) + 2) & 0x5E1474FA) - 1358284162) ^ ((v106 ^ 0xC31CC280) - ((2 * (v106 ^ 0xC31CC280) + 172483498) & 0x7CC54D14) + 1132894303) ^ 0xA8A8505C;
  int v108 = v107 - ((2 * v107 + 172483496) & 0x78039F08) + 1092993368;
  unsigned int v109 = ((v81 ^ v80) & 2 ^ 0xDFFEB7FF) + 2 * ((v81 ^ v80) & 2);
  int v110 = BYTE1(v97);
  unsigned int v111 = ((v110 ^ 0x2B | 0xC264FE52) - (v110 ^ 0x2B | 0x3D9B01AD) + 1033568685) ^ 0xC2607632;
  unsigned int v112 = (v110 ^ 0x35 | 0x3778E8D5) - (v110 ^ 0x35 | 0xC887172A) - 930670806;
  unsigned int v113 = ((v91 << 6) ^ 0x55641AC0) - ((2 * ((v91 << 6) ^ 0x55641AC0)) & 0xA4A84280) + 1381245256;
  unsigned int v114 = ((v113 & 0x40000000 | ~v113 & 0xC0000000 | 0xCDA68EA) - (~v113 & 0x40000000)) ^ 0x60F4E8B9;
  unsigned int v115 = ((v114 | 0xBC6FFC9C) - (v114 | 0x43900363) + 1133511523) ^ 0x10417CCF | (v91 >> 26) ^ 0x27;
  unsigned int v116 = v115 - ((2 * v115) & 0xCAEBB5F6) - 445261061;
  HIDWORD(v86) = v116 ^ 0xB525FAD;
  LODWORD(v86) = v116;
  int v117 = (v86 >> 30) - ((2 * (v86 >> 30)) & 0xA85DC8C0) - 735124384;
  int v118 = dword_1002171F0[(((v81 ^ v80) & 0xFD ^ 0x31508ADC)
                        - ((2 * ((v81 ^ v80) & 0xFD ^ 0x31508ADC)) & 0x402010C0)
                        + 641079648) ^ 0xA185344 ^ (-42108958 - v109 - ((1073574244 - 2 * v109) & 0x3AFD8038) + 236)];
  HIDWORD(v86) = v118 ^ 0xFE;
  LODWORD(v86) = v118 ^ 0x9CA6E00;
  unsigned int v119 = *((_DWORD *)&unk_100218A50 + (((v112 & 0x30688DF6 ^ 0x8015E1) + (v112 & 0x7106209) - 1) ^ 0x37F8FDAF)) ^ ((v86 >> 8) - ((2 * (v86 >> 8)) & 0x75A125B4) - 1160736038) ^ dword_10023A270[HIBYTE(v87) ^ 0xEB] ^ v108 ^ (v111 - ((2 * v111) & 0x4CF9B7E2) - 428024847) ^ (((32 * v108) ^ 0x8039F080) - ((2 * ((32 * v108) ^ 0x8039F080)) & 0x7DA6AA40) - 1093446352);
  unsigned int v120 = v117 ^ 0x6CB0F116;
  unsigned int v121 = ((HIWORD(v78) & 0xC7 ^ 0x8FDA001) + (HIWORD(v78) & 0x38 ^ 0x21) - 1) ^ 0x91B1B081;
  int v122 = dword_100213260[(v121 - ((2 * v121) & 0x208038C) + 1102332358) ^ 0xD8F85134];
  unsigned int v123 = (((2 * (BYTE1(v81) ^ 0xFD)) & 0x94) - (BYTE1(v81) ^ 0xFD) - 1099308363) ^ 0xFA71C7F5;
  LOBYTE(v85) = (v35 ^ v87 ^ 0x2A) + (v124 ^ 0x40) - 2 * (v124 & 0x3F) - 64;
  int v125 = ((v85 ^ 0xE3) + ((2 * v85) & 0xC7) + 29);
  unsigned int v126 = (v125 ^ 0xE5FFFBFF) + (v124 ^ 0xDBDBFFF) + 2 * (v125 + v124);
  unsigned int v127 = dword_1002171F0[(v126 - ((2 * v126 + 411338756) & 0x68F27A34) + 1086030108) ^ 0x34793DA9];
  unsigned int v128 = ((v127 << 25) & 0xF2000000 ^ 0xF0000000) + ((v127 << 24) ^ 0x875FFFBF);
  unsigned int v129 = v122 ^ *((_DWORD *)&unk_100218A50 + (((v123 | 0x11CF3D8A) - (v123 | 0xEE30C275) - 298794379) ^ 0x55C7187A)) ^ (((32 * v122) ^ 0x9C67AFE0) - ((2 * ((32 * v122) ^ 0x9C67AFE0)) & 0x53616680) + 699446100) ^ ((BYTE1(v81) ^ 0x49C08B5) - ((2 * (BYTE1(v81) ^ 0x49C08B5)) & 0x81010C8) - 1100337820) ^ dword_10023A270[v120];
  unsigned int v130 = (((v128 - 2036334527) & 0xFF000000 | (v127 >> 8)) ^ 0x9CA64)
       + v128
       + ((2 * ((v128 - 2036334527) & 0xFF000000 | (v127 >> 8))) & 0xFFFFFFEA ^ 0xFFEC6B37);
  unsigned int v131 = (((v127 >> 8) ^ 0xFFF63591) - ((2 * ((v127 >> 8) ^ 0xFFF63591) + 2) & 0x414775CE) + 547601128) ^ (v127 >> 8) ^ (v130 - ((2 * v130 + 222298224) & 0x3F42941A) + 641813061);
  HIDWORD(v86) = v129 ^ 0x604;
  LODWORD(v86) = v129 ^ 0x8C152000;
  int v132 = (v86 >> 12) - ((2 * (v86 >> 12)) & 0x4DFD1466);
  HIDWORD(v86) = v131 ^ 0xA84;
  LODWORD(v86) = (((v131 ^ 0xBF0B3A84) + v128 - 2036334527) ^ 0x7CE65FE6)
               - 2095472614
               + ((2 * ((v131 ^ 0xBF0B3A84) + v128 - 2036334527)) & 0xF9CCBFCC);
  int v133 = ((v86 >> 12) - ((2 * (v86 >> 12)) & 0x9B19E1FC) + 1301082366) ^ (v132 - 1493267917);
  HIDWORD(v86) = v133 ^ 0x6C321;
  LODWORD(v86) = v133 ^ 0x16800000;
  unsigned int v134 = (v86 >> 20) - ((2 * (v86 >> 20)) & 0xE71CE00C) - 208769018;
  unsigned int v135 = ((((v134 ^ 0x1D667054) >> ((-4 - v63) & 8))
         - ((2 * ((v134 ^ 0x1D667054) >> ((-4 - v63) & 8))) & 0xA18C4344)
         + 1355162018) ^ 0x50C621A2) >> ((-4 - v63) & 8 ^ 8);
  int v136 = dword_100213260[BYTE2(v105) ^ 0xD3];
  int v137 = ((v86 >> 20) - ((2 * (v86 >> 20)) & 0xC) + 6) ^ 0xC;
  int v138 = (((2 * v137) | 0x7AC45CCA) - v137 + 1117639067) ^ 0x6C932E6D;
  int v139 = dword_1002171F0[(v138 - ((2 * v138) & 0xDB82295E) + 1841370287) ^ 0xBC30144C];
  HIDWORD(v86) = v139 ^ 0xFE;
  LODWORD(v86) = v139 ^ 0x9CA6E00;
  unsigned int v140 = dword_10023A270[HIBYTE(v99) ^ 0x3F] ^ v136 ^ (((32 * v136) ^ 0x9C67AFE0)
                                                     + 798249146
                                                     + (~(2 * ((32 * v136) ^ 0x9C67AFE0)) | 0xA0D75EBF)) ^ *((_DWORD *)&unk_100218A50 + ((((2 * (BYTE1(v119) ^ 0x38400497)) & 0x600001DE) - (BYTE1(v119) ^ 0x38400497) - 1988334320) ^ 0xB13C69E1)) ^ ((v86 >> 8) - ((2 * (v86 >> 8)) & 0x2BD1D6BA) - 1779897507);
  int v141 = dword_100213260[BYTE2(v119) ^ 0xD0];
  unsigned __int8 v142 = v135 - ((2 * v135) & 0xAA) - 43;
  int v143 = (v142 ^ 0xF6) - 1190332552 - ((2 * (v142 ^ 0xF6)) & 0x86) + 2763;
  int v144 = dword_1002171F0[v99 ^ 0x5C];
  HIDWORD(v86) = v144 ^ 0xFE;
  LODWORD(v86) = v144 ^ 0x9CA6E00;
  int v145 = dword_100213260[((BYTE2(v134) ^ 0xD08880F2 | 0xD28E9BEE) - (BYTE2(v134) ^ 0xD08880F2 | 0x2D716411) + 762405905) ^ 0x2061B62];
  unsigned int v146 = dword_10023A270[HIBYTE(v105) ^ 0xDF] ^ v141 ^ (((32 * v141) ^ 0x9C67AFE0)
                                                      - ((2 * ((32 * v141) ^ 0x9C67AFE0)) & 0x7CFEBA40)
                                                      - 1098949325) ^ ((v86 >> 8)
                                                                     - ((2 * (v86 >> 8)) & 0x3E408150)
                                                                     + 522207400) ^ *((_DWORD *)&unk_100218A50
                                                                                    + (((v143 & 0x8104016A ^ 0x44903528)
                                                                                      + (v143 ^ 0x9145C242)
                                                                                      - ((v143 ^ 0x9145C242) & 0x2048016A)) ^ 0xCD94F538));
  if ((v145 & 0x1000000) != 0) {
    int v147 = 0x1000000;
  }
  else {
    int v147 = -16777216;
  }
  int v148 = v147 + (v145 ^ 0x39C0CCAB) - 2 * ((v147 + (v145 ^ 0x39C0CCAB)) & 0x1C15D97D ^ v145 & 0x10) + 471193965;
  int v149 = ((32 * v148) ^ 0x6C51720) - ((2 * ((32 * v148) ^ 0x6C51720)) & 0x2526F240) + 311654702;
  unsigned int v150 = (((2 * (BYTE1(v99) ^ 0xE0)) | 0xC612975C) - (BYTE1(v99) ^ 0xE0) - 1661553582) ^ 0x7908BB27;
  int v151 = dword_1002171F0[v105 ^ 0xA8];
  HIDWORD(v15fseek(v0, 0LL, 2) = v151 ^ 0xFE;
  LODWORD(v15fseek(v0, 0LL, 2) = v151 ^ 0x9CA6E00;
  int v153 = *((_DWORD *)&unk_100218A50 + (BYTE1(v99) ^ 0x3Du)) ^ ((v152 >> 8)
                                                             - ((2 * (v152 >> 8)) & 0x20928D3A)
                                                             - 1874245987) ^ dword_10023A270[HIBYTE(v119) ^ 0x5E] ^ (((2 * v150) & 0x7BEE3BF2) - v150 - 1039605242) ^ v148;
  int v154 = dword_100213260[(((2 * (BYTE2(v99) ^ 0xC2080B2)) | 0xD7065010) - (BYTE2(v99) ^ 0xC2080B2) + 343726072) ^ 0xE7A3A83B];
  unsigned int v155 = v153 ^ v149;
  unsigned int v156 = ((v105 >> 8) & 0xA5 ^ 0x35524324) + ((v105 >> 8) & 0x5A ^ 0x8801081B) - 1;
  int v157 = (((v105 >> 8) & 0x3D) + (BYTE1(v105) ^ 0x7F) - ((BYTE1(v105) ^ 0x7F) & 0x3D) + 1939313408) ^ 0x7787B3BD;
  int v158 = dword_1002171F0[v119 ^ 0x4B];
  HIDWORD(v15fseek(v0, 0LL, 2) = v158 ^ 0xFE;
  LODWORD(v15fseek(v0, 0LL, 2) = v158 ^ 0x9CA6E00;
  int v159 = dword_10023A270[HIBYTE(v134) ^ 0x30] ^ v154 ^ *((_DWORD *)&unk_100218A50
                                                       + ((v157 - ((2 * v157) & 0x8006F48) - 1219577948) ^ 0xB35E97F4)) ^ (((32 * v154) ^ 0x9C67AFE0) - ((2 * ((32 * v154) ^ 0x9C67AFE0)) & 0x1189FDC0) + 147128059) ^ ((v152 >> 8) - ((2 * (v152 >> 8)) & 0xF90C2DAE) + 2089162455) ^ ((v156 & 0x6EA ^ 0x271C23) + (v156 & 0x115) - 1);
  char v160 = (BYTE1(v152) - ((2 * BYTE1(v152)) & 0xAE) - 41) & 0x10;
  unsigned int v161 = (v140 ^ BYTE1(v119) ^ ((1 - BYTE2(v134)) & 1 | 0x7C04C26C) ^ 0xDBD7983E) >> (v160 ^ 0x10);
  HIDWORD(v15fseek(v0, 0LL, 2) = v159 ^ 0x353;
  LODWORD(v15fseek(v0, 0LL, 2) = v159 ^ 0x6B364400;
  int v162 = (v152 >> 10) - ((2 * (v152 >> 10)) & 0x674A7D6E) + 866467511;
  unsigned int v163 = ((v161 - ((2 * v161) & 0x615662A4) - 1330957998) ^ 0xB0AB3152) >> v160;
  unsigned int v164 = v163 - ((2 * v163) & 0xE6);
  HIDWORD(v15fseek(v0, 0LL, 2) = v162 ^ 0x8217F;
  LODWORD(v15fseek(v0, 0LL, 2) = v162 ^ 0xF5C00000;
  unsigned int v165 = (v152 >> 22) - 2122159015 + (~(2 * (v152 >> 22)) | 0xFCFB274F);
  int v166 = (((2 * (BYTE2(v146) ^ 0xE2)) & 0x64) - (BYTE2(v146) ^ 0xE2) + 1231217869) ^ 0x6160E00F;
  int v167 = dword_100213260[(v166 - ((2 * v166) & 0x10000764) - 569318478) ^ 0xF612E765];
  int v168 = ((v152 >> 22) + 89 + (~(2 * (v152 >> 22)) | 0x4F)) ^ 0x80C0;
  int v169 = ((BYTE1(v155) ^ 0x39) - ((2 * (BYTE1(v155) ^ 0x39)) & 0xE4) + 201916274) ^ 0x64849F56;
  unsigned int v170 = (((2 * (BYTE1(v155) ^ 0xE3)) | 0x37426B96) - (BYTE1(v155) ^ 0xE3) + 1683933749) ^ 0xDB801477;
  int v171 = dword_1002171F0[(v168
  HIDWORD(v15fseek(v0, 0LL, 2) = v171 ^ 0xFE;
  LODWORD(v15fseek(v0, 0LL, 2) = v171 ^ 0x9CA6E00;
  int v172 = dword_10023A270[HIBYTE(v140) ^ 0x8A] ^ *((_DWORD *)&unk_100218A50
                                                + (((v170 | 0x6B396C59) - (v170 | 0x94C693A6) - 1798925402) ^ 0x2B184D6B)) ^ v167 ^ ((v152 >> 8) - ((2 * (v152 >> 8)) & 0x717A2F4) - 2087988870) ^ ((v169 | 0x7337B702) - (v169 | 0x8CC848FD) - 1933031171);
  int v173 = ((HIWORD(v155) & 8) + (BYTE2(v155) ^ 0xAA) - ((BYTE2(v155) ^ 0xAA) & 8) + 1782829824) ^ 0x4856FF48;
  int v174 = dword_100213260[(v173 - ((2 * v173) & 0x82FF8) + 220993532) ^ 0x2F393B96];
  unsigned int v175 = v172 ^ (((32 * v167) ^ 0x9C67AFE0) - ((2 * ((32 * v167) ^ 0x9C67AFE0)) & 0xF2A9EE00) - 111872251);
  unsigned int v176 = ((BYTE1(v165) ^ 0xBB | 0xB0B85D0A) - (BYTE1(v165) ^ 0xBB | 0x4F47A2F5) + 1330094837) ^ 0x3AA8DF0A;
  int v177 = dword_1002171F0[(((v140 ^ BYTE1(v119)) ^ 0x848821B3)
                        + ((v140 ^ BYTE1(v119)) & 0xAB ^ 0x4062DC08)
                        - (((v140 ^ BYTE1(v119)) ^ 0x848821B3) & 0x48821AB)) ^ 0xC062DCF8];
  HIDWORD(v15fseek(v0, 0LL, 2) = v177 ^ 0xFE;
  LODWORD(v15fseek(v0, 0LL, 2) = v177 ^ 0x9CA6E00;
  unsigned int v178 = dword_10023A270[HIBYTE(v146) ^ 6] ^ *((_DWORD *)&unk_100218A50 + (BYTE1(v165) ^ 0xCEu)) ^ v174 ^ ((v152 >> 8) - ((2 * (v152 >> 8)) & 0xACA17D36) - 699351397) ^ (((2 * v176) & 0xBE2226C) - v176 + 2047798985) ^ (((32 * v174) ^ 0x9C67AFE0) - ((2 * ((32 * v174) ^ 0x9C67AFE0)) & 0xDBAE5840) - 304665557);
  int v179 = dword_100213260[BYTE2(v165) ^ 0x72];
  unsigned int v180 = (33 * (v179 ^ 0x3CE33D7F)) ^ 0xF375CEBF;
  unsigned int v181 = (66 * (v179 ^ 0x3CE33D7F)) & 0xE6EB9D7E;
  int v182 = ((v140 >> 8) & 0x31 ^ 0x26C020) + ((v140 >> 8) & 0xCE ^ 0x1010D05) - 1;
  unsigned int v183 = ((((v179 << 6) ^ 0x38CF5FC0) - ((2 * ((v179 << 6) ^ 0x38CF5FC0)) & 0xA6492B00) + 1394906540) ^ 0x532495AC) & ((((2 * v179) ^ 0x79C67AFE) - ((2 * ((2 * v179) ^ 0x79C67AFE)) & 0xDDCEB768) + 1860656053) ^ 0x6EE75BB5);
  unsigned int v184 = (((2 * (BYTE1(v140) ^ 0xAB)) & 0x19A) - (BYTE1(v140) ^ 0xAB) - 867044302) ^ 0xC872F003;
  int v185 = v181 + v180 + (v183 ^ 0x452A0A90) - ((2 * v183) & 0x75ABEADE) + 1;
  unsigned int v186 = (((v146 ^ v142) ^ 0x54 | 0x9632531C)
  int v187 = dword_1002171F0[(((2 * v186) | 0xF0BA8DBA) - v186 - 2019378909) ^ 0x78516716];
  HIDWORD(v15fseek(v0, 0LL, 2) = v187 ^ 0xFE;
  LODWORD(v15fseek(v0, 0LL, 2) = v187 ^ 0x9CA6E00;
  unsigned int v188 = *((_DWORD *)&unk_100218A50 + ((((2 * v184) & 0x8020526) - v184 + 2070568300) ^ 0x7F4959DC)) ^ dword_10023A270[HIBYTE(v155) ^ 0x98] ^ ((v182 & 0x23D15 ^ 0xAC803101) + (v182 & 0x5C2EA ^ 0x410DC26B) - 1) ^ (v185 - ((2 * v185 + 247483744) & 0x6D032672) - 35538455) ^ ((v152 >> 8) - ((2 * (v152 >> 8)) & 0x8B809C76) + 1170230843);
  unsigned int v189 = (((v164 + 371) & 0xA9 ^ 0x5C4F9209) + ((v164 + 371) & 0x56 ^ 0x13) - 1) ^ 0xD6859329;
  int v190 = dword_100213260[(v189 - ((2 * v189) & 0x59003F4) - 153327110) ^ 0x7C1668A3];
  int v191 = BYTE1(v146);
  unsigned int v192 = ((v191 ^ 0xD7) - ((2 * (v191 ^ 0xD7)) & 0x48) - 921249756) ^ 0xC91658A5;
  unsigned int v193 = v190 ^ dword_10023A270[HIBYTE(v165) ^ 0xA6] ^ (((32 * v190) ^ 0x9C67AFE0)
                                                      - ((2 * ((32 * v190) ^ 0x9C67AFE0)) & 0x4C28F140)
                                                      + 638875812);
  int v194 = ((2 * (v191 ^ 0x23)) | 0x4D57059C) - (v191 ^ 0x23) + 1498709298;
  int v195 = *((_DWORD *)&unk_100218A50 + (((v194 & 0x21002E ^ 0x51000C27) + (v194 & 0x268A83D1) - 1) ^ 0x77AB8EE8u));
  unsigned int v196 = v195 ^ 0x92B6F22C;
  unsigned int v197 = (v195 ^ 0x92B6F22C) + (v195 ^ 0x5F5D54C5 ^ v193) + 1;
  unsigned int v198 = (v193 ^ ((v193 ^ 0xCDEBA6E9) - ((2 * (v193 ^ 0xCDEBA6E9) + 2) & 0x3DA9A1E8) - 1630220043) ^ (v197 - ((2 * v197) & 0xD9C3A8B2) - 320744359) ^ 0x40215DBB)
       + v196;
  int v199 = dword_1002171F0[((v155 ^ 0x19480874 | 0xC2F74160)
  HIDWORD(v15fseek(v0, 0LL, 2) = v199 ^ 0xFE;
  LODWORD(v15fseek(v0, 0LL, 2) = v199 ^ 0x9CA6E00;
  unsigned int v200 = (v198 - ((2 * v198) & 0x7766FA26) + 1001618707) ^ ((v152 >> 8) - ((2 * (v152 >> 8)) & 0x7EA01F3C) + 1062211486) ^ (((2 * v192) | 0xE189770A) - v192 + 255542395);
  int v201 = dword_100213260[BYTE2(v178) ^ 0xC9];
  unsigned int v202 = ((BYTE1(v188) ^ 0xEE) - ((2 * (BYTE1(v188) ^ 0xEE)) & 0x66666666) + 13812531) ^ 0xD36E12E2;
  __int16 v203 = (v200 ^ 0xC6) + (v200 & 0xB6 ^ 0x8D30) - ((v200 ^ 0xC6) & 0xB6);
  int v204 = dword_1002171F0[((v203 & 0x5C0 ^ 0xDA2081) + (v203 & 0x23F) - 1) ^ 0xDA25F6];
  HIDWORD(v15fseek(v0, 0LL, 2) = v204 ^ 0xFE;
  LODWORD(v15fseek(v0, 0LL, 2) = v204 ^ 0x9CA6E00;
  unsigned int v205 = v201 ^ dword_10023A270[HIBYTE(v175) ^ 0x62] ^ (((32 * v201) ^ 0x9C67AFE0)
                                                      - ((2 * ((32 * v201) ^ 0x9C67AFE0)) & 0x7368C40)
                                                      + 60507681) ^ *((_DWORD *)&unk_100218A50
                                                                    + ((((v188 >> 8) & 3)
                                                                      + ((v188 >> 8) & 0xFC ^ 0x4075)
                                                                      - 1) ^ 0x40A6)) ^ (((2 * v202) | 0x34AB9E22)
                                                                                       - v202
                                                                                       - 441831185) ^ ((v152 >> 8) - ((2 * (v152 >> 8)) & 0x2D061FCA) + 377688037);
  int v206 = dword_100213260[BYTE2(v188) ^ 0x99];
  unsigned int v207 = dword_1002171F0[((v175 ^ 0xDB | 0x6E26C621)
  int v208 = ((v207 >> 8) ^ 0x161B46E1) + 1;
  int v209 = v208 ^ 0x6FFCFBFA;
  int v210 = (2 * v208) & 0xFF9F7F4;
  int v211 = (v207 >> 8) & 0x128C8F;
  int v212 = ((v207 >> 7) & 0x211818 ^ 0x13D956B8) + (v211 ^ 0x76115422) + v209 + v210;
  unsigned int v213 = ((v211 ^ 0xC0C) + ((v207 >> 8) & 0x12000F ^ 0x4B62133) - ((v211 ^ 0xC0C) & 0xFFFE007F)) ^ 0x8D389276 ^ (v212 - ((2 * v212 + 829780) & 0x131C6E96) + 2039778293);
  unsigned int v214 = ((v207 << 24) ^ 0x61EF2EEF) + (((v207 & 0x1F) << 25) ^ 0x3C000000) + 1611714833 + v213;
  int v215 = dword_100213260[BYTE2(v200) ^ 0x9B];
  unsigned int v216 = dword_10023A270[HIBYTE(v178) ^ 0x92] ^ v206 ^ (((32 * v206) ^ 0x9C67AFE0)
                                                      - ((2 * ((32 * v206) ^ 0x9C67AFE0)) & 0xF321600)
                                                      + 127470353) ^ (v214
                                                                    - 2 * (v214 & 0x7EA999D ^ v213 & 0x10)
                                                                    - 2014668403) ^ (((2 * (BYTE1(v200) ^ 0x43)) & 0xFFFFFF3F)
                                                                                   - (BYTE1(v200) ^ 0x43)
                                                                                   + 925784928) ^ *((_DWORD *)&unk_100218A50
                                                                                                  + (((BYTE1(v200) ^ 0x78) - ((2 * (BYTE1(v200) ^ 0x78)) & 0x148) + 4772) ^ 0x1210u));
  int v217 = ((BYTE1(v175) ^ 0x9A) + ((v175 >> 8) & 0xA6 ^ 0xE8B5024) - ((BYTE1(v175) ^ 0x9A) & 0xA6)) ^ 0x7CE519A;
  unsigned int v218 = ((v175 >> 8) & 0x49 ^ 0xEA300848) + ((v175 >> 8) & 0xB6 ^ 0x100D297) - 1;
  int v219 = dword_1002171F0[v178 ^ 0x2B];
  HIDWORD(v15fseek(v0, 0LL, 2) = v219 ^ 0xFE;
  LODWORD(v15fseek(v0, 0LL, 2) = v219 ^ 0x9CA6E00;
  unsigned int v220 = dword_10023A270[HIBYTE(v188) ^ 0xE0] ^ *((_DWORD *)&unk_100218A50
                                                + (((v218 & 0x97E ^ 0x8948007) + (v218 & 0x1281) - 1) ^ 0x8949A4E)) ^ v215 ^ (((2 * v217) & 0x128219F6) - v217 + 1679569668) ^ ((v152 >> 8) - ((2 * (v152 >> 8)) & 0xD3DCEC90) + 1777235528) ^ (((32 * v215) ^ 0x9C67AFE0) - ((2 * ((32 * v215) ^ 0x9C67AFE0)) & 0x6D270F40) + 915638198);
  int v221 = dword_10023A270[HIBYTE(v200) ^ 0x41];
  unsigned int v222 = (v221 ^ 0xD71CE332) + 1;
  v221 ^= 0xA4328610;
  unsigned int v223 = v221 + (v222 ^ 0x7FBF7AFD) + ((2 * v222) & 0xFF7EF5FA) - 2143255293;
  int v224 = dword_100213260[BYTE2(v175) ^ 0xFB];
  int v225 = ((v223 - ((2 * v223) & 0xDE6DC38C) + 1865867718) ^ 0x90C91E38) + v221;
  int v226 = 2 * (v178 >> 8);
  int v227 = v226 & 0xD6;
  int v228 = ((v226 ^ 0x78) - ((2 * (v226 ^ 0x78)) & 0x80) + 64) & 0xE0;
  unsigned int v229 = (BYTE1(v178) ^ 0xFE7FF6D7) + (v227 ^ 0x50) + (v228 ^ 0xA6220853);
  int v230 = dword_1002171F0[v188 ^ 0xD9];
  HIDWORD(v15fseek(v0, 0LL, 2) = v230 ^ 0xFE;
  LODWORD(v15fseek(v0, 0LL, 2) = v230 ^ 0x9CA6E00;
  int v231 = dword_100213260[BYTE2(v216) ^ 0xF9];
  unsigned int v232 = *((_DWORD *)&unk_100218A50 + v229 + ((2 * v228) ^ 0xFFFFFF7F) + 1532887539) ^ v224 ^ (((32 * v224) ^ 0x9C67AFE0)
                                                                                             - ((2
                                                                                               * ((32 * v224) ^ 0x9C67AFE0)) & 0x85C03EC0)
                                                                                             + 1121984356) ^ ((v152 >> 8) - ((2 * (v152 >> 8)) & 0x813BE192) - 1063391031) ^ (v225 - ((2 * v225) & 0x9AF98) + 317388);
  unsigned int v233 = (((2 * (BYTE1(v220) ^ 8)) | 0x9E2A33CC) - (BYTE1(v220) ^ 8) - 1326782950) ^ 0x775509F2;
  int v234 = ((BYTE1(v220) ^ 0x1A) - ((2 * (BYTE1(v220) ^ 0x1A)) & 0x94) - 610658998) ^ 0x63F1C31E;
  unsigned int v235 = (((v232 ^ BYTE1(v178)) ^ 0x1D | 0xF6BF4929)
  int v236 = dword_1002171F0[(((2 * v235) | 0xE6FB2614) - v235 - 1937609482) ^ 0x727551B2];
  HIDWORD(v15fseek(v0, 0LL, 2) = v236 ^ 0xFE;
  LODWORD(v15fseek(v0, 0LL, 2) = v236 ^ 0x9CA6E00;
  unsigned int v237 = dword_10023A270[HIBYTE(v205) ^ 0x98] ^ v231 ^ (((32 * v231) ^ 0x9C67AFE0)
                                                      - ((2 * ((32 * v231) ^ 0x9C67AFE0)) & 0xCD5EA180)
                                                      - 424718133) ^ *((_DWORD *)&unk_100218A50
                                                                     + ((v234 - ((2 * v234) & 0x10078528) + 1326967444) ^ 0xF77C3C1E)) ^ (v233 - 875586880 - ((2 * v233) & 0x179F36FC) + 190) ^ ((v152 >> 8) - ((2 * (v152 >> 8)) & 0x668897A4) - 1287369774);
  int v238 = dword_100213260[BYTE2(v220) ^ 0x56];
  int v239 = dword_1002171F0[((((v205 & 0xD9 ^ 0xBF99F491) & 0x4F4 | v205 & 0x24) ^ 0x81A5365)
                        + ((v205 & 0xD9 ^ 0xBF99F491) & 0xB | v205 & 2)
                        - 1) ^ 0x81A57AA];
  HIDWORD(v15fseek(v0, 0LL, 2) = v239 ^ 0xFE;
  LODWORD(v15fseek(v0, 0LL, 2) = v239 ^ 0x9CA6E00;
  unsigned int v240 = dword_10023A270[HIBYTE(v216) ^ 0x57] ^ v238 ^ (((32 * v238) ^ 0x9C67AFE0)
                                                      - ((2 * ((32 * v238) ^ 0x9C67AFE0)) & 0x28C07C00)
                                                      + 341851677) ^ *((_DWORD *)&unk_100218A50
                                                                     + ((((2 * (BYTE1(v232) ^ 0xE0)) | 0xCAF836E)
                                                                       - (BYTE1(v232) ^ 0xE0)
                                                                       + 1772633673) & 0x1FFFFFFF ^ 0x1657C149u)) ^ (((v232 >> 8) & 0x39 ^ 0x4CA25B18) + ((v232 >> 8) & 0xC6 ^ 0x87) - 1) ^ ((v152 >> 8) - ((2 * (v152 >> 8)) & 0xE2DC8E02) - 244431103);
  int v241 = dword_100213260[(((2 * (BYTE2(v232) ^ 0x60CB40A4)) & 0x1960044) - (BYTE2(v232) ^ 0x60CB40A4) + 1812219869) ^ 0xCCF07FC];
  unsigned int v242 = dword_10023A270[HIBYTE(v220) ^ 0x6D] ^ ((BYTE1(v205) ^ 0x58A20096 | 0xCEC9EF69)
                                               - (BYTE1(v205) ^ 0x58A20096 | 0x31361096)
                                               + 825626774) ^ *((_DWORD *)&unk_100218A50
                                                              + ((((2 * (BYTE1(v205) ^ 0xF1)) | 0xE8D6D8FE)
                                                                - (BYTE1(v205) ^ 0xF1)
                                                                - 1953197183) ^ 0x746B6CE0)) ^ v241 ^ (((32 * v241) ^ 0x9C67AFE0) - 331340032 - ((2 * ((32 * v241) ^ 0x9C67AFE0)) & 0xD8805980) + 1491);
  HIDWORD(v15fseek(v0, 0LL, 2) = v242 ^ 0xE;
  LODWORD(v15fseek(v0, 0LL, 2) = v242 ^ 0x65787380;
  int v243 = dword_1002171F0[v216 ^ 3];
  int v244 = (v152 >> 6) - ((2 * (v152 >> 6)) & 0x8C9877C2) - 968082463;
  HIDWORD(v15fseek(v0, 0LL, 2) = v243 ^ 0xFE;
  LODWORD(v15fseek(v0, 0LL, 2) = v243 ^ 0x9CA6E00;
  int v245 = (v152 >> 8) + 1841055616 - ((2 * (v152 >> 8)) & 0xDB788F0E) + 7;
  HIDWORD(v15fseek(v0, 0LL, 2) = v245 ^ 7;
  LODWORD(v15fseek(v0, 0LL, 2) = v245 ^ 0x6DBC4780;
  int v246 = ((v152 >> 6) - ((2 * (v152 >> 6)) & 0xD27EE43C) - 381717986) ^ v244;
  HIDWORD(v15fseek(v0, 0LL, 2) = v246 ^ 0x2DC76C2;
  LODWORD(v15fseek(v0, 0LL, 2) = v246 ^ 0xDFFFFFFF;
  unsigned int v247 = (v152 >> 26) - ((2 * (v152 >> 26)) & 0x660BCE34) + 856024858;
  int v248 = dword_100213260[((BYTE2(v205) ^ 9) - ((2 * (BYTE2(v205) ^ 9)) & 0x11C) + 654) ^ 0x2E5];
  unsigned int v249 = ((v220 ^ 0x4F) - ((2 * (v220 ^ 0x4F)) & 0x86) - 1599515069) ^ 0x90AB17F1;
  unsigned int v250 = (((2 * (BYTE1(v216) ^ 0x86)) & 0x44444444) - (BYTE1(v216) ^ 0x86) - 1690960675) ^ 0xCE655E89;
  int v251 = dword_1002171F0[((v249 | 0x5F1DAE99) - (v249 | 0xA0E25166) - 1595780762) ^ 0x6F1FEF2F];
  HIDWORD(v15fseek(v0, 0LL, 2) = v251 ^ 0xFE;
  LODWORD(v15fseek(v0, 0LL, 2) = v251 ^ 0x9CA6E00;
  unsigned int v252 = v248 ^ dword_10023A270[HIBYTE(v232) ^ 0x3B] ^ *((_DWORD *)&unk_100218A50
                                                       + ((((2 * (BYTE1(v216) ^ 0x8809919A)) | 0x3EA6B1E2)
                                                         - (BYTE1(v216) ^ 0x8809919A)
                                                         + 1621927695) ^ 0x175AC9C2)) ^ ((v152 >> 8)
                                                                                       - ((2 * (v152 >> 8)) & 0xDBA6D3C4)
                                                                                       - 304911902) ^ (((2 * v250) | 0xE90BA558) - v250 - 1954927276) ^ (((32 * v248) ^ 0x9C67AFE0) - ((2 * ((32 * v248) ^ 0x9C67AFE0)) & 0x2AEC7180) - 1787414317);
  int v253 = dword_100213260[BYTE2(v237) ^ 0x42];
  unsigned int v254 = v253 ^ dword_10023A270[HIBYTE(v252) ^ 0x77] ^ 0x1B5629BF ^ (((32 * v253) ^ 0x9C67AFE0)
                                                                   - ((2 * ((32 * v253) ^ 0x9C67AFE0)) & 0xBE49D940)
                                                                   + 1596255394);
  unsigned int v255 = (v254 & 0x800029 ^ 0x8C2969) - (v254 & 0x800029) + (v254 & 0xDDE3163B ^ 0x50030410);
  int v256 = (v254 & 0x14C0C0 ^ 0x8000) - ((2 * v254) & 0x88100) + 33909438;
  unsigned int v257 = ((v254 & 0x22082904 ^ 0xC003A174) - ((2 * (v254 & 0x22082904 ^ 0xC003A174)) & 0xC41240A8) + 2077040733) ^ 0xBBCEA12D;
  unsigned int v258 = ((v257 | v256 & 0x3FFC3C0 ^ 0x2150200)
        - 2 * ((v257 | v256 & 0x3FFC3C0 ^ 0x2150200) & 0x661A9458 ^ v257 & 8)
        - 434465709) ^ 0xE61A9453 | v255 ^ 0xED2952;
  int v259 = dword_1002171F0[(((2 * (v247 ^ 0x88)) & 0x134) - (v247 ^ 0x88) + 2917) ^ 0xB80];
  HIDWORD(v15fseek(v0, 0LL, 2) = v259 ^ 0xFE;
  LODWORD(v15fseek(v0, 0LL, 2) = v259 ^ 0x9CA6E00;
  unsigned int v260 = *((_DWORD *)&unk_100218A50
         + ((((2 * (BYTE1(v240) ^ 0x20940606)) & 0x4108093C) - (BYTE1(v240) ^ 0x20940606) - 652602783) ^ 0xF98E1419)) ^ BYTE1(v240) ^ ((v152 >> 8) - ((2 * (v152 >> 8)) & 0xCB14EF4A) - 443910235) ^ (v258 - ((2 * v258) & 0xEC481EA6) + 1982074707);
  unsigned int v261 = (((*((_BYTE *)&unk_100218A50
                             + 4
                             * ((((2 * (BYTE1(v240) ^ 0x20940606)) & 0x4108093C) - (BYTE1(v240) ^ 0x20940606) - 652602783) ^ 0xF98E1419)) ^ BYTE1(v240) ^ (BYTE1(v152) - ((2 * BYTE1(v152)) & 0x4A) - 91) ^ (v258 - ((2 * v258) & 0xA6) + 83)) ^ 0x7FFBB4C2)
        - 2147202159
        + ((2 * v260) & 0xDE ^ 0x5A))
       % 0x72;
  int v262 = dword_100213260[((BYTE2(v240) ^ 0x23) - ((2 * (BYTE2(v240) ^ 0x23)) & 0x16) + 17163) ^ 0x4361];
  BOOL v263 = ((2 * v261) & 0xE6) + (v261 ^ 0xCFEBDFF3) == -806625293;
  int v264 = dword_1002171F0[v252 ^ 0x45];
  HIDWORD(v15fseek(v0, 0LL, 2) = v264 ^ 0xFE;
  LODWORD(v15fseek(v0, 0LL, 2) = v264 ^ 0x9CA6E00;
  unsigned int v265 = v262 ^ dword_10023A270[HIBYTE(v237) ^ 0x5B] ^ (((32 * v262) ^ 0x9C67AFE0)
                                                      - ((2 * ((32 * v262) ^ 0x9C67AFE0)) & 0xBC720700)
                                                      + 1580794782) ^ ((v152 >> 8)
                                                                     - ((2 * (v152 >> 8)) & 0x89CBB5AE)
                                                                     - 991569193) ^ *((_DWORD *)&unk_100218A50
                                                                                    + (BYTE1(v247) ^ 0xA8u));
  int v266 = dword_100213260[BYTE2(v247) ^ 0x69];
  unsigned int v267 = (((32 * v266) ^ 0x9C67AFE0) - ((2 * ((32 * v266) ^ 0x9C67AFE0)) & 0xB66D6D00) + 1530312349) ^ v266;
  HIDWORD(v15fseek(v0, 0LL, 2) = v267 ^ 0x13F42BC;
  LODWORD(v15fseek(v0, 0LL, 2) = v267 ^ 0x40000000;
  int v268 = (v152 >> 25) - ((2 * (v152 >> 25)) & 0xD192EB74) + 1758033338;
  HIDWORD(v15fseek(v0, 0LL, 2) = v268 ^ 0x29;
  LODWORD(v15fseek(v0, 0LL, 2) = v268 ^ 0x1DADDA80;
  unsigned int v270 = (((v252 >> 7) & 0x62) + (BYTE1(v252) ^ 0xFFFFFF3F) + 647136719) ^ 0x56A2555E;
  unsigned int v271 = *((_DWORD *)&unk_100218A50 + ((((2 * v270) & 0xC020A542) - v270 - 1855675042) ^ 0xE154754E)) ^ dword_10023A270[HIBYTE(v240) ^ 0x49] ^ ((BYTE1(v252) | 0xF26A8D8E) - (BYTE1(v252) | 0xE06A0100) + (BYTE1(v252) & 0x71 | 0xA0420000)) ^ (((v269 << 24) ^ 0xFE000000) - ((2 * ((v269 << 24) ^ 0xFE000000)) & 0x22222222) + 289895750) ^ ((v152 >> 7) - ((2 * (v152 >> 7)) & 0xDB7FA89C) - 306195378);
  int v272 = (((2 * (BYTE2(v252) ^ 0xA4)) & 0xE6) - (BYTE2(v252) ^ 0xA4) + 2010096012) ^ 0x724FB13E;
  int v273 = dword_100213260[(((2 * v272) | 0x3E405808) - v272 + 1625281532) ^ 0x9AA03CEA];
  int v274 = ((v237 >> 8) & 0x6A ^ 0x3F33249) - ((v237 >> 8) & 0x95) + 2013269140;
  unsigned int v275 = ((BYTE1(v237) ^ 0x92) - ((2 * (BYTE1(v237) ^ 0x92)) & 0x104) - 856032126) ^ 0xCCE8EEA3;
  int v276 = dword_1002171F0[((v240 ^ 0x2C) - ((2 * (v240 ^ 0x2C)) & 0xE4) + 1659683186) ^ 0x62ECC1B4];
  HIDWORD(v15fseek(v0, 0LL, 2) = v276 ^ 0xFE;
  LODWORD(v15fseek(v0, 0LL, 2) = v276 ^ 0x9CA6E00;
  unsigned int v277 = v273 ^ v274 ^ dword_10023A270[HIBYTE(v247) ^ 5] ^ *((_DWORD *)&unk_100218A50
                                                           + ((((2 * v275) | 0x1E4BD0F2) - v275 + 1893341063) ^ 0x8F34FA0D)) ^ (((32 * v273) ^ 0x9C67AFE0) - ((2 * ((32 * v273) ^ 0x9C67AFE0)) & 0x7AF9AC80) - 1115892153) ^ ((v152 >> 8) - ((2 * (v152 >> 8)) & 0x375B542C) + 464366102);
  unsigned int v278 = v271 ^ (v269 >> 8);
  unsigned int v279 = HIBYTE(v271) ^ 0x87;
  int v282 = (v261 ^ 0x2ABD3D39) - 717045049 + ((2 * v261) & 0x72);
  if (!v263) {
    int v282 = 0;
  }
  int v283 = (((v260 ^ 0x1E1FA2AD) - v282) ^ 0xED) + ((2 * ((v260 ^ 0x1E1FA2AD) - v282)) & 0xDA) + 19;
  int v284 = dword_1002171F0[(v283 + 1524937047 - ((2 * v283) & 0x1C8) + 141) ^ 0x5AE4B157];
  HIDWORD(v285) = v284 ^ 0xFE;
  LODWORD(v285) = v284 ^ 0x9CA6E00;
  int v286 = dword_100213260[BYTE2(v277) ^ 0x64];
  unsigned int v281 = (BYTE1(v277) ^ 0xA10484B3 | 0x105AB14E) - (BYTE1(v277) ^ 0xA10484B3 | 0xEFA54EB1) - 274379087;
  int v280 = dword_100213260[((BYTE2(v278) ^ 0x27 | 0x3587B564) - (BYTE2(v278) ^ 0x27 | 0xA784A9B) + 175655579) ^ 0x3587B5C2];
  unsigned int v287 = v280 ^ dword_10023A270[HIBYTE(v265) ^ 0x72] ^ *((_DWORD *)&unk_100218A50 + (v281 ^ 0xB15E353E)) ^ v281 ^ (((32 * v280) ^ 0x9C67AFE0) + 1377971556 - ((2 * ((32 * v280) ^ 0x9C67AFE0)) & 0xA4445E00) + 429) ^ ((v285 >> 8) - ((2 * (v285 >> 8)) & 0xC97E0D9E) - 457242929);
  int v288 = dword_1002171F0[(v265 ^ BYTE1(v247)) ^ 0xE7];
  HIDWORD(v285) = v288 ^ 0xFE;
  LODWORD(v285) = v288 ^ 0x9CA6E00;
  int v289 = (HIWORD(v260) & 0x11) + (HIWORD(v260) & 0xEE ^ 0x3EEAF609) - 1;
  unsigned int v290 = dword_10023A270[v279] ^ v286 ^ *((_DWORD *)&unk_100218A50
                                        + (((BYTE1(v260) ^ 0x4B | 0x3DFB02F3)
                                          - (BYTE1(v260) ^ 0x4B | 0x204FD0C)
                                          + 33881356) ^ 0x3DFB026Au)) ^ (((32 * v286) ^ 0x9C67AFE0)
                                                                       - ((2 * ((32 * v286) ^ 0x9C67AFE0)) & 0xBCCB2E40)
                                                                       + 1583716150) ^ ((v285 >> 8)
                                                                                      - ((2 * (v285 >> 8)) & 0xB0F899C0)
                                                                                      - 662942496) ^ ((BYTE1(v260) ^ 0x46780AAB) + ((v260 >> 8) & 0xFB ^ 0x8071050) - ((BYTE1(v260) ^ 0x46780AAB) & 0x404008FB));
  int v291 = dword_100213260[((v289 & 0x43) + 537419775 + (v289 & 0x3BC ^ 0x9414093D)) ^ 0xB41C6B33];
  int v292 = dword_1002171F0[v278 ^ 0x97];
  HIDWORD(v285) = v292 ^ 0xFE;
  LODWORD(v285) = v292 ^ 0x9CA6E00;
  unsigned int v293 = dword_10023A270[HIBYTE(v277) ^ 0x97] ^ (((v265 >> 8) & 0x2E ^ 0x25) + ((v265 >> 8) & 0xD1) - 1) ^ *((_DWORD *)&unk_100218A50 + (BYTE1(v265) ^ 0x34u)) ^ v291 ^ (((32 * v291) ^ 0x9C67AFE0) - ((2 * ((32 * v291) ^ 0x9C67AFE0)) & 0x4A9FACC0) - 1521494401) ^ ((v285 >> 8) - ((2 * (v285 >> 8)) & 0x3F39CDF2) + 530376441);
  int v294 = dword_100213260[BYTE2(v265) ^ 0x8F];
  int v295 = ((2 * ((v278 >> 8) & 0xDD ^ 0x2000A950)) & 0x4000020A) - ((v278 >> 8) & 0xDD ^ 0x2000A950) + 1320484088;
  int v296 = dword_1002171F0[v277 ^ 0xFC];
  HIDWORD(v285) = v296 ^ 0xFE;
  LODWORD(v285) = v296 ^ 0x9CA6E00;
  unsigned int v297 = v294 ^ dword_10023A270[HIBYTE(v260) ^ 0x1E] ^ ((v278 >> 8) & 0x22 | 0xC33AD9D0) ^ (((32 * v294) ^ 0x9C67AFE0)
                                                                                          - ((2
                                                                                            * ((32 * v294) ^ 0x9C67AFE0)) & 0xCEF24840)
                                                                                          - 411491269) ^ ((v295 & 0x400004DD ^ 0xD9E567FA) + 1304556800 + ((2 * (v295 & 0x400004DD)) ^ 0x6C7D360B)) ^ *((_DWORD *)&unk_100218A50 + ((((2 * (BYTE1(v278) ^ 0x2D9A2FB)) & 0x24578) - (BYTE1(v278) ^ 0x2D9A2FB) - 17116093) ^ 0xFC2376B8)) ^ ((v285 >> 8) - ((2 * (v285 >> 8)) & 0xDC0BAEB6) + 1845876571);
  int v298 = dword_100213260[BYTE2(v290) ^ 0xEF];
  unsigned __int8 v299 = v293 ^ 0x11;
  int v300 = ((unsigned __int16)(v293 ^ 0x211) >> 8);
  unsigned int v301 = ((2 * (v300 ^ 0x2C)) | 0x9425DACE) - (v300 ^ 0x2C) - 1242754407;
  unsigned int v302 = ((v300 ^ 0x75 | 0xE0A2447A) - (v300 ^ 0x75 | 0x1F5DBB85) + 526236549) ^ 0xE726447D;
  int v303 = ((v297 ^ 0x3C) + (v297 & 0x53 ^ 0x7013F343) - ((v297 ^ 0x3C) & 0x53)) ^ 0x5189F143;
  int v304 = dword_1002171F0[(v303 - ((2 * v303) & 0x1243872) - 728515527) ^ 0xF509BE43];
  HIDWORD(v285) = v304 ^ 0xFE;
  LODWORD(v285) = v304 ^ 0x9CA6E00;
  unsigned int v305 = dword_10023A270[HIBYTE(v287) ^ 0xF9] ^ v298 ^ *((_DWORD *)&unk_100218A50
                                                       + (((v302 | 0x2623D372) - (v302 | 0xD9DC2C8D) - 639882099) ^ 0x21A7D342)) ^ (((32 * v298) ^ 0x9C67AFE0) - ((2 * ((32 * v298) ^ 0x9C67AFE0)) & 0x2E4808C0) + 388236391) ^ ((v285 >> 8) - ((2 * (v285 >> 8)) & 0x6FE25900) - 1208931200) ^ ((v301 & 0x48F522ED ^ 0xE50088) + (v301 ^ 0x4812EF67) - ((v301 ^ 0x4812EF67) & 0x48F522ED));
  int v306 = dword_100213260[BYTE2(v293) ^ 0x3B];
  unsigned int v307 = dword_1002171F0[((v287 ^ 0xD0045843 | 0x5C377B62)
  unsigned int v308 = HIBYTE(v293) ^ 0xFB;
  unsigned int v309 = dword_10023A270[HIBYTE(v290) ^ 0x7E] ^ v306 ^ *((_DWORD *)&unk_100218A50
                                                       + ((((2 * (BYTE1(v297) ^ 0xE4C1205C)) & 0x4980404E)
                                                         - (BYTE1(v297) ^ 0xE4C1205C)
                                                         + 1242285528) ^ 0xAECAE5A9)) ^ (v307 >> 8) ^ (((32 * v306) ^ 0x9C67AFE0) - ((2 * ((32 * v306) ^ 0x9C67AFE0)) & 0x57BDD0C0) + 736028796) ^ (((2 * (BYTE1(v297) ^ 0xCF)) & 0x1FC) - (BYTE1(v297) ^ 0xCF) + 513);
  int v310 = dword_100213260[((BYTE2(v297) ^ 0xF4) + (HIWORD(v297) & 0xEF ^ 0xA58CA70B) - ((BYTE2(v297) ^ 0xF4) & 0xFFFFFFEF)) ^ 0xA58CA75F];
  unsigned int v311 = (((v307 << 24) ^ 0xFE000000) - ((2 * ((v307 << 24) ^ 0xFE000000)) & 0xA000000) - 2051957248) ^ v309 ^ 0x6D55CA0;
  int v312 = (((v287 >> 8) & 0x5D ^ 0x2C757655) + ((v287 >> 8) & 0xA2 ^ 0xA1) - 1) ^ 0x397976BE;
  int v313 = ((2 * v312) & 0x281802AA) - v312 - 1448035670;
  unsigned int v314 = ((v290 ^ 0xE7 | 0xD4A6414) - (v290 ^ 0xE7 | 0xF2B59BEB) - 222979093) ^ 0x198BED14;
  unsigned int v315 = dword_1002171F0[((v314 | 0xE9262DC3) - (v314 | 0x16D9D23C) + 383373884) ^ 0xFDE7A488];
  int v316 = dword_100213260[BYTE2(v287) ^ 0xBC];
  unsigned int v317 = v310 ^ dword_10023A270[v308] ^ v313 ^ *((_DWORD *)&unk_100218A50
                                               + ((((2 * (BYTE1(v287) ^ 0x8C)) | 0xC50DA1EC)
                                                 - (BYTE1(v287) ^ 0x8C)
                                                 + 494481162) ^ 0xE286D04D)) ^ (v315 >> 8) ^ (((32 * v310) ^ 0x9C67AFE0)
                                                                                            - ((2
                                                                                              * ((32 * v310) ^ 0x9C67AFE0)) & 0x18453140)
                                                                                            + 203593889) ^ (((v315 << 24) ^ 0xFE000000) - ((2 * ((v315 << 24) ^ 0xFE000000)) & 0xDA000000) + 1835833541);
  unsigned int v318 = ((32 * v316) ^ 0x9C67AFE0) - ((2 * ((32 * v316) ^ 0x9C67AFE0)) & 0x6BB3E80) - 2091016372;
  int v319 = BYTE1(v290);
  int v320 = ((2 * (BYTE1(v290) ^ 0xD9)) & 0x112) - (BYTE1(v290) ^ 0xD9) + 2069670006;
  unsigned int v321 = ((v319 ^ 0x7C | 0xD968BD36) - (v319 ^ 0x7C | 0x269742C9) + 647447241) ^ 0x5B709F68;
  unsigned int v322 = (((2 * (v299 ^ 0x77)) & 0x38) - (v299 ^ 0x77) - 2060061) ^ 0xFDF0F9A1;
  int v323 = dword_1002171F0[(((2 * v322) | 0x915A7218) - v322 - 1219311884) ^ 0x4ABD50C1];
  HIDWORD(v285) = v323 ^ 0xFE;
  LODWORD(v285) = v323 ^ 0x9CA6E00;
  int v324 = dword_10023B420[BYTE2(v309) ^ 0xAC];
  int v325 = dword_10023A270[HIBYTE(v297) ^ 0xBB] ^ *((_DWORD *)&unk_100218A50
                                                + ((v321 - ((2 * v321) & 0x60FE3CDE) - 1333846417) ^ 0x32673C1E)) ^ v316 ^ ((v285 >> 8) - ((2 * (v285 >> 8)) & 0x53374738) - 1449417828) ^ ((v320 & 0x131003C4 ^ 0x1300) + (v320 ^ 0x3B37ACE6) - ((v320 ^ 0x3B37ACE6) & 0x6103C4));
  HIDWORD(v285) = v324 ^ 0xAB;
  LODWORD(v285) = v324 ^ 0x57C23400;
  unsigned int v326 = v325 ^ v318;
  unsigned int v327 = ((BYTE1(v317) ^ 0xE4) - ((2 * (BYTE1(v317) ^ 0xE4)) & 0x1A6) - 406818093) ^ 0xCFC923D2;
  int v328 = dword_100212E60[HIBYTE(v305) ^ 0x1A] ^ HIBYTE(v305) ^ dword_100239800[(((2 * (BYTE1(v317) ^ 0xD)) & 0x50)
                                                                              - (BYTE1(v317) ^ 0xD)
                                                                              + 727) ^ 0x2FA] ^ ((v285 >> 10)
                                                                                               - ((2 * (v285 >> 10)) & 0x1E5137C)
                                                                                               - 2131588674) ^ 0x9CF725DD;
  unsigned int v329 = v328 & 0xA1A9E454 ^ 0x6E8020A9;
  int v330 = ((v328 & 0x58160189 ^ 0x292CA045) + (v328 & 0x6401A22 ^ 0xA21) - 1) & 0x5E561BBF ^ 0x246100E;
  int v331 = dword_1002374F0[v326 ^ 0x3E];
  HIDWORD(v285) = v331 ^ 0x36352;
  LODWORD(v285) = v331 ^ 0x4CAC0000;
  unsigned int v332 = (v285 >> 18) - ((2 * (v285 >> 18)) & 0x91DBE52A) + 1223553685;
  unsigned int v333 = (((2 * v327) & 0x843C) - v327 + 2137601505) ^ v332 ^ (((v332 >> 2) & 0x21D899CA ^ 0x417CF200)
                                                             - ((2 * ((v332 >> 2) & 0x21D899CA ^ 0x417CF200)) & 0x3C81684)
                                                             + 165941095) ^ ((v330 | (v329 - 1) ^ 0x6E0920BC)
                                                                           - 2
                                                                           * ((v330 | (v329 - 1) ^ 0x6E0920BC) & 0x69165F8F ^ v330 & 8)
                                                                           - 384409721);
  unsigned int v334 = HIBYTE(v311) ^ 0x9FD654F2;
  int v335 = dword_100212E60[HIBYTE(v311) ^ 0x53];
  unsigned int v336 = ((v335 ^ 0x85145056) & v334) - ((2 * ((v335 ^ 0x85145056) & v334)) & 0xBACA840);
  unsigned int v337 = (((v335 ^ 0xC514D156) + v334) ^ 0xAFF76FFD)
       + ((2 * ((v335 ^ 0xC514D156) + v334)) & 0x5FEEDFFA)
       + ((2 * v336 - 877855680) ^ 0xD3A6E545)
       + ((2 * (2 * v336 - 877855680)) & 0xCFEBCDF4 ^ 0x78B6377F)
       + 1;
  int v338 = dword_10023B420[BYTE2(v317) ^ 0xF];
  HIDWORD(v285) = v338 ^ 0xAB;
  LODWORD(v285) = v338 ^ 0x57C23400;
  int v339 = (v285 >> 10) - ((2 * (v285 >> 10)) & 0x99646B50) + 1286747560;
  int v340 = (v305 ^ 0xD7) + (v305 & 0x67 ^ 0x2F960C20) - ((v305 ^ 0xD7) & 0x67);
  int v341 = dword_1002374F0[((v340 & 0x2040E6D ^ 0xC201) + (v340 ^ 0x5AAC3C7C) - ((v340 ^ 0x5AAC3C7C) & 0x511A266D)) ^ 0x2624DE29];
  int v342 = (HIBYTE(v317) ^ (v3 - 10)) - ((2 * (HIBYTE(v317) ^ (v3 - 10))) & 0x1E6) + 282005747;
  HIDWORD(v285) = v341 ^ 0x36352;
  LODWORD(v285) = v341 ^ 0x4CAC0000;
  unsigned int v343 = (v285 >> 18) - ((2 * (v285 >> 18)) & 0x1250DD0) + 9602792;
  unsigned int v344 = v339 ^ dword_100239800[((BYTE1(v326) ^ 0x4BD009D | 0x4097476B)
                               - (BYTE1(v326) ^ 0x4BD009D | 0xBF68B894)
                               - 1083656044) ^ 0x442A4776] ^ v343 ^ (((2 * (BYTE1(v326) ^ 0x2278148)) | 0x7E6591C)
                                                                   - (BYTE1(v326) ^ 0x2278148)
                                                                   - 66268302) ^ (((v343 >> 2) & 0x21D899CA ^ 0x1000982)
                                                                                + ((v343 >> 2) & 0x21988800 ^ 0xF0B8A235)
                                                                                - (((v343 >> 2) & 0x21D899CA ^ 0x1000982) & 0x21988800)) & 0xFFFFF9CA ^ (v337 - ((2 * v337 + 1878846972) & 0x80067B40) - 134105954);
  int v345 = dword_10023B420[BYTE2(v326) ^ 0x69];
  HIDWORD(v285) = v345 ^ 0xAB;
  LODWORD(v285) = v345 ^ 0x57C23400;
  int v346 = BYTE1(v305);
  unsigned int v347 = (((2 * (BYTE1(v305) ^ 0x36)) & 0xFFFFFF87) - (BYTE1(v305) ^ 0x36) + 572) ^ 0x2B8;
  LOBYTE(v341) = (((v344 & 0x12 ^ 0xFD) + 19) ^ 0x17) - ((2 * (((v344 & 0x12 ^ 0xFD) + 19) ^ 0x17)) & 0x2E) - 105;
  unsigned int v348 = (((2 * (v309 ^ 0x38)) | 0x24AE26DC) - (v309 ^ 0x38) + 1839787154) ^ 0xD7D7B1AE;
  int v349 = dword_1002374F0[((v348 | 0xCDCDAB73) - (v348 | 0x3232548C) + 842159244) ^ 0x884D095E];
  unsigned int v350 = ((((v349 ^ 0x4CAF6352u) >> (v341 ^ 0x80))
         - ((2 * ((v349 ^ 0x4CAF6352u) >> (v341 ^ 0x80))) & 0xA5DA30D4)
         - 756213654) ^ 0xD2ED186A) >> (v341 ^ 0x92);
  unsigned int v351 = (v350 - ((2 * v350) & 0x91E2A504) + 1223774850) ^ 0x48F15282 | (((v349 << 14) ^ 0xD8D48000)
                                                                       + 1371685430
                                                                       + (~(2 * ((v349 << 14) ^ 0xD8D48000)) | 0x5C7B7FFF)
                                                                       + 1) ^ 0x51C24236;
  unsigned int v352 = v351 - ((2 * v351) & 0xF4C7A390) + 2053362120;
  int v353 = ((2 * (BYTE2(v305) ^ 0xD2)) & 0x1F0) - (BYTE2(v305) ^ 0xD2) + 2142117639;
  unsigned int v354 = dword_10023B420[((v353 & 0x13846662 ^ 0x106060) + (v353 ^ 0xD7A51787) - ((v353 ^ 0xD7A51787) & 0x8086662)) ^ 0xB3976EC5];
  int v355 = (((v352 >> 2) & 0x1588908 ^ 0x423C2A2D) + ((v352 >> 2) & 0x208010C2 ^ 0x20801043) - 2) ^ 0x5664AF0D;
  unsigned int v356 = v342 ^ v346 ^ dword_100212E60[HIBYTE(v317) ^ 0x9A] ^ dword_100239800[v347] ^ ((v285 >> 10)
                                                                                     - ((2 * (v285 >> 10)) & 0x9ED373E2)
                                                                                     + 1332328945) ^ v352 ^ (((2 * v355) | 0x137E4B4) - v355 - 10220122);
  unsigned int v357 = (((2 * (BYTE1(v311) ^ 0x34)) | 0x642A968E) - (BYTE1(v311) ^ 0x34) + 1307227321) ^ 0x906C0957;
  unsigned int v358 = (((v311 >> 7) & 0x98) + (BYTE1(v311) ^ 0xFFFFFF7C) + 1947945396) ^ 0x74B241D4;
  int v359 = dword_100239800[(((2 * v358) | 0xEAAEBAFE) - v358 - 1968659839) ^ 0x75FE5532];
  unsigned int v360 = dword_100212E60[HIBYTE(v326) ^ 0xE6] ^ HIBYTE(v326) ^ (v354 >> 10) ^ (((v354 << 22) ^ 0x2AC00000)
                                                                             - ((2 * ((v354 << 22) ^ 0x2AC00000)) & 0xAC000000)
                                                                             + 1443026108);
  int v361 = v359 ^ 0x4C0C33B1;
  unsigned int v362 = (v359 ^ 0x4C0C33B1) + (v359 ^ v360 ^ 0xBF266D6E) + 1;
  unsigned int v363 = (v360 ^ ((v360 ^ 0xF32A5EDF) - ((2 * (v360 ^ 0xF32A5EDF) + 2) & 0xFE3156F2) - 15160454) ^ 0x24E84852 ^ (v362 - ((2 * v362) & 0xAE4A8416) - 685424117))
       + v361;
  unsigned int v364 = dword_1002374F0[v317 ^ 0xB7];
  unsigned int v365 = (v364 << 8) ^ 0xAF635200;
  unsigned int v366 = (((v365 - ((2 * v365) & 0xB0C89800) - 664515366) & 0x48000000 ^ 0x49C718A4)
        - ((v365 - ((2 * v365) & 0xB0C89800) - 664515366) & 0x48000000)
        + ((v365 - ((2 * v365) & 0xB0C89800) - 664515366) & 0xFC000000 ^ 0xA4000000)) ^ 0x9CC4B14D;
  int v367 = (v365 - ((2 * v365) & 0x1F25C00) + 16330459) & 0x3FFFF00 ^ 0x2AD0800;
  unsigned int v368 = ((v367 | 0x5BB13EB5) - (v367 | 0xA44EC14A) - 1538342582) ^ 0x45B51C9F;
  unsigned int v369 = (v366 - 1) ^ 0xA903A9E8 | HIBYTE(v364) ^ 0x4C;
  unsigned int v370 = (v369 - ((2 * v369) & 0xCCAFC12) - 2040168951) ^ 0x86657E09 | (((2 * v368) & 0xDBB7AB4) - v368 - 1188937051) ^ 0xA572468F;
  unsigned int v371 = v370 - ((2 * v370) & 0xC1DD229C) + 1626247502;
  HIDWORD(v285) = v371 ^ 0x19D3F54;
  LODWORD(v285) = v371 ^ 0xB0000000;
  unsigned int v372 = (v285 >> 26) - ((2 * (v285 >> 26)) & 0xD4D46C8) - 2035899548;
  unsigned int v373 = (v363 - ((2 * v363) & 0xF5F81A00) + 2063338752) ^ (((2 * v357) & 0x1826EA3E) - v357 + 1944881888) ^ v372 ^ (((v372 >> 2) & 0x21D899CA ^ 0x60340950) + ((v372 >> 2) & 0x20981980 ^ 0x68B5084) - (((v372 >> 2) & 0x21D899CA ^ 0x60340950) & 0x20BC1980));
  int v374 = (_BYTE *)STACK[0xAF8];
  int v375 = (_BYTE *)STACK[0xAF8];
  v374[10] = byte_100224200[(((2 * (BYTE1(v356) ^ 0x26000A6D)) & 0x400108C) - (BYTE1(v356) ^ 0x26000A6Du) - 54041671) ^ 0xDAC7692FLL] ^ 0x7D;
  int v376 = (BYTE1(v373) ^ 0x8D) - ((2 * (BYTE1(v373) ^ 0x8D)) & 0xA8) - 1048603820;
  v374[14] = byte_100224200[((v376 & 0xC1071E9B ^ 0x24000C9B) + (v376 ^ 0xC1BFD244) - ((v376 ^ 0xC1BFD244) & 0x401E9B)) ^ 0xE5875F15LL] ^ 0xEE;
  v374[1] = byte_1002228C0[(((2 * (BYTE2(v333) ^ 7)) | 0xAA881DF2) - (BYTE2(v333) ^ 7) + 716960007) ^ 0xD5440E31LL] ^ 0x51;
  v374[13] = byte_1002228C0[(((2 * (BYTE2(v373) ^ 0x2800011A)) & 0x100000CC) - (BYTE2(v373) ^ 0x2800011Au) + 649839513) ^ 0xEBBC2C3LL] ^ 0x51;
  LOBYTE(v301) = ((2 * (v356 ^ 0x90)) | 8) - (v356 ^ 0x90) + 124;
  LOBYTE(v37fseek(v0, 0LL, 2) = byte_100219D80[((v356 & 0x3A ^ 0xEFB9833) + (v356 & 0xC5) - 1) ^ 0xEFB98F9];
  LOBYTE(v301) = (v301 & 0xD0 ^ 0x41) + (v301 & 0x2F) - 1;
  LOBYTE(v326) = 2 * (((v301 ^ 0x59) & (v372 ^ 0x7D)) - ((2 * ((v301 ^ 0x59) & (v372 ^ 0x7D))) & 0x22)) - 94;
  LOBYTE(v37fseek(v0, 0LL, 2) = (v372 ^ v301 ^ 0x24) + (v326 ^ 0xD5) + ((2 * v326) & 0xEF ^ 0x44) - 119;
  v374[11] = (v372 + (~(2 * v372) | 0xC7) + 29) ^ 0x3A;
  LOBYTE(v37fseek(v0, 0LL, 2) = byte_1002391E0[HIBYTE(v333) ^ 0xE3LL];
  unsigned int v377 = ((2 * (BYTE2(v344) ^ 0x850022C5)) & 0x54A) - (BYTE2(v344) ^ 0x850022C5) - 1223188134;
  *int v375 = (v372 - 2 * ((v372 + 96) & 0xC3 ^ v372 & 2) + 33) ^ 0x44;
  unsigned int v378 = ((HIWORD(v344) & 7) + 788147455 + (HIWORD(v344) & 0xF8 ^ 0xD9)) ^ 0xACE62D17;
  unsigned int v379 = ((v378 | 0xC801DDCF) - (v378 | 0x37FE2230) + 939401776) ^ 0xB5E22217;
  unsigned int v380 = v377 ^ ((v377 ^ 0xCDE87CAD) - ((2 * (v377 ^ 0xCDE87CAD) + 2) & 0xB1EFE33E) + 1492644256) ^ 0x36B7F03E ^ (v379 - ((2 * v379 + 76) & 0xB8AF05E6) + 1549239065);
  v375[5] = byte_1002228C0[(v380 - 29003768 - ((2 * v380 + 74) & 0xFC8AE168) + 209) ^ 0xFE457008] ^ 0xEA;
  int v381 = ((BYTE2(v356) ^ 0x22) + (HIWORD(v356) & 0x97 ^ 0x60242895) - ((BYTE2(v356) ^ 0x22) & 0x97)) ^ 0x52362897;
  v375[2] = byte_100224200[(((2 * (BYTE1(v333) ^ 0x210140E8)) | 0x24D9420C) - (BYTE1(v333) ^ 0x210140E8u) - 309108998) ^ 0x336DE1BBLL] ^ 0xB7;
  v375[9] = byte_1002228C0[(((2 * v381) & 0x4040FDEu) - v381 + 836515856) ^ 0x3CE3854LL] ^ 0xF7;
  LOBYTE(v376) = byte_1002391E0[HIBYTE(v373) ^ 0xA1LL];
  v356 >>= 24;
  v375[12] = (v376 - ((2 * v376 + 64) & 0x6E) - 105) ^ 0x5E;
  unsigned int v382 = (v356 ^ 0xFFFFFFD8) + 1;
  v356 ^= 0x94u;
  unsigned int v383 = v356 + (v382 ^ 0x7F53A7B8) + ((2 * v382) & 0xFEA74F70) - 2136188856;
  unsigned int v384 = ((v383 - ((2 * v383) & 0xE5E17052) - 219105239) ^ 0xD0F47D7) + v356;
  LOBYTE(v384) = byte_1002391E0[(v384 - ((2 * v384) & 0x8BAED8D2) - 975737751) ^ 0xC5D76C9A];
  v375[8] = (v384 - 2 * ((v384 + 32) & 0x3C ^ v384 & 8) + 20) ^ 0x92;
  LOBYTE(v380) = (byte_100219D80[(((2 * (v344 ^ 0xF2)) | 0x2109D51A)
                                - (v344 ^ 0xF2u)
                                - 277146253) ^ 0x1084EA1ALL] ^ 0x7D)
               + (v344 ^ 0xA3);
  v375[7] = (v380 - ((2 * v380) & 0xA4) - 46) ^ 0x70;
  v375[6] = byte_100224200[(((v344 >> 8) & 0x19 ^ 0x2119) - ((v344 >> 8) & 0x19) + (BYTE1(v344) ^ 0x62)) ^ 0x2155LL] ^ 0x47;
  LOBYTE(v333) = (byte_100219D80[((v333 ^ 0x80503D0F)
                                + (v333 & 0xF2 ^ 0x482BC2F0)
  v375[3] = (v333 - ((2 * v333) & 0x33) + 25) ^ 0xD3;
  LOBYTE(v333) = byte_100219D80[(((2 * (v373 ^ 0xA00C0026)) | 0xA2567720)
  v375[15] = ((v373 ^ 0xA3) + (v333 ^ 0x7D) - ((2 * ((v373 ^ 0xA3) + (v333 ^ 0x7D))) & 0xF3) + 121) ^ 0xA;
  char v385 = byte_1002391E0[HIBYTE(v344) ^ 0x88LL];
  v375[4] = (v385 - ((2 * v385) & 0x20) - 16) ^ 0x15;
  unsigned int v386 = -1263679611
       * (((STACK[0x658] - 1274224556 + ((v5 + 2079808395) & 0xCFFBBFFE)) ^ *(_DWORD *)(qword_1002748C8
                                                                                      + (int)(dword_100274AD0 & 0xEA60C850))) & 0x7FFFFFFF);
  *(_BYTE *)(STACK[0x658] - 1274224556 + ((v5 + 2079808395) & 0xCFFBBFFE)) ^= byte_10023C420[((((_BYTE)v5 - 117) & 0xFE)
                                                                                            + 84) & 0xF | (16 * ((-1263679611 * (v386 ^ HIWORD(v386))) >> 24))] ^ (-123 * (v386 ^ BYTE2(v386)));
  return ((uint64_t (*)(void *, void *, uint64_t, _BYTE *))((char *)*(&off_10025C670 + v5) - 4))( &unk_100274000,  &unk_100274000,  4294967173LL,  byte_10023C420);
}

void sub_100132B4C()
{
}

uint64_t sub_100132B54()
{
  if (v1 + (v0 & 0xF9D89010) == ((v2 - 1274224542) ^ 0x34C4CF97)) {
    int v5 = v3;
  }
  else {
    int v5 = 1183856782;
  }
  LODWORD(STACK[0x93C]) = v5;
  BOOL v7 = v5 != ((v2 - 1274222890) ^ (v3 + 1666)) || STACK[0x760] == 0;
  return ((uint64_t (*)(void))(*(void *)(v4
}

uint64_t sub_100132BD4@<X0>(int a1@<W8>)
{
  unint64_t v2 = STACK[0x6E8];
  unint64_t v3 = STACK[0x6E8] + 16;
  BOOL v5 = STACK[0x6E8] < (unint64_t)&unk_1002124A0 && v3 > (unint64_t)&unk_100212490;
  char v9 = v2 < (unint64_t)&unk_100217D20 && v3 > (unint64_t)&unk_100217D10 || v5;
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((954 * ((a1 ^ v9) & 1)) ^ a1))
}

uint64_t sub_100132C74@<X0>(int a1@<W8>)
{
  int v3 = (a1 ^ 0x24) - 1289;
  *uint64_t v1 = veorq_s8(*v1, (int8x16_t)xmmword_100212420);
  int v4 = v3 + 1072;
  unint64_t v5 = STACK[0x910];
  *(void *)(v5 + 64) = 0xE8E125912DC2764BLL;
  *(void *)(v5 + 7fseek(v0, 0LL, 2) = 0xC5C1D9754D4951FDLL;
  *(void *)(v5 + 80) = 0x3A3E268AB2B6AE02LL;
  *(void *)(v5 + 9fseek(v0, 0LL, 2) = 0x2E986D5678E108A1LL;
  STACK[0x978] = *(void *)(v2 + 8LL * v3);
  STACK[0xA70] = v5;
  LODWORD(STACK[0x864]) = -721523658;
  STACK[0x6E0] = (unint64_t)&unk_100219854;
  unsigned int v6 = ((((v3 + 1072) ^ 0x2B4) - 1544) ^ 0x404304EF)
     + 16
     + ((2 * *(_DWORD *)(v5 + 68)) & 0x56 ^ 2)
     + (*(_DWORD *)(v5 + 68) & 0x3F ^ 0xBFBCFB7A);
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((668 * ((v6 ^ 0x43EF9BE7) - 1139776551 + ((2 * v6) & 0x87DF37CE) < 0xFFFFFFC0)) ^ v4))
                            - 4LL))();
}

uint64_t sub_100132D08()
{
  *(_BYTE *)(v0 + v4 - 104863390) ^= *(_BYTE *)(v3 + v4 - 104863390) ^ 0xE6;
  BOOL v6 = (v2 ^ 0x50ELL) + v4 != v1 + 16;
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * (int)(((4 * v6) | (32 * v6)) ^ v2)) - 12LL))();
}

uint64_t sub_100132D64()
{
  *(_DWORD *)((char *)&STACK[0xB80] + bzero(v1, v2) = 0;
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * (v0 ^ (49
                                               * ((unint64_t)&STACK[0xB80] + v1 - v3 + 0x3C4F01B69410812ALL < 0x10))))
                            - 277 * ((v0 - 1496564710) & 0x5933BFEB ^ 0x221u)
                            + 546LL))();
}

uint64_t sub_100132E34()
{
  *(_BYTE *)(v3 + v5 - 0x14AB1347AD7761B7LL) = *(_BYTE *)(v2 + v6 - 0x166F68EA9A901EELL);
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL * ((1039 * (v4 + ((v1 + 92799448) & 0xFA77FEF4) - 751 != v0 + 36)) ^ v1))
                            - 8LL))();
}

uint64_t sub_100132EB0()
{
  *(_OWORD *)(v2 + v0) = *(_OWORD *)(v3 + v0);
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * (((v0 != 16) * (v1 + 525)) ^ v1)) - 8LL))();
}

uint64_t sub_100132EE4()
{
  *(_DWORD *)(v2 + v1) = *(_DWORD *)(v3 + v1);
}

uint64_t sub_100132F18()
{
  *(_DWORD *)(v1 + 6_Block_object_dispose(va, 8) = 36;
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * (int)((501
                                               * ((v2 ^ 0x5D1FDFFE840FF125LL)
                                                - 0x5D1FDFFDFE345612LL
                                                + ((2LL * (v2 ^ 0x69620A42)) & 0x1DADBF6CELL) == (v0 ^ 0xEF39A7A5LL))) ^ v0))
                            - 12LL))();
}

uint64_t sub_100132FD4()
{
  *(_BYTE *)(v6 + v2 - 0x60FB828EAAEB6E9DLL) = *(_BYTE *)(v8 + v5 + (v9 ^ 0xEDC2077C6EC2339ALL));
  BOOL v11 = v7 - 0x6D86C42AA0D4077ALL < v3;
  if (v3 < v1 != v7 - 0x6D86C42AA0D4077ALL < v1) {
    BOOL v11 = v3 < v1;
  }
  return ((uint64_t (*)(void))(*(void *)(v10 + 8LL * ((!v11 * v4) ^ v0)) - 12LL))();
}

uint64_t sub_100133064@<X0>(int a1@<W8>)
{
  v2[34] = v1;
  STACK[0x830] = 140LL;
  BOOL v4 = IOConnectCallStructMethod((((v3 + 85) | 0x280) ^ 0xE30B2E4F) + a1, 0x23u, v2, 0x8CuLL, v2, &STACK[0x830]) == ((v3 - 158) ^ 0x30F);
  return ((uint64_t (*)(void))*(&off_10025C670 + ((1374 * v4) ^ v3)))();
}

uint64_t sub_1001330DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 8LL * ((31 * (*(_DWORD *)(v6 + 68) == (((v5 ^ 0x58D) - 1171) ^ 0x1CB))) ^ v5))
                                                                                       - 4LL))( a1,  a2,  a3,  a4,  a5,  4294925247LL);
}

uint64_t sub_100133118@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * ((23
                                          * (v2
                                           - ((void)&STACK[0xB80]
                                            + v1)
                                           - 0x3C4F01B694108322LL
}

uint64_t sub_1001331A4()
{
  *(_OWORD *)(v3 + v0) = *(_OWORD *)(v2 + v0);
}

uint64_t sub_1001331F4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W8>)
{
  *(_DWORD *)(v8 + v6) = *(_DWORD *)(v7 + v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(v9
                                                                                        + 8LL
                                                                                        * ((2043
                                                                                          * ((((a6 + 1) ^ (v6 == 32)) & 1) == 0)) ^ a6)))( a1,  a2,  a3,  a4,  a5,  0LL);
}

uint64_t sub_100133230@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W8>)
{
  *(_BYTE *)(v8 + v11 - 0x6354F8B6BE879DC0LL) = *(_BYTE *)(v7 + v10 - 0x346CB0CBACB74D77LL);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)(v12
                                                                                                  + 8LL * ((736 * (v9 + 1 == v6 + 36)) ^ a6))
                                                                                      - 4LL))( a1,  a2,  a3,  a4,  a5,  0LL);
}

uint64_t sub_1001332B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v7 + 8LL * ((1184 * (a6 == ((127 * (v6 ^ 0x687)) ^ 0x27B))) ^ (v6 - 1379))))();
}

uint64_t sub_1001332EC@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(v1 + 8LL * a1))( 4294967186LL,  ((a1 - 579) | 0xC2) ^ 0x69u,  4294967259LL);
}

void sub_1001333AC()
{
}

uint64_t sub_1001333B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * (((v6 ^ 0x7D3) * (a6 == 0)) ^ (v6 - 497))) - 4LL))();
}

uint64_t sub_1001333E0()
{
  int v1 = v0 ^ 0x2FB;
  BOOL v2 = malloc(0x20uLL) == 0LL;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + (((((v1 + 7) | 0x202) ^ 0x66A) * v2) ^ v1)) - 4))();
}

uint64_t sub_100133430(_BYTE *a1)
{
  *a1 = STACK[0xB80];
  a1[1] = STACK[0xB81];
  a1[2] = STACK[0xB82];
  a1[3] = STACK[0xB83];
  a1[4] = STACK[0xB84];
  a1[5] = STACK[0xB85];
  a1[6] = STACK[0xB86];
  a1[7] = STACK[0xB87];
  a1[8] = STACK[0xB88];
  a1[9] = STACK[0xB89];
  a1[10] = STACK[0xB8A];
  a1[11] = STACK[0xB8B];
  a1[12] = STACK[0xB8C];
  a1[13] = STACK[0xB8D];
  a1[14] = STACK[0xB8E];
  a1[15] = STACK[0xB8F];
  return (*(uint64_t (**)(void))(v2
                              + 8LL
}

void sub_100133560(unint64_t a1)
{
  v5.i64[0] = 0x404040404040404LL;
  v5.i64[1] = 0x404040404040404LL;
  v6.i64[0] = 0x202020202020202LL;
  v6.i64[1] = 0x202020202020202LL;
  int8x16_t *v2 = vaddq_s8(vsubq_s8(*v3, vandq_s8(vaddq_s8(*v3, *v3), v5)), v6);
  STACK[0x740] = a1;
  LODWORD(STACK[0x8AC]) = -1686371828;
  STACK[0x870] = ((((v1 - 2024879406) & 0x78B136A3u) - 1075) ^ 0xFFFFFFFFFFFFFD4FLL) + v4;
  JUMPOUT(0x100133648LL);
}

void sub_100133688()
{
}

uint64_t sub_100133698()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * (((STACK[0xA38] == 0) * (((v0 - 1446) | 0x180) + ((v0 - 1141) ^ 0x1F))) ^ v0))
                            - 8LL))();
}

uint64_t sub_1001336CC()
{
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + ((1531 * (STACK[0x908] != 0)) ^ ((v0 + 14) | 0x41))) - 8))();
}

uint64_t sub_100133718(void *a1)
{
  LODWORD(STACK[0x9F4]) = 68355794;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + (((STACK[0x888] != 0) * ((289 * (v1 ^ 0x1C2)) ^ 0x3CB)) ^ v1 ^ 0xFA))
                            - 8))();
}

uint64_t sub_100133770(void *a1)
{
  LODWORD(STACK[0xA84]) = 89714421;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + (((((STACK[0x740] == 0) ^ (((v1 + 68) & 0xE3) + 32)) & 1)
                                        * (((((v1 - 1058301372) & 0x3F1467E3) + 157) | 0x282) + 298)) ^ (v1 - 1058301372) & 0x3F1467E3))
                            - 8))();
}

uint64_t sub_1001337E0(void *a1)
{
  return ((uint64_t (*)(void))*(&off_10025C670 + ((941 * (STACK[0xA48] != 0)) ^ (v1 - 1233))))();
}

uint64_t sub_100133810(void *a1)
{
  return ((uint64_t (*)(unint64_t))((char *)*(&off_10025C670
                                                             + (int)(((v1 - 1381 + ((v1 + 648201080) & 0xD95D36FF) - 518)
                                                                    * (v2 != 0)) ^ (v1 - 1179)))
                                                   - 12))(STACK[0x9A8]);
}

uint64_t sub_100133868@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (((238 * (a2 ^ 0x11A) - 942) * (a1 != 0)) ^ a2)) - 4LL))();
}

void sub_100133898(void *a1)
{
  __asm { BR              X8 }

void sub_100133A4C(void *a1)
{
  *(_DWORD *)(v2 + 56) = v1;
}

void sub_100133A58()
{
  int v2 = v0 ^ (v1 - 1201617511) & 0xEE ^ 0x10 | ((v0 & 0xF0) >> 4) ^ 9;
  unsigned int v3 = (((v2 - ((2 * v2) & 0xC) - 122) & 0xFCu) >> 2) ^ 0x21 | (v2 - ((2 * v2) & 0xC) - 122) ^ 0xFFFFFF86;
  *(_DWORD *)(v4 + 56) = -42022 * (v3 & 1 | (((1 - v3) & 2) != 0));
}

uint64_t sub_100133AD4()
{
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * ((112 * ((~(558655502 - v1) + (unint64_t)v0) >> 32)) ^ (v0 + 1182))))();
}

uint64_t sub_100133B18()
{
  *(void *)(v1 + (v2 + v0)) = 0x3030303030303030LL;
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((1819
                                          * (((((v3 + 1) | 0x212u) - 119) ^ 0x1ABLL) == ((v4 + 1) & 0x1FFFFFFF8LL))) ^ ((v3 + 1) | 0x212u)))
                            - 4LL))();
}

uint64_t sub_100133B78()
{
  return (*(uint64_t (**)(void))(v3 + 8LL * ((1398 * (((v1 == v2) ^ (v0 + 0x80)) & 1)) ^ v0)))();
}

uint64_t sub_100133BB4@<X0>(int a1@<W8>)
{
  *(_BYTE *)(v2 + v1 + v3 + ((v4 - 1120) | 0x401u) - 1571) = 48;
  return (*(uint64_t (**)(void))(v5 + 8LL * ((195 * ((a1 + v3 + 39) > 0x37)) ^ (v4 - 1314))))();
}

uint64_t sub_100133C00@<X0>( uint64_t a1@<X5>, int a2@<W8>, int8x16_t a3@<Q0>, int8x16_t a4@<Q1>, int8x16_t a5@<Q2>, int8x16_t a6@<Q3>, int8x16_t a7@<Q4>, int8x16_t a8@<Q5>, int8x16_t a9@<Q6>, int8x16_t a10@<Q7>)
{
  v19.i32[0] = *(_DWORD *)(v14 + v11);
  v19.i32[1] = *(_DWORD *)(v14 + 916);
  v19.i32[2] = *(_DWORD *)(v14 + 920);
  int8x16_t v20 = vextq_s8(a3, v19, 0xCuLL);
  int8x16_t v21 = v19;
  v21.i32[3] = *(_DWORD *)(v14 + 924);
  int8x16_t v22 = vandq_s8(v20, a4);
  int8x16_t v23 = veorq_s8((int8x16_t)vaddq_s32((int32x4_t)veorq_s8(vandq_s8(v21, a5), a6), v17), a7);
  int32x4_t v24 = (int32x4_t)veorq_s8( vorrq_s8( (int8x16_t)vaddq_s32( vsubq_s32((int32x4_t)vorrq_s8(v23, a8), (int32x4_t)vorrq_s8(v23, a9)),  (int32x4_t)a9),  v22),  a10);
  v25.i32[0] = *(_DWORD *)(v10 + 4LL * ((*(_DWORD *)(v14 + v11) & 1) == 0));
  v25.i32[1] = *(_DWORD *)(v10 + 4LL * ((*(_DWORD *)(v14 + 916) & 1) == 0));
  v25.i32[2] = *(_DWORD *)(v10 + 4 * (~*(_DWORD *)(v14 + 920) & 1LL));
  v25.i32[3] = *(_DWORD *)(v10 + 4LL * ((v21.i8[12] & 1) == 0));
  *(int8x16_t *)(v14 + 90_Block_object_dispose(va, 8) = veorq_s8( veorq_s8(veorq_s8(*(int8x16_t *)v14, v25), v18),  (int8x16_t)vshrq_n_u32( (uint32x4_t)vaddq_s32( vsubq_s32( v24,  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v24, v24), v15)),  v16),  1uLL));
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * (((v12 == 0) * v13) ^ a2)) - 12LL))();
}

uint64_t sub_100133CD8@<X0>( uint64_t a1@<X5>, int a2@<W8>, int8x16_t a3@<Q0>, int8x16_t a4@<Q1>, int8x16_t a5@<Q2>, int8x16_t a6@<Q3>, int8x16_t a7@<Q4>, int8x16_t a8@<Q5>, int8x16_t a9@<Q6>, int8x16_t a10@<Q7>)
{
  return sub_100133C00(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_100133CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v8 = (((v6 + 1080139470) & (2 * ((((v6 - 902) | 0x402) + 2147481980) & *v7 ^ 0x614A48EC)))
      - ((((v6 - 902) | 0x402) + 2147481980) & *v7 ^ 0x614A48EC)
      - 540070507) ^ 0x57C90D93;
  unsigned int v9 = (-392561385 - (v8 | 0xE899FD17) + (v8 | 0x176602E8)) ^ 0xE3770FF8 | ((((v7[623] | 0x7FFFFFFF) - 1711807633) ^ 0xC6001DD9)
                                                                          + 312851121) ^ 0xF29DB968;
  v7[623] = v7[396] ^ *((_DWORD *)&STACK[0x15A8] + ((*v7 & 1) == 0)) ^ ((v9 - ((2 * v9) & 0xF1FC57B6) + 2029923291) >> 1) ^ 0x3FF5B10C;
  return ((uint64_t (*)(void))(*(void *)(a6 + 8LL * ((47 * (LODWORD(STACK[0xA24]) < 0x270)) ^ v6)) - 12LL))();
}

uint64_t sub_100133E18()
{
  int v3 = LODWORD(STACK[0xA24])++;
  *(_DWORD *)(v1 + 312_Block_object_dispose(va, 8) = v3 + 1227344547;
  unint64_t v4 = 1606104089
     * ((((v2 - 192) | 0xE47FA843712E5989LL) - (v2 - 192) + ((v2 - 192) & 0x1B8057BC8ED1A670LL)) ^ 0x26C1537704391BB7LL);
  *(void *)(v2 - 19fseek(v0, 0LL, 2) = (dword_100273C40 + 745772615) + v4;
  *(_DWORD *)(v2 - 164) = -1231242048 - v4 + v0 + 124;
  *(_DWORD *)(v2 - 17fseek(v0, 0LL, 2) = v4 + v0 - 1727291232 - 91;
  *(_DWORD *)(v2 - 16_Block_object_dispose(va, 8) = (v0 - 1727291232) ^ v4;
  *(void *)(v2 - 160) = 1795542557 - v4;
  *(_DWORD *)(v2 - 180) = v4;
  *(_DWORD *)(v2 - 176) = (v0 - 1727291232) & 0xF9AFA768 ^ v4;
  uint64_t v5 = sub_10013ACFC(v2 - 192);
  return ((uint64_t (*)(uint64_t))*(&off_10025C670 + *(int *)(v2 - 184)))(v5);
}

void sub_100133F24()
{
  if (v0 >= v1) {
    int v3 = dword_100273C40 + 1;
  }
  else {
    int v3 = v2;
  }
  dword_100273C40 = v3;
  JUMPOUT(0x100134078LL);
}

uint64_t sub_1001340F8()
{
  return (*(uint64_t (**)(void))(v2 + 8LL * (((v0 + 8 == ((v1 - 195) ^ 0x6CDDFE5)) * (v1 - 498)) ^ v1)))();
}

uint64_t sub_100134130(uint64_t a1, int a2)
{
  LODWORD(STACK[0x640]) = a2;
  STACK[0x15A8] = 0x9A82143E038AA4E1LL;
  LODWORD(STACK[0xA24]) = dword_100273C38 - 1227344546;
  uint64_t v7 = dword_100273C40;
  unint64_t v8 = (((v3 | (v6 - 192)) - ((v6 - 192) & v3)) ^ 0x9A819096ECD740A2LL) * v4;
  *(_DWORD *)(v6 - 18_Block_object_dispose(va, 8) = ((v2 - 360680606) | 0x1A) ^ v8;
  *(_DWORD *)(v6 - 184) = (v2 - 360680684) ^ v8;
  *(_DWORD *)(v6 - 160) = v8 + v2 + 1123495911;
  *(_DWORD *)(v6 - 156) = v8;
  *(_DWORD *)(v6 - 180) = v2 - 360680606 + v8;
  *(void *)(v6 - 176) = v5 - v8;
  *(void *)(v6 - 16_Block_object_dispose(va, 8) = v7 ^ v8;
  uint64_t v9 = sub_1001DD4A8(v6 - 192);
  return ((uint64_t (*)(uint64_t))*(&off_10025C670 + *(int *)(v6 - 192)))(v9);
}

uint64_t sub_100134200()
{
  int v1 = 53 * (LODWORD(STACK[0x660]) ^ 0x695);
  STACK[0x658] = (unint64_t)malloc(STACK[0x620]);
  uint32_t v2 = arc4random();
  unsigned int v3 = (v1 ^ 0x1D5D6138) + v2 - ((2 * v2) & 0x3ABACBF6);
  LODWORD(xmmword_100273C44) = v3;
  *(_DWORD *)(v0 + 4) = ((1812433253 * (v3 ^ 0x1D5D65FB ^ (v3 >> 30))) ^ 0xBEFCFEFD)
                      + ((1477382858 * (v3 ^ 0x1D5D65FB ^ (v3 >> 30))) & 0x7DF9FDFA)
                      + 1583376127
                      - ((((((1812433253 * (v3 ^ 0x1D5D65FB ^ (v3 >> 30))) ^ 0xBEFCFEFD)
                          + ((1477382858 * (v3 ^ 0x1D5D65FB ^ (v3 >> 30))) & 0x7DF9FDFA)
                          + 945299277) << (((v1 + 57) & 0x7B) - 119))
                        + 290833262) & 0x3ABACBF6);
  return ((uint64_t (*)(uint64_t))((char *)*(&off_10025C670 + v1) - 8))(945299277LL);
}

void sub_100134344()
{
}

uint64_t sub_100134360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int8x16_t v8 = (int8x16_t)vld1q_dup_f32((const float *)v6);
  int v9 = (LODWORD(STACK[0x660]) - 1647) | 0xE8;
  v10.i64[0] = 0x8000000080000000LL;
  v10.i64[1] = 0x8000000080000000LL;
  v11.i64[0] = 0x100000001LL;
  v11.i64[1] = 0x100000001LL;
  v12.i64[0] = -1LL;
  v12.i64[1] = -1LL;
  v7.i64[0] = *(void *)(v6 + 4);
  v7.i32[2] = *(_DWORD *)(v6 + 4 * (((2 * v9) ^ 0x138u) - 203LL));
  int8x16_t v13 = vextq_s8(v8, v7, 0xCuLL);
  int8x16_t v14 = v7;
  v14.i32[3] = *(_DWORD *)(v6 + 16);
  int32x4_t v15 = (int32x4_t)veorq_s8( vorrq_s8( (int8x16_t)vaddq_s32( (int32x4_t)veorq_s8( (int8x16_t)vaddq_s32( vaddq_s32( (int32x4_t)veorq_s8( vandq_s8( v14,  (int8x16_t)vdupq_n_s32(0x2EF82728u)),  (int8x16_t)vdupq_n_s32(0x2A600701u)),  (int32x4_t)veorq_s8( vandq_s8( v14,  (int8x16_t)vdupq_n_s32(0x5107D8D6u)),  (int8x16_t)vdupq_n_s32(0x51018055u))),  v11),  (int8x16_t)vdupq_n_s32(0xB901D19u)),  v12),  vandq_s8(v13, v10)),  (int8x16_t)vdupq_n_s32(0x6DACFFB6u));
  v16.i32[0] = *((_DWORD *)&STACK[0x15A8] + ((*(_DWORD *)(v6 + 4) & 1) == 0));
  v16.i32[1] = *((_DWORD *)&STACK[0x15A8] + (~*(_DWORD *)(v6 + 8) & 1LL));
  v16.i32[2] = *((_DWORD *)&STACK[0x15A8] + (~*(_DWORD *)(v6 + 4 * (((2 * v9) ^ 0x138u) - 203LL)) & 1LL));
  v16.i32[3] = *((_DWORD *)&STACK[0x15A8] + (~v14.i32[3] & 1LL));
  *(int8x16_t *)uint64_t v6 = veorq_s8( veorq_s8(veorq_s8(*(int8x16_t *)(v6 + 1588), v16), (int8x16_t)vdupq_n_s32(0x68441E91u)),  (int8x16_t)vshrq_n_u32( (uint32x4_t)vaddq_s32( vsubq_s32( v15,  (int32x4_t)vandq_s8( (int8x16_t)vaddq_s32(v15, v15),  (int8x16_t)vdupq_n_s32(0xAF3AE9C0))),  vdupq_n_s32(0xD79D74E0)),  1uLL));
  return ((uint64_t (*)(void))(*(void *)(a6 + 8LL * (v9 ^ 0x5EE)) - 4LL))();
}

uint64_t sub_100134D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int32x4_t v12 = (_DWORD *)(v9 + 4 * (v8 + v10));
  unsigned int v13 = (((((*v12 & 0x2EF82728 ^ 0x2A600701) + (*v12 & 0x5107D8D6 ^ 0x51018055) - 2) ^ 0xB901D19) - 1) | v7 & 0x80000000) ^ 0x6DACFFB6;
  *(_DWORD *)(v9 + 4 * ((v6 ^ 0x333u ^ (unint64_t)(v10 + 436)) + v8)) = v12[396] ^ *((_DWORD *)&STACK[0x15A8]
                                                                                          + ((*v12 & 1) == 0)) ^ ((v13 - ((2 * v13) & 0xAF3AE9C0) - 677546784) >> 1) ^ 0x68441E91;
  return ((uint64_t (*)(void))(*(void *)(a6 + 8LL * ((53 * (v8 + 1 != v11 + 3)) ^ v6)) - 4LL))();
}

uint64_t sub_100134E44@<X0>(uint64_t a1@<X5>, int a2@<W8>)
{
  unsigned int v3 = (const float *)(v2 + 908);
  int8x16_t v4 = (int8x16_t)vld1q_dup_f32(v3);
  v5.i64[0] = 0x8000000080000000LL;
  v5.i64[1] = 0x8000000080000000LL;
  return sub_100133C00( a1,  a2,  v4,  v5,  (int8x16_t)vdupq_n_s32(0x7FFFFFFEu),  (int8x16_t)vdupq_n_s32(0x2EEA4EB3u),  (int8x16_t)vdupq_n_s32(0x46D6979Du),  (int8x16_t)vdupq_n_s32(0x4F78E54Cu),  (int8x16_t)vdupq_n_s32(0xB0871AB3),  (int8x16_t)vdupq_n_s32(0x3A195999u));
}

uint64_t sub_100134ED8()
{
  STACK[0x870] = 0LL;
  STACK[0x958] = v0;
  STACK[0x9E8] = STACK[0x658];
  return sub_100134EF8();
}

uint64_t sub_100134EF8@<X0>(uint64_t a1@<X8>)
{
  int8x16_t v5 = (uint64_t (*)(void))(*(void *)(v4 + 8LL * v1) + a1);
  STACK[0x878] = (unint64_t)v5;
  if (!qword_1002748C8)
  {
    *v3 |= ~v3[*v3 & (((((v2 + 614013678) | 0x83u) - 333) | 0x400LL) ^ 0x6BC)] << 16;
    v3[4] |= ~v3[v3[4] & 0x3ELL] << 16;
    v3[8] |= ~v3[v3[8] & 0x3ELL] << 16;
    v3[12] |= ~v3[v3[12] & 0x3ELL] << 16;
    v3[16] |= ~v3[v3[16] & 0x3ELL] << 16;
    v3[20] |= ~v3[v3[20] & 0x3ELL] << 16;
    v3[24] |= ~v3[v3[24] & 0x3ELL] << 16;
    v3[28] |= ~v3[v3[28] & 0x3ELL] << 16;
    v3[32] |= ~v3[v3[32] & 0x3ELL] << 16;
    unsigned int v6 = v3[36];
    unsigned int v7 = v3[v6 & 0x3E];
    dword_100274AD0 = 255;
    v3[36] = v6 | (~v7 << 16);
    v3[40] |= ~v3[v3[40] & 0x3ELL] << 16;
    v3[44] |= ~v3[v3[44] & 0x3ELL] << 16;
    v3[48] |= ~v3[v3[48] & 0x3ELL] << 16;
    v3[52] |= ~v3[v3[52] & 0x3ELL] << 16;
    unsigned int v8 = v3[56];
    unsigned int v9 = v3[v8 & 0x3E];
    qword_1002748C8 = (uint64_t)v3;
    v3[56] = v8 | (~v9 << 16);
    v3[60] |= ~v3[v3[60] & 0x3ELL] << 16;
    int8x16_t v5 = (uint64_t (*)(void))STACK[0x878];
  }

  return v5();
}

uint64_t sub_1001350D0@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((v1 - 1027) ^ (198 * (a1 != 0)))) - 4LL))();
}

uint64_t sub_1001350FC()
{
  byte_1002748C0 = 1;
  BOOL v2 = *(char *)(STACK[0x630] + 1) >= (char)(((((v0 + 126) | 0x82) + 120) ^ 0xBD) + ((v0 + 126) | 0x82) + 57);
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * (((2 * v2) | (4 * v2)) ^ ((v0 - 1410) | 0x82))) - 12LL))();
}

uint64_t sub_100135158@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int8 a6@<W8>)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 8LL * (((a6 == ((v6 ^ 0x39) + 0x80)) * ((v6 ^ 0x5A4) - 185)) ^ v6))
                                                                                       - 4LL))( a1,  a2,  a3,  a4,  a5,  4294924380LL);
}

uint64_t sub_100135194()
{
  else {
    int v3 = -42018;
  }
  return (*(uint64_t (**)(void))(v2 + 8LL * ((1090 * (v3 == 0)) ^ v1)))();
}

uint64_t sub_1001351E0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W8>)
{
  int v7 = (((*(unsigned __int8 *)(STACK[0x630] + 3)
        - (((29 * (a6 ^ 0xF9)) ^ 0x3C) & (2 * *(unsigned __int8 *)(STACK[0x630] + 3)))
        + 58) << ((a6 - 99) & 0xEA ^ 0x8A))
      - 1280) ^ 0x3500;
  unsigned int v8 = (v7 - ((2 * v7) & 0x1800) + 3135) ^ 0xC3F | (*(unsigned __int8 *)(STACK[0x630] + 4)
  int v9 = (v8 - ((2 * v8) & 0x5F00) + 12160) ^ 0x2F80;
  unsigned int v10 = ((2 * v9) & 0x1D41C) + ((unsigned __int16)v9 ^ 0x7BF7EA0E) - 561806783;
  unsigned int v11 = LODWORD(STACK[0x7EC]) + 606802899;
  int v12 = (v11 < 0x5A7B6C4F) ^ (v10 < 0x5A7B6C4F);
  BOOL v13 = v10 < v11;
  if (v12) {
    BOOL v13 = v11 < 0x5A7B6C4F;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 8LL * ((850 * v13) ^ a6))
                                                                                       - 8LL))( a1,  a2,  a3,  a4,  a5,  4294925278LL);
}

uint64_t sub_100135304()
{
  unint64_t v3 = STACK[0x630] + 5;
  int v4 = 1189216979 * (((v2 - 192) & 0x97A295A5 | ~((v2 - 192) | 0x97A295A5)) ^ 0x46B6669C);
  *(_DWORD *)(v2 - 19fseek(v0, 0LL, 2) = (v1 + 1560) ^ v4;
  *(_DWORD *)(v2 - 184) = v4 - 1717899440 + v0;
  *(void *)(v2 - 176) = v3;
  sub_10018BAA8(v2 - 192);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + ((1384 * (*(_DWORD *)(v2 - 188) == ((v1 + 1577) | 2) - 1666)) ^ v1))
                            - 12))();
}

uint64_t sub_1001353A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 8LL * (((((v7 - 75) | 0x113) ^ 0x746) * (*(_BYTE *)(STACK[0x630] + (v6 - 2079844873)) == 2)) ^ v7))
                                                                                       - (((v7 + 1451) | 0x80u) ^ 0x68ELL)))( a1,  a2,  a3,  a4,  a5,  4294925278LL);
}

uint64_t sub_100135404()
{
  unint64_t v4 = ((((v0 - 37) ^ 0x8C9C3CA5) + v2 + 0x6527777BFA9621F7LL) | ((unint64_t)(((v0 - 37) ^ 0x8C9C3CA5) + v2 < 0x8942667) << 32))
     + STACK[0x630]
     - 0x6527777C032A485ELL;
  unsigned int v5 = (((*(unsigned __int8 *)v4 - ((2 * *(unsigned __int8 *)v4) & 0x32) + 162) << (v0 - 23)) - 2304) ^ 0xFFFF9900;
  LODWORD(v4) = (v5 - ((2 * v5) & 0x600) - 31963) ^ 0xFFFF8325 | (*(unsigned __int8 *)(v4 + 1)
  LODWORD(v4) = (v4 - ((2 * v4) & 0x5C4C) - 20954) ^ 0xAE26;
  unsigned int v6 = ((2 * v4) & 0x3FFA) + ((unsigned __int16)v4 ^ 0x75EF1FFD);
  BOOL v7 = v6 + 748997636 < v3 + 1816368005;
  return (*(uint64_t (**)(void))(v1 + 8LL * ((1178 * v7) ^ v0)))();
}

uint64_t sub_100135554@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W8>)
{
  unint64_t v10 = STACK[0x630] + v8 + a6 + ((v6 + 23) | 0xEu);
  BOOL v12 = v9 != 1978605565 && v10 != 0;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 8LL * ((1090 * v12) ^ v6))
                                                                                       - 8LL))( a1,  a2,  a3,  a4,  a5,  4294925273LL);
}

uint64_t sub_1001355A8()
{
  unsigned int v2 = ((((34 * (v1 ^ 0x12E) - 1993083573) & 0x76CC06FF) - 570517760) ^ (v0 - 1978605565) & 0xFFFFFFF0)
     + ((2 * (v0 - 1978605565)) & 0xBBFD3380);
  LODWORD(STACK[0x9A0]) = v2 + 986388018;
  int v3 = malloc(v2 + 570517082);
  STACK[0x998] = (unint64_t)v3;
  return ((uint64_t (*)(void))*(&off_10025C670 + ((171 * (v3 != 0LL)) ^ v1)))();
}

uint64_t sub_100135648(uint64_t a1)
{
  *(_WORD *)a1 = 513;
  __int16 v7 = v2 - ((2 * v2 - 13178) & 0xAC60) + 15488;
  *(_BYTE *)(a1 + fseek(v0, 0LL, 2) = HIBYTE(v7) ^ 0xD6;
  *(_BYTE *)(a1 + 3) = v7 ^ 0x3D;
  *(_BYTE *)(a1 + 4) = ((unsigned __int16)(v2
                                         - v1
                                         - 2 * ((v2 - v1 + ((v3 - 709) | 0x540) + 248) & 0x57FF ^ (v2 - v1) & 0xE)
                                         + 24113) >> 8) ^ 0xD7;
  *(_BYTE *)(a1 + 5) = (v2 - v1 - 2 * ((v2 - v1 + ((v3 + 59) | 0x40) - 8) ^ (v2 - v1) & 0xE) + 49) ^ 0xF1;
  return ((uint64_t (*)(void))(*(void *)(v6
                                        + 8LL
                                        * (v3 ^ (451
}

uint64_t sub_100135744(uint64_t a1)
{
  BOOL v10 = v2 < v1;
  *(_BYTE *)(v5 + a1 - 0x6C0CDD421E324482LL) = *(_BYTE *)(v4 + v7 - 0x7D4446D723A3386FLL);
  if (v10 == v6 - 0x7F9D097D288CADDFLL < v1) {
    BOOL v10 = v6 - 0x7F9D097D288CADDFLL < v2;
  }
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * ((v10 * v3) ^ v8)) - 4LL))();
}

uint64_t sub_1001357EC@<X0>(int a1@<W8>)
{
  LODWORD(STACK[0x5E8]) = v3 + v2;
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((233
                                          * (((((v1 - 1745844672) ^ 0xBD7FF677ECF97FB2LL)
                                             + 0x42800988E912F93CLL
}

uint64_t sub_100135890@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  uint64_t v6 = a2 ^ 0x3Au;
  uint64_t v7 = ((_DWORD)v6 - 370) | 0x148u;
  BOOL v8 = v2 < v6 + v3 - 1394;
  *(_BYTE *)(a1
  if (v8 == v3 > 0xD60C78EF) {
    BOOL v8 = v2 > 0xD60C78EF;
  }
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * (int)((v8 * (v7 - 1294)) ^ v7)) - 12LL))();
}

void sub_100135950()
{
}

uint64_t sub_100135958@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (((v1 - 1659) * (a1 == 0)) ^ (v1 - 680))) - 12LL))();
}

uint64_t sub_10013597C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  byte_1002748C0 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6
                                                                                         + 8LL
                                                                                         * ((729
                                                                                           * (((LODWORD(STACK[0x9B0]) == -1062694300) ^ (v5 + 1)) & 1)) ^ (v5 - 1379))))( a1,  a2,  a3,  a4,  a5,  4294925273LL);
}

uint64_t sub_1001359CC()
{
  int v1 = strcmp("mobactivationd", __progname);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + ((1125
}

uint64_t sub_100135A48()
{
  int v2 = strcmp("mobileactivationd", *v0);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + ((1848
                                        * (((2 * v2) & 0xB6F4FFF6) + (v2 ^ 0xDB7A7FFB) != (((v1 ^ 0x153) + 1491) ^ 0xDB7A79AB))) ^ v1))
                            - 4))();
}

uint64_t sub_100135AB8()
{
  int v2 = strcmp("findmydeviced", *v0);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + ((241 * (((2 * v2) & 0xAC40AEDE) + ((v1 - 722) ^ 0xD6205411 ^ v2) == -702523537)) ^ v1))
                            - ((50 * (v1 ^ 0x655u)) ^ 0xF6LL)))();
}

uint64_t sub_100135B3C()
{
  int v2 = strcmp("findmydeviced-nano-support", *v0);
  return ((uint64_t (*)(void))*(&off_10025C670
                             + ((1581
                               * (((v2 << (((v1 + 125) & 0xFE) + 7)) & 0x6F8DAFD6) + (v2 ^ 0xB7C6D7EB) != -1211705365)) ^ v1)))();
}

uint64_t sub_100135BAC()
{
  int v2 = strcmp("identityservicesd", *v0);
  BOOL v3 = ((v2 << ((((v1 - 85) & 0xFE) + 6) ^ 0x2F)) & 0xBEF1FFDE) + (v2 ^ 0x5F78FFEF) == 1601765359;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + (int)((2 * v3) | (4 * v3) | (v1 + 1369147307) & 0xAE6475FE)) - 4))();
}

uint64_t sub_100135C40()
{
  int v2 = strcmp("amsaccountsd", *v0);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + ((704
                                        * ((((v1 - 96877103) & 0x5C639FA ^ 0xA4FAEC24) & (2 * v2)) + (v2 ^ 0xD27D766F) != ((v1 - 1450992439) & 0x567C660B) - 763530644)) ^ v1))
                            - 4))();
}

uint64_t sub_100135CD4()
{
  int v2 = strcmp("AppStore", *v0);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + ((39
                                        * (((v1 - 4) ^ (((v2 << ((2 * (v1 ^ 0x7E)) ^ 0xFB)) & 0xAD42ACFE)
                                                                       + (v2 ^ 0x56A1567F) == 1453414015)) & 1)) ^ v1))
                            - 8))();
}

uint64_t sub_100135D54()
{
  int v2 = strcmp("itunesstored", *v0);
  unsigned int v3 = (((((v1 & 0xDFFDFFEF) + 1086412392) & 0xE0C1CDAB) - 562242580) ^ v2) + ((2 * v2) & 0xBCF9BFDE);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + (int)(v1 & 0xDFFDFFEF ^ 0xDE7CD94E ^ (421
                                                                            * (((v3 - (v1 & 0xDFFDFFEF)) | ((v1 & 0xDFFDFFEF) - v3)) >> 31))))
                            - 12))();
}

uint64_t sub_100135DF8()
{
  int v2 = strcmp("StoreKitUIService", *v0);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + ((77 * (((2 * v2) & 0x7563FDD6) + (v2 ^ 0xBAB1FEEB) != -1162739989)) ^ v1))
                            - ((v1 - 1828819465) & 0x6D018EFF)
                            + 242))();
}

uint64_t sub_100135E68()
{
  int v2 = strcmp("appstored", *v0);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + (((((2 * v2) & 0x3CA1FFDE) + (v2 ^ 0x1E50FFEF) != 508624879)
                                        * (((v1 ^ 0x2A2) - 1447) ^ 0x3DF)) ^ v1))
                            - 8))();
}

uint64_t sub_100135ECC()
{
  int v2 = strcmp("Fitness", *v0);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + (((((2 * v2) & 0x34A4EFFE) + (v2 ^ 0x1A5277FF) != ((v1 - 863668647) & 0x337A83FF)
                                                                                        + 441612037)
                                        * (v1 - 1285)) ^ v1))
                            - 12))();
}

uint64_t sub_100135F44()
{
  int v2 = strcmp("appinstallationmetricsd", *v0);
  return ((uint64_t (*)(void))*(&off_10025C670
                             + ((1783
                               * (((2 * v2) & 0x6543ECF6) + (((v1 - 1543) | 0x60) ^ v2 ^ 0xB2A1F681) != -1298008453)) ^ (v1 - 803))))();
}

uint64_t sub_100135FA8()
{
  int v2 = strcmp("attributionkitd", *v0);
  return ((uint64_t (*)(void))*(&off_10025C670
                             + ((254
                               * ((((v1 + 770) ^ (((2 * v2) & 0x2D61ECF6) + (v2 ^ 0x96B0F67B) == ((v1 + 877526141) & 0xCBB200FE ^ 0x96B0F681))) & 1) == 0)) ^ v1)))();
}

uint64_t sub_100136028()
{
  int v2 = strcmp("test", *v0);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + ((49
                                        * (((2 * v2) & 0xB472FFFE) + (v2 ^ 0x5A397FFF) == ((((v1 | 0x10) - 1510) | 0x50) ^ 0x5A397F05))) ^ (v1 | 0x10)))
                            - (((v1 | 0x10u) - 1430) ^ 0xF6LL)))();
}

uint64_t sub_1001360B0()
{
  int v3 = strcmp("ProvenanceCombo", *v0);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + ((1273 * (((2 * v3) & 0x3E9AFFF6) + (v3 ^ (v2 | 0x9F4D7F01)) == v1 - 1622311167)) ^ v1))
                            - 8))();
}

uint64_t sub_100136114()
{
  int v1 = malloc(0x98uLL);
  STACK[0x9E0] = (unint64_t)v1;
}

uint64_t sub_100136164@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W8>)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 8LL * (v6 ^ (1335 * (a6 == 1))))
                                                                                       - ((v6 + 961) ^ ((v6 + 264) | 0x480u) ^ 0x231LL)))( a1,  a2,  a3,  a4,  a5,  4294924380LL);
}

void sub_1001361A4(int a1@<W8>)
{
  int v2 = 1189216979 * ((1484279903 - ((v1 - 192) | 0x5878505F) + ((v1 - 192) | 0xA787AFA0)) ^ 0x896CA366);
  *(void *)(v1 - 176) = v3;
  *(_DWORD *)(v1 - 184) = v2 + a1 + v5 - 549290969;
  *(_DWORD *)(v1 - 19fseek(v0, 0LL, 2) = (a1 + 436) ^ v2;
  sub_10018BAA8(v1 - 192);
  *(_DWORD *)(v4 + 56) = *(_DWORD *)(v1 - 188);
}

void sub_100136228()
{
}

void sub_1001362AC()
{
  LODWORD(STACK[0x6C0]) = ((v0 + 1247) ^ 0x38E1F03F) + v1;
  JUMPOUT(0x1000DF020LL);
}

uint64_t sub_1001362D4()
{
  LODWORD(STACK[0x858]) = 414602358;
  return sub_1001383BC();
}

uint64_t sub_1001362E8()
{
  return (*(uint64_t (**)(void))(v1 + 8LL * (int)(((STACK[0x890] == 1) * (((v0 + 1442281574) & 0xAA0885BF) - 148)) ^ v0)))();
}

uint64_t sub_100136328()
{
  size_t v2 = strlen(v0);
  BOOL v3 = malloc(((2 * v2) & 0xDFEE97AF5A7FE3DELL) + (v2 ^ 0xEFF74BD7AD3FF1EFLL) + 0x1008B42852C00E2FLL) == 0LL;
  return ((uint64_t (*)(void))*(&off_10025C670 + ((1248 * ((v3 ^ (v1 + 118)) & 1)) ^ v1)))();
}

uint64_t sub_1001363C0(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))(*(void *)(a2
                                        + 8LL
}

uint64_t sub_100136440()
{
  int v5 = &v3[v0 + v1];
  qmemcpy(v5 + 586, "/Library/ProvenanceV2", 21);
  *(void *)&v3[((238 * (v4 ^ 0x4D6) - 892731023) & 0x3535FDED ^ v0) + v1] = 0x6975732E6373702FLL;
  v5[615] = 0;
  free(v2);
  int v6 = fopen(v3, "rb");
  free(v3);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + (((v6 == 0LL) | (4 * (v6 == 0LL))) ^ v4)) - 4))();
}

uint64_t sub_100136520()
{
  int v3 = ftell(v0);
  unsigned int v4 = v3 - ((2 * v3) & 0xDF7A25D0) + ((47 * (v1 ^ 0x5E6)) ^ 0x6FBD13B4) - 21;
  unsigned int v5 = ((2 * v4) & 0xA9BE5E8E ^ 0x893A0480) + (v4 ^ 0xBB623DAF);
  unint64_t v6 = v5 + 1877669118;
  STACK[0x658] = v6;
  LODWORD(STACK[0x75C]) = v6;
  uint64_t v7 = fseek(v0, 0LL, 0);
  return ((uint64_t (*)(uint64_t))(*(void *)(v2
                                                      + 8LL
                                                      * (((v5 + 723570873 > 0x31) | (4 * (v5 + 723570873 > 0x31))) ^ v1))
                                          - 4LL))(v7);
}

uint64_t sub_1001365F8()
{
  int v3 = malloc(v2);
  STACK[0x788] = (unint64_t)v3;
  unsigned int v4 = malloc(v2);
  STACK[0x688] = (unint64_t)v4;
  STACK[0x650] = (unint64_t)v3;
  if (v3) {
    BOOL v5 = v4 == 0LL;
  }
  else {
    BOOL v5 = 1;
  }
  char v6 = v5;
  return (*(uint64_t (**)(void))(v0
                              + 8LL
}

uint64_t sub_100136660()
{
  int v6 = fread((void *)STACK[0x650], 1uLL, v5, v0);
  LODWORD(STACK[0x5E8]) = v4 + 2005882396;
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * ((118
                                * ((((v3 ^ (v1 - 84)) - v1) ^ ((_DWORD)v5 == ((v6
                                                                                              - ((2 * v6) & 0x24F0BEF0)
                                                                                              - 1837605000) ^ 0x92785F78))) & 1)) ^ v3)))();
}

uint64_t sub_1001366DC()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((759
                                          * (((v2 + 1877669127) & 0xF) == (((v2 + 1877669127) << (((v3 + v0) ^ (v0 - 114))
                                                                                                + 36)) & 0x12))) ^ v3))
                            - 4LL))();
}

uint64_t sub_100136730@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL
                              * (a1 ^ (56
                                     * ((STACK[0x658] | ((unint64_t)(STACK[0x658] < 0x44CA2445) << 32)) == 1154098245)))))();
}

uint64_t sub_1001367BC()
{
  STACK[0x788] = 0LL;
  uint64_t v1 = fclose(v0);
  LODWORD(STACK[0x844]) = STACK[0x5E8];
  return ((uint64_t (*)(uint64_t))sub_10012AB8C)(v1);
}

uint64_t sub_100136814()
{
  int v3 = v0;
  free(v2);
  LODWORD(STACK[0x844]) = STACK[0x5E8];
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
}

uint64_t sub_10013684C@<X0>(uint64_t a1@<X1>, int a2@<W8>)
{
  *(_BYTE *)(v5 + v8 - 0x22D319BCB4C17C07LL) = *(_BYTE *)(v4 + v7 - 0x55252C283FFEBD00LL);
  BOOL v9 = v6 - 0x45559007E7118C87LL < v3;
  if (v3 < v2 != v6 - 0x45559007E7118C87LL < v2) {
    BOOL v9 = v3 < v2;
  }
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * ((v9 * (a2 - 751)) ^ a2)) - 12LL))();
}

uint64_t sub_1001368D8@<X0>(int a1@<W8>)
{
  BOOL v8 = v2 < v3;
  *(_BYTE *)(v5 + v7 - 0x50A45DA5B0BC1840LL) = *(_BYTE *)(v4 + STACK[0x650] - 0x520FA5116C0838F0LL);
  if (v8 == v6 - 0x1792B87A967B033LL < v1) {
    BOOL v8 = v6 - 0x1792B87A967B033LL < v2;
  }
  return ((uint64_t (*)(void))*(&off_10025C670 + ((56 * !v8) ^ a1)))();
}

uint64_t sub_100136980@<X0>(int a1@<W1>, int a2@<W8>, double a3@<D0>)
{
  *(double *)(v3 + v4 + (((v5 + 421) | v7) ^ (a2 + 664))) = a3;
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * (((v6 == 0) * a1) ^ v5)) - 12LL))();
}

uint64_t sub_1001369B4@<X0>(int a1@<W1>, int a2@<W8>, double a3@<D0>)
{
  return sub_100136980(a1, a2, a3);
}

uint64_t sub_1001369C0(int a1)
{
}

uint64_t sub_100136A0C(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6)
{
  int v15 = a4 + 1;
  uint64_t v16 = (a4 + v7);
  *(_BYTE *)(v13 + (a3 + v8)) = *(_BYTE *)(v9 + v16) ^ *(_BYTE *)(v10 + (v16 & 0xF)) ^ *(_BYTE *)((v16 & 0xF) + v11 + 5) ^ *(_BYTE *)(v12 + (v16 & 0xF) + ((((a6 ^ 0x14B) - 191) | 0x210u) ^ 0x613LL)) ^ (-29 * (v16 & 0xF)) ^ 0x30;
  return ((uint64_t (*)(void))(*(void *)(v14 + 8LL * ((331 * (v15 + v7 < v6)) ^ a6 ^ 0x14B)) - 8LL))();
}

void sub_100136A90()
{
}

uint64_t sub_100136A9C()
{
  *(_BYTE *)(v5 + v0 - 0x26E17EE24A6B7208LL) = *(_BYTE *)(v3 + v1 - 0x75A6843E1435B213LL)
                                             - ((2 * *(_BYTE *)(v3 + v1 - 0x75A6843E1435B213LL)) & 0x20)
                                             - 112;
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * ((25 * (v6 + 1 != v4 + 16)) ^ v2)) - 8LL))();
}

uint64_t sub_100136B20@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
}

uint64_t sub_100136B60()
{
  int v3 = *(_DWORD *)(v1 + 64);
  unsigned int v2 = *(_DWORD *)(v1 + 68);
  *(_BYTE *)(v1 + 56) = ((8 * v2) ^ 0x88) - ((16 * v2) & 0x60) + 48;
  *(_BYTE *)(v1 + 57) = (v0 - 70) ^ (v2 >> 5);
  *(_BYTE *)(v1 + 5_Block_object_dispose(va, 8) = (v2 >> 13) ^ 0x39;
  *(_BYTE *)(v1 + 59) = (v2 >> 21) ^ 0x77;
  HIDWORD(v4) = v3 + 306022837;
  LODWORD(v4) = ~v2;
  *(_BYTE *)(v1 + 60) = ((v4 >> 29) - ((2 * (v4 >> 29)) & 0x5A) + 45) ^ 0x1D;
  *(_BYTE *)(v1 + 61) = (((v3 - 767718987) >> 5) - (((v3 - 767718987) >> 4) & 0x1C) + 14) ^ 0x3E;
  *(_BYTE *)(v1 + 6fseek(v0, 0LL, 2) = (((v3 - 767718987) >> 13) - (((v3 - 767718987) >> 12) & 0xEE) + 119) ^ 0x47;
  return sub_100139344();
}

uint64_t sub_100136C3C()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (((v1 == v0 - 277) * ((v0 + 1389) ^ 0x64C)) ^ (v0 + 1071))) - 8LL))();
}

uint64_t sub_100136C6C@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((998 * (*(void *)(v1 + 8) != 0LL)) ^ (a1 + 145))) - 8LL))();
}

void sub_100136C9C(void *a1)
{
  *(void *)(v1 + _Block_object_dispose(va, 8) = v2;
  JUMPOUT(0x100136CD0LL);
}

uint64_t sub_100136D30()
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * (int)(((8
}

uint64_t sub_100136DB0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  unsigned int v13 = v11 + a8 + v9 - 1;
  BOOL v16 = v13 > 0xF || (((((_BYTE)a5 - 123) & 0xFC) - (_BYTE)v10 + 14) & 0xFu) < (v13 & 0xF) || 993822815 - (int)v8 < v13;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 8LL * ((189 * v16) ^ a5)))( a1,  a2,  v8,  v10);
}

uint64_t sub_100136E20( uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v16 = v9 + v7 + 43 * (a7 ^ 0x295) - 1419 + v14;
  unint64_t v17 = v16 - (v10 + a2);
  uint64_t v18 = (v8 - 59 * (a7 ^ 0xBC) - 27) & 0xF;
  unint64_t v19 = v16 - v11 - v18;
  unint64_t v20 = v16 - v12 - v18 - 5;
  unint64_t v21 = v16 - v13 - v18 - 2;
  BOOL v25 = v17 < 0x10 || v19 < 0x10 || v20 < 0x10 || v21 < 0x10;
  return ((uint64_t (*)(void))(*(void *)(v15 + 8LL * ((103 * v25) ^ a7)) - 8LL))();
}

uint64_t sub_100136EB8@<X0>( uint64_t a1@<X5>, uint64_t a2@<X8>, int8x16_t a3@<Q0>, int8x16_t a4@<Q1>, int8x16_t a5@<Q2>, int8x16_t a6@<Q3>, int32x4_t a7@<Q4>, int8x16_t a8@<Q5>, int8x16_t a9@<Q6>, int32x4_t a10@<Q7>)
{
  v19.i32[0] = *(_DWORD *)(v13 + ((4 * a2) | 4));
  v19.i32[1] = *(_DWORD *)(v13 + ((4 * a2) | 8));
  v19.i32[2] = *(_DWORD *)(v13 + ((4 * a2) | 0xC));
  int8x16_t v20 = vextq_s8(a3, v19, 0xCuLL);
  int8x16_t v21 = v19;
  v21.i32[3] = *(_DWORD *)(v13 + 4 * (a2 + v10 + 213) - 3420);
  int8x16_t v22 = vandq_s8(v20, v17);
  int32x4_t v23 = (int32x4_t)veorq_s8(vandq_s8(v21, a4), a5);
  int32x4_t v24 = (int32x4_t)veorq_s8( (int8x16_t)vaddq_s32(vsubq_s32(v23, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v23, v23), a6)), a7),  a8);
  int32x4_t v25 = (int32x4_t)veorq_s8( vorrq_s8( (int8x16_t)vaddq_s32( vsubq_s32((int32x4_t)vorrq_s8((int8x16_t)vaddq_s32(v24, v24), a9), v24),  a10),  v22),  v14);
  v26.i32[0] = *(_DWORD *)(v11 + 4LL * ((*(_DWORD *)(v13 + ((4 * a2) | 4)) & 1) == 0));
  v26.i32[1] = *(_DWORD *)(v11 + 4 * (~*(_DWORD *)(v13 + ((4 * a2) | 8)) & 1LL));
  v26.i32[2] = *(_DWORD *)(v11 + 4 * (~*(_DWORD *)(v13 + ((4 * a2) | 0xC)) & 1LL));
  v26.i32[3] = *(_DWORD *)(v11 + 4LL * ((v21.i8[12] & 1) == 0));
  *(int8x16_t *)(v13 + 4 * afseek(v0, 0LL, 2) = veorq_s8( veorq_s8(veorq_s8(*(int8x16_t *)(v13 + 4 * a2 + 1588), v26), v18),  (int8x16_t)vshrq_n_u32( (uint32x4_t)vaddq_s32( vsubq_s32( v25,  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v25, v25), v15)),  v16),  1uLL));
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * (((a2 == 220) * v12) ^ v10)) - 12LL))();
}

uint64_t sub_100136FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v12 = (unsigned int *)(v10 + 4 * (v9 + a5));
  unsigned int v13 = v8 & 0x80000000;
  uint64_t v14 = v9 + 1;
  int v15 = *(_DWORD *)(v10 + 4 * (v14 + a5));
  unsigned int v16 = ((v15 & (((v7 - 339) | 0x134) ^ (v11 - 1031)) ^ 0x55979AC4)
       - ((2 * (v15 & (((v7 - 339) | 0x134) ^ (v11 - 1031)) ^ 0x55979AC4)) & 0x11FEB938)
       - 1996530531) ^ 0x9AD1F4C2;
  unsigned int v17 = ((((2 * v16) | 0xA57512B2) - v16 - 1387956569) | v13) ^ 0x85EDE38;
  *int v12 = v12[397] ^ *((_DWORD *)&STACK[0x15A0] + ((v15 & 1) == 0)) ^ ((v17 - ((2 * v17) & 0x411F644E) + 546288167) >> 1) ^ 0x3948A85;
  return ((uint64_t (*)(void))(*(void *)(a6 + 8LL * ((63 * (v14 != a7 + 3)) ^ v7)) - 12LL))();
}

uint64_t sub_1001370D0@<X0>(uint64_t a1@<X5>, int a2@<W8>)
{
  int8x16_t v5 = (int8x16_t)vld1q_dup_f32(&flt_100273FD0);
  v6.i64[0] = 0x8000000080000000LL;
  v6.i64[1] = 0x8000000080000000LL;
  v7.i64[0] = 0x8000000080000000LL;
  v7.i64[1] = 0x8000000080000000LL;
  v8.i64[0] = 0x1000000010LL;
  v8.i64[1] = 0x1000000010LL;
  v4.i64[0] = *(void *)&dword_100273FD4;
  v4.i32[2] = dword_100273FDC;
  int8x16_t v9 = vextq_s8(v5, v4, 0xCuLL);
  int8x16_t v10 = v4;
  v10.i32[3] = *(_DWORD *)(v3 + 4 * ((a2 + 1168442) & 0xFFEE2EEB ^ 0x685LL));
  int8x16_t v11 = (int8x16_t)vaddq_s32( (int32x4_t)veorq_s8( vandq_s8(v10, (int8x16_t)vdupq_n_s32(0x5B5C1A18u)),  (int8x16_t)vdupq_n_s32(0x9041A19u)),  v7);
  int32x4_t v12 = (int32x4_t)veorq_s8( vorrq_s8( (int8x16_t)(*(_OWORD *)&v11 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)),  vorrq_s8(vandq_s8(v10, (int8x16_t)vdupq_n_s32(0x24A3E5E6u)), vandq_s8(v9, v6))),  (int8x16_t)vdupq_n_s32(0x14597FE2u));
  int32x4_t v13 = (int32x4_t)veorq_s8(vandq_s8((int8x16_t)v12, (int8x16_t)vdupq_n_s32(0x7F485EDEu)), vandq_s8(v11, v8));
  v11.i32[0] = *(_DWORD *)(v2 + 4LL * ((dword_100273FD4 & 1) == 0));
  v11.i32[1] = *(_DWORD *)(v2 + 4 * (~unk_100273FD8 & 1LL));
  v11.i32[2] = *(_DWORD *)(v2 + 4 * (~dword_100273FDC & 1LL));
  v11.i32[3] = *(_DWORD *)(v2 + 4 * (~v10.i32[3] & 1LL));
  *(int8x16_t *)&flt_100273FD0 = veorq_s8( veorq_s8( veorq_s8((int8x16_t)xmmword_100273C44, v11),  (int8x16_t)vdupq_n_s32(0x2C777CF1u)),  (int8x16_t)vshrq_n_u32( (uint32x4_t)vaddq_s32( vsubq_s32(v12, vaddq_s32(v13, v13)),  vdupq_n_s32(0x7F485ECFu)),  1uLL));
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * a2) - 8LL))();
}

void sub_100137238()
{
}

uint64_t sub_100137244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v8 = ((*v7 & 0x7FFFFFFE ^ 0x2D37856E) & 0x702179C6) - (*v7 & 0x7FFFFFFE ^ 0x2D37856E | 0xF02179C7);
  unsigned int v9 = ((v8 & 0x6632D40E ^ ((v6 ^ 0xE0) - 1073591935)) + (v8 & 0x19CD2BF0 ^ 0x9CC02B1) - 2) ^ 0xF67A341E;
  v7[623] = v7[396] ^ *((_DWORD *)&STACK[0x15A0] + ((*v7 & 1) == 0)) ^ (((v9 | ((17 * (v6 ^ 0x600)) ^ 0x80000682) & v7[623])
                                                                       - ((2 * v9) & 0x72FD25D0)
                                                                       - 1182887192) >> 1) ^ 0x4F6C1AE2;
  return (*(uint64_t (**)(void))(a6 + 8LL * ((382 * (LODWORD(STACK[0xA14]) > 0x26F)) ^ v6)))();
}

uint64_t sub_100137350@<X0>(int a1@<W8>)
{
  LODWORD(STACK[0xA14]) = 0;
  int v3 = LODWORD(STACK[0xA14])++;
  *(_DWORD *)(v1 + 312_Block_object_dispose(va, 8) = v3 + 1227344547;
  uint64_t v4 = (dword_100273C40 + 675253587);
  unint64_t v5 = 1606104089
     * ((((v2 - 192) ^ 0x374E2F97FAEFA969LL)
       + 0x5A6D22DEDA18CAA1LL
       - 2 * (((v2 - 192) ^ 0x374E2F97FAEFA969LL) & 0x5A6D22DEDA18CAA1LL)) ^ 0xAF9DF67D55E021F6LL);
  *(_DWORD *)(v2 - 164) = -1231242048
                        - 1606104089
                        * ((((v2 - 192) ^ 0xFAEFA969) - 635909471 - 2 * (((v2 - 192) ^ 0xFAEFA969) & 0xDA18CAA1)) ^ 0x55E021F6)
                        + a1;
  *(void *)(v2 - 19fseek(v0, 0LL, 2) = v4 + v5;
  *(_DWORD *)(v2 - 180) = 1606104089
                        * ((((v2 - 192) ^ 0xFAEFA969) - 635909471 - 2 * (((v2 - 192) ^ 0xFAEFA969) & 0xDA18CAA1)) ^ 0x55E021F6);
  *(_DWORD *)(v2 - 176) = (a1 - 1982105617) ^ (1606104089
                                             * ((((v2 - 192) ^ 0xFAEFA969)
                                               - 635909471
                                               - 2 * (((v2 - 192) ^ 0xFAEFA969) & 0xDA18CAA1)) ^ 0x55E021F6));
  *(_DWORD *)(v2 - 17fseek(v0, 0LL, 2) = ((a1 - 1982105711) ^ 0x53)
                        + 1606104089
                        * ((((v2 - 192) ^ 0xFAEFA969) - 635909471 - 2 * (((v2 - 192) ^ 0xFAEFA969) & 0xDA18CAA1)) ^ 0x55E021F6);
  *(_DWORD *)(v2 - 16_Block_object_dispose(va, 8) = (a1 - 1982105711) ^ (1606104089
                                             * ((((v2 - 192) ^ 0xFAEFA969)
                                               - 635909471
                                               - 2 * (((v2 - 192) ^ 0xFAEFA969) & 0xDA18CAA1)) ^ 0x55E021F6));
  *(void *)(v2 - 160) = 1725023529 - v5;
  uint64_t v6 = sub_10013ACFC(v2 - 192);
  return ((uint64_t (*)(uint64_t))((char *)*(&off_10025C670 + *(int *)(v2 - 184)) - 8))(v6);
}

uint64_t sub_100137464(uint64_t a1)
{
  if (v1 >= LODWORD(STACK[0x660]) + 1725021863) {
    int v3 = LODWORD(STACK[0x660]) - 1089 + dword_100273C40 - 576;
  }
  else {
    int v3 = v2;
  }
  dword_100273C40 = v3;
  return sub_1001375A8(a1, 2492029045LL, 1709269819LL);
}

uint64_t sub_1001375A8@<X0>(unsigned int a1@<W1>, int a2@<W2>, int a3@<W4>, int a4@<W8>)
{
  unsigned int v8 = (v5 ^ a1) >> (((a4 - 64) | 0x12) + v4 + 20);
  LOBYTE(v_Block_object_dispose(va, 8) = (v8 - ((2 * v8) & 0xD8) - 20) ^ 0xDB;
  *(_BYTE *)(v6 + (a3 - 1709269820)) = v8;
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL
                                        * ((1269
                                          * (a3
}

uint64_t sub_100137664@<X0>(int a1@<W3>, int a2@<W8>)
{
  BOOL v4 = v2 + 8 == ((a2 - 891695054) & 0x35262FCD ^ a1);
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (((2 * v4) | (4 * v4)) ^ (a2 - 414)))
}

uint64_t sub_1001376B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  LODWORD(STACK[0x5E0]) = a5;
  STACK[0x15A0] = 0x8ADBE34913D35396LL;
  LODWORD(STACK[0xA14]) = dword_100273C38 - 1227344546;
  uint64_t v8 = dword_100273C40;
  unint64_t v9 = 1856021207 * ((v7 - 192) ^ 0xED14979B4E69D6FELL);
  *(_DWORD *)(v7 - 180) = v5 - 2107019173 + v9;
  *(_DWORD *)(v7 - 18_Block_object_dispose(va, 8) = v9 ^ (v5 - 2107019173) ^ 0x1F;
  *(_DWORD *)(v7 - 184) = (v5 - 2107019231) ^ v9;
  *(_DWORD *)(v7 - 160) = v9 + v5 + 1123495911;
  *(_DWORD *)(v7 - 156) = v9;
  *(void *)(v7 - 176) = v8 - v9;
  *(void *)(v7 - 16_Block_object_dispose(va, 8) = v9 ^ v6;
  uint64_t v10 = sub_1001DD4A8(v7 - 192);
  return ((uint64_t (*)(uint64_t))*(&off_10025C670 + *(int *)(v7 - 192)))(v10);
}

uint64_t sub_100137780()
{
  int v3 = (v0 - 510) | 0x58;
  STACK[0x650] = (unint64_t)malloc(STACK[0x5C8]);
  uint32_t v4 = arc4random();
  LODWORD(xmmword_100273C44) = v4 + 492660219 - ((v4 << (v3 + 37)) & 0x3ABACBF6);
  int v5 = (v3 - 625611773) ^ xmmword_100273C44 ^ ((xmmword_100273C44 >> 30) | 0xC7E89524);
  *(_DWORD *)(v1 + 4) = ((v5 * v2) ^ 0x35FFFFD6)
                      + ((1477382858 * v5) & 0x6BFFFFAC)
                      - 413309402
                      - ((2 * (((v5 * v2) ^ 0x35FFFFD6) + ((1477382858 * v5) & 0x6BFFFFAC)) + 1409286230) & 0x3ABACBF6);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + v3) - 8))();
}

void sub_1001378AC()
{
}

uint64_t sub_1001378C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int8x16_t v7 = (int8x16_t)vld1q_dup_f32(v6);
  return sub_100136EB8( a6,  0LL,  v7,  (int8x16_t)vdupq_n_s32(0x7FFFFFFEu),  (int8x16_t)vdupq_n_s32(0x55979AC4u),  (int8x16_t)vdupq_n_s32(0x11FEB938u),  vdupq_n_s32(0x88FF5C9D),  (int8x16_t)vdupq_n_s32(0x9AD1F4C2),  (int8x16_t)vdupq_n_s32(0xA57512B2),  vdupq_n_s32(0xAD4576A7));
}

uint64_t sub_10013798C@<X0>(int a1@<W8>)
{
  LODWORD(STACK[0xA14]) = a1 + 1;
  gettimeofday((timeval *)STACK[0x5C0], 0LL);
  int v3 = (_DWORD *)STACK[0x658];
  int v4 = *(_DWORD *)(STACK[0x658] + 16) + 492660219 - ((2 * *(_DWORD *)(STACK[0x658] + 16)) & 0x3ABACBF6);
  v3[1] = *(_DWORD *)(STACK[0x658] + 24) + 492660219 - ((*(_DWORD *)(STACK[0x658] + 24) << (v1 ^ 0x67)) & 0x3ABACBF6);
  v3[2] = v4;
  uint32_t v5 = arc4random();
  v3[3] = v5 + 492660219 - ((2 * v5) & 0x3ABACBF6);
  uint32_t v6 = arc4random();
  *int v3 = v6 + 492660219 - ((2 * v6) & 0x3ABACBF6);
  uint64_t v7 = 1606104089
     * ((2 * ((v2 - 192) & 0x2806F337012D5AA0LL) - (v2 - 192) - 0x2806F337012D5AA8LL) ^ 0x1547F7FC8BC5E766LL);
  int v8 = STACK[0x660];
  LODWORD(STACK[0x648]) = LODWORD(STACK[0x660]) + 840712548;
  LODWORD(STACK[0x640]) = v8 + 1424360829;
  LODWORD(STACK[0x620]) = v8 - 620250899;
  int v9 = (DWORD1(xmmword_100273C44) ^ 0x39158C1A ^ (1664525
                                                * (xmmword_100273C44 ^ 0x1D5D65FB ^ (xmmword_100273C44 >> 30))
                                                - ((3329050
                                                  * (xmmword_100273C44 ^ 0x1D5D65FB ^ (xmmword_100273C44 >> 30))) & 0x4891D3C2)
                                                + 608758241))
     + (*v3 ^ 0x1D5D65FB);
  unsigned int v10 = (v9 ^ 0xFDFEFFFC) + 1166520020 + ((2 * v9) & 0xFBFDFFF8);
  DWORD1(xmmword_100273C44) = v10 - ((2 * v10 + 955425376) & 0x3ABACBF6) - 640239829;
  *(void *)(v2 - 160) = 994917323 - v7;
  *(void *)(v2 - 19fseek(v0, 0LL, 2) = v7 + 994917325;
  *(_DWORD *)(v2 - 17fseek(v0, 0LL, 2) = (((v1 ^ 0x5E4) - 710365758) | 9) + v7;
  *(_DWORD *)(v2 - 16_Block_object_dispose(va, 8) = ((v1 ^ 0x5E4) - 710365758) ^ v7;
  *(_DWORD *)(v2 - 164) = -1231242048 - v7 + (v1 ^ 0x5E4);
  *(_DWORD *)(v2 - 180) = v7;
  *(_DWORD *)(v2 - 176) = ((v1 ^ 0x5E4) - 710365795) ^ v7;
  uint64_t v11 = sub_10013ACFC(v2 - 192);
  return ((uint64_t (*)(uint64_t))*(&off_10025C670 + *(int *)(v2 - 184)))(v11);
}

uint64_t sub_100137C88()
{
  return (*(uint64_t (**)(void))(v0
                              + 8LL
                              * ((371 * (v1 < LODWORD(STACK[0x660]) + 994915657)) ^ (LODWORD(STACK[0x660]) - 1432))))();
}

uint64_t sub_100137CBC()
{
  return (*(uint64_t (**)(void))(v0
                              + 8LL
                              * (((((LODWORD(STACK[0x660]) - 1666) | 0xEA) ^ 0x199) * (v1 > 0x3B4D3E3A)) ^ (LODWORD(STACK[0x660]) - 1432))))();
}

uint64_t sub_100137D00@<X0>(int a1@<W8>)
{
  int v4 = (a1 - 106) | 0x602;
  LODWORD(xmmword_100273C44) = dword_100274600;
  unint64_t v5 = 516615401 * ((0xE919A3F3EA000F92LL - ((v3 - 192) | 0xE919A3F3EA000F92LL) + v2) ^ 0x9E5AD477669CF65FLL);
  *(void *)(v3 - 176) = (v1 - 821040047) ^ v5;
  *(_DWORD *)(v3 - 19fseek(v0, 0LL, 2) = v5 + 1;
  *(_DWORD *)(v3 - 18_Block_object_dispose(va, 8) = v4 - 1194255872 - v5;
  *(_DWORD *)(v3 - 15fseek(v0, 0LL, 2) = (v4 - 185257467) ^ v5;
  *(_DWORD *)(v3 - 14_Block_object_dispose(va, 8) = ((v4 - 1194255872) ^ 0x47) + v5;
  *(_DWORD *)(v3 - 16_Block_object_dispose(va, 8) = ((v4 - 1194255872) | 0x50) ^ v5;
  *(void *)(v3 - 160) = v5 + 345479972;
  uint64_t v6 = sub_1000AF0AC(v3 - 192);
  return ((uint64_t (*)(uint64_t))((char *)*(&off_10025C670 + *(int *)(v3 - 184)) - 4))(v6);
}

uint64_t sub_100137DF0()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * (int)((((STACK[0x640] & 0xAB19F77A ^ 0xFFFFFFC5) + (STACK[0x648] & 0xCDE3BB7F))
                                               * (v1 < 0x14979B24)) ^ (LODWORD(STACK[0x660]) - 803)))
                            - 12LL))();
}

uint64_t sub_100137E68()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * ((37
                                          * (v1 > (((STACK[0x620] & 0x24F843F6) + 345478391) ^ LODWORD(STACK[0x660]) ^ 0x5F8u))) ^ (LODWORD(STACK[0x660]) - 803)))
                            - 12LL))();
}

uint64_t sub_100137ED4()
{
  int v5 = (v0 - 790) | 0x302;
  *(_DWORD *)(v2 + 4LL * (v4 - 1166520889 + v5)) ^= 0xEA904B04 ^ *(_DWORD *)(STACK[0x650]
                                                                                         + 4LL
                                                                                         * (v4 - 1166520889 + v5));
}

void sub_100137F6C()
{
}

uint64_t sub_100137F78()
{
  STACK[0x870] = STACK[0x5B0];
  STACK[0x918] = v0;
  STACK[0x8C0] = STACK[0x650];
  free(v1);
  return sub_100138714();
}

uint64_t sub_100138014@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W8>)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v5
                                                                        + 8LL
                                                                        * (int)(((v3 + 526) * (a3 == v4 + 41)) ^ v3))
                                                            - (v3 ^ 0x3BELL)))( a1,  a2,  4294924389LL);
}

uint64_t sub_100138050()
{
  BOOL v1 = malloc(0x14uLL) == 0LL;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + ((v1 * ((v0 - 22) ^ 0x39C)) ^ v0))
}

uint64_t sub_100138094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5
                                                              + 8LL
                                                              * ((207
                                                                * (a3 != v4 + ((34 * (v3 ^ 0x51) - 1655) | 0xA4) - 149)) ^ v3)))( a1,  a2,  4294924389LL);
}

uint64_t sub_1001380D8()
{
  BOOL v1 = malloc(0x19uLL) == 0LL;
  return ((uint64_t (*)(void))*(&off_10025C670 + ((748 * ((v1 ^ (v0 - 8)) & 1)) ^ v0)))();
}

uint64_t sub_100138120(_BYTE *a1)
{
  int v5 = (2 * v2 - 277) | 0x114;
  uint64_t v6 = *(char **)(v1 + 8);
  char v7 = *v6;
  int v8 = *(_DWORD *)(qword_1002748C8 + ((v5 - 593721293) & dword_100274AD0));
  unint64_t v9 = -1263679611
     * ((-1263679611 * ((v6 ^ v8) & 0x7FFFFFFF)) ^ ((-1263679611 * ((v6 ^ v8) & 0x7FFFFFFF)) >> 16));
  unint64_t v10 = -1263679611
      * ((-1263679611 * ((a1 ^ v8) & 0x7FFFFFFF)) ^ ((-1263679611 * ((a1 ^ v8) & 0x7FFFFFFF)) >> 16));
  *a1 = byte_100213680[v9 >> 24] ^ v7 ^ byte_100215CA0[v9 >> 24] ^ byte_10023A170[v9 >> 24] ^ byte_100213680[v10 >> 24] ^ byte_100215CA0[v10 >> 24] ^ byte_10023A170[v10 >> 24] ^ v9 ^ v10 ^ (BYTE3(v9) * (v5 - 4)) ^ (17 * BYTE3(v10));
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (v5 ^ 3)) - 8LL))();
}

void sub_100138238()
{
}

uint64_t sub_100138240(void *a1)
{
  STACK[0x688] = 0LL;
  return ((uint64_t (*)(void))*(&off_10025C670
}

uint64_t sub_100138290(void *a1)
{
  *(void *)(v1 + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(v1 + 16) = 603954228;
  STACK[0x870] -= 144LL;
  return ((uint64_t (*)(void))STACK[0x7D8])();
}

uint64_t sub_1001382C0()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((LODWORD(STACK[0x660]) - 753) ^ (84 * (v0 != 0))))
                            - ((LODWORD(STACK[0x660]) + 97712515) | 0x2CA870u)
                            + 100640873LL))();
}

uint64_t sub_10013830C()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
}

uint64_t sub_10013834C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = STACK[0x858];
  LODWORD(STACK[0x858]) += (34 * (v5 ^ 0x12E)) ^ 0x683;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7
                                                                                         + 8LL
                                                                                         * ((903
                                                                                           * ((((v5 + 225) | 0x482) ^ 0x6749AD09u)
                                                                                            + v8 < 0x80000001)) ^ v5)))( a1,  a2,  a3,  a4,  a5,  v6);
}

void sub_1001383BC()
{
}

uint64_t sub_10013849C()
{
  uint64_t v1 = off_100273C30;
  LOBYTE(STACK[0xB69]) = *off_100273C30 - 114;
  LOBYTE(STACK[0xB6A]) = v1[1] - 114;
  LOBYTE(STACK[0xB6B]) = v0 + 17 + v1[2] + 60;
  LOBYTE(STACK[0xB6C]) = v1[3] - 114;
  LOBYTE(STACK[0xB6D]) = v1[4] + ((v0 - 114) & 0xFE ^ 0x40);
  LOBYTE(STACK[0xB6E]) = v1[5] - 114;
  LOBYTE(STACK[0xB6F]) = v1[6] - 114;
  LOBYTE(STACK[0xB70]) = v1[7] - 114;
  LOBYTE(STACK[0xB71]) = v1[8] - 114;
  LOBYTE(STACK[0xB72]) = v1[9] - 114;
  LOBYTE(STACK[0xB73]) = v1[10] - 114;
  LOBYTE(STACK[0xB74]) = v1[11] - 114;
  LOBYTE(STACK[0xB75]) = v1[12] - 114;
  LOBYTE(STACK[0xB76]) = v1[13] - 114;
  LOBYTE(STACK[0xB77]) = v1[14] - 114;
  LOBYTE(STACK[0xB78]) = v1[15] - 114;
  LOBYTE(STACK[0xB79]) = v1[16] - 114;
  LOBYTE(STACK[0xB7A]) = v1[17] - 114;
  LOBYTE(STACK[0xB7B]) = v1[18] - 114;
  LOBYTE(STACK[0xB7C]) = v1[19] - 114;
  LOBYTE(STACK[0xB7D]) = v1[20] - 114;
  LOBYTE(STACK[0xB7E]) = v1[21] - 114;
  LOBYTE(STACK[0xB7F]) = off_100273C30[22] - 114;
  CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
  BOOL v3 = CFStringCreateWithCString(0LL, (const char *)&STACK[0xB69], SystemEncoding) == 0LL;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + ((7 * v3) ^ v0)) - 4))();
}

uint64_t sub_10013861C(uint64_t a1)
{
  BOOL v2 = MGCopyAnswer(a1, 0LL) == 0;
  return ((uint64_t (*)(void))*(&off_10025C670
                             + ((((v2 ^ (v1 + 1)) & 1) * (((v1 + 1076) | 0x44) ^ 0x651)) ^ v1)))();
}

uint64_t sub_100138668()
{
  STACK[0x870] += (515 * (v0 ^ 0x1CDu)) ^ 0x649LL;
  unint64_t v2 = STACK[0x8B0];
  STACK[0x5B8] = STACK[0x8B0];
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((507 * (v2 != 0)) ^ v0 ^ 0x59E)) - 12LL))();
}

uint64_t sub_100138714()
{
  if (v0) {
    int v3 = 1;
  }
  else {
    int v3 = 0;
  }
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((v3 * (v1 ^ 0x601)) ^ v1)) - 12LL))();
}

uint64_t sub_100138738()
{
}

uint64_t sub_100138778@<X0>(int a1@<W8>)
{
  LODWORD(STACK[0x860]) = *(unsigned __int8 *)(v1 + 1) - ((2 * *(unsigned __int8 *)(v1 + 1)) & 0xFFDF) + 1148548335;
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
}

uint64_t sub_1001387D8@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((((LODWORD(STACK[0x6FC]) | ((unint64_t)(LODWORD(STACK[0x6FC]) < ((a1 - 84) | 0x400u) + 738485493) << 32)) != 738487159)
                                          * (((a1 - 437) | 0x42) - 352)) ^ (a1 - 53)))
                            - 12LL))();
}

uint64_t sub_100138854@<X0>(int a1@<W8>)
{
  LODWORD(STACK[0x6FC]) = v1;
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((1283
}

uint64_t sub_1001388B0@<X0>(int a1@<W8>)
{
  unsigned int v4 = (a1 - 1926453991) ^ 0x8D2CA72D;
  BOOL v5 = v1 < v2;
  *(_BYTE *)STACK[0x920] = 0;
  if (v5 == v2 > 0x3696122F) {
    BOOL v5 = v1 > 0x3696122F;
  }
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (int)((50 * !v5) ^ v4)) - 12LL))();
}

void sub_100138960()
{
}

uint64_t sub_100138988()
{
  BOOL v5 = v2 < v0;
  *((_BYTE *)&STACK[0xB80] + v3 - 0x1468D0B22F427749LL) = 45;
  if (v5 == v3 - 0x1468D0B14B827B3ELL < v0) {
    BOOL v5 = v3 - 0x1468D0B14B827B3ELL < v2;
  }
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((!v5 * ((v1 - 1311) ^ 0x14C)) ^ (v1 - 1012))) - 12LL))();
}

void sub_100138A0C()
{
  LODWORD(STACK[0x7FC]) = v0;
  JUMPOUT(0x100138A14LL);
}

uint64_t sub_100138A18()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * (((STACK[0x788] == 0) * ((v0 ^ 0x425) - 656)) ^ (v0 - 1111)))
                            - (v0 ^ 0x4BEu)
                            + 564LL))();
}

uint64_t sub_100138A54()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
}

uint64_t sub_100138A94@<X0>(void *a1@<X0>, int a2@<W8>)
{
  int v2 = a2 + 107;
  free(a1);
  STACK[0x788] = 0LL;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
}

uint64_t sub_100138AE8@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL
}

uint64_t sub_100138B24@<X0>(int a1@<W8>)
{
  int v2 = *(unsigned __int8 *)STACK[0x618];
  LODWORD(STACK[0x660]) = v2 + 104351676 - ((2 * v2) & 0x17C) + 2;
  return (*(uint64_t (**)(void))(v1
                              + 8LL
}

uint64_t sub_100138B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 8LL * (((v5 == ((v6 + 43) ^ 0x86)) * ((v6 + 163) ^ 0x3DD)) ^ v6))
                                                                                       - 12LL))( a1,  a2,  a3,  a4,  a5,  4294925295LL);
}

uint64_t sub_100138BD8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W8>)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 8LL * (int)(((((a6 ^ 0x5F3) + 1363056535) & 0xAEC16E93 ^ ((a6 ^ 0x5F3) - 1255177821) & 0x4AD07EFF ^ 0x55F) * ((v6 - 1) < 2)) ^ a6 ^ 0x5F3))
                                                                                       - 12LL))( a1,  a2,  a3,  a4,  a5,  4294925295LL);
}

uint64_t sub_100138C40@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W8>)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 8LL * ((1337 * ((LODWORD(STACK[0x674]) - 1645689335) > 0x42)) ^ a6))
                                                                                       - (a6 ^ 0x6Fu)
                                                                                       + 141LL))( a1,  a2,  a3,  a4,  a5,  4294925278LL);
}

uint64_t sub_100138CA0(uint64_t a1)
{
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3
                                                               + 8LL
                                                               * ((322
                                                                 * (STACK[0x928]
                                                                  + ~v2
                                                                  + ((v1 - 9) ^ 0x90LL) > 0xF)) ^ v1))
                                                   - 8LL))( a1,  v2);
}

uint64_t sub_100138D28()
{
  v2.i64[0] = 0x2020202020202020LL;
  v2.i64[1] = 0x2020202020202020LL;
  v3.i64[0] = 0x9090909090909090LL;
  v3.i64[1] = 0x9090909090909090LL;
  *int v0 = vaddq_s8(vsubq_s8(*v1, vandq_s8(vaddq_s8(*v1, *v1), v2)), v3);
  return sub_100138D60();
}

uint64_t sub_100138D60@<X0>(uint64_t a1@<X1>, int a2@<W8>)
{
  __int16 v4 = ((*(unsigned __int8 *)(a1 + 65) - ((2 * *(unsigned __int8 *)(a1 + 65)) & 0x52)) << 8) - 22272;
  __int16 v5 = ((v4 ^ 0xA900) - ((((a2 - 223) | 0x98) - 31960) & (2 * v4)) - 15689) ^ 0xC2B7 | (*(unsigned __int8 *)(a1 + 66)
                                                                                      - ((2
  unsigned __int16 v6 = v5 - ((2 * v5) & 0xE908) - 2940;
  LOWORD(STACK[0x842]) = v6;
  int v7 = v6 ^ 0xF484;
  LODWORD(STACK[0x658]) = 2 * v7;
  unsigned int v8 = (v6 ^ 0x7DFEAB7A) - 1758828437 + ((2 * v7) & 0xBFFC);
  BOOL v9 = v8 < 0x1528C826;
  BOOL v10 = v8 > v2 - 1290695121;
  return (*(uint64_t (**)(void))(v3 + 8LL * ((!v10 | (32 * !v10)) ^ a2)))();
}

uint64_t sub_100138E60()
{
  int v2 = malloc(v0);
  STACK[0x650] = (unint64_t)v2 + 0x4378B8CC4843E522LL;
  STACK[0xA50] = (unint64_t)v2 + 0x4378B8CC4843E522LL;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + (((v2 == 0LL) * (((v1 + 810) | 0x280) ^ 0x6A0)) ^ v1)) - 8))();
}

uint64_t sub_100138EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(v4 + 64) = *(_DWORD *)(v4 + 64) + ((v3 + 565) | 0x282) - 1665;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void))STACK[0x8E8])(a1, a2, a3, LODWORD(STACK[0x660]));
}

void sub_100138EE8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = (a4 - 1663) | 4u;
  unint64_t v6 = STACK[0xA40];
  unint64_t v7 = STACK[0x678];
  STACK[0x750] = (v5 ^ 0xFFFFFFFFFFFFFFFBLL) + *(void *)(v4 + 8LL * (a4 - 1605));
  STACK[0x728] = v7;
  unint64_t v8 = STACK[0x870];
  STACK[0x690] = (unint64_t)&STACK[0xB80] + STACK[0x870];
  STACK[0x870] = (((_DWORD)v5 - 344791180) & 0x148D1DEF) + v8 - 1355;
  STACK[0x7A0] = v6;
  STACK[0xA08] = *(void *)(v4 + 8LL * (int)v5);
  JUMPOUT(0x100138FA0LL);
}

uint64_t sub_10013902C(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * ((1814
                                          * (v2 + a1 + 57 < (((v1 - 819) | 4) ^ 0xFFFFFD2C) + ((v1 - 335) | 0x130))) ^ v1))
                            - 4LL))();
}

uint64_t sub_10013907C()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL * ((1502 * (v0 - v1 - v2 + ((v3 - 603409572) & 0x23F74FEFu) > 6)) ^ v3))
                            - ((v3 - 129) ^ 0x2B9LL)))();
}

uint64_t sub_1001390E0(unsigned int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (v1 ^ (104 * (a1 > 0xE)))) - ((v1 - 538) ^ 0x619u) + 1654LL))();
}

uint64_t sub_100139118@<X0>(int a1@<W1>, int a2@<W8>)
{
  *(void *)&__int128 v6 = 0x3030303030303030LL;
  *((void *)&v6 + 1) = 0x3030303030303030LL;
  *(_OWORD *)(v2 + (a1 + a2)) = v6;
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * ((1613 * ((v3 & 0x1FFFFFFF0LL) == 16)) ^ (v4 - 771)))
}

void sub_100139158()
{
}

uint64_t sub_100139164()
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL
}

uint64_t sub_1001391C4()
{
  return (*(uint64_t (**)(void))(v2
                              + 8LL
}

uint64_t sub_1001391FC@<X0>(int a1@<W8>)
{
}

void sub_100139254()
{
  int v2 = *(_DWORD *)(v1 + 64);
  unsigned int v3 = *(_DWORD *)(v1 + 68);
  *(_BYTE *)(v1 + 56) = (((v2 - 767718987) >> 21)
  *(_BYTE *)(v1 + 57) = (((v2 - 767718987) >> 13) - (((v2 - 767718987) >> 12) & 0x92) - 55) ^ 0xF9;
  *(_BYTE *)(v1 + 5_Block_object_dispose(va, 8) = (((v2 - 767718987) >> 5) - (((v2 - 767718987) >> 4) & 0x62) - 79) ^ 0x81;
  HIDWORD(v4) = v2 + 306022837;
  LODWORD(v4) = ~v3;
  *(_BYTE *)(v1 + 59) = ((v4 >> 29) + (~(2 * (v4 >> 29)) | 0xAF) - 87) ^ 0x98;
  *(_BYTE *)(v1 + 60) = (v3 >> 21) ^ 0x77;
  *(_BYTE *)(v1 + 61) = (v3 >> 13) ^ 0x39;
  *(_BYTE *)(v1 + 6fseek(v0, 0LL, 2) = (v3 >> 5) ^ 0x1C;
  JUMPOUT(0x10013933CLL);
}

uint64_t sub_100139344(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_BYTE *)(v5 + 63) = v4;
  STACK[0x810] = (v6 ^ 0xFFFFFFFFFFFFFFC6LL) + *(void *)(v7 + 8LL * (int)v6);
  return sub_100139C94(a1, a2, a3, a4);
}

uint64_t sub_100139368()
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (v1 ^ ((4 * (v0 != v2)) | (8 * (v0 != v2)))))
                            - (v1 - 815)
}

uint64_t sub_100139398()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((387
}

uint64_t sub_1001393D4@<X0>(int a1@<W8>)
{
  return sub_100136980(308, a1, 1.39804329e-76);
}

uint64_t sub_1001393F8@<X0>(int a1@<W8>)
{
  *(_BYTE *)(v2 + (v3 + a1)) = 48;
}

uint64_t sub_10013943C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  STACK[0x810] = *(void *)(v5 + 8LL * v4);
  return sub_100139C94(a1, a2, a3, a4);
}

uint64_t sub_100139500(int a1, uint64_t a2, int a3)
{
  unsigned int v6 = a1 + v4 + 17070532 + 355 * (a3 ^ 0x6FB) + 1474;
  if (v6 <= 0x40) {
    unsigned int v6 = 64;
  }
}

uint64_t sub_10013959C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, unsigned int a8)
{
  unsigned int v11 = a7 + 2184;
  if (v11 <= 0x40) {
    unsigned int v11 = a8;
  }
  return ((uint64_t (*)(void))(*(void *)(v10
                                        + 8LL
}

uint64_t sub_1001395FC(int a1, uint64_t a2, int a3, int a4)
{
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL
                                        * ((45
}

uint64_t sub_100139648@<X0>(uint64_t a1@<X8>)
{
  *(_BYTE *)(v2 + (((((v7 ^ 0x8E) - 583) | 0x38u) + v3) & (v4 + a1 + 535))) = *(_BYTE *)(v6 + v1 - 567404835)
                                                                            - ((2 * *(_BYTE *)(v6 + v1 - 567404835)) & 0x60)
                                                                            + 48;
  return (*(uint64_t (**)(void))(v8 + 8LL * ((142 * ((v5 + a1 + 1) < 0x40)) ^ v7 ^ 0x8E)))();
}

void sub_1001396B0()
{
}

uint64_t sub_100139734@<X0>(int a1@<W8>)
{
  char v8 = 51 * (v3 ^ 0x8B);
  int v9 = v3 - 923;
  int v10 = v5 + 1;
  char v11 = *(_BYTE *)(STACK[0x970] + (v5 - 567404835));
  *(_BYTE *)(v1 + (a1 - 1984514192)) = v11 - ((v8 - 107) & (2 * v11)) + 48;
  BOOL v12 = v10 + v4 < v6;
  if (v6 < v2 != v10 + v4 < v2) {
    BOOL v12 = v6 < v2;
  }
  return ((uint64_t (*)(uint64_t))(*(void *)(v7 + 8LL * ((1603 * !v12) ^ v9)) - 8LL))(2310453104LL);
}

void sub_1001397C4()
{
}

uint64_t sub_1001397D0()
{
  unsigned int v4 = v2 - 1282311541;
  unsigned int v5 = (*(_DWORD *)(v1 + 68) ^ 0xE8E12591)
     + v4
     - ((2 * ((*(_DWORD *)(v1 + 68) ^ 0xE8E12591) + v4)) & 0xD1C24B22)
     - 387897967;
  *(_DWORD *)(v1 + 6_Block_object_dispose(va, 8) = v5;
}

uint64_t sub_100139844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(v4 + 64) += v3 ^ 0x64E;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void))STACK[0x978])(a1, a2, a3, LODWORD(STACK[0x660]));
}

void sub_100139864()
{
}

uint64_t sub_100139878(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = (a4 - 620) | 0x20u;
  unint64_t v7 = STACK[0x6E8];
  unint64_t v8 = STACK[0x910];
  STACK[0x978] = v6 + *(void *)(v5 + 8LL * (a4 - 1634)) - 1086;
  STACK[0xA70] = v8;
  LODWORD(STACK[0x864]) = v4 + 16;
  STACK[0x6E0] = v7;
  int v9 = ((v4 + 16) ^ 0xD4FE6C26)
     + (((v6 ^ 0x2B4) - 1544) ^ 0x404304EF)
     + ((2 * *(_DWORD *)(v8 + 68)) & 0x56 ^ 2)
     + (*(_DWORD *)(v8 + 68) & 0x3F ^ 0xBFBCFB7A);
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * (int)((668
                                               * ((v9 ^ 0x43EF9BE7) - 1139776551 + ((2 * v9) & 0x87DF37CE) < 0xFFFFFFC0)) ^ v6))
                            - 4LL))();
}

void sub_1001398A4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  STACK[0x978] = *(void *)(v4 + 8LL * (a4 - 1619)) - 4LL;
  JUMPOUT(0x1001398DCLL);
}

uint64_t sub_10013999C(int a1, int a2)
{
  else {
    int v7 = a2 + v3;
  }
  return (*(uint64_t (**)(void))(v6 + 8LL * ((211 * (v4 - v5 - a1 + v7 >= (((v2 - 58) | 0x421) ^ 0x46Eu))) ^ v2)))();
}

uint64_t sub_1001399FC(int a1, int a2, int a3)
{
  int v8 = a1 + v6;
  int v9 = v8 + v4;
  unsigned int v10 = a3 + v9;
  BOOL v12 = v5 - v8 < v10 || v10 > 0xF;
  return (*(uint64_t (**)(void))(v7 + 8LL * ((1180 * ((v12 ^ (v3 - 25)) & 1)) ^ v3)))();
}

uint64_t sub_100139A44()
{
  uint64_t v6 = (v0 ^ 0x3C9u) + 174;
  uint64_t v7 = (v1 + v2 - 1) + v4;
  unint64_t v8 = v7 - (void)&unk_1002378F0 - 2;
  BOOL v9 = (unint64_t)(v7 - (void)&unk_100212450) >= 0x10
    && (unint64_t)(v7 - (void)&unk_10023B400 - 5) >= 0x10;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  BOOL v11 = !v9 || v8 < 0x10;
  unint64_t v12 = v7 - v3;
  BOOL v13 = v12 >= v6 - 1105;
  char v14 = v12 < v6 - 1105 || v11;
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), StatusReg);
  if (!v13) {
    char v14 = 1;
  }
  if (v8 < 0x10) {
    char v14 = 1;
  }
  return (*(uint64_t (**)(void))(v5 + 8LL * ((1236 * ((v14 & 1) == 0)) ^ v0)))();
}

uint64_t sub_100139AE0@<X0>(int a1@<W8>)
{
  int v7 = v3 ^ 0x30;
  *(int8x16_t *)(v5 + (v1 + a1)) = veorq_s8(*v4, (int8x16_t)xmmword_100212400);
  BOOL v8 = ((v7 + 518353531) & 0xE11A8A7B) - 106LL != ((v2 + 1) & 0x1FFFFFFF0LL);
  return ((uint64_t (*)(__n128))(*(void *)(v6 + 8LL * ((16 * v8) | (32 * v8) | v7)) - 12LL))((__n128)xmmword_100212400);
}

uint64_t sub_100139BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned int v10 = (*(_DWORD *)(v8 + 68) ^ 0xE8E12591)
      + v7
      - ((95 * (a7 ^ 0x600) - 775797549) & (2 * ((*(_DWORD *)(v8 + 68) ^ 0xE8E12591) + v7)))
      - 387897967;
  *(_DWORD *)(v8 + 6_Block_object_dispose(va, 8) = v10;
  return (*(uint64_t (**)(void))(v9 + 8LL * ((94 * ((v10 ^ (((a7 + 654410154) & 0xD8FE7EC6) - 387899633)) >= v7)) ^ a7)))();
}

uint64_t sub_100139C40()
{
  return (*(uint64_t (**)(void))(v3 + 8LL * (((((v2 ^ 0x41B) - 1118) ^ 0x12F) * (v0 == v1)) ^ v2)))();
}

void sub_100139C6C()
{
  LODWORD(STACK[0x700]) = v1;
  STACK[0x810] = *(void *)(v2 + 8LL * v0) + ((v0 + 1565) ^ 0xFFFFFFFFFFFFF9D4LL);
  JUMPOUT(0x100139C90LL);
}

uint64_t sub_100139C94(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  LODWORD(STACK[0x658]) = a4 + 1930992997;
  STACK[0x650] = 558655447LL;
  return sub_10012AEF8();
}

uint64_t sub_100139D1C@<X0>(int a1@<W8>)
{
  *(_BYTE *)(v5 + (v1 + a1)) = *(_BYTE *)(v4 + v2 - 947768899) ^ *((_BYTE *)&unk_100212450
                                                                               + ((v2 - 947768899) & 0xF)) ^ byte_10023B400[((v2 - 947768899) & 0xF) + 5] ^ (-29 * ((v2 - 67) & 0xF)) ^ byte_1002378F0[((v2 - 947768899) & 0xF) + ((v3 - 1118) ^ 1LL)] ^ 0x30;
  return (*(uint64_t (**)(uint64_t))(v6 + 8LL * ((1335 * ((a1 + v1 + 1) < 0x40)) ^ (v3 - 779))))(4294967267LL);
}

void sub_100139DB4()
{
}

void sub_100139DBC()
{
}

uint64_t sub_100139E10()
{
}

uint64_t sub_100139E68(uint64_t a1, unint64_t a2)
{
  LOBYTE(STACK[0xB90]) = LOBYTE(STACK[0xB80]) ^ 2;
  LOBYTE(STACK[0xB91]) = LOBYTE(STACK[0xB81]) ^ 2;
  LOBYTE(STACK[0xB92]) = LOBYTE(STACK[0xB82]) ^ 2;
  LOBYTE(STACK[0xB93]) = LOBYTE(STACK[0xB83]) ^ 2;
  LOBYTE(STACK[0xB94]) = LOBYTE(STACK[0xB84]) ^ 2;
  LOBYTE(STACK[0xB95]) = LOBYTE(STACK[0xB85]) ^ 2;
  LOBYTE(STACK[0xB96]) = LOBYTE(STACK[0xB86]) ^ (44 * ((v3 - 110) ^ 6) - 102);
  LOBYTE(STACK[0xB97]) = LOBYTE(STACK[0xB87]) ^ 2;
  LOBYTE(STACK[0xB98]) = LOBYTE(STACK[0xB88]) ^ 2;
  LOBYTE(STACK[0xB99]) = LOBYTE(STACK[0xB89]) ^ 2;
  LOBYTE(STACK[0xB9A]) = LOBYTE(STACK[0xB8A]) ^ 2;
  LOBYTE(STACK[0xB9B]) = LOBYTE(STACK[0xB8B]) ^ 2;
  LOBYTE(STACK[0xB9C]) = LOBYTE(STACK[0xB8C]) ^ 2;
  LOBYTE(STACK[0xB9D]) = LOBYTE(STACK[0xB8D]) ^ 2;
  LOBYTE(STACK[0xB9E]) = LOBYTE(STACK[0xB8E]) ^ 2;
  LOBYTE(STACK[0xB9F]) = LOBYTE(STACK[0xB8F]) ^ 2;
  LODWORD(STACK[0xC58]) = 781741397;
  STACK[0xC38] = 0xE8E125912DC2764BLL;
  STACK[0xC40] = 0xC5C1D9754D4951FDLL;
  STACK[0xC48] = 0x3A3E268AB2B6AE02LL;
  LODWORD(STACK[0xC50]) = -371289332;
  LODWORD(STACK[0xC54]) = 2028013733;
  unint64_t v5 = STACK[0x960];
  STACK[0x8E8] = *(void *)(v4 + 8LL * (v3 - 622)) - 4LL;
  int v6 = STACK[0x9B4];
  STACK[0x618] = a2;
  STACK[0xA68] = v5;
  LODWORD(STACK[0x8E4]) = v6;
  STACK[0x970] = a2;
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((208
                                          * (v6
                                           + 1028141499
                                           + ((*(_DWORD *)(v5 + 68) << ((44 * ((v3 - 110) ^ 6) + 75) & 0xCE ^ 0x83)) & 0x6A ^ (((44 * ((v3 - 622) ^ 6) + 1642128791) & 0x9E1F1EF9) - 1751))
                                           + (*(_DWORD *)(v5 + 68) & 0x3F ^ 0xFEFB7DA4)
                                           + 2001586907 < 0xFFFFFFC0)) ^ (44 * ((v3 - 622) ^ 6))))
                            - 8LL))();
}

void sub_100139FC0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) - 928048777 * (((a1 | 0x634B8ECF) - (a1 | 0x9CB47130) - 1665896144) ^ 0x4557FBA2);
  __asm { BR              X10 }

uint64_t sub_10013A07C@<X0>(int a1@<W8>)
{
  int v2 = a1 ^ 0x1B6;
  BOOL v3 = malloc(0x98uLL) != 0LL;
  return (*(uint64_t (**)(void))(v1 + 8LL * ((((v2 - 511351619) & 0x1E7A9ABE ^ 0x55D) * v3) ^ v2)))();
}

uint64_t sub_10013A0C4(uint64_t a1)
{
  *(_DWORD *)a1 = 1711260689;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 56) = 448329679;
  *(void *)(a1 + 64) = 0x4378B8CC4843E522LL;
  *(_DWORD *)(a1 + 7fseek(v0, 0LL, 2) = 678136159;
  *(_WORD *)(a1 + 9fseek(v0, 0LL, 2) = 22113;
  *(void *)(a1 + 104) = 0LL;
  *(_DWORD *)(a1 + 11fseek(v0, 0LL, 2) = 1768032834;
  *(_DWORD *)(a1 + 96) = -1062694300;
  *(void *)(a1 + 120) = 0x57F7A3E501E5FAB3LL;
  *(void *)(a1 + 136) = 0LL;
  *(_DWORD *)(a1 + 144) = 150298638;
  return (*(uint64_t (**)(void))(v2 + 8LL * (v1 + 421)))();
}

uint64_t sub_10013A19C@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((((a1 - 553) ^ 0x7B) * (v2 != v1)) ^ (a1 + 640)))
                            - ((a1 - 553) ^ 0x339u)
                            + 895LL))();
}

uint64_t sub_10013A1D4@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * (((*(void *)(v1 - 0x57F7A3E501E5FAABLL) == 0LL) * (89 * (a1 ^ 0x389) - 160)) ^ a1))
                            - 89 * (a1 ^ 0x389u)
                            + 174LL))();
}

uint64_t sub_10013A21C()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL * ((77 * (*(void *)(v0 - 0x57F7A3E501E5FA9BLL) == 0LL)) ^ (v2 + 857)))
                            - 12LL))();
}

uint64_t sub_10013A254(void *a1)
{
  *(void *)(v1 + 120) = 0x57F7A3E501E5FAB3LL;
  BOOL v5 = malloc(0x28uLL) != 0LL;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((795 * v5) ^ (v4 + 1196)))
                            - ((v4 + 795650565) ^ 0x2F6CAF2Au)
                            + 1433LL))();
}

uint64_t sub_10013A310(uint64_t *a1)
{
  int v6 = *(_DWORD *)(v1 + 20) + v2;
  *a1 = *(void *)(v1 + 40) ^ v2;
  a1[1] = 0LL;
  a1[3] = 0LL;
  unsigned int v7 = malloc((v6 - 1225326789));
  a1[1] = (uint64_t)v7;
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
}

uint64_t sub_10013A3A4()
{
  *(_DWORD *)(v0 + 16) = v3;
  return (*(uint64_t (**)(void))(v1
                              + 8LL
                              * ((248
                                * ((v3 | ((unint64_t)(v3 < (v2 ^ 0x1BC) + 1225326593) << 32)) == 1225326789)) ^ v2)))();
}

uint64_t sub_10013A428@<X0>(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  BOOL v10 = v2 < a2;
  char v11 = *(_BYTE *)(*(void *)(v6 + 32) + v3 + (v9 ^ 0xF69CDA6AD6A7930CLL));
  *(_BYTE *)(v4 + a1 - 0x556693EDB12119E6LL) = v11 - ((2 * v11) & 0x84) + 66;
  if (v10 == v5 - 0x76249CA8FFE015DALL < a2) {
    BOOL v10 = v5 - 0x76249CA8FFE015DALL < v2;
  }
  return (*(uint64_t (**)(void))(v7 + 8LL * ((248 * !v10) ^ v8)))();
}

uint64_t sub_10013A4CC()
{
  uint64_t v5 = malloc(*(_DWORD *)(v0 + 28) ^ v2 ^ 0x5EFC540Fu);
  *(void *)(v1 + 24) = v5;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (((v5 != 0LL) * ((v4 ^ 0x622) + (v4 ^ 0x284) - 1624)) ^ v4)) - 12LL))();
}

uint64_t sub_10013A520()
{
  *(_DWORD *)(v0 + 3fseek(v0, 0LL, 2) = v4;
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((19
                                          * ((v1 ^ 0x7D5F7B5BFCFDD9D7LL)
                                           - 0x7D5F7B5B68F20C46LL
                                           + ((v1 << (((v3 - 60) | 0x32) ^ 0x37)) & 0x1F9FBB3AELL) == 2483801489LL)) ^ v3))
                            - 8LL))();
}

uint64_t sub_10013A5E4(uint64_t a1)
{
  BOOL v10 = v2 < v1;
  *(_BYTE *)(v5 + a1 - 0x3C18DD332A85F59BLL) = *(_BYTE *)(v4 + *v7 - 0x5AECB669D340FE3ELL)
                                             - (((v9 - 10) ^ 0xB2) & (2 * *(_BYTE *)(v4 + *v7 - 0x5AECB669D340FE3ELL)))
                                             + 66;
  if (v10 == v6 - 0x29F1311610BE6E56LL < v1) {
    BOOL v10 = v6 - 0x29F1311610BE6E56LL < v2;
  }
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((!v10 * v3) ^ v9)) - 8LL))();
}

void sub_10013A68C(uint64_t a1@<X8>)
{
  *(void *)(v2 + 120) = a1;
  *(_DWORD *)(v2 + 96) = (*(_DWORD *)(v2 + 96) & 0xFFFFFFFB ^ 0xC0A89264)
                       - 1062694300
                       - (((*(_DWORD *)(v2 + 96) & 0xFFFFFFFB ^ 0xC0A89264) & 0x40A89262 ^ *(_DWORD *)(v2 + 96) & 2) << (v1 - 53))
                       - 4;
  *(_DWORD *)uint64_t v2 = 1711260691;
  *(_DWORD *)(v2 + 4) = 104351674;
  *int v3 = v2;
}

uint64_t xtiKg(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  unint64_t v5 = 444472921
     * ((((unint64_t)v7 | 0xEA735D22C64C6F32LL)
  int v10 = v5 ^ 0x68D9B3A5;
  uint64_t v8 = a4;
  unsigned int v9 = (char *)&loc_1000AE5FC + v5 - 4;
  uint64_t v12 = a2;
  uint64_t v13 = a1;
  v7[0] = v5 ^ a5;
  v7[1] = v5 ^ a3;
  sub_1000AE554((uint64_t)v7);
  return v11;
}

uint64_t sub_10013ACFC(uint64_t result)
{
  unint64_t v1 = 1606104089 * ((((2 * result) | 0x3ADB71A5212363FCLL) - result - 0x1D6DB8D29091B1FELL) ^ 0xDFD343E6E586F3C0LL);
  int v2 = *(_DWORD *)(result + 24) ^ (1606104089 * ((((2 * result) | 0x212363FC) - result + 1869499906) ^ 0xE586F3C0));
  unint64_t v3 = *(void *)(result + 32) + v1;
  unint64_t v4 = *(void *)result - v1;
  BOOL v5 = (uint64_t)v4 < (uint64_t)v3;
  BOOL v6 = v4 < v3;
  int v7 = v5;
  if (((*(_DWORD *)(result + 12) ^ (1606104089
                                   * ((((2 * (_DWORD)result) | 0x212363FC) - (_DWORD)result + 1869499906) ^ 0xE586F3C0))) & 1) != 0)
    BOOL v6 = v7;
  if (!v6) {
    int v2 = *(_DWORD *)(result + 20) - 1606104089 * ((((2 * result) | 0x212363FC) - result + 1869499906) ^ 0xE586F3C0);
  }
  *(_DWORD *)(result + _Block_object_dispose(va, 8) = *(_DWORD *)(result + 16) ^ (1606104089
                                                      * ((((2 * result) | 0x212363FC) - result + 1869499906) ^ 0xE586F3C0)) ^ v2;
  return result;
}

void sub_10013AD98(uint64_t a1)
{
  __asm { BR              X8 }

uint64_t sub_10013AE1C(uint64_t a1)
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((1011 * (*(_DWORD *)(a1 + 8) + v1 == 990191069)) ^ v2)) - 4LL))();
}

uint64_t sub_10013AE50( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(void *)(a1 + 56)) {
    BOOL v11 = *(void *)(a1 + 40) == 0x3BF73A4905DA790BLL;
  }
  else {
    BOOL v11 = 1;
  }
  int v12 = !v11;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 + 8LL * ((1653 * v12) ^ v9)) - 4LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);
}

uint64_t sub_10013AE94(uint64_t a1)
{
  int v4 = ((*(_DWORD *)(a1 + 4) - v1) ^ 0x6519D58E) == *(_DWORD *)(a1 + 48) + v1 - 969127911;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (((2 * v4) | (v4 << 7)) ^ v2)) - 4LL))();
}

uint64_t sub_10013AEE0(uint64_t a1)
{
  int v5 = v3 & 0xF;
  BOOL v7 = *(_DWORD *)(a1 + 64) - v1 == 1320091323 && v5 == ((v2 + 1002757031) & 0xC43B25B4) - 418;
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((199 * v7) ^ v2)) - 4LL))();
}

#error "10013AF38: too big function (funcsize=0)"
void sub_10018B32C( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  int a5,  int a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  int a18,  int a19,  int a20,  int a21,  int a22,  int a23,  uint64_t a24,  int a25,  char a26,  __int16 a27,  char a28,  uint64_t a29,  char a30,  __int16 a31,  char a32)
{
  int v32;
  int v33;
  BOOL v34;
  int v37;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  int v34 = LODWORD(STACK[0x45C]) == 66;
  if (LODWORD(STACK[0x45C]) == 66) {
    a21 = a6;
  }
  LODWORD(STACK[0x2C8]) = a21;
  if (v34) {
    a22 = a5;
  }
  LODWORD(STACK[0x2C4]) = a22;
  uint64_t v37 = STACK[0x28C];
  if (v34) {
    uint64_t v37 = v32;
  }
  LODWORD(STACK[0x2BC]) = v37;
  if (v34) {
    a23 = v33;
  }
  LODWORD(STACK[0x2C0]) = a23;
  int v39 = ((LODWORD(STACK[0x424]) + 1) & 3) + 438594359 - ((2 * (LODWORD(STACK[0x424]) + 1)) & 4);
  unsigned int v40 = STACK[0x418];
  int v41 = ((a30 & 3) + 157619431 - 2 * (a30 & 3)) ^ 0x96514E7 | LODWORD(STACK[0x418]);
  LODWORD(STACK[0x2B0]) = (v41 ^ 0x5FDF63BF) - 1078485400 + ((2 * v41) & 0x3FBEC77E);
  int v42 = (((LODWORD(STACK[0x278]) + 1) & 3) + 1565938346 - ((2 * (LODWORD(STACK[0x278]) + 1)) & 4)) ^ 0x5D5652AA | v40;
  int v43 = (LODWORD(STACK[0x27C]) + 1) & 3;
  int v44 = (v43 - 1932684481 - 2 * v43) ^ 0x8CCD933F | v40;
  LODWORD(STACK[0x2A0]) = (v44 ^ 0xCFFB2CFF) + 1073600504 + ((2 * v44) & 0x1FF659FE);
  uint64_t v45 = (LODWORD(STACK[0x280]) - 1) & 3;
  int v46 = (v45 + 2088003135 - 2 * v45) ^ 0x7C74663F | v40;
  LODWORD(STACK[0x290]) = (v46 ^ 0x6D79BFEF) - 71906658 + ((2 * v46) & 0x5AF37FDE);
  int v47 = v40
  uint64_t v48 = v39 + LODWORD(STACK[0x2A8]) + 711;
  char v49 = ((STACK[0x288] & 3 | v40) ^ 0xF7F9EF3F) + 2 * (STACK[0x288] & 3 | v40);
  LODWORD(STACK[0x298]) = a20 + 2006613976;
  LODWORD(STACK[0x474]) = v42 - ((2 * v42) & 0x40105828) - 1253294572;
  LODWORD(STACK[0x2A8]) = ((((a32 & 3) + 1525361411 - 2 * (a32 & 3)) | v40) ^ 0x5AEB2B03) + 1456837784;
  LODWORD(STACK[0x448]) = -(a28 & 3 | v40) - 467026497;
  LODWORD(STACK[0x440]) = v47 - 232495567;
  LODWORD(STACK[0x438]) = ((a26 - 1) & 3 | v40) - 2 * (((a26 - 1) & 3 | v40) ^ a19) + 567841531;
  LODWORD(STACK[0x284]) = v49 + 1018074874;
  LODWORD(STACK[0x430]) = (v48 ^ 0x1A246FAE | v40) - 2 * (v48 & 1) + 127541761;
  JUMPOUT(0x10013D328LL);
}

_DWORD *sub_10018B5F0(_DWORD *result)
{
  *uint64_t result = v1;
  return result;
}

void sub_10018B614(uint64_t a1)
{
  __asm { BR              X10 }

void sub_10018B690(int a1@<W8>)
{
  uint64_t v5 = *(void *)(v2 + 24);
  unsigned int v6 = 941074649 * (((v7 | 0xB3A4DD8A) - (v7 & 0xB3A4DD8A)) ^ 0xB36C12EE);
  v7[1] = *(void *)(v2 + 16);
  _DWORD v7[2] = v5;
  LODWORD(v7[0]) = v6 - 1425377486 + a1 - 543;
  uint64_t v9 = v4;
  int v8 = v1 - v6;
  sub_1001DD7B4(v7);
  *(_DWORD *)(v3 + 16) = HIDWORD(v7[0]);
}

void sub_10018BAA8(uint64_t a1)
{
  int v1 = 1189216979 * ((2 * (a1 & 0xB5105BF) - a1 - 189859264) ^ 0xDA45F686);
  int v2 = *(_DWORD *)a1 ^ v1;
  if (*(void *)(a1 + 16)) {
    BOOL v3 = *(_DWORD *)(a1 + 8) - v1 == 361945438;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = v3;
  __asm { BR              X8 }

uint64_t sub_10018BB7C()
{
  int v2 = malloc( ((((3 * (v0 ^ 0x1DC)) ^ 0xEA6D2708) + v1) & 0xFFFFFFF0 ^ 0x64DAFA7A)
       + ((((v0 + 795) | 0x205) - 910823823) & (2 * (((3 * (v0 ^ 0x1DC)) ^ 0xEA6D2708) + v1)))
       - 1692072552);
  STACK[0x468] = (unint64_t)v2;
  return ((uint64_t (*)(void))*(&off_10025C670 + ((590 * (v2 != 0LL)) ^ v0)))();
}

uint64_t sub_10018BC08(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  STACK[0x418] = v6;
  STACK[0x410] = (unint64_t)a1;
  *a1 = 1;
  return (*(uint64_t (**)(void))(a4
                              + 8LL
                              * ((((v5 ^ 0x420) - 1344)
                                * ((v7 | ((unint64_t)(v7 < v4) << 32)) != 361945438)) ^ v5)))();
}

uint64_t sub_10018BCB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_BYTE *)(v7 + v9 - 0x2FD1C989B754D2A6LL) = *(_BYTE *)(v6 + v11 - 0x59725C5A866F3379LL);
  unint64_t v12 = v8 - 0x565EDC44C61D3B0CLL;
  int v13 = (v5 < v4) ^ (v12 < v4);
  BOOL v14 = v12 < v5;
  if (v13) {
    BOOL v14 = v5 < v4;
  }
  return (*(uint64_t (**)(void))(a4 + 8LL * ((89 * v14) ^ v10)))();
}

uint64_t sub_10018BD50@<X0>(unint64_t a1@<X1>, uint64_t a2@<X3>, int a3@<W8>)
{
  STACK[0x3F8] = v6;
  LODWORD(STACK[0x40C]) = v5;
  STACK[0x400] = a1;
  *(_BYTE *)(a1 + v4 - 0x70C1187E54DE1D46LL) = 0x80;
  return ((uint64_t (*)(void))(*(void *)(a2
                                        + 8LL
}

uint64_t sub_10018BDC4@<X0>(uint64_t a1@<X3>, int a2@<W8>)
{
  *(_BYTE *)(v4 + a2 + v3 + ((v2 - 1303) | 8u)) = 0;
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * ((43 * (a2 + v3 + 136 < v5)) ^ v2)) - 4LL))();
}

uint64_t sub_10018BE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_10018BE44()
{
  kern_return_t v1;
  int v1 = IOMainPort(0, (mach_port_t *)&STACK[0x484]);
  return ((uint64_t (*)(void))*(&off_10025C670
                             + (((((v1 << (((v0 + 90) | 0xD2) ^ 0xFE)) & 0xDF67FDFA) + (v1 ^ 0xEFB3FEFD) != -273416451)
                               * (((v0 + 338) | 0x44A) ^ 0x643)) ^ v0)))();
}

uint64_t sub_10018BEB4()
{
  BOOL v2 = IOServiceMatching((const char *)(v1 - 215)) != 0LL;
  return ((uint64_t (*)(void))*(&off_10025C670 + ((v2 * (v0 + 1038)) ^ v0)))();
}

uint64_t sub_10018BF38(const __CFDictionary *a1)
{
  kern_return_t MatchingServices;
  MatchingServices = IOServiceGetMatchingServices(STACK[0x484], a1, (io_iterator_t *)&STACK[0x420]);
  return ((uint64_t (*)(void))*(&off_10025C670
                             + (((((2 * MatchingServices) & 0xA74F6BA6)
                                + ((v1 - 995277209) & 0x3B52BDFD ^ MatchingServices ^ 0xD3A7B0B7) == -743983661)
                               * (3 * (v1 ^ 0x2DA) - 227)) ^ v1)))();
}

uint64_t sub_10018BFB4()
{
  io_object_t v1 = IOIteratorNext(STACK[0x420]);
  return ((uint64_t (*)(void))*(&off_10025C670
}

uint64_t sub_10018C030@<X0>(int a1@<W8>)
{
  kern_return_t v2;
  BOOL v3;
  BOOL v2 = IOServiceOpen(a1 - 1475884137 + v1 + 396, mach_task_self_, 0, (io_connect_t *)&STACK[0x438]);
  int v3 = ((2 * v2) & 0xB757D9FA) + (v2 ^ 0xDBABECFD) == -609489667;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + (((2 * v3) | (16 * v3)) ^ v1)) - 8))();
}

uint64_t sub_10018C0A4()
{
  int v4 = (v0 - 2009646452) & 0x77C8C6FF;
  *(_DWORD *)(v3 + 313fseek(v0, 0LL, 2) = ((2 * LODWORD(STACK[0x438])) & 0xFFF9BEEE)
                         - 1661470788
                         + (LODWORD(STACK[0x438]) ^ 0x7FFCD918 ^ v4);
  IOObjectRelease(v2);
  uint64_t v5 = IOObjectRelease(STACK[0x420]);
  return ((uint64_t (*)(uint64_t))((char *)*(&off_10025C670
                                                    + (((*(_DWORD *)(v3 + 3132) == v1) * (((v4 - 1573) | 0x191) ^ 0x193)) ^ (v4 - 1509)))
                                          - 8))(v5);
}

uint64_t sub_10018C14C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = STACK[0x410] + 2;
  LODWORD(STACK[0x5D0]) = 0;
  return (*(uint64_t (**)(uint64_t, unint64_t, unint64_t *))(a4
                                                                                  + 8LL
                                                                                  * ((925
                                                                                    * ((((v5 | ((unint64_t)(v5 < 0x40DAF872) << 32)) == 1088092274) ^ ((v4 ^ 0x19) + 1)) & 1)) ^ v4)))( a1,  v6,  &STACK[0x5D0]);
}

uint64_t sub_10018C1EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_BYTE *)(v11 + ((2 * v4) ^ 0xD42137DFC6947C99LL) + v9) = *(_BYTE *)(v8 + a2 - 0x666B0E82716EF3ADLL);
  BOOL v12 = v6 < v5;
  if (v12 == v10 - 0x772492E911F3CAC9LL < v5) {
    BOOL v12 = v10 - 0x772492E911F3CAC9LL < v6;
  }
  return (*(uint64_t (**)(void))(a4 + 8LL * ((v12 * v7) ^ v4)))();
}

uint64_t sub_10018C27C@<X0>(unint64_t a1@<X1>, void *a2@<X2>, int a3@<W8>)
{
  STACK[0x3F0] = a1;
  LODWORD(STACK[0xDA4]) = ((v3 - 1323430103) & 0x4EE1F0DE ^ (v4 + 898)) + v5;
  STACK[0x538] = 2008LL;
  STACK[0x3E8] = (unint64_t)a2;
  BOOL v6 = IOConnectCallStructMethod(a3 - 485807923, 0x22u, a2, 0x7D8uLL, a2, &STACK[0x538]) == 0;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + ((1006 * v6) ^ v3)) - 8))();
}

uint64_t sub_10018C300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((uint64_t (*)(void))(*(void *)(a3
                                        + 8LL * ((1671 * (LODWORD(STACK[0xDA4]) - v4 == ((v5 - 42) | 0x31C) + v3)) ^ v5))
                            - 4LL))();
}

uint64_t sub_10018C33C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8LL * ((116 * (v4 - 275777130 + (v3 ^ 0xBEu) == 812315914)) ^ v3)))();
}

uint64_t sub_10018C3F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v12 = v6 < v5;
  *(_BYTE *)(v9 + a4 - 0x7C867F77F9134FBBLL) = *(_BYTE *)(v8 + v11 - 0x6A5E5C1DD4625A80LL);
  if (v12 == v10 - 0x55A10C1ED086245ALL < v5) {
    BOOL v12 = v10 - 0x55A10C1ED086245ALL < v6;
  }
  return (*(uint64_t (**)(void))(a3 + 8LL * ((!v12 * v7) ^ v4)))();
}

uint64_t sub_10018C488@<X0>(uint64_t a1@<X3>, int a2@<W8>)
{
  STACK[0x4B0] = 0x1C5F64B704023DAELL;
  int v5 = 230600693 * ((v4 - 152) ^ 0xD23C862B);
  *(_DWORD *)(v4 - 124) = (a2 ^ 0xD662F3EB ^ (v2 - 568))
                        - v5
                        - 1073771265
                        + ((((v2 + 372763757) & 0xE9C816FF) + 321917773) ^ (2 * a2) & 0xBBF4FFFE);
  unint64_t v6 = STACK[0x410];
  *(void *)(v4 - 144) = a1 + v3;
  *(void *)(v4 - 136) = v6;
  *(_DWORD *)(v4 - 15fseek(v0, 0LL, 2) = (v2 - 79) ^ v5;
  sub_1001DD928((_DWORD *)(v4 - 152));
  return ((uint64_t (*)(void))*(&off_10025C670 + ((1563 * (*(_DWORD *)(v4 - 128) == 0)) ^ v2)))();
}

uint64_t sub_10018C560()
{
  STACK[0x550] = 1LL;
  BOOL v1 = container_system_group_path_for_identifier(0LL, "systemgroup.com.apple.pisco.suinfo", &STACK[0x550]) == 0;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + ((1210 * (((v0 ^ v1 ^ (v0 - 190)) & 1) == 0)) ^ v0)) - 4))();
}

uint64_t sub_10018C5B8()
{
  return (*(uint64_t (**)(void))(v0
                              + 8LL
                              * ((52
                                * (((STACK[0x550] == 1) ^ (((v1 | 0x40) - 1) ^ ((v1 | 0x40) + 28))) & 1)) ^ (v1 | 0x440))))();
}

uint64_t sub_10018C5F8@<X0>(int a1@<W8>)
{
  int v2 = a1 | 0x10;
  size_t v3 = strlen(v1);
  BOOL v4 = malloc(((2 * v3) & 0xFFFF73AF39F7BFDALL) + (v3 ^ 0xFFFFB9D79CFBDFEDLL) + 0x462863042031LL) == 0LL;
  return ((uint64_t (*)(void))*(&off_10025C670 + ((323 * (((((v2 ^ 0x217) - 1598634091) ^ v4) & 1) == 0)) ^ v2)))();
}

uint64_t sub_10018C688(unint64_t a1)
{
  STACK[0x3E0] = a1;
  LODWORD(STACK[0x3D0]) = umask(0);
  return ((uint64_t (*)(unint64_t))((char *)*(&off_10025C670
                                                             + (int)(v2 ^ 0xA0B6CE73 ^ ((((v3 + 0x462903BAEE17LL - v2) | (v2 - (v3 + 0x462903BAEE17LL))) >= 0)
                                                                                      * (((v2 + v1 + 110) | 0xF) ^ 0xE3))))
                                                   - (((_DWORD)v2 + v1) | 5u)
                                                   + 115))(STACK[0x3E0]);
}

uint64_t sub_10018C744@<X0>(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  BOOL v9 = a2 < v5;
  *(_BYTE *)(v3 + a1 - 0x28AEA36D3AF6D717LL) = *(_BYTE *)(v2 + v6 - 0x798DD766DC83B6C7LL);
  if (v9 == v4 - 0x5D683F3AA3401E79LL < v5) {
    BOOL v9 = v4 - 0x5D683F3AA3401E79LL < a2;
  }
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * (((4 * !v9) | (8 * !v9)) ^ v7)) - 4LL))();
}

uint64_t sub_10018C7E8(const char *a1)
{
  STACK[0x3D8] = v1;
  strcpy((char *)&a1[v1 + 0x462863042013LL], "/Library");
  int v4 = mkdir(a1, 0x1EDu);
  return (*(uint64_t (**)(void))(v3
                              + 8LL
                              * ((26 * (((2 * v4) & 0x6EFFB5AA) + (v4 ^ 0x377FDAD5) == ((v2 + 965) ^ 0x377FDE60))) ^ v2)))();
}

uint64_t sub_10018C864()
{
  BOOL v1 = *__error() != 17;
  return ((uint64_t (*)(void))*(&off_10025C670 + ((((31 * (v0 ^ 0xFC) + 1026) ^ (7 * (v0 ^ 0x43))) * v1) ^ v0)))();
}

uint64_t sub_10018C8B8()
{
  int v2 = (const char *)STACK[0x3E0];
  *(_BYTE *)(STACK[0x3E0] + STACK[0x3D8] + (((v0 - 692) | 0x14u) ^ 0x46286304223CLL)) = 0;
  int v3 = mkdir(v2, 0x1EDu);
  return ((uint64_t (*)(void))*(&off_10025C670
                             + ((13 * (((v0 + 2138569478) & (2 * v3)) + (v3 ^ 0xBFBBFFDD) != -1078198308)) ^ v0)))();
}

uint64_t sub_10018C964()
{
  BOOL v1 = *__error() == 17;
  return ((uint64_t (*)(void))*(&off_10025C670 + ((v1 * (((v0 - 187494853) & 0xB2CEF5D) + 1120)) ^ (v0 - 672))))();
}

uint64_t sub_10018C9B4()
{
  *BOOL v1 = 0x6975732E6373702FLL;
  *(_BYTE *)(STACK[0x3E0] + (v0 ^ 0x462863042224LL) + STACK[0x3D8]) = 0;
  STACK[0x3E0] = 0LL;
  umask(STACK[0x3D0]);
  free(v2);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + (int)(v0 ^ 0x40)) - ((70 * (v0 ^ 0x21F) - 762) | 0xC2) + 198))();
}

uint64_t sub_10018CA4C()
{
  return (*(uint64_t (**)(void))(v1 + 8LL * (((((v0 ^ 0x56D) + 44) ^ 0x6C8) * (v2 != 0)) ^ v0)))();
}

uint64_t sub_10018CA7C()
{
  LODWORD(STACK[0x3E0]) = umask(0x12u);
  int v3 = open(v2, 289);
  return (*(uint64_t (**)(void))(v1
                              + 8LL
                              * ((((int)(((2 * v3) & 0xFF67FFFC) + (v3 ^ 0xFFB3FFFE) - 2142502910) >= 0) * (v0 - 1648)) ^ v0)))();
}

uint64_t sub_10018CB00()
{
  uint64_t v2 = (uint64_t (*)(void))(*(void *)(v1
                                     + 8LL
                                     * ((246 * (*__error() == ((509 * ((v0 - 870) ^ 0x337)) ^ 0x3F8))) ^ (v0 - 870)))
                         - 12LL);
  return v2();
}

uint64_t sub_10018CB50(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v11 = open_dprotected_np(v10, 801, 4, 0);
  return ((uint64_t (*)(uint64_t))((char *)*(&off_10025C670
                                                    + (int)((127
                                                           * ((((2 * (_DWORD)v11) & 0xFB66FE68)
                                                             + ((v9 + 197) ^ v11 ^ 0x7DB37CCE)
                                                             + 38568140) >> 31)) ^ v9))
                                          - 12))(v11);
}

void sub_10018CBCC()
{
  *(_DWORD *)(v1 + 4) = -42908;
}

uint64_t sub_10018E3D0@<X0>(int a1@<W3>, unsigned int a2@<W7>, int a3@<W8>)
{
  BOOL v6 = v4 + a1 < v5;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + ((v6 * a3) ^ v3)) - 12))();
}

uint64_t sub_10018EADC( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  BOOL v76 = LODWORD(STACK[0x3D8]) == -555873442;
  int v77 = STACK[0x278];
  if (LODWORD(STACK[0x3D8]) == -555873442) {
    int v77 = STACK[0x258];
  }
  LODWORD(STACK[0x278]) = v77;
  int v78 = STACK[0x3B0];
  if (v76) {
    int v78 = STACK[0x3A8];
  }
  LODWORD(STACK[0x2D0]) = v78;
  int v79 = STACK[0x400];
  if (v76) {
    int v79 = STACK[0x3E8];
  }
  LODWORD(STACK[0x2CC]) = v79;
  LODWORD(STACK[0x3B0]) = a69 ^ 0xB965EFFF;
  int v80 = STACK[0x29C];
  if ((STACK[0x390] & 2) == 0) {
    int v80 = STACK[0x218];
  }
  HIDWORD(a44) = v80;
  int v81 = STACK[0x2B0];
  if ((STACK[0x390] & 2) == 0) {
    int v81 = STACK[0x380];
  }
  HIDWORD(a4_Block_object_dispose(va, 8) = v81;
  LODWORD(STACK[0x284]) = HIDWORD(a61) ^ 0x146057A1;
  LODWORD(STACK[0x31C]) = LODWORD(STACK[0x318]) ^ 0xEFF9F165;
  LODWORD(STACK[0x410]) = a59 & 0x2DC91650;
  LODWORD(STACK[0x380]) = HIDWORD(a59) ^ a72;
  LODWORD(STACK[0x258]) = LODWORD(STACK[0x2B4]) ^ 0xAFCFAAAA;
  LODWORD(STACK[0x3E8]) = HIDWORD(a61) ^ 0x289AC646;
  unint64_t v82 = STACK[0x568];
  STACK[0x400] = (v75 + 1161619604) & 0xBAC313BF;
  unint64_t v83 = STACK[0x400] - 1853951253 + v73 + ((unint64_t)(v73 < v74) << 32);
  unint64_t v84 = *(void *)(v82 + 8 * v83) ^ 0xAEAEAEAEAEAEAEAELL;
  uint64_t v85 = 0x5F3D51B5D321F3ADLL * v84 - ((0x3E7AA36BA643E75ALL * v84) & 0x3673074E30BF6360LL) + 0x1B3983A7185FB1B0LL;
  unint64_t v86 = ((2 * ((v72 ^ 0xFC8A8E51C8DCD17ALL ^ v85) + v83)) & 0xB97B7FFF1FDED772LL)
      + (((v72 ^ 0xFC8A8E51C8DCD17ALL ^ v85) + v83) ^ 0xDCBDBFFF8FEF6BB9LL);
  unint64_t v87 = v86
      + (((v86 + 0x2342400070109447LL) >> 32) ^ 0x86060000212C8882LL)
      - (((v86 + 0x2342400070109447LL) >> 31) & 0x1BDA6EEFALL);
  unint64_t v88 = v87
      + (((v87 - 0x62C3BFFFB11BF43BLL) >> 16) ^ 0xFBFFAFFFF7F3FDE5LL)
      + (((v87 - 0x62C3BFFFB11BF43BLL) >> 15) & 0x15FFFEFE7FBCALL);
  unint64_t v89 = v88
      + (((v88 - 0x5EC36FFFA90FF220LL) >> 8) ^ 0x100C0201206024CLL)
      - (((v88 - 0x5EC36FFFA90FF220LL) >> 7) & 0x1FE7FBFDBF3FB66LL)
      + 2;
  uint64_t v90 = v89 - ((2 * (_DWORD)v89 - 1982589148) & 0xE22FAEDE);
  unint64_t v91 = v89 - ((2 * v89 - 0x88521B6048F7C1CLL) & 0xF3897E842C8CFFB2LL) - 0xA7DD198EC013E35LL;
  unint64_t v92 = ((2 * v91) ^ 0xF3897E842C8CFFB2LL)
      + 0x73768304A552B130LL
      - 2 * (((2 * v91) ^ 0xF3897E842C8CFFB2LL) & 0x73768304A552B138LL ^ (2 * v91) & 8);
  unint64_t v93 = (v91 ^ 0xA2452006AE8849B9LL)
      + (v92 & 0xB7033E89719C6CC0LL ^ 0x64FD554B9EF79F5DLL)
      + ((2 * v92) & 0x2E062C1263085880LL ^ 0x2604040042004000LL)
      - 0x57FF574BBFE7BF5DLL;
  unint64_t v94 = v93 - 2 * (v93 & 0x3EE079C6B32D6E3ELL ^ (v91 ^ 0xA2452006AE8849B9LL) & 0x3E) - 0x411F86394CD29200LL;
  unint64_t v95 = ((0x5F3D51B5D321F3ADLL * v84 - ((0xBE7AA36BA643E75ALL * v84) & 0xB9B7990593F23D48LL) + 0x5CDBCC82C9F91EA4LL) ^ 0xE23BB5447AD470A4LL ^ v94)
      + v83;
  unint64_t v96 = ((2 * v95) & 0xF3D9BFFA79EBB0D4LL)
      + (v95 ^ 0x79ECDFFD3CF5D86ALL)
      + (((((2 * v95) & 0xF3D9BFFA79EBB0D4LL) + (v95 ^ 0x79ECDFFD3CF5D86ALL) - 0x79ECDFFD3CF5D86ALL) >> 32) ^ 0x180844090A000102LL)
      - (((((2 * v95) & 0xF3D9BFFA79EBB0D4LL) + (v95 ^ 0x79ECDFFD3CF5D86ALL) - 0x79ECDFFD3CF5D86ALL) >> 31) & 0x1EBFFFDFALL);
  unint64_t v97 = v96
      + (((v96 + 0x6E0ADBF9B90A2694LL) >> 16) ^ 0x7F7BFFDFB5FFFB63LL)
      + (((v96 + 0x6E0ADBF9B90A2694LL) >> 15) & 0x1FFBF6BFFF6C6LL);
  unint64_t v98 = v97
      + (((v97 - 0x117123E5FCF5D4CFLL) >> 8) ^ 0x81306CB0B0C098CCLL)
      - (((v97 - 0x117123E5FCF5D4CFLL) >> 7) & 0x19F269E9E7ECE66LL)
      + 2;
  uint64_t v99 = v98 - ((2 * v98 + 0x48C35BE587CBFE46LL) & 0x4B24B67B8DAF8472LL) + 0x49F409308ABDC15CLL;
  unint64_t v100 = ((2 * ((v85 ^ 0x3EABD89ADE887389LL ^ v99) + v83)) & 0xFEDFEAFF3FBFF5FELL)
       + (((v85 ^ 0x3EABD89ADE887389LL ^ v99) + v83) ^ 0xFF6FF57F9FDFFAFFLL);
  unint64_t v101 = ((v100 + 0x900A8060200501LL) >> 31) & 0x64DBFCFA;
  unint64_t v102 = v100 + (((v100 + 0x900A8060200501LL) >> 32) ^ 0xC090A00CD920182LL) + 1;
  unint64_t v103 = v102 - v101 - 2 * ((v102 - v101 + 0x87007F928E037ELL) & 0x260732FE9DA1477LL ^ v102 & 1) - 0x9188C508397E80CLL;
  uint64_t v104 = 2
       * ((((v103 >> 16) ^ 0x260732FE9DALL) & (v103 ^ 0x732FE9DA1476LL))
        - ((2 * (((v103 >> 16) ^ 0x260732FE9DALL) & (v103 ^ 0x732FE9DA1476LL))) & 0x1F568BBC37A5ELL))
       + 0x723BF568BBC37A5ELL;
  unint64_t v105 = (v103 ^ 0x260714F9AF5FDACLL ^ (v103 >> 16))
       + (v104 ^ 0x2F564A91641880A1LL)
       - 0x5D6DBFF9DFDBFAFFLL
       + ((2 * v104) & 0xBADB7FF3BFB7F5FCLL ^ 0xA0536AD13786F4BCLL);
  unint64_t v106 = ((2 * v105) & 0xE7DF9F2AEFAFCFCALL)
       + (v105 ^ 0xF3EFCF9577D7E7E5LL)
       + (((((2 * v105) & 0xE7DF9F2AEFAFCFCALL) + (v105 ^ 0xF3EFCF9577D7E7E5LL) + 0xC10306A8828181BLL) >> 8) ^ 0x190E4E04028133A2LL)
       - (((((2 * v105) & 0xE7DF9F2AEFAFCFCALL) + (v105 ^ 0xF3EFCF9577D7E7E5LL) + 0xC10306A8828181BLL) >> 7) & 0x1E363F7FAFD98BALL)
       + 1;
  return ((uint64_t (*)(uint64_t, uint64_t, void, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*(&off_10025C670 + (((v73 & 0xFFFFFFFE) != v74 - 1) | (2 * ((v73 & 0xFFFFFFFE) != v74 - 1)) | v75)))( 4001086759LL,  1839721112LL,  a3 ^ v94 ^ v99 ^ 0xA579CCF3 ^ ((_DWORD)v106 - ((2 * (_DWORD)v106 - 293166480) & 0xA106C194)
                                                                    - 943279614),
           v106,
           1206607342LL,
           v99,
           v90,
           0x73768304A552B130LL,
           a9,
           a10,
           a11,
           a12,
           a13,
           a14,
           a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61,
           a62,
           a63);
}

void sub_10018F414()
{
}

uint64_t sub_10018F41C( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,int a60,int a61,int a62,uint64_t a63)
{
  int v223 = a61 - 1798531052 + a62;
  int v74 = a60 - a65;
  int v75 = LODWORD(STACK[0x410]) - LODWORD(STACK[0x288]);
  LODWORD(STACK[0x2B0]) = LODWORD(STACK[0x204]) + LODWORD(STACK[0x3E8]);
  unint64_t v76 = (((unint64_t)(a4 + 0x66DA2A0BABA6D18ALL) >> 30) ^ 0xEB9FAB5B3E3FF639LL)
      + a4
      + (((unint64_t)(a4 + 0x66DA2A0BABA6D18ALL) >> 29) & 0x67C7FEC72LL);
  unint64_t v77 = (((v76 + 0x7B3A7EB06D66DB51LL) >> 12) ^ 0xFBF3F6EAEEE9EEEBLL)
      + v76
      + (((v76 + 0x7B3A7EB06D66DB51LL) >> 11) & 0x7EDD5DDD3DDD6LL);
  unint64_t v78 = v77
      + (((v77 + 0x7F4687C57E7CEC66LL) >> 7) ^ 0x4422200095CE001CLL)
      - (((v77 + 0x7F4687C57E7CEC66LL) >> 6) & 0x3BBBFFED463FFC6LL)
      + 1;
  uint64_t v79 = v78 - ((2 * v78 + 0x3648CF89D15DD892LL) & 0x30E892E6DE154A50LL) + 0x5398B13857B99171LL;
  unint64_t v80 = ((2 * ((v79 ^ 0x187449736F0AA528LL) + 0x288AB139EA2E5744LL)) & 0xFFE79D657A76D79ELL)
      + (((v79 ^ 0x187449736F0AA528LL) + 0x288AB139EA2E5744LL) ^ 0x7FF3CEB2BD3B6BCFLL);
  unint64_t v81 = v80
      + (((v80 - 0x7FF3CEB2BD3B6BCFLL) >> 24) ^ 0x405A000030210000LL)
      - (((v80 - 0x7FF3CEB2BD3B6BCFLL) >> 23) & 0x1FF9FBDFFFELL);
  unint64_t v82 = v81
      + (((v81 + 0x3FB2314D12A39431LL) >> 13) ^ 0xA01B4428023E4134LL)
      - (((v81 + 0x3FB2314D12A39431LL) >> 12) & 0x977AFFB837D96LL);
  unint64_t v83 = v82
      + (((v82 - 0x606912DAEF9AAD03LL) >> 5) ^ 0x60400186400C0208LL)
      - (((v82 - 0x606912DAEF9AAD03LL) >> 4) & 0xF7FFCF37FE7FBEELL)
      + 3;
  unint64_t v84 = v83 - ((2 * v83 + 0x7EADD73DA0B2A1E4LL) & 0x610FB80BEEADB662LL) + 0x6FDEC7A4C7B02C23LL;
  unint64_t v85 = (v84 ^ 0x1896D254F4F6CE11LL)
      + ((v84 >> 31) ^ 0x842B1008300DE827LL)
      + ((v84 >> 30) & 0x3FDBF66E2LL ^ 0xFFFFFFFF9FE4BFBDLL)
      + 0x7BD4EFF7FEDFB373LL;
  unint64_t v86 = (((((2 * v85) & 0xF5E47975EBEBFF34LL) + (v85 ^ 0x7AF23CBAF5F5FF9ALL) - 0x7AF23CBAF5F5FF9ALL) >> 11) ^ 0x95FFCFFAFFCF92EBLL)
      + ((2 * v85) & 0xF5E47975EBEBFF34LL)
      + (v85 ^ 0x7AF23CBAF5F5FF9ALL)
      + (((((2 * v85) & 0xF5E47975EBEBFF34LL) + (v85 ^ 0x7AF23CBAF5F5FF9ALL) - 0x7AF23CBAF5F5FF9ALL) >> 10) & 0x3F9FF5FF9F25D6LL);
  unint64_t v87 = (((v86 - 0x10F20CB5F5C59285LL) >> 4) ^ 0x771FDFBF7ECDFFBBLL)
      + v86
      + (((v86 - 0x10F20CB5F5C59285LL) >> 3) & 0xE3FBF7EFD9BFF76LL);
  uint64_t v88 = v87 - 2 * ((v87 + 0x77EE138A8B6C6DC0LL) & 0x588697CDE0CADA3FLL ^ v87 & 0x14) - 0x2F8B54A793C8B815LL;
  uint64_t v89 = ((2 * ((v88 ^ 0x588697CDE0CADA2BLL) + 0x1E4A8A832E7300A6LL)) & 0x7FBDD937F6D7CBD6LL)
      + (((v88 ^ 0x588697CDE0CADA2BLL) + 0x1E4A8A832E7300A6LL) ^ 0x3FDEEC9BFB6BE5EBLL);
  unint64_t v90 = v89
  unint64_t v91 = v90
      + (((v90 - 0x4623EE25FDEF6ACDLL) >> 15) ^ 0x777FE77FDF1BBCBBLL)
      + (((v90 - 0x4623EE25FDEF6ACDLL) >> 14) & 0x3CEFFBE377976LL);
  unint64_t v92 = v91
      + (((v91 + 0x425C2A5A22F4D878LL) >> 8) ^ 0x7FBFFB7DDFF0FEFFLL)
      + (((v91 + 0x425C2A5A22F4D878LL) >> 7) & 0x17FF6FBBFE1FDFELL)
      + 1;
  unint64_t v93 = v92 - ((2 * v92 - 0x7AC7A24779F84D10LL) & 0xD79C9299AF73AEBCLL) + 0x2E6A78291ABDB0D6LL;
  unint64_t v94 = ((2 * ((v93 ^ 0x6BCE494CD7B9D75ELL) + 0x2C1E97BC5C429E81LL)) & 0xD3F7F87ABFFFEFFELL)
      + (((v93 ^ 0x6BCE494CD7B9D75ELL) + 0x2C1E97BC5C429E81LL) ^ 0xE9FBFC3D5FFFF7FFLL);
  unint64_t v95 = (((v94 + 0x160403C2A0000801LL) >> 27) ^ 0xE1E9DBE90D6FFBCALL)
      + v94
      + (((v94 + 0x160403C2A0000801LL) >> 26) & 0x121ADFF794LL);
  unint64_t v96 = (((v95 + 0x341A27D992900C37LL) >> 15) ^ 0xDFCDE7FFEFB9F7D3LL)
      + v95
      + (((v95 + 0x341A27D992900C37LL) >> 14) & 0x3CFFFDF73EFA6LL);
  unint64_t v97 = (((v96 + 0x544C3FD9A2D61464LL) >> 8) ^ 0x8D7D52DBFFD7DDFELL)
      + v96
      + (((v96 + 0x544C3FD9A2D61464LL) >> 7) & 0xFAA5B7FFAFBBFCLL);
  unint64_t v98 = v97 - ((2 * v97 - 0x72622604BA039334LL) & 0x9F4C218AA5959B8ELL) + 0x1674FDC2F5C9042DLL;
  unint64_t v99 = (v98 ^ 0xD3B79562FEB51D57LL)
      + ((v98 >> 30) ^ 0x3FDCBFCCA5AB8B76LL)
      + ((v98 >> 29) & 0x7D6EBBDFALL ^ 0x694A8A912LL)
      - 0x3FDCBFCFEB75DEFDLL;
  unint64_t v100 = (((((2 * v99) & 0x8397FBD87ED9ACF6LL) + (v99 ^ 0x41CBFDEC3F6CD67BLL) - 0x41CBFDEC3F6CD67BLL) >> 8) ^ 0x6FFEFAFBEEBFFFFELL)
       + ((2 * v99) & 0x8397FBD87ED9ACF6LL)
       + (v99 ^ 0x41CBFDEC3F6CD67BLL)
       + (((((2 * v99) & 0x8397FBD87ED9ACF6LL) + (v99 ^ 0x41CBFDEC3F6CD67BLL) - 0x41CBFDEC3F6CD67BLL) >> 7) & 0x1FDF5F7DD7FFFFCLL);
  unint64_t v101 = v100
       + (((v100 + 0x4E350717D1D32987LL) >> 8) ^ 0x9211AC1340000058LL)
       - (((v100 + 0x4E350717D1D32987LL) >> 7) & 0x1DCA7D97FFFFF4ELL)
       + 1;
  uint64_t v102 = v101 - ((2 * v101 + 0x7846B60923A6525CLL) & 0x7233D52C62C54BA4LL) + 0x753D459AC335CF00LL;
  unint64_t v103 = ((2 * ((v102 ^ 0xB919EA963162A5D2LL) + 0x75D572E7727DD82LL)) & 0x7C87BEFFD7FBFBF4LL)
       + (((v102 ^ 0xB919EA963162A5D2LL) + 0x75D572E7727DD82LL) ^ 0x3E43DF7FEBFDFDFALL);
  unint64_t v104 = v103
       + (((v103 - 0x3E43DF7FEBFDFDFALL) >> 30) ^ 0xC00912410148A080LL)
       - (((v103 - 0x3E43DF7FEBFDFDFALL) >> 29) & 0x5FD6EBEFELL);
  unint64_t v105 = v104
       + (((v104 + 0x1B30E3F12B96186LL) >> 9) ^ 0xC20114113314A890LL)
       - (((v104 + 0x1B30E3F12B96186LL) >> 8) & 0xFDD7DD99D6AEDELL);
  unint64_t v106 = v105
       + (((v105 + 0x3FB1FA2DDFA4B8F6LL) >> 7) ^ 0x7F6B5F34B7FE7F7BLL)
       + (((v105 + 0x3FB1FA2DDFA4B8F6LL) >> 6) & 0x2D6BE696FFCFEF6LL)
       + 2;
  uint64_t v107 = v106 - ((2 * v106 + 0x8D35F24F4C72F2LL) & 0x2AF839AFF00E8872LL) + 0x55C2B7D11FAD7DB2LL;
  unint64_t v108 = ((2 * ((v107 ^ 0x957C1CD7F8074439LL) + 0x20226CA5EA003BB7LL)) & 0xDEEC77F5FFDF94FELL)
       + (((v107 ^ 0x957C1CD7F8074439LL) + 0x20226CA5EA003BB7LL) ^ 0xEF763BFAFFEFCA7FLL);
  unint64_t v109 = v108
       + (((v108 + 0x1089C40500103581LL) >> 27) ^ 0x208006050806053ALL)
       - (((v108 + 0x1089C40500103581LL) >> 26) & 0x35EFF3F58ALL);
  unint64_t v110 = v109
       + (((v109 - 0xFF6420007F5CFB9LL) >> 13) ^ 0x6D6E5F9DCD7BEE8FLL)
       + (((v109 - 0xFF6420007F5CFB9LL) >> 12) & 0xCBF3B9AF7DD1ELL);
  unint64_t v111 = v110
       + (((v110 - 0x7D64A19DD571BE48LL) >> 4) ^ 0x737DEBBDEBD77DEFLL)
       + (((v110 - 0x7D64A19DD571BE48LL) >> 3) & 0x6FBD77BD7AEFBDELL)
       + 1;
  unint64_t v112 = v111 - ((2 * v111 + 0x1E3AE5487D6D8790LL) & 0x43706844B4B43964LL) - 0x4F2A593966EF1F86LL;
  unint64_t v113 = (v112 ^ 0xD3DF966A25B0E3FDLL)
       + ((v112 >> 26) ^ 0xBF3FEDE308507774LL)
       + ((v112 >> 25) & 0x2FFF6BDBFALL ^ 0x29EF4B1112LL)
       + 0x40C01228004A1203LL;
  unint64_t v114 = ((2 * v113) & 0x5DF95FFFDF6DEB76LL)
       + (v113 ^ 0x2EFCAFFFEFB6F5BBLL)
       + (((((2 * v113) & 0x5DF95FFFDF6DEB76LL) + (v113 ^ 0x2EFCAFFFEFB6F5BBLL) - 0x2EFCAFFFEFB6F5BBLL) >> 15) ^ 0x94006410108083C0LL)
       - (((((2 * v113) & 0x5DF95FFFDF6DEB76LL) + (v113 ^ 0x2EFCAFFFEFB6F5BBLL) - 0x2EFCAFFFEFB6F5BBLL) >> 14) & 0x337DFDEFEF87ELL);
  LODWORD(v114) = v114
                + (((v114 + 0x3D02EBEFFFC88685LL) >> 6) ^ 0x2C030520)
                - (((v114 + 0x3D02EBEFFFC88685LL) >> 5) & 0xA7F9F5BE)
                + 1;
  int v115 = v102 ^ v88 ^ a3 ^ (v114 - ((2 * v114 - 1484062008) & 0xDB056F44) + 1095252230);
  unsigned int v116 = ((2 * (v115 & 7 | 0x2188040)) | 0x85A223B8) - (v115 & 7 | 0x2188040) - 1120997852;
  int v117 = v115;
  LODWORD(STACK[0x410]) = v115;
  LODWORD(v8_Block_object_dispose(va, 8) = (((v115 ^ 0x169B1CDA) + 1) ^ 3) + 2 * ((v115 ^ 0x169B1CDA) + 1) + 5;
  int v118 = (v88 & 7) - ((2 * v88) & 0xC) + 1282161806;
  if (((2 * (v115 & 7 | 0x2188040)) | 0x85A223B8) - (v115 & 7 | 0x2188040) == -2087017611) {
    int v119 = 0;
  }
  else {
    int v119 = 255;
  }
  int v120 = v118 ^ 0x4C6C3C8E;
  int v121 = (v119 << (v118 ^ 0x8E)) - ((2 * (v119 << (v118 ^ 0x8E))) & 0x19EDBE4A) + 217505573;
  if (((2 * (v115 & 7 | 0x2188040)) | 0x85A223B8) - (v115 & 7 | 0x2188040) == -2087017611) {
    char v122 = 0;
  }
  else {
    char v122 = v121 ^ 0xDA;
  }
  int v123 = STACK[0x3E0];
  if (LODWORD(STACK[0x3D8]) == -555873442) {
    int v123 = STACK[0x3D0];
  }
  int v222 = v123;
  int v220 = v75 + 1763407063;
  unsigned int v124 = v93 ^ v79 ^ v72 ^ v107;
  unsigned int v125 = v98 ^ v84 ^ v73 ^ v112;
  unsigned int v126 = (v124 & 0x7F ^ 0xFFFFFFDF) + 1268716562 + ((2 * (v124 & 0x7F)) | 0x68C1D7DE);
  int v127 = ((v126 & 0x20202EF4 ^ 0x3040471) + (v126 & 0x400010B) - 1) ^ 0x27242FEA;
  LODWORD(STACK[0x3A8]) = 33686018 * v127;
  unsigned int v128 = 16843009 * v127 - ((33686018 * v127) & 0xD7A5F07C);
  unsigned int v129 = ((v124 & 0xB92CCE80 ^ 0x1100C649) + (v124 & 0x46D33100 ^ 0x42821001) - 2) ^ 0xB77B90B5;
  unsigned int v130 = ((v121 ^ 0xB1) - ((2 * (v121 ^ 0xB1)) & 0x10A) - 106591611) ^ 0xF9674A85;
  unsigned int v131 = (v130 - ((2 * v130) & 0x128) - 1472456556) ^ 0xA8FED800;
  LODWORD(STACK[0x27C]) = 16843009 * v131 - ((33686018 * v131) & 0xD717ACD0) + 1804326504;
  int v132 = ((1426063360 * v131 - ((704643072 * v131) & 0x40000000) + 551155362) ^ 0x20D9F6A2) & (v125 ^ 0x38A62ADC);
  unsigned int v221 = v132 - ((2 * v132) & 0x84000000) + 1118489437;
  int v133 = ((v122 & (v124 ^ 0x46)) - ((2 * (v122 & (v124 ^ 0x46))) & 0xFB) + 125) ^ 0x2DAA8DD;
  LODWORD(STACK[0x270]) = ((2 * v133) | 0xC10363F8) - v133 - 1619112444;
  int v134 = v124 ^ (v124 >> 8);
  unsigned int v135 = ((2 * (v134 ^ 0x2F7500F)) & 0x96 ^ 0x14) + (v134 ^ 0xFEF2F6FE);
  int v137 = (HIWORD(v124) & 8 ^ 0x4BF67FFF) + 2 * (HIWORD(v124) & 8);
  int v138 = ((v137 - 1274445823) & (v134 ^ 0x449358B0)) + (~(2 * ((v137 - 1274445823) & (v134 ^ 0x449358B0))) | 0xF8FF60F);
  int v139 = v137 - 161891846;
  int v140 = -1907967496 - v137;
  if (v138 == -1) {
    int v141 = v139;
  }
  else {
    int v141 = v140;
  }
  unsigned int v142 = v135 + v141 - ((2 * (v135 + v141) + 2105122680) & 0xA817B500) - 1832342980;
  unsigned int v143 = v128 + 1808988222;
  int v144 = LODWORD(STACK[0x250]) ^ 0x594CECF0;
  LODWORD(STACK[0x3D0]) = v143 ^ 0x6BD2F83E;
  unsigned int v145 = ((v125 ^ BYTE1(v125)) ^ 0x8B | 0x26D4E272)
  unsigned int v136 = (HIWORD(v124) & 0xF7 ^ 0x10600C0 | 0xC04D37D0) - (HIWORD(v124) & 0xF7 ^ 0x10600C0 | 0x3FB2C82F) + 1068681263;
  int v146 = 16843009 * (v136 ^ HIBYTE(v124) ^ 0x1540EDA3 ^ v142)
       - ((33686018 * (v136 ^ HIBYTE(v124) ^ 0x1540EDA3 ^ v142)) & 0xE8BAAB6)
       + 122017115;
  LOWORD(v14fseek(v0, 0LL, 2) = (BYTE2(v125) ^ 0x4F) - ((2 * (BYTE2(v125) ^ 0x4F)) & 0xA0) + 18256;
  unsigned int v147 = ((v142 & 0x3D2D ^ 0x8543182D) + (v142 & 0x42D2 ^ 0x40044281) - 1) ^ HIBYTE(v125) ^ ((v145 & 0x26544046 ^ 0xC5020002)
                                                                                           + (v145 ^ 0x22F567FC)
                                                                                           - ((v145 ^ 0x22F567FC) & 0x4200446)) ^ 0x2610DC9F;
  int v148 = 16843009 * v147 - ((33686018 * v147) & 0x1DB2B934) + 249126042;
  LODWORD(STACK[0x218]) = v148;
  int v149 = STACK[0x260];
  unsigned int v150 = LODWORD(STACK[0x260]) ^ 7;
  int v151 = v116 ^ 0x40C99199;
  unsigned int v152 = (((v143 ^ 0x6BD2F83E) + v144) ^ 0xD3C9EEAB)
       + (v74 ^ 0x57AE2096)
       + ((2 * ((v143 ^ 0x6BD2F83E) + v144)) & 0xA793DD56);
  unsigned int v153 = v152 - ((2 * v152 + 1483481772) & 0xE8A1782C) - 1601778324;
  unsigned int v154 = LODWORD(STACK[0x2B4]) ^ 0xD3AA233B;
  unint64_t v155 = STACK[0x3F0];
  int v156 = (LODWORD(STACK[0x20C]) ^ 0xA170352C)
       + ((-118568230 * STACK[0x3F0]) & 0xDBFBAFBA)
       + ((-59284115 * STACK[0x3F0]) ^ 0xEDFDD7DD)
       + 302131235;
  int v157 = dword_100239C00[(v148 ^ v146 ^ 0x99C89C1u) % 0x101]
       - ((2 * dword_100239C00[(v148 ^ v146 ^ 0x99C89C1u) % 0x101] + 688316950) & 0x228C8E72)
       - 1513506748;
  int v158 = (dword_100214E50[v150] ^ 0x4E224ABD) + 1;
  int v159 = LODWORD(STACK[0x238]) ^ 0x5A91A7D4;
  LODWORD(STACK[0x3CC]) = v74 ^ 0xA851DF69;
  unsigned int v160 = ((2 * ((v74 ^ 0xA851DF69) + v159)) & 0xC6BFFBAE)
       + (((v74 ^ 0xA851DF69) + v159) ^ 0xE35FFDD7)
       + (v143 ^ 0x942D07C1);
  LODWORD(STACK[0x29C]) = (2 * v160 + 960496724) & 0xA5FF0E90;
  LODWORD(STACK[0x288]) = v160 + 1872726386;
  int v161 = dword_100215890[v116 ^ 0x40C99199];
  HIDWORD(v16fseek(v0, 0LL, 2) = v161 ^ 0x66666666;
  LODWORD(v16fseek(v0, 0LL, 2) = v161 ^ 0xFC545100;
  unsigned int v163 = (v162 >> 7) - ((2 * (v162 >> 7)) & 0xFE4ACF72) + 2133157817;
  LODWORD(STACK[0x2A0]) = v118;
  LODWORD(STACK[0x2B4]) = (2
                         * ((v156 ^ 0xFBCFF99B)
                          + ((2 * v156) & 0xF79FF336)
                          + ((118568230 * v120) & 0xF7BEFF5E)
                          + ((59284115 * v120) ^ 0xFBDF7FAF)
                          + (v158 ^ 0xCEFDFD3C)
                          + ((2 * v158) & 0x9DFBFA78)
                          + (v163 ^ (v163 >> 6) ^ (v163 >> 2) ^ 0x3D2D2CD0))
                         + 1923420916) & 0x3E5CC358;
  unsigned int v164 = ((2 * (v150 + (LODWORD(STACK[0x2B8]) ^ 0x5A91A7D4))) & 0x7DED5F7C)
       + ((v150 + (LODWORD(STACK[0x2B8]) ^ 0x5A91A7D4)) ^ 0xBEF6AFBE);
  int v165 = LODWORD(STACK[0x258]) ^ LODWORD(STACK[0x23C]) ^ dword_100214E50[v154 % 0x101];
  LODWORD(STACK[0x254]) = v148 ^ v146;
  LODWORD(STACK[0x23C]) = v165 ^ v148 ^ v146 ^ v157;
  LODWORD(STACK[0x2B8]) = (2 * (v164 + (v116 ^ 0xBF366E66)) + 34775174) & 0x76F27C52;
  LODWORD(STACK[0x3E8]) = v120;
  LODWORD(STACK[0x204]) = (-635137239 * v120 - ((877209170 * v120) & 0x652508F2) + 848462969) ^ (-635137239 * v155
                                                                                               - ((877209170 * v155) & 0x337FFBE0)
                                                                                               + 432012784);
  unsigned int v166 = (((2 * (v143 ^ 0xBC)) | 0xB0B21D46) - (v143 ^ 0xBC) - 1482231459) ^ 0x10134221;
  int v167 = ((2 * v166) | 0x7363A60C) - v166 + 1179528442;
  int v219 = v167;
  int v168 = LODWORD(STACK[0x2C0]) ^ v74 ^ v143;
  LODWORD(STACK[0x2C0]) = v129 - 1;
  int v169 = v167 ^ (v129 - 1);
  unsigned int v170 = (v168 ^ ((v143 ^ v74) >> 4) ^ 0xE37CAC85) + (v169 ^ 0xC987D305) + 1;
  LODWORD(STACK[0x3E0]) = v151;
  unsigned int v171 = v151 | ((v117 & 0xFFFFFFF8 ^ 0x8477A905) - 1) ^ 0xBAC693CC;
  int v172 = LODWORD(STACK[0x318]) ^ 0x6B7A08F2;
  unsigned int v173 = LODWORD(STACK[0x318]) ^ 0x94D14747;
  unsigned int v174 = (v171 - 1375947459 + (~(2 * v171) | 0xA4069585) + 1) ^ 0xADFCB53D;
  int v175 = (-771730529 * v174) ^ 0x6BDB6FCA;
  unsigned int v176 = (-1543461058 * v174) & 0xD7B6DF94;
  LODWORD(STACK[0x318]) = ((v124 ^ 0x237AF555) + (v170 ^ 0x4FDFE5FF) + ((2 * v170) & 0x9FBFCBFE) - 1340073471) ^ 0xFF35BBFF;
  unsigned int v177 = (v74 ^ 0x9ABDBE82) + 1698840853 + ((2 * v74) & 0x1D6 ^ 0xD2);
  int v178 = LODWORD(STACK[0x410]) ^ 0x3EB13ACD;
  unsigned int v179 = v220 ^ 0xC21C6C1F | v149;
  int v180 = STACK[0x2B0];
  LODWORD(v155) = dword_100215890[((v179 ^ 0xE7FDDDBA) + 402793027 + ((2 * v179) & 0xCFFBBB7A ^ 0xA)) % 0x101];
  HIDWORD(v16fseek(v0, 0LL, 2) = v155 ^ 0x66666666;
  LODWORD(v16fseek(v0, 0LL, 2) = v155 ^ 0xFC545100;
  LODWORD(v155) = (v162 >> 7) - ((2 * (v162 >> 7)) & 0x41C36D1A) + 551663245;
  int v181 = *((_DWORD *)&unk_100219450 + ((v173 % 0x101) ^ 0xBFFF6EDF) + ((2 * (v173 % 0x101)) & 0x1BE) + 1073778977);
  LODWORD(STACK[0x250]) = v153 ^ v124 ^ 0x31112A9 ^ v169 ^ 0x5E6209DC ^ ((v169 ^ 0x5E6209DC ^ v124) >> 1);
  LODWORD(STACK[0x238]) = v181 ^ LODWORD(STACK[0x24C]) ^ v155 ^ (v155 >> 2) ^ (v155 >> 6);
  LODWORD(v155) = (LODWORD(STACK[0x210]) ^ 0x91E139E4)
                - 123399993 * (((2 * v171) & 0xBD4DF77E) + (v171 ^ 0xDEA6FBBF))
                + 844848775;
  LODWORD(STACK[0x3B8]) = v150;
  LODWORD(v155) = ((123399993 * v178) ^ 0xBF7B759F)
                + ((246799986 * v178) & 0x7EF6EB3E)
                + (v155 ^ 0x7FD977FD)
                + ((2 * v155) & 0xFFB2EFFA);
  LODWORD(STACK[0x210]) = (2 * v155 + 22422728) & 0x1F59055A;
  LODWORD(STACK[0x20C]) = v155 - 799566575;
  LODWORD(STACK[0x24C]) = (2
                         * (a72
                          + a71
                          + LODWORD(STACK[0x3B0])
                          + LODWORD(STACK[0x274])
                          + v180
                          - (((2 * ((v223 ^ 0xE6967BA3) + v177)) & 0xFEB7EFF4)
                           + (((v223 ^ 0xE6967BA3) + v177) ^ 0xFF5BF7FA))
                          + ((1543461058 * v178) & 0xF667BBFA)
                          + ((771730529 * v178) ^ 0x7B33DDFD)
                          + v176
                          + v175)
                         + 704209566) & 0xF8BE4D68;
  LODWORD(STACK[0x2B0]) = (2
                         * (((((v179 ^ 7) - 2 * ((v220 ^ 0xC21C6C1F) & 0x2A4CFA68 ^ v220 & 0x20) - 1437795768) ^ v172) << 8) ^ 0xE7B5FD00)) & 0xCF11AE00;
  unsigned int v182 = (((v124 ^ 0x237AF555) - 257) ^ 0x3EAEB7B7) - 1051637687 + ((2 * ((v124 ^ 0x237AF555) - 257)) & 0x7D5D6F6E);
  int v183 = v182 % 0x101 - ((2 * (v182 % 0x101)) & 0x3F8) + 543942652;
  if ((v124 ^ 0x237AF555) <= 0x100) {
    int v183 = v124 ^ 0x31112A9;
  }
  LODWORD(STACK[0x318]) = *((_DWORD *)&unk_100219450
                          + ((((v219 ^ 0xF1FB9F06) + (LODWORD(STACK[0x2C0]) ^ 0xC783B3FC)) ^ 0xDAFB36FB)
                           + 621070597
                           + ((2 * ((v219 ^ 0xF1FB9F06) + (LODWORD(STACK[0x2C0]) ^ 0xC783B3FC))) & 0xB5F66DF6))
                          % 0x101) ^ v222 ^ dword_100214E50[v183 ^ 0x206BE7FC];
  LODWORD(STACK[0x214]) = LODWORD(STACK[0x31C]) ^ LODWORD(STACK[0x208]) ^ LODWORD(STACK[0x410]);
  LODWORD(STACK[0x208]) = v146 ^ 0x925A44D8;
  unsigned int v184 = (void *)STACK[0x568];
  int v185 = *(void *)(STACK[0x568]
                   + 8LL
                   * ((*(void *)(STACK[0x568]
                                 + 8LL
                                 * ((*(void *)(STACK[0x568] + 8LL * ((*(_DWORD *)(STACK[0x568] + 8) & 1) == 0)) & 1) == 0)) & 1) == 0)) & 1;
  unsigned int v186 = (v185 ^ 0xAAFDEFFF) + 2 * v185 + 1725191208;
  STACK[0x3F8] = (STACK[0x400] - 400983947) & 0x17E687C3;
  LODWORD(STACK[0x3B0]) = v221 ^ LODWORD(STACK[0x27C]);
  unsigned int v187 = LODWORD(STACK[0x3C8]) ^ 0xDF307DC7;
  LODWORD(STACK[0x410]) = LODWORD(STACK[0x388]) ^ 0xE8755894;
  LODWORD(STACK[0x2C0]) = LODWORD(STACK[0x23C]) ^ 0x8B712336;
  BOOL v188 = v186 < 0x11D24427;
  unint64_t v189 = 0x5F3D51B5D321F3ADLL * (*v184 ^ 0xAEAEAEAEAEAEAEAELL)
       - ((0xBE7AA36BA643E75ALL * (*v184 ^ 0xAEAEAEAEAEAEAEAELL)) & (STACK[0x3F8] ^ 0xE0F026ED0FF56A9BLL))
       + 0x7078137687FAB4ADLL;
  unint64_t v190 = ((2 * (v189 ^ 0x96817D5FFAD436ADLL)) & 0x7B3FBAAE9D73BBDELL) + (v189 ^ 0xAB1EA008B46DEB42LL);
  unint64_t v191 = v190
       + (((v190 - 0x3D9FDD574EB9DDEFLL) >> 32) ^ 0x4300716941104D28LL)
       - (((v190 - 0x3D9FDD574EB9DDEFLL) >> 31) & 0x17DDF65AELL);
  unint64_t v192 = v191
       + (((v191 + 0x7F5FB13F7035D4E9LL) >> 16) ^ 0x4BB975B73FFFBD9DLL)
       + (((v191 + 0x7F5FB13F7035D4E9LL) >> 15) & 0xEB6E7FFF7B3ALL);
  unint64_t v193 = v192
       + (((v192 + 0x33A63B883036174CLL) >> 8) ^ 0x8070E822A3001906LL)
       - (((v192 + 0x33A63B883036174CLL) >> 7) & 0x11E2FBAB9FFCDF2LL)
       + 2;
  uint64_t v194 = v193 - ((2 * v193 + 0x666AA6CB1A6BFC88LL) & 0x5C38002619F7EA60LL) + 0x615153789A31F374LL;
  unint64_t v195 = (v194 ^ 0xA6260A84BCA3C90LL)
       + ((((2 * v194) ^ 0x5C38002619F7EA60LL)
         - ((2 * ((2 * v194) ^ 0x5C38002619F7EA60LL)) & 0x51722BE9E6B0C1A8LL)
         - 0x5746EA0B0CA79F2CLL) & 0x48FCC1768E639340LL ^ 0x4E073E82742B7FBELL)
       + ((2
         * (((2 * v194) ^ 0x5C38002619F7EA60LL)
          - ((2 * ((2 * v194) ^ 0x5C38002619F7EA60LL)) & 0x51722BE9E6B0C1A8LL)
          - 0x5746EA0B0CA79F2CLL)) & 0x817802ED0CC62680LL ^ 0x17002E904800080LL)
       - 0x46BF3FF6F66B7FFELL;
  uint64_t v196 = ((2 * v195) & 0x71FEEAFFB5FFF8FALL) + (v195 ^ 0x38FF757FDAFFFC7DLL);
  int v197 = v196 - ((2 * v196 + 758702214) & 0xD878EAF4) + 47769021;
  unsigned int v198 = (((2 * v197) ^ 0xD878EAF4) - ((2 * ((2 * v197) ^ 0xD878EAF4)) & 0x3D1C097C) + 512623807) & 0xFD6FFC6C ^ 0x9424340C;
  unsigned int v199 = (v198 - ((2 * v198) & 0xA0897010) - 799753975) ^ 0x527CB98B;
  unsigned int v200 = v199 - ((2 * v199) & 0x3193E3EC);
  unint64_t v201 = v196 - ((2 * v196 - 0x4CF52F63612AB2BALL) & 0xACC292DB7B7F05F8LL) - 0x50194E43F2D5D661LL;
  int v202 = (((2 * v201) ^ 0x7B7F05F8) - 2 * (((2 * v201) ^ 0x7B7F05F8) & 0x4A65A69C ^ (2 * v201) & 4) - 899307879) & 0xFD6FFC6C ^ 0x992EA424;
  unsigned int v203 = 1787818870 - (v202 | 0x6A8FF376) + (v202 | 0x95700C89);
  unint64_t v204 = ((2 * (v189 ^ 0xA6195A1B3A453651LL ^ v201)) & 0xEDADFEFD9EEAEFF0LL)
       + (v189 ^ 0xA6195A1B3A453651LL ^ v201 ^ 0xF6D6FF7ECF7577F8LL);
  unint64_t v205 = v204
       + (((v204 + 0x9290081308A8808LL) >> 32) ^ 0xAA84430008901000LL)
       - ((2 * ((v204 + 0x9290081308A8808LL) >> 32)) & 0x1EEDFDFFELL);
  unint64_t v206 = v205
       + (((v205 + 0x5EA4BD8127FA7808LL) >> 16) ^ 0x6FFEE9FF7F7BE5BFLL)
       + (((v205 + 0x5EA4BD8127FA7808LL) >> 15) & 0x1D3FEFEF7CB7ELL);
  unint64_t v207 = v206
       + (((v206 - 0x115A2C7E57816DB7LL) >> 8) ^ 0x80444040D620402LL)
       - (((v206 - 0x115A2C7E57816DB7LL) >> 7) & 0x1F777F7E53BF7FALL)
       + 2;
  unint64_t v208 = (v207 - ((2 * v207 + 0xD431EFB36391C8ALL) & 0x8A37B7FFC54C65ELL) + 0x6AF34D3D9946F174LL) ^ 0x8451BDBFFE2A632FLL;
  int v209 = v208 - ((2 * v208 + 1906076864) & 0x22282610) + 1239566696;
  uint64_t v210 = v208 - 2 * ((v208 + 0x7033E89719C6CC0LL) & 0x8D893AB146E8CB7LL ^ v208 & 0x14) - 0x40242DCB79F5069DLL;
  int v211 = (((2 * v210) ^ 0x28DD1946) - 2 * (((2 * v210) ^ 0x28DD1946) & 0x4849A23C ^ (2 * v210) & 0x30) - 934698484) & 0xFD6FFC6C ^ v210;
  unint64_t v212 = ((2 * (v189 ^ 0x78A080DD9394380ELL ^ v210)) & 0xFF3BEFAE8C3D63F2LL)
       + (v189 ^ 0x78A080DD9394380ELL ^ v210 ^ 0x7F9DF7D7461EB1F9LL);
  unint64_t v213 = v212
       + (((v212 - 0x7F9DF7D7461EB1F9LL) >> 32) ^ 0x1140202180008224LL)
       - (((v212 - 0x7F9DF7D7461EB1F9LL) >> 31) & 0xFFFEFBB6);
  unint64_t v214 = v213
       + (((v213 + 0x6F21E80739E0CBE3LL) >> 16) ^ 0xBFD776BDEDEFBFBELL)
       + (((v213 + 0x6F21E80739E0CBE3LL) >> 15) & 0xED7BDBDF7F7CLL);
  unint64_t v215 = v214
       + (((v214 - 0x50B58EB6B40EF3DBLL) >> 8) ^ 0x30040AE480E06ALL)
       - (((v214 - 0x50B58EB6B40EF3DBLL) >> 7) & 0x19FF7EA36FE3F2ALL)
       + 2;
  LODWORD(v215) = (v215 - ((2 * v215 - 824158350) & 0x78E24C56) - 1545514524) ^ 0x3C71262B;
  LODWORD(v194) = v215 - 2 * ((v215 - 1194445216) & 0x52E451AC ^ v215 & 8) - 1951234044;
  LODWORD(v204) = (((2 * v194) ^ 0xA5C8A348) - ((2 * ((2 * v194) ^ 0xA5C8A348)) & 0x5F4EED04) + 799504003) & 0xFD6FFC6C ^ 0xC081020;
  LODWORD(STACK[0x410]) ^= v197 ^ (v200 + 415887863) ^ (((2 * v209) ^ 0x22282610)
                                                      + 470778193
                                                      - 2 * (((2 * v209) ^ 0x22282610) & 0x1C0F815A ^ (2 * v209) & 0xA)) & 0xFD6FFC6C ^ v209 ^ 0x75C3E8C3 ^ (((((2 * v204) & 0x62CA18C8) - v204 - 871698405) & 0x55C3D9B0 ^ 0x11C20831) + ((((2 * v204) & 0x62CA18C8) - v204 - 871698405) & 0xAA3C264C ^ 0xA82C0209) - 2) ^ v194;
  int v216 = v215 - 2 * ((v215 + 1906076864) & 0xA8A35F0F ^ v215 & 2) + 440388557;
  if (v186 >= 0x11D24427) {
    BOOL v188 = v186 > 0x11D24428;
  }
  unsigned int v217 = (((2 * v216) ^ 0x5146BE1A) - ((2 * ((2 * v216) ^ 0x5146BE1A)) & 0xD4D878A0) + 1785478224) & 0xFD6FFC6C ^ 0x392F3440;
  return ((uint64_t (*)(void))*(&off_10025C670 + (int)((1568 * !v188) ^ STACK[0x400])))(v187 ^ v201 ^ v203 ^ v211 ^ 0xB5211D41 ^ (((2 * v217) | 0xD2C5D174) - v217 + 379393862) ^ v216);
}

uint64_t sub_100191F90( int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, int a37, int a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59,int a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  LODWORD(STACK[0x274]) = a71 ^ 0x255AC46F;
  LODWORD(STACK[0x2B8]) = a60 - LODWORD(STACK[0x2B8]);
  LODWORD(STACK[0x2B4]) = LODWORD(STACK[0x250]) ^ 0xA603113B;
  LODWORD(STACK[0x328]) = LODWORD(STACK[0x318]) ^ 0x72AD6D20;
  LODWORD(STACK[0x324]) = a38 + a37 + 1263681952;
  LODWORD(STACK[0x2B0]) = LODWORD(STACK[0x214]) ^ 0xB4B91BC9;
  unint64_t v73 = STACK[0x568];
  STACK[0x400] = STACK[0x3F8] ^ 0x264;
  unint64_t v74 = v71 - 1534719920LL + ((unint64_t)(v71 < 0x5B79F7B0) << 32);
  unint64_t v75 = 0x5F3D51B5D321F3ADLL * (*(void *)(v73 + 8 * v74) ^ 0xAEAEAEAEAEAEAEAELL)
      - (((*(void *)(v73 + 8 * v74) ^ 0xAEAEAEAEAEAEAEAELL) * (STACK[0x400] ^ 0x7AA36BA643E6FFLL)) & 0x19DAFBC6E9FC5C0LL)
      + 0xCED7DE374FE2E0LL;
  unint64_t v76 = ((2 * ((a3 ^ 0x1A5469CC9FECBDEDLL ^ v75) + v74)) & 0xF5B1DDFED7D7BDE8LL)
      + (((a3 ^ 0x1A5469CC9FECBDEDLL ^ v75) + v74) ^ 0xFAD8EEFF6BEBDEF4LL);
  unint64_t v77 = v76
      + (((v76 + 0x52711009414210CLL) >> 32) ^ 0x8D820290216969LL)
      - (((v76 + 0x52711009414210CLL) >> 31) & 0xDFBD2D2C);
  unint64_t v78 = v77
      + (((v77 + 0x4998EFE03F2B7A3LL) >> 16) ^ 0xFAD7AF23DF6FFFFELL)
      + (((v77 + 0x4998EFE03F2B7A3LL) >> 15) & 0x15E47BEDFFFFCLL);
  unint64_t v79 = v78
      + (((v78 + 0x9C1DFDA2482B7A5LL) >> 8) ^ 0x400622020A00A8LL)
      - (((v78 + 0x9C1DFDA2482B7A5LL) >> 7) & 0x17FF3BBFBEBFEAELL)
      + 2;
  unint64_t v80 = v79 - ((2 * v79 + 0x1303B37044F16DF6LL) & 0x93830E636F0EA3F6LL) - 0x2CBC9F1625FFF70ALL;
  int v81 = (v80 ^ 0xB78751FB)
      - 2 * (((v80 ^ 0xB78751FB) - 1194445216) & 0x7988C12B ^ (v80 ^ 0xB78751FB) & 0xA)
      - 1302923391;
  unsigned int v82 = ((2 * v81) ^ 0xF3118242) - 2 * (((2 * v81) ^ 0xF3118242) & 0x7B7A137C ^ (2 * v81) & 0x2C) + 2071597904;
  unsigned int v83 = (v82 & 0x3902EC40 ^ 0x18828811 | v82 & 0xC46D102C) - 1;
  unsigned int v84 = (v83 & 0x56A3460 ^ 0x4081620) + (v83 ^ 0xE972A858) - ((v83 ^ 0xE972A858) & 0x5FA3460);
  unint64_t v85 = (v80 ^ 0xC9C18731B78751FBLL)
      - 2
      * (((v80 ^ 0xC9C18731B78751FBLL) + 0x7033E89719C6CC0LL) & 0xAE073598B2B2B2FLL ^ (v80 ^ 0xC9C18731B78751FBLL) & 2)
      - 0x3E1C4E1D03386813LL;
  int v86 = (((2 * v85) ^ 0x1656565A) - ((2 * ((2 * v85) ^ 0x1656565A)) & 0xFB7F22A8) - 37777067) & v72 ^ 0x1446EC6C;
  unsigned int v87 = (((2 * v86) & 0x28480848) - v86 + 1774975305) ^ 0xC9BAC951;
  unsigned int v88 = ((2 * v87) & 0x90A08100) - v87;
  unint64_t v89 = ((2 * ((v75 ^ 0xA2EA487BC64C9CDLL ^ v85) + v74)) & 0x5DF6BF5FD6DFA9F2LL)
      + (((v75 ^ 0xA2EA487BC64C9CDLL ^ v85) + v74) ^ 0xAEFB5FAFEB6FD4F9LL);
  unint64_t v90 = v89
      + (((v89 + 0x5104A05014902B07LL) >> 32) ^ 0x9680188901748404LL)
      - (((v89 + 0x5104A05014902B07LL) >> 31) & 0x1FD16F7F6LL);
  unint64_t v91 = v90
      + (((v90 - 0x457B7838ECE458FDLL) >> 16) ^ 0x7FDEEF7F5E3FEDF7LL)
      + (((v90 - 0x457B7838ECE458FDLL) >> 15) & 0x1DEFEBC7FDBEELL);
  unint64_t v92 = v91
      + (((v91 + 0x3AA59847B4DBB90CLL) >> 8) ^ 0x8A1022EC03880202LL)
      - (((v91 + 0x3AA59847B4DBB90CLL) >> 7) & 0x1DFBA27F8EFFBFALL);
  uint64_t v93 = v92 + 2 - 2 * ((v92 + 0x3095755BB153B70ALL) & 0x40D2C23682D59AC6LL ^ (v92 + 2) & 4) + 0x71683792342951CALL;
  unint64_t v94 = v93 ^ 0xC0D2C23682D59AC2LL;
  LODWORD(v93) = (v93 ^ 0x82D59AC2) - 2 * (((v93 ^ 0x82D59AC2) - 1194445216) & 0x7850C6BF ^ v93 & 8) + 824114455;
  int v95 = (((2 * v93) ^ 0xF0A18D6E) - ((2 * ((2 * v93) ^ 0xF0A18D6E)) & 0x1507C82C) + 176415767) & v72 ^ 0xA54EB004;
  unsigned int v96 = (((2 * v95) | 0xD2DC0842) - v95 + 378665951) ^ 0xC1624520;
  LODWORD(v93) = (((2 * v96) & 0xB98ADDA8) - v96 + 591040811) ^ v93;
  uint64_t v97 = v94 - ((2 * v94 + 0xE067D12E338D980LL) & 0xBCABBF5855DE6F8LL) + 0x3CE89C84344B603CLL;
  LODWORD(v94) = (2 * (v94 - ((2 * v94 - 482813568) & 0x855DE6F8) + 877355068)) ^ 0x855DE6F8;
  LODWORD(v94) = (v94 - ((2 * v94) & 0xFFDDF04) - 2013335678) & v72 ^ 0x4D08EC4C;
  LODWORD(v94) = (((2 * v94) & 0xF8D65010) - v94 + 25483253) & 0xFFFFFFFC ^ v97;
  unint64_t v98 = ((2 * ((v75 ^ 0x852B8A24F5E1119CLL ^ v97) + v74)) & 0xFDB5FFFDFF3FAC4ELL)
      + (((v75 ^ 0x852B8A24F5E1119CLL ^ v97) + v74) ^ 0xFEDAFFFEFF9FD627LL);
  unint64_t v99 = v98
      + (((v98 + 0x1250001006029D9LL) >> 32) ^ 0x94862382430475A1LL)
      - (((v98 + 0x1250001006029D9LL) >> 31) & 0x179F714BCLL);
  unint64_t v100 = v99
       + (((v99 + 0x6C9EDC7EBD5BB438LL) >> 16) ^ 0x56D6B7AF9DFFFEFFLL)
       + (((v99 + 0x6C9EDC7EBD5BB438LL) >> 15) & 0x16F5F3BFFFDFELL);
  unint64_t v101 = v100
       + (((v100 + 0x15C824CF1F5BB539LL) >> 8) ^ 0xC565485000010830LL)
       - (((v100 + 0x15C824CF1F5BB539LL) >> 7) & 0x1356F5FFFFDEF9ELL)
       + 2;
  int v102 = v101 - ((2 * v101 - 1336817970) & 0x6B52C700) - 1915599129;
  unsigned int v103 = (((2 * v102) ^ 0x6B52C700) - 1299816423 + ~(2 * (((2 * v102) ^ 0x6B52C700) & 0x3286601A ^ (2 * v102) & 2))) & v72 ^ 0xA33C224E;
  int v104 = LODWORD(STACK[0x410]) ^ v81;
  int v105 = v101 - ((2 * v101 + 569258894) & 0x5146BE1A) + 966424788;
  LODWORD(STACK[0x410]) = v104 ^ v84 ^ v93 ^ 0xA04D1383 ^ (v103 - ((2 * v103) & 0x583B6C00) - 1407338607) ^ v102;
  LODWORD(v93) = (((2 * v105) ^ 0x5146BE1A)
                - 2 * (((2 * v105) ^ 0x5146BE1A) & 0x229BB92E ^ (2 * v105) & 0x20)
                - 1566852849) & v72 ^ 0x160CC4C;
  LODWORD(v93) = a1 ^ v85 ^ (v88 + 934264188) ^ v94 ^ 0x2DF2CDFE ^ (((2 * v93) & 0x9A9BC048) - v93 + 815930458) & 0xFFFFFFFC ^ v105;
  LODWORD(v93) = ((v93 & 0xA2FBE306 ^ 0xC660CF02) - ((2 * (v93 & 0xA2FBE306 ^ 0xC660CF02)) & 0x80650C04) - 1053653350) ^ 0x8533889A | (((2 * (v93 & 0x5D041CF9 ^ 0x4C041C08)) & 0x92081092) - (v93 & 0x5D041CF9 ^ 0x4C041C08) + 369285042) ^ 0x5606DB32;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
}

void sub_100192D40()
{
}

#error "1001969D4: call analysis failed (funcsize=2382)"
#error "1001969DC: too big function (funcsize=0)"
void sub_1001AAA40()
{
  JUMPOUT(0x1001AA9E8LL);
}

uint64_t sub_1001AAA48@<X0>(uint64_t a1@<X1>, int a2@<W3>, int a3@<W8>, uint64_t a4)
{
  LODWORD(STACK[0x3E8]) = a2;
  uint64_t v4 = (a3 - 858);
  unint64_t v5 = ((unint64_t)&STACK[0x504] ^ 0x677FE9DBB639D6EFLL)
     - 0x677FE9DBB639D6EFLL
     + ((2LL * (void)&STACK[0x504]) & 0xCEFFD3B76C73ADD8LL);
  STACK[0x3F8] = ((v5 % (v4 ^ 0x137uLL)) ^ 0xFDDBFF7FEF3977F7LL)
               + 0x224008010C68819LL
               + ((2 * (v5 % (v4 ^ 0x137uLL))) & 0x6ELL);
  unint64_t v6 = STACK[0x4B0];
  STACK[0x3E0] = STACK[0x4B0];
  int v7 = (uint64_t (*)(void))(*(void *)(a1
                                     + 8LL
                                     * (int)((1557
                                            * ((((v4 ^ 0x11B) + 1539158674) ^ (183
  STACK[0x410] = STACK[0x4D8];
  STACK[0x3F0] = (unint64_t)&a4 + v6 - 0x1C5F64B7040237CELL;
  return v7();
}

uint64_t sub_1001AAB9C( int8x16_t a1, int8x16_t a2, int8x16_t a3, int8x16_t a4, int32x4_t a5, int8x16_t a6, int8x16_t a7, int8x16_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v23 = 4 * v13;
  uint64_t v24 = v18 + 4 * v13;
  uint64_t v25 = v13 + 4;
  v22.i32[0] = *(_DWORD *)(v18 + (v23 | 4));
  v22.i32[1] = *(_DWORD *)(v18 + (v23 | 8));
  v22.i32[2] = *(_DWORD *)(v18 + (v23 | 0xC));
  int8x16_t v26 = vextq_s8(a1, v22, 0xCuLL);
  int8x16_t v27 = v22;
  v27.i32[3] = *(_DWORD *)(v18 + 4 * v25);
  int8x16_t v28 = vandq_s8(v26, a8);
  int32x4_t v29 = (int32x4_t)veorq_s8(vandq_s8(v27, a2), a3);
  int8x16_t v30 = (int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vorrq_s8((int8x16_t)vaddq_s32(v29, v29), a4), v29), a5);
  int32x4_t v31 = (int32x4_t)veorq_s8(vorrq_s8(v30, v28), a6);
  int32x4_t v32 = (int32x4_t)veorq_s8(vandq_s8((int8x16_t)v31, a7), vandq_s8(v30, v19));
  v33.i32[0] = *(_DWORD *)(v16 + 4LL * ((*(_DWORD *)(v18 + (v23 | 4)) & 1) == 0));
  v33.i32[1] = *(_DWORD *)(v16 + 4 * (*(_DWORD *)(v18 + (v23 | 8)) & v15 ^ 1LL));
  v33.i32[2] = *(_DWORD *)(v16 + 4 * (~*(_DWORD *)(v18 + (v23 | 0xC)) & 1LL));
  v33.i32[3] = *(_DWORD *)(v16 + 4 * (~v27.i32[3] & 1LL));
  *(int8x16_t *)uint64_t v24 = veorq_s8( veorq_s8(veorq_s8(*(int8x16_t *)(v24 + 1588), v33), v21),  (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vsubq_s32(v31, vaddq_s32(v32, v32)), v20), 1uLL));
  return (*(uint64_t (**)(void))(a13 + 8LL * (((v25 != 224) * v17) ^ v14)))();
}

uint64_t sub_1001AAC94@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, int a3@<W8>)
{
  uint64_t v8 = (_DWORD *)(v5 + 4 * (v4 + v6));
  int v9 = ((2 * (*v8 & 0x7FFFFFFE ^ 0x5EE5332E)) | 0x4BAF96A8) - (*v8 & 0x7FFFFFFE ^ 0x5EE5332E) - 634899284;
  *(_DWORD *)(v5 + 4 * (v4 + ((a3 - 1845293210) | 0x48048100u)) - 0x567995C48LL) = v8[396] ^ *(_DWORD *)(v7 - 184 + 4LL * ((*v8 & 1) == 0)) ^ ((((v9 | v3 & 0x80000000) ^ 0x666F9D80) - 2 * (((v9 | v3 & 0x80000000) ^ 0x666F9D80) & 0x1528143C ^ v9 & 0xC) - 1792535503) >> 1) ^ 0x5C69BEF3;
  return (*(uint64_t (**)(void))(a1 + 8LL * ((76 * (v4 + 1 != a2 + 3)) | a3)))();
}

uint64_t sub_1001AAD80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  signed int v8 = 28 * (v6 ^ 0xDA079121);
  int v9 = &flt_100273FD0;
  int8x16_t v10 = (int8x16_t)vld1q_dup_f32(v9);
  int32x4_t v11 = vdupq_n_s32(0x133C166Bu);
  v12.i64[0] = 0x8000000080000000LL;
  v12.i64[1] = 0x8000000080000000LL;
  v13.i64[0] = 0x8000000080000000LL;
  v13.i64[1] = 0x8000000080000000LL;
  v7.i64[0] = *(void *)&dword_100273FD4;
  v7.i32[2] = dword_100273FDC;
  int8x16_t v14 = vextq_s8(v10, v7, 0xCuLL);
  int8x16_t v15 = v7;
  v15.i32[3] = dword_100273FE0;
  int8x16_t v16 = (int8x16_t)vaddq_s32( (int32x4_t)veorq_s8( (int8x16_t)vsubq_s32(vdupq_n_s32(0x2E313CA7u), (int32x4_t)vorrq_s8(v14, v12)),  (int8x16_t)vdupq_n_s32(0xEF21B028)),  vdupq_n_s32(0xD31C587u));
  int8x16_t v17 = veorq_s8(vandq_s8(v15, (int8x16_t)vdupq_n_s32(0x7FFFFFFEu)), (int8x16_t)vdupq_n_s32(0x4D3F06C6u));
  int32x4_t v18 = (int32x4_t)veorq_s8( (int8x16_t)vaddq_s32( vsubq_s32( (int32x4_t)vorrq_s8(v17, (int8x16_t)vdupq_n_s32(0xECC3E994)),  (int32x4_t)vorrq_s8(v17, (int8x16_t)v11)),  v11),  (int8x16_t)vdupq_n_s32(0xBCA18AA8));
  v19.i32[0] = *(_DWORD *)(v5 + 4LL * ((dword_100273FD4 & 1) == 0));
  v19.i32[1] = *(_DWORD *)(v5 + 4 * (unk_100273FD8 & ((v8 - 839629145) & 0x320BB7FC ^ 0x321u) ^ 1LL));
  v19.i32[2] = *(_DWORD *)(v5 + 4 * (~dword_100273FDC & 1LL));
  v19.i32[3] = *(_DWORD *)(v5 + 4LL * ((dword_100273FE0 & 1) == 0));
  *(int8x16_t *)&flt_100273FD0 = veorq_s8( veorq_s8( veorq_s8((int8x16_t)xmmword_100273C44, v19),  (int8x16_t)vdupq_n_s32(0x381401A3u)),  (int8x16_t)vshrq_n_u32( (uint32x4_t)vaddq_s32( vsubq_s32( (int32x4_t)vorrq_s8((int8x16_t)v18, vandq_s8(v16, v13)),  (int32x4_t)vandq_s8( (int8x16_t)vaddq_s32(v18, v18),  (int8x16_t)vdupq_n_s32(0xBBA6D520))),  vdupq_n_s32(0x5DD36A90u)),  1uLL));
  return ((uint64_t (*)(void))(*(void *)(a5 + 8LL * v8) - 4LL))();
}

void sub_1001AAF30()
{
}

uint64_t sub_1001AAF3C@<X0>(uint64_t a1@<X4>, unsigned int a2@<W8>)
{
  unsigned int v4 = (((((*v2 & 0x7FFFFFFE ^ 0xB516D703) << ((3 * (((a2 + 65) | 0xE) ^ 0x4A)) ^ 0x6E)) | 0x57A017A0)
       - (*v2 & 0x7FFFFFFE ^ 0xB516D703)) & 0xFFFFFFFE)
     - 735054800;
  v2[623] = v2[396] ^ *(_DWORD *)(v3 - 184 + 4LL * ((*v2 & 1) == 0)) ^ (((v4 ^ 0x839BB928 | v2[623] & 0x80000000)
                                                                       - 2
                                                                       * ((v4 ^ 0x839BB928) & 0x3C849DD6 ^ v4 & 0x10)
                                                                       - 1132159545) >> 1) ^ 0x48BFFA08;
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * ((152 * (LODWORD(STACK[0x4E4]) > 0x26F)) ^ a2)) - 8LL))();
}

uint64_t sub_1001AB01C()
{
  LODWORD(STACK[0x4E4]) = 0;
  int v3 = v0;
  int v4 = v0 + 1787044346;
  int v5 = LODWORD(STACK[0x4E4])++;
  *(_DWORD *)(v1 + 312_Block_object_dispose(va, 8) = v5 + 1227344547;
  int v6 = dword_100273C40;
  unint64_t v7 = 516615401 * (((~(v2 - 152) | 0x3E25FA4912891144LL) + ((v2 - 152) | 0xC1DA05B6ED76EEBBLL)) ^ 0x49668DCD9E15E888LL);
  *(void *)(v2 - 120) = v7 + 2218358041u;
  *(_DWORD *)(v2 - 11fseek(v0, 0LL, 2) = (v3 - 185257448) ^ v7;
  *(_DWORD *)(v2 - 10_Block_object_dispose(va, 8) = v7 + v4 - 45;
  *(_DWORD *)(v2 - 12_Block_object_dispose(va, 8) = v7 ^ v4 ^ 0xC;
  *(_DWORD *)(v2 - 15fseek(v0, 0LL, 2) = v7 + 1;
  *(_DWORD *)(v2 - 14_Block_object_dispose(va, 8) = v4 - v7;
  *(void *)(v2 - 136) = (v6 + 1168588099) ^ v7;
  uint64_t v8 = sub_1000AF0AC(v2 - 152);
  return ((uint64_t (*)(uint64_t))((char *)*(&off_10025C670 + *(int *)(v2 - 144)) - 12))(v8);
}

void sub_1001AB124()
{
  if (v0 >= v1) {
    int v2 = dword_100273C40 + 1;
  }
  else {
    int v2 = 1049769942;
  }
  dword_100273C40 = v2;
  JUMPOUT(0x1001AB288LL);
}

uint64_t sub_1001AB30C(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(v5
                              + 8LL
                              * (((v3 + 8 == a3) * (((v4 - 1992928422) & 0x76C9AEFF) + 21 * (v4 ^ 0x41D) - 1532)) ^ v4)))();
}

uint64_t sub_1001AB358(uint64_t a1)
{
  *(void *)(v3 - 184) = 0x8FF5043416FDB4EBLL;
  LODWORD(STACK[0x4E4]) = dword_100273C38 - 1227344546;
  uint64_t v4 = dword_100273C40;
  unint64_t v5 = 1856021207 * ((v3 - 152 + v2 - 2 * ((v3 - 152) & v2)) ^ 0xDD86721C725D88F9LL);
  *(_DWORD *)(v3 - 140) = v1 - 1229013842 + v5;
  *(void *)(v3 - 136) = v4 - v5;
  *(void *)(v3 - 12_Block_object_dispose(va, 8) = v5 ^ a1;
  *(_DWORD *)(v3 - 120) = v5 + v1 + 1123495930;
  *(_DWORD *)(v3 - 116) = v5;
  *(_DWORD *)(v3 - 14_Block_object_dispose(va, 8) = v5 ^ (v1 - 1229013842) ^ 7;
  *(_DWORD *)(v3 - 144) = (v1 - 1229013723) ^ v5;
  uint64_t v6 = sub_1001DD4A8(v3 - 152);
  return ((uint64_t (*)(uint64_t))*(&off_10025C670 + *(int *)(v3 - 152)))(v6);
}

uint64_t sub_1001AB428()
{
  LODWORD(STACK[0x398]) = v1;
  int v3 = (v2 - 1647) | 0x51E;
  STACK[0x3D8] = (unint64_t)malloc(STACK[0x388]);
  uint32_t v4 = arc4random();
  unsigned int v5 = v4 + 492660219 + v3 - ((2 * v4) & 0x3ABACBF6) - 1310;
  LODWORD(xmmword_100273C44) = v5;
  int v6 = v5 ^ 0x1D5D65FB ^ (v5 >> 30);
  int v7 = (1812433253 * v6) ^ 0x3FCDF6FF;
  int v8 = (v6 * ((v3 - 2090004929) & 0x7C92EEE6 ^ 0x580F108E)) & 0x7F9BEDFE;
  *(_DWORD *)(v0 + 4) = v7 + v8 - 577802499 - ((2 * (v7 + v8) - 1067183612) & 0x3ABACBF6);
  return ((uint64_t (*)(uint64_t))((char *)*(&off_10025C670 + (v3 ^ 0x5C)) - 8))(1259726204LL);
}

void sub_1001AB558()
{
}

uint64_t sub_1001AB574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int8x16_t v6 = (int8x16_t)vld1q_dup_f32(v5);
  v7.i64[0] = 0x8000000080000000LL;
  v7.i64[1] = 0x8000000080000000LL;
  return sub_1001AAB9C( v6,  (int8x16_t)vdupq_n_s32(0x7FFFFFFEu),  (int8x16_t)vdupq_n_s32(0x5EE5332Eu),  (int8x16_t)vdupq_n_s32(0x4BAF96A8u),  vdupq_n_s32(0xDA2834AC),  (int8x16_t)vdupq_n_s32(0x666F9D80u),  (int8x16_t)vdupq_n_s32(0x1528143Du),  v7,  a1,  a2,  a3,  a4,  a5);
}

uint64_t sub_1001ABEB8()
{
  STACK[0x508] = v0;
  STACK[0x4C0] = STACK[0x3D8];
  return ((uint64_t (*)(void))STACK[0x370])();
}

uint64_t sub_1001ABECC()
{
  int v0 = 131 * (LODWORD(STACK[0x40C]) ^ 0x66A);
  free((void *)STACK[0x378]);
  LODWORD(STACK[0x400]) = STACK[0x43C];
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + (((LODWORD(STACK[0x400]) == 0) * (((v0 - 653) | 0x100) ^ 0x4DD)) ^ v0))
                            - 8))();
}

void sub_1001ABF6C()
{
  LODWORD(STACK[0x400]) = 0;
  LODWORD(STACK[0x5E0]) = STACK[0x44C];
  STACK[0x5D8] = STACK[0x390];
  STACK[0x4B0] = STACK[0x3A0];
  CFRelease((CFTypeRef)STACK[0x3B0]);
  JUMPOUT(0x1001ABFD0LL);
}

uint64_t sub_1001AC030@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * (((a1 == (v1 ^ 0x3CB ^ (v3 - 175))) * ((v1 - 491438995) & 0x1D4AC6FF ^ 0x6EF)) | v1)))();
}

uint64_t sub_1001AC07C()
{
  BOOL v1 = malloc(0x19uLL) == 0LL;
}

uint64_t sub_1001AC0CC(_BYTE *a1)
{
  STACK[0x3A8] = v4;
  STACK[0x3C0] = v2;
  int v5 = (v1 - 1075) | 0x400;
  int v6 = *(_DWORD *)(qword_1002748C8 + ((v5 + 532528418) & dword_100274AD0));
  unsigned int v7 = ((STACK[0x5D8] ^ v6) & 0x7FFFFFFF) * ((v5 ^ 0x2E) - 1263680679);
  unint64_t v8 = -1263679611 * (v7 ^ HIWORD(v7));
  unint64_t v9 = -1263679611
     * ((-1263679611 * ((a1 ^ v6) & 0x7FFFFFFF)) ^ ((-1263679611 * ((a1 ^ v6) & 0x7FFFFFFF)) >> 16));
  *a1 = byte_10023B820[v8 >> 24] ^ *(_BYTE *)STACK[0x5D8] ^ byte_1002373C0[(v8 >> 24) + 5] ^ byte_1002175F0[v8 >> 24] ^ byte_10023B820[v9 >> 24] ^ byte_1002373C0[(v9 >> 24) + 5] ^ byte_1002175F0[v9 >> 24] ^ v8 ^ v9 ^ (53 * BYTE3(v8)) ^ (53 * BYTE3(v9));
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (v5 ^ 0x37)) - 12LL))();
}

void sub_1001AC1FC()
{
}

uint64_t sub_1001AC204@<X0>(int a1@<W8>)
{
}

uint64_t sub_1001AC240()
{
  BOOL v1 = malloc(0x14uLL) != 0LL;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670 + (int)((v1 * (v0 + 966)) ^ v0)) - (v0 ^ 0xCALL)))();
}

uint64_t sub_1001AC284()
{
  STACK[0x3A8] = v3;
  STACK[0x3C0] = v2;
  int v4 = (v1 + 598) | 6;
  int v5 = dword_100274AD0;
  STACK[0x3E8] = qword_1002748C8;
  int v6 = (v4 - 33) ^ 0x34E;
  int v7 = *(_DWORD *)(STACK[0x3E8] + ((v4 + 532528646) & v5));
  unint64_t v8 = -1263679611
     * ((-1263679611 * ((STACK[0x5D8] ^ v7) & (v6 + 2147483212))) ^ ((-1263679611
                                                                                  * ((STACK[0x5D8] ^ v7) & (v6 + 2147483212))) >> 16));
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * ((1571
}

uint64_t sub_1001AC3CC(int a1, uint64_t a2, int a3, uint64_t a4)
{
  int8x16_t v12 = (_BYTE *)(v11 + (int)((v7 ^ 0xE55E9C9F) + 446784353 + (((v10 - 1283501566) & 0xCFE1FF0B ^ 0x49DC6D37) & a1)));
  return ((uint64_t (*)(void))(*(void *)(v9
                                        + 8LL
                                        * ((1181
}

uint64_t sub_1001AC4AC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return ((uint64_t (*)(void))(*(void *)(v8
                                        + 8LL
                                        * ((((char)(a2 ^ (-33 * a1) ^ *(_BYTE *)(a5 + a1) ^ *(_BYTE *)(a6 + a1) ^ *(_BYTE *)(a7 + a1)) < (char)((v7 + 125) ^ 0x55))
                                          * (149 * (v7 ^ 0x6F7) - 252)) ^ v7))
                            - 12LL))();
}

uint64_t sub_1001AC50C( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int8x16_t v14 = (char *)(v12 + (int)((a8 ^ 0xFB75F77E) + 76155011 + ((2 * a8) & 0xF6EBEEFC)));
  char v15 = *v14;
  return ((uint64_t (*)(void))*(&off_10025C670
                             + ((623
                               * ((char)(*(_BYTE *)(v11 + (v16 >> 24)) ^ v15 ^ *(_BYTE *)((v16 >> 24) + v8 + 5) ^ *(_BYTE *)(a4 + (v16 >> 24)) ^ v16 ^ (BYTE3(v16) * v10)) > 47)) ^ (v13 - 1212))))();
}

uint64_t sub_1001AC7C0( int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  return (*(uint64_t (**)(void))(v8
                              + 8LL * (((a8 >= (a1 - 9)) * ((a1 ^ 0x42C) - 334)) ^ a1)))();
}

uint64_t sub_1001AC808(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v2 + 8LL * ((220 * ((((a2 + 1031) ^ (v3 > 0x40)) & 1) == 0)) ^ a2)))();
}

uint64_t sub_1001AC834( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  return ((uint64_t (*)(void))(*(void *)(v8
                                        + 8LL
}

uint64_t sub_1001AC86C(int a1)
{
  int v6 = v2 - 1120540872;
  char v7 = a1 ^ 0x7B;
  int v8 = a1 ^ v3;
  int v9 = a1 - 1212;
  BOOL v10 = ((v5 + 278073110) & (v6 + 1264753335)) < 0 == v1;
  return ((uint64_t (*)(void))*(&off_10025C670 + (((((v7 + 1) ^ v10) & 1) * (v8 * v4 + 1697)) ^ v9)))();
}

uint64_t sub_1001AC964(uint64_t a1, char a2, int a3, uint64_t a4)
{
  char v13 = ((((v7 - 21) & 0xB3 ^ 0x23) - ((32 * v12 - 64) & 0x60) + (v12 << ((v7 - 53) & 0x3E ^ 0x1A))) ^ 0x30 | (a2 - 73))
      - ((2
        * ((((v7 - 21) & 0xB3 ^ 0x23) - ((32 * v12 - 64) & 0x60) + (v12 << ((v7 - 53) & 0x3E ^ 0x1A))) ^ 0x30 | (a2 - 73))) & 0x8A);
  int8x16_t v14 = (_BYTE *)(v11 + v10 - 608584540);
  unint64_t v15 = ((((v14 ^ a3) & 0x7FFFFFFF) * v5) ^ ((((v14 ^ a3) & 0x7FFFFFFF) * v5) >> 16)) * v5;
  _BYTE *v14 = v15 ^ (BYTE3(v15) * v6) ^ *(_BYTE *)(v8 + (v15 >> 24)) ^ *(_BYTE *)((v15 >> 24) + v4 + 5) ^ *(_BYTE *)(a4 + (v15 >> 24)) ^ 0x45 ^ (v13 + 69);
  return ((uint64_t (*)(void))(*(void *)(v9
                                        + 8LL
                                        * (int)((489
                                               * (((((~(unint64_t)(v10 - 608584539) + v7) ^ (~(v10 - 608584539) + v7))
}

uint64_t sub_1001ACAA0@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * (a1 ^ (87 * (LODWORD(STACK[0x400]) != 0))))
                            - ((a1 + 1371388739) & 0xAE4246FF)
                            + 1639LL))();
}

void sub_1001ACAE0()
{
}

uint64_t sub_1001ACAF0@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))*(&off_10025C670
                             + ((1618 * (((STACK[0x5D8] == 0) ^ (-73 * ((a1 - 101) ^ 0xCE))) & 1)) ^ (a1 - 869))))();
}

uint64_t sub_1001ACB34@<X0>(void *a1@<X0>, int a2@<W8>)
{
  int v5 = a2 ^ 0x6A8;
  free(a1);
  STACK[0x5D8] = v3;
  LODWORD(STACK[0x5E0]) = v4 + 25;
  LODWORD(STACK[0x5D0]) = 65;
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + (((*v2 == 1) * (((v5 - 1357601729) & 0x50EB55F1) + 361)) ^ (v5 - 1487)))
                            - 8))();
}

uint64_t sub_1001ACC48()
{
  unint64_t v2 = *(unsigned __int8 *)STACK[0x3F0];
  STACK[0x3D0] = v2;
  int v3 = (((_DWORD)v2 << (v0 + 97)) & 0x1BE) + ((((v0 + 819821143) & 0xCF2285FB) - 547361812) ^ v2);
  unint64_t v4 = STACK[0x3F8];
  LODWORD(STACK[0x3E8]) = v3;
  LODWORD(v4) = v4 - v3;
  LODWORD(STACK[0x3CC]) = v4;
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((1690 * ((((_BYTE)v4 + 14) & 0xF) == 0)) ^ v0)) - 8LL))();
}

uint64_t sub_1001ACCD0()
{
  int v2 = LODWORD(STACK[0x3E8]) + 2080249850;
  unint64_t v3 = STACK[0x410] + 3;
  STACK[0x348] = STACK[0x4B0];
  LODWORD(STACK[0x534]) = 488795824;
  STACK[0x3E0] = v3;
  if (v3) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v2 == 1532888281;
  }
  int v5 = v4;
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * (v0 ^ (489 * v5))) - 8LL))();
}

uint64_t sub_1001ACD30@<X0>(int a1@<W8>)
{
  unint64_t v2 = (v1 - 210) | 0x64Eu;
  unint64_t v3 = STACK[0x348];
  BOOL v4 = (char *)&STACK[0x590] + STACK[0x348] + v2 - 0x1C5F64B704023D6ELL;
  STACK[0x3A0] = (unint64_t)(v4 - 1647);
  STACK[0x3F8] = (unint64_t)(v4 - 1392);
  STACK[0x350] = (unint64_t)(v4 - 1137);
  STACK[0x3F0] = (unint64_t)(v4 - 1119);
  unsigned int v5 = 79 * ((v1 + 173) ^ 0x1AB);
  LODWORD(STACK[0x400]) = v5 + 687711537;
  uint64_t v6 = dword_100274AD0 & 0x1FBDC124;
  STACK[0x3D8] = v2;
  BOOL v7 = (v5 ^ 0x57506397LL) + (unint64_t)((316 * ((v1 + 173) ^ 0x1AB)) ^ 0xFACu) + 1431377649 < (a1 + 1260072266);
  return ((uint64_t (*)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*(&off_10025C670 + (int)(((2 * v7) | (16 * v7)) ^ v5)))( v6,  (char *)&STACK[0x590] + v3 + v2 - 0x1C5F64B704024742LL,  -a1 + 1636191441LL,  -869LL,  2862755298LL,  4012LL,  210LL,  1464886085LL);
}

uint64_t sub_1001ACE90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v12 = v6 ^ v8;
  unsigned int v13 = ((*(_DWORD *)(v5 + a1) ^ (v7 + a4 + 869)) & 0x7FFFFFFF) * v4;
  unint64_t v14 = (v13 ^ HIWORD(v13)) * (v12 ^ (v4 - 352));
  int v15 = byte_10023B820[v14 >> 24] ^ *(unsigned __int8 *)(v7 + a4 + 869) ^ byte_1002373C0[(v14 >> 24) + 5] ^ byte_1002175F0[v14 >> 24] ^ v14 ^ ((v14 >> 24) * v11);
  *(_BYTE *)(a2 + a4 + (v12 + 453) + 869) = *(_BYTE *)(v9 + (v12 + 453) + a4) ^ (v15 - (v10 & (2 * v15)) + 100) ^ (v12 + 36);
  return ((uint64_t (*)(void))*(&off_10025C670 + (v12 | (31 * (a4 == -615)))))();
}

void sub_1001AD0A4()
{
}

void sub_1001AD0B0()
{
  STACK[0x4B0] = STACK[0x348];
  free(v1);
  STACK[0x5D8] = 0LL;
  LODWORD(STACK[0x5E0]) = v0;
  JUMPOUT(0x10018CBD8LL);
}

uint64_t sub_1001AD0C0@<X0>(int a1@<W8>)
{
  int v2 = v1 - 168;
  unsigned int v3 = (v1 + 1283593610) & 0xB37DE8FD;
  int v4 = v1 - 140;
  int v5 = a1 + LODWORD(STACK[0x3E8]) + 1918438168;
  int v6 = (char *)&STACK[0x590] + STACK[0x348] - 0x1C5F64B704023D6ELL;
  STACK[0x4B0] = STACK[0x348] + 1088;
  sub_1001E9C38(asc_1002391A0, v6 + 959, 0x40uLL);
  STACK[0x400] = (unint64_t)(v6 + 1023);
  uint64_t v7 = sub_1001E9C38(asc_100226198, v6 + 1023, 0x40uLL);
  return ((uint64_t (*)(char *))*(&off_10025C670
                                          + (int)(v2 ^ 0x142 ^ (625
                                                              * (((v2 ^ (v5 + 1287699256) ^ v4 ^ (v3 - 960)) & (v5 + 1287699256 - v2) | v2 & ~(v5 + 1287699256)) >> 31)))))(v7);
}

uint64_t sub_1001AD1A8@<X0>(int a1@<W8>)
{
  int v3 = (v1 | 0x283) - 87;
  LODWORD(STACK[0x534]) = 488795743;
  *(_BYTE *)(v2 + 640) = *(_BYTE *)(STACK[0x3A0] + 0u % (a1 + v3));
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + ((215 * ((((v1 | 0x283) + 373663780) & 0xE9BA577D) != 1143LL)) ^ v3))
                            - 12))();
}

uint64_t sub_1001AD270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int16 v12 = (v11 - 377) | 0x37;
  unsigned int v13 = (39651 * (unsigned __int16)((v12 ^ 0xF457) + v10)) >> 16;
  int v14 = *(unsigned __int8 *)(v9 + (v10 + v7 + 142) % 0x13Fu);
  uint64_t v15 = (unsigned __int16)((v12 ^ 0xF457)
                         + v10
                         - 319
                         * ((unsigned __int16)(v13
                                                              + ((unsigned __int16)(((v12 ^ 0xF457) + v10 - v13) & 0xFFFE) >> 1)) >> 8));
  HIDWORD(v16) = v14 ^ 0x10;
  LODWORD(v16) = (v14 ^ 0x60) << 24;
  int v17 = (v16 >> 29) - 16 * ((v16 >> 29) >> 3);
  HIDWORD(v16) = *(unsigned __int8 *)(v9 + (v10 + v7 + 98) % 0x13Fu);
  LODWORD(v16) = (HIDWORD(v16) ^ 0x70) << 24;
  unsigned int v18 = ((v16 >> 27) ^ 0xFFFFFFED)
      + ((2 * (v16 >> 27)) & 0xFFFFFFDA)
  HIDWORD(v16) = *(unsigned __int8 *)(v9 + (v10 + v7) % 0x13Fu);
  LODWORD(v16) = (HIDWORD(v16) ^ 0x70) << 24;
  int v19 = ((v16 >> 25) ^ 0xFFFFFF88) - ((2 * (v16 >> 25)) & 0xFFFFFFEF) + (v18 ^ 0xFFFFFFFE) + 4 * (v18 >> 1) + 1;
  int32x4_t v20 = (uint64_t (*)(void))(*(void *)(a7 + 8LL * ((121 * (v10 + 1 != v8 + 1276)) ^ v11)) - 12LL);
  *(_BYTE *)(v9 + v15) = v19 - ((2 * v19 - 14) & 0xE0) - 23;
  return v20();
}

uint64_t sub_1001AD3BC@<X0>(char a1@<W3>, int a2@<W8>)
{
  int v6 = 9 * (a2 ^ 0x1FC);
  LODWORD(STACK[0x3E8]) = 0;
  int v7 = v3[109] ^ 0x70;
  LODWORD(STACK[0x340]) = v6;
  int v8 = v7 - ((v7 << (a2 + 57 + v6 + 110)) & 0x8C) + 1728710214;
  int v9 = (v3[21] ^ 0x70) - ((2 * (v3[21] ^ 0x70)) & 0x1F4) - 743622918;
  LOBYTE(v6) = (v9 ^ 0xFA | v8 ^ 0x46) - 2 * ((v9 ^ 0xFA | v8 ^ 0x46) & 1) - 127;
  unsigned int v10 = ((v6 & 2) + (v6 & 0x73 ^ 0xFFFFFFCE) + (v6 & 2 | 0x7CD75379) + 1) ^ 0x78FEC359;
  int v11 = (((2 * v10) & 0x31BE46EC) - v10 + 656465033) ^ 0x23094C99 | (((v9 ^ 0x430802FA) & (v8 ^ 0x646))
                                                                   - ((2 * ((v9 ^ 0x430802FA) & (v8 ^ 0x646))) & 0x3DC7B2F2)
                                                                   + 1591990649) ^ 0x5EE3D979;
  unsigned int v12 = (v11 - ((2 * v11) & 0x6AE283A) - 1017703395) ^ 0xC357141D;
  int v13 = ((v12 * v12 - ((2 * v12 * v12) & 0xD5EF1AA) + 112163029) ^ 0x6AF78D5) * v12;
  unsigned int v14 = ((2 * v13) & 0xE7E415FE) + (v13 ^ 0xF3F20AFF);
  LOBYTE(v10) = *(_BYTE *)(v5 + (v3[40] & 0x3F ^ 0x30LL)) & 0x75 ^ 0x10;
  LOBYTE(v10) = (v10 - ((2 * v10) & 0xE0) + 112) ^ 0x71;
  LOBYTE(vqmemcpy(v1, "/ProvenanceV2", 13) = (((2 * v10) | 0xF8) - v10 + 4) ^ 0xAC | ((v3[352] & 0x82)
                                                       + (v3[352] & 0x8A ^ 0xF7)
                                                       + (v3[352] & 0x82 | 0x18)
                                                       + 1) ^ 0x1A;
  LOBYTE(v9) = v3[355];
  unint64_t v15 = STACK[0x400];
  char v16 = (*(_BYTE *)(STACK[0x400] + (v3[52] & 0x3F ^ 0x30LL)) ^ 0x4B) & (v9 ^ 0x4B);
  LOBYTE(v9) = (v16 - ((2 * v16) & 0xF7) + 123) ^ 0x7B | ((((v9 & 0xB8 ^ 0xB0)
                                                          + (v9 & 0xA8 ^ 0xC)
                                                          - ((v9 & 0xB8 ^ 0xB0) & 0xEF)) ^ 0x6D)
                                                        - 1) ^ 0xC0;
  LOBYTE(vqmemcpy(v1, "/ProvenanceV2", 13) = (v13 - ((2 * v13) & 0x44) + 34) ^ 0x22;
  LOBYTE(v9) = (v9 - ((2 * v9) & 0xC3) + 97) ^ 0x61;
  char v17 = ((v13 | v9) - ((2 * (v13 | v9)) & 0xFB) + 61) & 0x2B ^ 0x29;
  LOBYTE(v9) = (v3[94] ^ 0x70)
             - ((v17 - ((2 * v17) & 0xFD) - 6) ^ 0xFA | ((v13 & v9) - ((2 * (v13 & v9)) & 0x16) - 117) ^ 0x8B);
  v3[94] = v9 - ((2 * v9) & 0xE0) + 112;
  LOBYTE(v9) = (127 - ((byte_1002147A0[v3[85] & 0x3F ^ 0x30LL] & 0x40 | v3[139] & 0x36) ^ 0x30)) & 0xF7 ^ 0x7F;
  int v18 = *(unsigned __int8 *)(v5 + (v3[157] & 0x3F ^ 0x30LL));
  v3[64] ^= 0xD0 ^ (v9 - ((2 * v9) & 0xA0) - 48);
  LODWORD(STACK[0x398]) = (v18 ^ 0xFFFFFFB4) - ((2 * (v18 ^ 0xFFFFFFB4) - 4) & 0xFFFFFFF0);
  unsigned int v19 = ~v3[125] & 0xFFFFFFC9;
  unsigned int v20 = ((((2 * v19) | 0x3C) - v19 - 30) & 0x43 ^ 0x41)
      + ((((2 * v19) | 0x3C) - v19 - 30) ^ 0xFFFFFFAE)
      - (((((2 * v19) | 0x3C) - v19 - 30) ^ 0xFFFFFFAE) & 0x43);
  LODWORD(STACK[0x390]) = (v20 & 0xFFFFFFFD ^ 0x7A) - ((2 * v20) & 8);
  int v21 = *(unsigned __int8 *)(v5 + (v3[104] & 0x3F ^ 0x30LL)) ^ 0x4B;
  int v22 = v3[387];
  unsigned int v23 = (v22 & 0xC | v22 & 0x32 ^ 0xFFFFFFA1) - 1;
  int v24 = (126 - (v22 & 0x21) - (~v22 | 0x7F)) ^ 0x7E;
  unsigned int v25 = (((v24 | v23 ^ 0xFFFFFF94) - ((2 * (v24 | v23 ^ 0xFFFFFF94)) & 0xFFFFFFAE) - 41) ^ 0xFFFFFFD7) & ((v21 * v21 - ((2 * v21 * v21) & 0xFFFFFFBF) - 33) ^ 0xFFFFFFDF);
  unsigned int v26 = v25 + (~(2 * v25) | 0x59);
  v3[327] = -73;
  LOBYTE(v25) = (v3[52] ^ 0x8F) + (v3[175] ^ 0x70) + 1;
  v3[175] = v25 - ((2 * v25) & 0xE0) + 112;
  unsigned int v27 = 205 * (*(unsigned __int8 *)(v15 + (v3[44] & 0x3F ^ 0x30LL)) ^ 0x4B);
  LODWORD(STACK[0x388]) = (v27 >> 10) - ((v27 >> 9) & 0x54);
  v3[100] = (v3[100] ^ 0x70) - ((2 * (v3[100] ^ 0x70) - 6) & 0xE0) + 109;
  LOBYTE(v27) = (v3[386] ^ 0x4B) + (*(_BYTE *)(v5 + (v3[17] & 0x3F ^ 0x30LL)) ^ 0x4B);
  unsigned __int8 v28 = byte_1002147A0[v3[57] & 0x3F ^ 0x30LL];
  v3[386] = v27 - ((2 * v27) & 0x96) + 75;
  LOBYTE(v23) = (v3[415] & 0x8C ^ v4) - ((2 * (v3[415] & 0x8C ^ v4)) & 0x10) - 101;
  LOBYTE(v27) = ((v23 ^ 0x34) + ((2 * v23) | 0xB6) - 90) ^ 0x8B | (((2 * (v28 & 0x73 ^ 0xB4)) & 0xF9)
                                                                 - (v28 & 0x73 ^ 0xB4)
                                                                 - 125) ^ 0x15;
  unsigned int v29 = (v3[101] ^ 0x70) - ((v27 + (~(2 * v27) | 0x53) + 87) ^ 0x56u) / 3;
  v3[101] = v29 - ((2 * v29) & 0xE0) + 112;
  LOBYTE(v29) = byte_1002147A0[v3[217] & 0x3F ^ 0x30LL];
  unsigned int v30 = (((v29 & 0x75 ^ 0xFFFFFFAA) - ((v29 & 0x75 ^ 0xFFFFFFAA) >> 5 << 6) + 96) ^ 0x60) & (v3[398] ^ 0x4B);
  unsigned int v31 = (v30 - ((2 * v30) & 0x2A) - 107) ^ 0xFFFFFF95 | ((((v29 & 0x8A ^ 0x3F) - 1) & 0xCCCCCCCC ^ 8)
                                                       + (((v29 & 0x8A ^ 0x3F) - 1) ^ 0xFFFFFF94)
                                                       - ((((v29 & 0x8A ^ 0x3F) - 1) ^ 0xFFFFFF94) & v4)) ^ 0xFFFFFFAC;
  unsigned int v32 = (v31 - ((2 * v31) & 0xFFFFFFCA) + 101) ^ 0x65 | (v3[7] >> 1) ^ 0x38;
  LOBYTE(v3fseek(v0, 0LL, 2) = v32 + (v3[249] ^ 0x70) - 2 * v32;
  v3[249] = v32 + (~(2 * v32) | 0x1F) + 113;
  v3[30] ^= 0x58u;
  LOBYTE(v29) = *(_BYTE *)(v5 + (v3[241] & 0x3F ^ 0x30LL)) & 0xFC ^ 0xB8;
  LOBYTE(v3fseek(v0, 0LL, 2) = ((v29 | 0xCF) - (v29 | 0x30) + 48) ^ 0x3F | ((v3[383] & 3 ^ 1) - ((2 * v3[383]) & 4) + 38) ^ 0x24;
  LOBYTE(v3fseek(v0, 0LL, 2) = (v32 - ((2 * v32) & 0x8C) - 58) ^ 0xC6;
  v3[215] = v32 * v32 * v32 - ((2 * v32 * v32 * v32) & 0xE0) + 112;
  LODWORD(STACK[0x3B8]) = v14;
  v3[446] = *(_BYTE *)(v5 + ((63 - (_BYTE)v14) & 0x3F));
  int v33 = (-(~*(unsigned __int8 *)(v5 + (v3[13] & 0x3F ^ 0x30LL)) & 0x2C) - 20) ^ 0x2C;
  int v34 = ((((_BYTE)v33 + 35 - ((2 * (_BYTE)v33) & 0x40)) & 0x7C ^ 0xC7) - ((2 * (v33 + 35)) & 0x70) + 55) ^ 0x39;
  char v35 = (v3[146] ^ 0x5F) - 47 + ((2 * (v3[146] ^ 0x20)) & 0x5E);
  char v36 = (((v35 * v35) ^ 0xBD) - 5 + ((2 * v35 * v35) & 0x7A) + 72) * v35;
  char v37 = ((2 * v36) & 0xC2) + (v36 ^ 0xE1);
  unsigned int v38 = (v34 - ((2 * v34) & 0x1D4) + 1325568746) ^ 0x4F0292EA;
  v3[381] = ((v38 << ((v37 - 1) & 7)) - ((2 * (v38 << ((v37 - 1) & 7))) & 0xF8) - 4) ^ ((v38 >> ((1 - v37) & 7))
                                                                                      - ((2 * (v38 >> ((1 - v37) & 7))) & 0x60)
                                                                                      - 80) ^ 7;
  int v39 = (v3[131] ^ 0x70) - ((2 * (v3[131] ^ 0x70)) & 0x1D6) + 2052354795;
  int v40 = (v3[393] ^ 0x4B) - ((2 * (v3[393] ^ 0x4B)) & 0x62) - 1066648783;
  unsigned int v41 = (((v40 ^ 0xC06C3B31 | v39 ^ 0x7A5472EB) - ((2 * (v40 ^ 0xC06C3B31 | v39 ^ 0x7A5472EB)) & 0x997C6) + 314339) ^ 0x4CBE3) & (((v3[400] ^ 0x4B) - ((2 * (v3[400] ^ 0x4B)) & 0x74) - 949452998) ^ 0xC7687F3A);
  unsigned int v42 = (v41 - ((2 * v41) & 0x5E40FE3C) + 790658846) ^ 0x2F207F1E | (((v40 ^ 0x40442331) & (v39 ^ 0x12EB))
                                                                   - ((2 * ((v40 ^ 0x40442331) & (v39 ^ 0x12EB))) & 0x121D19A4)
                                                                   - 1995535150) ^ 0x890E8CD2;
  LOBYTE(v3_Block_object_dispose(va, 8) = *(_BYTE *)(v15 + (v3[220] & 0x3F ^ 0x30LL));
  LOBYTE(v3_Block_object_dispose(va, 8) = 2 * (~(_BYTE)v38 & 3) + (v38 & 3 ^ 0xEC);
  unsigned int v43 = (v42 - ((2 * v42) & 0x1E101782) - 821556287) ^ 0xCF080BC1;
  int v44 = ((v43 >> (v38 + 21)) - ((2 * (v43 >> (v38 + 21))) & 0x70) + 56) ^ ((v43 << (-13 - v38))
                                                                         - ((2 * (v43 << (-13 - v38))) & 0x50)
                                                                         + 40);
  LOBYTE(v44) = (v3[330] ^ 0x4B) + (v44 ^ 0x6E) + ((2 * v44) & 0xFC ^ 0x20) - 126;
  v3[330] = v44 - ((2 * v44) & 0x96) + 75;
  LOBYTE(v44) = *(_BYTE *)(v15 + (v3[27] & 0x3F ^ 0x30LL));
  LOBYTE(v44) = (v44 ^ 0x15) - 94 + ((2 * (v44 ^ 0x4A)) & 0xBC);
  LOBYTE(v44) = ((2 * v44 * v44) & 0xF6) + ((v44 * v44) ^ 0xFB);
  unsigned int v45 = (-((v3[10] >> 1) ^ 0x38) - 1068180609) ^ 0xC054DB7F;
  int v46 = ((v45 >> ((v44 + 5) & 7)) - ((2 * (v45 >> ((v44 + 5) & 7))) & 0xC4) + 226) ^ ((v45 << ((3 - v44) & 7))
                                                                                    - ((2 * (v45 << ((3 - v44) & 7))) & 0x9C)
                                                                                    + 206);
  LOBYTE(v46) = (v3[67] ^ 0x70) + (v46 ^ 0xBE) + (a1 & (2 * v46) ^ 0xA7) + 111;
  v3[67] = v46 - ((2 * v46) & 0xE0) + 112;
  LOBYTE(v46) = byte_1002147A0[v3[136] & 0x3F ^ 0x30LL];
  LOBYTE(v46) = (v46 & 0xAC ^ 0x85) + (v3[195] ^ 0x70) + ((2 * v46) & 0x58 ^ 0x74) - 63;
  v3[195] = v46 - ((2 * v46) & 0xE0) + 112;
  unsigned int v47 = (*(unsigned __int8 *)(v5 + (v3[182] & 0x3F ^ 0x30LL)) ^ 0x4B) + 13;
  int v48 = (v47 ^ 0x7E) + 4 * (v47 >> 1);
  LOBYTE(v47) = *(_BYTE *)(v5 + (v3[196] & 0x3F ^ 0x30LL)) ^ 0x4B;
  LOBYTE(v45) = *(_BYTE *)(v15 + (v3[21] & 0x3F ^ 0x30LL)) ^ 0x4B;
  char v49 = ((v45 | v47) - ((2 * (v45 | v47)) & 0xF7) + 59) & 0x49 ^ 0x48;
  char v50 = (((2 * v49) | 0xA) - v49 - 5) ^ 0x77;
  LOBYTE(v47) = (((2 * v50) & 4) - v50 - 3) ^ 0xCE | ((v45 & v47) - ((2 * (v45 & v47)) & 0x14) - 118) ^ 0x8A;
  LOBYTE(v47) = (*(_BYTE *)(v15 + (v3[127] & 0x3F ^ 0x30LL)) ^ 0x4B) + (v47 ^ 0x2C) - ((2 * v47) & 0xA6) - 44;
  LOBYTE(v47) = (v3[423] ^ 0x4B) + (v47 ^ 0x73) + ((2 * v47) & 0xE7) - 115;
  v3[423] = v47 - ((2 * v47) & 0x96) + 75;
  unsigned int v51 = 171 * (byte_1002147A0[v3[56] & 0x3F ^ 0x30LL] ^ 0x4C);
  int v52 = ((v51 >> 8) & 0x8E) + ((v51 >> 9) ^ 0x47);
  LOBYTE(v51) = *(_BYTE *)(v15 + (v3[65] & 0x3F ^ 0x30LL)) | 0xFD;
  LOBYTE(v51) = (v51 + ((2 * v51 - 82) ^ 0xBC) - 7) & (v3[140] ^ 0x70);
  v3[369] = v51 - ((2 * v51) & 0x14) + 75;
  v3[151] = 112;
  LOBYTE(v51) = (((2 * (v3[134] & 0x89 ^ 0x6F)) | 0x5C) - (v3[134] & 0x89 ^ 0x6F) + 82) ^ 0x81;
  LOBYTE(v51) = (((2 * v51) & 0xA6) - v51 - 84) & 0x8B ^ 0xFC;
  unsigned __int8 v53 = (v51 - ((2 * v51) & 0x52) - 87) ^ 0xA9;
  v3[321] = v53 / 5u - (((205 * v53) >> 9) & 0x16) + 75;
  unsigned int v54 = 171 * (v3[339] ^ 0x4B);
  int v55 = (v54 >> 9) - ((v54 >> 8) & 0x28) - 44;
  LOBYTE(v55) = ((v55 & 0x4D ^ 8) + (v55 & 0x49 ^ 0xC1) - ((v55 & 0x4D ^ 8) & 0xFB)) ^ 0x69;
  char v56 = (*(_BYTE *)(v5 + (v3[39] & 0x3F ^ 0x30LL)) ^ 0x4B) + 50;
  LOBYTE(v55) = (((2 * v55) | 0x18) - v55 + 116) ^ 0x60 | ((v56 ^ 3) + 2 * (v56 & 3) + 61) & 0x32;
  LOBYTE(v55) = (v3[330] ^ 0x4B) + (v55 ^ 0x5B) + ((2 * v55) & 0xB6) - 91;
  v3[330] = v55 - ((2 * v55) & 0x96) + 75;
  char v57 = 2 * (~v3[322] & 3) + (v3[322] & 7);
  unsigned int v58 = ((v2 >> ((3 - v57) & 7)) - ((0x6Eu >> ((3 - v57) & 7)) & 0x2E) - 2019762281) ^ ((v2 << (v57 - 3))
                                                                                      - ((110 << (v57 - 3)) & 0x58C689DC)
                                                                                      + 744703214);
  unsigned int v59 = (((v58 & 0xFFFFFFD2 ^ 0xABFF9B7D) - ((2 * (v58 & 0xFFFFFFD2 ^ 0xABFF9B7D)) & 0x124) + 649) ^ 0x29B) & (((v3[401] ^ 0x4B) - ((2 * (v3[401] ^ 0x4B)) & 0x5E) - 825556433) ^ 0xCECB022F);
  unsigned int v60 = (v59 - ((2 * v59) & 0x7D885DF4) + 2126786298) ^ 0x7EC42EFA | (((2 * (v58 & 0x2D ^ 0x44C4C029)) & 0x8188004A)
                                                                    - (v58 & 0x2D ^ 0x44C4C029)
                                                                    - 1526605304) ^ 0xE1C51A08;
  LOBYTE(v45) = byte_1002147A0[v3[201] & 0x3F ^ 0x30LL];
  LODWORD(STACK[0x380]) = ((v26 + 84) ^ 0x18)
                        + ((v60 - ((2 * v60) & 4) + 2) ^ 0xFFFFFFBC)
                        + ((2 * (v60 - ((2 * v60) & 4) + 2)) & 0x7C ^ 4);
  LOBYTE(v60) = (v3[237] ^ 0x70) + (v45 ^ 0x55);
  v3[237] = v60 - ((2 * v60) & 0xE0) + 112;
  int v61 = *(unsigned __int8 *)(v15 + (v3[120] & 0x3F ^ 0x30LL)) ^ 0x4B;
  int v62 = (v3[400] ^ 0x4B) - ((2 * (v3[400] ^ 0x4B)) & 0x1B6) + 1071421659;
  int v63 = v61 - ((2 * v61) & 0x4C) + 701212966;
  unsigned int v64 = (((v63 ^ 0x29CBA926 | v62 ^ 0x3FDC98DB) - ((2 * (v63 ^ 0x29CBA926 | v62 ^ 0x3FDC98DB)) & 0x2E0) + 368) ^ 0x170) & (((v3[392] ^ 0x4B) - 580314457 + (~(2 * (v3[392] ^ 0x4B)) | 0xFFFFFEB1) + 1) ^ 0xDD691AA7);
  unsigned int v65 = (v64 - ((2 * v64) & 0x606) - 1567366397) ^ 0xA293E303 | (((v63 ^ 0x29C88926) & (v62 ^ 0x18DB))
                                                               - ((2 * ((v63 ^ 0x29C88926) & (v62 ^ 0x18DB))) & 0x4C61545E)
                                                               - 1506760145) ^ 0xA630AA2F;
  unsigned int v66 = ((v3[436] ^ 0x4B) - ((2 * (v3[436] ^ 0x4B)) & 0x1A) - 1051360755) ^ 0xC155820D;
  int v67 = v65 - ((2 * v65) & 0x206621F8) - 801959684;
  unsigned int v68 = ((v67 ^ 0xD03310FC | v66) - ((2 * (v67 ^ 0xD03310FC | v66)) & 0x78) + 60) & 0x4F ^ 0x42;
  unsigned int v69 = (((2 * v68) & 0x94) - v68 - 1112210795) ^ 0xB494619B;
  unsigned int v70 = (((2 * v69) | 0xB0E9FE54) - v69 - 1484062506) ^ 0x51559C6A | (((v67 ^ 0xFC) & v66)
                                                                    - ((2 * ((v67 ^ 0xFC) & v66)) & 0x2B4F411C)
                                                                    - 1784176498) ^ 0x95A7A08E;
  LODWORD(STACK[0x370]) = v70 - ((2 * v70) & 0xFA);
  LODWORD(STACK[0x3C8]) = v48;
  int v71 = v3[327];
  int v72 = ((*(unsigned __int8 *)(v5 + (((_BYTE)v48 + 2) & 0x3F)) >> 1) ^ 0x25) & (v71 ^ 0x4B);
  LOBYTE(v71) = ((((v3[208] ^ 0x70) + 43) ^ 0xBD) + ((2 * ((v3[208] ^ 0x70) + 43)) & 0x7A) + 67) & (v71 ^ 0xB4);
  LOBYTE(v7fseek(v0, 0LL, 2) = (v71 - ((2 * v71) & 0x74) + 58) ^ 0x3A | (v72 + (~(2 * v72) | 0xB3) - 89) ^ 0xA6;
  LOBYTE(v7fseek(v0, 0LL, 2) = (v3[335] ^ 0x4B) + (v72 ^ 0x1E) + ((2 * v72) & 0x3C) - 30;
  v3[335] = v72 - ((2 * v72) & 0x96) + 75;
  LOBYTE(v7fseek(v0, 0LL, 2) = *(_BYTE *)(v15 + (v3[162] & 0x3F ^ 0x30LL));
  LOBYTE(v71) = (((v72 & 0x81 ^ 0x7F) - 2 * ((v72 & 0x81 ^ 0x7F) & 1) - 99) ^ 0x65) & (v3[323] ^ 0x4B);
  LOBYTE(v7fseek(v0, 0LL, 2) = (((2 * (v72 & 0x7E ^ 0x54)) | 0x1E) - (v72 & 0x7E ^ 0x54) + 113) ^ 0x8B;
  LOBYTE(v7fseek(v0, 0LL, 2) = (v71 - ((2 * v71) & 0x4E) - 89) ^ 0xA7 | (v72 - ((2 * v72) & 0xF7) + 123) ^ 0x61;
  v3[394] ^= (((v72 - ((2 * v72) & 0xF0) + 120) & 0xFE) >> 1) ^ 0x3C;
  LOBYTE(v7fseek(v0, 0LL, 2) = *(_BYTE *)(v5 + (v3[65] & 0x3F ^ 0x30LL)) ^ 0x4B;
  v3[356] ^= (v72 - ((2 * v72 + 34) & 0x22) - 62) ^ 0xBF;
  LOBYTE(v7fseek(v0, 0LL, 2) = (v3[103] ^ 0x8F) + (v3[436] ^ 0x4B) + 1;
  v3[436] = v72 - ((2 * v72) & 0x96) + 75;
  LOBYTE(v7fseek(v0, 0LL, 2) = (v3[366] ^ 0x4B) * (v3[366] ^ 0x4B);
  LOBYTE(v2fseek(v0, 0LL, 2) = (v3[343] ^ 0x4B) - 45 * (2 * (v72 & 0x3F) + (v72 ^ 0x3F));
  LOBYTE(v7fseek(v0, 0LL, 2) = *(_BYTE *)(v15 + (v3[173] & 0x3F ^ 0x30LL));
  LOBYTE(v7fseek(v0, 0LL, 2) = ((2 * v72) ^ 0x97) + ((4 * v72) ^ 0xD3) + (v3[227] ^ 0x70);
  v3[227] = v72 - ((2 * v72) & 0xE0) + 112;
  LODWORD(STACK[0x3B0]) = v52;
  v3[383] ^= *(_BYTE *)(v15 + (((_BYTE)v52 + 57) & 0x3F)) ^ 0x4B;
  LOBYTE(v7fseek(v0, 0LL, 2) = (v3[26] ^ 0x70) * (v3[26] ^ 0x70);
  LOBYTE(v7fseek(v0, 0LL, 2) = (v3[350] ^ 0x4B) + (v72 ^ 0xA7) - ((2 * v72) & 0xB0) + 89;
  v3[350] = v72 - ((2 * v72) & 0x96) + 75;
  char v73 = *(_BYTE *)(v5 + (v3[136] & 0x3F ^ 0x30LL)) ^ 0x4B;
  LOBYTE(v71) = (v3[385] ^ 0x4B) - ((2 * (v3[385] ^ 0x4B)) & 0x64) - 78;
  char v74 = v73 - ((2 * v73) & 0x9E) + 79;
  LOBYTE(v7fseek(v0, 0LL, 2) = (((v74 ^ 0x4F | v71 ^ 0xB2) - ((2 * (v74 ^ 0x4F | v71 ^ 0xB2)) & 0xB4) - 38) ^ 0xDA) & (((v3[378] ^ 0x4B) - ((2 * (v3[378] ^ 0x4B)) & 0x56) - 85) ^ 0xAB);
  LOBYTE(v7fseek(v0, 0LL, 2) = (v72 - ((2 * v72) & 0x76) - 69) ^ 0xBB | (((v74 ^ 0x4F) & (v71 ^ 0xB2))
                                                        - ((2 * ((v74 ^ 0x4F) & (v71 ^ 0xB2))) & 0x2A)
                                                        - 107) ^ 0x95;
  char v75 = v72 - ((2 * v72) & 0xDE) + 111;
  LOBYTE(v69) = ((v75 & 0x21 ^ 0x63) - (v75 & 0x21) + (v75 & 0xBD ^ 0x88)) ^ 0xA6;
  int v76 = (v3[374] >> 1) ^ 0x25;
  LOBYTE(v71) = (((v75 & 0xC2 ^ 0x7F) + ((2 * (v75 & 0xC2 ^ 0x7F)) & 0x80 ^ 0xE5) + 78) ^ 0x4D) & ((v76
                                                                                                  - ((2 * v76) & 0x28)
                                                                                                  + 20) ^ 0x14);
  LOBYTE(v71) = (v71 - ((2 * v71) & 0xF0) + 120) ^ 0x78 | (v69 - ((2 * v69) & 0x26) + 19) ^ 0x73;
  v3[358] = (v71 - ((2 * v71) & 0x5E) + 47) ^ 0x64;
  int v77 = (v3[422] ^ 0x4B) - ((2 * (v3[422] ^ 0x4B)) & 0x62) - 726740943;
  int v78 = ((v77 & 0x8A ^ 0x88) - ((2 * (v77 & 0x8A ^ 0x88)) & 0xFC) - 875973553) ^ 0x4B9DD28E;
  int v79 = (((v3[92] ^ 0x70) - ((2 * (v3[92] ^ 0x70)) & 0x34) + 970972698) ^ 0x108EDE1A) & (v77 ^ 0x7CE);
  int v80 = (v78 - ((2 * v78) & 0x808174) - 1175959366) ^ 0x39BC2EF3 | (v79 - ((2 * v79) & 0x774929F0) + 1000641784) ^ 0x3BA494F8;
  unsigned int v81 = 205 * (v3[155] ^ 0x70);
  LOBYTE(v81) = ((v81 >> 10) - ((v81 >> 9) & 2) + 1) & 7;
  LOBYTE(v81) = ((((v81 | 0x72) - (v81 | 0x8D) - 115) & 9 ^ 0x88)
               + (((v81 | 0x72) - (v81 | 0x8D) - 115) ^ 0x33)
               - ((((v81 | 0x72) - (v81 | 0x8D) - 115) ^ 0x33) & 9)) ^ 0xC9;
  LOBYTE(v81) = ((2 * v81) & 0xC6) + (v81 ^ 0xE3);
  unsigned int v82 = (v80 - ((2 * v80) & 0x340CF324) - 1710851694) ^ 0x9A067992;
  int v83 = ((v82 >> ((3 - v81) & 7)) - ((2 * (v82 >> ((3 - v81) & 7))) & 0x66) + 51) ^ ((v82 << (v81 + 29))
                                                                                   - ((2 * (v82 << (v81 + 29))) & 0xE8)
                                                                                   + 244);
  LOBYTE(v83) = (v3[395] ^ 0x4B) + (v83 ^ 5) + ((2 * v83) & 0x7A ^ 0xF5) + 63;
  v3[395] = v83 - ((2 * v83) & 0x96) + 75;
  v3[345] ^= 0xFDu;
  v3[343] = v22 + 19 - ((2 * (v22 + 19)) & 0x96) + 75;
  LOBYTE(v83) = (2 * *(_BYTE *)(v15 + (v3[85] & 0x3F ^ 0x30LL))) ^ 0x96;
  v3[96] = (v83 - ((2 * v83) & 0x8F) + 71) ^ 0xC8;
  int v84 = (v3[39] & 0x98 ^ 0x10) + ((v3[39] >> 1) & 0x6C ^ 0x77) + 7;
  LODWORD(STACK[0x378]) = v84;
  unsigned int v85 = (v84 & 0xFE) - ((2 * v84) & 0x104) - 835892349;
  LOBYTE(v83) = (*(_BYTE *)(v5 + (v85 & 0x3E ^ 2LL)) ^ 0x4B) & (byte_1002147A0[v3[33] & 0x3F ^ 0x30LL] ^ 0xAA);
  v3[373] ^= 0x15 ^ (v83 + (~(2 * v83) | 0xD5) + 22);
  uint64_t v86 = ((v3[239] & 0x3F ^ 0x74) + (v3[239] & 5 ^ 1) - ((v3[239] & 0x3F ^ 0x74) & 5)) ^ 0x41LL;
  int v87 = *(unsigned __int8 *)(v15 + v86) ^ 0x4B | v3[148] ^ 0x70;
  int v88 = v87 - ((2 * v87) & 4);
  unsigned int v89 = (v88 + 2) & 0xFFFFFFC6 | ((*(_BYTE *)(v15 + (v3[105] & 0x3F ^ 0x30LL)) & 0x18 ^ 0xF1) + 5) & 0x18;
  int v90 = (v89 ^ 0x1A) - 2 * ((v89 ^ 0x1A) & 0x7C ^ ((_BYTE)v88 + 10) & 4);
  int v91 = v3[354];
  unsigned int v92 = (v3[221] ^ 0x70) & (v91 ^ 0x4B);
  unsigned int v93 = (v3[339] ^ 0x4B) & (v91 ^ 0xFFFFFFB4);
  unsigned int v94 = (v93 - ((2 * v93) & 0xFFFFFFE8) - 12) ^ 0xFFFFFFF4 | (v92 - 16 * (v92 >> 3) + 120) ^ 0x78;
  LOBYTE(v94) = (v94 - ((2 * v94) & 0x34) + 90) & 0x7F ^ 0x4A;
  v3[441] = ((v94 | 0x7C) - (v94 | 0x83) - 125) ^ 0x27;
  unsigned int v95 = (205 * (*(unsigned __int8 *)(v5 + (v3[171] & 0x3F ^ 0x30LL)) ^ 0x4Bu)) >> 10;
  LOBYTE(v95) = (v3[24] ^ 0x70) + 2 * v95 + (v95 ^ 0x7F) - 127;
  v3[44] ^= 0x46 ^ (v95 - ((2 * v95) & 0x8C) + 70);
  unsigned int v96 = ((v3[329] & 0x53 ^ 0xFFFFFFBF) + ((2 * (v3[329] & 0x53)) | 0xFFFFFFC0) + 33) ^ 0xFFFFFFE6;
  unsigned int v97 = (((2 * v96) & 0xFFFFFFF4) - v96 - 123) | (v3[137] >> 1) & 0x24 ^ 0x20;
  v3[423] ^= (v97 - ((2 * v97) & 0xFC) + 126) ^ 0xFE;
  v3[344] ^= (3 * (((v3[67] & 0xD0 ^ 0x7F) + 2 * (v3[67] & 0xD0) + 8) ^ 0xF8)
                             - ((6 * (((v3[67] & 0xD0 ^ 0x7F) + 2 * (v3[67] & 0xD0) + 8) ^ 0xF8)) & 0x38)
                             + 28) ^ 0x1C;
  v3[370] = -2;
  v3[419] ^= 0xBDu;
  int v98 = v3[400] & 0xA1 ^ 0x21;
  int v99 = *(_BYTE *)(v5 + (v3[37] & 0x3F ^ 0x30LL)) & 0x5E ^ 0x1C;
  unsigned int v100 = (v99 - ((2 * v99) & 0xAAAAAAAA) - 11) & 0xFFFFFFFE ^ 0xFFFFFFA2 | (v98 - ((2 * v98) & 0x40) - 92) ^ 0xFFFFFF84;
  unsigned int v101 = ((v100 - 2 * (v100 & 0x5B ^ v98 & 1) - 38) ^ 0xFFFFFFD4) + (v3[188] ^ 0x70);
  LODWORD(STACK[0x368]) = byte_1002147A0[v86];
  unsigned int v102 = v101 - 32 * (v101 >> 4);
  LOBYTE(v101) = v3[61] ^ 0x70;
  LOBYTE(v100) = byte_1002147A0[v3[193] & 0x3F ^ 0x30LL] ^ 0xAA;
  LOBYTE(v97) = (((v100 | v101) - ((2 * (v100 | v101)) & 0x4A) - 91) ^ 0xA5) & (v3[403] ^ 0x4B);
  LOBYTE(v101) = (v97 - ((2 * v97) & 0xF7) + 123) ^ 0x7B | ((v100 & v101) - ((2 * (v100 & v101)) & 0x6E) + 55) ^ v2;
  LOBYTE(v101) = (v3[357] ^ 0x4B) + (v101 ^ 0x84) - ((2 * v101) & 0xF7) + 124;
  v3[357] = v101 - ((2 * v101) & 0x96) + 75;
  LOBYTE(v101) = *(_BYTE *)(v5 + (v3[159] & 0x3F ^ 0x30LL)) ^ 0x4B;
  LODWORD(STACK[0x358]) = v90 + 88;
  LOBYTE(v101) = (v101 & ((v90 + 88) ^ 0xA7)) - ((2 * (v101 & ((v90 + 88) ^ 0xA7))) & 0xCA);
  LOBYTE(v101) = (~(v101 + 105) & 4) - ((-102 - v101) | 0x66) + 95;
  v3[371] ^= 0x47 ^ ((v101 & 0xDD ^ 0x67)
                                    + ((2 * ((v101 & 0xDD ^ 0x67) & 0xD ^ (v101 | 0x77))) ^ 0x15)
                                    + 72);
  LOBYTE(v100) = (v3[116] ^ 0x70) - ((2 * (v3[116] ^ 0x70)) & 0xCE) + 103;
  LOBYTE(v97) = (v3[416] ^ 0x4B) - ((2 * (v3[416] ^ 0x4B)) & 0xD4) - 22;
  char v103 = (((v97 ^ 0xEA | v100 ^ 0x67) - ((2 * (v97 ^ 0xEA | v100 ^ 0x67)) & 0x62) + 49) ^ 0x31) & (((v3[349] ^ 0x4B)
                                                                                                  - ((2 * (v3[349] ^ 0x4B)) & 0xF3)
                                                                                                  - 7) ^ 0xF9);
  char v104 = (v103 - ((2 * v103) & 0xE2) + 113) ^ 0x71 | (((v97 ^ 0xEA) & (v100 ^ 0x67))
                                                    - ((2 * ((v97 ^ 0xEA) & (v100 ^ 0x67))) & 8)
                                                    + 4) ^ 4;
  int v105 = (v85 >> 1) ^ 0x6716A5C1;
  char v106 = v104 - ((2 * v104) & 0xC2) - 31;
  LOBYTE(v101) = (((v106 ^ 0xE1 | v105) - ((2 * (v106 ^ 0xE1 | v105)) & 0x4A) + 37) ^ 0x25) & (((v3[321] ^ 0x4B)
                                                                                              - ((2 * (v3[321] ^ 0x4B)) & 0xC3)
                                                                                              - 31) ^ 0xE1);
  LOBYTE(v101) = (v101 - ((2 * v101) & 0x2C) - 106) ^ 0x96 | (((v106 ^ 0xE1) & v105)
                                                            - ((2 * ((v106 ^ 0xE1) & v105)) & 0xB0)
                                                            + 88) ^ 0x58;
  v3[347] = (v101 - ((2 * v101) & 0xB4) - 38) ^ 0x91;
  v3[188] = v102 + 112;
  int v107 = *(unsigned __int8 *)(v15 + (((_BYTE)v102 + 112) & 0x3F ^ 0x30LL));
  HIDWORD(v10_Block_object_dispose(va, 8) = ~v107;
  LODWORD(v10_Block_object_dispose(va, 8) = (v107 ^ 0x48) << 24;
  LOBYTE(v105) = ((v3[4] & 2) + (v3[4] & 7 ^ 0xFE) + (v3[4] & 2 | 5) + 1) ^ 4;
  LOBYTE(v105) = (v105 - ((2 * v105) & 0xCA) - 27) ^ 0xE5;
  LOBYTE(v105) = ((2 * v105) & 0xD6) + (v105 ^ 0xEB);
  unsigned int v109 = ((v3[430] ^ 0x4B) - ((2 * (v3[430] ^ 0x4B)) & 0x18) - 738527220) ^ 0xD3FAF80C;
  unsigned int v110 = (v109 << (v105 + 21)) - ((2 * (v109 << (v105 + 21))) & 0x8DEB58DA) + 1190505581;
  int v111 = (v109 >> ((3 - v105) & 7)) - ((2 * (v109 >> ((3 - v105) & 7))) & 0x2E38E6BE) - 686001313;
  LOBYTE(v85) = *(_BYTE *)(v15 + (v3[41] & 0x3F ^ 0x30LL)) ^ 0x4B;
  LOBYTE(v9fseek(v0, 0LL, 2) = (v3[247] ^ 0x70) - 2 * ((v3[247] ^ 0x70) & 0x1F) + 31;
  LOBYTE(v85) = v85 - ((2 * v85) & 0xBB) - 35;
  LOBYTE(v105) = (((v85 ^ 0xDD | v92 ^ 0x1F) - ((2 * (v85 ^ 0xDD | v92 ^ 0x1F)) & 0xC0) + 96) ^ 0x60) & (((v3[415] ^ 0x4B) - ((2 * (v3[415] ^ 0x4B)) & 0x7A) - 67) ^ 0xBD);
  LOBYTE(v105) = (v105 - ((2 * v105) & 0x84) + 66) ^ 0x42 | (((v85 ^ 0xDD) & (v92 ^ 0x1F))
                                                           - ((2 * ((v85 ^ 0xDD) & (v92 ^ 0x1F))) & 0x96)
                                                           + 75) ^ 0x4B;
  LOBYTE(v111) = v110 ^ 0x32 ^ v111;
  LOBYTE(v105) = (v105 - ((2 * v105) & 6) + 3) ^ 3;
  LOBYTE(v107) = (((v105 | v111) - ((2 * (v105 | v111)) & 0x88) + 68) ^ 0x44) & (((v3[381] ^ 0x4B)
                                                                                - ((2 * (v3[381] ^ 0x4B)) & 0x78)
                                                                                - 68) ^ 0xBC);
  LOBYTE(v107) = (v107 - ((2 * v107) & 0x48) + 36) ^ 0x24 | ((v105 & v111) - ((2 * (v105 & v111)) & 0x70) + 56) ^ 0x38;
  LOBYTE(v107) = (v3[354] ^ 0x4B)
               + ((v107 - ((2 * v107) & 0x9A) - 51) ^ 0x13)
               + ((2 * (v107 - ((2 * v107) & 0x9A) - 51)) & 0xBC ^ 0x98)
               + 34;
  v3[354] = v107 - ((2 * v107) & 0x96) + 75;
  LOBYTE(v107) = (v3[442] ^ 0x4B) - ((2 * (v3[442] ^ 0x4B)) & 0x4A) + 37;
  LOBYTE(v111) = (((2 * (v107 & 0x23)) | 0x5A) - (v107 & 0x23) - 45) ^ 0x2D;
  LOBYTE(v107) = (((v3[372] ^ 0x4B) - ((2 * (v3[372] ^ 0x4B)) & 0x64) + 50) ^ 0x32) & (v107 ^ 0xDA);
  LOBYTE(v107) = (((2 * v111) | 0xAA) - v111 + 43) ^ 0xF4 | (v107 - ((2 * v107) & 8) - 124) ^ 0x84;
  LOBYTE(v107) = (v107 - ((2 * v107) & 0x98) - 52) ^ 0xCC;
  v3[339] = (v107 * v107 - ((2 * v107 * v107) & 0xBF) + 95) ^ 0x14;
  LOBYTE(v107) = (v3[444] & 5 ^ 0x7F) - (v3[444] & 0x20);
  LOBYTE(v107) = (v3[322] ^ 0x4B) + (v107 & 0x25 ^ 0x2F) + ((2 * v107) & 0xE8) + 3;
  LOBYTE(v107) = (v3[361] ^ 0x4B) + (v107 ^ 0xF7) + ((2 * v107) & 0xEF) + 9;
  v3[361] = v107 - ((2 * v107) & 0x96) + 75;
  BOOL v112 = LODWORD(STACK[0x534]) != 488795727;
  LODWORD(STACK[0x344]) = LODWORD(STACK[0x398]) + 118;
  LODWORD(STACK[0x390]) -= 124;
  LODWORD(STACK[0x360]) = LODWORD(STACK[0x388]) - 22;
  LODWORD(STACK[0x380]) = (2 * (LODWORD(STACK[0x380]) + 66)) & 0xFFFFFFCC;
  LODWORD(STACK[0x388]) = LODWORD(STACK[0x370]) + 22;
  LODWORD(STACK[0x398]) = (v108 >> 26) - ((2 * (v108 >> 26)) & 0xFFFFFFA2) + 81;
  return ((uint64_t (*)(void))*(&off_10025C670 + ((987 * v112) ^ a2)))();
}

uint64_t sub_1001AF888(int a1)
{
  int v1 = STACK[0x340];
  int v2 = (LODWORD(STACK[0x340]) + 242) | 0x28;
  int v3 = (LODWORD(STACK[0x340]) + 110) | 0x426;
  LODWORD(STACK[0x3E8]) = a1 ^ 0x1D226E4F;
  if ((a1 ^ 0x1D226E4Fu) <= 1) {
    int v4 = 1;
  }
  else {
    int v4 = a1 ^ 0x1D226E4F;
  }
  return ((uint64_t (*)(void))*(&off_10025C670 + ((((v3 ^ 0xFFFFFB18) + v4 > 0xFFFFFFF6) * (v2 - 187)) ^ v1)))();
}

uint64_t sub_1001AF8F4()
{
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + ((((v0 - 218) ^ 0x27A ^ (549 * (v0 ^ 0x4F4))) * (v1 < 0x10)) ^ v0))
                            - 8))();
}

uint64_t sub_1001AF93C()
{
  *(_OWORD *)STACK[0x3F8] = xmmword_1002123F0;
  return ((uint64_t (*)(__n128))*(&off_10025C670
                                          + ((216 * (((7 * (v0 ^ 0x6E9)) ^ 0x3BA) != (v1 & 0xFFFFFFF0))) ^ (v0 - 516))))((__n128)xmmword_1002123F0);
}

uint64_t sub_1001AF99C(double a1, __n128 a2, __n128 a3)
{
  int v5 = 29 * (v3 ^ 0x39);
  STACK[0x400] = v4 - 448;
  STACK[0x4B0] = v4 - 448;
  unint64_t v6 = STACK[0x3A0];
  *(void *)(v6 + 59fseek(v0, 0LL, 2) = 0x9CD9AF232C423D57LL;
  *(void *)(v6 + 600) = 0x29235881A1ABD009LL;
  *(void *)(v6 + 60_Block_object_dispose(va, 8) = 0xD6DCA77E5E542FF6LL;
  *(void *)(v6 + 620) = 0xD2C4B7FB43C7D293LL;
  STACK[0x458] = (unint64_t)*(&off_10025C670 + v3);
  LODWORD(v6) = STACK[0x3CC];
  LODWORD(STACK[0x3E8]) = LODWORD(STACK[0x3CC]) + 62639895;
  STACK[0x3D8] = STACK[0x3E0] + STACK[0x3D0];
  LODWORD(STACK[0x338]) = v6 - 735808176;
  LODWORD(STACK[0x344]) = (v5 ^ 0xC9CD1283) + v6;
  LODWORD(STACK[0x3B8]) = v6 - 909307090;
  a2.n128_u16[0] = -19533;
  a2.n128_u8[2] = -77;
  a2.n128_u8[3] = -77;
  a2.n128_u8[4] = -77;
  a2.n128_u8[5] = -77;
  a2.n128_u8[6] = -77;
  a2.n128_u8[7] = -77;
  a3.n128_u16[0] = -29042;
  a3.n128_u8[2] = -114;
  a3.n128_u8[3] = -114;
  a3.n128_u8[4] = -114;
  a3.n128_u8[5] = -114;
  a3.n128_u8[6] = -114;
  a3.n128_u8[7] = -114;
  v7.n128_u64[0] = 0xB3B3B3B3B3B3B3B3LL;
  v7.n128_u64[1] = 0xB3B3B3B3B3B3B3B3LL;
  v8.n128_u64[0] = 0x8E8E8E8E8E8E8E8ELL;
  v8.n128_u64[1] = 0x8E8E8E8E8E8E8E8ELL;
  LODWORD(v6) = STACK[0x40C];
  LODWORD(STACK[0x330]) = LODWORD(STACK[0x40C]) + 75959666;
  int v9 = (v6 + 1819524043) & 0x938C3DFF;
  LODWORD(STACK[0x3C8]) = v6 + 1819523922;
  LODWORD(STACK[0x3CC]) = v9;
  unsigned int v10 = (v9 + 517439937) & 0xE1287EBD;
  LODWORD(STACK[0x388]) = v10;
  LODWORD(STACK[0x3B0]) = v10 ^ 0x6D6;
  v11.n128_u64[0] = 0x1C1C1C1C1C1C1C1CLL;
  v11.n128_u64[1] = 0x1C1C1C1C1C1C1C1CLL;
  LODWORD(STACK[0x3E0]) = v6 ^ 0x64A;
  STACK[0x478] = STACK[0x3F0];
  LODWORD(STACK[0x514]) = 488795824;
  STACK[0x498] = STACK[0x3F8];
  return ((uint64_t (*)(uint64_t, uint64_t, __n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128))((char *)*(&off_10025C670 + ((1011 * (((3 * (v5 ^ 0x3C8) + 488794080) ^ 0xE5DFB93E) + 117581874 + ((2 * ((3 * (v5 ^ 0x3C8) + 488794080) ^ 0x1D226EB0)) & 0xF1FBAF1C) > 0xFFFFFFBF)) ^ v5)) - 8))( 2659040600LL,  37LL,  (__n128)xmmword_100201400,  a2,  a3,  (__n128)xmmword_1002013F0,  v7,  v8,  v11,  (__n128)xmmword_100212420);
}

uint64_t sub_1001B12C0(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)*(&off_10025C670
                                                                      + ((v2 - 1183) ^ (2 * ((v2 ^ 0x6C9u) - 166 < v3))))
                                                            - 8))( a1,  a2,  1472LL);
}

uint64_t sub_1001B1328(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  else {
    int v7 = 64;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)*(&off_10025C670
                                                                      + (v6 ^ 0x4CC ^ (70
                                                                                     * ((-a4 - 1688353098 - a5 + v7) > 0xE))))
                                                            - (v6 ^ 0xB6u)
                                                            + 335))( a1,  a2,  4294967219LL);
}

uint64_t sub_1001B13DC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7)
{
  int v9 = a5 + a4 + 1688353097;
  unsigned int v10 = v9 + (v7 ^ 0x3C0) - 346;
  if (v10 <= 0x40) {
    unsigned int v10 = 64;
  }
  unsigned int v11 = a7 + v10;
  int v12 = __CFADD__(v9, v11);
  return (*(uint64_t (**)(void))(v8 + 8LL * ((49 * ((v11 < 0x10) & ~v12)) ^ v7)))();
}

uint64_t sub_1001B1440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v9 = (char *)&STACK[0x590] + STACK[0x348] + a4 - 0x1C5F64B704023B5ELL;
  unint64_t v10 = (unint64_t)&v9[-v6];
  BOOL v11 = (unint64_t)&v9[-v6] < 0x10;
  unint64_t v12 = (unint64_t)&v9[-v7];
  unint64_t v13 = (unint64_t)&v9[-v8];
  int v14 = (unint64_t)&v9[-STACK[0x3F8]] < 0x10 || v11;
  if (v10 < 0x10) {
    int v15 = 1;
  }
  else {
    int v15 = v14;
  }
  int v16 = v15 ^ 1;
  if (v13 <= 0xF) {
    int v16 = 0;
  }
  return (*(uint64_t (**)(void))(v5 + 8LL * ((1033 * v16) ^ v4)))();
}

uint64_t sub_1001B14FC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(int8x16_t *)(STACK[0x3F0] + v5 + ((29 * (a4 ^ 0x116)) ^ 0xECAA3BC6)) = veorq_s8(*(int8x16_t *)STACK[0x3F8], v6);
  return ((uint64_t (*)(void))*(&off_10025C670 + ((35 * (((v4 + 1) & 0x1FFFFFFF0LL) == 16)) ^ a4)))();
}

void sub_1001B1574()
{
}

uint64_t sub_1001B1580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 8LL
                                                                   * (((((v8 - 651) | 5) + 366) * (a5 == a7)) ^ v8)))( a1,  a2,  4294967219LL);
}

uint64_t sub_1001B15F4( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v20 = ((v8 + v10) & v9 ^ v16) + a8;
  *(_BYTE *)(STACK[0x3F0] + (v17 + v19)) = *(_BYTE *)(STACK[0x3F8] + v20) ^ *(_BYTE *)(v13 + (v20 & 0xF)) ^ *(_BYTE *)(v14 + (v20 & 0xF)) ^ *(_BYTE *)(v15 + (v20 & 0xF)) ^ ((v20 & 0xF) * a3) ^ v12;
  return (*(uint64_t (**)(void))(v11 + 8LL * ((((v19 + v17 + 1) > 0x3F) * v18) ^ v8)))();
}

uint64_t sub_1001B166C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = *(void *)(v5 + 8LL * a4);
  LODWORD(STACK[0x4A4]) = v4;
  STACK[0x4F8] = (((a4 - 19) | 0x130u) ^ 0xFFFFFFFFFFFFFEC6LL) + v6;
  unint64_t v7 = STACK[0x3F0];
  int v8 = ((((a4 - 19) | 0x130) - 274) | 0x408) - 525;
  STACK[0x4B0] = STACK[0x400] + 320;
  LODWORD(STACK[0x524]) = *(_DWORD *)(v7 + 72);
  LODWORD(STACK[0x500]) = *(_DWORD *)(v7 + 76);
  LODWORD(STACK[0x424]) = *(_DWORD *)(v7 + 80);
  LODWORD(STACK[0x464]) = *(_DWORD *)(v7 + 84);
  return ((uint64_t (*)(void))((char *)*(&off_10025C670
                                      + ((41
}

uint64_t sub_1001B4828()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * (((*(unsigned int *)(STACK[0x450] + 92)
                                           + ((LODWORD(STACK[0x40C]) - 1031093634) & 0x3D7537DF ^ 0x775819D8LL)
                                           + ((unint64_t)(*(_DWORD *)(STACK[0x450] + 92) < 0x43C7D283u) << 32) != 3139431320)
                                          * (((LODWORD(STACK[0x40C]) + 1224753373) | 0x10B80821) - 1505250381)) ^ (LODWORD(STACK[0x40C]) - 212)))
                            - 8LL))();
}

uint64_t sub_1001B48C4@<X0>(unint64_t a1@<X8>)
{
  int v3 = v2 | 0x568;
  *(_BYTE *)(STACK[0x4E8] - 0x7CB63B6E31E8FA60LL) = unk_100212550 ^ *(_BYTE *)STACK[0x440] ^ unk_1002129E2 ^ unk_100212A00;
  BOOL v4 = v1 > 0xBB1FEB99;
  if (v1 < a1 != a1 > 0xBB1FEB99) {
    BOOL v4 = v1 < a1;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, unint64_t, unint64_t))((char *)*(&off_10025C670
                                                                                                 + ((243 * !v4) ^ v3))
                                                                                       - 8))( (v3 - 1179) - 190LL,  4294967229LL,  0x81BE6794BD1C6847LL,  0xBDD101752E67B05ALL);
}