nw_parameters_t create_nw_parameters_for_tcp(nw_parameters_configure_protocol_block_t configure_tcp)
{
  return nw_parameters_create_secure_tcp(_nw_parameters_configure_protocol_disable, configure_tcp);
}

BOOL socket_deny_cellular(int a1)
{
  int v2 = 4;
  return setsockopt(a1, 0xFFFF, 4225, &v2, 4u) == 0;
}

id _remotepairing_nw_connection_create_with_connected_socket_and_parameters()
{
  return (id)nw_connection_create_with_connected_socket_and_parameters();
}

uint64_t is_setup_complete()
{
  if (&_BYSetupAssistantHasCompletedInitialRun) {
    return BYSetupAssistantHasCompletedInitialRun();
  }
  else {
    return 1LL;
  }
}

BOOL is_pairing_restricted_by_findMy()
{
  v0 = (void *)objc_claimAutoreleasedReturnValue(+[FMDFMIPManager sharedInstance](&OBJC_CLASS___FMDFMIPManager, "sharedInstance"));
  v1 = v0;
  BOOL v2 = v0 != 0LL;
  if (v0)
  {
    if ([v0 lockdownShouldDisableDevicePairing])
    {
      v3 = pairing_utilities_log();
      v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_10005FA54();
      }
LABEL_9:

      goto LABEL_10;
    }
  }

  else if ((os_variant_is_darwinos("com.apple.RemotePairing") & 1) == 0)
  {
    v5 = pairing_utilities_log();
    v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      sub_10005FA80();
    }
    goto LABEL_9;
  }

  BOOL v2 = 0LL;
LABEL_10:

  return v2;
}

void *pairing_utilities_log()
{
  if (qword_100083868[0] != -1) {
    dispatch_once(qword_100083868, &stru_100076290);
  }
  return off_100083860;
}

uint64_t managed_configuration_allow_pairing(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](&OBJC_CLASS___MCProfileConnection, "sharedConnection"));
  v6 = v5;
  if (v5)
  {
    unsigned int v7 = [v5 hostMayPairWithOptions:v3 challenge:v4];
    uint64_t v8 = v7;
    switch(v7)
    {
      case 0u:
        v9 = pairing_utilities_log();
        v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          sub_10005FB48();
        }
        goto LABEL_8;
      case 1u:
        goto LABEL_13;
      case 2u:
        uint64_t v8 = 2LL;
        break;
      case 3u:
        break;
      default:
        v12 = pairing_utilities_log();
        v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          sub_10005FAD8(v8, v13);
        }

LABEL_13:
        uint64_t v8 = 1LL;
        break;
    }
  }

  else
  {
    if ((os_variant_is_darwinos("com.apple.RemotePairing") & 1) == 0)
    {
      v11 = pairing_utilities_log();
      v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT)) {
        sub_10005FAAC();
      }
LABEL_8:
    }

    uint64_t v8 = 0LL;
  }

  return v8;
}

void sub_10000DD2C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.dt.remotepairing", "pairingutilities");
  BOOL v2 = off_100083860;
  off_100083860 = v1;
}

BOOL lockdown_wifi_pairing_enabled()
{
  uint64_t v0 = lockdown_connect();
  BOOL v1 = v0;
  if (v0)
  {
    CFBooleanRef v2 = (CFBooleanRef)lockdown_copy_value(v0, @"com.apple.mobile.wireless_lockdown", @"EnableWifiPairing");
    lockdown_disconnect(v1);
    if (v2)
    {
      BOOL v1 = v2 == kCFBooleanTrue;
      CFRelease(v2);
    }

    else
    {
      return 0LL;
    }
  }

  return v1;
}

  ;
}

void sub_10000DDD8( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10000DDE8( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_10000DFF8(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  if (a3 && [*(id *)(a1 + 32) active])
  {
    [*(id *)(a1 + 32) setBrowser:0];
    if (([*(id *)(a1 + 32) startOnQueue:*(void *)(a1 + 40)] & 1) == 0)
    {
      v6 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) log]);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_10005FBF8();
      }
    }
  }

  else
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10000E0CC;
    v8[3] = &unk_1000762B8;
    uint64_t v7 = *(void *)(a1 + 40);
    v8[4] = *(void *)(a1 + 32);
    remote_device_set_disconnected_callback(v5, v7, v8);
  }
}

id sub_10000E0CC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) dispatchDisconnectListeners];
}

void sub_10000E1A4(_Unwind_Exception *a1)
{
}

void sub_10000E2C8(_Unwind_Exception *a1)
{
}

int main(int argc, const char **argv, const char **envp)
{
  qword_1000845F0 = OS_os_log.init(subsystem:category:)( 0xD00000000000001ALL,  0x8000000100066830LL,  0xD000000000000014LL,  0x8000000100066850LL);
  uint64_t v3 = type metadata accessor for RemotePairingDeviceService();
  swift_allocObject(v3, 161LL, 7LL);
  sub_10002B870();
  qword_1000845F8 = v4;
  sub_10002BA2C();
  CFRunLoopRun();
  return 0;
}

uint64_t sub_10000E484(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

void type metadata accessor for CFUserNotification(uint64_t a1)
{
}

uint64_t sub_10000E4D0(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10006252C, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_10000E50C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10006252C, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_10000E554(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10006252C, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

BOOL sub_10000E5AC(int *a1, int *a2)
{
  return sub_100040768(*a1, *a2);
}

uint64_t sub_10000E5B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100039844();
  *a1 = result;
  return result;
}

uint64_t sub_10000E5DC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10003984C(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_10000E608(void *a1, uint64_t *a2)
{
  return sub_100039854(a1, *a2);
}

uint64_t sub_10000E610(uint64_t *a1)
{
  return sub_100039880(*a1);
}

uint64_t sub_10000E618(uint64_t *a1)
{
  return sub_100039890(*a1);
}

uint64_t sub_10000E620(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10006252C, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable) & 1;
}

BOOL sub_10000E674(uint64_t *a1, uint64_t *a2)
{
  return sub_10000E870(*a1, *a2);
}

void *sub_10000E680@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_10000E68C(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

_DWORD *sub_10000E698@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_10000E6A8(void *a1@<X8>)
{
  *a1 = *v1;
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for RPUSBConnectedHostTrustState(uint64_t a1)
{
}

void type metadata accessor for nw_connection_state_t(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for Tunnel.MutableState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 sub_10000E724(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_10000E730(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000E750(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for audit_token_t(uint64_t a1)
{
}

void type metadata accessor for remote_device_type_t(uint64_t a1)
{
}

void sub_10000E7A4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_10000E7E8()
{
  return sub_10000E830((unint64_t *)&unk_100082100, (uint64_t)&unk_100062558);
}

uint64_t sub_10000E80C()
{
  return sub_10000E830((unint64_t *)&unk_100080CE0, (uint64_t)&unk_100062500);
}

uint64_t sub_10000E830(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CFString(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

BOOL sub_10000E870(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_10000E884()
{
  os_log_type_t v1 = static os_log_type_t.default.getter();
  uint64_t v2 = (os_log_s *)qword_1000845F0;
  os_log_type_t v3 = v1;
  uint64_t result = os_log_type_enabled((os_log_t)qword_1000845F0, v1);
  if ((_DWORD)result)
  {
    swift_retain(v0);
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v5 = 134217984;
    swift_beginAccess(v0 + 16, v10, 0LL, 0LL);
    uint64_t v6 = *(void *)(v0 + 16);
    uint64_t v7 = swift_bridgeObjectRetain(v6);
    uint64_t v8 = sub_10004F824(v7);
    swift_bridgeObjectRelease(v6);
    uint64_t v9 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, v10, v5 + 4, v5 + 12);
    swift_release(v0);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Lockdown Peers updated. Total count: %ld", v5, 0xCu);
    return swift_slowDealloc(v5, -1LL, -1LL);
  }

  return result;
}

double sub_10000E994()
{
  *(void *)&double result = swift_bridgeObjectRetain(*(void *)(v0 + 16)).n128_u64[0];
  return result;
}

void sub_10000E9C0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ControlChannelConnection.Options(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  sub_10000FFCC();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for ControlChannelConnection.Options.Device(0LL);
  __chkstk_darwin(v10, v11);
  sub_10000FFCC();
  uint64_t v16 = v15 - v14;
  if ((*(_BYTE *)(v2 + 72) & 1) != 0)
  {
    uint64_t v17 = static os_log_type_t.error.getter(v12);
    os_log(_:dso:log:_:_:)( v17,  &_mh_execute_header,  qword_1000845F0,  "Rejecting remote XPC control pairing channel connection as service is shutting down",  83LL,  2LL,  &_swiftEmptyArrayStorage);
    lockdown_disconnect(a1);
  }

  else
  {
    uint64_t v41 = v16;
    uint64_t v42 = v12;
    uint64_t v43 = v13;
    ControlChannelConnection.Options.Device.init(allowsPairSetup:allowsPinlessPairing:allowsIncomingTunnelConnections:allowsPromptlessAutomationPairingUpgrade:allowsSharingSensitiveInfo:)( 1LL,  1LL,  0LL,  0LL,  1LL);
    unsigned int is_usb = lockdown_connection_is_usb(a1);
    unsigned int socket = lockdown_get_socket(a1);
    uint64_t v18 = sub_10000FF6C((uint64_t)&unk_1000766B8);
    *(void *)(v18 + 16) = a1;
    uint64_t v19 = sub_10000FF6C((uint64_t)&unk_1000766E0);
    *(void *)(v19 + 16) = a1;
    uint64_t v20 = sub_10000FF6C((uint64_t)&unk_100076708);
    *(void *)(v20 + 16) = a1;
    uint64_t v21 = sub_10000FF6C((uint64_t)&unk_100076730);
    *(void *)(v21 + 16) = a1;
    uint64_t v22 = type metadata accessor for SecureSocketDataTransport(0LL);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    uint64_t v23 = SecureSocketDataTransport.init(physicallyConnected:underlyingConnectionSocket:bufferedReceiveSizeHandler:syncReceiveHandler:syncSendHandler:cleanupConnectionHandler:)( is_usb,  socket,  sub_10000FE30,  v18,  sub_10000FE3C,  v19,  sub_10000FE50,  v20,  sub_10000FE64,  v21);
    v45[3] = v22;
    v45[4] = &protocol witness table for SecureSocketDataTransport;
    v45[0] = v23;
    v24 = *(void **)(v2 + 24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v9, v41, v42);
    (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))( v9,  enum case for ControlChannelConnection.Options.device(_:),  v4);
    uint64_t v25 = *(void *)(v2 + 80);
    v44[3] = type metadata accessor for SystemKeychainPairingManager();
    v44[4] = sub_10000FE6C( &qword_100080F98,  (uint64_t (*)(uint64_t))type metadata accessor for SystemKeychainPairingManager,  (uint64_t)&unk_100062A9C);
    v44[0] = v25;
    uint64_t v26 = sub_10000FF78();
    swift_retain(v23);
    id v27 = v24;
    uint64_t v28 = sub_10000FFDC();
    uint64_t v29 = static ControlChannelConnection.defaultMaxReconnectionAttempts.getter(v28);
    swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
    uint64_t v30 = ControlChannelConnection.init(transport:queue:options:maxReconnectionAttempts:pairingDataStorageProvider:peerWireProtocolVersion:)( v45,  v27,  v9,  v29,  v44,  0LL);
    swift_beginAccess(v2 + 16, v45, 33LL, 0LL);
    sub_10000FFC4();
    sub_100052210();
    uint64_t v31 = v44[0];
    swift_endAccess(v45);
    swift_release(v31);
    sub_10000E884();
    uint64_t v32 = sub_10000FF6C((uint64_t)&unk_100076758);
    sub_10000FFB4(v32);
    uint64_t v33 = sub_10000FF6C((uint64_t)&unk_100076780);
    sub_10000FFA4(v33);
    uint64_t v34 = sub_100010010((uint64_t)&unk_1000767A8);
    *(void *)(v34 + 16) = v26;
    *(void *)(v34 + 24) = v27;
    sub_100010000();
    swift_retain(v27);
    dispatch thunk of ControlChannelConnection.invalidationHandler.setter(sub_10000FED4, v34);
    sub_100010008();
    swift_release(v27);
    uint64_t v35 = sub_10000FF6C((uint64_t)&unk_100076758);
    sub_10000FFB4(v35);
    uint64_t v36 = sub_10000FF6C((uint64_t)&unk_100076780);
    sub_10000FFA4(v36);
    uint64_t v37 = sub_100010010((uint64_t)&unk_1000767D0);
    *(void *)(v37 + 16) = v27;
    *(void *)(v37 + 24) = v26;
    swift_retain(v27);
    sub_100010000();
    dispatch thunk of ControlChannelConnection._connectionSetupCompleteHandler.setter(sub_10000FF0C, v37);
    sub_100010008();
    swift_release(v27);
    dispatch thunk of ControlChannelConnection.requireUserConsentForPairing.setter(0LL);
    uint64_t v38 = *sub_10000FF14((void *)(v2 + 32), *(void *)(v2 + 56));
    sub_10000FFC4();
    sub_100046064(0xD00000000000002FLL, 0x8000000100066A30LL, v38, v30);
    swift_release(v23);
    sub_10000FFF8();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
    sub_10000FF80();
  }

uint64_t sub_10000EDD4(uint64_t a1)
{
  uint64_t v2 = 0LL;
  else {
    return -1LL;
  }
}

uint64_t sub_10000EE30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v12, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = a2 + 16;
    swift_beginAccess(v6, v11, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v6);
    if (Strong)
    {
      uint64_t v8 = Strong;
      swift_beginAccess(v5 + 16, v10, 33LL, 0LL);
      uint64_t v9 = sub_100053FB8(v8);
      swift_endAccess(v10);
      swift_release(v9);
      sub_10000E884();
      swift_release(v8);
    }

    return swift_release(v5);
  }

  return result;
}

uint64_t sub_10000EEF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ControlChannelConnection.InvalidationReason(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  a1 += 16LL;
  swift_beginAccess(a1, v18, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1);
  if (result)
  {
    uint64_t v10 = result;
    uint64_t v11 = a2 + 16;
    swift_beginAccess(v11, v17, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v11);
    if (Strong)
    {
      uint64_t v13 = Strong;
      uint64_t v14 = dispatch thunk of ControlChannelConnection.resolvedIdentity.getter();
      if (v14)
      {
        uint64_t v15 = (void *)v14;
        sub_10004F848();
        if ((v16 & 1) == 0)
        {
          (*(void (**)(_BYTE *, void, uint64_t))(v5 + 104))( v8,  enum case for ControlChannelConnection.InvalidationReason.peerUnpaired(_:),  v4);
          dispatch thunk of ControlChannelConnection.invalidate(for:)(v8);

          swift_release(v13);
          swift_release(v10);
          return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
        }
      }

      swift_release(v13);
    }

    return swift_release(v10);
  }

  return result;
}

uint64_t sub_10000F040()
{
  return dispatch thunk of ControlChannelConnection.start()();
}

void sub_10000F060()
{
  uint64_t v1 = static RemoteServiceNames.lockdownService.getter();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v0 + 24);
  v7[4] = sub_10000FE0C;
  uint64_t v8 = v0;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256LL;
  v7[2] = sub_10004B064;
  v7[3] = &unk_100076680;
  uint64_t v5 = _Block_copy(v7);
  sub_10000FFDC();
  sub_10000FFF8();
  uint64_t v6 = String.utf8CString.getter(v1, v3);
  swift_bridgeObjectRelease(v3);
  lockdown_checkin_xpc(v6 + 32, 0LL, v4, v5);
  swift_release(v6);
  _Block_release(v5);
}

void sub_10000F12C(uint64_t a1)
{
  if (a1) {
    sub_10000E9C0(a1);
  }
}

void sub_10000F150()
{
  uint64_t v1 = type metadata accessor for ControlChannelConnection.InvalidationReason(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  sub_10000FFCC();
  uint64_t v7 = v6 - v5;
  if ((*(_BYTE *)(v0 + 72) & 1) == 0)
  {
    *(_BYTE *)(v0 + 72) = 1;
    sub_10000FF98(v0 + 16, (uint64_t)v35);
    uint64_t v9 = *(void *)(v0 + 16);
    if ((v9 & 0xC000000000000001LL) != 0)
    {
      if (v9 < 0) {
        uint64_t v10 = *(void *)(v0 + 16);
      }
      else {
        uint64_t v10 = v9 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v9);
      uint64_t v11 = __CocoaSet.makeIterator()(v10);
      uint64_t v12 = sub_10000FF78();
      uint64_t v13 = sub_10000FE6C( &qword_100082090,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection,  (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
      uint64_t v14 = Set.Iterator.init(_cocoa:)(v11, v12, v13);
      uint64_t v9 = v36;
      uint64_t v32 = v37;
      uint64_t v15 = v38;
      int64_t v16 = v39;
      unint64_t v17 = v40;
    }

    else
    {
      uint64_t v32 = v9 + 56;
      uint64_t v15 = ~(-1LL << *(_BYTE *)(v9 + 32));
      sub_10000FFE4();
      unint64_t v17 = v18 & v19;
      swift_bridgeObjectRetain(v9);
      int64_t v16 = 0LL;
    }

    int64_t v31 = (unint64_t)(v15 + 64) >> 6;
    uint64_t v20 = enum case for ControlChannelConnection.InvalidationReason.serviceShutdown(_:);
    if (v9 < 0) {
      goto LABEL_12;
    }
    while (1)
    {
      if (v17)
      {
        uint64_t v21 = (v17 - 1) & v17;
        unint64_t v22 = __clz(__rbit64(v17)) | (v16 << 6);
        int64_t v23 = v16;
      }

      else
      {
        int64_t v28 = v16 + 1;
        if (__OFADD__(v16, 1LL))
        {
          __break(1u);
          return;
        }

        if (v28 >= v31) {
          goto LABEL_32;
        }
        unint64_t v29 = *(void *)(v32 + 8 * v28);
        int64_t v23 = v16 + 1;
        if (!v29)
        {
          int64_t v23 = v16 + 2;
          if (v16 + 2 >= v31) {
            goto LABEL_32;
          }
          unint64_t v29 = *(void *)(v32 + 8 * v23);
          if (!v29)
          {
            int64_t v23 = v16 + 3;
            if (v16 + 3 >= v31) {
              goto LABEL_32;
            }
            unint64_t v29 = *(void *)(v32 + 8 * v23);
            if (!v29)
            {
              int64_t v23 = v16 + 4;
              if (v16 + 4 >= v31) {
                goto LABEL_32;
              }
              unint64_t v29 = *(void *)(v32 + 8 * v23);
              if (!v29)
              {
                int64_t v30 = v16 + 5;
                while (v30 < v31)
                {
                  unint64_t v29 = *(void *)(v32 + 8 * v30++);
                  if (v29)
                  {
                    int64_t v23 = v30 - 1;
                    goto LABEL_28;
                  }
                }

LABEL_32:
                sub_10000FE04(v9);
                goto LABEL_33;
              }
            }
          }
        }

            sub_10000FE04(v3);
            return;
          }
        }
      }
    }

            sub_10000FE04(v5);
            sub_10000FF38(v37);
            uint64_t v1 = v34;
            uint64_t v0 = v31;
            if (v34 == v33)
            {
              swift_bridgeObjectRelease(v31);
              return;
            }

            goto LABEL_3;
          }
        }
      }
    }

    uint64_t v14 = (v29 - 1) & v29;
    unint64_t v22 = __clz(__rbit64(v29)) + (v13 << 6);
    goto LABEL_33;
  }

  __break(1u);
LABEL_71:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000001CLL,  0x8000000100068480LL,  "remotepairingdeviced/RemotePairingDeviceService.swift",  53LL,  2LL,  530LL,  0);
LABEL_73:
  __break(1u);
  return result;
}

  __break(1u);
}

                sub_10000FE04(v7);
                goto LABEL_33;
              }
            }
          }
        }

LABEL_28:
        uint64_t v21 = (v29 - 1) & v29;
        unint64_t v22 = __clz(__rbit64(v29)) + (v23 << 6);
      }

      uint64_t v27 = *(void *)(*(void *)(v9 + 48) + 8 * v22);
      sub_10000FFDC();
      if (!v27) {
        goto LABEL_32;
      }
      while (1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104))(v7, v20, v1);
        dispatch thunk of ControlChannelConnection.invalidate(for:)(v7);
        swift_release(v27);
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v7, v1);
        int64_t v16 = v23;
        unint64_t v17 = v21;
        if ((v9 & 0x8000000000000000LL) == 0) {
          break;
        }
LABEL_12:
        uint64_t v24 = __CocoaSet.Iterator.next()(v14);
        if (v24)
        {
          uint64_t v25 = v24;
          uint64_t v33 = v24;
          uint64_t v26 = sub_10000FF78();
          swift_unknownObjectRetain(v25);
          swift_dynamicCast(&v34, &v33, (char *)&type metadata for Swift.AnyObject + 8, v26, 7LL);
          uint64_t v27 = v34;
          swift_unknownObjectRelease(v25);
          int64_t v23 = v16;
          uint64_t v21 = v17;
          if (v27) {
            continue;
          }
        }

        goto LABEL_32;
      }
    }
  }

  uint64_t v8 = static os_log_type_t.error.getter(v4);
  os_log(_:dso:log:_:_:)( v8,  &_mh_execute_header,  qword_1000845F0,  "LockdownService: Ignoring shutdown request as service is already shutting down",  78LL,  2LL,  &_swiftEmptyArrayStorage);
LABEL_33:
  sub_10000FF80();
}

    sub_100031C4C();
    unint64_t v17 = v28 & v27;
    uint64_t v18 = v29 + (v19 << 6);
LABEL_29:
    int64_t v30 = *(void *)(*(void *)(v5 + 48) + 8 * v18);
    int64_t v23 = sub_10000FFDC();
    if (!v30) {
      goto LABEL_32;
    }
    while (1)
    {
      dispatch thunk of ControlChannelConnection.pushDeviceInfoChangesToHost()(v23);
      uint64_t v9 = sub_100012464();
      uint64_t v12 = v19;
      uint64_t v13 = v17;
      if ((v5 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_12:
      uint64_t v20 = __CocoaSet.Iterator.next()(v9);
      if (v20)
      {
        uint64_t v21 = v20;
        uint64_t v35 = v20;
        sub_10000FF78();
        swift_unknownObjectRetain(v21);
        sub_100026E78((uint64_t)&v36, (uint64_t)&v35, (uint64_t)&type metadata for Swift.AnyObject + 8);
        unint64_t v22 = v36;
        int64_t v23 = swift_unknownObjectRelease(v21);
        uint64_t v19 = v12;
        unint64_t v17 = v13;
        if (v22) {
          continue;
        }
      }

      goto LABEL_32;
    }
  }

  __break(1u);
LABEL_36:
  __break(1u);
}

    uint64_t v18 = (v27 - 1) & v27;
    uint64_t v19 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_29:
    uint64_t v24 = *(void *)(*(void *)(v7 + 48) + 8 * v19);
    uint64_t v25 = sub_10000FFC4();
    if (!v24) {
      goto LABEL_34;
    }
    while (1)
    {
      unint64_t v29 = static os_log_type_t.default.getter(v25);
      if (os_log_type_enabled(v2, v29))
      {
        swift_retain_n(v24, 2LL);
        int64_t v30 = sub_1000122E0(12LL);
        int64_t v31 = sub_1000122E0(32LL);
        uint64_t v43 = v24;
        v44 = v31;
        *(_DWORD *)int64_t v30 = 136446210;
        uint64_t v32 = v2;
        uint64_t v33 = v13;
        uint64_t v34 = sub_10000FF78();
        sub_10000FFC4();
        uint64_t v35 = String.init<A>(describing:)(&v43, v34);
        uint64_t v37 = v36;
        sub_100045370(v35, v36, &v44);
        *(void *)(v30 + 4) = v38;
        swift_release_n(v24, 2LL);
        uint64_t v39 = v37;
        uint64_t v13 = v33;
        uint64_t v2 = v32;
        swift_bridgeObjectRelease(v39);
        sub_100016D10( (void *)&_mh_execute_header,  v32,  v29,  "NetworkControlChannelService control channel connection: %{public}s",  (uint8_t *)v30);
        swift_arrayDestroy(v31, 1LL);
        sub_10001001C(v31);
        sub_10001001C(v30);
      }

      uint64_t v12 = sub_10000FFF8();
      uint64_t v14 = v20;
      uint64_t v15 = v18;
      if ((v7 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_12:
      uint64_t v21 = __CocoaSet.Iterator.next()(v12);
      if (v21)
      {
        unint64_t v22 = v21;
        uint64_t v43 = v21;
        int64_t v23 = sub_10000FF78();
        swift_unknownObjectRetain(v22);
        swift_dynamicCast(&v44, &v43, (char *)&type metadata for Swift.AnyObject + 8, v23, 7LL);
        uint64_t v24 = v44;
        uint64_t v25 = swift_unknownObjectRelease(v22);
        uint64_t v20 = v14;
        uint64_t v18 = v15;
        if (v24) {
          continue;
        }
      }

      goto LABEL_34;
    }
  }

  __break(1u);
}

        uint64_t v20 = (v28 - 1) & v28;
        uint64_t v21 = __clz(__rbit64(v28)) + (v22 << 6);
      }

      int64_t v30 = *(void *)(*(void *)(v7 + 48) + 8 * v21);
      sub_10000FFDC();
      if (!v30) {
        goto LABEL_32;
      }
      while (1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 104))(v1, v19, v2);
        dispatch thunk of ControlChannelConnection.invalidate(for:)(v1);
        sub_100012464();
        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
        uint64_t v14 = v22;
        uint64_t v15 = v20;
        if ((v7 & 0x8000000000000000LL) == 0) {
          break;
        }
LABEL_12:
        int64_t v23 = __CocoaSet.Iterator.next()(v12);
        if (v23)
        {
          uint64_t v24 = v23;
          uint64_t v33 = v23;
          uint64_t v25 = sub_10000FF78();
          swift_unknownObjectRetain(v24);
          sub_1000571A8((uint64_t)&v34, (uint64_t)&v33, (uint64_t)&type metadata for Swift.AnyObject + 8, v25);
          uint64_t v26 = v34;
          swift_unknownObjectRelease(v24);
          unint64_t v22 = v14;
          uint64_t v20 = v15;
          if (v26) {
            continue;
          }
        }

        goto LABEL_32;
      }
    }
  }

  uint64_t v6 = static os_log_type_t.error.getter(v5);
  os_log(_:dso:log:_:_:)( v6,  &_mh_execute_header,  qword_1000845F0,  "RSDService: Ignoring shutdown request as service is already shutting down",  73LL,  2LL,  &_swiftEmptyArrayStorage);
LABEL_33:
  sub_10000FF80();
}

    uint64_t v19 = (v28 - 1) & v28;
    uint64_t v20 = __clz(__rbit64(v28)) + (v21 << 6);
LABEL_29:
    uint64_t v25 = *(void *)(*(void *)(v7 + 48) + 8 * v20);
    uint64_t v26 = sub_10000FFC4();
    if (!v25) {
      return sub_10000FE04(v7);
    }
    while (1)
    {
      int64_t v30 = static os_log_type_t.default.getter(v26);
      if (os_log_type_enabled(v2, v30))
      {
        swift_retain_n(v25, 2LL);
        int64_t v31 = sub_1000122E0(12LL);
        uint64_t v32 = sub_1000122E0(32LL);
        v44 = v25;
        v45 = v32;
        *(_DWORD *)int64_t v31 = 136446210;
        uint64_t v33 = v2;
        uint64_t v34 = v13;
        uint64_t v35 = sub_10000FF78();
        sub_10000FFC4();
        uint64_t v36 = String.init<A>(describing:)(&v44, v35);
        uint64_t v38 = v37;
        sub_100045370(v36, v37, &v45);
        *(void *)(v31 + 4) = v39;
        swift_release_n(v25, 2LL);
        unint64_t v40 = v38;
        uint64_t v13 = v34;
        uint64_t v2 = v33;
        swift_bridgeObjectRelease(v40);
        _os_log_impl( (void *)&_mh_execute_header,  v33,  v30,  "State dump: RSDService control channel connection: %{public}s",  (uint8_t *)v31,  0xCu);
        swift_arrayDestroy(v32, 1LL);
        sub_10001001C(v32);
        sub_10001001C(v31);
      }

      uint64_t result = swift_release();
      uint64_t v14 = v21;
      uint64_t v15 = v19;
      if ((v7 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_12:
      unint64_t v22 = __CocoaSet.Iterator.next()(result);
      if (v22)
      {
        int64_t v23 = v22;
        v44 = v22;
        uint64_t v24 = sub_10000FF78();
        swift_unknownObjectRetain(v23);
        sub_1000571A8((uint64_t)&v45, (uint64_t)&v44, (uint64_t)&type metadata for Swift.AnyObject + 8, v24);
        uint64_t v25 = v45;
        uint64_t v26 = swift_unknownObjectRelease(v23);
        uint64_t v21 = v14;
        uint64_t v19 = v15;
        if (v25) {
          continue;
        }
      }

      return sub_10000FE04(v7);
    }
  }

  __break(1u);
  return result;
}

    *(_OWORD *)(a1 + 144) = a2[9];
    return a1;
  }

  if (!v19)
  {
    swift_release();
    goto LABEL_28;
  }

  uint64_t v20 = *((void *)a2 + 19);
  *(void *)(a1 + 144) = v19;
  *(void *)(a1 + 152) = v20;
  swift_retain(v20);
  swift_release();
  return a1;
}

void sub_10000F474(os_log_s *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  if ((v3 & 0xC000000000000001LL) != 0)
  {
    if (v3 < 0) {
      uint64_t v4 = *(void *)(v1 + 16);
    }
    else {
      uint64_t v4 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v3);
    uint64_t v5 = __CocoaSet.makeIterator()(v4);
    uint64_t v6 = sub_10000FF78();
    uint64_t v7 = sub_10000FE6C( &qword_100082090,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection,  (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
    uint64_t v8 = Set.Iterator.init(_cocoa:)(v5, v6, v7);
    uint64_t v3 = v41;
    uint64_t v37 = v42;
    uint64_t v9 = v43;
    int64_t v10 = v44;
    unint64_t v11 = v45;
  }

  else
  {
    uint64_t v37 = v3 + 56;
    uint64_t v9 = ~(-1LL << *(_BYTE *)(v3 + 32));
    sub_10000FFE4();
    unint64_t v11 = v12 & v13;
    swift_bridgeObjectRetain(v3);
    int64_t v10 = 0LL;
  }

  int64_t v36 = (unint64_t)(v9 + 64) >> 6;
  if (v3 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v11)
    {
      uint64_t v14 = (v11 - 1) & v11;
      unint64_t v15 = __clz(__rbit64(v11)) | (v10 << 6);
      int64_t v16 = v10;
      goto LABEL_27;
    }

    int64_t v22 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      break;
    }
    if (v22 >= v36) {
      goto LABEL_32;
    }
    unint64_t v23 = *(void *)(v37 + 8 * v22);
    int64_t v16 = v10 + 1;
    if (!v23)
    {
      int64_t v16 = v10 + 2;
      if (v10 + 2 >= v36) {
        goto LABEL_32;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v16);
      if (!v23)
      {
        int64_t v16 = v10 + 3;
        if (v10 + 3 >= v36) {
          goto LABEL_32;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v16);
        if (!v23)
        {
          int64_t v16 = v10 + 4;
          if (v10 + 4 >= v36) {
            goto LABEL_32;
          }
          unint64_t v23 = *(void *)(v37 + 8 * v16);
          if (!v23)
          {
            int64_t v24 = v10 + 5;
            while (v24 < v36)
            {
              unint64_t v23 = *(void *)(v37 + 8 * v24++);
              if (v23)
              {
                int64_t v16 = v24 - 1;
                goto LABEL_26;
              }
            }

LABEL_26:
    uint64_t v14 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v16 << 6);
LABEL_27:
    uint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * v15);
    uint64_t v21 = sub_10000FFC4();
    if (!v20) {
      goto LABEL_32;
    }
    while (1)
    {
      os_log_type_t v25 = static os_log_type_t.default.getter(v21);
      if (os_log_type_enabled(a1, v25))
      {
        swift_retain_n(v20, 2LL);
        uint64_t v26 = swift_slowAlloc(12LL, -1LL);
        uint64_t v27 = swift_slowAlloc(32LL, -1LL);
        uint64_t v38 = v20;
        uint64_t v39 = v27;
        *(_DWORD *)uint64_t v26 = 136446210;
        int64_t v28 = a1;
        uint64_t v29 = v9;
        uint64_t v30 = sub_10000FF78();
        sub_10000FFC4();
        uint64_t v31 = String.init<A>(describing:)(&v38, v30);
        uint64_t v33 = v32;
        sub_100045370(v31, v32, &v39);
        *(void *)(v26 + 4) = v34;
        swift_release_n(v20, 2LL);
        uint64_t v35 = v33;
        uint64_t v9 = v29;
        a1 = v28;
        swift_bridgeObjectRelease(v35);
        _os_log_impl( (void *)&_mh_execute_header,  v28,  v25,  "State dump: LockdownService control channel connection: %{public}s",  (uint8_t *)v26,  0xCu);
        swift_arrayDestroy(v27, 1LL);
        sub_10001001C(v27);
        sub_10001001C(v26);
      }

      uint64_t v8 = sub_10000FFF8();
      int64_t v10 = v16;
      unint64_t v11 = v14;
      if ((v3 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_10:
      uint64_t v17 = __CocoaSet.Iterator.next()(v8);
      if (v17)
      {
        uint64_t v18 = v17;
        uint64_t v38 = v17;
        uint64_t v19 = sub_10000FF78();
        swift_unknownObjectRetain(v18);
        swift_dynamicCast(&v39, &v38, (char *)&type metadata for Swift.AnyObject + 8, v19, 7LL);
        uint64_t v20 = v39;
        uint64_t v21 = swift_unknownObjectRelease(v18);
        int64_t v16 = v10;
        uint64_t v14 = v11;
        if (v20) {
          continue;
        }
      }

      goto LABEL_32;
    }
  }

  __break(1u);
}

  __break(1u);
}

    int64_t v16 = (v24 - 1) & v24;
    uint64_t v17 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_27:
    uint64_t v26 = *(void *)(*(void *)(v3 + 48) + 8 * v17);
    int64_t v22 = sub_10000FFDC();
    if (!v26) {
      goto LABEL_30;
    }
    while (1)
    {
      dispatch thunk of XPCConnection.cancel()(v22);
      uint64_t v8 = sub_100012464();
      unint64_t v11 = v18;
      uint64_t v12 = v16;
      if ((v3 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_10:
      uint64_t v19 = __CocoaSet.Iterator.next()(v8);
      if (v19)
      {
        uint64_t v20 = v19;
        uint64_t v27 = v19;
        sub_100026D24();
        sub_100026EF0();
        sub_100026E78((uint64_t)&v28, (uint64_t)&v27, (uint64_t)&type metadata for Swift.AnyObject + 8);
        uint64_t v21 = v28;
        int64_t v22 = swift_unknownObjectRelease(v20);
        uint64_t v18 = v11;
        int64_t v16 = v12;
        if (v21) {
          continue;
        }
      }

      goto LABEL_30;
    }
  }

  __break(1u);
}

    v71 = (v49 - 1) & v49;
    uint64_t v44 = __clz(__rbit64(v49)) + (v45 << 6);
    goto LABEL_27;
  }

  __break(1u);
}

    __break(1u);
    goto LABEL_27;
  }

  if ((a3 & 1) != 0)
  {
    if (v8 < 0) {
      uint64_t v9 = *v4;
    }
    else {
      uint64_t v9 = v8 & 0xFFFFFFFFFFFFFF8LL;
    }
    int64_t v10 = __CocoaSet.member(for:)(result, a2, v9);
    uint64_t v27 = v10;
    unint64_t v11 = type metadata accessor for ControlChannelConnection(0LL);
    swift_bridgeObjectRetain(v8);
    swift_unknownObjectRetain(v10);
    swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v11, 7LL);
    uint64_t v12 = v28;
    swift_unknownObjectRelease(v10);
    uint64_t v13 = sub_1000543F4();
    swift_release(v12);
    uint64_t v14 = v8;
LABEL_23:
    swift_bridgeObjectRelease(v14);
    return v13;
  }

  __break(1u);
}

uint64_t sub_10000F7F8()
{
  sub_10000FF38((void *)(v0 + 32));
  swift_release(*(void *)(v0 + 80));
  return v0;
}

uint64_t sub_10000F82C()
{
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

uint64_t type metadata accessor for LockdownService()
{
  return objc_opt_self(&OBJC_CLASS____TtC20remotepairingdeviced15LockdownService);
}

double sub_10000F86C()
{
  return sub_10000E994();
}

void sub_10000F88C()
{
}

void sub_10000F8AC()
{
}

void sub_10000F8CC(os_log_s *a1)
{
}

void *sub_10000F8EC(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
    && _CocoaArrayWrapper.endIndex.getter(&_swiftEmptyArrayStorage))
  {
    sub_100047910((unint64_t)&_swiftEmptyArrayStorage);
  }

  else
  {
    uint64_t v6 = &_swiftEmptySetSingleton;
  }

  v3[4] = a1;
  v3[5] = v6;
  v3[2] = a2;
  uint64_t v7 = type metadata accessor for SystemXPCListenerConnection(0LL);
  sub_100010000();
  id v8 = a2;
  uint64_t v9 = static RemoteServiceNames.lockdownService.getter();
  uint64_t v11 = v10;
  id v12 = v8;
  uint64_t v13 = static SystemXPCConnection.machServiceListenerConnection(name:targetQueue:)(v9, v11, v8);
  swift_bridgeObjectRelease(v11);
  sub_100010008();

  v3[3] = swift_dynamicCastClassUnconditional(v13, v7, 0LL, 0LL, 0LL);
  return v3;
}

uint64_t sub_10000F9E0()
{
  uint64_t v0 = dispatch thunk of SystemXPCListenerConnection.setPeerConnectionHandler(_:)(sub_10000FA10, 0LL);
  return dispatch thunk of XPCConnection.activate()(v0);
}

uint64_t sub_10000FA10(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for XPCError(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  uint64_t v11 = (char *)&v38 - v10;
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v38 - v13;
  uint64_t v15 = sub_10000FD7C(&qword_100080F90);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (uint64_t *)((char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10000FDBC(a1, (uint64_t)v18);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18, v15);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v20 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v3 + 32))(v14, v18, v2);
    os_log_type_t v21 = static os_log_type_t.error.getter(v20);
    int64_t v22 = (os_log_s *)qword_1000845F0;
    unint64_t v23 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    v23(v11, v14, v2);
    os_log_type_t v24 = v21;
    if (os_log_type_enabled(v22, v21))
    {
      os_log_type_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v26 = swift_slowAlloc(32LL, -1LL);
      os_log_t v39 = v22;
      uint64_t v27 = v26;
      uint64_t v41 = v26;
      *(_DWORD *)os_log_type_t v25 = 136315138;
      uint64_t v38 = v25 + 4;
      v23(v7, v11, v2);
      uint64_t v28 = String.init<A>(describing:)(v7, v2);
      uint64_t v30 = v29;
      sub_100045370(v28, v29, &v41);
      uint64_t v40 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v38, v25 + 12);
      swift_bridgeObjectRelease(v30);
      uint64_t v32 = *(void (**)(char *, uint64_t))(v3 + 8);
      v32(v11, v2);
      _os_log_impl( (void *)&_mh_execute_header,  v39,  v24,  "Failed to start dummy lockdown service with error: %s",  v25,  0xCu);
      swift_arrayDestroy(v27, 1LL);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v25, -1LL, -1LL);
      return ((uint64_t (*)(char *, uint64_t))v32)(v14, v2);
    }

    else
    {
      uint64_t v37 = *(void (**)(char *, uint64_t))(v3 + 8);
      v37(v11, v2);
      return ((uint64_t (*)(char *, uint64_t))v37)(v14, v2);
    }
  }

  else
  {
    uint64_t v34 = *v18;
    uint64_t v35 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    os_log(_:dso:log:_:_:)( v35,  &_mh_execute_header,  qword_1000845F0,  "Unexpected peer connected to lockdown mach service on device without liblockdown",  80LL,  2LL,  &_swiftEmptyArrayStorage);
    uint64_t v36 = swift_retain(v34);
    dispatch thunk of XPCConnection.cancel()(v36);
    return swift_release_n(v34, 2LL);
  }

uint64_t sub_10000FCDC()
{
  swift_release(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return v0;
}

uint64_t sub_10000FD10()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t type metadata accessor for DummyLockdownService()
{
  return objc_opt_self(&OBJC_CLASS____TtC20remotepairingdeviced20DummyLockdownService);
}

uint64_t sub_10000FD50()
{
  return swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 40LL));
}

uint64_t sub_10000FD5C()
{
  return sub_10000F9E0();
}

uint64_t sub_10000FD7C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_10000FDBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD7C(&qword_100080F90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000FE04(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

void sub_10000FE0C(uint64_t a1)
{
}

uint64_t sub_10000FE14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000FE24(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10000FE30()
{
  return sub_10000EDD4(*(void *)(v0 + 16));
}

uint64_t sub_10000FE3C(uint64_t a1, uint64_t a2)
{
  return lockdown_recv(*(void *)(v2 + 16), a1, a2);
}

uint64_t sub_10000FE50(uint64_t a1, uint64_t a2)
{
  return lockdown_send(*(void *)(v2 + 16), a1, a2);
}

uint64_t sub_10000FE64()
{
  return lockdown_disconnect(*(void *)(v0 + 16));
}

uint64_t sub_10000FE6C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10000FEAC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10000FED4()
{
  return sub_10000EE30(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10000FEE0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10000FF0C()
{
  return sub_10000EEF8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void *sub_10000FF14(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t sub_10000FF38(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10000FF5C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10000FF6C(uint64_t a1)
{
  return swift_allocObject(a1, 24LL, 7LL);
}

uint64_t sub_10000FF78()
{
  return type metadata accessor for ControlChannelConnection(0LL);
}

  ;
}

uint64_t sub_10000FF98(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 0LL, 0LL);
}

uint64_t sub_10000FFA4(uint64_t a1)
{
  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_10000FFB4(uint64_t a1)
{
  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_10000FFC4()
{
  return swift_retain(v0);
}

  ;
}

uint64_t sub_10000FFDC()
{
  return swift_retain(v0);
}

  ;
}

uint64_t sub_10000FFF8()
{
  return swift_release(v0);
}

uint64_t sub_100010000()
{
  return swift_retain(v0);
}

uint64_t sub_100010008()
{
  return swift_release(v0);
}

uint64_t sub_100010010(uint64_t a1)
{
  return swift_allocObject(a1, 32LL, 7LL);
}

uint64_t sub_10001001C(uint64_t a1)
{
  return swift_slowDealloc(a1, -1LL, -1LL);
}

uint64_t sub_100010028(uint64_t a1)
{
  return v1 & 1;
}

void sub_10001004C()
{
  uint64_t v8 = sub_10000FD7C(&qword_1000810F8);
  sub_100012280();
  __chkstk_darwin(v9, v10);
  sub_100012304();
  sub_10001234C();
  __chkstk_darwin(v11, v12);
  sub_1000123CC();
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)v34 - v15;
  uint64_t v17 = *(int *)(v8 + 48);
  uint64_t v18 = v3 + v17;
  uint64_t v19 = *v0;
  sub_100012290(v18, (uint64_t)v0 + v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  sub_100012290((uint64_t)v16, v18, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
  uint64_t v20 = swift_retain(v19);
  uint64_t v21 = static os_log_type_t.default.getter(v20);
  sub_100012380(v21, (uint64_t)&_mh_execute_header, qword_1000845F0, (uint64_t)"Handling pairing deletion request", 33LL);
  uint64_t v22 = sub_1000123E8();
  XPCDictionary.entitlements.getter(v22);
  sub_100012498();
  sub_100010BD0();
  if (v1)
  {
    uint64_t v35 = v19;
    uint64_t v23 = *(void *)(v2 + 8);
    uint64_t v24 = sub_100012378(v4);
    os_log_type_t v25 = static os_log_type_t.error.getter(v24);
    if (sub_100012320(v25))
    {
      sub_1000122C4();
      sub_1000122C4();
      uint64_t v26 = sub_1000122E0(12LL);
      v34[2] = v23;
      uint64_t v27 = (_DWORD *)v26;
      uint64_t v36 = sub_1000122E0(32LL);
      *uint64_t v27 = 136315138;
      sub_1000122B0();
      uint64_t v28 = sub_10000FD7C(&qword_100081A10);
      uint64_t v29 = sub_100012388(v28);
      sub_100012458(v29, v30);
      sub_100012330(v31);
      sub_10001246C();
      sub_100012360();
      sub_100012360();
      sub_1000122CC((void *)&_mh_execute_header, v32, v33, "Pairing deletion failed with error: %s");
      sub_100012450(v36);
      sub_10001001C(v36);
      sub_10001001C((uint64_t)v27);
    }

    sub_100012490();
    swift_release(v35);
    sub_100012378((uint64_t)v16);
  }

  else
  {
    swift_release(v19);
    sub_100012370(v4);
    sub_100012370((uint64_t)v16);
  }

  sub_100012444();
  sub_100012268();
}

void sub_100010234( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  uint64_t v26 = v25;
  uint64_t v27 = sub_10000FD7C(&qword_1000810F8);
  sub_100012280();
  __chkstk_darwin(v28, v29);
  sub_10000FFCC();
  uint64_t v32 = v31 - v30;
  type metadata accessor for XPCDictionary(0LL);
  sub_10001234C();
  __chkstk_darwin(v33, v34);
  sub_1000123B0();
  __chkstk_darwin(v35, v36);
  uint64_t v38 = (char *)v58 - v37;
  uint64_t v39 = *(int *)(v27 + 48);
  uint64_t v40 = v32 + v39;
  uint64_t v41 = *v26;
  sub_100012290(v40, (uint64_t)v26 + v39, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16));
  sub_100012290((uint64_t)v38, v40, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 32));
  uint64_t v42 = swift_retain(v41);
  uint64_t v43 = static os_log_type_t.debug.getter(v42);
  sub_100012380(v43, (uint64_t)&_mh_execute_header, qword_1000845F0, (uint64_t)"Handling paired host list request", 33LL);
  uint64_t v44 = sub_1000123E8();
  XPCDictionary.entitlements.getter(v44);
  sub_100010C90();
  if (v20)
  {
    uint64_t v45 = *(void *)(v21 + 8);
    uint64_t v46 = sub_100012378(v22);
    os_log_type_t v47 = static os_log_type_t.error.getter(v46);
    if (sub_100012320(v47))
    {
      sub_1000122C4();
      sub_1000122C4();
      uint64_t v48 = sub_1000122E0(12LL);
      uint64_t v60 = v45;
      v49 = (_DWORD *)v48;
      uint64_t v59 = sub_1000122E0(32LL);
      a10 = v59;
      _DWORD *v49 = 136315138;
      sub_1000122B0();
      uint64_t v50 = sub_10000FD7C(&qword_100081A10);
      uint64_t v51 = sub_100012388(v50);
      uint64_t v53 = v52;
      sub_100045370(v51, v52, &a10);
      uint64_t v61 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v58[1], v49 + 3);
      swift_bridgeObjectRelease(v53);
      sub_100012360();
      sub_100012360();
      sub_1000122CC((void *)&_mh_execute_header, v55, v56, "Listing paired hosts failed with error: %s");
      uint64_t v57 = v59;
      sub_100012450(v59);
      sub_10001001C(v57);
      sub_10001001C((uint64_t)v49);
    }

    sub_100012490();
    sub_1000124B8();
    sub_100012378((uint64_t)v38);
  }

  else
  {
    sub_1000124B8();
    sub_100012370(v22);
    sub_100012370((uint64_t)v38);
  }

  sub_100012444();
  sub_100012268();
}

#error "100010570: call analysis failed (funcsize=77)"
void sub_1000105A0( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  sub_100012298();
  a19 = v24;
  a20 = v25;
  a10 = v20;
  uint64_t v27 = v26;
  uint64_t v28 = sub_10000FD7C(&qword_1000810F8);
  sub_100012280();
  __chkstk_darwin(v29, v30);
  sub_1000122E8();
  sub_10001241C();
  __chkstk_darwin(v31, v32);
  sub_100012394();
  __chkstk_darwin(v33, v34);
  uint64_t v36 = (char *)&a9 - v35;
  uint64_t v37 = *(int *)(v28 + 48);
  uint64_t v38 = v21 + v37;
  sub_100012290(v21 + v37, v27 + v37, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16));
  uint64_t v39 = sub_100012290((uint64_t)v36, v38, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 32));
  XPCDictionary.entitlements.getter(v39);
  sub_100010CE4();
  sub_100012368(v22);
  sub_100012368((uint64_t)v36);
  sub_100012444();
  sub_100012268();
}

void sub_100010684()
{
  v28[1] = v4;
  uint64_t v6 = v5;
  uint64_t v29 = v7;
  uint64_t v8 = sub_10000FD7C(&qword_1000810F8);
  sub_100012280();
  __chkstk_darwin(v9, v10);
  sub_100012404();
  uint64_t v11 = type metadata accessor for XPCDictionary(0LL);
  sub_10001241C();
  __chkstk_darwin(v12, v13);
  sub_100012394();
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v18 = (char *)v28 - v17;
  uint64_t v19 = static os_log_type_t.debug.getter(v16);
  sub_100012380( v19,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"Handling current host trust state request",  41LL);
  uint64_t v20 = *(int *)(v8 + 48);
  uint64_t v21 = v1 + v20;
  sub_100012290(v1 + v20, v6 + v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  uint64_t v22 = sub_100012290((uint64_t)v18, v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
  XPCDictionary.entitlements.getter(v22);
  sub_100010A9C();
  if (v0)
  {
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
    uint64_t v24 = v23(v2, v11);
    uint64_t v25 = static os_log_type_t.error.getter(v24);
    uint64_t v26 = sub_100012380( v25,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"Querying current host trust state failed with error",  51LL);
    swift_willThrow(v26);
    v23((uint64_t)v18, v11);
  }

  else
  {
    uint64_t v27 = sub_10002F030();
    sub_100012368(v2);
    sub_100012368((uint64_t)v18);
    *uint64_t v29 = v27;
  }

  sub_100012268();
}

void sub_100010808()
{
  uint64_t v8 = sub_10000FD7C(&qword_1000810F8);
  sub_100012280();
  __chkstk_darwin(v9, v10);
  sub_100012304();
  sub_10001234C();
  __chkstk_darwin(v11, v12);
  sub_1000123CC();
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)v34 - v15;
  uint64_t v17 = *(int *)(v8 + 48);
  uint64_t v18 = v3 + v17;
  uint64_t v19 = *v0;
  sub_100012290(v18, (uint64_t)v0 + v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  sub_100012290((uint64_t)v16, v18, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
  uint64_t v20 = swift_retain(v19);
  uint64_t v21 = static os_log_type_t.debug.getter(v20);
  sub_100012380( v21,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"Handling promptless pairing request",  35LL);
  uint64_t v22 = sub_1000123E8();
  XPCDictionary.entitlements.getter(v22);
  sub_100012498();
  sub_100011E18();
  if (v1)
  {
    uint64_t v35 = v19;
    uint64_t v23 = *(void *)(v2 + 8);
    uint64_t v24 = sub_100012378(v4);
    os_log_type_t v25 = static os_log_type_t.error.getter(v24);
    if (sub_100012320(v25))
    {
      sub_1000122C4();
      sub_1000122C4();
      uint64_t v26 = sub_1000122E0(12LL);
      v34[2] = v23;
      uint64_t v27 = (_DWORD *)v26;
      uint64_t v36 = sub_1000122E0(32LL);
      *uint64_t v27 = 136315138;
      sub_1000122B0();
      uint64_t v28 = sub_10000FD7C(&qword_100081A10);
      uint64_t v29 = sub_100012388(v28);
      sub_100012458(v29, v30);
      sub_100012330(v31);
      sub_10001246C();
      sub_100012360();
      sub_100012360();
      sub_1000122CC((void *)&_mh_execute_header, v32, v33, "Allowing promptless pairing failed with error: %s");
      sub_100012450(v36);
      sub_10001001C(v36);
      sub_10001001C((uint64_t)v27);
    }

    sub_100012490();
    swift_release(v35);
    sub_100012378((uint64_t)v16);
  }

  else
  {
    swift_release(v19);
    sub_100012370(v4);
    sub_100012370((uint64_t)v16);
  }

  sub_100012444();
  sub_100012268();
}

uint64_t sub_1000109F0(uint64_t a1)
{
  uint64_t v2 = v1;
  dispatch thunk of XPCConnection.activate()(a1);
  uint64_t v3 = *sub_1000124AC();
  swift_retain(v2);
  uint64_t v4 = sub_100046164(0xD000000000000021LL, 0x8000000100066D70LL, v3, v2);
  uint64_t v5 = static os_log_type_t.debug.getter(v4);
  os_log(_:dso:log:_:_:)( v5,  &_mh_execute_header,  qword_1000845F0,  "Started pairing management XPC service",  38LL,  2LL,  &_swiftEmptyArrayStorage);
  return sub_100011988();
}

uint64_t sub_100010A7C()
{
  return sub_10001190C();
}

uint64_t sub_100010A9C()
{
  uint64_t v0 = type metadata accessor for RemotePairingError(0LL);
  sub_100012280();
  __chkstk_darwin(v1, v2);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = XPCDictionary.subscript.getter(0xD00000000000002CLL, 0x8000000100066CF0LL);
  if ((result & 1) == 0)
  {
    uint64_t result = _RPIsAppleInternal();
    if ((result & 1) == 0)
    {
      uint64_t v6 = sub_10000FE6C( (unint64_t *)&unk_1000813E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
      static Error<>.permissionDenied.getter(v0, v6);
      uint64_t v7 = sub_10000FE6C( (unint64_t *)&unk_1000819E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
      swift_allocError(v0, v7, 0LL, 0LL);
      uint64_t v8 = Error<>.init(_:_:)(v4, 0xD00000000000004ALL, 0x8000000100066D20LL, v0, v6);
      return swift_willThrow(v8);
    }
  }

  return result;
}

uint64_t sub_100010BD0()
{
  uint64_t v2 = type metadata accessor for HostDeletionTarget(0LL);
  __chkstk_darwin(v2, v3);
  sub_100012404();
  uint64_t result = sub_100010A9C();
  if (!v0)
  {
    DeletePairedHostRecordRequest.target.getter(result);
    sub_10002DA00(v1);
    uint64_t v5 = sub_10001242C();
    return EmptyResponse.init()(v5);
  }

  return result;
}

uint64_t sub_100010C90()
{
  uint64_t result = sub_100010A9C();
  if (!v0)
  {
    sub_10002E1D4();
    return ListPairedHostRecordResponse.init(hosts:)();
  }

  return result;
}

uint64_t sub_100010CE4()
{
  uint64_t result = sub_100010A9C();
  if (!v0)
  {
    sub_10002AD98();
    uint64_t v2 = sub_100048C04();
    uint64_t v4 = v3;
    sub_10000FFF8();
    return FetchNetworkPairingSessionIDResponse.init(networkPairingSessionID:)(v2, v4);
  }

  return result;
}

void sub_100010D5C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  uint64_t v24 = type metadata accessor for PinNotificationEvent(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24, v26);
  sub_10000FFCC();
  uint64_t v29 = v28 - v27;
  sub_100010A9C();
  if (!v21)
  {
    uint64_t v30 = v20;
    uint64_t v31 = type metadata accessor for SystemXPCPeerConnection(0LL);
    WirelessPairingSession = (_xpc_endpoint_s *)CreateWirelessPairingSessionRequest.endpoint.getter();
    xpc_connection_t v33 = xpc_connection_create_from_endpoint(WirelessPairingSession);
    swift_unknownObjectRelease(WirelessPairingSession);
    uint64_t v34 = static SystemXPCConnection.unsafePeer(from:)(v33);
    swift_unknownObjectRelease(v33);
    uint64_t v52 = v31;
    uint64_t v35 = swift_dynamicCastClassUnconditional(v34, v31, 0LL, 0LL, 0LL);
    dispatch thunk of XPCConnection.setTargetQueue(_:)(*(void *)(v30 + 40));
    uint64_t v36 = swift_retain(v34);
    LOBYTE(WirelessPairingSession) = CreateWirelessPairingSessionRequest.requestCustomPinHandler.getter(v36);
    swift_beginAccess(v30 + 32, v54, 33LL, 0LL);
    sub_100055674(WirelessPairingSession & 1, v35);
    swift_endAccess(v54);
    uint64_t v53 = v34;
    sub_10000FFF8();
    uint64_t v37 = swift_allocObject(&unk_1000768F8, 24LL, 7LL);
    swift_weakInit(v37 + 16, v35);
    uint64_t v38 = swift_allocObject(&unk_100076920, 32LL, 7LL);
    *(void *)(v38 + swift_weakDestroy(v0 + 16) = v37;
    *(void *)(v38 + 24) = v30;
    swift_retain(v37);
    swift_retain(v30);
    dispatch thunk of SystemXPCPeerConnection.setEventHandler(_:)(sub_100012210, v38);
    swift_release(v37);
    uint64_t v39 = sub_10000FFF8();
    dispatch thunk of XPCConnection.activate()(v39);
    (*(void (**)(uint64_t, void, uint64_t))(v25 + 104))( v29,  enum case for PinNotificationEvent.empty(_:),  v24);
    uint64_t v40 = sub_10000FE6C( &qword_100081108,  (uint64_t (*)(uint64_t))&type metadata accessor for PinNotificationEvent,  (uint64_t)&protocol conformance descriptor for PinNotificationEvent);
    uint64_t v41 = sub_10000FE6C( (unint64_t *)&unk_100081110,  (uint64_t (*)(uint64_t))&type metadata accessor for PinNotificationEvent,  (uint64_t)&protocol conformance descriptor for PinNotificationEvent);
    XPCConnection.send<A>(value:)(v29, v24, v40, v41);
    sub_1000123F4();
    uint64_t v42 = sub_10001190C();
    os_log_type_t v43 = static os_log_type_t.debug.getter(v42);
    uint64_t v44 = (os_log_s *)qword_1000845F0;
    os_log_type_t v45 = v43;
    uint64_t v46 = os_log_type_enabled((os_log_t)qword_1000845F0, v43);
    if ((_DWORD)v46)
    {
      swift_retain_n(v53, 2LL);
      os_log_type_t v47 = (uint8_t *)sub_1000122E0(12LL);
      uint64_t v48 = sub_1000122E0(32LL);
      v54[0] = v48;
      *(_DWORD *)os_log_type_t v47 = 136315138;
      a10 = v35;
      swift_retain(v53);
      uint64_t v49 = String.init<A>(describing:)(&a10, v52);
      sub_100045370(v49, v50, v54);
      a10 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&a10, &a11, v47 + 4, v47 + 12);
      swift_release_n(v53, 2LL);
      sub_10001246C();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Configured wireless pairing session for %s", v47, 0xCu);
      sub_100012450(v48);
      sub_10001001C(v48);
      uint64_t v46 = sub_10001001C((uint64_t)v47);
    }

    EmptyResponse.init()(v46);
    sub_1000124B8();
  }

  sub_100012268();
}

uint64_t sub_1000110B4(uint64_t a1, uint64_t a2, uint8_t *a3)
{
  v67 = a3;
  v68 = (os_log_s *)type metadata accessor for XPCError(0LL);
  uint64_t v5 = *((void *)v68 - 1);
  uint64_t v7 = __chkstk_darwin(v68, v6);
  v65 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  v66 = (char *)&v63 - v11;
  __chkstk_darwin(v10, v12);
  v69 = (char *)&v63 - v13;
  uint64_t v14 = type metadata accessor for XPCDictionary(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  uint64_t v19 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v17, v20);
  uint64_t v23 = (char *)&v63 - v22;
  __chkstk_darwin(v21, v24);
  uint64_t v26 = (char *)&v63 - v25;
  uint64_t v27 = sub_10000FD7C(&qword_100081A90);
  __chkstk_darwin(v27, v28);
  uint64_t v30 = (char *)&v63 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v72, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v32 = result;
    sub_100012218(a1, (uint64_t)v30);
    if (swift_getEnumCaseMultiPayload(v30, v27) == 1)
    {
      uint64_t v34 = v68;
      xpc_connection_t v33 = v69;
      uint64_t v35 = (*(uint64_t (**)(char *, char *, os_log_s *))(v5 + 32))(v69, v30, v68);
      os_log_type_t v36 = static os_log_type_t.error.getter(v35);
      uint64_t v37 = (os_log_s *)qword_1000845F0;
      uint64_t v38 = *(void (**)(char *, char *, os_log_s *))(v5 + 16);
      uint64_t v39 = v66;
      v38(v66, v33, v34);
      os_log_type_t v40 = v36;
      if (os_log_type_enabled(v37, v36))
      {
        uint64_t v41 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v64 = swift_slowAlloc(32LL, -1LL);
        v71[0] = v64;
        *(_DWORD *)uint64_t v41 = 136315138;
        v63 = v41 + 4;
        uint64_t v42 = v65;
        v38(v65, v39, v34);
        uint64_t v43 = String.init<A>(describing:)(v42, v34);
        uint64_t v45 = v44;
        sub_100045370(v43, v44, v71);
        uint64_t v70 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71, v63, v41 + 12);
        uint64_t v47 = v45;
        uint64_t v34 = v68;
        swift_bridgeObjectRelease(v47);
        uint64_t v48 = *(void (**)(char *, os_log_s *))(v5 + 8);
        v48(v39, v34);
        _os_log_impl( (void *)&_mh_execute_header,  v37,  v40,  "Received error from wireless pairing session peer: %s",  v41,  0xCu);
        uint64_t v49 = v64;
        swift_arrayDestroy(v64, 1LL);
        swift_slowDealloc(v49, -1LL, -1LL);
        swift_slowDealloc(v41, -1LL, -1LL);
      }

      else
      {
        uint64_t v48 = *(void (**)(char *, os_log_s *))(v5 + 8);
        v48(v39, v34);
      }

      swift_beginAccess(v67 + 32, v71, 33LL, 0LL);
      swift_retain(v32);
      sub_100054EA0();
      swift_endAccess(v71);
      swift_release(v32);
      sub_10001190C();
      swift_release(v32);
      uint64_t v61 = v69;
      uint64_t v62 = v34;
    }

    else
    {
      uint64_t v50 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v26, v30, v14);
      os_log_type_t v51 = static os_log_type_t.error.getter(v50);
      uint64_t v52 = (os_log_s *)qword_1000845F0;
      uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
      v53(v23, v26, v14);
      os_log_type_t v54 = v51;
      if (os_log_type_enabled(v52, v51))
      {
        uint64_t v55 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        v69 = (char *)swift_slowAlloc(32LL, -1LL);
        v71[0] = (uint64_t)v69;
        v68 = v52;
        *(_DWORD *)uint64_t v55 = 136315138;
        v67 = v55 + 4;
        v53(v19, v23, v14);
        uint64_t v56 = String.init<A>(describing:)(v19, v14);
        uint64_t v58 = v57;
        sub_100045370(v56, v57, v71);
        uint64_t v70 = v59;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71, v67, v55 + 12);
        swift_bridgeObjectRelease(v58);
        uint64_t v48 = *(void (**)(char *, os_log_s *))(v15 + 8);
        v48(v23, (os_log_s *)v14);
        _os_log_impl( (void *)&_mh_execute_header,  v68,  v54,  "Received unexpected message from wireless pairing session peer: %s",  v55,  0xCu);
        uint64_t v60 = v69;
        swift_arrayDestroy(v69, 1LL);
        swift_slowDealloc(v60, -1LL, -1LL);
        swift_slowDealloc(v55, -1LL, -1LL);
      }

      else
      {
        uint64_t v48 = *(void (**)(char *, os_log_s *))(v15 + 8);
        v48(v23, (os_log_s *)v14);
      }

      swift_release(v32);
      uint64_t v61 = v26;
      uint64_t v62 = (void *)v14;
    }

    return ((uint64_t (*)(char *, void *))v48)(v61, v62);
  }

  return result;
}

void sub_1000115A4(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v18 = v3 + 64;
  uint64_t v4 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(v3 + 64);
  int64_t v19 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(v3);
  int64_t v7 = 0LL;
  while (v6)
  {
    unint64_t v8 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v9 = v8 | (v7 << 6);
LABEL_17:
    if ((*(_BYTE *)(*(void *)(v3 + 56) + v9) & 1) != 0)
    {
      uint64_t v13 = swift_retain(*(void *)(*(void *)(v3 + 48) + 8 * v9));
      uint64_t v14 = static os_log_type_t.debug.getter(v13);
      os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  qword_1000845F0,  "Custom pin handler found.  Sending pin.",  39LL,  2LL,  &_swiftEmptyArrayStorage);
      uint64_t v15 = type metadata accessor for PinNotificationEvent(0LL);
      uint64_t v16 = sub_10000FE6C( &qword_100081108,  (uint64_t (*)(uint64_t))&type metadata accessor for PinNotificationEvent,  (uint64_t)&protocol conformance descriptor for PinNotificationEvent);
      uint64_t v17 = sub_10000FE6C( (unint64_t *)&unk_100081110,  (uint64_t (*)(uint64_t))&type metadata accessor for PinNotificationEvent,  (uint64_t)&protocol conformance descriptor for PinNotificationEvent);
      XPCConnection.send<A>(value:)(a1, v15, v16, v17);
      sub_100012464();
    }
  }

  if (__OFADD__(v7++, 1LL))
  {
    __break(1u);
    goto LABEL_26;
  }

  if (v7 >= v19) {
    goto LABEL_24;
  }
  unint64_t v11 = *(void *)(v18 + 8 * v7);
  if (v11)
  {
LABEL_16:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
    goto LABEL_17;
  }

  int64_t v12 = v7 + 1;
  if (v7 + 1 >= v19) {
    goto LABEL_24;
  }
  unint64_t v11 = *(void *)(v18 + 8 * v12);
  if (v11) {
    goto LABEL_15;
  }
  int64_t v12 = v7 + 2;
  if (v7 + 2 >= v19) {
    goto LABEL_24;
  }
  unint64_t v11 = *(void *)(v18 + 8 * v12);
  if (v11) {
    goto LABEL_15;
  }
  int64_t v12 = v7 + 3;
  if (v7 + 3 >= v19)
  {
LABEL_24:
    swift_release(v3);
    return;
  }

  unint64_t v11 = *(void *)(v18 + 8 * v12);
  if (v11)
  {
LABEL_15:
    int64_t v7 = v12;
    goto LABEL_16;
  }

  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      break;
    }
    if (v7 >= v19) {
      goto LABEL_24;
    }
    unint64_t v11 = *(void *)(v18 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_16;
    }
  }

uint64_t sub_10001190C()
{
  if ((static Defaults.networkPairingEnabled.getter() & 1) != 0
    || (sub_10000FF98(v0 + 32, (uint64_t)v3), *(void *)(*(void *)(v0 + 32) + 16LL))
    || *(_BYTE *)(v0 + 96) == 1)
  {
    char v1 = *(_BYTE *)(*sub_1000124AC() + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager_firstUnlockHasCompleted);
  }

  else
  {
    char v1 = 0;
  }

  return sub_10002F26C(v1);
}

uint64_t sub_100011988()
{
  aBlock[4] = sub_1000120A8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100040708;
  aBlock[3] = &unk_100076870;
  uint64_t v2 = _Block_copy(aBlock);
  uint64_t v3 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  sub_10000FFCC();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = swift_retain(v0);
  static DispatchQoS.unspecified.getter(v9);
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  sub_10001241C();
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = &_swiftEmptyArrayStorage;
  unint64_t v15 = sub_1000120C8();
  uint64_t v16 = sub_10000FD7C(&qword_100081100);
  unint64_t v17 = sub_100012108();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v10, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v14, v2);
  _Block_release(v2);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v14, v10);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v3);
  return swift_release(aBlock[5]);
}

uint64_t sub_100011B10(uint64_t a1)
{
  BOOL v2 = (sub_100057CC4() & 1) != 0 && lockdown_wifi_pairing_enabled();
  v20[2] = *(void *)(a1 + 40);
  uint64_t v3 = swift_allocObject(&unk_1000768A8, 25LL, 7LL);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = a1;
  *(_BYTE *)(v3 + 24) = v2;
  aBlock[4] = sub_1000121B4;
  uint64_t v23 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100040708;
  aBlock[3] = &unk_1000768C0;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  v20[1] = v20;
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = swift_retain(a1);
  static DispatchQoS.unspecified.getter(v10);
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  unint64_t v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = &_swiftEmptyArrayStorage;
  unint64_t v16 = sub_1000120C8();
  uint64_t v17 = sub_10000FD7C(&qword_100081100);
  unint64_t v18 = sub_100012108();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v11, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v15, v4);
  _Block_release(v4);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return swift_release(v23);
}

uint64_t sub_100011CFC(uint64_t result, char a2)
{
  if (*(_BYTE *)(result + 96) != (a2 & 1))
  {
    uint64_t v3 = result;
    os_log_type_t v4 = static os_log_type_t.default.getter(result);
    uint64_t v5 = (os_log_s *)qword_1000845F0;
    os_log_type_t v6 = v4;
    if (os_log_type_enabled((os_log_t)qword_1000845F0, v4))
    {
      swift_retain(v3);
      uint64_t v7 = swift_slowAlloc(14LL, -1LL);
      *(_DWORD *)uint64_t v7 = 67109376;
      int v9 = *(unsigned __int8 *)(v3 + 96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v7 + 4, v7 + 8);
      swift_release(v3);
      *(_WORD *)(v7 + 8) = 1024;
      int v8 = a2 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9, v7 + 10, v7 + 14);
      _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "lockdown_wifi_pairing_enabled value changed: %{BOOL}d -> %{BOOL}d",  (uint8_t *)v7,  0xEu);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    *(_BYTE *)(v3 + 96) = a2 & 1;
    return sub_10001190C();
  }

  return result;
}

uint64_t sub_100011E18()
{
  uint64_t result = sub_100010A9C();
  if (!v0)
  {
    AllowPromptlessPairingWithHostRequest.pairingShouldBeMarkedForAutomation.getter(result);
    AllowPromptlessPairingWithHostRequest.associatedHostBUID.getter();
    uint64_t v3 = v2;
    sub_10002A9B0();
    uint64_t v5 = v4;
    sub_1000295C8();
    swift_bridgeObjectRelease(v3);
    uint64_t v6 = swift_release(v5);
    return EmptyResponse.init()(v6);
  }

  return result;
}

uint64_t sub_100011EB4()
{
  swift_release(*(void *)(v0 + 48));
  sub_10000FF38((void *)(v0 + 56));

  return v0;
}

uint64_t sub_100011EF8()
{
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

uint64_t type metadata accessor for PairingManagementService()
{
  return objc_opt_self(&OBJC_CLASS____TtC20remotepairingdeviced24PairingManagementService);
}

_BYTE *initializeBufferWithCopyOfBuffer for SystemKeychainPairingManager.PeersChangedEvent( _BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for WirelessPairingOptions(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  swift_bridgeObjectRelease(a1);
  sub_100015644(a2, a3);
  uint64_t v13 = 0LL;
LABEL_18:
  sub_100015644(a4, a5);
  return v13;
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

      sub_10005742C();
    }
  }

  sub_100010008();
  void *v6 = v8;
}

    uint64_t v10 = (v17 - 1) & v17;
  }

  if (v16 + 3 >= v36)
  {
LABEL_29:
    swift_release_n(v6, 2LL);
    int v5 = v4;
    goto LABEL_31;
  }

  sub_1000575E8();
  if (v17)
  {
    uint64_t v13 = v18;
    goto LABEL_17;
  }

  while (1)
  {
    uint64_t v13 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v13 >= v36) {
      goto LABEL_29;
    }
    uint64_t v17 = *(void *)(v35 + 8 * v13);
    ++v18;
    if (v17) {
      goto LABEL_17;
    }
  }

uint64_t storeEnumTagSinglePayload for WirelessPairingOptions(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100012028 + 4 * byte_100062685[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10001205C + 4 * byte_100062680[v4]))();
}

uint64_t sub_10001205C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100012064(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10001206CLL);
  }
  return result;
}

uint64_t sub_100012078(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100012080LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100012084(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001208C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WirelessPairingOptions()
{
  return &type metadata for WirelessPairingOptions;
}

uint64_t sub_1000120A8()
{
  return sub_100011B10(v0);
}

uint64_t sub_1000120B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000120C0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_1000120C8()
{
  unint64_t result = qword_1000813C0;
  if (!qword_1000813C0)
  {
    uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_1000813C0);
  }

  return result;
}

unint64_t sub_100012108()
{
  unint64_t result = qword_1000813D0;
  if (!qword_1000813D0)
  {
    uint64_t v1 = sub_10001214C(&qword_100081100);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000813D0);
  }

  return result;
}

uint64_t sub_10001214C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_100012190()
{
  return swift_deallocObject(v0, 25LL, 7LL);
}

uint64_t sub_1000121B4()
{
  return sub_100011CFC(*(void *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1000121C0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000121E4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100012210(uint64_t a1)
{
  return sub_1000110B4(a1, *(void *)(v1 + 16), *(uint8_t **)(v1 + 24));
}

uint64_t sub_100012218(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD7C(&qword_100081A90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

  ;
}

  ;
}

uint64_t sub_100012290@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

  ;
}

uint64_t sub_1000122B0()
{
  *(void *)(v2 - 152) = v1 + 4;
  *(void *)(v2 - 128) = v0;
  return swift_errorRetain(v0);
}

uint64_t sub_1000122C4()
{
  return swift_errorRetain(v0);
}

void sub_1000122CC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_1000122E0(uint64_t a1)
{
  return swift_slowAlloc(a1, -1LL);
}

uint64_t sub_1000122E8()
{
  return type metadata accessor for XPCDictionary(0LL);
}

uint64_t sub_100012304()
{
  return type metadata accessor for XPCDictionary(0LL);
}

BOOL sub_100012320(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100012330(uint64_t a1)
{
  *(void *)(v2 - 128) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 128, v2 - 120, *(void *)(v2 - 152), v1);
}

  ;
}

uint64_t sub_100012360()
{
  return swift_errorRelease(v0);
}

uint64_t sub_100012368(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_100012370(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_100012378(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_100012380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return os_log(_:dso:log:_:_:)(a1, a2, a3, a4, a5, 2LL);
}

uint64_t sub_100012388(uint64_t a1)
{
  return String.init<A>(describing:)(v1 - 128, a1);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000123E8()
{
  return XPCDictionary.auditToken.getter();
}

uint64_t sub_1000123F4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

  ;
}

  ;
}

uint64_t sub_10001242C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10001243C()
{
  return swift_errorRelease(v0);
}

  ;
}

uint64_t sub_100012450(uint64_t a1)
{
  return swift_arrayDestroy(a1, 1LL);
}

void sub_100012458(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100012464()
{
  return swift_release(v0);
}

uint64_t sub_10001246C()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100012474()
{
  return swift_errorRetain(v0);
}

void sub_10001247C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 - 144) = a3;
  *(void *)(v4 - 136) = v3;
}

uint64_t sub_100012490()
{
  return swift_willThrow();
}

uint64_t sub_100012498()
{
  return v0;
}

void *sub_1000124AC()
{
  return sub_10000FF14((void *)(v0 + 56), *(void *)(v0 + 80));
}

uint64_t sub_1000124B8()
{
  return swift_release(v0);
}

void sub_1000124C0()
{
}

uint64_t sub_1000124C8()
{
  return 0x10000LL;
}

uint64_t sub_1000124D8(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  *(_OWORD *)(v2 + swift_weakDestroy(v0 + 16) = xmmword_100062750;
  *(void *)(v2 + 32) = static IPv6Header.minHeaderLength.getter();
  *(void *)(v2 + 40) = 0x80000LL;
  uint64_t v6 = type metadata accessor for TunnelConnectionIdentifierCategory(0LL);
  Identifier.init()(v6, &protocol witness table for TunnelConnectionIdentifierCategory);
  uint64_t v7 = OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__lockdownConnection;
  *(void *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__lockdownConnection) = 0LL;
  *(void *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canReceiveSource) = 0LL;
  *(void *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canSendSource) = 0LL;
  *(void *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingReceiveRequests) = &_swiftEmptyArrayStorage;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__partialReceivedData) = xmmword_100062760;
  *(void *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingSendRequests) = &_swiftEmptyArrayStorage;
  *(void *)(v2 + sub_10001247C(v5, v6, v7) = a1;
  uint64_t socket = lockdown_get_socket(a1);
  *(_DWORD *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__underlyingConnectionSocket) = socket;
  uint64_t v9 = OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__queue;
  *(void *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__queue) = a2;
  sub_100015D80();
  uint64_t v10 = OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__underlyingConnectionSocket;
  id v60 = a2;
  uint64_t v11 = static OS_dispatch_source.makeReadSource(fileDescriptor:queue:)(socket, a2);
  uint64_t v12 = *(void *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canReceiveSource);
  *(void *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canReceiveSource) = v11;
  uint64_t v13 = v11;
  swift_unknownObjectRetain(v11);
  swift_unknownObjectRelease(v12);
  uint64_t v14 = *(unsigned int *)(v2 + v10);
  unint64_t v15 = *(void **)(v2 + v9);
  id v16 = v15;
  uint64_t v17 = static OS_dispatch_source.makeWriteSource(fileDescriptor:queue:)(v14, v15);

  v59[1] = v17;
  *(void *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canSendSource) = v17;
  swift_unknownObjectRetain(v17);
  sub_100016BE4();
  uint64_t v18 = v13;
  uint64_t ObjectType = swift_getObjectType(v13);
  uint64_t v70 = sub_100015DBC;
  uint64_t v71 = v3;
  v68 = _NSConcreteStackBlock;
  uint64_t v69 = 1107296256LL;
  uint64_t v20 = sub_100016BC0((uint64_t)&unk_100076A40);
  uint64_t v67 = sub_100016D38();
  uint64_t v21 = *(void *)(v67 - 8);
  uint64_t v22 = *(void *)(v21 + 64);
  __chkstk_darwin(v67, v23);
  uint64_t v64 = v22;
  unint64_t v62 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v24 = (char *)v59 - v62;
  uint64_t v25 = sub_100016B28();
  static DispatchQoS.unspecified.getter(v25);
  uint64_t v26 = sub_100016C60();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v63 = v26;
  uint64_t v61 = *(void *)(v27 + 64);
  __chkstk_darwin(v26, v28);
  unint64_t v66 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v30 = (char *)v59 - v66;
  sub_1000129C0();
  v59[0] = v18;
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v24, v30, v20, ObjectType);
  sub_100016BEC();
  v65 = *(void (**)(char *, uint64_t))(v27 + 8);
  v65(v30, v26);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v32 = v67;
  v31(v24, v67);
  sub_100016CC8();
  uint64_t v70 = sub_100015DD8;
  uint64_t v71 = v3;
  v68 = _NSConcreteStackBlock;
  uint64_t v69 = 1107296256LL;
  xpc_connection_t v33 = sub_100016BC0((uint64_t)&unk_100076A68);
  __chkstk_darwin(v33, v34);
  unint64_t v35 = v62;
  sub_100016B28();
  uint64_t v36 = sub_100016BDC();
  __chkstk_darwin(v36, v37);
  uint64_t v38 = (char *)v59 - v66;
  sub_1000129C0();
  OS_dispatch_source.setCancelHandler(qos:flags:handler:)((char *)v59 - v35, v38, v33, ObjectType);
  sub_100016BEC();
  uint64_t v39 = v63;
  v65(v38, v63);
  v31((char *)v59 - v35, v32);
  sub_100016CC8();
  sub_100016DA4();
  uint64_t v70 = sub_100015DF8;
  uint64_t v71 = v3;
  v68 = _NSConcreteStackBlock;
  uint64_t v69 = 1107296256LL;
  os_log_type_t v40 = sub_100016BC0((uint64_t)&unk_100076A90);
  __chkstk_darwin(v40, v41);
  sub_100016B28();
  uint64_t v42 = sub_100016BDC();
  __chkstk_darwin(v42, v43);
  sub_100016C08();
  uint64_t v44 = sub_100016D90();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v44, v45, v46, v47);
  sub_100016BEC();
  uint64_t v48 = v39;
  uint64_t v49 = v65;
  v65(v38, v48);
  sub_100016D84();
  sub_100016CC8();
  uint64_t v70 = sub_100015DFC;
  uint64_t v71 = v3;
  v68 = _NSConcreteStackBlock;
  uint64_t v69 = 1107296256LL;
  uint64_t v50 = sub_100016BC0((uint64_t)&unk_100076AB8);
  __chkstk_darwin(v50, v51);
  sub_100016B28();
  uint64_t v52 = sub_100016BDC();
  __chkstk_darwin(v52, v53);
  sub_100016C08();
  uint64_t v54 = sub_100016D90();
  OS_dispatch_source.setCancelHandler(qos:flags:handler:)(v54, v55, v56, v57);
  sub_100016BEC();
  swift_unknownObjectRelease(v59[0]);
  sub_100016BE4();

  v49(v38, v63);
  sub_100016D84();
  sub_100016CC8();
  return v3;
}

uint64_t sub_1000129A8()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t sub_1000129C0()
{
  uint64_t v0 = sub_100016C60();
  os_log_type_t v5 = &_swiftEmptyArrayStorage;
  unint64_t v1 = sub_1000120C8();
  uint64_t v2 = sub_10000FD7C(&qword_100081100);
  unint64_t v3 = sub_100012108();
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

void sub_100012A38(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + *a2);
  *(void *)(a1 + *a2) = 0LL;
  swift_unknownObjectRelease(v3);
  uint64_t v4 = OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__lockdownConnection;
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__lockdownConnection);
  if (v5)
  {
    lockdown_disconnect(v5);
    *(void *)(a1 + v4) = 0LL;
  }

  sub_100016C1C();
}

void sub_100012A78()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_100016E1C();
  sub_100016CA0();
  uint64_t v6 = __chkstk_darwin(v4, v5);
  int v8 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v75 - v10;
  id v12 = *(id *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__queue);
  OS_dispatch_queue.assertOnQueueHierarchy()();

  uint64_t v13 = *(void *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canReceiveSource);
  if (!v13) {
    goto LABEL_13;
  }
  uint64_t ObjectType = swift_getObjectType(*(void *)(v2
                                             + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canReceiveSource));
  swift_unknownObjectRetain(v13);
  if (!OS_dispatch_source.data.getter(ObjectType))
  {
    static RemotePairingError.connectionFailed.getter();
    uint64_t v24 = sub_100016B14( (unint64_t *)&unk_1000819E0,  v23,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    uint64_t v25 = sub_100016B08(v3, v24);
    uint64_t v27 = sub_100016B14( (unint64_t *)&unk_1000813E0,  v26,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    unint64_t v28 = 0xD000000000000033LL;
    uint64_t v29 = "No more data can be received, connection was closed";
LABEL_9:
    uint64_t v33 = Error<>.init(_:_:)(v11, v28, (unint64_t)(v29 - 32) | 0x8000000000000000LL, v3, v27);
    uint64_t v34 = swift_willThrow(v33);
    os_log_type_t v35 = static os_log_type_t.error.getter(v34);
    uint64_t v36 = (os_log_s *)qword_1000845F0;
    if (sub_100016CB8(v35))
    {
      sub_100016C40();
      sub_100016C40();
      uint64_t v37 = (uint8_t *)sub_1000122E0(12LL);
      uint64_t v38 = sub_1000122E0(32LL);
      v99[0] = v38;
      *(_DWORD *)uint64_t v37 = 136315138;
      swift_getErrorValue(v25, &v94, v93);
      uint64_t v39 = Error.localizedDescription.getter(v93[1], v93[2]);
      uint64_t v41 = v40;
      sub_100045370(v39, v40, v99);
      uint64_t v97 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v37 + 4, v37 + 12);
      swift_bridgeObjectRelease(v41);
      sub_100016C38();
      sub_100016C38();
      sub_100016D10( (void *)&_mh_execute_header,  v36,  (os_log_type_t)v11,  "Lockdown tunnel connection failed with error: %s",  v37);
      sub_100012450(v38);
      sub_10001001C(v38);
      sub_10001001C((uint64_t)v37);
    }

    sub_100016C40();
    sub_100015128();
    sub_100016C38();
    sub_100016C38();
    goto LABEL_12;
  }

  uint64_t v15 = *(void *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__lockdownConnection);
  if (!v15)
  {
    static RemotePairingError.connectionFailed.getter();
    uint64_t v31 = sub_100016B14( (unint64_t *)&unk_1000819E0,  v30,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    uint64_t v25 = sub_100016B08(v3, v31);
    uint64_t v27 = sub_100016B14( (unint64_t *)&unk_1000813E0,  v32,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    unint64_t v28 = 0xD00000000000002DLL;
    uint64_t v29 = "The lockdown connection has been disconnected";
    goto LABEL_9;
  }

  id v16 = (uint8_t *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingReceiveRequests);
  sub_100016B48( v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingReceiveRequests,  (uint64_t)v99,  0LL);
  if (!*(void *)(*(void *)v16 + 16LL))
  {
LABEL_12:
    swift_unknownObjectRelease(v13);
    goto LABEL_13;
  }

  uint64_t v75 = ObjectType;
  v77 = v8;
  uint64_t v76 = v1;
  v78 = v11;
  uint64_t v79 = v3;
  uint64_t v85 = v13;
  sub_100016B3C((uint64_t)v16, (uint64_t)&v97);
  v82 = v16;
  uint64_t v80 = sub_100013568();
  uint64_t v81 = v17;
  uint64_t v83 = v18;
  uint64_t v84 = v19;
  sub_100016D7C();
  uint64_t v20 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  uint64_t v21 = __DataStorage.init(length:)(0x2000LL);
  uint64_t v95 = 0x200000000000LL;
  unint64_t v96 = v21 | 0x4000000000000000LL;
  v92[1] = 0LL;
  uint64_t v86 = v15;
  uint64_t v87 = v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__partialReceivedData;
  sub_100015E1C((uint64_t)&v95);
  if (v22 > 0) {
    __asm { BR              X10 }
  }

  if (v22 < 0)
  {
    uint64_t v52 = type metadata accessor for POSIXError(0LL);
    __chkstk_darwin(v52, v53);
    uint64_t v54 = sub_100016B68();
    uint64_t v47 = POSIXError._nsError.getter(v54);
    uint64_t v51 = sub_100016CE0();
    uint64_t v46 = v79;
    uint64_t v43 = (uint64_t)v78;
  }

  else
  {
    uint64_t v43 = (uint64_t)v78;
    static RemotePairingError.mobileDeviceError.getter(v22);
    uint64_t v45 = sub_100016B14( (unint64_t *)&unk_1000819E0,  v44,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    uint64_t v46 = v79;
    uint64_t v47 = sub_100016B08(v79, v45);
    uint64_t v49 = sub_100016B14( (unint64_t *)&unk_1000813E0,  v48,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    uint64_t v51 = sub_100016C24(v43, 0xD000000000000026LL, 0x8000000100067140LL, v50, v49);
  }

  uint64_t v55 = (uint64_t)v77;
  os_log_type_t v56 = static os_log_type_t.error.getter(v51);
  uint64_t v57 = (os_log_s *)qword_1000845F0;
  int v58 = v56;
  if (os_log_type_enabled((os_log_t)qword_1000845F0, v56))
  {
    sub_100012474();
    sub_100012474();
    LODWORD(v87) = v58;
    uint64_t v59 = (uint8_t *)sub_1000122E0(12LL);
    uint64_t v86 = sub_1000122E0(32LL);
    uint64_t v97 = v86;
    v82 = v59;
    *(_DWORD *)uint64_t v59 = 136315138;
    uint64_t ErrorValue = swift_getErrorValue(v47, v92, &v89);
    uint64_t v61 = v90;
    uint64_t v62 = v91;
    uint64_t v63 = *(void *)(v90 - 8);
    __chkstk_darwin(ErrorValue, v89);
    sub_100016C70();
    (*(void (**)(uint8_t *))(v63 + 16))(v59);
    uint64_t v64 = Error.localizedDescription.getter(v61, v62);
    uint64_t v66 = v65;
    sub_100016CE0();
    sub_100045370(v64, v66, &v97);
    uint64_t v88 = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v59 + 4, v59 + 12);
    uint64_t v55 = (uint64_t)v77;
    uint64_t v43 = (uint64_t)v78;
    uint64_t v46 = v79;
    swift_bridgeObjectRelease(v66);
    sub_10001243C();
    sub_10001243C();
    v68 = v82;
    sub_100016D10( (void *)&_mh_execute_header,  v57,  (os_log_type_t)v87,  "Lockdown tunnel connection receive error: %s",  v82);
    uint64_t v69 = v86;
    sub_100012450(v86);
    sub_10001001C(v69);
    sub_10001001C((uint64_t)v68);
  }

  uint64_t v70 = v84;
  uint64_t v71 = sub_100016B28();
  static RemotePairingError.mobileDeviceError.getter(v71);
  sub_10000FE6C( (unint64_t *)&unk_1000813E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
  sub_100016CF0();
  sub_100016BF4(v55, 24LL, v72);
  uint64_t v73 = sub_10000FE6C( (unint64_t *)&unk_1000819E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
  sub_100016AF4(v73);
  sub_100012474();
  uint64_t v74 = sub_100016DDC();
  _Error.wrapping(_:)(v74);
  sub_10001243C();
  (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v43, v46);
  sub_100016D28();
  sub_100016C38();
  sub_100016DC0();
  swift_release_n(v70, 2LL);
  sub_10001243C();
  sub_100015644(v95, v96);
LABEL_13:
  sub_10000FF80();
}

uint64_t sub_100013568()
{
  uint64_t v1 = *v0;
  if (*(void *)(*v0 + 16))
  {
    uint64_t v2 = *(void *)(v1 + 32);
    swift_retain(*(void *)(v1 + 56));
    sub_1000161C0(0LL, 1LL);
    return v2;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_1000135CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000LL) == 0) {
    __asm { BR              X9 }
  }

  __break(1u);
  JUMPOUT(0x100013704LL);
}

void sub_100013738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000LL) == 0) {
    __asm { BR              X9 }
  }

  __break(1u);
  JUMPOUT(0x100013874LL);
}

void sub_1000138A4()
{
  uint64_t v54 = v1;
  uint64_t v55 = v2;
  uint64_t v3 = v0;
  uint64_t v4 = sub_100016E1C();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v10);
  id v12 = (char *)v44 - v11;
  id v13 = *(id *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__queue);
  OS_dispatch_queue.assertOnQueueHierarchy()();

  uint64_t v14 = *(void *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canSendSource);
  if (!v14) {
    goto LABEL_15;
  }
  uint64_t ObjectType = swift_getObjectType(*(void *)(v3
                                             + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canSendSource));
  swift_unknownObjectRetain(v14);
  uint64_t v16 = OS_dispatch_source.data.getter(ObjectType);
  if (v16 < 0)
  {
    unint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
  }

  else
  {
    unint64_t v17 = v16;
    if (!v16)
    {
      static RemotePairingError.connectionFailed.getter();
      uint64_t v24 = sub_100016B14( (unint64_t *)&unk_1000819E0,  v23,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
      uint64_t v25 = sub_100016AF4(v24);
      uint64_t v28 = sub_100016B14( (unint64_t *)&unk_1000813E0,  v26,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
      uint64_t v29 = 0xD00000000000002FLL;
      uint64_t v30 = "No more data can be sent, connection was closed";
LABEL_11:
      uint64_t v34 = sub_100016C24((uint64_t)v12, v29, (unint64_t)(v30 - 32) | 0x8000000000000000LL, v27, v28);
      uint64_t v35 = swift_willThrow(v34);
      os_log_type_t v36 = static os_log_type_t.error.getter(v35);
      uint64_t v37 = (os_log_s *)qword_1000845F0;
      if (sub_100016CB8(v36))
      {
        sub_100016D74();
        sub_100016D74();
        uint64_t v38 = (uint8_t *)sub_1000122E0(12LL);
        uint64_t v39 = sub_1000122E0(32LL);
        v51[0] = v39;
        *(_DWORD *)uint64_t v38 = 136315138;
        swift_getErrorValue(v25, &v53, v52);
        uint64_t v40 = Error.localizedDescription.getter(v52[1], v52[2]);
        uint64_t v42 = v41;
        sub_100045370(v40, v41, v51);
        uint64_t v49 = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v38 + 4, v38 + 12);
        swift_bridgeObjectRelease(v42);
        sub_100016CB0();
        sub_100016CB0();
        sub_100016D10( (void *)&_mh_execute_header,  v37,  (os_log_type_t)v4,  "Lockdown tunnel connection failed with error: %s",  v38);
        sub_100012450(v39);
        sub_10001001C(v39);
        sub_10001001C((uint64_t)v38);
      }

      sub_100016D74();
      sub_100015128();
      sub_100016CB0();
      sub_100016CB0();
      goto LABEL_14;
    }
  }

  if (!*(void *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__lockdownConnection))
  {
    static RemotePairingError.connectionFailed.getter();
    uint64_t v32 = sub_100016B14( (unint64_t *)&unk_1000819E0,  v31,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    uint64_t v25 = sub_100016AF4(v32);
    uint64_t v28 = sub_100016B14( (unint64_t *)&unk_1000813E0,  v33,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    uint64_t v29 = 0xD00000000000002DLL;
    uint64_t v30 = "The lockdown connection has been disconnected";
    goto LABEL_11;
  }

  if (v17 >= 0x401)
  {
    uint64_t v48 = v9;
    uint64_t v18 = v3 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingSendRequests;
    sub_100016B48( v3 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingSendRequests,  (uint64_t)v51,  0LL);
    if (*(void *)(*(void *)v18 + 16LL))
    {
      void v44[5] = v5;
      sub_100016B3C(v18, (uint64_t)&v49);
      uint64_t v19 = *(void **)v18;
      if (*(void *)(*(void *)v18 + 16LL))
      {
        uint64_t v21 = v19[4];
        unint64_t v20 = v19[5];
        uint64_t v22 = v19[7];
        v44[7] = v19[6];
        unint64_t v45 = v20 >> 62;
        sub_100016DCC(v21);
        v44[8] = v22;
        sub_10000FFDC();
        v44[6] = v18;
        sub_1000160C4(0LL, 1LL);
        swift_endAccess(&v49);
        unint64_t v46 = v20;
        uint64_t v47 = v21;
        sub_100016DF0();
        __asm { BR              X9 }
      }

      __break(1u);
      JUMPOUT(0x100014134LL);
    }

LABEL_14:
    sub_100016C68();
LABEL_15:
    sub_10000FF80();
    return;
  }

  swift_unknownObjectRelease(v14);
}

  uint64_t v23 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v23 + 48) + 8 * a2) = a1;
  uint64_t v24 = *(void *)(v23 + 16);
  uint64_t v25 = __OFADD__(v24, 1LL);
  uint64_t v26 = v24 + 1;
  if (v25) {
    __break(1u);
  }
  else {
    *(void *)(v23 + swift_weakDestroy(v0 + 16) = v26;
  }
}

uint64_t sub_100014148()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection_identifier;
  uint64_t v2 = sub_10000FD7C((uint64_t *)&unk_1000813B0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);

  swift_unknownObjectRelease(*(void *)(v0
                                       + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canReceiveSource));
  swift_unknownObjectRelease(*(void *)(v0
                                       + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canSendSource));
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingReceiveRequests));
  sub_100015644( *(void *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__partialReceivedData),  *(void *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__partialReceivedData + 8));
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingSendRequests));
  return v0;
}

uint64_t sub_100014204()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100014228()
{
  return type metadata accessor for LockdownTunnelConnection(0LL);
}

uint64_t type metadata accessor for LockdownTunnelConnection(uint64_t a1)
{
  uint64_t result = qword_100081188;
  if (!qword_100081188) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LockdownTunnelConnection);
  }
  return result;
}

void sub_100014268(uint64_t a1)
{
  v4[0] = &unk_1000627D0;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_100015578(319LL);
  if (v3 <= 0x3F)
  {
    v4[3] = *(void *)(v2 - 8) + 64LL;
    v4[4] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[7] = &unk_1000627E8;
    v4[8] = &unk_1000627E8;
    v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[10] = &unk_100062800;
    v4[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_updateClassMetadata2(a1, 256LL, 12LL, v4, a1 + 80);
  }

void sub_100014330()
{
  uint64_t v1 = *v0;
  _StringGuts.grow(_:)(30LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v2._countAndFlagsBits = _typeName(_:qualified:)(v1, 0LL);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000044LL,  0x8000000100067000LL,  "remotepairingdeviced/LockdownTunnelConnection.swift",  51LL,  2LL,  238LL,  0);
  __break(1u);
}

void sub_1000143D4()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = *(void **)(v0 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__queue);
  uint64_t v10 = (void *)sub_100016BCC((uint64_t)&unk_100076C30, 40LL);
  v10[2] = v9;
  v10[3] = v4;
  v10[4] = v2;
  uint64_t v11 = (void *)sub_100016BCC((uint64_t)&unk_100076C58, 56LL);
  v11[2] = v0;
  v11[3] = sub_100016810;
  v11[4] = v10;
  v11[5] = v8;
  v11[6] = v6;
  v24[5] = sub_100016848;
  v24[6] = v11;
  v24[1] = _NSConcreteStackBlock;
  v24[2] = 1107296256LL;
  id v12 = sub_100016C54((uint64_t)sub_100040708);
  uint64_t v23 = sub_100016D38();
  sub_10001241C();
  __chkstk_darwin(v13, v14);
  sub_100016B50();
  id v15 = v9;
  swift_retain(v2);
  sub_10000FFDC();
  sub_100016B28();
  sub_100016BDC();
  uint64_t v16 = sub_100016C60();
  sub_100016CA0();
  __chkstk_darwin(v17, v18);
  unint64_t v20 = (char *)&v24[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v21 = sub_100016DD4((uint64_t)&_swiftEmptyArrayStorage);
  sub_10000FD7C(&qword_100081100);
  unint64_t v22 = sub_100016E04();
  dispatch thunk of SetAlgebra.init<A>(_:)(v24, v0, v22, v16, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v6, v20, v12);
  _Block_release(v12);
  sub_100016BD4();

  sub_100016C30((uint64_t)v20, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_100016CD0();
  sub_100016DB8();
  sub_10000FF80();
}

uint64_t sub_100014574(uint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = swift_allocObject(&unk_100076CA8, 49LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = a5;
  *(void *)(v11 + 24) = a6;
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  char v12 = a3 & 1;
  *(_BYTE *)(v11 + 48) = a3 & 1;
  aBlock[4] = sub_100016A70;
  uint64_t v32 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100040708;
  aBlock[3] = &unk_100076CC0;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_retain(a6);
  uint64_t v19 = sub_100016A98(a1, a2, v12);
  static DispatchQoS.unspecified.getter(v19);
  uint64_t v20 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  uint64_t v24 = (char *)&v29 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = &_swiftEmptyArrayStorage;
  unint64_t v25 = sub_1000120C8();
  uint64_t v26 = sub_10000FD7C(&qword_100081100);
  unint64_t v27 = sub_100012108();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v26, v27, v20, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v18, v24, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  return swift_release(v32);
}

uint64_t sub_100014754( uint64_t a1, void (*a2)(uint64_t, void, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for RemotePairingError(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = &v44[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v17 = __chkstk_darwin(v13, v16);
  uint64_t v19 = &v44[-v18 - 8];
  uint64_t v20 = *(void *)(a1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canReceiveSource);
  if (!v20)
  {
    static RemotePairingError.mobileDeviceError.getter(v17);
    uint64_t v22 = sub_10000FE6C( (unint64_t *)&unk_1000813E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    Error<>.init(_:_:)(v15, 0xD000000000000027LL, 0x8000000100066F90LL, v10, v22);
    uint64_t v23 = sub_10000FE6C( (unint64_t *)&unk_1000819E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    uint64_t v24 = swift_allocError(v10, v23, 0LL, 0LL);
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(v25, v19, v10);
    a2(v24, 0LL, 1LL);
    swift_errorRelease(v24);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v19, v10);
  }

  uint64_t v21 = (uint64_t *)(a1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingReceiveRequests);
  swift_beginAccess( a1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingReceiveRequests,  v46,  0LL,  0LL);
  if (*(void *)(*v21 + 16))
  {
    swift_unknownObjectRetain(v20);
    goto LABEL_6;
  }

  unint64_t v27 = (uint64_t *)(a1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__partialReceivedData);
  swift_beginAccess( a1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__partialReceivedData,  v44,  1LL,  0LL);
  uint64_t v28 = *v27;
  unint64_t v29 = v27[1];
  swift_unknownObjectRetain(v20);
  sub_1000155D4(v28, v29);
  uint64_t v30 = Data.count.getter(v28, v29);
  sub_100015644(v28, v29);
  if (v30 < a4)
  {
LABEL_6:
    swift_beginAccess(v21, &v45, 33LL, 0LL);
    swift_retain(a3);
    sub_100043F38();
    uint64_t v31 = *(void *)(*v21 + 16);
    sub_100044098();
    uint64_t v32 = *v21;
    *(void *)(v32 + swift_weakDestroy(v0 + 16) = v31 + 1;
    uint64_t v33 = (void *)(v32 + 32 * v31);
    v33[4] = a4;
    v33[5] = a5;
    v33[6] = a2;
    v33[7] = a3;
    uint64_t v34 = *v21;
    swift_endAccess(&v45);
    if (*(void *)(v34 + 16) == 1LL)
    {
      swift_getObjectType(v20);
      OS_dispatch_source.resume()();
    }

    return swift_unknownObjectRelease(v20);
  }

  uint64_t v35 = *v27;
  unint64_t v36 = v27[1];
  sub_1000155D4(*v27, v36);
  sub_1000135CC(a5, v35, v36);
  __int128 v37 = v45;
  uint64_t v38 = *v27;
  unint64_t v39 = v27[1];
  sub_1000155D4(*v27, v39);
  uint64_t v40 = Data.count.getter(v37, *((void *)&v37 + 1));
  sub_100013738(v40, v38, v39);
  uint64_t v41 = *v27;
  unint64_t v42 = v27[1];
  *(_OWORD *)unint64_t v27 = v45;
  sub_100015644(v41, v42);
  sub_1000155D4(v37, *((unint64_t *)&v37 + 1));
  a2(v37, *((void *)&v37 + 1), 0LL);
  sub_100015644(v37, *((unint64_t *)&v37 + 1));
  sub_100015644(v37, *((unint64_t *)&v37 + 1));
  return swift_unknownObjectRelease(v20);
}

void sub_100014A84()
{
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  unint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = *(void **)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__queue);
  uint64_t v12 = (void *)sub_100016BCC((uint64_t)&unk_100076B68, 40LL);
  v12[2] = v11;
  v12[3] = v6;
  v12[4] = v4;
  uint64_t v13 = (void *)sub_100016BCC((uint64_t)&unk_100076B90, 56LL);
  v13[2] = v2;
  v13[3] = sub_100016750;
  v13[4] = v12;
  v13[5] = v10;
  v13[6] = v8;
  uint64_t v14 = sub_100016C54((uint64_t)sub_100040708);
  sub_100016D38();
  sub_10001241C();
  __chkstk_darwin(v15, v16);
  sub_100016B50();
  id v17 = v11;
  sub_100016DFC();
  swift_retain(v2);
  sub_100016B28();
  sub_1000155D4(v10, v8);
  sub_100016BDC();
  sub_100016C60();
  sub_100016CA0();
  __chkstk_darwin(v18, v19);
  sub_100016C88();
  sub_100016DD4((uint64_t)&_swiftEmptyArrayStorage);
  sub_10000FD7C(&qword_100081100);
  unint64_t v20 = sub_100016E04();
  sub_100016BA0(v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v1, v2, v14);
  _Block_release(v14);
  sub_100016BD4();

  sub_100016C30(v2, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  sub_100016CD0();
  sub_100016DB8();
  sub_10000FF80();
}

uint64_t sub_100014C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = (void *)swift_allocObject(&unk_100076BE0, 40LL, 7LL);
  v7[2] = a3;
  v7[3] = a4;
  v7[4] = a1;
  aBlock[4] = sub_1000167C0;
  unint64_t v27 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100040708;
  aBlock[3] = &unk_100076BF8;
  unint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_retain(a4);
  uint64_t v14 = swift_errorRetain(a1);
  static DispatchQoS.unspecified.getter(v14);
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = &_swiftEmptyArrayStorage;
  unint64_t v20 = sub_1000120C8();
  uint64_t v21 = sub_10000FD7C(&qword_100081100);
  unint64_t v22 = sub_100012108();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v21, v22, v15, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v19, v8);
  _Block_release(v8);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  return swift_release(v27);
}

uint64_t sub_100014DD0( uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10 = type metadata accessor for RemotePairingError(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = &v32[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v17 = __chkstk_darwin(v13, v16);
  uint64_t v19 = &v32[-v18 - 8];
  uint64_t v20 = *(void *)(a1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canSendSource);
  if (v20)
  {
    uint64_t v21 = (uint64_t *)(a1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingSendRequests);
    swift_beginAccess( a1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingSendRequests,  v32,  33LL,  0LL);
    swift_unknownObjectRetain(v20);
    sub_1000155D4(a4, a5);
    swift_retain(a3);
    sub_100043FB4();
    uint64_t v22 = *(void *)(*v21 + 16);
    sub_1000440EC();
    uint64_t v23 = *v21;
    *(void *)(v23 + swift_weakDestroy(v0 + 16) = v22 + 1;
    uint64_t v24 = (void *)(v23 + 32 * v22);
    v24[4] = a4;
    v24[5] = a5;
    v24[6] = a2;
    void v24[7] = a3;
    uint64_t v25 = *v21;
    swift_endAccess(v32);
    if (*(void *)(v25 + 16) == 1LL)
    {
      swift_getObjectType(v20);
      OS_dispatch_source.resume()();
    }

    return swift_unknownObjectRelease(v20);
  }

  else
  {
    static RemotePairingError.mobileDeviceError.getter(v17);
    uint64_t v27 = sub_10000FE6C( (unint64_t *)&unk_1000813E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    Error<>.init(_:_:)(v15, 0xD000000000000024LL, 0x8000000100066F60LL, v10, v27);
    uint64_t v28 = sub_10000FE6C( (unint64_t *)&unk_1000819E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    uint64_t v29 = swift_allocError(v10, v28, 0LL, 0LL);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v11 + 16))(v30, v19, v10);
    a2(v29);
    swift_errorRelease(v29);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v19, v10);
  }

void sub_100014FE4()
{
  uint64_t v4 = *(void **)(v0 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__queue);
  uint64_t v5 = sub_100016C54((uint64_t)sub_100040708);
  uint64_t v6 = sub_100016D38();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  sub_100016B50();
  id v9 = v4;
  sub_10000FFDC();
  sub_100016BDC();
  sub_100016C60();
  sub_10001241C();
  __chkstk_darwin(v10, v11);
  sub_100016C88();
  sub_100016DD4((uint64_t)&_swiftEmptyArrayStorage);
  sub_10000FD7C(&qword_100081100);
  unint64_t v12 = sub_100016E04();
  sub_100016BA0(v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v1, v2, v5);
  sub_100016BEC();

  sub_100016C30(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v6);
  sub_100016DB8();
  sub_10000FF80();
}

void sub_100015104()
{
}

void sub_100015128()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = sub_100016E1C();
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v3)
  {
    uint64_t v9 = v3;
  }

  else
  {
    static RemotePairingError.mobileDeviceError.getter(v6);
    uint64_t v10 = sub_10000FE6C( (unint64_t *)&unk_1000819E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    uint64_t v9 = sub_100016B08(v4, v10);
    sub_10000FE6C( (unint64_t *)&unk_1000813E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    sub_100016CF0();
    Error<>.init(_:_:)(v8, 0xD000000000000015LL, v11, v4, v12);
  }

  uint64_t v52 = v9;
  uint64_t v13 = (uint64_t *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingReceiveRequests);
  sub_100016B48( v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingReceiveRequests,  (uint64_t)&v57,  1LL);
  uint64_t v51 = v13;
  uint64_t v14 = *v13;
  int64_t v15 = *(void *)(*v13 + 16);
  uint64_t v53 = v1;
  if (v15)
  {
    sub_100016C40();
    os_log_type_t v56 = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v14);
    sub_10003BD3C(0LL, v15, 0);
    uint64_t v16 = v56;
    uint64_t v17 = v14;
    uint64_t v18 = (uint64_t *)(v14 + 56);
    do
    {
      uint64_t v20 = *(v18 - 1);
      uint64_t v19 = *v18;
      uint64_t v21 = sub_100016BCC((uint64_t)&unk_100076AF0, 32LL);
      *(void *)(v21 + swift_weakDestroy(v0 + 16) = v20;
      *(void *)(v21 + 24) = v19;
      sub_100016B28();
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
      {
        sub_10003BD3C(0LL, v16[2] + 1LL, 1);
        uint64_t v16 = v56;
      }

      unint64_t v23 = v16[2];
      unint64_t v22 = v16[3];
      if (v23 >= v22 >> 1)
      {
        sub_10003BD3C((void *)(v22 > 1), v23 + 1, 1);
        uint64_t v16 = v56;
      }

      v16[2] = v23 + 1;
      uint64_t v24 = (char *)&v16[2 * v23];
      *((void *)v24 + 4) = sub_1000166FC;
      *((void *)v24 + 5) = v21;
      v18 += 4;
      --v15;
    }

    while (v15);
    swift_bridgeObjectRelease(v17);
    uint64_t v1 = v53;
  }

  else
  {
    sub_100016C40();
    uint64_t v16 = &_swiftEmptyArrayStorage;
  }

  uint64_t v25 = (uint64_t *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingSendRequests);
  sub_100016B48( v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingSendRequests,  (uint64_t)&v56,  1LL);
  uint64_t v26 = *v25;
  int64_t v27 = *(void *)(*v25 + 16);
  uint64_t v28 = &_swiftEmptyArrayStorage;
  if (v27)
  {
    uint64_t v50 = v25;
    v54[0] = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v26);
    sub_10003BD10(0LL, v27, 0);
    uint64_t v28 = (void *)v54[0];
    uint64_t v49 = v26;
    uint64_t v29 = (uint64_t *)(v26 + 56);
    do
    {
      uint64_t v31 = *(v29 - 1);
      uint64_t v30 = *v29;
      uint64_t v32 = sub_100016BCC((uint64_t)&unk_100076B18, 32LL);
      *(void *)(v32 + swift_weakDestroy(v0 + 16) = v31;
      *(void *)(v32 + 24) = v30;
      sub_10000FFDC();
      if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
      {
        sub_10003BD10(0LL, v28[2] + 1LL, 1);
        uint64_t v28 = (void *)v54[0];
      }

      unint64_t v34 = v28[2];
      unint64_t v33 = v28[3];
      if (v34 >= v33 >> 1)
      {
        sub_10003BD10((void *)(v33 > 1), v34 + 1, 1);
        uint64_t v28 = (void *)v54[0];
      }

      void v28[2] = v34 + 1;
      uint64_t v35 = (char *)&v28[2 * v34];
      *((void *)v35 + 4) = sub_100016724;
      *((void *)v35 + 5) = v32;
      v29 += 4;
      --v27;
    }

    while (v27);
    swift_bridgeObjectRelease(v49);
    uint64_t v1 = v53;
    uint64_t v25 = v50;
  }

  uint64_t v36 = v16[2];
  uint64_t v37 = v52;
  if (v36)
  {
    swift_bridgeObjectRetain(v16);
    uint64_t v38 = v16 + 5;
    do
    {
      uint64_t v40 = (void (*)(void *))*(v38 - 1);
      uint64_t v39 = *v38;
      v54[0] = v37;
      v54[1] = 0LL;
      char v55 = 1;
      sub_10000FFDC();
      v40(v54);
      swift_release(v39);
      v38 += 2;
      --v36;
    }

    while (v36);
    swift_bridgeObjectRelease(v16);
  }

  swift_bridgeObjectRelease(v16);
  uint64_t v41 = v28[2];
  if (v41)
  {
    swift_bridgeObjectRetain(v28);
    unint64_t v42 = v28 + 5;
    do
    {
      uint64_t v44 = (void (*)(void *))*(v42 - 1);
      uint64_t v43 = *v42;
      v54[0] = v37;
      sub_10000FFDC();
      v44(v54);
      swift_release(v43);
      v42 += 2;
      --v41;
    }

    while (v41);
    sub_100016D6C();
  }

  sub_100016D6C();
  uint64_t v45 = *v51;
  *uint64_t v51 = (uint64_t)&_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v45);
  uint64_t v46 = *v25;
  *uint64_t v25 = (uint64_t)&_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v46);
  if (*(void *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canReceiveSource))
  {
    sub_100016DA4();
    sub_100016DAC();
    OS_dispatch_source.cancel()();
    sub_100016BE4();
  }

  if (*(void *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canSendSource))
  {
    sub_100016DA4();
    sub_100016DAC();
    OS_dispatch_source.cancel()();
    sub_100016BE4();
  }

  uint64_t v47 = OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__lockdownConnection;
  uint64_t v48 = *(void *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__lockdownConnection);
  if (v48)
  {
    lockdown_disconnect(v48);
    swift_errorRelease(v37);
    *(void *)(v1 + v47) = 0LL;
  }

  else
  {
    swift_errorRelease(v37);
  }

  sub_10000FF80();
}

void sub_100015578(uint64_t a1)
{
  if (!qword_100082DF0)
  {
    uint64_t v2 = type metadata accessor for TunnelConnectionIdentifierCategory(255LL);
    unint64_t v3 = type metadata accessor for Identifier(a1, v2, &protocol witness table for TunnelConnectionIdentifierCategory);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_100082DF0);
    }
  }

uint64_t sub_1000155D4(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100015618(uint64_t *a1)
{
  return swift_release(a1[3]);
}

uint64_t sub_100015644(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t *sub_100015688(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000155D4(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_retain(v6);
  return a1;
}

uint64_t *sub_1000156D4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000155D4(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100015644(v6, v7);
  uint64_t v9 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v10 = a1[3];
  a1[2] = v9;
  a1[3] = v8;
  swift_retain(v8);
  swift_release(v10);
  return a1;
}

__n128 sub_100015734(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100015740(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  sub_100015644(v4, v5);
  uint64_t v6 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = a2[1];
  swift_release(v6);
  return a1;
}

void type metadata accessor for LockdownTunnelConnection.SendRequest()
{
}

uint64_t sub_10001579C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 24));
}

uint64_t sub_1000157A4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_retain(v3);
  return a1;
}

void *sub_1000157D8(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v3 = a2[3];
  uint64_t v4 = a1[3];
  a1[2] = a2[2];
  a1[3] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t sub_100015820(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  __int128 v4 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  swift_release(v3);
  return a1;
}

uint64_t sub_100015850(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_100015890(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + swift_weakDestroy(v0 + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for LockdownTunnelConnection.ReceiveRequest()
{
}

uint64_t sub_1000158DC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_100015D6C(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t sub_100015928(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  unint64_t v6 = *(void *)(v2 + 24);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return sub_100015D58(v5, v6);
}

void *sub_100015978(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

uint64_t sub_1000159B4()
{
  return *(void *)(v0 + 32);
}

uint64_t sub_1000159E4(uint64_t a1)
{
  uint64_t result = swift_beginAccess(v1 + 32, v4, 1LL, 0LL);
  *(void *)(v1 + 32) = a1;
  return result;
}

void *sub_100015A20(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

uint64_t sub_100015A5C()
{
  return *(void *)(v0 + 40);
}

uint64_t sub_100015A8C(uint64_t a1)
{
  uint64_t result = swift_beginAccess(v1 + 40, v4, 1LL, 0LL);
  *(void *)(v1 + 40) = a1;
  return result;
}

void *sub_100015AC8(uint64_t a1)
{
  return &j__swift_endAccess;
}

uint64_t sub_100015B10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection_identifier;
  uint64_t v4 = sub_10000FD7C((uint64_t *)&unk_1000813B0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_100015B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1000628AC, a4);
  return StreamBasedTunnelConnection.send(packets:completion:)(a1, a2, a3, a4, WitnessTable);
}

uint64_t sub_100015BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1000628AC, a4);
  return StreamBasedTunnelConnection.send(controlMessage:completion:)(a1, a2, a3, a4, WitnessTable);
}

uint64_t sub_100015C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1000628AC, a3);
  return StreamBasedTunnelConnection.receivePackets(completion:)(a1, a2, a3, WitnessTable);
}

uint64_t sub_100015C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1000628AC, a3);
  return StreamBasedTunnelConnection.receiveControlMessage(completion:)(a1, a2, a3, WitnessTable);
}

void sub_100015CCC()
{
}

void sub_100015CEC()
{
}

uint64_t sub_100015D00()
{
  return sub_1000124C8() & 0x1FFFF;
}

uint64_t sub_100015D20()
{
  return 0LL;
}

uint64_t sub_100015D2C()
{
  return sub_10000FE6C(&qword_1000813A8, type metadata accessor for LockdownTunnelConnection, (uint64_t)&unk_100062844);
}

uint64_t sub_100015D58(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100015644(result, a2);
  }
  return result;
}

uint64_t sub_100015D6C(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000155D4(result, a2);
  }
  return result;
}

unint64_t sub_100015D80()
{
  unint64_t result = qword_100082120;
  if (!qword_100082120)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_source);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100082120);
  }

  return result;
}

uint64_t sub_100015DC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015DD0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_100015DD8()
{
}

void sub_100015DFC()
{
}

void sub_100015E1C(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_100015E7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v7 = v4;
  LOWORD(v8) = a1;
  BYTE2(v8) = BYTE2(a1);
  HIBYTE(v8) = BYTE3(a1);
  unsigned __int8 v9 = BYTE4(a1);
  unsigned __int8 v10 = BYTE5(a1);
  unsigned __int8 v11 = BYTE6(a1);
  uint64_t result = lockdown_recv(v3, &v7, v2);
  unint64_t v6 = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  void *v1 = v7;
  v1[1] = v6;
  return result;
}

char *sub_1000160C4(char *result, uint64_t a2)
{
  if (((unint64_t)result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  unint64_t v6 = result;
  uint64_t v7 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  unsigned int v8 = &result[-a2];
  if (__OFSUB__(0LL, v7))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *(void *)(v4 + 24) >> 1)
  {
    if (v5 <= v9) {
      uint64_t v11 = (uint64_t)&v8[v5];
    }
    else {
      uint64_t v11 = v5;
    }
    sub_1000442E8(isUniquelyReferenced_nonNull_native, v11, 1LL, v4);
    uint64_t v4 = v12;
  }

  uint64_t v13 = (char *)(v4 + 32 + 32LL * (void)v6);
  uint64_t result = (char *)swift_arrayDestroy(v13, v7);
  if (!v7) {
    goto LABEL_16;
  }
  uint64_t v14 = *(void *)(v4 + 16);
  if (__OFSUB__(v14, a2)) {
    goto LABEL_22;
  }
  uint64_t result = sub_100045014((char *)(v4 + 32 + 32 * a2), v14 - a2, v13);
  uint64_t v15 = *(void *)(v4 + 16);
  BOOL v16 = __OFADD__(v15, v8);
  uint64_t v17 = v15 - v7;
  if (!v16)
  {
    *(void *)(v4 + swift_weakDestroy(v0 + 16) = v17;
LABEL_16:
    *uint64_t v2 = v4;
    return result;
  }

LABEL_23:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

      unsigned __int8 v10 = (v18 - 1) & v18;
    }
  }

  uint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

    unsigned __int8 v10 = (v17 - 1) & v17;
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_35:
    uint64_t result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_37;
  }

  uint64_t v17 = *(void *)(v8 + 8 * v18);
  if (v17)
  {
    uint64_t v13 = v18;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v13 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_35;
    }
    uint64_t v17 = *(void *)(v8 + 8 * v13);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }

char *sub_1000161C0(char *result, uint64_t a2)
{
  if (((unint64_t)result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  unint64_t v6 = result;
  uint64_t v7 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  unsigned int v8 = &result[-a2];
  if (__OFSUB__(0LL, v7))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *(void *)(v4 + 24) >> 1)
  {
    if (v5 <= v9) {
      uint64_t v11 = (uint64_t)&v8[v5];
    }
    else {
      uint64_t v11 = v5;
    }
    sub_100044304(isUniquelyReferenced_nonNull_native, v11, 1LL, v4);
    uint64_t v4 = v12;
  }

  uint64_t v13 = (char *)(v4 + 32 + 32LL * (void)v6);
  uint64_t result = (char *)swift_arrayDestroy(v13, v7);
  if (!v7) {
    goto LABEL_16;
  }
  uint64_t v14 = *(void *)(v4 + 16);
  if (__OFSUB__(v14, a2)) {
    goto LABEL_22;
  }
  uint64_t result = sub_100045014((char *)(v4 + 32 + 32 * a2), v14 - a2, v13);
  uint64_t v15 = *(void *)(v4 + 16);
  BOOL v16 = __OFADD__(v15, v8);
  uint64_t v17 = v15 - v7;
  if (!v16)
  {
    *(void *)(v4 + swift_weakDestroy(v0 + 16) = v17;
LABEL_16:
    *uint64_t v2 = v4;
    return result;
  }

char *sub_1000162BC(char *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (((unint64_t)result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v8 = *v6;
  uint64_t v9 = *(void *)(*v6 + 16);
  if (v9 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  unsigned __int8 v10 = result;
  uint64_t v11 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v12 = 1 - v11;
  if (__OFSUB__(1LL, v11))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v13 = v9 + v12;
  if (__OFADD__(v9, v12))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v13 > *(void *)(v8 + 24) >> 1)
  {
    if (v9 <= v13) {
      uint64_t v17 = v9 + v12;
    }
    else {
      uint64_t v17 = v9;
    }
    sub_100044304(isUniquelyReferenced_nonNull_native, v17, 1LL, v8);
    uint64_t v8 = v18;
  }

  uint64_t v19 = v8 + 32 + 32LL * (void)v10;
  uint64_t result = (char *)swift_arrayDestroy(v19, v11);
  if (!v12) {
    goto LABEL_16;
  }
  uint64_t v20 = *(void *)(v8 + 16);
  if (__OFSUB__(v20, a2)) {
    goto LABEL_22;
  }
  uint64_t result = sub_100045014((char *)(v8 + 32 + 32 * a2), v20 - a2, (char *)(v19 + 32));
  uint64_t v21 = *(void *)(v8 + 16);
  BOOL v22 = __OFADD__(v21, v12);
  uint64_t v23 = v21 + v12;
  if (!v22)
  {
    *(void *)(v8 + swift_weakDestroy(v0 + 16) = v23;
LABEL_16:
    *(void *)uint64_t v19 = a3;
    *(void *)(v19 + 8) = a4;
    *(void *)(v19 + swift_weakDestroy(v0 + 16) = a5;
    *(void *)(v19 + 24) = a6;
    uint64_t *v6 = v8;
    return result;
  }

char *sub_1000163E8(char *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (((unint64_t)result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v8 = *v6;
  uint64_t v9 = *(void *)(*v6 + 16);
  if (v9 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  unsigned __int8 v10 = result;
  uint64_t v11 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v12 = 1 - v11;
  if (__OFSUB__(1LL, v11))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v13 = v9 + v12;
  if (__OFADD__(v9, v12))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v13 > *(void *)(v8 + 24) >> 1)
  {
    if (v9 <= v13) {
      uint64_t v17 = v9 + v12;
    }
    else {
      uint64_t v17 = v9;
    }
    sub_1000442E8(isUniquelyReferenced_nonNull_native, v17, 1LL, v8);
    uint64_t v8 = v18;
  }

  uint64_t v19 = v8 + 32 + 32LL * (void)v10;
  uint64_t result = (char *)swift_arrayDestroy(v19, v11);
  if (!v12) {
    goto LABEL_16;
  }
  uint64_t v20 = *(void *)(v8 + 16);
  if (__OFSUB__(v20, a2)) {
    goto LABEL_22;
  }
  uint64_t result = sub_100045014((char *)(v8 + 32 + 32 * a2), v20 - a2, (char *)(v19 + 32));
  uint64_t v21 = *(void *)(v8 + 16);
  BOOL v22 = __OFADD__(v21, v12);
  uint64_t v23 = v21 + v12;
  if (!v22)
  {
    *(void *)(v8 + swift_weakDestroy(v0 + 16) = v23;
LABEL_16:
    *(void *)uint64_t v19 = a3;
    *(void *)(v19 + 8) = a4;
    *(void *)(v19 + swift_weakDestroy(v0 + 16) = a5;
    *(void *)(v19 + 24) = a6;
    uint64_t *v6 = v8;
    return result;
  }

uint64_t sub_100016514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (result)
  {
    uint64_t v9 = result;
    uint64_t result = __DataStorage._offset.getter();
    if (!__OFSUB__(a1, result))
    {
      uint64_t v10 = v9 + a1 - result;
      __DataStorage._length.getter();
      return lockdown_recv(a4, v10, a5);
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_10001658C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1;
  __int16 v6 = a2;
  char v7 = BYTE2(a2);
  char v8 = BYTE3(a2);
  char v9 = BYTE4(a2);
  char v10 = BYTE5(a2);
  return lockdown_send(a3, &v5, a4);
}

uint64_t sub_100016658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = __DataStorage._bytes.getter();
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
      __break(1u);
      goto LABEL_8;
    }

    uint64_t v11 = v9 + a1 - result;
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  uint64_t result = __DataStorage._length.getter();
  if (v11) {
    return lockdown_send(a4, v11, a5);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1000166DC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000166FC(uint64_t a1)
{
}

void sub_100016724(void *a1)
{
}

void sub_100016744()
{
}

uint64_t sub_100016750(uint64_t a1)
{
  return sub_100014C08(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10001675C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10001678C()
{
  return sub_100016854((uint64_t (*)(void, void, void, void, void))sub_100014DD0);
}

uint64_t sub_100016798()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1000167C0()
{
}

uint64_t sub_1000167E8()
{
  sub_100016E0C();
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100016810(uint64_t a1, unint64_t a2, char a3)
{
  return sub_100014574(a1, a2, a3 & 1, v3[2], v3[3], v3[4]);
}

uint64_t sub_100016820()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100016848()
{
  return sub_100016854((uint64_t (*)(void, void, void, void, void))sub_100014754);
}

uint64_t sub_100016854(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100016868(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x1000168C4LL);
  }

  return ((uint64_t (*)(uint64_t))((char *)&loc_100016880 + *((int *)qword_1000168C8 + (a4 >> 62))))(v5);
}

uint64_t sub_1000168D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = sub_10001695C(a1, a3, a4, a5);
  if (a2 <= 0)
  {
    if (v9 <= 0 && v9 > a2) {
      return 0LL;
    }
  }

  else if ((v9 & 0x8000000000000000LL) == 0 && v9 < (unint64_t)a2)
  {
    return 0LL;
  }

  return sub_100016868(a1, a2, a4, a5);
}

uint64_t sub_10001695C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_100016970 + *((int *)qword_100016A18 + (a4 >> 62))))();
}

uint64_t sub_10001698C(uint64_t a1)
{
  if (v1 >= a1)
  {
    BOOL v5 = __OFSUB__(0LL, a1);
    BOOL v3 = a1 == 0;
    BOOL v4 = -a1 < 0;
  }

  else
  {
    BOOL v5 = 0;
    BOOL v3 = 0;
    BOOL v4 = 0;
  }

  if (!(v4 ^ v5 | v3))
  {
    __break(1u);
    JUMPOUT(0x100016A10LL);
  }

  return ((uint64_t (*)(void))((char *)&loc_1000169C4 + *((int *)qword_100016A28 + v2)))();
}

uint64_t sub_100016A38()
{
  return swift_deallocObject(v0, 49LL, 7LL);
}

uint64_t sub_100016A64(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_errorRelease(a1);
  }
  else {
    return sub_100015644(a1, a2);
  }
}

void sub_100016A70()
{
}

uint64_t sub_100016A98(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_errorRetain(a1);
  }
  else {
    return sub_1000155D4(a1, a2);
  }
}

uint64_t sub_100016AF4(uint64_t a1)
{
  return swift_allocError(v1, a1, 0LL, 0LL);
}

uint64_t sub_100016B08(uint64_t a1, uint64_t a2)
{
  return swift_allocError(a1, a2, 0LL, 0LL);
}

uint64_t sub_100016B14(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_10000FE6C(a1, v3, a3);
}

uint64_t sub_100016B1C()
{
  return sub_100015644(v0, v1);
}

uint64_t sub_100016B28()
{
  return swift_retain(v0);
}

uint64_t sub_100016B30()
{
  return sub_1000155D4(v0, v1);
}

uint64_t sub_100016B3C(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 33LL, 0LL);
}

uint64_t sub_100016B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_beginAccess(a1, a2, a3, 0LL);
}

  ;
}

uint64_t sub_100016B68()
{
  return static POSIXError.current(or:)(5LL);
}

  ;
}

uint64_t sub_100016BA0(uint64_t a1)
{
  return dispatch thunk of SetAlgebra.init<A>(_:)(v4 - 136, v1, a1, v2, v3);
}

void *sub_100016BC0@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 128) = v1;
  *(void *)(v2 - 120) = a1;
  return _Block_copy((const void *)(v2 - 144));
}

uint64_t sub_100016BCC(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7LL);
}

uint64_t sub_100016BD4()
{
  return swift_release(v0);
}

uint64_t sub_100016BDC()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t sub_100016BE4()
{
  return swift_unknownObjectRelease(v0);
}

void sub_100016BEC()
{
}

uint64_t sub_100016BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Error<>.init(_:_:)(a1, a2 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a3, v3, v4);
}

uint64_t sub_100016C08()
{
  return sub_1000129C0();
}

  ;
}

uint64_t sub_100016C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Error<>.init(_:_:)(a1, a2, a3, v5, a5);
}

uint64_t sub_100016C30@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_100016C38()
{
  return swift_errorRelease(v0);
}

uint64_t sub_100016C40()
{
  return swift_errorRetain(v0);
}

uint64_t sub_100016C48()
{
  return sub_100015644(v1, v0);
}

void *sub_100016C54@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 112) = a1;
  *(void *)(v2 - 104) = v1;
  return _Block_copy((const void *)(v2 - 128));
}

uint64_t sub_100016C60()
{
  return type metadata accessor for DispatchWorkItemFlags(0LL);
}

uint64_t sub_100016C68()
{
  return swift_unknownObjectRelease(v0);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100016CB0()
{
  return swift_errorRelease(v0);
}

BOOL sub_100016CB8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100016CC8()
{
  return swift_release(*(void *)(v0 - 104));
}

uint64_t sub_100016CD0()
{
  return (*(uint64_t (**)(uint64_t, void))(v1 + 8))(v0, *(void *)(v2 - 144));
}

uint64_t sub_100016CE0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

  ;
}

uint64_t sub_100016D00(uint64_t a1, uint64_t a2)
{
  return sub_10001658C(a1, a2, v3, v2);
}

void sub_100016D10(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_100016D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100016658(a1, a2, a3, v4, v3);
}

uint64_t sub_100016D28()
{
  return (*(uint64_t (**)(void))(v0 - 288))();
}

uint64_t sub_100016D38()
{
  return type metadata accessor for DispatchQoS(0LL);
}

uint64_t sub_100016D40()
{
  return (*(uint64_t (**)(void))(v0 - 264))();
}

uint64_t sub_100016D4C()
{
  return Data.count.getter(v0, v1);
}

uint64_t sub_100016D58()
{
  return swift_release(*(void *)(v0 + 24));
}

uint64_t sub_100016D60()
{
  return sub_100015644(v0, v1);
}

uint64_t sub_100016D6C()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100016D74()
{
  return swift_errorRetain(v0);
}

uint64_t sub_100016D7C()
{
  return swift_endAccess(v0 - 144);
}

uint64_t sub_100016D84()
{
  return v1(v0, *(void *)(v2 - 152));
}

uint64_t sub_100016D90()
{
  return v0;
}

uint64_t sub_100016DA4()
{
  return swift_getObjectType(v0);
}

uint64_t sub_100016DAC()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_100016DB8()
{
  return swift_release(*(void *)(v0 - 88));
}

uint64_t sub_100016DC0()
{
  return swift_unknownObjectRelease(*(void *)(v0 - 272));
}

uint64_t sub_100016DCC(uint64_t a1)
{
  return sub_1000155D4(a1, v1);
}

unint64_t sub_100016DD4@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 136) = a1;
  return sub_1000120C8();
}

uint64_t sub_100016DDC()
{
  return v0;
}

uint64_t sub_100016DF0()
{
  return Data.count.getter(v1, v0);
}

uint64_t sub_100016DFC()
{
  return swift_retain(v0);
}

unint64_t sub_100016E04()
{
  return sub_100012108();
}

uint64_t sub_100016E0C()
{
  return swift_release(*(void *)(v0 + 32));
}

  ;
}

uint64_t sub_100016E1C()
{
  return type metadata accessor for RemotePairingError(0LL);
}

BOOL sub_100016E24(char a1, char a2)
{
  return a1 == a2;
}

void sub_100016E34(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int sub_100016E58(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL sub_100016E9C(char *a1, char *a2)
{
  return sub_100016E24(*a1, *a2);
}

Swift::Int sub_100016EA8()
{
  return sub_100016E58(*v0);
}

void sub_100016EB0(uint64_t a1)
{
}

Swift::Int sub_100016EB8()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100016EF8( uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(uint64_t, unint64_t, void), uint64_t a5)
{
  uint64_t v9 = (void *)sub_100016BCC((uint64_t)&unk_100076E40, 48LL);
  v9[2] = a2;
  v9[3] = a3;
  v9[4] = a4;
  v9[5] = a5;
  sub_10001E160();
  sub_100016B28();
  sub_10001CBF0();
  sub_100017FE4();
  id v11 = v10;
  uint64_t v12 = CUPairingIdentity.authTag(for:type:)(a2, a3, 1LL);
  unint64_t v14 = v13;
  a4(v12, v13, 0LL);
  sub_100016A64(v12, v14, 0);
  swift_release(v9);

  sub_100015644(a2, a3);
  swift_release(a5);
  sub_10001DCF0();
}

void sub_100017140(void (*a1)(void *, void))
{
  uint64_t v3 = v2;
  id v4 = v2;
  a1(v3, 0LL);
}

void sub_100017324( void *a1, unint64_t a2, char a3, uint64_t a4, void (*a5)(void, void))
{
  uint64_t v9 = a1;
  os_log_type_t v10 = static os_log_type_t.default.getter(a1);
  id v11 = (os_log_s *)qword_1000845F0;
  os_log_type_t v12 = v10;
  if (os_log_type_enabled((os_log_t)qword_1000845F0, v10))
  {
    swift_retain_n(a4, 2LL);
    char v25 = a3;
    unint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    uint64_t v28 = v14;
    *(_DWORD *)unint64_t v13 = 136446210;
    sub_10001D75C(a4 + 24, (uint64_t)&v26);
    uint64_t v15 = sub_10000FD7C(&qword_100081578);
    uint64_t v16 = String.init<A>(describing:)(&v26, v15);
    unint64_t v17 = a2;
    uint64_t v18 = a5;
    uint64_t v20 = v19;
    sub_100045370(v16, v19, &v28);
    uint64_t v26 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v13 + 4, v13 + 12);
    swift_release_n(a4, 2LL);
    uint64_t v22 = v20;
    a5 = v18;
    a2 = v17;
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Fetched IRK from IRK generator %{public}s", v13, 0xCu);
    swift_arrayDestroy(v14, 1LL);
    sub_10001001C(v14);
    uint64_t v23 = (uint64_t)v13;
    a3 = v25;
    sub_10001001C(v23);
  }

  if ((a3 & 1) != 0)
  {
    swift_errorRetain(v9);
    uint64_t v24 = 1LL;
  }

  else
  {
    sub_1000155D4((uint64_t)v9, a2);
    sub_10001752C(a4, (uint64_t)v9, a2, &v28, &v26);
    uint64_t v24 = 0LL;
    sub_100016A64((uint64_t)v9, a2, 0);
    uint64_t v9 = v26;
  }

  a5(v9, v24);
  sub_10001D498(v9, v24);
}

void sub_10001752C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  char v7 = *(void **)(a1 + 104);
  if (v7)
  {
    id v8 = v7;
    os_log_type_t v9 = static os_log_type_t.debug.getter(v8);
    os_log_type_t v10 = (os_log_s *)qword_1000845F0;
    if (os_log_type_enabled((os_log_t)qword_1000845F0, v9))
    {
      uint64_t v46 = a5;
      uint64_t v47 = v5;
      id v11 = v8;
      os_log_type_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v13 = swift_slowAlloc(32LL, -1LL);
      uint64_t v50 = v13;
      *(_DWORD *)os_log_type_t v12 = 136315138;
      id v14 = [v11 identifier];
      uint64_t v15 = sub_10000FD7C((uint64_t *)&unk_1000835C0);
      uint64_t v45 = &v41;
      __chkstk_darwin(v15, v16);
      uint64_t v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      if (v14)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v14);

        uint64_t v19 = type metadata accessor for UUID(0LL);
        uint64_t v20 = 0LL;
      }

      else
      {
        uint64_t v19 = type metadata accessor for UUID(0LL);
        uint64_t v20 = 1LL;
      }

      sub_10001D930((uint64_t)v18, v20, 1LL, v19);
      uint64_t v37 = String.init<A>(describing:)(v18, v15);
      uint64_t v39 = v38;
      sub_100045370(v37, v38, &v50);
      uint64_t v48 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v12 + 4, v12 + 12);

      swift_bridgeObjectRelease(v39);
      _os_log_impl( (void *)&_mh_execute_header,  v10,  v9,  "Not saving new pairing identity as one has already been created. Using already created identity %s",  v12,  0xCu);
      swift_arrayDestroy(v13, 1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);
      a5 = v46;
    }

    *a5 = v8;
  }

  else
  {
    uint64_t v41 = a4;
    uint64_t v45 = (void **)a3;
    uint64_t v46 = a5;
    uint64_t v44 = a2;
    id v21 = [objc_allocWithZone(CUPairingIdentity) init];
    uint64_t PairingKey = generatePairingKeyPair()();
    uint64_t v43 = v22;
    uint64_t v24 = v23;
    unint64_t v26 = v25;
    uint64_t v27 = type metadata accessor for UUID(0LL);
    uint64_t v47 = v5;
    uint64_t v28 = *(void *)(v27 - 8);
    uint64_t v30 = __chkstk_darwin(v27, v29);
    uint64_t v32 = (char *)&v41 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    UUID.init()(v30);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v32, v27);
    uint64_t v34 = PairingKey;
    [v21 setIdentifier:isa];

    unint64_t v35 = v43;
    sub_10001D7A0(v34, v43, v21);
    sub_10001D8EC(v24, v26, v21);
    sub_10001D7E4(v44, (uint64_t)v45, v21);
    uint64_t v36 = v47;
    sub_100017898();
    if (v36)
    {
      sub_100015644(v24, v26);
      sub_100015644(v34, v35);

      *uint64_t v41 = v36;
    }

    else
    {
      sub_100015644(v34, v35);
      sub_100015644(v24, v26);
      *uint64_t v46 = v21;
    }
  }

void sub_100017898()
{
  uint64_t v98 = v0;
  id v4 = v3;
  LODWORD(v103) = static os_log_type_t.info.getter(v3);
  uint64_t v102 = qword_1000845F0;
  uint64_t v100 = sub_10000FD7C(&qword_100081580);
  uint64_t v5 = sub_10001DC98(v100);
  __int128 v99 = xmmword_100062930;
  *(_OWORD *)(v5 + swift_weakDestroy(v0 + 16) = xmmword_100062930;
  uint64_t v6 = sub_10000FD7C((uint64_t *)&unk_1000835C0);
  uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64LL);
  __chkstk_darwin(v6, v8);
  sub_10001DF58();
  id v9 = [v4 identifier];
  uint64_t v101 = v7;
  if (__chkstk_darwin(v9, v10))
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v9);

    uint64_t v11 = sub_10001DCE0();
    os_log_type_t v12 = (char *)&v95 - v2;
    uint64_t v13 = 0LL;
  }

  else
  {
    uint64_t v11 = type metadata accessor for UUID(0LL);
    os_log_type_t v12 = (char *)&v95 - v2;
    uint64_t v13 = 1LL;
  }

  sub_10001DE28((uint64_t)v12, v13);
  sub_10001E130();
  sub_10001DCE0();
  uint64_t v14 = sub_10001E07C(v0);
  if ((_DWORD)v14)
  {
    sub_10001DD0C(v14, (uint64_t *)&unk_1000835C0);
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
  }

  else
  {
    uint64_t v18 = v4;
    uint64_t v19 = *(void *)(v11 - 8);
    __chkstk_darwin(v14, v15);
    sub_10001DF18();
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v2, v0, v11);
    uint64_t v21 = sub_10001DD0C(v20, (uint64_t *)&unk_1000835C0);
    uint64_t v16 = UUID.uuidString.getter(v21);
    uint64_t v17 = v22;
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 8);
    id v4 = v18;
    sub_10001E0A8(v2, v23);
  }

  *(void *)&__int128 v106 = v16;
  *((void *)&v106 + 1) = v17;
  uint64_t v24 = sub_10000FD7C(&qword_1000815A0);
  uint64_t v25 = String.init<A>(describing:)(&v106, v24);
  uint64_t v27 = v26;
  *(void *)(v5 + 56) = &type metadata for String;
  unint64_t v28 = sub_10001D978();
  *(void *)(v5 + 64) = v28;
  *(void *)(v5 + 32) = v25;
  *(void *)(v5 + 40) = v27;
  sub_10001E100( v103,  (uint64_t)&_mh_execute_header,  v102,  (uint64_t)"Saving new pairing identity (id=%{public}@) to system keychain",  62LL);
  sub_100016D6C();
  uint64_t v108 = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  uint64_t v29 = sub_10001DFB0(v108, (SEL *)&selRef_altIRK);
  if (v30 >> 60 == 15)
  {
    __int128 v106 = 0u;
    __int128 v107 = 0u;
  }

  else
  {
    *((void *)&v107 + 1) = &type metadata for Data;
    *(void *)&__int128 v106 = v29;
    *((void *)&v106 + 1) = v30;
  }

  sub_10003C190((uint64_t)&v106, 0x4B5249746C61LL, 0xE600000000000000LL);
  uint64_t v32 = sub_10001DFB0(v31, (SEL *)&selRef_secretKey);
  if (v33 >> 60 == 15)
  {
    __int128 v106 = 0u;
    __int128 v107 = 0u;
  }

  else
  {
    *((void *)&v107 + 1) = &type metadata for Data;
    *(void *)&__int128 v106 = v32;
    *((void *)&v106 + 1) = v33;
  }

  sub_10003C190((uint64_t)&v106, 27507LL, 0xE200000000000000LL);
  uint64_t v35 = sub_10001DFB0(v34, (SEL *)&selRef_publicKey);
  if (v36 >> 60 == 15)
  {
    __int128 v106 = 0u;
    __int128 v107 = 0u;
  }

  else
  {
    *((void *)&v107 + 1) = &type metadata for Data;
    *(void *)&__int128 v106 = v35;
    *((void *)&v106 + 1) = v36;
  }

  sub_10003C190((uint64_t)&v106, 27504LL, 0xE200000000000000LL);
  uint64_t v37 = v108;
  *((void *)&v107 + 1) = sub_10000FD7C(&qword_1000815B0);
  *(void *)&__int128 v106 = v37;
  sub_10001DE00();
  uint64_t v38 = OPACKEncoderCreateData(from:)(&v106);
  if (v1)
  {
    sub_10001DC58();
    sub_10000FF38(&v106);
LABEL_24:
    sub_100012268();
    return;
  }

  uint64_t v103 = v38;
  unint64_t v109 = v39;
  unint64_t v96 = v28;
  sub_10000FF38(&v106);
  uint64_t v40 = sub_10000FD7C(&qword_100081590);
  uint64_t v41 = v4;
  uint64_t inited = swift_initStackObject(v40, &v104);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100062940;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClass);
  *(void *)(inited + 40) = v43;
  sub_10001DD48();
  uint64_t v102 = v44;
  *(void *)(inited + 72) = v44;
  *(void *)(inited + 48) = kSecClassGenericPassword;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccount);
  *(void *)(inited + 88) = v45;
  uint64_t v46 = (id)kSecClassGenericPassword;
  uint64_t v95 = v41;
  id v47 = [v41 identifier];
  uint64_t v97 = &v95;
  __chkstk_darwin(v47, v48);
  sub_10001DEA8();
  if (!v49)
  {
    uint64_t v92 = sub_10001DD94();
    sub_10001D930(v92, v93, v94, v11);
    goto LABEL_26;
  }

  uint64_t v51 = *(void *)(v11 - 8);
  __chkstk_darwin(v49, v50);
  sub_10000FFCC();
  uint64_t v54 = v53 - v52;
  sub_10001E044();

  (*(void (**)(const CFStringRef, uint64_t, uint64_t))(v51 + 32))(kSecClassGenericPassword, v54, v11);
  sub_10001DE28((uint64_t)kSecClassGenericPassword, 0LL);
  uint64_t v55 = sub_10001DDBC((uint64_t)kSecClassGenericPassword, 1LL, v11);
  if (v56)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  uint64_t v57 = UUID.uuidString.getter(v55);
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = v57;
  *(void *)(inited + 104) = v58;
  sub_10001E0A8((uint64_t)kSecClassGenericPassword, *(uint64_t (**)(uint64_t, uint64_t))(v51 + 8));
  uint64_t v59 = kSecUseSystemKeychain;
  if (kSecUseSystemKeychain)
  {
    swift_bridgeObjectRelease(v108);
    *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
    *(void *)(inited + 136) = v60;
    *(void *)(inited + 168) = &type metadata for Bool;
    *(_BYTE *)(inited + 144) = 1;
    *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrDescription);
    *(void *)(inited + 184) = v61;
    *(void *)(inited + 2swift_weakDestroy(v0 + 16) = &type metadata for String;
    *(void *)(inited + 192) = 0xD000000000000017LL;
    *(void *)(inited + 200) = 0x8000000100067650LL;
    *(void *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrLabel);
    *(void *)(inited + 232) = v62;
    *(void *)(inited + 264) = &type metadata for String;
    *(void *)(inited + 240) = 0xD000000000000017LL;
    *(void *)(inited + 248) = 0x8000000100067650LL;
    *(void *)(inited + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrService);
    *(void *)(inited + 280) = v63;
    *(void *)(inited + 312) = &type metadata for String;
    *(void *)(inited + 288) = 0xD000000000000017LL;
    *(void *)(inited + 296) = 0x8000000100067650LL;
    *(void *)(inited + 320) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecValueData);
    *(void *)(inited + 328) = v64;
    *(void *)(inited + 360) = &type metadata for Data;
    uint64_t v65 = v103;
    *(void *)(inited + 336) = v103;
    *(void *)(inited + 344) = v109;
    sub_1000155D4(v65, v109);
    uint64_t v105 = sub_10001DFE4(inited, (uint64_t)&type metadata for String);
    static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessGroup);
    sub_10001DDEC();
    *((void *)&v107 + 1) = &type metadata for String;
    sub_10001DD64();
    *(void *)&__int128 v106 = 0xD000000000000017LL;
    *((void *)&v106 + 1) = v66;
    sub_10001DC80((uint64_t)&v106, v67, v68, v69);
    uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessible);
    uint64_t v72 = v71;
    *((void *)&v107 + 1) = v102;
    *(void *)&__int128 v106 = kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
    uint64_t v73 = (id)kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
    sub_10003C190((uint64_t)&v106, v70, v72);
    uint64_t v74 = v105;
    v75.super.Class isa = sub_10001DFF0().super.isa;
    sub_10001DC58();
    sub_10001DF98();
    sub_10001DE78();
    if ((_DWORD)v74)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
      sub_10001DD84();
      id v76 = objc_allocWithZone(&OBJC_CLASS___NSError);
      sub_10001DC68((uint64_t)v75.super.isa, v70, v74);
      v78 = v77;
      uint64_t v79 = static os_log_type_t.error.getter(v77);
      uint64_t v80 = qword_1000845F0;
      uint64_t v81 = sub_10001DC98(v100);
      *(_OWORD *)(v81 + swift_weakDestroy(v0 + 16) = v99;
      id v82 = v78;
      id v83 = [v82 description];
      uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
      uint64_t v86 = v85;

      unint64_t v87 = v96;
      *(void *)(v81 + 56) = &type metadata for String;
      *(void *)(v81 + 64) = v87;
      *(void *)(v81 + 32) = v84;
      *(void *)(v81 + 40) = v86;
      sub_10001E100( v79,  (uint64_t)&_mh_execute_header,  v80,  (uint64_t)"Failed to save new pairing identity to system keychain: %{public}@",  66LL);
      sub_100016D6C();
      id v88 = v82;
      swift_willThrow(v88);
      sub_10001E004();
    }

    else
    {
      sub_10001E004();
      uint64_t v89 = *(void **)(v98 + 104);
      uint64_t v90 = v95;
      *(void *)(v98 + 104) = v95;
      id v91 = v90;
    }

    goto LABEL_24;
  }

LABEL_27:
  __break(1u);
}

        ;
      }
    }

    static RemotePairingError.invalidOperation.getter(v18);
    uint64_t v21 = sub_10000FE6C( (unint64_t *)&unk_1000819E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    sub_100016B08(v8, v21);
    uint64_t v22 = sub_10000FE6C( (unint64_t *)&unk_1000813E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    uint64_t v23 = Error<>.init(_:_:)(v12, 0xD00000000000001CLL, 0x80000001000677C0LL, v8, v22);
    return swift_willThrow(v23);
  }

  else
  {
    (*(void (**)(uint64_t, void))(v19 + 104))(v4, enum case for BonjourService.pairableHost(_:));
    uint64_t v25 = [objc_allocWithZone(CUNetLinkManager) init];
    sub_10001D75C((uint64_t)(v6 + 7), (uint64_t)v56);
    (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))( v3,  enum case for BonjourBrowser.Mode.onDemand(_:),  v13);
    uint64_t v26 = type metadata accessor for BonjourBrowser(0LL);
    swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
    uint64_t v27 = BonjourBrowser.init(service:includePeerToPeer:netLinkManager:pairingManager:mode:)(v4, 1LL, v25, v56, v3);
    unint64_t v28 = sub_100016BCC((uint64_t)&unk_100077010, 24LL);
    sub_10002043C(v28);
    uint64_t v29 = sub_100016BCC((uint64_t)&unk_100077038, 24LL);
    sub_100020404(v29);
    unint64_t v30 = sub_100016BCC((uint64_t)&unk_100077060, 32LL);
    *(void *)(v30 + swift_weakDestroy(v0 + 16) = v12;
    *(void *)(v30 + 24) = v4;
    sub_100020454();
    sub_100016DFC();
    dispatch thunk of BonjourBrowser.resultsChangedHandler.setter(sub_100020114, v30);
    swift_release(v12);
    sub_100020490();
    uint64_t v31 = sub_10000FD7C((uint64_t *)&unk_1000816F0);
    uint64_t inited = swift_initStackObject(v31, v55);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100062B00;
    *(void *)(inited + 32) = a1;
    v56[0] = inited;
    specialized Array._endMutation()(inited);
    unint64_t v33 = v56[0];
    if (v56[0] >> 62) {
      goto LABEL_35;
    }
    uint64_t v34 = *(void *)((v56[0] & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_100020434();
LABEL_6:
    if (v34)
    {
      sub_100047C10(v33);
      unint64_t v36 = v35;
    }

    else
    {
      swift_bridgeObjectRelease(v33);
      unint64_t v36 = &_swiftEmptySetSingleton;
    }

    uint64_t v49 = type metadata accessor for UUID(0LL);
    uint64_t v50 = type metadata accessor for DiscoveredPairableHost(0LL);
    uint64_t v51 = sub_10002011C();
    uint64_t v52 = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, v49, v50, v51);
    sub_10000FFC4();
    sub_10001E3A8((unint64_t)v36, v52, v27);
    dispatch thunk of BonjourBrowser.start(queue:)(v6[5]);
    return sub_10000FFF8();
  }

  __break(1u);
  return result;
}

void sub_100017FE4()
{
  uint64_t v2 = *(void **)(v0 + 104);
  if (!v2)
  {
    sub_100018048();
    if (v1) {
      goto LABEL_4;
    }
    uint64_t v5 = *(void **)(v0 + 104);
    *(void *)(v0 + 104) = v4;
    id v6 = v4;

    uint64_t v2 = 0LL;
  }

  id v3 = v2;
LABEL_4:
  sub_10001E18C();
}

void sub_100018048()
{
  unint64_t v96 = v0;
  uint64_t v3 = sub_100016E1C();
  sub_100012280();
  __chkstk_darwin(v4, v5);
  sub_10001DF00();
  uint64_t v7 = static os_log_type_t.info.getter(v6);
  sub_100012380( v7,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"Loading self identity from system keychain",  42LL);
  uint64_t v8 = sub_10000FD7C(&qword_100081590);
  uint64_t inited = swift_initStackObject(v8, &v103);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100062950;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClass);
  *(void *)(inited + 40) = v10;
  sub_10001DD48();
  *(void *)(inited + 72) = v11;
  *(void *)(inited + 48) = kSecClassGenericPassword;
  if (!kSecUseSystemKeychain) {
    __break(1u);
  }
  *(void *)(inited + 80) = sub_10001E180();
  *(void *)(inited + 88) = v12;
  *(void *)(inited + 120) = &type metadata for Bool;
  *(_BYTE *)(inited + 96) = 1;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrService);
  *(void *)(inited + 136) = v13;
  *(void *)(inited + 168) = &type metadata for String;
  sub_10001DD64();
  *(void *)(inited + 144) = v2;
  *(void *)(inited + 152) = v14;
  *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecReturnAttributes);
  *(void *)(inited + 184) = v15;
  *(void *)(inited + 2swift_weakDestroy(v0 + 16) = &type metadata for Bool;
  *(_BYTE *)(inited + 192) = 1;
  *(void *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecReturnData);
  *(void *)(inited + 232) = v16;
  *(void *)(inited + 264) = &type metadata for Bool;
  *(_BYTE *)(inited + 240) = 1;
  uint64_t v17 = (id)kSecClassGenericPassword;
  uint64_t v97 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessGroup);
  sub_10001DDEC();
  uint64_t v102 = &type metadata for String;
  sub_10001DD64();
  *(void *)&__int128 v101 = v2;
  *((void *)&v101 + 1) = v18;
  sub_10001DC80((uint64_t)&v101, v19, v20, v21);
  CFTypeRef v100 = 0LL;
  sub_10001DE00();
  Class isa = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
  sub_10001DC58();
  OSStatus v23 = SecItemCopyMatching(isa, &v100);

  CFTypeRef v24 = v100;
  if (v23)
  {
    sub_10001DC58();
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
    uint64_t v27 = v26;
    id v28 = objc_allocWithZone(&OBJC_CLASS___NSError);
    sub_10001DC68(v25, v27, v23);
    sub_10001DF30();
LABEL_18:
    swift_unknownObjectRelease(v24);
LABEL_19:
    sub_100012268();
    return;
  }

  if (!v100
    || (*(void *)&__int128 v101 = v100,
        swift_unknownObjectRetain(v100),
        uint64_t v29 = sub_10000FD7C(&qword_1000815B0),
        (sub_10001DC60((uint64_t)&v98, (uint64_t)&v101, (uint64_t)&type metadata for Swift.AnyObject + 8, v29) & 1) == 0))
  {
    uint64_t v43 = v97;
LABEL_15:
    uint64_t v42 = swift_bridgeObjectRelease(v43);
    goto LABEL_16;
  }

  uint64_t v30 = v98;
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccount);
  uint64_t v33 = v32;
  sub_10003C3B4(v31, v32, v30, &v101);
  sub_10001DC58();
  if (!v102)
  {
    uint64_t v44 = sub_10001DCE8();
    sub_10001DDD0(v44, &qword_100081598);
LABEL_14:
    uint64_t v43 = v97;
    goto LABEL_15;
  }

  if ((sub_10001DC60( (uint64_t)&v98,  (uint64_t)&v101,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String) & 1) == 0)
  {
    sub_10001DCE8();
    goto LABEL_14;
  }

  uint64_t v94 = v30;
  uint64_t v35 = v98;
  unint64_t v34 = v99;
  uint64_t v36 = sub_10001DCE0();
  uint64_t v95 = &v87;
  uint64_t v92 = *(void *)(v36 - 8);
  __chkstk_darwin(v36, v37);
  sub_10001E144();
  uint64_t v93 = v38;
  sub_10000FD7C((uint64_t *)&unk_1000835C0);
  id v91 = &v87;
  sub_100012280();
  __chkstk_darwin(v39, v40);
  sub_10001DE34();
  uint64_t v89 = v35;
  UUID.init(uuidString:)(v35, v34);
  uint64_t v90 = (uint8_t *)v36;
  sub_10001DDBC(v33, 1LL, v36);
  if (v63)
  {
    sub_10001DDB4();
    sub_10001DFB8();
    uint64_t v41 = sub_10001DCE8();
    uint64_t v42 = sub_10001DD0C(v41, (uint64_t *)&unk_1000835C0);
LABEL_16:
    static RemotePairingError.pairingFailed.getter(v42);
    uint64_t v45 = sub_10001DAE0( (unint64_t *)&unk_1000819E0,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    sub_100016B08(v3, v45);
    sub_10001E030();
    uint64_t v46 = sub_10001DAE0( (unint64_t *)&unk_1000813E0,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    sub_10001DD24(v1, v2 + 28, 0x8000000100067670LL, v47, v46);
    sub_10001DDE4();
LABEL_17:
    CFTypeRef v24 = v100;
    goto LABEL_18;
  }

  uint64_t v88 = v34;
  sub_10001DFDC(v93, v33, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v92 + 32));
  uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecValueData);
  sub_10003C3B4(v48, v49, v94, &v101);
  sub_10001DC58();
  if (!v102)
  {
    sub_10001DCC4();
    uint64_t v53 = sub_10001DDB4();
    sub_10001DDD0(v53, &qword_100081598);
    uint64_t v54 = v92;
LABEL_26:
    sub_10001DDAC(v93, *(uint64_t (**)(uint64_t, uint64_t))(v54 + 8));
    uint64_t v42 = swift_bridgeObjectRelease(v97);
    goto LABEL_16;
  }

  if ((sub_10001DC60( (uint64_t)&v98,  (uint64_t)&v101,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Data) & 1) == 0)
  {
    sub_10001DCC4();
    sub_10001DDB4();
    uint64_t v54 = v92;
    goto LABEL_26;
  }

  uint64_t v51 = v98;
  unint64_t v50 = v99;
  unint64_t v52 = v96;
  OPACKDecode(data:)(&v101, v98, v99);
  if (v52)
  {
    sub_10001DCC4();
    sub_10001DFB8();
    sub_10001E124();
    sub_10001DD14();
    swift_bridgeObjectRelease(v97);
    goto LABEL_17;
  }

  if ((sub_10001DC60((uint64_t)&v98, (uint64_t)&v101, (uint64_t)&type metadata for Any + 8, v29) & 1) == 0)
  {
    sub_10001DCC4();
    sub_10001DFB8();
    sub_10001E124();
    sub_10001DD14();
    uint64_t v42 = swift_bridgeObjectRelease(v97);
    goto LABEL_16;
  }

  unint64_t v96 = v50;
  uint64_t v55 = v98;
  uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessible);
  sub_10003C3B4(v56, v57, v94, &v101);
  sub_10001DC58();
  uint64_t v58 = sub_100016D6C();
  if (!v102)
  {
    sub_10001DDD0(v58, &qword_100081598);
    goto LABEL_39;
  }

  if ((sub_10001DC60( (uint64_t)&v98,  (uint64_t)&v101,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String) & 1) == 0) {
    goto LABEL_39;
  }
  if (kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate)
  {
    uint64_t v60 = v98;
    uint64_t v59 = v99;
    uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate);
    BOOL v63 = v60 == v61 && v59 == v62;
    if (v63)
    {
      sub_10001DDF8(v59);
    }

    else
    {
      char v64 = sub_10001E0D0(v60, v59, v61);
      sub_10001DDA4();
      sub_10001DCE8();
      if ((v64 & 1) == 0)
      {
LABEL_39:
        sub_100016D6C();
        [objc_allocWithZone(CUPairingIdentity) init];
        v65.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
        sub_10001DC74((uint64_t)v65.super.isa, "setIdentifier:");

        uint64_t v66 = sub_10001E068();
        sub_10003C3B4(v66, v67, v55, v68);
        if (v102)
        {
          uint64_t v70 = sub_10001DC60( (uint64_t)&v98,  (uint64_t)&v101,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Data);
          if ((v70 & 1) != 0)
          {
            sub_10001DE98();
            uint64_t v70 = sub_10001DF80();
            goto LABEL_44;
          }
        }

        else
        {
          uint64_t v70 = sub_10001DDD0(v69, &qword_100081598);
        }

        v65.super.Class isa = 0LL;
LABEL_44:
        sub_10001DC74(v70, "setAltIRK:");

        sub_10001E05C(27507LL, &v101);
        if (v102)
        {
          uint64_t v72 = sub_10001DC60( (uint64_t)&v98,  (uint64_t)&v101,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Data);
          if ((v72 & 1) != 0)
          {
            sub_10001DE98();
            uint64_t v72 = sub_10001DF80();
            goto LABEL_49;
          }
        }

        else
        {
          uint64_t v72 = sub_10001DDD0(v71, &qword_100081598);
        }

        v65.super.Class isa = 0LL;
LABEL_49:
        sub_10001DC74(v72, "setSecretKey:");

        sub_10001E05C(27504LL, &v101);
        uint64_t v73 = sub_10001DD30();
        id v91 = (uint64_t *)v51;
        if (v102)
        {
          uint64_t v74 = sub_10001DC60( (uint64_t)&v98,  (uint64_t)&v101,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Data);
          if ((v74 & 1) != 0)
          {
            uint64_t v75 = v98;
            unint64_t v76 = v99;
            v77.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
            uint64_t v74 = sub_100015644(v75, v76);
            v78 = &unk_100084000;
LABEL_54:
            sub_10001DC74(v74, "setPublicKey:");

            os_log_type_t v80 = static os_log_type_t.info.getter(v79);
            uint64_t v81 = (os_log_s *)*((void *)v78 + 190);
            os_log_type_t v82 = v80;
            if (os_log_type_enabled(v81, v80))
            {
              uint64_t v83 = v88;
              sub_10001DEF8();
              uint64_t v84 = (uint8_t *)sub_1000122E0(12LL);
              uint64_t v94 = sub_1000122E0(32LL);
              *(void *)&__int128 v101 = v94;
              *(_DWORD *)uint64_t v84 = 136315138;
              uint64_t v90 = v84 + 4;
              sub_10001DEF8();
              sub_100045370(v89, v83, (uint64_t *)&v101);
              uint64_t v98 = v85;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v90, v84 + 12);
              swift_bridgeObjectRelease_n(v83, 3LL);
              sub_100016D10( (void *)&_mh_execute_header,  v81,  v82,  "Fetched existing system pairing identity (id=%s from keychain",  v84);
              uint64_t v86 = v94;
              swift_arrayDestroy(v94, 1LL);
              sub_10001001C(v86);
              sub_10001001C((uint64_t)v84);
              sub_10001DFFC((uint64_t)v91);
            }

            else
            {
              sub_10001DFFC((uint64_t)v91);
              sub_10001DCC4();
            }

            sub_10001DD14();
            swift_unknownObjectRelease(v100);
            goto LABEL_19;
          }
        }

        else
        {
          uint64_t v74 = sub_10001DDD0(v73, &qword_100081598);
        }

        v78 = &unk_100084000;
        v77.super.Class isa = 0LL;
        goto LABEL_54;
      }
    }

    sub_10001CC70(v97);
    goto LABEL_39;
  }

  __break(1u);
}

void sub_1000189C8()
{
  uint64_t v3 = v2;
  sub_10001CBF0();
  if (!v1)
  {
    uint64_t v4 = sub_10001DCE0();
    uint64_t v42 = &v39;
    uint64_t v5 = *(void **)(v4 - 8);
    uint64_t v6 = v5[8];
    __chkstk_darwin(v4, v7);
    unint64_t v8 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    uint64_t v40 = (char *)&v39 - v8;
    id v41 = v3;
    id v9 = [v3 identifier];
    sub_10000FD7C((uint64_t *)&unk_1000835C0);
    sub_100012280();
    __chkstk_darwin(v10, v11);
    sub_100016C70();
    if (v9)
    {
      __chkstk_darwin(v12, v13);
      uint64_t v14 = (char *)&v39 - v8;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v9);

      uint64_t v15 = (void (*)(uint64_t, char *, uint64_t))v5[4];
      v15(v0, v14, v4);
      sub_10001D930(v0, 0LL, 1LL, v4);
      uint64_t v16 = sub_10001DDBC(v0, 1LL, v4);
      if (!v17)
      {
        id v41 = v5;
        v15((uint64_t)v40, (char *)v0, v4);
        sub_10001DDD8();
        uint64_t v19 = static os_log_type_t.debug.getter(v18);
        uint64_t v20 = qword_1000845F0;
        uint64_t v21 = sub_10000FD7C(&qword_100081580);
        uint64_t v22 = sub_10001DC98(v21);
        *(_OWORD *)(v22 + swift_weakDestroy(v0 + 16) = xmmword_100062930;
        uint64_t v23 = UUID.uuidString.getter();
        uint64_t v25 = v24;
        *(void *)(v22 + 56) = &type metadata for String;
        *(void *)(v22 + 64) = sub_10001D978();
        *(void *)(v22 + 32) = v23;
        *(void *)(v22 + 40) = v25;
        os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Trying to fetch peer with ID %{public}@", 39LL, 2LL, v22);
        sub_10001DD30();
        sub_10001AC84();
        uint64_t v37 = sub_10001DE08();
LABEL_10:
        uint64_t v38 = static os_log_type_t.debug.getter(v37);
        sub_100012380( v38,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"Found paired peer matching query",  32LL);
        goto LABEL_7;
      }
    }

    else
    {
      uint64_t v26 = sub_10001DD94();
      uint64_t v16 = sub_10001D930(v26, v27, v28, v4);
    }

    sub_10001DD0C(v16, (uint64_t *)&unk_1000835C0);
    sub_10001DDD8();
    uint64_t v30 = static os_log_type_t.debug.getter(v29);
    sub_100012380( v30,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"Trying to find peer based on public key",  39LL);
    sub_10001A47C();
    uint64_t v32 = sub_100018CDC(v31, v41);
    uint64_t v37 = sub_10001DCE8();
    if (v32) {
      goto LABEL_10;
    }
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
    uint64_t v35 = v34;
    id v36 = objc_allocWithZone(&OBJC_CLASS___NSError);
    sub_10001DC68(v33, v35, -25300LL);
    sub_10001DF30();
  }

LABEL_7:
  sub_100012268();
}

    uint64_t v12 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v12;
    return a1;
  }

  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[1]);
    swift_release(a1[2]);
    goto LABEL_7;
  }

  *a1 = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  unint64_t v8 = a2[2];
  id v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

  uint64_t v4 = sub_10000FD7C(&qword_1000820C0);
  uint64_t v5 = *(void *)(*(void *)(v4 - 8) + 64LL);
  __chkstk_darwin(v4, v6);
  uint64_t v7 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  unint64_t v8 = (char *)&v22[-1] - v7;
  id v9 = [v0 dateModified];
  if (__chkstk_darwin(v9, v10))
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v9);

    uint64_t v11 = type metadata accessor for Date(0LL);
    uint64_t v12 = (char *)&v22[-1] - v7;
    uint64_t v13 = 0LL;
  }

  else
  {
    uint64_t v11 = type metadata accessor for Date(0LL);
    uint64_t v12 = (char *)&v22[-1] - v7;
    uint64_t v13 = 1LL;
  }

  sub_10001D930((uint64_t)v12, v13, 1LL, v11);
  sub_1000480D0((uint64_t)&v22[-1] - v7, (uint64_t)&v22[-1] - v7);
  type metadata accessor for Date(0LL);
  uint64_t v14 = sub_10001D9C8((uint64_t)&v22[-1] - v7, 1LL, v11);
  if ((_DWORD)v14)
  {
    sub_10001DB68((uint64_t)&v22[-1] - v7, &qword_1000820C0);
    return 0LL;
  }

  else
  {
    uint64_t v16 = *(void *)(v11 - 8);
    __chkstk_darwin(v14, v15);
    uint64_t v18 = (char *)&v22[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v18, v8, v11);
    uint64_t v19 = sub_10001DB68((uint64_t)v8, &qword_1000820C0);
    uint64_t v20 = Date.timeIntervalSince1970.getter(v19);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v11);
    return *(void *)&v20;
  }

void *sub_100018CDC(unint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    uint64_t v16 = v2;
    unint64_t v17 = v2 & 0xC000000000000001LL;
    for (uint64_t i = 4LL; ; ++i)
    {
      id v5 = v17 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v2) : *(id *)(v2 + 8 * i);
      uint64_t v6 = v5;
      uint64_t v7 = i - 3;
      if (__OFADD__(i - 4, 1LL)) {
        break;
      }
      uint64_t v8 = sub_10001D890(v5, (SEL *)&selRef_publicKey);
      unint64_t v10 = v9;
      uint64_t v12 = sub_10001D890(a2, (SEL *)&selRef_publicKey);
      unint64_t v13 = v11;
      if (v10 >> 60 == 15)
      {
        if (v11 >> 60 == 15)
        {

          swift_bridgeObjectRelease(v2);
          return v6;
        }
      }

      else if (v11 >> 60 != 15)
      {
        __asm { BR              X8 }
      }

      sub_100015D58(v8, v10);
      sub_100015D58(v12, v13);

      uint64_t v2 = v16;
      if (v7 == v3)
      {

        swift_bridgeObjectRelease(v16);
        return 0LL;
      }
    }

    __break(1u);
LABEL_16:
    if (v2 < 0) {
      uint64_t v14 = v2;
    }
    else {
      uint64_t v14 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
  }

  swift_bridgeObjectRelease(v2);
  return 0LL;
}

void *sub_100019588( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v10; uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v15))
  {
    uint64_t v11 = 4LL;
    while (1)
    {
      id v12 = (a1 & 0xC000000000000001LL) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, a1)
          : *(id *)(a1 + 8 * v11);
      unint64_t v13 = v12;
      uint64_t v14 = v11 - 3;
      if (__OFADD__(v11 - 4, 1LL)) {
        break;
      }
      if ((CUPairedPeer.verify(authTag:data:type:)(a2, a3, a4, a5, a6) & 1) != 0)
      {
        swift_bridgeObjectRelease(a1);
        sub_100015644(a2, a3);
        goto LABEL_18;
      }

      ++v11;
      if (v14 == v10) {
        goto LABEL_17;
      }
    }

    __break(1u);
LABEL_13:
    if (a1 < 0) {
      uint64_t v15 = a1;
    }
    else {
      uint64_t v15 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

void sub_1000196EC()
{
  uint64_t v2 = sub_100016E1C();
  sub_100012280();
  __chkstk_darwin(v3, v4);
  sub_10000FFCC();
  uint64_t v7 = v6 - v5;
  sub_10001CBF0();
  if (v1) {
    goto LABEL_9;
  }
  uint64_t v173 = v7;
  unint64_t v168 = v0;
  uint64_t v169 = 0LL;
  uint64_t v8 = sub_10001DCE0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8, v11);
  unint64_t v12 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v171 = v13;
  v172 = (char *)&v148 - v12;
  id v14 = [v13 identifier];
  sub_10000FD7C((uint64_t *)&unk_1000835C0);
  sub_100012280();
  __chkstk_darwin(v15, v16);
  sub_100016C70();
  if (!v14)
  {
    uint64_t v21 = sub_10001DC8C(v0, 1LL);
    goto LABEL_7;
  }

  v170 = &v148;
  __chkstk_darwin(v17, v18);
  uint64_t v19 = (char *)&v148 - v12;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v14);

  uint64_t v20 = *(void (**)(unint64_t, char *, uint64_t))(v9 + 32);
  v20(v0, (char *)&v148 - v12, v8);
  sub_10001DC8C(v0, 0LL);
  uint64_t v21 = sub_10001DDBC(v0, 1LL, v8);
  if (v22)
  {
LABEL_7:
    sub_10001DD0C(v21, (uint64_t *)&unk_1000835C0);
    sub_10001DDD8();
    goto LABEL_8;
  }

  uint64_t v167 = v9;
  uint64_t v23 = v172;
  v20((unint64_t)v172, (char *)v0, v8);
  sub_10001DDD8();
  uint64_t v24 = v171;
  uint64_t v25 = sub_10001D890(v171, (SEL *)&selRef_altIRK);
  if (v26 >> 60 == 15)
  {
    uint64_t v27 = sub_10001DCCC();
LABEL_8:
    uint64_t v28 = v173;
    static RemotePairingError.pairingFailed.getter(v27);
    uint64_t v29 = sub_10001DAE0( (unint64_t *)&unk_1000819E0,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    sub_100016B08(v2, v29);
    sub_10001E030();
    uint64_t v30 = sub_10001DAE0( (unint64_t *)&unk_1000813E0,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    sub_10001DD24(v28, 0xD00000000000001FLL, 0x80000001000674E0LL, v31, v30);
    sub_10001DDE4();
    goto LABEL_9;
  }

  uint64_t v32 = v25;
  unint64_t v185 = v26;
  sub_10001D890(v24, (SEL *)&selRef_publicKey);
  if (v33 >> 60 == 15)
  {
    sub_10001DCCC();
    uint64_t v27 = sub_10001DE80(v32);
    goto LABEL_8;
  }

  sub_10001E030();
  uint64_t v166 = v8;
  uint64_t v34 = sub_10002FC64(v24);
  if (v35)
  {
    *((void *)&v181 + 1) = &type metadata for String;
    *(void *)&__int128 v180 = v34;
    *((void *)&v180 + 1) = v35;
    sub_10001DC14(&v180, &v182);
  }

  else
  {
    id v36 = v19;
    unint64_t v37 = v0;
    sub_10002FC00(v24);
    if (v38)
    {
      uint64_t v39 = v38;
      v179[0] = 1701667182LL;
      v179[1] = 0xE400000000000000LL;
      AnyHashable.init<A>(_:)(v179, &type metadata for String, &protocol witness table for String);
      sub_10003C3FC(v39, &v182);
      sub_10001DBE0((uint64_t)&v180);
      sub_10001DC58();
    }

    else
    {
      __int128 v182 = 0u;
      __int128 v183 = 0u;
    }

    unint64_t v0 = v37;
    uint64_t v19 = v36;
    uint64_t v23 = v172;
  }

  if (!*((void *)&v183 + 1))
  {
    (*(void (**)(char *, uint64_t))(v167 + 8))(v23, v166);
    sub_10001DE80(v32);
    sub_100015D58((uint64_t)v19, v0);
    uint64_t v27 = sub_10001DB68((uint64_t)&v182, &qword_100081598);
    goto LABEL_8;
  }

  sub_10001DC14(&v182, v184);
  sub_10000FD7C(&qword_1000820C0);
  uint64_t v40 = v32;
  sub_100012280();
  __chkstk_darwin(v41, v42);
  sub_10000FFCC();
  unint64_t v43 = v0;
  uint64_t v46 = v45 - v44;
  Date.init()();
  uint64_t v47 = sub_10001DD40();
  sub_10001D930(v46, 0LL, 1LL, v47);
  uint64_t v48 = v171;
  sub_100057610(v46);
  uint64_t v163 = sub_10000FD7C(&qword_100081590);
  uint64_t inited = swift_initStackObject(v163, &v178);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100062960;
  *(void *)(inited + 32) = 0x4B5249746C61LL;
  *(void *)(inited + 40) = 0xE600000000000000LL;
  *(void *)(inited + 48) = v40;
  *(void *)(inited + 56) = v185;
  *(void *)(inited + 72) = &type metadata for Data;
  *(void *)(inited + 80) = 27504LL;
  *(void *)(inited + 120) = &type metadata for Data;
  *(void *)(inited + 88) = 0xE200000000000000LL;
  *(void *)(inited + 96) = v19;
  *(void *)(inited + 104) = v43;
  uint64_t v173 = v40;
  sub_100015D6C(v40, v185);
  v164 = v19;
  unint64_t v165 = v43;
  sub_100015D6C((uint64_t)v19, v43);
  *(void *)&__int128 v182 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  uint64_t v50 = sub_10001D828(v48);
  if (v50)
  {
    uint64_t v51 = v50;
    *((void *)&v181 + 1) = sub_10000FD7C(&qword_1000815B8);
    *(void *)&__int128 v180 = v51;
  }

  else
  {
    __int128 v180 = 0u;
    __int128 v181 = 0u;
  }

  sub_10003C190((uint64_t)&v180, 7103329LL, 0xE300000000000000LL);
  uint64_t v52 = sub_10002FC70(v48);
  uint64_t v54 = v169;
  if (v53)
  {
    *((void *)&v181 + 1) = &type metadata for String;
    *(void *)&__int128 v180 = v52;
    *((void *)&v180 + 1) = v53;
  }

  else
  {
    __int128 v180 = 0u;
    __int128 v181 = 0u;
  }

  sub_10003C190((uint64_t)&v180, 0x6C65646F6DLL, 0xE500000000000000LL);
  sub_10002FC00(v171);
  if (v55)
  {
    uint64_t v56 = v55;
    *((void *)&v181 + 1) = sub_10000FD7C(&qword_1000815B8);
    *(void *)&__int128 v180 = v56;
  }

  else
  {
    __int128 v180 = 0u;
    __int128 v181 = 0u;
  }

  sub_10003C190((uint64_t)&v180, 1868983913LL, 0xE400000000000000LL);
  uint64_t v57 = v182;
  *((void *)&v181 + 1) = sub_10000FD7C(&qword_1000815B0);
  *(void *)&__int128 v180 = v57;
  sub_10001DE00();
  uint64_t v58 = (void *)OPACKEncoderCreateData(from:)(&v180);
  if (v54)
  {
    sub_100015D58((uint64_t)v164, v165);
    sub_10001DE80(v173);
    sub_10001DC58();
    sub_10000FF38(v184);
    sub_10001DCCC();
    sub_10000FF38(&v180);
    goto LABEL_9;
  }

  v171 = v58;
  unint64_t v162 = v59;
  uint64_t v169 = 0LL;
  sub_10000FF38(&v180);
  uint64_t v60 = swift_initStackObject(v163, &v177);
  *(_OWORD *)(v60 + swift_weakDestroy(v0 + 16) = xmmword_100062970;
  CFStringRef v160 = kSecClass;
  *(void *)(v60 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClass);
  *(void *)(v60 + 40) = v61;
  sub_10001DD48();
  uint64_t v161 = v62;
  *(void *)(v60 + 72) = v62;
  *(void *)(v60 + 48) = kSecClassGenericPassword;
  CFStringRef v159 = kSecAttrAccount;
  *(void *)(v60 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccount);
  *(void *)(v60 + 88) = v63;
  v158 = (id)kSecClassGenericPassword;
  uint64_t v64 = sub_10001E03C();
  *(void *)(v60 + 120) = &type metadata for String;
  *(void *)(v60 + 96) = v64;
  *(void *)(v60 + 104) = v65;
  if (kSecUseSystemKeychain)
  {
    uint64_t v150 = kSecUseSystemKeychain;
    *(void *)(v60 + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecUseSystemKeychain);
    *(void *)(v60 + 136) = v66;
    *(void *)(v60 + 168) = &type metadata for Bool;
    *(_BYTE *)(v60 + 144) = 1;
    CFStringRef v153 = kSecAttrService;
    *(void *)(v60 + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrService);
    *(void *)(v60 + 184) = v67;
    *(void *)(v60 + 2swift_weakDestroy(v0 + 16) = &type metadata for String;
    *(void *)(v60 + 192) = 0xD00000000000001ALL;
    *(void *)(v60 + 200) = 0x80000001000673B0LL;
    v179[0] = Dictionary.init(dictionaryLiteral:)( v60,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    CFStringRef v157 = kSecAttrAccessGroup;
    static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessGroup);
    *((void *)&v181 + 1) = &type metadata for String;
    sub_10001DD64();
    uint64_t v155 = v68;
    uint64_t v156 = v69;
    *(void *)&__int128 v180 = v69;
    *((void *)&v180 + 1) = v68;
    sub_10001DC80((uint64_t)&v180, v70, v71, v72);
    CFStringRef v154 = kSecAttrAccessible;
    uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessible);
    uint64_t v75 = v74;
    *((void *)&v181 + 1) = v161;
    *(void *)&__int128 v180 = kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
    v152 = (id)kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
    sub_10003C190((uint64_t)&v180, v73, v75);
    uint64_t v76 = swift_initStackObject(v163, &v176);
    *(_OWORD *)(v76 + swift_weakDestroy(v0 + 16) = xmmword_100062980;
    CFStringRef v149 = kSecAttrDescription;
    *(void *)(v76 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrDescription);
    *(void *)(v76 + 40) = v77;
    *(void *)(v76 + 72) = &type metadata for String;
    *(void *)(v76 + 48) = 0xD00000000000001ALL;
    *(void *)(v76 + 56) = 0x80000001000673B0LL;
    unint64_t v151 = 0x80000001000673B0LL;
    CFStringRef v148 = kSecAttrLabel;
    *(void *)(v76 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrLabel);
    *(void *)(v76 + 88) = v78;
    sub_10001DBA4((uint64_t)v184, v76 + 96);
    *(void *)(v76 + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecValueData);
    *(void *)(v76 + 136) = v79;
    *(void *)(v76 + 168) = &type metadata for Data;
    uint64_t v80 = (uint64_t)v171;
    unint64_t v81 = v162;
    *(void *)(v76 + 144) = v171;
    *(void *)(v76 + 152) = v81;
    sub_1000155D4(v80, v81);
    uint64_t v82 = Dictionary.init(dictionaryLiteral:)( v76,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    swift_bridgeObjectRetain(v179[0]);
    v83.super.Class isa = sub_10001DE88().super.isa;
    sub_10001DD30();
    v84.super.Class isa = sub_10001DE88().super.isa;
    sub_10001DC58();
    SecItemUpdate((CFDictionaryRef)v83.super.isa, (CFDictionaryRef)v84.super.isa);
    sub_10001DE78();

    if ((_DWORD)v82 == -25300)
    {
      uint64_t v91 = swift_allocObject(v163, 368LL, 7LL);
      uint64_t v163 = (uint64_t)kSecValueData;
      uint64_t v92 = v91;
      *(_OWORD *)(v91 + swift_weakDestroy(v0 + 16) = xmmword_100062940;
      *(void *)(v91 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(v160);
      *(void *)(v92 + 40) = v93;
      *(void *)(v92 + 72) = v161;
      uint64_t v95 = (__CFString *)v158;
      CFStringRef v94 = v159;
      *(void *)(v92 + 48) = v158;
      *(void *)(v92 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
      *(void *)(v92 + 88) = v96;
      uint64_t v97 = UUID.uuidString.getter(v95);
      *(void *)(v92 + 120) = &type metadata for String;
      *(void *)(v92 + 96) = v97;
      *(void *)(v92 + 104) = v98;
      sub_10001DD30();
      swift_bridgeObjectRelease(v182);
      *(void *)(v92 + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(v150);
      *(void *)(v92 + 136) = v99;
      *(void *)(v92 + 168) = &type metadata for Bool;
      *(_BYTE *)(v92 + 144) = 1;
      *(void *)(v92 + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(v149);
      *(void *)(v92 + 184) = v100;
      *(void *)(v92 + 2swift_weakDestroy(v0 + 16) = &type metadata for String;
      unint64_t v101 = v151;
      *(void *)(v92 + 192) = 0xD00000000000001ALL;
      *(void *)(v92 + 200) = v101;
      *(void *)(v92 + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(v148);
      *(void *)(v92 + 232) = v102;
      sub_10001DBA4((uint64_t)v184, v92 + 240);
      *(void *)(v92 + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)(v153);
      *(void *)(v92 + 280) = v103;
      *(void *)(v92 + 312) = &type metadata for String;
      *(void *)(v92 + 288) = 0xD00000000000001ALL;
      *(void *)(v92 + 296) = v101;
      *(void *)(v92 + 320) = static String._unconditionallyBridgeFromObjectiveC(_:)(v163);
      *(void *)(v92 + 328) = v104;
      *(void *)(v92 + 360) = &type metadata for Data;
      uint64_t v105 = (uint64_t)v171;
      unint64_t v106 = v162;
      *(void *)(v92 + 336) = v171;
      *(void *)(v92 + 344) = v106;
      sub_1000155D4(v105, v106);
      uint64_t v175 = Dictionary.init(dictionaryLiteral:)( v92,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
      uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(v157);
      *((void *)&v181 + 1) = &type metadata for String;
      *(void *)&__int128 v180 = v156;
      *((void *)&v180 + 1) = v155;
      sub_10001DC80((uint64_t)&v180, v108, v107, v108);
      uint64_t v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v154);
      uint64_t v111 = v110;
      *((void *)&v181 + 1) = v161;
      *(void *)&__int128 v180 = v152;
      v112 = v152;
      sub_10003C190((uint64_t)&v180, v109, v111);
      uint64_t v113 = v175;
      v114.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      sub_10001DC58();
      sub_10001DF98();
      sub_10001DE78();
      if (!(_DWORD)v113)
      {
        unint64_t v141 = v168;
        sub_10000FF98(v168 + 16, (uint64_t)&v180);
        uint64_t v142 = *(void *)(v141 + 16);
        uint64_t v143 = *(void *)(v142 + 16);
        uint64_t v144 = v166;
        if (v143)
        {
          swift_bridgeObjectRetain(v142);
          uint64_t v145 = v142 + 40;
          v146 = v172;
          do
          {
            v147 = *(void (**)(char *))(v145 - 8);
            char v174 = 0;
            sub_10000FFDC();
            v147(&v174);
            sub_100012464();
            v145 += 16LL;
            --v143;
          }

          while (v143);
        }

        else
        {
          swift_bridgeObjectRetain(v142);
          v146 = v172;
        }

        sub_10001E0E8();
        sub_100015D58((uint64_t)v164, v165);
        sub_100015D58(v173, v185);
        sub_100016D6C();
        sub_10000FF38(v184);
        (*(void (**)(char *, uint64_t))(v167 + 8))(v146, v144);
        goto LABEL_9;
      }

      static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
      sub_10001DD84();
      id v115 = objc_allocWithZone(&OBJC_CLASS___NSError);
      sub_10001DC68((uint64_t)v114.super.isa, v109, v113);
      v117 = v116;
      LODWORD(v169) = static os_log_type_t.error.getter(v116);
      uint64_t v118 = qword_1000845F0;
      uint64_t v119 = sub_10000FD7C(&qword_100081580);
      uint64_t v120 = sub_10001DC98(v119);
      *(_OWORD *)(v120 + swift_weakDestroy(v0 + 16) = xmmword_100062930;
      id v121 = v117;
      id v122 = [v121 description];
      uint64_t v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(v122);
      unint64_t v124 = v106;
      uint64_t v126 = v125;

      *(void *)(v120 + 56) = &type metadata for String;
      *(void *)(v120 + 64) = sub_10001D978();
      *(void *)(v120 + 32) = v123;
      *(void *)(v120 + 40) = v126;
      sub_10001E0F4( v169,  (uint64_t)&_mh_execute_header,  v118,  (uint64_t)"Failed to save new pairing record to system keychain: %{public}@",  64LL);
      sub_10001DDA4();
      sub_10001DDE4();
      uint64_t v127 = (uint64_t)v171;
      unint64_t v128 = v124;
    }

    else
    {
      if (!(_DWORD)v82)
      {
        uint64_t v85 = v166;
        sub_10001DD30();
        sub_10001E010();
        unint64_t v86 = v168;
        sub_10000FF98(v168 + 16, (uint64_t)&v180);
        uint64_t v87 = *(void *)(v86 + 16);
        uint64_t v88 = *(void *)(v87 + 16);
        if (v88)
        {
          sub_10001E04C();
          uint64_t v89 = v87 + 40;
          do
          {
            uint64_t v90 = *(void (**)(uint64_t *))(v89 - 8);
            LOBYTE(v175) = 2;
            sub_10000FFDC();
            v90(&v175);
            sub_100012464();
            v89 += 16LL;
            --v88;
          }

          while (v88);
        }

        else
        {
          sub_10001E04C();
        }

        sub_10001E0E8();
        sub_100015D58((uint64_t)v164, v165);
        sub_100015D58(v173, v185);
        sub_100016D6C();
        sub_10000FF38(v184);
        (*(void (**)(char *, uint64_t))(v167 + 8))(v172, v85);
        goto LABEL_9;
      }

      sub_10001DD30();
      sub_10001E010();
      static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
      sub_10001DD84();
      id v129 = objc_allocWithZone(&OBJC_CLASS___NSError);
      sub_10001DC68((uint64_t)v83.super.isa, (uint64_t)v84.super.isa, v82);
      v131 = v130;
      uint64_t v132 = static os_log_type_t.error.getter(v130);
      uint64_t v133 = qword_1000845F0;
      uint64_t v134 = sub_10000FD7C(&qword_100081580);
      uint64_t v135 = sub_10001DC98(v134);
      *(_OWORD *)(v135 + swift_weakDestroy(v0 + 16) = xmmword_100062930;
      id v136 = v131;
      id v137 = [v136 description];
      uint64_t v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(v137);
      uint64_t v140 = v139;

      *(void *)(v135 + 56) = &type metadata for String;
      *(void *)(v135 + 64) = sub_10001D978();
      *(void *)(v135 + 32) = v138;
      *(void *)(v135 + 40) = v140;
      sub_10001E0F4( v132,  (uint64_t)&_mh_execute_header,  v133,  (uint64_t)"Failed to update pairing record to system keychain: %{public}@",  62LL);
      sub_10001DDA4();
      sub_10001DDE4();
      uint64_t v127 = (uint64_t)v171;
      unint64_t v128 = v162;
    }

    sub_100015644(v127, v128);
    sub_100015D58((uint64_t)v164, v165);
    sub_10001DE80(v173);
    sub_10000FF38(v184);
    (*(void (**)(char *, uint64_t))(v167 + 8))(v172, v166);
LABEL_9:
    sub_100012268();
    return;
  }

  __break(1u);
}

void sub_10001A47C()
{
  uint64_t v4 = sub_100016E1C();
  sub_100012280();
  __chkstk_darwin(v5, v6);
  sub_10001DF18();
  uint64_t v7 = sub_10001CBF0();
  if (v1) {
    goto LABEL_24;
  }
  uint64_t v93 = v0;
  uint64_t v94 = v2;
  uint64_t v95 = v4;
  unint64_t v97 = (unint64_t)&_swiftEmptyArrayStorage;
  uint64_t v8 = static os_log_type_t.info.getter(v7);
  os_log(_:dso:log:_:_:)( v8,  &_mh_execute_header,  qword_1000845F0,  "Fetching all paired peers from keychain",  39LL,  2LL,  &_swiftEmptyArrayStorage);
  uint64_t v9 = sub_10000FD7C(&qword_100081590);
  uint64_t inited = swift_initStackObject(v9, &v102);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100062950;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClass);
  *(void *)(inited + 40) = v11;
  sub_10001DD48();
  uint64_t v13 = v12;
  *(void *)(inited + 72) = v12;
  *(void *)(inited + 48) = kSecClassGenericPassword;
  if (kSecUseSystemKeychain)
  {
    *(void *)(inited + 80) = sub_10001E180();
    *(void *)(inited + 88) = v14;
    *(void *)(inited + 120) = &type metadata for Bool;
    *(_BYTE *)(inited + 96) = 1;
    *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrService);
    *(void *)(inited + 136) = v15;
    *(void *)(inited + 168) = &type metadata for String;
    *(void *)(inited + 144) = v3 + 3;
    *(void *)(inited + 152) = 0x80000001000673B0LL;
    *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecReturnAttributes);
    *(void *)(inited + 184) = v16;
    *(void *)(inited + 2swift_weakDestroy(v0 + 16) = &type metadata for Bool;
    *(_BYTE *)(inited + 192) = 1;
    *(void *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecMatchLimit);
    *(void *)(inited + 232) = v17;
    *(void *)(inited + 264) = v13;
    *(void *)(inited + 240) = kSecMatchLimitAll;
    uint64_t v18 = (id)kSecClassGenericPassword;
    uint64_t v19 = (id)kSecMatchLimitAll;
    uint64_t v20 = sub_10001E0B0();
    v96[2] = Dictionary.init(dictionaryLiteral:)(v20, v21, v22, v23);
    static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessGroup);
    sub_10001DDEC();
    v101[3] = &type metadata for String;
    sub_10001DD64();
    v101[0] = 0xD000000000000017LL;
    v101[1] = v24;
    sub_10001DC80((uint64_t)v101, v25, v26, v27);
    CFTypeRef v100 = 0LL;
    sub_10001E0B0();
    v28.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    sub_10001DC58();
    uint64_t v29 = SecItemCopyMatching((CFDictionaryRef)v28.super.isa, &v100);

    CFTypeRef v30 = v100;
    if ((_DWORD)v29)
    {
      sub_10001DD5C();
      if ((_DWORD)v29 == -25300)
      {
LABEL_5:
        swift_unknownObjectRelease(v30);
LABEL_24:
        sub_100012268();
        return;
      }

      static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
      sub_10001DD84();
      id v63 = objc_allocWithZone(&OBJC_CLASS___NSError);
      sub_10001DC68(0LL, (uint64_t)v28.super.isa, v29);
      sub_10001DF30();
      CFTypeRef v64 = v30;
    }

    else
    {
      if (v100
        && (v101[0] = v100,
            swift_unknownObjectRetain(v100),
            uint64_t v31 = sub_10000FD7C(&qword_1000815C0),
            uint64_t v32 = sub_10001DC60((uint64_t)&v98, (uint64_t)v101, (uint64_t)&type metadata for Swift.AnyObject + 8, v31),
            (v32 & 1) != 0))
      {
        uint64_t v33 = v98;
        os_log_type_t v34 = static os_log_type_t.debug.getter(v32);
        uint64_t v35 = (os_log_s *)qword_1000845F0;
        os_log_type_t v36 = v34;
        if (os_log_type_enabled((os_log_t)qword_1000845F0, v34))
        {
          sub_10001E04C();
          unint64_t v37 = (uint8_t *)sub_1000122E0(12LL);
          *(_DWORD *)unint64_t v37 = 134217984;
          v101[0] = *(void *)(v33 + 16);
          sub_10001DF38((uint64_t)v37, v38, (uint64_t)(v37 + 4), (uint64_t)(v37 + 12));
          sub_100016D6C();
          sub_100016D10((void *)&_mh_execute_header, v35, v36, "Successfully fetched %ld peer items from keychain", v37);
          sub_10001001C((uint64_t)v37);
        }

        uint64_t v39 = *(void *)(v33 + 16);
        if (!v39)
        {
          uint64_t v78 = v33;
LABEL_31:
          uint64_t v79 = swift_bridgeObjectRelease(v78);
          os_log_type_t v80 = static os_log_type_t.debug.getter(v79);
          unint64_t v81 = (os_log_s *)qword_1000845F0;
          unint64_t v82 = v97;
          if (os_log_type_enabled((os_log_t)qword_1000845F0, v80))
          {
            sub_10001DFD4(v82);
            NSDictionary v83 = (uint8_t *)sub_1000122E0(12LL);
            *(_DWORD *)NSDictionary v83 = 134217984;
            if (v82 >> 62)
            {
              sub_10001DEF8();
              uint64_t v84 = sub_10001E13C();
              sub_10001DD38();
            }

            else
            {
              uint64_t v84 = *(void *)((v82 & 0xFFFFFFFFFFFFF8LL) + 0x10);
            }

            uint64_t v85 = sub_10001DD38();
            v101[0] = v84;
            sub_10001DF38(v85, v86, (uint64_t)(v83 + 4), (uint64_t)(v83 + 12));
            sub_10001DD38();
            sub_100016D10( (void *)&_mh_execute_header,  v81,  v80,  "Successfully parsed %ld peer items from keychain",  v83);
            sub_10001001C((uint64_t)v83);
          }

          sub_10000FF98((uint64_t)&v97, (uint64_t)v101);
          CFTypeRef v30 = v100;
          goto LABEL_5;
        }

        uint64_t v40 = v33 + 32;
        uint64_t v88 = v33;
        uint64_t v89 = (uint64_t)&type metadata for Any + 8;
        uint64_t v41 = v95;
        while (1)
        {
          sub_10001DBA4(v40, (uint64_t)v101);
          sub_10001DBA4((uint64_t)v101, (uint64_t)&v98);
          uint64_t v42 = sub_10000FD7C(&qword_1000815B0);
          if ((sub_10001DC60((uint64_t)v96, (uint64_t)&v98, v89, v42) & 1) == 0)
          {
            sub_10001DCC4();
            uint64_t v71 = sub_10001DD5C();
            uint64_t v46 = v94;
            goto LABEL_30;
          }

          uint64_t v43 = v96[0];
          uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccount);
          sub_10001DE70(v44, v45, &v98);
          sub_10001DDB4();
          sub_10001DC58();
          uint64_t v46 = v94;
          if (!v99)
          {
            sub_10001DB68((uint64_t)&v98, &qword_100081598);
LABEL_28:
            sub_10001DCC4();
            uint64_t v71 = sub_10001DD5C();
            goto LABEL_30;
          }

          if ((sub_10001DC60( (uint64_t)v96,  (uint64_t)&v98,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String) & 1) == 0) {
            goto LABEL_28;
          }
          uint64_t v90 = v40;
          uint64_t v91 = v39;
          uint64_t v47 = v96[0];
          uint64_t v48 = v96[1];
          uint64_t v49 = sub_10001DCE0();
          uint64_t v92 = &v87;
          uint64_t v50 = *(void *)(v49 - 8);
          __chkstk_darwin(v49, v51);
          sub_10000FFCC();
          uint64_t v54 = v53 - v52;
          sub_10000FD7C((uint64_t *)&unk_1000835C0);
          sub_100012280();
          __chkstk_darwin(v55, v56);
          sub_10001DE34();
          UUID.init(uuidString:)(v47, v48);
          sub_10001DD38();
          sub_10001DDBC(v43, 1LL, v49);
          if (v57) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v54, v43, v49);
          sub_10001AC84();
          id v59 = v58;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          unint64_t v61 = *(void *)((v97 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v60 = *(void *)((v97 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v61 >= v60 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v60 > 1, v61 + 1, 1LL);
          }
          uint64_t v62 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v61, v59);
          specialized Array._endMutation()(v62);

          sub_10001DED8();
          sub_10001E178();
          uint64_t v40 = v90 + 32;
          uint64_t v39 = v91 - 1;
          uint64_t v41 = v95;
          if (v91 == 1)
          {
            uint64_t v78 = v88;
            goto LABEL_31;
          }
        }

        sub_10001DCC4();
        uint64_t v72 = sub_10001DD5C();
        uint64_t v71 = sub_10001DD0C(v72, (uint64_t *)&unk_1000835C0);
        uint64_t v46 = v94;
        uint64_t v41 = v95;
LABEL_30:
        static RemotePairingError.pairingFailed.getter(v71);
        *(void *)&__int128 v98 = 0LL;
        *((void *)&v98 + 1) = 0xE000000000000000LL;
        _StringGuts.grow(_:)(34LL);
        v73._countAndFlagsBits = 0xD000000000000020LL;
        v73._object = (void *)0x80000001000674B0LL;
        String.append(_:)(v73);
        _print_unlocked<A, B>(_:_:)( v101,  &v98,  (char *)&type metadata for Any + 8,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
        __int128 v74 = v98;
        uint64_t v75 = sub_10001DAE0( (unint64_t *)&unk_1000819E0,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
        sub_100016B08(v41, v75);
        uint64_t v76 = sub_10001DAE0( (unint64_t *)&unk_1000813E0,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
        sub_10001DD24(v46, v74, *((uint64_t *)&v74 + 1), v77, v76);
        sub_10001DF90();
        sub_10001E178();
      }

      else
      {
        uint64_t v65 = sub_10001DD5C();
        static RemotePairingError.pairingFailed.getter(v65);
        uint64_t v66 = sub_10001DAE0( (unint64_t *)&unk_1000819E0,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
        sub_100016B08(v95, v66);
        sub_10001DAE0( (unint64_t *)&unk_1000813E0,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
        uint64_t v67 = sub_10001E01C();
        Error<>.init(_:_:)(v67, v68, v69, v95, v70);
        sub_10001DF90();
      }

      CFTypeRef v64 = v100;
    }

    swift_unknownObjectRelease(v64);
    goto LABEL_24;
  }

  __break(1u);
}

void sub_10001AC84()
{
  unint64_t v113 = v0;
  uint64_t v1 = sub_100016E1C();
  sub_100012280();
  __chkstk_darwin(v2, v3);
  sub_10001E144();
  unint64_t v114 = v4;
  uint64_t v6 = static os_log_type_t.debug.getter(v5);
  uint64_t v7 = qword_1000845F0;
  uint64_t v8 = sub_10000FD7C(&qword_100081580);
  uint64_t v9 = sub_10001DC98(v8);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_100062930;
  uint64_t v10 = sub_10001E03C();
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_10001D978();
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v12;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "Fetching paired peer with identifier %{public}@", 47LL, 2LL, v9);
  sub_10001DCE8();
  uint64_t v13 = sub_10000FD7C(&qword_100081590);
  uint64_t inited = swift_initStackObject(v13, &v121);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100062990;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClass);
  *(void *)(inited + 40) = v15;
  sub_10001DD48();
  *(void *)(inited + 72) = v16;
  *(void *)(inited + 48) = kSecClassGenericPassword;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccount);
  *(void *)(inited + 88) = v17;
  uint64_t v18 = (id)kSecClassGenericPassword;
  uint64_t v19 = sub_10001E03C();
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = v19;
  *(void *)(inited + 104) = v20;
  if (!kSecUseSystemKeychain) {
    __break(1u);
  }
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecUseSystemKeychain);
  *(void *)(inited + 136) = v21;
  *(void *)(inited + 168) = &type metadata for Bool;
  *(_BYTE *)(inited + 144) = 1;
  *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrService);
  *(void *)(inited + 184) = v22;
  *(void *)(inited + 2swift_weakDestroy(v0 + 16) = &type metadata for String;
  *(void *)(inited + 192) = 0xD00000000000001ALL;
  *(void *)(inited + 200) = 0x80000001000673B0LL;
  *(void *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecReturnData);
  *(void *)(inited + 232) = v23;
  *(void *)(inited + 264) = &type metadata for Bool;
  *(_BYTE *)(inited + 240) = 1;
  *(void *)(inited + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecReturnAttributes);
  *(void *)(inited + 280) = v24;
  *(void *)(inited + 312) = &type metadata for Bool;
  *(_BYTE *)(inited + 288) = 1;
  uint64_t v115 = sub_10001DFE4(inited, (uint64_t)&type metadata for String);
  static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessGroup);
  sub_10001DDEC();
  uint64_t v120 = &type metadata for String;
  sub_10001DD64();
  *(void *)&__int128 v119 = 0xD000000000000017LL;
  *((void *)&v119 + 1) = v25;
  sub_10001DC80((uint64_t)&v119, v26, v27, v28);
  CFTypeRef v118 = 0LL;
  uint64_t v29 = v115;
  sub_10001DEF8();
  Class isa = (const __CFDictionary *)sub_10001DFF0().super.isa;
  sub_10001DD38();
  SecItemCopyMatching(isa, &v118);
  sub_10001DE78();
  CFTypeRef v31 = v118;
  if (&v115)
  {
    sub_10001DD38();
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
    uint64_t v34 = v33;
    id v35 = objc_allocWithZone(&OBJC_CLASS___NSError);
    sub_10001DC68(v32, v34, (int)&v115);
    sub_10001DF30();
LABEL_17:
    swift_unknownObjectRelease(v31);
LABEL_18:
    sub_100012268();
    return;
  }

  if (!v118
    || (*(void *)&__int128 v119 = v118,
        swift_unknownObjectRetain(v118),
        uint64_t v36 = sub_10000FD7C(&qword_1000815B0),
        (sub_10001DC60((uint64_t)&v116, (uint64_t)&v119, (uint64_t)&type metadata for Swift.AnyObject + 8, v36) & 1) == 0))
  {
    uint64_t v41 = v29;
LABEL_11:
    uint64_t v42 = swift_bridgeObjectRelease(v41);
LABEL_15:
    static RemotePairingError.pairingFailed.getter(v42);
    uint64_t v44 = sub_10001DAE0( (unint64_t *)&unk_1000819E0,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    sub_100016B08(v1, v44);
    sub_10001DAE0((unint64_t *)&unk_1000813E0, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    uint64_t v45 = sub_10001E01C();
    sub_10001DD24(v45, v46, v47, v48, v49);
    sub_10001DF90();
    goto LABEL_16;
  }

  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecValueData);
  sub_10001DCB0(v37, v38);
  sub_10001DCE8();
  if (!v120)
  {
    uint64_t v43 = sub_100016D6C();
    sub_10001DCBC(v43, &qword_100081598);
LABEL_14:
    uint64_t v42 = swift_bridgeObjectRelease(v115);
    goto LABEL_15;
  }

  if ((sub_10001DC60( (uint64_t)&v116,  (uint64_t)&v119,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Data) & 1) == 0)
  {
    sub_100016D6C();
    goto LABEL_14;
  }

  uint64_t v40 = v116;
  unint64_t v39 = v117;
  OPACKDecode(data:)(&v119, v116, v117);
  if (v113)
  {
    swift_bridgeObjectRelease(v115);
    sub_10001DCA4();
    sub_100016D6C();
LABEL_16:
    CFTypeRef v31 = v118;
    goto LABEL_17;
  }

  if ((sub_10001DC60((uint64_t)&v116, (uint64_t)&v119, (uint64_t)&type metadata for Any + 8, v36) & 1) == 0)
  {
    sub_100016D6C();
    uint64_t v63 = v40;
    unint64_t v64 = v39;
LABEL_34:
    sub_100015644(v63, v64);
LABEL_39:
    uint64_t v41 = v115;
    goto LABEL_11;
  }

  uint64_t v50 = v116;
  sub_10001DE70(27504LL, 0xE200000000000000LL, &v119);
  if (!v120)
  {
    sub_100016D6C();
    sub_10001DCA4();
    uint64_t v65 = sub_10001DC58();
LABEL_38:
    sub_10001DCBC(v65, &qword_100081598);
    goto LABEL_39;
  }

  if ((sub_10001DC60( (uint64_t)&v116,  (uint64_t)&v119,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Data) & 1) == 0)
  {
    sub_100016D6C();
    sub_10001DCA4();
    sub_10001DC58();
    goto LABEL_39;
  }

  uint64_t v112 = v116;
  unint64_t v113 = v117;
  uint64_t v51 = sub_10001E068();
  sub_10001DE70(v51, v52, v53);
  if (!v120)
  {
    sub_100016D6C();
    sub_10001DCA4();
    sub_10001DC58();
    uint64_t v65 = sub_100015644(v112, v113);
    goto LABEL_38;
  }

  uint64_t v111 = v50;
  if ((sub_10001DC60( (uint64_t)&v116,  (uint64_t)&v119,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Data) & 1) == 0)
  {
    sub_100016D6C();
    sub_10001DCA4();
    swift_bridgeObjectRelease(v111);
    uint64_t v63 = v112;
    unint64_t v64 = v113;
    goto LABEL_34;
  }

  uint64_t v54 = v116;
  unint64_t v114 = v117;
  uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessible);
  sub_10001DCB0(v55, v56);
  uint64_t v57 = sub_10001DC58();
  if (!v120)
  {
    sub_10001DCBC(v57, &qword_100081598);
    goto LABEL_42;
  }

  if ((sub_10001DC60( (uint64_t)&v116,  (uint64_t)&v119,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String) & 1) == 0)
  {
LABEL_42:
    swift_bridgeObjectRelease(v115);
    goto LABEL_43;
  }

  if (kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate)
  {
    uint64_t v59 = v116;
    uint64_t v58 = v117;
    uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate);
    if (v59 == v61 && v58 == v60)
    {
      sub_10001DDF8(v58);
LABEL_72:
      sub_10001CC70(v115);
      sub_10001DC58();
LABEL_43:
      id v66 = [objc_allocWithZone(CUPairedPeer) init];
      Class v67 = UUID._bridgeToObjectiveC()().super.isa;
      sub_10001DC74((uint64_t)v67, "setIdentifier:");

      sub_10001D7A0(v112, v113, v66);
      uint64_t v109 = v54;
      sub_10001D7E4(v54, v114, v66);
      sub_10000FD7C(&qword_1000820C0);
      sub_10001DF70();
      __chkstk_darwin(v68, v69);
      v108[1] = v70;
      uint64_t v110 = (uint64_t)v108 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrModificationDate);
      sub_10001DCB0(v71, v72);
      uint64_t v73 = sub_10001DC58();
      if (v120)
      {
        uint64_t v74 = sub_10001DD40();
        uint64_t v75 = v110;
        int v76 = sub_10001DC60(v110, (uint64_t)&v119, (uint64_t)&type metadata for Any + 8, v74);
        sub_10001D930(v75, v76 ^ 1u, 1LL, v74);
        uint64_t v77 = sub_10001DEC8();
        Class v78 = 0LL;
        if ((_DWORD)v77 != 1)
        {
          v108[0] = v108;
          uint64_t v79 = v110;
          Class v78 = Date._bridgeToObjectiveC()().super.isa;
          uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v74 - 8) + 8LL))(v79, v74);
        }
      }

      else
      {
        sub_10001DCBC(v73, &qword_100081598);
        uint64_t v80 = sub_10001DD40();
        uint64_t v77 = sub_10001D930(v110, 1LL, 1LL, v80);
        Class v78 = 0LL;
      }

      sub_10001DC74(v77, "setDateModified:");

      uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrLabel);
      NSDictionary v83 = (void *)v82;
      sub_10001DCB0(v81, v82);
      uint64_t v84 = sub_10001DC58();
      if (v120)
      {
        uint64_t v85 = sub_10001DC60( (uint64_t)&v116,  (uint64_t)&v119,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String);
        if ((v85 & 1) != 0)
        {
          sub_10001DFC0();
          uint64_t v85 = sub_10001DD50();
          goto LABEL_52;
        }
      }

      else
      {
        uint64_t v85 = sub_10001DCBC(v84, &qword_100081598);
      }

      NSDictionary v83 = 0LL;
LABEL_52:
      sub_10001DC74(v85, "setName:");

      sub_10003C3B4(7103329LL, 0xE300000000000000LL, v111, &v119);
      if (v120)
      {
        uint64_t v87 = sub_10000FD7C(&qword_1000815B8);
        uint64_t v88 = (char *)&type metadata for Any + 8;
        uint64_t v89 = sub_10001DC60((uint64_t)&v116, (uint64_t)&v119, (uint64_t)&type metadata for Any + 8, v87);
        if ((v89 & 1) != 0)
        {
          sub_10001DFA4();
          uint64_t v89 = sub_10001DD50();
          goto LABEL_57;
        }
      }

      else
      {
        uint64_t v89 = sub_10001DCBC(v86, &qword_100081598);
      }

      uint64_t v88 = 0LL;
LABEL_57:
      sub_10001DC74(v89, "setAcl:");

      sub_10003C3B4(0x6C65646F6DLL, 0xE500000000000000LL, v111, &v119);
      if (v120)
      {
        uint64_t v91 = sub_10001DC60( (uint64_t)&v116,  (uint64_t)&v119,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String);
        if ((v91 & 1) != 0)
        {
          sub_10001DFC0();
          uint64_t v91 = sub_10001DD50();
          goto LABEL_62;
        }
      }

      else
      {
        uint64_t v91 = sub_10001DCBC(v90, &qword_100081598);
      }

      uint64_t v88 = 0LL;
LABEL_62:
      sub_10001DC74(v91, "setModel:");

      sub_10001DE70(1868983913LL, 0xE400000000000000LL, &v119);
      uint64_t v92 = sub_10001DC58();
      if (v120)
      {
        uint64_t v93 = sub_10000FD7C(&qword_1000815B8);
        uint64_t v94 = (char *)&type metadata for Any + 8;
        uint64_t v95 = sub_10001DC60((uint64_t)&v116, (uint64_t)&v119, (uint64_t)&type metadata for Any + 8, v93);
        if ((v95 & 1) != 0)
        {
          sub_10001DFA4();
          uint64_t v95 = sub_10001DD50();
LABEL_67:
          sub_10001DC74(v95, "setInfo:");

          __chkstk_darwin(v96, v97);
          sub_10001DEA8();
          uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrCreationDate);
          uint64_t v100 = v99;
          sub_10001DCB0(v98, v99);
          swift_bridgeObjectRelease(v100);
          uint64_t v101 = sub_100016D6C();
          if (v120)
          {
            uint64_t v102 = sub_10001DD40();
            uint64_t v103 = sub_10001DC60((uint64_t)v94, (uint64_t)&v119, (uint64_t)&type metadata for Any + 8, v102) ^ 1;
            uint64_t v104 = (uint64_t)v94;
            uint64_t v105 = 1LL;
            uint64_t v106 = v102;
          }

          else
          {
            sub_10001DCBC(v101, &qword_100081598);
            sub_10001DD40();
            uint64_t v104 = sub_10001DD94();
          }

          sub_10001D930(v104, v103, v105, v106);
          uint64_t v107 = v112;
          CUPairedPeer.initialPairingTime.setter(v94);
          sub_10001DCA4();
          sub_100015644(v107, v113);
          sub_100015644(v109, v114);
          swift_unknownObjectRelease(v118);
          goto LABEL_18;
        }
      }

      else
      {
        uint64_t v95 = sub_10001DCBC(v92, &qword_100081598);
      }

      uint64_t v94 = 0LL;
      goto LABEL_67;
    }

    LODWORD(v110) = sub_10001E0D0(v59, v58, v61);
    sub_10001DDA4();
    sub_10001DC58();
    if ((v110 & 1) != 0) {
      goto LABEL_72;
    }
    goto LABEL_42;
  }

  __break(1u);
}

uint64_t sub_10001B744(uint64_t a1, uint64_t a2)
{
  if (!v2)
  {
    sub_100017FE4();
    uint64_t v6 = v5;
    a2 = CUPairingIdentity.authTag(for:type:)(a1, a2, 1LL);
  }

  return a2;
}

void sub_10001B7C0( uint64_t a1, unint64_t a2, void (*a3)(uint64_t, unint64_t, void), uint64_t a4)
{
}

uint64_t sub_10001B814( void *a1, char a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, unint64_t, uint64_t))
{
  uint64_t v6 = (uint64_t)a1;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    unint64_t v12 = 0LL;
    uint64_t v13 = 1LL;
  }

  else
  {
    id v9 = a1;
    uint64_t v10 = CUPairingIdentity.authTag(for:type:)(a3, a4, 1LL);
    unint64_t v12 = v11;
    sub_10001E16C();
    uint64_t v13 = 0LL;
    uint64_t v6 = v10;
  }

  a5(v6, v12, v13);
  return sub_100016A64(v6, v12, v13);
}

void sub_10001B8E4()
{
  if (!v0)
  {
    if (v1 >> 62)
    {
      sub_10001DE00();
      sub_10001E13C();
      sub_10001DC58();
    }

    sub_10001DC58();
  }

  sub_10001E18C();
}

uint64_t sub_10001B948(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100016BCC((uint64_t)&unk_100076E90, 32LL);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  swift_beginAccess(v2 + 16, v10, 33LL, 0LL);
  swift_retain(a2);
  sub_100043FD0();
  uint64_t v6 = *(void *)(*(void *)(v2 + 16) + 16LL);
  sub_100044108();
  uint64_t v7 = *(void *)(v2 + 16);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v6 + 1;
  uint64_t v8 = v7 + 16 * v6;
  *(void *)(v8 + 32) = sub_10001DB44;
  *(void *)(v8 + 40) = v5;
  return swift_endAccess(v10);
}

void sub_10001B9F4()
{
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v6 = sub_100016E1C();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  sub_10001DF00();
  sub_10001CBF0();
  if (v1) {
    goto LABEL_16;
  }
  uint64_t v51 = v2;
  uint64_t v50 = v7;
  uint64_t v9 = sub_10001DCE0();
  int v49 = sub_10001E07C(v5);
  uint64_t v10 = sub_10000FD7C(&qword_100081590);
  uint64_t inited = swift_initStackObject(v10, &v55);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100062980;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClass);
  *(void *)(inited + 40) = v12;
  sub_10001DD48();
  *(void *)(inited + 72) = v13;
  *(void *)(inited + 48) = kSecClassGenericPassword;
  if (kSecUseSystemKeychain)
  {
    *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecUseSystemKeychain);
    *(void *)(inited + 88) = v14;
    *(void *)(inited + 120) = &type metadata for Bool;
    *(_BYTE *)(inited + 96) = 1;
    *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrService);
    *(void *)(inited + 136) = v15;
    *(void *)(inited + 168) = &type metadata for String;
    *(void *)(inited + 144) = 0xD00000000000001ALL;
    *(void *)(inited + 152) = 0x80000001000673B0LL;
    uint64_t v16 = (id)kSecClassGenericPassword;
    uint64_t v56 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccount);
    uint64_t v19 = v18;
    sub_10000FD7C((uint64_t *)&unk_1000835C0);
    sub_100012280();
    __chkstk_darwin(v20, v21);
    sub_100016C70();
    sub_10001DA98(v5, 0xD000000000000017LL);
    uint64_t v22 = sub_10001DDBC(0xD000000000000017LL, 1LL, v9);
    if (v23)
    {
      sub_10001DD0C(v22, (uint64_t *)&unk_1000835C0);
      __int128 v54 = 0u;
      __int128 v53 = 0u;
    }

    else
    {
      *((void *)&v54 + 1) = &type metadata for String;
      *(void *)&__int128 v53 = UUID.uuidString.getter(v22);
      *((void *)&v53 + 1) = v24;
      sub_10001E0A8(0xD000000000000017LL, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL));
    }

    sub_10003C190((uint64_t)&v53, v17, v19);
    static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessGroup);
    sub_10001DDEC();
    *((void *)&v54 + 1) = &type metadata for String;
    sub_10001DD64();
    *(void *)&__int128 v53 = 0xD000000000000017LL;
    *((void *)&v53 + 1) = v25;
    sub_10001DC80((uint64_t)&v53, v26, v27, v28);
    uint64_t v29 = v56;
    Class isa = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v29);
    OSStatus v31 = SecItemDelete(isa);

    if (!v31) {
      goto LABEL_9;
    }
    if (v31 == -25300)
    {
      if (v49 == 1)
      {
LABEL_9:
        sub_10000FF98(v3 + 16, (uint64_t)&v53);
        uint64_t v32 = *(void *)(v3 + 16);
        uint64_t v33 = *(void *)(v32 + 16);
        if (v33)
        {
          swift_bridgeObjectRetain(*(void *)(v3 + 16));
          uint64_t v34 = v32 + 40;
          do
          {
            id v35 = *(void (**)(char *))(v34 - 8);
            char v52 = 1;
            sub_10000FFDC();
            v35(&v52);
            sub_100012464();
            v34 += 16LL;
            --v33;
          }

          while (v33);
          swift_bridgeObjectRelease(v32);
        }

        goto LABEL_16;
      }

      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
      uint64_t v44 = v43;
      id v45 = objc_allocWithZone(&OBJC_CLASS___NSError);
      sub_10001DC68(v42, v44, -25300LL);
      uint64_t v41 = v46;
      static RemotePairingError.pairingRecordNotFound.getter();
    }

    else
    {
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
      uint64_t v38 = v37;
      id v39 = objc_allocWithZone(&OBJC_CLASS___NSError);
      sub_10001DC68(v36, v38, v31);
      uint64_t v41 = v40;
      static RemotePairingError.pairingRecordRemovalFailed.getter();
    }

    uint64_t v47 = sub_10001DAE0( (unint64_t *)&unk_1000819E0,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    sub_100016B08(v6, v47);
    sub_10001E030();
    sub_10001DAE0((unint64_t *)&unk_1000813E0, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    id v48 = v41;
    _Error.wrapping(_:)(v41);

    sub_10001DDAC(v51, *(uint64_t (**)(uint64_t, uint64_t))(v50 + 8));
    sub_10001DDE4();

LABEL_16:
    sub_100012268();
    return;
  }

  __break(1u);
}

void sub_10001BE5C()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_10001CBF0();
  uint64_t v4 = v1;
  if (v1) {
    return;
  }
  uint64_t v5 = static os_log_type_t.default.getter(v3);
  sub_100012380(v5, (uint64_t)&_mh_execute_header, qword_1000845F0, (uint64_t)"Removing expired pairing records", 32LL);
  sub_10001A47C();
  unint64_t v8 = v6;
  if (!(v6 >> 62))
  {
    uint64_t v9 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v9) {
      goto LABEL_4;
    }
LABEL_38:
    sub_10001DDB4();
    return;
  }

LABEL_43:
  swift_bridgeObjectRetain(v8);
  uint64_t v9 = sub_10001E13C();
  sub_10001DDB4();
  if (!v9) {
    goto LABEL_38;
  }
LABEL_4:
  unint64_t v138 = v8 & 0xC000000000000001LL;
  v130 = &v153;
  uint64_t v10 = 4LL;
  *(void *)&__int128 v7 = 136315138LL;
  __int128 v129 = v7;
  unint64_t v128 = (char *)&type metadata for Any + 8;
  *(void *)&__int128 v7 = 136315394LL;
  __int128 v123 = v7;
  uint64_t v136 = v9;
  unint64_t v137 = v8;
  uint64_t v135 = v2;
  while (1)
  {
    uint64_t v11 = v10 - 4;
    if (v138) {
      id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, v8);
    }
    else {
      id v12 = *(id *)(v8 + 8 * v10);
    }
    uint64_t v13 = v12;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_43;
    }

    uint64_t v147 = v4;
    uint64_t v144 = v10 - 3;
    uint64_t v145 = v10;
    uint64_t v14 = sub_10001DCE0();
    v146 = &v123;
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = *(void *)(v15 + 64);
    __chkstk_darwin(v14, v17);
    unint64_t v18 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    uint64_t v150 = (char *)&v123 - v18;
    id v151 = v13;
    id v19 = [v13 identifier];
    sub_10000FD7C((uint64_t *)&unk_1000835C0);
    sub_10001DF70();
    __chkstk_darwin(v20, v21);
    uint64_t v142 = v22;
    sub_10001DD70();
    if (!v19) {
      break;
    }
    uint64_t v139 = v16;
    __chkstk_darwin(v23, v24);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

    uint64_t v148 = v15;
    uint64_t v25 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
    v25(v11, (char *)&v123 - v18, v14);
    sub_10001DC8C(v11, 0LL);
    sub_10001DDBC(v11, 1LL, v14);
    if (v26) {
      goto LABEL_46;
    }
    CFStringRef v149 = (__int128 *)v14;
    v25((uint64_t)v150, (char *)v11, v14);
    uint64_t v27 = sub_10001DD40();
    uint64_t v140 = *(os_log_s **)(v27 - 8);
    uint64_t v28 = *((void *)v140 + 8);
    __chkstk_darwin(v27, v29);
    unint64_t v30 = (v28 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    OSStatus v31 = (os_log_s *)((char *)&v123 - v30);
    sub_10000FD7C(&qword_1000820C0);
    uint64_t v2 = &v123;
    sub_10001DF70();
    __chkstk_darwin(v32, v33);
    unint64_t v141 = v34;
    id v35 = (char *)&v123 - (((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    sub_100057710((uint64_t)v35);
    sub_10001DDBC((uint64_t)v35, 1LL, v27);
    if (v26)
    {
      uint64_t v143 = v27;
      uint64_t v36 = sub_10001DB68((uint64_t)v35, &qword_1000820C0);
      int v37 = static os_log_type_t.default.getter(v36);
      uint64_t v38 = (os_log_s *)qword_1000845F0;
      uint64_t v39 = os_log_type_enabled((os_log_t)qword_1000845F0, (os_log_type_t)v37);
      id v41 = v151;
      if ((_DWORD)v39)
      {
        LODWORD(v134) = v37;
        uint64_t v140 = v38;
        uint64_t v42 = (os_log_s *)v151;
        uint64_t v43 = (uint8_t *)sub_1000122E0(12LL);
        uint64_t v44 = sub_1000122E0(32LL);
        v131 = &v123;
        uint64_t v133 = (os_log_s *)v44;
        uint64_t v154 = v44;
        *(_DWORD *)uint64_t v43 = v129;
        uint64_t v45 = v142;
        __chkstk_darwin(v44, v46);
        unint64_t v47 = (v45 + 15) & 0xFFFFFFFFFFFFFFF0LL;
        id v48 = (char *)&v123 - v47;
        uint64_t v132 = v42;
        id v49 = -[os_log_s identifier](v42, "identifier");
        if (__chkstk_darwin(v49, v50))
        {
          sub_10001E044();

          uint64_t v51 = 0LL;
        }

        else
        {
          uint64_t v51 = 1LL;
        }

        uint64_t v83 = v139;
        uint64_t v84 = (char *)&v123 - v47;
        uint64_t v2 = v149;
        sub_10001D930((uint64_t)v84, v51, 1LL, (uint64_t)v149);
        sub_10001E130();
        uint64_t v85 = sub_10001DEC8();
        if ((_DWORD)v85)
        {
          sub_10001DB68((uint64_t)v48, (uint64_t *)&unk_1000835C0);
          uint64_t v87 = 0LL;
          uint64_t v88 = 0LL;
        }

        else
        {
          __chkstk_darwin(v85, v86);
          uint64_t v89 = v148;
          (*(void (**)(char *, char *, __int128 *))(v148 + 16))( (char *)&v123 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v48,  v2);
          uint64_t v90 = sub_10001DB68((uint64_t)v48, (uint64_t *)&unk_1000835C0);
          uint64_t v87 = UUID.uuidString.getter(v90);
          uint64_t v88 = v91;
          (*(void (**)(char *, __int128 *))(v89 + 8))( (char *)&v123 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v2);
        }

        uint64_t v152 = v87;
        uint64_t v153 = v88;
        uint64_t v92 = sub_10000FD7C(&qword_1000815A0);
        uint64_t v93 = sub_10001E10C(v92);
        sub_10001DE1C(v93, v94);
        uint64_t v152 = v95;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v130, v43 + 4, v43 + 12);
        uint64_t v96 = v132;

        sub_10001DC58();
        sub_100016D10( (void *)&_mh_execute_header,  v140,  (os_log_type_t)v134,  "Found old peer %s without last used date set. Setting last used date to now.",  v43);
        uint64_t v38 = v133;
        swift_arrayDestroy(v133, 1LL);
        sub_10001001C((uint64_t)v38);
        uint64_t v39 = sub_10001001C((uint64_t)v43);
        id v41 = v151;
      }

      __chkstk_darwin(v39, v40);
      sub_10001DD70();
      Date.init()(v97);
      sub_10001D930((uint64_t)v38, 0LL, 1LL, v143);
      sub_100057610((uint64_t)v38);
      uint64_t v98 = v147;
      sub_1000196EC();
      uint64_t v4 = v98;
      if (v98)
      {

        sub_10001DE60();
        swift_bridgeObjectRelease(v137);
        return;
      }

      sub_10001DE60();

      uint64_t v77 = v136;
      unint64_t v8 = v137;
      uint64_t v99 = v145;
      uint64_t v100 = v144;
    }

    else
    {
      unint64_t v141 = &v123;
      char v52 = v140;
      uint64_t v53 = sub_10001DFDC( (uint64_t)&v123 - v30,  (uint64_t)v35,  *((uint64_t (**)(uint64_t, uint64_t, uint64_t))v140 + 4));
      uint64_t v55 = __chkstk_darwin(v53, v54);
      uint64_t v56 = (char *)&v123 - v30;
      Date.init()(v55);
      double v57 = Date.distance(to:)((char *)&v123 - v30);
      uint64_t v58 = (void (*)(char *, uint64_t))*((void *)v52 + 1);
      sub_10001E158((uint64_t)v56);
      sub_10001D9D4();
      sub_100057764();
      if (v60 >= v57)
      {
        sub_10001DFCC();
        sub_10001E158((uint64_t)v31);
        (*(void (**)(char *, __int128 *))(v148 + 8))(v150, v149);
        uint64_t v4 = v147;
        uint64_t v77 = v136;
        unint64_t v8 = v137;
      }

      else
      {
        uint64_t v61 = static os_log_type_t.default.getter(v59);
        int v62 = v61;
        uint64_t v63 = (os_log_s *)&v123;
        unint64_t v64 = (os_log_s *)qword_1000845F0;
        __chkstk_darwin(v61, v65);
        id v66 = (char *)&v123 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        Class v67 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((void *)v52 + 2);
        uint64_t v140 = v31;
        sub_10001DFDC((uint64_t)v66, (uint64_t)v31, v67);
        BOOL v68 = os_log_type_enabled(v64, (os_log_type_t)v62);
        uint64_t v2 = v135;
        uint64_t v69 = (uint64_t)v149;
        uint64_t v143 = v27;
        uint64_t v134 = v58;
        if (v68)
        {
          uint64_t v127 = v66;
          LODWORD(v131) = v62;
          uint64_t v132 = v64;
          uint64_t v133 = (os_log_s *)&v123;
          id v70 = v151;
          uint64_t v71 = sub_1000122E0(22LL);
          uint64_t v72 = sub_1000122E0(64LL);
          unint64_t v124 = &v123;
          uint64_t v126 = v72;
          uint64_t v154 = v72;
          *(_DWORD *)uint64_t v71 = v123;
          __chkstk_darwin(v72, v73);
          sub_10001DF58();
          id v125 = v70;
          id v74 = [v70 identifier];
          if (__chkstk_darwin(v74, v75))
          {
            sub_10001E044();

            uint64_t v76 = 0LL;
          }

          else
          {
            uint64_t v76 = 1LL;
          }

          uint64_t v101 = v139;
          sub_10001DC8C((char *)&v123 - (char *)v58, v76);
          sub_10001DA10((char *)&v123 - (char *)v58, (uint64_t)v64);
          uint64_t v102 = sub_10001D9C8((uint64_t)v64, 1LL, v69);
          if ((_DWORD)v102)
          {
            sub_10001DB68((uint64_t)v64, (uint64_t *)&unk_1000835C0);
            uint64_t v104 = 0LL;
            uint64_t v105 = 0LL;
          }

          else
          {
            __chkstk_darwin(v102, v103);
            uint64_t v106 = (char *)&v123 - ((v101 + 15) & 0xFFFFFFFFFFFFFFF0LL);
            uint64_t v107 = v148;
            sub_10001E054((uint64_t)v106, (uint64_t)v64, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v148 + 16));
            uint64_t v108 = sub_10001DB68((uint64_t)v64, (uint64_t *)&unk_1000835C0);
            uint64_t v104 = UUID.uuidString.getter(v108);
            uint64_t v105 = v109;
            sub_100016C30((uint64_t)v106, *(uint64_t (**)(uint64_t, uint64_t))(v107 + 8));
          }

          uint64_t v80 = v147;
          uint64_t v152 = v104;
          uint64_t v153 = v105;
          uint64_t v110 = sub_10000FD7C(&qword_1000815A0);
          uint64_t v111 = sub_10001E10C(v110);
          sub_10001DE1C(v111, v112);
          uint64_t v152 = v113;
          unint64_t v114 = v130;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v130, v71 + 4, v71 + 12);
          id v115 = v125;

          sub_10001DC58();
          *(_WORD *)(v71 + 12) = 2080;
          unint64_t v116 = sub_10001DA58();
          unint64_t v117 = v127;
          uint64_t v118 = v143;
          uint64_t v119 = dispatch thunk of CustomStringConvertible.description.getter(v143, v116);
          sub_10001DE1C(v119, v120);
          uint64_t v152 = v121;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v114, v71 + 14, v71 + 22);
          sub_10001DC58();
          v134(v117, v118);
          _os_log_impl( (void *)&_mh_execute_header,  v132,  (os_log_type_t)v131,  "Found expired peer %s with last used date %s. Removing.",  (uint8_t *)v71,  0x16u);
          uint64_t v122 = v126;
          swift_arrayDestroy(v126, 2LL);
          sub_10001001C(v122);
          uint64_t v78 = sub_10001001C(v71);
          uint64_t v81 = v148;
          uint64_t v82 = (uint64_t)v150;
          uint64_t v63 = v133;
        }

        else
        {
          uint64_t v78 = sub_10001E158((uint64_t)v66);
          uint64_t v80 = v147;
          uint64_t v81 = v148;
          uint64_t v82 = (uint64_t)v150;
        }

        __chkstk_darwin(v78, v79);
        sub_10001DD70();
        sub_10001E054((uint64_t)v63, v82, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v81 + 16));
        sub_10001DC8C((uint64_t)v63, 0LL);
        sub_10001B9F4();
        uint64_t v4 = v80;
        if (v80)
        {
          sub_10001DFCC();
          sub_10001DB68((uint64_t)v63, (uint64_t *)&unk_1000835C0);
          sub_10001DF48();
          sub_100016C30(v82, *(uint64_t (**)(uint64_t, uint64_t))(v81 + 8));
          swift_bridgeObjectRelease(v137);
          return;
        }

        sub_10001DFCC();
        sub_10001DB68((uint64_t)v63, (uint64_t *)&unk_1000835C0);
        sub_10001DF48();
        sub_100016C30(v82, *(uint64_t (**)(uint64_t, uint64_t))(v81 + 8));
        uint64_t v77 = v136;
        unint64_t v8 = v137;
      }

      uint64_t v100 = v144;
      uint64_t v99 = v145;
    }

    uint64_t v10 = v99 + 1;
    if (v100 == v77) {
      goto LABEL_38;
    }
  }

  sub_10001DC8C(v11, 1LL);
LABEL_46:
  sub_10001DB68(v11, (uint64_t *)&unk_1000835C0);
  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000042LL,  0x8000000100067360LL,  "remotepairingdeviced/SystemKeychainPairingManager.swift",  55LL,  2LL,  542LL,  0);
  __break(1u);
}

void sub_10001C9DC(unint64_t a1)
{
  if (!v1)
  {
    uint64_t v3 = sub_10001DD40();
    char v26 = v24;
    uint64_t v25 = *(void *)(v3 - 8);
    uint64_t v4 = *(void *)(v25 + 64);
    __chkstk_darwin(v3, v5);
    unint64_t v6 = a1;
    unint64_t v7 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    unint64_t v8 = (char *)v24 - v7;
    uint64_t v9 = sub_10000FD7C(&qword_1000820C0);
    v24[2] = v24;
    uint64_t v10 = *(void *)(*(void *)(v9 - 8) + 64LL);
    __chkstk_darwin(v9, v11);
    v24[1] = v6;
    sub_100057710((uint64_t)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    sub_10001DDBC((uint64_t)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL), 1LL, v3);
    if (v12)
    {
      sub_10001DB68((uint64_t)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL), &qword_1000820C0);
      sub_10001DDD8();
LABEL_6:
      __chkstk_darwin(v21, v22);
      sub_10001DEA8();
      Date.init()(v23);
      sub_10001DC8C(v6, 0LL);
      sub_100057610(v6);
      sub_1000196EC();
      return;
    }

    uint64_t v13 = sub_10001E054( (uint64_t)v24 - v7,  (uint64_t)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 32));
    uint64_t v15 = __chkstk_darwin(v13, v14);
    uint64_t v16 = (char *)v24 - v7;
    Date.init()(v15);
    double v17 = Date.distance(to:)((char *)v24 - v7);
    unint64_t v18 = *(void (**)(char *, uint64_t))(v25 + 8);
    v18(v16, v3);
    unint64_t v6 = sub_10001D9D4();
    sub_1000577EC();
    double v20 = v19;
    v18(v8, v3);
    sub_10001DDD8();
    if (v20 < v17) {
      goto LABEL_6;
    }
  }

void *sub_10001CBF0()
{
  uint64_t result = sub_10000FF14((void *)(v0 + 64), *(void *)(v0 + 88));
  if (*(_BYTE *)(*result + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager_firstUnlockHasCompleted) != 1)
  {
    uint64_t v2 = sub_100016E1C();
    uint64_t v3 = sub_10001DAE0( (unint64_t *)&unk_1000819E0,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    sub_100016B08(v2, v3);
    uint64_t v4 = static RemotePairingError.unlockRequired.getter();
    return (void *)swift_willThrow(v4);
  }

  return result;
}

void sub_10001CC70(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v109 = a1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecReturnData);
  uint64_t v5 = v4;
  __int128 v107 = 0u;
  __int128 v108 = 0u;
  sub_10001DE00();
  sub_10003C190((uint64_t)&v107, v3, v5);
  static String._unconditionallyBridgeFromObjectiveC(_:)(kSecReturnAttributes);
  sub_10001DDEC();
  __int128 v107 = 0u;
  __int128 v108 = 0u;
  sub_10001DC80((uint64_t)&v107, v6, v7, v8);
  os_log_type_t v10 = static os_log_type_t.default.getter(v9);
  uint64_t v11 = (os_log_s *)qword_1000845F0;
  uint64_t v12 = v109;
  sub_10001DFD4(v109);
  if (sub_10001E0C4())
  {
    sub_10001DFD4(v12);
    uint64_t v13 = sub_1000122E0(22LL);
    uint64_t v14 = sub_1000122E0(64LL);
    uint64_t v96 = v14;
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccount);
    sub_10001DEB8( v15,  v16,  v17,  v18,  v19,  v20,  v21,  v22,  v88,  v2,  v95,  v96,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  v104,  v105,  v106,  v107);
    sub_10001DDA4();
    uint64_t v23 = sub_10000FD7C(&qword_100081598);
    uint64_t v31 = sub_10001E09C(v23, v24, v25, v26, v27, v28, v29, v30, v89, v92, v95, v96, v97, v98);
    uint64_t v33 = v32;
    sub_100045370(v31, v32, &v96);
    sub_10001E088();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v34, v35, v36, v37);
    sub_10001DDF8(v12);
    swift_bridgeObjectRelease(v33);
    *(_WORD *)(v13 + 12) = 2080;
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrService);
    uint64_t v40 = v39;
    sub_10001DEB8( v38,  v39,  v41,  v42,  v43,  v44,  v45,  v46,  v90,  v93,  v95,  v96,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  v104,  v105,  v106,  v107);
    uint64_t v47 = swift_bridgeObjectRelease(v40);
    uint64_t v55 = sub_10001E09C(v47, v48, v49, v50, v51, v52, v53, v54, v91, v94, v95, v96, v97, v98);
    sub_100045370(v55, v56, &v96);
    sub_10001E088();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v57, v58, v59, v60);
    sub_10001DDF8(v12);
    sub_10001DDA4();
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v10,  "Migrating storage class of keychain item (account=%s, service=%s)",  (uint8_t *)v13,  0x16u);
    swift_arrayDestroy(v14, 2LL);
    sub_10001001C(v14);
    sub_10001001C(v13);
  }

  else
  {
    sub_10001DDF8(v12);
  }

  uint64_t v61 = sub_10000FD7C(&qword_100081590);
  uint64_t inited = swift_initStackObject(v61, &v97);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100062930;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessible);
  *(void *)(inited + 40) = v63;
  sub_10001DD48();
  *(void *)(inited + 72) = v64;
  *(void *)(inited + 48) = kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
  uint64_t v65 = (id)kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
  Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  sub_10000FF98((uint64_t)&v109, (uint64_t)&v107);
  Class isa = (const __CFDictionary *)sub_10001DE50().super.isa;
  sub_100016D6C();
  Class v67 = (const __CFDictionary *)sub_10001DE50().super.isa;
  sub_10001DC58();
  OSStatus v68 = SecItemUpdate(isa, v67);

  if (v68)
  {
    uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
    uint64_t v71 = v70;
    id v72 = objc_allocWithZone(&OBJC_CLASS___NSError);
    sub_10001DC68(v69, v71, v68);
    id v74 = v73;
    os_log_type_t v75 = static os_log_type_t.error.getter(v73);
    uint64_t v76 = (os_log_s *)qword_1000845F0;
    os_log_type_t v77 = v75;
    uint64_t v78 = sub_10001E0C4();
    if ((_DWORD)v78)
    {
      id v79 = v74;
      uint64_t v80 = (uint8_t *)sub_1000122E0(12LL);
      uint64_t v81 = sub_1000122E0(32LL);
      uint64_t v96 = v81;
      *(_DWORD *)uint64_t v80 = 136446210;
      id v82 = v79;
      id v83 = [v82 description];
      uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
      uint64_t v86 = v85;

      sub_100045370(v84, v86, &v96);
      uint64_t v95 = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v80 + 4, v80 + 12);

      swift_bridgeObjectRelease(v86);
      sub_100016D10( (void *)&_mh_execute_header,  v76,  v77,  "Failed to migrate keychain item accessibility: %{public}s",  v80);
      swift_arrayDestroy(v81, 1LL);
      sub_10001001C(v81);
      uint64_t v78 = sub_10001001C((uint64_t)v80);
    }

    swift_willThrow(v78);
  }

void *sub_10001D0BC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (&OBJC_CLASS___RPIdentity)
  {
    sub_10001A47C();
    uint64_t v12 = v11;
    sub_1000155D4(a1, a2);
    sub_10001E160();
    uint64_t v13 = sub_100019588(v12, a1, a2, a3, a4, a5);
    swift_bridgeObjectRelease(v12);
  }

  else
  {
    uint64_t v10 = static os_log_type_t.fault.getter(a1);
    os_log(_:dso:log:_:_:)( v10,  &_mh_execute_header,  qword_1000845F0,  "Unable to verify auth tags on platforms where Rapport is unavailable",  68LL,  2LL,  &_swiftEmptyArrayStorage);
    return 0LL;
  }

  return v13;
}

uint64_t sub_10001D1A0()
{
  return v0;
}

uint64_t sub_10001D1D4()
{
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

uint64_t type metadata accessor for SystemKeychainPairingManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC20remotepairingdeviced28SystemKeychainPairingManager);
}

uint64_t getEnumTagSinglePayload for SystemKeychainPairingManager.PeersChangedEvent( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for SystemKeychainPairingManager.PeersChangedEvent( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10001D2E8 + 4 * byte_1000629B5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10001D31C + 4 * byte_1000629B0[v4]))();
}

uint64_t sub_10001D31C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001D324(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10001D32CLL);
  }
  return result;
}

uint64_t sub_10001D338(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10001D340LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10001D344(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001D34C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001D358(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10001D360(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for SystemKeychainPairingManager.PeersChangedEvent()
{
  return &type metadata for SystemKeychainPairingManager.PeersChangedEvent;
}

unint64_t sub_10001D37C()
{
  unint64_t result = qword_100081570;
  if (!qword_100081570)
  {
    unint64_t result = swift_getWitnessTable(&unk_100062A74, &type metadata for SystemKeychainPairingManager.PeersChangedEvent);
    atomic_store(result, (unint64_t *)&qword_100081570);
  }

  return result;
}

void sub_10001D3B8(void (*a1)(void *, void))
{
}

void sub_10001D3D8()
{
}

void sub_10001D3F8()
{
}

void *sub_10001D418(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  return sub_10001D0BC(a1, a2, a3, a4, a5);
}

uint64_t sub_10001D438(uint64_t a1, uint64_t a2)
{
  return sub_10001B744(a1, a2);
}

void sub_10001D458( uint64_t a1, unint64_t a2, void (*a3)(uint64_t, unint64_t, void), uint64_t a4)
{
}

void sub_10001D478()
{
}

void sub_10001D498(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    swift_errorRelease(a1);
  }
  else {
}
  }

void sub_10001D4A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_10001D504( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20, char a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35)
{
  uint64_t v40 = v37;
  __int16 v41 = v38;
  char v42 = BYTE2(v38);
  char v43 = BYTE3(v38);
  char v44 = BYTE4(v38);
  char v45 = BYTE5(v38);
  if (!v36)
  {
    __break(1u);
    JUMPOUT(0x10001D688LL);
  }

  uint64_t result = memcmp(v36, &v40, BYTE6(v38));
  *uint64_t v35 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_10001D6C0(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v8 = (char *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }

    v8 += a1 - result;
  }

  BOOL v9 = __OFSUB__(a2, a1);
  int64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t result = __DataStorage._length.getter();
  if (!a4)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!v8)
  {
LABEL_14:
    __break(1u);
    return result;
  }

  if (result >= v10) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = result;
  }
  return memcmp(a4, v8, v11) == 0;
}

uint64_t sub_10001D75C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_10001D7A0(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [a3 setPublicKey:isa];
}

void sub_10001D7E4(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [a3 setAltIRK:isa];
}

uint64_t sub_10001D828(void *a1)
{
  id v1 = [a1 acl];
  if (!v1) {
    return 0LL;
  }
  int v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  return v3;
}

uint64_t sub_10001D890(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

void sub_10001D8EC(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [a3 setSecretKey:isa];
}

uint64_t sub_10001D930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t sub_10001D93C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10001D968(void *a1, char a2)
{
  return sub_10001B814( a1,  a2 & 1,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void (**)(uint64_t, unint64_t, uint64_t))(v2 + 32));
}

unint64_t sub_10001D978()
{
  unint64_t result = qword_100081588;
  if (!qword_100081588)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100081588);
  }

  return result;
}

void sub_10001D9B8(void *a1, unint64_t a2, char a3)
{
}

uint64_t sub_10001D9C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

unint64_t sub_10001D9D4()
{
  unint64_t result = qword_1000820B0;
  if (!qword_1000820B0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___CUPairedPeer);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000820B0);
  }

  return result;
}

uint64_t sub_10001DA10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD7C((uint64_t *)&unk_1000835C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10001DA58()
{
  unint64_t result = qword_1000815A8;
  if (!qword_1000815A8)
  {
    uint64_t v1 = type metadata accessor for Date(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_1000815A8);
  }

  return result;
}

uint64_t sub_10001DA98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD7C((uint64_t *)&unk_1000835C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001DAE0(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for RemotePairingError(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10001DB20()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10001DB44(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_10001DB68(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000FD7C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_10001DBA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10001DBE0(uint64_t a1)
{
  return a1;
}

_OWORD *sub_10001DC14(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10001DC28()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10001DC58()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001DC60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 6LL);
}

void sub_10001DC68(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

id sub_10001DC74(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

void sub_10001DC80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_10001DC8C(uint64_t a1, uint64_t a2)
{
  return sub_10001D930(a1, a2, 1LL, v2);
}

uint64_t sub_10001DC98(uint64_t a1)
{
  return swift_allocObject(a1, 72LL, 7LL);
}

uint64_t sub_10001DCA4()
{
  return sub_100015644(v1, v0);
}

void sub_10001DCB0(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10001DCBC(uint64_t a1, uint64_t *a2)
{
  return sub_10001DB68(v2 + 96, a2);
}

uint64_t sub_10001DCC4()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 8));
}

uint64_t sub_10001DCCC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v0 + 152) + 8LL))(v2, v1);
}

uint64_t sub_10001DCE0()
{
  return type metadata accessor for UUID(0LL);
}

uint64_t sub_10001DCE8()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

uint64_t sub_10001DD0C(uint64_t a1, uint64_t *a2)
{
  return sub_10001DB68(v2, a2);
}

uint64_t sub_10001DD14()
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(v0 + 40) + 8LL))(*(void *)(v0 + 48), v1);
}

uint64_t sub_10001DD24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Error<>.init(_:_:)(a1, a2, a3, v5, a5);
}

uint64_t sub_10001DD30()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001DD38()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001DD40()
{
  return type metadata accessor for Date(0LL);
}

void sub_10001DD48()
{
}

uint64_t sub_10001DD50()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001DD5C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 96));
}

  ;
}

  ;
}

  ;
}

uint64_t sub_10001DD94()
{
  return v0;
}

uint64_t sub_10001DDA4()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001DDAC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_10001DDB4()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001DDBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001D9C8(a1, a2, a3);
}

uint64_t sub_10001DDD0(uint64_t a1, uint64_t *a2)
{
  return sub_10001DB68(v2 + 112, a2);
}

  ;
}

uint64_t sub_10001DDE4()
{
  return swift_willThrow();
}

  ;
}

uint64_t sub_10001DDF8(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 2LL);
}

uint64_t sub_10001DE00()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001DE08()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 96) + 8LL))(v1, v0);
}

void sub_10001DE1C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10001DE28(uint64_t a1, uint64_t a2)
{
  return sub_10001D930(a1, a2, 1LL, v2);
}

  ;
}

NSDictionary sub_10001DE50()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_10001DE60()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 144) + 8LL))(v0, *(void *)(v1 - 136));
}

void sub_10001DE70(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
}

void sub_10001DE78()
{
}

uint64_t sub_10001DE80(uint64_t a1)
{
  return sub_100015D58(a1, *(void *)(v1 - 72));
}

NSDictionary sub_10001DE88()
{
  return Dictionary._bridgeToObjectiveC()();
}

NSData sub_10001DE98()
{
  return Data._bridgeToObjectiveC()();
}

  ;
}

void sub_10001DEB8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, __int128 a23)
{
}

uint64_t sub_10001DEC8()
{
  return sub_10001D9C8(v0, 1LL, v1);
}

uint64_t sub_10001DED8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_10001DEE8(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return swift_errorRetain(v2);
}

uint64_t sub_10001DEF8()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

  ;
}

uint64_t sub_10001DF30()
{
  return swift_willThrow();
}

uint64_t sub_10001DF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 + 144, v4 + 152, a3, a4);
}

uint64_t sub_10001DF48()
{
  return (*(uint64_t (**)(void, void))(v0 - 256))(*(void *)(v0 - 208), *(void *)(v0 - 184));
}

  ;
}

  ;
}

uint64_t sub_10001DF80()
{
  return sub_100015644(v0, v1);
}

uint64_t sub_10001DF90()
{
  return swift_willThrow();
}

uint64_t sub_10001DF98()
{
  return SecItemAdd(v0, 0LL);
}

NSDictionary sub_10001DFA4()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_10001DFB0(uint64_t a1, SEL *a2)
{
  return sub_10001D890(v2, a2);
}

uint64_t sub_10001DFB8()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 56));
}

NSString sub_10001DFC0()
{
  return String._bridgeToObjectiveC()();
}

void sub_10001DFCC()
{
}

uint64_t sub_10001DFD4(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 2LL);
}

uint64_t sub_10001DFDC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_10001DFE4(uint64_t a1, uint64_t a2)
{
  return Dictionary.init(dictionaryLiteral:)(a1, a2, v2, v3);
}

NSDictionary sub_10001DFF0()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_10001DFFC(uint64_t a1)
{
  return sub_100015644(a1, *(void *)(v1 + 72));
}

uint64_t sub_10001E004()
{
  return sub_100015644(*(void *)(v0 + 80), *(void *)(v1 - 72));
}

uint64_t sub_10001E010()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 160));
}

uint64_t sub_10001E01C()
{
  return v0;
}

  ;
}

uint64_t sub_10001E03C()
{
  return UUID.uuidString.getter();
}

uint64_t sub_10001E044()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t sub_10001E04C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001E054@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

void sub_10001E05C(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
}

uint64_t sub_10001E068()
{
  return 0x4B5249746C61LL;
}

uint64_t sub_10001E07C(uint64_t a1)
{
  return sub_10001D9C8(a1, 1LL, v1);
}

  ;
}

uint64_t sub_10001E09C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  return String.init<A>(describing:)(va, v14);
}

uint64_t sub_10001E0A8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_10001E0B0()
{
  return v0;
}

BOOL sub_10001E0C4()
{
  return os_log_type_enabled(v0, v1);
}

uint64_t sub_10001E0D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, v3, 0LL);
}

uint64_t sub_10001E0DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return os_log(_:dso:log:_:_:)(a1, a2, a3, a4, 41LL, 2LL);
}

uint64_t sub_10001E0E8()
{
  return sub_100015644(*(void *)(v0 + 184), *(void *)(v0 + 112));
}

uint64_t sub_10001E0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return os_log(_:dso:log:_:_:)(a1, a2, a3, a4, a5, 2LL);
}

uint64_t sub_10001E100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return os_log(_:dso:log:_:_:)(a1, a2, a3, a4, a5, 2LL);
}

uint64_t sub_10001E10C(uint64_t a1)
{
  return String.init<A>(describing:)(v1 - 112, a1);
}

uint64_t sub_10001E118(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return String.init<A>(describing:)(va, a1);
}

uint64_t sub_10001E124()
{
  return sub_100015644(v1, v0);
}

uint64_t sub_10001E130()
{
  return sub_10001DA10(v1, v0);
}

uint64_t sub_10001E13C()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

  ;
}

uint64_t sub_10001E158(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_10001E160()
{
  return sub_1000155D4(v1, v0);
}

void sub_10001E16C()
{
}

uint64_t sub_10001E178()
{
  return sub_10000FF38((void *)(v0 + 144));
}

uint64_t sub_10001E180()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

  ;
}

uint64_t sub_10001E198(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  os_log_type_t v8 = static os_log_type_t.default.getter(a1);
  BOOL v9 = (os_log_s *)qword_1000845F0;
  os_log_type_t v10 = v8;
  uint64_t result = os_log_type_enabled((os_log_t)qword_1000845F0, v8);
  if ((_DWORD)result)
  {
    sub_1000200C8(a1, a2, a3);
    swift_retain(v4);
    sub_1000200C8(a1, a2, a3);
    swift_retain(v4);
    uint64_t v12 = swift_slowAlloc(22LL, -1LL);
    uint64_t v13 = swift_slowAlloc(64LL, -1LL);
    uint64_t v26 = a3;
    uint64_t v27 = v13;
    *(_DWORD *)uint64_t v12 = 136446466;
    unint64_t v24 = a1;
    uint64_t v25 = a2;
    sub_1000200C8(a1, a2, a3);
    uint64_t v14 = String.init<A>(describing:)(&v24, &type metadata for DeviceInitiatedPairingService.State);
    uint64_t v16 = v15;
    sub_100045370(v14, v15, &v27);
    unint64_t v24 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v16);
    sub_10002018C(a1, a2, a3);
    sub_10002018C(a1, a2, a3);
    *(_WORD *)(v12 + 12) = 2082;
    uint64_t v18 = v4[3];
    uint64_t v19 = v4[4];
    unint64_t v24 = v4[2];
    uint64_t v25 = v18;
    uint64_t v26 = v19;
    sub_1000200C8(v24, v18, v19);
    uint64_t v20 = String.init<A>(describing:)(&v24, &type metadata for DeviceInitiatedPairingService.State);
    uint64_t v22 = v21;
    sub_100045370(v20, v21, &v27);
    unint64_t v24 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v12 + 14, v12 + 22);
    swift_release_n(v4, 2LL);
    swift_bridgeObjectRelease(v22);
    _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "DeviceInitiatedPairingService state changed %{public}s -> %{public}s",  (uint8_t *)v12,  0x16u);
    swift_arrayDestroy(v13, 2LL);
    swift_slowDealloc(v13, -1LL, -1LL);
    return swift_slowDealloc(v12, -1LL, -1LL);
  }

  return result;
}

unint64_t sub_10001E3A8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  unint64_t v7 = sub_1000203B0();
  sub_1000200C8(v7, v8, v9);
  sub_1000200C8(a1, a2, a3);
  unint64_t v10 = sub_1000203B0();
  sub_10002018C(v10, v11, v12);
  unint64_t v13 = sub_1000203B0();
  sub_10001E198(v13, v14, v15);
  sub_10002018C(a1, a2, a3);
  unint64_t v16 = sub_1000203B0();
  return sub_10002018C(v16, v17, v18);
}

void sub_10001E430()
{
  uint64_t v2 = v1;
  uint64_t v32 = v4;
  uint64_t v33 = v3;
  unsigned int v6 = v5;
  sub_10000FD7C(&qword_1000816D8);
  sub_100012280();
  __chkstk_darwin(v7, v8);
  sub_100016B50();
  uint64_t v9 = sub_10000FD7C(&qword_1000810F8);
  sub_100012280();
  __chkstk_darwin(v10, v11);
  sub_1000203D4();
  uint64_t v12 = type metadata accessor for XPCDictionary(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15, v18);
  uint64_t v20 = (char *)&v30 - v19;
  v2 += 16LL;
  swift_beginAccess(v2, &v34, 0LL, 0LL);
  if (swift_weakLoadStrong(v2))
  {
    uint64_t v21 = *(int *)(v9 + 48);
    uint64_t v22 = v0 + v21;
    uint64_t v23 = *v6;
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v22, (char *)v6 + v21, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v20, v22, v12);
    uint64_t v24 = swift_retain(v23);
    XPCDictionary.entitlements.getter(v24);
    sub_10001FBD4();
    uint64_t v31 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
    uint64_t v25 = v31(v17, v12);
    uint64_t v26 = static os_log_type_t.info.getter(v25);
    os_log(_:dso:log:_:_:)( v26,  &_mh_execute_header,  qword_1000845F0,  "Handling new browser request",  28LL,  2LL,  &_swiftEmptyArrayStorage);
    uint64_t v27 = swift_allocObject(&unk_100076FE8, 32LL, 7LL);
    uint64_t v28 = v32;
    *(void *)(v27 + swift_weakDestroy(v0 + 16) = v33;
    *(void *)(v27 + 24) = v28;
    uint64_t v29 = sub_10000FFC4();
    sub_10001E7B4(v29, v23, (uint64_t)sub_1000200C0, v27);
    sub_100020414();
    sub_100020470();
    sub_10002044C();
    swift_release(v27);
  }

  sub_10000FF80();
}

uint64_t sub_10001E6C0(void (*a1)(char *))
{
  uint64_t v2 = sub_10000FD7C(&qword_1000816D8);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  unsigned int v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  EmptyResponse.init()(v4);
  swift_storeEnumTagMultiPayload(v6, v2, 0LL);
  a1(v6);
  return sub_10001DB68((uint64_t)v6, &qword_1000816D8);
}

uint64_t sub_10001E760()
{
  uint64_t v0 = dispatch thunk of XPCConnection.activate()();
  uint64_t v1 = static os_log_type_t.debug.getter(v0);
  return os_log(_:dso:log:_:_:)( v1,  &_mh_execute_header,  qword_1000845F0,  "Started device-initiated network pairing XPC service",  52LL,  2LL);
}

uint64_t sub_10001E7B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v4;
  uint64_t v11 = static os_log_type_t.info.getter(a1);
  os_log(_:dso:log:_:_:)( v11,  &_mh_execute_header,  qword_1000845F0,  "Received client browse registration",  35LL,  2LL,  &_swiftEmptyArrayStorage);
  uint64_t v12 = type metadata accessor for PairableHostsBrowseRegistration();
  sub_100016BCC(v12, 56LL);
  sub_100020434();
  sub_10000FFDC();
  uint64_t v13 = sub_100033588(a2, a3, a4);
  dispatch thunk of XPCConnection.setTargetQueue(_:)(*(void *)(v7 + 40));
  uint64_t v14 = sub_100016BCC((uint64_t)&unk_100077010, 24LL);
  sub_10002043C(v14);
  uint64_t v15 = sub_100016BCC((uint64_t)&unk_100077088, 24LL);
  sub_100020404(v15);
  uint64_t v16 = sub_100016BCC((uint64_t)&unk_1000770B0, 32LL);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)(v16 + 24) = v6;
  sub_100020454();
  sub_100016DFC();
  dispatch thunk of SystemXPCPeerConnection.setEventHandler(_:)(sub_100020184, v16);
  swift_release(v5);
  sub_100020490();
  swift_release(v16);
  sub_10001EA64(v13);
  return sub_10000FFF8();
}

uint64_t sub_10001E8F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000FD7C(&qword_100081A90);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  a2 += 16LL;
  swift_beginAccess(a2, v19, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = a3 + 16;
    swift_beginAccess(v12, v18, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v12);
    if (Strong)
    {
      uint64_t v14 = Strong;
      sub_100012218(a1, (uint64_t)v9);
      uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v6);
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        uint64_t v16 = static os_log_type_t.info.getter(EnumCaseMultiPayload);
        os_log(_:dso:log:_:_:)( v16,  &_mh_execute_header,  qword_1000845F0,  "Browser client disconnected. Unregistering",  42LL,  2LL,  &_swiftEmptyArrayStorage);
      }

      else
      {
        uint64_t v17 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
        os_log(_:dso:log:_:_:)( v17,  &_mh_execute_header,  qword_1000845F0,  "Unexpected message from browser client. Unregistering.",  54LL,  2LL,  &_swiftEmptyArrayStorage);
      }

      sub_10001DB68((uint64_t)v9, &qword_100081A90);
      sub_10001F0D4();
      swift_release(v11);
    }

    else
    {
      uint64_t v14 = v11;
    }

    return swift_release(v14);
  }

  return result;
}

uint64_t sub_10001EA64(uint64_t a1)
{
  uint64_t v5 = v2;
  uint64_t v6 = v1;
  uint64_t v8 = type metadata accessor for RemotePairingError(0LL);
  sub_100012280();
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for BonjourBrowser.Mode(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  sub_100012404();
  uint64_t v16 = type metadata accessor for BonjourService(0LL);
  __chkstk_darwin(v16, v17);
  sub_1000203EC();
  unint64_t v20 = v6[2];
  if (v20)
  {
    if (v20 != 1)
    {
      v54[1] = v5;
      uint64_t v27 = v6[3];
      uint64_t v37 = v6[4];
      v56[0] = v20;
      sub_100020434();
      v54[0] = v37;
      sub_1000200C8(v20, v27, v37);
      int64_t v33 = (int64_t)v56;
      sub_1000523DC(&v57, a1);
      swift_release(v57);
      uint64_t v38 = v27 + 64;
      uint64_t v39 = 1LL << *(_BYTE *)(v27 + 32);
      uint64_t v40 = -1LL;
      if (v39 < 64) {
        uint64_t v40 = ~(-1LL << v39);
      }
      uint64_t v41 = v40 & *(void *)(v27 + 64);
      int64_t v42 = (unint64_t)(v39 + 63) >> 6;
      sub_10001DEF8();
      int64_t v43 = 0LL;
      if (!v41) {
        goto LABEL_12;
      }
LABEL_11:
      for (v41 &= v41 - 1; ; uint64_t v41 = (v45 - 1) & v45)
      {
        sub_100016DFC();
        int64_t v33 = a1;
        sub_1000336EC();
        sub_100020490();
        if (v41) {
          goto LABEL_11;
        }
LABEL_12:
        int64_t v44 = v43 + 1;
        if (__OFADD__(v43, 1LL))
        {
          __break(1u);
          goto LABEL_34;
        }

        if (v44 >= v42) {
          goto LABEL_30;
        }
        uint64_t v45 = *(void *)(v38 + 8 * v44);
        ++v43;
        if (!v45)
        {
          int64_t v43 = v44 + 1;
          if (v44 + 1 >= v42) {
            goto LABEL_30;
          }
          uint64_t v45 = *(void *)(v38 + 8 * v43);
          if (!v45)
          {
            int64_t v43 = v44 + 2;
            if (v44 + 2 >= v42) {
              goto LABEL_30;
            }
            uint64_t v45 = *(void *)(v38 + 8 * v43);
            if (!v45)
            {
              int64_t v43 = v44 + 3;
              if (v44 + 3 >= v42) {
                goto LABEL_30;
              }
              uint64_t v45 = *(void *)(v38 + 8 * v43);
              if (!v45)
              {
                int64_t v46 = v44 + 4;
                if (v46 >= v42)
                {
LABEL_30:
                  sub_10000FFF8();
                  unint64_t v47 = v56[0];
                  sub_10001DEF8();
                  sub_10002042C();
                  uint64_t v48 = v54[0];
                  sub_100016B28();
                  sub_10001E3A8(v47, v27, v48);
                  swift_release(v48);
                  swift_bridgeObjectRelease(v27);
                  return swift_bridgeObjectRelease(v47);
                }

                uint64_t v45 = *(void *)(v38 + 8 * v46);
                if (!v45)
                {
                  while (1)
                  {
                    int64_t v43 = v46 + 1;
                    if (__OFADD__(v46, 1LL)) {
                      break;
                    }
                    if (v43 >= v42) {
                      goto LABEL_30;
                    }
                    uint64_t v45 = *(void *)(v38 + 8 * v43);
                    ++v46;
                    if (v45) {
                      goto LABEL_27;
                    }
                  }

LABEL_34:
                  __break(1u);
LABEL_35:
                  if (v33 < 0) {
                    uint64_t v53 = v33;
                  }
                  else {
                    uint64_t v53 = v33 & 0xFFFFFFFFFFFFFF8LL;
                  }
                  sub_100020434();
                  sub_10001DE00();
                  uint64_t v34 = _CocoaArrayWrapper.endIndex.getter(v53);
                  swift_bridgeObjectRelease(v33);
                  goto LABEL_6;
                }

                int64_t v43 = v46;
              }
            }
          }
        }

            sub_10000FE04(v7);
            return;
          }
        }
      }
    }

        id v25 = (v33 - 1) & v33;
        uint64_t v26 = __clz(__rbit64(v33)) + (v27 << 6);
      }

      uint64_t v35 = *(void *)(*(void *)(v13 + 48) + 8 * v26);
      sub_10000FFDC();
      if (!v35) {
        goto LABEL_38;
      }
      while (1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v1, v24, v3);
        dispatch thunk of ControlChannelConnection.invalidate(for:)(v1);
        sub_100012464();
        uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
        unint64_t v20 = v27;
        uint64_t v21 = v25;
        if ((v13 & 0x8000000000000000LL) == 0) {
          break;
        }
LABEL_18:
        uint64_t v28 = __CocoaSet.Iterator.next()(v18);
        if (v28)
        {
          uint64_t v29 = v28;
          uint64_t v39 = v28;
          uint64_t v30 = sub_10000FF78();
          swift_unknownObjectRetain(v29);
          swift_dynamicCast(&v40, &v39, (char *)&type metadata for Swift.AnyObject + 8, v30, 7LL);
          uint64_t v31 = v40;
          swift_unknownObjectRelease(v29);
          uint64_t v27 = v20;
          id v25 = v21;
          if (v31) {
            continue;
          }
        }

        goto LABEL_38;
      }
    }
  }

  if (v10 == 1)
  {
    sub_10000FFDC();
    NWListener.cancel()();
    sub_100012464();
    uint64_t v7 = *(void *)(v2 + 24);
    uint64_t v9 = *(void *)(v2 + 40);
    LOBYTE(v1sub_10001D498(v0, 0) = *(_BYTE *)(v2 + 48);
    goto LABEL_9;
  }

  if (v7 != 1 || (*v8 | v9) != 0)
  {
    LOBYTE(v1sub_10001D498(v0, 0) = 2;
    goto LABEL_9;
  }

  uint64_t v36 = static os_log_type_t.error.getter(v6);
  sub_100012380( v36,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"NetworkPairingService: Ignoring shutdown request as service is already shutting down",  84LL);
LABEL_39:
  sub_10000FF80();
}

  __break(1u);
}

uint64_t sub_10001EF68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BonjourBrowser.Change.Kind(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  a2 += 16LL;
  swift_beginAccess(a2, v19, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v12 = result;
    uint64_t v13 = a3 + 16;
    swift_beginAccess(v13, v18, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v13);
    if (Strong)
    {
      uint64_t v15 = Strong;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
      int v16 = (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 88))(v10, v6);
      if (v16 == enum case for BonjourBrowser.Change.Kind.added(_:))
      {
        type metadata accessor for BonjourBrowser.Change(0LL);
        sub_10001F364();
        uint64_t v17 = v15;
      }

      else
      {
        if (v16 != enum case for BonjourBrowser.Change.Kind.lost(_:))
        {
          uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)(v6, v6);
          __break(1u);
          return result;
        }

        type metadata accessor for BonjourBrowser.Change(0LL);
        sub_10001F954();
        uint64_t v17 = v12;
        uint64_t v12 = v15;
      }

      swift_release(v17);
    }

    return swift_release(v12);
  }

  return result;
}

void sub_10001F0D4()
{
  uint64_t v3 = v0;
  sub_10000FD7C(&qword_100081A20);
  sub_100012280();
  __chkstk_darwin(v4, v5);
  sub_1000203EC();
  sub_1000336B8();
  unint64_t v6 = v0[2];
  if (v6 >= 2)
  {
    uint64_t v8 = v0[3];
    uint64_t v7 = v0[4];
    uint64_t v44 = v8;
    unint64_t v45 = v6;
    swift_bridgeObjectRetain(v6);
    sub_10002042C();
    sub_100010000();
    uint64_t v9 = sub_100054108();
    swift_release(v9);
    uint64_t v10 = sub_10001DEF8();
    BOOL v11 = sub_10001F32C(v10);
    uint64_t v12 = sub_10001DD38();
    if (v11)
    {
      dispatch thunk of BonjourBrowser.cancel()(v12);
      sub_10000FD7C(&qword_1000816E0);
      sub_100012280();
      __chkstk_darwin(v13, v14);
      sub_100020390();
      uint64_t v17 = __chkstk_darwin(v15, v16);
      unint64_t v20 = (char *)&v40 - v19;
      if (*(void *)(v8 + 16))
      {
        uint64_t v41 = v7;
        int64_t v42 = v3;
        do
        {
          uint64_t v43 = v18;
          uint64_t v21 = *(int *)(v17 + 48);
          uint64_t v22 = sub_10004E584(v8);
          uint64_t v24 = v23;
          uint64_t v26 = v25 & 1;
          uint64_t v27 = sub_10000FD7C(&qword_1000816E8);
          Dictionary._Variant.remove(at:)(v20, &v20[v21], v22, v24, v26, v27);
          sub_100020104(v22, v24, v26);
          uint64_t v28 = sub_10001DCE0();
          (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v28 - 8) + 32LL))(v1, v20, v28);
          *(void *)(v1 + v21) = *(void *)&v20[v21];
          uint64_t v29 = sub_100020498();
          sub_100020478(v2, v30, v31, v29);
          sub_10000FFDC();
          sub_100021E3C();
          sub_10001DB68(v2, &qword_100081A20);
          sub_1000223F8();
          sub_100012464();
          sub_10001DB68(v1, &qword_1000816E0);
          sub_10000FD7C(&qword_1000816E0);
          sub_100012280();
          __chkstk_darwin(v32, v33);
          sub_100020390();
          uint64_t v17 = __chkstk_darwin(v34, v35);
          unint64_t v20 = (char *)&v40 - v36;
          uint64_t v8 = v44;
        }

        while (*(void *)(v44 + 16));
        uint64_t v7 = v41;
      }

      unint64_t v37 = 0LL;
      uint64_t v38 = 0LL;
      uint64_t v39 = 0LL;
    }

    else
    {
      sub_10001DEF8();
      sub_10002042C();
      sub_100010000();
      unint64_t v37 = v45;
      uint64_t v38 = v8;
      uint64_t v39 = v7;
    }

    sub_10001E3A8(v37, v38, v39);
    swift_release(v7);
    swift_bridgeObjectRelease(v8);
    sub_10001DD38();
  }

  sub_10000FF80();
}

BOOL sub_10001F32C(uint64_t a1)
{
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v1 = __CocoaSet.count.getter(a1);
  }

  else
  {
    uint64_t v1 = *(void *)(a1 + 16);
  }

  return v1 == 0;
}

void sub_10001F364()
{
  uint64_t v4 = v3;
  unint64_t v6 = v5;
  uint64_t v7 = sub_100020498();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  sub_100012404();
  sub_10000FD7C(&qword_100081A20);
  sub_100012280();
  __chkstk_darwin(v10, v11);
  sub_1000203D4();
  unint64_t v12 = v0[2];
  uint64_t v13 = v0[4];
  if (v12 < 2 || v13 != v4) {
    goto LABEL_5;
  }
  uint64_t v74 = v4;
  uint64_t v15 = v0[3];
  uint64_t v16 = sub_10001DCE0();
  os_log_t v75 = (os_log_t)&v69;
  uint64_t v73 = v0;
  uint64_t v78 = *(void *)(v16 - 8);
  int64_t v79 = v16;
  __chkstk_darwin(v16, v17);
  uint64_t v72 = v18;
  uint64_t v19 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_bridgeObjectRetain(v15);
  uint64_t v71 = v13;
  unint64_t v20 = sub_1000200C8(v12, v15, v13);
  uint64_t v76 = v12;
  os_log_type_t v77 = v6;
  DiscoveredBonjourAdvert.identifier.getter(v20);
  sub_10003C444((uint64_t)v19, v15);
  uint64_t v22 = v21;
  swift_bridgeObjectRelease(v15);
  int64_t v23 = v79;
  uint64_t v24 = *(void (**)(char *, int64_t))(v78 + 8);
  v24(v19, v79);
  if (v22)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v2, v77, v7);
    sub_10001D930(v2, 0LL, 1LL, v7);
    sub_100021E3C();
    sub_100012464();
    sub_10001DB68(v2, &qword_100081A20);
    swift_release(v74);
    swift_bridgeObjectRelease(v76);
    swift_bridgeObjectRelease(v15);
LABEL_5:
    sub_10000FF80();
    return;
  }

  uint64_t v25 = v72;
  uint64_t v78 = (uint64_t)v24;
  uint64_t v70 = v15;
  (*(void (**)(uint64_t))(v8 + 16))(v1);
  uint64_t v26 = v73;
  sub_10001D75C((uint64_t)(v73 + 7), (uint64_t)v82);
  uint64_t v27 = (void *)v26[5];
  uint64_t v28 = type metadata accessor for DiscoveredPairableHost(0LL);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  id v29 = v27;
  uint64_t v30 = sub_100021BB4();
  os_log_type_t v31 = static os_log_type_t.default.getter(v30);
  os_log_t v75 = (os_log_t)qword_1000845F0;
  uint64_t v32 = os_log_type_enabled((os_log_t)qword_1000845F0, v31);
  if ((_DWORD)v32)
  {
    sub_10000FFC4();
    uint64_t v34 = (uint8_t *)sub_1000122E0(12LL);
    uint64_t v35 = sub_1000122E0(32LL);
    v82[0] = v35;
    *(_DWORD *)uint64_t v34 = 136315138;
    uint64_t v69 = v34 + 4;
    uint64_t v36 = v30[2];
    uint64_t v37 = v30[3];
    swift_bridgeObjectRetain(v37);
    sub_100045370(v36, v37, v82);
    uint64_t v81 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, v82, v69, v34 + 12);
    swift_release(v30);
    swift_bridgeObjectRelease(v37);
    _os_log_impl((void *)&_mh_execute_header, v75, v31, "Created new wirelessly pairable host: %s", v34, 0xCu);
    sub_100020464();
    sub_10001001C(v35);
    uint64_t v32 = sub_10001001C((uint64_t)v34);
  }

  uint64_t v39 = __chkstk_darwin(v32, v33);
  DiscoveredBonjourAdvert.identifier.getter(v39);
  sub_10000FFC4();
  uint64_t v40 = v70;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v70);
  v82[0] = v40;
  sub_10005625C((uint64_t)v30, (uint64_t)&v69 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL), isUniquelyReferenced_nonNull_native);
  int64_t v42 = (os_log_s *)v82[0];
  swift_bridgeObjectRelease(0x8000000000000000LL);
  ((void (*)(char *, int64_t))v78)((char *)&v69 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL), v23);
  os_log_t v75 = v42;
  if ((v76 & 0xC000000000000001LL) != 0)
  {
    if (v76 >= 0) {
      uint64_t v43 = v76 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v43 = v76;
    }
    swift_bridgeObjectRetain(v76);
    uint64_t v44 = __CocoaSet.makeIterator()(v43);
    uint64_t v45 = type metadata accessor for PairableHostsBrowseRegistration();
    uint64_t v46 = sub_10000FE6C( &qword_1000825C0,  (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration,  (uint64_t)&unk_1000631F0);
    uint64_t v47 = Set.Iterator.init(_cocoa:)(v44, v45, v46);
    uint64_t v49 = v82[0];
    uint64_t v48 = v82[1];
    uint64_t v50 = v82[2];
    uint64_t v51 = v82[3];
    unint64_t v52 = v82[4];
  }

  else
  {
    uint64_t v53 = -1LL << *(_BYTE *)(v76 + 32);
    uint64_t v48 = v76 + 56;
    uint64_t v54 = ~v53;
    uint64_t v55 = -v53;
    if (v55 < 64) {
      uint64_t v56 = ~(-1LL << v55);
    }
    else {
      uint64_t v56 = -1LL;
    }
    unint64_t v52 = v56 & *(void *)(v76 + 56);
    swift_bridgeObjectRetain(v76);
    uint64_t v50 = v54;
    uint64_t v51 = 0LL;
    uint64_t v49 = v47;
  }

  uint64_t v78 = v49 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v79 = (unint64_t)(v50 + 64) >> 6;
  os_log_type_t v77 = (char *)&type metadata for Swift.AnyObject + 8;
  if (v49 < 0) {
    goto LABEL_22;
  }
LABEL_20:
  if (v52)
  {
    uint64_t v57 = (v52 - 1) & v52;
    unint64_t v58 = __clz(__rbit64(v52)) | (v51 << 6);
    uint64_t v59 = v51;
    goto LABEL_38;
  }

  int64_t v64 = v51 + 1;
  if (!__OFADD__(v51, 1LL))
  {
    if (v64 < v79)
    {
      unint64_t v65 = *(void *)(v48 + 8 * v64);
      uint64_t v59 = v51 + 1;
      if (v65) {
        goto LABEL_37;
      }
      uint64_t v59 = v51 + 2;
      if (v51 + 2 >= v79) {
        goto LABEL_42;
      }
      unint64_t v65 = *(void *)(v48 + 8 * v59);
      if (v65) {
        goto LABEL_37;
      }
      uint64_t v59 = v51 + 3;
      if (v51 + 3 >= v79) {
        goto LABEL_42;
      }
      unint64_t v65 = *(void *)(v48 + 8 * v59);
      if (v65)
      {
LABEL_37:
        uint64_t v57 = (v65 - 1) & v65;
        unint64_t v58 = __clz(__rbit64(v65)) + (v59 << 6);
LABEL_38:
        uint64_t v63 = *(void *)(*(void *)(v49 + 48) + 8 * v58);
        sub_10000FFDC();
        while (v63)
        {
          sub_1000336EC();
          uint64_t v47 = sub_100012464();
          uint64_t v51 = v59;
          unint64_t v52 = v57;
          if ((v49 & 0x8000000000000000LL) == 0) {
            goto LABEL_20;
          }
LABEL_22:
          uint64_t v60 = __CocoaSet.Iterator.next()(v47);
          if (!v60) {
            goto LABEL_42;
          }
          uint64_t v61 = v60;
          uint64_t v80 = v60;
          uint64_t v62 = type metadata accessor for PairableHostsBrowseRegistration();
          swift_unknownObjectRetain(v61);
          swift_dynamicCast(&v81, &v80, v77, v62, 7LL);
          uint64_t v63 = v81;
          swift_unknownObjectRelease(v61);
          uint64_t v59 = v51;
          uint64_t v57 = v52;
        }

        goto LABEL_42;
      }

      uint64_t v59 = v51 + 4;
      if (v51 + 4 < v79)
      {
        unint64_t v65 = *(void *)(v48 + 8 * v59);
        if (!v65)
        {
          int64_t v66 = v51 + 5;
          while (v66 < v79)
          {
            unint64_t v65 = *(void *)(v48 + 8 * v66++);
            if (v65)
            {
              uint64_t v59 = v66 - 1;
              goto LABEL_37;
            }
          }

          goto LABEL_42;
        }

        goto LABEL_37;
      }
    }

LABEL_42:
    sub_10000FE04(v49);
    unint64_t v67 = v76;
    sub_100020424();
    os_log_t v68 = v75;
    sub_10002042C();
    sub_100016B28();
    sub_10001E3A8(v67, (uint64_t)v68, v71);
    sub_100016BD4();
    sub_10002045C();
    swift_bridgeObjectRelease(v68);
    swift_release(v30);
    goto LABEL_5;
  }

  __break(1u);
}

  uint64_t result = swift_release(v5);
  void *v3 = v8;
  return result;
}

void sub_10001F954()
{
  uint64_t v43 = v2;
  uint64_t v44 = v3;
  uint64_t v5 = v4;
  sub_10000FD7C(&qword_100081A20);
  sub_100012280();
  __chkstk_darwin(v6, v7);
  sub_100012404();
  unint64_t v8 = v0[2];
  if (v8 < 2)
  {
LABEL_2:
    sub_10000FF80();
    return;
  }

  uint64_t v10 = v0[3];
  uint64_t v9 = v0[4];
  uint64_t v42 = v10;
  if (v9 == v5)
  {
    uint64_t v39 = v9;
    uint64_t v12 = sub_10001DCE0();
    uint64_t v13 = *(void *)(v12 - 8);
    __chkstk_darwin(v12, v14);
    uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    sub_100020424();
    swift_bridgeObjectRetain(v10);
    uint64_t v17 = sub_100016B28();
    DiscoveredBonjourAdvert.identifier.getter(v17);
    sub_100054F50();
    uint64_t v19 = v18;
    uint64_t v20 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    if (v19)
    {
      os_log_type_t v21 = static os_log_type_t.default.getter(v20);
      uint64_t v22 = (os_log_s *)qword_1000845F0;
      os_log_type_t v23 = v21;
      if (os_log_type_enabled((os_log_t)qword_1000845F0, v21))
      {
        sub_100020454();
        uint64_t v24 = (uint8_t *)sub_1000122E0(12LL);
        uint64_t v38 = sub_1000122E0(32LL);
        uint64_t v41 = v38;
        uint64_t v37 = v24;
        *(_DWORD *)uint64_t v24 = 136315138;
        uint64_t v36 = v24 + 4;
        uint64_t v26 = *(void *)(v19 + 16);
        uint64_t v25 = *(void *)(v19 + 24);
        sub_10001DE00();
        sub_100045370(v26, v25, &v41);
        uint64_t v40 = v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v36, v24 + 12);
        swift_release(v19);
        swift_bridgeObjectRelease(v25);
        uint64_t v28 = v37;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "Removing wireless pairing host %s because the wireless pairing advert was lost",  v37,  0xCu);
        uint64_t v29 = v38;
        sub_100020464();
        sub_10001001C(v29);
        sub_10001001C((uint64_t)v28);
      }

      uint64_t v30 = sub_100020498();
      sub_100020478(v1, v31, v32, v30);
      sub_100021E3C();
      sub_10001DB68(v1, &qword_100081A20);
      sub_1000223F8();
      uint64_t v33 = v42;
      sub_100020424();
      sub_10001DEF8();
      sub_100016B28();
      sub_10001E3A8(v8, v33, v39);
      sub_100016BD4();
      sub_10002045C();
      sub_10001DD38();
      swift_release(v19);
    }

    else
    {
      uint64_t v34 = v42;
      sub_100016BD4();
      sub_10002045C();
      swift_bridgeObjectRelease(v34);
    }

    goto LABEL_2;
  }

  uint64_t v11 = sub_100020424();
  swift_bridgeObjectRelease(v11);
}

uint64_t sub_10001FBD4()
{
  uint64_t v1 = type metadata accessor for RemotePairingError(0LL);
  sub_100012280();
  __chkstk_darwin(v2, v3);
  sub_100016B50();
  uint64_t result = XPCDictionary.subscript.getter(0xD00000000000002CLL, 0x8000000100066CF0LL);
  if ((result & 1) == 0)
  {
    uint64_t result = _RPIsAppleInternal();
    if ((result & 1) == 0)
    {
      uint64_t v5 = sub_10000FE6C( (unint64_t *)&unk_1000813E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
      static Error<>.permissionDenied.getter(v1, v5);
      uint64_t v6 = sub_10000FE6C( (unint64_t *)&unk_1000819E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
      sub_100016B08(v1, v6);
      uint64_t v7 = Error<>.init(_:_:)(v0, 0xD00000000000004ALL, 0x8000000100066D20LL, v1, v5);
      return swift_willThrow(v7);
    }
  }

  return result;
}

uint64_t sub_10001FCF0()
{
  swift_release(*(void *)(v0 + 48));
  sub_10000FF38((void *)(v0 + 56));
  return v0;
}

uint64_t sub_10001FD28()
{
  return swift_deallocClassInstance(v0, 96LL, 7LL);
}

uint64_t type metadata accessor for DeviceInitiatedPairingService()
{
  return objc_opt_self(&OBJC_CLASS____TtC20remotepairingdeviced29DeviceInitiatedPairingService);
}

unint64_t destroy for DeviceInitiatedPairingService.State(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[1]);
    return swift_release(a1[2]);
  }

  return result;
}

void _s20remotepairingdeviced29DeviceInitiatedPairingServiceC5StateOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = a2[2];
  }

  else
  {
    uint64_t v4 = a2[1];
    uint64_t v5 = a2[2];
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
    swift_bridgeObjectRetain(v3);
    sub_10001DE00();
    sub_100010000();
  }

  sub_100020484();
}

unint64_t *assignWithCopy for DeviceInitiatedPairingService.State( unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = v5;
      unint64_t v10 = a2[1];
      a1[1] = v10;
      unint64_t v11 = a2[2];
      a1[2] = v11;
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRetain(v10);
      swift_retain(v11);
      return a1;
    }

__n128 initializeWithTake for DeviceInitiatedPairingService.State.BrowsingForPairableHostsInfo( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for DeviceInitiatedPairingService.State(void *a1, uint64_t a2)
{
  unint64_t v4 = *a1;
  if (v4 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[1]);
    swift_release(a1[2]);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = *(void *)(a2 + 16);
    return a1;
  }

  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v5 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceInitiatedPairingService.State(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 24)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for DeviceInitiatedPairingService.State( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)__n128 result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(_DWORD *)__n128 result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2 + 1;
    }
  }

  return result;
}

uint64_t sub_100020054(uint64_t *a1)
{
  uint64_t v1 = *a1;
  return (v1 + 1);
}

void *sub_10002006C(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[1] = 0LL;
    result[2] = 0LL;
  }

  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }

  *__n128 result = v2;
  return result;
}

ValueMetadata *type metadata accessor for DeviceInitiatedPairingService.State()
{
  return &type metadata for DeviceInitiatedPairingService.State;
}

uint64_t sub_10002009C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000200C0()
{
  return sub_10001E6C0(*(void (**)(char *))(v0 + 16));
}

unint64_t sub_1000200C8(unint64_t result, uint64_t a2, uint64_t a3)
{
  if (result >= 2)
  {
    swift_bridgeObjectRetain(result);
    swift_bridgeObjectRetain(a2);
    return swift_retain(a3);
  }

  return result;
}

uint64_t sub_100020104(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_100020114(uint64_t a1)
{
  return sub_10001EF68(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_10002011C()
{
  unint64_t result = qword_100082220;
  if (!qword_100082220)
  {
    uint64_t v1 = type metadata accessor for UUID(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_100082220);
  }

  return result;
}

uint64_t sub_10002015C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100020184(uint64_t a1)
{
  return sub_10001E8F0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_10002018C(unint64_t result, uint64_t a2, uint64_t a3)
{
  if (result >= 2)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a2);
    return swift_release(a3);
  }

  return result;
}

uint64_t destroy for DeviceInitiatedPairingService.State.BrowsingForPairableHostsInfo(void *a1)
{
  return swift_release(a1[2]);
}

void _s20remotepairingdeviced29DeviceInitiatedPairingServiceC5StateO28BrowsingForPairableHostsInfoVwCP_0( uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v3);
  sub_10001DE00();
  sub_100010000();
  sub_100020484();
}

uint64_t *assignWithCopy for DeviceInitiatedPairingService.State.BrowsingForPairableHostsInfo( uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[2];
  uint64_t v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

void *assignWithTake for DeviceInitiatedPairingService.State.BrowsingForPairableHostsInfo( void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a1[2];
  a1[2] = *(void *)(a2 + 16);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceInitiatedPairingService.State.BrowsingForPairableHostsInfo( uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceInitiatedPairingService.State.BrowsingForPairableHostsInfo( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DeviceInitiatedPairingService.State.BrowsingForPairableHostsInfo()
{
  return &type metadata for DeviceInitiatedPairingService.State.BrowsingForPairableHostsInfo;
}

  ;
}

uint64_t sub_1000203B0()
{
  return v0;
}

uint64_t sub_1000203C0()
{
  void *v1 = v0;
  return swift_storeEnumTagMultiPayload(v1, v2, 1LL);
}

  ;
}

  ;
}

uint64_t sub_100020404(uint64_t a1)
{
  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_100020414()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 136))(v1, v0);
}

uint64_t sub_100020424()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10002042C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100020434()
{
  return swift_retain(v0);
}

uint64_t sub_10002043C(uint64_t a1)
{
  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_10002044C()
{
  return swift_release(v0);
}

uint64_t sub_100020454()
{
  return swift_retain(v0);
}

uint64_t sub_10002045C()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100020464()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t sub_100020470()
{
  return swift_release(v0);
}

uint64_t sub_100020478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001D930(a1, 1LL, 1LL, a4);
}

  ;
}

uint64_t sub_100020490()
{
  return swift_release(v0);
}

uint64_t sub_100020498()
{
  return type metadata accessor for DiscoveredBonjourAdvert(0LL);
}

uint64_t sub_1000204A0(uint64_t a1)
{
  return sub_1000204B8(a1, &qword_100081700);
}

uint64_t sub_1000204AC(uint64_t a1)
{
  return sub_1000204B8(a1, &qword_100081708);
}

uint64_t sub_1000204B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for AtomicCounter(0LL);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  uint64_t result = AtomicCounter.init()();
  *a2 = result;
  return result;
}

void sub_1000204F4()
{
  uint64_t v1 = sub_100026C7C();
  sub_100012280();
  __chkstk_darwin(v2, v3);
  sub_10000FFCC();
  uint64_t v6 = v5 - v4;
  sub_100026EC8(v0);
  uint64_t v7 = (char *)sub_100020560 + 4 * asc_100062BA0[swift_getEnumCaseMultiPayload(v6, v1)];
  __asm { BR              X10 }

uint64_t sub_100020560()
{
  uint64_t v1 = (int *)sub_10000FD7C(&qword_100081928);
  swift_release(*(void *)(v0 + v1[12]));
  swift_release(*(void *)(v0 + v1[16]));
  sub_100026D40(v0 + v1[20]);
  uint64_t v2 = sub_100020498();
  sub_100026C68(v2);
  return 1LL;
}

void sub_1000205B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100020498();
  __chkstk_darwin(v2, v3);
  sub_100026C8C();
  uint64_t v4 = sub_100026C7C();
  sub_100012280();
  __chkstk_darwin(v5, v6);
  sub_10000FFCC();
  uint64_t v9 = v8 - v7;
  sub_100026938(v1, v8 - v7);
  unint64_t v10 = (char *)sub_100020668 + 4 * byte_100062BA5[swift_getEnumCaseMultiPayload(v9, v4)];
  __asm { BR              X10 }

uint64_t sub_100020668()
{
  *(void *)(v2 - 96) = v3 + 16;
  *(void *)(v2 - 88) = 0x8000000100067A00LL;
  uint64_t v4 = sub_10001DCE0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  sub_100012404();
  ((void (*)(void))DiscoveredBonjourAdvert.identifier.getter)();
  sub_100026A28(&qword_1000819D8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v7);
  sub_100026D68(v10);
  sub_10001DDB4();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0, v4);
  sub_100026EA4();
  uint64_t v8 = *(void *)(v2 - 96);
  sub_100026E28(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  return v8;
}

void sub_1000208DC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DiscoveredPairableHost.State(0LL);
  uint64_t v5 = __chkstk_darwin(v3, v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  unint64_t v11 = (char *)&v29 - v10;
  os_log_type_t v12 = static os_log_type_t.default.getter(v9);
  uint64_t v13 = (os_log_s *)qword_1000845F0;
  sub_100026938(a1, (uint64_t)v11);
  os_log_type_t v14 = v12;
  if (os_log_type_enabled(v13, v12))
  {
    swift_retain_n(v1, 2LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v29 = swift_slowAlloc(96LL, -1LL);
    uint64_t v33 = v29;
    *(_DWORD *)uint64_t v15 = 136446722;
    uint64_t v17 = *(void *)(v1 + 16);
    uint64_t v16 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain(v16);
    sub_100045370(v17, v16, &v33);
    uint64_t v31 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v15 + 12) = 2082;
    sub_100026938((uint64_t)v11, (uint64_t)v7);
    uint64_t v19 = String.init<A>(describing:)(v7, v3);
    uint64_t v21 = v20;
    sub_100045370(v19, v20, &v33);
    uint64_t v31 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease(v21);
    sub_1000264CC((uint64_t)v11);
    *(_WORD *)(v15 + 22) = 2082;
    uint64_t v23 = v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
    swift_beginAccess(v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state, &v31, 0LL, 0LL);
    sub_100026938(v23, (uint64_t)v7);
    uint64_t v24 = String.init<A>(describing:)(v7, v3);
    uint64_t v26 = v25;
    sub_100045370(v24, v25, &v33);
    uint64_t v30 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v15 + 24, v15 + 32);
    swift_release_n(v1, 2LL);
    swift_bridgeObjectRelease(v26);
    _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "%{public}s: State changed from %{public}s -> %{public}s",  (uint8_t *)v15,  0x20u);
    uint64_t v28 = v29;
    swift_arrayDestroy(v29, 3LL);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
    sub_1000264CC((uint64_t)v11);
  }

  sub_100024A30();
}

uint64_t sub_100020B70(uint64_t a1)
{
  uint64_t v6 = v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  sub_10000FF98(v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state, (uint64_t)v9);
  sub_100026938(v6, v2);
  swift_beginAccess(v6, v8, 33LL, 0LL);
  sub_100026BAC(a1, v6);
  swift_endAccess(v8);
  sub_1000208DC(v2);
  sub_1000264CC(a1);
  return sub_1000264CC(v2);
}

void sub_100020C18()
{
  uint64_t v1 = *(uint64_t *)((char *)v0
                  + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost____lazy_storage___listener);
  if (!v1)
  {
    uint64_t v2 = sub_100020C68((uint64_t)v0, *v0);
    sub_100026DA0(v2);
    sub_100010008();
    uint64_t v1 = 0LL;
  }

  swift_retain(v1);
  sub_100020484();
}

uint64_t sub_100020C68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SystemXPCListenerConnection(0LL);
  uint64_t v5 = static SystemXPCConnection.anonymousListenerConnection(targetQueue:)(0LL);
  uint64_t v6 = swift_dynamicCastClassUnconditional(v5, v4, 0LL, 0LL, 0LL);
  dispatch thunk of XPCConnection.setTargetQueue(_:)(*(void *)(a1
                                                               + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__queue));
  uint64_t v7 = swift_allocObject(&unk_100077160, 24LL, 7LL);
  swift_weakInit(v7 + 16, a1);
  uint64_t v8 = swift_allocObject(&unk_100077228, 32LL, 7LL);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = v7;
  *(void *)(v8 + 24) = a2;
  swift_retain(v7);
  dispatch thunk of SystemXPCListenerConnection.setPeerConnectionHandler(_:)(sub_100026B0C, v8);
  swift_release(v7);
  uint64_t v9 = swift_release(v8);
  dispatch thunk of XPCConnection.activate()(v9);
  return v6;
}

uint64_t sub_100020D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000FD7C(&qword_100080F90);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (uint64_t *)((char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  a2 += 16LL;
  swift_beginAccess(a2, v47, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v11 = result;
    sub_100026B48(a1, (uint64_t)v9, &qword_100080F90);
    if (swift_getEnumCaseMultiPayload(v9, v6) == 1)
    {
      sub_100026B84((uint64_t)v9, &qword_100080F90);
      os_log_type_t v13 = static os_log_type_t.error.getter(v12);
      os_log_type_t v14 = (os_log_s *)qword_1000845F0;
      os_log_type_t v15 = v13;
      if (os_log_type_enabled((os_log_t)qword_1000845F0, v13))
      {
        swift_retain(v11);
        uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v17 = swift_slowAlloc(32LL, -1LL);
        uint64_t v44 = v17;
        *(_DWORD *)uint64_t v16 = 136446210;
        uint64_t v18 = *(void *)(v11 + 16);
        uint64_t v19 = *(void *)(v11 + 24);
        swift_bridgeObjectRetain(v19);
        sub_100045370(v18, v19, &v44);
        uint64_t v46 = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v16 + 4, v16 + 12);
        swift_release(v11);
        swift_bridgeObjectRelease(v19);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s: Received error from host listener", v16, 0xCu);
        swift_arrayDestroy(v17, 1LL);
        swift_slowDealloc(v17, -1LL, -1LL);
        swift_slowDealloc(v16, -1LL, -1LL);
      }

      return swift_release(v11);
    }

    else
    {
      uint64_t v21 = *v9;
      uint64_t v22 = type metadata accessor for SystemXPCPeerConnection(0LL);
      uint64_t v23 = swift_dynamicCastClassUnconditional(v21, v22, 0LL, 0LL, 0LL);
      swift_retain(v21);
      dispatch thunk of XPCConnection.withUnsafeUnderlyingConnection<A>(_:)( &v44,  sub_100021210,  0LL,  &type metadata for Int32);
      int v24 = v44;
      swift_beginAccess(v11 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__peers, &v44, 33LL, 0LL);
      swift_retain(v21);
      sub_10005261C();
      swift_endAccess(&v44);
      swift_release(v46);
      uint64_t v44 = 0LL;
      unint64_t v45 = 0xE000000000000000LL;
      swift_retain(v21);
      _StringGuts.grow(_:)(39LL);
      swift_bridgeObjectRelease(v45);
      uint64_t v44 = 0xD000000000000018LL;
      unint64_t v45 = 0x8000000100067B60LL;
      v25._countAndFlagsBits = _typeName(_:qualified:)(a3, 0LL);
      object = v25._object;
      String.append(_:)(v25);
      swift_bridgeObjectRelease(object);
      v27._countAndFlagsBits = 46LL;
      v27._object = (void *)0xE100000000000000LL;
      String.append(_:)(v27);
      uint64_t v28 = *(void *)(v11 + 16);
      uint64_t v29 = *(void **)(v11 + 24);
      swift_bridgeObjectRetain(v29);
      v30._countAndFlagsBits = v28;
      v30._object = v29;
      String.append(_:)(v30);
      swift_bridgeObjectRelease(v29);
      v31._countAndFlagsBits = 0x2E746E65696C632ELL;
      v31._object = (void *)0xE800000000000000LL;
      String.append(_:)(v31);
      LODWORD(v46) = v24;
      v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
      uint64_t v33 = v32._object;
      String.append(_:)(v32);
      swift_bridgeObjectRelease(v33);
      unint64_t v34 = v45;
      uint64_t v35 = String.utf8CString.getter(v44, v45);
      swift_bridgeObjectRelease(v34);
      uint64_t v36 = os_transaction_create(v35 + 32);
      swift_release(v35);
      swift_beginAccess( v11 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__transactions,  &v44,  33LL,  0LL);
      if (v36)
      {
        sub_1000556B8();
        swift_release(v21);
      }

      else
      {
        uint64_t v37 = sub_100055060(v23);
        swift_release(v21);
        swift_unknownObjectRelease(v37);
      }

      swift_endAccess(&v44);
      uint64_t v38 = *(void **)(v11 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__queue);
      id v39 = v38;
      dispatch thunk of XPCConnection.setTargetQueue(_:)(v38);

      uint64_t v40 = swift_allocObject(&unk_100077160, 24LL, 7LL);
      swift_weakInit(v40 + 16, v11);
      uint64_t v41 = swift_allocObject(&unk_100077250, 24LL, 7LL);
      swift_weakInit(v41 + 16, v23);
      uint64_t v42 = swift_allocObject(&unk_100077278, 32LL, 7LL);
      *(void *)(v42 + swift_weakDestroy(v0 + 16) = v40;
      *(void *)(v42 + 24) = v41;
      swift_retain(v40);
      swift_retain(v41);
      dispatch thunk of SystemXPCPeerConnection.setEventHandler(_:)(sub_100026B40, v42);
      swift_release(v40);
      swift_release(v41);
      uint64_t v43 = swift_release(v42);
      dispatch thunk of XPCConnection.activate()(v43);
      swift_release(v11);
      return swift_release_n(v21, 2LL);
    }
  }

  return result;
}

uint64_t sub_100021210@<X0>(_xpc_connection_s *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = xpc_connection_get_pid(a1);
  *a2 = result;
  return result;
}

void sub_10002123C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for XPCDictionary(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v42[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_10000FD7C(&qword_100081A90);
  __chkstk_darwin(v11, v12);
  os_log_type_t v14 = (char *)&v42[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v44, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a2);
  if (!Strong) {
    return;
  }
  uint64_t v16 = Strong;
  uint64_t v17 = a3 + 16;
  swift_beginAccess(v17, v43, 0LL, 0LL);
  uint64_t v18 = swift_weakLoadStrong(v17);
  if (!v18)
  {
    uint64_t v38 = v16;
LABEL_8:
    swift_release(v38);
    return;
  }

  uint64_t v19 = v18;
  sub_100026B48(a1, (uint64_t)v14, &qword_100081A90);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14, v11);
  if ((_DWORD)EnumCaseMultiPayload != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v14, v6);
    sub_10002161C();
    uint64_t v40 = v39;
    v42[0] = v19;
    dispatch thunk of CodableDispatcher.dispatch(encodedData:context:completion:)(v10, v42, 0LL, 0LL);
    swift_release(v16);
    swift_release(v40);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    uint64_t v38 = v19;
    goto LABEL_8;
  }

  dispatch thunk of XPCConnection.cancel()(EnumCaseMultiPayload);
  swift_beginAccess(v16 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__peers, v42, 33LL, 0LL);
  uint64_t v21 = sub_1000542A4(v19);
  swift_endAccess(v42);
  swift_release(v21);
  swift_beginAccess(v16 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__transactions, v42, 33LL, 0LL);
  uint64_t v22 = sub_100055060(v19);
  swift_endAccess(v42);
  swift_unknownObjectRelease(v22);
  sub_10002507C();
  os_log_type_t v24 = static os_log_type_t.default.getter(v23);
  Swift::String v25 = (os_log_s *)qword_1000845F0;
  os_log_type_t v26 = v24;
  if (os_log_type_enabled((os_log_t)qword_1000845F0, v24))
  {
    swift_retain_n(v16, 2LL);
    swift_retain_n(v19, 2LL);
    uint64_t v27 = swift_slowAlloc(22LL, -1LL);
    uint64_t v28 = swift_slowAlloc(64LL, -1LL);
    v42[0] = v28;
    *(_DWORD *)uint64_t v27 = 136446466;
    uint64_t v29 = *(void *)(v16 + 16);
    uint64_t v30 = *(void *)(v16 + 24);
    swift_bridgeObjectRetain(v30);
    sub_100045370(v29, v30, v42);
    uint64_t v41 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v27 + 4, v27 + 12);
    swift_release_n(v16, 2LL);
    swift_bridgeObjectRelease(v30);
    *(_WORD *)(v27 + 12) = 2080;
    uint64_t v41 = v19;
    uint64_t v32 = type metadata accessor for SystemXPCPeerConnection(0LL);
    swift_retain(v19);
    uint64_t v33 = String.init<A>(describing:)(&v41, v32);
    uint64_t v35 = v34;
    sub_100045370(v33, v34, v42);
    uint64_t v41 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v27 + 14, v27 + 22);
    swift_release_n(v19, 2LL);
    swift_bridgeObjectRelease(v35);
    _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "%{public}s: Releasing usage assertions owned by disconnected peer %s",  (uint8_t *)v27,  0x16u);
    swift_arrayDestroy(v28, 2LL);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_release(v16);
    uint64_t v37 = v19;
  }

  else
  {
    swift_release(v19);
    uint64_t v37 = v16;
  }

  swift_release(v37);
  sub_100026B84((uint64_t)v14, &qword_100081A90);
}

void sub_10002161C()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost____lazy_storage___dispatcher);
  if (!v1)
  {
    uint64_t v2 = sub_100021668(v0);
    sub_100026DA0(v2);
    sub_100010008();
    uint64_t v1 = 0LL;
  }

  swift_retain(v1);
  sub_100020484();
}

uint64_t sub_100021668(uint64_t a1)
{
  uint64_t v41 = a1;
  uint64_t v2 = type metadata accessor for XPCReplyProviding(0LL);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static XPCReplyProviding.passthrough.getter(v4);
  uint64_t v7 = sub_10000FD7C(&qword_100081A28);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t v8 = XPCMessageDispatcher.init(xpcReplyProviding:inboundObserver:outboundObserver:)(v6, 0LL, 0LL, 0LL, 0LL);
  uint64_t v9 = type metadata accessor for RemotePairingErrorCodingWrapper(0LL);
  uint64_t v10 = swift_allocObject(&unk_100077160, 24LL, 7LL);
  swift_weakInit(v10 + 16, a1);
  uint64_t v11 = type metadata accessor for AttemptPairingPinCommand(0LL);
  uint64_t v12 = type metadata accessor for EmptyResponse(0LL);
  uint64_t v40 = v12;
  sub_100026A28(&qword_100081A30, (uint64_t (*)(uint64_t))&type metadata accessor for AttemptPairingPinCommand);
  uint64_t v14 = v13;
  sub_100026A28(&qword_100081A38, (uint64_t (*)(uint64_t))&type metadata accessor for AttemptPairingPinCommand);
  uint64_t v16 = v15;
  sub_100026A28(&qword_100081A40, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyResponse);
  uint64_t v18 = v17;
  sub_100026A28(&qword_100081A48, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyResponse);
  uint64_t v20 = v19;
  sub_100026A28( &qword_100081A50,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingErrorCodingWrapper);
  uint64_t v22 = v21;
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)( v9,  sub_100026AB4,  v10,  v11,  v12,  v9,  v14,  v16,  v18,  v20,  v21);
  swift_release(v10);
  uint64_t v23 = swift_allocObject(&unk_100077160, 24LL, 7LL);
  uint64_t v24 = v41;
  swift_weakInit(v23 + 16, v41);
  uint64_t v25 = type metadata accessor for CancelPairingCommand(0LL);
  sub_100026A28(&qword_100081A58, (uint64_t (*)(uint64_t))&type metadata accessor for CancelPairingCommand);
  uint64_t v27 = v26;
  sub_100026A28(&qword_100081A60, (uint64_t (*)(uint64_t))&type metadata accessor for CancelPairingCommand);
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)( v9,  sub_100026ACC,  v23,  v25,  v40,  v9,  v27,  v28,  v18,  v20,  v22);
  swift_release(v23);
  uint64_t v29 = swift_allocObject(&unk_100077160, 24LL, 7LL);
  swift_weakInit(v29 + 16, v24);
  uint64_t v30 = type metadata accessor for InitiatePairingWithHostCommand(0LL);
  uint64_t v31 = type metadata accessor for PairableHostInfo(0LL);
  sub_100026A28( &qword_100081A68,  (uint64_t (*)(uint64_t))&type metadata accessor for InitiatePairingWithHostCommand);
  uint64_t v33 = v32;
  sub_100026A28( &qword_100081A70,  (uint64_t (*)(uint64_t))&type metadata accessor for InitiatePairingWithHostCommand);
  uint64_t v35 = v34;
  sub_100026A28(&qword_100081A78, (uint64_t (*)(uint64_t))&type metadata accessor for PairableHostInfo);
  uint64_t v37 = v36;
  sub_100026A28( (unint64_t *)&unk_100081A80,  (uint64_t (*)(uint64_t))&type metadata accessor for PairableHostInfo);
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)( v9,  sub_100026AE4,  v29,  v30,  v31,  v9,  v33,  v35,  v37,  v38,  v22);
  swift_release(v29);
  return v8;
}

uint64_t sub_100021A00(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v12, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    uint64_t v7 = Strong;
    uint64_t v8 = AttemptPairingPinCommand.pinAttempt.getter();
    uint64_t v10 = v9;
    sub_100022658(v8, v9, v4);
    if (v3)
    {
      swift_release(v7);
      return swift_bridgeObjectRelease(v10);
    }

    swift_release(v7);
    uint64_t Strong = swift_bridgeObjectRelease(v10);
  }

  return EmptyResponse.init()(Strong);
}

uint64_t sub_100021AB4(uint64_t a1, os_log_s **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v8, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v5);
  if (!result) {
    return EmptyResponse.init()(result);
  }
  uint64_t v7 = result;
  sub_100022B54(v4);
  uint64_t result = swift_release(v7);
  if (!v3) {
    return EmptyResponse.init()(result);
  }
  return result;
}

uint64_t sub_100021B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5 + 16;
  swift_beginAccess(a5 + 16, v8, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v5);
  if (result)
  {
    uint64_t v7 = result;
    sub_100023260();
    return swift_release(v7);
  }

  return result;
}

void *sub_100021BB4()
{
  uint64_t v32 = v1;
  uint64_t v33 = v2;
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v30 = v8;
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
    && _CocoaArrayWrapper.endIndex.getter(&_swiftEmptyArrayStorage))
  {
    sub_100047A90((unint64_t)&_swiftEmptyArrayStorage);
  }

  else
  {
    uint64_t v9 = &_swiftEmptySetSingleton;
  }

  *(void *)((char *)v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__peers) = v9;
  uint64_t v10 = OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__transactions;
  uint64_t v11 = sub_100026D24();
  uint64_t v12 = sub_10000FD7C(&qword_100081A98);
  sub_100026A28(&qword_1000819F8, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
  *(void *)((char *)v3 + v1sub_10001D498(v0, 0) = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, v11, v12, v13);
  *(void *)((char *)v3 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost____lazy_storage___listener) = 0LL;
  *(void *)((char *)v3 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost____lazy_storage___dispatcher) = 0LL;
  strcpy((char *)v31, "pairablehost-");
  HIWORD(v31[0]) = -4864;
  if (qword_100080978 != -1) {
    swift_once(&qword_100080978, sub_1000204AC);
  }
  ((void (*)(void))dispatch thunk of AtomicCounter.next())();
  v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  sub_100026D68(v34);
  sub_10001DD38();
  uint64_t v14 = *((void *)&v31[0] + 1);
  v3[2] = *(void *)&v31[0];
  v3[3] = v14;
  *(void *)((char *)v3 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__queue) = v5;
  uint64_t v15 = (uint64_t)v3 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  uint64_t v16 = sub_100020498();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL))(v15, v7, v16);
  uint64_t v17 = sub_100026C7C();
  sub_100026F10(v15, v17);
  id v18 = v5;
  uint64_t v19 = ((uint64_t (*)(void))DiscoveredBonjourAdvert.userAssignedName.getter)();
  uint64_t v21 = 0x6E776F6E6B6E55LL;
  if (v20) {
    uint64_t v21 = v19;
  }
  unint64_t v22 = 0xE700000000000000LL;
  if (v20) {
    unint64_t v22 = v20;
  }
  v3[4] = v21;
  v3[5] = v22;
  v3[6] = ((uint64_t (*)(void))DiscoveredBonjourAdvert.model.getter)();
  v3[7] = v23;
  uint64_t v24 = sub_10001DCE0();
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24, v26);
  sub_1000203EC();
  ((void (*)(void))DiscoveredBonjourAdvert.identifier.getter)();

  uint64_t v27 = sub_100026CD4();
  v28(v27);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))( (uint64_t)v3 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__advertID,  v10,  v24);
  sub_100026BF0(v30, (uint64_t)v3 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__pairingManager);
  return v3;
}

void sub_100021E3C()
{
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for DiscoveredPairableHost.State(0LL);
  sub_100012280();
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10, v13);
  sub_100026D00();
  sub_10000FD7C(&qword_100081A20);
  sub_100012280();
  __chkstk_darwin(v14, v15);
  sub_1000203EC();
  uint64_t v16 = sub_100020498();
  sub_10001241C();
  __chkstk_darwin(v17, v18);
  sub_10001DF18();
  sub_100026B48(v6, v3, &qword_100081A20);
  if (sub_10001D9C8(v3, 1LL, v16) != 1)
  {
    sub_100026C84(v2, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
    uint64_t v21 = v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
    sub_10000FF98(v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state, (uint64_t)&v24);
    sub_100026EC8(v21);
    unint64_t v22 = (char *)&loc_100021F84 + 4 * byte_100062BAA[swift_getEnumCaseMultiPayload(v0, v7)];
    __asm { BR              X10 }
  }

  sub_100026B84(v3, &qword_100081A20);
  uint64_t v19 = sub_100026CD4();
  swift_storeEnumTagMultiPayload(v19, v20, 4LL);
  sub_100020B70((uint64_t)v12);
  sub_10000FF80();
}

void sub_1000220E4()
{
}

uint64_t sub_100022138()
{
  if (qword_100080970 != -1) {
    swift_once(&qword_100080970, sub_1000204A0);
  }
  uint64_t v1 = sub_10000FFDC();
  uint64_t v2 = dispatch thunk of AtomicCounter.next()(v1);
  sub_100012464();
  sub_100020C18();
  uint64_t v3 = SystemXPCListenerConnection.createEndpoint()();
  uint64_t v4 = sub_100012464();
  __chkstk_darwin(v4, v5);
  v8[2] = v0;
  v8[3] = v2;
  uint64_t v6 = type metadata accessor for PairableHostInfo(0LL);
  dispatch thunk of XPCEndpoint.withUnsafeUnderlyingEndpoint<A>(_:)(sub_100026A9C, v8, v6);
  return swift_release(v3);
}

uint64_t sub_100022218@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v31[1] = a4;
  uint64_t v32 = a3;
  v31[0] = a1;
  uint64_t v5 = type metadata accessor for DiscoveredPairableHost.State(0LL);
  uint64_t v7 = __chkstk_darwin(v5, v6);
  uint64_t v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)v31 - v11;
  uint64_t v13 = (uint64_t)a2 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  swift_beginAccess((char *)a2 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state, v33, 0LL, 0LL);
  sub_100026938(v13, (uint64_t)v12);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v5);
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v15 = type metadata accessor for DiscoveredBonjourAdvert(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8LL))(v12, v15);
  }

  else
  {
    sub_1000264CC((uint64_t)v12);
  }

  BOOL v16 = EnumCaseMultiPayload == 3;
  uint64_t v17 = (char *)a2 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__advertID;
  uint64_t v18 = type metadata accessor for UUID(0LL);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, char *))(v22 + 16))(v21, v17);
  uint64_t v24 = a2[4];
  uint64_t v23 = a2[5];
  uint64_t v25 = a2[6];
  uint64_t v26 = a2[7];
  sub_100026938(v13, (uint64_t)v9);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v23);
  sub_1000204F4();
  char v28 = v27;
  sub_1000264CC((uint64_t)v9);
  uint64_t v29 = swift_unknownObjectRetain(v31[0]);
  return PairableHostInfo.init(identifier:name:model:available:paired:monotonicIdentifier:endpoint:)( v21,  v24,  v23,  v25,  v26,  v28 & 1,  v16,  v32,  v29);
}

void sub_1000223F8()
{
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__peers);
  sub_10000FF98(v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__peers, (uint64_t)v29);
  uint64_t v3 = *v2;
  if ((v3 & 0xC000000000000001LL) != 0)
  {
    if (v3 < 0) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v3);
    __CocoaSet.makeIterator()(v4);
    sub_100026D24();
    sub_100026A28( &qword_1000819F8,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
    uint64_t v5 = sub_100026EBC();
    uint64_t v8 = Set.Iterator.init(_cocoa:)(v5, v6, v7);
    uint64_t v3 = v30;
    uint64_t v9 = v31;
    uint64_t v10 = v32;
    int64_t v11 = v33;
    unint64_t v12 = v34;
  }

  else
  {
    uint64_t v9 = v3 + 56;
    uint64_t v10 = ~(-1LL << *(_BYTE *)(v3 + 32));
    sub_10000FFE4();
    unint64_t v12 = v13 & v14;
    swift_bridgeObjectRetain(v3);
    int64_t v11 = 0LL;
  }

  int64_t v15 = (unint64_t)(v10 + 64) >> 6;
  if (v3 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v12)
    {
      uint64_t v16 = (v12 - 1) & v12;
      unint64_t v17 = __clz(__rbit64(v12)) | (v11 << 6);
      int64_t v18 = v11;
      goto LABEL_27;
    }

    int64_t v23 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v23 >= v15) {
      goto LABEL_30;
    }
    unint64_t v24 = *(void *)(v9 + 8 * v23);
    int64_t v18 = v11 + 1;
    if (!v24)
    {
      int64_t v18 = v11 + 2;
      if (v11 + 2 >= v15) {
        goto LABEL_30;
      }
      unint64_t v24 = *(void *)(v9 + 8 * v18);
      if (!v24)
      {
        int64_t v18 = v11 + 3;
        if (v11 + 3 >= v15) {
          goto LABEL_30;
        }
        unint64_t v24 = *(void *)(v9 + 8 * v18);
        if (!v24)
        {
          int64_t v18 = v11 + 4;
          if (v11 + 4 >= v15) {
            goto LABEL_30;
          }
          unint64_t v24 = *(void *)(v9 + 8 * v18);
          if (!v24)
          {
            int64_t v25 = v11 + 5;
            while (v25 < v15)
            {
              unint64_t v24 = *(void *)(v9 + 8 * v25++);
              if (v24)
              {
                int64_t v18 = v25 - 1;
                goto LABEL_26;
              }
            }

LABEL_30:
            sub_10000FE04(v3);
            return;
          }
        }
      }
    }

  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

  __break(1u);
}

void sub_100022658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v84 = type metadata accessor for RemotePairingError(0LL);
  sub_100012280();
  __chkstk_darwin(v9, v10);
  sub_10001E144();
  uint64_t v83 = v11;
  uint64_t v12 = sub_100026F18();
  sub_100012280();
  uint64_t v15 = __chkstk_darwin(v13, v14);
  unint64_t v17 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15, v18);
  sub_100026D00();
  uint64_t v19 = v5 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  sub_10000FF98(v5 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state, (uint64_t)v86);
  sub_100026938(v19, v3);
  uint64_t v20 = sub_100026EBC();
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v20, v21);
  if ((_DWORD)EnumCaseMultiPayload == 2)
  {
    int64_t v23 = (int *)sub_10000FD7C(&qword_100081928);
    uint64_t v24 = *(void *)(v3 + v23[12]);
    uint64_t v25 = *(void *)(v3 + v23[16]);
    swift_release(*(void *)(v3 + v23[20] + 8));
    type metadata accessor for XPCConnection(0LL);
    uint64_t v26 = static XPCConnection.== infix(_:_:)(v25, a3);
    if ((v26 & 1) != 0)
    {
      dispatch thunk of ControlChannelConnection.attempt(pairingPIN:)(a1, a2);
      uint64_t v27 = v24;
    }

    else
    {
      uint64_t v82 = v24;
      os_log_type_t v51 = static os_log_type_t.error.getter(v26);
      unint64_t v52 = (os_log_s *)qword_1000845F0;
      os_log_type_t v53 = v51;
      uint64_t v54 = os_log_type_enabled((os_log_t)qword_1000845F0, v51);
      if ((_DWORD)v54)
      {
        sub_100026C50(v5);
        sub_100026C50(a3);
        sub_100026C50(v25);
        uint64_t v55 = sub_1000122E0(32LL);
        os_log_t v80 = v52;
        uint64_t v56 = v55;
        os_log_t v81 = (os_log_t)sub_1000122E0(96LL);
        os_log_t v87 = v81;
        *(_DWORD *)uint64_t v56 = 136446722;
        uint64_t v57 = *(void *)(v5 + 16);
        uint64_t v58 = *(void *)(v5 + 24);
        swift_bridgeObjectRetain(v58);
        sub_100045370(v57, v58, (uint64_t *)&v87);
        uint64_t v85 = v59;
        sub_100026D48(v59, (uint64_t)v86, v60, v56 + 12);
        sub_100026CA4(v5);
        swift_bridgeObjectRelease(v58);
        *(_WORD *)(v56 + 12) = 2082;
        uint64_t v85 = a3;
        type metadata accessor for SystemXPCPeerConnection(0LL);
        sub_100026CBC();
        uint64_t v61 = sub_100026E98();
        sub_100026CF8(v61, v62);
        uint64_t v85 = v63;
        sub_100026D48(v63, (uint64_t)v86, v64, v56 + 22);
        sub_100026CA4(a3);
        sub_100016D6C();
        *(_WORD *)(v56 + 22) = 2082;
        uint64_t v85 = v25;
        sub_10000FFC4();
        uint64_t v65 = sub_100026E98();
        uint64_t v67 = v66;
        sub_100026CF8(v65, v66);
        uint64_t v85 = v68;
        sub_100026D48(v68, (uint64_t)v86, v69, v56 + 32);
        sub_100026CA4(v25);
        swift_bridgeObjectRelease(v67);
        _os_log_impl( (void *)&_mh_execute_header,  v80,  v53,  "%{public}s: Received PIN challenge from peer %{public}s but pairing was initiated by %{public}s",  (uint8_t *)v56,  0x20u);
        os_log_t v70 = v81;
        swift_arrayDestroy(v81, 3LL);
        sub_10001001C((uint64_t)v70);
        uint64_t v54 = sub_10001001C(v56);
      }

      static RemotePairingError.invalidOperation.getter(v54);
      sub_100026D90((unint64_t *)&unk_1000819E0);
      sub_100026C58(v71, v71);
      sub_100026D90((unint64_t *)&unk_1000813E0);
      uint64_t v72 = sub_100026EFC();
      uint64_t v77 = sub_100026C3C(v72, v73, v74, v75, v76);
      swift_willThrow(v77);
      uint64_t v27 = v82;
    }

    swift_release(v27);
    swift_release(v25);
    uint64_t v78 = type metadata accessor for DiscoveredBonjourAdvert(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v78 - 8) + 8LL))(v3, v78);
  }

  else
  {
    os_log_type_t v28 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    uint64_t v29 = (os_log_s *)qword_1000845F0;
    int v30 = v28;
    uint64_t v31 = os_log_type_enabled((os_log_t)qword_1000845F0, v28);
    if ((_DWORD)v31)
    {
      sub_100026C50(v5);
      uint64_t v32 = sub_1000122E0(22LL);
      uint64_t v82 = sub_1000122E0(64LL);
      os_log_t v87 = (os_log_t)v82;
      *(_DWORD *)uint64_t v32 = 136446466;
      os_log_t v81 = v29;
      LODWORD(v8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = v30;
      sub_100026EB0();
      sub_100026CAC();
      uint64_t v85 = v33;
      sub_100026DC0(v33, v34, v35, v32 + 12);
      sub_100016D6C();
      *(_WORD *)(v32 + 12) = 2082;
      uint64_t v36 = sub_100026CD4();
      sub_100026938(v36, v37);
      uint64_t v38 = String.init<A>(describing:)(v17, v12);
      uint64_t v40 = v39;
      sub_100026CF8(v38, v39);
      uint64_t v85 = v41;
      sub_100026DC0(v41, v42, v43, v32 + 22);
      sub_100026CA4(v5);
      swift_bridgeObjectRelease(v40);
      _os_log_impl( (void *)&_mh_execute_header,  v81,  (os_log_type_t)v80,  "%{public}s: Invalid state to attempt PIN pairing: %{public}s",  (uint8_t *)v32,  0x16u);
      uint64_t v44 = v82;
      swift_arrayDestroy(v82, 2LL);
      sub_10001001C(v44);
      uint64_t v31 = sub_10001001C(v32);
    }

    uint64_t v45 = v83;
    static RemotePairingError.invalidOperation.getter(v31);
    sub_100026D90((unint64_t *)&unk_1000819E0);
    sub_100026C58(v46, v46);
    sub_100026D90((unint64_t *)&unk_1000813E0);
    uint64_t v50 = sub_100026C3C(v45, v48, 0x8000000100067AD0LL, v49, v47);
    swift_willThrow(v50);
    sub_1000264CC(v3);
  }

  sub_100012268();
}

void sub_100022B54(os_log_s *a1)
{
  os_log_t v106 = a1;
  uint64_t v100 = type metadata accessor for ControlChannelConnection.InvalidationReason(0LL);
  uint64_t v102 = *(void *)(v100 - 8);
  sub_100026C0C();
  __chkstk_darwin(v3, v4);
  sub_10001E144();
  uint64_t v101 = v5;
  uint64_t v6 = sub_100026D5C();
  uint64_t v7 = type metadata accessor for PairingOutcome(v6);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  sub_100016C88();
  uint64_t v110 = (uint64_t *)type metadata accessor for RemotePairingError(0LL);
  sub_100012280();
  __chkstk_darwin(v10, v11);
  sub_10001E144();
  uint64_t v109 = v12;
  uint64_t v13 = sub_100026D5C();
  uint64_t v14 = type metadata accessor for DiscoveredBonjourAdvert(v13);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  sub_10001E144();
  uint64_t v108 = v17;
  uint64_t v18 = sub_100026F18();
  sub_100012280();
  __chkstk_darwin(v19, v20);
  sub_100026D10();
  uint64_t v104 = v21;
  sub_100026ED0();
  __chkstk_darwin(v22, v23);
  uint64_t v25 = (char *)&v94 - v24;
  os_log_t v107 = v1;
  uint64_t v26 = (uint64_t)v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  sub_10000FF98((uint64_t)v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state, (uint64_t)v112);
  sub_100026938(v26, (uint64_t)v25);
  uint64_t v105 = v18;
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v25, v18);
  if ((_DWORD)EnumCaseMultiPayload == 2)
  {
    uint64_t v96 = v2;
    uint64_t v97 = v8;
    uint64_t v95 = v7;
    os_log_type_t v28 = (int *)sub_10000FD7C(&qword_100081928);
    uint64_t v29 = *(void *)&v25[v28[12]];
    uint64_t v30 = *(void *)&v25[v28[16]];
    uint64_t v31 = (uint64_t *)&v25[v28[20]];
    uint64_t v32 = *v31;
    uint64_t v33 = v31[1];
    uint64_t v34 = v108;
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v108, v25, v14);
    os_log_type_t v35 = type metadata accessor for XPCConnection(0LL);
    uint64_t v36 = v30;
    os_log_type_t v37 = v35;
    uint64_t v99 = v36;
    os_log_t v38 = v106;
    uint64_t v39 = static XPCConnection.== infix(_:_:)(v36, v106);
    uint64_t v40 = v15;
    uint64_t v98 = v29;
    if ((v39 & 1) != 0)
    {
      uint64_t v41 = type metadata accessor for POSIXError(0LL);
      uint64_t v110 = &v94;
      uint64_t v42 = *(void *)(v41 - 8);
      __chkstk_darwin(v41, v43);
      sub_10000FFCC();
      uint64_t v109 = v15;
      uint64_t v46 = v45 - v44;
      LODWORD(v113) = 89;
      unint64_t v47 = sub_100040364((uint64_t)&_swiftEmptyArrayStorage);
      sub_100026A28( (unint64_t *)&qword_1000819F0,  (uint64_t (*)(uint64_t))&type metadata accessor for POSIXError);
      uint64_t v49 = _BridgedStoredNSError.init(_:userInfo:)(&v113, v47, v41, v48);
      uint64_t v50 = POSIXError._nsError.getter(v49);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v46, v41);
      uint64_t v51 = v33;
      os_log_type_t v53 = v96;
      uint64_t v52 = v97;
      *uint64_t v96 = v50;
      (*(void (**)(uint64_t *, void, uint64_t))(v52 + 104))( v53,  enum case for PairingOutcome.failure(_:),  v95);
      ((void (*)(uint64_t *))v32)(v53);
      sub_100026DB0();
      uint64_t v54 = v109;
      uint64_t v55 = v104;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v109 + 16))(v104, v34, v14);
      swift_storeEnumTagMultiPayload(v55, v105, 0LL);
      sub_100020B70(v55);
      uint64_t v56 = v101;
      (*(void (**)(uint64_t, void, uint64_t))(v102 + 104))( v101,  enum case for ControlChannelConnection.InvalidationReason.onDemandTaskCompleted(_:),  v100);
      uint64_t v57 = v98;
      dispatch thunk of ControlChannelConnection.invalidate(for:)(v56);
      swift_release(v99);
      swift_release(v57);
      swift_release(v51);
      sub_100026DB0();
      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v34, v14);
    }

    else
    {
      uint64_t v104 = v33;
      uint64_t v105 = v14;
      os_log_type_t v73 = static os_log_type_t.error.getter(v39);
      uint64_t v74 = (os_log_s *)qword_1000845F0;
      if (sub_100026D80(v73))
      {
        os_log_t v75 = v107;
        sub_100026C50((uint64_t)v107);
        sub_100026C50((uint64_t)v38);
        uint64_t v76 = v99;
        sub_100026C50(v99);
        uint64_t v32 = sub_1000122E0(32LL);
        uint64_t v103 = sub_1000122E0(96LL);
        uint64_t v113 = v103;
        *(_DWORD *)uint64_t v32 = 136446722;
        sub_100026EB0();
        sub_100026CAC();
        uint64_t v111 = v77;
        sub_100026D2C(v77, (uint64_t)v112, v78, v32 + 12);
        sub_100026CA4((uint64_t)v75);
        sub_100016D6C();
        *(_WORD *)(v32 + 12) = 2082;
        uint64_t v111 = (uint64_t)v38;
        type metadata accessor for SystemXPCPeerConnection(0LL);
        sub_100026CBC();
        os_log_t v107 = v74;
        uint64_t v79 = sub_100026E1C();
        uint64_t v81 = v80;
        sub_100026CF8(v79, v80);
        uint64_t v111 = v82;
        sub_100026D2C(v82, (uint64_t)v112, v83, v32 + 22);
        sub_100026CA4((uint64_t)v38);
        swift_bridgeObjectRelease(v81);
        *(_WORD *)(v32 + 22) = 2082;
        uint64_t v111 = v76;
        swift_retain(v76);
        uint64_t v84 = sub_100026E1C();
        sub_100026CF8(v84, v85);
        uint64_t v111 = v86;
        sub_100026D2C(v86, (uint64_t)v112, v87, v32 + 32);
        sub_100026CA4(v76);
        sub_100016D6C();
        _os_log_impl( (void *)&_mh_execute_header,  v107,  v37,  "%{public}s: Received PIN challenge from peer %{public}s but pairing was initiated by %{public}s",  (uint8_t *)v32,  0x20u);
        uint64_t v88 = v103;
        swift_arrayDestroy(v103, 3LL);
        sub_10001001C(v88);
        sub_10001001C(v32);
      }

      sub_100026E04();
      sub_100026DD0((unint64_t *)&unk_1000819E0);
      sub_100026C58(v89, v89);
      sub_100026DD0((unint64_t *)&unk_1000813E0);
      uint64_t v93 = sub_100026C3C(v32, v91, 0x8000000100067AD0LL, v92, v90);
      swift_willThrow(v93);
      swift_release(v99);
      swift_release(v98);
      swift_release(v104);
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v108, v105);
    }
  }

  else
  {
    os_log_type_t v58 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    uint64_t v59 = (os_log_s *)qword_1000845F0;
    if (sub_100026D80(v58))
    {
      os_log_t v60 = v107;
      sub_100026C50((uint64_t)v107);
      uint64_t v61 = sub_1000122E0(22LL);
      uint64_t v108 = sub_1000122E0(64LL);
      uint64_t v113 = v108;
      *(_DWORD *)uint64_t v61 = 136446466;
      swift_bridgeObjectRetain(*((void *)v60 + 3));
      sub_100026CAC();
      uint64_t v111 = v62;
      os_log_t v106 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v61 + 4, v61 + 12);
      sub_100016D6C();
      *(_WORD *)(v61 + 12) = 2082;
      uint64_t v63 = v104;
      sub_100026938(v26, v104);
      uint64_t v64 = String.init<A>(describing:)(v63, v105);
      uint64_t v7 = v65;
      sub_100026CF8(v64, v65);
      uint64_t v111 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v61 + 14, v61 + 22);
      sub_100026CA4((uint64_t)v60);
      swift_bridgeObjectRelease(v7);
      _os_log_impl( (void *)&_mh_execute_header,  v106,  (os_log_type_t)v1,  "%{public}s: Invalid state to handle pairing cancellation: %{public}s",  (uint8_t *)v61,  0x16u);
      uint64_t v67 = v108;
      swift_arrayDestroy(v108, 2LL);
      sub_10001001C(v67);
      sub_10001001C(v61);
    }

    sub_100026E04();
    sub_100026DD0((unint64_t *)&unk_1000819E0);
    sub_100026C58(v68, v68);
    sub_100026DD0((unint64_t *)&unk_1000813E0);
    uint64_t v72 = sub_100026C3C(v7, v70, 0x8000000100067AD0LL, v71, v69);
    swift_willThrow(v72);
    sub_1000264CC((uint64_t)v25);
  }

  sub_100012268();
}

void sub_100023260()
{
  uint64_t v1 = v0;
  uint64_t v47 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  v44[7] = sub_10000FD7C(&qword_100081A18);
  sub_100012280();
  __chkstk_darwin(v7, v8);
  sub_10001E144();
  v44[8] = v9;
  uint64_t v10 = sub_100020498();
  v44[6] = *(void *)(v10 - 8);
  sub_100026C0C();
  __chkstk_darwin(v11, v12);
  sub_10001E144();
  v44[2] = v13;
  uint64_t v14 = sub_100026D5C();
  void v44[5] = type metadata accessor for RemotePairingError(v14);
  sub_100012280();
  __chkstk_darwin(v15, v16);
  sub_10001E144();
  v44[4] = v17;
  uint64_t v18 = sub_100026C7C();
  sub_100012280();
  __chkstk_darwin(v19, v20);
  sub_100026D10();
  v44[3] = v21;
  sub_100026ED0();
  uint64_t v24 = __chkstk_darwin(v22, v23);
  uint64_t v26 = (char *)v44 - v25;
  os_log_type_t v27 = static os_log_type_t.default.getter(v24);
  os_log_type_t v28 = (os_log_s *)qword_1000845F0;
  os_log_type_t v29 = v27;
  BOOL v30 = os_log_type_enabled((os_log_t)qword_1000845F0, v27);
  uint64_t v45 = v18;
  uint64_t v46 = v4;
  if (v30)
  {
    sub_100026C50(v1);
    sub_100026C50(v6);
    uint64_t v31 = sub_1000122E0(22LL);
    uint64_t v32 = sub_1000122E0(64LL);
    v50[0] = v32;
    *(_DWORD *)uint64_t v31 = 136446466;
    v44[1] = v10;
    uint64_t v33 = *(void *)(v1 + 16);
    uint64_t v34 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain(v34);
    sub_100045370(v33, v34, v50);
    uint64_t v48 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v31 + 4, v31 + 12);
    sub_100026CA4(v1);
    sub_10001DDB4();
    *(_WORD *)(v31 + 12) = 2082;
    uint64_t v48 = v6;
    uint64_t v36 = sub_100026D24();
    sub_100026D98();
    uint64_t v37 = String.init<A>(describing:)(&v48, v36);
    uint64_t v39 = v38;
    sub_100045370(v37, v38, v50);
    uint64_t v48 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v31 + 14, v31 + 22);
    sub_100026CA4(v6);
    swift_bridgeObjectRelease(v39);
    sub_100026D38( (void *)&_mh_execute_header,  v28,  v29,  "%{public}s: Received request to wirelessly pair from peer: %{public}s",  (uint8_t *)v31);
    sub_100026E70(v32);
    sub_10001001C(v32);
    uint64_t v41 = v31;
    uint64_t v18 = v45;
    sub_10001001C(v41);
  }

  uint64_t v42 = v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  sub_10000FF98(v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state, (uint64_t)v50);
  sub_100026938(v42, (uint64_t)v26);
  uint64_t v43 = (char *)sub_1000234E4 + 4 * byte_100062BAF[swift_getEnumCaseMultiPayload(v26, v18)];
  __asm { BR              X10 }

void sub_1000234E4()
{
  uint64_t v6 = (int *)sub_10000FD7C(&qword_100081928);
  swift_release(*(void *)(v3 + v6[12]));
  swift_release(*(void *)(v3 + v6[16]));
  sub_100026D40(v3 + v6[20]);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 176) + 8LL))(v3, v0);
  static RemotePairingError.pairingFailed.getter(v7);
  sub_100026A28( (unint64_t *)&unk_1000819E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
  uint64_t v8 = *(void *)(v5 - 184);
  uint64_t v10 = sub_100016B08(v8, v9);
  sub_100026A28( (unint64_t *)&unk_1000813E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
  uint64_t v11 = sub_100026EFC();
  uint64_t v15 = Error<>.init(_:_:)(v11, v12, v13, v8, v14);
  uint64_t v16 = swift_willThrow(v15);
  os_log_type_t v17 = static os_log_type_t.error.getter(v16);
  uint64_t v18 = (os_log_s *)qword_1000845F0;
  os_log_type_t v19 = v17;
  if (os_log_type_enabled((os_log_t)qword_1000845F0, v17))
  {
    sub_100026C50(v2);
    uint64_t v20 = sub_1000122E0(22LL);
    uint64_t v21 = sub_1000122E0(64LL);
    *(void *)(v5 - 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = v21;
    *(_DWORD *)uint64_t v20 = 136446466;
    uint64_t v22 = v2;
    uint64_t v23 = *(void *)(v2 + 16);
    uint64_t v24 = v4;
    uint64_t v25 = *(void *)(v22 + 24);
    swift_bridgeObjectRetain(v25);
    sub_100045370(v23, v25, (uint64_t *)(v5 - 120));
    *(void *)(v5 - 128) = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 128, v5 - 120, v20 + 4, v20 + 12);
    sub_10001DDA4();
    *(_WORD *)(v20 + 12) = 2082;
    uint64_t v27 = *(void *)(v5 - 200);
    sub_100026938(v24, v27);
    uint64_t v28 = String.init<A>(describing:)(v27, *(void *)(v5 - 152));
    sub_100045370(v28, v29, (uint64_t *)(v5 - 120));
    *(void *)(v5 - 128) = v30;
    uint64_t v1 = *(void (**)(uint64_t *))(v5 - 144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 128, v5 - 120, v20 + 14, v20 + 22);
    sub_100026CA4(v22);
    sub_10001DDA4();
    sub_100026D38( (void *)&_mh_execute_header,  v18,  v19,  "%{public}s: Invalid state to handle pairing initiation request: %{public}s",  (uint8_t *)v20);
    sub_100026E70(v21);
    sub_10001001C(v21);
    sub_10001001C(v20);
  }

  uint64_t v31 = *(void *)(v5 - 168);
  uint64_t v32 = *(uint64_t **)(v5 - 160);
  *uint64_t v32 = v10;
  sub_100026E34((uint64_t)v32, v31);
  swift_errorRetain(v10);
  v1(v32);
  swift_errorRelease(v10);
  sub_100026B84((uint64_t)v32, &qword_100081A18);
  sub_10000FF80();
}

void sub_1000238C8(uint64_t a1, uint64_t a2, void (*a3)(void *), uint64_t a4, uint64_t a5)
{
  uint64_t v70 = a5;
  uint64_t v77 = a4;
  uint64_t v78 = a3;
  uint64_t v72 = type metadata accessor for DeviceServiceEvent(0LL);
  uint64_t v80 = *(void *)(v72 - 8);
  __chkstk_darwin(v72, v7);
  uint64_t v71 = &v63[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v79 = type metadata accessor for PairingChallengeEvent(0LL);
  uint64_t v74 = *(void *)(v79 - 8);
  uint64_t v10 = __chkstk_darwin(v79, v9);
  uint64_t v81 = &v63[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v69 = &v63[-v14];
  __chkstk_darwin(v13, v15);
  os_log_type_t v17 = &v63[-v16];
  uint64_t v75 = sub_10000FD7C(&qword_100081A18);
  __chkstk_darwin(v75, v18);
  uint64_t v76 = &v63[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v20 = type metadata accessor for PairingOutcome(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v23 = __chkstk_darwin(v20, v22);
  uint64_t v25 = &v63[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v27 = __chkstk_darwin(v23, v26);
  uint64_t v29 = &v63[-v28];
  __chkstk_darwin(v27, v30);
  uint64_t v32 = &v63[-v31];
  a2 += 16LL;
  swift_beginAccess(a2, v84, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    uint64_t v34 = Strong;
    os_log_type_t v35 = static os_log_type_t.default.getter(Strong);
    uint64_t v36 = (os_log_s *)qword_1000845F0;
    uint64_t v37 = *(void (**)(void, void, void))(v21 + 16);
    uint64_t v73 = a1;
    uint64_t v38 = a1;
    uint64_t v39 = v37;
    v37(v32, v38, v20);
    os_log_t v68 = v36;
    if (os_log_type_enabled(v36, v35))
    {
      swift_retain(v34);
      uint64_t v40 = swift_slowAlloc(22LL, -1LL);
      uint64_t v67 = v17;
      uint64_t v41 = v40;
      uint64_t v65 = swift_slowAlloc(64LL, -1LL);
      v83[0] = v65;
      *(_DWORD *)uint64_t v41 = 136446466;
      uint64_t v66 = v39;
      int v64 = v35;
      uint64_t v42 = *(void *)(v34 + 16);
      uint64_t v43 = *(void *)(v34 + 24);
      swift_bridgeObjectRetain(v43);
      sub_100045370(v42, v43, v83);
      uint64_t v82 = v44;
      uint64_t v39 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83, v41 + 4, v41 + 12);
      swift_release(v34);
      swift_bridgeObjectRelease(v43);
      *(_WORD *)(v41 + 12) = 2082;
      v39(v29, v32, v20);
      uint64_t v45 = String.init<A>(describing:)(v29, v20);
      uint64_t v47 = v46;
      sub_100045370(v45, v46, v83);
      uint64_t v82 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83, v41 + 14, v41 + 22);
      swift_bridgeObjectRelease(v47);
      (*(void (**)(_BYTE *, uint64_t))(v21 + 8))(v32, v20);
      _os_log_impl( (void *)&_mh_execute_header,  v68,  (os_log_type_t)v64,  "%{public}s: Received pairing outcome %{public}s",  (uint8_t *)v41,  0x16u);
      uint64_t v49 = v65;
      swift_arrayDestroy(v65, 2LL);
      swift_slowDealloc(v49, -1LL, -1LL);
      uint64_t v50 = v41;
      os_log_type_t v17 = v67;
      swift_slowDealloc(v50, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v21 + 8))(v32, v20);
    }

    uint64_t v51 = v80;
    v39(v25, v73, v20);
    int v52 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(v21 + 88))(v25, v20);
    if (v52 == enum case for PairingOutcome.failure(_:))
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v21 + 96))(v25, v20);
      uint64_t v53 = *(void *)v25;
      uint64_t v54 = v75;
      uint64_t v55 = v76;
      *uint64_t v76 = *(void *)v25;
      swift_storeEnumTagMultiPayload(v55, v54, 1LL);
      swift_errorRetain(v53);
      v78(v55);
      swift_errorRelease(v53);
      swift_release(v34);
      uint64_t v56 = (uint64_t)v55;
LABEL_7:
      sub_100026B84(v56, &qword_100081A18);
      return;
    }

    if (v52 == enum case for PairingOutcome.challenge(_:))
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v21 + 96))(v25, v20);
      PairingChallengeEvent.init(lastAttemptIncorrect:throttleSeconds:)(*v25, *((void *)v25 + 1), v25[16]);
      uint64_t v57 = v71;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v74 + 16))(v71, v17, v79);
      uint64_t v58 = v72;
      (*(void (**)(_BYTE *, void, uint64_t))(v51 + 104))( v57,  enum case for DeviceServiceEvent.pairingChallenge(_:),  v72);
      sub_100026A28(&qword_100081A00, (uint64_t (*)(uint64_t))&type metadata accessor for DeviceServiceEvent);
      uint64_t v60 = v59;
      sub_100026A28(&qword_100081A08, (uint64_t (*)(uint64_t))&type metadata accessor for DeviceServiceEvent);
      XPCConnection.send<A>(value:)(v57, v58, v60, v61);
      swift_release(v34);
      (*(void (**)(_BYTE *, uint64_t))(v51 + 8))(v57, v58);
      (*(void (**)(_BYTE *, uint64_t))(v74 + 8))(v17, v79);
      return;
    }

    if (v52 == enum case for PairingOutcome.success(_:))
    {
      uint64_t v62 = v76;
      sub_100022138();
      swift_storeEnumTagMultiPayload(v62, v75, 0LL);
      v78(v62);
      swift_release(v34);
      uint64_t v56 = (uint64_t)v62;
      goto LABEL_7;
    }

    if (v52 == enum case for PairingOutcome.awaitingUserConsent(_:))
    {
      swift_release(v34);
    }

    else
    {
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  266LL,  0);
      __break(1u);
    }
  }

void sub_100024104()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v39 = v6;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v40 = sub_100026C7C();
  sub_100012280();
  __chkstk_darwin(v11, v12);
  sub_10001DF18();
  os_log_type_t v14 = static os_log_type_t.default.getter(v13);
  uint64_t v15 = (os_log_s *)qword_1000845F0;
  os_log_type_t v16 = v14;
  if (os_log_type_enabled((os_log_t)qword_1000845F0, v14))
  {
    sub_10000FFDC();
    os_log_type_t v17 = (uint8_t *)sub_1000122E0(12LL);
    uint64_t v37 = sub_1000122E0(32LL);
    uint64_t v42 = v37;
    uint64_t v38 = v5;
    *(_DWORD *)os_log_type_t v17 = 136446210;
    uint64_t v18 = v17 + 12;
    os_log_type_t v35 = v17 + 4;
    uint64_t v36 = v17;
    uint64_t v19 = v8;
    uint64_t v20 = v10;
    uint64_t v21 = v3;
    uint64_t v23 = *(void *)(v0 + 16);
    uint64_t v22 = *(void *)(v0 + 24);
    sub_100026E48();
    uint64_t v24 = v23;
    uint64_t v3 = v21;
    uint64_t v10 = v20;
    uint64_t v8 = v19;
    sub_100045370(v24, v22, &v42);
    uint64_t v41 = v25;
    uint64_t v26 = v18;
    uint64_t v5 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v35, v26);
    sub_100012464();
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s: Initating pairing", v36, 0xCu);
    sub_100012450(v37);
    sub_10001001C(v37);
    sub_10001001C((uint64_t)v36);
  }

  uint64_t v27 = (int *)sub_10000FD7C(&qword_100081928);
  uint64_t v28 = v27[12];
  uint64_t v29 = v27[16];
  uint64_t v30 = (void *)(v1 + v27[20]);
  sub_100020498();
  uint64_t v31 = sub_100026DE8();
  v32(v31, v39);
  *(void *)(v1 + v28) = v8;
  *(void *)(v1 + v29) = v10;
  *uint64_t v30 = v5;
  v30[1] = v3;
  swift_storeEnumTagMultiPayload(v1, v40, 2LL);
  sub_100016B28();
  sub_100016DFC();
  swift_retain(v3);
  sub_100020B70(v1);
  uint64_t v33 = sub_100016BCC((uint64_t)&unk_100077160, 24LL);
  swift_weakInit(v33 + 16, v0);
  uint64_t v34 = sub_100016BCC((uint64_t)&unk_1000771D8, 32LL);
  *(void *)(v34 + swift_weakDestroy(v0 + 16) = v33;
  *(void *)(v34 + 24) = v8;
  sub_100016B28();
  swift_retain(v33);
  dispatch thunk of ControlChannelConnection.initiatePairing(withOptions:pairingOutcomeHandler:)( 0LL,  sub_100026A58,  v34);
  sub_100010008();
  sub_100026E50();
  sub_10000FF80();
}

uint64_t sub_100024328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v88 = a1;
  uint64_t v5 = type metadata accessor for ControlChannelConnection.InvalidationReason(0LL);
  uint64_t v87 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v86 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for PairingOutcome(0LL);
  uint64_t v90 = *(void *)(v8 - 8);
  uint64_t v91 = v8;
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v89 = (uint64_t *)((char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v10, v12);
  os_log_type_t v14 = (char *)&v75 - v13;
  uint64_t v15 = type metadata accessor for DiscoveredPairableHost.State(0LL);
  uint64_t v17 = __chkstk_darwin(v15, v16);
  uint64_t v85 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (char *)&v75 - v20;
  uint64_t v22 = type metadata accessor for DiscoveredBonjourAdvert(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v24);
  uint64_t v26 = (char *)&v75 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess(a2 + 16, v95, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2 + 16);
  if (result)
  {
    uint64_t v28 = result;
    uint64_t v29 = result + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
    swift_beginAccess(result + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state, v94, 0LL, 0LL);
    sub_100026938(v29, (uint64_t)v21);
    if (swift_getEnumCaseMultiPayload(v21, v15) != 2)
    {
      swift_release(v28);
      return sub_1000264CC((uint64_t)v21);
    }

    uint64_t v83 = v5;
    uint64_t v84 = v28;
    uint64_t v30 = a3;
    uint64_t v31 = v22;
    uint64_t v32 = (int *)sub_10000FD7C(&qword_100081928);
    uint64_t v33 = *(void *)&v21[v32[12]];
    swift_release(*(void *)&v21[v32[16]]);
    uint64_t v34 = &v21[v32[20]];
    os_log_type_t v35 = *(void (**)(void *))v34;
    uint64_t v36 = *((void *)v34 + 1);
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v26, v21, v31);
    if (v33 != v30)
    {
      (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v31);
      swift_release(v84);
      swift_release(v36);
      return swift_release(v33);
    }

    uint64_t v81 = v35;
    uint64_t v82 = v31;
    uint64_t v37 = v90;
    uint64_t v38 = v91;
    (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v14, v88, v91);
    uint64_t v39 = (*(uint64_t (**)(char *, uint64_t))(v37 + 88))(v14, v38);
    uint64_t v40 = v39;
    if ((_DWORD)v39 == enum case for PairingOutcome.failure(_:))
    {
      (*(void (**)(char *, uint64_t))(v37 + 96))(v14, v38);
      uint64_t v41 = *(void *)v14;
      uint64_t v79 = v26;
      uint64_t v80 = v23;
      uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
      uint64_t v43 = v85;
      v42(v85, v26, v82);
      swift_storeEnumTagMultiPayload(v43, v15, 0LL);
      uint64_t v44 = v43;
      uint64_t v45 = v84;
      sub_100020B70(v44);
      uint64_t v46 = v89;
      *uint64_t v89 = v41;
      (*(void (**)(void *, uint64_t, uint64_t))(v37 + 104))(v46, v40, v38);
      swift_errorRetain(v41);
      v81(v46);
      (*(void (**)(void *, uint64_t))(v37 + 8))(v46, v38);
      uint64_t v48 = v86;
      uint64_t v47 = v87;
      uint64_t v49 = v83;
      (*(void (**)(char *, void, uint64_t))(v87 + 104))( v86,  enum case for ControlChannelConnection.InvalidationReason.onDemandTaskCompleted(_:),  v83);
      dispatch thunk of ControlChannelConnection.invalidate(for:)(v48);
      swift_release(v36);
      swift_errorRelease(v41);
      swift_release(v30);
      swift_release(v45);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
      uint64_t v50 = v79;
      uint64_t v51 = *(uint64_t (**)(char *, uint64_t))(v80 + 8);
      return v51(v50, v82);
    }

    uint64_t v52 = v30;
    if ((_DWORD)v39 == enum case for PairingOutcome.challenge(_:))
    {
      uint64_t v53 = v91;
      (*(void (**)(char *, uint64_t))(v37 + 96))(v14, v91);
      uint64_t v54 = *((void *)v14 + 1);
      char v55 = v14[16];
      uint64_t v56 = v89;
      *(_BYTE *)uint64_t v89 = *v14;
      v56[1] = v54;
      *((_BYTE *)v56 + swift_weakDestroy(v0 + 16) = v55;
      (*(void (**)(void *, uint64_t, uint64_t))(v37 + 104))(v56, v40, v53);
LABEL_16:
      v81(v56);
      swift_release(v52);
      swift_release(v84);
      swift_release(v36);
      (*(void (**)(void *, uint64_t))(v37 + 8))(v56, v53);
      uint64_t v51 = *(uint64_t (**)(char *, uint64_t))(v23 + 8);
      uint64_t v50 = v26;
      return v51(v50, v82);
    }

    if ((_DWORD)v39 != enum case for PairingOutcome.success(_:))
    {
      if ((_DWORD)v39 != enum case for PairingOutcome.awaitingUserConsent(_:))
      {
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  308LL,  0);
        __break(1u);
        return result;
      }

      uint64_t v56 = v89;
      uint64_t v53 = v91;
      (*(void (**)(void *, uint64_t, uint64_t))(v37 + 104))(v89, v39, v91);
      goto LABEL_16;
    }

    unsigned int v78 = v39;
    uint64_t v88 = v36;
    os_log_type_t v57 = static os_log_type_t.default.getter(v39);
    uint64_t v58 = (os_log_s *)qword_1000845F0;
    os_log_type_t v59 = v57;
    BOOL v60 = os_log_type_enabled((os_log_t)qword_1000845F0, v57);
    uint64_t v61 = v84;
    if (v60)
    {
      swift_retain(v84);
      uint64_t v62 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v77 = swift_slowAlloc(32LL, -1LL);
      uint64_t v93 = v77;
      *(_DWORD *)uint64_t v62 = 136446210;
      uint64_t v76 = v62 + 4;
      uint64_t v63 = *(void *)(v61 + 24);
      uint64_t v75 = *(void *)(v61 + 16);
      swift_bridgeObjectRetain(v63);
      sub_100045370(v75, v63, &v93);
      uint64_t v92 = v64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v76, v62 + 12);
      swift_release(v61);
      swift_bridgeObjectRelease(v63);
      _os_log_impl( (void *)&_mh_execute_header,  v58,  v59,  "%{public}s: Successfully wirelessly paired with host",  v62,  0xCu);
      uint64_t v65 = v77;
      swift_arrayDestroy(v77, 1LL);
      swift_slowDealloc(v65, -1LL, -1LL);
      swift_slowDealloc(v62, -1LL, -1LL);
    }

    uint64_t v66 = v85;
    uint64_t v67 = v82;
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v85, v26, v82);
    swift_storeEnumTagMultiPayload(v66, v15, 3LL);
    sub_100020B70(v66);
    uint64_t v69 = v89;
    uint64_t v68 = v90;
    uint64_t v70 = v91;
    (*(void (**)(void *, void, uint64_t))(v90 + 104))(v89, v78, v91);
    uint64_t v71 = v88;
    v81(v69);
    (*(void (**)(void *, uint64_t))(v68 + 8))(v69, v70);
    uint64_t v73 = v86;
    uint64_t v72 = v87;
    uint64_t v74 = v83;
    (*(void (**)(char *, void, uint64_t))(v87 + 104))( v86,  enum case for ControlChannelConnection.InvalidationReason.devicePaired(_:),  v83);
    dispatch thunk of ControlChannelConnection.invalidate(for:)(v73);
    swift_release(v52);
    swift_release(v61);
    swift_release(v71);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v73, v74);
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v26, v67);
  }

  return result;
}

void sub_100024A30()
{
  uint64_t v2 = type metadata accessor for DeviceServiceEvent(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  sub_100026D10();
  uint64_t v61 = v5;
  sub_100026ED0();
  __chkstk_darwin(v6, v7);
  uint64_t v69 = (char *)v59 - v8;
  sub_100026ED0();
  __chkstk_darwin(v9, v10);
  sub_100026D00();
  sub_100022138();
  uint64_t v11 = *(uint64_t (**)(uint64_t, void, uint64_t))(v3 + 104);
  uint64_t v62 = v0;
  uint64_t v12 = v11(v0, enum case for DeviceServiceEvent.pairableHostFound(_:), v2);
  os_log_type_t v13 = static os_log_type_t.debug.getter(v12);
  uint64_t v14 = qword_1000845F0;
  os_log_type_t v15 = v13;
  BOOL v16 = os_log_type_enabled((os_log_t)qword_1000845F0, v13);
  uint64_t v70 = v3;
  if (v16)
  {
    sub_10000FFDC();
    uint64_t v17 = sub_1000122E0(22LL);
    uint64_t v18 = sub_1000122E0(32LL);
    v77[0] = v18;
    *(_DWORD *)uint64_t v17 = 136446466;
    uint64_t v19 = v2;
    uint64_t v21 = *(void *)(v1 + 16);
    uint64_t v20 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain(v20);
    sub_100045370(v21, v20, v77);
    uint64_t v75 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v17 + 4, v17 + 12);
    sub_10001DDA4();
    *(_WORD *)(v17 + 12) = 2048;
    uint64_t v23 = (uint64_t *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__peers);
    sub_10000FF98(v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__peers, (uint64_t)&v72);
    uint64_t v24 = *v23;
    swift_bridgeObjectRetain(v24);
    uint64_t v26 = (os_log_s *)v14;
    uint64_t v27 = sub_10004F824(v25);
    swift_bridgeObjectRelease(v24);
    uint64_t v75 = v27;
    uint64_t v2 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v17 + 14, v17 + 22);
    sub_100012464();
    sub_100026D38( (void *)&_mh_execute_header,  v26,  v15,  "%{public}s: Publishing discovered host state changes to %ld peers",  (uint8_t *)v17);
    sub_100012450(v18);
    sub_10001001C(v18);
    uint64_t v28 = v17;
    uint64_t v3 = v70;
    sub_10001001C(v28);
  }

  uint64_t v29 = (uint64_t *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__peers);
  sub_10000FF98((uint64_t)v29, (uint64_t)&v75);
  uint64_t v30 = *v29;
  if ((*v29 & 0xC000000000000001LL) != 0)
  {
    if (v30 < 0) {
      uint64_t v31 = *v29;
    }
    else {
      uint64_t v31 = v30 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_100026E48();
    uint64_t v32 = __CocoaSet.makeIterator()(v31);
    uint64_t v33 = sub_100026D24();
    sub_100026A28( &qword_1000819F8,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
    uint64_t v35 = Set.Iterator.init(_cocoa:)(v32, v33, v34);
    uint64_t v30 = v77[0];
    uint64_t v66 = v77[1];
    uint64_t v38 = v77[2];
    uint64_t v37 = v77[3];
    unint64_t v39 = v77[4];
  }

  else
  {
    uint64_t v40 = -1LL << *(_BYTE *)(v30 + 32);
    uint64_t v66 = v30 + 56;
    uint64_t v38 = ~v40;
    sub_10000FFE4();
    unint64_t v39 = v41 & v42;
    uint64_t v35 = sub_100026E48();
    uint64_t v37 = 0LL;
  }

  uint64_t v43 = v62;
  uint64_t v64 = v30 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v65 = (unint64_t)(v38 + 64) >> 6;
  *(void *)&__int128 v36 = 136315394LL;
  __int128 v60 = v36;
  v59[1] = (char *)&type metadata for Any + 8;
  uint64_t v63 = (uint64_t)&type metadata for Swift.AnyObject + 8;
  uint64_t v67 = v38;
  uint64_t v68 = v30;
  while (v30 < 0)
  {
    uint64_t v46 = __CocoaSet.Iterator.next()(v35);
    if (!v46) {
      goto LABEL_35;
    }
    uint64_t v47 = v46;
    uint64_t v73 = v46;
    sub_100026D24();
    sub_100026EF0();
    sub_100026E78((uint64_t)&v74, (uint64_t)&v73, v63);
    uint64_t v48 = v74;
    swift_unknownObjectRelease(v47);
    int64_t v45 = v37;
    uint64_t v71 = v39;
    if (!v48) {
      goto LABEL_35;
    }
LABEL_28:
    sub_100026A28(&qword_100081A00, (uint64_t (*)(uint64_t))&type metadata accessor for DeviceServiceEvent);
    uint64_t v55 = v54;
    sub_100026A28(&qword_100081A08, (uint64_t (*)(uint64_t))&type metadata accessor for DeviceServiceEvent);
    XPCConnection.send<A>(value:)(v43, v2, v55, v56);
    uint64_t v35 = sub_100012464();
    uint64_t v37 = v45;
    unint64_t v39 = v71;
  }

  if (v39)
  {
    uint64_t v71 = (v39 - 1) & v39;
    unint64_t v44 = __clz(__rbit64(v39)) | (v37 << 6);
    int64_t v45 = v37;
LABEL_27:
    uint64_t v53 = *(void *)(*(void *)(v30 + 48) + 8 * v44);
    sub_10000FFDC();
    if (!v53) {
      goto LABEL_35;
    }
    goto LABEL_28;
  }

  int64_t v45 = v37 + 1;
  if (!__OFADD__(v37, 1LL))
  {
    if (v45 >= v65) {
      goto LABEL_35;
    }
    unint64_t v49 = *(void *)(v66 + 8 * v45);
    if (!v49)
    {
      sub_100026DD8();
      if (v51 == v52) {
        goto LABEL_35;
      }
      unint64_t v49 = *(void *)(v66 + 8 * v50);
      if (v49) {
        goto LABEL_25;
      }
      sub_100026DD8();
      if (v51 == v52) {
        goto LABEL_35;
      }
      unint64_t v49 = *(void *)(v66 + 8 * v50);
      if (v49)
      {
LABEL_25:
        int64_t v45 = v50;
      }

      else
      {
        int64_t v45 = v37 + 4;
        if (v37 + 4 >= v65) {
          goto LABEL_35;
        }
        unint64_t v49 = *(void *)(v66 + 8 * v45);
        if (!v49)
        {
          while (1)
          {
            sub_100026DD8();
            if (v51 == v52) {
              break;
            }
            unint64_t v49 = *(void *)(v66 + 8 * v57);
            uint64_t v58 = v57 + 1;
            if (v49)
            {
              int64_t v45 = v58 - 1;
              goto LABEL_26;
            }
          }

LABEL_35:
          sub_10000FE04(v30);
          (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v43, v2);
          sub_10000FF80();
          return;
        }
      }
    }

    sub_10000FE04(v9);
    sub_10000FF38(v49);
    uint64_t v2 = v43;
    uint64_t v1 = v39;
    if (v43 != v41) {
      continue;
    }
    break;
  }

  swift_release(v5);
  uint64_t v3 = v2;
LABEL_37:
  if ((v37 & 1) != 0)
  {
    uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
    if (v34 >= 64) {
      sub_1000538DC(0LL, (unint64_t)(v34 + 63) >> 6, v18);
    }
    else {
      *uint64_t v18 = -1LL << v34;
    }
    *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
  }

void sub_10002507C()
{
  uint64_t v4 = sub_100026D5C();
  type metadata accessor for PairingOutcome(v4);
  sub_100026C0C();
  __chkstk_darwin(v5, v6);
  uint64_t v7 = sub_100026C7C();
  sub_100012280();
  __chkstk_darwin(v8, v9);
  sub_1000123CC();
  __chkstk_darwin(v10, v11);
  sub_100026D00();
  uint64_t v12 = sub_100020498();
  __chkstk_darwin(v12, v13);
  sub_1000203EC();
  uint64_t v14 = v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  sub_10000FF98(v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state, (uint64_t)&v16);
  sub_100026EC8(v14);
  os_log_type_t v15 = (char *)sub_10002518C + 4 * byte_100062BB4[swift_getEnumCaseMultiPayload(v0, v7)];
  __asm { BR              X10 }

void sub_10002518C()
{
}

void sub_100025488()
{
  uint64_t v36 = v1;
  uint64_t v37 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_100026C7C();
  sub_100012280();
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for ControlChannelConnection.Options(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  sub_10000FFCC();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = *(void **)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__queue);
  DiscoveredBonjourAdvert.createTransport(withTargetQueue:)(v40, v18);
  sub_10002697C((uint64_t)v40, (uint64_t)v39);
  id v19 = v18;
  ControlChannelConnection.Options.Host.init(attemptPairVerify:)(0LL);
  (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))( v17,  enum case for ControlChannelConnection.Options.host(_:),  v12);
  sub_10002697C(v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__pairingManager, (uint64_t)v38);
  uint64_t v20 = type metadata accessor for ControlChannelConnection(0LL);
  uint64_t v21 = static ControlChannelConnection.defaultMaxReconnectionAttempts.getter(v20);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  uint64_t v22 = ControlChannelConnection.init(transport:queue:options:maxReconnectionAttempts:pairingDataStorageProvider:peerWireProtocolVersion:)( v39,  v19,  v17,  v21,  v38,  0LL);
  uint64_t v23 = sub_100016BCC((uint64_t)&unk_100077160, 24LL);
  sub_100026E64(v23);
  uint64_t v24 = sub_100016BCC((uint64_t)&unk_100077188, 32LL);
  *(void *)(v24 + swift_weakDestroy(v0 + 16) = v23;
  *(void *)(v24 + 24) = v22;
  swift_retain(v23);
  sub_100026CBC();
  dispatch thunk of ControlChannelConnection.invalidationHandler.setter(sub_1000269E4, v24);
  swift_release(v23);
  uint64_t v25 = sub_100016BCC((uint64_t)&unk_100077160, 24LL);
  sub_100026E64(v25);
  uint64_t v26 = sub_100016BCC((uint64_t)&unk_1000771B0, 32LL);
  *(void *)(v26 + swift_weakDestroy(v0 + 16) = v25;
  *(void *)(v26 + 24) = v22;
  sub_100026CBC();
  sub_10000FFC4();
  dispatch thunk of ControlChannelConnection._connectionSetupCompleteHandler.setter(sub_100026A08, v26);
  sub_10000FFF8();
  uint64_t v27 = (int *)sub_10000FD7C(&qword_100081928);
  uint64_t v28 = v27[12];
  uint64_t v29 = v27[16];
  uint64_t v30 = &v11[v27[20]];
  sub_100020498();
  uint64_t v31 = sub_100026DE8();
  v32(v31, v6);
  *(void *)&v11[v28] = v22;
  *(void *)&v11[v29] = v4;
  uint64_t v33 = v37;
  *(void *)uint64_t v30 = v36;
  *((void *)v30 + 1) = v33;
  sub_100026E34((uint64_t)v11, v7);
  sub_100026CBC();
  sub_100026D98();
  sub_10000FFDC();
  uint64_t v34 = sub_100020B70(v11);
  dispatch thunk of ControlChannelConnection.start()(v34);
  sub_100020470();
  sub_10000FF38(v40);
  sub_10000FF80();
}

uint64_t sub_1000256E8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = a1 + 16;
  sub_10000FF98(a1 + 16, (uint64_t)v7);
  uint64_t result = swift_weakLoadStrong(v5);
  if (result)
  {
    a3(a2);
    return sub_100010008();
  }

  return result;
}

void sub_100025748()
{
  uint64_t v1 = type metadata accessor for PairingOutcome(0LL);
  v15[3] = *(void *)(v1 - 8);
  v15[4] = v1;
  sub_100026C0C();
  __chkstk_darwin(v2, v3);
  uint64_t v4 = sub_100020498();
  __chkstk_darwin(v4, v5);
  sub_100012404();
  uint64_t v6 = sub_100026C7C();
  sub_100012280();
  __chkstk_darwin(v7, v8);
  sub_1000123CC();
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)v15 - v11;
  uint64_t v13 = v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  sub_10000FF98(v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state, (uint64_t)&v16);
  sub_100026938(v13, (uint64_t)v12);
  uint64_t v14 = (char *)sub_10002583C + 4 * byte_100062BB9[swift_getEnumCaseMultiPayload(v12, v6)];
  __asm { BR              X10 }

void sub_10002583C()
{
  uint64_t v5 = sub_100026D54(v3, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  os_log_type_t v6 = static os_log_type_t.error.getter(v5);
  uint64_t v7 = (os_log_s *)qword_1000845F0;
  os_log_type_t v8 = v6;
  if (os_log_type_enabled((os_log_t)qword_1000845F0, v6))
  {
    sub_100026C50(v0);
    sub_10000FFDC();
    uint64_t v9 = sub_1000122E0(22LL);
    uint64_t v10 = sub_1000122E0(64LL);
    *(void *)(v4 - 112) = v10;
    *(_DWORD *)uint64_t v9 = 136446466;
    uint64_t v11 = *(void *)(v1 + 16);
    uint64_t v12 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain(v12);
    sub_100045370(v11, v12, (uint64_t *)(v4 - 112));
    *(void *)(v4 - 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = v13;
    sub_100026D70(v13, v14, v15, v9 + 12);
    sub_100012464();
    uint64_t v16 = swift_bridgeObjectRelease(v12);
    *(_WORD *)(v9 + 12) = 2080;
    uint64_t v17 = dispatch thunk of ControlChannelConnection.id.getter(v16);
    uint64_t v19 = v18;
    sub_100045370(v17, v18, (uint64_t *)(v4 - 112));
    *(void *)(v4 - 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = v20;
    sub_100026D70(v20, v21, v22, v9 + 22);
    sub_100026CA4(v0);
    swift_bridgeObjectRelease(v19);
    sub_100026D38( (void *)&_mh_execute_header,  v7,  v8,  "%{public}s: Unexpectedly received control channel invalidation for %s while in state unavailable",  (uint8_t *)v9);
    sub_100026E70(v10);
    sub_10001001C(v10);
    sub_10001001C(v9);
  }

  sub_10000FF80();
}

void sub_100025AF8()
{
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for DiscoveredPairableHost.State(0LL);
  sub_100012280();
  __chkstk_darwin(v5, v6);
  os_log_type_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100020498();
  sub_10001241C();
  __chkstk_darwin(v9, v10);
  sub_10000FFCC();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  sub_10000FF98(v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state, (uint64_t)&v17);
  sub_100026938(v14, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload(v8, v4) == 1)
  {
    uint64_t v15 = *(void *)&v8[*(int *)(sub_10000FD7C(&qword_100081928) + 48)];
    sub_100026C2C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32));
    if (v15 == v3)
    {
      sub_100024104();
      sub_100016BD4();
      sub_100026EDC();
      sub_10000FFF8();
      sub_100026D54(v13, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    }

    else
    {
      sub_100026D54(v13, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
      swift_release(v15);
      sub_100026EDC();
      sub_10000FFF8();
    }
  }

  else
  {
    sub_1000264CC((uint64_t)v8);
  }

  sub_10000FF80();
}

void sub_100025C40()
{
  uint64_t v1 = sub_10001DCE0();
  sub_100026C68(v1);
  sub_10000FF38((void *)((char *)v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__pairingManager));

  sub_1000264CC((uint64_t)v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state);
  swift_bridgeObjectRelease(*(void *)((char *)v0
                                      + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__peers));
  swift_bridgeObjectRelease(*(void *)((char *)v0
                                      + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__transactions));
  swift_release(*(void *)((char *)v0
                          + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost____lazy_storage___listener));
  swift_release(*(void *)((char *)v0
                          + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost____lazy_storage___dispatcher));
  sub_100016C1C();
}

uint64_t sub_100025CF4()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100025D18()
{
  return type metadata accessor for DiscoveredPairableHost(0LL);
}

uint64_t type metadata accessor for DiscoveredPairableHost(uint64_t a1)
{
  return sub_100025E18(a1, qword_100081778, (uint64_t)&nominal type descriptor for DiscoveredPairableHost);
}

uint64_t sub_100025D34(uint64_t a1)
{
  v5[0] = &unk_100062C28;
  v5[1] = &unk_100062C28;
  v5[2] = &unk_100062C40;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[3] = *(void *)(result - 8) + 64LL;
    v5[4] = &unk_100062C58;
    v5[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t result = type metadata accessor for DiscoveredPairableHost.State(319LL);
    if (v4 <= 0x3F)
    {
      v5[6] = *(void *)(result - 8) + 64LL;
      v5[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v5[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
      void v5[9] = &unk_100062C70;
      v5[10] = &unk_100062C70;
      return swift_updateClassMetadata2(a1, 256LL, 11LL, v5, a1 + 80);
    }
  }

  return result;
}

uint64_t type metadata accessor for DiscoveredPairableHost.State(uint64_t a1)
{
  return sub_100025E18(a1, qword_1000819A0, (uint64_t)&nominal type descriptor for DiscoveredPairableHost.State);
}

uint64_t sub_100025E18(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t *sub_100025E48(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v12);
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v8 = type metadata accessor for DiscoveredBonjourAdvert(0LL);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
        uint64_t v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 0LL;
        goto LABEL_9;
      case 1u:
        uint64_t v13 = type metadata accessor for DiscoveredBonjourAdvert(0LL);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16LL))(a1, a2, v13);
        uint64_t v14 = (int *)sub_10000FD7C(&qword_100081928);
        uint64_t v15 = v14[12];
        uint64_t v16 = *(uint64_t *)((char *)a2 + v15);
        *(uint64_t *)((char *)a1 + v15) = v16;
        uint64_t v17 = v14[16];
        uint64_t v18 = *(uint64_t *)((char *)a2 + v17);
        *(uint64_t *)((char *)a1 + v17) = v18;
        uint64_t v19 = v14[20];
        uint64_t v20 = (uint64_t *)((char *)a1 + v19);
        uint64_t v21 = (uint64_t *)((char *)a2 + v19);
        uint64_t v22 = v21[1];
        *uint64_t v20 = *v21;
        v20[1] = v22;
        swift_retain(v16);
        swift_retain(v18);
        swift_retain(v22);
        uint64_t v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 1LL;
        goto LABEL_9;
      case 2u:
        uint64_t v23 = type metadata accessor for DiscoveredBonjourAdvert(0LL);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v23 - 8) + 16LL))(a1, a2, v23);
        uint64_t v24 = (int *)sub_10000FD7C(&qword_100081928);
        uint64_t v25 = v24[12];
        uint64_t v26 = *(uint64_t *)((char *)a2 + v25);
        *(uint64_t *)((char *)a1 + v25) = v26;
        uint64_t v27 = v24[16];
        uint64_t v28 = *(uint64_t *)((char *)a2 + v27);
        *(uint64_t *)((char *)a1 + v27) = v28;
        uint64_t v29 = v24[20];
        uint64_t v30 = (uint64_t *)((char *)a1 + v29);
        uint64_t v31 = (uint64_t *)((char *)a2 + v29);
        uint64_t v32 = v31[1];
        *uint64_t v30 = *v31;
        v30[1] = v32;
        swift_retain(v26);
        swift_retain(v28);
        swift_retain(v32);
        uint64_t v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 2LL;
        goto LABEL_9;
      case 3u:
        uint64_t v33 = type metadata accessor for DiscoveredBonjourAdvert(0LL);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v33 - 8) + 16LL))(a1, a2, v33);
        uint64_t v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 3LL;
LABEL_9:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

uint64_t sub_100026048(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
    case 3:
      uint64_t v4 = type metadata accessor for DiscoveredBonjourAdvert(0LL);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
      break;
    case 1:
    case 2:
      uint64_t v5 = type metadata accessor for DiscoveredBonjourAdvert(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(a1, v5);
      int v6 = (int *)sub_10000FD7C(&qword_100081928);
      swift_release(*(void *)(a1 + v6[12]));
      swift_release(*(void *)(a1 + v6[16]));
      uint64_t result = swift_release(*(void *)(a1 + v6[20] + 8));
      break;
    default:
      return result;
  }

  return result;
}

char *sub_10002610C(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      uint64_t v6 = type metadata accessor for DiscoveredBonjourAdvert(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 0LL;
      goto LABEL_7;
    case 1u:
      uint64_t v10 = type metadata accessor for DiscoveredBonjourAdvert(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(a1, a2, v10);
      uint64_t v11 = (int *)sub_10000FD7C(&qword_100081928);
      uint64_t v12 = v11[12];
      uint64_t v13 = *(void *)&a2[v12];
      *(void *)&a1[v12] = v13;
      uint64_t v14 = v11[16];
      uint64_t v15 = *(void *)&a2[v14];
      *(void *)&a1[v14] = v15;
      uint64_t v16 = v11[20];
      uint64_t v17 = &a1[v16];
      uint64_t v18 = &a2[v16];
      uint64_t v19 = *((void *)v18 + 1);
      *(void *)uint64_t v17 = *(void *)v18;
      *((void *)v17 + 1) = v19;
      swift_retain(v13);
      swift_retain(v15);
      swift_retain(v19);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 1LL;
      goto LABEL_7;
    case 2u:
      uint64_t v20 = type metadata accessor for DiscoveredBonjourAdvert(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16LL))(a1, a2, v20);
      uint64_t v21 = (int *)sub_10000FD7C(&qword_100081928);
      uint64_t v22 = v21[12];
      uint64_t v23 = *(void *)&a2[v22];
      *(void *)&a1[v22] = v23;
      uint64_t v24 = v21[16];
      uint64_t v25 = *(void *)&a2[v24];
      *(void *)&a1[v24] = v25;
      uint64_t v26 = v21[20];
      uint64_t v27 = &a1[v26];
      uint64_t v28 = &a2[v26];
      uint64_t v29 = *((void *)v28 + 1);
      *(void *)uint64_t v27 = *(void *)v28;
      *((void *)v27 + 1) = v29;
      swift_retain(v23);
      swift_retain(v25);
      swift_retain(v29);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 2LL;
      goto LABEL_7;
    case 3u:
      uint64_t v30 = type metadata accessor for DiscoveredBonjourAdvert(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16LL))(a1, a2, v30);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 3LL;
LABEL_7:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

char *sub_1000262E4(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000264CC((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v6 = type metadata accessor for DiscoveredBonjourAdvert(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 0LL;
        goto LABEL_8;
      case 1u:
        uint64_t v10 = type metadata accessor for DiscoveredBonjourAdvert(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(a1, a2, v10);
        uint64_t v11 = (int *)sub_10000FD7C(&qword_100081928);
        uint64_t v12 = v11[12];
        uint64_t v13 = *(void *)&a2[v12];
        *(void *)&a1[v12] = v13;
        uint64_t v14 = v11[16];
        uint64_t v15 = *(void *)&a2[v14];
        *(void *)&a1[v14] = v15;
        uint64_t v16 = v11[20];
        uint64_t v17 = &a1[v16];
        uint64_t v18 = &a2[v16];
        uint64_t v19 = *((void *)v18 + 1);
        *(void *)uint64_t v17 = *(void *)v18;
        *((void *)v17 + 1) = v19;
        swift_retain(v13);
        swift_retain(v15);
        swift_retain(v19);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 1LL;
        goto LABEL_8;
      case 2u:
        uint64_t v20 = type metadata accessor for DiscoveredBonjourAdvert(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16LL))(a1, a2, v20);
        uint64_t v21 = (int *)sub_10000FD7C(&qword_100081928);
        uint64_t v22 = v21[12];
        uint64_t v23 = *(void *)&a2[v22];
        *(void *)&a1[v22] = v23;
        uint64_t v24 = v21[16];
        uint64_t v25 = *(void *)&a2[v24];
        *(void *)&a1[v24] = v25;
        uint64_t v26 = v21[20];
        uint64_t v27 = &a1[v26];
        uint64_t v28 = &a2[v26];
        uint64_t v29 = *((void *)v28 + 1);
        *(void *)uint64_t v27 = *(void *)v28;
        *((void *)v27 + 1) = v29;
        swift_retain(v23);
        swift_retain(v25);
        swift_retain(v29);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 2LL;
        goto LABEL_8;
      case 3u:
        uint64_t v30 = type metadata accessor for DiscoveredBonjourAdvert(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16LL))(a1, a2, v30);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 3LL;
LABEL_8:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

uint64_t sub_1000264CC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DiscoveredPairableHost.State(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

char *sub_100026508(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      uint64_t v6 = type metadata accessor for DiscoveredBonjourAdvert(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 0LL;
      goto LABEL_7;
    case 1u:
      uint64_t v10 = type metadata accessor for DiscoveredBonjourAdvert(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(a1, a2, v10);
      uint64_t v11 = (int *)sub_10000FD7C(&qword_100081928);
      *(void *)&a1[v11[12]] = *(void *)&a2[v11[12]];
      *(void *)&a1[v11[16]] = *(void *)&a2[v11[16]];
      *(_OWORD *)&a1[v11[20]] = *(_OWORD *)&a2[v11[20]];
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 1LL;
      goto LABEL_7;
    case 2u:
      uint64_t v12 = type metadata accessor for DiscoveredBonjourAdvert(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32LL))(a1, a2, v12);
      uint64_t v13 = (int *)sub_10000FD7C(&qword_100081928);
      *(void *)&a1[v13[12]] = *(void *)&a2[v13[12]];
      *(void *)&a1[v13[16]] = *(void *)&a2[v13[16]];
      *(_OWORD *)&a1[v13[20]] = *(_OWORD *)&a2[v13[20]];
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 2LL;
      goto LABEL_7;
    case 3u:
      uint64_t v14 = type metadata accessor for DiscoveredBonjourAdvert(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32LL))(a1, a2, v14);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 3LL;
LABEL_7:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

char *sub_1000266A0(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000264CC((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v6 = type metadata accessor for DiscoveredBonjourAdvert(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 0LL;
        goto LABEL_8;
      case 1u:
        uint64_t v10 = type metadata accessor for DiscoveredBonjourAdvert(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(a1, a2, v10);
        uint64_t v11 = (int *)sub_10000FD7C(&qword_100081928);
        *(void *)&a1[v11[12]] = *(void *)&a2[v11[12]];
        *(void *)&a1[v11[16]] = *(void *)&a2[v11[16]];
        *(_OWORD *)&a1[v11[20]] = *(_OWORD *)&a2[v11[20]];
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 1LL;
        goto LABEL_8;
      case 2u:
        uint64_t v12 = type metadata accessor for DiscoveredBonjourAdvert(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32LL))(a1, a2, v12);
        uint64_t v13 = (int *)sub_10000FD7C(&qword_100081928);
        *(void *)&a1[v13[12]] = *(void *)&a2[v13[12]];
        *(void *)&a1[v13[16]] = *(void *)&a2[v13[16]];
        *(_OWORD *)&a1[v13[20]] = *(_OWORD *)&a2[v13[20]];
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 2LL;
        goto LABEL_8;
      case 3u:
        uint64_t v14 = type metadata accessor for DiscoveredBonjourAdvert(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32LL))(a1, a2, v14);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 3LL;
LABEL_8:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

uint64_t sub_100026854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_100026864(uint64_t a1)
{
  uint64_t result = type metadata accessor for DiscoveredBonjourAdvert(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    v11[0] = v4;
    uint64_t v6 = v4;
    uint64_t v7 = (char *)&value witness table for Builtin.NativeObject + 64;
    uint64_t v8 = (char *)&value witness table for Builtin.NativeObject + 64;
    uint64_t v9 = (char *)&value witness table for () + 64;
    swift_getTupleTypeLayout(v10, 0LL, 4LL, &v6);
    v11[1] = v10;
    uint64_t v6 = v4;
    uint64_t v7 = (char *)&value witness table for Builtin.NativeObject + 64;
    uint64_t v8 = (char *)&value witness table for Builtin.NativeObject + 64;
    uint64_t v9 = (char *)&value witness table for () + 64;
    swift_getTupleTypeLayout(v5, 0LL, 4LL, &v6);
    v11[2] = v5;
    v11[3] = v4;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 4LL, v11);
    return 0LL;
  }

  return result;
}

uint64_t sub_100026938(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DiscoveredPairableHost.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_10002697C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  sub_100016C1C();
}

uint64_t sub_1000269BC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000269E4()
{
  return sub_1000256E8(*(void *)(v0 + 16), *(void *)(v0 + 24), (void (*)(uint64_t))sub_100025748);
}

uint64_t sub_100026A08()
{
  return sub_1000256E8(*(void *)(v0 + 16), *(void *)(v0 + 24), (void (*)(uint64_t))sub_100025AF8);
}

void sub_100026A28(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  if (!*a1)
  {
    uint64_t v3 = sub_100026E58(0LL, a2);
    atomic_store(sub_100026E8C(v3), a1);
  }

  sub_100016C1C();
}

uint64_t sub_100026A58(uint64_t a1)
{
  return sub_100024328(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100026A60()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_100026A90(uint64_t a1)
{
}

uint64_t sub_100026A9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100022218(a1, *(void **)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_100026AB4(uint64_t a1, uint64_t *a2)
{
  return sub_100021A00(a1, a2, v2);
}

uint64_t sub_100026ACC(uint64_t a1, os_log_s **a2)
{
  return sub_100021AB4(a1, a2, v2);
}

uint64_t sub_100026AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100021B3C(a1, a2, a3, a4, v4);
}

uint64_t sub_100026AEC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100026B0C(uint64_t a1)
{
  return sub_100020D3C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100026B18()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100026B40(uint64_t a1)
{
}

void sub_100026B48(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_100026EBC();
  v4(v3);
  sub_100016C1C();
}

void sub_100026B84(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = sub_10000FD7C(a2);
  sub_100026C68(v2);
  sub_100016C1C();
}

uint64_t sub_100026BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DiscoveredPairableHost.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100026BF0(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v3;
  return a2;
}

  ;
}

uint64_t sub_100026C18()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v1, v0);
}

uint64_t sub_100026C2C@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v3, v1);
}

uint64_t sub_100026C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Error<>.init(_:_:)(a1, 0xD000000000000027LL, a3, v5, a5);
}

uint64_t sub_100026C50(uint64_t a1)
{
  return swift_retain_n(a1, 2LL);
}

uint64_t sub_100026C58(uint64_t a1, uint64_t a2)
{
  return swift_allocError(v2, a2, 0LL, 0LL);
}

uint64_t sub_100026C68(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t sub_100026C7C()
{
  return type metadata accessor for DiscoveredPairableHost.State(0LL);
}

uint64_t sub_100026C84@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

  ;
}

uint64_t sub_100026CA4(uint64_t a1)
{
  return swift_release_n(a1, 2LL);
}

void sub_100026CAC()
{
}

uint64_t sub_100026CBC()
{
  return swift_retain(v0);
}

void sub_100026CC4()
{
  *(void *)(v0 - 96) = 0LL;
  *(void *)(v0 - 88) = 0xE000000000000000LL;
}

uint64_t sub_100026CD4()
{
  return v0;
}

uint64_t sub_100026CE0(uint64_t a1)
{
  return swift_release(*(void *)(v1 + *(int *)(a1 + 64)));
}

void sub_100026CF8(uint64_t a1, uint64_t a2)
{
}

  ;
}

  ;
}

uint64_t sub_100026D24()
{
  return type metadata accessor for SystemXPCPeerConnection(0LL);
}

uint64_t sub_100026D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 120, a2, v4, a4);
}

void sub_100026D38(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_100026D40@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(void *)(a1 + 8));
}

uint64_t sub_100026D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 112, a2, v4, a4);
}

uint64_t sub_100026D54@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_100026D5C()
{
  return 0LL;
}

void sub_100026D68(Swift::String a1)
{
}

uint64_t sub_100026D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 120, v5, v4, a4);
}

BOOL sub_100026D80(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_100026D90(unint64_t *a1)
{
}

uint64_t sub_100026D98()
{
  return swift_retain(v0);
}

uint64_t sub_100026DA0(uint64_t a1)
{
  *(void *)(v1 + (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2) = a1;
  return swift_retain(a1);
}

uint64_t sub_100026DB0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_100026DC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 112, v5, v4, a4);
}

void sub_100026DD0(unint64_t *a1)
{
}

  ;
}

uint64_t sub_100026DE8()
{
  return v0;
}

uint64_t sub_100026DFC()
{
  return swift_release(*(void *)(v0 + 16));
}

uint64_t sub_100026E04()
{
  return static RemotePairingError.invalidOperation.getter();
}

  ;
}

uint64_t sub_100026E1C()
{
  return String.init<A>(describing:)(v1 - 120, v0);
}

uint64_t sub_100026E28@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_100026E34(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 1LL);
}

uint64_t sub_100026E3C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_100026E48()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100026E50()
{
  return swift_release(v0);
}

uint64_t sub_100026E58(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  return a2(255LL);
}

uint64_t sub_100026E64(uint64_t a1)
{
  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_100026E70(uint64_t a1)
{
  return swift_arrayDestroy(a1, 2LL);
}

uint64_t sub_100026E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_dynamicCast(a1, a2, a3, v3, 7LL);
}

uint64_t sub_100026E84@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(void *)(v1 + a1));
}

uint64_t sub_100026E8C(uint64_t a1)
{
  return swift_getWitnessTable(v1, a1);
}

uint64_t sub_100026E98()
{
  return String.init<A>(describing:)(v1 - 112, v0);
}

void sub_100026EA4()
{
  v0._countAndFlagsBits = 41LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

uint64_t sub_100026EB0()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 24));
}

uint64_t sub_100026EBC()
{
  return v0;
}

uint64_t sub_100026EC8(uint64_t a1)
{
  return sub_100026938(a1, v1);
}

  ;
}

uint64_t sub_100026EDC()
{
  return swift_release(v0);
}

void sub_100026EE4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100026EF0()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_100026EFC()
{
  return v0;
}

uint64_t sub_100026F10(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 0LL);
}

uint64_t sub_100026F18()
{
  return type metadata accessor for DiscoveredPairableHost.State(0LL);
}

uint64_t sub_100026F24()
{
  size_t v3 = 0LL;
  sub_1000270A8("kern.bootargs", 0LL, &v3);
  size_t v0 = v3;
  if ((v3 & 0x8000000000000000LL) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL);
    __break(1u);
  }

  else
  {
    if (v3)
    {
      uint64_t v1 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(v3, &type metadata for Int8);
      v1[2] = v0;
      bzero(v1 + 4, v0);
    }

    else
    {
      uint64_t v1 = &_swiftEmptyArrayStorage;
    }

    sub_1000270A8("kern.bootargs", v1 + 4, &v3);
    return sub_100027028((uint64_t)v1);
  }

  return result;
}

uint64_t sub_100027028(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v2 = result;
  int v3 = *(unsigned __int8 *)(result + 32);
  result += 32LL;
  if (v3)
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = v1 - 1;
    while (v5 != v4)
    {
    }

    __break(1u);
    goto LABEL_10;
  }

  uint64_t v4 = 0LL;
LABEL_8:
  uint64_t v7 = static String._fromUTF8Repairing(_:)(result, v4);
  swift_bridgeObjectRelease(v2);
  return v7;
}

uint64_t sub_1000270A8(const char *a1, void *a2, size_t *a3)
{
  return sysctlbyname(a1, a2, a3, 0LL, 0LL);
}

uint64_t sub_1000270B4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for SystemXPCListenerConnection(0LL);
  id v7 = a3;
  uint64_t v8 = static SystemXPCConnection.machServiceListenerConnection(name:targetQueue:)(a1, a2, a3);

  uint64_t v9 = swift_dynamicCastClassUnconditional(v8, v6, 0LL, 0LL, 0LL);
  uint64_t v10 = type metadata accessor for RemotePairingDeviceXPCServer();
  uint64_t v11 = sub_100016BCC(v10, 48LL);
  sub_100027158(v9, a1, a2, v7);
  return v11;
}

void *sub_100027158(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for XPCReplyProviding(0LL);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static XPCReplyProviding.passthrough.getter(v12);
  uint64_t v15 = sub_10000FD7C(&qword_100081B80);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v5[2] = XPCMessageDispatcher.init(xpcReplyProviding:inboundObserver:outboundObserver:)(v14, 0LL, 0LL, 0LL, 0LL);
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
    && _CocoaArrayWrapper.endIndex.getter(&_swiftEmptyArrayStorage))
  {
    sub_100047A90((unint64_t)&_swiftEmptyArrayStorage);
  }

  else
  {
    uint64_t v16 = &_swiftEmptySetSingleton;
  }

  v5[4] = a4;
  v5[5] = v16;
  v5[3] = a1;
  uint64_t v17 = sub_100016BCC((uint64_t)&unk_1000772B0, 24LL);
  sub_100026E64(v17);
  uint64_t v18 = (void *)sub_100016BCC((uint64_t)&unk_1000772D8, 40LL);
  v18[2] = v17;
  v18[3] = a2;
  v18[4] = a3;
  id v19 = a4;
  swift_retain(a1);
  swift_retain(v17);
  dispatch thunk of SystemXPCListenerConnection.setPeerConnectionHandler(_:)(sub_100027D60, v18);
  swift_release(a1);
  swift_release(v17);
  swift_release(v18);

  return v5;
}

uint64_t sub_1000272D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v54 = a3;
  uint64_t v7 = type metadata accessor for XPCError(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v10, v13);
  uint64_t v16 = (char *)&v50 - v15;
  __chkstk_darwin(v14, v17);
  id v19 = (char *)&v50 - v18;
  uint64_t v20 = sub_10000FD7C(&qword_100080F90);
  __chkstk_darwin(v20, v21);
  uint64_t v23 = (uint64_t *)((char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  a2 += 16LL;
  swift_beginAccess(a2, v57, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v25 = result;
    sub_100027D9C(a1, (uint64_t)v23, &qword_100080F90);
    uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v23, v20);
    if ((_DWORD)EnumCaseMultiPayload == 1)
    {
      uint64_t v27 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v8 + 32))(v19, v23, v7);
      os_log_type_t v28 = static os_log_type_t.error.getter(v27);
      uint64_t v29 = (os_log_s *)qword_1000845F0;
      uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
      v30(v16, v19, v7);
      if (os_log_type_enabled(v29, v28))
      {
        swift_bridgeObjectRetain_n(a4, 2LL);
        uint64_t v31 = swift_slowAlloc(22LL, -1LL);
        os_log_t v52 = v29;
        uint64_t v32 = v31;
        uint64_t v53 = swift_slowAlloc(64LL, -1LL);
        v55[0] = v53;
        *(_DWORD *)uint64_t v32 = 136315394;
        uint64_t v51 = v32 + 4;
        swift_bridgeObjectRetain(a4);
        sub_100045370(v54, a4, v55);
        uint64_t v56 = v33;
        LODWORD(v54) = v28;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v51, v32 + 12);
        swift_bridgeObjectRelease_n(a4, 3LL);
        *(_WORD *)(v32 + 12) = 2080;
        v30(v12, v16, v7);
        uint64_t v34 = String.init<A>(describing:)(v12, v7);
        uint64_t v36 = v35;
        sub_100045370(v34, v35, v55);
        uint64_t v56 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v32 + 14, v32 + 22);
        swift_bridgeObjectRelease(v36);
        uint64_t v38 = *(void (**)(char *, uint64_t))(v8 + 8);
        v38(v16, v7);
        _os_log_impl( (void *)&_mh_execute_header,  v52,  (os_log_type_t)v54,  "Failed to start %s with error: %s",  (uint8_t *)v32,  0x16u);
        uint64_t v39 = v53;
        swift_arrayDestroy(v53, 2LL);
        swift_slowDealloc(v39, -1LL, -1LL);
        swift_slowDealloc(v32, -1LL, -1LL);
        swift_release(v25);
        return ((uint64_t (*)(char *, uint64_t))v38)(v19, v7);
      }

      else
      {
        swift_release(v25);
        unint64_t v49 = *(void (**)(char *, uint64_t))(v8 + 8);
        v49(v16, v7);
        return ((uint64_t (*)(char *, uint64_t))v49)(v19, v7);
      }
    }

    else
    {
      uint64_t v40 = *v23;
      os_log_type_t v41 = static os_log_type_t.debug.getter(EnumCaseMultiPayload);
      uint64_t v42 = (os_log_s *)qword_1000845F0;
      os_log_type_t v43 = v41;
      if (os_log_type_enabled((os_log_t)qword_1000845F0, v41))
      {
        swift_bridgeObjectRetain_n(a4, 2LL);
        unint64_t v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v45 = swift_slowAlloc(32LL, -1LL);
        v55[0] = v45;
        *(_DWORD *)unint64_t v44 = 136315138;
        swift_bridgeObjectRetain(a4);
        sub_100045370(v54, a4, v55);
        uint64_t v56 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v44 + 4, v44 + 12);
        swift_bridgeObjectRelease_n(a4, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Peer connected to %s XPC service", v44, 0xCu);
        swift_arrayDestroy(v45, 1LL);
        swift_slowDealloc(v45, -1LL, -1LL);
        swift_slowDealloc(v44, -1LL, -1LL);
      }

      uint64_t v47 = type metadata accessor for SystemXPCPeerConnection(0LL);
      swift_dynamicCastClassUnconditional(v40, v47, 0LL, 0LL, 0LL);
      swift_beginAccess(v25 + 40, v55, 33LL, 0LL);
      swift_retain(v40);
      sub_10005261C();
      swift_endAccess(v55);
      swift_release(v56);
      uint64_t v48 = swift_dynamicCastClassUnconditional(v40, v47, 0LL, 0LL, 0LL);
      swift_retain(v40);
      sub_1000277B8(v48);
      swift_release_n(v40, 2LL);
      return swift_release(v25);
    }
  }

  return result;
}

uint64_t sub_1000277B8(uint64_t a1)
{
  uint64_t v3 = sub_100016BCC((uint64_t)&unk_1000772B0, 24LL);
  swift_weakInit(v3 + 16, v1);
  uint64_t v4 = sub_100016BCC((uint64_t)&unk_100077300, 24LL);
  sub_100026E64(v4);
  uint64_t v5 = sub_100016BCC((uint64_t)&unk_100077328, 32LL);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  swift_retain(v3);
  swift_retain(v4);
  dispatch thunk of SystemXPCPeerConnection.setEventHandler(_:)(sub_100027D94, v5);
  swift_release(v3);
  swift_release(v4);
  uint64_t v6 = swift_release(v5);
  return dispatch thunk of XPCConnection.activate()(v6);
}

uint64_t sub_1000278C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v50 = sub_10000FD7C(&qword_1000810F8);
  __chkstk_darwin(v50, v6);
  uint64_t v51 = (uint64_t *)((char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = type metadata accessor for XPCDictionary(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v11, v14);
  uint64_t v17 = (char *)&v46 - v16;
  __chkstk_darwin(v15, v18);
  uint64_t v20 = (char *)&v46 - v19;
  uint64_t v21 = sub_10000FD7C(&qword_100081A90);
  __chkstk_darwin(v21, v22);
  uint64_t v24 = (char *)&v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v55, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v26 = result;
    uint64_t v27 = a3 + 16;
    swift_beginAccess(v27, v54, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v27);
    if (Strong)
    {
      uint64_t v29 = Strong;
      sub_100027D9C(a1, (uint64_t)v24, &qword_100081A90);
      if (swift_getEnumCaseMultiPayload(v24, v21) == 1)
      {
        swift_beginAccess(v26 + 40, v53, 33LL, 0LL);
        uint64_t v30 = sub_1000542A4(v29);
        swift_endAccess(v53);
        swift_release(v29);
        swift_release(v26);
        swift_release(v30);
        return sub_10001DB68((uint64_t)v24, &qword_100081A90);
      }

      uint64_t v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v20, v24, v8);
      os_log_type_t v32 = static os_log_type_t.debug.getter(v31);
      uint64_t v33 = (os_log_s *)qword_1000845F0;
      uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
      v34(v17, v20, v8);
      os_log_t v48 = v33;
      if (os_log_type_enabled(v33, v32))
      {
        uint64_t v35 = swift_slowAlloc(12LL, -1LL);
        unint64_t v49 = v34;
        uint64_t v36 = (uint8_t *)v35;
        uint64_t v37 = swift_slowAlloc(32LL, -1LL);
        v53[0] = v37;
        int v47 = v32;
        *(_DWORD *)uint64_t v36 = 136315138;
        uint64_t v46 = v36 + 4;
        v49(v13, v17, v8);
        uint64_t v38 = String.init<A>(describing:)(v13, v8);
        uint64_t v40 = v39;
        sub_100045370(v38, v39, v53);
        uint64_t v52 = v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v46, v36 + 12);
        swift_bridgeObjectRelease(v40);
        uint64_t v42 = *(void (**)(char *, uint64_t))(v9 + 8);
        v42(v17, v8);
        _os_log_impl( (void *)&_mh_execute_header,  v48,  (os_log_type_t)v47,  "Received XPC event from local peer: %s",  v36,  0xCu);
        swift_arrayDestroy(v37, 1LL);
        swift_slowDealloc(v37, -1LL, -1LL);
        os_log_type_t v43 = v36;
        uint64_t v34 = v49;
        swift_slowDealloc(v43, -1LL, -1LL);
      }

      else
      {
        uint64_t v42 = *(void (**)(char *, uint64_t))(v9 + 8);
        v42(v17, v8);
      }

      uint64_t v44 = (uint64_t)v51;
      uint64_t v45 = (char *)v51 + *(int *)(v50 + 48);
      *uint64_t v51 = v29;
      v34(v45, v20, v8);
      swift_retain(v29);
      dispatch thunk of CodableDispatcher.dispatch(encodedData:context:completion:)(v20, v44, 0LL, 0LL);
      swift_release(v29);
      sub_10001DB68(v44, &qword_1000810F8);
      v42(v20, v8);
    }

    return swift_release(v26);
  }

  return result;
}

uint64_t sub_100027CA4()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return v0;
}

uint64_t sub_100027CD4()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t type metadata accessor for RemotePairingDeviceXPCServer()
{
  return objc_opt_self(&OBJC_CLASS____TtC20remotepairingdeviced28RemotePairingDeviceXPCServer);
}

uint64_t sub_100027D14()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100027D38()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100027D60(uint64_t a1)
{
  return sub_1000272D8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100027D6C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100027D94(uint64_t a1)
{
  return sub_1000278C8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100027D9C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000FD7C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_100027DE4(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void **)(v4 - 8);
  uint64_t v6 = v5[8];
  __chkstk_darwin(v4, v7);
  uint64_t v8 = (void (*)(char *, uint64_t, uint64_t))v5[2];
  v8((char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1, v4);
  if (v3)
  {
    uint64_t v9 = (void (*)(char *, uint64_t))v5[1];
    v9((char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL), v4);
    uint64_t result = swift_bridgeObjectRelease(v3);
  }

  else
  {
    sub_100055200();
    uint64_t v12 = v11;
    uint64_t v9 = (void (*)(char *, uint64_t))v5[1];
    v9((char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL), v4);
    uint64_t result = swift_bridgeObjectRelease(v12);
    if (!v12) {
      return result;
    }
  }

  uint64_t v13 = static os_log_type_t.default.getter(result);
  os_log_type_t v14 = v13;
  uint64_t v15 = (os_log_s *)qword_1000845F0;
  __chkstk_darwin(v13, v16);
  uint64_t v17 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v8(v17, a1, v4);
  os_log_type_t v18 = v14;
  if (!os_log_type_enabled(v15, v14)) {
    return ((uint64_t (*)(char *, uint64_t))v9)(v17, v4);
  }
  v25[1] = v25;
  uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v20 = swift_slowAlloc(32LL, -1LL);
  uint64_t v27 = v20;
  *(_DWORD *)uint64_t v19 = 136446210;
  uint64_t v21 = UUID.uuidString.getter(v20);
  uint64_t v23 = v22;
  sub_100045370(v21, v22, &v27);
  uint64_t v26 = v24;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v19 + 4, v19 + 12);
  swift_bridgeObjectRelease(v23);
  v9(v17, v4);
  _os_log_impl((void *)&_mh_execute_header, v15, v18, "Ended promptless pairing session %{public}s", v19, 0xCu);
  swift_arrayDestroy(v20, 1LL);
  swift_slowDealloc(v20, -1LL, -1LL);
  return swift_slowDealloc(v19, -1LL, -1LL);
}

uint64_t sub_100028018(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1;
  os_log_type_t v9 = static os_log_type_t.default.getter(a1);
  uint64_t v10 = (os_log_s *)qword_1000845F0;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  os_log_t v48 = (uint64_t *)&v43;
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v8, v11);
  BOOL v16 = os_log_type_enabled(v10, v9);
  if ((a2 & 1) != 0)
  {
    if (v16)
    {
      uint64_t v47 = v4;
      uint64_t v17 = swift_slowAlloc(12LL, -1LL);
      uint64_t v44 = a3;
      os_log_type_t v18 = (uint8_t *)v17;
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      uint64_t v46 = a4;
      uint64_t v20 = v19;
      uint64_t v50 = v19;
      *(_DWORD *)os_log_type_t v18 = 136446210;
      os_log_type_t v43 = v18 + 4;
      uint64_t v21 = UUID.uuidString.getter(v19);
      uint64_t v45 = v8;
      uint64_t v23 = v22;
      sub_100045370(v21, v22, &v50);
      uint64_t v49 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v43, v18 + 12);
      uint64_t v25 = v23;
      uint64_t v8 = v45;
      swift_bridgeObjectRelease(v25);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
      _os_log_impl( (void *)&_mh_execute_header,  v10,  v9,  "Automation promptless pairing allowed by session %{public}s",  v18,  0xCu);
      swift_arrayDestroy(v20, 1LL);
      uint64_t v26 = v20;
      a4 = v46;
      swift_slowDealloc(v26, -1LL, -1LL);
      uint64_t v27 = v18;
      a3 = v44;
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    }
  }

  else if (v16)
  {
    uint64_t v44 = a3;
    os_log_type_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v29 = swift_slowAlloc(32LL, -1LL);
    uint64_t v45 = v8;
    uint64_t v30 = v29;
    uint64_t v50 = v29;
    uint64_t v46 = a4;
    uint64_t v47 = v4;
    *(_DWORD *)os_log_type_t v28 = 136446210;
    os_log_type_t v43 = v28 + 4;
    uint64_t v31 = UUID.uuidString.getter(v29);
    uint64_t v33 = v32;
    sub_100045370(v31, v32, &v50);
    uint64_t v49 = v34;
    a4 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v43, v28 + 12);
    uint64_t v35 = v33;
    a3 = v44;
    swift_bridgeObjectRelease(v35);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v9,  "Non-automation promptless pairing allowed by session %{public}s",  v28,  0xCu);
    swift_arrayDestroy(v30, 1LL);
    uint64_t v36 = v30;
    uint64_t v8 = v45;
    swift_slowDealloc(v36, -1LL, -1LL);
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }

  swift_bridgeObjectRetain(a4);
  return sub_100055740(a3, a4, v8, v37, v38, v39, v40, v41, (uint64_t)v43, v44);
}

uint64_t sub_10002833C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10000FD7C(&qword_100081D20);
  uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64LL);
  __chkstk_darwin(v6, v8);
  unint64_t v9 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  swift_bridgeObjectRetain(a1);
  sub_10004B0C0(v10, (uint64_t)&v35 - v9);
  swift_bridgeObjectRelease(a1);
  uint64_t v11 = sub_10000FD7C(&qword_100081D28);
  if (sub_10001D9C8((uint64_t)&v35 - v9, 1LL, v11) != 1)
  {
    uint64_t v19 = (uint64_t *)((char *)&v35 + *(int *)(v11 + 48) - v9);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v22 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8LL))((char *)&v35 - v9, v22);
    uint64_t v23 = sub_10000FD7C(&qword_100081D18);
    uint64_t v24 = (void *)(a3 + *(int *)(v23 + 48));
    uint64_t v25 = enum case for PermittedPromptlessPairingMode.automation(_:);
    uint64_t v26 = type metadata accessor for PermittedPromptlessPairingMode(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 104LL))(a3, v25, v26);
    void *v24 = v20;
    v24[1] = v21;
LABEL_6:
    uint64_t v17 = a3;
    uint64_t v18 = 0LL;
    uint64_t v16 = v23;
    return sub_10001D930(v17, v18, 1LL, v16);
  }

  uint64_t v12 = sub_100029FD0((uint64_t)&v35 - v9);
  __chkstk_darwin(v12, v13);
  uint64_t v14 = (char *)&v35 - v9;
  swift_bridgeObjectRetain(a2);
  sub_10004B0C0(v15, (uint64_t)&v35 - v9);
  swift_bridgeObjectRelease(a2);
  if (sub_10001D9C8((uint64_t)&v35 - v9, 1LL, v11) != 1)
  {
    uint64_t v27 = &v14[*(int *)(v11 + 48)];
    uint64_t v28 = *(void *)v27;
    uint64_t v29 = *((void *)v27 + 1);
    uint64_t v30 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v30 - 8) + 8LL))(v14, v30);
    uint64_t v23 = sub_10000FD7C(&qword_100081D18);
    uint64_t v31 = (void *)(a3 + *(int *)(v23 + 48));
    uint64_t v32 = enum case for PermittedPromptlessPairingMode.nonAutomation(_:);
    uint64_t v33 = type metadata accessor for PermittedPromptlessPairingMode(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 104LL))(a3, v32, v33);
    *uint64_t v31 = v28;
    v31[1] = v29;
    goto LABEL_6;
  }

  sub_100029FD0((uint64_t)&v35 - v9);
  uint64_t v16 = sub_10000FD7C(&qword_100081D18);
  uint64_t v17 = a3;
  uint64_t v18 = 1LL;
  return sub_10001D930(v17, v18, 1LL, v16);
}

uint64_t sub_100028574()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v2);
  return v1;
}

uint64_t sub_1000285C4()
{
  uint64_t v66 = v1;
  uint64_t v67 = v2;
  uint64_t v3 = v0;
  id v58 = v4;
  unint64_t v56 = sub_100029DDC();
  uint64_t v5 = sub_100016D38();
  uint64_t v59 = *(void *)(*(void *)(v5 - 8) + 64LL);
  uint64_t v7 = __chkstk_darwin(v5, v6);
  unint64_t v60 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  unint64_t v9 = (char *)&v54 - v60;
  static DispatchQoS.userInitiated.getter(v7);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v64 = v10;
  uint64_t v61 = *(void *)(v11 + 64);
  __chkstk_darwin(v10, v12);
  unint64_t v57 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v14 = (char *)&v54 - v57;
  int v62 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v63 = *(void (**)(char *))(v15 + 104);
  v63((char *)&v54 - v57);
  uint64_t v16 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  uint64_t v17 = *(void *)(*(void *)(v16 - 8) + 64LL);
  __chkstk_darwin(v16, &type metadata accessor for OS_dispatch_queue.Attributes);
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v54 = v17;
  unint64_t v55 = v18;
  int64_t v65 = &_swiftEmptyArrayStorage;
  sub_100029E64( (unint64_t *)&unk_100082130,  v19,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v21 = v20;
  uint64_t v22 = sub_10000FD7C(&qword_100081D08);
  sub_100029EA0((unint64_t *)&unk_100082140, &qword_100081D08);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v65, v22, v23, v16, v21);
  *(void *)(v3 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002BLL,  0x8000000100067D30LL,  v9,  (char *)&v54 - v18,  v14,  0LL);
  sub_10001DCE0();
  sub_100029E64( (unint64_t *)&qword_100082220,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v24 = sub_10002A1C8();
  uint64_t v25 = sub_10002A1C8();
  *(void *)(v3 + 48) = v24;
  *(void *)(v3 + 56) = v25;
  id v26 = [objc_allocWithZone((Class)USBListener) init];
  *(void *)(v3 + 64) = v26;
  *(_BYTE *)(v3 + 72) = 0;
  *(void *)(v3 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = 0LL;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v58;
  __chkstk_darwin(v26, v27);
  uint64_t v28 = (char *)&v54 - v18;
  id v58 = v29;
  uint64_t v30 = ((uint64_t (*)(void))static OS_dispatch_queue.Attributes.concurrent.getter)();
  __chkstk_darwin(v30, v31);
  unint64_t v32 = v57;
  sub_10002A248((uint64_t)&v54 - v57);
  uint64_t v33 = ((uint64_t (*)(void))type metadata accessor for DispatchQoS.QoSClass)(0LL);
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33, v35);
  sub_10000FFCC();
  uint64_t v38 = v37 - v36;
  (*(void (**)(uint64_t, void, uint64_t))(v34 + 104))( v37 - v36,  enum case for DispatchQoS.QoSClass.userInteractive(_:),  v33);
  uint64_t v39 = ((uint64_t (*)(uint64_t))static OS_dispatch_queue.global(qos:))(v38);
  uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v38, v33);
  uint64_t v42 = __chkstk_darwin(v40, v41);
  unint64_t v43 = v60;
  static DispatchQoS.unspecified.getter(v42);
  uint64_t v44 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000032LL,  0x8000000100067D60LL,  (char *)&v54 - v43,  v28,  (char *)&v54 - v32,  v39);
  *(void *)(v3 + 32) = v44;
  uint64_t v46 = __chkstk_darwin(v44, v45);
  uint64_t v47 = (char *)&v54 - v55;
  uint64_t v48 = ((uint64_t (*)(uint64_t))static OS_dispatch_queue.Attributes.concurrent.getter)(v46);
  __chkstk_darwin(v48, v49);
  uint64_t v50 = sub_10002A248((uint64_t)&v54 - v32);
  __chkstk_darwin(v50, v51);
  static DispatchQoS.unspecified.getter(v44);
  uint64_t v52 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000031LL,  0x8000000100067DA0LL,  (char *)&v54 - v43,  v47,  (char *)&v54 - v32,  v44);

  *(void *)(v3 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = v52;
  return v3;
}

void sub_1000289E4()
{
  uint64_t v3 = v2;
  uint64_t v31 = v4;
  int v30 = v5;
  uint64_t v7 = v6;
  sub_10002A240();
  uint64_t v32 = *(void *)(v0 + 32);
  uint64_t v8 = sub_100016C60();
  uint64_t v33 = *(void *)(v8 - 8);
  uint64_t v34 = v8;
  __chkstk_darwin(v8, v9);
  sub_10002A190();
  uint64_t v10 = sub_10000FF6C((uint64_t)&unk_100077450);
  sub_10002A20C(v10);
  uint64_t v11 = sub_10001DCE0();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11, v14);
  uint64_t v15 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v7, v11);
  uint64_t v16 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v17 = (v16 + 24) & ~v16;
  uint64_t v18 = v17 + v13;
  uint64_t v19 = swift_allocObject(&unk_1000775E0, (v18 & 0xFFFFFFFFFFFFFFF8LL) + 24, v16 | 7);
  unint64_t v20 = (v18 & 0xFFFFFFFFFFFFFFF8LL) + v19;
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = v10;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v19 + v17, v15, v11);
  *(_BYTE *)(v19 + v18) = v30;
  *(void *)(v20 + 8) = v31;
  *(void *)(v20 + swift_weakDestroy(v0 + 16) = v3;
  uint64_t v37 = sub_10002A120;
  uint64_t v38 = v19;
  uint64_t v35 = _NSConcreteStackBlock;
  uint64_t v36 = 1107296256LL;
  uint64_t v21 = sub_100016C54((uint64_t)sub_100040708);
  uint64_t v22 = sub_100016D38();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v24);
  sub_10000FFCC();
  uint64_t v27 = v26 - v25;
  swift_retain(v10);
  swift_bridgeObjectRetain(v3);
  static DispatchQoS.unspecified.getter(v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v27, v1, v21);
  _Block_release(v21);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v27, v22);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v1, v34);
  swift_release(v10);
  sub_100016BD4();
  sub_10000FF80();
}

void sub_100028BCC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1 + 16;
  swift_beginAccess(a1 + 16, v16, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v9);
  if (Strong)
  {
    uint64_t v11 = Strong;
    swift_beginAccess(Strong + 48, v15, 33LL, 0LL);
    sub_100028018(a2, a3 & 1, a4, a5);
    swift_endAccess(v15);
    OS_dispatch_queue.assertOnQueueHierarchy()();
    swift_release(v11);
  }

  swift_beginAccess(v9, v15, 0LL, 0LL);
  uint64_t v12 = swift_weakLoadStrong(v9);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = (dispatch_object_s *)*(id *)(v12 + 40);
    swift_release(v13);
    dispatch_resume(v14);
  }

void sub_100028CC8()
{
  uint64_t v3 = v2;
  sub_10002A240();
  uint64_t v20 = sub_100016C60();
  uint64_t v4 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v5);
  sub_10002A190();
  uint64_t v6 = sub_10000FF6C((uint64_t)&unk_100077450);
  swift_weakInit(v6 + 16, v0);
  uint64_t v7 = sub_10001DCE0();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))( (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v3,  v7);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = (v11 + 24) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_100077590, v12 + v9, v11 | 7);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = v6;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))( v13 + v12,  (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v7);
  uint64_t v23 = sub_10002A06C;
  uint64_t v24 = v13;
  uint64_t v21 = _NSConcreteStackBlock;
  uint64_t v22 = 1107296256LL;
  uint64_t v14 = sub_100016C54((uint64_t)sub_100040708);
  uint64_t v15 = sub_100016D38();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  uint64_t v18 = sub_10002A1AC();
  static DispatchQoS.unspecified.getter(v18);
  sub_10002A1F8();
  _Block_release(v14);
  sub_10002A228(*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v20);
  sub_10002A234();
  sub_100016BD4();
  sub_10000FF80();
}

void sub_100028E54(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    uint64_t v5 = Strong;
    swift_beginAccess(Strong + 48, v9, 33LL, 0LL);
    sub_100027DE4(a2);
    swift_endAccess(v9);
    OS_dispatch_queue.assertOnQueueHierarchy()();
    swift_release(v5);
  }

  swift_beginAccess(v3, v9, 0LL, 0LL);
  uint64_t v6 = swift_weakLoadStrong(v3);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = (dispatch_object_s *)*(id *)(v6 + 40);
    swift_release(v7);
    dispatch_resume(v8);
  }

void sub_100028F28()
{
  uint64_t v2 = sub_100016C60();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  sub_10002A190();
  uint64_t v5 = sub_10000FF6C((uint64_t)&unk_100077450);
  swift_weakInit(v5 + 16, v0);
  uint64_t v6 = sub_100016C54((uint64_t)sub_100040708);
  uint64_t v7 = sub_100016D38();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v10 = sub_10002A1AC();
  static DispatchQoS.unspecified.getter(v10);
  sub_10002A1F8();
  _Block_release(v6);
  sub_10002A228(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  sub_10002A234();
  sub_100016BD4();
  sub_10000FF80();
}

void sub_10002902C(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = Strong;
    swift_beginAccess(Strong + 48, v9, 33LL, 0LL);
    sub_10000FD7C((uint64_t *)&unk_100081D30);
    Dictionary._Variant.removeAll(keepingCapacity:)(0);
    Dictionary._Variant.removeAll(keepingCapacity:)(0);
    uint64_t v5 = static os_log_type_t.default.getter(v4);
    os_log(_:dso:log:_:_:)( v5,  &_mh_execute_header,  qword_1000845F0,  "Ended all promptless pairing sessions",  37LL,  2LL,  &_swiftEmptyArrayStorage);
    swift_endAccess(v9);
    OS_dispatch_queue.assertOnQueueHierarchy()();
    swift_release(v3);
  }

  swift_beginAccess(v1, v9, 0LL, 0LL);
  uint64_t v6 = swift_weakLoadStrong(v1);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = (dispatch_object_s *)*(id *)(v6 + 40);
    swift_release(v7);
    dispatch_resume(v8);
  }

uint64_t sub_10002914C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000FD7C(&qword_100081D10);
  __chkstk_darwin(v4, v5);
  sub_10000FFCC();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = sub_10000FD7C(&qword_100081D18);
  sub_10001D930(v8, 1LL, 1LL, v9);
  uint64_t v10 = *(dispatch_queue_s **)(v2 + 40);
  uint64_t v11 = sub_100010010((uint64_t)&unk_1000774F0);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v8;
  *(void *)(v11 + 24) = v2;
  uint64_t v12 = sub_100010010((uint64_t)&unk_100077518);
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = sub_100029F08;
  *(void *)(v12 + 24) = v11;
  aBlock[4] = sub_100029F20;
  void aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100029360;
  aBlock[3] = &unk_100077530;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain(v2);
  swift_retain(v12);
  swift_release();
  dispatch_sync(v10, v13);
  _Block_release(v13);
  LOBYTE((*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2) = swift_isEscapingClosureAtFileLocation(v12, "", 102LL, 195LL, 52LL, 1LL);
  uint64_t result = swift_release();
  if ((v2 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    sub_100029F40(v8, a1);
    return swift_release();
  }

  return result;
}

uint64_t sub_1000292CC(uint64_t a1)
{
  uint64_t v2 = sub_10000FD7C(&qword_100081D10);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100028574();
  uint64_t v8 = v7;
  sub_10002833C(v6, v7, (uint64_t)v5);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v6);
  return sub_100029F88((uint64_t)v5, a1);
}

uint64_t sub_100029360(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_100029380()
{
  uint64_t v1 = *(void **)(v0 + 64);
  uint64_t v2 = sub_10000FF6C((uint64_t)&unk_100077450);
  sub_10002A20C(v2);
  v14[4] = sub_100029EDC;
  uint64_t v15 = v2;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256LL;
  v14[2] = sub_100040708;
  v14[3] = &unk_1000774B8;
  uint64_t v3 = _Block_copy(v14);
  uint64_t v4 = v15;
  id v5 = v1;
  swift_release(v4);
  LODWORD(v4) = [v5 addDisconnectHandler:v3];
  _Block_release(v3);

  if ((_DWORD)v4)
  {
    id v7 = [*(id *)(v0 + 64) startOnQueue:*(void *)(v0 + 16)];
    if ((_DWORD)v7)
    {
      uint64_t v8 = static os_log_type_t.debug.getter(v7);
      sub_100012380(v8, (uint64_t)&_mh_execute_header, qword_1000845F0, (uint64_t)"USB listener started", 20LL);
      return 1LL;
    }

    uint64_t v10 = static os_log_type_t.error.getter(v7);
    uint64_t v11 = qword_1000845F0;
    uint64_t v12 = "Failed to start USB listener.";
    uint64_t v13 = 29LL;
  }

  else
  {
    uint64_t v10 = static os_log_type_t.error.getter(v6);
    uint64_t v11 = qword_1000845F0;
    uint64_t v12 = "Failed to register USB disconnect handler.";
    uint64_t v13 = 42LL;
  }

  sub_100012380(v10, (uint64_t)&_mh_execute_header, v11, (uint64_t)v12, v13);
  return 0LL;
}

uint64_t sub_1000294E8(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = Strong;
    sub_100028F28();
    uint64_t Strong = swift_release(v3);
  }

  uint64_t v4 = static os_log_type_t.default.getter(Strong);
  return os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  qword_1000845F0,  "USB host disconnected; promptless pairing disabled.",
           51LL,
           2LL,
           &_swiftEmptyArrayStorage);
}

void sub_10002956C()
{
  uint64_t v1 = *(void **)(v0 + 80);
  if (v1)
  {
    uint64_t v2 = v1;
    CFUserNotificationCancel(v2);
    uint64_t v3 = *(void **)(v0 + 80);
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = 0LL;

    OS_dispatch_queue.assertOnQueueHierarchy()();
  }

  *(_BYTE *)(v0 + 72) = 0;
  OS_dispatch_queue.assertOnQueueHierarchy()();
}

void sub_1000295C8()
{
  uint64_t v61 = sub_10001DCE0();
  uint64_t v59 = *(void *)(v61 - 8);
  uint64_t v2 = __chkstk_darwin(v61, v1);
  unint64_t v56 = v3;
  unint64_t v51 = ((unint64_t)v3 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v4 = (char *)v49 - v51;
  UUID.init()(v2);
  unint64_t v60 = v4;
  sub_1000289E4();
  if (([*(id *)(v0 + 64) active] & 1) == 0)
  {
    uint64_t v5 = sub_100029380();
    if ((v5 & 1) == 0)
    {
      uint64_t v6 = static os_log_type_t.error.getter(v5);
      sub_100012380(v6, (uint64_t)&_mh_execute_header, qword_1000845F0, (uint64_t)"Failed to start USB listener.", 29LL);
    }
  }

  uint64_t v57 = *(void *)(v0 + 16);
  uint64_t v7 = type metadata accessor for DispatchTime(0LL);
  id v58 = v49;
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v55 = v7;
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v52 = (char *)v49;
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v14 = (char *)v49 - v13;
  static DispatchTime.now()(v12);
  uint64_t v15 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  sub_10000FFCC();
  uint64_t v20 = v19 - v18;
  *(void *)(v19 - v18) = 10LL;
  (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))( v19 - v18,  enum case for DispatchTimeInterval.seconds(_:),  v15);
  + infix(_:_:)(v14, v20);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v20, v15);
  uint64_t v54 = *(void (**)(char *, uint64_t))(v8 + 8);
  v54(v14, v7);
  uint64_t v21 = sub_10000FF6C((uint64_t)&unk_100077450);
  uint64_t v22 = sub_10002A20C(v21);
  uint64_t v53 = v49;
  uint64_t v23 = v56;
  __chkstk_darwin(v22, v24);
  uint64_t v25 = (char *)v49 - v51;
  uint64_t v26 = v59;
  uint64_t v27 = v61;
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))((char *)v49 - v51, v60, v61);
  uint64_t v28 = *(unsigned __int8 *)(v26 + 80);
  uint64_t v29 = (v28 + 24) & ~v28;
  uint64_t v30 = swift_allocObject(&unk_100077478, (char *)v23 + v29, v28 | 7);
  uint64_t v50 = v21;
  *(void *)(v30 + swift_weakDestroy(v0 + 16) = v21;
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v30 + v29, v25, v27);
  v63[4] = sub_100029E40;
  v63[5] = v30;
  v63[0] = _NSConcreteStackBlock;
  v63[1] = 1107296256LL;
  v63[2] = sub_100040708;
  v63[3] = &unk_100077490;
  uint64_t v31 = _Block_copy(v63);
  unint64_t v51 = sub_100016D38();
  unint64_t v56 = v49;
  uint64_t v32 = *(void *)(v51 - 8);
  __chkstk_darwin(v51, v33);
  sub_10000FFCC();
  uint64_t v36 = v35 - v34;
  uint64_t v37 = swift_retain(v21);
  static DispatchQoS.unspecified.getter(v37);
  uint64_t v38 = sub_100016C60();
  v49[1] = v49;
  uint64_t v39 = *(void *)(v38 - 8);
  __chkstk_darwin(v38, &type metadata accessor for DispatchWorkItemFlags);
  sub_10000FFCC();
  uint64_t v42 = v41 - v40;
  int v62 = &_swiftEmptyArrayStorage;
  sub_100029E64( (unint64_t *)&qword_1000813C0,  v43,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v45 = v44;
  uint64_t v46 = sub_10000FD7C(&qword_100081100);
  sub_100029EA0((unint64_t *)&qword_1000813D0, &qword_100081100);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v62, v46, v47, v38, v45);
  uint64_t v48 = v52;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v52, v36, v42, v31);
  _Block_release(v31);
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v42, v38);
  (*(void (**)(uint64_t, unint64_t))(v32 + 8))(v36, v51);
  v54(v48, v55);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v60, v61);
  swift_release(v50);
  sub_100016BD4();
  sub_10000FF80();
}

uint64_t sub_1000299F8(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    uint64_t v3 = result;
    sub_100028CC8();
    return swift_release(v3);
  }

  return result;
}

void sub_100029A54()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_bridgeObjectRelease(v1);

  sub_100016C1C();
}

uint64_t sub_100029AAC()
{
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

uint64_t type metadata accessor for PairingConsentCollector()
{
  return objc_opt_self(&OBJC_CLASS____TtC20remotepairingdeviced23PairingConsentCollector);
}

uint64_t initializeBufferWithCopyOfBuffer for PairingConsentCollector.State(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  id v4 = v3;
  return a1;
}

void destroy for PairingConsentCollector.State(uint64_t a1)
{
}

uint64_t assignWithCopy for PairingConsentCollector.State(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void **)(a1 + 8);
  id v4 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  id v5 = v4;

  return a1;
}

__n128 initializeWithTake for PromptlessPairingSessionState(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t assignWithTake for PairingConsentCollector.State(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for PairingConsentCollector.State(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(__chkstk_darwin(v2, v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PairingConsentCollector.State( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PairingConsentCollector.State()
{
  return &type metadata for PairingConsentCollector.State;
}

uint64_t destroy for PromptlessPairingSessionState(void *a1)
{
  return swift_bridgeObjectRelease(a1[1]);
}

void _s20remotepairingdeviced29PromptlessPairingSessionStateVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  sub_100016C1C();
}

uint64_t *assignWithCopy for PromptlessPairingSessionState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *assignWithTake for PromptlessPairingSessionState(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptlessPairingSessionState(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD((*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD((*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PromptlessPairingSessionState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PromptlessPairingSessionState()
{
  return &type metadata for PromptlessPairingSessionState;
}

unint64_t sub_100029DDC()
{
  unint64_t result = qword_100082170;
  if (!qword_100082170)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100082170);
  }

  return result;
}

uint64_t sub_100029E18()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100029E40()
{
  return sub_10002A078((uint64_t (*)(void, uint64_t))sub_1000299F8);
}

uint64_t sub_100029E4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100029E5C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_100029E64(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  if (!*a1)
  {
    uint64_t v5 = a2(255LL);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }

  sub_100016C1C();
}

void sub_100029EA0(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_10001214C(a2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for [A], v3), a1);
  }

  sub_100016C1C();
}

uint64_t sub_100029EDC()
{
  return sub_1000294E8(v0);
}

uint64_t sub_100029EE4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100029F08()
{
  return sub_1000292CC(*(void *)(v0 + 16));
}

uint64_t sub_100029F10()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100029F20()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100029F40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD7C(&qword_100081D10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100029F88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD7C(&qword_100081D10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100029FD0(uint64_t a1)
{
  uint64_t v2 = sub_10000FD7C(&qword_100081D20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_10002A010()
{
}

uint64_t sub_10002A01C()
{
  uint64_t v3 = v1 + v2;
  uint64_t v5 = v4 | 7;
  swift_release(*(void *)(v0 + 16));
  sub_10002A218();
  return swift_deallocObject(v0, v3, v5);
}

uint64_t sub_10002A06C()
{
  return sub_10002A078((uint64_t (*)(void, uint64_t))sub_100028E54);
}

uint64_t sub_10002A078(uint64_t (*a1)(void, uint64_t))
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(sub_10001DCE0() - 8) + 80LL);
  return a1(*(void *)(v1 + 16), v1 + ((v2 + 24) & ~v2));
}

uint64_t sub_10002A0B4()
{
  uint64_t v3 = v1 + v2;
  uint64_t v5 = v4 | 7;
  uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8LL) + v0;
  unint64_t v7 = (v3 & 0xFFFFFFFFFFFFFFF8LL) + 24;
  swift_release(*(void *)(v0 + 16));
  sub_10002A218();
  swift_bridgeObjectRelease(*(void *)(v6 + 16));
  return swift_deallocObject(v0, v7, v5);
}

void sub_10002A120()
{
  uint64_t v1 = *(void *)(sub_10001DCE0() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_100028BCC( *(void *)(v0 + 16),  v0 + v2,  *(_BYTE *)(v0 + v2 + *(void *)(v1 + 64)),  *(void *)(((v2 + *(void *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8LL) + v0 + 8),  *(void *)(((v2 + *(void *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8LL) + v0 + 16));
}

uint64_t sub_10002A190()
{
  return static DispatchWorkItemFlags.barrier.getter();
}

uint64_t sub_10002A1AC()
{
  return swift_retain(v0);
}

uint64_t sub_10002A1C8()
{
  return Dictionary.init(dictionaryLiteral:)(v3, v2, v1, v0);
}

  ;
}

uint64_t sub_10002A1F8()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v2, v0, v1);
}

uint64_t sub_10002A20C(uint64_t a1)
{
  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_10002A218()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1 + v3, v0);
}

uint64_t sub_10002A228@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_10002A234()
{
  return swift_release(v0);
}

void sub_10002A240()
{
}

uint64_t sub_10002A248(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void, void))(v1 - 104))( a1,  *(unsigned int *)(v1 - 108),  *(void *)(v1 - 96));
}

void sub_10002A254()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for ControlChannelConnection.InvalidationReason(0LL);
  uint64_t v83 = *(void *)(v7 - 8);
  uint64_t v84 = v7;
  sub_100026C0C();
  __chkstk_darwin(v8, v9);
  sub_10001E144();
  uint64_t v82 = v10;
  id v11 = (id)type metadata accessor for ControlChannelConnection.State(0LL);
  sub_1000319E8();
  __chkstk_darwin(v12, v13);
  sub_10001E144();
  uint64_t v93 = v14;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v4, v2);
  if ((v15 & 0xC000000000000001LL) != 0)
  {
    if (v15 >= 0) {
      v15 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    __CocoaSet.makeIterator()(v15);
    sub_10000FF78();
    sub_1000318B8( &qword_100082090,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
    sub_100031AB8(v16);
    uint64_t v15 = v97[1];
    uint64_t v89 = v97[2];
    uint64_t v17 = v97[3];
    int64_t v18 = v97[4];
    unint64_t v19 = v97[5];
  }

  else
  {
    int64_t v18 = 0LL;
    uint64_t v20 = -1LL << *(_BYTE *)(v15 + 32);
    uint64_t v21 = *(void *)(v15 + 56);
    uint64_t v89 = v15 + 56;
    uint64_t v17 = ~v20;
    uint64_t v22 = -v20;
    if (v22 < 64) {
      uint64_t v23 = ~(-1LL << v22);
    }
    else {
      uint64_t v23 = -1LL;
    }
    unint64_t v19 = v23 & v21;
  }

  uint64_t v24 = v93;
  uint64_t v74 = v17;
  uint64_t v86 = v15 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v88 = (unint64_t)(v17 + 64) >> 6;
  int v94 = enum case for ControlChannelConnection.State.authenticated(_:);
  unsigned int v81 = enum case for ControlChannelConnection.InvalidationReason.peerUnpaired(_:);
  uint64_t v85 = (uint64_t)&type metadata for Swift.AnyObject + 8;
  uint64_t v80 = v6;
  id v79 = v11;
  uint64_t v95 = v15;
  uint64_t v90 = v0;
  while (1)
  {
    if (v15 < 0)
    {
      uint64_t v28 = __CocoaSet.Iterator.next()(v15);
      if (!v28) {
        goto LABEL_54;
      }
      uint64_t v29 = v28;
      uint64_t v96 = v28;
      sub_10000FF78();
      sub_100031D1C();
      sub_100026E78((uint64_t)v97, (uint64_t)&v96, v85);
      uint64_t v30 = v97[0];
      uint64_t v31 = swift_unknownObjectRelease(v29);
      int64_t v27 = v18;
      uint64_t v25 = v19;
      uint64_t v24 = v93;
      if (!v30) {
        goto LABEL_54;
      }
      goto LABEL_31;
    }

    if (!v19) {
      break;
    }
    uint64_t v25 = (v19 - 1) & v19;
    unint64_t v26 = __clz(__rbit64(v19)) | (v18 << 6);
    int64_t v27 = v18;
LABEL_30:
    uint64_t v38 = *(void *)(*(void *)(v15 + 48) + 8 * v26);
    uint64_t v31 = swift_retain(v38);
    if (!v38) {
      goto LABEL_54;
    }
LABEL_31:
    dispatch thunk of ControlChannelConnection.state.getter(v31);
    int v39 = (*(uint64_t (**)(uint64_t, id))(v0 + 88))(v24, v11);
    if (v39 == v94)
    {
      uint64_t v91 = (void *)v27;
      sub_100031BE4();
      uint64_t v40 = type metadata accessor for UUID(0LL);
      int v41 = sub_10001D9C8(v6, 1LL, v40);
      uint64_t v42 = sub_10000FD7C((uint64_t *)&unk_1000835C0);
      uint64_t v92 = &v74;
      uint64_t v43 = *(void *)(*(void *)(v42 - 8) + 64LL);
      __chkstk_darwin(v42, v44);
      unint64_t v45 = (v43 + 15) & 0xFFFFFFFFFFFFFFF0LL;
      uint64_t v46 = (char *)&v74 - v45;
      sub_100031A90(v6, (uint64_t)&v74 - v45);
      if (v41 == 1)
      {
        sub_100031A80((uint64_t)&v74 - v45);
        uint64_t v49 = v91;
LABEL_51:
        uint64_t v72 = v82;
        uint64_t v71 = v83;
        uint64_t v73 = v84;
        (*(void (**)(uint64_t, void, uint64_t))(v83 + 104))(v82, v81, v84);
        dispatch thunk of ControlChannelConnection.invalidate(for:)(v72);
        sub_10002044C();
        (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v72, v73);
        goto LABEL_52;
      }

      uint64_t v50 = __chkstk_darwin(v47, v48);
      unint64_t v51 = (char *)&v74 - v45;
      uint64_t v52 = (void *)dispatch thunk of ControlChannelConnection.resolvedIdentity.getter(v50);
      uint64_t v87 = &v74;
      if (v52)
      {
        uint64_t v53 = v52;
        id v11 = objc_msgSend(v52, "identifier", v74);

        __chkstk_darwin(v54, v55);
        if (v11)
        {
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v11);

          uint64_t v56 = 0LL;
        }

        else
        {
          uint64_t v56 = 1LL;
        }

        sub_100031CA8((uint64_t)&v74 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL), v56);
        sub_10002FD90((uint64_t)&v74 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL), (uint64_t)v51, (uint64_t *)&unk_1000835C0);
      }

      else
      {
        sub_100031CA8((uint64_t)v51, 1LL);
      }

      uint64_t v49 = v91;
      sub_10000FD7C(&qword_1000820C8);
      uint64_t v91 = &v74;
      sub_100026C0C();
      __chkstk_darwin(v57, v58);
      sub_10001DF00();
      uint64_t v60 = (uint64_t)v11 + *(int *)(v59 + 48);
      sub_100031A90((uint64_t)v51, (uint64_t)v11);
      sub_100031A90((uint64_t)v46, v60);
      uint64_t v61 = sub_100031BB8((uint64_t)v11);
      if (v63)
      {
        sub_100031A80((uint64_t)v51);
        sub_100031A80((uint64_t)v46);
        sub_100031BB8(v60);
        uint64_t v6 = v80;
        if (!v63) {
          goto LABEL_49;
        }
        sub_100026B84((uint64_t)v11, (uint64_t *)&unk_1000835C0);
        sub_100031A3C();
        goto LABEL_51;
      }

      unsigned int v78 = &v74;
      __chkstk_darwin(v61, v62);
      sub_100031B34();
      sub_100031A90((uint64_t)v11, v43);
      uint64_t v64 = sub_100031BB8(v60);
      if (v63)
      {
        sub_100031A80((uint64_t)v51);
        sub_100031A80((uint64_t)v46);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8LL))(v43, v40);
        uint64_t v6 = v80;
LABEL_49:
        sub_100026B84((uint64_t)v11, &qword_1000820C8);
        sub_10002044C();
        sub_100031A3C();
        goto LABEL_52;
      }

      uint64_t v77 = &v74;
      uint64_t v75 = *(void *)(v40 - 8);
      __chkstk_darwin(v64, v65);
      uint64_t v67 = (char *)&v74 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 32))(v67, v60, v40);
      sub_10003186C(&qword_1000820D0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      int v76 = dispatch thunk of static Equatable.== infix(_:_:)(v43, v67, v40, v69);
      uint64_t v70 = *(void (**)(char *, uint64_t))(v75 + 8);
      v70(v67, v40);
      sub_100031D34((uint64_t)v51);
      sub_100031D34((uint64_t)v46);
      v70((char *)v43, v40);
      sub_100031D34((uint64_t)v11);
      uint64_t v6 = v80;
      id v11 = v79;
      if ((v76 & 1) != 0) {
        goto LABEL_51;
      }
      sub_10002044C();
LABEL_52:
      int64_t v18 = (int64_t)v49;
      unint64_t v19 = v25;
      uint64_t v0 = v90;
      uint64_t v24 = v93;
      uint64_t v15 = v95;
    }

    else
    {
      sub_10002044C();
      sub_100031BE4();
      int64_t v18 = v27;
      unint64_t v19 = v25;
      uint64_t v15 = v95;
    }
  }

  int64_t v32 = v18 + 1;
  if (!__OFADD__(v18, 1LL))
  {
    if (v32 >= v88) {
      goto LABEL_54;
    }
    int64_t v27 = v18 + 1;
    if (!*(void *)(v89 + 8 * v32))
    {
      int64_t v27 = v18 + 2;
      if (v18 + 2 >= v88) {
        goto LABEL_54;
      }
      if (!*(void *)(v89 + 8 * v27))
      {
        int64_t v27 = v18 + 3;
        if (v18 + 3 >= v88) {
          goto LABEL_54;
        }
        if (!*(void *)(v89 + 8 * v27))
        {
          int64_t v27 = v18 + 4;
          if (v18 + 4 >= v88) {
            goto LABEL_54;
          }
          if (!*(void *)(v89 + 8 * v27))
          {
            int64_t v33 = v18 + 5;
            while (v33 < v88)
            {
              if (*(void *)(v89 + 8 * v33++))
              {
                int64_t v27 = v33 - 1;
                goto LABEL_29;
              }
            }

LABEL_54:
            sub_10000FE04(v95);
            sub_10000FF80();
            return;
          }
        }
      }
    }

LABEL_29:
    sub_100031C4C();
    uint64_t v25 = v36 & v35;
    unint64_t v26 = v37 + (v27 << 6);
    goto LABEL_30;
  }

  __break(1u);
}

    uint64_t v136 = (v68 - 1) & v68;
    unint64_t v137 = v69;
  }

  sub_10003C17C();
  if (v66 != v67)
  {
    uint64_t v68 = *(void *)(v128 + 8 * v70);
    if (!v68)
    {
      while (!__OFADD__(v70, 1LL))
      {
        sub_10003C0DC();
        if (v66 == v67) {
          goto LABEL_60;
        }
        sub_10003C114();
        uint64_t v70 = v71 + 1;
        if (v68) {
          goto LABEL_29;
        }
      }

      goto LABEL_76;
    }

    uint64_t v69 = v70;
    goto LABEL_29;
  }

    int v39 = sub_10000FD7C(v26);
    sub_10001D930((uint64_t)v15, 1LL, 1LL, v39);
    uint64_t v28 = 0LL;
LABEL_30:
    sub_10003BF80((uint64_t)v15, (uint64_t)v19, &qword_100082AC0);
    uint64_t v40 = sub_10000FD7C(v26);
    int v41 = sub_10001D9C8((uint64_t)v19, 1LL, v40);
    uint64_t v69 = v41 == 1;
    if (v41 == 1) {
      return v69;
    }
    uint64_t v71 = v28;
    uint64_t v42 = v26;
    uint64_t v43 = v15;
    uint64_t v44 = (char *)v19 + *(int *)(v40 + 48);
    unint64_t v45 = *v19;
    uint64_t v46 = v19[1];
    uint64_t v47 = v19;
    uint64_t v48 = v70;
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v10, v44, v70);
    uint64_t v49 = v45;
    uint64_t v50 = v65;
    unint64_t v51 = v10;
    uint64_t v52 = sub_100051A2C(v49, v46);
    uint64_t v54 = v53;
    swift_bridgeObjectRelease(v46);
    if ((v54 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v51, v48);
      return 0;
    }

    uint64_t v55 = *(void *)(v50 + 56) + *(void *)(v29 + 72) * v52;
    uint64_t v56 = v66;
    (*(void (**)(char *, unint64_t, uint64_t))(v29 + 16))(v66, v55, v48);
    sub_100029E64( &qword_100082D68,  (uint64_t (*)(uint64_t))&type metadata accessor for AuxiliaryMetadataItem,  (uint64_t)&protocol conformance descriptor for AuxiliaryMetadataItem);
    uint64_t v58 = dispatch thunk of static Equatable.== infix(_:_:)(v56, v51, v48, v57);
    uint64_t v59 = *(void (**)(char *, uint64_t))(v29 + 8);
    v59(v56, v48);
    unint64_t result = ((uint64_t (*)(char *, uint64_t))v59)(v51, v48);
    uint64_t v10 = v51;
    uint64_t v15 = v43;
    unint64_t v19 = v47;
    unint64_t v26 = v42;
    uint64_t v25 = v71;
    if ((v58 & 1) == 0) {
      return v69;
    }
  }

  uint64_t v37 = *(void *)(v62 + 8 * v38);
  if (v37)
  {
LABEL_15:
    uint64_t v36 = v38;
LABEL_12:
    uint64_t v28 = (v37 - 1) & v37;
    uint64_t v30 = __clz(__rbit64(v37)) + (v36 << 6);
    uint64_t v68 = v36;
    goto LABEL_8;
  }

  while (1)
  {
    uint64_t v36 = v38 + 1;
    if (__OFADD__(v38, 1LL)) {
      break;
    }
    if (v36 >= v63)
    {
      uint64_t v68 = v61;
      goto LABEL_29;
    }

    uint64_t v37 = *(void *)(v62 + 8 * v36);
    ++v38;
    if (v37) {
      goto LABEL_12;
    }
  }

    uint64_t v25 = (v34 - 1) & v34;
    unint64_t v26 = __clz(__rbit64(v34)) + (v27 << 6);
LABEL_30:
    uint64_t v31 = *(void *)(*(void *)(v14 + 48) + 8 * v26);
    int64_t v32 = sub_10000FFC4();
    if (!v31) {
      return sub_10000FE04(v14);
    }
    while (1)
    {
      uint64_t v36 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v2, v36))
      {
        swift_retain_n(v31, 2LL);
        uint64_t v37 = sub_1000122E0(12LL);
        uint64_t v38 = sub_1000122E0(32LL);
        uint64_t v50 = v31;
        unint64_t v51 = v38;
        *(_DWORD *)uint64_t v37 = 136446210;
        int v39 = v2;
        uint64_t v40 = v20;
        int v41 = sub_10000FF78();
        sub_10000FFC4();
        uint64_t v42 = String.init<A>(describing:)(&v50, v41);
        uint64_t v44 = v43;
        sub_100045370(v42, v43, &v51);
        *(void *)(v37 + 4) = v45;
        swift_release_n(v31, 2LL);
        uint64_t v46 = v44;
        uint64_t v20 = v40;
        uint64_t v2 = v39;
        swift_bridgeObjectRelease(v46);
        sub_100016D10( (void *)&_mh_execute_header,  v39,  v36,  "State dump: NetworkPairingService control channel connection: %{public}s",  (uint8_t *)v37);
        swift_arrayDestroy(v38, 1LL);
        sub_10001001C(v38);
        sub_10001001C(v37);
      }

      unint64_t result = sub_10000FFF8();
      uint64_t v21 = v27;
      uint64_t v22 = v25;
      if ((v14 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_13:
      uint64_t v28 = __CocoaSet.Iterator.next()(result);
      if (v28)
      {
        uint64_t v29 = v28;
        uint64_t v50 = v28;
        uint64_t v30 = sub_10000FF78();
        swift_unknownObjectRetain(v29);
        swift_dynamicCast(&v51, &v50, (char *)&type metadata for Swift.AnyObject + 8, v30, 7LL);
        uint64_t v31 = v51;
        int64_t v32 = swift_unknownObjectRelease(v29);
        int64_t v27 = v21;
        uint64_t v25 = v22;
        if (v31) {
          continue;
        }
      }

      return sub_10000FE04(v14);
    }
  }

  __break(1u);
  return result;
}

        unint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL);
        __break(1u);
        return result;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_29;
  }

void sub_10002A9B0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (!v1)
  {
    uint64_t v2 = *(void **)(v0 + 16);
    uint64_t v3 = type metadata accessor for PairingConsentCollector();
    sub_100016BCC(v3, 88LL);
    id v4 = v2;
    uint64_t v5 = sub_1000285C4();
    *(void *)(v0 + 24) = v5;
    swift_retain(v5);
    sub_100010008();
    uint64_t v1 = 0LL;
  }

  swift_retain(v1);
  sub_100020484();
}

void sub_10002AA18()
{
  uint64_t v3 = *(void *)(v1 + 32);
  if (!v3)
  {
    sub_100031B98();
    uint64_t v4 = sub_100030AAC(v2, v0, 0);
    *(void *)(v1 + 32) = v4;
    swift_retain(v4);
    sub_100010008();
    uint64_t v3 = 0LL;
  }

  swift_retain(v3);
  sub_100020484();
}

void sub_10002AA74()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if (!v1)
  {
    uint64_t v2 = sub_10002AAC4(v0);
    *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = v2;
    swift_retain(v2);
    sub_100010008();
    uint64_t v1 = 0LL;
  }

  swift_retain(v1);
  sub_100020484();
}

void *sub_10002AAC4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for InProcessIRKGenerator(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  id v11 = (char *)&v15 - v10;
  InProcessIRKGenerator.init()(v9);
  uint64_t v12 = *(void *)(a1 + 120);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v7, v11, v2);
  swift_retain(v12);
  uint64_t v13 = sub_10002FF24((uint64_t)v7, v12);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
  return v13;
}

void sub_10002AB94()
{
  uint64_t v3 = *(void *)(v1 + 48);
  if (!v3)
  {
    sub_100031B98();
    id v4 = v2;
    uint64_t v5 = sub_10000FFDC();
    uint64_t v6 = sub_100030DF0(v5, v4, v0);
    *(void *)(v1 + 48) = v6;
    swift_retain(v6);
    sub_100010008();
    uint64_t v3 = 0LL;
  }

  swift_retain(v3);
  sub_100020484();
}

void sub_10002ABF8()
{
  uint64_t v2 = *(void *)(v0 + 56);
  if (!v2)
  {
    uint64_t v3 = v0;
    swift_retain_n(v0, 2LL);
    sub_10002AA74();
    uint64_t v24 = v4;
    sub_10002B1E0();
    uint64_t v23 = v5;
    v20[1] = *(void *)(v0 + 16);
    uint64_t v21 = sub_100016D38();
    uint64_t v22 = v20;
    v20[2] = *(void *)(v21 - 8);
    sub_100026C0C();
    __chkstk_darwin(v6, v7);
    sub_1000319CC();
    uint64_t v8 = sub_100031C24();
    v20[0] = v20;
    uint64_t v9 = *(void *)(v8 - 8);
    __chkstk_darwin(v8, &type metadata accessor for OS_dispatch_queue.Attributes);
    sub_10001DF00();
    uint64_t v25 = &_swiftEmptyArrayStorage;
    sub_10003186C((unint64_t *)&unk_100082130, v10);
    uint64_t v12 = v11;
    sub_100031A58();
    sub_100031A88((unint64_t *)&unk_100082140);
    sub_100031974(v13);
    uint64_t v14 = sub_100031C1C();
    sub_1000319E8();
    __chkstk_darwin(v15, v16);
    sub_1000203D4();
    sub_100026C84( v12,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 104));
    sub_100031920();
    uint64_t v18 = sub_100031A24(57LL, v17);
    sub_100026D54(v12, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    sub_100031A60(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
    sub_100031C7C();
    sub_100031934();
    uint64_t v19 = sub_100030260(v3, v3, v24, v23, v18, v14);
    *(void *)(v3 + 56) = v19;
    swift_retain(v19);
    sub_100010008();
    uint64_t v2 = 0LL;
  }

  swift_retain(v2);
  sub_10000FF80();
}

void sub_10002AD98()
{
  uint64_t v3 = *(void *)(v0 + 64);
  if (!v3)
  {
    uint64_t v4 = v0;
    sub_10000FFDC();
    sub_10002AA74();
    uint64_t v33 = v5;
    v29[2] = *(void *)(v0 + 16);
    uint64_t v31 = sub_100016D38();
    int64_t v32 = v29;
    uint64_t v30 = *(void *)(v31 - 8);
    sub_100026C0C();
    __chkstk_darwin(v6, v7);
    sub_100031B08();
    static DispatchQoS.userInitiated.getter();
    uint64_t v8 = sub_100031C24();
    v29[1] = v29;
    sub_100031C2C();
    __chkstk_darwin(v9, v10);
    sub_10000FFCC();
    uint64_t v13 = v12 - v11;
    uint64_t v34 = &_swiftEmptyArrayStorage;
    sub_10003186C((unint64_t *)&unk_100082130, v14);
    uint64_t v16 = v15;
    uint64_t v17 = sub_100031A58();
    sub_100031A88((unint64_t *)&unk_100082140);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v17, v18, v8, v16);
    uint64_t v19 = sub_100031C1C();
    uint64_t v20 = *(void *)(v19 - 8);
    __chkstk_darwin(v19, v21);
    sub_1000203D4();
    (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))( v17,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v19);
    sub_100031920();
    uint64_t v23 = OS_dispatch_queue.childQueue(label:qos:attributes:autoreleaseFrequency:)( 0xD00000000000003ELL,  v22,  v1,  v13,  v17);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v17, v19);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v13, v8);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v1, v31);
    sub_100031D3C();
    uint64_t v24 = type metadata accessor for NetworkPairingService();
    uint64_t v25 = sub_100016BCC(v24, 112LL);
    *(void *)(v25 + 88) = type metadata accessor for RemotePairingDeviceService();
    sub_1000318B8( &qword_100082178,  v26,  (uint64_t (*)(uint64_t))type metadata accessor for RemotePairingDeviceService);
    *(void *)(v25 + swift_weakDestroy(v0 + 16) = &_swiftEmptySetSingleton;
    *(void *)(v25 + 24) = 0LL;
    *(void *)(v25 + 32) = 0LL;
    *(void *)(v25 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = 0LL;
    *(_BYTE *)(v25 + 48) = 2;
    uint64_t v27 = v33;
    *(void *)(v25 + 96) = v28;
    *(void *)(v25 + 104) = v27;
    *(void *)(v25 + 56) = v23;
    *(void *)(v25 + 64) = v4;
    *(void *)(v4 + 64) = v25;
    swift_retain(v25);
    sub_100012464();
    uint64_t v3 = 0LL;
  }

  swift_retain(v3);
  sub_10000FF80();
}

void sub_10002AFD0()
{
  uint64_t v2 = *(void *)(v0 + 72);
  if (!v2)
  {
    uint64_t v3 = v0;
    sub_10000FFDC();
    sub_10002AA74();
    uint64_t v24 = v4;
    sub_10002B1E0();
    uint64_t v23 = v5;
    v20[1] = *(void *)(v0 + 16);
    uint64_t v21 = sub_100016D38();
    uint64_t v22 = v20;
    v20[2] = *(void *)(v21 - 8);
    sub_100026C0C();
    __chkstk_darwin(v6, v7);
    sub_1000319CC();
    uint64_t v8 = sub_100031C24();
    v20[0] = v20;
    uint64_t v9 = *(void *)(v8 - 8);
    __chkstk_darwin(v8, &type metadata accessor for OS_dispatch_queue.Attributes);
    sub_10001DF00();
    uint64_t v25 = &_swiftEmptyArrayStorage;
    sub_10003186C((unint64_t *)&unk_100082130, v10);
    uint64_t v12 = v11;
    sub_100031A58();
    sub_100031A88((unint64_t *)&unk_100082140);
    sub_100031974(v13);
    uint64_t v14 = sub_100031C1C();
    sub_1000319E8();
    __chkstk_darwin(v15, v16);
    sub_1000203D4();
    sub_100026C84( v12,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 104));
    sub_100031920();
    uint64_t v18 = sub_100031A24(69LL, v17);
    sub_100026D54(v12, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    sub_100031A60(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
    sub_100031C7C();
    sub_100031934();
    uint64_t v19 = sub_1000304B0(v3, v24, v23, v18, v14);
    *(void *)(v3 + 72) = v19;
    swift_retain(v19);
    sub_100010008();
    uint64_t v2 = 0LL;
  }

  swift_retain(v2);
  sub_10000FF80();
}

void sub_10002B164()
{
  uint64_t v1 = *(void *)(v0 + 80);
  if (!v1)
  {
    id v2 = *(id *)(v0 + 16);
    sub_10002AA74();
    uint64_t v3 = type metadata accessor for DeviceInitiatedPairingService();
    sub_100016BCC(v3, 96LL);
    uint64_t v4 = (void *)sub_100031B6C();
    uint64_t v7 = sub_100030B8C(v4, v5, 0LL, v6);
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = v7;
    swift_retain(v7);
    sub_100010008();
    uint64_t v1 = 0LL;
  }

  swift_retain(v1);
  sub_100020484();
}

void sub_10002B1E0()
{
  uint64_t v1 = *(void *)(v0 + 88);
  if (!v1)
  {
    sub_10002B27C();
    uint64_t v3 = v2;
    uint64_t v4 = *(void **)(v0 + 16);
    uint64_t v5 = type metadata accessor for MetadataService(0LL);
    uint64_t v6 = (void *)sub_100031CC0(v5);
    uint64_t v7 = sub_1000300FC( v3,  (uint64_t)v4,  (uint64_t)sub_100039F80,  0LL,  0xD000000000000019LL,  0x8000000100068720LL,  v6);
    *(void *)(v0 + 88) = v7;
    swift_retain(v7);
    sub_100010008();
    uint64_t v1 = 0LL;
  }

  swift_retain(v1);
  sub_100020484();
}

void sub_10002B27C()
{
  uint64_t v1 = *(void *)(v0 + 96);
  if (!v1)
  {
    uint64_t v2 = v0;
    uint64_t v3 = *(void **)(v0 + 16);
    uint64_t v4 = type metadata accessor for XPCEventPublisher();
    uint64_t v5 = type metadata accessor for AuxiliaryMetadataService();
    sub_100016BCC(v5, 104LL);
    *(void *)(v2 + 96) = sub_10003C5FC(v3, v4, (uint64_t)&off_100077FA0, 0LL);
    sub_10000FFDC();
    sub_100010008();
    uint64_t v1 = 0LL;
  }

  swift_retain(v1);
  sub_100020484();
}

void sub_10002B304()
{
  uint64_t v1 = *(void *)(v0 + 104);
  if (!v1)
  {
    uint64_t v2 = sub_10002B354(v0);
    *(void *)(v0 + 104) = v2;
    swift_bridgeObjectRetain(v2);
    sub_10002045C();
    uint64_t v1 = 0LL;
  }

  swift_bridgeObjectRetain(v1);
  sub_100020484();
}

uint64_t sub_10002B354(uint64_t a1)
{
  uint64_t v2 = sub_10000FD7C(&qword_100083030);
  uint64_t v3 = swift_allocObject(v2, 152LL, 7LL);
  *(_OWORD *)(v3 + swift_weakDestroy(v0 + 16) = xmmword_100062980;
  sub_10002ABF8();
  uint64_t v5 = v4;
  *(void *)(v3 + 56) = type metadata accessor for RSDService();
  *(void *)(v3 + 64) = &off_100078BC0;
  *(void *)(v3 + 32) = v5;
  sub_10002AD98();
  uint64_t v7 = v6;
  *(void *)(v3 + 96) = type metadata accessor for NetworkPairingService();
  *(void *)(v3 + 104) = &off_100078818;
  *(void *)(v3 + 72) = v7;
  sub_10002AFD0();
  uint64_t v9 = v8;
  *(void *)(v3 + 136) = type metadata accessor for NetworkControlChannelService();
  *(void *)(v3 + 144) = &off_100077AF8;
  *(void *)(v3 + 112) = v9;
  uint64_t v10 = sub_100057CC4();
  if ((v10 & 1) != 0)
  {
    sub_10002AA74();
    uint64_t v55 = v11;
    uint64_t v51 = *(void *)(a1 + 16);
    uint64_t v53 = type metadata accessor for DispatchQoS(0LL);
    uint64_t v54 = v50;
    uint64_t v52 = *(void *)(v53 - 8);
    uint64_t v13 = __chkstk_darwin(v53, v12);
    uint64_t v15 = (char *)v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    static DispatchQoS.userInitiated.getter(v13);
    uint64_t v16 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
    v50[1] = v50;
    v50[0] = *(void *)(v16 - 8);
    __chkstk_darwin(v16, &type metadata accessor for OS_dispatch_queue.Attributes);
    uint64_t v18 = (char *)v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    *(void *)&__int128 v56 = &_swiftEmptyArrayStorage;
    sub_10003186C((unint64_t *)&unk_100082130, v19);
    uint64_t v21 = v20;
    uint64_t v22 = sub_10000FD7C(&qword_100081D08);
    sub_100029EA0((unint64_t *)&unk_100082140, &qword_100081D08);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v22, v23, v16, v21);
    uint64_t v24 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
    uint64_t v25 = *(void *)(v24 - 8);
    __chkstk_darwin(v24, v26);
    uint64_t v28 = (char *)v50 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *, void, uint64_t))(v25 + 104))( v28,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v24);
    uint64_t v51 = OS_dispatch_queue.childQueue(label:qos:attributes:autoreleaseFrequency:)( 0xD00000000000003FLL,  0x80000001000686E0LL,  v15,  v18,  v28);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
    (*(void (**)(char *, uint64_t))(v50[0] + 8LL))(v18, v16);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v15, v53);
    uint64_t v29 = *(void *)(a1 + 120);
    uint64_t v30 = type metadata accessor for LockStateManager(0LL);
    uint64_t v57 = v30;
    uint64_t v58 = &off_100078628;
    *(void *)&__int128 v56 = v29;
    uint64_t v31 = type metadata accessor for LockdownService();
    uint64_t v32 = swift_allocObject(v31, 88LL, 7LL);
    uint64_t v33 = sub_10002FEFC((uint64_t)&v56, v30);
    __chkstk_darwin(v33, v33);
    uint64_t v35 = (void *)((char *)v50 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    (*(void (**)(uint64_t *))(v36 + 16))(v35);
    uint64_t v37 = *v35;
    *(void *)(v32 + 56) = v30;
    *(void *)(v32 + 64) = &off_100078628;
    *(void *)(v32 + 32) = v37;
    *(_BYTE *)(v32 + 72) = 0;
    *(void *)(v32 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = v55;
    uint64_t v38 = v51;
    *(void *)(v32 + swift_weakDestroy(v0 + 16) = &_swiftEmptySetSingleton;
    *(void *)(v32 + 24) = v38;
    swift_retain(v29);
    sub_10000FF38(&v56);
    unint64_t v39 = *(void *)(v3 + 16);
    unint64_t v40 = *(void *)(v3 + 24);
    swift_retain(v32);
    if (v39 >= v40 >> 1)
    {
      sub_100044190();
      uint64_t v3 = v49;
    }

    uint64_t v57 = v31;
    uint64_t v58 = &off_100076650;
    *(void *)&__int128 v56 = v32;
    *(void *)(v3 + swift_weakDestroy(v0 + 16) = v39 + 1;
    sub_100026BF0(&v56, v3 + 40 * v39 + 32);
    swift_release(v32);
  }

  else
  {
    uint64_t v41 = static os_log_type_t.default.getter(v10);
    os_log(_:dso:log:_:_:)( v41,  &_mh_execute_header,  qword_1000845F0,  "Not initializing real LockdownService as liblockdown is not available",  69LL,  2LL);
    sub_10002AA74();
    uint64_t v43 = v42;
    uint64_t v44 = *(void **)(a1 + 16);
    uint64_t v45 = type metadata accessor for DummyLockdownService();
    swift_allocObject(v45, 48LL, 7LL);
    uint64_t v46 = sub_10000F8EC(v43, v44);
    sub_100044190();
    uint64_t v3 = v47;
    uint64_t v57 = v45;
    uint64_t v58 = &off_100076620;
    *(void *)&__int128 v56 = v46;
    *(void *)(v47 + swift_weakDestroy(v0 + 16) = 4LL;
    sub_100026BF0(&v56, v47 + 152);
  }

  return v3;
}

void sub_10002B7FC()
{
  uint64_t v1 = *(void *)(v0 + 112);
  if (!v1)
  {
    sub_10000E484(0LL, (unint64_t *)&qword_100082120, &OBJC_CLASS___OS_dispatch_source_ptr);
    uint64_t v2 = static OS_dispatch_source.makeSignalSource(signal:queue:)(15LL, *(void *)(v0 + 16));
    uint64_t v3 = *(void *)(v0 + 112);
    *(void *)(v0 + 112) = v2;
    swift_unknownObjectRetain(v2);
    swift_unknownObjectRelease(v3);
    uint64_t v1 = 0LL;
  }

  swift_unknownObjectRetain(v1);
  sub_100020484();
}

void sub_10002B870()
{
  uint64_t v3 = v0;
  sub_10000E484(0LL, (unint64_t *)&qword_100082170, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v4 = sub_100031C1C();
  __chkstk_darwin(v4, v5);
  sub_100016B50();
  (*(void (**)(uint64_t, void))(v6 + 104))( v1,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  sub_100016D38();
  sub_100026C0C();
  __chkstk_darwin(v7, v8);
  sub_100031B08();
  static DispatchQoS.unspecified.getter(v9);
  uint64_t v10 = sub_100031C24();
  sub_100026C0C();
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = &_swiftEmptyArrayStorage;
  sub_10003186C((unint64_t *)&unk_100082130, v15);
  uint64_t v17 = v16;
  uint64_t v18 = sub_10000FD7C(&qword_100081D08);
  sub_100029EA0((unint64_t *)&unk_100082140, &qword_100081D08);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v18, v19, v10, v17);
  sub_100031920();
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002FLL,  v20,  v2,  v14,  v1,  0LL);
  uint64_t v21 = type metadata accessor for LockStateManager(0LL);
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  sub_100031CC0(v21);
  sub_1000477D4();
  *(void *)(v3 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = v22;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_BYTE *)(v3 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = 1;
  sub_10002F7B0();
  sub_10000FF80();
}

void sub_10002BA2C()
{
  v11[0] = *(void *)(v0 + 16);
  v11[6] = sub_1000318EC;
  uint64_t v12 = v0;
  v11[2] = _NSConcreteStackBlock;
  v11[3] = 1107296256LL;
  sub_100016C54((uint64_t)sub_100040708);
  sub_100016D38();
  sub_10001241C();
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10000FFDC();
  static DispatchQoS.unspecified.getter(v6);
  sub_100016C60();
  sub_100031BF4();
  __chkstk_darwin(v7, v8);
  sub_100016C88();
  v11[1] = &_swiftEmptyArrayStorage;
  sub_10003186C((unint64_t *)&qword_1000813C0, v9);
  sub_100031A58();
  sub_100031A88((unint64_t *)&qword_1000813D0);
  sub_100031954(v10);
  sub_1000319F8();
  sub_100031CA0();
  sub_100031BA8();
  sub_100026D54((uint64_t)v5, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  swift_release(v12);
  sub_10000FF80();
}

void sub_10002BB54()
{
  uint64_t v4 = v3;
  uint64_t v5 = sub_100016BCC((uint64_t)&unk_100077670, 24LL);
  sub_100026E64(v5);
  uint64_t v6 = *(void *)(v4 + 24);
  uint64_t v7 = *(void *)(v4 + 32);
  *(void *)(v4 + 24) = sub_10002FEE4;
  *(void *)(v4 + 32) = v5;
  sub_10002FBF0(v6, v7);
  sub_100012464();
  sub_10002B304();
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v10 = v8 + 32;
    do
    {
      sub_100031C8C(v8, (uint64_t)v35);
      uint64_t v11 = v36;
      sub_10000FF14(v35, v35[3]);
      sub_100031B78(*((uint64_t (**)(uint64_t, uint64_t))v11 + 3));
      uint64_t v8 = sub_10000FF38(v35);
      v10 += 40LL;
      --v9;
    }

    while (v9);
  }

  sub_10002045C();
  sub_100031C14();
  sub_10004C344();
  sub_100012464();
  sub_100031C14();
  sub_10004B684();
  sub_100012464();
  sub_10002AB94();
  sub_1000109F0(v12);
  sub_100012464();
  sub_10002B164();
  sub_10001E760();
  sub_100012464();
  sub_10002B1E0();
  sub_100039FF8();
  sub_100012464();
  sub_100031920();
  sub_10002C450(v13, v14);
  sub_100031920();
  sub_10002C450(v15, v16);
  sub_10002AA74();
  uint64_t v17 = sub_100016BCC((uint64_t)&unk_100077670, 24LL);
  sub_100026E64(v17);
  swift_retain(v17);
  sub_10001B948((uint64_t)sub_10002FEEC, v17);
  sub_100012464();
  uint64_t v18 = swift_release_n(v17, 2LL);
  uint64_t v19 = (void (__cdecl *)(int))SIG_IGN.getter(v18);
  signal(15, v19);
  sub_10002B7FC();
  uint64_t v21 = v20;
  uint64_t ObjectType = swift_getObjectType(v20);
  uint64_t v23 = sub_100016BCC((uint64_t)&unk_100077670, 24LL);
  sub_100026E64(v23);
  uint64_t v36 = sub_10002FEF4;
  uint64_t v37 = v23;
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 1107296256LL;
  uint64_t v24 = sub_100016C54((uint64_t)sub_100040708);
  uint64_t v33 = sub_100016D38();
  uint64_t v34 = v32;
  sub_10001241C();
  __chkstk_darwin(v25, v26);
  sub_100016C88();
  swift_retain(v23);
  sub_1000129A8();
  uint64_t v27 = sub_100016C60();
  v32[1] = v32;
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27, v29);
  sub_10001DF00();
  sub_1000129BC(ObjectType);
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(0xD00000000000001CLL, v1, v24, ObjectType);
  _Block_release(v24);
  swift_unknownObjectRelease(v21);
  sub_100031A60(*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(0xD00000000000001CLL, v33);
  sub_100031D3C();
  sub_100010008();
  sub_100012464();
  sub_10002B7FC();
  uint64_t v31 = v30;
  swift_getObjectType(v30);
  OS_dispatch_source.resume()();
  swift_unknownObjectRelease(v31);
  sub_10002F338();
  sub_10000FF80();
}

uint64_t sub_10002BE68()
{
  return swift_release();
}

uint64_t sub_10002BFC8(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  os_log(_:dso:log:_:_:)( v2,  &_mh_execute_header,  qword_1000845F0,  "Device metadata did change. Pushing updated info to host via control channels",  77LL,  2LL,  &_swiftEmptyArrayStorage);
  swift_beginAccess(v1, v4, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    sub_10002C180();
    return swift_release();
  }

  return result;
}

uint64_t sub_10002C04C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    notify_post((const char *)[kRemotePairingTrustedHostsUpdatedNotificationName UTF8String]);
    if (a1 <= 2u) {
      notify_post((const char *)[objc_retainAutorelease(*(id *)*(&off_100077818 + (char)a1)) UTF8String]);
    }
    return swift_release(v5);
  }

  return result;
}

uint64_t sub_10002C0F8(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    sub_10002F2A0();
    uint64_t Strong = swift_release();
  }

  return xpc_transaction_exit_clean(Strong);
}

uint64_t sub_10002C150(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 136) = a1;
  *(void *)(v2 + 144) = a2;
  sub_10002FE80(a1, a2);
  uint64_t v3 = sub_100031B6C();
  return sub_10002FBF0(v3, v4);
}

void sub_10002C180()
{
  uint64_t v33 = *(void *)(v0 + 16);
  if (!v33)
  {
    swift_bridgeObjectRelease(v0);
    return;
  }

  unint64_t v1 = 0LL;
  uint64_t v32 = v0 + 32;
  uint64_t v31 = v0;
LABEL_3:
  if (v1 >= *(void *)(v0 + 16)) {
    goto LABEL_36;
  }
  sub_10002697C(v32 + 40 * v1, (uint64_t)v37);
  uint64_t v2 = v38;
  uint64_t v3 = v39;
  sub_10000FF14(v37, v38);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  uint64_t v5 = v4;
  if ((v4 & 0xC000000000000001LL) != 0)
  {
    if (v4 >= 0) {
      v4 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v6 = __CocoaSet.makeIterator()(v4);
    uint64_t v7 = sub_10000FF78();
    sub_1000318B8( &qword_100082090,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
    uint64_t v9 = Set.Iterator.init(_cocoa:)(v6, v7, v8);
    uint64_t v5 = v40;
    uint64_t v10 = v41;
    uint64_t v11 = v42;
    int64_t v12 = v43;
    unint64_t v13 = v44;
  }

  else
  {
    int64_t v12 = 0LL;
    uint64_t v10 = v4 + 56;
    sub_100031B44();
    unint64_t v13 = v14 & v15;
  }

  unint64_t v34 = v1 + 1;
  int64_t v16 = (unint64_t)(v11 + 64) >> 6;
  if (v5 < 0) {
    goto LABEL_12;
  }
  while (1)
  {
    if (v13)
    {
      uint64_t v17 = (v13 - 1) & v13;
      unint64_t v18 = __clz(__rbit64(v13)) | (v12 << 6);
      int64_t v19 = v12;
      goto LABEL_29;
    }

    int64_t v24 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      break;
    }
    if (v24 >= v16) {
      goto LABEL_32;
    }
    int64_t v19 = v12 + 1;
    if (!*(void *)(v10 + 8 * v24))
    {
      int64_t v19 = v12 + 2;
      if (v12 + 2 >= v16) {
        goto LABEL_32;
      }
      if (!*(void *)(v10 + 8 * v19))
      {
        int64_t v19 = v12 + 3;
        if (v12 + 3 >= v16) {
          goto LABEL_32;
        }
        if (!*(void *)(v10 + 8 * v19))
        {
          int64_t v19 = v12 + 4;
          if (v12 + 4 >= v16) {
            goto LABEL_32;
          }
          if (!*(void *)(v10 + 8 * v19))
          {
            int64_t v25 = v12 + 5;
            while (v25 < v16)
            {
              if (*(void *)(v10 + 8 * v25++))
              {
                int64_t v19 = v25 - 1;
                goto LABEL_28;
              }
            }

void sub_10002C450(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100016BCC((uint64_t)&unk_100077670, 24LL);
  swift_weakInit(v6 + 16, v3);
  uint64_t v7 = (void *)sub_100016BCC((uint64_t)&unk_100077738, 40LL);
  v7[2] = v6;
  v7[3] = a1;
  v7[4] = a2;
  int64_t v12 = v7;
  uint64_t v8 = sub_100031AFC((uint64_t)sub_100033C28, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v10, v11);
  sub_10001DE00();
  swift_release(v12);
  uint64_t v9 = String.utf8CString.getter(a1, a2);
  xpc_activity_register((const char *)(v9 + 32), XPC_ACTIVITY_CHECK_IN, v8);
  sub_100012464();
  sub_100031CA0();
}

void sub_10002C544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a2 + 16;
  swift_beginAccess(a2 + 16, v16, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v8);
  if (Strong)
  {
    uint64_t v10 = Strong;
    id v11 = *(id *)(Strong + 16);
    uint64_t v12 = swift_release(v10);
    __chkstk_darwin(v12, v13);
    v15[2] = a2;
    v15[3] = a1;
    v15[4] = a3;
    v15[5] = a4;
    uint64_t v14 = sub_10000FD7C(&qword_100082118);
    OS_dispatch_queue.sync<A>(execute:)(&v17, sub_10002FEC8, v15, v14);
  }

uint64_t sub_10002C624@<X0>( uint64_t a1@<X0>, _xpc_activity_s *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, BOOL *a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  swift_beginAccess(a1 + 16, v12, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v9);
  uint64_t v11 = result;
  if (result)
  {
    sub_10002C6BC(a2, a3, a4);
    uint64_t result = swift_release(v11);
  }

  *a5 = v11 == 0;
  return result;
}

void sub_10002C6BC(_xpc_activity_s *a1, uint64_t a2, uint64_t a3)
{
  os_log_type_t v4 = v3;
  uint64_t v8 = *(void *)(v3 + 16);
  OS_dispatch_queue.assertOnQueueHierarchy()();
  if (!xpc_activity_get_state(a1))
  {
    os_log_type_t v21 = static os_log_type_t.default.getter(0LL);
    uint64_t v22 = (os_log_s *)qword_1000845F0;
    if (!sub_100031B5C(v21)) {
      return;
    }
    sub_100031A98();
    uint64_t v23 = (uint8_t *)sub_1000122E0(12LL);
    uint64_t v24 = sub_1000122E0(32LL);
    uint64_t v25 = sub_100031A6C(4.8751e-34);
    sub_1000319B0(v25);
    sub_100031994(v26, v27, v28, v29, v30, v31, v32, v33, v57, v24);
    sub_100031AA4();
    sub_100016D10((void *)&_mh_execute_header, v22, v4, "Received check in event in for XPC activity %{public}s", v23);
LABEL_9:
    sub_100012450(v24);
    sub_10001001C(v24);
    uint64_t v20 = (uint64_t)v23;
    goto LABEL_10;
  }

  if (xpc_activity_get_state(a1) != 2) {
    return;
  }
  BOOL should_defer = xpc_activity_should_defer(a1);
  if (should_defer)
  {
    BOOL v10 = xpc_activity_set_state(a1, 3LL);
    if (!v10)
    {
      os_log_type_t v11 = static os_log_type_t.fault.getter(v10);
      uint64_t v12 = (os_log_s *)qword_1000845F0;
      if (sub_100026D80(v11))
      {
        swift_unknownObjectRetain_n(a1, 2LL);
        uint64_t v13 = (uint8_t *)sub_1000122E0(12LL);
        uint64_t v14 = sub_1000122E0(32LL);
        uint64_t v57 = (uint64_t)a1;
        uint64_t v58 = v14;
        *(_DWORD *)uint64_t v13 = 136315138;
        swift_unknownObjectRetain(a1);
        uint64_t v15 = sub_10000FD7C(&qword_100082110);
        uint64_t v16 = String.init<A>(describing:)(&v57, v15);
        sub_100031D5C(v16, v17, v18, v57, v58);
        uint64_t v57 = v19;
        sub_1000319C0((uint64_t)&v57, (uint64_t)&v58);
        swift_unknownObjectRelease_n(a1, 2LL);
        sub_10001DDA4();
        sub_100016D10((void *)&_mh_execute_header, v12, (os_log_type_t)v8, "Failed to defer activity %s", v13);
        sub_100012450(v14);
        sub_10001001C(v14);
        uint64_t v20 = (uint64_t)v13;
LABEL_10:
        sub_10001001C(v20);
        return;
      }
    }

    return;
  }

  os_log_type_t v34 = static os_log_type_t.default.getter(should_defer);
  uint64_t v35 = (os_log_s *)qword_1000845F0;
  os_log_type_t v36 = v34;
  if (os_log_type_enabled((os_log_t)qword_1000845F0, v34))
  {
    sub_100031A98();
    uint64_t v37 = (uint8_t *)sub_1000122E0(12LL);
    uint64_t v38 = sub_1000122E0(32LL);
    uint64_t v58 = v38;
    *(_DWORD *)uint64_t v37 = 136446210;
    uint64_t v39 = sub_100031AB0();
    sub_1000319B0(v39);
    sub_100031CE0();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v40, v41, v37 + 4, v37 + 12);
    sub_100031AA4();
    sub_100016D10((void *)&_mh_execute_header, v35, v36, "XPC activity %{public}s fired", v37);
    sub_100012450(v38);
    sub_10001001C(v38);
    sub_10001001C((uint64_t)v37);
  }

  if (a2 == 0xD00000000000002ELL && a3 == 0x80000001000685C0LL
    || (sub_100031920(), uint64_t v44 = sub_100031B24(v42, v43), (v44 & 1) != 0))
  {
    sub_10002CA74();
    return;
  }

  if (a2 == 0xD00000000000002BLL && a3 == 0x80000001000685F0LL
    || (sub_100031920(), uint64_t v44 = sub_100031B24(0xD00000000000002BLL, v45), (v44 & 1) != 0))
  {
    sub_100046674(v44);
    return;
  }

  os_log_type_t v46 = static os_log_type_t.fault.getter(v44);
  uint64_t v47 = (os_log_s *)qword_1000845F0;
  if (sub_100031B5C(v46))
  {
    sub_100031A98();
    uint64_t v23 = (uint8_t *)sub_1000122E0(12LL);
    uint64_t v24 = sub_1000122E0(32LL);
    uint64_t v48 = sub_100031A6C(4.8149e-34);
    sub_1000319B0(v48);
    sub_100031994(v49, v50, v51, v52, v53, v54, v55, v56, v57, v24);
    sub_100031AA4();
    sub_100016D10((void *)&_mh_execute_header, v47, v4, "Received event for unexpected XPC activity %s", v23);
    goto LABEL_9;
  }

void sub_10002CA74()
{
  uint64_t v1 = v0;
  uint64_t v41 = *(void *)(v0 + 16);
  if (!v41) {
    goto LABEL_36;
  }
  sub_10000E484(0LL, (unint64_t *)&qword_1000809A0, &OBJC_CLASS___OS_os_log_ptr);
  unint64_t v2 = 0LL;
  uint64_t v40 = v1 + 32;
  uint64_t v39 = v1;
  while (2)
  {
    if (v2 >= *(void *)(v1 + 16))
    {
LABEL_38:
      __break(1u);
      return;
    }

    unint64_t v42 = v2;
    sub_10002697C(v40 + 40 * v2, (uint64_t)v49);
    uint64_t v4 = static os_log_type_t.info.getter(v3);
    uint64_t v5 = (void *)static OS_os_log.default.getter(v4);
    os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  v5,  "Updating last used times for any existing pairing records",  57LL,  2LL,  &_swiftEmptyArrayStorage);

    uint64_t v6 = v50;
    uint64_t v7 = v51;
    sub_10000FF14(v49, v50);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7);
    uint64_t v9 = v8;
    if ((v8 & 0xC000000000000001LL) != 0)
    {
      if (v8 >= 0) {
        v8 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      __CocoaSet.makeIterator()(v8);
      sub_10000FF78();
      sub_1000318B8( &qword_100082090,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
      uint64_t v11 = sub_100031AB8(v10);
      uint64_t v9 = v52;
      uint64_t v45 = v53;
      uint64_t v12 = v54;
      int64_t v13 = v55;
      unint64_t v14 = v56;
    }

    else
    {
      int64_t v13 = 0LL;
      uint64_t v45 = v8 + 56;
      sub_100031B44();
      unint64_t v14 = v15 & v16;
    }

    unint64_t v43 = v42 + 1;
    int64_t v44 = (unint64_t)(v12 + 64) >> 6;
    while (v9 < 0)
    {
      uint64_t v20 = __CocoaSet.Iterator.next()(v11);
      if (!v20) {
        goto LABEL_35;
      }
      uint64_t v21 = v20;
      uint64_t v47 = v20;
      sub_10000FF78();
      sub_100031D1C();
      sub_100026E78((uint64_t)&v48, (uint64_t)&v47, (uint64_t)&type metadata for Swift.AnyObject + 8);
      uint64_t v22 = v48;
      uint64_t v23 = swift_unknownObjectRelease(v21);
      int64_t v19 = v13;
      uint64_t v17 = v14;
      if (!v22) {
        goto LABEL_35;
      }
LABEL_26:
      unint64_t v46 = v17;
      uint64_t v29 = dispatch thunk of ControlChannelConnection.resolvedIdentity.getter(v23);
      if (v29)
      {
        uint64_t v30 = (void *)v29;
        sub_10002AA74();
        uint64_t v32 = v31;
        sub_10001C9DC((unint64_t)v30);
        swift_release(v32);
      }

      uint64_t v11 = sub_100020490();
      int64_t v13 = v19;
      unint64_t v14 = v46;
    }

    if (v14)
    {
      uint64_t v17 = (v14 - 1) & v14;
      unint64_t v18 = __clz(__rbit64(v14)) | (v13 << 6);
      int64_t v19 = v13;
      goto LABEL_25;
    }

    int64_t v19 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_38;
    }

    if (v19 >= v44) {
      goto LABEL_35;
    }
    if (*(void *)(v45 + 8 * v19))
    {
LABEL_24:
      sub_100031C4C();
      uint64_t v17 = v26 & v25;
      unint64_t v18 = v27 + (v19 << 6);
LABEL_25:
      uint64_t v28 = *(void *)(*(void *)(v9 + 48) + 8 * v18);
      uint64_t v23 = swift_retain(v28);
      if (!v28) {
        goto LABEL_35;
      }
      goto LABEL_26;
    }

    int64_t v24 = v13 + 2;
    if (v13 + 2 >= v44) {
      goto LABEL_35;
    }
    if (*(void *)(v45 + 8 * v24)) {
      goto LABEL_23;
    }
    int64_t v24 = v13 + 3;
    if (v13 + 3 >= v44) {
      goto LABEL_35;
    }
    if (*(void *)(v45 + 8 * v24))
    {
LABEL_23:
      int64_t v19 = v24;
      goto LABEL_24;
    }

    int64_t v19 = v13 + 4;
    if (v13 + 4 >= v44) {
      goto LABEL_35;
    }
    if (*(void *)(v45 + 8 * v19)) {
      goto LABEL_24;
    }
    int64_t v33 = v13 + 5;
    while (v33 < v44)
    {
      if (*(void *)(v45 + 8 * v33++))
      {
        int64_t v19 = v33 - 1;
        goto LABEL_24;
      }
    }

LABEL_36:
  uint64_t v35 = sub_100031D08();
  uint64_t v36 = static os_log_type_t.default.getter(v35);
  os_log(_:dso:log:_:_:)( v36,  &_mh_execute_header,  qword_1000845F0,  "Clearing expired pairing records",  32LL,  2LL,  &_swiftEmptyArrayStorage);
  sub_10002AA74();
  uint64_t v38 = v37;
  sub_10001BE5C();
  swift_release(v38);
  sub_10000FF80();
}

        uint64_t v23 = (v29 - 1) & v29;
        int64_t v24 = __clz(__rbit64(v29)) + (v8 << 6);
LABEL_37:
        uint64_t v31 = *(void *)(*(void *)(v2 + 48) + 8 * v24);
        sub_10000FFDC();
        if (v31) {
          goto LABEL_38;
        }
        goto LABEL_40;
      }

      __break(1u);
LABEL_43:
      if (v8 < 0) {
        uint64_t v32 = v8;
      }
      else {
        uint64_t v32 = v8 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v8);
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v32);
      if (v9) {
        goto LABEL_5;
      }
    }

    while (1)
    {
      uint64_t v25 = __CocoaSet.Iterator.next()(v16);
      if (!v25) {
        break;
      }
      uint64_t v26 = v25;
      uint64_t v35 = v25;
      sub_10000FF78();
      sub_100039F38();
      swift_dynamicCast(&v36, &v35, (char *)&type metadata for Swift.AnyObject + 8, v2 & 0x7FFFFFFFFFFFFFFFLL, 7LL);
      uint64_t v27 = v36;
      swift_unknownObjectRelease(v26);
      uint64_t v8 = v18;
      uint64_t v23 = v19;
      if (!v27) {
        break;
      }
LABEL_38:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v1, v22, v3);
      dispatch thunk of ControlChannelConnection.invalidate(for:)(v1);
      sub_100012464();
      uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
      unint64_t v18 = v8;
      int64_t v19 = v23;
      if ((v2 & 0x8000000000000000LL) == 0) {
        goto LABEL_18;
      }
    }

uint64_t sub_10002D18C()
{
  return 1LL;
}

void sub_10002D194(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v4;
  uint64_t v10 = type metadata accessor for PinNotificationEvent(0LL);
  sub_1000319E8();
  __chkstk_darwin(v11, v12);
  sub_1000203D4();
  os_log_type_t v14 = static os_log_type_t.error.getter(v13);
  uint64_t v15 = (os_log_s *)qword_1000845F0;
  os_log_type_t v16 = v14;
  if (os_log_type_enabled((os_log_t)qword_1000845F0, v14))
  {
    sub_100031D10();
    uint64_t v52 = v7;
    uint64_t v17 = (_DWORD *)sub_1000122E0(12LL);
    uint64_t v51 = v10;
    uint64_t v18 = sub_1000122E0(32LL);
    v55[0] = v18;
    *uint64_t v17 = 136315138;
    swift_bridgeObjectRetain(a2);
    sub_100045370(a1, (uint64_t)a2, v55);
    uint64_t v20 = sub_100031A10(v19);
    a4 = *(void *)(v21 - 256);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v20, v22, v17 + 1, v17 + 3);
    sub_100031CD8((uint64_t)a2);
    sub_100031CCC((void *)&_mh_execute_header, v15, v16, ">>>>> show pin: %s");
    swift_arrayDestroy(v18, 1LL);
    uint64_t v23 = v18;
    uint64_t v10 = v51;
    sub_10001001C(v23);
    uint64_t v24 = (uint64_t)v17;
    uint64_t v7 = v52;
    sub_10001001C(v24);
  }

  uint64_t v25 = (uint64_t (*)(uint64_t *))v7[17];
  if (!v25) {
    goto LABEL_9;
  }
  uint64_t v26 = v7[18];
  uint64_t *v6 = a1;
  v6[1] = (uint64_t)a2;
  v6[2] = a3;
  v6[3] = a4;
  (*(void (**)(uint64_t *, void, uint64_t))(v5 + 104))(v6, enum case for PinNotificationEvent.show(_:), v10);
  swift_bridgeObjectRetain(a2);
  sub_10002FE80((uint64_t)v25, v26);
  sub_10001DE00();
  char v27 = v25(v6);
  uint64_t v28 = v10;
  char v29 = v27;
  uint64_t v30 = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 8))(v6, v28);
  if ((v29 & 1) == 0)
  {
    sub_100031D48();
LABEL_9:
    uint64_t v39 = sub_10000FD7C(&qword_1000820E8);
    uint64_t inited = swift_initStackObject(v39, v56);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100062960;
    sub_100031D28((void *)kCFUserNotificationAlertHeaderKey);
    sub_10000FD7C(&qword_1000820F0);
    sub_10002FE00();
    sub_100031ACC();
    *(void *)(inited + 96) = &type metadata for String;
    *(void *)(inited + 72) = 0x72696170206E6950LL;
    *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = 0xEB00000000676E69LL;
    sub_100031D28((void *)kCFUserNotificationAlertMessageKey);
    sub_100031ACC();
    v55[0] = 0LL;
    v55[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(36LL);
    swift_bridgeObjectRelease(v55[1]);
    strcpy((char *)v55, "Enter the PIN ");
    HIBYTE(v55[1]) = -18;
    v41._countAndFlagsBits = a1;
    v41._object = a2;
    String.append(_:)(v41);
    sub_100031920();
    v42._countAndFlagsBits = 0xD000000000000014LL;
    String.append(_:)(v42);
    uint64_t v43 = v55[0];
    uint64_t v44 = v55[1];
    *(void *)(inited + 168) = &type metadata for String;
    *(void *)(inited + 144) = v43;
    *(void *)(inited + 152) = v44;
    uint64_t v45 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    Class isa = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v45);
    CFUserNotificationRef v47 = CFUserNotificationCreate(0LL, 0.0, 0x23uLL, 0LL, isa);

    uint64_t v48 = (void *)v7[16];
    v7[16] = v47;

    uint64_t v50 = static os_log_type_t.error.getter(v49);
    os_log(_:dso:log:_:_:)( v50,  &_mh_execute_header,  qword_1000845F0,  ">>>>> created CFUsernotification",  32LL,  2LL,  &_swiftEmptyArrayStorage);
    goto LABEL_10;
  }

  os_log_type_t v31 = static os_log_type_t.error.getter(v30);
  uint64_t v32 = (os_log_s *)qword_1000845F0;
  os_log_type_t v33 = v31;
  if (os_log_type_enabled((os_log_t)qword_1000845F0, v31))
  {
    sub_100031D10();
    os_log_type_t v34 = (_DWORD *)sub_1000122E0(12LL);
    uint64_t v35 = sub_1000122E0(32LL);
    v55[0] = v35;
    *os_log_type_t v34 = 136315138;
    swift_bridgeObjectRetain(a2);
    sub_100045370(a1, (uint64_t)a2, v55);
    uint64_t v37 = sub_100031A10(v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v37, v38, v34 + 1, v34 + 3);
    sub_100031CD8((uint64_t)a2);
    sub_100031CCC((void *)&_mh_execute_header, v32, v33, ">>>>> used custom pin handler: %s");
    sub_100031C94();
    sub_10001001C(v35);
    sub_10001001C((uint64_t)v34);
  }

  sub_100031D48();
LABEL_10:
  sub_100012268();
}

void sub_10002D650()
{
  uint64_t v3 = v0;
  type metadata accessor for PinNotificationEvent(0LL);
  sub_100031C2C();
  __chkstk_darwin(v4, v5);
  sub_100016B50();
  uint64_t v6 = *(void (**)(uint64_t))(v0 + 136);
  if (v6)
  {
    uint64_t v7 = *(void *)(v0 + 144);
    sub_100026C84( v1,  enum case for PinNotificationEvent.hide(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104));
    sub_10000FFDC();
    v6(v1);
    sub_10002FBF0((uint64_t)v6, v7);
    sub_100026D54(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  }

  uint64_t v8 = *(__CFUserNotification **)(v3 + 128);
  if (v8)
  {
    CFUserNotificationCancel(v8);
    uint64_t v9 = *(void **)(v3 + 128);
    *(void *)(v3 + 128) = 0LL;
  }

  sub_100031C6C();
}

uint64_t sub_10002D6F4( int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  id v16 = a7;
  swift_retain_n(a9, 2LL);
  id v17 = v16;
  sub_10002AA18();
  sub_10004B6A8(a1, a2, a3, a4, a5, a6, v18, v17, a8, a9);
  swift_release();

  return swift_release();
}

void sub_10002D7B0()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  v24[0] = v5;
  uint64_t v7 = v6;
  uint64_t v8 = sub_10000FD7C((uint64_t *)&unk_1000820D8);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8, v11);
  sub_100031A90(v7, (uint64_t)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = (v12 + 32) & ~v12;
  uint64_t v14 = swift_allocObject(&unk_1000776E8, v13 + v10, v12 | 7);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)(v14 + 24) = v2;
  sub_10002FD90((uint64_t)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL), v14 + v13, (uint64_t *)&unk_1000820D8);
  v24[6] = sub_10002FDBC;
  void v24[7] = v14;
  v24[2] = _NSConcreteStackBlock;
  void v24[3] = 1107296256LL;
  sub_100016C54((uint64_t)sub_100040708);
  sub_100016D38();
  sub_10001241C();
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_10000FFDC();
  static DispatchQoS.unspecified.getter(v19);
  sub_100016C60();
  sub_100031BF4();
  __chkstk_darwin(v20, v21);
  sub_100016C88();
  v24[1] = &_swiftEmptyArrayStorage;
  sub_10003186C((unint64_t *)&qword_1000813C0, v22);
  sub_100031A58();
  sub_100031A88((unint64_t *)&qword_1000813D0);
  sub_100031954(v23);
  sub_1000319F8();
  sub_100031CA0();
  sub_100031BA8();
  sub_100026D54((uint64_t)v18, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  swift_release();
  sub_10000FF80();
}

void sub_10002D960( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  uint64_t v8 = type metadata accessor for PairingConsentCollectionOutcome(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  sub_100016B50();
  sub_100026C84( v6,  enum case for PairingConsentCollectionOutcome.consentNotRequired(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 104));
  a6(v6);
  sub_100026D54(v6, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
  sub_100031C6C();
}

uint64_t sub_10002D9DC()
{
  uint64_t v1 = v0;
  sub_10002956C();
  return sub_10003192C(v1);
}

void sub_10002DA00(uint64_t a1)
{
  uint64_t v4 = v2;
  uint64_t v6 = type metadata accessor for HostDeletionTarget(0LL);
  sub_100031BF4();
  __chkstk_darwin(v7, v8);
  sub_10000FFCC();
  uint64_t v11 = v10 - v9;
  sub_100031CF4(v10 - v9, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 88))(v11, v6);
  if ((_DWORD)v12 == enum case for HostDeletionTarget.singleHost(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v1 + 96))(v11, v6);
    uint64_t v13 = type metadata accessor for UUID(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = *(void *)(v14 + 64);
    __chkstk_darwin(v13, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 32))( (char *)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v11,  v13);
    sub_10002AA74();
    sub_10001CBF0();
    if (v3)
    {
      (*(void (**)(char *, uint64_t))(v14 + 8))((char *)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL), v13);
      sub_100012464();
    }

    else
    {
      sub_10001AC84();
      char v27 = v26;
      uint64_t v99 = &v94;
      uint64_t v100 = v13;
      uint64_t v104 = (uint64_t)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v102 = 0LL;
      uint64_t v28 = sub_100012464();
      id v98 = v27;
      uint64_t v29 = CUPairedPeer.associatedLockdownHostBUID.getter(v28);
      uint64_t v101 = v4;
      if (v30)
      {
        uint64_t v31 = v29;
        uint64_t v32 = v30;
        NSString v33 = String._bridgeToObjectiveC()();
        uint64_t v34 = lockdown_unpair_host_by_id();

        if ((_DWORD)v34)
        {
          uint64_t v36 = static os_log_type_t.error.getter(v35);
          os_log_type_t v37 = v36;
          uint64_t v103 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))&v94;
          uint64_t v38 = (os_log_s *)qword_1000845F0;
          __chkstk_darwin(v36, v39);
          sub_100031B34();
          sub_100031CF4(v34, v104, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16));
          os_log_t v97 = v38;
          if (os_log_type_enabled(v38, v37))
          {
            sub_10001DE00();
            uint64_t v40 = sub_1000122E0(22LL);
            uint64_t v41 = sub_1000122E0(64LL);
            v105[0] = v41;
            *(_DWORD *)uint64_t v40 = 136446466;
            LODWORD(v96) = v37;
            sub_10001DE00();
            sub_100045370(v31, v32, v105);
            uint64_t v107 = v42;
            sub_100031C3C(v42, v43, v44, v40 + 12);
            uint64_t v45 = sub_100031CD8(v32);
            *(_WORD *)(v40 + 12) = 2082;
            uint64_t v46 = UUID.uuidString.getter(v45);
            sub_100045370(v46, v47, v105);
            uint64_t v107 = v48;
            sub_100031C3C(v48, v49, v50, v40 + 22);
            sub_10001DC58();
            sub_100031B88();
            _os_log_impl( (void *)&_mh_execute_header,  v97,  (os_log_type_t)v96,  "Failed to delete lockdown record with host buid %{public}s associated with RemotePairing record %{public}s",  (uint8_t *)v40,  0x16u);
            swift_arrayDestroy(v41, 2LL);
            sub_10001001C(v41);
            sub_10001001C(v40);
          }

          else
          {
            sub_10001DC58();
            sub_100031B88();
          }

          sub_100031D3C();
        }

        else
        {
          uint64_t v29 = sub_10001DC58();
        }
      }

      uint64_t v52 = static os_log_type_t.default.getter(v29);
      os_log_type_t v53 = v52;
      uint64_t v54 = (os_log_s *)qword_1000845F0;
      __chkstk_darwin(v52, v55);
      uint64_t v56 = v100;
      uint64_t v103 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
      v103((uint64_t)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL), v104, v100);
      if (os_log_type_enabled(v54, v53))
      {
        os_log_t v96 = v54;
        uint64_t v57 = (uint8_t *)sub_1000122E0(12LL);
        uint64_t v58 = sub_1000122E0(32LL);
        os_log_t v97 = (os_log_t)&v94;
        uint64_t v59 = v58;
        v105[0] = v58;
        *(_DWORD *)uint64_t v57 = 136315138;
        uint64_t v95 = v57 + 4;
        uint64_t v60 = UUID.uuidString.getter(v58);
        uint64_t v54 = (os_log_s *)v61;
        sub_100045370(v60, v61, v105);
        uint64_t v63 = sub_100031A10(v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v63, v64, v95, v57 + 12);
        swift_bridgeObjectRelease(v54);
        sub_100031C04();
        _os_log_impl((void *)&_mh_execute_header, v96, v53, "Deleting pairing record for host %s", v57, 0xCu);
        sub_100031C94();
        sub_10001001C(v59);
        sub_10001001C((uint64_t)v57);
      }

      else
      {
        sub_100031C04();
      }

      sub_10002AA74();
      uint64_t v65 = sub_10000FD7C((uint64_t *)&unk_1000835C0);
      uint64_t v67 = __chkstk_darwin(v65, v66);
      uint64_t v75 = sub_100031AE0(v67, v68, v69, v70, v71, v72, v73, v74, v94);
      uint64_t v76 = v104;
      v103((uint64_t)v75, v104, v56);
      sub_10001DC8C((uint64_t)v54, 0LL);
      uint64_t v77 = v102;
      sub_10001B9F4();
      uint64_t v102 = v77;
      if (v77)
      {

        sub_100012464();
        sub_100026B84((uint64_t)v54, (uint64_t *)&unk_1000835C0);
        ((void (*)(uint64_t, uint64_t))v14)(v76, v56);
      }

      else
      {
        os_log_t v97 = (os_log_t)v14;
        sub_100026B84((uint64_t)v54, (uint64_t *)&unk_1000835C0);
        sub_100012464();
        sub_10002B304();
        uint64_t v79 = *((void *)v78 + 2);
        if (v79)
        {
          os_log_t v96 = v78;
          uint64_t v80 = (uint64_t)v78 + 32;
          uint64_t v81 = v100;
          do
          {
            sub_10002697C(v80, (uint64_t)v105);
            uint64_t v82 = sub_10000FF14(v105, v106);
            uint64_t v84 = __chkstk_darwin(v82, v83);
            uint64_t v92 = sub_100031AE0(v84, v85, v86, v87, v88, v89, v90, v91, v94);
            sub_100031CF4((uint64_t)v92, v104, v103);
            sub_10001D930((uint64_t)v54, 0LL, 1LL, v81);
            sub_10002A254();
            sub_100026B84((uint64_t)v54, (uint64_t *)&unk_1000835C0);
            sub_10000FF38(v105);
            v80 += 40LL;
            --v79;
          }

          while (v79);
          swift_bridgeObjectRelease(v96);
        }

        else
        {
          swift_bridgeObjectRelease(v78);
        }

        sub_10002AA18();
        uint64_t v93 = v104;
        sub_10004D630(v104);

        sub_100012464();
        ((void (*)(uint64_t, uint64_t))v97)(v93, v100);
      }
    }

LABEL_18:
    sub_100012268();
    return;
  }

  if ((_DWORD)v12 == enum case for HostDeletionTarget.all(_:))
  {
    uint64_t v17 = static os_log_type_t.default.getter(v12);
    os_log(_:dso:log:_:_:)( v17,  &_mh_execute_header,  qword_1000845F0,  "Deleting all pairing records",  28LL,  2LL,  &_swiftEmptyArrayStorage);
    sub_10002AA74();
    uint64_t v18 = sub_10000FD7C((uint64_t *)&unk_1000835C0);
    uint64_t v19 = *(void *)(*(void *)(v18 - 8) + 64LL);
    __chkstk_darwin(v18, v20);
    type metadata accessor for UUID(0LL);
    sub_10001DC8C((uint64_t)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL), 1LL);
    sub_10001B9F4();
    sub_100026B84((uint64_t)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL), (uint64_t *)&unk_1000835C0);
    sub_100012464();
    if (!v3)
    {
      sub_10002B304();
      uint64_t v22 = *(void *)(v21 + 16);
      if (v22)
      {
        uint64_t v101 = v4;
        uint64_t v102 = 0LL;
        uint64_t v104 = v21;
        uint64_t v23 = v21 + 32;
        do
        {
          sub_10002697C(v23, (uint64_t)v105);
          uint64_t v24 = sub_10000FF14(v105, v106);
          __chkstk_darwin(v24, v25);
          sub_100031B34();
          sub_10001DC8C(0LL, 1LL);
          sub_10002A254();
          sub_100026B84(0LL, (uint64_t *)&unk_1000835C0);
          sub_10000FF38(v105);
          v23 += 40LL;
          --v22;
        }

        while (v22);
        swift_bridgeObjectRelease(v104);
      }

      else
      {
        swift_bridgeObjectRelease(v21);
      }

      sub_10002AA18();
      sub_10004D230(v51);
      sub_100012464();
    }

    goto LABEL_18;
  }

  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x6168636165726E55LL,  0xEB00000000656C62LL,  "remotepairingdeviced/RemotePairingDeviceService.swift",  53LL,  2LL,  479LL,  0);
  __break(1u);
}

    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    return a1;
  }

  if (!v11)
  {
    swift_release();
    goto LABEL_18;
  }

  uint64_t v12 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = v11;
  *(void *)(a1 + 152) = v12;
  swift_release();
  return a1;
}

void sub_10002E1D4()
{
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for PairedHostInfo(0LL);
  sub_100031C2C();
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v32 - v14;
  sub_10002AA74();
  uint64_t v17 = v16;
  sub_10001A47C();
  uint64_t v19 = v18;
  swift_release(v17);
  if (!v0)
  {
    uint64_t v20 = v19;
    if ((unint64_t)v19 >> 62)
    {
      if (v19 < 0) {
        uint64_t v31 = v19;
      }
      else {
        uint64_t v31 = v19 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v19);
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter(v31);
      if (v21) {
        goto LABEL_4;
      }
    }

    else
    {
      uint64_t v21 = *(void *)((v19 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v19);
      if (v21)
      {
LABEL_4:
        uint64_t v35 = v21;
        if (v21 < 1)
        {
          __break(1u);
          return;
        }

        NSString v33 = v15;
        uint64_t v22 = 0LL;
        unint64_t v36 = v19 & 0xC000000000000001LL;
        uint64_t v37 = v1;
        uint64_t v23 = &_swiftEmptyArrayStorage;
        uint64_t v34 = v12;
        uint64_t v24 = v35;
        do
        {
          if (v36) {
            id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v20);
          }
          else {
            id v25 = *(id *)(v20 + 8 * v22 + 32);
          }
          uint64_t v26 = v25;
          uint64_t v38 = v25;
          sub_10002E474(&v38, v6);

          if (sub_10001D9C8(v6, 1LL, v7) == 1)
          {
            sub_100026B84(v6, (uint64_t *)&unk_1000820A0);
          }

          else
          {
            uint64_t v27 = (uint64_t)v33;
            sub_100031D54((uint64_t)v33, v6);
            sub_100031D54((uint64_t)v12, v27);
            if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0) {
              uint64_t v23 = (void *)sub_100031CB4(0LL, v23[2] + 1LL);
            }
            unint64_t v29 = v23[2];
            unint64_t v28 = v23[3];
            if (v29 >= v28 >> 1) {
              uint64_t v23 = (void *)sub_100031CB4(v28 > 1, v29 + 1);
            }
            v23[2] = v29 + 1;
            uint64_t v30 = (uint64_t)v23
            uint64_t v12 = v34;
            sub_100031D54(v30, (uint64_t)v34);
            uint64_t v24 = v35;
          }

          ++v22;
        }

        while (v24 != v22);
      }
    }

    swift_bridgeObjectRelease_n(v20, 2LL);
  }

uint64_t sub_10002E474@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = sub_10002FC7C(*a1, (SEL *)&selRef_name);
  if (v5) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0x6E776F6E6B6E55LL;
  }
  if (v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = 0xE700000000000000LL;
  }
  uint64_t v8 = sub_10002FC7C(v3, (SEL *)&selRef_model);
  if (v9)
  {
    uint64_t v60 = v8;
    uint64_t v64 = v9;
    goto LABEL_18;
  }

  sub_10002FC00(v3);
  if (!v10)
  {
    __int128 v71 = 0u;
    __int128 v72 = 0u;
    goto LABEL_17;
  }

  uint64_t v11 = v10;
  uint64_t v67 = 0x6C65646F6DLL;
  unint64_t v68 = 0xE500000000000000LL;
  AnyHashable.init<A>(_:)(&v67, &type metadata for String, &protocol witness table for String);
  sub_10003C3FC(v11, &v71);
  sub_10001DBE0((uint64_t)&v69);
  swift_bridgeObjectRelease(v11);
  if (!*((void *)&v72 + 1))
  {
LABEL_17:
    sub_100026B84((uint64_t)&v71, &qword_100081598);
    uint64_t v64 = 0LL;
    uint64_t v60 = 0LL;
    goto LABEL_18;
  }

  int v12 = swift_dynamicCast(&v69, &v71, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
  uint64_t v13 = v69;
  uint64_t v14 = v70;
  if (!v12) {
    uint64_t v14 = 0LL;
  }
  uint64_t v64 = v14;
  if (!v12) {
    uint64_t v13 = 0LL;
  }
  uint64_t v60 = v13;
LABEL_18:
  uint64_t v15 = CUPairedPeer.serialNumber.getter();
  unint64_t v65 = v7;
  uint64_t v66 = a2;
  uint64_t v62 = v6;
  if (v16)
  {
    uint64_t v59 = v15;
    uint64_t v63 = v16;
    goto LABEL_29;
  }

  sub_10002FC00(v3);
  if (!v17)
  {
    __int128 v71 = 0u;
    __int128 v72 = 0u;
    goto LABEL_28;
  }

  uint64_t v18 = v17;
  sub_10000E484(0LL, (unint64_t *)&qword_1000820B0, &OBJC_CLASS___CUPairedPeer_ptr);
  uint64_t v67 = static CUPairedPeer.serialNumberInfoKey.getter();
  unint64_t v68 = v19;
  AnyHashable.init<A>(_:)(&v67, &type metadata for String, &protocol witness table for String);
  sub_10003C3FC(v18, &v71);
  sub_10001DBE0((uint64_t)&v69);
  swift_bridgeObjectRelease(v18);
  if (!*((void *)&v72 + 1))
  {
LABEL_28:
    sub_100026B84((uint64_t)&v71, &qword_100081598);
    uint64_t v63 = 0LL;
    uint64_t v59 = 0LL;
    goto LABEL_29;
  }

  int v20 = swift_dynamicCast(&v69, &v71, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
  uint64_t v21 = v69;
  uint64_t v22 = v70;
  if (!v20) {
    uint64_t v22 = 0LL;
  }
  uint64_t v63 = v22;
  if (!v20) {
    uint64_t v21 = 0LL;
  }
  uint64_t v59 = v21;
LABEL_29:
  uint64_t v23 = type metadata accessor for UUID(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(void *)(v24 + 64);
  __chkstk_darwin(v23, v26);
  unint64_t v27 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v61 = (char *)v55 - v27;
  id v28 = [v3 identifier];
  uint64_t v29 = sub_10000FD7C((uint64_t *)&unk_1000835C0);
  uint64_t v31 = __chkstk_darwin(v29, v30);
  unint64_t v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v35 = (char *)v55 - v34;
  if (v28)
  {
    uint64_t v58 = v3;
    __chkstk_darwin(v31, v32);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v28);

    unint64_t v36 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
    v36(v35, (char *)v55 - v27, v23);
    sub_10001D930((uint64_t)v35, 0LL, 1LL, v23);
    if (sub_10001D9C8((uint64_t)v35, 1LL, v23) != 1)
    {
      uint64_t v37 = v61;
      uint64_t v38 = ((uint64_t (*)(char *, char *, uint64_t))v36)(v61, v35, v23);
      uint64_t v39 = CUPairedPeer.isPairedForAutomation.getter(v38);
      int v56 = v39;
      uint64_t v57 = v55;
      __chkstk_darwin(v39, v40);
      uint64_t v41 = (char *)v55 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v41, v37, v23);
      uint64_t v42 = sub_10000FD7C(&qword_1000820C0);
      v55[1] = v55;
      uint64_t v43 = *(void *)(*(void *)(v42 - 8) + 64LL);
      __chkstk_darwin(v42, v44);
      unint64_t v45 = (v43 + 15) & 0xFFFFFFFFFFFFFFF0LL;
      uint64_t v46 = sub_100057710((uint64_t)v55 - v45);
      v55[0] = v55;
      uint64_t v48 = __chkstk_darwin(v46, v47);
      CUPairedPeer.initialPairingTime.getter(v48);
      uint64_t v49 = v66;
      PairedHostInfo.init(name:identifier:lastUsed:initialPairingTime:pairedForAutomation:model:serialNumber:)( v62,  v65,  v41,  (char *)v55 - v45,  (char *)v55 - v45,  v56 & 1,  v60,  v64,  v59,  v63);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v37, v23);
      uint64_t v50 = type metadata accessor for PairedHostInfo(0LL);
      return sub_10001D930(v49, 0LL, 1LL, v50);
    }
  }

  else
  {
    sub_10001D930((uint64_t)v55 - v34, 1LL, 1LL, v23);
  }

  swift_bridgeObjectRelease(v65);
  swift_bridgeObjectRelease(v64);
  swift_bridgeObjectRelease(v63);
  sub_100026B84((uint64_t)v35, (uint64_t *)&unk_1000835C0);
  uint64_t v53 = static os_log_type_t.error.getter(v52);
  os_log(_:dso:log:_:_:)( v53,  &_mh_execute_header,  qword_1000845F0,  "Ignoring malformed CUPairedPeer without identifier",  50LL,  2LL,  &_swiftEmptyArrayStorage);
  uint64_t v54 = type metadata accessor for PairedHostInfo(0LL);
  return sub_10001D930(v66, 1LL, 1LL, v54);
}

uint64_t sub_10002EA04(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ControlChannelConnection.State(0LL);
  uint64_t v63 = *(void *)(v3 - 8);
  uint64_t v64 = v3;
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = v1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v7 = a1;
    }
    else {
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v8 = __CocoaSet.makeIterator()(v7);
    uint64_t v9 = type metadata accessor for ControlChannelConnection(0LL);
    sub_1000318B8( &qword_100082090,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
    uint64_t isUniquelyReferenced_nonNull_native = Set.Iterator.init(_cocoa:)(v8, v9, v10);
    a1 = v65[1];
    uint64_t v51 = v65[2];
    uint64_t v12 = v65[3];
    int64_t v13 = v65[4];
    unint64_t v14 = v65[5];
  }

  else
  {
    uint64_t v15 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v16 = *(void *)(a1 + 56);
    uint64_t v51 = a1 + 56;
    uint64_t v12 = ~v15;
    uint64_t v17 = -v15;
    if (v17 < 64) {
      uint64_t v18 = ~(-1LL << v17);
    }
    else {
      uint64_t v18 = -1LL;
    }
    unint64_t v14 = v18 & v16;
    swift_bridgeObjectRetain(a1);
    int64_t v13 = 0LL;
  }

  uint64_t v49 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v46 = v12;
  int64_t v50 = (unint64_t)(v12 + 64) >> 6;
  int v19 = enum case for ControlChannelConnection.State.preparingPairingSession(_:);
  int v62 = enum case for ControlChannelConnection.State.setUpManualPairingInProgress(_:);
  int v60 = enum case for ControlChannelConnection.State.deviceRequestUserPairingConsentInProgress(_:);
  int v61 = enum case for ControlChannelConnection.State.upgradeLockdownPairingInProgress(_:);
  int v58 = enum case for ControlChannelConnection.State.transportStarting(_:);
  int v59 = enum case for ControlChannelConnection.State.notStarted(_:);
  int v56 = enum case for ControlChannelConnection.State.verifyManualPairingInProgress(_:);
  int v57 = enum case for ControlChannelConnection.State.handshakeInProgress(_:);
  int v54 = enum case for ControlChannelConnection.State.unauthenticated(_:);
  int v55 = enum case for ControlChannelConnection.State.authenticated(_:);
  int v53 = enum case for ControlChannelConnection.State.invalidated(_:);
  int v45 = enum case for ControlChannelConnection.State.hostRequestPeerInfoInProgress(_:);
  int v44 = enum case for ControlChannelConnection.State.deviceAwaitingPairVerify(_:);
  uint64_t v48 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v52 = &_swiftEmptyArrayStorage;
  while (1)
  {
    int64_t v20 = v13;
    if ((a1 & 0x8000000000000000LL) == 0) {
      break;
    }
    uint64_t v23 = __CocoaSet.Iterator.next()(isUniquelyReferenced_nonNull_native);
    if (!v23) {
      goto LABEL_69;
    }
    uint64_t v24 = v23;
    v65[0] = v23;
    uint64_t v25 = type metadata accessor for ControlChannelConnection(0LL);
    swift_unknownObjectRetain(v24);
    swift_dynamicCast(&v66, v65, v48, v25, 7LL);
    uint64_t v26 = v66;
    uint64_t v27 = swift_unknownObjectRelease(v24);
    if (!v26) {
      goto LABEL_69;
    }
LABEL_34:
    dispatch thunk of ControlChannelConnection.state.getter(v27);
    int v31 = (*(uint64_t (**)(char *, uint64_t))(v63 + 88))(v6, v64);
    if (v31 == v19)
    {
      (*(void (**)(char *, uint64_t))(v63 + 96))(v6, v64);
      uint64_t v37 = sub_10000FD7C(&qword_100082098);
      sub_10002FBF0(*(void *)&v6[*(int *)(v37 + 48)], *(void *)&v6[*(int *)(v37 + 48) + 8]);
      sub_100015D58(*(void *)&v6[*(int *)(v37 + 64)], *(void *)&v6[*(int *)(v37 + 64) + 8]);
      uint64_t v38 = type metadata accessor for PairingData.Kind(0LL);
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = 3LL;
LABEL_58:
      (*(void (**)(char *, uint64_t))(v39 + 8))(v6, v38);
      goto LABEL_64;
    }

    if (v31 == v62 || v31 == v61 || v31 == v60)
    {
      uint64_t v39 = v63;
      uint64_t v38 = v64;
      uint64_t v40 = 4LL;
      goto LABEL_58;
    }

    if (v31 == v59 || v31 == v58 || v31 == v57 || v31 == v56) {
      goto LABEL_63;
    }
    if (v31 == v55)
    {
      uint64_t v40 = 5LL;
      goto LABEL_64;
    }

    if (v31 == v54)
    {
      uint64_t v40 = 2LL;
      goto LABEL_64;
    }

    if (v31 == v53)
    {
      uint64_t isUniquelyReferenced_nonNull_native = swift_release(v26);
    }

    else
    {
      if (v31 == v45) {
        goto LABEL_71;
      }
      if (v31 != v44)
      {
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x6168636165726E55LL,  0xEB00000000656C62LL,  "remotepairingdeviced/RemotePairingDeviceService.swift",  53LL,  2LL,  532LL,  0);
        goto LABEL_73;
      }

LABEL_63:
      uint64_t v40 = 3LL;
LABEL_64:
      swift_release(v26);
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v52);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10004424C();
        uint64_t v52 = (void *)isUniquelyReferenced_nonNull_native;
      }

      unint64_t v41 = v52[2];
      if (v41 >= v52[3] >> 1)
      {
        sub_10004424C();
        uint64_t v52 = (void *)isUniquelyReferenced_nonNull_native;
      }

      uint64_t v42 = v52;
      v52[2] = v41 + 1;
      v42[v41 + 4] = v40;
    }
  }

  if (v14)
  {
    unint64_t v21 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v22 = v21 | (v13 << 6);
LABEL_33:
    uint64_t v26 = *(void *)(*(void *)(a1 + 48) + 8 * v22);
    uint64_t v27 = swift_retain(v26);
    if (!v26) {
      goto LABEL_69;
    }
    goto LABEL_34;
  }

  int64_t v28 = v13 + 1;
  if (!__OFADD__(v13, 1LL))
  {
    if (v28 >= v50) {
      goto LABEL_69;
    }
    unint64_t v29 = *(void *)(v51 + 8 * v28);
    ++v13;
    if (!v29)
    {
      int64_t v13 = v20 + 2;
      if (v20 + 2 >= v50) {
        goto LABEL_69;
      }
      unint64_t v29 = *(void *)(v51 + 8 * v13);
      if (!v29)
      {
        int64_t v13 = v20 + 3;
        if (v20 + 3 >= v50) {
          goto LABEL_69;
        }
        unint64_t v29 = *(void *)(v51 + 8 * v13);
        if (!v29)
        {
          int64_t v13 = v20 + 4;
          if (v20 + 4 >= v50) {
            goto LABEL_69;
          }
          unint64_t v29 = *(void *)(v51 + 8 * v13);
          if (!v29)
          {
            int64_t v13 = v20 + 5;
            if (v20 + 5 >= v50) {
              goto LABEL_69;
            }
            unint64_t v29 = *(void *)(v51 + 8 * v13);
            if (!v29)
            {
              int64_t v30 = v20 + 6;
              while (v30 < v50)
              {
                unint64_t v29 = *(void *)(v51 + 8 * v30++);
                if (v29)
                {
                  int64_t v13 = v30 - 1;
                  goto LABEL_32;
                }
              }

                  swift_release();
                  swift_release();
                  *uint64_t v91 = v86;
                  return (_OWORD *)(*(uint64_t (**)(char *, uint64_t))(v84 + 8))(v133, v71);
                }
              }
            }
          }
        }
      }

LABEL_69:
              sub_10000FE04(a1);
              return (uint64_t)v52;
            }
          }
        }
      }
    }

uint64_t sub_10002F004@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v2;
  sub_10002914C(a1);
  return sub_10003192C(v3);
}

uint64_t sub_10002F030()
{
  uint64_t v1 = v0;
  swift_beginAccess(v0 + 24, v31, 0LL, 0LL);
  uint64_t v2 = *(void *)(v1 + 24);
  sub_100031AB0();
  uint64_t v3 = sub_100012464();
  os_log_type_t v4 = static os_log_type_t.debug.getter(v3);
  uint64_t v5 = (os_log_s *)qword_1000845F0;
  os_log_type_t v6 = v4;
  if (os_log_type_enabled((os_log_t)qword_1000845F0, v4))
  {
    sub_100031AB0();
    uint64_t v7 = (uint8_t *)sub_1000122E0(12LL);
    *(_DWORD *)uint64_t v7 = 134217984;
    uint64_t v29 = sub_10004F824(v2);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v7 + 4, v7 + 12);
    sub_100031D08();
    sub_100016D10( (void *)&_mh_execute_header,  v5,  v6,  "Determining USB host trust state across %ld control channels",  v7);
    sub_10001001C((uint64_t)v7);
  }

  uint64_t v8 = sub_10002EA04(v2);
  sub_100031D08();
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)(v8 + 32);
    uint64_t v11 = v9 - 1;
    if (v9 != 1)
    {
      sub_10001DE00();
      uint64_t v12 = 0LL;
      do
      {
        uint64_t v13 = *(void *)(v8 + 8 * v12 + 40);
        uint64_t v14 = sub_100031B6C();
        if ((static RPUSBConnectedHostTrustState.< infix(_:_:)(v14) & 1) != 0) {
          uint64_t v10 = v13;
        }
        ++v12;
      }

      while (v11 != v12);
      sub_10001DC58();
    }

    uint64_t v15 = sub_10001DC58();
    os_log_type_t v16 = static os_log_type_t.default.getter(v15);
    uint64_t v17 = (os_log_s *)qword_1000845F0;
    os_log_type_t v18 = v16;
    if (os_log_type_enabled((os_log_t)qword_1000845F0, v16))
    {
      int v19 = (uint8_t *)sub_1000122E0(12LL);
      uint64_t v20 = sub_1000122E0(32LL);
      uint64_t v29 = v20;
      *(_DWORD *)int v19 = 136315138;
      uint64_t v21 = RPUSBConnectedHostTrustState.description.getter(v10);
      sub_100031D5C(v21, v22, v23);
      sub_100031CE0();
      sub_1000319C0(v24, v25);
      sub_10001DDA4();
      sub_100016D10((void *)&_mh_execute_header, v17, v18, "Overall USB host trust state is %s", v19);
      sub_100012450(v20);
      sub_10001001C(v20);
      sub_10001001C((uint64_t)v19);
    }
  }

  else
  {
    uint64_t v26 = sub_10001DC58();
    uint64_t v27 = static os_log_type_t.default.getter(v26);
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_1000845F0,  "No hosts connected over USB",  27LL,  2LL,  &_swiftEmptyArrayStorage);
    return 1LL;
  }

  return v10;
}

uint64_t sub_10002F26C(char a1)
{
  uint64_t v3 = v2;
  if ((a1 & 1) != 0) {
    sub_100048790();
  }
  else {
    sub_1000485D8();
  }
  return sub_10003192C(v3);
}

uint64_t sub_10002F2A0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = v0 + 32;
    do
    {
      sub_100031C8C(v0, (uint64_t)v6);
      uint64_t v3 = v6[4];
      sub_10000FF14(v6, v6[3]);
      sub_100031B78(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32));
      uint64_t v0 = sub_10000FF38(v6);
      v2 += 40LL;
      --v1;
    }

    while (v1);
  }

  sub_10002045C();
  sub_100031C14();
  sub_10004D410(v4);
  return sub_100012464();
}

void sub_10002F338()
{
  uint64_t v1 = *(dispatch_queue_s **)(v0 + 16);
  uint64_t v2 = sub_100031AFC((uint64_t)sub_100033C28, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v3, v4);
  sub_10000FFDC();
  swift_release();
  xpc_set_event_stream_handler("com.apple.notifyd.matching", v1, v2);
  _Block_release(v2);
  sub_100031BD4();
}

uint64_t sub_10002F3C0(void *a1)
{
  uint64_t v2 = (const char *)XPC_EVENT_KEY_NAME.getter();
  if (xpc_dictionary_get_string(a1, v2))
  {
    uint64_t v4 = String.init(cString:)();
    uint64_t v5 = v3;
    if (v4 == 0xD000000000000025LL)
    {
      unint64_t v6 = 0x8000000100068270LL;
      if (v3 == 0x8000000100068270LL) {
        goto LABEL_6;
      }
    }

    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000025LL, 0x8000000100068270LL, v4, v3, 0LL) & 1) != 0)
    {
      unint64_t v6 = v5;
LABEL_6:
      uint64_t v7 = swift_bridgeObjectRelease(v6);
      uint64_t v8 = static os_log_type_t.default.getter(v7);
      uint64_t v9 = os_log(_:dso:log:_:_:)( v8,  &_mh_execute_header,  qword_1000845F0,  "Received first unlock darwin notification",  41LL,  2LL,  &_swiftEmptyArrayStorage);
      return sub_100046674(v9);
    }

    if (v4 == 0xD00000000000002FLL && v5 == 0x80000001000682A0LL)
    {
      unint64_t v12 = 0x80000001000682A0LL;
LABEL_14:
      uint64_t v13 = swift_bridgeObjectRelease(v12);
      uint64_t v14 = static os_log_type_t.default.getter(v13);
      os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  qword_1000845F0,  "Received notification that wifi connection enablement state changed in lockdown. Re-evaluating network behavior",  111LL,  2LL,  &_swiftEmptyArrayStorage);
      sub_10002AFD0();
      uint64_t v16 = v15;
      sub_10003584C();
      return swift_release(v16);
    }

    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002FLL, 0x80000001000682A0LL, v4, v5, 0LL) & 1) != 0)
    {
      unint64_t v12 = v5;
      goto LABEL_14;
    }

    if (v4 == 0xD000000000000036LL && v5 == 0x80000001000682D0LL)
    {
      unint64_t v17 = 0x80000001000682D0LL;
LABEL_21:
      uint64_t v19 = swift_bridgeObjectRelease(v17);
      uint64_t v20 = static os_log_type_t.default.getter(v19);
      os_log(_:dso:log:_:_:)( v20,  &_mh_execute_header,  qword_1000845F0,  "Received notification that wifi pairing enablement state changed in lockdown. Re-evaluating network behavior",  108LL,  2LL,  &_swiftEmptyArrayStorage);
      sub_10002AB94();
      uint64_t v16 = v21;
      sub_100011988();
      return swift_release(v16);
    }

    uint64_t v18 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000036LL, 0x80000001000682D0LL, v4, v5, 0LL);
    if ((v18 & 1) != 0)
    {
      unint64_t v17 = v5;
      goto LABEL_21;
    }

    os_log_type_t v22 = static os_log_type_t.error.getter(v18);
    uint64_t v23 = (os_log_s *)qword_1000845F0;
    os_log_type_t v24 = v22;
    if (os_log_type_enabled((os_log_t)qword_1000845F0, v22))
    {
      swift_bridgeObjectRetain(v5);
      uint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v26 = swift_slowAlloc(32LL, -1LL);
      uint64_t v29 = v26;
      *(_DWORD *)uint64_t v25 = 136315138;
      swift_bridgeObjectRetain(v5);
      sub_100045370(v4, v5, &v29);
      uint64_t v28 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease_n(v5, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Received unknown notifyd launch event: %s", v25, 0xCu);
      swift_arrayDestroy(v26, 1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
      return swift_slowDealloc(v25, -1LL, -1LL);
    }

    else
    {
      return swift_bridgeObjectRelease(v5);
    }
  }

  else
  {
    uint64_t v11 = static os_log_type_t.error.getter(0LL);
    return os_log(_:dso:log:_:_:)( v11,  &_mh_execute_header,  qword_1000845F0,  "Bug in libxpc: event name not set in XPC launch event",  53LL,  2LL,  &_swiftEmptyArrayStorage);
  }

uint64_t sub_10002F740()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001ALL,  0x8000000100066830LL,  0x6D75646574617473LL,  0xE900000000000070LL);
  qword_100084608 = result;
  return result;
}

void sub_10002F7B0()
{
  uint64_t v1 = sub_100016BCC((uint64_t)&unk_100077670, 24LL);
  swift_weakInit(v1 + 16, v0);
  uint64_t v7 = v1;
  uint64_t v2 = sub_100031AFC((uint64_t)sub_10002F8A8, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v5, v6);
  swift_release(v7);
  uint64_t v3 = sub_100031B6C();
  uint64_t v4 = os_state_add_handler(v3);
  _Block_release(v2);
  *(void *)(v0 + 152) = v4;
  *(_BYTE *)(v0 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = 0;
  sub_100031BD4();
}

uint64_t sub_10002F850(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    uint64_t v4 = Strong;
    sub_10002F8F0();
    swift_release(v4);
  }

  return 0LL;
}

uint64_t sub_10002F8A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  uint64_t v5 = v4(a2);
  swift_release(v3);
  return v5;
}

uint64_t sub_10002F8F0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = v0 + 32;
    do
    {
      sub_100031C8C(v0, (uint64_t)v6);
      uint64_t v3 = v7;
      uint64_t v4 = v8;
      sub_10000FF14(v6, v7);
      if (qword_100080980 != -1) {
        swift_once(&qword_100080980, sub_10002F740);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 40))(qword_100084608, v3, v4);
      uint64_t v0 = sub_10000FF38(v6);
      v2 += 40LL;
      --v1;
    }

    while (v1);
  }

  sub_10002045C();
  sub_100031C14();
  if (qword_100080980 != -1) {
    swift_once(&qword_100080980, sub_10002F740);
  }
  sub_10004E230((os_log_s *)qword_100084608);
  return sub_100012464();
}

uint64_t sub_10002F9FC()
{
  if ((*(_BYTE *)(v0 + 160) & 1) == 0) {
    os_state_remove_handler(*(void *)(v0 + 152));
  }

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease(*(void *)(v0 + 104));
  swift_unknownObjectRelease(*(void *)(v0 + 112));
  swift_release();

  sub_10002FBF0(*(void *)(v0 + 136), *(void *)(v0 + 144));
  return v0;
}

uint64_t sub_10002FAA0()
{
  return swift_deallocClassInstance(v0, 161LL, 7LL);
}

uint64_t type metadata accessor for RemotePairingDeviceService()
{
  return objc_opt_self(&OBJC_CLASS____TtC20remotepairingdeviced26RemotePairingDeviceService);
}

void sub_10002FAE0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_10002FB00()
{
}

void sub_10002FB20( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
}

uint64_t sub_10002FB34()
{
  return sub_10002D9DC();
}

uint64_t sub_10002FB54@<X0>(uint64_t a1@<X8>)
{
  return sub_10002F004(a1);
}

uint64_t sub_10002FB74( int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  return sub_10002D6F4(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_10002FBA4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10002FBC8(uint64_t a1)
{
  return sub_10002F850(a1, v1);
}

uint64_t sub_10002FBD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002FBE0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10002FBE8(void *a1)
{
  return sub_10002F3C0(a1);
}

uint64_t sub_10002FBF0(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

void sub_10002FC00(void *a1)
{
  id v1 = [a1 info];
  if (v1)
  {
    uint64_t v2 = v1;
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }

  sub_100016C1C();
}

uint64_t sub_10002FC64(void *a1)
{
  return sub_10002FC7C(a1, (SEL *)&selRef_name);
}

uint64_t sub_10002FC70(void *a1)
{
  return sub_10002FC7C(a1, (SEL *)&selRef_model);
}

uint64_t sub_10002FC7C(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

void sub_10002FCD8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_100031C5C(a1, a2, a3);
  sub_100031CFC(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  sub_100016C1C();
}

uint64_t sub_10002FD04()
{
  uint64_t v1 = *(void *)(sub_10000FD7C((uint64_t *)&unk_1000820D8) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  uint64_t v5 = sub_100031B6C();
  if (swift_getEnumCaseMultiPayload(v5, v6) == 1)
  {
    swift_errorRelease(*(void *)(v0 + v3));
  }

  else
  {
    uint64_t v7 = type metadata accessor for ListenerStartedResponse(0LL);
    sub_100026C68(v7);
  }

  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

void sub_10002FD90(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_100031C5C(a1, a2, a3);
  sub_100031CFC(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_100016C1C();
}

uint64_t sub_10002FDBC()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_10000FD7C((uint64_t *)&unk_1000820D8) - 8) + 80LL);
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(v0 + ((v1 + 32) & ~v1));
}

unint64_t sub_10002FE00()
{
  unint64_t result = qword_1000820F8;
  if (!qword_1000820F8)
  {
    uint64_t v1 = sub_10001214C(&qword_1000820F0);
    sub_1000318B8( (unint64_t *)&unk_100082100,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for CFString);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1000820F8);
  }

  return result;
}

uint64_t sub_10002FE80(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_retain(a2);
  }
  return result;
}

uint64_t sub_10002FE90()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10002FEBC(uint64_t a1)
{
}

uint64_t sub_10002FEC8@<X0>(BOOL *a1@<X8>)
{
  return sub_10002C624( *(void *)(v1 + 16),  *(_xpc_activity_s **)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  a1);
}

uint64_t sub_10002FEE4()
{
  return sub_10002BFC8(v0);
}

uint64_t sub_10002FEEC(unsigned __int8 a1)
{
  return sub_10002C04C(a1, v1);
}

uint64_t sub_10002FEF4()
{
  return sub_10002C0F8(v0);
}

uint64_t sub_10002FEFC(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

void *sub_10002FF24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InProcessIRKGenerator(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v7 = (char *)&v19[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for LockStateManager(0LL);
  v19[3] = v8;
  v19[4] = &off_100078628;
  v19[0] = a2;
  uint64_t v9 = type metadata accessor for SystemKeychainPairingManager();
  uint64_t v10 = (void *)swift_allocObject(v9, 112LL, 7LL);
  uint64_t v11 = sub_10002FEFC((uint64_t)v19, v8);
  __chkstk_darwin(v11, v11);
  uint64_t v13 = (void *)((char *)&v19[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  uint64_t v15 = *v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v16 = sub_100030064((uint64_t)v7, v15, v10);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  sub_10000FF38(v19);
  return v16;
}

void *sub_100030064(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = a3 + 3;
  uint64_t v7 = type metadata accessor for InProcessIRKGenerator(0LL);
  a3[6] = v7;
  a3[7] = &protocol witness table for InProcessIRKGenerator;
  uint64_t v8 = sub_100031830(v6);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v8, a1, v7);
  a3[11] = type metadata accessor for LockStateManager(0LL);
  a3[12] = &off_100078628;
  a3[8] = a2;
  a3[2] = &_swiftEmptyArrayStorage;
  a3[13] = 0LL;
  return a3;
}

void *sub_1000300FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v14 = OS_os_log.init(subsystem:category:)( 0xD00000000000001ALL,  0x8000000100066830LL,  0x617461646174656DLL,  0xE800000000000000LL);
  a7[12] = 0LL;
  a7[3] = 0LL;
  a7[4] = 0LL;
  a7[2] = v14;
  uint64_t v15 = (uint64_t)a7 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoIncludingSensitiveKeys;
  uint64_t v16 = type metadata accessor for PeerDeviceInfo(0LL);
  sub_10001D930(v15, 1LL, 1LL, v16);
  sub_10001D930( (uint64_t)a7 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoExcludingSensitiveKeys,  1LL,  1LL,  v16);
  *(_DWORD *)((char *)a7 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService_darwinNotificationToken) = -1;
  a7[5] = a1;
  a7[6] = &off_100077FD8;
  a7[7] = a2;
  a7[8] = a3;
  a7[9] = a4;
  a7[10] = a5;
  a7[11] = a6;
  uint64_t v17 = swift_allocObject(&unk_1000777B0, 24LL, 7LL);
  swift_weakInit(v17 + 16, a7);
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v19 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = sub_100030258;
  *(void *)(a1 + 64) = v17;
  sub_10002FBF0(v18, v19);
  return a7;
}

uint64_t sub_100030258()
{
  return sub_100039FA4(v0);
}

uint64_t sub_100030260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v22 = type metadata accessor for LockStateManager(0LL);
  uint64_t v23 = &off_100078628;
  v21[0] = a6;
  uint64_t v12 = type metadata accessor for RSDService();
  uint64_t v13 = swift_allocObject(v12, 192LL, 7LL);
  uint64_t v14 = sub_10002FEFC((uint64_t)v21, v22);
  __chkstk_darwin(v14, v14);
  uint64_t v16 = (void *)((char *)&v21[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  uint64_t v18 = sub_100030360(a1, a2, a3, a4, a5, *v16, v13);
  sub_10000FF38(v21);
  return v18;
}

uint64_t sub_100030360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = type metadata accessor for RemotePairingDeviceService();
  sub_1000318B8( &qword_100082168,  v14,  (uint64_t (*)(uint64_t))type metadata accessor for RemotePairingDeviceService);
  uint64_t v28 = v15;
  *(void *)&__int128 v26 = a1;
  uint64_t v24 = v27;
  sub_1000318B8( &qword_100082178,  v16,  (uint64_t (*)(uint64_t))type metadata accessor for RemotePairingDeviceService);
  uint64_t v25 = v17;
  *(void *)&__int128 v23 = a2;
  uint64_t v21 = type metadata accessor for LockStateManager(0LL);
  uint64_t v22 = &off_100078628;
  *(void *)&__int128 v20 = a6;
  *(void *)(a7 + swift_weakDestroy(v0 + 16) = 50LL;
  *(void *)(a7 + 24) = &_swiftEmptySetSingleton;
  uint64_t v18 = sub_10000E484(0LL, (unint64_t *)&qword_100082180, &OBJC_CLASS___OS_remote_device_ptr);
  *(void *)(a7 + 32) = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for ObjectIdentifier,  v18,  &protocol witness table for ObjectIdentifier);
  *(_BYTE *)(a7 + 176) = 0;
  *(void *)(a7 + 184) = a3;
  sub_100026BF0(&v26, a7 + 88);
  sub_100026BF0(&v23, a7 + 48);
  *(void *)(a7 + 168) = a4;
  *(void *)(a7 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = a5;
  sub_100026BF0(&v20, a7 + 128);
  return a7;
}

uint64_t sub_1000304B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = type metadata accessor for LockStateManager(0LL);
  uint64_t v21 = &off_100078628;
  v19[0] = a5;
  uint64_t v10 = type metadata accessor for NetworkControlChannelService();
  uint64_t v11 = swift_allocObject(v10, 232LL, 7LL);
  uint64_t v12 = sub_10002FEFC((uint64_t)v19, v20);
  __chkstk_darwin(v12, v12);
  uint64_t v14 = (void *)((char *)&v19[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  uint64_t v16 = sub_1000305A8(a1, a2, a3, a4, *v14, v11);
  sub_10000FF38(v19);
  return v16;
}

uint64_t sub_1000305A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v32 = a4;
  uint64_t v33 = a3;
  uint64_t v39 = type metadata accessor for RemotePairingDeviceService();
  sub_1000318B8( &qword_100082168,  v10,  (uint64_t (*)(uint64_t))type metadata accessor for RemotePairingDeviceService);
  uint64_t v40 = v11;
  *(void *)&__int128 v38 = a1;
  uint64_t v36 = type metadata accessor for LockStateManager(0LL);
  uint64_t v37 = &off_100078628;
  *(void *)&__int128 v35 = a5;
  *(_OWORD *)(a6 + swift_weakDestroy(v0 + 16) = xmmword_100062DD0;
  *(void *)(a6 + 32) = 0x8000000100068790LL;
  sub_10000E484(0LL, (unint64_t *)&qword_100082170, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static DispatchQoS.unspecified.getter(v14);
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v17, &type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v34 = &_swiftEmptyArrayStorage;
  sub_10003186C((unint64_t *)&unk_100082130, v20);
  uint64_t v22 = v21;
  uint64_t v23 = sub_10000FD7C(&qword_100081D08);
  sub_100029EA0((unint64_t *)&unk_100082140, &qword_100081D08);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v23, v24, v17, v22);
  uint64_t v25 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  __chkstk_darwin(v25, v26);
  uint64_t v28 = (char *)&v31 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void))(v29 + 104))( v28,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:));
  *(void *)(a6 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000055LL,  0x80000001000687B0LL,  v16,  v19,  v28,  0LL);
  *(void *)(a6 + 48) = &_swiftEmptySetSingleton;
  *(void *)(a6 + 56) = &_swiftEmptyArrayStorage;
  *(void *)(a6 + 64) = &_swiftEmptyArrayStorage;
  *(_WORD *)(a6 + 72) = 0;
  *(_BYTE *)(a6 + 74) = 1;
  *(void *)(a6 + 208) = 0LL;
  *(_BYTE *)(a6 + 2swift_weakDestroy(v0 + 16) = 0;
  *(void *)(a6 + 184) = 0LL;
  *(void *)(a6 + 192) = 0LL;
  *(_DWORD *)(a6 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = 0;
  *(void *)(a6 + 224) = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  sub_100026BF0(&v38, a6 + 144);
  *(void *)(a6 + 136) = a2;
  *(void *)(a6 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = v32;
  sub_100026BF0(&v35, a6 + 88);
  *(void *)(a6 + 128) = v33;
  return a6;
}

uint64_t sub_100030860(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  v32[3] = type metadata accessor for LockStateManager(0LL);
  v32[4] = &off_100078628;
  v32[0] = a2;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = type metadata accessor for Tunnel(0LL);
  sub_10003186C((unint64_t *)&qword_100082220, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  *(void *)(a4 + 24) = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, v8, v9, v10);
  *(void *)(a4 + 32) = a1;
  *(_BYTE *)(a4 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = a3;
  sub_10002697C((uint64_t)v32, a4 + 40);
  type metadata accessor for RemotePairingDeviceXPCServer();
  id v11 = a1;
  uint64_t v12 = static MachServiceNames.tunnelManagementService.getter();
  uint64_t v14 = v13;
  id v15 = v11;
  uint64_t v16 = sub_1000270B4(v12, v14, v15);
  *(void *)(a4 + swift_weakDestroy(v0 + 16) = v16;
  uint64_t v17 = *(void *)(v16 + 16);
  uint64_t v18 = type metadata accessor for RemotePairingErrorCodingWrapper(0LL);
  uint64_t v31 = type metadata accessor for RemoteUnlockDeviceKeyForTunnelRequest(0LL);
  uint64_t v19 = type metadata accessor for RemoteUnlockDeviceKeyForTunnelResponse(0LL);
  sub_1000318B8( &qword_100082228,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for RemoteUnlockDeviceKeyForTunnelRequest);
  uint64_t v21 = v20;
  sub_1000318B8( &qword_100082230,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for RemoteUnlockDeviceKeyForTunnelRequest);
  uint64_t v23 = v22;
  sub_1000318B8( &qword_100082238,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for RemoteUnlockDeviceKeyForTunnelResponse);
  uint64_t v25 = v24;
  sub_1000318B8( (unint64_t *)&unk_100082240,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for RemoteUnlockDeviceKeyForTunnelResponse);
  uint64_t v27 = v26;
  sub_1000318B8( &qword_100081A50,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingErrorCodingWrapper);
  uint64_t v29 = v28;
  swift_retain(v17);
  swift_retain(a4);
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)( v18,  sub_1000318A0,  a4,  v31,  v19,  v18,  v21,  v23,  v25,  v27,  v29);

  swift_release(v17);
  swift_release(a4);
  sub_10000FF38(v32);
  return a4;
}

uint64_t sub_100030AAC(void *a1, uint64_t a2, char a3)
{
  uint64_t v16 = type metadata accessor for LockStateManager(0LL);
  uint64_t v17 = &off_100078628;
  v15[0] = a2;
  uint64_t v6 = type metadata accessor for DeviceTunnelManager();
  uint64_t v7 = swift_allocObject(v6, 81LL, 7LL);
  uint64_t v8 = sub_10002FEFC((uint64_t)v15, v16);
  __chkstk_darwin(v8, v8);
  uint64_t v10 = (void *)((char *)&v15[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v11 + 16))(v10);
  uint64_t v12 = sub_100030860(a1, *v10, a3, v7);
  sub_10000FF38(v15);
  return v12;
}

void *sub_100030B8C(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  v32[3] = type metadata accessor for SystemKeychainPairingManager();
  sub_1000318B8( &qword_100080F98,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for SystemKeychainPairingManager);
  v32[4] = v8;
  uint64_t v31 = a1;
  v32[0] = a2;
  a4[5] = a1;
  uint64_t v30 = a3;
  if (a3)
  {
    id v9 = a1;
    uint64_t v10 = a3;
  }

  else
  {
    type metadata accessor for RemotePairingDeviceXPCServer();
    id v11 = a1;
    uint64_t v12 = static MachServiceNames.deviceInitiatedPairingService.getter();
    uint64_t v10 = sub_1000270B4(v12, v13, v11);
  }

  a4[6] = v10;
  sub_10002697C((uint64_t)v32, (uint64_t)(a4 + 7));
  a4[3] = 0LL;
  a4[4] = 0LL;
  a4[2] = 0LL;
  uint64_t v14 = *(void *)(a4[6] + 16LL);
  uint64_t v15 = type metadata accessor for RemotePairingErrorCodingWrapper(0LL);
  uint64_t v16 = swift_allocObject(&unk_1000777D8, 24LL, 7LL);
  swift_weakInit(v16 + 16, a4);
  uint64_t v29 = type metadata accessor for BrowseForPairableHostRequest(0LL);
  uint64_t v28 = type metadata accessor for EmptyResponse(0LL);
  sub_1000318B8( &qword_100082150,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for BrowseForPairableHostRequest);
  uint64_t v18 = v17;
  sub_1000318B8( (unint64_t *)&unk_100082158,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for BrowseForPairableHostRequest);
  uint64_t v20 = v19;
  sub_1000318B8(&qword_100081A40, 255LL, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyResponse);
  uint64_t v22 = v21;
  sub_1000318B8(&qword_100081A48, 255LL, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyResponse);
  uint64_t v24 = v23;
  sub_1000318B8( &qword_100081A50,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingErrorCodingWrapper);
  uint64_t v26 = v25;
  swift_retain(v30);
  swift_retain(v14);
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)( v15,  sub_100030DE8,  v16,  v29,  v28,  v15,  v18,  v20,  v22,  v24,  v26);

  swift_release(v30);
  swift_release(v14);
  swift_release(v16);
  sub_10000FF38(v32);
  return a4;
}

void sub_100030DE8()
{
}

uint64_t sub_100030DF0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v16 = type metadata accessor for LockStateManager(0LL);
  uint64_t v17 = &off_100078628;
  v15[0] = a3;
  uint64_t v6 = type metadata accessor for PairingManagementService();
  uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
  uint64_t v8 = sub_10002FEFC((uint64_t)v15, v16);
  __chkstk_darwin(v8, v8);
  uint64_t v10 = (void *)((char *)&v15[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v11 + 16))(v10);
  uint64_t v12 = sub_100030ED0(a1, a2, *v10, v7);
  sub_10000FF38(v15);
  return v12;
}

uint64_t sub_100030ED0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v102[3] = type metadata accessor for LockStateManager(0LL);
  v102[4] = &off_100078628;
  v102[0] = a3;
  uint64_t v8 = type metadata accessor for SystemXPCPeerConnection(0LL);
  sub_1000318B8( &qword_1000819F8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
  *(void *)(a4 + 32) = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  v8,  &type metadata for WirelessPairingOptions,  v9);
  *(_BYTE *)(a4 + 96) = 0;
  sub_10000E484(0LL, (unint64_t *)&qword_100082170, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v14 = (char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static DispatchQoS.unspecified.getter(v12);
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v15, &type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v17 = (char *)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v101 = &_swiftEmptyArrayStorage;
  sub_10003186C((unint64_t *)&unk_100082130, v18);
  uint64_t v20 = v19;
  uint64_t v21 = sub_10000FD7C(&qword_100081D08);
  sub_100029EA0((unint64_t *)&unk_100082140, &qword_100081D08);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v101, v21, v22, v15, v20);
  uint64_t v23 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  __chkstk_darwin(v23, v24);
  uint64_t v26 = (char *)&v95 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void))(v27 + 104))( v26,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:));
  *(void *)(a4 + 104) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000051LL,  0x8000000100068890LL,  v14,  v17,  v26,  0LL);
  *(void *)(a4 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = a2;
  uint64_t v97 = a1;
  *(void *)(a4 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(a4 + 24) = &off_100077620;
  type metadata accessor for RemotePairingDeviceXPCServer();
  id v28 = a2;
  uint64_t v29 = swift_retain(a1);
  uint64_t v30 = static MachServiceNames.pairingManagementService.getter(v29);
  uint64_t v32 = v31;
  id v96 = v28;
  *(void *)(a4 + 48) = sub_1000270B4(v30, v32, v96);
  sub_10002697C((uint64_t)v102, a4 + 56);
  uint64_t v33 = *(void *)(a4 + 16);
  swift_unknownObjectRetain(v33);
  swift_retain(a4);
  sub_10002C150((uint64_t)sub_100031798, a4);
  swift_unknownObjectRelease(v33);
  swift_release(a4);
  uint64_t v34 = *(void *)(*(void *)(a4 + 48) + 16LL);
  uint64_t v35 = type metadata accessor for RemotePairingErrorCodingWrapper(0LL);
  uint64_t v36 = type metadata accessor for DeletePairedHostRecordRequest(0LL);
  uint64_t v37 = type metadata accessor for EmptyResponse(0LL);
  uint64_t v98 = v37;
  sub_1000318B8( &qword_100082190,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DeletePairedHostRecordRequest);
  uint64_t v39 = v38;
  sub_1000318B8( &qword_100082198,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DeletePairedHostRecordRequest);
  uint64_t v41 = v40;
  sub_1000318B8(&qword_100081A40, 255LL, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyResponse);
  uint64_t v43 = v42;
  uint64_t v100 = v42;
  sub_1000318B8(&qword_100081A48, 255LL, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyResponse);
  uint64_t v45 = v44;
  uint64_t v99 = v44;
  sub_1000318B8( &qword_100081A50,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingErrorCodingWrapper);
  uint64_t v47 = v46;
  swift_retain(a4);
  swift_retain(v34);
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)( v35,  sub_1000317A0,  a4,  v36,  v37,  v35,  v39,  v41,  v43,  v45,  v47);
  swift_release(v34);
  swift_release(a4);
  uint64_t v48 = *(void *)(*(void *)(a4 + 48) + 16LL);
  uint64_t v49 = type metadata accessor for ListPairedHostRecordRequest(0LL);
  uint64_t v50 = type metadata accessor for ListPairedHostRecordResponse(0LL);
  sub_1000318B8( &qword_1000821A0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for ListPairedHostRecordRequest);
  uint64_t v52 = v51;
  sub_1000318B8( &qword_1000821A8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for ListPairedHostRecordRequest);
  uint64_t v54 = v53;
  sub_1000318B8( &qword_1000821B0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for ListPairedHostRecordResponse);
  uint64_t v56 = v55;
  sub_1000318B8( &qword_1000821B8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for ListPairedHostRecordResponse);
  uint64_t v58 = v57;
  swift_retain(a4);
  swift_retain(v48);
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)( v35,  sub_1000317B8,  a4,  v49,  v50,  v35,  v52,  v54,  v56,  v58,  v47);
  swift_release(v48);
  swift_release(a4);
  uint64_t v59 = *(void *)(*(void *)(a4 + 48) + 16LL);
  uint64_t WirelessPairingSessionRequest = type metadata accessor for CreateWirelessPairingSessionRequest(0LL);
  sub_1000318B8( &qword_1000821C0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for CreateWirelessPairingSessionRequest);
  uint64_t v62 = v61;
  sub_1000318B8( &qword_1000821C8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for CreateWirelessPairingSessionRequest);
  uint64_t v64 = v63;
  swift_retain(a4);
  swift_retain(v59);
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)( v35,  sub_1000317D0,  a4,  WirelessPairingSessionRequest,  v98,  v35,  v62,  v64,  v100,  v99,  v47);
  swift_release(v59);
  swift_release(a4);
  uint64_t v65 = *(void *)(*(void *)(a4 + 48) + 16LL);
  uint64_t NetworkPairingSessionIDRequest = type metadata accessor for FetchNetworkPairingSessionIDRequest(0LL);
  uint64_t NetworkPairingSessionIDResponse = type metadata accessor for FetchNetworkPairingSessionIDResponse(0LL);
  sub_1000318B8( &qword_1000821D0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for FetchNetworkPairingSessionIDRequest);
  uint64_t v69 = v68;
  sub_1000318B8( &qword_1000821D8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for FetchNetworkPairingSessionIDRequest);
  uint64_t v71 = v70;
  sub_1000318B8( &qword_1000821E0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for FetchNetworkPairingSessionIDResponse);
  uint64_t v73 = v72;
  sub_1000318B8( &qword_1000821E8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for FetchNetworkPairingSessionIDResponse);
  uint64_t v75 = v74;
  swift_retain(a4);
  swift_retain(v65);
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)( v35,  sub_1000317E8,  a4,  NetworkPairingSessionIDRequest,  NetworkPairingSessionIDResponse,  v35,  v69,  v71,  v73,  v75,  v47);
  swift_release(v65);
  swift_release(a4);
  uint64_t v76 = *(void *)(*(void *)(a4 + 48) + 16LL);
  uint64_t USBConnectedHostTrustStateRequest = type metadata accessor for QueryUSBConnectedHostTrustStateRequest(0LL);
  type metadata accessor for RPUSBConnectedHostTrustState(0LL);
  uint64_t v79 = v78;
  sub_1000318B8( &qword_1000821F0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for QueryUSBConnectedHostTrustStateRequest);
  uint64_t v81 = v80;
  sub_1000318B8( &qword_1000821F8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for QueryUSBConnectedHostTrustStateRequest);
  uint64_t v83 = v82;
  sub_1000318B8( &qword_100082200,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for RPUSBConnectedHostTrustState);
  uint64_t v85 = v84;
  sub_1000318B8( &qword_100082208,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for RPUSBConnectedHostTrustState);
  uint64_t v87 = v86;
  swift_retain(a4);
  swift_retain(v76);
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)( v35,  sub_100031800,  a4,  USBConnectedHostTrustStateRequest,  v79,  v35,  v81,  v83,  v85,  v87,  v47);
  swift_release(v76);
  swift_release(a4);
  uint64_t v88 = *(void *)(*(void *)(a4 + 48) + 16LL);
  uint64_t v89 = type metadata accessor for AllowPromptlessPairingWithHostRequest(0LL);
  sub_1000318B8( &qword_100082210,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for AllowPromptlessPairingWithHostRequest);
  uint64_t v91 = v90;
  sub_1000318B8( &qword_100082218,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for AllowPromptlessPairingWithHostRequest);
  uint64_t v93 = v92;
  swift_retain(a4);
  swift_retain(v88);
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)( v35,  sub_100031818,  a4,  v89,  v98,  v35,  v91,  v93,  v100,  v99,  v47);
  swift_release(v97);

  swift_release(v88);
  swift_release(a4);
  sub_10000FF38(v102);
  return a4;
}

uint64_t sub_100031798(uint64_t a1)
{
  return sub_100010028(a1);
}

void sub_1000317A0()
{
}

#error "1000317C4: call analysis failed (funcsize=6)"
uint64_t sub_1000317D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  return sub_100010460(a1, a2, v2);
}

#error "1000317F4: call analysis failed (funcsize=6)"
void sub_100031800()
{
  sub_100010684();
}

void sub_100031818()
{
}

void *sub_100031830(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

void sub_10003186C(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  if (!*a1)
  {
    uint64_t v3 = a2(255LL);
    atomic_store(sub_100026E8C(v3), a1);
  }

  sub_100016C1C();
}

void sub_1000318A0(unint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
}

void sub_1000318B8(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  if (!*a1)
  {
    uint64_t v4 = a3(a2);
    atomic_store(sub_100026E8C(v4), a1);
  }

  sub_100016C1C();
}

  ;
}

uint64_t sub_10003192C(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_100031934()
{
  return swift_retain(*(void *)(v0 + 120));
}

uint64_t sub_100031954(uint64_t a1)
{
  return dispatch thunk of SetAlgebra.init<A>(_:)(v4 - 136, v3, a1, v1, v2);
}

uint64_t sub_100031974(uint64_t a1)
{
  return dispatch thunk of SetAlgebra.init<A>(_:)(v4 - 88, v1, a1, v2, v3);
}

uint64_t sub_100031994( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, &a10, v11, v10);
}

void sub_1000319B0(uint64_t a1, ...)
{
}

uint64_t sub_1000319C0(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v3, v2);
}

uint64_t sub_1000319CC()
{
  return static DispatchQoS.userInitiated.getter();
}

  ;
}

uint64_t sub_1000319F8()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v1, v2, v0);
}

uint64_t sub_100031A10(uint64_t a1)
{
  *(void *)(v1 - 72) = a1;
  return v1 - 72;
}

uint64_t sub_100031A24(uint64_t a1, uint64_t a2)
{
  return OS_dispatch_queue.childQueue(label:qos:attributes:autoreleaseFrequency:)( a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL,  a2,  v2,  v3,  v4);
}

  ;
}

uint64_t sub_100031A58()
{
  return sub_10000FD7C(v0);
}

uint64_t sub_100031A60@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_100031A6C(float a1)
{
  *uint64_t v2 = a1;
  return swift_bridgeObjectRetain(v1);
}

void sub_100031A80(uint64_t a1)
{
}

void sub_100031A88(unint64_t *a1)
{
}

void sub_100031A90(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100031A98()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_100031AA4()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

uint64_t sub_100031AB0()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100031AB8(uint64_t a1)
{
  return Set.Iterator.init(_cocoa:)(v1, v2, a1);
}

uint64_t sub_100031ACC()
{
  return AnyHashable.init<A>(_:)(v2 - 280, v0, v1);
}

char *sub_100031AE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (char *)&a9 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

void *sub_100031AFC@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  a4 = a1;
  a5 = v5;
  return _Block_copy(&a2);
}

  ;
}

uint64_t sub_100031B24(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

  ;
}

  ;
}

BOOL sub_100031B5C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100031B6C()
{
  return v0;
}

uint64_t sub_100031B78@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_100031B88()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_100031B98()
{
  return swift_retain(*(void *)(v0 + 120));
}

uint64_t sub_100031BA8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_100031BB8(uint64_t a1)
{
  return sub_10001D9C8(a1, 1LL, v1);
}

  ;
}

uint64_t sub_100031BE4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

  ;
}

uint64_t sub_100031C04()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void sub_100031C14()
{
}

uint64_t sub_100031C1C()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
}

uint64_t sub_100031C24()
{
  return type metadata accessor for OS_dispatch_queue.Attributes(0LL);
}

  ;
}

uint64_t sub_100031C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 72, v5, v4, a4);
}

  ;
}

uint64_t sub_100031C5C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10000FD7C(a3);
}

  ;
}

uint64_t sub_100031C7C()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 128) + 8LL))(v0, *(void *)(v1 - 120));
}

void sub_100031C8C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100031C94()
{
  return swift_arrayDestroy(v0, 1LL);
}

void sub_100031CA0()
{
}

uint64_t sub_100031CA8(uint64_t a1, uint64_t a2)
{
  return sub_10001D930(a1, a2, 1LL, v2);
}

uint64_t sub_100031CB4(uint64_t a1, uint64_t a2)
{
  return sub_100044238(a1, a2, 1LL, v2);
}

uint64_t sub_100031CC0(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

void sub_100031CCC(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t sub_100031CD8(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 3LL);
}

  ;
}

uint64_t sub_100031CF4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_100031CFC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_100031D08()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100031D10()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_100031D1C()
{
  return swift_unknownObjectRetain(v0);
}

id sub_100031D28@<X0>(void *a1@<X8>)
{
  *(void *)(v1 - 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = a1;
  return a1;
}

void sub_100031D34(uint64_t a1)
{
}

  ;
}

uint64_t sub_100031D48()
{
  return sub_10002FBF0(v0, v1);
}

uint64_t sub_100031D54(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

void sub_100031D5C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100031D68(uint64_t a1, char a2)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(v2 + 24) = 0LL;
  *(void *)(v2 + 32) = a1;
  *(_BYTE *)(v2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = a2;
  return v2;
}

void sub_100031D7C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(nw_listener **)(v3 + 32);
  if (*(_BYTE *)(v3 + 40) == 1)
  {
    uint64_t v7 = sub_100016BCC((uint64_t)&unk_100077980, 32LL);
    *(void *)(v7 + swift_weakDestroy(v0 + 16) = a2;
    *(void *)(v7 + 24) = a3;
    sub_100031AFC((uint64_t)sub_100031E90, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v9, v10);
    sub_100032428();
    swift_release();
    nw_listener_set_new_connection_group_handler(v6, a2);
  }

  else
  {
    uint64_t v8 = sub_100016BCC((uint64_t)&unk_100077930, 32LL);
    *(void *)(v8 + swift_weakDestroy(v0 + 16) = a2;
    *(void *)(v8 + 24) = a3;
    sub_100031AFC((uint64_t)sub_100040730, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v9, v10);
    sub_100032428();
    swift_release();
    nw_listener_set_new_connection_handler(v6, a2);
  }

  _Block_release(a2);
}

uint64_t sub_100031E90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  uint64_t v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

void sub_100031ED8(dispatch_queue_s *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(nw_listener **)(v4 + 32);
  uint64_t v9 = sub_100016BCC((uint64_t)&unk_1000778B8, 24LL);
  swift_unknownObjectWeakInit(v9 + 16, v8);
  uint64_t v10 = (void *)sub_100016BCC((uint64_t)&unk_1000778E0, 48LL);
  v10[2] = v9;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = v4;
  uint64_t v11 = sub_100031AFC((uint64_t)sub_100032268, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v12, v13);
  swift_retain(a3);
  swift_retain(v4);
  swift_release();
  nw_listener_set_state_changed_handler(v8, v11);
  _Block_release(v11);
  nw_listener_set_queue(v8, a1);
  nw_listener_start(v8);
}

nw_listener *sub_100031FD4( int a1, nw_listener *a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v10 = a3 + 16;
  swift_beginAccess(a3 + 16, v37, 0LL, 0LL);
  uint64_t result = (nw_listener *)swift_unknownObjectWeakLoadStrong(v10);
  if (result)
  {
    uint64_t v12 = result;
    switch(a1)
    {
      case 4:
        uint64_t v20 = static os_log_type_t.default.getter(result);
        uint64_t v21 = qword_1000845F0;
        uint64_t v22 = sub_10000FD7C(&qword_100081580);
        uint64_t v23 = swift_allocObject(v22, 72LL, 7LL);
        *(_OWORD *)(v23 + swift_weakDestroy(v0 + 16) = xmmword_100062930;
        uint64_t v36 = v12;
        swift_unknownObjectRetain(v12);
        uint64_t v24 = sub_10000FD7C((uint64_t *)&unk_100082310);
        uint64_t v25 = String.init<A>(describing:)(&v36, v24);
        uint64_t v27 = v26;
        *(void *)(v23 + 56) = &type metadata for String;
        *(void *)(v23 + 64) = sub_10001D978();
        *(void *)(v23 + 32) = v25;
        *(void *)(v23 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = v27;
        os_log(_:dso:log:_:_:)( v20,  &_mh_execute_header,  v21,  "Server listener cancelled: %{public}s",  37LL,  2LL,  v23,  v36);
        swift_bridgeObjectRelease(v23);
        uint64_t v19 = 1LL;
        break;
      case 3:
        uint64_t v28 = static os_log_type_t.error.getter(result);
        uint64_t v29 = qword_1000845F0;
        uint64_t v30 = sub_10000FD7C(&qword_100081580);
        uint64_t v31 = swift_allocObject(v30, 72LL, 7LL);
        *(_OWORD *)(v31 + swift_weakDestroy(v0 + 16) = xmmword_100062930;
        uint64_t v36 = a2;
        swift_unknownObjectRetain(a2);
        uint64_t v32 = sub_10000FD7C((uint64_t *)&unk_100082320);
        uint64_t v33 = String.init<A>(describing:)(&v36, v32);
        uint64_t v35 = v34;
        *(void *)(v31 + 56) = &type metadata for String;
        *(void *)(v31 + 64) = sub_10001D978();
        *(void *)(v31 + 32) = v33;
        *(void *)(v31 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = v35;
        os_log(_:dso:log:_:_:)( v28,  &_mh_execute_header,  v29,  "Server listener failed with %{public}s",  38LL,  2LL,  v31,  v36);
        swift_bridgeObjectRelease(v31);
        nw_listener_cancel(*(nw_listener_t *)(a6 + 32));
        return (nw_listener *)swift_unknownObjectRelease(v12);
      case 2:
        uint64_t port = nw_listener_get_port(result);
        __int16 v14 = port;
        uint64_t v15 = static os_log_type_t.default.getter(port);
        uint64_t v16 = qword_1000845F0;
        uint64_t v17 = sub_10000FD7C(&qword_100081580);
        uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
        *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = xmmword_100062930;
        *(void *)(v18 + 56) = &type metadata for UInt16;
        *(void *)(v18 + 64) = &protocol witness table for UInt16;
        *(_WORD *)(v18 + 32) = v14;
        os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Server ready on port %d", (_DWORD)v36);
        swift_bridgeObjectRelease(v18);
        uint64_t v19 = 0LL;
        break;
      default:
        return (nw_listener *)swift_unknownObjectRelease(v12);
    }

    a4(v19);
    return (nw_listener *)swift_unknownObjectRelease(v12);
  }

  return result;
}

uint64_t sub_100032268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  swift_unknownObjectRetain(a3);
  v6(a2, a3);
  swift_release(v5);
  return swift_unknownObjectRelease(a3);
}

void *sub_1000322C0()
{
  return v0;
}

uint64_t sub_1000322EC()
{
  return swift_deallocClassInstance(v0, 41LL, 7LL);
}

uint64_t type metadata accessor for NWObjcListener()
{
  return objc_opt_self(&OBJC_CLASS____TtC20remotepairingdeviced14NWObjcListener);
}

uint64_t sub_10003232C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100032350()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

nw_listener *sub_100032384(int a1, nw_listener *a2)
{
  return sub_100031FD4( a1,  a2,  *(void *)(v2 + 16),  *(void (**)(uint64_t))(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40));
}

uint64_t sub_100032390(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000323A0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000323A8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(v1 + 16))(a1, 0LL);
}

uint64_t sub_1000323CC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000323F0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(a1, 1LL);
}

uint64_t sub_100032428()
{
  return swift_retain(v0);
}

nw_path_t sub_100032438()
{
  nw_path_t result = nw_connection_copy_current_path(*(nw_connection_t *)(v0 + 32));
  if (result)
  {
    nw_path_t v2 = result;
    uint64_t v3 = nw_path_copy_interface();
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = swift_unknownObjectRetain(v3);
      int subtype = nw_interface_get_subtype(v5);
      swift_unknownObjectRelease_n(v4, 2LL);
      swift_unknownObjectRelease(v2);
      return (nw_path_t)(subtype == 1002);
    }

    else
    {
      swift_unknownObjectRelease(v2);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000324AC()
{
  uint64_t v0 = type metadata accessor for AtomicCounter(0LL);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t result = AtomicCounter.init()();
  qword_100082330 = result;
  return result;
}

double sub_1000324E8@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0LL;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
  return result;
}

uint64_t sub_1000324F8()
{
  return 0LL;
}

uint64_t sub_100032500(uint64_t a1)
{
  uint64_t v2 = v1;
  *(_WORD *)(v1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005DLL,  0x8000000100067B00LL,  "remotepairingdeviced/DiscoveredPairableHost.swift",  49LL,  2LL,  164LL, 0) = 512;
  *(void *)(v1 + 32) = a1;
  uint64_t v4 = qword_100080988;
  uint64_t v5 = swift_unknownObjectRetain(a1);
  if (v4 != -1) {
    uint64_t v5 = swift_once(&qword_100080988, sub_1000324AC);
  }
  dispatch thunk of AtomicCounter.next()(v5);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  object = v6._object;
  String.append(_:)(v6);
  swift_unknownObjectRelease(a1);
  swift_bridgeObjectRelease(object);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = 762340212LL;
  *(void *)(v2 + 24) = 0xE400000000000000LL;
  return v2;
}

void sub_1000325C8(dispatch_queue_s *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(nw_connection **)(v4 + 32);
  uint64_t v9 = swift_allocObject(&unk_1000779D0, 24LL, 7LL);
  swift_weakInit(v9 + 16, v4);
  uint64_t v10 = (void *)swift_allocObject(&unk_1000779F8, 40LL, 7LL);
  v10[2] = v9;
  v10[3] = a2;
  v10[4] = a3;
  v12[4] = sub_100033508;
  v12[5] = v10;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256LL;
  v12[2] = sub_100040774;
  v12[3] = &unk_100077A10;
  uint64_t v11 = _Block_copy(v12);
  swift_retain(a3);
  swift_release();
  nw_connection_set_state_changed_handler(v8, v11);
  _Block_release(v11);
  nw_connection_set_queue(v8, a1);
  nw_connection_start(v8);
}

uint64_t sub_1000326CC(int a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v10 = type metadata accessor for RemotePairingError(0LL);
  __chkstk_darwin(v10, v11);
  uint64_t v118 = (char *)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for ControlChannelTransportEvent(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (uint64_t *)((char *)&v114 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  a3 += 16LL;
  swift_beginAccess(a3, v123, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a3);
  if (result)
  {
    uint64_t v19 = result;
    uint64_t v119 = a2;
    os_log_type_t v20 = static os_log_type_t.default.getter(result);
    uint64_t v21 = (os_log_s *)qword_1000845F0;
    os_log_type_t v22 = v20;
    BOOL v23 = os_log_type_enabled((os_log_t)qword_1000845F0, v20);
    uint64_t v120 = v17;
    if (v23)
    {
      swift_retain(v19);
      uint64_t v24 = swift_slowAlloc(22LL, -1LL);
      uint64_t v117 = v14;
      uint64_t v25 = v24;
      uint64_t v26 = swift_slowAlloc(64LL, -1LL);
      uint64_t v122 = v26;
      *(_DWORD *)uint64_t v25 = 136446466;
      unint64_t v114 = a4;
      uint64_t v115 = v10;
      uint64_t v27 = a5;
      uint64_t v116 = v13;
      uint64_t v29 = *(void *)(v19 + 16);
      uint64_t v28 = *(void *)(v19 + 24);
      swift_bridgeObjectRetain(v28);
      sub_100045370(v29, v28, &v122);
      uint64_t v121 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v25 + 4, v25 + 12);
      swift_release();
      swift_bridgeObjectRelease(v28);
      *(_WORD *)(v25 + 12) = 2082;
      LODWORD(v121) = a1;
      type metadata accessor for nw_connection_state_t(0LL);
      uint64_t v32 = String.init<A>(describing:)(&v121, v31);
      uint64_t v34 = v33;
      sub_100045370(v32, v33, &v122);
      uint64_t v121 = v35;
      a5 = v27;
      uint64_t v10 = v115;
      uint64_t v13 = v116;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v25 + 14, v25 + 22);
      uint64_t v36 = v34;
      a4 = v114;
      swift_bridgeObjectRelease(v36);
      _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "%{public}s: Connection state changed to %{public}s",  (uint8_t *)v25,  0x16u);
      swift_arrayDestroy(v26, 2LL);
      uint64_t v37 = v26;
      uint64_t v17 = v120;
      swift_slowDealloc(v37, -1LL, -1LL);
      uint64_t v38 = v25;
      uint64_t v14 = v117;
      swift_slowDealloc(v38, -1LL, -1LL);
    }

    if (a1 == 1)
    {
      if (v119)
      {
        swift_getObjectType(v119);
        sub_10003F2B0();
        uint64_t v64 = v63;
      }

      else
      {
        uint64_t v70 = v14;
        uint64_t v71 = sub_10003352C( (unint64_t *)&unk_1000813E0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
        uint64_t v72 = v118;
        static Error<>.networkingError.getter(v10, v71);
        uint64_t v73 = sub_10003352C( (unint64_t *)&unk_1000819E0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
        uint64_t v64 = swift_allocError(v10, v73, 0LL, 0LL);
        uint64_t v74 = v71;
        uint64_t v14 = v70;
        uint64_t v63 = Error<>.init(_:_:)(v72, 0xD00000000000002BLL, 0x8000000100068BC0LL, v10, v74);
      }

      os_log_type_t v75 = static os_log_type_t.error.getter(v63);
      uint64_t v76 = (os_log_s *)qword_1000845F0;
      os_log_type_t v77 = v75;
      if (os_log_type_enabled((os_log_t)qword_1000845F0, v75))
      {
        swift_retain(v19);
        swift_errorRetain(v64);
        swift_retain(v19);
        swift_errorRetain(v64);
        uint64_t v78 = swift_slowAlloc(22LL, -1LL);
        uint64_t v119 = a5;
        uint64_t v79 = v78;
        uint64_t v80 = swift_slowAlloc(64LL, -1LL);
        uint64_t v122 = v80;
        *(_DWORD *)uint64_t v79 = 136446466;
        uint64_t v116 = v13;
        uint64_t v117 = v14;
        uint64_t v81 = v19;
        uint64_t v82 = *(void *)(v19 + 16);
        uint64_t v83 = *(void *)(v19 + 24);
        swift_bridgeObjectRetain(v83);
        sub_100045370(v82, v83, &v122);
        uint64_t v121 = v84;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v79 + 4, v79 + 12);
        swift_release_n(v81, 2LL);
        swift_bridgeObjectRelease(v83);
        *(_WORD *)(v79 + 12) = 2082;
        uint64_t v121 = v64;
        swift_errorRetain(v64);
        uint64_t v85 = sub_10000FD7C(&qword_100081A10);
        uint64_t v86 = String.init<A>(describing:)(&v121, v85);
        uint64_t v88 = v87;
        sub_100045370(v86, v87, &v122);
        uint64_t v121 = v89;
        uint64_t v19 = v81;
        uint64_t v14 = v117;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v79 + 14, v79 + 22);
        uint64_t v90 = v88;
        uint64_t v13 = v116;
        swift_bridgeObjectRelease(v90);
        swift_errorRelease(v64);
        swift_errorRelease(v64);
        _os_log_impl( (void *)&_mh_execute_header,  v76,  v77,  "%{public}s: Connection failed with error %{public}s",  (uint8_t *)v79,  0x16u);
        swift_arrayDestroy(v80, 2LL);
        swift_slowDealloc(v80, -1LL, -1LL);
        swift_slowDealloc(v79, -1LL, -1LL);
      }

      uint64_t v91 = v120;
      *uint64_t v120 = v64;
      (*(void (**)(uint64_t *, void, uint64_t))(v14 + 104))( v91,  enum case for ControlChannelTransportEvent.error(_:),  v13);
      swift_errorRetain(v64);
      a4(v91);
      (*(void (**)(uint64_t *, uint64_t))(v14 + 8))(v91, v13);
      nw_connection_cancel(*(nw_connection_t *)(v19 + 32));
      swift_release();
      return swift_errorRelease(v64);
    }

    else if (a1 == 4)
    {
      if (v119)
      {
        swift_getObjectType(v119);
        sub_10003F2B0();
        uint64_t v66 = v65;
      }

      else
      {
        uint64_t v92 = v14;
        uint64_t v93 = sub_10003352C( (unint64_t *)&unk_1000813E0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
        uint64_t v94 = v118;
        static Error<>.networkingError.getter(v10, v93);
        uint64_t v95 = sub_10003352C( (unint64_t *)&unk_1000819E0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
        uint64_t v66 = swift_allocError(v10, v95, 0LL, 0LL);
        uint64_t v96 = v93;
        uint64_t v14 = v92;
        uint64_t v65 = Error<>.init(_:_:)(v94, 0xD00000000000002BLL, 0x8000000100068BC0LL, v10, v96);
      }

      os_log_type_t v97 = static os_log_type_t.error.getter(v65);
      uint64_t v98 = (os_log_s *)qword_1000845F0;
      os_log_type_t v99 = v97;
      if (os_log_type_enabled((os_log_t)qword_1000845F0, v97))
      {
        swift_retain(v19);
        swift_errorRetain(v66);
        swift_retain(v19);
        swift_errorRetain(v66);
        uint64_t v100 = swift_slowAlloc(22LL, -1LL);
        uint64_t v119 = a5;
        uint64_t v101 = v100;
        uint64_t v102 = swift_slowAlloc(64LL, -1LL);
        uint64_t v122 = v102;
        *(_DWORD *)uint64_t v101 = 136446466;
        uint64_t v116 = v13;
        uint64_t v117 = v14;
        uint64_t v103 = v19;
        uint64_t v104 = *(void *)(v19 + 16);
        uint64_t v105 = *(void *)(v19 + 24);
        swift_bridgeObjectRetain(v105);
        sub_100045370(v104, v105, &v122);
        uint64_t v121 = v106;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v101 + 4, v101 + 12);
        swift_release_n(v103, 2LL);
        swift_bridgeObjectRelease(v105);
        *(_WORD *)(v101 + 12) = 2082;
        uint64_t v121 = v66;
        swift_errorRetain(v66);
        uint64_t v107 = sub_10000FD7C(&qword_100081A10);
        uint64_t v108 = String.init<A>(describing:)(&v121, v107);
        uint64_t v110 = v109;
        sub_100045370(v108, v109, &v122);
        uint64_t v121 = v111;
        uint64_t v14 = v117;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v101 + 14, v101 + 22);
        uint64_t v112 = v110;
        uint64_t v13 = v116;
        swift_bridgeObjectRelease(v112);
        swift_errorRelease(v66);
        swift_errorRelease(v66);
        _os_log_impl( (void *)&_mh_execute_header,  v98,  v99,  "%{public}s: Connection failed with error %{public}s",  (uint8_t *)v101,  0x16u);
        swift_arrayDestroy(v102, 2LL);
        swift_slowDealloc(v102, -1LL, -1LL);
        swift_slowDealloc(v101, -1LL, -1LL);
      }

      uint64_t v113 = v120;
      *uint64_t v120 = v66;
      (*(void (**)(uint64_t *, void, uint64_t))(v14 + 104))( v113,  enum case for ControlChannelTransportEvent.error(_:),  v13);
      swift_errorRetain(v66);
      a4(v113);
      swift_errorRelease(v66);
      swift_release();
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v14 + 8))(v113, v13);
    }

    else
    {
      if (a1 == 3)
      {
        uint64_t v115 = v10;
        uint64_t v39 = *(void *)(v19 + 32);
        swift_getObjectType(v39);
        swift_unknownObjectRetain(v39);
        BOOL v40 = sub_10003F258();
        uint64_t v41 = swift_unknownObjectRelease(v39);
        if (v40)
        {
          uint64_t v117 = v14;
          os_log_type_t v42 = static os_log_type_t.error.getter(v41);
          uint64_t v43 = (os_log_s *)qword_1000845F0;
          os_log_type_t v44 = v42;
          if (os_log_type_enabled((os_log_t)qword_1000845F0, v42))
          {
            swift_retain_n(v19, 2LL);
            uint64_t v45 = swift_slowAlloc(22LL, -1LL);
            uint64_t v46 = swift_slowAlloc(64LL, -1LL);
            uint64_t v122 = v46;
            *(_DWORD *)uint64_t v45 = 136446466;
            uint64_t v116 = v13;
            uint64_t v47 = v19;
            uint64_t v48 = *(void *)(v19 + 16);
            uint64_t v49 = *(void *)(v19 + 24);
            swift_bridgeObjectRetain(v49);
            sub_100045370(v48, v49, &v122);
            uint64_t v121 = v50;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v45 + 4, v45 + 12);
            swift_bridgeObjectRelease(v49);
            *(_WORD *)(v45 + 12) = 2082;
            uint64_t v121 = *(void *)(v47 + 32);
            swift_unknownObjectRetain(v121);
            uint64_t v51 = sub_10000FD7C(&qword_1000824C8);
            uint64_t v52 = String.init<A>(describing:)(&v121, v51);
            uint64_t v54 = v53;
            sub_100045370(v52, v53, &v122);
            uint64_t v121 = v55;
            uint64_t v19 = v47;
            uint64_t v17 = v120;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v45 + 14, v45 + 22);
            swift_release_n(v19, 2LL);
            uint64_t v56 = v54;
            uint64_t v13 = v116;
            swift_bridgeObjectRelease(v56);
            _os_log_impl( (void *)&_mh_execute_header,  v43,  v44,  "%{public}s: Rejecting control channel connection originating from local machine: %{public}s",  (uint8_t *)v45,  0x16u);
            swift_arrayDestroy(v46, 2LL);
            swift_slowDealloc(v46, -1LL, -1LL);
            swift_slowDealloc(v45, -1LL, -1LL);
          }

          uint64_t v57 = sub_10003352C( (unint64_t *)&unk_1000813E0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
          uint64_t v58 = v118;
          uint64_t v59 = v115;
          static Error<>.networkingError.getter(v115, v57);
          uint64_t v60 = sub_10003352C( (unint64_t *)&unk_1000819E0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
          uint64_t v61 = swift_allocError(v59, v60, 0LL, 0LL);
          Error<>.init(_:_:)(v58, 0xD000000000000030LL, 0x8000000100068BF0LL, v59, v57);
          *uint64_t v17 = v61;
          uint64_t v62 = v117;
          (*(void (**)(uint64_t *, void, uint64_t))(v117 + 104))( v17,  enum case for ControlChannelTransportEvent.error(_:),  v13);
          a4(v17);
          (*(void (**)(uint64_t *, uint64_t))(v62 + 8))(v17, v13);
          nw_connection_cancel(*(nw_connection_t *)(v19 + 32));
        }

        else
        {
          (*(void (**)(uint64_t *, void, uint64_t))(v14 + 104))( v17,  enum case for ControlChannelTransportEvent.transportStarted(_:),  v13);
          a4(v17);
          (*(void (**)(uint64_t *, uint64_t))(v14 + 8))(v17, v13);
          uint64_t v67 = type metadata accessor for NWObjcConnectionControlChannelTransport();
          uint64_t v69 = sub_10003352C( &qword_1000824C0,  v68,  (uint64_t (*)(uint64_t))type metadata accessor for NWObjcConnectionControlChannelTransport,  (uint64_t)&unk_100063120);
          JSONDataBasedControlChannelTransport.startReceivingMessages(usingEventHandler:)(a4, a5, v67, v69);
        }
      }

      return swift_release();
    }
  }

  return result;
}

void sub_100033210()
{
}

void sub_100033268()
{
}

void sub_100033280()
{
  uint64_t v4 = sub_10003356C();
  OS_nw_connection.send(content:completion:)(v3, v2, v1, v0, v4);
  sub_100031C6C();
}

void sub_1000332B8()
{
}

uint64_t sub_1000332F4()
{
  return v0;
}

uint64_t sub_100033318()
{
  return swift_deallocClassInstance(v0, 42LL, 7LL);
}

uint64_t type metadata accessor for NWObjcConnectionControlChannelTransport()
{
  return objc_opt_self(&OBJC_CLASS____TtC20remotepairingdeviced39NWObjcConnectionControlChannelTransport);
}

uint64_t sub_100033360()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 24LL));
  return v1;
}

uint64_t sub_100033390()
{
  return *(unsigned __int8 *)(*(void *)v0 + 41LL);
}

void sub_10003339C(dispatch_queue_s *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1000333BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100063120, a5);
  return JSONDataBasedControlChannelTransport.send(message:invokingCompletionHandlerOn:completion:)( a1,  a2,  a3,  a4,  a5,  WitnessTable);
}

void sub_100033428()
{
}

void sub_100033448()
{
}

double sub_100033454@<D0>(uint64_t a1@<X8>)
{
  return sub_1000324E8(a1);
}

unint64_t sub_100033468()
{
  return (unint64_t)sub_100032438() & 1;
}

uint64_t sub_10003348C(uint64_t a1, uint64_t a2)
{
  return sub_10003352C( (unint64_t *)&unk_1000824B0,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for NWObjcConnectionControlChannelTransport,  (uint64_t)&unk_1000630B0);
}

uint64_t sub_1000334B8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000334DC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100033508(int a1, uint64_t a2)
{
  return sub_1000326CC(a1, a2, *(void *)(v2 + 16), *(void (**)(void))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_100033514(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100033524(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10003352C(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = a3(a2);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10003356C()
{
  return swift_getObjectType(*(void *)(v0 + 32));
}

uint64_t sub_100033588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)v3;
  *(_BYTE *)(v3 + swift_weakDestroy(v0 + 16) = 0;
  *(void *)(v3 + 24) = a1;
  swift_retain(a1);
  dispatch thunk of XPCConnection.withUnsafeUnderlyingConnection<A>(_:)( &v15,  sub_100021210,  0LL,  &type metadata for Int32);
  uint64_t v15 = 0LL;
  unint64_t v16 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(65LL);
  v8._object = (void *)0x8000000100068CB0LL;
  v8._countAndFlagsBits = 0xD00000000000003FLL;
  String.append(_:)(v8);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  unint64_t v11 = v16;
  uint64_t v12 = String.utf8CString.getter(v15, v16);
  swift_bridgeObjectRelease(v11);
  uint64_t v13 = os_transaction_create(v12 + 32);
  uint64_t result = swift_release(v12);
  if (v13)
  {
    swift_release(a1);
    v4[4] = v13;
    v4[5] = a2;
    v4[6] = a3;
    return (uint64_t)v4;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000336B8()
{
  *(_BYTE *)(v0 + swift_weakDestroy(v0 + 16) = 1;
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 40))();
  return dispatch thunk of XPCConnection.cancel()(v1);
}

uint64_t sub_1000336EC()
{
  uint64_t v0 = type metadata accessor for DeviceServiceEvent(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v3 = __chkstk_darwin(v0, v2);
  uint64_t v5 = __chkstk_darwin(v3, v4);
  __chkstk_darwin(v5, v6);
  Swift::String v8 = (char *)&v20 - v7;
  sub_100022138();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v8,  enum case for DeviceServiceEvent.pairableHostFound(_:),  v0);
  uint64_t v11 = sub_100033C1C(&qword_100081A00, v9, v10, (uint64_t)&protocol conformance descriptor for DeviceServiceEvent);
  sub_100033C1C(&qword_100081A08, v12, v13, (uint64_t)&protocol conformance descriptor for DeviceServiceEvent);
  uint64_t v14 = sub_100033C04();
  XPCConnection.send<A>(value:)(v14, v15, v11, v16);
  uint64_t v17 = sub_100033C04();
  return v18(v17);
}

void *sub_1000339CC()
{
  return v0;
}

uint64_t sub_1000339F8()
{
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t type metadata accessor for PairableHostsBrowseRegistration()
{
  return objc_opt_self(&OBJC_CLASS____TtC20remotepairingdeviced31PairableHostsBrowseRegistration);
}

Swift::Int sub_100033A38()
{
  uint64_t v0 = type metadata accessor for PairableHostsBrowseRegistration();
  uint64_t v2 = sub_10003352C( &qword_1000825C8,  v1,  (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration,  (uint64_t)&unk_100063230);
  HashableByObjectIdentity.hash(into:)(v4, v0, v2);
  return Hasher._finalize()();
}

Swift::Int sub_100033AA0()
{
  return sub_100033A38();
}

uint64_t sub_100033AC0(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100063230, a2);
  return HashableByObjectIdentity.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_100033B08(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100063230, a2);
  HashableByObjectIdentity.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_100033B60(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100063230, a3);
  return static HashableByObjectIdentity.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_100033BAC(uint64_t a1, uint64_t a2)
{
  return sub_10003352C( &qword_1000825B8,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration,  (uint64_t)&unk_1000631C8);
}

uint64_t sub_100033BD8(uint64_t a1, uint64_t a2)
{
  return sub_10003352C( &qword_1000825C0,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration,  (uint64_t)&unk_1000631F0);
}

uint64_t sub_100033C04()
{
  return v0;
}

void sub_100033C10(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100033C1C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003352C(a1, 255LL, v4, a4);
}

uint64_t sub_100033C2C()
{
  os_log_type_t v1 = static os_log_type_t.default.getter();
  uint64_t v2 = (os_log_s *)qword_1000845F0;
  os_log_type_t v3 = v1;
  uint64_t result = os_log_type_enabled((os_log_t)qword_1000845F0, v1);
  if ((_DWORD)result)
  {
    swift_retain(v0);
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v5 = 134217984;
    swift_beginAccess(v0 + 48, v10, 0LL, 0LL);
    uint64_t v6 = *(void *)(v0 + 48);
    uint64_t v7 = swift_bridgeObjectRetain(v6);
    uint64_t v8 = sub_10004F824(v7);
    swift_bridgeObjectRelease(v6);
    uint64_t v9 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, v10, v5 + 4, v5 + 12);
    swift_release(v0);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "TCP connected peers updated. Total count: %ld", v5, 0xCu);
    return swift_slowDealloc(v5, -1LL, -1LL);
  }

  return result;
}

double sub_100033D3C()
{
  *(void *)&double result = swift_bridgeObjectRetain(*(void *)(v0 + 48)).n128_u64[0];
  return result;
}

void sub_100033D6C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(void *)(*(void *)(v1 + 224) + 16LL))
  {
    if (!v2) {
      sub_100037490(a1);
    }
  }

  else if (v2)
  {
    sub_100037694(a1);
  }

uint64_t sub_100033D90(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 224);
  *(void *)(v1 + 224) = a1;
  sub_100033D6C(v2);
  return swift_bridgeObjectRelease(v2);
}

nw_parameters *sub_100033DBC()
{
  v3[4] = sub_100033E50;
  v3[5] = 0LL;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 1107296256LL;
  v3[2] = sub_100033C28;
  v3[3] = &unk_100077F10;
  uint64_t v0 = _Block_copy(v3);
  uint64_t v1 = create_nw_parameters_for_tcp(v0);
  sub_100039F58();
  nw_parameters_prohibit_interface_type(v1, nw_interface_type_cellular);
  nw_parameters_prohibit_interface_type(v1, nw_interface_type_loopback);
  return v1;
}

void sub_100033E50(nw_protocol_options *a1)
{
}

uint64_t sub_100033EA4(uint64_t a1, uint64_t a2)
{
  os_log_type_t v3 = *(void (**)(uint64_t))(a1 + 32);
  sub_10000FFDC();
  uint64_t v4 = swift_unknownObjectRetain(a2);
  v3(v4);
  sub_100012464();
  return swift_unknownObjectRelease(a2);
}

void sub_100033EE4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 80);
  OS_dispatch_queue.assertOnQueueHierarchy()();
  uint64_t v3 = sub_10000FF6C((uint64_t)&unk_100077B38);
  sub_100039E10(v3);
  uint64_t v4 = sub_100039E60();
  swift_release();
  xpc_activity_register("com.apple.dt.remotepairing.updatebonjour", XPC_ACTIVITY_CHECK_IN, v4);
  _Block_release(v4);
  sub_100039E60();
  sub_100039EC0("com.apple.bonjour.registration");
  sub_100039F58();
  uint64_t v83 = sub_100034784;
  uint64_t v84 = 0LL;
  uint64_t v79 = _NSConcreteStackBlock;
  uint64_t v80 = 1107296256LL;
  uint64_t v81 = (uint64_t (*)(uint64_t))sub_100033C28;
  uint64_t v82 = &unk_100077E48;
  sub_100039E60();
  sub_100039EC0("com.apple.bluetooth.discovery");
  sub_100039F58();
  uint64_t v5 = (int **)sub_1000122E0(8LL);
  size_t v78 = 0LL;
  uint64_t v6 = launch_activate_socket("TCPControlChannelSocket", v5, &v78);
  if ((_DWORD)v6)
  {
    int v8 = v6;
    os_log_type_t v9 = static os_log_type_t.error.getter(v6);
    uint64_t v10 = (os_log_s *)qword_1000845F0;
    if (sub_100026D80(v9))
    {
      uint64_t v11 = (uint8_t *)sub_1000122E0(8LL);
      *(_DWORD *)uint64_t v11 = 67109120;
      LODWORD(v79) = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, (char *)&v79 + 4, v11 + 4, v11 + 8);
      _os_log_impl( (void *)&_mh_execute_header,  v10,  (os_log_type_t)_NSConcreteStackBlock,  "NetworkControlChannelService: failed to fetch sockets from launchd. Received result %d",  v11,  8u);
      sub_10001001C((uint64_t)v11);
    }

    uint64_t v12 = (uint64_t)v5;
  }

  else
  {
    uint64_t v60 = v5;
    uint64_t v61 = *v5;
    if (v78)
    {
      uint64_t v66 = v1 + 56;
      size_t v13 = 4 * v78;
      *(void *)&__int128 v7 = 67109120LL;
      __int128 v62 = v7;
      uint64_t v14 = v61;
      uint64_t v65 = v1;
      uint64_t v64 = v2;
      uint64_t v63 = (void *)(v1 + 64);
      do
      {
        uint64_t v15 = *v14;
        BOOL v16 = socket_deny_cellular(*v14);
        if (v16)
        {
          uint64_t v76 = v14;
          size_t v77 = v13;
          sub_10000E484(0LL, (unint64_t *)&qword_100082120, &OBJC_CLASS___OS_dispatch_source_ptr);
          uint64_t v17 = static OS_dispatch_source.makeReadSource(fileDescriptor:queue:)(v15, v2);
          uint64_t ObjectType = swift_getObjectType(v17);
          uint64_t v19 = sub_10000FF6C((uint64_t)&unk_100077B38);
          sub_100039E10(v19);
          uint64_t v20 = sub_100016BCC((uint64_t)&unk_100077E80, 36LL);
          *(void *)(v20 + swift_weakDestroy(v0 + 16) = v19;
          *(void *)(v20 + 24) = v17;
          int v75 = v15;
          *(_DWORD *)(v20 + 32) = v15;
          uint64_t v83 = sub_100039D10;
          uint64_t v84 = v20;
          uint64_t v79 = _NSConcreteStackBlock;
          uint64_t v80 = 1107296256LL;
          uint64_t v81 = sub_100040708;
          uint64_t v82 = &unk_100077E98;
          uint64_t v21 = sub_100039E60();
          uint64_t v69 = type metadata accessor for DispatchQoS(0LL);
          uint64_t v70 = &v60;
          uint64_t v68 = *(void *)(v69 - 8);
          uint64_t v73 = *(void *)(v68 + 64);
          __chkstk_darwin(v69, v22);
          unint64_t v74 = (v23 + 15) & 0xFFFFFFFFFFFFFFF0LL;
          uint64_t v24 = (char *)&v60 - v74;
          sub_10000FFC4();
          sub_100039F0C();
          sub_1000129A8();
          uint64_t v25 = type metadata accessor for DispatchWorkItemFlags(0LL);
          uint64_t v67 = &v60;
          uint64_t v26 = *(void *)(v25 - 8);
          uint64_t v71 = v25;
          uint64_t v27 = *(void *)(v26 + 64);
          __chkstk_darwin(v25, v28);
          unint64_t v72 = (v27 + 15) & 0xFFFFFFFFFFFFFFF0LL;
          uint64_t v29 = (char *)&v60 - v72;
          sub_1000129BC(ObjectType);
          OS_dispatch_source.setEventHandler(qos:flags:handler:)(v24, v29, v21, ObjectType);
          _Block_release(v21);
          uint64_t v30 = *(void (**)(char *, uint64_t))(v26 + 8);
          v30(v29, v25);
          uint64_t v31 = v69;
          uint64_t v32 = *(void (**)(char *, uint64_t))(v68 + 8);
          v32(v24, v69);
          sub_10000FFF8();
          sub_100012464();
          uint64_t v33 = sub_10000FF6C((uint64_t)&unk_100077ED0);
          *(void *)(v33 + swift_weakDestroy(v0 + 16) = v17;
          uint64_t v83 = sub_100039D40;
          uint64_t v84 = v33;
          uint64_t v79 = _NSConcreteStackBlock;
          uint64_t v80 = 1107296256LL;
          uint64_t v81 = sub_100040708;
          uint64_t v82 = &unk_100077EE8;
          uint64_t v34 = sub_100039E60();
          uint64_t v70 = &v60;
          __chkstk_darwin(v34, v35);
          uint64_t v36 = (char *)&v60 - v74;
          sub_100039F0C();
          uint64_t v37 = sub_100016AEC();
          __chkstk_darwin(v37, v38);
          uint64_t v39 = (char *)&v60 - v72;
          sub_1000129BC(ObjectType);
          OS_dispatch_source.setCancelHandler(qos:flags:handler:)(v36, v39, v34, ObjectType);
          _Block_release(v34);
          v30(v39, v71);
          BOOL v40 = v36;
          uint64_t v1 = v65;
          v32(v40, v31);
          swift_release();
          OS_dispatch_source.resume()();
          sub_100016B48(v66, (uint64_t)&v79, 33LL);
          uint64_t v41 = *(void *)(v1 + 56);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v41);
          *(void *)(v1 + 56) = v41;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100039F20();
            sub_100039F44(v54);
          }

          unint64_t v43 = *(void *)(v41 + 16);
          uint64_t v2 = v64;
          os_log_type_t v44 = v63;
          uint64_t v14 = v76;
          size_t v13 = v77;
          int v45 = v75;
          if (v43 >= *(void *)(v41 + 24) >> 1)
          {
            sub_100039F20();
            sub_100039F44(v55);
          }

          *(void *)(v41 + swift_weakDestroy(v0 + 16) = v43 + 1;
          *(_DWORD *)(v41 + 4 * v43 + 32) = v45;
          swift_endAccess(&v79);
          sub_100016B48((uint64_t)v44, (uint64_t)&v79, 33LL);
          uint64_t v46 = sub_100039F0C();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v46);
          unint64_t v48 = *(void *)((*v44 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v47 = *(void *)((*v44 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v48 >= v47 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1LL);
          }
          uint64_t v49 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v48, v17);
          specialized Array._endMutation()(v49);
          swift_endAccess(&v79);
          swift_unknownObjectRelease(v17);
        }

        else
        {
          os_log_type_t v50 = static os_log_type_t.error.getter(v16);
          uint64_t v51 = (os_log_s *)qword_1000845F0;
          os_log_type_t v52 = v50;
          if (os_log_type_enabled((os_log_t)qword_1000845F0, v50))
          {
            uint64_t v53 = sub_1000122E0(8LL);
            *(_DWORD *)uint64_t v53 = v62;
            *(_DWORD *)(v53 + 4) = v15;
            _os_log_impl( (void *)&_mh_execute_header,  v51,  v52,  "NetworkControlChannelService: Failed to set restrictions on socket %d",  (uint8_t *)v53,  8u);
            sub_10001001C(v53);
          }
        }

        ++v14;
        v13 -= 4LL;
      }

      while (v13);
    }

    sub_100016B48(v1 + 56, (uint64_t)&v79, 0LL);
    uint64_t v56 = *(void *)(v1 + 56);
    if (*(void *)(v56 + 16))
    {
      int v57 = sub_100039000(*(_DWORD *)(v56 + 32));
      *(_WORD *)(v1 + 72) = v57;
      *(_BYTE *)(v1 + 74) = BYTE2(v57) & 1;
    }

    uint64_t v58 = sub_10000FF6C((uint64_t)&unk_100077B38);
    sub_100039E10(v58);
    swift_retain(v58);
    sub_10001B948((uint64_t)sub_100039CA8, v58);
    swift_release_n(v58, 2LL);
    sub_100039F14();
    swift_retain(v1);
    unint64_t v59 = sub_100039E84();
    sub_100046268(v59);
    sub_10001001C((uint64_t)v61);
    uint64_t v12 = (uint64_t)v60;
  }

  sub_10001001C(v12);
  sub_100039DE4();
}

void sub_100034638(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v11, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    id v6 = *(id *)(Strong + 80);
    uint64_t v7 = swift_release();
    __chkstk_darwin(v7, v8);
    v10[2] = a2;
    v10[3] = a1;
    uint64_t v9 = sub_10000FD7C(&qword_100082118);
    OS_dispatch_queue.sync<A>(execute:)(&v12, sub_100039D48, v10, v9);
  }

uint64_t sub_100034704@<X0>(uint64_t a1@<X0>, _xpc_activity_s *a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v5);
  uint64_t v7 = result;
  if (result)
  {
    sub_1000357C0(a2);
    uint64_t result = swift_release();
  }

  *a3 = v7 == 0;
  return result;
}

uint64_t sub_100034784()
{
  uint64_t v0 = static os_log_type_t.info.getter();
  return os_log(_:dso:log:_:_:)( v0,  &_mh_execute_header,  qword_1000845F0,  "Received CoreBlutooth discovery XPC event",  41LL,  2LL);
}

uint64_t sub_1000347C4(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v3, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    sub_100034DC4();
    return swift_release();
  }

  return result;
}

uint64_t sub_100034820(uint64_t a1)
{
  os_log_type_t v2 = static os_log_type_t.error.getter(a1);
  uint64_t v3 = (os_log_s *)qword_1000845F0;
  os_log_type_t v4 = v2;
  uint64_t result = os_log_type_enabled((os_log_t)qword_1000845F0, v2);
  if ((_DWORD)result)
  {
    swift_unknownObjectRetain_n(a1, 2LL);
    id v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v13 = a1;
    uint64_t v14 = v7;
    *(_DWORD *)id v6 = 136315138;
    swift_unknownObjectRetain(a1);
    uint64_t v8 = sub_10000FD7C(&qword_100082900);
    uint64_t v9 = String.init<A>(describing:)(&v13, v8);
    uint64_t v11 = v10;
    sub_100045370(v9, v10, &v14);
    uint64_t v13 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v6 + 4, v6 + 12);
    swift_unknownObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease(v11);
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "NetworkControlChannelService: listener source %s cancelled",  v6,  0xCu);
    swift_arrayDestroy(v7, 1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
    return swift_slowDealloc(v6, -1LL, -1LL);
  }

  return result;
}

uint64_t sub_100034984(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v2);
  if (result)
  {
    sub_10003584C();
    sub_10003671C();
    return swift_release();
  }

  return result;
}

void sub_1000349DC()
{
}

void sub_1000349FC()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for ControlChannelConnection.InvalidationReason(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  sub_100026C8C();
  if ((*(_BYTE *)(v0 + 216) & 1) != 0)
  {
    uint64_t v7 = static os_log_type_t.error.getter(v6);
    sub_100012380( v7,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"NetworkControlChannelService: Ignoring shutdown request as service is already shutting down",  91LL);
LABEL_41:
    sub_10000FF80();
    return;
  }

  *(_BYTE *)(v0 + 2swift_weakDestroy(v0 + 16) = 1;
  sub_100016B48(v0 + 64, (uint64_t)v38, 0LL);
  uint64_t v8 = *(void *)(v0 + 64);
  uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(*(void *)(v0 + 64));
  if (!v9) {
    goto LABEL_11;
  }
LABEL_5:
  if (v9 >= 1)
  {
    uint64_t v10 = 0LL;
    do
    {
      if ((v8 & 0xC000000000000001LL) != 0)
      {
        uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v8);
      }

      else
      {
        uint64_t v11 = *(void *)(v8 + 8 * v10 + 32);
        swift_unknownObjectRetain(v11);
      }

      ++v10;
      swift_getObjectType(v11);
      OS_dispatch_source.cancel()();
      swift_unknownObjectRelease(v11);
    }

    while (v9 != v10);
    while (1)
    {
LABEL_11:
      swift_bridgeObjectRelease(v8);
      sub_100016B48(v2 + 48, (uint64_t)&v37, 0LL);
      uint64_t v2 = *(void *)(v2 + 48);
      if ((v2 & 0xC000000000000001LL) != 0)
      {
        uint64_t v12 = v2 < 0 ? v2 : v2 & 0xFFFFFFFFFFFFFF8LL;
        swift_bridgeObjectRetain(v2);
        uint64_t v13 = __CocoaSet.makeIterator()(v12);
        uint64_t v14 = sub_10000FF78();
        sub_100026A28( &qword_100082090,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
        uint64_t v16 = Set.Iterator.init(_cocoa:)(v13, v14, v15);
        uint64_t v2 = v38[3];
        uint64_t v34 = v38[4];
        uint64_t v17 = v38[5];
        uint64_t v18 = v38[6];
        unint64_t v19 = v38[7];
      }

      else
      {
        uint64_t v34 = v2 + 56;
        uint64_t v17 = ~(-1LL << *(_BYTE *)(v2 + 32));
        sub_10000FFE4();
        unint64_t v19 = v20 & v21;
        swift_bridgeObjectRetain(v2);
        uint64_t v18 = 0LL;
      }

      int64_t v33 = (unint64_t)(v17 + 64) >> 6;
      uint64_t v22 = enum case for ControlChannelConnection.InvalidationReason.serviceShutdown(_:);
      if (v2 < 0) {
        break;
      }
LABEL_18:
      if (v19)
      {
        uint64_t v23 = (v19 - 1) & v19;
        unint64_t v24 = __clz(__rbit64(v19)) | (v18 << 6);
        uint64_t v8 = v18;
        goto LABEL_37;
      }

      int64_t v28 = v18 + 1;
      if (!__OFADD__(v18, 1LL))
      {
        if (v28 >= v33) {
          goto LABEL_40;
        }
        unint64_t v29 = *(void *)(v34 + 8 * v28);
        uint64_t v8 = v18 + 1;
        if (!v29)
        {
          uint64_t v8 = v18 + 2;
          if (v18 + 2 >= v33) {
            goto LABEL_40;
          }
          unint64_t v29 = *(void *)(v34 + 8 * v8);
          if (!v29)
          {
            uint64_t v8 = v18 + 3;
            if (v18 + 3 >= v33) {
              goto LABEL_40;
            }
            unint64_t v29 = *(void *)(v34 + 8 * v8);
            if (!v29)
            {
              uint64_t v8 = v18 + 4;
              if (v18 + 4 >= v33) {
                goto LABEL_40;
              }
              unint64_t v29 = *(void *)(v34 + 8 * v8);
              if (!v29)
              {
                int64_t v30 = v18 + 5;
                while (v30 < v33)
                {
                  unint64_t v29 = *(void *)(v34 + 8 * v30++);
                  if (v29)
                  {
                    uint64_t v8 = v30 - 1;
                    goto LABEL_36;
                  }
                }

                goto LABEL_40;
              }
            }
          }
        }

LABEL_40:
    sub_10000FE04(v2);
    goto LABEL_41;
  }

  __break(1u);
}

  __break(1u);
  return result;
}

void sub_100034DC4()
{
  int v5 = v4;
  os_log_type_t v7 = static os_log_type_t.info.getter(v6);
  if (sub_100039E30(v7))
  {
    uint64_t v3 = 8LL;
    uint64_t v8 = (_DWORD *)sub_1000122E0(8LL);
    *uint64_t v8 = 67109120;
    LODWORD(v23) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, (char *)&v23 + 4, v8 + 1, v8 + 2);
    sub_100039E44((void *)&_mh_execute_header, v1, v2, "Dispatch source event handler fired for listening socket %d");
    sub_10001001C((uint64_t)v8);
  }

  uint64_t v9 = accept(v5, 0LL, 0LL);
  if ((v9 & 0x80000000) != 0)
  {
    os_log_type_t v12 = static os_log_type_t.error.getter(v9);
    if (sub_100039E30(v12))
    {
      uint64_t v13 = sub_1000122E0(18LL);
      uint64_t v14 = sub_1000122E0(32LL);
      uint64_t v23 = v14;
      *(_DWORD *)uint64_t v13 = 67109378;
      LODWORD(v22) = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, (char *)&v22 + 4, v13 + 4, v13 + 8);
      *(_WORD *)(v13 + 8) = 2080;
      uint64_t v15 = sub_10000FD7C((uint64_t *)&unk_1000828F0);
      sub_100012280();
      __chkstk_darwin(v16, v17);
      sub_100016C88();
      static POSIXError.current.getter(v18);
      uint64_t v19 = String.init<A>(describing:)(v3, v15);
      sub_100045370(v19, v20, &v23);
      uint64_t v22 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v13 + 10, v13 + 18);
      sub_10001DD38();
      _os_log_impl( (void *)&_mh_execute_header,  v1,  v2,  "NetworkControlChannelService: error accepting connection from listening socket %d: %s",  (uint8_t *)v13,  0x12u);
      sub_100012450(v14);
      sub_10001001C(v14);
      sub_10001001C(v13);
    }
  }

  else
  {
    int v10 = v9;
    uint64_t v11 = static os_log_type_t.default.getter(v9);
    sub_100012380( v11,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"NetworkControlChannelService: accepted connected socket from peer",  65LL);
    sub_10000FFDC();
    sub_100037E90(0, v0, v10, v0);
  }

  sub_10000FF80();
}

uint64_t sub_100034FC0(char a1, int a2)
{
  if ((a1 & 1) != 0)
  {
    uint64_t v3 = sub_100033DBC();
    id v4 = _remotepairing_nw_connection_create_with_connected_socket_and_parameters();
    uint64_t v5 = swift_unknownObjectRelease(v3);
    if (v4)
    {
      sub_10003865C();
      return swift_unknownObjectRelease(v4);
    }

    uint64_t v22 = static os_log_type_t.error.getter(v5);
    uint64_t v23 = (os_log_s *)qword_1000845F0;
    os_log(_:dso:log:_:_:)( v22,  &_mh_execute_header,  qword_1000845F0,  "Error creating nw_connection_t from connected socket",  52LL,  2LL,  &_swiftEmptyArrayStorage);
    uint64_t result = close(a2);
    if ((_DWORD)result == -1)
    {
      os_log_type_t v24 = static os_log_type_t.error.getter(result);
      uint64_t result = os_log_type_enabled(v23, v24);
      if ((_DWORD)result)
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v26 = swift_slowAlloc(32LL, -1LL);
        uint64_t v37 = v26;
        *(_DWORD *)uint64_t v25 = 136446210;
        uint64_t v27 = sub_10000FD7C((uint64_t *)&unk_1000828F0);
        uint64_t v29 = __chkstk_darwin(v27, v28);
        uint64_t v31 = (char *)&v36 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        static POSIXError.current.getter(v29);
        uint64_t v32 = String.init<A>(describing:)(v31, v27);
        uint64_t v34 = v33;
        sub_100045370(v32, v33, &v37);
        uint64_t v36 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v25 + 4, v25 + 12);
        swift_bridgeObjectRelease(v34);
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Received error closing socket: %{public}s", v25, 0xCu);
        swift_arrayDestroy(v26, 1LL);
        swift_slowDealloc(v26, -1LL, -1LL);
        uint64_t v21 = v25;
        return swift_slowDealloc(v21, -1LL, -1LL);
      }
    }
  }

  else
  {
    uint64_t result = close(a2);
    if ((_DWORD)result == -1)
    {
      os_log_type_t v7 = static os_log_type_t.error.getter(result);
      uint64_t v8 = (os_log_s *)qword_1000845F0;
      os_log_type_t v9 = v7;
      uint64_t result = os_log_type_enabled((os_log_t)qword_1000845F0, v7);
      if ((_DWORD)result)
      {
        int v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v11 = swift_slowAlloc(32LL, -1LL);
        uint64_t v37 = v11;
        *(_DWORD *)int v10 = 136446210;
        uint64_t v12 = sub_10000FD7C((uint64_t *)&unk_1000828F0);
        uint64_t v14 = __chkstk_darwin(v12, v13);
        uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        static POSIXError.current.getter(v14);
        uint64_t v17 = String.init<A>(describing:)(v16, v12);
        uint64_t v19 = v18;
        sub_100045370(v17, v18, &v37);
        uint64_t v36 = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v10 + 4, v10 + 12);
        swift_bridgeObjectRelease(v19);
        _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "Received error closing rejected socket: %{public}s",  v10,  0xCu);
        swift_arrayDestroy(v11, 1LL);
        swift_slowDealloc(v11, -1LL, -1LL);
        uint64_t v21 = v10;
        return swift_slowDealloc(v21, -1LL, -1LL);
      }
    }
  }

  return result;
}

uint64_t sub_100035330(uint64_t a1, uint64_t a2)
{
  uint64_t IsEnabled = remotePairingIsEnabled();
  if (!(_DWORD)IsEnabled)
  {
    uint64_t v6 = static os_log_type_t.default.getter(IsEnabled);
    uint64_t v7 = qword_1000845F0;
    uint64_t v8 = os_log(_:dso:log:_:_:)( v6,  &_mh_execute_header,  qword_1000845F0,  "Not configuring launchd-managed TCP control channel due to RemotePairing support being disabled",  95LL,  2LL,  &_swiftEmptyArrayStorage);
LABEL_10:
    uint64_t v12 = static os_log_type_t.error.getter(v8);
    os_log(_:dso:log:_:_:)( v12,  &_mh_execute_header,  v7,  "Not configuring TCP control channel bonjour advertisment as launchd-managed TCP control channels are not enabled",  112LL,  2LL,  &_swiftEmptyArrayStorage);
    return swift_release(a2);
  }

  uint64_t v4 = static Defaults.deviceAllowTCPControlChannels.getter();
  if ((v4 & 1) == 0)
  {
    uint64_t v9 = static os_log_type_t.error.getter(v4);
    uint64_t v7 = qword_1000845F0;
    uint64_t v8 = os_log(_:dso:log:_:_:)( v9,  &_mh_execute_header,  qword_1000845F0,  "Not configuring launchd-managed TCP control channel due to 'deviceAllowTCPControlChannel' not being set to true",  111LL,  2LL,  &_swiftEmptyArrayStorage);
    goto LABEL_10;
  }

  BOOL v5 = sub_100035EBC();
  if (!v5)
  {
    uint64_t v10 = static os_log_type_t.error.getter(v5);
    uint64_t v7 = qword_1000845F0;
    uint64_t v8 = os_log(_:dso:log:_:_:)( v10,  &_mh_execute_header,  qword_1000845F0,  "Not configuring launchd-managed TCP control channel due to no hosts being paired",  80LL,  2LL,  &_swiftEmptyArrayStorage);
    goto LABEL_10;
  }

  if (!&OBJC_CLASS___RPIdentity)
  {
    uint64_t v11 = static os_log_type_t.error.getter(v5);
    uint64_t v7 = qword_1000845F0;
    uint64_t v8 = os_log(_:dso:log:_:_:)( v11,  &_mh_execute_header,  qword_1000845F0,  "Not configuring launchd-managed TCP control channel as Rapport is not available and auth tag generation is unsupported",  118LL,  2LL,  &_swiftEmptyArrayStorage);
    goto LABEL_10;
  }

  sub_1000358A0(1, a2);
  return swift_release(a2);
}

uint64_t sub_100035498(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t IsEnabled = remotePairingIsEnabled(v9);
  if (!(_DWORD)IsEnabled)
  {
    uint64_t v28 = static os_log_type_t.default.getter(IsEnabled);
    os_log(_:dso:log:_:_:)( v28,  &_mh_execute_header,  qword_1000845F0,  "Not configuring launchd-managed TCP control channel due to RemotePairing support being disabled",  95LL,  2LL,  &_swiftEmptyArrayStorage);
LABEL_10:
    sub_100038314(0LL, a2 & 1, a3, a4, a5);
    goto LABEL_11;
  }

  uint64_t v11 = static Defaults.deviceAllowTCPControlChannels.getter();
  if ((v11 & 1) == 0)
  {
    uint64_t v29 = static os_log_type_t.error.getter(v11);
    os_log(_:dso:log:_:_:)( v29,  &_mh_execute_header,  qword_1000845F0,  "Not configuring launchd-managed TCP control channel due to 'deviceAllowTCPControlChannel' not being set to true",  111LL,  2LL,  &_swiftEmptyArrayStorage);
    goto LABEL_10;
  }

  BOOL v12 = sub_100035EBC();
  if (!v12)
  {
    uint64_t v30 = static os_log_type_t.error.getter(v12);
    os_log(_:dso:log:_:_:)( v30,  &_mh_execute_header,  qword_1000845F0,  "Not configuring launchd-managed TCP control channel due to no hosts being paired",  80LL,  2LL,  &_swiftEmptyArrayStorage);
    goto LABEL_10;
  }

  if (!&OBJC_CLASS___RPIdentity)
  {
    uint64_t v31 = static os_log_type_t.error.getter(v12);
    os_log(_:dso:log:_:_:)( v31,  &_mh_execute_header,  qword_1000845F0,  "Not configuring launchd-managed TCP control channel as Rapport is not available and auth tag generation is unsupported",  118LL,  2LL,  &_swiftEmptyArrayStorage);
    goto LABEL_10;
  }

  uint64_t v37 = *(void *)(a3 + 80);
  uint64_t v13 = swift_allocObject(&unk_100077C50, 32LL, 7LL);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v13 + 24) = a5;
  aBlock[4] = sub_100039954;
  void aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100040708;
  aBlock[3] = &unk_100077C68;
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v35 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v36 = &v33;
  uint64_t v34 = *(void *)(v35 - 8);
  __chkstk_darwin(v35, v15);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = swift_retain(a5);
  static DispatchQoS.unspecified.getter(v18);
  uint64_t v19 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v33 = (uint64_t)&v33;
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, &type metadata accessor for DispatchWorkItemFlags);
  uint64_t v22 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = &_swiftEmptyArrayStorage;
  sub_100026A28((unint64_t *)&qword_1000813C0, v23);
  uint64_t v25 = v24;
  uint64_t v26 = sub_10000FD7C(&qword_100081100);
  sub_100029EA0((unint64_t *)&qword_1000813D0, &qword_100081100);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v26, v27, v19, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v22, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v17, v35);
  swift_release();
LABEL_11:
  swift_release();
  return swift_release();
}

void sub_1000357C0(_xpc_activity_s *a1)
{
  xpc_activity_state_t state = xpc_activity_get_state(a1);
  uint64_t v3 = static os_log_type_t.info.getter(state);
  if (state)
  {
    sub_100012380( v3,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"Bonjour registration XPC activity fired",  39LL);
    sub_10003584C();
  }

  else
  {
    sub_100012380( v3,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"Checking in for bonjour registration XPC activity",  49LL);
    sub_100020484();
  }

uint64_t sub_10003584C()
{
  uint64_t v1 = String.utf8CString.getter(*(void *)(v0 + 24), *(void *)(v0 + 32));
  xpc_set_event("com.apple.bonjour.registration", v1 + 32, 0LL);
  sub_100012464();
  uint64_t v2 = swift_retain(v0);
  return sub_100035330(v2, v0);
}

uint64_t sub_1000358A0(char a1, uint64_t a2)
{
  uint64_t v60 = a2;
  uint64_t v3 = type metadata accessor for XPCDictionary(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for BonjourService(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  BOOL v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for BonjourAdvertFlags(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a1 & 1) != 0)
  {
    if (*(_BYTE *)(v60 + 74) == 1)
    {
      uint64_t v19 = static os_log_type_t.error.getter(v16);
      return os_log(_:dso:log:_:_:)( v19,  &_mh_execute_header,  qword_1000845F0,  "Not configuring TCP control channel bonjour advertisment as listening port number is unknown",  92LL,  2LL,  &_swiftEmptyArrayStorage);
    }

    else
    {
      uint64_t v53 = v7;
      uint64_t v54 = v4;
      uint64_t v55 = v3;
      os_log_type_t v52 = (void **)*(unsigned __int16 *)(v60 + 72);
      uint64_t v58 = type metadata accessor for UUID(0LL);
      unint64_t v59 = &v50;
      uint64_t v57 = *(void *)(v58 - 8);
      uint64_t v23 = __chkstk_darwin(v58, v22);
      uint64_t v25 = (char *)&v50 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      UUID.init()(v23);
      aBlock = (void **)&_swiftEmptyArrayStorage;
      sub_100026A28(&qword_1000828D0, (uint64_t (*)(uint64_t))&type metadata accessor for BonjourAdvertFlags);
      uint64_t v27 = v26;
      uint64_t v28 = sub_10000FD7C(&qword_1000828D8);
      sub_100029EA0(&qword_1000828E0, &qword_1000828D8);
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v28, v29, v13, v27);
      uint64_t v56 = v25;
      uint64_t v30 = (nw_txt_record *)sub_100036048();
      uint64_t v31 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, v13);
      if (v30)
      {
        uint64_t v32 = static os_log_type_t.default.getter(v31);
        os_log(_:dso:log:_:_:)( v32,  &_mh_execute_header,  qword_1000845F0,  "Updating bonjour advertisment",  29LL,  2LL,  &_swiftEmptyArrayStorage);
        uint64_t v33 = v55;
        uint64_t v51 = swift_allocBox(v55);
        uint64_t v35 = v34;
        XPCDictionary.init()(v51);
        aBlock = 0LL;
        LOBYTE(v62) = 0;
        unint64_t v36 = sub_100039C38();
        XPCDictionary.subscript.setter(&aBlock, 0x7367616C46LL, 0xE500000000000000LL, &type metadata for Int, v36);
        uint64_t v37 = (*(uint64_t (**)(char *, void, uint64_t))(v9 + 104))( v12,  enum case for BonjourService.default(_:),  v8);
        uint64_t v38 = BonjourService.rawValue.getter(v37);
        uint64_t v40 = v39;
        (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
        XPCDictionary.subscript.setter(v38, v40, 0xD000000000000010LL, 0x8000000100069780LL);
        aBlock = 0LL;
        LOBYTE(v62) = 0;
        XPCDictionary.subscript.setter(&aBlock, 0x6361667265746E49LL, 0xEE007865646E4965LL, &type metadata for Int, v36);
        aBlock = v52;
        LOBYTE(v62) = 0;
        uint64_t v41 = XPCDictionary.subscript.setter(&aBlock, 1953656656LL, 0xE400000000000000LL, &type metadata for Int, v36);
        os_log_type_t v42 = v56;
        uint64_t v43 = UUID.uuidString.getter(v41);
        XPCDictionary.subscript.setter(v43, v44, 1701667150LL, 0xE400000000000000LL);
        uint64_t v45 = v51;
        uint64_t v65 = sub_100039C74;
        uint64_t v66 = v51;
        aBlock = _NSConcreteStackBlock;
        uint64_t v62 = 1107296256LL;
        uint64_t v63 = sub_100035E14;
        uint64_t v64 = &unk_100077DA8;
        uint64_t v46 = _Block_copy(&aBlock);
        uint64_t v47 = v66;
        swift_retain(v45);
        swift_release(v47);
        nw_txt_record_access_bytes(v30, v46);
        _Block_release(v46);
        swift_beginAccess(v35, &aBlock, 0LL, 0LL);
        unint64_t v48 = v53;
        uint64_t v49 = v54;
        (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v53, v35, v33);
        XPCDictionary.withUnsafeUnderlyingDictionary<A>(_:)(sub_100039C7C, v60, (char *)&type metadata for () + 8);
        swift_unknownObjectRelease(v30);
        (*(void (**)(char *, uint64_t))(v49 + 8))(v48, v33);
        (*(void (**)(char *, uint64_t))(v57 + 8))(v42, v58);
        return swift_release(v45);
      }

      else
      {
        return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v56, v58);
      }
    }
  }

  else
  {
    uint64_t v21 = static os_log_type_t.error.getter(v16);
    return os_log(_:dso:log:_:_:)( v21,  &_mh_execute_header,  qword_1000845F0,  "Not configuring TCP control channel bonjour advertisment as launchd-managed TCP control channels are not enabled",  112LL,  2LL,  &_swiftEmptyArrayStorage);
  }

uint64_t sub_100035D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_projectBox(a3);
  uint64_t v7 = Data.init(bytes:count:)(a1, a2);
  uint64_t v9 = v8;
  swift_beginAccess(v6, v11, 33LL, 0LL);
  XPCDictionary.subscript.setter(v7, v9, 0x726F636552545854LL, 0xE900000000000064LL);
  swift_endAccess(v11);
  return 1LL;
}

uint64_t sub_100035E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  LOBYTE(a3) = v6(a2, a3);
  swift_release(v5);
  return a3 & 1;
}

uint64_t sub_100035E68(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = String.utf8CString.getter(*(void *)(a2 + 24), *(void *)(a2 + 32));
  xpc_set_event("com.apple.bonjour.registration", v3 + 32, a1);
  return swift_release(v3);
}

BOOL sub_100035EBC()
{
  if ((unint64_t)v0 >> 62)
  {
    if (v0 < 0) {
      uint64_t v3 = v0;
    }
    else {
      uint64_t v3 = v0 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v0);
    uint64_t v1 = _CocoaArrayWrapper.endIndex.getter(v3);
    sub_100031D08();
  }

  else
  {
    uint64_t v1 = *(void *)((v0 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  sub_100031D08();
  return v1 != 0;
}

uint64_t sub_100036048()
{
  uint64_t v54 = v1;
  uint64_t v55 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = UUID.uuidString.getter(v5);
  uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for String.Encoding(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  sub_10001DF18();
  static String.Encoding.utf8.getter(v13);
  uint64_t v14 = String.data(using:allowLossyConversion:)(v0, 0LL, v7, v9);
  unint64_t v16 = v15;
  swift_bridgeObjectRelease(v9);
  uint64_t result = sub_100039F00(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  if (v16 >> 60 == 15)
  {
    __break(1u);
  }

  else
  {
    uint64_t v18 = sub_10001B744(v14, v16);
    uint64_t v50 = v4;
    uint64_t v51 = v14;
    unint64_t v48 = v19;
    uint64_t v49 = v18;
    sub_1000155D4(v18, v19);
    nw_txt_record_t dictionary = nw_txt_record_create_dictionary();
    os_log_type_t v21 = static os_log_type_t.debug.getter(dictionary);
    uint64_t v22 = (os_log_s *)qword_1000845F0;
    uint64_t v23 = sub_10001DCE0();
    uint64_t v24 = *(void *)(v23 - 8);
    __chkstk_darwin(v23, v25);
    sub_10000FFCC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v27 - v26, v6, v23);
    if (os_log_type_enabled(v22, v21))
    {
      uint64_t v45 = v22;
      uint64_t v28 = (uint8_t *)sub_1000122E0(12LL);
      uint64_t v46 = sub_1000122E0(32LL);
      v53[0] = v46;
      uint64_t v47 = &v43;
      *(_DWORD *)uint64_t v28 = 136446210;
      uint64_t v44 = v28 + 4;
      sub_100026A28(&qword_1000819D8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter(v23, v29);
      uint64_t v32 = v31;
      sub_100045370(v30, v31, v53);
      uint64_t v52 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v44, v28 + 12);
      swift_bridgeObjectRelease(v32);
      sub_100039EB0();
      sub_100016D10( (void *)&_mh_execute_header,  v45,  v21,  "NetworkControlChannelService: Creating new bonjour advertisment with UUID=%{public}s",  v28);
      uint64_t v34 = v46;
      sub_100012450(v46);
      sub_10001001C(v34);
      sub_10001001C((uint64_t)v28);
    }

    else
    {
      sub_100039EB0();
    }

    uint64_t ObjectType = swift_getObjectType(dictionary);
    uint64_t v36 = static NetworkPairingKeys.identifier.getter(ObjectType);
    UUID.uuidString.getter(v36);
    sub_100039E1C();
    static NetworkPairingKeys.authTag.getter(v37);
    Data.base64EncodedString(options:)(0LL);
    sub_100039ECC();
    sub_100039E1C();
    type metadata accessor for ControlChannelConnectionWireProtocolVersion(0LL);
    uint64_t v38 = (void *)static ControlChannelConnectionWireProtocolVersion.current.getter();
    id v39 = [v38 description];

    static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    static NetworkPairingKeys.wireProtocolVersion.getter();
    sub_100039E1C();
    uint64_t v40 = (void *)((uint64_t (*)(void))static ControlChannelConnectionWireProtocolVersion.minimumSupported.getter)();
    id v41 = [v40 description];

    static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
    static NetworkPairingKeys.minimumSupportedWireProtocolVersion.getter();
    sub_100039E1C();
    ((void (*)(void))static NetworkPairingKeys.flags.getter)();
    v53[0] = ((uint64_t (*)(void))BonjourAdvertFlags.rawValue.getter)();
    unint64_t v42 = sub_100039BDC();
    ((void (*)(void *, unint64_t))BinaryInteger.description.getter)(&type metadata for UInt64, v42);
    sub_100039E1C();
    sub_100039ECC();
    sub_100039ED8(v51);
    return (uint64_t)dictionary;
  }

  return result;
}

void sub_1000364E8()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for String.Encoding(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  sub_10001DF00();
  static String.Encoding.utf8.getter(v8);
  String.data(using:allowLossyConversion:)(v0, 0LL, v4, v2);
  unint64_t v10 = v9;
  swift_bridgeObjectRelease(v2);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v0, v5);
  if (v10 >> 60 != 15)
  {
    __chkstk_darwin(v11, v12);
    __asm { BR              X10 }
  }

  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003ALL,  0x8000000100069620LL,  "remotepairingdeviced/NetworkControlChannelService.swift",  55LL,  2LL,  747LL,  0);
  __break(1u);
  JUMPOUT(0x1000366FCLL);
}

void sub_10003671C()
{
  uint64_t v41 = v1;
  uint64_t v42 = v2;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for XPCDictionary(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  sub_10001DF18();
  uint64_t v7 = (NSString *)String._bridgeToObjectiveC()();
  Class v8 = NSClassFromString(v7);

  if (!v8)
  {
    uint64_t v13 = static os_log_type_t.default.getter(v9);
    uint64_t v14 = qword_1000845F0;
    unint64_t v15 = "Not configuring Bluetooth discovery as CoreBluetooth is not loaded";
    uint64_t v16 = 66LL;
    goto LABEL_8;
  }

  uint64_t IsEnabled = remotePairingIsEnabled(v9);
  if ((_DWORD)IsEnabled)
  {
    uint64_t v11 = ((uint64_t (*)(void))static Defaults.deviceAllowBluetoothDeviceDiscovery.getter)();
    if ((v11 & 1) != 0)
    {
      BOOL v12 = sub_100035EBC();
      if (v12)
      {
        if (!*(void *)(v3 + 184))
        {
          uint64_t v22 = sub_10000FD7C(&qword_100082898);
          uint64_t v23 = sub_100016BCC(v22, 160LL);
          *(_OWORD *)(v23 + swift_weakDestroy(v0 + 16) = xmmword_100062960;
          *(void *)(v23 + 56) = &type metadata for String;
          strcpy((char *)(v23 + 32), "discoveryFlags");
          *(_BYTE *)(v23 + 47) = -18;
          uint64_t v24 = sub_10000FD7C(&qword_1000828A0);
          *(void *)(v23 + 64) = &off_100076380;
          *(void *)(v23 + 88) = v24;
          *(void *)(v23 + 96) = 0x526E616353656C62LL;
          *(void *)(v23 + 104) = 0xEB00000000657461LL;
          *(void *)(v23 + 152) = &type metadata for String;
          *(void *)(v23 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = &type metadata for String;
          *(void *)(v23 + 128) = 0x756F72676B636142LL;
          *(void *)(v23 + 136) = 0xEA0000000000646ELL;
          sub_10000E484(0LL, &qword_1000828A8, &OBJC_CLASS___NSDictionary_ptr);
          uint64_t v25 = ((uint64_t (*)(uint64_t))NSDictionary.init(dictionaryLiteral:))(v23);
          uint64_t v26 = ((uint64_t (*)(uint64_t))XPCDictionary.init(nsDictionary:))(v25);
          __chkstk_darwin(v26, v27);
          v34[2] = 0xD000000000000017LL;
          void v34[3] = 0x80000001000693C0LL;
          XPCDictionary.withUnsafeUnderlyingDictionary<A>(_:)(sub_100039994, v34, (char *)&type metadata for () + 8);
          id v28 = [objc_allocWithZone(CBDiscovery) init];
          [v28 setDiscoveryFlags:33685504];
          id v29 = sub_100039F2C((uint64_t)[v28 setDispatchQueue:*(void *)(v3 + 80)], "setBleScanRate:");
          sub_100039F2C((uint64_t)v29, "setBleScanRateScreenOff:");
          id v39 = sub_1000399AC;
          uint64_t v40 = v3;
          uint64_t v35 = _NSConcreteStackBlock;
          uint64_t v36 = 1107296256LL;
          uint64_t v37 = sub_100036F04;
          uint64_t v38 = &unk_100077D30;
          sub_100039F78();
          sub_100039E74();
          uint64_t v30 = sub_10000FFF8();
          sub_100039E68(v30, "setDeviceFoundHandler:");
          sub_100016BEC();
          id v39 = sub_1000399B4;
          uint64_t v40 = v3;
          uint64_t v35 = _NSConcreteStackBlock;
          uint64_t v36 = 1107296256LL;
          uint64_t v37 = sub_100036F04;
          uint64_t v38 = &unk_100077D58;
          sub_100039F78();
          sub_100039E74();
          uint64_t v31 = sub_10000FFF8();
          sub_100039E68(v31, "setDeviceLostHandler:");
          sub_100016BEC();
          id v39 = sub_100037278;
          uint64_t v40 = 0LL;
          uint64_t v35 = _NSConcreteStackBlock;
          uint64_t v36 = 1107296256LL;
          uint64_t v37 = sub_10003743C;
          uint64_t v38 = &unk_100077D80;
          uint64_t v32 = sub_100039F78();
          sub_100039E68((uint64_t)v32, "activateWithCompletion:");
          sub_100016BEC();
          sub_100039F00(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
          uint64_t v33 = *(void **)(v3 + 184);
          *(void *)(v3 + 184) = v28;

          goto LABEL_9;
        }

        uint64_t v13 = static os_log_type_t.info.getter(v12);
        uint64_t v14 = qword_1000845F0;
        unint64_t v15 = "Bluetooth discovery already configured";
        uint64_t v16 = 38LL;
LABEL_8:
        sub_100012380(v13, (uint64_t)&_mh_execute_header, v14, (uint64_t)v15, v16);
LABEL_9:
        sub_100039DE4();
        return;
      }

      uint64_t v17 = static os_log_type_t.error.getter(v12);
      uint64_t v18 = qword_1000845F0;
      unint64_t v19 = "Not configuring Bluetooth discovery as no hosts are paired";
      uint64_t v20 = 58LL;
    }

    else
    {
      uint64_t v17 = static os_log_type_t.error.getter(v11);
      uint64_t v18 = qword_1000845F0;
      unint64_t v19 = "Not configuring Bluetooth discovery due to deviceAllowBluetoothDeviceDiscovery default value";
      uint64_t v20 = 92LL;
    }
  }

  else
  {
    uint64_t v17 = static os_log_type_t.default.getter(IsEnabled);
    uint64_t v18 = qword_1000845F0;
    unint64_t v19 = "Not configuring Bluetooth discovery due to due to remote pairing support being disabled";
    uint64_t v20 = 87LL;
  }

  sub_100012380(v17, (uint64_t)&_mh_execute_header, v18, (uint64_t)v19, v20);
  xpc_set_event("com.apple.bluetooth.discovery", "remotepairing.bluetooth", 0LL);
  [*(id *)(v3 + 184) invalidate];
  os_log_type_t v21 = *(void **)(v3 + 184);
  *(void *)(v3 + 184) = 0LL;
}

uint64_t sub_100036B78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = String.utf8CString.getter(a2, a3);
  xpc_set_event("com.apple.bluetooth.discovery", v4 + 32, a1);
  return swift_release(v4);
}

uint64_t sub_100036BD0(void *a1, uint64_t a2)
{
  uint64_t result = sub_10002FC7C(a1, (SEL *)&selRef_identifier);
  if (v5)
  {
    uint64_t v6 = result;
    uint64_t v7 = v5;
    int v8 = static os_log_type_t.default.getter(result);
    sub_10000E484(0LL, (unint64_t *)&qword_1000809A0, &OBJC_CLASS___OS_os_log_ptr);
    id v9 = a1;
    unint64_t v10 = (os_log_s *)static OS_os_log.default.getter(v9);
    if (os_log_type_enabled(v10, (os_log_type_t)v8))
    {
      uint64_t v39 = v7;
      int v41 = v8;
      uint64_t v11 = swift_slowAlloc(22LL, -1LL);
      uint64_t v40 = swift_slowAlloc(64LL, -1LL);
      v43[0] = v40;
      *(_DWORD *)uint64_t v11 = 136315394;
      uint64_t v12 = sub_10002FC7C(v9, (SEL *)&selRef_name);
      if (!v13) {
        uint64_t v12 = 0x6E776F6E6B6E553CLL;
      }
      uint64_t v14 = 0xE90000000000003ELL;
      if (v13) {
        uint64_t v15 = v13;
      }
      else {
        uint64_t v15 = 0xE90000000000003ELL;
      }
      sub_100045370(v12, v15, v43);
      uint64_t v42 = v16;
      uint64_t v38 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v11 + 4, v11 + 12);

      swift_bridgeObjectRelease(v15);
      *(_WORD *)(v11 + 12) = 2080;
      uint64_t v17 = sub_100039B7C(v9);
      if (v18 >> 60 == 15)
      {
        uint64_t v19 = 0x6E776F6E6B6E553CLL;
      }

      else
      {
        uint64_t v20 = v17;
        unint64_t v21 = v18;
        uint64_t v22 = type metadata accessor for Data.HexStringEncodingOptions(0LL);
        uint64_t v35 = (uint64_t)&v35;
        uint64_t v37 = a2;
        uint64_t v23 = *(void *)(v22 - 8);
        uint64_t v25 = __chkstk_darwin(v22, v24);
        uint64_t v36 = v6;
        uint64_t v27 = (char *)&v35 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        static Data.HexStringEncodingOptions.bluetoothAddress.getter(v25);
        uint64_t v19 = Data.hexEncodedString(options:)(v27, v20, v21);
        uint64_t v14 = v28;
        sub_100015D58(v20, v21);
        id v29 = *(void (**)(char *, uint64_t))(v23 + 8);
        uint64_t v30 = v27;
        uint64_t v6 = v36;
        a2 = v37;
        v29(v30, v22);
      }

      sub_100045370(v19, v14, v43);
      uint64_t v42 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v38, v11 + 14, v11 + 22);

      swift_bridgeObjectRelease(v14);
      _os_log_impl( (void *)&_mh_execute_header,  v10,  (os_log_type_t)v41,  "Discovered NearbyAction trigger from device (name=%s, address=%s)",  (uint8_t *)v11,  0x16u);
      uint64_t v32 = v40;
      swift_arrayDestroy(v40, 2LL);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);

      uint64_t v7 = v39;
    }

    else
    {
    }

    v43[3] = sub_10000E484(0LL, &qword_1000828B0, &OBJC_CLASS___CBDevice_ptr);
    uint64_t v42 = *(void *)(a2 + 224);
    uint64_t v33 = v42;
    v43[0] = (uint64_t)v9;
    id v34 = v9;
    swift_bridgeObjectRetain(v33);
    sub_10003C190((uint64_t)v43, v6, v7);
    return sub_100033D90(v42);
  }

  return result;
}

void sub_100036F04(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

uint64_t sub_100036F54(void *a1, uint64_t a2)
{
  uint64_t result = sub_10002FC7C(a1, (SEL *)&selRef_identifier);
  if (v5)
  {
    uint64_t v6 = result;
    uint64_t v7 = v5;
    int v8 = static os_log_type_t.default.getter(result);
    sub_10000E484(0LL, (unint64_t *)&qword_1000809A0, &OBJC_CLASS___OS_os_log_ptr);
    id v9 = a1;
    unint64_t v10 = (os_log_s *)static OS_os_log.default.getter(v9);
    if (os_log_type_enabled(v10, (os_log_type_t)v8))
    {
      os_log_t v37 = v10;
      int v39 = v8;
      uint64_t v11 = swift_slowAlloc(22LL, -1LL);
      uint64_t v38 = swift_slowAlloc(64LL, -1LL);
      v41[0] = v38;
      *(_DWORD *)uint64_t v11 = 136315394;
      uint64_t v12 = sub_10002FC7C(v9, (SEL *)&selRef_name);
      if (!v13) {
        uint64_t v12 = 0x6E776F6E6B6E553CLL;
      }
      uint64_t v14 = 0xE90000000000003ELL;
      if (v13) {
        uint64_t v15 = v13;
      }
      else {
        uint64_t v15 = 0xE90000000000003ELL;
      }
      sub_100045370(v12, v15, v41);
      uint64_t v40 = v16;
      uint64_t v36 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41, v11 + 4, v11 + 12);

      swift_bridgeObjectRelease(v15);
      *(_WORD *)(v11 + 12) = 2080;
      uint64_t v17 = sub_100039B7C(v9);
      if (v18 >> 60 == 15)
      {
        uint64_t v19 = 0x6E776F6E6B6E553CLL;
      }

      else
      {
        uint64_t v20 = v17;
        unint64_t v21 = v18;
        uint64_t v22 = type metadata accessor for Data.HexStringEncodingOptions(0LL);
        uint64_t v33 = (uint64_t)&v33;
        uint64_t v35 = a2;
        uint64_t v23 = *(void *)(v22 - 8);
        uint64_t v25 = __chkstk_darwin(v22, v24);
        uint64_t v34 = v6;
        uint64_t v27 = (char *)&v33 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        static Data.HexStringEncodingOptions.bluetoothAddress.getter(v25);
        uint64_t v19 = Data.hexEncodedString(options:)(v27, v20, v21);
        uint64_t v14 = v28;
        sub_100015D58(v20, v21);
        id v29 = *(void (**)(char *, uint64_t))(v23 + 8);
        uint64_t v30 = v27;
        uint64_t v6 = v34;
        a2 = v35;
        v29(v30, v22);
      }

      sub_100045370(v19, v14, v41);
      uint64_t v40 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v36, v11 + 14, v11 + 22);

      swift_bridgeObjectRelease(v14);
      unint64_t v10 = v37;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  (os_log_type_t)v39,  "Lost NearbyAction trigger from device (name=%s, address=%s)",  (uint8_t *)v11,  0x16u);
      uint64_t v32 = v38;
      swift_arrayDestroy(v38, 2LL);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v40 = *(void *)(a2 + 224);
    swift_bridgeObjectRetain(v40);
    sub_100054D44(v41, v6, v7);
    sub_100039B44((uint64_t)v41, &qword_100081598);
    sub_100033D90(v40);
    return swift_bridgeObjectRelease(v7);
  }

  return result;
}

uint64_t sub_100037278(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = swift_errorRetain(a1);
    os_log_type_t v3 = static os_log_type_t.error.getter(v2);
    uint64_t v4 = (os_log_s *)qword_1000845F0;
    os_log_type_t v5 = v3;
    if (os_log_type_enabled((os_log_t)qword_1000845F0, v3))
    {
      swift_errorRetain(a1);
      swift_errorRetain(a1);
      uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v7 = swift_slowAlloc(32LL, -1LL);
      uint64_t v17 = v7;
      *(_DWORD *)uint64_t v6 = 136315138;
      swift_getErrorValue(a1, v16, v15);
      uint64_t v8 = Error.localizedDescription.getter(v15[1], v15[2]);
      uint64_t v10 = v9;
      sub_100045370(v8, v9, &v17);
      uint64_t v14 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, v15, v6 + 4, v6 + 12);
      swift_bridgeObjectRelease(v10);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Bluetooth discovery activation failed: %s", v6, 0xCu);
      swift_arrayDestroy(v7, 1LL);
      swift_slowDealloc(v7, -1LL, -1LL);
      swift_slowDealloc(v6, -1LL, -1LL);
      return swift_errorRelease(a1);
    }

    else
    {
      return swift_errorRelease(a1);
    }
  }

  else
  {
    uint64_t v13 = static os_log_type_t.default.getter(0LL);
    return os_log(_:dso:log:_:_:)( v13,  &_mh_execute_header,  qword_1000845F0,  "Bluetooth discovery activated",  29LL,  2LL,  &_swiftEmptyArrayStorage);
  }

void sub_10003743C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void *))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4(a2);
  swift_release(v3);
}

void sub_100037490(uint64_t a1)
{
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  sub_100012380( v2,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"Bluetooth discovery activating WiFi keep alive and on-demand listener",  69LL);
  uint64_t v3 = *(void *)(v1 + 192);
  uint64_t v4 = v3;
  if (!v3)
  {
    uint64_t v5 = type metadata accessor for WiFiKeepAlive();
    swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
    unint64_t v6 = sub_100039E84();
    uint64_t v4 = WiFiKeepAlive.init(reason:)(v6);
  }

  *(void *)(v1 + 192) = v4;
  swift_retain(v3);
  sub_100012464();
  uint64_t v7 = (__CFString *)sub_100039EF4();
  uint64_t v8 = (__CFString *)sub_100039EF4();
  sub_100039E84();
  uint64_t v9 = (__CFString *)String._bridgeToObjectiveC()();
  sub_100016B48(v1 + 200, (uint64_t)&v23, 33LL);
  IOReturn v10 = IOPMAssertionCreateWithDescription(v7, v8, v9, 0LL, 0LL, 0.0, 0LL, (IOPMAssertionID *)(v1 + 200));
  swift_endAccess(&v23);

  if (v10)
  {
    os_log_type_t v12 = static os_log_type_t.error.getter(v11);
    if (sub_100039E30(v12))
    {
      uint64_t v13 = (float *)sub_1000122E0(8LL);
      sub_100039E50(v13, 1.5047e-36);
      IOReturn v23 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v14, v15);
      sub_100039E44( (void *)&_mh_execute_header,  (os_log_s *)v7,  (os_log_type_t)v8,  "Failed to create power assertion for NearbyAction: %d");
      sub_10001001C((uint64_t)v13);
    }
  }

  sub_10000FD7C((uint64_t *)&unk_1000835C0);
  sub_100012280();
  __chkstk_darwin(v16, v17);
  sub_10000FFCC();
  uint64_t v20 = v19 - v18;
  UUID.init()(v21);
  uint64_t v22 = sub_10001DCE0();
  sub_10001D930(v20, 0LL, 1LL, v22);
  sub_100037800();
  sub_100039B44(v20, (uint64_t *)&unk_1000835C0);
}

void sub_100037694(uint64_t a1)
{
  uint64_t v3 = static os_log_type_t.default.getter(a1);
  sub_100012380( v3,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"Bluetooth discovery disabling WiFi keep alive and on-demand listener",  68LL);
  *(void *)(v1 + 192) = 0LL;
  swift_release();
  sub_10003773C();
  sub_10000FD7C((uint64_t *)&unk_1000835C0);
  sub_100012280();
  __chkstk_darwin(v4, v5);
  sub_100026C8C();
  uint64_t v6 = sub_10001DCE0();
  sub_10001D930(v2, 1LL, 1LL, v6);
  sub_100037800();
  sub_100039B44(v2, (uint64_t *)&unk_1000835C0);
  sub_100020484();
}

uint64_t sub_10003773C()
{
  uint64_t v2 = (_DWORD *)(v0 + 200);
  sub_100016B48(v0 + 200, (uint64_t)v11, 1LL);
  uint64_t result = *(unsigned int *)(v0 + 200);
  if ((_DWORD)result)
  {
    uint64_t result = IOPMAssertionRelease(result);
    if ((_DWORD)result)
    {
      int v4 = result;
      os_log_type_t v5 = static os_log_type_t.error.getter(result);
      uint64_t v6 = (os_log_s *)qword_1000845F0;
      uint64_t result = sub_100039E00(v5);
      if ((_DWORD)result)
      {
        uint64_t v7 = (float *)sub_1000122E0(8LL);
        sub_100039E50(v7, 1.5047e-36);
        int v10 = v4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, v11, v8, v9);
        sub_100039E44((void *)&_mh_execute_header, v6, v1, "Failed to release power assertion for NearbyAction: %d");
        uint64_t result = sub_10001001C((uint64_t)v7);
      }
    }

    *uint64_t v2 = 0;
  }

  return result;
}

void sub_100037800()
{
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for BonjourService(0LL);
  uint64_t v58 = *(void *)(v6 - 8);
  uint64_t v59 = v6;
  __chkstk_darwin(v6, v7);
  sub_10000FFCC();
  uint64_t v57 = v9 - v8;
  uint64_t v10 = type metadata accessor for BonjourAdvertFlags(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  sub_10001DF00();
  uint64_t v13 = *(nw_listener **)(v3 + 208);
  if (v13)
  {
    nw_listener_cancel(v13);
    uint64_t v14 = *(void *)(v3 + 208);
    *(void *)(v3 + 208) = 0LL;
    swift_unknownObjectRelease(v14);
  }

  uint64_t v15 = sub_10001DCE0();
  uint64_t v60 = &v53;
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  sub_10000FFCC();
  uint64_t v20 = v19 - v18;
  sub_10000FD7C((uint64_t *)&unk_1000835C0);
  sub_100012280();
  __chkstk_darwin(v21, v22);
  sub_10001DF18();
  sub_10001DA98(v5, v1);
  if (sub_10001D9C8(v1, 1LL, v15) == 1)
  {
    sub_100039B44(v1, (uint64_t *)&unk_1000835C0);
    goto LABEL_15;
  }

  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v20, v1, v15);
  static BonjourAdvertFlags.onDemand.getter(v23);
  int v24 = (nw_txt_record *)sub_100036048();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v2, v10);
  if (!v24)
  {
LABEL_13:
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v20, v15);
    goto LABEL_15;
  }

  uint64_t v25 = sub_100033DBC();
  nw_parameters_set_no_wake_from_sleep(v25, 1LL);
  id v26 = [(id)objc_opt_self(WiFiP2PAWDLState) currentState];
  if (v26)
  {
    uint64_t v27 = v26;
    unsigned int v28 = [v26 supportsDataTransfer];

    if (v28)
    {
      uint64_t v30 = static os_log_type_t.debug.getter(v29);
      sub_100012380( v30,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"Enabling peer-to-peer connectivity on on-demand network control channel listener",  80LL);
      nw_parameters_set_include_peer_to_peer(v25, 1);
    }
  }

  uint64_t v31 = nw_listener_create(v25);
  if (!v31)
  {
    uint64_t v51 = static os_log_type_t.error.getter(0LL);
    sub_100012380( v51,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"Unable to create network listener for Bluetooth discovery",  57LL);
    swift_unknownObjectRelease(v25);
    swift_unknownObjectRelease(v24);
    goto LABEL_13;
  }

  nw_listener_t v53 = v31;
  uint64_t v54 = v15;
  uint64_t v55 = v25;
  nw_txt_record_t v56 = v24;
  uint64_t v32 = UUID.uuidString.getter(v31);
  uint64_t v34 = v33;
  uint64_t v35 = v57;
  uint64_t v36 = v58;
  uint64_t v37 = v59;
  uint64_t v38 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v58 + 104))( v57,  enum case for BonjourService.default(_:),  v59);
  uint64_t v39 = BonjourService.rawValue.getter(v38);
  uint64_t v41 = v40;
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
  uint64_t v42 = String.utf8CString.getter(v32, v34);
  swift_bridgeObjectRelease(v34);
  uint64_t v43 = String.utf8CString.getter(v39, v41);
  sub_10001DD38();
  bonjour_service = nw_advertise_descriptor_create_bonjour_service( (const char *)(v42 + 32),  (const char *)(v43 + 32),  0LL);
  swift_release();
  uint64_t v45 = swift_release();
  if (bonjour_service)
  {
    nw_txt_record_t v46 = v56;
    nw_advertise_descriptor_set_txt_record_object(bonjour_service, v56);
    uint64_t v47 = v53;
    nw_listener_set_advertise_descriptor(v53, bonjour_service);
    uint64_t v63 = sub_100037C74;
    uint64_t v64 = 0LL;
    uint64_t v61 = _NSConcreteStackBlock;
    uint64_t v62 = 1107296256LL;
    unint64_t v48 = sub_100039F6C((uint64_t)sub_100032268);
    nw_listener_set_state_changed_handler(v47, v48);
    _Block_release(v48);
    uint64_t v63 = sub_10003990C;
    uint64_t v64 = v3;
    uint64_t v61 = _NSConcreteStackBlock;
    uint64_t v62 = 1107296256LL;
    uint64_t v49 = sub_100039F6C((uint64_t)sub_100040730);
    swift_retain(v3);
    sub_10000FFF8();
    nw_listener_set_new_connection_handler(v47, v49);
    _Block_release(v49);
    nw_listener_set_queue(v47, *(dispatch_queue_t *)(v3 + 80));
    nw_listener_start(v47);
    swift_unknownObjectRelease(v55);
    swift_unknownObjectRelease(v46);
    swift_unknownObjectRelease(bonjour_service);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v20, v54);
    uint64_t v50 = *(void *)(v3 + 208);
    *(void *)(v3 + 208) = v47;
    swift_unknownObjectRelease(v50);
  }

  else
  {
    uint64_t v52 = static os_log_type_t.error.getter(v45);
    sub_100012380( v52,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"Unable to create network listener service for Bluetooth discovery",  65LL);
    swift_unknownObjectRelease(v55);
    swift_unknownObjectRelease(v56);
    swift_unknownObjectRelease(v53);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v20, v54);
  }

LABEL_15:
  sub_100039DE4();
}

uint64_t sub_100037C74(uint64_t a1, void *a2)
{
  int v3 = a1;
  os_log_type_t v4 = static os_log_type_t.default.getter(a1);
  uint64_t v5 = (os_log_s *)qword_1000845F0;
  uint64_t result = os_log_type_enabled((os_log_t)qword_1000845F0, v4);
  if ((_DWORD)result)
  {
    swift_unknownObjectRetain_n(a2, 2LL);
    uint64_t v7 = swift_slowAlloc(18LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v8;
    *(_DWORD *)uint64_t v7 = 67109378;
    LODWORD(v14) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, (char *)&v14 + 4, v7 + 4, v7 + 8);
    *(_WORD *)(v7 + 8) = 2080;
    if (a2)
    {
      id v9 = [a2 description];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      uint64_t v12 = v11;
    }

    else
    {
      uint64_t v12 = 0xE600000000000000LL;
      uint64_t v10 = 0x29656E6F6E28LL;
    }

    sub_100045370(v10, v12, &v15);
    uint64_t v14 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v7 + 10, v7 + 18);
    swift_unknownObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease(v12);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v4,  "Bluetooth discovery bonjour listener state changed: %u, error: %s",  (uint8_t *)v7,  0x12u);
    swift_arrayDestroy(v8, 1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
    return swift_slowDealloc(v7, -1LL, -1LL);
  }

  return result;
}

uint64_t sub_100037E1C(nw_connection *a1, uint64_t a2)
{
  return sub_1000380D0(1, a2, a1, a2);
}

void sub_100037E58(char a1, nw_connection_t connection)
{
  if ((a1 & 1) != 0) {
    sub_10003865C();
  }
  else {
    nw_connection_cancel(connection);
  }
}

uint64_t sub_100037E90(char a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject(&unk_100077DE0, 32LL, 7LL);
  *(_DWORD *)(v8 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v8 + 24) = a4;
  swift_retain(a4);
  OS_dispatch_queue.assertOnQueueHierarchy()();
  swift_beginAccess(a2 + 48, v25, 0LL, 0LL);
  uint64_t v9 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain(v9);
  uint64_t v11 = sub_10004F824(v10);
  uint64_t v12 = swift_bridgeObjectRelease(v9);
  if (v11 > 39)
  {
    os_log_type_t v15 = static os_log_type_t.error.getter(v12);
    uint64_t v16 = (os_log_s *)qword_1000845F0;
    os_log_type_t v17 = v15;
    if (os_log_type_enabled((os_log_t)qword_1000845F0, v15))
    {
      swift_retain(a2);
      uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v18 = 134217984;
      uint64_t v19 = *(void *)(a2 + 48);
      swift_bridgeObjectRetain(v19);
      uint64_t v21 = sub_10004F824(v20);
      swift_bridgeObjectRelease(v19);
      uint64_t v24 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v18 + 4, v18 + 12);
      swift_release();
      _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "Rejecting incoming TCP connection as we already have %ld TCP peers",  v18,  0xCu);
      swift_slowDealloc(v18, -1LL, -1LL);
    }
  }

  else
  {
    uint64_t IsEnabled = remotePairingIsEnabled(v12);
    if ((IsEnabled & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 216) & 1) == 0)
      {
        swift_retain(a2);
        swift_retain(v8);
        sub_100035498(a2, a1 & 1, a2, (uint64_t)sub_100039C94, v8);
        goto LABEL_9;
      }

      uint64_t v14 = static os_log_type_t.error.getter(IsEnabled);
      os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  qword_1000845F0,  "Rejecting TCP control channel connection as service is shutting down",  68LL,  2LL,  &_swiftEmptyArrayStorage);
    }

    else
    {
      uint64_t v22 = static os_log_type_t.error.getter(IsEnabled);
      os_log(_:dso:log:_:_:)( v22,  &_mh_execute_header,  qword_1000845F0,  "Rejecting TCP control channel connection due to remotepairing support being disabled",  84LL,  2LL,  &_swiftEmptyArrayStorage);
    }
  }

  sub_100034FC0(0, a3);
LABEL_9:
  swift_release();
  return swift_release();
}

uint64_t sub_1000380D0(char a1, uint64_t a2, nw_connection *a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject(&unk_100077C28, 32LL, 7LL);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v8 + 24) = a4;
  swift_unknownObjectRetain(a3);
  swift_retain(a4);
  OS_dispatch_queue.assertOnQueueHierarchy()();
  swift_beginAccess(a2 + 48, v25, 0LL, 0LL);
  uint64_t v9 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain(v9);
  uint64_t v11 = sub_10004F824(v10);
  uint64_t v12 = swift_bridgeObjectRelease(v9);
  if (v11 > 39)
  {
    os_log_type_t v15 = static os_log_type_t.error.getter(v12);
    uint64_t v16 = (os_log_s *)qword_1000845F0;
    os_log_type_t v17 = v15;
    if (os_log_type_enabled((os_log_t)qword_1000845F0, v15))
    {
      swift_retain(a2);
      uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v18 = 134217984;
      uint64_t v19 = *(void *)(a2 + 48);
      swift_bridgeObjectRetain(v19);
      uint64_t v21 = sub_10004F824(v20);
      swift_bridgeObjectRelease(v19);
      uint64_t v24 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v18 + 4, v18 + 12);
      swift_release();
      _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "Rejecting incoming TCP connection as we already have %ld TCP peers",  v18,  0xCu);
      swift_slowDealloc(v18, -1LL, -1LL);
    }
  }

  else
  {
    uint64_t IsEnabled = remotePairingIsEnabled(v12);
    if ((IsEnabled & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 216) & 1) == 0)
      {
        swift_retain(a2);
        swift_retain(v8);
        sub_100035498(a2, a1 & 1, a2, (uint64_t)sub_100039928, v8);
        goto LABEL_9;
      }

      uint64_t v14 = static os_log_type_t.error.getter(IsEnabled);
      os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  qword_1000845F0,  "Rejecting TCP control channel connection as service is shutting down",  68LL,  2LL,  &_swiftEmptyArrayStorage);
    }

    else
    {
      uint64_t v22 = static os_log_type_t.error.getter(IsEnabled);
      os_log(_:dso:log:_:_:)( v22,  &_mh_execute_header,  qword_1000845F0,  "Rejecting TCP control channel connection due to remotepairing support being disabled",  84LL,  2LL,  &_swiftEmptyArrayStorage);
    }
  }

  nw_connection_cancel(a3);
LABEL_9:
  swift_unknownObjectRelease(a3);
  swift_release();
  return swift_release();
}

uint64_t sub_100038314(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((a2 & 1) != 0 || (a1 & 1) != 0)
  {
    uint64_t v34 = *(void *)(a3 + 80);
    uint64_t v22 = swift_allocObject(&unk_100077CF0, 32LL, 7LL);
    *(void *)(v22 + swift_weakDestroy(v0 + 16) = a4;
    *(void *)(v22 + 24) = a5;
    uint64_t v40 = (void (*)())sub_100039DE0;
    uint64_t v41 = v22;
    aBlock = _NSConcreteStackBlock;
    uint64_t v37 = 1107296256LL;
    uint64_t v38 = sub_100040708;
    uint64_t v39 = &unk_100077D08;
    uint64_t v10 = _Block_copy(&aBlock);
    uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
    uint64_t v33 = &v32;
    uint64_t v12 = *(void *)(v11 - 8);
    __chkstk_darwin(v11, v23);
    os_log_type_t v15 = (char *)&v32 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v25 = swift_retain(a5);
    static DispatchQoS.unspecified.getter(v25);
    uint64_t v17 = type metadata accessor for DispatchWorkItemFlags(0LL);
    uint64_t v32 = (uint64_t)&v32;
    uint64_t v18 = *(void *)(v17 - 8);
    __chkstk_darwin(v17, &type metadata accessor for DispatchWorkItemFlags);
    uint64_t v21 = (char *)&v32 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v35 = &_swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v8 = static os_log_type_t.error.getter(a1);
    os_log(_:dso:log:_:_:)( v8,  &_mh_execute_header,  qword_1000845F0,  "Rejecting TCP control channel connection from launchd-managed socket as launchd-managed TCP control channels are not enabled",  124LL,  2LL,  &_swiftEmptyArrayStorage);
    uint64_t v34 = *(void *)(a3 + 80);
    uint64_t v9 = swift_allocObject(&unk_100077CA0, 32LL, 7LL);
    *(void *)(v9 + swift_weakDestroy(v0 + 16) = a4;
    *(void *)(v9 + 24) = a5;
    uint64_t v40 = sub_100039974;
    uint64_t v41 = v9;
    aBlock = _NSConcreteStackBlock;
    uint64_t v37 = 1107296256LL;
    uint64_t v38 = sub_100040708;
    uint64_t v39 = &unk_100077CB8;
    uint64_t v10 = _Block_copy(&aBlock);
    uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
    uint64_t v33 = &v32;
    uint64_t v12 = *(void *)(v11 - 8);
    __chkstk_darwin(v11, v13);
    os_log_type_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v16 = swift_retain(a5);
    static DispatchQoS.unspecified.getter(v16);
    uint64_t v17 = type metadata accessor for DispatchWorkItemFlags(0LL);
    uint64_t v32 = (uint64_t)&v32;
    uint64_t v18 = *(void *)(v17 - 8);
    __chkstk_darwin(v17, &type metadata accessor for DispatchWorkItemFlags);
    uint64_t v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v35 = &_swiftEmptyArrayStorage;
  }

  sub_100026A28((unint64_t *)&qword_1000813C0, v19);
  uint64_t v28 = v27;
  uint64_t v29 = sub_10000FD7C(&qword_100081100);
  sub_100029EA0((unint64_t *)&qword_1000813D0, &qword_100081100);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v29, v30, v17, v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v21, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  return swift_release();
}

void sub_10003865C()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for ControlChannelConnection.Options(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  sub_10000FFCC();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for ControlChannelConnection.Options.Device(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v34 = v10;
  __chkstk_darwin(v9, v11);
  sub_100016C88();
  uint64_t v32 = *(void **)(v0 + 80);
  OS_dispatch_queue.assertOnQueueHierarchy()();
  uint64_t v33 = v1;
  ControlChannelConnection.Options.Device.init(allowsPairSetup:allowsPinlessPairing:allowsIncomingTunnelConnections:allowsPromptlessAutomationPairingUpgrade:allowsSharingSensitiveInfo:)( 0LL,  0LL,  1LL,  0LL,  1LL);
  uint64_t v12 = type metadata accessor for NWObjcConnectionControlChannelTransport();
  sub_100016BCC(v12, 42LL);
  uint64_t v13 = sub_100039F38();
  uint64_t v14 = sub_100032500(v13);
  uint64_t v37 = v12;
  sub_100026A28( (unint64_t *)&unk_1000824B0,  (uint64_t (*)(uint64_t))type metadata accessor for NWObjcConnectionControlChannelTransport);
  uint64_t v38 = v15;
  v36[0] = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8, v1, v9);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))( v8,  enum case for ControlChannelConnection.Options.device(_:),  v3);
  uint64_t v16 = *(void *)(v0 + 136);
  v35[3] = type metadata accessor for SystemKeychainPairingManager();
  sub_100026A28( &qword_100080F98,  (uint64_t (*)(uint64_t))type metadata accessor for SystemKeychainPairingManager);
  void v35[4] = v17;
  v35[0] = v16;
  uint64_t v18 = sub_10000FF78();
  swift_retain(v14);
  id v19 = v32;
  uint64_t v20 = sub_10000FFDC();
  uint64_t v21 = static ControlChannelConnection.defaultMaxReconnectionAttempts.getter(v20);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  uint64_t v22 = ControlChannelConnection.init(transport:queue:options:maxReconnectionAttempts:pairingDataStorageProvider:peerWireProtocolVersion:)( v36,  v19,  v8,  v21,  v35,  0LL);
  uint64_t v23 = *(void *)(v2 + 128);
  uint64_t v37 = type metadata accessor for MetadataService(0LL);
  sub_100026A28(&qword_100082880, type metadata accessor for MetadataService);
  uint64_t v38 = v24;
  v36[0] = v23;
  sub_10000FFDC();
  dispatch thunk of ControlChannelConnection.customDeviceMetadataProvider.setter(v36);
  sub_10001D75C(v2 + 144, (uint64_t)v36);
  dispatch thunk of ControlChannelConnection.tunnelListenerCreator.setter(v36);
  sub_100016B48(v2 + 48, (uint64_t)v36, 33LL);
  sub_10000FFC4();
  sub_100052210();
  swift_endAccess(v36);
  sub_100012464();
  sub_100033C2C();
  uint64_t v25 = sub_10000FF6C((uint64_t)&unk_100077B38);
  sub_100039E10(v25);
  uint64_t v26 = sub_10000FF6C((uint64_t)&unk_100077B60);
  sub_100039EE8(v26);
  uint64_t v27 = sub_100016BCC((uint64_t)&unk_100077B88, 32LL);
  *(void *)(v27 + swift_weakDestroy(v0 + 16) = v25;
  *(void *)(v27 + 24) = v26;
  swift_retain(v25);
  swift_retain(v26);
  dispatch thunk of ControlChannelConnection.invalidationHandler.setter(sub_1000398D4, v27);
  swift_release();
  swift_release();
  uint64_t v28 = sub_10000FF6C((uint64_t)&unk_100077B38);
  sub_100039E10(v28);
  uint64_t v29 = sub_10000FF6C((uint64_t)&unk_100077B60);
  sub_100039EE8(v29);
  uint64_t v30 = sub_100016BCC((uint64_t)&unk_100077BB0, 32LL);
  *(void *)(v30 + swift_weakDestroy(v0 + 16) = v29;
  *(void *)(v30 + 24) = v28;
  swift_retain(v29);
  swift_retain(v28);
  dispatch thunk of ControlChannelConnection._connectionSetupCompleteHandler.setter(sub_1000398EC, v30);
  swift_release();
  swift_release();
  uint64_t v31 = *sub_100039F14();
  sub_10000FFC4();
  sub_100046474(0xD00000000000002ELL, 0x8000000100068E70LL, v31, v22);
  swift_release();
  sub_10000FFF8();
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v9);
  sub_10000FF80();
}

void sub_1000389E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ControlChannelConnectionError.Code(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v60 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v9);
  uint64_t v59 = (char *)&v56 - v10;
  uint64_t v11 = type metadata accessor for ControlChannelConnectionError(0LL);
  uint64_t v61 = *(void *)(v11 - 8);
  uint64_t v62 = v11;
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v56 - v17;
  uint64_t v19 = type metadata accessor for RemotePairingError(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  uint64_t v23 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = sub_10000FD7C(&qword_100082888);
  __chkstk_darwin(v24, v25);
  uint64_t v27 = (uint64_t *)((char *)&v56 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  a1 += 16LL;
  swift_beginAccess(a1, v67, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    uint64_t v29 = Strong;
    uint64_t v58 = v5;
    uint64_t v30 = a2 + 16;
    swift_beginAccess(v30, v66, 0LL, 0LL);
    uint64_t v31 = swift_weakLoadStrong(v30);
    if (!v31) {
      goto LABEL_12;
    }
    uint64_t v32 = v31;
    swift_beginAccess(v29 + 48, v65, 33LL, 0LL);
    sub_100053FB8(v32);
    swift_endAccess(v65);
    swift_release();
    uint64_t v33 = sub_100033C2C();
    dispatch thunk of ControlChannelConnection.invalidationReason.getter(v33);
    uint64_t v34 = type metadata accessor for ControlChannelConnection.InvalidationReason(0LL);
    if (sub_10001D9C8((uint64_t)v27, 1LL, v34) == 1)
    {
      swift_release();
      swift_release();
      sub_100039B44((uint64_t)v27, &qword_100082888);
      return;
    }

    uint64_t v57 = v4;
    uint64_t v35 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(void *, uint64_t))(v35 + 88))(v27, v34) == enum case for ControlChannelConnection.InvalidationReason.internalError(_:))
    {
      (*(void (**)(void *, uint64_t))(v35 + 96))(v27, v34);
      uint64_t v36 = *v27;
      swift_errorRetain(*v27);
      sub_100026A28( (unint64_t *)&unk_1000813E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
      uint64_t v38 = v37;
      static Error<>.networkingError.getter(v19, v37);
      char v39 = static _Error.~= infix(_:_:)(v23, v36, v19, v38);
      swift_errorRelease(v36);
      uint64_t v40 = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
      if ((v39 & 1) != 0)
      {
LABEL_11:
        uint64_t v55 = static os_log_type_t.default.getter(v40);
        os_log(_:dso:log:_:_:)( v55,  &_mh_execute_header,  qword_1000845F0,  "Rolling bonjour advert after host disconnected",  46LL,  2LL,  &_swiftEmptyArrayStorage);
        sub_10003584C();
        swift_errorRelease(v36);
        swift_release();
LABEL_12:
        swift_release();
        return;
      }

      v65[0] = v36;
      swift_errorRetain(v36);
      uint64_t v41 = sub_10000FD7C(&qword_100081A10);
      uint64_t v42 = v62;
      if (swift_dynamicCast(v18, v65, v41, v62, 0LL))
      {
        uint64_t v43 = (*(uint64_t (**)(char *, char *, uint64_t))(v61 + 32))(v15, v18, v42);
        uint64_t v44 = v59;
        ControlChannelConnectionError.code.getter(v43);
        uint64_t v46 = v57;
        uint64_t v45 = v58;
        uint64_t v47 = *(void (**)(char *, void, uint64_t))(v58 + 104);
        uint64_t v56 = v36;
        unint64_t v48 = v60;
        v47(v60, enum case for ControlChannelConnectionError.Code.transportError(_:), v57);
        sub_100026A28( &qword_100082890,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnectionError.Code);
        uint64_t v50 = v49;
        dispatch thunk of RawRepresentable.rawValue.getter(&v64, v46, v49);
        dispatch thunk of RawRepresentable.rawValue.getter(&v63, v46, v50);
        uint64_t v52 = v63;
        uint64_t v51 = v64;
        nw_listener_t v53 = *(void (**)(char *, uint64_t))(v45 + 8);
        uint64_t v54 = v48;
        uint64_t v36 = v56;
        v53(v54, v46);
        v53(v44, v46);
        (*(void (**)(char *, uint64_t))(v61 + 8))(v15, v42);
        if (v51 == v52)
        {
          uint64_t v40 = swift_errorRelease(v65[0]);
          goto LABEL_11;
        }
      }

      swift_release();
      swift_release();
      swift_errorRelease(v36);
      swift_errorRelease(v65[0]);
    }

    else
    {
      swift_release();
      swift_release();
      (*(void (**)(void *, uint64_t))(v35 + 8))(v27, v34);
    }
  }

uint64_t sub_100038E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ControlChannelConnection.InvalidationReason(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  a1 += 16LL;
  swift_beginAccess(a1, v16, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1);
  if (result)
  {
    uint64_t v10 = a2 + 16;
    swift_beginAccess(v10, v15, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v10);
    if (Strong)
    {
      uint64_t v12 = dispatch thunk of ControlChannelConnection.resolvedIdentity.getter(Strong);
      if (v12)
      {
        uint64_t v13 = (void *)v12;
        sub_10004FAD4();
        if ((v14 & 1) == 0)
        {
          (*(void (**)(_BYTE *, void, uint64_t))(v5 + 104))( v8,  enum case for ControlChannelConnection.InvalidationReason.peerUnpaired(_:),  v4);
          dispatch thunk of ControlChannelConnection.invalidate(for:)(v8);

          swift_release();
          swift_release();
          return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
        }
      }

      swift_release();
    }

    return swift_release();
  }

  return result;
}

void sub_100038FE4(uint64_t a1)
{
}

uint64_t sub_100039000(int a1)
{
  uint64_t v2 = sub_1000122E0(128LL);
  socklen_t v34 = 128;
  uint64_t v3 = getsockname(a1, (sockaddr *)v2, &v34);
  if ((_DWORD)v3)
  {
    int v4 = v3;
    os_log_type_t v5 = static os_log_type_t.error.getter(v3);
    uint64_t v6 = (os_log_s *)qword_1000845F0;
    if (!sub_100039E00(v5))
    {
LABEL_5:
      sub_10001001C(v2);
      unsigned int v14 = 0;
      int v15 = 1;
      return v14 | (v15 << 16);
    }

    uint64_t v7 = (float *)sub_1000122E0(8LL);
    uint64_t v8 = sub_100039E50(v7, 1.5047e-36);
    int v33 = v4;
    sub_100039EE0((uint64_t)v8, (uint64_t)&v34, v9, v10, v11, v12);
    sub_100039E44( (void *)&_mh_execute_header,  v6,  (os_log_type_t)0x80u,  "Unable to resolve port for listening socket. getsockname returned %d");
    uint64_t v13 = (uint64_t)v7;
LABEL_4:
    sub_10001001C(v13);
    goto LABEL_5;
  }

  int v16 = *(unsigned __int8 *)(v2 + 1);
  if (v16 != 30 && v16 != 2)
  {
    os_log_type_t v27 = static os_log_type_t.error.getter(v3);
    uint64_t v28 = (os_log_s *)qword_1000845F0;
    if (!sub_100039E00(v27)) {
      goto LABEL_5;
    }
    uint64_t v30 = (uint8_t *)sub_1000122E0(5LL);
    *(_DWORD *)uint64_t v30 = 16777472;
    LOBYTE(v33) = *(_BYTE *)(v2 + 1);
    sub_100039EE0((uint64_t)v30, (uint64_t)&v33 + 1, (uint64_t)(v30 + 4), (uint64_t)(v30 + 5), v31, v32);
    _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)0x80u, "Unknown socket family %hhu", v30, 5u);
    uint64_t v13 = (uint64_t)v30;
    goto LABEL_4;
  }

  unsigned int v14 = bswap32(*(unsigned __int16 *)(v2 + 2)) >> 16;
  os_log_type_t v18 = static os_log_type_t.default.getter(v3);
  uint64_t v19 = (os_log_s *)qword_1000845F0;
  if (sub_100039E00(v18))
  {
    uint64_t v20 = (float *)sub_1000122E0(6LL);
    uint64_t v21 = sub_100039E50(v20, 9.4042e-38);
    LOWORD(v33) = v14;
    sub_100039EE0((uint64_t)v21, (uint64_t)&v33 + 2, v22, v23, v24, v25);
    _os_log_impl( (void *)&_mh_execute_header,  v19,  (os_log_type_t)0x80u,  "Resolved listening port for network control channel service: %hu",  (uint8_t *)v20,  6u);
    sub_10001001C((uint64_t)v20);
  }

  sub_10001001C(v2);
  int v15 = 0;
  return v14 | (v15 << 16);
}

uint64_t sub_100039210()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_bridgeObjectRelease(*(void *)(v0 + 64));

  sub_10000FF38((void *)(v0 + 88));
  swift_release();
  swift_release();
  sub_10000FF38((void *)(v0 + 144));

  swift_release();
  swift_unknownObjectRelease(*(void *)(v0 + 208));
  swift_bridgeObjectRelease(*(void *)(v0 + 224));
  return v0;
}

uint64_t sub_100039298()
{
  return swift_deallocClassInstance(v0, 232LL, 7LL);
}

uint64_t type metadata accessor for NetworkControlChannelService()
{
  return objc_opt_self(&OBJC_CLASS____TtC20remotepairingdeviced28NetworkControlChannelService);
}

void sub_1000392D8(os_log_s *a1)
{
  uint64_t v2 = a1;
  os_log_type_t v3 = static os_log_type_t.default.getter(a1);
  if (os_log_type_enabled(v2, v3))
  {
    sub_10000FFDC();
    uint64_t v4 = sub_1000122E0(18LL);
    *(_DWORD *)uint64_t v4 = 67109376;
    LODWORD(v46) = *(void *)(v1 + 184) != 0LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, (char *)&v46 + 4, v4 + 4, v4 + 8);
    *(_WORD *)(v4 + 8) = 2048;
    sub_100016B48(v1 + 48, (uint64_t)v42, 0LL);
    swift_bridgeObjectRetain(*(void *)(v1 + 48));
    uint64_t v6 = sub_10004F824(v5);
    sub_10001DD38();
    uint64_t v46 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v4 + 10, v4 + 18);
    sub_100012464();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "NetworkControlChannelService state: ble enabled = %{BOOL}d, connection count = %ld",  (uint8_t *)v4,  0x12u);
    sub_10001001C(v4);
  }

  sub_100016B48(v1 + 48, (uint64_t)v45, 0LL);
  uint64_t v7 = *(void *)(v1 + 48);
  if ((v7 & 0xC000000000000001LL) != 0)
  {
    if (v7 < 0) {
      uint64_t v8 = *(void *)(v1 + 48);
    }
    else {
      uint64_t v8 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v7);
    uint64_t v9 = __CocoaSet.makeIterator()(v8);
    uint64_t v10 = sub_10000FF78();
    sub_100026A28( &qword_100082090,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
    uint64_t v12 = Set.Iterator.init(_cocoa:)(v9, v10, v11);
    uint64_t v7 = v46;
    uint64_t v41 = v47[0];
    uint64_t v13 = v47[1];
    int64_t v14 = v47[2];
    unint64_t v15 = v47[3];
  }

  else
  {
    uint64_t v41 = v7 + 56;
    uint64_t v13 = ~(-1LL << *(_BYTE *)(v7 + 32));
    sub_10000FFE4();
    unint64_t v15 = v16 & v17;
    swift_bridgeObjectRetain(v7);
    int64_t v14 = 0LL;
  }

  int64_t v40 = (unint64_t)(v13 + 64) >> 6;
  if (v7 < 0) {
    goto LABEL_12;
  }
  while (1)
  {
    if (v15)
    {
      uint64_t v18 = (v15 - 1) & v15;
      unint64_t v19 = __clz(__rbit64(v15)) | (v14 << 6);
      int64_t v20 = v14;
      goto LABEL_29;
    }

    int64_t v26 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v26 >= v40) {
      goto LABEL_34;
    }
    unint64_t v27 = *(void *)(v41 + 8 * v26);
    int64_t v20 = v14 + 1;
    if (!v27)
    {
      int64_t v20 = v14 + 2;
      if (v14 + 2 >= v40) {
        goto LABEL_34;
      }
      unint64_t v27 = *(void *)(v41 + 8 * v20);
      if (!v27)
      {
        int64_t v20 = v14 + 3;
        if (v14 + 3 >= v40) {
          goto LABEL_34;
        }
        unint64_t v27 = *(void *)(v41 + 8 * v20);
        if (!v27)
        {
          int64_t v20 = v14 + 4;
          if (v14 + 4 >= v40) {
            goto LABEL_34;
          }
          unint64_t v27 = *(void *)(v41 + 8 * v20);
          if (!v27)
          {
            int64_t v28 = v14 + 5;
            while (v28 < v40)
            {
              unint64_t v27 = *(void *)(v41 + 8 * v28++);
              if (v27)
              {
                int64_t v20 = v28 - 1;
                goto LABEL_28;
              }
            }

double sub_10003972C()
{
  return sub_100033D3C();
}

void sub_10003974C()
{
}

void sub_10003976C()
{
}

void sub_10003978C(os_log_s *a1)
{
}

uint64_t sub_1000397AC@<X0>( uint64_t result@<X0>, nw_txt_record *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, _BYTE *a7@<X8>)
{
  if (result)
  {
    uint64_t v10 = (const uint8_t *)result;
    size_t v12 = Data.count.getter(a5, a6);
    uint64_t v13 = String.utf8CString.getter(a3, a4);
    LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = nw_txt_record_set_key(a2, (const char *)(v13 + 32), v10, v12);
    uint64_t result = swift_release(v13);
    *a7 = (_BYTE)v10;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100039844()
{
  return 0LL;
}

uint64_t sub_10003984C(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

BOOL sub_100039854(void *a1, uint64_t a2)
{
  uint64_t v3 = *v2 & a2;
  if (v3 != a2) {
    *v2 |= a2;
  }
  *a1 = a2;
  return v3 != a2;
}

uint64_t sub_100039880(uint64_t result)
{
  *v1 |= result;
  return result;
}

uint64_t sub_100039890(uint64_t result)
{
  *v1 &= result;
  return result;
}

uint64_t sub_1000398A0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000398C4()
{
  return sub_100039E28((void (*)(void))&_swift_release, (void (*)(void))&_swift_release);
}

void sub_1000398D4()
{
}

uint64_t sub_1000398DC()
{
  return sub_100039E28((void (*)(void))&_swift_release, (void (*)(void))&_swift_release);
}

uint64_t sub_1000398EC()
{
  return sub_100038E9C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000398F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100039904(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10003990C(nw_connection *a1)
{
  return sub_100037E1C(a1, v1);
}

uint64_t sub_100039914()
{
  return sub_100039E28( (void (*)(void))&_swift_unknownObjectRelease,  (void (*)(void))&_swift_release);
}

void sub_100039928(char a1)
{
}

uint64_t sub_100039930()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100039954()
{
}

void sub_100039974()
{
}

uint64_t sub_100039994(uint64_t a1)
{
  return sub_100036B78(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000399AC(void *a1)
{
  return sub_100036BD0(a1, v1);
}

uint64_t sub_1000399B4(void *a1)
{
  return sub_100036F54(a1, v1);
}

uint64_t sub_1000399BC( uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v8 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }

    v8 += a1 - result;
  }

  BOOL v9 = __OFSUB__(a2, a1);
  uint64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v11 = __DataStorage._length.getter();
  if (v11 >= v10) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v11;
  }
  uint64_t v13 = v8 + v12;
  if (v8) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0LL;
  }
  a3(&v16, v8, v14);
  if (!v3) {
    char v15 = v16;
  }
  return v15 & 1;
}

uint64_t sub_100039A68( uint64_t a1, uint64_t a2, void (*a3)(char *__return_ptr, uint64_t *, char *), uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1;
  __int16 v10 = a2;
  char v11 = BYTE2(a2);
  char v12 = BYTE3(a2);
  char v13 = BYTE4(a2);
  char v14 = BYTE5(a2);
  a3(&v8, &v9, (char *)&v9 + a5);
  if (!v5) {
    char v6 = v8;
  }
  return v6 & 1;
}

void sub_100039B44(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000FD7C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  sub_100016C1C();
}

uint64_t sub_100039B7C(void *a1)
{
  id v1 = [a1 btAddressData];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t sub_100039BDC()
{
  unint64_t result = qword_1000828C0;
  if (!qword_1000828C0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_1000828C0);
  }

  return result;
}

uint64_t sub_100039C18@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000397AC( a1,  *(nw_txt_record **)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  *(void *)(v2 + 48),  *(void *)(v2 + 56),  a2);
}

unint64_t sub_100039C38()
{
  unint64_t result = qword_1000828E8;
  if (!qword_1000828E8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1000828E8);
  }

  return result;
}

uint64_t sub_100039C74(uint64_t a1, uint64_t a2)
{
  return sub_100035D70(a1, a2, v2);
}

uint64_t sub_100039C7C(uint64_t a1)
{
  return sub_100035E68(a1, v1);
}

uint64_t sub_100039C94(char a1)
{
  return sub_100034FC0(a1, *(_DWORD *)(v1 + 16));
}

void sub_100039CA0(uint64_t a1)
{
}

uint64_t sub_100039CA8(uint64_t a1)
{
  return sub_100034984(a1, v1);
}

uint64_t sub_100039CB0()
{
  return sub_100039CC8( (void (*)(void))&_swift_release,  (void (*)(void))&_swift_unknownObjectRelease,  36LL);
}

uint64_t sub_100039CC8(void (*a1)(void), void (*a2)(void), uint64_t a3)
{
  return swift_deallocObject(v3, a3, 7LL);
}

uint64_t sub_100039D10()
{
  return sub_1000347C4(*(void *)(v0 + 16));
}

uint64_t sub_100039D1C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100039D40()
{
  return sub_100034820(*(void *)(v0 + 16));
}

uint64_t sub_100039D48@<X0>(BOOL *a1@<X8>)
{
  return sub_100034704(*(void *)(v1 + 16), *(_xpc_activity_s **)(v1 + 24), a1);
}

  ;
}

BOOL sub_100039E00(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100039E10(uint64_t a1)
{
  return swift_weakInit(a1 + 16, v1);
}

void sub_100039E1C()
{
}

uint64_t sub_100039E28(void (*a1)(void), void (*a2)(void))
{
  return sub_100039CC8(a1, a2, 32LL);
}

BOOL sub_100039E30(os_log_type_t a1)
{
  return os_log_type_enabled(*(os_log_t *)(v1 + 1520), a1);
}

void sub_100039E44(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

float *sub_100039E50(float *result, float a2)
{
  *unint64_t result = a2;
  return result;
}

void *sub_100039E60()
{
  return _Block_copy((const void *)(v0 - 160));
}

id sub_100039E68(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_100039E74()
{
  return swift_retain(v0);
}

unint64_t sub_100039E84()
{
  return 0xD000000000000028LL;
}

  ;
}

uint64_t sub_100039EB0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

void sub_100039EC0(const char *a1)
{
}

uint64_t sub_100039ECC()
{
  return sub_100015644(v0, v1);
}

uint64_t sub_100039ED8(uint64_t a1)
{
  return sub_100015D58(a1, v1);
}

uint64_t sub_100039EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, a2, a3, a4);
}

uint64_t sub_100039EE8(uint64_t a1)
{
  return swift_weakInit(a1 + 16, v1);
}

NSString sub_100039EF4()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_100039F00@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_100039F0C()
{
  return swift_unknownObjectRetain(v0);
}

void *sub_100039F14()
{
  return sub_10000FF14((void *)(v0 + 88), *(void *)(v0 + 112));
}

void sub_100039F20()
{
}

id sub_100039F2C(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, 20);
}

uint64_t sub_100039F38()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_100039F44(uint64_t result)
{
  **(void **)(v1 - 264) = result;
  return result;
}

void sub_100039F58()
{
}

uint64_t sub_100039F60()
{
  return sub_100015D58(v0, v1);
}

void *sub_100039F6C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 128) = a1;
  *(void *)(v2 - 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v1;
  return _Block_copy((const void *)(v2 - 144));
}

void *sub_100039F78()
{
  return _Block_copy((const void *)(v0 - 152));
}

void sub_100039F80()
{
}

uint64_t sub_100039FA4(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    uint64_t v3 = result;
    sub_10003B778();
    return swift_release(v3);
  }

  return result;
}

void sub_100039FF8()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[6];
  uint64_t ObjectType = swift_getObjectType(v0[5]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 40))(ObjectType, v2);
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[11];
  char v6 = (dispatch_queue_s *)v0[7];
  uint64_t v7 = swift_allocObject(&unk_100077F50, 24LL, 7LL);
  swift_weakInit(v7 + 16, v1);
  void v11[4] = sub_10003BFE8;
  v11[5] = v7;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256LL;
  v11[2] = sub_100040778;
  v11[3] = &unk_100077F68;
  char v8 = _Block_copy(v11);
  swift_release();
  uint64_t v9 = (const char *)(String.utf8CString.getter(v4, v5) + 32);
  __int16 v10 = (int *)((char *)v1 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService_darwinNotificationToken);
  sub_100016B3C((uint64_t)v10, (uint64_t)v11);
  notify_register_dispatch(v9, v10, v6, v8);
  swift_endAccess(v11);
  swift_release();
  _Block_release(v8);
}

uint64_t sub_10003A118(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v2);
  if (result)
  {
    sub_10003B69C();
    return swift_release();
  }

  return result;
}

void sub_10003A16C(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v140 = a2;
  uint64_t v5 = type metadata accessor for RemotePairingError(0LL);
  sub_100012280();
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v120 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for PeerDeviceInfo(0LL);
  uint64_t v138 = *(void *)(v10 - 8);
  uint64_t v139 = v10;
  __chkstk_darwin(v10, v11);
  sub_10001E144();
  uint64_t v134 = v12;
  uint64_t v13 = type metadata accessor for AuxiliaryMetadataItem(0LL);
  uint64_t v149 = *(void *)(v13 - 8);
  uint64_t v150 = v13;
  __chkstk_darwin(v13, v14);
  sub_10001E144();
  uint64_t v147 = v15;
  sub_10000FD7C(&qword_100082AC0);
  sub_100012280();
  uint64_t v18 = __chkstk_darwin(v16, v17);
  int64_t v20 = (char *)&v120 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (uint64_t)&v120 - v22;
  sub_10000FD7C(&qword_100082AB8);
  sub_100012280();
  __chkstk_darwin(v24, v25);
  sub_100026D10();
  sub_10003C094();
  __chkstk_darwin(v26, v27);
  sub_10003C094();
  __chkstk_darwin(v28, v29);
  uint64_t v31 = (char *)&v120 - v30;
  int v135 = a1;
  if ((a1 & 1) != 0) {
    uint64_t v32 = OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoIncludingSensitiveKeys;
  }
  else {
    uint64_t v32 = OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoExcludingSensitiveKeys;
  }
  uint64_t v33 = v2;
  uint64_t v34 = (uint64_t)&v2[v32];
  swift_beginAccess(&v2[v32], v153, 0LL, 0LL);
  sub_10003BAE8(v34, (uint64_t)v31);
  uint64_t v35 = v139;
  if (sub_10001D9C8((uint64_t)v31, 1LL, v139) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v138 + 32))(v140, v31, v35);
    return;
  }

  sub_100039B44((uint64_t)v31, &qword_100082AB8);
  NSString v36 = String._bridgeToObjectiveC()();
  sub_10003C0C0((uint64_t)v36);
  sub_10003C130();
  if (!v31) {
    goto LABEL_59;
  }
  uint64_t v127 = v3;
  uint64_t v155 = v31;
  uint64_t v40 = *((void *)&v151 + 1);
  uint64_t v126 = v151;
  NSString v41 = String._bridgeToObjectiveC()();
  sub_10003C0C0((uint64_t)v41);
  sub_10003C130();
  uint64_t v155 = v31;
  if ((sub_10003C02C(v42, v43, v44, (uint64_t)&type metadata for String) & 1) == 0)
  {
LABEL_58:
    swift_bridgeObjectRelease(v40);
LABEL_59:
    sub_10003BB30((unint64_t *)&unk_1000813E0, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    uint64_t v99 = v98;
    static Error<>.dataCorrupted.getter(v5, v98);
    sub_10003BB30((unint64_t *)&unk_1000819E0, (uint64_t)&protocol conformance descriptor for RemotePairingError);
    swift_allocError(v5, v100, 0LL, 0LL);
    uint64_t v101 = Error<>.init(_:_:)(v9, 0xD000000000000047LL, 0x8000000100069C30LL, v5, v99);
    swift_willThrow(v101);
    return;
  }

  __int128 v125 = v151;
  NSString v45 = String._bridgeToObjectiveC()();
  sub_10003C0C0((uint64_t)v45);
  sub_10003C130();
  uint64_t v155 = v31;
  if ((sub_10003C02C(v46, v47, v48, (uint64_t)&type metadata for String) & 1) == 0)
  {
    sub_10003C10C((uint64_t)v154);
    goto LABEL_58;
  }

  uint64_t v121 = v40;
  unint64_t v124 = *((void *)&v151 + 1);
  uint64_t v120 = v151;
  sub_10003B64C();
  uint64_t v50 = v49;
  id v51 = objc_allocWithZone((Class)type metadata accessor for DeviceKeyValueStore(0LL));
  uint64_t v144 = DeviceKeyValueStore.init(copyingValuesFrom:)(v50);
  uint64_t v53 = *((void *)v33 + 5);
  uint64_t v52 = *((void *)v33 + 6);
  __int128 v123 = v33;
  uint64_t ObjectType = swift_getObjectType(v53);
  int v122 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8))(ObjectType, v52);
  uint64_t v56 = v55;
  uint64_t v128 = v55 + 64;
  sub_10003C0A4();
  unint64_t v59 = v58 & v57;
  unint64_t v129 = (unint64_t)(v60 + 63) >> 6;
  swift_bridgeObjectRetain(v61);
  uint64_t v62 = 0LL;
  uint64_t v63 = v140;
  v146 = v20;
  uint64_t v131 = v56;
  if (!v59) {
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v136 = (v59 - 1) & v59;
  uint64_t v137 = v62;
  for (unint64_t i = __clz(__rbit64(v59)) | (v62 << 6); ; unint64_t i = __clz(__rbit64(v68)) + (v69 << 6))
  {
    uint64_t v72 = *(void *)(v56 + 56);
    uint64_t v73 = (uint64_t *)(*(void *)(v56 + 48) + 16 * i);
    uint64_t v74 = v73[1];
    uint64_t v145 = *v73;
    uint64_t v75 = *(void *)(v72 + 8 * i);
    uint64_t v141 = v75 + 64;
    sub_10003C0A4();
    unint64_t v78 = v77 & v76;
    int64_t v142 = (unint64_t)(v79 + 63) >> 6;
    sub_10003C124(v142 - 1);
    uint64_t v143 = v75;
    swift_bridgeObjectRetain(v75);
    int64_t v148 = 0LL;
    if (v78)
    {
LABEL_31:
      unint64_t v80 = __clz(__rbit64(v78));
      v78 &= v78 - 1;
      unint64_t v81 = v80 | (v148 << 6);
      uint64_t v82 = v146;
      goto LABEL_32;
    }

    while (1)
    {
      int64_t v89 = v148 + 1;
      uint64_t v82 = v146;
      uint64_t v90 = &qword_100082AC8;
      if (__OFADD__(v148, 1LL))
      {
        __break(1u);
        goto LABEL_64;
      }

      if (v89 < v142)
      {
        unint64_t v91 = *(void *)(v141 + 8 * v89);
        if (v91) {
          goto LABEL_36;
        }
        int64_t v92 = v148 + 2;
        ++v148;
        if (v89 + 1 < v142)
        {
          unint64_t v91 = *(void *)(v141 + 8 * v92);
          if (v91) {
            goto LABEL_39;
          }
          int64_t v148 = v89 + 1;
          if (v89 + 2 < v142)
          {
            unint64_t v91 = *(void *)(v141 + 8 * (v89 + 2));
            if (v91)
            {
              v89 += 2LL;
              goto LABEL_36;
            }

            int64_t v92 = v89 + 3;
            int64_t v148 = v89 + 2;
            if (v89 + 3 < v142)
            {
              unint64_t v91 = *(void *)(v141 + 8 * v92);
              if (!v91)
              {
                while (1)
                {
                  int64_t v89 = v92 + 1;
                  if (__OFADD__(v92, 1LL)) {
                    break;
                  }
                  if (v89 >= v142)
                  {
                    int64_t v148 = v130;
                    goto LABEL_50;
                  }

                  unint64_t v91 = *(void *)(v141 + 8 * v89);
                  ++v92;
                  if (v91) {
                    goto LABEL_36;
                  }
                }

LABEL_75:
                __break(1u);
LABEL_76:
                __break(1u);
                return;
              }

LABEL_39:
              int64_t v89 = v92;
LABEL_36:
              unint64_t v78 = (v91 - 1) & v91;
              unint64_t v81 = __clz(__rbit64(v91)) + (v89 << 6);
              int64_t v148 = v89;
LABEL_32:
              uint64_t v83 = *(void *)(v143 + 56);
              uint64_t v84 = (void *)(*(void *)(v143 + 48) + 16 * v81);
              uint64_t v85 = v84[1];
              *(void *)uint64_t v82 = *v84;
              *((void *)v82 + 1) = v85;
              uint64_t v86 = v149;
              uint64_t v87 = v83 + *(void *)(v149 + 72) * v81;
              uint64_t v88 = sub_10003C188();
              (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(&v82[*(int *)(v88 + 48)], v87, v150);
              sub_10001D930((uint64_t)v82, 0LL, 1LL, v88);
              swift_bridgeObjectRetain(v85);
              goto LABEL_51;
            }
          }
        }
      }

  __break(1u);
  return result;
}

LABEL_50:
      uint64_t v93 = sub_10003C188();
      sub_10001D930((uint64_t)v82, 1LL, 1LL, v93);
      unint64_t v78 = 0LL;
LABEL_51:
      sub_10003BF80((uint64_t)v82, v23, &qword_100082AC0);
      uint64_t v53 = sub_10003C188();
      uint64_t v63 = *(void *)v23;
      uint64_t v94 = *(void *)(v23 + 8);
      uint64_t v96 = v149;
      uint64_t v95 = v150;
      uint64_t v97 = v147;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v149 + 32))(v147, v23 + *(int *)(v53 + 48), v150);
      swift_bridgeObjectRetain(v74);
      sub_10003AC40(&v151);
      uint64_t v53 = v144;
      dispatch thunk of DeviceKeyValueStore.setValue(_:_:_:sensitive:)(v145, v74, v63, v94, &v151, 1LL);
      swift_bridgeObjectRelease(v94);
      sub_100031D08();
      sub_10000FF38(&v151);
      (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v97, v95);
      if (v78) {
        goto LABEL_31;
      }
    }

    sub_100031D08();
    swift_release();
    uint64_t v63 = v140;
    uint64_t v56 = v131;
    uint64_t v62 = v137;
    unint64_t v59 = v136;
    if (v136) {
      goto LABEL_10;
    }
LABEL_11:
    if (__OFADD__(v62, 1LL))
    {
      __break(1u);
      goto LABEL_75;
    }

    sub_10003C17C();
    if (v66 == v67) {
      goto LABEL_60;
    }
    unint64_t v68 = *(void *)(v128 + 8 * v65);
    uint64_t v69 = v65;
    if (!v68)
    {
      sub_10003C0DC();
      if (v66 == v67) {
        goto LABEL_60;
      }
      sub_10003C114();
      if (!v68)
      {
        sub_10003C0DC();
        if (v66 == v67) {
          goto LABEL_60;
        }
        sub_10003C114();
        if (!v68) {
          break;
        }
      }
    }

LABEL_60:
  swift_release();
  uint64_t v152 = &type metadata for Bool;
  LOBYTE(v151) = v122 & 1;
  dispatch thunk of DeviceKeyValueStore.setValue(_:_:_:sensitive:)( 0LL,  0LL,  0xD00000000000001FLL,  0x8000000100069C80LL,  &v151,  0LL);
  sub_100031D08();
  sub_10000FF38(&v151);
  NSString v102 = String._bridgeToObjectiveC()();
  uint64_t v53 = MGCopyAnswer(v102, 0LL);

  uint64_t v82 = v123;
  LOBYTE(v23) = v135;
  uint64_t v90 = (uint64_t *)*((void *)&v125 + 1);
  if (v53)
  {
    uint64_t v104 = objc_opt_self(&OBJC_CLASS___NSNumber);
    uint64_t v105 = (void *)swift_dynamicCastObjCClass(v53, v104);
    if (v105)
    {
      id v106 = [v105 unsignedLongLongValue];
      swift_unknownObjectRelease(v53);
      uint64_t v107 = 0LL;
      goto LABEL_66;
    }

LABEL_64:
    uint64_t v103 = swift_unknownObjectRelease(v53);
  }

  uint64_t v108 = static os_log_type_t.info.getter(v103);
  os_log(_:dso:log:_:_:)( v108,  &_mh_execute_header,  *((void *)v82 + 2),  "Unable to fetch device ECID",  27LL,  2LL,  &_swiftEmptyArrayStorage);
  id v106 = 0LL;
  uint64_t v107 = 1LL;
LABEL_66:
  if ((v23 & 1) == 0)
  {
    sub_10003C10C((uint64_t)v153);
    id v106 = 0LL;
    uint64_t v120 = 0LL;
    unint64_t v124 = 0xE000000000000000LL;
    uint64_t v107 = 1LL;
  }

  uint64_t v109 = v127;
  uint64_t v110 = (void *)v144;
  uint64_t v111 = dispatch thunk of DeviceKeyValueStore.data(includeSensitive:)(v23 & 1);
  if (v109)
  {
    sub_10003C10C((uint64_t)&v151 + 8);
    swift_bridgeObjectRelease(v90);
    sub_10003C10C((uint64_t)v153);
  }

  else
  {
    uint64_t v113 = v134;
    PeerDeviceInfo.init(name:model:udid:ecid:deviceKVSData:deviceKVSIncludesSensitiveInfo:)( v126,  v121,  v125,  v90,  v120,  v124,  v106,  v107,  v111,  v112,  v23 & 1);

    uint64_t v114 = v132;
    uint64_t v115 = v113;
    uint64_t v116 = v139;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v138 + 16))(v132, v115, v139);
    sub_10001D930(v114, 0LL, 1LL, v116);
    uint64_t v117 = v133;
    sub_10003BF80(v114, v133, &qword_100082AB8);
    if ((v23 & 1) != 0) {
      uint64_t v118 = OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoIncludingSensitiveKeys;
    }
    else {
      uint64_t v118 = OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoExcludingSensitiveKeys;
    }
    uint64_t v119 = (uint64_t)&v82[v118];
    swift_beginAccess(&v82[v118], &v151, 33LL, 0LL);
    sub_10003BAA0(v117, v119);
    swift_endAccess(&v151);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v138 + 32))(v63, v134, v116);
  }

_OWORD *sub_10003AC40@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v141 = a1;
  uint64_t v138 = sub_10000FD7C(&qword_100082AC8);
  sub_100012280();
  __chkstk_darwin(v1, v2);
  sub_100026D10();
  uint64_t v137 = v3;
  uint64_t v6 = __chkstk_darwin(v4, v5);
  int64_t v142 = (uint64_t *)((char *)&v128 - v7);
  __chkstk_darwin(v6, v8);
  uint64_t v136 = (char *)&v128 - v9;
  uint64_t v10 = type metadata accessor for AuxiliaryMetadataItem(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  sub_100026D10();
  sub_10003C094();
  __chkstk_darwin(v13, v14);
  sub_10003C094();
  uint64_t v17 = __chkstk_darwin(v15, v16);
  uint64_t v19 = (char *)&v128 - v18;
  uint64_t v21 = __chkstk_darwin(v17, v20);
  uint64_t v23 = (char *)&v128 - v22;
  uint64_t v25 = __chkstk_darwin(v21, v24);
  uint64_t v27 = (char *)&v128 - v26;
  uint64_t v29 = __chkstk_darwin(v25, v28);
  uint64_t v31 = (char *)&v128 - v30;
  uint64_t v33 = __chkstk_darwin(v29, v32);
  uint64_t v35 = (char *)&v128 - v34;
  uint64_t v37 = __chkstk_darwin(v33, v36);
  uint64_t v39 = (char *)&v128 - v38;
  __chkstk_darwin(v37, v40);
  uint64_t v42 = (char *)&v128 - v41;
  uint64_t v43 = *(void (**)(void))(v11 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v43)((char *)&v128 - v41, v140, v10);
  int v44 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v42, v10);
  if (v44 == enum case for AuxiliaryMetadataItem.BOOLean(_:))
  {
    ((void (*)(char *, char *, uint64_t))v43)(v39, v42, v10);
    uint64_t v45 = (*(uint64_t (**)(char *, uint64_t))(v11 + 96))(v39, v10);
    LOBYTE(v144[0]) = *(_BYTE *)(*(void *)v39 + 16LL);
    goto LABEL_71;
  }

  uint64_t v139 = v43;
  uint64_t v133 = v42;
  uint64_t v135 = v11;
  uint64_t v140 = v10;
  if (v44 == enum case for AuxiliaryMetadataItem.int(_:))
  {
    sub_10003C0FC();
    sub_10003C0CC(v47, v48);
    sub_10003C040();
    uint64_t v50 = sub_100026D54((uint64_t)v35, v49);
    *(void *)&v144[0] = *(void *)(*(void *)v35 + 16LL);
    if (sub_10003C008(v50, v51, (uint64_t)&type metadata for Int64, (uint64_t)v43 + 8))
    {
LABEL_6:
      sub_10003C050();
LABEL_7:
      sub_100016BD4();
LABEL_8:
      sub_100026D54((uint64_t)v42, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
      return sub_10001DC14(&v146, v141);
    }

    goto LABEL_71;
  }

  if (v44 == enum case for AuxiliaryMetadataItem.float(_:))
  {
    sub_10003C0CC((uint64_t)v31, (uint64_t)v133);
    sub_10003C040();
    uint64_t v54 = sub_100026D54((uint64_t)v31, v53);
    *(void *)&v144[0] = *(void *)(*(void *)v31 + 16LL);
    if (sub_10003C008(v54, v55, (uint64_t)&type metadata for Double, (uint64_t)v43 + 8))
    {
      sub_10003C050();
      sub_100016BD4();
      uint64_t v42 = v133;
      goto LABEL_8;
    }

LABEL_71:
    sub_100016BD4();
    goto LABEL_72;
  }

  uint64_t v56 = v139;
  if (v44 == enum case for AuxiliaryMetadataItem.string(_:))
  {
    sub_10003C0FC();
    uint64_t v57 = v140;
    uint64_t v59 = v58;
    v56();
    sub_10003C040();
    v60(v27, v57);
    uint64_t v61 = *(void *)(*(void *)v27 + 24LL);
    *(void *)&v144[0] = *(void *)(*(void *)v27 + 16LL);
    *((void *)&v144[0] + 1) = v61;
    swift_bridgeObjectRetain(v61);
    if (sub_10003C008(v62, v63, (uint64_t)&type metadata for String, v59 + 8))
    {
      sub_10003C050();
      uint64_t v64 = *((void *)&v144[0] + 1);
      sub_100016BD4();
      swift_bridgeObjectRelease(v64);
      goto LABEL_8;
    }

    goto LABEL_69;
  }

  if (v44 == enum case for AuxiliaryMetadataItem.data(_:))
  {
    sub_10003C0FC();
    uint64_t v66 = v65;
    v56();
    sub_10003C040();
    sub_100026D54((uint64_t)v23, v67);
    unint64_t v68 = *(void *)(*(void *)v23 + 24LL);
    *(void *)&v144[0] = *(void *)(*(void *)v23 + 16LL);
    *((void *)&v144[0] + 1) = v68;
    uint64_t v69 = sub_1000155D4(*(uint64_t *)&v144[0], v68);
    if (sub_10003C008(v69, v70, (uint64_t)&type metadata for Data, v66 + 8))
    {
      sub_10003C050();
      sub_100015644(*(uint64_t *)&v144[0], *((unint64_t *)&v144[0] + 1));
      goto LABEL_7;
    }

    sub_100015644(*(uint64_t *)&v144[0], *((unint64_t *)&v144[0] + 1));
    goto LABEL_71;
  }

  uint64_t v71 = v140;
  uint64_t v72 = v141;
  if (v44 != enum case for AuxiliaryMetadataItem.array(_:))
  {
    if (v44 != enum case for AuxiliaryMetadataItem.dictionary(_:))
    {
LABEL_72:
      uint64_t result = (_OWORD *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "remotepairingdeviced/MetadataService.swift",  42LL,  2LL,  158LL,  0);
      __break(1u);
      return result;
    }

    uint64_t v83 = v134;
    sub_10003C0F4((uint64_t)v134, (uint64_t)v133);
    uint64_t v84 = v135;
    sub_10001DDAC((uint64_t)v83, *(uint64_t (**)(uint64_t, uint64_t))(v135 + 96));
    uint64_t v128 = *v83;
    uint64_t v85 = *(void *)(v128 + 16);
    uint64_t v86 = (void *)Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    v72[3] = sub_10000FD7C(&qword_1000815B0);
    sub_10003BF48(v85, &v146);
    uint64_t v129 = *((void *)&v146 + 1);
    uint64_t v131 = v146;
    uint64_t v132 = v148;
    unint64_t v87 = v149;
    sub_10003C124((unint64_t)(v147 + 64) >> 6);
    uint64_t v88 = &qword_100082AC8;
    if (!v87) {
      goto LABEL_30;
    }
LABEL_29:
    uint64_t v134 = (uint64_t *)((v87 - 1) & v87);
    unint64_t v89 = __clz(__rbit64(v87)) | (v132 << 6);
    while (1)
    {
      uint64_t v98 = (uint64_t *)(*(void *)(v131 + 48) + 16 * v89);
      uint64_t v99 = *v98;
      uint64_t v100 = v98[1];
      uint64_t v101 = *(void *)(v131 + 56) + *(void *)(v84 + 72) * v89;
      uint64_t v102 = v138;
      uint64_t v103 = v136;
      sub_10003C0F4((uint64_t)&v136[*(int *)(v138 + 48)], v101);
      *uint64_t v103 = v99;
      v103[1] = v100;
      uint64_t v104 = (uint64_t)v103;
      uint64_t v105 = v142;
      id v106 = v88;
      sub_10003BF80(v104, (uint64_t)v142, v88);
      uint64_t v107 = *(int *)(v102 + 48);
      uint64_t v108 = v137;
      uint64_t v109 = (uint64_t)v137 + v107;
      uint64_t v110 = *v105;
      uint64_t v111 = v105[1];
      *uint64_t v137 = *v105;
      v108[1] = v111;
      sub_10003C0F4((uint64_t)v108 + v107, (uint64_t)v105 + v107);
      swift_bridgeObjectRetain(v100);
      __n128 v112 = swift_bridgeObjectRetain(v111);
      sub_10003AC40(v145, v112);
      sub_10001DC14(v145, v144);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v86);
      uint64_t v143 = v86;
      unint64_t v114 = sub_100051A2C(v110, v111);
      uint64_t v116 = v86[2];
      BOOL v117 = (v115 & 1) == 0;
      Swift::Int v118 = v116 + v117;
      if (__OFADD__(v116, v117)) {
        break;
      }
      unint64_t v119 = v114;
      char v120 = v115;
      sub_10000FD7C((uint64_t *)&unk_100083620);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v118))
      {
        unint64_t v121 = sub_100051A2C(v110, v111);
        if ((v120 & 1) != (v122 & 1)) {
          goto LABEL_68;
        }
        unint64_t v119 = v121;
      }

      uint64_t v86 = v143;
      if ((v120 & 1) != 0)
      {
        __int128 v123 = (void *)(v143[7] + 32 * v119);
        sub_10000FF38(v123);
        sub_10001DC14(v144, v123);
      }

      else
      {
        v143[(v119 >> 6) + 8] |= 1LL << v119;
        unint64_t v124 = (uint64_t *)(v86[6] + 16 * v119);
        *unint64_t v124 = v110;
        v124[1] = v111;
        sub_10001DC14(v144, (_OWORD *)(v86[7] + 32 * v119));
        uint64_t v125 = v86[2];
        BOOL v95 = __OFADD__(v125, 1LL);
        uint64_t v126 = v125 + 1;
        if (v95) {
          goto LABEL_66;
        }
        v86[2] = v126;
        swift_bridgeObjectRetain(v111);
      }

      swift_bridgeObjectRelease(v111);
      swift_bridgeObjectRelease(0x8000000000000000LL);
      uint64_t v84 = v135;
      uint64_t v71 = v140;
      sub_10001DDAC(v109, *(uint64_t (**)(uint64_t, uint64_t))(v135 + 8));
      uint64_t v88 = v106;
      sub_100039B44((uint64_t)v142, v106);
      unint64_t v87 = (unint64_t)v134;
      if (v134) {
        goto LABEL_29;
      }
LABEL_30:
      uint64_t v90 = v132 + 1;
      if (__OFADD__(v132, 1LL)) {
        goto LABEL_67;
      }
      unint64_t v91 = v141;
      if (v90 >= v130) {
        goto LABEL_63;
      }
      unint64_t v92 = *(void *)(v129 + 8 * v90);
      uint64_t v93 = v132 + 1;
      if (!v92)
      {
        sub_10003C084();
        if (v94 == v95) {
          goto LABEL_63;
        }
        sub_10003C074();
        if (!v92)
        {
          sub_10003C084();
          if (v94 == v95) {
            goto LABEL_63;
          }
          sub_10003C074();
          if (!v92)
          {
            sub_10003C084();
            if (v94 == v95) {
              goto LABEL_63;
            }
            sub_10003C074();
            if (!v92)
            {
              sub_10003C084();
              if (v94 == v95) {
                goto LABEL_63;
              }
              sub_10003C074();
              if (!v92)
              {
                sub_10003C17C();
                if (v94 == v95) {
                  goto LABEL_63;
                }
                unint64_t v92 = *(void *)(v129 + 8 * v93);
                if (!v92)
                {
                  while (1)
                  {
                    sub_10003C17C();
                    if (v94 == v95) {
                      break;
                    }
                    unint64_t v92 = *(void *)(v129 + 8 * v96);
                    uint64_t v97 = v96 + 1;
                    if (v92)
                    {
                      uint64_t v93 = v97 - 1;
                      goto LABEL_52;
                    }
                  }

LABEL_52:
      uint64_t v134 = (uint64_t *)((v92 - 1) & v92);
      unint64_t v89 = __clz(__rbit64(v92)) + (v93 << 6);
      uint64_t v132 = v93;
    }

    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
LABEL_69:
    uint64_t v127 = *((void *)&v144[0] + 1);
    sub_100016BD4();
    swift_bridgeObjectRelease(v127);
    goto LABEL_72;
  }

  sub_10003C0F4((uint64_t)v19, (uint64_t)v133);
  sub_10003C040();
  sub_10001DDAC((uint64_t)v19, v73);
  uint64_t v74 = *(void *)(*(void *)v19 + 16LL);
  int64_t v75 = *(void *)(v74 + 16);
  uint64_t v76 = &_swiftEmptyArrayStorage;
  if (v75)
  {
    *(void *)&v145[0] = &_swiftEmptyArrayStorage;
    sub_10003BD68(0LL, v75, 0);
    uint64_t v77 = v74 + ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v78 = *(void *)(v11 + 72);
    uint64_t v79 = v132;
    do
    {
      ((void (*)(uint64_t, uint64_t, uint64_t))v56)(v79, v77, v140);
      sub_10003AC40(&v146, v80);
      sub_100026D54(v79, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
      uint64_t v76 = *(void **)&v145[0];
      if ((swift_isUniquelyReferenced_nonNull_native(*(void *)&v145[0]) & 1) == 0)
      {
        sub_10003BD68(0LL, v76[2] + 1LL, 1);
        uint64_t v76 = *(void **)&v145[0];
      }

      unint64_t v82 = v76[2];
      unint64_t v81 = v76[3];
      if (v82 >= v81 >> 1)
      {
        sub_10003BD68((char *)(v81 > 1), v82 + 1, 1);
        uint64_t v76 = *(void **)&v145[0];
      }

      v76[2] = v82 + 1;
      sub_10001DC14(&v146, &v76[4 * v82 + 4]);
      v77 += v78;
      --v75;
      uint64_t v56 = v139;
    }

    while (v75);
    uint64_t v72 = v141;
  }

  v72[3] = sub_10000FD7C(&qword_1000815C0);
  sub_100016BD4();
  *uint64_t v72 = v76;
  return (_OWORD *)(*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v133, v140);
}

void sub_10003B64C()
{
  uint64_t v1 = *(void **)(v0 + 96);
  if (!v1)
  {
    uint64_t v2 = v0;
    uint64_t v3 = (void *)(*(uint64_t (**)(void))(v0 + 64))();
    uint64_t v4 = *(void **)(v0 + 96);
    *(void *)(v2 + 96) = v3;
    id v5 = v3;

    uint64_t v1 = 0LL;
  }

  id v6 = v1;
  sub_100016C1C();
}

void sub_10003B69C()
{
  uint64_t v3 = sub_10003C05C();
  os_log(_:dso:log:_:_:)( v3,  &_mh_execute_header,  v0[2],  "Received darwin notification for device user assigned name change. Invalidating previously computed metadata",  108LL,  2LL,  &_swiftEmptyArrayStorage);
  uint64_t v4 = (void *)v0[12];
  v0[12] = 0LL;

  type metadata accessor for PeerDeviceInfo(0LL);
  sub_10003C018();
  sub_100016B3C( (uint64_t)v0 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoIncludingSensitiveKeys,  (uint64_t)v7);
  sub_10003C164();
  sub_10003C0EC();
  sub_10003C018();
  sub_100016B3C( (uint64_t)v0 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoExcludingSensitiveKeys,  (uint64_t)v7);
  sub_10003C158();
  sub_10003C0EC();
  id v5 = (void (*)(uint64_t))v0[3];
  if (v5)
  {
    uint64_t v6 = sub_10003C138();
    v5(v6);
    sub_10003C170();
  }

  sub_100020484();
}

void sub_10003B778()
{
  uint64_t v3 = sub_10003C05C();
  os_log(_:dso:log:_:_:)( v3,  &_mh_execute_header,  *(void *)(v0 + 16),  "Auxiliary device metadata did change. Invalidating previously computed metadata",  79LL,  2LL);
  type metadata accessor for PeerDeviceInfo(0LL);
  sub_10003C018();
  sub_100016B3C( v0 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoIncludingSensitiveKeys,  (uint64_t)v6);
  sub_10003C164();
  sub_10003C0EC();
  sub_10003C018();
  sub_100016B3C( v0 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoExcludingSensitiveKeys,  (uint64_t)v6);
  sub_10003C158();
  sub_10003C0EC();
  uint64_t v4 = *(void (**)(uint64_t))(v0 + 24);
  if (v4)
  {
    uint64_t v5 = sub_10003C138();
    v4(v5);
    sub_10003C170();
  }

  sub_100020484();
}

uint64_t sub_10003B848()
{
  uint64_t v1 = (int *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService_darwinNotificationToken);
  swift_beginAccess(v0 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService_darwinNotificationToken, v3, 1LL, 0LL);
  if (*v1 != -1)
  {
    notify_cancel(*v1);
    int *v1 = -1;
  }

  sub_10002FBF0(*(void *)(v0 + 24), *(void *)(v0 + 32));
  swift_unknownObjectRelease(*(void *)(v0 + 40));

  swift_release();
  swift_bridgeObjectRelease(*(void *)(v0 + 88));

  sub_100039B44( v0 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoIncludingSensitiveKeys,  &qword_100082AB8);
  sub_100039B44( v0 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoExcludingSensitiveKeys,  &qword_100082AB8);
  return v0;
}

uint64_t sub_10003B90C()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10003B930()
{
  return type metadata accessor for MetadataService(0LL);
}

uint64_t type metadata accessor for MetadataService(uint64_t a1)
{
  uint64_t result = qword_100082940;
  if (!qword_100082940) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MetadataService);
  }
  return result;
}

void sub_10003B970(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = &unk_1000633C8;
  v4[2] = &unk_1000633E0;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = (char *)&value witness table for () + 64;
  v4[5] = &unk_1000633E0;
  v4[6] = &unk_1000633F8;
  sub_10003BA2C(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(v2 - 8) + 64LL;
    uint64_t v6 = v5;
    uint64_t v7 = (char *)&value witness table for Builtin.Int32 + 64;
    swift_updateClassMetadata2(a1, 256LL, 10LL, v4, a1 + 80);
  }

void sub_10003BA2C(uint64_t a1)
{
  if (!qword_100082950)
  {
    uint64_t v2 = type metadata accessor for PeerDeviceInfo(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_100082950);
    }
  }

void sub_10003BA80(int a1@<W0>, uint64_t a2@<X8>)
{
}

uint64_t sub_10003BAA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD7C(&qword_100082AB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003BAE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD7C(&qword_100082AB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_10003BB30(unint64_t *a1, uint64_t a2)
{
  if (!*a1)
  {
    uint64_t v4 = type metadata accessor for RemotePairingError(255LL);
    atomic_store(swift_getWitnessTable(a2, v4), a1);
  }

  sub_100016C1C();
}

uint64_t sub_10003BB6C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_10003C144();
    uint64_t v7 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v8 = 51LL;
  }

  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3)
    {
      sub_10000FD7C(&qword_100082AE0);
      return swift_arrayInitWithCopy(a3, a1);
    }

    sub_10003C144();
    uint64_t v7 = "UnsafeMutablePointer.initialize overlapping range";
    uint64_t v8 = 49LL;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v7,  v8,  2LL,  "Swift/UnsafePointer.swift",  25LL);
  __break(1u);
  return result;
}

uint64_t sub_10003BC40(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (a3 + 32 * a2 <= a1 || a1 + 32 * a2 <= a3) {
      return swift_arrayInitWithCopy(a3, a1);
    }
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

void *sub_10003BD10(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10003BD84( a1,  a2,  a3,  *v3,  &qword_100082AD8,  (void (*)(unint64_t, uint64_t, unint64_t))sub_10004506C);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

void *sub_10003BD3C(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10003BD84( a1,  a2,  a3,  *v3,  &qword_100082AE8,  (void (*)(unint64_t, uint64_t, unint64_t))sub_10004506C);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

char *sub_10003BD68(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10003BE68(a1, a2, a3, *v3);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

void *sub_10003BD84( void *result, int64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(unint64_t, uint64_t, unint64_t))
{
  char v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v10 = a2;
  }

  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    uint64_t v13 = sub_10000FD7C(a5);
    uint64_t v14 = (void *)swift_allocObject(v13, 16 * v12 + 32, 7LL);
    size_t v15 = j__malloc_size(v14);
    v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 16);
  }

  else
  {
    uint64_t v14 = &_swiftEmptyArrayStorage;
  }

  unint64_t v16 = (unint64_t)(v14 + 4);
  unint64_t v17 = a4 + 32;
  if ((v8 & 1) != 0)
  {
    a6(v17, v11, v16);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_10003BB6C(v17, v11, v16);
  }

  sub_100016BD4();
  return v14;
}

char *sub_10003BE68(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10000FD7C(&qword_100082AD0);
    uint64_t v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 32);
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_100045014(v14, v8, v13);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_10003BC40((unint64_t)v14, v8, (unint64_t)v13);
  }

  swift_release();
  return v11;
}

uint64_t sub_10003BF48@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1LL;
  uint64_t v3 = -1LL << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1LL << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0LL;
  a2[4] = v2 & v5;
  return result;
}

void sub_10003BF80(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000FD7C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  sub_100016C1C();
}

uint64_t sub_10003BFC4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10003BFE8(uint64_t a1)
{
  return sub_10003A118(a1, v1);
}

uint64_t sub_10003BFF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10003C000(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10003C008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v4 - 160, v4 - 192, a3, a4, 0LL);
}

uint64_t sub_10003C018()
{
  return sub_10001D930(v0, 1LL, 1LL, v1);
}

uint64_t sub_10003C02C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v5 - 144, v5 - 72, v4 + 8, a4, 6LL);
}

  ;
}

_OWORD *sub_10003C050()
{
  return sub_10001DC14((_OWORD *)(v0 - 160), (_OWORD *)(v0 - 128));
}

uint64_t sub_10003C05C()
{
  return static os_log_type_t.default.getter();
}

  ;
}

  ;
}

void sub_10003C094()
{
  *(void *)(v1 - 256) = v0;
}

  ;
}

uint64_t sub_10003C0C0(uint64_t a1)
{
  return MGCopyAnswer(a1, 0LL);
}

uint64_t sub_10003C0CC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v2 - 232))(a1, a2, *(void *)(v2 - 224));
}

  ;
}

uint64_t sub_10003C0EC()
{
  return swift_endAccess(v0 - 56);
}

uint64_t sub_10003C0F4(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

  ;
}

uint64_t sub_10003C10C@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(a1 - 256));
}

  ;
}

uint64_t sub_10003C124@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return swift_bridgeObjectRetain(v2);
}

void sub_10003C130()
{
}

uint64_t sub_10003C138()
{
  return swift_retain(*(void *)(v0 + 32));
}

  ;
}

uint64_t sub_10003C158()
{
  return sub_10003BAA0(v0, v1);
}

uint64_t sub_10003C164()
{
  return sub_10003BAA0(v0, v1);
}

uint64_t sub_10003C170()
{
  return sub_10002FBF0(v0, v1);
}

  ;
}

uint64_t sub_10003C188()
{
  return sub_10000FD7C(v0);
}

void sub_10003C190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_10001DC14((_OWORD *)a1, v5);
    sub_100055608(v5, a2, a3);
    sub_100031D08();
  }

  else
  {
    sub_100039B44(a1, &qword_100081598);
    sub_100054D44(v5, a2, a3);
    sub_100031D08();
    sub_100039B44((uint64_t)v5, &qword_100081598);
  }

  sub_10003F1A4();
}

void sub_10003C20C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_10001DC14((_OWORD *)a1, v3);
    sub_100055634();
    sub_10001DBE0(a2);
  }

  else
  {
    sub_100039B44(a1, &qword_100081598);
    sub_100054DE0(v3, a2);
    sub_10001DBE0(a2);
    sub_100039B44((uint64_t)v3, &qword_100081598);
  }

  sub_10003F1A4();
}

void sub_10003C284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000FD7C(&qword_100082D50);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for XPCEventPublisher.Token(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v15 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (sub_10001D9C8(a1, 1LL, v10) == 1)
  {
    sub_100039B44(a1, &qword_100082D50);
    sub_1000552B4();
    swift_bridgeObjectRelease(a3);
    sub_100039B44((uint64_t)v9, &qword_100082D50);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v14, a1, v10);
    sub_1000557A4(v14, a2, a3);
    swift_bridgeObjectRelease(a3);
  }

void sub_10003C3B4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_100051A2C(a1, a2), (v7 & 1) != 0))
  {
    sub_10003F17C(*(void *)(a3 + 56) + 32 * v6, (uint64_t)a4);
  }

  else
  {
    *a4 = 0u;
    a4[1] = 0u;
    sub_100016C1C();
  }

void sub_10003C3FC(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v4 = sub_100051A8C(), (v5 & 1) != 0))
  {
    sub_10003F17C(*(void *)(a1 + 56) + 32 * v4, (uint64_t)a2);
  }

  else
  {
    *a2 = 0u;
    a2[1] = 0u;
    sub_100016C1C();
  }

void sub_10003C444(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    unint64_t v3 = sub_100051AB8(a1);
    if ((v4 & 1) != 0) {
      swift_retain(*(void *)(*(void *)(a2 + 56) + 8 * v3));
    }
  }

  sub_100016C1C();
}

uint64_t sub_10003C480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (unint64_t v4 = sub_100051A2C(a1, a2), (v5 & 1) != 0)) {
    return swift_bridgeObjectRetain(*(void *)(*(void *)(a3 + 56) + 8 * v4));
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10003C4CC()
{
  uint64_t v0 = sub_10000FD7C(&qword_100082D70);
  Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  v0,  &protocol witness table for String);
  return 1LL;
}

uint64_t sub_10003C510()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for StubAuxiliaryMetadataService()
{
  return objc_opt_self(&OBJC_CLASS____TtC20remotepairingdeviced28StubAuxiliaryMetadataService);
}

uint64_t sub_10003C554()
{
  return 1LL;
}

BOOL sub_10003C56C()
{
  if (*(_BYTE *)(v0 + 72) == 1)
  {
    sub_100016B48(v0 + 96, (uint64_t)v5, 0LL);
    uint64_t v1 = *(void *)(*(void *)(v0 + 96) + 16LL);
    sub_100016B48(v0 + 80, (uint64_t)v4, 0LL);
    BOOL v2 = v1 == *(void *)(*(void *)(v0 + 80) + 16LL);
  }

  else
  {
    BOOL v2 = 0LL;
  }

  sub_100016B48(v0 + 96, (uint64_t)v6, 0LL);
  swift_bridgeObjectRetain(*(void *)(v0 + 96));
  return v2;
}

uint64_t sub_10003C5FC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  sub_10003F0B4();
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = OS_os_log.init(subsystem:category:)( 0xD00000000000001ALL,  0x8000000100066830LL,  0x617461646174656DLL,  0xE800000000000000LL);
  uint64_t v10 = sub_10003F144();
  sub_100029E64( &qword_1000835F0,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCEventPublisher.Token,  (uint64_t)&protocol conformance descriptor for XPCEventPublisher.Token);
  *(void *)(v5 + 56) = 0LL;
  *(void *)(v5 + 64) = 0LL;
  *(_BYTE *)(v5 + 72) = 0;
  *(void *)(v5 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  v10,  &type metadata for String,  v11);
  *(void *)(v5 + 88) = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  v10,  &protocol witness table for String);
  uint64_t v12 = sub_10000FD7C(&qword_100082D70);
  *(void *)(v5 + 96) = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  v12,  &protocol witness table for String);
  uint64_t v13 = static AuxiliaryMetadataProvider.XPCKeys.xpcEventStreamName.getter();
  uint64_t v15 = v14;
  unint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, id, uint64_t, uint64_t))(a3 + 8);
  id v17 = a1;
  uint64_t v18 = v16(v13, v15, v17, a2, a3);
  if (v18)
  {
    uint64_t v19 = v18;
    *(void *)(v5 + 32) = v18;
    *(void *)(v5 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = a3;
    *(void *)(v5 + 24) = v17;
    uint64_t v42 = v17;
    if (a4)
    {
      id v20 = v17;
      swift_unknownObjectRetain(v19);
      uint64_t v21 = a4;
    }

    else
    {
      type metadata accessor for RemotePairingDeviceXPCServer();
      id v22 = v17;
      uint64_t v23 = swift_unknownObjectRetain(v19);
      uint64_t v24 = static MachServiceNames.auxiliaryMetadata.getter(v23);
      uint64_t v21 = sub_1000270B4(v24, v25, v22);
    }

    *(void *)(v5 + 48) = v21;
    uint64_t v26 = sub_10003F118();
    sub_100026E64(v26);
    swift_retain(a4);
    swift_retain(v26);
    sub_10003F220((uint64_t)sub_10003F0F0, v26);
    sub_10003F238();
    uint64_t v27 = sub_10003F118();
    sub_100026E64(v27);
    swift_retain(v27);
    sub_10003F220((uint64_t)sub_10003F0F8, v27);
    sub_10003F238();
    uint64_t v28 = *(void *)(*(void *)(v5 + 48) + 16LL);
    uint64_t v29 = sub_10003F118();
    sub_100026E64(v29);
    uint64_t v30 = type metadata accessor for AuxiliaryMetadataUpdate(0LL);
    uint64_t v31 = type metadata accessor for EmptyResponse(0LL);
    uint64_t v41 = a4;
    sub_100029E64( &qword_100082D78,  (uint64_t (*)(uint64_t))&type metadata accessor for AuxiliaryMetadataUpdate,  (uint64_t)&protocol conformance descriptor for AuxiliaryMetadataUpdate);
    uint64_t v33 = v32;
    sub_100029E64( &qword_100082D80,  (uint64_t (*)(uint64_t))&type metadata accessor for AuxiliaryMetadataUpdate,  (uint64_t)&protocol conformance descriptor for AuxiliaryMetadataUpdate);
    uint64_t v35 = v34;
    sub_100029E64( &qword_100081A40,  (uint64_t (*)(uint64_t))&type metadata accessor for EmptyResponse,  (uint64_t)&protocol conformance descriptor for EmptyResponse);
    uint64_t v37 = v36;
    sub_100029E64( &qword_100081A48,  (uint64_t (*)(uint64_t))&type metadata accessor for EmptyResponse,  (uint64_t)&protocol conformance descriptor for EmptyResponse);
    uint64_t v39 = v38;
    sub_10000FFDC();
    dispatch thunk of CodableDispatcher.register<A, B>(handler:)(sub_10003F100, v29, v30, v31, v33, v35, v37, v39);
    swift_unknownObjectRelease(v19);
    swift_release(v28);
    swift_release(v29);

    swift_release(v41);
    return v5;
  }

  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000024LL,  0x8000000100069FE0LL,  "remotepairingdeviced/AuxiliaryMetadataService.swift",  51LL,  2LL,  81LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t sub_10003C97C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    sub_10003E988(a1);
    return swift_release(v5);
  }

  return result;
}

uint64_t sub_10003C9D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    sub_10003D668(a1);
    return swift_release(v5);
  }

  return result;
}

uint64_t sub_10003CA34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v9, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v5);
  if (!Strong) {
    return EmptyResponse.init()();
  }
  uint64_t v7 = Strong;
  sub_10000FD7C(&qword_1000810F8);
  sub_10003CB08(a1);
  uint64_t result = swift_release(v7);
  if (!v3) {
    return EmptyResponse.init()();
  }
  return result;
}

void sub_10003CADC()
{
  uint64_t v0 = dispatch thunk of XPCEventPublisher.activate()();
  dispatch thunk of XPCConnection.activate()(v0);
  sub_100016C1C();
}

uint64_t sub_10003CB08(uint64_t a1)
{
  uint64_t v179 = a1;
  os_log_t v176 = (os_log_t)type metadata accessor for RemotePairingError(0LL);
  sub_100026C0C();
  __chkstk_darwin(v2, v3);
  sub_10000FFCC();
  os_log_t v175 = (os_log_t)(v5 - v4);
  uint64_t v178 = type metadata accessor for AuxiliaryMetadataUpdate(0LL);
  uint64_t v6 = *(void *)(v178 - 8);
  sub_100026C0C();
  __chkstk_darwin(v7, v8);
  sub_10003F134();
  uint64_t v11 = v9 - v10;
  uint64_t v14 = __chkstk_darwin(v12, v13);
  unint64_t v16 = (char *)&v170 - v15;
  __chkstk_darwin(v14, v17);
  sub_10003C094();
  __chkstk_darwin(v18, v19);
  sub_10003C094();
  __chkstk_darwin(v20, v21);
  sub_10003C094();
  __chkstk_darwin(v22, v23);
  uint64_t v25 = (char *)&v170 - v24;
  uint64_t v26 = type metadata accessor for XPCDictionary(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26, v28);
  sub_10000FFCC();
  uint64_t v31 = v30 - v29;
  XPCDictionary.auditToken.getter(v186);
  sub_10003BF80((uint64_t)v186, (uint64_t)v187, &qword_100082D60);
  uint64_t v172 = v1;
  if ((v188 & 1) != 0)
  {
    int v174 = -1;
  }

  else
  {
    uint64_t v32 = audit_token_t.processIdentifier.getter(v187[0], v187[1], v187[2], v187[3]);
    int v174 = v32;
  }

  XPCDictionary.entitlements.getter(v32);
  char v33 = XPCDictionary.subscript.getter(0xD00000000000002BLL, 0x8000000100069EB0LL);
  uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v31, v26);
  if ((v33 & 1) == 0)
  {
    os_log_type_t v35 = static os_log_type_t.error.getter(v34);
    uint64_t v36 = *(os_log_s **)(v177 + 16);
    uint64_t v37 = v6;
    uint64_t v38 = *(void (**)(void, void, void))(v6 + 16);
    uint64_t v39 = v178;
    v38(v11, v179, v178);
    if (os_log_type_enabled(v36, v35))
    {
      uint64_t v40 = (_DWORD *)sub_1000122E0(18LL);
      uint64_t v41 = sub_1000122E0(32LL);
      uint64_t v184 = v41;
      *uint64_t v40 = 136315394;
      uint64_t v42 = AuxiliaryMetadataUpdate.domain.getter(v41);
      sub_100045370(v42, v43, &v184);
      uint64_t v182 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, &v183, v40 + 1, v40 + 3);
      sub_10001DC58();
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v11, v178);
      sub_10003F160();
      LODWORD(v182) = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, (char *)&v182 + 4, v46, v47);
      sub_10003F24C( (void *)&_mh_execute_header,  v36,  v35,  "Received metadata update for domain %s from unentitled client pid/%d. Rejecting");
      swift_arrayDestroy(v41, 1LL);
      sub_10001001C(v41);
      sub_10001001C((uint64_t)v40);
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v11, v39);
    }

    os_log_t v96 = v176;
    os_log_t v97 = v175;
    sub_10003F1C4( (unint64_t *)&unk_1000813E0,  v48,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    uint64_t v99 = v98;
    static Error<>.permissionDenied.getter(v96, v98);
    uint64_t v184 = 0LL;
    unint64_t v185 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(83LL);
    sub_10003F128(0xD000000000000031LL, (uint64_t)"Rejecting metadata update from client for domain ");
    v101._countAndFlagsBits = AuxiliaryMetadataUpdate.domain.getter(v100);
    String.append(_:)(v101);
    sub_10001DDB4();
    sub_10003F128(0xD00000000000001ELL, (uint64_t)" without required entitlement ");
    v102._object = (void *)0x8000000100069EB0LL;
    v102._countAndFlagsBits = 0xD00000000000002BLL;
    String.append(_:)(v102);
    uint64_t v103 = v184;
    unint64_t v104 = v185;
    sub_10003F1C4( (unint64_t *)&unk_1000819E0,  v105,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    sub_10003F1B4(v106, v106);
    os_log_t v107 = v97;
    uint64_t v108 = v103;
    unint64_t v109 = v104;
    os_log_t v110 = v96;
    uint64_t v111 = v99;
LABEL_20:
    uint64_t v136 = Error<>.init(_:_:)(v107, v108, v109, v110, v111);
    return swift_willThrow(v136);
  }

  uint64_t v49 = (void *)v177;
  sub_100016B48(v177 + 88, (uint64_t)&v184, 0LL);
  uint64_t v50 = v49[11];
  swift_bridgeObjectRetain(v50);
  uint64_t v51 = v179;
  uint64_t v52 = sub_10003F218();
  if (!*(void *)(v50 + 16))
  {
    sub_10001DDB4();
    uint64_t v56 = sub_100016D6C();
    goto LABEL_16;
  }

  sub_100051A2C(v52, v53);
  char v55 = v54;
  sub_10001DDB4();
  uint64_t v56 = sub_100016D6C();
  if ((v55 & 1) == 0)
  {
LABEL_16:
    os_log_type_t v112 = static os_log_type_t.error.getter(v56);
    uint64_t v113 = (os_log_s *)v49[2];
    uint64_t v114 = v6;
    char v115 = *(void (**)(void, void, void))(v6 + 16);
    uint64_t v116 = v178;
    v115(v16, v51, v178);
    if (os_log_type_enabled(v113, v112))
    {
      BOOL v117 = (_DWORD *)sub_1000122E0(18LL);
      uint64_t v118 = sub_1000122E0(32LL);
      uint64_t v182 = v118;
      _DWORD *v117 = 136315394;
      uint64_t v119 = ((uint64_t (*)(void))AuxiliaryMetadataUpdate.domain.getter)();
      sub_100045370(v119, v120, &v182);
      os_log_t v180 = (os_log_t)v121;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, &v181, v117 + 1, v117 + 3);
      sub_10001DC58();
      (*(void (**)(char *, uint64_t))(v114 + 8))(v16, v178);
      sub_10003F160();
      LODWORD(v18_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, (char *)&v180 + 4, v123, v124);
      sub_10003F24C( (void *)&_mh_execute_header,  v113,  v112,  "Received metadata update for domain %s from client pid/%d without associated subscription. Rejecting");
      swift_arrayDestroy(v118, 1LL);
      sub_10001001C(v118);
      uint64_t v125 = sub_10001001C((uint64_t)v117);
    }

    else
    {
      uint64_t v125 = (*(uint64_t (**)(char *, uint64_t))(v114 + 8))(v16, v116);
    }

    os_log_t v126 = v175;
    static RemotePairingError.invalidInput.getter(v125);
    uint64_t v182 = 0LL;
    unint64_t v183 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(84LL);
    sub_10003F128(0xD000000000000025LL, (uint64_t)"Rejecting metadata update for domain ");
    v127._countAndFlagsBits = sub_10003F218();
    object = v127._object;
    String.append(_:)(v127);
    swift_bridgeObjectRelease(object);
    sub_10003F128(0xD00000000000002DLL, (uint64_t)" without associated launch event subscription");
    uint64_t v129 = v182;
    unint64_t v130 = v183;
    sub_10003F1C4( (unint64_t *)&unk_1000819E0,  v131,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    os_log_t v132 = v176;
    sub_10003F1B4(v133, v133);
    sub_10003F1C4( (unint64_t *)&unk_1000813E0,  v134,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    uint64_t v111 = v135;
    os_log_t v107 = v126;
    uint64_t v108 = v129;
    unint64_t v109 = v130;
    os_log_t v110 = v132;
    goto LABEL_20;
  }

  uint64_t v57 = sub_10003F218();
  uint64_t v59 = v58;
  uint64_t v60 = (uint64_t)(v49 + 12);
  sub_100016B48((uint64_t)(v49 + 12), (uint64_t)&v182, 0LL);
  uint64_t v61 = v49[12];
  swift_bridgeObjectRetain(v61);
  uint64_t v62 = sub_10003C480(v57, v59, v61);
  sub_100016D6C();
  uint64_t v63 = v179;
  uint64_t v64 = swift_bridgeObjectRelease(v61);
  uint64_t v65 = AuxiliaryMetadataUpdate.metadata.getter(v64);
  uint64_t v66 = v65;
  if (v62)
  {
    uint64_t v67 = swift_bridgeObjectRetain(v62);
    char v68 = sub_10003EB60(v67, v66);
    swift_bridgeObjectRelease_n(v62, 2LL);
    uint64_t v69 = swift_bridgeObjectRelease(v66);
    uint64_t v70 = v6;
    if ((v68 & 1) != 0)
    {
      os_log_type_t v71 = static os_log_type_t.default.getter(v69);
      uint64_t v72 = *(os_log_s **)(v177 + 16);
      uint64_t v73 = *(void (**)(void, void, void))(v6 + 16);
      uint64_t v74 = v170;
      uint64_t v75 = v178;
      v73(v170, v63, v178);
      uint64_t v76 = v171;
      v73(v171, v63, v75);
      int v77 = v71;
      if (os_log_type_enabled(v72, v71))
      {
        uint64_t v78 = sub_1000122E0(28LL);
        uint64_t v79 = sub_1000122E0(64LL);
        uint64_t v179 = v79;
        os_log_t v180 = (os_log_t)v79;
        *(_DWORD *)uint64_t v78 = 136315650;
        LODWORD(v177) = v77;
        uint64_t v80 = AuxiliaryMetadataUpdate.domain.getter(v79);
        sub_10003F1EC(v80, v81);
        uint64_t v189 = v82;
        os_log_t v176 = v72;
        sub_10003F1CC(v82, v83, v84, v78 + 12);
        sub_10001DC58();
        uint64_t v85 = *(void (**)(void, void))(v70 + 8);
        v85(v74, v75);
        *(_WORD *)(v78 + 12) = 1024;
        LODWORD(v189) = v174;
        uint64_t v86 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, (char *)&v189 + 4, v78 + 14, v78 + 18);
        *(_WORD *)(v78 + 18) = 2080;
        AuxiliaryMetadataUpdate.metadata.getter(v86);
        uint64_t v87 = sub_10003F22C();
        uint64_t v88 = Dictionary.description.getter(v76, &type metadata for String, v87, &protocol witness table for String);
        uint64_t v90 = v89;
        sub_10001DC58();
        sub_100045370(v88, v90, (uint64_t *)&v180);
        sub_10003F14C(v91, v92, v93, v78 + 28);
        swift_bridgeObjectRelease(v90);
        v85(v76, v75);
        _os_log_impl( (void *)&_mh_execute_header,  v176,  (os_log_type_t)v177,  "Received metadata update for domain %s from pid/%d but there is no change since last update: %s",  (uint8_t *)v78,  0x1Cu);
        uint64_t v94 = v179;
        sub_10003F20C();
        sub_10001001C(v94);
        return sub_10001001C(v78);
      }

      else
      {
        uint64_t v169 = *(void (**)(void, void))(v70 + 8);
        v169(v74, v75);
        return ((uint64_t (*)(uint64_t, uint64_t))v169)(v76, v75);
      }
    }
  }

  else
  {
    uint64_t v69 = swift_bridgeObjectRelease(v65);
    uint64_t v70 = v6;
  }

  os_log_type_t v137 = static os_log_type_t.default.getter(v69);
  uint64_t v138 = *(os_log_s **)(v177 + 16);
  uint64_t v139 = *(void (**)(void, void, void))(v70 + 16);
  uint64_t v140 = v178;
  v139(v25, v63, v178);
  uint64_t v141 = v173;
  v139(v173, v63, v140);
  if (os_log_type_enabled(v138, v137))
  {
    uint64_t v142 = sub_1000122E0(28LL);
    os_log_t v176 = (os_log_t)sub_1000122E0(64LL);
    os_log_t v180 = v176;
    *(_DWORD *)uint64_t v142 = 136315650;
    os_log_t v175 = v138;
    uint64_t v143 = ((uint64_t (*)(void))AuxiliaryMetadataUpdate.domain.getter)();
    sub_10003F1EC(v143, v144);
    uint64_t v189 = v145;
    LODWORD(v171) = v137;
    sub_10003F1CC(v145, v146, v147, v142 + 12);
    sub_10001DC58();
    v170 = *(void (**)(void, void))(v70 + 8);
    v170(v25, v140);
    *(_WORD *)(v142 + 12) = 1024;
    LODWORD(v189) = v174;
    uint64_t v148 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, (char *)&v189 + 4, v142 + 14, v142 + 18);
    *(_WORD *)(v142 + 18) = 2080;
    uint64_t v149 = v173;
    uint64_t v150 = v173;
    AuxiliaryMetadataUpdate.metadata.getter(v148);
    uint64_t v151 = sub_10003F22C();
    uint64_t v152 = Dictionary.description.getter(v150, &type metadata for String, v151, &protocol witness table for String);
    uint64_t v154 = v153;
    sub_10001DC58();
    sub_100045370(v152, v154, (uint64_t *)&v180);
    sub_10003F14C(v155, v156, v157, v142 + 28);
    swift_bridgeObjectRelease(v154);
    v170(v149, v140);
    _os_log_impl( (void *)&_mh_execute_header,  v175,  (os_log_type_t)v171,  "Received metadata update for domain %s from pid/%d: %s",  (uint8_t *)v142,  0x1Cu);
    os_log_t v158 = v176;
    sub_10003F20C();
    sub_10001001C((uint64_t)v158);
    uint64_t v159 = sub_10001001C(v142);
  }

  else
  {
    CFStringRef v160 = *(void (**)(void, void))(v70 + 8);
    v160(v25, v140);
    uint64_t v159 = ((uint64_t (*)(uint64_t, uint64_t))v160)(v141, v140);
  }

  uint64_t v161 = v177;
  uint64_t v162 = AuxiliaryMetadataUpdate.domain.getter(v159);
  uint64_t v164 = v163;
  uint64_t v165 = AuxiliaryMetadataUpdate.metadata.getter(v162);
  sub_100016B48(v60, (uint64_t)&v180, 33LL);
  sub_100055834(v165, v162, v164);
  swift_endAccess(&v180);
  uint64_t result = swift_bridgeObjectRelease(v164);
  uint64_t v166 = *(void (**)(void))(v161 + 56);
  if (v166)
  {
    uint64_t v167 = *(void *)(v161 + 64);
    uint64_t v168 = sub_10000FFDC();
    v166(v168);
    return sub_10002FBF0((uint64_t)v166, v167);
  }

  return result;
}

void sub_10003D668(uint64_t a1)
{
  uint64_t v40 = sub_10003F244();
  uint64_t v2 = *(void *)(v40 - 8);
  __chkstk_darwin(v40, v3);
  sub_10000FFCC();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = sub_10003F144();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  sub_10003F134();
  uint64_t v12 = v10 - v11;
  __chkstk_darwin(v13, v14);
  unint64_t v16 = (char *)&v39 - v15;
  uint64_t v17 = type metadata accessor for XPCEventPublisher.SubscriptionAction(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  sub_10000FFCC();
  uint64_t v22 = v21 - v20;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v21 - v20, a1, v17);
  int v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 88))(v22, v17);
  if (v23 == enum case for XPCEventPublisher.SubscriptionAction.add(_:))
  {
    sub_10003F184();
    uint64_t v24 = v22 + *(int *)(sub_10000FD7C(&qword_100082D58) + 48);
    sub_10003F1F8((uint64_t)v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32));
    uint64_t v25 = v40;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v6, v24, v40);
    sub_10003D8FC((uint64_t)v16, v6);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v25);
    uint64_t v26 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v27 = v16;
LABEL_8:
    v26(v27, v7);
    goto LABEL_9;
  }

  uint64_t v28 = v41;
  if (v23 == enum case for XPCEventPublisher.SubscriptionAction.remove(_:))
  {
    sub_10003F184();
    uint64_t v29 = v8;
    sub_10003F1F8(v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32));
    sub_100016B48(v28 + 80, (uint64_t)v42, 33LL);
    sub_1000553AC();
    uint64_t v31 = v30;
    swift_endAccess(v42);
    if (v31)
    {
      sub_100016B48(v28 + 96, (uint64_t)v42, 33LL);
      uint64_t v32 = sub_100055470();
      swift_endAccess(v42);
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRelease(v32);
      char v33 = *(void (**)(uint64_t))(v28 + 56);
      if (v33)
      {
        uint64_t v34 = *(void *)(v28 + 64);
        uint64_t v35 = sub_10000FFDC();
        v33(v35);
        sub_10002FBF0((uint64_t)v33, v34);
      }
    }

    uint64_t v26 = *(void (**)(char *, uint64_t))(v29 + 8);
    uint64_t v27 = (char *)v12;
    goto LABEL_8;
  }

  if (v23 == enum case for XPCEventPublisher.SubscriptionAction.initialBarrier(_:))
  {
    *(_BYTE *)(v41 + 72) = 1;
    uint64_t v36 = *(void (**)(uint64_t))(v28 + 56);
    if (v36)
    {
      uint64_t v37 = *(void *)(v28 + 64);
      uint64_t v38 = sub_10000FFDC();
      v36(v38);
      sub_10002FBF0((uint64_t)v36, v37);
    }
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v22, v17);
  }

LABEL_9:
  sub_10000FF80();
}

void sub_10003D8FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  char v55 = (uint8_t *)a1;
  uint64_t v5 = sub_10003F244();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  sub_10003F134();
  uint64_t v10 = (char *)(v8 - v9);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v55 - v13;
  sub_10000FD7C(&qword_100082D50);
  sub_100026C0C();
  __chkstk_darwin(v15, v16);
  sub_10000FFCC();
  uint64_t v19 = v18 - v17;
  uint64_t v21 = static AuxiliaryMetadataProvider.XPCKeys.domainKey.getter(v20);
  uint64_t v23 = v22;
  uint64_t v24 = XPCDictionary.subscript.getter(v21);
  uint64_t v26 = v25;
  uint64_t v27 = swift_bridgeObjectRelease(v23);
  if (!v26)
  {
    os_log_type_t v45 = static os_log_type_t.fault.getter(v27);
    uint64_t v46 = *(os_log_s **)(v3 + 16);
    uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v47(v14, a2, v5);
    os_log_type_t v48 = v45;
    if (!os_log_type_enabled(v46, v45))
    {
      sub_10003F1DC();
      goto LABEL_12;
    }

    uint64_t v49 = (uint8_t *)sub_1000122E0(12LL);
    uint64_t v50 = sub_1000122E0(32LL);
    v59[0] = v50;
    *(_DWORD *)uint64_t v49 = 136315138;
    char v55 = v49 + 4;
    v47(v10, (uint64_t)v14, v5);
    uint64_t v51 = String.init<A>(describing:)(v10, v5);
    uint64_t v53 = v52;
    sub_100045370(v51, v52, v59);
    uint64_t v57 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v55, v49 + 12);
    swift_bridgeObjectRelease(v53);
    sub_10003F1DC();
    sub_100016D10( (void *)&_mh_execute_header,  v46,  v48,  "Invalid XPC event subscription descriptor. Could not read target domain from descriptor dictionary %s",  v49);
    sub_100012450(v50);
    sub_10001001C(v50);
    uint64_t v37 = (uint64_t)v49;
    goto LABEL_10;
  }

  sub_100016B48(v3 + 88, (uint64_t)v59, 0LL);
  uint64_t v28 = *(void *)(v3 + 88);
  if (*(void *)(v28 + 16)
    && (swift_bridgeObjectRetain(*(void *)(v3 + 88)),
        sub_100051A2C(v24, v26),
        char v30 = v29,
        uint64_t v31 = swift_bridgeObjectRelease(v28),
        (v30 & 1) != 0))
  {
    os_log_type_t v32 = static os_log_type_t.fault.getter(v31);
    char v33 = *(os_log_s **)(v3 + 16);
    if (sub_10003F194(v32))
    {
      sub_100031AB0();
      uint64_t v34 = (uint8_t *)sub_1000122E0(12LL);
      uint64_t v35 = sub_1000122E0(32LL);
      uint64_t v57 = v35;
      *(_DWORD *)uint64_t v34 = 136446210;
      sub_100031AB0();
      sub_100045370(v24, v26, &v57);
      uint64_t v56 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v34 + 4, v34 + 12);
      swift_bridgeObjectRelease_n(v26, 3LL);
      sub_100016D10( (void *)&_mh_execute_header,  v33,  (os_log_type_t)v6,  "Multiple subscribers have registered for ownership of domain %{public}s. Ignoring additional subscriber.",  v34);
      sub_100012450(v35);
      sub_10001001C(v35);
      uint64_t v37 = (uint64_t)v34;
LABEL_10:
      sub_10001001C(v37);
      goto LABEL_12;
    }
  }

  else
  {
    sub_100016B48(v3 + 80, (uint64_t)&v57, 33LL);
    sub_100031AB0();
    uint64_t v38 = (uint64_t)v55;
    sub_1000557D0(v24, v26, (uint64_t)v55, v39, v40, v41, v42, v43, (uint64_t)v55, v56);
    swift_endAccess(&v57);
    uint64_t v44 = sub_10003F144();
    sub_10003F204(v19, v38, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 16LL));
    sub_10001D930(v19, 0LL, 1LL, v44);
    sub_100016B48(v3 + 88, (uint64_t)&v57, 33LL);
    sub_100031AB0();
    sub_10003C284(v19, v24, v26);
    swift_endAccess(&v57);
    sub_10003DC8C(v38, v24, v26);
  }

  sub_100031D08();
LABEL_12:
  sub_10000FF80();
}

void sub_10003DC8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v54 = *v3;
  uint64_t v8 = sub_10003F144();
  uint64_t v52 = *(void *)(v8 - 8);
  uint64_t v53 = v8;
  __chkstk_darwin(v8, v9);
  uint64_t v50 = v10;
  uint64_t v51 = (uint64_t)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_10003F244();
  uint64_t v57 = *(void *)(v11 - 8);
  uint64_t v58 = v11;
  sub_100026C0C();
  __chkstk_darwin(v12, v13);
  sub_10003F134();
  uint64_t v16 = v14 - v15;
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v21 = (char *)&v47 - v20;
  uint64_t v22 = XPCDictionary.init()(v19);
  uint64_t v23 = static AuxiliaryMetadataProvider.XPCKeys.domainKey.getter(v22);
  uint64_t v25 = v24;
  swift_bridgeObjectRetain(a3);
  uint64_t v55 = a3;
  uint64_t v56 = a2;
  uint64_t v26 = v21;
  uint64_t v27 = XPCDictionary.subscript.setter(a2, a3, v23, v25);
  os_log_type_t v28 = static os_log_type_t.default.getter(v27);
  char v29 = (os_log_s *)v4[2];
  if (sub_10003F194(v28))
  {
    uint64_t v30 = v55;
    swift_bridgeObjectRetain_n(v55, 2LL);
    uint64_t v31 = sub_1000122E0(12LL);
    uint64_t v48 = a1;
    os_log_type_t v32 = (uint8_t *)v31;
    uint64_t v33 = sub_1000122E0(32LL);
    uint64_t v60 = v33;
    *(_DWORD *)os_log_type_t v32 = 136446210;
    swift_bridgeObjectRetain(v30);
    sub_100045370(v56, v30, &v60);
    uint64_t v59 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v32 + 4, v32 + 12);
    swift_bridgeObjectRelease_n(v30, 3LL);
    sub_100016D10( (void *)&_mh_execute_header,  v29,  (os_log_type_t)v25,  "Firing event to request metadata for domain %{public}s",  v32);
    sub_100012450(v33);
    sub_10001001C(v33);
    a1 = v48;
    sub_10001001C((uint64_t)v32);
  }

  uint64_t v48 = v4[4];
  uint64_t v49 = v26;
  (*(void (**)(uint64_t, char *, uint64_t))(v57 + 16))(v16, v26, v58);
  uint64_t v47 = v4[3];
  uint64_t v35 = swift_allocObject(&unk_100078048, 24LL, 7LL);
  sub_100026E64(v35);
  uint64_t v37 = v51;
  uint64_t v36 = v52;
  uint64_t v38 = a1;
  sub_10003F204(v51, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 16));
  uint64_t v39 = *(unsigned __int8 *)(v36 + 80);
  uint64_t v40 = (v39 + 40) & ~v39;
  unint64_t v41 = (v50 + v40 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v42 = (void *)swift_allocObject(&unk_100078070, v41 + 8, v39 | 7);
  uint64_t v44 = v55;
  uint64_t v43 = v56;
  v42[2] = v35;
  uint64_t v42[3] = v43;
  v42[4] = v44;
  sub_10003F204((uint64_t)v42 + v40, v37, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 32));
  *(void *)((char *)v42 + v41) = v54;
  swift_bridgeObjectRetain(v44);
  swift_retain(v35);
  dispatch thunk of XPCEventPublisher.fire(event:forToken:replyQueue:replyHandler:)(v16, v38, v47, sub_10003F060, v42);
  swift_release(v42);
  uint64_t v45 = v58;
  uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
  v46(v16, v58);
  v46((uint64_t)v49, v45);
  swift_release(v35);
  sub_10000FF80();
}

uint64_t sub_10003DF7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v113 = (char *)a5;
  uint64_t v115 = a4;
  uint64_t v116 = a3;
  uint64_t v117 = type metadata accessor for XPCError(0LL);
  uint64_t v7 = *(void *)(v117 - 8);
  uint64_t v9 = __chkstk_darwin(v117, v8);
  os_log_type_t v112 = (char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v111 = (char *)&v108 - v13;
  uint64_t v15 = __chkstk_darwin(v12, v14);
  os_log_t v110 = (char *)&v108 - v16;
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v114 = (char *)&v108 - v19;
  __chkstk_darwin(v18, v20);
  uint64_t v22 = (char *)&v108 - v21;
  uint64_t v23 = type metadata accessor for XPCDictionary(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v26 = __chkstk_darwin(v23, v25);
  os_log_type_t v28 = (char *)&v108 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26, v29);
  uint64_t v31 = (char *)&v108 - v30;
  uint64_t v32 = sub_10000FD7C(&qword_100081A90);
  __chkstk_darwin(v32, v33);
  uint64_t v35 = (char *)&v108 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v121, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (!result) {
    return result;
  }
  uint64_t v37 = result;
  sub_100012218(a1, (uint64_t)v35);
  if (swift_getEnumCaseMultiPayload(v35, v32) != 1)
  {
    uint64_t v62 = (*(uint64_t (**)(char *, char *, uint64_t))(v24 + 32))(v31, v35, v23);
    XPCDictionary.entitlements.getter(v62);
    char v63 = XPCDictionary.subscript.getter(0xD00000000000002BLL, 0x8000000100069EB0LL);
    uint64_t v46 = *(uint64_t (**)(char *, uint64_t))(v24 + 8);
    uint64_t v64 = v46(v28, v23);
    if ((v63 & 1) != 0)
    {
      os_log_type_t v90 = static os_log_type_t.default.getter(v64);
      uint64_t v66 = *(os_log_s **)(v37 + 16);
      os_log_type_t v67 = v90;
      if (os_log_type_enabled(v66, v90))
      {
        uint64_t v91 = v115;
        swift_bridgeObjectRetain_n(v115, 2LL);
        uint64_t v69 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v70 = swift_slowAlloc(32LL, -1LL);
        v120[0] = v70;
        uint64_t v109 = v37;
        *(_DWORD *)uint64_t v69 = 136446210;
        swift_bridgeObjectRetain(v91);
        sub_100045370(v116, v91, v120);
        uint64_t v119 = (char *)v92;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120, v69 + 4, v69 + 12);
        swift_bridgeObjectRelease_n(v91, 3LL);
        uint64_t v72 = "Received response to request for metadata for domain %{public}s";
        goto LABEL_15;
      }
    }

    else
    {
      os_log_type_t v65 = static os_log_type_t.fault.getter(v64);
      uint64_t v66 = *(os_log_s **)(v37 + 16);
      os_log_type_t v67 = v65;
      if (os_log_type_enabled(v66, v65))
      {
        uint64_t v68 = v115;
        swift_bridgeObjectRetain_n(v115, 2LL);
        uint64_t v69 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v70 = swift_slowAlloc(32LL, -1LL);
        v120[0] = v70;
        uint64_t v109 = v37;
        *(_DWORD *)uint64_t v69 = 136315138;
        swift_bridgeObjectRetain(v68);
        sub_100045370(v116, v68, v120);
        uint64_t v119 = (char *)v71;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120, v69 + 4, v69 + 12);
        swift_bridgeObjectRelease_n(v68, 3LL);
        uint64_t v72 = "Binary registered as metadata provider for domain %s does not have required entitlement";
LABEL_15:
        _os_log_impl((void *)&_mh_execute_header, v66, v67, v72, v69, 0xCu);
        swift_arrayDestroy(v70, 1LL);
        swift_slowDealloc(v70, -1LL, -1LL);
        swift_slowDealloc(v69, -1LL, -1LL);
        uint64_t v61 = (uint64_t)v31;
LABEL_16:
        v46((char *)v61, v23);
LABEL_17:
        uint64_t v93 = v109;
        return swift_release(v93);
      }
    }

    v46(v31, v23);
    uint64_t v93 = v37;
    return swift_release(v93);
  }

  uint64_t v38 = (uint64_t)v22;
  uint64_t v23 = v117;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v22, v35, v117);
  uint64_t v39 = swift_beginAccess(v37 + 80, v120, 0LL, 0LL);
  uint64_t v40 = *(void *)(v37 + 80);
  if (!*(void *)(v40 + 16)
    || (swift_bridgeObjectRetain(*(void *)(v37 + 80)),
        sub_100051B9C((uint64_t)v113),
        char v42 = v41,
        uint64_t v39 = swift_bridgeObjectRelease(v40),
        (v42 & 1) == 0))
  {
    os_log_type_t v73 = static os_log_type_t.error.getter(v39);
    uint64_t v74 = *(os_log_s **)(v37 + 16);
    uint64_t v75 = v37;
    uint64_t v76 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    int v77 = v112;
    v76(v112, v38, v23);
    os_log_type_t v78 = v73;
    if (!os_log_type_enabled(v74, v73))
    {
      uint64_t v94 = *(void (**)(char *, uint64_t))(v7 + 8);
      v94(v77, v23);
      v94((char *)v38, v23);
      uint64_t v93 = v75;
      return swift_release(v93);
    }

    uint64_t v79 = v115;
    swift_bridgeObjectRetain_n(v115, 2LL);
    uint64_t v80 = swift_slowAlloc(22LL, -1LL);
    uint64_t v113 = (char *)v38;
    uint64_t v81 = v80;
    uint64_t v111 = (char *)swift_slowAlloc(64LL, -1LL);
    uint64_t v119 = v111;
    *(_DWORD *)uint64_t v81 = 136446466;
    swift_bridgeObjectRetain(v79);
    sub_100045370(v116, v79, (uint64_t *)&v119);
    uint64_t v118 = v82;
    uint64_t v109 = v75;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v81 + 4, v81 + 12);
    swift_bridgeObjectRelease_n(v79, 3LL);
    *(_WORD *)(v81 + 12) = 2080;
    uint64_t v83 = v114;
    v76(v114, (uint64_t)v77, v23);
    uint64_t v84 = String.init<A>(describing:)(v83, v23);
    uint64_t v86 = v85;
    sub_100045370(v84, v85, (uint64_t *)&v119);
    uint64_t v118 = v87;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v81 + 14, v81 + 22);
    swift_bridgeObjectRelease(v86);
    uint64_t v88 = *(void (**)(char *, uint64_t))(v7 + 8);
    v88(v77, v23);
    _os_log_impl( (void *)&_mh_execute_header,  v74,  v78,  "Received error response to request for metadata for domain %{public}s from now-unregistered subscriber: %s. Not retrying",  (uint8_t *)v81,  0x16u);
    uint64_t v89 = v111;
    swift_arrayDestroy(v111, 2LL);
    swift_slowDealloc(v89, -1LL, -1LL);
    swift_slowDealloc(v81, -1LL, -1LL);
    v88(v113, v23);
    goto LABEL_17;
  }

  uint64_t v43 = v114;
  static XPCError.connectionInvalid.getter(v39);
  sub_100029E64( &qword_100082D48,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCError,  (uint64_t)&protocol conformance descriptor for XPCError);
  char v45 = static _Error.~= infix(_:_:)(v22, v43, v23, v44);
  uint64_t v46 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  uint64_t v47 = v46(v43, v23);
  os_log_type_t v48 = static os_log_type_t.error.getter(v47);
  uint64_t v109 = v37;
  uint64_t v49 = *(os_log_s **)(v37 + 16);
  uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  if ((v45 & 1) != 0)
  {
    uint64_t v51 = v110;
    v50(v110, v22, v23);
    if (os_log_type_enabled(v49, v48))
    {
      uint64_t v52 = v115;
      swift_bridgeObjectRetain_n(v115, 2LL);
      uint64_t v53 = swift_slowAlloc(22LL, -1LL);
      os_log_type_t v112 = (char *)swift_slowAlloc(64LL, -1LL);
      uint64_t v113 = (char *)v38;
      uint64_t v119 = v112;
      *(_DWORD *)uint64_t v53 = 136446466;
      swift_bridgeObjectRetain(v52);
      sub_100045370(v116, v52, (uint64_t *)&v119);
      uint64_t v118 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v53 + 4, v53 + 12);
      swift_bridgeObjectRelease_n(v52, 3LL);
      *(_WORD *)(v53 + 12) = 2080;
      uint64_t v55 = v114;
      v50(v114, v51, v23);
      uint64_t v56 = String.init<A>(describing:)(v55, v23);
      uint64_t v58 = v57;
      sub_100045370(v56, v57, (uint64_t *)&v119);
      uint64_t v118 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v53 + 14, v53 + 22);
      swift_bridgeObjectRelease(v58);
      v46(v51, v23);
      _os_log_impl( (void *)&_mh_execute_header,  v49,  v48,  "Received XPC_ERRROR_CONNECTION_INVALID response to request for metadata for domain %{public}s: %s. Not retrying",  (uint8_t *)v53,  0x16u);
      uint64_t v60 = v112;
      swift_arrayDestroy(v112, 2LL);
      swift_slowDealloc(v60, -1LL, -1LL);
      swift_slowDealloc(v53, -1LL, -1LL);
      uint64_t v61 = (uint64_t)v113;
    }

    else
    {
      v46(v51, v23);
      uint64_t v61 = (uint64_t)v22;
    }

    goto LABEL_16;
  }

  BOOL v95 = v111;
  v50(v111, v22, v23);
  BOOL v96 = os_log_type_enabled(v49, v48);
  uint64_t v98 = v115;
  uint64_t v97 = v116;
  if (v96)
  {
    swift_bridgeObjectRetain_n(v115, 2LL);
    uint64_t v99 = swift_slowAlloc(22LL, -1LL);
    os_log_type_t v112 = (char *)swift_slowAlloc(64LL, -1LL);
    uint64_t v119 = v112;
    *(_DWORD *)uint64_t v99 = 136446466;
    LODWORD(v11_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v48;
    swift_bridgeObjectRetain(v98);
    sub_100045370(v97, v98, (uint64_t *)&v119);
    uint64_t v118 = v100;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v99 + 4, v99 + 12);
    swift_bridgeObjectRelease_n(v98, 3LL);
    *(_WORD *)(v99 + 12) = 2080;
    Swift::String v101 = v114;
    v50(v114, v95, v117);
    uint64_t v102 = String.init<A>(describing:)(v101, v117);
    uint64_t v104 = v103;
    sub_100045370(v102, v103, (uint64_t *)&v119);
    uint64_t v118 = v105;
    uint64_t v97 = v116;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v99 + 14, v99 + 22);
    swift_bridgeObjectRelease(v104);
    v46(v95, v117);
    _os_log_impl( (void *)&_mh_execute_header,  v49,  (os_log_type_t)v110,  "Received error response to request for metadata for domain %{public}s: %s. Retrying",  (uint8_t *)v99,  0x16u);
    uint64_t v106 = v112;
    swift_arrayDestroy(v112, 2LL);
    uint64_t v23 = v117;
    swift_slowDealloc(v106, -1LL, -1LL);
    swift_slowDealloc(v99, -1LL, -1LL);
  }

  else
  {
    v46(v95, v23);
  }

  uint64_t v107 = v109;
  sub_10003DC8C(v113, v97, v98);
  swift_release(v107);
  return v46((char *)v38, v23);
}

uint64_t sub_10003E988(uint64_t a1)
{
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  uint64_t v4 = *(os_log_s **)(v1 + 16);
  os_log_type_t v5 = v3;
  uint64_t result = os_log_type_enabled(v4, v3);
  if ((_DWORD)result)
  {
    sub_100012474();
    sub_100012474();
    uint64_t v7 = (uint8_t *)sub_1000122E0(12LL);
    uint64_t v8 = sub_1000122E0(32LL);
    uint64_t v14 = a1;
    uint64_t v15 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    sub_100012474();
    uint64_t v9 = sub_10000FD7C(&qword_100081A10);
    uint64_t v10 = String.init<A>(describing:)(&v14, v9);
    uint64_t v12 = v11;
    sub_100045370(v10, v11, &v15);
    uint64_t v14 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    sub_100016D10((void *)&_mh_execute_header, v4, v5, "Received error from metadata XPC event publisher: %s", v7);
    sub_100012450(v8);
    sub_10001001C(v8);
    return sub_10001001C((uint64_t)v7);
  }

  return result;
}

uint64_t sub_10003EAC4()
{
  swift_unknownObjectRelease(*(void *)(v0 + 32));
  swift_release();
  sub_10002FBF0(*(void *)(v0 + 56), *(void *)(v0 + 64));
  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  swift_bridgeObjectRelease(*(void *)(v0 + 88));
  swift_bridgeObjectRelease(*(void *)(v0 + 96));
  return v0;
}

uint64_t sub_10003EB18()
{
  return swift_deallocClassInstance(v0, 104LL, 7LL);
}

uint64_t type metadata accessor for AuxiliaryMetadataService()
{
  return objc_opt_self(&OBJC_CLASS____TtC20remotepairingdeviced24AuxiliaryMetadataService);
}

uint64_t sub_10003EB60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AuxiliaryMetadataItem(0LL);
  uint64_t v67 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v66 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v60 - v9;
  uint64_t v11 = sub_10000FD7C(&qword_100082AC0);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v13, v16);
  uint64_t v19 = (uint64_t *)((char *)&v60 - v18);
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v68 = 0LL;
  uint64_t v64 = a1;
  uint64_t v65 = a2;
  uint64_t v22 = *(void *)(a1 + 64);
  uint64_t v21 = a1 + 64;
  uint64_t v20 = v22;
  uint64_t v23 = 1LL << *(_BYTE *)(v21 - 32);
  uint64_t v24 = -1LL;
  if (v23 < 64) {
    uint64_t v24 = ~(-1LL << v23);
  }
  unint64_t v25 = v24 & v20;
  uint64_t v62 = v21;
  int64_t v63 = (unint64_t)(v23 + 63) >> 6;
  int64_t v61 = v63 - 1;
  uint64_t v26 = (uint64_t *)&unk_100082AC8;
  uint64_t v70 = v4;
  while (1)
  {
    if (v25)
    {
      unint64_t v27 = __clz(__rbit64(v25));
      uint64_t v28 = (v25 - 1) & v25;
      uint64_t v29 = v67;
      unint64_t v30 = v27 | (v68 << 6);
LABEL_8:
      uint64_t v31 = *(void *)(v64 + 56);
      uint64_t v32 = (void *)(*(void *)(v64 + 48) + 16 * v30);
      uint64_t v33 = v32[1];
      *(void *)uint64_t v15 = *v32;
      *((void *)v15 + 1) = v33;
      uint64_t v34 = v31 + *(void *)(v29 + 72) * v30;
      uint64_t v35 = sub_10000FD7C(v26);
      (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(&v15[*(int *)(v35 + 48)], v34, v70);
      sub_10001D930((uint64_t)v15, 0LL, 1LL, v35);
      swift_bridgeObjectRetain(v33);
      goto LABEL_30;
    }

    int64_t v36 = v68 + 1;
    if (__OFADD__(v68, 1LL))
    {
      __break(1u);
      goto LABEL_39;
    }

    uint64_t v29 = v67;
    if (v36 < v63)
    {
      unint64_t v37 = *(void *)(v62 + 8 * v36);
      if (v37) {
        goto LABEL_12;
      }
      int64_t v38 = v68 + 2;
      ++v68;
      if (v36 + 1 < v63)
      {
        unint64_t v37 = *(void *)(v62 + 8 * v38);
        if (v37) {
          goto LABEL_15;
        }
        int64_t v68 = v36 + 1;
        if (v36 + 2 < v63)
        {
          unint64_t v37 = *(void *)(v62 + 8 * (v36 + 2));
          if (v37)
          {
            v36 += 2LL;
            goto LABEL_12;
          }

          int64_t v68 = v36 + 2;
          if (v36 + 3 < v63)
          {
            unint64_t v37 = *(void *)(v62 + 8 * (v36 + 3));
            if (v37)
            {
              v36 += 3LL;
              goto LABEL_12;
            }

            int64_t v38 = v36 + 4;
            int64_t v68 = v36 + 3;
            if (v36 + 4 < v63) {
              break;
            }
          }
        }
      }
    }

uint64_t sub_10003EFB8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10003EFDC()
{
  uint64_t v1 = sub_10003F144();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_release();
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10003F060(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(sub_10003F144() - 8) + 80LL);
  return sub_10003DF7C(a1, v1[2], v1[3], v1[4], (uint64_t)v1 + ((v3 + 40) & ~v3));
}

unint64_t sub_10003F0B4()
{
  unint64_t result = qword_1000809A0;
  if (!qword_1000809A0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_os_log);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000809A0);
  }

  return result;
}

uint64_t sub_10003F0F0(uint64_t a1)
{
  return sub_10003C97C(a1, v1);
}

uint64_t sub_10003F0F8(uint64_t a1)
{
  return sub_10003C9D8(a1, v1);
}

uint64_t sub_10003F100(uint64_t a1, uint64_t a2)
{
  return sub_10003CA34(a1, a2, v2);
}

uint64_t sub_10003F118()
{
  return swift_allocObject(v0, 24LL, 7LL);
}

void sub_10003F128(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (a2 - 32) | 0x8000000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

  ;
}

uint64_t sub_10003F144()
{
  return type metadata accessor for XPCEventPublisher.Token(0LL);
}

uint64_t sub_10003F14C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v6 - 72) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 72, v5, v4, a4);
}

void sub_10003F160()
{
  *(_WORD *)(v0 + 12) = 1024;
}

uint64_t sub_10003F17C(uint64_t a1, uint64_t a2)
{
  return sub_10001DBA4(a1, a2);
}

uint64_t sub_10003F184()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 96))(v0, v2);
}

BOOL sub_10003F194(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

uint64_t sub_10003F1B4(uint64_t a1, uint64_t a2)
{
  return swift_allocError(v2, a2, 0LL, 0LL);
}

void sub_10003F1C4(unint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10003F1CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 72, v4, v5, a4);
}

uint64_t sub_10003F1DC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

void sub_10003F1EC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10003F1F8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

uint64_t sub_10003F204@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_10003F20C()
{
  return swift_arrayDestroy(v0, 2LL);
}

uint64_t sub_10003F218()
{
  return AuxiliaryMetadataUpdate.domain.getter();
}

uint64_t sub_10003F220(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v4, v3);
}

uint64_t sub_10003F22C()
{
  return type metadata accessor for AuxiliaryMetadataItem(0LL);
}

uint64_t sub_10003F238()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_10003F244()
{
  return type metadata accessor for XPCDictionary(0LL);
}

void sub_10003F24C(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

BOOL sub_10003F258()
{
  nw_path_t v1 = nw_connection_copy_current_path(v0);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  BOOL v3 = (nw_path_is_local() & 1) != 0 || nw_path_uses_interface_type(v2, nw_interface_type_loopback);
  sub_100016C68();
  return v3;
}

void sub_10003F2B0()
{
  nw_error_domain_t error_domain = nw_error_get_error_domain(v0);
  if (error_domain - 2 >= 2)
  {
    if (error_domain != nw_error_domain_posix
      || (uint64_t error_code = nw_error_get_error_code(v0),
          uint64_t v8 = POSIXErrorCode.init(rawValue:)(error_code),
          (v8 & 0x100000000LL) != 0))
    {
      uint64_t v18 = type metadata accessor for RemotePairingError(0LL);
      uint64_t v19 = sub_10001DAE0( (unint64_t *)&unk_1000819E0,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
      swift_allocError(v18, v19, 0LL, 0LL);
      uint64_t v20 = sub_10001DAE0( (unint64_t *)&unk_1000813E0,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
      static Error<>.unknown.getter(v18, v20);
    }

    else
    {
      int v9 = v8;
      uint64_t v10 = type metadata accessor for POSIXError(0LL);
      uint64_t v11 = *(void *)(v10 - 8);
      __chkstk_darwin(v10, v12);
      uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      int v22 = v9;
      unint64_t v15 = sub_100040364((uint64_t)&_swiftEmptyArrayStorage);
      unint64_t v16 = sub_10004048C();
      uint64_t v17 = _BridgedStoredNSError.init(_:userInfo:)(&v22, v15, v10, v16);
      POSIXError._nsError.getter(v17);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    }
  }

  else
  {
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
    uint64_t v4 = v3;
    uint64_t v5 = nw_error_get_error_code(v0);
    id v6 = objc_allocWithZone(&OBJC_CLASS___NSError);
    sub_1000402C4(v2, v4, v5, 0LL);
  }

  sub_100031C6C();
}

void OS_nw_connection.send(content:completion:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v12 = (dispatch_data_s *)NWCreateDispatchDataFromNSData();

  uint64_t v13 = (void *)sub_100016BCC((uint64_t)&unk_100078098, 64LL);
  v13[2] = a5;
  v13[3] = v5;
  v13[4] = a1;
  v13[5] = a2;
  v13[6] = a3;
  v13[7] = a4;
  uint64_t v14 = sub_100031AFC((uint64_t)sub_100031E90, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v15, v16);
  swift_unknownObjectRetain(v5);
  sub_1000155D4(a1, a2);
  swift_retain(a4);
  swift_release();
  nw_connection_send(v5, v12, _nw_content_context_default_message, 1, v14);
  _Block_release(v14);
}

void OS_nw_connection.receive(minLength:maxLength:peerConnectionInfo:completion:)( unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((a1 & 0x8000000000000000LL) == 0)
  {
    if (HIDWORD(a1))
    {
LABEL_7:
      sub_10003C144();
      uint64_t v13 = "Not enough bits to represent the passed value";
      uint64_t v14 = 45LL;
      goto LABEL_8;
    }

    uint32_t v7 = a2;
    if ((a2 & 0x8000000000000000LL) == 0)
    {
      if (!HIDWORD(a2))
      {
        uint64_t v11 = (void *)sub_100016BCC((uint64_t)&unk_1000780E8, 48LL);
        v11[2] = a3;
        v11[3] = a1;
        void v11[4] = a4;
        v11[5] = a5;
        aBlock[4] = sub_10004004C;
        void aBlock[5] = v11;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256LL;
        aBlock[2] = sub_100040058;
        aBlock[3] = &unk_100078100;
        uint64_t v12 = _Block_copy(aBlock);
        swift_bridgeObjectRetain(a3);
        swift_retain(a5);
        swift_release();
        nw_connection_receive(v5, a1, v7, v12);
        _Block_release(v12);
        return;
      }

      goto LABEL_7;
    }
  }

  sub_10003C144();
  uint64_t v13 = "Negative value is not representable";
  uint64_t v14 = 35LL;
LABEL_8:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, v13, v14, 2LL, "Swift/Integers.swift", 20LL);
  __break(1u);
}

void OS_nw_connection.receive(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100016BCC((uint64_t)&unk_100078138, 32LL);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  id v6 = sub_100031AFC((uint64_t)sub_100040058, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v7, v8);
  swift_retain(a2);
  swift_release();
  nw_connection_receive_message(v2, v6);
  _Block_release(v6);
}

uint64_t sub_10003F768()
{
  nw_path_t v1 = nw_protocol_copy_quic_definition();
  uint64_t v2 = nw_connection_copy_protocol_metadata(v0, v1);
  uint64_t result = swift_unknownObjectRelease(v1);
  if (v2)
  {
    int stream_type = nw_quic_get_stream_type(v2);
    sub_100016C68();
    return stream_type == 3;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10003F7C8(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t))
{
  if (a1)
  {
    uint64_t v10 = swift_unknownObjectRetain(a1);
    os_log_type_t v11 = static os_log_type_t.error.getter(v10);
    uint64_t v12 = qword_1000845F0;
    os_log_type_t v13 = v11;
    if (os_log_type_enabled((os_log_t)qword_1000845F0, v11))
    {
      swift_unknownObjectRetain(a1);
      swift_unknownObjectRetain(a2);
      sub_1000155D4(a3, a4);
      swift_unknownObjectRetain(a1);
      swift_unknownObjectRetain(a2);
      sub_1000155D4(a3, a4);
      uint64_t v14 = swift_slowAlloc(32LL, -1LL);
      uint64_t v30 = swift_slowAlloc(64LL, -1LL);
      uint64_t v32 = v30;
      *(_DWORD *)uint64_t v14 = 136446722;
      id v15 = [a2 description];
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      log = (os_log_s *)v12;
      uint64_t v18 = v17;

      sub_100045370(v16, v18, &v32);
      uint64_t v31 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v14 + 4, v14 + 12);
      swift_unknownObjectRelease_n(a2, 2LL);
      swift_bridgeObjectRelease(v18);
      *(_WORD *)(v14 + 12) = 2048;
      uint64_t v20 = Data.count.getter(a3, a4);
      sub_100015644(a3, a4);
      uint64_t v31 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v14 + 14, v14 + 22);
      sub_100015644(a3, a4);
      *(_WORD *)(v14 + 22) = 2080;
      uint64_t v31 = a1;
      swift_unknownObjectRetain(a1);
      uint64_t v21 = sub_10000FD7C(&qword_100082DA8);
      uint64_t v22 = String.init<A>(describing:)(&v31, v21);
      uint64_t v24 = v23;
      sub_100045370(v22, v23, &v32);
      uint64_t v31 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v14 + 24, v14 + 32);
      swift_unknownObjectRelease_n(a1, 2LL);
      swift_bridgeObjectRelease(v24);
      _os_log_impl( (void *)&_mh_execute_header,  log,  v13,  "%{public}s: Error sending %ld bytes of data %s",  (uint8_t *)v14,  0x20u);
      swift_arrayDestroy(v30, 2LL);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    swift_unknownObjectRelease(a1);
    sub_10003F2B0();
    uint64_t v27 = v26;
  }

  else
  {
    uint64_t v27 = 0LL;
  }

  a5(v27);
  return swift_errorRelease(v27);
}

uint64_t sub_10003FA7C()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_10003FAB0(uint64_t a1)
{
  return sub_10003F7C8( a1,  *(void **)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void (**)(uint64_t))(v1 + 48));
}

uint64_t sub_10003FAC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10003FAD0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10003FAD8( void *a1, nw_content_context *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void, void, void), uint64_t a8)
{
  uint64_t v16 = type metadata accessor for RemotePairingError(0LL);
  __chkstk_darwin(v16, v17);
  int64_t v68 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2)
  {
    uint64_t is_wake_packet = nw_content_context_get_is_wake_packet(a2);
    if ((_DWORD)is_wake_packet)
    {
      uint64_t v67 = a6;
      os_log_type_t v20 = static os_log_type_t.default.getter(is_wake_packet);
      uint64_t v21 = (os_log_s *)powerLog.getter();
      if (os_log_type_enabled(v21, v20))
      {
        swift_bridgeObjectRetain_n(a5, 2LL);
        uint64_t v64 = v16;
        uint64_t v22 = swift_slowAlloc(12LL, -1LL);
        uint64_t v66 = a8;
        uint64_t v23 = (uint8_t *)v22;
        uint64_t v63 = swift_slowAlloc(32LL, -1LL);
        *(void *)&v73[0] = v63;
        uint64_t v65 = a7;
        *(_DWORD *)uint64_t v23 = 136315138;
        uint64_t v62 = v23 + 4;
        *(void *)&__int128 v71 = a5;
        swift_bridgeObjectRetain(a5);
        uint64_t v24 = sub_10000FD7C(&qword_100082DA0);
        uint64_t v25 = String.init<A>(describing:)(&v71, v24);
        uint64_t v27 = v26;
        sub_100045370(v25, v26, (uint64_t *)v73);
        *(void *)&__int128 v71 = v28;
        a7 = v65;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, (char *)&v71 + 8, v62, v23 + 12);
        swift_bridgeObjectRelease_n(a5, 2LL);
        uint64_t v29 = v27;
        uint64_t v16 = v64;
        swift_bridgeObjectRelease(v29);
        _os_log_impl((void *)&_mh_execute_header, v21, v20, "Received a wake packet from: %s", v23, 0xCu);
        uint64_t v30 = v63;
        swift_arrayDestroy(v63, 1LL);
        swift_slowDealloc(v30, -1LL, -1LL);
        uint64_t v31 = v23;
        a8 = v66;
        swift_slowDealloc(v31, -1LL, -1LL);
      }

      a6 = v67;
    }

    if ((a3 & 1) != 0)
    {
      BOOL is_final = nw_content_context_get_is_final(a2);
      if (!a4) {
        goto LABEL_8;
      }
LABEL_15:
      swift_unknownObjectRetain(a4);
      sub_10003F2B0();
      uint64_t v34 = v40;
      swift_unknownObjectRelease(a4);
LABEL_21:
      unint64_t v35 = 0LL;
      BOOL v37 = 1LL;
      goto LABEL_22;
    }
  }

  BOOL is_final = 0;
  if (a4) {
    goto LABEL_15;
  }
LABEL_8:
  if (!a1)
  {
LABEL_17:
    int v41 = v68;
    uint64_t v42 = sub_10001DAE0( (unint64_t *)&unk_1000813E0,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    static Error<>.dataCorrupted.getter(v16, v42);
    uint64_t v43 = sub_10001DAE0( (unint64_t *)&unk_1000819E0,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    uint64_t v34 = swift_allocError(v16, v43, 0LL, 0LL);
    if (is_final)
    {
      unint64_t v44 = 0xD00000000000002ELL;
      uint64_t v45 = "Connection closed by remote side with no error";
    }

    else
    {
      unint64_t v44 = 0xD00000000000002BLL;
      uint64_t v45 = "Connection received no content and no error";
    }

    Error<>.init(_:_:)(v41, v44, (unint64_t)(v45 - 32) | 0x8000000000000000LL, v16, v42);
    goto LABEL_21;
  }

  unint64_t v72 = sub_1000406BC();
  *(void *)&__int128 v71 = a1;
  sub_10001DC14(&v71, v73);
  sub_10001DBA4((uint64_t)v73, (uint64_t)&v71);
  id v33 = a1;
  if ((swift_dynamicCast(&v69, &v71, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) == 0)
  {
    sub_10000FF38(v73);
    goto LABEL_17;
  }

  uint64_t v34 = v69;
  unint64_t v35 = v70;
  uint64_t v36 = Data.count.getter(v69, v70);
  BOOL v37 = v36 < a6;
  if (v36 < a6)
  {
    uint64_t v66 = a8;
    *(void *)&__int128 v71 = 0LL;
    *((void *)&v71 + 1) = 0xE000000000000000LL;
    if (is_final)
    {
      _StringGuts.grow(_:)(61LL);
      unint64_t v38 = 0xD000000000000017LL;
      uint64_t v39 = "Connection closed with ";
    }

    else
    {
      _StringGuts.grow(_:)(63LL);
      unint64_t v38 = 0xD000000000000019LL;
      uint64_t v39 = "Connection received only ";
    }

    unint64_t v47 = (unint64_t)(v39 - 32) | 0x8000000000000000LL;
    String.append(_:)(*(Swift::String *)&v38);
    uint64_t v69 = Data.count.getter(v34, v35);
    v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    object = v48._object;
    String.append(_:)(v48);
    swift_bridgeObjectRelease(object);
    v50._countAndFlagsBits = 543584032LL;
    v50._object = (void *)0xE400000000000000LL;
    String.append(_:)(v50);
    uint64_t v69 = a6;
    v51._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    unint64_t v52 = v51._object;
    String.append(_:)(v51);
    swift_bridgeObjectRelease(v52);
    v53._object = (void *)0x800000010006A180LL;
    v53._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v53);
    __int128 v54 = v71;
    uint64_t v55 = sub_10001DAE0( (unint64_t *)&unk_1000813E0,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    uint64_t v56 = v68;
    static Error<>.dataCorrupted.getter(v16, v55);
    uint64_t v57 = sub_10001DAE0( (unint64_t *)&unk_1000819E0,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    uint64_t v58 = swift_allocError(v16, v57, 0LL, 0LL);
    uint64_t v59 = v16;
    uint64_t v60 = v58;
    Error<>.init(_:_:)(v56, v54, *((void *)&v54 + 1), v59, v55);
    sub_100015644(v34, v35);
    sub_10000FF38(v73);
    unint64_t v35 = 0LL;
    uint64_t v34 = v60;
  }

  else
  {
    sub_10000FF38(v73);
  }

LABEL_22:
  a7(v34, v35, v37);
  return sub_100016A64(v34, v35, v37);
}

    sub_10000FFDC();
    sub_1000575C8();
    sub_100012464();

    goto LABEL_26;
  }

  sub_1000571D0();
  if (!v16 & v15) {
    goto LABEL_17;
  }
  sub_1000571C4();
  sub_100056F9C();
  uint64_t v28 = sub_100056E60();
  if ((v2 & 1) != 0) {
    goto LABEL_22;
  }
LABEL_18:
  uint64_t v17 = static os_log_type_t.default.getter(v28);
  uint64_t v18 = (os_log_s *)qword_1000845F0;
  if (sub_1000571B8(v17))
  {
    uint64_t v19 = v4;
    sub_1000122E0(12LL);
    os_log_type_t v20 = sub_100056EE0();
    uint8_t *v4 = 136315138;
    uint64_t v21 = sub_1000574B8(v20, "identifier");
    sub_10000FD7C((uint64_t *)&unk_1000835C0);
    sub_100057040();
    __chkstk_darwin(v22, v23);
    sub_1000203EC();
    if (v21)
    {
      sub_10005732C();

      uint64_t v24 = sub_10001DCE0();
      uint64_t v26 = v24;
      uint64_t v27 = 0LL;
    }

    else
    {
      uint64_t v24 = sub_10001DCE0();
      uint64_t v26 = v24;
      uint64_t v27 = 1LL;
    }

    uint64_t v29 = sub_100056F4C(v24, v27, v25, v26);
    sub_10005715C(v29, v30);
    sub_100056F00(v31);

    sub_100016D6C();
    sub_10004843C( (void *)&_mh_execute_header,  v18,  v17,  "Newly configured connection's resolved peer %s no longer exists in the keychain");
    sub_100056E90();
    sub_10001001C(v20);
    sub_10001001C((uint64_t)v4);
  }

LABEL_26:
  sub_10000FF80();
}

    sub_10000FFDC();
    sub_1000575C8();
    sub_100012464();

    goto LABEL_26;
  }

  sub_1000571D0();
  if (!v16 & v15) {
    goto LABEL_17;
  }
  sub_1000571C4();
  sub_100056F9C();
  uint64_t v28 = sub_100056E60();
  if ((v2 & 1) != 0) {
    goto LABEL_22;
  }
LABEL_18:
  uint64_t v17 = static os_log_type_t.default.getter(v28);
  uint64_t v18 = (os_log_s *)qword_1000845F0;
  if (sub_1000571B8(v17))
  {
    uint64_t v19 = v4;
    sub_1000122E0(12LL);
    os_log_type_t v20 = sub_100056EE0();
    uint8_t *v4 = 136315138;
    uint64_t v21 = sub_1000574B8(v20, "identifier");
    sub_10000FD7C((uint64_t *)&unk_1000835C0);
    sub_100057040();
    __chkstk_darwin(v22, v23);
    sub_1000203EC();
    if (v21)
    {
      sub_10005732C();

      uint64_t v24 = sub_10001DCE0();
      uint64_t v26 = v24;
      uint64_t v27 = 0LL;
    }

    else
    {
      uint64_t v24 = sub_10001DCE0();
      uint64_t v26 = v24;
      uint64_t v27 = 1LL;
    }

    uint64_t v29 = sub_100056F4C(v24, v27, v25, v26);
    sub_10005715C(v29, v30);
    sub_100056F00(v31);

    sub_100016D6C();
    sub_10004843C( (void *)&_mh_execute_header,  v18,  v17,  "Newly configured connection's resolved peer %s no longer exists in the keychain");
    sub_100056E90();
    sub_10001001C(v20);
    sub_10001001C((uint64_t)v4);
  }

LABEL_26:
  sub_10000FF80();
}

    sub_10000FFDC();
    sub_1000575C8();
    sub_100012464();

    goto LABEL_26;
  }

  sub_1000571D0();
  if (!v16 & v15) {
    goto LABEL_17;
  }
  sub_1000571C4();
  sub_100056F9C();
  uint64_t v28 = sub_100056E60();
  if ((v2 & 1) != 0) {
    goto LABEL_22;
  }
LABEL_18:
  uint64_t v17 = static os_log_type_t.default.getter(v28);
  uint64_t v18 = (os_log_s *)qword_1000845F0;
  if (sub_1000571B8(v17))
  {
    uint64_t v19 = v4;
    sub_1000122E0(12LL);
    os_log_type_t v20 = sub_100056EE0();
    uint8_t *v4 = 136315138;
    uint64_t v21 = sub_1000574B8(v20, "identifier");
    sub_10000FD7C((uint64_t *)&unk_1000835C0);
    sub_100057040();
    __chkstk_darwin(v22, v23);
    sub_1000203EC();
    if (v21)
    {
      sub_10005732C();

      uint64_t v24 = sub_10001DCE0();
      uint64_t v26 = v24;
      uint64_t v27 = 0LL;
    }

    else
    {
      uint64_t v24 = sub_10001DCE0();
      uint64_t v26 = v24;
      uint64_t v27 = 1LL;
    }

    uint64_t v29 = sub_100056F4C(v24, v27, v25, v26);
    sub_10005715C(v29, v30);
    sub_100056F00(v31);

    sub_100016D6C();
    sub_10004843C( (void *)&_mh_execute_header,  v18,  v17,  "Newly configured connection's resolved peer %s no longer exists in the keychain");
    sub_100056E90();
    sub_10001001C(v20);
    sub_10001001C((uint64_t)v4);
  }

LABEL_26:
  sub_10000FF80();
}

uint64_t sub_100040020()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10004004C(void *a1, nw_content_context *a2, char a3, uint64_t a4)
{
  return sub_10003FAD8( a1,  a2,  a3,  a4,  *(void *)(v4 + 16),  *(void *)(v4 + 24),  *(void (**)(void, void, void))(v4 + 32),  *(void *)(v4 + 40));
}

void sub_100040058(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain(*(void *)(a1 + 40));
  id v10 = a2;
  swift_unknownObjectRetain(a3);
  swift_unknownObjectRetain(a5);
  v9(a2, a3, a4, a5);
  swift_release();
  sub_100016C68();
  swift_unknownObjectRelease(a3);
}

uint64_t sub_1000400EC( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, unint64_t, uint64_t))
{
  uint64_t v8 = type metadata accessor for RemotePairingError(0LL);
  __chkstk_darwin(v8, v9);
  os_log_type_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1
    && (unint64_t v22 = sub_1000406BC(),
        *(void *)&__int128 v21 = a1,
        sub_10001DC14(&v21, v23),
        sub_10001DC14(v23, &v21),
        id v12 = a1,
        (swift_dynamicCast(v20, &v21, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0))
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = v20[0];
    unint64_t v14 = v20[1];
  }

  else
  {
    if (a4)
    {
      swift_unknownObjectRetain(a4);
      sub_10003F2B0();
      uint64_t v15 = v16;
      swift_unknownObjectRelease(a4);
    }

    else
    {
      uint64_t v17 = sub_10001DAE0( (unint64_t *)&unk_1000813E0,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
      static Error<>.dataCorrupted.getter(v8, v17);
      uint64_t v18 = sub_10001DAE0( (unint64_t *)&unk_1000819E0,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
      uint64_t v15 = swift_allocError(v8, v18, 0LL, 0LL);
      Error<>.init(_:_:)(v11, 0xD00000000000002ELL, 0x800000010006A100LL, v8, v17);
    }

    unint64_t v14 = 0LL;
    uint64_t v13 = 1LL;
  }

  a5(v15, v14, v13);
  return sub_100016A64(v15, v14, v13);
}

uint64_t sub_100040298()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000402BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000400EC(a1, a2, a3, a4, *(void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16));
}

void sub_1000402C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (a4)
  {
    v9.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a4);
  }

  else
  {
    v9.super.Class isa = 0LL;
  }

  [v4 initWithDomain:v8 code:a3 userInfo:v9.super.isa];

  sub_100031C6C();
}

unint64_t sub_100040364(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_10000FD7C(&qword_100082D88);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100040530(v7, (uint64_t)&v16);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_1000404CC(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    id v12 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_10001DC14(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10004048C()
{
  unint64_t result = qword_1000819F0;
  if (!qword_1000819F0)
  {
    uint64_t v1 = type metadata accessor for POSIXError(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for POSIXError, v1);
    atomic_store(result, (unint64_t *)&qword_1000819F0);
  }

  return result;
}

unint64_t sub_1000404CC(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = Hasher._finalize()();
  return sub_100040578(a1, a2, v4);
}

uint64_t sub_100040530(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD7C(&qword_100082D90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100040578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * i);
    uint64_t v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      unint64_t i = (i + 1) & v13;
      if (((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
      {
        BOOL v14 = (void *)(v9 + 16 * i);
        uint64_t v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v13; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v13)
          {
            uint64_t v17 = (void *)(v9 + 16 * i);
            uint64_t v18 = v17[1];
            if (*v17 == a1 && v18 == a2) {
              break;
            }
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0) {
              break;
            }
          }
        }
      }
    }
  }

  return i;
}

unint64_t sub_1000406BC()
{
  unint64_t result = qword_100082D98;
  if (!qword_100082D98)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_data);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100082D98);
  }

  return result;
}

uint64_t sub_100040708(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = sub_10000FFDC();
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_100040730(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  sub_10000FFDC();
  uint64_t v4 = sub_100045F88();
  v3(v4);
  swift_release();
  return sub_100045F0C(a2);
}

BOOL sub_100040768(int a1, int a2)
{
  return a1 == a2;
}

uint64_t sub_100040778(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  sub_10000FFDC();
  v3(a2);
  return swift_release();
}

uint64_t sub_1000407B0()
{
  if (!nw_connection_copy_current_path(*(nw_connection_t *)(v0
                                                           + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_connection)))
    return 0LL;
  uint64_t v1 = (nw_interface *)nw_path_copy_interface();
  if (!v1)
  {
    sub_100016C68();
    return 0LL;
  }

  name = nw_interface_get_name(v1);
  uint64_t v3 = String.init(cString:)(name);
  uint64_t v5 = v4;
  os_log_type_t v6 = static os_log_type_t.info.getter(v3);
  uint64_t v7 = (os_log_s *)qword_1000845F0;
  os_log_type_t v8 = v6;
  if (os_log_type_enabled((os_log_t)qword_1000845F0, v6))
  {
    swift_bridgeObjectRetain_n(v5, 2LL);
    uint64_t v9 = (uint8_t *)sub_1000122E0(12LL);
    uint64_t v10 = sub_1000122E0(32LL);
    uint64_t v22 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain(v5);
    sub_100045370(v3, v5, &v22);
    uint64_t v19 = sub_100045F6C(v11, v12, v13, v14, v15, v16, v17, v18, v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v19, v20, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v5, 3LL);
    sub_100016D10((void *)&_mh_execute_header, v7, v8, "Tunnel connection path interface name: %s", v9);
    swift_arrayDestroy(v10, 1LL);
    sub_10001001C(v10);
    sub_10001001C((uint64_t)v9);
  }

  sub_100046000();
  sub_100016C68();
  return v3;
}

void sub_100040924(uint64_t a1, char a2, uint64_t a3)
{
  *(_OWORD *)(v3 + swift_weakDestroy(v0 + 16) = xmmword_100062750;
  *(void *)(v3 + 32) = static IPv6Header.minHeaderLength.getter();
  *(void *)(v3 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = 0x80000LL;
  uint64_t v7 = sub_10004602C();
  Identifier.init()(v7, &protocol witness table for TunnelConnectionIdentifierCategory);
  *(void *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_connection) = a1;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper__allowLocalConnectionsOnly) = a2;
  *(void *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_peerConnectionsInfo) = a3;
  sub_100031C6C();
}

void sub_1000409A8()
{
  uint64_t ObjectType = swift_getObjectType(*(void *)(v1
                                             + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_connection));
  OS_nw_connection.send(content:completion:)(v4, v3, v2, v0, ObjectType);
  sub_100031C6C();
}

void sub_1000409F4()
{
}

void sub_100040A50()
{
  nw_connection_cancel(*(nw_connection_t *)(v0
                                          + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_connection));
}

void sub_100040A70(dispatch_queue_s *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  os_log_type_t v8 = *(nw_connection **)(v4 + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_connection);
  uint64_t v9 = sub_100016BCC((uint64_t)&unk_100078218, 24LL);
  sub_100046058(v9);
  uint64_t v10 = sub_100031AFC((uint64_t)sub_100040DA0, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v15, v17);
  swift_release();
  nw_connection_set_viability_changed_handler(v8, v10);
  _Block_release(v10);
  uint64_t v11 = sub_100016BCC((uint64_t)&unk_100078218, 24LL);
  sub_100046058(v11);
  uint64_t v12 = sub_100016BCC((uint64_t)&unk_100078268, 24LL);
  swift_unknownObjectWeakInit(v12 + 16, v8);
  uint64_t v13 = (void *)sub_100016BCC((uint64_t)&unk_100078290, 48LL);
  v13[2] = v11;
  v13[3] = v12;
  v13[4] = a2;
  v13[5] = a3;
  uint64_t v14 = sub_100031AFC((uint64_t)sub_100040774, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v16, v18);
  sub_100010000();
  sub_1000124B8();
  nw_connection_set_state_changed_handler(v8, v14);
  _Block_release(v14);
  nw_connection_set_queue(v8, a1);
  nw_connection_start(v8);
  sub_100045EE0();
}

uint64_t sub_100040BD4(char a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v19, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    if ((a1 & 1) == 0)
    {
      os_log_type_t v6 = static os_log_type_t.error.getter(result);
      uint64_t v7 = (os_log_s *)qword_1000845F0;
      os_log_type_t v8 = v6;
      if (os_log_type_enabled((os_log_t)qword_1000845F0, v6))
      {
        swift_retain_n(v5, 2LL);
        uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v10 = swift_slowAlloc(32LL, -1LL);
        *(_DWORD *)uint64_t v9 = 136446210;
        uint64_t v18 = v10;
        uint64_t v11 = sub_10000FD7C((uint64_t *)&unk_1000813B0);
        sub_100045D28(&qword_100082FA8, (uint64_t *)&unk_1000813B0);
        uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
        uint64_t v15 = v14;
        sub_100045370(v13, v14, &v18);
        uint64_t v17 = v16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v9 + 4, v9 + 12);
        swift_release_n(v5, 2LL);
        swift_bridgeObjectRelease(v15);
        _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "%{public}s: Cancelling tunnel connection as it is no longer viable",  v9,  0xCu);
        swift_arrayDestroy(v10, 1LL);
        swift_slowDealloc(v10, -1LL, -1LL);
        swift_slowDealloc(v9, -1LL, -1LL);
      }

      nw_connection_cancel(*(nw_connection_t *)(v5
                                              + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_connection));
    }

    return swift_release();
  }

  return result;
}

uint64_t sub_100040DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_100040DDC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *))
{
  uint64_t v10 = type metadata accessor for TunnelConnectionState(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a3 += 16LL;
  swift_beginAccess(a3, v43, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a3);
  if (result)
  {
    uint64_t v16 = result;
    uint64_t v17 = a4 + 16;
    swift_beginAccess(v17, v42, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v17);
    if (Strong)
    {
      uint64_t v19 = (nw_connection *)Strong;
      switch(a1)
      {
        case 1:
          unsigned int v40 = static os_log_type_t.error.getter(Strong);
          uint64_t v39 = qword_1000845F0;
          uint64_t v20 = sub_10000FD7C(&qword_100081580);
          uint64_t v21 = swift_allocObject(v20, 72LL, 7LL);
          *(_OWORD *)(v21 + swift_weakDestroy(v0 + 16) = xmmword_100062930;
          uint64_t v41 = a2;
          swift_unknownObjectRetain(a2);
          uint64_t v22 = sub_10000FD7C((uint64_t *)&unk_100082320);
          uint64_t v23 = String.init<A>(describing:)(&v41, v22);
          uint64_t v25 = v24;
          *(void *)(v21 + 56) = &type metadata for String;
          *(void *)(v21 + 64) = sub_10001D978();
          *(void *)(v21 + 32) = v23;
          *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v25;
          os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Connection waiting: %{public}s", 30LL, 2LL, v21);
          goto LABEL_14;
        case 2:
          uint64_t v28 = static os_log_type_t.default.getter(Strong);
          os_log(_:dso:log:_:_:)( v28,  &_mh_execute_header,  qword_1000845F0,  "Connection preparing",  20LL,  2LL,  &_swiftEmptyArrayStorage);
          goto LABEL_8;
        case 3:
          swift_getObjectType(Strong);
          BOOL v29 = sub_10003F258();
          if (v29
            && *(_BYTE *)(v16
                        + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper__allowLocalConnectionsOnly) != 1)
          {
            uint64_t v37 = static os_log_type_t.error.getter(v29);
            os_log(_:dso:log:_:_:)( v37,  &_mh_execute_header,  qword_1000845F0,  "Rejecting tunnel connection originating from local machine",  58LL,  2LL,  &_swiftEmptyArrayStorage);
LABEL_16:
            nw_connection_cancel(v19);
            uint64_t v31 = (unsigned int *)&enum case for TunnelConnectionState.stopped(_:);
          }

          else
          {
            uint64_t v30 = static os_log_type_t.default.getter(v29);
            os_log(_:dso:log:_:_:)( v30,  &_mh_execute_header,  qword_1000845F0,  "Connection established",  22LL,  2LL,  &_swiftEmptyArrayStorage);
            uint64_t v31 = (unsigned int *)&enum case for TunnelConnectionState.ready(_:);
          }

          (*(void (**)(char *, void, uint64_t))(v11 + 104))(v14, *v31, v10);
          a5(v14);
          swift_unknownObjectRelease(v19);
          swift_release();
          return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
        case 4:
          unsigned int v40 = static os_log_type_t.error.getter(Strong);
          uint64_t v39 = qword_1000845F0;
          uint64_t v32 = sub_10000FD7C(&qword_100081580);
          uint64_t v21 = swift_allocObject(v32, 72LL, 7LL);
          *(_OWORD *)(v21 + swift_weakDestroy(v0 + 16) = xmmword_100062930;
          uint64_t v41 = a2;
          swift_unknownObjectRetain(a2);
          uint64_t v33 = sub_10000FD7C((uint64_t *)&unk_100082320);
          uint64_t v34 = String.init<A>(describing:)(&v41, v33);
          uint64_t v36 = v35;
          *(void *)(v21 + 56) = &type metadata for String;
          *(void *)(v21 + 64) = sub_10001D978();
          *(void *)(v21 + 32) = v34;
          *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v36;
          os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Connection failed: %{public}s", 29LL, 2LL, v21);
LABEL_14:
          swift_bridgeObjectRelease(v21);
          goto LABEL_16;
        case 5:
          uint64_t v26 = static os_log_type_t.default.getter(Strong);
          os_log(_:dso:log:_:_:)( v26,  &_mh_execute_header,  qword_1000845F0,  "Connection cancelled",  20LL,  2LL,  &_swiftEmptyArrayStorage);
          goto LABEL_16;
        default:
          uint64_t v27 = static os_log_type_t.default.getter(Strong);
          os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_1000845F0,  "Unknown connection state",  24LL,  2LL,  &_swiftEmptyArrayStorage);
LABEL_8:
          swift_unknownObjectRelease(v19);
          return swift_release();
      }
    }

    return swift_release();
  }

  return result;
}

uint64_t sub_1000411B4()
{
  uint64_t v1 = *v0;
  _StringGuts.grow(_:)(26LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  uint64_t v16 = 60LL;
  unint64_t v17 = 0xE100000000000000LL;
  uint64_t v15 = v1;
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v1);
  v18._countAndFlagsBits = String.init<A>(describing:)(&v15, MetatypeMetadata);
  sub_100045FD8(v18);
  swift_bridgeObjectRelease(v1);
  v3._countAndFlagsBits = 32LL;
  v3._object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  uint64_t v4 = sub_10000FD7C((uint64_t *)&unk_1000813B0);
  sub_100045D28(&qword_100082FA8, (uint64_t *)&unk_1000813B0);
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v5);
  sub_100045FD8(v19);
  swift_bridgeObjectRelease(&unk_1000813B0);
  v6._object = (void *)0x800000010006A2D0LL;
  v6._countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v6);
  uint64_t v7 = (void *)nw_connection_copy_connected_remote_endpoint(*(uint64_t *)((char *)v0
                                                                       + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_connection));
  if (v7)
  {
    id v8 = [v7 description];
    sub_100016C68();
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v11 = v10;
  }

  else
  {
    uint64_t v11 = (void *)0xE600000000000000LL;
    uint64_t v9 = 0x3E656E6F6E3CLL;
  }

  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  sub_100031D08();
  v13._countAndFlagsBits = 32032LL;
  v13._object = (void *)0xE200000000000000LL;
  String.append(_:)(v13);
  return v16;
}

void sub_100041334()
{
  uint64_t v1 = sub_10000FD7C((uint64_t *)&unk_1000813B0);
  sub_100026C68(v1);
  sub_100045FF8(OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_connection);
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_peerConnectionsInfo));
  sub_100016C1C();
}

uint64_t sub_10004138C()
{
  return sub_100043AB0(sub_100041334);
}

uint64_t sub_100041398()
{
  return type metadata accessor for NWObjcTunnelConnectionWrapper(0LL);
}

uint64_t type metadata accessor for NWObjcTunnelConnectionWrapper(uint64_t a1)
{
  return sub_100025E18( a1,  (uint64_t *)&unk_100082DE0,  (uint64_t)&nominal type descriptor for NWObjcTunnelConnectionWrapper);
}

void sub_1000413B4(uint64_t a1)
{
  v4[0] = &unk_100063600;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_100015578(319LL);
  if (v3 <= 0x3F)
  {
    v4[3] = *(void *)(v2 - 8) + 64LL;
    v4[4] = &unk_100063618;
    v4[5] = &unk_100063630;
    v4[6] = &unk_100063648;
    swift_updateClassMetadata2(a1, 256LL, 7LL, v4, a1 + 80);
  }

uint64_t sub_100041460()
{
  return sub_1000411B4();
}

uint64_t sub_100041480@<X0>(uint64_t a1@<X8>)
{
  return sub_100043D6C(&OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_identifier, a1);
}

uint64_t sub_10004148C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return StreamBasedTunnelConnection.send(packets:completion:)(a1, a2, a3, a4, v8);
}

uint64_t sub_1000414FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return StreamBasedTunnelConnection.send(controlMessage:completion:)(a1, a2, a3, a4, v8);
}

uint64_t sub_10004156C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StreamBasedTunnelConnection.receivePackets(completion:)(a1, a2, a3, v6);
}

uint64_t sub_1000415CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StreamBasedTunnelConnection.receiveControlMessage(completion:)(a1, a2, a3, v6);
}

void sub_10004162C()
{
}

void sub_10004164C(dispatch_queue_s *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100041668()
{
  return sub_1000407B0();
}

uint64_t sub_100041688(__int16 a1, __int16 a2)
{
  if ((a2 & 0xFE) == 2) {
    return 0LL;
  }
  if (((a1 & 1) == 0) == (a2 & 1)) {
    return 0LL;
  }
  else {
    return ((a1 & 0x100) == 0) ^ ((unsigned __int16)(a2 & 0x100) >> 8);
  }
}

uint64_t sub_100041700(__int16 *a1, __int16 *a2)
{
  return sub_100041688(*a1, *a2);
}

uint64_t sub_10004170C()
{
  uint64_t v1 = *(nw_connection **)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream);
  if (!v1)
  {
    LOWORD(v6) = 1280;
    return (unsigned __int16)v6;
  }

  sub_100045F88();
  uint64_t v2 = nw_protocol_copy_quic_definition();
  unint64_t v3 = nw_connection_copy_protocol_metadata(v1, v2);
  uint64_t result = sub_100016BE4();
  if (v3)
  {
    uint64_t stream_usable_datagram_frame_size = nw_quic_get_stream_usable_datagram_frame_size(v3);
    unsigned int v6 = stream_usable_datagram_frame_size;
    os_log_type_t v7 = static os_log_type_t.default.getter(stream_usable_datagram_frame_size);
    uint64_t v8 = (os_log_s *)qword_1000845F0;
    os_log_type_t v9 = v7;
    if (os_log_type_enabled((os_log_t)qword_1000845F0, v7))
    {
      uint64_t v10 = (uint8_t *)sub_1000122E0(12LL);
      *(_DWORD *)uint64_t v10 = 134217984;
      uint64_t v16 = sub_100045F6C((uint64_t)v10, v11, (uint64_t)(v10 + 4), (uint64_t)(v10 + 12), v12, v13, v14, v15, v6);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v16, v17, v18, v19);
      sub_100016D10((void *)&_mh_execute_header, v8, v9, "Tunnel MTU datagaram = %ld", v10);
      sub_10001001C((uint64_t)v10);
    }

    if (!v6)
    {
      type metadata accessor for VirtualInterface(0LL);
      LOWORD(v6) = static VirtualInterface.minSupportedMTU.getter();
    }

    sub_100016C68();
    swift_unknownObjectRelease(v3);
    return (unsigned __int16)v6;
  }

  __break(1u);
  return result;
}

uint64_t sub_100041834(uint64_t a1)
{
  if (!*(void *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream))
  {
    uint64_t v15 = static os_log_type_t.fault.getter(a1);
    sub_100012380( v15,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"Tunnel connection path nw_path_copy_interface: nil",  50LL);
    return 0LL;
  }

  uint64_t v2 = (nw_connection *)sub_100045F88();
  if (!nw_connection_copy_current_path(v2))
  {
LABEL_9:
    sub_100016C68();
    return 0LL;
  }

  unint64_t v3 = (nw_interface *)nw_path_copy_interface();
  if (!v3)
  {
    sub_100016BE4();
    goto LABEL_9;
  }

  uint64_t v4 = v3;
  name = nw_interface_get_name(v3);
  uint64_t v6 = String.init(cString:)(name);
  uint64_t v8 = v7;
  os_log_type_t v9 = static os_log_type_t.default.getter(v6);
  uint64_t v10 = (os_log_s *)qword_1000845F0;
  os_log_type_t v11 = v9;
  if (os_log_type_enabled((os_log_t)qword_1000845F0, v9))
  {
    swift_bridgeObjectRetain_n(v8, 2LL);
    uint64_t v12 = (uint8_t *)sub_1000122E0(12LL);
    uint64_t v13 = sub_1000122E0(32LL);
    uint64_t v18 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    swift_bridgeObjectRetain(v8);
    sub_100045370(v6, v8, &v18);
    uint64_t v17 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(v8, 3LL);
    sub_100016D10((void *)&_mh_execute_header, v10, v11, "Tunnel connection path interface name: %s", v12);
    swift_arrayDestroy(v13, 1LL);
    sub_10001001C(v13);
    sub_10001001C((uint64_t)v12);
  }

  sub_100016C68();
  swift_unknownObjectRelease(v4);
  sub_100016BE4();
  return v6;
}

uint64_t sub_1000419F8()
{
  uint64_t v1 = type metadata accessor for TunnelConnectionState(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t result = __chkstk_darwin(v1, v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v7 = *(unsigned __int8 *)(v0 + 16);
  if (v7 == 3)
  {
    uint64_t v10 = (uint64_t *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler);
    os_log_type_t v11 = *(void (**)(char *))(v0
                                        + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler);
    if (v11)
    {
      uint64_t v12 = v10[1];
      (*(void (**)(char *, void, uint64_t))(v2 + 104))( v6,  enum case for TunnelConnectionState.stopped(_:),  v1);
      swift_retain(v12);
      v11(v6);
      sub_10002FBF0((uint64_t)v11, v12);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v6, v1);
      uint64_t v13 = *v10;
    }

    else
    {
      uint64_t v13 = 0LL;
    }

    uint64_t v14 = v10[1];
    uint64_t *v10 = 0LL;
    v10[1] = 0LL;
    return sub_10002FBF0(v13, v14);
  }

  else if (v7 == 2)
  {
    uint64_t v8 = *(void (**)(char *))(v0
                                       + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler);
    if (v8)
    {
      uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler + 8);
      (*(void (**)(char *, void, uint64_t))(v2 + 104))( v6,  enum case for TunnelConnectionState.ready(_:),  v1);
      swift_retain(v9);
      v8(v6);
      sub_10002FBF0((uint64_t)v8, v9);
      return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v6, v1);
    }
  }

  return result;
}

void sub_100041B4C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v7 = sub_10004602C();
  Identifier.init()(v7, &protocol witness table for TunnelConnectionIdentifierCategory);
  *(void *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_nonDatagramStream) = 0LL;
  *(void *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream) = 0LL;
  uint64_t v8 = (void *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler);
  *uint64_t v8 = 0LL;
  v8[1] = 0LL;
  *(_WORD *)(v3 + swift_weakDestroy(v0 + 16) = 0;
  *(void *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_group) = a1;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection__allowLocalConnectionsOnly) = a2;
  *(void *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_peerConnectionsInfo) = a3;
  sub_100031C6C();
}

void sub_100041BE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for TunnelPacket(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  sub_10001E144();
  uint64_t v58 = v10;
  uint64_t v11 = sub_10000FD7C(&qword_100082FE8);
  __chkstk_darwin(v11, v12);
  sub_10001E144();
  uint64_t v56 = v13;
  uint64_t v14 = sub_10000FD7C((uint64_t *)&unk_100082FF0);
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v18 = (unint64_t *)((char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (uint64_t *)((char *)&v53 - v20);
  uint64_t v22 = *(void *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream);
  if (v22)
  {
    unint64_t v23 = *(void *)(a1 + 16);
    if (v23 >> 60)
    {
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      sub_10003C144();
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL);
      __break(1u);
    }

    else
    {
      uint64_t v61 = v8;
      uint64_t v54 = a2;
      uint64_t v55 = a3;
      uint64_t v53 = v22;
      swift_unknownObjectRetain_n(v22, 2LL);
      uint64_t v60 = sub_1000122E0(8 * v23);
      uint64_t v57 = a1;
      swift_bridgeObjectRetain(a1);
      unint64_t v24 = 0LL;
      uint64_t v25 = v7;
      uint64_t v26 = v58;
      uint64_t v59 = v18;
      while (1)
      {
        if (v24 == v23)
        {
          uint64_t v27 = 1LL;
          unint64_t v28 = v23;
          uint64_t v29 = v61;
        }

        else
        {
          uint64_t v29 = v61;
          if (v24 >= v23)
          {
            __break(1u);
            goto LABEL_16;
          }

          unint64_t v28 = v24 + 1;
          uint64_t v30 = v56 + *(int *)(v11 + 48);
          sub_10004604C( v57 + ((*(unsigned __int8 *)(v61 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))
          + *(void *)(v61 + 72) * v24,
            *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 16));
          uint64_t v31 = (char *)v18 + *(int *)(v11 + 48);
          *uint64_t v18 = v24;
          uint64_t v32 = v30;
          uint64_t v26 = v58;
          (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v31, v32, v25);
          uint64_t v27 = 0LL;
        }

        sub_10001D930((uint64_t)v18, v27, 1LL, v11);
        sub_100045DA8((uint64_t)v18, (uint64_t)v21);
        unint64_t v62 = v28;
        unint64_t v33 = v23;
        uint64_t v34 = *v21;
        uint64_t v35 = v11;
        uint64_t v36 = v21;
        uint64_t v37 = sub_10004604C( (uint64_t)v21 + *(int *)(v11 + 48),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 32));
        uint64_t v38 = v29;
        uint64_t v39 = v26;
        uint64_t v40 = TunnelPacket.packetData.getter(v37);
        uint64_t v41 = v25;
        unint64_t v43 = v42;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_100015644(v40, v43);
        uint64_t v45 = NWCreateDispatchDataFromNSData(isa);

        if (!v45) {
          goto LABEL_17;
        }
        *(void *)(v60 + 8 * v34) = v45;
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v41);
        unint64_t v23 = v33;
        uint64_t v25 = v41;
        uint64_t v26 = v39;
        uint64_t v11 = v35;
        uint64_t v18 = v59;
        uint64_t v21 = v36;
        unint64_t v24 = v62;
      }

      uint64_t v46 = v57;
      swift_bridgeObjectRelease(v57);
      if (HIDWORD(v23)) {
        goto LABEL_18;
      }
      unint64_t v47 = (void *)sub_100016BCC((uint64_t)&unk_100078510, 48LL);
      uint64_t v48 = v60;
      v47[2] = v60;
      v47[3] = v46;
      uint64_t v49 = v55;
      v47[4] = v54;
      void v47[5] = v49;
      aBlock[4] = sub_100045E10;
      void aBlock[5] = v47;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_100040778;
      aBlock[3] = &unk_100078528;
      Swift::String v50 = _Block_copy(aBlock);
      swift_bridgeObjectRetain(v46);
      sub_100010000();
      swift_release();
      uint64_t v51 = v53;
      nw_connection_write_multiple(v53, v48, v23, v50);
      swift_unknownObjectRelease_n(v51, 2LL);
      _Block_release(v50);
    }
  }

  else
  {
    uint64_t v52 = static os_log_type_t.error.getter(0LL);
    sub_100012380( v52,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"Tunnel stream trying to receive packets on a nil datagram stream",  64LL);
  }

uint64_t sub_100041FC8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v7 = *(void *)(a3 + 16);
  sub_1000406BC();
  swift_arrayDestroy(a2, v7);
  swift_slowDealloc(a2, -1LL, -1LL);
  if ((_DWORD)a1)
  {
    uint64_t v8 = type metadata accessor for POSIXError(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    __chkstk_darwin(v8, v10);
    uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v13 = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    uint64_t v14 = POSIXError.init(uncheckedCode:userInfo:)(a1, v13);
    uint64_t v15 = POSIXError._nsError.getter(v14);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }

  else
  {
    uint64_t v15 = 0LL;
  }

  a4(v15);
  return swift_errorRelease(v15);
}

void sub_1000420EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_nonDatagramStream);
  if (v6)
  {
    sub_100045FE4();
    uint64_t v8 = type metadata accessor for NWObjcTunnelConnectionWrapper(0LL);
    sub_100026A28((unint64_t *)&unk_100082FC0, type metadata accessor for NWObjcTunnelConnectionWrapper);
    uint64_t v10 = v9;
    sub_10000FFDC();
    StreamBasedTunnelConnection.send(controlMessage:completion:)(v5, v4, a3, v8, v10);
    sub_100045EFC(v6);
  }

  else
  {
    sub_100031C6C();
  }

uint64_t sub_100042174(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream);
  if (v4)
  {
    sub_100045FE4();
    uint64_t v5 = sub_100016BCC((uint64_t)&unk_100078498, 24LL);
    *(void *)(v5 + swift_weakDestroy(v0 + 16) = &_swiftEmptyArrayStorage;
    uint64_t v6 = sub_100016BCC((uint64_t)&unk_100078308, 24LL);
    sub_10002A20C(v6);
    uint64_t v7 = (void *)sub_100016BCC((uint64_t)&unk_1000784C0, 48LL);
    v7[2] = v6;
    v7[3] = v3;
    v7[4] = v2;
    void v7[5] = v5;
    uint64_t v8 = sub_100031AFC((uint64_t)sub_100040058, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v11, v12);
    swift_unknownObjectRetain_n(v4, 2LL);
    sub_100010000();
    swift_retain(v5);
    swift_release();
    nw_connection_receive_multiple(v4, 1LL, 16LL, v8);
    swift_unknownObjectRelease_n(v4, 2LL);
    _Block_release(v8);
    return sub_1000124B8();
  }

  else
  {
    uint64_t v10 = static os_log_type_t.error.getter(a1);
    return sub_100012380( v10,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"Tunnel stream trying to receive packets on a nil datagram stream",  64LL);
  }

uint64_t sub_1000422C4( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void (*a6)(__n128), uint64_t a7, uint64_t a8)
{
  uint64_t v63 = a8;
  uint64_t v66 = a7;
  uint64_t v67 = a6;
  int v64 = a3;
  uint64_t v12 = type metadata accessor for TunnelPacket(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for RemotePairingError(0LL);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a5 += 16LL;
  swift_beginAccess(a5, v70, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a5);
  if (result)
  {
    uint64_t v65 = result;
    if (a2)
    {
      uint64_t is_wake_packet = nw_content_context_get_is_wake_packet(a2);
      if ((_DWORD)is_wake_packet)
      {
        os_log_type_t v23 = static os_log_type_t.default.getter(is_wake_packet);
        unint64_t v24 = (os_log_s *)powerLog.getter();
        if (os_log_type_enabled(v24, v23))
        {
          os_log_t v61 = v24;
          uint64_t v25 = v65;
          swift_retain_n(v65, 2LL);
          uint64_t v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v62 = swift_slowAlloc(32LL, -1LL);
          v69[0] = v62;
          int v60 = v23;
          *(_DWORD *)uint64_t v26 = 136315138;
          uint64_t v27 = v26 + 12;
          uint64_t v58 = v26 + 4;
          uint64_t v59 = v26;
          uint64_t v68 = *(void *)(v25 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_peerConnectionsInfo);
          swift_bridgeObjectRetain(v68);
          uint64_t v28 = sub_10000FD7C(&qword_100082DA0);
          uint64_t v29 = String.init<A>(describing:)(&v68, v28);
          uint64_t v31 = v30;
          sub_100045370(v29, v30, v69);
          uint64_t v68 = v32;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69, v58, v27);
          swift_release_n(v25, 2LL);
          swift_bridgeObjectRelease(v31);
          unint64_t v24 = v61;
          unint64_t v33 = v59;
          _os_log_impl( (void *)&_mh_execute_header,  v61,  (os_log_type_t)v60,  "Received a wake packet from: %s",  v59,  0xCu);
          uint64_t v34 = v62;
          swift_arrayDestroy(v62, 1LL);
          swift_slowDealloc(v34, -1LL, -1LL);
          swift_slowDealloc(v33, -1LL, -1LL);
        }
      }
    }

    if (a4)
    {
      uint64_t v35 = type metadata accessor for NWError(0LL);
      uint64_t v36 = *(void *)(v35 - 8);
      __chkstk_darwin(v35, v37);
      uint64_t v39 = (char *)&v58 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v40 = swift_unknownObjectRetain_n(a4, 2LL);
      NWError.init(_:)(v40);
      sub_100026A28( (unint64_t *)&unk_100082FD0,  (uint64_t (*)(uint64_t))&type metadata accessor for NWError);
      uint64_t v42 = swift_allocError(v35, v41, 0LL, 0LL);
      (*(void (**)(uint64_t, char *, uint64_t))(v36 + 16))(v43, v39, v35);
      ((void (*)(uint64_t, uint64_t))v67)(v42, 1LL);
      swift_errorRelease(v42);
      swift_unknownObjectRelease(a4);
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v39, v35);
    }

    else
    {
      uint64_t v44 = NWCreateNSDataFromDispatchData(a1);
      if (v44)
      {
        uint64_t v45 = (void *)v44;
        uint64_t v46 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v48 = v47;

        sub_1000155D4(v46, v48);
        TunnelPacket.init(data:)(v46, v48);
        uint64_t v53 = (void *)(v63 + 16);
        swift_beginAccess(v63 + 16, v69, 33LL, 0LL);
        sub_100044034();
        uint64_t v54 = *(void *)(*v53 + 16LL);
        sub_100044144(v54);
        uint64_t v55 = *v53;
        *(void *)(v55 + swift_weakDestroy(v0 + 16) = v54 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v13 + 16))( v55 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))
        + *(void *)(v13 + 72) * v54,
          v16,
          v12);
        swift_endAccess(v69);
        (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
        if ((v64 & 1) != 0)
        {
          swift_beginAccess(v53, v69, 0LL, 0LL);
          uint64_t v56 = *v53;
          __n128 v57 = swift_bridgeObjectRetain(*v53);
          v67(v57);
          swift_release();
          sub_100015644(v46, v48);
          return swift_bridgeObjectRelease(v56);
        }

        else
        {
          swift_release();
          return sub_100015644(v46, v48);
        }
      }

      else
      {
        sub_100026A28( (unint64_t *)&unk_1000813E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
        uint64_t v50 = v49;
        static Error<>.dataCorrupted.getter(v17, v49);
        sub_100026A28( (unint64_t *)&unk_1000819E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
        uint64_t v52 = swift_allocError(v17, v51, 0LL, 0LL);
        Error<>.init(_:_:)(v20, 0xD000000000000034LL, 0x800000010006A820LL, v17, v50);
        ((void (*)(uint64_t, uint64_t))v67)(v52, 1LL);
        swift_errorRelease(v52);
        return swift_release();
      }
    }
  }

  return result;
}

void sub_100042920(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_nonDatagramStream);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for NWObjcTunnelConnectionWrapper(0LL);
    sub_100026A28((unint64_t *)&unk_100082FC0, type metadata accessor for NWObjcTunnelConnectionWrapper);
    uint64_t v8 = v7;
    sub_10000FFDC();
    StreamBasedTunnelConnection.receiveControlMessage(completion:)(a1, a2, v6, v8);
    sub_100045EFC(v3);
  }

  else
  {
    sub_100031C6C();
  }

uint64_t sub_1000429A4()
{
  nw_connection_group_cancel(*(nw_connection_group_t *)(v0
                                                      + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_group));
  uint64_t v1 = OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_nonDatagramStream;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_nonDatagramStream);
  if (v2) {
    nw_connection_cancel(*(nw_connection_t *)(v2
  }
                                            + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_connection));
  uint64_t v3 = OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream;
  uint64_t v4 = *(nw_connection **)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream);
  if (v4) {
    nw_connection_cancel(v4);
  }
  *(void *)(v0 + v1) = 0LL;
  swift_release();
  uint64_t v5 = *(void *)(v0 + v3);
  *(void *)(v0 + __chkstk_darwin(v2, v3) = 0LL;
  swift_unknownObjectRelease(v5);
  *(_WORD *)(v0 + swift_weakDestroy(v0 + 16) = 3;
  return sub_1000419F8();
}

void sub_100042A28(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (uint64_t (*)(uint64_t))sub_100016BCC((uint64_t)&unk_1000782E0, 40LL);
  *((void *)v7 + 2) = a1;
  *((void *)v7 + 3) = a2;
  *((void *)v7 + 4) = a3;
  uint64_t v8 = (uint64_t (**)(uint64_t))(v3
                                        + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler);
  uint64_t v9 = *(void *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler);
  uint64_t v10 = *(void *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler + 8);
  *uint64_t v8 = sub_100045AD8;
  v8[1] = v7;
  id v11 = a1;
  sub_100010000();
  sub_10002FBF0(v9, v10);
  uint64_t v12 = OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_group;
  uint64_t v13 = *(nw_connection_group **)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_group);
  uint64_t v14 = sub_100016BCC((uint64_t)&unk_100078308, 24LL);
  sub_10002A20C(v14);
  uint64_t v15 = sub_100016BCC((uint64_t)&unk_100078330, 24LL);
  swift_unknownObjectWeakInit(v15 + 16, v13);
  uint64_t v16 = sub_100016BCC((uint64_t)&unk_100078358, 32LL);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = v14;
  *(void *)(v16 + 24) = v15;
  uint64_t v17 = sub_100031AFC((uint64_t)sub_100040774, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v23, v25);
  swift_unknownObjectRetain(v13);
  swift_release();
  nw_connection_group_set_state_changed_handler(v13, v17);
  _Block_release(v17);
  sub_100046000();
  uint64_t v18 = *(nw_connection_group **)(v3 + v12);
  uint64_t v19 = sub_100016BCC((uint64_t)&unk_100078308, 24LL);
  sub_10002A20C(v19);
  uint64_t v20 = sub_100016BCC((uint64_t)&unk_1000783A8, 32LL);
  *(void *)(v20 + swift_weakDestroy(v0 + 16) = v19;
  *(void *)(v20 + 24) = v11;
  uint64_t v21 = sub_100031AFC((uint64_t)sub_100040730, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v24, v26);
  uint64_t v22 = (dispatch_queue_s *)v11;
  swift_unknownObjectRetain(v18);
  sub_1000124B8();
  nw_connection_group_set_new_connection_handler(v18, v21);
  _Block_release(v21);
  sub_100046000();
  nw_connection_group_set_queue(*(nw_connection_group_t *)(v3 + v12), v22);
  nw_connection_group_start(*(nw_connection_group_t *)(v3 + v12));
  sub_100045EE0();
}

uint64_t sub_100042C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a2;
  uint64_t v7 = type metadata accessor for TunnelConnectionState(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))( (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v7);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_100078448, v12 + v9, v11 | 7);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v13 + 24) = a4;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))( v13 + v12,  (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v7);
  aBlock[4] = sub_100045CEC;
  void aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100040708;
  aBlock[3] = &unk_100078460;
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = swift_retain(a4);
  static DispatchQoS.unspecified.getter(v20);
  uint64_t v21 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, &type metadata accessor for DispatchWorkItemFlags);
  uint64_t v24 = (char *)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = &_swiftEmptyArrayStorage;
  sub_100026A28((unint64_t *)&qword_1000813C0, v25);
  uint64_t v27 = v26;
  uint64_t v28 = sub_10000FD7C(&qword_100081100);
  sub_100045D28((unint64_t *)&qword_1000813D0, &qword_100081100);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v28, v29, v21, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v19, v24, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  return swift_release();
}

uint64_t sub_100042E64(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a3 + 16;
  swift_beginAccess(a3 + 16, v52, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v7);
  if (result)
  {
    uint64_t v9 = a4 + 16;
    swift_beginAccess(v9, v51, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v9);
    if (Strong)
    {
      uint64_t v11 = (nw_connection_group *)Strong;
      switch(a1)
      {
        case 0:
          if (a2)
          {
            swift_getObjectType(a2);
            sub_10003F2B0();
            uint64_t v13 = v12;
          }

          else
          {
            uint64_t v36 = type metadata accessor for RemotePairingError(0LL);
            sub_100026A28( (unint64_t *)&unk_1000819E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
            uint64_t v13 = swift_allocError(v36, v37, 0LL, 0LL);
            sub_100026A28( (unint64_t *)&unk_1000813E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
            uint64_t v12 = static Error<>.networkingError.getter(v36, v38);
          }

          os_log_type_t v39 = static os_log_type_t.error.getter(v12);
          uint64_t v40 = (os_log_s *)qword_1000845F0;
          os_log_type_t v41 = v39;
          if (os_log_type_enabled((os_log_t)qword_1000845F0, v39))
          {
            swift_errorRetain(v13);
            swift_errorRetain(v13);
            uint64_t v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v43 = swift_slowAlloc(32LL, -1LL);
            uint64_t v49 = v13;
            uint64_t v50 = v43;
            *(_DWORD *)uint64_t v42 = 136315138;
            swift_errorRetain(v13);
            uint64_t v44 = sub_10000FD7C(&qword_100081A10);
            uint64_t v45 = String.init<A>(describing:)(&v49, v44);
            uint64_t v47 = v46;
            sub_100045370(v45, v46, &v50);
            uint64_t v49 = v48;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v42 + 4, v42 + 12);
            swift_bridgeObjectRelease(v47);
            swift_errorRelease(v13);
            swift_errorRelease(v13);
            _os_log_impl((void *)&_mh_execute_header, v40, v41, "Tunnel connection group invalid state %s", v42, 0xCu);
            swift_arrayDestroy(v43, 1LL);
            swift_slowDealloc(v43, -1LL, -1LL);
            swift_slowDealloc(v42, -1LL, -1LL);
          }

          nw_connection_group_cancel(v11);
          sub_1000429A4();
          swift_unknownObjectRelease(v11);
          swift_release();
          return swift_errorRelease(v13);
        case 1:
          uint64_t v18 = static os_log_type_t.default.getter(Strong);
          os_log(_:dso:log:_:_:)( v18,  &_mh_execute_header,  qword_1000845F0,  "Tunnel connection group waiting",  31LL,  2LL,  &_swiftEmptyArrayStorage);
          goto LABEL_18;
        case 2:
          uint64_t v19 = static os_log_type_t.default.getter(Strong);
          os_log(_:dso:log:_:_:)( v19,  &_mh_execute_header,  qword_1000845F0,  "Tunnel connection group ready and established",  45LL,  2LL,  &_swiftEmptyArrayStorage);
          goto LABEL_18;
        case 3:
          os_log_type_t v20 = static os_log_type_t.error.getter(Strong);
          uint64_t v21 = (os_log_s *)qword_1000845F0;
          os_log_type_t v22 = v20;
          if (!os_log_type_enabled((os_log_t)qword_1000845F0, v20)) {
            goto LABEL_17;
          }
          swift_unknownObjectRetain_n(a2, 2LL);
          uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v23 = swift_slowAlloc(32LL, -1LL);
          uint64_t v49 = a2;
          uint64_t v50 = v23;
          *(_DWORD *)uint64_t v17 = 136315138;
          swift_unknownObjectRetain(a2);
          uint64_t v24 = sub_10000FD7C((uint64_t *)&unk_100082320);
          uint64_t v25 = String.init<A>(describing:)(&v49, v24);
          uint64_t v27 = v26;
          sub_100045370(v25, v26, &v50);
          uint64_t v49 = v28;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v17 + 4, v17 + 12);
          swift_unknownObjectRelease_n(a2, 2LL);
          swift_bridgeObjectRelease(v27);
          uint64_t v29 = "Tunnel connection group failed %s";
          goto LABEL_15;
        case 4:
          os_log_type_t v30 = static os_log_type_t.default.getter(Strong);
          uint64_t v21 = (os_log_s *)qword_1000845F0;
          os_log_type_t v22 = v30;
          if (!os_log_type_enabled((os_log_t)qword_1000845F0, v30)) {
            goto LABEL_17;
          }
          swift_unknownObjectRetain_n(a2, 2LL);
          uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v23 = swift_slowAlloc(32LL, -1LL);
          uint64_t v49 = a2;
          uint64_t v50 = v23;
          *(_DWORD *)uint64_t v17 = 136315138;
          swift_unknownObjectRetain(a2);
          uint64_t v31 = sub_10000FD7C((uint64_t *)&unk_100082320);
          uint64_t v32 = String.init<A>(describing:)(&v49, v31);
          uint64_t v34 = v33;
          sub_100045370(v32, v33, &v50);
          uint64_t v49 = v35;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v17 + 4, v17 + 12);
          swift_unknownObjectRelease_n(a2, 2LL);
          swift_bridgeObjectRelease(v34);
          uint64_t v29 = "Tunnel connection group canceled %s";
LABEL_15:
          _os_log_impl((void *)&_mh_execute_header, v21, v22, v29, v17, 0xCu);
          swift_arrayDestroy(v23, 1LL);
          swift_slowDealloc(v23, -1LL, -1LL);
          break;
        default:
          os_log_type_t v14 = static os_log_type_t.default.getter(Strong);
          uint64_t v15 = (os_log_s *)qword_1000845F0;
          os_log_type_t v16 = v14;
          if (!os_log_type_enabled((os_log_t)qword_1000845F0, v14)) {
            goto LABEL_17;
          }
          uint64_t v17 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)uint64_t v17 = 67109120;
          LODWORD(v5_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = a1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, (char *)&v50 + 4, v17 + 4, v17 + 8);
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "Tunnel connection group unknown state %u", v17, 8u);
          break;
      }

      swift_slowDealloc(v17, -1LL, -1LL);
LABEL_17:
      nw_connection_group_cancel(v11);
      sub_1000429A4();
LABEL_18:
      swift_unknownObjectRelease(v11);
    }

    return swift_release();
  }

  return result;
}

uint64_t sub_1000433FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  sub_100010000();
  sub_100045F88();
  v5(a2, a3);
  swift_release();
  return sub_100045F0C(a3);
}

uint64_t sub_100043444(nw_connection *a1, uint64_t a2, dispatch_queue_s *a3)
{
  uint64_t v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v5);
  if (result)
  {
    uint64_t v7 = static os_log_type_t.default.getter(result);
    os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  qword_1000845F0,  "Tunnel connection group set new connection handler",  50LL,  2LL,  &_swiftEmptyArrayStorage);
    sub_1000434E4(a1, a3);
    return swift_release();
  }

  return result;
}

void sub_1000434E4(nw_connection *a1, dispatch_queue_s *a2)
{
  uint64_t v5 = swift_allocObject(&unk_1000783F8, 32LL, 7LL);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v5 + 24) = v2;
  v7[4] = sub_100045B7C;
  void v7[5] = v5;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256LL;
  v7[2] = sub_100040774;
  v7[3] = &unk_100078410;
  uint64_t v6 = _Block_copy(v7);
  swift_unknownObjectRetain(a1);
  swift_retain(v2);
  swift_release();
  nw_connection_set_state_changed_handler(a1, v6);
  _Block_release(v6);
  nw_connection_set_queue(a1, a2);
  nw_connection_start(a1);
}

uint64_t sub_1000435BC(uint64_t a1, uint64_t a2, nw_connection *a3, uint64_t a4)
{
  switch((int)a1)
  {
    case 1:
      uint64_t v6 = static os_log_type_t.error.getter(a1);
      os_log(_:dso:log:_:_:)( v6,  &_mh_execute_header,  qword_1000845F0,  "Tunnel stream connection waiting, error",  39LL,  2LL,  &_swiftEmptyArrayStorage);
      goto LABEL_21;
    case 2:
      uint64_t v12 = static os_log_type_t.default.getter(a1);
      return os_log(_:dso:log:_:_:)( v12,  &_mh_execute_header,  qword_1000845F0,  "Tunnel stream connection preparing",  34LL,  2LL,  &_swiftEmptyArrayStorage);
    case 3:
      swift_getObjectType(a3);
      BOOL v14 = sub_10003F258();
      if (v14
        && *(_BYTE *)(a4 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection__allowLocalConnectionsOnly) != 1)
      {
        uint64_t v39 = static os_log_type_t.error.getter(v14);
        os_log(_:dso:log:_:_:)( v39,  &_mh_execute_header,  qword_1000845F0,  "Rejecting tunnel connection originating from local machine",  58LL,  2LL,  &_swiftEmptyArrayStorage);
LABEL_21:
        nw_connection_cancel(a3);
        return sub_1000429A4();
      }

      else
      {
        uint64_t v15 = sub_10003F768();
        char v16 = v15;
        os_log_type_t v17 = static os_log_type_t.default.getter(v15);
        uint64_t v18 = (os_log_s *)qword_1000845F0;
        os_log_type_t v19 = v17;
        if (os_log_type_enabled((os_log_t)qword_1000845F0, v17))
        {
          os_log_type_t v20 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)os_log_type_t v20 = 67109120;
          LODWORD(v41) = v16 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, (char *)&v41 + 4, v20 + 4, v20 + 8);
          _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "Tunnel stream (datagram=%{BOOL}d) connection established",  v20,  8u);
          swift_slowDealloc(v20, -1LL, -1LL);
        }

        if ((v16 & 1) != 0)
        {
          uint64_t v21 = *(void *)(a4 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream);
          *(void *)(a4 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream) = a3;
          swift_unknownObjectRelease(v21);
          if ((*(_WORD *)(a4 + 16) & 0xFE) != 2)
          {
            if ((*(_WORD *)(a4 + 16) & 0x100) != 0) {
              __int16 v22 = 2;
            }
            else {
              __int16 v22 = 1;
            }
            *(_WORD *)(a4 + swift_weakDestroy(v0 + 16) = v22;
          }

          swift_unknownObjectRetain(a3);
        }

        else
        {
          uint64_t v34 = type metadata accessor for NWObjcTunnelConnectionWrapper(0LL);
          uint64_t v35 = swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
          uint64_t v36 = swift_unknownObjectRetain(a3);
          sub_100040924(v36, 0, 0LL);
          *(void *)(a4 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_nonDatagramStream) = v35;
          swift_release();
          __int16 v37 = *(_WORD *)(a4 + 16);
          if ((v37 & 0xFE) != 2)
          {
            if ((v37 & 1) != 0) {
              __int16 v38 = 2;
            }
            else {
              __int16 v38 = 256;
            }
            *(_WORD *)(a4 + swift_weakDestroy(v0 + 16) = v38;
          }
        }

        return sub_1000419F8();
      }

    case 4:
      os_log_type_t v24 = static os_log_type_t.error.getter(a1);
      uint64_t v25 = (os_log_s *)qword_1000845F0;
      os_log_type_t v26 = v24;
      if (!os_log_type_enabled((os_log_t)qword_1000845F0, v24)) {
        goto LABEL_21;
      }
      swift_unknownObjectRetain_n(a2, 2LL);
      uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v27 = swift_slowAlloc(32LL, -1LL);
      uint64_t v40 = a2;
      uint64_t v41 = v27;
      *(_DWORD *)uint64_t v11 = 136315138;
      swift_unknownObjectRetain(a2);
      uint64_t v28 = sub_10000FD7C((uint64_t *)&unk_100082320);
      uint64_t v29 = String.init<A>(describing:)(&v40, v28);
      uint64_t v31 = v30;
      sub_100045370(v29, v30, &v41);
      uint64_t v40 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v11 + 4, v11 + 12);
      swift_unknownObjectRelease_n(a2, 2LL);
      swift_bridgeObjectRelease(v31);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Tunnel stream connection failed, error: %s", v11, 0xCu);
      swift_arrayDestroy(v27, 1LL);
      swift_slowDealloc(v27, -1LL, -1LL);
      goto LABEL_19;
    case 5:
      uint64_t v33 = static os_log_type_t.default.getter(a1);
      os_log(_:dso:log:_:_:)( v33,  &_mh_execute_header,  qword_1000845F0,  "Tunnel stream connection cancelled",  34LL,  2LL,  &_swiftEmptyArrayStorage);
      goto LABEL_21;
    default:
      int v7 = a1;
      os_log_type_t v8 = static os_log_type_t.default.getter(a1);
      uint64_t v9 = (os_log_s *)qword_1000845F0;
      os_log_type_t v10 = v8;
      if (!os_log_type_enabled((os_log_t)qword_1000845F0, v8)) {
        goto LABEL_21;
      }
      uint64_t v11 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v11 = 67109120;
      LODWORD(v41) = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, (char *)&v41 + 4, v11 + 4, v11 + 8);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Tunnel stream unknown connection state %u", v11, 8u);
LABEL_19:
      swift_slowDealloc(v11, -1LL, -1LL);
      goto LABEL_21;
  }

void sub_100043A24()
{
  uint64_t v1 = sub_10000FD7C((uint64_t *)&unk_1000813B0);
  sub_100026C68(v1);
  sub_100045FF8(OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_group);
  swift_release();
  sub_100045FF8(OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream);
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_peerConnectionsInfo));
  sub_10002FBF0( *(void *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler),  *(void *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler + 8));
  sub_100016C1C();
}

uint64_t sub_100043AA4()
{
  return sub_100043AB0(sub_100043A24);
}

uint64_t sub_100043AB0(void (*a1)(void))
{
  return swift_deallocClassInstance( v1,  *(unsigned int *)(*(void *)v1 + 48LL),  *(unsigned __int16 *)(*(void *)v1 + 52LL));
}

uint64_t sub_100043AD4()
{
  return type metadata accessor for NWQUICTunnelConnection(0LL);
}

uint64_t type metadata accessor for NWQUICTunnelConnection(uint64_t a1)
{
  return sub_100025E18(a1, qword_100082ED8, (uint64_t)&nominal type descriptor for NWQUICTunnelConnection);
}

void sub_100043AF0(uint64_t a1)
{
  v4[0] = &unk_100063688;
  sub_100015578(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    v4[2] = &unk_100063618;
    v4[3] = &unk_100063630;
    v4[4] = &unk_100063630;
    v4[5] = &unk_100063630;
    v4[6] = &unk_100063648;
    void v4[7] = &unk_1000636A0;
    swift_updateClassMetadata2(a1, 256LL, 8LL, v4, a1 + 80);
  }

_WORD *initializeBufferWithCopyOfBuffer for NWQUICTunnelConnection.State(_WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NWQUICTunnelConnection.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD)
  {
    unsigned int v6 = *a1;
    if (v6 >= 2)
    {
      unsigned int v7 = (v6 + 2147483646) & 0x7FFFFFFF;
      uint64_t result = v7 - 1;
      if (v7 > 1) {
        return result;
      }
    }

    return 0LL;
  }

  unsigned int v2 = a2 + 65283;
  if (a2 + 65283 <= 0xFFFEFFFF) {
    unsigned int v3 = 2;
  }
  else {
    unsigned int v3 = 4;
  }
  if (v2 < 0xFF0000) {
    unsigned int v3 = 1;
  }
  if (v2 >= 0x10000) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_100043BF0 + 4 * byte_10006358F[v4]))();
}

uint64_t storeEnumTagSinglePayload for NWQUICTunnelConnection.State( _WORD *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 65283;
  if (a3 + 65283 <= 0xFFFEFFFF) {
    int v4 = 2;
  }
  else {
    int v4 = 4;
  }
  if (v3 < 0xFF0000) {
    int v4 = 1;
  }
  if (v3 >= 0x10000) {
    LODWORD(__chkstk_darwin(v4, v5) = v4;
  }
  else {
    LODWORD(__chkstk_darwin(v4, v5) = 0;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100043CA0 + 4 * byte_100063599[v5]))();
  }
  *a1 = a2 - 253;
  return ((uint64_t (*)(void))((char *)sub_100043CD4 + 4 * byte_100063594[v5]))();
}

uint64_t sub_100043CD4(uint64_t result)
{
  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_100043CDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2) {
    JUMPOUT(0x100043CE4LL);
  }
  return result;
}

uint64_t sub_100043CF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2) {
    JUMPOUT(0x100043CF8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100043CFC(uint64_t result)
{
  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_100043D04(uint64_t result)
{
  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_100043D10(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0LL;
  }
}

_WORD *sub_100043D2C(_WORD *result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *uint64_t result = a2 - 255;
  }

  else if (a2)
  {
    *(_BYTE *)uint64_t result = a2 + 1;
  }

  return result;
}

ValueMetadata *type metadata accessor for NWQUICTunnelConnection.State()
{
  return &type metadata for NWQUICTunnelConnection.State;
}

uint64_t sub_100043D60@<X0>(uint64_t a1@<X8>)
{
  return sub_100043D6C(&OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_identifier, a1);
}

uint64_t sub_100043D6C@<X0>(void *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2 + *a1;
  uint64_t v5 = sub_10000FD7C((uint64_t *)&unk_1000813B0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

void sub_100043DB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100043DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100043DF4(uint64_t a1)
{
  return sub_100042174(a1);
}

void sub_100043E14(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100043E34()
{
  return sub_1000429A4();
}

void sub_100043E54(void *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100043E70()
{
  return sub_10004170C() & 0x1FFFF;
}

uint64_t sub_100043E9C(uint64_t a1)
{
  return sub_100041834(a1);
}

void sub_100043EBC()
{
}

uint64_t sub_100043EE8(uint64_t result, _BYTE **a2)
{
  BOOL v2 = *a2;
  *BOOL v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_100043EF8( uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

void sub_100043F2C()
{
}

void sub_100043F38()
{
}

void sub_100043F54(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, void *))
{
  uint64_t v7 = *v3;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t *v3 = v7;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native)
  {
    sub_100044320(isUniquelyReferenced_nonNull_native, *(void *)(v7 + 16) + 1LL, 1LL, v7, v5, v4, a3);
    uint64_t *v3 = v9;
  }

  sub_100031C6C();
}

void sub_100043FB4()
{
}

void sub_100043FD0()
{
}

void sub_100043FDC()
{
  uint64_t v1 = *v0;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
  void *v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000443E8();
    void *v0 = v3;
  }

uint64_t sub_100044034()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v0);
  uint64_t *v0 = v1;
  if (!(_DWORD)result)
  {
    uint64_t result = sub_1000445B8( result,  *(void *)(v1 + 16) + 1LL,  1LL,  v1,  &qword_100082FE0,  (void (*)(void))&type metadata accessor for TunnelPacket);
    uint64_t *v0 = result;
  }

  return result;
}

void sub_10004408C()
{
}

void sub_100044098()
{
}

void sub_1000440B4()
{
  if (!(v8 ^ v9 | v7))
  {
    sub_100044320(v6 > 1, v1, 1LL, v3, v4, v2, v5);
    void *v0 = v10;
  }

void sub_1000440EC()
{
}

void sub_100044108()
{
}

void sub_100044114()
{
  if (!(v2 ^ v3 | v1))
  {
    sub_1000443E8();
    void *v0 = v4;
  }

uint64_t sub_100044144(uint64_t result)
{
  unint64_t v2 = *(void *)(*v1 + 24);
  if (result + 1 > (uint64_t)(v2 >> 1))
  {
    uint64_t result = sub_1000445B8( v2 > 1,  result + 1,  1LL,  *v1,  &qword_100082FE0,  (void (*)(void))&type metadata accessor for TunnelPacket);
    uint64_t *v1 = result;
  }

  return result;
}

void sub_100044190()
{
  if ((v3 & 1) != 0)
  {
    sub_100045EB0();
    if (v4 != v5)
    {
      sub_100045F18();
      if (v4)
      {
        __break(1u);
        return;
      }

      sub_100045EA0();
    }
  }

  sub_100045EC0();
  if (v2)
  {
    uint64_t v6 = sub_10000FD7C(&qword_100083030);
    char v7 = (const void *)sub_100016BCC(v6, 40 * v2 + 32);
    sub_100045F38(v7);
    *(void *)(v2 + swift_weakDestroy(v0 + 16) = v1;
    *(void *)(v2 + 24) = 2 * (v8 / 40);
  }

  if ((v0 & 1) != 0)
  {
    char v9 = (char *)sub_100045F60();
    sub_100044F04(v9, v10, v11);
    sub_100045E94();
  }

  else
  {
    uint64_t v12 = sub_100045ED0();
    sub_100044758(v12, v13, v14, v15);
  }

  sub_100031C6C();
}

uint64_t sub_100044238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000445B8( a1,  a2,  a3,  a4,  &qword_100083028,  (void (*)(void))&type metadata accessor for PairedHostInfo);
}

void sub_10004424C()
{
  if ((v2 & 1) != 0)
  {
    sub_100045EB0();
    if (v3 != v4)
    {
      sub_100045F18();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_100045EA0();
    }
  }

  sub_100045EC0();
  if (v1)
  {
    uint64_t v5 = sub_10000FD7C(&qword_100083020);
    uint64_t v6 = (const void *)sub_100016BCC(v5, 8 * v1 + 32);
    sub_100045F38(v6);
    sub_100045F50(v7);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v8 = (char *)sub_100045F60();
    sub_100044F90(v8, v9, v10);
    sub_100045E94();
  }

  else
  {
    uint64_t v11 = sub_100045ED0();
    sub_100044874(v11, v12, v13, v14);
  }

  sub_100020484();
}

void sub_1000442E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100044304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100044320( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(void, uint64_t, void *, uint64_t), void (*a7)(uint64_t, uint64_t, void *))
{
  char v10 = a1;
  if ((a3 & 1) != 0)
  {
    sub_100045EB0();
    if (v12 != v13)
    {
      sub_100045F18();
      if (v12)
      {
        __break(1u);
        return;
      }

      sub_100045EA0();
    }
  }

  else
  {
    uint64_t v11 = a2;
  }

  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (v15)
  {
    uint64_t v16 = sub_100045FF0(a1, a2, a3, a4, a5);
    os_log_type_t v17 = (void *)sub_100016BCC(v16, 32 * v15 + 32);
    size_t v18 = j__malloc_size(v17);
    v17[2] = v14;
    v17[3] = 2 * ((uint64_t)(v18 - 32) / 32);
  }

  else
  {
    os_log_type_t v17 = &_swiftEmptyArrayStorage;
  }

  os_log_type_t v19 = v17 + 4;
  if ((v10 & 1) != 0)
  {
    a7(a4 + 32, v14, v19);
    sub_100045E94();
  }

  else
  {
    a6(0LL, v14, v19, a4);
  }

  sub_100031C6C();
}

void sub_1000443E8()
{
  if ((v2 & 1) != 0)
  {
    sub_100045EB0();
    if (v3 != v4)
    {
      sub_100045F18();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_100045EA0();
    }
  }

  sub_100045EC0();
  if (v1)
  {
    uint64_t v10 = sub_100045FF0(v5, v6, v7, v8, v9);
    uint64_t v11 = (const void *)sub_100016BCC(v10, 16 * v1 + 32);
    sub_100045F38(v11);
    sub_100045F50(v12);
  }

  if ((v0 & 1) != 0)
  {
    char v13 = (char *)sub_100045F60();
    sub_100045070(v13, v14, v15);
    sub_100045E94();
  }

  else
  {
    uint64_t v16 = sub_100045ED0();
    sub_100044B4C(v16, v17, v18, v19);
  }

  sub_100020484();
}

void sub_10004447C()
{
  if ((v3 & 1) != 0)
  {
    sub_100045EB0();
    if (v4 != v5)
    {
      sub_100045F18();
      if (v4)
      {
        __break(1u);
        return;
      }

      sub_100045EA0();
    }
  }

  sub_100045EC0();
  if (v2)
  {
    uint64_t v6 = sub_10000FD7C(&qword_100083010);
    uint64_t v7 = (void *)sub_100016BCC(v6, v2 + 32);
    size_t v8 = j__malloc_size(v7);
    v7[2] = v1;
    v7[3] = 2 * v8 - 64;
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v9 = (char *)sub_100045F60();
    sub_1000450C8(v9, v10, v11);
    sub_100045E94();
  }

  else
  {
    uint64_t v12 = sub_100045ED0();
    sub_100044C2C(v12, v13, v14, v15);
  }

  sub_100020484();
}

void sub_10004451C()
{
  if ((v2 & 1) != 0)
  {
    sub_100045EB0();
    if (v3 != v4)
    {
      sub_100045F18();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_100045EA0();
    }
  }

  sub_100045EC0();
  if (v1)
  {
    uint64_t v5 = sub_10000FD7C(&qword_100083018);
    uint64_t v6 = (const void *)sub_100016BCC(v5, 4 * v1 + 32);
    sub_100045F38(v6);
    sub_100045F50(v7);
  }

  if ((v0 & 1) != 0)
  {
    size_t v8 = (char *)sub_100045F60();
    sub_100045148(v8, v9, v10);
    sub_100045E94();
  }

  else
  {
    uint64_t v11 = sub_100045ED0();
    sub_100044D18(v11, v12, v13, v14);
  }

  sub_100020484();
}

uint64_t sub_1000445B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(void))
{
  char v8 = a1;
  if ((a3 & 1) != 0)
  {
    sub_100045EB0();
    if (v10 != v11)
    {
      sub_100045F18();
      if (v10)
      {
        __break(1u);
LABEL_23:
        sub_10003C144();
        os_log_type_t v26 = "Division by zero";
        uint64_t v27 = 16LL;
LABEL_25:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v26,  v27,  2LL,  "Swift/IntegerTypes.swift",  24LL);
        __break(1u);
        return result;
      }

      sub_100045EA0();
    }
  }

  else
  {
    uint64_t v9 = a2;
  }

  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (!v13)
  {
    uint64_t v19 = &_swiftEmptyArrayStorage;
    goto LABEL_18;
  }

  uint64_t v14 = sub_100045FF0(a1, a2, a3, a4, a5);
  uint64_t v15 = *(void *)(((uint64_t (*)(void))a6)(0LL) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  uint64_t v19 = (void *)swift_allocObject(v14, v18 + v16 * v13, v17 | 7);
  size_t v20 = j__malloc_size(v19);
  if (!v16) {
    goto LABEL_23;
  }
  if (v20 - v18 == 0x8000000000000000LL && v16 == -1)
  {
    sub_10003C144();
    os_log_type_t v26 = "Division results in an overflow";
    uint64_t v27 = 31LL;
    goto LABEL_25;
  }

  v19[2] = v12;
  void v19[3] = 2 * ((uint64_t)(v20 - v18) / v16);
LABEL_18:
  uint64_t v22 = *(unsigned __int8 *)(*(void *)(((uint64_t (*)(void))a6)(0LL) - 8) + 80LL);
  uint64_t v23 = (v22 + 32) & ~v22;
  unint64_t v24 = (unint64_t)v19 + v23;
  if ((v8 & 1) != 0)
  {
    sub_1000451CC(a4 + v23, v12, v24, a6);
    sub_100045E94();
  }

  else
  {
    sub_100044E08(0LL, v12, v24, a4, (uint64_t (*)(void))a6);
  }

  return (uint64_t)v19;
}

uint64_t sub_100044758(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 40 * a1 + 32;
  unint64_t v8 = a3 + 40 * v4;
  if (v7 >= v8 || v7 + 40 * v4 <= a3)
  {
    sub_10000FD7C(&qword_100083038);
    swift_arrayInitWithCopy(a3, v7);
    swift_bridgeObjectRelease(a4);
    return v8;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_100044874(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v6 = (char *)(a4 + 8 * a1 + 32);
  unint64_t v7 = &__dst[8 * v4];
  if (v6 >= v7 || &v6[8 * v4] <= __dst)
  {
    memcpy(__dst, v6, 8 * v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100044964(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 32 * a1 + 32;
  unint64_t v7 = a3 + 32 * v4;
  if (v6 >= v7 || v6 + 32 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3, v6);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100044A58(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 32 * a1 + 32;
  unint64_t v7 = a3 + 32 * v4;
  if (v6 >= v7 || v6 + 32 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3, v6);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_100044B4C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    sub_10003C144();
    char v10 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v11 = 51LL;
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 16 * a1 + 32;
  if (v6 >= a3 + 16 * v4 || v6 + 16 * v4 <= a3)
  {
    sub_10000FD7C(&qword_100082AE0);
    swift_arrayInitWithCopy(a3, v6);
    sub_100031D08();
    sub_100045F24();
    return;
  }

  sub_10003C144();
  char v10 = "UnsafeMutablePointer.initialize overlapping range";
  uint64_t v11 = 49LL;
LABEL_11:
  sub_100045E88( (uint64_t)"Fatal error",  11LL,  2LL,  (uint64_t)v10,  v11,  v8,  (uint64_t)"Swift/UnsafePointer.swift",  v9,  v12,  v13,  v14);
  __break(1u);
}

char *sub_100044C2C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if ((v4 & 0x8000000000000000LL) != 0)
  {
LABEL_9:
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = (char *)(a4 + a1 + 32);
  unint64_t v7 = &__dst[v4];
  if (v6 >= &__dst[v4] || &v6[v4] <= __dst)
  {
    memcpy(__dst, v6, v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_100044D18(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = (char *)(a4 + 4 * a1 + 32);
  unint64_t v7 = &__dst[4 * v4];
  if (v6 >= v7 || &v6[4 * v4] <= __dst)
  {
    memcpy(__dst, v6, 4 * v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100044E08( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    sub_10003C144();
    size_t v20 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v21 = 51LL;
    goto LABEL_11;
  }

  uint64_t v9 = *(void *)(a5(0LL) - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  uint64_t v13 = v11 * v5;
  unint64_t v14 = a3 + v13;
  unint64_t v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3, v12);
    sub_100031D08();
    return v14;
  }

  sub_10003C144();
  size_t v20 = "UnsafeMutablePointer.initialize overlapping range";
  uint64_t v21 = 49LL;
LABEL_11:
  uint64_t result = sub_100045E88( (uint64_t)"Fatal error",  11LL,  2LL,  (uint64_t)v20,  v21,  v18,  (uint64_t)"Swift/UnsafePointer.swift",  v19,  v22,  v23,  v24);
  __break(1u);
  return result;
}

char *sub_100044F04(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[40 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 40 * a2);
  }

  return __src;
}

char *sub_100044F90(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }

  return __src;
}

char *sub_100045014(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10003C144();
    uint64_t result = (char *)sub_100045E60( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_100045E78(a3, result);
  }

  return result;
}

char *sub_100045070(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10003C144();
    uint64_t result = (char *)sub_100045E60( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_100045E78(a3, result);
  }

  return result;
}

char *sub_1000450C8(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000LL) != 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }

  return __src;
}

char *sub_100045148(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[4 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 4 * a2);
  }

  return __src;
}

uint64_t sub_1000451CC(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void))
{
  if (a2 < 0)
  {
    sub_10003C144();
    uint64_t result = sub_100045E60( (uint64_t)"Fatal error",  v11,  v12,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v13,  v14,  (uint64_t)"Swift/UnsafePointer.swift",  v15,  v16,  v17,  v18);
    __break(1u);
  }

  else if (a3 < a1 {
         || (uint64_t result = ((uint64_t (*)(void))a4)(0LL),
  }
             a1 + *(void *)(*(void *)(result - 8) + 72LL) * a2 <= a3))
  {
    a4(0LL);
    uint64_t v10 = sub_100046038();
    return swift_arrayInitWithTakeFrontToBack(v10);
  }

  else if (a3 != a1)
  {
    uint64_t v9 = sub_100046038();
    return swift_arrayInitWithTakeBackToFront(v9);
  }

  return result;
}

void sub_100045294(uint64_t (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = a1();
  sub_100016C1C();
}

uint64_t sub_1000452B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, a4);
}

_BYTE **sub_1000452DC(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  char v4 = *result;
  _BYTE *v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t sub_1000452EC(uint64_t (*a1)(void))
{
  return a1();
}

void sub_10004530C(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  uint64_t v8 = v7;
  sub_100045370(v6, v7, a3);
  uint64_t v9 = *a1;
  uint64_t v10 = *a1 + 8;
  uint64_t v12 = v11;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v9, v10);
  swift_bridgeObjectRelease(v8);
  *a1 = v10;
  sub_100045F90();
}

void sub_100045370(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10004542C(v10, 0LL, 0LL, 1, v4, v3);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType(v6);
    v10[0] = v7;
    uint64_t v8 = *a3;
    if (*a3)
    {
      sub_10001DBA4((uint64_t)v10, *a3);
      *a3 = v8 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v10[0] = v4;
    v10[1] = v3;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10001DBA4((uint64_t)v10, *a3);
      *a3 = v9 + 32;
    }

    swift_bridgeObjectRetain(v3);
  }

  sub_10000FF38(v10);
  sub_100045F24();
}

void *sub_10004542C(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_100045580((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
      uint64_t result = 0LL;
      *a1 = __dst;
      return result;
    }

    goto LABEL_11;
  }

  if ((a6 & 0x1000000000000000LL) != 0)
  {
LABEL_11:
    uint64_t result = sub_100045644(a5, a6);
    *a1 = v12;
    return result;
  }

  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }

  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
      __break(1u);
      return result;
    }
  }

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return (void *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

void *sub_100045580(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory with negative count",  60LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1170LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1173LL,  0);
  }

  __break(1u);
  return result;
}

void *sub_100045644(uint64_t a1, unint64_t a2)
{
  char v2 = sub_1000456D8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    char v2 = sub_1000458AC(0LL, v2[2] + 1LL, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    char v2 = sub_1000458AC((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_1000456D8(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v4 = String.UTF8View._foreignCount()();
    if (v4) {
      goto LABEL_6;
    }
    return &_swiftEmptyArrayStorage;
  }

  if ((a2 & 0x2000000000000000LL) != 0) {
    Swift::Int v4 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_6:
  uint64_t v5 = sub_100045848(v4, 0LL);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  2,  71LL,  0);
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v6 = v5;
  uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    goto LABEL_15;
  }

  if (v7 == v4) {
    return v6;
  }
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  2,  1122LL,  0);
LABEL_15:
  __break(1u);
  return result;
}

void *sub_100045848(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_10000FD7C((uint64_t *)&unk_100082FB0);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  _OWORD v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

char *sub_1000458AC(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10000FD7C((uint64_t *)&unk_100082FB0);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_1000450C8(v14, v8, v13);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_100045980(v14, v8, v13);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_100045980(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_100045A44()
{
  uint64_t v1 = sub_100045FA0();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100045A60(char a1)
{
  return sub_100040BD4(a1, v1);
}

uint64_t sub_100045A68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100045A78(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100045A80()
{
  uint64_t v0 = sub_100045FB0();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100045AA0(int a1, uint64_t a2)
{
  return sub_100040DDC(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(char *))(v2 + 32));
}

uint64_t sub_100045AAC()
{
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100045AD8(uint64_t a1)
{
  return sub_100042C08(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100045AE4()
{
  uint64_t v1 = sub_100045FA0();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100045B00()
{
  return sub_100045B50((void (*)(void))&_swift_release);
}

uint64_t sub_100045B0C(int a1, uint64_t a2)
{
  return sub_100042E64(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100045B14()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100045B3C(nw_connection *a1)
{
  return sub_100043444(a1, *(void *)(v1 + 16), *(dispatch_queue_s **)(v1 + 24));
}

uint64_t sub_100045B44()
{
  return sub_100045B50((void (*)(void))&_swift_unknownObjectRelease);
}

uint64_t sub_100045B50(void (*a1)(void))
{
  return swift_deallocObject(v1, 32LL, 7LL);
}

uint64_t sub_100045B7C(uint64_t a1, uint64_t a2)
{
  return sub_1000435BC(a1, a2, *(nw_connection **)(v2 + 16), *(void *)(v2 + 24));
}

void sub_100045B84(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  *a2 = sub_100046008(a1);
  sub_100016C1C();
}

uint64_t sub_100045BA4(uint64_t (*a1)(void))
{
  return sub_100046008(a1) & 1;
}

uint64_t sub_100045BC4(uint64_t (*a1)(void))
{
  return sub_100046008(a1);
}

void sub_100045BE0(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  uint64_t v13 = (void *)v6;
  uint64_t v14 = *a1;
  uint64_t v15 = *a1 + 8;
  if (v6) {
    int v16 = sub_100045F6C(v6, v7, v14, v8, v9, v10, v11, v12, v6);
  }
  else {
    int v16 = sub_100045F6C(0LL, v7, v14, v8, v9, v10, v11, v12, 0LL);
  }
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v16, v17, v18, v15);
  *a1 = v15;
  uint64_t v19 = *a2;
  if (*a2)
  {
    *uint64_t v19 = v13;
    *a2 = v19 + 1;
  }

  else
  {
  }

  sub_100045F90();
}

uint64_t sub_100045C7C()
{
  uint64_t v1 = type metadata accessor for TunnelConnectionState(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  sub_100016D58();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100045CEC()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for TunnelConnectionState(0LL) - 8) + 80LL);
  (*(void (**)(uint64_t))(v0 + 16))(v0 + ((v1 + 32) & ~v1));
  sub_100016C1C();
}

void sub_100045D28(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_10001214C(a2);
    atomic_store(sub_100026E8C(v3), a1);
  }

  sub_100016C1C();
}

uint64_t sub_100045D5C()
{
  uint64_t v1 = sub_100045FA0();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100045D78()
{
  uint64_t v0 = sub_100045FB0();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100045D9C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1000422C4( a1,  a2,  a3,  a4,  *(void *)(v4 + 16),  *(void (**)(__n128))(v4 + 24),  *(void *)(v4 + 32),  *(void *)(v4 + 40));
}

uint64_t sub_100045DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD7C((uint64_t *)&unk_100082FF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100045DF0()
{
  uint64_t v1 = sub_100045FB0();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100045E10(uint64_t a1)
{
  return sub_100041FC8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(uint64_t))(v1 + 32));
}

uint64_t sub_100045E60( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 55LL, 2LL, a7, 25LL, a9, a10, a11);
}

void *sub_100045E78@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t sub_100045E88( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2LL, a7, 25LL, a9, a10, a11);
}

uint64_t sub_100045E94()
{
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  return swift_bridgeObjectRelease(v0);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100045ED0()
{
  return 0LL;
}

  ;
}

uint64_t sub_100045EFC(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_100045F0C(uint64_t a1)
{
  return swift_unknownObjectRelease(a1);
}

  ;
}

  ;
}

size_t sub_100045F38(const void *a1)
{
  return j__malloc_size(a1);
}

void sub_100045F50(uint64_t a1@<X8>)
{
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *(void *)(v3 + 24) = 2 * (a1 / v1);
}

uint64_t sub_100045F60()
{
  return v0 + 32;
}

uint64_t *sub_100045F6C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

  ;
}

uint64_t sub_100045F88()
{
  return swift_unknownObjectRetain(v0);
}

  ;
}

uint64_t sub_100045FA0()
{
  return v0;
}

uint64_t sub_100045FB0()
{
  return v0;
}

  ;
}

void sub_100045FD8(Swift::String a1)
{
}

  ;
}

uint64_t sub_100045FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return sub_10000FD7C(a5);
}

uint64_t sub_100045FF8@<X0>(uint64_t a1@<X8>)
{
  return swift_unknownObjectRelease(*(void *)(v1 + a1));
}

uint64_t sub_100046000()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_100046008(uint64_t (*a1)(void))
{
  return a1();
}

  ;
}

uint64_t sub_100046024()
{
  return swift_release(*(void *)(v0 + 40));
}

uint64_t sub_10004602C()
{
  return type metadata accessor for TunnelConnectionIdentifierCategory(0LL);
}

uint64_t sub_100046038()
{
  return v0;
}

uint64_t sub_10004604C@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(v2, a1, v3);
}

uint64_t sub_100046058(uint64_t a1)
{
  return swift_weakInit(a1 + 16, v1);
}

#error "1000460DC: call analysis failed (funcsize=59)"
#error "1000461E0: call analysis failed (funcsize=60)"
#error "1000462E8: call analysis failed (funcsize=61)"
#error "1000463EC: call analysis failed (funcsize=60)"
#error "1000464EC: call analysis failed (funcsize=59)"
#error "1000465EC: call analysis failed (funcsize=59)"
uint64_t sub_100046674(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  uint64_t v2 = OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager_firstUnlockHasCompleted;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager_firstUnlockHasCompleted) & 1) == 0)
  {
    uint64_t v3 = MKBDeviceUnlockedSinceBoot(result);
    if ((_DWORD)v3 == 1)
    {
      *(_BYTE *)(v1 + __chkstk_darwin(v1, v2) = 1;
      uint64_t v4 = static os_log_type_t.default.getter(v3);
      os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  qword_1000845F0,  "First unlock notification received. Executing deferred work",  59LL,  2LL,  &_swiftEmptyArrayStorage);
      uint64_t v5 = (void *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager__registeredFirstUnlockHandlers);
      swift_beginAccess( v1 + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager__registeredFirstUnlockHandlers,  v13,  1LL,  0LL);
      uint64_t v6 = *v5;
      uint64_t v7 = *(void *)(*v5 + 16LL);
      if (v7)
      {
        swift_bridgeObjectRetain(*v5);
        uint64_t v8 = (void *)(v6 + 40);
        do
        {
          uint64_t v10 = (void (*)(uint64_t))*(v8 - 1);
          uint64_t v9 = *v8;
          uint64_t v11 = swift_retain(*v8);
          v10(v11);
          swift_release(v9);
          v8 += 2;
          --v7;
        }

        while (v7);
        sub_10001DCE8();
      }

      void *v5 = &_swiftEmptyArrayStorage;
      return sub_10001DCE8();
    }

    else
    {
      uint64_t v12 = static os_log_type_t.fault.getter(v3);
      return sub_100012380( v12,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"Received first lock notification but device has not actually been unlocked since boot",  85LL);
    }
  }

  return result;
}

BOOL sub_1000467A0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10001DD40();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  uint64_t v8 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10000FD7C(&qword_1000820C0);
  uint64_t v10 = *(void *)(*(void *)(v9 - 8) + 64LL);
  __chkstk_darwin(v9, v11);
  sub_10001DEA8();
  uint64_t v12 = v1 + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager__lastUnlockDate;
  swift_beginAccess(v1 + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager__lastUnlockDate, v93, 0LL, 0LL);
  sub_100048490();
  if (sub_10001D9C8(v1, 1LL, v4) == 1)
  {
    sub_1000478B0(v1);
  }

  else
  {
    sub_100012290( (uint64_t)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v1,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32));
    BOOL v13 = sub_10004701C(a1);
    if (v13)
    {
      uint64_t v14 = static os_log_type_t.debug.getter(v13);
      os_log_type_t v15 = v14;
      int v16 = (os_log_s *)qword_1000845F0;
      __chkstk_darwin(v14, v17);
      sub_10001DEA8();
      sub_100012290( (uint64_t)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  (uint64_t)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
      os_log_type_t v18 = v15;
      if (os_log_type_enabled(v16, v15))
      {
        uint64_t v19 = (_DWORD *)sub_1000122E0(12LL);
        uint64_t v20 = sub_1000122E0(32LL);
        uint64_t v87 = &v82;
        uint64_t v21 = v20;
        uint64_t v89 = (void **)v20;
        *uint64_t v19 = 136446210;
        uint64_t v86 = (void **)(v19 + 1);
        sub_100026A28( (unint64_t *)&qword_1000815A8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v23 = sub_10004845C(v22);
        uint64_t v24 = v5;
        uint64_t v26 = v25;
        sub_100048454(v23, v25);
        uint64_t v88 = v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v86, v19 + 3);
        swift_bridgeObjectRelease(v26);
        uint64_t v28 = *(void (**)(char *, uint64_t))(v24 + 8);
        v28(v8, v4);
        sub_10004843C( (void *)&_mh_execute_header,  v16,  v18,  "Previously fetched last unlock date %{public}s is still recent");
        swift_arrayDestroy(v21, 1LL);
        sub_10001001C(v21);
        sub_10001001C((uint64_t)v19);
        v28(v8, v4);
      }

      else
      {
        sub_1000483F0((uint64_t)v8);
        sub_1000483F0((uint64_t)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      }

      return 1LL;
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))((char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL), v4);
  }

  uint64_t v29 = MKBGetDeviceLockState(0LL);
  if (!&_BiomeLibrary)
  {
    uint64_t v50 = static os_log_type_t.default.getter(v29);
    sub_100012380( v50,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"BiomeLibrary not available at runtime. Unable to determine last unlock date",  75LL);
    return 0LL;
  }

  uint64_t v86 = (void **)a1;
  uint64_t v87 = (uint64_t *)v5;
  id v32 = (id)BiomeLibrary();
  id v33 = [v32 Device];
  swift_unknownObjectRelease(v32);
  id v34 = [v33 KeybagLocked];
  swift_unknownObjectRelease(v33);
  id v35 = [(id)objc_opt_self(BMPublisherOptions) reversed];
  id v36 = [v34 publisherWithOptions:v35];

  uint64_t v91 = sub_100047240;
  uint64_t v92 = 0LL;
  uint64_t v89 = _NSConcreteStackBlock;
  v90[0] = 1107296256LL;
  __int16 v37 = sub_10004849C((uint64_t)sub_100036F04);
  uint64_t v91 = sub_100047908;
  uint64_t v92 = v2;
  uint64_t v89 = _NSConcreteStackBlock;
  v90[0] = 1107296256LL;
  __int16 v38 = sub_10004849C((uint64_t)sub_10004762C);
  swift_retain(v2);
  swift_release();
  id v39 = [v36 sinkWithCompletion:v37 shouldContinue:v38];
  _Block_release(v38);
  _Block_release(v37);

  uint64_t v42 = __chkstk_darwin(v40, v41);
  uint64_t v43 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v42, v44);
  sub_10001DEA8();
  sub_100048490();
  if (sub_10001D9C8((uint64_t)v39, 1LL, v4) != 1)
  {
    uint64_t v85 = &v82;
    uint64_t v51 = v87;
    sub_100012290( (uint64_t)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  (uint64_t)v39,  (uint64_t (*)(uint64_t, uint64_t, uint64_t))v87[4]);
    uint64_t v52 = (uint64_t)v86;
    uint64_t v53 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    BOOL v54 = sub_10004701C((uint64_t)v86);
    if (!v54)
    {
      os_log_type_t v69 = static os_log_type_t.default.getter(v54);
      unint64_t v70 = (os_log_s *)qword_1000845F0;
      os_log_type_t v71 = v69;
      if (os_log_type_enabled((os_log_t)qword_1000845F0, v69))
      {
        swift_retain_n(v2, 2LL);
        uint64_t v72 = sub_1000122E0(22LL);
        uint64_t v84 = v43;
        uint64_t v73 = v72;
        uint64_t v74 = sub_1000122E0(32LL);
        os_log_t v83 = v70;
        uint64_t v89 = (void **)v74;
        uint64_t v75 = v74;
        *(_DWORD *)uint64_t v73 = 136315394;
        uint64_t v82 = v73 + 4;
        __chkstk_darwin(v74, v76);
        int v77 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        sub_100047868(v12, (uint64_t)v77);
        uint64_t v78 = String.init<A>(describing:)(v77, v9);
        uint64_t v80 = v79;
        sub_100048454(v78, v79);
        uint64_t v88 = v81;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v82, v73 + 12);
        swift_release_n(v2, 2LL);
        swift_bridgeObjectRelease(v80);
        *(_WORD *)(v73 + 12) = 2048;
        uint64_t v88 = v52;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v73 + 14, v73 + 22);
        _os_log_impl( (void *)&_mh_execute_header,  v83,  v71,  "Last unlock was at date %s, which is not within %ld",  (uint8_t *)v73,  0x16u);
        swift_arrayDestroy(v75, 1LL);
        sub_10001001C(v75);
        sub_10001001C(v73);
        ((void (*)(char *, uint64_t))v87[1])(v84, v4);
      }

      else
      {
        ((void (*)(char *, uint64_t))v87[1])(v43, v4);
      }

      return 0LL;
    }

    uint64_t v55 = static os_log_type_t.info.getter(v54);
    os_log_type_t v56 = v55;
    __n128 v57 = (os_log_s *)qword_1000845F0;
    __chkstk_darwin(v55, v58);
    sub_10001DEA8();
    sub_100012290( (uint64_t)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  (uint64_t)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  (uint64_t (*)(uint64_t, uint64_t, uint64_t))v51[2]);
    os_log_type_t v59 = v56;
    if (os_log_type_enabled(v57, v56))
    {
      uint64_t v60 = sub_1000122E0(22LL);
      uint64_t v61 = sub_1000122E0(32LL);
      os_log_t v83 = v57;
      uint64_t v62 = v61;
      uint64_t v89 = (void **)v61;
      *(_DWORD *)uint64_t v60 = 136446466;
      sub_100026A28( (unint64_t *)&qword_1000815A8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v64 = sub_10004845C(v63);
      uint64_t v84 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v66 = v65;
      sub_100048454(v64, v65);
      uint64_t v88 = v67;
      uint64_t v82 = (uint64_t)&v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v60 + 4, v60 + 12);
      swift_bridgeObjectRelease(v66);
      uint64_t v68 = (void (*)(char *, uint64_t))v51[1];
      v68(v53, v4);
      *(_WORD *)(v60 + 12) = 2048;
      uint64_t v88 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v60 + 14, v60 + 22);
      _os_log_impl( (void *)&_mh_execute_header,  v83,  v59,  "Last unlock date %{public}s is within %ld",  (uint8_t *)v60,  0x16u);
      sub_1000481FC();
      sub_10001001C(v62);
      sub_10001001C(v60);
      v68(v84, v4);
    }

    else
    {
      sub_1000483F0((uint64_t)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      sub_1000483F0((uint64_t)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    }

    return 1LL;
  }

  uint64_t v45 = sub_1000478B0((uint64_t)v39);
  os_log_type_t v46 = static os_log_type_t.error.getter(v45);
  uint64_t v47 = (os_log_s *)qword_1000845F0;
  os_log_type_t v48 = v46;
  BOOL result = os_log_type_enabled((os_log_t)qword_1000845F0, v46);
  if (result)
  {
    uint64_t v49 = (_DWORD *)sub_1000122E0(12LL);
    _DWORD *v49 = 134217984;
    uint64_t v89 = v86;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90, v49 + 1, v49 + 3);
    sub_10004843C( (void *)&_mh_execute_header,  v47,  v48,  "Could not find last unlock event. Unable to confirm whether device was unlocked within requested %ld hours. Will return false");
    sub_10001001C((uint64_t)v49);
    return 0LL;
  }

  return result;
}

BOOL sub_10004701C(uint64_t a1)
{
  uint64_t v32 = a1;
  uint64_t v34 = type metadata accessor for Calendar(0LL);
  uint64_t v4 = *(void *)(v34 - 8);
  __chkstk_darwin(v34, v5);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for Calendar.Identifier(0LL);
  sub_100048428();
  __chkstk_darwin(v8, v9);
  sub_100012404();
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v3, enum case for Calendar.Identifier.gregorian(_:), v2);
  Calendar.init(identifier:)(v3);
  sub_100048408();
  type metadata accessor for DateComponents(0LL);
  sub_100048428();
  __chkstk_darwin(v10, v11);
  sub_100012404();
  uint64_t v12 = sub_10000FD7C(&qword_1000831A0);
  uint64_t v13 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = (v15 + 32) & ~v15;
  uint64_t v17 = swift_allocObject(v12, v16 + *(void *)(v14 + 72), v15 | 7);
  *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100062930;
  (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))( v17 + v16,  enum case for Calendar.Component.hour(_:),  v13);
  uint64_t v18 = sub_100047E1C(v17);
  uint64_t v19 = sub_10001DD40();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v24 = (char *)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static Date.now.getter(v22);
  Calendar.dateComponents(_:from:to:)(v18, v33, v24);
  sub_100016D6C();
  uint64_t v25 = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v24, v19);
  uint64_t v26 = DateComponents.hour.getter(v25);
  if ((v27 & 1) != 0)
  {
    uint64_t v29 = static os_log_type_t.error.getter(v26);
    sub_100012380( v29,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"Unable to read hour component of date comparison",  48LL);
    BOOL v28 = 0LL;
  }

  else
  {
    BOOL v28 = v26 < v32;
  }

  sub_100048408();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v34);
  return v28;
}

void sub_100047240(void *a1)
{
  id v1 = [a1 error];
  if (v1)
  {
    id v14 = v1;
    os_log_type_t v2 = static os_log_type_t.error.getter(v1);
    uint64_t v3 = (os_log_s *)qword_1000845F0;
    os_log_type_t v4 = v2;
    if (os_log_type_enabled((os_log_t)qword_1000845F0, v2))
    {
      id v5 = v14;
      uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v7 = swift_slowAlloc(32LL, -1LL);
      id v15 = v5;
      uint64_t v16 = v7;
      *(_DWORD *)uint64_t v6 = 136315138;
      id v8 = v5;
      uint64_t v9 = sub_10000FD7C(&qword_100081A10);
      uint64_t v10 = String.init<A>(describing:)(&v15, v9);
      uint64_t v12 = v11;
      sub_100045370(v10, v11, &v16);
      id v15 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v6 + 4, v6 + 12);

      swift_bridgeObjectRelease(v12);
      _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "Failed to subscribe for keybag events from Biome due to error: %s",  v6,  0xCu);
      swift_arrayDestroy(v7, 1LL);
      swift_slowDealloc(v7, -1LL, -1LL);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    else
    {
    }
  }

uint64_t sub_1000473E4(void *a1, uint64_t a2)
{
  id v4 = [a1 eventBody];
  if (!v4) {
    return 1LL;
  }
  id v5 = v4;
  if ([v4 starting])
  {

    return 1LL;
  }

  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v25 = (uint64_t)&v25;
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7, v10);
  unint64_t v11 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v12 = Date.init(timeIntervalSinceReferenceDate:)([a1 timestamp]);
  uint64_t v14 = __chkstk_darwin(v12, v13);
  static Date.now.getter(v14);
  sub_100026A28(&qword_1000831C0, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  char v16 = dispatch thunk of static Comparable.< infix(_:_:)(&v26[-v11 - 8], &v26[-v11 - 8], v7, v15);

  uint64_t v17 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  v17(&v26[-v11 - 8], v7);
  if ((v16 & 1) != 0)
  {
    v17(&v26[-v11 - 8], v7);
    return 1LL;
  }

  else
  {
    uint64_t v18 = sub_10000FD7C(&qword_1000820C0);
    uint64_t v19 = *(void *)(*(void *)(v18 - 8) + 64LL);
    __chkstk_darwin(v18, v20);
    unint64_t v21 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(&v26[-v21 - 8], &v26[-v11 - 8], v7);
    uint64_t v22 = sub_10001D930((uint64_t)&v26[-v21 - 8], 0LL, 1LL, v7);
    __chkstk_darwin(v22, v23);
    sub_1000480D0((uint64_t)&v26[-v21 - 8], (uint64_t)&v26[-v21 - 8]);
    uint64_t v24 = a2 + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager__lastUnlockDate;
    swift_beginAccess(v24, v26, 33LL, 0LL);
    sub_100048118((uint64_t)&v26[-v21 - 8], v24);
    swift_endAccess(v26);
    return 0LL;
  }

uint64_t sub_10004762C(uint64_t a1, void *a2)
{
  id v4 = *(uint64_t (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  LOBYTE(v4) = v4();
  swift_release(v3);

  return v4 & 1;
}

uint64_t sub_10004767C()
{
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager__registeredFirstUnlockHandlers));
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1000476BC()
{
  return type metadata accessor for LockStateManager(0LL);
}

uint64_t type metadata accessor for LockStateManager(uint64_t a1)
{
  uint64_t result = qword_100083098;
  if (!qword_100083098) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LockStateManager);
  }
  return result;
}

void sub_1000476FC(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = &unk_1000638C8;
    swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
  }

void sub_100047780(uint64_t a1)
{
  if (!qword_1000830A8)
  {
    uint64_t v2 = type metadata accessor for Date(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1000830A8);
    }
  }

void sub_1000477D4()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager__lastUnlockDate;
  uint64_t v2 = sub_10001DD40();
  uint64_t v3 = sub_10001D930(v1, 1LL, 1LL, v2);
  *(void *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager__registeredFirstUnlockHandlers) = &_swiftEmptyArrayStorage;
  uint64_t v4 = OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager_firstUnlockHasCompleted;
  *(_BYTE *)(v0 + v4) = MKBDeviceUnlockedSinceBoot(v3) == 1;
  sub_100016C1C();
}

uint64_t sub_10004783C()
{
  return sub_10000F040();
}

uint64_t sub_100047844()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100047868(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD7C(&qword_1000820C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000478B0(uint64_t a1)
{
  uint64_t v2 = sub_10000FD7C(&qword_1000820C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000478F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100047900(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100047908(void *a1)
{
  return sub_1000473E4(a1, v1);
}

void sub_100047910(unint64_t a1)
{
  uint64_t v3 = a1 >> 62;
  if (a1 >> 62) {
    goto LABEL_25;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
    goto LABEL_26;
  }
LABEL_3:
  sub_10000FD7C(&qword_1000835D0);
  uint64_t v4 = (void *)sub_1000482F4();
  if (v3)
  {
    while (1)
    {
      sub_100048264();
      uint64_t v3 = sub_100048384();
      sub_10001DCE8();
      if (!v3) {
        break;
      }
LABEL_5:
      sub_100048344();
      uint64_t v38 = v3;
      while (1)
      {
        if (v40)
        {
          sub_100048484(v5, v6, v7, v8, v9, v10, v11, v12, v36, v37, v38, v39);
        }

        else
        {
          sub_100048418();
          if (v21) {
            goto LABEL_24;
          }
          sub_1000484BC(v13, v14, v15, v16, v17, v18, v19, v20, v36);
        }

        BOOL v22 = __OFADD__(v1++, 1LL);
        if (v22) {
          break;
        }
        uint64_t v23 = sub_1000484A8();
        type metadata accessor for ControlChannelConnection(v23);
        sub_100026A28( &qword_100082090,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
        sub_1000483B4(v24);
        sub_100048304();
        if (v26)
        {
LABEL_17:
          sub_100048364(v25, v36, v37, v38, v39, v40, v41);
          if (v22) {
            goto LABEL_23;
          }
          v4[2] = v33;
        }

        else
        {
          sub_100026A28( &qword_1000831C8,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
          while ((sub_1000482D0(v27, v28, v29, v30, v31, v32) & 1) == 0)
          {
            sub_100048398();
            if (v26)
            {
              uint64_t v3 = v38;
              goto LABEL_17;
            }
          }

          uint64_t v5 = swift_release(v41);
          uint64_t v3 = v38;
        }

        if (v1 == v3)
        {
          uint64_t v34 = v39;
          goto LABEL_29;
        }
      }

      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      sub_100048264();
      uint64_t v35 = sub_100048384();
      sub_10001DCE8();
      if (v35) {
        goto LABEL_3;
      }
LABEL_26:
      uint64_t v4 = &_swiftEmptySetSingleton;
      if (!v3) {
        goto LABEL_4;
      }
    }
  }

  else
  {
LABEL_4:
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v3) {
      goto LABEL_5;
    }
  }

  uint64_t v34 = a1;
LABEL_29:
  swift_bridgeObjectRelease(v34);
  sub_100048328();
}

void sub_100047A90(unint64_t a1)
{
  uint64_t v3 = a1 >> 62;
  if (a1 >> 62) {
    goto LABEL_25;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
    goto LABEL_26;
  }
LABEL_3:
  sub_10000FD7C(&qword_1000831D0);
  uint64_t v4 = (void *)sub_1000482F4();
  if (v3)
  {
    while (1)
    {
      sub_100048264();
      uint64_t v3 = sub_100048384();
      sub_10001DCE8();
      if (!v3) {
        break;
      }
LABEL_5:
      sub_100048344();
      uint64_t v38 = v3;
      while (1)
      {
        if (v40)
        {
          sub_100048484(v5, v6, v7, v8, v9, v10, v11, v12, v36, v37, v38, v39);
        }

        else
        {
          sub_100048418();
          if (v21) {
            goto LABEL_24;
          }
          sub_1000484BC(v13, v14, v15, v16, v17, v18, v19, v20, v36);
        }

        BOOL v22 = __OFADD__(v1++, 1LL);
        if (v22) {
          break;
        }
        uint64_t v23 = sub_1000484A8();
        type metadata accessor for SystemXPCPeerConnection(v23);
        sub_100026A28( &qword_1000819F8,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
        sub_1000483B4(v24);
        sub_100048304();
        if (v26)
        {
LABEL_17:
          sub_100048364(v25, v36, v37, v38, v39, v40, v41);
          if (v22) {
            goto LABEL_23;
          }
          v4[2] = v33;
        }

        else
        {
          sub_100026A28( (unint64_t *)&unk_100083630,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
          while ((sub_1000482D0(v27, v28, v29, v30, v31, v32) & 1) == 0)
          {
            sub_100048398();
            if (v26)
            {
              uint64_t v3 = v38;
              goto LABEL_17;
            }
          }

          uint64_t v5 = swift_release(v41);
          uint64_t v3 = v38;
        }

        if (v1 == v3)
        {
          uint64_t v34 = v39;
          goto LABEL_29;
        }
      }

      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      sub_100048264();
      uint64_t v35 = sub_100048384();
      sub_10001DCE8();
      if (v35) {
        goto LABEL_3;
      }
LABEL_26:
      uint64_t v4 = &_swiftEmptySetSingleton;
      if (!v3) {
        goto LABEL_4;
      }
    }
  }

  else
  {
LABEL_4:
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v3) {
      goto LABEL_5;
    }
  }

  uint64_t v34 = a1;
LABEL_29:
  swift_bridgeObjectRelease(v34);
  sub_100048328();
}

void sub_100047C10(unint64_t a1)
{
  unint64_t v1 = a1;
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    sub_1000483DC();
    uint64_t v5 = sub_100048384();
    sub_100016D6C();
    if (v5)
    {
LABEL_3:
      sub_10000FD7C(&qword_100083670);
      uint64_t v3 = (_BYTE *)sub_1000482F4();
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      sub_1000483DC();
      uint64_t v4 = sub_100048384();
      sub_100016D6C();
      if (!v4)
      {
LABEL_25:
        sub_100016D6C();
        return;
      }

      goto LABEL_9;
    }
  }

  else if (*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    goto LABEL_3;
  }

  uint64_t v3 = &_swiftEmptySetSingleton;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v4) {
    goto LABEL_25;
  }
LABEL_9:
  uint64_t v6 = 0LL;
  uint64_t v25 = v4;
  unint64_t v26 = v1 & 0xC000000000000001LL;
  unint64_t v23 = v1 + 32;
  unint64_t v24 = v1;
  while (1)
  {
    if (v26)
    {
      uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v1);
    }

    else
    {
      sub_100048418();
      if (v8) {
        goto LABEL_28;
      }
      uint64_t v7 = *(void *)(v23 + 8 * v6);
      swift_retain(v7);
    }

    BOOL v9 = __OFADD__(v6++, 1LL);
    if (v9) {
      break;
    }
    Hasher.init(_seed:)(v27);
    uint64_t v10 = type metadata accessor for PairableHostsBrowseRegistration();
    sub_100026A28( &qword_1000825C8,  (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration);
    HashableByObjectIdentity.hash(into:)(v27, v10, v11);
    Swift::Int v12 = Hasher._finalize()();
    uint64_t v13 = -1LL << v3[32];
    uint64_t v14 = v12 & ~v13;
    sub_100048470();
    if ((v17 & v16) != 0)
    {
      uint64_t v18 = sub_1000483F8();
      sub_1000483C8(v18);
      sub_100048448();
      if ((v27 & 1) != 0)
      {
LABEL_20:
        swift_release(v7);
        unint64_t v1 = v24;
        goto LABEL_24;
      }

      uint64_t v19 = ~v13;
      while (1)
      {
        uint64_t v14 = (v14 + 1) & v19;
        sub_100048470();
        if ((v16 & v17) == 0) {
          break;
        }
        uint64_t v20 = sub_1000483F8();
        sub_1000483C8(v20);
        sub_100048448();
      }

      unint64_t v1 = v24;
    }

    *(void *)&v3[8 * v15 + 56] = v17 | v16;
    *(void *)(*((void *)v3 + 6) + 8 * v14) = v7;
    uint64_t v21 = *((void *)v3 + 2);
    BOOL v9 = __OFADD__(v21, 1LL);
    uint64_t v22 = v21 + 1;
    if (v9) {
      goto LABEL_27;
    }
    *((void *)v3 + 2) = v22;
LABEL_24:
    if (v6 == v25) {
      goto LABEL_25;
    }
  }

  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t sub_100047E1C(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptySetSingleton;
    goto LABEL_16;
  }

  sub_10000FD7C(&qword_1000831A8);
  uint64_t v3 = static _SetStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v32 = *(void *)(v1 + 16);
  if (!v32)
  {
LABEL_16:
    swift_bridgeObjectRelease(v1);
    return (uint64_t)v4;
  }

  uint64_t v36 = v3 + 56;
  uint64_t result = type metadata accessor for Calendar.Component(0LL);
  uint64_t v6 = result;
  unint64_t v7 = 0LL;
  uint64_t v38 = *(void *)(result - 8);
  uint64_t v8 = *(unsigned __int8 *)(v38 + 80);
  uint64_t v30 = v1;
  uint64_t v31 = v1 + ((v8 + 32) & ~v8);
  while (v7 < *(void *)(v1 + 16))
  {
    uint64_t v9 = *(void *)(v38 + 64);
    uint64_t v37 = *(void *)(v38 + 72);
    __chkstk_darwin(result, v31 + v37 * v7);
    unint64_t v35 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    uint64_t v10 = (char *)&v30 - v35;
    Swift::Int v12 = *(void (**)(char *))(v11 + 16);
    v12((char *)&v30 - v35);
    uint64_t v13 = v4[5];
    sub_100026A28(&qword_1000831B0, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component);
    uint64_t v39 = v10;
    uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v6, v14);
    uint64_t v17 = -1LL << *((_BYTE *)v4 + 32);
    unint64_t v18 = v15 & ~v17;
    unint64_t v19 = v18 >> 6;
    uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
    uint64_t v21 = 1LL << v18;
    if (((1LL << v18) & v20) != 0)
    {
      uint64_t v33 = &v30;
      unint64_t v34 = v7;
      uint64_t v22 = ~v17;
      while (1)
      {
        __chkstk_darwin(v15, v16);
        unint64_t v23 = (char *)&v30 - v35;
        ((void (*)(char *, unint64_t, uint64_t))v12)((char *)&v30 - v35, v4[6] + v18 * v37, v6);
        sub_100026A28(&qword_1000831B8, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component);
        char v25 = dispatch thunk of static Equatable.== infix(_:_:)(v23, v39, v6, v24);
        unint64_t v26 = *(uint64_t (**)(char *, uint64_t))(v38 + 8);
        uint64_t v15 = v26(v23, v6);
        if ((v25 & 1) != 0) {
          break;
        }
        unint64_t v18 = (v18 + 1) & v22;
        unint64_t v19 = v18 >> 6;
        uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
        uint64_t v21 = 1LL << v18;
        if ((v20 & (1LL << v18)) == 0)
        {
          uint64_t v1 = v30;
          unint64_t v7 = v34;
          goto LABEL_10;
        }
      }

      uint64_t result = v26(v39, v6);
      uint64_t v1 = v30;
      unint64_t v7 = v34;
    }

    else
    {
LABEL_10:
      *(void *)(v36 + 8 * v19) = v21 | v20;
      uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v38 + 32))(v4[6] + v18 * v37, v39, v6);
      uint64_t v27 = v4[2];
      BOOL v28 = __OFADD__(v27, 1LL);
      uint64_t v29 = v27 + 1;
      if (v28) {
        goto LABEL_18;
      }
      v4[2] = v29;
    }

    if (++v7 == v32) {
      goto LABEL_16;
    }
  }

  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1000480D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD7C(&qword_1000820C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100048118(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD7C(&qword_1000820C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

void sub_100048160()
{
}

void sub_100048168()
{
}

uint64_t sub_100048170()
{
  return sub_10002BE68();
}

uint64_t sub_100048178()
{
  return sub_100010A7C();
}

uint64_t sub_1000481A0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, &a10, v11, v10);
}

uint64_t sub_1000481BC@<X0>(uint64_t a1@<X8>, uint64_t a2, ...)
{
  return swift_beginAccess(v2 + a1, va, 33LL, 0LL);
}

uint64_t sub_1000481D4(float a1)
{
  *uint64_t v2 = a1;
  return swift_bridgeObjectRetain(v1);
}

void sub_1000481E8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_1000481FC()
{
  return swift_arrayDestroy(v0, 1LL);
}

void sub_10004820C(uint64_t a1, ...)
{
}

void sub_10004821C()
{
}

BOOL sub_10004822C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_10004823C()
{
  *(void *)(*(void *)v0 + 16LL) = v1 + 1;
}

  ;
}

uint64_t sub_100048264()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

uint64_t sub_100048294@<X0>(uint64_t a1@<X8>, uint64_t a2, ...)
{
  *(void *)(a1 + 32) = v2;
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v3;
  return swift_endAccess(va);
}

uint64_t sub_1000482A0()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_1000482AC()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

uint64_t sub_1000482B8()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_1000482C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_retain(a4);
}

uint64_t sub_1000482D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v11 = va_arg(va1, void);
  uint64_t v11 = *(void *)(*(void *)(v6 + 48) + 8 * v7);
  return dispatch thunk of static Equatable.== infix(_:_:)((uint64_t *)va, va1, v9, v8);
}

uint64_t sub_1000482F4()
{
  return static _SetStorage.allocate(capacity:)(v0);
}

  ;
}

  ;
}

  ;
}

void sub_100048364(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v11 + 8 * a1) = v8 | v7;
  *(void *)(*(void *)(v9 + 48) + 8 * v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = a7;
}

uint64_t sub_100048384()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

  ;
}

  ;
}

uint64_t sub_1000483B4(uint64_t a1)
{
  return dispatch thunk of Hashable._rawHashValue(seed:)(v1, v2, a1);
}

uint64_t sub_1000483C8(uint64_t a1)
{
  return static HashableByObjectIdentity.== infix(_:_:)(a1, v2, v3, v1);
}

uint64_t sub_1000483DC()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000483F0(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_1000483F8()
{
  return swift_retain(*(void *)(*(void *)(v0 + 48) + 8 * v1));
}

uint64_t sub_100048408()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

  ;
}

  ;
}

void sub_10004843C(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t sub_100048448()
{
  return swift_release(v0);
}

void sub_100048454(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10004845C(uint64_t a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t sub_100048468()
{
  return dispatch thunk of ControlChannelConnection.start()();
}

  ;
}

uint64_t sub_100048484( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v12, a12);
}

uint64_t sub_100048490()
{
  return sub_100047868(v1, v0);
}

void *sub_10004849C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 152) = a1;
  *(void *)(v2 - 144) = v1;
  return _Block_copy((const void *)(v2 - 168));
}

uint64_t sub_1000484A8()
{
  return 0LL;
}

uint64_t sub_1000484BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_retain(*(void *)(a9 + 8 * v9));
}

uint64_t sub_1000484C8()
{
  os_log_type_t v1 = static os_log_type_t.default.getter();
  uint64_t v2 = (os_log_s *)qword_1000845F0;
  os_log_type_t v3 = v1;
  uint64_t result = os_log_type_enabled((os_log_t)qword_1000845F0, v1);
  if ((_DWORD)result)
  {
    swift_retain(v0);
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)os_log_type_t v5 = 134217984;
    swift_beginAccess(v0 + 16, v10, 0LL, 0LL);
    uint64_t v6 = *(void *)(v0 + 16);
    uint64_t v7 = swift_bridgeObjectRetain(v6);
    uint64_t v8 = sub_10004F824(v7);
    swift_bridgeObjectRelease(v6);
    uint64_t v9 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, v10, v5 + 4, v5 + 12);
    swift_release(v0);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Network pairing peers updated. Total count: %ld", v5, 0xCu);
    return swift_slowDealloc(v5, -1LL, -1LL);
  }

  return result;
}

void sub_1000485D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ControlChannelConnection.InvalidationReason(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  sub_10000FFCC();
  uint64_t v7 = v6 - v5;
  uint64_t v9 = v0 + 24;
  uint64_t v8 = *(void *)(v0 + 24);
  uint64_t v10 = *(void *)(v9 + 16);
  int v11 = *(unsigned __int8 *)(v9 + 24);
  if (*(_BYTE *)(v9 + 24))
  {
    if (v11 == 1)
    {
      sub_10000FFDC();
      NWListener.cancel()();
      sub_100012464();
      uint64_t v8 = *(void *)(v1 + 24);
      uint64_t v10 = *(void *)(v1 + 40);
      LOBYTE(v11) = *(_BYTE *)(v1 + 48);
    }

    else
    {
      if (v8 | *(void *)(v1 + 32) | v10) {
        uint64_t v8 = 1LL;
      }
      LOBYTE(v11) = 2;
    }
  }

  uint64_t v12 = *(void *)(v1 + 32);
  *(void *)uint64_t v9 = 0LL;
  *(void *)(v9 + 8) = 0LL;
  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  *(_BYTE *)(v1 + 48) = 2;
  sub_10004A788(v8, v12, v10, v11);
  uint64_t v13 = (uint64_t *)(v1 + 16);
  uint64_t v14 = enum case for ControlChannelConnection.InvalidationReason.serviceShutdown(_:);
  while (1)
  {
    sub_100016B3C((uint64_t)v13, (uint64_t)v24);
    uint64_t v15 = *v13;
    if ((*v13 & 0xC000000000000001LL) != 0)
    {
      if (v15 < 0) {
        uint64_t v16 = *v13;
      }
      else {
        uint64_t v16 = v15 & 0xFFFFFFFFFFFFFF8LL;
      }
      if (__CocoaSet.count.getter(v16))
      {
        uint64_t v17 = __CocoaSet.startIndex.getter(v16);
        uint64_t v19 = v18;
        char v20 = 1;
LABEL_16:
        uint64_t v23 = sub_10004AC80(v17, v19, v20);
        sub_100020104(v17, v19, v20);
        goto LABEL_18;
      }
    }

    else if (*(void *)(v15 + 16))
    {
      uint64_t v17 = sub_10004ABE8(v15);
      uint64_t v19 = v21;
      char v20 = v22 & 1;
      goto LABEL_16;
    }

    uint64_t v23 = 0LL;
LABEL_18:
    swift_endAccess(v24);
    sub_1000484C8();
    if (!v23) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 104))(v7, v14, v2);
    dispatch thunk of ControlChannelConnection.invalidate(for:)(v7);
    sub_100026EDC();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v2);
  }

  sub_10000FF80();
}

void sub_100048790()
{
  uint64_t v2 = v0;
  uint64_t v4 = static os_log_type_t.default.getter(v3);
  uint64_t v5 = qword_1000845F0;
  uint64_t v6 = sub_100012380( v4,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"Starting listening for network pairing",  38LL);
  if (*(unsigned __int8 *)(v2 + 48) < 2u)
  {
    uint64_t v7 = static os_log_type_t.default.getter(v6);
    uint64_t v8 = qword_1000845F0;
    uint64_t v9 = "Network pairing service is already started";
    uint64_t v10 = 42LL;
LABEL_5:
    sub_100012380(v7, (uint64_t)&_mh_execute_header, v8, (uint64_t)v9, v10);
LABEL_6:
    sub_10000FF80();
    return;
  }

  if (*(void *)(v2 + 40) | *(void *)(v2 + 24) | *(void *)(v2 + 32))
  {
    uint64_t v7 = static os_log_type_t.default.getter(v6);
    uint64_t v9 = "Network pairing service is already shut down";
    uint64_t v8 = v5;
    uint64_t v10 = 44LL;
    goto LABEL_5;
  }

  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  sub_10001DF18();
  uint64_t v15 = UUID.init()(v14);
  uint64_t v16 = UUID.uuidString.getter(v15);
  uint64_t v18 = v17;
  sub_10001DDAC(v1, *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
  uint64_t v19 = type metadata accessor for String.Encoding(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  sub_10000FFCC();
  uint64_t v24 = v23 - v22;
  static String.Encoding.utf8.getter(v25);
  uint64_t v26 = String.data(using:allowLossyConversion:)(v24, 0LL, v16, v18);
  unint64_t v28 = v27;
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v24, v19);
  if (v28 >> 60 != 15)
  {
    uint64_t v29 = *(void *)(v2 + 24);
    uint64_t v30 = *(void *)(v2 + 32);
    uint64_t v31 = *(void *)(v2 + 40);
    *(void *)(v2 + 24) = v16;
    *(void *)(v2 + 32) = v18;
    *(void *)(v2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = 0LL;
    char v32 = *(_BYTE *)(v2 + 48);
    *(_BYTE *)(v2 + 48) = 0;
    sub_10004A788(v29, v30, v31, v32);
    uint64_t v33 = (void *)sub_100016BCC((uint64_t)&unk_100078948, 40LL);
    v33[2] = v2;
    v33[3] = v26;
    v33[4] = v28;
    sub_10004AFAC();
    sub_10004AFAC();
    unint64_t v34 = (void *)sub_100016BCC((uint64_t)&unk_100078970, 48LL);
    v34[2] = v26;
    void v34[3] = v28;
    v34[4] = sub_10004AB84;
    void v34[5] = v33;
    sub_10004B020();
    sub_10004AFAC();
    sub_10000FFC4();
    sub_10004B020();
    sub_10000FFC4();
    sub_10001CBF0();
    sub_100017FE4();
    id v36 = v35;
    uint64_t v37 = CUPairingIdentity.authTag(for:type:)(v26, v28, 1LL);
    unint64_t v39 = v38;
    sub_100048C98();
    sub_100016A64(v37, v39, 0);
    sub_100026EDC();

    sub_100039F60();
    sub_10000FFF8();
    sub_100039F60();
    swift_release(v2);
    sub_10000FFF8();
    sub_100039F60();
    sub_100039F60();
    goto LABEL_6;
  }

  __break(1u);
}

void sub_100048BC8()
{
}

uint64_t sub_100048C04()
{
  if (*(_BYTE *)(v0 + 48) == 1)
  {
    uint64_t v1 = v0 + 32;
    uint64_t v0 = *(void *)(v0 + 32);
    swift_bridgeObjectRetain(*(void *)(v1 + 8));
  }

  else
  {
    uint64_t v2 = type metadata accessor for RemotePairingError(0LL);
    uint64_t v3 = sub_10000FE6C( (unint64_t *)&unk_1000819E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError,  (uint64_t)&protocol conformance descriptor for RemotePairingError);
    uint64_t v4 = swift_allocError(v2, v3, 0LL, 0LL);
    uint64_t v5 = static RemotePairingError.invalidOperation.getter(v4);
    swift_willThrow(v5);
  }

  return v0;
}

void sub_100048C98()
{
  uint64_t v2 = v1;
  unint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = type metadata accessor for BonjourService(0LL);
  __chkstk_darwin(v11, v12);
  sub_10000FFCC();
  uint64_t v17 = v16 - v15;
  if (*(_BYTE *)(v0 + 48))
  {
    os_log_type_t v18 = static os_log_type_t.default.getter(v13);
    uint64_t v19 = (os_log_s *)qword_1000845F0;
    os_log_type_t v20 = v18;
    if (os_log_type_enabled((os_log_t)qword_1000845F0, v18))
    {
      sub_10004AFA0();
      uint64_t v21 = (uint8_t *)sub_1000122E0(12LL);
      uint64_t v22 = sub_1000122E0(32LL);
      uint64_t v172 = v22;
      *(_DWORD *)uint64_t v21 = 136446210;
      uint64_t v169 = sub_10004AFFC();
      v170[0] = v23;
      v170[1] = v24;
      char v171 = v25;
      sub_10004A738(v169, v23, v24, v25);
      uint64_t v26 = String.init<A>(describing:)(&v169, &type metadata for NetworkPairingService.State);
      sub_100045370(v26, v27, &v172);
      uint64_t v169 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v169, v170, v21 + 4, v21 + 12);
      sub_10004AF84();
      sub_100016D6C();
      sub_100016D10( (void *)&_mh_execute_header,  v19,  v20,  "NetworkPairingService finished auth tag generation, but current state (%{public}s) is not valid to use the data",  v21);
      sub_100012450(v22);
      sub_10001001C(v22);
      sub_10001001C((uint64_t)v21);
    }

LABEL_19:
    sub_10000FF80();
    return;
  }

  LODWORD(v165) = v2;
  uint64_t v161 = v17;
  uint64_t v162 = v14;
  uint64_t v163 = v13;
  uint64_t v164 = (void *)v0;
  uint64_t v166 = v6;
  unint64_t v167 = v4;
  uint64_t v30 = *(void *)(v0 + 24);
  uint64_t v29 = *(void *)(v0 + 32);
  uint64_t v168 = *(void *)(v0 + 40);
  uint64_t v31 = type metadata accessor for String.Encoding(0LL);
  uint64_t v32 = *(void *)(v31 - 8);
  __chkstk_darwin(v31, v33);
  sub_10001DF18();
  __n128 v34 = swift_bridgeObjectRetain(v29);
  static String.Encoding.utf8.getter(v34);
  uint64_t v35 = v30;
  uint64_t v36 = v29;
  uint64_t v37 = String.data(using:allowLossyConversion:)(v2, 0LL, v30, v29);
  unint64_t v39 = v38;
  sub_10001DDAC(v2, *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
  if (v39 >> 60 != 15)
  {
    char v40 = static Data.== infix(_:_:)(v37, v39, v10, v8);
    sub_100015D58(v37, v39);
    if ((v40 & 1) != 0)
    {
      uint64_t v41 = v36;
      uint64_t v42 = v35;
      if ((v165 & 1) != 0)
      {
        sub_10004AFCC(v35, v36, v168);
        uint64_t v72 = v166;
        uint64_t v73 = swift_errorRetain(v166);
        os_log_type_t v74 = static os_log_type_t.error.getter(v73);
        uint64_t v75 = (os_log_s *)qword_1000845F0;
        os_log_type_t v76 = v74;
        if (sub_10004B00C((os_log_s *)qword_1000845F0))
        {
          sub_10004AFD4();
          sub_10004AFD4();
          int v77 = (uint8_t *)sub_1000122E0(12LL);
          uint64_t v78 = sub_1000122E0(32LL);
          uint64_t v169 = v78;
          *(_DWORD *)int v77 = 136446210;
          uint64_t v172 = v72;
          swift_errorRetain(v72);
          uint64_t v79 = sub_10000FD7C(&qword_100081A10);
          uint64_t v80 = String.init<A>(describing:)(&v172, v79);
          sub_100045370(v80, v81, &v169);
          uint64_t v172 = v82;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v77 + 4, v77 + 12);
          sub_100016D6C();
          sub_10004AF90();
          sub_10004AF90();
          sub_100016D10( (void *)&_mh_execute_header,  v75,  v76,  "Unable to start network pairing service. Failed to generate auth tag with error: %{public}s",  v77);
          sub_100012450(v78);
          sub_10001001C(v78);
          sub_10001001C((uint64_t)v77);
        }

        sub_10004AF90();
      }

      else
      {
        uint64_t v43 = type metadata accessor for NWTXTRecord(0LL);
        os_log_t v158 = v153;
        uint64_t v44 = *(void *)(v43 - 8);
        __chkstk_darwin(v43, v45);
        uint64_t v156 = v46;
        uint64_t v47 = (char *)v153 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v48 = v166;
        unint64_t v49 = v167;
        sub_10004B058();
        sub_10004B058();
        unint64_t v50 = sub_10004A9F8((uint64_t)&_swiftEmptyArrayStorage);
        uint64_t v51 = NWTXTRecord.init(_:)(v50);
        uint64_t v52 = static NetworkPairingKeys.identifier.getter(v51);
        uint64_t v54 = v53;
        sub_10004B03C();
        uint64_t v55 = v42;
        uint64_t v157 = v41;
        uint64_t v56 = NWTXTRecord.subscript.setter(v42, v41, v52, v54);
        uint64_t v57 = static NetworkPairingKeys.authTag.getter(v56);
        uint64_t v59 = v58;
        Swift::String v60 = Data.base64EncodedString(options:)(0LL);
        sub_10004B044(v48, v49);
        uint64_t v61 = v59;
        uint64_t v62 = v47;
        uint64_t v63 = NWTXTRecord.subscript.setter(v60._countAndFlagsBits, v60._object, v57, v61);
        static NetworkPairingKeys.model.getter(v63);
        NSString v64 = String._bridgeToObjectiveC()();
        uint64_t v65 = sub_10004B04C((uint64_t)v64);

        uint64_t v69 = v168;
        if (v65)
        {
          uint64_t v172 = v65;
          sub_10004AFB8(v66, v67, v68, (uint64_t)&type metadata for String);
        }

        uint64_t v165 = v44;
        uint64_t v83 = sub_10004AFE4();
        static NetworkPairingKeys.name.getter(v83);
        NSString v84 = String._bridgeToObjectiveC()();
        uint64_t v85 = sub_10004B04C((uint64_t)v84);

        uint64_t v159 = v43;
        if (v85)
        {
          uint64_t v172 = v85;
          sub_10004AFB8(v86, v87, v88, (uint64_t)&type metadata for String);
        }

        sub_10004AFE4();
        type metadata accessor for ControlChannelConnectionWireProtocolVersion(0LL);
        uint64_t v89 = (void *)static ControlChannelConnectionWireProtocolVersion.current.getter();
        id v90 = [v89 description];

        static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
        static NetworkPairingKeys.wireProtocolVersion.getter();
        uint64_t v91 = sub_10004AFE4();
        uint64_t v92 = (void *)static ControlChannelConnectionWireProtocolVersion.minimumSupportedForWirelessPairing.getter(v91);
        id v93 = [v92 description];

        static String._unconditionallyBridgeFromObjectiveC(_:)(v93);
        static NetworkPairingKeys.minimumSupportedWireProtocolVersion.getter();
        CFStringRef v160 = v62;
        sub_10004AFE4();
        type metadata accessor for NWParameters(0LL);
        uint64_t v94 = static NWParameters.tcp.getter();
        uint64_t v95 = type metadata accessor for NWEndpoint.Port(0LL);
        __chkstk_darwin(v95, v96);
        sub_10000FFCC();
        uint64_t v99 = v98 - v97;
        static NWEndpoint.Port.any.getter();
        uint64_t v100 = type metadata accessor for NWListener(0LL);
        uint64_t v101 = *(unsigned int *)(v100 + 48);
        uint64_t v102 = *(unsigned __int16 *)(v100 + 52);
        v153[0] = v100;
        swift_allocObject(v100, v101, v102);
        uint64_t v103 = NWListener.init(using:on:)(v94, v99);
        uint64_t v104 = v164;
        uint64_t v105 = v164[3];
        uint64_t v106 = v164[4];
        uint64_t v107 = v164[5];
        v164[3] = v103;
        v104[4] = v42;
        uint64_t v154 = v42;
        uint64_t v108 = v157;
        v104[5] = v157;
        char v109 = *((_BYTE *)v104 + 48);
        *((_BYTE *)v104 + 48) = 1;
        sub_10004A738(v55, v108, v69, 0);
        swift_retain(v103);
        sub_10004A788(v105, v106, v107, v109);
        uint64_t v110 = sub_10000FD7C(&qword_100083308);
        v153[1] = v153;
        __chkstk_darwin(v110, v111);
        sub_100026C8C();
        uint64_t v112 = v161;
        uint64_t v113 = v162;
        uint64_t v114 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v162 + 104))( v161,  enum case for BonjourService.pairSetup(_:),  v163);
        uint64_t v115 = BonjourService.rawValue.getter(v114);
        uint64_t v155 = v103;
        uint64_t v117 = v116;
        uint64_t v118 = sub_10001DDAC(v112, *(uint64_t (**)(uint64_t, uint64_t))(v113 + 8));
        __chkstk_darwin(v118, v119);
        uint64_t v121 = (char *)v153 - ((v120 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *, char *, uint64_t))(v165 + 16))(v121, v160, v159);
        uint64_t v122 = v155;
        NWListener.Service.init(name:type:domain:txtRecord:)(0LL, 0LL, v115, v117, 0LL, 0LL, v121);
        uint64_t v123 = type metadata accessor for NWListener.Service(0LL);
        sub_10001D930(v107, 0LL, 1LL, v123);
        NWListener.service.setter(v107);
        sub_10002FE80((uint64_t)sub_100049714, 0LL);
        NWListener.stateUpdateHandler.setter(sub_100049714, 0LL);
        uint64_t v124 = sub_100016BCC((uint64_t)&unk_100078858, 24LL);
        swift_weakInit(v124 + 16, v104);
        uint64_t v125 = sub_100016BCC((uint64_t)&unk_1000788F8, 24LL);
        swift_weakInit(v125 + 16, v122);
        uint64_t v126 = sub_100016BCC((uint64_t)&unk_100078920, 32LL);
        *(void *)(v126 + swift_unknownObjectWeakDestroy(v0 + 16) = v124;
        *(void *)(v126 + 24) = v125;
        swift_retain(v124);
        swift_retain(v125);
        sub_10002FE80((uint64_t)sub_10004AB54, v126);
        NWListener.newConnectionHandler.setter(sub_10004AB54, v126);
        swift_release(v124);
        swift_release(v125);
        swift_release(v126);
        uint64_t v127 = NWListener.start(queue:)(v104[7]);
        os_log_type_t v128 = static os_log_type_t.default.getter(v127);
        uint64_t v129 = (os_log_s *)qword_1000845F0;
        os_log_type_t v130 = v128;
        if (sub_10004B00C((os_log_s *)qword_1000845F0))
        {
          sub_10000FFDC();
          uint64_t v131 = sub_10004B014();
          sub_10004A738(v131, v132, v133, 0);
          sub_10000FFDC();
          uint64_t v134 = sub_1000122E0(22LL);
          uint64_t v135 = sub_1000122E0(64LL);
          uint64_t v169 = v135;
          *(_DWORD *)uint64_t v134 = 136315394;
          uint64_t v172 = v122;
          sub_10000FFDC();
          uint64_t v136 = String.init<A>(describing:)(&v172, v153[0]);
          uint64_t v138 = v137;
          sub_100045370(v136, v137, &v169);
          uint64_t v172 = v139;
          sub_10004AFEC(v139, v140, v141, v134 + 12);
          sub_10004AF84();
          swift_bridgeObjectRelease(v138);
          *(_WORD *)(v134 + 12) = 2080;
          swift_bridgeObjectRetain(v108);
          uint64_t v142 = sub_10004B014();
          sub_100045370(v142, v143, v144);
          uint64_t v172 = v145;
          sub_10004AFEC(v145, v146, v147, v134 + 22);
          uint64_t v148 = sub_10004B014();
          uint64_t v149 = v168;
          sub_10004AFCC(v148, v150, v168);
          uint64_t v151 = sub_10004B014();
          sub_10004AFCC(v151, v152, v149);
          swift_bridgeObjectRelease(v108);
          _os_log_impl( (void *)&_mh_execute_header,  v129,  v130,  "Started listening for network pairing with listener %s, session ID: %s",  (uint8_t *)v134,  0x16u);
          swift_arrayDestroy(v135, 2LL);
          sub_10001001C(v135);
          sub_10001001C(v134);
          sub_10004B044(v166, v167);
          sub_100012464();
        }

        else
        {
          sub_100012464();
          sub_10004AFCC(v154, v108, v69);
          sub_10004B044(v166, v167);
        }

        (*(void (**)(char *, uint64_t))(v165 + 8))(v160, v159);
      }
    }

    else
    {
      uint64_t v70 = sub_10004AFCC(v35, v36, v168);
      uint64_t v71 = static os_log_type_t.default.getter(v70);
      sub_100012380( v71,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"NetworkPairingService finished auth tag generation, but we now are awaiting auth tag generation for a d ifferent pairing session",  127LL);
    }

    goto LABEL_19;
  }

  __break(1u);
  swift_unexpectedError(v8, "remotepairingdeviced/NetworkPairingService.swift", 48LL, 1LL, 135LL);
  __break(1u);
}

uint64_t sub_100049714(uint64_t a1)
{
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  uint64_t v3 = qword_1000845F0;
  uint64_t v4 = sub_10000FD7C(&qword_100081580);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100062930;
  uint64_t v6 = type metadata accessor for NWListener.State(0LL);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v9, a1, v6);
  uint64_t v11 = String.init<A>(describing:)(v9, v6);
  uint64_t v13 = v12;
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_10001D978();
  *(void *)(v5 + 32) = v11;
  *(void *)(v5 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v13;
  os_log(_:dso:log:_:_:)( v2,  &_mh_execute_header,  v3,  "Manual pairing bonjour listener state changed: %{public}s",  57LL,  2LL,  v5);
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_100049824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v13, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v4);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = a3 + 16;
    swift_beginAccess(v7, &v12, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v7);
    if (!Strong)
    {
      uint64_t v9 = v6;
      return swift_release(v9);
    }

    uint64_t v9 = Strong;
    if (*(_BYTE *)(v6 + 48) == 1)
    {
      uint64_t v10 = swift_retain(*(void *)(v6 + 24));
      if (v9 == v10)
      {
        sub_100049C94();
        swift_release(v6);
        uint64_t v6 = v9;
        goto LABEL_9;
      }

      uint64_t Strong = swift_release(v10);
    }

    uint64_t v11 = static os_log_type_t.error.getter(Strong);
    os_log(_:dso:log:_:_:)( v11,  &_mh_execute_header,  qword_1000845F0,  "Received connection from listener that has since been replaced",  62LL,  2LL,  &_swiftEmptyArrayStorage);
LABEL_9:
    swift_release(v6);
    return swift_release(v9);
  }

  return result;
}

void sub_100049924()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for ControlChannelConnection.InvalidationReason(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  sub_100026C8C();
  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v8 = (void *)(v2 + 32);
  uint64_t v9 = *(void *)(v2 + 40);
  int v10 = *(unsigned __int8 *)(v2 + 48);
  if (!*(_BYTE *)(v2 + 48))
  {
LABEL_9:
    uint64_t v12 = *(void *)(v2 + 32);
    *(void *)(v2 + 24) = 1LL;
    *uint64_t v8 = 0LL;
    *(void *)(v2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = 0LL;
    *(_BYTE *)(v2 + 48) = 2;
    sub_10004A788(v7, v12, v9, v10);
    sub_10000FF98(v2 + 16, (uint64_t)v41);
    uint64_t v13 = *(void *)(v2 + 16);
    if ((v13 & 0xC000000000000001LL) != 0)
    {
      if (v13 < 0) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = v13 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v13);
      uint64_t v15 = __CocoaSet.makeIterator()(v14);
      uint64_t v16 = sub_10000FF78();
      uint64_t v17 = sub_10000FE6C( &qword_100082090,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection,  (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
      uint64_t v18 = Set.Iterator.init(_cocoa:)(v15, v16, v17);
      uint64_t v13 = v41[3];
      uint64_t v38 = v41[4];
      uint64_t v19 = v41[5];
      int64_t v20 = v41[6];
      unint64_t v21 = v41[7];
    }

    else
    {
      uint64_t v38 = v13 + 56;
      uint64_t v19 = ~(-1LL << *(_BYTE *)(v13 + 32));
      sub_10000FFE4();
      unint64_t v21 = v22 & v23;
      swift_bridgeObjectRetain(v13);
      int64_t v20 = 0LL;
    }

    int64_t v37 = (unint64_t)(v19 + 64) >> 6;
    uint64_t v24 = enum case for ControlChannelConnection.InvalidationReason.serviceShutdown(_:);
    if (v13 < 0) {
      goto LABEL_18;
    }
    while (1)
    {
      if (v21)
      {
        uint64_t v25 = (v21 - 1) & v21;
        unint64_t v26 = __clz(__rbit64(v21)) | (v20 << 6);
        int64_t v27 = v20;
      }

      else
      {
        int64_t v32 = v20 + 1;
        if (__OFADD__(v20, 1LL))
        {
          __break(1u);
          return;
        }

        if (v32 >= v37) {
          goto LABEL_38;
        }
        unint64_t v33 = *(void *)(v38 + 8 * v32);
        int64_t v27 = v20 + 1;
        if (!v33)
        {
          int64_t v27 = v20 + 2;
          if (v20 + 2 >= v37) {
            goto LABEL_38;
          }
          unint64_t v33 = *(void *)(v38 + 8 * v27);
          if (!v33)
          {
            int64_t v27 = v20 + 3;
            if (v20 + 3 >= v37) {
              goto LABEL_38;
            }
            unint64_t v33 = *(void *)(v38 + 8 * v27);
            if (!v33)
            {
              int64_t v27 = v20 + 4;
              if (v20 + 4 >= v37) {
                goto LABEL_38;
              }
              unint64_t v33 = *(void *)(v38 + 8 * v27);
              if (!v33)
              {
                int64_t v34 = v20 + 5;
                while (v34 < v37)
                {
                  unint64_t v33 = *(void *)(v38 + 8 * v34++);
                  if (v33)
                  {
                    int64_t v27 = v34 - 1;
                    goto LABEL_34;
                  }
                }

LABEL_38:
                sub_10000FE04(v13);
                goto LABEL_39;
              }
            }
          }
        }

void sub_100049C94()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for ControlChannelConnection.Options(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  sub_10000FFCC();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for ControlChannelConnection.Options.Device(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  sub_100026C8C();
  if (*(_BYTE *)(v0 + 48) == 1)
  {
    ControlChannelConnection.Options.Device.init(allowsPairSetup:allowsPinlessPairing:allowsIncomingTunnelConnections:allowsPromptlessAutomationPairingUpgrade:allowsSharingSensitiveInfo:)( 1LL,  0LL,  0LL,  0LL,  0LL);
    uint64_t v13 = type metadata accessor for NWConnectionControlChannelTransport(0LL);
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    uint64_t v35 = 0LL;
    swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    uint64_t v14 = sub_10000FFDC();
    uint64_t v15 = NWConnectionControlChannelTransport.init(connection:endpoint:netLinkManager:)(v14, &v33, 0LL);
    *((void *)&v34 + 1) = v13;
    uint64_t v35 = &protocol witness table for NWConnectionControlChannelTransport;
    *(void *)&__int128 v33 = v15;
    uint64_t v31 = v15;
    uint64_t v16 = *(void **)(v0 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8, v1, v9);
    (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))( v8,  enum case for ControlChannelConnection.Options.device(_:),  v3);
    uint64_t v17 = *(void *)(v0 + 104);
    v32[3] = type metadata accessor for SystemKeychainPairingManager();
    v32[4] = sub_10000FE6C( &qword_100080F98,  (uint64_t (*)(uint64_t))type metadata accessor for SystemKeychainPairingManager,  (uint64_t)&unk_100062A9C);
    v32[0] = v17;
    uint64_t v18 = sub_10000FF78();
    swift_retain(v15);
    id v19 = v16;
    uint64_t v20 = sub_10000FFDC();
    uint64_t v21 = static ControlChannelConnection.defaultMaxReconnectionAttempts.getter(v20);
    swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    ControlChannelConnection.init(transport:queue:options:maxReconnectionAttempts:pairingDataStorageProvider:peerWireProtocolVersion:)( &v33,  v19,  v8,  v21,  v32,  0LL);
    sub_10001D75C(v2 + 64, (uint64_t)&v33);
    dispatch thunk of ControlChannelConnection.userInteractionProvider.setter(&v33);
    sub_100016B3C(v2 + 16, (uint64_t)&v33);
    sub_10000FFC4();
    sub_100052210();
    swift_endAccess(&v33);
    sub_100012464();
    sub_1000484C8();
    uint64_t v22 = sub_100016BCC((uint64_t)&unk_100078858, 24LL);
    sub_100039E10(v22);
    uint64_t v23 = v9;
    uint64_t v24 = sub_100016BCC((uint64_t)&unk_100078880, 24LL);
    sub_100039EE8(v24);
    uint64_t v25 = sub_100016BCC((uint64_t)&unk_1000788A8, 32LL);
    *(void *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = v22;
    *(void *)(v25 + 24) = v24;
    swift_retain(v22);
    swift_retain(v24);
    dispatch thunk of ControlChannelConnection.invalidationHandler.setter(sub_10004AB3C, v25);
    swift_release(v22);
    swift_release(v24);
    uint64_t v26 = sub_100016BCC((uint64_t)&unk_100078858, 24LL);
    sub_100039E10(v26);
    uint64_t v27 = sub_100016BCC((uint64_t)&unk_100078880, 24LL);
    sub_100039EE8(v27);
    uint64_t v28 = sub_100016BCC((uint64_t)&unk_1000788D0, 32LL);
    *(void *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = v27;
    *(void *)(v28 + 24) = v26;
    swift_retain(v27);
    swift_retain(v26);
    dispatch thunk of ControlChannelConnection._connectionSetupCompleteHandler.setter(sub_10004AB48, v28);
    sub_100026EDC();
    uint64_t v29 = swift_release(v27);
    dispatch thunk of ControlChannelConnection.start()(v29);
    swift_release(v31);
    sub_10000FFF8();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v1, v23);
  }

  else
  {
    uint64_t v30 = static os_log_type_t.error.getter(v12);
    sub_100012380( v30,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"Rejecting TCP control pairing channel connection as service is no longer enabled",  80LL);
    NWConnection.cancel()();
  }

  sub_10000FF80();
}

uint64_t sub_100049FF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v12, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = a2 + 16;
    swift_beginAccess(v6, v11, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v6);
    if (Strong)
    {
      uint64_t v8 = Strong;
      swift_beginAccess(v5 + 16, v10, 33LL, 0LL);
      uint64_t v9 = sub_100053FB8(v8);
      swift_endAccess(v10);
      swift_release(v9);
      sub_1000484C8();
      swift_release(v8);
    }

    return swift_release(v5);
  }

  return result;
}

uint64_t sub_10004A0C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ControlChannelConnection.InvalidationReason(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  a1 += 16LL;
  swift_beginAccess(a1, v18, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1);
  if (result)
  {
    uint64_t v10 = result;
    uint64_t v11 = a2 + 16;
    swift_beginAccess(v11, v17, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v11);
    if (Strong)
    {
      uint64_t v13 = Strong;
      uint64_t v14 = dispatch thunk of ControlChannelConnection.resolvedIdentity.getter();
      if (v14)
      {
        uint64_t v15 = (void *)v14;
        sub_10004FD60();
        if ((v16 & 1) == 0)
        {
          (*(void (**)(_BYTE *, void, uint64_t))(v5 + 104))( v8,  enum case for ControlChannelConnection.InvalidationReason.peerUnpaired(_:),  v4);
          dispatch thunk of ControlChannelConnection.invalidate(for:)(v8);

          swift_release(v13);
          swift_release(v10);
          return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
        }
      }

      swift_release(v13);
    }

    return swift_release(v10);
  }

  return result;
}

uint64_t sub_10004A208(os_log_s *a1)
{
  uint64_t v2 = a1;
  os_log_type_t v3 = static os_log_type_t.default.getter(a1);
  sub_10004AFA0();
  if (sub_10004B00C(v2))
  {
    sub_10004AFA0();
    uint64_t v4 = sub_1000122E0(22LL);
    uint64_t v5 = sub_1000122E0(32LL);
    v52[0] = v5;
    *(_DWORD *)uint64_t v4 = 136446466;
    uint64_t v53 = sub_10004AFFC();
    uint64_t v54 = v6;
    uint64_t v55 = v7;
    LOBYTE(v56) = v8;
    sub_10004A738(v53, v6, v7, v8);
    uint64_t v9 = String.init<A>(describing:)(&v53, &type metadata for NetworkPairingService.State);
    sub_100045370(v9, v10, v52);
    uint64_t v53 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v4 + 4, v4 + 12);
    sub_10004AF84();
    sub_100016D6C();
    *(_WORD *)(v4 + 12) = 2048;
    sub_10000FF98(v1 + 16, (uint64_t)v49);
    swift_bridgeObjectRetain(*(void *)(v1 + 16));
    uint64_t v13 = sub_10004F824(v12);
    sub_100012464();
    sub_100016D6C();
    uint64_t v53 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v4 + 14, v4 + 22);
    sub_100012464();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "State dump: NetworkPairingService xpc_activity_state_t state = %{public}s, connection count = %ld",  (uint8_t *)v4,  0x16u);
    sub_100012450(v5);
    sub_10001001C(v5);
    sub_10001001C(v4);
  }

  else
  {
    sub_10004AF84();
  }

  sub_10000FF98(v1 + 16, (uint64_t)v52);
  uint64_t v14 = *(void *)(v1 + 16);
  if ((v14 & 0xC000000000000001LL) != 0)
  {
    if (v14 < 0) {
      uint64_t v15 = *(void *)(v1 + 16);
    }
    else {
      uint64_t v15 = v14 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10004B03C();
    uint64_t v16 = __CocoaSet.makeIterator()(v15);
    uint64_t v17 = sub_10000FF78();
    uint64_t v18 = sub_10000FE6C( &qword_100082090,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection,  (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
    uint64_t result = Set.Iterator.init(_cocoa:)(v16, v17, v18);
    uint64_t v14 = v53;
    uint64_t v48 = v54;
    uint64_t v20 = v55;
    int64_t v21 = v56;
    unint64_t v22 = v57;
  }

  else
  {
    uint64_t v48 = v14 + 56;
    uint64_t v20 = ~(-1LL << *(_BYTE *)(v14 + 32));
    sub_10000FFE4();
    unint64_t v22 = v23 & v24;
    uint64_t result = sub_10004B03C();
    int64_t v21 = 0LL;
  }

  int64_t v47 = (unint64_t)(v20 + 64) >> 6;
  if (v14 < 0) {
    goto LABEL_13;
  }
  while (1)
  {
    if (v22)
    {
      uint64_t v25 = (v22 - 1) & v22;
      unint64_t v26 = __clz(__rbit64(v22)) | (v21 << 6);
      int64_t v27 = v21;
      goto LABEL_30;
    }

    int64_t v33 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v33 >= v47) {
      return sub_10000FE04(v14);
    }
    unint64_t v34 = *(void *)(v48 + 8 * v33);
    int64_t v27 = v21 + 1;
    if (!v34)
    {
      int64_t v27 = v21 + 2;
      if (v21 + 2 >= v47) {
        return sub_10000FE04(v14);
      }
      unint64_t v34 = *(void *)(v48 + 8 * v27);
      if (!v34)
      {
        int64_t v27 = v21 + 3;
        if (v21 + 3 >= v47) {
          return sub_10000FE04(v14);
        }
        unint64_t v34 = *(void *)(v48 + 8 * v27);
        if (!v34)
        {
          int64_t v27 = v21 + 4;
          if (v21 + 4 >= v47) {
            return sub_10000FE04(v14);
          }
          unint64_t v34 = *(void *)(v48 + 8 * v27);
          if (!v34)
          {
            int64_t v35 = v21 + 5;
            while (v35 < v47)
            {
              unint64_t v34 = *(void *)(v48 + 8 * v35++);
              if (v34)
              {
                int64_t v27 = v35 - 1;
                goto LABEL_29;
              }
            }

            return sub_10000FE04(v14);
          }
        }
      }
    }

uint64_t sub_10004A6BC()
{
  uint64_t v1 = sub_10004AFFC();
  sub_10004A788(v1, v2, v3, v4);

  sub_10000FF38((void *)(v0 + 64));
  swift_release();
  return v0;
}

uint64_t sub_10004A6F8()
{
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

uint64_t type metadata accessor for NetworkPairingService()
{
  return objc_opt_self(&OBJC_CLASS____TtC20remotepairingdeviced21NetworkPairingService);
}

uint64_t sub_10004A738(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    if (a4 != 1) {
      return result;
    }
    swift_retain(result);
    a2 = a3;
  }

  return swift_bridgeObjectRetain(a2);
}

uint64_t destroy for NetworkPairingService.State(uint64_t a1)
{
  return sub_10004A788(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t sub_10004A788(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    if (a4 != 1) {
      return result;
    }
    swift_release(result);
    a2 = a3;
  }

  return swift_bridgeObjectRelease(a2);
}

uint64_t initializeWithCopy for NetworkPairingService.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  sub_10004A738(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for NetworkPairingService.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  sub_10004A738(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  char v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_10004A788(v7, v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for NetworkPairingService.State(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for NetworkPairingService.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  char v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_10004A788(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for NetworkPairingService.State(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 25))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NetworkPairingService.State( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 25) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 24) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10004A974(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_10004A98C(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 - 2;
  if (a2 >= 2)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    LOBYTE(a2) = 2;
    *(void *)__n128 result = v2;
  }

  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for NetworkPairingService.State()
{
  return &type metadata for NetworkPairingService.State;
}

void sub_10004A9B8()
{
}

uint64_t sub_10004A9D8(os_log_s *a1)
{
  return sub_10004A208(a1);
}

unint64_t sub_10004A9F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    char v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_10000FD7C(&qword_100083310);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  char v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v7 = *(v6 - 3);
    uint64_t v8 = *(v6 - 2);
    uint64_t v10 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    unint64_t result = sub_1000404CC(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v13 = v7;
    v13[1] = v8;
    uint64_t v14 = (void *)(v4[7] + 16 * result);
    *uint64_t v14 = v10;
    v14[1] = v9;
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10004AB14()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10004AB3C()
{
  return sub_100049FF8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10004AB48()
{
  return sub_10004A0C0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10004AB54(uint64_t a1)
{
  return sub_100049824(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10004AB5C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10004AB84()
{
}

uint64_t sub_10004AB94()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10004ABC0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10004ABE8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128LL;
    return __clz(__rbit64(v1)) + v2;
  }

  uint64_t v2 = 128LL;
  for (uint64_t i = 10LL; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64LL;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t sub_10004AC80(uint64_t result, uint64_t a2, char a3)
{
  char v4 = v3;
  unint64_t v7 = result;
  uint64_t v8 = *v4;
  if ((*v4 & 0xC000000000000001LL) == 0)
  {
    unint64_t result = swift_isUniquelyReferenced_nonNull_native(*v4);
    int v15 = result;
    uint64_t v16 = *v4;
    if ((a3 & 1) == 0)
    {
      if ((v7 & 0x8000000000000000LL) != 0 || 1LL << *(_BYTE *)(v16 + 32) <= (uint64_t)v7)
      {
        __break(1u);
      }

      else if (((*(void *)(v16 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v7) & 1) != 0)
      {
        if (*(_DWORD *)(v16 + 36) == (_DWORD)a2)
        {
LABEL_20:
          uint64_t v28 = v16;
          uint64_t *v4 = 0x8000000000000000LL;
          if (!v15)
          {
            sub_1000538F8();
            uint64_t v16 = v28;
          }

          uint64_t v13 = *(void *)(*(void *)(v16 + 48) + 8 * v7);
          sub_10005496C(v7);
          uint64_t v14 = *v4;
          uint64_t *v4 = v28;
          goto LABEL_23;
        }

        __break(1u);
        goto LABEL_13;
      }

      __break(1u);
      goto LABEL_26;
    }

LABEL_13:
    unint64_t result = __CocoaSet.Index.age.getter(v7, a2);
    if ((_DWORD)result == *(_DWORD *)(v16 + 36))
    {
      uint64_t v17 = __CocoaSet.Index.element.getter(v7, a2);
      uint64_t v26 = v17;
      uint64_t v18 = type metadata accessor for ControlChannelConnection(0LL);
      swift_bridgeObjectRetain(v16);
      swift_unknownObjectRetain(v17);
      swift_dynamicCast(&v27, &v26, (char *)&type metadata for Swift.AnyObject + 8, v18, 7LL);
      uint64_t v19 = v27;
      swift_unknownObjectRelease(v17);
      uint64_t v28 = v19;
      uint64_t v20 = *(void *)(v16 + 40);
      uint64_t v21 = sub_10000FE6C( &qword_100082090,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection,  (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
      uint64_t v22 = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v18, v21);
      uint64_t v23 = -1LL << *(_BYTE *)(v16 + 32);
      unint64_t v7 = v22 & ~v23;
      if (((*(void *)(v16 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0)
      {
        uint64_t v24 = ~v23;
        uint64_t v25 = sub_10000FE6C( &qword_1000831C8,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection,  (uint64_t)&protocol conformance descriptor for ControlChannelConnection);
        while (1)
        {
          uint64_t v27 = *(void *)(*(void *)(v16 + 48) + 8 * v7);
          if ((dispatch thunk of static Equatable.== infix(_:_:)(&v27, &v28, v18, v25) & 1) != 0) {
            break;
          }
          unint64_t v7 = (v7 + 1) & v24;
          if (((*(void *)(v16 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
            goto LABEL_18;
          }
        }
      }

      else
      {
LABEL_18:
        swift_release(v19);
        __break(1u);
      }

      swift_release(v19);
      swift_bridgeObjectRelease(v16);
      uint64_t v16 = *v4;
      goto LABEL_20;
    }

uint64_t sub_10004AF84()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_10004AF90()
{
  return sub_100016A64(v1, v0, 1);
}

uint64_t sub_10004AFA0()
{
  return swift_retain_n(v0, 2LL);
}

uint64_t sub_10004AFAC()
{
  return sub_100015D6C(v0, v1);
}

uint64_t sub_10004AFB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v5 - 136, v5 - 96, v4 + 8, a4, 6LL);
}

uint64_t sub_10004AFCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004A788(a1, a2, a3, 0);
}

uint64_t sub_10004AFD4()
{
  return sub_100016A98(v1, v0, 1);
}

uint64_t sub_10004AFE4()
{
  return NWTXTRecord.subscript.setter();
}

uint64_t sub_10004AFEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 96, v5, v4, a4);
}

uint64_t sub_10004AFFC()
{
  return *(void *)(v0 + 24);
}

BOOL sub_10004B00C(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10004B014()
{
  return v0;
}

uint64_t sub_10004B020()
{
  return swift_retain(v0);
}

uint64_t sub_10004B03C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10004B044(uint64_t a1, unint64_t a2)
{
  return sub_100016A64(a1, a2, 0);
}

uint64_t sub_10004B04C(uint64_t a1)
{
  return MGCopyAnswer(a1, 0LL);
}

uint64_t sub_10004B058()
{
  return sub_1000155D4(v0, v1);
}

void sub_10004B064(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain(*(void *)(a1 + 40));
  id v6 = a3;
  v5(a2, a3);
  sub_100010008();
}

uint64_t sub_10004B0C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10004E588(a1);
  if ((v6 & 1) != 0) {
    goto LABEL_7;
  }
  int v7 = v5;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }

  uint64_t v8 = result;
  uint64_t v9 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v10 = sub_10000FD7C(&qword_100081D28);
  uint64_t v12 = v10;
  if (v8 == v9) {
    return sub_10001D930(a2, 1LL, 1LL, v10);
  }
  __chkstk_darwin(v10, v11);
  sub_100012404();
  uint64_t v13 = (uint64_t *)(v9 + *(int *)(v12 + 48));
  uint64_t v14 = sub_10004ED98(v9, v8, v7, 0LL, a1);
  uint64_t v16 = v15;
  uint64_t *v13 = v14;
  v13[1] = v15;
  sub_10001DCE0();
  uint64_t v17 = sub_10004F784();
  v18(v17, v9);
  uint64_t v19 = (uint64_t *)(a2 + *(int *)(v12 + 48));
  *uint64_t v19 = v14;
  v19[1] = v16;
  swift_bridgeObjectRetain(v16);
  sub_100039B44(v9, &qword_100081D28);
  return sub_10001D930(a2, 0LL, 1LL, v12);
}

uint64_t sub_10004B208@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10004E588(a1);
  if ((v6 & 1) != 0) {
    goto LABEL_7;
  }
  int v7 = v5;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }

  uint64_t v8 = result;
  uint64_t v9 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v10 = sub_10000FD7C(&qword_100083448);
  uint64_t v12 = v10;
  if (v8 == v9) {
    return sub_10001D930(a2, 1LL, 1LL, v10);
  }
  __chkstk_darwin(v10, v11);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(int *)(v12 + 48);
  uint64_t v16 = sub_10004EE50((uint64_t)v14, v8, v7, 0LL, a1);
  *(void *)&v14[v15] = v16;
  uint64_t v17 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v17 - 8) + 16LL))(a2, v14, v17);
  *(void *)(a2 + *(int *)(v12 + (*(void (**)(void, void, void))(v0 + 16))( *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(unsigned __int8 *)(v0 + 48)) = v16;
  swift_retain(v16);
  sub_100039B44((uint64_t)v14, &qword_100083448);
  return sub_10001D930(a2, 0LL, 1LL, v12);
}

uint64_t sub_10004B364(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  if (*(_DWORD *)(a2 + 32) == (_DWORD)result) {
    return 1LL;
  }
  if (v2 == 1) {
    return 0LL;
  }
  for (uint64_t i = 9LL; ; ++i)
  {
    uint64_t v5 = i - 7;
    if (__OFADD__(i - 8, 1LL)) {
      break;
    }
    BOOL v6 = *(_DWORD *)(a2 + 4 * i) == (_DWORD)result;
    BOOL v3 = v6;
    BOOL v6 = v6 || v5 == v2;
    if (v6) {
      return v3;
    }
  }

  __break(1u);
  return result;
}

void sub_10004B3C4( unint64_t a1@<X0>, char *a2@<X1>, uint64_t (*a3)(char *, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v45 = a3;
  uint64_t v8 = sub_10000FD7C(&qword_1000810F8);
  sub_100012280();
  __chkstk_darwin(v9, v10);
  sub_100016C88();
  uint64_t v11 = type metadata accessor for XPCDictionary(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v43 - v18;
  uint64_t v20 = *(int *)(v8 + 48);
  uint64_t v21 = v4 + v20;
  uint64_t v22 = *(void *)a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(v21, &a2[v20], v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v19, v21, v11);
  uint64_t v23 = swift_retain(v22);
  uint64_t v24 = static os_log_type_t.default.getter(v23);
  os_log(_:dso:log:_:_:)( v24,  &_mh_execute_header,  qword_1000845F0,  "Handling copy remote unlock key request",  39LL,  2LL);
  uint64_t v25 = XPCDictionary.auditToken.getter(&v48[4]);
  XPCDictionary.entitlements.getter(v25);
  uint64_t v26 = v46;
  sub_10004DD30(a1, (uint64_t)v16, a4);
  if (v26)
  {
    uint64_t v46 = v22;
    uint64_t v27 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
    uint64_t v28 = v27(v16, v11);
    os_log_type_t v29 = static os_log_type_t.error.getter(v28);
    uint64_t v30 = (os_log_s *)qword_1000845F0;
    os_log_type_t v31 = v29;
    uint64_t v32 = os_log_type_enabled((os_log_t)qword_1000845F0, v29);
    if ((v32 & 1) != 0)
    {
      sub_1000122C4();
      sub_1000122C4();
      uint64_t v33 = swift_slowAlloc(12LL, -1LL);
      uint64_t v45 = v27;
      unint64_t v34 = (uint8_t *)v33;
      uint64_t v35 = swift_slowAlloc(32LL, -1LL);
      uint64_t v49 = v35;
      *(_DWORD *)unint64_t v34 = 136315138;
      uint64_t v44 = v34 + 4;
      uint64_t v47 = v26;
      sub_1000122C4();
      uint64_t v36 = sub_10000FD7C(&qword_100081A10);
      uint64_t v37 = String.init<A>(describing:)(&v47, v36);
      uint64_t v39 = v38;
      sub_100045370(v37, v38, &v49);
      uint64_t v47 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v44, v34 + 12);
      swift_bridgeObjectRelease(v39);
      swift_errorRelease(v26);
      swift_errorRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Pairing deletion failed with error: %s", v34, 0xCu);
      swift_arrayDestroy(v35, 1LL);
      sub_10001001C(v35);
      uint64_t v41 = (uint64_t)v34;
      uint64_t v27 = v45;
      uint64_t v32 = sub_10001001C(v41);
    }

    swift_willThrow(v32);
    swift_release(v46);
    v27(v19, v11);
  }

  else
  {
    sub_100026EDC();
    uint64_t v42 = *(void (**)(char *, uint64_t))(v12 + 8);
    v42(v16, v11);
    v42(v19, v11);
  }

  sub_100012268();
}

uint64_t sub_10004B684()
{
  return dispatch thunk of XPCConnection.activate()();
}

void sub_10004B6A8( int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v164 = a7;
  uint64_t v162 = a5;
  uint64_t v159 = a3;
  uint64_t v160 = a4;
  uint64_t v158 = a2;
  int v157 = a1;
  type metadata accessor for RemotePairingError(0LL);
  sub_100012280();
  __chkstk_darwin(v13, v14);
  sub_10000FFCC();
  sub_10000FD7C((uint64_t *)&unk_1000820D8);
  sub_100012280();
  __chkstk_darwin(v15, v16);
  sub_1000203EC();
  uint64_t v17 = (void (*)())swift_allocObject(&unk_100078B58, 40LL, 7LL);
  *((void *)v17 + 2) = a8;
  *((void *)v17 + 3) = a9;
  *((void *)v17 + 4) = a10;
  id v18 = a8;
  uint64_t v19 = swift_retain(a10);
  if (remotePairingIsEnabled(v19))
  {
    id v163 = v18;
    uint64_t is_darwinos = os_variant_is_darwinos("com.apple.RemotePairing");
    if ((is_darwinos & 1) != 0)
    {
LABEL_3:
      uint64_t v153 = a6;
      uint64_t v21 = dispatch thunk of ControlChannelConnection.resolvedIdentity.getter(is_darwinos);
      if (v21)
      {
        uint64_t v22 = (void *)v21;
        uint64_t v23 = sub_10001DCE0();
        uint64_t v151 = &v140;
        uint64_t v24 = *(uint64_t **)(v23 - 8);
        uint64_t v25 = v24[8];
        uint64_t v27 = __chkstk_darwin(v23, v26);
        unint64_t v28 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0LL;
        uint64_t v29 = UUID.init()(v27);
        uint64_t v30 = static os_log_type_t.default.getter(v29);
        int v31 = v30;
        uint64_t v145 = &v140;
        uint64_t v32 = (os_log_s *)qword_1000845F0;
        uint64_t v147 = v25;
        __chkstk_darwin(v30, v33);
        unint64_t v34 = (char *)&v140 - v28;
        uint64_t v35 = (void (*)(void))v24[2];
        uint64_t v161 = (char *)&v140 - v28;
        uint64_t v156 = v23;
        uint64_t v154 = v35;
        ((void (*)(char *, char *, uint64_t))v35)((char *)&v140 - v28, (char *)&v140 - v28, v23);
        uint64_t v150 = v22;
        id v36 = v22;
        LODWORD(v144) = v31;
        BOOL v37 = os_log_type_enabled(v32, (os_log_type_t)v31);
        uint64_t v152 = a10;
        uint64_t v155 = v17;
        id v148 = v36;
        uint64_t v146 = v24;
        if (v37)
        {
          os_log_t v143 = v32;
          uint64_t v38 = v162;
          sub_10004F718();
          uint64_t v39 = v24;
          id v40 = v36;
          uint64_t v41 = sub_1000122E0(42LL);
          uint64_t v42 = sub_1000122E0(128LL);
          v166[0] = v42;
          *(_DWORD *)uint64_t v41 = 136446978;
          uint64_t v43 = UUID.uuidString.getter(v42);
          uint64_t v45 = v44;
          sub_100045370(v43, v44, v166);
          uint64_t v165 = v46;
          sub_10004F6B4(v46, v47, v48, v41 + 12);
          swift_bridgeObjectRelease(v45);
          uint64_t v149 = (void (*)(char *, uint64_t))v39[1];
          v149((char *)&v140 - v28, v156);
          *(_WORD *)(v41 + 12) = 2080;
          id v49 = [v40 identifier];
          uint64_t v50 = sub_10000FD7C((uint64_t *)&unk_1000835C0);
          sub_100012280();
          __chkstk_darwin(v51, v52);
          sub_10000FFCC();
          uint64_t v55 = v54 - v53;
          if (v49)
          {
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v49);

            uint64_t v56 = 0LL;
          }

          else
          {
            uint64_t v56 = 1LL;
          }

          sub_10001D930(v55, v56, 1LL, v156);
          uint64_t v79 = String.init<A>(describing:)(v55, v50);
          sub_100045370(v79, v80, v166);
          uint64_t v165 = v81;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v41 + 14, v41 + 22);

          sub_10001DC58();
          *(_WORD *)(v41 + 22) = 2080;
          uint64_t v82 = sub_10002FC64(v40);
          if (v83)
          {
            uint64_t v84 = v83;
          }

          else
          {
            uint64_t v82 = 0x6E776F6E6B6E553CLL;
            uint64_t v84 = 0xE90000000000003ELL;
          }

          sub_100045370(v82, v84, v166);
          uint64_t v165 = v85;
          sub_10004F6B4(v85, v86, v87, v41 + 32);

          sub_10001DC58();
          *(_WORD *)(v41 + 32) = 2080;
          if (v38) {
            uint64_t v88 = v38;
          }
          else {
            uint64_t v88 = &_swiftEmptyArrayStorage;
          }
          uint64_t v89 = type metadata accessor for PeerConnectionInfo(0LL);
          swift_bridgeObjectRetain(v38);
          uint64_t v90 = Array.description.getter(v88, v89);
          uint64_t v92 = v91;
          sub_10001DC58();
          sub_100045370(v90, v92, v166);
          uint64_t v165 = v93;
          sub_10004F6B4(v93, v94, v95, v41 + 42);
          sub_10004F70C();
          swift_bridgeObjectRelease(v92);
          _os_log_impl( (void *)&_mh_execute_header,  v143,  (os_log_type_t)v144,  "Creating tunnel %{public}s for host %s (%s) with peer info: %s",  (uint8_t *)v41,  0x2Au);
          swift_arrayDestroy(v42, 4LL);
          sub_10001001C(v42);
          sub_10001001C(v41);
          sub_10004F76C();
        }

        else
        {
          int v77 = (void (*)(char *, uint64_t))v24[1];
          uint64_t v38 = v162;
          sub_10004F718();
          uint64_t v149 = v77;
          v77(v34, v156);

          sub_10004F76C();
          sub_10004F70C();
        }

        os_log_type_t v96 = static os_log_type_t.default.getter(v78);
        uint64_t v97 = (os_log_s *)powerLog.getter();
        if (os_log_type_enabled(v97, v96))
        {
          sub_10004F718();
          uint64_t v98 = (uint8_t *)sub_1000122E0(12LL);
          uint64_t v99 = sub_1000122E0(32LL);
          *(_DWORD *)uint64_t v98 = 136315138;
          v166[0] = v99;
          if (v38) {
            uint64_t v100 = v38;
          }
          else {
            uint64_t v100 = &_swiftEmptyArrayStorage;
          }
          uint64_t v101 = type metadata accessor for PeerConnectionInfo(0LL);
          swift_bridgeObjectRetain(v38);
          uint64_t v102 = Array.description.getter(v100, v101);
          uint64_t v104 = v103;
          swift_bridgeObjectRelease(v100);
          sub_100045370(v102, v104, v166);
          uint64_t v165 = v105;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v98 + 4, v98 + 12);
          sub_10004F70C();
          swift_bridgeObjectRelease(v104);
          _os_log_impl((void *)&_mh_execute_header, v97, v96, "Will create a tunnel with peer info: %s", v98, 0xCu);
          swift_arrayDestroy(v99, 1LL);
          sub_10001001C(v99);
          sub_10001001C((uint64_t)v98);
        }

        uint64_t v106 = v164;
        uint64_t v145 = &v140;
        uint64_t v107 = v147;
        __chkstk_darwin(v108, v109);
        unint64_t v141 = (v107 + 15) & 0xFFFFFFFFFFFFFFF0LL;
        uint64_t v144 = (char *)&v140 - v141;
        uint64_t v110 = v161;
        uint64_t v111 = v156;
        uint64_t v112 = v154;
        v154();
        uint64_t v113 = v112;
        id v142 = *(id *)(v106 + 32);
        uint64_t v114 = sub_10000FF6C((uint64_t)&unk_1000789C8);
        uint64_t v115 = swift_weakInit(v114 + 16, v106);
        os_log_t v143 = (os_log_t)&v140;
        __chkstk_darwin(v115, v116);
        ((void (*)(char *, char *, uint64_t))v113)( (char *)&v140 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v110,  v111);
        uint64_t v117 = v146;
        uint64_t v118 = *((unsigned __int8 *)v146 + 80);
        uint64_t v119 = (v118 + 24) & ~v118;
        uint64_t v120 = v119 + v107;
        uint64_t v121 = v118 | 7;
        unint64_t v122 = (v119 + v107 + 7) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v123 = swift_allocObject(&unk_100078B80, v122 + 16, v118 | 7);
        *(void *)(v123 + swift_weakDestroy(v0 + 16) = v114;
        uint64_t v124 = (void (*)(uint64_t, char *, uint64_t))v117[4];
        v124(v123 + v119, (char *)&v140 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0LL), v111);
        uint64_t v125 = (void (**)())(v123 + v122);
        uint64_t v126 = v155;
        *uint64_t v125 = sub_10004F4D4;
        v125[1] = v126;
        uint64_t v127 = sub_10000FF6C((uint64_t)&unk_1000789C8);
        uint64_t v128 = v164;
        uint64_t v129 = swift_weakInit(v127 + 16, v164);
        uint64_t v146 = &v140;
        __chkstk_darwin(v129, v130);
        uint64_t v131 = (char *)&v140 - v141;
        ((void (*)(char *, char *, uint64_t))v154)((char *)&v140 - v141, v161, v111);
        uint64_t v132 = swift_allocObject(&unk_100078BA8, v120, v121);
        *(void *)(v132 + swift_weakDestroy(v0 + 16) = v127;
        v124(v132 + v119, v131, v111);
        uint64_t v133 = type metadata accessor for Tunnel(0LL);
        swift_allocObject(v133, *(unsigned int *)(v133 + 48), *(unsigned __int16 *)(v133 + 52));
        id v134 = v148;
        id v135 = v142;
        swift_retain(v155);
        uint64_t v136 = sub_1000580B8();
        sub_10004F76C();
        sub_10004F76C();
        sub_10004F76C();
        sub_100016B48(v128 + 24, (uint64_t)v166, 33LL);
        swift_retain(v136);
        uint64_t v137 = v161;
        sub_10005574C();
        swift_endAccess(v166);
        OS_dispatch_queue.assertOnQueueHierarchy()();
        ControlChannelConnection.transport.getter(v166);
        uint64_t v138 = v167;
        uint64_t v139 = v168;
        sub_10000FF14(v166, v167);
        dispatch thunk of ControlChannelTransport.physicallyConnected.getter(v138, v139);
        sub_100058880();

        sub_100016BD4();
        v149(v137, v111);
        sub_10000FF38(v166);

        swift_release();
        goto LABEL_29;
      }

      static RemotePairingError.tunnelError.getter(0LL);
      sub_100026DD0((unint64_t *)&unk_1000819E0);
      uint64_t v71 = sub_10004F670(v70);
      sub_100026DD0((unint64_t *)&unk_1000813E0);
      uint64_t v72 = sub_10004F6F8();
      sub_10004F80C(v72, v73, v74, v75, v76);
      uint64_t *v10 = v71;
      sub_10004F75C();
      sub_10004F6E0();
      sub_100039B44((uint64_t)v10, (uint64_t *)&unk_1000820D8);

LABEL_13:
      swift_release();
LABEL_29:
      sub_10000FFF8();
      sub_10000FF80();
      return;
    }

    unint64_t v57 = sub_10004F778();
    if ((*(_BYTE *)(*v57 + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager_firstUnlockHasCompleted) & 1) != 0)
    {
      sub_10004F778();
      uint64_t is_darwinos = sub_1000467A0(24LL);
      if ((is_darwinos & 1) != 0) {
        goto LABEL_3;
      }
      uint64_t v58 = static os_log_type_t.error.getter(is_darwinos);
      uint64_t v59 = sub_100012380( v58,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"Rejecting tunnel connection as device hasn't unlocked recently",  62LL);
      static RemotePairingError.unlockRequired.getter(v59);
      sub_100026DD0((unint64_t *)&unk_1000819E0);
      uint64_t v61 = sub_10004F670(v60);
      sub_100026DD0((unint64_t *)&unk_1000813E0);
      uint64_t v62 = sub_10004F6F8();
      uint64_t v66 = 0xD000000000000029LL;
    }

    else
    {
      uint64_t v67 = static os_log_type_t.error.getter(v57);
      uint64_t v68 = sub_100012380( v67,  (uint64_t)&_mh_execute_header,  qword_1000845F0,  (uint64_t)"Rejecting tunnel connection as device hasn't unlocked since boot",  64LL);
      static RemotePairingError.unlockRequired.getter(v68);
      sub_100026DD0((unint64_t *)&unk_1000819E0);
      uint64_t v61 = sub_10004F670(v69);
      sub_100026DD0((unint64_t *)&unk_1000813E0);
      uint64_t v62 = sub_10004F6F8();
    }

    sub_10004F80C(v62, v66, v63, v64, v65);
    uint64_t *v10 = v61;
    sub_10004F75C();
    sub_10004F6E0();
    sub_100039B44((uint64_t)v10, (uint64_t *)&unk_1000820D8);

    goto LABEL_13;
  }

  sub_10000FFF8();

  swift_release();
  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004DLL,  0x800000010006AFF0LL,  "remotepairingdeviced/DeviceTunnelManager.swift",  46LL,  2LL,  65LL,  0);
  __break(1u);
}

uint64_t sub_10004C1FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v7 = sub_10000FD7C((uint64_t *)&unk_1000820D8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = &v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_10004F5F0(a1, (uint64_t)v10, (uint64_t *)&unk_1000820D8);
  if (swift_getEnumCaseMultiPayload(v10, v7) == 1)
  {
    uint64_t v11 = a2 + 16;
    swift_errorRelease(*v10);
    swift_beginAccess(v11, v15, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v11);
    if (Strong)
    {
      swift_beginAccess(Strong + 24, v14, 33LL, 0LL);
      sub_100054E8C();
      swift_endAccess(v14);
      OS_dispatch_queue.assertOnQueueHierarchy()();
      swift_release();
      swift_release();
    }
  }

  else
  {
    sub_100039B44((uint64_t)v10, (uint64_t *)&unk_1000820D8);
  }

  return a4(a1);
}

void sub_10004C344()
{
  uint64_t v1 = v0;
  sub_100026F24();
  uint64_t v3 = v2;
  v28[0] = 0xD000000000000028LL;
  v28[1] = 0x800000010006AF40LL;
  unint64_t v4 = sub_10004EEF4();
  char v5 = StringProtocol.contains<A>(_:)(v28, &type metadata for String, &type metadata for String, v4, v4);
  uint64_t IsEnabled = swift_bridgeObjectRelease(v3);
  if ((v5 & 1) != 0)
  {
    uint64_t IsEnabled = remotePairingIsEnabled(IsEnabled);
    char v8 = IsEnabled;
  }

  else
  {
    char v8 = 0;
  }

  uint64_t v9 = static RemoteServiceNames.deviceComputeService.getter(IsEnabled, v7);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v1 + 32);
  uint64_t v13 = sub_10000FF6C((uint64_t)&unk_1000789C8);
  swift_weakInit(v13 + 16, v1);
  uint64_t v14 = swift_allocObject(&unk_1000789F0, 25LL, 7LL);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = v13;
  *(_BYTE *)(v14 + 24) = v8;
  uint64_t v15 = sub_100031AFC((uint64_t)sub_10005047C, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v24, v26);
  swift_release();
  uint64_t v16 = String.utf8CString.getter(v9, v11);
  swift_bridgeObjectRelease(v11);
  remote_service_listen_with_device(v16 + 32, v12, v15);
  swift_release();
  _Block_release(v15);
  uint64_t v17 = sub_100057CC4();
  if ((v17 & 1) != 0)
  {
    uint64_t v19 = static RemoteServiceNames.deviceComputeService.getter(v17, v18);
    uint64_t v21 = v20;
    uint64_t v22 = sub_100031AFC((uint64_t)sub_10004B064, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v25, v27);
    swift_retain(v1);
    sub_10000FFF8();
    uint64_t v23 = String.utf8CString.getter(v19, v21);
    swift_bridgeObjectRelease(v21);
    lockdown_checkin_xpc(v23 + 32, 0LL, v12, v22);
    sub_100016BD4();
    _Block_release(v22);
  }

uint64_t sub_10004C538(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v7 = a3 + 16;
  uint64_t v8 = sub_10000FD7C(&qword_100083468);
  uint64_t inited = swift_initStackObject(v8, v86);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100062960;
  *(_DWORD *)(inited + 32) = static remote_device_type_t.ncmHost.getter();
  *(_DWORD *)(inited + 36) = static remote_device_type_t.ncmDevice.getter();
  uint64_t type = remote_device_get_type(a1);
  int v11 = sub_10004B364(type, inited);
  swift_setDeallocating(inited);
  swift_beginAccess(v7, v85, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v7);
  if (result)
  {
    if ((a4 & v11 & 1) != 0)
    {
      uint64_t v81 = result;
      unsigned int v82 = a2;
      sub_10000E484(0LL, (unint64_t *)&qword_100082170, &OBJC_CLASS___OS_dispatch_queue_ptr);
      uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
      uint64_t v80 = &v74;
      uint64_t v15 = __chkstk_darwin(v13, v14);
      uint64_t v17 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      static DispatchQoS.userInteractive.getter(v15);
      uint64_t v18 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
      __chkstk_darwin(v18, v19);
      uint64_t v21 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *, void))(v22 + 104))( v21,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
      uint64_t v23 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
      __chkstk_darwin(v23, &type metadata accessor for OS_dispatch_queue.Attributes);
      uint64_t v25 = (char *)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      v84[0] = (uint64_t)&_swiftEmptyArrayStorage;
      sub_100026A28((unint64_t *)&unk_100082130, v26);
      uint64_t v28 = v27;
      uint64_t v29 = sub_10000FD7C(&qword_100081D08);
      sub_100029EA0((unint64_t *)&unk_100082140, &qword_100081D08);
      dispatch thunk of SetAlgebra.init<A>(_:)(v84, v29, v30, v23, v28);
      id v79 = (id)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000023LL,  0x800000010006AF90LL,  v17,  v25,  v21,  0LL);
      uint64_t v31 = type metadata accessor for UUID(0LL);
      uint64_t v80 = &v74;
      uint64_t v32 = *(void *)(v31 - 8);
      uint64_t v33 = *(void *)(v32 + 64);
      uint64_t v35 = __chkstk_darwin(v31, v34);
      id v36 = (char *)&v74 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v37 = UUID.init()(v35);
      uint64_t v38 = static os_log_type_t.default.getter(v37);
      LOBYTE(v25) = v38;
      uint64_t v39 = (os_log_s *)qword_1000845F0;
      __chkstk_darwin(v38, v40);
      int v77 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
      v77(v36, v36, v31);
      os_log_type_t v41 = v25;
      if (os_log_type_enabled(v39, (os_log_type_t)v25))
      {
        uint64_t v75 = &v74;
        uint64_t v42 = swift_slowAlloc(12LL, -1LL);
        os_log_t v74 = v39;
        uint64_t v43 = (uint8_t *)v42;
        uint64_t v44 = swift_slowAlloc(32LL, -1LL);
        v84[0] = v44;
        *(_DWORD *)uint64_t v43 = 136446210;
        uint64_t v45 = UUID.uuidString.getter(v44);
        uint64_t v76 = (os_log_t *)v31;
        uint64_t v47 = v46;
        sub_100045370(v45, v46, v84);
        uint64_t v83 = v48;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v43 + 4, v43 + 12);
        uint64_t v49 = v47;
        uint64_t v31 = (uint64_t)v76;
        swift_bridgeObjectRelease(v49);
        uint64_t v78 = *(void (**)(char *, uint64_t))(v32 + 8);
        v78(v36, v31);
        _os_log_impl( (void *)&_mh_execute_header,  v74,  v41,  "Received tunnel connection %{public}s through RSD for device compute connection",  v43,  0xCu);
        swift_arrayDestroy(v44, 1LL);
        swift_slowDealloc(v44, -1LL, -1LL);
        uint64_t v50 = swift_slowDealloc(v43, -1LL, -1LL);
      }

      else
      {
        uint64_t v78 = *(void (**)(char *, uint64_t))(v32 + 8);
        uint64_t v50 = ((uint64_t (*)(char *, uint64_t))v78)(v36, v31);
      }

      uint64_t v76 = &v74;
      __chkstk_darwin(v50, v51);
      unint64_t v56 = (v33 + 15) & 0xFFFFFFFFFFFFFFF0LL;
      unint64_t v57 = v77;
      v77((char *)&v74 - v56, v36, v31);
      uint64_t v58 = v81;
      uint64_t v59 = *(void **)(v81 + 32);
      uint64_t v60 = swift_allocObject(&unk_1000789C8, 24LL, 7LL);
      uint64_t v61 = swift_weakInit(v60 + 16, v58);
      uint64_t v75 = &v74;
      __chkstk_darwin(v61, v62);
      uint64_t v63 = (char *)&v74 - v56;
      v57(v63, v36, v31);
      uint64_t v64 = *(unsigned __int8 *)(v32 + 80);
      uint64_t v65 = (v64 + 24) & ~v64;
      uint64_t v66 = swift_allocObject(&unk_100078AE0, v65 + v33, v64 | 7);
      *(void *)(v66 + swift_weakDestroy(v0 + 16) = v60;
      (*(void (**)(uint64_t, char *))(v32 + 32))(v66 + v65, v63);
      uint64_t v67 = type metadata accessor for Tunnel(0LL);
      swift_allocObject(v67, *(unsigned int *)(v67 + 48), *(unsigned __int16 *)(v67 + 52));
      id v68 = v79;
      id v69 = v59;
      uint64_t v70 = sub_1000580B8();
      swift_beginAccess(v58 + 24, v84, 33LL, 0LL);
      swift_retain(v70);
      sub_10005574C();
      swift_endAccess(v84);
      OS_dispatch_queue.assertOnQueueHierarchy()();
      uint64_t v71 = type metadata accessor for SocketTunnelConnection(0LL);
      swift_allocObject(v71, *(unsigned int *)(v71 + 48), *(unsigned __int16 *)(v71 + 52));
      id v72 = v68;
      uint64_t v73 = SocketTunnelConnection.init(socket:queue:logPrefix:)(v82, v72, 0LL, 0LL);
      sub_10004EFA8(v73, v70);

      swift_release();
      swift_release();
      v78(v36, v31);
      return swift_release();
    }

    else
    {
      os_log_type_t v52 = static os_log_type_t.error.getter(result);
      uint64_t v53 = (os_log_s *)qword_1000845F0;
      os_log_type_t v54 = v52;
      if (os_log_type_enabled((os_log_t)qword_1000845F0, v52))
      {
        uint64_t v55 = swift_slowAlloc(14LL, -1LL);
        *(_DWORD *)uint64_t v55 = 67109376;
        LODWORD(v84[0]) = a4 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v84, (char *)v84 + 4, v55 + 4, v55 + 8);
        *(_WORD *)(v55 + 8) = 1024;
        LODWORD(v84[0]) = v11 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v84, (char *)v84 + 4, v55 + 10, v55 + 14);
        _os_log_impl( (void *)&_mh_execute_header,  v53,  v54,  "RSD tunnel listener not accepting connection, enabled: %{BOOL}d, NCM: %{BOOL}d",  (uint8_t *)v55,  0xEu);
        swift_slowDealloc(v55, -1LL, -1LL);
      }

      close(a2);
      return swift_release();
    }
  }

  return result;
}

uint64_t sub_10004CC20(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v67 = a3;
    uint64_t v68 = result;
    sub_10000E484(0LL, (unint64_t *)&qword_100082170, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v3 = type metadata accessor for DispatchQoS(0LL);
    uint64_t v66 = &v59;
    uint64_t v5 = __chkstk_darwin(v3, v4);
    uint64_t v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    static DispatchQoS.userInteractive.getter(v5);
    uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
    __chkstk_darwin(v8, v9);
    int v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *, void))(v12 + 104))( v11,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
    uint64_t v13 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
    __chkstk_darwin(v13, &type metadata accessor for OS_dispatch_queue.Attributes);
    uint64_t v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    v70[0] = (uint64_t)&_swiftEmptyArrayStorage;
    sub_100026A28((unint64_t *)&unk_100082130, v16);
    uint64_t v18 = v17;
    uint64_t v19 = sub_10000FD7C(&qword_100081D08);
    sub_100029EA0((unint64_t *)&unk_100082140, &qword_100081D08);
    dispatch thunk of SetAlgebra.init<A>(_:)(v70, v19, v20, v13, v18);
    id v65 = (id)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000023LL,  0x800000010006AF90LL,  v7,  v15,  v11,  0LL);
    uint64_t v21 = type metadata accessor for UUID(0LL);
    uint64_t v66 = &v59;
    uint64_t v22 = *(void *)(v21 - 8);
    uint64_t v23 = *(void *)(v22 + 64);
    uint64_t v25 = __chkstk_darwin(v21, v24);
    uint64_t v26 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v27 = UUID.init()(v25);
    uint64_t v28 = static os_log_type_t.default.getter(v27);
    LOBYTE(v15) = v28;
    uint64_t v29 = (os_log_s *)qword_1000845F0;
    __chkstk_darwin(v28, v30);
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
    v31(v26, v26, v21);
    os_log_type_t v32 = v15;
    if (os_log_type_enabled(v29, (os_log_type_t)v15))
    {
      uint64_t v61 = &v59;
      uint64_t v33 = swift_slowAlloc(12LL, -1LL);
      uint64_t v62 = v31;
      uint64_t v34 = (uint8_t *)v33;
      uint64_t v35 = swift_slowAlloc(32LL, -1LL);
      v70[0] = v35;
      os_log_t v60 = v29;
      *(_DWORD *)uint64_t v34 = 136446210;
      uint64_t v36 = UUID.uuidString.getter(v35);
      uint64_t v63 = (uint64_t *)v21;
      uint64_t v38 = v37;
      sub_100045370(v36, v37, v70);
      uint64_t v69 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70, v34 + 4, v34 + 12);
      uint64_t v40 = v38;
      uint64_t v21 = (uint64_t)v63;
      swift_bridgeObjectRelease(v40);
      uint64_t v64 = *(void (**)(char *, uint64_t))(v22 + 8);
      v64(v26, v21);
      _os_log_impl( (void *)&_mh_execute_header,  v60,  v32,  "Received tunnel connection %{public}s through lockdown",  v34,  0xCu);
      swift_arrayDestroy(v35, 1LL);
      swift_slowDealloc(v35, -1LL, -1LL);
      os_log_type_t v41 = v34;
      uint64_t v31 = v62;
      uint64_t v42 = swift_slowDealloc(v41, -1LL, -1LL);
    }

    else
    {
      uint64_t v64 = *(void (**)(char *, uint64_t))(v22 + 8);
      uint64_t v42 = ((uint64_t (*)(char *, uint64_t))v64)(v26, v21);
    }

    uint64_t v63 = &v59;
    __chkstk_darwin(v42, v43);
    unint64_t v44 = (v23 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    v31((char *)&v59 - v44, v26, v21);
    uint64_t v45 = v67;
    uint64_t v62 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
    uint64_t v46 = swift_allocObject(&unk_1000789C8, 24LL, 7LL);
    uint64_t v47 = swift_weakInit(v46 + 16, v45);
    uint64_t v61 = &v59;
    __chkstk_darwin(v47, v48);
    uint64_t v49 = (char *)&v59 - v44;
    v31(v49, v26, v21);
    uint64_t v50 = *(unsigned __int8 *)(v22 + 80);
    uint64_t v51 = (v50 + 24) & ~v50;
    uint64_t v52 = swift_allocObject(&unk_100078A68, v51 + v23, v50 | 7);
    *(void *)(v52 + swift_weakDestroy(v0 + 16) = v46;
    (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v52 + v51, v49, v21);
    uint64_t v53 = type metadata accessor for Tunnel(0LL);
    swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
    id v54 = v65;
    v62;
    uint64_t v55 = sub_1000580B8();
    swift_beginAccess(v45 + 24, v70, 33LL, 0LL);
    swift_retain(v55);
    sub_10005574C();
    swift_endAccess(v70);
    OS_dispatch_queue.assertOnQueueHierarchy()();
    uint64_t v56 = type metadata accessor for LockdownTunnelConnection(0LL);
    swift_allocObject(v56, *(unsigned int *)(v56 + 48), *(unsigned __int16 *)(v56 + 52));
    id v57 = v54;
    uint64_t v58 = sub_1000124D8(v68, v57);
    sub_10004F1DC(v58, v55);

    swift_release();
    v64(v26, v21);
    return swift_release();
  }

  return result;
}

uint64_t sub_10004D1A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  sub_100016B48(a2 + 16, (uint64_t)v5, 0LL);
  uint64_t result = swift_weakLoadStrong(v2);
  if (result)
  {
    sub_100016B48(result + 24, (uint64_t)v4, 33LL);
    sub_100054E8C();
    swift_endAccess(v4);
    OS_dispatch_queue.assertOnQueueHierarchy()();
    sub_100010008();
    return sub_100016BD4();
  }

  return result;
}

void sub_10004D230(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = static os_log_type_t.default.getter(a1);
  sub_10000E484(0LL, (unint64_t *)&qword_1000809A0, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v4 = (void *)sub_10004F7D0();
  sub_100012380( v3,  (uint64_t)&_mh_execute_header,  (uint64_t)v4,  (uint64_t)"Cancelling all control channel initiated tunnels",  48LL);

  sub_100016B48(v2 + 24, (uint64_t)v18, 0LL);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = v5 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(v5 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain(v5);
  int64_t v11 = 0LL;
  while (v9)
  {
    unint64_t v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v13 = v12 | (v11 << 6);
LABEL_22:
    uint64_t v17 = *(void *)(*(void *)(v5 + 56) + 8 * v13);
    if (*(void *)(v17 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel_initiator))
    {
      swift_retain(v17);
      sub_100058B08();
      swift_release(v17);
    }
  }

  int64_t v14 = v11 + 1;
  if (__OFADD__(v11, 1LL))
  {
    __break(1u);
    goto LABEL_26;
  }

  if (v14 >= v10) {
    goto LABEL_24;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v14);
  ++v11;
  if (v15) {
    goto LABEL_21;
  }
  int64_t v11 = v14 + 1;
  if (v14 + 1 >= v10) {
    goto LABEL_24;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v11);
  if (v15) {
    goto LABEL_21;
  }
  int64_t v11 = v14 + 2;
  if (v14 + 2 >= v10) {
    goto LABEL_24;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v11);
  if (v15) {
    goto LABEL_21;
  }
  int64_t v11 = v14 + 3;
  if (v14 + 3 >= v10) {
    goto LABEL_24;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v11);
  if (v15)
  {
LABEL_21:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v11 << 6);
    goto LABEL_22;
  }

  int64_t v16 = v14 + 4;
  if (v16 >= v10)
  {
LABEL_24:
    sub_100016BD4();
    return;
  }

  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_21;
  }

  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v11 >= v10) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_21;
    }
  }

void sub_10004D410(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = static os_log_type_t.default.getter(a1);
  sub_10000E484(0LL, (unint64_t *)&qword_1000809A0, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v5 = (void *)sub_10004F7D0();
  sub_100012380(v4, (uint64_t)&_mh_execute_header, (uint64_t)v5, (uint64_t)"Cancelling all tunnels", 22LL);

  uint64_t v6 = (uint64_t *)(v3 + 24);
  uint64_t v7 = *(void *)(v3 + 32);
  v30[0] = v3 + 24;
  v30[1] = v7;
  uint64_t v8 = &qword_100083448;
  while (1)
  {
    uint64_t v9 = sub_10000FD7C(v8);
    sub_100012280();
    __chkstk_darwin(v10, v11);
    sub_100016C88();
    sub_10000FD7C(&qword_100083440);
    sub_100012280();
    __chkstk_darwin(v12, v13);
    sub_10000FFCC();
    uint64_t v16 = v15 - v14;
    sub_100016B48((uint64_t)v6, (uint64_t)v31, 33LL);
    if (*(void *)(*v6 + 16))
    {
      uint64_t v17 = v16 + *(int *)(v9 + 48);
      uint64_t v18 = sub_10004E588(*v6);
      v30[2] = v30;
      uint64_t v19 = v8;
      uint64_t v21 = v20;
      uint64_t v23 = v22 & 1;
      uint64_t v24 = sub_10000FD7C(&qword_100083458);
      Dictionary._Variant.remove(at:)(v16, v17, v18, v21, v23, v24);
      uint64_t v25 = v21;
      uint64_t v8 = v19;
      sub_100020104(v18, v25, v23);
      uint64_t v26 = 0LL;
    }

    else
    {
      uint64_t v26 = 1LL;
    }

    sub_10001D930(v16, v26, 1LL, v9);
    swift_endAccess(v31);
    OS_dispatch_queue.assertOnQueueHierarchy()();
    uint64_t v27 = *(int *)(v9 + 48);
    uint64_t v28 = sub_10001DCE0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 32LL))(v2, v16, v28);
    uint64_t v29 = *(void *)(v16 + v27);
    *(void *)(v2 + v27) = v29;
    swift_retain(v29);
    sub_100058B08();
    swift_release();
    sub_100039B44(v2, v8);
    uint64_t v6 = (uint64_t *)v30[0];
  }

  sub_100039B44(v16, &qword_100083440);
  sub_10000FF80();
}

void sub_10004D630(uint64_t a1)
{
  uint64_t v69 = v1 + 24;
  sub_100016B48(v1 + 24, (uint64_t)v86, 0LL);
  uint64_t v70 = v1;
  uint64_t v74 = *(void *)(v1 + 24) + 64LL;
  sub_10004F68C();
  uint64_t v75 = v4;
  uint64_t v77 = v5;
  __n128 v6 = swift_bridgeObjectRetain(v5);
  uint64_t v7 = 0LL;
  v6.n128_u64[0] = 136315138LL;
  __n128 v68 = v6;
  v67[1] = (char *)&type metadata for Any + 8;
  uint64_t v71 = a1;
  while (v2)
  {
    sub_10004F7EC();
    uint64_t v9 = v8 | (v7 << 6);
LABEL_24:
    uint64_t v23 = *(void *)(*(void *)(v77 + 56) + 8 * v9);
    uint64_t v24 = *(void **)(v23 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel_initiator);
    if (v24)
    {
      swift_retain(v23);
      id v25 = v24;
      id v26 = [v25 identifier];
      uint64_t v27 = sub_10000FD7C((uint64_t *)&unk_1000835C0);
      uint64_t v28 = *(void *)(*(void *)(v27 - 8) + 64LL);
      __chkstk_darwin(v27, v29);
      uint64_t v30 = (char *)v67 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v83 = v2;
      uint64_t v84 = v7;
      uint64_t v81 = v23;
      id v82 = v25;
      uint64_t v80 = v31;
      if (v26)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

        uint64_t v32 = sub_10001DCE0();
        uint64_t v33 = (char *)v67 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v34 = 0LL;
      }

      else
      {
        uint64_t v32 = sub_10001DCE0();
        uint64_t v33 = (char *)v67 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v34 = 1LL;
      }

      uint64_t v35 = sub_10004F7C4((uint64_t)v33, v34);
      id v79 = v67;
      __chkstk_darwin(v35, v36);
      unint64_t v37 = (v28 + 15) & 0xFFFFFFFFFFFFFFF0LL;
      uint64_t v38 = (char *)v67 - v37;
      sub_10001DCE0();
      uint64_t v39 = *(void *)(v32 - 8);
      uint64_t v76 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 16);
      v76((char *)v67 - v37, a1, v32);
      sub_10004F7C4((uint64_t)v67 - v37, 0LL);
      sub_10000FD7C(&qword_1000820C8);
      uint64_t v78 = v67;
      sub_100012280();
      __chkstk_darwin(v40, v41);
      sub_100016C88();
      uint64_t v43 = v23 + *(int *)(v42 + 48);
      sub_10004F7D8((uint64_t)v67 - v37, v23);
      sub_10004F7D8((uint64_t)v67 - v37, v43);
      uint64_t v44 = sub_10004F740(v23);
      if (v48)
      {
        sub_10004F684((uint64_t)v67 - v37);
        sub_10004F684((uint64_t)v67 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
        sub_10004F740(v43);
        if (!v48) {
          goto LABEL_36;
        }
        sub_10004F684(v23);
        sub_10004F654();
LABEL_38:
        uint64_t v55 = static os_log_type_t.default.getter(v46);
        os_log_type_t v56 = v55;
        __chkstk_darwin(v55, v57);
        sub_100016B50();
        v76(v38, a1, v32);
        sub_10000E484(0LL, (unint64_t *)&qword_1000809A0, &OBJC_CLASS___OS_os_log_ptr);
        uint64_t v58 = (os_log_s *)sub_10004F7D0();
        os_log_type_t v59 = v56;
        if (os_log_type_enabled(v58, v56))
        {
          uint64_t v60 = sub_1000122E0(12LL);
          uint64_t v61 = sub_1000122E0(32LL);
          v85[0] = v61;
          *(_DWORD *)uint64_t v60 = v68.n128_u32[0];
          sub_100026A28(&qword_1000819D8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter(v32, v62);
          sub_100045370(v63, v64, v85);
          *(void *)(v60 + 4) = v65;
          sub_10001DC58();
          sub_10004F730();
          _os_log_impl( (void *)&_mh_execute_header,  v58,  v59,  "Cancelling tunnel associated with host %s",  (uint8_t *)v60,  0xCu);
          swift_arrayDestroy(v61, 1LL);
          uint64_t v66 = v61;
          a1 = v71;
          sub_10001001C(v66);
          sub_10001001C(v60);
        }

        else
        {

          sub_10004F730();
        }

        sub_100016B48(v69, (uint64_t)v85, 33LL);
        sub_100054E8C();
        swift_endAccess(v85);
        sub_100016BD4();
        OS_dispatch_queue.assertOnQueueHierarchy()();
        sub_100058B08();
        goto LABEL_42;
      }

      uint64_t v73 = v67;
      __chkstk_darwin(v44, v45);
      uint64_t v47 = (char *)v67 - v37;
      sub_10004F7D8(v23, (uint64_t)v47);
      uint64_t v49 = sub_10004F740(v43);
      if (v48)
      {
        sub_10004F684((uint64_t)v38);
        sub_10004F684((uint64_t)v67 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
        (*(void (**)(char *, uint64_t))(v39 + 8))(v47, v32);
LABEL_36:
        sub_100039B44(v23, &qword_1000820C8);
        sub_10004F654();
        goto LABEL_42;
      }

      id v72 = v67;
      __chkstk_darwin(v49, v50);
      sub_100012404();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32))(a1, v43, v32);
      sub_100026A28(&qword_1000820D0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      char v52 = dispatch thunk of static Equatable.== infix(_:_:)(v47, a1, v32, v51);
      uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
      uint64_t v54 = a1;
      a1 = v71;
      v53(v54, v32);
      sub_10004F684((uint64_t)v38);
      sub_10004F684((uint64_t)v30);
      v53((uint64_t)v47, v32);
      sub_10004F684(v23);
      sub_10004F654();
      if ((v52 & 1) != 0) {
        goto LABEL_38;
      }
LABEL_42:

      sub_100010008();
      uint64_t v2 = v83;
      uint64_t v7 = v84;
    }
  }

  uint64_t v10 = v7 + 1;
  if (__OFADD__(v7, 1LL))
  {
    __break(1u);
    goto LABEL_45;
  }

  if (v10 >= v75) {
    goto LABEL_43;
  }
  ++v7;
  if (*(void *)(v74 + 8 * v10)) {
    goto LABEL_23;
  }
  uint64_t v7 = v10 + 1;
  sub_10004F818();
  if (v11 == v12) {
    goto LABEL_43;
  }
  sub_10004F7E0();
  if (v14) {
    goto LABEL_23;
  }
  uint64_t v7 = v13 + 2;
  sub_10004F818();
  if (v11 == v12) {
    goto LABEL_43;
  }
  sub_10004F7E0();
  if (v16) {
    goto LABEL_23;
  }
  uint64_t v7 = v15 + 3;
  sub_10004F818();
  if (v11 == v12) {
    goto LABEL_43;
  }
  sub_10004F7E0();
  if (v18)
  {
LABEL_23:
    sub_10004F7B0();
    uint64_t v9 = v22 + (v7 << 6);
    goto LABEL_24;
  }

  uint64_t v19 = v17 + 4;
  if (v19 >= v75)
  {
LABEL_43:
    swift_release(v77);
    sub_10000FF80();
    return;
  }

  if (*(void *)(v74 + 8 * v19))
  {
    uint64_t v7 = v19;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    sub_10004F818();
    if (v11 == v12) {
      goto LABEL_43;
    }
    sub_10004F7E0();
    uint64_t v19 = v20 + 1;
    if (v21) {
      goto LABEL_23;
    }
  }

LABEL_45:
  __break(1u);
}

uint64_t sub_10004DC28()
{
  uint64_t v1 = type metadata accessor for RemotePairingError(0LL);
  sub_100012280();
  __chkstk_darwin(v2, v3);
  sub_100016B50();
  uint64_t result = XPCDictionary.subscript.getter(0xD00000000000002BLL, 0x800000010006AE60LL);
  if ((result & 1) == 0)
  {
    sub_100026A28( (unint64_t *)&unk_1000813E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
    uint64_t v6 = v5;
    static Error<>.permissionDenied.getter(v1, v5);
    sub_100026A28( (unint64_t *)&unk_1000819E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
    sub_10004F640(v7);
    Error<>.init(_:_:)(v0, 0xD000000000000049LL, 0x800000010006AE90LL, v1, v6);
    return sub_10001DDE4();
  }

  return result;
}

void sub_10004DD30(unint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v9 = type metadata accessor for RemotePairingError(0LL);
  sub_100012280();
  __chkstk_darwin(v10, v11);
  sub_100016B50();
  sub_10004DC28();
  if (!v4)
  {
    uint64_t v41 = a3;
    sub_10000FD7C(&qword_100083440);
    sub_100012280();
    __chkstk_darwin(v12, v13);
    sub_1000203EC();
    uint64_t v14 = swift_beginAccess(v3 + 24, v40, 0LL, 0LL);
    uint64_t v15 = *(void *)(v3 + 24);
    __chkstk_darwin(v14, v16);
    v37[2] = a1;
    swift_bridgeObjectRetain(v15);
    uint64_t v17 = sub_10004E620((uint64_t)sub_10004E568, v37, v15);
    swift_bridgeObjectRelease(v15);
    sub_10004B208((uint64_t)v17, a2);
    swift_release(v17);
    uint64_t v18 = sub_10000FD7C(&qword_100083448);
    if (sub_10001D9C8(a2, 1LL, v18) == 1)
    {
      sub_100039B44(a2, &qword_100083440);
      static RemotePairingError.deviceNotFound.getter();
      unint64_t v38 = 0LL;
      unint64_t v39 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(28LL);
      uint64_t v19 = swift_bridgeObjectRelease(v39);
      unint64_t v38 = 0xD00000000000001ALL;
      unint64_t v39 = 0x800000010006ADE0LL;
      v20._countAndFlagsBits = RemoteUnlockDeviceKeyForTunnelRequest.tunnelDeviceName.getter(v19);
      object = v20._object;
      String.append(_:)(v20);
      swift_bridgeObjectRelease(object);
      unint64_t v22 = v38;
      unint64_t v23 = v39;
      sub_100026A28( (unint64_t *)&unk_1000819E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
      sub_10004F640(v24);
      sub_100026A28( (unint64_t *)&unk_1000813E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
      Error<>.init(_:_:)(v5, v22, v23, v9, v25);
      sub_10001DDE4();
    }

    else
    {
      uint64_t v26 = *(void *)(a2 + *(int *)(v18 + 48));
      uint64_t v27 = type metadata accessor for UUID(0LL);
      uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8LL))(a2, v27);
      uint64_t v29 = *(void **)(v26 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel_initiator);
      if (v29)
      {
        id v30 = v29;
        uint64_t v31 = CUPairedPeer.remoteUnlockKey.getter();
        if (v32 >> 60 == 15)
        {
          static RemotePairingError.pairingRecordMissingInfo.getter(v31);
          sub_100026D90((unint64_t *)&unk_1000819E0);
          sub_10004F640(v33);
          sub_100026D90((unint64_t *)&unk_1000813E0);
          sub_10004F6C4(0xD000000000000023LL, v34, (uint64_t)"No remote unlock key for this host.");
          sub_10001DDE4();
        }

        else
        {
          RemoteUnlockDeviceKeyForTunnelResponse.init(deviceKey:)(v31);
        }

        sub_100026EDC();
      }

      else
      {
        static RemotePairingError.invalidOperation.getter(v28);
        sub_100026D90((unint64_t *)&unk_1000819E0);
        sub_10004F640(v35);
        sub_100026D90((unint64_t *)&unk_1000813E0);
        sub_10004F6C4(0xD00000000000002CLL, v36, (uint64_t)"Tunnel is not associated with a paired host.");
        sub_10001DDE4();
        sub_100026EDC();
      }
    }
  }

  sub_100012268();
}

uint64_t sub_10004E098(char *a1, uint64_t *a2, uint64_t a3)
{
  v24[1] = a3;
  uint64_t v4 = *a2;
  uint64_t v5 = sub_10000FD7C(&qword_100083448);
  uint64_t v6 = *(void *)(*(void *)(v5 - 8) + 64LL);
  __chkstk_darwin(v5, v7);
  unint64_t v8 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, char *, uint64_t))(v10 + 16);
  uint64_t v12 = v11((char *)v24 - v8, a1, v9);
  uint64_t v13 = *(int *)(v5 + 48);
  *(void *)((char *)v24 + v13 - v8) = v4;
  __chkstk_darwin(v12, v14);
  v11((char *)v24 - v8, (char *)v24 - v8, v9);
  *(void *)((char *)v24 + v13 - v8) = v4;
  swift_retain(v4);
  uint64_t v15 = sub_100057FF4();
  uint64_t v17 = v16;
  uint64_t v18 = RemoteUnlockDeviceKeyForTunnelRequest.tunnelDeviceName.getter();
  uint64_t v20 = v19;
  if (v17)
  {
    if (v15 == v18 && v17 == v19) {
      char v22 = 1;
    }
    else {
      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v18, v19, 0LL);
    }
    swift_bridgeObjectRelease(v20);
    sub_100039B44((uint64_t)v24 - v8, &qword_100083448);
    swift_bridgeObjectRelease(v17);
  }

  else
  {
    sub_100039B44((uint64_t)v24 - v8, &qword_100083448);
    swift_bridgeObjectRelease(v20);
    char v22 = 0;
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))((char *)v24 - v8, v9);
  return v22 & 1;
}

void sub_10004E230(os_log_s *a1)
{
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v55 = v4 + 64;
  sub_10004F68C();
  uint64_t v56 = v5;
  swift_bridgeObjectRetain(v4);
  uint64_t v6 = 0LL;
  uint64_t v53 = (char *)&type metadata for Any + 8;
  while (v2)
  {
    sub_10004F7EC();
    uint64_t v8 = v7 | (v6 << 6);
LABEL_24:
    uint64_t v22 = *(void *)(*(void *)(v4 + 56) + 8 * v8);
    uint64_t v23 = swift_retain(v22);
    os_log_type_t v24 = static os_log_type_t.default.getter(v23);
    swift_retain_n(v22, 4LL);
    os_log_type_t v25 = v24;
    if (os_log_type_enabled(a1, v24))
    {
      swift_retain_n(v22, 2LL);
      uint64_t v26 = sub_1000122E0(32LL);
      uint64_t v27 = sub_1000122E0(96LL);
      uint64_t v58 = v27;
      *(_DWORD *)uint64_t v26 = 136446722;
      uint64_t v28 = UUID.uuidString.getter();
      sub_10004F800(v28, v29, v30, v31, v32, v33, v34, v35, v51, (uint64_t)v53);
      *(void *)(v26 + 4) = v36;
      sub_10004F724();
      sub_10001DC58();
      *(_WORD *)(v26 + 12) = 2082;
      id v57 = *(id *)(v22 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel_initiator);
      id v37 = v57;
      uint64_t v38 = String.init<A>(describing:)(&v57, &type metadata for Tunnel.Initiator);
      sub_10004F800(v38, v39, v40, v41, v42, v43, v44, v45, v52, v54);
      *(void *)(v26 + 14) = v46;
      sub_10004F724();
      sub_10001DC58();
      *(_WORD *)(v26 + 22) = 2082;
      uint64_t v47 = sub_100057FF4();
      if (v48)
      {
        uint64_t v49 = v48;
      }

      else
      {
        uint64_t v47 = 0x296C6C756E28LL;
        uint64_t v49 = 0xE600000000000000LL;
      }

      sub_100045370(v47, v49, &v58);
      *(void *)(v26 + 24) = v50;
      sub_10004F724();
      sub_10001DC58();
      _os_log_impl( (void *)&_mh_execute_header,  a1,  v25,  "State dump: %{public}s initiated by %{public}s, RSD name %{public}s",  (uint8_t *)v26,  0x20u);
      swift_arrayDestroy(v27, 3LL);
      sub_10001001C(v27);
      sub_10001001C(v26);
      swift_release(v22);
    }

    else
    {
      swift_release_n(v22, 5LL);
    }
  }

  uint64_t v9 = v6 + 1;
  if (__OFADD__(v6, 1LL))
  {
    __break(1u);
    goto LABEL_32;
  }

  if (v9 >= v56) {
    goto LABEL_30;
  }
  ++v6;
  if (*(void *)(v55 + 8 * v9)) {
    goto LABEL_23;
  }
  uint64_t v6 = v9 + 1;
  sub_10004F7A4();
  if (v10 == v11) {
    goto LABEL_30;
  }
  sub_10004F798();
  if (v13) {
    goto LABEL_23;
  }
  uint64_t v6 = v12 + 2;
  sub_10004F7A4();
  if (v10 == v11) {
    goto LABEL_30;
  }
  sub_10004F798();
  if (v15) {
    goto LABEL_23;
  }
  uint64_t v6 = v14 + 3;
  sub_10004F7A4();
  if (v10 == v11) {
    goto LABEL_30;
  }
  sub_10004F798();
  if (v17)
  {
LABEL_23:
    sub_10004F7B0();
    uint64_t v8 = v21 + (v6 << 6);
    goto LABEL_24;
  }

  uint64_t v18 = v16 + 4;
  if (v18 >= v56)
  {
LABEL_30:
    sub_100010008();
    return;
  }

  if (*(void *)(v55 + 8 * v18))
  {
    uint64_t v6 = v18;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v6 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    sub_10004F7A4();
    if (v10 == v11) {
      goto LABEL_30;
    }
    sub_10004F798();
    uint64_t v18 = v19 + 1;
    if (v20) {
      goto LABEL_23;
    }
  }

uint64_t sub_10004E4F8()
{
  sub_10000FF38((void *)(v0 + 40));
  return v0;
}

uint64_t sub_10004E528()
{
  return swift_deallocClassInstance(v0, 81LL, 7LL);
}

uint64_t type metadata accessor for DeviceTunnelManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC20remotepairingdeviced19DeviceTunnelManager);
}

uint64_t sub_10004E568(char *a1, uint64_t *a2)
{
  return sub_10004E098(a1, a2, *(void *)(v2 + 16)) & 1;
}

uint64_t sub_10004E588(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128LL;
    return __clz(__rbit64(v1)) + v2;
  }

  uint64_t v2 = 128LL;
  for (uint64_t i = 11LL; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64LL;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

unint64_t *sub_10004E620(uint64_t isStackAllocationSafe, unint64_t *a2, uint64_t a3)
{
  char v5 = a2;
  unsigned int v6 = (uint64_t (*)(char *, uint64_t *))isStackAllocationSafe;
  char v7 = *(_BYTE *)(a3 + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (1LL << v7) + 63;
  uint64_t v10 = v9 >> 6;
  uint64_t v11 = 8 * (v9 >> 6);
  if (v8 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v9 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, a2);
    uint64_t v12 = (unint64_t *)((char *)&v16 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0LL));
    sub_1000538DC(0LL, v10, v12);
    uint64_t v13 = sub_10004E79C(v12, v10, a3, v6);
    if (v3) {
      swift_willThrow(v13);
    }
    else {
      return v13;
    }
  }

  else
  {
    uint64_t v14 = (unint64_t *)swift_slowAlloc(v11, -1LL);
    sub_1000538DC(0LL, v10, v14);
    char v5 = sub_10004E79C(v14, v10, a3, v6);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  return v5;
}

unint64_t *sub_10004E79C( unint64_t *result, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, uint64_t *))
{
  uint64_t v31 = a4;
  uint64_t v32 = a3;
  uint64_t v26 = a2;
  uint64_t v27 = result;
  int64_t v4 = 0LL;
  uint64_t v5 = *(void *)(a3 + 64);
  uint64_t v28 = 0LL;
  uint64_t v29 = a3 + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & v5;
  int64_t v30 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    int64_t v33 = v4;
    unint64_t v10 = v9 | (v4 << 6);
LABEL_17:
    uint64_t v15 = type metadata accessor for UUID(0LL);
    uint64_t v16 = *(void *)(v15 - 8);
    __chkstk_darwin(v15, v17);
    uint64_t v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v20 = v32;
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))( v19,  *(void *)(v32 + 48) + *(void *)(v16 + 72) * v10,  v15);
    uint64_t v21 = *(void *)(*(void *)(v20 + 56) + 8 * v10);
    uint64_t v35 = v21;
    swift_retain(v21);
    uint64_t v22 = v34;
    char v23 = v31(v19, &v35);
    uint64_t v34 = v22;
    if (v22)
    {
      swift_release(v21);
      return (unint64_t *)(*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    }

    char v24 = v23;
    swift_release(v21);
    uint64_t result = (unint64_t *)(*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    int64_t v4 = v33;
    if ((v24 & 1) != 0)
    {
      *(unint64_t *)((char *)v27 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v10;
      BOOL v11 = __OFADD__(v28++, 1LL);
      if (v11) {
        goto LABEL_31;
      }
    }
  }

  BOOL v11 = __OFADD__(v4, 1LL);
  int64_t v12 = v4 + 1;
  if (v11)
  {
    __break(1u);
    goto LABEL_30;
  }

  if (v12 >= v30) {
    return (unint64_t *)sub_10004EA24(v27, v26, v28, v32);
  }
  unint64_t v13 = *(void *)(v29 + 8 * v12);
  if (v13)
  {
LABEL_16:
    unint64_t v8 = (v13 - 1) & v13;
    int64_t v33 = v12;
    unint64_t v10 = __clz(__rbit64(v13)) + (v12 << 6);
    goto LABEL_17;
  }

  int64_t v14 = v12 + 1;
  if (v12 + 1 >= v30) {
    return (unint64_t *)sub_10004EA24(v27, v26, v28, v32);
  }
  unint64_t v13 = *(void *)(v29 + 8 * v14);
  if (v13) {
    goto LABEL_15;
  }
  int64_t v14 = v12 + 2;
  if (v12 + 2 >= v30) {
    return (unint64_t *)sub_10004EA24(v27, v26, v28, v32);
  }
  unint64_t v13 = *(void *)(v29 + 8 * v14);
  if (v13) {
    goto LABEL_15;
  }
  int64_t v14 = v12 + 3;
  if (v12 + 3 >= v30) {
    return (unint64_t *)sub_10004EA24(v27, v26, v28, v32);
  }
  unint64_t v13 = *(void *)(v29 + 8 * v14);
  if (v13)
  {
LABEL_15:
    int64_t v12 = v14;
    goto LABEL_16;
  }

  while (1)
  {
    int64_t v12 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v12 >= v30) {
      return (unint64_t *)sub_10004EA24(v27, v26, v28, v32);
    }
    unint64_t v13 = *(void *)(v29 + 8 * v12);
    ++v14;
    if (v13) {
      goto LABEL_16;
    }
  }

uint64_t sub_10004EA24(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }

  sub_10000FD7C(&qword_100083450);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)(v5);
  uint64_t v7 = result;
  if (v40 < 1) {
    unint64_t v8 = 0LL;
  }
  else {
    unint64_t v8 = *v39;
  }
  uint64_t v9 = 0LL;
  uint64_t v10 = result + 64;
  uint64_t v41 = v4;
  uint64_t v42 = result;
  while (1)
  {
    if (v8)
    {
      uint64_t v44 = (v8 - 1) & v8;
      uint64_t v45 = v9;
      unint64_t v11 = __clz(__rbit64(v8)) | (v9 << 6);
    }

    else
    {
      uint64_t v12 = v9 + 1;
      if (__OFADD__(v9, 1LL)) {
        goto LABEL_40;
      }
      if (v12 >= v40) {
        return v7;
      }
      unint64_t v13 = v39[v12];
      uint64_t v14 = v9 + 1;
      if (!v13)
      {
        uint64_t v14 = v9 + 2;
        if (v9 + 2 >= v40) {
          return v7;
        }
        unint64_t v13 = v39[v14];
        if (!v13)
        {
          uint64_t v14 = v9 + 3;
          if (v9 + 3 >= v40) {
            return v7;
          }
          unint64_t v13 = v39[v14];
          if (!v13)
          {
            uint64_t v15 = v9 + 4;
            if (v9 + 4 >= v40) {
              return v7;
            }
            unint64_t v13 = v39[v15];
            if (!v13)
            {
              while (1)
              {
                uint64_t v14 = v15 + 1;
                if (__OFADD__(v15, 1LL)) {
                  goto LABEL_41;
                }
                if (v14 >= v40) {
                  return v7;
                }
                unint64_t v13 = v39[v14];
                ++v15;
                if (v13) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v14 = v9 + 4;
          }
        }
      }

LABEL_24:
      uint64_t v44 = (v13 - 1) & v13;
      uint64_t v45 = v14;
      unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    }

    uint64_t v16 = type metadata accessor for UUID(0LL);
    uint64_t v43 = &v39;
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(void *)(v17 + 64);
    __chkstk_darwin(v16, v19);
    unint64_t v20 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    uint64_t v21 = *(void *)(v17 + 72);
    uint64_t v22 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v17 + 16))( (char *)&v39 - v20,  *(void *)(v4 + 48) + v21 * v11,  v16);
    uint64_t v46 = &v39;
    uint64_t v23 = *(void *)(*(void *)(v4 + 56) + 8 * v11);
    __chkstk_darwin(v22, v24);
    uint64_t v25 = (char *)&v39 - v20;
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v26((char *)&v39 - v20, (char *)&v39 - v20, v16);
    uint64_t v7 = v42;
    uint64_t v27 = *(void *)(v42 + 40);
    sub_100026A28( (unint64_t *)&qword_100082220,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v29 = v28;
    swift_retain(v23);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v16, v29);
    uint64_t v30 = -1LL << *(_BYTE *)(v7 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1LL << v31) & ~*(void *)(v10 + 8 * (v31 >> 6))) == 0) {
      break;
    }
    unint64_t v33 = __clz(__rbit64((-1LL << v31) & ~*(void *)(v10 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_34:
    *(void *)(v10 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v33;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)( *(void *)(v7 + 48) + v33 * v21,  v25,  v16);
    *(void *)(*(void *)(v7 + 56) + 8 * v33) = v23;
    ++*(void *)(v7 + 16);
    if (__OFSUB__(v5--, 1LL)) {
      goto LABEL_39;
    }
    unint64_t v8 = v44;
    uint64_t v4 = v41;
    uint64_t v9 = v45;
    if (!v5) {
      return v7;
    }
  }

  char v34 = 0;
  unint64_t v35 = (unint64_t)(63 - v30) >> 6;
  while (++v32 != v35 || (v34 & 1) == 0)
  {
    BOOL v36 = v32 == v35;
    if (v32 == v35) {
      unint64_t v32 = 0LL;
    }
    v34 |= v36;
    uint64_t v37 = *(void *)(v10 + 8 * v32);
    if (v37 != -1)
    {
      unint64_t v33 = __clz(__rbit64(~v37)) + (v32 << 6);
      goto LABEL_34;
    }
  }

  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10004ED98(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1LL << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void *)(a5 + 48);
    uint64_t v9 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL))( v7,  v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a2,  v9);
    uint64_t v10 = (uint64_t *)(*(void *)(a5 + 56) + 16 * a2);
    uint64_t v11 = *v10;
    swift_bridgeObjectRetain(v10[1]);
    return v11;
  }

LABEL_8:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_10004EE50(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1LL << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void *)(a5 + 48);
    uint64_t v9 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL))( v7,  v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a2,  v9);
    return swift_retain(*(void *)(*(void *)(a5 + 56) + 8 * a2));
  }

unint64_t sub_10004EEF4()
{
  unint64_t result = qword_100083460;
  if (!qword_100083460)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100083460);
  }

  return result;
}

uint64_t sub_10004EF30()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10004EF54()
{
  return swift_deallocObject(v0, 25LL, 7LL);
}

uint64_t sub_10004EF74(uint64_t a1, int a2)
{
  return sub_10004C538(a1, a2, *(void *)(v2 + 16), *(unsigned __int8 *)(v2 + 24));
}

uint64_t sub_10004EF80(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004EF90(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10004EF98(uint64_t a1, uint64_t a2)
{
  return sub_10004CC20(a1, a2, v2);
}

uint64_t sub_10004EFA8(uint64_t a1, uint64_t a2)
{
  v26[3] = type metadata accessor for SocketTunnelConnection(0LL);
  v26[4] = &protocol witness table for SocketTunnelConnection;
  v26[0] = a1;
  uint64_t v22 = *(void *)(a2 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__tunnelQueue);
  sub_10001D75C((uint64_t)v26, (uint64_t)v25);
  uint64_t v4 = swift_allocObject(&unk_100078B08, 64LL, 7LL);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a2;
  sub_100026BF0(v25, v4 + 24);
  aBlock[4] = sub_10004F63C;
  void aBlock[5] = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100040708;
  aBlock[3] = &unk_100078B20;
  uint64_t v5 = _Block_copy(aBlock);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_retain(a1);
  uint64_t v11 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v11);
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, &type metadata accessor for DispatchWorkItemFlags);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = &_swiftEmptyArrayStorage;
  sub_100026A28((unint64_t *)&qword_1000813C0, v16);
  uint64_t v18 = v17;
  uint64_t v19 = sub_10000FD7C(&qword_100081100);
  sub_100029EA0((unint64_t *)&qword_1000813D0, &qword_100081100);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v19, v20, v12, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v15, v5);
  _Block_release(v5);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  swift_release();
  return sub_10000FF38(v26);
}

uint64_t sub_10004F1DC(uint64_t a1, uint64_t a2)
{
  v27[3] = type metadata accessor for LockdownTunnelConnection(0LL);
  sub_100026A28(&qword_1000813A8, type metadata accessor for LockdownTunnelConnection);
  v27[4] = v4;
  v27[0] = a1;
  uint64_t v23 = *(void *)(a2 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__tunnelQueue);
  sub_10001D75C((uint64_t)v27, (uint64_t)v26);
  uint64_t v5 = swift_allocObject(&unk_100078A90, 64LL, 7LL);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a2;
  sub_100026BF0(v26, v5 + 24);
  aBlock[4] = sub_10004F42C;
  void aBlock[5] = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100040708;
  aBlock[3] = &unk_100078AA8;
  uint64_t v6 = _Block_copy(aBlock);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_retain(a1);
  uint64_t v12 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v12);
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, &type metadata accessor for DispatchWorkItemFlags);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = &_swiftEmptyArrayStorage;
  sub_100026A28((unint64_t *)&qword_1000813C0, v17);
  uint64_t v19 = v18;
  uint64_t v20 = sub_10000FD7C(&qword_100081100);
  sub_100029EA0((unint64_t *)&qword_1000813D0, &qword_100081100);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v20, v21, v13, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v16, v6);
  _Block_release(v6);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  swift_release();
  return sub_10000FF38(v27);
}

void sub_10004F42C()
{
}

uint64_t sub_10004F43C(uint64_t a1)
{
  return sub_10004D1A8(a1, *(void *)(v1 + 16));
}

uint64_t sub_10004F480()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_10004F4A8()
{
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10004F4D4()
{
}

uint64_t sub_10004F4E0()
{
  uint64_t v3 = v2 | 7;
  unint64_t v5 = ((v4 + v1 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  sub_100026DFC();
  sub_10002A218();
  swift_release();
  return swift_deallocObject(v0, v5, v3);
}

uint64_t sub_10004F54C(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_10001DCE0() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_10004C1FC( a1,  *(void *)(v1 + 16),  v1 + v4,  *(uint64_t (**)(uint64_t))(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10004F5A4()
{
  uint64_t v3 = v1 + v2;
  uint64_t v5 = v4 | 7;
  sub_100026DFC();
  sub_10002A218();
  return swift_deallocObject(v0, v3, v5);
}

void sub_10004F5F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = sub_10004F784();
  v5(v4, a1);
  sub_100016C1C();
}

uint64_t sub_10004F640(uint64_t a1)
{
  return swift_allocError(v1, a1, 0LL, 0LL);
}

  ;
}

uint64_t sub_10004F670(uint64_t a1)
{
  return swift_allocError(v1, a1, 0LL, 0LL);
}

void sub_10004F684(uint64_t a1)
{
}

  ;
}

uint64_t sub_10004F6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 136, v4, v5, a4);
}

uint64_t sub_10004F6C4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  return Error<>.init(_:_:)(v4, a1, (a3 - 32) | 0x8000000000000000LL, v3, a2);
}

void sub_10004F6E0()
{
}

uint64_t sub_10004F6F8()
{
  return v0;
}

uint64_t sub_10004F70C()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_10004F718()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_10004F724()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_10004F730()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_10004F740(uint64_t a1)
{
  return sub_10001D9C8(a1, 1LL, v1);
}

uint64_t sub_10004F75C()
{
  return swift_storeEnumTagMultiPayload(v1, v0, 1LL);
}

  ;
}

void *sub_10004F778()
{
  return sub_10000FF14(v0, *(void *)(v1 + 64));
}

uint64_t sub_10004F784()
{
  return v0;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_10004F7C4(uint64_t a1, uint64_t a2)
{
  return sub_10001D930(a1, a2, 1LL, v2);
}

uint64_t sub_10004F7D0()
{
  return static OS_os_log.default.getter();
}

void sub_10004F7D8(uint64_t a1, uint64_t a2)
{
}

  ;
}

  ;
}

void sub_10004F800( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

uint64_t sub_10004F80C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Error<>.init(_:_:)(a1, a2, a3, v5, a5);
}

  ;
}

uint64_t sub_10004F828(uint64_t a1)
{
  if ((a1 & 0xC000000000000001LL) == 0) {
    return *(void *)(a1 + 16);
  }
  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  return __CocoaSet.count.getter(a1);
}

void sub_10004F848()
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v0 + 80);
  sub_10000FFDC();
  sub_1000572C8();
  if (v1)
  {
    uint64_t v7 = sub_100012464();
    os_log_type_t v8 = static os_log_type_t.error.getter(v7);
    uint64_t v9 = (os_log_s *)qword_1000845F0;
    if (sub_100026D80(v8))
    {
      sub_100012474();
      sub_100012474();
      sub_1000122E0(12LL);
      uint64_t v32 = sub_100056EE0();
      sub_100057018(4.8149e-34);
      uint64_t v10 = sub_10000FD7C(&qword_100081A10);
      uint64_t v11 = sub_100057134(v10);
      sub_1000571B0(v11, v12);
      sub_100056F70(v13);
      sub_10001DDA4();
      sub_10001243C();
      sub_10001243C();
      sub_10004843C( (void *)&_mh_execute_header,  v9,  (os_log_type_t)v5,  "Error encountered validating resolved peer for newly configured connection: %s");
      sub_100056E90();
      sub_10001001C(v32);
      sub_10001001C((uint64_t)v4);
    }

    sub_10001243C();
    goto LABEL_26;
  }

  uint64_t v14 = v6;
  sub_100012464();
  if (sub_100057110())
  {
    sub_1000574F4();
    sub_1000571F4();
  }

  if (!sub_10005723C())
  {
    sub_1000571DC();
    if (!(!v16 & v15)) {
      goto LABEL_17;
    }
    goto LABEL_22;
  }

  sub_1000574D4();
  sub_100057214();
  sub_1000571DC();
  if (!v16 & v15)
  {
    sub_1000571D0();
    if (!(!v16 & v15))
    {
LABEL_17:
      uint64_t v28 = sub_100056FB0();
      goto LABEL_18;
    }

void sub_10004FAD4()
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v0 + 136);
  sub_10000FFDC();
  sub_1000572C8();
  if (v1)
  {
    uint64_t v7 = sub_100012464();
    os_log_type_t v8 = static os_log_type_t.error.getter(v7);
    uint64_t v9 = (os_log_s *)qword_1000845F0;
    if (sub_100026D80(v8))
    {
      sub_100012474();
      sub_100012474();
      sub_1000122E0(12LL);
      uint64_t v32 = sub_100056EE0();
      sub_100057018(4.8149e-34);
      uint64_t v10 = sub_10000FD7C(&qword_100081A10);
      uint64_t v11 = sub_100057134(v10);
      sub_1000571B0(v11, v12);
      sub_100056F70(v13);
      sub_10001DDA4();
      sub_10001243C();
      sub_10001243C();
      sub_10004843C( (void *)&_mh_execute_header,  v9,  (os_log_type_t)v5,  "Error encountered validating resolved peer for newly configured connection: %s");
      sub_100056E90();
      sub_10001001C(v32);
      sub_10001001C((uint64_t)v4);
    }

    sub_10001243C();
    goto LABEL_26;
  }

  uint64_t v14 = v6;
  sub_100012464();
  if (sub_100057110())
  {
    sub_1000574F4();
    sub_1000571F4();
  }

  if (!sub_10005723C())
  {
    sub_1000571DC();
    if (!(!v16 & v15)) {
      goto LABEL_17;
    }
    goto LABEL_22;
  }

  sub_1000574D4();
  sub_100057214();
  sub_1000571DC();
  if (!v16 & v15)
  {
    sub_1000571D0();
    if (!(!v16 & v15))
    {
LABEL_17:
      uint64_t v28 = sub_100056FB0();
      goto LABEL_18;
    }

void sub_10004FD60()
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v0 + 104);
  sub_10000FFDC();
  sub_1000572C8();
  if (v1)
  {
    uint64_t v7 = sub_100012464();
    os_log_type_t v8 = static os_log_type_t.error.getter(v7);
    uint64_t v9 = (os_log_s *)qword_1000845F0;
    if (sub_100026D80(v8))
    {
      sub_100012474();
      sub_100012474();
      sub_1000122E0(12LL);
      uint64_t v32 = sub_100056EE0();
      sub_100057018(4.8149e-34);
      uint64_t v10 = sub_10000FD7C(&qword_100081A10);
      uint64_t v11 = sub_100057134(v10);
      sub_1000571B0(v11, v12);
      sub_100056F70(v13);
      sub_10001DDA4();
      sub_10001243C();
      sub_10001243C();
      sub_10004843C( (void *)&_mh_execute_header,  v9,  (os_log_type_t)v5,  "Error encountered validating resolved peer for newly configured connection: %s");
      sub_100056E90();
      sub_10001001C(v32);
      sub_10001001C((uint64_t)v4);
    }

    sub_10001243C();
    goto LABEL_26;
  }

  uint64_t v14 = v6;
  sub_100012464();
  if (sub_100057110())
  {
    sub_1000574F4();
    sub_1000571F4();
  }

  if (!sub_10005723C())
  {
    sub_1000571DC();
    if (!(!v16 & v15)) {
      goto LABEL_17;
    }
    goto LABEL_22;
  }

  sub_1000574D4();
  sub_100057214();
  sub_1000571DC();
  if (!v16 & v15)
  {
    sub_1000571D0();
    if (!(!v16 & v15))
    {
LABEL_17:
      uint64_t v28 = sub_100056FB0();
      goto LABEL_18;
    }

uint64_t sub_10004FFEC(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 184);
  swift_retain(v3);
  sub_1000189C8();
  uint64_t v5 = v4;
  swift_release();
  id v6 = [v5 publicKey];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;
  }

  else
  {
    uint64_t v8 = 0LL;
    unint64_t v10 = 0xF000000000000000LL;
  }

  id v11 = [a1 publicKey];
  if (!v11)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v13 = 0LL;
      unint64_t v15 = 0xF000000000000000LL;
      goto LABEL_11;
    }

LABEL_16:
    swift_retain(v3);
    sub_10001C9DC((unint64_t)a1);
    swift_release();

    return 1LL;
  }

  uint64_t v12 = v11;
  uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v15 = v14;

  if (v10 >> 60 == 15)
  {
    if (v15 >> 60 == 15) {
      goto LABEL_16;
    }
    goto LABEL_11;
  }

  if (v15 >> 60 != 15)
  {
    sub_1000155D4(v8, v10);
    char v29 = static Data.== infix(_:_:)(v8, v10, v13, v15);
    sub_100015D58(v13, v15);
    sub_100015D58(v8, v10);
    uint64_t v16 = sub_100015D58(v8, v10);
    if ((v29 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_16;
  }

    sub_10002045C();
    return 0LL;
  }

  if (v2 < 0) {
    uint64_t v3 = *v0;
  }
  else {
    uint64_t v3 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_100020424();
  uint64_t v4 = sub_100026D98();
  uint64_t v5 = __CocoaSet.contains(_:)(v4, v3);
  sub_100026E50();
  if ((v5 & 1) == 0) {
    goto LABEL_16;
  }
  id v6 = sub_1000575DC();
  uint64_t v8 = sub_1000545A0(v6, v7);
  unint64_t v9 = v2;
LABEL_15:
  swift_bridgeObjectRelease(v9);
  return v8;
}

        uint64_t v132 = (void (*)(uint64_t))v58[16];
        uint64_t v133 = v193;
        id v134 = v180;
        if (v132)
        {
          id v135 = v58[17];
          sub_100026A28( (unint64_t *)&unk_1000813E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
          uint64_t v137 = v136;
          swift_retain(v135);
          uint64_t v138 = v185;
          uint64_t v139 = v186;
          static Error<>.networkingError.getter(v186, v137);
          sub_100026A28( (unint64_t *)&unk_1000819E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
          unint64_t v141 = sub_100016B08(v139, v140);
          Error<>.init(_:_:)(v138, 0xD00000000000003FLL, 0x800000010006B460LL, v139, v137);
          id v142 = (uint64_t)v191;
          *v191 = v141;
          swift_storeEnumTagMultiPayload(v142, v190, 1LL);
          v132(v142);
          os_log_t v143 = sub_100031B6C();
          sub_10002FBF0(v143, v144);
          sub_100026B84(v142, (uint64_t *)&unk_1000820D8);
          uint64_t v145 = v58[16];
        }

        else
        {
          uint64_t v145 = 0LL;
        }

        uint64_t v146 = v58[17];
        v58[16] = 0LL;
        v58[17] = 0LL;
        sub_10002FBF0(v145, v146);
        sub_10005FA4C();
        (*(void (**)(uint64_t *, uint64_t))(v194 + 8))(v133, v195);
        (*(void (**)(char *, uint64_t))(v196 + 8))(v134, v197);
LABEL_25:
        sub_10000FF80();
        return;
      }
    }

    else
    {
      uint64_t v36 = sub_1000155D4(v6, v4);
      uint64_t v37 = CertificateUtilities.RawTLSPublicKeyInfo.publicKeyDERData.getter(v36);
      uint64_t v39 = v38;
      uint64_t v40 = CertificateUtilities.RawTLSPublicKeyInfo.identity.getter();
      uint64_t v41 = v193;
      *v193 = v6;
      v41[1] = v4;
      v41[2] = v37;
      v41[3] = v39;
      uint64_t v41[4] = v40;
      uint64_t v42 = sub_10005F940(v40, enum case for NetworkParamsType.quic(_:));
      uint64_t v43 = UUID.uuidString.getter(v42);
      uint64_t v45 = v44;
      uint64_t v46 = sub_10005F930(v43, enum case for BonjourService.udpTunnel(_:));
      uint64_t v47 = BonjourService.rawValue.getter(v46);
      uint64_t v49 = v48;
      sub_10005F98C();
      uint64_t v50 = String.utf8CString.getter(v43, v45);
      sub_10001DDA4();
      uint64_t v51 = String.utf8CString.getter(v47, v49);
      swift_bridgeObjectRelease(v49);
      bonjour_service = nw_advertise_descriptor_create_bonjour_service( (const char *)(v50 + 32),  (const char *)(v51 + 32),  0LL);
      sub_100010008();
      uint64_t v53 = sub_100012464();
      if (!bonjour_service)
      {
        uint64_t v54 = static os_log_type_t.error.getter(v53);
        uint64_t v55 = (os_log_s *)qword_1000845F0;
        uint64_t v56 = v54;
        id v57 = os_log_type_enabled((os_log_t)qword_1000845F0, v54);
        uint64_t v58 = v198;
        if (v57)
        {
          os_log_type_t v59 = (uint64_t)v192;
          sub_100026C50((uint64_t)v192);
          uint64_t v60 = (uint8_t *)sub_1000122E0(12LL);
          uint64_t v61 = sub_1000122E0(32LL);
          v200 = (void **)v61;
          *(_DWORD *)uint64_t v60 = 136446210;
          uint64_t v62 = UUID.uuidString.getter(v61);
          uint64_t v64 = v63;
          sub_10005F9FC(v62, v63);
          v205 = v65;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v205, v206, v60 + 4, v60 + 12);
          sub_100026CA4(v59);
          swift_bridgeObjectRelease(v64);
          sub_100016D10( (void *)&_mh_execute_header,  v55,  v56,  "%{public}s: Unable to create network listener service for Tunnel connection",  v60);
          sub_100012450(v61);
          sub_10001001C(v61);
          uint64_t v66 = (uint64_t)v60;
LABEL_15:
          sub_10001001C(v66);
          goto LABEL_16;
        }

        goto LABEL_16;
      }
    }

    uint64_t v80 = v189 & 1;
    uint64_t v81 = sub_100059D0C((uint64_t)v41, v187 & 1, v189 & 1);
    id v82 = (nw_parameters *)NWParameters.nw.getter(v81);
    sub_100012464();
    uint64_t v83 = nw_listener_create(v82);
    swift_unknownObjectRelease(v82);
    uint64_t v84 = (uint64_t)v198;
    if (v83)
    {
      uint64_t v85 = v178 != 32;
      uint64_t v86 = type metadata accessor for NWObjcListener();
      sub_100016BCC(v86, 41LL);
      uint64_t v87 = sub_100031D68((uint64_t)v83, v85);
      v202 = (void *)v86;
      v203 = (uint64_t (*)())&off_100077880;
      v200 = (void **)v87;
      sub_100016B48(v84, (uint64_t)&v205, 33LL);
      v190 = (uint64_t)v83;
      swift_unknownObjectRetain(v83);
      sub_100020454();
      sub_10005F5F8((uint64_t)&v200, v84, &qword_1000837D0);
      swift_endAccess(&v205);
      uint64_t v88 = v199;
      OS_dispatch_queue.assertOnQueueHierarchy()();
      uint64_t v89 = *(nw_listener **)(v87 + 32);
      v191 = bonjour_service;
      nw_listener_set_advertise_descriptor(v89, bonjour_service);
      uint64_t v90 = sub_100016BCC((uint64_t)&unk_100078F10, 24LL);
      uint64_t v91 = (uint64_t)v192;
      sub_10005FA04(v90 + 16);
      uint64_t v92 = sub_100016BCC((uint64_t)&unk_100078F38, 25LL);
      *(void *)(v92 + swift_weakDestroy(v0 + 16) = v90;
      *(_BYTE *)(v92 + 24) = v80;
      swift_retain(v90);
      sub_100031D7C((uint64_t)v88, sub_10005F290, v92);
      swift_release();
      swift_release();
      uint64_t v93 = sub_100016BCC((uint64_t)&unk_100078F10, 24LL);
      sub_10005FA04(v93 + 16);
      uint64_t v94 = v196;
      uint64_t v95 = v197;
      os_log_type_t v96 = v184;
      (*(void (**)(char *, char *, uint64_t))(v196 + 16))(v184, v180, v197);
      uint64_t v97 = *(unsigned __int8 *)(v94 + 80);
      uint64_t v98 = (v97 + 32) & ~v97;
      uint64_t v99 = swift_allocObject(&unk_100078F60, v98 + v24, v97 | 7);
      *(void *)(v99 + swift_weakDestroy(v0 + 16) = v93;
      *(void *)(v99 + 24) = v87;
      v179((char *)(v99 + v98), v96, v95);
      sub_100020454();
      swift_retain(v93);
      uint64_t v189 = v87;
      sub_100031ED8(v88, (uint64_t)sub_10005F304, v99);
      sub_100016BD4();
      uint64_t v100 = sub_100010008();
      uint64_t v101 = static os_log_type_t.default.getter(v100);
      uint64_t v102 = (os_log_s *)powerLog.getter();
      if (os_log_type_enabled(v102, v101))
      {
        uint64_t v103 = v181;
        swift_bridgeObjectRetain_n(v181, 2LL);
        sub_100026C50(v91);
        uint64_t v95 = sub_1000122E0(22LL);
        uint64_t v104 = sub_1000122E0(64LL);
        v205 = (void *)v104;
        *(_DWORD *)uint64_t v95 = 136446466;
        uint64_t v105 = UUID.uuidString.getter(v104);
        sub_100045370(v105, v106, (uint64_t *)&v205);
        v200 = v107;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, v201, v95 + 4, v95 + 12);
        sub_100026CA4(v91);
        sub_10001DC58();
        *(_WORD *)(v95 + 12) = 2082;
        uint64_t v108 = 0LL;
        if (v103)
        {
          uint64_t v109 = type metadata accessor for PeerConnectionInfo(0LL);
          uint64_t v108 = Array.description.getter(v103, v109);
        }

        else
        {
          uint64_t v110 = 0LL;
        }

        v200 = (void **)v108;
        v201[0] = v110;
        id v148 = sub_10000FD7C(&qword_1000815A0);
        uint64_t v149 = String.init<A>(describing:)(&v200, v148);
        sub_100045370(v149, v150, (uint64_t *)&v205);
        v200 = v151;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, v201, v95 + 14, v95 + 22);
        swift_bridgeObjectRelease_n(v103, 2LL);
        sub_10001DDA4();
        _os_log_impl( (void *)&_mh_execute_header,  v102,  v101,  "%{public}s: Starting a tunnel listener due to a request from :%{public}s",  (uint8_t *)v95,  0x16u);
        swift_arrayDestroy(v104, 2LL);
        sub_10001001C(v104);
        sub_10001001C(v95);
      }

      uint64_t v152 = sub_100016BCC((uint64_t)&unk_100078F10, 24LL);
      sub_10005FA04(v152 + 16);
      v203 = sub_10005F340;
      v204 = v152;
      v200 = _NSConcreteStackBlock;
      v201[0] = 1107296256LL;
      v201[1] = sub_100040708;
      v202 = &unk_100078F78;
      uint64_t v153 = _Block_copy(&v200);
      uint64_t v154 = sub_100016C60();
      sub_100026C0C();
      __chkstk_darwin(v155, v156);
      sub_10001DF18();
      v205 = &_swiftEmptyArrayStorage;
      sub_100026A28((unint64_t *)&qword_1000813C0, v157);
      uint64_t v159 = v158;
      swift_retain(v152);
      uint64_t v160 = sub_10003C188();
      sub_100045D28((unint64_t *)&qword_1000813D0, &qword_100081100);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v205, v160, v161, v154, v159);
      uint64_t v162 = type metadata accessor for DispatchWorkItem(0LL);
      sub_100031CC0(v162);
      id v163 = DispatchWorkItem.init(flags:block:)(v95, v153);
      sub_100010008();
      sub_100012464();
      v198[12] = v163;
      swift_retain(v163);
      sub_100012464();
      OS_dispatch_queue.assertOnQueueHierarchy()();
      uint64_t v164 = type metadata accessor for DispatchTime(0LL);
      v198 = &v178;
      sub_10001241C();
      uint64_t v167 = __chkstk_darwin(v165, v166);
      uint64_t v169 = (char *)&v178 - ((v168 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      v192 = &v178;
      char v171 = __chkstk_darwin(v167, v170);
      uint64_t v173 = (char *)&v178 - v172;
      static DispatchTime.now()(v171);
      int v174 = type metadata accessor for DispatchTimeInterval(0LL);
      os_log_t v175 = *(void *)(v174 - 8);
      __chkstk_darwin(v174, v176);
      sub_1000203EC();
      qword_100081100 = 15LL;
      (*(void (**)(uint64_t *, void, uint64_t))(v175 + 104))( &qword_100081100,  enum case for DispatchTimeInterval.seconds(_:),  v174);
      + infix(_:_:)(v173, &qword_100081100);
      (*(void (**)(uint64_t *, uint64_t))(v175 + 8))(&qword_100081100, v174);
      uint64_t v177 = (void (*)(char *, uint64_t))v179;
      ((void (*)(char *, uint64_t))v179)(v173, v164);
      OS_dispatch_queue.asyncAfter(deadline:execute:)(v169, v163);
      swift_unknownObjectRelease(v191);
      swift_unknownObjectRelease(v190);
      swift_release();
      sub_100016BD4();
      v177(v169, v164);
      (*(void (**)(uint64_t *, uint64_t))(v194 + 8))(v193, v195);
      (*(void (**)(char *, uint64_t))(v196 + 8))(v180, v197);
    }

    else
    {
      sub_100026A28( (unint64_t *)&unk_1000813E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
      uint64_t v112 = v111;
      uint64_t v113 = v185;
      uint64_t v114 = v186;
      static Error<>.networkingError.getter(v186, v111);
      uint64_t v115 = v183;
      Error<>.init(_:_:)(v113, 0xD000000000000020LL, 0x800000010006B4A0LL, v114, v112);
      uint64_t v116 = *(void (**)(char *))(v84 + 128);
      if (v116)
      {
        sub_100026A28( (unint64_t *)&unk_1000819E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
        sub_100016B08(v114, v117);
        uint64_t v118 = v182;
        (*(void (**)(uint64_t, char *, uint64_t))(v182 + 16))(v119, v115, v114);
        sub_10005F8E0();
        sub_10000FFDC();
        v116(v115);
        sub_10005F9E4((uint64_t)v116);
        uint64_t v120 = (uint64_t)v115;
        uint64_t v115 = v183;
        sub_100026B84(v120, (uint64_t *)&unk_1000820D8);
        uint64_t v121 = *(void *)(v84 + 128);
      }

      else
      {
        uint64_t v121 = 0LL;
        uint64_t v118 = v182;
      }

      uint64_t v147 = *(void *)(v84 + 136);
      *(void *)(v84 + 128) = 0LL;
      *(void *)(v84 + 136) = 0LL;
      sub_10002FBF0(v121, v147);
      sub_10005FA4C();
      swift_unknownObjectRelease(bonjour_service);
      (*(void (**)(char *, uint64_t))(v118 + 8))(v115, v114);
      (*(void (**)(uint64_t *, uint64_t))(v194 + 8))(v41, v195);
      (*(void (**)(char *, uint64_t))(v196 + 8))(v180, v197);
    }

    goto LABEL_25;
  }

  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x800000010006B500LL,  "remotepairingdeviced/DeviceTunnel.swift",  39LL,  2LL,  116LL,  0);
  __break(1u);
}

LABEL_11:
  sub_100015D58(v8, v10);
  uint64_t v16 = sub_100015D58(v13, v15);
LABEL_12:
  os_log_type_t v17 = static os_log_type_t.default.getter(v16);
  uint64_t v18 = (os_log_s *)qword_1000845F0;
  if (os_log_type_enabled((os_log_t)qword_1000845F0, v17))
  {
    id v19 = a1;
    uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    v37[0] = v21;
    *(_DWORD *)uint64_t v20 = 136315138;
    id v22 = [v19 identifier];
    uint64_t v23 = sub_10000FD7C((uint64_t *)&unk_1000835C0);
    __chkstk_darwin(v23, v24);
    uint64_t v26 = (char *)&v35 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v22)
    {
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v22);

      uint64_t v27 = type metadata accessor for UUID(0LL);
      uint64_t v28 = 0LL;
    }

    else
    {
      uint64_t v27 = type metadata accessor for UUID(0LL);
      uint64_t v28 = 1LL;
    }

    sub_10001D930((uint64_t)v26, v28, 1LL, v27);
    uint64_t v31 = String.init<A>(describing:)(v26, v23);
    uint64_t v33 = v32;
    sub_100045370(v31, v32, v37);
    uint64_t v36 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v20 + 4, v20 + 12);

    swift_bridgeObjectRelease(v33);
    _os_log_impl( (void *)&_mh_execute_header,  v18,  v17,  "Newly configured connection's resolved peer %s no longer exists in the keychain",  v20,  0xCu);
    swift_arrayDestroy(v21, 1LL);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  return 0LL;
}

void sub_10005047C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  sub_100010000();
  id v4 = a2;
  v3();
  sub_100010008();
}

uint64_t sub_1000504D0(uint64_t a1)
{
  os_log_type_t v2 = static os_log_type_t.default.getter(a1);
  uint64_t v3 = (os_log_s *)qword_1000845F0;
  os_log_type_t v4 = v2;
  uint64_t result = os_log_type_enabled((os_log_t)qword_1000845F0, v2);
  if ((_DWORD)result)
  {
    swift_retain(v1);
    id v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)id v6 = 134217984;
    swift_beginAccess(v1 + 24, v11, 0LL, 0LL);
    uint64_t v7 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain(v7);
    uint64_t v9 = sub_10004F828(v8);
    swift_bridgeObjectRelease(v7);
    uint64_t v10 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, v11, v6 + 4, v6 + 12);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "RSD Peers updated. Total count: %ld", v6, 0xCu);
    return swift_slowDealloc(v6, -1LL, -1LL);
  }

  return result;
}

double sub_1000505E0()
{
  *(void *)&double result = swift_bridgeObjectRetain(*(void *)(v0 + 24)).n128_u64[0];
  return result;
}

void sub_10005060C()
{
  uint64_t v2 = v0;
  os_log_type_t v4 = v3;
  uint64_t v5 = type metadata accessor for ControlChannelConnection.Options(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for ControlChannelConnection.Options.Device(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  sub_100026C8C();
  if ((*(_BYTE *)(v2 + 176) & 1) != 0)
  {
    uint64_t v14 = static os_log_type_t.error.getter(v13);
    uint64_t v15 = os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  qword_1000845F0,  "Rejecting remote XPC control pairing channel connection as service is shutting down",  83LL,  2LL,  &_swiftEmptyArrayStorage);
LABEL_6:
    dispatch thunk of XPCConnection.cancel()(v15);
    goto LABEL_7;
  }

  uint64_t v53 = v13;
  uint64_t v52 = v2 + 24;
  sub_10000FF98(v2 + 24, (uint64_t)&v59);
  uint64_t v16 = sub_10004B03C();
  uint64_t v17 = sub_10004F828(v16);
  uint64_t v18 = sub_10001DDA4();
  if (v17 > 49)
  {
    uint64_t v49 = static os_log_type_t.error.getter(v18);
    uint64_t v15 = os_log(_:dso:log:_:_:)( v49,  &_mh_execute_header,  qword_1000845F0,  "Rejecting remote XPC control channel as we already have max number of concurrent RSD control channels",  101LL,  2LL,  &_swiftEmptyArrayStorage);
    goto LABEL_6;
  }

  sub_100016B3C(v2 + 32, (uint64_t)v54);
  id v19 = v4;
  sub_100055860((uint64_t)v19, (uint64_t)v19);
  swift_endAccess(v54);
  uint64_t v50 = v1;
  ControlChannelConnection.Options.Device.init(allowsPairSetup:allowsPinlessPairing:allowsIncomingTunnelConnections:allowsPromptlessAutomationPairingUpgrade:allowsSharingSensitiveInfo:)( 1LL,  1LL,  1LL,  1LL,  1LL);
  uint64_t v20 = type metadata accessor for RemoteXPCControlChannelTransport(0LL);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  uint64_t v21 = sub_100020434();
  uint64_t v22 = RemoteXPCControlChannelTransport.init(xpcConnection:to:)( v21,  &protocol witness table for RemoteXPCPeerConnection,  0LL);
  uint64_t v55 = (void *)v20;
  uint64_t v56 = (uint64_t (*)(uint64_t))&protocol witness table for RemoteXPCControlChannelTransport;
  v54[0] = v22;
  uint64_t v23 = v22;
  uint64_t v24 = *(void **)(v2 + 40);
  uint64_t v51 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v9, v1, v53);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))( v9,  enum case for ControlChannelConnection.Options.device(_:),  v5);
  uint64_t v25 = *(void *)(v2 + 184);
  v58[3] = type metadata accessor for SystemKeychainPairingManager();
  sub_10003186C( &qword_100080F98,  (uint64_t (*)(uint64_t))type metadata accessor for SystemKeychainPairingManager);
  v58[4] = v26;
  v58[0] = v25;
  uint64_t v27 = sub_10000FF78();
  uint64_t v28 = v23;
  swift_retain(v23);
  id v29 = v24;
  uint64_t v30 = sub_10000FFDC();
  uint64_t v31 = static ControlChannelConnection.defaultMaxReconnectionAttempts.getter(v30);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  uint64_t v32 = ControlChannelConnection.init(transport:queue:options:maxReconnectionAttempts:pairingDataStorageProvider:peerWireProtocolVersion:)( v54,  v29,  v9,  v31,  v58,  0LL);
  uint64_t v33 = *(void *)(v2 + 168);
  uint64_t v55 = (void *)type metadata accessor for MetadataService(0LL);
  sub_10003186C(&qword_100082880, type metadata accessor for MetadataService);
  uint64_t v56 = v34;
  v54[0] = v33;
  sub_10000FFDC();
  dispatch thunk of ControlChannelConnection.customDeviceMetadataProvider.setter(v54);
  uint64_t v35 = sub_10000FF6C((uint64_t)&unk_100078C00);
  sub_100039E10(v35);
  uint64_t v36 = sub_10000FF6C((uint64_t)&unk_100078C50);
  swift_weakInit(v36 + 16, v28);
  uint64_t v37 = (void *)sub_100016BCC((uint64_t)&unk_100078C78, 40LL);
  uint64_t v37[2] = v19;
  void v37[3] = v35;
  v37[4] = v36;
  uint64_t v56 = sub_1000558FC;
  id v57 = v37;
  v54[0] = _NSConcreteStackBlock;
  v54[1] = 1107296256LL;
  void v54[2] = sub_100036F04;
  uint64_t v55 = &unk_100078C90;
  uint64_t v38 = _Block_copy(v54);
  id v39 = v19;
  sub_100020470();
  remote_device_set_disconnected_callback(v39, v29, v38);
  _Block_release(v38);
  sub_10002697C(v2 + 48, (uint64_t)v54);
  dispatch thunk of ControlChannelConnection.userInteractionProvider.setter(v54);
  sub_10002697C(v2 + 88, (uint64_t)v54);
  dispatch thunk of ControlChannelConnection.tunnelListenerCreator.setter(v54);
  sub_100016B3C(v52, (uint64_t)v54);
  sub_10000FFC4();
  sub_100052210();
  swift_endAccess(v54);
  uint64_t v40 = sub_100012464();
  sub_1000504D0(v40);
  uint64_t v41 = sub_10000FF6C((uint64_t)&unk_100078C00);
  sub_100039E10(v41);
  uint64_t v42 = sub_10000FF6C((uint64_t)&unk_100078CC8);
  sub_100039EE8(v42);
  uint64_t v43 = sub_10000FF6C((uint64_t)&unk_100078CF0);
  swift_unknownObjectWeakInit(v43 + 16, v39);
  uint64_t v44 = (void *)sub_100016BCC((uint64_t)&unk_100078D18, 40LL);
  v44[2] = v41;
  v44[3] = v42;
  v44[4] = v43;
  swift_retain(v41);
  swift_retain(v42);
  sub_100020434();
  dispatch thunk of ControlChannelConnection.invalidationHandler.setter(sub_10005595C, v44);
  swift_release();
  sub_100020470();
  swift_release();
  uint64_t v45 = sub_10000FF6C((uint64_t)&unk_100078C00);
  sub_100039E10(v45);
  uint64_t v46 = sub_10000FF6C((uint64_t)&unk_100078CC8);
  sub_100039EE8(v46);
  uint64_t v47 = sub_100016BCC((uint64_t)&unk_100078D40, 32LL);
  *(void *)(v47 + swift_weakDestroy(v0 + 16) = v46;
  *(void *)(v47 + 24) = v45;
  swift_retain(v46);
  sub_100020434();
  dispatch thunk of ControlChannelConnection._connectionSetupCompleteHandler.setter(sub_100055990, v47);
  swift_release();
  swift_release();
  uint64_t v48 = *sub_10000FF14((void *)(v2 + 128), *(void *)(v2 + 152));
  sub_10000FFC4();
  sub_100046574(0xD00000000000002ALL, 0x800000010006B2C0LL, v48, v32);
  sub_100010008();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v53);
LABEL_7:
  sub_10000FF80();
}

uint64_t sub_100050B50(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3 + 16;
  uint64_t v6 = a4 + 16;
  remote_device_cancel(a2);
  swift_beginAccess(v5, v32, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    swift_beginAccess(Strong + 32, v31, 33LL, 0LL);
    uint64_t v8 = (void *)sub_100055538((uint64_t)a2);
    swift_endAccess(v31);
    swift_release();
  }

  swift_beginAccess(v6, v31, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v6);
  if (result)
  {
    uint64_t v10 = result;
    os_log_type_t v11 = static os_log_type_t.default.getter(result);
    uint64_t v12 = (os_log_s *)qword_1000845F0;
    os_log_type_t v13 = v11;
    uint64_t v14 = os_log_type_enabled((os_log_t)qword_1000845F0, v11);
    if ((_DWORD)v14)
    {
      id v15 = a2;
      swift_retain_n(v10, 2LL);
      id v16 = v15;
      uint64_t v17 = swift_slowAlloc(22LL, -1LL);
      uint64_t v18 = swift_slowAlloc(64LL, -1LL);
      uint64_t v30 = v18;
      *(_DWORD *)uint64_t v17 = 136446466;
      uint64_t name = remote_device_get_name(v16);
      uint64_t v20 = String.init(cString:)(name);
      uint64_t v22 = v21;
      sub_100045370(v20, v21, &v30);
      uint64_t v29 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v17 + 4, v17 + 12);

      uint64_t v24 = swift_bridgeObjectRelease(v22);
      *(_WORD *)(v17 + 12) = 2082;
      uint64_t v25 = dispatch thunk of RemoteXPCControlChannelTransport.id.getter(v24);
      uint64_t v27 = v26;
      sub_100045370(v25, v26, &v30);
      uint64_t v29 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v17 + 14, v17 + 22);
      swift_release_n(v10, 2LL);
      swift_bridgeObjectRelease(v27);
      _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "RSD device %{public}s associated with control channel %{public}s became disconnected. Invalidating control channel",  (uint8_t *)v17,  0x16u);
      swift_arrayDestroy(v18, 2LL);
      swift_slowDealloc(v18, -1LL, -1LL);
      uint64_t v14 = swift_slowDealloc(v17, -1LL, -1LL);
    }

    dispatch thunk of RemoteXPCControlChannelTransport.invalidate()(v14);
    return swift_release();
  }

  return result;
}

uint64_t sub_100050D8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v16, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v5);
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = a2 + 16;
    swift_beginAccess(v8, v15, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v8);
    if (Strong)
    {
      uint64_t v10 = Strong;
      swift_beginAccess(v7 + 24, v14, 33LL, 0LL);
      sub_100053FB8(v10);
      swift_endAccess(v14);
      uint64_t v11 = swift_release();
      sub_1000504D0(v11);
      swift_beginAccess(a3 + 16, v14, 0LL, 0LL);
      uint64_t v12 = swift_unknownObjectWeakLoadStrong(a3 + 16);
      if (v12)
      {
        os_log_type_t v13 = (void *)v12;
        remote_device_cancel(v12);
      }

      swift_release();
    }

    return swift_release();
  }

  return result;
}

uint64_t sub_100050E90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ControlChannelConnection.InvalidationReason(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  a1 += 16LL;
  swift_beginAccess(a1, v15, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1);
  if (result)
  {
    uint64_t v10 = a2 + 16;
    swift_beginAccess(v10, v14, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v10);
    if (Strong)
    {
      uint64_t v12 = (void *)dispatch thunk of ControlChannelConnection.resolvedIdentity.getter(Strong);
      if (v12)
      {
        os_log_type_t v13 = v12;
        if ((sub_10004FFEC(v12) & 1) == 0)
        {
          (*(void (**)(_BYTE *, void, uint64_t))(v5 + 104))( v8,  enum case for ControlChannelConnection.InvalidationReason.peerUnpaired(_:),  v4);
          dispatch thunk of ControlChannelConnection.invalidate(for:)(v8);

          swift_release();
          swift_release();
          return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
        }
      }

      swift_release();
    }

    return swift_release();
  }

  return result;
}

void sub_100050FD8()
{
  uint64_t v1 = static RemoteServiceNames.tunnelService.getter();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = sub_10000FF6C((uint64_t)&unk_100078C00);
  swift_weakInit(v5 + 16, v0);
  void v8[4] = sub_1000521F0;
  void v8[5] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256LL;
  v8[2] = sub_10005047C;
  v8[3] = &unk_100078C18;
  uint64_t v6 = _Block_copy(v8);
  swift_release();
  uint64_t v7 = String.utf8CString.getter(v1, v3);
  sub_10002045C();
  remote_service_listen_with_device(v7 + 32, v4, v6);
  swift_release();
  _Block_release(v6);
}

uint64_t sub_1000510B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v15, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v5);
  if (result)
  {
    uint64_t v7 = result;
    uint64_t xpc_remote_connection_version_flags = remote_device_get_xpc_remote_connection_version_flags(a1);
    if (xpc_remote_connection_version_flags)
    {
      uint64_t v11 = xpc_remote_connection_version_flags;
      if ((xpc_remote_connection_version_flags & 0x8000000000000000LL) == 0)
      {
LABEL_6:
        uint64_t v12 = (void *)xpc_remote_connection_create_with_connected_fd(a2, *(void *)(v7 + 40), v11, 1LL);
        xpc_remote_connection_set_local_service_version(v12, __RSDControlChannelServiceVersion);
        uint64_t v13 = type metadata accessor for RemoteXPCPeerConnection(0LL);
        uint64_t v14 = static RemoteXPCConnection.unsafePeer(from:)(v12);
        swift_dynamicCastClassUnconditional(v14, v13, 0LL, 0LL, 0LL);
        swift_retain(v14);
        sub_10005060C();

        swift_release_n(v14, 2LL);
        return swift_release();
      }

      uint64_t xpc_remote_connection_version_flags = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL);
      __break(1u);
    }

    uint64_t result = _remotepairing_xpc_remote_connection_get_failsafe_version_flags( xpc_remote_connection_version_flags,  v9,  v10);
    uint64_t v11 = result;
    if (result < 0)
    {
      __break(1u);
      return result;
    }

    goto LABEL_6;
  }

  return result;
}

void sub_100051204()
{
  uint64_t v2 = type metadata accessor for ControlChannelConnection.InvalidationReason(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  sub_100026C8C();
  if ((*(_BYTE *)(v0 + 176) & 1) == 0)
  {
    *(_BYTE *)(v0 + 176) = 1;
    sub_10000FF98(v0 + 24, (uint64_t)v35);
    uint64_t v7 = *(void *)(v0 + 24);
    if ((v7 & 0xC000000000000001LL) != 0)
    {
      if (v7 < 0) {
        uint64_t v8 = *(void *)(v0 + 24);
      }
      else {
        uint64_t v8 = v7 & 0xFFFFFFFFFFFFFF8LL;
      }
      sub_100026E48();
      __CocoaSet.makeIterator()(v8);
      sub_10000FF78();
      sub_10003186C( &qword_100082090,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
      uint64_t v9 = sub_1000575DC();
      uint64_t v12 = Set.Iterator.init(_cocoa:)(v9, v10, v11);
      uint64_t v7 = v35[3];
      uint64_t v32 = v35[4];
      uint64_t v13 = v35[5];
      int64_t v14 = v35[6];
      unint64_t v15 = v35[7];
    }

    else
    {
      sub_100057404();
      uint64_t v32 = v7 + 56;
      uint64_t v13 = ~v16;
      sub_10000FFE4();
      unint64_t v15 = v17 & v18;
      uint64_t v12 = sub_100026E48();
      int64_t v14 = 0LL;
    }

    int64_t v31 = (unint64_t)(v13 + 64) >> 6;
    uint64_t v19 = enum case for ControlChannelConnection.InvalidationReason.serviceShutdown(_:);
    if (v7 < 0) {
      goto LABEL_12;
    }
    while (1)
    {
      if (v15)
      {
        uint64_t v20 = (v15 - 1) & v15;
        unint64_t v21 = __clz(__rbit64(v15)) | (v14 << 6);
        int64_t v22 = v14;
      }

      else
      {
        int64_t v27 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
          __break(1u);
          return;
        }

        if (v27 >= v31) {
          goto LABEL_32;
        }
        unint64_t v28 = *(void *)(v32 + 8 * v27);
        int64_t v22 = v14 + 1;
        if (!v28)
        {
          int64_t v22 = v14 + 2;
          if (v14 + 2 >= v31) {
            goto LABEL_32;
          }
          unint64_t v28 = *(void *)(v32 + 8 * v22);
          if (!v28)
          {
            int64_t v22 = v14 + 3;
            if (v14 + 3 >= v31) {
              goto LABEL_32;
            }
            unint64_t v28 = *(void *)(v32 + 8 * v22);
            if (!v28)
            {
              int64_t v22 = v14 + 4;
              if (v14 + 4 >= v31) {
                goto LABEL_32;
              }
              unint64_t v28 = *(void *)(v32 + 8 * v22);
              if (!v28)
              {
                int64_t v29 = v14 + 5;
                while (v29 < v31)
                {
                  unint64_t v28 = *(void *)(v32 + 8 * v29++);
                  if (v28)
                  {
                    int64_t v22 = v29 - 1;
                    goto LABEL_28;
                  }
                }

uint64_t sub_100051500(os_log_s *a1)
{
  uint64_t v2 = a1;
  os_log_type_t v3 = static os_log_type_t.default.getter(a1);
  if (os_log_type_enabled(v2, v3))
  {
    sub_10000FFDC();
    uint64_t v4 = (_DWORD *)sub_1000122E0(12LL);
    _DWORD *v4 = 134217984;
    sub_10000FF98(v1 + 24, (uint64_t)v43);
    swift_bridgeObjectRetain(*(void *)(v1 + 24));
    uint64_t v6 = sub_10004F828(v5);
    sub_100016D6C();
    uint64_t v47 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v4 + 1, v4 + 3);
    sub_100012464();
    sub_10004843C((void *)&_mh_execute_header, v2, v3, "State dump: NetworkPairingService connection count = %ld");
    sub_10001001C((uint64_t)v4);
  }

  sub_10000FF98(v1 + 24, (uint64_t)v46);
  uint64_t v7 = *(void *)(v1 + 24);
  if ((v7 & 0xC000000000000001LL) != 0)
  {
    if (v7 < 0) {
      uint64_t v8 = *(void *)(v1 + 24);
    }
    else {
      uint64_t v8 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10004B03C();
    uint64_t v9 = __CocoaSet.makeIterator()(v8);
    uint64_t v10 = sub_10000FF78();
    sub_10003186C( &qword_100082090,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
    uint64_t result = Set.Iterator.init(_cocoa:)(v9, v10, v11);
    uint64_t v7 = v47;
    uint64_t v42 = v48[0];
    uint64_t v13 = v48[1];
    int64_t v14 = v48[2];
    unint64_t v15 = v48[3];
  }

  else
  {
    sub_100057404();
    uint64_t v42 = v7 + 56;
    uint64_t v13 = ~v16;
    sub_10000FFE4();
    unint64_t v15 = v17 & v18;
    uint64_t result = sub_10004B03C();
    int64_t v14 = 0LL;
  }

  int64_t v41 = (unint64_t)(v13 + 64) >> 6;
  if (v7 < 0) {
    goto LABEL_12;
  }
  while (1)
  {
    if (v15)
    {
      uint64_t v19 = (v15 - 1) & v15;
      unint64_t v20 = __clz(__rbit64(v15)) | (v14 << 6);
      int64_t v21 = v14;
      goto LABEL_29;
    }

    int64_t v27 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v27 >= v41) {
      return sub_10000FE04(v7);
    }
    unint64_t v28 = *(void *)(v42 + 8 * v27);
    int64_t v21 = v14 + 1;
    if (!v28)
    {
      int64_t v21 = v14 + 2;
      if (v14 + 2 >= v41) {
        return sub_10000FE04(v7);
      }
      unint64_t v28 = *(void *)(v42 + 8 * v21);
      if (!v28)
      {
        int64_t v21 = v14 + 3;
        if (v14 + 3 >= v41) {
          return sub_10000FE04(v7);
        }
        unint64_t v28 = *(void *)(v42 + 8 * v21);
        if (!v28)
        {
          int64_t v21 = v14 + 4;
          if (v14 + 4 >= v41) {
            return sub_10000FE04(v7);
          }
          unint64_t v28 = *(void *)(v42 + 8 * v21);
          if (!v28)
          {
            int64_t v29 = v14 + 5;
            while (v29 < v41)
            {
              unint64_t v28 = *(void *)(v42 + 8 * v29++);
              if (v28)
              {
                int64_t v21 = v29 - 1;
                goto LABEL_28;
              }
            }

            return sub_10000FE04(v7);
          }
        }
      }
    }

uint64_t sub_100051918()
{
  sub_10000FF38((void *)(v0 + 48));
  sub_10000FF38((void *)(v0 + 88));
  sub_10000FF38((void *)(v0 + 128));
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_10005196C()
{
  return swift_deallocClassInstance(v0, 192LL, 7LL);
}

uint64_t type metadata accessor for RSDService()
{
  return objc_opt_self(&OBJC_CLASS____TtC20remotepairingdeviced10RSDService);
}

double sub_1000519AC()
{
  return sub_1000505E0();
}

void sub_1000519CC()
{
}

void sub_1000519EC()
{
}

uint64_t sub_100051A0C(os_log_s *a1)
{
  return sub_100051500(a1);
}

unint64_t sub_100051A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100057410();
  return sub_100051C28(v4, v5, v6);
}

unint64_t sub_100051A8C()
{
  Swift::Int v2 = AnyHashable._rawHashValue(seed:)(*(void *)(v0 + 40));
  return sub_100051D08(v1, v2);
}

unint64_t sub_100051AB8(uint64_t a1)
{
  uint64_t v3 = sub_100057444(v2);
  return sub_100051DCC(a1, v3);
}

unint64_t sub_100051B0C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = type metadata accessor for SystemXPCPeerConnection(0LL);
  sub_10003186C(&qword_1000819F8, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
  uint64_t v6 = dispatch thunk of Hashable._rawHashValue(seed:)(v3, v4, v5);
  return sub_100051F10(a1, v6);
}

unint64_t sub_100051B9C(uint64_t a1)
{
  uint64_t v3 = sub_100057444(v2);
  return sub_100051FF0(a1, v3);
}

unint64_t sub_100051BF8(uint64_t a1)
{
  uint64_t v3 = static Hasher._hash(seed:_:)(*(void *)(v1 + 40), a1);
  return sub_100052130(a1, v3);
}

unint64_t sub_100051C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        int64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_100051D08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_100056DC0(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10001DBE0((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

unint64_t sub_100051DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  uint64_t v18 = v2 + 64;
  uint64_t v19 = a1;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v5 = v2;
    uint64_t v17 = ~v3;
    uint64_t v6 = type metadata accessor for UUID(0LL);
    uint64_t v8 = v6;
    uint64_t v9 = *(void *)(v6 - 8);
    uint64_t v11 = *(void *)(v9 + 64);
    uint64_t v10 = *(void *)(v9 + 72);
    BOOL v12 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      __chkstk_darwin(v6, v7);
      v12((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), *(void *)(v5 + 48) + v10 * v4, v8);
      sub_100056D8C(&qword_1000820D0);
      char v14 = dispatch thunk of static Equatable.== infix(_:_:)( (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v19,  v8,  v13);
      uint64_t v6 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
      if ((v14 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v17;
    }

    while (((*(void *)(v18 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

unint64_t sub_100051F10(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = a1;
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    uint64_t v6 = v2;
    uint64_t v7 = ~v4;
    uint64_t v8 = type metadata accessor for SystemXPCPeerConnection(0LL);
    sub_10003186C( (unint64_t *)&unk_100083630,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
    uint64_t v10 = v9;
    do
    {
      uint64_t v12 = *(void *)(*(void *)(v6 + 48) + 8 * v5);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v12, &v13, v8, v10) & 1) != 0) {
        break;
      }
      unint64_t v5 = (v5 + 1) & v7;
    }

    while (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0);
  }

  return v5;
}

unint64_t sub_100051FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v19 = a1;
  uint64_t v5 = type metadata accessor for XPCEventPublisher.Token(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v11 = a2 & ~v10;
  if (((*(void *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0)
  {
    uint64_t v12 = ~v10;
    uint64_t v13 = *(void *)(v6 + 72);
    char v14 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v14(v9, *(void *)(v3 + 48) + v13 * v11, v5);
      sub_10003186C( &qword_1000835F8,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCEventPublisher.Token);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v19, v5, v15);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      if ((v16 & 1) != 0) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v12;
    }

    while (((*(void *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  }

  return v11;
}

unint64_t sub_100052130(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

uint64_t sub_1000521CC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000521F0(uint64_t a1, uint64_t a2)
{
  return sub_1000510B4(a1, a2, v2);
}

uint64_t sub_1000521F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100052208(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_100052210()
{
  if (v3)
  {
    unint64_t v15 = *(void *)(v2 + 40);
    sub_10000FF78();
    sub_10003186C( &qword_100082090,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
    sub_10002042C();
    sub_100057284();
    sub_100057090();
    if ((v16 & 1) != 0)
    {
      sub_10003186C( &qword_1000831C8,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
      while ((sub_100056FF4(v17, v18) & 1) == 0)
      {
        sub_100057268();
        if ((v19 & 1) == 0) {
          goto LABEL_11;
        }
      }

      sub_100026E50();
      sub_10001DDB4();
      sub_100057248();
    }

    else
    {
LABEL_11:
      sub_10001DDB4();
      uint64_t v20 = sub_100057514();
      uint64_t v28 = sub_100057058(v20, v21, v22, v23, v24, v25, v26, v27, v40, v43, v45, v47);
      sub_100053304(v28, v15, v1);
      sub_1000573E4(v29, v30, v31, v32, v33, v34, v35, v36, v42, v44, v46);
      uint64_t *v0 = v2;
    }

    goto LABEL_19;
  }

  if (v2 < 0) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_10002042C();
  uint64_t v5 = sub_100026D98();
  uint64_t v6 = sub_100057530(v5);
  sub_100026E50();
  if (v6)
  {
    sub_10001DDB4();
    sub_100026E50();
    sub_10000FF78();
    sub_10005716C();
    uint64_t v7 = sub_100057190((uint64_t)&type metadata for Swift.AnyObject, v40);
    sub_100057144(v7, v8, v9, v10, v11, v12, v13, v14, v41, v6, v45);
LABEL_19:
    sub_10001DCF0();
    return;
  }

  uint64_t v37 = sub_1000574C0();
  if (!__OFADD__(v37, 1LL))
  {
    sub_100052A08( v4,  v37 + 1,  &qword_1000835D0,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection,  &qword_100082090);
    sub_10005738C();
    if (!v3 & v38)
    {
      sub_100026D98();
    }

    else
    {
      uint64_t v39 = sub_100026D98();
      sub_100057508( v39,  &qword_1000835D0,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection,  &qword_100082090);
    }

    sub_1000575BC();
    sub_10005725C();
    uint64_t *v0 = v1;
    goto LABEL_19;
  }

  __break(1u);
}

uint64_t sub_1000523DC(uint64_t *a1, uint64_t a2)
{
  char v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10002042C();
    uint64_t v8 = sub_100010000();
    uint64_t v9 = sub_100057530(v8);
    sub_100010008();
    if (v9)
    {
      sub_10001DDB4();
      sub_100010008();
      uint64_t v47 = v9;
      sub_1000575F4();
      sub_10005716C();
      uint64_t v10 = sub_1000571A8((uint64_t)v46, (uint64_t)&v47, (uint64_t)&type metadata for Swift.AnyObject + 8, a2);
      sub_100057144(v10, v11, v12, v13, v14, v15, v16, v17, v43, v44, v46[0]);
      return 0LL;
    }

    uint64_t result = sub_1000574C0();
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    sub_1000527E8(v7, result + 1);
    sub_10005738C();
    if (!v36 & v35)
    {
      uint64_t v41 = v33;
      sub_100010000();
    }

    else
    {
      uint64_t v40 = v34 + 1;
      sub_100010000();
      sub_100052C24(v40);
      uint64_t v41 = v46[0];
    }

    sub_10005317C(a2, v41);
    uint64_t v42 = *v3;
    uint64_t *v3 = v41;
    swift_bridgeObjectRelease(v42);
    *a1 = a2;
  }

  else
  {
    Hasher.init(_seed:)(v46);
    uint64_t v18 = sub_1000575F4();
    sub_10003186C( &qword_1000825C8,  (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration);
    uint64_t v20 = v19;
    sub_10002042C();
    HashableByObjectIdentity.hash(into:)(v46, v18, v20);
    Swift::Int v21 = Hasher._finalize()();
    uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v23 = v21 & ~v22;
    sub_10005751C();
    if ((v24 & 1) != 0)
    {
      uint64_t v25 = sub_1000573C4();
      char v26 = sub_100057318(v25);
      sub_100020470();
      if ((v26 & 1) != 0)
      {
LABEL_12:
        sub_100010008();
        sub_10001DDB4();
        uint64_t v31 = *(void *)(*(void *)(*v3 + 48) + 8 * v23);
        *a1 = v31;
        swift_retain(v31);
        return 0LL;
      }

      uint64_t v27 = ~v22;
      while (1)
      {
        unint64_t v23 = (v23 + 1) & v27;
        sub_10005751C();
        if ((v28 & 1) == 0) {
          break;
        }
        uint64_t v29 = sub_1000573C4();
        char v30 = sub_100057318(v29);
        sub_100020470();
        if ((v30 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    sub_10001DDB4();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v46[0] = *v3;
    uint64_t *v3 = 0x8000000000000000LL;
    uint64_t v38 = sub_100010000();
    sub_1000534FC(v38, v23, isUniquelyReferenced_nonNull_native);
    uint64_t v39 = *v3;
    uint64_t *v3 = v46[0];
    swift_bridgeObjectRelease(v39);
    *a1 = a2;
  }

  return 1LL;
}

void sub_10005261C()
{
  if (v3)
  {
    unint64_t v15 = *(void *)(v2 + 40);
    sub_100026D24();
    sub_10003186C( &qword_1000819F8,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
    sub_10002042C();
    sub_100057284();
    sub_100057090();
    if ((v16 & 1) != 0)
    {
      sub_10003186C( (unint64_t *)&unk_100083630,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
      while ((sub_100056FF4(v17, v18) & 1) == 0)
      {
        sub_100057268();
        if ((v19 & 1) == 0) {
          goto LABEL_11;
        }
      }

      sub_100026E50();
      sub_10001DDB4();
      sub_100057248();
    }

    else
    {
LABEL_11:
      sub_10001DDB4();
      uint64_t v20 = sub_100057514();
      uint64_t v28 = sub_100057058(v20, v21, v22, v23, v24, v25, v26, v27, v40, v43, v45, v47);
      sub_1000536E4(v28, v15, v1);
      sub_1000573E4(v29, v30, v31, v32, v33, v34, v35, v36, v42, v44, v46);
      uint64_t *v0 = v2;
    }

    goto LABEL_19;
  }

  if (v2 < 0) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_10002042C();
  uint64_t v5 = sub_100026D98();
  uint64_t v6 = sub_100057530(v5);
  sub_100026E50();
  if (v6)
  {
    sub_10001DDB4();
    sub_100026E50();
    sub_100026D24();
    sub_10005716C();
    uint64_t v7 = sub_100057190((uint64_t)&type metadata for Swift.AnyObject, v40);
    sub_100057144(v7, v8, v9, v10, v11, v12, v13, v14, v41, v6, v45);
LABEL_19:
    sub_10001DCF0();
    return;
  }

  uint64_t v37 = sub_1000574C0();
  if (!__OFADD__(v37, 1LL))
  {
    sub_100052A08( v4,  v37 + 1,  &qword_1000831D0,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection,  &qword_1000819F8);
    sub_10005738C();
    if (!v3 & v38)
    {
      sub_100026D98();
    }

    else
    {
      uint64_t v39 = sub_100026D98();
      sub_100057508( v39,  &qword_1000831D0,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection,  &qword_1000819F8);
    }

    sub_1000575BC();
    sub_10005725C();
    uint64_t *v0 = v1;
    goto LABEL_19;
  }

  __break(1u);
}

Swift::Int sub_1000527E8(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  sub_10000FD7C(&qword_100083670);
  uint64_t v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
  uint64_t v24 = v4;
  uint64_t v5 = __CocoaSet.makeIterator()(a1);
  uint64_t v6 = __CocoaSet.Iterator.next()(v5);
  if (!v6)
  {
LABEL_16:
    swift_release(v5);
    return v4;
  }

  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for PairableHostsBrowseRegistration();
  while (1)
  {
    v22[0] = v7;
    swift_dynamicCast(&v23, v22, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
    uint64_t v4 = v24;
    unint64_t v9 = *(void *)(v24 + 16);
    if (*(void *)(v24 + 24) <= v9)
    {
      sub_100052C24(v9 + 1);
      uint64_t v4 = v24;
    }

    uint64_t v10 = v23;
    Hasher.init(_seed:)(v22);
    sub_10003186C( &qword_1000825C8,  (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration);
    HashableByObjectIdentity.hash(into:)(v22, v8, v11);
    Swift::Int result = Hasher._finalize()();
    uint64_t v13 = v4 + 56;
    uint64_t v14 = -1LL << *(_BYTE *)(v4 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1LL << v15) & ~*(void *)(v4 + 56 + 8 * (v15 >> 6))) == 0) {
      break;
    }
    unint64_t v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v4 + 56 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_15:
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
    *(void *)(*(void *)(v4 + 48) + 8 * v17) = v10;
    ++*(void *)(v4 + 16);
    uint64_t v7 = __CocoaSet.Iterator.next()(result);
    if (!v7) {
      goto LABEL_16;
    }
  }

  char v18 = 0;
  unint64_t v19 = (unint64_t)(63 - v14) >> 6;
  while (++v16 != v19 || (v18 & 1) == 0)
  {
    BOOL v20 = v16 == v19;
    if (v16 == v19) {
      unint64_t v16 = 0LL;
    }
    v18 |= v20;
    uint64_t v21 = *(void *)(v13 + 8 * v16);
    if (v21 != -1)
    {
      unint64_t v17 = __clz(__rbit64(~v21)) + (v16 << 6);
      goto LABEL_15;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_100052A08( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t), unint64_t *a5)
{
  if (!a2)
  {
    swift_unknownObjectRelease(a1);
    return (uint64_t)&_swiftEmptySetSingleton;
  }

  sub_10000FD7C(a3);
  uint64_t v10 = static _SetStorage.convert(_:capacity:)(a1, a2);
  uint64_t v31 = v10;
  uint64_t v28 = __CocoaSet.makeIterator()(a1);
  uint64_t v11 = __CocoaSet.Iterator.next()();
  if (!v11)
  {
LABEL_16:
    swift_release(v28);
    return v10;
  }

  uint64_t v12 = v11;
  uint64_t v13 = a4(0LL);
  while (1)
  {
    uint64_t v29 = v12;
    sub_1000571A8((uint64_t)&v30, (uint64_t)&v29, (uint64_t)&type metadata for Swift.AnyObject + 8, v13);
    uint64_t v10 = v31;
    unint64_t v14 = *(void *)(v31 + 16);
    if (*(void *)(v31 + 24) <= v14)
    {
      sub_100052F08(v14 + 1, a3, a4, a5);
      uint64_t v10 = v31;
    }

    uint64_t v15 = v30;
    uint64_t v29 = v30;
    uint64_t v16 = *(void *)(v10 + 40);
    sub_10003186C(a5, a4);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v16, v13, v17);
    uint64_t v19 = v10 + 56;
    uint64_t v20 = -1LL << *(_BYTE *)(v10 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v10 + 56 + 8 * (v21 >> 6))) == 0) {
      break;
    }
    unint64_t v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v10 + 56 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_15:
    *(void *)(v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    *(void *)(*(void *)(v10 + 48) + 8 * v23) = v15;
    ++*(void *)(v10 + 16);
    uint64_t v12 = __CocoaSet.Iterator.next()();
    if (!v12) {
      goto LABEL_16;
    }
  }

  char v24 = 0;
  unint64_t v25 = (unint64_t)(63 - v20) >> 6;
  while (++v22 != v25 || (v24 & 1) == 0)
  {
    BOOL v26 = v22 == v25;
    if (v22 == v25) {
      unint64_t v22 = 0LL;
    }
    v24 |= v26;
    uint64_t v27 = *(void *)(v19 + 8 * v22);
    if (v27 != -1)
    {
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
      goto LABEL_15;
    }
  }

  __break(1u);
  return result;
}

Swift::Int sub_100052C24(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_10000FD7C(&qword_100083670);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v8 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1LL << v7);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v3 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v14 = 0LL;
    if (!v10) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
    {
      uint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * i);
      Hasher.init(_seed:)(v32);
      uint64_t v21 = type metadata accessor for PairableHostsBrowseRegistration();
      sub_10003186C( &qword_1000825C8,  (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration);
      HashableByObjectIdentity.hash(into:)(v32, v21, v22);
      Swift::Int result = Hasher._finalize()();
      uint64_t v23 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) == 0)
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v23) >> 6;
        while (++v25 != v28 || (v27 & 1) == 0)
        {
          BOOL v29 = v25 == v28;
          if (v25 == v28) {
            unint64_t v25 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v12 + 8 * v25);
          if (v30 != -1)
          {
            unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v26 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v12 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v26;
      *(void *)(*(void *)(v6 + 48) + 8 * v26) = v20;
      ++*(void *)(v6 + 16);
      if (v10) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v17 = v14 + 1;
      if (__OFADD__(v14, 1LL)) {
        goto LABEL_41;
      }
      if (v17 >= v11) {
        goto LABEL_35;
      }
      unint64_t v18 = v8[v17];
      ++v14;
      if (!v18)
      {
        int64_t v14 = v17 + 1;
        if (v17 + 1 >= v11) {
          goto LABEL_35;
        }
        unint64_t v18 = v8[v14];
        if (!v18)
        {
          int64_t v14 = v17 + 2;
          if (v17 + 2 >= v11) {
            goto LABEL_35;
          }
          unint64_t v18 = v8[v14];
          if (!v18)
          {
            int64_t v19 = v17 + 3;
            if (v19 >= v11)
            {
LABEL_35:
              swift_release(v3);
              uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
              if (v31 > 63) {
                sub_1000538DC(0LL, (unint64_t)(v31 + 63) >> 6, (void *)(v3 + 56));
              }
              else {
                *uint64_t v8 = -1LL << v31;
              }
              *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v18 = v8[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v14 = v19 + 1;
                if (__OFADD__(v19, 1LL)) {
                  goto LABEL_42;
                }
                if (v14 >= v11) {
                  goto LABEL_35;
                }
                unint64_t v18 = v8[v14];
                ++v19;
                if (v18) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v14 = v19;
          }
        }
      }

void sub_100052F08(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v7 = (void *)*v4;
  sub_10005734C(a1, a2);
  uint64_t v8 = (void *)static _SetStorage.resize(original:capacity:move:)(v7, v4, 1LL);
  if (v7[2])
  {
    sub_10005746C();
    char v38 = v7 + 7;
    sub_1000575FC();
    uint64_t v11 = v10 & v9;
    int64_t v37 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v13 = v8 + 7;
    sub_100010000();
    int64_t v14 = 0LL;
    if (!v11) {
      goto LABEL_4;
    }
LABEL_3:
    sub_100057454();
    while (1)
    {
      uint64_t v20 = v7;
      uint64_t v21 = *(void *)(v7[6] + 8 * v15);
      uint64_t v22 = v8[5];
      uint64_t v23 = a3(0LL);
      sub_10003186C(a4, a3);
      dispatch thunk of Hashable._rawHashValue(seed:)(v22, v23, v24);
      sub_10005759C();
      if (((v27 << v26) & ~v13[v25]) == 0)
      {
        sub_100057574();
        while (++v29 != v30 || (v28 & 1) == 0)
        {
          BOOL v31 = v29 == v30;
          if (v29 == v30) {
            uint64_t v29 = 0LL;
          }
          v28 |= v31;
          if (v13[v29] != -1LL)
          {
            sub_10005754C();
            goto LABEL_27;
          }
        }

        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        return;
      }

      sub_100057588();
LABEL_27:
      sub_100057538();
      *(void *)((char *)v13 + v32) |= v33;
      *(void *)(v8[6] + 8 * v34) = v21;
      ++v8[2];
      uint64_t v7 = v20;
      if (v11) {
        goto LABEL_3;
      }
LABEL_4:
      if (__OFADD__(v14, 1LL)) {
        goto LABEL_35;
      }
      if (v14 + 1 >= v37) {
        goto LABEL_29;
      }
      sub_1000575E8();
      int64_t v14 = v16;
      if (!v17)
      {
        int64_t v14 = v16 + 1;
        if (v16 + 1 >= v37) {
          goto LABEL_29;
        }
        if (!v38[v14])
        {
          int64_t v14 = v16 + 2;
          if (v16 + 2 >= v37) {
            goto LABEL_29;
          }
          if (!v38[v14])
          {
            if (v16 + 3 >= v37)
            {
LABEL_29:
              sub_100010008();
              uint64_t v6 = v4;
              sub_10005746C();
              if (v35 > 63)
              {
                sub_1000538DC(0LL, (unint64_t)(v35 + 63) >> 6, v38);
              }

              else
              {
                sub_100057404();
                *char v38 = v36;
              }

              v7[2] = 0LL;
              break;
            }

            sub_1000575E8();
            if (!v19)
            {
              while (1)
              {
                int64_t v14 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_36;
                }
                if (v14 >= v37) {
                  goto LABEL_29;
                }
                ++v18;
                if (v38[v14]) {
                  goto LABEL_17;
                }
              }
            }

            int64_t v14 = v18;
          }
        }
      }

unint64_t sub_10005317C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PairableHostsBrowseRegistration();
  sub_10003186C( &qword_1000825C8,  (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration);
  HashableByObjectIdentity.hash(into:)(v8, v4, v5);
  Swift::Int v6 = Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v6 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_10005324C()
{
  uint64_t v5 = *(void *)(v4 + 40);
  uint64_t v7 = v6(0LL);
  sub_10003186C(v0, v1);
  dispatch thunk of Hashable._rawHashValue(seed:)(v5, v7, v8);
  sub_100057404();
  unint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))_HashTable.nextHole(atOrAfter:))( v9 & ~v10,  v2 + 56,  ~v10);
  *(void *)(v2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(v2 + 48) + 8 * result) = v3;
  ++*(void *)(v2 + 16);
  return result;
}

void sub_100053304(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v23 = a1;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100052F08( v9,  &qword_1000835D0,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection,  &qword_100082090);
  }

  else
  {
    if (v8 > v7)
    {
      sub_100053904(&qword_1000835D0);
      goto LABEL_12;
    }

    sub_100053D3C( v9,  &qword_1000835D0,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection,  &qword_100082090);
  }

  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40);
  uint64_t v4 = type metadata accessor for ControlChannelConnection(0LL);
  sub_10003186C(&qword_100082090, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v4, v12);
  uint64_t v14 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = v13 & ~v14;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v15 = ~v14;
    sub_10003186C( &qword_1000831C8,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
    uint64_t v17 = v16;
    do
    {
      uint64_t v22 = *(void *)(*(void *)(v10 + 48) + 8 * a2);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v22, &v23, v4, v17) & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v15;
    }

    while (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

LABEL_12:
  uint64_t v18 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v18 + 48) + 8 * a2) = a1;
  uint64_t v19 = *(void *)(v18 + 16);
  BOOL v20 = __OFADD__(v19, 1LL);
  uint64_t v21 = v19 + 1;
  if (!v20)
  {
    *(void *)(v18 + swift_weakDestroy(v0 + 16) = v21;
    return;
  }

  __break(1u);
LABEL_15:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v4);
  __break(1u);
}

  uint64_t v18 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v18 + 48) + 8 * a2) = a1;
  uint64_t v19 = *(void *)(v18 + 16);
  BOOL v20 = __OFADD__(v19, 1LL);
  uint64_t v21 = v19 + 1;
  if (!v20)
  {
    *(void *)(v18 + swift_weakDestroy(v0 + 16) = v21;
    return;
  }

  __break(1u);
LABEL_15:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v4);
  __break(1u);
}

void sub_1000534FC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100052C24(v9);
  }

  else
  {
    if (v8 > v7)
    {
      sub_100053904(&qword_100083670);
      goto LABEL_14;
    }

    sub_100053A68(v9);
  }

  uint64_t v10 = *v3;
  Hasher.init(_seed:)(v27);
  uint64_t v11 = type metadata accessor for PairableHostsBrowseRegistration();
  sub_10003186C( &qword_1000825C8,  (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration);
  uint64_t v13 = v12;
  HashableByObjectIdentity.hash(into:)(v27, v11, v12);
  Swift::Int v14 = Hasher._finalize()();
  uint64_t v15 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = v14 & ~v15;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v16 = *(void *)(*(void *)(v10 + 48) + 8 * a2);
    uint64_t v17 = swift_retain(v16);
    char v18 = static HashableByObjectIdentity.== infix(_:_:)(v17, a1, v11, v13);
    swift_release(v16);
    if ((v18 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v11);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v15;
      while (1)
      {
        a2 = (a2 + 1) & v19;
        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        uint64_t v20 = *(void *)(*(void *)(v10 + 48) + 8 * a2);
        uint64_t v21 = swift_retain(v20);
        char v22 = static HashableByObjectIdentity.== infix(_:_:)(v21, a1, v11, v13);
        swift_release(v20);
        if ((v22 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

void sub_1000536E4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v23 = a1;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100052F08( v9,  &qword_1000831D0,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection,  &qword_1000819F8);
  }

  else
  {
    if (v8 > v7)
    {
      sub_100053904(&qword_1000831D0);
      goto LABEL_12;
    }

    sub_100053D3C( v9,  &qword_1000831D0,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection,  &qword_1000819F8);
  }

  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40);
  uint64_t v4 = type metadata accessor for SystemXPCPeerConnection(0LL);
  sub_10003186C(&qword_1000819F8, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v4, v12);
  uint64_t v14 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = v13 & ~v14;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v15 = ~v14;
    sub_10003186C( (unint64_t *)&unk_100083630,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
    uint64_t v17 = v16;
    do
    {
      uint64_t v22 = *(void *)(*(void *)(v10 + 48) + 8 * a2);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v22, &v23, v4, v17) & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v15;
    }

    while (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

uint64_t sub_1000538DC(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }

  return result;
}

void sub_1000538F8()
{
}

void sub_100053904(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000FD7C(a1);
  uint64_t v3 = (void *)*v1;
  uint64_t v4 = static _SetStorage.copy(original:)(*v1);
  if (!v3[2])
  {
LABEL_28:
    sub_100010008();
    *uint64_t v2 = v4;
    sub_1000572F0();
    return;
  }

  sub_10005746C();
  Swift::Int v6 = v3 + 7;
  unint64_t v8 = (unint64_t)(v7 + 63) >> 6;
  if ((void *)v4 != v3 || v5 >= &v3[v8 + 7]) {
    memmove(v5, v3 + 7, 8 * v8);
  }
  int64_t v10 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v3[2];
  sub_10005746C();
  uint64_t v12 = v3[7];
  uint64_t v13 = -1LL;
  if (v11 < 64) {
    uint64_t v13 = ~(-1LL << v11);
  }
  uint64_t v14 = v13 & v12;
  int64_t v15 = (unint64_t)(v11 + 63) >> 6;
  if ((v13 & v12) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  sub_100057454();
  while (1)
  {
    uint64_t v19 = *(void *)(v3[6] + 8 * v16);
    *(void *)(*(void *)(v4 + 48) + 8 * vswift_weakDestroy(v0 + 16) = v19;
    swift_retain(v19);
    if (v14) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v15) {
      goto LABEL_28;
    }
    ++v10;
    if (!v6[v17])
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v15) {
        goto LABEL_28;
      }
      if (!v6[v10])
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v15) {
          goto LABEL_28;
        }
        if (!v6[v10]) {
          break;
        }
      }
    }

LABEL_25:
    sub_10005742C();
  }

  int64_t v18 = v17 + 3;
  if (v18 >= v15) {
    goto LABEL_28;
  }
  if (v6[v18])
  {
    int64_t v10 = v18;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v10 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v10 >= v15) {
      goto LABEL_28;
    }
    ++v18;
    if (v6[v10]) {
      goto LABEL_25;
    }
  }

Swift::Int sub_100053A68(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_10000FD7C(&qword_100083670);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_37:
    *uint64_t v2 = v6;
    return result;
  }

  BOOL v31 = v2;
  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  if (!v10) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    uint64_t v19 = *(void *)(*(void *)(v3 + 48) + 8 * i);
    Hasher.init(_seed:)(v33);
    uint64_t v20 = type metadata accessor for PairableHostsBrowseRegistration();
    sub_10003186C( &qword_1000825C8,  (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration);
    uint64_t v22 = v21;
    swift_retain(v19);
    HashableByObjectIdentity.hash(into:)(v33, v20, v22);
    Swift::Int result = Hasher._finalize()();
    uint64_t v23 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)(v11 + 8 * (v24 >> 6))) == 0)
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      while (++v25 != v28 || (v27 & 1) == 0)
      {
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v25);
        if (v30 != -1)
        {
          unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v26 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v11 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v26;
    *(void *)(*(void *)(v6 + 48) + 8 * v26) = v19;
    ++*(void *)(v6 + 16);
    if (v10) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_39;
    }
    if (v16 >= v32) {
      goto LABEL_35;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v32) {
        goto LABEL_35;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v13);
      if (!v17)
      {
        int64_t v13 = v16 + 2;
        if (v16 + 2 >= v32) {
          goto LABEL_35;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v13);
        if (!v17) {
          break;
        }
      }
    }

void sub_100053D3C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4)
{
  uint64_t v5 = v4;
  uint64_t v6 = *v4;
  sub_10005734C(a1, a2);
  uint64_t v7 = (void *)static _SetStorage.resize(original:capacity:move:)(v6, v4, 0LL);
  if (!*(void *)(v6 + 16))
  {
    sub_100020490();
LABEL_31:
    void *v5 = v7;
    return;
  }

  sub_10005746C();
  uint64_t v35 = v6 + 56;
  sub_1000575FC();
  unint64_t v10 = v9 & v8;
  int64_t v36 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v12 = v7 + 7;
  swift_retain(v6);
  int64_t v13 = 0LL;
  if (!v10) {
    goto LABEL_4;
  }
LABEL_3:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    uint64_t v19 = v6;
    uint64_t v20 = *(void *)(*(void *)(v6 + 48) + 8 * i);
    uint64_t v21 = v7[5];
    uint64_t v22 = a3(0LL);
    sub_10003186C(a4, a3);
    uint64_t v24 = v23;
    swift_retain(v20);
    dispatch thunk of Hashable._rawHashValue(seed:)(v21, v22, v24);
    sub_10005759C();
    if (((v27 << v26) & ~v12[v25]) == 0)
    {
      sub_100057574();
      while (++v29 != v30 || (v28 & 1) == 0)
      {
        BOOL v31 = v29 == v30;
        if (v29 == v30) {
          uint64_t v29 = 0LL;
        }
        v28 |= v31;
        if (v12[v29] != -1LL)
        {
          sub_10005754C();
          goto LABEL_27;
        }
      }

      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }

    sub_100057588();
LABEL_27:
    sub_100057538();
    *(void *)((char *)v12 + v32) |= v33;
    *(void *)(v7[6] + 8 * v34) = v20;
    ++v7[2];
    uint64_t v6 = v19;
    if (v10) {
      goto LABEL_3;
    }
LABEL_4:
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_33;
    }
    if (v13 + 1 >= v36) {
      goto LABEL_29;
    }
    sub_1000575E8();
    int64_t v13 = v16;
    if (!v17)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v36) {
        goto LABEL_29;
      }
      unint64_t v17 = *(void *)(v35 + 8 * v13);
      if (!v17)
      {
        int64_t v13 = v16 + 2;
        if (v16 + 2 >= v36) {
          goto LABEL_29;
        }
        unint64_t v17 = *(void *)(v35 + 8 * v13);
        if (!v17) {
          break;
        }
      }
    }

#error "10005407C: call analysis failed (funcsize=80)"
uint64_t sub_100054108()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35[9];
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  if ((*v0 & 0xC000000000000001LL) == 0)
  {
    Hasher.init(_seed:)(v35);
    unint64_t v10 = sub_1000575F4();
    sub_10003186C( &qword_1000825C8,  (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration);
    uint64_t v12 = v11;
    sub_100020424();
    HashableByObjectIdentity.hash(into:)(v35, v10, v12);
    int64_t v13 = Hasher._finalize()();
    unint64_t v14 = -1LL << *(_BYTE *)(v2 + 32);
    int64_t v15 = v13 & ~v14;
    sub_100057484();
    if ((v16 & 1) != 0)
    {
      unint64_t v17 = sub_10005739C();
      int64_t v18 = sub_100057298(v17);
      sub_100020490();
      if ((v18 & 1) != 0)
      {
LABEL_12:
        sub_10002045C();
        sub_100056F44();
        v35[0] = *v1;
        sub_1000574DC();
        if (!v24)
        {
          sub_100053904(&qword_100083670);
          uint64_t v23 = v35[0];
        }

        uint64_t v8 = *(void *)(*(void *)(v23 + 48) + 8 * v15);
        uint64_t v25 = sub_100054988(v15);
        uint64_t v9 = sub_100056EF0(v25, v26, v27, v28, v29, v30, v31, v32, v34, v35[0]);
        goto LABEL_15;
      }

      uint64_t v19 = ~v14;
      while (1)
      {
        int64_t v15 = (v15 + 1) & v19;
        sub_100057484();
        if ((v20 & 1) == 0) {
          break;
        }
        uint64_t v21 = sub_10005739C();
        uint64_t v22 = sub_100057298(v21);
        sub_100020490();
        if ((v22 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

#error "100054368: call analysis failed (funcsize=80)"
uint64_t sub_1000543F4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  sub_100057498();
  int64_t v18 = v3;
  swift_bridgeObjectRelease(*v0);
  __CocoaSet.count.getter(v1);
  uint64_t v4 = sub_10005716C();
  uint64_t v5 = sub_100052A08( v4,  v2,  &qword_1000835D0,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection,  &qword_100082090);
  unint64_t v17 = v5;
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = sub_10000FF78();
  sub_10003186C(&qword_100082090, (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
  uint64_t v9 = v8;
  sub_100026D98();
  dispatch thunk of Hashable._rawHashValue(seed:)(v6, v7, v9);
  sub_100057404();
  uint64_t v12 = v11 & ~v10;
  if (((*(void *)(v5 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0)
  {
    int64_t v13 = ~v10;
    sub_10003186C( &qword_1000831C8,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
    while (1)
    {
      int64_t v16 = *(void *)(*(void *)(v5 + 48) + 8 * v12);
      uint64_t v12 = (v12 + 1) & v13;
      if (((*(void *)(v5 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0)
      {
        sub_100026E50();
        __break(1u);
        break;
      }
    }

    sub_100026E50();
    unint64_t v14 = *(void *)(*(void *)(v5 + 48) + 8 * v12);
    int64_t v16 = v14;
    sub_100054B78( v12,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection,  &qword_100082090);
    if ((sub_1000573D4((uint64_t)&v18, (uint64_t)&v16) & 1) != 0)
    {
      unint64_t *v0 = v17;
      return v14;
    }

    __break(1u);
  }

  Swift::Int result = sub_100026E50();
  __break(1u);
  return result;
}

uint64_t sub_1000545A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRelease(*v3);
  uint64_t v6 = __CocoaSet.count.getter(a1);
  uint64_t v7 = swift_unknownObjectRetain(a1);
  Swift::Int v8 = sub_1000527E8(v7, v6);
  Swift::Int v24 = v8;
  Hasher.init(_seed:)(v23);
  uint64_t v9 = type metadata accessor for PairableHostsBrowseRegistration();
  sub_10003186C( &qword_1000825C8,  (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration);
  uint64_t v11 = v10;
  swift_retain(v8);
  HashableByObjectIdentity.hash(into:)(v23, v9, v11);
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v8 + 32);
  unint64_t v14 = v12 & ~v13;
  if (((*(void *)(v8 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) != 0)
  {
    uint64_t v15 = *(void *)(*(void *)(v8 + 48) + 8 * v14);
    uint64_t v16 = swift_retain(v15);
    char v17 = static HashableByObjectIdentity.== infix(_:_:)(v16, a2, v9, v11);
    swift_release(v15);
    if ((v17 & 1) != 0)
    {
LABEL_6:
      swift_release(v8);
      Swift::Int v8 = *(void *)(*(void *)(v8 + 48) + 8 * v14);
      sub_100054988(v14);
      if ((static HashableByObjectIdentity.== infix(_:_:)(a2, v8, v9, v11) & 1) != 0)
      {
        Swift::Int *v3 = v24;
        return v8;
      }

      __break(1u);
    }

    else
    {
      uint64_t v18 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v18;
        if (((*(void *)(v8 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) == 0) {
          break;
        }
        uint64_t v19 = *(void *)(*(void *)(v8 + 48) + 8 * v14);
        uint64_t v20 = swift_retain(v19);
        char v21 = static HashableByObjectIdentity.== infix(_:_:)(v20, a2, v9, v11);
        swift_release(v19);
        if ((v21 & 1) != 0) {
          goto LABEL_6;
        }
      }
    }

    swift_release(v8);
    __break(1u);
  }

  uint64_t result = swift_release(v8);
  __break(1u);
  return result;
}

uint64_t sub_100054784(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v21 = a2;
  swift_bridgeObjectRelease(*v3);
  uint64_t v5 = __CocoaSet.count.getter(a1);
  uint64_t v6 = swift_unknownObjectRetain(a1);
  uint64_t v7 = sub_100052A08( v6,  v5,  &qword_1000831D0,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection,  &qword_1000819F8);
  uint64_t v20 = v7;
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = type metadata accessor for SystemXPCPeerConnection(0LL);
  sub_10003186C(&qword_1000819F8, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
  uint64_t v11 = v10;
  swift_retain(v7);
  uint64_t v12 = dispatch thunk of Hashable._rawHashValue(seed:)(v8, v9, v11);
  uint64_t v13 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v14 = v12 & ~v13;
  if (((*(void *)(v7 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) != 0)
  {
    uint64_t v15 = ~v13;
    sub_10003186C( (unint64_t *)&unk_100083630,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
    uint64_t v17 = v16;
    while (1)
    {
      uint64_t v19 = *(void *)(*(void *)(v7 + 48) + 8 * v14);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v19, &v21, v9, v17) & 1) != 0) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v15;
      if (((*(void *)(v7 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) == 0)
      {
        swift_release(v7);
        __break(1u);
        break;
      }
    }

    swift_release(v7);
    uint64_t v7 = *(void *)(*(void *)(v7 + 48) + 8 * v14);
    uint64_t v19 = v7;
    sub_100054B78( v14,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection,  &qword_1000819F8);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v21, &v19, v9, v17) & 1) != 0)
    {
      uint64_t *v3 = v20;
      return v7;
    }

    __break(1u);
  }

  uint64_t result = swift_release(v7);
  __break(1u);
  return result;
}

unint64_t sub_10005496C(unint64_t a1)
{
  return sub_100054B78( a1,  (uint64_t (*)(uint64_t))&type metadata accessor for ControlChannelConnection,  &qword_100082090);
}

unint64_t sub_100054988(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)(v25);
        uint64_t v11 = type metadata accessor for PairableHostsBrowseRegistration();
        sub_10003186C( &qword_1000825C8,  (uint64_t (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration);
        uint64_t v13 = v12;
        swift_retain(v10);
        HashableByObjectIdentity.hash(into:)(v25, v11, v13);
        Swift::Int v14 = Hasher._finalize()();
        swift_release(v10);
        Swift::Int v15 = v14 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v15 >= v9 && v2 >= v15)
          {
LABEL_15:
            uint64_t v18 = *(void *)(v3 + 48);
            uint64_t v19 = (void *)(v18 + 8 * v2);
            uint64_t v20 = (void *)(v18 + 8 * v6);
            BOOL v21 = v2 != v6 || v19 >= v20 + 1;
            int64_t v2 = v6;
            if (v21)
            {
              *uint64_t v19 = *v20;
              int64_t v2 = v6;
            }
          }
        }

        else if (v15 >= v9 || v2 >= v15)
        {
          goto LABEL_15;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v22 = *(void *)(v3 + 16);
  BOOL v23 = __OFSUB__(v22, 1LL);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + swift_weakDestroy(v0 + 16) = v24;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

unint64_t sub_100054B78( unint64_t result, uint64_t (*a2)(uint64_t), unint64_t *a3)
{
  int64_t v4 = result;
  uint64_t v5 = *v3;
  uint64_t v6 = *v3 + 56LL;
  uint64_t v7 = -1LL << *(_BYTE *)(*v3 + 32LL);
  unint64_t v8 = (result + 1) & ~v7;
  if (((1LL << v8) & *(void *)(v6 + 8 * (v8 >> 6))) != 0)
  {
    uint64_t v11 = ~v7;
    swift_retain(*v3);
    uint64_t v12 = _HashTable.previousHole(before:)(v4, v6, v11);
    if ((*(void *)(v6 + 8 * (v8 >> 6)) & (1LL << v8)) != 0)
    {
      unint64_t v13 = (v12 + 1) & v11;
      uint64_t v14 = a2(0LL);
      sub_10003186C(a3, a2);
      uint64_t v16 = v15;
      do
      {
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)(*(void *)(v5 + 40), v14, v16) & v11;
        if (v4 >= (uint64_t)v13)
        {
          if (v17 >= v13 && v4 >= v17)
          {
LABEL_15:
            uint64_t v20 = *(void *)(v5 + 48);
            BOOL v21 = (void *)(v20 + 8 * v4);
            uint64_t v22 = (void *)(v20 + 8 * v8);
            BOOL v23 = v4 != v8 || v21 >= v22 + 1;
            int64_t v4 = v8;
            if (v23)
            {
              *BOOL v21 = *v22;
              int64_t v4 = v8;
            }
          }
        }

        else if (v17 >= v13 || v4 >= v17)
        {
          goto LABEL_15;
        }

        unint64_t v8 = (v8 + 1) & v11;
      }

      while (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0);
    }

    *(void *)(v6 + (((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v4) - 1;
    uint64_t result = swift_release(v5);
  }

  else
  {
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v24 = *(void *)(v5 + 16);
  BOOL v25 = __OFSUB__(v24, 1LL);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v5 + swift_weakDestroy(v0 + 16) = v26;
    ++*(_DWORD *)(v5 + 36);
  }

  return result;
}

#error "100054D98: call analysis failed (funcsize=38)"
#error "100054E34: call analysis failed (funcsize=42)"
void sub_100054E8C()
{
  sub_100054F64();
}

uint64_t sub_100054EA0()
{
  if ((v0 & 1) == 0) {
    return 2LL;
  }
  sub_100056F44();
  sub_100056E20();
  int v3 = sub_10000FD7C((uint64_t *)&unk_100083680);
  BOOL v11 = sub_100056E4C(v3, v4, v5, v6, v7, v8, v9, v10, v22, v24);
  sub_10005735C(v11, v12, v13, v14, v15, v16, v17, v18, v23, v25);
  uint64_t v19 = *(unsigned __int8 *)(*(void *)(v2 + 56) + v1);
  uint64_t v20 = sub_100026D24();
  sub_10003186C(&qword_1000819F8, (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
  _NativeDictionary._delete(at:)(v1, v2, v20, &type metadata for WirelessPairingOptions);
  sub_1000574E8();
  return v19;
}

void sub_100054F50()
{
}

void sub_100054F64()
{
  int v3 = v2;
  int v5 = v4;
  sub_100057498();
  uint64_t v6 = *v0;
  swift_bridgeObjectRetain(*v0);
  unint64_t v7 = sub_100051AB8(v1);
  char v9 = v8;
  swift_bridgeObjectRelease(v6);
  if ((v9 & 1) != 0)
  {
    char v10 = sub_100056F44();
    uint64_t v18 = *v0;
    sub_1000574DC();
    Swift::Int v12 = *(void *)(v11 + 24);
    sub_10000FD7C(v5);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v12);
    uint64_t v13 = *(void *)(v18 + 48);
    uint64_t v14 = sub_10001DCE0();
    sub_100057478();
    (*(void (**)(unint64_t, uint64_t))(v16 + 8))(v13 + v15 * v7, v14);
    uint64_t v17 = v3(0LL);
    sub_100056D8C((unint64_t *)&qword_100082220);
    _NativeDictionary._delete(at:)(v7, v18, v14, v17);
    sub_1000571E8();
  }

  sub_100056EA0();
}

#error "10005517C: call analysis failed (funcsize=99)"
uint64_t sub_100055200()
{
  uint64_t v0;
  char v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  sub_100057120();
  sub_100056F88();
  sub_100051AB8(v0);
  sub_100056F1C();
  if ((v1 & 1) != 0)
  {
    sub_100056F44();
    sub_100056E20();
    uint64_t v2 = sub_10000FD7C(&qword_100083640);
    sub_100056E4C(v2, v3, v4, v5, v6, v7, v8, v9, v15, v16);
    char v10 = sub_10001DCE0();
    sub_100057178(v10);
    sub_100056D8C((unint64_t *)&qword_100082220);
    sub_1000573F4(v11, v12, v13, (uint64_t)&type metadata for String);
    sub_1000571E8();
  }

  return sub_1000575DC();
}

uint64_t sub_1000552B4()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  sub_10002042C();
  unint64_t v4 = sub_10005741C();
  uint64_t v6 = v5;
  sub_10001DDB4();
  if ((v6 & 1) != 0)
  {
    sub_100057514();
    uint64_t v33 = *v1;
    uint64_t *v1 = 0x8000000000000000LL;
    int v7 = sub_10000FD7C(&qword_100083600);
    BOOL v15 = sub_10005702C(v7, v8, v9, v10, v11, v12, v13, v14, v31, v33);
    sub_100057200(v15, v16, v17, v18, v19, v20, v21, v22, v32, v34);
    uint64_t v23 = *(void *)(v6 + 56);
    uint64_t v24 = sub_10003F144();
    sub_100057478();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v26 + 32))(v3, v23 + v25 * v4, v24);
    _NativeDictionary._delete(at:)(v4, v6, &type metadata for String, v24);
    sub_10005725C();
    uint64_t v27 = v3;
    uint64_t v28 = 0LL;
    uint64_t v29 = v24;
  }

  else
  {
    uint64_t v29 = sub_10003F144();
    uint64_t v27 = v3;
    uint64_t v28 = 1LL;
  }

  return sub_10001D930(v27, v28, 1LL, v29);
}

uint64_t sub_1000553AC()
{
  if ((v1 & 1) != 0)
  {
    sub_100056F44();
    sub_100056E20();
    int v2 = sub_10000FD7C(&qword_100083608);
    sub_100056E4C(v2, v3, v4, v5, v6, v7, v8, v9, v15, v16);
    uint64_t v10 = sub_10003F144();
    sub_100057178(v10);
    sub_10003186C( &qword_1000835F0,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCEventPublisher.Token);
    sub_1000573F4(v11, v12, v13, (uint64_t)&type metadata for String);
    sub_1000571E8();
  }

  return sub_1000575DC();
}

uint64_t sub_100055470()
{
  char v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *v1;
  sub_100026E48();
  sub_100051A2C(v5, v3);
  sub_100056F1C();
  if ((v6 & 1) == 0) {
    return 0LL;
  }
  sub_100056F44();
  sub_100056E20();
  int v7 = sub_10000FD7C((uint64_t *)&unk_100083610);
  sub_100056E4C(v7, v8, v9, v10, v11, v12, v13, v14, v18, v19);
  swift_bridgeObjectRelease(*(void *)(*(void *)(v20 + 48) + 16 * v5 + 8));
  uint64_t v15 = *(void *)(*(void *)(v20 + 56) + 8 * v5);
  uint64_t v16 = sub_10000FD7C(&qword_100082D70);
  _NativeDictionary._delete(at:)(v5, v20, &type metadata for String, v16);
  sub_1000574E8();
  return v15;
}

uint64_t sub_100055538(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_100051BF8(a1);
  if ((v4 & 1) == 0) {
    return 0LL;
  }
  unint64_t v5 = v3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  uint64_t v13 = *v1;
  uint64_t v7 = *v1;
  uint64_t *v1 = 0x8000000000000000LL;
  Swift::Int v8 = *(void *)(v7 + 24);
  sub_10000FD7C((uint64_t *)&unk_1000835D8);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);
  uint64_t v9 = *(void *)(*(void *)(v13 + 56) + 8 * v5);
  unint64_t v10 = sub_100055EF8();
  _NativeDictionary._delete(at:)(v5, v13, &type metadata for ObjectIdentifier, v10);
  uint64_t v11 = *v2;
  *uint64_t v2 = v13;
  swift_bridgeObjectRelease(v11);
  return v9;
}

#error "100055628: call analysis failed (funcsize=11)"
uint64_t sub_100055634()
{
  _OWORD *v0;
  uint64_t v1;
  char v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  sub_100057154();
  sub_1000570B8();
  uint64_t v0 = (_OWORD *)sub_100057410();
  unint64_t v3 = sub_100056038(v0, v1, v2);
  uint64_t v11 = sub_100056EF0((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v13, v14);
  return sub_100056E3C(v11);
}

uint64_t sub_100055674(char a1, uint64_t a2)
{
  uint64_t v5 = sub_10005615C(a1, a2, v4);
  uint64_t v13 = sub_100056EF0(v5, v6, v7, v8, v9, v10, v11, v12, v15, v16);
  return sub_100056E3C(v13);
}

uint64_t sub_1000556B8()
{
  char v1 = v0;
  uint64_t v2 = *v0;
  if ((*v0 & 0xC000000000000001LL) == 0) {
    goto LABEL_7;
  }
  if (v2 < 0) {
    uint64_t v3 = *v0;
  }
  else {
    uint64_t v3 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t result = __CocoaDictionary.count.getter(v3);
  if (!__OFADD__(result, 1LL))
  {
    uint64_t v2 = sub_100055998(v3, result + 1);
    uint64_t *v1 = v2;
LABEL_7:
    swift_isUniquelyReferenced_nonNull_native(v2);
    uint64_t v18 = *v1;
    uint64_t *v1 = 0x8000000000000000LL;
    uint64_t v5 = sub_100057410();
    uint64_t v8 = sub_100056268(v5, v6, v7);
    uint64_t v16 = sub_100056EF0(v8, v9, v10, v11, v12, v13, v14, v15, v17, v18);
    return sub_100056E3C(v16);
  }

  __break(1u);
  return result;
}

uint64_t sub_100055740( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_1000557DC(a1, a2, a3, (uint64_t)sub_10005636C, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_10005574C()
{
  uint64_t v16 = *v0;
  uint64_t *v0 = 0x8000000000000000LL;
  uint64_t v1 = sub_100057410();
  sub_1000564C8(v1, v2, v3, v4);
  uint64_t v13 = sub_100056EF0(v5, v6, v7, v8, v9, v10, v11, v12, v15, v16);
  return sub_100056E3C(v13);
}

#error "1000557C4: call analysis failed (funcsize=11)"
uint64_t sub_1000557D0( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10)
{
  return sub_1000557DC(a1, a2, a3, (uint64_t)sub_100056708, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_1000557DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  sub_100057154();
  sub_1000570B8();
  v12(v18, v16, v14);
  uint64_t v19 = *v10;
  uint64_t *v10 = a10;
  return sub_100056E0C(v19);
}

#error "100055854: call analysis failed (funcsize=11)"
uint64_t sub_100055860(uint64_t a1, uint64_t a2)
{
  void *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v8 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  sub_10005697C(a1, a2, isUniquelyReferenced_nonNull_native);
  uint64_t v6 = *v2;
  *uint64_t v2 = v8;
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_1000558CC()
{
  sub_100016D58();
  swift_release();
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000558FC(uint64_t a1)
{
  return sub_100050B50(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100055908()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10005592C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10005595C()
{
  return sub_100050D8C(v0[2], v0[3], v0[4]);
}

uint64_t sub_100055968()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100055990()
{
  return sub_100050E90(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100055998(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    swift_unknownObjectRelease(a1);
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }

  sub_10000FD7C((uint64_t *)&unk_100083650);
  uint64_t v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
  uint64_t v31 = v4;
  uint64_t v5 = __CocoaDictionary.makeIterator()(a1);
  uint64_t v6 = __CocoaDictionary.Iterator.next()();
  if (!v6)
  {
LABEL_16:
    swift_release(v5);
    return v4;
  }

  uint64_t v8 = v6;
  uint64_t v9 = v7;
  uint64_t v10 = type metadata accessor for SystemXPCPeerConnection(0LL);
  while (1)
  {
    uint64_t v29 = v8;
    swift_dynamicCast(&v30, &v29, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
    uint64_t v28 = v9;
    uint64_t v11 = sub_10000FD7C(&qword_100081A98);
    swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v11, 7LL);
    uint64_t v4 = v31;
    unint64_t v12 = *(void *)(v31 + 16);
    if (*(void *)(v31 + 24) <= v12)
    {
      sub_100055BE0(v12 + 1, 1LL);
      uint64_t v4 = v31;
    }

    uint64_t v13 = v29;
    uint64_t v14 = v30;
    uint64_t v28 = v30;
    uint64_t v15 = *(void *)(v4 + 40);
    sub_10003186C( &qword_1000819F8,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v10, v16);
    uint64_t v18 = v4 + 64;
    uint64_t v19 = -1LL << *(_BYTE *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1LL << v20) & ~*(void *)(v4 + 64 + 8 * (v20 >> 6))) == 0) {
      break;
    }
    unint64_t v22 = __clz(__rbit64((-1LL << v20) & ~*(void *)(v4 + 64 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_15:
    *(void *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
    *(void *)(*(void *)(v4 + 48) + 8 * v22) = v14;
    *(void *)(*(void *)(v4 + 56) + 8 * v22) = v13;
    ++*(void *)(v4 + 16);
    uint64_t v8 = __CocoaDictionary.Iterator.next()();
    uint64_t v9 = v27;
    if (!v8) {
      goto LABEL_16;
    }
  }

  char v23 = 0;
  unint64_t v24 = (unint64_t)(63 - v19) >> 6;
  while (++v21 != v24 || (v23 & 1) == 0)
  {
    BOOL v25 = v21 == v24;
    if (v21 == v24) {
      unint64_t v21 = 0LL;
    }
    v23 |= v25;
    uint64_t v26 = *(void *)(v18 + 8 * v21);
    if (v26 != -1)
    {
      unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
      goto LABEL_15;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_100055BE0(uint64_t a1, uint64_t a2)
{
  char v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_10000FD7C((uint64_t *)&unk_100083650);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_42;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain(v5);
  int64_t v14 = 0LL;
  if (!v11) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v15 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v14 << 6))
  {
    uint64_t v21 = *(void *)(*(void *)(v5 + 48) + 8 * i);
    uint64_t v22 = *(void *)(*(void *)(v5 + 56) + 8 * i);
    if ((v37 & 1) == 0)
    {
      swift_retain(v21);
      swift_unknownObjectRetain(v22);
    }

    uint64_t v23 = *(void *)(v8 + 40);
    uint64_t v24 = type metadata accessor for SystemXPCPeerConnection(0LL);
    sub_10003186C( &qword_1000819F8,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v23, v24, v25);
    uint64_t v26 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) == 0)
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v26) >> 6;
      while (++v28 != v31 || (v30 & 1) == 0)
      {
        BOOL v32 = v28 == v31;
        if (v28 == v31) {
          unint64_t v28 = 0LL;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v12 + 8 * v28);
        if (v33 != -1)
        {
          unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    unint64_t v29 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v12 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v29;
    *(void *)(*(void *)(v8 + 48) + 8 * v29) = v21;
    *(void *)(*(void *)(v8 + 56) + 8 * v29) = v22;
    ++*(void *)(v8 + 16);
    if (v11) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v17 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      goto LABEL_44;
    }
    if (v17 >= v35)
    {
      swift_release(v5);
      char v3 = v2;
      uint64_t v18 = (void *)(v5 + 64);
      goto LABEL_37;
    }

    uint64_t v18 = (void *)(v5 + 64);
    unint64_t v19 = *(void *)(v36 + 8 * v17);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v17 + 1;
      if (v17 + 1 >= v35) {
        goto LABEL_35;
      }
      unint64_t v19 = *(void *)(v36 + 8 * v14);
      if (!v19) {
        break;
      }
    }

LABEL_21:
    unint64_t v11 = (v19 - 1) & v19;
  }

  int64_t v20 = v17 + 2;
  if (v20 < v35)
  {
    unint64_t v19 = *(void *)(v36 + 8 * v20);
    if (!v19)
    {
      while (1)
      {
        int64_t v14 = v20 + 1;
        if (__OFADD__(v20, 1LL)) {
          goto LABEL_45;
        }
        if (v14 >= v35) {
          goto LABEL_35;
        }
        unint64_t v19 = *(void *)(v36 + 8 * v14);
        ++v20;
        if (v19) {
          goto LABEL_21;
        }
      }
    }

    int64_t v14 = v20;
    goto LABEL_21;
  }

unint64_t sub_100055EF8()
{
  unint64_t result = qword_100082180;
  if (!qword_100082180)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_remote_device);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100082180);
  }

  return result;
}

void sub_100055F34(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  if (v11)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v12 = v9;
  char v13 = v10;
  sub_10000FD7C((uint64_t *)&unk_100083620);
  if (!sub_1000575B0(a4 & 1)) {
    goto LABEL_5;
  }
  uint64_t v14 = sub_100057410();
  unint64_t v16 = sub_100051A2C(v14, v15);
  if ((v13 & 1) != (v17 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v12 = v16;
LABEL_5:
  uint64_t v18 = *v4;
  if ((v13 & 1) != 0)
  {
    unint64_t v19 = (void *)(*(void *)(v18 + 56) + 32 * v12);
    sub_10000FF38(v19);
    sub_10001DC14(a1, v19);
  }

  else
  {
    sub_100056A78(v12, a2, a3, (uint64_t)a1, v18);
    swift_bridgeObjectRetain(a3);
  }

_OWORD *sub_100056038(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v9 = sub_100051A8C();
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v14 = v9;
  char v15 = v10;
  sub_10000FD7C(&qword_100083678);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_100051A8C();
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    unint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
    __break(1u);
    return result;
  }

  unint64_t v14 = v16;
LABEL_5:
  uint64_t v18 = *v4;
  if ((v15 & 1) != 0)
  {
    unint64_t v19 = (void *)(v18[7] + 32 * v14);
    sub_10000FF38(v19);
    return sub_10001DC14(a1, v19);
  }

  else
  {
    sub_100056DC0(a2, (uint64_t)v21);
    return sub_100056AD0(v14, (uint64_t)v21, a1, v18);
  }

uint64_t sub_10005615C(char a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v9 = sub_100051B0C(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v14 = v9;
  char v15 = v10;
  sub_10000FD7C((uint64_t *)&unk_100083680);
  uint64_t result = _NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13);
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t result = sub_100051B0C(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    uint64_t v19 = type metadata accessor for SystemXPCPeerConnection(0LL);
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v19);
    __break(1u);
    return result;
  }

  unint64_t v14 = result;
LABEL_5:
  uint64_t v18 = *v4;
  if ((v15 & 1) != 0)
  {
    *(_BYTE *)(v18[7] + v14) = a1 & 1;
  }

  else
  {
    sub_100056B48(v14, a2, a1 & 1, v18);
    return swift_retain(a2);
  }

  return result;
}

void sub_10005625C(uint64_t a1, uint64_t a2, char a3)
{
}

uint64_t sub_100056268(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v9 = sub_100051B0C(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v14 = v9;
  char v15 = v10;
  sub_10000FD7C(&qword_100083648);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_100051B0C(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    uint64_t v21 = type metadata accessor for SystemXPCPeerConnection(0LL);
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
    __break(1u);
    return result;
  }

  unint64_t v14 = v16;
LABEL_5:
  uint64_t v18 = *v4;
  if ((v15 & 1) != 0)
  {
    uint64_t v19 = v18[7];
    uint64_t result = swift_unknownObjectRelease(*(void *)(v19 + 8 * v14));
    *(void *)(v19 + 8 * v14) = a1;
  }

  else
  {
    sub_100056B8C(v14, a2, a1, v18);
    return swift_retain(a2);
  }

  return result;
}

void sub_10005636C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v11 = sub_100051AB8(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v16 = v11;
  char v17 = v12;
  sub_10000FD7C(&qword_100083640);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_100051AB8(a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_10:
    uint64_t v25 = type metadata accessor for UUID(0LL);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v25);
    __break(1u);
    return;
  }

  unint64_t v16 = v18;
LABEL_5:
  if ((v17 & 1) != 0)
  {
    int64_t v20 = (void *)(*(void *)(*v5 + 56LL) + 16 * v16);
    swift_bridgeObjectRelease(v20[1]);
    *int64_t v20 = a1;
    v20[1] = a2;
  }

  else
  {
    uint64_t v21 = type metadata accessor for UUID(0LL);
    __chkstk_darwin(v21, v22);
    (*(void (**)(char *, uint64_t))(v24 + 16))((char *)&v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL), a3);
    sub_100056CD4();
  }

void sub_1000564C8(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  if (v11)
  {
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v12 = v9;
  char v13 = v10;
  sub_10000FD7C(a4);
  if (sub_1000575B0(a3 & 1))
  {
    unint64_t v14 = sub_100051AB8(a2);
    if ((v13 & 1) == (v15 & 1))
    {
      unint64_t v12 = v14;
      goto LABEL_5;
    }

LABEL_10:
    uint64_t v23 = sub_10001DCE0();
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v23);
    __break(1u);
    return;
  }

  uint64_t v155 = v19;
  id v72 = static os_log_type_t.error.getter(v66);
  uint64_t v73 = (os_log_s *)qword_1000845F0;
  uint64_t v74 = (uint64_t (*)(void, void))v154;
  sub_10002FCD8(v153, (uint64_t)v154, &qword_100081A90);
  uint64_t v75 = v72;
  if (os_log_type_enabled(v73, v72))
  {
    uint64_t v152 = v73;
    uint64_t v76 = v156;
    swift_retain_n(v156, 2LL);
    uint64_t v77 = swift_slowAlloc(22LL, -1LL);
    uint64_t v145 = v6;
    uint64_t v78 = v77;
    id v79 = swift_slowAlloc(64LL, -1LL);
    uint64_t v151 = (char *)v79;
    int v157 = (uint64_t (*)(void, void))v79;
    *(_DWORD *)uint64_t v78 = 136446466;
    uint64_t v80 = UUID.uuidString.getter(v79);
    id v82 = v81;
    sub_100045370(v80, v81, (uint64_t *)&v157);
    uint64_t v159 = v83;
    uint64_t v153 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v78 + 4, v78 + 12);
    swift_release_n(v76, 2LL);
    swift_bridgeObjectRelease(v82);
    *(_WORD *)(v78 + 12) = 2082;
    uint64_t v84 = v147;
    sub_10002FCD8((uint64_t)v74, v147, &qword_100081A90);
    uint64_t v85 = String.init<A>(describing:)(v84, v44);
    uint64_t v87 = v86;
    sub_100045370(v85, v86, (uint64_t *)&v157);
    uint64_t v159 = v88;
    __n128 v68 = v153;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v78 + 14, v78 + 22);
    swift_bridgeObjectRelease(v87);
    sub_100026B84((uint64_t)v74, &qword_100081A90);
    _os_log_impl( (void *)&_mh_execute_header,  v152,  v75,  "%{public}s: Server XPC result not successful: %{public}s",  (uint8_t *)v78,  0x16u);
    uint64_t v89 = v151;
    swift_arrayDestroy(v151, 2LL);
    swift_slowDealloc(v89, -1LL, -1LL);
    uint64_t v90 = v78;
    uint64_t v6 = v145;
    swift_slowDealloc(v90, -1LL, -1LL);
  }

  else
  {
    sub_100026B84((uint64_t)v74, &qword_100081A90);
  }

  uint64_t v118 = type metadata accessor for RemotePairingError(0LL);
  sub_100026A28( (unint64_t *)&unk_1000819E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
  uint64_t v120 = swift_allocError(v118, v119, 0LL, 0LL);
  sub_100026A28( (unint64_t *)&unk_1000813E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
  static Error<>.dataCorrupted.getter(v118, v121);
  sub_10005DAF8(v120);
  swift_errorRelease(v120);
  unint64_t v122 = *(void (**)(os_log_t, uint64_t))(v68 + 8);
  v122(v155, v6);
  return ((uint64_t (*)(char *, uint64_t))v122)(v41, v6);
}

LABEL_5:
  uint64_t v16 = *v4;
  if ((v13 & 1) != 0)
  {
    uint64_t v17 = *(void *)(v16 + 56);
    swift_release(*(void *)(v17 + 8 * v12));
    *(void *)(v17 + 8 * v12) = a1;
  }

  else
  {
    uint64_t v18 = sub_10001DCE0();
    __chkstk_darwin(v18, v19);
    uint64_t v21 = (char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *, uint64_t))(v22 + 16))(v21, a2);
    sub_100056BD0(v12, (uint64_t)v21, a1, v16);
  }

  sub_1000572F0();
}

  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_1000565E0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  char v10 = (void *)*v4;
  unint64_t v11 = sub_100051A2C(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v16 = v11;
  char v17 = v12;
  sub_10000FD7C(&qword_100083600);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_100051A2C(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }

  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if ((v17 & 1) != 0)
  {
    uint64_t v21 = v20[7];
    uint64_t v22 = type metadata accessor for XPCEventPublisher.Token(0LL);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 40LL))( v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v16,  a1,  v22);
  }

  else
  {
    sub_100056C44(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain(a3);
  }

void sub_100056708(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v27 = a2;
  uint64_t v9 = type metadata accessor for XPCEventPublisher.Token(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *v4;
  unint64_t v15 = sub_100051B9C(a3);
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v16 & 1) == 0;
  Swift::Int v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v20 = v15;
  char v21 = v16;
  sub_10000FD7C(&qword_100083608);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v19)) {
    goto LABEL_5;
  }
  unint64_t v22 = sub_100051B9C(a3);
  if ((v21 & 1) != (v23 & 1))
  {
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return;
  }

  unint64_t v20 = v22;
LABEL_5:
  if ((v21 & 1) != 0)
  {
    uint64_t v24 = (void *)(*(void *)(*v5 + 56LL) + 16 * v20);
    swift_bridgeObjectRelease(v24[1]);
    uint64_t v25 = v27;
    void *v24 = a1;
    v24[1] = v25;
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a3, v9);
    sub_100056CD4();
  }

uint64_t sub_100056868(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v11 = sub_100051A2C(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v16 = v11;
  char v17 = v12;
  sub_10000FD7C((uint64_t *)&unk_100083610);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_100051A2C(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }

  unint64_t v16 = v18;
LABEL_5:
  unint64_t v20 = *v5;
  if ((v17 & 1) != 0)
  {
    uint64_t v21 = v20[7];
    uint64_t result = swift_bridgeObjectRelease(*(void *)(v21 + 8 * v16));
    *(void *)(v21 + 8 * vswift_unknownObjectWeakDestroy(v0 + 16) = a1;
  }

  else
  {
    sub_100056D44(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain(a3);
  }

  return result;
}

void sub_10005697C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v9 = sub_100051BF8(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v14 = v9;
  char v15 = v10;
  sub_10000FD7C((uint64_t *)&unk_1000835D8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_100051BF8(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ObjectIdentifier);
    __break(1u);
    return;
  }

  unint64_t v14 = v16;
LABEL_5:
  unint64_t v18 = *v4;
  if ((v15 & 1) != 0)
  {
    uint64_t v19 = v18[7];

    *(void *)(v19 + 8 * v14) = a1;
  }

  else
  {
    sub_100056B8C(v14, a2, a1, v18);
  }

_OWORD *sub_100056A78(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = sub_1000570D0(a1, a5 + 8 * (a1 >> 6));
  uint64_t v8 = (void *)(*(void *)(v7 + 48) + 16 * v6);
  *uint64_t v8 = v9;
  v8[1] = v10;
  uint64_t result = sub_10001DC14(v11, (_OWORD *)(*(void *)(v7 + 56) + 32 * v6));
  uint64_t v13 = *(void *)(a5 + 16);
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(a5 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
  }
  return result;
}

_OWORD *sub_100056AD0(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_10001DC14(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

unint64_t sub_100056B48(unint64_t result, uint64_t a2, char a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1LL << result;
  *(void *)(a4[6] + 8 * result) = a2;
  *(_BYTE *)(a4[7] + result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1LL);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

unint64_t sub_100056B8C(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1LL << result;
  *(void *)(a4[6] + 8 * result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1LL);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

void sub_100056BD0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(v8 + 48);
  sub_10001DCE0();
  sub_100057478();
  (*(void (**)(unint64_t, uint64_t))(v11 + 32))(v9 + v10 * a1, a2);
  *(void *)(*(void *)(a4 + 56) + 8 * a1) = a3;
  uint64_t v12 = *(void *)(a4 + 16);
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a4 + swift_unknownObjectWeakDestroy(v0 + 16) = v14;
    sub_100031C6C();
  }

uint64_t sub_100056C44(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for XPCEventPublisher.Token(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))( v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * a1,  a4,  v10);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

void sub_100056CD4()
{
  uint64_t v8 = *(void *)(v7 + 48);
  v9(0LL);
  sub_100057478();
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v8 + v10 * v4, v3);
  uint64_t v12 = (void *)(*(void *)(v0 + 56) + 16 * v4);
  void *v12 = v2;
  v12[1] = v1;
  uint64_t v13 = *(void *)(v0 + 16);
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
    sub_100031C6C();
  }

unint64_t sub_100056D44(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  void *v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

void sub_100056D8C(unint64_t *a1)
{
  if (!*a1)
  {
    uint64_t v2 = type metadata accessor for UUID(255LL);
    atomic_store(sub_100026E8C(v2), a1);
  }

  sub_100016C1C();
}

uint64_t sub_100056DC0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100056E0C(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

void sub_100056E20()
{
  void *v0 = 0x8000000000000000LL;
}

uint64_t sub_100056E3C(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

BOOL sub_100056E4C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t sub_100056E60()
{
  return sub_100015D58(v1, v0);
}

uint64_t sub_100056E90()
{
  return swift_arrayDestroy(v0, 1LL);
}

  ;
}

uint64_t sub_100056EB8()
{
  void *v0 = 0x8000000000000000LL;
  return v1;
}

uint64_t sub_100056EE0()
{
  return swift_slowAlloc(32LL, -1LL);
}

uint64_t sub_100056EF0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  uint64_t *v10 = a10;
  return result;
}

uint64_t sub_100056F00(uint64_t a1)
{
  *(void *)(v3 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 104, v3 - 96, v2, v1 + 12);
}

uint64_t sub_100056F1C()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100056F2C()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_100056F44()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_100056F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return String.init<A>(describing:)(v5, v4);
}

uint64_t sub_100056F70(uint64_t a1)
{
  *(void *)(v4 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 104, v3 + 8, v2, v1);
}

uint64_t sub_100056F88()
{
  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_100056F9C()
{
  return static Data.== infix(_:_:)(v1, v0, v2, v3);
}

uint64_t sub_100056FB0()
{
  return sub_100015D58(v2, v3);
}

uint64_t sub_100056FD0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  a9 = *(void *)(*(void *)(v10 + 48) + 8 * v11);
  return dispatch thunk of static Equatable.== infix(_:_:)(&a9, &a10, v12, v13);
}

uint64_t sub_100056FF4(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v7 = va_arg(va1, void);
  uint64_t v7 = *(void *)(*(void *)(v2 + 48) + 8 * v3);
  return dispatch thunk of static Equatable.== infix(_:_:)((uint64_t *)va, va1, v4, v5);
}

uint64_t sub_100057018(float a1)
{
  *uint64_t v2 = a1;
  return swift_errorRetain(v1);
}

BOOL sub_10005702C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

  ;
}

uint64_t sub_100057058( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12 = 0x8000000000000000LL;
  return swift_retain(a12);
}

  ;
}

  ;
}

void sub_1000570B8()
{
  void *v0 = 0x8000000000000000LL;
}

uint64_t sub_1000570D0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 64) |= 1LL << result;
  return result;
}

  ;
}

id sub_100057110()
{
  return [v0 publicKey];
}

  ;
}

uint64_t sub_100057134(uint64_t a1)
{
  return String.init<A>(describing:)(v1 - 104, a1);
}

uint64_t sub_100057144( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11 = a11;
  return swift_unknownObjectRelease(v12);
}

uint64_t sub_100057154()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

void sub_10005715C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10005716C()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_100057178(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))( v1 + *(void *)(*(void *)(a1 - 8) + 72LL) * v2,  v3);
}

uint64_t sub_100057190@<X0>(uint64_t a1@<X8>, uint64_t a2, ...)
{
  uint64_t v4 = va_arg(va1, void);
  return swift_dynamicCast(va1, (uint64_t *)va, a1 + 8, v2, 7LL);
}

uint64_t sub_1000571A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 7LL);
}

void sub_1000571B0(uint64_t a1, uint64_t a2)
{
}

BOOL sub_1000571B8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000571C4()
{
  return sub_1000155D4(v1, v0);
}

  ;
}

  ;
}

uint64_t sub_1000571E8()
{
  uint64_t v2 = *v0;
  uint64_t *v0 = v1;
  return swift_bridgeObjectRelease(v2);
}

void sub_1000571F4()
{
}

uint64_t sub_100057200( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_bridgeObjectRelease(*(void *)(*(void *)(a10 + 48) + 16 * v10 + 8));
}

void sub_100057214()
{
}

  ;
}

id sub_10005723C()
{
  return [v0 *(SEL *)(v1 + 1480)];
}

uint64_t sub_100057248()
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)v1 + 48LL) + 8 * v2);
  void *v0 = v3;
  return swift_retain(v3);
}

uint64_t sub_10005725C()
{
  uint64_t v2 = *v1;
  uint64_t *v1 = v0;
  return swift_bridgeObjectRelease(v2);
}

  ;
}

uint64_t sub_100057284()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)(v0, v1, v2);
}

uint64_t sub_100057298(uint64_t a1)
{
  return static HashableByObjectIdentity.== infix(_:_:)(a1, v1, v2, v3);
}

  ;
}

void sub_1000572C8()
{
}

void sub_1000572D4()
{
  void *v0 = 0x8000000000000000LL;
}

  ;
}

  ;
}

uint64_t sub_100057318(uint64_t a1)
{
  return static HashableByObjectIdentity.== infix(_:_:)(a1, v1, v2, v3);
}

uint64_t sub_10005732C()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t sub_100057338()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)(v0, v1, v2);
}

uint64_t sub_10005734C(uint64_t a1, uint64_t *a2)
{
  return sub_10000FD7C(a2);
}

uint64_t sub_10005735C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_release(*(void *)(*(void *)(a10 + 48) + 8 * v10));
}

uint64_t sub_10005736C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _NativeDictionary._delete(at:)(v3, v2, a1, a2 + 8);
}

_OWORD *sub_10005737C()
{
  return sub_10001DC14((_OWORD *)(*(void *)(v0 + 56) + 32 * v2), v1);
}

  ;
}

uint64_t sub_10005739C()
{
  return swift_retain(*(void *)(*(void *)(v0 + 48) + 8 * v1));
}

  ;
}

uint64_t sub_1000573C4()
{
  return swift_retain(*(void *)(*(void *)(v0 + 48) + 8 * v1));
}

uint64_t sub_1000573D4(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v2, v3);
}

uint64_t sub_1000573E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = *v11;
  uint64_t *v11 = a11;
  return swift_bridgeObjectRelease(v12);
}

uint64_t sub_1000573F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _NativeDictionary._delete(at:)(v4, v5, v6, a4);
}

  ;
}

uint64_t sub_100057410()
{
  return v0;
}

unint64_t sub_10005741C()
{
  return sub_100051A2C(v1, v0);
}

  ;
}

uint64_t sub_100057444(uint64_t a1)
{
  return dispatch thunk of Hashable._rawHashValue(seed:)(v1, v2, a1);
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

id sub_1000574B8(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_1000574C0()
{
  return __CocoaSet.count.getter(v0);
}

unint64_t sub_1000574C8(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3)
{
  return sub_100054B78(v3, a2, a3);
}

uint64_t sub_1000574D4()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

void sub_1000574DC()
{
  void *v0 = 0x8000000000000000LL;
}

uint64_t sub_1000574E8()
{
  uint64_t v2 = *v0;
  uint64_t *v0 = v1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_1000574F4()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1000574FC(uint64_t a1, uint64_t a2)
{
  return _NativeDictionary._delete(at:)(a1, a2, v2, v3);
}

void sub_100057508(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4)
{
}

uint64_t sub_100057514()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

  ;
}

uint64_t sub_100057530(uint64_t a1)
{
  return __CocoaSet.member(for:)(a1, v1);
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

BOOL sub_1000575B0(Swift::Bool a1)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(a1, v1);
}

unint64_t sub_1000575BC()
{
  return sub_10005324C();
}

void sub_1000575C8()
{
}

unint64_t sub_1000575D0()
{
  return sub_100051B0C(v0);
}

uint64_t sub_1000575DC()
{
  return v0;
}

  ;
}

uint64_t sub_1000575F4()
{
  return type metadata accessor for PairableHostsBrowseRegistration();
}

  ;
}

uint64_t sub_100057610(uint64_t a1)
{
  uint64_t v2 = sub_10000FD7C(&qword_1000820C0);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100047868(a1, (uint64_t)v5);
  uint64_t v6 = type metadata accessor for Date(0LL);
  int v7 = sub_10001D9C8((uint64_t)v5, 1LL, v6);
  if (v7 == 1)
  {
    sub_10001DB68((uint64_t)v5, &qword_1000820C0);
    unint64_t v8 = 0LL;
  }

  else
  {
    double v9 = Date.timeIntervalSince1970.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
    unint64_t v8 = *(void *)&v9;
  }

  sub_100057AFC(v8, v7 == 1);
  return sub_10001DB68(a1, &qword_1000820C0);
}

uint64_t sub_100057710@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100057874();
  if ((v3 & 1) != 0)
  {
    uint64_t v4 = 1LL;
  }

  else
  {
    Date.init(timeIntervalSince1970:)(*(double *)&v2);
    uint64_t v4 = 0LL;
  }

  uint64_t v5 = type metadata accessor for Date(0LL);
  return sub_10001D930(a1, v4, 1LL, v5);
}

void sub_100057764()
{
  if (os_variant_allows_internal_security_policies("com.apple.RemotePairing"))
  {
    static Defaults.pairingRecordExpiryInterval.getter();
    if ((v0 & 1) == 0)
    {
      os_log_type_t v1 = sub_100057CB8();
      if (sub_100039E00(v1))
      {
        uint64_t v2 = (float *)sub_100057CA8();
        sub_100057C4C(v2, 3.852e-34, v3);
        sub_100057C84( (void *)&_mh_execute_header,  v4,  v5,  "Using custom pairing record expiry interval based on default: %f");
        sub_100057C98();
      }
    }
  }

  sub_100057C6C();
}

void sub_1000577EC()
{
  if (os_variant_allows_internal_security_policies("com.apple.RemotePairing"))
  {
    static Defaults.pairingRecordLastUsedUpdateInterval.getter();
    if ((v0 & 1) == 0)
    {
      os_log_type_t v1 = sub_100057CB8();
      if (sub_100039E00(v1))
      {
        uint64_t v2 = (float *)sub_100057CA8();
        sub_100057C4C(v2, 3.852e-34, v3);
        sub_100057C84( (void *)&_mh_execute_header,  v4,  v5,  "Using custom pairing record last used update interval based on default: %f");
        sub_100057C98();
      }
    }
  }

  sub_100057C6C();
}

uint64_t sub_100057874()
{
  if (!v1)
  {
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    goto LABEL_6;
  }

  uint64_t v2 = v1;
  v22[0] = 0xD000000000000016LL;
  v22[1] = 0x800000010006B2F0LL;
  AnyHashable.init<A>(_:)(v22, &type metadata for String, &protocol witness table for String);
  sub_10003C3FC(v2, &v24);
  sub_10001DBE0((uint64_t)v23);
  swift_bridgeObjectRelease(v2);
  if (!*((void *)&v25 + 1))
  {
LABEL_6:
    sub_10001DB68((uint64_t)&v24, &qword_100081598);
    goto LABEL_7;
  }

void sub_100057AFC(unint64_t a1, char a2)
{
  uint64_t v3 = v2;
  sub_10002FC00(v3);
  if (!v6) {
    uint64_t v6 = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }
  uint64_t v12 = v6;
  unint64_t v7 = 0xD000000000000016LL;
  unint64_t v8 = 0x800000010006B2F0LL;
  AnyHashable.init<A>(_:)(&v7, &type metadata for String, &protocol witness table for String);
  if ((a2 & 1) != 0)
  {
    a1 = 0LL;
    unint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t v10 = 0LL;
  }

  else
  {
    uint64_t v10 = &type metadata for Double;
  }

  unint64_t v7 = a1;
  sub_10003C20C((uint64_t)&v7, (uint64_t)v11);
  sub_100057BE0(v12, v3);
}

void sub_100057BE0(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 setInfo:isa];
}

uint64_t sub_100057C4C(float *a1, float a2, uint64_t a3, ...)
{
  *a1 = a2;
  uint64_t v6 = v3;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)((uint64_t *)va, va1, a1 + 1, (char *)a1 + v4);
}

  ;
}

void sub_100057C84(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_100057C98()
{
  return swift_slowDealloc(v0, -1LL, -1LL);
}

uint64_t sub_100057CA8()
{
  return swift_slowAlloc(12LL, -1LL);
}

uint64_t sub_100057CB8()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_100057CC4()
{
  if (qword_100080990 != -1) {
    swift_once(&qword_100080990, sub_100057DBC);
  }
  [(id)qword_100083698 lock];
  if (byte_100083690 == 2)
  {
    dlopen("/usr/lib/liblockdown.dylib", 2);
    uint64_t v0 = sub_10000FD7C(&qword_1000836A0);
    uint64_t v1 = Optional.isNil.getter(v0);
    char v2 = v1 ^ 1;
    byte_100083690 = (v1 ^ 1) & 1;
    if (((v1 ^ 1) & 1) == 0)
    {
      uint64_t v3 = static os_log_type_t.error.getter(v1);
      os_log(_:dso:log:_:_:)( v3,  &_mh_execute_header,  qword_1000845F0,  "liblockdown.dylib is not present. remotepairingdeviced will not call into liblockdown API.",  90LL,  2LL);
    }
  }

  else
  {
    char v2 = byte_100083690 & 1;
  }

  [(id)qword_100083698 unlock];
  return v2 & 1;
}

id sub_100057DBC()
{
  id result = [objc_allocWithZone(NSLock) init];
  qword_100083698 = (uint64_t)result;
  return result;
}

void sub_100057DEC(uint64_t a1, uint64_t a2)
{
  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  char v2 = (char *)&loc_100057E40 + dword_100057F44[sub_10000FF14(v3, (uint64_t)&type metadata for Data)[1] >> 62];
  __asm { BR              X10 }

uint64_t sub_100057E50()
{
  uint64_t v4 = v6;
  sub_10000FF38(&v7);
  return v4;
}

uint64_t sub_100057F54(uint64_t a1)
{
  uint64_t v9 = sub_10000FD7C(&qword_100083820);
  unint64_t v10 = sub_10005F200();
  v8[0] = a1;
  uint64_t v2 = sub_10000FF14(v8, v9);
  uint64_t v3 = *v2 + 32LL;
  uint64_t v4 = v3 + *(void *)(*v2 + 16LL);
  swift_bridgeObjectRetain(a1);
  sub_10005E9D0(v3, v4, &v7);
  swift_bridgeObjectRelease(a1);
  uint64_t v5 = v7;
  sub_10000FF38(v8);
  return v5;
}

uint64_t sub_100057FF4()
{
  uint64_t v1 = sub_10000FD7C(&qword_1000815A0);
  OS_dispatch_queue.sync<A>(execute:)(&v3, sub_10005F758, v0, v1);
  return v3;
}

uint64_t sub_100058058@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state;
  swift_beginAccess(a1 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state, v6, 0LL, 0LL);
  uint64_t v4 = *(void *)(v3 + 120);
  *a2 = *(void *)(v3 + 112);
  a2[1] = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_1000580B8()
{
  uint64_t v68 = v1;
  uint64_t v69 = v2;
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v60 = v15;
  uint64_t v61 = v14;
  uint64_t v64 = v16;
  uint64_t v17 = (void *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state);
  bzero((void *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state), 0xA0uLL);
  if (v11)
  {
    unint64_t v18 = (void *)sub_100016BCC((uint64_t)&unk_1000790C8, 40LL);
    v18[2] = v13;
    v18[3] = v11;
    v18[4] = v9;
    sub_100016B48((uint64_t)v17, (uint64_t)&v65, 1LL);
    v17[16] = sub_10005F7B0;
    v17[17] = v18;
    sub_10002FE80(v11, v9);
    id v19 = v13;
    sub_10005FA14();
  }

  uint64_t v62 = v11;
  uint64_t v63 = v9;
  double v20 = (void *)sub_100016BCC((uint64_t)&unk_1000790A0, 40LL);
  void v20[2] = v13;
  void v20[3] = v7;
  uint64_t v21 = v5;
  v20[4] = v5;
  sub_100016B48((uint64_t)v17, (uint64_t)&v67, 1LL);
  v17[18] = sub_10005F774;
  v17[19] = v20;
  id v22 = v13;
  swift_retain(v5);
  sub_10005FA14();
  char v23 = v61;
  *(void *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel_initiator) = v61;
  uint64_t v24 = v3 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel_identifier;
  uint64_t v25 = type metadata accessor for UUID(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v24, v64, v25);
  if (v60)
  {
    uint64_t v27 = v60;
    unint64_t v28 = v23;
    swift_release();
    sub_10002FBF0(v62, v63);

    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v64, v25);
  }

  else
  {
    unint64_t v59 = sub_100029DDC();
    sub_100016D38();
    uint64_t v60 = &v54;
    sub_100026C0C();
    __chkstk_darwin(v29, v30);
    sub_10000FFCC();
    uint64_t v33 = v32 - v31;
    uint64_t v58 = v23;
    ((void (*)(void))static DispatchQoS.userInteractive.getter)();
    uint64_t v34 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
    uint64_t v61 = &v54;
    __chkstk_darwin(v34, v35);
    sub_10000FFCC();
    uint64_t v56 = v21;
    uint64_t v38 = v37 - v36;
    (*(void (**)(uint64_t, void))(v39 + 104))( v37 - v36,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
    uint64_t v40 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
    id v57 = &v54;
    sub_100026C0C();
    __chkstk_darwin(v41, v42);
    sub_10000FFCC();
    uint64_t v45 = v44 - v43;
    uint64_t v66 = &_swiftEmptyArrayStorage;
    sub_100026A28((unint64_t *)&unk_100082130, v46);
    uint64_t v48 = v47;
    uint64_t v49 = sub_10000FD7C(&qword_100081D08);
    id v55 = v22;
    uint64_t v50 = v49;
    sub_100045D28((unint64_t *)&unk_100082140, &qword_100081D08);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v66, v50, v51, v40, v48);
    sub_100031920();
    uint64_t v27 = (uint64_t *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000023LL,  v52,  v33,  v45,  v38,  0LL);
    swift_release();
    sub_10002FBF0(v62, v63);

    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v64, v25);
  }

  *(void *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__tunnelQueue) = v27;
  return v3;
}

uint64_t sub_100058430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a2;
  uint64_t v7 = sub_10000FD7C((uint64_t *)&unk_1000820D8);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7, v10);
  sub_10002FCD8(a1, (uint64_t)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL), (uint64_t *)&unk_1000820D8);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_1000790F0, v12 + v9, v11 | 7);
  *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  *(void *)(v13 + 24) = a4;
  sub_10002FD90((uint64_t)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL), v13 + v12, (uint64_t *)&unk_1000820D8);
  aBlock[4] = sub_10005F838;
  void aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100040708;
  aBlock[3] = &unk_100079108;
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  id v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = swift_retain(a4);
  static DispatchQoS.unspecified.getter(v20);
  uint64_t v21 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, &type metadata accessor for DispatchWorkItemFlags);
  uint64_t v24 = (char *)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = &_swiftEmptyArrayStorage;
  sub_100026A28((unint64_t *)&qword_1000813C0, v25);
  uint64_t v27 = v26;
  uint64_t v28 = sub_10000FD7C(&qword_100081100);
  sub_100045D28((unint64_t *)&qword_1000813D0, &qword_100081100);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v28, v29, v21, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v19, v24, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  return swift_release();
}

uint64_t sub_100058688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a2;
  uint64_t v7 = (void *)swift_allocObject(&unk_100079140, 40LL, 7LL);
  v7[2] = a3;
  v7[3] = a4;
  v7[4] = a1;
  aBlock[4] = sub_1000167C0;
  void aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100040708;
  aBlock[3] = &unk_100079158;
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_retain(a4);
  uint64_t v14 = swift_errorRetain(a1);
  static DispatchQoS.unspecified.getter(v14);
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, &type metadata accessor for DispatchWorkItemFlags);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = &_swiftEmptyArrayStorage;
  sub_100026A28((unint64_t *)&qword_1000813C0, v19);
  uint64_t v21 = v20;
  uint64_t v22 = sub_10000FD7C(&qword_100081100);
  sub_100045D28((unint64_t *)&qword_1000813D0, &qword_100081100);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v22, v23, v15, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v18, v8);
  _Block_release(v8);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  return swift_release();
}

void sub_100058880()
{
  uint64_t v1 = v0;
  uint64_t v43 = v2;
  int v41 = v3;
  int v42 = v4;
  uint64_t v6 = v5;
  unint64_t v8 = v7;
  uint64_t v10 = v9;
  char v12 = v11;
  uint64_t v13 = sub_10000FD7C(&qword_100083858);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13, v16);
  uint64_t v17 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = *(void *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__tunnelQueue);
  sub_10002FCD8(v6, (uint64_t)v17, &qword_100083858);
  uint64_t v18 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v19 = (v18 + 48) & ~v18;
  uint64_t v20 = v19 + v15;
  unint64_t v21 = (v19 + v15 + 9) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v22 = swift_allocObject(&unk_100079050, v21 + 8, v18 | 7);
  *(void *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *(_BYTE *)(v22 + 24) = v12;
  *(void *)(v22 + 32) = v10;
  *(void *)(v22 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v8;
  sub_10002FD90((uint64_t)v17, v22 + v19, &qword_100083858);
  uint64_t v23 = (_BYTE *)(v22 + v20);
  *uint64_t v23 = v41;
  v23[1] = v42;
  uint64_t v24 = v43;
  *(void *)(v22 + v21) = v43;
  void v45[5] = sub_10005F6F8;
  v45[6] = v22;
  v45[1] = _NSConcreteStackBlock;
  v45[2] = 1107296256LL;
  uint64_t v25 = sub_100016C54((uint64_t)sub_100040708);
  uint64_t v26 = sub_100016D38();
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26, v28);
  sub_1000203EC();
  sub_100020434();
  sub_1000155D4(v10, v8);
  swift_bridgeObjectRetain(v24);
  static DispatchQoS.unspecified.getter(v29);
  uint64_t v30 = sub_100016C60();
  sub_10001241C();
  __chkstk_darwin(v31, v32);
  sub_10000FFCC();
  uint64_t v35 = v34 - v33;
  v45[0] = &_swiftEmptyArrayStorage;
  sub_100026A28((unint64_t *)&qword_1000813C0, v36);
  uint64_t v38 = v37;
  uint64_t v39 = sub_10000FD7C(&qword_100081100);
  sub_100045D28((unint64_t *)&qword_1000813D0, &qword_100081100);
  dispatch thunk of SetAlgebra.init<A>(_:)(v45, v39, v40, v30, v38);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v20, v35, v25);
  _Block_release(v25);
  off_100083860(v35, v30);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v20, v26);
  swift_release();
  sub_10000FF80();
}

void sub_100058AE8()
{
}

void sub_100058B08()
{
  v18[5] = sub_10005F64C;
  uint64_t v19 = v0;
  v18[1] = _NSConcreteStackBlock;
  v18[2] = 1107296256LL;
  int v3 = sub_100016C54((uint64_t)sub_100040708);
  uint64_t v4 = sub_100016D38();
  sub_10001241C();
  __chkstk_darwin(v5, v6);
  sub_10001DF18();
  uint64_t v7 = sub_10000FFDC();
  static DispatchQoS.unspecified.getter(v7);
  uint64_t v8 = sub_100016C60();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, &type metadata accessor for DispatchWorkItemFlags);
  sub_10000FFCC();
  uint64_t v12 = v11 - v10;
  v18[0] = &_swiftEmptyArrayStorage;
  sub_100026A28((unint64_t *)&qword_1000813C0, v13);
  uint64_t v15 = v14;
  uint64_t v16 = sub_10000FD7C(&qword_100081100);
  sub_100045D28((unint64_t *)&qword_1000813D0, &qword_100081100);
  dispatch thunk of SetAlgebra.init<A>(_:)(v18, v16, v17, v8, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v1, v12, v3);
  _Block_release(v3);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  swift_release(v19);
  sub_10000FF80();
}

void sub_100058C8C()
{
}

void sub_100058CB0()
{
  uint64_t v181 = v1;
  LODWORD(v189) = v2;
  unint64_t v4 = v3;
  uint64_t v6 = v5;
  int v187 = v7;
  uint64_t v188 = *v0;
  uint64_t v186 = type metadata accessor for RemotePairingError(0LL);
  uint64_t v182 = *(void *)(v186 - 8);
  sub_100026C0C();
  uint64_t v10 = __chkstk_darwin(v8, v9);
  unint64_t v183 = (char *)&v178 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10, v12);
  sub_10005F9BC((uint64_t)&v178 - v13);
  uint64_t v190 = sub_10000FD7C((uint64_t *)&unk_1000820D8);
  sub_100026C0C();
  __chkstk_darwin(v14, v15);
  sub_10001E144();
  sub_10005F9BC(v16);
  uint64_t v17 = type metadata accessor for BonjourService(0LL);
  __chkstk_darwin(v17, v18);
  sub_10000FFCC();
  uint64_t v19 = type metadata accessor for NetworkParamsType(0LL);
  uint64_t v194 = *(void *)(v19 - 8);
  uint64_t v195 = v19;
  sub_100026C0C();
  __chkstk_darwin(v20, v21);
  sub_10001E144();
  v193 = v22;
  uint64_t v23 = sub_10005F9F4();
  uint64_t v196 = *(void *)(v23 - 8);
  uint64_t v197 = v23;
  uint64_t v24 = *(void *)(v196 + 64);
  __chkstk_darwin(v23, v25);
  sub_10005F9BC((uint64_t)&v178 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v28 = __chkstk_darwin(v26, v27);
  uint64_t v30 = (char *)&v178 - v29;
  __chkstk_darwin(v28, v31);
  uint64_t v33 = (char *)&v178 - v32;
  v199 = *(dispatch_queue_s **)((char *)v0 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__tunnelQueue);
  OS_dispatch_queue.assertOnQueueHierarchy()();
  v192 = v0;
  uint64_t v34 = (uint64_t)v0 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state;
  sub_100016B48((uint64_t)v0 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state, (uint64_t)&v207, 1LL);
  v198 = (uint64_t *)v34;
  sub_10002FCD8(v34, (uint64_t)&v200, &qword_1000837D0);
  uint64_t v35 = v202;
  sub_100026B84((uint64_t)&v200, &qword_1000837D0);
  if (!v35)
  {
    sub_100031920();
    static CertificateUtilities.createTLSRawPublicKey(with:)();
    uint64_t v179 = *(void (**)(char *, char *, uint64_t))(v196 + 32);
    v179(v33, v30, v197);
    uint64_t v178 = Data.count.getter(v6, v4);
    os_log_t v180 = v33;
    if (v178 == 32)
    {
      int v41 = v193;
      uint64_t *v193 = v6;
      v41[1] = v4;
      sub_10005F940(32LL, enum case for NetworkParamsType.tcp(_:));
      uint64_t v67 = sub_1000155D4(v6, v4);
      uint64_t v68 = UUID.uuidString.getter(v67);
      uint64_t v70 = v69;
      uint64_t v71 = sub_10005F930(v68, enum case for BonjourService.tunnel(_:));
      uint64_t v72 = BonjourService.rawValue.getter(v71);
      uint64_t v74 = v73;
      sub_10005F98C();
      uint64_t v75 = sub_100031B6C();
      uint64_t v77 = String.utf8CString.getter(v75, v76);
      swift_bridgeObjectRelease(v70);
      uint64_t v78 = String.utf8CString.getter(v72, v74);
      sub_10001DDA4();
      bonjour_service = nw_advertise_descriptor_create_bonjour_service( (const char *)(v77 + 32),  (const char *)(v78 + 32),  0LL);
      sub_100016BD4();
      uint64_t v79 = sub_100012464();
      if (!bonjour_service)
      {
        os_log_type_t v122 = static os_log_type_t.error.getter(v79);
        uint64_t v123 = (os_log_s *)qword_1000845F0;
        os_log_type_t v124 = v122;
        BOOL v125 = os_log_type_enabled((os_log_t)qword_1000845F0, v122);
        uint64_t v58 = v198;
        if (v125)
        {
          uint64_t v126 = (uint64_t)v192;
          sub_100026C50((uint64_t)v192);
          uint64_t v127 = (uint8_t *)sub_1000122E0(12LL);
          uint64_t v128 = sub_1000122E0(32LL);
          v200 = (void **)v128;
          *(_DWORD *)uint64_t v127 = 136446210;
          uint64_t v129 = UUID.uuidString.getter(v128);
          sub_10005F9FC(v129, v130);
          v205 = (void *)v131;
          sub_10005F950(v131, (uint64_t)v206);
          sub_100026CA4(v126);
          sub_10001DC58();
          sub_100016D10( (void *)&_mh_execute_header,  v123,  v124,  "%{public}s: Unable to create network listener service for Tunnel connection",  v127);
          sub_100012450(v128);
          sub_10001001C(v128);
          uint64_t v66 = (uint64_t)v127;
          goto LABEL_15;
        }

uint64_t sub_100059D0C(uint64_t a1, char a2, int a3)
{
  uint64_t v6 = type metadata accessor for NetworkParamsType(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (uint64_t *)((char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  int v11 = (*(uint64_t (**)(uint64_t *, uint64_t))(v7 + 88))(v10, v6);
  int v63 = a3;
  if (v11 != enum case for NetworkParamsType.quic(_:))
  {
    if (v11 == enum case for NetworkParamsType.tcp(_:))
    {
      uint64_t v55 = (*(uint64_t (**)(uint64_t *, uint64_t))(v7 + 96))(v10, v6);
      uint64_t v56 = v10[1];
      uint64_t v57 = static os_log_type_t.default.getter(v55);
      os_log(_:dso:log:_:_:)( v57,  &_mh_execute_header,  qword_1000845F0,  "Creating a tunnel connection based on TCP",  41LL,  2LL,  &_swiftEmptyArrayStorage);
      __asm { BR              X10 }
    }

    _diagnoseUnexpectedEnumCase<A>(type:)(v6, v6);
    __break(1u);
    JUMPOUT(0x10005A4A4LL);
  }

  uint64_t v12 = (*(uint64_t (**)(uint64_t *, uint64_t))(v7 + 96))(v10, v6);
  uint64_t v13 = *v10;
  unint64_t v14 = v10[1];
  uint64_t v15 = v10[2];
  unint64_t v16 = v10[3];
  uint64_t v61 = (sec_identity *)v10[4];
  uint64_t v17 = v61;
  uint64_t v62 = v13;
  uint64_t v18 = static os_log_type_t.default.getter(v12);
  os_log(_:dso:log:_:_:)( v18,  &_mh_execute_header,  qword_1000845F0,  "Creating a tunnel connection based on QUIC",  42LL,  2LL,  &_swiftEmptyArrayStorage);
  type metadata accessor for NWProtocolQUIC.Options(0LL);
  uint64_t v19 = NWProtocolQUIC.Options.__allocating_init(alpn:)(&off_1000763C0);
  dispatch thunk of NWProtocolQUIC.Options.maxDatagramFrameSize.setter(1500LL);
  dispatch thunk of NWProtocolQUIC.Options.initialPacketSize.setter(1350LL);
  dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamsUnidirectional.setter(0LL);
  uint64_t v20 = dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamsBidirectional.setter(128LL);
  uint64_t v21 = (sec_protocol_options *)dispatch thunk of NWProtocolQUIC.Options.securityProtocolOptions.getter(v20);
  sec_protocol_options_set_local_identity(v21, v17);
  uint64_t v22 = swift_unknownObjectRelease(v21);
  uint64_t v23 = dispatch thunk of NWProtocolQUIC.Options.securityProtocolOptions.getter(v22);
  char v24 = a2;
  uint64_t v25 = sub_10000FD7C(&qword_100083850);
  uint64_t v26 = swift_allocObject(v25, 48LL, 7LL);
  __int128 v60 = xmmword_100062930;
  *(_OWORD *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100062930;
  *(void *)(v26 + 32) = v15;
  *(void *)(v26 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v16;
  sub_1000155D4(v15, v16);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v26);
  sec_protocol_options_set_server_raw_public_key_certificates(v23, isa);
  swift_unknownObjectRelease(v23);

  uint64_t v29 = dispatch thunk of NWProtocolQUIC.Options.securityProtocolOptions.getter(v28);
  uint64_t v30 = v25;
  LOBYTE(v25) = v24;
  uint64_t v31 = swift_allocObject(v30, 48LL, 7LL);
  *(_OWORD *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = v60;
  uint64_t v32 = v62;
  *(void *)(v31 + 32) = v62;
  *(void *)(v31 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v14;
  sub_1000155D4(v32, v14);
  Class v33 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v31);
  sec_protocol_options_set_client_raw_public_key_certificates(v29, v33);
  swift_unknownObjectRelease(v29);

  uint64_t v35 = (sec_protocol_options *)dispatch thunk of NWProtocolQUIC.Options.securityProtocolOptions.getter(v34);
  sec_protocol_options_set_peer_authentication_required(v35, 1);
  swift_unknownObjectRelease(v35);
  type metadata accessor for NWParameters(0LL);
  uint64_t v36 = NWParameters.__allocating_init(quic:)(v19);
  sub_100015644(v15, v16);
  sub_100015644(v32, v14);
  uint64_t v37 = swift_unknownObjectRelease(v61);
  if ((v25 & 1) != 0)
  {
    uint64_t v38 = static os_log_type_t.default.getter(v37);
    uint64_t v39 = os_log(_:dso:log:_:_:)( v38,  &_mh_execute_header,  qword_1000845F0,  "Creating peer-to-peer tunnel listener",  37LL,  2LL,  &_swiftEmptyArrayStorage);
    uint64_t v40 = (nw_parameters *)NWParameters.nw.getter(v39);
    nw_parameters_set_include_peer_to_peer(v40, 1);
    swift_unknownObjectRelease(v40);
  }

  uint64_t v41 = sub_10000FD7C(&qword_100083848);
  uint64_t v42 = type metadata accessor for NWInterface.InterfaceType(0LL);
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = *(void *)(v43 + 72);
  uint64_t v45 = *(unsigned __int8 *)(v43 + 80);
  uint64_t v46 = (v45 + 32) & ~v45;
  uint64_t v47 = v45 | 7;
  uint64_t v48 = swift_allocObject(v41, v46 + v44, v45 | 7);
  *(_OWORD *)(v48 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100062930;
  uint64_t v49 = enum case for NWInterface.InterfaceType.cellular(_:);
  uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 104);
  v50(v48 + v46, enum case for NWInterface.InterfaceType.cellular(_:), v42);
  uint64_t v51 = NWParameters.prohibitedInterfaceTypes.setter(v48);
  uint64_t v52 = NWParameters.nw.getter(v51);
  nw_parameters_set_no_wake_from_sleep(v52, 1LL);
  uint64_t v53 = swift_unknownObjectRelease(v52);
  if ((v63 & 1) != 0)
  {
    os_log_type_t v54 = (nw_parameters *)NWParameters.nw.getter(v53);
    nw_parameters_set_local_only(v54, 1);
    swift_unknownObjectRelease(v54);
  }

  else
  {
    uint64_t v58 = swift_allocObject(v41, v46 + 2 * v44, v47);
    *(_OWORD *)(v58 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100062960;
    v50(v58 + v46, v49, v42);
    v50(v58 + v46 + v44, enum case for NWInterface.InterfaceType.loopback(_:), v42);
    NWParameters.prohibitedInterfaceTypes.setter(v58);
  }

  return v36;
}

uint64_t sub_10005A4C4(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v7 = a3 + 16;
  swift_beginAccess(a3 + 16, v16, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v7);
  if (result)
  {
    uint64_t v9 = result;
    if ((a2 & 1) != 0)
    {
      uint64_t v13 = type metadata accessor for NWQUICTunnelConnection(0LL);
      swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
      uint64_t v14 = swift_unknownObjectRetain(a1);
      sub_100041B4C(v14, a4 & 1, 0LL);
      sub_10005F490(v15, v9);
    }

    else
    {
      uint64_t v10 = type metadata accessor for NWObjcTunnelConnectionWrapper(0LL);
      swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
      uint64_t v11 = swift_unknownObjectRetain(a1);
      sub_100040924(v11, a4 & 1, 0LL);
      sub_10005F360(v12, v9);
    }

    swift_release();
    return swift_release();
  }

  return result;
}

uint64_t sub_10005A5AC(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000FD7C((uint64_t *)&unk_1000820D8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v31[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v33, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v11 = result;
    if ((a1 & 1) != 0)
    {
      os_log_type_t v20 = static os_log_type_t.error.getter(result);
      uint64_t v21 = (os_log_s *)qword_1000845F0;
      os_log_type_t v22 = v20;
      if (os_log_type_enabled((os_log_t)qword_1000845F0, v20))
      {
        swift_retain_n(v11, 2LL);
        uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v24 = swift_slowAlloc(32LL, -1LL);
        *(_DWORD *)uint64_t v23 = 136446210;
        v31[0] = v24;
        uint64_t v25 = UUID.uuidString.getter(v24);
        uint64_t v27 = v26;
        sub_100045370(v25, v26, v31);
        uint64_t v32 = v28;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v23 + 4, v23 + 12);
        swift_release_n(v11, 2LL);
        swift_bridgeObjectRelease(v27);
        _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "%{public}s: Tunnel listener has stopped while starting",  v23,  0xCu);
        swift_arrayDestroy(v24, 1LL);
        swift_slowDealloc(v24, -1LL, -1LL);
        swift_slowDealloc(v23, -1LL, -1LL);
      }
    }

    else
    {
      uint64_t port = nw_listener_get_port(*(nw_listener_t *)(a3 + 32));
      uint64_t v13 = v11 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state;
      swift_beginAccess(v11 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state, v31, 1LL, 0LL);
      uint64_t v14 = *(void (**)(char *))(v13 + 128);
      if (v14)
      {
        uint64_t v15 = *(void *)(v13 + 136);
        uint64_t v16 = swift_retain(v15);
        uint64_t v17 = CertificateUtilities.RawTLSPublicKeyInfo.publicKeyDERData.getter(v16);
        ListenerStartedResponse.init(port:deviceRawPublicKey:)(port, v17, v18);
        swift_storeEnumTagMultiPayload(v9, v6, 0LL);
        v14(v9);
        sub_10002FBF0((uint64_t)v14, v15);
        sub_100026B84((uint64_t)v9, (uint64_t *)&unk_1000820D8);
        uint64_t v19 = *(void *)(v13 + 128);
      }

      else
      {
        uint64_t v19 = 0LL;
      }

      uint64_t v29 = *(void *)(v13 + 136);
      *(void *)(v13 + 128) = 0LL;
      *(void *)(v13 + 136) = 0LL;
      sub_10002FBF0(v19, v29);
      OS_dispatch_queue.assertOnQueueHierarchy()();
    }

    return swift_release();
  }

  return result;
}

uint64_t sub_10005A844(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RemotePairingError(0LL);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v24, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1);
  if (result)
  {
    uint64_t v7 = result;
    os_log_type_t v8 = static os_log_type_t.error.getter(result);
    uint64_t v9 = (os_log_s *)qword_1000845F0;
    os_log_type_t v10 = v8;
    uint64_t v11 = os_log_type_enabled((os_log_t)qword_1000845F0, v8);
    if ((_DWORD)v11)
    {
      swift_retain_n(v7, 2LL);
      uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v13 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v12 = 136446210;
      uint64_t v23 = v13;
      uint64_t v14 = UUID.uuidString.getter(v13);
      uint64_t v16 = v15;
      sub_100045370(v14, v15, &v23);
      uint64_t v22 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v12 + 4, v12 + 12);
      swift_release_n(v7, 2LL);
      swift_bridgeObjectRelease(v16);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s: Tunnel tunnelListenerTimeout", v12, 0xCu);
      swift_arrayDestroy(v13, 1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
      uint64_t v11 = swift_slowDealloc(v12, -1LL, -1LL);
    }

    static RemotePairingError.tunnelError.getter(v11);
    sub_100026A28( (unint64_t *)&unk_1000819E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
    uint64_t v19 = swift_allocError(v2, v18, 0LL, 0LL);
    sub_100026A28( (unint64_t *)&unk_1000813E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
    Error<>.init(_:_:)(v5, 0xD000000000000038LL, 0x800000010006B550LL, v2, v20);
    sub_10005DAF8(v19);
    swift_errorRelease(v19);
    return swift_release();
  }

  return result;
}

uint64_t sub_10005AAA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TunnelConnectionState(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  os_log_type_t v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v77, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v12 = result;
    uint64_t v13 = a3 + 16;
    swift_beginAccess(v13, v75, 0LL, 0LL);
    sub_10002FCD8(v13, (uint64_t)&v71, &qword_100083838);
    if (!*((void *)&v72 + 1))
    {
      sub_100026B84((uint64_t)&v71, &qword_100083838);
      uint64_t v73 = 0LL;
      __int128 v71 = 0u;
      __int128 v72 = 0u;
      swift_beginAccess(v13, v76, 1LL, 0LL);
      uint64_t v29 = v13;
LABEL_23:
      sub_10005F5F8((uint64_t)&v71, v29, &qword_100083838);
      return swift_release();
    }

    sub_100026BF0(&v71, (uint64_t)v76);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
    int v14 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v10, v6);
    if (v14 == enum case for TunnelConnectionState.ready(_:))
    {
      uint64_t v15 = v12 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state;
      swift_beginAccess(v12 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state, &v66, 1LL, 0LL);
      sub_10005E938(v15, (uint64_t)&v71);
      sub_10002FCD8((uint64_t)v74, (uint64_t)&v64, &qword_1000837D8);
      sub_10005E96C(&v71);
      if (v65)
      {
        uint64_t v16 = sub_100026BF0(&v64, (uint64_t)&v67);
        os_log_type_t v17 = static os_log_type_t.default.getter(v16);
        uint64_t v18 = (os_log_s *)qword_1000845F0;
        os_log_type_t v19 = v17;
        if (os_log_type_enabled((os_log_t)qword_1000845F0, v17))
        {
          swift_retain_n(v12, 2LL);
          uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v21 = swift_slowAlloc(32LL, -1LL);
          *(_DWORD *)uint64_t v20 = 136446210;
          *(void *)&__int128 v71 = v21;
          uint64_t v22 = UUID.uuidString.getter(v21);
          uint64_t v24 = v23;
          sub_100045370(v22, v23, (uint64_t *)&v71);
          *(void *)&__int128 v64 = v25;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, (char *)&v64 + 8, v20 + 4, v20 + 12);
          swift_release_n(v12, 2LL);
          swift_bridgeObjectRelease(v24);
          _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "%{public}s: Additional connection completed setup. Injecting into tunnel",  v20,  0xCu);
          swift_arrayDestroy(v21, 1LL);
          swift_slowDealloc(v21, -1LL, -1LL);
          swift_slowDealloc(v20, -1LL, -1LL);
        }

        uint64_t v26 = v69;
        uint64_t v27 = v70;
        sub_10000FF14(&v67, v69);
        dispatch thunk of AnyTunnelEndpoint.serverInjectAdditionalConnection(_:)(v76, v26, v27);
        sub_10000FF38(v76);
        uint64_t v28 = &v67;
        goto LABEL_22;
      }

      sub_100026B84((uint64_t)&v64, &qword_1000837D8);
      os_log_type_t v43 = static os_log_type_t.default.getter(v42);
      uint64_t v44 = (os_log_s *)qword_1000845F0;
      os_log_type_t v45 = v43;
      if (os_log_type_enabled((os_log_t)qword_1000845F0, v43))
      {
        swift_retain_n(v12, 2LL);
        uint64_t v46 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v47 = swift_slowAlloc(32LL, -1LL);
        *(_DWORD *)uint64_t v46 = 136446210;
        *(void *)&__int128 v71 = v47;
        int v63 = v46 + 4;
        uint64_t v48 = UUID.uuidString.getter(v47);
        uint64_t v50 = v49;
        sub_100045370(v48, v49, (uint64_t *)&v71);
        uint64_t v67 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v63, v46 + 12);
        swift_release_n(v12, 2LL);
        swift_bridgeObjectRelease(v50);
        _os_log_impl( (void *)&_mh_execute_header,  v44,  v45,  "%{public}s: Initial connection completed setup. Proceeding to create tunnel",  v46,  0xCu);
        swift_arrayDestroy(v47, 1LL);
        swift_slowDealloc(v47, -1LL, -1LL);
        swift_slowDealloc(v46, -1LL, -1LL);
      }

      sub_10005B2C4();
      if (*(void *)(v15 + 96))
      {
        uint64_t v52 = swift_retain(*(void *)(v15 + 96));
        dispatch thunk of DispatchWorkItem.cancel()(v52);
        swift_release();
      }

      *(void *)(v15 + 96) = 0LL;
      swift_release();
      OS_dispatch_queue.assertOnQueueHierarchy()();
    }

    else
    {
      if (v14 != enum case for TunnelConnectionState.stopped(_:))
      {
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x206E776F6E6B6E55LL,  0xEC00000065736163LL,  "remotepairingdeviced/DeviceTunnel.swift",  39LL,  2LL,  236LL,  0);
        __break(1u);
        return result;
      }

      uint64_t v30 = v12 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state;
      swift_beginAccess(v12 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state, &v64, 0LL, 0LL);
      sub_10005E938(v30, (uint64_t)&v71);
      sub_10002FCD8((uint64_t)v74, (uint64_t)&v67, &qword_1000837D8);
      sub_10005E96C(&v71);
      uint64_t v31 = v69;
      sub_100026B84((uint64_t)&v67, &qword_1000837D8);
      os_log_type_t v33 = static os_log_type_t.default.getter(v32);
      uint64_t v34 = (os_log_s *)qword_1000845F0;
      BOOL v35 = os_log_type_enabled((os_log_t)qword_1000845F0, v33);
      if (v31)
      {
        if (v35)
        {
          swift_retain_n(v12, 2LL);
          uint64_t v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v37 = swift_slowAlloc(32LL, -1LL);
          *(_DWORD *)uint64_t v36 = 136446210;
          *(void *)&__int128 v71 = v37;
          uint64_t v38 = UUID.uuidString.getter(v37);
          uint64_t v40 = v39;
          sub_100045370(v38, v39, (uint64_t *)&v71);
          uint64_t v67 = v41;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v36 + 4, v36 + 12);
          swift_release_n(v12, 2LL);
          swift_bridgeObjectRelease(v40);
          _os_log_impl( (void *)&_mh_execute_header,  v34,  v33,  "%{public}s: Not tearing down tunnel on connection failure since endpoint is up and running and will handle failure",  v36,  0xCu);
          swift_arrayDestroy(v37, 1LL);
          swift_slowDealloc(v37, -1LL, -1LL);
          swift_slowDealloc(v36, -1LL, -1LL);
        }
      }

      else
      {
        if (v35)
        {
          swift_retain_n(v12, 2LL);
          uint64_t v53 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v54 = swift_slowAlloc(32LL, -1LL);
          *(_DWORD *)uint64_t v53 = 136446210;
          *(void *)&__int128 v71 = v54;
          uint64_t v55 = UUID.uuidString.getter(v54);
          uint64_t v57 = v56;
          sub_100045370(v55, v56, (uint64_t *)&v71);
          uint64_t v67 = v58;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v53 + 4, v53 + 12);
          swift_release_n(v12, 2LL);
          swift_bridgeObjectRelease(v57);
          _os_log_impl( (void *)&_mh_execute_header,  v34,  v33,  "%{public}s: Tearing down tunnel on connection failure since endpoint is nil",  v53,  0xCu);
          swift_arrayDestroy(v54, 1LL);
          swift_slowDealloc(v54, -1LL, -1LL);
          swift_slowDealloc(v53, -1LL, -1LL);
        }

        uint64_t v59 = type metadata accessor for RemotePairingError(0LL);
        sub_100026A28( (unint64_t *)&unk_1000819E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
        uint64_t v61 = swift_allocError(v59, v60, 0LL, 0LL);
        sub_100026A28( (unint64_t *)&unk_1000813E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RemotePairingError);
        static Error<>.networkingError.getter(v59, v62);
        sub_10005DAF8(v61);
        swift_errorRelease(v61);
      }
    }

    uint64_t v28 = v76;
LABEL_22:
    sub_10000FF38(v28);
    uint64_t v73 = 0LL;
    __int128 v71 = 0u;
    __int128 v72 = 0u;
    swift_beginAccess(v13, v76, 1LL, 0LL);
    uint64_t v29 = v13;
    goto LABEL_23;
  }

  return result;
}

void sub_10005B2C4()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v97 = type metadata accessor for TunnelInterfaceParameters(0LL);
  uint64_t v96 = *(void *)(v97 - 8);
  sub_100026C0C();
  __chkstk_darwin(v4, v5);
  sub_10001E144();
  sub_10005F9BC(v6);
  uint64_t v7 = *(void **)(v0 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__tunnelQueue);
  sub_10005F8D8();
  type metadata accessor for SystemXPCConnection(0LL);
  sub_100031920();
  uint64_t v8 = (void *)static SystemXPCConnection.connectionToMachService(name:privilegedService:targetQueue:)();
  uint64_t v10 = v9;
  uint64_t v11 = v0 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state;
  sub_100016B48(v0 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state, (uint64_t)&v113, 1LL);
  *(void *)(v11 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v8;
  *(void *)(v11 + 88) = v10;
  sub_100020434();
  sub_100012464();
  sub_10005F8D8();
  uint64_t v12 = *v8;
  sub_100026D98();
  uint64_t v92 = v10;
  dispatch thunk of XPCPeerConnection.setEventHandler(_:)(sub_10005E998, v0, v12, v10);
  swift_release();
  uint64_t v13 = sub_100020434();
  dispatch thunk of XPCConnection.activate()(v13);
  uint64_t v93 = v8;
  uint64_t v14 = sub_1000124B8();
  LOBYTE(v12) = static Defaults.tunnelUseSkywalk.getter(v14);
  sub_10005F9B4();
  uint64_t v91 = v3;
  sub_10002697C((uint64_t)v3, (uint64_t)v112);
  if ((v12 & 1) != 0)
  {
    uint64_t v15 = (uint64_t *)&unk_100083800;
    uint64_t v16 = sub_10003C188();
    sub_100031CC0(v16);
    uint64_t v17 = sub_10005F90C((uint64_t)v7);
    uint64_t v18 = (unint64_t *)&unk_100083808;
  }

  else
  {
    uint64_t v15 = (uint64_t *)&unk_1000837E0;
    uint64_t v16 = sub_10003C188();
    sub_100031CC0(v16);
    uint64_t v17 = sub_10005F90C((uint64_t)v7);
    uint64_t v18 = (unint64_t *)&unk_1000837E8;
  }

  sub_100045D28(v18, v15);
  v112[3] = v16;
  v112[4] = v19;
  v112[0] = v17;
  sub_10005F924();
  sub_100016B48(v11, (uint64_t)v108, 33LL);
  sub_10005F5F8((uint64_t)&v109, v11 + 40, &qword_1000837D8);
  swift_endAccess(v108);
  sub_10005F8D8();
  sub_10005F924();
  uint64_t v20 = sub_100016BCC((uint64_t)&unk_100078E98, 64LL);
  *(void *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  uint64_t v90 = v20;
  sub_100026BF0(&v109, v20 + 24);
  uint64_t v94 = v1;
  sub_100026D98();
  uint64_t v21 = static Data.randomBytes(ofLength:)(5LL);
  unint64_t v23 = v22;
  *(void *)&v108[0] = sub_100057F54((uint64_t)&off_1000763F0);
  *((void *)&v108[0] + 1) = v24;
  sub_1000155D4(*(uint64_t *)&v108[0], v24);
  sub_10005FA2C();
  sub_10005FA20();
  uint64_t v89 = v21;
  unint64_t v88 = v23;
  sub_10005FA0C(v21);
  uint64_t v25 = sub_100031B6C();
  sub_100015644(v25, v26);
  __int128 v109 = v108[0];
  sub_10005EFA0(0LL, 0x9000000000000LL);
  __int128 v27 = v109;
  uint64_t v28 = type metadata accessor for IPv6Address(0LL);
  v87[1] = v87;
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28, v30);
  uint64_t v107 = v31;
  os_log_type_t v101 = (char *)((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = (char *)((char *)v87 - v101);
  uint64_t v33 = sub_10000FD7C(&qword_1000837F0);
  uint64_t v99 = v87;
  __chkstk_darwin(v33, v34);
  uint64_t v106 = v35;
  unint64_t v100 = ((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v36 = (char *)v87 - v100;
  uint64_t v37 = sub_100057F54((uint64_t)&off_100076418);
  unint64_t v39 = v38;
  __int128 v109 = v27;
  uint64_t v104 = *((void *)&v27 + 1);
  uint64_t v105 = v27;
  sub_1000155D4(v27, *((unint64_t *)&v27 + 1));
  sub_10005EFA0(v37, v39);
  sub_100015644(v37, v39);
  __int128 v40 = v109;
  uint64_t v41 = sub_10000FD7C(&qword_1000837F8);
  uint64_t v42 = *(void *)(*(void *)(v41 - 8) + 64LL);
  __chkstk_darwin(v41, v43);
  unint64_t v98 = (v42 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v44 = (char *)v87 - v98;
  type metadata accessor for NWInterface(0LL);
  sub_10005F960((uint64_t)v44);
  IPv6Address.init(_:_:)(v40, *((void *)&v40 + 1), v44);
  sub_10005F970((uint64_t)v36);
  if (v45)
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v102 = v29;
  uint64_t v103 = v32;
  sub_10005F9EC((uint64_t)v32, (uint64_t)v36);
  sub_10004F76C();
  uint64_t v99 = v87;
  uint64_t v48 = __chkstk_darwin(v46, v47);
  uint64_t v49 = (char *)((char *)v87 - v101);
  os_log_type_t v101 = (char *)v87;
  __chkstk_darwin(v48, v50);
  uint64_t v51 = (char *)v87 - v100;
  uint64_t v52 = sub_100057F54((uint64_t)&off_100076440);
  *(void *)&__int128 v109 = sub_10005F9C8();
  *((void *)&v109 + 1) = v53;
  sub_1000155D4(v109, v53);
  sub_10005FA20();
  uint64_t v54 = sub_10005FA0C(v52);
  __int128 v55 = v109;
  __chkstk_darwin(v54, v56);
  uint64_t v57 = (char *)v87 - v98;
  sub_10005F960((uint64_t)v87 - v98);
  IPv6Address.init(_:_:)(v55, *((void *)&v55 + 1), v57);
  sub_10005F970((uint64_t)v51);
  if (v45)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }

  unint64_t v100 = (unint64_t)v49;
  sub_10005F9EC((uint64_t)v49, (uint64_t)v51);
  sub_10004F76C();
  uint64_t v60 = __chkstk_darwin(v58, v59);
  unint64_t v62 = (v61 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  int v63 = (char *)v87 - v62;
  __chkstk_darwin(v60, v64);
  uint64_t v66 = (char *)v87 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100031920();
  IPv6Address.init(_:)(0xD000000000000015LL);
  sub_10005F970((uint64_t)v66);
  if (v45) {
    goto LABEL_12;
  }
  uint64_t v106 = v87;
  uint64_t v67 = sub_10005F9EC((uint64_t)v87 - v62, (uint64_t)v66);
  __chkstk_darwin(v67, v68);
  uint64_t v69 = (char *)v87 - v62;
  uint64_t v70 = *(uint64_t (**)(char *, char *, uint64_t))(v102 + 16);
  uint64_t v71 = v70((char *)v87 - v62, v103, v28);
  __chkstk_darwin(v71, v72);
  uint64_t v73 = (char *)v87 - v62;
  v70((char *)v87 - v62, (char *)v87 - v62, v28);
  uint64_t v74 = v91[3];
  uint64_t v75 = v91[4];
  sub_10000FF14(v91, v74);
  uint64_t v76 = dispatch thunk of TunnelConnection.maxSupportedMTU.getter(v74, v75);
  if ((v76 & 0x10000) != 0)
  {
    type metadata accessor for VirtualInterface(0LL);
    uint64_t v76 = static VirtualInterface.defaultMTU.getter();
  }

  uint64_t v77 = v95;
  TunnelInterfaceParameters.init(address:netmask:mtu:)(v69, v73, v76);
  sub_10005F924();
  uint64_t v78 = v110;
  uint64_t v79 = v111;
  sub_10000FF14(&v109, v110);
  sub_10002697C((uint64_t)v112, (uint64_t)v108);
  char v80 = (void *)sub_100016BCC((uint64_t)&unk_100078EC0, 96LL);
  v80[2] = v94;
  sub_100026BF0(v108, (uint64_t)(v80 + 3));
  uint64_t v81 = v93;
  uint64_t v82 = v92;
  v80[8] = v93;
  v80[9] = v82;
  uint64_t v83 = v90;
  v80[10] = sub_10005E9C4;
  v80[11] = v83;
  swift_retain(v81);
  sub_100020454();
  swift_retain(v83);
  uint64_t v84 = v100;
  dispatch thunk of AnyTunnelEndpoint.establishServerTunnel(localParameters:remoteAddress:completion:)( v77,  v100,  sub_10005F174,  v80,  v78,  v79);
  sub_1000124B8();
  uint64_t v85 = sub_10005F9C8();
  sub_100015644(v85, v86);
  sub_100015644(v89, v88);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v77, v97);
  sub_10005FA38((uint64_t)v63);
  sub_10005FA38(v84);
  sub_10005FA38((uint64_t)v103);
  sub_10000FF38(v112);
  sub_10000FF38(&v109);
  sub_10004F76C();
  sub_10004F76C();
  sub_10004F76C();
  sub_10000FF80();
}

uint64_t sub_10005BB20(uint64_t a1, uint64_t a2)
{
  uint64_t v80 = a2;
  uint64_t v3 = type metadata accessor for XPCDictionary(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v6 = __chkstk_darwin(v3, v5);
  os_log_t v77 = (os_log_t)((char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v78 = (char *)&v75 - v10;
  __chkstk_darwin(v9, v11);
  uint64_t v79 = (char *)&v75 - v12;
  uint64_t v13 = type metadata accessor for XPCError(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v76 = (char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v21 = (char *)&v75 - v20;
  __chkstk_darwin(v19, v22);
  unint64_t v24 = (char *)&v75 - v23;
  uint64_t v25 = sub_10000FD7C(&qword_100081A90);
  __chkstk_darwin(v25, v26);
  uint64_t v28 = (char *)&v75 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10002FCD8(a1, (uint64_t)v28, &qword_100081A90);
  if (swift_getEnumCaseMultiPayload(v28, v25) == 1)
  {
    uint64_t v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v24, v28, v13);
    os_log_type_t v30 = static os_log_type_t.error.getter(v29);
    uint64_t v31 = (os_log_s *)qword_1000845F0;
    uint64_t v32 = *(char **)(v14 + 16);
    ((void (*)(char *, char *, uint64_t))v32)(v21, v24, v13);
    if (os_log_type_enabled(v31, v30))
    {
      uint64_t v33 = v80;
      swift_retain_n(v80, 2LL);
      uint64_t v34 = swift_slowAlloc(22LL, -1LL);
      uint64_t v79 = v32;
      uint64_t v35 = v34;
      uint64_t v36 = swift_slowAlloc(64LL, -1LL);
      uint64_t v78 = (char *)v36;
      uint64_t v82 = v36;
      *(_DWORD *)uint64_t v35 = 136446466;
      os_log_t v77 = v31;
      uint64_t v37 = UUID.uuidString.getter(v36);
      uint64_t v39 = v38;
      sub_100045370(v37, v38, &v82);
      uint64_t v81 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v35 + 4, v35 + 12);
      swift_release_n(v33, 2LL);
      swift_bridgeObjectRelease(v39);
      *(_WORD *)(v35 + 12) = 2082;
      uint64_t v41 = v76;
      ((void (*)(char *, char *, uint64_t))v79)(v76, v21, v13);
      uint64_t v42 = String.init<A>(describing:)(v41, v13);
      uint64_t v44 = v43;
      sub_100045370(v42, v43, &v82);
      uint64_t v81 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v35 + 14, v35 + 22);
      swift_bridgeObjectRelease(v44);
      uint64_t v46 = *(void (**)(char *, uint64_t))(v14 + 8);
      v46(v21, v13);
      _os_log_impl( (void *)&_mh_execute_header,  v77,  v30,  "%{public}s: Tunnel recieved error on remoted XPC connection: %{public}s",  (uint8_t *)v35,  0x16u);
      uint64_t v47 = v78;
      swift_arrayDestroy(v78, 2LL);
      swift_slowDealloc(v47, -1LL, -1LL);
      uint64_t v48 = v35;
      uint64_t v32 = v79;
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    else
    {
      uint64_t v46 = *(void (**)(char *, uint64_t))(v14 + 8);
      v46(v21, v13);
    }

    sub_100026A28(&qword_100083818, (uint64_t (*)(uint64_t))&type metadata accessor for XPCError);
    uint64_t v72 = swift_allocError(v13, v71, 0LL, 0LL);
    ((void (*)(uint64_t, char *, uint64_t))v32)(v73, v24, v13);
    sub_10005DAF8(v72);
    swift_errorRelease(v72);
    return ((uint64_t (*)(char *, uint64_t))v46)(v24, v13);
  }

  else
  {
    uint64_t v49 = v79;
    uint64_t v50 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 32))(v79, v28, v3);
    os_log_type_t v51 = static os_log_type_t.error.getter(v50);
    uint64_t v52 = (os_log_s *)qword_1000845F0;
    unint64_t v53 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    v53(v78, v49, v3);
    os_log_type_t v54 = v51;
    if (os_log_type_enabled(v52, v51))
    {
      uint64_t v55 = v80;
      swift_retain_n(v80, 2LL);
      uint64_t v56 = swift_slowAlloc(22LL, -1LL);
      uint64_t v57 = swift_slowAlloc(64LL, -1LL);
      uint64_t v76 = (char *)v57;
      uint64_t v82 = v57;
      *(_DWORD *)uint64_t v56 = 136446466;
      uint64_t v58 = UUID.uuidString.getter(v57);
      uint64_t v60 = v59;
      sub_100045370(v58, v59, &v82);
      uint64_t v81 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v56 + 4, v56 + 12);
      swift_release_n(v55, 2LL);
      swift_bridgeObjectRelease(v60);
      *(_WORD *)(v56 + 12) = 2082;
      os_log_t v62 = v77;
      int v63 = v78;
      v53((char *)v77, v78, v3);
      uint64_t v64 = String.init<A>(describing:)(v62, v3);
      uint64_t v66 = v65;
      sub_100045370(v64, v65, &v82);
      uint64_t v81 = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v56 + 14, v56 + 22);
      swift_bridgeObjectRelease(v66);
      uint64_t v68 = *(void (**)(char *, uint64_t))(v4 + 8);
      v68(v63, v3);
      _os_log_impl( (void *)&_mh_execute_header,  v52,  v54,  "%{public}s: Unexpected message on XPC connection: %{public}s",  (uint8_t *)v56,  0x16u);
      uint64_t v69 = v76;
      swift_arrayDestroy(v76, 2LL);
      swift_slowDealloc(v69, -1LL, -1LL);
      swift_slowDealloc(v56, -1LL, -1LL);
      return ((uint64_t (*)(char *, uint64_t))v68)(v79, v3);
    }

    else
    {
      uint64_t v74 = *(void (**)(char *, uint64_t))(v4 + 8);
      v74(v78, v3);
      return ((uint64_t (*)(char *, uint64_t))v74)(v79, v3);
    }
  }

void *sub_10005C0BC(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    uint64_t v5 = swift_errorRetain(a1);
    os_log_type_t v6 = static os_log_type_t.error.getter(v5);
    uint64_t v7 = (os_log_s *)qword_1000845F0;
    os_log_type_t v8 = v6;
    if (os_log_type_enabled((os_log_t)qword_1000845F0, v6))
    {
      swift_errorRetain(a1);
      swift_retain(a2);
      swift_errorRetain(a1);
      swift_retain(a2);
      uint64_t v9 = swift_slowAlloc(22LL, -1LL);
      uint64_t v10 = swift_slowAlloc(64LL, -1LL);
      v93[0] = v10;
      *(_DWORD *)uint64_t v9 = 136446466;
      uint64_t v11 = UUID.uuidString.getter(v10);
      uint64_t v13 = v12;
      sub_100045370(v11, v12, v93);
      *(void *)&__int128 v90 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, (char *)&v90 + 8, v9 + 4, v9 + 12);
      swift_release_n(a2, 2LL);
      swift_bridgeObjectRelease(v13);
      *(_WORD *)(v9 + 12) = 2082;
      *(void *)&__int128 v90 = a1;
      swift_errorRetain(a1);
      uint64_t v15 = sub_10000FD7C(&qword_100081A10);
      uint64_t v16 = String.init<A>(describing:)(&v90, v15);
      uint64_t v18 = v17;
      sub_100045370(v16, v17, v93);
      *(void *)&__int128 v90 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, (char *)&v90 + 8, v9 + 14, v9 + 22);
      swift_bridgeObjectRelease(v18);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "%{public}s: Tunnel setup error: %{public}s",  (uint8_t *)v9,  0x16u);
      swift_arrayDestroy(v10, 2LL);
      swift_slowDealloc(v10, -1LL, -1LL);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    swift_errorRetain(a1);
    sub_10005DAF8(a1);
    swift_errorRelease(a1);
    return (void *)swift_errorRelease(a1);
  }

  uint64_t v22 = a3[3];
  uint64_t v23 = a3[4];
  sub_10000FF14(a3, v22);
  uint64_t result = dispatch thunk of AnyTunnelEndpoint.localTunnelInterface.getter(&v90, v22, v23);
  if (!v91)
  {
    __break(1u);
    goto LABEL_13;
  }

  sub_100026BF0(&v90, (uint64_t)v93);
  uint64_t v24 = type metadata accessor for IPv6Address(0LL);
  uint64_t v81 = &v74;
  uint64_t v83 = *(void *)(v24 - 8);
  __chkstk_darwin(v24, v25);
  uint64_t v82 = v26;
  unint64_t v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v28 = (char *)&v74 - v27;
  uint64_t v29 = a3[3];
  uint64_t v30 = a3[4];
  sub_10000FF14(a3, v29);
  uint64_t v31 = sub_10000FD7C(&qword_1000837F0);
  __chkstk_darwin(v31, v32);
  uint64_t v34 = (char *)&v74 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  dispatch thunk of AnyTunnelEndpoint.remoteAddress.getter(v29, v30);
  uint64_t result = (void *)sub_10001D9C8((uint64_t)v34, 1LL, v24);
  if ((_DWORD)result == 1)
  {
LABEL_13:
    __break(1u);
    return result;
  }

  uint64_t v35 = v83;
  uint64_t v36 = (*(uint64_t (**)(char *, char *, uint64_t))(v83 + 32))((char *)&v74 - v27, v34, v24);
  os_log_type_t v37 = static os_log_type_t.default.getter(v36);
  uint64_t v38 = (os_log_s *)qword_1000845F0;
  sub_10002697C((uint64_t)v93, (uint64_t)&v90);
  sub_10002697C((uint64_t)v93, (uint64_t)v87);
  __chkstk_darwin(v39, v40);
  uint64_t v41 = (char *)&v74 - v27;
  uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
  v42(v41, v28, v24);
  if (os_log_type_enabled(v38, v37))
  {
    swift_retain_n(a2, 2LL);
    uint64_t v43 = swift_slowAlloc(42LL, -1LL);
    uint64_t v44 = swift_slowAlloc(128LL, -1LL);
    uint64_t v78 = v44;
    uint64_t v86 = v44;
    *(_DWORD *)uint64_t v43 = 136446978;
    os_log_t v77 = v38;
    int v76 = v37;
    uint64_t v45 = UUID.uuidString.getter(v44);
    uint64_t v47 = v46;
    sub_100045370(v45, v46, &v86);
    uint64_t v84 = v48;
    uint64_t v80 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85, v43 + 4, v43 + 12);
    swift_release_n(a2, 2LL);
    swift_bridgeObjectRelease(v47);
    *(_WORD *)(v43 + 12) = 2082;
    uint64_t v75 = v42;
    uint64_t v79 = &v74;
    uint64_t v49 = v91;
    uint64_t v50 = v92;
    sub_10000FF14(&v90, v91);
    uint64_t v51 = dispatch thunk of TunnelInterface.interfaceName.getter(v49, v50);
    uint64_t v53 = v52;
    sub_100045370(v51, v52, &v86);
    uint64_t v84 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85, v43 + 14, v43 + 22);
    swift_bridgeObjectRelease(v53);
    sub_10000FF38(&v90);
    *(_WORD *)(v43 + 22) = 2082;
    uint64_t v55 = v88;
    uint64_t v56 = v89;
    sub_10000FF14(v87, v88);
    dispatch thunk of TunnelInterface.address.getter(&v84, v55, v56);
    uint64_t v57 = sub_10000FD7C(&qword_100083830);
    uint64_t v58 = String.init<A>(describing:)(&v84, v57);
    uint64_t v60 = v59;
    sub_100045370(v58, v59, &v86);
    uint64_t v84 = v61;
    uint64_t v28 = v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85, v43 + 24, v43 + 32);
    swift_bridgeObjectRelease(v60);
    uint64_t v62 = sub_10000FF38(v87);
    *(_WORD *)(v43 + 32) = 2082;
    __chkstk_darwin(v62, v63);
    uint64_t v65 = (char *)&v74 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    v75(v65, v41, v24);
    uint64_t v66 = String.init<A>(describing:)(v65, v24);
    uint64_t v68 = v67;
    sub_100045370(v66, v67, &v86);
    uint64_t v84 = v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85, v43 + 34, v43 + 42);
    swift_bridgeObjectRelease(v68);
    uint64_t v70 = *(void (**)(char *, uint64_t))(v83 + 8);
    v70(v41, v24);
    _os_log_impl( (void *)&_mh_execute_header,  v77,  (os_log_type_t)v76,  "%{public}s: Tunnel established: %{public}s, local %{public}s -> remote %{public}s",  (uint8_t *)v43,  0x2Au);
    uint64_t v71 = v78;
    swift_arrayDestroy(v78, 4LL);
    swift_slowDealloc(v71, -1LL, -1LL);
    swift_slowDealloc(v43, -1LL, -1LL);
  }

  else
  {
    sub_10000FF38(&v90);
    sub_10000FF38(v87);
    uint64_t v70 = *(void (**)(char *, uint64_t))(v83 + 8);
    v70(v41, v24);
  }

  uint64_t v72 = a3[3];
  uint64_t v73 = a3[4];
  sub_10000FF14(a3, v72);
  swift_retain(a2);
  dispatch thunk of AnyTunnelEndpoint.startPacketTransfer(errorHandler:)(sub_10005F244, a2, v72, v73);
  swift_release();
  v70(v28, v24);
  return (void *)sub_10000FF38(v93);
}

void sub_10005C7B4(uint64_t a1, uint64_t a2)
{
  os_log_type_t v4 = static os_log_type_t.default.getter(a1);
  uint64_t v5 = (os_log_s *)qword_1000845F0;
  os_log_type_t v6 = v4;
  if (os_log_type_enabled((os_log_t)qword_1000845F0, v4))
  {
    swift_retain(a2);
    swift_errorRetain(a1);
    swift_retain(a2);
    swift_errorRetain(a1);
    uint64_t v7 = swift_slowAlloc(22LL, -1LL);
    uint64_t v8 = swift_slowAlloc(64LL, -1LL);
    uint64_t v19 = v8;
    *(_DWORD *)uint64_t v7 = 136446466;
    uint64_t v9 = UUID.uuidString.getter(v8);
    uint64_t v11 = v10;
    sub_100045370(v9, v10, &v19);
    uint64_t v18 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v7 + 4, v7 + 12);
    swift_release_n(a2, 2LL);
    swift_bridgeObjectRelease(v11);
    *(_WORD *)(v7 + 12) = 2082;
    uint64_t v18 = a1;
    swift_errorRetain(a1);
    uint64_t v13 = sub_10000FD7C(&qword_100081A10);
    uint64_t v14 = String.init<A>(describing:)(&v18, v13);
    uint64_t v16 = v15;
    sub_100045370(v14, v15, &v19);
    uint64_t v18 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease(v16);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "%{public}s: Tunnel transfer error: %{public}s",  (uint8_t *)v7,  0x16u);
    swift_arrayDestroy(v8, 2LL);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  sub_10005DAF8(a1);
}

void *sub_10005C994(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for XPCDictionary(0LL);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15, v18);
  uint64_t v21 = (char *)&v67 - v20;
  if (a1)
  {
    uint64_t v22 = swift_errorRetain(a1);
    os_log_type_t v23 = static os_log_type_t.error.getter(v22);
    uint64_t v24 = (os_log_s *)qword_1000845F0;
    os_log_type_t v25 = v23;
    if (os_log_type_enabled((os_log_t)qword_1000845F0, v23))
    {
      swift_errorRetain(a1);
      swift_retain(a2);
      swift_errorRetain(a1);
      swift_retain(a2);
      uint64_t v26 = swift_slowAlloc(22LL, -1LL);
      uint64_t v27 = swift_slowAlloc(64LL, -1LL);
      v81[0] = v27;
      *(_DWORD *)uint64_t v26 = 136446466;
      uint64_t v28 = UUID.uuidString.getter(v27);
      uint64_t v30 = v29;
      sub_100045370(v28, v29, v81);
      *(void *)&__int128 v78 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, (char *)&v78 + 8, v26 + 4, v26 + 12);
      swift_release_n(a2, 2LL);
      swift_bridgeObjectRelease(v30);
      *(_WORD *)(v26 + 12) = 2082;
      *(void *)&__int128 v78 = a1;
      swift_errorRetain(a1);
      uint64_t v32 = sub_10000FD7C(&qword_100081A10);
      uint64_t v33 = String.init<A>(describing:)(&v78, v32);
      uint64_t v35 = v34;
      sub_100045370(v33, v34, v81);
      *(void *)&__int128 v78 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, (char *)&v78 + 8, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease(v35);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "%{public}s: Server tunnel setup error: %{public}s",  (uint8_t *)v26,  0x16u);
      swift_arrayDestroy(v27, 2LL);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    swift_errorRetain(a1);
    sub_10005DAF8(a1);
    swift_errorRelease(a1);
    return (void *)swift_errorRelease(a1);
  }

  else
  {
    uint64_t v73 = a6;
    uint64_t v74 = a7;
    uint64_t v75 = v19;
    uint64_t v38 = a3[3];
    uint64_t v39 = a3[4];
    sub_10000FF14(a3, v38);
    uint64_t result = dispatch thunk of AnyTunnelEndpoint.localTunnelInterface.getter(&v78, v38, v39);
    if (v79)
    {
      uint64_t v40 = sub_100026BF0(&v78, (uint64_t)v81);
      os_log_type_t v41 = static os_log_type_t.default.getter(v40);
      uint64_t v42 = (os_log_s *)qword_1000845F0;
      sub_10002697C((uint64_t)v81, (uint64_t)&v78);
      if (os_log_type_enabled(v42, v41))
      {
        swift_retain_n(a2, 2LL);
        uint64_t v43 = swift_slowAlloc(22LL, -1LL);
        uint64_t v72 = a4;
        uint64_t v44 = v43;
        uint64_t v45 = swift_slowAlloc(64LL, -1LL);
        uint64_t v71 = v45;
        uint64_t v77 = v45;
        *(_DWORD *)uint64_t v44 = 136446466;
        int v70 = v41;
        uint64_t v46 = UUID.uuidString.getter(v45);
        uint64_t v48 = v47;
        sub_100045370(v46, v47, &v77);
        uint64_t v76 = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v44 + 4, v44 + 12);
        swift_release_n(a2, 2LL);
        swift_bridgeObjectRelease(v48);
        *(_WORD *)(v44 + 12) = 2082;
        uint64_t v68 = v44 + 14;
        os_log_t v69 = v42;
        uint64_t v50 = v79;
        uint64_t v51 = v80;
        sub_10000FF14(&v78, v79);
        uint64_t v52 = dispatch thunk of TunnelInterface.interfaceName.getter(v50, v51);
        uint64_t v54 = v53;
        sub_100045370(v52, v53, &v77);
        uint64_t v76 = v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v68, v44 + 22);
        swift_bridgeObjectRelease(v54);
        sub_10000FF38(&v78);
        _os_log_impl( (void *)&_mh_execute_header,  v69,  (os_log_type_t)v70,  "%{public}s: Server tunnel interface created: %{public}s, creating RSD listener...",  (uint8_t *)v44,  0x16u);
        uint64_t v56 = v71;
        swift_arrayDestroy(v71, 2LL);
        swift_slowDealloc(v56, -1LL, -1LL);
        uint64_t v57 = swift_slowDealloc(v44, -1LL, -1LL);
      }

      else
      {
        uint64_t v57 = sub_10000FF38(&v78);
      }

      XPCDictionary.init()(v57);
      XPCDictionary.subscript.setter(0xD000000000000013LL, 0x800000010006B420LL, 6581603LL, 0xE300000000000000LL);
      uint64_t v58 = v82;
      uint64_t v59 = v83;
      sub_10000FF14(v81, v82);
      uint64_t v60 = dispatch thunk of TunnelInterface.interfaceName.getter(v58, v59);
      XPCDictionary.subscript.setter(v60, v61, 0x6361667265746E69LL, 0xEE00656D616E5F65LL);
      uint64_t v62 = v75;
      (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v17, v21, v13);
      uint64_t v63 = *(void *)(a2 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__tunnelQueue);
      sub_10002697C((uint64_t)a3, (uint64_t)&v78);
      uint64_t v64 = (void *)swift_allocObject(&unk_100078EE8, 80LL, 7LL);
      v64[2] = a2;
      sub_100026BF0(&v78, (uint64_t)(v64 + 3));
      uint64_t v65 = v74;
      v64[8] = v73;
      v64[9] = v65;
      swift_retain(a2);
      swift_retain(v65);
      dispatch thunk of XPCConnection.send(message:replyQueue:replyHandler:)(v17, v63, sub_10005F1B4, v64);
      swift_release();
      uint64_t v66 = *(void (**)(char *, uint64_t))(v62 + 8);
      v66(v17, v13);
      v66(v21, v13);
      return (void *)sub_10000FF38(v81);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_10005CF14(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v149 = a4;
  uint64_t v150 = a5;
  uint64_t v148 = a3;
  uint64_t v156 = a2;
  uint64_t v6 = type metadata accessor for XPCDictionary(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v146 = (char *)&v145 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v151 = (char *)&v145 - v13;
  uint64_t v15 = __chkstk_darwin(v12, v14);
  os_log_t v155 = (os_log_t)((char *)&v145 - v16);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (os_log_s *)((char *)&v145 - v18);
  uint64_t v20 = type metadata accessor for XPCError(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v23 = __chkstk_darwin(v20, v22);
  os_log_t v152 = (os_log_t)((char *)&v145 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v26 = __chkstk_darwin(v23, v25);
  uint64_t v28 = (char *)&v145 - v27;
  __chkstk_darwin(v26, v29);
  uint64_t v31 = (char *)&v145 - v30;
  uint64_t v32 = sub_10000FD7C(&qword_100081A90);
  uint64_t v34 = __chkstk_darwin(v32, v33);
  uint64_t v147 = (uint64_t)&v145 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = __chkstk_darwin(v34, v36);
  uint64_t v154 = (uint64_t *)((char *)&v145 - v38);
  __chkstk_darwin(v37, v39);
  os_log_type_t v41 = (char *)&v145 - v40;
  uint64_t v153 = a1;
  uint64_t v42 = a1;
  uint64_t v44 = v43;
  sub_10002FCD8(v42, (uint64_t)&v145 - v40, &qword_100081A90);
  if (swift_getEnumCaseMultiPayload(v41, v44) == 1)
  {
    uint64_t v45 = (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(v31, v41, v20);
    os_log_type_t v46 = static os_log_type_t.error.getter(v45);
    uint64_t v47 = (os_log_s *)qword_1000845F0;
    uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
    v48(v28, v31, v20);
    if (os_log_type_enabled(v47, v46))
    {
      os_log_t v155 = v47;
      uint64_t v49 = v156;
      swift_retain_n(v156, 2LL);
      uint64_t v50 = swift_slowAlloc(22LL, -1LL);
      uint64_t v51 = (uint64_t *)swift_slowAlloc(64LL, -1LL);
      uint64_t v154 = v51;
      int v157 = (uint64_t (*)(void, void))v51;
      *(_DWORD *)uint64_t v50 = 136446466;
      uint64_t v151 = (char *)(v50 + 4);
      LODWORD(v153) = v46;
      uint64_t v52 = UUID.uuidString.getter(v51);
      uint64_t v53 = v48;
      uint64_t v55 = v54;
      sub_100045370(v52, v54, (uint64_t *)&v157);
      unint64_t v159 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v151, v50 + 12);
      swift_release_n(v49, 2LL);
      uint64_t v57 = v55;
      uint64_t v48 = v53;
      swift_bridgeObjectRelease(v57);
      *(_WORD *)(v50 + 12) = 2082;
      os_log_t v58 = v152;
      v48((char *)v152, v28, v20);
      uint64_t v59 = String.init<A>(describing:)(v58, v20);
      uint64_t v61 = v60;
      sub_100045370(v59, v60, (uint64_t *)&v157);
      unint64_t v159 = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v50 + 14, v50 + 22);
      swift_bridgeObjectRelease(v61);
      uint64_t v63 = *(void (**)(char *, uint64_t))(v21 + 8);
      v63(v28, v20);
      _os_log_impl( (void *)&_mh_execute_header,  v155,  (os_log_type_t)v153,  "%{public}s: Server XPC reply error: %{public}s",  (uint8_t *)v50,  0x16u);
      uint64_t v64 = (uint64_t (*)(void, void))v154;
      swift_arrayDestroy(v154, 2LL);
      swift_slowDealloc(v64, -1LL, -1LL);
      swift_slowDealloc(v50, -1LL, -1LL);
    }

    else
    {
      uint64_t v63 = *(void (**)(char *, uint64_t))(v21 + 8);
      v63(v28, v20);
    }

    sub_100026A28(&qword_100083818, (uint64_t (*)(uint64_t))&type metadata accessor for XPCError);
    uint64_t v92 = swift_allocError(v20, v91, 0LL, 0LL);
    v48(v93, v31, v20);
    sub_10005DAF8(v92);
    swift_errorRelease(v92);
    return ((uint64_t (*)(char *, uint64_t))v63)(v31, v20);
  }

  uint64_t v65 = *(void (**)(os_log_s *, char *, uint64_t))(v7 + 16);
  v65(v19, v41, v6);
  uint64_t v66 = XPCDictionary.subscript.getter(0x746C75736572LL);
  uint64_t v68 = v7;
  if (v67)
  {
    uint64_t v69 = v67;
    if (v66 == 19279 && v67 == 0xE200000000000000LL)
    {
      swift_bridgeObjectRelease(v67);
    }

    else
    {
      char v71 = _stringCompareWithSmolCheck(_:_:expecting:)(v66, v67, 19279LL, 0xE200000000000000LL, 0LL);
      uint64_t v66 = swift_bridgeObjectRelease(v69);
      if ((v71 & 1) == 0) {
        goto LABEL_10;
      }
    }

    uint64_t v95 = *(void (**)(os_log_s *, uint64_t))(v7 + 8);
    v95(v19, v6);
    os_log_t v96 = v155;
    uint64_t v97 = (*(uint64_t (**)(os_log_t, char *, uint64_t))(v7 + 32))(v155, v41, v6);
    os_log_type_t v98 = static os_log_type_t.debug.getter(v97);
    uint64_t v99 = (os_log_s *)qword_1000845F0;
    unint64_t v100 = v151;
    v65((os_log_s *)v151, (char *)v96, v6);
    os_log_type_t v101 = v98;
    BOOL v102 = os_log_type_enabled(v99, v98);
    uint64_t v145 = v6;
    uint64_t v154 = (uint64_t *)v95;
    if (v102)
    {
      uint64_t v103 = v156;
      swift_retain_n(v156, 2LL);
      uint64_t v104 = swift_slowAlloc(22LL, -1LL);
      uint64_t v105 = swift_slowAlloc(64LL, -1LL);
      uint64_t v153 = v105;
      int v157 = (uint64_t (*)(void, void))v105;
      *(_DWORD *)uint64_t v104 = 136446466;
      uint64_t v106 = UUID.uuidString.getter(v105);
      uint64_t v108 = v107;
      sub_100045370(v106, v107, (uint64_t *)&v157);
      unint64_t v159 = v109;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v104 + 4, v104 + 12);
      swift_release_n(v103, 2LL);
      swift_bridgeObjectRelease(v108);
      *(_WORD *)(v104 + 12) = 2082;
      uint64_t v110 = v146;
      v65((os_log_s *)v146, v100, v6);
      uint64_t v111 = String.init<A>(describing:)(v110, v6);
      uint64_t v113 = v112;
      sub_100045370(v111, v112, (uint64_t *)&v157);
      unint64_t v159 = v114;
      os_log_t v96 = v155;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v104 + 14, v104 + 22);
      uint64_t v115 = v113;
      uint64_t v116 = (void (*)(char *, uint64_t))v154;
      swift_bridgeObjectRelease(v115);
      v116(v100, v6);
      _os_log_impl( (void *)&_mh_execute_header,  v99,  v101,  "%{public}s: Server XPC reply: %{public}s",  (uint8_t *)v104,  0x16u);
      uint64_t v117 = v153;
      swift_arrayDestroy(v153, 2LL);
      swift_slowDealloc(v117, -1LL, -1LL);
      swift_slowDealloc(v104, -1LL, -1LL);
    }

    else
    {
      v95((os_log_s *)v100, v6);
      uint64_t v103 = v156;
    }

    uint64_t v123 = XPCDictionary.subscript.getter(0x6E5F656369766564LL);
    if (v124)
    {
      uint64_t v125 = v123;
      uint64_t v126 = v124;
      unint64_t v127 = sub_10005F1C4();
      uint64_t v128 = XPCDictionary.subscript.getter( &v157,  0x72656E657473696CLL,  0xED000074726F705FLL,  &type metadata for UInt,  v127);
      if ((v158 & 1) == 0)
      {
        unint64_t v129 = (unint64_t)v157;
        os_log_type_t v130 = static os_log_type_t.default.getter(v128);
        uint64_t v131 = (os_log_s *)qword_1000845F0;
        os_log_type_t v132 = v130;
        if (os_log_type_enabled((os_log_t)qword_1000845F0, v130))
        {
          swift_retain_n(v103, 2LL);
          swift_bridgeObjectRetain_n(v126, 2LL);
          uint64_t v133 = swift_slowAlloc(32LL, -1LL);
          uint64_t v134 = swift_slowAlloc(64LL, -1LL);
          int v157 = (uint64_t (*)(void, void))v134;
          *(_DWORD *)uint64_t v133 = 136446722;
          uint64_t v135 = UUID.uuidString.getter(v134);
          uint64_t v137 = v136;
          sub_100045370(v135, v136, (uint64_t *)&v157);
          unint64_t v159 = v138;
          uint64_t v103 = v156;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v133 + 4, v133 + 12);
          swift_release_n(v103, 2LL);
          swift_bridgeObjectRelease(v137);
          *(_WORD *)(v133 + 12) = 2082;
          swift_bridgeObjectRetain(v126);
          sub_100045370(v125, v126, (uint64_t *)&v157);
          unint64_t v159 = v139;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v133 + 14, v133 + 22);
          swift_bridgeObjectRelease_n(v126, 3LL);
          *(_WORD *)(v133 + 22) = 2048;
          unint64_t v159 = v129;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v133 + 24, v133 + 32);
          _os_log_impl( (void *)&_mh_execute_header,  v131,  v132,  "%{public}s: Created RSD server device name: %{public}s with listener on port: %lu",  (uint8_t *)v133,  0x20u);
          swift_arrayDestroy(v134, 2LL);
          swift_slowDealloc(v134, -1LL, -1LL);
          uint64_t v140 = v133;
          os_log_t v96 = v155;
          swift_slowDealloc(v140, -1LL, -1LL);
        }

        uint64_t v141 = v103 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state;
        swift_beginAccess(v103 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state, &v157, 1LL, 0LL);
        uint64_t v142 = *(void *)(v141 + 120);
        *(void *)(v141 + 112) = v125;
        *(void *)(v141 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v126;
        swift_bridgeObjectRelease(v142);
        OS_dispatch_queue.assertOnQueueHierarchy()();
        uint64_t v143 = v148[3];
        uint64_t v144 = v148[4];
        sub_10000FF14(v148, v143);
        if (v129 < 0x10000)
        {
          dispatch thunk of AnyTunnelEndpoint.finishEstablishingServerTunnel(serverRSDPort:completion:)( v129,  v149,  v150,  v143,  v144);
          return ((uint64_t (*)(os_log_t, uint64_t))v154)(v96, v145);
        }

void sub_10005DAF8(uint64_t a1)
{
  if (a1)
  {
    uint64_t v5 = sub_100012474();
    os_log_type_t v6 = static os_log_type_t.error.getter(v5);
    uint64_t v7 = (os_log_s *)qword_1000845F0;
    if (sub_10005F9A4(v6))
    {
      sub_100012474();
      sub_100026D98();
      sub_100012474();
      sub_100026D98();
      uint64_t v8 = sub_1000122E0(22LL);
      uint64_t v9 = sub_1000122E0(64LL);
      *(void *)&__int128 v105 = v9;
      *(_DWORD *)uint64_t v8 = 136446466;
      uint64_t v10 = sub_10005F9B4();
      sub_10004F800(v10, v11, v12, v13, v14, v15, v16, v17, v100, v101);
      sub_100031CE0();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v18, v19, v8 + 4, v20);
      sub_100026CA4(v1);
      sub_10001DC58();
      *(_WORD *)(v8 + 12) = 2082;
      uint64_t v100 = a1;
      sub_100012474();
      uint64_t v21 = sub_10000FD7C(&qword_100081A10);
      uint64_t v22 = String.init<A>(describing:)(&v100, v21);
      uint64_t v24 = v23;
      sub_100045370(v22, v23, (uint64_t *)&v105);
      uint64_t v100 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v8 + 14, v8 + 22);
      swift_bridgeObjectRelease(v24);
      sub_10001243C();
      sub_10001243C();
      _os_log_impl( (void *)&_mh_execute_header,  v7,  v2,  "%{public}s: Cancelling tunnel with error: %{public}s",  (uint8_t *)v8,  0x16u);
      swift_arrayDestroy(v9, 2LL);
      sub_10001001C(v9);
      sub_10001001C(v8);
    }

    sub_10001243C();
  }

  else
  {
    os_log_type_t v26 = static os_log_type_t.default.getter(v4);
    uint64_t v27 = (os_log_s *)qword_1000845F0;
    if (sub_10005F9A4(v26))
    {
      sub_100026C50(v1);
      uint64_t v28 = (uint8_t *)sub_1000122E0(12LL);
      uint64_t v29 = sub_1000122E0(32LL);
      *(_DWORD *)uint64_t v28 = 136446210;
      *(void *)&__int128 v105 = v29;
      uint64_t v30 = sub_10005F9B4();
      sub_10004F800(v30, v31, v32, v33, v34, v35, v36, v37, v100, v101);
      sub_100031CE0();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v38, v39, v28 + 4, v28 + 12);
      sub_100026CA4(v1);
      sub_10001DC58();
      sub_100016D10((void *)&_mh_execute_header, v27, v2, "%{public}s: Cancelling tunnel", v28);
      sub_100012450(v29);
      sub_10001001C(v29);
      sub_10001001C((uint64_t)v28);
    }
  }

  uint64_t v40 = (void *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state);
  uint64_t v41 = sub_100016B48(v1 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state, (uint64_t)v104, 1LL);
  uint64_t v49 = sub_10005FA40(v41, v42, v43, v44, v45, v46, v47, v48);
  if (*((void *)&v106 + 1))
  {
    sub_10002697C((uint64_t)&v105, (uint64_t)&v100);
    sub_10005F99C(v57, v58, v59, v60, v61, v62, v63, v64);
    uint64_t v65 = sub_10000FF14(&v100, v102);
    nw_listener_cancel(*(nw_listener_t *)(*v65 + 32LL));
    sub_10000FF38(&v100);
  }

  else
  {
    sub_10005F99C(v49, v50, v51, v52, v53, v54, v55, v56);
  }

  uint64_t v107 = 0LL;
  __int128 v105 = 0u;
  __int128 v106 = 0u;
  sub_100016B48((uint64_t)v40, (uint64_t)&v100, 33LL);
  sub_10005F5F8((uint64_t)&v105, (uint64_t)v40, &qword_1000837D0);
  swift_endAccess(&v100);
  sub_10005F8D8();
  uint64_t v66 = (void (*)(uint64_t))v40[18];
  if (v66)
  {
    sub_10000FFDC();
    v66(a1);
    sub_10005F9E4((uint64_t)v66);
    uint64_t v67 = v40[18];
  }

  else
  {
    uint64_t v67 = 0LL;
  }

  uint64_t v68 = v40[19];
  v40[18] = 0LL;
  v40[19] = 0LL;
  sub_10002FBF0(v67, v68);
  sub_10005F8D8();
  uint64_t v77 = sub_10005FA40(v69, v70, v71, v72, v73, v74, v75, v76);
  if (v108[3])
  {
    sub_10002697C((uint64_t)v108, (uint64_t)&v100);
    sub_10005F99C(v85, v86, v87, v88, v89, v90, v91, v92);
    uint64_t v93 = v102;
    uint64_t v94 = v103;
    sub_10000FF14(&v100, v102);
    dispatch thunk of AnyTunnelEndpoint.cancel()(v93, v94);
    sub_10000FF38(&v100);
  }

  else
  {
    sub_10005F99C(v77, v78, v79, v80, v81, v82, v83, v84);
  }

  uint64_t v107 = 0LL;
  __int128 v105 = 0u;
  __int128 v106 = 0u;
  sub_100016B48((uint64_t)v40, (uint64_t)&v100, 33LL);
  sub_10005F5F8((uint64_t)&v105, (uint64_t)(v40 + 5), &qword_1000837D8);
  swift_endAccess(&v100);
  sub_10005F8D8();
  uint64_t v95 = v40 + 10;
  if (v40[10])
  {
    uint64_t v96 = sub_10000FFDC();
    dispatch thunk of XPCConnection.cancel()(v96);
    sub_100012464();
    uint64_t v97 = *v95;
  }

  else
  {
    uint64_t v97 = 0LL;
  }

  *uint64_t v95 = 0LL;
  v40[11] = 0LL;
  swift_release(v97);
  sub_10005F8D8();
  if (v40[13])
  {
    uint64_t v98 = sub_10000FFDC();
    dispatch thunk of WiFiKeepAlive.cancel()(v98);
    sub_100012464();
    uint64_t v99 = v40[13];
  }

  else
  {
    uint64_t v99 = 0LL;
  }

  v40[13] = 0LL;
  swift_release(v99);
  sub_10005F8D8();
}

void sub_10005DF10()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  sub_100026C68(v1);

  sub_10005E96C((void *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state));
  sub_100016C1C();
}

uint64_t sub_10005DF70()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10005DF94()
{
  return type metadata accessor for Tunnel(0LL);
}

uint64_t type metadata accessor for Tunnel(uint64_t a1)
{
  uint64_t result = qword_1000836D8;
  if (!qword_1000836D8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Tunnel);
  }
  return result;
}

uint64_t sub_10005DFD4(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = "\b";
    void v4[3] = &unk_100063AB8;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t destroy for Tunnel.MutableState(void *a1)
{
  if (a1[3]) {
    sub_10000FF38(a1);
  }
  if (a1[8]) {
    sub_10000FF38(a1 + 5);
  }
  swift_release(a1[10]);
  swift_release(a1[12]);
  swift_release(a1[13]);
  uint64_t result = swift_bridgeObjectRelease(a1[15]);
  if (a1[16]) {
    uint64_t result = swift_release(a1[17]);
  }
  if (a1[18]) {
    return swift_release(a1[19]);
  }
  return result;
}

uint64_t initializeWithCopy for Tunnel.MutableState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }

  else
  {
    __int128 v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }

  uint64_t v7 = (_OWORD *)(a1 + 40);
  uint64_t v8 = (_OWORD *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 64);
  if (v9)
  {
    uint64_t v10 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = v9;
    *(void *)(a1 + 72) = v10;
    (**(void (***)(_OWORD *, _OWORD *))(v9 - 8))(v7, v8);
  }

  else
  {
    __int128 v11 = *(_OWORD *)(a2 + 56);
    *uint64_t v7 = *v8;
    *(_OWORD *)(a1 + 56) = v11;
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
  }

  uint64_t v12 = *(void *)(a2 + 128);
  __int128 v13 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v13;
  uint64_t v14 = *(void *)(a2 + 96);
  uint64_t v15 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v14;
  *(void *)(a1 + 104) = v15;
  uint64_t v16 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v16;
  swift_retain(v13);
  swift_retain(v14);
  swift_retain(v15);
  swift_bridgeObjectRetain(v16);
  if (v12)
  {
    uint64_t v17 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = v12;
    *(void *)(a1 + 136) = v17;
    swift_retain(v17);
  }

  else
  {
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  }

  uint64_t v18 = *(void *)(a2 + 144);
  if (v18)
  {
    uint64_t v19 = *(void *)(a2 + 152);
    *(void *)(a1 + 144) = v18;
    *(void *)(a1 + 152) = v19;
    swift_retain(v19);
  }

  else
  {
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  }

  return a1;
}

uint64_t assignWithCopy for Tunnel.MutableState(uint64_t a1, __int128 *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (*(void *)(a1 + 24))
  {
    if (v4)
    {
      sub_10005E424((void *)a1, a2);
      goto LABEL_8;
    }

    sub_10000FF38((void *)a1);
  }

  else if (v4)
  {
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
    goto LABEL_8;
  }

  __int128 v5 = *a2;
  __int128 v6 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
LABEL_8:
  uint64_t v7 = *((void *)a2 + 8);
  if (*(void *)(a1 + 64))
  {
    if (v7)
    {
      sub_10005E424((void *)(a1 + 40), (void *)a2 + 5);
      goto LABEL_15;
    }

    sub_10000FF38((void *)(a1 + 40));
  }

  else if (v7)
  {
    *(void *)(a1 + 64) = v7;
    *(void *)(a1 + 72) = *((void *)a2 + 9);
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 40, (uint64_t)a2 + 40);
    goto LABEL_15;
  }

  __int128 v8 = *(__int128 *)((char *)a2 + 40);
  __int128 v9 = *(__int128 *)((char *)a2 + 56);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *(_OWORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v8;
  *(_OWORD *)(a1 + 56) = v9;
LABEL_15:
  uint64_t v10 = *((void *)a2 + 10);
  uint64_t v11 = *((void *)a2 + 11);
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v10;
  swift_retain(v10);
  swift_release();
  *(void *)(a1 + 88) = v11;
  uint64_t v12 = *((void *)a2 + 12);
  *(void *)(a1 + 96) = v12;
  swift_retain(v12);
  swift_release();
  uint64_t v13 = *((void *)a2 + 13);
  *(void *)(a1 + 104) = v13;
  swift_retain(v13);
  swift_release();
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  uint64_t v14 = *((void *)a2 + 15);
  uint64_t v15 = *(void *)(a1 + 120);
  *(void *)(a1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *((void *)a2 + 16);
  if (*(void *)(a1 + 128))
  {
    if (v16)
    {
      uint64_t v17 = *((void *)a2 + 17);
      *(void *)(a1 + 128) = v16;
      *(void *)(a1 + 136) = v17;
      swift_retain(v17);
      swift_release();
      goto LABEL_22;
    }

    swift_release();
  }

  else if (v16)
  {
    uint64_t v18 = *((void *)a2 + 17);
    *(void *)(a1 + 128) = v16;
    *(void *)(a1 + 136) = v18;
    swift_retain(v18);
    goto LABEL_22;
  }

  *(_OWORD *)(a1 + 128) = a2[8];
LABEL_22:
  uint64_t v19 = *((void *)a2 + 18);
  if (!*(void *)(a1 + 144))
  {
    if (v19)
    {
      uint64_t v21 = *((void *)a2 + 19);
      *(void *)(a1 + 144) = v19;
      *(void *)(a1 + 152) = v21;
      swift_retain(v21);
      return a1;
    }

void *sub_10005E424(void *result, void *a2)
{
  if (result != a2)
  {
    unint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        uint64_t result = (void *)swift_release(v11);
        void *v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          void *v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          void *v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

void *initializeWithTake for Tunnel.MutableState(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA0uLL);
}

uint64_t assignWithTake for Tunnel.MutableState(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24)) {
    sub_10000FF38((void *)a1);
  }
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  if (*(void *)(a1 + 64)) {
    sub_10000FF38((void *)(a1 + 40));
  }
  __int128 v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = *(void *)(a2 + 80);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_release();
  uint64_t v6 = *(void *)(a2 + 120);
  uint64_t v7 = *(void *)(a1 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 128);
  if (*(void *)(a1 + 128))
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = v8;
      *(void *)(a1 + 136) = v9;
      swift_release();
      goto LABEL_12;
    }

    swift_release();
  }

  else if (v8)
  {
    uint64_t v10 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = v8;
    *(void *)(a1 + 136) = v10;
    goto LABEL_12;
  }

  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
LABEL_12:
  uint64_t v11 = *(void *)(a2 + 144);
  if (!*(void *)(a1 + 144))
  {
    if (v11)
    {
      uint64_t v13 = *(void *)(a2 + 152);
      *(void *)(a1 + 144) = v11;
      *(void *)(a1 + 152) = v13;
      return a1;
    }

uint64_t getEnumTagSinglePayload for Tunnel.MutableState(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 160))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      unint64_t v3 = *(void *)(a1 + 24);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(sub_100015D58(v2, v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Tunnel.MutableState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 152) = 0LL;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Tunnel.MutableState()
{
  return &type metadata for Tunnel.MutableState;
}

void **initializeBufferWithCopyOfBuffer for Tunnel.Initiator(void **a1, void **a2)
{
  unint64_t v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void destroy for Tunnel.Initiator(id *a1)
{
}

void **assignWithCopy for Tunnel.Initiator(void **a1, void **a2)
{
  unint64_t v3 = *a2;
  id v4 = *a1;
  *a1 = *a2;
  id v5 = v3;

  return a1;
}

void *initializeWithTake for Tunnel.Initiator(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void **assignWithTake for Tunnel.Initiator(void **a1, void **a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for Tunnel.Initiator(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for Tunnel.Initiator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0LL;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }

  return result;
}

void *sub_10005E908(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }

  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }

  *uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for Tunnel.Initiator()
{
  return &type metadata for Tunnel.Initiator;
}

uint64_t sub_10005E938(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_10005E96C(void *a1)
{
  return a1;
}

uint64_t sub_10005E998(uint64_t a1)
{
  return sub_10005BB20(a1, v1);
}

uint64_t sub_10005E9A0()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

void *sub_10005E9C4(uint64_t a1)
{
  return sub_10005C0BC(a1, *(void *)(v1 + 16), (void *)(v1 + 24));
}

uint64_t sub_10005E9D0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0LL;
LABEL_4:
    unint64_t v5 = 0xC000000000000000LL;
    goto LABEL_5;
  }

  if (v4 <= 14)
  {
    uint64_t result = Data.InlineData.init(_:)();
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }

  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = Data.LargeSlice.init(_:)();
    unint64_t v5 = v8 | 0x8000000000000000LL;
  }

  else
  {
    uint64_t result = Data.InlineSlice.init(_:)();
    unint64_t v5 = v6 | 0x4000000000000000LL;
  }

uint64_t sub_10005EA44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v7 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v7 += a1 - result;
  }

  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t v9 = a2 - a1;
  if (v8)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v10 = __DataStorage._length.getter();
  if (v10 >= v9) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = v7 + v11;
  if (v7) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0LL;
  }
  return sub_10005E9D0(v7, v13, a3);
}

uint64_t sub_10005EAD4(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v5 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v5 += a1 - result;
  }

  BOOL v6 = __OFSUB__(a2, a1);
  uint64_t v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v8 = __DataStorage._length.getter();
  if (v8 >= v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v10 = v5 + v9;
  if (v5) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0LL;
  }
  uint64_t v12 = type metadata accessor for DispatchData(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  sub_10000FFCC();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = DispatchData.init(bytes:)(v5, v11);
  uint64_t v19 = DispatchData._bridgeToObjectiveC()(v18);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v17, v12);
  return v19;
}

uint64_t sub_10005EBB8(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v5 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v5 += a1 - result;
  }

  BOOL v6 = __OFSUB__(a2, a1);
  uint64_t v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v8 = __DataStorage._length.getter();
  if (v8 >= v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v10 = v5 + v9;
  if (v5) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0LL;
  }
  return Data._Representation.append(contentsOf:)(v5, v11);
}

uint64_t sub_10005EC48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v12 = a1;
  __int16 v13 = a2;
  char v14 = BYTE2(a2);
  char v15 = BYTE3(a2);
  char v16 = BYTE4(a2);
  char v17 = BYTE5(a2);
  if (a3)
  {
    if (a3 <= 14)
    {
      uint64_t result = Data.InlineData.init(_:)(&v12, (char *)&v12 + a3);
      unint64_t v9 = v10 & 0xFFFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v6 = type metadata accessor for __DataStorage(0LL);
      swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
      uint64_t v7 = __DataStorage.init(bytes:length:)(&v12, a3);
      if ((unint64_t)a3 >= 0x7FFFFFFF)
      {
        uint64_t v11 = type metadata accessor for Data.RangeReference(0LL);
        uint64_t result = swift_allocObject(v11, 32LL, 7LL);
        *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
        *(void *)(result + 24) = a3;
        unint64_t v9 = v7 | 0x8000000000000000LL;
      }

      else
      {
        uint64_t result = a3 << 32;
        unint64_t v9 = v7 | 0x4000000000000000LL;
      }
    }
  }

  else
  {
    uint64_t result = 0LL;
    unint64_t v9 = 0xC000000000000000LL;
  }

  *a4 = result;
  a4[1] = v9;
  return result;
}

uint64_t sub_10005EDA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = a1;
  __int16 v12 = a2;
  char v13 = BYTE2(a2);
  char v14 = BYTE3(a2);
  char v15 = BYTE4(a2);
  uint64_t v4 = (char *)&v11 + a3;
  char v16 = BYTE5(a2);
  uint64_t v5 = type metadata accessor for DispatchData(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  sub_10001DF18();
  uint64_t v8 = DispatchData.init(bytes:)(&v11, v4);
  uint64_t v9 = DispatchData._bridgeToObjectiveC()(v8);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v5);
  return v9;
}

uint64_t sub_10005EED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  __int16 v5 = a2;
  char v6 = BYTE2(a2);
  char v7 = BYTE3(a2);
  char v8 = BYTE4(a2);
  char v9 = BYTE5(a2);
  return Data._Representation.append(contentsOf:)(&v4, (char *)&v4 + a3);
}

void sub_10005EFA0(uint64_t a1, uint64_t a2)
{
  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  unsigned int v2 = (char *)&loc_10005EFF4
     + *((int *)qword_10005F130 + (sub_10000FF14(v3, (uint64_t)&type metadata for Data)[1] >> 62));
  __asm { BR              X10 }

uint64_t sub_10005F004()
{
  return sub_10000FF38(&v5);
}

uint64_t sub_10005F140()
{
  return swift_deallocObject(v0, 96LL, 7LL);
}

void *sub_10005F174(uint64_t a1)
{
  return sub_10005C994(a1, v1[2], v1 + 3, v1[8], v1[9], v1[10], v1[11]);
}

uint64_t sub_10005F188()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_10005F1B4(uint64_t a1)
{
  return sub_10005CF14(a1, v1[2], v1 + 3, v1[8], v1[9]);
}

unint64_t sub_10005F1C4()
{
  unint64_t result = qword_100083810;
  if (!qword_100083810)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt, &type metadata for UInt);
    atomic_store(result, (unint64_t *)&qword_100083810);
  }

  return result;
}

unint64_t sub_10005F200()
{
  unint64_t result = qword_100083828;
  if (!qword_100083828)
  {
    uint64_t v1 = sub_10001214C(&qword_100083820);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100083828);
  }

  return result;
}

void sub_10005F244(uint64_t a1)
{
}

uint64_t sub_10005F24C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10005F270()
{
  return swift_deallocObject(v0, 25LL, 7LL);
}

uint64_t sub_10005F290(uint64_t a1, char a2)
{
  return sub_10005A4C4(a1, a2 & 1, *(void *)(v2 + 16), *(_BYTE *)(v2 + 24));
}

uint64_t sub_10005F2A0()
{
  uint64_t v1 = sub_10005F9F4();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  sub_100026DFC();
  sub_100016D58();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return sub_10005F8C8(v0, v5, v6);
}

uint64_t sub_10005F304(char a1)
{
  char v2 = a1 & 1;
  sub_10005F9F4();
  return sub_10005A5AC(v2, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10005F340()
{
  return sub_10005A844(v0);
}

uint64_t sub_10005F348(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000004BLL,  0x8000000100068B70LL,  "remotepairingdeviced/NWObjcConnectionControlChannelTransport.swift",  66LL,  2LL,  88LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10005F358(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10005F360(uint64_t a1, uint64_t a2)
{
  void v10[3] = type metadata accessor for NWObjcTunnelConnectionWrapper(0LL);
  sub_100026A28((unint64_t *)&unk_100082F98, type metadata accessor for NWObjcTunnelConnectionWrapper);
  v10[4] = v4;
  v10[0] = a1;
  uint64_t v5 = *(dispatch_queue_s **)(a2 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__tunnelQueue);
  swift_retain(a1);
  OS_dispatch_queue.assertOnQueueHierarchy()();
  uint64_t v6 = swift_allocObject(&unk_100078FB0, 56LL, 7LL);
  sub_10002697C((uint64_t)v10, v6 + 16);
  uint64_t v7 = swift_allocObject(&unk_100078F10, 24LL, 7LL);
  swift_weakInit(v7 + 16, a2);
  uint64_t v8 = swift_allocObject(&unk_100078FD8, 32LL, 7LL);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = v7;
  *(void *)(v8 + 24) = v6;
  swift_retain(v7);
  swift_retain(v6);
  sub_100040A70(v5, (uint64_t)sub_10005F5F0, v8);
  swift_release();
  swift_release();
  swift_release();
  return sub_10000FF38(v10);
}

uint64_t sub_10005F490(uint64_t a1, uint64_t a2)
{
  void v10[3] = type metadata accessor for NWQUICTunnelConnection(0LL);
  sub_100026A28(&qword_100083840, type metadata accessor for NWQUICTunnelConnection);
  v10[4] = v4;
  v10[0] = a1;
  uint64_t v5 = *(void **)(a2 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__tunnelQueue);
  swift_retain(a1);
  OS_dispatch_queue.assertOnQueueHierarchy()();
  uint64_t v6 = swift_allocObject(&unk_100078FB0, 56LL, 7LL);
  sub_10002697C((uint64_t)v10, v6 + 16);
  uint64_t v7 = swift_allocObject(&unk_100078F10, 24LL, 7LL);
  swift_weakInit(v7 + 16, a2);
  uint64_t v8 = swift_allocObject(&unk_100079000, 32LL, 7LL);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = v7;
  *(void *)(v8 + 24) = v6;
  swift_retain(v7);
  swift_retain(v6);
  sub_100042A28(v5, (uint64_t)sub_10005F8C4, v8);
  swift_release();
  swift_release();
  swift_release();
  return sub_10000FF38(v10);
}

uint64_t sub_10005F5C0()
{
  if (*(void *)(v0 + 40)) {
    sub_10000FF38((void *)(v0 + 16));
  }
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10005F5F0(uint64_t a1)
{
  return sub_10005AAA0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void sub_10005F5F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_100031C5C(a1, a2, a3);
  sub_100031CFC(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 40LL));
  sub_100016C1C();
}

uint64_t sub_10005F628()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10005F64C()
{
}

uint64_t sub_10005F654()
{
  uint64_t v1 = *(void *)(sub_10000FD7C(&qword_100083858) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  sub_100026DFC();
  sub_100015644(*(void *)(v0 + 32), *(void *)(v0 + 40));
  uint64_t v5 = type metadata accessor for TransportProtocolType(0LL);
  if (!sub_10001D9C8(v0 + v3, 1LL, v5))
  {
    uint64_t v6 = sub_100031B6C();
    v7(v6);
  }

  unint64_t v8 = (v4 + v3 + 9) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v9 = v8 + 8;
  swift_bridgeObjectRelease(*(void *)(v0 + v8));
  return sub_10005F8C8(v0, v9, v2 | 7);
}

void sub_10005F6F8()
{
}

uint64_t sub_10005F758@<X0>(void *a1@<X8>)
{
  return sub_100058058(v1, a1);
}

uint64_t sub_10005F774(uint64_t a1)
{
  return sub_100058688(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10005F784()
{
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10005F7B0(uint64_t a1)
{
  return sub_100058430(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10005F7BC()
{
  uint64_t v1 = *(void *)(sub_10000FD7C((uint64_t *)&unk_1000820D8) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  sub_100016D58();
  uint64_t v5 = sub_100031B6C();
  if (swift_getEnumCaseMultiPayload(v5, v6) == 1)
  {
    swift_errorRelease(*(void *)(v0 + v3));
  }

  else
  {
    uint64_t v7 = type metadata accessor for ListenerStartedResponse(0LL);
    sub_100026C68(v7);
  }

  return sub_10005F8C8(v0, v3 + v4, v2 | 7);
}

void sub_10005F838()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_10000FD7C((uint64_t *)&unk_1000820D8) - 8) + 80LL);
  (*(void (**)(uint64_t))(v0 + 16))(v0 + ((v1 + 32) & ~v1));
  sub_100016C1C();
}

uint64_t sub_10005F878()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10005F8C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

void sub_10005F8D8()
{
}

uint64_t sub_10005F8E0()
{
  uint64_t v2 = *(void **)(v1 - 264);
  *uint64_t v2 = v0;
  return swift_storeEnumTagMultiPayload(v2, *(void *)(v1 - 272), 1LL);
}

uint64_t sub_10005F900()
{
  return sub_1000155D4(v1, v0);
}

uint64_t sub_10005F90C(uint64_t a1)
{
  return TunnelEndpoint.init(id:connection:workQueue:)(v1, v2, v3 - 160, a1);
}

void sub_10005F924()
{
}

uint64_t sub_10005F930(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 104))(v2, a2, v4);
}

uint64_t sub_10005F940(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(v3 - 240) + 104LL))( v2,  a2,  *(void *)(v3 - 232));
}

uint64_t sub_10005F950(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 144, a2, v3, v2);
}

uint64_t sub_10005F960(uint64_t a1)
{
  return sub_10001D930(a1, 1LL, 1LL, v1);
}

uint64_t sub_10005F970(uint64_t a1)
{
  return sub_10001D9C8(a1, 1LL, v1);
}

uint64_t sub_10005F98C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

void *sub_10005F99C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  return sub_10005E96C((uint64_t *)va);
}

BOOL sub_10005F9A4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10005F9B4()
{
  return UUID.uuidString.getter();
}

void sub_10005F9BC(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

uint64_t sub_10005F9C8()
{
  return *(void *)(v0 - 280);
}

uint64_t sub_10005F9DC()
{
  return sub_10000FF38((void *)(v0 + 24));
}

uint64_t sub_10005F9E4(uint64_t a1)
{
  return sub_10002FBF0(a1, v1);
}

uint64_t sub_10005F9EC(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_10005F9F4()
{
  return type metadata accessor for CertificateUtilities.RawTLSPublicKeyInfo(0LL);
}

void sub_10005F9FC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10005FA04(uint64_t a1)
{
  return swift_weakInit(a1, v1);
}

uint64_t sub_10005FA0C(uint64_t a1)
{
  return sub_100015644(a1, v1);
}

uint64_t sub_10005FA14()
{
  return sub_10002FBF0(v0, v1);
}

void sub_10005FA20()
{
}

uint64_t sub_10005FA2C()
{
  return sub_1000155D4(v0, v1);
}

uint64_t sub_10005FA38(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_10005FA40( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  return sub_10005E938(v8, (uint64_t)va);
}

void sub_10005FA4C()
{
}

void sub_10005FA54()
{
}

void sub_10005FA80()
{
}

void sub_10005FAAC()
{
}

void sub_10005FAD8(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Unrecognized response '%d' from ManagedConfiguration. Will allow pairing with prompt.",  (uint8_t *)v2,  8u);
  sub_10000DDD0();
}

void sub_10005FB48()
{
}

void sub_10005FB74()
{
}

void sub_10005FBA0()
{
}

void sub_10005FBCC()
{
}

void sub_10005FBF8()
{
}

id objc_msgSend_active(void *a1, const char *a2, ...)
{
  return _[a1 active];
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_browser(void *a1, const char *a2, ...)
{
  return _[a1 browser];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_disconnectHandlers(void *a1, const char *a2, ...)
{
  return _[a1 disconnectHandlers];
}

id objc_msgSend_hostMayPairWithOptions_challenge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hostMayPairWithOptions:challenge:");
}

id objc_msgSend_lockdownShouldDisableDevicePairing(void *a1, const char *a2, ...)
{
  return _[a1 lockdownShouldDisableDevicePairing];
}

id objc_msgSend_log(void *a1, const char *a2, ...)
{
  return _[a1 log];
}

id objc_msgSend_setActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActive:");
}

id objc_msgSend_setBrowser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrowser:");
}

id objc_msgSend_sharedConnection(void *a1, const char *a2, ...)
{
  return _[a1 sharedConnection];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_startOnQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startOnQueue:");
}