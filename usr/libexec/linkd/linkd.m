int main(int argc, const char **argv, const char **envp)
{
  LNSetUserDirSuffix(LNDaemonBundleIdentifier, argv, envp);
  static Daemon.main()((uint64_t)&type metadata for LinkDaemon, (uint64_t)&protocol witness table for LinkDaemon);
}

uint64_t sub_100003690()
{
  return 0LL;
}

void type metadata accessor for LSPersistentIdentifier(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for AssistantIntentPhraseInterpolator.ApplicationPlaceholder( uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 sub_1000036E8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000036F4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100003714(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for audit_token_t(uint64_t a1)
{
}

uint64_t sub_100003754()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  char v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10000A1A0(0LL, (unint64_t *)&qword_100130560, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v10);
  v17 = _swiftEmptyArrayStorage;
  sub_100008C18( (unint64_t *)&qword_100130568,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v12 = v11;
  uint64_t v13 = sub_100008DB0(&qword_100130570);
  sub_100008EE8((unint64_t *)&qword_100130578, &qword_100130570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v4, v12);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v3,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000013LL,  0x80000001000F8FD0LL,  v9,  v6,  v3,  0LL);
  qword_100135008 = result;
  return result;
}

uint64_t sub_100003920()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A07C(v0, qword_100135010);
  sub_100008D98(v0, (uint64_t)qword_100135010);
  uint64_t v8 = &type metadata for AppShortcutDonator;
  uint64_t v1 = sub_100008DB0((uint64_t *)&unk_100132590);
  uint64_t v3 = String.init<A>(describing:)(&v8, v1);
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    uint64_t v5 = v2;
    uint64_t v6 = String.init(cString:)(LNLogSubsystem);
    return Logger.init(subsystem:category:)(v6, v7, v3, v5);
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_1000039C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v44 = a6;
  uint64_t v42 = a4;
  v43 = a5;
  type metadata accessor for DispatchWorkItemFlags(0LL);
  sub_10000AF80();
  __chkstk_darwin(v12);
  sub_10000AEB0();
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000A1A0(0LL, (unint64_t *)&unk_100130540, &OBJC_CLASS___KVDonator_ptr);
  swift_bridgeObjectRetain();
  uint64_t v17 = v45;
  id result = sub_100003CF8(a3, a1, a2);
  if (!v17)
  {
    v19 = result;
    v37[0] = 0LL;
    v38 = v16;
    uint64_t v39 = v7;
    uint64_t v40 = v14;
    uint64_t v41 = v13;
    uint64_t v45 = v8;
    if (qword_100130090 != -1) {
      swift_once(&qword_100130090, sub_100003754);
    }
    v37[1] = qword_100135008;
    sub_10000AFDC();
    v23 = (void *)swift_allocObject(v20, v21, v22);
    uint64_t v25 = v42;
    v24 = v43;
    v23[2] = v19;
    v23[3] = v25;
    uint64_t v26 = v44;
    v23[4] = v24;
    v23[5] = v26;
    v23[6] = a1;
    v23[7] = a2;
    aBlock[4] = sub_100008E30;
    aBlock[5] = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_100059784;
    aBlock[3] = &unk_1001225E0;
    v27 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    id v28 = v19;
    swift_retain();
    id v29 = v24;
    uint64_t v30 = sub_10000AFB0();
    v31 = v38;
    static DispatchQoS.unspecified.getter(v30);
    v47 = _swiftEmptyArrayStorage;
    sub_100008C18( (unint64_t *)&qword_100132630,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v33 = v32;
    uint64_t v34 = sub_100008DB0((uint64_t *)&unk_100130550);
    sub_100008EE8((unint64_t *)&qword_100132640, (uint64_t *)&unk_100130550);
    uint64_t v35 = v39;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v47, v34, v36, v6, v33);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v31, v35, v27);
    _Block_release(v27);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v35, v6);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v31, v41);
    return (id)swift_release();
  }

  return result;
}

void sub_100003C54()
{
  if ([(id)objc_opt_self(LNFeatureFlags) isLowPowerDeviceEnabled])
  {
    id v0 = [(id)objc_opt_self(_INVocabulary) sharedVocabulary];
    id v1 = String._bridgeToObjectiveC()();
    [v0 removeAllVocabularyStringsOnBehalfOf:v1];
  }

  else
  {
    sub_10000AED8();
  }
}

id sub_100003CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  id v12 = 0LL;
  id v7 = [(id)swift_getObjCClassFromMetadata(v3) donatorWithItemType:a1 originAppId:v6 error:&v12];

  id v8 = v12;
  if (v7)
  {
    id v9 = v12;
  }

  else
  {
    id v10 = v12;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }

  return v7;
}

void sub_100003DE4(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12 = (void *)swift_allocObject(&unk_100122618, 56LL, 7LL);
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a4;
  v12[5] = a5;
  v12[6] = a6;
  v15[4] = sub_100008ED8;
  v15[5] = v12;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256LL;
  v15[2] = sub_10000421C;
  v15[3] = &unk_100122630;
  uint64_t v13 = _Block_copy(v15);
  swift_retain();
  id v14 = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  [a1 donateWithOptions:2 usingStream:v13];
  _Block_release(v13);
}

void sub_100003EE0(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2)
  {
    uint64_t v30 = a6;
    swift_errorRetain(a2);
    uint64_t v17 = qword_100130098;
    swift_retain();
    id v18 = a4;
    swift_bridgeObjectRetain();
    if (v17 != -1) {
      swift_once(&qword_100130098, sub_100003920);
    }
    uint64_t v19 = sub_100008D98(v12, (uint64_t)qword_100135010);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v19, v12);
    swift_bridgeObjectRelease();

    swift_release();
    swift_errorRetain(a2);
    swift_bridgeObjectRetain();
    swift_errorRetain(a2);
    swift_bridgeObjectRetain();
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc(22LL, -1LL);
      id v28 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v29 = swift_slowAlloc(32LL, -1LL);
      uint64_t v32 = v29;
      *(_DWORD *)uint64_t v23 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v31 = sub_10000DE60(v30, a7, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease_n(a7, 3LL);
      *(_WORD *)(v23 + 12) = 2112;
      swift_errorRetain(a2);
      uint64_t v24 = _swift_stdlib_bridgeErrorToNSError(a2);
      uint64_t v31 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v23 + 14, v23 + 22);
      uint64_t v25 = v28;
      *id v28 = v24;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "Could not clear auto shortcuts vocabulary for %s. Error: %@",  (uint8_t *)v23,  0x16u);
      sub_100008DB0((uint64_t *)&unk_100132620);
      swift_arrayDestroy(v25, 1LL);
      swift_slowDealloc(v25, -1LL, -1LL);
      uint64_t v26 = v29;
      swift_arrayDestroy(v29, 1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);

      swift_errorRelease(a2);
    }

    else
    {
      swift_errorRelease(a2);
      swift_bridgeObjectRelease_n(a7, 2LL);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }

  else if (a1)
  {
    objc_msgSend(a1, "finish:", 0, v14);
  }

void sub_10000421C(uint64_t a1, void *a2, void *a3)
{
  NSString v6 = *(void (**)(void *, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v8 = a2;
  id v7 = a3;
  v6(a2, a3);
  swift_release(v5);
}

uint64_t sub_100004290( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[11] = a7;
  v8[12] = a8;
  v8[9] = a5;
  v8[10] = a6;
  v8[7] = a3;
  v8[8] = a4;
  v8[5] = a1;
  v8[6] = a2;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  v8[13] = v9;
  v8[14] = *(void *)(v9 - 8);
  v8[15] = sub_10000AF64();
  v8[16] = sub_10000AF64();
  v8[17] = sub_10000AF64();
  return swift_task_switch(sub_10000430C, 0LL, 0LL);
}

uint64_t sub_10000430C()
{
  id v1 = (void *)v0[5];
  uint64_t v2 = v1[4];
  uint64_t v3 = sub_100008D74(v1, v1[3]);
  uint64_t v4 = sub_10000AF10((uint64_t)v3, *(void *)(v2 + 8));
  uint64_t v6 = v5;
  v0[18] = v5;
  id v7 = (void *)swift_task_alloc(dword_100130534);
  v0[19] = v7;
  *id v7 = v0;
  v7[1] = sub_100004388;
  return sub_100004AA0(v4, v6, v0[6], v0[7], v0[10], v0[11], v0[12]);
}

uint64_t sub_100004388(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 152);
  *(void *)(*v2 + 160) = v1;
  swift_task_dealloc(v5);
  if (!v1)
  {
    swift_bridgeObjectRelease();
    *(void *)(v4 + 168) = a1;
  }

  return sub_10000AE28();
}

uint64_t sub_1000043F8()
{
  uint64_t v2 = *(void *)(v0 + 160);
  unint64_t v1 = *(void *)(v0 + 168);
  uint64_t v4 = *(void **)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 80);
  sub_10000AE98();
  id v6 = v4;
  sub_10000AFB0();
  uint64_t v7 = (uint64_t)sub_100005520(v1, v5, v6, v3);
  id v8 = (void *)v7;
  if ((unint64_t)v7 >> 62)
  {
    if (v7 >= 0) {
      v7 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v7);
  }

  else
  {
    uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  id v10 = *(void **)(v0 + 40);
  uint64_t v12 = *(void **)(v0 + 88);
  uint64_t v11 = *(void *)(v0 + 96);
  uint64_t v13 = *(void *)(v0 + 80);
  if (v9)
  {
    v38 = (uint64_t *)(v0 + 32);
    sub_1000056F4((uint64_t)v10, (uint64_t)v8, v13, v12);
    if (v2)
    {
      double v14 = *(void **)(v0 + 88);
      uint64_t v15 = qword_100130098;
      swift_retain();
      id v16 = v14;
      sub_10000AE38();
      if (v15 != -1)
      {
        swift_once(&qword_100130098, sub_100003920);
        id v16 = *(id *)(v0 + 88);
      }

      uint64_t v17 = *(os_log_s **)(v0 + 136);
      uint64_t v19 = *(void *)(v0 + 104);
      uint64_t v18 = *(void *)(v0 + 112);
      uint64_t v20 = sub_100008D98(v19, (uint64_t)qword_100135010);
      (*(void (**)(os_log_s *, uint64_t, uint64_t))(v18 + 16))(v17, v20, v19);
      swift_release();

      sub_10000ADB0();
      sub_10000ADF4();
      uint64_t v21 = sub_10000ADF4();
      os_log_type_t v22 = v17;
      Logger.logObject.getter(v21);
      os_log_type_t v23 = sub_10000AF38();
      if (os_log_type_enabled(v17, v23))
      {
        uint64_t v24 = (uint8_t *)sub_10000AE10(12LL);
        v37 = (void *)sub_10000AE10(8LL);
        *(_DWORD *)uint64_t v24 = 138412290;
        sub_10000ADF4();
        uint64_t v25 = sub_10000AF94();
        uint64_t *v38 = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v38, v0 + 40, v24 + 4, v24 + 12);
        void *v37 = v25;
        sub_10000AD70();
        sub_10000AD70();
        sub_10000AF5C( (void *)&_mh_execute_header,  v22,  v23,  "Failed to donate Auto Shortcuts to SiriVocabulary: %@",  v24);
        sub_100008DB0((uint64_t *)&unk_100132620);
        sub_10000AF48((uint64_t)v37);
        sub_10000AD78((uint64_t)v37);
        sub_10000AD78((uint64_t)v24);

        sub_10000AD70();
      }

      else
      {
        sub_10000AD70();
        sub_10000AD70();
        sub_10000AD70();
      }

      sub_10000AF40(*(void *)(v0 + 112));
    }

    if ([(id)objc_opt_self(LNFeatureFlags) isLowPowerDeviceEnabled]) {
      sub_100005B54( *(void **)(v0 + 40),  v8,  *(void *)(v0 + 72),  *(void *)(v0 + 80),  *(void **)(v0 + 88),  *(void **)(v0 + 96));
    }
    sub_10000AEE8();
    sub_100005F38(*(void **)(v0 + 40), *(void *)(v0 + 64), *(void *)(v0 + 80), *(void **)(v0 + 88));
    goto LABEL_17;
  }

  sub_10000AEE8();
  uint64_t v26 = v10[4];
  uint64_t v27 = sub_100008D74(v10, v10[3]);
  uint64_t v28 = sub_10000AF10((uint64_t)v27, *(void *)(v26 + 8));
  sub_1000039C8(v28, v29, 8LL, v13, v12, v11);
  if (!v2)
  {
    uint64_t v30 = sub_10000AF9C();
    sub_1000039C8(v30, v31, 18LL, v32, v33, v34);
    sub_10000AF9C();
    sub_100003C54();
    sub_10000ADB0();
LABEL_17:
    sub_10000AFD0();
    sub_10000AF6C();
    sub_10000AFA8();
    uint64_t v35 = *(uint64_t (**)(void))(v0 + 8);
    return v35();
  }

  sub_10000ADB0();
  sub_10000AFD0();
  sub_10000AF6C();
  sub_10000AFA8();
  uint64_t v35 = *(uint64_t (**)(void))(v0 + 8);
  return v35();
}

uint64_t sub_100004A4C()
{
  uint64_t v1 = *(void *)(v0 + 120);
  swift_task_dealloc(*(void *)(v0 + 136));
  sub_10000AFA8();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100004AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[12] = a6;
  v7[13] = a7;
  v7[10] = a2;
  v7[11] = a5;
  v7[9] = a1;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  v7[14] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[15] = v9;
  v7[16] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100004B08, 0LL, 0LL);
}

uint64_t sub_100004B08()
{
  uint64_t v1 = sub_10000F764();
  *(void *)(v0 + 136) = v1;
  *(void *)(v0 + 144) = v2;
  if (v2)
  {
    uint64_t v3 = v1;
    unint64_t v4 = v2;
    uint64_t v5 = *(void **)(v0 + 96);
    uint64_t v6 = qword_100130098;
    sub_10000AE98();
    id v7 = v5;
    sub_10000AE38();
    if (v6 != -1)
    {
      swift_once(&qword_100130098, sub_100003920);
      id v7 = *(id *)(v0 + 96);
    }

    uint64_t v8 = *(void *)(v0 + 120);
    uint64_t v9 = *(void *)(v0 + 128);
    uint64_t v10 = *(void *)(v0 + 80);
    uint64_t v11 = sub_100008D98(*(void *)(v0 + 112), (uint64_t)qword_100135010);
    sub_10000AFC4(v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16));
    swift_release();

    sub_10000ADB0();
    swift_bridgeObjectRetain_n(v10, 2LL);
    uint64_t v12 = swift_bridgeObjectRetain_n(v4, 2LL);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    BOOL v15 = sub_10000AEC8(v14);
    uint64_t v17 = *(void *)(v0 + 120);
    uint64_t v16 = *(void *)(v0 + 128);
    uint64_t v18 = *(void *)(v0 + 112);
    unint64_t v19 = *(void *)(v0 + 80);
    if (v15)
    {
      uint64_t v34 = v3;
      uint64_t v20 = *(void *)(v0 + 72);
      uint64_t v35 = *(void *)(v0 + 120);
      uint64_t v21 = sub_10000AE10(22LL);
      uint64_t v22 = sub_10000AE10(64LL);
      v36[0] = v22;
      *(_DWORD *)uint64_t v21 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 56) = sub_10000DE60(v20, v19, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease_n(v19, 3LL);
      *(_WORD *)(v21 + 12) = 2080;
      sub_10000AFB0();
      *(void *)(v0 + 64) = sub_10000DE60(v34, v4, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v21 + 14, v21 + 22);
      swift_bridgeObjectRelease_n(v4, 3LL);
      swift_arrayDestroy(v22, 2LL);
      sub_10000AD78(v22);
      sub_10000AD78(v21);

      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v16, v18);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 80), 2LL);
      swift_bridgeObjectRelease_n(v4, 2LL);

      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    }

    uint64_t v27 = *(void *)(v0 + 72);
    uint64_t v26 = *(void *)(v0 + 80);
    id v28 = objc_allocWithZone(&OBJC_CLASS___LSApplicationRecord);
    sub_10000AE38();
    id v29 = sub_100066138(v27, v26, 0LL);
    *(void *)(v0 + 152) = v29;
    *(void *)(v0 + 160) = 0LL;
    uint64_t v31 = v29;
    uint64_t v32 = *(void *)(v0 + 88);
    *(void *)(v0 + 40) = sub_10000A1A0(0LL, &qword_100130630, &OBJC_CLASS___LSApplicationRecord_ptr);
    *(void *)(v0 + 48) = &off_100122EC8;
    *(void *)(v0 + 16) = v31;
    id v33 = v31;
    return swift_task_switch(sub_100004E7C, v32, 0LL);
  }

  else
  {
    unint64_t v23 = sub_10000A164();
    uint64_t v24 = swift_allocError(&type metadata for DonationError, v23, 0LL, 0LL);
    *uint64_t v25 = 1;
    swift_willThrow(v24);
    swift_task_dealloc(*(void *)(v0 + 128));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100004E7C()
{
  uint64_t v1 = v0[20];
  v0[21] = sub_10001EDC4((uint64_t)(v0 + 2), v0[17], v0[18]);
  v0[22] = v1;
  swift_bridgeObjectRelease();
  if (!v1) {
    sub_10000AC58(v0 + 2);
  }
  return sub_10000AE28();
}

uint64_t sub_100004EE8()
{
  sub_10000AF6C();
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 168));
}

uint64_t sub_100004F28()
{
  sub_10000AC58((void *)(v0 + 16));
  swift_task_dealloc(*(void *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100004F70(void **a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *a1;
  char v12 = sub_10008D52C(*a1, a4);
  if ((v12 & 1) == 0)
  {
    uint64_t v13 = qword_100130098;
    swift_retain();
    id v14 = a3;
    swift_bridgeObjectRetain();
    if (v13 != -1) {
      swift_once(&qword_100130098, sub_100003920);
    }
    uint64_t v15 = sub_100008D98(v7, (uint64_t)qword_100135010);
    uint64_t v16 = v8;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v15, v7);
    swift_bridgeObjectRelease();

    swift_release();
    id v17 = v11;
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    int v20 = v19;
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v21 = swift_slowAlloc(22LL, -1LL);
      int v38 = v20;
      uint64_t v22 = v21;
      uint64_t v39 = swift_slowAlloc(64LL, -1LL);
      uint64_t v42 = v39;
      *(_DWORD *)uint64_t v22 = 136315394;
      uint64_t v36 = v22 + 4;
      id v23 = [v17 actionIdentifier];
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      uint64_t v37 = v16;
      unint64_t v26 = v25;

      uint64_t v40 = sub_10000DE60(v24, v26, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v36, v22 + 12);

      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      uint64_t v36 = v22 + 14;
      id v27 = [v17 bundleIdentifier];
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      os_log_t v35 = v18;
      unint64_t v30 = v29;

      uint64_t v40 = sub_10000DE60(v28, v30, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v36, v22 + 22);

      swift_bridgeObjectRelease();
      os_log_t v31 = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  (os_log_type_t)v38,  "%s in %s is denylisted, skipping donation.",  (uint8_t *)v22,  0x16u);
      uint64_t v32 = v39;
      swift_arrayDestroy(v39, 2LL);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v22, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v37 + 8))(v10, v7);
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
  }

  return v12 & 1;
}

void *sub_100005288(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_24;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_3:
  uint64_t v34 = a2;
  if (v4)
  {
    unint64_t v5 = 0LL;
    unint64_t v33 = v3 & 0xC000000000000001LL;
    os_log_t v31 = (void *)LNSystemProtocolIdentifierConditionallyEnabled;
    uint64_t v32 = v3 & 0xFFFFFFFFFFFFFF8LL;
    while (1)
    {
      if (v33)
      {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
      }

      else
      {
        if (v5 >= *(void *)(v32 + 16))
        {
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          if (v3 < 0) {
            uint64_t v30 = v3;
          }
          else {
            uint64_t v30 = v3 & 0xFFFFFFFFFFFFFF8LL;
          }
          uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v30);
          goto LABEL_3;
        }

        id v6 = *(id *)(v3 + 8 * v5 + 32);
      }

      uint64_t v7 = v6;
      unint64_t v8 = v5 + 1;
      if (__OFADD__(v5, 1LL)) {
        goto LABEL_23;
      }
      uint64_t v9 = v3;
      uint64_t v10 = v4;
      id v11 = [v6 actionIdentifier];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      uint64_t v14 = v13;

      if (!*(void *)(a2 + 16)) {
        break;
      }
      uint64_t v15 = sub_100015F98(v12, v14);
      if ((v16 & 1) == 0) {
        break;
      }
      id v17 = *(id *)(*(void *)(a2 + 56) + 8 * v15);
      swift_bridgeObjectRelease();
      id v18 = [v17 systemProtocolMetadata];
      type metadata accessor for LNSystemProtocolIdentifier(0LL);
      uint64_t v20 = v19;
      uint64_t v21 = sub_100008DB0((uint64_t *)&unk_100130600);
      sub_100008C18( &qword_100130BB0,  (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier,  (uint64_t)&unk_1000F52F8);
      uint64_t v23 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v18, v20, v21, v22);

      if (!*(void *)(v23 + 16)) {
        goto LABEL_16;
      }
      id v24 = v31;
      sub_100015FAC();
      if ((v25 & 1) == 0)
      {

LABEL_16:
        swift_bridgeObjectRelease();

LABEL_17:
        uint64_t v4 = v10;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v26);
        uint64_t v27 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v27);
        uint64_t v28 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v7);
        specialized ContiguousArray._endMutation()(v28);
        goto LABEL_18;
      }

      swift_bridgeObjectRelease();
      uint64_t v4 = v10;
LABEL_18:
      uint64_t v3 = v9;
      ++v5;
      a2 = v34;
      if (v8 == v4) {
        goto LABEL_21;
      }
    }

    uint64_t v26 = swift_bridgeObjectRelease();
    goto LABEL_17;
  }

LABEL_21:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

  id v6 = v7;
LABEL_47:
  sub_100015BF8(v4, (v12 - v4) / 16, v6);
  return 1LL;
}

    id v6 = (v12 - 1) & v12;
  }

  uint64_t v13 = v11 + 4;
  if (v13 >= v7)
  {
LABEL_24:
    swift_release();
    return;
  }

  uint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12)
  {
    unint64_t v8 = v13;
    goto LABEL_21;
  }

  while (1)
  {
    unint64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v8 >= v7) {
      goto LABEL_24;
    }
    uint64_t v12 = *(void *)(v3 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }

  id v6 = v7;
LABEL_47:
  os_log_t v31 = (v12 - v4) / 16;
  if (v6 != v4 || v6 >= &v4[16 * v31]) {
    memmove(v6, v4, 16 * v31);
  }
  return 1LL;
}

void *sub_100005520(unint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = a1;
  unint64_t v29 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v10 = *(void **)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v10)
  {
    while (1)
    {
      unint64_t v11 = 0LL;
      uint64_t v26 = v9 & 0xFFFFFFFFFFFFFF8LL;
      unint64_t v27 = v9 & 0xC000000000000001LL;
      char v25 = v10;
      while (v27)
      {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v9);
LABEL_7:
        uint64_t v13 = v12;
        uint64_t v14 = (void *)(v11 + 1);
        if (__OFADD__(v11, 1LL)) {
          goto LABEL_17;
        }
        uint64_t v28 = v12;
        uint64_t v15 = sub_100004F70(&v28, a2, a3, a4);
        if (v5)
        {
          swift_bridgeObjectRelease();

          swift_release();
          goto LABEL_24;
        }

        if ((v15 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
          uint64_t v16 = v9;
          uint64_t v17 = a4;
          id v18 = a3;
          uint64_t v19 = a2;
          uint64_t v20 = v29[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v20);
          uint64_t v21 = v20;
          a2 = v19;
          a3 = v18;
          a4 = v17;
          uint64_t v9 = v16;
          uint64_t v5 = 0LL;
          uint64_t v22 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v13);
          specialized ContiguousArray._endMutation()(v22);
          uint64_t v10 = v25;
        }

        else
        {
        }

        ++v11;
        if (v14 == v10)
        {
          uint64_t v10 = v29;
          goto LABEL_23;
        }
      }

      if (v11 < *(void *)(v26 + 16)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      if (v9 < 0) {
        uint64_t v23 = v9;
      }
      else {
        uint64_t v23 = v9 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v10 = (void *)_CocoaArrayWrapper.endIndex.getter(v23);
      if (!v10) {
        goto LABEL_22;
      }
    }

    id v12 = *(id *)(v9 + 8 * v11 + 32);
    goto LABEL_7;
  }

LABEL_22:
  uint64_t v10 = _swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease();
LABEL_24:
  swift_bridgeObjectRelease();

  swift_release();
  return v10;
}

  uint64_t v23 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  id v24 = (void *)(*(void *)(v23 + 48) + 16 * a3);
  uint8_t *v24 = a1;
  v24[1] = a2;
  char v25 = *(void *)(v23 + 16);
  uint64_t v26 = __OFADD__(v25, 1LL);
  unint64_t v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v23 + 16) = v27;
  }
}

    __break(1u);
  }

      sub_10001191C(v12);

      uint64_t v4 = v87;
      uint64_t v0 = v89;
      if (v87 == v85)
      {
        uint64_t v3 = v89[2];
        goto LABEL_29;
      }
    }
  }

  else
  {
    uint64_t v5 = _swiftEmptyArrayStorage;
LABEL_29:
    swift_bridgeObjectRelease(v3);
    sub_1000691DC((uint64_t)v5, sub_10006C7D4);
    uint64_t v30 = v29;
    os_log_t v31 = *(void *)(v29 + 16);
    uint64_t v32 = (uint64_t)_swiftEmptyArrayStorage;
    if (v31)
    {
      v93 = _swiftEmptyArrayStorage;
      sub_10001C1BC();
      specialized ContiguousArray.reserveCapacity(_:)(v31);
      unint64_t v33 = 32LL;
      do
      {
        uint64_t v34 = *(id *)(v30 + v33);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v34);
        os_log_t v35 = v93[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v35);
        uint64_t v36 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v35, v34);
        specialized ContiguousArray._endMutation()(v36);
        v33 += 16LL;
        --v31;
      }

      while (v31);
      uint64_t v32 = (uint64_t)v93;
      sub_10001DF40();
    }

    v90 = v32;
    if ((unint64_t)v32 >> 62)
    {
      if (v32 >= 0) {
        v32 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      swift_bridgeObjectRetain();
      v83 = v32;
      uint64_t v32 = v90;
      uint64_t v37 = _CocoaArrayWrapper.endIndex.getter(v83);
    }

    else
    {
      uint64_t v37 = *(void *)((v32 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      sub_10000AE38();
    }

    v88 = v30;
    int v38 = _swiftEmptyArrayStorage;
    if (!v37)
    {
LABEL_58:
      v54 = (void *)v0[5];
      v91 = v0[4];
      v55 = v0[3];
      sub_10001191C(v32);
      v93 = &_swiftEmptySetSingleton;
      v56 = sub_10001BD0C();
      sub_100069BFC(v56);
      v58 = v57;
      swift_bridgeObjectRelease(v93);
      sub_10000AEE8();
      v59 = sub_100008D74(v54 + 2, v54[5]);
      v60 = *v59;
      v61 = v59[1];
      v62 = v59[2];
      v63 = v59[3];
      sub_10001BD0C();
      sub_10001C1BC();
      sub_1000280C8();
      v64 = sub_1000697EC(v58, v60, v61, v62, v63);
      v65 = sub_100069B2C((uint64_t)v64, &qword_100130F10, (void (*)(void))sub_100017514, &qword_100132A50);
      swift_retain(v54);
      sub_10006C148((uint64_t)v65, (uint64_t)v54);
      v67 = v66;
      sub_10000ADB0();
      v68 = v54[8];
      v54[8] = v67;
      swift_bridgeObjectRelease(v68);
      v69 = sub_100008DB0(&qword_1001321E8);
      v70 = _swiftEmptyArrayStorage;
      Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v69,  &protocol witness table for String);
      sub_10006C9C0();
      v71 = v54[7];
      v54[7] = v65;
      swift_bridgeObjectRelease(v71);
      v72 = (void *)swift_task_alloc(48LL);
      v72[2] = v54;
      v72[3] = v55;
      v72[4] = v91;
      v93 = _swiftEmptyArrayStorage;
      v73 = *(void *)(v88 + 16);
      if (v73)
      {
        sub_10000AE38();
        v74 = (void **)(v88 + 40);
        v75 = v89;
        do
        {
          v76 = v89[4];
          v77 = v89[3];
          v78 = *v74;
          v79 = *(v74 - 1);
          v80 = v78;
          sub_10006A868(v79, v77, v76, v80);

          sub_100042A78();
          v74 += 2;
          --v73;
        }

        while (v73);
        sub_10000ADB0();
        v70 = v93;
      }

      else
      {
        v75 = v89;
      }

      sub_10000ADB0();
      swift_task_dealloc(v72);
      return ((uint64_t (*)(void *))v75[1])(v70);
    }

    uint64_t v39 = 0LL;
    uint64_t v40 = v32 & 0xC000000000000001LL;
    while (1)
    {
      uint64_t v41 = v40 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v39, v32) : sub_10003F0A0(v32 + 8 * v39);
      uint64_t v42 = v41;
      v43 = v39 + 1;
      if (__OFADD__(v39, 1LL)) {
        break;
      }
      v92 = v41;
      sub_10006A458(&v92, &v93);

      uint64_t v44 = v93;
      uint64_t v45 = v93[2];
      v46 = v38[2];
      if (__OFADD__(v46, v45)) {
        goto LABEL_66;
      }
      if (!swift_isUniquelyReferenced_nonNull_native(v38) || v46 + v45 > v38[3] >> 1)
      {
        sub_1000141B8();
        int v38 = v47;
      }

      if (v44[2])
      {
        v48 = v38[2];
        if ((v38[3] >> 1) - v48 < v45) {
          goto LABEL_69;
        }
        v49 = (unint64_t)&v38[2 * v48 + 4];
        if ((unint64_t)(v44 + 4) < v49 + 16 * v45 && v49 < (unint64_t)&v44[2 * v45 + 4]) {
          return _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
        }
        swift_arrayInitWithCopy(v49);
        if (v45)
        {
          v51 = v38[2];
          unint64_t v8 = __OFADD__(v51, v45);
          v52 = v51 + v45;
          if (v8) {
            goto LABEL_70;
          }
          v38[2] = v52;
        }
      }

      else if (v45)
      {
        goto LABEL_67;
      }

      swift_bridgeObjectRelease(v44);
      ++v39;
      v53 = v43 == v37;
      uint64_t v0 = v89;
      uint64_t v32 = v90;
      if (v53) {
        goto LABEL_58;
      }
    }

  sub_10001DEE8();
}

  int v38 = [a1 valueType];
  uint64_t v39 = objc_opt_self(&OBJC_CLASS___LNEntityValueType);
  uint64_t v40 = swift_dynamicCastObjCClass(v38, v39);

  if (v40)
  {
    uint64_t v41 = [a1 value];
    _bridgeAnyObjectToAny(_:)(&v60, v41);
    swift_unknownObjectRelease(v41);
    if ((swift_dynamicCast(&v58, &v60, (char *)&type metadata for Any + 8, type metadata for String, 6LL) & 1) != 0)
    {
      id v24 = (uint64_t)v58;
      uint64_t v23 = (unint64_t)v59;
LABEL_25:
      swift_bridgeObjectRetain();
      uint64_t v16 = a3;
LABEL_30:
      swift_bridgeObjectRetain();
      goto LABEL_31;
    }
  }

  uint64_t v42 = [a1 valueType];
  v43 = sub_100077534();

  uint64_t v16 = a3;
  if ((v43 & 1) != 0
    && (uint64_t v44 = [a1 value],
        _bridgeAnyObjectToAny(_:)(&v60, v44),
        swift_unknownObjectRelease(v44),
        (swift_dynamicCast(&v58, &v60, (char *)&type metadata for Any + 8, type metadata for String, 6LL) & 1) != 0)
    || (uint64_t v45 = [a1 value],
        _bridgeAnyObjectToAny(_:)(&v60, v45),
        swift_unknownObjectRelease(v45),
        swift_dynamicCast(&v58, &v60, (char *)&type metadata for Any + 8, type metadata for String, 6LL)))
  {
    id v24 = (uint64_t)v58;
    uint64_t v23 = (unint64_t)v59;
    swift_bridgeObjectRetain();
    goto LABEL_30;
  }

  if (qword_1001302D8 != -1) {
    swift_once(&qword_1001302D8, sub_100088814);
  }
  v49 = type metadata accessor for Logger(0LL);
  sub_100008D98(v49, (uint64_t)qword_100135780);
  v50 = swift_bridgeObjectRetain_n(a3, 2LL);
  v51 = (os_log_s *)Logger.logObject.getter(v50);
  v52 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v51, v52))
  {
    v53 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v54 = swift_slowAlloc(32LL, -1LL);
    v60 = v54;
    *(_DWORD *)v53 = 136315138;
    swift_bridgeObjectRetain();
    v58 = (void *)sub_10000DE60(a2, a3, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v53 + 4, v53 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Tried converting parameter %s to String but failed", v53, 0xCu);
    swift_arrayDestroy(v54, 1LL);
    swift_slowDealloc(v54, -1LL, -1LL);
    swift_slowDealloc(v53, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  v48 = 0LL;
  a5 = 0LL;
  v47 = 0LL;
  uint64_t v16 = 0LL;
  id v24 = 0LL;
  uint64_t v23 = 0LL;
  v46 = 0LL;
LABEL_32:
  *(void *)a6 = v48;
  *(void *)(a6 + 8) = a5;
  *(void *)(a6 + 16) = v47;
  *(void *)(a6 + 24) = v16;
  *(void *)(a6 + 32) = v24;
  *(void *)(a6 + 40) = v23;
  *(void *)(a6 + 48) = v46;
  *(_WORD *)(a6 + 56) = 0;
}

              swift_release(v4);
              return 1LL;
            }
          }
        }
      }
    }

  id v12 = _swiftEmptyArrayStorage;
LABEL_23:
  sub_10001BC70();
  return v12;
}

  v61 = 0LL;
  v62 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  v49._object = (void *)0x80000001000FAD80LL;
  v49._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v49);
  _print_unlocked<A, B>(_:_:)( v63,  &v61,  &type metadata for String,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v50._countAndFlagsBits = 39LL;
  v50._object = (void *)0xE100000000000000LL;
  String.append(_:)(v50);
  id result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v61,  v62,  "Swift/NativeDictionary.swift",  28LL,  2LL,  783LL,  0);
  __break(1u);
  return result;
}

      uint64_t v7 = (v13 - 1) & v13;
      unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
      uint64_t v9 = v14;
    }

    uint64_t v22 = *(void *)(v2 + 48);
    uint64_t v23 = (void *)(v22 + 16 * v21);
    id v24 = v23[1];
    char v25 = *v23 == v18 && v24 == v17;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, v18, v17, 0LL) & 1) != 0)
    {
      isStackAllocationSafe = swift_bridgeObjectRelease();
      v43 = a1;
      uint64_t v44 = v41;
      uint64_t v45 = v39;
      v46 = v9;
      v47 = v7;
    }

    else
    {
      uint64_t v26 = ~v20;
      do
      {
        uint64_t v21 = (v21 + 1) & v26;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) == 0) {
          goto LABEL_37;
        }
        unint64_t v27 = (void *)(v22 + 16 * v21);
        uint64_t v28 = v27[1];
        unint64_t v29 = *v27 == v18 && v28 == v17;
      }

      while (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v27, v28, v18, v17, 0LL) & 1) == 0);
      v43 = a1;
      uint64_t v44 = v41;
      uint64_t v45 = v39;
      v46 = v9;
      v47 = v7;
      isStackAllocationSafe = swift_bridgeObjectRelease();
    }

    os_log_t v31 = *(_BYTE *)(v2 + 32);
    uint64_t v32 = v31 & 0x3F;
    unint64_t v33 = (1LL << v31) + 63;
    uint64_t v34 = v33 >> 6;
    os_log_t v35 = 8 * (v33 >> 6);
    if (v32 < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v33 >> 6), 8LL), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0LL), (const void *)(v2 + 56), v35);
      uint64_t v36 = sub_1000B1A34((unint64_t *)((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v34, v2, v21, &v43);
      swift_release();
      sub_10001B100(v43);
    }

    else
    {
      uint64_t v37 = (void *)swift_slowAlloc(v35, -1LL);
      memcpy(v37, (const void *)(v2 + 56), v35);
      uint64_t v36 = sub_1000B1A34((unint64_t *)v37, v34, v2, v21, &v43);
      swift_release();
      sub_10001B100(v43);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    return v36;
  }

  else
  {
    swift_release();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }

void sub_1000056F4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v47 = a1;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v45 = *(void *)(v6 - 8);
  uint64_t v46 = v6;
  __chkstk_darwin(v6);
  uint64_t v44 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v42 = *(void *)(v8 - 8);
  uint64_t v43 = v8;
  __chkstk_darwin(v8);
  uint64_t v41 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = qword_100130098;
  swift_retain();
  id v15 = a4;
  swift_bridgeObjectRetain();
  if (v14 != -1) {
    swift_once(&qword_100130098, sub_100003920);
  }
  uint64_t v16 = sub_100008D98(v10, (uint64_t)qword_100135010);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v16, v10);
  swift_bridgeObjectRelease();

  uint64_t v17 = swift_release();
  id v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Donating Auto Shortcuts to SiriVocabulary", v20, 2u);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  sub_1000BB0B4();
  if (!v4)
  {
    uint64_t v22 = v21;
    if ((unint64_t)v21 >> 62)
    {
      if (v21 < 0) {
        uint64_t v40 = v21;
      }
      else {
        uint64_t v40 = v21 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter(v40);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v23 = *(void *)((v21 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    id v24 = (void *)v47;
    if (v23)
    {
      sub_10000A1A0(0LL, (unint64_t *)&unk_100130540, &OBJC_CLASS___KVDonator_ptr);
      uint64_t v26 = v24[3];
      uint64_t v25 = v24[4];
      sub_100008D74(v24, v26);
      uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)(v25 + 8) + 8LL))(v26);
      id v29 = sub_100003CF8(8LL, v27, v28);
      if (qword_100130090 != -1) {
        swift_once(&qword_100130090, sub_100003754);
      }
      uint64_t v47 = qword_100135008;
      sub_100008F24((uint64_t)v24, (uint64_t)v49);
      uint64_t v30 = swift_allocObject(&unk_100122708, 72LL, 7LL);
      *(void *)(v30 + 16) = v29;
      *(void *)(v30 + 24) = v22;
      sub_100009EEC(v49, v30 + 32);
      aBlock[4] = sub_10000A0F4;
      aBlock[5] = v30;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_100059784;
      aBlock[3] = &unk_100122720;
      os_log_t v31 = _Block_copy(aBlock);
      id v32 = v29;
      unint64_t v33 = v41;
      static DispatchQoS.unspecified.getter(v32);
      v50 = _swiftEmptyArrayStorage;
      sub_100008C18( (unint64_t *)&qword_100132630,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v35 = v34;
      uint64_t v36 = sub_100008DB0((uint64_t *)&unk_100130550);
      sub_100008EE8((unint64_t *)&qword_100132640, (uint64_t *)&unk_100130550);
      uint64_t v37 = v44;
      uint64_t v38 = v46;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v50, v36, v39, v46, v35);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v33, v37, v31);
      _Block_release(v31);

      (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v38);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v33, v43);
      swift_release();
    }

    else
    {
      swift_bridgeObjectRelease();
    }
  }

void sub_100005B54(void *a1, void *a2, unint64_t a3, uint64_t a4, void *a5, void *a6)
{
  unint64_t v48 = a3;
  id v47 = a2;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_100008D74(a1, v14);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)(v13 + 8) + 8LL))(v14);
  unint64_t v16 = v49;
  id v18 = sub_1000074B0(v15, v17, (uint64_t)v47, v48);
  if (v16) {
    goto LABEL_2;
  }
  id v47 = a6;
  unint64_t v48 = 0LL;
  unint64_t v49 = (unint64_t)v18;
  swift_bridgeObjectRelease();
  if (v49 >> 62)
  {
    uint64_t v43 = (v49 & 0x8000000000000000LL) != 0LL ? v49 : v49 & 0xFFFFFFFFFFFFFF8LL;
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v43);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v19 = *(void *)((v49 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v20 = v9;
  uint64_t v21 = a1;
  uint64_t v22 = v10;
  uint64_t v23 = v12;
  if (!v19)
  {
LABEL_2:
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v24 = qword_100130098;
    swift_retain();
    id v25 = a5;
    swift_bridgeObjectRetain();
    if (v24 != -1) {
      swift_once(&qword_100130098, sub_100003920);
    }
    uint64_t v26 = sub_100008D98(v20, (uint64_t)qword_100135010);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v23, v26, v20);
    swift_bridgeObjectRelease();
    id v47 = v25;

    swift_release();
    uint64_t v27 = sub_100008F24((uint64_t)a1, (uint64_t)v51);
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc(12LL, -1LL);
      uint64_t v45 = v23;
      os_log_t v31 = (uint8_t *)v30;
      uint64_t v32 = swift_slowAlloc(32LL, -1LL);
      uint64_t v54 = v32;
      *(_DWORD *)os_log_t v31 = 136315138;
      uint64_t v44 = v31 + 4;
      uint64_t v46 = v22;
      uint64_t v34 = v52;
      uint64_t v33 = v53;
      sub_100008D74(v51, v52);
      uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)(v33 + 8) + 8LL))(v34);
      uint64_t v50 = sub_10000DE60(v35, v36, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v44, v31 + 12);
      swift_bridgeObjectRelease();
      sub_10000AC58(v51);
      _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "Calling INVocabulary to sync App Shortcuts to Siri server for %s",  v31,  0xCu);
      swift_arrayDestroy(v32, 1LL);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v20);
    }

    else
    {
      sub_10000AC58(v51);

      (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v20);
    }

    sub_10000A1A0(0LL, &qword_100130580, &OBJC_CLASS___NSOrderedSet_ptr);
    sub_10004204C(v49);
    uint64_t v38 = v37;
    swift_bridgeObjectRelease();
    id v39 = sub_100007998(v38);
    uint64_t v41 = v21[3];
    uint64_t v40 = v21[4];
    sub_100008D74(v21, v41);
    (*(void (**)(uint64_t))(*(void *)(v40 + 8) + 8LL))(v41);
    NSString v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v47 setVocabulary:v39 ofType:50003 onBehalfOf:v42];
  }

void sub_100005F38(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  v70 = a1;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v69 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  v68 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v66 = *(void *)(v8 - 8);
  uint64_t v67 = v8;
  __chkstk_darwin(v8);
  v65 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v71 = a2;
  uint64_t v14 = *(void ***)(a2 + 16);
  uint64_t v15 = qword_100130098;
  if (v14)
  {
    uint64_t v64 = v6;
    swift_retain();
    id v16 = a4;
    swift_bridgeObjectRetain();
    if (v15 != -1) {
      swift_once(&qword_100130098, sub_100003920);
    }
    uint64_t v17 = sub_100008D98(v10, (uint64_t)qword_100135010);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v17, v10);
    swift_bridgeObjectRelease();

    swift_release();
    swift_bridgeObjectRetain();
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v21 = 134217984;
      aBlock = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v74, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "Donating %ld AppShortcuts spans to SiriVocabulary",  v21,  0xCu);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease();
    }

    uint64_t v31 = v72;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    sub_10000A1A0(0LL, (unint64_t *)&unk_100130610, &OBJC_CLASS___AFPreferences_ptr);
    uint64_t v32 = sub_10000F764();
    if (v33)
    {
      uint64_t v34 = v32;
      uint64_t v35 = v33;
      id v36 = [objc_allocWithZone(KVItemBuilder) init];
      __chkstk_darwin(v36);
      *(&v63 - 4) = v37;
      *(&v63 - 3) = v34;
      *(&v63 - 2) = v35;
      swift_bridgeObjectRetain();
      uint64_t v39 = sub_10000819C(v38, (uint64_t (*)(uint64_t, void *))sub_100009ECC);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v31) {
        return;
      }
      if ((unint64_t)v39 >> 62)
      {
        if (v39 < 0) {
          uint64_t v60 = v39;
        }
        else {
          uint64_t v60 = v39 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain();
        uint64_t v61 = _CocoaArrayWrapper.endIndex.getter(v60);
        swift_bridgeObjectRelease();
        if (v61) {
          goto LABEL_15;
        }
      }

      else if (*(void *)((v39 & 0xFFFFFFFFFFFFF8LL) + 0x10))
      {
LABEL_15:
        sub_10000A1A0(0LL, (unint64_t *)&unk_100130540, &OBJC_CLASS___KVDonator_ptr);
        uint64_t v40 = v70;
        uint64_t v42 = v70[3];
        uint64_t v41 = v70[4];
        sub_100008D74(v70, v42);
        uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)(v41 + 8) + 8LL))(v42);
        id v49 = sub_100003CF8(18LL, v43, v44);
        if (qword_100130090 != -1) {
          swift_once(&qword_100130090, sub_100003754);
        }
        uint64_t v72 = qword_100135008;
        sub_100008F24((uint64_t)v40, (uint64_t)v78);
        uint64_t v50 = swift_allocObject(&unk_100122668, 72LL, 7LL);
        *(void *)(v50 + 16) = v49;
        *(void *)(v50 + 24) = v39;
        sub_100009EEC(v78, v50 + 32);
        v76 = sub_100009F04;
        uint64_t v77 = v50;
        aBlock = _NSConcreteStackBlock;
        v74[0] = 1107296256LL;
        v74[1] = sub_100059784;
        v75 = &unk_100122680;
        v51 = _Block_copy(&aBlock);
        id v52 = v49;
        uint64_t v53 = v65;
        static DispatchQoS.unspecified.getter(v52);
        v79 = _swiftEmptyArrayStorage;
        sub_100008C18( (unint64_t *)&qword_100132630,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v55 = v54;
        uint64_t v56 = sub_100008DB0((uint64_t *)&unk_100130550);
        sub_100008EE8((unint64_t *)&qword_100132640, (uint64_t *)&unk_100130550);
        v57 = v68;
        uint64_t v58 = v64;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v56, v59, v64, v55);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v53, v57, v51);
        _Block_release(v51);

        (*(void (**)(char *, uint64_t))(v69 + 8))(v57, v58);
        (*(void (**)(char *, uint64_t))(v66 + 8))(v53, v67);
        swift_release();
        return;
      }

      uint64_t v62 = swift_bridgeObjectRelease();
      uint64_t v45 = (os_log_s *)Logger.logObject.getter(v62);
      os_log_type_t v46 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v45, v46))
      {
        id v47 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)id v47 = 0;
        unint64_t v48 = "Spans produced no kvItems, exiting early.";
        goto LABEL_18;
      }
    }

    else
    {
      uint64_t v45 = (os_log_s *)Logger.logObject.getter(v32);
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        id v47 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)id v47 = 0;
        unint64_t v48 = "Cannot get Siri language to register app entity span data.";
LABEL_18:
        _os_log_impl((void *)&_mh_execute_header, v45, v46, v48, v47, 2u);
        swift_slowDealloc(v47, -1LL, -1LL);
      }
    }

    return;
  }

  if (qword_100130098 != -1) {
    swift_once(&qword_100130098, sub_100003920);
  }
  sub_100008D98(v10, (uint64_t)qword_100135010);
  uint64_t v22 = sub_100008F24((uint64_t)v70, (uint64_t)&aBlock);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    id v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v26 = swift_slowAlloc(32LL, -1LL);
    *(void *)&v78[0] = v26;
    *(_DWORD *)id v25 = 136315138;
    uint64_t v28 = v75;
    uint64_t v27 = v76;
    sub_100008D74(&aBlock, (uint64_t)v75);
    uint64_t v29 = (*(uint64_t (**)(void *))(*((void *)v27 + 1) + 8LL))(v28);
    v79 = (void *)sub_10000DE60(v29, v30, (uint64_t *)v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease();
    sub_10000AC58(&aBlock);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Empty spans, will not donate for %s", v25, 0xCu);
    swift_arrayDestroy(v26, 1LL);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  else
  {
    sub_10000AC58(&aBlock);
  }
}

void sub_1000066CC(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2)
  {
    if (qword_100130098 != -1) {
LABEL_45:
    }
      swift_once(&qword_100130098, sub_100003920);
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_100008D98(v4, (uint64_t)qword_100135010);
    oslog = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(oslog, v6)) {
      goto LABEL_32;
    }
    uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v7 = 0;
    uint64_t v8 = "Could not get a donator from SiriVocabulary, skipping span donations";
    goto LABEL_31;
  }

  if (!a1 || (uint64_t v12 = objc_opt_self(&OBJC_CLASS___KVFullDatasetStream), (v13 = swift_dynamicCastObjCClass(a1, v12)) == 0))
  {
    if (qword_100130098 != -1) {
      swift_once(&qword_100130098, sub_100003920);
    }
    uint64_t v41 = type metadata accessor for Logger(0LL);
    uint64_t v42 = sub_100008D98(v41, (uint64_t)qword_100135010);
    oslog = (os_log_s *)Logger.logObject.getter(v42);
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(oslog, v6)) {
      goto LABEL_32;
    }
    uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v7 = 0;
    uint64_t v8 = "Got unexpected stream type from SiriVocabulary, skipping span donations";
LABEL_31:
    _os_log_impl((void *)&_mh_execute_header, oslog, v6, v8, v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
LABEL_32:

    return;
  }

  uint64_t v14 = (void *)v13;
  unint64_t v15 = a3 >> 62;
  if (a3 >> 62)
  {
    if ((a3 & 0x8000000000000000LL) != 0LL) {
      uint64_t v55 = a3;
    }
    else {
      uint64_t v55 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    id v56 = a1;
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v55);
  }

  else
  {
    uint64_t v16 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    id v17 = a1;
    swift_bridgeObjectRetain();
  }

  uint64_t v60 = a3;
  uint64_t v59 = a1;
  if (v16)
  {
    uint64_t v57 = a4;
    unint64_t v58 = a3 >> 62;
    if (v16 < 1) {
      __break(1u);
    }
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    unint64_t v20 = a3 & 0xC000000000000001LL;
    uint64_t v21 = &selRef_isLowPowerDeviceEnabled;
    os_log_t osloga = (os_log_t)v16;
    do
    {
      if (v20) {
        id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, a3);
      }
      else {
        id v22 = *(id *)(a3 + 8 * v19 + 32);
      }
      uint64_t v23 = v22;
      v66[0] = 0LL;
      unsigned int v24 = objc_msgSend(v14, v21[5], v22, v66);
      id v25 = v66[0];
      if (v24)
      {
        id v26 = v66[0];

        if (__OFADD__(v18++, 1LL))
        {
          __break(1u);
          goto LABEL_45;
        }
      }

      else
      {
        uint64_t v28 = v14;
        id v29 = v66[0];
        uint64_t v30 = _convertNSErrorToError(_:)(v25);

        swift_willThrow(v31);
        if (qword_100130098 != -1) {
          swift_once(&qword_100130098, sub_100003920);
        }
        uint64_t v32 = type metadata accessor for Logger(0LL);
        sub_100008D98(v32, (uint64_t)qword_100135010);
        swift_errorRetain(v30);
        uint64_t v33 = v23;
        uint64_t v34 = swift_errorRetain(v30);
        uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
        os_log_type_t v36 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v35, v36))
        {
          uint64_t v37 = swift_slowAlloc(22LL, -1LL);
          uint64_t v38 = (os_log_s **)swift_slowAlloc(16LL, -1LL);
          *(_DWORD *)uint64_t v37 = 138412546;
          *(void *)(v37 + 4) = v33;
          uint64_t *v38 = v33;
          *(_WORD *)(v37 + 12) = 2112;
          swift_errorRetain(v30);
          uint64_t v39 = _swift_stdlib_bridgeErrorToNSError(v30);
          *(void *)(v37 + 14) = v39;
          v38[1] = (os_log_s *)v39;
          swift_errorRelease(v30);
          swift_errorRelease(v30);
          _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "Cannot register %@ with SiriVocabulary. Error: %@",  (uint8_t *)v37,  0x16u);
          sub_100008DB0((uint64_t *)&unk_100132620);
          swift_arrayDestroy(v38, 2LL);
          swift_slowDealloc(v38, -1LL, -1LL);
          uint64_t v40 = v37;
          a3 = v60;
          swift_slowDealloc(v40, -1LL, -1LL);
        }

        else
        {
          swift_errorRelease(v30);

          swift_errorRelease(v30);
          uint64_t v33 = v35;
        }

        uint64_t v21 = &selRef_isLowPowerDeviceEnabled;
        swift_errorRelease(v30);

        uint64_t v14 = v28;
        uint64_t v16 = (uint64_t)osloga;
      }

      ++v19;
    }

    while (v16 != v19);
    swift_bridgeObjectRelease();
    a4 = v57;
    unint64_t v15 = v58;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = 0LL;
  }

  [v14 finish:0];
  if (qword_100130098 != -1) {
    swift_once(&qword_100130098, sub_100003920);
  }
  uint64_t v43 = type metadata accessor for Logger(0LL);
  sub_100008D98(v43, (uint64_t)qword_100135010);
  sub_100008F24(a4, (uint64_t)v66);
  uint64_t v44 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
  os_log_type_t v46 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = swift_slowAlloc(32LL, -1LL);
    uint64_t v48 = swift_slowAlloc(32LL, -1LL);
    uint64_t v65 = v48;
    *(_DWORD *)uint64_t v47 = 134218498;
    uint64_t v63 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v47 + 4, v47 + 12);
    *(_WORD *)(v47 + 12) = 2048;
    if (v15)
    {
      if (v60 < 0) {
        uint64_t v50 = v60;
      }
      else {
        uint64_t v50 = v60 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v49 = _CocoaArrayWrapper.endIndex.getter(v50);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v49 = *(void *)((v60 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    swift_bridgeObjectRelease();
    uint64_t v63 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v47 + 14, v47 + 22);
    swift_bridgeObjectRelease();
    *(_WORD *)(v47 + 22) = 2080;
    uint64_t v52 = v67;
    uint64_t v51 = v68;
    sub_100008D74(v66, v67);
    uint64_t v53 = (*(uint64_t (**)(uint64_t))(*(void *)(v51 + 8) + 8LL))(v52);
    uint64_t v63 = sub_10000DE60(v53, v54, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v47 + 24, v47 + 32);
    swift_bridgeObjectRelease();
    sub_10000AC58(v66);
    _os_log_impl( (void *)&_mh_execute_header,  v45,  v46,  "Completed SiriVocabulary %ld of %ld span donations for %s.",  (uint8_t *)v47,  0x20u);
    swift_arrayDestroy(v48, 1LL);
    swift_slowDealloc(v48, -1LL, -1LL);
    swift_slowDealloc(v47, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);
    sub_10000AC58(v66);
  }

void sub_100006DC0( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int16 a7)
{
  uint64_t v15 = swift_allocObject(v12, v13, v14);
  *(void *)(v15 + 16) = a2;
  sub_100009EEC(v18, v15 + 24);
  aBlock[4] = a5;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10000421C;
  aBlock[3] = a6;
  uint64_t v16 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  [a1 donateWithOptions:a7 usingStream:v16];
  _Block_release(v16);
}

void sub_100006E9C(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!a2)
  {
    id v4 = a1;
    if (a1)
    {
      uint64_t v7 = objc_opt_self(&OBJC_CLASS___KVFullDatasetStream);
      uint64_t v8 = swift_dynamicCastObjCClass(v4, v7);
      if (v8)
      {
        uint64_t v9 = (void *)v8;
        if ((unint64_t)a3 >> 62)
        {
LABEL_38:
          if (a3 < 0) {
            uint64_t v48 = a3;
          }
          else {
            uint64_t v48 = a3 & 0xFFFFFFFFFFFFFF8LL;
          }
          id v49 = v4;
          swift_bridgeObjectRetain();
          uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v48);
        }

        else
        {
          uint64_t v10 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          id v11 = v4;
          swift_bridgeObjectRetain();
        }

        id v51 = v4;
        if (v10)
        {
          unint64_t v50 = a4;
          if (v10 < 1) {
            __break(1u);
          }
          uint64_t v12 = 0LL;
          uint64_t v13 = 0LL;
          a4 = a3 & 0xC000000000000001LL;
          uint64_t v14 = &selRef_isLowPowerDeviceEnabled;
          uint64_t v52 = v9;
          do
          {
            if (a4) {
              id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, a3);
            }
            else {
              id v15 = *(id *)(a3 + 8 * v13 + 32);
            }
            uint64_t v16 = v15;
            v57[0] = 0LL;
            unsigned int v17 = objc_msgSend(v9, v14[5], v15, v57, v50);
            id v4 = v57[0];
            if (v17)
            {
              id v18 = v57[0];

              if (__OFADD__(v12++, 1LL))
              {
                __break(1u);
                goto LABEL_38;
              }
            }

            else
            {
              id v20 = v57[0];
              uint64_t v21 = _convertNSErrorToError(_:)(v4);

              swift_willThrow(v22);
              if (qword_100130098 != -1) {
                swift_once(&qword_100130098, sub_100003920);
              }
              uint64_t v23 = type metadata accessor for Logger(0LL);
              sub_100008D98(v23, (uint64_t)qword_100135010);
              swift_errorRetain(v21);
              id v24 = v16;
              uint64_t v25 = swift_errorRetain(v21);
              id v26 = (os_log_s *)Logger.logObject.getter(v25);
              os_log_type_t v27 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v26, v27))
              {
                uint64_t v28 = swift_slowAlloc(22LL, -1LL);
                id v29 = (void *)swift_slowAlloc(8LL, -1LL);
                uint64_t v53 = (void *)swift_slowAlloc(32LL, -1LL);
                uint64_t v56 = v21;
                v57[0] = v53;
                *(_DWORD *)uint64_t v28 = 138412546;
                *(void *)(v28 + 4) = v24;
                *id v29 = v24;
                *(_WORD *)(v28 + 12) = 2080;
                swift_errorRetain(v21);
                uint64_t v30 = sub_100008DB0(&qword_100130620);
                uint64_t v31 = String.init<A>(describing:)(&v56, v30);
                *(void *)(v28 + 14) = sub_10000DE60(v31, v32, (uint64_t *)v57);
                swift_bridgeObjectRelease();
                swift_errorRelease(v21);
                swift_errorRelease(v21);
                _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "Failed to register %@ with SiriVocabulary with error: %s.\nContinuing donation.",  (uint8_t *)v28,  0x16u);
                sub_100008DB0((uint64_t *)&unk_100132620);
                swift_arrayDestroy(v29, 1LL);
                uint64_t v33 = v29;
                uint64_t v9 = v52;
                swift_slowDealloc(v33, -1LL, -1LL);
                swift_arrayDestroy(v53, 1LL);
                swift_slowDealloc(v53, -1LL, -1LL);
                swift_slowDealloc(v28, -1LL, -1LL);

                swift_errorRelease(v21);
              }

              else
              {
                swift_errorRelease(v21);

                swift_errorRelease(v21);
                swift_errorRelease(v21);
              }

              a4 = a3 & 0xC000000000000001LL;
              uint64_t v14 = &selRef_isLowPowerDeviceEnabled;
            }

            ++v13;
          }

          while (v10 != v13);
          swift_bridgeObjectRelease();
          a4 = v50;
        }

        else
        {
          swift_bridgeObjectRelease();
          uint64_t v12 = 0LL;
        }

        if (qword_100130098 != -1) {
          swift_once(&qword_100130098, sub_100003920);
        }
        uint64_t v34 = type metadata accessor for Logger(0LL);
        sub_100008D98(v34, (uint64_t)qword_100135010);
        sub_100008F24(a4, (uint64_t)v57);
        uint64_t v35 = swift_bridgeObjectRetain_n(a3, 2LL);
        os_log_type_t v36 = (os_log_s *)Logger.logObject.getter(v35);
        os_log_type_t v37 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v36, v37))
        {
          uint64_t v38 = swift_slowAlloc(32LL, -1LL);
          uint64_t v39 = swift_slowAlloc(32LL, -1LL);
          uint64_t v56 = v39;
          *(_DWORD *)uint64_t v38 = 134218498;
          uint64_t v54 = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v38 + 4, v38 + 12);
          *(_WORD *)(v38 + 12) = 2048;
          if ((unint64_t)a3 >> 62)
          {
            uint64_t v40 = v9;
            if (a3 < 0) {
              uint64_t v43 = a3;
            }
            else {
              uint64_t v43 = a3 & 0xFFFFFFFFFFFFFF8LL;
            }
            swift_bridgeObjectRetain();
            uint64_t v41 = _CocoaArrayWrapper.endIndex.getter(v43);
            swift_bridgeObjectRelease();
          }

          else
          {
            uint64_t v40 = v9;
            uint64_t v41 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          }

          uint64_t v42 = v51;
          swift_bridgeObjectRelease();
          uint64_t v54 = v41;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v38 + 14, v38 + 22);
          swift_bridgeObjectRelease();
          *(_WORD *)(v38 + 22) = 2080;
          uint64_t v45 = v58;
          uint64_t v44 = v59;
          sub_100008D74(v57, v58);
          uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)(v44 + 8) + 8LL))(v45);
          uint64_t v54 = sub_10000DE60(v46, v47, &v56);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v38 + 24, v38 + 32);
          swift_bridgeObjectRelease();
          sub_10000AC58(v57);
          swift_arrayDestroy(v39, 1LL);
          swift_slowDealloc(v39, -1LL, -1LL);
          swift_slowDealloc(v38, -1LL, -1LL);

          uint64_t v9 = v40;
        }

        else
        {
          swift_bridgeObjectRelease_n(a3, 2LL);
          sub_10000AC58(v57);

          uint64_t v42 = v51;
        }

        [v9 finish:0];
      }
    }
  }

void *sub_1000074B0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = a4;
  if (a4 >> 62) {
    goto LABEL_49;
  }
  uint64_t v5 = *(void *)((a4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    os_log_type_t v6 = _swiftEmptyDictionarySingleton;
    if (v5)
    {
      uint64_t v59 = v4;
      unint64_t v60 = v4 & 0xC000000000000001LL;
      uint64_t v7 = 4LL;
      uint64_t v57 = v5;
      do
      {
        if (v60) {
          id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v4);
        }
        else {
          id v8 = *(id *)(v4 + 8 * v7);
        }
        if (__OFADD__(v7 - 4, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          goto LABEL_46;
        }

        uint64_t v62 = v7 - 3;
        id v9 = v8;
        id v10 = [v8 identifier];
        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        uint64_t v13 = v12;

        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
        uint64_t v67 = v6;
        uint64_t v15 = sub_100015F98(v11, v13);
        uint64_t v17 = v6[2];
        BOOL v18 = (v16 & 1) == 0;
        Swift::Int v19 = v17 + v18;
        if (__OFADD__(v17, v18)) {
          goto LABEL_45;
        }
        unint64_t v20 = v15;
        uint64_t v4 = v16;
        sub_100008DB0(&qword_100130588);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v19))
        {
          uint64_t v21 = sub_100015F98(v11, v13);
          if ((v4 & 1) != (v22 & 1))
          {
LABEL_60:
            id result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
            __break(1u);
            return result;
          }

          unint64_t v20 = v21;
        }

        os_log_type_t v6 = v67;
        if ((v4 & 1) != 0)
        {
          uint64_t v23 = v67[7];
          id v24 = *(void **)(v23 + 8 * v20);
          *(void *)(v23 + 8 * v20) = v9;
        }

        else
        {
          v67[(v20 >> 6) + 8] |= 1LL << v20;
          uint64_t v25 = (uint64_t *)(v6[6] + 16 * v20);
          *uint64_t v25 = v11;
          v25[1] = v13;
          *(void *)(v6[7] + 8 * v20) = v9;
          uint64_t v26 = v6[2];
          BOOL v27 = __OFADD__(v26, 1LL);
          uint64_t v28 = v26 + 1;
          if (v27) {
            goto LABEL_47;
          }
          v6[2] = v28;
          swift_bridgeObjectRetain();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        ++v7;
        uint64_t v4 = v59;
      }

      while (v62 != v57);
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v30 = (uint64_t)sub_100005288(v29, (uint64_t)v6);
    uint64_t v31 = v30;
    uint64_t v32 = v56;
    uint64_t v67 = _swiftEmptyArrayStorage;
    uint64_t v33 = *(void *)((v30 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain();
    if (!v33) {
      goto LABEL_57;
    }
LABEL_20:
    uint64_t v34 = 0LL;
    uint64_t v56 = v31;
    unint64_t v58 = v31 & 0xC000000000000001LL;
    uint64_t v54 = v31 + 32;
    uint64_t v55 = v33;
    while (1)
    {
      id v35 = v58 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v31) : *(id *)(v54 + 8 * v34);
      os_log_type_t v36 = v35;
      BOOL v27 = __OFADD__(v34++, 1LL);
      if (v27) {
        break;
      }
      id v37 = [v35 actionIdentifier];
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      uint64_t v63 = v39;

      id v40 = [v36 orderedPhrases];
      uint64_t v41 = sub_10000A1A0(0LL, (unint64_t *)&qword_100130590, &OBJC_CLASS___LNAutoShortcutLocalizedPhrase_ptr);
      uint64_t v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v40, v41);

      if ((unint64_t)v42 >> 62)
      {
        if (v42 < 0) {
          uint64_t v50 = v42;
        }
        else {
          uint64_t v50 = v42 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain();
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v50);
        swift_bridgeObjectRelease();
        if (v4)
        {
LABEL_27:
          uint64_t v66 = _swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)(v4);
          if (v4 < 0) {
            goto LABEL_48;
          }
          uint64_t v61 = v34;
          uint64_t v43 = 0LL;
          while (1)
          {
            if (v4 == v43)
            {
              __break(1u);
              goto LABEL_44;
            }

            id v44 = (v42 & 0xC000000000000001LL) != 0
                ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v43, v42)
                : *(id *)(v42 + 8 * v43 + 32);
            uint64_t v45 = v44;
            uint64_t v64 = v44;
            sub_100007A0C(&v64, v38, v63, &v65);
            if (v32) {
              break;
            }
            uint64_t v32 = 0LL;
            ++v43;

            uint64_t v46 = v65;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v47);
            uint64_t v48 = v66[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v48);
            uint64_t v49 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v48, v46);
            specialized ContiguousArray._endMutation()(v49);
            if (v4 == v43)
            {
              uint64_t v4 = (uint64_t)v66;

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v33 = v55;
              uint64_t v31 = v56;
              uint64_t v34 = v61;
              goto LABEL_41;
            }
          }

          swift_release();
          __break(1u);
          goto LABEL_60;
        }
      }

      else
      {
        uint64_t v4 = *(void *)((v42 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        if (v4) {
          goto LABEL_27;
        }
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v4 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_41:
      sub_100042640();
      if (v34 == v33)
      {
        swift_bridgeObjectRelease_n(v31, 2LL);
        return v67;
      }
    }

LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    if (v4 < 0) {
      uint64_t v52 = v4;
    }
    else {
      uint64_t v52 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v52);
  }

  if (v30 < 0) {
    uint64_t v53 = v30;
  }
  else {
    uint64_t v53 = v30 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v33 = _CocoaArrayWrapper.endIndex.getter(v53);
  if (v33) {
    goto LABEL_20;
  }
LABEL_57:
  swift_bridgeObjectRelease_n(v31, 2LL);
  return _swiftEmptyArrayStorage;
}

      __break(1u);
      goto LABEL_47;
    }
  }

  else
  {
    sub_10000C218((uint64_t)v23, &qword_100131978);
  }

  sub_1000D4A80(v6, (uint64_t)v23);
  if (v24)
  {
    id v9 = sub_100008DB0(&qword_100131980);
    if ((swift_dynamicCast(&v21, v23, v9, &type metadata for Double, 6LL) & 1) != 0)
    {
      id v10 = *(double *)&v21;
      swift_beginAccess(v2 + 2, v23, 0LL, 0LL);
      if (a2 < (uint64_t)0xFFFFFFFF80000000LL)
      {
        __break(1u);
      }

      else if (a2 <= 0x7FFFFFFF)
      {
        return sqlite3_bind_double(v2[2], a2, v10);
      }

      __break(1u);
      goto LABEL_52;
    }
  }

  else
  {
    sub_10000C218((uint64_t)v23, &qword_100131978);
  }

  sub_1000D4A80(v6, (uint64_t)v23);
  if (v24)
  {
    uint64_t v11 = sub_100008DB0(&qword_100131980);
    if ((swift_dynamicCast(&v21, v23, v11, &type metadata for Int64, 6LL) & 1) != 0)
    {
      os_log_type_t v6 = v21;
      swift_beginAccess(v2 + 2, v23, 0LL, 0LL);
      if (a2 >= (uint64_t)0xFFFFFFFF80000000LL)
      {
        if (a2 <= 0x7FFFFFFF) {
          return sqlite3_bind_int64(v2[2], a2, v6);
        }
        goto LABEL_53;
      }

id sub_100007998(uint64_t a1)
{
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1));
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  id v5 = [v3 initWithArray:isa];

  return v5;
}

id sub_100007A0C@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = sub_100008DB0((uint64_t *)&unk_100132900);
  __chkstk_darwin(v8);
  id v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  double v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v47 - v13;
  uint64_t v15 = *a1;
  id v16 = objc_msgSend(v15, "parameterIdentifier", v12);
  if (v16)
  {
    uint64_t v17 = v16;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v16);

    uint64_t v18 = type metadata accessor for UUID(0LL);
    uint64_t v19 = (uint64_t)v10;
    uint64_t v20 = 0LL;
  }

  else
  {
    uint64_t v18 = type metadata accessor for UUID(0LL);
    uint64_t v19 = (uint64_t)v10;
    uint64_t v20 = 1LL;
  }

  sub_100009E60(v19, v20, 1LL, v18);
  sub_10000A30C((uint64_t)v10, (uint64_t)v14, (uint64_t *)&unk_100132900);
  type metadata accessor for UUID(0LL);
  uint64_t v21 = sub_100009E6C((uint64_t)v14, 1LL, v18);
  if ((_DWORD)v21 == 1)
  {
    sub_100009E78((uint64_t)v14);
    uint64_t v47 = a2;
    uint64_t v48 = a3;
    swift_bridgeObjectRetain();
    v22._countAndFlagsBits = 8995LL;
    v22._object = (void *)0xE200000000000000LL;
    String.append(_:)(v22);
    id v23 = [v15 basePhraseTemplate];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    uint64_t v26 = v25;

    uint64_t v27 = v24;
    uint64_t v28 = v26;
  }

  else
  {
    uint64_t v29 = UUID.uuidString.getter(v21);
    uint64_t v31 = v30;
    (*(void (**)(char *, uint64_t))(*(void *)(v18 - 8) + 8LL))(v14, v18);
    uint64_t v47 = a2;
    uint64_t v48 = a3;
    swift_bridgeObjectRetain();
    v32._countAndFlagsBits = 8995LL;
    v32._object = (void *)0xE200000000000000LL;
    String.append(_:)(v32);
    id v33 = [v15 basePhraseTemplate];
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    os_log_type_t v36 = v35;

    v37._countAndFlagsBits = v34;
    v37._object = v36;
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._countAndFlagsBits = 8995LL;
    v38._object = (void *)0xE200000000000000LL;
    String.append(_:)(v38);
    uint64_t v27 = v29;
    uint64_t v28 = v31;
  }

  String.append(_:)(*(Swift::String *)&v27);
  swift_bridgeObjectRelease();
  uint64_t v39 = v47;
  uint64_t v40 = v48;
  id v41 = [v15 localizedPhrase];
  uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
  uint64_t v44 = v43;

  id v45 = objc_allocWithZone(&OBJC_CLASS___INSpeakableString);
  id result = sub_1000082C0(v39, v40, v42, v44, 0LL, 0LL);
  *a4 = result;
  return result;
}

unint64_t sub_100007CBC(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD000000000000021LL;
  }
  else {
    return 0xD00000000000001BLL;
  }
}

BOOL static PrimaryKey.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_100007D08(uint64_t a1, char a2)
{
}

Swift::Int PrimaryKey.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL sub_100007D6C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static PrimaryKey.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_100007D78()
{
  return PrimaryKey.hashValue.getter(*v0);
}

void sub_100007D80(uint64_t a1)
{
}

Swift::Int sub_100007D88(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

unint64_t sub_100007DC8()
{
  return sub_100007CBC(*v0);
}

id sub_100007DEC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, NSString a5)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v49 = 0LL;
  id v9 = [a3 setItemType:18 itemId:v8 error:&v49];

  id v10 = v49;
  if (!v9)
  {
    id v13 = v49;
    id v14 = v10;
LABEL_20:
    _convertNSErrorToError(_:)(v14);

LABEL_21:
    swift_willThrow(v43);
    return v10;
  }

  id v11 = v49;

  if (a5) {
    NSString v12 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v12 = 0LL;
  }
  id v15 = [*(id *)(a2 + 32) localizedStringForLocaleIdentifier:v12];

  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  id v49 = 0LL;
  id v10 = sub_100009C80(801LL, v16, v18, (uint64_t)&v49, a3);
  id v14 = v49;
  if (!v10)
  {
LABEL_19:
    id v13 = v14;
    goto LABEL_20;
  }

  uint64_t v50 = *(void *)(a2 + 96);
  uint64_t v19 = *(void *)(v50 + 16);
  if (!v19)
  {
LABEL_14:
    uint64_t v32 = *(void *)(a2 + 56);
    uint64_t v33 = *(void *)(a2 + 64);
    id v49 = 0LL;
    id v10 = sub_100009D00(803LL, v32, v33, (uint64_t)&v49, a3);
    id v14 = v49;
    if (v10)
    {

      uint64_t v34 = *(void *)a2;
      uint64_t v35 = *(void *)(a2 + 8);
      id v49 = 0LL;
      id v36 = sub_100009D00(800LL, v34, v35, (uint64_t)&v49, a3);
      id v37 = v49;
      if (!v36)
      {
        id v10 = v37;
LABEL_26:
        _convertNSErrorToError(_:)(v37);

        goto LABEL_21;
      }

      uint64_t v38 = *(void *)(a2 + 72);
      uint64_t v39 = *(void *)(a2 + 80);
      id v49 = 0LL;
      id v10 = sub_100009D00(802LL, v38, v39, (uint64_t)&v49, a3);
      id v14 = v49;
      if (v10)
      {

        id v49 = 0LL;
        id v40 = [a3 buildItemWithError:&v49];
        id v41 = v49;
        if (v40)
        {
          id v10 = v40;
          id v42 = v49;
          return v10;
        }

        id v10 = v49;
        id v37 = v41;
        goto LABEL_26;
      }
    }

    goto LABEL_19;
  }

  uint64_t v47 = a2;
  swift_bridgeObjectRetain();
  uint64_t v21 = (void **)(v20 + 64);
  Swift::String v22 = a3;
  NSString v48 = a5;
  while (1)
  {
    id v10 = *(v21 - 3);
    id v23 = *v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v24 = v23;
    if (a5) {
      a5 = String._bridgeToObjectiveC()();
    }
    id v25 = [v24 localizedStringForLocaleIdentifier:a5];

    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    uint64_t v28 = v27;

    id v49 = 0LL;
    uint64_t v29 = v28;
    a3 = v22;
    id v30 = sub_100009C80(804LL, v26, v29, (uint64_t)&v49, v22);
    id v31 = v49;
    if (!v30) {
      break;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v21 += 5;
    --v19;
    a5 = v48;
    if (!v19)
    {
      sub_10000A054(&v50);
      a2 = v47;
      goto LABEL_14;
    }
  }

  id v45 = v31;
  sub_10000A054(&v50);
  _convertNSErrorToError(_:)(v45);

  swift_willThrow(v46);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10000819C(uint64_t a1, uint64_t (*a2)(uint64_t, void *))
{
  id v15 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(0LL);
  uint64_t v5 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v5)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = 32LL;
    while (1)
    {
      memcpy(__dst, (const void *)(a1 + v7), sizeof(__dst));
      sub_100009F4C(__dst);
      uint64_t v8 = a2(v6, __dst);
      if (v2) {
        break;
      }
      uint64_t v9 = v8;
      ++v6;
      id v10 = sub_100009FD0(__dst);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      uint64_t v11 = v15[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      uint64_t v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
      specialized ContiguousArray._endMutation()(v12);
      v7 += 104LL;
      if (v5 == v6) {
        goto LABEL_5;
      }
    }

    sub_100009FD0(__dst);
    swift_bridgeObjectRelease();
    return swift_release();
  }

  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    return (uint64_t)v15;
  }

id sub_1000082C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a6)
  {
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6);
  }

  else
  {
    NSString v12 = 0LL;
  }

  id v13 = [v6 initWithVocabularyIdentifier:v10 spokenPhrase:v11 pronunciationHint:v12];

  return v13;
}

uint64_t sub_100008380(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a2);
  unint64_t v5 = v4;
  Data.hash(into:)(a1, v3, v4);
  return sub_10000A1D8(v3, v5);
}

uint64_t sub_1000083CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10000AFB8(a1, a2);
  sub_10000AE40(v3, v4);
  return sub_10000AE90(v2);
}

uint64_t sub_1000083EC(uint64_t a1)
{
  return sub_10001AD04(a1, *v1);
}

void sub_1000083F4(uint64_t a1, void (*a2)(void))
{
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a1);
  unint64_t v5 = v4;
  a2();
  sub_10000A1D8(v3, v5);
  sub_10000AF74();
}

void sub_100008434(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  a2(v3);
  sub_10000ADB0();
  sub_10000ADA8();
}

void sub_100008464(uint64_t a1, id *a2)
{
}

uint64_t sub_100008478(uint64_t a1, id *a2)
{
  __int128 v8 = xmmword_1000F4470;
  uint64_t result = static Data._forceBridgeFromObjectiveC(_:result:)(a1, &v8);
  unint64_t v5 = *((void *)&v8 + 1);
  if (*((void *)&v8 + 1) >> 60 == 15LL)
  {
    Class isa = 0LL;
  }

  else
  {
    uint64_t v7 = v8;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t result = sub_10000A21C(v7, v5);
  }

  *a2 = isa;
  return result;
}

uint64_t sub_100008504(uint64_t a1, id *a2)
{
  return sub_10000AB90(a1, a2) & 1;
}

uint64_t sub_10000851C(uint64_t a1, id *a2)
{
  __int128 v9 = xmmword_1000F4470;
  char v4 = static Data._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v9);
  unint64_t v5 = *((void *)&v9 + 1);
  if (*((void *)&v9 + 1) >> 60 == 15LL)
  {
    Class isa = 0LL;
  }

  else
  {
    uint64_t v7 = v9;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10000A21C(v7, v5);
  }

  *a2 = isa;
  return v4 & 1;
}

Class sub_1000085B8(uint64_t a1)
{
  uint64_t v1 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a1);
  unint64_t v3 = v2;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10000A1D8(v1, v3);
  return isa;
}

uint64_t sub_1000085FC(void *a1, void *a2)
{
  return sub_10001ABEC(*a1, *a2);
}

void sub_100008608()
{
}

void sub_100008628(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = v3;
}

uint64_t sub_10000864C@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10000867C(*a1);
  *(_WORD *)a2 = result;
  *(_BYTE *)(a2 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t sub_10000867C(uint64_t result)
{
  return (unsigned __int16)result;
}

void sub_10000868C(uint64_t a1@<X1>, _WORD *a2@<X8>)
{
  *a2 = Int64.datatypeValue.getter(*v2, a1);
  sub_10000ADA8();
}

uint64_t sub_1000086B0(uint64_t a1)
{
  return sub_100066340(a1, *v1);
}

void sub_1000086B8()
{
}

uint64_t sub_1000086D8(uint64_t a1)
{
  return sub_1000083CC(a1, *v1);
}

Swift::Int sub_1000086F0(uint64_t a1)
{
  return sub_100009DF0(a1, *v1);
}

void sub_1000086F8()
{
}

Class sub_100008720@<X0>(uint64_t a1@<X0>, Class *a2@<X8>)
{
  Class result = sub_1000085B8(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100008744(uint64_t *a1, uint64_t *a2)
{
  return sub_10007820C(*a1, *a2);
}

uint64_t sub_100008754@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10000877C(void *a1, void *a2)
{
  return sub_100078208(*a1, *a2);
}

uint64_t sub_100008788(uint64_t *a1, uint64_t *a2)
{
  return sub_100009D6C(*a1, *a2);
}

uint64_t sub_100008794@<X0>(uint64_t *a1@<X0>, Class *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t result = sub_10000A1D8(v3, v4);
  *a2 = isa;
  return result;
}

void sub_1000087DC()
{
  uint64_t v1 = sub_10000AE70();
  *uint64_t v0 = j___s10Foundation4DataV36_unconditionallyBridgeFromObjectiveCyACSo6NSDataCSgFZ(v1);
  v0[1] = v2;
  sub_10000ADA8();
}

uint64_t sub_1000087FC(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_100008C18( &qword_100130938,  (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier,  (uint64_t)&unk_1000F48BC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_100008880(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_100008C18( &qword_1001308D8,  (uint64_t (*)(uint64_t))type metadata accessor for LNSystemEntityProtocolIdentifier,  (uint64_t)&unk_1000F507C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_100008908(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_100008C18( &qword_1001308E8,  (uint64_t (*)(uint64_t))type metadata accessor for LNPlatformName,  (uint64_t)&unk_1000F4F68);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_10000898C(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_100008C18( &qword_100130918,  (uint64_t (*)(uint64_t))type metadata accessor for LNValueTypeSpecificMetadataKey,  (uint64_t)&unk_1000F4C1C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_100008A10(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_100008C18( &qword_1001308F8,  (uint64_t (*)(uint64_t))type metadata accessor for LNActionTypeSpecificMetadataKey,  (uint64_t)&unk_1000F4E54);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

void sub_100008A94()
{
  uint64_t v1 = sub_10000AE70();
  *uint64_t v0 = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(v1);
  v0[1] = v2;
  sub_10000ADA8();
}

uint64_t sub_100008AB4(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_100008C18( &qword_100130908,  (uint64_t (*)(uint64_t))type metadata accessor for LNSuggestedActionDialogParameterKey,  (uint64_t)&unk_1000F4D40);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_100008B38(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_100008C18( &qword_100130640,  (uint64_t (*)(uint64_t))type metadata accessor for LSPersistentIdentifier,  (uint64_t)&unk_1000F4524);
  uint64_t v5 = v4;
  unint64_t v6 = sub_10000A230();
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v5, v6);
}

void sub_100008BC0()
{
}

void sub_100008BEC()
{
}

void sub_100008C18(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  if (!*a1)
  {
    uint64_t v5 = a2(255LL);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }

  sub_10000ADA8();
}

void sub_100008C54()
{
}

uint64_t sub_100008C80@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = sub_10000ADB0();
  *a1 = v2;
  return result;
}

uint64_t sub_100008CC0(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_100008C18( &qword_100130930,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_1000F4AC4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

void sub_100008D44()
{
}

uint64_t sub_100008D64(uint64_t a1)
{
  return sub_100008380(a1, *v1);
}

void sub_100008D6C(uint64_t a1)
{
}

void *sub_100008D74(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t sub_100008D98(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_100008DB0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_100008DF0()
{
  swift_release(*(void *)(v0 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  sub_10000AFDC();
  return swift_deallocObject(v1, v2, v3);
}

void sub_100008E30()
{
}

uint64_t sub_100008E40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008E50(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100008E58(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_100008E9C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_100008ED8(void *a1, uint64_t a2)
{
}

void sub_100008EE8(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_100008E58(a2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for [A], v3), a1);
  }

  sub_10000ADA8();
}

uint64_t sub_100008F24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_100008F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v9)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v10 = v7;
  char v11 = v8;
  sub_100008DB0(&qword_100130588);
  if (sub_10000AD44())
  {
    sub_100015F98(a2, a3);
    sub_10000AF00();
    if (!v13) {
      goto LABEL_10;
    }
    unint64_t v10 = v12;
  }

  uint64_t v14 = *v3;
  if ((v11 & 1) != 0)
  {
    uint64_t v15 = *(void *)(v14 + 56);
    uint64_t v16 = *(void **)(v15 + 8 * v10);
    *(void *)(v15 + 8 * v10) = a1;
  }

  else
  {
    sub_100009C64(v10, a2, a3, a1, v14);
    sub_10000AD84(a3);
  }

void sub_100009044()
{
}

void sub_100009050()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  sub_10000AF20(v9, v7);
  sub_1000160E0();
  sub_10000ACF4();
  if (v13)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v14 = v11;
  char v15 = v12;
  sub_100008DB0(&qword_100130710);
  uint64_t v16 = sub_10000AE7C();
  if ((v16 & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v16 = sub_1000160E0();
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AppShortcutInterpolator.Builder.RecordIdentifier);
    __break(1u);
    return;
  }

  unint64_t v14 = v16;
LABEL_5:
  Swift::String v22 = *v0;
  if ((v15 & 1) != 0)
  {
    sub_10000AF50(v16, v17, v18, v19, v20, v21, (uint64_t)v22);
    *(void *)(v2 + 8 * v14) = v10;
    sub_10000AD58();
  }

  else
  {
    sub_100009958(v14, v8, v6, v4, v2, v10, v22);
    swift_bridgeObjectRetain();
    sub_10000AD2C(v2);
  }

void sub_100009134()
{
}

void sub_100009140()
{
  if (v8)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  sub_10000AEA0();
  if (sub_10000AD44())
  {
    sub_10000AD98();
    sub_10000AE18();
    if (!v10) {
      goto LABEL_10;
    }
    uint64_t v3 = v9;
  }

  if ((v4 & 1) != 0)
  {
    uint64_t v11 = *(void *)(*(void *)v2 + 56LL);
    swift_bridgeObjectRelease(*(void *)(v11 + 8 * v3));
    *(void *)(v11 + 8 * v3) = v0;
    sub_10000AD58();
  }

  else
  {
    unint64_t v12 = sub_10000ADFC();
    sub_100009C64(v12, v13, v14, v15, v16);
    sub_10000AD2C(v1);
  }

void sub_1000091C8()
{
}

void sub_1000091D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void sub_1000091E0()
{
  uint64_t v1 = v0;
  char v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  Swift::Int v12 = *v0;
  sub_100015F98(v6, v4);
  sub_10000ACF4();
  if (v15)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v16 = v13;
  char v17 = v14;
  sub_100008DB0(&qword_100130680);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v3 & 1, v12))
  {
    sub_100015F98(v7, v5);
    sub_10000AE18();
    if (!v19) {
      goto LABEL_10;
    }
    unint64_t v16 = v18;
  }

  uint64_t v20 = (void *)*v1;
  if ((v17 & 1) != 0)
  {
    uint64_t v21 = (uint64_t *)(v20[7] + 16 * v16);
    swift_bridgeObjectRelease();
    *uint64_t v21 = v11;
    v21[1] = v9;
    sub_10000AD58();
  }

  else
  {
    sub_1000099A4(v16, v7, v5, v11, v9, v20);
    sub_10000AD2C(v5);
  }

void sub_1000092C8()
{
}

void sub_1000092D4()
{
  uint64_t v4 = v0;
  char v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  type metadata accessor for UUID(0LL);
  sub_10000AF80();
  __chkstk_darwin(v11);
  sub_10000AEB0();
  Swift::Int v12 = *v0;
  sub_100016144(v8);
  sub_10000ACF4();
  if (v15)
  {
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v16 = v13;
  char v17 = v14;
  sub_100008DB0((uint64_t *)&unk_1001306F0);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v6 & 1, v12))
  {
    unint64_t v18 = sub_100016144(v8);
    if ((v17 & 1) == (v19 & 1))
    {
      unint64_t v16 = v18;
      goto LABEL_5;
    }

LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v1);
    __break(1u);
    return;
  }

  swift_release();
LABEL_12:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

  swift_bridgeObjectRelease(a3);
}

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
}

    uint64_t v21 = (void *)*a3;
    *(void *)(*a3 + 8 * (v15 >> 6) + 64) |= 1LL << v15;
    Swift::String v22 = (void *)(v21[6] + 16 * v15);
    *Swift::String v22 = v10;
    v22[1] = v9;
    *(void *)(v21[7] + 8 * v15) = v13;
    id v23 = v21[2];
    id v24 = __OFADD__(v23, 1LL);
    id v25 = v23 + 1;
    if (v24) {
      goto LABEL_18;
    }
    v21[2] = v25;
    a2 = 1;
    if (!--v5) {
      return sub_10001191C(v32);
    }
  }

  a4();
  char v19 = sub_10003F068();
  if ((v18 & 1) != (v20 & 1)) {
    goto LABEL_19;
  }
  char v15 = v19;
  if ((v18 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v26 = sub_100038AC8((uint64_t)&type metadata for _MergeError, (uint64_t)&protocol witness table for _MergeError);
  swift_willThrow(v26);
  uint64_t v38 = v26;
  swift_errorRetain(v26);
  uint64_t v27 = sub_100008DB0(&qword_100130620);
  if ((swift_dynamicCast(v27, &v38, v27, &type metadata for _MergeError, 0LL) & 1) == 0)
  {
    sub_10001DF40();

    sub_10001191C(v32);
    return swift_errorRelease(v38);
  }

    uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(type metadata for String);
    __break(1u);
    return result;
  }

LABEL_5:
  uint64_t v20 = (void *)*v4;
  if ((v17 & 1) != 0)
  {
    uint64_t v21 = v20[7];

    *(void *)(v21 + 8 * v16) = v10;
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v8, v1);
    sub_1000099F0(v16, v2, v10, v20);
  }

  sub_10000AD58();
}

    sub_10001DF40();
    unint64_t v16 = *(void *)(v11 + 16);
    char v17 = _swiftEmptyArrayStorage;
    if (v16)
    {
      uint64_t v67 = (uint64_t)_swiftEmptyArrayStorage;
      sub_1000455D8();
      char v17 = (void *)v67;
      do
      {
        if (*(void *)v13 >> 62)
        {
          sub_10000AE38();
          unint64_t v18 = sub_10006CA28();
          sub_10000ADB0();
        }

        else
        {
          unint64_t v18 = *(void *)((*(void *)v13 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        }

        if (__OFSUB__(v18, 1LL)) {
          goto LABEL_63;
        }
        uint64_t v67 = (uint64_t)v17;
        Swift::Int v12 = v17[2];
        if (v12 >= v17[3] >> 1)
        {
          sub_1000455D8();
          char v17 = (void *)v67;
        }

        v17[2] = v12 + 1;
        v17[v12 + 4] = v18 - 1;
        v13 += 8LL;
      }

      while (--v16);
    }

  *a3 = result;
  a3[1] = v5;
  return result;
}

  v10[4] = v17;
  if ((v18 & 1) != 0) {
    uint64_t v21 = *(void *)(*(void *)(*v5 + 56) + 8 * v17);
  }
  else {
    uint64_t v21 = 0LL;
  }
  *uint64_t v10 = v21;
  return sub_1000E7D30;
}

_OWORD *sub_1000093D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v9)
  {
    __break(1u);
LABEL_10:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }

  unint64_t v10 = v7;
  char v11 = v8;
  sub_100008DB0(&qword_100130920);
  if (sub_10000AD44())
  {
    sub_10000AD98();
    sub_10000AF00();
    if (!v13) {
      goto LABEL_10;
    }
    unint64_t v10 = v12;
  }

  char v14 = *v6;
  if ((v11 & 1) != 0)
  {
    sub_10000AC58((void *)(v14[7] + 32 * v10));
    char v15 = (_OWORD *)sub_10000AF9C();
    return sub_10000AC78(v15, v16);
  }

  else
  {
    sub_100009A88(v10, v5, v4, v3, v14);
    return (_OWORD *)sub_10000AD84(v4);
  }

void sub_10000948C()
{
}

uint64_t sub_100009498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v8)
  {
    __break(1u);
LABEL_10:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }

  uint64_t v9 = v6;
  char v10 = v7;
  sub_100008DB0(&qword_100130650);
  if (sub_10000AD44())
  {
    sub_10000AD98();
    sub_10000AE18();
    if (!v12) {
      goto LABEL_10;
    }
    uint64_t v9 = v11;
  }

  if ((v10 & 1) != 0)
  {
    uint64_t v13 = *(void *)(*(void *)v5 + 56LL);
    uint64_t v14 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40LL))( v13 + *(void *)(*(void *)(v14 - 8) + 72LL) * v9,  v3,  v14);
  }

  else
  {
    unint64_t v16 = sub_10000ADFC();
    sub_100009AF0(v16, v17, v18, v19, v20);
    return sub_10000AD84(v4);
  }

uint64_t sub_100009554(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (v9)
  {
    __break(1u);
LABEL_10:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
    __break(1u);
    return result;
  }

  uint64_t v10 = v7;
  char v11 = v8;
  sub_100008DB0((uint64_t *)&unk_100130670);
  if (sub_10000AD44())
  {
    sub_1000161B0(a2, a3);
    sub_10000AE18();
    if (!v13) {
      goto LABEL_10;
    }
    uint64_t v10 = v12;
  }

  if ((v11 & 1) != 0)
  {
    uint64_t v14 = *(void *)(*(void *)v3 + 56LL);
    uint64_t v15 = v14 + *(void *)(*(void *)(sub_100008DB0((uint64_t *)&unk_100132690) - 8) + 72LL) * v10;
    return sub_10000A2C4(a1, v15);
  }

  else
  {
    unint64_t v17 = sub_10000ADFC();
    sub_100009B80(v17, v18, v19, v20, v21);
    return sub_10000A280(a2, a3);
  }

id sub_10000964C(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v9 = *v4;
  sub_100016230((uint64_t)a3);
  sub_10000ACF4();
  if (v12)
  {
    __break(1u);
LABEL_10:
    type metadata accessor for LNSuggestedActionDialogParameterKey(0LL);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
    __break(1u);
    return result;
  }

  unint64_t v13 = v10;
  char v14 = v11;
  sub_100008DB0(&qword_100130668);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v9))
  {
    sub_100016230((uint64_t)a3);
    sub_10000AF00();
    if (!v16) {
      goto LABEL_10;
    }
    unint64_t v13 = v15;
  }

  unint64_t v17 = (void *)*v5;
  if ((v14 & 1) != 0)
  {
    uint64_t v18 = (uint64_t *)(v17[7] + 16 * v13);
    id result = (id)swift_bridgeObjectRelease(v18[1]);
    *uint64_t v18 = a1;
    v18[1] = a2;
  }

  else
  {
    sub_100009C1C(v13, (uint64_t)a3, a1, a2, v17);
    return a3;
  }

  return result;
}

void sub_100009754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void sub_100009760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  if (v15)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v16 = v13;
  char v17 = v14;
  sub_100008DB0(a7);
  uint64_t v18 = sub_10000AE7C();
  if ((v18 & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v18 = sub_100016078();
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Substring);
    __break(1u);
    return;
  }

  unint64_t v16 = v18;
LABEL_5:
  id v24 = *v7;
  if ((v17 & 1) != 0)
  {
    sub_10000AF50(v18, v19, v20, v21, v22, v23, (uint64_t)v24);
    *(void *)(a5 + 8 * v16) = a1;
  }

  else
  {
    sub_100009958(v16, a2, a3, a4, a5, a1, v24);
    swift_bridgeObjectRetain();
  }

void sub_10000987C()
{
}

void sub_100009888()
{
}

void sub_100009894()
{
  if (v8)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  sub_10000AEA0();
  if (sub_10000AD44())
  {
    sub_10000AD98();
    sub_10000AE18();
    if (!v10) {
      goto LABEL_10;
    }
    uint64_t v3 = v9;
  }

  if ((v4 & 1) != 0)
  {
    uint64_t v11 = *(void *)(*(void *)v2 + 56LL);

    *(void *)(v11 + 8 * v3) = v0;
    sub_10000AD58();
  }

  else
  {
    unint64_t v12 = sub_10000ADFC();
    sub_100009C64(v12, v13, v14, v15, v16);
    sub_10000AD2C(v1);
  }

void sub_10000991C()
{
}

void sub_100009928()
{
}

void sub_100009934()
{
}

void sub_100009940()
{
}

void sub_10000994C()
{
}

unint64_t sub_100009958( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[(result >> 6) + 8] |= 1LL << result;
  uint64_t v7 = (void *)(a7[6] + 32 * result);
  *uint64_t v7 = a2;
  v7[1] = a3;
  v7[2] = a4;
  v7[3] = a5;
  *(void *)(a7[7] + 8 * result) = a6;
  uint64_t v8 = a7[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a7[2] = v10;
  }
  return result;
}

unint64_t sub_1000099A4( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1LL << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t v7 = (void *)(a6[7] + 16 * result);
  *uint64_t v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

uint64_t sub_1000099F0(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

_OWORD *sub_100009A88(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_10000AC78(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_100009AF0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))( v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * a1,  a4,  v10);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

void sub_100009B80(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = sub_100008DB0((uint64_t *)&unk_100132690);
  sub_10000A30C(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * a1, (uint64_t *)&unk_100132690);
  uint64_t v11 = a5[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a5[2] = v13;
  }
}

unint64_t sub_100009C1C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  *(void *)(a5[6] + 8 * result) = a2;
  uint64_t v5 = (void *)(a5[7] + 16 * result);
  *uint64_t v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t sub_100009C64(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result = sub_10000ADB8(a1, a2, a3, a4, a5);
  if (v8) {
    __break(1u);
  }
  else {
    *(void *)(v6 + 16) = v7;
  }
  return result;
}

id sub_100009C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  id v10 = [a5 addFieldWithType:a1 value:v9 error:a4];

  return v10;
}

id sub_100009D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [a5 addFieldWithType:a1 value:v8 error:a4];

  return v9;
}

uint64_t sub_100009D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = ((uint64_t (*)(void))static String._unconditionallyBridgeFromObjectiveC(_:))();
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_100009DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  Swift::Int v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_100009E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t sub_100009E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t sub_100009E78(uint64_t a1)
{
  uint64_t v2 = sub_100008DB0((uint64_t *)&unk_100132900);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void type metadata accessor for LNSystemProtocolIdentifier(uint64_t a1)
{
}

id sub_100009ECC(uint64_t a1, uint64_t a2)
{
  return sub_100007DEC(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(NSString *)(v2 + 32));
}

uint64_t sub_100009EEC(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void sub_100009F04()
{
}

void sub_100009F40(void *a1, uint64_t a2)
{
}

void *sub_100009F4C(void *a1)
{
  uint64_t v2 = a1[3];
  __int128 v3 = (void *)a1[4];
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[8];
  uint64_t v6 = a1[10];
  uint64_t v7 = (void *)a1[11];
  uint64_t v8 = a1[12];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  id v9 = v3;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  id v10 = v7;
  swift_bridgeObjectRetain(v8);
  return a1;
}

void *sub_100009FD0(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = a1[6];
  uint64_t v6 = a1[8];
  uint64_t v7 = a1[10];
  uint64_t v8 = (void *)a1[11];
  swift_bridgeObjectRelease(a1[12]);

  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);

  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

void *sub_10000A054(void *a1)
{
  return a1;
}

uint64_t *sub_10000A07C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

uint64_t sub_10000A0C0()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  sub_10000AC58((void *)(v0 + 32));
  return swift_deallocObject(v0, 72LL, 7LL);
}

void sub_10000A0F4()
{
}

uint64_t sub_10000A130()
{
  return swift_deallocObject(v1, v2, v3);
}

void sub_10000A158(void *a1, uint64_t a2)
{
}

unint64_t sub_10000A164()
{
  unint64_t result = qword_100130628;
  if (!qword_100130628)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F52B8, &type metadata for DonationError);
    atomic_store(result, (unint64_t *)&qword_100130628);
  }

  return result;
}

uint64_t sub_10000A1A0(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_10000A1D8(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10000A21C(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10000A1D8(result, a2);
  }
  return result;
}

unint64_t sub_10000A230()
{
  unint64_t result = qword_100130648;
  if (!qword_100130648)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100130648);
  }

  return result;
}

void type metadata accessor for LNSuggestedActionDialogParameterKey(uint64_t a1)
{
}

uint64_t sub_10000A280(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10000A2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008DB0((uint64_t *)&unk_100132690);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

void sub_10000A30C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_10000AF9C();
  v4(v3);
  sub_10000ADA8();
}

void type metadata accessor for LNTranscriptActionSource(uint64_t a1)
{
}

void type metadata accessor for LNSystemEntityProtocolIdentifier(uint64_t a1)
{
}

void type metadata accessor for LNPlatformName(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for LNActionTypeSpecificMetadataKey(uint64_t a1)
{
}

void type metadata accessor for LNValueTypeSpecificMetadataKey(uint64_t a1)
{
}

void type metadata accessor for LogicalType(uint64_t a1)
{
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

_BYTE *initializeBufferWithCopyOfBuffer for DonationError(_BYTE *result, _BYTE *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DonationError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

      sub_10001BFF4();
      BOOL v7 = v16 & v15;
    }
  }

  sub_10001BB08();
  *uint64_t v0 = v2;
  sub_10001BD14();
}

    sub_10001BFF4();
    uint64_t v1 = v12 & v11;
  }

  id v10 = v9 + 3;
  if (v10 >= v24)
  {
LABEL_30:
    swift_release_n(v2, 2LL);
    goto LABEL_32;
  }

  if (*(void *)(v4 + 8 * v10))
  {
    unsigned int v6 = v10;
    goto LABEL_17;
  }

  while (1)
  {
    unsigned int v6 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      break;
    }
    if (v6 >= v24) {
      goto LABEL_30;
    }
    ++v10;
    if (*(void *)(v4 + 8 * v6)) {
      goto LABEL_17;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

  __break(1u);
  return result;
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v5 = v6 - 6;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  sub_100038850();
}

  __break(1u);
}

  __break(1u);
}

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v32 = type metadata accessor for TaskPriority(0LL);
  sub_100009E60((uint64_t)v7, 1LL, 1LL, v32);
  uint64_t v33 = (void *)swift_allocObject(&unk_100124AC8, 48LL, 7LL);
  v33[2] = 0LL;
  v33[3] = 0LL;
  v33[4] = a3;
  uint64_t v34 = v36;
  v33[5] = v36;
  swift_unknownObjectRetain(v34);
  swift_retain();
  sub_10000D1F0((uint64_t)v7, (uint64_t)&unk_100132608, (uint64_t)v33);
  swift_release();
  return sub_10000AC58(v37);
}

      ++a3;
      if (v10 == v7)
      {
        uint64_t v18 = 0LL;
LABEL_20:
        a3 = v22;
        goto LABEL_27;
      }
    }

    __break(1u);
LABEL_22:
    if (a1 < 0) {
      uint64_t v19 = a1;
    }
    else {
      uint64_t v19 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    BOOL v7 = _CocoaArrayWrapper.endIndex.getter(v19);
  }

  uint64_t v18 = 0LL;
LABEL_27:
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a1);

  return v18;
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DonationError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10000A4C8 + 4 * byte_1000F4485[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10000A4FC + 4 * byte_1000F4480[v4]))();
}

uint64_t sub_10000A4FC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000A504(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10000A50CLL);
  }
  return result;
}

uint64_t sub_10000A518(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10000A520LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10000A524(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000A52C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000A538(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10000A544(_BYTE *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DonationError()
{
  return &type metadata for DonationError;
}

uint64_t destroy for AppShortcutDonator(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

void _s10LinkDaemon18AppShortcutDonatorVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = (uint64_t)v4;
  a1[2] = a2[2];
  swift_retain(v3);
  id v5 = v4;
  sub_10000AE38();
  sub_10000AF74();
}

uint64_t *assignWithCopy for AppShortcutDonator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  unsigned int v6 = (void *)a2[1];
  BOOL v7 = (void *)a1[1];
  a1[1] = (uint64_t)v6;
  id v8 = v6;

  uint64_t v9 = a2[2];
  uint64_t v10 = a1[2];
  a1[2] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

__n128 initializeWithTake for AppShortcutDonator(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for AppShortcutDonator(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = a1[2];
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppShortcutDonator(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppShortcutDonator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AppShortcutDonator()
{
  return &type metadata for AppShortcutDonator;
}

void type metadata accessor for Result(uint64_t a1)
{
}

void type metadata accessor for LNBundleMetadataVersion(uint64_t a1)
{
}

void type metadata accessor for LNShortcutTileColor(uint64_t a1)
{
}

void sub_10000A76C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

void sub_10000A7B0()
{
}

void sub_10000A7DC()
{
}

unint64_t sub_10000A810()
{
  unint64_t result = qword_100130830;
  if (!qword_100130830)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F4A28, &type metadata for DonationError);
    atomic_store(result, (unint64_t *)&qword_100130830);
  }

  return result;
}

void sub_10000A84C()
{
}

void sub_10000A878()
{
}

void sub_10000A8A4()
{
}

void sub_10000A8D0()
{
}

void sub_10000A8FC()
{
}

void sub_10000A928()
{
}

void sub_10000A954()
{
}

void sub_10000A980()
{
}

void sub_10000A9AC()
{
}

void sub_10000A9D8()
{
}

void sub_10000AA04()
{
}

void sub_10000AA30()
{
}

void sub_10000AA5C()
{
}

void sub_10000AA88()
{
}

void sub_10000AAB4()
{
}

void sub_10000AAE0()
{
}

void sub_10000AB0C()
{
}

void sub_10000AB38()
{
}

void sub_10000AB64()
{
}

uint64_t sub_10000AB90(uint64_t a1, id *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(v3, &v8);
  uint64_t v5 = v9;
  if (v9)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *uint64_t v2 = v6;
  return v4 & 1;
}

void sub_10000AC00(uint64_t a1, id *a2)
{
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  static String._forceBridgeFromObjectiveC(_:result:)(v3, &v5);
  if (v6)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    sub_10000ADB0();
  }

  else
  {
    NSString v4 = 0LL;
  }

  *uint64_t v2 = v4;
  sub_10000AED8();
}

uint64_t sub_10000AC58(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

_OWORD *sub_10000AC78(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_10000AC88(uint64_t a1)
{
  uint64_t v2 = v1;
  String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  sub_10000ADA8();
}

  ;
}

uint64_t sub_10000AD08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100015F98(a2, a3);
}

uint64_t sub_10000AD2C(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

BOOL sub_10000AD44()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

  ;
}

uint64_t sub_10000AD70()
{
  return swift_errorRelease(v0);
}

uint64_t sub_10000AD78(uint64_t a1)
{
  return swift_slowDealloc(a1, -1LL, -1LL);
}

uint64_t sub_10000AD84(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_10000AD98()
{
  return sub_100015F98(v1, v0);
}

  ;
}

uint64_t sub_10000ADB0()
{
  return swift_bridgeObjectRelease(v0);
}

unint64_t sub_10000ADB8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1LL << result;
  uint64_t v5 = (void *)(*(void *)(a5 + 48) + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(*(void *)(a5 + 56) + 8 * result) = a4;
  return result;
}

uint64_t sub_10000ADF4()
{
  return swift_errorRetain(v0);
}

uint64_t sub_10000ADFC()
{
  return v0;
}

uint64_t sub_10000AE10(uint64_t a1)
{
  return swift_slowAlloc(a1, -1LL);
}

  ;
}

uint64_t sub_10000AE28()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_10000AE38()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10000AE40(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(v2, a1, a2);
}

  ;
}

uint64_t sub_10000AE70()
{
  return *(void *)v0;
}

BOOL sub_10000AE7C()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

uint64_t sub_10000AE90(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_10000AE98()
{
  return swift_retain(v0);
}

uint64_t sub_10000AEA0()
{
  return sub_100008DB0(v0);
}

  ;
}

BOOL sub_10000AEC8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

uint64_t sub_10000AEE8()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_10000AEF0(uint64_t a1, id *a2)
{
}

  ;
}

uint64_t sub_10000AF10(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a2 + 8))(v2);
}

uint64_t sub_10000AF20(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10000AF38()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_10000AF40@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t sub_10000AF48(uint64_t a1)
{
  return swift_arrayDestroy(a1, 1LL);
}

uint64_t sub_10000AF50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return swift_bridgeObjectRelease(*(void *)(*(void *)(a7 + 56) + 8 * v7));
}

void sub_10000AF5C(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_10000AF64()
{
  return swift_task_alloc(v0);
}

uint64_t sub_10000AF6C()
{
  return swift_task_dealloc(v0);
}

  ;
}

  ;
}

uint64_t sub_10000AF94()
{
  return _swift_stdlib_bridgeErrorToNSError(v0);
}

uint64_t sub_10000AF9C()
{
  return v0;
}

uint64_t sub_10000AFA8()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_10000AFB0()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10000AFB8(uint64_t a1, uint64_t a2)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
}

uint64_t sub_10000AFC4@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(v2, a1, v3);
}

uint64_t sub_10000AFD0()
{
  return swift_task_dealloc(*(void *)(v0 + 136));
}

  ;
}

uint64_t (*sub_10000AFE8())(uint64_t a1)
{
  char v1 = v0;
  uint64_t v2 = sub_100008DB0((uint64_t *)&unk_100132900);
  __chkstk_darwin(v2);
  NSString v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v39 - v10;
  uint64_t v12 = sub_100033044(v0);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v40 = v12;
    id v15 = sub_10000C25C(v12, "type");
    switch((unint64_t)v15)
    {
      case 0uLL:
        uint64_t v16 = swift_bridgeObjectRelease(v14);
        id v17 = sub_10000C25C(v16, "executionUUID");
        if (v17)
        {
          uint64_t v18 = v17;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          sub_10000C264((uint64_t)v4, (uint64_t)v9);
          sub_10000C288((uint64_t)v4, 0LL);
          if (sub_100009E6C((uint64_t)v4, 1LL, v5) != 1)
          {
            sub_10000C264((uint64_t)v11, (uint64_t)v4);
            sub_10000C264((uint64_t)v9, (uint64_t)v11);
            uint64_t v19 = *(unsigned __int8 *)(v6 + 80);
            uint64_t v20 = (v19 + 16) & ~v19;
            uint64_t v21 = swift_allocObject(&unk_100122C78, v20 + v7, v19 | 7);
            sub_10000C264(v21 + v20, (uint64_t)v9);
            return (uint64_t (*)(uint64_t))sub_10000C158;
          }
        }

        else
        {
          sub_10000C288((uint64_t)v4, 1LL);
        }

        sub_10000C218((uint64_t)v4, (uint64_t *)&unk_100132900);
        break;
      case 1uLL:
        id v23 = sub_10000C25C((uint64_t)v15, "entityIdentifier");
        if (!v23) {
          goto LABEL_13;
        }
        id v24 = v23;
        id v25 = (void *)sub_10000C254((uint64_t)&unk_100122C50, 40LL);
        v25[2] = v40;
        v25[3] = v14;
        v25[4] = v24;
        return sub_10000C0EC;
      case 2uLL:
        uint64_t v26 = sub_10000BFF0(v1, (SEL *)&selRef_actionType);
        if (!v27) {
          goto LABEL_13;
        }
        id v28 = sub_10000C25C(v26, "entityIdentifier");
        if (v28)
        {
          id v29 = v28;
          id v30 = (void *)sub_10000C254((uint64_t)&unk_100122C28, 56LL);
          sub_10000C26C(v30);
          unint64_t result = (uint64_t (*)(uint64_t))sub_10000C0B4;
          *((void *)v4 + 6) = v29;
        }

        else
        {
          uint64_t v38 = (void *)sub_10000C254((uint64_t)&unk_100122C00, 48LL);
          sub_10000C26C(v38);
          return (uint64_t (*)(uint64_t))sub_10000C078;
        }

        return result;
      case 3uLL:
        uint64_t v31 = sub_10000BFF0(v1, (SEL *)&selRef_entityType);
        if (!v32) {
          goto LABEL_13;
        }
        uint64_t v33 = v31;
        uint64_t v34 = v32;
        uint64_t v35 = (void *)sub_10000C254((uint64_t)&unk_100122BD8, 48LL);
        v35[2] = v40;
        v35[3] = v14;
        v35[4] = v33;
        v35[5] = v34;
        return sub_10000BFE4;
      default:
LABEL_13:
        swift_bridgeObjectRelease(v14);
        break;
    }
  }

  unint64_t v36 = sub_10000BFA4();
  swift_allocError(&type metadata for StreamManagerError, v36, 0LL, 0LL);
  _BYTE *v37 = 2;
  return (uint64_t (*)(uint64_t))swift_willThrow();
}

uint64_t sub_10000B32C(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v8 = [a1 executionUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(a2) = static UUID.== infix(_:_:)(v7, a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return a2 & 1;
}

uint64_t sub_10000B3E4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = sub_100033044();
  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = v8;
  if (v7 == a2 && v8 == a3)
  {
    swift_bridgeObjectRelease(v8);
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a2, a3, 0LL);
    swift_bridgeObjectRelease(v9);
    if ((v11 & 1) == 0) {
      return 0LL;
    }
  }

  return sub_10000B474(a4) & 1;
}

uint64_t sub_10000B474(void *a1)
{
  id v2 = [v1 resolvedAction];
  id v3 = [v2 parameters];

  uint64_t v4 = sub_10000A1A0(0LL, &qword_1001309A8, &OBJC_CLASS___LNProperty_ptr);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  uint64_t v6 = sub_10000BA10(v5);
  swift_bridgeObjectRelease(v5);
  uint64_t v7 = v6[2];
  if (v7)
  {
    uint64_t v8 = (uint64_t)(v6 + 4);
    swift_bridgeObjectRetain(v6);
    while (1)
    {
      sub_10000C194(v8, (uint64_t)v18);
      uint64_t v9 = sub_10000A1A0(0LL, &qword_1001309B0, &OBJC_CLASS___LNEntity_ptr);
      if (swift_dynamicCast(&v17, v18, (char *)&type metadata for Any + 8, v9, 6LL))
      {
        id v10 = v17;
        id v11 = [v17 identifier];

        if (v11)
        {
          sub_10000A1A0(0LL, qword_1001309B8, &OBJC_CLASS___LNEntityIdentifier_ptr);
          id v12 = a1;
          id v13 = v11;
          char v14 = static NSObject.== infix(_:_:)(v13, v12);

          if ((v14 & 1) != 0) {
            break;
          }
        }
      }

      v8 += 32LL;
      if (!--v7)
      {
        swift_bridgeObjectRelease_n(v6, 2LL);
        return 0LL;
      }
    }

    swift_bridgeObjectRelease_n(v6, 2LL);
    return 1LL;
  }

  else
  {
    swift_bridgeObjectRelease(v6);
    return 0LL;
  }

uint64_t sub_10000B654(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v12 = sub_100033044();
  if (!v13) {
    return 0LL;
  }
  uint64_t v14 = v13;
  if (v12 == a2 && v13 == a3)
  {
    swift_bridgeObjectRelease(v13);
  }

  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, a2, a3, 0LL);
    swift_bridgeObjectRelease(v14);
    if ((v16 & 1) == 0) {
      return 0LL;
    }
  }

  id v17 = [a1 resolvedAction];
  id v18 = [v17 identifier];

  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  uint64_t v21 = v20;

  if (v19 == a4 && v21 == a5)
  {
    swift_bridgeObjectRelease(a5);
  }

  else
  {
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, a4, a5, 0LL);
    swift_bridgeObjectRelease(v21);
    if ((v23 & 1) == 0) {
      return 0LL;
    }
  }

  return sub_10000B474(a6) & 1;
}

uint64_t sub_10000B780(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_100033044();
  uint64_t v12 = v11;
  if (v11)
  {
    if (v10 == a2 && v11 == a3)
    {
      swift_bridgeObjectRelease(v11);
    }

    else
    {
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, a2, a3, 0LL);
      swift_bridgeObjectRelease(v12);
      LOBYTE(v12) = 0;
      if ((v14 & 1) == 0) {
        return v12 & 1;
      }
    }

    id v15 = [a1 resolvedAction];
    id v16 = [v15 identifier];

    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    uint64_t v18 = v17;

    if (v12 == a4 && v18 == a5)
    {
      LOBYTE(v12) = 1;
    }

    else
    {
      LOBYTE(v12) = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v18, a4, a5, 0LL);
      a5 = v18;
    }

    swift_bridgeObjectRelease(a5);
  }

  return v12 & 1;
}

uint64_t sub_10000B894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_100033044();
  if (!v10) {
    return 0LL;
  }
  uint64_t v11 = v10;
  if (v9 == a2 && v10 == a3)
  {
    swift_bridgeObjectRelease(v10);
  }

  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, a2, a3, 0LL);
    swift_bridgeObjectRelease(v11);
    if ((v13 & 1) == 0) {
      return 0LL;
    }
  }

  return sub_10000B930(a4, a5) & 1;
}

uint64_t sub_10000B930(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  id v6 = [v3 resolvedAction];
  id v7 = [v6 parameters];

  uint64_t v8 = sub_10000A1A0(0LL, &qword_1001309A8, &OBJC_CLASS___LNProperty_ptr);
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

  uint64_t v10 = sub_10000BC44(v9);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRetain(a2);
  LOBYTE(a2) = sub_10000BDEC((unint64_t)v10, a1, a2);
  swift_bridgeObjectRelease(v10);
  return a2 & 1;
}

void *sub_10000BA10(uint64_t a1)
{
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    id v3 = _swiftEmptyArrayStorage;
    unint64_t v20 = a1 & 0xC000000000000001LL;
    for (uint64_t i = 4LL; ; ++i)
    {
      id v5 = v20 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1) : *(id *)(a1 + 8 * i);
      uint64_t v6 = i - 3;
      if (__OFADD__(i - 4, 1LL)) {
        break;
      }
      id v7 = v5;
      id v8 = [v7 value];
      if (v8)
      {
        id v9 = v8;
        id v10 = [v9 value];
        _bridgeAnyObjectToAny(_:)(v16, v10);
        swift_unknownObjectRelease(v10);
        sub_10000C194((uint64_t)v16, (uint64_t)v19);
        sub_10000AC58(v16);
      }

      else
      {
        memset(v19, 0, sizeof(v19));
      }

      sub_10000C1D0((uint64_t)v19, (uint64_t)&v17);

      if (v18)
      {
        sub_10000AC78(&v17, v19);
        sub_10000AC78(v19, &v17);
        if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
        {
          sub_100013F04();
          id v3 = v12;
        }

        unint64_t v11 = v3[2];
        if (v11 >= v3[3] >> 1)
        {
          sub_100013F04();
          id v3 = v13;
        }

        v3[2] = v11 + 1;
        sub_10000AC78(&v17, &v3[4 * v11 + 4]);
      }

      else
      {
        sub_10000C218((uint64_t)&v17, &qword_100130EA0);
      }

      if (v6 == v2)
      {
        swift_bridgeObjectRelease(a1);
        return v3;
      }
    }

    __break(1u);
LABEL_21:
    if (a1 < 0) {
      uint64_t v14 = a1;
    }
    else {
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

void *sub_10000BC44(uint64_t a1)
{
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v13))
  {
    uint64_t v3 = 4LL;
    while (1)
    {
      id v4 = (a1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, a1)
         : *(id *)(a1 + 8 * v3);
      uint64_t v5 = v3 - 3;
      if (__OFADD__(v3 - 4, 1LL)) {
        break;
      }
      id v6 = v4;
      id v7 = [v6 value];
      if (v7)
      {
        id v8 = v7;
        id v9 = [v7 valueType];

        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        unint64_t v11 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v10 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v11 >= v10 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1LL);
        }
        uint64_t v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
        specialized Array._endMutation()(v12);
      }

      else
      {
      }

      ++v3;
      if (v5 == v2) {
        goto LABEL_20;
      }
    }

    __break(1u);
LABEL_16:
    if (a1 < 0) {
      uint64_t v13 = a1;
    }
    else {
      uint64_t v13 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

LABEL_20:
  swift_bridgeObjectRelease(a1);
  return &_swiftEmptyArrayStorage;
}

      id v8 = (v16 - 1) & v16;
    }
  }

  unint64_t result = swift_release();
  *char v1 = v4;
  return result;
}

      id v51 = (v11 - 1) & v11;
      uint64_t v52 = v12;
    }
  }

  unint64_t result = swift_release();
  *uint64_t v39 = v3;
  return result;
}

    id v8 = (v16 - 1) & v16;
  }

  __int128 v17 = v15 + 3;
  if (v17 >= v9)
  {
LABEL_32:
    unint64_t result = swift_release_n(v2, 2LL);
    char v1 = v28;
    goto LABEL_34;
  }

  id v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    uint64_t v12 = v17;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_32;
    }
    id v16 = *(void *)(v6 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }

    id v49 = (v11 - 1) & v11;
    uint64_t v50 = v12;
  }

  uint64_t v13 = v8 + 4;
  if (v8 + 4 >= v40)
  {
LABEL_27:
    unint64_t result = swift_release_n(v1, 2LL);
    goto LABEL_29;
  }

  unint64_t v11 = *(void *)(v39 + 8 * v13);
  if (v11)
  {
    uint64_t v12 = v8 + 4;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v12 >= v40) {
      goto LABEL_27;
    }
    unint64_t v11 = *(void *)(v39 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_20;
    }
  }

    id v7 = (v12 - 1) & v12;
  }

  uint64_t v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    sub_100047164();
    return v18;
  }

  uint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    uint64_t v3 = v13;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    uint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }

  sub_10001DED8();
  sub_10000ADB0();
LABEL_21:
  sub_10006C994();
}

      if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
      {
        sub_1000B122C();
        __int128 v17 = v27;
      }

      uint64_t v22 = v17[v13 + 4];
      char v23 = __OFSUB__(v22, 1LL);
      id v24 = v22 - 1;
      if (v23) {
        goto LABEL_73;
      }
      v17[v13 + 4] = v24;
      uint64_t v13 = *(void *)(v12 + 16);
      id v25 = *(void *)(v12 + 24);
      unint64_t v20 = v13 + 1;
      sub_10001BD0C();
      if (v13 >= v25 >> 1)
      {
LABEL_74:
        sub_1000148B4();
        uint64_t v12 = v56;
      }
    }

    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }

  uint64_t v35 = 0LL;
  unint64_t v36 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  v29._object = (void *)0x80000001000FAD80LL;
  v29._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v29);
  _print_unlocked<A, B>(_:_:)( v37,  &v35,  &type metadata for String,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v30._countAndFlagsBits = 39LL;
  v30._object = (void *)0xE100000000000000LL;
  String.append(_:)(v30);
  unint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v35,  v36,  "Swift/NativeDictionary.swift",  28LL,  2LL,  783LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

        swift_once(&qword_1001345F0, sub_1000D4410);
        goto LABEL_14;
      }

uint64_t sub_10000BDEC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (v6)
  {
    do
    {
      uint64_t v7 = 4LL;
      while (1)
      {
        id v8 = (v5 & 0xC000000000000001LL) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5)
           : *(id *)(v5 + 8 * v7);
        id v9 = v8;
        uint64_t v10 = v7 - 3;
        if (__OFADD__(v7 - 4, 1LL)) {
          break;
        }
        uint64_t v11 = objc_opt_self(&OBJC_CLASS___LNEntityValueType);
        uint64_t v12 = (void *)swift_dynamicCastObjCClass(v9, v11);
        if (v12)
        {
          uint64_t v13 = a3;
          id v14 = [v12 identifier];
          uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
          uint64_t v17 = v16;

          a3 = v13;
          if (v15 == a2 && v17 == v13)
          {
            swift_bridgeObjectRelease(v5);

            uint64_t v6 = 1LL;
            uint64_t v5 = v13;
            goto LABEL_19;
          }

          char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, a2, v13, 0LL);

          swift_bridgeObjectRelease(v17);
          if ((v19 & 1) != 0)
          {
            uint64_t v6 = 1LL;
            goto LABEL_19;
          }
        }

        else
        {
        }

        ++v7;
        if (v10 == v6)
        {
          uint64_t v6 = 0LL;
          goto LABEL_19;
        }
      }

      __break(1u);
LABEL_21:
      uint64_t v21 = a2;
      if (v5 < 0) {
        uint64_t v22 = v5;
      }
      else {
        uint64_t v22 = v5 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v5);
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter(v22);
      a2 = v21;
      uint64_t v6 = v23;
    }

    while (v23);
  }

LABEL_19:
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(v5);
  return v6;
}

      if (v4 == ++v5)
      {
        swift_bridgeObjectRelease(v3);
        goto LABEL_30;
      }
    }
  }

  uint64_t v6 = _swiftEmptyArrayStorage;
LABEL_30:
  id v25 = swift_bridgeObjectRelease(v3);
  __chkstk_darwin(v25);
  sub_10000EA94((uint64_t)v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10000F598);
  swift_bridgeObjectRelease(v6);
LABEL_28:
  sub_10000AD58();
}

  swift_bridgeObjectRelease(a1);
  return &_swiftEmptyArrayStorage;
}

  swift_release_n(v22, 2LL);
  swift_release();
  return v23;
}

    id v14 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
    uint64_t v40 = v19;
LABEL_20:
    uint64_t v21 = *(void *)(v41 + 72);
    sub_10006790C(*(void *)(v39 + 56) + v21 * v16, (uint64_t)v10, (uint64_t *)&unk_100132690);
    sub_10006746C((uint64_t)v10, (uint64_t)v13, (uint64_t *)&unk_100132690);
    uint64_t v22 = *(int *)(v38 + 48);
    uint64_t v23 = type metadata accessor for UUID(0LL);
    id v24 = *(void *)(v23 - 8);
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v7, v13, v23);
    id v25 = *(void **)&v13[v22];
    *(void *)&v7[v22] = v25;
    uint64_t v26 = sub_100066A74(v25);
    if (!v27)
    {
      (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v23);
      goto LABEL_28;
    }

    if (v26 == v34 && v27 == v36)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v23);
      goto LABEL_30;
    }

    id v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v34, v36, 0LL);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v23);
    if ((v29 & 1) != 0)
    {
LABEL_30:
      sub_10006746C((uint64_t)v13, v37, (uint64_t *)&unk_100132690);
      id v30 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
      {
        sub_1000455A4();
        id v30 = v43;
      }

      uint64_t v31 = v30[2];
      if (v31 >= v30[3] >> 1)
      {
        sub_1000455A4();
        id v30 = v43;
      }

      v30[2] = v31 + 1;
      sub_10006746C( v37,  (uint64_t)v30 + ((*(unsigned __int8 *)(v41 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))
      + v31 * v21,
        (uint64_t *)&unk_100132690);
    }

    else
    {
LABEL_28:
      sub_10001B60C((uint64_t)v13, (uint64_t *)&unk_100132690);
    }
  }

  __break(1u);
}

    uint64_t v10 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_20:
    unint64_t result = (unint64_t *)[*(id *)(*(void *)(a3 + 56) + 8 * v13) value];
    if (result == (unint64_t *)1)
    {
      *(unint64_t *)((char *)v4 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      if (__OFADD__(v5++, 1LL))
      {
        __break(1u);
        return (unint64_t *)sub_1000BFCF0(v4, a2, v5, a3);
      }
    }
  }

  uint64_t v16 = v14 + 3;
  if (v16 >= v11) {
    return (unint64_t *)sub_1000BFCF0(v4, a2, v5, a3);
  }
  uint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    uint64_t v6 = v16;
    goto LABEL_19;
  }

  while (1)
  {
    uint64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v6 >= v11) {
      return (unint64_t *)sub_1000BFCF0(v4, a2, v5, a3);
    }
    uint64_t v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_19;
    }
  }

    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v17 = v22;
    unint64_t result = swift_isUniquelyReferenced_nonNull_native(v22);
    if ((result & 1) == 0)
    {
      unint64_t result = (uint64_t)sub_100045674(0LL, v22[2] + 1LL, 1);
      uint64_t v17 = v22;
    }

    char v19 = v17[2];
    uint64_t v18 = v17[3];
    if (v19 >= v18 >> 1)
    {
      unint64_t result = (uint64_t)sub_100045674((char *)(v18 > 1), v19 + 1, 1);
      uint64_t v17 = v22;
    }

    v17[2] = v19 + 1;
    uint64_t v22 = v17;
    unint64_t v20 = &v17[8 * v19];
    v20[4] = v30;
    v20[5] = v5;
    v20[6] = v6;
    v20[7] = v7;
    v20[8] = v29;
    v20[9] = v8;
    v20[10] = v28;
    *((_BYTE *)v20 + 88) = v27;
    *((_BYTE *)v20 + 89) = v26;
    goto LABEL_24;
  }

  uint64_t v22 = _swiftEmptyArrayStorage;
LABEL_27:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (uint64_t)v22;
}

    uint64_t v6 = (v10 - 1) & v10;
    id v8 = __clz(__rbit64(v10)) + (v11 << 6);
    id v51 = v11;
LABEL_20:
    uint64_t v13 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v8);
    uint64_t v15 = *v13;
    id v14 = v13[1];
    uint64_t v16 = *(void *)(*(void *)(v5 + 56) + 8 * v8);
    uint64_t v17 = *(void *)(a3 + 16);
    swift_bridgeObjectRetain();
    if (!v17)
    {
      swift_bridgeObjectRetain();
LABEL_25:
      uint64_t v22 = sub_10000A1A0(0LL, (unint64_t *)&qword_100130BA0, &OBJC_CLASS___LNSystemProtocol_ptr);
      uint64_t v23 = sub_100038038();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v21 = (void *)Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v22, &type metadata for String, v23);
      goto LABEL_26;
    }

    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_100015F98(v15, v14);
    if ((v19 & 1) == 0)
    {
      swift_bridgeObjectRelease(v14);
      goto LABEL_25;
    }

    unint64_t v20 = *(void *)(*(void *)(a3 + 56) + 8 * v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_100082948(v20);
    swift_bridgeObjectRelease(v20);
LABEL_26:
    id v24 = objc_allocWithZone(&OBJC_CLASS___LNBundleActionsMetadata);
    id v25 = sub_100083DAC(v16, (uint64_t)v21);
    if (v25)
    {
      id v29 = v25;
      isUnique = swift_isUniquelyReferenced_nonNull_native(a1);
      uint64_t v53 = a1;
      id v30 = sub_100015F98(v15, v14);
      uint64_t v31 = a1[2];
      NSString v48 = v32;
      uint64_t v33 = (v32 & 1) == 0;
      uint64_t v34 = v31 + v33;
      if (__OFADD__(v31, v33)) {
        goto LABEL_40;
      }
      uint64_t v47 = v30;
      sub_100008DB0(&qword_100132DA8);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v34))
      {
        uint64_t v47 = sub_100015F98(v15, v14);
        if ((v48 & 1) != (v35 & 1)) {
          goto LABEL_42;
        }
      }

      a1 = v53;
      if ((v48 & 1) != 0)
      {
        unint64_t v36 = v53[7];

        *(void *)(v36 + 8 * v47) = v29;
      }

      else
      {
        v53[(v47 >> 6) + 8] |= 1LL << v47;
        id v41 = (uint64_t *)(a1[6] + 16 * v47);
        *id v41 = v15;
        v41[1] = v14;
        *(void *)(a1[7] + 8 * v47) = v29;
        id v42 = a1[2];
        uint64_t v43 = __OFADD__(v42, 1LL);
        uint64_t v44 = v42 + 1;
        if (v43) {
          goto LABEL_41;
        }
        a1[2] = v44;
        swift_bridgeObjectRetain();
      }

      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease_n(v14, 2LL);
      swift_bridgeObjectRelease(0x8000000000000000LL);
    }

    else
    {
      swift_bridgeObjectRetain();
      uint64_t v26 = sub_100015F98(v15, v14);
      id v28 = v27;
      swift_bridgeObjectRelease(a1);
      if ((v28 & 1) != 0)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
        uint64_t v53 = a1;
        uint64_t v38 = a1[3];
        sub_100008DB0(&qword_100132DA8);
        _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v38);
        a1 = v53;
        swift_bridgeObjectRelease(*(void *)(v53[6] + 16 * v26 + 8));
        uint64_t v39 = *(void **)(a1[7] + 8 * v26);
        uint64_t v40 = sub_10000A1A0(0LL, &qword_1001337D0, &OBJC_CLASS___LNBundleActionsMetadata_ptr);
        _NativeDictionary._delete(at:)(v26, a1, &type metadata for String, v40);

        swift_bridgeObjectRelease_n(v14, 2LL);
        swift_bridgeObjectRelease(0x8000000000000000LL);
        swift_bridgeObjectRelease(v16);
      }

      else
      {
        swift_bridgeObjectRelease(v16);
        swift_bridgeObjectRelease_n(v14, 2LL);
      }
    }
  }

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

    uint64_t v6 = (v12 - 1) & v12;
    uint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    uint64_t v5 = v13;
LABEL_20:
    uint64_t v15 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v10);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = *(void **)(*(void *)(v4 + 56) + 8 * v10);
    swift_bridgeObjectRetain(v17);
    char v19 = v18;
    LOBYTE(v16) = a2(v16, v17, v19);

    unint64_t result = swift_bridgeObjectRelease(v17);
    if ((v16 & 1) == 0)
    {
      swift_release(v4);
      return 0LL;
    }
  }

  __break(1u);
  return result;
}

    uint64_t v17 = (v21 - 1) & v21;
    char v19 = __clz(__rbit64(v21)) + (v22 << 6);
    uint64_t v16 = v22;
LABEL_20:
    id v24 = *(void *)(v40 + 72);
    sub_100084214(*(void *)(v15 + 56) + v24 * v19, (uint64_t)v14, type metadata accessor for LNBundleRecord);
    sub_100084248((uint64_t)v14, (uint64_t)v11, type metadata accessor for LNBundleRecord);
    sub_100084214((uint64_t)v11, (uint64_t)v4, type metadata accessor for LNBundleRecord);
    sub_100009E60((uint64_t)v4, 0LL, 1LL, v5);
    sub_100058D54((uint64_t)v11, type metadata accessor for LNBundleRecord);
    if (sub_100009E6C((uint64_t)v4, 1LL, v5) == 1)
    {
      sub_100026E14((uint64_t)v4, &qword_100132D90);
    }

    else
    {
      sub_100084248((uint64_t)v4, v34, type metadata accessor for LNBundleRecord);
      sub_100084248(v34, v35, type metadata accessor for LNBundleRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
      {
        sub_100014A14();
        unint64_t v36 = v29;
      }

      id v25 = v36[2];
      uint64_t v26 = v25 + 1;
      if (v25 >= v36[3] >> 1)
      {
        uint64_t v32 = v36[2];
        uint64_t v33 = v25 + 1;
        sub_100014A14();
        id v25 = v32;
        uint64_t v26 = v33;
        unint64_t v36 = v30;
      }

      uint64_t v27 = v35;
      id v28 = v36;
      uint64_t v36[2] = v26;
      sub_100084248( v27,  (uint64_t)v28 + ((*(unsigned __int8 *)(v40 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))
      + v25 * v24,
        type metadata accessor for LNBundleRecord);
    }
  }

  __break(1u);
}

    id v9 = (v13 - 1) & v13;
    uint64_t v11 = __clz(__rbit64(v13)) + (v6 << 6);
LABEL_20:
    uint64_t v15 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v11);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = (uint64_t *)(*(void *)(a3 + 56) + 16 * v11);
    unint64_t v20 = *v18;
    char v19 = v18[1];
    swift_bridgeObjectRetain();
    uint64_t v21 = swift_bridgeObjectRetain();
    LOBYTE(v2sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = a4(v16, v17, v20, v19, v21);
    swift_bridgeObjectRelease();
    unint64_t result = swift_bridgeObjectRelease();
    if ((v20 & 1) != 0)
    {
      *(unint64_t *)((char *)v24 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
      if (__OFADD__(v25++, 1LL))
      {
        __break(1u);
        return sub_1000BFF7C(v24, a2, v25, a3);
      }
    }
  }

  id v14 = v12 + 3;
  if (v14 >= v27) {
    return sub_1000BFF7C(v24, a2, v25, a3);
  }
  uint64_t v13 = *(void *)(v26 + 8 * v14);
  if (v13)
  {
    uint64_t v6 = v14;
    goto LABEL_19;
  }

  while (1)
  {
    uint64_t v6 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v6 >= v27) {
      return sub_1000BFF7C(v24, a2, v25, a3);
    }
    uint64_t v13 = *(void *)(v26 + 8 * v6);
    ++v14;
    if (v13) {
      goto LABEL_19;
    }
  }

    uint64_t v5 = (v10 - 1) & v10;
    id v8 = __clz(__rbit64(v10)) + (v11 << 6);
    unint64_t v36 = v11;
LABEL_20:
    uint64_t v13 = *(id *)(*(void *)(v3 + 56) + 8 * v8);
    id v14 = [v13 systemProtocolMetadata];
    type metadata accessor for LNSystemEntityProtocolIdentifier(0LL);
    uint64_t v16 = v15;
    uint64_t v17 = sub_100008DB0((uint64_t *)&unk_100130600);
    uint64_t v18 = sub_1000118A0( &qword_1001308D0,  (uint64_t (*)(uint64_t))type metadata accessor for LNSystemEntityProtocolIdentifier,  (uint64_t)&unk_1000F5164);
    char v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v14, v16, v17, v18);

    if (!*(void *)(v19 + 16))
    {

      goto LABEL_27;
    }

    unint64_t v20 = v35;
    sub_100015FAC();
    if ((v21 & 1) != 0)
    {
      uint64_t v22 = v3;
      uint64_t v23 = v6;
      id v24 = v4;

      swift_bridgeObjectRelease(v19);
      id v25 = [v13 identifier];
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      id v28 = v27;

      if (*(void *)(a2 + 16) && (sub_100015F98(v26, v28), (v29 & 1) != 0))
      {

        unint64_t result = swift_bridgeObjectRelease(v28);
      }

      else
      {
        id v30 = swift_bridgeObjectRelease(v28);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v30);
        uint64_t v31 = v38[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v31);
        uint64_t v32 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v13);
        unint64_t result = specialized ContiguousArray._endMutation()(v32);
      }

      id v4 = v24;
      uint64_t v6 = v23;
      uint64_t v3 = v22;
    }

    else
    {

LABEL_27:
      unint64_t result = swift_bridgeObjectRelease(v19);
    }
  }

  __break(1u);
  return result;
}

      __break(1u);
      goto LABEL_20;
    }

unint64_t sub_10000BFA4()
{
  unint64_t result = qword_1001309A0;
  if (!qword_1001309A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F7AFC, &type metadata for StreamManagerError);
    atomic_store(result, (unint64_t *)&qword_1001309A0);
  }

  return result;
}

uint64_t sub_10000BFE4(uint64_t a1)
{
  return sub_10000B894(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10000BFF0(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v4;
}

uint64_t sub_10000C050()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10000C078(void *a1)
{
  return sub_10000B780(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10000C084()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10000C0B4(void *a1)
{
  return sub_10000B654( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void **)(v1 + 48));
}

uint64_t sub_10000C0C4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10000C0EC(uint64_t a1)
{
  return sub_10000B3E4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_10000C0F8()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10000C158(void *a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  return sub_10000B32C(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_10000C194(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10000C1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008DB0(&qword_100130EA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000C218(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100008DB0(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_10000C254(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7LL);
}

id sub_10000C25C(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_10000C264(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

void *sub_10000C26C(void *result)
{
  result[2] = *(void *)(v4 - 72);
  result[3] = v1;
  result[4] = v3;
  result[5] = v2;
  return result;
}

uint64_t sub_10000C280()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 24));
}

uint64_t sub_10000C288(uint64_t a1, uint64_t a2)
{
  return sub_100009E60(a1, a2, 1LL, v2);
}

uint64_t sub_10000C298(uint64_t a1)
{
  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[3] = &unk_1000F5390;
  return swift_initClassMetadata2(a1, 0LL, 4LL, v2, a1 + 96);
}

void sub_10000C2F4(uint64_t a1)
{
  uint64_t v22 = a1;
  uint64_t v2 = *(void *)(*(void *)v1 + 80LL);
  uint64_t v20 = *(void *)(v2 - 8);
  __chkstk_darwin(a1);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Optional(255LL, v2);
  uint64_t v21 = type metadata accessor for CheckedContinuation( 0LL,  v5,  &type metadata for Never,  &protocol witness table for Never);
  uint64_t v6 = *(void *)(v21 - 8);
  uint64_t v7 = __chkstk_darwin(v21);
  id v9 = (char *)&v19 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v19 - v10;
  uint64_t v12 = (os_unfair_lock_s *)(*(void *)(v1 + 16) + 16LL);
  os_unfair_lock_lock(v12);
  swift_beginAccess(v1 + 24, v24, 0LL, 0LL);
  v23[0] = *(void *)(v1 + 24);
  uint64_t v13 = type metadata accessor for Array(0LL, v2);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v13);
  if ((Collection.isEmpty.getter(v13, WitnessTable) & 1) != 0)
  {
    uint64_t v15 = v21;
    if (*(_BYTE *)(v1 + 40) == 1)
    {
      sub_100009E60((uint64_t)v11, 1LL, 1LL, v2);
      CheckedContinuation.resume(returning:)(v11, v15);
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v22, v21);
      swift_beginAccess(v1 + 32, v23, 33LL, 0LL);
      uint64_t v18 = type metadata accessor for Array(0LL, v15);
      Array.append(_:)(v9, v18);
      swift_endAccess(v23);
    }

    os_unfair_lock_unlock(v12);
  }

  else
  {
    swift_beginAccess(v1 + 24, v23, 33LL, 0LL);
    uint64_t v16 = swift_getWitnessTable(&protocol conformance descriptor for [A], v13);
    RangeReplaceableCollection.removeFirst()(v13, v16);
    swift_endAccess(v23);
    os_unfair_lock_unlock(v12);
    uint64_t v17 = v20;
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v11, v4, v2);
    sub_100009E60((uint64_t)v11, 0LL, 1LL, v2);
    CheckedContinuation.resume(returning:)(v11, v21);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v4, v2);
  }

uint64_t sub_10000C574(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch(sub_10000C590, 0LL, 0LL);
}

uint64_t sub_10000C590()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[5] = v3;
  uint64_t v4 = *(void *)(v2 + 16);
  v3[2] = v4;
  v3[3] = *(void *)(v2 + 24);
  v3[4] = v1;
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[6] = v5;
  uint64_t v6 = type metadata accessor for Optional(0LL, v4);
  *uint64_t v5 = v0;
  v5[1] = sub_10000C640;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[2],  0LL,  0LL,  0x29287478656ELL,  0xE600000000000000LL,  sub_10000C8A8,  v3,  v6);
}

uint64_t sub_10000C640()
{
  uint64_t v1 = *(void *)(*v0 + 40);
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 48));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10000C690(uint64_t a1, void *a2)
{
  uint64_t v3 = *a2;
  swift_retain(*a2);
  sub_10000C2F4(a1);
  return swift_release(v3);
}

uint64_t sub_10000C6C4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_100130A54);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000C724;
  return sub_10000C574(a1, a2);
}

uint64_t sub_10000C724()
{
  return sub_10000C914(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10000C74C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_task_alloc(_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTu[1]);
  *(void *)(v6 + 16) = v12;
  *uint64_t v12 = v6;
  v12[1] = sub_10000C7D0;
  return _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(a1, a2, a3, a5, a6);
}

uint64_t sub_10000C7D0()
{
  return sub_10000C914(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10000C7FC()
{
  return swift_retain(v0);
}

void *sub_10000C804()
{
  return v0;
}

uint64_t sub_10000C830()
{
  return swift_deallocClassInstance(v0, 41LL, 7LL);
}

uint64_t type metadata accessor for AsyncWorkQueue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C8B4(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncWorkQueue);
}

uint64_t sub_10000C85C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1000F5418, a1);
}

uint64_t sub_10000C86C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  sub_10000C7FC();
  uint64_t result = swift_release(v3);
  *a1 = v3;
  return result;
}

void *sub_10000C89C()
{
  return &protocol witness table for Never;
}

uint64_t sub_10000C8A8(uint64_t a1)
{
  return sub_10000C690(a1, *(void **)(v1 + 32));
}

uint64_t sub_10000C8B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_10000C8E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24LL);
}

uint64_t type metadata accessor for AsyncWorkQueue.AsyncIterator( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C8B4(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncWorkQueue.AsyncIterator);
}

uint64_t sub_10000C8F4()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - 8) = *v0;
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v1 - 8) = *v0;
  return swift_task_dealloc(v3);
}

uint64_t sub_10000C914(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10000C920()
{
  return sub_10000E560(*(uint64_t (**)(void))(v0 + 8));
}

void static Daemon.main()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v70 = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v72 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v71 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100008DB0(&qword_100131780);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v68 = (uint64_t)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v66 = (void (*)(char *, char *, uint64_t))((char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = sub_10000E918();
  uint64_t v67 = *(void *)(v15 - 8);
  uint64_t v16 = *(void *)(v67 + 64);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v69 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v57 - v18;
  aBlock[0] = v3;
  uint64_t v20 = sub_100008DB0((uint64_t *)&unk_100132590);
  uint64_t v22 = String.init<A>(describing:)(aBlock, v20);
  if (!LNLogSubsystem) {
    __break(1u);
  }
  uint64_t v23 = v21;
  uint64_t v60 = v15;
  uint64_t v61 = v9;
  uint64_t v62 = v8;
  uint64_t v63 = v6;
  uint64_t v64 = v5;
  uint64_t v24 = String.init(cString:)();
  uint64_t v26 = Logger.init(subsystem:category:)(v24, v25, v22, v23);
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.default.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  id v30 = v19;
  uint64_t v65 = v16;
  uint64_t v31 = a1;
  if (v29)
  {
    uint64_t v32 = (uint8_t *)sub_10000AE10(12LL);
    uint64_t v33 = sub_10000AE10(32LL);
    aBlock[0] = v33;
    *(_DWORD *)uint64_t v32 = 136315138;
    uint64_t v73 = sub_10000DE60(0xD000000000000023LL, 0x80000001000F9070LL, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, aBlock, v32 + 4, v32 + 12);
    sub_10000AF5C((void *)&_mh_execute_header, v27, v28, "%s launched, checking in", v32);
    swift_arrayDestroy(v33, 1LL);
    sub_10000AD78(v33);
    uint64_t v34 = (uint64_t)v32;
    id v30 = v19;
    sub_10000AD78(v34);
  }

  uint64_t v57 = v30;
  uint64_t v35 = v70;
  uint64_t v36 = v31;
  (*(void (**)(uint64_t, uint64_t))(v70 + 16))(v31, v70);
  uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v31, v35);
  uint64_t v38 = sub_10000EA64();
  uint64_t v39 = v68;
  sub_100009E60(v68, 1LL, 1LL, v38);
  uint64_t v40 = v67;
  uint64_t v66 = *(void (**)(char *, char *, uint64_t))(v67 + 16);
  id v41 = v69;
  uint64_t v42 = v60;
  v66(v69, v30, v60);
  uint64_t v43 = *(unsigned __int8 *)(v40 + 80);
  uint64_t v44 = (v43 + 40) & ~v43;
  uint64_t v59 = v43 | 7;
  id v45 = (void *)swift_allocObject(&unk_100122DC0, v44 + v65, v43 | 7);
  v45[2] = 0LL;
  v45[3] = 0LL;
  uint64_t v58 = v37;
  v45[4] = v37;
  uint64_t v67 = *(void *)(v40 + 32);
  ((void (*)(char *, char *, uint64_t))v67)((char *)v45 + v44, v41, v42);
  swift_bridgeObjectRetain(v37);
  uint64_t v46 = sub_10000D1F0(v39, (uint64_t)&unk_100130AE0, (uint64_t)v45);
  uint64_t v47 = swift_release(v46);
  NSString v48 = (void (__cdecl *)(int))SIG_IGN.getter(v47);
  signal(15, v48);
  sub_10000D320();
  uint64_t v49 = static OS_dispatch_source.makeSignalSource(signal:queue:)(15LL, 0LL);
  uint64_t ObjectType = swift_getObjectType(v49);
  v66(v41, v57, v42);
  uint64_t v51 = (v43 + 32) & ~v43;
  unint64_t v52 = (v65 + v51 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v53 = swift_allocObject(&unk_100122DE8, v52 + 8, v59);
  *(void *)(v53 + 16) = v36;
  *(void *)(v53 + 24) = v35;
  ((void (*)(uint64_t, char *, uint64_t))v67)(v53 + v51, v41, v42);
  *(void *)(v53 + v52) = v58;
  aBlock[4] = (uint64_t)sub_10000D654;
  uint64_t v75 = v53;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_10000D934;
  aBlock[3] = (uint64_t)&unk_100122E00;
  uint64_t v54 = _Block_copy(aBlock);
  uint64_t v55 = v71;
  static DispatchQoS.unspecified.getter();
  uint64_t v56 = v62;
  sub_10000D978();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v55, v56, v54, ObjectType);
  _Block_release(v54);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v56, v64);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v55, v61);
  swift_release(v75);
  OS_dispatch_source.activate()();
  dispatch_main();
}

uint64_t sub_10000CE28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 24) = a4;
  *(void *)(v5 + 32) = a5;
  return swift_task_switch(sub_10000CE40, 0LL, 0LL);
}

uint64_t sub_10000CE40()
{
  uint64_t v2 = (void *)sub_10000EA58();
  *(void *)(v1 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v2;
  v2[2] = v0;
  v2[3] = &unk_100130B60;
  void v2[4] = 0LL;
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(void *)(v1 + 48) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000CEB4;
  sub_10000E9EC();
  return sub_10000E9A4();
}

uint64_t sub_10000CEB4()
{
  return sub_10000E998();
}

uint64_t sub_10000CEEC()
{
  uint64_t v2 = swift_bridgeObjectRetain(*(void *)(v1 + 24));
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (sub_10000EA10(v4))
  {
    uint64_t v5 = *(void *)(v1 + 24);
    uint64_t v6 = (uint8_t *)sub_10000AE10(12LL);
    *(_DWORD *)uint64_t v6 = 134217984;
    *(void *)(v1 + 16) = *(void *)(v5 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v5);
    sub_10000AF5C((void *)&_mh_execute_header, v3, v0, "Finished checking in %ld entry points", v6);
    sub_10000AD78((uint64_t)v6);
  }

  else
  {
    uint64_t v7 = *(void *)(v1 + 24);

    swift_bridgeObjectRelease(v7);
  }

  uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___LNFeatures_tvOS);
  if ([v8 isHomePod])
  {
    id v9 = [v8 homeRVCEnabled];
    if ((v9 & 1) == 0)
    {
      uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)sub_10000AE10(2LL);
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "Device is HomePod and no RVC enablement found, terminating process",  v12,  2u);
        sub_10000AD78((uint64_t)v12);
      }

      xpc_transaction_exit_clean();
    }
  }

  return sub_10000EA08(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10000D060()
{
  return sub_10000E908(v0, v1, v2);
}

uint64_t sub_10000D0AC()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_10000E918() - 8) + 80LL);
  uint64_t v2 = v0 + ((v1 + 40) & ~v1);
  uint64_t v3 = swift_task_alloc(dword_100130ADC);
  os_log_type_t v4 = (void *)sub_10000E9E0(v3);
  uint64_t v5 = sub_10000E9C4(v4);
  return sub_10000CE28(v5, v6, v7, v8, v2);
}

uint64_t sub_10000D124()
{
  return sub_10000C914(v0[1]);
}

uint64_t sub_10000D158(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return swift_task_switch(sub_10000D170, 0LL, 0LL);
}

uint64_t sub_10000D170()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[4];
  sub_100008D74(v1, v1[3]);
  uint64_t v3 = (void *)sub_10000E9B0(*(void *)(v2 + 8));
  *(void *)(v0 + 24) = v3;
  uint64_t v4 = sub_10000EA40(v3, (uint64_t)sub_10000D1BC);
  return sub_10000E920(v4, v5, v6);
}

uint64_t sub_10000D1BC()
{
  return sub_10000C914(v0[1]);
}

uint64_t sub_10000D1F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000EA64();
  if (sub_100009E6C(a1, 1LL, v6) == 1)
  {
    sub_10000EA6C();
    uint64_t v7 = 7168LL;
  }

  else
  {
    unsigned __int8 v8 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v7 = v8 | 0x1C00LL;
  }

  uint64_t v9 = *(void *)(a3 + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v9);
    uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
    uint64_t v14 = v13;
    swift_unknownObjectRelease(v9);
  }

  else
  {
    uint64_t v12 = 0LL;
    uint64_t v14 = 0LL;
  }

  uint64_t v15 = sub_10000C254((uint64_t)&unk_100122EB0, 32LL);
  *(void *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  if (v14 | v12)
  {
    v18[0] = 0LL;
    v18[1] = 0LL;
    uint64_t v16 = v18;
    __int128 v18[2] = v12;
    v18[3] = v14;
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  return swift_task_create(v7, v16, (char *)&type metadata for () + 8, &unk_100130B58, v15);
}

unint64_t sub_10000D320()
{
  unint64_t result = qword_100130AE8;
  if (!qword_100130AE8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_source);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100130AE8);
  }

  return result;
}

uint64_t sub_10000D35C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v40 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100008DB0(&qword_100131780);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc(12LL, -1LL);
    uint64_t v36 = v10;
    uint64_t v37 = a1;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v39 = a4;
    uint64_t v20 = v19;
    uint64_t v42 = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    uint64_t v35 = v18 + 4;
    uint64_t v21 = _typeName(_:qualified:)(a3, 0LL);
    uint64_t v38 = v8;
    uint64_t v22 = a2;
    unint64_t v24 = v23;
    uint64_t v41 = sub_10000DE60(v21, v23, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v35, v18 + 12);
    unint64_t v25 = v24;
    a2 = v22;
    uint64_t v8 = v38;
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s received SIGTERM, shutting down gracefully", v18, 0xCu);
    swift_arrayDestroy(v20, 1LL);
    uint64_t v26 = v20;
    a4 = v39;
    swift_slowDealloc(v26, -1LL, -1LL);
    uint64_t v27 = v18;
    uint64_t v10 = v36;
    a1 = v37;
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  static TaskPriority.userInitiated.getter();
  uint64_t v28 = type metadata accessor for TaskPriority(0LL);
  sub_100009E60((uint64_t)v14, 0LL, 1LL, v28);
  BOOL v29 = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v40, a1, v8);
  uint64_t v30 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v31 = (v30 + 56) & ~v30;
  uint64_t v32 = (char *)swift_allocObject(&unk_100122E38, v31 + v10, v30 | 7);
  *((void *)v32 + 2) = 0LL;
  *((void *)v32 + 3) = 0LL;
  *((void *)v32 + 4) = a3;
  *((void *)v32 + 5) = a4;
  *((void *)v32 + 6) = a2;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v32[v31], v29, v8);
  swift_bridgeObjectRetain(a2);
  uint64_t v33 = sub_10000D1F0((uint64_t)v14, (uint64_t)&unk_100130B10, (uint64_t)v32);
  return swift_release(v33);
}

uint64_t sub_10000D5E4()
{
  uint64_t v1 = sub_10000E918();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10000D654()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(sub_10000E918() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_10000D35C(v0 + v4, *(void *)(v0 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8LL)), v1, v2);
}

uint64_t sub_10000D6AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  void v6[3] = a4;
  return swift_task_switch(sub_10000D6C8, 0LL, 0LL);
}

uint64_t sub_10000D6C8()
{
  uint64_t v2 = (void *)sub_10000EA58();
  *(void *)(v1 + 48) = v2;
  v2[2] = v0;
  v2[3] = &unk_100130B18;
  void v2[4] = 0LL;
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(void *)(v1 + 56) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000D73C;
  sub_10000E9EC();
  return sub_10000E9A4();
}

uint64_t sub_10000D73C()
{
  return sub_10000E998();
}

uint64_t sub_10000D774(uint64_t a1)
{
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (sub_10000EA10(v4))
  {
    uint64_t v5 = *(void *)(v2 + 40);
    unint64_t v6 = (uint8_t *)sub_10000AE10(12LL);
    uint64_t v7 = sub_10000AE10(32LL);
    uint64_t v13 = v7;
    *(_DWORD *)unint64_t v6 = 136315138;
    uint64_t v8 = _typeName(_:qualified:)(v5, 0LL);
    unint64_t v10 = v9;
    *(void *)(v2 + 16) = sub_10000DE60(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 16, v2 + 24, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    sub_10000AF5C((void *)&_mh_execute_header, v3, v1, "%s successfully shut down, terminating", v6);
    swift_arrayDestroy(v7, 1LL);
    sub_10000AD78(v7);
    sub_10000AD78((uint64_t)v6);
  }

  xpc_transaction_exit_clean(v11);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10000D890(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return swift_task_switch(sub_10000D8A8, 0LL, 0LL);
}

uint64_t sub_10000D8A8()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[4];
  sub_100008D74(v1, v1[3]);
  uint64_t v3 = (void *)sub_10000E9B0(*(void *)(v2 + 16));
  *(void *)(v0 + 24) = v3;
  uint64_t v4 = sub_10000EA40(v3, (uint64_t)sub_10000D8F4);
  return sub_10000E920(v4, v5, v6);
}

uint64_t sub_10000D8F4()
{
  if (v0) {
    swift_errorRelease(v0);
  }
  return sub_10000C914(v1[1]);
}

uint64_t sub_10000D934(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_10000D960(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000D970(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10000D978()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = _swiftEmptyArrayStorage;
  unint64_t v1 = sub_10000E56C();
  uint64_t v2 = sub_100008DB0((uint64_t *)&unk_100130550);
  unint64_t v3 = sub_10000E5AC();
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

uint64_t sub_10000D9F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[16] = a4;
  v5[17] = a5;
  v5[14] = a2;
  v5[15] = a3;
  unint64_t v6 = (*(void *)(*(void *)(sub_100008DB0(&qword_100131780) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[18] = swift_task_alloc(v6);
  v5[19] = swift_task_alloc(v6);
  return swift_task_switch(sub_10000DA64, 0LL, 0LL);
}

uint64_t sub_10000DA64()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v28 = (__int128 *)(v0 + 16);
    uint64_t v3 = v1 + 32;
    uint64_t v4 = sub_10000EA64();
    swift_bridgeObjectRetain(v1);
    do
    {
      uint64_t v29 = v2;
      uint64_t v6 = *(void *)(v0 + 144);
      uint64_t v5 = *(void *)(v0 + 152);
      uint64_t v7 = *(void *)(v0 + 128);
      uint64_t v8 = *(void *)(v0 + 136);
      sub_100009E60(v5, 1LL, 1LL, v4);
      sub_100008F24(v3, (uint64_t)v28);
      unint64_t v9 = (void *)sub_10000C254((uint64_t)&unk_100122E60, 88LL);
      v9[2] = 0LL;
      unint64_t v10 = v9 + 2;
      v9[3] = 0LL;
      v9[4] = v7;
      v9[5] = v8;
      sub_100009EEC(v28, (uint64_t)(v9 + 6));
      sub_10000E7A0(v5, v6);
      LODWORD(v6) = sub_100009E6C(v6, 1LL, v4);
      uint64_t v11 = swift_retain(v8);
      uint64_t v12 = *(void *)(v0 + 144);
      if ((_DWORD)v6 == 1)
      {
        sub_10000EA6C();
        uint64_t v13 = 0LL;
      }

      else
      {
        unsigned __int8 v14 = TaskPriority.rawValue.getter(v11);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v12, v4);
        uint64_t v13 = v14;
      }

      uint64_t v15 = *v10;
      if (*v10)
      {
        uint64_t v16 = v9[3];
        uint64_t ObjectType = swift_getObjectType(*v10);
        swift_unknownObjectRetain(v15);
        uint64_t v18 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
        uint64_t v20 = v19;
        swift_unknownObjectRelease(v15);
      }

      else
      {
        uint64_t v18 = 0LL;
        uint64_t v20 = 0LL;
      }

      uint64_t v21 = **(void **)(v0 + 112);
      uint64_t v22 = sub_10000C254((uint64_t)&unk_100122E88, 32LL);
      *(void *)(v22 + 16) = &unk_100130B38;
      *(void *)(v22 + 24) = v9;
      uint64_t v23 = v20 | v18;
      if (v20 | v18)
      {
        uint64_t v23 = v0 + 56;
        *(void *)(v0 + 56) = 0LL;
        *(void *)(v0 + 64) = 0LL;
        *(void *)(v0 + 72) = v18;
        *(void *)(v0 + 8sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v20;
      }

      *(void *)(v0 + 88) = 1LL;
      *(void *)(v0 + 96) = v23;
      *(void *)(v0 + 104) = v21;
      uint64_t v24 = swift_task_create(v13 | 0x3100, v0 + 88, (char *)&type metadata for () + 8, &unk_100130B40, v22);
      swift_release(v24);
      sub_10000EA6C();
      v3 += 40LL;
      --v2;
    }

    while (v29 != 1);
    swift_bridgeObjectRelease(*(void *)(v0 + 120));
  }

  unint64_t v25 = (void *)swift_task_alloc(async function pointer to TaskGroup.awaitAllRemainingTasks(isolation:)[1]);
  *(void *)(v0 + 16sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v25;
  uint64_t v26 = sub_100008DB0(&qword_100130B48);
  *unint64_t v25 = v0;
  v25[1] = sub_10000DCC4;
  return TaskGroup.awaitAllRemainingTasks(isolation:)(0LL, 0LL, v26);
}

uint64_t sub_10000DCC4()
{
  uint64_t v2 = *(void *)(v1 + 144);
  sub_10000E8E4(*(void *)(v1 + 160));
  sub_10000AF6C();
  swift_task_dealloc(v2);
  return sub_10000EA08(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10000DD04(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v8 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v6 + 16) = v8;
  *uint64_t v8 = v6;
  v8[1] = sub_10000E8DC;
  return v10(a6);
}

uint64_t sub_10000DD68(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_100130AFC);
  *(void *)(v1 + 16) = v3;
  swift_getWitnessTable(&unk_1000F7620, a1);
  *uint64_t v3 = v1;
  v3[1] = sub_10000E8DC;
  return sub_10000D124();
}

uint64_t sub_10000DDC4(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10000DE28;
  return v6(a1);
}

uint64_t sub_10000DE28()
{
  return sub_10000C914(v0[1]);
}

uint64_t sub_10000DE60(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v9 = sub_10000DF2C(v6, v7, v8, 1, a1, a2);
  uint64_t v10 = v15[0];
  if (v9)
  {
    uint64_t v11 = v9;
    uint64_t ObjectType = (void *)swift_getObjectType(v9);
    v15[0] = v11;
    uint64_t v12 = *a3;
    if (*a3)
    {
      sub_10000C194((uint64_t)v15, *a3);
      *a3 = v12 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v15[0] = a1;
    v15[1] = a2;
    uint64_t v13 = *a3;
    if (*a3)
    {
      sub_10000C194((uint64_t)v15, *a3);
      *a3 = v13 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  sub_10000AC58(v15);
  return v10;
}

void *sub_10000DF2C(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_10000E080((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
      unint64_t result = 0LL;
      *a1 = __dst;
      return result;
    }

    goto LABEL_11;
  }

  if ((a6 & 0x1000000000000000LL) != 0)
  {
LABEL_11:
    unint64_t result = sub_10000E144(a5, a6);
    *a1 = v12;
    return result;
  }

  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }

  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      unint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL);
      __break(1u);
      return result;
    }
  }

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return (void *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

void *sub_10000E080(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    unint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory with negative count",  60LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1170LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    unint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1173LL,  0);
  }

  __break(1u);
  return result;
}

void *sub_10000E144(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_10000E1D8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_10000E348(0LL, v2[2] + 1LL, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10000E348((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_10000E1D8(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v4 = String.UTF8View._foreignCount()();
    if (v4) {
      goto LABEL_6;
    }
    return _swiftEmptyArrayStorage;
  }

  if ((a2 & 0x2000000000000000LL) != 0) {
    Swift::Int v4 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
LABEL_6:
  uint64_t v5 = sub_10008A364(v4, 0LL);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  2,  71LL,  0);
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v6 = v5;
  uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    unint64_t v9 = "Insufficient space allocated to copy string contents";
    uint64_t v10 = "Swift/StringUTF8View.swift";
    uint64_t v11 = 52LL;
    uint64_t v12 = 26LL;
    goto LABEL_15;
  }

  if (v7 == v4) {
    return v6;
  }
  unint64_t v9 = "invalid Collection: less than 'count' elements in collection";
  uint64_t v10 = "Swift/ContiguousArrayBuffer.swift";
  uint64_t v11 = 60LL;
  uint64_t v12 = 33LL;
LABEL_15:
  unint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, v9, v11, 2LL, v10, v12);
  __break(1u);
  return result;
}

char *sub_10000E348(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008DB0(&qword_100130B00);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unsigned __int8 v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10000E4E0(v14, v8, v13);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_10000E41C(v14, v8, v13);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_10000E41C(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    unint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    unint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

char *sub_10000E4E0(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000LL) != 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }

  return __src;
}

uint64_t sub_10000E560(uint64_t (*a1)(void))
{
  return a1();
}

unint64_t sub_10000E56C()
{
  unint64_t result = qword_100132630;
  if (!qword_100132630)
  {
    uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_100132630);
  }

  return result;
}

unint64_t sub_10000E5AC()
{
  unint64_t result = qword_100132640;
  if (!qword_100132640)
  {
    uint64_t v1 = sub_100008E58((uint64_t *)&unk_100130550);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100132640);
  }

  return result;
}

uint64_t sub_10000E5F0()
{
  return sub_10000E908(v0, v1, v2);
}

uint64_t sub_10000E63C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(sub_10000E918() - 8) + 80LL);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = v0 + ((v3 + 56) & ~v3);
  unint64_t v6 = (void *)swift_task_alloc(dword_100130B0C);
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_10000E8DC;
  v6[4] = v5;
  v6[5] = v2;
  void v6[3] = v4;
  sub_10000EA88();
  return swift_task_switch(v7, v8, v9);
}

uint64_t sub_10000E6C0()
{
  uint64_t v0 = swift_task_alloc(dword_100130B24);
  uint64_t v1 = (void *)sub_10000E9E0(v0);
  uint64_t v2 = sub_10000E960(v1);
  return sub_10000E8F4(v2, v3, v4, v5, v6);
}

uint64_t sub_10000E704()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t sub_10000E738()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = swift_task_alloc(dword_100130B34);
  uint64_t v3 = (void *)sub_10000E9E0(v2);
  uint64_t v4 = sub_10000E9C4(v3);
  return sub_10000DD04(v4, v5, v6, v7, v1, v0 + 48);
}

uint64_t sub_10000E7A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008DB0(&qword_100131780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000E7E8(uint64_t a1)
{
  uint64_t v2 = sub_100008DB0(&qword_100131780);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10000E828()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10000E84C()
{
  uint64_t v0 = swift_task_alloc(dword_100130E2C);
  uint64_t v1 = (void *)sub_10000E9E0(v0);
  uint64_t v2 = sub_10000E940(v1);
  return sub_10000E930(v2, v3, v4, v5);
}

uint64_t sub_10000E894()
{
  uint64_t v0 = swift_task_alloc(dword_100130B54);
  uint64_t v1 = (void *)sub_10000E9E0(v0);
  uint64_t v2 = sub_10000E940(v1);
  return sub_10000E930(v2, v3, v4, v5);
}

uint64_t sub_10000E8E4(uint64_t a1)
{
  *(void *)(v2 - 8) = *v1;
  return swift_task_dealloc(a1);
}

uint64_t sub_10000E8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10000D9F4(a1, a2, a3, a4, a5);
}

uint64_t sub_10000E908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_10000E918()
{
  return type metadata accessor for Logger(0LL);
}

uint64_t sub_10000E920(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_10000E930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_10000E940(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10000E960(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10000E980()
{
  return swift_unknownObjectRelease(*(void *)(v0 + 16));
}

uint64_t sub_10000E998()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_10000E9A4()
{
  return ((uint64_t (*)(void))withTaskGroup<A, B>(of:returning:isolation:body:))();
}

uint64_t sub_10000E9B0@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t sub_10000E9C4(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10000E9E0(uint64_t result)
{
  *(void *)(v1 + 1sub_10000AC58(v0 + 6) = result;
  return result;
}

  ;
}

uint64_t sub_10000EA08(uint64_t (*a1)(void))
{
  return a1();
}

BOOL sub_10000EA10(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10000EA20()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1 + v3, v0);
}

void sub_10000EA30()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_10000EA40@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_10000EA58()
{
  return swift_task_alloc(48LL);
}

uint64_t sub_10000EA64()
{
  return type metadata accessor for TaskPriority(0LL);
}

uint64_t sub_10000EA6C()
{
  return sub_10000E7E8(v0);
}

  ;
}

  ;
}

void *sub_10000EA94(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_10004526C();
    uint64_t v4 = (unsigned __int8 *)(a1 + 48);
    do
    {
      uint64_t v6 = *((void *)v4 - 2);
      uint64_t v5 = *((void *)v4 - 1);
      uint64_t v7 = *v4;
      swift_bridgeObjectRetain(v5);
      uint64_t v8 = a2(v6, v5, v7);
      uint64_t v10 = v9;
      char v12 = v11;
      swift_bridgeObjectRelease(v5);
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      if (v13 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_10004526C();
      }
      v4 += 24;
      _swiftEmptyArrayStorage[2] = v13 + 1;
      unsigned __int8 v14 = &_swiftEmptyArrayStorage[3 * v13];
      v14[4] = v8;
      v14[5] = v10;
      *((_BYTE *)v14 + 48) = v12 & 1;
      --v2;
    }

    while (v2);
  }

  return _swiftEmptyArrayStorage;
}

uint64_t sub_10000EBAC()
{
  id v1 = [v0 entitlements];
  NSString v2 = String._bridgeToObjectiveC()();
  unint64_t v3 = sub_10000F39C();
  id v4 = [v1 objectForKey:v2 ofClass:swift_getObjCClassFromMetadata(v3)];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v7, v4);
    swift_unknownObjectRelease(v4);
  }

  else
  {
    memset(v7, 0, sizeof(v7));
  }

  sub_10000C1D0((uint64_t)v7, (uint64_t)v8);
  if (v9)
  {
    if ((sub_10000F690( (uint64_t)&v6,  (uint64_t)v8,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Bool) & 1) != 0) {
      return v6;
    }
  }

  else
  {
    sub_10000F3D8((uint64_t)v8);
  }

  return 0LL;
}

void sub_10000ECB8()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v2);
  unint64_t v3 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
  id v4 = [v0 URL];
  sub_10000F6B0();

  URL._bridgeToObjectiveC()(v5);
  uint64_t v7 = v6;
  sub_10000F6A4();
  id v8 = objc_msgSend(v3, "ln_uniqueBundleWithURL:", v7);

  if (v8)
  {
    sub_10000EF38();
  }

  else
  {
    if (qword_1001302E8 != -1) {
      swift_once(&qword_1001302E8, sub_10008883C);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    sub_100008D98(v9, (uint64_t)qword_1001357B0);
    id v10 = v1;
    char v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)sub_10000AE10(12LL);
      uint64_t v19 = sub_10000AE10(32LL);
      uint64_t v21 = v19;
      *(_DWORD *)unint64_t v13 = 136315138;
      id v14 = [v10 URL];
      sub_10000F6B0();

      unint64_t v15 = sub_10000F4F0();
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter(v2, v15);
      unint64_t v18 = v17;
      sub_10000F6A4();
      uint64_t v20 = sub_10000DE60(v16, v18, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v13 + 4, v13 + 12);

      swift_bridgeObjectRelease(v18);
      _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "Unable to load bundle at %s while fetching SiriKit alternative app names",  v13,  0xCu);
      swift_arrayDestroy(v19, 1LL);
      sub_10000AD78(v19);
      sub_10000AD78((uint64_t)v13);
    }

    else
    {
    }
  }

  sub_10000AD58();
}

void sub_10000EF38()
{
  uint64_t v1 = sub_10000F530(v0);
  if (!v1)
  {
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    goto LABEL_22;
  }

  sub_100011B48(0xD000000000000015LL, 0x80000001000F93E0LL, v1, &v27);
  sub_10000ADB0();
  if (!*((void *)&v28 + 1))
  {
LABEL_22:
    sub_10000F3D8((uint64_t)&v27);
    goto LABEL_23;
  }

  uint64_t v2 = sub_100008DB0(&qword_100130B70);
  if ((sub_10000F690((uint64_t)v26, (uint64_t)&v27, (uint64_t)&type metadata for Any + 8, v2) & 1) == 0)
  {
LABEL_23:
    if (qword_1001302E8 != -1) {
      swift_once(&qword_1001302E8, sub_10008883C);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = sub_100008D98(v20, (uint64_t)qword_1001357B0);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)sub_10000AE10(2LL);
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "App declares no INAlternativeAppNames", v24, 2u);
      sub_10000AD78((uint64_t)v24);
    }

    goto LABEL_28;
  }

  uint64_t v3 = v26[0];
  uint64_t v4 = *(void *)(v26[0] + 16LL);
  if (v4)
  {
    swift_bridgeObjectRetain(v26[0]);
    uint64_t v5 = 0LL;
    unsigned __int8 v6 = _swiftEmptyArrayStorage;
    uint64_t v7 = (char *)&type metadata for Any + 8;
    while (1)
    {
      uint64_t v8 = *(void *)(v3 + 8 * v5 + 32);
      if (*(void *)(v8 + 16))
      {
        swift_bridgeObjectRetain(*(void *)(v3 + 8 * v5 + 32));
        uint64_t v9 = sub_100015F98(0xD000000000000014LL, 0x80000001000F9400LL);
        if ((v10 & 1) != 0)
        {
          sub_10000F680(v9);
          if ((sub_10000F690((uint64_t)v26, (uint64_t)&v27, (uint64_t)v7, (uint64_t)&type metadata for String) & 1) != 0)
          {
            uint64_t v11 = v26[0];
            uint64_t v12 = v26[1];
            if (*(void *)(v8 + 16)
              && (uint64_t v13 = sub_100015F98(0xD00000000000001ALL, 0x80000001000F9420LL), (v14 & 1) != 0)
              && (sub_10000F680(v13),
                  (sub_10000F690( (uint64_t)v26,  (uint64_t)&v27,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Bool) & 1) != 0))
            {
              char v15 = v26[0];
              sub_10000ADB0();
              if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0) {
                goto LABEL_13;
              }
            }

            else
            {
              sub_10000ADB0();
              char v15 = 0;
              if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
              {
LABEL_13:
                sub_10000F698();
                unsigned __int8 v6 = v16;
              }
            }

            unint64_t v17 = v6[2];
            if (v17 >= v6[3] >> 1)
            {
              sub_10000F698();
              unsigned __int8 v6 = v19;
            }

            v6[2] = v17 + 1;
            unint64_t v18 = &v6[3 * v17];
            void v18[4] = v11;
            v18[5] = v12;
            *((_BYTE *)v18 + 48) = v15;
            uint64_t v7 = (char *)&type metadata for Any + 8;
            goto LABEL_19;
          }
        }

        sub_10000ADB0();
      }

uint64_t sub_10000F2A0()
{
  return sub_10000F2C0();
}

uint64_t sub_10000F2C0()
{
  return sub_1000B25D4(v0);
}

uint64_t sub_10000F2C8()
{
  return sub_10000EBAC() & 1;
}

uint64_t sub_10000F2EC()
{
  return sub_10000F30C();
}

uint64_t sub_10000F30C()
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v2 = [v0 localizedNameWithPreferredLocalizations:isa];

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

void sub_10000F37C()
{
}

unint64_t sub_10000F39C()
{
  unint64_t result = qword_100131800;
  if (!qword_100131800)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNumber);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100131800);
  }

  return result;
}

uint64_t sub_10000F3D8(uint64_t a1)
{
  uint64_t v2 = sub_100008DB0(&qword_100130EA0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

id sub_10000F418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id result = [(id)objc_opt_self(AFLocalization) sharedInstance];
  if (result)
  {
    uint64_t v12 = result;
    uint64_t v13 = sub_10000F5A4(a1, a2, 0x73696C506F666E49LL, 0xE900000000000074LL, a4, a5, a6, result);
    uint64_t v15 = v14;

    if (v15) {
      return (id)v13;
    }
    swift_bridgeObjectRetain(a2);
    return (id)a1;
  }

  else
  {
    __break(1u);
  }

  return result;
}

unint64_t sub_10000F4F0()
{
  unint64_t result = qword_100131820;
  if (!qword_100131820)
  {
    uint64_t v1 = type metadata accessor for URL(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_100131820);
  }

  return result;
}

uint64_t sub_10000F530(void *a1)
{
  id v1 = [a1 infoDictionary];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  return v3;
}

id sub_10000F598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000F418(a1, a2, a3, v3[2], v3[3], v3[4]);
}

uint64_t sub_10000F5A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [a8 localizedStringForKey:v11 table:v12 bundle:a5 languageCode:v13];

  if (!v14) {
    return 0LL;
  }
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);

  return v15;
}

uint64_t sub_10000F680(uint64_t a1)
{
  return sub_10000C194(*(void *)(v1 + 56) + 32 * a1, v2 - 112);
}

uint64_t sub_10000F690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 6LL);
}

void sub_10000F698()
{
}

uint64_t sub_10000F6A4()
{
  return v2(v1, v0);
}

uint64_t sub_10000F6B0()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

id sub_10000F6BC()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "init");
}

id _LNMetadataProviderDirect.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ObservationStatusRegistry()
{
  return objc_opt_self(&OBJC_CLASS____TtC10LinkDaemon25ObservationStatusRegistry);
}

uint64_t sub_10000F764()
{
  id v0 = (id)AFPreferencesMobileUserSessionLanguage();
  if (!v0) {
    return 0LL;
  }
  uint64_t v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);

  return v2;
}

ValueMetadata *type metadata accessor for PlatformAssistantIntentGenerator()
{
  return &type metadata for PlatformAssistantIntentGenerator;
}

uint64_t sub_10000F7CC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A07C(v0, qword_100135028);
  sub_100008D98(v0, (uint64_t)qword_100135028);
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    uint64_t v2 = String.init(cString:)(LNLogSubsystem);
    return Logger.init(subsystem:category:)(v2, v3, 0xD000000000000020LL, 0x80000001000F5520LL);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_10000F848(uint64_t a1, unint64_t a2, void *a3, unint64_t a4)
{
  v208 = _swiftEmptyArrayStorage;
  if (a4 >> 62) {
    goto LABEL_190;
  }
  uint64_t v4 = *(void *)((a4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v5 = v4;
  if (!v4)
  {
LABEL_178:
    swift_bridgeObjectRelease();
    if (qword_1001300A0 != -1) {
      swift_once(&qword_1001300A0, sub_10000F7CC);
    }
    uint64_t v179 = type metadata accessor for Logger(0LL);
    sub_100008D98(v179, (uint64_t)qword_100135028);
    v180 = v208;
    sub_100011A3C((uint64_t)v208);
    uint64_t v181 = sub_100011A3C(a2);
    v182 = (os_log_s *)Logger.logObject.getter(v181);
    os_log_type_t v183 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v182, v183))
    {
      uint64_t v184 = swift_slowAlloc(22LL, -1LL);
      uint64_t v185 = swift_slowAlloc(32LL, -1LL);
      v207[0] = v185;
      *(_DWORD *)uint64_t v184 = 134218242;
      uint64_t v186 = v180[2];
      swift_bridgeObjectRelease();
      uint64_t v206 = v186;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v206, v207, v184 + 4, v184 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v184 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v206 = sub_10000DE60(a1, a2, v207);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v206, v207, v184 + 14, v184 + 22);
      swift_bridgeObjectRelease_n(a2, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v182,  v183,  "Generated %ld AssistantIntents on behalf of %s",  (uint8_t *)v184,  0x16u);
      swift_arrayDestroy(v185, 1LL);
      sub_10000AD78(v185);
      sub_10000AD78(v184);
    }

    else
    {

      sub_10001191C(a2);
      sub_10001191C((uint64_t)v208);
    }

    swift_beginAccess(&v208, v207, 0LL, 0LL);
    return;
  }

LABEL_3:
  uint64_t v202 = v5;
  objc_opt_self(&OBJC_CLASS___LNSystemProtocol);
  unint64_t v6 = 0LL;
  v193 = (void *)LNSystemEntityProtocolIdentifierUniqueEntity;
  v196 = (void *)LNSystemProtocolIdentifierPropertyUpdater;
  v195 = (void *)LNSystemProtocolIdentifierEntityUpdating;
  uint64_t v7 = &selRef_isLowPowerDeviceEnabled;
  while (1)
  {
    if ((a4 & 0xC000000000000001LL) != 0)
    {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a4);
    }

    else
    {
      if (v6 >= *(void *)((a4 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
        goto LABEL_186;
      }
      id v8 = *(id *)(a4 + 32 + 8 * v6);
    }

    uint64_t v9 = v8;
    BOOL v10 = __OFADD__(v6, 1LL);
    unint64_t v11 = v6 + 1;
    if (v10)
    {
      __break(1u);
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
LABEL_187:
      __break(1u);
LABEL_188:
      __break(1u);
LABEL_189:
      __break(1u);
LABEL_190:
      swift_bridgeObjectRetain();
      uint64_t v5 = sub_100011A50();
      if (!v5) {
        goto LABEL_178;
      }
      goto LABEL_3;
    }

    id v12 = sub_100011ADC((uint64_t)v8, v7[38]);
    sub_10000A1A0(0LL, (unint64_t *)&qword_100130BA0, &OBJC_CLASS___LNSystemProtocol_ptr);
    uint64_t v13 = sub_100011A94((uint64_t)v12);

    id v15 = sub_100011A6C(v14, "entityUpdatingProtocol");
    if ((unint64_t)v13 >> 62)
    {
      if (v13 < 0) {
        uint64_t v153 = v13;
      }
      else {
        uint64_t v153 = v13 & 0xFFFFFFFFFFFFFF8LL;
      }
      sub_10000AFB0();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v153);
    }

    else
    {
      uint64_t v16 = *(void *)((v13 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      sub_10000AFB0();
    }

    unint64_t v204 = v11;
    v205 = v9;
    if (v16)
    {
      unint64_t v17 = v13 & 0xC000000000000001LL;
      if ((v13 & 0xC000000000000001LL) != 0) {
        id v18 = (id)sub_100011944(0LL);
      }
      else {
        id v18 = *(id *)(v13 + 32);
      }
      sub_10001194C((uint64_t)v18);
      sub_100011A1C();
      if (v16 != 1)
      {
        if (v17) {
          id v21 = (id)sub_100011944(1LL);
        }
        else {
          id v21 = *(id *)(v13 + 40);
        }
        sub_10001194C((uint64_t)v21);
        sub_100011A1C();
        uint64_t v19 = v9;
        if (v16 != 2)
        {
          uint64_t v22 = 6LL;
          while (1)
          {
            if (v17) {
              id v23 = (id)sub_100011944(v22 - 4);
            }
            else {
              id v23 = *(id *)(v13 + 8 * v22);
            }
            uint64_t v9 = v23;
            uint64_t v24 = v22 - 3;
            if (__OFADD__(v22 - 4, 1LL)) {
              goto LABEL_185;
            }
            char v25 = sub_100011AE4();

            if ((v25 & 1) != 0) {
              break;
            }
            ++v22;
            BOOL v67 = v24 == v16;
            uint64_t v7 = &selRef_isLowPowerDeviceEnabled;
            if (v67) {
              goto LABEL_31;
            }
          }

          uint64_t v7 = &selRef_isLowPowerDeviceEnabled;
LABEL_15:
          uint64_t v19 = v205;
LABEL_16:

          uint64_t v20 = sub_10001191C(v13);
          goto LABEL_32;
        }
      }
    }

  uint64_t v14 = 0LL;
  id v15 = v82;
  uint64_t v81 = v82 & 0xC000000000000001LL;
  uint64_t v79 = v82 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v16 = _swiftEmptyArrayStorage;
  id v78 = v82 + 32;
  v97 = v7;
  id v80 = result;
  while (1)
  {
    if (v81)
    {
      unint64_t v17 = v14;
      id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v15);
    }

    else
    {
      if (v14 >= *(void *)(v79 + 16))
      {
        __break(1u);
        return result;
      }

      unint64_t v17 = v14;
      id v18 = *(id *)(v78 + 8 * v14);
    }

    uint64_t v84 = v18;
    uint64_t v19 = __OFADD__(v17, 1LL);
    uint64_t v20 = (void *)(v17 + 1);
    if (v19)
    {
LABEL_53:
      __break(1u);
LABEL_54:
      swift_bridgeObjectRetain();
      uint64_t result = (void *)sub_100011A50();
      if (!result) {
        goto LABEL_55;
      }
      goto LABEL_3;
    }

    uint64_t v83 = v20;
    id v21 = [v84 basePhraseTemplateSubstitutions];
    uint64_t v22 = sub_100027FB8();
    id v23 = sub_10000A1A0(v22, (unint64_t *)&unk_1001328C0, &OBJC_CLASS___LNBasePhraseTemplateSubstitution_ptr);
    sub_100011A9C(v23);
    sub_100028040();
    uint64_t v24 = v7;
    uint64_t v89 = v7;
    if (v7 >> 62) {
      break;
    }
    char v25 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v25) {
      goto LABEL_11;
    }
LABEL_43:

    uint64_t result = (void *)swift_bridgeObjectRelease();
    uint64_t v14 = (unint64_t)v83;
    id v15 = v82;
    if (v83 == v80) {
      goto LABEL_50;
    }
  }

  swift_bridgeObjectRetain();
  char v25 = sub_100011A50();
  swift_bridgeObjectRelease();
  uint64_t v24 = v89;
  if (!v25) {
    goto LABEL_43;
  }
LABEL_11:
  uint64_t v26 = 0LL;
  char v88 = v24 & 0xC000000000000001LL;
  id v86 = v24 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v85 = v24 + 32;
  char v87 = v25;
  while (1)
  {
    if (v88)
    {
      id v27 = v26;
      unint64_t v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v26, v24);
    }

    else
    {
      if (v26 >= *(void *)(v86 + 16)) {
        goto LABEL_52;
      }
      id v27 = v26;
      unint64_t v28 = *(id *)(v85 + 8 * v26);
    }

    id v102 = v28;
    uint64_t v19 = __OFADD__(v27, 1LL);
    uint64_t v29 = v27 + 1;
    if (v19)
    {
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }

    id v90 = v29;
    id v30 = [v102 parameterSubstitutions];
    char v31 = sub_100027FB8();
    id v32 = sub_10000A1A0(v31, &qword_100131248, &OBJC_CLASS___LNParameterSubstitution_ptr);
    sub_100011A9C(v32);
    sub_100028040();
    if (v7 >> 62) {
      break;
    }
    uint64_t v33 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v33) {
      goto LABEL_19;
    }
LABEL_42:

    sub_10000ADB0();
    uint64_t v24 = v89;
    uint64_t v26 = v90;
    if (v90 == v87) {
      goto LABEL_43;
    }
  }

  sub_10000AE38();
  uint64_t v33 = sub_100011A50();
  sub_10000ADB0();
  if (!v33) {
    goto LABEL_42;
  }
LABEL_19:
  uint64_t v34 = 0LL;
  uint64_t v94 = v7;
  v95 = v7 & 0xC000000000000001LL;
  id v91 = v7 + 32;
  id v92 = v7 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v93 = v33;
  while (1)
  {
    if (v95)
    {
      id v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v7);
    }

    else
    {
      if (v34 >= *(void *)(v92 + 16)) {
        goto LABEL_49;
      }
      id v35 = *(id *)(v91 + 8 * v34);
    }

    uint64_t v106 = v35;
    uint64_t v19 = __OFADD__(v34, 1LL);
    uint64_t v36 = v34 + 1;
    if (v19) {
      break;
    }
    char v37 = [v106 substitutionValues];
    uint64_t v38 = sub_100027FB8();
    uint64_t v39 = sub_10000A1A0(v38, &qword_1001328D0, &OBJC_CLASS___LNSubstitutionValue_ptr);
    sub_100011A9C(v39);
    sub_100028040();
    if (v7 >> 62)
    {
      sub_10000AE38();
      uint64_t v40 = sub_100011A50();
      sub_10000ADB0();
    }

    else
    {
      uint64_t v40 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    id v96 = v36;
    if (v40)
    {
      if (v40 < 1) {
        goto LABEL_48;
      }
      uint64_t v41 = 0LL;
      uint64_t v103 = v7 & 0xC000000000000001LL;
      uint64_t v104 = v40;
      uint64_t v105 = v7;
      do
      {
        id v109 = v16;
        if (v103) {
          id v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v41, v7);
        }
        else {
          id v42 = *(id *)(v7 + 8 * v41 + 32);
        }
        uint64_t v43 = v42;
        uint64_t v44 = [v42 parameterIdentifier];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v44);

        id v45 = v101;
        sub_10000AFB0();
        uint64_t v46 = sub_100028048((uint64_t)[v102 basePhraseTemplate]);
        id v107 = v47;
        uint64_t v108 = v46;

        id v49 = sub_100028058(v48, "title");
        uint64_t v50 = sub_100028058((uint64_t)v49, "titleKey");
        uint64_t v51 = sub_100028048((uint64_t)v50);
        uint64_t v53 = v52;

        unint64_t v54 = (uint64_t)v11;
        id v55 = sub_100028048((uint64_t)[v106 parameterIdentifier]);
        uint64_t v57 = v56;

        uint64_t v59 = sub_100028058(v58, "value");
        uint64_t v60 = objc_allocWithZone(&OBJC_CLASS___LNProperty);
        uint64_t v61 = v55;
        unint64_t v11 = (char *)v54;
        uint64_t v62 = sub_1000BF7D0(v61, v57, v59);
        id v63 = v99;
        uint64_t v64 = (void *)(v54 + v99[5]);
        *uint64_t v64 = v100;
        v64[1] = v45;
        uint64_t v65 = (uint64_t *)(v54 + v63[6]);
        uint64_t v66 = v107;
        char *v65 = v108;
        v65[1] = v66;
        *(void *)(v54 + v63[7]) = v49;
        BOOL v67 = (uint64_t *)(v54 + v63[8]);
        *BOOL v67 = v51;
        v67[1] = v53;
        *(void *)(v54 + v63[9]) = v62;
        *(void *)(v54 + v63[10]) = 0LL;
        char v68 = (void *)(v54 + v63[11]);
        char *v68 = 0LL;
        v68[1] = 0LL;
        id v69 = v97;
        sub_100025B9C(v54, v97);
        uint64_t v16 = v109;
        if ((swift_isUniquelyReferenced_nonNull_native(v109) & 1) == 0)
        {
          sub_100027F90();
          sub_100014280();
          uint64_t v16 = v75;
        }

        uint64_t v70 = v104;
        id v72 = v16[2];
        uint64_t v71 = v16[3];
        if (v72 >= v71 >> 1)
        {
          sub_100028094(v71);
          sub_100014280();
          uint64_t v16 = v76;
        }

        ++v41;
        v16[2] = v72 + 1;
        sub_100027E74();
        sub_100025EC8(v69, (uint64_t)v16 + v73 + *(void *)(v74 + 72) * v72);

        sub_100025FA0();
        uint64_t v7 = v105;
      }

      while (v70 != v41);
    }

    sub_10000ADB0();
    uint64_t v7 = v94;
    uint64_t v34 = v96;
    if (v96 == v93) {
      goto LABEL_42;
    }
  }

  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  swift_bridgeObjectRelease();
  return v16;
}

  v28[0] = _swiftEmptyArrayStorage;
  uint64_t v3 = v28;
  sub_10004533C();
  if (v2 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v4 = 0LL;
  uint64_t v3 = (void *)v28[0];
  uint64_t v26 = v1 & 0xC000000000000001LL;
  char v31 = v1;
  do
  {
    if (v26) {
      uint64_t v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v1);
    }
    else {
      uint64_t v5 = *(id *)(v1 + 8 * v4 + 32);
    }
    unint64_t v6 = v5;
    uint64_t v7 = [v5 actionIdentifier];
    id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    BOOL v10 = v9;

    unint64_t v11 = [v6 bundleIdentifier];
    id v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v14 = v13;

    v28[0] = v3;
    id v15 = v3[2];
    if (v15 >= v3[3] >> 1)
    {
      sub_10004533C();
      uint64_t v3 = (void *)v28[0];
    }

    ++v4;
    v3[2] = v15 + 1;
    uint64_t v16 = &v3[4 * v15];
    void v16[4] = v8;
    v16[5] = v10;
    v16[6] = v12;
    v16[7] = v14;
    uint64_t v1 = v31;
  }

  while (v2 != v4);
LABEL_11:
  if (qword_100130140 != -1) {
LABEL_24:
  }
    swift_once(&qword_100130140, sub_100035108);
  unint64_t v17 = qword_100135318;
  id v18 = (void *)unk_100135320;
  uint64_t v19 = qword_100135328;
  if (qword_100130138 != -1) {
    swift_once(&qword_100130138, sub_1000350E4);
  }
  sub_100034D18(v17, v18, v19, qword_100135300, *(void **)algn_100135308, qword_100135310, (uint64_t)v3);
  sub_10000ADB0();
  sub_1000351C8((uint64_t)v28);
  uint64_t v20 = v29;
  id v21 = v30;
  sub_100008D74(v28, v29);
  v27[3] = v20;
  v27[4] = v21;
  sub_10001AFA8(v27);
  QueryType.filter(_:)();
  sub_10001BE7C();
  sub_10001BC70();
  uint64_t v22 = sub_100035AB0(v27);
  sub_10000AC58(v27);
  sub_10000AC58(v28);
  return (void *)v22;
}

LABEL_31:
    uint64_t v26 = sub_10001191C(v13);
    uint64_t v19 = v205;
    id v27 = sub_100011930(v26, v7[38]);
    unint64_t v28 = sub_100011A94((uint64_t)v27);

    id v30 = sub_100011A6C(v29, "propertyUpdaterProtocol");
    char v31 = sub_10003AC94((uint64_t)v30, v28);
    sub_100011958();

    if ((v31 & 1) == 0)
    {
      id v49 = sub_100011930(v20, v7[38]);
      uint64_t v50 = sub_100011A94((uint64_t)v49);

      id v52 = sub_100011A6C(v51, "openEntitySystemProtocol");
      if ((unint64_t)v50 >> 62)
      {
        if (v50 < 0) {
          uint64_t v154 = v50;
        }
        else {
          uint64_t v154 = v50 & 0xFFFFFFFFFFFFFF8LL;
        }
        sub_10000AFB0();
        uint64_t v53 = _CocoaArrayWrapper.endIndex.getter(v154);
        if (!v53)
        {
LABEL_102:

          sub_10001191C(v50);
          goto LABEL_176;
        }
      }

      else
      {
        uint64_t v53 = *(void *)((v50 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        sub_10000AFB0();
        if (!v53) {
          goto LABEL_102;
        }
      }

      unint64_t v54 = v50 & 0xC000000000000001LL;
      if ((v50 & 0xC000000000000001LL) != 0) {
        id v55 = (id)sub_100011944(0LL);
      }
      else {
        id v55 = *(id *)(v50 + 32);
      }
      sub_10001194C((uint64_t)v55);
      sub_100011A1C();
      uint64_t v56 = v205;
      if ((v9 & 1) == 0)
      {
        if (v53 == 1) {
          goto LABEL_102;
        }
        id v147 = v54 ? (id)sub_100011944(1LL) : *(id *)(v50 + 40);
        sub_10001194C((uint64_t)v147);
        sub_100011A1C();
        uint64_t v56 = v205;
        if ((v9 & 1) == 0)
        {
          if (v53 == 2) {
            goto LABEL_102;
          }
          uint64_t v148 = 6LL;
          while (1)
          {
            if (v54) {
              id v149 = (id)sub_100011944(v148 - 4);
            }
            else {
              id v149 = *(id *)(v50 + 8 * v148);
            }
            v150 = v149;
            uint64_t v151 = v148 - 3;
            if (__OFADD__(v148 - 4, 1LL)) {
              goto LABEL_188;
            }
            char v152 = sub_100011AE4();

            if ((v152 & 1) != 0) {
              break;
            }
            ++v148;
            BOOL v67 = v151 == v53;
            uint64_t v7 = &selRef_isLowPowerDeviceEnabled;
            if (v67) {
              goto LABEL_102;
            }
          }

          uint64_t v7 = &selRef_isLowPowerDeviceEnabled;
          uint64_t v56 = v205;
        }
      }

      uint64_t v57 = sub_10001191C(v50);
      id v58 = sub_100011930(v57, "parameters");
      uint64_t v59 = sub_10000A1A0(0LL, &qword_100130BA8, &OBJC_CLASS___LNActionParameterMetadata_ptr);
      uint64_t v60 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v58, v59);

      unint64_t v6 = v204;
      if (!((unint64_t)v60 >> 62))
      {
        uint64_t v61 = *(void *)((v60 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        if (v61) {
          goto LABEL_45;
        }
LABEL_142:

        goto LABEL_143;
      }

      if (v60 < 0) {
        uint64_t v155 = v60;
      }
      else {
        uint64_t v155 = v60 & 0xFFFFFFFFFFFFFF8LL;
      }
      sub_10000AFB0();
      uint64_t v61 = _CocoaArrayWrapper.endIndex.getter(v155);
      sub_10001198C();
      if (!v61) {
        goto LABEL_142;
      }
LABEL_45:
      if (v61 >= 1)
      {
        uint64_t v62 = 0LL;
        while (1)
        {
          if ((v60 & 0xC000000000000001LL) != 0) {
            id v63 = (id)sub_100011944(v62);
          }
          else {
            id v63 = *(id *)(v60 + 8 * v62 + 32);
          }
          uint64_t v64 = v63;
          uint64_t v65 = sub_10003E5D0(v63);
          if (!v66) {
            goto LABEL_71;
          }
          BOOL v67 = v65 == 0x746567726174LL && v66 == 0xE600000000000000LL;
          if (v67)
          {
            sub_10000ADB0();
          }

          else
          {
            char v68 = sub_100011974(v65, v66);
            sub_10000ADB0();
            if ((v68 & 1) == 0) {
              goto LABEL_71;
            }
          }

          id v69 = objc_msgSend(v64, "valueType", v187);
          uint64_t v70 = objc_opt_self(&OBJC_CLASS___LNEntityValueType);
          uint64_t v71 = (void *)sub_100011AA8(v70);
          if (!v71)
          {

            goto LABEL_68;
          }

          id v72 = [v71 identifier];
          uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
          uint64_t v75 = v74;

          if (!a3[2] || (uint64_t v76 = sub_100015F98(v73, v75), (v77 & 1) == 0))
          {

            goto LABEL_65;
          }

          id v78 = *(id *)(a3[7] + 8 * v76);
          uint64_t v79 = swift_bridgeObjectRelease();
          id v80 = sub_100011ADC(v79, "systemProtocolMetadata");
          type metadata accessor for LNSystemEntityProtocolIdentifier(0LL);
          uint64_t v82 = v81;
          uint64_t v83 = sub_100008DB0((uint64_t *)&unk_100130600);
          uint64_t v84 = sub_1000118A0( &qword_1001308D0,  (uint64_t (*)(uint64_t))type metadata accessor for LNSystemEntityProtocolIdentifier,  (uint64_t)&unk_1000F5164);
          uint64_t v85 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v80, v82, v83, v84);

          if (!*(void *)(v85 + 16))
          {

LABEL_65:
            swift_bridgeObjectRelease();
LABEL_66:
            uint64_t v56 = v205;
LABEL_68:
            id v99 = [v64 valueType];
            uint64_t v100 = objc_opt_self(&OBJC_CLASS___LNLinkEnumerationValueType);
            if (swift_dynamicCastObjCClass(v99, v100))
            {

              id v102 = sub_100011930(v101, "identifier");
              uint64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(v102);
              uint64_t v105 = v104;

              sub_100011088(a1, a2, v103, v105, 0LL);
              swift_bridgeObjectRelease();
              sub_100042710();
            }

            else
            {

              uint64_t v64 = v99;
            }

            goto LABEL_71;
          }

          id v86 = v193;
          sub_100015FAC(v86);
          char v88 = v87;
          sub_10000ADB0();

          if ((v88 & 1) == 0)
          {

            goto LABEL_66;
          }

          id v90 = sub_100011ADC(v89, "displayRepresentation");
          id v91 = [v90 name];

          id v92 = [v205 identifier];
          uint64_t v197 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
          uint64_t v94 = v93;

          v95 = v91;
          id v96 = v91;
          v97 = v78;
          id v98 = v96;
          sub_100011088(a1, a2, v197, v94, v95);
          uint64_t v56 = v205;
          swift_bridgeObjectRelease();

          sub_100042710();
LABEL_71:
          ++v62;

          if (v61 == v62)
          {

            sub_10001198C();
            uint64_t v146 = v202;
            unint64_t v6 = v204;
            uint64_t v7 = &selRef_isLowPowerDeviceEnabled;
            goto LABEL_177;
          }
        }
      }

      goto LABEL_189;
    }

  __break(1u);
  return result;
}

        BOOL v67 = (uint64_t)_swiftEmptyArrayStorage;
        uint64_t v60 = *(void *)(v12 + 16);
        if (!v60)
        {
          sub_10001DF40();
LABEL_50:
          sub_10001BC70();
          sub_10000AEE8();
          return (void *)v67;
        }

        v57[0] = v12;
        v57[1] = v17;
        uint64_t v59 = v12 + 32;
        uint64_t v13 = v11 + 32;
        swift_bridgeObjectRetain();
        unint64_t v28 = 0LL;
        id v58 = a4;
        while (1)
        {
          uint64_t v65 = v57;
          uint64_t v29 = *(void *)(v59 + 8 * v28);
          uint64_t v66 = _swiftEmptyArrayStorage;
          sub_10001C1BC();
          swift_bridgeObjectRetain();
          specialized ContiguousArray.reserveCapacity(_:)(0LL);
          id v12 = *(void *)(v11 + 16);
          a4 = (void *)v11;
          sub_10001C1BC();
          if (v12) {
            break;
          }
LABEL_43:
          unint64_t v11 = (uint64_t)a4;
          sub_10001BEC0();
          char v37 = v66;
          swift_bridgeObjectRelease(v29);
          sub_10001BEC0();
          uint64_t v38 = sub_10006AE78(v61, v62, v63, v58);
          swift_release(v37);
          if (v38)
          {
            uint64_t v39 = v38;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            uint64_t v41 = *(void *)((v67 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            uint64_t v40 = *(void *)((v67 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v41 >= v40 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1LL);
            }
            id v42 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v41, v39);
            specialized Array._endMutation()(v42);
          }

          if (++v28 == v60)
          {
            sub_10001BC70();
            sub_10001DF40();
            goto LABEL_50;
          }
        }

        id v30 = 0LL;
        unint64_t v11 = v29 + 32;
        while (v30 < *(void *)(v29 + 16))
        {
          char v31 = *(void *)(v13 + 8 * v30);
          id v32 = *(void *)(v11 + 8 * v30);
          if ((v31 & 0xC000000000000001LL) != 0)
          {
            sub_10000AE38();
            uint64_t v34 = specialized _ArrayBuffer._getElementSlowPath(_:)(v32, v31);
            uint64_t v33 = sub_10000ADB0();
          }

          else
          {
            if ((v32 & 0x8000000000000000LL) != 0) {
              goto LABEL_61;
            }
            if (v32 >= *(void *)((v31 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
              goto LABEL_62;
            }
            uint64_t v33 = (uint64_t)sub_10003F0A0(v31 + 8 * v32);
            uint64_t v34 = v33;
          }

          ++v30;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v33);
          id v35 = v66[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v35);
          uint64_t v36 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v35, v34);
          specialized ContiguousArray._endMutation()(v36);
          if (v12 == v30) {
            goto LABEL_43;
          }
        }

        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }

    id v8 = v18;
LABEL_32:
    if (v8 >= v3) {
      goto LABEL_41;
    }
    if (__OFSUB__(v8, v10)) {
      goto LABEL_143;
    }
    if (v8 - v10 >= v103) {
      goto LABEL_41;
    }
    if (__OFADD__(v10, v103)) {
      goto LABEL_146;
    }
    if (v10 + v103 >= v3) {
      uint64_t v33 = v3;
    }
    else {
      uint64_t v33 = v10 + v103;
    }
    if (v33 < v10) {
      goto LABEL_147;
    }
    if (v8 == v33)
    {
LABEL_41:
      uint64_t v34 = v107;
    }

    else
    {
      uint64_t v85 = (void *)(v9 + 16 * v8);
      uint64_t v34 = v107;
      do
      {
        id v86 = (uint64_t *)(v9 + 16 * v8);
        char v87 = *v86;
        char v88 = v86[1];
        uint64_t v89 = v10;
        id v90 = v85;
        do
        {
          id v91 = *(v90 - 2);
          id v92 = *(v90 - 1);
          uint64_t v93 = v87 == v91 && v88 == v92;
          if (v93 || (_stringCompareWithSmolCheck(_:_:expecting:)(v87, v88, v91, v92, 1LL) & 1) == 0) {
            break;
          }
          if (!v9) {
            goto LABEL_150;
          }
          char v87 = *v90;
          char v88 = v90[1];
          *(_OWORD *)id v90 = *((_OWORD *)v90 - 1);
          *(v90 - 1) = v88;
          *(v90 - 2) = v87;
          v90 -= 2;
          ++v89;
        }

        while (v8 != v89);
        ++v8;
        v85 += 2;
      }

      while (v8 != v33);
      id v8 = v33;
    }

    if (v8 < v10) {
      goto LABEL_142;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0) {
      uint64_t v34 = sub_10008B000(0LL, *((void *)v34 + 2) + 1LL, 1, v34);
    }
    uint64_t v36 = *((void *)v34 + 2);
    id v35 = *((void *)v34 + 3);
    char v37 = v36 + 1;
    if (v36 >= v35 >> 1) {
      uint64_t v34 = sub_10008B000((char *)(v35 > 1), v36 + 1, 1, v34);
    }
    *((void *)v34 + 2) = v37;
    uint64_t v38 = v34 + 32;
    uint64_t v39 = &v34[16 * v36 + 32];
    *(void *)uint64_t v39 = v10;
    *((void *)v39 + 1) = v8;
    id v107 = v34;
    if (v36) {
      break;
    }
    char v37 = 1LL;
LABEL_90:
    uint64_t v3 = v105;
    if (v8 >= v105) {
      goto LABEL_110;
    }
  }

  while (1)
  {
    uint64_t v40 = v37 - 1;
    if (v37 >= 4)
    {
      id v45 = &v38[16 * v37];
      uint64_t v46 = *((void *)v45 - 8);
      uint64_t v47 = *((void *)v45 - 7);
      uint64_t v51 = __OFSUB__(v47, v46);
      char v48 = v47 - v46;
      if (v51) {
        goto LABEL_127;
      }
      uint64_t v50 = *((void *)v45 - 6);
      id v49 = *((void *)v45 - 5);
      uint64_t v51 = __OFSUB__(v49, v50);
      uint64_t v43 = v49 - v50;
      uint64_t v44 = v51;
      if (v51) {
        goto LABEL_128;
      }
      id v52 = v37 - 2;
      uint64_t v53 = &v38[16 * v37 - 32];
      id v55 = *(void *)v53;
      unint64_t v54 = *((void *)v53 + 1);
      uint64_t v51 = __OFSUB__(v54, v55);
      uint64_t v56 = v54 - v55;
      if (v51) {
        goto LABEL_129;
      }
      uint64_t v51 = __OFADD__(v43, v56);
      uint64_t v57 = v43 + v56;
      if (v51) {
        goto LABEL_131;
      }
      if (v57 >= v48)
      {
        uint64_t v75 = &v38[16 * v40];
        char v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        uint64_t v51 = __OFSUB__(v76, v77);
        id v78 = v76 - v77;
        if (v51) {
          goto LABEL_137;
        }
        char v68 = v43 < v78;
        goto LABEL_79;
      }
    }

    else
    {
      if (v37 != 3)
      {
        id v69 = *((void *)v34 + 4);
        uint64_t v70 = *((void *)v34 + 5);
        uint64_t v51 = __OFSUB__(v70, v69);
        uint64_t v62 = v70 - v69;
        id v63 = v51;
        goto LABEL_73;
      }

      id v42 = *((void *)v34 + 4);
      uint64_t v41 = *((void *)v34 + 5);
      uint64_t v51 = __OFSUB__(v41, v42);
      uint64_t v43 = v41 - v42;
      uint64_t v44 = v51;
    }

    if ((v44 & 1) != 0) {
      goto LABEL_130;
    }
    id v52 = v37 - 2;
    id v58 = &v38[16 * v37 - 32];
    uint64_t v60 = *(void *)v58;
    uint64_t v59 = *((void *)v58 + 1);
    uint64_t v61 = __OFSUB__(v59, v60);
    uint64_t v62 = v59 - v60;
    id v63 = v61;
    if (v61) {
      goto LABEL_132;
    }
    uint64_t v64 = &v38[16 * v40];
    uint64_t v66 = *(void *)v64;
    uint64_t v65 = *((void *)v64 + 1);
    uint64_t v51 = __OFSUB__(v65, v66);
    BOOL v67 = v65 - v66;
    if (v51) {
      goto LABEL_134;
    }
    if (__OFADD__(v62, v67)) {
      goto LABEL_136;
    }
    if (v62 + v67 >= v43)
    {
      char v68 = v43 < v67;
LABEL_79:
      if (v68) {
        uint64_t v40 = v52;
      }
      goto LABEL_81;
    }

LABEL_32:
    id v32 = sub_100011930(v20, "systemProtocolMetadata");
    type metadata accessor for LNSystemProtocolIdentifier(0LL);
    uint64_t v33 = sub_100008DB0((uint64_t *)&unk_100130600);
    sub_1000118A0( &qword_100130BB0,  (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier,  (uint64_t)&unk_1000F52F8);
    uint64_t v34 = sub_1000119FC((uint64_t)v32);

    if (!*(void *)(v34 + 16)) {
      goto LABEL_76;
    }
    id v35 = v196;
    uint64_t v36 = sub_100015FAC(v35);
    if ((v37 & 1) == 0)
    {

LABEL_76:
      uint64_t v106 = sub_10000ADB0();
      goto LABEL_77;
    }

    uint64_t v38 = *(void *)(*(void *)(v34 + 56) + 8 * v36);
    swift_unknownObjectRetain(v38);

    sub_10000ADB0();
    uint64_t v39 = objc_opt_self(&OBJC_CLASS___LNPropertyUpdaterSystemProtocolMetadata);
    uint64_t v40 = (void *)sub_100011AA8(v39);
    if (v40)
    {
      uint64_t v41 = v40;
      id v42 = [v40 entityIdentifier];
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      id v45 = v44;

      else {
        uint64_t v46 = 0LL;
      }
      sub_10001198C();
      uint64_t v194 = sub_100011A74((uint64_t)[v41 entityProperty]);
      uint64_t v198 = v122;
      swift_unknownObjectRelease(v38);

      if (!v46)
      {

        goto LABEL_107;
      }

      id v121 = v46;
      goto LABEL_88;
    }

    uint64_t v106 = swift_unknownObjectRelease(v38);
LABEL_77:
    id v107 = sub_100011930(v106, "systemProtocolMetadata");
    uint64_t v108 = sub_1000119FC((uint64_t)v107);

    if (!*(void *)(v108 + 16)) {
      goto LABEL_84;
    }
    id v109 = v195;
    uint64_t v110 = sub_100015FAC(v109);
    if ((v111 & 1) == 0)
    {

LABEL_84:
      sub_10000ADB0();

LABEL_176:
      uint64_t v146 = v202;
      unint64_t v6 = v204;
      goto LABEL_177;
    }

    uint64_t v112 = *(void *)(*(void *)(v108 + 56) + 8 * v110);
    swift_unknownObjectRetain(v112);

    sub_10000ADB0();
    uint64_t v113 = objc_opt_self(&OBJC_CLASS___LNEntityUpdatingSystemProtocolMetadata);
    v114 = (void *)swift_dynamicCastObjCClass(v112, v113);
    if (!v114)
    {

      sub_100011A58();
LABEL_107:
      swift_bridgeObjectRelease();
      goto LABEL_176;
    }

    id v115 = [v114 entityIdentifier];
    uint64_t v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
    uint64_t v118 = v117;

    if (!a3[2] || (uint64_t v46 = a3, v119 = sub_100015F98(v116, v118), (v120 & 1) == 0))
    {

      sub_100011958();
      sub_100011A58();
      goto LABEL_176;
    }

    id v121 = sub_100011A60(v119);
    sub_100011958();
    sub_100011A58();
    uint64_t v194 = 0LL;
    uint64_t v198 = 0LL;
LABEL_88:
    id v123 = v121;
    id v124 = [v123 systemProtocolMetadata];
    type metadata accessor for LNSystemEntityProtocolIdentifier(0LL);
    uint64_t v126 = v125;
    uint64_t v127 = sub_1000118A0( &qword_1001308D0,  (uint64_t (*)(uint64_t))type metadata accessor for LNSystemEntityProtocolIdentifier,  (uint64_t)&unk_1000F5164);
    uint64_t v128 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v124, v126, v33, v127);

    if (*(void *)(v128 + 16)) {
      break;
    }

    sub_10000ADB0();
    unint64_t v6 = v204;
LABEL_112:

LABEL_143:
    swift_bridgeObjectRelease();
    uint64_t v146 = v202;
LABEL_177:
    if (v6 == v146) {
      goto LABEL_178;
    }
  }

  id v129 = v193;
  sub_100015FAC(v129);
  char v131 = v130;
  sub_10000ADB0();

  unint64_t v6 = v204;
  if ((v131 & 1) == 0)
  {

    goto LABEL_112;
  }

  v192 = v123;
  v191 = v46;
  id v133 = sub_100011930(v132, "parameters");
  uint64_t v134 = sub_10000A1A0(0LL, &qword_100130BA8, &OBJC_CLASS___LNActionParameterMetadata_ptr);
  uint64_t v135 = sub_100011A9C(v134);

  if (!((unint64_t)v135 >> 62))
  {
    uint64_t v136 = *(void *)((v135 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v136) {
      goto LABEL_92;
    }
LABEL_148:
    sub_100011958();
    v138 = _swiftEmptyArrayStorage;
LABEL_149:
    v156 = sub_10001093C((uint64_t)v138);
    id v157 = sub_100011930((uint64_t)v156, "identifier");
    uint64_t v189 = sub_100011A74((uint64_t)v157);
    uint64_t v190 = v158;

    id v160 = sub_100011ABC(v159, "identifier");
    uint64_t v188 = sub_100011A74((uint64_t)v160);
    uint64_t v162 = v161;

    id v164 = sub_100011ABC(v163, "properties");
    uint64_t v165 = sub_10000A1A0(0LL, &qword_100130BB8, &OBJC_CLASS___LNPropertyMetadata_ptr);
    unint64_t v166 = sub_100011A9C(v165);

    if (!(v166 >> 62))
    {
      uint64_t v167 = *(void *)((v166 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain();
      if (v167) {
        goto LABEL_151;
      }
      goto LABEL_174;
    }

    swift_bridgeObjectRetain();
    uint64_t v167 = sub_100011A50();
    if (!v167)
    {
LABEL_174:
      uint64_t v177 = sub_10001191C(v166);
      v170 = 0LL;
      uint64_t v176 = a2;
LABEL_175:
      id v178 = sub_100011ABC(v177, "title");

      sub_1000109C8(a1, v176, v189, v190, v188, v162, v178, (uint64_t)v156);
      sub_10000ADB0();
      sub_100011958();

      swift_bridgeObjectRelease();
      sub_100042710();
      swift_bridgeObjectRelease();

      goto LABEL_176;
    }

      __break(1u);
LABEL_33:
      if (v2 < 0) {
        char v25 = v2;
      }
      else {
        char v25 = v2 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v25);
      if (!v3) {
        goto LABEL_37;
      }
    }

  char v87 = v559 + 1;
  if (__OFADD__(v559, 1LL)) {
    goto LABEL_322;
  }
  if (v87 < v553)
  {
    char v88 = *(void *)(v550 + 8 * v87);
    uint64_t v89 = v559 + 1;
    if (!v88)
    {
      sub_1000762A4();
      if (v90 == v59) {
        goto LABEL_69;
      }
      sub_100076298();
      if (!v88)
      {
        sub_1000762A4();
        if (v90 == v59) {
          goto LABEL_69;
        }
        sub_100076298();
        if (!v88)
        {
          sub_1000762A4();
          if (v90 == v59) {
            goto LABEL_69;
          }
          sub_100076298();
          if (!v88)
          {
            sub_1000762A4();
            if (v90 == v59) {
              goto LABEL_69;
            }
            sub_100076298();
            if (!v88)
            {
              uint64_t v89 = v91 + 5;
              if (v91 + 5 >= v553) {
                goto LABEL_69;
              }
              char v88 = *(void *)(v550 + 8 * v89);
              if (!v88)
              {
                id v92 = v559 + 7;
                do
                {
                  if (v92 >= v553) {
                    goto LABEL_69;
                  }
                  char v88 = *(void *)(v550 + 8 * v92++);
                }

                while (!v88);
                uint64_t v89 = v92 - 1;
              }
            }
          }
        }
      }
    }

    v559 = v89;
    v562 = (v88 - 1) & v88;
    id v86 = __clz(__rbit64(v88)) + (v89 << 6);
    goto LABEL_54;
  }

        uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
      }

      uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
LABEL_22:
      char v31 = v41[v25];
      v41[v25] = v31 & ~v26;
    }

    while ((v26 & v31) == 0);
    id v8 = v40 - 1;
    if (__OFSUB__(v40, 1LL))
    {
LABEL_48:
      __break(1u);
      return result;
    }

    if (v40 != 1) {
      continue;
    }
    return (unint64_t *)&_swiftEmptySetSingleton;
  }

LABEL_151:
    v187 = v156;
    uint64_t v168 = 4LL;
    while (2)
    {
      if ((v166 & 0xC000000000000001LL) != 0) {
        id v169 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v168 - 4, v166);
      }
      else {
        id v169 = *(id *)(v166 + 8 * v168);
      }
      v170 = v169;
      uint64_t v171 = v168 - 3;
      if (__OFADD__(v168 - 4, 1LL)) {
        goto LABEL_187;
      }
      uint64_t v172 = sub_100011840(v169);
      if (v173)
      {
        if (v198)
        {
          if (v172 == v194 && v173 == v198)
          {
            sub_10001191C(v166);
            uint64_t v177 = sub_10001198C();
LABEL_171:
            uint64_t v176 = a2;
LABEL_172:
            uint64_t v19 = v205;
            goto LABEL_175;
          }

          char v175 = _stringCompareWithSmolCheck(_:_:expecting:)(v172, v173, v194, v198, 0LL);
          sub_10001198C();
          if ((v175 & 1) != 0) {
            goto LABEL_169;
          }
LABEL_165:
        }

        else
        {

          sub_10001198C();
        }

        ++v168;
        uint64_t v176 = a2;
        if (v171 == v167)
        {
          uint64_t v177 = sub_10001191C(v166);
          v170 = 0LL;
          goto LABEL_172;
        }

        continue;
      }

      break;
    }

    if (!v198)
    {
LABEL_169:
      uint64_t v177 = sub_10001191C(v166);
      goto LABEL_171;
    }

    goto LABEL_165;
  }

  if (v135 < 0) {
    id v133 = (id)v135;
  }
  else {
    id v133 = (id)(v135 & 0xFFFFFFFFFFFFFF8LL);
  }
  swift_bridgeObjectRetain();
  uint64_t v136 = sub_100011A50();
  sub_100011958();
  if (!v136) {
    goto LABEL_148;
  }
LABEL_92:
  v207[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_1000452A0();
  if ((v136 & 0x8000000000000000LL) == 0)
  {
    uint64_t v137 = 0LL;
    v138 = (void *)v207[0];
    do
    {
      if ((v135 & 0xC000000000000001LL) != 0) {
        id v139 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v137, v135);
      }
      else {
        id v139 = *(id *)(v135 + 8 * v137 + 32);
      }
      v140 = v139;
      id v133 = (id)sub_10003E5D0(v139);
      uint64_t v142 = v141;
      id v143 = [v140 title];

      v207[0] = (uint64_t)v138;
      unint64_t v144 = v138[2];
      if (v144 >= v138[3] >> 1)
      {
        sub_1000452A0();
        v138 = (void *)v207[0];
      }

      ++v137;
      v138[2] = v144 + 1;
      v145 = &v138[3 * v144];
      v145[4] = v133;
      v145[5] = v142;
      v145[6] = v143;
      uint64_t v7 = &selRef_isLowPowerDeviceEnabled;
      uint64_t v19 = v205;
    }

    while (v136 != v137);
    sub_100011958();
    goto LABEL_149;
  }

  __break(1u);
}

void *sub_10001093C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    sub_100008DB0(&qword_100130BF0);
    uint64_t v4 = (void *)static _DictionaryStorage.allocate(capacity:)(v3);
  }

  else
  {
    uint64_t v4 = _swiftEmptyDictionarySingleton;
  }

  uint64_t v7 = v4;
  sub_10001166C(a1, 1, &v7);
  uint64_t v5 = v7;
  if (v1) {
    swift_release();
  }
  return v5;
}

void sub_1000109C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v77 = v13 - v12;
  uint64_t v14 = a8 + 64;
  uint64_t v15 = 1LL << *(_BYTE *)(a8 + 32);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & *(void *)(a8 + 64);
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  sub_10000AFB0();
  int64_t v19 = 0LL;
  uint64_t v83 = _swiftEmptyArrayStorage;
  while (v17)
  {
    unint64_t v20 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    unint64_t v21 = v20 | (v19 << 6);
LABEL_20:
    char v25 = (uint64_t *)(*(void *)(a8 + 48) + 16 * v21);
    uint64_t v26 = v25[1];
    if (v26)
    {
      id v27 = *(void **)(*(void *)(a8 + 56) + 8 * v21);
      if (v27)
      {
        uint64_t v28 = *v25;
        BOOL v29 = *v25 == 0x746567726174LL && v26 == 0xE600000000000000LL;
        if (!v29 && (sub_100011974(*v25, v25[1]) & 1) == 0)
        {
          uint64_t v75 = a6;
          uint64_t v71 = sub_100011A34();
          sub_100009E60(v77, 1LL, 1LL, v71);
          id v30 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
          uint64_t v76 = a7;
          id v72 = v27;
          swift_bridgeObjectRetain();
          sub_100011960();
          id v73 = sub_100086650(v31, v32, v33, v34, v35, v36, v77);
          v88[0] = 0xD000000000000024LL;
          v88[1] = 0x80000001000F9490LL;
          uint64_t v86 = v26;
          v87[0] = 0x65756C6176LL;
          v87[1] = 0xE500000000000000LL;
          uint64_t v85 = v28;
          sub_1000118E0();
          uint64_t v37 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v87,  &v85,  0LL,  0LL,  0LL,  1LL,  type metadata for String,  type metadata for String);
          uint64_t v39 = v38;
          swift_bridgeObjectRelease();
          sub_100009E60(v77, 1LL, 1LL, v71);
          objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
          sub_1000119E4();
          id v40 = sub_100086650(v37, v39, v37, v39, 0LL, 0LL, v77);
          id v41 = v76;
          if (!v76) {
            id v41 = v72;
          }
          char v68 = v41;
          uint64_t v42 = sub_100008DB0(&qword_100130BD0);
          uint64_t v43 = sub_100011A44(v42);
          *(_OWORD *)(v43 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5510;
          *(void *)(v43 + 32) = v73;
          *(void *)(v43 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v40;
          v88[0] = v43;
          specialized Array._endMutation()(v43);
          uint64_t v69 = v88[0];
          uint64_t v44 = sub_100008DB0(&qword_100130BD8);
          uint64_t inited = swift_initStackObject(v44, v84);
          *(_OWORD *)(inited + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
          *(void *)(inited + 32) = 0xD000000000000011LL;
          *(void *)(inited + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = 0x80000001000F94C0LL;
          uint64_t v46 = sub_100011924(v42);
          *(_OWORD *)(v46 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5530;
          *(void *)(v46 + 32) = v68;
          v88[0] = v46;
          id v47 = v76;
          swift_bridgeObjectRetain();
          v73;
          specialized Array._endMutation()(v40);
          *(void *)(inited + 48) = v88[0];
          id v74 = v68;
          uint64_t v48 = sub_100008DB0(&qword_100130BE0);
          uint64_t v49 = Dictionary.init(dictionaryLiteral:)( inited,  type metadata for String,  v48,  &protocol witness table for String);
          uint64_t v50 = sub_10000A1A0(0LL, &qword_100130BE8, &OBJC_CLASS___LNValue_ptr);
          uint64_t v51 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  type metadata for String,  v50,  &protocol witness table for String);
          id v52 = objc_allocWithZone(&OBJC_CLASS___LNAssistantIntentMetadata);
          id v53 = sub_100011938(a3, a4, v69, v49, v51);
          sub_100011A3C(a2);
          id v54 = v53;
          if ((swift_isUniquelyReferenced_nonNull_native(v83) & 1) == 0)
          {
            sub_1000140A0();
            uint64_t v83 = v65;
          }

          unint64_t v55 = v83[2];
          if (v55 >= v83[3] >> 1)
          {
            sub_100011AC4();
            uint64_t v83 = v66;
          }

          v83[2] = v55 + 1;
          uint64_t v56 = &v83[3 * v55];
          v56[4] = a1;
          v56[5] = a2;
          uint64_t v70 = v54;
          v56[6] = v54;
          sub_100011438(a1, a2, a5, v75, v74);
          uint64_t v58 = v57;
          uint64_t v60 = v59;
          unint64_t v61 = v83[2];
          unint64_t v62 = v83[3];
          swift_bridgeObjectRetain();
          id v63 = v60;
          if (v61 >= v62 >> 1)
          {
            sub_100011AC4();
            uint64_t v83 = v67;
          }

          v83[2] = v61 + 1;
          uint64_t v64 = &v83[3 * v61];
          v64[4] = a1;
          v64[5] = v58;
          v64[6] = v63;

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          sub_100011AF0((uint64_t)v88);
          sub_100011AF0((uint64_t)&v86);
          sub_100011AF0((uint64_t)v87);

          a7 = v76;
          a6 = v75;
        }
      }
    }
  }

  int64_t v22 = v19 + 1;
  if (__OFADD__(v19, 1LL))
  {
    __break(1u);
    goto LABEL_38;
  }

  if (v22 >= v18) {
    goto LABEL_36;
  }
  unint64_t v23 = *(void *)(v14 + 8 * v22);
  ++v19;
  if (v23) {
    goto LABEL_19;
  }
  int64_t v19 = v22 + 1;
  if (v22 + 1 >= v18) {
    goto LABEL_36;
  }
  unint64_t v23 = *(void *)(v14 + 8 * v19);
  if (v23) {
    goto LABEL_19;
  }
  int64_t v19 = v22 + 2;
  if (v22 + 2 >= v18) {
    goto LABEL_36;
  }
  unint64_t v23 = *(void *)(v14 + 8 * v19);
  if (v23)
  {
LABEL_19:
    unint64_t v17 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v19 << 6);
    goto LABEL_20;
  }

  int64_t v24 = v22 + 3;
  if (v24 >= v18)
  {
LABEL_36:
    swift_release();
    sub_10000AD58();
    return;
  }

  unint64_t v23 = *(void *)(v14 + 8 * v24);
  if (v23)
  {
    int64_t v19 = v24;
    goto LABEL_19;
  }

  while (1)
  {
    int64_t v19 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v19 >= v18) {
      goto LABEL_36;
    }
    unint64_t v23 = *(void *)(v14 + 8 * v19);
    ++v24;
    if (v23) {
      goto LABEL_19;
    }
  }

LABEL_38:
  __break(1u);
}

                  sub_10000ADB0();
                  sub_10001B100(v43);
                  swift_release(v44);
                  swift_bridgeObjectRelease(0x8000000000000000LL);
                  sub_10000ADB0();
                  uint64_t v38 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
                  v0[37] = v38;
                  void *v38 = v0;
                  v38[1] = sub_1000498D4;
                  sub_10004BFC4();
                  dispatch thunk of AsyncIteratorProtocol.next()();
                  return;
                }
              }
            }
          }
        }
      }

              swift_release();
              swift_bridgeObjectRelease(a3);
              return (uint64_t)a1;
            }
          }
        }
      }
    }

      unint64_t v6 = v16;
    }

void sub_100011088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v13 = v12 - v11;
  if (a5)
  {
    uint64_t v70 = a1;
    uint64_t v14 = sub_100011A34();
    sub_1000119B0(v14);
    id v15 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
    id v16 = a5;
    sub_100011994();
    id v23 = sub_100086650(v17, v18, v19, v20, v21, v22, v13);
    uint64_t v24 = sub_100008DB0(&qword_100130BD0);
    uint64_t v25 = sub_100011924(v24);
    *(_OWORD *)(v25 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5530;
    *(void *)(v25 + 32) = v23;
    sub_1000119D8(v25);
    uint64_t v26 = v72;
    uint64_t v27 = sub_100008DB0(&qword_100130BD8);
    uint64_t inited = swift_initStackObject(v27, v71);
    *(_OWORD *)(inited + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
    *(void *)(inited + 32) = 0xD000000000000011LL;
    *(void *)(inited + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = 0x80000001000F94C0LL;
    uint64_t v29 = sub_100011924(v24);
    *(_OWORD *)(v29 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5530;
    *(void *)(v29 + 32) = v16;
    uint64_t v72 = v29;
    sub_1000119E4();
    id v30 = v23;
    specialized Array._endMutation()(v30);
    *(void *)(inited + 48) = v72;
    id v31 = v16;
    uint64_t v32 = sub_100008DB0(&qword_100130BE0);
    uint64_t v34 = sub_100011A88(inited, v33, v32);
    uint64_t v35 = sub_100011AB4(v34, &qword_100130BE8, &OBJC_CLASS___LNValue_ptr);
    uint64_t v37 = sub_100011A88((uint64_t)_swiftEmptyArrayStorage, v36, v35);
    id v38 = objc_allocWithZone(&OBJC_CLASS___LNAssistantIntentMetadata);
    id v39 = sub_100011938(a3, a4, v26, v34, v37);
    sub_10000AFB0();
    id v40 = v39;
    sub_1000140A0();
    uint64_t v42 = v41;
    unint64_t v43 = *(void *)(v41 + 16);
    if (v43 >= *(void *)(v41 + 24) >> 1)
    {
      sub_100011AD0();
      uint64_t v42 = v68;
    }

    *(void *)(v42 + 1sub_10000AC58(v0 + 6) = v43 + 1;
    uint64_t v44 = (void *)(v42 + 24 * v43);
    v44[4] = v70;
    v44[5] = a2;
    v44[6] = v40;
  }

  else
  {
    uint64_t v45 = sub_100011A34();
    sub_1000119B0(v45);
    id v46 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
    sub_100011960();
    id v53 = sub_100086650(v47, v48, v49, v50, v51, v52, v13);
    uint64_t v54 = sub_100008DB0(&qword_100130BD0);
    uint64_t v55 = sub_100011924(v54);
    *(_OWORD *)(v55 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5530;
    *(void *)(v55 + 32) = v53;
    sub_1000119D8(v55);
    sub_1000119E4();
    id v30 = v53;
    uint64_t v56 = sub_100008DB0(&qword_100130BE0);
    uint64_t v58 = sub_1000119EC(v56, v57, v56);
    uint64_t v59 = sub_100011AB4(v58, &qword_100130BE8, &OBJC_CLASS___LNValue_ptr);
    uint64_t v61 = sub_1000119EC(v59, v60, v59);
    id v62 = objc_allocWithZone(&OBJC_CLASS___LNAssistantIntentMetadata);
    id v63 = sub_100011938(a3, a4, v72, v58, v61);
    sub_10000AFB0();
    id v31 = v63;
    sub_1000140A0();
    uint64_t v65 = v64;
    unint64_t v66 = *(void *)(v64 + 16);
    if (v66 >= *(void *)(v64 + 24) >> 1)
    {
      sub_100011AD0();
      uint64_t v65 = v69;
    }

    *(void *)(v65 + 1sub_10000AC58(v0 + 6) = v66 + 1;
    BOOL v67 = (void *)(v65 + 24 * v66);
    v67[4] = a1;
    v67[5] = a2;
    v67[6] = v31;
  }

  sub_10000AD58();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_100011438( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = v9 - v8;
  sub_100011A34();
  sub_1000119C4();
  id v11 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
  sub_100011960();
  id v18 = sub_100086650(v12, v13, v14, v15, v16, v17, v10);
  sub_1000119C4();
  id v19 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
  sub_100011994();
  id v26 = sub_100086650(v20, v21, v22, v23, v24, v25, v10);
  uint64_t v27 = sub_100008DB0(&qword_100130BD0);
  uint64_t v28 = sub_100011A44(v27);
  *(_OWORD *)(v28 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5510;
  *(void *)(v28 + 32) = v18;
  *(void *)(v28 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v26;
  sub_1000119D8(v28);
  uint64_t v29 = v45;
  uint64_t v30 = sub_100008DB0(&qword_100130BD8);
  uint64_t inited = swift_initStackObject(v30, v44);
  *(_OWORD *)(inited + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
  *(void *)(inited + 32) = 0xD000000000000011LL;
  *(void *)(inited + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = 0x80000001000F94C0LL;
  uint64_t v32 = sub_100011924(v27);
  *(_OWORD *)(v32 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5530;
  *(void *)(v32 + 32) = a5;
  uint64_t v45 = v32;
  sub_1000119E4();
  id v33 = v18;
  id v34 = v26;
  specialized Array._endMutation()(v34);
  *(void *)(inited + 48) = v45;
  id v35 = a5;
  uint64_t v36 = sub_100008DB0(&qword_100130BE0);
  uint64_t v38 = sub_100011A7C(inited, v37, v36);
  uint64_t v39 = sub_100011AB4(v38, &qword_100130BE8, &OBJC_CLASS___LNValue_ptr);
  uint64_t v41 = sub_100011A7C((uint64_t)_swiftEmptyArrayStorage, v40, v39);
  id v42 = objc_allocWithZone(&OBJC_CLASS___LNAssistantIntentMetadata);
  sub_100011938(a3, a4, v29, v38, v41);

  sub_10000AFB0();
}

uint64_t sub_10001166C(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  for (uint64_t i = (id *)(a1 + 48); ; i += 3)
  {
    uint64_t v8 = (uint64_t)*(i - 2);
    uint64_t v7 = (uint64_t)*(i - 1);
    id v9 = *i;
    uint64_t v10 = (void *)*a3;
    id v28 = *i;
    swift_bridgeObjectRetain();
    unint64_t v12 = sub_100015FB0(v8, v7);
    uint64_t v13 = v10[2];
    BOOL v14 = (v11 & 1) == 0;
    if (__OFADD__(v13, v14)) {
      break;
    }
    char v15 = v11;
    if (v10[3] >= v13 + v14)
    {
      if ((a2 & 1) == 0)
      {
        sub_100008DB0(&qword_100130BF8);
        _NativeDictionary.copy()();
      }
    }

    else
    {
      sub_100017338();
      unint64_t v16 = sub_100015FB0(v8, v7);
      if ((v15 & 1) != (v17 & 1)) {
        goto LABEL_18;
      }
      unint64_t v12 = v16;
    }

    id v18 = (void *)*a3;
    if ((v15 & 1) != 0)
    {
      id v19 = *(void **)(v18[7] + 8 * v12);
      id v20 = v19;
      swift_bridgeObjectRelease();

      uint64_t v21 = v18[7];
      *(void *)(v21 + 8 * v12) = v19;
    }

    else
    {
      v18[(v12 >> 6) + 8] |= 1LL << v12;
      uint64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
      *uint64_t v22 = v8;
      v22[1] = v7;
      *(void *)(v18[7] + 8 * v12) = v9;
      uint64_t v23 = v18[2];
      BOOL v24 = __OFADD__(v23, 1LL);
      uint64_t v25 = v23 + 1;
      if (v24) {
        goto LABEL_17;
      }
      __int128 v18[2] = v25;
    }

    a2 = 1;
    if (!--v4)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }

  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  uint64_t v27 = sub_100008DB0((uint64_t *)&unk_100130C00);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v27);
  __break(1u);
  return result;
}

uint64_t sub_100011840(void *a1)
{
  id v1 = [a1 identifier];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_1000118A0(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1000118E0()
{
  unint64_t result = qword_100130BC8;
  if (!qword_100130BC8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100130BC8);
  }

  return result;
}

uint64_t sub_10001191C(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 2LL);
}

uint64_t sub_100011924(uint64_t a1)
{
  return swift_allocObject(a1, 40LL, 7LL);
}

id sub_100011930(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

id sub_100011938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100073D14(a1, a2, a3, a4, a5, 0LL);
}

uint64_t sub_100011944(uint64_t a1)
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(a1, v1);
}

uint64_t sub_10001194C(uint64_t a1)
{
  return static NSObject.== infix(_:_:)(a1, v1);
}

uint64_t sub_100011958()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

uint64_t sub_100011974(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0x746567726174LL, 0xE600000000000000LL, 0LL);
}

uint64_t sub_10001198C()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

uint64_t sub_1000119B0(uint64_t a1)
{
  return sub_100009E60(v1, 1LL, 1LL, a1);
}

uint64_t sub_1000119C4()
{
  return sub_100009E60(v0, 1LL, 1LL, v1);
}

uint64_t sub_1000119D8(uint64_t a1)
{
  *(void *)(v1 - 88) = a1;
  return specialized Array._endMutation()(a1);
}

uint64_t sub_1000119E4()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000119EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Dictionary.init(dictionaryLiteral:)(v5, v3, a3, v4);
}

uint64_t sub_1000119FC(uint64_t a1)
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a1, v1, v3, v2);
}

  ;
}

void sub_100011A1C()
{
}

  ;
}

uint64_t sub_100011A34()
{
  return type metadata accessor for URL(0LL);
}

uint64_t sub_100011A3C(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 2LL);
}

uint64_t sub_100011A44(uint64_t a1)
{
  return swift_allocObject(a1, 48LL, 7LL);
}

uint64_t sub_100011A50()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_100011A58()
{
  return swift_unknownObjectRelease(v0);
}

id sub_100011A60(uint64_t a1)
{
  return *(id *)(*(void *)(v1 + 56) + 8 * a1);
}

id sub_100011A6C(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_100011A74(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_100011A7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Dictionary.init(dictionaryLiteral:)(a1, v3, a3, v4);
}

uint64_t sub_100011A88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Dictionary.init(dictionaryLiteral:)(a1, v3, a3, v4);
}

uint64_t sub_100011A94(uint64_t a1)
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, v1);
}

uint64_t sub_100011A9C(uint64_t a1)
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, a1);
}

uint64_t sub_100011AA8(uint64_t a1)
{
  return swift_dynamicCastObjCClass(v1, a1);
}

uint64_t sub_100011AB4(uint64_t a1, unint64_t *a2, void *a3)
{
  return sub_10000A1A0(0LL, a2, a3);
}

id sub_100011ABC(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

void sub_100011AC4()
{
}

void sub_100011AD0()
{
}

id sub_100011ADC(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_100011AE4()
{
  return static NSObject.== infix(_:_:)(v1, v0);
}

void sub_100011AF0(uint64_t a1@<X8>)
{
}

uint64_t sub_100011AF8(uint64_t a1)
{
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 0LL, 2LL, v2, a1 + 96);
}

void sub_100011B48(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16)
    && (uint64_t v6 = sub_1000161C4( a1,  a2,  (void (*)(_BYTE *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1000162AC),  (v7 & 1) != 0))
  {
    sub_10001BED4(*(void *)(a3 + 56) + 32 * v6, (uint64_t)a4);
  }

  else
  {
    *a4 = 0u;
    a4[1] = 0u;
    sub_10000ADA8();
  }

void sub_100011BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    uint64_t v4 = sub_1000161C4( a1,  a2,  (void (*)(_BYTE *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1000162AC);
    if ((v5 & 1) != 0) {
      swift_bridgeObjectRetain(*(void *)(*(void *)(a3 + 56) + 8 * v4));
    }
  }

  sub_10000ADA8();
}

uint64_t sub_100011BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a5 + 16) && (unint64_t v6 = sub_100016078(), (v7 & 1) != 0)) {
    return *(void *)(*(void *)(a5 + 56) + 16 * v6);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100011C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0LL;
  }
  uint64_t v4 = sub_1000161C4( a1,  a2,  (void (*)(_BYTE *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1000162AC);
  if ((v5 & 1) == 0) {
    return 0LL;
  }
  uint64_t v6 = *(void *)(*(void *)(a3 + 56) + 16 * v4);
  sub_10000AE38();
  return v6;
}

void sub_100011C9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    uint64_t v4 = sub_1000161C4( a1,  a2,  (void (*)(_BYTE *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1000162AC);
    if ((v5 & 1) != 0) {
      id v6 = *(id *)(*(void *)(a3 + 56) + 8 * v4);
    }
  }

  sub_10000ADA8();
}

uint64_t sub_100011CF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16)
    && (uint64_t v6 = sub_1000161C4(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))&Data.hash(into:), sub_1000167CC),
        (v7 & 1) != 0))
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(void *)(a3 + 56);
    uint64_t v10 = sub_10001C1C4();
    sub_10001B644(v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * v8, a4, (uint64_t *)&unk_100132690);
    uint64_t v11 = a4;
    uint64_t v12 = 0LL;
    uint64_t v13 = 1LL;
    uint64_t v14 = v10;
  }

  else
  {
    sub_100008DB0((uint64_t *)&unk_100132690);
    uint64_t v11 = sub_10001C0D4();
  }

  return sub_100009E60(v11, v12, v13, v14);
}

void sub_100011D94(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (uint64_t v5 = sub_100016020(a1), (v6 & 1) != 0))
  {
    sub_10001BED4(*(void *)(a2 + 56) + 32 * v5, (uint64_t)a3);
  }

  else
  {
    *a3 = 0u;
    a3[1] = 0u;
    sub_10000ADA8();
  }

uint64_t sub_100011DDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16)
    && (uint64_t v6 = sub_1000161C4( a1,  a2,  (void (*)(_BYTE *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1000162AC),  (v7 & 1) != 0))
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(void *)(a3 + 56);
    uint64_t v10 = sub_10001C1D4();
    sub_10001B584(v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * v8, a4);
    uint64_t v11 = a4;
    uint64_t v12 = 0LL;
    uint64_t v13 = 1LL;
    uint64_t v14 = v10;
  }

  else
  {
    sub_10001C1D4();
    uint64_t v11 = sub_10001C0D4();
  }

  return sub_100009E60(v11, v12, v13, v14);
}

uint64_t sub_100011E64@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = Int64.datatypeValue.getter(*a1, a1[1]);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_100011E90@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100011E9C()
{
  uint64_t result = _CFXPCCreateCFObjectFromXPCObject(*v0);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v2 = sub_100008DB0(&qword_100130EA8);
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100011EFC()
{
  uint64_t v0 = sub_100011E9C();
  if (!v0)
  {
    __int128 v6 = 0u;
    __int128 v7 = 0u;
    goto LABEL_8;
  }

  sub_100011B48(1701667150LL, 0xE400000000000000LL, v0, &v6);
  sub_10001198C();
  if (!*((void *)&v7 + 1))
  {
LABEL_8:
    sub_10001B60C((uint64_t)&v6, &qword_100130EA0);
    return 0LL;
  }

  if (sub_10001C050( (uint64_t)&v5,  v1,  (uint64_t)&type metadata for Any + 8,  (uint64_t)type metadata for String,  v2,  v3)) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100011F9C()
{
  uint64_t v0 = sub_100011E9C();
  if (!v0)
  {
    __int128 v7 = 0u;
    __int128 v8 = 0u;
    goto LABEL_7;
  }

  sub_100011B48(0x6F666E4972657355LL, 0xE800000000000000LL, v0, &v7);
  sub_10001198C();
  if (!*((void *)&v8 + 1))
  {
LABEL_7:
    sub_10001B60C((uint64_t)&v7, &qword_100130EA0);
    return 0LL;
  }

  uint64_t v1 = sub_100008DB0(&qword_100130EA8);
  else {
    return 0LL;
  }
}

uint64_t sub_100012044()
{
  v1[3] = v0;
  v1[4] = *v0;
  v1[5] = *v0;
  return swift_task_switch(sub_10001206C, v0, 0LL);
}

uint64_t sub_10001206C()
{
  uint64_t v1 = (void *)objc_opt_self(&OBJC_CLASS___LNFeatures_tvOS);
  if (![v1 isHomePod] || objc_msgSend(v1, "homeRVCEnabled"))
  {
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)(*(void *)(v0 + 40) + 88LL) + 8LL))();
    uint64_t v2 = *(void *)(v12 + 16);
    if (v2)
    {
      uint64_t v3 = type metadata accessor for XPCEventDispatcher();
      uint64_t v4 = (uint64_t *)(v12 + 56);
      do
      {
        uint64_t v6 = *(void *)(v0 + 24);
        uint64_t v5 = *(void *)(v0 + 32);
        uint64_t v7 = *(v4 - 3);
        uint64_t v8 = *(v4 - 2);
        uint64_t v10 = *(v4 - 1);
        uint64_t v9 = *v4;
        *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v6;
        swift_bridgeObjectRetain(v8);
        sub_10000AE38();
        swift_retain(v6);
        sub_10001AD70(v7, v8, v10, v9, v0 + 16, v3, v5, (uint64_t)&off_100123008);
        swift_bridgeObjectRelease(v8);
        sub_10000ADB0();
        swift_release(v6);
        v4 += 4;
        --v2;
      }

      while (v2);
    }

    swift_bridgeObjectRelease(v12);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100012198(uint64_t a1)
{
  v2[26] = a1;
  v2[27] = v1;
  uint64_t v3 = *v1;
  v2[28] = *v1;
  uint64_t v4 = *(void *)(v3 + 80);
  v2[29] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[30] = v5;
  v2[31] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v2[32] = v6;
  v2[33] = *(void *)(v6 - 8);
  v2[34] = sub_10001BFD0();
  v2[35] = sub_10001BFD0();
  v2[36] = sub_10001BFD0();
  v2[37] = sub_10001BFD0();
  return swift_task_switch(sub_10001223C, v1, 0LL);
}

uint64_t sub_10001223C()
{
  *(void *)(v0 + 16sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = *(void *)(v0 + 232);
  uint64_t v98 = sub_100008DB0((uint64_t *)&unk_100132590);
  String.init<A>(describing:)(v0 + 160, v98);
  uint64_t result = LNLogSubsystem;
  if (!LNLogSubsystem)
  {
    __break(1u);
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }

  uint64_t v92 = v0 + 120;
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v3 = String.init(cString:)();
  sub_10001BEA0(v3, v4);
  sub_10001AFE4(v2, v0 + 16);
  sub_10001AFE4(v2, v0 + 56);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  LODWORD(type) = v7;
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 296);
  uint64_t v10 = *(void *)(v0 + 256);
  uint64_t v94 = *(void *)(v0 + 264);
  if (v8)
  {
    uint64_t v80 = v0 + 192;
    os_log_t log = v6;
    uint64_t v88 = *(void *)(v0 + 296);
    uint64_t v11 = sub_10000AE10(22LL);
    uint64_t v84 = sub_10000AE10(64LL);
    uint64_t v100 = v84;
    *(_DWORD *)uint64_t v11 = 136315394;
    uint64_t v86 = v10;
    uint64_t v12 = sub_100008D74((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v14 = v12[3];
    unint64_t v13 = v12[4];
    sub_10000AFB0();
    *(void *)(v0 + 192) = sub_10000DE60(v14, v13, &v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v11 + 4, v11 + 12);
    sub_10001198C();
    sub_10000AC58((void *)(v0 + 16));
    *(_WORD *)(v11 + 12) = 2080;
    char v15 = sub_100008D74((void *)(v0 + 56), *(void *)(v0 + 80));
    uint64_t v16 = v15[1];
    unint64_t v17 = v15[2];
    sub_10001C1BC();
    *(void *)(v0 + 20sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = sub_10000DE60(v16, v17, &v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v17);
    sub_10000AC58((void *)(v0 + 56));
    _os_log_impl( (void *)&_mh_execute_header,  v6,  (os_log_type_t)type,  "Received incoming XPC event %s from stream %s",  (uint8_t *)v11,  0x16u);
    swift_arrayDestroy(v84, 2LL);
    sub_10000AD78(v84);
    sub_10000AD78(v11);

    id v18 = *(void (**)(uint64_t, uint64_t))(v94 + 8);
    uint64_t v20 = v86;
    uint64_t v19 = v88;
  }

  else
  {
    sub_10000AC58((void *)(v0 + 16));
    sub_10000AC58((void *)(v0 + 56));

    id v18 = *(void (**)(uint64_t, uint64_t))(v94 + 8);
    uint64_t v19 = v9;
    uint64_t v20 = v10;
  }

  uint64_t v95 = (uint64_t)v18;
  v18(v19, v20);
  uint64_t v21 = *(void *)(v0 + 248);
  uint64_t v22 = *(void *)(v0 + 232);
  uint64_t v23 = *(void **)(v0 + 208);
  uint64_t v100 = 0LL;
  unint64_t v101 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(21LL);
  swift_bridgeObjectRelease(v101);
  uint64_t v100 = 0xD000000000000010LL;
  unint64_t v101 = 0x80000001000F9610LL;
  *(void *)(v0 + 12sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v22;
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v22);
  v25._countAndFlagsBits = String.init<A>(describing:)(v92, MetatypeMetadata);
  String.append(_:)(v25);
  sub_10000AEE8();
  v26._countAndFlagsBits = 46LL;
  v26._object = (void *)0xE100000000000000LL;
  String.append(_:)(v26);
  uint64_t v27 = sub_100008D74(v23, v23[3]);
  uint64_t v28 = v27[3];
  uint64_t v29 = (void *)v27[4];
  sub_10001BD0C();
  v30._countAndFlagsBits = v28;
  v30._object = v29;
  String.append(_:)(v30);
  sub_10000AEE8();
  uint64_t v31 = String.utf8CString.getter(v100, v101);
  sub_10000ADB0();
  uint64_t v32 = os_transaction_create(v31 + 32);
  sub_10001BB08();
  sub_1000889F8(v21);
  *(void *)(v0 + 17sub_10000AC58(v0 + 6) = *(void *)(v0 + 232);
  uint64_t v41 = sub_10001C05C( v0 + 176,  v33,  v34,  v35,  v36,  v37,  v38,  v39,  v78,  v80,  (uint64_t)log,  v84,  v86,  v88,  type,  v92,  v95,  v98);
  uint64_t result = LNLogSubsystem;
  if (!LNLogSubsystem) {
    goto LABEL_13;
  }
  uint64_t v42 = v40;
  uint64_t v43 = v32;
  uint64_t v44 = String.init(cString:)();
  uint64_t v46 = Logger.init(subsystem:category:)(v44, v45, v41, v42);
  uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
  os_log_type_t v48 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v49 = (uint8_t *)sub_10000AE10(2LL);
    *(_WORD *)uint64_t v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "[XPCEventService] Deferring to service handler", v49, 2u);
    sub_10000AD78((uint64_t)v49);
  }

  uint64_t v50 = *(void *)(v0 + 288);
  uint64_t v51 = *(void *)(v0 + 256);
  uint64_t v53 = *(void *)(v0 + 224);
  uint64_t v52 = *(void *)(v0 + 232);
  uint64_t v54 = *(void *)(v0 + 208);

  v96(v50, v51);
  uint64_t v55 = v54;
  uint64_t v56 = v43;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v53 + 88) + 16LL))(v55, v43, v52);
  *(void *)(v0 + 184) = v52;
  sub_10001C05C( v0 + 184,  v57,  v58,  v59,  v60,  v61,  v62,  v63,  v79,  v81,  (uint64_t)loga,  v85,  v87,  v89,  typea,  v93,  (uint64_t)v96,  v99);
  uint64_t result = LNLogSubsystem;
  if (!LNLogSubsystem) {
    goto LABEL_14;
  }
  uint64_t v64 = String.init(cString:)();
  uint64_t v66 = sub_10001BEA0(v64, v65);
  BOOL v67 = (os_log_s *)Logger.logObject.getter(v66);
  os_log_type_t v68 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v67, v68))
  {
    uint64_t v69 = (uint8_t *)sub_10000AE10(2LL);
    *(_WORD *)uint64_t v69 = 0;
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "[XPCEventService] Event serviced", v69, 2u);
    sub_10000AD78((uint64_t)v69);
  }

  uint64_t v70 = *(void *)(v0 + 280);
  uint64_t v72 = *(void *)(v0 + 248);
  uint64_t v71 = *(void *)(v0 + 256);
  uint64_t v73 = *(void *)(v0 + 232);
  uint64_t v74 = *(void *)(v0 + 240);
  swift_unknownObjectRelease(v56);

  v97(v70, v71);
  (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v72, v73);
  uint64_t v76 = *(void *)(v0 + 272);
  uint64_t v75 = *(void *)(v0 + 280);
  uint64_t v77 = *(void *)(v0 + 248);
  swift_task_dealloc(*(void *)(v0 + 296));
  sub_10000AF6C();
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001295C()
{
  return sub_100015F8C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10001296C()
{
  return v0;
}

uint64_t sub_100012990()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for XPCEventEntryPoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C8B4(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for XPCEventEntryPoint);
}

void sub_1000129B4()
{
}

void sub_1000129BC()
{
}

uint64_t sub_1000129D4(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_100130D84);
  *(void *)(v1 + 1sub_10000AC58(v0 + 6) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10001BA68;
  return sub_100012198(a1);
}

uint64_t sub_100012A24()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_100130D9C);
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001BA68;
  return sub_100012044();
}

uint64_t sub_100012A6C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_100130D94);
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100012AB0;
  return sub_10001295C();
}

uint64_t sub_100012AB0()
{
  return sub_10000C914(*(uint64_t (**)(void))(v0 + 8));
}

void *sub_100012AD4()
{
  uint64_t v0 = type metadata accessor for XPCEventDispatcher();
  swift_allocObject(v0, 40LL, 7LL);
  uint64_t result = sub_100012B10();
  qword_100130C10 = (uint64_t)result;
  return result;
}

void *sub_100012B10()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v6);
  BOOL v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v1[2] = &_swiftEmptySetSingleton;
  uint64_t v12 = sub_100008DB0(&qword_100130DC0);
  v1[3] = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v12,  &protocol witness table for String);
  sub_10000A1A0(0LL, (unint64_t *)&qword_100130560, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter();
  uint64_t v19 = _swiftEmptyArrayStorage;
  sub_100008C18( (unint64_t *)&qword_100130568,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v14 = v13;
  uint64_t v15 = sub_100008DB0(&qword_100130570);
  unint64_t v16 = sub_10001B540();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v15, v16, v6, v14);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v2);
  v1[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000021LL,  0x80000001000F9650LL,  v11,  v8,  v5,  0LL);
  return v1;
}

uint64_t sub_100012D08(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_100008DB0(&qword_100130DA0);
  uint64_t inited = swift_initStackObject(v12, v24);
  *(_OWORD *)(inited + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
  *(void *)(inited + 32) = a2;
  *(void *)(inited + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = a3;
  uint64_t v14 = sub_100008DB0(&qword_100130DA8);
  uint64_t v15 = swift_initStackObject(v14, v23);
  *(_OWORD *)(v15 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
  *(void *)(v15 + 32) = a4;
  *(void *)(v15 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = a5;
  uint64_t v16 = sub_100008DB0(&qword_100130DB0);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  *(_OWORD *)(v17 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
  sub_10001AFE4(a6, v17 + 32);
  *(void *)(v15 + 48) = v17;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a5);
  uint64_t v18 = sub_100008DB0(&qword_100130DB8);
  *(void *)(inited + 48) = Dictionary.init(dictionaryLiteral:)( v15,  &type metadata for String,  v18,  &protocol witness table for String);
  uint64_t v19 = sub_100008DB0(&qword_100130DC0);
  uint64_t v20 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v19, &protocol witness table for String);
  a1 += 3;
  swift_beginAccess(a1, v22, 33LL, 0LL);
  sub_1000182F8(v20, (uint64_t)sub_10001B0B4, 0LL, a1);
  return swift_endAccess(v22);
}

uint64_t sub_100012E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  BOOL v8 = (uint64_t *)((char *)&v22[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = *(void **)(v2 + 32);
  *BOOL v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  uint64_t v10 = v9;
  char v11 = _dispatchPreconditionTest(_:)(v8);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((v11 & 1) != 0)
  {
    uint64_t v13 = v2 + 16;
    swift_beginAccess(v2 + 16, v25, 0LL, 0LL);
    uint64_t v14 = *(void *)(v2 + 16);
    swift_bridgeObjectRetain(v14);
    sub_1000130A4(a1, a2, v14);
    char v16 = v15;
    uint64_t result = swift_bridgeObjectRelease(v14);
    if ((v16 & 1) == 0)
    {
      uint64_t v17 = (void *)swift_allocObject(&unk_1001230A0, 40LL, 7LL);
      v17[2] = v2;
      v17[3] = a1;
      v17[4] = a2;
      aBlock[4] = sub_10001B300;
      BOOL v24 = v17;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_100013414;
      aBlock[3] = &unk_1001230B8;
      uint64_t v18 = _Block_copy(aBlock);
      uint64_t v19 = v24;
      swift_retain(v2);
      swift_bridgeObjectRetain(a2);
      swift_release(v19);
      uint64_t v20 = String.utf8CString.getter(a1, a2);
      xpc_set_event_stream_handler((const char *)(v20 + 32), v10, v18);
      swift_release(v20);
      _Block_release(v18);
      swift_beginAccess(v13, aBlock, 33LL, 0LL);
      swift_bridgeObjectRetain(a2);
      sub_100018380(v22, a1, a2);
      swift_endAccess(aBlock);
      return swift_bridgeObjectRelease(v22[1]);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100013084(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_1000130A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)(v21, *(void *)(a3 + 40));
    String.hash(into:)(v21, a1, a2);
    Swift::Int v6 = sub_10001BC48();
    uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
    Swift::Int v8 = v6 & ~v7;
    sub_10001BB58();
    if ((v9 & 1) != 0)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      char v11 = (uint64_t *)(v10 + 16 * v8);
      uint64_t v12 = v11[1];
      if ((*v11 != a1 || v12 != a2) && (sub_10001BB00(*v11, v12, a1, a2) & 1) == 0)
      {
        uint64_t v14 = ~v7;
        uint64_t v15 = (v8 + 1) & v14;
        sub_10001BB58();
        if ((v16 & 1) != 0)
        {
          do
          {
            uint64_t v17 = (uint64_t *)(v10 + 16 * v15);
            uint64_t v18 = v17[1];
            if (*v17 == a1 && v18 == a2) {
              break;
            }
            if ((sub_10001BB00(*v17, v18, a1, a2) & 1) != 0) {
              break;
            }
            uint64_t v15 = (v15 + 1) & v14;
            sub_10001BB58();
          }

          while ((v20 & 1) != 0);
        }
      }
    }
  }

uint64_t sub_1000131A8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100008DB0(&qword_100131780);
  __chkstk_darwin(v7);
  char v9 = &v29[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = &v29[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v14 = *(void **)(v3 + 32);
  *uint64_t v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) != 0)
  {
    swift_unknownObjectRetain(a1);
    swift_bridgeObjectRetain(a3);
    if (xpc_dictionary_get_string(a1, _xpc_event_key_name))
    {
      uint64_t v17 = String.init(cString:)();
      uint64_t v19 = v18;
      swift_beginAccess(v3 + 24, v29, 32LL, 0LL);
      uint64_t v20 = *(void *)(v3 + 24);
      swift_bridgeObjectRetain(a3);
      sub_100011BA0(a2, a3, v20);
      uint64_t v22 = v21;
      swift_bridgeObjectRelease(a3);
      if (v22)
      {
        swift_endAccess(v29);
        swift_bridgeObjectRetain(v19);
        sub_100011BA0(v17, v19, v22);
        uint64_t v24 = v23;
        swift_bridgeObjectRelease(v19);
        swift_bridgeObjectRelease(v22);
        if (v24)
        {
          uint64_t v25 = type metadata accessor for TaskPriority(0LL);
          sub_100009E60((uint64_t)v9, 1LL, 1LL, v25);
          Swift::String v26 = (void *)swift_allocObject(&unk_1001230F0, 80LL, 7LL);
          void v26[2] = 0LL;
          v26[3] = 0LL;
          v26[4] = v24;
          v26[5] = a1;
          v26[6] = a2;
          v26[7] = a3;
          v26[8] = v17;
          v26[9] = v19;
          swift_unknownObjectRetain(a1);
          swift_bridgeObjectRetain(a3);
          swift_bridgeObjectRetain(v19);
          uint64_t v27 = sub_10000D1F0((uint64_t)v9, (uint64_t)&unk_100130E08, (uint64_t)v26);
          swift_bridgeObjectRelease(v19);
          swift_bridgeObjectRelease(a3);
          swift_unknownObjectRelease(a1);
          return swift_release(v27);
        }
      }

      else
      {
        swift_endAccess(v29);
      }

      swift_bridgeObjectRelease(v19);
    }

    swift_bridgeObjectRelease(a3);
    return swift_unknownObjectRelease(a1);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100013414(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  uint64_t v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_10001345C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  return swift_task_switch(sub_100013478, 0LL, 0LL);
}

uint64_t sub_100013478()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v1;
  *(_OWORD *)(v1 + 1sub_10000AC58(v0 + 6) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(void *)(v0 + 48) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10001350C;
  return withTaskGroup<A, B>(of:returning:isolation:body:)( *(void *)(v0 + 16),  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8,  0LL,  0LL,  &unk_100130E18,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_10001350C()
{
  return sub_10000C914(v0[1]);
}

uint64_t sub_100013544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[19] = a3;
  v4[20] = a4;
  v4[18] = a2;
  unint64_t v5 = (*(void *)(*(void *)(sub_100008DB0(&qword_100131780) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[21] = swift_task_alloc(v5);
  v4[22] = swift_task_alloc(v5);
  return swift_task_switch(sub_1000135B4, 0LL, 0LL);
}

uint64_t sub_1000135B4()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v31 = (__int128 *)(v0 + 16);
    uint64_t v3 = *(uint64_t **)(v0 + 160);
    uint64_t v30 = *v3;
    *(_OWORD *)(v0 + 112) = *(_OWORD *)(v3 + 1);
    *(_OWORD *)(v0 + 128) = *(_OWORD *)(v3 + 3);
    uint64_t v4 = v1 + 32;
    uint64_t v5 = type metadata accessor for TaskPriority(0LL);
    sub_10000AE38();
    uint64_t v29 = v5;
    do
    {
      uint64_t v7 = *(void *)(v0 + 168);
      uint64_t v6 = *(void *)(v0 + 176);
      uint64_t v8 = *(void *)(v0 + 160);
      sub_100009E60(v6, 1LL, 1LL, v5);
      sub_10001AFE4(v4, (uint64_t)v31);
      uint64_t v9 = sub_10000C254((uint64_t)&unk_100123118, 112LL);
      *(void *)(v9 + 1sub_10000AC58(v0 + 6) = 0LL;
      uint64_t v10 = (void *)(v9 + 16);
      *(void *)(v9 + 24) = 0LL;
      sub_100009EEC(v31, v9 + 32);
      uint64_t v11 = *(void *)(v8 + 32);
      __int128 v12 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)(v9 + 72) = *(_OWORD *)v8;
      *(_OWORD *)(v9 + 88) = v12;
      *(void *)(v9 + 104) = v11;
      sub_10001B644(v6, v7, &qword_100131780);
      LODWORD(sub_10000AD08(v5, v6, v7) = sub_100009E6C(v7, 1LL, v5);
      swift_unknownObjectRetain(v30);
      sub_10001B4C8(v0 + 112);
      uint64_t v13 = sub_10001B4C8(v0 + 128);
      uint64_t v14 = *(void *)(v0 + 168);
      if ((_DWORD)v7 == 1)
      {
        sub_10001B60C(*(void *)(v0 + 168), &qword_100131780);
        uint64_t v15 = 0LL;
      }

      else
      {
        unsigned __int8 v16 = TaskPriority.rawValue.getter(v13);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v14, v5);
        uint64_t v15 = v16;
      }

      uint64_t v17 = *v10;
      if (*v10)
      {
        uint64_t v18 = *(void *)(v9 + 24);
        uint64_t ObjectType = swift_getObjectType(*v10);
        swift_unknownObjectRetain(v17);
        uint64_t v20 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v18);
        uint64_t v22 = v21;
        swift_unknownObjectRelease(v17);
      }

      else
      {
        uint64_t v20 = 0LL;
        uint64_t v22 = 0LL;
      }

      uint64_t v23 = **(void **)(v0 + 144);
      uint64_t v24 = sub_10000C254((uint64_t)&unk_100123140, 32LL);
      *(void *)(v24 + 1sub_10000AC58(v0 + 6) = &unk_100130E30;
      *(void *)(v24 + 24) = v9;
      uint64_t v25 = v22 | v20;
      if (v22 | v20)
      {
        uint64_t v25 = v0 + 56;
        *(void *)(v0 + 5sub_10000AC58(v0 + 6) = 0LL;
        *(void *)(v0 + 64) = 0LL;
        *(void *)(v0 + 72) = v20;
        *(void *)(v0 + 8sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v22;
      }

      uint64_t v5 = v29;
      uint64_t v26 = *(void *)(v0 + 176);
      *(void *)(v0 + 88) = 1LL;
      *(void *)(v0 + 9sub_10000AC58(v0 + 6) = v25;
      *(void *)(v0 + 104) = v23;
      uint64_t v27 = swift_task_create(v15 | 0x3100, v0 + 88, (char *)&type metadata for () + 8, &unk_100130B40, v24);
      swift_release(v27);
      sub_10001B60C(v26, &qword_100131780);
      v4 += 40LL;
      --v2;
    }

    while (v2);
    swift_bridgeObjectRelease(*(void *)(v0 + 152));
  }

  swift_task_dealloc(*(void *)(v0 + 176));
  sub_10000AF6C();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001383C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 88) = a4;
  *(void *)(v5 + 9sub_10000AC58(v0 + 6) = a5;
  return swift_task_switch(sub_100013854, 0LL, 0LL);
}

uint64_t sub_100013854()
{
  uint64_t v1 = *(void **)(v0 + 88);
  uint64_t v2 = *(uint64_t **)(v0 + 96);
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  sub_100008D74(v1, v3);
  *(void *)(v0 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = &unk_1001231E8;
  *(void *)(v0 + 48) = &off_100123208;
  uint64_t v5 = sub_10000C254((uint64_t)&unk_100123168, 56LL);
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v5;
  uint64_t v6 = v2[4];
  __int128 v7 = *((_OWORD *)v2 + 1);
  *(_OWORD *)(v5 + 1sub_10000AC58(v0 + 6) = *(_OWORD *)v2;
  *(_OWORD *)(v5 + 32) = v7;
  *(void *)(v5 + 48) = v6;
  uint64_t v8 = *(int **)(v4 + 8);
  uint64_t v9 = *v2;
  *(_OWORD *)(v0 + 5sub_10000AC58(v0 + 6) = *(_OWORD *)(v2 + 1);
  *(_OWORD *)(v0 + 72) = *(_OWORD *)(v2 + 3);
  swift_unknownObjectRetain(v9);
  sub_10001B4C8(v0 + 56);
  sub_10001B4C8(v0 + 72);
  __int128 v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v10 = (void *)swift_task_alloc(v8[1]);
  *(void *)(v0 + 104) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100013950;
  return v12(v0 + 16, v3, v4);
}

uint64_t sub_100013950()
{
  uint64_t v1 = (void *)((char *)*v0 + 16);
  sub_10000E8E4(*((void *)*v0 + 13));
  sub_10000AC58(v1);
  return sub_10000C914(v0[1]);
}

uint64_t sub_100013990()
{
  return v0;
}

uint64_t sub_1000139BC()
{
  uint64_t v0 = sub_100013990();
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for XPCEventDispatcher()
{
  return objc_opt_self(&OBJC_CLASS____TtC10LinkDaemonP33_D58D573A84F8D3FCCDFC47FE284514D618XPCEventDispatcher);
}

void sub_1000139F8(void *a1, void *a2)
{
  unint64_t v2 = a1[2];
  if (v2 == a2[2]
    && v2
    && a1 != a2
    && ((uint64_t v5 = a1[4], v6 = a1[5], v7 = a2[4], v8 = a2[5], v5 == v7) ? (v9 = v6 == v8) : (v9 = 0),
        (v9 || (sub_10001BB00(v5, v6, v7, v8) & 1) != 0) && v2 != 1))
  {
    uint64_t v10 = a2 + 7;
    uint64_t v11 = a1 + 7;
    unint64_t v12 = 1LL;
    while (v12 < v2)
    {
      uint64_t v13 = *(v11 - 1);
      uint64_t v14 = *v11;
      uint64_t v15 = *(v10 - 1);
      uint64_t v16 = *v10;
      BOOL v17 = v13 == v15 && v14 == v16;
      if (v17 || (sub_10001BB00(v13, v14, v15, v16) & 1) != 0)
      {
        ++v12;
        v10 += 2;
        v11 += 2;
        if (v2 != v12) {
          continue;
        }
      }

      goto LABEL_18;
    }

    __break(1u);
  }

  else
  {
LABEL_18:
    sub_10000AF74();
  }

void sub_100013AB4()
{
  uint64_t v2 = *(void *)(v0 + 16);
  if (v2 == *(void *)(v1 + 16) && v2 && v0 != v1)
  {
    uint64_t v3 = (void **)(v1 + 64);
    uint64_t v4 = (void **)(v0 + 64);
    do
    {
      uint64_t v5 = (uint64_t)*(v4 - 4);
      uint64_t v6 = (uint64_t)*(v4 - 3);
      uint64_t v7 = (uint64_t)*(v4 - 2);
      uint64_t v8 = (uint64_t)*(v4 - 1);
      BOOL v9 = *v4;
      uint64_t v10 = (uint64_t)*(v3 - 4);
      uint64_t v11 = (uint64_t)*(v3 - 3);
      uint64_t v13 = (uint64_t)*(v3 - 2);
      uint64_t v12 = (uint64_t)*(v3 - 1);
      uint64_t v19 = *v3;
      BOOL v14 = v5 == v10 && v6 == v11;
      if (!v14 && (sub_10001BB00(v5, v6, v10, v11) & 1) == 0) {
        break;
      }
      BOOL v15 = v7 == v13 && v8 == v12;
      if (!v15 && (sub_10001BB00(v7, v8, v13, v12) & 1) == 0) {
        break;
      }
      sub_10000A1A0(0LL, (unint64_t *)&qword_1001317F0, &OBJC_CLASS___NSObject_ptr);
      sub_10001C064();
      sub_10001BCF8();
      id v16 = v9;
      sub_1000119E4();
      sub_10001BD0C();
      id v17 = v19;
      char v18 = static NSObject.== infix(_:_:)(v16, v17);

      sub_10001BEC0();
      sub_10001BE7C();

      sub_10000AEE8();
      sub_10001BC70();
      if ((v18 & 1) == 0) {
        break;
      }
      v4 += 5;
      v3 += 5;
      --v2;
    }

    while (v2);
  }

  sub_10001BC78();
}

void sub_100013BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_100013C38( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20, char a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35)
{
  uint64_t v40 = v37;
  __int16 v41 = v38;
  char v42 = BYTE2(v38);
  char v43 = BYTE3(v38);
  char v44 = BYTE4(v38);
  char v45 = BYTE5(v38);
  if (!v36)
  {
    __break(1u);
    JUMPOUT(0x100013DBCLL);
  }

  uint64_t result = memcmp(v36, &v40, BYTE6(v38));
  *uint64_t v35 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_100013DF4(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v8 = (char *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }

    v8 += a1 - result;
  }

  BOOL v9 = __OFSUB__(a2, a1);
  int64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t result = __DataStorage._length.getter();
  if (!a4)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!v8)
  {
LABEL_14:
    __break(1u);
    return result;
  }

  if (result >= v10) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = result;
  }
  return memcmp(a4, v8, v11) == 0;
}

uint64_t sub_100013E90(uint64_t a1, int *a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = swift_task_alloc(a2[1]);
  uint64_t v5 = (void *)sub_10000E9E0(v4);
  *uint64_t v5 = v2;
  v5[1] = sub_10000C724;
  return v7(a1);
}

void sub_100013EF0()
{
}

void sub_100013F04()
{
  if ((v3 & 1) != 0)
  {
    sub_10001BAE0();
    if (v4 != v5)
    {
      sub_10001BB10();
      if (v4)
      {
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  sub_10001BBC4();
  if (v2)
  {
    uint64_t v6 = sub_100008DB0(&qword_100130FB0);
    uint64_t v7 = (void *)sub_10000C254(v6, 32 * v2 + 32);
    size_t v8 = j__malloc_size(v7);
    _OWORD v7[2] = v1;
    v7[3] = 2 * ((uint64_t)(v8 - 32) / 32);
  }

  if ((v0 & 1) != 0)
  {
    BOOL v9 = (char *)sub_10001BEC8();
    sub_100015A74(v9, v10, v11);
    sub_10001BAC4();
  }

  else
  {
    uint64_t v12 = sub_10001BBB4();
    sub_100014A28(v12, v13, v14, v15);
  }

  sub_10000AF74();
}

void sub_100013FB0()
{
}

void sub_100013FC4()
{
}

void sub_100013FD8()
{
  if ((v4 & 1) != 0)
  {
    sub_10001BAE0();
    if (v8 != v9)
    {
      sub_10001BB10();
      if (v8)
      {
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  else
  {
    uint64_t v7 = v3;
  }

  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    uint64_t v12 = sub_10001BB9C(v2, v3, v4, v5, v6);
    uint64_t v13 = (char *)sub_10000C254(v12, 40 * v11 + 32);
    size_t v14 = j__malloc_size(v13);
    sub_10001BDE4(v14 - 32);
  }

  else
  {
    uint64_t v13 = (char *)_swiftEmptyArrayStorage;
  }

  if ((v1 & 1) != 0)
  {
    sub_100015C50((char *)(v0 + 32), v10, v13 + 32);
    sub_10001BAC4();
  }

  else
  {
    uint64_t v15 = sub_10001BC34();
    sub_1000158E8(v15, v16, v17, v18, v19);
  }

  sub_10001BAF0();
}

void sub_100014084()
{
}

void sub_1000140A0()
{
}

void sub_1000140B4()
{
  if ((v4 & 1) != 0)
  {
    sub_10001BAE0();
    if (v8 != v9)
    {
      sub_10001BB10();
      if (v8)
      {
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  else
  {
    uint64_t v7 = v3;
  }

  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    uint64_t v12 = sub_10001BB9C(v2, v3, v4, v5, v6);
    uint64_t v13 = (char *)sub_10000C254(v12, 24 * v11 + 32);
    size_t v14 = j__malloc_size(v13);
    sub_10001BDE4(v14 - 32);
  }

  else
  {
    uint64_t v13 = (char *)_swiftEmptyArrayStorage;
  }

  if ((v1 & 1) != 0)
  {
    sub_100015B34((char *)(v0 + 32), v10, v13 + 32);
    sub_10001BAC4();
  }

  else
  {
    uint64_t v15 = sub_10001BC34();
    sub_1000151F8(v15, v16, v17, v18);
  }

  sub_10001BAF0();
}

void sub_100014160()
{
}

void sub_100014174()
{
}

void sub_100014190()
{
}

void sub_1000141A4()
{
}

void sub_1000141B8()
{
}

void sub_1000141D4()
{
}

void sub_1000141F0()
{
  if ((v2 & 1) != 0)
  {
    sub_10001BAE0();
    if (v3 != v4)
    {
      sub_10001BB10();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  sub_10001BD7C();
  if (v1)
  {
    uint64_t v10 = sub_10001BB9C(v5, v6, v7, v8, v9);
    uint64_t v11 = (void *)sub_10000C254(v10, 40LL * (void)v1 + 32);
    size_t v5 = sub_10001C18C(v11);
  }

  else
  {
    char v1 = _swiftEmptyArrayStorage;
  }

  if ((v0 & 1) != 0)
  {
    sub_10001BD00();
    sub_10001BAC4();
  }

  else
  {
    sub_10001BBA4(v5, v6, (uint64_t)(v1 + 4));
  }

  sub_10001BE4C();
}

void sub_100014280()
{
}

void sub_100014294()
{
  if ((v7 & 1) != 0)
  {
    sub_10001BAE0();
    if (v11 != v12)
    {
      sub_10001BB10();
      if (v11)
      {
        __break(1u);
LABEL_22:
        sub_10001BAA4();
        uint64_t v26 = "Division by zero";
        uint64_t v27 = 16LL;
LABEL_24:
        sub_10001C160((uint64_t)"Fatal error", 11LL, 2LL, (uint64_t)v26, v27, v25, (uint64_t)"Swift/IntegerTypes.swift");
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  else
  {
    uint64_t v10 = v6;
  }

  uint64_t v13 = *(void *)(v0 + 16);
  if (v10 <= v13) {
    uint64_t v14 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v14 = v10;
  }
  if (!v14) {
    goto LABEL_17;
  }
  sub_10001BB9C(v5, v6, v7, v8, v9);
  uint64_t v15 = v1(0LL);
  uint64_t v16 = (const void *)sub_10001BC10(v15);
  size_t v17 = j__malloc_size(v16);
  if (!v3) {
    goto LABEL_22;
  }
  if (v17 - v4 == 0x8000000000000000LL && v3 == -1)
  {
    sub_10001BAA4();
    uint64_t v26 = "Division results in an overflow";
    uint64_t v27 = 31LL;
    goto LABEL_24;
  }

  sub_10001BDE4(v17 - v4);
LABEL_17:
  v1(0LL);
  sub_10001BF90();
  if ((v2 & 1) != 0)
  {
    sub_100015E70(v0 + v19, v13);
    sub_10001BAC4();
  }

  else
  {
    uint64_t v20 = sub_10001BC34();
    sub_1000159C8(v20, v21, v22, v23, v24);
  }

  sub_10001BD30();
}

void sub_1000143CC()
{
}

void sub_1000143E0()
{
  if ((v6 & 1) != 0)
  {
    sub_10001BAE0();
    if (v10 != v11)
    {
      sub_10001BB10();
      if (v10)
      {
        __break(1u);
LABEL_22:
        sub_10001BAA4();
        uint64_t v25 = "Division by zero";
        uint64_t v26 = 16LL;
LABEL_24:
        sub_10001C160((uint64_t)"Fatal error", 11LL, 2LL, (uint64_t)v25, v26, v24, (uint64_t)"Swift/IntegerTypes.swift");
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  else
  {
    uint64_t v9 = v5;
  }

  uint64_t v12 = *(void *)(v0 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (!v13) {
    goto LABEL_17;
  }
  sub_10001BB9C(v4, v5, v6, v7, v8);
  uint64_t v14 = sub_10001C1C4();
  uint64_t v15 = (const void *)sub_10001BC10(v14);
  size_t v16 = j__malloc_size(v15);
  if (!v2) {
    goto LABEL_22;
  }
  if (v16 - v3 == 0x8000000000000000LL && v2 == -1)
  {
    sub_10001BAA4();
    uint64_t v25 = "Division results in an overflow";
    uint64_t v26 = 31LL;
    goto LABEL_24;
  }

  sub_10001BDE4(v16 - v3);
LABEL_17:
  sub_10001C1C4();
  sub_10001BF90();
  if ((v1 & 1) != 0)
  {
    sub_100015F04(v0 + v18, v12);
    sub_10001BAC4();
  }

  else
  {
    uint64_t v19 = sub_10001BC34();
    sub_100014F40(v19, v20, v21, v22, v23);
  }

  sub_10001BD30();
}

void sub_100014510()
{
}

void sub_100014524()
{
}

void sub_100014538()
{
}

void sub_10001454C()
{
}

void sub_100014568()
{
  if ((v3 & 1) != 0)
  {
    sub_10001BAE0();
    if (v4 != v5)
    {
      sub_10001BB10();
      if (v4)
      {
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  sub_10001BD7C();
  if (v2)
  {
    uint64_t v11 = sub_10001BB9C(v6, v7, v8, v9, v10);
    uint64_t v12 = (void *)sub_10000C254(v11, (v2 << 6) | 0x20);
    size_t v6 = j__malloc_size(v12);
    v12[2] = v1;
    v12[3] = 2 * ((uint64_t)(v6 - 32) / 64);
  }

  else
  {
    uint64_t v12 = _swiftEmptyArrayStorage;
  }

  if ((v0 & 1) != 0)
  {
    sub_10001BD00();
    sub_10001BAC4();
  }

  else
  {
    sub_10001BBA4(v6, v7, (uint64_t)(v12 + 4));
  }

  sub_10001BAF0();
}

void sub_100014608()
{
}

void sub_100014624()
{
  if ((v2 & 1) != 0)
  {
    sub_10001BAE0();
    if (v3 != v4)
    {
      sub_10001BB10();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  sub_10001BD7C();
  if (v1)
  {
    uint64_t v10 = sub_10001BB9C(v5, v6, v7, v8, v9);
    uint64_t v11 = (void *)sub_10000C254(v10, 24LL * (void)v1 + 32);
    size_t v5 = sub_10001C18C(v11);
  }

  else
  {
    uint64_t v1 = _swiftEmptyArrayStorage;
  }

  if ((v0 & 1) != 0)
  {
    sub_10001BD00();
    sub_10001BAC4();
  }

  else
  {
    sub_10001BBA4(v5, v6, (uint64_t)(v1 + 4));
  }

  sub_10001BE4C();
}

void sub_1000146B4()
{
}

void sub_1000146C8()
{
  if ((v2 & 1) != 0)
  {
    sub_10001BAE0();
    if (v3 != v4)
    {
      sub_10001BB10();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  sub_10001BBC4();
  if (v1)
  {
    uint64_t v5 = sub_100008DB0(&qword_100130F40);
    uint64_t v6 = (void *)sub_10000C254(v5, 104 * v1 + 32);
    sub_10001C11C(v6);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v7 = (char *)sub_10001BEC8();
    sub_100015D1C(v7, v8, v9);
    sub_10001BAC4();
  }

  else
  {
    uint64_t v10 = sub_10001BBB4();
    sub_1000152BC(v10, v11, v12, v13);
  }

  sub_10001BAF0();
}

void sub_100014764()
{
}

void sub_100014780()
{
  if ((v3 & 1) != 0)
  {
    sub_10001BAE0();
    if (v4 != v5)
    {
      sub_10001BB10();
      if (v4)
      {
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  sub_10001BD7C();
  if (v2)
  {
    uint64_t v11 = sub_10001BB9C(v6, v7, v8, v9, v10);
    unint64_t v12 = (void *)sub_10000C254(v11, 16 * v2 + 32);
    size_t v6 = j__malloc_size(v12);
    v12[2] = v1;
    v12[3] = 2 * ((uint64_t)(v6 - 32) / 16);
  }

  else
  {
    unint64_t v12 = _swiftEmptyArrayStorage;
  }

  if ((v0 & 1) != 0)
  {
    sub_10001BD00();
    sub_10001BAC4();
  }

  else
  {
    sub_10001BBA4(v6, v7, (uint64_t)(v12 + 4));
  }

  sub_10001BAF0();
}

void sub_100014820()
{
  if ((v2 & 1) != 0)
  {
    sub_10001BAE0();
    if (v3 != v4)
    {
      sub_10001BB10();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  sub_10001BBC4();
  if (v1)
  {
    uint64_t v5 = sub_100008DB0(&qword_100130EF8);
    size_t v6 = (void *)sub_10000C254(v5, 8 * v1 + 32);
    sub_10001BFA8(v6);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v7 = (char *)sub_10001BEC8();
    sub_100015D88(v7, v8, v9);
    sub_10001BAC4();
  }

  else
  {
    uint64_t v10 = sub_10001BBB4();
    sub_1000154CC(v10, v11, v12, v13);
  }

  sub_10000AF74();
}

void sub_1000148B4()
{
  if ((v2 & 1) != 0)
  {
    sub_10001BAE0();
    if (v3 != v4)
    {
      sub_10001BB10();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  sub_10001BBC4();
  if (v1)
  {
    uint64_t v5 = sub_100008DB0(&qword_100130F00);
    size_t v6 = (void *)sub_10000C254(v5, 8 * v1 + 32);
    sub_10001BFA8(v6);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v7 = (char *)sub_10001BEC8();
    sub_100015D88(v7, v8, v9);
    sub_10001BAC4();
  }

  else
  {
    uint64_t v10 = sub_10001BBB4();
    sub_1000155BC(v10, v11, v12, v13);
  }

  sub_10000AF74();
}

void sub_100014948()
{
}

void sub_100014964()
{
  if ((v2 & 1) != 0)
  {
    sub_10001BAE0();
    if (v3 != v4)
    {
      sub_10001BB10();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  sub_10001BBC4();
  if (v1)
  {
    uint64_t v5 = sub_100008DB0(&qword_100130FE0);
    size_t v6 = (void *)sub_10000C254(v5, 48 * v1 + 32);
    sub_10001C11C(v6);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v7 = (char *)sub_10001BEC8();
    sub_100015DE4(v7, v8, v9);
    sub_10001BAC4();
  }

  else
  {
    uint64_t v10 = sub_10001BBB4();
    sub_1000157EC(v10, v11, v12, v13);
  }

  sub_10001BAF0();
}

void sub_100014A00()
{
}

void sub_100014A14()
{
}

uint64_t sub_100014A28(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 32 * a1 + 32;
  unint64_t v7 = a3 + 32 * v4;
  if (v6 >= v7 || v6 + 32 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100014B20(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 24 * a1 + 32;
  unint64_t v8 = a3 + 24 * v4;
  if (v7 >= v8 || v7 + 24 * v4 <= a3)
  {
    sub_100008DB0(&qword_100130FD0);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100014C3C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + (a1 << 6) + 32;
  unint64_t v7 = a3 + (v4 << 6);
  if (v6 >= v7 || v6 + (v4 << 6) <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100014D30(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 16 * a1 + 32;
  unint64_t v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100014E24(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 40 * a1 + 32;
  unint64_t v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_100008DB0(&qword_100130F60);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease();
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_100014F40(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (a2 - a1 < 0)
  {
LABEL_9:
    sub_10001BAA4();
    sub_10001BD58();
    goto LABEL_11;
  }

  sub_10001BB9C(a1, a2, a3, a4, a5);
  sub_10001BB6C();
  if (v7) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v6 > a3;
  }
  if (!v8)
  {
    sub_10001BF80();
    sub_10001198C();
    sub_10001BF0C();
    return;
  }

  sub_10001BAA4();
  sub_10001BD48();
LABEL_11:
  sub_10001BAB8(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  __break(1u);
}

uint64_t sub_100014FE8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + (a1 << 6) + 32;
  unint64_t v7 = a3 + (v4 << 6);
  if (v6 >= v7 || v6 + (v4 << 6) <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000150DC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 24 * a1 + 32;
  unint64_t v8 = a3 + 24 * v4;
  if (v7 >= v8 || v7 + 24 * v4 <= a3)
  {
    sub_100008DB0(&qword_100130F20);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000151F8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    sub_10001BAA4();
    sub_10001BD58();
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 24 * a1 + 32;
  unint64_t v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    sub_10001198C();
    return v6;
  }

  sub_10001BAA4();
  sub_10001BD48();
LABEL_11:
  uint64_t result = sub_10001BAB8(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  __break(1u);
  return result;
}

uint64_t sub_1000152BC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 104 * a1 + 32;
  unint64_t v7 = a3 + 104 * v4;
  if (v6 >= v7 || v6 + 104 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000153B8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 16 * a1 + 32;
  unint64_t v8 = a3 + 16 * v4;
  if (v7 >= v8 || v7 + 16 * v4 <= a3)
  {
    sub_100008DB0((uint64_t *)&unk_100130F30);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_1000154CC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = (char *)(a4 + 8 * a1 + 32);
  unint64_t v7 = &__dst[8 * v4];
  if (v6 >= v7 || &v6[8 * v4] <= __dst)
  {
    memcpy(__dst, v6, 8 * v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000155BC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 8 * a1 + 32;
  unint64_t v8 = a3 + 8 * v4;
  if (v7 >= v8 || v7 + 8 * v4 <= a3)
  {
    sub_100008DB0(&qword_100130F08);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000156D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t v10 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v11 = 51LL;
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 40 * a1 + 32;
  unint64_t v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_100008DB0(&qword_100130F70);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease();
    return v7;
  }

  uint64_t v10 = "UnsafeMutablePointer.initialize overlapping range";
  uint64_t v11 = 49LL;
LABEL_11:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v10,  v11,  2LL,  "Swift/UnsafePointer.swift",  25LL);
  __break(1u);
  return result;
}

uint64_t sub_1000157EC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 48 * a1 + 32;
  unint64_t v7 = a3 + 48 * v4;
  if (v6 >= v7 || v6 + 48 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000158E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    sub_10001BAA4();
    sub_10001BD58();
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 40 * a1 + 32;
  unint64_t v8 = a3 + 40 * v5;
  if (v7 >= v8 || v7 + 40 * v5 <= a3)
  {
    sub_10001BB9C(a1, a2, a3, a4, a5);
    swift_arrayInitWithCopy(a3);
    sub_10001198C();
    return v8;
  }

  sub_10001BAA4();
  sub_10001BD48();
LABEL_11:
  uint64_t result = sub_10001BAB8(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  __break(1u);
  return result;
}

void sub_1000159C8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(void))
{
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (a2 - a1 < 0)
  {
LABEL_9:
    sub_10001BAA4();
    sub_10001BD58();
    goto LABEL_11;
  }

  a5(0LL);
  sub_10001BB6C();
  if (v7) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v6 > a3;
  }
  if (!v8)
  {
    sub_10001BF80();
    sub_10001198C();
    sub_10001BF0C();
    return;
  }

  sub_10001BAA4();
  sub_10001BD48();
LABEL_11:
  sub_10001BAB8(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  __break(1u);
}

char *sub_100015A74(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10001BAA4();
    uint64_t result = (char *)sub_10001BA8C( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_10001BA7C(a3, result);
  }

  return result;
}

char *sub_100015AD4(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10001BAA4();
    uint64_t result = (char *)sub_10001BA8C( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_10001BA7C(a3, result);
  }

  return result;
}

char *sub_100015B34(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10001BAA4();
    uint64_t result = (char *)sub_10001BA8C( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_10001BA7C(a3, result);
  }

  return result;
}

void sub_100015B94(uint64_t a1, uint64_t a2)
{
}

char *sub_100015BA0(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10001BAA4();
    uint64_t result = (char *)sub_10001BA8C( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[64 * a2] <= a3)
  {
    return (char *)sub_10001BA7C(a3, result);
  }

  return result;
}

char *sub_100015BF8(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10001BAA4();
    uint64_t result = (char *)sub_10001BA8C( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_10001BA7C(a3, result);
  }

  return result;
}

char *sub_100015C50(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10001BAA4();
    uint64_t result = (char *)sub_10001BA8C( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_10001BA7C(a3, result);
  }

  return result;
}

char *sub_100015CB0(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10001BAA4();
    uint64_t result = (char *)sub_10001BA8C( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[48 * a2] <= a3)
  {
    return (char *)sub_10001BA7C(a3, result);
  }

  return result;
}

void sub_100015D10(uint64_t a1, uint64_t a2)
{
}

char *sub_100015D1C(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10001BAA4();
    uint64_t result = (char *)sub_10001BA8C( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[104 * a2] <= a3)
  {
    return (char *)sub_10001BA7C(a3, result);
  }

  return result;
}

void sub_100015D7C(uint64_t a1, uint64_t a2)
{
}

char *sub_100015D88(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10001BAA4();
    uint64_t result = (char *)sub_10001BA8C( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_10001BA7C(a3, result);
  }

  return result;
}

char *sub_100015DE4(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[48 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 48 * a2);
  }

  return __src;
}

void sub_100015E70(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10001BAA4();
    sub_10001BA8C( (uint64_t)"Fatal error",  v7,  v8,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v9,  v10,  (uint64_t)"Swift/UnsafePointer.swift",  v11,  v12,  v13,  v14);
    __break(1u);
  }

  else
  {
    sub_10001BF44();
    if (v5 && (v4(0LL), sub_10001C0FC(), !v6 & v5))
    {
      if (v3 == v2)
      {
        sub_10001BF0C();
      }

      else
      {
        sub_10001BBFC();
        sub_10001BC94();
      }
    }

    else
    {
      v4(0LL);
      sub_10001BBFC();
      sub_10001BCA4();
    }
  }

void sub_100015EF8(uint64_t a1, uint64_t a2)
{
}

void sub_100015F04(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10001BAA4();
    sub_10001BA8C( (uint64_t)"Fatal error",  v7,  v8,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v9,  v10,  (uint64_t)"Swift/UnsafePointer.swift",  v11,  v12,  v13,  v14);
    __break(1u);
  }

  else
  {
    sub_10001BF44();
    if (v5 && (sub_100008DB0(v4), sub_10001C0FC(), !v6 & v5))
    {
      if (v3 == v2)
      {
        sub_10001BF0C();
      }

      else
      {
        sub_10001BBFC();
        sub_10001BC94();
      }
    }

    else
    {
      sub_100008DB0(v4);
      sub_10001BBFC();
      sub_10001BCA4();
    }
  }

uint64_t sub_100015F8C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100015F98(uint64_t a1, uint64_t a2)
{
  return sub_1000161C4( a1,  a2,  (void (*)(_BYTE *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1000162AC);
}

unint64_t sub_100015FB0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    Hasher._combine(_:)(1u);
    uint64_t v4 = sub_10001BEF8();
    sub_10001C02C(v4);
    sub_100011958();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Swift::Int v5 = sub_10001BC48();
  return sub_10001638C(a1, a2, v5);
}

uint64_t sub_100016020(uint64_t a1)
{
  uint64_t v1 = sub_10001BF1C(a1);
  uint64_t v2 = sub_10001BEAC(v1);
  sub_10001C01C((uint64_t)v2);
  sub_10001BC48();
  sub_10001BE7C();
  uint64_t v3 = sub_10001BF00();
  return sub_100016F94(v3, v4);
}

unint64_t sub_100016078()
{
  unint64_t v1 = sub_10001C004();
  return sub_100016454(v1, v2, v3, v4, v5);
}

unint64_t sub_1000160E0()
{
  uint64_t v3 = sub_10001BEF8();
  sub_10001C02C(v3);
  sub_100011958();
  sub_10001BC48();
  uint64_t v4 = sub_10001C004();
  return sub_100016594(v4, v5, v6, v7, v8);
}

unint64_t sub_100016144(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  sub_100008C18( &qword_100130E40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10001668C(a1, v7);
}

uint64_t sub_1000161B0(uint64_t a1, uint64_t a2)
{
  return sub_1000161C4(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))&Data.hash(into:), sub_1000167CC);
}

uint64_t sub_1000161C4( uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Swift::Int v7 = sub_10001BC48();
  return a4(a1, a2, v7);
}

unint64_t sub_100016230(uint64_t a1)
{
  uint64_t v1 = sub_10001BF1C(a1);
  uint64_t v2 = sub_10001BEAC(v1);
  sub_10001C01C((uint64_t)v2);
  sub_10001BC48();
  sub_10001BE7C();
  uint64_t v3 = sub_10001BF00();
  return sub_1000170AC(v3, v4);
}

unint64_t sub_10001627C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100017220(a1, v4);
}

unint64_t sub_1000162AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        int v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_10001638C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = ~v5;
    uint64_t v10 = *(void *)(v3 + 48);
    do
    {
      uint64_t v11 = (void *)(v10 + 16 * v6);
      uint64_t v12 = v11[1];
      if (v12)
      {
        if (a2)
        {
          BOOL v13 = *v11 == a1 && v12 == a2;
          if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0LL) & 1) != 0) {
            return v6;
          }
        }
      }

      else if (!a2)
      {
        return v6;
      }

      unint64_t v6 = (v6 + 1) & v9;
    }

    while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
  }

  return v6;
}

unint64_t sub_100016454(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = a5 & ~v7;
  if (((*(void *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
  {
    uint64_t v13 = *(void *)(v5 + 48);
    if ((sub_100075604( *(void *)(v13 + 32 * v8),  *(void *)(v13 + 32 * v8 + 8),  *(void *)(v13 + 32 * v8 + 16),  *(void *)(v13 + 32 * v8 + 24),  a1,  a2,  a3,  a4) & 1) == 0)
    {
      uint64_t v14 = ~v7;
      unint64_t v8 = (v8 + 1) & v14;
      if (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
      {
        unint64_t v15 = a2 >> 16;
        do
        {
          BOOL v16 = (void *)(v13 + 32 * v8);
          uint64_t v17 = v16[2];
          if (v17 == a3 && v16[3] == a4 && *v16 >> 16 == a1 >> 16 && v16[1] >> 16 == v15) {
            break;
          }
          if ((_stringCompareInternal(_:_:_:_:expecting:)(v17) & 1) != 0) {
            break;
          }
          unint64_t v8 = (v8 + 1) & v14;
        }

        while (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0);
      }
    }
  }

  return v8;
}

unint64_t sub_100016594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = a5 & ~v7;
  if (((*(void *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
  {
    uint64_t v13 = ~v7;
    uint64_t v14 = *(void *)(v5 + 48);
    do
    {
      unint64_t v15 = (void *)(v14 + 32 * v8);
      uint64_t v16 = v15[1];
      uint64_t v17 = v15[2];
      uint64_t v18 = v15[3];
      BOOL v19 = *v15 == a1 && v16 == a2;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v15, v16, a1, a2, 0LL) & 1) != 0)
      {
        BOOL v20 = v17 == a3 && v18 == a4;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, a3, a4, 0LL) & 1) != 0) {
          break;
        }
      }

      unint64_t v8 = (v8 + 1) & v13;
    }

    while (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0);
  }

  return v8;
}

unint64_t sub_10001668C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v18 = a1;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      sub_100008C18( &qword_100130E48,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

uint64_t sub_1000167CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v5 = a3 & ~v4;
  if (((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
    __asm { BR              X8 }
  }

  return a3 & ~v4;
}

uint64_t sub_100016F94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  uint64_t v5 = a2 & ~v4;
  sub_10001BE04();
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = sub_10001C1B0();
    uint64_t v8 = sub_10001C1E8();
    if (v7 == v8 && v3 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v3, 2LL);
      return v5;
    }

    char v11 = sub_10001BB00(v7, v3, v8, v9);
    sub_10001BC70();
    sub_10001BE7C();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      uint64_t v5 = (v5 + 1) & v12;
      sub_10001BE04();
      if ((v13 & 1) != 0)
      {
        while (1)
        {
          uint64_t v14 = sub_10001C1B0();
          uint64_t v15 = sub_10001C1E8();
          if (v14 == v15 && v3 == v16) {
            break;
          }
          char v18 = sub_10001BB00(v14, v3, v15, v16);
          sub_10001BC70();
          sub_10000AEE8();
          if ((v18 & 1) == 0)
          {
            uint64_t v5 = (v5 + 1) & v12;
            sub_10001BE04();
            if ((v19 & 1) != 0) {
              continue;
            }
          }

          return v5;
        }

        goto LABEL_16;
      }
    }
  }

  return v5;
}

unint64_t sub_1000170AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2LL);
      return v5;
    }

    uint64_t v13 = v11;
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = ~v4;
      unint64_t v5 = (v5 + 1) & v15;
      if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
      {
        while (1)
        {
          uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
          uint64_t v9 = v17;
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19) {
            break;
          }
          uint64_t v21 = v19;
          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0LL);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v15;
            if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
              continue;
            }
          }

          return v5;
        }

        goto LABEL_16;
      }
    }
  }

  return v5;
}

unint64_t sub_100017220(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    sub_10000A1A0(0LL, (unint64_t *)&qword_100130BA0, &OBJC_CLASS___LNSystemProtocol_ptr);
    id v7 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v8 = static NSObject.== infix(_:_:)(v7, a1);

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = static NSObject.== infix(_:_:)(v10, a1);

        if ((v11 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

unint64_t sub_100017338()
{
  uint64_t v2 = v0;
  char v4 = v3;
  sub_10001C140();
  sub_100008DB0(&qword_100130BF0);
  uint64_t v5 = sub_10001BF00();
  uint64_t v7 = sub_10001BCEC(v5, v6);
  if (v1[2])
  {
    uint64_t v30 = v2;
    sub_10001C208();
    char v8 = v1 + 8;
    sub_10001C0AC();
    unint64_t v11 = v10 & v9;
    int64_t v13 = (unint64_t)(v12 + 63) >> 6;
    unint64_t result = sub_10001BE38();
    int64_t v15 = 0LL;
    if (!v11) {
      goto LABEL_4;
    }
LABEL_3:
    unint64_t v16 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (unint64_t i = v16 | (v15 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v15 << 6))
    {
      uint64_t v21 = (uint64_t *)(v1[6] + 16 * i);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      uint64_t v24 = *(void **)(v1[7] + 8 * i);
      if ((v4 & 1) == 0)
      {
        id v25 = v24;
        sub_10001BCF8();
      }

      unint64_t result = sub_100017BC0(v23, v22, (uint64_t)v24, v7);
      if (v11) {
        goto LABEL_3;
      }
LABEL_4:
      int64_t v18 = v15 + 1;
      if (__OFADD__(v15, 1LL))
      {
        __break(1u);
LABEL_27:
        __break(1u);
        return result;
      }

      if (v18 >= v13) {
        goto LABEL_20;
      }
      unint64_t v19 = v8[v18];
      ++v15;
      if (!v19)
      {
        int64_t v15 = v18 + 1;
        if (v18 + 1 >= v13) {
          goto LABEL_20;
        }
        unint64_t v19 = v8[v15];
        if (!v19)
        {
          int64_t v20 = v18 + 2;
          if (v20 >= v13)
          {
LABEL_20:
            sub_10001BB08();
            uint64_t v2 = v30;
            if ((v4 & 1) != 0)
            {
              sub_10001C0C0();
              if (v28 ^ v29 | v27) {
                *char v8 = -1LL << v26;
              }
              else {
                sub_100017CAC(0LL, (unint64_t)(v26 + 63) >> 6, v1 + 8);
              }
              v1[2] = 0LL;
            }

            break;
          }

          unint64_t v19 = v8[v20];
          if (!v19)
          {
            while (1)
            {
              int64_t v15 = v20 + 1;
              if (__OFADD__(v20, 1LL)) {
                goto LABEL_27;
              }
              if (v15 >= v13) {
                goto LABEL_20;
              }
              unint64_t v19 = v8[v15];
              ++v20;
              if (v19) {
                goto LABEL_15;
              }
            }
          }

          int64_t v15 = v20;
        }
      }

LABEL_15:
      unint64_t v11 = (v19 - 1) & v19;
    }
  }

  unint64_t result = sub_10001BB08();
  *uint64_t v2 = v7;
  return result;
}

      sub_10001C074();
    }
  }

  sub_10001BB08();
  *char v3 = v5;
  sub_10001BCB4();
}

      sub_10001C074();
    }
  }

  sub_10001BB08();
  *char v4 = a2;
}

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(a5);
}

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  uint64_t v12 = iCol;
  _StringGuts.grow(_:)(27LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  HIDWORD(v19) = v12;
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  object = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(object);
  LODWORD(v19) = 0;
  sub_1000EC044( (uint64_t)"Fatal error",  v15,  v16,  0xD000000000000019LL,  0x80000001000FCF40LL,  (uint64_t)"AppIntents_SQLite/Statement.swift",  v17,  v18,  316LL,  v19);
  __break(1u);
  JUMPOUT(0x1000EA9D0LL);
}

void sub_1000174E4(uint64_t a1, uint64_t a2)
{
}

void sub_1000174F0(uint64_t a1, uint64_t a2)
{
}

void sub_1000174FC(uint64_t a1, uint64_t a2)
{
}

void sub_100017508(uint64_t a1, uint64_t a2)
{
}

void sub_100017514(uint64_t a1, uint64_t a2)
{
}

void sub_100017520(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (v6)
  {
    sub_10001BE84();
    if (v7 < 64) {
      uint64_t v9 = ~(-1LL << v7);
    }
    else {
      uint64_t v9 = -1LL;
    }
    uint64_t v10 = v9 & v8;
    uint64_t v39 = v3;
    int64_t v40 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 64;
    id v12 = (id)sub_10001BE38();
    int64_t v17 = 0LL;
    if (!v10) {
      goto LABEL_7;
    }
LABEL_6:
    sub_10001C1F4();
    for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
    {
      uint64_t v23 = (uint64_t *)(v4[6] + 16 * i);
      uint64_t v25 = *v23;
      uint64_t v24 = v23[1];
      uint64_t v26 = *(void **)(v4[7] + 8 * i);
      if ((v42 & 1) == 0)
      {
        sub_10001BCF8();
        id v12 = v26;
      }

      sub_10001C1DC((uint64_t)v12, v13, v14, v15, v16);
      String.hash(into:)(v43, v25, v24);
      unint64_t v27 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(v5 + 32));
      if (((-1LL << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) == 0)
      {
        sub_10001BB30();
        while (1)
        {
          sub_10001BF64();
          if (v31)
          {
            if ((v28 & 1) != 0) {
              break;
            }
          }

          if (v29 == v30) {
            uint64_t v29 = 0LL;
          }
          if (*(void *)(v11 + 8 * v29) != -1LL)
          {
            sub_10001BB1C();
            goto LABEL_31;
          }
        }

        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        return;
      }

      sub_10001BB44();
LABEL_31:
      sub_10001BDB0();
      *(void *)(v11 + v32) |= v33;
      uint64_t v35 = (void *)(*(void *)(v5 + 48) + 16 * v34);
      *uint64_t v35 = v25;
      v35[1] = v24;
      *(void *)(*(void *)(v5 + 56) + 8 * v34) = v26;
      sub_10001BDA0();
      if (v10) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v20 = v17 + 1;
      if (__OFADD__(v17, 1LL)) {
        goto LABEL_40;
      }
      if (v20 >= v40) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v41 + 8 * v20);
      ++v17;
      if (!v21)
      {
        int64_t v17 = v20 + 1;
        if (v20 + 1 >= v40) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v41 + 8 * v17);
        if (!v21)
        {
          int64_t v22 = v20 + 2;
          if (v22 >= v40)
          {
LABEL_33:
            sub_10001BB08();
            char v3 = v39;
            if ((v42 & 1) != 0)
            {
              sub_10001BD8C();
              if (v37 != v38) {
                sub_10001BEE8(v36);
              }
              else {
                sub_10001BBD4(v36);
              }
              v4[2] = 0LL;
            }

            break;
          }

          unint64_t v21 = *(void *)(v41 + 8 * v22);
          if (!v21)
          {
            while (1)
            {
              int64_t v17 = v22 + 1;
              if (__OFADD__(v22, 1LL)) {
                goto LABEL_41;
              }
              if (v17 >= v40) {
                goto LABEL_33;
              }
              unint64_t v21 = *(void *)(v41 + 8 * v17);
              ++v22;
              if (v21) {
                goto LABEL_18;
              }
            }
          }

          int64_t v17 = v22;
        }
      }

LABEL_18:
      uint64_t v10 = (v21 - 1) & v21;
    }
  }

  sub_10001BB08();
  *char v3 = v5;
  sub_10001BCB4();
}

    uint64_t v11 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    char v31 = v16;
  }

  __break(1u);
}

  swift_release_n(v22, 2LL);
  swift_release();
  return v23;
}

  swift_release_n(v22, 2LL);
  swift_release();
  return v23;
}

  swift_release_n(v22, 2LL);
  swift_release();
  return v23;
}

    uint64_t v56 = (v16 - 1) & v16;
    uint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
    uint64_t v54 = v17;
  }

  __break(1u);
}

    id v12 = (v16 - 1) & v16;
    uint64_t v41 = v17;
  }

  uint64_t v18 = v6 + 4;
  if (v6 + 4 >= v36)
  {
LABEL_25:
    swift_release(v40);
    return;
  }

  uint64_t v16 = *(void *)(v35 + 8 * v18);
  if (v16)
  {
    int64_t v17 = v6 + 4;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v17 >= v36) {
      goto LABEL_25;
    }
    uint64_t v16 = *(void *)(v35 + 8 * v17);
    ++v18;
    if (v16) {
      goto LABEL_18;
    }
  }

      uint64_t v11 = (v14 - 1) & v14;
    }

    uint64_t v159 = v18 & 0xC000000000000001LL;
    int64_t v20 = 4LL;
    uint64_t v148 = v18;
    uint64_t v153 = v17;
    uint64_t v158 = v19;
    while (1)
    {
      unint64_t v21 = v159
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20 - 4, v18)
          : *(id *)(v18 + 8 * v20);
      int64_t v22 = v20 - 3;
      if (__OFADD__(v20 - 4, 1LL)) {
        break;
      }
      uint64_t v23 = v21;
      uint64_t v24 = [v21 key];
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      unint64_t v27 = v26;

      if (*(void *)(v3 + 16) && (v161 = v23, char v28 = sub_100015F98(v25, v27), (v29 & 1) != 0))
      {
        uint64_t v30 = *(void *)(*(void *)(v3 + 56) + 8 * v28);
        sub_10001C064();
        sub_10001DEC4();
        sub_100027FA0();
        sub_100075674((uint64_t)v151, 0LL);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
        uint64_t v32 = v17;
        uint64_t v33 = isUniquelyReferenced_nonNull_native;
        sub_100015F98(v155, v32);
        sub_10007623C();
        if (v36) {
          goto LABEL_129;
        }
        char v37 = v34;
        char v38 = v35;
        sub_100008DB0(&qword_100132BD0);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v33, (Swift::Int)_swiftEmptyDictionarySingleton))
        {
          uint64_t v39 = sub_100015F98(v155, v153);
          if ((v38 & 1) != (v40 & 1)) {
            goto LABEL_139;
          }
          char v37 = v39;
        }

        sub_10006C9B8();
        if ((v38 & 1) == 0)
        {
          uint64_t v41 = v30;
          sub_100076048();
          *char v42 = v155;
          v42[1] = v153;
          *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v37) = _swiftEmptyArrayStorage;
          char v43 = _swiftEmptyDictionarySingleton[2];
          char v44 = v43 + 1;
          char v45 = __OFADD__(v43, 1LL);
          sub_10000AFB0();
          if (v45) {
            goto LABEL_133;
          }
          _swiftEmptyDictionarySingleton[2] = v44;
          uint64_t v30 = v41;
        }

        uint64_t v46 = v3;
        swift_bridgeObjectRetain();
        uint64_t v47 = _swiftEmptyDictionarySingleton[7];
        sub_10001198C();
        os_log_type_t v48 = *(void *)(v30 + 16);
        uint64_t v49 = *(void *)(v47 + 8 * v37);
        uint64_t v50 = *(void *)(v49 + 16);
        if (__OFADD__(v50, v48)) {
          goto LABEL_130;
        }
        uint64_t v51 = swift_isUniquelyReferenced_nonNull_native(*(void *)(v47 + 8 * v37));
        *(void *)(v47 + 8 * v37) = v49;
        if (!v51 || v50 + v48 > *(void *)(v49 + 24) >> 1)
        {
          sub_1000760F0();
          uint64_t v49 = v52;
          *(void *)(v47 + 8 * v37) = v52;
        }

        char v3 = v46;
        int64_t v22 = v20 - 3;
        if (*(void *)(v30 + 16))
        {
          uint64_t v53 = *(void *)(v49 + 16);
          if ((*(void *)(v49 + 24) >> 1) - v53 < v48) {
            goto LABEL_132;
          }
          uint64_t v54 = v49 + 16 * v53 + 32;
          if (v30 + 32 < v54 + 16 * v48 && v54 < v30 + 32 + 16 * v48) {
            goto LABEL_140;
          }
          swift_arrayInitWithCopy(v54);
          if (v48)
          {
            uint64_t v56 = *(void *)(v49 + 16);
            uint64_t v36 = __OFADD__(v56, v48);
            uint64_t v57 = v56 + v48;
            if (v36) {
              goto LABEL_134;
            }
            *(void *)(v49 + 1sub_10000AC58(v0 + 6) = v57;
          }
        }

        else if (v48)
        {
          goto LABEL_131;
        }

        swift_bridgeObjectRelease();
        *(void *)(v47 + 8 * v37) = v49;
        int64_t v17 = v153;
        sub_10001DED8();

        uint64_t v151 = sub_1000719E0;
        uint64_t v18 = v148;
      }

      else
      {

        sub_10001DEC4();
      }

      ++v20;
      if (v22 == v158) {
        goto LABEL_57;
      }
    }
  }

  else
  {
    uint64_t v137 = a1 + 64;
    sub_10007609C();
    uint64_t v61 = v60 & v59;
    v138 = (unint64_t)(v62 + 63) >> 6;
    swift_bridgeObjectRetain();
    uint64_t v63 = 0LL;
    uint64_t v64 = 0LL;
    uint64_t v9 = _swiftEmptyDictionarySingleton;
    if (!v61) {
      goto LABEL_65;
    }
LABEL_64:
    sub_1000762BC();
    for (j = v66 | (v65 << 6); ; j = __clz(__rbit64(v69)) + (v65 << 6))
    {
      v140 = v65;
      uint64_t v71 = (uint64_t *)(*(void *)(a1 + 48) + 16 * j);
      uint64_t v72 = *v71;
      uint64_t v73 = v71[1];
      id v149 = *(void *)(*(void *)(a1 + 56) + 8 * j);
      if ((unint64_t)v149 >> 62)
      {
        uint64_t v126 = v149 < 0 ? *(void *)(*(void *)(a1 + 56) + 8 * j) : v149 & 0xFFFFFFFFFFFFFF8LL;
        sub_100011A3C(v149);
        sub_100027FA0();
        uint64_t v74 = _CocoaArrayWrapper.endIndex.getter(v126);
        sub_10000AEE8();
      }

      else
      {
        uint64_t v74 = *(void *)((v149 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        swift_bridgeObjectRetain();
        sub_100027FA0();
      }

      id v139 = v61;
      if (v74) {
        break;
      }
LABEL_114:
      sub_10001DED8();
      swift_bridgeObjectRelease();
      uint64_t v61 = v139;
      uint64_t v64 = v140;
      if (v139) {
        goto LABEL_64;
      }
LABEL_65:
      os_log_type_t v68 = v64 + 1;
      if (__OFADD__(v64, 1LL)) {
        goto LABEL_135;
      }
      if (v68 >= v138)
      {
LABEL_120:
        swift_release();
        uint64_t v127 = 0LL;
LABEL_122:
        sub_100075674(v127, 0LL);
        sub_100075674((uint64_t)v63, 0LL);
        return (uint64_t)v9;
      }

      uint64_t v69 = *(void *)(v137 + 8 * v68);
      uint64_t v65 = v64 + 1;
      if (!v69)
      {
        uint64_t v65 = v68 + 1;
        if (v68 + 1 >= v138) {
          goto LABEL_120;
        }
        uint64_t v69 = *(void *)(v137 + 8 * v65);
        if (!v69)
        {
          uint64_t v65 = v68 + 2;
          if (v68 + 2 >= v138) {
            goto LABEL_120;
          }
          uint64_t v69 = *(void *)(v137 + 8 * v65);
          if (!v69)
          {
            uint64_t v70 = v68 + 3;
            if (v70 >= v138) {
              goto LABEL_120;
            }
            uint64_t v69 = *(void *)(v137 + 8 * v70);
            if (!v69)
            {
              while (1)
              {
                uint64_t v65 = v70 + 1;
                if (__OFADD__(v70, 1LL)) {
                  goto LABEL_137;
                }
                if (v65 >= v138) {
                  goto LABEL_120;
                }
                uint64_t v69 = *(void *)(v137 + 8 * v65);
                ++v70;
                if (v69) {
                  goto LABEL_78;
                }
              }
            }

            uint64_t v65 = v70;
          }
        }
      }

    uint64_t v10 = (v15 - 1) & v15;
  }

  uint64_t v16 = v14 + 3;
  if (v16 >= v27) {
    return (uint64_t)v3;
  }
  uint64_t v15 = *(void *)(v26 + 8 * v16);
  if (v15)
  {
    char v4 = v16;
    goto LABEL_18;
  }

  while (1)
  {
    char v4 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v4 >= v27) {
      return (uint64_t)v3;
    }
    uint64_t v15 = *(void *)(v26 + 8 * v4);
    ++v16;
    if (v15) {
      goto LABEL_18;
    }
  }

  sub_10001BC70();
  sub_10006C994();
}

  __break(1u);
}

    uint64_t v10 = (v15 - 1) & v15;
  }

  uint64_t v16 = v14 + 3;
  if (v16 >= v27) {
    return (uint64_t)v3;
  }
  uint64_t v15 = *(void *)(v26 + 8 * v16);
  if (v15)
  {
    char v4 = v16;
    goto LABEL_18;
  }

  while (1)
  {
    char v4 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v4 >= v27) {
      return (uint64_t)v3;
    }
    uint64_t v15 = *(void *)(v26 + 8 * v4);
    ++v16;
    if (v15) {
      goto LABEL_18;
    }
  }

    swift_bridgeObjectRelease();
    goto LABEL_19;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100026E14((uint64_t)&v89, &qword_100130EA0);
LABEL_19:
  uint64_t v39 = qword_100130330;
  int64_t v40 = a3;
  if (v39 != -1) {
    swift_once(&qword_100130330, sub_100091538);
  }
  uint64_t v41 = sub_100008D98(v5, (uint64_t)qword_100135860);
  char v42 = v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v14, v41, v5);

  char v44 = (os_log_s *)Logger.logObject.getter(v43);
  char v45 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v47 = swift_slowAlloc(32LL, -1LL);
    *(void *)&uint64_t v89 = v47;
    *(_DWORD *)uint64_t v46 = 136315138;
    id v91 = sub_10000DE60(0x4449656C646E7562LL, 0xE900000000000073LL, (uint64_t *)&v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v46 + 4, v46 + 12);
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Event ignored: empty name, userInfo or %s", v46, 0xCu);
    swift_arrayDestroy(v47, 1LL);
    swift_slowDealloc(v47, -1LL, -1LL);
    swift_slowDealloc(v46, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v42 + 8))(v14, v5);
  return sub_10000AC58(v92);
}

      sub_1000E3B0C();
      *(void *)(v2 + 12sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = *(void *)(v3 + 120);
      swift_bridgeObjectRetain();
      sub_10001BEF8();
      goto LABEL_23;
    }

    uint64_t v15 = *v10;
    *(_OWORD *)(v2 + 112) = *(_OWORD *)(v3 + 112);
LABEL_22:
    *uint64_t v8 = v15;
    goto LABEL_23;
  }

  if (!v9)
  {
    sub_1000E3808(0LL, qword_1001349C8);
    uint64_t v14 = *(_OWORD *)(v3 + 112);
    *uint64_t v8 = *v10;
    *(_OWORD *)(v2 + 112) = v14;
    goto LABEL_23;
  }

  *(void *)(v2 + 9sub_10000AC58(v0 + 6) = v9;
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_10001BC70();
  uint64_t v8 = (__int128 *)(v2 + 104);
  id v12 = *(void *)(v3 + 112);
  if (!*(void *)(v2 + 112))
  {
    if (v12) {
      goto LABEL_18;
    }
    uint64_t v15 = *(_OWORD *)(v3 + 104);
    *(void *)(v2 + 12sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = *(void *)(v3 + 120);
    goto LABEL_22;
  }

  if (v12)
  {
    sub_1000E3B0C();
    swift_bridgeObjectRetain();
    sub_10001BC70();
    *(void *)(v2 + 12sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = *(void *)(v3 + 120);
    swift_bridgeObjectRetain();
    sub_100011958();
  }

  else
  {
    sub_1000E3808(v11, &qword_1001347C8);
    sub_1000E3B40();
  }

    __break(1u);
    goto LABEL_19;
  }

  sub_10000AC58(v37);
  sub_1000D4A80(a1, (uint64_t)v37);
  uint64_t v33 = 0LL;
  uint64_t v34 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(27LL);
  swift_bridgeObjectRelease();
  uint64_t v35 = 0xD000000000000019LL;
  uint64_t v36 = 0x80000001000FCE70LL;
  sub_1000D4A80((uint64_t)v37, (uint64_t)&v33);
  uint64_t v26 = sub_100008DB0(&qword_100131978);
  v27._countAndFlagsBits = String.init<A>(describing:)(&v33, v26);
  String.append(_:)(v27);
  sub_10001198C();
  LODWORD(v32) = 0;
  unint64_t result = sub_1000E8034( (uint64_t)"Fatal error",  v28,  v29,  v35,  v36,  (uint64_t)"AppIntents_SQLite/Connection.swift",  v30,  v31,  756LL,  v32);
  __break(1u);
  return result;
}

void sub_10001772C(uint64_t a1, uint64_t a2)
{
}

void sub_100017738(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (v7)
  {
    sub_10001BE84();
    sub_10001BF70();
    uint64_t v35 = v8;
    uint64_t v9 = v5 + 64;
    sub_10001BE38();
    uint64_t v10 = 0LL;
    if (!v6) {
      goto LABEL_4;
    }
LABEL_3:
    sub_10001BD68();
    for (uint64_t i = v16 | (v10 << 6); ; uint64_t i = v20 + (v10 << 6))
    {
      uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * i);
      if ((v37 & 1) == 0)
      {
        sub_10001C1BC();
        uint64_t v11 = sub_10001BCF8();
      }

      sub_10001C1DC(v11, v12, v13, v14, v15);
      sub_10001C180((uint64_t)v38);
      unint64_t v22 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(v5 + 32));
      if (((-1LL << v22) & ~*(void *)(v9 + 8 * (v22 >> 6))) == 0)
      {
        sub_10001BB30();
        while (1)
        {
          sub_10001BF64();
          if (v26)
          {
            if ((v23 & 1) != 0) {
              break;
            }
          }

          if (v24 == v25) {
            uint64_t v24 = 0LL;
          }
          if (*(void *)(v9 + 8 * v24) != -1LL)
          {
            sub_10001BB1C();
            goto LABEL_28;
          }
        }

        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        return;
      }

      sub_10001BB44();
LABEL_28:
      sub_10001BDB0();
      *(void *)(v9 + v27) |= v28;
      sub_10001C0E8(v29);
      *(void *)(v31 + 8 * v3sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v21;
      sub_10001BDA0();
      if (v6) {
        goto LABEL_3;
      }
LABEL_4:
      uint64_t v18 = v10 + 1;
      if (__OFADD__(v10, 1LL)) {
        goto LABEL_37;
      }
      if (v18 >= v35) {
        goto LABEL_30;
      }
      ++v10;
      if (!*(void *)(v36 + 8 * v18))
      {
        uint64_t v10 = v18 + 1;
        if (v18 + 1 >= v35) {
          goto LABEL_30;
        }
        if (!*(void *)(v36 + 8 * v10))
        {
          uint64_t v19 = v18 + 2;
          if (v19 >= v35)
          {
LABEL_30:
            sub_10001BB08();
            if ((v37 & 1) != 0)
            {
              sub_10001BD8C();
              if (v33 != v34) {
                sub_10001BEE8(v32);
              }
              else {
                sub_10001BBD4(v32);
              }
              *(void *)(v4 + 1sub_10000AC58(v0 + 6) = 0LL;
            }

            break;
          }

          if (!*(void *)(v36 + 8 * v19))
          {
            while (1)
            {
              uint64_t v10 = v19 + 1;
              if (__OFADD__(v19, 1LL)) {
                goto LABEL_38;
              }
              if (v10 >= v35) {
                goto LABEL_30;
              }
              ++v19;
              if (*(void *)(v36 + 8 * v10)) {
                goto LABEL_15;
              }
            }
          }

          uint64_t v10 = v19;
        }
      }

void sub_100017920(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = sub_10001C1D4();
  uint64_t v39 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v2;
  sub_100008DB0(&qword_100130E90);
  uint64_t v10 = sub_10001BF00();
  int v40 = a2;
  sub_10001BCEC(v10, v11);
  sub_10001C110();
  if (v12)
  {
    uint64_t v38 = v9 + 64;
    sub_10001BF70();
    uint64_t v36 = v2;
    uint64_t v37 = v13;
    uint64_t v14 = a2 + 64;
    sub_10001BE38();
    uint64_t v15 = 0LL;
    if (!v3) {
      goto LABEL_4;
    }
LABEL_3:
    sub_10001BD68();
    for (uint64_t i = v16 | (v15 << 6); ; uint64_t i = v20 + (v15 << 6))
    {
      uint64_t v21 = *(void *)(v39 + 72);
      uint64_t v22 = *(void *)(v9 + 56) + v21 * i;
      if ((v40 & 1) != 0)
      {
        sub_10001B5C8(v22, (uint64_t)v8);
      }

      else
      {
        sub_10001B584(v22, (uint64_t)v8);
        sub_10001C1BC();
      }

      Hasher.init(_seed:)(v41, *(void *)(a2 + 40));
      sub_10001C180((uint64_t)v41);
      unint64_t v23 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(a2 + 32));
      if (((-1LL << v23) & ~*(void *)(v14 + 8 * (v23 >> 6))) == 0)
      {
        sub_10001BB30();
        while (1)
        {
          sub_10001BF64();
          if (v27)
          {
            if ((v24 & 1) != 0) {
              break;
            }
          }

          if (v25 == v26) {
            uint64_t v25 = 0LL;
          }
          if (*(void *)(v14 + 8 * v25) != -1LL)
          {
            sub_10001BB1C();
            goto LABEL_29;
          }
        }

        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return;
      }

      sub_10001BB44();
LABEL_29:
      sub_10001BDB0();
      *(void *)(v14 + v28) |= v29;
      sub_10001C0E8(v30);
      sub_10001B5C8((uint64_t)v8, v32 + v21 * v31);
      sub_10001BDA0();
      if (v3) {
        goto LABEL_3;
      }
LABEL_4:
      uint64_t v18 = v15 + 1;
      if (__OFADD__(v15, 1LL)) {
        goto LABEL_38;
      }
      if (v18 >= v37) {
        goto LABEL_31;
      }
      ++v15;
      if (!*(void *)(v38 + 8 * v18))
      {
        uint64_t v15 = v18 + 1;
        if (v18 + 1 >= v37) {
          goto LABEL_31;
        }
        if (!*(void *)(v38 + 8 * v15))
        {
          uint64_t v19 = v18 + 2;
          if (v19 >= v37)
          {
LABEL_31:
            sub_10001BB08();
            uint64_t v4 = v36;
            if ((v40 & 1) != 0)
            {
              sub_10001BD8C();
              if (v34 != v35) {
                sub_10001BEE8(v33);
              }
              else {
                sub_10001BBD4(v33);
              }
              *(void *)(v9 + 1sub_10000AC58(v0 + 6) = 0LL;
            }

            break;
          }

          if (!*(void *)(v38 + 8 * v19))
          {
            while (1)
            {
              uint64_t v15 = v19 + 1;
              if (__OFADD__(v19, 1LL)) {
                goto LABEL_39;
              }
              if (v15 >= v37) {
                goto LABEL_31;
              }
              ++v19;
              if (*(void *)(v38 + 8 * v15)) {
                goto LABEL_15;
              }
            }
          }

          uint64_t v15 = v19;
        }
      }

unint64_t sub_100017BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(a2);
    String.hash(into:)(v11, a1, a2);
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Swift::Int v8 = Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v8 & ~(-1LL << *(_BYTE *)(a4 + 32)), a4 + 64, ~(-1LL << *(_BYTE *)(a4 + 32)));
  *(void *)(a4 + 64 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  uint64_t v10 = (void *)(*(void *)(a4 + 48) + 16 * result);
  *uint64_t v10 = a1;
  v10[1] = a2;
  *(void *)(*(void *)(a4 + 56) + 8 * result) = a3;
  ++*(void *)(a4 + 16);
  return result;
}

uint64_t sub_100017CAC(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }

  return result;
}

uint64_t sub_100017CC8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v6 = v5;
  sub_10001B0C4(a1, a2, a3, &v44);
  uint64_t v43 = v44;
  uint64_t v41 = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v42 = a3;
  swift_retain(a3);
  uint64_t v11 = sub_10001B108();
  if (v12)
  {
    uint64_t v14 = v11;
    uint64_t v15 = v12;
    uint64_t v16 = v13;
    while (1)
    {
      int64_t v17 = (void *)*a5;
      unint64_t v19 = sub_1000161C4( v14,  v15,  (void (*)(_BYTE *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1000162AC);
      uint64_t v20 = v17[2];
      BOOL v21 = (v18 & 1) == 0;
      uint64_t v22 = v20 + v21;
      if (__OFADD__(v20, v21)) {
        break;
      }
      char v23 = v18;
      if (v17[3] >= v22)
      {
        if ((a4 & 1) == 0)
        {
          sub_100008DB0(&qword_100130DC8);
          _NativeDictionary.copy()();
        }
      }

      else
      {
        sub_100017738(v22, a4 & 1, &qword_100130DD0);
        uint64_t v24 = sub_1000161C4( v14,  v15,  (void (*)(_BYTE *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1000162AC);
        if ((v23 & 1) != (v25 & 1)) {
          goto LABEL_18;
        }
        unint64_t v19 = v24;
      }

      uint64_t v26 = (void *)*a5;
      if ((v23 & 1) != 0)
      {
        uint64_t v27 = *(void *)(v26[7] + 8 * v19);
        uint64_t v28 = swift_bridgeObjectRetain(v27);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v28);
        uint64_t v46 = v27;
        sub_100017F50(v16, (uint64_t)sub_10001B288, 0LL, isUniquelyReferenced_nonNull_native, &v46);
        if (v6) {
          goto LABEL_19;
        }
        uint64_t v6 = 0LL;
        uint64_t v30 = v46;
        swift_bridgeObjectRelease(0x8000000000000000LL);
        swift_bridgeObjectRelease(v15);
        uint64_t v31 = v26[7];
        swift_bridgeObjectRelease(*(void *)(v31 + 8 * v19));
        *(void *)(v31 + 8 * v19) = v30;
      }

      else
      {
        v26[(v19 >> 6) + 8] |= 1LL << v19;
        uint64_t v32 = (uint64_t *)(v26[6] + 16 * v19);
        *uint64_t v32 = v14;
        v32[1] = v15;
        *(void *)(v26[7] + 8 * v19) = v16;
        uint64_t v33 = v26[2];
        BOOL v34 = __OFADD__(v33, 1LL);
        uint64_t v35 = v33 + 1;
        if (v34) {
          goto LABEL_17;
        }
        void v26[2] = v35;
      }

      uint64_t v14 = sub_10001B108();
      uint64_t v15 = v36;
      uint64_t v16 = v37;
      a4 = 1;
      if (!v36) {
        goto LABEL_15;
      }
    }

    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
LABEL_19:
    uint64_t v40 = v46;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    uint64_t result = swift_bridgeObjectRelease(v40);
    __break(1u);
  }

  else
  {
LABEL_15:
    swift_bridgeObjectRelease(v41);
    uint64_t v38 = v45;
    swift_release(v42);
    sub_10001B100(v43);
    return swift_release(v38);
  }

  return result;
}

uint64_t sub_100017F50(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v47 = v48;
  uint64_t v45 = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v46 = a3;
  swift_retain(a3);
  uint64_t v9 = sub_10001B108();
  if (v10)
  {
    uint64_t v12 = v9;
    uint64_t v13 = v10;
    uint64_t v14 = v11;
    while (1)
    {
      uint64_t v15 = (void *)*a5;
      unint64_t v17 = sub_1000161C4( v12,  v13,  (void (*)(_BYTE *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1000162AC);
      uint64_t v18 = v15[2];
      BOOL v19 = (v16 & 1) == 0;
      uint64_t v20 = v18 + v19;
      if (__OFADD__(v18, v19)) {
        break;
      }
      char v21 = v16;
      if (v15[3] >= v20)
      {
        if ((a4 & 1) == 0)
        {
          sub_100008DB0(&qword_100130DD8);
          _NativeDictionary.copy()();
        }
      }

      else
      {
        sub_100017738(v20, a4 & 1, &qword_100130DE8);
        uint64_t v22 = sub_1000161C4( v12,  v13,  (void (*)(_BYTE *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1000162AC);
        if ((v21 & 1) != (v23 & 1)) {
          goto LABEL_36;
        }
        unint64_t v17 = v22;
      }

      uint64_t v24 = (void *)*a5;
      if ((v21 & 1) != 0)
      {
        uint64_t v25 = v24[7];
        uint64_t v26 = *(void *)(v25 + 8 * v17);
        uint64_t v27 = *(void *)(v14 + 16);
        uint64_t v28 = *(void *)(v26 + 16);
        if (__OFADD__(v28, v27)) {
          goto LABEL_31;
        }
        uint64_t v29 = swift_bridgeObjectRetain(*(void *)(v25 + 8 * v17));
        if (!swift_isUniquelyReferenced_nonNull_native(v29) || v28 + v27 > *(void *)(v26 + 24) >> 1)
        {
          sub_100013FD8();
          uint64_t v26 = v30;
        }

        if (*(void *)(v14 + 16))
        {
          uint64_t v31 = *(void *)(v26 + 16);
          if ((*(void *)(v26 + 24) >> 1) - v31 < v27) {
            goto LABEL_34;
          }
          unint64_t v32 = v26 + 40 * v31 + 32;
          if (v14 + 32 < v32 + 40 * v27 && v32 < v14 + 32 + 40 * v27) {
            goto LABEL_37;
          }
          sub_100008DB0(&qword_100130DE0);
          swift_arrayInitWithCopy(v32);
          if (v27)
          {
            uint64_t v34 = *(void *)(v26 + 16);
            BOOL v35 = __OFADD__(v34, v27);
            uint64_t v36 = v34 + v27;
            if (v35) {
              goto LABEL_35;
            }
            *(void *)(v26 + 1sub_10000AC58(v0 + 6) = v36;
          }
        }

        else if (v27)
        {
          goto LABEL_33;
        }

        swift_bridgeObjectRelease(v14);
        swift_bridgeObjectRelease(v13);
        uint64_t v40 = v24[7];
        swift_bridgeObjectRelease(*(void *)(v40 + 8 * v17));
        *(void *)(v40 + 8 * v17) = v26;
      }

      else
      {
        v24[(v17 >> 6) + 8] |= 1LL << v17;
        uint64_t v37 = (uint64_t *)(v24[6] + 16 * v17);
        uint64_t *v37 = v12;
        v37[1] = v13;
        *(void *)(v24[7] + 8 * v17) = v14;
        uint64_t v38 = v24[2];
        BOOL v35 = __OFADD__(v38, 1LL);
        uint64_t v39 = v38 + 1;
        if (v35) {
          goto LABEL_32;
        }
        v24[2] = v39;
      }

      uint64_t v12 = sub_10001B108();
      uint64_t v13 = v41;
      uint64_t v14 = v42;
      a4 = 1;
      if (!v41) {
        goto LABEL_29;
      }
    }

    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
LABEL_37:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
    __break(1u);
  }

  else
  {
LABEL_29:
    swift_bridgeObjectRelease(v45);
    uint64_t v43 = v49;
    swift_release(v46);
    sub_10001B100(v47);
    return swift_release(v43);
  }

  return result;
}

uint64_t sub_1000182B0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a4;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a4);
  return a2;
}

uint64_t sub_1000182F8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a4);
  uint64_t v11 = *a4;
  *a4 = 0x8000000000000000LL;
  sub_100017CC8(a1, a2, a3, isUniquelyReferenced_nonNull_native, &v11);
  uint64_t v9 = *a4;
  *a4 = v11;
  return swift_bridgeObjectRelease(v9);
}

uint64_t sub_100018380(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v26, *(void *)(*v3 + 40LL));
  sub_10001BCF8();
  String.hash(into:)(v26, a2, a3);
  Swift::Int v8 = sub_10001BC48();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  sub_10001BB58();
  if ((v11 & 1) != 0)
  {
    uint64_t v12 = *(void *)(v7 + 48);
    uint64_t v13 = (uint64_t *)(v12 + 16 * v10);
    uint64_t v14 = v13[1];
    BOOL v15 = *v13 == a2 && v14 == a3;
    if (v15 || (sub_10001BB00(*v13, v14, a2, a3) & 1) != 0)
    {
LABEL_7:
      sub_10001BC70();
      sub_10001BEC0();
      char v16 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v17 = v16[1];
      *a1 = *v16;
      a1[1] = v17;
      swift_bridgeObjectRetain(v17);
      return 0LL;
    }

    uint64_t v19 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v19;
      sub_10001BB58();
      if ((v20 & 1) == 0) {
        break;
      }
      char v21 = (uint64_t *)(v12 + 16 * v10);
      uint64_t v22 = v21[1];
      BOOL v23 = *v21 == a2 && v22 == a3;
      if (v23 || (sub_10001BB00(*v21, v22, a2, a3) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  sub_10001BEC0();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  sub_10001C16C();
  sub_1000119E4();
  sub_100019684(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v25 = *v3;
  *uint64_t v3 = v26[0];
  swift_bridgeObjectRelease(v25);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

void sub_1000184E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, Swift::Int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v24;
  a22 = v25;
  uint64_t v26 = v22;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v31 = *v22;
  if ((*v22 & 0xC000000000000001LL) == 0)
  {
    Swift::Int v36 = *(void *)(v31 + 40);
    sub_1000119E4();
    Swift::Int v37 = NSObject._rawHashValue(seed:)(v36);
    uint64_t v38 = -1LL << *(_BYTE *)(v31 + 32);
    unint64_t v39 = v37 & ~v38;
    sub_10001C214();
    if ((v40 & 1) != 0)
    {
      sub_10000A1A0(0LL, (unint64_t *)&qword_100130BA0, &OBJC_CLASS___LNSystemProtocol_ptr);
      id v41 = sub_10001C094();
      char v42 = sub_10001C088((uint64_t)v41);

      if ((v42 & 1) != 0)
      {
LABEL_12:

        sub_10001BC70();
        uint64_t v47 = *(void **)(*(void *)(*v26 + 48) + 8 * v39);
        *uint64_t v30 = (Swift::Int)v47;
        id v48 = v47;
        goto LABEL_21;
      }

      uint64_t v43 = ~v38;
      while (1)
      {
        unint64_t v39 = (v39 + 1) & v43;
        sub_10001C214();
        if ((v44 & 1) == 0) {
          break;
        }
        id v45 = sub_10001C094();
        char v46 = sub_10001C088((uint64_t)v45);

        if ((v46 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    sub_10001BC70();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v26);
    sub_10001C16C();
    id v33 = v28;
    sub_10001981C((uint64_t)v33, v39, isUniquelyReferenced_nonNull_native);
    uint64_t v54 = *v26;
    *uint64_t v26 = a10;
    goto LABEL_20;
  }

  if (v31 < 0) {
    uint64_t v32 = *v22;
  }
  else {
    uint64_t v32 = v31 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_1000119E4();
  id v33 = v28;
  uint64_t v34 = __CocoaSet.member(for:)();

  if (v34)
  {
    sub_10001BC70();

    a9 = v34;
    uint64_t v35 = sub_10000A1A0(0LL, (unint64_t *)&qword_100130BA0, &OBJC_CLASS___LNSystemProtocol_ptr);
    swift_unknownObjectRetain(v34);
    swift_dynamicCast(&a10, &a9, (char *)&type metadata for Swift.AnyObject + 8, v35, 7LL);
    *uint64_t v30 = a10;
    swift_unknownObjectRelease(v34);
LABEL_21:
    sub_10001BC78();
    return;
  }

  uint64_t v49 = __CocoaSet.count.getter(v32);
  if (!__OFADD__(v49, 1LL))
  {
    Swift::Int v50 = sub_100018ABC(v32, v49 + 1);
    a10 = v50;
    if (*(void *)(v50 + 24) <= *(void *)(v50 + 16))
    {
      id v55 = v33;
      sub_100018EB8();
      uint64_t v51 = a10;
    }

    else
    {
      uint64_t v51 = v50;
      id v52 = v33;
    }

    sub_100019604((uint64_t)v33, v51);
    uint64_t v54 = *v26;
    *uint64_t v26 = v51;
LABEL_20:
    swift_bridgeObjectRelease(v54);
    *uint64_t v30 = (Swift::Int)v33;
    goto LABEL_21;
  }

  __break(1u);
}

uint64_t sub_100018704(void *a1, uint64_t *a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v63, *(void *)(*v2 + 40LL));
  sub_10001BD0C();
  sub_10006D4E8((uint64_t)v63);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  uint64_t v57 = v5 + 56;
  uint64_t v58 = v5;
  uint64_t v53 = v2;
  __dst = a1;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
  {
    uint64_t v56 = ~v7;
    uint64_t v9 = *a2;
    uint64_t v62 = a2[1];
    uint64_t v55 = *a2;
    do
    {
      unint64_t v10 = (uint64_t *)(*(void *)(v58 + 48) + 104 * v8);
      uint64_t v12 = v10[2];
      uint64_t v11 = v10[3];
      uint64_t v13 = (void *)v10[4];
      uint64_t v14 = v10[6];
      uint64_t v60 = v10[7];
      uint64_t v61 = v10[5];
      uint64_t v15 = v10[8];
      uint64_t v59 = v10[9];
      uint64_t v16 = v10[10];
      uint64_t v17 = (void *)v10[11];
      BOOL v18 = *v10 == v9 && v10[1] == v62;
      if (v18 || (sub_10001BB00(*v10, v10[1], v9, v62) & 1) != 0)
      {
        uint64_t v19 = a2[2];
        uint64_t v20 = a2[3];
        BOOL v21 = v12 == v19 && v11 == v20;
        if (v21 || (sub_10001BB00(v12, v11, v19, v20) & 1) != 0)
        {
          sub_10000A1A0(0LL, (unint64_t *)&qword_1001317F0, &OBJC_CLASS___NSObject_ptr);
          uint64_t v22 = a2[4];
          swift_bridgeObjectRetain();
          sub_10000AFB0();
          id v23 = v13;
          sub_10001BD0C();
          sub_10001BCF8();
          sub_10001BCF8();
          id v24 = v17;
          sub_10000AFB0();
          if ((static NSObject.== infix(_:_:)(v23, v22) & 1) == 0) {
            goto LABEL_32;
          }
          uint64_t v25 = a2[5];
          uint64_t v26 = a2[6];
          BOOL v27 = v61 == v25 && v14 == v26;
          if ((v27 || (sub_10001BB00(v61, v14, v25, v26) & 1) != 0)
            && ((uint64_t v28 = a2[7], v29 = a2[8], v60 == v28) ? (v30 = v15 == v29) : (v30 = 0),
                (v30 || (sub_10001BB00(v60, v15, v28, v29) & 1) != 0)
             && ((v31 = a2[9], uint64_t v32 = a2[10], v59 == v31) ? (v33 = v16 == v32) : (v33 = 0),
                 (v33 || (sub_10001BB00(v59, v16, v31, v32) & 1) != 0)
              && (static NSObject.== infix(_:_:)(v24, a2[11]) & 1) != 0)))
          {
            sub_100013AB4();
            char v35 = v34;
            sub_10001198C();

            sub_10001BEC0();
            sub_10000AEE8();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v9 = v55;
            if ((v35 & 1) != 0)
            {
              swift_bridgeObjectRelease();
              sub_100009FD0(a2);
              Swift::Int v37 = (void *)(*(void *)(*v53 + 48LL) + 104 * v8);
              uint64_t v38 = v37[1];
              uint64_t v39 = v37[2];
              uint64_t v40 = v37[3];
              char v42 = (void *)v37[4];
              uint64_t v41 = v37[5];
              uint64_t v44 = v37[6];
              uint64_t v43 = v37[7];
              uint64_t v46 = v37[8];
              uint64_t v45 = v37[9];
              uint64_t v47 = v37[10];
              id v48 = (void *)v37[11];
              uint64_t v49 = v37[12];
              void *__dst = *v37;
              __dst[1] = v38;
              __dst[2] = v39;
              __dst[3] = v40;
              __dst[4] = v42;
              __dst[5] = v41;
              __dst[6] = v44;
              __dst[7] = v43;
              __dst[8] = v46;
              __dst[9] = v45;
              __dst[10] = v47;
              __dst[11] = v48;
              __dst[12] = v49;
              swift_bridgeObjectRetain();
              sub_10000AFB0();
              id v50 = v42;
              sub_10000AE38();
              sub_10001BEF8();
              sub_1000119E4();
              id v51 = v48;
              sub_10001C064();
              return 0LL;
            }
          }

          else
          {
LABEL_32:
            sub_10001198C();

            sub_10001BEC0();
            sub_10000AEE8();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v9 = v55;
          }
        }
      }

      unint64_t v8 = (v8 + 1) & v56;
    }

    while (((*(void *)(v57 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0);
  }

  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v53);
  v63[0] = *v53;
  *uint64_t v53 = 0x8000000000000000LL;
  sub_100009F4C(a2);
  sub_1000199A0(a2, v8, isUniquelyReferenced_nonNull_native);
  *uint64_t v53 = v63[0];
  swift_bridgeObjectRelease();
  memcpy(__dst, a2, 0x68uLL);
  return 1LL;
}

Swift::Int sub_100018ABC(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  sub_100008DB0(&qword_100130F90);
  uint64_t v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
  uint64_t v21 = v4;
  __CocoaSet.makeIterator()(a1);
  uint64_t v5 = __CocoaSet.Iterator.next()();
  if (!v5)
  {
LABEL_16:
    swift_release();
    return v4;
  }

  uint64_t v6 = v5;
  uint64_t v7 = sub_10000A1A0(0LL, (unint64_t *)&qword_100130BA0, &OBJC_CLASS___LNSystemProtocol_ptr);
  while (1)
  {
    uint64_t v19 = v6;
    swift_dynamicCast(&v20, &v19, (char *)&type metadata for Swift.AnyObject + 8, v7, 7LL);
    uint64_t v4 = v21;
    if (*(void *)(v21 + 24) <= *(void *)(v21 + 16))
    {
      sub_100018EB8();
      uint64_t v4 = v21;
    }

    uint64_t v8 = v20;
    Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
    uint64_t v10 = v4 + 56;
    uint64_t v11 = -1LL << *(_BYTE *)(v4 + 32);
    unint64_t v12 = result & ~v11;
    unint64_t v13 = v12 >> 6;
    if (((-1LL << v12) & ~*(void *)(v4 + 56 + 8 * (v12 >> 6))) == 0) {
      break;
    }
    unint64_t v14 = __clz(__rbit64((-1LL << v12) & ~*(void *)(v4 + 56 + 8 * (v12 >> 6)))) | v12 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_15:
    *(void *)(v10 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(void *)(*(void *)(v4 + 48) + 8 * v14) = v8;
    ++*(void *)(v4 + 16);
    uint64_t v6 = __CocoaSet.Iterator.next()();
    if (!v6) {
      goto LABEL_16;
    }
  }

  char v15 = 0;
  unint64_t v16 = (unint64_t)(63 - v11) >> 6;
  while (++v13 != v16 || (v15 & 1) == 0)
  {
    BOOL v17 = v13 == v16;
    if (v13 == v16) {
      unint64_t v13 = 0LL;
    }
    v15 |= v17;
    uint64_t v18 = *(void *)(v10 + 8 * v13);
    if (v18 != -1)
    {
      unint64_t v14 = __clz(__rbit64(~v18)) + (v13 << 6);
      goto LABEL_15;
    }
  }

  __break(1u);
  return result;
}

void sub_100018CA0()
{
  uint64_t v3 = sub_10001BF00();
  static _SetStorage.resize(original:capacity:move:)(v3);
  sub_10001C110();
  if (v4)
  {
    uint64_t v31 = v1 + 7;
    sub_10001C03C();
    uint64_t v7 = v6 & v5;
    int64_t v9 = (unint64_t)(v8 + 63) >> 6;
    sub_10001BE38();
    int64_t v10 = 0LL;
    if (!v7) {
      goto LABEL_4;
    }
LABEL_3:
    sub_10001C1F4();
    for (int64_t i = v11 | (v10 << 6); ; int64_t i = v17 + (v10 << 6))
    {
      uint64_t v18 = (uint64_t *)(v1[6] + 16 * i);
      uint64_t v19 = *v18;
      uint64_t v20 = v18[1];
      Hasher.init(_seed:)(v32, *(void *)(v2 + 40));
      String.hash(into:)(v32, v19, v20);
      Hasher._finalize()();
      sub_10001BE60();
      if (v21)
      {
        sub_10001BB30();
        while (1)
        {
          sub_10001BF64();
          if (v21)
          {
            if ((v23 & 1) != 0) {
              break;
            }
          }

          if (v24 == v25) {
            uint64_t v24 = 0LL;
          }
          if (*(void *)(v2 + 56 + 8 * v24) != -1LL)
          {
            sub_10001BB1C();
            goto LABEL_28;
          }
        }

        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        return;
      }

      sub_10001BB44();
LABEL_28:
      sub_10001BDC4(v22);
      BOOL v27 = (void *)(*(void *)(v2 + 48) + 16 * v26);
      void *v27 = v19;
      v27[1] = v20;
      sub_10001BDA0();
      if (v7) {
        goto LABEL_3;
      }
LABEL_4:
      int64_t v13 = v10 + 1;
      if (__OFADD__(v10, 1LL)) {
        goto LABEL_36;
      }
      if (v13 >= v9) {
        goto LABEL_30;
      }
      ++v10;
      if (!v31[v13])
      {
        int64_t v10 = v13 + 1;
        if (v13 + 1 >= v9) {
          goto LABEL_30;
        }
        if (!v31[v10])
        {
          int64_t v10 = v13 + 2;
          if (v13 + 2 >= v9) {
            goto LABEL_30;
          }
          if (!v31[v10])
          {
            int64_t v14 = v13 + 3;
            if (v14 >= v9)
            {
LABEL_30:
              sub_10001BB08();
              sub_10001C0C0();
              if (v29 ^ v30 | v21) {
                void *v31 = -1LL << v28;
              }
              else {
                sub_100017CAC(0LL, (unint64_t)(v28 + 63) >> 6, v31);
              }
              v1[2] = 0LL;
              break;
            }

            if (!v31[v14])
            {
              while (1)
              {
                int64_t v10 = v14 + 1;
                if (__OFADD__(v14, 1LL)) {
                  goto LABEL_37;
                }
                if (v10 >= v9) {
                  goto LABEL_30;
                }
                ++v14;
                if (v31[v10]) {
                  goto LABEL_17;
                }
              }
            }

            int64_t v10 = v14;
          }
        }
      }

uint64_t sub_100018EB8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100008DB0(&qword_100130F90);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)(v2);
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v28 = v0;
    uint64_t v5 = 1LL << *(_BYTE *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1LL << v5);
    }
    else {
      uint64_t v7 = -1LL;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0LL;
    if (!v8) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v13 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
    {
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * i);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
      uint64_t v19 = -1LL << *(_BYTE *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1LL << v20) & ~*(void *)(v10 + 8 * (v20 >> 6))) == 0)
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v19) >> 6;
        while (++v21 != v24 || (v23 & 1) == 0)
        {
          BOOL v25 = v21 == v24;
          if (v21 == v24) {
            unint64_t v21 = 0LL;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v21);
          if (v26 != -1)
          {
            unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
            goto LABEL_30;
          }
        }

        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }

      unint64_t v22 = __clz(__rbit64((-1LL << v20) & ~*(void *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_30:
      *(void *)(v10 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
      *(void *)(*(void *)(v4 + 48) + 8 * v22) = v18;
      ++*(void *)(v4 + 16);
      if (v8) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v15 = v12 + 1;
      if (__OFADD__(v12, 1LL)) {
        goto LABEL_38;
      }
      if (v15 >= v9) {
        goto LABEL_32;
      }
      unint64_t v16 = v6[v15];
      ++v12;
      if (!v16)
      {
        int64_t v12 = v15 + 1;
        if (v15 + 1 >= v9) {
          goto LABEL_32;
        }
        unint64_t v16 = v6[v12];
        if (!v16)
        {
          int64_t v12 = v15 + 2;
          if (v15 + 2 >= v9) {
            goto LABEL_32;
          }
          unint64_t v16 = v6[v12];
          if (!v16)
          {
            int64_t v17 = v15 + 3;
            if (v17 >= v9)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v28;
              uint64_t v27 = 1LL << *(_BYTE *)(v2 + 32);
              if (v27 > 63) {
                sub_100017CAC(0LL, (unint64_t)(v27 + 63) >> 6, (void *)(v2 + 56));
              }
              else {
                void *v6 = -1LL << v27;
              }
              *(void *)(v2 + 1sub_10000AC58(v0 + 6) = 0LL;
              break;
            }

            unint64_t v16 = v6[v17];
            if (!v16)
            {
              while (1)
              {
                int64_t v12 = v17 + 1;
                if (__OFADD__(v17, 1LL)) {
                  goto LABEL_39;
                }
                if (v12 >= v9) {
                  goto LABEL_32;
                }
                unint64_t v16 = v6[v12];
                ++v17;
                if (v16) {
                  goto LABEL_20;
                }
              }
            }

            int64_t v12 = v17;
          }
        }
      }

unint64_t sub_100019150()
{
  uint64_t v1 = *v0;
  sub_100008DB0(&qword_100130EC0);
  uint64_t v2 = static _SetStorage.resize(original:capacity:move:)(v1);
  uint64_t v3 = v2;
  if (*(void *)(v1 + 16))
  {
    uint64_t v4 = 1LL << *(_BYTE *)(v1 + 32);
    char v42 = (void *)(v1 + 56);
    if (v4 < 64) {
      uint64_t v5 = ~(-1LL << v4);
    }
    else {
      uint64_t v5 = -1LL;
    }
    unint64_t v6 = v5 & *(void *)(v1 + 56);
    int64_t v43 = (unint64_t)(v4 + 63) >> 6;
    uint64_t v44 = v2 + 56;
    unint64_t result = swift_retain();
    int64_t v8 = 0LL;
    uint64_t v40 = v3;
    uint64_t v41 = v1;
    if (!v6) {
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v51 = (v6 - 1) & v6;
    int64_t v52 = v8;
    for (unint64_t i = __clz(__rbit64(v6)) | (v8 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v12 << 6))
    {
      uint64_t v14 = *(void *)(v1 + 48) + 104 * i;
      uint64_t v15 = *(void *)v14;
      uint64_t v16 = *(void *)(v14 + 8);
      uint64_t v17 = *(void *)(v14 + 16);
      uint64_t v18 = v1;
      uint64_t v19 = *(void *)(v14 + 40);
      uint64_t v20 = *(void *)(v14 + 48);
      uint64_t v22 = *(void *)(v14 + 56);
      uint64_t v21 = *(void *)(v14 + 64);
      uint64_t v45 = *(void *)(v14 + 72);
      __int128 v53 = *(_OWORD *)(v14 + 80);
      __int128 v54 = *(_OWORD *)(v14 + 24);
      uint64_t v23 = *(void *)(v14 + 96);
      Hasher.init(_seed:)(v55, *(void *)(v3 + 40));
      swift_bridgeObjectRetain();
      uint64_t v50 = v15;
      String.hash(into:)(v55, v15, v16);
      uint64_t v46 = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v49 = v17;
      String.hash(into:)(v55, v17, v54);
      swift_bridgeObjectRelease();
      id v24 = *((id *)&v54 + 1);
      NSObject.hash(into:)(v55);

      swift_bridgeObjectRetain();
      uint64_t v48 = v19;
      uint64_t v25 = v19;
      uint64_t v1 = v18;
      String.hash(into:)(v55, v25, v20);
      uint64_t v47 = v20;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)(v55, v22, v21);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)(v55, v45, v53);
      swift_bridgeObjectRelease();
      id v26 = *((id *)&v53 + 1);
      NSObject.hash(into:)(v55);

      Hasher._combine(_:)(*(void *)(v23 + 16));
      uint64_t v27 = *(void *)(v23 + 16);
      unint64_t v6 = v51;
      int64_t v8 = v52;
      if (v27)
      {
        swift_bridgeObjectRetain();
        uint64_t v28 = (void **)(v23 + 64);
        do
        {
          uint64_t v30 = (uint64_t)*(v28 - 4);
          uint64_t v29 = (uint64_t)*(v28 - 3);
          uint64_t v31 = (uint64_t)*(v28 - 2);
          uint64_t v32 = (uint64_t)*(v28 - 1);
          BOOL v33 = *v28;
          v28 += 5;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v34 = v33;
          String.hash(into:)(v55, v30, v29);
          swift_bridgeObjectRetain();
          String.hash(into:)(v55, v31, v32);
          swift_bridgeObjectRelease();
          id v35 = v34;
          NSObject.hash(into:)(v55);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          --v27;
        }

        while (v27);
        swift_bridgeObjectRelease();
        uint64_t v3 = v40;
        uint64_t v1 = v41;
        unint64_t v6 = v51;
        int64_t v8 = v52;
      }

      Swift::Int v36 = Hasher._finalize()();
      unint64_t result = _HashTable.nextHole(atOrAfter:)( v36 & ~(-1LL << *(_BYTE *)(v3 + 32)),  v44,  ~(-1LL << *(_BYTE *)(v3 + 32)));
      *(void *)(v44 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
      uint64_t v37 = *(void *)(v3 + 48) + 104 * result;
      *(void *)uint64_t v37 = v50;
      *(void *)(v37 + 8) = v46;
      *(void *)(v37 + 1sub_10000AC58(v0 + 6) = v49;
      *(_OWORD *)(v37 + 24) = v54;
      *(void *)(v37 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v48;
      *(void *)(v37 + 48) = v47;
      *(void *)(v37 + 5sub_10000AC58(v0 + 6) = v22;
      *(void *)(v37 + 64) = v21;
      *(void *)(v37 + 72) = v45;
      *(_OWORD *)(v37 + 8sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v53;
      *(void *)(v37 + 9sub_10000AC58(v0 + 6) = v23;
      ++*(void *)(v3 + 16);
      if (v6) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v10 = v8 + 1;
      if (__OFADD__(v8, 1LL))
      {
        __break(1u);
LABEL_33:
        __break(1u);
        return result;
      }

      if (v10 >= v43) {
        goto LABEL_27;
      }
      unint64_t v11 = v42[v10];
      int64_t v12 = v8 + 1;
      if (!v11)
      {
        int64_t v12 = v8 + 2;
        if (v8 + 2 >= v43) {
          goto LABEL_27;
        }
        unint64_t v11 = v42[v12];
        if (!v11)
        {
          int64_t v12 = v8 + 3;
          if (v8 + 3 >= v43) {
            goto LABEL_27;
          }
          unint64_t v11 = v42[v12];
          if (!v11)
          {
            uint64_t v13 = v8 + 4;
            if (v8 + 4 >= v43)
            {
LABEL_27:
              swift_release();
              uint64_t v38 = 1LL << *(_BYTE *)(v1 + 32);
              if (v38 > 63) {
                sub_100017CAC(0LL, (unint64_t)(v38 + 63) >> 6, v42);
              }
              else {
                *char v42 = -1LL << v38;
              }
              *(void *)(v1 + 1sub_10000AC58(v0 + 6) = 0LL;
              break;
            }

            unint64_t v11 = v42[v13];
            if (!v11)
            {
              while (1)
              {
                int64_t v12 = v13 + 1;
                if (__OFADD__(v13, 1LL)) {
                  goto LABEL_33;
                }
                if (v12 >= v43) {
                  goto LABEL_27;
                }
                unint64_t v11 = v42[v12];
                ++v13;
                if (v11) {
                  goto LABEL_20;
                }
              }
            }

            int64_t v12 = v8 + 4;
          }
        }
      }

unint64_t sub_100019604(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40));
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

void sub_100019684(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if ((a4 & 1) != 0)
  {
    sub_100018CA0();
  }

  else
  {
    if (v10 > v9)
    {
      sub_100019D44();
      goto LABEL_22;
    }

    sub_10001A2C0();
  }

  uint64_t v11 = *v4;
  Hasher.init(_seed:)(v28, *(void *)(*v4 + 40));
  String.hash(into:)(v28, a1, a2);
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v11 + 32);
  a3 = v12 & ~v13;
  uint64_t v14 = v11 + 56;
  if (((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v11 + 48);
    uint64_t v16 = (void *)(v15 + 16 * a3);
    uint64_t v17 = v16[1];
    BOOL v18 = *v16 == a1 && v17 == a2;
    if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, a1, a2, 0LL) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v20 = (void *)(v15 + 16 * a3);
        uint64_t v21 = v20[1];
        BOOL v22 = *v20 == a1 && v21 == a2;
        if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, a1, a2, 0LL) & 1) != 0) {
          goto LABEL_21;
        }
      }
    }
  }

void sub_10001981C(uint64_t a1, unint64_t a2, char a3)
{
  Swift::Int v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if ((a3 & 1) != 0)
  {
    sub_100018EB8();
  }

  else
  {
    if (v8 > v7)
    {
      sub_100019EC4();
      goto LABEL_14;
    }

    sub_10001A4C4();
  }

  uint64_t v9 = *v3;
  Swift::Int v10 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v11 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v12 = sub_10000A1A0(0LL, (unint64_t *)&qword_100130BA0, &OBJC_CLASS___LNSystemProtocol_ptr);
    id v13 = *(id *)(*(void *)(v9 + 48) + 8 * a2);
    char v14 = static NSObject.== infix(_:_:)(v13, a1);

    if ((v14 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v12);
      __break(1u);
    }

    else
    {
      uint64_t v15 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v15;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        id v16 = *(id *)(*(void *)(v9 + 48) + 8 * a2);
        char v17 = static NSObject.== infix(_:_:)(v16, a1);

        if ((v17 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

LABEL_14:
  uint64_t v18 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v18 + 48) + 8 * a2) = a1;
  uint64_t v19 = *(void *)(v18 + 16);
  BOOL v20 = __OFADD__(v19, 1LL);
  uint64_t v21 = v19 + 1;
  if (v20) {
    __break(1u);
  }
  else {
    *(void *)(v18 + 1sub_10000AC58(v0 + 6) = v21;
  }
}

  uint64_t v12 = *(void *)(v3 + 16);
  uint64_t v65 = v89[0];
  uint64_t v62 = v89[1];
  uint64_t v11 = v90;
  uint64_t v60 = v89[2];
  if (!v91)
  {
LABEL_49:
    uint64_t v39 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      return;
    }

    uint64_t v30 = (unint64_t)(v60 + 64) >> 6;
    if (v39 >= v30) {
      goto LABEL_55;
    }
    uint64_t v87 = v12;
    uint64_t v55 = *(void *)(v62 + 8 * v39);
    if (!v55)
    {
      uint64_t v56 = v11 + 2;
      if (v11 + 2 >= v30) {
        goto LABEL_55;
      }
      uint64_t v55 = *(void *)(v62 + 8 * v56);
      if (v55)
      {
LABEL_58:
        uint64_t v39 = v56;
      }

      else
      {
        if (v11 + 3 >= v30) {
          goto LABEL_55;
        }
        uint64_t v55 = *(void *)(v62 + 8 * (v11 + 3));
        if (!v55) {
          goto LABEL_64;
        }
        uint64_t v39 = v11 + 3;
      }
    }

  if ((unint64_t)a22 >> 62)
  {
    if (a22 < 0) {
      __int128 v54 = a22;
    }
    else {
      __int128 v54 = a22 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v55 = _CocoaArrayWrapper.endIndex.getter(v54);
    swift_bridgeObjectRelease();
    if (v55) {
      goto LABEL_16;
    }
  }

  else if (*(void *)((a22 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
LABEL_16:
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v48 = v41;
    uint64_t v49 = v38;
    sub_100050984(a22, v31, v41, v38);
    goto LABEL_32;
  }

  uint64_t v48 = v41;
  uint64_t v49 = v38;
LABEL_32:
  if ((unint64_t)a23 >> 62)
  {
    if (a23 < 0) {
      uint64_t v56 = a23;
    }
    else {
      uint64_t v56 = a23 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v57 = _CocoaArrayWrapper.endIndex.getter(v56);
    swift_bridgeObjectRelease();
    if (!v57) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }

  if (*(void *)((a23 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
LABEL_34:
    swift_retain();
    swift_bridgeObjectRetain();
    sub_100050D08(a23, v31, v48, v49);
  }

    uint64_t v5 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v9 << 6);
    Swift::Int v4 = v9;
LABEL_15:
    uint64_t v12 = (void *)(*(void *)(v36 + 48) + 16 * v8);
    id v13 = v12[1];
    v34[0] = *v12;
    v34[1] = v13;
    char v14 = swift_bridgeObjectRetain();
    a1(&v30, v34, v14);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }

    swift_bridgeObjectRelease();
    uint64_t v15 = v31;
    if (v31)
    {
      id v16 = v4;
      char v17 = v30;
      uint64_t v29 = v32;
      uint64_t v18 = v33;
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
      {
        sub_1000141D4();
        unint64_t v6 = v24;
      }

      uint64_t v19 = v6;
      BOOL v20 = v6[2];
      uint64_t v21 = v19;
      if (v20 >= v19[3] >> 1)
      {
        sub_1000141D4();
        uint64_t v21 = v25;
      }

      v21[2] = v20 + 1;
      BOOL v22 = &v21[5 * v20];
      unint64_t v6 = v21;
      v22[4] = v17;
      v22[5] = v15;
      *((_OWORD *)v22 + 3) = v29;
      v22[8] = v18;
      Swift::Int v4 = v16;
    }
  }

  __break(1u);
}

  sub_1000B7670();
  *unint64_t v7 = v5;
  uint64_t v27 = sub_1000B6F6C();
  swift_storeEnumTagMultiPayload(v27, v28, 3LL);
  return swift_errorRetain(v5);
}

    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    return a1;
  }

  if (!v11)
  {
    swift_release();
    goto LABEL_14;
  }

  uint64_t v12 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 5sub_10000AC58(v0 + 6) = v12;
  swift_retain();
  swift_release();
  return a1;
}

        uint64_t v11 = (v17 - 1) & v17;
        uint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
        uint64_t v9 = v13;
LABEL_15:
        uint64_t v19 = (uint64_t *)(*(void *)(*a5 + 48LL) + 16 * v12);
        uint64_t v21 = *v19;
        BOOL v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)(v42, *(void *)(a3 + 40));
        swift_bridgeObjectRetain();
        String.hash(into:)(v42, v21, v20);
        BOOL v22 = Hasher._finalize()();
        uint64_t v23 = -1LL << *(_BYTE *)(a3 + 32);
        id v24 = v22 & ~v23;
        uint64_t v25 = v24 >> 6;
        BOOL v26 = 1LL << v24;
        if (((1LL << v24) & *(void *)(v43 + 8 * (v24 >> 6))) == 0) {
          goto LABEL_32;
        }
        uint64_t v27 = *(void *)(a3 + 48);
        uint64_t v28 = (void *)(v27 + 16 * v24);
        uint64_t v29 = v28[1];
        uint64_t v30 = *v28 == v21 && v29 == v20;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v21, v20, 0LL) & 1) != 0) {
          break;
        }
        uint64_t v32 = ~v23;
        for (unint64_t i = v24 + 1; ; unint64_t i = v34 + 1)
        {
          id v34 = i & v32;
          id v35 = (void *)(v27 + 16 * v34);
          Swift::Int v36 = v35[1];
          uint64_t v37 = *v35 == v21 && v36 == v20;
          if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v35, v36, v21, v20, 0LL) & 1) != 0)
          {
            unint64_t result = (unint64_t *)swift_bridgeObjectRelease();
            uint64_t v25 = v34 >> 6;
            BOOL v26 = 1LL << v34;
            goto LABEL_22;
          }
        }

void *sub_1000199A0(uint64_t *a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_100019150();
    }

    else
    {
      if (v7 > v6)
      {
        sub_10001A06C();
        goto LABEL_41;
      }

      sub_10001A738();
    }

    uint64_t v8 = *v3;
    Hasher.init(_seed:)(v60, *(void *)(*v3 + 40));
    sub_10006D4E8((uint64_t)v60);
    Swift::Int v9 = Hasher._finalize()();
    uint64_t v10 = -1LL << *(_BYTE *)(v8 + 32);
    a2 = v9 & ~v10;
    uint64_t v53 = v8 + 56;
    uint64_t v54 = v8;
    if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
    {
      uint64_t v52 = ~v10;
      uint64_t v11 = *a1;
      uint64_t v58 = a1[1];
      uint64_t v51 = *a1;
      do
      {
        uint64_t v12 = (void *)(*(void *)(v54 + 48) + 104 * a2);
        uint64_t v13 = v12[1];
        uint64_t v15 = v12[2];
        uint64_t v14 = v12[3];
        id v16 = (void *)v12[4];
        uint64_t v17 = v12[6];
        uint64_t v56 = v12[7];
        uint64_t v57 = v12[5];
        uint64_t v18 = v12[8];
        uint64_t v55 = v12[9];
        uint64_t v20 = v12[10];
        uint64_t v19 = (void *)v12[11];
        BOOL v21 = *v12 == v11 && v13 == v58;
        if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, v11, v58, 0LL) & 1) != 0)
        {
          uint64_t v22 = a1[2];
          uint64_t v23 = a1[3];
          BOOL v24 = v15 == v22 && v14 == v23;
          if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v14, v22, v23, 0LL) & 1) != 0)
          {
            sub_10000A1A0(0LL, (unint64_t *)&qword_1001317F0, &OBJC_CLASS___NSObject_ptr);
            uint64_t v25 = a1[4];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v26 = v16;
            uint64_t v27 = v17;
            swift_bridgeObjectRetain();
            uint64_t v28 = v18;
            swift_bridgeObjectRetain();
            uint64_t v29 = v20;
            uint64_t v30 = v26;
            swift_bridgeObjectRetain();
            id v31 = v19;
            swift_bridgeObjectRetain();
            uint64_t v32 = v25;
            BOOL v33 = v31;
            if ((static NSObject.== infix(_:_:)(v30, v32) & 1) == 0) {
              goto LABEL_39;
            }
            uint64_t v34 = a1[5];
            uint64_t v35 = a1[6];
            BOOL v36 = v57 == v34 && v27 == v35;
            if ((v36 || (_stringCompareWithSmolCheck(_:_:expecting:)(v57, v27, v34, v35, 0LL) & 1) != 0)
              && ((v37 = a1[7], v38 = a1[8], v56 == v37) ? (BOOL v39 = v28 == v38) : (BOOL v39 = 0),
                  (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)(v56, v28, v37, v38, 0LL) & 1) != 0)
               && ((uint64_t v40 = a1[9], v41 = a1[10], v55 == v40) ? (v42 = v29 == v41) : (v42 = 0),
                   (v42 || (_stringCompareWithSmolCheck(_:_:expecting:)(v55, v29, v40, v41, 0LL) & 1) != 0)
                && (static NSObject.== infix(_:_:)(v31, a1[11]) & 1) != 0)))
            {
              sub_100013AB4();
              char v44 = v43;
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v11 = v51;
              if ((v44 & 1) != 0) {
                goto LABEL_44;
              }
            }

            else
            {
LABEL_39:
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v11 = v51;
            }
          }
        }

        a2 = (a2 + 1) & v52;
      }

      while (((*(void *)(v53 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
    }
  }

LABEL_41:
  uint64_t v45 = *v50;
  *(void *)(*v50 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  unint64_t result = memcpy((void *)(*(void *)(v45 + 48) + 104 * a2), a1, 0x68uLL);
  uint64_t v47 = *(void *)(v45 + 16);
  BOOL v48 = __OFADD__(v47, 1LL);
  uint64_t v49 = v47 + 1;
  if (v48)
  {
    __break(1u);
LABEL_44:
    unint64_t result = (void *)ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for LNAppShortcutSpanRecord);
    __break(1u);
  }

  else
  {
    *(void *)(v45 + 1sub_10000AC58(v0 + 6) = v49;
  }

  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

  swift_release(v83);
  swift_bridgeObjectRelease(v78);
  uint64_t v41 = [v79 entities];
  BOOL v42 = sub_10000A1A0(0LL, (unint64_t *)&qword_100132440, &OBJC_CLASS___LNEntityMetadata_ptr);
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v41,  &type metadata for String,  v42,  &protocol witness table for String);
  sub_100028040();
  char isUniquelyReferenced_nonNull_native = 0LL;
  uint64_t v3 = sub_1000C7334((uint64_t)v0, (uint64_t)v4);
  if (v3 >> 62) {
    goto LABEL_56;
  }
  char v43 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v43)
  {
    while (1)
    {
      uint64_t v89 = (unint64_t)_swiftEmptyArrayStorage;
      uint64_t v0 = &v89;
      specialized ContiguousArray.reserveCapacity(_:)(v43);
      if (v43 < 0) {
        break;
      }
      char v44 = 0LL;
      while (v43 != v44)
      {
        if ((v3 & 0xC000000000000001LL) != 0) {
          uint64_t v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v44, v3);
        }
        else {
          uint64_t v45 = sub_10003F0A0(v3 + 8 * v44);
        }
        uint64_t v46 = v45;
        uint64_t v87 = v45;
        sub_1000C9CD0(&v87, &v88);

        if (isUniquelyReferenced_nonNull_native) {
          goto LABEL_82;
        }
        ++v44;
        BOOL v48 = v88;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v47);
        uint64_t v49 = *(void *)(v89 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v49);
        uint64_t v50 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v49, v48);
        uint64_t v0 = &v89;
        specialized ContiguousArray._endMutation()(v50);
        if (v43 == v44)
        {
          uint64_t v51 = v89;
          sub_10001BE7C();
          goto LABEL_58;
        }
      }

  __break(1u);
  return result;
}

void sub_100019D44()
{
  uint64_t v1 = v0;
  sub_100008DB0((uint64_t *)&unk_100130DF0);
  uint64_t v2 = (void *)*v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  if (!v2[2])
  {
LABEL_26:
    sub_10001BB08();
    *uint64_t v1 = v3;
    sub_10001BE4C();
    return;
  }

  sub_10001C208();
  uint64_t v5 = v2 + 7;
  unint64_t v7 = (unint64_t)(v6 + 63) >> 6;
  if ((void *)v3 != v2 || v4 >= &v2[v7 + 7]) {
    memmove(v4, v2 + 7, 8 * v7);
  }
  int64_t v9 = 0LL;
  *(void *)(v3 + 1sub_10000AC58(v0 + 6) = v2[2];
  sub_10001C208();
  sub_10001C0AC();
  unint64_t v12 = v11 & v10;
  int64_t v14 = (unint64_t)(v13 + 63) >> 6;
  if ((v11 & v10) == 0) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v15 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = v21 + (v9 << 6))
  {
    uint64_t v22 = (void *)(v2[6] + 16 * i);
    uint64_t v23 = v22[1];
    BOOL v24 = (void *)(*(void *)(v3 + 48) + 16 * i);
    void *v24 = *v22;
    v24[1] = v23;
    swift_bridgeObjectRetain(v23);
    if (v12) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v17 >= v14) {
      goto LABEL_26;
    }
    ++v9;
    if (!v5[v17])
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_26;
      }
      if (!v5[v9])
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_26;
        }
        if (!v5[v9]) {
          break;
        }
      }
    }

LABEL_23:
    sub_10001BFF4();
    unint64_t v12 = v20 & v19;
  }

  int64_t v18 = v17 + 3;
  if (v18 >= v14) {
    goto LABEL_26;
  }
  if (v5[v18])
  {
    int64_t v9 = v18;
    goto LABEL_23;
  }

  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_26;
    }
    ++v18;
    if (v5[v9]) {
      goto LABEL_23;
    }
  }

              swift_release();
              BOOL v24 = v26;
              uint64_t v25 = 1LL;
LABEL_24:
              sub_100009E60(v24, v25, 1LL, v4);

              return;
            }
          }
        }
      }
    }

      __break(1u);
      goto LABEL_24;
    }

    __break(1u);
    goto LABEL_23;
  }

  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }

  if (a4 < 0) {
    int64_t v9 = a4;
  }
  else {
    int64_t v9 = a4 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t v10 = __CocoaSet.element(at:)(a1, a2, v9);
  BOOL v24 = v10;
  uint64_t v11 = sub_100011AB4(v10, (unint64_t *)&qword_100130BA0, &OBJC_CLASS___LNSystemProtocol_ptr);
  swift_unknownObjectRetain(v10);
  swift_dynamicCast(&v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v11, 7LL);
  swift_unknownObjectRelease(v10);
}

    uint64_t v110 = *(void *)(v0 + 280);
    sub_100047164();
    char v111 = v110;
LABEL_29:
    sub_100058D54(v111, type metadata accessor for LNBundleRecord);
    sub_1000591D4();
    sub_10000AF6C();
    sub_10000AFA8();
    sub_10004D844();
    sub_10004D858();
    sub_10004D884();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v59 = *(void *)(v0 + 280);
  uint64_t v60 = *(unsigned __int8 *)(v0 + 392);
  uint64_t v61 = *(int *)(*(void *)(v0 + 264) + 28LL);
  uint64_t v62 = *(void *)(v59 + v61);
  unint64_t result = sub_1000BDD68();
  if (v62 >= result && !v60)
  {
    sub_100008F24(*(void *)(v0 + 224), v0 + 96);
    uint64_t v64 = (os_log_s *)sub_1000595CC();
    uint64_t v65 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = (uint8_t *)sub_10000AE10(12LL);
      uint64_t v128 = sub_10000AE10(32LL);
      *(_DWORD *)uint64_t v66 = 136315138;
      BOOL v67 = *(void *)(v0 + 128);
      sub_100008D74((void *)(v0 + 96), *(void *)(v0 + 120));
      os_log_type_t v68 = sub_10005942C(*(uint64_t (**)(uint64_t))(*(void *)(v67 + 8) + 8LL));
      *(void *)(v0 + 192) = sub_100059394(v68, v69, v70, v71, v72, v73, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v124, v66 + 4, v66 + 12);
      sub_10000ADB0();
      sub_10000AC58((void *)(v0 + 96));
      sub_10000AF5C( (void *)&_mh_execute_header,  v64,  v65,  "Bundle record %s has failed indexing too frequently and has been blocked",  v66);
      sub_10000AF48(v128);
      sub_10000AD78(v128);
      sub_10000AD78((uint64_t)v66);
    }

    else
    {
      sub_10000AC58((void *)(v0 + 96));
    }

    uint64_t v112 = *(void *)(v0 + 280);
    uint64_t v113 = *(void **)(v0 + 224);
    v114 = type metadata accessor for Schema.RuntimeError(0LL);
    sub_100058EF8( (unint64_t *)&qword_100131958,  (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    swift_allocError(v114, v115, 0LL, 0LL);
    uint64_t v117 = v116;
    uint64_t v119 = v21[3];
    uint64_t v118 = v21[4];
    sub_100008D74(v113, v119);
    *uint64_t v117 = (*(uint64_t (**)(uint64_t))(*(void *)(v118 + 8) + 8LL))(v119);
    v117[1] = v120;
    id v121 = swift_storeEnumTagMultiPayload(v117, v114, 4LL);
    swift_willThrow(v121);
    sub_100047164();
    char v111 = v112;
    goto LABEL_29;
  }

  if (!__OFADD__(v62, 1LL))
  {
    *(void *)(v59 + v61) = v62 + 1;
    sub_1000595E0();
    if (!v61)
    {
      id v102 = (void *)swift_task_alloc(dword_100132414);
      *(void *)(v0 + 32sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v102;
      uint64_t v103 = sub_10005436C;
LABEL_25:
      *id v102 = v0;
      v102[1] = v103;
      unint64_t v101 = *(void *)(v0 + 280);
      return sub_1000546A4( v101,  *(void *)(v0 + 216),  *(void *)(v0 + 224),  *(void *)(v0 + 232),  *(void *)(v0 + 240),  v22);
    }

    goto LABEL_23;
  }

  __break(1u);
  return result;
}

    int64_t v9 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    int64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    int64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)(v32, v8[5]);
    swift_bridgeObjectRetain();
    String.hash(into:)(v32, v18, v19);
    unint64_t result = Hasher._finalize()();
    uint64_t v20 = -1LL << *((_BYTE *)v8 + 32);
    uint64_t v21 = result & ~v20;
    uint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) == 0)
    {
      BOOL v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        id v26 = v22 == v25;
        if (v22 == v25) {
          uint64_t v22 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
        if (v27 != -1)
        {
          uint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    uint64_t v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    uint64_t v28 = (void *)(v8[6] + 16 * v23);
    *uint64_t v28 = v18;
    v28[1] = v19;
    ++v8[2];
    if (__OFSUB__(v5--, 1LL)) {
      goto LABEL_38;
    }
    if (!v5) {
      goto LABEL_35;
    }
  }

  id v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_35;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }

  *(void *)(v2 + 128) = *(void *)(v3 + 128);
  swift_bridgeObjectRetain();
  sub_100011958();
  id v16 = *(_OWORD *)(v3 + 136);
  *(_WORD *)(v2 + 152) = *(_WORD *)(v3 + 152);
  *(_OWORD *)(v2 + 13sub_10000AC58(v0 + 6) = v16;
  *(void *)(v2 + 16sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = *(void *)(v3 + 160);
  swift_bridgeObjectRetain();
  sub_10000ADB0();
  return v2;
}

    unint64_t v7 = 0LL;
    id v31 = 0LL;
    memset(v30, 0, sizeof(v30));
    uint64_t v29 = 0u;
  }

  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  _StringGuts.grow(_:)(23LL);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = v3;
  v21._object = v2;
  String.append(_:)(v21);
  LODWORD(v2sub_10000AC58(v0 + 6) = 0;
  unint64_t result = sub_1000EC044( (uint64_t)"Fatal error",  v22,  v23,  0xD000000000000015LL,  0x80000001000FCF20LL,  (uint64_t)"AppIntents_SQLite/Statement.swift",  v24,  v25,  95LL,  v26);
  __break(1u);
  return result;
}

LABEL_28:
  __break(1u);
}

    swift_bridgeObjectRelease(v12);
    goto LABEL_15;
  }

              swift_release();
              char v43 = v45;
              char v44 = 1LL;
              goto LABEL_29;
            }
          }
        }
      }
    }

  __break(1u);
}

    memcpy(__dst, __src, v9 + 1);
    return __dst;
  }

  if (v11 > 1)
  {
    int64_t v17 = v10 == 1;
    if (v10 == 1) {
      int64_t v18 = *(void *)(v6 - 8);
    }
    else {
      int64_t v18 = *(void *)(v5 - 8);
    }
    if (v17) {
      uint64_t v19 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v19 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v18 + 8))(__dst, v19);
    goto LABEL_28;
  }

  if (__dst != __src)
  {
    unint64_t v12 = v10 == 1;
    if (v10 == 1) {
      uint64_t v13 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v13 = *(void *)(v5 - 8);
    }
    if (v12) {
      int64_t v14 = *(void *)(a3 + 24);
    }
    else {
      int64_t v14 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v13 + 8))(__dst, v14);
    unint64_t v15 = __src[v9];
    if (v15 >= 2)
    {
      else {
        id v16 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v15 != 1) {
      goto LABEL_30;
    }
LABEL_20:
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 16))(__dst, __src, v6);
    __dst[v9] = 1;
  }

  return __dst;
}

    memcpy(__dst, __src, v9 + 1);
    return __dst;
  }

  if (v11 > 1)
  {
    int64_t v17 = v10 == 1;
    if (v10 == 1) {
      int64_t v18 = *(void *)(v6 - 8);
    }
    else {
      int64_t v18 = *(void *)(v5 - 8);
    }
    if (v17) {
      uint64_t v19 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v19 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v18 + 8))(__dst, v19);
    goto LABEL_28;
  }

  if (__dst != __src)
  {
    unint64_t v12 = v10 == 1;
    if (v10 == 1) {
      uint64_t v13 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v13 = *(void *)(v5 - 8);
    }
    if (v12) {
      int64_t v14 = *(void *)(a3 + 24);
    }
    else {
      int64_t v14 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v13 + 8))(__dst, v14);
    unint64_t v15 = __src[v9];
    if (v15 >= 2)
    {
      else {
        id v16 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v15 != 1) {
      goto LABEL_30;
    }
LABEL_20:
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 32))(__dst, __src, v6);
    __dst[v9] = 1;
  }

  return __dst;
}

id sub_100019EC4()
{
  uint64_t v1 = v0;
  sub_100008DB0(&qword_100130F90);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 1sub_10000AC58(v0 + 6) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1LL;
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    *(void *)(*(void *)(v4 + 48) + 8 * i) = v20;
    id result = v20;
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }

LABEL_25:
    unint64_t v13 = (v18 - 1) & v18;
  }

  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

    uint64_t v11 = (v16 - 1) & v16;
  }

  int64_t v17 = v15 + 3;
  if (v17 >= v12) {
    goto LABEL_28;
  }
  id v16 = *(void *)(v5 + 8 * v17);
  if (v16)
  {
    uint64_t v8 = v17;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v8 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_28;
    }
    id v16 = *(void *)(v5 + 8 * v8);
    ++v17;
    if (v16) {
      goto LABEL_25;
    }
  }

  __break(1u);
  return result;
}

  uint64_t v6 = v7;
LABEL_55:
  sub_100015A74(v4, (uint64_t)(v12 - (void)v4) / 32, v6);
  return 1LL;
}

    uint64_t v6 = (v10 - 1) & v10;
    uint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
    uint64_t v5 = v11;
    goto LABEL_26;
  }

  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  id result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(type metadata for String);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

    swift_release(a2);
    return;
  }

LABEL_30:
  __break(1u);
  return result;
}

  __break(1u);
}

              swift_release(v3);
              BOOL v33 = v38;
              swift_bridgeObjectRelease(a2);
              return (uint64_t)v33;
            }
          }
        }
      }
    }

  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
}

void sub_10001A06C()
{
  id v31 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _SetStorage.copy(original:)(*v0);
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_28:
    swift_release();
    uint64_t *v31 = v3;
    return;
  }

  uint64_t v4 = (void *)(v2 + 56);
  uint64_t v5 = v1 + 56;
  unint64_t v6 = (unint64_t)((1LL << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  int64_t v8 = 0LL;
  *(void *)(v3 + 1sub_10000AC58(v0 + 6) = *(void *)(v1 + 16);
  uint64_t v9 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  unint64_t v11 = v10 & *(void *)(v1 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  if (!v11) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v13 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v8 << 6))
  {
    uint64_t v18 = 104 * i;
    uint64_t v19 = *(void *)(v1 + 48) + v18;
    uint64_t v20 = *(void *)(v19 + 8);
    uint64_t v21 = *(void *)(v19 + 16);
    uint64_t v22 = *(void *)(v19 + 40);
    uint64_t v23 = *(void *)(v19 + 48);
    uint64_t v24 = *(void *)(v19 + 56);
    uint64_t v25 = *(void *)(v19 + 64);
    uint64_t v26 = *(void *)(v19 + 72);
    uint64_t v27 = *(void *)(v19 + 96);
    uint64_t v28 = *(void *)(v3 + 48) + v18;
    __int128 v32 = *(_OWORD *)(v19 + 24);
    __int128 v33 = *(_OWORD *)(v19 + 80);
    *(void *)uint64_t v28 = *(void *)v19;
    *(void *)(v28 + 8) = v20;
    *(void *)(v28 + 1sub_10000AC58(v0 + 6) = v21;
    *(_OWORD *)(v28 + 24) = v32;
    *(void *)(v28 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v22;
    *(void *)(v28 + 48) = v23;
    *(void *)(v28 + 5sub_10000AC58(v0 + 6) = v24;
    *(void *)(v28 + 64) = v25;
    *(void *)(v28 + 72) = v26;
    *(_OWORD *)(v28 + 8sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v33;
    *(void *)(v28 + 9sub_10000AC58(v0 + 6) = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v29 = *((id *)&v32 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v30 = *((id *)&v33 + 1);
    swift_bridgeObjectRetain();
    if (v11) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v15 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v15 >= v12) {
      goto LABEL_28;
    }
    unint64_t v16 = *(void *)(v5 + 8 * v15);
    ++v8;
    if (!v16)
    {
      int64_t v8 = v15 + 1;
      if (v15 + 1 >= v12) {
        goto LABEL_28;
      }
      unint64_t v16 = *(void *)(v5 + 8 * v8);
      if (!v16)
      {
        int64_t v8 = v15 + 2;
        if (v15 + 2 >= v12) {
          goto LABEL_28;
        }
        unint64_t v16 = *(void *)(v5 + 8 * v8);
        if (!v16) {
          break;
        }
      }
    }

void sub_10001A2C0()
{
  uint64_t v2 = *v0;
  sub_100008DB0((uint64_t *)&unk_100130DF0);
  uint64_t v3 = (void *)static _SetStorage.resize(original:capacity:move:)(v2);
  if (!*(void *)(v2 + 16))
  {
    swift_release(v2);
LABEL_32:
    *uint64_t v0 = (uint64_t)v3;
    sub_10001BD14();
    return;
  }

  sub_10001C208();
  uint64_t v4 = v2 + 56;
  sub_10001C03C();
  sub_10001BF70();
  uint64_t v24 = v5;
  swift_retain(v2);
  uint64_t v6 = 0LL;
  if (!v1) {
    goto LABEL_4;
  }
LABEL_3:
  sub_10001BD68();
  for (uint64_t i = v7 | (v6 << 6); ; uint64_t i = v13 + (v6 << 6))
  {
    int64_t v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    Hasher.init(_seed:)(v25, v3[5]);
    sub_10001BD0C();
    sub_10001C154((uint64_t)v25);
    Hasher._finalize()();
    sub_10001BE60();
    if (v17)
    {
      sub_10001BB30();
      while (1)
      {
        sub_10001BF64();
        if (v17)
        {
          if ((v19 & 1) != 0) {
            break;
          }
        }

        if (v20 == v21) {
          uint64_t v20 = 0LL;
        }
        if (v3[v20 + 7] != -1LL)
        {
          sub_10001BB1C();
          goto LABEL_28;
        }
      }

      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }

    sub_10001BB44();
LABEL_28:
    sub_10001BDC4(v18);
    uint64_t v23 = (void *)(v3[6] + 16 * v22);
    void *v23 = v15;
    v23[1] = v16;
    ++v3[2];
    if (v1) {
      goto LABEL_3;
    }
LABEL_4:
    uint64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      goto LABEL_34;
    }
    if (v9 >= v24) {
      goto LABEL_30;
    }
    ++v6;
    if (!*(void *)(v4 + 8 * v9))
    {
      uint64_t v6 = v9 + 1;
      if (v9 + 1 >= v24) {
        goto LABEL_30;
      }
      if (!*(void *)(v4 + 8 * v6))
      {
        uint64_t v6 = v9 + 2;
        if (v9 + 2 >= v24) {
          goto LABEL_30;
        }
        if (!*(void *)(v4 + 8 * v6)) {
          break;
        }
      }
    }

LABEL_35:
  __break(1u);
}

  if ((v18 & 1) != 0) {
    goto LABEL_36;
  }
LABEL_50:
  id result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  swift_release_n(v31, 7LL);
  return swift_release_n(v31, 7LL);
}

              swift_bridgeObjectRelease();
              swift_release();
              return;
            }
          }
        }
      }
    }

uint64_t sub_10001A4C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100008DB0(&qword_100130F90);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)(v2);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t v28 = v0;
  uint64_t v5 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1LL << v5);
  }
  else {
    uint64_t v7 = -1LL;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0LL;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    Swift::Int v18 = *(void *)(v4 + 40);
    id v19 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    uint64_t result = NSObject._rawHashValue(seed:)(v18);
    uint64_t v20 = -1LL << *(_BYTE *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v10 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }

      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }

    unint64_t v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_30:
    *(void *)(v10 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    *(void *)(*(void *)(v4 + 48) + 8 * v23) = v19;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v15 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      goto LABEL_36;
    }
    if (v15 >= v9) {
      goto LABEL_32;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v12;
    if (!v16)
    {
      int64_t v12 = v15 + 1;
      if (v15 + 1 >= v9) {
        goto LABEL_32;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v12);
      if (!v16)
      {
        int64_t v12 = v15 + 2;
        if (v15 + 2 >= v9) {
          goto LABEL_32;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v12);
        if (!v16) {
          break;
        }
      }
    }

LABEL_37:
  __break(1u);
  return result;
}

  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v2);
  return _swiftEmptyArrayStorage;
}

                swift_release();
                swift_bridgeObjectRelease();
                return _swiftEmptyDictionarySingleton;
              }
            }
          }
        }
      }
    }

unint64_t sub_10001A738()
{
  uint64_t v1 = *v0;
  sub_100008DB0(&qword_100130EC0);
  uint64_t v2 = static _SetStorage.resize(original:capacity:move:)(v1);
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
    unint64_t result = swift_release();
LABEL_29:
    uint64_t *v38 = v3;
    return result;
  }

  uint64_t v4 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v39 = v1 + 56;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(v1 + 56);
  int64_t v40 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v41 = v2 + 56;
  unint64_t result = swift_retain();
  int64_t v8 = 0LL;
  uint64_t v42 = v1;
  uint64_t v43 = v3;
  if (!v6) {
    goto LABEL_7;
  }
LABEL_6:
  uint64_t v49 = (v6 - 1) & v6;
  int64_t v50 = v8;
  for (unint64_t i = __clz(__rbit64(v6)) | (v8 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v12 << 6))
  {
    uint64_t v14 = *(void *)(v1 + 48) + 104 * i;
    uint64_t v15 = *(void *)v14;
    uint64_t v16 = *(void *)(v14 + 8);
    uint64_t v17 = *(void *)(v14 + 16);
    uint64_t v18 = *(void *)(v14 + 48);
    uint64_t v19 = *(void *)(v14 + 64);
    uint64_t v44 = *(void *)(v14 + 56);
    uint64_t v51 = *(void *)(v14 + 72);
    uint64_t v52 = *(void *)(v14 + 40);
    __int128 v53 = *(_OWORD *)(v14 + 80);
    __int128 v54 = *(_OWORD *)(v14 + 24);
    uint64_t v20 = *(void *)(v14 + 96);
    Hasher.init(_seed:)(v55, *(void *)(v3 + 40));
    swift_bridgeObjectRetain_n(v16, 2LL);
    swift_bridgeObjectRetain();
    id v21 = *((id *)&v54 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v22 = *((id *)&v53 + 1);
    swift_bridgeObjectRetain();
    uint64_t v48 = v15;
    String.hash(into:)(v55, v15, v16);
    uint64_t v47 = v16;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v46 = v17;
    String.hash(into:)(v55, v17, v54);
    swift_bridgeObjectRelease();
    id v23 = v21;
    NSObject.hash(into:)(v55);

    swift_bridgeObjectRetain();
    String.hash(into:)(v55, v52, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.hash(into:)(v55, v44, v19);
    uint64_t v45 = v19;
    uint64_t v24 = v20;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.hash(into:)(v55, v51, v53);
    uint64_t v1 = v42;
    swift_bridgeObjectRelease();
    id v25 = v22;
    uint64_t v3 = v43;
    id v26 = v25;
    NSObject.hash(into:)(v55);

    Hasher._combine(_:)(*(void *)(v20 + 16));
    uint64_t v27 = *(void *)(v20 + 16);
    if (v27)
    {
      swift_bridgeObjectRetain();
      uint64_t v28 = (void **)(v20 + 64);
      do
      {
        uint64_t v29 = (uint64_t)*(v28 - 4);
        uint64_t v30 = (uint64_t)*(v28 - 3);
        uint64_t v31 = (uint64_t)*(v28 - 2);
        uint64_t v32 = (uint64_t)*(v28 - 1);
        __int128 v33 = *v28;
        v28 += 5;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v34 = v33;
        String.hash(into:)(v55, v29, v30);
        swift_bridgeObjectRetain();
        String.hash(into:)(v55, v31, v32);
        swift_bridgeObjectRelease();
        id v35 = v34;
        NSObject.hash(into:)(v55);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        --v27;
      }

      while (v27);
      swift_bridgeObjectRelease();
      uint64_t v1 = v42;
      uint64_t v3 = v43;
    }

    Swift::Int v36 = Hasher._finalize()();
    unint64_t result = _HashTable.nextHole(atOrAfter:)(v36 & ~(-1LL << *(_BYTE *)(v3 + 32)), v41, ~(-1LL << *(_BYTE *)(v3 + 32)));
    *(void *)(v41 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v37 = *(void *)(v3 + 48) + 104 * result;
    *(void *)uint64_t v37 = v48;
    *(void *)(v37 + 8) = v47;
    *(void *)(v37 + 1sub_10000AC58(v0 + 6) = v46;
    *(_OWORD *)(v37 + 24) = v54;
    *(void *)(v37 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v52;
    *(void *)(v37 + 48) = v18;
    *(void *)(v37 + 5sub_10000AC58(v0 + 6) = v44;
    *(void *)(v37 + 64) = v45;
    int64_t v8 = v50;
    *(void *)(v37 + 72) = v51;
    *(_OWORD *)(v37 + 8sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v53;
    *(void *)(v37 + 9sub_10000AC58(v0 + 6) = v24;
    ++*(void *)(v3 + 16);
    unint64_t v6 = v49;
    if (v49) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v10 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v10 >= v40) {
      goto LABEL_27;
    }
    unint64_t v11 = *(void *)(v39 + 8 * v10);
    int64_t v12 = v8 + 1;
    if (!v11)
    {
      int64_t v12 = v8 + 2;
      if (v8 + 2 >= v40) {
        goto LABEL_27;
      }
      unint64_t v11 = *(void *)(v39 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v8 + 3;
        if (v8 + 3 >= v40) {
          goto LABEL_27;
        }
        unint64_t v11 = *(void *)(v39 + 8 * v12);
        if (!v11) {
          break;
        }
      }
    }

void sub_10001ABF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v3 != v6 || v5 != v7) {
    sub_10001BB00(v3, v5, v6, v7);
  }
  sub_10001198C();
  sub_10000ADB0();
  sub_10000AF74();
}

void sub_10001AC60(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = (void **)(a2 + 64);
    do
    {
      uint64_t v6 = (uint64_t)*(v5 - 4);
      uint64_t v7 = (uint64_t)*(v5 - 3);
      int64_t v8 = *v5;
      v5 += 5;
      sub_1000119E4();
      sub_10001BD0C();
      id v9 = v8;
      String.hash(into:)(a1, v6, v7);
      sub_10001BD0C();
      sub_10001C154(a1);
      sub_10000AEE8();
      id v10 = v9;
      NSObject.hash(into:)(a1);
      sub_10000AEE8();
      sub_10001BC70();

      --v4;
    }

    while (v4);
  }

  sub_10001BE4C();
}

Swift::Int sub_10001AD08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  Swift::Int v6 = sub_10001BC48();
  sub_100011958();
  return v6;
}

uint64_t sub_10001AD70( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (qword_1001300A8 != -1) {
    swift_once(&qword_1001300A8, sub_100012AD4);
  }
  return sub_10001AE08(a1, a2, a3, a4, a5, qword_100130C10, a7, a8);
}

uint64_t sub_10001AE08( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v25[3] = a7;
  v25[4] = a8;
  uint64_t v15 = sub_10001AFA8(v25);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 16LL))(v15, a5, a7);
  uint64_t v16 = *(dispatch_queue_s **)(a6 + 32);
  sub_10001AFE4((uint64_t)v25, (uint64_t)v24);
  uint64_t v17 = (void *)swift_allocObject(&unk_100123028, 96LL, 7LL);
  v17[2] = a6;
  v17[3] = a1;
  v17[4] = a2;
  v17[5] = a3;
  v17[6] = a4;
  sub_100009EEC(v24, (uint64_t)(v17 + 7));
  uint64_t v18 = swift_allocObject(&unk_100123050, 32LL, 7LL);
  *(void *)(v18 + 1sub_10000AC58(v0 + 6) = sub_10001B05C;
  *(void *)(v18 + 24) = v17;
  v22[4] = sub_10001B080;
  uint64_t v23 = v18;
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 1107296256LL;
  uint64_t v22[2] = sub_100013084;
  v22[3] = &unk_100123068;
  uint64_t v19 = _Block_copy(v22);
  uint64_t v20 = v23;
  swift_retain(a6);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  swift_retain(v18);
  swift_release(v20);
  dispatch_sync(v16, v19);
  _Block_release(v19);
  LOBYTE(a4) = swift_isEscapingClosureAtFileLocation(v18, "", 111LL, 134LL, 20LL, 1LL);
  swift_release(v17);
  uint64_t result = swift_release(v18);
  if ((a4 & 1) == 0) {
    return sub_10000AC58(v25);
  }
  __break(1u);
  return result;
}

void *sub_10001AFA8(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

void sub_10001AFE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  sub_10000ADA8();
}

uint64_t sub_10001B024()
{
  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t sub_10001B05C()
{
  return sub_100012D08( *(void **)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  v0 + 56);
}

uint64_t sub_10001B070()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10001B080()
{
}

uint64_t sub_10001B09C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001B0AC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10001B0B4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10001B294(a1, sub_1000182B0, a2);
}

uint64_t sub_10001B0C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v8 = -1LL;
  }
  a4[3] = 0LL;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t sub_10001B100(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10001B108()
{
  void (*v11)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void v20[3];
  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t v10 = *(void *)(*(void *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    unint64_t v11 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    sub_10000AFB0();
    sub_10001BEF8();
    v11(&v19, v20);
    sub_100011958();
    sub_10001198C();
    return v19;
  }

  uint64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      uint64_t v15 = v0[1];
      uint64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v5 = (v16 - 1) & v16;
        unint64_t v6 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v4 = v13;
        goto LABEL_3;
      }

      uint64_t v17 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        uint64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          uint64_t v13 = v17;
          goto LABEL_7;
        }

        int64_t v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          uint64_t v16 = *(void *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            uint64_t v13 = v3 + 3;
            goto LABEL_7;
          }

          uint64_t v17 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            uint64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            uint64_t v13 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              uint64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v4 = v14 - 1;
              uint64_t v18 = v3 + 6;
              while (v18 < v14)
              {
                uint64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  uint64_t v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }

    uint64_t result = 0LL;
    v0[3] = v4;
    v0[4] = 0LL;
  }

  return result;
}

uint64_t sub_10001B288@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10001B294(a1, sub_10001BA78, a2);
}

uint64_t sub_10001B294@<X0>( void *a1@<X0>, uint64_t (*a2)(uint64_t *, void, void, void)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(&v7, *a1, a1[1], a1[2]);
  uint64_t v5 = v7;
  *a3 = result;
  a3[1] = v6;
  a3[2] = v5;
  return result;
}

uint64_t sub_10001B2D8()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10001B300(void *a1)
{
}

uint64_t sub_10001B324()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_10001B360()
{
  uint64_t v0 = swift_task_alloc(dword_100130E04);
  uint64_t v1 = (void *)sub_10000E9E0(v0);
  uint64_t v2 = sub_10001BE18(v1);
  return sub_10001345C(v2, v3, v4, v5, v6);
}

uint64_t sub_10001B3C0(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = swift_task_alloc(dword_100130E14);
  uint64_t v9 = (void *)sub_10000E9E0(v8);
  void *v9 = v3;
  v9[1] = sub_10001BA68;
  return sub_100013544(a1, a2, v7, v6);
}

uint64_t sub_10001B428()
{
  return swift_deallocObject(v0, 112LL, 7LL);
}

uint64_t sub_10001B468()
{
  uint64_t v0 = swift_task_alloc(dword_100130E24);
  uint64_t v1 = (void *)sub_10000E9E0(v0);
  uint64_t v2 = sub_10001BE18(v1);
  return sub_10001383C(v2, v3, v4, v5, v6);
}

uint64_t sub_10001B4C8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10001B4F0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10001B514()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

unint64_t sub_10001B540()
{
  unint64_t result = qword_100130578;
  if (!qword_100130578)
  {
    uint64_t v1 = sub_100008E58(&qword_100130570);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100130578);
  }

  return result;
}

uint64_t sub_10001B584(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LNBundleRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001B5C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LNBundleRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_10001B60C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100008DB0(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  sub_10000ADA8();
}

void sub_10001B644(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100008DB0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  sub_10000ADA8();
}

uint64_t sub_10001B684(void *a1)
{
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t *sub_10001B6B4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v6 = a2[2];
  uint64_t v5 = a2[3];
  a1[2] = v6;
  a1[3] = v5;
  uint64_t v7 = a2[4];
  a1[4] = v7;
  swift_unknownObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t *sub_10001B708(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v5);
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for LNAppShortcutSpanSynonymRecord(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 1sub_10000AC58(v0 + 6) = v3;
  return result;
}

uint64_t *sub_10001B7A0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_unknownObjectRelease(v4);
  uint64_t v5 = a2[2];
  uint64_t v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a2[4];
  uint64_t v8 = a1[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t sub_10001B7F4(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10001B834(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 2sub_10000AC58(v0 + 4) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for ConcreteXPCEvent()
{
}

void *sub_10001B888(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_10001B8B4(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *sub_10001B8BC(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for RegistryUpdatedNotification(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *sub_10001B908(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_10001B938(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10001B978(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 1sub_10000AC58(v0 + 6) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 1sub_10000AC58(v0 + 6) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for XPCStreamName()
{
}

void *sub_10001B9C0()
{
  return &protocol witness table for String;
}

unint64_t sub_10001B9D0()
{
  unint64_t result = qword_100131008;
  if (!qword_100131008)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F56E0, &unk_100123298);
    atomic_store(result, (unint64_t *)&qword_100131008);
  }

  return result;
}

void *sub_10001BA0C()
{
  return &protocol witness table for String;
}

unint64_t sub_10001BA1C()
{
  unint64_t result = qword_100131010;
  if (!qword_100131010)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F5718, &unk_100123298);
    atomic_store(result, (unint64_t *)&qword_100131010);
  }

  return result;
}

void *sub_10001BA58()
{
  return &protocol witness table for String;
}

void *sub_10001BA7C@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t sub_10001BA8C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 55LL, 2LL, a7, 25LL, a9, a10, a11);
}

  ;
}

uint64_t sub_10001BAB8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2LL, a7, 25LL, a9, a10, a11);
}

uint64_t sub_10001BAC4()
{
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = 0LL;
  return swift_bridgeObjectRelease(v0);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_10001BB00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL);
}

uint64_t sub_10001BB08()
{
  return swift_release(v0);
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_10001BB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return sub_100008DB0(a5);
}

uint64_t sub_10001BBA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return v4(0LL, v5, a3, v3);
}

uint64_t sub_10001BBB4()
{
  return 0LL;
}

  ;
}

uint64_t sub_10001BBD4@<X0>(uint64_t a1@<X8>)
{
  return sub_100017CAC(0LL, (unint64_t)(a1 + 63) >> 6, v1);
}

  ;
}

uint64_t sub_10001BBFC()
{
  return v0;
}

uint64_t sub_10001BC10(uint64_t a1)
{
  return swift_allocObject( v1,  ((*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL))
         + *(void *)(*(void *)(a1 - 8) + 72LL) * v2,
           *(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) | 7LL);
}

uint64_t sub_10001BC34()
{
  return 0LL;
}

Swift::Int sub_10001BC48()
{
  return Hasher._finalize()();
}

uint64_t sub_10001BC50(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100008DB0(a3);
}

uint64_t sub_10001BC70()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

uint64_t sub_10001BC94()
{
  return ((uint64_t (*)(void))swift_arrayInitWithTakeBackToFront)();
}

uint64_t sub_10001BCA4()
{
  return ((uint64_t (*)(void))swift_arrayInitWithTakeFrontToBack)();
}

  ;
}

uint64_t sub_10001BCD0()
{
  return static _DictionaryStorage.resize(original:capacity:move:)(v1, v0, v2);
}

uint64_t sub_10001BCEC(uint64_t a1, uint64_t a2)
{
  return static _DictionaryStorage.resize(original:capacity:move:)(a1, a2, v2);
}

uint64_t sub_10001BCF8()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001BD00()
{
  return v1(v0 + 32, v2);
}

uint64_t sub_10001BD0C()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

void sub_10001BDA0()
{
}

  ;
}

void sub_10001BDC4(unint64_t a1@<X8>)
{
  *(void *)(v1 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << a1;
}

void sub_10001BDE4(uint64_t a1@<X8>)
{
  *(void *)(v2 + 1sub_10000AC58(v0 + 6) = v1;
  *(void *)(v2 + 2sub_10000AC58(v0 + 4) = 2 * (a1 / v3);
}

  ;
}

  ;
}

uint64_t sub_10001BE18(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10001BE38()
{
  return swift_retain(v0);
}

void *sub_10001BE40(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, *(void *)(v1 + 40));
}

  ;
}

  ;
}

uint64_t sub_10001BE7C()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

uint64_t sub_10001BEA0(uint64_t a1, uint64_t a2)
{
  return Logger.init(subsystem:category:)(a1, a2, v3, v2);
}

void *sub_10001BEAC(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, v1);
}

uint64_t sub_10001BEC0()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001BEC8()
{
  return v0 + 32;
}

uint64_t sub_10001BED4(uint64_t a1, uint64_t a2)
{
  return sub_10000C194(a1, a2);
}

  ;
}

void sub_10001BEE8(char a1@<W8>)
{
  *uint64_t v1 = -1LL << a1;
}

uint64_t sub_10001BEF8()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001BF00()
{
  return v0;
}

  ;
}

uint64_t sub_10001BF1C(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

  ;
}

  ;
}

uint64_t sub_10001BF5C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 32));
}

  ;
}

  ;
}

uint64_t sub_10001BF80()
{
  return swift_arrayInitWithCopy(v0);
}

  ;
}

size_t sub_10001BFA8(void *a1)
{
  size_t result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / 8);
  return result;
}

uint64_t sub_10001BFD0()
{
  return swift_task_alloc(v0);
}

  ;
}

  ;
}

uint64_t sub_10001C004()
{
  return v0;
}

uint64_t sub_10001C01C(uint64_t a1, ...)
{
  return String.hash(into:)(va, v1, v2);
}

uint64_t sub_10001C02C(uint64_t a1, ...)
{
  return String.hash(into:)(va, v2, v1);
}

  ;
}

uint64_t sub_10001C050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return swift_dynamicCast(a1, va, a3, a4, 6LL);
}

uint64_t sub_10001C05C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return String.init<A>(describing:)(a1, a18);
}

uint64_t sub_10001C064()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001C06C()
{
  return swift_unknownObjectRelease(*(void *)(v0 + 16));
}

  ;
}

uint64_t sub_10001C088(uint64_t a1)
{
  return static NSObject.== infix(_:_:)(a1, v1);
}

id sub_10001C094()
{
  return *(id *)(*(void *)(v0 + 48) + 8 * v1);
}

uint64_t sub_10001C0A0( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  return sub_10000DE60(a1, a2, (uint64_t *)va);
}

  ;
}

  ;
}

uint64_t sub_10001C0D4()
{
  return v0;
}

void sub_10001C0E8(uint64_t a1@<X8>)
{
  uint64_t v4 = (void *)(*(void *)(v1 + 48) + 16 * a1);
  *uint64_t v4 = v3;
  v4[1] = v2;
}

  ;
}

  ;
}

size_t sub_10001C11C(void *a1)
{
  size_t result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

  ;
}

uint64_t sub_10001C154(uint64_t a1)
{
  return String.hash(into:)(a1, v1, v2);
}

uint64_t sub_10001C160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2LL, a7, 24LL);
}

void sub_10001C16C()
{
  *uint64_t v0 = 0x8000000000000000LL;
}

uint64_t sub_10001C180(uint64_t a1)
{
  return String.hash(into:)(a1, v2, v1);
}

size_t sub_10001C18C(void *a1)
{
  size_t result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

uint64_t sub_10001C1B0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v1 + 48) + 8 * v0));
}

uint64_t sub_10001C1BC()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001C1C4()
{
  return sub_100008DB0(v0);
}

  ;
}

uint64_t sub_10001C1D4()
{
  return type metadata accessor for LNBundleRecord(0LL);
}

void *sub_10001C1DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, *(void *)(v5 + 40));
}

uint64_t sub_10001C1E8()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

  ;
}

  ;
}

  ;
}

void *sub_10001C228()
{
  return memcpy(&unk_100135040, __src, 0xA8uLL);
}

uint64_t sub_10001C280(uint64_t a1)
{
  return sub_10001C2C4(a1, (uint64_t)&qword_1001350E8, 0xD000000000000010LL, 0x80000001000F96E0LL);
}

uint64_t sub_10001C2A4(uint64_t a1)
{
  return sub_10001C2C4(a1, (uint64_t)&qword_100135100, 0x617461646174656DLL, 0xE800000000000000LL);
}

uint64_t sub_10001C2C4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = sub_100008DB0((uint64_t *)&unk_1001323C0);
  sub_10001DCEC((unint64_t *)&qword_100131110, (uint64_t *)&unk_1001323C0);
  return ExpressionType.init(_:)(a3, a4, v6, v7);
}

void *sub_10001C338()
{
  return memcpy(&unk_100131020, __src, 0xA8uLL);
}

uint64_t sub_10001C38C(uint64_t a1)
{
  return sub_10001C2C4(a1, (uint64_t)&qword_1001310C8, 0xD000000000000010LL, 0x80000001000F96E0LL);
}

uint64_t sub_10001C3B0(uint64_t a1)
{
  return sub_10001C2C4(a1, (uint64_t)&unk_1001310E0, 0xD000000000000010LL, 0x80000001000F9720LL);
}

uint64_t sub_10001C3D4()
{
  uint64_t v0 = sub_100008DB0((uint64_t *)&unk_1001323D0);
  sub_10001DCEC(&qword_100131118, (uint64_t *)&unk_1001323D0);
  return ExpressionType.init(_:)(0x446465646F636E65LL, 0xEB00000000617461LL, v0, v1);
}

void sub_10001C440()
{
  uint64_t v44 = v0;
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_10001C7CC(v4, v2);
  uint64_t v11 = v10;
  if (qword_1001300C8 != -1) {
    swift_once(&qword_1001300C8, sub_10001C338);
  }
  sub_10001DEBC(v42, &unk_100131020);
  sub_10001DEBC(&v36, &unk_100131020);
  sub_10001D9AC(v42);
  if (qword_1001300E0 != -1) {
    swift_once(&qword_1001300E0, sub_10001C3D4);
  }
  uint64_t v12 = qword_1001310F8;
  uint64_t v13 = unk_100131100;
  uint64_t v14 = qword_100131108;
  int64_t v40 = (ValueMetadata *)sub_100008DB0((uint64_t *)&unk_1001323D0);
  uint64_t v41 = &protocol witness table for Expression<A>;
  v39[0] = v12;
  v39[1] = v13;
  v39[2] = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  SchemaType.select(_:_:)( (uint64_t)v39,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table);
  sub_10001DAF0(v42);
  sub_10000AC58(v39);
  sub_10001DEBC(v43, v38);
  if (qword_1001300D0 != -1) {
    swift_once(&qword_1001300D0, sub_10001C38C);
  }
  sub_10001DECC((uint64_t)&qword_1001310C8);
  uint64_t v36 = v8;
  uint64_t v37 = v6;
  == infix<A>(_:_:)();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  if (qword_1001300D8 != -1) {
    swift_once(&qword_1001300D8, sub_10001C3B0);
  }
  sub_10001DECC((uint64_t)&unk_1001310E0);
  uint64_t v36 = v9;
  uint64_t v37 = v11;
  == infix<A>(_:_:)();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  sub_10001BE7C();
  && infix(_:_:)(v16, v18, v20, v22, v24, v26);
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  sub_10001DEC4();
  sub_10000ADB0();
  sub_10001198C();
  sub_10001DED8();
  int64_t v40 = &type metadata for Table;
  uint64_t v41 = &protocol witness table for Table;
  uint64_t v33 = sub_10000C254((uint64_t)&unk_100123370, 184LL);
  uint64_t v34 = v33 + 16;
  v39[0] = v33;
  sub_10001DEBC(&v36, v43);
  sub_10001C064();
  sub_10001BCF8();
  QueryType.filter(_:)( v28,  v30,  v32,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  v34);
  sub_10001191C(v32);
  sub_10001191C(v30);
  sub_10001DF54();
  uint64_t v35 = Connection.pluck(_:)(v39);
  sub_10000AC58(v39);
  if (!v44 && v35)
  {
    sub_10001DECC((uint64_t)&qword_1001310F8);
    Row.get<A>(_:)();
    swift_bridgeObjectRelease();
    sub_10000ADB0();
    sub_10001C8D4(v38[0], v38[1]);
    sub_10001DF48();
  }

  sub_10001DEE8();
}

uint64_t sub_10001C7CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)objc_opt_self(&OBJC_CLASS___NSLocale);
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v5 = [v3 componentsFromLocaleIdentifier:v4];

  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v5,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v6);
  id v8 = [v3 localeIdentifierFromComponents:isa];

  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  return v9;
}

uint64_t sub_10001C8D4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100008DB0(&qword_100131128);
  uint64_t v6 = swift_allocObject(v5, 48LL, 7LL);
  *(_OWORD *)(v6 + 1sub_10000AC58(v0 + 6) = xmmword_1000F57D0;
  *(void *)(v6 + 32) = sub_10000A1A0(0LL, (unint64_t *)&qword_100131130, &OBJC_CLASS___NSArray_ptr);
  *(void *)(v6 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = sub_10000A1A0(0LL, &qword_100132D50, &OBJC_CLASS___LNAutoShortcut_ptr);
  static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(v9, v6, a1, a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v2)
  {
    if (v9[3])
    {
      uint64_t v8 = sub_100008DB0(&qword_100133520);
      else {
        return 0LL;
      }
    }

    else
    {
      sub_10001B60C((uint64_t)v9, &qword_100130EA0);
      return 0LL;
    }
  }

  return result;
}

void sub_10001CA18()
{
  uint64_t v86 = sub_10001DF5C();
  unint64_t v87 = v1;
  if (qword_1001303C0 != -1) {
    swift_once(&qword_1001303C0, sub_1000C0778);
  }
  sub_10001DEBC(v100, &unk_100135B78);
  if (qword_1001300C8 != -1) {
    swift_once(&qword_1001300C8, sub_10001C338);
  }
  sub_10001DEBC(v101, &unk_100131020);
  uint64_t v2 = sub_100008DB0(&qword_100131138);
  sub_10001D9AC(v101);
  sub_10001DCEC(&qword_100131140, &qword_100131138);
  ExpressionType.init(_:)(0xD000000000000010LL, 0x80000001000F9720LL, v2, v3);
  sub_10001DEBC(&v96, v101);
  uint64_t v4 = sub_100008DB0((uint64_t *)&unk_100130C00);
  uint64_t v83 = sub_10001DF00(v94, v95, v5, v6, v4);
  uint64_t isUnique = v7;
  uint64_t v85 = v8;
  sub_10001DEC4();
  sub_10001DF40();
  sub_10001DAF0(v101);
  sub_10001DEBC(v102, &unk_100131020);
  uint64_t v9 = sub_100008DB0(&qword_100131148);
  sub_10001D9AC(v102);
  sub_10001DCEC(&qword_100131150, &qword_100131148);
  ExpressionType.init(_:)(0x446465646F636E65LL, 0xEB00000000617461LL, v9, v10);
  sub_10001DEBC(&v96, v102);
  uint64_t v11 = sub_100008DB0(&qword_100131158);
  uint64_t v14 = sub_10001DF00(v94, v95, v12, v13, v11);
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  sub_10001DEC4();
  swift_bridgeObjectRelease();
  sub_10001DAF0(v102);
  sub_10001DEBC(v103, &unk_100135B78);
  sub_10001D9AC(v103);
  if (qword_1001303C8 != -1) {
    swift_once(&qword_1001303C8, sub_1000C07CC);
  }
  uint64_t v19 = qword_100135C20;
  uint64_t v20 = *(void *)algn_100135C28;
  uint64_t v21 = qword_100135C30;
  sub_10001DEBC(&v96, v103);
  uint64_t v22 = QueryType.namespace<A>(_:)(v19, v20, v21, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  sub_10001DAF0(v103);
  sub_10001DEBC(&v96, v100);
  v93[3] = sub_100008DB0((uint64_t *)&unk_1001323C0);
  v93[4] = &protocol witness table for Expression<A>;
  v93[0] = v22;
  v93[1] = v24;
  v93[2] = v26;
  uint64_t v27 = sub_100008DB0(&qword_100131160);
  uint64_t v28 = sub_10000C254(v27, 72LL);
  *(_OWORD *)(v28 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
  *(void *)(v28 + 5sub_10000AC58(v0 + 6) = v9;
  *(void *)(v28 + 6sub_10000AC58(v0 + 4) = &protocol witness table for Expression<A>;
  uint64_t v82 = v14;
  *(void *)(v28 + 32) = v14;
  *(void *)(v28 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v16;
  *(void *)(v28 + 48) = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v91 = v16;
  sub_10001C064();
  uint64_t v107 = v18;
  sub_10001BCF8();
  SchemaType.select(_:_:)( (uint64_t)v93,  v28,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table);
  swift_setDeallocating(v28);
  sub_100058868();
  sub_10000AC58(v93);
  sub_10001DEBC(v104, &v94);
  sub_10001DEBC(v93, &v94);
  sub_10001DEBC(v105, &unk_100131020);
  v92[3] = &type metadata for Table;
  v92[4] = &protocol witness table for Table;
  v92[0] = sub_10000C254((uint64_t)&unk_100123370, 184LL);
  sub_10001DEBC((void *)(v92[0] + 16LL), &unk_100131020);
  sub_10001D9AC(v105);
  sub_10001D9AC(v105);
  if (qword_1001300D0 != -1) {
    swift_once(&qword_1001300D0, sub_10001C38C);
  }
  uint64_t v29 = qword_1001310C8;
  uint64_t v30 = unk_1001310D0;
  uint64_t v31 = qword_1001310D8;
  sub_10001DEBC(&v96, v105);
  QueryType.namespace<A>(_:)(v29, v30, v31, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  sub_10001DAF0(v105);
  uint64_t v80 = &protocol witness table for String;
  == infix<A>(_:_:)();
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  sub_10000AEE8();
  sub_10001BE7C();
  sub_10001DEC4();
  sub_10001DED8();
  uint64_t v96 = v86;
  unint64_t v97 = v87;
  uint64_t v38 = == infix<A>(_:_:)( v83,  v85,  isUnique,  &v96,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  sub_10001DEC4();
  sub_10001DF40();
  sub_10001DED8();
  uint64_t v43 = && infix(_:_:)(v33, v35, v37, v38, v40, v42);
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  sub_10001198C();
  sub_10000ADB0();
  sub_10001BEC0();
  sub_10000AEE8();
  QueryType.join(_:_:on:)( 2,  v92,  v43,  v45,  v47,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  (uint64_t)&v96);
  sub_10001DF40();
  sub_10001BE7C();
  sub_10001DAF0(v104);
  sub_10000AC58(v92);
  sub_10001DEBC(v106, &v96);
  uint64_t v98 = &type metadata for Table;
  uint64_t v99 = &protocol witness table for Table;
  uint64_t v96 = sub_10000C254((uint64_t)&unk_100123370, 184LL);
  sub_10001DEBC((void *)(v96 + 16), v106);
  Connection.prepareRowIterator(_:)(&v96);
  if (v0)
  {
    sub_10001DEE0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000AC58(&v96);
LABEL_12:
    sub_10001DEE8();
    return;
  }

  uint64_t v49 = v48;
  sub_10000AC58(&v96);
  uint64_t v50 = v91;
  unint64_t v51 = sub_10001DF68();
  uint64_t v52 = _swiftEmptyDictionarySingleton;
  __int128 v89 = xmmword_1000F57D0;
  uint64_t v88 = (char *)&type metadata for Any + 8;
  uint64_t v90 = v49;
  while (1)
  {
    if (!v51)
    {
      sub_10001DEE0();
      sub_10001BEC0();
      sub_10001BE7C();
      sub_10001DF10();
      goto LABEL_12;
    }

    sub_10001C064();
    Row.get<A>(_:)();
    uint64_t v53 = v96;
    uint64_t v54 = v97;
    Row.get<A>(_:)( v82,  v50,  v107,  v49,  v51,  (uint64_t)&type metadata for Data,  (uint64_t)&protocol witness table for Data,  v55,  (uint64_t)v80,  v81,  v82,  v83,  isUnique,  v85,  v86,  (uint64_t)v88,  v89,  *((uint64_t *)&v89 + 1),  v90,  v91);
    sub_10000ADB0();
    sub_10001BE7C();
    unint64_t v56 = v97;
    if (v97 >> 60 == 15)
    {
      sub_10001DED8();
      sub_10001DEE0();
      sub_10001BEC0();
      swift_bridgeObjectRelease();
      sub_10001DF10();
      sub_10001DEC4();
      goto LABEL_12;
    }

    uint64_t v57 = v96;
    sub_10000A1A0(0LL, &qword_100131120, &OBJC_CLASS___NSKeyedUnarchiver_ptr);
    uint64_t v58 = sub_100008DB0(&qword_100131128);
    uint64_t v59 = sub_10000C254(v58, 48LL);
    *(_OWORD *)(v59 + 1sub_10000AC58(v0 + 6) = v89;
    *(void *)(v59 + 32) = sub_10000A1A0(0LL, (unint64_t *)&qword_100131130, &OBJC_CLASS___NSArray_ptr);
    *(void *)(v59 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = sub_10000A1A0(0LL, &qword_100132D50, &OBJC_CLASS___LNAutoShortcut_ptr);
    static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(&v96, v59, v57, v56);
    swift_bridgeObjectRelease();
    if (!v98)
    {
      sub_10001B60C((uint64_t)&v96, &qword_100130EA0);
      goto LABEL_24;
    }

    uint64_t v60 = sub_100008DB0(&qword_100133520);
    if ((swift_dynamicCast(&v94, &v96, v88, v60, 6LL) & 1) != 0) {
      break;
    }
LABEL_24:
    swift_bridgeObjectRetain();
    uint64_t v70 = sub_10001DF18();
    char v72 = v71;
    sub_10001DEC4();
    if ((v72 & 1) == 0) {
      goto LABEL_25;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v52);
    uint64_t v96 = (uint64_t)v52;
    Swift::Int v74 = v52[3];
    sub_100008DB0(&qword_100130718);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v74);
    uint64_t v52 = (void *)v96;
    swift_bridgeObjectRelease();
    uint64_t v75 = sub_100008DB0(&qword_100133520);
    _NativeDictionary._delete(at:)(v70, v52, &type metadata for String, v75);
    sub_10000ADB0();
LABEL_29:
    sub_10001DED8();
LABEL_25:
    swift_bridgeObjectRelease();
    sub_10001DF74();
    unint64_t v51 = sub_10001DF68();
    uint64_t v49 = v90;
    uint64_t v50 = v91;
  }

  uint64_t v85 = v94;
  LODWORD(isUnique) = swift_isUniquelyReferenced_nonNull_native(v52);
  uint64_t v96 = (uint64_t)v52;
  uint64_t v61 = sub_10001DF18();
  uint64_t v62 = v52[2];
  LODWORD(v8sub_10000AC58(v0 + 6) = v63;
  BOOL v64 = (v63 & 1) == 0;
  Swift::Int v65 = v62 + v64;
  if (!__OFADD__(v62, v64))
  {
    unint64_t v66 = v61;
    sub_100008DB0(&qword_100130718);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v65))
    {
      uint64_t v67 = sub_100015F98(v53, v54);
      if ((v86 & 1) != (v68 & 1)) {
        goto LABEL_34;
      }
      unint64_t v66 = v67;
    }

    uint64_t v52 = (void *)v96;
    if ((v86 & 1) != 0)
    {
      uint64_t v69 = *(void *)(v96 + 56);
      swift_bridgeObjectRelease();
      *(void *)(v69 + 8 * v6sub_10000AC58(v0 + 6) = v85;
    }

    else
    {
      *(void *)(v96 + 8 * (v66 >> 6) + 64) |= 1LL << v66;
      uint64_t v76 = (uint64_t *)(v52[6] + 16 * v66);
      *uint64_t v76 = v53;
      v76[1] = v54;
      *(void *)(v52[7] + 8 * v6sub_10000AC58(v0 + 6) = v85;
      uint64_t v77 = v52[2];
      BOOL v78 = __OFADD__(v77, 1LL);
      uint64_t v79 = v77 + 1;
      if (v78) {
        goto LABEL_33;
      }
      v52[2] = v79;
      swift_bridgeObjectRetain();
    }

    goto LABEL_29;
  }

  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10001D474()
{
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_10001DF5C();
  unint64_t v7 = v6;
  if (qword_1001300C8 != -1) {
    swift_once(&qword_1001300C8, sub_10001C338);
  }
  sub_10001DEBC(v29, &unk_100131020);
  uint64_t v8 = sub_100008DB0(&qword_1001323E0);
  v9._rawValue = (void *)swift_initStackObject(v8, v28);
  *((_OWORD *)v9._rawValue + 1) = xmmword_1000F57E0;
  sub_10001D9AC(v29);
  if (qword_1001300D0 != -1) {
    swift_once(&qword_1001300D0, sub_10001C38C);
  }
  uint64_t v10 = sub_10001DECC((uint64_t)&qword_1001310C8);
  uint64_t v26 = v4;
  unint64_t v27 = v2;
  <- infix<A>(_:_:)( v10,  v11,  v12,  (uint64_t)&v26,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
  if (qword_1001300D8 != -1) {
    swift_once(&qword_1001300D8, sub_10001C3B0);
  }
  uint64_t v13 = sub_10001DECC((uint64_t)&unk_1001310E0);
  uint64_t v26 = v5;
  unint64_t v27 = v7;
  <- infix<A>(_:_:)( v13,  v14,  v15,  (uint64_t)&v26,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
  sub_10001BEC0();
  if (qword_1001300E0 != -1) {
    swift_once(&qword_1001300E0, sub_10001C3D4);
  }
  uint64_t v16 = qword_1001310F8;
  uint64_t v17 = unk_100131100;
  uint64_t v18 = qword_100131108;
  uint64_t v19 = sub_10001D704();
  if (v0)
  {
    sub_10001DF54();
    sub_10001DC30((void *)v9._rawValue + 14);
    sub_10001DC30((void *)v9._rawValue + 4);
    *((void *)v9._rawValue + 2) = 0LL;
    swift_setDeallocating(v9._rawValue);
    sub_100058874();
  }

  else
  {
    uint64_t v21 = (uint64_t)v19;
    unint64_t v22 = v20;
    uint64_t v26 = (uint64_t)v19;
    unint64_t v27 = v20;
    <- infix<A>(_:_:)( v16,  v17,  v18,  (uint64_t)&v26,  (uint64_t)&type metadata for Data,  (uint64_t)&protocol witness table for Data);
    sub_10000A1D8(v21, v22);
    sub_10001DEBC(&v26, v29);
    AppIntents_SQLite::Insert v30 = QueryType.insert(or:_:)(AppIntents_SQLite_OnConflict_replace, v9);
    uint64_t countAndFlagsBits = v30.template._countAndFlagsBits;
    object = v30.template._object;
    rawValue = v30.bindings._rawValue;
    swift_bridgeObjectRelease();
    sub_10001DF54();
    v31.template._uint64_t countAndFlagsBits = countAndFlagsBits;
    v31.template._object = object;
    v31.bindings._rawValue = rawValue;
    Connection.run(_:)(v31);
    sub_10001198C();
    sub_10000AEE8();
  }

  sub_10001DEE8();
}

void *sub_10001D704()
{
  uint64_t v0 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
  sub_10000A1A0(0LL, &qword_100132D50, &OBJC_CLASS___LNAutoShortcut_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v7 = 0LL;
  id v2 = [v0 archivedDataWithRootObject:isa requiringSecureCoding:1 error:&v7];

  id v3 = v7;
  if (v2)
  {
    uint64_t v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
  }

  else
  {
    uint64_t v4 = v3;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow(v5);
  }

  return v4;
}

void sub_10001D810()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  if (qword_1001300C8 != -1) {
    swift_once(&qword_1001300C8, sub_10001C338);
  }
  sub_10001DEBC(v15, &unk_100131020);
  sub_10001D9AC(v15);
  if (qword_1001300D0 != -1) {
    swift_once(&qword_1001300D0, sub_10001C38C);
  }
  sub_10001DECC((uint64_t)&qword_1001310C8);
  v14[0] = v3;
  v14[1] = v1;
  == infix<A>(_:_:)();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  sub_10001DEBC(v13, v15);
  swift_bridgeObjectRetain();
  sub_10001BCF8();
  QueryType.filter(_:)( v5,  v7,  v9,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  (uint64_t)v14);
  sub_10001191C(v9);
  sub_10001191C(v7);
  sub_10001DAF0(v15);
  sub_10001DEBC(v16, v14);
  sub_10001DEBC(v13, v14);
  AppIntents_SQLite::Delete v17 = QueryType.delete()();
  uint64_t countAndFlagsBits = v17.template._countAndFlagsBits;
  object = v17.template._object;
  rawValue = v17.bindings._rawValue;
  sub_10001DAF0(v16);
  v18.template._uint64_t countAndFlagsBits = countAndFlagsBits;
  v18.template._object = object;
  v18.bindings._rawValue = rawValue;
  Connection.run(_:)(v18);
  sub_10000AEE8();
  sub_10001BE7C();
  sub_10001DEE8();
}

void *sub_10001D9AC(void *a1)
{
  uint64_t v2 = a1[9];
  uint64_t v3 = a1[10];
  uint64_t v4 = a1[11];
  uint64_t v5 = a1[12];
  uint64_t v6 = a1[13];
  uint64_t v8 = a1[15];
  uint64_t v9 = a1[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10001DA7C(v2, v3, v4);
  sub_10001DAAC(v5, v6, v9, v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10001DA7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a3);
  }

  return result;
}

uint64_t sub_10001DAAC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return sub_10001DA7C(a2, a3, a4);
  }

  return result;
}

void *sub_10001DAF0(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[9];
  uint64_t v7 = a1[10];
  uint64_t v8 = a1[11];
  uint64_t v9 = a1[12];
  uint64_t v10 = a1[13];
  uint64_t v12 = a1[15];
  uint64_t v13 = a1[14];
  uint64_t v14 = a1[20];
  uint64_t v15 = a1[16];
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  sub_10001DBBC(v6, v7, v8);
  sub_10001DBEC(v9, v10, v13, v12);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t sub_10001DBBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a3);
  }

  return result;
}

uint64_t sub_10001DBEC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return sub_10001DBBC(a2, a3, a4);
  }

  return result;
}

void *sub_10001DC30(void *a1)
{
  return a1;
}

uint64_t sub_10001DC64()
{
  uint64_t v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }

  uint64_t v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    uint64_t v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }

  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184LL, 7LL);
}

void sub_10001DCEC(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_100008E58(a2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v3), a1);
  }

  sub_10000ADA8();
}

void destroy for LNAppShortcutRecord(uint64_t a1)
{
}

void _s10LinkDaemon19LNAppShortcutRecordVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  id v5 = v4;
  sub_10000ADA8();
}

void *assignWithCopy for LNAppShortcutRecord(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = (void *)a2[2];
  uint64_t v7 = (void *)a1[2];
  a1[2] = v6;
  id v8 = v6;

  return a1;
}

void *assignWithTake for LNAppShortcutRecord(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = (void *)a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for LNAppShortcutRecord(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LNAppShortcutRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 1sub_10000AC58(v0 + 6) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 2sub_10000AC58(v0 + 4) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 2sub_10000AC58(v0 + 4) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LNAppShortcutRecord()
{
  return &type metadata for LNAppShortcutRecord;
}

void *sub_10001DEBC(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA8uLL);
}

uint64_t sub_10001DEC4()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001DECC@<X0>(uint64_t a1@<X8>)
{
  return *(void *)a1;
}

uint64_t sub_10001DED8()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001DEE0()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 72));
}

  ;
}

uint64_t sub_10001DF00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return QueryType.namespace<A>(_:)(a1, a2, v6, v5, a5);
}

uint64_t sub_10001DF10()
{
  return swift_release(v0);
}

uint64_t sub_10001DF18()
{
  return sub_100015F98(v0, v1);
}

  ;
}

uint64_t sub_10001DF40()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001DF48()
{
  return sub_10000A1D8(v0, v1);
}

void *sub_10001DF54()
{
  return sub_10001DAF0((void *)(v0 - 256));
}

uint64_t sub_10001DF5C()
{
  return sub_10001C7CC(v0, v1);
}

unint64_t sub_10001DF68()
{
  return (unint64_t)Statement.failableNext()();
}

uint64_t sub_10001DF74()
{
  return sub_10000A21C(v1, v0);
}

void sub_10001DF80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    unint64_t v7 = 0LL;
    uint64_t v8 = a1 + 48;
    uint64_t v9 = _swiftEmptyArrayStorage;
    uint64_t v20 = a1 + 48;
    do
    {
      uint64_t v21 = v9;
      uint64_t v10 = (_BYTE *)(v8 + 24 * v7);
      unint64_t v11 = v7;
      while (1)
      {
        if (v11 >= *(void *)(a1 + 16))
        {
          __break(1u);
          return;
        }

        uint64_t v12 = *((void *)v10 - 2);
        uint64_t v13 = *((void *)v10 - 1);
        if (v12 != a2 || v13 != a3)
        {
          char v15 = *v10;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(*((void *)v10 - 2), *((void *)v10 - 1), a2, a3, 0LL) & 1) == 0) {
            break;
          }
        }

        ++v11;
        v10 += 24;
        if (v5 == v11) {
          goto LABEL_17;
        }
      }

      swift_bridgeObjectRetain();
      uint64_t v9 = v21;
      uint64_t v23 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
      {
        sub_10004526C();
        uint64_t v9 = v21;
      }

      uint64_t v8 = v20;
      unint64_t v16 = v9[2];
      unint64_t v17 = v16 + 1;
      if (v16 >= v9[3] >> 1)
      {
        unint64_t v22 = v16 + 1;
        unint64_t v19 = v9[2];
        sub_10004526C();
        unint64_t v17 = v22;
        unint64_t v16 = v19;
        uint64_t v8 = v20;
        uint64_t v9 = v23;
      }

      unint64_t v7 = v11 + 1;
      v9[2] = v17;
      AppIntents_SQLite::Update v18 = &v9[3 * v16];
      void v18[4] = v12;
      v18[5] = v13;
      *((_BYTE *)v18 + 48) = v15;
    }

    while (v5 - 1 != v11);
  }

uint64_t sub_10001E130(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  sub_100033164(a2, v55);
  uint64_t v48 = v55[0];
  int64_t v50 = v55[3];
  unint64_t v8 = v55[4];
  uint64_t v44 = v55[1];
  int64_t v45 = (unint64_t)(v55[2] + 64LL) >> 6;
  swift_bridgeObjectRetain();
  if (!v8) {
    goto LABEL_3;
  }
LABEL_2:
  uint64_t v51 = (v8 - 1) & v8;
  unint64_t v9 = __clz(__rbit64(v8)) | (v50 << 6);
  while (1)
  {
    uint64_t v13 = (uint64_t *)(*(void *)(v48 + 48) + 16 * v9);
    uint64_t v14 = *v13;
    unint64_t v15 = v13[1];
    uint64_t v16 = *(void *)(*(void *)(v48 + 56) + 8 * v9);
    uint64_t v17 = HIBYTE(v15) & 0xF;
    if ((v15 & 0x2000000000000000LL) == 0) {
      uint64_t v17 = v14;
    }
    uint64_t v18 = 7LL;
    if (((v15 >> 60) & ((v14 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v18 = 11LL;
    }
    uint64_t v19 = v18 | (v17 << 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v20 = String.subscript.getter(15LL, v19);
    uint64_t v22 = v21;
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    swift_bridgeObjectRetain();
    uint64_t v52 = v6;
    uint64_t v53 = sub_10001E70C(v16, a3, a4, a5);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
    unint64_t v56 = a1;
    uint64_t v54 = v24;
    unint64_t v28 = sub_100016078();
    uint64_t v30 = a1[2];
    BOOL v31 = (v29 & 1) == 0;
    Swift::Int v32 = v30 + v31;
    if (__OFADD__(v30, v31)) {
      break;
    }
    unint64_t v33 = v28;
    char v34 = v29;
    sub_100008DB0(&qword_100130700);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v32))
    {
      unint64_t v35 = sub_100016078();
      if ((v34 & 1) != (v36 & 1)) {
        goto LABEL_38;
      }
      unint64_t v33 = v35;
    }

    a1 = v56;
    if ((v34 & 1) != 0)
    {
      uint64_t v37 = v56[7];
      swift_bridgeObjectRelease();
      *(void *)(v37 + 8 * v33) = v53;
    }

    else
    {
      v56[(v33 >> 6) + 8] |= 1LL << v33;
      uint64_t v38 = (uint64_t *)(a1[6] + 32 * v33);
      uint64_t *v38 = v20;
      v38[1] = v22;
      v38[2] = v54;
      v38[3] = v26;
      *(void *)(a1[7] + 8 * v33) = v53;
      uint64_t v39 = a1[2];
      BOOL v40 = __OFADD__(v39, 1LL);
      uint64_t v41 = v39 + 1;
      if (v40) {
        goto LABEL_36;
      }
      a1[2] = v41;
      swift_bridgeObjectRetain();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v8 = v51;
    uint64_t v6 = v52;
    if (v51) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v10 = v50 + 1;
    if (__OFADD__(v50, 1LL)) {
      goto LABEL_37;
    }
    if (v10 >= v45) {
      goto LABEL_34;
    }
    unint64_t v11 = *(void *)(v44 + 8 * v10);
    if (!v11)
    {
      int64_t v12 = v50 + 2;
      if (v50 + 2 >= v45) {
        goto LABEL_34;
      }
      unint64_t v11 = *(void *)(v44 + 8 * v12);
      if (v11) {
        goto LABEL_12;
      }
      int64_t v12 = v50 + 3;
      if (v50 + 3 >= v45) {
        goto LABEL_34;
      }
      unint64_t v11 = *(void *)(v44 + 8 * v12);
      if (v11) {
        goto LABEL_12;
      }
      int64_t v12 = v50 + 4;
      if (v50 + 4 >= v45) {
        goto LABEL_34;
      }
      unint64_t v11 = *(void *)(v44 + 8 * v12);
      if (v11)
      {
LABEL_12:
        int64_t v10 = v12;
      }

      else
      {
        int64_t v10 = v50 + 5;
        if (v50 + 5 >= v45) {
          goto LABEL_34;
        }
        unint64_t v11 = *(void *)(v44 + 8 * v10);
        if (!v11)
        {
          int64_t v42 = v50 + 6;
          while (v42 < v45)
          {
            unint64_t v11 = *(void *)(v44 + 8 * v42++);
            if (v11)
            {
              int64_t v10 = v42 - 1;
              goto LABEL_13;
            }
          }

LABEL_34:
          swift_release();
          swift_bridgeObjectRelease();
          return (uint64_t)a1;
        }
      }
    }

  sub_1000B8064();
  if (v20 != v21) {
    uint64_t v22 = v3;
  }
  else {
    uint64_t v22 = v19;
  }
  sub_1000119E4();
  unint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v22);
  sub_10001BC70();
LABEL_9:
  unint64_t v9 = v8 + v4;
  if (__OFADD__(v8, v4))
  {
    __break(1u);
LABEL_39:
    sub_1000B8064();
    if (v20 != v21) {
      uint64_t v24 = v3;
    }
    else {
      uint64_t v24 = v23;
    }
    sub_1000119E4();
    int64_t v12 = _CocoaArrayWrapper.endIndex.getter(v24);
    sub_10001BC70();
    goto LABEL_17;
  }

  uint64_t v3 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *uint64_t v1 = v3;
  unint64_t v8 = 0LL;
  if ((_DWORD)isUniquelyReferenced_nonNull_bridgeObject
    && (v3 & 0x8000000000000000LL) == 0
    && (v3 & 0x4000000000000000LL) == 0)
  {
    unint64_t v11 = v3 & 0xFFFFFFFFFFFFFF8LL;
    if (v9 <= *(void *)((v3 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_20;
    }
    unint64_t v8 = 1LL;
  }

  if (v3 >> 62) {
    goto LABEL_39;
  }
  int64_t v12 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_17:
  if (v12 <= v9) {
    int64_t v12 = v9;
  }
  sub_1000119E4();
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1LL, v3);
  isUniquelyReferenced_nonNull_bridgeObject = swift_bridgeObjectRelease();
  *uint64_t v1 = v3;
  unint64_t v11 = v3 & 0xFFFFFFFFFFFFFF8LL;
LABEL_20:
  uint64_t v13 = (char *)(v11 + 32 + 8 * v2);
  sub_1000B67F8(isUniquelyReferenced_nonNull_bridgeObject, &qword_1001309A8, &OBJC_CLASS___LNProperty_ptr);
  uint64_t v14 = sub_1000B69C4();
  uint64_t result = swift_arrayDestroy(v14, v15);
  if (!v4) {
    return specialized Array._endMutation()(result);
  }
  if (v3 >> 62)
  {
    sub_1000119E4();
    uint64_t v17 = sub_10006CA28();
    sub_10001BC70();
  }

  else
  {
    uint64_t v17 = *(void *)(v11 + 16);
  }

  if (__OFSUB__(v17, v0))
  {
    __break(1u);
  }

  else
  {
    uint64_t result = (uint64_t)sub_100015D88((char *)(v11 + 32 + 8 * v0), v17 - v0, v13);
    if (!(v3 >> 62))
    {
      uint64_t v18 = *(void *)(v11 + 16);
      goto LABEL_26;
    }
  }

  if ((v3 & 0x8000000000000000LL) != 0LL) {
    uint64_t v25 = v3;
  }
  else {
    uint64_t v25 = v11;
  }
  sub_1000119E4();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter(v25);
  uint64_t result = sub_10001BC70();
LABEL_26:
  if (!__OFADD__(v18, v4))
  {
    *(void *)(v11 + 1sub_10000AC58(v0 + 6) = v18 + v4;
    return specialized Array._endMutation()(result);
  }

  __break(1u);
  return result;
}

LABEL_13:
    uint64_t v51 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v10 << 6);
    int64_t v50 = v10;
  }

  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Substring);
  __break(1u);
  return result;
}

    unint64_t v7 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v10 << 6);
    uint64_t v6 = v10;
  }

  __break(1u);
}

  swift_bridgeObjectRelease(a1);
}

  swift_bridgeObjectRelease(a1);
}

    sub_10001198C();
    return _swiftEmptyArrayStorage;
  }

  uint64_t v16 = [a1 valueType];
  uint64_t v17 = objc_opt_self(&OBJC_CLASS___LNLinkEnumerationValueType);
  uint64_t v18 = (void *)swift_dynamicCastObjCClass(v16, v17);
  if (v18)
  {
    uint64_t v19 = [v18 enumerationIdentifier];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    unint64_t v15 = v21;

    uint64_t v22 = sub_100008D74(v2 + 2, v2[5])[2];
    sub_10001C1BC();
    sub_10000AE38();
    uint64_t v23 = (void *)sub_100011C98(v20, v15, v22);
    sub_10000ADB0();
    sub_10001DF40();
    if (v23)
    {
      sub_10000ADB0();
      unint64_t v15 = v23;
      uint64_t v24 = sub_10006B2F0();
      sub_10000AFB0();
      sub_10006C984((unint64_t)v24);
      sub_10006C9C0();

      goto LABEL_11;
    }

    char v29 = v2[7];
    swift_bridgeObjectRetain();
    uint64_t v30 = sub_100011B44(v20, v15, v29);
    sub_10000ADB0();
    sub_10001BEC0();
    if (v30)
    {
      sub_10000AFB0();
      sub_10006C984(v30);
      sub_10006C9C0();

      goto LABEL_11;
    }

    goto LABEL_13;
  }

  uint64_t v25 = sub_100008DB0(&qword_100130BD0);
  uint64_t v26 = sub_100011924(v25);
  *(_OWORD *)(v26 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5530;
  unint64_t v27 = objc_allocWithZone(&OBJC_CLASS___LNProperty);
  unint64_t v28 = sub_1000BF7D0(v6, v7, 0LL);
  *(void *)(v26 + 32) = v28;
  specialized Array._endMutation()(v28);
  return (void *)v26;
}

  sub_1000119E4();
  uint64_t v5 = sub_100028060();
  if (!v5) {
    goto LABEL_14;
  }
LABEL_3:
  uint64_t v6 = 4LL;
  while (1)
  {
    if ((v2 & 0xC000000000000001LL) != 0) {
      unint64_t v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v2);
    }
    else {
      unint64_t v7 = sub_1000BC0C0();
    }
    unint64_t v8 = v7;
    unint64_t v9 = v6 - 3;
    if (__OFADD__(v6 - 4, 1LL))
    {
      __break(1u);
      goto LABEL_13;
    }

    sub_1000BBC94(v4);
    if (v0) {
      break;
    }

    sub_100042634();
    ++v6;
    if (v9 == v5) {
      goto LABEL_14;
    }
  }

  sub_10001BC70();

LABEL_28:
  swift_bridgeObjectRelease();
LABEL_29:
  sub_10006C994();
}

void *sub_10001E4C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000452D4();
    uint64_t v3 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v3 - 1);
      uint64_t v4 = *v3;
      unint64_t v7 = _swiftEmptyArrayStorage[2];
      unint64_t v6 = _swiftEmptyArrayStorage[3];
      sub_10001C064();
      if (v7 >= v6 >> 1) {
        sub_1000452D4();
      }
      v3 += 3;
      _swiftEmptyArrayStorage[2] = v7 + 1;
      unint64_t v8 = &_swiftEmptyArrayStorage[2 * v7];
      v8[4] = v5;
      v8[5] = v4;
      --v1;
    }

    while (v1);
  }

  return _swiftEmptyArrayStorage;
}

void *sub_10001E594(uint64_t a1, uint64_t (*a2)(uint64_t, id))
{
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v13))
  {
    uint64_t v5 = 4LL;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1)
         : *(id *)(a1 + 8 * v5);
      unint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1LL)) {
        break;
      }
      uint64_t v9 = a2(v5 - 4, v6);

      if (v9)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        unint64_t v11 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v10 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v11 >= v10 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1LL);
        }
        uint64_t v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
        specialized Array._endMutation()(v12);
      }

      ++v5;
      if (v8 == v4) {
        goto LABEL_19;
      }
    }

    __break(1u);
LABEL_15:
    if (a1 < 0) {
      uint64_t v13 = a1;
    }
    else {
      uint64_t v13 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

void *sub_10001E70C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v66 = a3;
  uint64_t v8 = sub_100008DB0(&qword_100130FC0);
  uint64_t v71 = *(void *)(v8 - 8);
  uint64_t v72 = v8;
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v70 = (void *)((char *)v62 - v12);
  __chkstk_darwin(v13);
  uint64_t v69 = (uint64_t)v62 - v14;
  uint64_t v15 = *(void *)(a1 + 16);
  if (!v15)
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }

  v62[2] = v4;
  uint64_t v16 = type metadata accessor for LNAppShortcutParameterRecord(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = a1 + ((*(unsigned __int8 *)(v17 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  uint64_t v67 = *(void *)(v17 + 72);
  v62[1] = a1;
  swift_bridgeObjectRetain();
  uint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v68 = v16;
  BOOL v64 = a2;
  uint64_t v65 = a4;
  int v63 = v10;
  while (1)
  {
    uint64_t v75 = v19;
    uint64_t v20 = (uint64_t *)(v18 + *(int *)(v16 + 32));
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v23 = *a2;
    uint64_t v24 = *(void *)(*a2 + 16LL);
    swift_bridgeObjectRetain();
    if (v24)
    {
      uint64_t v25 = sub_100015F98(v21, v22);
      if ((v26 & 1) != 0)
      {
        unint64_t v27 = (uint64_t *)(*(void *)(v23 + 56) + 16 * v25);
        uint64_t v29 = *v27;
        uint64_t v28 = v27[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
    }

    uint64_t v73 = v15;
    uint64_t v30 = v21;
    BOOL v31 = *(void **)(v18 + *(int *)(v16 + 28));
    NSString v32 = String._bridgeToObjectiveC()();
    id v33 = [v31 localizedStringForLocaleIdentifier:v32];

    uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    uint64_t v28 = v34;

    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
    uint64_t v76 = (void *)*a2;
    char v36 = v76;
    *a2 = 0x8000000000000000LL;
    uint64_t v37 = v30;
    uint64_t v38 = sub_100015F98(v30, v22);
    uint64_t v40 = v36[2];
    BOOL v41 = (v39 & 1) == 0;
    Swift::Int v42 = v40 + v41;
    if (__OFADD__(v40, v41)) {
      break;
    }
    unint64_t v43 = v38;
    char v44 = v39;
    sub_100008DB0(&qword_100130680);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v42))
    {
      uint64_t v45 = sub_100015F98(v37, v22);
      if ((v44 & 1) != (v46 & 1)) {
        goto LABEL_25;
      }
      unint64_t v43 = v45;
    }

    uint64_t v47 = v76;
    if ((v44 & 1) != 0)
    {
      uint64_t v48 = (uint64_t *)(v76[7] + 16 * v43);
      swift_bridgeObjectRelease();
      uint64_t v29 = v74;
      *uint64_t v48 = v74;
      v48[1] = v28;
    }

    else
    {
      v76[(v43 >> 6) + 8] |= 1LL << v43;
      uint64_t v49 = (uint64_t *)(v47[6] + 16 * v43);
      *uint64_t v49 = v37;
      v49[1] = v22;
      int64_t v50 = (uint64_t *)(v47[7] + 16 * v43);
      uint64_t v29 = v74;
      uint64_t *v50 = v74;
      v50[1] = v28;
      uint64_t v51 = v47[2];
      BOOL v52 = __OFADD__(v51, 1LL);
      uint64_t v53 = v51 + 1;
      if (v52) {
        goto LABEL_24;
      }
      v47[2] = v53;
      swift_bridgeObjectRetain();
    }

    a2 = v64;
    *BOOL v64 = v47;
    swift_bridgeObjectRelease_n(v22, 2LL);
    swift_bridgeObjectRelease();
    unint64_t v10 = v63;
    uint64_t v15 = v73;
LABEL_15:
    uint64_t v54 = *(int *)(v72 + 48);
    uint64_t v55 = (uint64_t)v70;
    uint64_t v56 = (uint64_t)v70 + v54;
    uint64_t *v70 = v29;
    *(void *)(v55 + 8) = v28;
    sub_100025B9C(v18, v55 + v54);
    uint64_t v16 = v68;
    sub_100009E60(v56, 0LL, 1LL, v68);
    uint64_t v57 = v69;
    sub_100026C8C(v55, v69, &qword_100130FC0);
    sub_100026C8C(v57, (uint64_t)v10, &qword_100130FC0);
    uint64_t v19 = v75;
    if ((swift_isUniquelyReferenced_nonNull_native(v75) & 1) == 0)
    {
      sub_1000143CC();
      uint64_t v19 = v59;
    }

    unint64_t v58 = v19[2];
    if (v58 >= v19[3] >> 1)
    {
      sub_1000143CC();
      uint64_t v19 = v60;
    }

    _OWORD v19[2] = v58 + 1;
    sub_100026C8C( (uint64_t)v10,  (uint64_t)v19 + ((*(unsigned __int8 *)(v71 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))
    + *(void *)(v71 + 72) * v58,
      &qword_100130FC0);
    v18 += v67;
    if (!--v15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v19;
    }
  }

  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

unint64_t sub_10001EB6C()
{
  return 0xD000000000000034LL;
}

void sub_10001EB88()
{
}

Swift::Int sub_10001EBAC()
{
  return Hasher._finalize()();
}

uint64_t sub_10001EBEC()
{
  return 1LL;
}

Swift::Int sub_10001EBFC(uint64_t a1)
{
  return Hasher._finalize()();
}

unint64_t sub_10001EC38()
{
  return 0xD000000000000034LL;
}

uint64_t sub_10001EC54()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A07C(v0, qword_100135118);
  sub_100008D98(v0, (uint64_t)qword_100135118);
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    uint64_t v2 = String.init(cString:)(LNLogSubsystem);
    return Logger.init(subsystem:category:)(v2, v3, 0x6C6F707265746E49LL, 0xEC000000726F7461LL);
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_10001ECD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = v4;
  id v11 = objc_allocWithZone(&OBJC_CLASS___LSApplicationRecord);
  sub_100011A3C(a2);
  id v12 = sub_100066138(a1, a2, 0LL);
  if (v5)
  {
    sub_10001BEC0();
  }

  else
  {
    id v13 = v12;
    uint64_t v27 = sub_10000A1A0(0LL, &qword_100130630, &OBJC_CLASS___LSApplicationRecord_ptr);
    uint64_t v28 = &off_100122EC8;
    *(void *)&__int128 v25 = v13;
    sub_100009EEC(&v25, (uint64_t)v29);
    id v11 = v6;
    sub_10001F4B0( (uint64_t)v29,  a3,  a4,  v14,  v15,  v16,  v17,  v18,  v25,  *((uint64_t *)&v25 + 1),  v26,  v27,  (uint64_t)v28,  v29[0],  v29[1],  v29[2],  v29[3],  v29[4],  a1,  a2);
    sub_100027F70(v19, v20, v21, v22, v23);
  }

  return v11;
}

uint64_t sub_10001EDC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!v4)
  {
    sub_10001F4B0( (uint64_t)v19,  a2,  a3,  v7,  v8,  v9,  v10,  v11,  v18[0],  v18[1],  v18[2],  v18[3],  v18[4],  v19[0],  v19[1],  v19[2],  v19[3],  v19[4],  v19[5],  v19[6]);
    sub_100027F70(v12, v13, v14, v15, v16);
  }

  return v3;
}

uint64_t sub_10001EE3C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100008D74(a1, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  if (v7)
  {
    uint64_t v8 = v6;
    uint64_t v9 = v7;
    sub_10001AFE4((uint64_t)a1, (uint64_t)v19);
    *((void *)&v20 + 1) = v8;
    uint64_t v21 = v9;
    *(void *)(a2 + 48) = v9;
    __int128 v10 = v19[1];
    *(_OWORD *)a2 = v19[0];
    *(_OWORD *)(a2 + 1sub_10000AC58(v0 + 6) = v10;
    *(_OWORD *)(a2 + 32) = v20;
  }

  else
  {
    if (qword_1001300E8 != -1) {
      swift_once(&qword_1001300E8, sub_10001EC54);
    }
    uint64_t v11 = sub_10000E918();
    uint64_t v12 = sub_100008D98(v11, (uint64_t)qword_100135118);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (sub_100027E84(v13))
    {
      uint64_t v15 = (uint8_t *)sub_10000AE10(2LL);
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "No bundle identifier found in app record", v15, 2u);
      sub_10000AD78((uint64_t)v15);
    }

    unint64_t v16 = sub_100026E68();
    uint64_t v17 = swift_allocError(&unk_1001234D8, v16, 0LL, 0LL);
    swift_willThrow(v17);
  }

  return sub_10000AC58(a1);
}

void sub_10001EF9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  sub_100008D74((void *)(v2 + 112), *(void *)(v2 + 136));
  sub_10004F0C4();
  if (!v3)
  {
    uint64_t v8 = v7;
    uint64_t v15 = _swiftEmptyDictionarySingleton;
    uint64_t v9 = *(void *)(v7 + 16);
    if (v9)
    {
      sub_10000AE38();
      __int128 v10 = (void **)(v8 + 48);
      do
      {
        uint64_t v12 = (uint64_t)*(v10 - 1);
        uint64_t v11 = *v10;
        v14[0] = (uint64_t)*(v10 - 2);
        v14[1] = v12;
        v14[2] = (uint64_t)v11;
        sub_10001BCF8();
        id v13 = v11;
        sub_10001F0C4((uint64_t)&v15, v14, v4, a1, a2);

        sub_10001BEC0();
        v10 += 3;
        --v9;
      }

      while (v9);
      sub_10001191C(v8);
    }

    else
    {
      sub_10000ADB0();
    }
  }

uint64_t sub_10001F0C4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v45 = *(void *)(v10 - 8);
  uint64_t v46 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  char v44 = (char *)a2[2];
  id v15 = objc_allocWithZone(&OBJC_CLASS___LSApplicationRecord);
  swift_bridgeObjectRetain_n(v14, 3LL);
  id v16 = sub_100066138(v13, v14, 0LL);
  if (v5)
  {
    uint64_t v42 = v13;
    swift_bridgeObjectRelease_n(v14, 2LL);
    uint64_t v43 = 0LL;
    uint64_t v23 = qword_1001300E8;
    swift_retain();
    uint64_t v25 = v45;
    uint64_t v24 = v46;
    if (v23 != -1) {
      swift_once(&qword_1001300E8, sub_10001EC54);
    }
    uint64_t v26 = sub_100008D98(v24, (uint64_t)qword_100135118);
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v12, v26, v24);
    swift_release();
    swift_bridgeObjectRetain();
    uint64_t v27 = v44;
    swift_errorRetain(v6);
    swift_bridgeObjectRetain();
    uint64_t v28 = v27;
    uint64_t v29 = swift_errorRetain(v6);
    uint64_t v30 = v12;
    BOOL v31 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v32 = static os_log_type_t.error.getter();
    BOOL v33 = os_log_type_enabled(v31, v32);
    uint64_t v34 = v42;
    if (v33)
    {
      uint64_t v35 = swift_slowAlloc(22LL, -1LL);
      uint64_t v36 = swift_slowAlloc(64LL, -1LL);
      char v44 = v30;
      uint64_t v37 = v36;
      v54[0] = v36;
      *(_DWORD *)uint64_t v35 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)&__int128 v50 = sub_10000DE60(v34, v14, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, (char *)&v50 + 8, v35 + 4, v35 + 12);

      swift_bridgeObjectRelease_n(v14, 3LL);
      *(_WORD *)(v35 + 12) = 2080;
      swift_getErrorValue(v6, v55, &v47);
      uint64_t v38 = Error.localizedDescription.getter(v48, v49);
      *(void *)&__int128 v50 = sub_10000DE60(v38, v39, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, (char *)&v50 + 8, v35 + 14, v35 + 22);
      swift_bridgeObjectRelease();
      swift_errorRelease(v6);
      swift_errorRelease(v6);
      _os_log_impl( (void *)&_mh_execute_header,  v31,  v32,  "Failed to fetch AppShortcut records for %s: %s",  (uint8_t *)v35,  0x16u);
      swift_arrayDestroy(v37, 2LL);
      swift_slowDealloc(v37, -1LL, -1LL);
      swift_slowDealloc(v35, -1LL, -1LL);

      swift_errorRelease(v6);
      return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v44, v46);
    }

    else
    {
      swift_errorRelease(v6);

      swift_bridgeObjectRelease_n(v14, 2LL);
      swift_errorRelease(v6);
      swift_errorRelease(v6);

      return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v30, v46);
    }
  }

  else
  {
    id v17 = v16;
    uint64_t v52 = sub_10000A1A0(0LL, &qword_100130630, &OBJC_CLASS___LSApplicationRecord_ptr);
    uint64_t v53 = &off_100122EC8;
    *(void *)&__int128 v50 = v17;
    sub_100009EEC(&v50, (uint64_t)v54);
    v54[5] = v13;
    v54[6] = v14;
    sub_10001F4B0( (uint64_t)v54,  a4,  a5,  v18,  v19,  v20,  v21,  v22,  v41,  v42,  v43,  (uint64_t)v44,  v45,  v46,  v47,  v48,  v49,  v50,  *((uint64_t *)&v50 + 1),  v51);
    sub_100026E3C(v54);
    sub_10003E1E0();
    return swift_bridgeObjectRelease();
  }

void sub_10001F4B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v21;
  a20 = v22;
  unint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v29 = type metadata accessor for OSSignpostID(0LL);
  __chkstk_darwin(v29);
  sub_100011A0C();
  static OSSignpostID.exclusive.getter();
  sub_10008F6E4();
  sub_10001F588(v28, v20, v26, v24, &a10);
  sub_1000AE730();
  swift_release();
  sub_100027FD4();
  sub_10001DEE8();
}

uint64_t sub_10001F588@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v112 = a3;
  unint64_t v113 = a4;
  char v111 = a5;
  uint64_t v106 = type metadata accessor for AppShortcutInterpolator.Builder(0LL);
  __chkstk_darwin(v106);
  uint64_t v107 = (char *)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v109 = *(void *)(v8 - 8);
  uint64_t v110 = v8;
  __chkstk_darwin(v8);
  uint64_t v108 = (char *)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v114 = type metadata accessor for Logger(0LL);
  uint64_t v10 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  uint64_t v12 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  id v15 = (char *)&v98 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v98 - v17;
  uint64_t v20 = *(void *)(a1 + 40);
  unint64_t v19 = *(void *)(a1 + 48);
  uint64_t v105 = a1;
  uint64_t v115 = a2;
  sub_100008D74((void *)(a2 + 112), *(void *)(a2 + 136));
  swift_bridgeObjectRetain();
  uint64_t v21 = v131;
  sub_10004F288(v20, v19);
  if (v21) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v100 = v15;
  unint64_t v101 = v18;
  uint64_t v99 = v12;
  uint64_t v131 = 0LL;
  id v102 = (void *)(a2 + 112);
  uint64_t v103 = v10;
  uint64_t v104 = v20;
  uint64_t v23 = v114;
  sub_100026C8C((uint64_t)&v119, (uint64_t)v120, &qword_100132760);
  if (*((void *)&v120[0] + 1))
  {
    __int128 v122 = v120[0];
    __int128 v123 = v120[1];
    uint64_t v124 = v121;
    unint64_t v24 = v102;
    sub_100008D74(v102, *(void *)(v115 + 136));
    unint64_t v25 = v19;
    uint64_t v26 = v131;
    sub_10004F36C();
    if (v26)
    {
      swift_bridgeObjectRelease();
      __int128 v129 = v122;
      sub_100025F44((uint64_t)&v129);
      sub_100026C8C((uint64_t)&v123, (uint64_t)v130, (uint64_t *)&unk_100130C00);
      return sub_100025F44((uint64_t)v130);
    }

    else
    {
      uint64_t v37 = v27;
      if (v27)
      {
        __int128 v126 = v122;
        sub_100025F44((uint64_t)&v126);
        sub_100026C8C((uint64_t)&v123, (uint64_t)v127, (uint64_t *)&unk_100130C00);
        sub_100025F44((uint64_t)v127);
        uint64_t v38 = qword_1001300E8;
        swift_retain();
        if (v38 != -1) {
          swift_once(&qword_1001300E8, sub_10001EC54);
        }
        uint64_t v39 = sub_100008D98(v23, (uint64_t)qword_100135118);
        uint64_t v40 = v103;
        uint64_t v41 = v100;
        (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v100, v39, v23);
        swift_release();
        unint64_t v42 = v113;
        swift_bridgeObjectRetain_n(v113, 2LL);
        swift_bridgeObjectRetain();
        char v44 = (os_log_s *)Logger.logObject.getter(v43);
        os_log_type_t v45 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v44, v45))
        {
          uint64_t v46 = swift_slowAlloc(22LL, -1LL);
          uint64_t v47 = swift_slowAlloc(64LL, -1LL);
          uint64_t v131 = 0LL;
          uint64_t v115 = v47;
          *(void *)&v117[0] = v47;
          *(_DWORD *)uint64_t v46 = 136315394;
          swift_bridgeObjectRetain();
          *(void *)&v116[0] = sub_10000DE60(v104, v25, (uint64_t *)v117);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v116, (char *)v116 + 8, v46 + 4, v46 + 12);
          swift_bridgeObjectRelease_n(v25, 3LL);
          *(_WORD *)(v46 + 12) = 2080;
          swift_bridgeObjectRetain();
          *(void *)&v116[0] = sub_10000DE60(v112, v42, (uint64_t *)v117);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v116, (char *)v116 + 8, v46 + 14, v46 + 22);
          swift_bridgeObjectRelease_n(v42, 3LL);
          _os_log_impl( (void *)&_mh_execute_header,  v44,  v45,  "Successful AppShortcut cache hit for %s:%s",  (uint8_t *)v46,  0x16u);
          uint64_t v48 = v115;
          swift_arrayDestroy(v115, 2LL);
          swift_slowDealloc(v48, -1LL, -1LL);
          swift_slowDealloc(v46, -1LL, -1LL);

          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v100, v114);
        }

        else
        {

          swift_bridgeObjectRelease_n(v42, 2LL);
          swift_bridgeObjectRelease_n(v25, 2LL);
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v41, v114);
        }

        *char v111 = v37;
      }

      else
      {
        uint64_t v49 = v108;
        static OSSignpostID.exclusive.getter();
        sub_10008F6E4();
        unint64_t v101 = v50;
        (*(void (**)(char *, uint64_t))(v109 + 8))(v49, v110);
        uint64_t v51 = v115;
        sub_100008D74(v24, *(void *)(v115 + 136));
        swift_bridgeObjectRetain();
        uint64_t v52 = v104;
        sub_10004F0C4();
        uint64_t v54 = v53;
        swift_bridgeObjectRelease();
        uint64_t v55 = *(void *)(v51 + 136);
        uint64_t v56 = v102;
        sub_100008D74(v102, v55);
        swift_bridgeObjectRetain();
        sub_10004F350(v52, v19);
        uint64_t v58 = v57;
        uint64_t v131 = 0LL;
        swift_bridgeObjectRelease();
        sub_100025F6C(v105, (uint64_t)v117);
        sub_10001AFE4((uint64_t)v56, (uint64_t)v116);
        uint64_t v110 = v124;
        sub_100026C8C((uint64_t)&v123, (uint64_t)v125, (uint64_t *)&unk_100130C00);
        unint64_t v59 = v113;
        swift_bridgeObjectRetain();
        sub_10001B4C8((uint64_t)v125);
        if (qword_1001302E8 != -1) {
          swift_once(&qword_1001302E8, sub_10008883C);
        }
        uint64_t v60 = v23;
        uint64_t v61 = sub_100008D98(v23, (uint64_t)qword_1001357B0);
        uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t))(v103 + 16);
        int v63 = v107;
        v62(v107, v61, v23);
        BOOL v64 = (int *)v106;
        uint64_t v65 = &v63[*(int *)(v106 + 20)];
        __int128 v66 = v117[1];
        *(_OWORD *)uint64_t v65 = v117[0];
        *((_OWORD *)v65 + 1) = v66;
        *((_OWORD *)v65 + 2) = v117[2];
        *((void *)v65 + sub_10000AC58(v0 + 6) = v118;
        uint64_t v67 = &v63[v64[6]];
        *(void *)uint64_t v67 = v112;
        *((void *)v67 + 1) = v59;
        *(void *)&v63[v64[7]] = v54;
        *(void *)&v63[v64[8]] = v58;
        sub_100009EEC(v116, (uint64_t)&v63[v64[9]]);
        *(void *)&v63[v64[10]] = v110;
        sub_100026C8C((uint64_t)v125, (uint64_t)&v63[v64[11]], (uint64_t *)&unk_100130C00);
        __int128 v128 = v122;
        sub_100025F44((uint64_t)&v128);
        sub_100025F44((uint64_t)v125);
        uint64_t v68 = qword_1001300E8;
        swift_retain();
        uint64_t v69 = v99;
        if (v68 != -1) {
          swift_once(&qword_1001300E8, sub_10001EC54);
        }
        uint64_t v110 = sub_100008D98(v60, (uint64_t)qword_100135118);
        ((void (*)(char *))v62)(v69);
        swift_release();
        unint64_t v70 = v19;
        swift_bridgeObjectRetain_n(v19, 2LL);
        uint64_t v71 = swift_bridgeObjectRetain_n(v59, 2LL);
        uint64_t v72 = (os_log_s *)Logger.logObject.getter(v71);
        uint64_t v73 = v69;
        os_log_type_t v74 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v72, v74))
        {
          uint64_t v75 = swift_slowAlloc(22LL, -1LL);
          uint64_t v109 = swift_slowAlloc(64LL, -1LL);
          *(void *)&v117[0] = v109;
          *(_DWORD *)uint64_t v75 = 136315394;
          swift_bridgeObjectRetain();
          *(void *)&v116[0] = sub_10000DE60(v104, v19, (uint64_t *)v117);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v116, (char *)v116 + 8, v75 + 4, v75 + 12);
          swift_bridgeObjectRelease_n(v19, 3LL);
          *(_WORD *)(v75 + 12) = 2080;
          swift_bridgeObjectRetain();
          *(void *)&v116[0] = sub_10000DE60(v112, v113, (uint64_t *)v117);
          unint64_t v76 = v113;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v116, (char *)v116 + 8, v75 + 14, v75 + 22);
          unint64_t v77 = v76;
          swift_bridgeObjectRelease_n(v76, 3LL);
          _os_log_impl( (void *)&_mh_execute_header,  v72,  v74,  "Interpolating AppShortcuts for %s:%s",  (uint8_t *)v75,  0x16u);
          uint64_t v78 = v109;
          swift_arrayDestroy(v109, 2LL);
          swift_slowDealloc(v78, -1LL, -1LL);
          swift_slowDealloc(v75, -1LL, -1LL);

          (*(void (**)(char *, uint64_t))(v103 + 8))(v99, v60);
        }

        else
        {

          unint64_t v77 = v59;
          swift_bridgeObjectRelease_n(v59, 2LL);
          swift_bridgeObjectRelease_n(v19, 2LL);
          (*(void (**)(char *, uint64_t))(v103 + 8))(v73, v60);
        }

        uint64_t v79 = v131;
        sub_100020458();
        if (v79)
        {
          sub_100025FA0();
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v81 = v80;
          swift_bridgeObjectRetain_n(v70, 2LL);
          uint64_t v82 = swift_bridgeObjectRetain_n(v77, 2LL);
          uint64_t v83 = (os_log_s *)Logger.logObject.getter(v82);
          os_log_type_t v84 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v83, v84))
          {
            uint64_t v85 = swift_slowAlloc(22LL, -1LL);
            uint64_t v86 = swift_slowAlloc(64LL, -1LL);
            uint64_t v131 = 0LL;
            uint64_t v87 = v86;
            *(void *)&v117[0] = v86;
            *(_DWORD *)uint64_t v85 = 136315394;
            uint64_t v114 = v81;
            swift_bridgeObjectRetain();
            *(void *)&v116[0] = sub_10000DE60(v104, v70, (uint64_t *)v117);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v116, (char *)v116 + 8, v85 + 4, v85 + 12);
            swift_bridgeObjectRelease_n(v70, 3LL);
            *(_WORD *)(v85 + 12) = 2080;
            swift_bridgeObjectRetain();
            *(void *)&v116[0] = sub_10000DE60(v112, v113, (uint64_t *)v117);
            uint64_t v81 = v114;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v116, (char *)v116 + 8, v85 + 14, v85 + 22);
            swift_bridgeObjectRelease_n(v113, 3LL);
            _os_log_impl((void *)&_mh_execute_header, v83, v84, "Caching AppShortcuts for %s:%s", (uint8_t *)v85, 0x16u);
            swift_arrayDestroy(v87, 2LL);
            uint64_t v88 = v131;
            swift_slowDealloc(v87, -1LL, -1LL);
            swift_slowDealloc(v85, -1LL, -1LL);

            __int128 v89 = v102;
          }

          else
          {

            swift_bridgeObjectRelease_n(v77, 2LL);
            swift_bridgeObjectRelease_n(v70, 2LL);
            __int128 v89 = v102;
            uint64_t v88 = 0LL;
          }

          sub_100008D74(v89, *(void *)(v115 + 136));
          uint64_t v90 = v88;
          sub_10004F3C8();
          if (v88)
          {
            swift_bridgeObjectRelease();
            swift_errorRetain(v88);
            uint64_t v91 = swift_errorRetain(v88);
            uint64_t v92 = (os_log_s *)Logger.logObject.getter(v91);
            os_log_type_t v93 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v92, v93))
            {
              uint64_t v94 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              uint64_t v95 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
              uint64_t v114 = v81;
              *(_DWORD *)uint64_t v94 = 138412290;
              swift_errorRetain(v90);
              uint64_t v96 = _swift_stdlib_bridgeErrorToNSError(v90);
              *(void *)&v117[0] = v96;
              uint64_t v81 = v114;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v117, (char *)v117 + 8, v94 + 4, v94 + 12);
              uint64_t *v95 = v96;
              swift_errorRelease(v90);
              swift_errorRelease(v90);
              _os_log_impl((void *)&_mh_execute_header, v92, v93, "Failed to update cached AppShortcuts: %@", v94, 0xCu);
              sub_100008DB0((uint64_t *)&unk_100132620);
              swift_arrayDestroy(v95, 1LL);
              swift_slowDealloc(v95, -1LL, -1LL);
              swift_slowDealloc(v94, -1LL, -1LL);
            }

            else
            {

              swift_errorRelease(v90);
              swift_errorRelease(v90);
            }

            swift_errorRelease(v90);
            sub_100025FA0();
            unint64_t v97 = v111;
          }

          else
          {
            sub_100025FA0();
            swift_bridgeObjectRelease();
            unint64_t v97 = v111;
          }

          uint64_t *v97 = v81;
        }

        sub_1000AE730();
        return swift_release();
      }
    }
  }

  else
  {
    uint64_t v28 = qword_1001300E8;
    swift_retain();
    if (v28 != -1) {
      swift_once(&qword_1001300E8, sub_10001EC54);
    }
    uint64_t v29 = sub_100008D98(v23, (uint64_t)qword_100135118);
    uint64_t v30 = v103;
    BOOL v31 = v101;
    (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v101, v29, v23);
    swift_release();
    swift_bridgeObjectRetain();
    BOOL v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v36 = swift_slowAlloc(32LL, -1LL);
      *(void *)&v117[0] = v36;
      *(_DWORD *)uint64_t v35 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&v116[0] = sub_10000DE60(v104, v19, (uint64_t *)v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v116, (char *)v116 + 8, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease_n(v19, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%s does not have AppShortcuts", v35, 0xCu);
      swift_arrayDestroy(v36, 1LL);
      swift_slowDealloc(v36, -1LL, -1LL);
      swift_slowDealloc(v35, -1LL, -1LL);

      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v101, v23);
    }

    else
    {

      swift_bridgeObjectRelease_n(v19, 2LL);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v31, v23);
    }

    *char v111 = (uint64_t)_swiftEmptyArrayStorage;
  }

  return result;
}

void sub_100020458()
{
  uint64_t v2 = sub_1000215F4();
  if (!v1)
  {
    uint64_t v99 = v2;
    unint64_t v119 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v3 = (int *)sub_100027E9C();
    uint64_t v4 = *(unint64_t *)((char *)v0 + v3[7]);
    uint64_t v112 = *(void *)(v4 + 16);
    if (v112)
    {
      char v111 = (unint64_t *)((char *)v0 + v3[9]);
      uint64_t v100 = v3;
      unint64_t v101 = v0;
      uint64_t v110 = (char *)v0 + v3[5];
      uint64_t v109 = v4 + 32;
      __int128 v89 = v118;
      swift_bridgeObjectRetain();
      unint64_t v5 = 0LL;
      uint64_t v88 = (char *)&type metadata for Any + 8;
      uint64_t v108 = v4;
      while (v5 < *(void *)(v4 + 16))
      {
        uint64_t v116 = v5;
        uint64_t v6 = (uint64_t *)(v109 + 24 * v5);
        uint64_t v8 = *v6;
        uint64_t v7 = v6[1];
        uint64_t v9 = (void *)v6[2];
        sub_10001BCF8();
        id v114 = v9;
        uint64_t v10 = sub_100028048((uint64_t)[v114 actionIdentifier]);
        uint64_t v12 = v11;

        sub_100008D74(v111, v111[3]);
        uint64_t v14 = *((void *)v110 + 5);
        uint64_t v13 = *((void *)v110 + 6);
        sub_1000119E4();
        id v15 = (void *)sub_10004F0A8(v14, v13, v10, v12);
        uint64_t v103 = v10;
        sub_10001BC70();
        uint64_t v16 = v15;
        uint64_t v107 = v16;
        uint64_t v104 = v8;
        if ([v16 visibleForUse:0])
        {
          unint64_t v17 = sub_100026BAC( v16,  (SEL *)&selRef_requiredCapabilities,  &qword_1001312F8,  &OBJC_CLASS___LNRequiredCapabilityMetadata_ptr);
          uint64_t v113 = v7;
          uint64_t v21 = v99;
          uint64_t v97 = v14;
          uint64_t v22 = v114;
          unint64_t v102 = v12;
          uint64_t v98 = v13;
          if (v17)
          {
            uint64_t v23 = v17;
            if (v17 >> 62)
            {
              sub_10000AE38();
              uint64_t v16 = (_DWORD *)sub_100028060();
              sub_10000ADB0();
              if (v16)
              {
LABEL_9:
                unint64_t v24 = v23 & 0xC000000000000001LL;
                sub_10000AE38();
                uint64_t v25 = 4LL;
                uint64_t v105 = v23;
                while (1)
                {
                  if (v24) {
                    id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25 - 4, v23);
                  }
                  else {
                    id v26 = *(id *)(v23 + 8 * v25);
                  }
                  uint64_t v27 = v26;
                  uint64_t v28 = (_DWORD *)(v25 - 3);
                  if (__OFADD__(v25 - 4, 1LL))
                  {
                    __break(1u);
                    goto LABEL_49;
                  }

                  if ([v26 isFeatureFlagCapability])
                  {
                    uint64_t v29 = (void *)objc_opt_self(&OBJC_CLASS___LNFeatureFlagUtilities);
                    unint64_t v30 = v24;
                    BOOL v31 = v16;
                    sub_100011A74((uint64_t)[v27 key]);

                    uint64_t v7 = v113;
                    NSString v32 = String._bridgeToObjectiveC()();
                    sub_10000AEE8();
                    unsigned int v33 = [v29 featureEnabledWithDomainFeaturePair:v32];

                    LODWORD(v32) = [v27 value];
                    BOOL v34 = v33 == (_DWORD)v32;
                    uint64_t v16 = v31;
                    unint64_t v24 = v30;
                    uint64_t v23 = v105;
                    uint64_t v4 = v108;
                    if (!v34)
                    {
                      sub_10001191C(v105);
                      if (qword_1001302D8 != -1) {
                        swift_once(&qword_1001302D8, sub_100088814);
                      }
                      uint64_t v74 = sub_10000E918();
                      uint64_t v0 = (unint64_t *)sub_100008D98(v74, (uint64_t)qword_100135780);
                      uint64_t v75 = sub_10001C064();
                      Logger.logObject.getter(v75);
                      os_log_type_t v76 = sub_100028050();
                      if (sub_100027E84((os_log_s *)v0))
                      {
                        uint64_t v16 = (_DWORD *)sub_10000AE10(12LL);
                        uint64_t v77 = sub_10000AE10(32LL);
                        v118[0] = v77;
                        *uint64_t v16 = 136315138;
                        sub_10001C064();
                        uint64_t v117 = sub_10000DE60(v103, v102, v118);
                        uint64_t v4 = v108;
                        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, v89, v16 + 1, v16 + 3);
                        sub_100027E5C(v102);
                        sub_100028020( (void *)&_mh_execute_header,  (os_log_s *)v0,  v76,  "%s requires at least one missing feature flag, skipping");
                        swift_arrayDestroy(v77, 1LL);
                        sub_10000AD78(v77);
                        sub_10000AD78((uint64_t)v16);
                        sub_100027F38();
                        sub_10001DF40();
                      }

                      else
                      {

                        sub_100027F38();
                        sub_10001BEC0();
                        sub_10001191C(v102);
                      }

                      sub_1000280C0();

                      goto LABEL_36;
                    }
                  }

                  else
                  {
                  }

                  ++v25;
                  if (v28 == v16)
                  {
                    sub_10000ADB0();
                    uint64_t v22 = v114;
                    break;
                  }
                }
              }
            }

            else
            {
              uint64_t v16 = *(_DWORD **)((v17 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              if (v16) {
                goto LABEL_9;
              }
            }

            sub_10000ADB0();
            uint64_t v21 = v99;
          }

          sub_1000217C0( v104,  v7,  (uint64_t)v22,  *(unint64_t *)((char *)v101 + v100[8]),  v21,  v18,  v19,  v20,  v78,  v79,  v80,  v81,  v82,  v83,  v84,  v85,  v86,  v87,  (uint64_t)v88,  (uint64_t)v89);
          uint64_t v115 = v35;
          id v36 = sub_100011A6C(v35, "shortTitle");
          if (v36)
          {
            uint64_t v37 = v36;
            uint64_t v16 = String._bridgeToObjectiveC()();
            id v38 = sub_10002800C((uint64_t)v16, "localizedStringForLocaleIdentifier:");

            uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
            uint64_t v92 = v40;
            uint64_t v93 = v39;
          }

          else
          {
            uint64_t v92 = 0LL;
            uint64_t v93 = 0LL;
          }

          id v49 = sub_100011A6C((uint64_t)v36, "autoShortcutDescription");
          if (v49)
          {
            __int128 v50 = v49;
            uint64_t v51 = v100;
            uint64_t v52 = v101;
            uint64_t v16 = String._bridgeToObjectiveC()();
            id v53 = sub_10002800C((uint64_t)v16, "localizedStringForLocaleIdentifier:");

            uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
            uint64_t v90 = v55;
            uint64_t v91 = v54;
          }

          else
          {
            uint64_t v90 = 0LL;
            uint64_t v91 = 0LL;
            uint64_t v52 = v101;
            uint64_t v51 = v100;
          }

          uint64_t v106 = sub_10000BFF0(v107, (SEL *)&selRef_attributionBundleIdentifier);
          uint64_t v96 = v56;
          uint64_t v57 = (uint64_t *)((char *)v52 + v51[6]);
          uint64_t v59 = *v57;
          uint64_t v58 = v57[1];
          sub_1000119E4();
          uint64_t v60 = sub_10000AE38();
          id v61 = sub_100011A6C(v60, "systemImageName");
          uint64_t v62 = sub_100011A74((uint64_t)v61);
          uint64_t v94 = v63;
          uint64_t v95 = v62;

          uint64_t v64 = *(unint64_t *)((char *)v52 + v51[10]);
          id v65 = sub_1000221AC( v116,  *(unint64_t *)((char *)v52 + v51[11]),  *(unint64_t *)((char *)v52 + v51[11] + 8),  v59,  v58,  v104,  v113,  v22);
          id v66 = sub_100011A6C((uint64_t)v65, "phraseTemplates");
          uint64_t v67 = sub_10000A1A0( 0LL,  (unint64_t *)&qword_100131250,  &OBJC_CLASS___LNStaticDeferredLocalizedString_ptr);
          uint64_t v68 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v66, v67);

          id v69 = objc_allocWithZone(&OBJC_CLASS___LNAutoShortcut);
          id v70 =  sub_10002567C( v97,  v98,  v59,  v58,  v103,  v102,  v115,  v93,  v92,  v91,  v90,  v95,  v94,  v64,  v65,  v106,  v96,  v68);
          uint64_t v0 = &v119;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          unint64_t v72 = *(void *)((v119 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v71 = *(void *)((v119 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v72 >= v71 >> 1) {
            sub_100027E8C(v72 + 1, v71);
          }
          uint64_t v73 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v72, v70);
          specialized Array._endMutation()(v73);

          swift_bridgeObjectRelease();
          sub_1000280C0();

          uint64_t v4 = v108;
        }

        else
        {
          unint64_t v41 = v12;
          if (qword_1001302D8 != -1) {
            swift_once(&qword_1001302D8, sub_100088814);
          }
          uint64_t v42 = sub_10000E918();
          uint64_t v0 = (unint64_t *)sub_100008D98(v42, (uint64_t)qword_100135780);
          sub_100011A3C(v7);
          id v43 = v114;
          uint64_t v44 = sub_100027FA0();
          Logger.logObject.getter(v44);
          unint64_t v45 = v7;
          os_log_type_t v46 = sub_100028050();
          if (os_log_type_enabled((os_log_t)v0, v46))
          {
            uint64_t v47 = sub_10000AE10(22LL);
            uint64_t v48 = sub_10000AE10(64LL);
            v118[0] = v48;
            *(_DWORD *)uint64_t v47 = 136315394;
            sub_100027FA0();
            *(void *)(v47 + sub_10000AC58(v0 + 4) = sub_10000DE60(v103, v41, v118);
            sub_100027E5C(v41);
            *(_WORD *)(v47 + 12) = 2080;
            sub_10000AFB0();
            *(void *)(v47 + 1sub_10000AC58(v0 + 4) = sub_10000DE60(v104, v45, v118);

            sub_100027E5C(v45);
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v0,  v46,  "%s is marked as undiscoverable in bundle %s, skipping",  (uint8_t *)v47,  0x16u);
            swift_arrayDestroy(v48, 2LL);
            sub_10000AD78(v48);
            sub_10000AD78(v47);

            sub_10001198C();
          }

          else
          {

            sub_10001191C(v41);
            sub_100027E5C(v45);
          }
        }

LABEL_36:
        unint64_t v5 = v116 + 1;
        if (v116 + 1 == v112)
        {
          swift_bridgeObjectRelease();
          sub_10000AEE8();
          return;
        }
      }

      BOOL v34 = (uint64_t *)(*(void *)(*v4 + 48) + 16 * v11);
      uint64_t result = *v34;
      *BOOL v34 = a1;
      v34[1] = a2;
      return result;
    }

    sub_10001A2C0();
  }

  id v26 = *v4;
  Hasher.init(_seed:)(v45, *(void *)(*v4 + 40));
  String.hash(into:)(v45, a1, a2);
  uint64_t v27 = Hasher._finalize()();
  uint64_t v28 = -1LL << *(_BYTE *)(v26 + 32);
  uint64_t v11 = v27 & ~v28;
  uint64_t v29 = v26 + 56;
  if (((*(void *)(v26 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
    goto LABEL_45;
  }
  unint64_t v30 = *(void *)(v26 + 48);
  BOOL v31 = (void *)(v30 + 16 * v11);
  NSString v32 = v31[1];
  unsigned int v33 = *v31 == a1 && v32 == a2;
  if (!v33 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v31, v32, a1, a2, 0LL) & 1) == 0)
  {
    id v36 = ~v28;
    while (1)
    {
      uint64_t v11 = (v11 + 1) & v36;
      if (((*(void *)(v29 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
        break;
      }
      uint64_t v37 = (void *)(v30 + 16 * v11);
      id v38 = v37[1];
      uint64_t v39 = *v37 == a1 && v38 == a2;
      if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v37, v38, a1, a2, 0LL) & 1) != 0) {
        goto LABEL_35;
      }
    }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      NSString v32 = a1;
      unint64_t v17 = v75;
      uint64_t v27 = v82;
      uint64_t v28 = v87;
      uint64_t result = swift_bridgeObjectRelease();
    }

    else
    {
LABEL_46:
      swift_bridgeObjectRelease();
      NSString v32 = a1;
      unint64_t v17 = v75;
LABEL_47:
      swift_bridgeObjectRetain();
      sub_100018380(&v86, v39, v40);
      swift_bridgeObjectRelease();
      id v61 = [a14 intentIdentifier];
      uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
      uint64_t v64 = v63;

      id v65 = objc_allocWithZone(&OBJC_CLASS___LNExamplePhraseDescription);
      swift_bridgeObjectRetain();
      uint64_t v67 = sub_100073EA0(0LL, v62, v64, v39, v40, v84, v42, v17, v66);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v67);
      id v69 = *(void *)((*v32 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      uint64_t v68 = *(void *)((*v32 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v69 >= v68 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v68 > 1, v69 + 1, 1LL);
      }
      id v70 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v69, v67);
      uint64_t result = specialized Array._endMutation()(v70);
      uint64_t v27 = v82;
      uint64_t v28 = v87;
    }
  }

  uint64_t v35 = v28 + 1;
  if (__OFADD__(v28, 1LL))
  {
    __break(1u);
    goto LABEL_52;
  }

  if (v35 >= v80) {
    return swift_release();
  }
  id v36 = *(void *)(v77 + 8 * v35);
  ++v28;
  if (v36) {
    goto LABEL_22;
  }
  uint64_t v28 = v35 + 1;
  if (v35 + 1 >= v80) {
    return swift_release();
  }
  id v36 = *(void *)(v77 + 8 * v28);
  if (v36) {
    goto LABEL_22;
  }
  uint64_t v28 = v35 + 2;
  if (v35 + 2 >= v80) {
    return swift_release();
  }
  id v36 = *(void *)(v77 + 8 * v28);
  if (v36)
  {
LABEL_22:
    BOOL v31 = (v36 - 1) & v36;
    BOOL v34 = __clz(__rbit64(v36)) + (v28 << 6);
    goto LABEL_23;
  }

  uint64_t v37 = v35 + 3;
  if (v37 >= v80) {
    return swift_release();
  }
  id v36 = *(void *)(v77 + 8 * v37);
  if (v36)
  {
    uint64_t v28 = v37;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v28 = v37 + 1;
    if (__OFADD__(v37, 1LL)) {
      break;
    }
    if (v28 >= v80) {
      return swift_release();
    }
    id v36 = *(void *)(v77 + 8 * v28);
    ++v37;
    if (v36) {
      goto LABEL_22;
    }
  }

  swift_release();
  id v53 = v154;
  if (v154 >> 62) {
    goto LABEL_106;
  }
  uint64_t v82 = *(void *)((v154 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  if (v82) {
    goto LABEL_38;
  }
LABEL_50:
  swift_bridgeObjectRelease();
  uint64_t v95 = v153;
  if (!((unint64_t)v153 >> 62))
  {
    uint64_t v96 = *(void *)((v153 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain();
    if (!v96) {
      goto LABEL_64;
    }
    goto LABEL_52;
  }

  if (v153 < 0) {
    uint64_t v141 = v153;
  }
  else {
    uint64_t v141 = v153 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v96 = _CocoaArrayWrapper.endIndex.getter(v141);
  if (v96)
  {
LABEL_52:
    uint64_t v97 = v95 & 0xC000000000000001LL;
    uint64_t v98 = 4LL;
    while (1)
    {
      uint64_t v99 = v97
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v98 - 4, v153)
          : *(id *)(v153 + 8 * v98);
      id v53 = (uint64_t)v99;
      uint64_t v100 = v98 - 3;
      if (__OFADD__(v98 - 4, 1LL)) {
        break;
      }
      DaemonRecord.attributionBundleIdentifier.getter();
      unint64_t v102 = v101;
      swift_bridgeObjectRelease();
      if (v102)
      {
      }

      else
      {
        __int128 v89 = (id)v53;
        uint64_t v103 = (uint64_t)v144;
        sub_1000AC8D8();
        uint64_t v104 = v165;
        if (sub_100009E6C(v103, 1LL, v165) == 1)
        {

          sub_100026E14(v103, &qword_100133390);
        }

        else
        {
          uint64_t v105 = v103;
          uint64_t v93 = v142;
          sub_100084248(v105, v142, type metadata accessor for LSLinkBundleRecord);
          uint64_t v163 = v104;
          id v164 = &off_100126180;
          uint64_t v106 = sub_10001AFA8(v162);
          sub_100084214(v93, (uint64_t)v106, type metadata accessor for LSLinkBundleRecord);
          sub_100095114(v162, v157, v158, v159, v160);
          if (v54) {
            goto LABEL_100;
          }
          sub_100058D54(v93, type metadata accessor for LSLinkBundleRecord);

          sub_10000AC58(v162);
        }
      }

      ++v98;
      if (v100 == v96) {
        goto LABEL_64;
      }
    }

    while (1)
    {
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      v140 = v53 < 0 ? v53 : v53 & 0xFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRetain();
      uint64_t v82 = _CocoaArrayWrapper.endIndex.getter(v140);
      if (!v82) {
        goto LABEL_50;
      }
LABEL_38:
      uint64_t v83 = v53 & 0xC000000000000001LL;
      uint64_t v84 = 4LL;
      while (1)
      {
        uint64_t v85 = v83
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v84 - 4, v154)
            : *(id *)(v154 + 8 * v84);
        id v53 = (uint64_t)v85;
        uint64_t v86 = v84 - 3;
        if (__OFADD__(v84 - 4, 1LL)) {
          break;
        }
        LSApplicationExtensionRecord.attributionBundleIdentifier.getter();
        uint64_t v88 = v87;
        swift_bridgeObjectRelease();
        if (v88)
        {
        }

        else
        {
          __int128 v89 = (id)v53;
          uint64_t v90 = (uint64_t)v145;
          sub_10008FD0C();
          uint64_t v91 = v165;
          if (sub_100009E6C(v90, 1LL, v165) == 1)
          {

            sub_100026E14(v90, &qword_100133390);
          }

          else
          {
            uint64_t v92 = v90;
            uint64_t v93 = v143;
            sub_100084248(v92, v143, type metadata accessor for LSLinkBundleRecord);
            uint64_t v163 = v91;
            id v164 = &off_100126180;
            uint64_t v94 = sub_10001AFA8(v162);
            sub_100084214(v93, (uint64_t)v94, type metadata accessor for LSLinkBundleRecord);
            sub_100095114(v162, v157, v158, v159, v160);
            if (v54)
            {
LABEL_100:

              sub_100058D54(v93, type metadata accessor for LSLinkBundleRecord);
              swift_bridgeObjectRelease();
              sub_10000AC58(v162);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              return;
            }

            sub_100058D54(v93, type metadata accessor for LSLinkBundleRecord);

            sub_10000AC58(v162);
          }
        }

        ++v84;
        if (v86 == v82) {
          goto LABEL_50;
        }
      }

LABEL_49:
      __break(1u);
    }

    else
    {
      swift_bridgeObjectRelease();
    }
  }

  swift_release();
  v124[0] = (uint64_t)_swiftEmptyDictionarySingleton;
  __int128 v89 = v27[2];
  uint64_t v90 = v109;
  uint64_t v91 = v98;
  if (v89)
  {
    sub_100027E74();
    uint64_t v93 = (uint64_t)v27 + v92;
    uint64_t v94 = (uint64_t)v27;
    uint64_t v96 = v95;
    swift_bridgeObjectRetain_n(v27, 2LL);
    uint64_t v97 = *(void *)(v96 + 72);
    while (1)
    {
      sub_100025B9C(v93, v91);
      sub_1000232B0(v124, v91);
      if (v90) {
        break;
      }
      uint64_t v90 = 0LL;
      sub_100025FA0();
      v93 += v97;
      if (!--v89)
      {
        sub_100027E5C(v94);
        goto LABEL_55;
      }
    }

    swift_bridgeObjectRelease();
    sub_100025FA0();
LABEL_60:
    swift_bridgeObjectRelease();
    __break(1u);
    return;
  }

  sub_10001BE7C();
LABEL_55:
  sub_10001DEE8();
}

            swift_once(&qword_1001345F0, sub_1000D4410);
            goto LABEL_8;
          }

uint64_t sub_100020E80()
{
  uint64_t v0 = sub_100008DB0(&qword_100131280);
  sub_10000A07C(v0, qword_100135130);
  sub_100008D98(v0, (uint64_t)qword_100135130);
  uint64_t v1 = sub_100008DB0(&qword_100131288);
  sub_100026D98(&qword_100131298, &qword_100131280, (uint64_t)&protocol conformance descriptor for Regex<A>);
  return Regex.init<A>(_:)(sub_100020F1C, 0LL, v1, v0, v2);
}

uint64_t sub_100020F1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v48 = a1;
  uint64_t v1 = sub_100008DB0((uint64_t *)&unk_100131830);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = v1;
  __chkstk_darwin(v1);
  unint64_t v45 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v38 - v6;
  uint64_t v8 = sub_100008DB0(&qword_100131280);
  uint64_t v46 = *(void *)(v8 - 8);
  uint64_t v47 = v8;
  double v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = type metadata accessor for _RegexFactory(0LL, v9);
  uint64_t v12 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100008DB0(&qword_1001312C0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v43 = v15;
  uint64_t v44 = v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v40 = (char *)&v38 - v20;
  uint64_t v53 = 31524LL;
  uint64_t v54 = 0xE200000000000000LL;
  unint64_t v21 = sub_100026D5C();
  uint64_t v22 = static RegexComponentBuilder.buildExpression<A>(_:)(&v53, &type metadata for String, v21);
  makeFactory()(v22);
  id v49 = v7;
  sub_1000212B0((uint64_t)v7);
  uint64_t v23 = sub_100008DB0(&qword_100131288);
  sub_100026D98(&qword_1001312D0, (uint64_t *)&unk_100131830, (uint64_t)&protocol conformance descriptor for Regex<A>);
  uint64_t v25 = v24;
  id v38 = v11;
  uint64_t v39 = v3;
  _RegexFactory.capture<A, B>(_:)(v7, v23, v3, v24);
  uint64_t v42 = *(void (**)(char *, uint64_t))(v2 + 8);
  v42(v7, v3);
  unint64_t v41 = *(void (**)(char *, uint64_t))(v12 + 8);
  v41(v14, v50);
  Capture.init(_:)(v11, v23);
  sub_100026D98(&qword_1001312D8, &qword_1001312C0, (uint64_t)&protocol conformance descriptor for Capture<A>);
  uint64_t v27 = v26;
  uint64_t v28 = v40;
  uint64_t v29 = v43;
  static RegexComponentBuilder.buildExpression<A>(_:)(v18, v43, v26);
  uint64_t v44 = *(void *)(v44 + 8);
  ((void (*)(char *, uint64_t))v44)(v18, v29);
  uint64_t v51 = 125LL;
  unint64_t v52 = 0xE100000000000000LL;
  static RegexComponentBuilder.buildExpression<A>(_:)(&v51, &type metadata for String, v21);
  uint64_t v51 = v55;
  unint64_t v52 = v56;
  unint64_t v30 = v49;
  static RegexComponentBuilder.buildPartialBlock<A>(first:)(&v51, &type metadata for String, v21);
  uint64_t v31 = swift_bridgeObjectRelease();
  makeFactory()(v31);
  NSString v32 = v45;
  uint64_t v33 = v39;
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)(v30, v39, v25);
  uint64_t v34 = (uint64_t)v38;
  _RegexFactory.accumulate<A, B, C>(_:_:)(v32, v28, v23, v33, v29, v25, v27);
  uint64_t v35 = v32;
  id v36 = v42;
  v42(v35, v33);
  v41(v14, v50);
  sub_10006E9C4(v34, v53, v54, v48);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v34, v47);
  v36(v49, v33);
  return ((uint64_t (*)(char *, uint64_t))v44)(v28, v29);
}

uint64_t sub_1000212B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v42 = type metadata accessor for RegexRepetitionBehavior(0LL);
  uint64_t v40 = *(void *)(v42 - 8);
  double v1 = __chkstk_darwin(v42);
  uint64_t v39 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for _RegexFactory(0LL, v1);
  uint64_t v37 = *(void *)(v3 - 8);
  uint64_t v38 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100008DB0(&qword_1001312E0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CharacterClass(0LL);
  uint64_t v34 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100008DB0(&qword_1001312E8);
  uint64_t v35 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100008DB0((uint64_t *)&unk_100131830);
  uint64_t v36 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v33 - v19;
  double v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v33 - v23;
  static RegexComponent<>.word.getter(v22);
  uint64_t v25 = sub_100009E60((uint64_t)v8, 1LL, 1LL, v42);
  makeFactory()(v25);
  unint64_t v26 = sub_100026DD4();
  _RegexFactory.oneOrMore<A, B>(_:_:)(v11, v8, &type metadata for Substring, v9, v26);
  sub_100026E14((uint64_t)v8, &qword_1001312E0);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v5, v38);
  OneOrMore.init(_:)(v17, &type metadata for Substring);
  OneOrMore.regex.getter(v12);
  uint64_t v27 = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v14, v12);
  uint64_t v28 = v39;
  static RegexRepetitionBehavior.reluctant.getter(v27);
  Regex.repetitionBehavior(_:)(v28, v15);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v28, v42);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v36 + 8);
  v29(v17, v15);
  sub_100026D98(&qword_1001312D0, (uint64_t *)&unk_100131830, (uint64_t)&protocol conformance descriptor for Regex<A>);
  uint64_t v31 = v30;
  static RegexComponentBuilder.buildExpression<A>(_:)(v20, v15, v30);
  v29(v20, v15);
  static RegexComponentBuilder.buildPartialBlock<A>(first:)(v24, v15, v31);
  return ((uint64_t (*)(char *, uint64_t))v29)(v24, v15);
}

uint64_t sub_1000215F4()
{
  uint64_t v1 = sub_100027E9C();
  uint64_t v2 = (void *)(v0 + *(int *)(v1 + 20));
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  sub_100008D74(v2, v3);
  uint64_t v5 = sub_100008DB0((uint64_t *)&unk_100132130);
  uint64_t v6 = sub_10000C254(v5, 48LL);
  *(_OWORD *)(v6 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
  uint64_t v7 = (uint64_t *)(v0 + *(int *)(v1 + 24));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  *(void *)(v6 + 32) = *v7;
  *(void *)(v6 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v9;
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24);
  sub_10001C064();
  uint64_t v11 = v10(v6, v3, v4);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = v2[3];
  uint64_t v15 = v2[4];
  sub_100008D74(v2, v14);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 32))(v8, v9, v14, v15);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(v16 + 16);
  if (v18)
  {
    uint64_t v19 = (_BYTE *)(v16 + 48);
    while ((*v19 & 1) == 0)
    {
      v19 += 24;
      if (!--v18) {
        goto LABEL_5;
      }
    }

    uint64_t v22 = *((void *)v19 - 2);
    uint64_t v23 = *((void *)v19 - 1);
    sub_100011A3C(v23);
    sub_10001DF80(v17, v22, v23);
    uint64_t v25 = v24;
    uint64_t v20 = sub_10000C254(v5, 64LL);
    *(_OWORD *)(v20 + 1sub_10000AC58(v0 + 6) = xmmword_1000F57D0;
    *(void *)(v20 + 32) = v22;
    *(void *)(v20 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v23;
    *(void *)(v20 + 48) = v11;
    *(void *)(v20 + 5sub_10000AC58(v0 + 6) = v13;
    uint64_t v21 = v25;
  }

  else
  {
LABEL_5:
    uint64_t v20 = sub_10000C254(v5, 48LL);
    *(_OWORD *)(v20 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
    *(void *)(v20 + 32) = v11;
    *(void *)(v20 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v13;
    uint64_t v21 = v17;
  }

  sub_10001E4C4(v21);
  sub_10000ADB0();
  sub_1000427B8();
  return v20;
}

void sub_1000217C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  v150 = v21;
  v145 = v25;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v30 = type metadata accessor for URL(0LL);
  unint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  sub_100011A0C();
  uint64_t v34 = v33 - v32;
  sub_100008DB0(&qword_100130BC0);
  sub_100027F2C();
  __chkstk_darwin(v35);
  sub_100027EA4();
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)&v135 - v37;
  __chkstk_darwin(v39);
  uint64_t v148 = (uint64_t)&v135 - v40;
  unsigned int v41 = [(id)objc_opt_self(LNFeatureFlags) isAppShortcutsOmittingAppNameEnabled];
  uint64_t v155 = v27;
  v156 = v20;
  if (v41)
  {
    uint64_t v42 = &v20[*(int *)(sub_100027E9C() + 20)];
    uint64_t v43 = *((void *)v42 + 3);
    uint64_t v44 = *((void *)v42 + 4);
    sub_100008D74(v42, v43);
    int v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 16))(v43, v44) ^ 1;
  }

  else
  {
    int v45 = 1;
  }

  LODWORD(v15sub_10000AC58(v0 + 4) = v45;
  a10 = _swiftEmptyDictionarySingleton;
  id v46 = [v29 phraseTemplates];
  uint64_t v47 = sub_10000A1A0(0LL, (unint64_t *)&qword_100131250, &OBJC_CLASS___LNStaticDeferredLocalizedString_ptr);
  uint64_t v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v46, v47);

  if (!*(void *)((v48 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
LABEL_67:
    sub_10001198C();
    goto LABEL_68;
  }

LABEL_6:
  sub_1000460E4(0LL, (v48 & 0xC000000000000001LL) == 0, v48);
  if ((v48 & 0xC000000000000001LL) != 0) {
    id v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v48);
  }
  else {
    id v49 = *(id *)(v48 + 32);
  }
  uint64_t v50 = v49;
  sub_10001198C();
  id v51 = [v50 bundleURL];
  id v137 = v50;
  if (v51)
  {
    unint64_t v52 = v51;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v53 = 0LL;
  }

  else
  {
    uint64_t v53 = 1LL;
  }

  sub_100009E60((uint64_t)v38, v53, 1LL, v30);
  uint64_t v54 = v148;
  sub_100026C8C((uint64_t)v38, v148, &qword_100130BC0);
  sub_100026CB8(v54, (uint64_t)v22, &qword_100130BC0);
  if (sub_100009E6C((uint64_t)v22, 1LL, v30) == 1)
  {
    sub_100026E14((uint64_t)v22, &qword_100130BC0);
  }

  else
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v31 + 32))(v34, v22, v30);
    uint64_t v55 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
    URL._bridgeToObjectiveC()(v56);
    uint64_t v58 = v57;
    id v59 = objc_msgSend(v55, "ln_uniqueBundleWithURL:", v57);

    if (v59)
    {
      uint64_t v60 = sub_100027E9C();
      uint64_t v61 = sub_100089ABC( 0x74726F6853707041LL,  0xEC00000073747563LL,  *(void *)&v156[*(int *)(v60 + 24)],  *(void *)&v156[*(int *)(v60 + 24) + 8]);

      sub_100027F80();
      uint64_t v62 = sub_100011A74((uint64_t)[v137 key]);
      uint64_t v64 = v63;

      uint64_t v65 = sub_100011B44(v62, v64, v61);
      sub_10001BEC0();
      sub_10001BE7C();
      if (v65)
      {
        v157[0] = v65;
        sub_10000AFB0();
        id v66 = v150;
        sub_100073FAC(v157);
        if (v66)
        {
          swift_release();
          __break(1u);
          return;
        }

        uint64_t v67 = sub_10001198C();
        uint64_t v68 = v157[0];
        __chkstk_darwin(v67);
        id v133 = v137;
        id v69 = sub_10006E6F4(v68, sub_100026C48);
        id v70 = 0LL;
        swift_release();
        unint64_t v71 = v156;
        goto LABEL_19;
      }
    }

    else
    {
      sub_100027F80();
    }
  }

  id v72 = [v29 phraseTemplates];
  unint64_t v73 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v72, v47);

  __chkstk_darwin(v74);
  unint64_t v71 = v156;
  id v133 = v156;
  uint64_t v75 = v150;
  sub_10008E148((void (*)(void *__return_ptr, uint64_t *))sub_100026C2C, (uint64_t)&v131, v73);
  id v69 = v76;
  id v70 = v75;
  sub_10001BC70();
LABEL_19:
  sub_100022908();
  if (v70)
  {
    sub_100027F00();
    uint64_t v78 = sub_10001BEC0();
    sub_100027EE0(v78, &qword_100130BC0);
    sub_10001DEE0();
LABEL_21:
    swift_bridgeObjectRelease();
    goto LABEL_68;
  }

  uint64_t v146 = v77;
  uint64_t v159 = &_swiftEmptySetSingleton;
  unint64_t v158 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v144 = v69[2];
  if (!v144) {
    goto LABEL_63;
  }
  v150 = 0LL;
  uint64_t v142 = v69 + 4;
  uint64_t v79 = sub_100027E9C();
  uint64_t v80 = *(int *)(v79 + 24);
  uint64_t v81 = &v71[*(int *)(v79 + 20)];
  uint64_t v83 = *((void *)v81 + 5);
  uint64_t v82 = *((void *)v81 + 6);
  uint64_t v141 = v83;
  uint64_t v143 = v82;
  uint64_t v84 = *(void *)&v71[v80 + 8];
  uint64_t v140 = *(void *)&v71[v80];
  uint64_t v139 = v84;
  uint64_t v136 = v69;
  sub_10001BCF8();
  uint64_t v85 = 0LL;
  id v147 = &_swiftEmptySetSingleton;
  HIDWORD(v138) = v154 & 1;
  do
  {
    uint64_t v149 = v85;
    uint64_t v86 = &v142[4 * v85];
    uint64_t v87 = *v86;
    uint64_t v30 = v86[1];
    uint64_t v34 = v86[2];
    uint64_t v88 = v86[3];
    sub_10001BCF8();
    sub_10001BEF8();
    uint64_t v151 = v88;
    uint64_t v89 = sub_100022454(v34, v88);
    uint64_t v91 = v90;
    uint64_t v47 = v92;
    uint64_t v93 = (uint64_t)v147;
    sub_10000AE38();
    sub_1000130A4(v89, v91, v93);
    char v95 = v94;
    sub_10000ADB0();
    if ((v95 & 1) == 0)
    {
      sub_10000AFB0();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v93);
      v157[0] = v93;
      sub_1000268CC(v89, v91, isUniquelyReferenced_nonNull_native);
      id v147 = (void *)v157[0];
      swift_bridgeObjectRelease();
      sub_10000ADB0();
    }

    if (*(void *)(v146 + 16))
    {
      sub_10001BCF8();
      uint64_t v97 = sub_100015F98(v87, v30);
      uint64_t v98 = _swiftEmptyDictionarySingleton;
      if ((v99 & 1) != 0)
      {
        uint64_t v98 = *(void **)(*(void *)(v146 + 56) + 8 * v97);
        sub_10000AE38();
      }

      sub_10001BEC0();
    }

    else
    {
      uint64_t v98 = _swiftEmptyDictionarySingleton;
    }

    char v100 = v95 ^ 1;
    uint64_t v101 = v143;
    sub_10001C064();
    LOBYTE(v132) = BYTE4(v138);
    LOBYTE(v129) = v100 & 1;
    uint64_t v102 = v87;
    uint64_t v29 = (void *)v101;
    uint64_t v103 = v150;
    sub_1000236E0( v102,  v30,  v34,  v151,  v47,  v141,  v101,  v148,  v140,  v139,  (uint64_t)v145,  (uint64_t)v98,  v129,  v130,  v131,  v132,  (uint64_t)&a10,  v134,  v135,  (uint64_t)v136,  (uint64_t)v137,  v138,  v139,  v140,  v141,  (uint64_t)v142,  v143,  v144,  v145);
    uint64_t v38 = v103;
    if (v103)
    {
      sub_10000ADB0();
      sub_10001BC70();
      sub_10001198C();
      sub_10000AEE8();
      sub_100027EC0();
      sub_100027F00();
      sub_10001191C((uint64_t)v136);
      sub_100027F68();
      sub_10001BEC0();
      uint64_t v127 = sub_10001198C();
      sub_100027EE0(v127, &qword_100130BC0);
      swift_bridgeObjectRelease();
      sub_10001DEE0();
      goto LABEL_21;
    }

    unint64_t v31 = v104;
    sub_10001BC70();
    sub_10001198C();
    sub_10000AEE8();
    sub_10000ADB0();
    unint64_t v153 = v31;
    v150 = 0LL;
    if (v31 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v48 = sub_100028060();
      sub_10001DF40();
      if (!v48) {
        goto LABEL_61;
      }
LABEL_34:
      if (v48 >= 1)
      {
        uint64_t v105 = 0LL;
        unint64_t v154 = v153 & 0xC000000000000001LL;
        uint64_t v155 = v48;
        unint64_t v152 = v153 + 32;
        v156 = (char *)v30;
        while (1)
        {
          if (v154) {
            id v106 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v105, v153);
          }
          else {
            id v106 = *(id *)(v152 + 8 * v105);
          }
          uint64_t v22 = v106;
          uint64_t v107 = v159;
          uint64_t v108 = sub_10000AFB0();
          id v109 = sub_100011A6C(v108, "localizedPhrase");
          sub_100028048((uint64_t)v109);
          sub_1000280B4();
          if (!v107[2]) {
            goto LABEL_55;
          }
          Hasher.init(_seed:)(v157, v107[5]);
          String.hash(into:)(v157, v38, v31);
          Swift::Int v110 = Hasher._finalize()();
          uint64_t v111 = -1LL << *((_BYTE *)v107 + 32);
          uint64_t v112 = v110 & ~v111;
          sub_10002802C();
          if ((v113 & 1) == 0) {
            goto LABEL_55;
          }
          uint64_t v114 = v107[6];
          uint64_t v115 = (uint64_t *)(v114 + 16 * v112);
          uint64_t v116 = v115[1];
          BOOL v117 = (char *)*v115 == v38 && v116 == v31;
          if (!v117 && (sub_100027F1C(*v115, v116) & 1) == 0) {
            break;
          }
LABEL_46:
          sub_10001DF40();
          sub_10001198C();

LABEL_58:
          if (++v105 == v155) {
            goto LABEL_61;
          }
        }

        uint64_t v118 = ~v111;
        while (1)
        {
          uint64_t v112 = (v112 + 1) & v118;
          sub_10002802C();
          if ((v119 & 1) == 0) {
            break;
          }
          char v120 = (uint64_t *)(v114 + 16 * v112);
          uint64_t v121 = v120[1];
          BOOL v122 = (char *)*v120 == v38 && v121 == v31;
          if (v122 || (sub_100027F1C(*v120, v121) & 1) != 0) {
            goto LABEL_46;
          }
        }

  v1[8] = v2;
  swift_retain();
  sub_1000B77D4();
  sub_10000EA88();
  return sub_1000B62D8(v4, v5, v6);
}

LABEL_55:
        sub_10001DF40();
        sub_10001198C();
        id v123 = v22;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v38 = *(char **)((v158 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v124 = *(void *)((v158 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        uint64_t v125 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v123);
        specialized Array._endMutation()(v125);
        sub_100028048((uint64_t)[v123 localizedPhrase]);
        sub_1000280B4();
        sub_100018380(v157, (uint64_t)v38, v31);

        swift_bridgeObjectRelease();
        goto LABEL_58;
      }

      __break(1u);
LABEL_66:
      sub_10000AFB0();
      uint64_t v128 = sub_100028060();
      sub_10001198C();
      if (!v128) {
        goto LABEL_67;
      }
      goto LABEL_6;
    }

    uint64_t v48 = *(void *)((v31 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v48) {
      goto LABEL_34;
    }
LABEL_61:
    uint64_t v85 = v149 + 1;
    sub_10001BEC0();
    swift_bridgeObjectRelease();
    sub_100027F68();
  }

  while (v85 != v144);
  sub_10001BEC0();
LABEL_63:
  sub_100027EC0();
  sub_10001BEC0();
  sub_100027F00();
  sub_100027EE0(v126, &qword_100130BC0);
  sub_10000AEE8();
  sub_10001DEE0();
  sub_10001BC70();
LABEL_68:
  sub_10001DEE8();
}

          uint64_t v2 = v32;
LABEL_56:
          sub_10001B100(v2);
          return;
        }

  uint64_t v16 = v65;
LABEL_11:
  sub_10001B100(v16);
  *uint64_t v1 = v3;
}

      __break(1u);
LABEL_56:
      sub_10001C064();
      uint64_t v43 = sub_100011A50();
      sub_10001BE7C();
      if (!v43) {
        goto LABEL_57;
      }
    }

    __break(1u);
LABEL_81:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
LABEL_82:
    uint64_t result = swift_release(v89);
    __break(1u);
  }

  else
  {
LABEL_57:
    sub_10001BE7C();
    id v51 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_58:
    unint64_t v52 = objc_msgSend(v79, "queries", v76);
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v52,  &type metadata for String,  v77,  &protocol witness table for String);
    sub_100028040();
    if (v51 >> 62) {
      goto LABEL_78;
    }
    uint64_t v53 = *(void *)((v51 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    while (v53)
    {
      uint64_t v82 = v51;
      uint64_t v84 = v51 & 0xC000000000000001LL;
      uint64_t v54 = 4LL;
      while (1)
      {
        uint64_t v55 = v84
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v54 - 4, v51)
            : *(id *)(v51 + 8 * v54);
        unint64_t v56 = v55;
        if (__OFADD__(v54 - 4, 1LL)) {
          break;
        }
        uint64_t v86 = v54 - 3;
        uint64_t v57 = sub_100011ADC((uint64_t)v55, "identifier");
        uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
        uint64_t v60 = v59;

        uint64_t v61 = v56;
        uint64_t v62 = swift_isUniquelyReferenced_nonNull_native(v0);
        uint64_t v89 = (unint64_t)v0;
        uint64_t v63 = sub_1000CABAC();
        uint64_t v65 = (void *)v0[2];
        id v66 = (v64 & 1) == 0;
        id v51 = (unint64_t)v65 + v66;
        if (__OFADD__(v65, v66)) {
          goto LABEL_76;
        }
        uint64_t v67 = v63;
        uint64_t v68 = v64;
        sub_100008DB0(&qword_1001345A0);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v62, v51))
        {
          id v69 = sub_1000CABAC();
          if ((v68 & 1) != (v70 & 1)) {
            goto LABEL_81;
          }
          uint64_t v67 = v69;
        }

        uint64_t v0 = (unint64_t *)v89;
        if ((v68 & 1) != 0)
        {
          unint64_t v71 = *(void *)(v89 + 56);

          *(void *)(v71 + 8 * v6sub_10000AC58(v0 + 7) = v61;
        }

        else
        {
          *(void *)(v89 + 8 * (v67 >> 6) + 64) |= 1LL << v67;
          id v72 = (uint64_t *)(v0[6] + 16 * v67);
          *id v72 = v58;
          v72[1] = v60;
          *(void *)(v0[7] + 8 * v6sub_10000AC58(v0 + 7) = v61;
          unint64_t v73 = (void *)v0[2];
          uint64_t v11 = __OFADD__(v73, 1LL);
          uint64_t v74 = (void *)((char *)v73 + 1);
          if (v11) {
            goto LABEL_77;
          }
          v0[2] = (unint64_t)v74;
          sub_10001C064();
        }

        sub_10001BE7C();
        sub_10006C9B8();
        ++v54;
        id v51 = v82;
        if (v86 == v53) {
          goto LABEL_74;
        }
      }

      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      swift_bridgeObjectRetain(v51);
      uint64_t v53 = sub_100011A50();
      swift_bridgeObjectRelease(v51);
    }

        __break(1u);
        goto LABEL_56;
      }

id sub_1000221AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v14 = sub_100008DB0(&qword_100130BC0);
  double v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v18 = objc_msgSend(a8, "parameterPresentation", v15);
  if (!v18) {
    return 0LL;
  }
  uint64_t v19 = v18;
  uint64_t v52 = a2;
  uint64_t v53 = a3;
  uint64_t v54 = a1;
  id v20 = [v18 parameterIdentifier];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  uint64_t v56 = v22;
  uint64_t v57 = v21;

  id v23 = [v19 specificTitle];
  id v24 = [v23 formatString];
  uint64_t v55 = a4;
  uint64_t v25 = a5;
  id v26 = v24;

  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  uint64_t v29 = v28;

  uint64_t v30 = sub_10000BFF0(v19, (SEL *)&selRef_localizationTable);
  uint64_t v32 = v31;
  sub_100024FB8(a8, (uint64_t)v17);
  id v33 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
  uint64_t v34 = v30;
  uint64_t v35 = v25;
  uint64_t v36 = v55;
  id v37 = sub_100025BE0(v27, v29, v34, v32, (uint64_t)v17);
  NSString v38 = String._bridgeToObjectiveC()();
  id v39 = [v37 localizedStringForLocaleIdentifier:v38];

  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
  uint64_t v42 = v41;

  uint64_t v43 = sub_100026BAC( v19,  (SEL *)&selRef_optionsCollection,  &qword_100131260,  &OBJC_CLASS___LNAppShortcutOptionsCollectionMetadata_ptr);
  if (v43)
  {
    __chkstk_darwin(v43);
    uint64_t v44 = v53;
    *(&v51 - sub_10000AC58(v0 + 6) = v52;
    *(&v51 - 5) = v44;
    *(&v51 - sub_10000AC58(v0 + 4) = v36;
    *(&v51 - 3) = v35;
    uint64_t v45 = v54;
    *(&v51 - 2) = (uint64_t)v19;
    *(&v51 - 1) = v45;
    uint64_t v47 = sub_10001E594(v46, (uint64_t (*)(uint64_t, id))sub_100026C1C);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v47 = 0LL;
  }

  id v49 = objc_allocWithZone(&OBJC_CLASS___LNAppShortcutParameterPresentation);
  id v48 = sub_100025DFC(v57, v56, v40, v42, (uint64_t)v47);

  return v48;
}

uint64_t sub_100022454(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008DB0(&qword_100131278);
  uint64_t v70 = *(void *)(v4 - 8);
  sub_100027F2C();
  __chkstk_darwin(v5);
  sub_100027FF8();
  uint64_t v65 = v6;
  sub_100027FE4();
  __chkstk_darwin(v7);
  uint64_t v68 = (char *)v61 - v8;
  unint64_t v71 = (void *)a1;
  uint64_t v72 = a2;
  if (qword_1001300F0 != -1) {
LABEL_25:
  }
    swift_once(&qword_1001300F0, sub_100020E80);
  uint64_t v9 = sub_100008DB0(&qword_100131280);
  uint64_t v10 = sub_100008D98(v9, (uint64_t)qword_100135130);
  uint64_t v11 = sub_100008DB0(&qword_100131288);
  unint64_t v12 = sub_100026CE4();
  sub_100026D98(&qword_100131298, &qword_100131280, (uint64_t)&protocol conformance descriptor for Regex<A>);
  uint64_t v14 = BidirectionalCollection<>.matches<A, B>(of:)(v10, &type metadata for String, v11, v9, v12, v13);
  uint64_t v15 = *(void *)(v14 + 16);
  uint64_t v16 = _swiftEmptyArrayStorage;
  uint64_t v69 = v4;
  uint64_t v62 = v14;
  if (v15)
  {
    uint64_t v79 = _swiftEmptyArrayStorage;
    sub_100045370();
    sub_100027E74();
    uint64_t v18 = v14 + v17;
    uint64_t v20 = *(void *)(v19 + 72);
    id v66 = *(char **)(v19 + 16);
    uint64_t v67 = v20;
    uint64_t v16 = v79;
    do
    {
      uint64_t v21 = v68;
      ((void (*)(char *, uint64_t, uint64_t))v66)(v68, v18, v4);
      Regex.Match.output.getter(&v71, v4);
      uint64_t v22 = (uint64_t)v71;
      uint64_t v23 = v72;
      uint64_t v24 = v73;
      uint64_t v25 = v74;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v70 + 8))(v21, v4);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
      {
        sub_100045370();
        uint64_t v16 = v79;
      }

      unint64_t v26 = v16[2];
      if (v26 >= v16[3] >> 1)
      {
        sub_100045370();
        uint64_t v16 = v79;
      }

      v16[2] = v26 + 1;
      uint64_t v27 = &v16[4 * v26];
      v27[4] = v22;
      v27[5] = v23;
      v27[6] = v24;
      v27[7] = v25;
      v18 += v67;
      --v15;
      uint64_t v4 = v69;
    }

    while (v15);
    uint64_t v14 = v62;
  }

  unint64_t v71 = v16;
  sub_10001BCF8();
  sub_100073FD0((uint64_t *)&v71);
  swift_bridgeObjectRelease();
  uint64_t v28 = sub_100008DB0(&qword_1001312A0);
  sub_100026D98(&qword_1001312A8, &qword_1001312A0, (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v30 = v29;
  unint64_t v31 = sub_100026D20();
  uint64_t v4 = Sequence<>.joined(separator:)(0LL, 0xE000000000000000LL, v28, v30, v31);
  uint64_t v33 = v32;
  swift_release();
  uint64_t v34 = *(char **)(v14 + 16);
  if (!v34)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    return v4;
  }

  v61[0] = v4;
  v61[1] = v33;
  sub_100027E74();
  uint64_t v36 = v14 + v35;
  NSString v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16);
  uint64_t v63 = *(void *)(v37 + 72);
  uint64_t v64 = v38;
  sub_10001C064();
  id v39 = _swiftEmptyDictionarySingleton;
  uint64_t v40 = v69;
  uint64_t v41 = v65;
  while (1)
  {
    id v66 = v34;
    v64(v41, v36, v40);
    Regex.Match.output.getter(&v71, v40);
    swift_bridgeObjectRelease();
    uint64_t v42 = v75;
    uint64_t v43 = v76;
    uint64_t v44 = v77;
    uint64_t v45 = v78;
    uint64_t v67 = Regex.Match.range.getter(v40);
    uint64_t v68 = v46;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v39);
    unint64_t v71 = v39;
    sub_100028068();
    unint64_t v48 = sub_100016078();
    uint64_t v50 = v39[2];
    BOOL v51 = (v49 & 1) == 0;
    Swift::Int v52 = v50 + v51;
    if (__OFADD__(v50, v51))
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    unint64_t v53 = v48;
    uint64_t v4 = v49;
    sub_100008DB0(&qword_1001312B8);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v52)) {
      break;
    }
LABEL_16:
    id v39 = v71;
    if ((v4 & 1) != 0)
    {
      sub_100027F50();
    }

    else
    {
      v71[(v53 >> 6) + 8] |= 1LL << v53;
      uint64_t v56 = (void *)(v39[6] + 32 * v53);
      *uint64_t v56 = v42;
      v56[1] = v43;
      v56[2] = v44;
      v56[3] = v45;
      sub_100027F50();
      uint64_t v57 = v39[2];
      BOOL v58 = __OFADD__(v57, 1LL);
      uint64_t v59 = v57 + 1;
      if (v58) {
        goto LABEL_24;
      }
      v39[2] = v59;
      sub_100027FA0();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v40 = v69;
    uint64_t v41 = v65;
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v65, v69);
    v36 += v63;
    uint64_t v34 = v66 - 1;
    if (v66 == (char *)1)
    {
      swift_bridgeObjectRelease();
      uint64_t v4 = v61[0];
      goto LABEL_22;
    }
  }

  sub_100028068();
  unint64_t v54 = sub_100016078();
  if ((v4 & 1) == (v55 & 1))
  {
    unint64_t v53 = v54;
    goto LABEL_16;
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Substring);
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void sub_100022908()
{
  uint64_t v109 = v1;
  uint64_t v115 = v0;
  uint64_t v3 = v2;
  id v119 = v4;
  uint64_t v6 = v5;
  uint64_t v121 = (int *)type metadata accessor for LNAppShortcutParameterRecord(0LL);
  __chkstk_darwin(v121);
  sub_100027FF8();
  uint64_t v98 = v7;
  sub_100027FE4();
  __chkstk_darwin(v8);
  uint64_t v122 = (uint64_t)&v98 - v9;
  sub_100027FE4();
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v98 - v12;
  v124[0] = (uint64_t)_swiftEmptyDictionarySingleton;
  uint64_t v14 = *(void *)(v3 + 16);
  uint64_t v107 = v11;
  if (v14)
  {
    uint64_t v15 = v6;
    uint64_t v16 = v3 + ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v17 = *(void *)(v11 + 72);
    sub_10000AFB0();
    do
    {
      uint64_t v18 = v109;
      sub_100022FF0(v124, v16);
      uint64_t v109 = v18;
      if (v18) {
        goto LABEL_58;
      }
      v16 += v17;
      --v14;
    }

    while (v14);
    sub_10001198C();
    uint64_t v19 = (void *)v124[0];
    uint64_t v6 = v15;
  }

  else
  {
    uint64_t v19 = _swiftEmptyDictionarySingleton;
  }

  int64_t v20 = 0LL;
  uint64_t v21 = v19 + 8;
  uint64_t v22 = 1LL << *((_BYTE *)v19 + 32);
  uint64_t v23 = -1LL;
  if (v22 < 64) {
    uint64_t v23 = ~(-1LL << v22);
  }
  unint64_t v24 = v23 & v19[8];
  int64_t v25 = (unint64_t)(v22 + 63) >> 6;
  uint64_t v26 = v6 + 32;
  uint64_t v27 = _swiftEmptyArrayStorage;
  uint64_t v102 = v6;
  uint64_t v101 = v19;
  char v100 = v19 + 8;
  int64_t v99 = v25;
  uint64_t v106 = v6 + 32;
LABEL_10:
  while (2)
  {
    if (v24)
    {
      unint64_t v28 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      unint64_t v29 = v28 | (v20 << 6);
      goto LABEL_23;
    }

    if (__OFADD__(v20++, 1LL))
    {
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      sub_10001198C();
      goto LABEL_60;
    }

    if (v20 < v25)
    {
      unint64_t v31 = v21[v20];
      if (v31)
      {
LABEL_22:
        unint64_t v24 = (v31 - 1) & v31;
        unint64_t v29 = __clz(__rbit64(v31)) + (v20 << 6);
LABEL_23:
        uint64_t v33 = *(void *)(v6 + 16);
        if (!v33) {
          continue;
        }
        unint64_t v104 = v24;
        int64_t v105 = v20;
        uint64_t v34 = v19[7];
        uint64_t v35 = (uint64_t *)(v19[6] + 32 * v29);
        uint64_t v36 = v35[1];
        uint64_t v110 = *v35;
        uint64_t v37 = v35[3];
        uint64_t v38 = *(void *)(v34 + 8 * v29);
        uint64_t v112 = (void *)v36;
        swift_bridgeObjectRetain();
        uint64_t v103 = v37;
        sub_1000119E4();
        uint64_t v108 = v38;
        sub_10001BCF8();
        sub_10000AE38();
        uint64_t v39 = 0LL;
        uint64_t v111 = v33;
        while (1)
        {
          uint64_t v114 = v39;
          uint64_t v40 = (uint64_t *)(v26 + 32 * v39);
          uint64_t v41 = v40[1];
          uint64_t v118 = *v40;
          uint64_t v42 = v40[3];
          v124[0] = v40[2];
          v124[1] = v42;
          v123[0] = 31524LL;
          v123[1] = 0xE200000000000000LL;
          uint64_t v43 = v112;
          sub_1000119E4();
          uint64_t v120 = v41;
          sub_10001BEF8();
          uint64_t v113 = v42;
          sub_10000AE38();
          v44._uint64_t countAndFlagsBits = v110;
          v44._object = v43;
          String.append(_:)(v44);
          sub_10001BC70();
          v45._uint64_t countAndFlagsBits = 125LL;
          v45._object = (void *)0xE100000000000000LL;
          String.append(_:)(v45);
          unint64_t v46 = sub_1000118E0();
          LOBYTE(v42) = StringProtocol.contains<A>(_:)( v123,  &type metadata for String,  &type metadata for String,  v46,  v46);
          sub_10001BC70();
          if ((v42 & 1) != 0)
          {
            uint64_t v47 = *(void *)(v108 + 16);
            if (v47) {
              break;
            }
          }

LABEL_43:
          uint64_t v39 = v114 + 1;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v39 == v111)
          {
            sub_100027EC0();
            swift_bridgeObjectRelease();
            sub_100027F68();
            uint64_t v6 = v102;
            sub_10000ADB0();
            uint64_t v19 = v101;
            uint64_t v21 = v100;
            int64_t v20 = v105;
            int64_t v25 = v99;
            unint64_t v24 = v104;
            goto LABEL_10;
          }
        }

        uint64_t v48 = v107;
        unint64_t v117 = (*(unsigned __int8 *)(v107 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80);
        uint64_t v49 = v108 + v117;
        swift_bridgeObjectRetain();
        uint64_t v50 = *(void *)(v48 + 72);
        uint64_t v116 = v50;
        while (1)
        {
          uint64_t v125 = v27;
          sub_100025B9C(v49, (uint64_t)v13);
          id v51 = [v119 parameterPresentation];
          if (!v51) {
            goto LABEL_36;
          }
          Swift::Int v52 = v51;
          id v53 = [v51 specificTitle];
          id v54 = [v53 formatString];

          uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
          uint64_t v57 = v56;

          BOOL v58 = &v13[v121[6]];
          uint64_t v59 = *((void *)v58 + 1);
          if (v55 == *(void *)v58 && v57 == v59) {
            break;
          }
          char v61 = _stringCompareWithSmolCheck(_:_:expecting:)(v55, v57, *(void *)v58, v59, 0LL);
          sub_10001BC70();

          if ((v61 & 1) != 0) {
            goto LABEL_36;
          }
          uint64_t v27 = v125;
LABEL_41:
          sub_100025FA0();
          v49 += v50;
          if (!--v47)
          {
            swift_bridgeObjectRelease();
            uint64_t v120 = v108;
            uint64_t v26 = v106;
            goto LABEL_43;
          }
        }

        sub_10001BC70();

LABEL_36:
        uint64_t v62 = type metadata accessor for UUID(0LL);
        uint64_t v63 = v122;
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v62 - 8) + 16LL))(v122, v13, v62);
        uint64_t v64 = v115 + *(int *)(sub_100027E9C() + 20);
        uint64_t v65 = *(void *)(v64 + 40);
        uint64_t v66 = *(void *)(v64 + 48);
        uint64_t v67 = v121;
        uint64_t v68 = *(void **)&v13[v121[7]];
        uint64_t v69 = &v13[v121[8]];
        uint64_t v70 = *(void **)&v13[v121[9]];
        unint64_t v71 = *(void **)&v13[v121[10]];
        uint64_t v72 = *(void *)v69;
        uint64_t v73 = *((void *)v69 + 1);
        uint64_t v74 = v13;
        uint64_t v75 = &v13[v121[11]];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        uint64_t v78 = (void *)(v63 + v121[5]);
        *uint64_t v78 = v65;
        v78[1] = v66;
        uint64_t v79 = (void *)(v63 + v67[6]);
        uint64_t v80 = v120;
        void *v79 = v118;
        v79[1] = v80;
        *(void *)(v63 + v67[7]) = v68;
        uint64_t v81 = (void *)(v63 + v67[8]);
        *uint64_t v81 = v72;
        v81[1] = v73;
        *(void *)(v63 + v67[9]) = v70;
        *(void *)(v63 + v67[10]) = v71;
        uint64_t v82 = (void *)(v63 + v67[11]);
        *uint64_t v82 = v77;
        v82[1] = v76;
        swift_bridgeObjectRetain();
        sub_100027FA0();
        sub_10001BEF8();
        id v83 = v68;
        sub_10000AFB0();
        id v84 = v70;
        id v85 = v71;
        uint64_t v27 = v125;
        if ((swift_isUniquelyReferenced_nonNull_native(v125) & 1) == 0)
        {
          sub_100027F90();
          sub_100014280();
          uint64_t v27 = v87;
        }

        unint64_t v86 = v27[2];
        uint64_t v13 = v74;
        uint64_t v50 = v116;
        if (v86 >= v27[3] >> 1)
        {
          sub_100014280();
          uint64_t v27 = v88;
        }

        v27[2] = v86 + 1;
        sub_100025EC8(v122, (uint64_t)v27 + v117 + v86 * v50);
        goto LABEL_41;
      }

      int64_t v32 = v20 + 1;
      if (v20 + 1 < v25)
      {
        unint64_t v31 = v21[v32];
        if (v31) {
          goto LABEL_21;
        }
        int64_t v32 = v20 + 2;
        if (v20 + 2 >= v25) {
          break;
        }
        unint64_t v31 = v21[v32];
        if (v31)
        {
LABEL_21:
          int64_t v20 = v32;
          goto LABEL_22;
        }

        int64_t v32 = v20 + 3;
        if (v20 + 3 < v25)
        {
          unint64_t v31 = v21[v32];
          if (v31) {
            goto LABEL_21;
          }
          while (1)
          {
            int64_t v20 = v32 + 1;
            if (__OFADD__(v32, 1LL)) {
              goto LABEL_57;
            }
            if (v20 >= v25) {
              goto LABEL_49;
            }
            unint64_t v31 = v21[v20];
            ++v32;
            if (v31) {
              goto LABEL_22;
            }
          }
        }
      }
    }

    break;
  }

          uint64_t v17 = (v28 - 1) & v28;
          unint64_t v24 = __clz(__rbit64(v28)) + (v15 << 6);
        }

        uint64_t v26 = *(void **)(*(void *)(v2 + 48) + 8 * v24);
        uint64_t v47 = v26;
        uint64_t v30 = v26;
        if (!v26) {
          goto LABEL_61;
        }
      }

      if (v7)
      {
        unint64_t v31 = __CocoaSet.contains(_:)(v26, v43);

        if ((v31 & 1) == 0) {
          goto LABEL_56;
        }
      }

      else
      {
        int64_t v32 = v2;
        if (!*(void *)(a1 + 16)) {
          goto LABEL_55;
        }
        uint64_t v33 = NSObject._rawHashValue(seed:)(*(void *)(a1 + 40));
        uint64_t v34 = -1LL << *(_BYTE *)(a1 + 32);
        uint64_t v35 = v33 & ~v34;
        if (((*(void *)(v45 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v35) & 1) == 0) {
          goto LABEL_55;
        }
        uint64_t v36 = *(id *)(*(void *)(a1 + 48) + 8 * v35);
        uint64_t v37 = static NSObject.== infix(_:_:)(v36, v26);

        if ((v37 & 1) == 0)
        {
          uint64_t v38 = ~v34;
          while (1)
          {
            uint64_t v35 = (v35 + 1) & v38;
            if (((*(void *)(v45 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v35) & 1) == 0) {
              break;
            }
            uint64_t v39 = *(id *)(*(void *)(a1 + 48) + 8 * v35);
            uint64_t v40 = static NSObject.== infix(_:_:)(v39, v26);

            if ((v40 & 1) != 0) {
              goto LABEL_54;
            }
          }

        uint64_t v48 = v26;
        uint64_t v49 = v27;
        swift_bridgeObjectRetain();
        uint64_t v34 = countAndFlagsBits;
        uint64_t v35 = (unint64_t)object;
        goto LABEL_44;
      }
    }

    if ((_stringCompareWithSmolCheck(_:_:expecting:)(122LL, 0xE100000000000000LL, countAndFlagsBits, object, 1LL) & 1) == 0) {
      goto LABEL_43;
    }
    goto LABEL_31;
  }

  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

uint64_t sub_100022FF0(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for LNAppShortcutParameterRecord(0LL);
  uint64_t v40 = *(void *)(v5 - 8);
  double v6 = __chkstk_darwin(v5);
  uint64_t v34 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v35 = *(id *)(a2 + *(int *)(v8 + 36));
  id v9 = objc_msgSend(v35, "identifier", v6);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v9);

  uint64_t v10 = *(int *)(v5 + 24);
  uint64_t v38 = v2;
  uint64_t v39 = a2;
  uint64_t v11 = (uint64_t *)(a2 + v10);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  uint64_t v14 = *a1;
  uint64_t v15 = *(void *)(*a1 + 16);
  uint64_t v36 = v13;
  if (!v15)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_5;
  }

  swift_bridgeObjectRetain();
  unint64_t v16 = sub_1000160E0();
  if ((v17 & 1) != 0)
  {
    uint64_t v18 = *(void **)(*(void *)(v14 + 56) + 8 * v16);
LABEL_5:
    swift_bridgeObjectRetain();
    goto LABEL_7;
  }

  uint64_t v18 = _swiftEmptyArrayStorage;
LABEL_7:
  uint64_t v37 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v18[2])
  {
    uint64_t v19 = (char *)v18 + ((*(unsigned __int8 *)(v40 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80));
    int64_t v20 = (uint64_t *)(v39 + *(int *)(v5 + 32));
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v23 = *(void *)(v40 + 72);
    uint64_t v24 = v18[2];
    while (1)
    {
      int64_t v25 = &v19[*(int *)(v5 + 32)];
      uint64_t v26 = *((void *)v25 + 1);
      BOOL v27 = *(void *)v25 == v21 && v26 == v22;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v25, v26, v21, v22, 0LL) & 1) != 0) {
        return swift_bridgeObjectRelease();
      }
      v19 += v23;
      if (!--v24) {
        goto LABEL_15;
      }
    }
  }

  else
  {
LABEL_15:
    uint64_t v28 = v34;
    sub_100025B9C(v39, v34);
    if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
    {
      sub_100014280();
      uint64_t v18 = v32;
    }

    unint64_t v29 = v18[2];
    if (v29 >= v18[3] >> 1)
    {
      sub_100014280();
      uint64_t v18 = v33;
    }

    __int128 v18[2] = v29 + 1;
    sub_100025EC8( v28,  (uint64_t)v18 + ((*(unsigned __int8 *)(v40 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))
    + *(void *)(v40 + 72) * v29);
    id v30 = [v35 identifier];
    static String._unconditionallyBridgeFromObjectiveC(_:)(v30);

    swift_bridgeObjectRetain();
    sub_10003E1EC();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

uint64_t sub_1000232B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LNAppShortcutParameterRecord(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v9 = (uint64_t *)(a2 + *(int *)(v8 + 24));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  id v12 = objc_msgSend(*(id *)(a2 + *(int *)(v8 + 36)), "identifier", swift_bridgeObjectRetain().n128_f64[0]);
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  uint64_t v15 = v14;

  v30[2] = a1;
  uint64_t v16 = *a1;
  uint64_t v17 = *(void *)(v16 + 16);
  swift_bridgeObjectRetain();
  if (v17 && (uint64_t v18 = sub_100015F98(v10, v11), (v19 & 1) != 0))
  {
    int64_t v20 = *(void **)(*(void *)(v16 + 56) + 8 * v18);
    swift_bridgeObjectRetain();
  }

  else
  {
    int64_t v20 = _swiftEmptyDictionarySingleton;
  }

  swift_bridgeObjectRelease();
  uint64_t v21 = v20[2];
  swift_bridgeObjectRetain();
  if (v21 && (uint64_t v22 = sub_100015F98(v13, v15), (v23 & 1) != 0))
  {
    uint64_t v24 = *(void **)(v20[7] + 8 * v22);
    swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v24 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease();
  sub_100025B9C(a2, (uint64_t)v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
  v30[1] = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_100014280();
    uint64_t v24 = v28;
  }

  unint64_t v26 = v24[2];
  if (v26 >= v24[3] >> 1)
  {
    sub_100014280();
    uint64_t v24 = v29;
  }

  __int128 v24[2] = v26 + 1;
  sub_100025EC8( (uint64_t)v7,  (uint64_t)v24 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
  + *(void *)(v5 + 72) * v26);
  swift_isUniquelyReferenced_nonNull_native(v20);
  v30[5] = v20;
  sub_1000091C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10003E268();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000234F8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1 < 1)
  {
    uint64_t v10 = 0LL;
    id v9 = (void *)0xE000000000000000LL;
  }

  else
  {
    v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    object = v6._object;
    String.append(_:)(v6);
    swift_bridgeObjectRelease(object);
    v8._uint64_t countAndFlagsBits = 93LL;
    v8._object = (void *)0xE100000000000000LL;
    String.append(_:)(v8);
    uint64_t v10 = 91LL;
    id v9 = (void *)0xE100000000000000LL;
  }

  id v11 = [a4 key];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v14 = v13;

  swift_bridgeObjectRetain(v14);
  v15._uint64_t countAndFlagsBits = v10;
  v15._object = v9;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v9);
  return v12;
}

void sub_100023614(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  type metadata accessor for AppShortcutInterpolator.Builder(0LL);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 localizedStringForLocaleIdentifier:v4];

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  id v9 = [v3 key];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  *a2 = v10;
  a2[1] = v12;
  a2[2] = v6;
  a2[3] = v8;
}

void sub_1000236E0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, unsigned __int8 a25, uint64_t a26, uint64_t a27, unsigned __int8 a28, void *a29)
{
  a19 = v31;
  a20 = v32;
  uint64_t v33 = v29;
  uint64_t v35 = v34;
  uint64_t v199 = v36;
  uint64_t v190 = v37;
  uint64_t v39 = v38;
  uint64_t v201 = v40;
  uint64_t v194 = v41;
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v46 = a28;
  sub_100008DB0((uint64_t *)&unk_100132900);
  sub_100027F2C();
  __chkstk_darwin(v47);
  sub_100011A0C();
  uint64_t v191 = v49 - v48;
  uint64_t v200 = sub_100008DB0(&qword_100130FC0);
  uint64_t v187 = *(void *)(v200 - 8);
  sub_100027F2C();
  __chkstk_darwin(v50);
  sub_100027EA4();
  __chkstk_darwin(v51);
  uint64_t v202 = (char *)&v174 - v52;
  sub_100027FE4();
  __chkstk_darwin(v53);
  uint64_t v55 = (uint64_t *)((char *)&v174 - v54);
  __chkstk_darwin(v56);
  BOOL v58 = (char *)&v174 - v57;
  uint64_t v59 = String.subscript.getter(15LL, 983047LL);
  uint64_t v63 = v61;
  uint64_t v195 = v39;
  unint64_t v64 = *(void *)(v39 + 16);
  if ((v46 & 1) != 0)
  {
    if (v64)
    {
      uint64_t v185 = v35;
      uint64_t v65 = v59;
      uint64_t v197 = v43;
      uint64_t v198 = v45;
      uint64_t v66 = v60;
      uint64_t v46 = v62;
      uint64_t v67 = v61;
      sub_100011BEC(v59, v60, v61, v62, v195);
      uint64_t v63 = v67;
      uint64_t v33 = v29;
      uint64_t v60 = v66;
      uint64_t v43 = v197;
      uint64_t v45 = v198;
      uint64_t v59 = v65;
      uint64_t v35 = v185;
      uint64_t v62 = v46;
      if ((v61 & 1) == 0) {
        goto LABEL_4;
      }
      sub_100027FF0(v59, v60, v61, v46);
      if (qword_1001302D8 != -1) {
        swift_once(&qword_1001302D8, sub_100088814);
      }
      uint64_t v181 = v29;
      uint64_t v113 = sub_10000E918();
      sub_100008D98(v113, (uint64_t)qword_100135780);
      uint64_t v107 = v201;
      uint64_t v114 = sub_100011A3C(v201);
      Logger.logObject.getter(v114);
      os_log_type_t v115 = sub_100027FB0();
      if (sub_100027E64(v115))
      {
        uint64_t v72 = sub_10000AE10(12LL);
        uint64_t v73 = sub_10000AE10(32LL);
        a10 = v73;
        sub_100027E2C(4.8149e-34);
        uint64_t v117 = sub_100027FA8(v194, v116, &a10);
        sub_100027E40(v117);
        sub_100027E5C(v107);
        goto LABEL_29;
      }
    }

    else
    {
      sub_100027FF0(v59, v60, v61, v62);
      if (qword_1001302D8 != -1) {
        swift_once(&qword_1001302D8, sub_100088814);
      }
      uint64_t v181 = v29;
      uint64_t v106 = sub_10000E918();
      sub_100008D98(v106, (uint64_t)qword_100135780);
      uint64_t v107 = v201;
      uint64_t v108 = sub_100011A3C(v201);
      Logger.logObject.getter(v108);
      os_log_type_t v109 = sub_100027FB0();
      if (sub_100027E64(v109))
      {
        uint64_t v72 = sub_10000AE10(12LL);
        uint64_t v73 = sub_10000AE10(32LL);
        a10 = v73;
        sub_100027E2C(4.8149e-34);
        uint64_t v111 = sub_100027FA8(v194, v110, &a10);
        sub_100027E40(v111);
        sub_100027E5C(v107);
LABEL_29:
        sub_100027EEC((void *)&_mh_execute_header, v76, v77, v78);
        sub_100027F40();
        sub_10000AD78(v73);
        sub_10000AD78(v72);

        goto LABEL_78;
      }
    }

    uint64_t v112 = v107;
    goto LABEL_31;
  }

LABEL_4:
  if (v64 > 2)
  {
    sub_100027FF0(v59, v60, v61, v62);
    if (qword_1001302D8 != -1) {
      goto LABEL_81;
    }
    goto LABEL_6;
  }

  uint64_t v183 = v63;
  uint64_t v184 = v60;
  uint64_t v186 = v59;
  uint64_t v188 = v62;
  uint64_t v197 = v43;
  uint64_t v198 = v45;
  uint64_t v79 = a29;
  int v196 = a25;
  uint64_t v81 = a23;
  uint64_t v80 = a24;
  uint64_t v82 = v35;
  uint64_t v84 = a21;
  uint64_t v83 = a22;
  sub_10000AE38();
  uint64_t v192 = v84;
  uint64_t v193 = v83;
  uint64_t v85 = sub_10001E130(_swiftEmptyDictionarySingleton, v80, v79, v84, v83);
  uint64_t v86 = v85;
  unint64_t v189 = v33;
  uint64_t v87 = *(void *)(v81 + 16);
  uint64_t v185 = v82;
  char v88 = v196;
  if (v87)
  {
    uint64_t v181 = v85;
    sub_1000280C8();
    uint64_t v182 = v81;
    uint64_t v89 = (uint64_t *)(v81 + 40);
    uint64_t v90 = _swiftEmptyArrayStorage;
    uint64_t v91 = v190;
    uint64_t v92 = v200;
    do
    {
      uint64_t v93 = *(v89 - 1);
      uint64_t v94 = *v89;
      uint64_t v95 = HIBYTE(*v89) & 0xF;
      if ((*v89 & 0x2000000000000000LL) == 0) {
        uint64_t v95 = v93 & 0xFFFFFFFFFFFFLL;
      }
      if (v95)
      {
        uint64_t v96 = (uint64_t)v55 + *(int *)(v92 + 48);
        *uint64_t v55 = v93;
        v55[1] = v94;
        uint64_t v97 = type metadata accessor for LNAppShortcutParameterRecord(0LL);
        sub_1000280A8(v96, v98, v99, v97);
        sub_100028018((uint64_t)v55, (uint64_t)v58);
        sub_100028018((uint64_t)v58, (uint64_t)v202);
        sub_10000AFB0();
        if ((swift_isUniquelyReferenced_nonNull_native(v90) & 1) == 0)
        {
          sub_100027F90();
          sub_1000143CC();
          uint64_t v90 = v104;
        }

        unint64_t v101 = v90[2];
        unint64_t v100 = v90[3];
        if (v101 >= v100 >> 1)
        {
          sub_100028094(v100);
          sub_1000143CC();
          uint64_t v90 = v105;
        }

        v90[2] = v101 + 1;
        sub_100027E74();
        sub_100028018((uint64_t)v202, (uint64_t)v90 + v102 + *(void *)(v103 + 72) * v101);
        uint64_t v91 = v190;
        uint64_t v92 = v200;
      }

      v89 += 2;
      --v87;
    }

    while (v87);
    swift_bridgeObjectRelease();
    char v88 = v196;
    uint64_t v86 = v181;
  }

  else
  {
    uint64_t v90 = _swiftEmptyArrayStorage;
    uint64_t v91 = v190;
  }

  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v86);
  a10 = v86;
  sub_1000091D4((uint64_t)v90, v186, v184, v183, v188, isUniquelyReferenced_nonNull_native);
  uint64_t v180 = a10;
  sub_10001BC70();
  swift_bridgeObjectRelease();
  a10 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v119 = type metadata accessor for UUID(0LL);
  uint64_t v120 = v191;
  sub_1000280A8(v191, v121, v122, v119);
  id v123 = objc_allocWithZone(&OBJC_CLASS___LNAutoShortcutLocalizedPhrase);
  uint64_t v124 = v197;
  sub_100011A3C(v197);
  uint64_t v125 = v201;
  sub_10001BEF8();
  uint64_t v33 = v199;
  sub_1000119E4();
  uint64_t v126 = v198;
  id v127 = sub_1000258A8(v194, v125, v91, v33, v198, v124, v120, v88 & 1);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  unint64_t v129 = *(void *)((a10 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v128 = *(void *)((a10 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v129 >= v128 >> 1) {
    sub_100027E8C(v129 + 1, v128);
  }
  id v178 = v127;
  uint64_t v130 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v129, v127);
  specialized Array._endMutation()(v130);
  uint64_t v131 = sub_10000AE38();
  sub_100039394( v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v174,  v175,  v176,  v177,  (uint64_t)v178,  v179,  v180,  v181,  v182,  v183,  v184,  v185,  v186,  v187,  v188,  v189,  v190,  v191);
  uint64_t v46 = v139;
  sub_10000ADB0();
  v204[0] = v46;
  unint64_t v140 = v189;
  sub_100025FC4(v204);
  if (v140)
  {
    swift_release();
    __break(1u);
    return;
  }

  uint64_t v177 = *(void *)(v204[0] + 16);
  uint64_t v181 = 0LL;
  if (!v177)
  {

    swift_release();
LABEL_65:
    swift_bridgeObjectRelease();
    goto LABEL_78;
  }

  if (!*(void *)(v180 + 16))
  {
    swift_release();
LABEL_72:
    sub_10001DEE0();
    if (qword_1001302D8 != -1) {
      swift_once(&qword_1001302D8, sub_100088814);
    }
    uint64_t v166 = sub_10000E918();
    sub_100008D98(v166, (uint64_t)qword_100135780);
    uint64_t v167 = sub_100011A3C(v124);
    Logger.logObject.getter(v167);
    os_log_type_t v168 = sub_100027FB0();
    if (sub_100027E64(v168))
    {
      uint64_t v169 = sub_10000AE10(12LL);
      uint64_t v170 = sub_10000AE10(32LL);
      v204[0] = v170;
      sub_100027E2C(4.8149e-34);
      v203 = (void *)sub_100027FA8(v126, v171, v204);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, v204, 12LL, v124);
      sub_100027E5C(v124);
      sub_100027EEC((void *)&_mh_execute_header, v172, v173, "Skipping phrase template with an unrecognized token: %s");
      sub_100027F40();
      sub_10000AD78(v170);
      sub_10000AD78(v169);
    }

    else
    {

      sub_10001191C(v124);
    }

    swift_bridgeObjectRelease();
    goto LABEL_78;
  }

  uint64_t v141 = *(void *)(v204[0] + 72);
  uint64_t v45 = *(void *)(v204[0] + 56);
  uint64_t v194 = *(void *)(v204[0] + 64);
  uint64_t v195 = v141;
  uint64_t v46 = *(void *)(v204[0] + 40);
  uint64_t v142 = v204[0];
  sub_1000280C8();
  unint64_t v143 = sub_100027FC4();
  if ((v144 & 1) == 0)
  {
    swift_release();
    sub_10001DEC4();
LABEL_71:
    uint64_t v126 = v198;
    goto LABEL_72;
  }

  uint64_t v176 = v142;
  uint64_t v175 = v142 + 32;
  uint64_t v43 = a10;
  unint64_t v145 = 1LL;
  uint64_t v146 = v180;
  while (1)
  {
    unint64_t v179 = v145;
    uint64_t v186 = *(void *)(*(void *)(v146 + 56) + 8 * v143);
    swift_bridgeObjectRetain();
    sub_10001DEC4();
    v204[0] = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v147 = *(void *)((v43 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_100011A3C(v43);
    if (v147) {
      goto LABEL_42;
    }
LABEL_58:
    sub_10001191C(v43);
    uint64_t v161 = _swiftEmptyArrayStorage;
LABEL_59:
    sub_100027F68();
    sub_10001BE7C();
    if (v179 == v177)
    {

      sub_100028088();
      goto LABEL_65;
    }

    if (v179 >= *(void *)(v176 + 16)) {
      goto LABEL_80;
    }
    uint64_t v146 = v180;
    if (!*(void *)(v180 + 16))
    {
      a10 = (uint64_t)v161;
      swift_release();
      goto LABEL_70;
    }

    unint64_t v162 = v179 + 1;
    uint64_t v163 = (void *)(v175 + 48 * v179);
    uint64_t v164 = v163[5];
    uint64_t v45 = v163[3];
    uint64_t v194 = v163[4];
    uint64_t v195 = v164;
    uint64_t v46 = v163[1];
    sub_1000280C8();
    unint64_t v143 = sub_100027FC4();
    uint64_t v43 = (uint64_t)v161;
    unint64_t v145 = v162;
    uint64_t v33 = v199;
    if ((v165 & 1) == 0)
    {
      a10 = (uint64_t)v161;
      sub_100028088();
      sub_10001DEC4();
LABEL_70:
      uint64_t v124 = v197;
      goto LABEL_71;
    }
  }

  if (v43 < 0) {
    uint64_t v46 = v43;
  }
  else {
    uint64_t v46 = v43 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_100011A3C(v43);
  uint64_t v147 = _CocoaArrayWrapper.endIndex.getter(v46);
  if (!v147) {
    goto LABEL_58;
  }
LABEL_42:
  uint64_t v45 = 0LL;
  uint64_t v46 = *(void *)(v186 + 16);
  unint64_t v189 = v43 & 0xC000000000000001LL;
  uint64_t v182 = v43 + 32;
  uint64_t v188 = v46;
  uint64_t v184 = v43;
  uint64_t v183 = v147;
  while (1)
  {
    uint64_t v148 = v189
    if (__OFADD__(v45++, 1LL)) {
      break;
    }
    if (v46)
    {
      uint64_t v191 = v45;
      uint64_t v202 = v148;
      v203 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v46);
      sub_100027E74();
      uint64_t v150 = v185;
      uint64_t v151 = v46;
      uint64_t v153 = v186 + v152;
      uint64_t v201 = *(void *)(v154 + 72);
      uint64_t v155 = v190;
      do
      {
        sub_100026CB8(v153, v30, &qword_100130FC0);
        id v156 = sub_100024298( *(void *)v30,  *(void **)(v30 + 8),  v30 + *(int *)(v200 + 48),  v202,  v194,  v195,  v198,  v197,  v155,  v33,  v192,  v193,  v150,  v196 & 1);
        sub_100026E14(v30, &qword_100130FC0);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v157);
        uint64_t v158 = v203[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v158);
        id v159 = v156;
        uint64_t v33 = v199;
        uint64_t v160 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v158, v159);
        specialized ContiguousArray._endMutation()(v160);
        v153 += v201;
        --v151;
      }

      while (v151);

      uint64_t v43 = v184;
      uint64_t v147 = v183;
      uint64_t v45 = v191;
    }

    else
    {
    }

    sub_10004284C();
    uint64_t v46 = v188;
    if (v45 == v147)
    {
      sub_10001191C(v43);
      uint64_t v161 = (void *)v204[0];
      goto LABEL_59;
    }
  }

  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  swift_once(&qword_1001302D8, sub_100088814);
LABEL_6:
  uint64_t v181 = v33;
  uint64_t v68 = sub_10000E918();
  sub_100008D98(v68, (uint64_t)qword_100135780);
  uint64_t v69 = sub_100011A3C(v43);
  Logger.logObject.getter(v69);
  os_log_type_t v70 = sub_100027FB0();
  if (sub_100027E64(v70))
  {
    uint64_t v71 = v43;
    uint64_t v72 = sub_10000AE10(12LL);
    uint64_t v73 = sub_10000AE10(32LL);
    a10 = v73;
    sub_100027E2C(4.8149e-34);
    uint64_t v75 = sub_100027FA8(v45, v74, &a10);
    sub_100027E40(v75);
    sub_100027E5C(v71);
    uint64_t v78 = "Skipping phrase template with too many tokens: %s";
    goto LABEL_29;
  }

  uint64_t v112 = v43;
LABEL_31:
  sub_10001191C(v112);
LABEL_78:
  sub_10001DEE8();
}

id sub_100024298( uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v95 = a8;
  uint64_t v96 = a6;
  uint64_t v89 = a7;
  uint64_t v93 = a5;
  uint64_t v94 = a3;
  uint64_t v17 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v17);
  uint64_t v86 = (uint64_t)&v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100008DB0(&qword_100131268);
  __chkstk_darwin(v19);
  uint64_t v92 = (char *)&v86 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  char v88 = (char *)&v86 - v22;
  __chkstk_darwin(v23);
  int64_t v25 = (char *)&v86 - v24;
  uint64_t v26 = type metadata accessor for LNAppShortcutParameterRecord(0LL);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v86 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = sub_100008DB0((uint64_t *)&unk_100132900);
  __chkstk_darwin(v29);
  uint64_t v98 = (uint64_t)&v86 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)&v86 - v32;
  __chkstk_darwin(v34);
  uint64_t v36 = (char *)&v86 - v35;
  double v38 = __chkstk_darwin(v37);
  uint64_t v97 = (uint64_t)&v86 - v39;
  id v87 = a4;
  id v40 = objc_msgSend(a4, "localizedPhrase", v38);
  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  uint64_t v43 = v42;

  uint64_t v101 = v41;
  uint64_t v102 = v43;
  uint64_t v99 = a1;
  uint64_t v100 = (uint64_t)a2;
  unint64_t v44 = sub_100026C50();
  String.replaceSubrange<A>(_:with:)(v93, v96, &v99, &type metadata for String, v44);
  uint64_t v45 = v94;
  sub_100026CB8(v94, (uint64_t)v25, &qword_100131268);
  uint64_t v96 = v26;
  if (sub_100009E6C((uint64_t)v25, 1LL, v26) == 1)
  {
    uint64_t v46 = v89;
    sub_100026E14((uint64_t)v25, &qword_100131268);
    id v47 = v87;
    id v48 = [v87 signature];
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    uint64_t v90 = v50;
    uint64_t v91 = v49;

    id v51 = [v47 parameterIdentifier];
    if (v51)
    {
      uint64_t v52 = v51;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v51);

      uint64_t v53 = 0LL;
    }

    else
    {
      uint64_t v53 = 1LL;
    }

    uint64_t v57 = v45;
    uint64_t v58 = (uint64_t)v88;
    uint64_t v59 = type metadata accessor for UUID(0LL);
    sub_100009E60((uint64_t)v36, v53, 1LL, v59);
  }

  else
  {
    sub_100025EC8((uint64_t)v25, (uint64_t)v28);
    uint64_t v54 = v89;
    uint64_t v99 = v89;
    uint64_t v100 = v95;
    swift_bridgeObjectRetain();
    v55._uint64_t countAndFlagsBits = a1;
    v55._object = a2;
    String.append(_:)(v55);
    uint64_t v90 = v100;
    uint64_t v91 = v99;
    uint64_t v56 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16LL))(v33, v28, v56);
    sub_100025FA0();
    sub_100009E60((uint64_t)v33, 0LL, 1LL, v56);
    uint64_t v36 = v33;
    uint64_t v46 = v54;
    uint64_t v57 = v45;
    uint64_t v58 = (uint64_t)v88;
  }

  uint64_t v60 = v97;
  sub_100026C8C((uint64_t)v36, v97, (uint64_t *)&unk_100132900);
  uint64_t v61 = v101;
  uint64_t v62 = v102;
  sub_100026CB8(v60, v98, (uint64_t *)&unk_100132900);
  sub_100026CB8(v57, v58, &qword_100131268);
  uint64_t v63 = v96;
  int v64 = sub_100009E6C(v58, 1LL, v96);
  uint64_t v93 = v62;
  uint64_t v94 = v61;
  if (v64 == 1)
  {
    uint64_t v65 = v46;
    sub_100026E14(v58, &qword_100131268);
    uint64_t v66 = 0LL;
    uint64_t v67 = 0LL;
    uint64_t v68 = v95;
    uint64_t v69 = (uint64_t)v92;
    uint64_t v70 = v63;
  }

  else
  {
    uint64_t v66 = *(void **)(v58 + *(int *)(v63 + 40));
    id v71 = v66;
    sub_100025FA0();
    if (v66)
    {
      uint64_t v65 = v46;
      NSString v72 = String._bridgeToObjectiveC()();
      uint64_t v73 = v86;
      sub_100026CB8(a13, v86, &qword_100130BC0);
      uint64_t v74 = type metadata accessor for URL(0LL);
      int v75 = sub_100009E6C(v73, 1LL, v74);
      uint64_t v77 = 0LL;
      uint64_t v68 = v95;
      if (v75 != 1)
      {
        URL._bridgeToObjectiveC()(v76);
        uint64_t v77 = v78;
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v74 - 8) + 8LL))(v73, v74);
      }

      id v79 = [v71 localizedStringForLocaleIdentifier:v72 bundleURL:v77];

      uint64_t v66 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
      uint64_t v67 = v80;
    }

    else
    {
      uint64_t v65 = v46;
      uint64_t v67 = 0LL;
      uint64_t v68 = v95;
    }

    uint64_t v69 = (uint64_t)v92;
    uint64_t v70 = v96;
  }

  sub_100026CB8(v57, v69, &qword_100131268);
  if (sub_100009E6C(v69, 1LL, v70) == 1)
  {
    sub_100026E14(v69, &qword_100131268);
    uint64_t v81 = 0LL;
    uint64_t v82 = 0LL;
  }

  else
  {
    uint64_t v83 = (uint64_t *)(v69 + *(int *)(v70 + 44));
    uint64_t v81 = *v83;
    uint64_t v82 = v83[1];
    swift_bridgeObjectRetain();
    sub_100025FA0();
  }

  objc_allocWithZone(&OBJC_CLASS___LNAutoShortcutLocalizedPhrase);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v84 = sub_1000259EC(v94, v93, a9, a10, v65, v68, v98, (uint64_t)v66, v67, v81, v82, a14 & 1);
  sub_100026E14(v97, (uint64_t *)&unk_100132900);
  return v84;
}

void *sub_1000248B8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v100 = a1;
  uint64_t v101 = a2;
  uint64_t v4 = type metadata accessor for LNAppShortcutParameterRecord(0LL);
  uint64_t v98 = *(void *)(v4 - 8);
  uint64_t v99 = (int *)v4;
  sub_100027F2C();
  __chkstk_darwin(v5);
  unint64_t v7 = (unint64_t)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v77 - v10;
  unint64_t v82 = a3;
  if (a3 >> 62) {
    goto LABEL_54;
  }
  uint64_t v12 = *(void **)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t result = v12;
  if (!v12)
  {
LABEL_55:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }

uint64_t sub_100024F74()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for AppShortcutInterpolator()
{
  return objc_opt_self(&OBJC_CLASS____TtC10LinkDaemon23AppShortcutInterpolator);
}

void sub_100024FB8(void *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v32 - v8;
  double v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v32 - v12;
  id v14 = objc_msgSend(a1, "shortTitle", v11);
  if (v14)
  {
    unint64_t v15 = v14;
    id v16 = [v14 bundleURL];

    if (v16)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v16);

      uint64_t v17 = type metadata accessor for URL(0LL);
      uint64_t v18 = (uint64_t)v9;
      uint64_t v19 = 0LL;
    }

    else
    {
      uint64_t v17 = type metadata accessor for URL(0LL);
      uint64_t v18 = (uint64_t)v9;
      uint64_t v19 = 1LL;
    }

    sub_100009E60(v18, v19, 1LL, v17);
    sub_100026C8C((uint64_t)v9, (uint64_t)v13, &qword_100130BC0);
    type metadata accessor for URL(0LL);
    if (sub_100009E6C((uint64_t)v13, 1LL, v17) != 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v17 - 8) + 32LL))(a2, v13, v17);
      sub_100009E60(a2, 0LL, 1LL, v17);
      return;
    }
  }

  else
  {
    uint64_t v20 = type metadata accessor for URL(0LL);
    sub_100009E60((uint64_t)v13, 1LL, 1LL, v20);
  }

  id v21 = [a1 phraseTemplates];
  uint64_t v22 = sub_10000A1A0(0LL, (unint64_t *)&qword_100131250, &OBJC_CLASS___LNStaticDeferredLocalizedString_ptr);
  uint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

  if ((unint64_t)v23 >> 62)
  {
    if (v23 < 0) {
      uint64_t v29 = v23;
    }
    else {
      uint64_t v29 = v23 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease();
    if (v30) {
      goto LABEL_9;
    }
  }

  else if (*(void *)((v23 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
LABEL_9:
    sub_1000460E4(0LL, (v23 & 0xC000000000000001LL) == 0, v23);
    if ((v23 & 0xC000000000000001LL) != 0) {
      id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v23);
    }
    else {
      id v24 = *(id *)(v23 + 32);
    }
    uint64_t v25 = v24;
    swift_bridgeObjectRelease();
    id v26 = [v25 bundleURL];

    if (v26)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v26);

      uint64_t v27 = 0LL;
    }

    else
    {
      uint64_t v27 = 1LL;
    }

    uint64_t v28 = type metadata accessor for URL(0LL);
    sub_100009E60((uint64_t)v6, v27, 1LL, v28);
    sub_100026C8C((uint64_t)v6, a2, &qword_100130BC0);
    goto LABEL_21;
  }

  swift_bridgeObjectRelease();
  uint64_t v31 = type metadata accessor for URL(0LL);
  sub_100009E60(a2, 1LL, 1LL, v31);
LABEL_21:
  sub_100026E14((uint64_t)v13, &qword_100130BC0);
}

id sub_1000252D4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  if (!a4) {
    return 0LL;
  }
  id v13 = objc_msgSend(a2, "title", swift_bridgeObjectRetain().n128_f64[0]);
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v13 localizedStringForLocaleIdentifier:v14];

  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  uint64_t v19 = sub_10000BFF0(a2, (SEL *)&selRef_systemImageName);
  uint64_t v21 = v20;
  id v22 = [a7 parameterIdentifier];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  uint64_t v25 = v24;

  id v26 = objc_allocWithZone(&OBJC_CLASS___LNAppShortcutDynamicOptionsProviderReference);
  id v27 = sub_100025CC4(a3, a4, v23, v25, a8, a1);
  id v28 = objc_allocWithZone(&OBJC_CLASS___LNAppShortcutOptionsCollection);
  return sub_100025D60(v16, v18, v19, v21, v27);
}

uint64_t sub_100025450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_bridgeObjectRelease(a5);
}

void sub_1000254C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v12 = a1 == a5 && a2 == a6;
  if ((v12 || (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a5, a6, 0LL) & 1) != 0)
    && (a3 == a7 ? (BOOL v13 = a4 == a8) : (BOOL v13 = 0), !v13))
  {
    _stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, a7, a8, 0LL);
  }

  else
  {
    sub_10000AF74();
  }

Swift::Int sub_100025548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000255D4()
{
  return sub_100025548(*v0, v0[1], v0[2], v0[3]);
}

uint64_t sub_1000255E0(uint64_t a1)
{
  return sub_100025450(a1, *v1, v1[1], v1[2], v1[3]);
}

Swift::Int sub_1000255EC(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v4 = v1[3];
  Hasher.init(_seed:)(v7, a1);
  sub_10001BEF8();
  String.hash(into:)(v7, v2, v3);
  swift_bridgeObjectRelease(v3);
  sub_10000AE38();
  String.hash(into:)(v7, v5, v4);
  sub_10000ADB0();
  return Hasher._finalize()();
}

void sub_100025660(uint64_t *a1, uint64_t *a2)
{
}

id sub_10002567C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  NSString v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000A1A0(0LL, (unint64_t *)&qword_100130590, &OBJC_CLASS___LNAutoShortcutLocalizedPhrase_ptr);
  v25.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (a9)
  {
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v24 = 0LL;
  }

  if (a11)
  {
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v23 = 0LL;
  }

  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a17)
  {
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v19 = 0LL;
  }

  if (a18)
  {
    sub_10000A1A0(0LL, (unint64_t *)&qword_100131250, &OBJC_CLASS___LNStaticDeferredLocalizedString_ptr);
    v20.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }

  else
  {
    v20.super.Class isa = 0LL;
  }

  id v21 = [v29 initWithBundleIdentifier:v28 localeIdentifier:v27 actionIdentifier:v26 orderedPhrases:v25.super.isa localizedShortTitle:v24 localizedAutoSho rtcutDescription:v23 systemImageName:v18 shortcutTileColor:a14 parameterPresentation:a15 attributionBundleIdentifier:v19 basePhraseTemplates:v20.super.isa];

  return v21;
}

id sub_1000258A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v13 = type metadata accessor for UUID(0LL);
  Class isa = 0LL;
  if (sub_100009E6C(a7, 1LL, v13) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(a7, v13);
  }

  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v16 = [v18 initWithLocalizedPhrase:v10 bundleIdentifier:v11 basePhraseTemplate:v12 parameterIdentifier:isa primary:a8 & 1 signature:v15];

  return v16;
}

id sub_1000259EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v16 = type metadata accessor for UUID(0LL);
  Class isa = 0LL;
  if (sub_100009E6C(a7, 1LL, v16) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL))(a7, v16);
  }

  if (a9)
  {
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v18 = 0LL;
  }

  if (a11)
  {
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v19 = 0LL;
  }

  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LOBYTE(v23) = a12 & 1;
  id v21 = [v24 initWithLocalizedPhrase:v13 bundleIdentifier:v14 basePhraseTemplate:v15 parameterIdentifier:isa optionsCollectionTitle:v18 options CollectionSystemImageName:v19 primary:v23 signature:v20];

  return v21;
}

uint64_t sub_100025B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LNAppShortcutParameterRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

id sub_100025BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a4)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v10 = 0LL;
  }

  uint64_t v11 = type metadata accessor for URL(0LL);
  NSString v13 = 0LL;
  if (sub_100009E6C(a5, 1LL, v11) != 1)
  {
    URL._bridgeToObjectiveC()(v12);
    NSString v13 = v14;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(a5, v11);
  }

  id v15 = [v6 initWithKey:v9 table:v10 bundleURL:v13];

  return v15;
}

id sub_100025CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  id v13 = [v6 initWithAppShortcutsProviderMangledTypeName:v11 parameterIdentifier:v12 appShortcutIndex:a5 optionsProviderIndex:a6];

  return v13;
}

id sub_100025D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (a4)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a4);
  }

  else
  {
    NSString v10 = 0LL;
  }

  id v11 = [v5 initWithLocalizedTitle:v9 systemImageName:v10 optionsProviderReference:a5];

  return v11;
}

id sub_100025DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a5)
  {
    sub_10000A1A0(0LL, &qword_100131258, &OBJC_CLASS___LNAppShortcutOptionsCollection_ptr);
    v9.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }

  else
  {
    v9.super.Class isa = 0LL;
  }

  id v10 = [v5 initWithParameterIdentifier:v7 localizedSpecificTitle:v8 optionsCollections:v9.super.isa];

  return v10;
}

uint64_t sub_100025EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LNAppShortcutParameterRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AppShortcutInterpolator.Builder(uint64_t a1)
{
  uint64_t result = qword_100131360;
  if (!qword_100131360) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppShortcutInterpolator.Builder);
  }
  return result;
}

uint64_t sub_100025F44(uint64_t a1)
{
  return a1;
}

uint64_t sub_100025F6C(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_100025FA0()
{
  uint64_t v0 = sub_100027FB8();
  uint64_t v2 = v1(v0);
  sub_100027ECC(v2);
  sub_10000ADA8();
}

uint64_t sub_100025FC4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_10008B9A8(v2);
    uint64_t v2 = v3;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  uint64_t result = sub_10002602C(v6);
  *a1 = v2;
  return result;
}

uint64_t sub_10002602C(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v3) {
        return sub_100026690(0LL, v3, 1LL, a1);
      }
      return result;
    }

    goto LABEL_124;
  }

  uint64_t v5 = result;
  uint64_t v108 = v1;
  sub_1000B0618(v3 / 2);
  id v102 = a1;
  uint64_t v103 = v6;
  uint64_t v107 = v7;
  uint64_t v105 = v3;
  if (v3 <= 0)
  {
    id v10 = (char *)_swiftEmptyArrayStorage;
    unint64_t v45 = _swiftEmptyArrayStorage[2];
LABEL_90:
    uint64_t result = (uint64_t)v10;
    if (v45 < 2)
    {
LABEL_101:
      uint64_t result = swift_bridgeObjectRelease();
      if (v105 >= -1)
      {
        *(void *)(v103 + 1sub_10000AC58(v0 + 6) = 0LL;
        return swift_bridgeObjectRelease();
      }

      goto LABEL_129;
    }

    uint64_t v93 = *v102;
    while (1)
    {
      unint64_t v94 = v45 - 2;
      if (v45 < 2) {
        break;
      }
      if (!v93) {
        goto LABEL_133;
      }
      uint64_t v95 = result;
      uint64_t v96 = *(void *)(result + 32 + 16 * v94);
      uint64_t v97 = *(void *)(result + 32 + 16 * (v45 - 1) + 8);
      uint64_t result = sub_100026724( (char *)(v93 + 48 * v96),  (char *)(v93 + 48LL * *(void *)(result + 32 + 16 * (v45 - 1))),  v93 + 48 * v97,  v107);
      if (v108) {
        goto LABEL_86;
      }
      if (v97 < v96) {
        goto LABEL_119;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v95);
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10008B0EC(v95);
        uint64_t v95 = result;
      }

      if (v94 >= *(void *)(v95 + 16)) {
        goto LABEL_120;
      }
      uint64_t v98 = (void *)(v95 + 32 + 16 * v94);
      *uint64_t v98 = v96;
      v98[1] = v97;
      unint64_t v99 = *(void *)(v95 + 16);
      if (v45 > v99) {
        goto LABEL_121;
      }
      memmove((void *)(v95 + 32 + 16 * (v45 - 1)), (const void *)(v95 + 32 + 16 * v45), 16 * (v99 - v45));
      uint64_t result = v95;
      *(void *)(v95 + 1sub_10000AC58(v0 + 6) = v99 - 1;
      unint64_t v45 = v99 - 1;
      if (v99 <= 2) {
        goto LABEL_101;
      }
    }

LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
    return result;
  }

  uint64_t v8 = 0LL;
  uint64_t v9 = *a1;
  uint64_t v100 = *a1 + 40;
  uint64_t v101 = *a1 + 128;
  id v10 = (char *)_swiftEmptyArrayStorage;
  uint64_t result = 48LL;
  uint64_t v11 = v105;
  uint64_t v104 = v5;
  uint64_t v106 = v9;
  while (1)
  {
    uint64_t v12 = v8++;
    if (v8 < v11)
    {
      unint64_t v13 = *(void *)(v9 + 48 * v8 + 32);
      unint64_t v14 = *(void *)(v9 + 48 * v12 + 32) >> 14;
      unint64_t v15 = v13 >> 14;
      uint64_t v8 = v12 + 2;
      if (v12 + 2 < v11)
      {
        uint64_t v16 = (unint64_t *)(v101 + 48 * v12);
        while (1)
        {
          unint64_t v18 = *v16;
          v16 += 6;
          unint64_t v17 = v18;
          if (v14 < v15 == v13 >> 14 >= v18 >> 14) {
            break;
          }
          ++v8;
          unint64_t v13 = v17;
          if (v8 >= v11)
          {
            uint64_t v8 = v11;
            break;
          }
        }
      }

      if (v14 < v15)
      {
        if (v8 < v12) {
          goto LABEL_126;
        }
        if (v12 < v8)
        {
          uint64_t v19 = 48 * v8;
          uint64_t v20 = 48 * v12;
          uint64_t v21 = v8;
          uint64_t v22 = v12;
          do
          {
            if (v22 != --v21)
            {
              if (!v9) {
                goto LABEL_132;
              }
              uint64_t v23 = (_OWORD *)(v9 + v20);
              uint64_t v24 = v9 + v19;
              uint64_t v25 = *(void *)(v9 + v20 + 16);
              uint64_t v26 = *(void *)(v9 + v20 + 24);
              __int128 v27 = *(_OWORD *)(v9 + v20);
              __int128 v28 = *(_OWORD *)(v9 + v20 + 32);
              __int128 v30 = *(_OWORD *)(v9 + v19 - 32);
              __int128 v29 = *(_OWORD *)(v9 + v19 - 16);
              _OWORD *v23 = *(_OWORD *)(v9 + v19 - 48);
              v23[1] = v30;
              v23[2] = v29;
              *(_OWORD *)(v24 - 48) = v27;
              *(void *)(v24 - 32) = v25;
              *(void *)(v24 - 2sub_10000AC58(v0 + 4) = v26;
              *(_OWORD *)(v24 - 1sub_10000AC58(v0 + 6) = v28;
            }

            ++v22;
            v19 -= 48LL;
            v20 += 48LL;
          }

          while (v22 < v21);
        }
      }
    }

    if (v8 < v11)
    {
      if (__OFSUB__(v8, v12)) {
        goto LABEL_123;
      }
      if (v8 - v12 < v5)
      {
        uint64_t v31 = v12 + v5;
        if (__OFADD__(v12, v5)) {
          goto LABEL_127;
        }
        if (v31 >= v11) {
          uint64_t v31 = v11;
        }
        if (v31 < v12) {
          goto LABEL_128;
        }
        if (v8 != v31)
        {
          uint64_t v32 = v100 + 48 * v8;
          do
          {
            unint64_t v33 = *(void *)(v9 + 48 * v8 + 32);
            uint64_t v34 = v12;
            uint64_t v35 = v32;
            do
            {
              if (v33 >> 14 <= *(void *)(v35 - 56) >> 14) {
                break;
              }
              if (!v9) {
                goto LABEL_130;
              }
              unint64_t v36 = (_OWORD *)(v35 - 40);
              id v37 = (_OWORD *)(v35 - 88);
              __int128 v39 = *(_OWORD *)(v35 - 72);
              __int128 v38 = *(_OWORD *)(v35 - 56);
              *(void *)(v35 - 48) = *(void *)v35;
              v35 -= 48LL;
              uint64_t v40 = *(void *)(v35 + 24);
              uint64_t v41 = *(void *)(v35 + 32);
              __int128 v42 = *(_OWORD *)(v35 + 8);
              *unint64_t v36 = *v37;
              v36[1] = v39;
              uint64_t v36[2] = v38;
              *(_OWORD *)(v35 - 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v42;
              *(void *)(v35 - 2sub_10000AC58(v0 + 4) = v40;
              *(void *)(v35 - 1sub_10000AC58(v0 + 6) = v41;
              *(void *)(v35 - 8) = v33;
              ++v34;
            }

            while (v8 != v34);
            ++v8;
            v32 += 48LL;
          }

          while (v8 != v31);
          uint64_t v8 = v31;
        }
      }
    }

    if (v8 < v12) {
      goto LABEL_122;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v10);
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_10008B000(0LL, *((void *)v10 + 2) + 1LL, 1, v10);
      id v10 = (char *)result;
    }

    unint64_t v44 = *((void *)v10 + 2);
    unint64_t v43 = *((void *)v10 + 3);
    unint64_t v45 = v44 + 1;
    uint64_t v9 = v106;
    if (v44 >= v43 >> 1)
    {
      uint64_t result = (uint64_t)sub_10008B000((char *)(v43 > 1), v44 + 1, 1, v10);
      uint64_t v9 = v106;
      id v10 = (char *)result;
    }

    *((void *)v10 + 2) = v45;
    uint64_t v46 = v10 + 32;
    uint64_t v47 = &v10[16 * v44 + 32];
    *(void *)uint64_t v47 = v12;
    *((void *)v47 + 1) = v8;
    if (v44) {
      break;
    }
    unint64_t v45 = 1LL;
LABEL_81:
    uint64_t v5 = v104;
    uint64_t v11 = v105;
    uint64_t result = 48LL;
    if (v8 >= v105) {
      goto LABEL_90;
    }
  }

  while (1)
  {
    unint64_t v48 = v45 - 1;
    if (v45 >= 4)
    {
      uint64_t v53 = &v46[2 * v45];
      uint64_t v54 = *(v53 - 8);
      uint64_t v55 = *(v53 - 7);
      BOOL v59 = __OFSUB__(v55, v54);
      uint64_t v56 = v55 - v54;
      if (v59) {
        goto LABEL_107;
      }
      uint64_t v58 = *(v53 - 6);
      uint64_t v57 = *(v53 - 5);
      BOOL v59 = __OFSUB__(v57, v58);
      uint64_t v51 = v57 - v58;
      char v52 = v59;
      if (v59) {
        goto LABEL_108;
      }
      unint64_t v60 = v45 - 2;
      uint64_t v61 = &v46[2 * v45 - 4];
      uint64_t v63 = *v61;
      uint64_t v62 = v61[1];
      BOOL v59 = __OFSUB__(v62, v63);
      uint64_t v64 = v62 - v63;
      if (v59) {
        goto LABEL_109;
      }
      BOOL v59 = __OFADD__(v51, v64);
      uint64_t v65 = v51 + v64;
      if (v59) {
        goto LABEL_111;
      }
      if (v65 >= v56)
      {
        uint64_t v83 = &v46[2 * v48];
        uint64_t v85 = *v83;
        uint64_t v84 = v83[1];
        BOOL v59 = __OFSUB__(v84, v85);
        uint64_t v86 = v84 - v85;
        if (v59) {
          goto LABEL_117;
        }
        BOOL v76 = v51 < v86;
        goto LABEL_70;
      }
    }

    else
    {
      if (v45 != 3)
      {
        uint64_t v77 = *((void *)v10 + 4);
        uint64_t v78 = *((void *)v10 + 5);
        BOOL v59 = __OFSUB__(v78, v77);
        uint64_t v70 = v78 - v77;
        char v71 = v59;
        goto LABEL_64;
      }

      uint64_t v50 = *((void *)v10 + 4);
      uint64_t v49 = *((void *)v10 + 5);
      BOOL v59 = __OFSUB__(v49, v50);
      uint64_t v51 = v49 - v50;
      char v52 = v59;
    }

    if ((v52 & 1) != 0) {
      goto LABEL_110;
    }
    unint64_t v60 = v45 - 2;
    uint64_t v66 = &v46[2 * v45 - 4];
    uint64_t v68 = *v66;
    uint64_t v67 = v66[1];
    BOOL v69 = __OFSUB__(v67, v68);
    uint64_t v70 = v67 - v68;
    char v71 = v69;
    if (v69) {
      goto LABEL_112;
    }
    unint64_t v72 = &v46[2 * v48];
    uint64_t v74 = *v72;
    uint64_t v73 = v72[1];
    BOOL v59 = __OFSUB__(v73, v74);
    uint64_t v75 = v73 - v74;
    if (v59) {
      goto LABEL_114;
    }
    if (__OFADD__(v70, v75)) {
      goto LABEL_116;
    }
    if (v70 + v75 >= v51)
    {
      BOOL v76 = v51 < v75;
LABEL_70:
      if (v76) {
        unint64_t v48 = v60;
      }
      goto LABEL_72;
    }

LABEL_64:
    if ((v71 & 1) != 0) {
      goto LABEL_113;
    }
    uint64_t v79 = &v46[2 * v48];
    uint64_t v81 = *v79;
    uint64_t v80 = v79[1];
    BOOL v59 = __OFSUB__(v80, v81);
    uint64_t v82 = v80 - v81;
    if (v59) {
      goto LABEL_115;
    }
    if (v82 < v70) {
      goto LABEL_81;
    }
LABEL_72:
    unint64_t v87 = v48 - 1;
    if (v48 - 1 >= v45)
    {
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }

    if (!v9) {
      goto LABEL_131;
    }
    unint64_t v88 = &v46[2 * v87];
    uint64_t v89 = *v88;
    unint64_t v90 = &v46[2 * v48];
    uint64_t v91 = v90[1];
    uint64_t result = sub_100026724((char *)(v9 + 48 * *v88), (char *)(v9 + 48LL * *v90), v9 + 48 * v91, v107);
    if (v108) {
      break;
    }
    if (v91 < v89) {
      goto LABEL_104;
    }
    if (v48 > *((void *)v10 + 2)) {
      goto LABEL_105;
    }
    *unint64_t v88 = v89;
    v46[2 * v87 + 1] = v91;
    unint64_t v92 = *((void *)v10 + 2);
    if (v48 >= v92) {
      goto LABEL_106;
    }
    unint64_t v45 = v92 - 1;
    uint64_t result = (uint64_t)memmove(&v46[2 * v48], v90 + 2, 16 * (v92 - 1 - v48));
    *((void *)v10 + 2) = v92 - 1;
    uint64_t v9 = v106;
    if (v92 <= 2) {
      goto LABEL_81;
    }
  }

  swift_bridgeObjectRelease();
  uint64_t v53 = type metadata accessor for FrameworkRecord(0LL);
  uint64_t v107 = static FrameworkRecord.enumerated.getter();
  uint64_t v108 = 0LL;
  os_log_type_t v109 = *(void *)(v107 + 64);
  uint64_t v148 = (char *)(v107 + 64);
  id v156 = v107;
  uint64_t v110 = 1LL << *(_BYTE *)(v107 + 32);
  uint64_t v111 = -1LL;
  if (v110 < 64) {
    uint64_t v111 = ~(-1LL << v110);
  }
  uint64_t v112 = v111 & v109;
  uint64_t v152 = (unint64_t)(v110 + 63) >> 6;
  uint64_t v147 = v152 - 1;
  uint64_t v113 = (uint64_t *)&unk_1001333A8;
  uint64_t v114 = type metadata accessor for LSLinkBundleRecord;
  os_log_type_t v115 = (uint64_t)v149;
  uint64_t v116 = (uint64_t)v150;
  uint64_t v117 = (uint64_t)v155;
  while (2)
  {
    uint64_t v161 = v54;
    if (v112)
    {
      uint64_t v118 = __clz(__rbit64(v112));
      v112 &= v112 - 1;
      uint64_t v119 = v118 | (v108 << 6);
      goto LABEL_69;
    }

    uint64_t v126 = v108 + 1;
    if (__OFADD__(v108, 1LL)) {
      goto LABEL_104;
    }
    if (v126 >= v152)
    {
LABEL_78:
      unint64_t v128 = sub_100008DB0(v113);
      sub_100009E60(v117, 1LL, 1LL, v128);
      uint64_t v112 = 0LL;
      goto LABEL_79;
    }

    id v127 = *(void *)&v148[8 * v126];
    if (v127)
    {
LABEL_73:
      uint64_t v112 = (v127 - 1) & v127;
      uint64_t v119 = __clz(__rbit64(v127)) + (v126 << 6);
      uint64_t v108 = v126;
LABEL_69:
      uint64_t v53 = v156;
      uint64_t v120 = *(void *)(v156 + 48);
      uint64_t v121 = type metadata accessor for URL(0LL);
      uint64_t v117 = (uint64_t)v155;
      (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v121 - 8) + 16LL))( v155,  v120 + *(void *)(*(void *)(v121 - 8) + 72LL) * v119,  v121);
      uint64_t v122 = *(void *)(v53 + 56);
      id v123 = sub_100008DB0(v113);
      uint64_t v124 = *(void **)(v122 + 8 * v119);
      *(void *)(v117 + *(int *)(v123 + swift_bridgeObjectRelease(*(void *)(v0 + 48)) = v124;
      sub_100009E60(v117, 0LL, 1LL, v123);
      uint64_t v125 = v124;
      os_log_type_t v115 = (uint64_t)v149;
      uint64_t v116 = (uint64_t)v150;
LABEL_79:
      sub_100026C8C(v117, v116, &qword_100133388);
      unint64_t v129 = sub_100008DB0(v113);
      if (sub_100009E6C(v116, 1LL, v129) == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_release();
        return;
      }

      uint64_t v130 = v108;
      uint64_t v131 = v114;
      uint64_t v132 = *(id *)(v116 + *(int *)(v129 + 48));
      sub_1000ACC28();
      uint64_t v133 = v165;
      if (sub_100009E6C(v115, 1LL, v165) == 1)
      {

        sub_100026E14(v115, &qword_100133390);
        uint64_t v114 = v131;
      }

      else
      {
        uint64_t v53 = (uint64_t)v113;
        uint64_t v134 = v146;
        sub_100084248(v115, v146, v131);
        uint64_t v163 = v133;
        uint64_t v114 = v131;
        uint64_t v164 = &off_100126180;
        uint64_t v135 = sub_10001AFA8(v162);
        sub_100084214(v134, (uint64_t)v135, v131);
        uint64_t v136 = v161;
        sub_100095114(v162, v157, v158, v159, v160);
        uint64_t v161 = v136;
        if (v136)
        {

          sub_100058D54(v134, type metadata accessor for LSLinkBundleRecord);
          swift_release();
          sub_10000AC58(v162);
          uint64_t v139 = type metadata accessor for URL(0LL);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v139 - 8) + 8LL))(v116, v139);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return;
        }

        sub_100058D54(v134, v131);

        sub_10000AC58(v162);
        uint64_t v113 = (uint64_t *)v53;
      }

      uint64_t v137 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v137 - 8) + 8LL))(v116, v137);
      uint64_t v117 = (uint64_t)v155;
      uint64_t v108 = v130;
      uint64_t v54 = v161;
      continue;
    }

    break;
  }

  v108 += 2LL;
  if (v126 + 1 >= v152)
  {
    uint64_t v108 = v126;
    goto LABEL_78;
  }

  id v127 = *(void *)&v148[8 * v108];
  if (v127)
  {
    ++v126;
    goto LABEL_73;
  }

  if (v126 + 2 >= v152) {
    goto LABEL_78;
  }
  id v127 = *(void *)&v148[8 * v126 + 16];
  if (v127)
  {
    v126 += 2LL;
    goto LABEL_73;
  }

  uint64_t v138 = v126 + 3;
  if (v126 + 3 >= v152)
  {
    uint64_t v108 = v126 + 2;
    goto LABEL_78;
  }

  id v127 = *(void *)&v148[8 * v138];
  if (v127)
  {
    v126 += 3LL;
    goto LABEL_73;
  }

  while (1)
  {
    uint64_t v126 = v138 + 1;
    if (__OFADD__(v138, 1LL)) {
      break;
    }
    if (v126 >= v152)
    {
      uint64_t v108 = v147;
      goto LABEL_78;
    }

    id v127 = *(void *)&v148[8 * v126];
    ++v138;
    if (v127) {
      goto LABEL_73;
    }
  }

  __break(1u);
}

LABEL_86:
  uint64_t result = swift_bridgeObjectRelease();
  if (v105 < -1) {
    goto LABEL_125;
  }
  *(void *)(v103 + 1sub_10000AC58(v0 + 6) = 0LL;
  return swift_bridgeObjectRelease();
}

    if ((v69 & 1) != 0) {
      goto LABEL_153;
    }
    uint64_t v77 = &v44[16 * v46];
    uint64_t v79 = *(void *)v77;
    uint64_t v78 = *((void *)v77 + 1);
    uint64_t v57 = __OFSUB__(v78, v79);
    uint64_t v80 = v78 - v79;
    if (v57) {
      goto LABEL_155;
    }
    if (v80 < v68) {
      goto LABEL_103;
    }
LABEL_94:
    uint64_t v85 = v46 - 1;
    if (v46 - 1 >= v43)
    {
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
      goto LABEL_158;
    }

    if (!v9) {
      goto LABEL_171;
    }
    uint64_t v86 = &v44[16 * v85];
    unint64_t v87 = *(void *)v86;
    unint64_t v88 = &v44[16 * v46];
    uint64_t v89 = *((void *)v88 + 1);
    sub_100075130((char *)(v9 + 32LL * *(void *)v86), (char *)(v9 + 32LL * *(void *)v88), v9 + 32 * v89, v118);
    if (v1) {
      break;
    }
    if (v89 < v87) {
      goto LABEL_144;
    }
    if (v46 > *((void *)v119 + 2)) {
      goto LABEL_145;
    }
    *(void *)uint64_t v86 = v87;
    *(void *)&v44[16 * v85 + 8] = v89;
    unint64_t v90 = *((void *)v119 + 2);
    if (v46 >= v90) {
      goto LABEL_146;
    }
    __int128 v39 = v119;
    unint64_t v43 = v90 - 1;
    memmove(&v44[16 * v46], v88 + 16, 16 * (v90 - 1 - v46));
    *((void *)v119 + 2) = v90 - 1;
    if (v90 <= 2) {
      goto LABEL_103;
    }
  }

        uint64_t v31 = v186;
        uint64_t v8 = v185;
        goto LABEL_87;
      }
    }

    else
    {
      uint64_t v8 = *(void *)((v168 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain();
      uint64_t v23 = v8;
      if (v8) {
        goto LABEL_14;
      }
    }

    break;
  }

uint64_t sub_100026690(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 48 * a3 + 40;
    while (2)
    {
      unint64_t v6 = *(void *)(v4 + 48 * a3 + 32);
      uint64_t v7 = result;
      uint64_t v8 = v5;
      do
      {
        if (v6 >> 14 <= *(void *)(v8 - 56) >> 14) {
          break;
        }
        if (!v4)
        {
          __break(1u);
          return result;
        }

        uint64_t v9 = (_OWORD *)(v8 - 40);
        id v10 = (_OWORD *)(v8 - 88);
        __int128 v12 = *(_OWORD *)(v8 - 72);
        __int128 v11 = *(_OWORD *)(v8 - 56);
        *(void *)(v8 - 48) = *(void *)v8;
        v8 -= 48LL;
        uint64_t v14 = *(void *)(v8 + 24);
        uint64_t v13 = *(void *)(v8 + 32);
        __int128 v15 = *(_OWORD *)(v8 + 8);
        _OWORD *v9 = *v10;
        v9[1] = v12;
        v9[2] = v11;
        *(_OWORD *)(v8 - 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v15;
        *(void *)(v8 - 2sub_10000AC58(v0 + 4) = v14;
        *(void *)(v8 - 1sub_10000AC58(v0 + 6) = v13;
        *(void *)(v8 - 8) = v6;
        ++v7;
      }

      while (a3 != v7);
      ++a3;
      v5 += 48LL;
      if (a3 != a2) {
        continue;
      }
      break;
    }
  }

  return result;
}

uint64_t sub_100026724(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  unint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 48;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 48;
  if (v9 >= v11)
  {
    sub_100015CB0(a2, (uint64_t)(a3 - (void)a2) / 48, a4);
    unint64_t v12 = (unint64_t)&v4[48 * v11];
    if (v7 >= v6 || v10 < 48) {
      goto LABEL_41;
    }
    uint64_t v20 = (char *)(a3 - 48);
    while (1)
    {
      uint64_t v21 = v20 + 48;
      if (*((void *)v6 - 2) >> 14 >= *(void *)(v12 - 16) >> 14)
      {
        uint64_t v22 = (char *)(v12 - 48);
        BOOL v24 = v21 != (char *)v12 || (unint64_t)v20 >= v12;
        v12 -= 48LL;
        if (!v24) {
          goto LABEL_37;
        }
      }

      else
      {
        uint64_t v22 = v6 - 48;
        BOOL v23 = v21 != v6 || v20 >= v6;
        v6 -= 48;
        if (!v23) {
          goto LABEL_37;
        }
      }

      __int128 v25 = *(_OWORD *)v22;
      __int128 v26 = *((_OWORD *)v22 + 2);
      *((_OWORD *)v20 + 1) = *((_OWORD *)v22 + 1);
      *((_OWORD *)v20 + 2) = v26;
      *(_OWORD *)uint64_t v20 = v25;
LABEL_37:
      v20 -= 48;
    }
  }

  sub_100015CB0(a1, (a2 - a1) / 48, a4);
  unint64_t v12 = (unint64_t)&v4[48 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 48)
  {
    do
    {
      if (*((void *)v4 + 4) >> 14 >= *((void *)v6 + 4) >> 14)
      {
        BOOL v13 = v7 == v4;
        uint64_t v14 = v4;
        v4 += 48;
        if (v13 && v7 < v4) {
          goto LABEL_16;
        }
      }

      else
      {
        BOOL v13 = v7 == v6;
        uint64_t v14 = v6;
        v6 += 48;
        if (v13 && v7 < v6) {
          goto LABEL_16;
        }
      }

      __int128 v17 = *(_OWORD *)v14;
      __int128 v18 = *((_OWORD *)v14 + 2);
      *((_OWORD *)v7 + 1) = *((_OWORD *)v14 + 1);
      *((_OWORD *)v7 + 2) = v18;
      *(_OWORD *)uint64_t v7 = v17;
LABEL_16:
      v7 += 48;
    }

    while ((unint64_t)v4 < v12 && (unint64_t)v6 < a3);
  }

  unint64_t v6 = v7;
LABEL_41:
  sub_100015CB0(v4, (uint64_t)(v12 - (void)v4) / 48, v6);
  return 1LL;
}

uint64_t sub_1000268CC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  Hasher.init(_seed:)(v45, *(void *)(*v3 + 40));
  String.hash(into:)(v45, a1, a2);
  Swift::Int v9 = Hasher._finalize()();
  uint64_t v10 = -1LL << *(_BYTE *)(v8 + 32);
  unint64_t v11 = v9 & ~v10;
  uint64_t v12 = v8 + 56;
  if (((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0)
  {
    uint64_t v13 = *(void *)(v8 + 48);
    uint64_t v14 = (void *)(v13 + 16 * v11);
    uint64_t v15 = v14[1];
    BOOL v16 = *v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) != 0)
    {
LABEL_7:
      uint64_t v17 = 0LL;
      int v18 = 1;
      goto LABEL_18;
    }

    uint64_t v19 = ~v10;
    unint64_t v11 = (v11 + 1) & ~v10;
    if (((*(void *)(v12 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0)
    {
      uint64_t v17 = 1LL;
      while (1)
      {
        uint64_t v20 = (void *)(v13 + 16 * v11);
        uint64_t v21 = v20[1];
        BOOL v22 = *v20 == a1 && v21 == a2;
        if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, a1, a2, 0LL) & 1) != 0) {
          goto LABEL_7;
        }
        unint64_t v11 = (v11 + 1) & v19;
        if (((*(void *)(v12 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0)
        {
          int v18 = 0;
          goto LABEL_18;
        }
      }
    }
  }

  int v18 = 0;
  uint64_t v17 = 1LL;
LABEL_18:
  uint64_t v23 = *(void *)(v8 + 16);
  uint64_t v24 = v23 + v17;
  if (__OFADD__(v23, v17))
  {
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v25 = *(void *)(v8 + 24);
  if (v25 >= v24 && (a3 & 1) != 0)
  {
    if (!v18) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }

  if ((a3 & 1) != 0)
  {
    sub_100018CA0();
  }

  else
  {
    if (v25 >= v24)
    {
      sub_100019D44();
      if (!v18)
      {
LABEL_46:
        uint64_t v40 = *v4;
        *(void *)(*v4 + 8 * (v11 >> 6) + 56) |= 1LL << v11;
        uint64_t v41 = (uint64_t *)(*(void *)(v40 + 48) + 16 * v11);
        *uint64_t v41 = a1;
        v41[1] = a2;
        uint64_t v42 = *(void *)(v40 + 16);
        BOOL v43 = __OFADD__(v42, 1LL);
        uint64_t v44 = v42 + 1;
        if (!v43)
        {
          uint64_t result = 0LL;
          *(void *)(v40 + 1sub_10000AC58(v0 + 6) = v44;
          return result;
        }

        goto LABEL_49;
      }

LABEL_45:
    if ((v18 & 1) == 0) {
      goto LABEL_46;
    }
    goto LABEL_50;
  }

    if (v8 >= v3) {
      goto LABEL_54;
    }
    if (__OFSUB__(v8, v10)) {
      goto LABEL_163;
    }
    if (v8 - v10 >= v115) {
      goto LABEL_54;
    }
    if (__OFADD__(v10, v115)) {
      goto LABEL_166;
    }
    if (v10 + v115 >= v3) {
      uint64_t v38 = v3;
    }
    else {
      uint64_t v38 = v10 + v115;
    }
    if (v38 < v10) {
      goto LABEL_167;
    }
    if (v8 == v38)
    {
LABEL_54:
      BOOL v39 = v119;
    }

    else
    {
      uint64_t v91 = (unint64_t *)(v112 + 32 * v8);
      BOOL v39 = v119;
      do
      {
        unint64_t v92 = (unint64_t *)(v9 + 32 * v8);
        uint64_t v93 = *v92;
        unint64_t v94 = v92[1];
        uint64_t v95 = v92[2];
        uint64_t v96 = v92[3];
        uint64_t v97 = v10;
        uint64_t v98 = v91;
        do
        {
          uint64_t v101 = v95 == v98[2] && v96 == v98[3] && v93 >> 16 == *v98 >> 16 && v94 >> 16 == v98[1] >> 16;
          if (v101 || (_stringCompareInternal(_:_:_:_:expecting:)(v95) & 1) == 0) {
            break;
          }
          if (!v9) {
            goto LABEL_170;
          }
          id v102 = v98 + 4;
          uint64_t v93 = v98[4];
          unint64_t v94 = v98[5];
          uint64_t v95 = v98[6];
          uint64_t v96 = v98[7];
          uint64_t v103 = *(_OWORD *)v98;
          uint64_t v104 = *((_OWORD *)v98 + 1);
          *uint64_t v98 = v93;
          v98[1] = v94;
          v98[2] = v95;
          v98[3] = v96;
          v98 -= 4;
          ++v97;
          *id v102 = v103;
          v102[1] = v104;
        }

        while (v8 != v97);
        ++v8;
        v91 += 4;
      }

      while (v8 != v38);
      uint64_t v8 = v38;
    }

    if (v8 < v10) {
      goto LABEL_162;
    }
    uint64_t v40 = v10;
    if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0) {
      BOOL v39 = sub_10008B000(0LL, *((void *)v39 + 2) + 1LL, 1, v39);
    }
    uint64_t v42 = *((void *)v39 + 2);
    uint64_t v41 = *((void *)v39 + 3);
    BOOL v43 = v42 + 1;
    if (v42 >= v41 >> 1) {
      BOOL v39 = sub_10008B000((char *)(v41 > 1), v42 + 1, 1, v39);
    }
    *((void *)v39 + 2) = v43;
    uint64_t v44 = v39 + 32;
    unint64_t v45 = &v39[16 * v42 + 32];
    *(void *)unint64_t v45 = v40;
    *((void *)v45 + 1) = v8;
    uint64_t v119 = v39;
    if (v42) {
      break;
    }
    BOOL v43 = 1LL;
LABEL_103:
    Swift::Int v3 = v117;
    if (v8 >= v117) {
      goto LABEL_130;
    }
  }

  while (1)
  {
    uint64_t v46 = v43 - 1;
    if (v43 >= 4)
    {
      uint64_t v51 = &v44[16 * v43];
      char v52 = *((void *)v51 - 8);
      uint64_t v53 = *((void *)v51 - 7);
      uint64_t v57 = __OFSUB__(v53, v52);
      uint64_t v54 = v53 - v52;
      if (v57) {
        goto LABEL_147;
      }
      uint64_t v56 = *((void *)v51 - 6);
      uint64_t v55 = *((void *)v51 - 5);
      uint64_t v57 = __OFSUB__(v55, v56);
      uint64_t v49 = v55 - v56;
      uint64_t v50 = v57;
      if (v57) {
        goto LABEL_148;
      }
      uint64_t v58 = v43 - 2;
      BOOL v59 = &v44[16 * v43 - 32];
      uint64_t v61 = *(void *)v59;
      unint64_t v60 = *((void *)v59 + 1);
      uint64_t v57 = __OFSUB__(v60, v61);
      uint64_t v62 = v60 - v61;
      if (v57) {
        goto LABEL_149;
      }
      uint64_t v57 = __OFADD__(v49, v62);
      uint64_t v63 = v49 + v62;
      if (v57) {
        goto LABEL_151;
      }
      if (v63 >= v54)
      {
        uint64_t v81 = &v44[16 * v46];
        uint64_t v83 = *(void *)v81;
        uint64_t v82 = *((void *)v81 + 1);
        uint64_t v57 = __OFSUB__(v82, v83);
        uint64_t v84 = v82 - v83;
        if (v57) {
          goto LABEL_157;
        }
        uint64_t v74 = v49 < v84;
        goto LABEL_92;
      }
    }

    else
    {
      if (v43 != 3)
      {
        uint64_t v75 = *((void *)v39 + 4);
        BOOL v76 = *((void *)v39 + 5);
        uint64_t v57 = __OFSUB__(v76, v75);
        uint64_t v68 = v76 - v75;
        BOOL v69 = v57;
        goto LABEL_86;
      }

      unint64_t v48 = *((void *)v39 + 4);
      uint64_t v47 = *((void *)v39 + 5);
      uint64_t v57 = __OFSUB__(v47, v48);
      uint64_t v49 = v47 - v48;
      uint64_t v50 = v57;
    }

    if ((v50 & 1) != 0) {
      goto LABEL_150;
    }
    uint64_t v58 = v43 - 2;
    uint64_t v64 = &v44[16 * v43 - 32];
    uint64_t v66 = *(void *)v64;
    uint64_t v65 = *((void *)v64 + 1);
    uint64_t v67 = __OFSUB__(v65, v66);
    uint64_t v68 = v65 - v66;
    BOOL v69 = v67;
    if (v67) {
      goto LABEL_152;
    }
    uint64_t v70 = &v44[16 * v46];
    unint64_t v72 = *(void *)v70;
    char v71 = *((void *)v70 + 1);
    uint64_t v57 = __OFSUB__(v71, v72);
    uint64_t v73 = v71 - v72;
    if (v57) {
      goto LABEL_154;
    }
    if (__OFADD__(v68, v73)) {
      goto LABEL_156;
    }
    if (v68 + v73 >= v49)
    {
      uint64_t v74 = v49 < v73;
LABEL_92:
      if (v74) {
        uint64_t v46 = v58;
      }
      goto LABEL_94;
    }

uint64_t sub_100026BAC(void *a1, SEL *a2, unint64_t *a3, void *a4)
{
  id v6 = [a1 *a2];
  if (!v6) {
    return 0LL;
  }
  uint64_t v7 = v6;
  uint64_t v8 = sub_10000A1A0(0LL, a3, a4);
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

  return v9;
}

id sub_100026C1C(uint64_t a1, void *a2)
{
  return sub_1000252D4( a1,  a2,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  *(void **)(v2 + 48),  *(void *)(v2 + 56));
}

void sub_100026C2C(void **a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_100026C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000234F8(a1, a2, a3, *(void **)(v3 + 16));
}

unint64_t sub_100026C50()
{
  unint64_t result = qword_100131270;
  if (!qword_100131270)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100131270);
  }

  return result;
}

void sub_100026C8C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_100027F0C(a1, a2, a3);
  sub_10002807C(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_10000ADA8();
}

void sub_100026CB8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_100027F0C(a1, a2, a3);
  sub_10002807C(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  sub_10000ADA8();
}

unint64_t sub_100026CE4()
{
  unint64_t result = qword_100131290;
  if (!qword_100131290)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100131290);
  }

  return result;
}

unint64_t sub_100026D20()
{
  unint64_t result = qword_1001312B0;
  if (!qword_1001312B0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_1001312B0);
  }

  return result;
}

unint64_t sub_100026D5C()
{
  unint64_t result = qword_1001312C8;
  if (!qword_1001312C8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1001312C8);
  }

  return result;
}

void sub_100026D98(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (!*a1)
  {
    uint64_t v5 = sub_100008E58(a2);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }

  sub_10000ADA8();
}

unint64_t sub_100026DD4()
{
  unint64_t result = qword_1001312F0;
  if (!qword_1001312F0)
  {
    uint64_t v1 = type metadata accessor for CharacterClass(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CharacterClass, v1);
    atomic_store(result, (unint64_t *)&qword_1001312F0);
  }

  return result;
}

void sub_100026E14(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = sub_100008DB0(a2);
  sub_100027ECC(v2);
  sub_10000ADA8();
}

void *sub_100026E3C(void *a1)
{
  return a1;
}

unint64_t sub_100026E68()
{
  unint64_t result = qword_100131300;
  if (!qword_100131300)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F5AC4, &unk_1001234D8);
    atomic_store(result, (unint64_t *)&qword_100131300);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for Registry.IndexingQueue.Change.ChangeError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t sub_100026EF8(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(vsub_10000AC58(v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100026F38 + 4 * asc_1000F5810[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100026F58 + 4 * byte_1000F5815[v4]))();
  }
}

_BYTE *sub_100026F38(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100026F58(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100026F60(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100026F68(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100026F70(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100026F78(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t sub_100026F84()
{
  return 0LL;
}

void type metadata accessor for AppShortcutInterpolator.Error()
{
}

uint64_t destroy for AppShortcutInterpolator.Builder.RecordIdentifier(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

void *initializeWithCopy for AppShortcutInterpolator.Builder.RecordIdentifier(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for AppShortcutInterpolator.Builder.RecordIdentifier(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for AppShortcutInterpolator.Builder.RecordIdentifier(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for AppShortcutInterpolator.Builder.RecordIdentifier(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppShortcutInterpolator.Builder.RecordIdentifier(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppShortcutInterpolator.Builder.RecordIdentifier( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 1sub_10000AC58(v0 + 6) = 0LL;
    *(void *)(result + 2sub_10000AC58(v0 + 4) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AppShortcutInterpolator.Builder.RecordIdentifier()
{
  return &type metadata for AppShortcutInterpolator.Builder.RecordIdentifier;
}

uint64_t destroy for AssistantIntentPhraseInterpolator.ApplicationPlaceholder(void *a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AssistantIntentPhraseInterpolator.ApplicationPlaceholder( uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 2sub_10000AC58(v0 + 4) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *assignWithCopy for AssistantIntentPhraseInterpolator.ApplicationPlaceholder(void *a1, void *a2)
{
  a1[5] = a2[5];
  uint64_t v4 = a2[6];
  uint64_t v5 = a1[6];
  a1[6] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

void *sub_1000271FC(void *result, void *a2)
{
  if (result != a2)
  {
    __int128 v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        __n128 result = (void *)swift_release(v11);
        *__int128 v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          *__int128 v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          *__int128 v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

__n128 initializeWithTake for AssistantIntentPhraseInterpolator.ApplicationPlaceholder( uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 1sub_10000AC58(v0 + 6) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AssistantIntentPhraseInterpolator.ApplicationPlaceholder(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1sub_10000AC58(v0 + 6) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for AssistantIntentPhraseInterpolator.ApplicationPlaceholder( uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AssistantIntentPhraseInterpolator.ApplicationPlaceholder( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = 0u;
    *(_OWORD *)(result + 2sub_10000AC58(v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 5sub_10000AC58(v0 + 6) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 2sub_10000AC58(v0 + 4) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 5sub_10000AC58(v0 + 6) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for AppShortcutInterpolator.ApplicationPlaceholder()
{
}

char *sub_100027460(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v31 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v31 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v31);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Logger(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    __int128 v11 = *(_OWORD *)&a2[v8 + 24];
    *(_OWORD *)&a1[v8 + 24] = v11;
    (**(void (***)(char *, char *))(v11 - 8))(&a1[v8], &a2[v8]);
    uint64_t v12 = *((void *)v10 + 6);
    *((void *)v9 + 5) = *((void *)v10 + 5);
    *((void *)v9 + sub_10000AC58(v0 + 6) = v12;
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = &a1[v13];
    BOOL v16 = &a2[v13];
    uint64_t v17 = *((void *)v16 + 1);
    *(void *)uint64_t v15 = *(void *)v16;
    *((void *)v15 + 1) = v17;
    uint64_t v18 = *(void *)&a2[v14];
    *(void *)&a1[v14] = v18;
    uint64_t v19 = a3[8];
    uint64_t v20 = a3[9];
    uint64_t v21 = *(void *)&a2[v19];
    *(void *)&a1[v19] = v21;
    BOOL v22 = &a1[v20];
    uint64_t v23 = &a2[v20];
    __int128 v24 = *(_OWORD *)&a2[v20 + 24];
    *(_OWORD *)&a1[v20 + 24] = v24;
    uint64_t v25 = v24;
    uint64_t v26 = **(void (***)(char *, char *, uint64_t))(v24 - 8);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v21);
    v26(v22, v23, v25);
    uint64_t v27 = a3[11];
    *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
    uint64_t v28 = &a1[v27];
    uint64_t v29 = &a2[v27];
    uint64_t v30 = *((void *)v29 + 1);
    *(void *)uint64_t v28 = *(void *)v29;
    *((void *)v28 + 1) = v30;
    swift_bridgeObjectRetain(v30);
  }

  return a1;
}

uint64_t sub_1000275B8(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  int v5 = (void *)(a1 + a2[5]);
  sub_10000AC58(v5);
  swift_bridgeObjectRelease(v5[6]);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[7]));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[8]));
  sub_10000AC58((void *)(a1 + a2[9]));
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[11] + 8));
}

uint64_t sub_100027654(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  __int128 v10 = *(_OWORD *)(a2 + v7 + 24);
  *(_OWORD *)(a1 + v7 + 2sub_10000AC58(v0 + 4) = v10;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + v7, a2 + v7);
  uint64_t v11 = *(void *)(v9 + 48);
  *(void *)(v8 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = *(void *)(v9 + 40);
  *(void *)(v8 + 48) = v11;
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v12);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = *(void *)(a2 + v13);
  *(void *)(a1 + v13) = v17;
  uint64_t v18 = a3[8];
  uint64_t v19 = a3[9];
  uint64_t v20 = *(void *)(a2 + v18);
  *(void *)(a1 + v18) = v20;
  uint64_t v21 = a1 + v19;
  uint64_t v22 = a2 + v19;
  __int128 v23 = *(_OWORD *)(a2 + v19 + 24);
  *(_OWORD *)(a1 + v19 + 2sub_10000AC58(v0 + 4) = v23;
  uint64_t v24 = v23;
  uint64_t v25 = **(void (***)(uint64_t, uint64_t, uint64_t))(v23 - 8);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v20);
  v25(v21, v22, v24);
  uint64_t v26 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (void *)(a2 + v26);
  uint64_t v29 = v28[1];
  void *v27 = *v28;
  v27[1] = v29;
  swift_bridgeObjectRetain(v29);
  return a1;
}

uint64_t sub_100027780(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  sub_1000271FC((void *)(a1 + v7), (void *)(a2 + v7));
  *(void *)(v8 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = *(void *)(v9 + 40);
  uint64_t v10 = *(void *)(v9 + 48);
  uint64_t v11 = *(void *)(v8 + 48);
  *(void *)(v8 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  *uint64_t v13 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = a3[7];
  uint64_t v18 = *(void *)(a2 + v17);
  uint64_t v19 = *(void *)(a1 + v17);
  *(void *)(a1 + v1sub_10000AC58(v0 + 7) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = a3[8];
  uint64_t v21 = *(void *)(a2 + v20);
  uint64_t v22 = *(void *)(a1 + v20);
  *(void *)(a1 + v2sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  sub_1000271FC((void *)(a1 + a3[9]), (void *)(a2 + a3[9]));
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  uint64_t v23 = a3[11];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  void *v24 = *v25;
  uint64_t v26 = v25[1];
  uint64_t v27 = v24[1];
  v24[1] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  return a1;
}

uint64_t sub_1000278BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  __int128 v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 1sub_10000AC58(v0 + 6) = v11;
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(void *)(v9 + 48) = *(void *)(v10 + 48);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v12 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  uint64_t v13 = a3[9];
  uint64_t v14 = a3[10];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = (__int128 *)(a2 + v13);
  __int128 v17 = *v16;
  __int128 v18 = v16[1];
  *(void *)(v15 + 32) = *((void *)v16 + 4);
  *(_OWORD *)uint64_t v15 = v17;
  *(_OWORD *)(v15 + 1sub_10000AC58(v0 + 6) = v18;
  *(void *)(a1 + v1sub_10000AC58(v0 + 4) = *(void *)(a2 + v14);
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_10002797C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  sub_10000AC58((void *)(a1 + v7));
  __int128 v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 1sub_10000AC58(v0 + 6) = v10;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  uint64_t v11 = *(void *)(v8 + 48);
  *(void *)(v8 + 48) = *(void *)(v9 + 48);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v17 = v13[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = a3[7];
  uint64_t v19 = *(void *)(a1 + v18);
  *(void *)(a1 + v18) = *(void *)(a2 + v18);
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = a3[8];
  uint64_t v21 = *(void *)(a1 + v20);
  *(void *)(a1 + v2sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = *(void *)(a2 + v20);
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = a3[9];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  sub_10000AC58((void *)(a1 + v22));
  __int128 v25 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 1sub_10000AC58(v0 + 6) = v25;
  *(void *)(v23 + 32) = *(void *)(v24 + 32);
  uint64_t v26 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (uint64_t *)(a2 + v26);
  uint64_t v30 = *v28;
  uint64_t v29 = v28[1];
  uint64_t v31 = v27[1];
  void *v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease(v31);
  return a1;
}

uint64_t sub_100027A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100027AA0);
}

void sub_100027AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100027FB8();
  uint64_t v5 = type metadata accessor for Logger(v4);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84LL) == (_DWORD)a2) {
    sub_100009E6C(v2, a2, v5);
  }
  else {
    sub_10000AF74();
  }
}

uint64_t sub_100027B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100027B1C);
}

uint64_t sub_100027B1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Logger(0LL);
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3) {
    return sub_100009E60(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20) + 2sub_10000AC58(v0 + 4) = (a2 - 1);
  return result;
}

uint64_t sub_100027B94(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "8";
    v4[2] = &unk_1000F5938;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[5] = &unk_1000F5950;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[7] = &unk_1000F5968;
    swift_initStructMetadata(a1, 256LL, 8LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void sub_100027C44(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 1sub_10000AC58(v0 + 6) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  sub_10000ADA8();
}

uint64_t sub_100027C74(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 1sub_10000AC58(v0 + 6) = *(_BYTE *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for AppShortcutIdentifierExtractionError(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t sub_100027CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 1sub_10000AC58(v0 + 6) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t sub_100027D18(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 17))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_100027D58(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 1sub_10000AC58(v0 + 6) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 1sub_10000AC58(v0 + 7) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 1sub_10000AC58(v0 + 7) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for LocalizedAlternativeAppName()
{
}

unint64_t sub_100027DA8()
{
  unint64_t result = qword_1001313B0;
  if (!qword_1001313B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F59AC, &type metadata for AppShortcutInterpolator.Builder.RecordIdentifier);
    atomic_store(result, (unint64_t *)&qword_1001313B0);
  }

  return result;
}

unint64_t sub_100027DEC()
{
  unint64_t result = qword_1001313B8;
  if (!qword_1001313B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F5A9C, &unk_1001234D8);
    atomic_store(result, (unint64_t *)&qword_1001313B8);
  }

  return result;
}

uint64_t sub_100027E2C(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100027E40(uint64_t a1)
{
  *(void *)(v3 - 9sub_10000AC58(v0 + 6) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 96, v3 - 88, v2, v1);
}

uint64_t sub_100027E5C(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 3LL);
}

BOOL sub_100027E64(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

BOOL sub_100027E84(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_100027E8C@<X0>(uint64_t a1@<X1>, unint64_t a2@<X8>)
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a2 > 1, a1, 1LL);
}

uint64_t sub_100027E9C()
{
  return type metadata accessor for AppShortcutInterpolator.Builder(0LL);
}

  ;
}

uint64_t sub_100027EC0()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 280));
}

uint64_t sub_100027ECC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

void sub_100027EE0(uint64_t a1, uint64_t *a2)
{
}

void sub_100027EEC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

void sub_100027F00()
{
}

uint64_t sub_100027F0C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100008DB0(a3);
}

uint64_t sub_100027F1C(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v2, v3, 0LL);
}

  ;
}

void sub_100027F38()
{
}

uint64_t sub_100027F40()
{
  return swift_arrayDestroy(v0, 1LL);
}

void sub_100027F50()
{
  uint64_t v3 = (void *)(*(void *)(v1 + 56) + 16 * v0);
  uint64_t v4 = *(void *)(v2 - 192);
  *uint64_t v3 = *(void *)(v2 - 200);
  v3[1] = v4;
}

uint64_t sub_100027F68()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 240));
}

void *sub_100027F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return sub_100026E3C((uint64_t *)va);
}

uint64_t sub_100027F80()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_100027F90()
{
  return 0LL;
}

uint64_t sub_100027FA0()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100027FA8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10000DE60(a1, v3, a3);
}

uint64_t sub_100027FB0()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_100027FB8()
{
  return 0LL;
}

unint64_t sub_100027FC4()
{
  return sub_100016078();
}

uint64_t sub_100027FD4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

  ;
}

uint64_t sub_100027FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_bridgeObjectRelease(a4);
}

  ;
}

id sub_10002800C(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

void sub_100028018(uint64_t a1, uint64_t a2)
{
}

void sub_100028020(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

  ;
}

void sub_100028040()
{
}

uint64_t sub_100028048(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_100028050()
{
  return static os_log_type_t.info.getter();
}

id sub_100028058(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_100028060()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_100028068()
{
  return v0;
}

uint64_t sub_10002807C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_100028088()
{
  return swift_release(*(void *)(v0 - 320));
}

BOOL sub_100028094@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_1000280A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100009E60(a1, 1LL, 1LL, a4);
}

void sub_1000280B4()
{
}

void sub_1000280C0()
{
}

uint64_t sub_1000280C8()
{
  return swift_bridgeObjectRetain(v0);
}

void *sub_1000280D0()
{
  return memcpy(&unk_100135148, __src, 0xA8uLL);
}

uint64_t sub_100028124(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_1001351F0, 0xD000000000000010LL, 0x80000001000F96E0LL);
}

uint64_t sub_100028148(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_100135208, 0x617461646174656DLL, 0xE800000000000000LL);
}

uint64_t sub_100028168(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = sub_100008DB0((uint64_t *)&unk_1001323C0);
  unint64_t v7 = sub_1000281C4();
  return ExpressionType.init(_:)(a3, a4, v6, v7);
}

unint64_t sub_1000281C4()
{
  unint64_t result = qword_100131110;
  if (!qword_100131110)
  {
    uint64_t v1 = sub_100008E58((uint64_t *)&unk_1001323C0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100131110);
  }

  return result;
}

uint64_t sub_100028208(uint64_t a1)
{
  uint64_t v2 = sub_100008DB0(&qword_100130BC0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_10002824C(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  id v5 = v4;
  return a1;
}

ValueMetadata *type metadata accessor for LNAssistantAppEntityRecord()
{
  return &type metadata for LNAssistantAppEntityRecord;
}

uint64_t sub_100028294(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    uint64_t result = sub_100033454(a1);
    if (result < 0 || (unint64_t v5 = result, result >= 1LL << *(_BYTE *)(a1 + 32)))
    {
LABEL_13:
      __break(1u);
      return (uint64_t)v19;
    }

    else
    {
      uint64_t v6 = a1 + 64;
      while ((*(void *)(v6 + 8 * (v5 >> 6)) & (1LL << v5)) != 0)
      {
        if (v4 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_17;
        }
        uint64_t v16 = v2;
        int v7 = v4;
        id v8 = *(id *)(*(void *)(a1 + 56) + 8 * v5);
        id v9 = [v8 remoteObjectProxy];
        _bridgeAnyObjectToAny(_:)(v17, v9);
        swift_unknownObjectRelease(v9);
        uint64_t v10 = sub_100008DB0(&qword_100131848);
        swift_dynamicCast(&v18, v17, (char *)&type metadata for Any + 8, v10, 7LL);

        uint64_t v11 = v18;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
        uint64_t v13 = v19[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
        uint64_t v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
        uint64_t result = specialized ContiguousArray._endMutation()(v14);
        uint64_t v15 = -1LL << *(_BYTE *)(a1 + 32);
        if ((*(void *)(v6 + 8 * (v5 >> 6)) & (1LL << v5)) == 0) {
          goto LABEL_19;
        }
        if (v7 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_20;
        }
        uint64_t result = _HashTable.occupiedBucket(after:)(v5, a1 + 64, ~v15);
        uint64_t v2 = v16 - 1;
        if (v16 == 1) {
          return (uint64_t)v19;
        }
        unint64_t v5 = result;
        if ((result & 0x8000000000000000LL) == 0)
        {
          int v4 = *(_DWORD *)(a1 + 36);
          if (result < 1LL << *(_BYTE *)(a1 + 32)) {
            continue;
          }
        }

        goto LABEL_13;
      }

      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
  }

  return result;
}

void *sub_100028484(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a6 & 1) != 0)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    v13[0] = a4;
    v13[1] = a5;
    uint64_t v14 = &v16;
    sub_1000313E0(a1, a2, a3, 2LL, (uint64_t)sub_1000334DC, (uint64_t)&v12);
    return v16;
  }

  else
  {
    uint64_t v7 = __chkstk_darwin(a1);
    uint64_t v14 = v8;
    uint64_t v15 = v9;
    sub_1000313E0(v7, v10, v11, 2LL, (uint64_t)sub_1000334D4, (uint64_t)v13);
    return _swiftEmptyArrayStorage;
  }

id sub_100028540(void *a1, uint64_t (*a2)(void))
{
  id result = [a1 eventBody];
  if (result)
  {
    id v4 = result;
    char v5 = a2();

    return (id)(v5 & 1);
  }

  return result;
}

uint64_t sub_10002859C(void *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = (uint64_t)[a1 eventBody];
  if (result)
  {
    id v12 = (id)result;
    char v13 = a2();

    if ((v13 & 1) != 0)
    {
      id v14 = [v12 executionUUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000B0694();
      uint64_t v15 = *(void *)(*a4 + 16);
      sub_1000B06EC(v15);
      uint64_t v16 = *a4;
      *(void *)(v16 + 1sub_10000AC58(v0 + 6) = v15 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))( v16 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
      + *(void *)(v8 + 72) * v15,
        v10,
        v7);

      return 1LL;
    }

    else
    {

      return 0LL;
    }
  }

  return result;
}

void sub_1000286D8(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = a3;
  id v29 = a2;
  uint64_t v4 = sub_100008DB0((uint64_t *)&unk_1001317D0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v26 - v8;
  sub_100033240(a1, v30);
  uint64_t v10 = v30[0];
  int64_t v31 = v30[3];
  unint64_t v11 = v30[4];
  uint64_t v27 = v30[1];
  int64_t v28 = (unint64_t)(v30[2] + 64LL) >> 6;
  swift_bridgeObjectRetain();
  if (!v11) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v12 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  unint64_t v13 = v12 | (v31 << 6);
  while (1)
  {
    uint64_t v18 = *(void *)(v10 + 48);
    uint64_t v19 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v19 - 8) + 16LL))( v9,  v18 + *(void *)(*(void *)(v19 - 8) + 72LL) * v13,  v19);
    uint64_t v20 = *(void **)(*(void *)(v10 + 56) + 8 * v13);
    *(void *)&v9[*(int *)(v4 + 48)] = v20;
    sub_100026C8C((uint64_t)v9, (uint64_t)v6, (uint64_t *)&unk_1001317D0);
    sub_10000A1A0(0LL, (unint64_t *)&qword_1001317F0, &OBJC_CLASS___NSObject_ptr);
    uint64_t v21 = *(void *)&v6[*(int *)(v4 + 48)];
    id v22 = v20;
    if ((static NSObject.== infix(_:_:)(v21, v29) & 1) != 0)
    {
      swift_release();
      uint64_t v23 = v26;
      sub_100026C8C((uint64_t)v6, v26, (uint64_t *)&unk_1001317D0);
      uint64_t v24 = v23;
      uint64_t v25 = 0LL;
      goto LABEL_24;
    }

    sub_10001B60C((uint64_t)v6, (uint64_t *)&unk_1001317D0);
    if (v11) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v14 = v31 + 1;
    if (__OFADD__(v31, 1LL)) {
      break;
    }
    if (v14 >= v28) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v27 + 8 * v14);
    int64_t v16 = v31 + 1;
    if (!v15)
    {
      int64_t v16 = v31 + 2;
      if (v31 + 2 >= v28) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v27 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v31 + 3;
        if (v31 + 3 >= v28) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v27 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v31 + 4;
          if (v31 + 4 >= v28) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v27 + 8 * v16);
          if (!v15)
          {
            int64_t v16 = v31 + 5;
            if (v31 + 5 >= v28) {
              goto LABEL_23;
            }
            unint64_t v15 = *(void *)(v27 + 8 * v16);
            if (!v15)
            {
              int64_t v17 = v31 + 6;
              while (v17 < v28)
              {
                unint64_t v15 = *(void *)(v27 + 8 * v17++);
                if (v15)
                {
                  int64_t v16 = v17 - 1;
                  goto LABEL_18;
                }
              }

uint64_t sub_10002899C()
{
  id v0 = (id)BiomeLibrary();
  id v1 = [v0 App];
  swift_unknownObjectRelease(v0);
  id v2 = [v1 Intents];
  swift_unknownObjectRelease(v1);
  id v3 = [v2 Transcript];
  uint64_t result = swift_unknownObjectRelease(v2);
  qword_1001313C0 = (uint64_t)v3;
  return result;
}

void sub_100028A34()
{
  uint64_t v0 = sub_10000E918();
  sub_10000A07C(v0, qword_100135220);
  sub_100008D98(v0, (uint64_t)qword_100135220);
  uint64_t v7 = type metadata accessor for Transcript();
  uint64_t v1 = sub_100008DB0((uint64_t *)&unk_100132590);
  uint64_t v3 = String.init<A>(describing:)(&v7, v1);
  if (LNLogSubsystem)
  {
    uint64_t v4 = v2;
    uint64_t v5 = String.init(cString:)();
    Logger.init(subsystem:category:)(v5, v6, v3, v4);
    sub_10000AED8();
  }

  else
  {
    __break(1u);
  }

id sub_100028AC8()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v5 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (!v5)
  {
    uint64_t v6 = qword_100130118;
    id v7 = v0;
    if (v6 != -1) {
      swift_once(&qword_100130118, sub_100028A34);
    }
    uint64_t v8 = sub_100008D98(v1, (uint64_t)qword_100135220);
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v8, v1);

    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      unint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "No current XPC connection.", v12, 2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    unint64_t v13 = sub_1000332AC();
    swift_allocError(&type metadata for TranscriptError, v13, 0LL, 0LL);
    *int64_t v14 = 1;
    swift_willThrow();
  }

  return v5;
}

id sub_100028C70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v2);
  uint64_t v7 = OBJC_IVAR____TtC10LinkDaemon10Transcript_nextActionObserverConnections;
  uint64_t v8 = sub_1000338B4();
  uint64_t v9 = sub_10000A1A0(0LL, (unint64_t *)&unk_1001317E0, &OBJC_CLASS___NSXPCConnection_ptr);
  sub_100008C18( &qword_100130E40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v11 = v10;
  unint64_t v12 = v3;
  *(void *)&v3[v7] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v8, v9, v11);
  uint64_t v13 = OBJC_IVAR____TtC10LinkDaemon10Transcript_nextActionLock;
  uint64_t v14 = sub_100008DB0(&qword_100133990);
  uint64_t v15 = sub_10000C254(v14, 20LL);
  *(_DWORD *)(v15 + 1sub_10000AC58(v0 + 6) = 0;
  *(void *)&v12[v13] = v15;
  *(void *)&v12[OBJC_IVAR____TtC10LinkDaemon10Transcript_streamManager] = a1;
  *(void *)&v12[OBJC_IVAR____TtC10LinkDaemon10Transcript_observers] = a2;
  swift_retain(a1);

  v25.receiver = v12;
  v25.super_class = ObjectType;
  id v16 = objc_msgSendSuper2(&v25, "init");
  uint64_t v17 = qword_100130118;
  id v18 = v16;
  if (v17 != -1) {
    swift_once(&qword_100130118, sub_100028A34);
  }
  uint64_t v19 = sub_10000E918();
  uint64_t v20 = sub_100008D98(v19, (uint64_t)qword_100135220);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)sub_10000AE10(2LL);
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Starting Transcript", v23, 2u);
    sub_10000AD78((uint64_t)v23);
  }

  swift_release(a1);

  return v18;
}

uint64_t sub_100028E4C(void *a1)
{
  uint64_t v3 = sub_100008DB0(&qword_100131780);
  __chkstk_darwin(v3);
  sub_100011A0C();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = sub_10000E918();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100011A0C();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = qword_100130118;
  id v13 = v1;
  if (v12 != -1) {
    swift_once(&qword_100130118, sub_100028A34);
  }
  uint64_t v14 = sub_100008D98(v7, (uint64_t)qword_100135220);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, v14, v7);

  id v15 = a1;
  id v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    id v38 = v13;
    id v18 = (uint8_t *)sub_10000AE10(12LL);
    uint64_t v35 = (void *)sub_10000AE10(8LL);
    uint64_t v36 = v11;
    *(_DWORD *)id v18 = 138412290;
    id v39 = v15;
    uint64_t v37 = v8;
    uint64_t v19 = v7;
    id v20 = v15;
    uint64_t v11 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v18 + 4, v18 + 12);
    uint64_t v21 = (uint64_t)v35;
    *uint64_t v35 = v15;

    uint64_t v7 = v19;
    uint64_t v8 = v37;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "invalidatedConnection for %@", v18, 0xCu);
    sub_100008DB0((uint64_t *)&unk_100132620);
    swift_arrayDestroy(v21, 1LL);
    sub_10000AD78(v21);
    uint64_t v22 = (uint64_t)v18;
    id v13 = v38;
    sub_10000AD78(v22);
  }

  else
  {

    id v16 = (os_log_s *)v15;
  }

  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
  __chkstk_darwin(v23);
  *(&v34 - 2) = (uint64_t)v15;
  sub_100029330(sub_100031FC0, (uint64_t)(&v34 - 4));
  uint64_t result = sub_10004D8B0();
  if (v25)
  {
    uint64_t v26 = sub_10002FB0C(result, v25);
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    uint64_t result = swift_bridgeObjectRelease();
    if (v28)
    {
      uint64_t v31 = type metadata accessor for TaskPriority(0LL);
      sub_100009E60(v6, 1LL, 1LL, v31);
      uint64_t v32 = (void *)sub_10000C254((uint64_t)&unk_100123840, 64LL);
      v32[2] = 0LL;
      v32[3] = 0LL;
      v32[4] = v13;
      v32[5] = v26;
      v32[6] = v28;
      v32[7] = v30;
      id v33 = v13;
      sub_10000D1F0(v6, (uint64_t)&unk_100131790, (uint64_t)v32);
      return swift_release();
    }
  }

  return result;
}

void sub_100029140(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100008DB0((uint64_t *)&unk_1001317C0);
  __chkstk_darwin(v3);
  uint64_t v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = sub_100008DB0((uint64_t *)&unk_100132900);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  id v13 = a2;
  swift_bridgeObjectRetain();
  sub_1000286D8(v14, v13, (uint64_t)v5);
  swift_bridgeObjectRelease();
  uint64_t v15 = sub_100008DB0((uint64_t *)&unk_1001317D0);
  if (sub_100009E6C((uint64_t)v5, 1LL, v15) == 1)
  {
    sub_10001B60C((uint64_t)v5, (uint64_t *)&unk_1001317C0);
    sub_100009E60((uint64_t)v8, 1LL, 1LL, v9);
LABEL_4:
    sub_10001B60C((uint64_t)v8, (uint64_t *)&unk_100132900);
    return;
  }

  id v16 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32);
  v16(v8, v5, v9);
  sub_100009E60((uint64_t)v8, 0LL, 1LL, v9);
  v16(v12, v8, v9);

  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100029330(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v5 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC10LinkDaemon10Transcript_nextActionLock);
  swift_retain(v5);
  os_unfair_lock_lock(v5 + 4);
  sub_10002F770(a1, a2, v2);
  os_unfair_lock_unlock(v5 + 4);
  return swift_release(v5);
}

uint64_t sub_1000293A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  _OWORD v7[2] = a4;
  v7[3] = a5;
  return swift_task_switch(sub_1000293C4, 0LL, 0LL);
}

uint64_t sub_1000293C4()
{
  return sub_10000C914(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000293FC()
{
}

uint64_t type metadata accessor for Transcript()
{
  return objc_opt_self(&OBJC_CLASS____TtC10LinkDaemon10Transcript);
}

uint64_t sub_1000294AC()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(LNTranscriptServiceName);
  qword_100135238 = result;
  unk_100135240 = v1;
  return result;
}

uint64_t sub_1000294D8()
{
  if (qword_100130120 != -1) {
    swift_once(&qword_100130120, sub_1000294AC);
  }
  uint64_t v0 = qword_100135238;
  swift_bridgeObjectRetain(unk_100135240);
  return v0;
}

uint64_t sub_100029534(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_100008DB0(&qword_100130FA0);
  uint64_t v7 = sub_10000C254(v6, 56LL);
  *(_OWORD *)(v7 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
  *(void *)(v7 + 32) = a1;
  *(void *)(v7 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = a2;
  *(void *)(v7 + 48) = a3;
  uint64_t v8 = LNSystemStreamIdentifier;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNSystemStreamIdentifier);
  if (v9 == a1 && v10 == a2)
  {
    id v25 = a3;
  }

  else
  {
    uint64_t v12 = v10;
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v9, v10, 0LL);
    swift_bridgeObjectRetain(a2);
    id v14 = a3;
    swift_bridgeObjectRelease(v12);
    if ((v13 & 1) == 0)
    {
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      unint64_t v17 = v16;
      uint64_t v18 = sub_10002FB0C(v15, v16);
      uint64_t v20 = v19;
      uint64_t v22 = v21;
      swift_bridgeObjectRelease(v17);
      if (v20)
      {
        swift_bridgeObjectRetain(v20);
        id v23 = v22;
        sub_100014524();
        uint64_t v7 = (uint64_t)v24;
        __int128 v24[2] = 2LL;
        v24[7] = v18;
        v24[8] = v20;
        v24[9] = v23;

        swift_bridgeObjectRelease(v20);
      }
    }
  }

  return v7;
}

id sub_10002967C()
{
  uint64_t v1 = sub_100029960(0xD000000000000025LL, 0x80000001000F9940LL);
  char v2 = sub_100033950(v1, 0x80000001000F9910LL);
  if ((v1 & 1) != 0)
  {
    if ((v2 & 1) != 0)
    {
      if (qword_100130118 != -1) {
        swift_once(&qword_100130118, sub_100028A34);
      }
      uint64_t v3 = sub_10000E918();
      sub_1000338EC(v3, (uint64_t)qword_100135220);
      sub_100033898();
      os_log_type_t v4 = sub_10003392C();
      if (sub_100033830(v4))
      {
        uint64_t v5 = (float *)sub_100033820();
        uint64_t v6 = sub_1000338BC(v5, 1.5047e-36);
        int v7 = sub_100028058((uint64_t)v6, "processIdentifier");
        sub_1000337A4(v7, v8, v9, v10, v11, v12, v13, v14, v61, v62, SHIDWORD(v62), v63);

        sub_1000337DC( (void *)&_mh_execute_header,  v15,  v16,  "Client with pid %d has privileged and observing entitlement. Exporting LNTranscriptXPCPrivilegedObservingInterface");
        sub_10000AD78((uint64_t)v5);
      }

      else
      {
      }

      BOOL v59 = (void *)LNTranscriptXPCPrivilegedObservingInterface();
    }

    else
    {
      if (qword_100130118 != -1) {
        swift_once(&qword_100130118, sub_100028A34);
      }
      uint64_t v31 = sub_10000E918();
      sub_1000338EC(v31, (uint64_t)qword_100135220);
      sub_100033898();
      os_log_type_t v32 = sub_10003392C();
      if (sub_100033830(v32))
      {
        id v33 = (float *)sub_100033820();
        uint64_t v34 = sub_1000338BC(v33, 1.5047e-36);
        int v35 = sub_100028058((uint64_t)v34, "processIdentifier");
        sub_1000337A4(v35, v36, v37, v38, v39, v40, v41, v42, v61, v62, SHIDWORD(v62), v63);

        sub_1000337DC( (void *)&_mh_execute_header,  v43,  v44,  "Client with pid %d has privileged entitlement. Exporting LNTranscriptXPCPrivilegedInterface");
        sub_10000AD78((uint64_t)v33);
      }

      else
      {
      }

      BOOL v59 = (void *)LNTranscriptXPCPrivilegedInterface();
    }
  }

  else if ((v2 & 1) != 0)
  {
    if (qword_100130118 != -1) {
      swift_once(&qword_100130118, sub_100028A34);
    }
    uint64_t v17 = sub_10000E918();
    sub_1000338EC(v17, (uint64_t)qword_100135220);
    sub_100033898();
    os_log_type_t v18 = sub_10003392C();
    if (sub_100033830(v18))
    {
      uint64_t v19 = (float *)sub_100033820();
      uint64_t v20 = sub_1000338BC(v19, 1.5047e-36);
      int v21 = sub_100028058((uint64_t)v20, "processIdentifier");
      sub_1000337A4(v21, v22, v23, v24, v25, v26, v27, v28, v61, v62, SHIDWORD(v62), v63);

      sub_1000337DC( (void *)&_mh_execute_header,  v29,  v30,  "Client with pid %d has observing entitlement. Exporting LNTranscriptXPCObservingInterface");
      sub_10000AD78((uint64_t)v19);
    }

    else
    {
    }

    BOOL v59 = (void *)LNTranscriptXPCObservingInterface();
  }

  else
  {
    if (qword_100130118 != -1) {
      swift_once(&qword_100130118, sub_100028A34);
    }
    uint64_t v45 = sub_10000E918();
    sub_1000338EC(v45, (uint64_t)qword_100135220);
    sub_100033898();
    os_log_type_t v46 = sub_10003392C();
    if (sub_100033830(v46))
    {
      uint64_t v47 = (float *)sub_100033820();
      unint64_t v48 = sub_1000338BC(v47, 1.5047e-36);
      int v49 = sub_100028058((uint64_t)v48, "processIdentifier");
      sub_1000337A4(v49, v50, v51, v52, v53, v54, v55, v56, v61, v62, SHIDWORD(v62), v63);

      sub_1000337DC( (void *)&_mh_execute_header,  v57,  v58,  "Client with pid %d lacks privileged or observing entitlement. Exporting LNTranscriptXPCInterface");
      sub_10000AD78((uint64_t)v47);
    }

    else
    {
    }

    BOOL v59 = (void *)LNTranscriptXPCInterface();
  }

  return v59;
}

uint64_t sub_100029960(uint64_t a1, uint64_t a2)
{
  Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  LOBYTE(a2) = sub_10004DE24(a1, a2, isa);

  return a2 & 1;
}

void sub_1000299DC(uint64_t a1)
{
  if ((sub_100033950(a1, 0x80000001000F9910LL) & 1) != 0) {
    id v1 = (id)LNNextActionObserverXPCInterface();
  }
  sub_10000ADA8();
}

uint64_t sub_100029A20@<X0>(void *a1@<X8>)
{
  id v3 = [objc_allocWithZone(LNWeakProxy) initWithValue:v1];
  uint64_t result = sub_100008DB0(&qword_100131808);
  a1[3] = result;
  *a1 = v3;
  return result;
}

void sub_100029A70(void *a1, void *a2, void *aBlock)
{
  id v6 = sub_100028AC8();
  uint64_t v7 = sub_100032330((uint64_t)a1, 4u);
  _Block_copy(aBlock);
  sub_100029B48((uint64_t)v6, a2, a1, (void (**)(void, void))aBlock);
  sub_1000AE8F4();

  swift_release(v7);
  _Block_release(aBlock);
  _Block_release(aBlock);
}

void sub_100029B48(uint64_t a1, void *a2, void *a3, void (**a4)(void, void))
{
  uint64_t v110 = a4;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v112 = *(void *)(v7 - 8);
  uint64_t v113 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v106 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v108 = (char *)&v106 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  os_log_type_t v109 = (uint8_t *)&v106 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v106 - v15;
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v106 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v21 = sub_100029960(0xD000000000000025LL, 0x80000001000F9940LL);
  uint64_t v111 = v4;
  if ((v21 & 1) == 0)
  {
    uint64_t v22 = sub_10004D8B0();
    if (!v23)
    {
      uint64_t v73 = qword_100130118;
      id v74 = a2;
      if (v73 != -1) {
        swift_once(&qword_100130118, sub_100028A34);
      }
      uint64_t v75 = v113;
      uint64_t v76 = sub_100008D98(v113, (uint64_t)qword_100135220);
      uint64_t v77 = v112;
      (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v10, v76, v75);

      id v78 = a3;
      uint64_t v79 = (os_log_s *)Logger.logObject.getter(v78);
      os_log_type_t v80 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v79, v80))
      {
        uint64_t v81 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v82 = (void *)swift_slowAlloc(8LL, -1LL);
        os_log_type_t v109 = v81;
        *(_DWORD *)uint64_t v81 = 138412290;
        uint64_t v83 = v81 + 4;
        uint64_t v115 = (uint64_t)v78;
        id v84 = v78;
        uint64_t v85 = v81 + 12;
        uint64_t v77 = v112;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v83, v85);
        *uint64_t v82 = v78;
        uint64_t v86 = v82;

        unint64_t v87 = v109;
        _os_log_impl( (void *)&_mh_execute_header,  v79,  v80,  "Client lacks application-identifier entitlement. Failed to record %@",  v109,  0xCu);
        sub_100008DB0((uint64_t *)&unk_100132620);
        swift_arrayDestroy(v86, 1LL);
        swift_slowDealloc(v86, -1LL, -1LL);
        swift_slowDealloc(v87, -1LL, -1LL);
      }

      else
      {

        uint64_t v79 = (os_log_s *)v78;
      }

      uint64_t v38 = v110;

      (*(void (**)(char *, uint64_t))(v77 + 8))(v10, v113);
      unint64_t v103 = sub_1000332AC();
      uint64_t v89 = swift_allocError(&type metadata for TranscriptError, v103, 0LL, 0LL);
      uint64_t v91 = v89;
      char v92 = 3;
      goto LABEL_33;
    }

    sub_1000330A8(v22, v23, a3);
    [a3 setSource:1];
  }

  uint64_t v24 = sub_100033048(a3);
  if (!v25)
  {
    uint64_t v39 = qword_100130118;
    id v40 = a2;
    if (v39 != -1) {
      swift_once(&qword_100130118, sub_100028A34);
    }
    uint64_t v41 = v113;
    uint64_t v42 = sub_100008D98(v113, (uint64_t)qword_100135220);
    uint64_t v43 = v112;
    (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v16, v42, v41);

    id v44 = a3;
    uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      unint64_t v48 = (void *)swift_slowAlloc(8LL, -1LL);
      os_log_type_t v109 = v47;
      *(_DWORD *)uint64_t v47 = 138412290;
      uint64_t v115 = (uint64_t)v44;
      id v49 = v44;
      uint64_t v50 = v47 + 4;
      uint64_t v51 = v47 + 12;
      uint64_t v43 = v112;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v50, v51);
      *unint64_t v48 = v44;
      uint64_t v52 = v48;

      uint64_t v53 = v109;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "No bundle identifier set. Failed to record %@", v109, 0xCu);
      sub_100008DB0((uint64_t *)&unk_100132620);
      swift_arrayDestroy(v52, 1LL);
      swift_slowDealloc(v52, -1LL, -1LL);
      uint64_t v54 = v53;
      uint64_t v41 = v113;
      swift_slowDealloc(v54, -1LL, -1LL);
    }

    else
    {

      uint64_t v45 = (os_log_s *)v44;
    }

    uint64_t v38 = v110;

    (*(void (**)(char *, uint64_t))(v43 + 8))(v16, v41);
    unint64_t v88 = sub_1000332AC();
    uint64_t v89 = swift_allocError(&type metadata for TranscriptError, v88, 0LL, 0LL);
    uint64_t v91 = v89;
    char v92 = 2;
    goto LABEL_33;
  }

  uint64_t v26 = v24;
  unint64_t v27 = v25;
  id v28 = [a3 executionDate];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  double v29 = Date.timeIntervalSinceNow.getter();
  uint64_t v30 = *(void (**)(char *, uint64_t))(v18 + 8);
  v30(v20, v17);
  if (v29 >= 5.0)
  {
    uint64_t v108 = (char *)v30;
    swift_bridgeObjectRelease(v27);
    uint64_t v55 = qword_100130118;
    id v56 = a2;
    uint64_t v57 = v112;
    if (v55 != -1) {
      swift_once(&qword_100130118, sub_100028A34);
    }
    uint64_t v58 = v113;
    uint64_t v59 = sub_100008D98(v113, (uint64_t)qword_100135220);
    unint64_t v60 = v109;
    (*(void (**)(uint8_t *, uint64_t, uint64_t))(v57 + 16))(v109, v59, v58);

    id v61 = a3;
    uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
    os_log_type_t v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = swift_slowAlloc(22LL, -1LL);
      uint64_t v65 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v107 = swift_slowAlloc(32LL, -1LL);
      uint64_t v115 = v107;
      *(_DWORD *)uint64_t v64 = 136315394;
      uint64_t v106 = v64 + 4;
      id v66 = [v61 executionDate];
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100008C18( (unint64_t *)&unk_100131860,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter(v17, v67);
      unint64_t v70 = v69;
      ((void (*)(char *, uint64_t))v108)(v20, v17);
      uint64_t v114 = sub_10000DE60(v68, v70, &v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v106, v64 + 12);

      swift_bridgeObjectRelease(v70);
      *(_WORD *)(v64 + 12) = 2112;
      uint64_t v114 = (uint64_t)v61;
      id v71 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v64 + 14, v64 + 22);
      void *v65 = v61;

      _os_log_impl( (void *)&_mh_execute_header,  v62,  v63,  "Expected execution date to be recent, found %s. Discarding %@.",  (uint8_t *)v64,  0x16u);
      sub_100008DB0((uint64_t *)&unk_100132620);
      swift_arrayDestroy(v65, 1LL);
      swift_slowDealloc(v65, -1LL, -1LL);
      uint64_t v72 = v107;
      swift_arrayDestroy(v107, 1LL);
      swift_slowDealloc(v72, -1LL, -1LL);
      swift_slowDealloc(v64, -1LL, -1LL);

      (*(void (**)(uint8_t *, uint64_t))(v112 + 8))(v109, v113);
    }

    else
    {

      (*(void (**)(uint8_t *, uint64_t))(v57 + 8))(v60, v58);
    }

    uint64_t v38 = v110;
    goto LABEL_32;
  }

  swift_bridgeObjectRetain(v27);
  uint64_t v31 = sub_10002FB0C(v26, v27);
  uint64_t v33 = v32;
  int v35 = v34;
  swift_bridgeObjectRelease_n(v27, 2LL);
  uint64_t v36 = v112;
  if (!v33)
  {
    uint64_t v93 = qword_100130118;
    id v94 = a2;
    if (v93 != -1) {
      swift_once(&qword_100130118, sub_100028A34);
    }
    uint64_t v95 = v113;
    uint64_t v96 = sub_100008D98(v113, (uint64_t)qword_100135220);
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v108, v96, v95);

    id v97 = a3;
    uint64_t v98 = (os_log_s *)Logger.logObject.getter(v97);
    os_log_type_t v99 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v98, v99))
    {
      uint64_t v100 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      os_log_type_t v109 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v100 = 138412290;
      uint64_t v115 = (uint64_t)v97;
      id v101 = v97;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v100 + 4, v100 + 12);
      id v102 = v109;
      *(void *)os_log_type_t v109 = v97;

      _os_log_impl((void *)&_mh_execute_header, v98, v99, "Stream reference nil. Failed to record %@", v100, 0xCu);
      sub_100008DB0((uint64_t *)&unk_100132620);
      swift_arrayDestroy(v102, 1LL);
      swift_slowDealloc(v102, -1LL, -1LL);
      swift_slowDealloc(v100, -1LL, -1LL);
    }

    else
    {

      uint64_t v98 = (os_log_s *)v97;
    }

    uint64_t v38 = v110;

    (*(void (**)(char *, uint64_t))(v36 + 8))(v108, v113);
LABEL_32:
    unint64_t v104 = sub_1000332AC();
    uint64_t v89 = swift_allocError(&type metadata for TranscriptError, v104, 0LL, 0LL);
    uint64_t v91 = v89;
    char v92 = 1;
LABEL_33:
    *unint64_t v90 = v92;
    uint64_t v105 = (void *)_convertErrorToNSError(_:)(v89);
    ((void (**)(void, void *))v38)[2](v38, v105);

    swift_errorRelease(v91);
    goto LABEL_34;
  }

  uint64_t v37 = (void **)sub_100029534(v31, v33, v35);
  sub_10002A5B4(a3, v37, 0.0);
  swift_bridgeObjectRelease(v37);
  uint64_t v38 = v110;
  v110[2](v110, 0LL);

  swift_bridgeObjectRelease(v33);
LABEL_34:
  _Block_release(v38);
}

void sub_10002A5B4(void *a1, void **a2, double a3)
{
  uint64_t v6 = type metadata accessor for Notification(0LL);
  uint64_t v95 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (uint8_t *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v80 - v10;
  id v81 = a1;
  uint64_t v12 = (uint64_t)[a1 asBMAppIntentInvocation];
  if (qword_100130110 != -1) {
    goto LABEL_40;
  }
  while (1)
  {
    id v97 = v9;
    id v13 = [(id)qword_1001313C0 source];
    id v80 = (id)v12;
    [v13 sendEvent:v12];

    uint64_t v14 = (char *)a2[2];
    uint64_t v15 = _swiftEmptyArrayStorage;
    if (v14)
    {
      swift_bridgeObjectRetain(a2);
      uint64_t v96 = (char *)a2;
      uint64_t v16 = a2 + 6;
      uint64_t v17 = v14;
      uint64_t v18 = (uint64_t)v81;
      do
      {
        uint64_t v19 = (uint64_t)*(v16 - 2);
        unint64_t v20 = (unint64_t)*(v16 - 1);
        char v21 = *v16;
        v16 += 3;
        swift_bridgeObjectRetain(v20);
        id v22 = v21;
        sub_100030604(v18, v19, v20, v22, a3);

        swift_bridgeObjectRelease(v20);
        --v17;
      }

      while (v17);
      uint64_t v23 = v96;
      swift_bridgeObjectRelease(v96);
      v98[0] = (uint64_t)_swiftEmptyArrayStorage;
      sub_1000452D4();
      uint64_t v15 = (void *)v98[0];
      uint64_t v24 = (uint64_t *)(v23 + 40);
      do
      {
        uint64_t v26 = *(v24 - 1);
        uint64_t v25 = *v24;
        v98[0] = (uint64_t)v15;
        unint64_t v28 = v15[2];
        unint64_t v27 = v15[3];
        swift_bridgeObjectRetain(v25);
        if (v28 >= v27 >> 1)
        {
          sub_1000452D4();
          uint64_t v15 = (void *)v98[0];
        }

        v24 += 3;
        v15[2] = v28 + 1;
        double v29 = &v15[2 * v28];
        v29[4] = v26;
        uint64_t v29[5] = v25;
        --v14;
      }

      while (v14);
    }

    if (qword_100130118 != -1) {
      swift_once(&qword_100130118, sub_100028A34);
    }
    uint64_t v94 = type metadata accessor for Logger(0LL);
    uint64_t v9 = (uint8_t *)sub_100008D98(v94, (uint64_t)qword_100135220);
    uint64_t v30 = swift_bridgeObjectRetain_n(v15, 2LL);
    uint64_t v12 = Logger.logObject.getter(v30);
    os_log_type_t v31 = static os_log_type_t.default.getter();
    BOOL v32 = os_log_type_enabled((os_log_t)v12, v31);
    a2 = (void **)&type metadata for Any;
    id v84 = v15;
    if (v32)
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v33 = swift_slowAlloc(32LL, -1LL);
      v98[0] = v33;
      *(_DWORD *)uint64_t v9 = 136315138;
      uint64_t v96 = (char *)(v9 + 4);
      uint64_t v34 = ((uint64_t (*)(void *))swift_bridgeObjectRetain)(v15);
      uint64_t v35 = Array.description.getter(v34, &type metadata for String);
      unint64_t v37 = v36;
      swift_bridgeObjectRelease(v84);
      uint64_t v38 = v35;
      uint64_t v15 = v84;
      uint64_t v99 = sub_10000DE60(v38, v37, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100, v96, v9 + 12);
      swift_bridgeObjectRelease_n(v15, 2LL);
      unint64_t v39 = v37;
      a2 = (void **)&type metadata for Any;
      swift_bridgeObjectRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v12, v31, "Wrote action record to streams %s", v9, 0xCu);
      swift_arrayDestroy(v33, 1LL);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v15, 2LL);
    }

    id v40 = *(void **)(v82 + OBJC_IVAR____TtC10LinkDaemon10Transcript_observers);
    uint64_t v88 = v40[2];
    if (!v88) {
      break;
    }
    uint64_t v41 = v15[2];
    uint64_t v86 = v40 + 4;
    uint64_t v87 = v41;
    __n128 v42 = swift_bridgeObjectRetain(v40);
    unint64_t v43 = 0LL;
    uint64_t v85 = (void **)(v15 + 5);
    v42.n128_u64[0] = 136315138LL;
    __n128 v92 = v42;
    uint64_t v91 = (char *)&type metadata for Any + 8;
    id v44 = v97;
    uint64_t v83 = v40;
    while (v43 < v40[2])
    {
      unint64_t v90 = v43;
      uint64_t v96 = (char *)*sub_100008D74(&v86[5 * v43], v86[5 * v43 + 3]);
      __n128 v45 = swift_bridgeObjectRetain(v15);
      uint64_t v46 = v87;
      uint64_t v99 = Set.init(minimumCapacity:)(v87, &type metadata for String, &protocol witness table for String, v45);
      a2 = v85;
      for (uint64_t i = v46; i; --i)
      {
        uint64_t v48 = (uint64_t)*(a2 - 1);
        uint64_t v49 = (uint64_t)*a2;
        swift_bridgeObjectRetain(*a2);
        sub_100018380(v98, v48, v49);
        swift_bridgeObjectRelease(v98[1]);
        a2 += 2;
      }

      swift_bridgeObjectRelease(v15);
      uint64_t v12 = v99;
      uint64_t v9 = (uint8_t *)sub_10008BF8C(v99, (uint64_t)&_swiftEmptySetSingleton);
      swift_bridgeObjectRelease(v12);
      uint64_t v50 = *((void *)v9 + 2);
      if (v50)
      {
        uint64_t v51 = v95;
        uint64_t v52 = (char *)&v9[(*(unsigned __int8 *)(v95 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80)];
        uint64_t v89 = v9;
        __n128 v53 = swift_bridgeObjectRetain(v9);
        a2 = *(void ***)(v51 + 72);
        uint64_t v54 = *(void (**)(void, void, void, __n128))(v51 + 16);
        uint64_t v93 = v54;
        do
        {
          v54(v11, v52, v6, v53);
          Class isa = Notification._bridgeToObjectiveC()().super.isa;
          [v96 postNotification:isa];

          if (qword_1001302D8 != -1) {
            swift_once(&qword_1001302D8, sub_100088814);
          }
          sub_100008D98(v94, (uint64_t)qword_100135780);
          uint64_t v56 = ((uint64_t (*)(uint8_t *, char *, uint64_t))v54)(v44, v11, v6);
          uint64_t v57 = (os_log_s *)Logger.logObject.getter(v56);
          os_log_type_t v58 = static os_log_type_t.default.getter();
          uint64_t v12 = v58;
          if (os_log_type_enabled(v57, v58))
          {
            uint64_t v59 = v11;
            unint64_t v60 = a2;
            uint64_t v61 = swift_slowAlloc(12LL, -1LL);
            uint64_t v62 = swift_slowAlloc(32LL, -1LL);
            v98[0] = v62;
            *(_DWORD *)uint64_t v61 = v92.n128_u32[0];
            uint64_t v63 = Notification.description.getter();
            unint64_t v65 = v64;
            *(void *)(v61 + sub_10000AC58(v0 + 4) = sub_10000DE60(v63, v64, v98);
            swift_bridgeObjectRelease(v65);
            uint64_t v9 = *(uint8_t **)(v95 + 8);
            ((void (*)(uint8_t *, uint64_t))v9)(v97, v6);
            _os_log_impl( (void *)&_mh_execute_header,  v57,  (os_log_type_t)v12,  "Sent transcript notification %s",  (uint8_t *)v61,  0xCu);
            swift_arrayDestroy(v62, 1LL);
            uint64_t v66 = v62;
            id v44 = v97;
            swift_slowDealloc(v66, -1LL, -1LL);
            uint64_t v67 = v61;
            a2 = v60;
            uint64_t v11 = v59;
            uint64_t v54 = v93;
            swift_slowDealloc(v67, -1LL, -1LL);
          }

          else
          {
            uint64_t v9 = *(uint8_t **)(v95 + 8);
            ((void (*)(uint8_t *, uint64_t))v9)(v44, v6);
          }

          ((void (*)(char *, uint64_t))v9)(v11, v6);
          uint64_t v52 = (char *)a2 + (void)v52;
          --v50;
        }

        while (v50);
        swift_bridgeObjectRelease_n(v89, 2LL);
        uint64_t v15 = v84;
        id v40 = v83;
      }

      else
      {
        swift_bridgeObjectRelease(v9);
      }

      unint64_t v43 = v90 + 1;
      if (v90 + 1 == v88)
      {
        swift_bridgeObjectRelease(v15);
        goto LABEL_32;
      }
    }

    __break(1u);
LABEL_40:
    swift_once(&qword_100130110, sub_10002899C);
  }

  id v40 = v15;
LABEL_32:
  swift_bridgeObjectRelease(v40);
  uint64_t v68 = v82 + OBJC_IVAR____TtC10LinkDaemon10Transcript_nextActionObserverConnections;
  swift_beginAccess(v82 + OBJC_IVAR____TtC10LinkDaemon10Transcript_nextActionObserverConnections, v98, 0LL, 0LL);
  id v69 = v81;
  if (*(void *)(*(void *)v68 + 16LL))
  {
    id v70 = [v81 actionOutput];
    if (v70)
    {
      id v71 = v70;
      id v72 = [v70 nextAction];

      if (v72)
      {
        uint64_t v73 = sub_100033048(v69);
        if (v74)
        {
          uint64_t v75 = v73;
          uint64_t v76 = v74;
          unint64_t v77 = sub_10002F7D8();
          id v78 = v72;
          id v79 = v69;
          swift_bridgeObjectRetain(v76);
          sub_10002E2AC(v77, v78, v79, v75, v76);
          swift_bridgeObjectRelease(v77);
          swift_bridgeObjectRelease(v76);
        }
      }
    }
  }
}

void sub_10002AE04(uint64_t a1, void *a2, uint64_t a3, char *a4, void *a5)
{
  uint64_t v9 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  _Block_copy(a5);
  id v13 = sub_100028AC8();
  static OSSignpostID.exclusive.getter();
  sub_10008F854();
  uint64_t v15 = v14;
  _Block_copy(a5);
  sub_10002AF70(a1, a2, a4, v13, (void (**)(void, void))a5);
  sub_1000AE8F4();
  swift_release(v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);

  _Block_release(a5);
  _Block_release(a5);
}

void sub_10002AF70(uint64_t a1, void *a2, char *a3, void *a4, void (**a5)(void, void))
{
  uint64_t v171 = a4;
  uint64_t v172 = a5;
  id v174 = a2;
  uint64_t v175 = a3;
  uint64_t v173 = a1;
  uint64_t v170 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v170 - 8);
  __chkstk_darwin(v170);
  uint64_t v7 = (char *)&v167 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v176 = v8;
  uint64_t v177 = v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v167 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v167 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v167 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  char v21 = (char *)&v167 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v167 - v23;
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v167 - v25;
  sub_10000A1A0(0LL, &qword_100131120, &OBJC_CLASS___NSKeyedUnarchiver_ptr);
  uint64_t v27 = sub_10000A1A0(0LL, (unint64_t *)&unk_100131850, &OBJC_CLASS___LNTranscriptActionRecord_ptr);
  uint64_t v28 = v178;
  double v29 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v27, v173, v174, v27);
  uint64_t v178 = v28;
  if (!v28)
  {
    uint64_t v169 = v18;
    uint64_t v173 = (uint64_t)v7;
    if (!v29) {
      goto LABEL_3;
    }
    id v174 = v29;
    uint64_t v44 = sub_100033048(v29);
    uint64_t v46 = v175;
    if (v45)
    {
      uint64_t v47 = v44;
      unint64_t v48 = v45;
      swift_bridgeObjectRetain(v45);
      uint64_t v49 = sub_10004D8B0();
      if (v50)
      {
        uint64_t v51 = v50;
        BOOL v52 = v47 == v49 && v48 == v50;
        uint64_t v168 = v47;
        if (v52)
        {
          swift_bridgeObjectRelease(v48);
          swift_bridgeObjectRelease(v51);
          uint64_t v54 = v176;
          goto LABEL_28;
        }

        char v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v48, v49, v50, 0LL);
        swift_bridgeObjectRelease(v48);
        swift_bridgeObjectRelease(v51);
        uint64_t v54 = v176;
        if ((v53 & 1) != 0)
        {
LABEL_28:
          id v76 = v174;
          if ([v174 source] == 1)
          {
            id v77 = [v76 executionDate];
            uint64_t v78 = v173;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            double v79 = Date.timeIntervalSinceNow.getter();
            id v80 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
            uint64_t v81 = v170;
            v80(v78, v170);
            if (v79 < 5.0)
            {
              uint64_t v82 = v175;
              swift_bridgeObjectRetain(v48);
              uint64_t v83 = sub_10002FB0C(v168, v48);
              uint64_t v85 = v84;
              uint64_t v87 = v86;
              swift_bridgeObjectRelease_n(v48, 2LL);
              if (v85)
              {
                uint64_t v88 = sub_100029534(v83, v85, v87);
                uint64_t v89 = v78;
                id v90 = v174;
                uint64_t v91 = (void **)v88;
                id v92 = [v174 executionDate];
                static Date._unconditionallyBridgeFromObjectiveC(_:)();

                double v93 = Date.timeIntervalSinceReferenceDate.getter();
                v80(v89, v170);
                sub_10002A5B4(v90, v91, v93);
                swift_bridgeObjectRelease(v91);
                uint64_t v30 = v172;
                v172[2](v172, 0LL);

                swift_bridgeObjectRelease(v85);
                goto LABEL_8;
              }

              uint64_t v150 = qword_100130118;
              uint64_t v151 = v82;
              if (v150 != -1) {
                swift_once(&qword_100130118, sub_100028A34);
              }
              uint64_t v152 = v176;
              uint64_t v153 = sub_100008D98(v176, (uint64_t)qword_100135220);
              uint64_t v154 = v177;
              uint64_t v155 = v169;
              (*(void (**)(char *, uint64_t, uint64_t))(v177 + 16))(v169, v153, v152);

              unint64_t v60 = v174;
              id v156 = (os_log_s *)Logger.logObject.getter(v60);
              os_log_type_t v157 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v156, v157))
              {
                uint64_t v158 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                id v159 = (void *)swift_slowAlloc(8LL, -1LL);
                *(_DWORD *)uint64_t v158 = 138412290;
                uint64_t v180 = v60;
                uint64_t v160 = v60;
                uint64_t v161 = v60;
                uint64_t v152 = v176;
                uint64_t v154 = v177;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, &v181, v158 + 4, v158 + 12);
                *id v159 = v174;

                unint64_t v60 = v160;
                _os_log_impl( (void *)&_mh_execute_header,  v156,  v157,  "Stream reference nil. Failed to record %@.",  v158,  0xCu);
                sub_100008DB0((uint64_t *)&unk_100132620);
                swift_arrayDestroy(v159, 1LL);
                swift_slowDealloc(v159, -1LL, -1LL);
                unint64_t v162 = v158;
                uint64_t v155 = v169;
                swift_slowDealloc(v162, -1LL, -1LL);
              }

              else
              {

                id v156 = (os_log_s *)v60;
              }

              uint64_t v30 = v172;

              (*(void (**)(char *, uint64_t))(v154 + 8))(v155, v152);
              unint64_t v163 = sub_1000332AC();
              uint64_t v164 = swift_allocError(&type metadata for TranscriptError, v163, 0LL, 0LL);
              *char v165 = 1;
              uint64_t v166 = (void *)_convertErrorToNSError(_:)(v164);
              ((void (**)(void, void *))v30)[2](v30, v166);

              uint64_t v101 = v164;
LABEL_37:
              swift_errorRelease(v101);

              goto LABEL_8;
            }

            swift_bridgeObjectRelease(v48);
            uint64_t v122 = qword_100130118;
            id v123 = v175;
            if (v122 != -1) {
              swift_once(&qword_100130118, sub_100028A34);
            }
            uint64_t v124 = v176;
            uint64_t v125 = sub_100008D98(v176, (uint64_t)qword_100135220);
            uint64_t v126 = v177;
            id v127 = v21;
            (*(void (**)(char *, uint64_t, uint64_t))(v177 + 16))(v21, v125, v124);

            id v108 = v174;
            unint64_t v128 = (os_log_s *)Logger.logObject.getter(v108);
            os_log_type_t v129 = static os_log_type_t.error.getter();
            int v130 = v129;
            if (os_log_type_enabled(v128, v129))
            {
              uint64_t v131 = swift_slowAlloc(22LL, -1LL);
              uint64_t v175 = v127;
              uint64_t v132 = v81;
              uint64_t v133 = v131;
              uint64_t v134 = swift_slowAlloc(8LL, -1LL);
              uint64_t v167 = v80;
              uint64_t v135 = (void *)v134;
              uint64_t v171 = (void *)swift_slowAlloc(32LL, -1LL);
              uint64_t v180 = v171;
              *(_DWORD *)uint64_t v133 = 136315394;
              uint64_t v168 = v133 + 4;
              id v136 = [v108 executionDate];
              uint64_t v137 = v173;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              sub_100008C18( (unint64_t *)&unk_100131860,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
              uint64_t v139 = dispatch thunk of CustomStringConvertible.description.getter(v132, v138);
              LODWORD(v169) = v130;
              unint64_t v141 = v140;
              v167(v137, v132);
              uint64_t v179 = sub_10000DE60(v139, v141, (uint64_t *)&v180);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &v180, v168, v133 + 12);

              swift_bridgeObjectRelease(v141);
              *(_WORD *)(v133 + 12) = 2112;
              uint64_t v179 = (uint64_t)v108;
              id v142 = v108;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &v180, v133 + 14, v133 + 22);
              *uint64_t v135 = v174;

              _os_log_impl( (void *)&_mh_execute_header,  v128,  (os_log_type_t)v169,  "Expected execution date to be recent, found %s. Discarding %@.",  (uint8_t *)v133,  0x16u);
              sub_100008DB0((uint64_t *)&unk_100132620);
              swift_arrayDestroy(v135, 1LL);
              swift_slowDealloc(v135, -1LL, -1LL);
              unint64_t v143 = v171;
              swift_arrayDestroy(v171, 1LL);
              swift_slowDealloc(v143, -1LL, -1LL);
              swift_slowDealloc(v133, -1LL, -1LL);

              (*(void (**)(char *, uint64_t))(v126 + 8))(v175, v176);
            }

            else
            {

              (*(void (**)(char *, uint64_t))(v126 + 8))(v127, v124);
            }

            uint64_t v30 = v172;
            unint64_t v148 = sub_1000332AC();
            uint64_t v145 = swift_allocError(&type metadata for TranscriptError, v148, 0LL, 0LL);
            *uint64_t v149 = 1;
            uint64_t v147 = (void *)_convertErrorToNSError(_:)(v145);
          }

          else
          {
            swift_bridgeObjectRelease(v48);
            uint64_t v102 = qword_100130118;
            unint64_t v103 = v46;
            if (v102 != -1) {
              swift_once(&qword_100130118, sub_100028A34);
            }
            uint64_t v104 = v54;
            uint64_t v105 = sub_100008D98(v54, (uint64_t)qword_100135220);
            uint64_t v106 = v24;
            (*(void (**)(char *, uint64_t, uint64_t))(v177 + 16))(v24, v105, v54);

            id v107 = v174;
            id v108 = v174;
            os_log_type_t v109 = (os_log_s *)Logger.logObject.getter(v108);
            id v110 = v107;
            os_log_type_t v111 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v109, v111))
            {
              uint64_t v112 = swift_slowAlloc(22LL, -1LL);
              uint64_t v175 = v106;
              uint64_t v113 = v112;
              uint64_t v171 = (void *)swift_slowAlloc(8LL, -1LL);
              uint64_t v173 = swift_slowAlloc(32LL, -1LL);
              uint64_t v180 = (void *)v173;
              *(_DWORD *)uint64_t v113 = 136315394;
              id v114 = v110;
              LOWORD(v179) = (unsigned __int16)[v108 source];
              type metadata accessor for LNTranscriptActionSource(0LL);
              uint64_t v116 = String.init<A>(describing:)(&v179, v115);
              unint64_t v118 = v117;
              uint64_t v179 = sub_10000DE60(v116, v117, (uint64_t *)&v180);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &v180, v113 + 4, v113 + 12);

              swift_bridgeObjectRelease(v118);
              *(_WORD *)(v113 + 12) = 2112;
              uint64_t v179 = (uint64_t)v108;
              id v119 = v108;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &v180, v113 + 14, v113 + 22);
              uint64_t v120 = v171;
              *uint64_t v171 = v114;

              _os_log_impl( (void *)&_mh_execute_header,  v109,  v111,  "Expected source to be app, found %s. Discarding %@.",  (uint8_t *)v113,  0x16u);
              sub_100008DB0((uint64_t *)&unk_100132620);
              swift_arrayDestroy(v120, 1LL);
              swift_slowDealloc(v120, -1LL, -1LL);
              uint64_t v121 = v173;
              swift_arrayDestroy(v173, 1LL);
              swift_slowDealloc(v121, -1LL, -1LL);
              swift_slowDealloc(v113, -1LL, -1LL);

              (*(void (**)(char *, uint64_t))(v177 + 8))(v175, v176);
            }

            else
            {

              (*(void (**)(char *, uint64_t))(v177 + 8))(v106, v104);
            }

            unint64_t v144 = sub_1000332AC();
            uint64_t v145 = swift_allocError(&type metadata for TranscriptError, v144, 0LL, 0LL);
            *uint64_t v146 = 1;
            uint64_t v147 = (void *)_convertErrorToNSError(_:)(v145);
            uint64_t v30 = v172;
          }

          ((void (**)(void, void *))v30)[2](v30, v147);

          swift_errorRelease(v145);
          goto LABEL_8;
        }
      }

      else
      {
        swift_bridgeObjectRelease(v48);
        uint64_t v54 = v176;
      }

      swift_bridgeObjectRelease(v48);
      uint64_t v66 = qword_100130118;
      uint64_t v67 = v46;
      if (v66 != -1) {
        swift_once(&qword_100130118, sub_100028A34);
      }
      uint64_t v68 = v54;
      uint64_t v69 = sub_100008D98(v54, (uint64_t)qword_100135220);
      id v70 = v15;
      (*(void (**)(char *, uint64_t, uint64_t))(v177 + 16))(v15, v69, v54);

      unint64_t v60 = v174;
      id v71 = (os_log_s *)Logger.logObject.getter(v60);
      os_log_type_t v72 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v71, v72))
      {
        uint64_t v73 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v175 = (char *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v73 = 138412290;
        uint64_t v180 = v60;
        uint64_t v74 = v60;
        uint64_t v68 = v176;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, &v181, v73 + 4, v73 + 12);
        uint64_t v75 = v175;
        *(void *)uint64_t v175 = v174;

        _os_log_impl( (void *)&_mh_execute_header,  v71,  v72,  "Client lacks application-identifier entitlement. Discarding %@.",  v73,  0xCu);
        sub_100008DB0((uint64_t *)&unk_100132620);
        swift_arrayDestroy(v75, 1LL);
        swift_slowDealloc(v75, -1LL, -1LL);
        swift_slowDealloc(v73, -1LL, -1LL);
      }

      else
      {

        id v71 = (os_log_s *)v60;
      }

      (*(void (**)(char *, uint64_t))(v177 + 8))(v70, v68);
      unint64_t v99 = sub_1000332AC();
      uint64_t v95 = swift_allocError(&type metadata for TranscriptError, v99, 0LL, 0LL);
      uint64_t v97 = v95;
      char v98 = 3;
    }

    else
    {
      uint64_t v55 = qword_100130118;
      uint64_t v56 = v175;
      if (v55 != -1) {
        swift_once(&qword_100130118, sub_100028A34);
      }
      uint64_t v57 = v176;
      uint64_t v58 = sub_100008D98(v176, (uint64_t)qword_100135220);
      uint64_t v59 = v26;
      (*(void (**)(char *, uint64_t, uint64_t))(v177 + 16))(v26, v58, v57);

      unint64_t v60 = v174;
      uint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
      os_log_type_t v62 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v63 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v175 = (char *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v63 = 138412290;
        uint64_t v180 = v60;
        unint64_t v64 = v60;
        uint64_t v57 = v176;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, &v181, v63 + 4, v63 + 12);
        unint64_t v65 = v175;
        *(void *)uint64_t v175 = v174;

        _os_log_impl((void *)&_mh_execute_header, v61, v62, "No bundle identifier set. Failed to record %@.", v63, 0xCu);
        sub_100008DB0((uint64_t *)&unk_100132620);
        swift_arrayDestroy(v65, 1LL);
        swift_slowDealloc(v65, -1LL, -1LL);
        swift_slowDealloc(v63, -1LL, -1LL);
      }

      else
      {

        uint64_t v61 = (os_log_s *)v60;
      }

      (*(void (**)(char *, uint64_t))(v177 + 8))(v59, v57);
      unint64_t v94 = sub_1000332AC();
      uint64_t v95 = swift_allocError(&type metadata for TranscriptError, v94, 0LL, 0LL);
      uint64_t v97 = v95;
      char v98 = 2;
    }

    *uint64_t v96 = v98;
    uint64_t v100 = (void *)_convertErrorToNSError(_:)(v95);
    uint64_t v30 = v172;
    ((void (**)(void, void *))v172)[2](v172, v100);

    uint64_t v101 = v97;
    goto LABEL_37;
  }

  swift_errorRelease(v178);
  uint64_t v178 = 0LL;
LABEL_3:
  uint64_t v30 = v172;
  uint64_t v31 = v176;
  uint64_t v32 = v177;
  uint64_t v33 = qword_100130118;
  uint64_t v34 = v175;
  if (v33 != -1) {
    swift_once(&qword_100130118, sub_100028A34);
  }
  uint64_t v35 = sub_100008D98(v31, (uint64_t)qword_100135220);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v12, v35, v31);

  unint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v38 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v38))
  {
    unint64_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v39 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "Deserialization failed. Failed to record action record.",  v39,  2u);
    swift_slowDealloc(v39, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v31);
  unint64_t v40 = sub_1000332AC();
  uint64_t v41 = swift_allocError(&type metadata for TranscriptError, v40, 0LL, 0LL);
  *__n128 v42 = 1;
  unint64_t v43 = (void *)_convertErrorToNSError(_:)(v41);
  ((void (**)(void, void *))v30)[2](v30, v43);

  swift_errorRelease(v41);
LABEL_8:
  _Block_release(v30);
}

void sub_10002C054(void *a1, void (**a2)(void, void, void))
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v38 - v9;
  id v44 = sub_100028AC8();
  uint64_t v11 = sub_10004D8B0();
  if (v12)
  {
    unint64_t v13 = v12;
    uint64_t v42 = v11;
    uint64_t v14 = qword_100130118;
    id v15 = a1;
    if (v14 != -1) {
      swift_once(&qword_100130118, sub_100028A34);
    }
    uint64_t v16 = sub_100008D98(v4, (uint64_t)qword_100135220);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, v16, v4);
    id v43 = v15;

    uint64_t v17 = swift_bridgeObjectRetain_n(v13, 2LL);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v41 = swift_slowAlloc(32LL, -1LL);
      v46[0] = v41;
      *(_DWORD *)uint64_t v20 = 136315138;
      char v21 = v20 + 12;
      unint64_t v39 = v20 + 4;
      unint64_t v40 = v20;
      swift_bridgeObjectRetain(v13);
      uint64_t v22 = v42;
      uint64_t v45 = sub_10000DE60(v42, v13, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v39, v21);
      swift_bridgeObjectRelease_n(v13, 3LL);
      os_log_type_t v23 = v19;
      uint64_t v24 = v40;
      _os_log_impl((void *)&_mh_execute_header, v18, v23, "Transcript read access request from %s", v40, 0xCu);
      uint64_t v25 = v41;
      swift_arrayDestroy(v41, 1LL);
      swift_slowDealloc(v25, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    }

    else
    {

      swift_bridgeObjectRelease_n(v13, 2LL);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      uint64_t v22 = v42;
    }

    unint64_t v37 = sub_10002C530(v22, v13);
    swift_bridgeObjectRelease(v13);
    ((void (**)(void, os_log_s *, void))a2)[2](a2, v37, 0LL);
  }

  else
  {
    uint64_t v26 = qword_100130118;
    id v27 = a1;
    if (v26 != -1) {
      swift_once(&qword_100130118, sub_100028A34);
    }
    uint64_t v28 = sub_100008D98(v4, (uint64_t)qword_100135220);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v28, v4);

    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "Connected client lacks application-identifier in entitlements.",  v32,  2u);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    unint64_t v33 = sub_1000332AC();
    uint64_t v34 = swift_allocError(&type metadata for TranscriptError, v33, 0LL, 0LL);
    *uint64_t v35 = 3;
    uint64_t v36 = (void *)_convertErrorToNSError(_:)(v34);
    ((void (**)(void, void, void *))a2)[2](a2, 0LL, v36);

    swift_errorRelease(v34);
  }

  _Block_release(a2);
}

os_log_s *sub_10002C530(uint64_t a1, unint64_t a2)
{
  uint64_t v77 = a1;
  uint64_t v4 = type metadata accessor for String.Encoding(0LL);
  uint64_t v70 = *(void *)(v4 - 8);
  uint64_t v71 = v4;
  __chkstk_darwin(v4);
  uint64_t v69 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v6);
  id v76 = (uint8_t *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v67 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v78 = (char *)&v64 - v12;
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = qword_100130118;
  uint64_t v18 = v2;
  if (v17 != -1) {
    swift_once(&qword_100130118, sub_100028A34);
  }
  uint64_t v19 = sub_100008D98(v13, (uint64_t)qword_100135220);
  uint64_t v20 = *(void (**)(char *))(v14 + 16);
  uint64_t v68 = v19;
  v20(v16);
  uint64_t v75 = v18;

  uint64_t v21 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v22 = Logger.logObject.getter(v21);
  uint64_t v74 = v14;
  os_log_type_t v23 = (os_log_s *)v22;
  os_log_type_t v24 = static os_log_type_t.default.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v73 = v9;
  if (v25)
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v27 = swift_slowAlloc(32LL, -1LL);
    uint64_t v66 = v8;
    uint64_t v28 = v27;
    uint64_t v81 = v27;
    *(_DWORD *)uint64_t v26 = 136315138;
    unint64_t v65 = v26 + 4;
    swift_bridgeObjectRetain(a2);
    uint64_t v29 = v77;
    uint64_t v79 = sub_10000DE60(v77, a2, &v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v65, v26 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Creating sandbox exception for %s...", v26, 0xCu);
    swift_arrayDestroy(v28, 1LL);
    uint64_t v30 = v28;
    uint64_t v8 = v66;
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_slowDealloc(v26, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v74 + 8))(v16, v13);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v16, v13);
    uint64_t v29 = v77;
  }

  os_log_type_t v31 = (os_log_s *)v76;
  sub_100030348(v29, a2, (uint64_t)v76);
  int v32 = sub_100009E6C((uint64_t)v31, 1LL, v8);
  uint64_t v33 = (uint64_t)v78;
  if (v32 == 1)
  {
    sub_10001B60C((uint64_t)v31, &qword_100130BC0);
    unint64_t v34 = sub_1000332AC();
    swift_allocError(&type metadata for TranscriptError, v34, 0LL, 0LL);
    *uint64_t v35 = 4;
    swift_willThrow();
    return v31;
  }

  uint64_t v36 = v73;
  (*(void (**)(char *, os_log_s *, uint64_t))(v73 + 32))(v78, v31, v8);
  uint64_t v37 = v72;
  id v38 = sub_100028AC8();
  if (v37)
  {
LABEL_9:
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v33, v8);
    return v31;
  }

  unint64_t v39 = v38;
  uint64_t v41 = sub_10004DA14(v33, 0);
  unint64_t v43 = v42;

  id v44 = v69;
  static String.Encoding.utf8.getter();
  uint64_t v45 = String.data(using:allowLossyConversion:)(v44, 0LL, v41, v43);
  unint64_t v47 = v46;
  (*(void (**)(char *, uint64_t))(v70 + 8))(v44, v71);
  if (v47 >> 60 == 15)
  {
    uint64_t v48 = swift_bridgeObjectRelease(v43);
    os_log_type_t v31 = (os_log_s *)Logger.logObject.getter(v48);
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  v49,  "Failed to issue sandbox extension: data conversion failed.",  v50,  2u);
      swift_slowDealloc(v50, -1LL, -1LL);
    }

    unint64_t v51 = sub_1000332AC();
    swift_allocError(&type metadata for TranscriptError, v51, 0LL, 0LL);
    *BOOL v52 = 1;
    swift_willThrow();
    goto LABEL_9;
  }

  uint64_t v77 = v45;
  swift_bridgeObjectRetain(v43);
  uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
  os_log_type_t v55 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v57 = swift_slowAlloc(32LL, -1LL);
    uint64_t v66 = v8;
    uint64_t v58 = v57;
    uint64_t v81 = v57;
    id v76 = v56;
    *(_DWORD *)uint64_t v56 = 136315138;
    uint64_t v75 = v56 + 4;
    swift_bridgeObjectRetain(v43);
    uint64_t v79 = sub_10000DE60(v41, v43, &v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v75, v56 + 12);
    swift_bridgeObjectRelease_n(v43, 3LL);
    uint64_t v59 = v76;
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Sandbox exception token issued: %s", v76, 0xCu);
    swift_arrayDestroy(v58, 1LL);
    uint64_t v60 = v58;
    uint64_t v8 = v66;
    swift_slowDealloc(v60, -1LL, -1LL);
    swift_slowDealloc(v59, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v43, 2LL);
  }

  uint64_t v61 = v78;
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v67, v78, v8);
  id v62 = objc_allocWithZone(&OBJC_CLASS___NSSecurityScopedURLWrapper);
  sub_1000B03E4();
  os_log_type_t v31 = v63;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v61, v8);
  return v31;
}

uint64_t sub_10002CBD0(uint64_t a1)
{
  char v37 = a1;
  swift_errorRetain(a1);
  uint64_t v2 = sub_100008DB0(&qword_100130620);
  uint64_t v9 = sub_1000338D8(v2, v3, v4, (uint64_t)&type metadata for TranscriptError, v5, v6, v7, v8, v34, v37);
  if ((_DWORD)v9)
  {
    uint64_t v17 = swift_errorRelease(a1);
    uint64_t v25 = v35;
  }

  else
  {
    uint64_t v26 = sub_10003395C(v9, v10, v11, v12, v13, v14, v15, v16, v35, v38);
    uint64_t v17 = sub_1000338D8( v26,  v27,  v28,  (uint64_t)&type metadata for IssueSandboxExceptionError,  v29,  v30,  v31,  v32,  v36,  a1);
    if (!(_DWORD)v17)
    {
      sub_10003395C(v17, v18, v19, v20, v21, v22, v23, v24, v35, v38);
      return 0LL;
    }

    if (BYTE4(v35)) {
      uint64_t v25 = 4LL;
    }
    else {
      uint64_t v25 = 5LL;
    }
  }

  sub_10003395C(v17, v18, v19, v20, v21, v22, v23, v24, v35, v38);
  return v25;
}

void sub_10002CC74(uint64_t a1, void (**a2)(void, void))
{
  uint64_t v3 = type metadata accessor for Logger(0LL);
  __chkstk_darwin(v3);
  sub_1000309D4(2LL, (uint64_t)sub_10001EBEC, 0LL);
  a2[2](a2, 0LL);
  _Block_release(a2);
}

void sub_10002CF58(os_log_s *a1, os_log_s *a2, void (**a3)(void, Class, void))
{
  uint64_t v149 = a3;
  uint64_t v154 = a1;
  uint64_t v157 = type metadata accessor for Notification(0LL);
  uint64_t v142 = *(void *)(v157 - 8);
  uint64_t v4 = __chkstk_darwin(v157);
  uint64_t v6 = &v138[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v4);
  uint64_t v8 = &v138[-v7];
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = *(_BYTE **)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = &v138[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = &v138[-v15];
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = &v138[-v18];
  __chkstk_darwin(v17);
  uint64_t v21 = &v138[-v20];
  id v156 = a2;
  id v22 = sub_100028AC8();
  uint64_t v151 = v13;
  *(void *)&__int128 v152 = v21;
  unint64_t v148 = v19;
  uint64_t v150 = v16;
  uint64_t v155 = v8;
  unint64_t v143 = v6;
  uint64_t v153 = v9;
  id v140 = v22;
  char v23 = sub_100029960(0xD000000000000025LL, 0x80000001000F9940LL);
  uint64_t v24 = v154;
  uint64_t v25 = v156;
  if ((v23 & 1) != 0)
  {
LABEL_4:
    uint64_t v28 = sub_100033048(v24);
    if (v29)
    {
      unint64_t v30 = v29;
      uint64_t v151 = *(_BYTE **)((char *)v25 + OBJC_IVAR____TtC10LinkDaemon10Transcript_streamManager);
      uint64_t v31 = sub_10002FB0C(v28, v29);
      uint64_t v33 = v32;
      uint64_t v35 = v34;
      swift_bridgeObjectRelease(v30);
      if (v33)
      {
        *(void *)&__int128 v152 = v31;
        uint64_t v36 = sub_100029534(v31, v33, v35);
        uint64_t v37 = *(void *)(v36 + 16);
        uint64_t v38 = (os_log_s *)_swiftEmptyArrayStorage;
        uint64_t v139 = v33;
        unint64_t v141 = v35;
        uint64_t v147 = v36;
        if (v37)
        {
          uint64_t v39 = v36;
          unint64_t v40 = v24;
          unint64_t v148 = v10;
          uint64_t v158 = (os_log_s *)_swiftEmptyArrayStorage;
          sub_1000452D4();
          uint64_t v38 = v158;
          uint64_t v41 = (uint64_t *)(v39 + 40);
          do
          {
            uint64_t v43 = *(v41 - 1);
            uint64_t v42 = *v41;
            uint64_t v158 = v38;
            unint64_t v45 = *((void *)v38 + 2);
            unint64_t v44 = *((void *)v38 + 3);
            swift_bridgeObjectRetain(v42);
            if (v45 >= v44 >> 1)
            {
              sub_1000452D4();
              uint64_t v38 = v158;
            }

            v41 += 3;
            *((void *)v38 + 2) = v45 + 1;
            unint64_t v46 = (void *)((char *)v38 + 16 * v45);
            v46[4] = v43;
            v46[5] = v42;
            --v37;
          }

          while (v37);
          uint64_t v35 = v141;
          uint64_t v10 = v148;
          uint64_t v24 = v40;
          uint64_t v25 = v156;
        }

        uint64_t v58 = qword_100130118;
        uint64_t v59 = v25;
        uint64_t v60 = v150;
        if (v58 != -1) {
          swift_once(&qword_100130118, sub_100028A34);
        }
        uint64_t v61 = v153;
        uint64_t v62 = sub_100008D98(v153, (uint64_t)qword_100135220);
        uint64_t v63 = (void (*)(void))*((void *)v10 + 2);
        uint64_t v146 = v62;
        v63(v60);
        uint64_t v154 = v59;

        uint64_t v64 = v24;
        swift_bridgeObjectRetain_n(v38, 2LL);
        unint64_t v65 = v64;
        uint64_t v66 = v38;
        uint64_t v67 = (os_log_s *)Logger.logObject.getter(v65);
        os_log_type_t v68 = static os_log_type_t.default.getter();
        id v156 = v67;
        BOOL v69 = os_log_type_enabled(v67, v68);
        unint64_t v148 = v66;
        if (v69)
        {
          uint64_t v70 = swift_slowAlloc(22LL, -1LL);
          unint64_t v144 = (os_log_s **)swift_slowAlloc(8LL, -1LL);
          uint64_t v145 = (os_log_s *)swift_slowAlloc(32LL, -1LL);
          uint64_t v158 = v145;
          *(_DWORD *)uint64_t v70 = 136315394;
          swift_bridgeObjectRetain(v66);
          uint64_t v72 = Array.description.getter(v71, &type metadata for String);
          unint64_t v74 = v73;
          swift_bridgeObjectRelease(v66);
          uint64_t v160 = sub_10000DE60(v72, v74, (uint64_t *)&v158);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161, v70 + 4, v70 + 12);
          swift_bridgeObjectRelease_n(v66, 2LL);
          swift_bridgeObjectRelease(v74);
          *(_WORD *)(v70 + 12) = 2112;
          uint64_t v160 = (uint64_t)v65;
          uint64_t v75 = v65;
          uint64_t v76 = v153;
          uint64_t v35 = v141;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161, v70 + 14, v70 + 22);
          uint64_t v77 = v144;
          *unint64_t v144 = v65;

          uint64_t v78 = v156;
          _os_log_impl( (void *)&_mh_execute_header,  v156,  v68,  "Deleting from streams %s with %@",  (uint8_t *)v70,  0x16u);
          sub_100008DB0((uint64_t *)&unk_100132620);
          swift_arrayDestroy(v77, 1LL);
          swift_slowDealloc(v77, -1LL, -1LL);
          uint64_t v79 = v145;
          swift_arrayDestroy(v145, 1LL);
          swift_slowDealloc(v79, -1LL, -1LL);
          swift_slowDealloc(v70, -1LL, -1LL);

          (*((void (**)(_BYTE *, uint64_t))v10 + 1))(v150, v76);
        }

        else
        {

          swift_bridgeObjectRelease_n(v66, 2LL);
          (*((void (**)(_BYTE *, uint64_t))v10 + 1))(v60, v61);
        }

        uint64_t v103 = v147;
        uint64_t v104 = sub_10000AFE8();
        uint64_t v106 = v65;
        uint64_t v113 = v105;
        uint64_t v114 = *(void *)(v103 + 16);
        if (v114)
        {
          uint64_t v115 = (uint64_t)v104;
          id v156 = v106;
          swift_bridgeObjectRetain(v103);
          uint64_t v116 = v103;
          unint64_t v117 = (void **)(v103 + 48);
          unint64_t v118 = _swiftEmptyArrayStorage;
          do
          {
            uint64_t v119 = (uint64_t)*(v117 - 2);
            uint64_t v120 = (uint64_t)*(v117 - 1);
            uint64_t v121 = *v117;
            BOOL v122 = v119 == (void)v152 && v139 == v120;
            if (v122
              || (_stringCompareWithSmolCheck(_:_:expecting:)(*(v117 - 2), *(v117 - 1), v152, v139, 0LL) & 1) != 0)
            {
              swift_bridgeObjectRetain(v120);
              id v123 = sub_100028484(v119, v120, v121, v115, v113, 1);
              uint64_t v124 = v118;
              unint64_t v118 = v123;
            }

            else
            {
              swift_bridgeObjectRetain(v120);
              uint64_t v124 = sub_100028484(v119, v120, v121, v115, v113, 0);
            }

            swift_bridgeObjectRelease(v120);
            swift_bridgeObjectRelease(v124);
            v117 += 3;
            --v114;
          }

          while (v114);
          swift_bridgeObjectRelease((os_log_s *)v148);
          swift_bridgeObjectRelease_n(v116, 2LL);
          uint64_t v35 = v141;
        }

        else
        {
          swift_bridgeObjectRelease(v103);
          swift_bridgeObjectRelease((os_log_s *)v148);
          unint64_t v118 = _swiftEmptyArrayStorage;
        }

        type metadata accessor for UUID(0LL);
        swift_bridgeObjectRetain(v118);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        uint64_t v137 = v149;
        v149[2](v149, isa, 0LL);
        swift_bridgeObjectRelease_n(v118, 2LL);
        swift_release(v113);

        swift_bridgeObjectRelease(v139);
        unint64_t v128 = v137;
        goto LABEL_50;
      }

      uint64_t v80 = v24;
      uint64_t v81 = qword_100130118;
      uint64_t v82 = v25;
      if (v81 != -1) {
        swift_once(&qword_100130118, sub_100028A34);
      }
      uint64_t v83 = v153;
      uint64_t v84 = sub_100008D98(v153, (uint64_t)qword_100135220);
      uint64_t v85 = v148;
      (*((void (**)(_BYTE *, uint64_t, uint64_t))v10 + 2))((os_log_s *)v148, v84, v83);

      uint64_t v86 = v80;
      uint64_t v87 = (os_log_s *)Logger.logObject.getter(v86);
      os_log_type_t v88 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v87, v88))
      {
        uint64_t v89 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        id v90 = (os_log_s **)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v89 = 138412290;
        uint64_t v158 = v86;
        uint64_t v91 = v86;
        uint64_t v85 = v148;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v89 + 4, v89 + 12);
        *id v90 = v86;

        uint64_t v83 = v153;
        _os_log_impl( (void *)&_mh_execute_header,  v87,  v88,  "Stream identifier nil. Failed to delete records with %@",  v89,  0xCu);
        sub_100008DB0((uint64_t *)&unk_100132620);
        swift_arrayDestroy(v90, 1LL);
        swift_slowDealloc(v90, -1LL, -1LL);
        swift_slowDealloc(v89, -1LL, -1LL);
      }

      else
      {

        uint64_t v87 = v86;
      }

      id v107 = (void (**)(void, Class, void *))v149;
      id v108 = v140;

      (*((void (**)(_BYTE *, uint64_t))v10 + 1))(v85, v83);
      unint64_t v125 = sub_1000332AC();
      uint64_t v111 = swift_allocError(&type metadata for TranscriptError, v125, 0LL, 0LL);
      char v112 = 1;
    }

    else
    {
      uint64_t v47 = qword_100130118;
      uint64_t v48 = v25;
      if (v47 != -1) {
        swift_once(&qword_100130118, sub_100028A34);
      }
      uint64_t v49 = v153;
      uint64_t v50 = sub_100008D98(v153, (uint64_t)qword_100135220);
      uint64_t v51 = v152;
      (*((void (**)(void, uint64_t, uint64_t))v10 + 2))(v152, v50, v49);

      BOOL v52 = v24;
      uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
      os_log_type_t v54 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v53, v54))
      {
        os_log_type_t v55 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v56 = (os_log_s **)swift_slowAlloc(8LL, -1LL);
        unint64_t v148 = v10;
        *(_DWORD *)os_log_type_t v55 = 138412290;
        uint64_t v158 = v52;
        uint64_t v57 = v52;
        uint64_t v49 = v153;
        uint64_t v10 = v148;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v55 + 4, v55 + 12);
        *uint64_t v56 = v52;

        _os_log_impl( (void *)&_mh_execute_header,  v53,  v54,  "No bundle identifier set. Failed to delete records with %@",  v55,  0xCu);
        sub_100008DB0((uint64_t *)&unk_100132620);
        swift_arrayDestroy(v56, 1LL);
        swift_slowDealloc(v56, -1LL, -1LL);
        uint64_t v51 = v152;
        swift_slowDealloc(v55, -1LL, -1LL);
      }

      else
      {

        uint64_t v53 = v52;
      }

      id v107 = (void (**)(void, Class, void *))v149;
      id v108 = v140;

      (*((void (**)(uint64_t, uint64_t))v10 + 1))(v51, v49);
      unint64_t v109 = sub_1000332AC();
      uint64_t v111 = swift_allocError(&type metadata for TranscriptError, v109, 0LL, 0LL);
      char v112 = 2;
    }

    *id v110 = v112;
    type metadata accessor for UUID(0LL);
    Class v126 = Array._bridgeToObjectiveC()().super.isa;
    id v127 = (void *)_convertErrorToNSError(_:)(v111);
    v107[2](v107, v126, v127);

    swift_errorRelease(v111);
    unint64_t v128 = v107;
    goto LABEL_50;
  }

  uint64_t v26 = sub_10004D8B0();
  if (v27)
  {
    sub_1000330A8(v26, v27, v24);
    goto LABEL_4;
  }

  uint64_t v92 = qword_100130118;
  double v93 = v25;
  if (v92 != -1) {
    swift_once(&qword_100130118, sub_100028A34);
  }
  uint64_t v94 = v153;
  uint64_t v95 = sub_100008D98(v153, (uint64_t)qword_100135220);
  uint64_t v96 = v151;
  (*((void (**)(_BYTE *, uint64_t, uint64_t))v10 + 2))(v151, v95, v94);

  uint64_t v97 = v24;
  char v98 = (os_log_s *)Logger.logObject.getter(v97);
  os_log_type_t v99 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v98, v99))
  {
    uint64_t v100 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v101 = (os_log_s **)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v100 = 138412290;
    uint64_t v158 = v97;
    uint64_t v102 = v97;
    uint64_t v94 = v153;
    uint64_t v96 = v151;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v100 + 4, v100 + 12);
    *uint64_t v101 = v97;

    _os_log_impl( (void *)&_mh_execute_header,  v98,  v99,  "Client lacks application-identifier entitlement. Failed to delete records with %@",  v100,  0xCu);
    sub_100008DB0((uint64_t *)&unk_100132620);
    swift_arrayDestroy(v101, 1LL);
    swift_slowDealloc(v101, -1LL, -1LL);
    swift_slowDealloc(v100, -1LL, -1LL);
  }

  else
  {

    char v98 = v97;
  }

  os_log_type_t v129 = (void (**)(void, Class, void *))v149;
  id v130 = v140;

  (*((void (**)(_BYTE *, uint64_t))v10 + 1))(v96, v94);
  unint64_t v131 = sub_1000332AC();
  uint64_t v132 = swift_allocError(&type metadata for TranscriptError, v131, 0LL, 0LL);
  *uint64_t v133 = 3;
  type metadata accessor for UUID(0LL);
  Class v134 = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v135 = (void *)_convertErrorToNSError(_:)(v132);
  v129[2](v129, v134, v135);

  swift_errorRelease(v132);
  unint64_t v128 = v129;
LABEL_50:
  _Block_release(v128);
}

void sub_10002E2AC(unint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v18))
  {
    unint64_t v19 = v5 & 0xC000000000000001LL;
    uint64_t v7 = 4LL;
    while (1)
    {
      if (v19)
      {
        uint64_t v8 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5);
      }

      else
      {
        uint64_t v8 = *(void **)(v5 + 8 * v7);
        swift_unknownObjectRetain(v8);
      }

      uint64_t v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1LL)) {
        break;
      }
      id v10 = [a3 action];
      NSString v11 = String._bridgeToObjectiveC()();
      id v12 = [a3 actionOutput];
      if (v12)
      {
        uint64_t v13 = v5;
        uint64_t v14 = v6;
        sub_1000330F8(v12);
        if (v15)
        {
          uint64_t v16 = v15;
          NSString v17 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v16);
        }

        else
        {
          NSString v17 = 0LL;
        }

        uint64_t v6 = v14;
        uint64_t v5 = v13;
      }

      else
      {
        NSString v17 = 0LL;
      }

      [v8 didReceiveNextAction:a2 baseAction:v10 forAppWithBundleIdentifier:v11 associatedLiveActivityIdentifier:v17];
      swift_unknownObjectRelease(v8);

      ++v7;
      if (v9 == v6) {
        goto LABEL_15;
      }
    }

    __break(1u);
LABEL_17:
    if (v5 < 0) {
      uint64_t v18 = v5;
    }
    else {
      uint64_t v18 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
  }

void sub_10002E47C(void *a1, int a2, void *a3, void *aBlock, void (*a5)(id, id, void *))
{
  uint64_t v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  id v9 = a3;
  id v10 = a1;
  a5(v9, v10, v8);
  _Block_release(v8);

  sub_100033888(v10);
}

uint64_t sub_10002E4E4()
{
  return sub_1000294D8();
}

void sub_10002E4F8( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, double a5, uint64_t a6, void *a7, void *a8)
{
  uint64_t v15 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v19 = (void *)objc_opt_self(&OBJC_CLASS___NSXPCConnection);
  _Block_copy(a8);
  id v20 = [v19 currentConnection];
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v24 = v15;
    static OSSignpostID.exclusive.getter();
    sub_10008F854();
    uint64_t v23 = v22;
    _Block_copy(a8);
    sub_10002E6A4(a1, a2, a7, a3, a4, a5, (uint64_t)v21, (void (**)(void, void *))a8);
    sub_1000AE8F4();
    swift_release(v23);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v24);
  }

  _Block_release(a8);
  _Block_release(a8);
}

void sub_10002E6A4( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, double a6, uint64_t a7, void (**a8)(void, void *))
{
  uint64_t v64 = a8;
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v62 = v15;
  uint64_t v63 = v16;
  uint64_t v17 = __chkstk_darwin(v15);
  unint64_t v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v61 - v20;
  sub_10000A1A0(0LL, &qword_100131120, &OBJC_CLASS___NSKeyedUnarchiver_ptr);
  uint64_t v22 = sub_10000A1A0(0LL, (unint64_t *)&unk_100131850, &OBJC_CLASS___LNTranscriptActionRecord_ptr);
  uint64_t v23 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v22, a1, a2, v22);
  if (v8)
  {
    swift_errorRelease(v8);
LABEL_3:
    uint64_t v24 = v62;
    uint64_t v25 = v63;
    uint64_t v26 = qword_100130118;
    id v27 = a3;
    if (v26 != -1) {
      swift_once(&qword_100130118, sub_100028A34);
    }
    uint64_t v28 = sub_100008D98(v24, (uint64_t)qword_100135220);
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v19, v28, v24);

    unint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "Deserialization failed. Failed to record action record.",  v32,  2u);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v25 + 8))(v19, v24);
    unint64_t v33 = sub_1000332AC();
    uint64_t v34 = swift_allocError(&type metadata for TranscriptError, v33, 0LL, 0LL);
    *uint64_t v35 = 1;
    uint64_t v36 = (void *)_convertErrorToNSError(_:)(v34);
    uint64_t v37 = v64;
    v64[2](v64, v36);

    swift_errorRelease(v34);
    goto LABEL_8;
  }

  if (!v23) {
    goto LABEL_3;
  }
  uint64_t v61 = v23;
  swift_bridgeObjectRetain(a5);
  uint64_t v39 = sub_10002FB0C(a4, a5);
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  swift_bridgeObjectRelease(a5);
  if (v41)
  {
    unint64_t v44 = (void **)sub_100029534(v39, v41, v43);
    unint64_t v45 = v61;
    sub_10002A5B4(v61, v44, a6);
    swift_bridgeObjectRelease(v44);
    unint64_t v46 = v64;
    v64[2](v64, 0LL);

    swift_bridgeObjectRelease(v41);
    uint64_t v38 = v46;
    goto LABEL_9;
  }

  uint64_t v47 = qword_100130118;
  id v48 = a3;
  if (v47 != -1) {
    swift_once(&qword_100130118, sub_100028A34);
  }
  uint64_t v49 = v62;
  uint64_t v50 = sub_100008D98(v62, (uint64_t)qword_100135220);
  uint64_t v51 = v63;
  BOOL v52 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v21, v50, v49);

  os_log_type_t v54 = (os_log_s *)Logger.logObject.getter(v53);
  os_log_type_t v55 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v56 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v54,  v55,  "Stream reference nil. Failed to record serialized action record.",  v56,  2u);
    swift_slowDealloc(v56, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v49);
  unint64_t v57 = sub_1000332AC();
  uint64_t v58 = swift_allocError(&type metadata for TranscriptError, v57, 0LL, 0LL);
  *uint64_t v59 = 1;
  uint64_t v60 = (void *)_convertErrorToNSError(_:)(v58);
  uint64_t v37 = v64;
  v64[2](v64, v60);

  swift_errorRelease(v58);
LABEL_8:
  uint64_t v38 = v37;
LABEL_9:
  _Block_release(v38);
}

void sub_10002EBC0( uint64_t a1, unint64_t a2, uint64_t a3, void (**a4)(void, void, void))
{
  uint64_t v5 = sub_10002C530(a1, a2);
  ((void (**)(void, os_log_s *, void))a4)[2](a4, v5, 0LL);

  _Block_release(a4);
}

void sub_10002ED00(void *a1, void (**a2)(void, void, void))
{
  uint64_t v4 = sub_100008DB0((uint64_t *)&unk_100132900);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v65 = (uint64_t)&v57 - v8;
  __chkstk_darwin(v7);
  uint64_t v64 = (char *)&v57 - v9;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v57 - v15;
  uint64_t v17 = swift_allocObject(&unk_100123908, 24LL, 7LL);
  *(void *)(v17 + 1sub_10000AC58(v0 + 6) = a2;
  uint64_t v67 = a2;
  _Block_copy(a2);
  id v58 = sub_100028AC8();
  UUID.init()();
  uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v63(v14, v16, v10);
  uint64_t v18 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v62 = v17;
  uint64_t v19 = ((v18 + 24) & ~v18) + v12;
  uint64_t v20 = (v18 + 24) & ~v18;
  uint64_t v21 = v18 | 7;
  uint64_t v59 = v19;
  uint64_t v22 = swift_allocObject(&unk_100123930, v19, v18 | 7);
  *(void *)(v22 + 1sub_10000AC58(v0 + 6) = a1;
  uint64_t v23 = v22 + v20;
  uint64_t v66 = v16;
  uint64_t v24 = v11;
  uint64_t v61 = v11;
  uint64_t v25 = v20;
  uint64_t v26 = *(void (**)(uint64_t, char *, uint64_t))(v24 + 32);
  v26(v23, v14, v10);
  uint64_t v60 = v26;
  unint64_t v73 = sub_1000332EC;
  uint64_t v74 = v22;
  aBlock = _NSConcreteStackBlock;
  uint64_t v70 = 1107296256LL;
  uint64_t v71 = sub_10000D934;
  uint64_t v72 = &unk_100123948;
  id v27 = _Block_copy(&aBlock);
  uint64_t v28 = v74;
  id v29 = a1;
  swift_release(v28);
  id v30 = v58;
  [v58 setInvalidationHandler:v27];
  _Block_release(v27);
  v63(v14, v66, v10);
  uint64_t v31 = swift_allocObject(&unk_100123980, v19, v21);
  *(void *)(v31 + 1sub_10000AC58(v0 + 6) = v29;
  v26(v31 + v25, v14, v10);
  unint64_t v73 = sub_1000332EC;
  uint64_t v74 = v31;
  aBlock = _NSConcreteStackBlock;
  uint64_t v70 = 1107296256LL;
  uint64_t v71 = sub_10000D934;
  uint64_t v72 = &unk_100123998;
  uint64_t v32 = _Block_copy(&aBlock);
  uint64_t v33 = v74;
  id v34 = v29;
  swift_release(v33);
  [v30 setInterruptionHandler:v32];
  _Block_release(v32);
  __chkstk_darwin(v35);
  *(&v57 - 2) = (uint64_t)v66;
  *(&v57 - 1) = (uint64_t)v30;
  sub_100029330((void (*)(uint64_t))sub_100033388, (uint64_t)(&v57 - 4));
  uint64_t v36 = v63;
  v63(v14, v66, v10);
  unint64_t v37 = (v59 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v38 = v30;
  uint64_t v39 = swift_allocObject(&unk_1001239D0, v37 + 16, v21);
  *(void *)(v39 + 1sub_10000AC58(v0 + 6) = v34;
  uint64_t v40 = v39 + v25;
  uint64_t v41 = v66;
  uint64_t v42 = (void (*)(uint64_t, uint64_t))v62;
  v60(v40, v14, v10);
  uint64_t v43 = (void (**)(uint64_t, uint64_t))(v39 + v37);
  void *v43 = sub_1000332A4;
  v43[1] = v42;
  unint64_t v73 = sub_100033400;
  uint64_t v74 = v39;
  aBlock = _NSConcreteStackBlock;
  uint64_t v70 = 1107296256LL;
  uint64_t v71 = sub_1000782AC;
  uint64_t v72 = &unk_1001239E8;
  unint64_t v44 = _Block_copy(&aBlock);
  uint64_t v45 = v74;
  id v46 = v34;
  swift_retain(v42);
  swift_release(v45);
  id v47 = [v30 remoteObjectProxyWithErrorHandler:v44];
  _Block_release(v44);

  _bridgeAnyObjectToAny(_:)(&aBlock, v47);
  swift_unknownObjectRelease(v47);
  uint64_t v48 = sub_100008DB0(&qword_100131848);
  swift_dynamicCast(&v68, &aBlock, (char *)&type metadata for Any + 8, v48, 7LL);
  uint64_t v49 = v68;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v49 observationDidStartWithConnectionUUID:isa];

  uint64_t v51 = (uint64_t)v64;
  v36(v64, v41, v10);
  sub_100009E60(v51, 0LL, 1LL, v10);
  uint64_t v52 = v65;
  sub_100026CB8(v51, v65, (uint64_t *)&unk_100132900);
  int v53 = sub_100009E6C(v52, 1LL, v10);
  uint64_t v54 = v61;
  os_log_type_t v55 = v67;
  if (v53 == 1)
  {
    Class v56 = 0LL;
  }

  else
  {
    Class v56 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v52, v10);
  }

  ((void (**)(void, Class, void))v55)[2](v55, v56, 0LL);
  swift_unknownObjectRelease(v49);

  sub_10001B60C(v51, (uint64_t *)&unk_100132900);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v41, v10);
  swift_release(v42);
  _Block_release(v55);
}

uint64_t sub_10002F360(uint64_t a1, uint64_t a2)
{
  v3[2] = a2;
  return sub_100029330((void (*)(uint64_t))sub_1000337A0, (uint64_t)v3);
}

uint64_t sub_10002F398(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  return sub_10003E2DC();
}

void sub_10002F3C4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, uint64_t))
{
  uint64_t v7 = sub_100008DB0((uint64_t *)&unk_100132900);
  __chkstk_darwin(v7);
  uint64_t v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v15 = a3;
  sub_100029330((void (*)(uint64_t))sub_1000337A0, (uint64_t)v14);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  sub_100009E60((uint64_t)v9, 1LL, 1LL, v10);
  swift_errorRetain(a1);
  LOBYTE(a3) = sub_10002CBD0(a1);
  unint64_t v11 = sub_1000332AC();
  uint64_t v12 = swift_allocError(&type metadata for TranscriptError, v11, 0LL, 0LL);
  *uint64_t v13 = a3;
  a4(v9, v12);
  swift_errorRelease(v12);
  sub_10001B60C((uint64_t)v9, (uint64_t *)&unk_100132900);
}

void sub_10002F4E8(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  uint64_t v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  a4();
  _Block_release(v6);
  sub_100033888(v7);
}

void sub_10002F538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100008DB0((uint64_t *)&unk_100132900);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100026CB8(a1, (uint64_t)v8, (uint64_t *)&unk_100132900);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  Class isa = 0LL;
  if (sub_100009E6C((uint64_t)v8, 1LL, v9) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  }

  if (a2) {
    unint64_t v11 = (void *)_convertErrorToNSError(_:)(a2);
  }
  else {
    unint64_t v11 = 0LL;
  }
  (*(void (**)(uint64_t, Class, void *))(a3 + 16))(a3, isa, v11);
}

void sub_10002F634(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
  v4[2] = a1;
  sub_100029330(sub_100033278, (uint64_t)v4);
  a3[2](a3, 0LL);
  _Block_release(a3);
}

void sub_10002F688(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10002F770(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3 + OBJC_IVAR____TtC10LinkDaemon10Transcript_nextActionObserverConnections;
  swift_beginAccess(a3 + OBJC_IVAR____TtC10LinkDaemon10Transcript_nextActionObserverConnections, v6, 33LL, 0LL);
  a1(v4);
  return swift_endAccess(v6);
}

uint64_t sub_10002F7D8()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10LinkDaemon10Transcript_nextActionLock);
  swift_retain(v1);
  os_unfair_lock_lock(v1 + 4);
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC10LinkDaemon10Transcript_nextActionObserverConnections);
  swift_beginAccess(v2, v7, 0LL, 0LL);
  uint64_t v3 = *v2;
  uint64_t v4 = swift_bridgeObjectRetain(v3);
  uint64_t v5 = sub_100028294(v4);
  swift_bridgeObjectRelease(v3);
  os_unfair_lock_unlock(v1 + 4);
  swift_release(v1);
  return v5;
}

uint64_t sub_10002F878(uint64_t a1)
{
  uint64_t v2 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v2);
  sub_100011A0C();
  uint64_t v5 = v4 - v3;
  sub_100026CB8(a1, v4 - v3, &qword_100130BC0);
  uint64_t v6 = sub_10002F918(0xD000000000000010LL, 0x80000001000F9A60LL, v5);
  sub_10001B60C(a1, &qword_100130BC0);
  return v6;
}

uint64_t sub_10002F918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(v3 + 1sub_10000AC58(v0 + 6) = 0;
  uint64_t v7 = v3 + qword_100135CD8;
  uint64_t v8 = type metadata accessor for URL(0LL);
  sub_100009E60(v7, 1LL, 1LL, v8);
  *(void *)(v3 + qword_10013441sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = &_swiftEmptyDictionarySingleton;
  uint64_t v9 = qword_100134418;
  uint64_t v10 = sub_100008DB0(&qword_100133990);
  uint64_t v11 = swift_allocObject(v10, 20LL, 7LL);
  *(_DWORD *)(v11 + 1sub_10000AC58(v0 + 6) = 0;
  *(void *)(v3 + v9) = v11;
  uint64_t v12 = (void *)(v3 + qword_100134400);
  *uint64_t v12 = a1;
  v12[1] = a2;
  sub_100026CB8(a3, v3 + qword_100134408, &qword_100130BC0);
  sub_10002FD7C();
  sub_10001B60C(a3, &qword_100130BC0);
  return v3;
}

uint64_t sub_10002F9FC()
{
  return v0;
}

uint64_t sub_10002FA80()
{
  uint64_t v0 = sub_10002F9FC();
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for TranscriptActionRecordStreamManager(uint64_t a1)
{
  uint64_t result = qword_100131558;
  if (!qword_100131558) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TranscriptActionRecordStreamManager);
  }
  return result;
}

uint64_t sub_10002FAD8(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 256LL, 0LL, v2, a1 + 328);
}

uint64_t sub_10002FB0C(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v9);
  uint64_t v11 = &v24[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v12 = v2 + qword_100135CD8;
  swift_beginAccess(v12, v24, 0LL, 0LL);
  sub_100026CB8(v12, (uint64_t)v11, &qword_100130BC0);
  if (sub_100009E6C((uint64_t)v11, 1LL, v5))
  {
    sub_10001B60C((uint64_t)v11, &qword_100130BC0);
    return 0LL;
  }

  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v11, v5);
  sub_10001B60C((uint64_t)v11, &qword_100130BC0);
  uint64_t v14 = URL.path.getter();
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNSpecialClassDStreamIdentifier);
  if (v18 == a1 && v17 == a2)
  {
    swift_bridgeObjectRelease(a2);
    goto LABEL_12;
  }

  uint64_t v20 = v17;
  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v18, v17, 0LL);
  swift_bridgeObjectRelease(v20);
  if ((v21 & 1) != 0)
  {
LABEL_12:
    sub_10000A1A0(0LL, &qword_1001317B8, &OBJC_CLASS___BMStoreConfig_ptr);
    uint64_t result = NSPageSize();
    if ((unsigned __int128)(result * (__int128)10LL) >> 64 == (10 * result) >> 63)
    {
      uint64_t result = (uint64_t)sub_100032574(v14, v16, 10 * result, 4LL);
      goto LABEL_14;
    }

    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }

  sub_10000A1A0(0LL, &qword_1001317B8, &OBJC_CLASS___BMStoreConfig_ptr);
  uint64_t result = NSPageSize();
  uint64_t result = (uint64_t)sub_1000325FC(v14, v16, 10 * result);
  if (result)
  {
LABEL_14:
    uint64_t v22 = (void *)result;
    swift_bridgeObjectRetain(a2);
    return sub_1000C62D8(a1, a2, v22);
  }

  return result;
}

void sub_10002FD7C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v2);
  uint64_t v54 = (uint64_t)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v53 - v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v53 - v8;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v53 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v53 - v14;
  uint64_t v16 = type metadata accessor for URL(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  int v53 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  char v21 = (char *)&v53 - v20;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v53 - v23;
  *(_BYTE *)(v1 + 1sub_10000AC58(v0 + 6) = 0;
  sub_100026CB8(v1 + qword_100134408, (uint64_t)v15, &qword_100130BC0);
  if (sub_100009E6C((uint64_t)v15, 1LL, v16) == 1)
  {
    sub_10001B60C((uint64_t)v15, &qword_100130BC0);
    id v25 = [(id)objc_opt_self(NSFileManager) defaultManager];
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNDaemonBundleIdentifier);
    uint64_t v28 = v27;
    sub_10003F9DC(v26, v27);

    swift_bridgeObjectRelease(v28);
    URL.appendingPathComponent(_:)(*(void *)(v1 + qword_100134400), *(void *)(v1 + qword_100134400 + 8));
    id v29 = *(void (**)(char *, uint64_t))(v17 + 8);
    v29(v21, v16);
    sub_100009E60((uint64_t)v6, 0LL, 1LL, v16);
    sub_100026C8C((uint64_t)v6, (uint64_t)v12, &qword_100130BC0);
    uint64_t v30 = v1 + qword_100135CD8;
    swift_beginAccess(v1 + qword_100135CD8, v56, 33LL, 0LL);
    uint64_t v31 = (uint64_t)v12;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v24, v15, v16);
    URL.appendingPathComponent(_:)(*(void *)(v1 + qword_100134400), *(void *)(v1 + qword_100134400 + 8));
    id v29 = *(void (**)(char *, uint64_t))(v17 + 8);
    v29(v24, v16);
    sub_100009E60((uint64_t)v12, 0LL, 1LL, v16);
    sub_100026C8C((uint64_t)v12, (uint64_t)v9, &qword_100130BC0);
    uint64_t v30 = v1 + qword_100135CD8;
    swift_beginAccess(v1 + qword_100135CD8, v56, 33LL, 0LL);
    uint64_t v31 = (uint64_t)v9;
  }

  sub_1000334E8(v31, v30);
  swift_endAccess(v56);
  uint64_t v32 = v1 + qword_100135CD8;
  swift_beginAccess(v1 + qword_100135CD8, v56, 0LL, 0LL);
  uint64_t v33 = v32;
  uint64_t v34 = v54;
  sub_100026CB8(v33, v54, &qword_100130BC0);
  if (sub_100009E6C(v34, 1LL, v16))
  {
    sub_10001B60C(v34, &qword_100130BC0);
    unint64_t v35 = sub_10000BFA4();
    uint64_t v36 = swift_allocError(&type metadata for StreamManagerError, v35, 0LL, 0LL);
    _BYTE *v37 = 1;
    swift_willThrow(v36);
    if (qword_100130118 != -1) {
      swift_once(&qword_100130118, sub_100028A34);
    }
    uint64_t v38 = type metadata accessor for Logger(0LL);
    sub_100008D98(v38, (uint64_t)qword_100135220);
    swift_errorRetain(v36);
    uint64_t v39 = swift_errorRetain(v36);
    uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v43 = swift_slowAlloc(32LL, -1LL);
      v55[0] = v43;
      *(_DWORD *)uint64_t v42 = 136315138;
      swift_getErrorValue(v36, v59, v58);
      uint64_t v44 = Error.localizedDescription.getter(v58[1], v58[2]);
      unint64_t v46 = v45;
      uint64_t v57 = sub_10000DE60(v44, v45, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v42 + 4, v42 + 12);
      swift_bridgeObjectRelease(v46);
      swift_errorRelease(v36);
      swift_errorRelease(v36);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "StreamManager initialization failed due to %s", v42, 0xCu);
      swift_arrayDestroy(v43, 1LL);
      swift_slowDealloc(v43, -1LL, -1LL);
      swift_slowDealloc(v42, -1LL, -1LL);

      swift_errorRelease(v36);
    }

    else
    {
      swift_errorRelease(v36);
      swift_errorRelease(v36);
      swift_errorRelease(v36);
    }
  }

  else
  {
    id v47 = v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v53, v34, v16);
    sub_10001B60C(v34, &qword_100130BC0);
    URL.path.getter(v48);
    uint64_t v50 = v49;
    v29(v47, v16);
    swift_bridgeObjectRelease(v50);
    uint64_t v51 = (uint64_t *)(v1 + qword_100134410);
    swift_beginAccess(v1 + qword_100134410, v55, 1LL, 0LL);
    uint64_t v52 = *v51;
    uint64_t *v51 = (uint64_t)&_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(v52);
    *(_BYTE *)(v1 + 1sub_10000AC58(v0 + 6) = 1;
  }

uint64_t sub_100030348@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v7);
  uint64_t v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = &v24[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  if (*(_BYTE *)(v3 + 16) == 1)
  {
    uint64_t v14 = v3 + qword_100135CD8;
    swift_beginAccess(v14, v24, 0LL, 0LL);
    sub_100026CB8(v14, (uint64_t)v9, &qword_100130BC0);
    if (sub_100009E6C((uint64_t)v9, 1LL, v10) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
      URL.appendingPathComponent(_:)(a1, a2);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      uint64_t v21 = 0LL;
      return sub_100009E60(a3, v21, 1LL, v10);
    }

    sub_10001B60C((uint64_t)v9, &qword_100130BC0);
  }

  if (qword_100130118 != -1) {
    swift_once(&qword_100130118, sub_100028A34);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = sub_100008D98(v15, (uint64_t)qword_100135220);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v20 = swift_slowAlloc(32LL, -1LL);
    uint64_t v26 = v20;
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v25 = sub_10000DE60(0x3A726F66284C5255LL, 0xE900000000000029LL, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v19 + 4, v19 + 12);
    _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "%s not executed due to failed initialization - nil directory",  v19,  0xCu);
    uint64_t v21 = 1LL;
    swift_arrayDestroy(v20, 1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {

    uint64_t v21 = 1LL;
  }

  return sub_100009E60(a3, v21, 1LL, v10);
}

void sub_100030604(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, double a5)
{
  if (*(_BYTE *)(v5 + 16) == 1)
  {
    uint64_t v11 = *(os_unfair_lock_s **)(v5 + qword_100134418);
    swift_retain(v11);
    os_unfair_lock_lock(v11 + 4);
    sub_100032674(a5, v5, a2, a3, a4, a1);
    os_unfair_lock_unlock(v11 + 4);
    swift_release(v11);
  }

  else
  {
    if (qword_100130118 != -1) {
      swift_once(&qword_100130118, sub_100028A34);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    uint64_t v13 = sub_100008D98(v12, (uint64_t)qword_100135220);
    osos_log_t log = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v16 = swift_slowAlloc(32LL, -1LL);
      uint64_t v19 = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      uint64_t v18 = sub_10000DE60(0xD00000000000001BLL, 0x80000001000F9A20LL, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v15 + 4, v15 + 12);
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v14,  "%s not executed due to failed initialization - nil config",  v15,  0xCu);
      swift_arrayDestroy(v16, 1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    else
    {
    }
  }

uint64_t sub_100030820(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(os_unfair_lock_s **)(v2 + qword_100134418);
  swift_retain(v5);
  os_unfair_lock_lock(v5 + 4);
  sub_100032894(v2, a1, a2);
  os_unfair_lock_unlock(v5 + 4);
  return swift_release(v5);
}

void sub_1000308A0()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNSpecialClassDStreamIdentifier);
  unint64_t v2 = v1;
  uint64_t v3 = sub_10002FB0C(v0, v1);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  swift_bridgeObjectRelease(v2);
  if (v5)
  {
    CFAbsoluteTime v8 = CFAbsoluteTimeGetCurrent() + -86400.0;
    uint64_t v9 = objc_autoreleasePoolPush();
    __chkstk_darwin(v9);
    double v12 = v8;
    sub_1000313E0(v3, v5, v7, 1LL, (uint64_t)sub_100033784, (uint64_t)v11);
    objc_autoreleasePoolPop(v9);

    swift_bridgeObjectRelease(v5);
  }

  CFAbsoluteTimeGetCurrent();
  double v12 = __chkstk_darwin(v10);
  sub_1000309D4(1LL, (uint64_t)sub_100033168, (uint64_t)v11);
}

void sub_1000309D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v90 = a1;
  uint64_t v91 = a2;
  uint64_t v7 = type metadata accessor for NSFastEnumerationIterator(0LL);
  uint64_t v88 = *(void *)(v7 - 8);
  uint64_t v89 = v7;
  __chkstk_darwin(v7);
  uint64_t v94 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100008DB0(&qword_100130BC0);
  uint64_t v10 = __chkstk_darwin(v9);
  double v12 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  os_log_type_t v14 = (char *)&v78 - v13;
  uint64_t v15 = type metadata accessor for URL(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v78 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v78 - v22;
  __chkstk_darwin(v21);
  double v93 = (char *)&v78 - v25;
  if (*(_BYTE *)(v5 + 16) != 1) {
    goto LABEL_4;
  }
  uint64_t v83 = v24;
  uint64_t v85 = a3;
  uint64_t v26 = v5 + qword_100135CD8;
  swift_beginAccess(v5 + qword_100135CD8, v97, 0LL, 0LL);
  sub_100026CB8(v26, (uint64_t)v14, &qword_100130BC0);
  if (sub_100009E6C((uint64_t)v14, 1LL, v15) == 1)
  {
    sub_10001B60C((uint64_t)v14, &qword_100130BC0);
LABEL_4:
    if (qword_100130118 != -1) {
      swift_once(&qword_100130118, sub_100028A34);
    }
    uint64_t v27 = type metadata accessor for Logger(0LL);
    uint64_t v28 = sub_100008D98(v27, (uint64_t)qword_100135220);
    id v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v32 = swift_slowAlloc(32LL, -1LL);
      v95[0] = v32;
      *(_DWORD *)uint64_t v31 = 136315138;
      uint64_t v98 = sub_10000DE60(0xD000000000000024LL, 0x80000001000F99A0LL, v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v31 + 4, v31 + 12);
      _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "%s not executed due to failed initialization - nil directory",  v31,  0xCu);
      swift_arrayDestroy(v32, 1LL);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    return;
  }

  uint64_t v33 = v93;
  uint64_t v86 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v86(v93, v14, v15);
  id v34 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v35 = NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(v33, 0LL, 0LL, 0LL, 0LL);

  if (v35)
  {
    uint64_t v84 = sub_100031284();
    uint64_t v87 = v36;
    unint64_t v37 = (void *)v35;
    uint64_t v38 = v94;
    id v79 = v37;
    uint64_t v39 = NSEnumerator.makeIterator()();
    NSFastEnumerationIterator.next()(v95, v39);
    if (!v96)
    {
LABEL_27:

      swift_release(v87);
      (*(void (**)(char *, uint64_t))(v88 + 8))(v38, v89);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v93, v15);
      return;
    }

    os_log_type_t v41 = (char *)&type metadata for Any + 8;
    *(void *)&__int128 v40 = 136315138LL;
    __int128 v78 = v40;
    uint64_t v82 = v4;
    uint64_t v92 = v16;
    uint64_t v80 = v5;
    uint64_t v81 = (char *)&type metadata for Any + 8;
    while (1)
    {
      if ((swift_dynamicCast(v12, v95, v41, v15, 6LL) & 1) != 0)
      {
        sub_100009E60((uint64_t)v12, 0LL, 1LL, v15);
        if (sub_100009E6C((uint64_t)v12, 1LL, v15) != 1)
        {
          v86(v20, v12, v15);
          if ((v84((uint64_t)v20) & 1) == 0)
          {
            if (qword_100130118 != -1) {
              swift_once(&qword_100130118, sub_100028A34);
            }
            uint64_t v42 = type metadata accessor for Logger(0LL);
            sub_100008D98(v42, (uint64_t)qword_100135220);
            uint64_t v43 = v92;
            uint64_t v44 = v83;
            uint64_t v45 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v92 + 16))(v83, v20, v15);
            unint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
            os_log_type_t v47 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v46, v47))
            {
              uint64_t v48 = swift_slowAlloc(12LL, -1LL);
              uint64_t v49 = swift_slowAlloc(32LL, -1LL);
              uint64_t v98 = v49;
              *(_DWORD *)uint64_t v48 = v78;
              sub_100008C18( (unint64_t *)&qword_100131820,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
              uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter(v15, v50);
              unint64_t v53 = v52;
              *(void *)(v48 + sub_10000AC58(v0 + 4) = sub_10000DE60(v51, v52, &v98);
              swift_bridgeObjectRelease(v53);
              (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v44, v15);
              _os_log_impl((void *)&_mh_execute_header, v46, v47, "Invalid streamURL detected %s", (uint8_t *)v48, 0xCu);
              swift_arrayDestroy(v49, 1LL);
              swift_slowDealloc(v49, -1LL, -1LL);
              swift_slowDealloc(v48, -1LL, -1LL);
            }

            else
            {
              (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v15);
            }

            uint64_t v5 = v80;
          }

          os_log_type_t v55 = objc_autoreleasePoolPush();
          uint64_t v56 = URL.lastPathComponent.getter(v55);
          unint64_t v58 = v57;
          uint64_t v59 = v5;
          uint64_t v60 = sub_10002FB0C(v56, v57);
          uint64_t v62 = v61;
          uint64_t v64 = v63;
          swift_bridgeObjectRelease(v58);
          if (v62)
          {
            sub_1000313E0(v60, v62, v64, v90, v91, v85);
            sub_1000331E4(v60, v62, v64);
          }

          objc_autoreleasePoolPop(v55);
          uint64_t v16 = v92;
          uint64_t v54 = (*(uint64_t (**)(char *, uint64_t))(v92 + 8))(v20, v15);
          os_log_type_t v41 = v81;
          uint64_t v5 = v59;
          uint64_t v38 = v94;
          goto LABEL_26;
        }
      }

      else
      {
        sub_100009E60((uint64_t)v12, 1LL, 1LL, v15);
      }

      sub_10001B60C((uint64_t)v12, &qword_100130BC0);
LABEL_26:
      NSFastEnumerationIterator.next()(v95, v54);
      if (!v96) {
        goto LABEL_27;
      }
    }
  }

  if (qword_100130118 != -1) {
    swift_once(&qword_100130118, sub_100028A34);
  }
  uint64_t v65 = type metadata accessor for Logger(0LL);
  sub_100008D98(v65, (uint64_t)qword_100135220);
  uint64_t v66 = (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 16))(v23, v93, v15);
  uint64_t v67 = (os_log_s *)Logger.logObject.getter(v66);
  os_log_type_t v68 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v67, v68))
  {
    BOOL v69 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v70 = swift_slowAlloc(32LL, -1LL);
    v95[0] = v70;
    *(_DWORD *)BOOL v69 = 136315138;
    uint64_t v92 = v16;
    sub_100008C18( (unint64_t *)&qword_100131820,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v72 = dispatch thunk of CustomStringConvertible.description.getter(v15, v71);
    unint64_t v74 = v73;
    uint64_t v98 = sub_10000DE60(v72, v73, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v69 + 4, v69 + 12);
    swift_bridgeObjectRelease(v74);
    uint64_t v75 = *(void (**)(char *, uint64_t))(v92 + 8);
    v75(v23, v15);
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "Failed to generate enumerator for directory %s", v69, 0xCu);
    swift_arrayDestroy(v70, 1LL);
    swift_slowDealloc(v70, -1LL, -1LL);
    swift_slowDealloc(v69, -1LL, -1LL);
  }

  else
  {
    uint64_t v75 = *(void (**)(char *, uint64_t))(v16 + 8);
    v75(v23, v15);
  }

  unint64_t v76 = sub_10000BFA4();
  swift_allocError(&type metadata for StreamManagerError, v76, 0LL, 0LL);
  *uint64_t v77 = 0;
  swift_willThrow();
  v75(v93, v15);
}

uint64_t (*sub_100031284())(uint64_t a1)
{
  uint64_t v0 = sub_100008DB0(&qword_100131828);
  uint64_t v1 = *(void *)(sub_100008DB0((uint64_t *)&unk_100131830) - 8);
  uint64_t v2 = swift_allocObject( v0,  ((*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
       + 5LL * *(void *)(v1 + 72),
         *(unsigned __int8 *)(v1 + 80) | 7LL);
  *(_OWORD *)(v2 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5B50;
  Regex.init(_regexString:version:)(0x2F706D742FLL, 0xE500000000000000LL, 1LL, &type metadata for Substring);
  Regex.init(_regexString:version:)(0x2F6C61636F6C2FLL, 0xE700000000000000LL, 1LL, &type metadata for Substring);
  Regex.init(_regexString:version:)(0x2F6B636F6C2FLL, 0xE600000000000000LL, 1LL, &type metadata for Substring);
  Regex.init(_regexString:version:)(0x7461646174656D2FLL, 0xEA00000000002F61LL, 1LL, &type metadata for Substring);
  Regex.init(_regexString:version:)(0x7D2C35317B645C2FLL, 0xE90000000000002FLL, 1LL, &type metadata for Substring);
  *(void *)(swift_allocObject(&unk_1001238E0, 24LL, 7LL) + 1sub_10000AC58(v0 + 6) = v2;
  return sub_100033238;
}

void sub_1000313E0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(_BYTE *)(v6 + 16) == 1)
  {
    uint64_t v13 = sub_1000C66A4(a1, a2, a3);
    unint64_t v15 = v14;
    if (qword_100130118 != -1) {
      swift_once(&qword_100130118, sub_100028A34);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_100008D98(v16, (uint64_t)qword_100135220);
    swift_bridgeObjectRetain(v15);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v36 = a5;
      uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v37 = a6;
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v21;
      *(_DWORD *)uint64_t v20 = 136315138;
      swift_bridgeObjectRetain(v15);
      uint64_t v41 = sub_10000DE60(v13, v15, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease_n(v15, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Pruning %s", v20, 0xCu);
      swift_arrayDestroy(v21, 1LL);
      uint64_t v22 = v21;
      a6 = v37;
      swift_slowDealloc(v22, -1LL, -1LL);
      uint64_t v23 = v20;
      a5 = v36;
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v15, 2LL);
    }

    id v29 = objc_allocWithZone(&OBJC_CLASS___BMStoreStream);
    swift_bridgeObjectRetain(a2);
    id v30 = a3;
    id v31 = sub_1000329BC(a1, a2, a3, 0LL);
    uint64_t v32 = swift_allocObject(&unk_100123868, 32LL, 7LL);
    *(void *)(v32 + 1sub_10000AC58(v0 + 6) = a5;
    *(void *)(v32 + 2sub_10000AC58(v0 + 4) = a6;
    uint64_t v33 = swift_allocObject(&unk_100123890, 32LL, 7LL);
    *(void *)(v33 + 1sub_10000AC58(v0 + 6) = sub_10003319C;
    *(void *)(v33 + 2sub_10000AC58(v0 + 4) = v32;
    aBlock[4] = (uint64_t)sub_1000331A8;
    uint64_t v40 = v33;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_100032968;
    aBlock[3] = (uint64_t)&unk_1001238A8;
    id v34 = _Block_copy(aBlock);
    uint64_t v35 = v40;
    swift_retain(v33);
    swift_release(v35);
    [v31 pruneWithReason:a4 usingPredicateBlock:v34];

    _Block_release(v34);
    LOBYTE(v31) = swift_isEscapingClosureAtFileLocation(v33, "", 112LL, 216LL, 36LL, 1LL);
    swift_release(v32);
    swift_release(v33);
  }

  else
  {
    if (qword_100130118 != -1) {
      swift_once(&qword_100130118, sub_100028A34);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    uint64_t v25 = sub_100008D98(v24, (uint64_t)qword_100135220);
    osos_log_t log = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v28;
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v41 = sub_10000DE60(0xD000000000000021LL, 0x80000001000F9970LL, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v27 + 4, v27 + 12);
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v26,  "%s not executed due to failed initialization - not initialized",  v27,  0xCu);
      swift_arrayDestroy(v28, 1LL);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    else
    {
    }
  }

uint64_t sub_100031860(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v7 = (uint64_t *)(v3 + qword_100134410);
  swift_beginAccess(v3 + qword_100134410, v46, 0LL, 0LL);
  uint64_t v8 = *v7;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v8);
  uint64_t v9 = sub_100011C98(a1, a2, v8);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v8);
  if (v9)
  {
    uint64_t v10 = sub_1000C66A4(a1, a2, a3);
    unint64_t v12 = v11;
    if (qword_100130118 != -1) {
      swift_once(&qword_100130118, sub_100028A34);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_100008D98(v13, (uint64_t)qword_100135220);
    uint64_t v14 = swift_bridgeObjectRetain(v12);
    unint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v18 = swift_slowAlloc(32LL, -1LL);
      v44[0] = v18;
      *(_DWORD *)uint64_t v17 = 136315138;
      swift_bridgeObjectRetain(v12);
      uint64_t v45 = sub_10000DE60(v10, v12, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease_n(v12, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Returned writer for %s", v17, 0xCu);
      swift_arrayDestroy(v18, 1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v12, 2LL);
    }
  }

  else
  {
    id v19 = objc_allocWithZone(&OBJC_CLASS___BMStreamDatastore);
    swift_bridgeObjectRetain(a2);
    id v20 = a3;
    id v21 = sub_100032A40(a1, a2, 1LL, a3);
    if (v21)
    {
      uint64_t v9 = (uint64_t)v21;
      id v22 = v21;
      uint64_t v23 = sub_1000C66A4(a1, a2, v20);
      unint64_t v25 = v24;
      if (qword_100130118 != -1) {
        swift_once(&qword_100130118, sub_100028A34);
      }
      uint64_t v26 = type metadata accessor for Logger(0LL);
      sub_100008D98(v26, (uint64_t)qword_100135220);
      uint64_t v27 = swift_bridgeObjectRetain(v25);
      uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
      os_log_type_t v29 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v42 = v23;
        id v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        id v43 = v22;
        v44[0] = swift_slowAlloc(32LL, -1LL);
        uint64_t v31 = v44[0];
        *(_DWORD *)id v30 = 136315138;
        swift_bridgeObjectRetain(v25);
        uint64_t v45 = sub_10000DE60(v42, v25, v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v30 + 4, v30 + 12);
        swift_bridgeObjectRelease_n(v25, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Created writer for %s", v30, 0xCu);
        swift_arrayDestroy(v31, 1LL);
        uint64_t v32 = v31;
        id v22 = v43;
        swift_slowDealloc(v32, -1LL, -1LL);
        swift_slowDealloc(v30, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v25, 2LL);
      }

      uint64_t v39 = sub_10000A1A0(0LL, (unint64_t *)&unk_100131850, &OBJC_CLASS___LNTranscriptActionRecord_ptr);
      [v22 updateMetadata:swift_getObjCClassFromMetadata(v39)];
      swift_beginAccess(v7, v44, 33LL, 0LL);
      swift_bridgeObjectRetain(a2);
      id v40 = v22;
      sub_10003E2D0();
      swift_endAccess(v44);

      swift_bridgeObjectRelease(a2);
    }

    else
    {
      if (qword_100130118 != -1) {
        swift_once(&qword_100130118, sub_100028A34);
      }
      uint64_t v33 = type metadata accessor for Logger(0LL);
      sub_100008D98(v33, (uint64_t)qword_100135220);
      swift_bridgeObjectRetain_n(a2, 2LL);
      id v34 = v20;
      uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
      os_log_type_t v36 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v38 = swift_slowAlloc(32LL, -1LL);
        v44[0] = v38;
        *(_DWORD *)uint64_t v37 = 136315138;
        swift_bridgeObjectRetain(a2);
        uint64_t v45 = sub_10000DE60(a1, a2, v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v37 + 4, v37 + 12);

        swift_bridgeObjectRelease_n(a2, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Biome stream writer for %s returned nil", v37, 0xCu);
        swift_arrayDestroy(v38, 1LL);
        swift_slowDealloc(v38, -1LL, -1LL);
        swift_slowDealloc(v37, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(a2, 2LL);
      }

      return 0LL;
    }
  }

  return v9;
}

uint64_t sub_100031E38()
{
  *(void *)(v1 + 1sub_10000AC58(v0 + 6) = v0;
  return swift_task_switch(sub_100031E50, v0, 0LL);
}

uint64_t sub_100031E50()
{
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_100031EA8()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for PruneTranscriptService()
{
  return objc_opt_self(&OBJC_CLASS____TtC10LinkDaemon22PruneTranscriptService);
}

uint64_t sub_100031EEC()
{
  return v0;
}

uint64_t sub_100031EF8()
{
  return sub_100031EEC();
}

unint64_t sub_100031F10()
{
  return 0xD000000000000020LL;
}

uint64_t sub_100031F2C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_100131814);
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100031F74;
  return sub_100031E38();
}

uint64_t sub_100031F74(char a1)
{
  if (v1) {
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
  else {
    return (*(uint64_t (**)(void))(v2 + 8))(a1 & 1);
  }
}

void sub_100031FC0(uint64_t a1)
{
}

uint64_t sub_100031FC8()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100032004(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc(dword_10013178C);
  *(void *)(v2 + 1sub_10000AC58(v0 + 6) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_100012AB0;
  return sub_1000293A8(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_100032090()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(LNTranscriptErrorDomain);
  qword_100135248 = result;
  unk_100135250 = v1;
  return result;
}

uint64_t *sub_1000320BC()
{
  if (qword_100130128 != -1) {
    swift_once(&qword_100130128, sub_100032090);
  }
  return &qword_100135248;
}

uint64_t sub_1000320FC(char a1)
{
  return qword_1000F5D70[a1];
}

uint64_t sub_100032110(uint64_t a1)
{
  else {
    return (0x4060503020100uLL >> (8 * (a1 + 24)));
  }
}

BOOL sub_10003213C(char *a1, char *a2)
{
  return sub_100078288(*a1, *a2);
}

Swift::Int sub_100032148()
{
  return sub_100032150(*v0);
}

Swift::Int sub_100032150(char a1)
{
  return Hasher._finalize()();
}

void sub_1000321A0(uint64_t a1)
{
}

void sub_1000321A8(uint64_t a1, char a2)
{
}

Swift::Int sub_1000321D8(uint64_t a1)
{
  return sub_1000321E0(a1, *v1);
}

Swift::Int sub_1000321E0(uint64_t a1, char a2)
{
  return Hasher._finalize()();
}

uint64_t sub_10003222C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100032110(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100032254@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000320FC(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_10003227C(uint64_t a1)
{
  unint64_t v2 = sub_1000336D0();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000322A4(uint64_t a1)
{
  unint64_t v2 = sub_1000336D0();
  unint64_t v3 = sub_10003370C();
  unint64_t v4 = sub_100033748();
  return Error<>._code.getter(a1, v2, v3, v4);
}

uint64_t sub_1000322EC()
{
  uint64_t v0 = qword_100135248;
  swift_bridgeObjectRetain(unk_100135250);
  return v0;
}

uint64_t sub_100032324()
{
  return sub_1000320FC(*v0);
}

uint64_t sub_100032330(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v23 - v9;
  if (qword_100130418 != -1) {
    swift_once(&qword_100130418, sub_1000C2BC0);
  }
  id v11 = (id)qword_100135C90;
  swift_unknownObjectRetain(a1);
  OSSignpostID.init(log:object:)(v11, a1);
  if (qword_100130410 != -1) {
    swift_once(&qword_100130410, sub_1000C2B9C);
  }
  uint64_t v12 = type metadata accessor for OSSignposter(0LL);
  sub_100008D98(v12, (uint64_t)qword_100135C78);
  unint64_t v13 = sub_1000C2BEC(a2);
  char v15 = v14;
  os_log_type_t v16 = (os_log_s *)OSSignposter.logHandle.getter();
  os_signpost_type_t v17 = static os_signpost_type_t.begin.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    goto LABEL_14;
  }
  if ((v15 & 1) == 0)
  {
    if (v13)
    {
LABEL_13:
      id v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v19 = 0;
      os_signpost_id_t v20 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, v17, v20, (const char *)v13, "", v19, 2u);
      swift_slowDealloc(v19, -1LL, -1LL);
LABEL_14:

      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
      uint64_t v21 = type metadata accessor for OSSignpostIntervalState(0LL);
      swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
      uint64_t v22 = OSSignpostIntervalState.init(id:isOpen:)(v8, 1LL);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      return v22;
    }

    __break(1u);
  }

  if (HIDWORD(v13))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  if (v13 >> 11 != 27)
  {
    if (WORD1(v13) <= 0x10u)
    {
      unint64_t v13 = (unint64_t)&v24;
      goto LABEL_13;
    }

    goto LABEL_16;
  }

id sub_100032574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v4));
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v10 = [v8 initWithStoreBasePath:v9 segmentSize:a3 protectionClass:a4];

  return v10;
}

id sub_1000325FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3));
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v8 = [v6 initWithStoreBasePath:v7 segmentSize:a3];

  return v8;
}

void sub_100032674(double a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, uint64_t a6)
{
  id v11 = (void *)sub_100031860(a3, a4, a5);
  if (v11)
  {
    uint64_t v12 = v11;
    if ([v11 writeEventWithEventBody:a6 timestamp:a1])
    {
LABEL_7:

      return;
    }

    if (qword_100130118 != -1) {
      swift_once(&qword_100130118, sub_100028A34);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_100008D98(v13, (uint64_t)qword_100135220);
    swift_bridgeObjectRetain_n(a4, 2LL);
    id v14 = a5;
    char v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      os_signpost_type_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v18 = swift_slowAlloc(32LL, -1LL);
      uint64_t v20 = v18;
      *(_DWORD *)os_signpost_type_t v17 = 136315138;
      swift_bridgeObjectRetain(a4);
      uint64_t v19 = sub_10000DE60(a3, a4, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v17 + 4, v17 + 12);

      swift_bridgeObjectRelease_n(a4, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Biome stream writer for %s failed to write", v17, 0xCu);
      swift_arrayDestroy(v18, 1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);

      goto LABEL_7;
    }

    swift_bridgeObjectRelease_n(a4, 2LL);
  }

void sub_100032894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)sub_100032C1C(a2, a3);
  swift_endAccess(v6);
  swift_bridgeObjectRelease(a3);
}

uint64_t sub_10003291C(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (!a1) {
    return 1LL;
  }
  id v4 = a1;
  LOBYTE(a3) = a3();

  return a3 & 1;
}

uint64_t sub_100032968(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(void *, uint64_t))(a1 + 32);
  id v6 = a2;
  LOBYTE(a3) = v5(a2, a3);

  return a3 & 1;
}

id sub_1000329BC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (a4) {
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(a4);
  }
  else {
    uint64_t ObjCClassFromMetadata = 0LL;
  }
  id v10 = [v4 initWithPrivateStreamIdentifier:v8 storeConfig:a3 eventDataClass:ObjCClassFromMetadata];

  return v10;
}

id sub_100032A40(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v9 = [v4 initWithStream:v8 permission:a3 config:a4];

  return v9;
}

uint64_t sub_100032AB0(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_100032AD0(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  unint64_t v5 = sub_100016144(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v16 = *v2;
  uint64_t v8 = *v2;
  *unint64_t v2 = 0x8000000000000000LL;
  Swift::Int v9 = *(void *)(v8 + 24);
  sub_100008DB0((uint64_t *)&unk_1001306F0);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v9);
  uint64_t v10 = *(void *)(v16 + 48);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * v5,  v11);
  uint64_t v12 = *(void *)(*(void *)(v16 + 56) + 8 * v5);
  uint64_t v13 = sub_10000A1A0(0LL, (unint64_t *)&unk_1001317E0, &OBJC_CLASS___NSXPCConnection_ptr);
  sub_100008C18( &qword_100130E40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  _NativeDictionary._delete(at:)(v5, v16, v11, v13);
  uint64_t v14 = *v2;
  *unint64_t v2 = v16;
  swift_bridgeObjectRelease(v14);
  return v12;
}

uint64_t sub_100032C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  uint64_t v7 = sub_100015F98(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v16 = *v3;
  uint64_t v10 = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  Swift::Int v11 = *(void *)(v10 + 24);
  sub_100008DB0(&qword_1001317A0);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v11);
  swift_bridgeObjectRelease(*(void *)(*(void *)(v16 + 48) + 16 * v7 + 8));
  uint64_t v12 = *(void *)(*(void *)(v16 + 56) + 8 * v7);
  uint64_t v13 = sub_100008DB0((uint64_t *)&unk_1001317A8);
  _NativeDictionary._delete(at:)(v7, v16, &type metadata for String, v13);
  uint64_t v14 = *v3;
  *uint64_t v3 = v16;
  swift_bridgeObjectRelease(v14);
  return v12;
}

double sub_100032D28@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain(*v4);
  sub_1000338A4();
  sub_100033840();
  if ((a2 & 1) != 0)
  {
    swift_isUniquelyReferenced_nonNull_native(*v4);
    *(void *)uint64_t v28 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    int v8 = sub_100008DB0(&qword_100130920);
    BOOL v16 = sub_1000337F0(v8, v9, v10, v11, v12, v13, v14, v15, v26, v28[0]);
    sub_100033850(v16, v17, v18, v19, v20, v21, v22, v23, v27, v29);
    sub_10000AC78((_OWORD *)(*(void *)(a2 + 56) + 32 * a1), a3);
    _NativeDictionary._delete(at:)(a1, a2, &type metadata for String, (char *)&type metadata for Any + 8);
    uint64_t v24 = *v4;
    *uint64_t v4 = a2;
    swift_bridgeObjectRelease(v24);
  }

  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }

  return result;
}

uint64_t sub_100032E14()
{
  if ((v1 & 1) != 0)
  {
    sub_100033934();
    sub_100033804();
    int v3 = sub_100008DB0(&qword_100130650);
    BOOL v11 = sub_1000337F0(v3, v4, v5, v6, v7, v8, v9, v10, v28, v30);
    sub_100033850(v11, v12, v13, v14, v15, v16, v17, v18, v29, v31);
    uint64_t v19 = *(void *)(v1 + 56);
    uint64_t v20 = sub_1000338B4();
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32LL))( v0,  v19 + *(void *)(*(void *)(v20 - 8) + 72LL) * v2,  v20);
    sub_10003391C(v21, v22, (uint64_t)&type metadata for String);
    sub_1000338CC();
    uint64_t v23 = sub_10003393C();
  }

  else
  {
    sub_1000338B4();
    uint64_t v23 = sub_10001C0D4();
  }

  return sub_100033864(v23, v24, v25, v26);
}

uint64_t sub_100032EB0()
{
  if ((v3 & 1) != 0)
  {
    sub_100033934();
    sub_100033804();
    int v4 = sub_100008DB0((uint64_t *)&unk_100130670);
    sub_1000337F0(v4, v5, v6, v7, v8, v9, v10, v11, v19, v20);
    sub_10000A1D8(*(void *)(*(void *)(v21 + 48) + 16 * v2), *(void *)(*(void *)(v21 + 48) + 16 * v2 + 8));
    uint64_t v12 = *(void *)(v21 + 56);
    uint64_t v13 = sub_100008DB0((uint64_t *)&unk_100132690);
    sub_100026C8C(v12 + *(void *)(*(void *)(v13 - 8) + 72LL) * v2, v0, (uint64_t *)&unk_100132690);
    sub_10000A230();
    _NativeDictionary._delete(at:)(v2, v21, &type metadata for Data, v13);
    sub_1000338CC();
    uint64_t v14 = v0;
    uint64_t v15 = 0LL;
    uint64_t v16 = 1LL;
    uint64_t v17 = v13;
  }

  else
  {
    sub_100008DB0((uint64_t *)&unk_100132690);
    uint64_t v14 = sub_10001C0D4();
  }

  return sub_100009E60(v14, v15, v16, v17);
}

uint64_t sub_100032FA8()
{
  if ((v1 & 1) != 0)
  {
    sub_100033934();
    sub_100033804();
    int v3 = sub_100008DB0(&qword_1001333B0);
    BOOL v11 = sub_1000337F0(v3, v4, v5, v6, v7, v8, v9, v10, v28, v30);
    sub_100033850(v11, v12, v13, v14, v15, v16, v17, v18, v29, v31);
    uint64_t v19 = *(void *)(v1 + 56);
    uint64_t v20 = type metadata accessor for LNBundleRecord(0LL);
    uint64_t v21 = sub_10001B5C8(v19 + *(void *)(*(void *)(v20 - 8) + 72LL) * v2, v0);
    sub_10003391C(v21, v22, (uint64_t)&type metadata for String);
    sub_1000338CC();
    uint64_t v23 = sub_10003393C();
  }

  else
  {
    type metadata accessor for LNBundleRecord(0LL);
    uint64_t v23 = sub_10001C0D4();
  }

  return sub_100033864(v23, v24, v25, v26);
}

uint64_t sub_100033048(void *a1)
{
  id v1 = [a1 bundleIdentifier];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void sub_1000330A8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  [a3 setBundleIdentifier:v5];
}

uint64_t sub_1000330F8(void *a1)
{
  id v2 = [a1 activityIdentifier];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

BOOL sub_100033168(void *a1)
{
  double v2 = *(double *)(v1 + 16);
  [a1 timestamp];
  return v3 < v2;
}

uint64_t sub_10003319C(void *a1, uint64_t a2)
{
  return sub_10003291C(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_1000331A8()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_1000331CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000331DC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_1000331E4(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
  }

uint64_t sub_100033214()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100033238(uint64_t a1)
{
  return sub_1000C6508(a1, *(void *)(v1 + 16));
}

uint64_t sub_100033240@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1LL;
  uint64_t v3 = -1LL << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1LL << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0LL;
  a2[4] = v2 & v5;
  return result;
}

void sub_100033278(uint64_t a1)
{
}

uint64_t sub_100033280()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000332A4(uint64_t a1, uint64_t a2)
{
}

unint64_t sub_1000332AC()
{
  unint64_t result = qword_100131840;
  if (!qword_100131840)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F5D28, &type metadata for TranscriptError);
    atomic_store(result, (unint64_t *)&qword_100131840);
  }

  return result;
}

uint64_t sub_1000332EC()
{
  return sub_10003334C(sub_10002F360);
}

uint64_t sub_1000332FC()
{
  uint64_t v3 = v1 + v2;
  uint64_t v5 = v4 | 7;

  sub_10000EA20();
  return swift_deallocObject(v0, v3, v5);
}

uint64_t sub_10003334C(uint64_t (*a1)(void, uint64_t))
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(sub_1000338B4() - 8) + 80LL);
  return a1(*(void *)(v1 + 16), v1 + ((v2 + 24) & ~v2));
}

uint64_t sub_100033388(uint64_t a1)
{
  return sub_10002F398(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100033390()
{
  uint64_t v3 = v2 | 7;
  unint64_t v5 = (v4 + v1 + 7) & 0xFFFFFFFFFFFFFFF8LL;

  sub_10000EA20();
  swift_release(*(void *)(v0 + v5 + 8));
  return swift_deallocObject(v0, v5 + 16, v3);
}

void sub_100033400(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_1000338B4() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_10002F3C4( a1,  *(void *)(v1 + 16),  v1 + v4,  *(void (**)(_BYTE *, uint64_t))(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100033454(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  uint64_t v2 = 64LL;
  for (uint64_t i = 10LL; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64LL;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

id sub_1000334D4(void *a1)
{
  return sub_100028540(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1000334DC(void *a1)
{
  return sub_10002859C(a1, *(uint64_t (**)(void))(v1 + 16), *(void *)(v1 + 24), *(uint64_t **)(v1 + 32));
}

uint64_t sub_1000334E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008DB0(&qword_100130BC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for TranscriptError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for TranscriptError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(vsub_10000AC58(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_10000AC58(v0 + 4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_100033604 + 4 * byte_1000F5B65[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100033638 + 4 * byte_1000F5B60[v4]))();
}

uint64_t sub_100033638(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100033640(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100033648LL);
  }
  return result;
}

uint64_t sub_100033654(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10003365CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_100033660(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100033668(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100033674(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for TranscriptError()
{
  return &type metadata for TranscriptError;
}

unint64_t sub_100033694()
{
  unint64_t result = qword_100131870;
  if (!qword_100131870)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F5D00, &type metadata for TranscriptError);
    atomic_store(result, (unint64_t *)&qword_100131870);
  }

  return result;
}

unint64_t sub_1000336D0()
{
  unint64_t result = qword_100131878;
  if (!qword_100131878)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F5C48, &type metadata for TranscriptError);
    atomic_store(result, (unint64_t *)&qword_100131878);
  }

  return result;
}

unint64_t sub_10003370C()
{
  unint64_t result = qword_100131880;
  if (!qword_100131880)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F5C88, &type metadata for TranscriptError);
    atomic_store(result, (unint64_t *)&qword_100131880);
  }

  return result;
}

unint64_t sub_100033748()
{
  unint64_t result = qword_100131888;
  if (!qword_100131888)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100131888);
  }

  return result;
}

uint64_t sub_1000337A4( int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12)
{
  a11 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a11, &a12, v13, v12);
}

uint64_t sub_1000337C0()
{
  return swift_bridgeObjectRetain(*v0);
}

void sub_1000337DC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

BOOL sub_1000337F0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

void sub_100033804()
{
  *uint64_t v0 = 0x8000000000000000LL;
}

uint64_t sub_100033820()
{
  return swift_slowAlloc(8LL, -1LL);
}

BOOL sub_100033830(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100033840()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100033850( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_bridgeObjectRelease(*(void *)(*(void *)(a10 + 48) + 16 * v10 + 8));
}

uint64_t sub_100033864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100009E60(a1, a2, a3, a4);
}

uint64_t sub_100033878()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100033888(id a1)
{
}

uint64_t sub_100033898()
{
  return Logger.logObject.getter();
}

uint64_t sub_1000338A4()
{
  return sub_100015F98(v1, v0);
}

uint64_t sub_1000338B4()
{
  return type metadata accessor for UUID(0LL);
}

float *sub_1000338BC(float *result, float a2)
{
  *unint64_t result = a2;
  return result;
}

uint64_t sub_1000338CC()
{
  uint64_t v2 = *v1;
  *uint64_t v1 = v0;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_1000338D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return swift_dynamicCast(&a9, &a10, v10, a4, 0LL);
}

id sub_1000338EC(uint64_t a1, uint64_t a2)
{
  return v2;
}

  ;
}

uint64_t sub_10003391C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _NativeDictionary._delete(at:)(v4, v3, a3, v5);
}

uint64_t sub_10003392C()
{
  return static os_log_type_t.debug.getter();
}

uint64_t sub_100033934()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_10003393C()
{
  return v0;
}

uint64_t sub_100033950(uint64_t a1, uint64_t a2)
{
  return sub_100029960(0xD000000000000024LL, a2);
}

uint64_t sub_10003395C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_errorRelease(a10);
}

unint64_t sub_100033964(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  v21[0] = 95LL;
  v21[1] = 0xE100000000000000LL;
  v20[2] = v21;
  unint64_t v4 = sub_100033DA4(sub_100033F0C, (uint64_t)v20, a1, a2);
  if ((v5 & 1) != 0) {
    goto LABEL_6;
  }
  unint64_t v6 = v4;
  if (!(v4 >> 14)) {
    goto LABEL_6;
  }
  unint64_t v7 = String.index(after:)(v4, a1, v2);
  uint64_t v8 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000LL) == 0) {
    uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v7 >> 14 == 4 * v8)
  {
LABEL_6:
    unint64_t v9 = sub_100033F28();
    swift_allocError(&type metadata for AppShortcutIdentifierExtractionError, v9, 0LL, 0LL);
    *(void *)uint64_t v10 = a1;
    *(void *)(v10 + 8) = v2;
    *(_BYTE *)(v10 + 1sub_10000AC58(v0 + 6) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow(v11);
  }

  else
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = String.subscript.getter(15LL, v6);
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    unint64_t v2 = static String._fromSubstring(_:)(v12, v14, v16, v18);
    swift_bridgeObjectRelease();
  }

  return v2;
}

uint64_t sub_100033AA8(uint64_t a1, unint64_t a2, char a3)
{
  if (!a3)
  {
    _StringGuts.grow(_:)(36LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t v11 = 0xD000000000000022LL;
    uint64_t v8 = a1;
    unint64_t v9 = a2;
    goto LABEL_5;
  }

  if (a3 == 1)
  {
    unint64_t v11 = 0LL;
    _StringGuts.grow(_:)(61LL);
    v12._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
    v12._object = (void *)0x80000001000F9A80LL;
    sub_100034194(v12);
    v13._uint64_t countAndFlagsBits = sub_100034184();
    object = v13._object;
    sub_100034194(v13);
    swift_bridgeObjectRelease(object);
    v6._uint64_t countAndFlagsBits = 0x6E615278616D202CLL;
    v6._object = (void *)0xEB00000000203A6BLL;
    String.append(_:)(v6);
    v14._uint64_t countAndFlagsBits = sub_100034184();
    unint64_t v7 = v14._object;
    sub_100034194(v14);
    swift_bridgeObjectRelease(v7);
    uint64_t v8 = 41LL;
    unint64_t v9 = 0xE100000000000000LL;
LABEL_5:
    String.append(_:)(*(Swift::String *)&v8);
    return v11;
  }

  return 0x6C616E7265746E49LL;
}

uint64_t sub_100033C10(uint64_t a1, uint64_t a2, char a3)
{
  return qword_1000F5EE8[a3];
}

uint64_t sub_100033C28(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v13 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  uint64_t v6 = sub_100033AA8(a1, a2, a3);
  uint64_t v8 = v7;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  v12[3] = &type metadata for String;
  v12[0] = v6;
  v12[1] = v8;
  sub_10003A6A8((uint64_t)v12, v9, v10);
  return v13;
}

BOOL sub_100033CDC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  return qword_1000F5EE8[a3] == qword_1000F5EE8[a6];
}

uint64_t sub_100033D00()
{
  return sub_100033C24(*(void *)v0, *(void *)(v0 + 8), *(unsigned __int8 *)(v0 + 16));
}

unint64_t sub_100033D0C()
{
  return 0xD000000000000026LL;
}

uint64_t sub_100033D28(uint64_t a1, uint64_t a2)
{
  return sub_100033C10(a1, a2, *(_BYTE *)(v2 + 16));
}

uint64_t sub_100033D30()
{
  return sub_100033C28(*(void *)v0, *(void *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_100033D3C()
{
  return sub_100033AA8(*(void *)v0, *(void *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

BOOL sub_100033D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100033CDC(a1, a2, *(_BYTE *)(a1 + 16), a4, a5, *(_BYTE *)(a2 + 16));
}

uint64_t sub_100033D54(uint64_t a1)
{
  unint64_t v2 = sub_100034148();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100033D7C(uint64_t a1)
{
  unint64_t v2 = sub_100034148();
  return Error<>._code.getter(a1, v2);
}

unint64_t sub_100033DA4( uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0LL;
  }
  uint64_t v9 = 7LL;
  if (((a4 >> 60) & ((a3 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v9 = 11LL;
  }
  unint64_t v10 = v9 | (v5 << 16);
  while (1)
  {
    unint64_t v10 = String.index(before:)(v10, a3, a4);
    uint64_t v11 = String.subscript.getter(v10, a3, a4);
    uint64_t v13 = v12;
    v17[0] = v11;
    v17[1] = v12;
    char v14 = a1(v17);
    if (v4) {
      break;
    }
    char v15 = v14;
    swift_bridgeObjectRelease(v13);
    if ((v15 & 1) != 0) {
      return v10;
    }
    if (v10 < 0x4000) {
      return 0LL;
    }
  }

  swift_bridgeObjectRelease(v13);
  return v10;
}

uint64_t sub_100033EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL) & 1;
  }
}

uint64_t sub_100033EE4(uint64_t *a1, uint64_t *a2)
{
  return sub_100033EA4(*a1, a1[1], *a2, a2[1]) & 1;
}

uint64_t sub_100033F0C(uint64_t *a1)
{
  return sub_100033EE4(a1, *(uint64_t **)(v1 + 16)) & 1;
}

unint64_t sub_100033F28()
{
  unint64_t result = qword_100131890;
  if (!qword_100131890)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F5EA0, &type metadata for AppShortcutIdentifierExtractionError);
    atomic_store(result, (unint64_t *)&qword_100131890);
  }

  return result;
}

uint64_t sub_100033F68(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t destroy for AppShortcutIdentifierExtractionError(uint64_t a1)
{
  return sub_100033F8C(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_100033F8C(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t _s10LinkDaemon36AppShortcutIdentifierExtractionErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_100033F68(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 1sub_10000AC58(v0 + 6) = v5;
  return a1;
}

uint64_t assignWithCopy for AppShortcutIdentifierExtractionError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_100033F68(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 1sub_10000AC58(v0 + 6) = v5;
  sub_100033F8C(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AppShortcutIdentifierExtractionError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 1sub_10000AC58(v0 + 6) = v3;
  sub_100033F8C(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppShortcutIdentifierExtractionError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppShortcutIdentifierExtractionError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 1sub_10000AC58(v0 + 6) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 1sub_10000AC58(v0 + 7) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 1sub_10000AC58(v0 + 7) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 1sub_10000AC58(v0 + 6) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_100034104(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_10003411C(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + 1sub_10000AC58(v0 + 6) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AppShortcutIdentifierExtractionError()
{
  return &type metadata for AppShortcutIdentifierExtractionError;
}

unint64_t sub_100034148()
{
  unint64_t result = qword_100131898;
  if (!qword_100131898)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F5E18, &type metadata for AppShortcutIdentifierExtractionError);
    atomic_store(result, (unint64_t *)&qword_100131898);
  }

  return result;
}

uint64_t sub_100034184()
{
  return dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
}

void sub_100034194(Swift::String a1)
{
}

uint64_t sub_10003419C(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 16);
  if (v1 >= 4) {
    return 3LL;
  }
  else {
    return 0x2010003u >> (8 * v1);
  }
}

BOOL static Connection.Operation.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void sub_1000341D0(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int sub_1000341F4(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL sub_100034238(char *a1, char *a2)
{
  return static Connection.Operation.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_100034244()
{
  return sub_1000341F4(*v0);
}

void sub_10003424C(uint64_t a1)
{
}

uint64_t sub_100034254(char a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 1sub_10000AC58(v0 + 6) = 0LL;
  *(_BYTE *)(v4 + 2sub_10000AC58(v0 + 4) = 1;
  *(void *)(v4 + 32) = a3;
  *(void *)(v4 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = a4;
  *(_BYTE *)(v4 + 48) = a1;
  uint64_t v8 = swift_allocObject(&unk_100123DA8, 24LL, 7LL);
  swift_weakInit(v8 + 16, v4);
  uint64_t v9 = (void *)swift_allocObject(&unk_100123DD0, 40LL, 7LL);
  v9[2] = v8;
  v9[3] = a3;
  void v9[4] = a4;
  v13[4] = sub_100034954;
  v13[5] = v9;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256LL;
  void v13[2] = sub_1000346BC;
  v13[3] = &unk_100123DE8;
  unint64_t v10 = _Block_copy(v13);
  swift_retain_n(a4, 2LL);
  swift_release();
  uint64_t v11 = os_state_add_handler(a2, v10);

  swift_release();
  _Block_release(v10);
  *(void *)(v4 + 1sub_10000AC58(v0 + 6) = v11;
  *(_BYTE *)(v4 + 2sub_10000AC58(v0 + 4) = 0;
  return v4;
}

uint64_t sub_100034370(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v14, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v5);
  if (!Strong) {
    return 0LL;
  }
  uint64_t v7 = Strong;
  if (*(_BYTE *)(Strong + 48) == 1 && (*(_BYTE *)(Strong + 24) & 1) == 0)
  {
    uint64_t v8 = *(void *)(Strong + 16);
    *(void *)(v7 + 1sub_10000AC58(v0 + 6) = 0LL;
    *(_BYTE *)(v7 + 2sub_10000AC58(v0 + 4) = 1;
    os_state_remove_handler(v8);
  }

  uint64_t v9 = sub_10003419C(a1);
  uint64_t v10 = a3(v9);
  if (v11) {
    uint64_t v12 = sub_100034428(v10, v11);
  }
  else {
    uint64_t v12 = 0LL;
  }
  swift_release();
  return v12;
}

uint64_t sub_100034428(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  __src[0] = 0LL;
  id v6 = [v4 dataWithPropertyList:isa format:200 options:0 error:__src];

  id v7 = __src[0];
  if (!v6)
  {
    uint64_t v17 = v7;
    swift_bridgeObjectRelease();
    uint64_t v18 = _convertNSErrorToError(_:)(v17);

    swift_willThrow(v19);
    swift_errorRelease(v18);
    return 0LL;
  }

  uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
  unint64_t v10 = v9;

  uint64_t v11 = Data.count.getter(v8, v10);
  BOOL v12 = __OFADD__(v11, 200LL);
  size_t v13 = v11 + 200;
  if (v12) {
    __break(1u);
  }
  char v14 = (char *)calloc(v13, 1uLL);
  if (!v14)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }

  bzero((char *)__src + 4, 0xC4uLL);
  LODWORD(__src[0]) = 1;
  sub_1000349A4(a1, a2, (char *)&__src[17], (uint64_t)&v24);
  swift_bridgeObjectRelease();
  unint64_t v15 = Data.count.getter(v8, v10);
  if ((v15 & 0x8000000000000000LL) != 0)
  {
    uint64_t v21 = "Negative value is not representable";
    uint64_t v22 = 35LL;
  }

  else
  {
    if (!HIDWORD(v15))
    {
      HIDWORD(__src[0]) = v15;
      memcpy(v14, __src, 0xC8uLL);
      uint64_t v16 = Data.count.getter(v8, v10);
      Data.copyBytes(to:count:)(v14 + 200, v16, v8, v10);
LABEL_9:
      sub_10000A1D8(v8, v10);
      return (uint64_t)v14;
    }

    uint64_t v21 = "Not enough bits to represent the passed value";
    uint64_t v22 = 45LL;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v21,  v22,  2LL,  "Swift/Integers.swift",  20LL);
  __break(1u);
  return result;
}

uint64_t sub_1000346BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  uint64_t v5 = v4(a2);
  swift_release(v3);
  return v5;
}

uint64_t sub_100034704()
{
  if ((*(_BYTE *)(v0 + 24) & 1) == 0) {
    os_state_remove_handler(*(void *)(v0 + 16));
  }
  swift_release(*(void *)(v0 + 40));
  return v0;
}

uint64_t sub_100034730()
{
  return swift_deallocClassInstance(v0, 49LL, 7LL);
}

uint64_t type metadata accessor for OSStateHandler()
{
  return objc_opt_self(&OBJC_CLASS____TtC10LinkDaemon14OSStateHandler);
}

uint64_t getEnumTagSinglePayload for OSStateHandler.Hint(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for OSStateHandler.Hint(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(vsub_10000AC58(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_10000AC58(v0 + 4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100034844 + 4 * byte_1000F5F4D[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100034878 + 4 * byte_1000F5F48[v4]))();
}

uint64_t sub_100034878(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100034880(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100034888LL);
  }
  return result;
}

uint64_t sub_100034894(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10003489CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000348A0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000348A8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OSStateHandler.Hint()
{
  return &type metadata for OSStateHandler.Hint;
}

unint64_t sub_1000348C8()
{
  unint64_t result = qword_100131950;
  if (!qword_100131950)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F5FC8, &type metadata for OSStateHandler.Hint);
    atomic_store(result, (unint64_t *)&qword_100131950);
  }

  return result;
}

uint64_t sub_100034904()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100034928()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100034954(uint64_t a1)
{
  return sub_100034370(a1, *(void *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t sub_100034960(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100034970(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

char *sub_100034978(char *__src, char *__dst, uint64_t a3)
{
  if (__dst) {
    return strncpy(__dst, __src, a3 - (void)__dst);
  }
  __break(1u);
  return __src;
}

char *sub_1000349A4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  v8[2] = __dst;
  v8[3] = a4;
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL)) {
    return (char *)_StringGuts._slowWithCString<A>(_:)(sub_100034A78, v8, a1, a2, (char *)&type metadata for () + 8);
  }
  if ((a2 & 0x2000000000000000LL) != 0)
  {
    *(void *)__src = a1;
    uint64_t v10 = a2 & 0xFFFFFFFFFFFFFFLL;
    unsigned int v6 = __src;
  }

  else if ((a1 & 0x1000000000000000LL) != 0)
  {
    unsigned int v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    unsigned int v6 = (char *)_StringObject.sharedUTF8.getter(a1, a2);
  }

  return sub_100034978(v6, __dst, a4);
}

char *sub_100034A78(char *a1)
{
  return sub_100034978(a1, *(char **)(v1 + 16), *(void *)(v1 + 24));
}

void sub_100034A90(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v10);
  BOOL v12 = &v30[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = type metadata accessor for LNActionRecord(0LL);
  uint64_t v14 = (uint64_t)a5 + *(int *)(v13 + 20);
  uint64_t v15 = type metadata accessor for URL(0LL);
  sub_100009E60(v14, 1LL, 1LL, v15);
  *a5 = a1;
  a5[1] = a2;
  swift_bridgeObjectRetain();
  sub_100037E9C(a3, v14);
  id v16 = [a4 effectiveBundleIdentifiers];
  id v17 = [v16 array];

  uint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, (char *)&type metadata for Any + 8);
  uint64_t v19 = *(void *)(v18 + 16);
  swift_bridgeObjectRelease(v18);
  if (v19)
  {
    sub_10001B60C(a3, &qword_100130BC0);
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    sub_10001B644(a3, (uint64_t)v12, &qword_100130BC0);
    id v20 = objc_allocWithZone(&OBJC_CLASS___LNEffectiveBundleIdentifier);
    swift_bridgeObjectRetain();
    id v21 = sub_100037C74(0LL, a1, a2, (uint64_t)v12);
    v31[3] = sub_10000A1A0(0LL, &qword_100131960, &OBJC_CLASS___LNEffectiveBundleIdentifier_ptr);
    v31[0] = v21;
    id v22 = objc_allocWithZone(&OBJC_CLASS___NSOrderedSet);
    id v23 = sub_100037D34(v31);
    uint64_t v24 = sub_100008DB0(&qword_100131968);
    uint64_t inited = swift_initStackObject(v24, v30);
    *(_OWORD *)(inited + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
    *(void *)(inited + 32) = a1;
    *(void *)(inited + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = a2;
    *(void *)(inited + 48) = LNActionMetadata._mangledTypeNameForAppIntentsOnly.getter();
    *(void *)(inited + 5sub_10000AC58(v0 + 6) = v26;
    uint64_t v27 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v27);
    id v29 = [a4 metadataByAddingEffectiveBundleIdentifiers:v23 mangledTypeNameByBundleIdentifier:isa];

    sub_10001B60C(a3, &qword_100130BC0);
    a4 = v29;
  }

  *(uint64_t *)((char *)a5 + *(int *)(v13 + swift_release(*(void *)(v0 + 24)) = (uint64_t)a4;
  sub_10000AD58();
}

void sub_100034D18(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  BOOL v7 = a5;
  uint64_t v8 = a4;
  unint64_t v9 = a2;
  uint64_t v10 = a1;
  uint64_t v11 = *(void *)(a7 + 16);
  if (v11)
  {
    swift_bridgeObjectRetain();
    uint64_t v44 = a7;
    uint64_t v13 = (uint64_t *)(a7 + 56);
    uint64_t v14 = _swiftEmptyArrayStorage;
    uint64_t v15 = v11;
    do
    {
      uint64_t v16 = v14[2];
      if (__OFADD__(v16, 2LL))
      {
        __break(1u);
        return;
      }

      uint64_t v17 = *(v13 - 3);
      uint64_t v18 = *(v13 - 2);
      uint64_t v19 = *v13;
      uint64_t v49 = *(v13 - 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!swift_isUniquelyReferenced_nonNull_native(v14) || v16 + 2 > v14[3] >> 1)
      {
        sub_1000141B8();
        uint64_t v14 = v20;
      }

      unint64_t v21 = v14[2];
      unint64_t v22 = v14[3];
      unint64_t v23 = v21 + 1;
      swift_bridgeObjectRetain();
      if (v21 >= v22 >> 1)
      {
        sub_1000141B8();
        uint64_t v14 = v27;
      }

      v14[2] = v23;
      uint64_t v24 = &v14[2 * v21];
      v24[4] = v17;
      v24[5] = v18;
      unint64_t v25 = v14[3];
      swift_bridgeObjectRetain();
      if (v23 >= v25 >> 1)
      {
        sub_1000141B8();
        uint64_t v14 = v28;
      }

      v13 += 4;
      v14[2] = v21 + 2;
      uint64_t v26 = &v14[2 * v23];
      v26[4] = v49;
      v26[5] = v19;
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v18);
      --v15;
    }

    while (v15);
    swift_bridgeObjectRelease(v44);
    sub_1000452D4();
    unint64_t v29 = _swiftEmptyArrayStorage[2];
    uint64_t v30 = 2 * v29;
    uint64_t v10 = a1;
    do
    {
      unint64_t v31 = v29 + 1;
      if (v29 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_1000452D4();
      }
      _swiftEmptyArrayStorage[2] = v31;
      uint64_t v32 = &_swiftEmptyArrayStorage[v30];
      v32[4] = 0x293F202C3F28LL;
      v32[5] = 0xE600000000000000LL;
      v30 += 2LL;
      unint64_t v29 = v31;
      --v11;
    }

    while (v11);
    uint64_t v8 = a4;
    BOOL v7 = a5;
    unint64_t v9 = a2;
  }

  else
  {
    uint64_t v14 = _swiftEmptyArrayStorage;
  }

  _StringGuts.grow(_:)(27LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  swift_bridgeObjectRetain();
  v33._uint64_t countAndFlagsBits = v10;
  v33._object = v9;
  String.append(_:)(v33);
  swift_bridgeObjectRelease(v9);
  v34._uint64_t countAndFlagsBits = 8236LL;
  v34._object = (void *)0xE200000000000000LL;
  String.append(_:)(v34);
  swift_bridgeObjectRetain();
  v35._uint64_t countAndFlagsBits = v8;
  v35._object = v7;
  String.append(_:)(v35);
  swift_bridgeObjectRelease(v7);
  v36._uint64_t countAndFlagsBits = 0x2028204E49202920LL;
  v36._object = (void *)0xEF205345554C4156LL;
  String.append(_:)(v36);
  uint64_t v37 = sub_100008DB0((uint64_t *)&unk_100132780);
  sub_100026D98( (unint64_t *)&qword_100131990,  (uint64_t *)&unk_100132780,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v39 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v37, v38);
  uint64_t v41 = v40;
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  v42._uint64_t countAndFlagsBits = v39;
  v42._object = v41;
  String.append(_:)(v42);
  swift_bridgeObjectRelease(v41);
  v43._uint64_t countAndFlagsBits = 10528LL;
  v43._object = (void *)0xE200000000000000LL;
  String.append(_:)(v43);
  sub_1000423FC((uint64_t)v14);
  swift_bridgeObjectRelease(v14);
}

void *sub_100035098()
{
  return sub_10001DEBC(&unk_100135258, v1);
}

uint64_t sub_1000350E4(uint64_t a1)
{
  return sub_10003512C(a1, (uint64_t)&qword_100135300, 0xD000000000000010LL, 0x80000001000F96E0LL);
}

uint64_t sub_100035108(uint64_t a1)
{
  return sub_10003512C(a1, (uint64_t)&qword_100135318, 0x696669746E656469LL, 0xEA00000000007265LL);
}

uint64_t sub_10003512C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = sub_100008DB0((uint64_t *)&unk_1001323C0);
  sub_100026D98( (unint64_t *)&qword_100131110,  (uint64_t *)&unk_1001323C0,  (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(a3, a4, v6, v7);
}

uint64_t sub_1000351A8(uint64_t a1)
{
  return sub_10003512C(a1, (uint64_t)&qword_100135330, 0x617461646174656DLL, 0xE800000000000000LL);
}

void sub_1000351C8(uint64_t a1@<X8>)
{
  if (qword_100130130 != -1) {
    swift_once(&qword_100130130, sub_100035098);
  }
  uint64_t v1 = sub_10001DEBC(v170, &unk_100135258);
  sub_1000389CC( (uint64_t)v1,  v2,  v3,  v4,  v5,  v6,  v7,  v8,  v104,  v110,  a1,  v123,  v124,  v125,  v126,  (uint64_t)v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  v143,  v144,  v145,  v146,  (uint64_t)v147,  (uint64_t)v148,  v149,  v150,  v151,  v152,  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v160,
    v161,
    v162,
    v163,
    v164,
    v165,
    v166,
    v167,
    v168,
    v169,
    v170[0]);
  if (qword_100130390 != -1) {
    swift_once(&qword_100130390, sub_1000BDEE8);
  }
  sub_10001DEBC(v171, &unk_100135A88);
  sub_10001DEBC(v172, v170);
  sub_1000389C4();
  if (qword_100130138 != -1) {
    swift_once(&qword_100130138, sub_1000350E4);
  }
  uint64_t v9 = qword_100135300;
  uint64_t v10 = *(void *)algn_100135308;
  uint64_t v11 = qword_100135310;
  BOOL v12 = sub_10001DEBC(&v149, v170);
  sub_1000389CC( (uint64_t)v12,  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v105,  v111,  v117,  v123,  v124,  v125,  v126,  (uint64_t)v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  v143,  v144,  v145,  v146,  (uint64_t)v147,  (uint64_t)v148,  v149,  v150,  v151,  v152,  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v160,
    v161,
    v162,
    v163,
    v164,
    v165,
    v166,
    v167,
    v168,
    v169,
    v170[0]);
  uint64_t v20 = QueryType.namespace<A>(_:)(v9, v10, v11, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  sub_10001DAF0(v170);
  uint64_t v25 = sub_100008DB0((uint64_t *)&unk_1001323C0);
  uint64_t v126 = v25;
  id v127 = &protocol witness table for Expression<A>;
  uint64_t v123 = v20;
  uint64_t v124 = v22;
  uint64_t v125 = v24;
  uint64_t v26 = sub_100008DB0(&qword_100131160);
  uint64_t v27 = swift_allocObject(v26, 192LL, 7LL);
  *(_OWORD *)(v27 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5FF0;
  if (qword_100130140 != -1) {
    swift_once(&qword_100130140, sub_100035108);
  }
  uint64_t v28 = qword_100135318;
  uint64_t v29 = unk_100135320;
  uint64_t v30 = sub_10001DEBC(&v149, v170);
  uint64_t v38 = sub_1000389CC( (uint64_t)v30,  v31,  v32,  v33,  v34,  v35,  v36,  v37,  v106,  v112,  v118,  v123,  v124,  v125,  v126,  (uint64_t)v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  v143,  v144,  v145,  v146,  (uint64_t)v147,  (uint64_t)v148,  v149,  v150,  v151,  v152,  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v160,
          v161,
          v162,
          v163,
          v164,
          v165,
          v166,
          v167,
          v168,
          v169,
          v170[0]);
  uint64_t v41 = sub_100038980((uint64_t)v38, v39, v40, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  sub_10003893C( v41,  v42,  v43,  v44,  v45,  v46,  v47,  v48,  v107,  v113,  v119,  v123,  v124,  v125,  v126,  (uint64_t)v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  v143,  v144,  v145,  v146,  (uint64_t)v147,  (uint64_t)v148,  v149,  v150,  v151,  v152,  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v160,
    v161,
    v162,
    v163,
    v164,
    v165,
    v166,
    v167,
    v168,
    v169,
    v170[0]);
  *(void *)(v27 + 5sub_10000AC58(v0 + 6) = v25;
  *(void *)(v27 + 6sub_10000AC58(v0 + 4) = &protocol witness table for Expression<A>;
  *(void *)(v27 + 32) = v20;
  *(void *)(v27 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v28;
  *(void *)(v27 + 48) = v29;
  if (qword_100130148 != -1) {
    swift_once(&qword_100130148, sub_1000351A8);
  }
  uint64_t v49 = qword_100135330;
  uint64_t v50 = *(void *)algn_100135338;
  uint64_t v51 = sub_10001DEBC(&v149, v170);
  uint64_t v59 = sub_1000389CC( (uint64_t)v51,  v52,  v53,  v54,  v55,  v56,  v57,  v58,  v108,  v114,  v120,  v123,  v124,  v125,  v126,  (uint64_t)v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  v143,  v144,  v145,  v146,  (uint64_t)v147,  (uint64_t)v148,  v149,  v150,  v151,  v152,  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v160,
          v161,
          v162,
          v163,
          v164,
          v165,
          v166,
          v167,
          v168,
          v169,
          v170[0]);
  uint64_t v62 = sub_100038980((uint64_t)v59, v60, v61, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  sub_10003893C( v62,  v63,  v64,  v65,  v66,  v67,  v68,  v69,  v109,  v115,  v121,  v123,  v124,  v125,  v126,  (uint64_t)v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  v143,  v144,  v145,  v146,  (uint64_t)v147,  (uint64_t)v148,  v149,  v150,  v151,  v152,  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v160,
    v161,
    v162,
    v163,
    v164,
    v165,
    v166,
    v167,
    v168,
    v169,
    v170[0]);
  *(void *)(v27 + 9sub_10000AC58(v0 + 6) = v25;
  *(void *)(v27 + 10sub_10000AC58(v0 + 4) = &protocol witness table for Expression<A>;
  *(void *)(v27 + 72) = v20;
  *(void *)(v27 + 8sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v49;
  *(void *)(v27 + 88) = v50;
  if (qword_1001303B8 != -1) {
    swift_once(&qword_1001303B8, sub_1000BE150);
  }
  uint64_t v70 = qword_100135B60;
  uint64_t v71 = *(void *)algn_100135B68;
  sub_10001DEBC(&v149, v171);
  uint64_t v72 = sub_1000389C4();
  sub_100038888((uint64_t)v72, v73, v74, v75, (uint64_t)&type metadata for Int);
  sub_100038950();
  *(void *)(v27 + 13sub_10000AC58(v0 + 6) = sub_100008DB0(&qword_100131988);
  *(void *)(v27 + 14sub_10000AC58(v0 + 4) = &protocol witness table for Expression<A>;
  *(void *)(v27 + 112) = v20;
  *(void *)(v27 + 12sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v70;
  *(void *)(v27 + 128) = v71;
  if (qword_1001303A0 != -1) {
    swift_once(&qword_1001303A0, sub_1000BDF94);
  }
  uint64_t v76 = qword_100135B48;
  uint64_t v77 = qword_100135B50;
  sub_10001DEBC(&v149, v171);
  sub_1000389C4();
  uint64_t v78 = sub_100008DB0((uint64_t *)&unk_100130C00);
  sub_100038888(v78, v79, v80, v81, v78);
  sub_100038950();
  *(void *)(v27 + 17sub_10000AC58(v0 + 6) = sub_100008DB0(&qword_100131138);
  *(void *)(v27 + 18sub_10000AC58(v0 + 4) = &protocol witness table for Expression<A>;
  *(void *)(v27 + 152) = v20;
  *(void *)(v27 + 16sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v76;
  *(void *)(v27 + 168) = v77;
  SchemaType.select(_:_:)( (uint64_t)&v123,  v27,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table);
  swift_setDeallocating(v27);
  sub_100058868();
  sub_10000AC58(&v123);
  sub_10001DEBC(v172, &v149);
  uint64_t v147 = &type metadata for Table;
  unint64_t v148 = &protocol witness table for Table;
  uint64_t v144 = sub_100038A2C((uint64_t)&unk_100123E58);
  sub_10001DEBC((void *)(v144 + 16), v171);
  uint64_t v82 = qword_100135300;
  uint64_t v83 = *(void *)algn_100135308;
  uint64_t v84 = qword_100135310;
  sub_10001DEBC(&v123, v170);
  sub_1000389C4();
  QueryType.namespace<A>(_:)(v82, v83, v84, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  uint64_t v86 = v85;
  uint64_t v88 = v87;
  sub_10001DAF0(v170);
  if (qword_100130398 != -1) {
    swift_once(&qword_100130398, sub_1000BDF38);
  }
  uint64_t v89 = qword_100135B30;
  uint64_t v90 = *(void *)algn_100135B38;
  uint64_t v91 = qword_100135B40;
  sub_10001DEBC(&v123, v171);
  QueryType.namespace<A>(_:)(v89, v90, v91, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  uint64_t v93 = v92;
  uint64_t v95 = v94;
  sub_10001DAF0(v171);
  == infix<A>(_:_:)();
  uint64_t v97 = v96;
  uint64_t v99 = v98;
  uint64_t v101 = v100;
  swift_bridgeObjectRelease(v88);
  swift_bridgeObjectRelease(v86);
  swift_bridgeObjectRelease(v95);
  swift_bridgeObjectRelease(v93);
  v122[3] = (uint64_t)&type metadata for Table;
  v122[4] = (uint64_t)&protocol witness table for Table;
  uint64_t v102 = sub_100038A2C((uint64_t)&unk_100123E58);
  uint64_t v103 = v102 + 16;
  *BOOL v122 = v102;
  sub_10001DEBC(&v123, v172);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.join(_:_:on:)( 1,  &v144,  v97,  v99,  v101,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  v103);
  swift_bridgeObjectRelease_n(v101, 2LL);
  swift_bridgeObjectRelease_n(v99, 2LL);
  sub_10001DAF0(v172);
  sub_10000AC58(&v144);
  sub_10000AD58();
}

uint64_t sub_10003575C@<X0>(void *a1@<X8>)
{
  if (qword_100130130 != -1) {
    swift_once(&qword_100130130, sub_100035098);
  }
  memcpy(__dst, &unk_100135258, sizeof(__dst));
  memcpy(v12, &unk_100135258, sizeof(v12));
  if (qword_100130140 != -1) {
    swift_once(&qword_100130140, sub_100035108);
  }
  uint64_t v2 = qword_100135318;
  uint64_t v3 = unk_100135320;
  uint64_t v4 = qword_100135328;
  memcpy(v11, __dst, sizeof(v11));
  sub_10001D9AC(__dst);
  uint64_t v5 = QueryType.namespace<A>(_:)(v2, v3, v4, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  sub_10001DAF0(__dst);
  v11[3] = sub_100008DB0((uint64_t *)&unk_1001323C0);
  v11[4] = &protocol witness table for Expression<A>;
  v11[0] = v5;
  v11[1] = v7;
  v11[2] = v9;
  a1[3] = &type metadata for Table;
  a1[4] = &protocol witness table for Table;
  *a1 = swift_allocObject(&unk_100123E58, 184LL, 7LL);
  SchemaType.select(_:_:)( (uint64_t)v11,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table);
  return sub_10000AC58(v11);
}

void sub_1000358E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    sub_100008D74(v54, v55);
    if (qword_100130138 != -1) {
      swift_once(&qword_100130138, sub_1000350E4);
    }
    uint64_t v42 = a1;
    sub_1000389BC();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    sub_100038994(v12, v8, v10, v13, v14, v15, v16, v17, v42, a2, v45, v48, v51);
    sub_10003886C();
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v9);
    uint64_t v18 = sub_10000AC58(v54);
    sub_10003887C(v18, v19, v20, v21, v22, v23, v24, v25, v43, v46, v49, v52, v54[0]);
  }

  if (a4)
  {
    sub_100008D74(v54, v55);
    if (qword_100130140 != -1) {
      swift_once(&qword_100130140, sub_100035108);
    }
    sub_10001DECC((uint64_t)&qword_100135318);
    sub_1000389BC();
    sub_100038994(v26, v27, v28, v29, v30, v31, v32, v33, a3, a4, v45, v48, v51);
    sub_10003886C();
    sub_10000AEE8();
    sub_10001BE7C();
    uint64_t v34 = sub_10000AC58(v54);
    sub_10003887C(v34, v35, v36, v37, v38, v39, v40, v41, v44, v47, v50, v53, v54[0]);
  }

  sub_100035AB0(v54);
  sub_10000AC58(v54);
  sub_100038850();
}

uint64_t sub_100035AB0(void *a1)
{
  if (!v1)
  {
    sub_100038AC0();
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    uint64_t v2 = v4;
    sub_10001BE7C();
    sub_100038920();
    sub_1000389DC();
  }

  return v2;
}

uint64_t sub_100035B50(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v6 = v26;
    uint64_t v3 = v27;
    sub_100008D74(v25, v26);
    if (qword_100130138 != -1) {
      swift_once(&qword_100130138, sub_1000350E4);
    }
    sub_10001DECC((uint64_t)&qword_100135300);
    *(void *)&__int128 v21 = a1;
    *((void *)&v21 + 1) = a2;
    sub_1000389BC();
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    uint64_t v23 = v6;
    uint64_t v24 = v3;
    sub_10001AFA8(&v21);
    QueryType.filter(_:)();
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v8);
    uint64_t v11 = sub_10000AC58(v25);
    sub_10003887C(v11, v12, v13, v14, v15, v16, v17, v18, v21, v22, v23, v24, v25[0]);
  }

  Connection.prepareRowIterator(_:)(v25);
  if (v2)
  {
    sub_10000AC58(v25);
  }

  else
  {
    RowIterator.compactMap<A>(_:)();
    uint64_t v3 = v20;
    sub_10000AC58(v25);
    sub_10001BC70();
    sub_1000389DC();
  }

  return v3;
}

void sub_100035CEC(void *a1@<X8>)
{
  if (qword_100130140 != -1) {
    swift_once(&qword_100130140, sub_100035108);
  }
  Row.get<A>(_:)();
  if (v1)
  {
    swift_errorRelease(v1);
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
  }

  else
  {
    uint64_t v3 = v5;
    uint64_t v4 = v6;
  }

  *a1 = v3;
  a1[1] = v4;
}

void *sub_100035DA4(uint64_t a1)
{
  uint64_t v1 = a1;
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v2) {
      goto LABEL_3;
    }
    return _swiftEmptyArrayStorage;
  }

  if (a1 < 0) {
    uint64_t v23 = a1;
  }
  else {
    uint64_t v23 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_1000119E4();
  uint64_t v24 = _CocoaArrayWrapper.endIndex.getter(v23);
  sub_10001BC70();
  if (!v24) {
    return _swiftEmptyArrayStorage;
  }
  sub_1000119E4();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v23);
  sub_10001BC70();
  if (!v2)
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
    goto LABEL_11;
  }

uint64_t sub_100036090@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W6>, int a6@<W7>, uint64_t a7@<X8>)
{
  uint64_t result = sub_1000361AC( a1,  a2,  a3,  a4,  1769235297,  0,  a5,  a6,  0x696669746E656469LL,  (void *)0xEA00000000007265LL,  0x617461646174656DLL,  (void *)0xE800000000000000LL,  0xD000000000000023LL,  (void *)0x80000001000F9D70LL);
  if (!v7)
  {
    if (v12)
    {
      sub_1000358E8(a1, a2, result, v12);
      sub_10001BEC0();
      sub_100038B20();
      return sub_10001BC70();
    }

    else
    {
      uint64_t v13 = sub_100038AC0();
      return sub_100009E60(a7, 1LL, 1LL, v13);
    }
  }

  return result;
}

uint64_t sub_1000361AC( int a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  unint64_t v55 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(90LL);
  v15._uint64_t countAndFlagsBits = 0x200A5443454C4553LL;
  v15._object = (void *)0xEB00000000202020LL;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = a9;
  v16._object = a10;
  String.append(_:)(v16);
  sub_1000388DC();
  sub_1000389FC(v17, v18, v19, v20, v21, v22, v23, v24, a13, a3, v50, v52, v53, 0);
  sub_100038824();
  sub_1000389FC(v25, v26, v27, v28, v29, v30, v31, v32, v45, v48, v51, v52, v53, v54[0]);
  sub_100038A74(46LL);
  v33._uint64_t countAndFlagsBits = a11;
  v33._object = a12;
  String.append(_:)(v33);
  v34._uint64_t countAndFlagsBits = 0x2E2427202CLL;
  v34._object = (void *)0xE500000000000000LL;
  String.append(_:)(v34);
  v35._uint64_t countAndFlagsBits = v46;
  v35._object = a14;
  String.append(_:)(v35);
  v36._object = (void *)0x80000001000F9D40LL;
  v36._uint64_t countAndFlagsBits = 0xD000000000000029LL;
  String.append(_:)(v36);
  uint64_t v37 = *(void *)v54;
  uint64_t v38 = sub_100008DB0(&qword_100131970);
  uint64_t inited = swift_initStackObject(v38, v57);
  *(_OWORD *)(inited + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
  *(void *)(inited + 5sub_10000AC58(v0 + 6) = &type metadata for String;
  *(void *)(inited + 6sub_10000AC58(v0 + 4) = &protocol witness table for String;
  *(void *)(inited + 32) = v49;
  *(void *)(inited + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = a4;
  swift_bridgeObjectRetain();
  uint64_t v40 = v58;
  Connection.prepare(_:_:)(v37, 0xE000000000000000LL, inited);
  if (v40)
  {
    swift_setDeallocating(inited);
    sub_10005889C();
    return sub_10001BEC0();
  }

  sub_10001BEC0();
  swift_setDeallocating(inited);
  sub_10005889C();
  unint64_t v42 = (unint64_t)Statement.failableNext()();
  if (!v43)
  {
    if (v42)
    {
      if (*(void *)(v42 + 16) == 1LL)
      {
        sub_10001B644(v42 + 32, (uint64_t)v54, &qword_100131978);
        sub_10000ADB0();
        sub_100038920();
        if (v56)
        {
          uint64_t v44 = sub_100008DB0(&qword_100131980);
          if ((swift_dynamicCast(&v52, v54, v44, &type metadata for String, 6LL) & 1) != 0) {
            return v52;
          }
        }

        else
        {
          sub_10001B60C((uint64_t)v54, &qword_100131978);
        }

        return 0LL;
      }

      sub_10000ADB0();
    }

    sub_100038920();
    return 0LL;
  }

  return sub_100038920();
}

void sub_10003642C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!a4)
  {
    if (a2 != 2)
    {
      if (a2 != 1)
      {
        if (a2) {
          goto LABEL_17;
        }
        sub_1000389A0(a1, 0LL, a3, 0LL, a5);
        uint64_t v43 = sub_1000388B0(v38, v39, v40, v41, v42);
        sub_1000388F8(v43, v44, v45, v46, v47);
        if (v5) {
          goto LABEL_17;
        }
        uint64_t v48 = a1;
        uint64_t v49 = 0LL;
LABEL_12:
        sub_1000365D8(v48, v49, a5);
        sub_10001BE7C();
        goto LABEL_17;
      }

      uint64_t v50 = sub_100036BC4(a1);
      if (v50 >= 2)
      {
        sub_1000389A0(v50, v51, v52, v53, v54);
        uint64_t v60 = sub_1000388B0(v55, v56, v57, v58, v59);
        sub_1000388F8(v60, v61, v62, v63, v64);
        if (v5) {
          goto LABEL_17;
        }
        uint64_t v48 = a1;
        uint64_t v49 = 1LL;
        goto LABEL_12;
      }
    }

    sub_100036BE4(a1);
    goto LABEL_17;
  }

  uint64_t v74 = a1;
  sub_1000389A0(a1, a2, a3, a4, a5);
  sub_100008D74(v73, v73[3]);
  if (qword_100130138 != -1) {
    swift_once(&qword_100130138, sub_1000350E4);
  }
  uint64_t v65 = a3;
  sub_1000389BC();
  uint64_t v12 = v11;
  sub_100038994(v13, v11, v14, v15, v16, v17, v18, v19, v65, a4, v67, v69, v71);
  sub_10003886C();
  sub_10001BC70();
  swift_bridgeObjectRelease(v12);
  uint64_t v20 = sub_10000AC58(v73);
  uint64_t v28 = sub_10003887C(v20, v21, v22, v23, v24, v25, v26, v27, v66, v68, v70, v72, v73[0]);
  uint64_t v33 = sub_1000388B0(v28, v29, v30, v31, v32);
  sub_1000388F8(v33, v34, v35, v36, v37);
  if (!v5)
  {
    uint64_t v48 = v74;
    uint64_t v49 = a2;
    goto LABEL_12;
  }

void *sub_1000365D8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v65 = type metadata accessor for LNActionRecord(0LL);
  uint64_t v7 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v64 = (uint64_t)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t)&v58 - v10;
  uint64_t v12 = _swiftEmptyArrayStorage;
  uint64_t v76 = _swiftEmptyArrayStorage;
  Swift::Int v13 = *(void *)(a3 + 16);
  sub_1000119E4();
  if (!v13)
  {
LABEL_98:
    swift_bridgeObjectRelease(a3);
    return v12;
  }

  uint64_t v14 = 0LL;
  unint64_t v58 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  Swift::Int v59 = v13;
  uint64_t v68 = a3 + v58;
  uint64_t v69 = *(void *)(v7 + 72);
  unint64_t v70 = a1 & 0xC000000000000001LL;
  if (a1 < 0) {
    uint64_t v15 = a1;
  }
  else {
    uint64_t v15 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t v71 = v15;
  uint64_t v72 = a1 + 56;
  uint64_t v61 = a2;
  unint64_t v62 = a3;
  uint64_t v73 = a1;
  uint64_t v60 = v11;
  while (1)
  {
    sub_100037F74(v68 + v69 * v14, v11);
    if (a2 == 2) {
      break;
    }
    if (a2 == 1)
    {
      id v36 = [(id)sub_100038A0C() systemProtocols];
      uint64_t v37 = sub_10000A1A0(0LL, (unint64_t *)&qword_100130BA0, &OBJC_CLASS___LNSystemProtocol_ptr);
      uint64_t v38 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v36, v37);

      if ((unint64_t)v38 >> 62)
      {
        if (v38 < 0) {
          uint64_t v57 = v38;
        }
        else {
          uint64_t v57 = v38 & 0xFFFFFFFFFFFFFF8LL;
        }
        sub_10000AFB0();
        uint64_t v39 = _CocoaArrayWrapper.endIndex.getter(v57);
        sub_10001198C();
      }

      else
      {
        uint64_t v39 = *(void *)((v38 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      unint64_t v40 = sub_100038038();
      uint64_t result = (void *)Set.init(minimumCapacity:)(v39, v37, v40, v41);
      uint64_t v42 = (uint64_t)result;
      uint64_t v75 = (uint64_t)result;
      if ((unint64_t)v38 >> 62)
      {
        if (v38 < 0) {
          uint64_t v43 = v38;
        }
        else {
          uint64_t v43 = v38 & 0xFFFFFFFFFFFFFF8LL;
        }
        sub_10000AFB0();
        uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v43);
        uint64_t result = (void *)sub_10001198C();
      }

      else
      {
        uint64_t v3 = *(void *)((v38 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      a1 = v73;
      if (v3)
      {
        if (v3 < 1) {
          goto LABEL_101;
        }
        for (uint64_t i = 0LL; i != v3; ++i)
        {
          if ((v38 & 0xC000000000000001LL) != 0) {
            id v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v38);
          }
          else {
            id v45 = *(id *)(v38 + 8 * i + 32);
          }
          sub_1000184E8( (uint64_t)&v74,  (uint64_t)v45,  v46,  v47,  v48,  v49,  v50,  v51,  v58,  v59,  v60,  v61,  v62,  v63,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v71);
        }

        sub_10001198C();
        uint64_t v42 = v75;
        a1 = v73;
      }

      else
      {
        sub_10001198C();
      }

      sub_1000378A8(v42, a1);
      char v53 = v52;
      swift_bridgeObjectRelease(v42);
      if ((v53 & 1) != 0) {
        goto LABEL_77;
      }
    }

    else if (!a2)
    {
      uint64_t v16 = (uint64_t)[(id)sub_100038A0C() systemProtocols];
      uint64_t v17 = sub_10000A1A0(0LL, (unint64_t *)&qword_100130BA0, &OBJC_CLASS___LNSystemProtocol_ptr);
      uint64_t v18 = sub_1000389AC(v17);

      uint64_t v67 = v14;
      if ((unint64_t)v18 >> 62)
      {
        if (v18 < 0) {
          uint64_t v16 = v18;
        }
        else {
          uint64_t v16 = v18 & 0xFFFFFFFFFFFFFF8LL;
        }
        sub_1000388A4();
        sub_10000AFB0();
        uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v16);
      }

      else
      {
        uint64_t v14 = *(void *)((v18 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        sub_1000388A4();
        sub_10000AFB0();
      }

      a3 = v70;
      if (v14)
      {
        sub_1000389E4();
        while (1)
        {
          uint64_t result = a2 ? (void *)sub_100038A44() : sub_100038A94();
          uint64_t v20 = result;
          BOOL v21 = __OFADD__(v3++, 1LL);
          if (v21) {
            break;
          }
          if (a3)
          {
            LOBYTE(v1sub_10000AC58(v0 + 6) = sub_100038A88();

            if ((v16 & 1) != 0) {
              goto LABEL_50;
            }
          }

          else
          {
            if (*(void *)(a1 + 16))
            {
              sub_100038A7C();
              sub_1000387FC();
              if ((v22 & 1) != 0)
              {
                id v23 = sub_100038A5C();
                sub_1000387EC((uint64_t)v23);
                sub_1000389D4();
                if ((v16 & 1) != 0)
                {
                  sub_10001198C();
                  sub_100038844();

                  goto LABEL_72;
                }

                uint64_t v11 = -1LL;
                while (1)
                {
                  sub_100038964();
                  if ((v24 & 1) == 0) {
                    break;
                  }
                  id v25 = sub_100038A68();
                  sub_1000387EC((uint64_t)v25);
                  sub_1000389D4();
                  if ((v16 & 1) != 0)
                  {
                    sub_100038844();

                    uint64_t v35 = v18;
                    goto LABEL_71;
                  }
                }
              }
            }

            a3 = v70;
            a2 = v63;
          }

          if (v3 == v14) {
            goto LABEL_29;
          }
        }

        __break(1u);
        goto LABEL_100;
      }

LABEL_29:
      sub_10001198C();
      uint64_t v26 = a1;
LABEL_75:
      swift_bridgeObjectRelease(v26);
LABEL_76:
      sub_100038928();
      sub_10001198C();
LABEL_77:
      sub_100037FF4(v11, v64);
      uint64_t v54 = v76;
      if ((swift_isUniquelyReferenced_nonNull_native(v76) & 1) == 0)
      {
        sub_1000453D8(0LL, v54[2] + 1LL, 1);
        uint64_t v54 = v76;
      }

      unint64_t v56 = v54[2];
      unint64_t v55 = v54[3];
      uint64_t v3 = v56 + 1;
      if (v56 >= v55 >> 1)
      {
        sub_1000453D8(v55 > 1, v56 + 1, 1);
        uint64_t v54 = v76;
      }

      v54[2] = v3;
      sub_100037FF4(v64, (uint64_t)v54 + v58 + v56 * v69);
      a1 = v73;
      goto LABEL_82;
    }

          swift_release();
          return;
        }
      }
    }

LABEL_73:
    sub_100037FB8(v11);
LABEL_82:
    if (++v14 == v13)
    {
      uint64_t v12 = v76;
      goto LABEL_98;
    }
  }

  uint64_t v27 = (uint64_t)[(id)sub_100038A0C() systemProtocols];
  uint64_t v28 = sub_10000A1A0(0LL, (unint64_t *)&qword_100130BA0, &OBJC_CLASS___LNSystemProtocol_ptr);
  uint64_t v29 = sub_1000389AC(v28);

  uint64_t v67 = v14;
  if ((unint64_t)v29 >> 62)
  {
    if (v29 < 0) {
      uint64_t v27 = v29;
    }
    else {
      uint64_t v27 = v29 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1000388A4();
    sub_10000AFB0();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v27);
  }

  else
  {
    uint64_t v14 = *(void *)((v29 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_1000388A4();
    sub_10000AFB0();
  }

  a3 = v70;
  if (!v14)
  {
LABEL_50:
    sub_10001198C();
    uint64_t v35 = a1;
LABEL_71:
    swift_bridgeObjectRelease(v35);
LABEL_72:
    sub_100038928();
    sub_10001198C();
    goto LABEL_73;
  }

  sub_1000389E4();
  while (1)
  {
    uint64_t result = a2 ? (void *)sub_100038A44() : sub_100038A94();
    uint64_t v30 = result;
    BOOL v21 = __OFADD__(v3++, 1LL);
    if (v21) {
      break;
    }
    if (a3)
    {
      LOBYTE(v2sub_10000AC58(v0 + 7) = sub_100038A88();

      if ((v27 & 1) != 0) {
        goto LABEL_29;
      }
    }

    else
    {
      if (*(void *)(a1 + 16))
      {
        sub_100038A7C();
        sub_1000387FC();
        if ((v31 & 1) != 0)
        {
          id v32 = sub_100038A5C();
          sub_1000387EC((uint64_t)v32);
          sub_1000389D4();
          if ((v27 & 1) != 0)
          {
            sub_10001198C();
            sub_100038844();

            goto LABEL_76;
          }

          uint64_t v11 = -1LL;
          while (1)
          {
            sub_100038964();
            if ((v33 & 1) == 0) {
              break;
            }
            id v34 = sub_100038A68();
            sub_1000387EC((uint64_t)v34);
            sub_1000389D4();
            if ((v27 & 1) != 0)
            {
              sub_100038844();

              uint64_t v26 = v29;
              goto LABEL_75;
            }
          }
        }
      }

      a3 = v70;
      a2 = v63;
    }

    if (v3 == v14) {
      goto LABEL_50;
    }
  }

    if ((v63 & 1) != 0) {
      goto LABEL_133;
    }
    uint64_t v71 = &v38[16 * v40];
    uint64_t v73 = *(void *)v71;
    uint64_t v72 = *((void *)v71 + 1);
    uint64_t v51 = __OFSUB__(v72, v73);
    id v74 = v72 - v73;
    if (v51) {
      goto LABEL_135;
    }
    if (v74 < v62) {
      goto LABEL_90;
    }
LABEL_81:
    uint64_t v79 = v40 - 1;
    if (v40 - 1 >= v37)
    {
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }

    if (!v9) {
      goto LABEL_151;
    }
    uint64_t v80 = &v38[16 * v79];
    uint64_t v81 = *(void *)v80;
    uint64_t v82 = &v38[16 * v40];
    uint64_t v83 = *((void *)v82 + 1);
    sub_100074F8C((char *)(v9 + 16LL * *(void *)v80), (char *)(v9 + 16LL * *(void *)v82), v9 + 16 * v83, v106);
    if (v1) {
      break;
    }
    if (v83 < v81) {
      goto LABEL_124;
    }
    if (v40 > *((void *)v107 + 2)) {
      goto LABEL_125;
    }
    *(void *)uint64_t v80 = v81;
    *(void *)&v38[16 * v79 + 8] = v83;
    uint64_t v84 = *((void *)v107 + 2);
    if (v40 >= v84) {
      goto LABEL_126;
    }
    id v34 = v107;
    uint64_t v37 = v84 - 1;
    memmove(&v38[16 * v40], v82 + 16, 16 * (v84 - 1 - v40));
    *((void *)v107 + 2) = v84 - 1;
    if (v84 <= 2) {
      goto LABEL_90;
    }
  }

LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
  return result;
}

uint64_t sub_100036BC4(uint64_t a1)
{
  if ((a1 & 0xC000000000000001LL) == 0) {
    return *(void *)(a1 + 16);
  }
  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  return __CocoaSet.count.getter(a1);
}

void sub_100036BE4(uint64_t a1)
{
  uint64_t v3 = sub_100036BC4(a1);
  if (!v3)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
LABEL_26:
    uint64_t v79 = v9;
    uint64_t v37 = sub_100008DB0((uint64_t *)&unk_100132780);
    sub_100026D98( (unint64_t *)&qword_100131990,  (uint64_t *)&unk_100132780,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v39 = BidirectionalCollection<>.joined(separator:)(542265120LL, 0xE400000000000000LL, v37, v38);
    __n128 v41 = v40;
    swift_bridgeObjectRelease(v9);
    uint64_t v79 = 0LL;
    uint64_t v80 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(97LL);
    sub_100038A1C(0xD000000000000014LL, (uint64_t)"SELECT DISTINCT\n    ");
    v42._object = (void *)0x80000001000F96E0LL;
    v42._uint64_t countAndFlagsBits = 0xD000000000000010LL;
    String.append(_:)(v42);
    v43._uint64_t countAndFlagsBits = 8236LL;
    v43._object = (void *)0xE200000000000000LL;
    String.append(_:)(v43);
    v44._uint64_t countAndFlagsBits = 0x696669746E656469LL;
    v44._object = (void *)0xEA00000000007265LL;
    String.append(_:)(v44);
    sub_1000388DC();
    sub_1000388C0();
    sub_100038824();
    sub_1000388C0();
    sub_100038A74(46LL);
    v45._uint64_t countAndFlagsBits = 0x617461646174656DLL;
    v45._object = (void *)0xE800000000000000LL;
    String.append(_:)(v45);
    sub_100038A1C(0xD000000000000028LL, (uint64_t)", '$.systemProtocolMetadata')\nWHERE\n    ");
    v46._uint64_t countAndFlagsBits = v39;
    v46._object = v41;
    String.append(_:)(v46);
    sub_10000AEE8();
    uint64_t v85 = (uint64_t)_swiftEmptyArrayStorage;
    Connection.prepare(_:_:)((uint64_t)v79, v80, (uint64_t)_swiftEmptyArrayStorage);
    sub_10000AEE8();
    if (v77)
    {
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      return;
    }

    unint64_t v51 = sub_100038AA0();
    char v52 = &qword_100131980;
    while (1)
    {
      if (!v51)
      {
        sub_100035DA4(v85);
        swift_release();
        sub_10000ADB0();
        return;
      }

      if (*(void *)(v51 + 16) != 2LL)
      {
LABEL_39:
        unint64_t v75 = v51;
LABEL_40:
        swift_bridgeObjectRelease(v75);
        goto LABEL_44;
      }

      sub_100038A38(v51 + 32, v47, v48, v49, v50);
      if (!v81) {
        break;
      }
      uint64_t v53 = sub_100008DB0(v52);
      if ((sub_100038908(v53, v54, v55, v56) & 1) == 0) {
        goto LABEL_39;
      }
      if (*(void *)(v51 + 16) < 2uLL) {
        goto LABEL_48;
      }
      uint64_t v62 = v82;
      uint64_t v61 = v83;
      sub_100038A38(v51 + 72, v57, v58, v59, v60);
      uint64_t v63 = sub_10000ADB0();
      if (!v81)
      {
        unint64_t v76 = v61;
        goto LABEL_43;
      }

      if ((sub_100038908(v63, v64, v65, v66) & 1) == 0)
      {
        unint64_t v75 = v61;
        goto LABEL_40;
      }

      uint64_t v67 = v52;
      uint64_t v68 = v82;
      uint64_t v69 = v83;
      id v70 = objc_allocWithZone(&OBJC_CLASS___LNFullyQualifiedActionIdentifier);
      id v71 = sub_100037D9C(v68, v69, v62, v61);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      unint64_t v73 = *(void *)((v85 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v72 = *(void *)((v85 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v73 >= v72 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v72 > 1, v73 + 1, 1LL);
      }
      uint64_t v74 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v73, v71);
      specialized Array._endMutation()(v74);
      char v52 = v67;
LABEL_44:
      unint64_t v51 = sub_100038AA0();
    }

    unint64_t v76 = v51;
LABEL_43:
    swift_bridgeObjectRelease(v76);
    sub_10001B60C((uint64_t)&v79, &qword_100131978);
    goto LABEL_44;
  }

  uint64_t v4 = v3;
  uint64_t v85 = (uint64_t)_swiftEmptyArrayStorage;
  sub_1000452D4();
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v5 = a1;
    }
    else {
      uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v6 = __CocoaSet.startIndex.getter(v5);
    unsigned __int8 v8 = 1;
  }

  else
  {
    uint64_t v6 = sub_10003A208(a1);
    unsigned __int8 v8 = v10 & 1;
  }

  uint64_t v82 = v6;
  uint64_t v83 = v7;
  unsigned __int8 v84 = v8;
  if ((v4 & 0x8000000000000000LL) == 0)
  {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFFF8LL;
    if (a1 < 0) {
      uint64_t v11 = a1;
    }
    uint64_t v78 = v11;
    sub_100038AAC();
    do
    {
      sub_100039F70(v82, v83, v84, a1);
      Swift::Int v13 = v12;
      uint64_t v79 = (void *)v1;
      uint64_t v80 = 0xE700000000000000LL;
      id v14 = [v12 identifier];
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      uint64_t v17 = v16;

      v18._uint64_t countAndFlagsBits = v15;
      v18._object = v17;
      String.append(_:)(v18);
      sub_10001BC70();
      sub_100038A74(39LL);

      uint64_t v19 = (uint64_t)v79;
      uint64_t v20 = v80;
      uint64_t v21 = v85;
      if ((swift_isUniquelyReferenced_nonNull_native(v85) & 1) == 0)
      {
        sub_1000452D4();
        uint64_t v21 = v85;
      }

      unint64_t v22 = *(void *)(v21 + 16);
      if (v22 >= *(void *)(v21 + 24) >> 1)
      {
        sub_1000452D4();
        uint64_t v21 = v85;
      }

      *(void *)(v21 + 1sub_10000AC58(v0 + 6) = v22 + 1;
      uint64_t v23 = v21 + 16 * v22;
      *(void *)(v23 + 32) = v19;
      *(void *)(v23 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v20;
      if ((a1 & 0xC000000000000001LL) != 0)
      {
        if ((v84 & 1) == 0) {
          goto LABEL_49;
        }
        uint64_t v24 = __CocoaSet.Index.handleBitPattern.getter(v82, v83);
        if (v24) {
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
        }
        else {
          uint64_t isUniquelyReferenced_nonNull_native = 1LL;
        }
        uint64_t v34 = sub_100008DB0(&qword_1001319A0);
        uint64_t v35 = (void (*)(void **, void))Set.Index._asCocoa.modify(&v79, v34);
        __CocoaSet.formIndex(after:isUnique:)(v36, isUniquelyReferenced_nonNull_native, v78);
        v35(&v79, 0LL);
      }

      else
      {
        uint64_t v26 = v82;
        uint64_t v27 = v83;
        char v28 = v84;
        uint64_t v29 = sub_1000B33AC(v82, v83, v84, a1);
        uint64_t v31 = v30;
        uint64_t v1 = v32;
        sub_100038088(v26, v27, v28);
        uint64_t v82 = v29;
        uint64_t v83 = v31;
        sub_100038AAC();
        unsigned __int8 v84 = v33;
      }

      --v4;
    }

    while (v4);
    sub_100038088(v82, v83, v84);
    uint64_t v9 = (void *)v85;
    goto LABEL_26;
  }

  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
}

uint64_t sub_10003718C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v6);
  unsigned __int8 v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v28 - v10;
  __chkstk_darwin(v12);
  id v14 = (char *)&v28 - v13;
  if (qword_1001303B8 != -1) {
    swift_once(&qword_1001303B8, sub_1000BE150);
  }
  Row.get<A>(_:)();
  uint64_t v15 = v29;
  if (qword_100130138 != -1) {
    swift_once(&qword_100130138, sub_1000350E4);
  }
  Row.get<A>(_:)();
  Swift::String v18 = v29;
  uint64_t v17 = v30;
  if (qword_1001303A0 != -1) {
    swift_once(&qword_1001303A0, sub_1000BDF94);
  }
  Row.get<A>(_:)( qword_100135B48,  qword_100135B50,  qword_100135B58,  a1,  a2,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String,  v16,  (uint64_t)v28,  v29,  v30,  v31,  v32,  v33,  v34,  v35,  v36,  v37,  v38,  v39);
  char v28 = v18;
  uint64_t v19 = v30;
  if (v30)
  {
    URL.init(fileURLWithPath:)(v29, v30);
    uint64_t v20 = type metadata accessor for URL(0LL);
    sub_100009E60((uint64_t)v14, 0LL, 1LL, v20);
    swift_bridgeObjectRelease(v19);
  }

  else
  {
    uint64_t v21 = type metadata accessor for URL(0LL);
    sub_100009E60((uint64_t)v14, 1LL, 1LL, v21);
  }

  if (qword_100130148 != -1) {
    swift_once(&qword_100130148, sub_1000351A8);
  }
  Row.get<A>(_:)();
  uint64_t v24 = v29;
  uint64_t v25 = v30;
  sub_10001B644((uint64_t)v14, (uint64_t)v11, &qword_100130BC0);
  sub_10000A1A0(0LL, (unint64_t *)&unk_100132490, &OBJC_CLASS___LNActionMetadata_ptr);
  uint64_t v26 = type metadata accessor for URL(0LL);
  sub_100009E60((uint64_t)v8, 1LL, 1LL, v26);
  uint64_t v27 = (void *)static LNActionMetadata.fromJSON(_:bundleMetadataVersion:bundleURL:effectiveBundleIdentifier:)( v24,  v25,  v15,  v8,  0LL);
  sub_10001B60C((uint64_t)v8, &qword_100130BC0);
  swift_bridgeObjectRelease(v25);
  sub_100034A90((uint64_t)v28, v17, (uint64_t)v11, v27, a3);
  sub_10001B60C((uint64_t)v14, &qword_100130BC0);
  uint64_t v22 = type metadata accessor for LNActionRecord(0LL);
  return sub_100009E60((uint64_t)a3, 0LL, 1LL, v22);
}

uint64_t sub_100037560(uint64_t *a1)
{
  Swift::String v3 = LNActionMetadata.asJson(prettyPrinted:)(0);
  uint64_t result = v3._countAndFlagsBits;
  if (!v4)
  {
    if (qword_100130130 != -1) {
      swift_once(&qword_100130130, sub_100035098);
    }
    sub_100038A50(v36);
    sub_100038A50(__src);
    sub_10001D9AC(v36);
    if (qword_100130138 != -1) {
      swift_once(&qword_100130138, sub_1000350E4);
    }
    uint64_t v5 = sub_10001DECC((uint64_t)&qword_100135300);
    uint64_t v6 = (void *)a1[1];
    v33._uint64_t countAndFlagsBits = *a1;
    v33._object = v6;
    <- infix<A>(_:_:)( v5,  v7,  v8,  (uint64_t)&v33,  (uint64_t)type metadata for String,  (uint64_t)&protocol witness table for String);
    uint64_t v9 = sub_100008DB0(&qword_1001323E0);
    uint64_t inited = swift_initStackObject(v9, v32);
    *(_OWORD *)(inited + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
    if (qword_100130148 != -1) {
      swift_once(&qword_100130148, sub_1000351A8);
    }
    uint64_t v11 = sub_10001DECC((uint64_t)&qword_100135330);
    Swift::String v33 = v3;
    <- infix<A>(_:_:)( v11,  v12,  v13,  (uint64_t)&v33,  (uint64_t)type metadata for String,  (uint64_t)&protocol witness table for String);
    sub_10000ADB0();
    uint64_t v14 = QueryType.insert(_:_:)((uint64_t)v34);
    uint64_t v16 = v15;
    Swift::String v18 = v17;
    swift_setDeallocating(inited);
    sub_100058874();
    sub_10001DC30(v34);
    memcpy(__dst, __src, sizeof(__dst));
    sub_10001DAF0(__dst);
    v38.template._uint64_t countAndFlagsBits = v14;
    v38.template._object = v16;
    v38.bindings._rawValue = v18;
    Connection.run(_:)(v38);
    if (v19)
    {
      swift_bridgeObjectRelease();
      sub_10001BE7C();
      v34[0] = v19;
      swift_errorRetain(v19);
      uint64_t v20 = sub_100008DB0(&qword_100130620);
      if (swift_dynamicCast(__src, v34, v20, &type metadata for Result, 0LL))
      {
        swift_errorRelease(v19);
        uint64_t v21 = __src[1];
        int v22 = __src[2];
        uint64_t v23 = __src[3];
        if (LODWORD(__src[2]) == 19)
        {
          uint64_t v24 = type metadata accessor for Schema.RuntimeError(0LL);
          unint64_t v25 = sub_100037E5C();
          sub_100038AC8(v24, v25);
          *uint64_t v26 = 0xD0000000000000FALL;
          v26[1] = 0x80000001000F9C40LL;
          uint64_t v27 = swift_storeEnumTagMultiPayload(v26, v24, 0LL);
          swift_willThrow(v27);
          sub_100038920();
          sub_10000ADB0();
        }

        else
        {
          uint64_t v28 = __src[0];
          unint64_t v29 = sub_100037E20();
          uint64_t v30 = sub_100038AC8((uint64_t)&type metadata for Result, v29);
          *(void *)uint64_t v31 = v28;
          *(void *)(v31 + 8) = v21;
          *(_DWORD *)(v31 + 1sub_10000AC58(v0 + 6) = v22;
          *(void *)(v31 + 2sub_10000AC58(v0 + 4) = v23;
          swift_willThrow(v30);
        }
      }

      return swift_errorRelease(v34[0]);
    }

    else
    {
      swift_bridgeObjectRelease();
      return sub_10001BE7C();
    }
  }

  return result;
}

uint64_t type metadata accessor for LNActionRecord(uint64_t a1)
{
  uint64_t result = qword_100131A00;
  if (!qword_100131A00) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LNActionRecord);
  }
  return result;
}

void sub_1000378A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = a2 & 0xC000000000000001LL;
  if ((a2 & 0xC000000000000001LL) != 0)
  {
    if (a2 < 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v6 = __CocoaSet.count.getter(v5);
  }

  else
  {
    uint64_t v6 = *(void *)(a2 + 16);
  }

  unint64_t v7 = a1 & 0xC000000000000001LL;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v9 = __CocoaSet.count.getter(v8);
  }

  else
  {
    uint64_t v9 = *(void *)(a1 + 16);
  }

  if (v9 >= v6)
  {
    if (v4)
    {
      if (v2 < 0) {
        uint64_t v10 = v2;
      }
      else {
        uint64_t v10 = v2 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v11 = __CocoaSet.makeIterator()(v10);
      uint64_t v12 = sub_10000A1A0(0LL, (unint64_t *)&qword_100130BA0, &OBJC_CLASS___LNSystemProtocol_ptr);
      unint64_t v13 = sub_100038038();
      Set.Iterator.init(_cocoa:)(v48, v11, v12, v13);
      uint64_t v2 = v48[0];
      uint64_t v14 = v48[1];
      uint64_t v16 = v48[2];
      int64_t v15 = v48[3];
      unint64_t v17 = v48[4];
    }

    else
    {
      uint64_t v18 = -1LL << *(_BYTE *)(v2 + 32);
      uint64_t v14 = v2 + 56;
      uint64_t v16 = ~v18;
      uint64_t v19 = -v18;
      if (v19 < 64) {
        uint64_t v20 = ~(-1LL << v19);
      }
      else {
        uint64_t v20 = -1LL;
      }
      unint64_t v17 = v20 & *(void *)(v2 + 56);
      swift_bridgeObjectRetain();
      int64_t v15 = 0LL;
    }

    uint64_t v21 = sub_10000A1A0(0LL, (unint64_t *)&qword_100130BA0, &OBJC_CLASS___LNSystemProtocol_ptr);
    int64_t v42 = (unint64_t)(v16 + 64) >> 6;
    uint64_t v22 = a1 & 0xFFFFFFFFFFFFFF8LL;
    if (a1 < 0) {
      uint64_t v22 = a1;
    }
    uint64_t v43 = v22;
    uint64_t v45 = a1 + 56;
    uint64_t v41 = v14;
    while (1)
    {
      int64_t v44 = v15;
      if (v2 < 0)
      {
        uint64_t v25 = __CocoaSet.Iterator.next()();
        if (!v25)
        {
          uint64_t v47 = 0LL;
LABEL_61:
          sub_10001B100(v2);
          return;
        }

        uint64_t v46 = v25;
        swift_dynamicCast(&v47, &v46, (char *)&type metadata for Swift.AnyObject + 8, v21, 7LL);
        uint64_t v26 = v47;
        if (!v47) {
          goto LABEL_61;
        }
      }

      else
      {
        if (v17)
        {
          unint64_t v23 = __clz(__rbit64(v17));
          v17 &= v17 - 1;
          unint64_t v24 = v23 | (v15 << 6);
        }

        else
        {
          int64_t v27 = v15 + 1;
          if (__OFADD__(v15, 1LL))
          {
            __break(1u);
            return;
          }

          if (v27 >= v42) {
            goto LABEL_59;
          }
          unint64_t v28 = *(void *)(v14 + 8 * v27);
          ++v15;
          if (!v28)
          {
            int64_t v15 = v27 + 1;
            if (v27 + 1 >= v42) {
              goto LABEL_59;
            }
            unint64_t v28 = *(void *)(v14 + 8 * v15);
            if (!v28)
            {
              int64_t v15 = v27 + 2;
              if (v27 + 2 >= v42) {
                goto LABEL_59;
              }
              unint64_t v28 = *(void *)(v14 + 8 * v15);
              if (!v28)
              {
                int64_t v29 = v44 + 4;
                while (v29 < v42)
                {
                  unint64_t v28 = *(void *)(v14 + 8 * v29++);
                  if (v28)
                  {
                    int64_t v15 = v29 - 1;
                    goto LABEL_43;
                  }
                }

LABEL_59:
                uint64_t v47 = 0LL;
                goto LABEL_61;
              }
            }
          }

LABEL_54:
        uint64_t v2 = v32;
        unint64_t v7 = a1 & 0xC000000000000001LL;
        uint64_t v14 = v41;
      }
    }
  }

          *(void *)(v3 + 1sub_10000AC58(v0 + 6) = v37;
          goto LABEL_55;
        }

        goto LABEL_32;
      }
    }

    id v39 = v41;
LABEL_32:
    unint64_t v76 = (v40 - 1) & v40;
    uint64_t v38 = __clz(__rbit64(v40)) + (v39 << 6);
    uint64_t v85 = v39;
    goto LABEL_33;
  }

  __break(1u);
LABEL_64:
  uint64_t v56 = v39 + 3;
  if (v39 + 3 < v30)
  {
    uint64_t v55 = *(void *)(v62 + 8 * v56);
    if (v55) {
      goto LABEL_58;
    }
    v39 += 4LL;
    if (v39 >= v30) {
      goto LABEL_55;
    }
    uint64_t v55 = *(void *)(v62 + 8 * v39);
    if (!v55)
    {
      uint64_t v57 = v11 + 6;
      while (v57 < v30)
      {
        uint64_t v55 = *(void *)(v62 + 8 * v57++);
        if (v55)
        {
          id v39 = v57 - 1;
          goto LABEL_52;
        }
      }

      goto LABEL_55;
    }

    goto LABEL_52;
  }

      __break(1u);
      goto LABEL_55;
    }
  }

  else
  {
    sub_10000C218((uint64_t)v23, &qword_100131978);
  }

  sub_1000D4A80(v6, (uint64_t)v23);
  if (v24)
  {
    int64_t v15 = sub_100008DB0(&qword_100131980);
    if ((swift_dynamicCast(&v21, v23, v15, &type metadata for Int, 6LL) & 1) != 0)
    {
      uint64_t v16 = v21;
LABEL_39:
      unint64_t v24 = &type metadata for Int64;
      uint64_t v25 = &protocol witness table for Int64;
      v23[0] = v16;
      sub_1000EA06C(v23, a2);
      uint64_t v18 = (__int128 *)v23;
      return sub_10000C218((uint64_t)v18, &qword_100131978);
    }
  }

  else
  {
    sub_10000C218((uint64_t)v23, &qword_100131978);
  }

  sub_1000D4A80(v6, (uint64_t)v23);
  if (v24)
  {
    unint64_t v17 = sub_100008DB0(&qword_100131980);
    if ((swift_dynamicCast(&v21, v23, v17, &type metadata for Bool, 6LL) & 1) != 0)
    {
      uint64_t v16 = v21;
      goto LABEL_39;
    }
  }

  else
  {
    sub_10000C218((uint64_t)v23, &qword_100131978);
  }

  sub_1000D4A80(v6, (uint64_t)&v21);
  if (!v22)
  {
    uint64_t v18 = &v21;
    return sub_10000C218((uint64_t)v18, &qword_100131978);
  }

  sub_100009EEC(&v21, (uint64_t)v23);
  *(void *)&uint64_t v21 = 0LL;
  *((void *)&v21 + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(33LL);
  v19._object = (void *)0x80000001000FCFF0LL;
  v19._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v19);
  uint64_t v20 = sub_100008DB0(&qword_100131980);
  _print_unlocked<A, B>(_:_:)( v23,  &v21,  v20,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v21,  *((void *)&v21 + 1),  "AppIntents_SQLite/Statement.swift",  33LL,  2LL,  118LL,  0);
  __break(1u);
  return result;
}

id sub_100037C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v12 = 0LL;
  if (sub_100009E6C(a4, 1LL, v10) != 1)
  {
    URL._bridgeToObjectiveC()(v11);
    uint64_t v12 = v13;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(a4, v10);
  }

  id v14 = [v5 initWithType:a1 bundleIdentifier:v9 url:v12];

  return v14;
}

id sub_100037D34(void *a1)
{
  uint64_t v3 = a1[3];
  unint64_t v4 = sub_100008D74(a1, v3);
  uint64_t v5 = _bridgeAnythingToObjectiveC<A>(_:)(v4, v3);
  id v6 = [v1 initWithObject:v5];
  swift_unknownObjectRelease(v5);
  sub_10000AC58(a1);
  return v6;
}

id sub_100037D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  id v9 = [v4 initWithActionIdentifier:v7 bundleIdentifier:v8];

  return v9;
}

unint64_t sub_100037E20()
{
  unint64_t result = qword_100132420;
  if (!qword_100132420)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Result, &type metadata for Result);
    atomic_store(result, (unint64_t *)&qword_100132420);
  }

  return result;
}

unint64_t sub_100037E5C()
{
  unint64_t result = qword_100131958;
  if (!qword_100131958)
  {
    uint64_t v1 = type metadata accessor for Schema.RuntimeError(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1000F78CC, v1);
    atomic_store(result, (unint64_t *)&qword_100131958);
  }

  return result;
}

uint64_t sub_100037E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008DB0(&qword_100130BC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100037EE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_10003718C(a1, a2, a3);
}

uint64_t sub_100037EEC()
{
  uint64_t v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }

  uint64_t v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    uint64_t v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }

  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184LL, 7LL);
}

uint64_t sub_100037F74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LNActionRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100037FB8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LNActionRecord(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100037FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LNActionRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100038038()
{
  unint64_t result = qword_100131998;
  if (!qword_100131998)
  {
    uint64_t v1 = sub_10000A1A0(255LL, (unint64_t *)&qword_100130BA0, &OBJC_CLASS___LNSystemProtocol_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100131998);
  }

  return result;
}

uint64_t sub_100038088(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t *sub_100038094(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v13);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    id v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL(0LL);
    swift_bridgeObjectRetain(v7);
    if (sub_100009E6C((uint64_t)v10, 1LL, v11))
    {
      uint64_t v12 = sub_100008DB0(&qword_100130BC0);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
      sub_100009E60((uint64_t)v9, 0LL, 1LL, v11);
    }

    uint64_t v14 = *(int *)(a3 + 24);
    int64_t v15 = *(void **)((char *)a2 + v14);
    *(uint64_t *)((char *)v4 + v1sub_10000AC58(v0 + 4) = (uint64_t)v15;
    id v16 = v15;
  }

  return v4;
}

void sub_10003819C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL(0LL);
}

void *sub_100038210(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  id v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL(0LL);
  swift_bridgeObjectRetain(v6);
  if (sub_100009E6C((uint64_t)v9, 1LL, v10))
  {
    uint64_t v11 = sub_100008DB0(&qword_100130BC0);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
    sub_100009E60((uint64_t)v8, 0LL, 1LL, v10);
  }

  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = *(void **)((char *)a2 + v12);
  *(void *)((char *)a1 + v12) = v13;
  id v14 = v13;
  return a1;
}

void *sub_1000382EC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  id v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  int v12 = sub_100009E6C((uint64_t)v9, 1LL, v11);
  int v13 = sub_100009E6C((uint64_t)v10, 1LL, v11);
  if (!v12)
  {
    uint64_t v14 = *(void *)(v11 - 8);
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v9, v10, v11);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v11);
    goto LABEL_6;
  }

  if (v13)
  {
LABEL_6:
    uint64_t v15 = sub_100008DB0(&qword_100130BC0);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
  sub_100009E60((uint64_t)v9, 0LL, 1LL, v11);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 24);
  unint64_t v17 = *(void **)((char *)a2 + v16);
  uint64_t v18 = *(void **)((char *)a1 + v16);
  *(void *)((char *)a1 + v1sub_10000AC58(v0 + 6) = v17;
  id v19 = v17;

  return a1;
}

_OWORD *sub_100038428(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL(0LL);
  if (sub_100009E6C((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = sub_100008DB0(&qword_100130BC0);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    sub_100009E60((uint64_t)v7, 0LL, 1LL, v9);
  }

  *(void *)((char *)a1 + *(int *)(a3 + swift_release(*(void *)(v0 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_1000384F0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  int v12 = sub_100009E6C((uint64_t)v9, 1LL, v11);
  int v13 = sub_100009E6C((uint64_t)v10, 1LL, v11);
  if (!v12)
  {
    uint64_t v14 = *(void *)(v11 - 8);
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v9, v10, v11);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v11);
    goto LABEL_6;
  }

  if (v13)
  {
LABEL_6:
    uint64_t v15 = sub_100008DB0(&qword_100130BC0);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
  sub_100009E60((uint64_t)v9, 0LL, 1LL, v11);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 24);
  unint64_t v17 = *(void **)((char *)a1 + v16);
  *(void *)((char *)a1 + v1sub_10000AC58(v0 + 6) = *(void *)((char *)a2 + v16);

  return a1;
}

uint64_t sub_100038618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100038624);
}

uint64_t sub_100038624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(vsub_10000AC58(v0 + 4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_100008DB0(&qword_100130BC0);
    return sub_100009E6C(a1 + *(int *)(a3 + 20), a2, v8);
  }

uint64_t sub_10003869C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000386A8);
}

uint64_t sub_1000386A8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_100008DB0(&qword_100130BC0);
    return sub_100009E60(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }

  return result;
}

void sub_100038718(uint64_t a1)
{
  v4[0] = &unk_1000F6030;
  sub_100038798(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
  }

void sub_100038798(uint64_t a1)
{
  if (!qword_100132340)
  {
    uint64_t v2 = type metadata accessor for URL(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_100132340);
    }
  }

uint64_t sub_1000387EC(uint64_t a1)
{
  return static NSObject.== infix(_:_:)(a1, v1);
}

  ;
}

void sub_100038824()
{
  v0._uint64_t countAndFlagsBits = 0x655F6E6F736A202CLL;
  v0._object = (void *)0xEC00000028686361LL;
  String.append(_:)(v0);
}

uint64_t sub_100038844()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 120));
}

  ;
}

uint64_t sub_10003886C()
{
  return QueryType.filter(_:)();
}

uint64_t sub_10003887C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  return sub_100009EEC(&a9, (uint64_t)&a13);
}

uint64_t sub_100038888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return QueryType.namespace<A>(_:)(v6, v7, v8, v5, a5);
}

uint64_t sub_1000388A4()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_1000388B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return sub_100035AB0((uint64_t *)va);
}

void sub_1000388C0()
{
  v0._uint64_t countAndFlagsBits = 0x736E6F69746361LL;
  v0._object = (void *)0xE700000000000000LL;
  String.append(_:)(v0);
}

void sub_1000388DC()
{
  v0._uint64_t countAndFlagsBits = 0x20200A4D4F52460ALL;
  v0._object = (void *)0xEA00000000002020LL;
  String.append(_:)(v0);
}

uint64_t sub_1000388F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return sub_10000AC58((uint64_t *)va);
}

uint64_t sub_100038908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  return swift_dynamicCast(va1, (uint64_t *)va, v5, v4, 6LL);
}

uint64_t sub_100038920()
{
  return swift_release(v0);
}

uint64_t sub_100038928()
{
  return swift_bridgeObjectRelease(v0);
}

void *sub_10003893C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  return sub_10001DAF0(&a59);
}

void *sub_100038950()
{
  return sub_10001DAF0(&STACK[0x238]);
}

  ;
}

uint64_t sub_100038980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return QueryType.namespace<A>(_:)(v5, v6, v7, a4, a5);
}

void *sub_100038994( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  a12 = v13;
  a13 = v14;
  return sub_10001AFA8(&a9);
}

void sub_1000389A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1000389AC(uint64_t a1)
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, a1);
}

void sub_1000389BC()
{
  == infix<A>(_:_:)();
}

void *sub_1000389C4()
{
  return sub_10001D9AC(&STACK[0x238]);
}

void *sub_1000389CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  return sub_10001D9AC(&a59);
}

void sub_1000389D4()
{
}

uint64_t sub_1000389DC()
{
  return swift_release(v0);
}

void sub_1000389E4()
{
  *(void *)(v1 - 17sub_10000AC58(v0 + 6) = v0 + 32;
  *(void *)(v1 - 20sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v0 & 0xC000000000000001LL;
}

void sub_1000389FC( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  v16._uint64_t countAndFlagsBits = v15;
  v16._object = v14;
  String.append(_:)(v16);
}

uint64_t sub_100038A0C()
{
  return *(void *)(v0 + *(int *)(*(void *)(v1 - 184) + 24LL));
}

void sub_100038A1C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (a2 - 32) | 0x8000000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_100038A2C(uint64_t a1)
{
  return swift_allocObject(a1, 184LL, 7LL);
}

void sub_100038A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_100038A44()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

void *sub_100038A50(void *a1)
{
  return memcpy(a1, v1, 0xA8uLL);
}

id sub_100038A5C()
{
  return *(id *)(*(void *)(v0 + 48) + 8 * v1);
}

id sub_100038A68()
{
  return *(id *)(*(void *)(v0 + 48) + 8 * v1);
}

void sub_100038A74(uint64_t a1)
{
  unint64_t v1 = 0xE100000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

Swift::Int sub_100038A7C()
{
  return NSObject._rawHashValue(seed:)(*(void *)(v0 + 40));
}

uint64_t sub_100038A88()
{
  return __CocoaSet.contains(_:)(v0, *(void *)(v1 - 136));
}

id sub_100038A94()
{
  return *(id *)(*(void *)(v1 - 176) + 8 * v0);
}

unint64_t sub_100038AA0()
{
  return (unint64_t)Statement.failableNext()();
}

  ;
}

uint64_t sub_100038AC0()
{
  return type metadata accessor for LNActionRecord(0LL);
}

uint64_t sub_100038AC8(uint64_t a1, uint64_t a2)
{
  return swift_allocError(a1, a2, 0LL, 0LL);
}

uint64_t sub_100038AD4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  sub_100008DB0(&qword_100133910);
  if (v1) {
    sub_10003A38C();
  }
  uint64_t v2 = sub_10003A40C();
  return sub_10003A358(v2, v3, v4, v5);
}

uint64_t sub_100038B20()
{
  uint64_t v3 = sub_10003A460();
  uint64_t v4 = type metadata accessor for LNActionRecord(v3);
  if (v2)
  {
    uint64_t v5 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL);
    sub_100037F74(v1 + ((v5 + 32) & ~v5), v0);
  }

  uint64_t v6 = sub_10003A40C();
  return sub_10003A358(v6, v7, v8, v9);
}

uint64_t sub_100038B74(uint64_t a1)
{
  uint64_t result = sub_10003A20C(a1);
  if ((v4 & 1) != 0) {
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }

  if (result == 1LL << *(_BYTE *)(a1 + 32)) {
    return 0LL;
  }
  else {
    return sub_10003A190(result, v3, 0LL, a1);
  }
}

uint64_t sub_100038BD8()
{
  uint64_t v1 = sub_10003A460();
  type metadata accessor for URL(v1);
  if (v0) {
    sub_10003A38C();
  }
  uint64_t v2 = sub_10003A40C();
  return sub_10003A358(v2, v3, v4, v5);
}

void *sub_100038C14()
{
  uint64_t v0 = sub_100038CA4(&qword_100130158, &qword_100135350, (void **)algn_100135358, (uint64_t)sub_100038EB8);
  uint64_t v1 = sub_100008DB0(&qword_100131A48);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  uint64_t result = sub_100039154((void *)1, 300LL, v0);
  qword_100135348 = (uint64_t)result;
  return result;
}

uint64_t sub_100038C84()
{
  return sub_100038CA4(&qword_100130298, &qword_100135638, &qword_100135640, (uint64_t)sub_100076368);
}

uint64_t sub_100038CA4(void *a1, uint64_t *a2, void **a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100011A0C();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v12);
  sub_100011A0C();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v16);
  sub_100011A0C();
  uint64_t v19 = v18 - v17;
  sub_100011AB4(v20, (unint64_t *)&qword_100130560, &OBJC_CLASS___OS_dispatch_queue_ptr);
  _StringGuts.grow(_:)(28LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  uint64_t v32 = (void *)0xD000000000000010LL;
  unint64_t v33 = 0x80000001000F9610LL;
  if (*a1 != -1LL) {
    swift_once(a1, a4);
  }
  uint64_t v21 = *a2;
  uint64_t v22 = *a3;
  sub_10001C1BC();
  v23._uint64_t countAndFlagsBits = v21;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v22);
  v24._uint64_t countAndFlagsBits = 0x636E756F6265442ELL;
  v24._object = (void *)0xEA00000000007265LL;
  String.append(_:)(v24);
  uint64_t v25 = v32;
  unint64_t v26 = v33;
  static DispatchQoS.utility.getter();
  uint64_t v32 = _swiftEmptyArrayStorage;
  unint64_t v27 = sub_10003A28C();
  uint64_t v28 = sub_100008DB0(&qword_100130570);
  unint64_t v29 = sub_10001B540();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v28, v29, v12, v27);
  (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))( v11,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v7);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v25, v26, v19, v15, v11, 0LL);
}

uint64_t sub_100038EB8()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(LNAppShortcutsChangedNotification);
  qword_100135350 = result;
  *(void *)algn_100135358 = v1;
  return result;
}

void *sub_100038EE4(uint64_t a1)
{
  uint64_t v1 = sub_100038B74(a1);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = v1;
  uint64_t v4 = v2;
  uint64_t v5 = sub_100008DB0((uint64_t *)&unk_100130EB0);
  uint64_t v6 = type metadata accessor for Notification(0LL);
  uint64_t v7 = swift_allocObject( v5,  ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL))
       + *(void *)(*(void *)(v6 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v7 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
  uint64_t v8 = (void *)LNAppShortcutsChangedNotification;
  memset(v25, 0, 32);
  uint64_t v9 = sub_100008DB0(&qword_100131A40);
  uint64_t inited = swift_initStackObject(v9, v24);
  *(_OWORD *)(inited + 1sub_10000AC58(v0 + 6) = xmmword_1000F57D0;
  uint64_t v22 = 0xD000000000000013LL;
  unint64_t v23 = 0x80000001000F9DF0LL;
  id v11 = v8;
  sub_10003A440((uint64_t)&v22);
  *(void *)(inited + 9sub_10000AC58(v0 + 6) = &type metadata for String;
  *(void *)(inited + 72) = v3;
  *(void *)(inited + 8sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v4;
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNAppShortcutsChangedNotificationAppBundleIdentifiersKey);
  unint64_t v23 = v12;
  uint64_t v13 = sub_10003A440((uint64_t)&v22);
  uint64_t v14 = sub_100011AB4(v13, (unint64_t *)&qword_100131130, &OBJC_CLASS___NSArray_ptr);
  sub_10000AE38();
  sub_100039430();
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  sub_100042310(v16);
  uint64_t v18 = v17;
  swift_release();
  id v19 = sub_100007998(v18);
  *(void *)(inited + 168) = v14;
  *(void *)(inited + 14sub_10000AC58(v0 + 4) = v19;
  uint64_t v20 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  Notification.init(name:object:userInfo:)(v11, v25, v20);
  return (void *)v7;
}

uint64_t sub_1000390CC(uint64_t a1)
{
  uint64_t v2 = swift_bridgeObjectRetain(a1);
  v3._uint64_t countAndFlagsBits = Set.description.getter(v2, &type metadata for String, &protocol witness table for String);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(object);
  return 0x676E697461647075LL;
}

uint64_t sub_10003914C()
{
  return sub_1000390CC(*v0);
}

void *sub_100039154(void *a1, uint64_t a2, uint64_t a3)
{
  *(void *)((char *)v4 + *(void *)(*v4 + 128LL)) = 0LL;
  *(void *)((char *)v4 + *(void *)(*v4 + 136LL)) = 0LL;
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = a3;
    uint64_t v5 = a2;
    id v3 = a1;
    if (qword_1001302D8 == -1) {
      goto LABEL_3;
    }
  }

  swift_once(&qword_1001302D8, sub_100088814);
LABEL_3:
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = sub_100008D98(v7, (uint64_t)qword_100135780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))( (uint64_t)v4 + qword_100135CC8,  v8,  v7);
  *(void *)((char *)v4 + qword_100135CDsub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v6;
  v4[2] = v5;
  if (!v3)
  {
    id v9 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
    goto LABEL_7;
  }

  if (v3 == (id)1)
  {
    id v9 = [(id)objc_opt_self(NSDistributedNotificationCenter) defaultCenter];
LABEL_7:
    id v3 = v9;
  }

  void v4[3] = v3;
  return v4;
}

void sub_100039278(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)((char *)v4 + *(void *)(*v4 + 128LL));
  *uint64_t v7 = 0LL;
  v7[1] = 0LL;
  *(void *)((char *)v4 + *(void *)(*v4 + 136LL)) = 0LL;
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = a3;
    uint64_t v5 = a2;
    id v3 = a1;
    if (qword_1001302D8 == -1) {
      goto LABEL_3;
    }
  }

  swift_once(&qword_1001302D8, sub_100088814);
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = sub_100008D98(v8, (uint64_t)qword_100135780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))( (uint64_t)v4 + qword_100135CC8,  v9,  v8);
  *(void *)((char *)v4 + qword_100135CDsub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v6;
  v4[2] = v5;
  if (!v3)
  {
    id v10 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
    goto LABEL_7;
  }

  if (v3 == (id)1)
  {
    id v10 = [(id)objc_opt_self(NSDistributedNotificationCenter) defaultCenter];
LABEL_7:
    id v3 = v10;
  }

  void v4[3] = v3;
  sub_10001BAF0();
}

void sub_100039394( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  a25 = v26;
  a26 = v28;
  uint64_t v29 = *(void *)(v27 + 16);
  if (v29)
  {
    uint64_t v30 = v27;
    uint64_t v31 = sub_100008DB0(&qword_100131A50);
    uint64_t v32 = (void *)sub_10000C254(v31, 48 * v29 + 32);
    size_t v33 = j__malloc_size(v32);
    v32[2] = v29;
    v32[3] = 2 * ((uint64_t)(v33 - 32) / 48);
    sub_10003968C((uint64_t)&a10, (uint64_t)(v32 + 4), v29, v30);
    sub_10000AE38();
    sub_10003A364();
    if (!v34) {
      __break(1u);
    }
  }

  sub_10003A33C();
}

void sub_100039430()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = sub_100008DB0((uint64_t *)&unk_100132130);
    id v3 = (const void *)sub_10000C254(v2, 16 * v1 + 32);
    size_t v4 = j__malloc_size(v3);
    sub_10003A3F4(2 * ((uint64_t)(v4 - 32) / 16));
    sub_100039898(v5, v6, v7, v8);
    sub_10003A3B0();
    sub_10003A364();
    if (!v9) {
      __break(1u);
    }
  }

  sub_10003A33C();
}

void sub_1000394AC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
}

void sub_1000394BC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }

  else
  {
    if (!v5) {
      goto LABEL_8;
    }
    if (v5 > 0)
    {
      uint64_t v8 = sub_100008DB0(&qword_100130F68);
      char v9 = (void *)sub_10000C254(v8, 40 * v5 + 32);
      size_t v10 = j__malloc_size(v9);
      v9[2] = v5;
      v9[3] = 2 * ((uint64_t)(v10 - 32) / 40);
    }

    if (v4 != a3)
    {
      sub_10004504C(a2 + 40 * a3, v5);
LABEL_8:
      sub_10001BAF0();
      return;
    }
  }

  __break(1u);
}

void sub_10003956C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
}

void sub_100039578( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t, uint64_t, void *))
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }

  else
  {
    if (!v6) {
      goto LABEL_9;
    }
    if (v6 <= 0)
    {
      id v11 = _swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v10 = sub_100008DB0(&qword_100130BD0);
      id v11 = (void *)sub_10000C254(v10, 8 * v6 + 32);
      j__malloc_size(v11);
      sub_10003A41C();
      v11[2] = v6;
      v11[3] = v12;
    }

    if (v5 != a3)
    {
      a5(a2 + 8 * a3, v6, v11 + 4);
LABEL_9:
      sub_10001BAF0();
      return;
    }
  }

  __break(1u);
}

void sub_10003961C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = sub_100008DB0(&qword_100130BD0);
    id v3 = (const void *)sub_10000C254(v2, 8 * v1 + 32);
    j__malloc_size(v3);
    sub_10003A41C();
    sub_10003A3F4(v4);
    sub_100039D78(v5, v6, v7, v8);
    sub_10003A3B0();
    sub_10003A364();
    if (!v9) {
      __break(1u);
    }
  }

  sub_10003A33C();
}

uint64_t sub_10003968C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *unint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void *)(a4 + 48) + 32 * v16;
    uint64_t v22 = *(void *)(v20 + 16);
    uint64_t v21 = *(void *)(v20 + 24);
    __int128 v23 = *(_OWORD *)(*(void *)(a4 + 56) + 16 * v16);
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v20;
    *(void *)(v11 + 1sub_10000AC58(v0 + 6) = v22;
    *(void *)(v11 + 2sub_10000AC58(v0 + 4) = v21;
    *(_OWORD *)(v11 + 32) = v23;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }

    v11 += 48LL;
    uint64_t result = swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

uint64_t sub_100039898(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *unint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }

    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

void sub_100039A94(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 56);
  uint64_t v4 = a4 + 56;
  uint64_t v5 = v6;
  uint64_t v38 = v4;
  uint64_t v7 = -1LL << *(_BYTE *)(v4 - 24);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & v5;
  if (!a2)
  {
    int64_t v11 = 0LL;
LABEL_38:
    *a1 = a4;
    a1[1] = v38;
    a1[2] = ~v7;
    a1[3] = v11;
    a1[4] = v9;
    return;
  }

  if (!a3)
  {
    int64_t v11 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v10 = a2;
  uint64_t v35 = -1LL << *(_BYTE *)(v4 - 24);
  id v36 = a1;
  int64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  int64_t v37 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v40 = (v9 - 1) & v9;
  int64_t v41 = v11;
  for (unint64_t i = __clz(__rbit64(v9)) | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v14 << 6))
  {
    ++v12;
    int64_t v17 = (void *)(*(void *)(a4 + 48) + 104 * i);
    uint64_t v18 = v17[1];
    uint64_t v19 = v17[2];
    uint64_t v20 = v17[3];
    uint64_t v22 = (void *)v17[4];
    uint64_t v21 = v17[5];
    uint64_t v24 = v17[6];
    uint64_t v23 = v17[7];
    uint64_t v26 = v17[8];
    uint64_t v25 = v17[9];
    uint64_t v28 = v17[10];
    uint64_t v27 = (void *)v17[11];
    uint64_t v29 = v17[12];
    *uint64_t v10 = *v17;
    v10[1] = v18;
    v10[2] = v19;
    v10[3] = v20;
    v10[4] = v22;
    v10[5] = v21;
    v10[6] = v24;
    v10[7] = v23;
    v10[8] = v26;
    v10[9] = v25;
    v10[10] = v28;
    v10[11] = v27;
    v10[12] = v29;
    uint64_t v30 = a3;
    if (v12 == a3)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v33 = v22;
      sub_10001C1BC();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v34 = v27;
      swift_bridgeObjectRetain();
      uint64_t v7 = v35;
      a1 = v36;
      unint64_t v9 = v40;
      int64_t v11 = v41;
      goto LABEL_38;
    }

    v10 += 13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v31 = v22;
    sub_10001C1BC();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v32 = v27;
    swift_bridgeObjectRetain();
    a3 = v30;
    unint64_t v9 = v40;
    int64_t v11 = v41;
    if (v40) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v14 >= v37) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v38 + 8 * v14);
    if (!v15) {
      break;
    }
LABEL_18:
    uint64_t v40 = (v15 - 1) & v15;
    int64_t v41 = v14;
  }

  v11 += 2LL;
  if (v14 + 1 >= v37)
  {
    unint64_t v9 = 0LL;
    int64_t v11 = v14;
    goto LABEL_37;
  }

  unint64_t v15 = *(void *)(v38 + 8 * v11);
  if (v15) {
    goto LABEL_14;
  }
  int64_t v16 = v14 + 2;
  if (v14 + 2 >= v37) {
    goto LABEL_33;
  }
  unint64_t v15 = *(void *)(v38 + 8 * v16);
  if (v15) {
    goto LABEL_17;
  }
  int64_t v11 = v14 + 3;
  if (v14 + 3 >= v37)
  {
    unint64_t v9 = 0LL;
    int64_t v11 = v14 + 2;
    goto LABEL_37;
  }

  unint64_t v15 = *(void *)(v38 + 8 * v11);
  if (v15)
  {
LABEL_14:
    int64_t v14 = v11;
    goto LABEL_18;
  }

  int64_t v16 = v14 + 4;
  if (v14 + 4 >= v37)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v7 = v35;
    a1 = v36;
    goto LABEL_38;
  }

  unint64_t v15 = *(void *)(v38 + 8 * v16);
  if (v15)
  {
LABEL_17:
    int64_t v14 = v16;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v14 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v14 >= v37)
    {
      unint64_t v9 = 0LL;
      int64_t v11 = v37 - 1;
      goto LABEL_37;
    }

    unint64_t v15 = *(void *)(v38 + 8 * v14);
    ++v16;
    if (v15) {
      goto LABEL_18;
    }
  }

void *sub_100039D78(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  int64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void **)(*(void *)(a4 + 56) + 8 * v16);
    *int64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }

    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

void sub_100039F70(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = a1;
  if ((a4 & 0xC000000000000001LL) == 0)
  {
    if ((a3 & 1) != 0) {
      goto LABEL_13;
    }
    if (a1 < 0 || 1LL << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }

    else if (((*(void *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2) {
        goto LABEL_20;
      }
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        uint64_t v12 = __CocoaSet.Index.element.getter(v8, a2);
        uint64_t v24 = v12;
        uint64_t v13 = sub_100011AB4(v12, (unint64_t *)&qword_100130BA0, &OBJC_CLASS___LNSystemProtocol_ptr);
        swift_unknownObjectRetain(v12);
        swift_dynamicCast(&v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v13, 7LL);
        uint64_t v4 = v25;
        swift_unknownObjectRelease(v12);
        Swift::Int v14 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
        uint64_t v15 = -1LL << *(_BYTE *)(a4 + 32);
        uint64_t v8 = v14 & ~v15;
        sub_10003A44C();
        if ((v16 & 1) != 0)
        {
          id v17 = sub_10003A434();
          char v18 = sub_10003A3C8((uint64_t)v17);

          if ((v18 & 1) == 0)
          {
            uint64_t v19 = ~v15;
            do
            {
              uint64_t v8 = (v8 + 1) & v19;
              sub_10003A44C();
              if ((v20 & 1) == 0) {
                goto LABEL_24;
              }
              id v21 = sub_10003A434();
              char v22 = sub_10003A3C8((uint64_t)v21);
            }

            while ((v22 & 1) == 0);
          }

LABEL_20:
          id v23 = *(id *)(*(void *)(a4 + 48) + 8 * v8);
          return;
        }

LABEL_24:
        __break(1u);
        goto LABEL_25;
      }

          swift_release(v5);
          return;
        }
      }
    }

      uint64_t v2 = v23;
      a2 = v31;
      if (v3 == v25) {
        goto LABEL_27;
      }
    }

    if (v9 != 1)
    {
      uint64_t v12 = v21;
      uint64_t v13 = 1LL;
      while (1)
      {
        Swift::Int v14 = v13 + 1;
        if (__OFADD__(v13, 1LL)) {
          break;
        }
        uint64_t result = *(v12 - 1);
        uint64_t v15 = *v12;
        if (result == v6 && v15 == v7) {
          goto LABEL_24;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v15, v6, v7, 0LL);
        if ((result & 1) != 0) {
          goto LABEL_24;
        }
        v12 += 2;
        ++v13;
        if (v14 == v9) {
          goto LABEL_19;
        }
      }

      __break(1u);
      goto LABEL_29;
    }

    id v36 = (v39 - 1) & v39;
  }

  uint64_t v40 = v38 + 3;
  if (v40 >= v94)
  {
LABEL_103:
    swift_release();
    uint64_t v88 = objc_allocWithZone(&OBJC_CLASS___LNAction);
    return sub_1000BF830(v92, v29, v90, v34, v91, 0LL, 0LL);
  }

  id v39 = *(void *)(v93 + 8 * v40);
  if (v39)
  {
    uint64_t v30 = v40;
    goto LABEL_24;
  }

  while (1)
  {
    uint64_t v30 = v40 + 1;
    if (__OFADD__(v40, 1LL)) {
      break;
    }
    if (v30 >= v94) {
      goto LABEL_103;
    }
    id v39 = *(void *)(v93 + 8 * v30);
    ++v40;
    if (v39) {
      goto LABEL_24;
    }
  }

      uint64_t v10 = (v16 - 1) & v16;
      Swift::Int v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }

    char v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    char v20 = *v18;
    uint64_t v19 = v18[1];
    id v21 = *(void **)(*(void *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)(v35, *(void *)(v9 + 40));
    sub_10001BCF8();
    char v22 = v21;
    String.hash(into:)(v35, v20, v19);
    uint64_t result = Hasher._finalize()();
    id v23 = -1LL << *(_BYTE *)(v9 + 32);
    uint64_t v24 = result & ~v23;
    uint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) == 0) {
      break;
    }
    uint64_t v26 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_34:
    *(void *)(v12 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v26;
    id v31 = (void *)(*(void *)(v9 + 48) + 16 * v26);
    uint8_t *v31 = v20;
    v31[1] = v19;
    *(void *)(*(void *)(v9 + 56) + 8 * v2sub_10000AC58(v0 + 6) = v22;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1LL)) {
      goto LABEL_39;
    }
    if (!v5) {
      return v9;
    }
  }

  uint64_t v27 = 0;
  uint64_t v28 = (unint64_t)(63 - v23) >> 6;
  while (++v25 != v28 || (v27 & 1) == 0)
  {
    uint64_t v29 = v25 == v28;
    if (v25 == v28) {
      uint64_t v25 = 0LL;
    }
    v27 |= v29;
    uint64_t v30 = *(void *)(v12 + 8 * v25);
    if (v30 != -1)
    {
      uint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
      goto LABEL_34;
    }
  }

  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

      uint64_t v10 = (v16 - 1) & v16;
      id v39 = v17;
      Swift::Int v14 = __clz(__rbit64(v16)) + (v17 << 6);
    }

    uint64_t v19 = v4;
    char v20 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    char v22 = *v20;
    id v21 = v20[1];
    id v23 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v14);
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    Hasher.init(_seed:)(v40, *(void *)(v9 + 40));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)(v40, v22, v21);
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1LL << *(_BYTE *)(v9 + 32);
    uint64_t v27 = result & ~v26;
    uint64_t v28 = v27 >> 6;
    if (((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) == 0) {
      break;
    }
    uint64_t v29 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_34:
    *(void *)(v12 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v29;
    id v34 = (void *)(*(void *)(v9 + 48) + 16 * v29);
    *id v34 = v22;
    v34[1] = v21;
    uint64_t v35 = (void *)(*(void *)(v9 + 56) + 16 * v29);
    *uint64_t v35 = v24;
    v35[1] = v25;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1LL)) {
      goto LABEL_39;
    }
    uint64_t v4 = v19;
    uint64_t v11 = v39;
    if (!v5) {
      return v9;
    }
  }

  uint64_t v30 = 0;
  id v31 = (unint64_t)(63 - v26) >> 6;
  while (++v28 != v31 || (v30 & 1) == 0)
  {
    id v32 = v28 == v31;
    if (v28 == v31) {
      uint64_t v28 = 0LL;
    }
    v30 |= v32;
    id v33 = *(void *)(v12 + 8 * v28);
    if (v33 != -1)
    {
      uint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
      goto LABEL_34;
    }
  }

  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10003A190(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1LL << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a4 + 36) == a2)
  {
    uint64_t v4 = *(void *)(*(void *)(a4 + 48) + 16 * result);
    sub_10000AE38();
    return v4;
  }

LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_10003A20C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  uint64_t v2 = 64LL;
  for (uint64_t i = 9LL; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64LL;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

unint64_t sub_10003A28C()
{
  unint64_t result = qword_100130568;
  if (!qword_100130568)
  {
    uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_100130568);
  }

  return result;
}

ValueMetadata *type metadata accessor for AppShortcutsChangedNotification()
{
  return &type metadata for AppShortcutsChangedNotification;
}

unint64_t sub_10003A2DC(uint64_t a1)
{
  unint64_t result = sub_10003A300();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003A300()
{
  unint64_t result = qword_100131A58;
  if (!qword_100131A58)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F6090, &type metadata for AppShortcutsChangedNotification);
    atomic_store(result, (unint64_t *)&qword_100131A58);
  }

  return result;
}

  ;
}

uint64_t sub_10003A358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100009E60(a1, a2, a3, a4);
}

uint64_t sub_10003A364()
{
  return sub_10001B100(v0);
}

uint64_t sub_10003A38C()
{
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))( v0,  v2 + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL)),  v1);
}

uint64_t sub_10003A3B0()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10003A3C8(uint64_t a1)
{
  return static NSObject.== infix(_:_:)(a1, v1);
}

  ;
}

void sub_10003A3F4(uint64_t a1@<X8>)
{
  *(void *)(v2 + 1sub_10000AC58(v0 + 6) = v1;
  *(void *)(v2 + 2sub_10000AC58(v0 + 4) = a1;
}

uint64_t sub_10003A40C()
{
  return v0;
}

  ;
}

id sub_10003A434()
{
  return *(id *)(*(void *)(v0 + 48) + 8 * v1);
}

uint64_t sub_10003A440(uint64_t a1)
{
  return AnyHashable.init<A>(_:)(a1, v1, v2);
}

  ;
}

uint64_t sub_10003A460()
{
  return 0LL;
}

void *sub_10003A474(unint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_33;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v3)
  {
    while (1)
    {
      uint64_t v27 = v2;
      unint64_t v4 = 0LL;
      uint64_t v30 = v2 & 0xFFFFFFFFFFFFFF8LL;
      unint64_t v31 = v2 & 0xC000000000000001LL;
      uint64_t v29 = v2 + 32;
      char v5 = a2;
      while (1)
      {
        if (v31)
        {
          id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v27);
        }

        else
        {
          if (v4 >= *(void *)(v30 + 16))
          {
            __break(1u);
LABEL_31:
            __break(1u);
            goto LABEL_32;
          }

          id v6 = *(id *)(v29 + 8 * v4);
        }

        uint64_t v7 = v6;
        if (__OFADD__(v4++, 1LL)) {
          goto LABEL_31;
        }
        id v9 = [v6 identifier];
        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
        uint64_t v12 = v11;

        uint64_t v13 = v5[2];
        if (!v13)
        {

          swift_bridgeObjectRelease(v12);
          goto LABEL_17;
        }

        uint64_t v14 = v5[4];
        uint64_t v15 = v5[5];
        BOOL v16 = v14 == v10 && v15 == v12;
        if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v10, v12, 0LL) & 1) == 0) {
          break;
        }
LABEL_14:
        uint64_t v17 = swift_bridgeObjectRelease(v12);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
        uint64_t v18 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
        uint64_t v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v7);
        specialized ContiguousArray._endMutation()(v19);
LABEL_15:
        char v5 = a2;
LABEL_17:
        if (v4 == v3)
        {
          uint64_t v2 = v27;
          goto LABEL_37;
        }
      }

      if (v13 == 1) {
        break;
      }
      uint64_t v2 = (uint64_t)(a2 + 7);
      uint64_t v20 = 1LL;
      while (1)
      {
        uint64_t v21 = v20 + 1;
        if (__OFADD__(v20, 1LL)) {
          break;
        }
        uint64_t v22 = *(void *)(v2 - 8);
        uint64_t v23 = *(void *)v2;
        BOOL v24 = v22 == v10 && v23 == v12;
        if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v10, v12, 0LL) & 1) != 0) {
          goto LABEL_14;
        }
        v2 += 16LL;
        ++v20;
        if (v21 == v13) {
          goto LABEL_28;
        }
      }

void sub_10003A6A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_10000AC78((_OWORD *)a1, v5);
    sub_10003E330((uint64_t)v5, a2, a3);
    sub_10001198C();
  }

  else
  {
    sub_10001B60C(a1, &qword_100130EA0);
    sub_100032D28(a2, a3, v5);
    sub_10001198C();
    sub_10001B60C((uint64_t)v5, &qword_100130EA0);
  }

void sub_10003A730(uint64_t a1)
{
  uint64_t v2 = sub_100008DB0((uint64_t *)&unk_100132900);
  __chkstk_darwin(v2);
  unint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v9 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (sub_100009E6C(a1, 1LL, v5) == 1)
  {
    sub_10001B60C(a1, (uint64_t *)&unk_100132900);
    sub_100032E14();
    swift_bridgeObjectRelease();
    sub_10001B60C((uint64_t)v4, (uint64_t *)&unk_100132900);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v8, a1, v5);
    sub_10003E3B8();
    swift_bridgeObjectRelease();
  }

void sub_10003A868(uint64_t a1)
{
  unint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100008DB0((uint64_t *)&unk_100132690);
  sub_100011A24();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (sub_100009E6C(a1, 1LL, v8) == 1)
  {
    sub_10001B60C(a1, &qword_100131BF0);
    sub_100032EB0();
    sub_10003F154();
    sub_10001B60C((uint64_t)v4, &qword_100131BF0);
  }

  else
  {
    sub_10003E6E0(a1, (uint64_t)v7);
    sub_10003E3B8();
    sub_10003F154();
  }

void sub_10003A978(uint64_t a1)
{
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v2)
  {
    sub_1000452D4();
    if (v2 < 0)
    {
      __break(1u);
      return;
    }

    uint64_t v3 = 0LL;
    while (v2 != v3)
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, a1);
      }
      else {
        id v4 = *(id *)(a1 + 8 * v3 + 32);
      }
      uint64_t v5 = v4;
      id v6 = [v4 key];
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      uint64_t v9 = v8;

      unint64_t v10 = _swiftEmptyArrayStorage[2];
      if (v10 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_1000452D4();
      }
      ++v3;
      _swiftEmptyArrayStorage[2] = v10 + 1;
      uint64_t v11 = &_swiftEmptyArrayStorage[2 * v10];
      v11[4] = v7;
      v11[5] = v9;
      if (v2 == v3) {
        return;
      }
    }

    __break(1u);
LABEL_15:
    if (a1 < 0) {
      uint64_t v12 = a1;
    }
    else {
      uint64_t v12 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1000119E4();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v12);
    sub_10001BC70();
  }

void sub_10003AAE8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a1;
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v8)
  {
    while (1)
    {
      sub_1000453F4();
      if (v8 < 0) {
        break;
      }
      uint64_t v9 = 0LL;
      unint64_t v17 = v7 & 0xC000000000000001LL;
      uint64_t v10 = v7;
      while (v8 != v9)
      {
        if (v17) {
          id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v7);
        }
        else {
          id v11 = *(id *)(v7 + 8 * v9 + 32);
        }
        id v12 = v11;
        unint64_t v14 = _swiftEmptyArrayStorage[2];
        unint64_t v13 = _swiftEmptyArrayStorage[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v14 >= v13 >> 1) {
          sub_1000453F4();
        }
        ++v9;
        _swiftEmptyArrayStorage[2] = v14 + 1;
        uint64_t v15 = &_swiftEmptyArrayStorage[5 * v14];
        v15[4] = a2;
        v15[5] = a3;
        void v15[6] = a4;
        v15[7] = a5;
        v15[8] = v12;
        uint64_t v7 = v10;
        if (v8 == v9) {
          goto LABEL_18;
        }
      }

      __break(1u);
LABEL_14:
      if (v7 < 0) {
        uint64_t v16 = v7;
      }
      else {
        uint64_t v16 = v7 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v16);
      swift_bridgeObjectRelease();
      if (!v8) {
        goto LABEL_18;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_18:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

uint64_t sub_10003AC94(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_19;
  }
  uint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  if (v4)
  {
    while (1)
    {
      id v5 = (a2 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a2)
         : *(id *)(a2 + 32);
      id v6 = v5;
      sub_10000A1A0(0LL, (unint64_t *)&qword_100130BA0, &OBJC_CLASS___LNSystemProtocol_ptr);
      char v7 = sub_10003F0BC();

      if ((v7 & 1) != 0) {
        break;
      }
      if (v4 != 1)
      {
        uint64_t v10 = 5LL;
        while (1)
        {
          id v11 = (a2 & 0xC000000000000001LL) != 0
              ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, a2)
              : *(id *)(a2 + 8 * v10);
          id v12 = v11;
          uint64_t v13 = v10 - 3;
          if (__OFADD__(v10 - 4, 1LL)) {
            break;
          }
          char v8 = static NSObject.== infix(_:_:)(v11, a1);

          if ((v8 & 1) == 0)
          {
            ++v10;
            if (v13 != v4) {
              continue;
            }
          }

          goto LABEL_9;
        }

        __break(1u);
LABEL_19:
        swift_bridgeObjectRetain();
        uint64_t v4 = sub_10003EF5C();
        if (v4) {
          continue;
        }
      }

      goto LABEL_8;
    }

    char v8 = 1;
  }

  else
  {
LABEL_8:
    char v8 = 0;
  }

LABEL_9:
  sub_10001198C();
  return v8 & 1;
}

  sub_100011A58();
  return v10;
}

  __break(1u);
}

uint64_t sub_10003ADDC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  uint64_t v7 = a3[4];
  uint64_t v8 = a3[5];
  if (v7 == a1 && v8 == a2) {
    return 1LL;
  }
  uint64_t result = sub_10003EFE4(v7, v8);
  if ((result & 1) != 0) {
    return 1LL;
  }
  if (v3 == 1) {
    return 0LL;
  }
  id v11 = a3 + 7;
  for (uint64_t i = 1LL; ; ++i)
  {
    uint64_t v13 = i + 1;
    if (__OFADD__(i, 1LL)) {
      break;
    }
    uint64_t v14 = *(v11 - 1);
    uint64_t v15 = *v11;
    BOOL v16 = v14 == a1 && v15 == a2;
    if (v16 || (sub_10003EFE4(v14, v15) & 1) != 0) {
      return 1LL;
    }
    uint64_t result = 0LL;
    v11 += 2;
    if (v13 == v3) {
      return result;
    }
  }

  __break(1u);
  return result;
}

void *sub_10003AE88(uint64_t a1, uint64_t *a2, void (*a3)(void), uint64_t *a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100008DB0(a2);
    uint64_t v9 = (void *)static _DictionaryStorage.allocate(capacity:)(v8);
  }

  else
  {
    uint64_t v9 = _swiftEmptyDictionarySingleton;
  }

  id v12 = v9;
  sub_10003E418(a1, 1, &v12, a3, a4);
  uint64_t v10 = v12;
  if (v4) {
    swift_release();
  }
  return v10;
}

void sub_10003AF28(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v283 = a4;
  uint64_t v334 = a2;
  uint64_t v328 = a1;
  sub_100008DB0((uint64_t *)&unk_100132900);
  sub_100011A24();
  __chkstk_darwin(v7);
  sub_100027FF8();
  uint64_t v281 = v8;
  sub_100027FE4();
  __chkstk_darwin(v9);
  uint64_t v280 = (uint64_t)&v275 - v10;
  sub_100027FE4();
  __chkstk_darwin(v11);
  uint64_t v305 = (uint64_t)&v275 - v12;
  sub_100027FE4();
  __chkstk_darwin(v13);
  unint64_t v15 = (unint64_t)&v275 - v14;
  uint64_t v16 = type metadata accessor for LNAppShortcutParameterRecord(0LL);
  uint64_t v309 = *(void *)(v16 - 8);
  v310 = (int *)v16;
  __chkstk_darwin(v16);
  sub_100027FF8();
  uint64_t v282 = v17;
  sub_100027FE4();
  __chkstk_darwin(v18);
  uint64_t v279 = (uint64_t)&v275 - v19;
  sub_100027FE4();
  __chkstk_darwin(v20);
  unint64_t v22 = (unint64_t)&v275 - v21;
  if (a3 >> 62) {
    goto LABEL_163;
  }
  uint64_t v23 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    unint64_t v306 = v22;
    unint64_t v307 = v15;
    id v333 = (id)a5;
    if (v23)
    {
      v343[0] = (uint64_t)_swiftEmptyArrayStorage;
      sub_100045464();
      if ((v23 & 0x8000000000000000LL) == 0)
      {
        uint64_t v332 = a3 & 0xC000000000000001LL;
        for (unint64_t i = a3; ; a3 = i)
        {
          if (v332) {
            id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a3);
          }
          else {
            id v25 = sub_10003F0A0(a3);
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)([v25 identifier]);
          sub_10003F128();
          sub_10003F180();
          if (v27)
          {
            sub_10003F01C(v26);
            sub_100045464();
          }

          sub_10003EF64();
        }
      }

      __break(1u);
      goto LABEL_167;
    }

    unint64_t v15 = 0LL;
    v289 = sub_10003AE88( (uint64_t)_swiftEmptyArrayStorage,  &qword_100130ED8,  (void (*)(void))sub_1000174F0,  &qword_100130588);
    if (a5 >> 62)
    {
      sub_10001BCF8();
      uint64_t v28 = sub_10003EF5C();
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v28 = *(void *)((a5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    if (v28) {
      break;
    }
    v293 = sub_10003AE88( (uint64_t)_swiftEmptyArrayStorage,  &qword_100130ED0,  (void (*)(void))sub_1000174E4,  &qword_100130738);
    unint64_t v330 = 0LL;
    v342 = &_swiftEmptySetSingleton;
    if (v283 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v33 = sub_10003EF5C();
    }

    else
    {
      uint64_t v32 = *(void *)((v283 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain();
      uint64_t v33 = v32;
    }

    if (!v33)
    {
LABEL_156:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }

    unint64_t v34 = 0LL;
    unint64_t v285 = v283 & 0xC000000000000001LL;
    uint64_t v277 = v283 & 0xFFFFFFFFFFFFFF8LL;
    unint64_t v276 = v283 + 32;
    id v287 = (id)LNValueTypeSpecificMetadataKeyLinkEnumerationSupportedValues;
    id v298 = (id)LNValueTypeSpecificMetadataKeyBoolTrueDisplayName;
    id v286 = (id)LNValueTypeSpecificMetadataKeyBoolFalseDisplayName;
    v302 = (char *)&type metadata for Any + 8;
    a3 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v284 = v33;
    while (1)
    {
      if (v285)
      {
        unint64_t v35 = v34;
        id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v283);
      }

      else
      {
        if (v34 >= *(void *)(v277 + 16)) {
          goto LABEL_162;
        }
        unint64_t v35 = v34;
        id v36 = *(id *)(v276 + 8 * v34);
      }

      BOOL v37 = __OFADD__(v35, 1LL);
      unint64_t v38 = v35 + 1;
      if (v37) {
        goto LABEL_161;
      }
      unint64_t v288 = v38;
      id v39 = v36;
      unint64_t v22 = (unint64_t)[v36 actionIdentifier];
      static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      sub_10003F160();
      if (!v289[2])
      {

LABEL_151:
        sub_100011958();
        goto LABEL_152;
      }

      id v292 = v39;
      uint64_t v40 = sub_10003F00C();
      if ((v41 & 1) == 0)
      {

        goto LABEL_151;
      }

      id v42 = sub_10003F094(v40);
      uint64_t v43 = sub_100011958();
      id v278 = v42;
      id v44 = sub_100011ABC(v43, "parameters");
      uint64_t v45 = sub_10003F034();
      uint64_t v46 = sub_10000A1A0(v45, &qword_100130BA8, &OBJC_CLASS___LNActionParameterMetadata_ptr);
      unint64_t v15 = sub_10003EF80(v46);

      unint64_t v47 = v15;
      unint64_t v301 = v15;
      if (!(v15 >> 62))
      {
        uint64_t v48 = *(void *)((v15 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        if (v48) {
          break;
        }
        goto LABEL_148;
      }

      swift_bridgeObjectRetain();
      uint64_t v48 = sub_10003EF5C();
      swift_bridgeObjectRelease();
      unint64_t v47 = v301;
      if (v48) {
        break;
      }
LABEL_148:

      sub_10000ADB0();
LABEL_152:
      unint64_t v34 = v288;
      if (v288 == v284) {
        goto LABEL_156;
      }
    }

    unint64_t v49 = 0LL;
    uint64_t v299 = v48;
    unint64_t v300 = v47 & 0xC000000000000001LL;
    unint64_t v290 = v47 + 32;
    uint64_t v291 = v47 & 0xFFFFFFFFFFFFFF8LL;
    while (1)
    {
      if (v300)
      {
        unint64_t v50 = v49;
        id v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v49, v47);
      }

      else
      {
        if (v49 >= *(void *)(v291 + 16)) {
          goto LABEL_159;
        }
        unint64_t v50 = v49;
        id v51 = *(id *)(v290 + 8 * v49);
      }

      BOOL v37 = __OFADD__(v50, 1LL);
      unint64_t v52 = v50 + 1;
      if (v37)
      {
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
        goto LABEL_160;
      }

      unint64_t v303 = v52;
      id v53 = v51;
      uint64_t v54 = sub_10003E5D0(v51);
      uint64_t v316 = v54;
      uint64_t v317 = v55;
      if (!v55) {
        goto LABEL_98;
      }
      v341 = _swiftEmptyDictionarySingleton;
      id v304 = v53;
      id v56 = sub_100011ABC(v54, "valueType");
      uint64_t v57 = objc_opt_self(&OBJC_CLASS___LNLinkEnumerationValueType);
      uint64_t v58 = (void *)swift_dynamicCastObjCClass(v56, v57);
      if (!v58)
      {

LABEL_50:
        id v53 = v304;
        unint64_t v22 = (unint64_t)sub_100011ABC(v64, "valueType");
        unint64_t v15 = (unint64_t)&_ss12_ArrayBufferV18_typeCheckSlowPathyySiF_ptr;
        uint64_t v65 = objc_opt_self(&OBJC_CLASS___LNPrimitiveValueType);
        uint64_t v66 = swift_dynamicCastObjCClass(v22, v65);
        if (!v66)
        {

          sub_10003EFA4();
LABEL_98:

          goto LABEL_147;
        }

        uint64_t v67 = v66;
        sub_10000A1A0(0LL, (unint64_t *)&qword_1001317F0, &OBJC_CLASS___NSObject_ptr);
        unint64_t v15 = (unint64_t)[(id)objc_opt_self(LNPrimitiveValueType) BOOLValueType];
        uint64_t v68 = sub_10003F0BC();

        if ((v68 & 1) == 0)
        {
          sub_10003EFA4();

          sub_10003F0A8();
          goto LABEL_147;
        }

        id v333 = (id)v22;
        id v69 = [v292 phraseTemplates];
        uint64_t v70 = sub_10003F034();
        uint64_t v332 = sub_10000A1A0( v70,  (unint64_t *)&qword_100131250,  &OBJC_CLASS___LNStaticDeferredLocalizedString_ptr);
        unint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v68, v332);

        sub_10003F0C8();
        unint64_t v72 = v71;
        unint64_t v330 = v15;
        sub_10001BC70();
        uint64_t v73 = *(void *)(v72 + 16);
        unint64_t v331 = v72;
        if (!v73)
        {
LABEL_100:

          sub_10003F0A8();
          swift_bridgeObjectRelease();
          sub_10003EFA4();
LABEL_146:
          swift_bridgeObjectRelease();
          goto LABEL_147;
        }

        unint64_t v327 = v67;
        uint64_t v74 = (unint64_t *)(v72 + 40);
        a5 = v332;
        while (2)
        {
          uint64_t v75 = *(v74 - 1);
          unint64_t v22 = *v74;
          uint64_t v335 = v75;
          v336 = (void *)v22;
          sub_10003F114();
          sub_1000119E4();
          sub_10003F0EC();
          sub_100038A74(125LL);
          unint64_t v76 = sub_10003F0E0();
          char v78 = sub_10003F0D4((uint64_t)v340, (uint64_t)&type metadata for String, v77, v76);
          sub_100011958();
          if ((v78 & 1) == 0) {
            goto LABEL_58;
          }
          id v79 = [v304 typeSpecificMetadata];
          sub_10003F134();
          uint64_t v81 = v80;
          unint64_t v82 = sub_10003E6A0();
          static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v15, v81, v302, v82);
          sub_1000389D4();
          if (*(void *)(v81 + 16))
          {
            id v83 = v298;
            uint64_t v84 = sub_10003F14C();
            if ((v85 & 1) != 0) {
              sub_10003EEA4(v84);
            }
            else {
              sub_10003EF98();
            }

            if (v337)
            {
              if ((sub_10003EEF8((uint64_t)&type metadata for Any) & 1) != 0)
              {
                uint64_t v86 = v340[0];
                if (*(void *)(v81 + 16))
                {
                  id v87 = v286;
                  uint64_t v88 = sub_10003F14C();
                  if ((v89 & 1) != 0) {
                    sub_10003EEA4(v88);
                  }
                  else {
                    sub_10003EF98();
                  }
                }

                else
                {
                  sub_10003EF98();
                }

                sub_10000ADB0();
                if (v337)
                {
                  if ((sub_10003EEF8((uint64_t)&type metadata for Any) & 1) != 0)
                  {
                    unint64_t v329 = a3;
                    v322 = v340[0];
                    uint64_t v90 = v341;
                    if (v341[2] && (uint64_t v91 = sub_100015F98(1702195828LL, 0xE400000000000000LL), (v92 & 1) != 0))
                    {
                      uint64_t v93 = v91;
                      uint64_t v94 = v90[7];
                      uint64_t v95 = (void *)sub_1000338B4();
                      uint64_t v96 = *(v95 - 1);
                      uint64_t v97 = v94 + *(void *)(v96 + 72) * v93;
                      uint64_t v98 = v280;
                      sub_10003EE9C(v280, v97, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 16));
                      sub_10003EEC4();
                      if (!v99)
                      {
                        uint64_t v100 = v279;
                        sub_10003EE9C(v279, v98, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 32));
                        goto LABEL_84;
                      }
                    }

                    else
                    {
                      uint64_t v95 = (void *)sub_1000338B4();
                      uint64_t v98 = v280;
                      sub_10003EEB4(v280);
                    }

                    sub_10001B60C(v98, (uint64_t *)&unk_100132900);
                    uint64_t v100 = v279;
                    UUID.init()();
                    sub_1000338B4();
                    uint64_t v101 = sub_10003F080();
                    sub_10003EE9C(v101, v100, v102);
                    uint64_t v103 = sub_10003F040();
                    sub_10003A730(v103);
LABEL_84:
                    sub_10003F074();
                    sub_1000119E4();
                    uint64_t v104 = v86;
                    uint64_t v105 = sub_100028048((uint64_t)[v104 key]);
                    uint64_t v323 = v106;
                    uint64_t v324 = v105;

                    v337 = &type metadata for Bool;
                    LOBYTE(v335) = 1;
                    id v107 = objc_allocWithZone(&OBJC_CLASS___LNValue);
                    uint64_t v108 = v317;
                    swift_bridgeObjectRetain();
                    id v325 = v333;
                    sub_10003F0B0();
                    id v109 = objc_allocWithZone(&OBJC_CLASS___LNProperty);
                    id v110 = sub_10003EF8C(v316, v108);
                    uint64_t v111 = v310;
                    uint64_t v112 = (void *)(v100 + v310[5]);
                    *uint64_t v112 = v328;
                    v112[1] = v98;
                    uint64_t v113 = (uint64_t *)(v100 + v111[6]);
                    *uint64_t v113 = v75;
                    v113[1] = v22;
                    uint64_t v114 = v111[7];
                    id v326 = v104;
                    *(void *)(v100 + v11sub_10000AC58(v0 + 4) = v104;
                    uint64_t v115 = (uint64_t *)(v100 + v111[8]);
                    uint64_t v116 = v323;
                    *uint64_t v115 = v324;
                    v115[1] = v116;
                    *(void *)(v100 + v111[9]) = v110;
                    *(void *)(v100 + v111[10]) = 0LL;
                    uint64_t v117 = (void *)(v100 + v111[11]);
                    *uint64_t v117 = 0LL;
                    v117[1] = 0LL;
                    unint64_t v118 = v329;
                    if ((swift_isUniquelyReferenced_nonNull_native(v329) & 1) == 0)
                    {
                      sub_100014280();
                      unint64_t v118 = v152;
                    }

                    unint64_t v120 = *(void *)(v118 + 16);
                    unint64_t v119 = *(void *)(v118 + 24);
                    if (v120 >= v119 >> 1)
                    {
                      sub_10003EF48(v119);
                      sub_100014280();
                      unint64_t v118 = v153;
                    }

                    *(void *)(v118 + 1sub_10000AC58(v0 + 6) = v120 + 1;
                    sub_10003F0F8();
                    unint64_t v329 = v118;
                    uint64_t v324 = v121;
                    uint64_t v323 = *(void *)(v122 + 72);
                    sub_100025EC8(v100, v118 + v121 + v323 * v120);
                    uint64_t v123 = v341;
                    if (v341[2] && (uint64_t v124 = sub_100015F98(0x65736C6166LL, 0xE500000000000000LL), (v125 & 1) != 0))
                    {
                      uint64_t v126 = v124;
                      uint64_t v127 = v123[7];
                      uint64_t v128 = (void *)sub_1000338B4();
                      uint64_t v129 = *(v128 - 1);
                      uint64_t v130 = v127 + *(void *)(v129 + 72) * v126;
                      unint64_t v15 = v281;
                      sub_10003EE9C(v281, v130, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v129 + 16));
                      sub_10003EEC4();
                      if (!v99)
                      {
                        uint64_t v131 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v129 + 32);
                        uint64_t v132 = v282;
                        sub_10003EE9C(v282, v15, v131);
                        id v133 = v322;
                        goto LABEL_94;
                      }
                    }

                    else
                    {
                      uint64_t v128 = (void *)sub_1000338B4();
                      unint64_t v15 = v281;
                      sub_10003EEB4(v281);
                    }

                    id v133 = v322;
                    sub_10001B60C(v15, (uint64_t *)&unk_100132900);
                    uint64_t v132 = v282;
                    UUID.init()();
                    sub_1000338B4();
                    uint64_t v134 = sub_10003F080();
                    sub_10003EE9C(v134, v132, v135);
                    uint64_t v136 = sub_10003F040();
                    sub_10003A730(v136);
LABEL_94:
                    sub_10003F074();
                    id v137 = v133;
                    uint64_t v138 = (void *)sub_100028048((uint64_t)[v137 key]);
                    id v321 = v139;
                    v322 = v138;

                    v337 = &type metadata for Bool;
                    LOBYTE(v335) = 0;
                    id v140 = objc_allocWithZone(&OBJC_CLASS___LNValue);
                    uint64_t v141 = v317;
                    sub_10001C1BC();
                    id v142 = v325;
                    sub_10003F0B0();
                    id v143 = objc_allocWithZone(&OBJC_CLASS___LNProperty);
                    id v144 = sub_10003EF8C(v316, v141);
                    uint64_t v145 = v310;
                    uint64_t v146 = (void *)(v132 + v310[5]);
                    *uint64_t v146 = v328;
                    v146[1] = v15;
                    uint64_t v147 = (uint64_t *)(v132 + v145[6]);
                    *uint64_t v147 = v75;
                    v147[1] = v22;
                    *(void *)(v132 + v145[7]) = v137;
                    unint64_t v148 = (void *)(v132 + v145[8]);
                    id v149 = v321;
                    *unint64_t v148 = v322;
                    v148[1] = v149;
                    *(void *)(v132 + v145[9]) = v144;
                    *(void *)(v132 + v145[10]) = 0LL;
                    uint64_t v150 = (void *)(v132 + v145[11]);
                    void *v150 = 0LL;
                    v150[1] = 0LL;
                    unint64_t v22 = *(void *)(v329 + 16);
                    unint64_t v151 = *(void *)(v329 + 24);
                    if (v22 >= v151 >> 1)
                    {
                      sub_10003EF48(v151);
                      sub_100014280();
                      uint64_t v132 = v282;
                      unint64_t v329 = v154;
                    }

                    a3 = v329;
                    *(void *)(v329 + 1sub_10000AC58(v0 + 6) = v22 + 1;
                    sub_100025EC8(v132, a3 + v324 + v22 * v323);

                    a5 = v332;
                  }

                  else
                  {
                    sub_10001BC70();
                  }

LABEL_68:
                  v74 += 2;
                  if (!--v73) {
                    goto LABEL_100;
                  }
                  continue;
                }

                sub_10001BC70();

LABEL_67:
                sub_10001B60C((uint64_t)&v335, &qword_100130EA0);
                goto LABEL_68;
              }

              sub_10001BC70();
LABEL_58:
              swift_bridgeObjectRelease();
              goto LABEL_68;
            }
          }

          else
          {
            sub_10003EF98();
          }

          break;
        }

        sub_10001BC70();
        sub_10000ADB0();
        goto LABEL_67;
      }

      a5 = (unint64_t)v58;
      unint64_t v22 = (unint64_t)[v58 enumerationIdentifier];
      static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      sub_10003F160();
      if (!v293[2] || (uint64_t v59 = sub_10003F00C(), (v60 & 1) == 0))
      {

        uint64_t v64 = sub_100011958();
        goto LABEL_50;
      }

      id v61 = sub_10003F094(v59);
      uint64_t v62 = sub_100011958();
      id v63 = v304;
      if (!sub_100011ABC(v62, "dynamicOptionsSupport")) {
        break;
      }
      sub_10003EFA4();

LABEL_147:
      unint64_t v47 = v301;
      unint64_t v49 = v303;
      if (v303 == v299) {
        goto LABEL_148;
      }
    }

    id v155 = [v292 phraseTemplates];
    uint64_t v156 = sub_10003F034();
    uint64_t v157 = sub_10000A1A0(v156, (unint64_t *)&qword_100131250, &OBJC_CLASS___LNStaticDeferredLocalizedString_ptr);
    sub_10003EF80(v157);

    sub_10003F0C8();
    unint64_t v159 = v158;
    unint64_t v330 = v15;
    sub_10001BC70();
    uint64_t v297 = *(void *)(v159 + 16);
    if (!v297)
    {
      unint64_t v22 = v159;
LABEL_145:
      sub_10003F0A8();

      sub_10001BC70();
      sub_10003EFA4();

      goto LABEL_146;
    }

    unint64_t v160 = 0LL;
    unint64_t v296 = v159 + 32;
    id v314 = v56;
    unint64_t v327 = a5;
    unint64_t v22 = v159;
    unint64_t v294 = v159;
    id v308 = v61;
    while (1)
    {
      if (v160 >= *(void *)(v22 + 16)) {
        goto LABEL_158;
      }
      uint64_t v161 = (uint64_t *)(v296 + 16 * v160);
      a5 = v161[1];
      uint64_t v315 = *v161;
      uint64_t v335 = v315;
      v336 = (void *)a5;
      sub_10003F114();
      sub_10001BCF8();
      sub_10003F0EC();
      sub_100038A74(125LL);
      unint64_t v162 = sub_10003F0E0();
      uint64_t v164 = sub_10003F0D4((uint64_t)v340, (uint64_t)&type metadata for String, v163, v162);
      uint64_t v165 = sub_100011958();
      if ((v164 & 1) != 0) {
        break;
      }
LABEL_141:
      ++v160;
      swift_bridgeObjectRelease();
      if (v160 == v297) {
        goto LABEL_145;
      }
    }

    id v166 = sub_100011A6C(v165, "cases");
    uint64_t v167 = sub_10003F034();
    uint64_t v168 = sub_10000A1A0(v167, &qword_100131BE8, &OBJC_CLASS___LNEnumCaseMetadata_ptr);
    unint64_t v169 = sub_10003EF80(v168);

    id v170 = [v304 typeSpecificMetadata];
    sub_10003F134();
    uint64_t v172 = v171;
    unint64_t v173 = sub_10003E6A0();
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v15, v172, (char *)&type metadata for Any + 8, v173);
    sub_1000389D4();
    if (*(void *)(v172 + 16))
    {
      id v174 = v287;
      uint64_t v175 = sub_10003F14C();
      if ((v176 & 1) != 0) {
        sub_10003EEA4(v175);
      }
      else {
        sub_10003EF98();
      }
    }

    else
    {
      sub_10003EF98();
    }

    sub_10000ADB0();
    if (v337)
    {
      uint64_t v177 = sub_100008DB0((uint64_t *)&unk_100132780);
      if ((swift_dynamicCast(v340, &v335, (char *)&type metadata for Any + 8, v177, 6LL) & 1) != 0)
      {
        unint64_t v15 = v330;
        unint64_t v169 = (unint64_t)sub_10003A474(v169, v340[0]);
        unint64_t v330 = v15;
      }
    }

    else
    {
      sub_10001B60C((uint64_t)&v335, &qword_100130EA0);
    }

    if (v169 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v178 = sub_10003EF5C();
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v178 = *(void *)((v169 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    unint64_t v295 = v160;
    unint64_t v331 = a5;
    if (!v178)
    {
LABEL_140:
      swift_bridgeObjectRelease();
      id v56 = v314;
      unint64_t v22 = v294;
      unint64_t v160 = v295;
      goto LABEL_141;
    }

    if (v178 >= 1)
    {
      uint64_t v179 = 0LL;
      unint64_t v312 = v169;
      unint64_t v313 = v169 & 0xC000000000000001LL;
      unint64_t v311 = v178;
      while (1)
      {
        unint64_t v329 = a3;
        uint64_t v318 = v179;
        if (v313) {
          id v180 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v179, v169);
        }
        else {
          id v180 = sub_10003F0A0(v169 + 8 * v179);
        }
        unint64_t v320 = (unint64_t)v180;
        sub_10003E630([v180 displayRepresentation]);
        if (v181) {
          uint64_t v182 = (void *)v181;
        }
        else {
          uint64_t v182 = _swiftEmptyArrayStorage;
        }
        id v183 = sub_100011A6C(v181, "identifier");
        sub_100028048((uint64_t)v183);
        sub_10003F140();
        uint64_t v335 = v15;
        v336 = (void *)v22;
        sub_100038A74(46LL);
        id v185 = sub_100011930(v184, "identifier");
        sub_100028048((uint64_t)v185);
        sub_10003F140();
        v186._uint64_t countAndFlagsBits = v15;
        v186._object = (void *)v22;
        String.append(_:)(v186);
        uint64_t v187 = sub_10001BC70();
        uint64_t v189 = v335;
        uint64_t v188 = v336;
        id v190 = sub_100011930(v187, "displayRepresentation");
        id v325 = [v190 title];

        id v192 = sub_100011930(v191, "displayRepresentation");
        id v193 = [v192 title];

        id v194 = [v193 key];
        sub_1000389D4();
        id v326 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v192);
        id v333 = v195;

        id v197 = sub_100011A6C(v196, "identifier");
        uint64_t v324 = sub_100028048((uint64_t)v197);
        uint64_t v332 = v198;

        id v200 = sub_100011A6C(v199, "identifier");
        uint64_t v323 = sub_100028048((uint64_t)v200);
        uint64_t v202 = v201;

        id v204 = sub_100011930(v203, "identifier");
        uint64_t v205 = sub_100028048((uint64_t)v204);
        v207 = v206;

        v337 = &type metadata for String;
        uint64_t v335 = v205;
        v336 = v207;
        id v321 = v314;
        id v208 = sub_100011930((uint64_t)v321, "displayRepresentation");
        id v209 = objc_allocWithZone(&OBJC_CLASS___LNValue);
        id v210 = sub_10003EF30();
        sub_1000119E4();
        uint64_t v211 = v334;
        swift_bridgeObjectRetain();
        uint64_t v212 = v328;
        unint64_t v213 = v330;
        sub_10003AAE8((unint64_t)v182, v189, (uint64_t)v188, v328, v211);
        uint64_t v215 = v214;
        unint64_t v330 = v213;
        sub_10001BC70();
        v343[0] = v189;
        v343[1] = (uint64_t)v188;
        v343[2] = v212;
        v343[3] = v211;
        id v216 = v325;
        v343[4] = (uint64_t)v325;
        v343[5] = (uint64_t)v326;
        v343[6] = (uint64_t)v333;
        v343[7] = v324;
        v343[8] = v332;
        v343[9] = v323;
        v343[10] = (uint64_t)v202;
        v343[11] = (uint64_t)v210;
        v343[12] = v215;
        swift_bridgeObjectRetain_n(v211, 2LL);
        id v326 = v188;
        swift_bridgeObjectRetain();
        id v217 = v216;
        sub_1000119E4();
        sub_10001BD0C();
        id v325 = v202;
        swift_bridgeObjectRetain();
        v322 = v210;
        uint64_t v324 = v215;
        unint64_t v218 = v320;
        swift_bridgeObjectRetain();
        sub_100018704(&v335, v343);
        v219 = v336;
        v220 = v338;
        v221 = v339;
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        sub_10001BC70();
        uint64_t v222 = sub_10000ADB0();
        id v223 = sub_100011930(v222, "identifier");
        uint64_t v224 = sub_100028048((uint64_t)v223);
        uint64_t v226 = v225;

        v227 = v341;
        uint64_t v228 = v341[2];
        uint64_t v323 = (uint64_t)v217;
        if (v228)
        {
          sub_1000119E4();
          uint64_t v229 = sub_100015F98(v224, v226);
          if ((v230 & 1) != 0)
          {
            uint64_t v231 = v229;
            uint64_t v232 = v227[7];
            uint64_t v233 = sub_1000338B4();
            uint64_t v234 = *(void *)(v233 - 8);
            uint64_t v235 = v232 + *(void *)(v234 + 72) * v231;
            uint64_t v236 = v307;
            sub_10003EE9C(v307, v235, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v234 + 16));
            uint64_t v237 = v236;
            uint64_t v238 = 0LL;
          }

          else
          {
            uint64_t v233 = sub_1000338B4();
            uint64_t v236 = v307;
            uint64_t v237 = v307;
            uint64_t v238 = 1LL;
          }

          sub_100009E60(v237, v238, 1LL, v233);
          uint64_t v239 = v306;
          sub_10001BC70();
          sub_1000338B4();
          if (sub_100009E6C(v236, 1LL, v233) != 1)
          {
            sub_10003EE9C( v239,  v236,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v233 - 8) + 32LL));
            sub_10001BC70();
            goto LABEL_135;
          }
        }

        else
        {
          uint64_t v233 = sub_1000338B4();
          uint64_t v236 = v307;
          sub_10003EEB4(v307);
          uint64_t v239 = v306;
        }

        sub_10001B60C(v236, (uint64_t *)&unk_100132900);
        UUID.init()();
        sub_1000338B4();
        uint64_t v240 = v305;
        sub_10003EE9C(v305, v239, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v233 - 8) + 16LL));
        sub_100009E60(v240, 0LL, 1LL, v233);
        sub_10003A730(v240);
LABEL_135:
        uint64_t v241 = v239;
        swift_bridgeObjectRetain();
        uint64_t v242 = v334;
        swift_bridgeObjectRetain();
        id v244 = sub_100011930(v243, "displayRepresentation");
        id v319 = [v244 title];

        id v246 = sub_100011930(v245, "displayRepresentation");
        id v247 = [v246 title];

        id v248 = [v247 key];
        uint64_t v249 = static String._unconditionallyBridgeFromObjectiveC(_:)(v248);
        uint64_t v251 = v250;

        uint64_t v252 = v317;
        uint64_t v253 = sub_1000119E4();
        id v254 = sub_100011930(v253, "identifier");
        uint64_t v255 = sub_100028048((uint64_t)v254);
        v257 = v256;

        v337 = &type metadata for String;
        uint64_t v335 = v255;
        v336 = v257;
        a5 = v218;
        id v258 = sub_100011930((uint64_t)v321, "displayRepresentation");
        id v259 = objc_allocWithZone(&OBJC_CLASS___LNValue);
        sub_10003EF30();
        id v260 = objc_allocWithZone(&OBJC_CLASS___LNProperty);
        id v261 = sub_10003EF8C(v316, v252);
        v262 = v310;
        v263 = (void *)(v241 + v310[5]);
        void *v263 = v328;
        v263[1] = v242;
        v264 = (uint64_t *)(v241 + v262[6]);
        unint64_t v265 = v331;
        uint64_t *v264 = v315;
        v264[1] = v265;
        *(void *)(v241 + v262[7]) = v319;
        v266 = (uint64_t *)(v241 + v262[8]);
        uint64_t *v266 = v249;
        v266[1] = v251;
        *(void *)(v241 + v262[9]) = v261;
        *(void *)(v241 + v262[10]) = 0LL;
        v267 = (void *)(v241 + v262[11]);
        void *v267 = 0LL;
        v267[1] = 0LL;
        a3 = v329;
        uint64_t v268 = v241;
        if ((swift_isUniquelyReferenced_nonNull_native(v329) & 1) == 0)
        {
          sub_100014280();
          a3 = v273;
        }

        id v61 = v308;
        unint64_t v15 = v311;
        unint64_t v169 = v312;
        uint64_t v269 = v318;
        unint64_t v22 = *(void *)(a3 + 16);
        unint64_t v270 = *(void *)(a3 + 24);
        if (v22 >= v270 >> 1)
        {
          sub_10003EF48(v270);
          sub_100014280();
          a3 = v274;
        }

        uint64_t v179 = v269 + 1;
        *(void *)(a3 + 1sub_10000AC58(v0 + 6) = v22 + 1;
        sub_10003F0F8();
        sub_100025EC8(v268, a3 + v271 + *(void *)(v272 + 72) * v22);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v15 == v179) {
          goto LABEL_140;
        }
      }
    }

LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    sub_10001C1BC();
    uint64_t v23 = sub_10003EF5C();
    swift_bridgeObjectRelease();
  }

  v343[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_100045428();
  if ((v28 & 0x8000000000000000LL) == 0)
  {
    uint64_t v332 = 0LL;
    unint64_t v29 = a5 & 0xC000000000000001LL;
    while (1)
    {
      if (v29) {
        id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a5);
      }
      else {
        id v30 = sub_10003F0A0(a5);
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)([v30 identifier]);
      sub_10003F128();
      sub_10003F180();
      if (v27)
      {
        sub_10003F01C(v31);
        sub_100045428();
      }

      sub_10003EF64();
      a5 = (unint64_t)v333;
    }
  }

LABEL_167:
  __break(1u);
}

void *sub_10003C680()
{
  return memcpy(&unk_100131A60, __src, 0xA8uLL);
}

uint64_t sub_10003C6D4()
{
  uint64_t v0 = sub_100008DB0(&qword_100131BC8);
  sub_100026D98(&qword_100131BD0, &qword_100131BC8, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000016LL, 0x80000001000F9EA0LL, v0, v1);
}

uint64_t sub_10003C744()
{
  uint64_t v0 = sub_100008DB0((uint64_t *)&unk_1001323C0);
  sub_100026D98( (unint64_t *)&qword_100131110,  (uint64_t *)&unk_1001323C0,  (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000010LL, 0x80000001000F96E0LL, v0, v1);
}

uint64_t sub_10003C7B4()
{
  uint64_t v0 = sub_100008DB0((uint64_t *)&unk_1001323C0);
  sub_100026D98( (unint64_t *)&qword_100131110,  (uint64_t *)&unk_1001323C0,  (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000012LL, 0x80000001000F9E80LL, v0, v1);
}

uint64_t sub_10003C824()
{
  uint64_t v0 = sub_100008DB0((uint64_t *)&unk_1001323C0);
  sub_100026D98( (unint64_t *)&qword_100131110,  (uint64_t *)&unk_1001323C0,  (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x79747265706F7270LL, 0xED0000656C746954LL, v0, v1);
}

uint64_t sub_10003C89C()
{
  uint64_t v0 = sub_100008DB0((uint64_t *)&unk_1001323C0);
  sub_100026D98( (unint64_t *)&qword_100131110,  (uint64_t *)&unk_1001323C0,  (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000010LL, 0x80000001000F9E60LL, v0, v1);
}

uint64_t sub_10003C90C()
{
  uint64_t v0 = sub_100008DB0((uint64_t *)&unk_1001323C0);
  sub_100026D98( (unint64_t *)&qword_100131110,  (uint64_t *)&unk_1001323C0,  (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x79747265706F7270LL, 0xE800000000000000LL, v0, v1);
}

uint64_t sub_10003C978()
{
  uint64_t v0 = sub_100008DB0(&qword_100131138);
  sub_100026D98(&qword_100131140, &qword_100131138, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000016LL, 0x80000001000F9E40LL, v0, v1);
}

uint64_t sub_10003C9E8()
{
  uint64_t v0 = sub_100008DB0(&qword_100131138);
  sub_100026D98(&qword_100131140, &qword_100131138, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000020LL, 0x80000001000F9E10LL, v0, v1);
}

void sub_10003CA58()
{
  uint64_t v121 = v0;
  uint64_t v114 = v1;
  uint64_t v3 = v2;
  if (qword_100130160 != -1) {
    swift_once(&qword_100130160, sub_10003C680);
  }
  sub_10001DEBC(v146, &unk_100131A60);
  sub_10001DEBC(v145, &unk_100131A60);
  sub_10001D9AC(v146);
  if (qword_100130168 != -1) {
    swift_once(&qword_100130168, sub_10003C6D4);
  }
  uint64_t v4 = qword_100131B08;
  uint64_t v5 = unk_100131B10;
  uint64_t v6 = qword_100131B18;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  <- infix<A>(_:_:)(v4, v5, v6, v3, v7, (uint64_t)&protocol witness table for UUID);
  uint64_t v8 = sub_100008DB0(&qword_1001323E0);
  uint64_t v9 = swift_allocObject(v8, 592LL, 7LL);
  *(_OWORD *)(v9 + 1sub_10000AC58(v0 + 6) = xmmword_1000F60E0;
  if (qword_100130170 != -1) {
    swift_once(&qword_100130170, sub_10003C744);
  }
  uint64_t v10 = qword_100131B20;
  uint64_t v11 = *(void *)algn_100131B28;
  uint64_t v12 = qword_100131B30;
  uint64_t v13 = (int *)sub_10003F10C();
  uint64_t v14 = (uint64_t *)(v3 + v13[5]);
  uint64_t v16 = *v14;
  unint64_t v15 = (void *)v14[1];
  v124._uint64_t countAndFlagsBits = v16;
  v124._object = v15;
  <- infix<A>(_:_:)( v10,  v11,  v12,  (uint64_t)&v124,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
  if (qword_100130178 != -1) {
    swift_once(&qword_100130178, sub_10003C7B4);
  }
  uint64_t v118 = v9 + 32;
  uint64_t v147 = v9;
  uint64_t v17 = (uint64_t *)(v3 + v13[6]);
  uint64_t v19 = *v17;
  uint64_t v18 = (void *)v17[1];
  v124._uint64_t countAndFlagsBits = v19;
  v124._object = v18;
  uint64_t v115 = v9 + 112;
  <- infix<A>(_:_:)( qword_100131B38,  unk_100131B40,  qword_100131B48,  (uint64_t)&v124,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
  if (qword_100130180 != -1) {
    swift_once(&qword_100130180, sub_10003C824);
  }
  uint64_t v20 = qword_100131B50;
  uint64_t v21 = *(void *)algn_100131B58;
  uint64_t v22 = qword_100131B60;
  uint64_t v23 = v3;
  uint64_t v24 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  JSONEncoder.init()();
  uint64_t v25 = LNStaticDeferredLocalizedString.asLocalizedStringResourceJSON(encoder:)();
  if (v0)
  {
    uint64_t v27 = sub_10003EF28();
    sub_10003EFB4( v27,  v28,  v29,  v30,  v31,  v32,  v33,  v34,  v100,  v104,  v110,  v113,  v114,  v115,  v118,  v0,  v122,  v123,  v124._countAndFlagsBits,  (uint64_t)v124._object,  v125,  v126,  v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  v143,  v144[0]);
    unint64_t v35 = sub_10001DEBC(&v124, v145);
    sub_10003EFAC((uint64_t)v35, v36, v37, v38, v39, v40, v41, v42, v101, v105);
    sub_10001DC30(v116);
    sub_10001DC30(v119);
    *(void *)(v147 + 1sub_10000AC58(v0 + 6) = 0LL;
    swift_setDeallocating(v147);
    sub_100058874();
  }

  else
  {
    uint64_t v43 = v25;
    id v44 = v26;
    sub_10003EF28();
    v124._uint64_t countAndFlagsBits = v43;
    v124._object = v44;
    uint64_t v111 = v147 + 192;
    <- infix<A>(_:_:)( v20,  v21,  v22,  (uint64_t)&v124,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
    sub_10000ADB0();
    if (qword_100130188 != -1) {
      swift_once(&qword_100130188, sub_10003C89C);
    }
    uint64_t v45 = (uint64_t *)(v23 + v13[8]);
    uint64_t v47 = *v45;
    uint64_t v46 = (void *)v45[1];
    v124._uint64_t countAndFlagsBits = v47;
    v124._object = v46;
    uint64_t v106 = v147 + 272;
    <- infix<A>(_:_:)( qword_100131B68,  unk_100131B70,  qword_100131B78,  (uint64_t)&v124,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
    if (qword_100130190 != -1) {
      swift_once(&qword_100130190, sub_10003C90C);
    }
    uint64_t v48 = qword_100131B80;
    uint64_t v49 = *(void *)algn_100131B88;
    uint64_t v50 = qword_100131B90;
    Swift::String v57 = LNProperty.asJson()();
    if (v58)
    {
      sub_10003EFB4( v57._countAndFlagsBits,  (uint64_t)v57._object,  v51,  v52,  v53,  v54,  v55,  v56,  v100,  v106,  v111,  v23,  v114,  v115,  v118,  0LL,  v122,  v123,  v124._countAndFlagsBits,  (uint64_t)v124._object,  v125,  v126,  v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  v143,  v144[0]);
      uint64_t v59 = sub_10001DEBC(&v124, v145);
      sub_10003EFAC((uint64_t)v59, v60, v61, v62, v63, v64, v65, v66, v102, v107);
      sub_10001DC30(v108);
      sub_10001DC30(v112);
      sub_10001DC30(v117);
      sub_10001DC30(v120);
      *(void *)(v147 + 1sub_10000AC58(v0 + 6) = 0LL;
      swift_setDeallocating(v147);
      sub_100058874();
    }

    else
    {
      Swift::String v124 = v57;
      <- infix<A>(_:_:)( v48,  v49,  v50,  (uint64_t)&v124,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
      sub_10000ADB0();
      if (qword_100130198 != -1) {
        swift_once(&qword_100130198, sub_10003C978);
      }
      uint64_t v68 = qword_100131B98;
      uint64_t v67 = unk_100131BA0;
      uint64_t v69 = qword_100131BA8;
      uint64_t v70 = *(void *)(v23 + v13[10]);
      if (v70)
      {
        uint64_t v100 = qword_100131BA8;
        uint64_t v71 = unk_100131BA0;
        uint64_t v121 = v147 + 352;
        swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
        JSONEncoder.init()();
        uint64_t v70 = LNStaticDeferredLocalizedString.asLocalizedStringResourceJSON(encoder:)();
        uint64_t v73 = v72;
        sub_10003EF28();
        uint64_t v67 = v71;
        uint64_t v69 = v100;
      }

      else
      {
        uint64_t v73 = 0LL;
      }

      uint64_t v122 = v70;
      uint64_t v123 = v73;
      <- infix<A>(_:_:)( v68,  v67,  v69,  (uint64_t)&v122,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
      sub_10000ADB0();
      if (qword_1001301A0 != -1) {
        swift_once(&qword_1001301A0, sub_10003C9E8);
      }
      uint64_t v74 = qword_100131BB0;
      uint64_t v75 = *(void *)algn_100131BB8;
      uint64_t v76 = qword_100131BC0;
      uint64_t v77 = (uint64_t *)(v23 + v13[11]);
      uint64_t v78 = v77[1];
      uint64_t v122 = *v77;
      uint64_t v123 = v78;
      sub_10001BD0C();
      <- infix<A>(_:_:)( v74,  v75,  v76,  (uint64_t)&v122,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
      sub_10000AEE8();
      uint64_t v79 = QueryType.insert(_:_:)((uint64_t)v144);
      uint64_t v81 = v80;
      id v83 = v82;
      swift_setDeallocating(v147);
      uint64_t v84 = sub_100058874();
      sub_10003EFB4( v84,  v85,  v86,  v87,  v88,  v89,  v90,  v91,  v100,  v106,  v111,  v23,  v114,  v115,  v118,  v121,  v122,  v123,  v124._countAndFlagsBits,  (uint64_t)v124._object,  v125,  v126,  v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  v143,  v144[0]);
      char v92 = sub_10001DEBC(&v124, v145);
      sub_10003EFAC((uint64_t)v92, v93, v94, v95, v96, v97, v98, v99, v103, v109);
      v148.template._uint64_t countAndFlagsBits = v79;
      v148.template._object = v81;
      v148.bindings._rawValue = v83;
      Connection.run(_:)(v148);
      sub_10000AEE8();
      sub_10001BC70();
    }
  }

  sub_10001DEE8();
}

void sub_10003D090()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  if (qword_100130160 != -1) {
    swift_once(&qword_100130160, sub_10003C680);
  }
  sub_10001DEBC(v15, &unk_100131A60);
  sub_10001D9AC(v15);
  if (qword_100130170 != -1) {
    swift_once(&qword_100130170, sub_10003C744);
  }
  v14[0] = v5;
  v14[1] = v3;
  == infix<A>(_:_:)();
  sub_10003F16C();
  sub_10001DEBC(v6, v15);
  sub_10001BD0C();
  sub_10001BCF8();
  uint64_t v7 = sub_10003EFF4();
  QueryType.filter(_:)(v7, v8, v9, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, v10);
  sub_10001191C(v1);
  sub_10001191C(v0);
  sub_10001DAF0(v15);
  sub_10001DEBC(v16, v14);
  sub_10001DEBC(v14, v16);
  AppIntents_SQLite::Delete v17 = QueryType.delete()();
  uint64_t countAndFlagsBits = v17.template._countAndFlagsBits;
  object = v17.template._object;
  rawValue = v17.bindings._rawValue;
  sub_10001DAF0(v16);
  v18.template._uint64_t countAndFlagsBits = countAndFlagsBits;
  v18.template._object = object;
  v18.bindings._rawValue = rawValue;
  Connection.run(_:)(v18);
  sub_10000AEE8();
  sub_10001BE7C();
  sub_10001DEE8();
}

void sub_10003D210()
{
  uint64_t v2 = v1;
  if (qword_100130160 != -1) {
    swift_once(&qword_100130160, sub_10003C680);
  }
  sub_10001DEBC(v13, &unk_100131A60);
  sub_10001D9AC(v13);
  if (qword_100130168 != -1) {
    swift_once(&qword_100130168, sub_10003C6D4);
  }
  type metadata accessor for UUID(0LL);
  == infix<A>(_:_:)();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_10001DEBC(v11, v13);
  sub_10001BCF8();
  sub_10001C1BC();
  sub_10003EF10((uint64_t)v12);
  sub_10001191C(v6);
  sub_10001191C(v4);
  sub_10001DAF0(v13);
  sub_10001DEBC(v14, v12);
  v12[3] = &type metadata for Table;
  void v12[4] = &protocol witness table for Table;
  v12[0] = sub_100038A2C((uint64_t)&unk_100123EE8);
  sub_10001DEBC((void *)(v12[0] + 16LL), v14);
  uint64_t v7 = Connection.pluck(_:)(v12);
  uint64_t v9 = v8;
  sub_10000AC58(v12);
  if (!v0)
  {
    if (v7)
    {
      sub_10003D3D8(v7, v9, v2);
      sub_10000AEE8();
      sub_10001BE7C();
    }

    else
    {
      uint64_t v10 = sub_10003F10C();
      sub_100009E60(v2, 1LL, 1LL, v10);
    }
  }

  sub_10001DEE8();
}

uint64_t sub_10003D3D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  unint64_t v15 = (char *)&v34 - v14;
  if (qword_100130168 != -1) {
    swift_once(&qword_100130168, sub_10003C6D4);
  }
  Row.get<A>(_:)();
  if (qword_100130170 != -1) {
    swift_once(&qword_100130170, sub_10003C744);
  }
  Row.get<A>(_:)();
  uint64_t v16 = v48;
  uint64_t v46 = v47;
  if (qword_100130178 != -1) {
    swift_once(&qword_100130178, sub_10003C7B4);
  }
  Row.get<A>(_:)();
  uint64_t v44 = v47;
  uint64_t v45 = v48;
  if (qword_100130180 != -1) {
    swift_once(&qword_100130180, sub_10003C824);
  }
  Row.get<A>(_:)();
  uint64_t v42 = v47;
  uint64_t v43 = v48;
  if (qword_100130188 != -1) {
    swift_once(&qword_100130188, sub_10003C89C);
  }
  Row.get<A>(_:)();
  uint64_t v40 = v47;
  uint64_t v41 = v48;
  if (qword_100130190 != -1) {
    swift_once(&qword_100130190, sub_10003C90C);
  }
  Row.get<A>(_:)();
  uint64_t v38 = v47;
  uint64_t v39 = v48;
  if (qword_100130198 != -1) {
    swift_once(&qword_100130198, sub_10003C978);
  }
  Row.get<A>(_:)( qword_100131B98,  unk_100131BA0,  qword_100131BA8,  a1,  a2,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String,  v17,  v34,  v35,  v36,  (uint64_t)v37,  v38,  (uint64_t)v39,  v40,  (uint64_t)v41,  v42,  (uint64_t)v43,  v44,  (uint64_t)v45);
  uint64_t v36 = v47;
  uint64_t v37 = v48;
  if (qword_1001301A0 != -1) {
    swift_once(&qword_1001301A0, sub_10003C9E8);
  }
  Row.get<A>(_:)( qword_100131BB0,  *(uint64_t *)algn_100131BB8,  qword_100131BC0,  a1,  a2,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String,  v18,  v34,  v35,  v36,  (uint64_t)v37,  v38,  (uint64_t)v39,  v40,  (uint64_t)v41,  v42,  (uint64_t)v43,  v44,  (uint64_t)v45);
  uint64_t v34 = v47;
  unint64_t v35 = v48;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v15, v9);
  uint64_t v20 = sub_10000A1A0(0LL, (unint64_t *)&qword_100131250, &OBJC_CLASS___LNStaticDeferredLocalizedString_ptr);
  uint64_t v21 = v42;
  uint64_t v42 = v20;
  uint64_t v43 = (void *)LNStaticDeferredLocalizedString.init(localizedStringResourceJSON:)(v21, v43);
  sub_10000A1A0(0LL, &qword_1001309A8, &OBJC_CLASS___LNProperty_ptr);
  uint64_t v22 = type metadata accessor for URL(0LL);
  sub_100009E60((uint64_t)v8, 1LL, 1LL, v22);
  uint64_t v38 = static LNProperty.fromJSON(_:bundleURL:effectiveBundleIdentifier:)(v38, v39, v8, 0LL);
  sub_10001B60C((uint64_t)v8, &qword_100130BC0);
  swift_bridgeObjectRelease();
  uint64_t v23 = (uint64_t)v37;
  if (v37)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = LNStaticDeferredLocalizedString.init(localizedStringResourceJSON:)(v36, v23);
  }

  else
  {
    uint64_t v24 = 0LL;
  }

  uint64_t v26 = (uint64_t)v45;
  uint64_t v25 = v46;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v12, v9);
  uint64_t v27 = (int *)type metadata accessor for LNAppShortcutParameterRecord(0LL);
  uint64_t v28 = (uint64_t *)(a3 + v27[5]);
  *uint64_t v28 = v25;
  v28[1] = (uint64_t)v16;
  uint64_t v29 = (void *)(a3 + v27[6]);
  *uint64_t v29 = v44;
  v29[1] = v26;
  *(void *)(a3 + v27[7]) = v43;
  uint64_t v30 = (void *)(a3 + v27[8]);
  uint64_t v31 = (uint64_t)v41;
  *uint64_t v30 = v40;
  v30[1] = v31;
  *(void *)(a3 + v27[9]) = v38;
  *(void *)(a3 + v27[10]) = v24;
  uint64_t v32 = (void *)(a3 + v27[11]);
  uint64_t v33 = v35;
  *uint64_t v32 = v34;
  v32[1] = v33;
  return sub_100009E60(a3, 0LL, 1LL, (uint64_t)v27);
}

void sub_10003DACC()
{
  uint64_t v2 = v1;
  if (qword_100130160 != -1) {
    swift_once(&qword_100130160, sub_10003C680);
  }
  sub_10001DEBC(v15, &unk_100131A60);
  v14[0] = v2;
  sub_10001D9AC(v15);
  if (qword_100130168 != -1) {
    swift_once(&qword_100130168, sub_10003C6D4);
  }
  uint64_t v3 = qword_100131B08;
  uint64_t v4 = unk_100131B10;
  uint64_t v5 = qword_100131B18;
  uint64_t v6 = sub_100008DB0(&qword_100131BD8);
  sub_100026D98(&qword_100131BE0, &qword_100131BD8, (uint64_t)&protocol conformance descriptor for [A]);
  Collection<>.contains(_:)(v3, v4, v5, v6, v7);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  sub_10001DEBC(&v13, v15);
  sub_10001BCF8();
  sub_10001C1BC();
  sub_10003EF10((uint64_t)v14);
  sub_10001191C(v11);
  sub_10001191C(v9);
  sub_10001DAF0(v15);
  sub_10001DEBC(v16, v14);
  uint64_t v14[3] = &type metadata for Table;
  v14[4] = &protocol witness table for Table;
  v14[0] = sub_100038A2C((uint64_t)&unk_100123EE8);
  sub_10001DEBC((void *)(v14[0] + 16LL), v16);
  Connection.prepareRowIterator(_:)(v14);
  uint64_t v12 = sub_10000AC58(v14);
  if (!v0)
  {
    __chkstk_darwin(v12);
    swift_retain();
    sub_100008DB0(&qword_100131268);
    RowIterator.compactMap<A>(_:)();
    sub_100038920();
    sub_10000AEE8();
    sub_10003EF28();
  }

  sub_10001DEE8();
}

uint64_t sub_10003DD10@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t, double)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_100008DB0(&qword_100131268);
  double v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a3(a1, a2, v9);
  uint64_t v12 = type metadata accessor for LNAppShortcutParameterRecord(0LL);
  uint64_t v13 = 1LL;
  if (sub_100009E6C((uint64_t)v11, 1LL, v12) != 1)
  {
    sub_100025EC8((uint64_t)v11, a4);
    sub_100009E60(a4, 0LL, 1LL, v12);
    uint64_t v13 = 0LL;
  }

  return sub_100009E60(a4, v13, 1LL, v8);
}

void sub_10003DE0C()
{
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  if (qword_100130160 != -1) {
    swift_once(&qword_100130160, sub_10003C680);
  }
  sub_10001DEBC(v17, &unk_100131A60);
  if (v4)
  {
    sub_10001D9AC(v17);
    if (qword_100130170 != -1) {
      swift_once(&qword_100130170, sub_10003C744);
    }
    v15[0] = v6;
    v15[1] = v4;
    == infix<A>(_:_:)();
    sub_10003F16C();
    sub_10001DEBC(v7, v17);
    sub_10001BD0C();
    sub_10001BCF8();
    uint64_t v8 = sub_10003EFF4();
    QueryType.filter(_:)(v8, v9, v10, v11, v12, v13);
    sub_10001191C(v2);
    sub_10001191C(v1);
    sub_10001DAF0(v17);
    uint64_t v14 = v15;
  }

  else
  {
    sub_10001D9AC(v17);
    uint64_t v14 = v17;
  }

  sub_10001DEBC(v16, v14);
  void v15[3] = &type metadata for Table;
  v15[4] = &protocol witness table for Table;
  v15[0] = sub_100038A2C((uint64_t)&unk_100123EE8);
  sub_10001DEBC((void *)(v15[0] + 16LL), v16);
  Connection.prepareRowIterator(_:)(v15);
  sub_10000AC58(v15);
  if (!v0)
  {
    sub_10003F10C();
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    sub_10001BE7C();
    sub_100038920();
    swift_release();
  }

  sub_10001DEE8();
}

uint64_t sub_10003E004()
{
  uint64_t v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }

  uint64_t v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    uint64_t v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }

  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184LL, 7LL);
}

uint64_t type metadata accessor for LNAppShortcutParameterRecord(uint64_t a1)
{
  uint64_t result = qword_100131C50;
  if (!qword_100131C50) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LNAppShortcutParameterRecord);
  }
  return result;
}

uint64_t sub_10003E0C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10003D3D8(a1, a2, a3);
}

uint64_t sub_10003E0CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10003DD10(a1, a2, *(void (**)(uint64_t, uint64_t, double))(v3 + 16), a3);
}

id sub_10003E0E4(void *a1, void *a2, void *a3)
{
  uint64_t v7 = a1[3];
  uint64_t v8 = sub_100008D74(a1, v7);
  uint64_t v9 = _bridgeAnythingToObjectiveC<A>(_:)(v8, v7);
  id v10 = [v3 initWithValue:v9 valueType:a2 displayRepresentation:a3];
  swift_unknownObjectRelease(v9);

  sub_10000AC58(a1);
  return v10;
}

id sub_10003E16C(void *a1, void *a2)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = sub_100008D74(a1, v5);
  uint64_t v7 = _bridgeAnythingToObjectiveC<A>(_:)(v6, v5);
  id v8 = [v2 initWithValue:v7 valueType:a2];
  swift_unknownObjectRelease(v7);

  sub_10000AC58(a1);
  return v8;
}

uint64_t sub_10003E1E0()
{
  return sub_10003E3B8();
}

uint64_t sub_10003E1EC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10003E268()
{
  return sub_10003E3B8();
}

uint64_t sub_10003E274()
{
  uint64_t v12 = *v0;
  *uint64_t v0 = 0x8000000000000000LL;
  sub_1000091E0();
  uint64_t v9 = sub_10003EFBC(v1, v2, v3, v4, v5, v6, v7, v8, v11, v12);
  return sub_10003EE4C(v9);
}

uint64_t sub_10003E2D0()
{
  return sub_10003E3B8();
}

uint64_t sub_10003E2DC()
{
  uint64_t v9 = sub_10003EFBC(v1, v2, v3, v4, v5, v6, v7, v8, v11, v12);
  return swift_bridgeObjectRelease(v9);
}

uint64_t sub_10003E330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  sub_1000093D4(a1, a2, a3);
  uint64_t v7 = *v3;
  *uint64_t v3 = v9;
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_10003E3AC()
{
  return sub_10003E3B8();
}

uint64_t sub_10003E3B8()
{
  uint64_t v1 = sub_10003EE88();
  sub_10003EE60(v1);
  uint64_t v2 = *v0;
  *uint64_t v0 = v4;
  return sub_10003EE4C(v2);
}

uint64_t sub_10003E3F4()
{
  return sub_10003E3B8();
}

uint64_t sub_10003E400()
{
  return sub_10003E3B8();
}

uint64_t sub_10003E40C()
{
  return sub_10003E3B8();
}

uint64_t sub_10003E418(uint64_t a1, char a2, void *a3, void (*a4)(void), uint64_t *a5)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    return sub_10001BC70();
  }
  sub_1000119E4();
  for (unint64_t i = (void **)(a1 + 48); ; i += 3)
  {
    uint64_t v10 = (uint64_t)*(i - 2);
    uint64_t v9 = (uint64_t)*(i - 1);
    uint64_t v11 = *i;
    uint64_t v12 = (void *)*a3;
    sub_10001C1BC();
    id v13 = v11;
    unint64_t v15 = sub_10003F068();
    uint64_t v16 = v12[2];
    BOOL v17 = (v14 & 1) == 0;
    if (__OFADD__(v16, v17)) {
      break;
    }
    char v18 = v14;
    if (v12[3] >= v16 + v17)
    {
      if ((a2 & 1) == 0)
      {
        sub_100008DB0(a5);
        _NativeDictionary.copy()();
      }
    }

    else
    {
      a4();
      uint64_t v19 = sub_10003F068();
      if ((v18 & 1) != (v20 & 1)) {
        goto LABEL_18;
      }
      unint64_t v15 = v19;
    }

    uint64_t v21 = (void *)*a3;
    if ((v18 & 1) != 0)
    {
      id v22 = *(id *)(v21[7] + 8 * v15);
      swift_bridgeObjectRelease();

      uint64_t v23 = v21[7];
      *(void *)(v23 + 8 * v15) = v22;
    }

    else
    {
      v21[(v15 >> 6) + 8] |= 1LL << v15;
      uint64_t v24 = (void *)(v21[6] + 16 * v15);
      void *v24 = v10;
      v24[1] = v9;
      *(void *)(v21[7] + 8 * v15) = v13;
      uint64_t v25 = v21[2];
      BOOL v26 = __OFADD__(v25, 1LL);
      uint64_t v27 = v25 + 1;
      if (v26) {
        goto LABEL_17;
      }
      void v21[2] = v27;
    }

    a2 = 1;
    if (!--v6)
    {
      sub_10001BC70();
      return sub_10001BC70();
    }
  }

  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10003E5D0(void *a1)
{
  id v1 = [a1 name];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void sub_10003E630(void *a1)
{
  id v2 = [a1 synonyms];

  if (v2)
  {
    uint64_t v3 = sub_10000A1A0(0LL, (unint64_t *)&qword_100131250, &OBJC_CLASS___LNStaticDeferredLocalizedString_ptr);
    static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);
  }

  sub_10000ADA8();
}

unint64_t sub_10003E6A0()
{
  unint64_t result = qword_100130910;
  if (!qword_100130910)
  {
    type metadata accessor for LNValueTypeSpecificMetadataKey(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1000F5274, v1);
    atomic_store(result, (unint64_t *)&qword_100130910);
  }

  return result;
}

uint64_t sub_10003E6E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008DB0((uint64_t *)&unk_100132690);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t *sub_10003E728(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v33 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v33 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v33);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    id v13 = (uint64_t *)((char *)a1 + v9);
    char v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *id v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    char v18 = *(void **)((char *)a2 + v16);
    *(uint64_t *)((char *)a1 + v1sub_10000AC58(v0 + 6) = (uint64_t)v18;
    uint64_t v19 = (uint64_t *)((char *)a1 + v17);
    char v20 = (uint64_t *)((char *)a2 + v17);
    uint64_t v21 = v20[1];
    void *v19 = *v20;
    v19[1] = v21;
    uint64_t v22 = a3[9];
    uint64_t v23 = a3[10];
    uint64_t v24 = *(void **)((char *)a2 + v22);
    *(uint64_t *)((char *)a1 + v22) = (uint64_t)v24;
    uint64_t v25 = *(void **)((char *)a2 + v23);
    *(uint64_t *)((char *)a1 + v23) = (uint64_t)v25;
    uint64_t v26 = a3[11];
    uint64_t v27 = (uint64_t *)((char *)a1 + v26);
    uint64_t v28 = (uint64_t *)((char *)a2 + v26);
    uint64_t v29 = v28[1];
    void *v27 = *v28;
    v27[1] = v29;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v15);
    id v30 = v18;
    swift_bridgeObjectRetain(v21);
    id v31 = v24;
    id v32 = v25;
    swift_bridgeObjectRetain(v29);
  }

  return a1;
}

uint64_t sub_10003E844(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[6] + 8));

  swift_bridgeObjectRelease(*(void *)(a1 + a2[8] + 8));
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[11] + 8));
}

uint64_t sub_10003E8E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  void *v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  id v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = *(void **)(a2 + v15);
  *(void *)(a1 + v15) = v17;
  char v18 = (void *)(a1 + v16);
  uint64_t v19 = (void *)(a2 + v16);
  uint64_t v20 = v19[1];
  *char v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = a3[9];
  uint64_t v22 = a3[10];
  uint64_t v23 = *(void **)(a2 + v21);
  *(void *)(a1 + v21) = v23;
  uint64_t v24 = *(void **)(a2 + v22);
  *(void *)(a1 + v22) = v24;
  uint64_t v25 = a3[11];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (void *)(a2 + v25);
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  id v29 = v17;
  swift_bridgeObjectRetain(v20);
  id v30 = v23;
  id v31 = v24;
  swift_bridgeObjectRetain(v28);
  return a1;
}

uint64_t sub_10003E9D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a3[6];
  id v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  *id v13 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = a3[7];
  char v18 = *(void **)(a2 + v17);
  uint64_t v19 = *(void **)(a1 + v17);
  *(void *)(a1 + v1sub_10000AC58(v0 + 7) = v18;
  id v20 = v18;

  uint64_t v21 = a3[8];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  *uint64_t v22 = *v23;
  uint64_t v24 = v23[1];
  uint64_t v25 = v22[1];
  v22[1] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  uint64_t v26 = a3[9];
  uint64_t v27 = *(void **)(a2 + v26);
  uint64_t v28 = *(void **)(a1 + v26);
  *(void *)(a1 + v2sub_10000AC58(v0 + 6) = v27;
  id v29 = v27;

  uint64_t v30 = a3[10];
  id v31 = *(void **)(a1 + v30);
  id v32 = *(void **)(a2 + v30);
  *(void *)(a1 + v3sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v32;
  id v33 = v32;

  uint64_t v34 = a3[11];
  unint64_t v35 = (void *)(a1 + v34);
  uint64_t v36 = (void *)(a2 + v34);
  *unint64_t v35 = *v36;
  uint64_t v37 = v36[1];
  uint64_t v38 = v35[1];
  v35[1] = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  return a1;
}

uint64_t sub_10003EB18(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + sub_10000AD08(v5, v6, v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_10003EBB0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v12 = v8[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = a3[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  uint64_t v18 = v14[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = a3[7];
  id v20 = *(void **)(a1 + v19);
  *(void *)(a1 + v19) = *(void *)(a2 + v19);

  uint64_t v21 = a3[8];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  uint64_t v26 = v22[1];
  *uint64_t v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease(v26);
  uint64_t v27 = a3[9];
  uint64_t v28 = *(void **)(a1 + v27);
  *(void *)(a1 + v2sub_10000AC58(v0 + 7) = *(void *)(a2 + v27);

  uint64_t v29 = a3[10];
  uint64_t v30 = *(void **)(a1 + v29);
  *(void *)(a1 + v29) = *(void *)(a2 + v29);

  uint64_t v31 = a3[11];
  id v32 = (void *)(a1 + v31);
  id v33 = (uint64_t *)(a2 + v31);
  uint64_t v35 = *v33;
  uint64_t v34 = v33[1];
  uint64_t v36 = v32[1];
  *id v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease(v36);
  return a1;
}

uint64_t sub_10003ECAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003ECB8);
}

uint64_t sub_10003ECB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000338B4();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return sub_100009E6C(a1, a2, v6);
  }
  unint64_t v8 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(v8) = -1;
  }
  return (v8 + 1);
}

uint64_t sub_10003ED30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003ED3C);
}

uint64_t sub_10003ED3C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1000338B4();
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3) {
    return sub_100009E60(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_10003EDB0(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_1000F6110;
    v4[2] = &unk_1000F6110;
    void v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v4[4] = &unk_1000F6110;
    v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[6] = &unk_1000F6128;
    v4[7] = &unk_1000F6140;
    swift_initStructMetadata(a1, 256LL, 8LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10003EE4C(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_10003EE60(uint64_t a1)
{
  *id v2 = 0x8000000000000000LL;
  return v1(v5, v4, v3, a1);
}

uint64_t sub_10003EE88()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_10003EE9C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_10003EEA4(uint64_t a1)
{
  return sub_10000C194(*(void *)(v2 + 56) + 32 * a1, v1 + 480);
}

uint64_t sub_10003EEB4(uint64_t a1)
{
  return sub_100009E60(a1, 1LL, 1LL, v1);
}

uint64_t sub_10003EEC4()
{
  return sub_100009E6C(v1, 1LL, v0);
}

uint64_t sub_10003EEF8@<X0>(uint64_t a1@<X8>)
{
  return swift_dynamicCast(v3 - 240, v1 + 480, a1 + 8, v2, 6LL);
}

uint64_t sub_10003EF10@<X0>(uint64_t a1@<X8>)
{
  return QueryType.filter(_:)(v1, v2, v3, v4, v5, a1);
}

uint64_t sub_10003EF28()
{
  return swift_release(v0);
}

id sub_10003EF30()
{
  return sub_10003E0E4((void *)(v0 + 480), *(void **)(v0 + 416), v1);
}

BOOL sub_10003EF48@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_10003EF5C()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

void sub_10003EF64()
{
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v5;
  uint64_t v6 = (void *)(v0 + 24 * v1);
  v6[4] = v3;
  v6[5] = v4;
  v6[6] = v2;
}

uint64_t sub_10003EF80(uint64_t a1)
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, a1);
}

id sub_10003EF8C(uint64_t a1, uint64_t a2)
{
  return sub_1000BF7D0(a1, a2, v2);
}

double sub_10003EF98()
{
  double result = 0.0;
  *(_OWORD *)(v0 + 48sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = 0u;
  *(_OWORD *)(v0 + 49sub_10000AC58(v0 + 6) = 0u;
  return result;
}

uint64_t sub_10003EFA4()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 336));
}

void *sub_10003EFAC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  return sub_10001DAF0((uint64_t *)va);
}

void *sub_10003EFB4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40)
{
  return sub_10001DC30(&a40);
}

uint64_t sub_10003EFBC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  *uint64_t v10 = a10;
  return result;
}

void sub_10003EFCC()
{
  *uint64_t v0 = 0x8000000000000000LL;
}

uint64_t sub_10003EFE4(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_10003EFF4()
{
  return v0;
}

uint64_t sub_10003F00C()
{
  return sub_100015F98(v1, v0);
}

BOOL sub_10003F01C@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_10003F034()
{
  return 0LL;
}

uint64_t sub_10003F040()
{
  return v1;
}

uint64_t sub_10003F068()
{
  return sub_100015F98(v1, v0);
}

uint64_t sub_10003F074()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 472));
}

uint64_t sub_10003F080()
{
  return *(void *)(v0 + 240);
}

id sub_10003F094(uint64_t a1)
{
  return *(id *)(*(void *)(v1 + 56) + 8 * a1);
}

id sub_10003F0A0@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(a1 + 32);
}

void sub_10003F0A8()
{
}

id sub_10003F0B0()
{
  return sub_10003E16C((void *)(v0 + 480), *(void **)(v0 + 416));
}

uint64_t sub_10003F0BC()
{
  return static NSObject.== infix(_:_:)(v1, v0);
}

void sub_10003F0C8()
{
}

uint64_t sub_10003F0D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return StringProtocol.contains<A>(_:)(a1, a2, a2, a4, a4);
}

unint64_t sub_10003F0E0()
{
  uint64_t v1 = *(void *)(v0 - 232);
  *(void *)(v0 - 24sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = *(void *)(v0 - 240);
  *(void *)(v0 - 232) = v1;
  return sub_1000118E0();
}

void sub_10003F0EC()
{
}

  ;
}

uint64_t sub_10003F10C()
{
  return type metadata accessor for LNAppShortcutParameterRecord(0LL);
}

void sub_10003F114()
{
  *(void *)(v0 - 24sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = 31524LL;
  *(void *)(v0 - 232) = 0xE200000000000000LL;
}

void sub_10003F128()
{
}

void sub_10003F134()
{
}

void sub_10003F140()
{
}

uint64_t sub_10003F14C()
{
  return sub_100015FAC();
}

uint64_t sub_10003F154()
{
  return sub_10000A1D8(v1, v0);
}

void sub_10003F160()
{
}

  ;
}

void sub_10003F180()
{
  *(void *)(v1 - 192) = v0;
}

void *sub_10003F194(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_10003F1AC( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))sub_1000394BC);
}

void *sub_10003F1A0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_10003F1AC( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))sub_10003956C);
}

void *sub_10003F1AC( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  if ((a4 & 1) == 0) {
    goto LABEL_2;
  }
  uint64_t v11 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  uint64_t v12 = swift_unknownObjectRetain_n(a1, 2LL);
  uint64_t v13 = (void *)swift_dynamicCastClass(v12, v11);
  if (!v13)
  {
    sub_100011A58();
    uint64_t v13 = _swiftEmptyArrayStorage;
  }

  uint64_t v14 = v13[2];
  uint64_t v15 = swift_release(v13);
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v15 = a1;
  if (v14 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease(v15);
LABEL_2:
    uint64_t v10 = (void *)a5(a1, a2, a3, a4);
    goto LABEL_9;
  }

  uint64_t v10 = (void *)swift_dynamicCastClass(a1, v11);
  if (!v10)
  {
    sub_100011A58();
    uint64_t v10 = _swiftEmptyArrayStorage;
  }

void *sub_10003F290(int64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v57))
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = 4LL;
    while (1)
    {
      id v6 = (a2 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a2)
         : *(id *)(a2 + 8 * v5);
      uint64_t v7 = v6;
      id v8 = (id)(v5 - 3);
      if (__OFADD__(v5 - 4, 1LL)) {
        break;
      }
      id v9 = sub_10003F9CC((uint64_t)v6, "orderedPhrases");
      unint64_t v10 = sub_10003F658();
      uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

      if ((unint64_t)v11 >> 62)
      {
        if (v11 < 0) {
          uint64_t v18 = v11;
        }
        else {
          uint64_t v18 = v11 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain();
        uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v18);
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      swift_bridgeObjectRelease();
      BOOL v13 = __OFADD__(v4, v12);
      v4 += v12;
      if (v13) {
        goto LABEL_28;
      }
      if (v4 > a1)
      {
        uint64_t v19 = sub_10001BC70();
        id v20 = sub_10003F9CC(v19, "orderedPhrases");
        uint64_t v21 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, v10);

        unint64_t v22 = a1;
        if (__OFSUB__(v4, a1))
        {
          __break(1u);
        }

        else
        {
          uint64_t v23 = sub_10003F694(v4 - a1, (unint64_t)v21);
          uint64_t v65 = sub_10003F1AC( v23,  v24,  v25,  v26,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))sub_1000394AC);
          id v27 = sub_10003F9CC((uint64_t)v65, "bundleIdentifier");
          uint64_t v28 = sub_100028048((uint64_t)v27);
          uint64_t v62 = v29;
          uint64_t v63 = v28;

          id v31 = sub_10003F9CC(v30, "localeIdentifier");
          uint64_t v32 = sub_100028048((uint64_t)v31);
          uint64_t v60 = v33;
          uint64_t v61 = v32;

          id v35 = sub_10003F9CC(v34, "actionIdentifier");
          uint64_t v59 = sub_100028048((uint64_t)v35);
          uint64_t v37 = v36;

          uint64_t v38 = sub_10000BFF0(v7, (SEL *)&selRef_localizedShortTitle);
          uint64_t v40 = v39;
          uint64_t v41 = sub_10000BFF0(v7, (SEL *)&selRef_localizedAutoShortcutDescription);
          uint64_t v43 = v42;
          id v44 = sub_10003F9CC(v41, "systemImageName");
          uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
          uint64_t v47 = v46;

          id v49 = sub_10003F9CC(v48, "shortcutTileColor");
          id v50 = sub_10003F9CC((uint64_t)v49, "parameterPresentation");
          id v51 = objc_allocWithZone(&OBJC_CLASS___LNAutoShortcut);
          id v8 =  sub_10003F840( v63,  v62,  v61,  v60,  v59,  v37,  (uint64_t)v65,  v38,  v40,  v41,  v43,  v45,  v47,  (uint64_t)v49,  v50);
          sub_10003F9D4();
          id v20 = *(id *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v22 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if ((unint64_t)v20 < v22 >> 1)
          {
LABEL_23:
            uint64_t v52 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v8);
            specialized Array._endMutation()(v52);

            return _swiftEmptyArrayStorage;
          }
        }

        sub_100027E8C((uint64_t)v20 + 1, v22);
        goto LABEL_23;
      }

      if (v4 == a1)
      {
        sub_10001BC70();
        id v53 = v7;
        sub_10003F9D4();
        unint64_t v55 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v54 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v55 >= v54 >> 1) {
          sub_100027E8C(v55 + 1, v54);
        }
        uint64_t v56 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v55, v53);
        specialized Array._endMutation()(v56);

        return _swiftEmptyArrayStorage;
      }

      id v14 = v7;
      sub_10003F9D4();
      unint64_t v16 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v15 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v16 >= v15 >> 1) {
        sub_100027E8C(v16 + 1, v15);
      }
      uint64_t v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v14);
      specialized Array._endMutation()(v17);

      ++v5;
      if (v8 == (id)v3) {
        goto LABEL_33;
      }
    }

    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    if (a2 < 0) {
      uint64_t v57 = a2;
    }
    else {
      uint64_t v57 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
  }

LABEL_33:
  sub_10001BC70();
  return _swiftEmptyArrayStorage;
}

      ++v39;
    }

    while (v39 != 5);
    swift_setDeallocating(inited);
    sub_1000588E8();
    if (qword_1001301D0 == -1) {
      goto LABEL_35;
    }
LABEL_47:
    swift_once(&qword_1001301D0, sub_100048A2C);
LABEL_35:
    id v53 = type metadata accessor for Logger(0LL);
    unint64_t v54 = (os_log_s *)sub_100008D98(v53, (uint64_t)qword_100135378);
    unint64_t v55 = sub_10000AFB0();
    Logger.logObject.getter(v55);
    uint64_t v56 = sub_10004C078();
    if (os_log_type_enabled(v54, v56))
    {
      uint64_t v57 = (_DWORD *)sub_10000AE10(12LL);
      uint64_t v58 = sub_10000AE10(32LL);
      v65[0] = v58;
      os_log_s *v57 = 136315138;
      uint64_t v59 = sub_10000AFB0();
      uint64_t v60 = Array.description.getter(v59, &type metadata for String);
      uint64_t v62 = v61;
      sub_10001198C();
      uint64_t v64 = sub_10000DE60(v60, v62, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v57 + 1, v57 + 3);
      sub_10001191C((uint64_t)v38);
      swift_bridgeObjectRelease(v62);
      sub_10004C04C( (void *)&_mh_execute_header,  v54,  v56,  "Skipping 'open' suggestions for app: %s (not yet supported)");
      sub_10000AF48(v58);
      sub_10000AD78(v58);
      sub_10000AD78((uint64_t)v57);
    }

    else
    {

      sub_10001191C((uint64_t)v38);
    }

    uint64_t v21 = 0;
    return v21 & 1;
  }

  id v9 = v7;
  unint64_t v10 = sub_10004BF14(v5, v2, v6);
  sub_10000ADB0();
  swift_bridgeObjectRelease(v9);
  if ((v10 & 1) != 0) {
    goto LABEL_17;
  }
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNSystemProtocolIdentifierCreateEntity);
  uint64_t v12 = sub_10004BF90();
  if (v11 == v12 && v2 == v13)
  {
    sub_10001191C(v2);
  }

  else
  {
    unint64_t v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v2, v12, v13, 0LL);
    sub_10000ADB0();
    sub_100011958();
    if ((v15 & 1) == 0)
    {
      unint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNSystemProtocolIdentifierSearch);
      uint64_t v17 = sub_10004BF90();
      uint64_t v19 = v18;
      if (v16 == v17 && v2 == v18) {
        uint64_t v21 = 1;
      }
      else {
        uint64_t v21 = sub_10004BF14(v16, v2, v17);
      }

      sub_10000ADB0();
      swift_bridgeObjectRelease(v19);
      return v21 & 1;
    }
  }

LABEL_40:
  uint64_t v21 = 1;
  return v21 & 1;
}

unint64_t sub_10003F658()
{
  unint64_t result = qword_100130590;
  if (!qword_100130590)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___LNAutoShortcutLocalizedPhrase);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100130590);
  }

  return result;
}

uint64_t sub_10003F694(uint64_t a1, unint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = a2;
    uint64_t v3 = a1;
    unint64_t v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      goto LABEL_4;
    }
  }

  if (v2 < 0) {
    uint64_t v17 = v2;
  }
  else {
    uint64_t v17 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease();
LABEL_4:
  uint64_t result = sub_1000BBF7C(v5, -v3, 0LL, v2);
  if ((v7 & 1) != 0)
  {
    uint64_t v8 = 0LL;
    if (!v4)
    {
LABEL_7:
      uint64_t v9 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      goto LABEL_14;
    }
  }

  else
  {
    uint64_t v8 = result;
    if (result < 0)
    {
LABEL_33:
      __break(1u);
      return result;
    }

    if (!v4) {
      goto LABEL_7;
    }
  }

  if (v2 < 0) {
    uint64_t v10 = v2;
  }
  else {
    uint64_t v10 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
  uint64_t result = swift_bridgeObjectRelease();
  if (v11 < 0)
  {
    __break(1u);
    goto LABEL_32;
  }

  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v10);
  uint64_t result = swift_bridgeObjectRelease();
LABEL_14:
  if (v9 < v8)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  if ((v2 & 0xC000000000000001LL) != 0 && v8)
  {
    sub_10003F658();
    Swift::Int v12 = 0LL;
    do
    {
      Swift::Int v13 = v12 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v12);
      Swift::Int v12 = v13;
    }

    while (v8 != v13);
  }

  if (!v4) {
    return v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  if (v2 < 0) {
    uint64_t v15 = v2;
  }
  else {
    uint64_t v15 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  __n128 v16 = swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.subscript.getter(0LL, v8, v15, v16);
  swift_bridgeObjectRelease_n(v2, 2LL);
  return v14;
}

id sub_10003F840( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10003F658();
  v17.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (a9)
  {
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v18 = 0LL;
  }

  if (a11)
  {
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v19 = 0LL;
  }

  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v21 = [v24 initWithBundleIdentifier:v23 localeIdentifier:v15 actionIdentifier:v16 orderedPhrases:v17.super.isa localizedShortTitle:v18 localizedAutoSho rtcutDescription:v19 systemImageName:v20 shortcutTileColor:a14 parameterPresentation:a15];

  return v21;
}

id sub_10003F9CC(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_10003F9D4()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

void sub_10003F9DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v4);
  id v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = 1LL;
  uint64_t v7 = String.utf8CString.getter(a1, a2);
  uint64_t v8 = (void *)container_system_path_for_identifier(v7 + 32, &v13);
  swift_release(v7);
  if (v8)
  {
    uint64_t v9 = type metadata accessor for URL(0LL);
    sub_100009E60((uint64_t)v6, 1LL, 1LL, v9);
    URL.init(fileURLWithFileSystemRepresentation:isDirectory:relativeTo:)(v8, 1LL, v6);
    sub_100028208((uint64_t)v6);
    free(v8);
  }

  else
  {
    uint64_t v10 = v13;
    unint64_t v11 = sub_10003FB2C();
    swift_allocError(&_s14ContainerErrorVN, v11, 0LL, 0LL);
    *Swift::Int v12 = v10;
    swift_willThrow();
  }

unint64_t sub_10003FB2C()
{
  unint64_t result = qword_100131CA0;
  if (!qword_100131CA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F616C, &_s14ContainerErrorVN);
    atomic_store(result, (unint64_t *)&qword_100131CA0);
  }

  return result;
}

ValueMetadata *_s14ContainerErrorVMa()
{
  return &_s14ContainerErrorVN;
}

void sub_10003FB78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    unint64_t v5 = 0LL;
    uint64_t v6 = a1 + 40;
    uint64_t v22 = *(void *)(a1 + 16);
    uint64_t v19 = v4 - 1;
    id v21 = _swiftEmptyArrayStorage;
    uint64_t v20 = a1 + 40;
    do
    {
      uint64_t v7 = (_OWORD *)(v6 + 24 * v5);
      unint64_t v8 = v5;
      while (1)
      {
        if (v8 >= *(void *)(a1 + 16))
        {
          __break(1u);
          return;
        }

        uint64_t v23 = *((void *)v7 - 1);
        __int128 v24 = *v7;
        swift_bridgeObjectRetain();
        id v9 = *((id *)&v24 + 1);
        id v10 = objc_msgSend(v9, "intentIdentifier", swift_bridgeObjectRetain().n128_f64[0]);
        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        uint64_t v13 = v12;

        if (!*(void *)(a2 + 16))
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_9;
        }

        sub_100015F98(v11, v13);
        char v15 = v14;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v15 & 1) != 0) {
          break;
        }

LABEL_9:
        ++v8;
        swift_bridgeObjectRelease();
        uint64_t v7 = (_OWORD *)((char *)v7 + 24);
        if (v22 == v8) {
          goto LABEL_16;
        }
      }

      NSString v16 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
      {
        sub_1000454DC();
        NSString v16 = v21;
      }

      unint64_t v17 = v16[2];
      if (v17 >= v16[3] >> 1)
      {
        sub_1000454DC();
        NSString v16 = v21;
      }

      unint64_t v5 = v8 + 1;
      v16[2] = v17 + 1;
      id v21 = v16;
      NSString v18 = &v16[3 * v17];
      void v18[4] = v23;
      *(_OWORD *)(v18 + 5) = v24;
      uint64_t v6 = v20;
    }

    while (v19 != v8);
  }

LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

    sub_10001BD0C();
    sub_1000148B4();
    uint64_t v12 = v19;
    uint64_t v13 = *(void *)(v19 + 16);
    uint64_t v20 = v13 + 1;
    if (v13 >= *(void *)(v19 + 24) >> 1) {
      goto LABEL_74;
    }
    while (1)
    {
      *(void *)(v12 + 1sub_10000AC58(v0 + 6) = v20;
      *(void *)(v12 + 8 * v13 + 32) = v17;
      if (v13 > 1) {
        goto LABEL_31;
      }
      id v21 = v17[2];
      if (!v21) {
        goto LABEL_31;
      }
      uint64_t v13 = v21 - 1;
      if ((uint64_t)v17[v21 + 3] <= 0)
      {
        if (v21 != 1)
        {
          unint64_t v26 = v21 + 2;
          do
          {
            uint64_t v13 = v26 - 4;
            if (v26 - 4 >= v21) {
              goto LABEL_64;
            }
          }

          while (--v26 != 3);
        }

void sub_10003FDA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    unint64_t v5 = 0LL;
    uint64_t v6 = a1 + 40;
    uint64_t v22 = *(void *)(a1 + 16);
    uint64_t v19 = v4 - 1;
    uint64_t v7 = _swiftEmptyArrayStorage;
    uint64_t v20 = a1 + 40;
    do
    {
      id v21 = v7;
      unint64_t v8 = (_OWORD *)(v6 + 24 * v5);
      unint64_t v9 = v5;
      while (1)
      {
        if (v9 >= *(void *)(a1 + 16))
        {
          __break(1u);
          return;
        }

        uint64_t v23 = *((void *)v8 - 1);
        __int128 v24 = *v8;
        swift_bridgeObjectRetain();
        id v10 = *((id *)&v24 + 1);
        id v11 = objc_msgSend(v10, "intentIdentifier", swift_bridgeObjectRetain().n128_f64[0]);
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        uint64_t v14 = v13;

        if (!*(void *)(a2 + 16)) {
          break;
        }
        sub_100015F98(v12, v14);
        char v16 = v15;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v16 & 1) == 0) {
          goto LABEL_10;
        }
        ++v9;

        swift_bridgeObjectRelease();
        unint64_t v8 = (_OWORD *)((char *)v8 + 24);
        if (v22 == v9) {
          goto LABEL_15;
        }
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_10:
      uint64_t v7 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
      {
        sub_1000454DC();
        uint64_t v7 = v21;
      }

      unint64_t v17 = v7[2];
      if (v17 >= v7[3] >> 1)
      {
        sub_1000454DC();
        uint64_t v7 = v21;
      }

      unint64_t v5 = v9 + 1;
      _OWORD v7[2] = v17 + 1;
      NSString v18 = &v7[3 * v17];
      void v18[4] = v23;
      *(_OWORD *)(v18 + 5) = v24;
      uint64_t v6 = v20;
    }

    while (v19 != v9);
  }

void *sub_10003FFB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  unint64_t v26 = (unint64_t)_swiftEmptyArrayStorage;
  if (v5)
  {
    uint64_t v22 = a2 + 112;
    swift_bridgeObjectRetain();
    unint64_t v8 = (void **)(v7 + 48);
    while (1)
    {
      unint64_t v9 = *v8;
      sub_100008F24(v22, (uint64_t)v25);
      sub_100008D74(v25, v25[3]);
      swift_bridgeObjectRetain();
      id v10 = v9;
      id v11 = [v10 intentIdentifier];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      uint64_t v14 = v13;

      uint64_t v15 = sub_10004F0A8(a3, a4, v12, v14);
      if (v4) {
        break;
      }
      uint64_t v16 = v15;
      swift_bridgeObjectRelease();
      sub_10000AC58(v25);

      uint64_t v17 = swift_bridgeObjectRelease();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v17);
      unint64_t v19 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v18 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v19 >= v18 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1LL);
      }
      uint64_t v20 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v16);
      specialized Array._endMutation()(v20);
      v8 += 3;
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        uint64_t v6 = (void *)v26;
        goto LABEL_9;
      }
    }

    swift_bridgeObjectRelease();
    sub_10000AC58(v25);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    uint64_t v6 = (void *)v26;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }

  else
  {
LABEL_9:
    swift_release();
    swift_bridgeObjectRelease();
  }

  return v6;
}

void *sub_10004017C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    sub_100008DB0(&qword_100130F50);
    uint64_t v4 = (void *)static _DictionaryStorage.allocate(capacity:)(v3);
  }

  else
  {
    uint64_t v4 = _swiftEmptyDictionarySingleton;
  }

  uint64_t v7 = v4;
  sub_100041994(a1, 1, &v7);
  uint64_t v5 = v7;
  if (v1) {
    swift_release();
  }
  return v5;
}

uint64_t sub_100040208()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A07C(v0, qword_100135360);
  sub_100008D98(v0, (uint64_t)qword_100135360);
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    uint64_t v2 = String.init(cString:)(LNLogSubsystem);
    return Logger.init(subsystem:category:)(v2, v3, 0xD000000000000021LL, 0x80000001000F61B0LL);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100040284(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100011A0C();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = AFDeviceSupportsSAE();
  if ((_DWORD)v14)
  {
    uint64_t v15 = sub_100011AB4(v14, &qword_100132790, &OBJC_CLASS___LSBundleRecord_ptr);
    sub_100011A3C((uint64_t)a2);
    id v16 = sub_10005A544(a1, a2, 0);
    if (v4)
    {
      sub_10001DF40();
    }

    else
    {
      uint64_t v24 = v15;
      uint64_t v25 = &off_100122EC8;
      *(void *)&__int128 v23 = v16;
      sub_100009EEC(&v23, (uint64_t)v26);
      v26[5] = a1;
      v26[6] = a2;
      sub_100040470((uint64_t)v26, a3, a4);
      sub_100041B64(v26);
    }
  }

  else
  {
    uint64_t v17 = qword_1001301A8;
    swift_retain();
    if (v17 != -1) {
      swift_once(&qword_1001301A8, sub_100040208);
    }
    uint64_t v18 = sub_100008D98(v9, (uint64_t)qword_100135360);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v13, v18, v9);
    uint64_t v19 = swift_release();
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)sub_10000AE10(2LL);
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Device/locale does not support example phrases.", v22, 2u);
      sub_10000AD78((uint64_t)v22);
    }

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  }

  sub_10001DEE8();
}

void sub_100040470(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v173 = _s7BuilderVMa(0LL);
  __chkstk_darwin(v173);
  sub_100011A0C();
  uint64_t v174 = v7 - v6;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_100011A0C();
  uint64_t v12 = (void *)(v11 - v10);
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v15 = (void *)(v3 + 112);
  sub_100008D74((void *)(v3 + 112), *(void *)(v3 + 136));
  sub_1000515D8(v13, v14, 0LL, 0LL);
  if (v181) {
    goto LABEL_9;
  }
  uint64_t v17 = v16;
  uint64_t v177 = v12;
  uint64_t v179 = v9;
  uint64_t v168 = a1;
  uint64_t v182 = v8;
  uint64_t v172 = v15;
  uint64_t v18 = qword_1001301A8;
  swift_retain();
  uint64_t v19 = v4;
  if (v18 != -1) {
    swift_once(&qword_1001301A8, sub_100040208);
  }
  uint64_t v20 = sub_100008D98(v8, (uint64_t)qword_100135360);
  os_log_type_t v21 = *(void (**)(void *, uint64_t, uint64_t))(v179 + 16);
  v21(v12, v20, v182);
  swift_release();
  uint64_t v22 = sub_10000AE38();
  Logger.logObject.getter(v22);
  os_log_type_t v23 = sub_100041BDC();
  uint64_t v171 = v17;
  uint64_t v167 = (void (*)(uint64_t, uint64_t, uint64_t))v21;
  if (sub_10000AEC8(v23))
  {
    uint64_t v24 = (_DWORD *)sub_10000AE10(12LL);
    _DWORD *v24 = 134217984;
    *(void *)&__int128 v187 = *(void *)(v17 + 16);
    sub_100041BA8((uint64_t)v24, v25, (uint64_t)(v24 + 1), (uint64_t)(v24 + 3));
    sub_10001BC70();
    sub_100041BEC((void *)&_mh_execute_header, v26, v27, "Found %ld example phrases from JSON file");
    uint64_t v28 = (uint64_t)v24;
    uint64_t v19 = v4;
    unint64_t v29 = v14;
    sub_10000AD78(v28);
  }

  else
  {

    sub_10001BC70();
    unint64_t v29 = v14;
  }

  (*(void (**)(void *, uint64_t))(v179 + 8))(v177, v182);
  sub_100008D74(v15, *(void *)(v19 + 136));
  sub_1000119E4();
  sub_10005108C();
  id v31 = v30;
  sub_10001BC70();
  id v197 = v31;
  sub_100041CB8();
  sub_100051250();
  uint64_t v33 = v32;
  uint64_t v34 = *(void **)(*sub_100041CB8() + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  sub_1000119E4();
  id v35 = v34;
  sub_1000799DC();
  unint64_t v169 = v36;
  uint64_t v178 = v33;
  uint64_t v180 = v19;
  sub_100008F24((uint64_t)v172, (uint64_t)&v187);
  sub_100041C74();
  uint64_t v37 = sub_100008DB0(&qword_100130BD0);
  uint64_t inited = swift_initStackObject(v37, v193);
  *(_OWORD *)(inited + 1sub_10000AC58(v0 + 6) = xmmword_1000F5510;
  uint64_t v39 = (void *)objc_opt_self(&OBJC_CLASS___LNSystemProtocol);
  *(void *)(inited + 32) = [v39 entityUpdatingProtocol];
  id v40 = [v39 propertyUpdaterProtocol];
  *(void *)(inited + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v40;
  sub_100041C00((uint64_t)v40);
  sub_100041C60();
  sub_100041C38();
  uint64_t v41 = v39;
  uint64_t v42 = v37;
  sub_10001BEC0();
  sub_1000119E4();
  uint64_t v43 = sub_100041C10();
  sub_10001BC70();
  uint64_t v44 = sub_10000ADB0();
  if (!v43)
  {
    uint64_t v45 = sub_100011AB4(v44, (unint64_t *)&unk_100132490, &OBJC_CLASS___LNActionMetadata_ptr);
    uint64_t v43 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  type metadata for String,  v45,  &protocol witness table for String);
  }

  sub_100041C30();
  sub_100008F24((uint64_t)v172, (uint64_t)&v187);
  sub_100041C74();
  uint64_t v46 = swift_initStackObject(v42, v192);
  *(_OWORD *)(v46 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5530;
  id v47 = [v41 openEntitySystemProtocol];
  *(void *)(v46 + 32) = v47;
  sub_100041C00((uint64_t)v47);
  sub_100041C60();
  sub_100041C38();
  sub_10001BEC0();
  sub_1000119E4();
  uint64_t v48 = sub_100041C10();
  sub_10001BC70();
  uint64_t v49 = sub_10000ADB0();
  if (!v48)
  {
    uint64_t v50 = sub_100011AB4(v49, (unint64_t *)&unk_100132490, &OBJC_CLASS___LNActionMetadata_ptr);
    uint64_t v48 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  type metadata for String,  v50,  &protocol witness table for String);
  }

  sub_100041C30();
  id v51 = *(void **)(*sub_100008D74(v172, *(void *)(v19 + 136)) + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  sub_1000119E4();
  id v52 = v51;
  uint64_t v53 = 0LL;
  sub_100079A28();
  uint64_t v55 = v54;
  uint64_t v170 = v13;
  if ((unint64_t)v54 >> 62)
  {
    if (v54 < 0) {
      uint64_t v53 = v54;
    }
    else {
      uint64_t v53 = v54 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10001BCF8();
    uint64_t v56 = sub_100028060();
    sub_10001BEC0();
  }

  else
  {
    uint64_t v56 = *(void *)((v54 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v57 = v180;
  if (!v56)
  {
LABEL_25:
    sub_10001BEC0();
    sub_100041C98();
    uint64_t v71 = sub_10004017C(v70);
    sub_1000394B8();
    uint64_t v73 = v72;
    swift_bridgeObjectRelease();
    sub_1000394B8();
    sub_10001DF40();
    *(void *)&__int128 v187 = v73;
    sub_100042A6C();
    sub_10000F848(v170, v29, v71, v187);
    uint64_t v75 = v74;
    sub_10000ADB0();
    swift_bridgeObjectRetain();
    uint64_t v76 = sub_10001BCF8();
    sub_10003FB78(v76, (uint64_t)v71);
    swift_bridgeObjectRetain();
    sub_10003FDA4(v75, (uint64_t)v71);
    sub_100042710();
    uint64_t v77 = (uint64_t)v197;
    swift_retain();
    sub_1000119E4();
    uint64_t v78 = sub_10000AE38();
    uint64_t v79 = sub_10003FFB4(v78, v57, v170, v29);
    if (v53)
    {
      sub_10001191C(v77);
      sub_100041BA0((uint64_t)v196);
      swift_bridgeObjectRelease();
      sub_100041BA0((uint64_t)&v199);
      sub_100041BA0((uint64_t)v194);
LABEL_8:
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }

    id v80 = v79;
    sub_10000ADB0();
    sub_100042710();
    uint64_t v81 = (os_log_s *)*sub_100008D74(v172, *(void *)(v57 + 136));
    sub_100051414();
    unint64_t v160 = v71;
    uint64_t v83 = *(void *)(v82 + 16);
    uint64_t v162 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v159 = (uint64_t)v80;
    if (v83)
    {
      uint64_t v84 = (_OWORD *)(v82 + 40);
      uint64_t v85 = _swiftEmptyArrayStorage;
      uint64_t v86 = &selRef_isLowPowerDeviceEnabled;
      do
      {
        uint64_t v87 = *((void *)v84 - 1);
        __int128 v166 = *v84;
        uint64_t v81 = *(os_log_s **)v84;
        sub_10000AE38();
        id v80 = *((id *)&v166 + 1);
        if ([v80 v86[128]])
        {

          sub_10000ADB0();
        }

        else
        {
          uint64_t v88 = v87;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v85);
          *(void *)&__int128 v187 = v85;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t v81 = (os_log_s *)&v187;
            sub_1000454A0();
            uint64_t v85 = (void *)v187;
          }

          __int128 v90 = v166;
          uint64_t v91 = v87;
          unint64_t v93 = v85[2];
          unint64_t v92 = v85[3];
          id v80 = (id)(v93 + 1);
          if (v93 >= v92 >> 1)
          {
            sub_100041C48(v92);
            sub_1000454A0();
            uint64_t v91 = v88;
            __int128 v90 = v166;
            uint64_t v85 = (void *)v187;
          }

          v85[2] = v80;
          uint64_t v94 = &v85[3 * v93];
          v94[4] = v91;
          *(_OWORD *)(v94 + 5) = v90;
          uint64_t v86 = &selRef_isLowPowerDeviceEnabled;
        }

        uint64_t v84 = (_OWORD *)((char *)v84 + 24);
        --v83;
      }

      while (v83);
    }

    else
    {
      uint64_t v85 = _swiftEmptyArrayStorage;
    }

    sub_100041BA0((uint64_t)&v190);
    swift_retain();
    sub_100041C6C();
    os_log_type_t v95 = sub_100041BDC();
    uint64_t v164 = v85;
    if (sub_10000AEC8(v95))
    {
      uint64_t v96 = (uint8_t *)sub_10000AE10(12LL);
      *(_DWORD *)uint64_t v96 = 134217984;
      *(void *)&__int128 v187 = v85[2];
      sub_100041BA8((uint64_t)v96, v97, (uint64_t)(v96 + 4), (uint64_t)(v96 + 12));
      swift_release();
      _os_log_impl( (void *)&_mh_execute_header,  v81,  (os_log_type_t)v80,  "Developer provided %ld AssistantAppEntity examples",  v96,  0xCu);
      sub_10000AD78((uint64_t)v96);
    }

    else
    {

      swift_release();
    }

    uint64_t v43 = a3;
    uint64_t v56 = a2;
    uint64_t v191 = _swiftEmptyDictionarySingleton;
    uint64_t v98 = sub_10008C360(a2, a3);
    sub_100085200(v159, v169, a2, a3, v170, v29, (uint64_t)v98, (uint64_t *)&v191);
    uint64_t v100 = v99;
    sub_10000ADB0();
    sub_10001BEC0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_100041C6C();
    os_log_type_t v101 = sub_100041BDC();
    uint64_t v158 = v100;
    if (sub_10000AEC8(v101))
    {
      uint64_t v102 = (_DWORD *)sub_10000AE10(12LL);
      *uint64_t v102 = 134217984;
      *(void *)&__int128 v187 = *(void *)(v100 + 16);
      sub_100041BA8((uint64_t)v102, v103, (uint64_t)(v102 + 1), (uint64_t)(v102 + 3));
      sub_10001BE7C();
      sub_100041BEC((void *)&_mh_execute_header, v104, v105, "Found %ld parameters with platform-provided values");
      uint64_t v106 = (uint64_t)v102;
      uint64_t v56 = a2;
      sub_10000AD78(v106);
    }

    else
    {

      sub_10001BE7C();
    }

    sub_100041924(v168, (uint64_t)&v187);
    uint64_t v58 = v197;
    sub_100008F24((uint64_t)v172, (uint64_t)v186);
    uint64_t v53 = qword_1001302E8;
    sub_10001BD0C();
    sub_10000AE38();
    uint64_t v57 = v174;
    uint64_t v55 = v173;
    if (v53 == -1) {
      goto LABEL_46;
    }
    goto LABEL_82;
  }

  uint64_t v158 = v48;
  *(void *)&__int128 v187 = _swiftEmptyArrayStorage;
  uint64_t v58 = (os_log_s *)&v187;
  sub_100045518();
  if ((v56 & 0x8000000000000000LL) == 0)
  {
    uint64_t v59 = 0LL;
    uint64_t v60 = v187;
    unint64_t v165 = v55 & 0xC000000000000001LL;
    uint64_t v163 = (int *)v55;
    uint64_t v161 = v56;
    do
    {
      if (v165) {
        id v61 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v59, v55);
      }
      else {
        id v61 = *(id *)(v55 + 8 * v59 + 32);
      }
      id v62 = v61;
      id v63 = [v61 identifier];
      uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
      uint64_t v66 = v65;

      *(void *)&__int128 v187 = v60;
      unint64_t v68 = *(void *)(v60 + 16);
      unint64_t v67 = *(void *)(v60 + 24);
      if (v68 >= v67 >> 1)
      {
        sub_100041C48(v67);
        sub_100045518();
        uint64_t v60 = v187;
      }

      ++v59;
      *(void *)(v60 + 1sub_10000AC58(v0 + 6) = v68 + 1;
      uint64_t v69 = (void *)(v60 + 24 * v68);
      v69[4] = v64;
      v69[5] = v66;
      v69[6] = v62;
      uint64_t v57 = v180;
      uint64_t v55 = (uint64_t)v163;
    }

    while (v161 != v59);
    goto LABEL_25;
  }

  __break(1u);
LABEL_82:
  swift_once(&qword_1001302E8, sub_10008883C);
LABEL_46:
  uint64_t v107 = sub_100008D98(v182, (uint64_t)qword_1001357B0);
  v167(v57, v107, v182);
  uint64_t v108 = v57 + *(int *)(v55 + 20);
  __int128 v109 = v188;
  *(_OWORD *)uint64_t v108 = v187;
  *(_OWORD *)(v108 + 1sub_10000AC58(v0 + 6) = v109;
  *(_OWORD *)(v108 + 32) = v189;
  *(void *)(v108 + 48) = v190;
  uint64_t v110 = (uint64_t *)(v57 + *(int *)(v55 + 24));
  *uint64_t v110 = v56;
  v110[1] = v43;
  *(void *)(v57 + *(int *)(v55 + 2swift_bridgeObjectRelease(*(void *)(v0 + qword_100134400 + 8)) = v58;
  uint64_t v183 = *(int *)(v55 + 32);
  *(void *)(v57 + v183) = v178;
  *(void *)(v57 + *(int *)(v55 + 3sub_10000E8E4(*((void *)*v0 + 6)) = v158;
  sub_100009EEC(v186, v57 + *(int *)(v55 + 40));
  *(void *)(v57 + *(int *)(v55 + 44)) = v160;
  *(void *)(v57 + *(int *)(v55 + swift_bridgeObjectRelease(*(void *)(v0 + 48)) = v164;
  sub_100011A3C(v29);
  sub_100011A3C(v43);
  sub_100041C6C();
  os_log_type_t v111 = sub_100041BDC();
  uint64_t v157 = v29;
  if (os_log_type_enabled(v58, v111))
  {
    unint64_t v112 = v29;
    uint64_t v113 = sub_10000AE10(22LL);
    uint64_t v114 = sub_10000AE10(64LL);
    *(void *)&__int128 v187 = v114;
    *(_DWORD *)uint64_t v113 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)&v186[0] = sub_10000DE60(v170, v112, (uint64_t *)&v187);
    sub_100041C20(*(uint64_t *)&v186[0], v115, v116, v113 + 12);
    sub_100027E5C(v112);
    *(_WORD *)(v113 + 12) = 2080;
    sub_10001BD0C();
    *(void *)&v186[0] = sub_100041CA4((uint64_t *)&v187, (uint64_t)&v198);
    sub_100041C20(*(uint64_t *)&v186[0], v117, v118, v113 + 22);
    sub_100027E5C(v43);
    _os_log_impl( (void *)&_mh_execute_header,  v58,  v111,  "Interpolating AssistantIntent example phrases for %s:%s",  (uint8_t *)v113,  0x16u);
    sub_100041C80();
    sub_10000AD78(v114);
    sub_10000AD78(v113);
  }

  else
  {

    sub_10001191C(v43);
    sub_10001191C(v29);
  }

  sub_100041C98();
  sub_10006EB38();
  if (v53)
  {
    sub_100041BA0((uint64_t)v196);
    sub_100041958(v57);
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }

  uint64_t v120 = v119;
  uint64_t v121 = *(void ***)(v57 + v183);
  *(void *)&v186[0] = _swiftEmptyArrayStorage;
  uint64_t v122 = (char *)v121[2];
  if (v122)
  {
    sub_100011A3C((uint64_t)v121);
    uint64_t v123 = v121 + 6;
    do
    {
      uint64_t v125 = (uint64_t)*(v123 - 1);
      Swift::String v124 = *v123;
      *(void *)&__int128 v187 = *(v123 - 2);
      *((void *)&v187 + 1) = v125;
      *(void *)&__int128 v188 = v124;
      sub_10001BCF8();
      id v126 = v124;
      uint64_t v53 = 0LL;
      sub_100070228(v186, (uint64_t)&v187, v174);

      sub_10001BEC0();
      v123 += 3;
      --v122;
    }

    while (v122);
    sub_10001191C((uint64_t)v121);
    uint64_t v162 = *(void *)&v186[0];
  }

  sub_100011A3C(v120);
  sub_100011A3C(v162);
  sub_100041BD0();
  os_log_type_t v127 = sub_100041BDC();
  unint64_t v128 = (unint64_t)v120 >> 62;
  if (sub_100041C8C(v127))
  {
    uint64_t v129 = sub_10000AE10(22LL);
    *(_DWORD *)uint64_t v129 = 134218240;
    if (v128)
    {
      if (v120 < 0) {
        uint64_t v53 = v120;
      }
      else {
        uint64_t v53 = v120 & 0xFFFFFFFFFFFFFF8LL;
      }
      sub_1000119E4();
      uint64_t v130 = sub_100028060();
      sub_10001BC70();
    }

    else
    {
      uint64_t v130 = *(void *)((v120 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    uint64_t v131 = sub_10001BC70();
    *(void *)&__int128 v187 = v130;
    sub_100041BA8(v131, v132, v129 + 4, v129 + 12);
    sub_10001BC70();
    *(_WORD *)(v129 + 12) = 2048;
    if ((unint64_t)v162 >> 62)
    {
      if (v162 < 0) {
        uint64_t v53 = v162;
      }
      else {
        uint64_t v53 = v162 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v133 = sub_100028060();
      sub_10001BE7C();
    }

    else
    {
      uint64_t v133 = *(void *)((v162 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    uint64_t v134 = sub_10001BE7C();
    *(void *)&__int128 v187 = v133;
    sub_100041BA8(v134, v135, v129 + 14, v129 + 22);
    sub_10001BE7C();
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v121,  v127,  "Generated example phrases: %ld negative phrases: %ld",  (uint8_t *)v129,  0x16u);
    sub_10000AD78(v129);
  }

  else
  {

    sub_10001191C(v120);
    sub_10001191C(v162);
  }

  uint64_t v136 = *(void *)(v171 + 16);
  uint64_t v137 = _swiftEmptyArrayStorage;
  if (v136)
  {
    *(void *)&__int128 v187 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v136);
    uint64_t v138 = (void **)(v171 + 48);
    do
    {
      uint64_t v139 = *v138;
      v138 += 3;
      id v140 = v139;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v140);
      uint64_t v141 = *(void *)(v187 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v141);
      uint64_t v142 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v141, v140);
      specialized ContiguousArray._endMutation()(v142);
      --v136;
    }

    while (v136);
    uint64_t v137 = (void *)v187;
  }

  swift_bridgeObjectRelease();
  sub_100041BA0((uint64_t)v196);
  sub_10000ADB0();
  *(void *)&__int128 v187 = v137;
  sub_1000119E4();
  sub_1000428F8();
  sub_1000428F8();
  sub_100011A3C(v157);
  sub_100011A3C(a3);
  sub_1000119E4();
  uint64_t v143 = (os_log_s *)sub_100041BD0();
  os_log_type_t v144 = static os_log_type_t.debug.getter();
  if (sub_100041C8C(v144))
  {
    uint64_t v145 = sub_10000AE10(32LL);
    uint64_t v184 = sub_10000AE10(64LL);
    *(void *)&__int128 v187 = v184;
    *(_DWORD *)uint64_t v145 = 134218498;
    if (v128)
    {
      if (v120 < 0) {
        uint64_t v53 = v120;
      }
      else {
        uint64_t v53 = v120 & 0xFFFFFFFFFFFFFF8LL;
      }
      sub_1000119E4();
      uint64_t v146 = sub_100028060();
      sub_10001BC70();
    }

    else
    {
      uint64_t v146 = *(void *)((v120 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    sub_10001BC70();
    *(void *)&v186[0] = v146;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v186, (char *)v186 + 8, v145 + 4, v145 + 12);
    sub_10001BC70();
    *(_WORD *)(v145 + 12) = 2080;
    sub_10001BD0C();
    uint64_t v147 = sub_100041CA4((uint64_t *)&v187, (uint64_t)v195);
    sub_100041BB8(v147, v148, v149, v145 + 22);
    sub_100027E5C(v157);
    *(_WORD *)(v145 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v150 = sub_10000DE60(a2, a3, (uint64_t *)&v187);
    sub_100041BB8(v150, v151, v152, v145 + 32);
    sub_100027E5C(a3);
    _os_log_impl( (void *)&_mh_execute_header,  v143,  v144,  "Caching AssistantIntent %ld phrases for %s:%s",  (uint8_t *)v145,  0x20u);
    sub_100041C80();
    sub_10000AD78(v184);
    sub_10000AD78(v145);
  }

  else
  {

    sub_10001191C(a3);
    sub_10001191C(v157);
    sub_10001191C(v120);
  }

  sub_100008D74(v172, *(void *)(v180 + 136));
  sub_100041C98();
  sub_100051688();
  if (v53)
  {
    sub_100041CB0();
    sub_100041CB0();
    unint64_t v153 = (os_log_s *)sub_100041BD0();
    os_log_type_t v154 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v153, v154))
    {
      id v155 = (uint8_t *)sub_10000AE10(12LL);
      id v185 = (void *)sub_10000AE10(8LL);
      *(_DWORD *)id v155 = 138412290;
      sub_100041CB0();
      uint64_t v156 = _swift_stdlib_bridgeErrorToNSError(v53);
      *(void *)&__int128 v187 = v156;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, (char *)&v187 + 8, v155 + 4, v155 + 12);
      *id v185 = v156;
      sub_100041BE4();
      sub_100041BE4();
      _os_log_impl( (void *)&_mh_execute_header,  v153,  v154,  "Failed to update cached AssistantIntent example phrases: %@",  v155,  0xCu);
      sub_100008DB0((uint64_t *)&unk_100132620);
      swift_arrayDestroy(v185, 1LL);
      sub_10000AD78((uint64_t)v185);
      sub_10000AD78((uint64_t)v155);
    }

    else
    {

      sub_100041BE4();
      sub_100041BE4();
    }

    sub_100041BE4();
  }

  sub_100041958(v174);
LABEL_9:
  sub_10001DEE8();
}

uint64_t type metadata accessor for AssistantIntentPhraseInterpolator()
{
  return objc_opt_self(&OBJC_CLASS____TtC10LinkDaemon33AssistantIntentPhraseInterpolator);
}

uint64_t sub_100041924(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100041958(uint64_t a1)
{
  uint64_t v2 = _s7BuilderVMa(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100041994(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  for (unint64_t i = (void **)(a1 + 48); ; i += 3)
  {
    uint64_t v8 = (uint64_t)*(i - 2);
    uint64_t v7 = (uint64_t)*(i - 1);
    uint64_t v9 = *i;
    uint64_t v10 = (void *)*a3;
    swift_bridgeObjectRetain();
    id v11 = v9;
    unint64_t v13 = sub_100015F98(v8, v7);
    uint64_t v14 = v10[2];
    BOOL v15 = (v12 & 1) == 0;
    uint64_t v16 = v14 + v15;
    if (__OFADD__(v14, v15)) {
      break;
    }
    char v17 = v12;
    if (v10[3] >= v16)
    {
      if ((a2 & 1) == 0)
      {
        sub_100008DB0(&qword_100130728);
        _NativeDictionary.copy()();
      }
    }

    else
    {
      sub_1000174FC(v16, a2 & 1);
      uint64_t v18 = sub_100015F98(v8, v7);
      if ((v17 & 1) != (v19 & 1)) {
        goto LABEL_18;
      }
      unint64_t v13 = v18;
    }

    uint64_t v20 = (void *)*a3;
    if ((v17 & 1) != 0)
    {
      id v21 = *(id *)(v20[7] + 8 * v13);
      swift_bridgeObjectRelease();

      uint64_t v22 = v20[7];
      *(void *)(v22 + 8 * v13) = v21;
    }

    else
    {
      v20[(v13 >> 6) + 8] |= 1LL << v13;
      os_log_type_t v23 = (uint64_t *)(v20[6] + 16 * v13);
      uint64_t *v23 = v8;
      v23[1] = v7;
      *(void *)(v20[7] + 8 * v13) = v11;
      uint64_t v24 = v20[2];
      BOOL v25 = __OFADD__(v24, 1LL);
      uint64_t v26 = v24 + 1;
      if (v25) {
        goto LABEL_17;
      }
      v20[2] = v26;
    }

    a2 = 1;
    if (!--v4)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }

  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(type metadata for String);
  __break(1u);
  return result;
}

void *sub_100041B64(void *a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for AssistantIntentPhraseInterpolator.ApplicationPlaceholder()
{
  return &type metadata for AssistantIntentPhraseInterpolator.ApplicationPlaceholder;
}

uint64_t sub_100041BA0@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(a1 - 256));
}

uint64_t sub_100041BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 240, v4 - 232, a3, a4);
}

uint64_t sub_100041BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v6 - 28sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 280, v5, v4, a4);
}

uint64_t sub_100041BD0()
{
  return Logger.logObject.getter();
}

uint64_t sub_100041BDC()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_100041BE4()
{
  return swift_errorRelease(v0);
}

void sub_100041BEC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_100041C00(uint64_t a1)
{
  *(void *)(v2 - 28sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v1;
  return specialized Array._endMutation()(a1);
}

uint64_t sub_100041C10()
{
  return sub_100011B44(v2, v1, v0);
}

uint64_t sub_100041C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 280, v5, v4, a4);
}

uint64_t sub_100041C30()
{
  return sub_10000AC58((void *)(v0 - 240));
}

void sub_100041C38()
{
}

BOOL sub_100041C48@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_100041C60()
{
  return sub_10008D6A8(*(void *)(v0 - 280));
}

uint64_t sub_100041C6C()
{
  return Logger.logObject.getter();
}

void *sub_100041C74()
{
  return sub_100008D74((void *)(v0 - 240), *(void *)(v0 - 216));
}

uint64_t sub_100041C80()
{
  return swift_arrayDestroy(v0, 2LL);
}

BOOL sub_100041C8C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

uint64_t sub_100041CA4@<X0>(uint64_t *a1@<X2>, uint64_t a2@<X8>)
{
  return sub_10000DE60(*(void *)(a2 - 256), v2, a1);
}

uint64_t sub_100041CB0()
{
  return swift_errorRetain(v0);
}

void *sub_100041CB8()
{
  return sub_100008D74(v0, *(void *)(v1 + 136));
}

void sub_100041CC4( id a1@<X4>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X3>, void *a6@<X8>)
{
  char v12 = &selRef_isLowPowerDeviceEnabled;
  if ([a1 value]
    || (id v16 = [a1 disabledReason]) == 0)
  {
    uint64_t v13 = 0LL;
    unint64_t v14 = 0xF000000000000000LL;
LABEL_3:
    id v15 = [a1 v12[18]];

    *a6 = a2;
    a6[1] = a3;
    a6[2] = a4;
    a6[3] = a5;
    a6[4] = v15;
    a6[5] = v13;
    a6[6] = v14;
    return;
  }

  id v22 = 0LL;
  id v21 = v16;
  id v17 =  [(id)objc_opt_self(NSKeyedArchiver) archivedDataWithRootObject:v16 requiringSecureCoding:1 error:&v22];
  id v18 = v22;
  if (v17)
  {
    uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
    unint64_t v14 = v19;

    char v12 = &selRef_isLowPowerDeviceEnabled;
    goto LABEL_3;
  }

  uint64_t v20 = v18;
  swift_bridgeObjectRelease(a5);
  swift_bridgeObjectRelease(a3);
  _convertNSErrorToError(_:)(v20);

  swift_willThrow();
}

id sub_100041E5C()
{
  uint64_t v1 = v0[4];
  if (v1 == 1) {
    return [(id)objc_opt_self(LNIntentEnablement) enabled];
  }
  if (v1)
  {
    _StringGuts.grow(_:)(49LL);
    swift_bridgeObjectRelease();
    v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    v9._object = (void *)0x80000001000F9FA0LL;
    String.append(_:)(v9);
    id result = (id)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000014LL,  0x80000001000F9F80LL,  "LinkDaemon/LNIntentEnablementRecord+Coding.swift",  48LL,  2LL,  48LL,  0);
    __break(1u);
  }

  else
  {
    unint64_t v3 = v0[6];
    if (v3 >> 60 == 15)
    {
      uint64_t v7 = 0LL;
    }

    else
    {
      uint64_t v4 = v0[5];
      sub_10000A1A0(0LL, &qword_100131120, &OBJC_CLASS___NSKeyedUnarchiver_ptr);
      uint64_t v5 = sub_10000A1A0(0LL, (unint64_t *)&qword_100131250, &OBJC_CLASS___LNStaticDeferredLocalizedString_ptr);
      sub_10000A280(v4, v3);
      uint64_t v7 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v5, v4, v3, v5);
      sub_100042040();
    }

    id v6 = [(id)objc_opt_self(LNIntentEnablement) disabledWithReason:v7];

    return v6;
  }

  return result;
}

uint64_t sub_100042040()
{
  return sub_10000A21C(v1, v0);
}

void sub_10004204C(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v8);
    sub_10001198C();
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v2)
  {
    id v11 = _swiftEmptyArrayStorage;
    sub_100045204();
    if (v2 < 0)
    {
      __break(1u);
    }

    else
    {
      for (uint64_t i = 0LL; i != v2; ++i)
      {
        if ((a1 & 0xC000000000000001LL) != 0) {
          id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        }
        else {
          id v4 = *(id *)(a1 + 8 * i + 32);
        }
        id v9 = v4;
        uint64_t v5 = sub_10000A1A0(0LL, &qword_100131E60, &OBJC_CLASS___INSpeakableString_ptr);
        sub_100047378((uint64_t)v10, (uint64_t)&v9, v5, (uint64_t)&type metadata for Any + 8);
        id v6 = v11;
        if ((sub_100047370() & 1) == 0)
        {
          sub_100047304();
          id v6 = v11;
        }

        unint64_t v7 = v6[2];
        if (v7 >= v6[3] >> 1)
        {
          sub_100047304();
          id v6 = v11;
        }

        uint64_t v6[2] = v7 + 1;
        sub_10000AC78(v10, &v6[4 * v7 + 4]);
      }
    }
  }

void *sub_1000421D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    id v11 = _swiftEmptyArrayStorage;
    sub_100045238();
    uint64_t v4 = a1 + 32;
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      sub_100008F24(v4, (uint64_t)v9);
      uint64_t v5 = sub_100008DB0(&qword_100131000);
      uint64_t v6 = sub_100008DB0(&qword_100130FF0);
      swift_dynamicCast(v10, v9, v5, v6, 7LL);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_100045238();
        uint64_t v2 = v11;
      }

      unint64_t v7 = v2[2];
      if (v7 >= v2[3] >> 1)
      {
        sub_100045238();
        uint64_t v2 = v11;
      }

      void v2[2] = v7 + 1;
      sub_100009EEC(v10, (uint64_t)&v2[5 * v7 + 4]);
      v4 += 40LL;
      --v1;
    }

    while (v1);
  }

  return v2;
}

void sub_100042310(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100047294();
    sub_100045204();
    uint64_t v3 = v9;
    uint64_t v4 = (uint64_t *)(v1 + 40);
    do
    {
      uint64_t v5 = *v4;
      v7[0] = *(v4 - 1);
      v7[1] = v5;
      swift_bridgeObjectRetain(v5);
      sub_100047378((uint64_t)v8, (uint64_t)v7, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Any + 8);
      if ((sub_100047370() & 1) == 0)
      {
        sub_100047304();
        uint64_t v3 = v9;
      }

      unint64_t v6 = *(void *)(v3 + 16);
      if (v6 >= *(void *)(v3 + 24) >> 1)
      {
        sub_100047304();
        uint64_t v3 = v9;
      }

      v4 += 2;
      *(void *)(v3 + 1sub_10000AC58(v0 + 6) = v6 + 1;
      sub_10000AC78(v8, (_OWORD *)(v3 + 32 * v6 + 32));
      --v2;
    }

    while (v2);
  }

  sub_10004727C();
}

void sub_1000423FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100047294();
    sub_1000453A4();
    uint64_t v3 = v10;
    uint64_t v4 = (uint64_t *)(v1 + 40);
    do
    {
      uint64_t v5 = *v4;
      v8[0] = *(v4 - 1);
      v8[1] = v5;
      swift_bridgeObjectRetain();
      uint64_t v6 = sub_100008DB0(&qword_100131978);
      sub_100047378((uint64_t)v9, (uint64_t)v8, (uint64_t)&type metadata for String, v6);
      if ((sub_100047370() & 1) == 0)
      {
        sub_1000453A4();
        uint64_t v3 = v10;
      }

      unint64_t v7 = *(void *)(v3 + 16);
      if (v7 >= *(void *)(v3 + 24) >> 1)
      {
        sub_1000453A4();
        uint64_t v3 = v10;
      }

      v4 += 2;
      *(void *)(v3 + 1sub_10000AC58(v0 + 6) = v7 + 1;
      sub_100047004((uint64_t)v9, v3 + 40 * v7 + 32);
      --v2;
    }

    while (v2);
  }

  sub_10004727C();
}

void sub_1000424F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LNBundleRecord(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    id v15 = _swiftEmptyArrayStorage;
    sub_100045690();
    unint64_t v7 = v15;
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    do
    {
      sub_10001B584(v8, (uint64_t)v5);
      id v15 = v7;
      unint64_t v10 = v7[2];
      if (v10 >= v7[3] >> 1)
      {
        sub_100045690();
        unint64_t v7 = v15;
      }

      uint64_t v13 = v2;
      unint64_t v14 = &off_100125860;
      id v11 = sub_10001AFA8(&v12);
      sub_10001B584((uint64_t)v5, (uint64_t)v11);
      void v7[2] = v10 + 1;
      sub_100009EEC(&v12, (uint64_t)&v7[5 * v10 + 4]);
      sub_100046F88((uint64_t)v5);
      v8 += v9;
      --v6;
    }

    while (v6);
  }

  sub_10000AD58();
}

void sub_100042634()
{
}

void sub_100042640()
{
}

void sub_10004264C()
{
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = *v1;
  uint64_t v6 = *(void *)(*v1 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  unint64_t v7 = v2;
  if (!sub_1000471D4() || v6 + v4 > *(void *)(v5 + 24) >> 1)
  {
    sub_1000472D0();
    uint64_t v5 = v7();
  }

  if (!*(void *)(v0 + 16))
  {
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  sub_100047178();
  if (v8 != v9)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v10 = sub_10004726C();
  sub_1000450F0(v10, v11);
  if (!v4)
  {
LABEL_11:
    sub_10001198C();
    *uint64_t v1 = v5;
    return;
  }

  sub_1000472B0();
  if (!v9)
  {
    *(void *)(v5 + 1sub_10000AC58(v0 + 6) = v12;
    goto LABEL_11;
  }

void sub_100042710()
{
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!sub_1000471D4() || (sub_1000472F8(), !(v6 ^ v4 | v5)))
  {
    sub_1000472D0();
    sub_1000140A0();
    uint64_t v2 = v7;
  }

  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  sub_100047178();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  sub_100044984();
  if (!v3)
  {
LABEL_11:
    sub_10001198C();
    *uint64_t v1 = v2;
    sub_10001BAF0();
    return;
  }

  sub_1000472B0();
  if (!v4)
  {
    *(void *)(v2 + 1sub_10000AC58(v0 + 6) = v8;
    goto LABEL_11;
  }

void sub_1000427B8()
{
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!sub_1000471D4() || (sub_1000472F8(), !(v6 ^ v4 | v5)))
  {
    sub_1000472D0();
    sub_1000141B8();
    uint64_t v2 = v7;
  }

  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  sub_100047178();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  sub_10004726C();
  sub_1000445A4();
  if (!v3)
  {
LABEL_11:
    sub_10001198C();
    *uint64_t v1 = v2;
    sub_10001BAF0();
    return;
  }

  sub_1000472B0();
  if (!v4)
  {
    *(void *)(v2 + 1sub_10000AC58(v0 + 6) = v8;
    goto LABEL_11;
  }

void sub_10004284C()
{
}

void sub_100042858()
{
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!sub_1000471D4() || (sub_1000472F8(), !(v6 ^ v4 | v5)))
  {
    sub_1000472D0();
    sub_10001454C();
    uint64_t v2 = v7;
  }

  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  sub_100047178();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  sub_10004726C();
  sub_100044C64();
  if (!v3)
  {
LABEL_11:
    sub_10001198C();
    *uint64_t v1 = v2;
    sub_10001BAF0();
    return;
  }

  sub_1000472B0();
  if (!v4)
  {
    *(void *)(v2 + 1sub_10000AC58(v0 + 6) = v8;
    goto LABEL_11;
  }

void sub_1000428EC()
{
}

void sub_1000428F8()
{
  uint64_t v2 = v1;
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v17 = v1;
    }
    else {
      uint64_t v17 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v17);
    sub_10001198C();
  }

  else
  {
    uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v4 = *v0;
  if ((unint64_t)*v0 >> 62)
  {
    if (v4 < 0) {
      uint64_t v18 = *v0;
    }
    else {
      uint64_t v18 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1000119E4();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
    goto LABEL_30;
  }

  uint64_t v4 = *v0;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v0);
  *uint64_t v0 = v4;
  uint64_t v5 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000LL) == 0 && (v4 & 0x4000000000000000LL) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_16;
    }
    uint64_t v5 = 1LL;
  }

  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    sub_1000119E4();
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1LL, v4);
    swift_bridgeObjectRelease();
    *uint64_t v0 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
LABEL_16:
    uint64_t v10 = sub_10004733C(v8);
    sub_1000467AC(v10, v11, v2);
    if (v12 >= v3) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0) {
      uint64_t v19 = v4;
    }
    else {
      uint64_t v19 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1000119E4();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease();
  }

  if (v12 < 1) {
    goto LABEL_20;
  }
  sub_100047398();
  if (!v15)
  {
    *(void *)(v13 + 1sub_10000AC58(v0 + 6) = v14;
LABEL_20:
    uint64_t v16 = swift_bridgeObjectRelease();
    sub_100047214(v16);
    return;
  }

  __break(1u);
}

void sub_100042A6C()
{
}

void sub_100042A78()
{
}

void sub_100042A84()
{
  uint64_t v3 = v2;
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v4 = v1;
    }
    else {
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter(v4);
    sub_1000473AC();
  }

  else
  {
    uint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v5 = *v0;
  if ((unint64_t)*v0 >> 62)
  {
    if (v5 < 0) {
      uint64_t v18 = *v0;
    }
    else {
      uint64_t v18 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10001C064();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v7 = v6 + v4;
  if (__OFADD__(v6, v4))
  {
    __break(1u);
    goto LABEL_30;
  }

  uint64_t v5 = *v0;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v0);
  *uint64_t v0 = v5;
  uint64_t v6 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000LL) == 0 && (v5 & 0x4000000000000000LL) == 0)
  {
    uint64_t v9 = v5 & 0xFFFFFFFFFFFFFF8LL;
    if (v7 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_16;
    }
    uint64_t v6 = 1LL;
  }

  uint64_t v10 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    if (v10 <= v7) {
      uint64_t v10 = v7;
    }
    sub_10001C064();
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v6, v10, 1LL, v5);
    swift_bridgeObjectRelease(*v0);
    *uint64_t v0 = v5;
    uint64_t v9 = v5 & 0xFFFFFFFFFFFFFF8LL;
LABEL_16:
    uint64_t v11 = sub_10004733C(v9);
    uint64_t v12 = v3(v11);
    if (v13 >= v4) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v5 < 0) {
      uint64_t v19 = v5;
    }
    else {
      uint64_t v19 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10001C064();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease(v5);
  }

  if (v13 < 1) {
    goto LABEL_20;
  }
  sub_100047398();
  if (!v16)
  {
    *(void *)(v14 + 1sub_10000AC58(v0 + 6) = v15;
LABEL_20:
    uint64_t v17 = swift_bridgeObjectRelease(v12);
    sub_100047214(v17);
    return;
  }

  __break(1u);
}

void sub_100042BF8()
{
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!sub_1000471D4() || (sub_1000472F8(), !(v6 ^ v4 | v5)))
  {
    sub_1000472D0();
    sub_1000146C8();
    uint64_t v2 = v7;
  }

  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  sub_100047178();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  sub_10004726C();
  sub_100044E2C();
  if (!v3)
  {
LABEL_11:
    sub_10001198C();
    *uint64_t v1 = v2;
    sub_10001BAF0();
    return;
  }

  sub_1000472B0();
  if (!v4)
  {
    *(void *)(v2 + 1sub_10000AC58(v0 + 6) = v8;
    goto LABEL_11;
  }

void sub_100042C90(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16LL);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!swift_isUniquelyReferenced_nonNull_native(*v1) || (uint64_t v6 = *(void *)(v3 + 24) >> 1, v6 < v4 + v2))
  {
    sub_1000146C8();
    uint64_t v3 = v7;
    uint64_t v6 = *(void *)(v7 + 24) >> 1;
  }

  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = v6 - v8;
  sub_100039A94(v89, (void *)(v3 + 104 * v8 + 32), v6 - v8, a1);
  if (v10 < v2) {
    goto LABEL_13;
  }
  if (v10)
  {
    uint64_t v13 = *(void *)(v3 + 16);
    BOOL v14 = __OFADD__(v13, v10);
    uint64_t v15 = v13 + v10;
    if (v14)
    {
      __break(1u);
      goto LABEL_49;
    }

    *(void *)(v3 + 1sub_10000AC58(v0 + 6) = v15;
  }

  if (v10 != v9)
  {
    uint64_t v16 = v89[0];
    goto LABEL_11;
  }

LABEL_52:
    unint64_t v17 = (v55 - 1) & v55;
    unint64_t v18 = __clz(__rbit64(v55)) + (v39 << 6);
    int64_t v84 = v39;
    goto LABEL_16;
  }

  int64_t v84 = v90;
  uint64_t v87 = *(void *)(v3 + 16);
  unint64_t v17 = (v91 - 1) & v91;
  unint64_t v18 = __clz(__rbit64(v91)) | (v90 << 6);
LABEL_16:
  uint64_t v19 = (int64_t *)(*(void *)(v65 + 48) + 104 * v18);
  int64_t v20 = v19[1];
  int64_t v22 = v19[2];
  int64_t v21 = v19[3];
  int64_t v23 = v19[5];
  int64_t v24 = v19[6];
  int64_t v80 = v19[7];
  int64_t v82 = *v19;
  int64_t v25 = v19[10];
  int64_t v75 = v19[8];
  int64_t v78 = v19[9];
  int64_t v26 = v19[12];
  unint64_t v67 = (void *)v19[4];
  uint64_t v71 = (void *)v19[11];
  swift_bridgeObjectRetain();
  sub_1000119E4();
  id v63 = v67;
  int64_t v68 = v24;
  int64_t v27 = v75;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v58 = v71;
  int64_t v72 = v26;
  swift_bridgeObjectRetain();
  if (!v20) {
    goto LABEL_55;
  }
  int64_t v28 = (int64_t)v58;
  int64_t v61 = (unint64_t)(v60 + 64) >> 6;
  int64_t v11 = v84;
  uint64_t v29 = v87;
  int64_t v31 = v80;
  int64_t v30 = v82;
  int64_t v33 = v68;
  int64_t v32 = v72;
  int64_t v34 = v78;
  int64_t v35 = (int64_t)v63;
  while (1)
  {
    uint64_t v66 = *(void *)(v3 + 24) >> 1;
    if (v66 < v29 + 1)
    {
      int64_t v70 = v33;
      int64_t v74 = v32;
      int64_t v64 = v35;
      int64_t v59 = v28;
      uint64_t v86 = v11;
      int64_t v88 = v25;
      uint64_t v50 = v29;
      int64_t v51 = v30;
      int64_t v77 = v27;
      int64_t v52 = v31;
      int64_t v53 = v34;
      sub_1000146C8();
      int64_t v28 = v59;
      int64_t v34 = v53;
      int64_t v11 = v86;
      int64_t v25 = v88;
      int64_t v31 = v52;
      int64_t v32 = v74;
      int64_t v27 = v77;
      int64_t v30 = v51;
      uint64_t v29 = v50;
      uint64_t v3 = v54;
      int64_t v35 = v64;
      int64_t v33 = v70;
      uint64_t v66 = *(void *)(v3 + 24) >> 1;
    }

    if (v29 < v66) {
      break;
    }
LABEL_46:
    *(void *)(v3 + 1sub_10000AC58(v0 + 6) = v29;
    if (!v20) {
      goto LABEL_55;
    }
  }

  while (1)
  {
    unint64_t v36 = (int64_t *)(v3 + 32 + 104 * v29);
    *unint64_t v36 = v30;
    v36[1] = v20;
    uint64_t v36[2] = v22;
    v36[3] = v21;
    v36[4] = v35;
    v36[5] = v23;
    v36[6] = v33;
    v36[7] = v31;
    v36[8] = v27;
    v36[9] = v34;
    v36[10] = v25;
    v36[11] = v28;
    uint64_t v37 = v29 + 1;
    v36[12] = v32;
    uint64_t v87 = v37;
    if (!v17) {
      break;
    }
    uint64_t v76 = (v17 - 1) & v17;
    int64_t v85 = v11;
    unint64_t v38 = __clz(__rbit64(v17)) | (v11 << 6);
LABEL_33:
    uint64_t v42 = (int64_t *)(*(void *)(v65 + 48) + 104 * v38);
    int64_t v20 = v42[1];
    int64_t v21 = v42[3];
    uint64_t v43 = (void *)v42[4];
    int64_t v69 = v42[5];
    int64_t v73 = v42[2];
    int64_t v33 = v42[6];
    int64_t v81 = v42[7];
    int64_t v83 = *v42;
    int64_t v27 = v42[8];
    int64_t v79 = v42[9];
    int64_t v25 = v42[10];
    uint64_t v44 = (void *)v42[11];
    int64_t v45 = v42[12];
    swift_bridgeObjectRetain();
    sub_1000119E4();
    id v46 = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v47 = v44;
    sub_10001C064();
    int64_t v28 = (int64_t)v44;
    int64_t v35 = (int64_t)v43;
    int64_t v32 = v45;
    int64_t v34 = v79;
    int64_t v31 = v81;
    int64_t v30 = v83;
    int64_t v11 = v85;
    int64_t v23 = v69;
    int64_t v22 = v73;
    uint64_t v29 = v87;
    if (v20) {
      BOOL v48 = v87 < v66;
    }
    else {
      BOOL v48 = 0;
    }
    unint64_t v17 = v76;
    if (!v48) {
      goto LABEL_46;
    }
  }

  int64_t v39 = v11 + 1;
  if (!__OFADD__(v11, 1LL))
  {
    if (v39 >= v61) {
      goto LABEL_54;
    }
    unint64_t v40 = *(void *)(v62 + 8 * v39);
    if (v40) {
      goto LABEL_32;
    }
    int64_t v41 = v11 + 2;
    if (v11 + 2 >= v61) {
      goto LABEL_54;
    }
    unint64_t v40 = *(void *)(v62 + 8 * v41);
    if (!v40)
    {
      if (v11 + 3 >= v61) {
        goto LABEL_54;
      }
      unint64_t v40 = *(void *)(v62 + 8 * (v11 + 3));
      if (v40)
      {
        int64_t v39 = v11 + 3;
        goto LABEL_32;
      }

      int64_t v41 = v11 + 4;
      if (v11 + 4 >= v61) {
        goto LABEL_54;
      }
      unint64_t v40 = *(void *)(v62 + 8 * v41);
      if (!v40)
      {
        int64_t v39 = v11 + 5;
        if (v11 + 5 >= v61) {
          goto LABEL_54;
        }
        unint64_t v40 = *(void *)(v62 + 8 * v39);
        if (!v40)
        {
          int64_t v49 = v11 + 6;
          while (v49 < v61)
          {
            unint64_t v40 = *(void *)(v62 + 8 * v49++);
            if (v40)
            {
              int64_t v39 = v49 - 1;
              goto LABEL_32;
            }
          }

  __break(1u);
  return result;
}

      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
  }

  else
  {
    sub_10000C218((uint64_t)v23, &qword_100131978);
  }

  sub_1000D4A80(v6, (uint64_t)v23);
  if (v24)
  {
    uint64_t v12 = sub_100008DB0(&qword_100131980);
    if ((swift_dynamicCast(&v21, v23, v12, &type metadata for String, 6LL) & 1) != 0)
    {
      uint64_t v6 = *((void *)&v21 + 1);
      uint64_t v4 = v21;
      swift_beginAccess(v2 + 2, v23, 0LL, 0LL);
      if (a2 >= (uint64_t)0xFFFFFFFF80000000LL)
      {
        if (a2 <= 0x7FFFFFFF)
        {
          uint64_t v2 = (sqlite3_stmt **)v2[2];
          if (qword_1001345F0 == -1)
          {
LABEL_30:
            uint64_t v13 = (void (__cdecl *)(void *))qword_100135CF8;
            BOOL v14 = String.utf8CString.getter(v4, v6);
            swift_bridgeObjectRelease(v6);
            sqlite3_bind_text((sqlite3_stmt *)v2, a2, (const char *)(v14 + 32), -1, v13);
            return swift_release(v14);
          }

void sub_100043258()
{
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!sub_1000471D4() || (sub_1000472F8(), !(v6 ^ v4 | v5)))
  {
    sub_1000472D0();
    sub_100014280();
    uint64_t v2 = v7;
  }

  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  uint64_t v8 = (*(void *)(v2 + 24) >> 1) - *(void *)(v2 + 16);
  uint64_t v9 = type metadata accessor for LNAppShortcutParameterRecord(0LL);
  if (v8 < v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  sub_100044B04( v0 + ((*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL)),  v3);
  if (!v3)
  {
LABEL_11:
    sub_10001198C();
    *uint64_t v1 = v2;
    sub_10001BAF0();
    return;
  }

  sub_1000472B0();
  if (!v4)
  {
    *(void *)(v2 + 1sub_10000AC58(v0 + 6) = v10;
    goto LABEL_11;
  }

void sub_100043324()
{
}

void sub_100043338()
{
}

void LinkDaemon.entryPoints.getter()
{
  uint64_t v0 = sub_10000C254((uint64_t)&unk_100124010, 32LL);
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = sub_100043A4C;
  *(void *)(v0 + 2sub_10000AC58(v0 + 4) = 0LL;
  uint64_t v1 = sub_100008DB0(&qword_100131D98);
  sub_10000C254(v1, 57LL);
  sub_100044048(1, (uint64_t)sub_1000470F0, v0);
  uint64_t v3 = v2;
  uint64_t v4 = sub_10000C254((uint64_t)&unk_100124038, 32LL);
  *(void *)(v4 + 1sub_10000AC58(v0 + 6) = sub_100043B30;
  *(void *)(v4 + 2sub_10000AC58(v0 + 4) = 0LL;
  uint64_t v5 = sub_100008DB0(&qword_100131DA0);
  uint64_t v6 = sub_10000C254(v5, 57LL);
  sub_100047320(v6, (uint64_t)sub_100046EF0);
  uint64_t v8 = v7;
  uint64_t v9 = sub_100008DB0(&qword_100130FE8);
  uint64_t inited = swift_initStackObject(v9, v60);
  *(_OWORD *)(inited + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
  uint64_t v11 = sub_100008DB0(&qword_100131DA8);
  *(void *)(inited + 5sub_10000AC58(v0 + 6) = v11;
  *(void *)(inited + 6sub_10000AC58(v0 + 4) = &off_100126600;
  uint64_t v12 = sub_10000C254((uint64_t)&unk_100124060, 32LL);
  *(void *)(v12 + 1sub_10000AC58(v0 + 6) = sub_100046EF8;
  *(void *)(v12 + 2sub_10000AC58(v0 + 4) = v3;
  uint64_t v13 = sub_100008DB0(&qword_100131DB0);
  sub_10000C254(v13, 57LL);
  sub_100047238();
  sub_100044048(0, (uint64_t)sub_1000470F0, v12);
  uint64_t v14 = sub_1000471F0(v11);
  uint64_t v15 = sub_100047244( v14,  &qword_100130208,  (void **)&qword_1001354C0,  (uint64_t *)algn_1001354C8,  (uint64_t)sub_10005A6C4);
  sub_100047164();
  *(void *)(inited + 32) = v15;
  uint64_t v16 = sub_100008DB0(&qword_100130FF8);
  uint64_t v17 = swift_initStackObject(v16, v59);
  *(_OWORD *)(v17 + 1sub_10000AC58(v0 + 6) = xmmword_1000F57D0;
  uint64_t v18 = sub_10001C1C4();
  uint64_t v19 = sub_100047354(v18);
  sub_100047360();
  swift_defaultActor_initialize(v19);
  *(void *)(v19 + 112) = v3;
  *(void *)(v17 + 5sub_10000AC58(v0 + 6) = v18;
  *(void *)(v17 + 6sub_10000AC58(v0 + 4) = sub_10004716C(&qword_100131DC0);
  *(void *)(v17 + 32) = v19;
  uint64_t v20 = sub_10001C1C4();
  *(void *)(v17 + 9sub_10000AC58(v0 + 6) = v20;
  *(void *)(v17 + 10sub_10000AC58(v0 + 4) = sub_10004716C(&qword_100131DD0);
  uint64_t v21 = sub_10000C254((uint64_t)&unk_100124088, 32LL);
  *(void *)(v21 + 1sub_10000AC58(v0 + 6) = sub_100046EF8;
  *(void *)(v21 + 2sub_10000AC58(v0 + 4) = v3;
  sub_10000C254(v13, 57LL);
  sub_100047238();
  sub_100044048(0, (uint64_t)sub_1000470F0, v21);
  uint64_t v23 = v22;
  uint64_t v24 = sub_100047354(v20);
  swift_defaultActor_initialize(v24);
  *(void *)(v24 + 112) = v23;
  sub_100047164();
  *(void *)(v17 + 72) = v24;
  uint64_t v25 = swift_initStackObject(v16, v58);
  *(_OWORD *)(v25 + 1sub_10000AC58(v0 + 6) = xmmword_1000F57D0;
  *(void *)(v25 + 5sub_10000AC58(v0 + 6) = sub_10001C1C4();
  *(void *)(v25 + 6sub_10000AC58(v0 + 4) = sub_10004716C(&qword_100131DE0);
  uint64_t v26 = sub_10000C254((uint64_t)&unk_1001240B0, 32LL);
  *(void *)(v26 + 1sub_10000AC58(v0 + 6) = sub_100046F10;
  *(void *)(v26 + 2sub_10000AC58(v0 + 4) = v3;
  uint64_t v27 = sub_100008DB0(&qword_100131DE8);
  sub_10000C254(v27, 57LL);
  uint64_t v28 = sub_100047238();
  sub_100047250(v28, (uint64_t)sub_1000470F0);
  sub_1000472BC();
  sub_100043F6C(v26, (void *)0xD00000000000001FLL, 0x80000001000F9FC0LL);
  uint64_t v30 = v29;
  sub_100047164();
  *(void *)(v25 + 32) = v30;
  *(void *)(v25 + 9sub_10000AC58(v0 + 6) = sub_10001C1C4();
  *(void *)(v25 + 10sub_10000AC58(v0 + 4) = sub_10004716C(&qword_100131DF8);
  uint64_t v31 = sub_10000C254((uint64_t)&unk_1001240D8, 32LL);
  *(void *)(v31 + 1sub_10000AC58(v0 + 6) = sub_100046F28;
  *(void *)(v31 + 2sub_10000AC58(v0 + 4) = v8;
  uint64_t v32 = sub_100008DB0(&qword_100131E00);
  uint64_t v33 = sub_10000C254(v32, 57LL);
  sub_10004738C();
  sub_100044048(0, (uint64_t)sub_1000470F0, v31);
  sub_1000472BC();
  sub_100043F6C(v33, (void *)0xD000000000000020LL, 0x80000001000F99D0LL);
  uint64_t v35 = v34;
  sub_10001BB08();
  *(void *)(v25 + 72) = v35;
  uint64_t v36 = swift_initStackObject(v16, v57);
  *(_OWORD *)(v36 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5FF0;
  uint64_t v37 = sub_100008DB0(&qword_100131E08);
  sub_1000471F0(v37);
  uint64_t v38 = sub_100047360();
  int64_t v39 = sub_10004411C(v38, &qword_100130340, (void **)&qword_100135888, &qword_100135890, (uint64_t)sub_10009B364);
  *(void *)(v36 + 5sub_10000AC58(v0 + 6) = v37;
  *(void *)(v36 + 6sub_10000AC58(v0 + 4) = sub_100046FC4(&qword_100131E10, &qword_100131E08, (uint64_t)&unk_1000F7620);
  *(void *)(v36 + 32) = v39;
  uint64_t v40 = sub_10001C1C4();
  *(void *)(v36 + 9sub_10000AC58(v0 + 6) = v40;
  *(void *)(v36 + 10sub_10000AC58(v0 + 4) = sub_10004716C(&qword_100131E20);
  uint64_t v41 = sub_10000C254((uint64_t)&unk_100124100, 32LL);
  *(void *)(v41 + 1sub_10000AC58(v0 + 6) = sub_100046F40;
  *(void *)(v41 + 2sub_10000AC58(v0 + 4) = v8;
  uint64_t v42 = sub_100008DB0(&qword_100131E28);
  sub_10000C254(v42, 57LL);
  uint64_t v43 = sub_10004738C();
  sub_100047250(v43, (uint64_t)sub_100046F58);
  uint64_t v44 = sub_1000471F0(v40);
  int64_t v45 = sub_100047244(v44, &qword_100130120, (void **)&qword_100135238, &qword_100135240, (uint64_t)sub_1000294AC);
  sub_10001BB08();
  *(void *)(v36 + 72) = v45;
  uint64_t v46 = sub_10001C1C4();
  *(void *)(v36 + 13sub_10000AC58(v0 + 6) = v46;
  *(void *)(v36 + 14sub_10000AC58(v0 + 4) = sub_10004716C(&qword_100131E38);
  uint64_t v47 = sub_10000C254((uint64_t)&unk_100124128, 32LL);
  *(void *)(v47 + 1sub_10000AC58(v0 + 6) = sub_100046F60;
  *(void *)(v47 + 2sub_10000AC58(v0 + 4) = v3;
  uint64_t v48 = sub_100008DB0(&qword_100131E40);
  sub_10000C254(v48, 57LL);
  uint64_t v49 = sub_100047238();
  sub_100047250(v49, (uint64_t)sub_1000470F0);
  uint64_t v50 = sub_1000471F0(v46);
  int64_t v51 = sub_100047244( v50,  &qword_1001301D8,  (void **)&qword_100135390,  (uint64_t *)algn_100135398,  (uint64_t)sub_100048BD0);
  sub_100047164();
  *(void *)(v36 + 112) = v51;
  uint64_t v52 = sub_10001C1C4();
  *(void *)(v36 + 17sub_10000AC58(v0 + 6) = v52;
  *(void *)(v36 + 18sub_10000AC58(v0 + 4) = sub_10004716C(&qword_100131E50);
  uint64_t v53 = sub_10000C254((uint64_t)&unk_100124150, 32LL);
  *(void *)(v53 + 1sub_10000AC58(v0 + 6) = sub_100043F28;
  *(void *)(v53 + 2sub_10000AC58(v0 + 4) = 0LL;
  uint64_t v54 = sub_100008DB0(&qword_100131E58);
  uint64_t v55 = sub_10000C254(v54, 57LL);
  sub_100047320(v55, (uint64_t)sub_1000470F0);
  uint64_t v56 = sub_1000471F0(v52);
  *(void *)(v36 + 152) = sub_100047244( v56,  &qword_100130388,  (void **)&qword_100135A78,  &qword_100135A80,  (uint64_t)sub_1000BC228);
  sub_100047380();
  sub_100047380();
  sub_1000421D8(v17);
  swift_bridgeObjectRelease(v17);
  sub_10004264C();
  sub_100047164();
  sub_10001BB08();
  sub_10000AD58();
}

void sub_100043A4C(void *a1@<X8>)
{
  if (qword_100130328 != -1) {
    swift_once(&qword_100130328, sub_100090454);
  }
  memcpy(__dst, &qword_100135810, sizeof(__dst));
  uint64_t v3 = __dst[1];
  uint64_t v4 = __dst[2];
  uint64_t v5 = __dst[3];
  uint64_t v6 = __dst[5];
  uint64_t v7 = __dst[7];
  uint64_t v18 = __dst[8];
  objc_allocWithZone((Class)type metadata accessor for Registry(0LL));
  swift_retain(v3);
  sub_100047094(v4, v5);
  swift_retain(v6);
  swift_retain(v7);
  sub_1000470A4(&v18);
  sub_1000915E0( (uint64_t)__dst,  v8,  v9,  v10,  v11,  v12,  v13,  v14,  v16,  __dst[0],  __dst[1],  __dst[2],  __dst[3],  __dst[4],  __dst[5],  __dst[6],  __dst[7],  __dst[8],  __dst[9],  v18);
  if (!v1) {
    *a1 = v15;
  }
}

uint64_t sub_100043B30@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  sub_100009E60((uint64_t)v4, 1LL, 1LL, v5);
  uint64_t v6 = type metadata accessor for TranscriptActionRecordStreamManager(0LL);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  uint64_t result = sub_10002F878((uint64_t)v4);
  *a1 = result;
  return result;
}

id sub_100043BCC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ApplicationService();
  swift_allocObject(v4, 128LL, 15LL);
  uint64_t v5 = swift_retain(a1);
  id result = sub_10005A744(v5, 0LL);
  *a2 = result;
  return result;
}

uint64_t sub_100043C2C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t updated = type metadata accessor for UpdateRegistryService();
  uint64_t v5 = swift_allocObject(updated, 120LL, 15LL);
  swift_retain(a1);
  uint64_t result = swift_defaultActor_initialize(v5);
  *(void *)(v5 + 112) = a1;
  *a2 = v5;
  return result;
}

uint64_t sub_100043C8C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_100043CE8();
  uint64_t v3 = type metadata accessor for PruneTranscriptService();
  uint64_t v4 = swift_allocObject(v3, 120LL, 15LL);
  uint64_t result = swift_defaultActor_initialize(v4);
  *(void *)(v4 + 112) = v2;
  *a1 = v4;
  return result;
}

uint64_t sub_100043CE8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 16);
  swift_retain(v0);
  [v2 lock];
  uint64_t v3 = swift_beginAccess(v0 + 48, v12, 1LL, 0LL);
  uint64_t v4 = *(void *)(v0 + 48);
  int v5 = *(unsigned __int8 *)(v0 + 56);
  if (v5 == 255)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(v0 + 24))(&v13, v3);
    uint64_t v7 = v13;
    char v6 = v14;
    uint64_t v8 = *(void *)(v1 + 48);
    *(void *)(v1 + 48) = v13;
    unsigned __int8 v9 = *(_BYTE *)(v1 + 56);
    *(_BYTE *)(v1 + 5sub_10000AC58(v0 + 6) = v6;
    sub_100047064(v7, v6);
    sub_100047070(v8, v9);
  }

  else
  {
    char v6 = v5 & 1;
    uint64_t v7 = *(void *)(v0 + 48);
  }

  sub_10004704C(v4, v5);
  [v2 unlock];
  swift_release(v1);
  if ((v6 & 1) == 0) {
    return v7;
  }
  uint64_t v11 = sub_100008DB0(&qword_100131F78);
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)(v11, v11);
  __break(1u);
  return result;
}

id sub_100043DF0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = sub_100043CE8();
  uint64_t v3 = sub_100008DB0(&qword_100131F70);
  uint64_t v4 = swift_allocObject(v3, 72LL, 7LL);
  *(_OWORD *)(v4 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
  if (qword_1001302F8 != -1) {
    swift_once(&qword_1001302F8, sub_10008BF54);
  }
  int v5 = (void *)qword_1001357E0;
  *(void *)(v4 + 5sub_10000AC58(v0 + 6) = &type metadata for NotifyingTranscriptObserver;
  *(void *)(v4 + 6sub_10000AC58(v0 + 4) = &off_100125760;
  *(void *)(v4 + 32) = v5;
  id v6 = objc_allocWithZone((Class)type metadata accessor for Transcript());
  id v7 = v5;
  id result = sub_100028C70(v2, v4);
  *a1 = result;
  return result;
}

id sub_100043EC8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id v4 = objc_allocWithZone((Class)type metadata accessor for SuggestedActionsService());
  uint64_t v5 = swift_retain(a1);
  id result = sub_100048AD0(v5, (uint64_t)&unk_1001321F0, 0LL);
  *a2 = result;
  return result;
}

id sub_100043F28@<X0>(void *a1@<X8>)
{
  id result = [objc_allocWithZone((Class)type metadata accessor for ExtensionService()) init];
  *a1 = result;
  return result;
}

void sub_100043F6C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = v3;
  swift_defaultActor_initialize(v3);
  uint64_t v8 = v3 + qword_1001321F8;
  uint64_t v9 = sub_100008DB0(&qword_100131F80);
  sub_100009E60(v8, 1LL, 1LL, v9);
  *(void *)(v6 + qword_10013220sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = 0LL;
  *(void *)(v6 + qword_1001353Asub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = a1;
  sub_10000A1A0(0LL, &qword_100131F88, &OBJC_CLASS___NSBackgroundActivityScheduler_ptr);
  swift_retain(a1);
  sub_10004424C(a2, a3, (SEL *)&selRef_initWithIdentifier_);
  *(void *)(v6 + 112) = v10;
  id v11 = v10;
  [v11 setPreregistered:1];

  sub_10001BB08();
  sub_10001BAF0();
}

void sub_100044048(char a1, uint64_t a2, uint64_t a3)
{
  id v7 = [objc_allocWithZone(NSLock) init];
  *(void *)(v3 + 48) = 0LL;
  *(_BYTE *)(v3 + 5sub_10000AC58(v0 + 6) = -1;
  *(_BYTE *)(v3 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = a1;
  *(void *)(v3 + 1sub_10000AC58(v0 + 6) = v7;
  *(void *)(v3 + 2sub_10000AC58(v0 + 4) = a2;
  *(void *)(v3 + 32) = a3;
  sub_10000AF74();
}

uint64_t sub_1000440A0(void (*a1)(uint64_t *__return_ptr))
{
  return v2;
}

uint64_t sub_1000440D4(void (*a1)(uint64_t *__return_ptr))
{
  return v2;
}

void *sub_10004411C(uint64_t a1, uint64_t *a2, void **a3, uint64_t *a4, uint64_t a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v5);
  swift_defaultActor_initialize(v5);
  sub_10000A1A0(0LL, &qword_100131F68, &OBJC_CLASS___NSXPCListener_ptr);
  uint64_t v12 = *a2;
  swift_retain(v5);
  if (v12 != -1) {
    swift_once(a2, a5);
  }
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  sub_10001C064();
  sub_10004424C(v13, v14, (SEL *)&selRef_initWithMachServiceName_);
  v5[14] = v15;
  v5[15] = a1;
  sub_100047360();
  sub_10001BB08();
  v21.receiver = v5;
  v21.super_class = ObjectType;
  uint64_t v16 = objc_msgSendSuper2(&v21, "init");
  uint64_t v17 = (void *)v16[14];
  uint64_t v18 = v16;
  [v17 setDelegate:v18];
  id v19 = v17;
  [v19 resume];

  sub_100047164();
  return v18;
}

void sub_10004424C(void *a1, uint64_t a2, SEL *a3)
{
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3));
  String._bridgeToObjectiveC()();
  sub_1000473AC();
  objc_msgSend(v6, *a3, a1);

  sub_10000AF74();
}

uint64_t sub_1000442AC(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10001BAA4();
    sub_10001BD58();
  }

  else
  {
    sub_100047228();
    unint64_t v7 = v5 + 8 * v6;
    if (v2 + 8 * v6 > v5)
    {
      BOOL v8 = v7 >= v2;
      BOOL v9 = v7 == v2;
    }

    else
    {
      BOOL v8 = 0;
      BOOL v9 = 0;
    }

    if (v9 || !v8)
    {
      sub_10000A1A0(0LL, v3, v4);
      uint64_t v10 = sub_100047120();
      return sub_1000470F4(v10);
    }

    sub_10001BAA4();
    sub_10001BD48();
  }

  uint64_t result = sub_10001BAB8(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  __break(1u);
  return result;
}

uint64_t sub_10004434C()
{
  if (v3 < 0)
  {
    sub_10001BAA4();
    sub_10001BD58();
  }

  else
  {
    unint64_t v4 = v0 + 32 * v1;
    if (v2 + 32 * v1 > v0)
    {
      BOOL v5 = v4 >= v2;
      BOOL v6 = v4 == v2;
    }

    else
    {
      BOOL v5 = 0;
      BOOL v6 = 0;
    }

    if (v6 || !v5) {
      return sub_10004715C(v2);
    }
    sub_10001BAA4();
    sub_10001BD48();
  }

  uint64_t result = sub_10001BAB8(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_1000443E4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (a3 + 24 * a2 <= a1 || a1 + 24 * a2 <= a3) {
      return swift_arrayInitWithCopy(a3);
    }
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_1000444B4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (a3 + 24 * a2 <= a1 || a1 + 24 * a2 <= a3)
    {
      sub_100008DB0(&qword_100131F38);
      return swift_arrayInitWithCopy(a3);
    }

    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_1000445A4()
{
  if (v3 < 0)
  {
    sub_10001BAA4();
    sub_10001BD58();
  }

  else
  {
    unint64_t v4 = v0 + 16 * v1;
    if (v2 + 16 * v1 > v0)
    {
      BOOL v5 = v4 >= v2;
      BOOL v6 = v4 == v2;
    }

    else
    {
      BOOL v5 = 0;
      BOOL v6 = 0;
    }

    if (v6 || !v5) {
      return sub_10004715C(v2);
    }
    sub_10001BAA4();
    sub_10001BD48();
  }

  uint64_t result = sub_10001BAB8(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_100044638(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10001BAA4();
    sub_10001BD58();
  }

  else
  {
    sub_1000471B4();
    if (!v5 && v4)
    {
      BOOL v4 = v3 >= v2;
      BOOL v5 = v3 == v2;
    }

    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }

    if (v5 || !v4)
    {
      sub_100008DB0(&qword_100130F60);
      uint64_t v6 = sub_100047120();
      return sub_1000470F4(v6);
    }

    sub_10001BAA4();
    sub_10001BD48();
  }

  uint64_t result = sub_10001BAB8(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_1000446C8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (a3 + 32 * a2 <= a1 || a1 + 32 * a2 <= a3)
    {
      sub_100008DB0(&qword_100131F08);
      return swift_arrayInitWithCopy(a3);
    }

    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_1000447B4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (a3 + 32 * a2 <= a1 || a1 + 32 * a2 <= a3) {
      return swift_arrayInitWithCopy(a3);
    }
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_100044880(uint64_t a1, uint64_t a2)
{
  return sub_1000442AC(a1, a2);
}

uint64_t sub_100044894(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (a3 + 48 * a2 <= a1 || a1 + 48 * a2 <= a3)
    {
      sub_100008DB0(&qword_100131F10);
      return swift_arrayInitWithCopy(a3);
    }

    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_100044984()
{
  if (v3 < 0)
  {
    sub_10001BAA4();
    sub_10001BD58();
  }

  else
  {
    unint64_t v4 = v0 + 24 * v1;
    if (v2 + 24 * v1 > v0)
    {
      BOOL v5 = v4 >= v2;
      BOOL v6 = v4 == v2;
    }

    else
    {
      BOOL v5 = 0;
      BOOL v6 = 0;
    }

    if (v6 || !v5) {
      return sub_10004715C(v2);
    }
    sub_10001BAA4();
    sub_10001BD48();
  }

  uint64_t result = sub_10001BAB8(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_100044A14(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (a3 + 40 * a2 <= a1 || a1 + 40 * a2 <= a3)
    {
      sub_100008DB0(&qword_100131978);
      return swift_arrayInitWithCopy(a3);
    }

    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_100044B04(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10001BAA4();
    sub_10001BD58();
  }

  else
  {
    sub_100047228();
    v3(0LL);
    sub_1000472DC();
    if (!v6 & v5) {
      BOOL v7 = v4 > v2;
    }
    else {
      BOOL v7 = 0;
    }
    if (!v7)
    {
      uint64_t v8 = sub_100047120();
      return sub_1000470F4(v8);
    }

    sub_10001BAA4();
    sub_10001BD48();
  }

  uint64_t result = sub_10001BAB8(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  __break(1u);
  return result;
}

uint64_t sub_100044B94(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (a3 + 40 * a2 <= a1 || a1 + 40 * a2 <= a3) {
      return swift_arrayInitWithCopy(a3);
    }
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_100044C64()
{
  if (v3 < 0)
  {
    sub_10001BAA4();
    sub_10001BD58();
  }

  else
  {
    unint64_t v4 = v0 + (v1 << 6);
    if (v2 + (v1 << 6) > v0)
    {
      BOOL v5 = v4 >= v2;
      BOOL v6 = v4 == v2;
    }

    else
    {
      BOOL v5 = 0;
      BOOL v6 = 0;
    }

    if (v6 || !v5) {
      return sub_10004715C(v2);
    }
    sub_10001BAA4();
    sub_10001BD48();
  }

  uint64_t result = sub_10001BAB8(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_100044CF8(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10001BAA4();
    sub_10001BD58();
  }

  else
  {
    sub_100047228();
    unint64_t v6 = v2 + 24 * v3;
    if (v4 + 24 * v3 > v2)
    {
      BOOL v7 = v6 >= v4;
      BOOL v8 = v6 == v4;
    }

    else
    {
      BOOL v7 = 0;
      BOOL v8 = 0;
    }

    if (v8 || !v7)
    {
      sub_100047368(v2, v3, v4, v5);
      uint64_t v9 = sub_100047120();
      return sub_1000470F4(v9);
    }

    sub_10001BAA4();
    sub_10001BD48();
  }

  uint64_t result = sub_10001BAB8(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  __break(1u);
  return result;
}

uint64_t sub_100044D90(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10001BAA4();
    sub_10001BD58();
  }

  else
  {
    sub_100047228();
    unint64_t v5 = v3 + 16 * v4;
    if (v2 + 16 * v4 > v3)
    {
      BOOL v6 = v5 >= v2;
      BOOL v7 = v5 == v2;
    }

    else
    {
      BOOL v6 = 0;
      BOOL v7 = 0;
    }

    if (v7 || !v6)
    {
      sub_100008DB0((uint64_t *)&unk_100130F30);
      uint64_t v8 = sub_100047120();
      return sub_1000470F4(v8);
    }

    sub_10001BAA4();
    sub_10001BD48();
  }

  uint64_t result = sub_10001BAB8(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  __break(1u);
  return result;
}

uint64_t sub_100044E2C()
{
  if (v3 < 0)
  {
    sub_10001BAA4();
    sub_10001BD58();
  }

  else
  {
    unint64_t v4 = v0 + 104 * v1;
    if (v2 + 104 * v1 > v0)
    {
      BOOL v5 = v4 >= v2;
      BOOL v6 = v4 == v2;
    }

    else
    {
      BOOL v5 = 0;
      BOOL v6 = 0;
    }

    if (v6 || !v5) {
      return sub_10004715C(v2);
    }
    sub_10001BAA4();
    sub_10001BD48();
  }

  uint64_t result = sub_10001BAB8(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

void *sub_100044EC8(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    sub_10001BAA4();
    sub_10001BD58();
  }

  else
  {
    if (&__dst[8 * a2] <= __src || &__src[8 * a2] <= __dst) {
      return memcpy(__dst, __src, 8 * a2);
    }
    sub_10001BAA4();
    sub_10001BD48();
  }

  uint64_t result = (void *)sub_10001BAB8(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t sub_100044F60(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (a3 + 8 * a2 <= a1 || a1 + 8 * a2 <= a3)
    {
      sub_100008DB0(&qword_100131EC8);
      return swift_arrayInitWithCopy(a3);
    }

    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_10004504C(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10001BAA4();
    sub_10001BD58();
  }

  else
  {
    sub_1000471B4();
    if (!v5 && v4)
    {
      BOOL v4 = v3 >= v2;
      BOOL v5 = v3 == v2;
    }

    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }

    if (v5 || !v4)
    {
      sub_100008DB0(&qword_100130F70);
      uint64_t v6 = sub_100047120();
      return sub_1000470F4(v6);
    }

    sub_10001BAA4();
    sub_10001BD48();
  }

  uint64_t result = sub_10001BAB8(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_1000450DC(uint64_t a1, uint64_t a2)
{
  return sub_1000442AC(a1, a2);
}

uint64_t sub_1000450F0(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10001BAA4();
    sub_10001BD58();
  }

  else
  {
    sub_1000471B4();
    if (!v8 && v7)
    {
      BOOL v7 = v6 >= v4;
      BOOL v8 = v6 == v4;
    }

    else
    {
      BOOL v7 = 0;
      BOOL v8 = 0;
    }

    if (v8 || !v7)
    {
      sub_100047368(v2, v3, v4, v5);
      uint64_t v9 = sub_100047120();
      return sub_1000470F4(v9);
    }

    sub_10001BAA4();
    sub_10001BD48();
  }

  uint64_t result = sub_10001BAB8(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  __break(1u);
  return result;
}

uint64_t sub_100045178(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10001BAA4();
    sub_10001BD58();
  }

  else
  {
    sub_100047228();
    sub_100047368(v3, v4, v5, v6);
    sub_1000472DC();
    if (!v9 && v8)
    {
      BOOL v8 = v7 >= v2;
      BOOL v9 = v7 == v2;
    }

    else
    {
      BOOL v8 = 0;
      BOOL v9 = 0;
    }

    if (v9 || !v8)
    {
      uint64_t v10 = sub_100047120();
      return sub_1000470F4(v10);
    }

    sub_10001BAA4();
    sub_10001BD48();
  }

  uint64_t result = sub_10001BAB8(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  __break(1u);
  return result;
}

void sub_100045204()
{
  *unint64_t v0 = v1;
}

void sub_100045238()
{
  *unint64_t v0 = v1;
}

void sub_10004526C()
{
  *unint64_t v0 = v1;
}

void sub_1000452A0()
{
  *unint64_t v0 = v1;
}

void sub_1000452D4()
{
  *unint64_t v0 = v1;
}

void sub_100045308()
{
  *unint64_t v0 = v1;
}

void sub_10004533C()
{
  *unint64_t v0 = v1;
}

void sub_100045370()
{
  *unint64_t v0 = v1;
}

void sub_1000453A4()
{
  *unint64_t v0 = v1;
}

size_t sub_1000453D8(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_100045A9C(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void sub_1000453F4()
{
  *unint64_t v0 = v1;
}

void sub_100045428()
{
  *unint64_t v0 = v1;
}

void sub_100045464()
{
  *unint64_t v0 = v1;
}

void sub_1000454A0()
{
  *unint64_t v0 = v1;
}

void sub_1000454DC()
{
  *unint64_t v0 = v1;
}

void sub_100045518()
{
  *unint64_t v0 = v1;
}

void sub_100045554()
{
  *unint64_t v0 = v1;
}

char *sub_100045588(char *a1, int64_t a2, char a3)
{
  size_t result = sub_100045D50(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_1000455A4()
{
  *unint64_t v0 = v1;
}

void sub_1000455D8()
{
  *unint64_t v0 = v1;
}

void sub_10004560C()
{
  *unint64_t v0 = v1;
}

void sub_100045640()
{
  *unint64_t v0 = v1;
}

char *sub_100045674(char *a1, int64_t a2, char a3)
{
  size_t result = sub_100045EF4(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_100045690()
{
  *unint64_t v0 = v1;
}

void sub_1000456C4()
{
  *unint64_t v0 = v1;
}

void sub_1000456F8()
{
  *unint64_t v0 = v1;
}

void sub_100045734()
{
  if ((v5 & 1) != 0)
  {
    sub_10001BAE0();
    if (v6 != v7)
    {
      sub_10001BB10();
      if (v6)
      {
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  sub_10001BD7C();
  if (v4)
  {
    uint64_t v13 = sub_10001BB9C(v8, v9, v10, v11, v12);
    uint64_t v14 = (void *)sub_10000C254(v13, 24 * v4 + 32);
    sub_10001C18C(v14);
  }

  uint64_t v15 = sub_1000471E0();
  if ((v3 & 1) != 0)
  {
    v2(v15);
    *(void *)(v0 + 1sub_10000AC58(v0 + 6) = 0LL;
  }

  else
  {
    v1(v15);
  }

  sub_100047164();
  sub_10001BE4C();
}

void sub_1000457C4()
{
}

void sub_1000457E0()
{
  if ((v4 & 1) != 0)
  {
    sub_10001BAE0();
    if (v5 != v6)
    {
      sub_10001BB10();
      if (v5)
      {
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  sub_10001BD7C();
  if (v3)
  {
    uint64_t v12 = sub_10001BB9C(v7, v8, v9, v10, v11);
    uint64_t v13 = (void *)sub_10000C254(v12, 40 * v3 + 32);
    sub_10001C18C(v13);
  }

  uint64_t v14 = sub_1000471E0();
  if ((v2 & 1) != 0)
  {
    v1(v14);
    *(void *)(v0 + 1sub_10000AC58(v0 + 6) = 0LL;
  }

  else
  {
    sub_1000450F0(v14, v15);
  }

  sub_100047164();
  sub_10001BE4C();
}

void sub_100045874()
{
}

void sub_100045890()
{
  if ((v5 & 1) != 0)
  {
    sub_10001BAE0();
    if (v6 != v7)
    {
      sub_10001BB10();
      if (v6)
      {
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  sub_10001BD7C();
  if (v4)
  {
    uint64_t v13 = sub_10001BB9C(v8, v9, v10, v11, v12);
    uint64_t v14 = (void *)sub_10000C254(v13, 40 * v4 + 32);
    sub_10001C18C(v14);
  }

  uint64_t v15 = sub_1000471E0();
  if ((v3 & 1) != 0)
  {
    v2(v15);
    *(void *)(v0 + 1sub_10000AC58(v0 + 6) = 0LL;
  }

  else
  {
    v1(v15);
  }

  sub_100047164();
  sub_10001BE4C();
}

void sub_100045920()
{
}

void sub_10004593C()
{
  if ((v5 & 1) != 0)
  {
    sub_10001BAE0();
    if (v6 != v7)
    {
      sub_10001BB10();
      if (v6)
      {
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  sub_10001BD7C();
  if (v4)
  {
    uint64_t v13 = sub_10001BB9C(v8, v9, v10, v11, v12);
    uint64_t v14 = (const void *)sub_10000C254(v13, 32 * v4 + 32);
    size_t v15 = j__malloc_size(v14);
    sub_100047260((uint64_t)(v15 - 32) / 32);
  }

  uint64_t v16 = sub_1000471E0();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(void *)(v0 + 1sub_10000AC58(v0 + 6) = 0LL;
  }

  else
  {
    v1(v16);
  }

  sub_100047164();
  sub_10001BAF0();
}

void sub_1000459DC(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_10001BAE0();
    if (v7 != v8)
    {
      sub_10001BB10();
      if (v7)
      {
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  else
  {
    uint64_t v6 = a2;
  }

  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    uint64_t v11 = sub_100008DB0(&qword_100131A50);
    uint64_t v12 = (char *)sub_10000C254(v11, 48 * v10 + 32);
    size_t v13 = j__malloc_size(v12);
    *((void *)v12 + 2) = v9;
    *((void *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 48);
  }

  else
  {
    uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v12 + 32;
  size_t v15 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    sub_100015CB0(v15, v9, v14);
    *(void *)(a4 + 1sub_10000AC58(v0 + 6) = 0LL;
  }

  else
  {
    sub_100044894((unint64_t)v15, v9, (unint64_t)v14);
  }

  sub_100047164();
  sub_10001BAF0();
}

size_t sub_100045A9C(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    size_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100008DB0(&qword_100131F60);
  uint64_t v11 = *(void *)(type metadata accessor for LNActionRecord(0LL) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  size_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if (result - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_24;
  }
  v15[2] = v8;
  void v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  uint64_t v17 = *(unsigned __int8 *)(*(void *)(type metadata accessor for LNActionRecord(0LL) - 8) + 80LL);
  uint64_t v18 = a4 + ((v17 + 32) & ~v17);
  if ((v5 & 1) != 0)
  {
    sub_100015D10(v18, v8);
    *(void *)(a4 + 1sub_10000AC58(v0 + 6) = 0LL;
  }

  else
  {
    sub_100044B04(v18, v8);
  }

  swift_release();
  return (size_t)v15;
}

void sub_100045BE8()
{
  unint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = v3;
  char v12 = v0;
  if ((v2 & 1) != 0)
  {
    sub_10001BAE0();
    if (v14 != v15)
    {
      sub_10001BB10();
      if (v14)
      {
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  else
  {
    uint64_t v13 = v1;
  }

  uint64_t v16 = *(void *)(v11 + 16);
  if (v13 <= v16) {
    uint64_t v17 = *(void *)(v11 + 16);
  }
  else {
    uint64_t v17 = v13;
  }
  if (v17)
  {
    uint64_t v18 = sub_10001BB9C(v0, v1, v2, v3, v4);
    uint64_t v19 = (void *)sub_10000C254(v18, 24 * v17 + 32);
    size_t v20 = j__malloc_size(v19);
    _OWORD v19[2] = v16;
    v19[3] = 2 * ((uint64_t)(v20 - 32) / 24);
  }

  else
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
  }

  uint64_t v21 = v19 + 4;
  uint64_t v22 = v11 + 32;
  if ((v12 & 1) != 0)
  {
    v10(v22, v16, v21);
    *(void *)(v11 + 1sub_10000AC58(v0 + 6) = 0LL;
  }

  else
  {
    v6(v22, v16, v21, v8);
  }

  sub_100047164();
  sub_10001BE4C();
}

void sub_100045CB0()
{
  if ((v5 & 1) != 0)
  {
    sub_10001BAE0();
    if (v6 != v7)
    {
      sub_10001BB10();
      if (v6)
      {
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  sub_10001BD7C();
  if (v4)
  {
    uint64_t v13 = sub_10001BB9C(v8, v9, v10, v11, v12);
    char v14 = (const void *)sub_10000C254(v13, 16 * v4 + 32);
    size_t v15 = j__malloc_size(v14);
    sub_100047260((uint64_t)(v15 - 32) / 16);
  }

  uint64_t v16 = sub_1000471E0();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(void *)(v0 + 1sub_10000AC58(v0 + 6) = 0LL;
  }

  else
  {
    v1(v16);
  }

  sub_100047164();
  sub_10001BAF0();
}

char *sub_100045D50(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008DB0(&qword_100130F40);
    uint64_t v11 = (char *)swift_allocObject(v10, 104 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 104);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    sub_100015D1C((char *)(a4 + 32), v8, v11 + 32);
    *(void *)(a4 + 1sub_10000AC58(v0 + 6) = 0LL;
  }

  else
  {
    sub_100044E2C();
  }

  swift_release();
  return v11;
}

void sub_100045E38()
{
  if ((v5 & 1) != 0)
  {
    sub_10001BAE0();
    if (v6 != v7)
    {
      sub_10001BB10();
      if (v6)
      {
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  sub_10001BD7C();
  if (v4)
  {
    uint64_t v13 = sub_10001BB9C(v8, v9, v10, v11, v12);
    char v14 = (const void *)sub_10000C254(v13, 8 * v4 + 32);
    size_t v15 = j__malloc_size(v14);
    sub_100047260((uint64_t)(v15 - 32) / 8);
  }

  uint64_t v16 = sub_1000471E0();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(void *)(v0 + 1sub_10000AC58(v0 + 6) = 0LL;
  }

  else
  {
    v1(v16);
  }

  sub_100047164();
  sub_10001BAF0();
}

void sub_100045ED8()
{
}

char *sub_100045EF4(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008DB0(&qword_100130F78);
    uint64_t v11 = (char *)swift_allocObject(v10, (v9 << 6) | 0x20, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 64);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    sub_100015BA0((char *)(a4 + 32), v8, v11 + 32);
    *(void *)(a4 + 1sub_10000AC58(v0 + 6) = 0LL;
  }

  else
  {
    sub_100044C64();
  }

  swift_release();
  return v11;
}

void sub_100045FD4()
{
  if ((v6 & 1) != 0)
  {
    sub_10001BAE0();
    if (v10 != v11)
    {
      sub_10001BB10();
      if (v10)
      {
LABEL_24:
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  else
  {
    uint64_t v9 = v5;
  }

  uint64_t v12 = *(void *)(v0 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (!v13)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }

  uint64_t v14 = sub_10001BB9C(v4, v5, v6, v7, v8);
  uint64_t v15 = *(void *)(sub_100008DB0(v2) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  uint64_t v19 = (void *)swift_allocObject(v14, v18 + v16 * v13, v17 | 7);
  size_t v20 = j__malloc_size(v19);
  if (!v16)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  if (v20 - v18 == 0x8000000000000000LL && v16 == -1) {
    goto LABEL_23;
  }
  sub_100047260((uint64_t)(v20 - v18) / v16);
LABEL_18:
  uint64_t v22 = *(unsigned __int8 *)(*(void *)(sub_100008DB0(v2) - 8) + 80LL);
  uint64_t v23 = (v22 + 32) & ~v22;
  uint64_t v24 = v0 + v23;
  if ((v3 & 1) != 0)
  {
    v1(v24, v12, (char *)v19 + v23);
    *(void *)(v0 + 1sub_10000AC58(v0 + 6) = 0LL;
  }

  else
  {
    sub_100045178(v24, v12);
  }

  sub_100047164();
  sub_10000AD58();
}

unint64_t sub_1000460E8(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > result)
    {
      return result;
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_10004610C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v15);
    size_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (v5)
  {
    if (v6)
    {
      if (a3 < 0) {
        uint64_t v8 = a3;
      }
      else {
        uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v8);
      size_t result = swift_bridgeObjectRelease();
      if (v9 <= a2)
      {
        if (v7 >= 1)
        {
          sub_100046FC4(&qword_100131E80, &qword_100131E78, (uint64_t)&protocol conformance descriptor for [A]);
          swift_bridgeObjectRetain();
          for (uint64_t i = 0LL; i != v7; ++i)
          {
            sub_100008DB0(&qword_100131E78);
            sub_100046CA4();
            uint64_t v12 = v11;
            id v14 = *v13;
            v12(&v16, 0LL);
            *(void *)(v5 + 8 * i) = v14;
          }

          swift_bridgeObjectRelease();
          return a3;
        }

        goto LABEL_22;
      }
    }

    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10) <= a2)
      {
        sub_1000442AC((a3 & 0xFFFFFFFFFFFFFF8LL) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10));
        return a3;
      }

      __break(1u);
    }

    __break(1u);
LABEL_22:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_1000462B4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v14 = a3;
    }
    else {
      uint64_t v14 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v14);
    size_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (v5)
  {
    if (v6)
    {
      if (a3 < 0) {
        uint64_t v8 = a3;
      }
      else {
        uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v8);
      size_t result = swift_bridgeObjectRelease();
      if (v9 <= a2)
      {
        if (v7 >= 1)
        {
          sub_100046FC4(&qword_100131E70, &qword_100131E68, (uint64_t)&protocol conformance descriptor for [A]);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0LL; i != v7; ++i)
          {
            sub_100008DB0(&qword_100131E68);
            char v11 = sub_100046CD8(v15, i, a3);
            id v13 = *v12;
            ((void (*)(void *, void))v11)(v15, 0LL);
            *(void *)(v5 + 8 * i) = v13;
          }

          swift_bridgeObjectRelease();
          return a3;
        }

        goto LABEL_22;
      }
    }

    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10) <= a2)
      {
        sub_1000442AC((a3 & 0xFFFFFFFFFFFFFF8LL) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10));
        return a3;
      }

      __break(1u);
    }

    __break(1u);
LABEL_22:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_10004645C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v15);
    size_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (v5)
  {
    if (v6)
    {
      if (a3 < 0) {
        uint64_t v8 = a3;
      }
      else {
        uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v8);
      size_t result = swift_bridgeObjectRelease();
      if (v9 <= a2)
      {
        if (v7 >= 1)
        {
          sub_100046FC4(&qword_100131F58, &qword_100131F50, (uint64_t)&protocol conformance descriptor for [A]);
          swift_bridgeObjectRetain();
          for (uint64_t i = 0LL; i != v7; ++i)
          {
            sub_100008DB0(&qword_100131F50);
            sub_100046CA4();
            uint64_t v12 = v11;
            id v14 = *v13;
            v12(&v16, 0LL);
            *(void *)(v5 + 8 * i) = v14;
          }

          swift_bridgeObjectRelease();
          return a3;
        }

        goto LABEL_22;
      }
    }

    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10) <= a2)
      {
        sub_1000442AC((a3 & 0xFFFFFFFFFFFFFF8LL) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10));
        return a3;
      }

      __break(1u);
    }

    __break(1u);
LABEL_22:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_100046604(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v15);
    size_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (v5)
  {
    if (v6)
    {
      if (a3 < 0) {
        uint64_t v8 = a3;
      }
      else {
        uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v8);
      size_t result = swift_bridgeObjectRelease();
      if (v9 <= a2)
      {
        if (v7 >= 1)
        {
          sub_100046FC4(&qword_100131F28, &qword_100130BE0, (uint64_t)&protocol conformance descriptor for [A]);
          swift_bridgeObjectRetain();
          for (uint64_t i = 0LL; i != v7; ++i)
          {
            sub_100008DB0(&qword_100130BE0);
            sub_100046CA4();
            uint64_t v12 = v11;
            id v14 = *v13;
            v12(&v16, 0LL);
            *(void *)(v5 + 8 * i) = v14;
          }

          swift_bridgeObjectRelease();
          return a3;
        }

        goto LABEL_22;
      }
    }

    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10) <= a2)
      {
        sub_1000442AC((a3 & 0xFFFFFFFFFFFFFF8LL) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10));
        return a3;
      }

      __break(1u);
    }

    __break(1u);
LABEL_22:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_1000467AC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v15);
    size_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (v5)
  {
    if (v6)
    {
      if (a3 < 0) {
        uint64_t v8 = a3;
      }
      else {
        uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v8);
      size_t result = swift_bridgeObjectRelease();
      if (v9 <= a2)
      {
        if (v7 >= 1)
        {
          sub_100046FC4(&qword_100131F00, &qword_100131EF8, (uint64_t)&protocol conformance descriptor for [A]);
          swift_bridgeObjectRetain();
          for (uint64_t i = 0LL; i != v7; ++i)
          {
            sub_100008DB0(&qword_100131EF8);
            sub_100046CA4();
            uint64_t v12 = v11;
            id v14 = *v13;
            v12(&v16, 0LL);
            *(void *)(v5 + 8 * i) = v14;
          }

          swift_bridgeObjectRelease();
          return a3;
        }

        goto LABEL_22;
      }
    }

    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10) <= a2)
      {
        sub_1000442AC((a3 & 0xFFFFFFFFFFFFFF8LL) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10));
        return a3;
      }

      __break(1u);
    }

    __break(1u);
LABEL_22:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_100046954(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v15);
    size_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (v5)
  {
    if (v6)
    {
      if (a3 < 0) {
        uint64_t v8 = a3;
      }
      else {
        uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v8);
      size_t result = swift_bridgeObjectRelease();
      if (v9 <= a2)
      {
        if (v7 >= 1)
        {
          sub_100046FC4(&qword_100131F48, &qword_100131F40, (uint64_t)&protocol conformance descriptor for [A]);
          swift_bridgeObjectRetain();
          for (uint64_t i = 0LL; i != v7; ++i)
          {
            sub_100008DB0(&qword_100131F40);
            sub_100046D2C();
            uint64_t v12 = v11;
            id v14 = *v13;
            v12(&v16, 0LL);
            *(void *)(v5 + 8 * i) = v14;
          }

          swift_bridgeObjectRelease();
          return a3;
        }

        goto LABEL_22;
      }
    }

    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10) <= a2)
      {
        sub_1000442AC((a3 & 0xFFFFFFFFFFFFFF8LL) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10));
        return a3;
      }

      __break(1u);
    }

    __break(1u);
LABEL_22:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_100046AFC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v14 = a3;
    }
    else {
      uint64_t v14 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v14);
    size_t result = swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (v5)
  {
    if (v6)
    {
      if (a3 < 0) {
        uint64_t v8 = a3;
      }
      else {
        uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v8);
      size_t result = swift_bridgeObjectRelease(a3);
      if (v9 <= a2)
      {
        if (v7 >= 1)
        {
          sub_100046FC4(&qword_100131ED0, &qword_100132170, (uint64_t)&protocol conformance descriptor for [A]);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0LL; i != v7; ++i)
          {
            sub_100008DB0(&qword_100132170);
            char v11 = sub_100046CD8(v15, i, a3);
            id v13 = *v12;
            ((void (*)(void *, void))v11)(v15, 0LL);
            *(void *)(v5 + 8 * i) = v13;
          }

          swift_bridgeObjectRelease(a3);
          return a3;
        }

        goto LABEL_22;
      }
    }

    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10) <= a2)
      {
        sub_1000442AC((a3 & 0xFFFFFFFFFFFFFF8LL) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10));
        return a3;
      }

      __break(1u);
    }

    __break(1u);
LABEL_22:
    __break(1u);
  }

  __break(1u);
  return result;
}

void sub_100046CA4()
{
  uint64_t v1 = sub_100047148();
  uint64_t v2 = sub_1000471A0((uint64_t)v1);
  sub_100046D88(v2, v3, v4);
  *(void *)(v0 + 32) = v5;
  sub_10000AF74();
}

void (*sub_100046CD8(void *a1, unint64_t a2, uint64_t a3))(void *)
{
  unint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_100046DC4(v6, a2, a3);
  return sub_100046CD4;
}

void sub_100046D2C()
{
  uint64_t v1 = sub_100047148();
  uint64_t v2 = sub_1000471A0((uint64_t)v1);
  sub_100046E30(v2, v3, v4);
  *(void *)(v0 + 32) = v5;
  sub_10000AF74();
}

void sub_100046D5C(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

void sub_100046D88(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (v4) {
    uint64_t v5 = sub_100047208();
  }
  else {
    uint64_t v5 = (uint64_t)sub_1000471FC();
  }
  *unint64_t v3 = v5;
  sub_10000AF74();
}

void (*sub_100046DC4(void *a1, unint64_t a2, uint64_t a3))(id *)
{
  unint64_t v6 = a3 & 0xC000000000000001LL;
  sub_1000460E8(a2, (a3 & 0xC000000000000001LL) == 0, a3);
  if (v6) {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
  }
  else {
    id v7 = *(id *)(a3 + 8 * a2 + 32);
  }
  *a1 = v7;
  return sub_1000470EC;
}

void sub_100046E30(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (v4) {
    uint64_t v5 = sub_100047208();
  }
  else {
    uint64_t v5 = (uint64_t)sub_1000471FC();
  }
  *unint64_t v3 = v5;
  sub_10000AF74();
}

void sub_100046E6C(id *a1)
{
}

uint64_t sub_100046E74@<X0>(void (*a1)(uint64_t *__return_ptr)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000440D4(a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_100046EA0@<X0>(void (*a1)(uint64_t *__return_ptr)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000440A0(a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_100046ECC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100046EF0@<X0>(uint64_t a1@<X8>)
{
  return sub_100046EA0(*(void (**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

id sub_100046EF8@<X0>(void *a1@<X8>)
{
  return sub_100043BCC(v1, a1);
}

uint64_t sub_100046F10@<X0>(uint64_t *a1@<X8>)
{
  return sub_100043C2C(v1, a1);
}

uint64_t sub_100046F28@<X0>(uint64_t *a1@<X8>)
{
  return sub_100043C8C(a1);
}

id sub_100046F40@<X0>(void *a1@<X8>)
{
  return sub_100043DF0(a1);
}

uint64_t sub_100046F58@<X0>(uint64_t a1@<X8>)
{
  return sub_100046E74(*(void (**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

id sub_100046F60@<X0>(void *a1@<X8>)
{
  return sub_100043EC8(v1, a1);
}

ValueMetadata *type metadata accessor for LinkDaemon()
{
  return &type metadata for LinkDaemon;
}

uint64_t sub_100046F88(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LNBundleRecord(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100046FC4(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_100008E58(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100047004(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008DB0(&qword_100131978);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004704C(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_100047064(result, a2 & 1);
  }
  return result;
}

uint64_t sub_100047064(uint64_t result, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_retain(result);
  }
  return result;
}

uint64_t sub_100047070(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_100047088(result, a2 & 1);
  }
  return result;
}

uint64_t sub_100047088(uint64_t result, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_release(result);
  }
  return result;
}

uint64_t sub_100047094(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_retain(a2);
  }
  return result;
}

void *sub_1000470A4(void *a1)
{
  return a1;
}

uint64_t sub_1000470F4(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

unint64_t sub_100047104(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_1000460E8(a2, (a3 & 0xC000000000000001LL) == 0, a3);
}

uint64_t sub_100047120()
{
  return v0;
}

  ;
}

void *sub_100047148()
{
  return malloc(0x28uLL);
}

uint64_t sub_10004715C(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

uint64_t sub_100047164()
{
  return swift_release(v0);
}

uint64_t sub_10004716C(unint64_t *a1)
{
  return sub_100046FC4(a1, v1, v2);
}

  ;
}

  ;
}

uint64_t sub_1000471A0(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

  ;
}

uint64_t sub_1000471D4()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_1000471E0()
{
  return v0 + 32;
}

uint64_t sub_1000471F0(uint64_t a1)
{
  return swift_allocObject(a1, 128LL, 15LL);
}

id sub_1000471FC()
{
  return *(id *)(v0 + 8 * v1 + 32);
}

uint64_t sub_100047208()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

uint64_t sub_100047214(uint64_t a1)
{
  return specialized Array._endMutation()(a1);
}

  ;
}

uint64_t sub_100047238()
{
  return swift_retain_n(v0, 2LL);
}

void *sub_100047244(uint64_t a1, uint64_t *a2, void **a3, uint64_t *a4, uint64_t a5)
{
  return sub_10004411C(v5, a2, a3, a4, a5);
}

void sub_100047250(uint64_t a1, uint64_t a2)
{
}

void sub_100047260(uint64_t a1@<X8>)
{
  *(void *)(v2 + 1sub_10000AC58(v0 + 6) = v1;
  *(void *)(v2 + 2sub_10000AC58(v0 + 4) = 2 * a1;
}

uint64_t sub_10004726C()
{
  return v0 + 32;
}

  ;
}

uint64_t sub_100047294()
{
  return 0LL;
}

  ;
}

uint64_t sub_1000472BC()
{
  return swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
}

  ;
}

  ;
}

  ;
}

void sub_100047304()
{
}

  ;
}

void sub_100047320(uint64_t a1, uint64_t a2)
{
}

  ;
}

uint64_t sub_10004733C@<X0>(uint64_t a1@<X8>)
{
  return a1 + 8LL * *(void *)(a1 + 16) + 32;
}

uint64_t sub_100047354(uint64_t a1)
{
  return swift_allocObject(a1, 120LL, 15LL);
}

uint64_t sub_100047360()
{
  return swift_retain(v0);
}

uint64_t sub_100047368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return sub_100008DB0(a4);
}

uint64_t sub_100047370()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_100047378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 7LL);
}

void sub_100047380()
{
}

uint64_t sub_10004738C()
{
  return swift_retain_n(v0, 2LL);
}

  ;
}

uint64_t sub_1000473AC()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_1000473B8(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  swift_bridgeObjectRetain();
  sub_1000483C0();
  swift_bridgeObjectRelease(v3);
  uint64_t v4 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  sub_1000483C0();
  swift_bridgeObjectRelease(v4);
  id v5 = *(id *)(v1 + 32);
  NSObject.hash(into:)(a1);
}

uint64_t sub_100047434(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  BOOL v7 = v4 == *a2 && v5 == v6;
  if (!v7 && (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[3];
  uint64_t v10 = a2[2];
  uint64_t v11 = a2[3];
  BOOL v12 = v8 == v10 && v9 == v11;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v10, v11, 0LL) & 1) == 0) {
    return 0LL;
  }
  sub_10000A1A0(0LL, (unint64_t *)&qword_1001317F0, &OBJC_CLASS___NSObject_ptr);
  return static NSObject.== infix(_:_:)(a1[4], a2[4]) & 1;
}

Swift::Int sub_1000474D0()
{
  uint64_t v1 = *(void *)(v0 + 8);
  *(void *)&double v2 = swift_bridgeObjectRetain().n128_u64[0];
  sub_1000483D0(v3, v2);
  swift_bridgeObjectRelease(v1);
  uint64_t v4 = *(void *)(v0 + 24);
  *(void *)&double v5 = swift_bridgeObjectRetain().n128_u64[0];
  sub_1000483D0(v6, v5);
  swift_bridgeObjectRelease(v4);
  id v7 = *(id *)(v0 + 32);
  NSObject.hash(into:)(v9);

  return Hasher._finalize()();
}

Swift::Int sub_10004755C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (void *)v1[4];
  Hasher.init(_seed:)(v9, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v9, v2, v3);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v9, v4, v5);
  swift_bridgeObjectRelease(v5);
  id v7 = v6;
  NSObject.hash(into:)(v9);

  return Hasher._finalize()();
}

void *sub_100047600()
{
  return memcpy(&unk_100131F90, __src, 0xA8uLL);
}

uint64_t sub_100047654(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_100132038, 0xD000000000000010LL, 0x80000001000F9FE0LL);
}

uint64_t sub_100047678(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_100132050, 0xD000000000000010LL, 0x80000001000F96E0LL);
}

uint64_t sub_10004769C(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_100132068, 0x6D796E6F6E7973LL, 0xE700000000000000LL);
}

void sub_1000476BC(uint64_t a1, uint64_t a2)
{
  if (qword_1001301B0 != -1) {
    swift_once(&qword_1001301B0, sub_100047600);
  }
  sub_10001DEBC(v15, &unk_100131F90);
  sub_10001D9AC(v15);
  if (qword_1001301C0 != -1) {
    swift_once(&qword_1001301C0, sub_100047678);
  }
  sub_10001DECC((uint64_t)&qword_100132050);
  v14[0] = a1;
  v14[1] = a2;
  == infix<A>(_:_:)();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  sub_10001DEBC(v13, v15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)( v5,  v7,  v9,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  (uint64_t)v14);
  sub_10001191C(v9);
  sub_10001191C(v7);
  sub_10001DAF0(v15);
  sub_10001DEBC(v16, v14);
  sub_10001DEBC(v13, v14);
  AppIntents_SQLite::Delete v17 = QueryType.delete()();
  uint64_t countAndFlagsBits = v17.template._countAndFlagsBits;
  object = v17.template._object;
  rawValue = v17.bindings._rawValue;
  sub_10001DAF0(v16);
  v18.template._uint64_t countAndFlagsBits = countAndFlagsBits;
  v18.template._object = object;
  v18.bindings._rawValue = rawValue;
  Connection.run(_:)(v18);
  sub_10000AEE8();
  swift_bridgeObjectRelease();
  sub_10001DEE8();
}

void sub_100047868(_OWORD *a1, uint64_t a2)
{
  v30[23] = a2;
  if (qword_1001301B0 != -1) {
    swift_once(&qword_1001301B0, sub_100047600);
  }
  sub_10001DEBC(v30, &unk_100131F90);
  sub_10001DEBC(v29, &unk_100131F90);
  sub_10001D9AC(v30);
  if (qword_1001301B8 != -1) {
    swift_once(&qword_1001301B8, sub_100047654);
  }
  uint64_t v4 = sub_10001DECC((uint64_t)&qword_100132038);
  v26[0] = *a1;
  <- infix<A>(_:_:)( v4,  v5,  v6,  (uint64_t)v26,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
  uint64_t v7 = sub_100008DB0(&qword_1001323E0);
  uint64_t inited = swift_initStackObject(v7, v27);
  *(_OWORD *)(inited + 1sub_10000AC58(v0 + 6) = xmmword_1000F57D0;
  if (qword_1001301C8 != -1) {
    swift_once(&qword_1001301C8, sub_10004769C);
  }
  uint64_t v9 = qword_100132068;
  uint64_t v10 = unk_100132070;
  uint64_t v11 = qword_100132078;
  uint64_t v12 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  JSONEncoder.init()();
  uint64_t v13 = LNStaticDeferredLocalizedString.asLocalizedStringResourceJSON(encoder:)();
  if (v2)
  {
    swift_release();
    sub_10001DC30(v28);
    sub_10001DEBC(v26, v29);
    sub_10001DAF0(v26);
    *(void *)(inited + 1sub_10000AC58(v0 + 6) = 0LL;
    swift_setDeallocating(inited);
    sub_100058874();
  }

  else
  {
    uint64_t v15 = v13;
    uint64_t v16 = v14;
    swift_release();
    *(void *)&__int128 v25 = v15;
    *((void *)&v25 + 1) = v16;
    <- infix<A>(_:_:)( v9,  v10,  v11,  (uint64_t)&v25,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
    swift_bridgeObjectRelease();
    if (qword_1001301C0 != -1) {
      swift_once(&qword_1001301C0, sub_100047678);
    }
    uint64_t v17 = sub_10001DECC((uint64_t)&qword_100132050);
    __int128 v25 = a1[1];
    <- infix<A>(_:_:)( v17,  v18,  v19,  (uint64_t)&v25,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
    uint64_t v20 = QueryType.insert(_:_:)((uint64_t)v28);
    uint64_t v22 = v21;
    uint64_t v24 = v23;
    swift_setDeallocating(inited);
    sub_100058874();
    sub_10001DC30(v28);
    sub_10001DEBC(v26, v29);
    sub_10001DAF0(v26);
    v31.template._uint64_t countAndFlagsBits = v20;
    v31.template._object = v22;
    v31.bindings._rawValue = v24;
    Connection.run(_:)(v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  sub_10001DEE8();
}

_UNKNOWN **sub_100047B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1001301B0 != -1) {
    swift_once(&qword_1001301B0, sub_100047600);
  }
  sub_10001DEBC(v33, &unk_100131F90);
  sub_10001D9AC(v33);
  if (qword_1001301B8 != -1) {
    swift_once(&qword_1001301B8, sub_100047654);
  }
  sub_10001DECC((uint64_t)&qword_100132038);
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  == infix<A>(_:_:)();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  if (qword_1001301C0 != -1) {
    swift_once(&qword_1001301C0, sub_100047678);
  }
  sub_10001DECC((uint64_t)&qword_100132050);
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  == infix<A>(_:_:)();
  && infix(_:_:)(v9, v11, v13, v14, v15, v16);
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000AEE8();
  swift_bridgeObjectRelease();
  sub_10001DEBC(&v28, v33);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v23 = &protocol witness table for Table;
  QueryType.filter(_:)( v18,  v20,  v22,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  (uint64_t)&v29);
  sub_10001191C(v22);
  sub_10001191C(v20);
  sub_10001DAF0(v33);
  sub_10001DEBC(v34, &v29);
  AppIntents_SQLite::Insert v31 = &type metadata for Table;
  uint64_t v32 = &protocol witness table for Table;
  uint64_t v29 = swift_allocObject(&unk_1001241B8, 184LL, 7LL);
  sub_10001DEBC((void *)(v29 + 16), v34);
  uint64_t v24 = v35;
  Connection.prepareRowIterator(_:)(&v29);
  uint64_t v25 = sub_10000AC58(&v29);
  if (!v24)
  {
    __chkstk_darwin(v25);
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    uint64_t v23 = v27;
    swift_release();
    sub_10000AEE8();
    swift_release();
  }

  return v23;
}

uint64_t sub_100047E54()
{
  uint64_t v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }

  uint64_t v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    uint64_t v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }

  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184LL, 7LL);
}

uint64_t sub_100047EDC@<X0>(uint64_t a1@<X8>)
{
  return sub_10004814C((uint64_t)v3, a1);
}

uint64_t sub_100047F14@<X0>(uint64_t a1@<X8>)
{
  return sub_100047EDC(a1);
}

uint64_t sub_100047F1C@<X0>(void *a1@<X8>)
{
  if (qword_1001301B8 != -1) {
    swift_once(&qword_1001301B8, sub_100047654);
  }
  Row.get<A>(_:)();
  if (qword_1001301C0 != -1) {
    swift_once(&qword_1001301C0, sub_100047678);
  }
  Row.get<A>(_:)();
  if (qword_1001301C8 != -1) {
    swift_once(&qword_1001301C8, sub_10004769C);
  }
  Row.get<A>(_:)();
  sub_10000A1A0(0LL, (unint64_t *)&qword_100131250, &OBJC_CLASS___LNStaticDeferredLocalizedString_ptr);
  uint64_t result = ((uint64_t (*)())LNStaticDeferredLocalizedString.init(localizedStringResourceJSON:))();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = result;
  return result;
}

void *sub_1000480EC@<X0>(void *(*a1)(void *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  uint64_t result = a1(v5);
  if (!v2) {
    return (void *)sub_10004814C((uint64_t)v5, a2);
  }
  return result;
}

void *sub_100048134@<X0>(uint64_t a1@<X8>)
{
  return sub_1000480EC(*(void *(**)(void *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_10004814C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008DB0(&qword_100132080);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void destroy for LNAppShortcutSpanSynonymRecord(uint64_t a1)
{
}

void *initializeWithCopy for LNAppShortcutSpanSynonymRecord(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = (void *)a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  id v6 = v5;
  return a1;
}

void *assignWithCopy for LNAppShortcutSpanSynonymRecord(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = (void *)a2[4];
  uint64_t v9 = (void *)a1[4];
  a1[4] = v8;
  id v10 = v8;

  return a1;
}

void *assignWithTake for LNAppShortcutSpanSynonymRecord(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  uint64_t v6 = (void *)a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for LNAppShortcutSpanSynonymRecord(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LNAppShortcutSpanSynonymRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 2sub_10000AC58(v0 + 4) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LNAppShortcutSpanSynonymRecord()
{
  return &type metadata for LNAppShortcutSpanSynonymRecord;
}

unint64_t sub_100048384()
{
  unint64_t result = qword_100132088;
  if (!qword_100132088)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F6290, &type metadata for LNAppShortcutSpanSynonymRecord);
    atomic_store(result, (unint64_t *)&qword_100132088);
  }

  return result;
}

uint64_t sub_1000483C0()
{
  return String.hash(into:)(v0, v1, v2);
}

uint64_t sub_1000483D0(uint64_t a1, ...)
{
  return String.hash(into:)(va, v1, v2);
}

void *sub_1000483E0(void *a1)
{
  uint64_t v2 = type metadata accessor for NSFastEnumerationIterator(0LL);
  uint64_t v19 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  id v5 = a1;
  NSOrderedSet.makeIterator()();

  unint64_t v6 = sub_10004B580();
  dispatch thunk of IteratorProtocol.next()(v2, v6);
  if (v23)
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
    do
    {
      sub_10000AC78(&v22, v21);
      sub_10000C194((uint64_t)v21, (uint64_t)v20);
      uint64_t v8 = sub_10000A1A0(0LL, &qword_100131960, &OBJC_CLASS___LNEffectiveBundleIdentifier_ptr);
      if (swift_dynamicCast(&v24, v20, (char *)&type metadata for Any + 8, v8, 6LL))
      {
        id v9 = v24;
        id v10 = [v24 bundleIdentifier];

        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        uint64_t v13 = v12;

        sub_10000AC58(v21);
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
        {
          sub_1000141B8();
          uint64_t v7 = v16;
        }

        unint64_t v14 = v7[2];
        if (v14 >= v7[3] >> 1)
        {
          sub_1000141B8();
          uint64_t v7 = v17;
        }

        void v7[2] = v14 + 1;
        uint64_t v15 = &v7[2 * v14];
        void v15[4] = v11;
        v15[5] = v13;
      }

      else
      {
        sub_10000AC58(v21);
      }

      dispatch thunk of IteratorProtocol.next()(v2, v6);
    }

    while (v23);
  }

  else
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
  }

  (*(void (**)(_BYTE *, uint64_t))(v19 + 8))(v4, v2);
  return v7;
}

uint64_t sub_10004860C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 13sub_10000AC58(v0 + 6) = a2;
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_100048664()
{
  uint64_t v1 = (void *)objc_opt_self(&OBJC_CLASS___LNConnectionPolicy);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 policyWithBundleIdentifier:v2];

  *(void *)(v0 + 8sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = 0LL;
  id v4 = [v3 connectionWithError:v0 + 80];
  *(void *)(v0 + 14sub_10000AC58(v0 + 4) = v4;

  unint64_t v6 = *(void **)(v0 + 80);
  if (v4)
  {
    sub_100011AB4(v5, (unint64_t *)&unk_100130610, &OBJC_CLASS___AFPreferences_ptr);
    id v7 = v6;
    sub_10000F764();
    if (v8)
    {
      NSString v9 = String._bridgeToObjectiveC()();
      sub_10000ADB0();
    }

    else
    {
      NSString v9 = 0LL;
    }

    *(void *)(v0 + 152) = v9;
    *(void *)(v0 + 5sub_10000AC58(v0 + 6) = v0 + 120;
    *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v0;
    *(void *)(v0 + 2sub_10000AC58(v0 + 4) = sub_10004884C;
    *(void *)(v0 + 112) = swift_continuation_init(v0 + 16, 1LL);
    *(void *)(v0 + 8sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = _NSConcreteStackBlock;
    *(void *)(v0 + 88) = 0x40000000LL;
    *(void *)(v0 + 9sub_10000AC58(v0 + 6) = sub_1000489C4;
    *(void *)(v0 + 10sub_10000AC58(v0 + 4) = &unk_1001243A0;
    [v4 fetchSuggestedActionsWithSiriLanguageCode:v9 completionHandler:v0 + 80];
    return swift_continuation_await(v0 + 16);
  }

  else
  {
    id v10 = v6;
    _convertNSErrorToError(_:)(v6);

    swift_willThrow(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10004884C()
{
  *uint64_t v1 = *v0;
  *(void *)(v2 + 16sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = *(void *)(v2 + 48);
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_1000488DC()
{
  uint64_t v1 = *(void **)(v0 + 152);

  uint64_t v2 = *(void *)(v0 + 120);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_100048950()
{
  uint64_t v1 = *(void **)(v0 + 152);
  uint64_t v2 = *(void **)(v0 + 144);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000489C4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3) {
    return sub_1000BC0E0(v3, a3);
  }
  uint64_t v6 = sub_10000A1A0(0LL, &qword_100131ED8, &OBJC_CLASS___LNSuggestedAction_ptr);
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v6);
  return sub_1000BC134(v3, v7);
}

uint64_t sub_100048A2C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A07C(v0, qword_100135378);
  sub_100008D98(v0, (uint64_t)qword_100135378);
  uint64_t v8 = type metadata accessor for SuggestedActionsService();
  uint64_t v1 = sub_100008DB0((uint64_t *)&unk_100132590);
  uint64_t v3 = String.init<A>(describing:)(&v8, v1);
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    uint64_t v5 = v2;
    uint64_t v6 = String.init(cString:)(LNLogSubsystem);
    return Logger.init(subsystem:category:)(v6, v7, v3, v5);
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_100048AD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v3);
  *(void *)&v3[OBJC_IVAR____TtC10LinkDaemon23SuggestedActionsService_registrySource] = a1;
  uint64_t v8 = &v3[OBJC_IVAR____TtC10LinkDaemon23SuggestedActionsService_applicationSuggestionsProvider];
  *(void *)uint64_t v8 = a2;
  *((void *)v8 + 1) = a3;
  v10.receiver = v3;
  v10.super_class = ObjectType;
  return objc_msgSendSuper2(&v10, "init");
}

void sub_100048B3C()
{
}

uint64_t type metadata accessor for SuggestedActionsService()
{
  return objc_opt_self(&OBJC_CLASS____TtC10LinkDaemon23SuggestedActionsService);
}

uint64_t sub_100048BD0()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(LNDaemonSuggestionsService);
  qword_100135390 = result;
  *(void *)algn_100135398 = v1;
  return result;
}

uint64_t sub_100048BFC()
{
  if (qword_1001301D8 != -1) {
    swift_once(&qword_1001301D8, sub_100048BD0);
  }
  uint64_t v0 = qword_100135390;
  sub_10000AE38();
  return v0;
}

uint64_t sub_100048C54(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[7] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  _BYTE v2[8] = v4;
  void v2[9] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_100048CA8()
{
  uint64_t v1 = qword_1001301D0;
  id v2 = *(id *)(v0 + 48);
  if (v1 == -1)
  {
    uint64_t v3 = v2;
  }

  else
  {
    swift_once(&qword_1001301D0, sub_100048A2C);
    uint64_t v3 = *(void **)(v0 + 48);
  }

  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v7 = sub_100008D98(v6, (uint64_t)qword_100135378);
  *(void *)(v0 + 8sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);

  sub_10004C080();
  sub_10004BF88();
  os_log_type_t v8 = sub_10004C078();
  BOOL v9 = os_log_type_enabled((os_log_t)v3, v8);
  uint64_t v11 = *(void *)(v0 + 64);
  uint64_t v10 = *(void *)(v0 + 72);
  uint64_t v12 = *(void *)(v0 + 56);
  uint64_t v13 = *(void *)(v0 + 40);
  if (v9)
  {
    uint64_t v26 = *(void *)(v0 + 56);
    uint64_t v25 = *(void *)(v0 + 72);
    unint64_t v14 = (uint8_t *)sub_10000AE10(12LL);
    uint64_t v15 = sub_10000AE10(32LL);
    uint64_t v27 = v15;
    *(_DWORD *)unint64_t v14 = 136315138;
    uint64_t v16 = sub_100011AB4(v15, &qword_100132160, &OBJC_CLASS___LNSuggestionsRequest_ptr);
    swift_bridgeObjectRetain();
    uint64_t v18 = Array.description.getter(v17, v16);
    unint64_t v20 = v19;
    swift_bridgeObjectRelease(v13);
    *(void *)(v0 + 32) = sub_10000DE60(v18, v20, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v20);
    sub_10001191C(v13);
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v3,  v8,  "Fetching suggested actions for requests: %s",  v14,  0xCu);
    sub_10000AF48(v15);
    sub_10000AD78(v15);
    sub_10000AD78((uint64_t)v14);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v25, v26);
  }

  else
  {
    sub_10001191C(*(void *)(v0 + 40));

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }

  uint64_t v21 = sub_100008DB0(&qword_100132178);
  uint64_t v22 = swift_task_alloc(32LL);
  *(void *)(v0 + 88) = v22;
  *(_OWORD *)(v22 + 1sub_10000AC58(v0 + 6) = *(_OWORD *)(v0 + 40);
  uint64_t v23 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(void *)(v0 + 9sub_10000AC58(v0 + 6) = v23;
  void *v23 = v0;
  v23[1] = sub_100048F3C;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 16, v21, v21, 0LL, 0LL, &unk_100132188, v22, v21);
}

uint64_t sub_100048F3C()
{
  uint64_t v1 = *(void *)(v0 + 88);
  sub_10000E8E4(*(void *)(v0 + 96));
  swift_task_dealloc(v1);
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_100048F78()
{
  uint64_t v1 = *(os_log_s **)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = sub_10004C080();
  Logger.logObject.getter(v3);
  os_log_type_t v4 = sub_10004C078();
  if (os_log_type_enabled(v1, v4))
  {
    uint64_t v5 = (_DWORD *)sub_10000AE10(12LL);
    uint64_t v6 = sub_10000AE10(32LL);
    uint64_t v12 = v6;
    *uint64_t v5 = 136315138;
    sub_10000AFB0();
    uint64_t v7 = sub_100008DB0(&qword_100132170);
    uint64_t v8 = Dictionary.description.getter(v2, &type metadata for String, v7, &protocol witness table for String);
    unint64_t v10 = v9;
    sub_10001198C();
    *(void *)(v0 + 2sub_10000AC58(v0 + 4) = sub_10000DE60(v8, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v5 + 1, v5 + 3);
    swift_bridgeObjectRelease(v10);
    sub_10001191C(v2);
    sub_10004C04C((void *)&_mh_execute_header, v1, v4, "Fetching suggested actions succeeded with result: %s");
    sub_10000AF48(v6);
    sub_10000AD78(v6);
    sub_10000AD78((uint64_t)v5);
  }

  else
  {
    sub_10001191C(v2);
  }

  swift_task_dealloc(*(void *)(v0 + 72));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_1000490EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[26] = a3;
  v4[27] = a4;
  v4[24] = a1;
  v4[25] = a2;
  uint64_t v5 = sub_100008DB0((uint64_t *)&unk_100132190);
  v4[28] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[29] = v6;
  v4[30] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v7 = (*(void *)(*(void *)(sub_100008DB0(&qword_100131780) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[31] = swift_task_alloc(v7);
  v4[32] = swift_task_alloc(v7);
  return swift_task_switch(sub_100049188, 0LL, 0LL);
}

uint64_t sub_100049188()
{
  uint64_t v1 = *(void *)(v0 + 208);
  if (!((unint64_t)v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = sub_10000AE38();
    if (v2) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease(*(void *)(v0 + 208));
    uint64_t v37 = **(void **)(v0 + 200);
    uint64_t v38 = sub_100008DB0(&qword_100132178);
    TaskGroup.makeAsyncIterator()(v37, v38);
    unint64_t v39 = sub_10004B8FC();
    *(void *)(v0 + 26sub_10000AC58(v0 + 4) = v39;
    uint64_t v40 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
    *(void *)(v0 + 272) = v40;
    *uint64_t v40 = v0;
    v40[1] = sub_100049478;
    return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 184, *(void *)(v0 + 224), v39);
  }

  if (v1 < 0) {
    uint64_t v41 = *(void *)(v0 + 208);
  }
  else {
    uint64_t v41 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_10000AE38();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v41);
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_17;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v11 = 0LL;
    unint64_t v44 = v1 & 0xC000000000000001LL;
    uint64_t v43 = *(void *)(v0 + 208) + 32LL;
    uint64_t v45 = v2;
    do
    {
      if (v44) {
        uint64_t v12 = sub_10004C070(result, *(void *)(v0 + 208));
      }
      else {
        uint64_t v12 = (uint64_t)sub_10004BF68(result, v4, v5, v6, v7, v8, v9, v10, v42, v43);
      }
      uint64_t v13 = (void *)v12;
      uint64_t v15 = *(void *)(v0 + 248);
      uint64_t v14 = *(void *)(v0 + 256);
      uint64_t v16 = *(void **)(v0 + 216);
      uint64_t v17 = type metadata accessor for TaskPriority(0LL);
      sub_100009E60(v14, 1LL, 1LL, v17);
      uint64_t v18 = (void *)swift_allocObject(&unk_100124338, 48LL, 7LL);
      __int128 v18[2] = 0LL;
      unint64_t v19 = v18 + 2;
      v18[3] = 0LL;
      void v18[4] = v13;
      uint64_t v18[5] = v16;
      sub_10000E7A0(v14, v15);
      LODWORD(v1sub_10000AC58(v0 + 4) = sub_100009E6C(v15, 1LL, v17);
      id v20 = v13;
      id v21 = v16;
      uint64_t v22 = *(void *)(v0 + 248);
      if ((_DWORD)v14 == 1)
      {
        sub_10000E7E8(*(void *)(v0 + 248));
        uint64_t v23 = 0LL;
      }

      else
      {
        unsigned __int8 v24 = TaskPriority.rawValue.getter(v21);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8LL))(v22, v17);
        uint64_t v23 = v24;
      }

      uint64_t v25 = *v19;
      if (*v19)
      {
        uint64_t v26 = v18[3];
        uint64_t ObjectType = swift_getObjectType(*v19);
        swift_unknownObjectRetain(v25);
        uint64_t v28 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v26);
        uint64_t v30 = v29;
        swift_unknownObjectRelease(v25);
      }

      else
      {
        uint64_t v28 = 0LL;
        uint64_t v30 = 0LL;
      }

      uint64_t v31 = **(void **)(v0 + 200);
      uint64_t v32 = swift_allocObject(&unk_100124360, 32LL, 7LL);
      *(void *)(v32 + 1sub_10000AC58(v0 + 6) = &unk_1001321B0;
      *(void *)(v32 + 2sub_10000AC58(v0 + 4) = v18;
      uint64_t v33 = sub_100008DB0(&qword_100132178);
      uint64_t v34 = v30 | v28;
      if (v30 | v28)
      {
        *(void *)(v0 + 72) = 0LL;
        *(void *)(v0 + 8sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = 0LL;
        uint64_t v34 = v0 + 72;
        *(void *)(v0 + 88) = v28;
        *(void *)(v0 + 9sub_10000AC58(v0 + 6) = v30;
      }

      ++v11;
      uint64_t v35 = *(void *)(v0 + 256);
      *(void *)(v0 + 10sub_10000AC58(v0 + 4) = 1LL;
      *(void *)(v0 + 112) = v34;
      *(void *)(v0 + 12sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v31;
      uint64_t v36 = swift_task_create(v23 | 0x3100, v0 + 104, v33, &unk_1001321B8, v32);

      swift_release(v36);
      uint64_t result = sub_10000E7E8(v35);
    }

    while (v45 != v11);
    goto LABEL_17;
  }

  __break(1u);
  return result;
}

uint64_t sub_100049478()
{
  if (v1)
  {
    swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
    sub_10004BFEC();
  }

  else
  {
    *(void *)(v0 + 28sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = &_swiftEmptyDictionarySingleton;
  }

  sub_10000EA88();
  return sub_10000AE28();
}

void sub_1000494E8()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[35];
  if (!v1)
  {
    uint64_t v34 = v0[31];
    uint64_t v33 = v0[32];
    uint64_t v35 = v0[30];
    uint64_t v36 = (void *)v0[24];
    (*(void (**)(uint64_t, void))(v0[29] + 8LL))(v35, v0[28]);
    swift_bridgeObjectRelease(v0[23]);
    *uint64_t v36 = v2;
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    sub_10004BFC4();
    __asm { BR              X0 }
  }

  sub_10001C064();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
  v0[22] = v2;
  sub_10001B0C0(v1, sub_10004B940, 0LL);
  uint64_t v43 = v0[2];
  uint64_t v44 = v0[8];
  int64_t v45 = v0[5];
  unint64_t v4 = v0[6];
  uint64_t v41 = v0[3];
  uint64_t v42 = (void (*)(void *))v0[7];
  int64_t v40 = (unint64_t)(v0[4] + 64LL) >> 6;
  uint64_t v5 = (void *)v0[35];
  sub_10001C064();
  while (1)
  {
    v0[36] = v5;
    if (v4)
    {
      unint64_t v6 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v7 = v6 | (v45 << 6);
    }

    else
    {
      int64_t v8 = v45 + 1;
      if (__OFADD__(v45, 1LL)) {
        goto LABEL_42;
      }
      if (v8 >= v40) {
        goto LABEL_38;
      }
      unint64_t v9 = *(void *)(v41 + 8 * v8);
      int64_t v10 = v45 + 1;
      if (!v9)
      {
        sub_10004C0B8();
        if (v11 == v12) {
          goto LABEL_38;
        }
        sub_10004C0AC();
        if (!v9)
        {
          sub_10004C0B8();
          if (v11 == v12) {
            goto LABEL_38;
          }
          sub_10004C0AC();
          if (!v9)
          {
            sub_10004C0B8();
            if (v11 == v12) {
              goto LABEL_38;
            }
            sub_10004C0AC();
            if (!v9)
            {
              sub_10004C0B8();
              if (v11 == v12) {
                goto LABEL_38;
              }
              sub_10004C0AC();
              if (!v9)
              {
                int64_t v10 = v13 + 5;
                if (v13 + 5 >= v40) {
                  goto LABEL_38;
                }
                unint64_t v9 = *(void *)(v41 + 8 * v10);
                if (!v9)
                {
                  int64_t v14 = v45 + 7;
                  while (v14 < v40)
                  {
                    unint64_t v9 = *(void *)(v41 + 8 * v14++);
                    if (v9)
                    {
                      int64_t v10 = v14 - 1;
                      goto LABEL_26;
                    }
                  }

LABEL_26:
      unint64_t v4 = (v9 - 1) & v9;
      unint64_t v7 = __clz(__rbit64(v9)) + (v10 << 6);
      int64_t v45 = v10;
    }

    uint64_t v15 = (void *)(*(void *)(v43 + 48) + 16 * v7);
    uint64_t v16 = v15[1];
    uint64_t v17 = *(void *)(*(void *)(v43 + 56) + 8 * v7);
    v0[19] = *v15;
    v0[20] = v16;
    v0[21] = v17;
    swift_bridgeObjectRetain();
    sub_10001C064();
    v42(v0 + 19);
    sub_100011958();
    sub_10001BE7C();
    uint64_t v19 = v0[16];
    uint64_t v18 = v0[17];
    uint64_t v20 = v0[18];
    unint64_t v22 = sub_100015F98(v19, v18);
    uint64_t v23 = v5[2];
    BOOL v24 = (v21 & 1) == 0;
    uint64_t v25 = v23 + v24;
    if (__OFADD__(v23, v24)) {
      break;
    }
    char v26 = v21;
    if (v5[3] >= v25)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100008DB0(&qword_1001321C8);
        _NativeDictionary.copy()();
      }
    }

    else
    {
      sub_100017508(v25, isUniquelyReferenced_nonNull_native & 1);
      uint64_t v27 = sub_100015F98(v19, v18);
      if ((v26 & 1) != (v28 & 1))
      {
        sub_10004BFC4();
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v39);
        return;
      }

      unint64_t v22 = v27;
    }

    uint64_t v5 = (void *)v0[22];
    if ((v26 & 1) != 0)
    {
      sub_10001BE7C();
      uint64_t v29 = v5[7];
      swift_bridgeObjectRelease(*(void *)(v29 + 8 * v22));
      *(void *)(v29 + 8 * v22) = v20;
      char isUniquelyReferenced_nonNull_native = 1;
    }

    else
    {
      v5[(v22 >> 6) + 8] |= 1LL << v22;
      uint64_t v30 = (uint64_t *)(v5[6] + 16 * v22);
      *uint64_t v30 = v19;
      v30[1] = v18;
      *(void *)(v5[7] + 8 * v22) = v20;
      uint64_t v31 = v5[2];
      BOOL v12 = __OFADD__(v31, 1LL);
      uint64_t v32 = v31 + 1;
      if (v12) {
        goto LABEL_41;
      }
      _OWORD v5[2] = v32;
      char isUniquelyReferenced_nonNull_native = 1;
    }
  }

  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_1000498D4()
{
  uint64_t v3 = v0[36];
  if (v1)
  {
    swift_bridgeObjectRelease(v3);
    sub_10004BFEC();
  }

  else
  {
    v0[35] = v3;
  }

  sub_10000EA88();
  return sub_10000AE28();
}

uint64_t sub_100049938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[14] = a4;
  v5[15] = a5;
  v5[13] = a1;
  return swift_task_switch(sub_100049954, 0LL, 0LL);
}

uint64_t sub_100049954()
{
  if ([*(id *)(v0 + 112) isOnScreen])
  {
    uint64_t v1 = (void *)swift_task_alloc(dword_1001321E4);
    *(void *)(v0 + 128) = v1;
    uint64_t v2 = sub_10004C024(v1, (uint64_t)sub_1000499D4);
    return sub_100049BAC(v2);
  }

  else
  {
    unint64_t v4 = (void *)swift_task_alloc(dword_1001321D4);
    *(void *)(v0 + 13sub_10000AC58(v0 + 6) = v4;
    uint64_t v5 = sub_10004C024(v4, (uint64_t)sub_100049AC0);
    return sub_100049F90(v5);
  }

uint64_t sub_1000499D4()
{
  void v2[9] = v0;
  v2[10] = v1;
  sub_10000E8E4(v2[16]);
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_100049A0C()
{
  uint64_t v3 = *(void *)(v1 + 80);
  unint64_t v4 = *(void **)(v1 + 104);
  uint64_t v5 = sub_100008DB0(&qword_1001321D8);
  uint64_t inited = swift_initStackObject(v5, v1 + 16);
  *(_OWORD *)(inited + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
  id v7 = sub_10003F9CC(inited, "bundleIdentifier");
  sub_100011A74((uint64_t)v7);
  sub_10004BF2C();
  *(void *)(inited + 32) = v0;
  *(void *)(inited + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v2;
  *(void *)(inited + 48) = v3;
  uint64_t v8 = sub_100008DB0(&qword_100132170);
  *unint64_t v4 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v8, &protocol witness table for String);
  return sub_10000EA08(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100049AC0()
{
  v2[11] = v0;
  v2[12] = v1;
  sub_10000E8E4(v2[17]);
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_100049AF8()
{
  uint64_t v3 = *(void **)(v1 + 104);
  uint64_t v4 = *(void *)(v1 + 96);
  uint64_t v5 = sub_100008DB0(&qword_1001321D8);
  uint64_t inited = swift_initStackObject(v5, v1 + 16);
  *(_OWORD *)(inited + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
  id v7 = sub_10003F9CC(inited, "bundleIdentifier");
  sub_100011A74((uint64_t)v7);
  sub_10004BF2C();
  *(void *)(inited + 32) = v0;
  *(void *)(inited + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v2;
  *(void *)(inited + 48) = v4;
  uint64_t v8 = sub_100008DB0(&qword_100132170);
  *uint64_t v3 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v8, &protocol witness table for String);
  return sub_10000EA08(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100049BAC(uint64_t a1)
{
  _BYTE v2[8] = a1;
  void v2[9] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[10] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[11] = v4;
  v2[12] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100049C0C, 0LL, 0LL);
}

uint64_t sub_100049C0C()
{
  *(void *)(v1 + 10sub_10000AC58(v0 + 4) = v2;
  unint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)v3 + *v3);
  uint64_t v4 = (void *)swift_task_alloc(v3[1]);
  *(void *)(v1 + 112) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100049CA8;
  return v6(v0, v2);
}

uint64_t sub_100049CA8(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 112);
  uint64_t v5 = *v2;
  *(void *)(v5 + 12sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    sub_10000EA88();
    return sub_10000AE28();
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v5 + 104));
    swift_task_dealloc(*(void *)(v5 + 96));
    return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
  }

#error "100049E90: call analysis failed (funcsize=148)"
uint64_t sub_100049F90(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v2[8] = a1;
  void v2[9] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[10] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[11] = v4;
  v2[12] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100049FF0, 0LL, 0LL);
}

uint64_t sub_100049FF0( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_log_t log, uint64_t a12, int a13, os_log_type_t type, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31)
{
  uint64_t v32 = (char *)sub_10005A284();
  *(void *)(v31 + 10sub_10000AC58(v0 + 4) = v32;
  uint64_t v33 = *(void *)&v32[OBJC_IVAR____TtC10LinkDaemon8Registry_ready];
  *(void *)(v31 + 112) = v33;
  if (v33)
  {
    uint64_t v34 = async function pointer to Task<>.value.getter[1];
    swift_retain();
    uint64_t v35 = (void *)swift_task_alloc(v34);
    *(void *)(v31 + 12sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v35;
    *uint64_t v35 = v31;
    v35[1] = sub_10004A344;
    return ((uint64_t (*)(void))Task<>.value.getter)();
  }

  else
  {
    sub_100028048((uint64_t)[*(id *)(v31 + 64) bundleIdentifier]);
    sub_10004BF20();
    *(void *)(v31 + 128) = 0LL;
    uint64_t v37 = (void *)swift_task_alloc(dword_1001332C4);
    *(void *)(v31 + 13sub_10000AC58(v0 + 6) = v37;
    uint64_t v38 = sub_10004BE7C(v37, (uint64_t)sub_10004A3EC);
    return sub_10008FA38(v38, v39);
  }

uint64_t sub_10004A344()
{
  return sub_10000E998();
}

uint64_t sub_10004A380()
{
  *(void *)(v1 + 128) = v0;
  uint64_t v2 = (void *)swift_task_alloc(dword_1001332C4);
  *(void *)(v1 + 13sub_10000AC58(v0 + 6) = v2;
  uint64_t v3 = sub_10004BE7C(v2, (uint64_t)sub_10004A3EC);
  return sub_10008FA38(v3, v4);
}

uint64_t sub_10004A3EC()
{
  v0[18] = v2;
  v0[19] = v1;
  sub_10004C0C4(v3);
  if (!v1) {
    swift_bridgeObjectRelease(v0[16]);
  }
  sub_10000EA88();
  return sub_10004BEA0();
}

uint64_t sub_10004A440()
{
  *(void *)(v1 + 16sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v0;
  uint64_t v2 = (void *)swift_task_alloc(dword_100133724);
  *(void *)(v1 + 168) = v2;
  uint64_t v3 = sub_10004BE7C(v2, (uint64_t)sub_10004A4AC);
  return sub_10008FB14(v3, v4);
}

uint64_t sub_10004A4AC()
{
  v0[22] = v2;
  v0[23] = v1;
  sub_10004C0C4(v3);
  if (!v1) {
    swift_bridgeObjectRelease(v0[20]);
  }
  sub_10000EA88();
  return sub_10004BEA0();
}

void sub_10004A500()
{
  unint64_t v4 = v2[22];
  if (!(v4 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v5) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease(v2[22]);
    uint64_t v0 = _swiftEmptyArrayStorage;
LABEL_15:
    uint64_t v18 = sub_100069B10((uint64_t)v0);
    v2[24] = (uint64_t)v18;
    id v19 = sub_10003F9CC((uint64_t)v18, "bundleIdentifier");
    sub_100028048((uint64_t)v19);
    sub_10004BF20();
    v2[25] = v1;
    uint64_t v20 = (void *)swift_task_alloc(dword_1001336B4);
    v2[26] = (uint64_t)v20;
    uint64_t v21 = sub_10004BE7C(v20, (uint64_t)sub_10004A65C);
    sub_10008FBAC(v21, v22);
    return;
  }

  sub_10004BF74();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v0);
  sub_10001BE7C();
  if (!v5) {
    goto LABEL_14;
  }
LABEL_3:
  sub_10004C004();
  sub_100045518();
  if ((v5 & 0x8000000000000000LL) == 0)
  {
    uint64_t v1 = 0LL;
    sub_10004C038();
    do
    {
      if (v3) {
        int64_t v14 = (void *)sub_10004C070(v6, v2[22]);
      }
      else {
        int64_t v14 = sub_10004BF68(v6, v7, v8, v9, v10, v11, v12, v13, v23, v24);
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)([v14 identifier]);
      sub_10004C064();
      sub_10004C08C();
      if (v16)
      {
        sub_10004BFAC(v15);
        sub_100045518();
        uint64_t v0 = v25;
      }

      sub_10004BF38();
    }

    while (!v17);
    swift_bridgeObjectRelease(v2[22]);
    goto LABEL_15;
  }

  __break(1u);
}

uint64_t sub_10004A65C()
{
  v0[27] = v2;
  v0[28] = v1;
  sub_10004C0C4(v3);
  if (!v1) {
    swift_bridgeObjectRelease(v0[25]);
  }
  sub_10000EA88();
  return sub_10004BEA0();
}

void sub_10004A6B0()
{
  unint64_t v3 = v1[27];
  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease(v1[27]);
    uint64_t v0 = _swiftEmptyArrayStorage;
LABEL_15:
    uint64_t v17 = v1[24];
    uint64_t v18 = (void *)v1[8];
    id v19 = sub_100069BE0((uint64_t)v0);
    sub_100011AB4((uint64_t)v19, (unint64_t *)&unk_100130610, &OBJC_CLASS___AFPreferences_ptr);
    uint64_t v20 = sub_10000F764();
    v1[29] = sub_10004BA5C(v20, v21, (uint64_t)v19, v17);
    sub_100011A74((uint64_t)[v18 bundleIdentifier]);
    sub_10004BF2C();
    v1[30] = v19;
    uint64_t v22 = (void *)swift_task_alloc(dword_100132954);
    v1[31] = v22;
    *uint64_t v22 = v1;
    v22[1] = sub_10004A858;
    sub_100069D84(v1[18], (uint64_t)v18, (uint64_t)v19);
    return;
  }

  sub_10004BF74();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v0);
  sub_10001BE7C();
  if (!v4) {
    goto LABEL_14;
  }
LABEL_3:
  sub_10004C004();
  sub_100045428();
  if ((v4 & 0x8000000000000000LL) == 0)
  {
    sub_10004C038();
    do
    {
      if (v2) {
        uint64_t v13 = (void *)sub_10004C070(v5, v1[27]);
      }
      else {
        uint64_t v13 = sub_10004BF68(v5, v6, v7, v8, v9, v10, v11, v12, v23, v24);
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)([v13 identifier]);
      sub_10004C064();
      sub_10004C08C();
      if (v15)
      {
        sub_10004BFAC(v14);
        sub_100045428();
        uint64_t v0 = v25;
      }

      sub_10004BF38();
    }

    while (!v16);
    swift_bridgeObjectRelease(v1[27]);
    goto LABEL_15;
  }

  __break(1u);
}

uint64_t sub_10004A858(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 248);
  *(void *)(*v2 + 25sub_10000AC58(v0 + 6) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    sub_10001198C();
    sub_100011958();
  }

  else
  {
    sub_100011958();
    sub_10001198C();
    *(void *)(v4 + 26sub_10000AC58(v0 + 4) = a1;
  }

  sub_10000EA88();
  return swift_task_switch(v6, v7, v8);
}

uint64_t sub_10004A8E8()
{
  uint64_t v2 = *(void *)(v1 + 264);
  sub_10004BF0C();
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v2);
}

#error "10004A9DC: call analysis failed (funcsize=97)"
#error "10004AB80: call analysis failed (funcsize=99)"
#error "10004AD28: call analysis failed (funcsize=100)"
#error "10004AEBC: call analysis failed (funcsize=95)"
void __cdecl -[SuggestedActionsService suggestedActionsForSuggestionsRequests:reply:]( _TtC10LinkDaemon23SuggestedActionsService *self,  SEL a2,  NSArray *a3,  id a4)
{
  void *v6;
  void *v7;
  NSArray *v8;
  _TtC10LinkDaemon23SuggestedActionsService *v9;
  uint64_t v6 = _Block_copy(a4);
  uint64_t v7 = (void *)swift_allocObject(&unk_100124310, 40LL, 7LL);
  void v7[2] = a3;
  v7[3] = v6;
  v7[4] = self;
  uint64_t v8 = a3;
  uint64_t v9 = self;
  sub_1000BC15C((uint64_t)&unk_100132158, (uint64_t)v7);
}

uint64_t sub_10004B008(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = sub_10000A1A0(0LL, &qword_100132160, &OBJC_CLASS___LNSuggestionsRequest_ptr);
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, v6);
  void v3[4] = v7;
  uint64_t v8 = dword_10013216C;
  a3;
  uint64_t v9 = (void *)swift_task_alloc(v8);
  void v3[5] = v9;
  void *v9 = v3;
  v9[1] = sub_10004B0A8;
  return sub_100048C54(v7);
}

uint64_t sub_10004B0A8()
{
  unint64_t v3 = (void *)v1[2];
  uint64_t v2 = (void (**)(void, void, void))v1[3];
  sub_10000E8E4(v1[5]);
  sub_10001198C();

  sub_100008DB0(&qword_100132170);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  sub_10000ADB0();
  ((void (**)(void, Class, void))v2)[2](v2, isa, 0LL);

  _Block_release(v2);
  return sub_10000EA08(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004B140()
{
  return sub_100048BFC();
}

uint64_t sub_10004B154(void *a1, id a2)
{
  id v4 = [a2 identifier];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNSystemProtocolIdentifierOpenEntity);
  uint64_t v6 = sub_10004BF90();
  if (v5 == v6 && v2 == v7)
  {
    sub_10001191C(v2);
LABEL_17:

    uint64_t v22 = sub_100008DB0((uint64_t *)&unk_100132130);
    uint64_t inited = swift_initStackObject(v22, v66);
    *(_OWORD *)(inited + 1sub_10000AC58(v0 + 6) = xmmword_1000F5B50;
    sub_10004C058();
    v24[5] = v25;
    v24[6] = v26;
    v24[7] = 0x80000001000FA0E0LL;
    v24[8] = v26 + 5;
    sub_10004C058();
    *(void *)(v27 + 72) = v28;
    *(void *)(v27 + 8sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v29;
    sub_10004C058();
    *(void *)(v31 + 88) = v32;
    *(void *)(v31 + 9sub_10000AC58(v0 + 6) = v30 | 2;
    sub_10004C058();
    *(void *)(v33 + 10sub_10000AC58(v0 + 4) = v34;
    *(void *)(v33 + 32) = v35 | 1;
    uint64_t v36 = v33 + 32;
    id v37 = [a1 effectiveBundleIdentifiers];
    uint64_t v38 = sub_1000483E0(v37);

    uint64_t v39 = 0LL;
    uint64_t v40 = v38[2];
    do
    {
      if (v40)
      {
        uint64_t v41 = (uint64_t *)(v36 + 16 * v39);
        uint64_t v42 = *v41;
        uint64_t v43 = v41[1];
        uint64_t v44 = v38[4];
        uint64_t v45 = v38[5];
        BOOL v46 = v44 == *v41 && v45 == v43;
        if (v46 || (sub_10004BF14(v44, v45, *v41) & 1) != 0)
        {
LABEL_37:
          swift_setDeallocating(inited);
          sub_1000588E8();
          sub_10001198C();
          goto LABEL_40;
        }

        if (v40 != 1)
        {
          uint64_t v47 = v38 + 7;
          uint64_t v48 = 1LL;
          while (1)
          {
            uint64_t v49 = v48 + 1;
            if (__OFADD__(v48, 1LL)) {
              break;
            }
            uint64_t v50 = *(v47 - 1);
            uint64_t v51 = *v47;
            BOOL v52 = v50 == v42 && v51 == v43;
            if (v52 || (sub_10004BF14(v50, v51, v42) & 1) != 0) {
              goto LABEL_37;
            }
            v47 += 2;
            ++v48;
            if (v49 == v40) {
              goto LABEL_33;
            }
          }

          __break(1u);
          goto LABEL_47;
        }
      }

unint64_t sub_10004B580()
{
  unint64_t result = qword_100132140;
  if (!qword_100132140)
  {
    uint64_t v1 = type metadata accessor for NSFastEnumerationIterator(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSFastEnumerationIterator, v1);
    atomic_store(result, (unint64_t *)&qword_100132140);
  }

  return result;
}

uint64_t sub_10004B5C0()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10004B5F4()
{
  uint64_t v2 = v0[2];
  unint64_t v3 = (void *)v0[3];
  id v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_100132154);
  *(void *)(v1 + 1sub_10000AC58(v0 + 6) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10004BD5C;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100132150 + dword_100132150))(v2, v3, v4);
}

uint64_t sub_10004B660(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc(dword_100132184);
  *(void *)(v3 + 1sub_10000AC58(v0 + 6) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_10004BD5C;
  return sub_1000490EC(a1, a2, v7, v6);
}

uint64_t sub_10004B6CC(uint64_t a1, int *a2)
{
  *(void *)(v2 + 2sub_10000AC58(v0 + 4) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 32) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10004B734;
  return v5(v2 + 16);
}

uint64_t sub_10004B734()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v5 = v1;
  uint64_t v2 = (void *)v1[3];
  uint64_t v3 = (void *)*v0;
  sub_10004BEB8(v1[4], &v5);
  *uint64_t v2 = v1[2];
  return ((uint64_t (*)(void))v3[1])();
}

uint64_t sub_10004B780()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10004B7B4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_1001321A4);
  *(void *)(v2 + 1sub_10000AC58(v0 + 6) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10004B82C;
  return sub_100049938(a1, v4, v5, v7, v6);
}

uint64_t sub_10004B82C()
{
  return v0[1]();
}

uint64_t sub_10004B868()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004B88C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1001321AC);
  *(void *)(v2 + 1sub_10000AC58(v0 + 6) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10004B82C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1001321A8 + dword_1001321A8))(a1, v4);
}

unint64_t sub_10004B8FC()
{
  unint64_t result = qword_1001321C0;
  if (!qword_1001321C0)
  {
    uint64_t v1 = sub_100008E58((uint64_t *)&unk_100132190);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for TaskGroup<A>.Iterator, v1);
    atomic_store(result, (unint64_t *)&qword_1001321C0);
  }

  return result;
}

uint64_t sub_10004B940@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10001BA78(&v6, *a1, a1[1], a1[2]);
  uint64_t v4 = v6;
  *a2 = result;
  a2[1] = v5;
  a2[2] = v4;
  return result;
}

uint64_t sub_10004B980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v14 = &type metadata for SiriDiscoverabilityClosedAppSuggestionStrategy;
  char v15 = &off_100124440;
  char v10 = (void *)swift_allocObject(&unk_100124388, 48LL, 7LL);
  *(void *)&__int128 v13 = v10;
  __int128 v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = a4;
  uint64_t v11 = sub_100008DB0(&qword_1001321E8);
  *(void *)(a5 + 5sub_10000AC58(v0 + 6) = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v11,  &protocol witness table for String);
  *(void *)(a5 + 6sub_10000AC58(v0 + 4) = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  sub_100009EEC(&v13, a5 + 16);
  return a5;
}

uint64_t sub_10004BA5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v15[3] = &type metadata for SiriDiscoverabilityClosedAppSuggestionStrategy;
  void v15[4] = &off_100124440;
  uint64_t v8 = (void *)swift_allocObject(&unk_100124388, 48LL, 7LL);
  v15[0] = v8;
  void v8[2] = a1;
  v8[3] = a2;
  void v8[4] = a3;
  v8[5] = a4;
  uint64_t v9 = type metadata accessor for SuggestedActionsGenerator();
  uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
  uint64_t v11 = (void *)sub_10004BB58( (uint64_t)v15,  (uint64_t)&type metadata for SiriDiscoverabilityClosedAppSuggestionStrategy);
  initializeWithCopy for SiriDiscoverabilityClosedAppSuggestionStrategy(v14, v11);
  uint64_t v12 = sub_10004B980(v14[0], v14[1], v14[2], v14[3], v10);
  sub_10000AC58(v15);
  return v12;
}

uint64_t sub_10004BB24()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10004BB58(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t destroy for SiriDiscoverabilityClosedAppSuggestionStrategy(void *a1)
{
  return swift_bridgeObjectRelease(a1[3]);
}

void *initializeWithCopy for SiriDiscoverabilityClosedAppSuggestionStrategy(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  a1[2] = v4;
  a1[3] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *assignWithCopy for SiriDiscoverabilityClosedAppSuggestionStrategy(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

void *assignWithTake for SiriDiscoverabilityClosedAppSuggestionStrategy(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a1[3];
  a1[3] = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriDiscoverabilityClosedAppSuggestionStrategy(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(sub_10004BEB8(v0[37], v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_10004BEB8(v0[37], v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_10004BEB8(v0[37], v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriDiscoverabilityClosedAppSuggestionStrategy( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 1sub_10000AC58(v0 + 6) = 0LL;
    *(void *)(result + 2sub_10000AC58(v0 + 4) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 1sub_10000AC58(v0 + 6) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SiriDiscoverabilityClosedAppSuggestionStrategy()
{
  return &type metadata for SiriDiscoverabilityClosedAppSuggestionStrategy;
}

uint64_t sub_10004BD60(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10004BD7C()
{
  return swift_slowAlloc(22LL, -1LL);
}

uint64_t sub_10004BDA4()
{
  return swift_errorRelease(v0);
}

uint64_t sub_10004BDAC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(_WORD *)(v13 + 12) = 2080;
  return swift_getErrorValue(v11, v12, a11);
}

uint64_t sub_10004BDC8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a10, v11, v10, v12);
}

uint64_t sub_10004BDE4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100008D98(v3, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
}

void sub_10004BE08( void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_log_t log, uint64_t a13, int a14, os_log_type_t type)
{
}

uint64_t sub_10004BE20( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)(v13 + 5sub_10000AC58(v0 + 6) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a13, v15, v14, v16 + 22);
}

id sub_10004BE38(float a1)
{
  *uint64_t v3 = a1;
  *(void *)(v2 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v1;
  return v1;
}

BOOL sub_10004BE50(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

uint64_t sub_10004BE7C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_10004BE94()
{
  return Error.localizedDescription.getter(*(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10004BEA0()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_10004BEAC(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2, v3);
}

uint64_t sub_10004BEB8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = v2;
  return swift_task_dealloc(a1);
}

  ;
}

void sub_10004BED4()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_10004BEE4()
{
  return v0;
}

uint64_t sub_10004BEF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return a16;
}

uint64_t sub_10004BF04()
{
  return swift_errorRetain(v0);
}

uint64_t sub_10004BF0C()
{
  return swift_task_dealloc(*(void *)(v0 + 96));
}

uint64_t sub_10004BF14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, v3, 0LL);
}

void sub_10004BF20()
{
}

void sub_10004BF2C()
{
}

void sub_10004BF38()
{
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v4;
  uint64_t v6 = (void *)(v0 + 24 * v5);
  v6[4] = v2;
  v6[5] = v3;
  v6[6] = v1;
}

  ;
}

id sub_10004BF68( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return *(id *)(a10 + 8 * v10);
}

uint64_t sub_10004BF74()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10004BF88()
{
  return Logger.logObject.getter();
}

uint64_t sub_10004BF90()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

void sub_10004BF9C()
{
  *(void *)(v1 - 8) = *v0;
}

BOOL sub_10004BFAC@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

  ;
}

  ;
}

uint64_t sub_10004BFEC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_10004BFFC()
{
  *uint64_t v2 = v0;
}

uint64_t sub_10004C004()
{
  return 0LL;
}

uint64_t sub_10004C01C()
{
  return swift_errorRelease(v0);
}

uint64_t sub_10004C024@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 112);
}

  ;
}

void sub_10004C04C(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

  ;
}

void sub_10004C064()
{
}

uint64_t sub_10004C070(uint64_t a1, uint64_t a2)
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v2, a2);
}

uint64_t sub_10004C078()
{
  return static os_log_type_t.debug.getter();
}

uint64_t sub_10004C080()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

  ;
}

uint64_t sub_10004C0A0()
{
  return swift_release(*(void *)(v0 + 232));
}

  ;
}

  ;
}

uint64_t sub_10004C0C4@<X0>(uint64_t a1@<X8>)
{
  return swift_task_dealloc(a1);
}

void sub_10004C0CC(uint64_t a1)
{
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_10004D324(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(v2 - 8) + 64LL;
    void v4[3] = &unk_1000F6410;
    void v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initClassMetadata2(a1, 0LL, 5LL, v4, a1 + 96);
  }

uint64_t sub_10004C168()
{
  *(void *)(v1 + 6sub_10000AC58(v0 + 4) = v0;
  *(void *)(v1 + 72) = *v0;
  return sub_10004D7D8((uint64_t)sub_10004C184, (uint64_t)v0);
}

uint64_t sub_10004C184()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v3 = sub_10000C254((uint64_t)&unk_100124610, 24LL);
  uint64_t v4 = *(void **)(v1 + 112);
  swift_unknownObjectWeakInit(v3 + 16, v4);
  uint64_t v5 = sub_10000C254((uint64_t)&unk_100124638, 24LL);
  swift_weakInit(v5 + 16, v1);
  uint64_t v6 = (void *)sub_10000C254((uint64_t)&unk_100124660, 48LL);
  uint64_t v6[2] = *(void *)(v2 + 80);
  void v6[3] = *(void *)(v2 + 88);
  v6[4] = v5;
  v6[5] = v3;
  v0[6] = sub_10004D5D4;
  v0[7] = v6;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256LL;
  v0[4] = sub_10004D11C;
  v0[5] = &unk_100124678;
  uint64_t v7 = _Block_copy(v0 + 2);
  swift_retain();
  swift_release();
  [v4 scheduleWithBlock:v7];
  _Block_release(v7);
  swift_release();
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_10004C2A4( uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v58 = a6;
  uint64_t v11 = sub_100008DB0(&qword_100131780);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a3 += 16LL;
  swift_beginAccess(a3, v61, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a3);
  if (!Strong) {
    return a1(1LL);
  }
  uint64_t v19 = Strong;
  uint64_t v20 = (void *)objc_opt_self(&OBJC_CLASS___LNFeatures_tvOS);
  if (([v20 isHomePod] & 1) != 0
    && ([v20 homeRVCEnabled] & 1) == 0)
  {
    uint64_t v46 = 1LL;
    goto LABEL_14;
  }

  uint64_t v55 = v15;
  uint64_t v56 = v14;
  v60[0] = a5;
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata(a5);
  uint64_t v57 = String.init<A>(describing:)(v60, MetatypeMetadata);
  unint64_t v23 = v22;
  v60[0] = a5;
  uint64_t v24 = sub_100008DB0((uint64_t *)&unk_100132590);
  uint64_t v26 = String.init<A>(describing:)(v60, v24);
  uint64_t result = LNLogSubsystem;
  if (!LNLogSubsystem)
  {
    __break(1u);
    return result;
  }

  uint64_t v28 = v25;
  uint64_t v54 = a4 + 16;
  uint64_t v29 = String.init(cString:)(LNLogSubsystem);
  Logger.init(subsystem:category:)(v29, v30, v26, v28);
  uint64_t v31 = swift_bridgeObjectRetain_n(v23, 2LL);
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = swift_slowAlloc(22LL, -1LL);
    uint64_t v51 = v19;
    uint64_t v35 = v34;
    uint64_t v36 = swift_slowAlloc(64LL, -1LL);
    uint64_t v53 = a2;
    uint64_t v50 = v36;
    v60[0] = v36;
    *(_DWORD *)uint64_t v35 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v59 = sub_10000DE60(v57, v23, v60);
    BOOL v52 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60, v35 + 4, v35 + 12);
    swift_bridgeObjectRelease_n(v23, 3LL);
    *(_WORD *)(v35 + 12) = 2080;
    uint64_t v37 = (*(uint64_t (**)(uint64_t))(v58 + 8))(a5);
    unint64_t v39 = v38;
    uint64_t v59 = sub_10000DE60(v37, v38, v60);
    a1 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60, v35 + 14, v35 + 22);
    swift_bridgeObjectRelease(v39);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "%s started XPC activity %s", (uint8_t *)v35, 0x16u);
    uint64_t v40 = v50;
    swift_arrayDestroy(v50, 2LL);
    a2 = v53;
    swift_slowDealloc(v40, -1LL, -1LL);
    uint64_t v41 = v35;
    uint64_t v19 = v51;
    swift_slowDealloc(v41, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v23, 2LL);
  }

  (*(void (**)(char *, uint64_t))(v55 + 8))(v17, v56);
  uint64_t v42 = v54;
  swift_beginAccess(v54, v60, 0LL, 0LL);
  uint64_t v43 = (void *)swift_unknownObjectWeakLoadStrong(v42);
  if (v43)
  {
    uint64_t v44 = v43;
    unsigned int v45 = [v43 shouldDefer];

    if (v45)
    {
      swift_bridgeObjectRelease(v23);
      uint64_t v46 = 2LL;
LABEL_14:
      a1(v46);
      return swift_release();
    }
  }

  uint64_t v47 = type metadata accessor for TaskPriority(0LL);
  sub_100009E60((uint64_t)v13, 1LL, 1LL, v47);
  uint64_t v48 = (void *)swift_allocObject(&unk_1001246D8, 72LL, 7LL);
  v48[2] = 0LL;
  v48[3] = 0LL;
  uint64_t v49 = v57;
  v48[4] = v19;
  void v48[5] = v49;
  v48[6] = v23;
  v48[7] = a1;
  v48[8] = a2;
  swift_retain();
  sub_10000D1F0((uint64_t)v13, (uint64_t)&unk_1001322E0, (uint64_t)v48);
  return swift_release();
}

uint64_t sub_10004C6B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[27] = a7;
  v8[28] = a8;
  v8[25] = a5;
  v8[26] = a6;
  _BYTE v8[24] = a4;
  uint64_t v9 = *a4;
  v8[29] = *a4;
  uint64_t v10 = type metadata accessor for Logger(0LL);
  v8[30] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v8[31] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[32] = swift_task_alloc(v12);
  v8[33] = swift_task_alloc(v12);
  v8[34] = swift_task_alloc(v12);
  v8[35] = swift_task_alloc(v12);
  uint64_t v13 = *(void *)(v9 + 80);
  v8[36] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v8[37] = v14;
  v8[38] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10004C774, 0LL, 0LL);
}

uint64_t sub_10004C774()
{
  uint64_t v1 = *(void *)(v0[29] + 88LL);
  v0[39] = v1;
  uint64_t v2 = *(int **)(v1 + 16);
  uint64_t v5 = (int *)((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc(v2[1]);
  v0[40] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10004CA94;
  return ((uint64_t (*)(void, uint64_t))v5)(v0[36], v1);
}

uint64_t sub_10004CA94(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 320);
  *(void *)(*v2 + 328) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_10004CE54;
  }

  else
  {
    *(_BYTE *)(v4 + 33sub_10000AC58(v0 + 6) = a1;
    uint64_t v6 = sub_10004CB08;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_10004CB08()
{
  uint64_t v2 = *(void *)(v0 + 288);
  if ((*(_BYTE *)(v0 + 336) & 1) != 0)
  {
    *(void *)(v0 + 14sub_10000AC58(v0 + 4) = v2;
    uint64_t v47 = sub_100008DB0((uint64_t *)&unk_100132590);
    sub_10004D7CC(v47);
    uint64_t result = LNLogSubsystem;
    if (LNLogSubsystem)
    {
      uint64_t v48 = String.init(cString:)(LNLogSubsystem);
      sub_10001BEA0(v48, v49);
      uint64_t v50 = sub_10004D86C();
      uint64_t v51 = (void *)Logger.logObject.getter(v50);
      os_log_type_t v52 = static os_log_type_t.default.getter();
      if (sub_10004D7F0(v52))
      {
        sub_10004D830();
        uint64_t v53 = sub_10004D780();
        uint64_t v121 = sub_10000AE10(64LL);
        uint64_t v54 = sub_10004D810(4.8151e-34);
        *(void *)(v0 + 152) = sub_10004D820(v54, v55, v56, v57, v58, v59, v60, v61);
        sub_10004D778(v107, v0 + 160, v62, v53 + 12);
        uint64_t v63 = sub_100027E5C(v1);
        uint64_t v71 = sub_10004D754(v63, v64, v65, v66, v67, v68, v69, v70, v102, v107, v112);
        *(void *)(v0 + 16sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = sub_10004D898(v71, v72, v73, v74, v75, v76, v77, v78, v105, v110);
        sub_10004D778(v0 + 160, v0 + 168, v79, v53 + 22);
        sub_10000ADB0();
        sub_10004D7B8((void *)&_mh_execute_header, v80, v81, "%s deferred XPC activity %s");
        uint64_t v82 = 2LL;
        sub_10004D84C();
        sub_10000AD78(v121);
        sub_10000AD78(v53);

        sub_10004D7E0(v83, v84, v85, v86, v87, v88, v89, v90, v106, v111, v114, v115, v116, v117);
        (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v119, v1);
      }

      else
      {
        uint64_t v97 = *(void *)(v0 + 296);
        uint64_t v96 = *(void *)(v0 + 304);
        uint64_t v98 = *(void *)(v0 + 288);
        uint64_t v99 = *(void *)(v0 + 248);
        uint64_t v100 = *(void *)(v0 + 208);

        uint64_t v82 = 2LL;
        sub_10001191C(v100);
        sub_10004D860(*(uint64_t (**)(uint64_t, uint64_t))(v99 + 8));
        (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v96, v98);
      }

LABEL_11:
      uint64_t v101 = *(void *)(v0 + 256);
      (*(void (**)(uint64_t))(v0 + 216))(v82);
      sub_10000AFA8();
      sub_10004D844();
      sub_10004D858();
      sub_10004D884();
      swift_task_dealloc(v101);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }

  else
  {
    *(void *)(v0 + 168) = v2;
    uint64_t v3 = sub_100008DB0((uint64_t *)&unk_100132590);
    sub_10004D7CC(v3);
    uint64_t result = LNLogSubsystem;
    if (LNLogSubsystem)
    {
      uint64_t v5 = String.init(cString:)(LNLogSubsystem);
      sub_10001BEA0(v5, v6);
      uint64_t v7 = sub_10004D86C();
      uint64_t v8 = (void *)Logger.logObject.getter(v7);
      os_log_type_t v9 = static os_log_type_t.default.getter();
      if (sub_10004D7F0(v9))
      {
        sub_10004D830();
        uint64_t v10 = sub_10004D780();
        uint64_t v120 = sub_10000AE10(64LL);
        uint64_t v11 = sub_10004D810(4.8151e-34);
        *(void *)(v0 + 17sub_10000AC58(v0 + 6) = sub_10004D820(v11, v12, v13, v14, v15, v16, v17, v18);
        sub_10004D778(v107, v0 + 184, v19, v10 + 12);
        uint64_t v20 = sub_100027E5C(v1);
        uint64_t v28 = sub_10004D754(v20, v21, v22, v23, v24, v25, v26, v27, v102, v107, v112);
        *(void *)(v0 + 18sub_10000AC58(v0 + 4) = sub_10004D898(v28, v29, v30, v31, v32, v33, v34, v35, v103, v108);
        sub_10004D778(v0 + 184, v0 + 192, v36, v10 + 22);
        sub_10000ADB0();
        sub_10004D7B8((void *)&_mh_execute_header, v37, v38, "%s finished XPC activity %s");
        sub_10004D84C();
        sub_10000AD78(v120);
        sub_10000AD78(v10);

        sub_10004D7E0(v39, v40, v41, v42, v43, v44, v45, v46, v104, v109, v113, v115, v116, v117);
        (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v119, v1);
      }

      else
      {
        uint64_t v92 = *(void *)(v0 + 296);
        uint64_t v91 = *(void *)(v0 + 304);
        uint64_t v93 = *(void *)(v0 + 288);
        uint64_t v94 = *(void *)(v0 + 248);
        uint64_t v95 = *(void *)(v0 + 208);

        sub_10001191C(v95);
        sub_10004D860(*(uint64_t (**)(uint64_t, uint64_t))(v94 + 8));
        (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v91, v93);
      }

      uint64_t v82 = 1LL;
      goto LABEL_11;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

  __chkstk_darwin(a16);
  *(&v58 - sub_10000AC58(v0 + 4) = v31;
  *(&v58 - 3) = v41;
  *(&v58 - 2) = (uint64_t)v38;
  sub_10004FBA4(v47, (void (*)(id, uint64_t, uint64_t))sub_100058D38);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10004FD88(a17, v31, v41, v38);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100050110(a18, a1, v31, v41, v38);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100050278(a19, v31, v41, v38);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10004F430(a20, v31, v41, v38);
  if (!((unint64_t)a21 >> 62))
  {
    if (!*(void *)((a21 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }

  if (a21 < 0) {
    os_log_type_t v52 = a21;
  }
  else {
    os_log_type_t v52 = a21 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v53 = _CocoaArrayWrapper.endIndex.getter(v52);
  swift_bridgeObjectRelease();
  if (v53)
  {
LABEL_13:
    swift_retain();
    swift_bridgeObjectRetain();
    sub_100050600(a21, v31, v41, v38);
  }

  sub_100038920();
  return sub_10001DEC4();
}

      uint64_t v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10) {
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
      goto LABEL_5;
    }

    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v14 + v8, v9 - v8);
  }

uint64_t sub_10004CE54()
{
  *(void *)(v0 + 9sub_10000AC58(v0 + 6) = *(void *)(v0 + 288);
  uint64_t v1 = sub_100008DB0((uint64_t *)&unk_100132590);
  String.init<A>(describing:)(v0 + 96, v1);
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    uint64_t v3 = String.init(cString:)(LNLogSubsystem);
    sub_10001BEA0(v3, v4);
    sub_10001BCF8();
    sub_10000ADF4();
    sub_10001BCF8();
    uint64_t v5 = sub_10000ADF4();
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = *(void *)(v0 + 328);
    if (v8)
    {
      uint64_t v10 = *(void *)(v0 + 312);
      uint64_t v32 = *(void *)(v0 + 296);
      uint64_t v33 = *(void *)(v0 + 304);
      uint64_t v34 = *(void *)(v0 + 288);
      uint64_t v29 = *(void *)(v0 + 248);
      uint64_t v30 = *(void *)(v0 + 240);
      uint64_t v31 = *(void *)(v0 + 256);
      uint64_t v11 = *(void *)(v0 + 200);
      unint64_t v12 = *(void *)(v0 + 208);
      uint64_t v13 = sub_10000AE10(32LL);
      uint64_t v28 = sub_10000AE10(96LL);
      uint64_t v35 = v28;
      *(_DWORD *)uint64_t v13 = 136315650;
      sub_10001BCF8();
      *(void *)(v0 + 10sub_10000AC58(v0 + 4) = sub_10000DE60(v11, v12, &v35);
      sub_10004D778(v0 + 104, v0 + 112, v14, v13 + 12);
      sub_100027E5C(v12);
      uint64_t v15 = 2080LL;
      *(_WORD *)(v13 + 12) = 2080;
      uint64_t v16 = (*(uint64_t (**)(void))(v10 + 8))();
      *(void *)(v0 + 112) = sub_10004D88C(v16, v17);
      sub_10004D778(v0 + 112, v0 + 120, v18, v13 + 22);
      sub_10000ADB0();
      *(_WORD *)(v13 + 22) = 2080;
      swift_getErrorValue(v9, v0 + 120, v0 + 16);
      uint64_t v19 = Error.localizedDescription.getter(*(void *)(v0 + 24), *(void *)(v0 + 32));
      *(void *)(v0 + 13sub_10000AC58(v0 + 6) = sub_10004D88C(v19, v20);
      sub_10004D778(v0 + 136, v0 + 144, v21, v13 + 32);
      sub_10000ADB0();
      sub_10004BDA4();
      sub_10004BDA4();
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "%s failed to handle XPC activity %s: %s",  (uint8_t *)v13,  0x20u);
      sub_10004D878();
      sub_10000AD78(v28);
      sub_10000AD78(v13);

      sub_10004BDA4();
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v31, v30);
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
    }

    else
    {
      uint64_t v23 = *(void *)(v0 + 296);
      uint64_t v22 = *(void *)(v0 + 304);
      uint64_t v24 = *(void *)(v0 + 288);
      uint64_t v26 = *(void *)(v0 + 248);
      uint64_t v25 = *(void *)(v0 + 256);
      uint64_t v15 = *(void *)(v0 + 240);
      uint64_t v27 = *(void *)(v0 + 208);

      sub_10004BDA4();
      sub_10004BDA4();
      sub_10001191C(v27);
      sub_10004BDA4();
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v15);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    }

    sub_10004D7A0();
    sub_10000AFA8();
    sub_10004D844();
    sub_10004D858();
    sub_10004D884();
    swift_task_dealloc(v15);
    return sub_10004D738(*(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10004D11C(uint64_t a1, void *aBlock)
{
  uint64_t v2 = *(void (**)(uint64_t (*)(), uint64_t))(a1 + 32);
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = swift_allocObject(&unk_1001246B0, 24LL, 7LL);
  *(void *)(v4 + 1sub_10000AC58(v0 + 6) = v3;
  swift_retain();
  v2(sub_10004D614, v4);
  swift_release();
  return swift_release();
}

uint64_t sub_10004D18C()
{
  *(void *)(v1 + 1sub_10000AC58(v0 + 6) = v0;
  return sub_10004D7D8((uint64_t)sub_10004D1A0, v0);
}

uint64_t sub_10004D1A0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  [*(id *)(v1 + 112) invalidate];
  uint64_t v2 = *(void *)(v1 + qword_100132200);
  *(void *)(v0 + 2sub_10000AC58(v0 + 4) = v2;
  if (!v2) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  uint64_t v3 = async function pointer to Task<>.value.getter[1];
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc(v3);
  *(void *)(v0 + 32) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10004D240;
  return Task<>.value.getter();
}

uint64_t sub_10004D240()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 32LL));
  swift_release();
  return swift_task_switch(sub_10004D2A0, v1, 0LL);
}

uint64_t sub_10004D2A0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004D2AC()
{
  sub_10004D6F4(v0 + qword_1001321F8);
  swift_release();
  swift_release();
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10004D300()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for XPCActivityEntryPoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C8B4(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for XPCActivityEntryPoint);
}

void sub_10004D324(uint64_t a1)
{
  if (!qword_100132288)
  {
    uint64_t v2 = sub_100008E58(&qword_100131F80);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_100132288);
    }
  }

uint64_t storeEnumTagSinglePayload for XPCActivityResult(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(vsub_10000AC58(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_10000AC58(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10004D3C8 + 4 * byte_1000F63B5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10004D3FC + 4 * byte_1000F63B0[v4]))();
}

uint64_t sub_10004D3FC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004D404(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10004D40CLL);
  }
  return result;
}

uint64_t sub_10004D418(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10004D420LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10004D424(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004D42C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCActivityResult()
{
  return &type metadata for XPCActivityResult;
}

unint64_t sub_10004D44C()
{
  unint64_t result = qword_100132290;
  if (!qword_100132290)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F64A4, &type metadata for XPCActivityResult);
    atomic_store(result, (unint64_t *)&qword_100132290);
  }

  return result;
}

void PrimaryKey.hash(into:)(uint64_t a1, char a2)
{
}

uint64_t sub_10004D4AC()
{
  __int16 v1 = (void *)swift_task_alloc(dword_1001322D4);
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  *__int16 v1 = v0;
  v1[1] = sub_10004D734;
  return sub_10004C168();
}

uint64_t sub_10004D4F4()
{
  __int16 v1 = (void *)swift_task_alloc(dword_1001322CC);
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  *__int16 v1 = v0;
  v1[1] = sub_10004D53C;
  return sub_10004D18C();
}

uint64_t sub_10004D53C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10004D568(uint64_t a1)
{
}

uint64_t sub_10004D570()
{
  uint64_t v1 = sub_10004D800();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10004D58C()
{
  uint64_t v1 = sub_10004D800();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10004D5A8()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10004D5D4(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return sub_10004C2A4(a1, a2, v2[4], v2[5], v2[2], v2[3]);
}

uint64_t sub_10004D5E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004D5F0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10004D5F8()
{
  uint64_t v1 = sub_10004D800();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10004D614()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_10004D624()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_10004D660(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (uint64_t *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc(dword_1001322DC);
  *(void *)(v2 + 1sub_10000AC58(v0 + 6) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_10004D53C;
  return sub_10004C6B8(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10004D6F4(uint64_t a1)
{
  uint64_t v2 = sub_100008DB0(&qword_1001322E8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10004D738(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10004D754( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(_WORD *)(v12 + 12) = 2080;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(a11, v11);
}

uint64_t sub_10004D778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v4, a4);
}

uint64_t sub_10004D780()
{
  return swift_slowAlloc(22LL, -1LL);
}

uint64_t sub_10004D7A0()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 216))(1LL);
}

void sub_10004D7B8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_10004D7CC(uint64_t a1)
{
  return String.init<A>(describing:)(v1, a1);
}

uint64_t sub_10004D7D8(uint64_t a1, uint64_t a2)
{
  return swift_task_switch(a1, a2, 0LL);
}

uint64_t sub_10004D7E0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a12 + 8))(a14, a13);
}

BOOL sub_10004D7F0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10004D800()
{
  return v0;
}

uint64_t sub_10004D810(float a1)
{
  *uint64_t v2 = a1;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_10004D820( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  return sub_10000DE60(v8, v9, (uint64_t *)va);
}

  ;
}

uint64_t sub_10004D844()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_10004D84C()
{
  return swift_arrayDestroy(v0, 2LL);
}

uint64_t sub_10004D858()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_10004D860@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_10004D86C()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_10004D878()
{
  return swift_arrayDestroy(v0, 3LL);
}

uint64_t sub_10004D884()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_10004D88C(uint64_t a1, unint64_t a2)
{
  return sub_10000DE60(a1, a2, (uint64_t *)(v2 - 80));
}

uint64_t sub_10004D898( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  return sub_10000DE60(a1, a2, (uint64_t *)va);
}

uint64_t sub_10004D8A4( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  return sub_10000DE60(a1, a2, (uint64_t *)va);
}

uint64_t sub_10004D8B0()
{
  uint64_t v10 = 0LL;
  if (!CPCopyBundleIdentifierAndTeamFromAuditToken(&v9, &v10, 0LL))
  {
    if (qword_1001302D8 != -1) {
      swift_once(&qword_1001302D8, sub_100088814);
    }
    uint64_t v3 = type metadata accessor for Logger(0LL);
    uint64_t v4 = sub_100008D98(v3, (uint64_t)qword_100135780);
    os_log_type_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "CPCopyBundleIdentifierAndTeamFromAuditToken returned false",  v7,  2u);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    return 0LL;
  }

  uint64_t v1 = v10;
  if (!v10) {
    return 0LL;
  }
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

  return v2;
}

uint64_t sub_10004DA14(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (uint64_t *)&APP_SANDBOX_READ;
  if ((a2 & 1) != 0) {
    uint64_t v11 = (uint64_t *)&APP_SANDBOX_READ_WRITE;
  }
  uint64_t v12 = *v11;
  uint64_t v13 = URL.path.getter(v8);
  uint64_t v15 = v14;
  uint64_t v16 = SANDBOX_EXTENSION_DEFAULT;
  [v3 auditToken];
  __int128 v55 = v58;
  __int128 v56 = v57;
  uint64_t v17 = String.utf8CString.getter(v13, v15);
  swift_bridgeObjectRelease(v15);
  __int128 v57 = v56;
  __int128 v58 = v55;
  uint64_t v18 = (void *)sandbox_extension_issue_file_to_process(v12, v17 + 32, v16, &v57);
  uint64_t v19 = swift_release(v17);
  if (v18)
  {
    uint64_t v20 = String.init(cString:)(v18);
    free(v18);
  }

  else
  {
    uint64_t v21 = v3;
    int v22 = errno.getter(v19);
    int v23 = v22;
    if (v22 == 2) {
      int v24 = 0;
    }
    else {
      int v24 = v22;
    }
    if (qword_1001302D8 != -1) {
      swift_once(&qword_1001302D8, sub_100088814);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    sub_100008D98(v25, (uint64_t)qword_100135780);
    uint64_t v26 = v10;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
    id v27 = v21;
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.error.getter();
    int v30 = v29;
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v53 = v7;
      uint64_t v54 = v6;
      uint64_t v31 = sub_10000AE10(32LL);
      uint64_t v32 = (void *)sub_10000AE10(8LL);
      *(void *)&__int128 v55 = sub_10000AE10(64LL);
      uint64_t v59 = v55;
      *(_DWORD *)uint64_t v31 = 138412802;
      int v52 = v30;
      unint64_t v33 = sub_10004E040();
      uint64_t v34 = sub_100038AC8((uint64_t)&type metadata for IssueSandboxExceptionError, v33);
      *(_DWORD *)uint64_t v35 = v24;
      *(_BYTE *)(v35 + sub_10000AC58(v0 + 4) = v23 == 2;
      uint64_t v36 = _swift_stdlib_bridgeErrorToNSError(v34);
      LODWORD(v5sub_10000AC58(v0 + 6) = v24;
      uint64_t v37 = v36;
      *(void *)&__int128 v57 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, (char *)&v57 + 8, v31 + 4, v31 + 12);
      *uint64_t v32 = v37;
      *(_WORD *)(v31 + 12) = 2080;
      [v27 auditToken];
      type metadata accessor for audit_token_t(0LL);
      uint64_t v39 = String.init<A>(describing:)(&v57, v38);
      unint64_t v41 = v40;
      *(void *)&__int128 v57 = sub_10000DE60(v39, v40, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, (char *)&v57 + 8, v31 + 14, v31 + 22);

      unint64_t v42 = v41;
      int v24 = v56;
      uint64_t v43 = swift_bridgeObjectRelease(v42);
      *(_WORD *)(v31 + 22) = 2080;
      uint64_t v44 = URL.path.getter(v43);
      unint64_t v46 = v45;
      *(void *)&__int128 v57 = sub_10000DE60(v44, v45, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, (char *)&v57 + 8, v31 + 24, v31 + 32);
      swift_bridgeObjectRelease(v46);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v26, v54);
      _os_log_impl( (void *)&_mh_execute_header,  v28,  (os_log_type_t)v52,  "Failed to issue sandbox extension: %@. auditToken %s, path %s",  (uint8_t *)v31,  0x20u);
      sub_100008DB0((uint64_t *)&unk_100132620);
      swift_arrayDestroy(v32, 1LL);
      sub_10000AD78((uint64_t)v32);
      uint64_t v47 = v55;
      swift_arrayDestroy(v55, 2LL);
      sub_10000AD78(v47);
      sub_10000AD78(v31);
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v7 + 8))(v26, v6);
    }

    uint64_t v20 = v23 == 2;
    unint64_t v48 = sub_10004E040();
    sub_100038AC8((uint64_t)&type metadata for IssueSandboxExceptionError, v48);
    *(_DWORD *)uint64_t v49 = v24;
    *(_BYTE *)(v49 + sub_10000AC58(v0 + 4) = v20;
    swift_willThrow();
  }

  return v20;
}

uint64_t sub_10004DE24(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v3 valueForEntitlement:v5];

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)(v13, v6);
    swift_unknownObjectRelease(v6);
  }

  else
  {
    memset(v13, 0, sizeof(v13));
  }

  sub_10000C1D0((uint64_t)v13, (uint64_t)v14);
  if (!v15)
  {
    sub_10000F3D8((uint64_t)v14);
    goto LABEL_9;
  }

  unint64_t v7 = sub_10004E004();
  if ((swift_dynamicCast(&v12, v14, (char *)&type metadata for Any + 8, v7, 6LL) & 1) == 0)
  {
LABEL_9:
    char v10 = 0;
    return v10 & 1;
  }

  id v8 = v12;
  if (a3)
  {
    id v9 = a3;
    char v10 = static NSObject.== infix(_:_:)(v8, v9);
  }

  else
  {

    char v10 = 1;
  }

  return v10 & 1;
}

unint64_t sub_10004DF2C(uint64_t a1)
{
  if ((a1 & 0x100000000LL) != 0) {
    return 0xD000000000000019LL;
  }
  _StringGuts.grow(_:)(16LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  strcpy((char *)v4, "Unknown errno ");
  HIBYTE(v4[1]) = -18;
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  return v4[0];
}

unint64_t sub_10004DFE4()
{
  return sub_10004DF2C(*v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32));
}

unint64_t sub_10004E004()
{
  unint64_t result = qword_1001317F0;
  if (!qword_1001317F0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSObject);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001317F0);
  }

  return result;
}

unint64_t sub_10004E040()
{
  unint64_t result = qword_1001322F0;
  if (!qword_1001322F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F6574, &type metadata for IssueSandboxExceptionError);
    atomic_store(result, (unint64_t *)&qword_1001322F0);
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for IssueSandboxExceptionError(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_BYTE *)(result + sub_10000AC58(v0 + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for IssueSandboxExceptionError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for IssueSandboxExceptionError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(result + sub_10000AC58(v0 + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 5) = v3;
  return result;
}

uint64_t sub_10004E0DC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10004E0F8(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)unint64_t result = a2 - 1;
    char v2 = 1;
  }

  else
  {
    char v2 = 0;
  }

  *(_BYTE *)(result + sub_10000AC58(v0 + 4) = v2;
  return result;
}

ValueMetadata *type metadata accessor for IssueSandboxExceptionError()
{
  return &type metadata for IssueSandboxExceptionError;
}

void *sub_10004E128(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = a2;
  swift_retain();
  uint64_t v8 = swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()(v8);
  uint64_t v9 = swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()(&v25, v9);
  if (v25)
  {
    int v23 = _swiftEmptyArrayStorage;
    do
    {
      while (1)
      {
        if (qword_1001300B8 != -1) {
          swift_once(&qword_1001300B8, sub_10001C280);
        }
        Row.get<A>(_:)();
        if (!v3) {
          break;
        }
        swift_errorRelease(v3);
        swift_bridgeObjectRelease();
        uint64_t v3 = 0LL;
        uint64_t v10 = swift_bridgeObjectRelease();
        dispatch thunk of _AnyIteratorBoxBase.next()(&v25, v10);
        if (!v25) {
          goto LABEL_19;
        }
      }

      uint64_t v24 = v25;
      uint64_t v27 = v26;
      if (qword_1001300C0 != -1) {
        swift_once(&qword_1001300C0, sub_10001C2A4);
      }
      Row.get<A>(_:)();
      uint64_t v3 = 0LL;
      uint64_t v11 = v25;
      uint64_t v12 = v26;
      sub_10000A1A0(0LL, &qword_1001345C0, &OBJC_CLASS___LNAutoShortcutMetadata_ptr);
      uint64_t v13 = type metadata accessor for URL(0LL);
      sub_100009E60((uint64_t)v7, 1LL, 1LL, v13);
      uint64_t v14 = static LNAutoShortcutMetadata.fromJSON(_:bundleURL:effectiveBundleIdentifier:)(v11, v12, v7, 0LL);
      sub_100026E14((uint64_t)v7, &qword_100130BC0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = v23;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000141A4();
        uint64_t v15 = (void *)isUniquelyReferenced_nonNull_native;
      }

      unint64_t v17 = v15[2];
      if (v17 >= v15[3] >> 1)
      {
        sub_1000141A4();
        uint64_t v15 = (void *)isUniquelyReferenced_nonNull_native;
      }

      v15[2] = v17 + 1;
      int v23 = v15;
      uint64_t v18 = &v15[3 * v17];
      uint64_t v19 = v27;
      void v18[4] = v24;
      uint64_t v18[5] = v19;
      v18[6] = v14;
      dispatch thunk of _AnyIteratorBoxBase.next()(&v25, isUniquelyReferenced_nonNull_native);
    }

    while (v25);
  }

  else
  {
    int v23 = _swiftEmptyArrayStorage;
  }

void *sub_10004E4BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = a2;
  swift_retain();
  uint64_t v8 = swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()(v8);
  uint64_t v9 = swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()(&v25, v9);
  if (v25)
  {
    int v23 = _swiftEmptyArrayStorage;
    do
    {
      while (1)
      {
        if (qword_100130100 != -1) {
          swift_once(&qword_100130100, sub_100028124);
        }
        Row.get<A>(_:)();
        if (!v3) {
          break;
        }
        swift_errorRelease();
        swift_bridgeObjectRelease();
        uint64_t v10 = swift_bridgeObjectRelease();
        uint64_t v3 = 0LL;
        dispatch thunk of _AnyIteratorBoxBase.next()(&v25, v10);
        if (!v25) {
          goto LABEL_18;
        }
      }

      uint64_t v24 = v25;
      uint64_t v27 = v26;
      if (qword_100130108 != -1) {
        swift_once(&qword_100130108, sub_100028148);
      }
      Row.get<A>(_:)();
      uint64_t v3 = 0LL;
      uint64_t v11 = v25;
      uint64_t v12 = v26;
      sub_10000A1A0(0LL, (unint64_t *)&unk_1001324A0, &OBJC_CLASS___LNAssistantAppEntityMetadata_ptr);
      uint64_t v13 = type metadata accessor for URL(0LL);
      sub_100009E60((uint64_t)v7, 1LL, 1LL, v13);
      uint64_t v14 = static LNAssistantAppEntityMetadata.fromJSON(_:bundleURL:effectiveBundleIdentifier:)(v11, v12, v7, 0LL);
      sub_100026E14((uint64_t)v7, &qword_100130BC0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = v23;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100014510();
        uint64_t v15 = (void *)isUniquelyReferenced_nonNull_native;
      }

      unint64_t v17 = v15[2];
      if (v17 >= v15[3] >> 1)
      {
        sub_100014510();
        uint64_t v15 = (void *)isUniquelyReferenced_nonNull_native;
      }

      v15[2] = v17 + 1;
      int v23 = v15;
      uint64_t v18 = &v15[3 * v17];
      uint64_t v19 = v27;
      void v18[4] = v24;
      uint64_t v18[5] = v19;
      v18[6] = v14;
      dispatch thunk of _AnyIteratorBoxBase.next()(&v25, isUniquelyReferenced_nonNull_native);
    }

    while (v25);
  }

  else
  {
    int v23 = _swiftEmptyArrayStorage;
  }

void *sub_10004E850(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = a2;
  swift_retain();
  uint64_t v8 = swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()(v8);
  uint64_t v9 = swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()(&v25, v9);
  if (v25)
  {
    int v23 = _swiftEmptyArrayStorage;
    do
    {
      while (1)
      {
        if (qword_1001301F0 != -1) {
          swift_once(&qword_1001301F0, sub_100059730);
        }
        Row.get<A>(_:)();
        if (!v3) {
          break;
        }
        swift_errorRelease();
        swift_bridgeObjectRelease();
        uint64_t v10 = swift_bridgeObjectRelease();
        uint64_t v3 = 0LL;
        dispatch thunk of _AnyIteratorBoxBase.next()(&v25, v10);
        if (!v25) {
          goto LABEL_18;
        }
      }

      uint64_t v24 = v25;
      uint64_t v27 = v26;
      if (qword_1001301F8 != -1) {
        swift_once(&qword_1001301F8, sub_100059754);
      }
      Row.get<A>(_:)();
      uint64_t v3 = 0LL;
      uint64_t v11 = v25;
      uint64_t v12 = v26;
      sub_10000A1A0(0LL, (unint64_t *)&unk_1001324B0, &OBJC_CLASS___LNAssistantIntentMetadata_ptr);
      uint64_t v13 = type metadata accessor for URL(0LL);
      sub_100009E60((uint64_t)v7, 1LL, 1LL, v13);
      uint64_t v14 = static LNAssistantIntentMetadata.fromJSON(_:bundleURL:effectiveBundleIdentifier:)(v11, v12, v7, 0LL);
      sub_100026E14((uint64_t)v7, &qword_100130BC0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = v23;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000140A0();
        uint64_t v15 = (void *)isUniquelyReferenced_nonNull_native;
      }

      unint64_t v17 = v15[2];
      if (v17 >= v15[3] >> 1)
      {
        sub_1000140A0();
        uint64_t v15 = (void *)isUniquelyReferenced_nonNull_native;
      }

      v15[2] = v17 + 1;
      int v23 = v15;
      uint64_t v18 = &v15[3 * v17];
      uint64_t v19 = v27;
      void v18[4] = v24;
      uint64_t v18[5] = v19;
      v18[6] = v14;
      dispatch thunk of _AnyIteratorBoxBase.next()(&v25, isUniquelyReferenced_nonNull_native);
    }

    while (v25);
  }

  else
  {
    int v23 = _swiftEmptyArrayStorage;
  }

void *sub_10004EBE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = a2;
  swift_retain();
  uint64_t v8 = swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()(v8);
  uint64_t v9 = swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()(&v25, v9);
  if (v25)
  {
    int v23 = _swiftEmptyArrayStorage;
    do
    {
      while (1)
      {
        if (qword_100130378 != -1) {
          swift_once(&qword_100130378, sub_1000B8F60);
        }
        Row.get<A>(_:)();
        if (!v3) {
          break;
        }
        swift_errorRelease();
        swift_bridgeObjectRelease();
        uint64_t v10 = swift_bridgeObjectRelease();
        uint64_t v3 = 0LL;
        dispatch thunk of _AnyIteratorBoxBase.next()(&v25, v10);
        if (!v25) {
          goto LABEL_18;
        }
      }

      uint64_t v24 = v25;
      uint64_t v27 = v26;
      if (qword_100130380 != -1) {
        swift_once(&qword_100130380, sub_1000B8F84);
      }
      Row.get<A>(_:)();
      uint64_t v3 = 0LL;
      uint64_t v11 = v25;
      uint64_t v12 = v26;
      sub_10000A1A0(0LL, &qword_100134580, &OBJC_CLASS___LNAssistantIntentNegativePhrases_ptr);
      uint64_t v13 = type metadata accessor for URL(0LL);
      sub_100009E60((uint64_t)v7, 1LL, 1LL, v13);
      uint64_t v14 = static LNAssistantIntentNegativePhrases.fromJSON(_:bundleURL:effectiveBundleIdentifier:)(v11, v12, v7, 0LL);
      sub_100026E14((uint64_t)v7, &qword_100130BC0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = v23;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000146B4();
        uint64_t v15 = (void *)isUniquelyReferenced_nonNull_native;
      }

      unint64_t v17 = v15[2];
      if (v17 >= v15[3] >> 1)
      {
        sub_1000146B4();
        uint64_t v15 = (void *)isUniquelyReferenced_nonNull_native;
      }

      v15[2] = v17 + 1;
      int v23 = v15;
      uint64_t v18 = &v15[3 * v17];
      uint64_t v19 = v27;
      void v18[4] = v24;
      uint64_t v18[5] = v19;
      v18[6] = v14;
      dispatch thunk of _AnyIteratorBoxBase.next()(&v25, isUniquelyReferenced_nonNull_native);
    }

    while (v25);
  }

  else
  {
    int v23 = _swiftEmptyArrayStorage;
  }

void *sub_10004EF78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _swiftEmptyArrayStorage;
  unint64_t v16 = (unint64_t)_swiftEmptyArrayStorage;
  swift_retain();
  uint64_t v4 = swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()(v4);
  uint64_t v5 = swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()(&v14, v5);
  uint64_t v6 = v14;
  if (v14)
  {
    uint64_t v7 = v15;
    do
    {
      uint64_t v8 = sub_100087EC4(v6, v7);
      swift_bridgeObjectRelease();
      uint64_t v9 = swift_bridgeObjectRelease();
      if (v8)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v9);
        unint64_t v11 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v10 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v11 >= v10 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1LL);
        }
        uint64_t v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v8);
        uint64_t v9 = specialized Array._endMutation()(v12);
      }

      dispatch thunk of _AnyIteratorBoxBase.next()(&v14, v9);
      uint64_t v6 = v14;
      uint64_t v7 = v15;
    }

    while (v14);
    uint64_t v3 = (void *)v16;
  }

  swift_release_n(a2, 2LL);
  swift_release();
  return v3;
}

uint64_t sub_10004F0A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100057CB8( a1,  a2,  a3,  a4,  (uint64_t (*)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))sub_100079604);
}

void sub_10004F0C4()
{
  uint64_t v2 = qword_1001300B0;
  sub_100047360();
  if (v2 != -1) {
    swift_once(&qword_1001300B0, sub_10001C228);
  }
  sub_10001DEBC(v133, &unk_100135040);
  if (v0)
  {
    sub_10001D9AC(v133);
    if (qword_1001300B8 != -1) {
      swift_once(&qword_1001300B8, sub_10001C280);
    }
    sub_100059404((uint64_t)&qword_1001350E8);
    sub_100059548();
    sub_100059214(v3, v4, v5, v6, v7, v8, v9, v10, v47);
    sub_10001BD0C();
    uint64_t v11 = sub_10001BCF8();
    sub_100059248( v11,  v12,  v13,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  v14,  v15,  v16,  v48,  v51,  v54,  v57,  v60,  v63,  v66,  v69,  v72,  v75,  v78,  v81,  v84,  v87,  v90,  v93,  v96,  v99,  v102,  v105,  v108,  v111);
    sub_10001191C(v1);
    sub_10001191C(v0);
    unint64_t v17 = sub_100059570();
    uint64_t v25 = sub_10005961C( (uint64_t)v17,  v18,  v19,  v20,  v21,  v22,  v23,  v24,  v49,  v52,  v55,  v58,  v61,  v64,  v67,  v70,  v73,  v76,  v79,  v82,  v85,  v88,  v91,  v94,  v97,  v100,  v103,  v106,  v109,  v111,  v112,  v113,  (uint64_t)v114,  (uint64_t)v115,  v116,  v117,  v118,  v119,  v120,  v121,  v122,  v123,  v124,  v125,  v126,  v127,  v128,  v129,  v130,
            v131,
            v132[0]);
  }

  else
  {
    uint64_t v27 = sub_10001D9AC(v133);
    uint64_t v25 = sub_100059628( (uint64_t)v27,  v28,  v29,  v30,  v31,  v32,  v33,  v34,  v47,  v51,  v54,  v57,  v60,  v63,  v66,  v69,  v72,  v75,  v78,  v81,  v84,  v87,  v90,  v93,  v96,  v99,  v102,  v105,  v108,  v111,  v112,  v113,  (uint64_t)v114,  (uint64_t)v115,  v116,  v117,  v118,  v119,  v120,  v121,  v122,  v123,  v124,  v125,  v126,  v127,  v128,  v129,  v130,
            v131,
            v132[0]);
  }

  sub_10001DEBC(v25, v26);
  uint64_t v114 = &type metadata for Table;
  uint64_t v115 = &protocol witness table for Table;
  uint64_t v111 = sub_100038A2C((uint64_t)&unk_100124838);
  uint64_t v35 = sub_10001DEBC((void *)(v111 + 16), v132);
  sub_1000592F8( (uint64_t)v35,  v36,  v37,  v38,  v39,  v40,  v41,  v42,  v50,  v53,  v56,  v59,  v62,  v65,  v68,  v71,  v74,  v77,  v80,  v83,  v86,  v89,  v92,  v95,  v98,  v101,  v104,  v107,  v110,  v111);
  if (v2)
  {
    sub_100059380(&v111);
    uint64_t v43 = (void *)sub_10005920C();
    sub_100058EF8( (unint64_t *)&qword_100131958,  (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_100038AC8((uint64_t)v43, v44);
    sub_1000592E8();
    sub_10005934C(v43);
    sub_100059354();
    sub_100059344();
  }

  else
  {
    sub_10000AC58(&v111);
    sub_100047238();
    uint64_t v45 = sub_10005935C();
    sub_10004E128(v45, v46);
    sub_1000592AC();
    sub_10003EF28();
  }

  sub_1000593C8();
  sub_10001DEE8();
}

void sub_10004F288(uint64_t a1, uint64_t a2)
{
  if (v2)
  {
    swift_release();
    uint64_t v5 = sub_10005920C();
    sub_100058EF8( (unint64_t *)&qword_100131958,  (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_100038AC8(v5, v6);
    sub_1000591C4();
    sub_100059200();
    sub_1000592C0();
    sub_10004BDA4();
  }

  else
  {
    uint64_t v7 = swift_release();
    sub_1000596C8(v7, v8, &qword_100132760, v9);
  }

void sub_10004F350(uint64_t a1, uint64_t a2)
{
}

void sub_10004F36C()
{
}

uint64_t sub_10004F3C8()
{
  return swift_release();
}

uint64_t sub_10004F430(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  for (; v8; uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v15))
  {
    uint64_t v9 = 4LL;
    while (1)
    {
      id v10 = (a1 & 0xC000000000000001LL) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, a1)
          : *(id *)(a1 + 8 * v9);
      uint64_t v11 = v10;
      uint64_t v12 = v9 - 3;
      if (__OFADD__(v9 - 4, 1LL)) {
        break;
      }
      swift_bridgeObjectRetain();
      id v13 = v11;
      sub_1000B8274(a3, a4);
      if (v5)
      {
        swift_release();
        swift_bridgeObjectRelease();

        goto LABEL_12;
      }

      swift_bridgeObjectRelease();
      ++v9;
      if (v12 == v8) {
        goto LABEL_10;
      }
    }

    __break(1u);
LABEL_14:
    if (a1 < 0) {
      uint64_t v15 = a1;
    }
    else {
      uint64_t v15 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
  }

void sub_10004F580(void (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v12))
  {
    uint64_t v8 = 4LL;
    while (1)
    {
      id v9 = (a3 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a3)
         : *(id *)(a3 + 8 * v8);
      id v10 = v9;
      uint64_t v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1LL)) {
        break;
      }
      id v13 = v9;
      a1(&v13);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);

        return;
      }

      ++v8;
      if (v11 == v7) {
        goto LABEL_10;
      }
    }

    __break(1u);
LABEL_13:
    if (a3 < 0) {
      uint64_t v12 = a3;
    }
    else {
      uint64_t v12 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
  }

void sub_10004F688(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_23;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v23))
  {
    unint64_t v26 = v5 & 0xC000000000000001LL;
    uint64_t v7 = 4LL;
    uint64_t v24 = v6;
    for (i = v5; ; uint64_t v5 = i)
    {
      id v8 = v26 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5) : *(id *)(v5 + 8 * v7);
      id v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1LL)) {
        break;
      }
      swift_bridgeObjectRetain();
      id v11 = v9;
      Swift::String v12 = LNAutoShortcutMetadata.asJson()();
      if (v13)
      {

        swift_bridgeObjectRelease();
LABEL_20:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();

        return;
      }

      if (qword_1001300B0 != -1) {
        swift_once(&qword_1001300B0, sub_10001C228);
      }
      memcpy(__dst, &unk_100135040, sizeof(__dst));
      memcpy(__src, &unk_100135040, sizeof(__src));
      sub_10001D9AC(__dst);
      if (qword_1001300B8 != -1) {
        swift_once(&qword_1001300B8, sub_10001C280);
      }
      uint64_t v34 = v7;
      v29._uint64_t countAndFlagsBits = a3;
      v29._object = a4;
      uint64_t v14 = a4;
      <- infix<A>(_:_:)( qword_1001350E8,  unk_1001350F0,  qword_1001350F8,  (uint64_t)&v29,  (uint64_t)type metadata for String,  (uint64_t)&protocol witness table for String);
      uint64_t v15 = sub_100008DB0(&qword_1001323E0);
      uint64_t inited = swift_initStackObject(v15, v28);
      *(_OWORD *)(inited + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
      if (qword_1001300C0 != -1) {
        swift_once(&qword_1001300C0, sub_10001C2A4);
      }
      Swift::String v29 = v12;
      <- infix<A>(_:_:)( qword_100135100,  *(uint64_t *)algn_100135108,  qword_100135110,  (uint64_t)&v29,  (uint64_t)type metadata for String,  (uint64_t)&protocol witness table for String);
      swift_bridgeObjectRelease();
      uint64_t v17 = QueryType.insert(_:_:)((uint64_t)v30);
      uint64_t v19 = v18;
      uint64_t v21 = v20;
      swift_setDeallocating(inited);
      sub_100058874();
      sub_10001DC30(v30);
      memcpy(v33, __src, 0xA8uLL);
      sub_10001DAF0(v33);
      v35.template._uint64_t countAndFlagsBits = v17;
      v35.template._object = v19;
      v35.bindings._rawValue = v21;
      Connection.run(_:)(v35);
      if (v22)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }

      a4 = v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v10 == v24) {
        goto LABEL_27;
      }
      uint64_t v7 = v34 + 1;
    }

    __break(1u);
LABEL_23:
    if (v5 < 0) {
      uint64_t v23 = v5;
    }
    else {
      uint64_t v23 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
  }

LABEL_27:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

  __break(1u);
}

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

              swift_release();
              return;
            }
          }
        }
      }
    }

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

void sub_10004FA0C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 56;
  uint64_t v6 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v10 = 0LL;
  while (v8)
  {
    unint64_t v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v12 = v11 | (v10 << 6);
LABEL_19:
    memcpy(__dst, (const void *)(*(void *)(a1 + 48) + 104 * v12), sizeof(__dst));
    sub_100009F4C(__dst);
    sub_10006CFAC((__int128 *)__dst, a2);
    sub_100009FD0(__dst);
    if (v2)
    {
LABEL_25:
      swift_release();
      swift_release();
      return;
    }
  }

  if (__OFADD__(v10++, 1LL))
  {
    __break(1u);
    goto LABEL_27;
  }

  if (v10 >= v9) {
    goto LABEL_25;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v10);
  if (v14)
  {
LABEL_18:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_19;
  }

  int64_t v15 = v10 + 1;
  if (v10 + 1 >= v9) {
    goto LABEL_25;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14) {
    goto LABEL_17;
  }
  int64_t v15 = v10 + 2;
  if (v10 + 2 >= v9) {
    goto LABEL_25;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14) {
    goto LABEL_17;
  }
  int64_t v15 = v10 + 3;
  if (v10 + 3 >= v9) {
    goto LABEL_25;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14) {
    goto LABEL_17;
  }
  int64_t v15 = v10 + 4;
  if (v10 + 4 >= v9) {
    goto LABEL_25;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
LABEL_17:
    int64_t v10 = v15;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v10 >= v9) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }

void sub_10004FBA4(uint64_t a1, void (*a2)(id, uint64_t, uint64_t))
{
  uint64_t v5 = v20[0];
  uint64_t v19 = v20[1];
  int64_t v6 = v20[3];
  unint64_t v7 = v20[4];
  int64_t v21 = (unint64_t)(v20[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a1);
  if (!v7) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v8 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v9 = v8 | (v6 << 6);
  while (1)
  {
    uint64_t v13 = *(void **)(*(void *)(v5 + 48) + 8 * v9);
    unint64_t v14 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v9);
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    id v17 = v13;
    swift_bridgeObjectRetain(v15);
    a2(v17, v16, v15);
    if (v2)
    {
      swift_release(v5);
      swift_bridgeObjectRelease(v15);

      return;
    }

    swift_bridgeObjectRelease(v15);

    if (v7) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v10 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      break;
    }
    if (v10 >= v21) {
      goto LABEL_24;
    }
    unint64_t v11 = *(void *)(v19 + 8 * v10);
    if (!v11)
    {
      int64_t v12 = v6 + 2;
      if (v6 + 2 >= v21) {
        goto LABEL_24;
      }
      unint64_t v11 = *(void *)(v19 + 8 * v12);
      if (v11) {
        goto LABEL_12;
      }
      int64_t v12 = v6 + 3;
      if (v6 + 3 >= v21) {
        goto LABEL_24;
      }
      unint64_t v11 = *(void *)(v19 + 8 * v12);
      if (v11) {
        goto LABEL_12;
      }
      int64_t v12 = v6 + 4;
      if (v6 + 4 >= v21) {
        goto LABEL_24;
      }
      unint64_t v11 = *(void *)(v19 + 8 * v12);
      if (v11)
      {
LABEL_12:
        int64_t v10 = v12;
      }

      else
      {
        int64_t v10 = v6 + 5;
        if (v6 + 5 >= v21) {
          goto LABEL_24;
        }
        unint64_t v11 = *(void *)(v19 + 8 * v10);
        if (!v11)
        {
          int64_t v18 = v6 + 6;
          while (v18 < v21)
          {
            unint64_t v11 = *(void *)(v19 + 8 * v18++);
            if (v11)
            {
              int64_t v10 = v18 - 1;
              goto LABEL_13;
            }
          }

void sub_10004FD88(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_23;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v23))
  {
    unint64_t v26 = v5 & 0xC000000000000001LL;
    uint64_t v7 = 4LL;
    uint64_t v24 = v6;
    for (i = v5; ; uint64_t v5 = i)
    {
      id v8 = v26 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5) : *(id *)(v5 + 8 * v7);
      unint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1LL)) {
        break;
      }
      swift_bridgeObjectRetain();
      id v11 = v9;
      Swift::String v12 = LNEntityMetadata.asJson(prettyPrinted:)(0);
      if (v13)
      {

        swift_bridgeObjectRelease();
LABEL_20:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();

        return;
      }

      if (qword_100130430 != -1) {
        swift_once(&qword_100130430, sub_1000C4664);
      }
      memcpy(__dst, &unk_100134110, sizeof(__dst));
      memcpy(__src, &unk_100134110, sizeof(__src));
      sub_10001D9AC(__dst);
      if (qword_100130438 != -1) {
        swift_once(&qword_100130438, sub_1000C46B4);
      }
      uint64_t v34 = v7;
      v29._uint64_t countAndFlagsBits = a3;
      v29._object = a4;
      unint64_t v14 = a4;
      <- infix<A>(_:_:)( qword_1001341B8,  unk_1001341C0,  qword_1001341C8,  (uint64_t)&v29,  (uint64_t)type metadata for String,  (uint64_t)&protocol witness table for String);
      uint64_t v15 = sub_100008DB0(&qword_1001323E0);
      uint64_t inited = swift_initStackObject(v15, v28);
      *(_OWORD *)(inited + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
      if (qword_100130448 != -1) {
        swift_once(&qword_100130448, sub_1000C46F8);
      }
      Swift::String v29 = v12;
      <- infix<A>(_:_:)( qword_1001341E8,  unk_1001341F0,  qword_1001341F8,  (uint64_t)&v29,  (uint64_t)type metadata for String,  (uint64_t)&protocol witness table for String);
      swift_bridgeObjectRelease();
      uint64_t v17 = QueryType.insert(_:_:)((uint64_t)v30);
      uint64_t v19 = v18;
      int64_t v21 = v20;
      swift_setDeallocating(inited);
      sub_100058874();
      sub_10001DC30(v30);
      memcpy(v33, __src, 0xA8uLL);
      sub_10001DAF0(v33);
      v35.template._uint64_t countAndFlagsBits = v17;
      v35.template._object = v19;
      v35.bindings._rawValue = v21;
      Connection.run(_:)(v35);
      if (v22)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }

      a4 = v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v10 == v24) {
        goto LABEL_27;
      }
      uint64_t v7 = v34 + 1;
    }

    __break(1u);
LABEL_23:
    if (v5 < 0) {
      uint64_t v23 = v5;
    }
    else {
      uint64_t v23 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
  }

void sub_100050110(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = v5;
  uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  for (; v10; uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v16))
  {
    uint64_t v11 = 4LL;
    while (1)
    {
      id v12 = (a1 & 0xC000000000000001LL) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, a1)
          : *(id *)(a1 + 8 * v11);
      uint64_t v13 = v12;
      uint64_t v14 = v11 - 3;
      if (__OFADD__(v11 - 4, 1LL)) {
        break;
      }
      swift_retain();
      swift_bridgeObjectRetain();
      id v15 = v13;
      sub_100055A40(a2, a3, a4, a5, v15);
      if (v6)
      {
        swift_bridgeObjectRelease();
        swift_release();

        swift_bridgeObjectRelease();
        return;
      }

      ++v11;
      if (v14 == v10) {
        goto LABEL_10;
      }
    }

    __break(1u);
LABEL_13:
    if (a1 < 0) {
      uint64_t v16 = a1;
    }
    else {
      uint64_t v16 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
  }

void sub_100050278(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_23;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v23))
  {
    unint64_t v26 = v5 & 0xC000000000000001LL;
    uint64_t v7 = 4LL;
    uint64_t v24 = v6;
    for (i = v5; ; uint64_t v5 = i)
    {
      id v8 = v26 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5) : *(id *)(v5 + 8 * v7);
      unint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1LL)) {
        break;
      }
      swift_bridgeObjectRetain();
      id v11 = v9;
      Swift::String v12 = LNQueryMetadata.asJson(prettyPrinted:)(0);
      if (v13)
      {

        swift_bridgeObjectRelease();
LABEL_20:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();

        return;
      }

      if (qword_100130470 != -1) {
        swift_once(&qword_100130470, sub_1000C5E44);
      }
      memcpy(__dst, &unk_1001342F0, sizeof(__dst));
      memcpy(__src, &unk_1001342F0, sizeof(__src));
      sub_10001D9AC(__dst);
      if (qword_100130478 != -1) {
        swift_once(&qword_100130478, sub_1000C5E94);
      }
      uint64_t v34 = v7;
      v29._uint64_t countAndFlagsBits = a3;
      v29._object = a4;
      uint64_t v14 = a4;
      <- infix<A>(_:_:)( qword_100134398,  unk_1001343A0,  qword_1001343A8,  (uint64_t)&v29,  (uint64_t)type metadata for String,  (uint64_t)&protocol witness table for String);
      uint64_t v15 = sub_100008DB0(&qword_1001323E0);
      uint64_t inited = swift_initStackObject(v15, v28);
      *(_OWORD *)(inited + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
      if (qword_100130488 != -1) {
        swift_once(&qword_100130488, sub_1000C5EE4);
      }
      Swift::String v29 = v12;
      <- infix<A>(_:_:)( qword_1001343C8,  unk_1001343D0,  qword_1001343D8,  (uint64_t)&v29,  (uint64_t)type metadata for String,  (uint64_t)&protocol witness table for String);
      swift_bridgeObjectRelease();
      uint64_t v17 = QueryType.insert(_:_:)((uint64_t)v30);
      uint64_t v19 = v18;
      int64_t v21 = v20;
      swift_setDeallocating(inited);
      sub_100058874();
      sub_10001DC30(v30);
      memcpy(v33, __src, 0xA8uLL);
      sub_10001DAF0(v33);
      v35.template._uint64_t countAndFlagsBits = v17;
      v35.template._object = v19;
      v35.bindings._rawValue = v21;
      Connection.run(_:)(v35);
      if (v22)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }

      a4 = v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v10 == v24) {
        goto LABEL_27;
      }
      uint64_t v7 = v34 + 1;
    }

    __break(1u);
LABEL_23:
    if (v5 < 0) {
      uint64_t v23 = v5;
    }
    else {
      uint64_t v23 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
  }

void sub_100050600(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_23;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v23))
  {
    unint64_t v26 = v5 & 0xC000000000000001LL;
    uint64_t v7 = 4LL;
    uint64_t v24 = v6;
    for (i = v5; ; uint64_t v5 = i)
    {
      id v8 = v26 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5) : *(id *)(v5 + 8 * v7);
      unint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1LL)) {
        break;
      }
      swift_bridgeObjectRetain();
      id v11 = v9;
      Swift::String v12 = LNAssistantIntentMetadata.asJson()();
      if (v13)
      {

        swift_bridgeObjectRelease();
LABEL_20:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();

        return;
      }

      if (qword_1001301E8 != -1) {
        swift_once(&qword_1001301E8, sub_1000596D4);
      }
      memcpy(__dst, &unk_1001353D0, sizeof(__dst));
      memcpy(__src, &unk_1001353D0, sizeof(__src));
      sub_10001D9AC(__dst);
      if (qword_1001301F0 != -1) {
        swift_once(&qword_1001301F0, sub_100059730);
      }
      uint64_t v34 = v7;
      v29._uint64_t countAndFlagsBits = a3;
      v29._object = a4;
      uint64_t v14 = a4;
      <- infix<A>(_:_:)( qword_100135478,  unk_100135480,  qword_100135488,  (uint64_t)&v29,  (uint64_t)type metadata for String,  (uint64_t)&protocol witness table for String);
      uint64_t v15 = sub_100008DB0(&qword_1001323E0);
      uint64_t inited = swift_initStackObject(v15, v28);
      *(_OWORD *)(inited + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
      if (qword_1001301F8 != -1) {
        swift_once(&qword_1001301F8, sub_100059754);
      }
      Swift::String v29 = v12;
      <- infix<A>(_:_:)( qword_100135490,  *(uint64_t *)algn_100135498,  qword_1001354A0,  (uint64_t)&v29,  (uint64_t)type metadata for String,  (uint64_t)&protocol witness table for String);
      swift_bridgeObjectRelease();
      uint64_t v17 = QueryType.insert(_:_:)((uint64_t)v30);
      uint64_t v19 = v18;
      int64_t v21 = v20;
      swift_setDeallocating(inited);
      sub_100058874();
      sub_10001DC30(v30);
      memcpy(v33, __src, 0xA8uLL);
      sub_10001DAF0(v33);
      v35.template._uint64_t countAndFlagsBits = v17;
      v35.template._object = v19;
      v35.bindings._rawValue = v21;
      Connection.run(_:)(v35);
      if (v22)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }

      a4 = v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v10 == v24) {
        goto LABEL_27;
      }
      uint64_t v7 = v34 + 1;
    }

    __break(1u);
LABEL_23:
    if (v5 < 0) {
      uint64_t v23 = v5;
    }
    else {
      uint64_t v23 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
  }

void sub_100050984(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_23;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v23))
  {
    unint64_t v26 = v5 & 0xC000000000000001LL;
    uint64_t v7 = 4LL;
    uint64_t v24 = v6;
    for (i = v5; ; uint64_t v5 = i)
    {
      id v8 = v26 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5) : *(id *)(v5 + 8 * v7);
      unint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1LL)) {
        break;
      }
      swift_bridgeObjectRetain();
      id v11 = v9;
      Swift::String v12 = LNAssistantIntentNegativePhrases.asJson()();
      if (v13)
      {

        swift_bridgeObjectRelease();
LABEL_20:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();

        return;
      }

      if (qword_100130370 != -1) {
        swift_once(&qword_100130370, sub_1000B8F0C);
      }
      memcpy(__dst, &unk_1001359A0, sizeof(__dst));
      memcpy(__src, &unk_1001359A0, sizeof(__src));
      sub_10001D9AC(__dst);
      if (qword_100130378 != -1) {
        swift_once(&qword_100130378, sub_1000B8F60);
      }
      uint64_t v34 = v7;
      v29._uint64_t countAndFlagsBits = a3;
      v29._object = a4;
      uint64_t v14 = a4;
      <- infix<A>(_:_:)( qword_100135A48,  unk_100135A50,  qword_100135A58,  (uint64_t)&v29,  (uint64_t)type metadata for String,  (uint64_t)&protocol witness table for String);
      uint64_t v15 = sub_100008DB0(&qword_1001323E0);
      uint64_t inited = swift_initStackObject(v15, v28);
      *(_OWORD *)(inited + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
      if (qword_100130380 != -1) {
        swift_once(&qword_100130380, sub_1000B8F84);
      }
      Swift::String v29 = v12;
      <- infix<A>(_:_:)( qword_100135A60,  *(uint64_t *)algn_100135A68,  qword_100135A70,  (uint64_t)&v29,  (uint64_t)type metadata for String,  (uint64_t)&protocol witness table for String);
      swift_bridgeObjectRelease();
      uint64_t v17 = QueryType.insert(_:_:)((uint64_t)v30);
      uint64_t v19 = v18;
      int64_t v21 = v20;
      swift_setDeallocating(inited);
      sub_100058874();
      sub_10001DC30(v30);
      memcpy(v33, __src, 0xA8uLL);
      sub_10001DAF0(v33);
      v35.template._uint64_t countAndFlagsBits = v17;
      v35.template._object = v19;
      v35.bindings._rawValue = v21;
      Connection.run(_:)(v35);
      if (v22)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }

      a4 = v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v10 == v24) {
        goto LABEL_27;
      }
      uint64_t v7 = v34 + 1;
    }

    __break(1u);
LABEL_23:
    if (v5 < 0) {
      uint64_t v23 = v5;
    }
    else {
      uint64_t v23 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
  }

void sub_100050D08(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_23;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v23))
  {
    unint64_t v26 = v5 & 0xC000000000000001LL;
    uint64_t v7 = 4LL;
    uint64_t v24 = v6;
    for (i = v5; ; uint64_t v5 = i)
    {
      id v8 = v26 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5) : *(id *)(v5 + 8 * v7);
      unint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1LL)) {
        break;
      }
      swift_bridgeObjectRetain();
      id v11 = v9;
      Swift::String v12 = LNAssistantAppEntityMetadata.asJson()();
      if (v13)
      {

        swift_bridgeObjectRelease();
LABEL_20:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();

        return;
      }

      if (qword_1001300F8 != -1) {
        swift_once(&qword_1001300F8, sub_1000280D0);
      }
      memcpy(__dst, &unk_100135148, sizeof(__dst));
      memcpy(__src, &unk_100135148, sizeof(__src));
      sub_10001D9AC(__dst);
      if (qword_100130100 != -1) {
        swift_once(&qword_100130100, sub_100028124);
      }
      uint64_t v34 = v7;
      v29._uint64_t countAndFlagsBits = a3;
      v29._object = a4;
      uint64_t v14 = a4;
      <- infix<A>(_:_:)( qword_1001351F0,  *(uint64_t *)algn_1001351F8,  qword_100135200,  (uint64_t)&v29,  (uint64_t)type metadata for String,  (uint64_t)&protocol witness table for String);
      uint64_t v15 = sub_100008DB0(&qword_1001323E0);
      uint64_t inited = swift_initStackObject(v15, v28);
      *(_OWORD *)(inited + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
      if (qword_100130108 != -1) {
        swift_once(&qword_100130108, sub_100028148);
      }
      Swift::String v29 = v12;
      <- infix<A>(_:_:)( qword_100135208,  unk_100135210,  qword_100135218,  (uint64_t)&v29,  (uint64_t)type metadata for String,  (uint64_t)&protocol witness table for String);
      swift_bridgeObjectRelease();
      uint64_t v17 = QueryType.insert(_:_:)((uint64_t)v30);
      uint64_t v19 = v18;
      int64_t v21 = v20;
      swift_setDeallocating(inited);
      sub_100058874();
      sub_10001DC30(v30);
      memcpy(v33, __src, 0xA8uLL);
      sub_10001DAF0(v33);
      v35.template._uint64_t countAndFlagsBits = v17;
      v35.template._object = v19;
      v35.bindings._rawValue = v21;
      Connection.run(_:)(v35);
      if (v22)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }

      a4 = v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v10 == v24) {
        goto LABEL_27;
      }
      uint64_t v7 = v34 + 1;
    }

    __break(1u);
LABEL_23:
    if (v5 < 0) {
      uint64_t v23 = v5;
    }
    else {
      uint64_t v23 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
  }

void sub_10005108C()
{
  uint64_t v2 = qword_1001301E8;
  sub_100047360();
  if (v2 != -1) {
    swift_once(&qword_1001301E8, sub_1000596D4);
  }
  sub_10001DEBC(v133, &unk_1001353D0);
  if (v0)
  {
    sub_10001D9AC(v133);
    if (qword_1001301F0 != -1) {
      swift_once(&qword_1001301F0, sub_100059730);
    }
    sub_100059404((uint64_t)&qword_100135478);
    sub_100059548();
    sub_100059214(v3, v4, v5, v6, v7, v8, v9, v10, v47);
    sub_10001BD0C();
    uint64_t v11 = sub_10001BCF8();
    sub_100059248( v11,  v12,  v13,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  v14,  v15,  v16,  v48,  v51,  v54,  v57,  v60,  v63,  v66,  v69,  v72,  v75,  v78,  v81,  v84,  v87,  v90,  v93,  v96,  v99,  v102,  v105,  v108,  v111);
    sub_10001191C(v1);
    sub_10001191C(v0);
    uint64_t v17 = sub_100059570();
    uint64_t v25 = sub_10005961C( (uint64_t)v17,  v18,  v19,  v20,  v21,  v22,  v23,  v24,  v49,  v52,  v55,  v58,  v61,  v64,  v67,  v70,  v73,  v76,  v79,  v82,  v85,  v88,  v91,  v94,  v97,  v100,  v103,  v106,  v109,  v111,  v112,  v113,  (uint64_t)v114,  (uint64_t)v115,  v116,  v117,  v118,  v119,  v120,  v121,  v122,  v123,  v124,  v125,  v126,  v127,  v128,  v129,  v130,
            v131,
            v132[0]);
  }

  else
  {
    uint64_t v27 = sub_10001D9AC(v133);
    uint64_t v25 = sub_100059628( (uint64_t)v27,  v28,  v29,  v30,  v31,  v32,  v33,  v34,  v47,  v51,  v54,  v57,  v60,  v63,  v66,  v69,  v72,  v75,  v78,  v81,  v84,  v87,  v90,  v93,  v96,  v99,  v102,  v105,  v108,  v111,  v112,  v113,  (uint64_t)v114,  (uint64_t)v115,  v116,  v117,  v118,  v119,  v120,  v121,  v122,  v123,  v124,  v125,  v126,  v127,  v128,  v129,  v130,
            v131,
            v132[0]);
  }

  sub_10001DEBC(v25, v26);
  uint64_t v114 = &type metadata for Table;
  uint64_t v115 = &protocol witness table for Table;
  uint64_t v111 = sub_100038A2C((uint64_t)&unk_100124838);
  AppIntents_SQLite::Insert v35 = sub_10001DEBC((void *)(v111 + 16), v132);
  sub_1000592F8( (uint64_t)v35,  v36,  v37,  v38,  v39,  v40,  v41,  v42,  v50,  v53,  v56,  v59,  v62,  v65,  v68,  v71,  v74,  v77,  v80,  v83,  v86,  v89,  v92,  v95,  v98,  v101,  v104,  v107,  v110,  v111);
  if (v2)
  {
    sub_100059380(&v111);
    uint64_t v43 = (void *)sub_10005920C();
    sub_100058EF8( (unint64_t *)&qword_100131958,  (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_100038AC8((uint64_t)v43, v44);
    sub_1000592E8();
    sub_10005934C(v43);
    sub_100059354();
    sub_100059344();
  }

  else
  {
    sub_10000AC58(&v111);
    sub_100047238();
    uint64_t v45 = sub_10005935C();
    sub_10004E850(v45, v46);
    sub_1000592AC();
    sub_10003EF28();
  }

  sub_1000593C8();
  sub_10001DEE8();
}

void sub_100051250()
{
  uint64_t v2 = qword_100130370;
  sub_100047360();
  if (v2 != -1) {
    swift_once(&qword_100130370, sub_1000B8F0C);
  }
  sub_10001DEBC(v133, &unk_1001359A0);
  if (v0)
  {
    sub_10001D9AC(v133);
    if (qword_100130378 != -1) {
      swift_once(&qword_100130378, sub_1000B8F60);
    }
    sub_100059404((uint64_t)&qword_100135A48);
    sub_100059548();
    sub_100059214(v3, v4, v5, v6, v7, v8, v9, v10, v47);
    sub_10001BD0C();
    uint64_t v11 = sub_10001BCF8();
    sub_100059248( v11,  v12,  v13,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  v14,  v15,  v16,  v48,  v51,  v54,  v57,  v60,  v63,  v66,  v69,  v72,  v75,  v78,  v81,  v84,  v87,  v90,  v93,  v96,  v99,  v102,  v105,  v108,  v111);
    sub_10001191C(v1);
    sub_10001191C(v0);
    uint64_t v17 = sub_100059570();
    uint64_t v25 = sub_10005961C( (uint64_t)v17,  v18,  v19,  v20,  v21,  v22,  v23,  v24,  v49,  v52,  v55,  v58,  v61,  v64,  v67,  v70,  v73,  v76,  v79,  v82,  v85,  v88,  v91,  v94,  v97,  v100,  v103,  v106,  v109,  v111,  v112,  v113,  (uint64_t)v114,  (uint64_t)v115,  v116,  v117,  v118,  v119,  v120,  v121,  v122,  v123,  v124,  v125,  v126,  v127,  v128,  v129,  v130,
            v131,
            v132[0]);
  }

  else
  {
    uint64_t v27 = sub_10001D9AC(v133);
    uint64_t v25 = sub_100059628( (uint64_t)v27,  v28,  v29,  v30,  v31,  v32,  v33,  v34,  v47,  v51,  v54,  v57,  v60,  v63,  v66,  v69,  v72,  v75,  v78,  v81,  v84,  v87,  v90,  v93,  v96,  v99,  v102,  v105,  v108,  v111,  v112,  v113,  (uint64_t)v114,  (uint64_t)v115,  v116,  v117,  v118,  v119,  v120,  v121,  v122,  v123,  v124,  v125,  v126,  v127,  v128,  v129,  v130,
            v131,
            v132[0]);
  }

  sub_10001DEBC(v25, v26);
  uint64_t v114 = &type metadata for Table;
  uint64_t v115 = &protocol witness table for Table;
  uint64_t v111 = sub_100038A2C((uint64_t)&unk_100124838);
  AppIntents_SQLite::Insert v35 = sub_10001DEBC((void *)(v111 + 16), v132);
  sub_1000592F8( (uint64_t)v35,  v36,  v37,  v38,  v39,  v40,  v41,  v42,  v50,  v53,  v56,  v59,  v62,  v65,  v68,  v71,  v74,  v77,  v80,  v83,  v86,  v89,  v92,  v95,  v98,  v101,  v104,  v107,  v110,  v111);
  if (v2)
  {
    sub_100059380(&v111);
    uint64_t v43 = (void *)sub_10005920C();
    sub_100058EF8( (unint64_t *)&qword_100131958,  (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_100038AC8((uint64_t)v43, v44);
    sub_1000592E8();
    sub_10005934C(v43);
    sub_100059354();
    sub_100059344();
  }

  else
  {
    sub_10000AC58(&v111);
    sub_100047238();
    uint64_t v45 = sub_10005935C();
    sub_10004EBE4(v45, v46);
    sub_1000592AC();
    sub_10003EF28();
  }

  sub_1000593C8();
  sub_10001DEE8();
}

void sub_100051414()
{
  uint64_t v2 = qword_1001300F8;
  sub_100047360();
  if (v2 != -1) {
    swift_once(&qword_1001300F8, sub_1000280D0);
  }
  sub_10001DEBC(v133, &unk_100135148);
  if (v0)
  {
    sub_10001D9AC(v133);
    if (qword_100130100 != -1) {
      swift_once(&qword_100130100, sub_100028124);
    }
    sub_100059404((uint64_t)&qword_1001351F0);
    sub_100059548();
    sub_100059214(v3, v4, v5, v6, v7, v8, v9, v10, v47);
    sub_10001BD0C();
    uint64_t v11 = sub_10001BCF8();
    sub_100059248( v11,  v12,  v13,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  v14,  v15,  v16,  v48,  v51,  v54,  v57,  v60,  v63,  v66,  v69,  v72,  v75,  v78,  v81,  v84,  v87,  v90,  v93,  v96,  v99,  v102,  v105,  v108,  v111);
    sub_10001191C(v1);
    sub_10001191C(v0);
    uint64_t v17 = sub_100059570();
    uint64_t v25 = sub_10005961C( (uint64_t)v17,  v18,  v19,  v20,  v21,  v22,  v23,  v24,  v49,  v52,  v55,  v58,  v61,  v64,  v67,  v70,  v73,  v76,  v79,  v82,  v85,  v88,  v91,  v94,  v97,  v100,  v103,  v106,  v109,  v111,  v112,  v113,  (uint64_t)v114,  (uint64_t)v115,  v116,  v117,  v118,  v119,  v120,  v121,  v122,  v123,  v124,  v125,  v126,  v127,  v128,  v129,  v130,
            v131,
            v132[0]);
  }

  else
  {
    uint64_t v27 = sub_10001D9AC(v133);
    uint64_t v25 = sub_100059628( (uint64_t)v27,  v28,  v29,  v30,  v31,  v32,  v33,  v34,  v47,  v51,  v54,  v57,  v60,  v63,  v66,  v69,  v72,  v75,  v78,  v81,  v84,  v87,  v90,  v93,  v96,  v99,  v102,  v105,  v108,  v111,  v112,  v113,  (uint64_t)v114,  (uint64_t)v115,  v116,  v117,  v118,  v119,  v120,  v121,  v122,  v123,  v124,  v125,  v126,  v127,  v128,  v129,  v130,
            v131,
            v132[0]);
  }

  sub_10001DEBC(v25, v26);
  uint64_t v114 = &type metadata for Table;
  uint64_t v115 = &protocol witness table for Table;
  uint64_t v111 = sub_100038A2C((uint64_t)&unk_100124838);
  AppIntents_SQLite::Insert v35 = sub_10001DEBC((void *)(v111 + 16), v132);
  sub_1000592F8( (uint64_t)v35,  v36,  v37,  v38,  v39,  v40,  v41,  v42,  v50,  v53,  v56,  v59,  v62,  v65,  v68,  v71,  v74,  v77,  v80,  v83,  v86,  v89,  v92,  v95,  v98,  v101,  v104,  v107,  v110,  v111);
  if (v2)
  {
    sub_100059380(&v111);
    uint64_t v43 = (void *)sub_10005920C();
    sub_100058EF8( (unint64_t *)&qword_100131958,  (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_100038AC8((uint64_t)v43, v44);
    sub_1000592E8();
    sub_10005934C(v43);
    sub_100059354();
    sub_100059344();
  }

  else
  {
    sub_10000AC58(&v111);
    sub_100047238();
    uint64_t v45 = sub_10005935C();
    sub_10004E4BC(v45, v46);
    sub_1000592AC();
    sub_10003EF28();
  }

  sub_1000593C8();
  sub_10001DEE8();
}

void sub_1000515D8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (v4)
  {
    uint64_t v9 = sub_10005920C();
    sub_100058EF8( (unint64_t *)&qword_100131958,  (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_100038AC8(v9, v10);
    sub_1000592D8();
    sub_10005934C(a3);
    sub_100059354();
    sub_100059344();
  }

  sub_100059598();
  sub_100059588();
}

uint64_t sub_100051688()
{
  uint64_t v2 = v0;
  uint64_t v3 = v1;
  uint64_t v5 = v4;
  uint64_t v15 = v6;
  if (v1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v7 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  sub_1000119E4();
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    for (uint64_t i = 4LL; ; ++i)
    {
      id v9 = (v3 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v3)
         : *(id *)(v3 + 8 * i);
      uint64_t v10 = v9;
      uint64_t v11 = i - 3;
      if (__OFADD__(i - 4, 1LL)) {
        break;
      }
      swift_retain();
      sub_1000280C8();
      id v12 = v10;
      sub_1000B8274(v15, v5);
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_release();

        return sub_10001DEC4();
      }

      swift_release();

      sub_10001DEC4();
      if (v11 == v7) {
        return sub_10001DEC4();
      }
    }

    __break(1u);
LABEL_14:
    if (v3 < 0) {
      uint64_t v14 = v3;
    }
    else {
      uint64_t v14 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1000119E4();
  }

  return sub_10001DEC4();
}

void sub_1000517C4()
{
}

unint64_t sub_100051808(uint64_t a1, char a2)
{
  if (a2)
  {
    if (a2 != 1)
    {
      _StringGuts.grow(_:)(43LL);
      sub_1000594F8(v25, v26, v27, v28, v29, v30, v31, v32, v37, v38, 0LL, 0xE000000000000000LL);
      v42._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
      sub_100034194(v42);
      sub_10001198C();
      v33._uint64_t countAndFlagsBits = 8238LL;
      v33._object = (void *)0xE200000000000000LL;
      String.append(_:)(v33);
      _StringGuts.grow(_:)(51LL);
      v34._object = (void *)0x80000001000FA4A0LL;
      v34._uint64_t countAndFlagsBits = 0xD000000000000011LL;
      String.append(_:)(v34);
      v43._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      sub_100034194(v43);
      sub_100011958();
      v44._uint64_t countAndFlagsBits = 0xD000000000000020LL;
      v44._object = (void *)0x80000001000FA4C0LL;
      sub_100034194(v44);
      unint64_t v39 = 0xD000000000000027LL;
      swift_bridgeObjectRetain();
      v35._uint64_t countAndFlagsBits = 0LL;
      v35._object = (void *)0xE000000000000000LL;
      String.append(_:)(v35);
      sub_10001198C();
      swift_bridgeObjectRelease(0xE000000000000000LL);
      return v39;
    }

    sub_10004BF04();
    _StringGuts.grow(_:)(40LL);
    sub_1000594F8(v3, v4, v5, v6, v7, v8, v9, v10, v37, v38, 0LL, 0xE000000000000000LL);
    unint64_t v39 = 0xD000000000000026LL;
    sub_10004BF04();
    uint64_t v11 = sub_100008DB0(&qword_100130620);
    v40._uint64_t countAndFlagsBits = sub_10005945C(v11, v12);
    sub_100034194(v40);
    sub_100011958();
    uint64_t v13 = a1;
    unsigned __int8 v14 = 1;
  }

  else
  {
    sub_10004BF04();
    _StringGuts.grow(_:)(36LL);
    sub_1000594F8(v15, v16, v17, v18, v19, v20, v21, v22, v37, v38, 0LL, 0xE000000000000000LL);
    unint64_t v39 = 0xD000000000000022LL;
    sub_10004BF04();
    uint64_t v23 = sub_100008DB0(&qword_100130620);
    v41._uint64_t countAndFlagsBits = sub_10005945C(v23, v24);
    sub_100034194(v41);
    sub_100011958();
    uint64_t v13 = a1;
    unsigned __int8 v14 = 0;
  }

  sub_100059064(v13, v14);
  return v39;
}

unint64_t sub_100051A48()
{
  return sub_100051808(*(void *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t sub_100051A54()
{
  uint64_t v0 = sub_10000E918();
  sub_10000A07C(v0, qword_1001353A8);
  sub_100008D98(v0, (uint64_t)qword_1001353A8);
  type metadata accessor for MetadataStore(0LL);
  uint64_t v1 = sub_100008DB0((uint64_t *)&unk_100132590);
  uint64_t v4 = sub_10005945C(v1, v2);
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    uint64_t v6 = v3;
    uint64_t v7 = String.init(cString:)(LNLogSubsystem);
    return Logger.init(subsystem:category:)(v7, v8, v4, v6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100051AF0(uint64_t a1)
{
  uint64_t v4 = sub_100008DB0(&qword_100130BC0);
  double v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  URL.absoluteString.getter(v5);
  id v8 = objc_allocWithZone(v1);
  sub_1000521D8();
  uint64_t v10 = v9;
  if (v2)
  {
    uint64_t v11 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(a1, v11);
  }

  else
  {
    uint64_t v12 = type metadata accessor for URL(0LL);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL))(v7, a1, v12);
    sub_100009E60((uint64_t)v7, 0LL, 1LL, v12);
    uint64_t v13 = v10 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_URL;
    swift_beginAccess(v10 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_URL, v15, 33LL, 0LL);
    sub_1000334E8((uint64_t)v7, v13);
    swift_endAccess(v15);
  }

  sub_100059598();
  sub_100059588();
}

void sub_100051C24()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v80 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v80 - v5;
  double v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v80 - v9;
  ppDb = 0LL;
  uint64_t v11 = URL.absoluteString.getter(v8);
  uint64_t v13 = v12;
  uint64_t v14 = String.utf8CString.getter(v11, v12);
  swift_bridgeObjectRelease(v13);
  int v15 = sqlite3_open_v2((const char *)(v14 + 32), &ppDb, 2, 0LL);
  swift_release(v14);
  uint64_t v16 = ppDb;
  if (v15)
  {
    uint64_t v17 = sqlite3_errmsg(ppDb);
    if (v17)
    {
      uint64_t v18 = String.init(cString:)(v17);
      unint64_t v20 = v19;
      if (qword_1001301E0 != -1) {
        swift_once(&qword_1001301E0, sub_100051A54);
      }
      uint64_t v21 = sub_10000E918();
      int v22 = sub_100008D98(v21, (uint64_t)qword_1001353A8);
      sub_1000594A8((uint64_t)v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
      swift_bridgeObjectRetain();
      int v23 = v22;
      uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (sub_1000595B0(v26))
      {
        uint64_t v27 = sub_10000AE10(28LL);
        uint64_t v83 = sub_10000AE10(64LL);
        uint64_t v85 = v83;
        *(_DWORD *)uint64_t v27 = 136315650;
        uint64_t v81 = v18;
        sub_100058EF8( (unint64_t *)&qword_100131820,  (void (*)(uint64_t))&type metadata accessor for URL);
        int v82 = v23;
        uint64_t v29 = sub_100059688(v28, v28);
        uint64_t v31 = sub_1000594D0(v29, v30);
        uint64_t v32 = sub_1000594B4(v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v32, v33, v27 + 4, v34);
        sub_10000ADB0();
        sub_1000593FC((uint64_t)v3, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
        sub_10005965C();
        LODWORD(v8sub_10000AC58(v0 + 4) = v15;
        sub_100059550(v35, v36, v37, v38);
        *(_WORD *)(v27 + 18) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v39 = sub_10000DE60(v81, v20, &v85);
        uint64_t v40 = sub_100059634(v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v40, v41, v27 + 20, v42);
        swift_bridgeObjectRelease_n(v20, 3LL);
        Swift::String v43 = "Could not open database at %s to truncate: %d %s";
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v82, v43, (uint8_t *)v27, 0x1Cu);
        uint64_t v70 = v83;
        swift_arrayDestroy(v83, 2LL);
        sub_10000AD78(v70);
        sub_10000AD78(v27);

        return;
      }

      sub_1000593FC((uint64_t)v3, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));

      unint64_t v71 = v20;
LABEL_20:
      swift_bridgeObjectRelease_n(v71, 2LL);
      return;
    }

    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }

  int v44 = _sqlite3_db_truncate(ppDb, 0LL);
  if (v44)
  {
    int v45 = v44;
    uint64_t v46 = sqlite3_errmsg(v16);
    if (v46)
    {
      uint64_t v47 = String.init(cString:)(v46);
      unint64_t v49 = v48;
      if (qword_1001301E0 != -1) {
        swift_once(&qword_1001301E0, sub_100051A54);
      }
      uint64_t v50 = sub_10000E918();
      int v51 = sub_100008D98(v50, (uint64_t)qword_1001353A8);
      sub_1000594A8((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
      uint64_t v52 = sub_1000119E4();
      int v53 = v51;
      uint64_t v25 = (os_log_s *)Logger.logObject.getter(v52);
      os_log_type_t v54 = static os_log_type_t.error.getter();
      if (sub_1000595B0(v54))
      {
        uint64_t v27 = sub_10000AE10(28LL);
        uint64_t v83 = sub_10000AE10(64LL);
        uint64_t v85 = v83;
        *(_DWORD *)uint64_t v27 = 136315650;
        uint64_t v81 = v47;
        sub_100058EF8( (unint64_t *)&qword_100131820,  (void (*)(uint64_t))&type metadata accessor for URL);
        int v82 = v53;
        uint64_t v56 = sub_100059688(v55, v55);
        uint64_t v58 = sub_1000594D0(v56, v57);
        uint64_t v59 = sub_1000594B4(v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v59, v60, v27 + 4, v61);
        sub_10000ADB0();
        sub_1000593FC((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
        sub_10005965C();
        LODWORD(v8sub_10000AC58(v0 + 4) = v45;
        sub_100059550(v62, v63, v64, v65);
        *(_WORD *)(v27 + 18) = 2080;
        sub_1000119E4();
        uint64_t v66 = sub_10000DE60(v81, v49, &v85);
        uint64_t v67 = sub_100059634(v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v67, v68, v27 + 20, v69);
        swift_bridgeObjectRelease_n(v49, 3LL);
        Swift::String v43 = "Could not truncate database at %s: %d %s";
        goto LABEL_13;
      }

      sub_1000593FC((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));

      unint64_t v71 = v49;
      goto LABEL_20;
    }

    goto LABEL_24;
  }

  if (qword_1001301E0 != -1) {
    swift_once(&qword_1001301E0, sub_100051A54);
  }
  uint64_t v72 = sub_10000E918();
  sub_100008D98(v72, (uint64_t)qword_1001353A8);
  sub_1000594A8((uint64_t)v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
  uint64_t v73 = (os_log_s *)sub_10004BF88();
  os_log_type_t v74 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v73, v74))
  {
    uint64_t v75 = (uint8_t *)sub_10000AE10(12LL);
    uint64_t v76 = sub_10000AE10(32LL);
    uint64_t v85 = v76;
    *(_DWORD *)uint64_t v75 = 136315138;
    sub_100058EF8((unint64_t *)&qword_100131820, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v78 = sub_100059688(v77, v77);
    uint64_t v84 = sub_1000594D0(v78, v79);
    sub_100059510((uint64_t)&v84, (uint64_t)&v85, (uint64_t)(v75 + 4));
    sub_10000ADB0();
    sub_1000593FC((uint64_t)v10, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    sub_10000AF5C((void *)&_mh_execute_header, v73, v74, "Truncated database at %s", v75);
    sub_10000AF48(v76);
    sub_10000AD78(v76);
    sub_10000AD78((uint64_t)v75);
  }

  else
  {
    sub_1000593FC((uint64_t)v10, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  }

  sqlite3_close_v2(ppDb);
}

void sub_1000521D8()
{
  uint64_t v63 = v1;
  LODWORD(v61) = v2;
  unint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  uint64_t v62 = type metadata accessor for Logger(0LL);
  uint64_t v60 = *(void *)(v62 - 8);
  uint64_t v7 = *(void *)(v60 + 64);
  __chkstk_darwin(v62);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v59 - v9;
  uint64_t v11 = (uint64_t)v0 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_URL;
  uint64_t v12 = type metadata accessor for URL(0LL);
  sub_100009E60(v11, 1LL, 1LL, v12);
  uint64_t v13 = v0;
  uint64_t v14 = v63;
  uint64_t v15 = sub_100052704(v6, v4, 1.0, 1LL, 1);
  uint64_t v16 = v6;
  uint64_t v17 = v14;
  sub_100058F30(v16, v4);
  if (v14) {
    goto LABEL_8;
  }
  uint64_t v18 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = v60;
  uint64_t v59 = v11;
  uint64_t v63 = v13;
  uint64_t v20 = v15;
  if ((v61 & 1) == 0 && (sub_10005295C() & 1) == 0)
  {
LABEL_6:
    os_log_type_t v29 = ObjectType;
    sub_100052C9C();
    if (v17)
    {
LABEL_7:
      sub_100059690();
      uint64_t v13 = v63;
      uint64_t v11 = v59;
LABEL_8:
      sub_100026E14(v11, &qword_100130BC0);

      swift_deallocPartialClassInstance( v13,  ObjectType,  *(unsigned int *)((swift_isaMask & *v13) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v13) + 0x34LL));
LABEL_9:
      sub_10001DEE8();
      return;
    }

    if ((v31 & 1) != 0)
    {
      uint64_t v39 = v62;
      if (qword_1001301E0 != -1)
      {
        swift_once(&qword_1001301E0, sub_100051A54);
        uint64_t v39 = v62;
      }

      uint64_t v40 = (void *)sub_100059480(v39, (uint64_t)qword_1001353A8);
      os_log_type_t v41 = static os_log_type_t.default.getter();
      if (sub_100033830(v41))
      {
        *(_WORD *)sub_100059468() = 0;
        sub_100059308((void *)&_mh_execute_header, v42, v43, "Found an empty database, resetting and writing schema");
        sub_1000592C8();
      }

      sub_100052D44(v20);
    }

    else
    {
      uint64_t v32 = v30;
      BOOL v33 = v30 == 103;
      uint64_t v34 = v62;
      if (!v33)
      {
        if (qword_1001301E0 != -1)
        {
          swift_once(&qword_1001301E0, sub_100051A54);
          uint64_t v34 = v62;
        }

        uint64_t v50 = (os_log_s *)sub_100059480(v34, (uint64_t)qword_1001353A8);
        os_log_type_t v51 = static os_log_type_t.default.getter();
        if (sub_100033830(v51))
        {
          uint64_t v52 = swift_slowAlloc(22LL, -1LL);
          *(_DWORD *)uint64_t v52 = 134218240;
          uint64_t v54 = sub_1000595D4(v52, v53, v52 + 4, v52 + 12);
          *(_WORD *)(v52 + 12) = 2048;
          sub_1000595D4(v54, v55, v52 + 14, v52 + 22);
          _os_log_impl( (void *)&_mh_execute_header,  v50,  v29,  "Found an existing database with a different schema version (found: %lld, expected: %ld)",  (uint8_t *)v52,  0x16u);
          sub_1000592C8();
        }

        unint64_t v56 = sub_100058928();
        uint64_t v57 = sub_100038AC8((uint64_t)&type metadata for MetadataStore.CreationError, v56);
        *(void *)uint64_t v58 = v32;
        *(_BYTE *)(v58 + 8) = 2;
        swift_willThrow(v57);
        goto LABEL_7;
      }

      if (qword_1001301E0 != -1)
      {
        swift_once(&qword_1001301E0, sub_100051A54);
        uint64_t v34 = v62;
      }

      uint64_t v35 = (void *)sub_100059480(v34, (uint64_t)qword_1001353A8);
      os_log_type_t v36 = static os_log_type_t.debug.getter();
      if (sub_100033830(v36))
      {
        *(_WORD *)sub_100059468() = 0;
        sub_100059308( (void *)&_mh_execute_header,  v37,  v38,  "Found an existing database matching the expected schema version");
        sub_1000592C8();
      }
    }

    int v44 = (char *)v63;
    *(void *)((char *)v63 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection) = v20;
    objc_allocWithZone((Class)type metadata accessor for _LNMetadataProviderDirect());
    uint64_t v45 = swift_retain_n(v20, 2LL);
    *(void *)&v44[OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider] = sub_1000795AC(v45);

    if (qword_1001301E0 != -1) {
      swift_once(&qword_1001301E0, sub_100051A54);
    }
    uint64_t v46 = (void *)sub_100059480(v62, (uint64_t)qword_1001353A8);
    os_log_type_t v47 = static os_log_type_t.debug.getter();
    if (sub_100033830(v47))
    {
      *(_WORD *)sub_100059468() = 0;
      sub_100059308((void *)&_mh_execute_header, v48, v49, "Metadata store database opened");
      sub_1000592C8();
      sub_100059690();
    }

    else
    {

      sub_100059690();
    }

    v65.receiver = v44;
    v65.super_class = ObjectType;
    objc_msgSendSuper2(&v65, "init", v59);
    goto LABEL_9;
  }

  uint64_t v61 = 0LL;
  if (LNLogSubsystem)
  {
    uint64_t v21 = String.init(cString:)(LNLogSubsystem);
    int v22 = v10;
    Logger.init(subsystem:category:)(v21, v23, 0x45434152544244LL, 0xE700000000000000LL);
    uint64_t v24 = v10;
    uint64_t v25 = v62;
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v18, v24, v62);
    uint64_t v26 = *(unsigned __int8 *)(v19 + 80);
    uint64_t v27 = (v26 + 16) & ~v26;
    uint64_t v28 = swift_allocObject(&unk_100124860, v27 + v7, v26 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v28 + v27, v18, v25);
    Connection.trace(_:)(sub_100058FA0, v28);
    swift_release(v28);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v25);
    uint64_t v17 = (void *)v61;
    goto LABEL_6;
  }

  __break(1u);
}

uint64_t sub_100052704(uint64_t a1, unint64_t a2, double a3, uint64_t a4, char a5)
{
  uint64_t v10 = type metadata accessor for Connection();
  swift_allocObject(v10, 121LL, 7LL);
  sub_100058FE8(a1, a2);
  uint64_t v11 = Connection.init(_:readonly:)(a1, a2, 0);
  uint64_t v12 = v5;
  if (!v5)
  {
    if ((a5 & 1) != 0)
    {
      id v13 = [(id)objc_opt_self(NSProcessInfo) processInfo];
      id v14 = [v13 environment];

      uint64_t v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v14,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
      sub_100011C38(0x5F454C4241534944LL, 0xEB000000004C4157LL, v15);
      uint64_t v17 = v16;
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v17);
      if (!v17) {
        sub_1000C0C4C();
      }
    }

    _StringGuts.grow(_:)(23LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v18._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    object = v18._object;
    String.append(_:)(v18);
    swift_bridgeObjectRelease(object);
    v20._uint64_t countAndFlagsBits = 59LL;
    v20._object = (void *)0xE100000000000000LL;
    String.append(_:)(v20);
    v21._uint64_t countAndFlagsBits = 0xD000000000000014LL;
    v21._object = (void *)0x80000001000FA450LL;
    Connection.execute(_:)(v21);
    if (!v22)
    {
      swift_bridgeObjectRelease(0x80000001000FA450LL);
      Connection.busyTimeout.setter(a3);
      return v11;
    }

    swift_release(v11);
    swift_bridgeObjectRelease(0x80000001000FA450LL);
    uint64_t v12 = v22;
  }

  unint64_t v23 = sub_100058928();
  swift_allocError(&type metadata for MetadataStore.CreationError, v23, 0LL, 0LL);
  *(void *)uint64_t v24 = v12;
  *(_BYTE *)(v24 + 8) = 0;
  swift_willThrow();
  return v11;
}

uint64_t sub_10005295C()
{
  id v0 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = sub_1000595FC((uint64_t)v1, "objectForKey:");

  if (v2)
  {
    sub_1000596BC(v3, v4);
    uint64_t v3 = swift_unknownObjectRelease(v2);
  }

  else
  {
    __int128 v21 = 0u;
    __int128 v22 = 0u;
  }

  sub_1000596B0(v3, v4, &qword_100130EA0, v5, v6);
  if (!*(void *)&v24[20])
  {
    sub_100026E14((uint64_t)&v23, &qword_100130EA0);
    return 0LL;
  }

  if ((sub_1000596A4( (uint64_t)&v20 + 7,  v7,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Bool,  v8,  v9,  v10,  v11,  v19,  v20) & 1) == 0) {
    return 0LL;
  }
  uint64_t v12 = HIBYTE(v20);
  if (qword_1001301E0 != -1) {
    swift_once(&qword_1001301E0, sub_100051A54);
  }
  uint64_t v13 = sub_10000E918();
  uint64_t v14 = sub_100008D98(v13, (uint64_t)qword_1001353A8);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)sub_10000AE10(8LL);
    *(_DWORD *)uint64_t v17 = 67109120;
    int v23 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v17 + 4, v17 + 8);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "traceDB = %{BOOL}d", v17, 8u);
    sub_10000AD78((uint64_t)v17);
  }

  return v12;
}

void sub_100052B20(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = swift_bridgeObjectRetain_n(a2, 2LL);
  osos_log_t log = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v10 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_10000DE60(a1, a2, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, "%s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

void sub_100052C9C()
{
  if (!v0)
  {
    if (v4)
    {
      sub_100009EEC(&v3, (uint64_t)v5);
      uint64_t v1 = sub_100008DB0(&qword_100131980);
      swift_dynamicCast(&v2, v5, v1, &type metadata for Int64, 7LL);
    }

    else
    {
      __break(1u);
    }
  }

void sub_100052D44(uint64_t a1)
{
  if (v1)
  {
    uint64_t v2 = sub_10005920C();
    sub_100058EF8( (unint64_t *)&qword_100131958,  (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_100038AC8(v2, v3);
    sub_1000591C4();
    sub_100059200();
    sub_1000592C0();
    sub_10004BDA4();
  }

  sub_10005931C();
}

void sub_100052DB0()
{
  if (v0)
  {
    uint64_t v1 = sub_10005920C();
    sub_100058EF8( (unint64_t *)&qword_100131958,  (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_100038AC8(v1, v2);
    sub_1000591C4();
    sub_100059200();
    sub_1000592C0();
    sub_10004BDA4();
  }

  sub_10005931C();
}

void sub_100052E4C(void *a1)
{
}

void sub_100052E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (v4)
  {
    swift_release();
    uint64_t v9 = sub_10005920C();
    sub_100058EF8( (unint64_t *)&qword_100131958,  (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_100038AC8(v9, v10);
    sub_1000591C4();
    sub_100059200();
    sub_1000592C0();
    sub_10004BDA4();
  }

  else
  {
    uint64_t v11 = swift_release();
    sub_1000596C8(v11, v12, &qword_100133600, v13);
  }

void sub_100052F48(uint64_t a1, uint64_t a2)
{
}

void sub_100052F64(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v6 = sub_100059528();
  a3(v6);
  sub_1000593D8();
  swift_release();
  if (v3)
  {
    uint64_t v7 = sub_10005920C();
    sub_100058EF8( (unint64_t *)&qword_100131958,  (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_100038AC8(v7, v8);
    sub_1000592D8();
    sub_10005934C(v4);
    sub_100059354();
    sub_100059344();
  }

  sub_100059598();
  sub_100059578();
}

void sub_100052FFC()
{
}

void sub_100053018(void *a1)
{
}

void sub_100053034(void *a1, void (*a2)(void *, uint64_t))
{
  if (v2)
  {
    uint64_t v6 = sub_10005920C();
    sub_100058EF8( (unint64_t *)&qword_100131958,  (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_100038AC8(v6, v7);
    sub_1000592D8();
    sub_10005934C(a1);
    sub_100059354();
    sub_100059344();
  }

  sub_100059598();
  sub_100059650();
}

void sub_1000530CC()
{
}

void sub_1000530E8(void (*a1)(uint64_t))
{
  uint64_t v4 = sub_1000592A0(OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection);
  a1(v4);
  sub_1000593D8();
  swift_release();
  if (v1)
  {
    uint64_t v5 = sub_10005920C();
    sub_100058EF8( (unint64_t *)&qword_100131958,  (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_100038AC8(v5, v6);
    sub_1000592D8();
    sub_10005934C(v2);
    sub_100059354();
    sub_100059344();
  }

  sub_100059598();
  sub_100059650();
}

uint64_t sub_100053174()
{
  if (!v0) {
    return v4;
  }
  uint64_t v1 = sub_10005920C();
  sub_100058EF8( (unint64_t *)&qword_100131958,  (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
  sub_100038AC8(v1, v2);
  sub_1000591C4();
  sub_100059200();
  sub_1000592C0();
  return sub_10004BDA4();
}

uint64_t sub_100053208@<X0>(__int128 *a1@<X8>)
{
  uint64_t v1 = sub_100008DB0((uint64_t *)&unk_1001323C0);
  sub_10001DCEC((unint64_t *)&qword_100131110, (uint64_t *)&unk_1001323C0);
  ExpressionType.init(_:)(7955819LL, 0xE300000000000000LL, v1, v2);
  uint64_t v3 = sub_100008DB0((uint64_t *)&unk_1001323D0);
  sub_10001DCEC(&qword_100131118, (uint64_t *)&unk_1001323D0);
  ExpressionType.init(_:)(0x65756C6176LL, 0xE500000000000000LL, v3, v4);
  swift_bridgeObjectRetain();
  == infix<A>(_:_:)();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20[3] = &type metadata for Table;
  void v20[4] = &protocol witness table for Table;
  uint64_t v11 = swift_allocObject(&unk_100124838, 184LL, 7LL);
  uint64_t v12 = v11 + 16;
  v20[0] = v11;
  memcpy(__dst, __src, sizeof(__dst));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)(v6, v8, v10, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, v12);
  swift_bridgeObjectRelease_n(v10, 2LL);
  swift_bridgeObjectRelease_n(v8, 2LL);
  sub_10001DAF0(__src);
  uint64_t v13 = __src[23];
  uint64_t v14 = Connection.pluck(_:)(v20);
  if (v13)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_10000AC58(v20);
  }

  else
  {
    uint64_t v16 = v14;
    sub_10000AC58(v20);
    if (v16)
    {
      Row.get<A>(_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      __int128 v17 = *(_OWORD *)__dst;
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      __int128 v17 = xmmword_1000F4470;
    }

    *a1 = v17;
  }

  return result;
}

void sub_100053514()
{
  uint64_t v1 = sub_100059608();
  sub_100053590(v1, v2, v3, v4, v5);
  if (v0)
  {
    uint64_t v6 = sub_10005920C();
    sub_100058EF8( (unint64_t *)&qword_100131958,  (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_100038AC8(v6, v7);
    sub_1000591C4();
    sub_100059200();
    sub_1000592C0();
    sub_10004BDA4();
  }

  sub_10005931C();
}

uint64_t sub_100053590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = sub_100008DB0((uint64_t *)&unk_1001323C0);
  sub_10001DCEC((unint64_t *)&qword_100131110, (uint64_t *)&unk_1001323C0);
  ExpressionType.init(_:)(7955819LL, 0xE300000000000000LL, v6, v7);
  uint64_t v8 = __dst[0];
  uint64_t v9 = __dst[1];
  uint64_t v10 = __dst[2];
  uint64_t v11 = sub_100008DB0((uint64_t *)&unk_1001323D0);
  sub_10001DCEC(&qword_100131118, (uint64_t *)&unk_1001323D0);
  ExpressionType.init(_:)(0x65756C6176LL, 0xE500000000000000LL, v11, v12);
  uint64_t v14 = __dst[0];
  uint64_t v13 = __dst[1];
  uint64_t v15 = __dst[2];
  uint64_t v16 = sub_100008DB0(&qword_1001323E0);
  v17._rawValue = (void *)swift_initStackObject(v16, v26);
  *((_OWORD *)v17._rawValue + 1) = xmmword_1000F57D0;
  __dst[0] = a2;
  __dst[1] = a3;
  <- infix<A>(_:_:)( v8,  v9,  v10,  (uint64_t)__dst,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __dst[0] = a4;
  __dst[1] = a5;
  <- infix<A>(_:_:)( v14,  v13,  v15,  (uint64_t)__dst,  (uint64_t)&type metadata for Data,  (uint64_t)&protocol witness table for Data);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  memcpy(__dst, __src, sizeof(__dst));
  AppIntents_SQLite::Insert v28 = QueryType.insert(or:_:)(AppIntents_SQLite_OnConflict_replace, v17);
  uint64_t countAndFlagsBits = v28.template._countAndFlagsBits;
  object = v28.template._object;
  rawValue = v28.bindings._rawValue;
  swift_bridgeObjectRelease();
  sub_10001DAF0(__src);
  v29.template._uint64_t countAndFlagsBits = countAndFlagsBits;
  v29.template._object = object;
  v29.bindings._rawValue = rawValue;
  Connection.run(_:)(v29);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000537CC(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 32) = a4;
  *(void *)(v5 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v4;
  *(_BYTE *)(v5 + 8sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = a2;
  *(void *)(v5 + 1sub_10000AC58(v0 + 6) = a1;
  *(void *)(v5 + 2sub_10000AC58(v0 + 4) = a3;
  sub_10000EA88();
  return swift_task_switch(v6, v7, v8);
}

uint64_t sub_1000537F0()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  char v3 = *(_BYTE *)(v0 + 80);
  uint64_t v4 = swift_task_alloc(64LL);
  *(void *)(v0 + 48) = v4;
  __int128 v5 = *(_OWORD *)(v0 + 16);
  *(void *)(v4 + 1sub_10000AC58(v0 + 6) = v1;
  *(_OWORD *)(v4 + 2sub_10000AC58(v0 + 4) = v5;
  *(void *)(v4 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v2;
  *(_BYTE *)(v4 + 48) = v3;
  uint64_t v8 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_100132400 + dword_100132400);
  uint64_t v6 = (void *)swift_task_alloc(unk_100132404);
  *(void *)(v0 + 5sub_10000AC58(v0 + 6) = v6;
  void *v6 = v0;
  v6[1] = sub_1000538A0;
  return v8(2, (uint64_t)&unk_1001323F8, v4);
}

uint64_t sub_1000538A0(uint64_t a1)
{
  char v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 56LL);
  v3[8] = a1;
  void v3[9] = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    swift_task_dealloc(v3[6]);
  }
  sub_10000EA88();
  return swift_task_switch(v5, v6, v7);
}

uint64_t sub_100053910()
{
  if (*(void *)(v0 + 64)) {
    swift_willThrow();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100053950()
{
  return sub_10000C914(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005397C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(_BYTE *)(v6 + 392) = a6;
  *(void *)(v6 + 232) = a4;
  *(void *)(v6 + 24sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = a5;
  *(void *)(v6 + 21sub_10000AC58(v0 + 6) = a2;
  *(void *)(v6 + 22sub_10000AC58(v0 + 4) = a3;
  *(void *)(v6 + 208) = a1;
  uint64_t v7 = sub_100008DB0(&qword_100130BC0);
  *(void *)(v6 + 248) = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100008DB0(&qword_100132D90);
  *(void *)(v6 + 25sub_10000AC58(v0 + 6) = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for LNBundleRecord(0LL);
  *(void *)(v6 + 26sub_10000AC58(v0 + 4) = v9;
  unint64_t v10 = (*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v6 + 272) = swift_task_alloc(v10);
  *(void *)(v6 + 28sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for Logger(0LL);
  *(void *)(v6 + 288) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v6 + 29sub_10000AC58(v0 + 6) = v12;
  *(void *)(v6 + 30sub_10000AC58(v0 + 4) = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100053A64, 0LL, 0LL);
}

uint64_t sub_100053A64()
{
  uint64_t v124 = v0 + 200;
  uint64_t v2 = qword_1001301E0;
  id v3 = *(id *)(v0 + 216);
  if (v2 == -1)
  {
    uint64_t v4 = v3;
  }

  else
  {
    swift_once(&qword_1001301E0, sub_100051A54);
    uint64_t v4 = *(void **)(v0 + 216);
  }

  uint64_t v6 = *(void *)(v0 + 296);
  uint64_t v5 = *(void *)(v0 + 304);
  sub_100008D98(*(void *)(v0 + 288), (uint64_t)qword_1001353A8);
  (*(void (**)(uint64_t))(v6 + 16))(v5);

  sub_100059670();
  uint64_t v7 = (os_log_s *)sub_10004BF88();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = sub_100059538(v8);
  uint64_t v11 = *(void *)(v0 + 296);
  uint64_t v10 = *(void *)(v0 + 304);
  uint64_t v12 = *(void *)(v0 + 288);
  if (v9)
  {
    uint64_t v123 = *(void *)(v0 + 304);
    uint64_t v122 = *(void *)(v0 + 296);
    uint64_t v13 = (uint8_t *)sub_10000AE10(12LL);
    uint64_t v126 = sub_10000AE10(32LL);
    *(_DWORD *)uint64_t v13 = 136315138;
    sub_100008D74((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v14 = sub_100059494();
    *(void *)(v0 + 20sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = sub_100059394(v14, v15, v16, v17, v18, v19, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v124, v0 + 208, v13 + 4, v13 + 12);
    sub_10000ADB0();
    sub_10000AC58((void *)(v0 + 16));
    sub_10000AF5C((void *)&_mh_execute_header, v7, v1, "→ Beginning indexing transaction for %s", v13);
    sub_10000AF48(v126);
    sub_10000AD78(v126);
    sub_10000AD78((uint64_t)v13);

    (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v123, v12);
  }

  else
  {
    sub_10000AC58((void *)(v0 + 16));

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }

  __int128 v21 = *(void **)(v0 + 224);
  uint64_t v22 = *(void *)(*(void *)(v0 + 216) + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection);
  *(void *)(v0 + 312) = v22;
  uint64_t v23 = v21[4];
  sub_100008D74(v21, v21[3]);
  uint64_t v24 = *(void (**)(uint64_t))(*(void *)(v23 + 8) + 8LL);
  sub_100047360();
  uint64_t v25 = sub_10005967C();
  v24(v25);
  sub_1000BD2B4();
  uint64_t v27 = *(void *)(v0 + 256);
  uint64_t v26 = *(void *)(v0 + 264);
  sub_10000ADB0();
  if (sub_100009E6C(v27, 1LL, v26) == 1)
  {
    uint64_t v28 = *(void *)(v0 + 224);
    sub_100026E14(*(void *)(v0 + 256), &qword_100132D90);
    sub_100008F24(v28, v0 + 56);
    AppIntents_SQLite::Insert v29 = (os_log_s *)sub_1000595CC();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      char v31 = (uint8_t *)sub_10000AE10(12LL);
      uint64_t v127 = sub_10000AE10(32LL);
      *(_DWORD *)char v31 = 136315138;
      uint64_t v33 = *(void *)(v0 + 80);
      uint64_t v32 = *(void *)(v0 + 88);
      sub_100008D74((void *)(v0 + 56), v33);
      uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)(v32 + 8) + 8LL))(v33);
      *(void *)(v0 + 18sub_10000AC58(v0 + 4) = sub_100059394(v34, v35, v36, v37, v38, v39, v40);
      sub_100059510(v0 + 184, v0 + 192, (uint64_t)(v31 + 4));
      sub_10000ADB0();
      sub_10000AC58((void *)(v0 + 56));
      sub_10000AF5C((void *)&_mh_execute_header, v29, v30, "Bundle record %s not found, creating", v31);
      sub_10000AF48(v127);
      sub_10000AD78(v127);
      sub_10000AD78((uint64_t)v31);
    }

    else
    {
      sub_10000AC58((void *)(v0 + 56));
    }

    uint64_t v76 = *(int **)(v0 + 264);
    uint64_t v75 = *(uint64_t **)(v0 + 272);
    uint64_t v77 = *(void *)(v0 + 248);
    uint64_t v78 = *(void **)(v0 + 224);
    sub_100008D74(v78, v21[3]);
    uint64_t v79 = sub_100059494();
    uint64_t v125 = v80;
    uint64_t v82 = v21[3];
    uint64_t v81 = v21[4];
    sub_100008D74(v78, v82);
    (*(void (**)(uint64_t))(*(void *)(v81 + 8) + 16LL))(v82);
    uint64_t v83 = v21[4];
    sub_100008D74(v78, v21[3]);
    uint64_t v84 = sub_100059438(*(uint64_t (**)(uint64_t))(*(void *)(v83 + 8) + 24LL));
    uint64_t v86 = v85;
    id v87 = [(id)objc_opt_self(LNBundleMetadata) latestMetadataVersion];
    uint64_t *v75 = v79;
    v75[1] = v125;
    sub_100058D7C(v77, (uint64_t)v75 + v76[5], &qword_100130BC0);
    uint64_t v88 = (uint64_t *)((char *)v75 + v76[6]);
    *uint64_t v88 = v84;
    v88[1] = v86;
    *(uint64_t *)((char *)v75 + v76[7]) = 1LL;
    *(uint64_t *)((char *)v75 + v76[8]) = (uint64_t)v87;
    sub_1000BD818();
    uint64_t v100 = (void *)swift_task_alloc(dword_100132414);
    *(void *)(v0 + 368) = v100;
    *uint64_t v100 = v0;
    v100[1] = sub_1000544D4;
    uint64_t v101 = *(void *)(v0 + 272);
    return sub_1000546A4( v101,  *(void *)(v0 + 216),  *(void *)(v0 + 224),  *(void *)(v0 + 232),  *(void *)(v0 + 240),  v22);
  }

  uint64_t v41 = *(void *)(v0 + 280);
  uint64_t v42 = *(void *)(v0 + 264);
  uint64_t v43 = *(void **)(v0 + 224);
  sub_10001B5C8(*(void *)(v0 + 256), v41);
  uint64_t v44 = v41 + *(int *)(v42 + 24);
  uint64_t v45 = v21[3];
  uint64_t v46 = v21[4];
  sub_100008D74(v43, v45);
  uint64_t v47 = *(void *)(v46 + 8);
  uint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t))(v47 + 24);
  uint64_t v49 = sub_10005967C();
  sub_10000A280(v49, v50);
  uint64_t v51 = v48(v45, v47);
  unint64_t v53 = v52;
  uint64_t v54 = sub_10005967C();
  os_log_type_t v56 = static Data.== infix(_:_:)(v54, v55, v51, v53);
  sub_10000A1D8(v51, v53);
  uint64_t v57 = sub_10005967C();
  sub_10000A1D8(v57, v58);
  if ((v56 & 1) == 0)
  {
    sub_100008F24(*(void *)(v0 + 224), v0 + 136);
    uint64_t v89 = (os_log_s *)sub_1000595CC();
    os_log_type_t v90 = static os_log_type_t.info.getter();
    if (sub_100059538(v90))
    {
      uint64_t v91 = (uint8_t *)sub_10000AE10(12LL);
      uint64_t v129 = sub_10000AE10(32LL);
      *(_DWORD *)uint64_t v91 = 136315138;
      uint64_t v92 = *(void *)(v0 + 168);
      sub_100008D74((void *)(v0 + 136), *(void *)(v0 + 160));
      uint64_t v93 = sub_100059438(*(uint64_t (**)(uint64_t))(*(void *)(v92 + 8) + 8LL));
      *(void *)(v0 + 17sub_10000AC58(v0 + 6) = sub_100059394(v93, v94, v95, v96, v97, v98, v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v91 + 4, v91 + 12);
      sub_10000ADB0();
      sub_10000AC58((void *)(v0 + 136));
      sub_10000AF5C((void *)&_mh_execute_header, v89, v56, "%s installIdentifier changed, indexing", v91);
      sub_10000AF48(v129);
      sub_10000AD78(v129);
      sub_10000AD78((uint64_t)v91);
    }

    else
    {
      sub_10000AC58((void *)(v0 + 136));
    }

    uint64_t v104 = *(void *)(v0 + 280);
    uint64_t v105 = *(void *)(v0 + 264);
    uint64_t v106 = v21[4];
    sub_100008D74(*(void **)(v0 + 224), v21[3]);
    uint64_t v107 = sub_10005942C(*(uint64_t (**)(uint64_t))(*(void *)(v106 + 8) + 24LL));
    uint64_t v109 = v108;
    sub_10000A1D8(*(void *)v44, *(void *)(v44 + 8));
    *(void *)uint64_t v44 = v107;
    *(void *)(v44 + 8) = v109;
    *(void *)(v104 + *(int *)(v105 + 2swift_bridgeObjectRelease(*(void *)(v0 + qword_100134400 + 8)) = 1LL;
    sub_1000595E0();
    if (!v104)
    {
      uint64_t v102 = (void *)swift_task_alloc(dword_100132414);
      *(void *)(v0 + 34sub_10000AC58(v0 + 4) = v102;
      uint64_t v103 = sub_100054420;
      goto LABEL_25;
    }

uint64_t sub_10005436C()
{
  uint64_t v4 = v2[40];
  *uint64_t v5 = *v3;
  v2[41] = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    v2[42] = v0;
  }
  sub_10000EA88();
  return sub_10000AE28();
}

uint64_t sub_1000543C4()
{
  uint64_t v2 = *(void *)(v1 + 336);
  uint64_t v3 = sub_1000594E8();
  *uint64_t v0 = v2;
  sub_1000593C0(v3, type metadata accessor for LNBundleRecord);
  sub_1000591D4();
  sub_10000AF6C();
  sub_10000AFA8();
  sub_10004D844();
  sub_10004D858();
  sub_10004D884();
  return sub_100059260(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100054420()
{
  uint64_t v4 = v2[43];
  *uint64_t v5 = *v3;
  v2[44] = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    v2[45] = v0;
  }
  sub_10000EA88();
  return sub_10000AE28();
}

uint64_t sub_100054478()
{
  uint64_t v2 = *(void *)(v1 + 360);
  uint64_t v3 = sub_1000594E8();
  *uint64_t v0 = v2;
  sub_1000593C0(v3, type metadata accessor for LNBundleRecord);
  sub_1000591D4();
  sub_10000AF6C();
  sub_10000AFA8();
  sub_10004D844();
  sub_10004D858();
  sub_10004D884();
  return sub_100059260(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1000544D4()
{
  uint64_t v4 = v2[46];
  *uint64_t v5 = *v3;
  v2[47] = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    v2[48] = v0;
  }
  sub_10000EA88();
  return sub_10000AE28();
}

uint64_t sub_10005452C()
{
  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v2 = *(void **)(v0 + 208);
  uint64_t v3 = swift_release();
  sub_1000593C0(v3, type metadata accessor for LNBundleRecord);
  *uint64_t v2 = v1;
  sub_1000591D4();
  sub_10000AF6C();
  sub_10000AFA8();
  sub_10004D844();
  sub_10004D858();
  sub_10004D884();
  return sub_100059260(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100054594()
{
  uint64_t v1 = swift_release();
  sub_1000593C0(v1, type metadata accessor for LNBundleRecord);
  sub_100059274();
  sub_10000AFA8();
  sub_10004D844();
  sub_10004D858();
  sub_10004D884();
  sub_100059648();
  return sub_100059230(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000545F4()
{
  uint64_t v1 = sub_1000595C0();
  sub_1000593C0(v1, type metadata accessor for LNBundleRecord);
  sub_100059274();
  sub_10000AFA8();
  sub_10004D844();
  sub_10004D858();
  sub_10004D884();
  sub_100059648();
  return sub_100059230(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005464C()
{
  uint64_t v1 = sub_1000595C0();
  sub_1000593C0(v1, type metadata accessor for LNBundleRecord);
  sub_100059274();
  sub_10000AFA8();
  sub_10004D844();
  sub_10004D858();
  sub_10004D884();
  sub_100059648();
  return sub_100059230(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000546A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[23] = a5;
  _BYTE v6[24] = a6;
  v6[21] = a3;
  v6[22] = a4;
  v6[19] = a1;
  v6[20] = a2;
  uint64_t v7 = type metadata accessor for LNBundleRecord(0LL);
  v6[25] = v7;
  v6[26] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  v6[27] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v6[28] = v9;
  v6[29] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100054730, 0LL, 0LL);
}

uint64_t sub_100054730()
{
  uint64_t v1 = qword_1001301E0;
  id v2 = *(id *)(v0 + 160);
  if (v1 == -1)
  {
    uint64_t v3 = v2;
  }

  else
  {
    swift_once(&qword_1001301E0, sub_100051A54);
    uint64_t v3 = *(void **)(v0 + 160);
  }

  uint64_t v5 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 232);
  uint64_t v6 = *(void *)(v0 + 216);
  uint64_t v7 = sub_100008D98(v6, (uint64_t)qword_1001353A8);
  *(void *)(v0 + 24sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);

  sub_100059670();
  uint64_t v8 = (os_log_s *)sub_10004BF88();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v12 = *(void *)(v0 + 224);
  uint64_t v11 = *(void *)(v0 + 232);
  uint64_t v13 = *(void *)(v0 + 216);
  if (v10)
  {
    uint64_t v22 = *(void *)(v0 + 232);
    uint64_t v14 = (uint8_t *)sub_10000AE10(12LL);
    uint64_t v15 = sub_10000AE10(32LL);
    uint64_t v24 = v15;
    *(_DWORD *)uint64_t v14 = 136315138;
    uint64_t v16 = *(void *)(v0 + 48);
    sub_100008D74((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v17 = sub_10005942C(*(uint64_t (**)(uint64_t))(*(void *)(v16 + 8) + 8LL));
    *(void *)(v0 + 14sub_10000AC58(v0 + 4) = sub_10000DE60(v17, v18, &v24);
    sub_100059510(v0 + 144, v0 + 152, (uint64_t)(v14 + 4));
    sub_10000ADB0();
    sub_10000AC58((void *)(v0 + 16));
    sub_10000AF5C((void *)&_mh_execute_header, v8, v9, "Calling transaction block for %s", v14);
    sub_10000AF48(v15);
    sub_10000AD78(v15);
    sub_10000AD78((uint64_t)v14);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v22, v13);
  }

  else
  {
    sub_10000AC58((void *)(v0 + 16));

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }

  uint64_t v19 = *(int **)(v0 + 176);
  uint64_t v23 = (uint64_t (*)(void))((char *)v19 + *v19);
  uint64_t v20 = (void *)swift_task_alloc(v19[1]);
  *(void *)(v0 + 248) = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_100054948;
  return v23();
}

uint64_t sub_100054948()
{
  uint64_t v3 = *(void *)(v2 + 248);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 25sub_10000AC58(v0 + 6) = v0;
  swift_task_dealloc(v3);
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_100054998()
{
  uint64_t v1 = sub_100008F24(*(void *)(v0 + 168), v0 + 56);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)sub_10000AE10(12LL);
    uint64_t v5 = sub_10000AE10(32LL);
    uint64_t v13 = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v6 = *(void *)(v0 + 88);
    sub_100008D74((void *)(v0 + 56), *(void *)(v0 + 80));
    uint64_t v7 = sub_100059438(*(uint64_t (**)(uint64_t))(*(void *)(v6 + 8) + 8LL));
    *(void *)(v0 + 13sub_10000AC58(v0 + 6) = sub_10000DE60(v7, v8, &v13);
    sub_100059510(v0 + 136, v0 + 144, (uint64_t)(v4 + 4));
    sub_10000ADB0();
    sub_10000AC58((void *)(v0 + 56));
    sub_10000AF5C( (void *)&_mh_execute_header,  v2,  v3,  "Transaction succeeded for %s, resetting attemptedIndexCount",  v4);
    sub_10000AF48(v5);
    sub_10000AD78(v5);
    sub_10000AD78((uint64_t)v4);
  }

  else
  {
    sub_10000AC58((void *)(v0 + 56));
  }

  uint64_t v9 = *(void *)(v0 + 256);
  uint64_t v11 = *(void *)(v0 + 200);
  uint64_t v10 = *(void *)(v0 + 208);
  sub_100058C9C(*(void *)(v0 + 152), v10, type metadata accessor for LNBundleRecord);
  *(void *)(v10 + *(int *)(v11 + 2swift_bridgeObjectRelease(*(void *)(v0 + qword_100134400 + 8)) = 0LL;
  sub_1000BD558();
  sub_100058D54(*(void *)(v0 + 208), type metadata accessor for LNBundleRecord);
  if (v9)
  {
    sub_10000AF6C();
    sub_10000AFA8();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    swift_task_dealloc(*(void *)(v0 + 232));
    sub_10000AF6C();
    return (*(uint64_t (**)(void))(v0 + 8))(0LL);
  }

uint64_t sub_100054B90()
{
  uint64_t v1 = sub_10004BF04();
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 256);
    uint64_t v5 = (uint8_t *)sub_10000AE10(12LL);
    uint64_t v6 = sub_10000AE10(32LL);
    uint64_t v12 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getErrorValue(v4, v0 + 128, v0 + 96);
    uint64_t v7 = Error.localizedDescription.getter(*(void *)(v0 + 104), *(void *)(v0 + 112));
    *(void *)(v0 + 12sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = sub_10000DE60(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v5 + 4, v5 + 12);
    sub_10000ADB0();
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    sub_10000AF5C((void *)&_mh_execute_header, v2, v3, "Transaction failed due to error: %s", v5);
    sub_10000AF48(v6);
    sub_10000AD78(v6);
    sub_10000AD78((uint64_t)v5);
  }

  else
  {
    uint64_t v9 = *(void *)(v0 + 256);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
  }

  uint64_t v10 = *(void *)(v0 + 256);
  swift_task_dealloc(*(void *)(v0 + 232));
  sub_10000AFA8();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v10);
}

uint64_t sub_100054D1C(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 32) = a3;
  *(void *)(v4 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v3;
  *(void *)(v4 + 2sub_10000AC58(v0 + 4) = a2;
  *(_BYTE *)(v4 + 6sub_10000AC58(v0 + 4) = a1;
  return swift_task_switch(sub_100054D3C, 0LL, 0LL);
}

uint64_t sub_100054D3C()
{
  int v1 = *(unsigned __int8 *)(v0 + 64);
  _StringGuts.grow(_:)(20LL);
  sub_1000594F8(v2, v3, v4, v5, v6, v7, v8, v9, v19, v20, 0LL, 0xE000000000000000LL);
  uint64_t v10 = 0x54414944454D4D49LL;
  if (v1 != 1) {
    uint64_t v10 = 0x564953554C435845LL;
  }
  if (v1) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0x4445525245464544LL;
  }
  if (v1) {
    unint64_t v12 = 0xE900000000000045LL;
  }
  else {
    unint64_t v12 = 0xE800000000000000LL;
  }
  uint64_t v13 = *(void *)(v0 + 40);
  unint64_t v14 = v12;
  String.append(_:)(*(Swift::String *)&v11);
  sub_10001198C();
  v15._uint64_t countAndFlagsBits = 0x4341534E41525420LL;
  v15._object = (void *)0xEC0000004E4F4954LL;
  String.append(_:)(v15);
  v22._uint64_t countAndFlagsBits = 0x204E49474542LL;
  v22._object = (void *)0xE600000000000000LL;
  sub_100059614(v22);
  if (v13)
  {
    sub_10001198C();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v17 = *(int **)(v0 + 24);
    sub_10001198C();
    __int128 v21 = (uint64_t (*)(uint64_t))((char *)v17 + *v17);
    unint64_t v18 = (void *)swift_task_alloc(v17[1]);
    *(void *)(v0 + 48) = v18;
    *unint64_t v18 = v0;
    v18[1] = sub_100054EA4;
    return v21(v0 + 16);
  }

uint64_t sub_100054EA4()
{
  uint64_t v3 = *(void *)(v2 + 48);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 5sub_10000AC58(v0 + 6) = v0;
  swift_task_dealloc(v3);
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_100054EF4()
{
  v1._uint64_t countAndFlagsBits = 0xD000000000000012LL;
  Connection.execute(_:)(v1);
  uint64_t v3 = *(void *)(v0 + 16);
  if (!v2) {
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
  }
  swift_errorRelease(v3);
  sub_100059698();
  sub_100059614(v5);
  swift_errorRelease(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100054FC0()
{
  uint64_t v2 = *(void *)(v1 + 56);
  sub_100059698();
  v5._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  sub_100059614(v5);
  if (v0) {
    swift_errorRelease(v2);
  }
  else {
    swift_willThrow(v3);
  }
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100055030( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, unint64_t a15, unint64_t a16, uint64_t a17, int64_t a18, int64_t a19, int64_t a20)
{
  if (v37)
  {
    uint64_t v25 = sub_10005920C();
    sub_100058EF8( (unint64_t *)&qword_100131958,  (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_100038AC8(v25, v26);
    uint64_t v28 = v27;
    swift_errorRetain();
    uint64_t v29 = sub_1000C3314(v37, v28);
    swift_willThrow(v29);
    swift_errorRelease();
  }

  sub_10001DEC4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000551A8( char *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, char a9, int64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, unint64_t a19, uint64_t a20, int64_t a21, int64_t a22, int64_t a23)
{
  uint64_t v59 = a8;
  uint64_t v60 = a7;
  unint64_t v61 = a6;
  uint64_t v66 = a4;
  uint64_t v28 = (int *)type metadata accessor for LNBundleRecord(0LL);
  __chkstk_darwin(v28);
  os_log_type_t v30 = (uint64_t *)((char *)&v58 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v31 = *(void *)&a1[OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection];
  swift_retain_n(v31, 8LL);
  uint64_t v32 = sub_100008DB0((uint64_t *)&unk_100132130);
  uint64_t v33 = swift_allocObject(v32, 48LL, 7LL);
  *(_OWORD *)(v33 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
  *(void *)(v33 + 32) = a2;
  *(void *)(v33 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = a3;
  swift_retain_n(v31, 6LL);
  swift_bridgeObjectRetain();
  sub_100055800();
  if (v23)
  {
    swift_release_n(v31, 14LL);
    return swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  sub_100058CD4(v66, (uint64_t)v30 + v28[5]);
  *os_log_type_t v30 = a2;
  v30[1] = (uint64_t)a3;
  unint64_t v35 = (uint64_t *)((char *)v30 + v28[6]);
  uint64_t v36 = v60;
  unint64_t v37 = v61;
  *unint64_t v35 = a5;
  v35[1] = v37;
  *(uint64_t *)((char *)v30 + v28[7]) = 0LL;
  *(uint64_t *)((char *)v30 + v28[8]) = v36;
  swift_bridgeObjectRetain();
  sub_10000A280(a5, v37);
  sub_1000BD818();
  uint64_t v38 = a3;
  sub_100058D54((uint64_t)v30, type metadata accessor for LNBundleRecord);
  __chkstk_darwin(v39);
  *(&v58 - sub_10000AC58(v0 + 4) = v31;
  *(&v58 - 3) = a2;
  uint64_t v40 = v66;
  *(&v58 - 2) = (uint64_t)a3;
  *(&v58 - 1) = v40;
  sub_10004F580(sub_100058D1C, (uint64_t)(&v58 - 6), v59);
  uint64_t v41 = a2;
  if (a9 != 2)
  {
    if ((unint64_t)a10 >> 62)
    {
      if (a10 < 0) {
        uint64_t v50 = a10;
      }
      else {
        uint64_t v50 = a10 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v51 = _CocoaArrayWrapper.endIndex.getter(v50);
      swift_bridgeObjectRelease();
      if (!v51) {
        goto LABEL_11;
      }
    }

    else if (!*(void *)((a10 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      goto LABEL_11;
    }

    *(void *)&__int128 v62 = a2;
    *((void *)&v62 + 1) = v38;
    uint64_t v63 = a11;
    uint64_t v64 = a12;
    uint64_t v65 = a13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000C04FC(&v62);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_10004F688(a10, v31, a2, v38);
    uint64_t v42 = *(void *)(a14 + 16);
    if (v42)
    {
      uint64_t v43 = v38;
      uint64_t v44 = *(void *)(type metadata accessor for LNAppShortcutParameterRecord(0LL) - 8);
      uint64_t v45 = a14 + ((*(unsigned __int8 *)(v44 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80));
      uint64_t v46 = *(void *)(v44 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_10003CA58();
        v45 += v46;
        --v42;
      }

      while (v42);
      swift_bridgeObjectRelease();
      uint64_t v38 = v43;
    }

    swift_retain();
    sub_10004FA0C(a15, v31);
  }

uint64_t sub_100055800()
{
  return swift_release();
}

void sub_10005584C(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for LNActionRecord(0LL);
  __chkstk_darwin(v12);
  unint64_t v14 = (void *)((char *)v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Swift::String v15 = *a1;
  sub_100058CD4(a5, (uint64_t)v11);
  swift_bridgeObjectRetain();
  sub_100034A90(a3, a4, (uint64_t)v11, v15, v14);
  sub_100037560(v14);
  sub_100058D54((uint64_t)v14, type metadata accessor for LNActionRecord);
}

uint64_t sub_10005596C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v10 = objc_msgSend(a1, "identifier", swift_bridgeObjectRetain().n128_f64[0]);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v13 = v12;

  *(void *)&__int128 v15 = a5;
  *((void *)&v15 + 1) = a6;
  uint64_t v16 = v11;
  uint64_t v17 = v13;
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  swift_bridgeObjectRetain();
  sub_1000688A0(&v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_100055A40(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a3;
  __int128 v15 = a5;
  sub_1000C4DC8(v14, a4);
  if (v5)
  {
    uint64_t v57 = v5;
    swift_errorRetain(v5);
    uint64_t v16 = sub_100008DB0(&qword_100130620);
    if ((swift_dynamicCast(v54, &v57, v16, &type metadata for Result, 0LL) & 1) != 0)
    {
      uint64_t v49 = v10;
      uint64_t v50 = a4;
      uint64_t v51 = a5;
      swift_errorRelease(v5);
      uint64_t v17 = v54[0];
      uint64_t v18 = v54[1];
      int v19 = v55;
      uint64_t v20 = v56;
      if (v55 == 19)
      {
        uint64_t v47 = v54[0];
        uint64_t v48 = v56;
        uint64_t v21 = qword_1001301E0;
        id v22 = a1;
        if (v21 != -1) {
          swift_once(&qword_1001301E0, sub_100051A54);
        }
        uint64_t v23 = v49;
        uint64_t v24 = sub_100008D98(v49, (uint64_t)qword_1001353A8);
        uint64_t v25 = v11;
        (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v24, v23);

        uint64_t v26 = v48;
        swift_retain_n(v48, 2LL);
        uint64_t v27 = v18;
        uint64_t v28 = swift_bridgeObjectRetain_n(v18, 2LL);
        uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
        os_log_type_t v30 = static os_log_type_t.debug.getter();
        int v31 = v30;
        if (os_log_type_enabled(v29, v30))
        {
          uint64_t v32 = swift_slowAlloc(22LL, -1LL);
          os_log_t v45 = v29;
          uint64_t v33 = v26;
          uint64_t v34 = v32;
          uint64_t v46 = swift_slowAlloc(64LL, -1LL);
          uint64_t v53 = v46;
          *(_DWORD *)uint64_t v34 = 136315394;
          uint64_t v43 = v34 + 4;
          uint64_t v52 = sub_10000DE60(0xD00000000000002ELL, 0x80000001000FA3E0LL, &v53);
          int v44 = v31;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v43, v34 + 12);
          *(_WORD *)(v34 + 12) = 2080;
          uint64_t v43 = v34 + 14;
          uint64_t v35 = Result.description.getter(v47, v27, 19LL, v33);
          uint64_t v47 = v25;
          uint64_t v52 = sub_10000DE60(v35, v36, &v53);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v43, v34 + 22);
          swift_release_n(v33, 2LL);
          swift_bridgeObjectRelease_n(v27, 2LL);
          swift_bridgeObjectRelease();
          os_log_t v37 = v45;
          _os_log_impl( (void *)&_mh_execute_header,  v45,  (os_log_type_t)v44,  "%s ignoring error: %s",  (uint8_t *)v34,  0x16u);
          uint64_t v38 = v46;
          swift_arrayDestroy(v46, 2LL);
          swift_slowDealloc(v38, -1LL, -1LL);
          swift_slowDealloc(v34, -1LL, -1LL);

          swift_release();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v47 + 8))(v13, v23);
        }

        else
        {

          swift_release_n(v26, 3LL);
          swift_bridgeObjectRelease_n(v27, 3LL);
          (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v23);
        }

        swift_errorRelease(v57);
        swift_release();
        __int128 v15 = v51;
        goto LABEL_13;
      }

      unint64_t v39 = sub_100037E20();
      uint64_t v40 = swift_allocError(&type metadata for Result, v39, 0LL, 0LL);
      *(void *)uint64_t v41 = v17;
      *(void *)(v41 + 8) = v18;
      *(_DWORD *)(v41 + 1sub_10000AC58(v0 + 6) = v19;
      *(void *)(v41 + 2sub_10000AC58(v0 + 4) = v20;
      swift_willThrow(v40);
      __int128 v15 = v51;
    }

    swift_errorRelease(v57);
    swift_bridgeObjectRelease();
    swift_release();

    return;
  }

  swift_release();
LABEL_13:

  swift_bridgeObjectRelease();
}

uint64_t sub_100055E28()
{
  uint64_t v7 = v0;
  uint64_t v8 = v4;
  uint64_t v9 = v3;
  uint64_t v10 = v2;
  uint64_t v11 = v1;
  uint64_t ObjectType = swift_getObjectType(v0);
  return Connection.transaction(_:block:)(0, (void (*)(uint64_t))sub_100058ED8, (uint64_t)&v6);
}

void sub_100055EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for Logger(0LL);
  __chkstk_darwin(v9);
  sub_100056194();
  if (!v5) {
    sub_100056208(a1, a4, a5);
  }
}

void sub_100056194()
{
  uint64_t v1 = sub_100059608();
  sub_100056374(v1, v2, v3);
  if (v0)
  {
    uint64_t v4 = sub_10005920C();
    sub_100058EF8( (unint64_t *)&qword_100131958,  (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_100038AC8(v4, v5);
    sub_1000591C4();
    sub_100059200();
    sub_1000592C0();
    sub_10004BDA4();
  }

  sub_10005931C();
}

void *sub_100056208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection);
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    uint64_t v8 = *(void *)(type metadata accessor for LNAppShortcutParameterRecord(0LL) - 8);
    uint64_t v9 = a2 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    swift_retain();
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_10003CA58();
      if (v3) {
        break;
      }
      v9 += v10;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease();
    return (void *)swift_release();
  }

  swift_retain();
LABEL_7:
  uint64_t v11 = *(void *)(a3 + 16);
  if (!v11) {
    return (void *)swift_release();
  }
  swift_retain();
  swift_bridgeObjectRetain();
  for (uint64_t i = 32LL; ; i += 104LL)
  {
    memcpy(__dst, (const void *)(a3 + i), sizeof(__dst));
    sub_100009F4C(__dst);
    sub_10006CFAC((__int128 *)__dst, v5);
    if (v3) {
      break;
    }
    sub_100009FD0(__dst);
    if (!--v11)
    {
      swift_release_n(v5, 2LL);
      return (void *)swift_bridgeObjectRelease();
    }
  }

  swift_release_n(v5, 2LL);
  swift_bridgeObjectRelease();
  return sub_100009FD0(__dst);
}

uint64_t sub_100056374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection);
  swift_retain();
  sub_10003D090();
  uint64_t result = swift_release();
  if (!v3)
  {
    swift_retain();
    sub_10001D810();
    swift_release();
    uint64_t v8 = qword_100130240;
    swift_retain();
    if (v8 != -1) {
      swift_once(&qword_100130240, sub_10006D720);
    }
    memcpy(__dst, &unk_100132A58, sizeof(__dst));
    sub_10001D9AC(__dst);
    if (qword_100130250 != -1) {
      swift_once(&qword_100130250, sub_10006D828);
    }
    __src[0] = a2;
    __src[1] = a3;
    == infix<A>(_:_:)();
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    memcpy(v19, __dst, sizeof(v19));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    QueryType.filter(_:)( v10,  v12,  v14,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  (uint64_t)__src);
    swift_bridgeObjectRelease_n(v14, 2LL);
    swift_bridgeObjectRelease_n(v12, 2LL);
    sub_10001DAF0(__dst);
    memcpy(v22, __src, 0xA8uLL);
    memcpy(v19, __src, sizeof(v19));
    AppIntents_SQLite::Delete v23 = QueryType.delete()();
    uint64_t countAndFlagsBits = v23.template._countAndFlagsBits;
    object = v23.template._object;
    rawValue = v23.bindings._rawValue;
    sub_10001DAF0(v22);
    v24.template._uint64_t countAndFlagsBits = countAndFlagsBits;
    v24.template._object = object;
    v24.bindings._rawValue = rawValue;
    Connection.run(_:)(v24);
    if (v18)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_retain();
      sub_1000476BC(a2, a3);
      return swift_release_n(v6, 2LL);
    }
  }

  return result;
}

uint64_t sub_10005660C(uint64_t a1)
{
  uint64_t v2 = sub_100008DB0((uint64_t *)&unk_100132130);
  uint64_t inited = swift_initStackObject(v2, v6);
  *(_OWORD *)(inited + 1sub_10000AC58(v0 + 6) = xmmword_1000F65C0;
  *(void *)(inited + 32) = 0x736E6F69746361LL;
  *(void *)(inited + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = 0xE700000000000000LL;
  *(void *)(inited + 48) = 0xD000000000000012LL;
  *(void *)(inited + 5sub_10000AC58(v0 + 6) = 0x80000001000F97B0LL;
  *(void *)(inited + 6sub_10000AC58(v0 + 4) = 0x6E61747369737361LL;
  *(void *)(inited + 72) = 0xEF746E65746E4974LL;
  *(void *)(inited + 8sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = 0xD00000000000001ELL;
  *(void *)(inited + 88) = 0x80000001000FA300LL;
  *(void *)(inited + 9sub_10000AC58(v0 + 6) = 0x73656C646E7562LL;
  *(void *)(inited + 10sub_10000AC58(v0 + 4) = 0xE700000000000000LL;
  *(void *)(inited + 112) = 0x6769666E6F63LL;
  *(void *)(inited + 12sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = 0xE600000000000000LL;
  *(void *)(inited + 128) = 0xD00000000000001ELL;
  *(void *)(inited + 13sub_10000AC58(v0 + 6) = 0x80000001000FA320LL;
  *(void *)(inited + 14sub_10000AC58(v0 + 4) = 0x7365697469746E65LL;
  *(void *)(inited + 152) = 0xE800000000000000LL;
  strcpy((char *)(inited + 160), "examplePhrases");
  *(_BYTE *)(inited + 175) = -18;
  *(void *)(inited + 17sub_10000AC58(v0 + 6) = 0x73656972657571LL;
  *(void *)(inited + 18sub_10000AC58(v0 + 4) = 0xE700000000000000LL;
  *(void *)(inited + 192) = 0x736D756E65LL;
  *(void *)(inited + 20sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = 0xE500000000000000LL;
  *(void *)(inited + 208) = 0xD000000000000019LL;
  *(void *)(inited + 21sub_10000AC58(v0 + 6) = 0x80000001000FA340LL;
  strcpy((char *)(inited + 224), "appShortcuts");
  *(_BYTE *)(inited + 23sub_10000AC58(v0 + 7) = 0;
  *(_WORD *)(inited + 238) = -5120;
  *(void *)(inited + 24sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = 0xD000000000000015LL;
  *(void *)(inited + 248) = 0x80000001000F9EC0LL;
  *(void *)(inited + 25sub_10000AC58(v0 + 6) = 0xD000000000000010LL;
  *(void *)(inited + 26sub_10000AC58(v0 + 4) = 0x80000001000F9700LL;
  *(void *)(inited + 272) = 0xD000000000000010LL;
  *(void *)(inited + 28sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = 0x80000001000FA360LL;
  *(void *)(inited + 288) = 0x746E6176656C6572LL;
  *(void *)(inited + 29sub_10000AC58(v0 + 6) = 0xEF73746E65746E49LL;
  *(void *)(inited + 30sub_10000AC58(v0 + 4) = 0xD000000000000010LL;
  *(void *)(inited + 312) = 0x80000001000FA380LL;
  *(void *)(inited + 32sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = 0xD000000000000017LL;
  *(void *)(inited + 328) = 0x80000001000FA000LL;
  _OWORD v5[2] = inited;
  v5[3] = a1;
  Connection.transaction(_:block:)(0, (void (*)(uint64_t))sub_100058910, (uint64_t)v5);
  swift_setDeallocating(inited);
  return sub_1000588E8();
}

void sub_100056878(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = v4;
    uint64_t v5 = (uint64_t *)(v4 + 40);
    while (1)
    {
      uint64_t v6 = *(v5 - 1);
      uint64_t v7 = *v5;
      swift_bridgeObjectRetain();
      Table.init(_:database:)(__src, v6, v7, 0LL, 0LL);
      memcpy(__dst, __src, sizeof(__dst));
      Swift::String v8 = SchemaType.drop(ifExists:)(1);
      sub_10001DAF0(__src);
      Connection.run(_:_:)(v8._countAndFlagsBits, (uint64_t)v8._object, (uint64_t)_swiftEmptyArrayStorage);
      if (v2) {
        break;
      }
      uint64_t v10 = v9;
      v5 += 2;
      swift_bridgeObjectRelease(v8._object);
      swift_release(v10);
      if (!--v3)
      {
        swift_bridgeObjectRelease(v16);
        goto LABEL_6;
      }
    }

    swift_bridgeObjectRelease(v8._object);
    swift_bridgeObjectRelease(v16);
  }

  else
  {
LABEL_6:
    if (qword_1001303E0 != -1) {
      swift_once(&qword_1001303E0, sub_1000C0CE0);
    }
    Connection.execute(_:)((Swift::String)xmmword_100135C68);
    if (v11)
    {
      unint64_t v12 = sub_100058928();
      swift_allocError(&type metadata for MetadataStore.CreationError, v12, 0LL, 0LL);
      *(void *)uint64_t v13 = v11;
      *(_BYTE *)(v13 + 8) = 1;
      swift_willThrow();
    }
  }

void sub_100056A24(uint64_t a1)
{
}

uint64_t sub_100056A44()
{
  uint64_t v3 = sub_100008DB0((uint64_t *)&unk_100132130);
  uint64_t v4 = swift_allocObject(v3, 48LL, 7LL);
  *(_OWORD *)(v4 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
  *(void *)(v4 + 32) = v2;
  *(void *)(v4 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v1;
  sub_10001C064();
  sub_100056B10(v4);
  if (!v0) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = sub_10005920C();
  sub_100058EF8( (unint64_t *)&qword_100131958,  (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
  sub_100038AC8(v5, v6);
  sub_1000591C4();
  sub_100059200();
  sub_1000592C0();
  return sub_10004BDA4();
}

uint64_t sub_100056B10(uint64_t a1)
{
  v5[3] = a1;
  uint64_t result = Connection.transaction(_:block:)(0, (void (*)(uint64_t))sub_100058964, (uint64_t)v5);
  if (v1)
  {
    uint64_t v3 = sub_10005920C();
    sub_100058EF8( (unint64_t *)&qword_100131958,  (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_100038AC8(v3, v4);
    sub_1000591C4();
    sub_100059200();
    sub_1000592C0();
    return sub_10004BDA4();
  }

  return result;
}

void sub_100056BB0()
{
}

uint64_t sub_100056C38()
{
  return type metadata accessor for MetadataStore(0LL);
}

uint64_t type metadata accessor for MetadataStore(uint64_t a1)
{
  uint64_t result = qword_100132330;
  if (!qword_100132330) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MetadataStore);
  }
  return result;
}

void sub_100056C78(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_100038798(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    void v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
  }

double sub_100056D00()
{
  id v0 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  sub_100059698();
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = sub_1000595FC((uint64_t)v1, "objectForKey:");

  if (v2)
  {
    sub_1000596BC(v3, v4);
    uint64_t v3 = swift_unknownObjectRelease(v2);
  }

  else
  {
    __int128 v21 = 0u;
    __int128 v22 = 0u;
  }

  sub_1000596B0(v3, v4, &qword_100130EA0, v5, v6);
  if (!v24[2])
  {
    sub_100026E14((uint64_t)&v23, &qword_100130EA0);
    return 300.0;
  }

  if ((sub_1000596A4( (uint64_t)&v20,  v7,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Int,  v8,  v9,  v10,  v11,  v19,  v20) & 1) == 0) {
    return 300.0;
  }
  uint64_t v12 = v20;
  if (qword_1001301E0 != -1) {
    swift_once(&qword_1001301E0, sub_100051A54);
  }
  uint64_t v13 = sub_10000E918();
  uint64_t v14 = sub_100008D98(v13, (uint64_t)qword_1001353A8);
  __int128 v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)sub_10000AE10(12LL);
    *(_DWORD *)uint64_t v17 = 134217984;
    uint64_t v23 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v17 + 4, v17 + 12);
    sub_10000AF5C((void *)&_mh_execute_header, v15, v16, "Using user defined audit delay %lds", v17);
    sub_10000AD78((uint64_t)v17);
  }

  return (double)v12;
}

void sub_100056EC4()
{
}

uint64_t sub_100056F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100057CB8( a1,  a2,  a3,  a4,  (uint64_t (*)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))sub_10007A7AC);
}

uint64_t sub_1000573AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100057CB8( a1,  a2,  a3,  a4,  (uint64_t (*)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))sub_10007BEE4);
}

void sub_1000573C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5 = v4;
  sub_10007A324();
  sub_100059474();
}

void sub_100057578()
{
}

void sub_1000576C4()
{
}

void sub_100057798()
{
}

void sub_100057880()
{
}

void sub_1000578C0()
{
}

uint64_t sub_100057A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100057CB8( a1,  a2,  a3,  a4,  (uint64_t (*)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))sub_10007CBF0);
}

void sub_100057A40()
{
}

Class sub_100057A9C( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, void *a7)
{
  uint64_t v11 = v10;
  id v12 = a1;
  sub_100057FCC();
  swift_bridgeObjectRelease(v11);

  sub_10000A1A0(0LL, a6, a7);
  sub_100059608();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_10000ADB0();
  return isa;
}

uint64_t sub_100057B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100057CB8( a1,  a2,  a3,  a4,  (uint64_t (*)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))sub_10007CC90);
}

void sub_100057B98()
{
}

id sub_100057BD8(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t *a5)
{
  id v7 = a1;
  a4();

  sub_100008DB0(a5);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  sub_10000ADB0();
  return sub_10005936C(isa);
}

uint64_t sub_100057C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100057CB8( a1,  a2,  a3,  a4,  (uint64_t (*)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))sub_10007D2E0);
}

uint64_t sub_100057CB8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))
{
  id v10 = sub_10005933C(OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  sub_10001BCF8();
  sub_10001C064();
  return a5(v10, v10, a1, a2, a3, a4);
}

void sub_100057D30()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  swift_bridgeObjectRetain();
  id v2 = v1;
  sub_100059560((uint64_t)v2, (uint64_t)v2);
  sub_100059474();
}

id sub_100057D80(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    uint64_t v5 = v4;
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  id v6 = a1;
  sub_100057D30();

  swift_bridgeObjectRelease(v5);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_10000ADB0();
  return sub_10005936C(isa);
}

void sub_100057E48(uint64_t a1, uint64_t a2, void *a3)
{
}

uint64_t sub_100057ED0(uint64_t a1, uint64_t a2)
{
  return _LNMetadataProviderDirect.appShortcutsProviderMangledTypeName(forBundleIdentifier:)(*(Swift::String *)&a1)._countAndFlagsBits;
}

void sub_100057FCC()
{
  id v0 = sub_10005933C(OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  sub_10001C064();
  sub_100059560((uint64_t)v0, (uint64_t)v0);
  sub_100059474();
}

uint64_t sub_10005802C(uint64_t a1, uint64_t a2)
{
  if (!v2) {
    return v6;
  }
  uint64_t v3 = sub_10005920C();
  sub_100058EF8( (unint64_t *)&qword_100131958,  (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
  sub_100038AC8(v3, v4);
  sub_1000591C4();
  sub_100059200();
  sub_1000592C0();
  return sub_10004BDA4();
}

uint64_t sub_1000580B8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v7 = sub_1000C1D10(a1, a2);
  uint64_t result = swift_release();
  if (!v3)
  {
    uint64_t v9 = *(void *)(v7 + 16);
    if (v9)
    {
      int v31 = a3;
      swift_bridgeObjectRetain();
      id v10 = _swiftEmptyDictionarySingleton;
      uint64_t v11 = 32LL;
      uint64_t v32 = v7;
      while (1)
      {
        uint64_t v33 = v9;
        __int128 v13 = *(_OWORD *)(v7 + v11 + 16);
        __int128 v12 = *(_OWORD *)(v7 + v11 + 32);
        __int128 v14 = *(_OWORD *)(v7 + v11);
        uint64_t v35 = *(void *)(v7 + v11 + 48);
        v34[1] = v13;
        v34[2] = v12;
        v34[0] = v14;
        __int128 v15 = v13;
        sub_100058E00((uint64_t)v34);
        swift_bridgeObjectRetain();
        id v16 = sub_100041E5C();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
        unint64_t v36 = v10;
        uint64_t v18 = sub_100015F98(v15, *((uint64_t *)&v15 + 1));
        uint64_t v20 = v10[2];
        BOOL v21 = (v19 & 1) == 0;
        Swift::Int v22 = v20 + v21;
        if (__OFADD__(v20, v21)) {
          break;
        }
        unint64_t v23 = v18;
        char v24 = v19;
        sub_100008DB0((uint64_t *)&unk_100132430);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v22))
        {
          uint64_t v25 = sub_100015F98(v15, *((uint64_t *)&v15 + 1));
          if ((v24 & 1) != (v26 & 1)) {
            goto LABEL_19;
          }
          unint64_t v23 = v25;
        }

        id v10 = v36;
        if ((v24 & 1) != 0)
        {
          uint64_t v27 = v36[7];

          *(void *)(v27 + 8 * v23) = v16;
        }

        else
        {
          v36[(v23 >> 6) + 8] |= 1LL << v23;
          *(_OWORD *)(v10[6] + 16 * v23) = v15;
          *(void *)(v10[7] + 8 * v23) = v16;
          uint64_t v28 = v10[2];
          BOOL v29 = __OFADD__(v28, 1LL);
          uint64_t v30 = v28 + 1;
          if (v29) {
            goto LABEL_18;
          }
          __int128 v10[2] = v30;
          swift_bridgeObjectRetain();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100058DB4((uint64_t)v34);
        v11 += 56LL;
        uint64_t v7 = v32;
        --v9;
        if (v33 == 1)
        {
          uint64_t result = swift_bridgeObjectRelease_n(v32, 2LL);
          a3 = v31;
          goto LABEL_15;
        }
      }

      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t result = swift_bridgeObjectRelease();
      id v10 = _swiftEmptyDictionarySingleton;
LABEL_15:
      *a3 = v10;
    }
  }

  return result;
}

void sub_1000582F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (v5)
  {
    uint64_t v6 = sub_10005920C();
    sub_100058EF8( (unint64_t *)&qword_100131958,  (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_100038AC8(v6, v7);
    sub_1000591C4();
    sub_100059200();
    sub_1000592C0();
    sub_10004BDA4();
  }

  sub_10005931C();
}

void sub_100058364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100041CC4(a5, a1, a2, a3, a4, v12);
  if (!v6)
  {
    swift_retain();
    sub_1000C1F74((uint64_t)v12);
    swift_release();
    sub_100058DB4((uint64_t)v12);
  }

void *sub_100058428(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(v2 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection);
  sub_100047360();
  sub_1000874AC((uint64_t)v20);
  if (a2)
  {
    uint64_t v8 = v21;
    uint64_t v15 = v22;
    sub_100008D74(v20, v21);
    if (qword_1001302A0 != -1) {
      swift_once(&qword_1001302A0, sub_100087270);
    }
    unint64_t v23 = v3;
    sub_10001DEBC(v19, &unk_100135648);
    sub_10001D9AC(v19);
    if (qword_1001302A8 != -1) {
      swift_once(&qword_1001302A8, sub_1000872C8);
    }
    uint64_t v10 = qword_1001356F0;
    uint64_t v9 = *(void *)algn_1001356F8;
    uint64_t v11 = qword_100135700;
    sub_10001DEBC(&v16, v19);
    QueryType.namespace<A>(_:)(v10, v9, v11, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
    sub_10001DAF0(v19);
    *(void *)&__int128 v16 = a1;
    *((void *)&v16 + 1) = a2;
    == infix<A>(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v17 = v8;
    uint64_t v18 = v15;
    sub_10001AFA8(&v16);
    QueryType.filter(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000AC58(v20);
    sub_100009EEC(&v16, (uint64_t)v20);
    uint64_t v4 = v23;
  }

  Connection.prepare(_:)(v20);
  if (v4)
  {
    sub_100059380(v20);
  }

  else
  {
    sub_100047238();
    uint64_t v12 = sub_10005935C();
    uint64_t v4 = sub_10004EF78(v12, v13);
    sub_10003EF28();
    sub_10000AC58(v20);
    swift_release_n(v7, 2LL);
  }

  return v4;
}

uint64_t sub_100058670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100059528();
  sub_1000869E8(v7, v8);
  if (v3) {
    return sub_100038920();
  }
  uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  sub_1000280C8();
  for (; v10; uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v15))
  {
    unint64_t v17 = a1 & 0xC000000000000001LL;
    uint64_t v11 = 4LL;
    while (1)
    {
      id v12 = v17 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, a1) : *(id *)(a1 + 8 * v11);
      uint64_t v13 = v11 - 3;
      if (__OFADD__(v11 - 4, 1LL)) {
        break;
      }
      id v14 = v12;
      sub_10001C064();
      sub_100086BA0(v14, a2, a3, v16);
      sub_100086D7C(v16);
      sub_100058E60(v16);

      ++v11;
      if (v13 == v10) {
        goto LABEL_11;
      }
    }

    __break(1u);
LABEL_13:
    if (a1 < 0) {
      uint64_t v15 = a1;
    }
    else {
      uint64_t v15 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1000280C8();
  }

uint64_t sub_1000587E0()
{
  uint64_t v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }

  uint64_t v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    uint64_t v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }

  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184LL, 7LL);
}

uint64_t sub_100058868()
{
  return sub_1000588A8((uint64_t *)&unk_1001323B0);
}

uint64_t sub_100058874()
{
  uint64_t v1 = sub_100059518();
  return swift_deallocClassInstance(v1, v2, v3);
}

uint64_t sub_10005889C()
{
  return sub_1000588A8(&qword_100131978);
}

uint64_t sub_1000588A8(uint64_t *a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  sub_100008DB0(a1);
  swift_arrayDestroy(v1 + 32, v2);
  uint64_t v3 = sub_100059518();
  return swift_deallocClassInstance(v3, v4, v5);
}

uint64_t sub_1000588E8()
{
  uint64_t v1 = sub_100059518();
  return swift_deallocClassInstance(v1, v2, v3);
}

void sub_100058910()
{
}

unint64_t sub_100058928()
{
  unint64_t result = qword_1001323A8;
  if (!qword_1001323A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F665C, &type metadata for MetadataStore.CreationError);
    atomic_store(result, (unint64_t *)&qword_1001323A8);
  }

  return result;
}

uint64_t sub_100058964()
{
  return sub_100055800();
}

uint64_t sub_100058988(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  char v8 = *(_BYTE *)(v1 + 48);
  uint64_t v9 = (void *)swift_task_alloc(dword_1001323F4);
  *(void *)(v2 + 1sub_10000AC58(v0 + 6) = v9;
  void *v9 = v2;
  v9[1] = sub_100058A08;
  return sub_10005397C(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100058A08()
{
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(v1 + 16));
  return sub_10000C914(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_100058A40(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v27[3] = type metadata accessor for LSLinkBundleRecord(0LL);
  v27[4] = &off_100126180;
  char v8 = sub_10001AFA8(v27);
  sub_100058C9C(a2, (uint64_t)v8, type metadata accessor for LSLinkBundleRecord);
  uint64_t v9 = qword_1001301E0;
  id v10 = a1;
  if (v9 != -1) {
    swift_once(&qword_1001301E0, sub_100051A54);
  }
  uint64_t v11 = sub_100008D98(v4, (uint64_t)qword_1001353A8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v11, v4);

  uint64_t v12 = sub_100008F24((uint64_t)v27, (uint64_t)v26);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    uint64_t v23 = v5;
    uint64_t v17 = v16;
    uint64_t v25 = v16;
    *(_DWORD *)uint64_t v15 = 136315138;
    uint64_t v18 = sub_100008D74(v26, v26[3]);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    swift_bridgeObjectRetain();
    uint64_t v24 = sub_10000DE60(v19, v20, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease();
    sub_10000AC58(v26);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "✓ Completed indexing transaction for %s", v15, 0xCu);
    swift_arrayDestroy(v17, 1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v4);
  }

  else
  {
    sub_10000AC58(v26);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  return sub_10000AC58(v27);
}

void sub_100058C9C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3(0LL);
  sub_10002807C(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  sub_10000ADA8();
}

uint64_t sub_100058CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008DB0(&qword_100130BC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_100058D1C(void **a1)
{
}

uint64_t sub_100058D38(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10005596C(a1, a2, a3, v3[2], v3[3], v3[4]);
}

void sub_100058D54(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0LL);
  sub_100027ECC(v2);
  sub_10000ADA8();
}

void sub_100058D7C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_100008DB0(a3);
  sub_10002807C(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_10000ADA8();
}

uint64_t sub_100058DB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000A21C(v2, v3);
  return a1;
}

uint64_t sub_100058E00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100058E4C(v2, v3);
  return a1;
}

uint64_t sub_100058E4C(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10000A280(result, a2);
  }
  return result;
}

void *sub_100058E60(void *a1)
{
  uint64_t v2 = a1[4];
  unint64_t v3 = a1[5];
  uint64_t v4 = a1[8];
  unint64_t v5 = a1[9];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000A1D8(v2, v3);
  swift_bridgeObjectRelease();
  sub_10000A1D8(v4, v5);
  return a1;
}

void sub_100058ED8()
{
}

void sub_100058EF8(unint64_t *a1, void (*a2)(uint64_t))
{
  if (!*a1)
  {
    a2(255LL);
    uint64_t v3 = sub_100059608();
    atomic_store(swift_getWitnessTable(v3, v4), a1);
  }

  sub_10000ADA8();
}

uint64_t sub_100058F30(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_100058F44()
{
  uint64_t v1 = sub_10000E918();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100058FA0(uint64_t a1, unint64_t a2)
{
}

uint64_t sub_100058FE8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MetadataStore.CreationError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unsigned __int8 v4 = *(_BYTE *)(a2 + 8);
  sub_100059040(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_100059040(uint64_t result, unsigned __int8 a2)
{
  if (a2 <= 1u) {
    return swift_errorRetain(result);
  }
  return result;
}

uint64_t destroy for MetadataStore.CreationError(uint64_t a1)
{
  return sub_100059064(*(void *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_100059064(uint64_t result, unsigned __int8 a2)
{
  if (a2 <= 1u) {
    return swift_errorRelease(result);
  }
  return result;
}

uint64_t assignWithCopy for MetadataStore.CreationError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unsigned __int8 v4 = *(_BYTE *)(a2 + 8);
  sub_100059040(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  unsigned __int8 v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_100059064(v5, v6);
  return a1;
}

uint64_t initializeWithTake for MetadataStore.CreationError(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for MetadataStore.CreationError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_100059064(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetadataStore.CreationError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MetadataStore.CreationError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10005919C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1000591A4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MetadataStore.CreationError()
{
  return &type metadata for MetadataStore.CreationError;
}

uint64_t sub_1000591C4()
{
  return swift_errorRetain(v0);
}

uint64_t sub_1000591D4()
{
  uint64_t v1 = *(void **)(v0 + 216);
  int v2 = sub_100008D74(*(void **)(v0 + 224), *(void *)(*(void *)(v0 + 224) + 24LL));
  return sub_100058A40(v1, (uint64_t)v2);
}

uint64_t sub_100059200()
{
  return sub_1000C3314(v0, v1);
}

uint64_t sub_10005920C()
{
  return type metadata accessor for Schema.RuntimeError(0LL);
}

void *sub_100059214( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return memcpy(&a9, (const void *)(v9 - 248), 0xA8uLL);
}

uint64_t sub_100059230(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100059248( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30)
{
  return QueryType.filter(_:)(v30, v31, v32, a4, a5, (uint64_t)&a30);
}

uint64_t sub_100059260(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100059274()
{
  uint64_t v1 = *(void **)(v0 + 216);
  int v2 = sub_100008D74(*(void **)(v0 + 224), *(void *)(*(void *)(v0 + 224) + 24LL));
  return sub_100058A40(v1, (uint64_t)v2);
}

uint64_t sub_1000592A0@<X0>(uint64_t a1@<X8>)
{
  return swift_retain(*(void *)(v1 + a1));
}

uint64_t sub_1000592AC()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_1000592C0()
{
  return swift_willThrow();
}

uint64_t sub_1000592C8()
{
  return swift_slowDealloc(v0, -1LL, -1LL);
}

uint64_t sub_1000592D8()
{
  return swift_errorRetain(v0);
}

uint64_t sub_1000592E8()
{
  return swift_errorRetain(v0);
}

uint64_t sub_1000592F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
  return Connection.prepare(_:)(&a30);
}

void sub_100059308(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

  ;
}

  ;
}

id sub_10005933C@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(v1 + a1);
}

uint64_t sub_100059344()
{
  return swift_errorRelease(v0);
}

uint64_t sub_10005934C@<X0>(void *a1@<X8>)
{
  return sub_1000C3314(v1, a1);
}

uint64_t sub_100059354()
{
  return swift_willThrow();
}

uint64_t sub_10005935C()
{
  return v0;
}

id sub_10005936C(id a1)
{
  return a1;
}

uint64_t sub_100059380(void *a1)
{
  return swift_release();
}

uint64_t sub_100059394(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  return sub_10000DE60(a1, a2, (uint64_t *)va);
}

uint64_t sub_1000593A0()
{
  return v0;
}

void sub_1000593C0(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t sub_1000593C8()
{
  return v0;
}

uint64_t sub_1000593D8()
{
  return v0;
}

void sub_1000593E8()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_1000593FC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_100059404@<X0>(uint64_t a1@<X8>)
{
  return *(void *)a1;
}

  ;
}

  ;
}

uint64_t sub_10005942C@<X0>(uint64_t (*a1)(uint64_t)@<X8>)
{
  return a1(v1);
}

uint64_t sub_100059438@<X0>(uint64_t (*a1)(uint64_t)@<X8>)
{
  return a1(v1);
}

uint64_t sub_100059444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_bridgeObjectRetain(a4);
}

  ;
}

uint64_t sub_10005945C(uint64_t a1, uint64_t a2, ...)
{
  return String.init<A>(describing:)(va, a1);
}

uint64_t sub_100059468()
{
  return swift_slowAlloc(2LL, -1LL);
}

  ;
}

uint64_t sub_100059480(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_100008D98(a1, a2);
  return Logger.logObject.getter(v2);
}

uint64_t sub_100059494()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(v0 + 8) + 8LL))(v1);
}

uint64_t sub_1000594A8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

uint64_t sub_1000594B4(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t sub_1000594D0(uint64_t a1, unint64_t a2)
{
  return sub_10000DE60(a1, a2, (uint64_t *)(v2 - 104));
}

uint64_t sub_1000594DC@<X0>(uint64_t a1@<X8>)
{
  return swift_retain(*(void *)(v1 + a1));
}

uint64_t sub_1000594E8()
{
  return swift_release(*(void *)(v0 + 312));
}

uint64_t sub_1000594F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return swift_bridgeObjectRelease(a12);
}

  ;
}

uint64_t sub_100059510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, v3);
}

uint64_t sub_100059518()
{
  return v0;
}

uint64_t sub_100059528()
{
  return v0;
}

BOOL sub_100059538(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_100059548()
{
  == infix<A>(_:_:)();
}

uint64_t sub_100059550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 112, v4 - 108, a3, a4);
}

uint64_t sub_100059560(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v4, v3);
}

void *sub_100059570()
{
  return sub_10001DAF0((void *)(v0 - 248));
}

  ;
}

  ;
}

uint64_t sub_100059598()
{
  return v0;
}

  ;
}

BOOL sub_1000595B0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000595C0()
{
  return swift_release(*(void *)(v0 + 312));
}

uint64_t sub_1000595CC()
{
  return Logger.logObject.getter();
}

uint64_t sub_1000595D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 72, v4, a3, a4);
}

void sub_1000595E0()
{
}

uint64_t sub_1000595EC()
{
  return _convertErrorToNSError(_:)(v0);
}

id sub_1000595F4()
{
  return v0;
}

id sub_1000595FC(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_100059608()
{
  return v0;
}

void sub_100059614(Swift::String a1)
{
}

char *sub_10005961C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51)
{
  return &a51;
}

char *sub_100059628( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51)
{
  return &a51;
}

uint64_t sub_100059634(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t sub_100059648()
{
  return swift_task_dealloc(v0);
}

  ;
}

void sub_10005965C()
{
  *(_WORD *)(v0 + 12) = 1024;
}

uint64_t sub_100059670()
{
  return sub_100008F24(v1, v0);
}

uint64_t sub_10005967C()
{
  return v0;
}

uint64_t sub_100059688(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v2, a2);
}

uint64_t sub_100059690()
{
  return swift_release(v0);
}

  ;
}

uint64_t sub_1000596A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  return swift_dynamicCast(a1, va, a3, a4, 6LL);
}

void sub_1000596B0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_100058D7C((uint64_t)va, (uint64_t)va1, a3);
}

void *sub_1000596BC(uint64_t a1, uint64_t a2, ...)
{
  return _bridgeAnyObjectToAny(_:)((uint64_t *)va, v2);
}

void sub_1000596C8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, ...)
{
}

void *sub_1000596D4()
{
  return memcpy(&unk_1001353D0, __src, 0xA8uLL);
}

uint64_t sub_100059730(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_100135478, 0xD000000000000010LL, 0x80000001000F96E0LL);
}

uint64_t sub_100059754(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_100135490, 0x617461646174656DLL, 0xE800000000000000LL);
}

ValueMetadata *type metadata accessor for LNAssistantIntentRecord()
{
  return &type metadata for LNAssistantIntentRecord;
}

uint64_t sub_100059784(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = sub_10000C7FC();
  v1(v3);
  return sub_100068178(v2);
}

void *sub_1000597A8(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = a1;
  uint64_t v15 = a1;
  uint64_t v8 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  for (; v8; uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v12))
  {
    for (uint64_t i = 4LL; ; ++i)
    {
      id v10 = (a2 & 0xC000000000000001LL) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a2)
          : *(id *)(a2 + 8 * i);
      uint64_t v7 = v10;
      uint64_t v11 = i - 3;
      if (__OFADD__(i - 4, 1LL)) {
        break;
      }
      id v14 = v10;
      sub_10005F990(&v15, &v14, (uint64_t)a3);
      if (v4)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v7;
      }

      if (v11 == v8)
      {

        swift_bridgeObjectRelease();
        return v15;
      }
    }

    __break(1u);
LABEL_13:
    if (a2 < 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
  }

  swift_bridgeObjectRelease();
  return v7;
}

char *sub_1000598E4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v6)
  {
    while (1)
    {
      uint64_t v50 = _swiftEmptyArrayStorage;
      uint64_t result = sub_100045588(0LL, v6 & ~(v6 >> 63), 0);
      if (v6 < 0) {
        break;
      }
      uint64_t v8 = 0LL;
      uint64_t v9 = v50;
      uint64_t v34 = v5;
      unint64_t v35 = v5 & 0xC000000000000001LL;
      uint64_t v33 = v6;
      while (v6 != v8)
      {
        if (v35) {
          id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v5);
        }
        else {
          id v10 = *(id *)(v5 + 8 * v8 + 32);
        }
        uint64_t v11 = v10;
        uint64_t v38 = v10;
        sub_10006467C(&v38, a2, a3, &v39);
        if (v4)
        {
          swift_bridgeObjectRelease();
          swift_release();

          return (char *)v9;
        }

        uint64_t v13 = v39;
        uint64_t v12 = v40;
        uint64_t v14 = v41;
        __int128 v15 = v42;
        uint64_t v17 = v43;
        uint64_t v16 = v44;
        uint64_t v18 = v45;
        uint64_t v19 = v46;
        uint64_t v20 = v47;
        unint64_t v22 = v9[2];
        unint64_t v21 = v9[3];
        __int128 v23 = v48;
        uint64_t v24 = v49;
        uint64_t v50 = v9;
        if (v22 >= v21 >> 1)
        {
          __int128 v32 = v42;
          uint64_t v30 = v45;
          uint64_t v31 = v40;
          uint64_t v28 = v47;
          uint64_t v29 = v46;
          __int128 v27 = v48;
          sub_100045588((char *)(v21 > 1), v22 + 1, 1);
          __int128 v23 = v27;
          uint64_t v20 = v28;
          uint64_t v19 = v29;
          uint64_t v18 = v30;
          uint64_t v12 = v31;
          __int128 v15 = v32;
          uint64_t v9 = v50;
        }

        ++v8;
        v9[2] = v22 + 1;
        uint64_t v25 = &v9[13 * v22];
        v25[4] = v13;
        void v25[5] = v12;
        v25[6] = v14;
        *(_OWORD *)(v25 + sub_10000AC58(v0 + 7) = v15;
        void v25[9] = v17;
        v25[10] = v16;
        v25[11] = v18;
        v25[12] = v19;
        v25[13] = v20;
        *((_OWORD *)v25 + sub_10000AC58(v0 + 7) = v23;
        v25[16] = v24;
        uint64_t v6 = v33;
        uint64_t v5 = v34;
        uint64_t v4 = 0LL;
        if (v33 == v8)
        {
          swift_bridgeObjectRelease();
          return (char *)v9;
        }
      }

      __break(1u);
LABEL_16:
      if (v5 < 0) {
        uint64_t v26 = v5;
      }
      else {
        uint64_t v26 = v5 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v26);
      swift_bridgeObjectRelease();
      if (!v6) {
        goto LABEL_20;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return (char *)_swiftEmptyArrayStorage;
  }

  return result;
}

void *sub_100059AFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    uint64_t v4 = (void **)(a1 + 48);
    do
    {
      uint64_t v5 = *v4;
      v4 += 3;
      id v6 = v5;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v6);
      uint64_t v7 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
      uint64_t v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v6);
      specialized ContiguousArray._endMutation()(v8);
      --v2;
    }

    while (v2);
    return _swiftEmptyArrayStorage;
  }

  return result;
}

void sub_100059BA8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1;
    sub_1000452D4();
    uint64_t v3 = sub_100033454(v2);
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      unint64_t v5 = v3;
      if (v3 < 1LL << *(_BYTE *)(v2 + 32))
      {
        int v6 = v4;
        uint64_t v7 = v2 + 64;
        uint64_t v16 = v2 + 64;
        while ((*(void *)(v7 + 8 * (v5 >> 6)) & (1LL << v5)) != 0)
        {
          if (v6 != *(_DWORD *)(v2 + 36)) {
            goto LABEL_18;
          }
          uint64_t v8 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v5);
          uint64_t v9 = v8[1];
          uint64_t v17 = v1;
          uint64_t v18 = *v8;
          uint64_t v10 = v2;
          unint64_t v12 = _swiftEmptyArrayStorage[2];
          unint64_t v11 = _swiftEmptyArrayStorage[3];
          swift_bridgeObjectRetain();
          if (v12 >= v11 >> 1) {
            sub_1000452D4();
          }
          _swiftEmptyArrayStorage[2] = v12 + 1;
          uint64_t v13 = &_swiftEmptyArrayStorage[2 * v12];
          v13[4] = v18;
          v13[5] = v9;
          uint64_t v14 = -1LL << *(_BYTE *)(v10 + 32);
          uint64_t v7 = v16;
          if ((*(void *)(v16 + 8 * (v5 >> 6)) & (1LL << v5)) == 0) {
            goto LABEL_20;
          }
          uint64_t v2 = v10;
          if (v6 != *(_DWORD *)(v10 + 36)) {
            goto LABEL_21;
          }
          uint64_t v15 = _HashTable.occupiedBucket(after:)(v5, v16, ~v14);
          uint64_t v1 = v17 - 1;
          if (v17 == 1) {
            return;
          }
          unint64_t v5 = v15;
          if ((v15 & 0x8000000000000000LL) == 0)
          {
            int v6 = *(_DWORD *)(v2 + 36);
            if (v15 < 1LL << *(_BYTE *)(v2 + 32)) {
              continue;
            }
          }

          goto LABEL_22;
        }

        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }

void *sub_100059D68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = (void **)(v6 + 48);
    uint64_t v8 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v9 = (uint64_t)*(v7 - 2);
      uint64_t v10 = (uint64_t)*(v7 - 1);
      unint64_t v11 = *v7;
      BOOL v12 = v9 == a2 && v10 == a3;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, a2, a3, 0LL) & 1) != 0)
      {
        id v13 = v11;
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        {
          sub_1000141A4();
          uint64_t v8 = v16;
        }

        unint64_t v14 = v8[2];
        if (v14 >= v8[3] >> 1)
        {
          sub_1000141A4();
          uint64_t v8 = v17;
        }

        void v8[2] = v14 + 1;
        uint64_t v15 = &v8[3 * v14];
        void v15[4] = a2;
        void v15[5] = a3;
        void v15[6] = v13;
      }

      v7 += 3;
      --v4;
    }

    while (v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }

  return v8;
}

void sub_100059EBC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v45 = a4;
  uint64_t v50 = a2;
  uint64_t v6 = &qword_100132688;
  uint64_t v53 = sub_100008DB0(&qword_100132688);
  __chkstk_darwin(v53);
  uint64_t v49 = (_OWORD *)((char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v8);
  uint64_t v10 = (_OWORD *)((char *)&v45 - v9);
  __chkstk_darwin(v11);
  __int128 v48 = (uint64_t *)((char *)&v45 - v12);
  sub_100033164(a1, v55);
  uint64_t v52 = v55[0];
  int64_t v54 = v55[3];
  unint64_t v13 = v55[4];
  uint64_t v46 = v55[1];
  int64_t v47 = (unint64_t)(v55[2] + 64LL) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v51 = a3;
  if (!v13) {
    goto LABEL_3;
  }
LABEL_2:
  uint64_t v56 = (v13 - 1) & v13;
  unint64_t v14 = __clz(__rbit64(v13)) | (v54 << 6);
  while (1)
  {
    uint64_t v19 = *(void *)(v52 + 56);
    uint64_t v20 = (uint64_t *)(*(void *)(v52 + 48) + 16 * v14);
    uint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    uint64_t v23 = sub_100008DB0((uint64_t *)&unk_100132690);
    uint64_t v24 = v19 + *(void *)(*(void *)(v23 - 8) + 72LL) * v14;
    uint64_t v25 = v53;
    uint64_t v26 = v48;
    sub_10006790C(v24, (uint64_t)v48 + *(int *)(v53 + 48), (uint64_t *)&unk_100132690);
    *uint64_t v26 = v21;
    v26[1] = v22;
    __int128 v27 = v6;
    sub_10006746C((uint64_t)v26, (uint64_t)v10, v6);
    uint64_t v28 = *(int *)(v25 + 48);
    uint64_t v29 = (char *)v49 + v28;
    uint64_t v30 = *(int *)(v23 + 48);
    uint64_t v31 = (char *)v10 + v28;
    uint64_t v32 = (uint64_t)v10;
    *uint64_t v49 = *v10;
    uint64_t v33 = type metadata accessor for UUID(0LL);
    uint64_t v34 = *(void *)(v33 - 8);
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v29, v31, v33);
    unint64_t v35 = *(void **)&v31[v30];
    *(void *)&v29[v30] = v35;
    sub_10000A280(v21, v22);
    id v36 = [v35 processInstanceIdentifier];
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    uint64_t v39 = v38;

    if (v37 == v50 && v39 == v51)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v29, v33);
LABEL_27:
      swift_release();
      uint64_t v42 = v45;
      sub_10006746C(v32, v45, &qword_100132688);
      uint64_t v43 = v42;
      uint64_t v44 = 0LL;
LABEL_29:
      sub_100009E60(v43, v44, 1LL, v53);
      swift_bridgeObjectRelease();
      return;
    }

    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v39, v50, v51, 0LL);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v29, v33);
    if ((v41 & 1) != 0) {
      goto LABEL_27;
    }
    uint64_t v10 = (_OWORD *)v32;
    uint64_t v6 = v27;
    sub_10001B60C(v32, v27);
    unint64_t v13 = v56;
    if (v56) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v15 = v54 + 1;
    if (__OFADD__(v54, 1LL)) {
      break;
    }
    if (v15 >= v47) {
      goto LABEL_28;
    }
    unint64_t v16 = *(void *)(v46 + 8 * v15);
    int64_t v17 = v54 + 1;
    if (!v16)
    {
      int64_t v17 = v54 + 2;
      if (v54 + 2 >= v47) {
        goto LABEL_28;
      }
      unint64_t v16 = *(void *)(v46 + 8 * v17);
      if (!v16)
      {
        int64_t v17 = v54 + 3;
        if (v54 + 3 >= v47) {
          goto LABEL_28;
        }
        unint64_t v16 = *(void *)(v46 + 8 * v17);
        if (!v16)
        {
          int64_t v17 = v54 + 4;
          if (v54 + 4 >= v47) {
            goto LABEL_28;
          }
          unint64_t v16 = *(void *)(v46 + 8 * v17);
          if (!v16)
          {
            int64_t v17 = v54 + 5;
            if (v54 + 5 >= v47) {
              goto LABEL_28;
            }
            unint64_t v16 = *(void *)(v46 + 8 * v17);
            if (!v16)
            {
              int64_t v18 = v54 + 6;
              while (v18 < v47)
              {
                unint64_t v16 = *(void *)(v46 + 8 * v18++);
                if (v16)
                {
                  int64_t v17 = v18 - 1;
                  goto LABEL_18;
                }
              }

void *sub_10005A284()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000C7FC();
  sub_100068358(v2, "lock");
  uint64_t v3 = swift_beginAccess(v0 + 48, v17, 1LL, 0LL);
  uint64_t v4 = *(void **)(v0 + 48);
  int v5 = *(unsigned __int8 *)(v0 + 56);
  if (v5 == 255)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(v0 + 24))(&v18, v3);
    uint64_t v7 = v18;
    char v6 = v19;
    uint64_t v8 = *(void **)(v1 + 48);
    *(void *)(v1 + 48) = v18;
    unsigned __int8 v9 = *(_BYTE *)(v1 + 56);
    *(_BYTE *)(v1 + 5sub_10000AC58(v0 + 6) = v6;
    sub_1000670F0(v7, v6);
    sub_1000670FC(v8, v9);
  }

  else
  {
    char v6 = v5 & 1;
    uint64_t v7 = *(void **)(v0 + 48);
  }

  id v10 = sub_1000670D8(v4, v5);
  sub_100068358((uint64_t)v10, "unlock");
  uint64_t v11 = swift_release();
  if ((v6 & 1) != 0)
  {
    if (*(_BYTE *)(v1 + 40) == 1)
    {
      uint64_t v12 = sub_100047360();
      sub_100068358(v12, "lock");
      unint64_t v13 = *(void **)(v1 + 48);
      *(void *)(v1 + 48) = 0LL;
      unsigned __int8 v14 = *(_BYTE *)(v1 + 56);
      *(_BYTE *)(v1 + 5sub_10000AC58(v0 + 6) = -1;
      sub_1000670FC(v13, v14);
      sub_100068358(v15, "unlock");
      uint64_t v11 = swift_release();
    }

    swift_willThrow(v11);
  }

  return v7;
}

uint64_t sub_10005A3C8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0LL;
  uint64_t v18 = a2;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v9 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v3 << 6))
  {
    unsigned __int8 v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain();
    sub_100018380(&v17, v15, v16);
    uint64_t result = swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v11 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v3);
          if (!v12) {
            break;
          }
        }
      }
    }

id sub_10005A544(uint64_t a1, void *a2, char a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = 0LL;
  id v7 =  [(id)swift_getObjCClassFromMetadata(v3) bundleRecordWithBundleIdentifier:v6 allowPlaceholder:a3 & 1 error:&v11];

  id v8 = v11;
  if (!v7)
  {
    sub_100068570();

    swift_willThrow(v9);
  }

  return v7;
}

uint64_t sub_10005A620()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A07C(v0, qword_1001354A8);
  sub_100008D98(v0, (uint64_t)qword_1001354A8);
  uint64_t v8 = type metadata accessor for ApplicationService();
  uint64_t v1 = sub_100008DB0((uint64_t *)&unk_100132590);
  uint64_t v3 = String.init<A>(describing:)(&v8, v1);
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    uint64_t v5 = v2;
    uint64_t v6 = String.init(cString:)(LNLogSubsystem);
    return Logger.init(subsystem:category:)(v6, v7, v3, v5);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10005A6C4()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(LNDaemonApplicationMachServiceName);
  qword_1001354C0 = result;
  *(void *)algn_1001354C8 = v1;
  return result;
}

uint64_t sub_10005A6F0()
{
  if (qword_100130208 != -1) {
    swift_once(&qword_100130208, sub_10005A6C4);
  }
  sub_10000AE38();
  return sub_10000AF9C();
}

id sub_10005A744(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = sub_1000681F8();
  swift_defaultActor_initialize(v6);
  v2[14] = a1;
  v2[15] = a2;
  v8.receiver = v2;
  v8.super_class = v3;
  return objc_msgSendSuper2(&v8, "init");
}

uint64_t sub_10005A798(void *a1)
{
  return 1LL;
}

void sub_10005A7C8(void *a1)
{
  uint64_t v2 = sub_1000683A8();
  unsigned int v3 = [a1 processIdentifier];
  id v4 = (id)LNDaemonApplicationXPCInterface();
  sub_1000685BC((uint64_t)v4, "setExportedInterface:");

  sub_10005A96C(a1, &aBlock);
  uint64_t v6 = v17;
  if (v17)
  {
    uint64_t v7 = sub_100008D74(&aBlock, (uint64_t)v17);
    uint64_t v8 = *(v6 - 1);
    double v9 = __chkstk_darwin(v7);
    id v11 = (char *)&aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *, double))(v8 + 16))(v11, v9);
    uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)(v11, v6);
    (*(void (**)(char *, void *))(v8 + 8))(v11, v6);
    uint64_t v5 = sub_10000AC58(&aBlock);
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  sub_1000685BC(v5, "setExportedObject:");
  swift_unknownObjectRelease(v12);
  uint64_t v13 = sub_10000C254((uint64_t)&unk_100124A50, 32LL);
  *(_DWORD *)(v13 + 1sub_10000AC58(v0 + 6) = v3;
  *(void *)(v13 + 2sub_10000AC58(v0 + 4) = v2;
  uint64_t v18 = sub_100064450;
  uint64_t v19 = v13;
  *(void *)&__int128 aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256LL;
  uint64_t v16 = sub_10000D934;
  uint64_t v17 = &unk_100124A68;
  unsigned __int8 v14 = _Block_copy(&aBlock);
  swift_release();
  [a1 setInvalidationHandler:v14];
  _Block_release(v14);
}

void sub_10005A96C(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000E918();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  objc_msgSend(a1, "auditToken", v8);
  uint64_t v11 = token.val[0];
  uint64_t v12 = token.val[1];
  uint64_t v13 = token.val[7];
  uint64_t v52 = token.val[3];
  uint64_t v53 = token.val[2];
  uint64_t v50 = token.val[5];
  uint64_t v51 = token.val[4];
  uint64_t v49 = token.val[6];
  unsigned __int8 v14 = SecTaskCreateWithAuditToken(0LL, &token);
  if (!v14) {
    goto LABEL_9;
  }
  uint64_t v15 = v14;
  uint64_t v47 = v11;
  CFStringRef v16 = SecTaskCopySigningIdentifier(v14, 0LL);
  if (!v16
    || (uint64_t v17 = (__CFString *)v16,
        *(void *)token.val = 0LL,
        *(void *)&token.val[2] = 0LL,
        static String._conditionallyBridgeFromObjectiveC(_:result:)(v16, &token),
        v17,
        !*(void *)&token.val[2]))
  {

LABEL_9:
    *a2 = 0u;
    a2[1] = 0u;
    goto LABEL_12;
  }

  uint64_t v48 = *(void *)&token.val[2];
  uint64_t v45 = a2;
  uint64_t v46 = *(void *)token.val;
  uint64_t v18 = qword_100130200;
  swift_retain();
  if (v18 != -1) {
    swift_once(&qword_100130200, sub_10005A620);
  }
  uint64_t v19 = sub_100008D98(v6, (uint64_t)qword_1001354A8);
  sub_100067FF4(v19, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
  swift_release();
  uint64_t v20 = sub_100011A3C(v48);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v43 = (uint8_t *)sub_10000AE10(12LL);
    uint64_t v41 = sub_10000AE10(32LL);
    *(void *)token.val = v41;
    uint64_t v42 = v3;
    uint64_t v23 = v43;
    uint64_t v24 = v43;
    *(_DWORD *)uint64_t v43 = 136315138;
    uint64_t v40 = v23 + 4;
    uint64_t v44 = v21;
    uint64_t v25 = v48;
    sub_10001BCF8();
    uint64_t v54 = sub_10000DE60(v46, v25, (uint64_t *)&token);
    uint64_t v26 = v24 + 12;
    uint64_t v3 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &token, v40, v26);
    sub_100027E5C(v25);
    os_log_type_t v27 = v22;
    uint64_t v28 = v43;
    sub_10000AF5C((void *)&_mh_execute_header, v44, v27, "Created AppShortcutClient with bundleId: %s", v43);
    uint64_t v29 = v41;
    sub_10000AF48(v41);
    sub_10000AD78(v29);
    sub_10000AD78((uint64_t)v28);
  }

  else
  {

    sub_10001191C(v48);
  }

  sub_1000684F4((uint64_t)v10, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  uint64_t v30 = *(void *)(v3 + 120);
  sub_10000C7FC();
  int v31 = [a1 processIdentifier];
  uint64_t v32 = *(void *)(v3 + 112);
  uint64_t v33 = (objc_class *)type metadata accessor for ApplicationServiceInstance(0LL);
  objc_allocWithZone(v33);
  uint64_t v34 = v47 | (v12 << 32);
  uint64_t v35 = v53 | (v52 << 32);
  uint64_t v36 = v51 | (v50 << 32);
  uint64_t v37 = v49 | (v13 << 32);
  swift_retain();
  id v38 = sub_10005DD54(v34, v35, v36, v37, v46, v48, v30, v31, v32);
  uint64_t v39 = v45;
  v45[3] = v33;

  *uint64_t v39 = v38;
LABEL_12:
  sub_10000AD58();
}

uint64_t sub_10005AC80(int a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = a2;
  uint64_t v8 = sub_100008DB0((uint64_t *)&unk_100132590);
  uint64_t v10 = String.init<A>(describing:)(&v23, v8);
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    uint64_t v12 = v9;
    uint64_t v13 = String.init(cString:)(LNLogSubsystem);
    uint64_t v15 = Logger.init(subsystem:category:)(v13, v14, v10, v12);
    CFStringRef v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc(18LL, -1LL);
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      uint64_t v23 = v19;
      *(_DWORD *)uint64_t v18 = 67109378;
      LODWORD(v22) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, (char *)&v22 + 4, v18 + 4, v18 + 8);
      *(_WORD *)(v18 + 8) = 2080;
      if (qword_100130208 != -1) {
        swift_once(&qword_100130208, sub_10005A6C4);
      }
      uint64_t v20 = qword_1001354C0;
      unint64_t v21 = *(void *)algn_1001354C8;
      swift_bridgeObjectRetain();
      uint64_t v22 = sub_10000DE60(v20, v21, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v18 + 10, v18 + 18);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "Invalidated XPC connection from PID %d for service %s",  (uint8_t *)v18,  0x12u);
      swift_arrayDestroy(v19, 1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_10005AEA4()
{
}

uint64_t sub_10005AEE4()
{
  return v0;
}

uint64_t sub_10005AF10()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ApplicationService()
{
  return objc_opt_self(&OBJC_CLASS____TtC10LinkDaemon18ApplicationService);
}

uint64_t sub_10005AF48()
{
  return sub_10005A6F0();
}

void sub_10005AF5C(void *a1)
{
}

uint64_t sub_10005AF7C(void *a1)
{
  return 1LL;
}

uint64_t sub_10005AF94()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10013258C);
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10005AFD8;
  return sub_10001295C();
}

uint64_t sub_10005AFD8()
{
  uint64_t v3 = *v0;
  uint64_t v1 = *v0;
  sub_10004BEB8(*(void *)(v3 + 16), &v3);
  return sub_10000C914(*(uint64_t (**)(void))(v1 + 8));
}

void sub_10005B014()
{
  qword_1001354D0 = (uint64_t)&off_100122210;
}

double sub_10005B028()
{
  if (qword_100130210 != -1) {
    swift_once(&qword_100130210, sub_10005B014);
  }
  *(void *)&double result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

uint64_t sub_10005B068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_100132614);
  *(void *)(v5 + 1sub_10000AC58(v0 + 6) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_100067A90;
  return sub_10005B0BC(a5);
}

uint64_t sub_10005B0BC(uint64_t a1)
{
  v2[18] = a1;
  v2[19] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[20] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[21] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[22] = swift_task_alloc(v5);
  v2[23] = swift_task_alloc(v5);
  v2[24] = swift_task_alloc(v5);
  v2[25] = swift_task_alloc(v5);
  v2[26] = swift_task_alloc(v5);
  v2[27] = swift_task_alloc(v5);
  v2[28] = swift_task_alloc(v5);
  uint64_t v6 = sub_100008DB0(&qword_100133390);
  v2[29] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for LSLinkBundleRecord(0LL);
  v2[30] = v7;
  v2[31] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10005B1B0, v1, 0LL);
}

uint64_t sub_10005B1B0()
{
  uint64_t v1 = (char *)sub_10005A284();
  v0[32] = v1;
  v0[33] = 0LL;
  uint64_t v2 = *(void *)&v1[OBJC_IVAR____TtC10LinkDaemon8Registry_ready];
  v0[34] = v2;
  if (v2)
  {
    uint64_t v3 = async function pointer to Task<>.value.getter[1];
    uint64_t v4 = v1;
    sub_10000C7FC();
    unint64_t v5 = (void *)swift_task_alloc(v3);
    v0[35] = v5;
    *unint64_t v5 = v0;
    v5[1] = sub_10005B400;
    return Task<>.value.getter();
  }

  else
  {
    v0[36] = OBJC_IVAR____TtC10LinkDaemon8Registry_store;
    uint64_t v7 = v1;
    sub_1000685F4();
    v0[37] = v8;
    swift_bridgeObjectRetain();
    uint64_t v9 = (void *)sub_10000AF64();
    v0[38] = v9;
    sub_1000680BC(v9, (uint64_t)sub_10005B604);
    return sub_100067DE4();
  }

uint64_t sub_10005B400()
{
  return sub_10004BEA0();
}

uint64_t sub_10005B448()
{
  uint64_t v2 = *(void *)(v0 + 264);
  *(void *)(v0 + 288) = OBJC_IVAR____TtC10LinkDaemon8Registry_store;
  sub_1000685F4();
  *(void *)(v0 + 29sub_10000AC58(v0 + 6) = v3;
  if (v2)
  {
    sub_100068170();
    uint64_t v4 = *(os_log_s **)(v0 + 152);
    uint64_t v5 = qword_100130200;
    sub_10000C7FC();
    if (v5 != -1)
    {
      swift_once(&qword_100130200, sub_10005A620);
      uint64_t v4 = *(os_log_s **)(v0 + 152);
    }

    uint64_t v6 = *(void *)(v0 + 160);
    sub_100067E38(v6, (uint64_t)qword_1001354A8);
    sub_1000389DC();
    sub_10000ADF4();
    sub_10000ADF4();
    sub_10006801C();
    os_log_type_t v7 = sub_10000AF38();
    if (sub_100067CA8(v7))
    {
      uint64_t v8 = (uint8_t *)sub_10000AE10(12LL);
      uint64_t v9 = (void *)sub_10000AE10(8LL);
      *(_DWORD *)uint64_t v8 = 138412290;
      sub_10000ADF4();
      uint64_t v10 = sub_10000AF94();
      sub_100067FD8(v10);
      void *v9 = v1;
      sub_10000AD70();
      sub_10000AD70();
      sub_10000AF5C( (void *)&_mh_execute_header,  v4,  (os_log_type_t)v6,  "Error getting registry, App Shortcuts, or bundle IDs from registry %@",  v8);
      sub_100008DB0((uint64_t *)&unk_100132620);
      sub_10000AF48((uint64_t)v9);
      sub_10000AD78((uint64_t)v9);
      sub_10000AD78((uint64_t)v8);

      sub_10000AD70();
    }

    else
    {
      sub_10000AD70();
      sub_10000AD70();
      sub_10000AD70();
    }

    sub_100067F90();
    if (!*(void *)(v0 + 264)) {
      sub_100068170();
    }
    sub_100067B20();
    sub_10000AF6C();
    sub_10000AFA8();
    sub_10004D844();
    sub_10004D858();
    sub_10004D884();
    sub_100059648();
    sub_100067F4C();
    sub_100067F88();
    return sub_100067C5C(*(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = (void *)sub_10000AF64();
    *(void *)(v0 + 30sub_10000AC58(v0 + 4) = v11;
    sub_1000680BC(v11, (uint64_t)sub_10005B604);
    return sub_100067DE4();
  }

uint64_t sub_10005B604()
{
  v0[39] = v2;
  v0[40] = v1;
  sub_10004C0C4(v3);
  if (v1)
  {
    uint64_t v4 = (void *)v0[32];
    swift_bridgeObjectRelease();
  }

  return sub_10000AE28();
}

uint64_t sub_10005B670()
{
  uint64_t v4 = *(void *)(*(void *)(v2 + 312) + 16LL);
  *(void *)(v2 + 328) = v4;
  if (v4)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = &_ss12_ArrayBufferV18_typeCheckSlowPathyySiF_ptr;
    *(void *)(v2 + 33sub_10000AC58(v0 + 6) = OBJC_IVAR____TtC10LinkDaemon8Registry_appShortcutInterpolator;
    uint64_t v7 = *(void *)(v2 + 320);
    do
    {
      *(void *)(v2 + 34sub_10000AC58(v0 + 4) = v5;
      uint64_t v8 = *(void *)(v2 + 312) + 16 * v5;
      uint64_t v9 = *(void *)(v8 + 32);
      *(void *)(v2 + 352) = v9;
      unint64_t v10 = *(void *)(v8 + 40);
      *(void *)(v2 + 36sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v10;
      id v1 = objc_allocWithZone((Class)v6[248]);
      sub_100011A3C(v10);
      uint64_t v11 = sub_1000685DC();
      id v13 = sub_100066188(v11, v12, 0LL, (SEL *)&selRef_initWithBundleIdentifier_allowPlaceholder_error_);
      *(void *)(v2 + 368) = v13;
      if (v7)
      {
        uint64_t v54 = v9;
        id v1 = *(id *)(v2 + 152);
        uint64_t v14 = qword_100130200;
        sub_10000C7FC();
        if (v14 != -1)
        {
          swift_once(&qword_100130200, sub_10005A620);
          id v1 = *(id *)(v2 + 152);
        }

        sub_100067E38(*(void *)(v2 + 160), (uint64_t)qword_1001354A8);
        sub_1000389DC();
        sub_10001BCF8();
        sub_10006801C();
        os_log_type_t v15 = sub_10000AF38();
        BOOL v16 = sub_100067DBC(v15);
        uint64_t v0 = *(void **)(v2 + 208);
        uint64_t v3 = *(void *)(v2 + 160);
        uint64_t v17 = *(void *)(v2 + 168);
        if (v16)
        {
          uint64_t v18 = sub_10000AE10(12LL);
          uint64_t v19 = sub_10000AE10(32LL);
          uint64_t v56 = v19;
          *(_DWORD *)uint64_t v18 = 136315138;
          sub_10001BCF8();
          *(void *)(v18 + sub_10000AC58(v0 + 4) = sub_10000DE60(v54, v10, &v56);
          sub_100027E5C(v10);
          sub_10006847C();
          sub_10000AF5C(v20, v21, v22, "Could not create LSApplicationRecord for %s", (uint8_t *)v18);
          sub_10000AF48(v19);
          sub_10000AD78(v19);
          uint64_t v23 = v18;
          uint64_t v6 = &_ss12_ArrayBufferV18_typeCheckSlowPathyySiF_ptr;
          sub_10000AD78(v23);
        }

        else
        {
          sub_10001191C(v10);
        }

        sub_10000AD70();

        sub_100068068((uint64_t)v0, *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8));
      }

      else if (v13)
      {
        uint64_t v24 = *(void *)(v2 + 232);
        id v1 = *(id *)(v2 + 240);
        id v25 = v13;
        sub_10008FD0C();
        sub_100067DA0(v24);
        if (!v26)
        {
          uint64_t v39 = *(void *)(v2 + 336);
          uint64_t v40 = *(void *)(v2 + 256);
          sub_100067874(*(void *)(v2 + 232), *(void *)(v2 + 248), type metadata accessor for LSLinkBundleRecord);
          *(void *)(v2 + 37sub_10000AC58(v0 + 6) = *(void *)(v40 + v39);
          objc_opt_self(&OBJC_CLASS____INVocabulary);
          uint64_t v41 = sub_100047360();
          *(void *)(v2 + 38sub_10000AC58(v0 + 4) = sub_100011ABC(v41, "sharedVocabulary");
          *(void *)(v2 + 392) = sub_10008D7E0();
          sub_10001BCF8();
          uint64_t v42 = sub_1000685DC();
          sub_10004F350(v42, v43);
          *(void *)(v2 + 40sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v44;
          uint64_t v45 = *(void *)(v2 + 296);
          sub_10001BEC0();
          sub_10000AE38();
          sub_10001BCF8();
          *(void *)(v2 + 408) = sub_100059D68(v45, v9, v10);
          sub_10000ADB0();
          sub_10001BCF8();
          uint64_t v46 = sub_1000685DC();
          sub_100052F48(v46, v47);
          uint64_t v49 = v48;
          sub_10001BEC0();
          *(void *)(v2 + 41sub_10000AC58(v0 + 6) = v49;
          uint64_t v50 = (void *)swift_task_alloc(dword_1001332C4);
          *(void *)(v2 + 42sub_10000AC58(v0 + 4) = v50;
          sub_1000680BC(v50, (uint64_t)sub_10005BE98);
          uint64_t v51 = sub_1000685DC();
          return sub_10008FA38(v51, v52);
        }

        uint64_t v27 = sub_10006855C();
        sub_10001B60C(v27, &qword_100133390);
        uint64_t v28 = qword_100130200;
        sub_10000C7FC();
        if (v28 != -1) {
          swift_once(&qword_100130200, sub_10005A620);
        }
        uint64_t v29 = sub_100068528();
        uint64_t v30 = sub_100008D98(v29, (uint64_t)qword_1001354A8);
        sub_100067E6C(v30, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
        swift_release();
        uint64_t v31 = sub_10001BCF8();
        Logger.logObject.getter(v31);
        os_log_type_t v32 = sub_10000AF38();
        BOOL v33 = sub_100067CA8(v32);
        uint64_t v0 = *(void **)(v2 + 224);
        uint64_t v34 = *(void *)(v2 + 160);
        uint64_t v35 = *(void *)(v2 + 168);
        if (v33)
        {
          uint64_t v55 = *(void *)(v2 + 224);
          uint64_t v0 = v25;
          uint64_t v36 = sub_10000AE10(12LL);
          uint64_t v37 = sub_10000AE10(32LL);
          uint64_t v56 = v37;
          *(_DWORD *)uint64_t v36 = 136315138;
          sub_10001BCF8();
          *(void *)(v36 + sub_10000AC58(v0 + 4) = sub_100067F5C();
          sub_100027E5C(v10);
          sub_10000AF5C( (void *)&_mh_execute_header,  (os_log_s *)v1,  (os_log_type_t)v3,  "Could not create LSLinkBundleRecord from applicationRecord for %s",  (uint8_t *)v36);
          swift_arrayDestroy(v37, 1LL);
          uint64_t v38 = v37;
          uint64_t v6 = &_ss12_ArrayBufferV18_typeCheckSlowPathyySiF_ptr;
          sub_10000AD78(v38);
          sub_10000AD78(v36);

          (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v55, v34);
        }

        else
        {

          sub_10001191C(v10);
          (*(void (**)(void *, uint64_t))(v35 + 8))(v0, v34);
        }
      }

      else
      {
        sub_10001BEC0();
      }

      uint64_t v7 = 0LL;
      sub_100067C78();
    }

    while (!v26);
  }

  sub_100067F00();

  sub_100067D90();
  sub_10000ADB0();

  sub_100067B20();
  sub_10000AF6C();
  sub_10000AFA8();
  sub_10004D844();
  sub_10004D858();
  sub_10004D884();
  sub_100059648();
  sub_100067F4C();
  sub_100067F88();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10005BE98()
{
  uint64_t v2 = *v1;
  sub_10004BF9C();
  *(void *)(v2 + 432) = v3;
  *(void *)(v2 + 44sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v0;
  sub_10004C0C4(v4);
  if (v0)
  {
    swift_bridgeObjectRelease();
    sub_10001198C();
    sub_10000ADB0();
  }

  return sub_10000AE28();
}

uint64_t sub_10005BF10()
{
  if (v0[18]) {
    os_transaction_needs_more_time();
  }
  uint64_t v1 = v0[31];
  v0[11] = v0[30];
  v0[12] = &off_100126180;
  uint64_t v2 = sub_10001AFA8(v0 + 8);
  sub_10006704C(v1, (uint64_t)v2);
  uint64_t v3 = (void *)swift_task_alloc(dword_10013052C);
  v0[56] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10005BF98;
  uint64_t v4 = sub_1000681F8();
  return sub_100004290(v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_10005BF98()
{
  uint64_t v12 = v2;
  uint64_t v13 = v3;
  uint64_t v11 = v1;
  uint64_t v11 = (void *)*v1;
  uint64_t v4 = v11;
  sub_1000681EC(&v11);
  v4[57] = v0;
  swift_task_dealloc(v5);
  if (v0)
  {
    uint64_t v6 = v4[19];
    swift_bridgeObjectRelease();
    sub_10000ADB0();
    sub_100011958();
    sub_10001198C();
    uint64_t v7 = sub_10005D310;
    uint64_t v8 = v6;
  }

  else
  {
    uint64_t v9 = v4[19];
    swift_bridgeObjectRelease();
    sub_10000AEE8();
    sub_10001BE7C();
    sub_10001198C();
    sub_100011958();
    sub_100068600();
    uint64_t v7 = sub_10005C058;
    uint64_t v8 = v9;
  }

  return swift_task_switch(v7, v8, 0LL);
}

#error "10005C35C: call analysis failed (funcsize=485)"
uint64_t sub_10005C858()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  os_log_s *v13;
  os_log_type_t v14;
  const char *v15;
  sub_10006820C();
  uint64_t v1 = qword_100130200;
  sub_10000C7FC();
  if (v1 != -1) {
    swift_once(&qword_100130200, sub_10005A620);
  }
  uint64_t v2 = *(void **)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v5 = sub_100008D98(v4, (uint64_t)qword_1001354A8);
  (*(void (**)(void *, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  sub_1000389DC();
  sub_10000ADF4();
  uint64_t v6 = sub_10000ADF4();
  uint64_t v7 = v2;
  Logger.logObject.getter(v6);
  uint64_t v8 = sub_10000AF38();
  if (sub_100067DBC(v8))
  {
    uint64_t v9 = (uint8_t *)sub_10000AE10(12LL);
    uint64_t v10 = (void *)sub_10000AE10(8LL);
    *(_DWORD *)uint64_t v9 = 138412290;
    sub_10000ADF4();
    uint64_t v11 = sub_10000AF94();
    *(void *)(v0 + 112) = v11;
    sub_100067E18(v0 + 112, v0 + 120);
    *uint64_t v10 = v11;
    sub_10000AD70();
    sub_10000AD70();
    sub_10006847C();
    sub_10000AF5C(v12, v13, v14, v15, v9);
    sub_100008DB0((uint64_t *)&unk_100132620);
    sub_10000AF48((uint64_t)v10);
    sub_10000AD78((uint64_t)v10);
    sub_10000AD78((uint64_t)v9);

    sub_10000AD70();
  }

  else
  {
    sub_10000AD70();
    sub_10000AD70();
    sub_10000AD70();
  }

  sub_100067F90();
  sub_10001BEC0();
  if (!*(void *)(v0 + 264)) {
    sub_100068170();
  }
  sub_100067B20();
  sub_10000AF6C();
  sub_10000AFA8();
  sub_10004D844();
  sub_10004D858();
  sub_10004D884();
  sub_100059648();
  sub_100067F4C();
  sub_100067F88();
  return sub_100067C5C(*(uint64_t (**)(void))(v0 + 8));
}

#error "10005CB94: call analysis failed (funcsize=548)"
#error "10005D4B0: call analysis failed (funcsize=571)"
double sub_10005DC7C()
{
  return sub_10005B028();
}

uint64_t sub_10005DC90(void *a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  uint64_t v5 = sub_100008D74(a1, a1[3]);
  __int128 v6 = *((_OWORD *)v5 + 1);
  v8[0] = *(_OWORD *)v5;
  v8[1] = v6;
  uint64_t v9 = v5[4];
  return sub_100066AE0((uint64_t *)v8, a2, v4);
}

uint64_t sub_10005DCE0()
{
  uint64_t v0 = sub_100008DB0((uint64_t *)&unk_100132690);
  unint64_t v1 = sub_10000A230();
  uint64_t v2 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for Data, v0, v1);
  uint64_t v3 = sub_100008DB0(&qword_1001326A0);
  uint64_t result = swift_allocObject(v3, 28LL, 7LL);
  *(_DWORD *)(result + 2sub_10000AC58(v0 + 4) = 0;
  *(void *)(result + 1sub_10000AC58(v0 + 6) = v2;
  qword_1001354D8 = result;
  return result;
}

id sub_10005DD54( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v15 = sub_1000681F8();
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v15);
  BOOL v16 = v9;
  UUID.init()();
  id result = (id)LNLogSubsystem;
  if (LNLogSubsystem)
  {
    uint64_t v18 = String.init(cString:)(LNLogSubsystem);
    Logger.init(subsystem:category:)(v18, v19, 0x6976726553707041LL, 0xEA00000000006563LL);
    uint64_t v20 = &v16[OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken];
    *(void *)uint64_t v20 = v10;
    *((void *)v20 + 1) = a2;
    *((void *)v20 + 2) = a3;
    *((void *)v20 + 3) = a4;
    unint64_t v21 = (uint64_t *)&v16[OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_sourceBundleIdentifier];
    uint64_t v22 = a5;
    *unint64_t v21 = a5;
    v21[1] = a6;
    *(void *)&v16[OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_observationStatusRegistrySource] = a7;
    *(_DWORD *)&v16[OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_processID] = a8;
    *(void *)&v16[OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_registrySource] = a9;
    id v23 = objc_allocWithZone(&OBJC_CLASS___LSApplicationExtensionRecord);
    sub_1000684C0();
    swift_retain();
    sub_100011A3C(a6);
    id v24 = sub_100066188(a5, a6, (void *)1, (SEL *)&selRef_initWithBundleIdentifier_requireValid_error_);
    uint64_t v25 = LSApplicationExtensionRecord.attributionBundleIdentifier.getter();
    if (v26)
    {
      uint64_t v27 = v25;
      uint64_t v28 = v26;
      sub_10001BEC0();

      uint64_t v22 = v27;
      a6 = v28;
    }

    else
    {
      id v29 = sub_100011ABC(v25, "containingBundleRecord");
      if (v29
        && (uint64_t v30 = v29,
            id v31 = [v29 bundleIdentifier],
            v30,
            v31))
      {
        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
        uint64_t v33 = v32;
        sub_10001BEC0();

        a6 = v33;
      }

      else
      {
      }
    }

    uint64_t v34 = (uint64_t *)&v16[OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier];
    *uint64_t v34 = v22;
    v34[1] = a6;

    v40.receiver = v16;
    v40.super_class = ObjectType;
    id v35 = objc_msgSendSuper2(&v40, "init");
    sub_10003EF28();
    swift_release();
    return v35;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_10005DFA4()
{
  unint64_t v1 = (objc_class *)sub_1000683A8();
  if (qword_100130218 != -1) {
    swift_once(&qword_100130218, sub_10005DCE0);
  }
  uint64_t v2 = (uint64_t *)(qword_1001354D8 + 16);
  uint64_t v3 = (os_unfair_lock_s *)(qword_1001354D8 + 24);
  swift_retain();
  os_unfair_lock_lock(v3);
  sub_10005E060(v2, (uint64_t)v0);
  os_unfair_lock_unlock(v3);
  swift_release();
  v5.receiver = v0;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, "dealloc");
}

void sub_10005E060(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v61 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v52 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100008DB0(&qword_1001328F8);
  __chkstk_darwin(v6);
  uint64_t v60 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100008DB0((uint64_t *)&unk_100132900);
  __chkstk_darwin(v8);
  uint64_t v59 = (uint64_t)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v50 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v50 - v14;
  uint64_t v16 = sub_100008DB0(&qword_100131BF0);
  __chkstk_darwin(v16);
  uint64_t v53 = (uint64_t)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v50 - v19;
  __chkstk_darwin(v21);
  id v23 = (char *)&v50 - v22;
  id v24 = (void *)objc_opt_self(&OBJC_CLASS___NSData);
  __int128 v25 = *(_OWORD *)(a2 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken + 16);
  v62[0] = *(_OWORD *)(a2 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken);
  v62[1] = v25;
  id v26 = objc_msgSend(v24, "if_dataWithAuditToken:", v62);
  if (v26)
  {
    uint64_t v27 = v26;
    uint64_t v54 = v6;
    uint64_t v55 = a2;
    uint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
    unint64_t v30 = v29;

    uint64_t v58 = a1;
    uint64_t v31 = *a1;
    sub_10000A280(v28, v30);
    sub_100011CF0(v28, v30, v31, (uint64_t)v23);
    uint64_t v56 = v28;
    unint64_t v57 = v30;
    uint64_t v32 = v28;
    uint64_t v33 = (uint64_t)v23;
    sub_10000A1D8(v32, v30);
    sub_10006790C((uint64_t)v23, (uint64_t)v20, &qword_100131BF0);
    uint64_t v34 = sub_100008DB0((uint64_t *)&unk_100132690);
    int v35 = sub_100009E6C((uint64_t)v20, 1LL, v34);
    uint64_t v51 = v34;
    if (v35 == 1)
    {
      sub_10001B60C((uint64_t)v20, &qword_100131BF0);
      uint64_t v36 = 1LL;
      uint64_t v37 = v61;
    }

    else
    {

      uint64_t v37 = v61;
      (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v15, v20, v4);
      uint64_t v36 = 0LL;
    }

    uint64_t v38 = (uint64_t)v60;
    uint64_t v39 = v54;
    sub_100009E60((uint64_t)v15, v36, 1LL, v4);
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))( v12,  v55 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_identifier,  v4);
    sub_100009E60((uint64_t)v12, 0LL, 1LL, v4);
    uint64_t v40 = v38 + *(int *)(v39 + 48);
    sub_10006790C((uint64_t)v15, v38, (uint64_t *)&unk_100132900);
    sub_10006790C((uint64_t)v12, v40, (uint64_t *)&unk_100132900);
    if (sub_100009E6C(v38, 1LL, v4) == 1)
    {
      sub_10001B60C((uint64_t)v12, (uint64_t *)&unk_100132900);
      sub_10001B60C((uint64_t)v15, (uint64_t *)&unk_100132900);
      if (sub_100009E6C(v40, 1LL, v4) == 1)
      {
        sub_10001B60C(v38, (uint64_t *)&unk_100132900);
LABEL_12:
        uint64_t v49 = v53;
        sub_100009E60(v53, 1LL, 1LL, v51);
        sub_10003A868(v49);
        sub_10001B60C(v33, &qword_100131BF0);
        return;
      }
    }

    else
    {
      uint64_t v41 = v59;
      sub_10006790C(v38, v59, (uint64_t *)&unk_100132900);
      if (sub_100009E6C(v40, 1LL, v4) != 1)
      {
        uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 32);
        uint64_t v61 = v33;
        uint64_t v43 = v41;
        uint64_t v44 = v52;
        v42(v52, v40, v4);
        sub_100067940(&qword_100130E48, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
        char v46 = dispatch thunk of static Equatable.== infix(_:_:)(v43, v44, v4, v45);
        uint64_t v47 = *(void (**)(char *, uint64_t))(v37 + 8);
        v47(v44, v4);
        sub_10001B60C((uint64_t)v12, (uint64_t *)&unk_100132900);
        sub_10001B60C((uint64_t)v15, (uint64_t *)&unk_100132900);
        uint64_t v48 = v43;
        uint64_t v33 = v61;
        v47((char *)v48, v4);
        sub_10001B60C(v38, (uint64_t *)&unk_100132900);
        if ((v46 & 1) != 0) {
          goto LABEL_12;
        }
        goto LABEL_13;
      }

      sub_10001B60C((uint64_t)v12, (uint64_t *)&unk_100132900);
      sub_10001B60C((uint64_t)v15, (uint64_t *)&unk_100132900);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v41, v4);
    }

    sub_10001B60C(v38, &qword_1001328F8);
LABEL_13:
    sub_10001B60C(v33, &qword_100131BF0);
    sub_10000A1D8(v56, v57);
  }

uint64_t sub_10005E610()
{
  return type metadata accessor for ApplicationServiceInstance(0LL);
}

uint64_t type metadata accessor for ApplicationServiceInstance(uint64_t a1)
{
  uint64_t result = qword_100132570;
  if (!qword_100132570) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ApplicationServiceInstance);
  }
  return result;
}

uint64_t sub_10005E650()
{
  *(void *)(v1 + 1sub_10000AC58(v0 + 6) = v0;
  return sub_100067ABC((uint64_t)sub_10005E660);
}

uint64_t sub_10005E660()
{
  uint64_t v1 = (uint64_t *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_sourceBundleIdentifier);
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = (void *)swift_task_alloc(dword_1001328F4);
  *(void *)(v0 + 2sub_10000AC58(v0 + 4) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10005E6CC;
  return sub_10005E700(v3, v2);
}

uint64_t sub_10005E6CC()
{
  uint64_t v2 = *v0;
  sub_10004BEB8(*(void *)(v1 + 24), &v4);
  return sub_10000C914(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_10005E700(uint64_t a1, uint64_t a2)
{
  v3[20] = a2;
  v3[21] = v2;
  v3[19] = a1;
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_10005E75C()
{
  uint64_t v1 = (void *)objc_opt_self(&OBJC_CLASS___LNConnectionPolicy);
  sub_10000AF9C();
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 policyWithBundleIdentifier:v2];

  *(void *)(v0 + 14sub_10000AC58(v0 + 4) = 0LL;
  id v4 = [v3 connectionWithError:v0 + 144];
  *(void *)(v0 + 17sub_10000AC58(v0 + 6) = v4;

  uint64_t v5 = *(void **)(v0 + 144);
  if (v4)
  {
    uint64_t v6 = v0 + 16;
    *(void *)(v0 + 5sub_10000AC58(v0 + 6) = v0 + 120;
    *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v0;
    *(void *)(v0 + 2sub_10000AC58(v0 + 4) = sub_10005E8E8;
    uint64_t v7 = swift_continuation_init(v0 + 16, 1LL);
    *(void *)(v0 + 8sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = _NSConcreteStackBlock;
    uint64_t v8 = (void *)(v0 + 80);
    v8[1] = 0x40000000LL;
    _OWORD v8[2] = sub_10005ECAC;
    v8[3] = &unk_100124F18;
    void v8[4] = v7;
    id v9 = v5;
    [v4 fetchAppShortcutParametersWithCompletionHandler:v8];
    return swift_continuation_await(v6);
  }

  else
  {
    id v11 = v5;
    _convertNSErrorToError(_:)(v5);

    swift_willThrow(v12);
    return sub_100068024(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_10005E8E8()
{
  *uint64_t v1 = *v0;
  *(void *)(v2 + 18sub_10000AC58(v0 + 4) = *(void *)(v2 + 48);
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_10005E978()
{
  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  v0[24] = v2;
  v0[25] = v1;
  uint64_t v3 = v0[17];
  v0[26] = v3;
  id v4 = (void *)swift_task_alloc(dword_1001328B4);
  v0[27] = v4;
  *id v4 = v0;
  v4[1] = sub_10005EA18;
  return sub_10005ED78(v2, v1, v3);
}

uint64_t sub_10005EA18()
{
  uint64_t v3 = *(void *)(v2 + 216);
  *id v4 = *v1;
  *(void *)(v2 + 22sub_10000AC58(v0 + 4) = v0;
  swift_task_dealloc(v3);
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_10005EAAC()
{
  return sub_100067BC8(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10005EB10(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 176);
  swift_willThrow(a1);

  return sub_100067BC8(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10005EB74()
{
  return sub_100067BC8(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10005EBEC(const void *a1, void *a2)
{
  void v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_1001328EC;
  a2;
  uint64_t v5 = (void *)swift_task_alloc(v4);
  void v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10005EC4C;
  return sub_10005E650();
}

uint64_t sub_10005EC4C()
{
  uint64_t v4 = sub_100068454();
  uint64_t v5 = *(void **)(v3 + 16);
  sub_100067B14(v4, v6);

  if (v0)
  {
    sub_100067E64();
    sub_100067D10();
    sub_100067C04();
  }

  else
  {
    sub_100067C14();
  }

  sub_1000680F0();
  return sub_10000EA08(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_10005ECAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (a5) {
    return sub_1000BC0E0(v5, a5);
  }
  uint64_t v10 = sub_10000A1A0(0LL, &qword_1001328A0, &OBJC_CLASS___LNAutoShortcutSubstitution_ptr);
  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v10);
  uint64_t v12 = sub_10000A1A0(0LL, &qword_1001328A8, &OBJC_CLASS___LNAppShortcutSpanData_ptr);
  uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, v12);
  uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a4, v10);
  return sub_1000BC144(v5, v11, v13, v14);
}

uint64_t sub_10005ED78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[20] = a3;
  v4[21] = v3;
  v4[18] = a1;
  v4[19] = a2;
  uint64_t v5 = sub_100008DB0(&qword_100133390);
  v4[22] = sub_10006810C(v5);
  uint64_t v6 = type metadata accessor for LSLinkBundleRecord(0LL);
  v4[23] = v6;
  v4[24] = sub_10006810C(v6);
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_10005EDD0()
{
  uint64_t v1 = (void *)(v0[21] + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier);
  v0[25] = *v1;
  v0[26] = v1[1];
  id v2 = objc_allocWithZone(&OBJC_CLASS___LSApplicationRecord);
  sub_10001C064();
  uint64_t v3 = sub_10006815C();
  v0[27] = sub_100066188(v3, v4, 0LL, v5);
  v0[28] = sub_10005A284();
  uint64_t v6 = dword_1001332C4;
  sub_10001C064();
  uint64_t v7 = (void *)swift_task_alloc(v6);
  v0[29] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10005EEC0;
  sub_10006815C();
  sub_1000680A8();
  return sub_10008FA38(v8, v9);
}

uint64_t sub_10005EEC0()
{
  *(void *)(v0 + 24sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v2;
  *(void *)(v0 + 248) = v1;
  sub_10004C0C4(v3);
  if (!v1) {
    swift_bridgeObjectRelease();
  }
  sub_10000EA88();
  return sub_10004BEA0();
}

uint64_t sub_10005EF14()
{
  uint64_t v1 = (void *)sub_10000AF64();
  v0[32] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10005EF6C;
  return sub_10008FBAC(v0[25], v0[26]);
}

uint64_t sub_10005EF6C()
{
  *(void *)(v0 + 26sub_10000AC58(v0 + 4) = v2;
  *(void *)(v0 + 272) = v1;
  sub_10004C0C4(v3);
  if (!v1) {
    swift_bridgeObjectRelease();
  }
  sub_10000EA88();
  return sub_10004BEA0();
}

uint64_t sub_10005EFC0()
{
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = *(void **)(v0 + 224);
  sub_10001C064();
  sub_10006815C();
  sub_10004F0C4();
  *(void *)(v0 + 28sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v3;
  if (v1)
  {
    uint64_t v5 = *(void **)(v0 + 216);
    uint64_t v4 = *(void **)(v0 + 224);
    sub_10000AEE8();
    sub_10001BEC0();
    sub_10000ADB0();

    sub_100068408();
    sub_10000AF6C();
    uint64_t v20 = (uint64_t (*)(void))sub_1000680E4();
    return v20();
  }

  unint64_t v6 = *(void *)(v0 + 264);
  unint64_t v7 = *(void *)(v0 + 240);
  uint64_t v8 = *(void *)(v0 + 200);
  uint64_t v9 = *(void **)(v0 + 208);
  uint64_t v59 = *(void **)(v0 + 168);
  uint64_t v60 = *(void *)(v0 + 160);
  unint64_t v62 = *(void *)(v0 + 152);
  uint64_t v10 = v3;
  unint64_t v58 = *(void *)(v0 + 144);
  sub_10001DF40();
  sub_10001C1BC();
  uint64_t v63 = v10;
  uint64_t v55 = v0 + 120;
  uint64_t v11 = sub_100059AFC(v10);
  sub_10003AF28(v8, (uint64_t)v9, v7, (unint64_t)v11, v6);
  uint64_t v13 = v12;
  uint64_t v61 = v14;
  sub_10000ADB0();
  sub_10000AEE8();
  sub_10001DF40();
  type metadata accessor for AppShortcutInterpolator();
  sub_10001C1BC();
  sub_1000248B8(v8, (uint64_t)v9, v58);
  sub_10001DF40();
  sub_1000597A8(_swiftEmptyArrayStorage, v60, v59);
  uint64_t v57 = v13;
  uint64_t v65 = v13;
  sub_10001C064();
  sub_100043258();
  sub_100043258();
  uint64_t v15 = v13;
  *(void *)(v0 + 288) = v13;
  sub_10001C1BC();
  uint64_t v16 = v8;
  sub_1000598E4(v62, v8, (uint64_t)v9);
  uint64_t v17 = sub_10000AF9C();
  uint64_t v19 = sub_10005FFE8(v17, v18);
  *(void *)(v0 + 29sub_10000AC58(v0 + 6) = v19;
  sub_10000ADB0();
  swift_bridgeObjectRelease();
  sub_10001198C();
  sub_10001C1BC();
  sub_100055E28();
  uint64_t v22 = *(void **)(v0 + 216);
  uint64_t v23 = *(void *)(v0 + 176);
  swift_bridgeObjectRelease();
  id v24 = v22;
  sub_10008FD0C();
  sub_100067DA0(v23);
  if (v25)
  {
    uint64_t v26 = *(void *)(v0 + 176);
    uint64_t v27 = swift_bridgeObjectRelease();
    sub_100067F54(v27, v28, v29, v30, v31, v32, v33, v34, v55, v57, v58, (uint64_t)v59, v60, v61, v62, v0 + 104, v63);
    sub_10000AEE8();
    sub_10001BEC0();
    sub_10001B60C(v26, &qword_100133390);
    if (qword_1001302D8 != -1) {
      swift_once(&qword_1001302D8, sub_100088814);
    }
    int v35 = *(void **)(v0 + 168);
    uint64_t v36 = sub_10000E918();
    uint64_t v37 = (os_log_s *)sub_100008D98(v36, (uint64_t)qword_100135780);
    Logger.logObject.getter(v35);
    os_log_type_t v38 = sub_10000AF38();
    if (sub_100068360(v38))
    {
      uint64_t v16 = v0 + 112;
      uint64_t v19 = *(void *)(v0 + 200);
      uint64_t v64 = *(void **)(v0 + 168);
      uint64_t v39 = (uint8_t *)sub_10000AE10(12LL);
      uint64_t v9 = (void *)sub_10000AE10(32LL);
      uint64_t v65 = (uint64_t)v9;
      *(_DWORD *)uint64_t v39 = 136315138;
      uint64_t v2 = v39 + 12;
      sub_10001BD0C();
      *(void *)(v0 + 112) = sub_100067C8C(v19, v40, &v65);
      sub_100067E18(v0 + 112, v56);
      sub_10000AEE8();

      sub_10000AF5C((void *)&_mh_execute_header, v37, (os_log_type_t)v35, "Invalid bundle %s", v39);
      sub_10000AF48((uint64_t)v9);
      sub_10000AD78((uint64_t)v9);
      sub_10000AD78((uint64_t)v39);
    }

    else
    {
    }

    if (qword_100130150 != -1) {
      swift_once(&qword_100130150, sub_100038C14);
    }
    sub_100067E84();
    uint64_t v52 = sub_100008DB0((uint64_t *)&unk_100132130);
    uint64_t v53 = sub_100068244(v52);
    *(_OWORD *)(v53 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
    *(void *)(v53 + 32) = v19;
    *(void *)(v53 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v16;
    sub_100011A3C(v16);
    sub_100068340();
    sub_1000683B0();
    sub_100068150(v54);
    sub_10001BEC0();
    sub_10001BE7C();
    sub_100068168();

    sub_10004D844();
    sub_10000AFA8();
    uint64_t v20 = (uint64_t (*)(void))sub_1000681B8();
    return v20();
  }

  uint64_t v41 = *(void *)(v0 + 224);
  uint64_t v43 = *(void *)(v0 + 184);
  uint64_t v42 = *(void *)(v0 + 192);
  sub_100067874(*(void *)(v0 + 176), v42, type metadata accessor for LSLinkBundleRecord);
  uint64_t v44 = *(void *)(v41 + OBJC_IVAR____TtC10LinkDaemon8Registry_appShortcutInterpolator);
  *(void *)(v0 + 30sub_10000AC58(v0 + 4) = v44;
  uint64_t v45 = (void *)objc_opt_self(&OBJC_CLASS____INVocabulary);
  swift_retain();
  id v46 = objc_msgSend(v45, "sharedVocabulary", v55);
  *(void *)(v0 + 312) = v46;
  uint64_t v47 = sub_10008D7E0();
  *(void *)(v0 + 32sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v47;
  *(void *)(v0 + 88) = v43;
  *(void *)(v0 + 9sub_10000AC58(v0 + 6) = &off_100126180;
  uint64_t v48 = sub_10001AFA8((void *)(v0 + 64));
  sub_10006704C(v42, (uint64_t)v48);
  uint64_t v49 = (void *)swift_task_alloc(dword_10013052C);
  *(void *)(v0 + 328) = v49;
  *uint64_t v49 = v0;
  v49[1] = sub_10005F4B4;
  uint64_t v50 = sub_1000681F8();
  return sub_100004290(v50, v63, v15, v19, v51, v44, (uint64_t)v46, v47);
}

uint64_t sub_10005F4B4()
{
  *(void *)(v1 + 33sub_10000AC58(v0 + 6) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease();
  if (v0)
  {
    sub_100011958();
    sub_10001198C();
    sub_10000ADB0();
  }

  else
  {
    sub_10001BE7C();
    sub_100011958();
    sub_10001198C();
    sub_100068600();
  }

  sub_10000EA88();
  sub_1000680A8();
  return swift_task_switch(v4, v5, v6);
}

uint64_t sub_10005F550()
{
  uint64_t v5 = *(void **)(v0 + 312);
  swift_release();

  sub_10000ADB0();
  sub_1000685B4();
  if (qword_100130150 != -1) {
    swift_once(&qword_100130150, sub_100038C14);
  }
  sub_100067E84();
  uint64_t v6 = sub_100008DB0((uint64_t *)&unk_100132130);
  uint64_t v7 = sub_100068244(v6);
  *(_OWORD *)(v7 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
  *(void *)(v7 + 32) = v2;
  *(void *)(v7 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v1;
  sub_100011A3C(v1);
  sub_100068340();
  sub_1000683B0();
  sub_100068150(v8);
  sub_10001BEC0();
  sub_10001BE7C();
  sub_100068168();

  sub_10004D844();
  sub_10000AFA8();
  uint64_t v9 = (uint64_t (*)(void))sub_1000681B8();
  return sub_10000EA08(v9);
}

uint64_t sub_10005F630()
{
  uint64_t v1 = *(void **)(v0 + 216);
  uint64_t v2 = *(void **)(v0 + 224);
  sub_1000683F4();

  sub_100068414();
  sub_10000AFA8();
  return sub_10000EA08(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005F670()
{
  uint64_t v2 = *(void **)(v0 + 216);
  uint64_t v1 = *(void **)(v0 + 224);
  sub_1000683F4();
  sub_10000ADB0();

  sub_100068414();
  sub_10000AFA8();
  return sub_100067BC8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005F6BC()
{
  uint64_t v4 = (void *)v0[39];
  uint64_t v5 = v0[24];
  swift_release();

  sub_10001198C();
  sub_100067010(v5);
  sub_100068600();
  if (qword_1001302D8 != -1) {
    swift_once(&qword_1001302D8, sub_100088814);
  }
  uint64_t v6 = (os_log_s *)v0[42];
  uint64_t v7 = (void *)v0[21];
  uint64_t v8 = sub_10000E918();
  sub_100008D98(v8, (uint64_t)qword_100135780);
  id v9 = v7;
  swift_errorRetain(v6);
  id v10 = v9;
  swift_errorRetain(v6);
  sub_10006801C();
  os_log_type_t v11 = sub_10000AF38();
  BOOL v12 = sub_100067CA8(v11);
  uint64_t v13 = v0[42];
  if (v12)
  {
    unint64_t v14 = v0[26];
    uint64_t v23 = v0[25];
    uint64_t v15 = (void *)v0[21];
    uint64_t v16 = sub_10000AE10(22LL);
    id v24 = (void *)sub_10000AE10(8LL);
    uint64_t v25 = sub_10000AE10(32LL);
    uint64_t v26 = v25;
    *(_DWORD *)uint64_t v16 = 136315394;
    sub_100027FA0();
    v0[16] = sub_10000DE60(v23, v14, &v26);
    uint64_t v1 = v0 + 17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 17, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease();

    *(_WORD *)(v16 + 12) = 2112;
    uint64_t v2 = (void *)(v16 + 14);
    swift_errorRetain(v13);
    uint64_t v3 = (void *)_swift_stdlib_bridgeErrorToNSError(v13);
    v0[17] = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 17, v0 + 18, v16 + 14, v16 + 22);
    void *v24 = v3;
    sub_10004BDA4();
    sub_10004BDA4();
    _os_log_impl( (void *)&_mh_execute_header,  v6,  (os_log_type_t)v4,  "Error donating App Shortcuts to Siri for %s: %@",  (uint8_t *)v16,  0x16u);
    sub_100008DB0((uint64_t *)&unk_100132620);
    sub_10000AF48((uint64_t)v24);
    sub_10000AD78((uint64_t)v24);
    uint64_t v4 = (void *)v25;
    sub_10000AF48(v25);
    sub_10000AD78(v25);
    sub_10000AD78(v16);

    sub_10004BDA4();
  }

  else
  {
    uint64_t v17 = (void *)v0[21];
    sub_10004BDA4();

    sub_10004BDA4();
    sub_10004BDA4();
  }

  if (qword_100130150 != -1) {
    swift_once(&qword_100130150, sub_100038C14);
  }
  sub_100067E84();
  uint64_t v18 = sub_100008DB0((uint64_t *)&unk_100132130);
  uint64_t v19 = sub_100068244(v18);
  *(_OWORD *)(v19 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
  *(void *)(v19 + 32) = v1;
  *(void *)(v19 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v4;
  sub_100011A3C((uint64_t)v4);
  sub_100068340();
  sub_1000683B0();
  sub_100068150(v20);
  sub_10001BEC0();
  sub_10001BE7C();
  sub_100068168();

  sub_10004D844();
  sub_10000AFA8();
  uint64_t v21 = (uint64_t (*)(void))sub_1000681B8();
  return v21();
}

uint64_t sub_10005F990(void *a1, id *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LNAppShortcutParameterRecord(0LL);
  uint64_t v80 = *(void *)(v6 - 8);
  uint64_t v81 = (int *)v6;
  double v7 = __chkstk_darwin(v6);
  id v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = objc_msgSend(*a2, "basePhraseTemplateSubstitutions", v7);
  uint64_t v11 = sub_10000A1A0(0LL, (unint64_t *)&unk_1001328C0, &OBJC_CLASS___LNBasePhraseTemplateSubstitution_ptr);
  unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

  uint64_t v13 = v12;
  unint64_t v70 = v12;
  if (v12 >> 62) {
    goto LABEL_48;
  }
  uint64_t v14 = *(void *)((v12 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v14)
  {
LABEL_3:
    unint64_t v15 = 0LL;
    uint64_t v74 = (uint64_t *)(a3 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier);
    unint64_t v69 = v13 & 0xC000000000000001LL;
    uint64_t v67 = v13 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v66 = v13 + 32;
    uint64_t v68 = v14;
    uint64_t v75 = a1;
    while (1)
    {
      if (v69)
      {
        unint64_t v16 = v15;
        id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v13);
      }

      else
      {
        if (v15 >= *(void *)(v67 + 16)) {
          goto LABEL_47;
        }
        unint64_t v16 = v15;
        id v17 = *(id *)(v66 + 8 * v15);
      }

      id v82 = v17;
      BOOL v18 = __OFADD__(v16, 1LL);
      a3 = v16 + 1;
      if (v18) {
        goto LABEL_46;
      }
      uint64_t v71 = a3;
      a3 = (uint64_t)[v82 parameterSubstitutions];
      uint64_t v19 = sub_10000A1A0(0LL, &qword_100131248, &OBJC_CLASS___LNParameterSubstitution_ptr);
      uint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, v19);

      uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v21) {
        goto LABEL_11;
      }
LABEL_36:

      swift_bridgeObjectRelease();
      unint64_t v15 = v71;
      uint64_t v13 = v70;
      if (v71 == v68) {
        return swift_bridgeObjectRelease();
      }
    }

    if (v20 < 0) {
      uint64_t v62 = v20;
    }
    else {
      uint64_t v62 = v20 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter(v62);
    swift_bridgeObjectRelease();
    if (!v21) {
      goto LABEL_36;
    }
LABEL_11:
    unint64_t v22 = 0LL;
    uint64_t v77 = v20;
    unint64_t v78 = v20 & 0xC000000000000001LL;
    uint64_t v13 = v20 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v72 = v20 + 32;
    uint64_t v73 = v20 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v76 = v21;
    while (1)
    {
      if (v78)
      {
        id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v20);
      }

      else
      {
        if (v22 >= *(void *)(v73 + 16)) {
          goto LABEL_45;
        }
        id v23 = *(id *)(v72 + 8 * v22);
      }

      id v88 = v23;
      BOOL v18 = __OFADD__(v22++, 1LL);
      if (v18)
      {
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        if (v13 < 0) {
          uint64_t v63 = v13;
        }
        else {
          uint64_t v63 = v13 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain();
        uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v63);
        swift_bridgeObjectRelease();
        uint64_t v13 = v70;
        if (!v14) {
          return swift_bridgeObjectRelease();
        }
        goto LABEL_3;
      }

      id v24 = [v88 substitutionValues];
      uint64_t v25 = sub_10000A1A0(0LL, &qword_1001328D0, &OBJC_CLASS___LNSubstitutionValue_ptr);
      uint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, v25);

      if ((unint64_t)v26 >> 62)
      {
        if (v26 < 0) {
          uint64_t v61 = v26;
        }
        else {
          uint64_t v61 = v26 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain();
        a3 = _CocoaArrayWrapper.endIndex.getter(v61);
        swift_bridgeObjectRelease();
        if (!a3)
        {
LABEL_34:

          swift_bridgeObjectRelease();
          goto LABEL_35;
        }
      }

      else
      {
        a3 = *(void *)((v26 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        if (!a3) {
          goto LABEL_34;
        }
      }

      if (a3 < 1) {
        goto LABEL_44;
      }
      unint64_t v79 = v22;
      uint64_t v27 = 0LL;
      uint64_t v28 = *v74;
      uint64_t v85 = v74[1];
      uint64_t v86 = v28;
      uint64_t v83 = a3;
      unint64_t v84 = v26 & 0xC000000000000001LL;
      uint64_t v29 = *a1;
      uint64_t v87 = v26;
      do
      {
        uint64_t v92 = v29;
        if (v84) {
          id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27, v26);
        }
        else {
          id v30 = *(id *)(v26 + 8 * v27 + 32);
        }
        uint64_t v31 = v30;
        id v32 = [v30 parameterIdentifier];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v32);

        uint64_t v33 = v85;
        id v34 = objc_msgSend(v82, "basePhraseTemplate", swift_bridgeObjectRetain().n128_f64[0]);
        uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
        uint64_t v90 = v36;
        uint64_t v91 = v35;

        id v89 = [v31 title];
        id v37 = [v31 titleKey];
        uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        uint64_t v40 = v39;

        id v41 = [v88 parameterIdentifier];
        uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
        uint64_t v44 = v43;

        id v45 = [v31 value];
        id v46 = objc_allocWithZone(&OBJC_CLASS___LNProperty);
        id v47 = sub_1000BF7D0(v42, v44, v45);
        id v48 = [v31 optionsCollectionTitle];
        uint64_t v49 = sub_100066A14(v31);
        uint64_t v50 = v81;
        uint64_t v51 = &v9[v81[5]];
        *(void *)uint64_t v51 = v86;
        *((void *)v51 + 1) = v33;
        uint64_t v52 = &v9[v50[6]];
        uint64_t v53 = v90;
        *(void *)uint64_t v52 = v91;
        *((void *)v52 + 1) = v53;
        *(void *)&v9[v50[7]] = v89;
        uint64_t v54 = (uint64_t *)&v9[v50[8]];
        *uint64_t v54 = v38;
        v54[1] = v40;
        *(void *)&v9[v50[9]] = v47;
        *(void *)&v9[v50[10]] = v48;
        uint64_t v55 = (uint64_t *)&v9[v50[11]];
        *uint64_t v55 = v49;
        v55[1] = v56;
        uint64_t v29 = v92;
        if ((swift_isUniquelyReferenced_nonNull_native(v92) & 1) == 0)
        {
          sub_100014280();
          uint64_t v29 = v59;
        }

        uint64_t v57 = v83;
        unint64_t v58 = *(void *)(v29 + 16);
        a3 = v58 + 1;
        uint64_t v26 = v87;
        if (v58 >= *(void *)(v29 + 24) >> 1)
        {
          sub_100014280();
          uint64_t v29 = v60;
        }

        ++v27;
        *(void *)(v29 + 1sub_10000AC58(v0 + 6) = a3;
        sub_100067874( (uint64_t)v9,  v29 + ((*(unsigned __int8 *)(v80 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80))
        + *(void *)(v80 + 72) * v58,
          type metadata accessor for LNAppShortcutParameterRecord);
      }

      while (v57 != v27);

      swift_bridgeObjectRelease();
      a1 = v75;
      uint64_t v21 = v76;
      void *v75 = v29;
      uint64_t v20 = v77;
      unint64_t v22 = v79;
LABEL_35:
      if (v22 == v21) {
        goto LABEL_36;
      }
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10005FFE8(uint64_t result, uint64_t a2)
{
  if (__OFADD__(*(void *)(a2 + 16), *(void *)(result + 16)))
  {
    __break(1u);
  }

  else
  {
    sub_1000146C8();
    uint64_t v4 = v2;
    swift_bridgeObjectRetain();
    sub_100042C90(v3);
    swift_bridgeObjectRetain();
    sub_100042BF8();
    return v4;
  }

  return result;
}

uint64_t sub_1000600F0(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock, void *a5)
{
  _OWORD v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  uint64_t v10 = sub_10000A1A0(0LL, &qword_1001328A0, &OBJC_CLASS___LNAutoShortcutSubstitution_ptr);
  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, v10);
  void v5[4] = v11;
  uint64_t v12 = sub_10000A1A0(0LL, &qword_1001328A8, &OBJC_CLASS___LNAppShortcutSpanData_ptr);
  uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v12);
  void v5[5] = v13;
  uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, v10);
  v5[6] = v14;
  uint64_t v15 = dword_1001328B4;
  a5;
  unint64_t v16 = (void *)swift_task_alloc(v15);
  v5[7] = v16;
  *unint64_t v16 = v5;
  v16[1] = sub_1000601EC;
  return sub_10005ED78(v11, v13, v14);
}

uint64_t sub_1000601EC()
{
  uint64_t v3 = *(void **)(v2 + 40);
  uint64_t v4 = *(void **)(v2 + 16);
  sub_100067B14(*(void *)(v2 + 56), v5);

  sub_10001198C();
  sub_100011958();
  sub_10001BE7C();
  if (v0)
  {
    sub_100067E64();
    sub_100067D10();
    sub_100067C04();
  }

  else
  {
    sub_100067C14();
  }

  _Block_release(*(const void **)(v2 + 24));
  return sub_10000EA08(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100060268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  void v4[8] = a1;
  void v4[9] = a2;
  return sub_100067ABC((uint64_t)sub_10006027C);
}

uint64_t sub_10006027C()
{
  uint64_t v2 = sub_100067CF4();
  *(void *)(v1 + 9sub_10000AC58(v0 + 6) = v2;
  if (v0) {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  uint64_t v4 = v2;
  uint64_t v5 = *(void *)(v1 + 80);
  uint64_t v6 = *(void *)(v1 + 88);
  if (v5)
  {
    double v7 = (void *)objc_opt_self(&OBJC_CLASS___LNEntitlementsValidator);
    sub_10000AFB0();
    NSString v8 = String._bridgeToObjectiveC()();
    __int128 v16 = *(_OWORD *)(v6 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken + 16);
    __int128 v17 = *(_OWORD *)(v6 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken);
    *(void *)(v1 + 48) = sub_100060500;
    *(void *)(v1 + 5sub_10000AC58(v0 + 6) = 0LL;
    *(void *)(v1 + 1sub_10000AC58(v0 + 6) = _NSConcreteStackBlock;
    *(void *)(v1 + 2sub_10000AC58(v0 + 4) = 1107296256LL;
    *(void *)(v1 + 32) = sub_100060574;
    *(void *)(v1 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = &unk_100124EA0;
    id v9 = _Block_copy((const void *)(v1 + 16));
    *(_OWORD *)(v1 + 128) = v17;
    *(_OWORD *)(v1 + 14sub_10000AC58(v0 + 4) = v16;
    unsigned int v10 = [v7 validateEntitlement:v8 auditToken:v1 + 128 validator:v9];
    sub_100067E10();

    if (!v10)
    {
      sub_10001198C();
      unint64_t v13 = sub_100067210();
      uint64_t v14 = sub_100038AC8((uint64_t)&type metadata for ApplicationServiceInstance.Errors, v13);
      *uint64_t v15 = 0;
      swift_willThrow(v14);

      return (*(uint64_t (**)(void))(v1 + 8))();
    }

    uint64_t v11 = *(void *)(v1 + 72);
  }

  else
  {
    uint64_t v11 = *(void *)(v6 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier);
    uint64_t v5 = *(void *)(v6 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier + 8);
    sub_10000AFB0();
  }

  *(void *)(v1 + 10sub_10000AC58(v0 + 4) = v5;
  uint64_t v12 = (void *)swift_task_alloc(dword_100133954);
  *(void *)(v1 + 112) = v12;
  *uint64_t v12 = v1;
  v12[1] = sub_100060454;
  return sub_100090128(*(void *)(v1 + 64), v11, v5);
}

uint64_t sub_100060454()
{
  *(void *)(v0 + 12sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v1;
  swift_task_dealloc(v3);
  if (!v1) {
    swift_bridgeObjectRelease();
  }
  sub_10000EA88();
  return sub_10004BEA0();
}

uint64_t sub_1000604A8()
{
  uint64_t v1 = (uint64_t (*)(void))sub_1000681B8();
  return sub_10000C914(v1);
}

uint64_t sub_1000604D0()
{
  sub_10000ADB0();
  return sub_10000C914(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100060500(uint64_t a1)
{
  if (v4)
  {
    uint64_t result = swift_dynamicCast(&v2, v3, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL);
    if ((_DWORD)result) {
      return v2;
    }
  }

  else
  {
    sub_10001B60C((uint64_t)v3, &qword_100130EA0);
    return 0LL;
  }

  return result;
}

uint64_t sub_100060574(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(__int128 *))(a1 + 32);
  if (a2)
  {
    *((void *)&v7 + 1) = swift_getObjectType(a2);
    *(void *)&__int128 v6 = a2;
  }

  else
  {
    __int128 v6 = 0u;
    __int128 v7 = 0u;
  }

  swift_retain();
  swift_unknownObjectRetain(a2);
  char v4 = v3(&v6);
  swift_release();
  sub_10001B60C((uint64_t)&v6, &qword_100130EA0);
  return v4 & 1;
}

uint64_t sub_100060610(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  void v4[2] = a4;
  void v4[3] = _Block_copy(aBlock);
  uint64_t v8 = sub_10000A1A0(0LL, &qword_1001334C0, &OBJC_CLASS___LNRelevantIntent_ptr);
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, v8);
  void v4[4] = v9;
  if (a2)
  {
    a2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
    uint64_t v11 = v10;
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  void v4[5] = v11;
  uint64_t v12 = dword_100132884;
  a4;
  unint64_t v13 = (void *)swift_task_alloc(v12);
  v4[6] = v13;
  *unint64_t v13 = v4;
  v13[1] = sub_1000606E4;
  return sub_100060268(v9, a2, v11);
}

uint64_t sub_1000606E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16)
{
  a15 = v18;
  a16 = v19;
  a14 = (void *)v17;
  a14 = *(void **)v17;
  uint64_t v20 = (void *)a14[4];
  uint64_t v21 = (void *)a14[2];
  sub_100067B14(a14[6], &a14);

  sub_100011958();
  sub_10001198C();
  if (v16)
  {
    sub_100067E64();
    sub_100067D10();
    sub_100067C04();
  }

  else
  {
    sub_100067C14();
  }

  sub_1000680F0();
  return sub_100067B00(*(uint64_t (**)(void))(v17 + 8));
}

uint64_t sub_100060754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  void v4[5] = v3;
  void v4[2] = a1;
  void v4[3] = a2;
  return sub_100067ABC((uint64_t)sub_100060768);
}

uint64_t sub_100060768()
{
  unsigned __int8 v2 = sub_100067CF4();
  if (v0)
  {
    uint64_t v10 = (uint64_t (*)(void))sub_1000680E4();
  }

  else
  {
    uint64_t v3 = v2;
    char v4 = (void *)v1[4];
    uint64_t v6 = v1[2];
    uint64_t v5 = v1[3];
    __int128 v7 = (uint64_t *)(v1[5] + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    sub_10001C1BC();
    sub_1000582F4(v8, v9, v6, v5, v4);
    sub_10001DF40();

    uint64_t v10 = (uint64_t (*)(void))sub_1000681B8();
  }

  return v10();
}

uint64_t sub_100060830(uint64_t a1, void *a2, void *aBlock, void *a4)
{
  void v4[2] = a2;
  void v4[3] = a4;
  void v4[4] = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v10 = v9;
  void v4[5] = v9;
  uint64_t v11 = dword_1001327FC;
  id v12 = a2;
  a4;
  unint64_t v13 = (void *)swift_task_alloc(v11);
  v4[6] = v13;
  *unint64_t v13 = v4;
  v13[1] = sub_1000608D4;
  return sub_100060754(v8, v10, (uint64_t)v12);
}

uint64_t sub_1000608D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16)
{
  a15 = v18;
  a16 = v19;
  a14 = v17;
  uint64_t v20 = (uint64_t *)*v17;
  a14 = v20;
  unint64_t v22 = (void *)v20[2];
  uint64_t v21 = (void *)v20[3];
  sub_100067B14(v20[6], &a14);

  sub_10001198C();
  if (v16)
  {
    sub_100067E64();
    sub_100067D10();
    sub_100067C04();
  }

  else
  {
    sub_100067C14();
  }

  _Block_release((const void *)v20[4]);
  return sub_100067B00((uint64_t (*)(void))v17[1]);
}

uint64_t sub_100060944()
{
  *(void *)(v1 + 1sub_10000AC58(v0 + 6) = v0;
  return sub_100067ABC((uint64_t)sub_100060954);
}

uint64_t sub_100060954()
{
  unsigned __int8 v2 = sub_100067CF4();
  if (v0)
  {
    __int128 v7 = (uint64_t (*)(void))sub_1000680E4();
    return sub_100068024(v7);
  }

  else
  {
    uint64_t v3 = v2;
    uint64_t v6 = *v4;
    uint64_t v5 = v4[1];
    sub_10001C064();
    sub_10005802C(v6, v5);
    sub_10001BE7C();

    uint64_t v9 = sub_100067E58();
    return sub_100067D84(v9, v10);
  }

uint64_t sub_100060A04(const void *a1, void *a2)
{
  void v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_10013283C;
  a2;
  uint64_t v5 = (void *)swift_task_alloc(v4);
  void v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100060A64;
  return sub_100060944();
}

uint64_t sub_100060A64()
{
  uint64_t v8 = *v1;
  unsigned __int8 v2 = *(void **)(v8 + 16);
  sub_100067B14(*(void *)(v8 + 32), &v8);

  if (v0)
  {
    uint64_t v4 = sub_1000680A0();
    sub_10004BDA4();
    uint64_t v5 = (void *)v4;
  }

  else
  {
    sub_100011AB4(v3, &qword_100132850, &OBJC_CLASS___LNIntentEnablement_ptr);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    sub_10000ADB0();
    uint64_t v5 = isa;
  }

  sub_100067C94();

  sub_100067E10();
  return sub_10000EA08((uint64_t (*)(void))v1[1]);
}

uint64_t sub_100060B20()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10013283C);
  *(void *)(v0 + 2sub_10000AC58(v0 + 4) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100060B64;
  return sub_100060944();
}

uint64_t sub_100060B64(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = v7;
  sub_1000681EC(&v7);
  *(void *)(v4 + 32) = v1;
  swift_task_dealloc(v5);
  if (v1) {
    return ((uint64_t (*)(void))v2[1])();
  }
  *(void *)(v4 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = a1;
  sub_10000EA88();
  return sub_10000AE28();
}

uint64_t sub_100060BD0()
{
  uint64_t v1 = sub_100066728(*(void *)(v0 + 40));
  sub_10001198C();
  sub_100059BA8((uint64_t)v1);
  sub_10003EF28();
  uint64_t v2 = sub_100067E58();
  return sub_100067D84(v2, v3);
}

uint64_t sub_100060C44(const void *a1, void *a2)
{
  void v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_100132834;
  a2;
  uint64_t v5 = (void *)swift_task_alloc(v4);
  void v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100060CA4;
  return sub_100060B20();
}

uint64_t sub_100060CA4()
{
  uint64_t v7 = *v1;
  uint64_t v2 = *(void **)(v7 + 16);
  sub_100067B14(*(void *)(v7 + 32), &v7);

  if (v0)
  {
    uint64_t v3 = sub_1000680A0();
    sub_10004BDA4();
    uint64_t v4 = (void *)v3;
  }

  else
  {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    sub_10000ADB0();
    uint64_t v4 = isa;
  }

  sub_100067C94();

  sub_100067E10();
  return sub_10000EA08((uint64_t (*)(void))v1[1]);
}

uint64_t sub_100060D40()
{
  return sub_100067ABC((uint64_t)sub_100060D4C);
}

uint64_t sub_100060D4C(uint64_t a1)
{
  uint64_t v2 = sub_10000F764();
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v2);
}

uint64_t sub_100060DA8(const void *a1, void *a2)
{
  void v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_100132814;
  id v5 = a2;
  uint64_t v6 = (void *)swift_task_alloc(v4);
  void v2[4] = v6;
  void *v6 = v2;
  v6[1] = sub_100060E04;
  return sub_100060D40();
}

uint64_t sub_100060E04()
{
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v6 = sub_100068454();
  uint64_t v7 = *(void **)(v2 + 16);
  sub_100067B14(v6, v8);

  if (v3)
  {
    sub_1000680A0();
    sub_10004BDA4();
    sub_100068420();
  }

  else if (v5)
  {
    sub_1000683E8();
    sub_10000ADB0();
    sub_100068488();
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  sub_100067C94();

  sub_100067E10();
  return sub_100067B00(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100060E8C(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 2sub_10000AC58(v0 + 4) = a2;
  *(void *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 6sub_10000AC58(v0 + 4) = a3;
  *(void *)(v4 + 1sub_10000AC58(v0 + 6) = a1;
  return sub_100067ABC((uint64_t)sub_100060EA4);
}

uint64_t sub_100060EA4()
{
  int v1 = *(unsigned __int8 *)(v0 + 64);
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___LNIntentEnablement);
  if (v1 == 1) {
    id v3 = [v2 enabled];
  }
  else {
    id v3 = [v2 disabledWithReason:0];
  }
  id v4 = v3;
  *(void *)(v0 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v4;
  uint64_t v5 = (void *)swift_task_alloc(dword_1001327FC);
  *(void *)(v0 + 48) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100060F3C;
  return sub_100060754(*(void *)(v0 + 16), *(void *)(v0 + 24), (uint64_t)v4);
}

uint64_t sub_100060F3C()
{
  *(void *)(v0 + 5sub_10000AC58(v0 + 6) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    sub_10000EA88();
    return sub_10004BEA0();
  }

  else
  {

    return sub_10000EA08(*(uint64_t (**)(void))(v2 + 8));
  }

uint64_t sub_100060F94()
{
  return sub_10000C914(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100061038(uint64_t a1, char a2, void *aBlock, void *a4)
{
  void v4[2] = a4;
  void v4[3] = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v10 = v9;
  void v4[4] = v9;
  uint64_t v11 = dword_1001327F4;
  a4;
  id v12 = (void *)swift_task_alloc(v11);
  void v4[5] = v12;
  *id v12 = v4;
  v12[1] = sub_1000610D4;
  return sub_100060E8C(v8, v10, a2);
}

uint64_t sub_1000610D4()
{
  uint64_t v3 = sub_100068468();
  uint64_t v4 = *(void **)(v2 + 16);
  sub_100067B14(v3, v5);

  sub_10001198C();
  if (v0)
  {
    sub_100067E64();
    sub_100067D10();
    sub_100067C04();
  }

  else
  {
    sub_100067C14();
  }

  sub_1000680F0();
  return sub_10000EA08(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100061138( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = *(void *)(a2 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier);
  uint64_t v10 = *(void **)(a2 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier + 8);
  sub_10000A1A0(0LL, &qword_100132790, &OBJC_CLASS___LSBundleRecord_ptr);
  swift_bridgeObjectRetain_n(v10, 2LL);
  id v11 = sub_10005A544(v9, v10, 0);
  if (v6)
  {
    swift_errorRelease(v6);
    id v12 = 0LL;
  }

  else
  {
    id v12 = v11;
    if (v11)
    {
      uint64_t v36 = objc_opt_self(&OBJC_CLASS___LSApplicationExtensionRecord);
      uint64_t v37 = swift_dynamicCastObjCClass(v12, v36);
      if (v37)
      {
        uint64_t v38 = (void *)v37;
        id v67 = v12;
        id v39 = [v38 containingBundleRecord];
        if (v39
          && (uint64_t v40 = v39,
              id v41 = [v39 bundleIdentifier],
              v40,
              v41))
        {
          swift_bridgeObjectRelease();
          uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
          uint64_t v10 = v42;

          id v12 = v67;
        }

        else
        {
          uint64_t v52 = LSApplicationExtensionRecord.attributionBundleIdentifier.getter();
          uint64_t v54 = (void *)v53;
          sub_1000684CC(v52, v53, v55, v56, v57, v58, v59, v60, v61, v63, v67);
          if (v54)
          {
            swift_bridgeObjectRelease();
            uint64_t v9 = v52;
            uint64_t v10 = v54;
          }

          id v12 = v68;
        }
      }
    }
  }

  uint64_t v66 = v12;
  uint64_t v13 = sub_100008DB0((uint64_t *)&unk_100132130);
  uint64_t inited = swift_initStackObject(v13, v72);
  *(_OWORD *)(inited + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
  *(void *)(inited + 32) = v9;
  *(void *)(inited + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v10;
  uint64_t v73 = inited;
  sub_100027FA0();
  sub_1000427B8();
  uint64_t v23 = *(void *)(v73 + 16);
  uint64_t v64 = v73;
  if (v23)
  {
    id v24 = (unint64_t *)(v73 + 40);
    uint64_t v69 = a5;
    while (1)
    {
      uint64_t v25 = *(v24 - 1);
      unint64_t v26 = *v24;
      uint64_t v27 = swift_bridgeObjectRetain_n(*v24, 3LL);
      uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
      os_log_type_t v29 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = swift_slowAlloc(12LL, -1LL);
        uint64_t v31 = a3;
        uint64_t v32 = swift_slowAlloc(32LL, -1LL);
        uint64_t v73 = v32;
        *(_DWORD *)uint64_t v30 = 136315138;
        sub_100027FA0();
        *(void *)(v30 + sub_10000AC58(v0 + 4) = sub_10000DE60(v25, v26, &v73);
        swift_bridgeObjectRelease_n(v26, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Searching %s", (uint8_t *)v30, 0xCu);
        swift_arrayDestroy(v32, 1LL);
        uint64_t v33 = v32;
        a3 = v31;
        sub_10000AD78(v33);
        uint64_t v34 = v30;
        a5 = v69;
        sub_10000AD78(v34);
      }

      else
      {
        swift_bridgeObjectRelease_n(v26, 2LL);
      }

      uint64_t v35 = a6(v25, v26, a4, a5);
      uint64_t v15 = swift_bridgeObjectRelease();
      if (v35) {
        break;
      }
      v24 += 2;
      if (!--v23) {
        goto LABEL_10;
      }
    }

    sub_1000684CC(v15, v16, v17, v18, v19, v20, v21, v22, v61, v64, v66);
    sub_1000684EC(v43, v44, v45, v46, v47, v48, v49, v50, v62, v65);
  }

  else
  {
LABEL_10:
    sub_1000684EC(v15, v16, v17, v18, v19, v20, v21, v22, v61, v64);

    uint64_t v35 = 0LL;
    a3 = v66;
  }

  swift_bridgeObjectRelease();
  return v35;
}

uint64_t sub_1000614C8(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 0LL;
  }
  uint64_t v1 = sub_100008DB0((uint64_t *)&unk_100132780);
  sub_1000674D0((unint64_t *)&qword_100131990, (uint64_t *)&unk_100132780);
  v3._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)(44LL, 0xE100000000000000LL, v1, v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 8285LL;
  v4._object = (void *)0xE200000000000000LL;
  String.append(_:)(v4);
  return 91LL;
}

uint64_t sub_100061580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  void v4[8] = v3;
  void v4[5] = a1;
  v4[6] = a2;
  return sub_100067ABC((uint64_t)sub_100061594);
}

#error "1000616A0: call analysis failed (funcsize=131)"
uint64_t sub_1000617B4()
{
  uint64_t *v0;
  uint64_t v2;
  uint64_t v2 = *v0;
  sub_10004BEB8(*(void *)(v2 + 96), &v2);
  sub_1000389DC();
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_1000617FC()
{
  uint64_t v2 = (void *)v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  sub_10001C064();
  id v5 = v2;
  sub_100067CE8(v3, v4, v5, v6, v7, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1000573AC);
  sub_100067F28();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  if (!v1) {
    uint64_t v8 = sub_100067E58();
  }
  return sub_100067BB0(v8, v9);
}

uint64_t sub_100061874(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  void v4[2] = a4;
  void v4[3] = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v10 = v9;
  void v4[4] = v9;
  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String);
  void v4[5] = v11;
  uint64_t v12 = dword_1001327DC;
  a4;
  uint64_t v13 = (void *)swift_task_alloc(v12);
  v4[6] = v13;
  *uint64_t v13 = v4;
  v13[1] = sub_100067A88;
  return sub_100061580(v8, v10, v11);
}

uint64_t sub_100061928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  void v4[8] = v3;
  void v4[5] = a1;
  v4[6] = a2;
  return sub_100067ABC((uint64_t)sub_10006193C);
}

#error "100061A48: call analysis failed (funcsize=131)"
uint64_t sub_100061B5C()
{
  uint64_t *v0;
  uint64_t v2;
  uint64_t v2 = *v0;
  sub_10004BEB8(*(void *)(v2 + 96), &v2);
  sub_1000389DC();
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_100061BA4()
{
  uint64_t v2 = (void *)v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  sub_10001C064();
  id v5 = v2;
  sub_100067CE8(v3, v4, v5, v6, v7, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_100057B7C);
  sub_100067F28();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  if (!v1) {
    uint64_t v8 = sub_100067E58();
  }
  return sub_100067BB0(v8, v9);
}

uint64_t sub_100061C1C(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  void v4[2] = a4;
  void v4[3] = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v10 = v9;
  void v4[4] = v9;
  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String);
  void v4[5] = v11;
  uint64_t v12 = dword_1001327C4;
  a4;
  uint64_t v13 = (void *)swift_task_alloc(v12);
  v4[6] = v13;
  *uint64_t v13 = v4;
  v13[1] = sub_100061CD0;
  return sub_100061928(v8, v10, v11);
}

uint64_t sub_100061CD0()
{
  uint64_t v3 = v0;
  id v5 = v4;
  sub_100068318();
  uint64_t v6 = (void *)v2[2];
  sub_100067B14(v2[6], v7);

  sub_100011958();
  sub_10001BE7C();
  uint64_t v8 = v2[3];
  if (v3)
  {
    uint64_t v9 = (void *)sub_1000680A0();
    sub_10004BDA4();
    sub_1000685A8(v8, *(uint64_t (**)(uint64_t, void, uint64_t))(v8 + 16));

    sub_100067E10();
  }

  else
  {
    (*(void (**)(void, void *, void))(v8 + 16))(v2[3], v5, 0LL);
    sub_100067E10();
  }

  return sub_10000EA08(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100061D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  void v4[8] = v3;
  void v4[5] = a1;
  v4[6] = a2;
  return sub_100067ABC((uint64_t)sub_100061D84);
}

#error "100061E90: call analysis failed (funcsize=131)"
uint64_t sub_100061FA4()
{
  uint64_t *v0;
  uint64_t v2;
  uint64_t v2 = *v0;
  sub_10004BEB8(*(void *)(v2 + 96), &v2);
  sub_1000389DC();
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_100061FEC()
{
  uint64_t v2 = (void *)v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  sub_10001C064();
  id v5 = v2;
  sub_100067CE8(v3, v4, v5, v6, v7, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_100057A24);
  sub_100067F28();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  if (!v1) {
    uint64_t v8 = sub_100067E58();
  }
  return sub_100067BB0(v8, v9);
}

uint64_t sub_100062064(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  void v4[2] = a4;
  void v4[3] = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v10 = v9;
  void v4[4] = v9;
  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String);
  void v4[5] = v11;
  uint64_t v12 = dword_1001327AC;
  a4;
  uint64_t v13 = (void *)swift_task_alloc(v12);
  v4[6] = v13;
  *uint64_t v13 = v4;
  v13[1] = sub_100067A88;
  return sub_100061D70(v8, v10, v11);
}

uint64_t sub_100062118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  void v4[8] = v3;
  void v4[5] = a1;
  v4[6] = a2;
  return sub_100067ABC((uint64_t)sub_10006212C);
}

#error "100062238: call analysis failed (funcsize=131)"
uint64_t sub_10006234C()
{
  uint64_t *v0;
  uint64_t v2;
  uint64_t v2 = *v0;
  sub_10004BEB8(*(void *)(v2 + 96), &v2);
  sub_1000389DC();
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_100062394()
{
  uint64_t v2 = (void *)v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  sub_10001C064();
  id v5 = v2;
  sub_100067CE8(v3, v4, v5, v6, v7, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_100057C9C);
  sub_100067F28();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  if (!v1) {
    uint64_t v8 = sub_100067E58();
  }
  return sub_100067BB0(v8, v9);
}

uint64_t sub_10006240C(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  void v4[2] = a4;
  void v4[3] = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v10 = v9;
  void v4[4] = v9;
  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String);
  void v4[5] = v11;
  uint64_t v12 = dword_10013277C;
  a4;
  uint64_t v13 = (void *)swift_task_alloc(v12);
  v4[6] = v13;
  *uint64_t v13 = v4;
  v13[1] = sub_100067A88;
  return sub_100062118(v8, v10, v11);
}

uint64_t sub_1000624C0()
{
  *(void *)(v1 + 12sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v0;
  return sub_100067ABC((uint64_t)sub_1000624D0);
}

uint64_t sub_1000624D0()
{
  uint64_t v3 = (void **)(v1 + 120);
  id v4 = sub_10006812C(*(void **)(v1 + 120));
  id v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (sub_100067CA8(v6))
  {
    uint64_t v7 = *(char **)(v1 + 120);
    uint64_t v0 = (uint8_t *)sub_10000AE10(12LL);
    uint64_t v8 = sub_10000AE10(32LL);
    *(_DWORD *)uint64_t v0 = 136315138;
    uint64_t v22 = v8;
    uint64_t v9 = *(void *)&v7[OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier];
    unint64_t v10 = *(void *)&v7[OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier + 8];
    sub_100027FA0();
    uint64_t v11 = v9;
    uint64_t v3 = (void **)(v1 + 120);
    *(void *)(v1 + 112) = sub_10000DE60(v11, v10, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 112, v1 + 120, v0 + 4, v0 + 12);
    swift_bridgeObjectRelease();

    sub_10000AF5C((void *)&_mh_execute_header, v5, v2, "Request from %s for AppShortcutsProvider", v0);
    sub_10000AF48(v8);
    sub_10000AD78(v8);
    sub_10000AD78((uint64_t)v0);
  }

  else
  {
    uint64_t v12 = *v3;
  }

  uint64_t v13 = (char *)sub_100067CF4();
  *(void *)(v1 + 128) = v13;
  *(void *)(v1 + 13sub_10000AC58(v0 + 6) = v0;
  if (v0)
  {
    sub_1000680E4();
    sub_10006828C();
    __asm { BR              X0 }
  }

  uint64_t v15 = *(void *)&v13[OBJC_IVAR____TtC10LinkDaemon8Registry_ready];
  *(void *)(v1 + 14sub_10000AC58(v0 + 4) = v15;
  if (!v15)
  {
    sub_10001BD0C();
    uint64_t v19 = sub_100068134();
    sub_10004F288(v19, v20);

    sub_10000AEE8();
    sub_10006746C((uint64_t)(v3 - 8), (uint64_t)(v3 - 13), &qword_100132760);
    if (*(void *)(v1 + 24)) {
      sub_1000681C4((uint64_t)(v3 - 3));
    }
    sub_1000683C8();
    sub_10006828C();
    __asm { BR              X2 }
  }

  uint64_t v16 = async function pointer to Task<>.value.getter[1];
  sub_10000C7FC();
  uint64_t v17 = (void *)swift_task_alloc(v16);
  *(void *)(v1 + 152) = v17;
  void *v17 = v1;
  v17[1] = sub_100062740;
  sub_10006828C();
  return Task<>.value.getter();
}

uint64_t sub_100062740()
{
  return sub_10000E998();
}

uint64_t sub_100062780()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = (uint64_t *)(v0[15] + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier);
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  sub_10001C064();
  sub_10004F288(v4, v3);
  id v5 = (void *)v0[16];
  if (v1)
  {
    sub_10001BE7C();

    sub_1000680E4();
    sub_1000680A8();
    return v6(v6, v7, v8, v9, v10, v11, v12, v13);
  }

  else
  {

    sub_10001BE7C();
    uint64_t v15 = sub_10000AF9C();
    sub_10006746C(v15, v16, v17);
    if (v0[3]) {
      sub_1000681C4((uint64_t)(v0 + 12));
    }
    sub_1000683C8();
    sub_1000680A8();
    return v20(v18, v19, v20, v21, v22, v23, v24, v25);
  }

uint64_t sub_100062860(void *a1, int a2, void *aBlock)
{
  uint64_t v5 = sub_1000681F8();
  uint64_t v6 = sub_10000C254(v5, 32LL);
  *(void *)(v6 + 1sub_10000AC58(v0 + 6) = v3;
  *(void *)(v6 + 2sub_10000AC58(v0 + 4) = a1;
  id v7 = a1;
  uint64_t v8 = sub_10000AF9C();
  return sub_1000BC15C(v8, v9);
}

uint64_t sub_1000628B0(const void *a1, void *a2)
{
  void v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_10013275C;
  a2;
  uint64_t v5 = (void *)swift_task_alloc(v4);
  void v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100067A84;
  return sub_1000624C0();
}

uint64_t sub_100062910()
{
  return sub_100067ABC((uint64_t)sub_100067A8C);
}

uint64_t sub_100062930(int a1, int a2, int a3, int a4, void *a5)
{
  uint64_t v8 = (void *)sub_10000C254(v5, 48LL);
  sub_10006825C(v8);
  id v9 = v6;
  id v10 = v7;
  uint64_t v11 = sub_10000AF9C();
  return sub_100067D00(v11, v12);
}

uint64_t sub_100062970(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  void v4[2] = a4;
  void v4[3] = _Block_copy(aBlock);
  uint64_t v8 = sub_10000A1A0(0LL, &qword_100132738, &OBJC_CLASS___LNAppNotificationEvent_ptr);
  void v4[4] = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, v8);
  static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  void v4[5] = v9;
  uint64_t v10 = dword_100132744;
  id v11 = a4;
  uint64_t v12 = (void *)swift_task_alloc(v10);
  v4[6] = v12;
  *uint64_t v12 = v4;
  v12[1] = sub_100062A28;
  return swift_task_switch(sub_100067A8C, 0LL, 0LL);
}

uint64_t sub_100062A28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16)
{
  a15 = v18;
  a16 = v19;
  a14 = (void *)v17;
  a14 = *(void **)v17;
  uint64_t v20 = (void *)a14[4];
  uint64_t v21 = (void *)a14[2];
  sub_100067B14(a14[6], &a14);

  sub_10001198C();
  sub_100011958();
  if (v16)
  {
    sub_100067E64();
    sub_100067D10();
    sub_100067C04();
  }

  else
  {
    sub_100067C14();
  }

  sub_1000680F0();
  return sub_100067B00(*(uint64_t (**)(void))(v17 + 8));
}

uint64_t sub_100062A98()
{
  return sub_100067ABC((uint64_t)sub_100062AA4);
}

uint64_t sub_100062AA4()
{
  unint64_t v1 = sub_100067210();
  uint64_t v2 = sub_100038AC8((uint64_t)&type metadata for ApplicationServiceInstance.Errors, v1);
  sub_100067E00(v2, v3);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_100062B08(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  void v4[2] = a4;
  void v4[3] = _Block_copy(aBlock);
  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  void v4[4] = v8;
  if (a2) {
    static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  }
  else {
    uint64_t v9 = 0LL;
  }
  void v4[5] = v9;
  uint64_t v10 = dword_100132724;
  id v11 = a4;
  uint64_t v12 = (void *)swift_task_alloc(v10);
  v4[6] = v12;
  *uint64_t v12 = v4;
  v12[1] = sub_100062BB0;
  return swift_task_switch(sub_100062AA4, 0LL, 0LL);
}

uint64_t sub_100062BB0()
{
  uint64_t v4 = v3;
  sub_100068048();
  uint64_t v5 = (void *)v2[2];
  sub_100067B14(v2[6], v6);

  sub_100011958();
  uint64_t v7 = v2[3];
  swift_bridgeObjectRelease();
  if (v0)
  {
    sub_100067E64();
    sub_10006859C();
    (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0LL, v4);
  }

  else
  {
    (*(void (**)(uint64_t, void, void))(v7 + 16))(v7, v4 & 1, 0LL);
  }

  sub_1000680F0();
  return sub_100067B00(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100062C40()
{
  return sub_100067ABC((uint64_t)sub_100062C4C);
}

uint64_t sub_100062C4C()
{
  unint64_t v1 = sub_100067210();
  uint64_t v2 = sub_100038AC8((uint64_t)&type metadata for ApplicationServiceInstance.Errors, v1);
  sub_100067E00(v2, v3);
  return sub_100067BC8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100062CA4(uint64_t a1, uint64_t a2, const void *a3, void *a4)
{
  void v4[2] = a4;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  void v4[3] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  void v4[4] = v10;
  void v4[5] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v4[6] = _Block_copy(a3);
  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4[7] = v11;
  if (a2) {
    static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  }
  else {
    uint64_t v12 = 0LL;
  }
  void v4[8] = v12;
  uint64_t v13 = dword_10013270C;
  id v14 = a4;
  uint64_t v15 = (void *)swift_task_alloc(v13);
  void v4[9] = v15;
  *uint64_t v15 = v4;
  v15[1] = sub_100062D78;
  return swift_task_switch(sub_100062C4C, 0LL, 0LL);
}

uint64_t sub_100062D78()
{
  uint64_t v3 = v2[8];
  uint64_t v4 = (void (**)(void, void))v2[2];
  sub_100067B14(v2[9], v5);

  sub_100011958();
  sub_10001198C();
  if (isa)
  {
    sub_100067E64();
    sub_10006859C();
    sub_100068488();
  }

  else
  {
    uint64_t v4 = (void (**)(void, void))v2[4];
    uint64_t v3 = v2[5];
    uint64_t v6 = v2[3];
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    v4[1](v3, v6);
    sub_100068420();
  }

  (*(void (**)(void, Class, uint64_t))(v2[6] + 16LL))(v2[6], isa, v3);

  sub_100067E10();
  sub_10004D858();
  return sub_100067B00(*(uint64_t (**)(void))(v1 + 8));
}

void sub_100062EA0()
{
}

uint64_t sub_100062EC4(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, void *a5)
{
  _OWORD v5[2] = a5;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  v5[3] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  void v5[4] = v12;
  void v5[5] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v5[6] = _Block_copy(a4);
  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v5[7] = v13;
  if (a2) {
    static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  }
  else {
    uint64_t v14 = 0LL;
  }
  v5[8] = v14;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v15 = dword_1001326F4;
  id v16 = a5;
  uint64_t v17 = (void *)swift_task_alloc(v15);
  v5[9] = v17;
  void *v17 = v5;
  v17[1] = sub_100062FB4;
  return swift_task_switch(sub_100067A8C, 0LL, 0LL);
}

uint64_t sub_100062FB4()
{
  uint64_t v2 = *v1;
  uint64_t v8 = v2;
  uint64_t v3 = *(void **)(v2 + 56);
  uint64_t v5 = *(void *)(v2 + 32);
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v6 = *(void **)(v2 + 16);
  sub_100067B14(*(void *)(v2 + 72), &v8);
  sub_1000684F4(v4, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));

  sub_100011958();
  sub_10001198C();
  if (v0)
  {
    sub_100067E64();
    sub_100067D10();
    sub_100067C04();
  }

  else
  {
    sub_100067C14();
  }

  _Block_release(*(const void **)(v2 + 48));
  sub_10000AF6C();
  return sub_10000EA08((uint64_t (*)(void))v1[1]);
}

uint64_t sub_100063060(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for Logger(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      _OWORD v5[2] = &unk_1000F6740;
      v5[3] = &unk_1000F6740;
      void v5[4] = (char *)&value witness table for Builtin.NativeObject + 64;
      void v5[5] = &unk_1000F6758;
      v5[6] = (char *)&value witness table for Builtin.Int32 + 64;
      v5[7] = &unk_1000F6770;
      uint64_t result = swift_updateClassMetadata2(a1, 256LL, 8LL, v5, a1 + 80);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_100063124(uint64_t a1)
{
  *(void *)(v2 + 1sub_10000AC58(v0 + 6) = a1;
  *(void *)(v2 + 2sub_10000AC58(v0 + 4) = v1;
  return sub_100067ABC((uint64_t)sub_100063134);
}

uint64_t sub_100063134()
{
  uint64_t v25 = v1;
  uint64_t v26 = v2;
  uint64_t v24 = v0;
  uint64_t v3 = *(void *)(v0 + 24);
  unint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___NSData);
  __int128 v5 = *(_OWORD *)(v3 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken + 16);
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v3 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken);
  *(_OWORD *)(v0 + 48) = v5;
  id v6 = objc_msgSend(v4, "if_dataWithAuditToken:", v0 + 32);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
    unint64_t v10 = v9;

    if (qword_100130218 != -1) {
      swift_once(&qword_100130218, sub_10005DCE0);
    }
    uint64_t v11 = qword_1001354D8;
    uint64_t v12 = swift_task_alloc(48LL);
    int8x16_t v13 = *(int8x16_t *)(v0 + 16);
    *(void *)(v12 + 1sub_10000AC58(v0 + 6) = v8;
    *(void *)(v12 + 2sub_10000AC58(v0 + 4) = v10;
    *(int8x16_t *)(v12 + 32) = vextq_s8(v13, v13, 8uLL);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v11 + 24));
    sub_1000632FC( (uint64_t *)(v11 + 16),  *(void *)(v12 + 16),  *(void *)(v12 + 24),  *(void *)(v12 + 32),  *(void **)(v12 + 40),  &v23);
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 24));
    uint64_t v17 = v23;
    sub_10003EF28();
    sub_10004D884();
    id v18 = [v17 processInstanceIdentifier];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    uint64_t v21 = v20;

    sub_10000A1D8(v8, v10);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v19, v21);
  }

  else
  {
    unint64_t v14 = sub_100067210();
    uint64_t v15 = sub_100038AC8((uint64_t)&type metadata for ApplicationServiceInstance.Errors, v14);
    *id v16 = 1;
    swift_willThrow(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

void sub_1000632FC( uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X8>)
{
  unint64_t v70 = a6;
  uint64_t v64 = a4;
  id v65 = a5;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v72 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100008DB0(&qword_100131BF0);
  __chkstk_darwin(v12);
  uint64_t v66 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  id v16 = (char *)&v55 - v15;
  uint64_t v17 = sub_100008DB0((uint64_t *)&unk_100132690);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v55 - v21;
  uint64_t v69 = a1;
  uint64_t v23 = *a1;
  sub_10000A280(a2, a3);
  sub_100011CF0(a2, a3, v23, (uint64_t)v16);
  uint64_t v67 = a2;
  unint64_t v68 = a3;
  sub_10000A1D8(a2, a3);
  if (sub_100009E6C((uint64_t)v16, 1LL, v17) == 1)
  {
    sub_10001B60C((uint64_t)v16, &qword_100131BF0);
    uint64_t v25 = UUID.init()(v24);
    uint64_t v26 = UUID.uuidString.getter(v25);
    uint64_t v62 = v27;
    uint64_t v63 = v26;
    (*(void (**)(char *, uint64_t))(v72 + 8))(v11, v9);
    uint64_t v28 = (void *)objc_opt_self(&OBJC_CLASS___LNEntitlementsValidator);
    uint64_t v29 = v64;
    uint64_t v30 = *(unsigned int *)(v64 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken);
    uint64_t v31 = *(unsigned int *)(v64 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken + 4);
    uint64_t v32 = *(unsigned int *)(v64 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken + 12);
    uint64_t v33 = *(unsigned int *)(v64 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken + 16);
    uint64_t v34 = *(unsigned int *)(v64 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken + 20);
    uint64_t v35 = *(unsigned int *)(v64 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken + 24);
    uint64_t v36 = *(unsigned int *)(v64 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken + 28);
    uint64_t v60 = *(unsigned int *)(v64 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken + 8);
    uint64_t v61 = v30;
    v71[0] = v30;
    v71[1] = v31;
    v71[2] = v60;
    v71[3] = v32;
    uint64_t v58 = v35;
    uint64_t v59 = v33;
    v71[4] = v33;
    v71[5] = v34;
    v71[6] = v35;
    v71[7] = v36;
    uint64_t v57 = v36;
    id v37 = [v28 bundleIdentifierForAuditToken:v71];
    if (v37)
    {
      uint64_t v38 = v37;
      uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      uint64_t v40 = v39;
    }

    else
    {
      uint64_t v56 = 0LL;
      uint64_t v40 = 0LL;
    }

    objc_allocWithZone(&OBJC_CLASS___LNConnectionListenerEndpoint);
    uint64_t v46 = v61 | (v31 << 32);
    uint64_t v47 = v60 | (v32 << 32);
    uint64_t v48 = v59 | (v34 << 32);
    uint64_t v49 = v58 | (v57 << 32);
    id v50 = v65;
    id v51 = sub_100066258(v63, v62, v56, v40, v50, v46, v47, v48, v49);
    uint64_t v52 = *(int *)(v17 + 48);
    uint64_t v53 = (uint64_t)v66;
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))( v66,  v29 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_identifier,  v9);
    *(void *)(v53 + v52) = v51;
    sub_100009E60(v53, 0LL, 1LL, v17);
    sub_10000A280(v67, v68);
    id v54 = v51;
    sub_10003A868(v53);
    void *v70 = v54;
  }

  else
  {
    uint64_t v41 = *(int *)(v17 + 48);
    uint64_t v42 = v72;
    uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
    v43(v22, v16, v9);
    uint64_t v44 = *(void *)&v16[v41];
    *(void *)&v22[v41] = v44;
    uint64_t v45 = *(int *)(v17 + 48);
    v43(v19, v22, v9);
    *(void *)&v19[v45] = v44;
    void *v70 = v44;
    (*(void (**)(char *, uint64_t))(v42 + 8))(v19, v9);
  }

uint64_t sub_10006368C(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  void v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_1001326D4;
  id v7 = a1;
  a3;
  uint64_t v8 = (void *)swift_task_alloc(v6);
  void v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100063708;
  return sub_100063124((uint64_t)v7);
}

uint64_t sub_100063708()
{
  unint64_t v4 = (void *)v2[2];
  uint64_t v3 = (void *)v2[3];
  sub_100067B14(v2[5], v5);

  if (v0)
  {
    sub_1000680A0();
    sub_10004BDA4();
    sub_100068420();
  }

  else
  {
    sub_1000683E8();
    sub_10000ADB0();
    sub_100068488();
  }

  sub_100067C94();

  sub_100067E10();
  return sub_10000EA08(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100063794(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 1sub_10000AC58(v0 + 6) = a1;
  *(void *)(v2 + 2sub_10000AC58(v0 + 4) = a2;
  return sub_100067ABC((uint64_t)sub_1000637A4);
}

uint64_t sub_1000637A4(uint64_t a1)
{
  if ((sub_1000685E8() & 1) != 0)
  {
    if (qword_100130218 != -1) {
      swift_once(&qword_100130218, sub_10005DCE0);
    }
    uint64_t v3 = *(void *)(v1 + 16);
    uint64_t v2 = *(void *)(v1 + 24);
    unint64_t v4 = (os_unfair_lock_s *)qword_1001354D8;
    uint64_t v5 = swift_task_alloc(32LL);
    *(void *)(v5 + 1sub_10000AC58(v0 + 6) = v3;
    *(void *)(v5 + 2sub_10000AC58(v0 + 4) = v2;
    sub_10000C7FC();
    os_unfair_lock_lock(v4 + 6);
    sub_1000638E8(*(void *)(v5 + 16), *(void *)(v5 + 24), &v11);
    os_unfair_lock_unlock(v4 + 6);
    uint64_t v9 = v11;
    sub_1000389DC();
    sub_10000AFA8();
    return sub_100067D84(v9, *(uint64_t (**)(void))(v1 + 8));
  }

  else
  {
    unint64_t v6 = sub_100067210();
    uint64_t v7 = sub_100038AC8((uint64_t)&type metadata for ApplicationServiceInstance.Errors, v6);
    sub_100067E00(v7, v8);
    return sub_100068024(*(uint64_t (**)(void))(v1 + 8));
  }

uint64_t sub_1000638E8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v35 = sub_100008DB0((uint64_t *)&unk_100132690);
  uint64_t v7 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v34 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v33 = (char *)v30 - v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100063B4C(v11, a1, a2);
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v12 + 16);
  if (v14)
  {
    v30[1] = v3;
    uint64_t v31 = a3;
    id v37 = _swiftEmptyArrayStorage;
    sub_1000452D4();
    uint64_t v15 = *(unsigned __int8 *)(v7 + 80);
    v30[0] = v13;
    uint64_t v16 = v13 + ((v15 + 32) & ~v15);
    uint64_t v32 = *(void *)(v7 + 72);
    uint64_t v18 = (uint64_t)v33;
    uint64_t v17 = v34;
    do
    {
      sub_10006790C(v16, v18, (uint64_t *)&unk_100132690);
      uint64_t v19 = *(int *)(v35 + 48);
      uint64_t v20 = type metadata accessor for UUID(0LL);
      uint64_t v21 = *(void *)(v20 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v17, v18, v20);
      uint64_t v22 = *(void **)(v18 + v19);
      *(void *)&v17[v19] = v22;
      id v23 = objc_msgSend(v22, "processInstanceIdentifier", v30[0]);
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      uint64_t v25 = v24;

      (*(void (**)(char *, uint64_t))(v21 + 8))(v17, v20);
      sub_10001B60C(v18, (uint64_t *)&unk_100132690);
      uint64_t v26 = v37;
      if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
      {
        sub_1000452D4();
        uint64_t v26 = v37;
      }

      unint64_t v27 = v26[2];
      if (v27 >= v26[3] >> 1)
      {
        sub_1000452D4();
        uint64_t v26 = v37;
      }

      void v26[2] = v27 + 1;
      uint64_t v28 = &v26[2 * v27];
      v28[4] = v36;
      v28[5] = v25;
      v16 += v32;
      --v14;
    }

    while (v14);
    uint64_t result = swift_bridgeObjectRelease();
    a3 = v31;
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v26 = _swiftEmptyArrayStorage;
  }

  *a3 = v26;
  return result;
}

void sub_100063B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v36 = a3;
  uint64_t v34 = a2;
  uint64_t v38 = sub_100008DB0((uint64_t *)&unk_100132690);
  uint64_t v41 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v37 = (uint64_t)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v32 - v6;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v32 - v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v32 - v12;
  uint64_t v43 = _swiftEmptyArrayStorage;
  sub_100033164(a1, v42);
  uint64_t v33 = v42[1];
  uint64_t v39 = v42[0];
  int64_t v40 = v42[3];
  unint64_t v14 = v42[4];
  int64_t v35 = (unint64_t)(v42[2] + 64LL) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v40 << 6);
      goto LABEL_20;
    }

    int64_t v17 = v40 + 1;
    if (__OFADD__(v40, 1LL)) {
      break;
    }
    if (v17 >= v35) {
      goto LABEL_35;
    }
    unint64_t v18 = *(void *)(v33 + 8 * v17);
    int64_t v19 = v40 + 1;
    if (!v18)
    {
      int64_t v19 = v40 + 2;
      if (v40 + 2 >= v35) {
        goto LABEL_35;
      }
      unint64_t v18 = *(void *)(v33 + 8 * v19);
      if (!v18)
      {
        int64_t v19 = v40 + 3;
        if (v40 + 3 >= v35) {
          goto LABEL_35;
        }
        unint64_t v18 = *(void *)(v33 + 8 * v19);
        if (!v18)
        {
          int64_t v19 = v40 + 4;
          if (v40 + 4 >= v35) {
            goto LABEL_35;
          }
          unint64_t v18 = *(void *)(v33 + 8 * v19);
          if (!v18)
          {
            int64_t v19 = v40 + 5;
            if (v40 + 5 >= v35) {
              goto LABEL_35;
            }
            unint64_t v18 = *(void *)(v33 + 8 * v19);
            if (!v18)
            {
              int64_t v20 = v40 + 6;
              while (v20 < v35)
              {
                unint64_t v18 = *(void *)(v33 + 8 * v20++);
                if (v18)
                {
                  int64_t v19 = v20 - 1;
                  goto LABEL_19;
                }
              }

uint64_t sub_100063F34(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  void v3[4] = v7;
  uint64_t v9 = dword_1001326BC;
  id v10 = a3;
  uint64_t v11 = (void *)swift_task_alloc(v9);
  void v3[5] = v11;
  *uint64_t v11 = v3;
  v11[1] = sub_100063FBC;
  return sub_100063794(v6, v8);
}

uint64_t sub_100063FBC()
{
  uint64_t v3 = *(void **)(v2 + 16);
  sub_100067B14(*(void *)(v2 + 40), v4);

  sub_100011958();
  if (v0)
  {
    sub_1000680A0();
    sub_10004BDA4();
    sub_100068420();
  }

  else
  {
    Array._bridgeToObjectiveC()();
    sub_10000ADB0();
    sub_100068488();
  }

  sub_100067C94();

  sub_100067E10();
  return sub_100067B00(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100064044(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 1sub_10000AC58(v0 + 6) = a1;
  *(void *)(v2 + 2sub_10000AC58(v0 + 4) = a2;
  return sub_100067ABC((uint64_t)sub_100064054);
}

uint64_t sub_100064054(uint64_t a1)
{
  if ((sub_1000685E8() & 1) != 0)
  {
    if (qword_100130218 != -1) {
      swift_once(&qword_100130218, sub_10005DCE0);
    }
    uint64_t v3 = *(void *)(v1 + 16);
    uint64_t v2 = *(void *)(v1 + 24);
    uint64_t v4 = (os_unfair_lock_s *)qword_1001354D8;
    uint64_t v5 = swift_task_alloc(32LL);
    *(void *)(v5 + 1sub_10000AC58(v0 + 6) = v3;
    *(void *)(v5 + 2sub_10000AC58(v0 + 4) = v2;
    sub_10000C7FC();
    os_unfair_lock_lock(v4 + 6);
    sub_1000641A4(*(void *)(v5 + 16), *(void *)(v5 + 24), &v11);
    os_unfair_lock_unlock(v4 + 6);
    uint64_t v9 = v11;
    sub_1000389DC();
    sub_10000AFA8();
    return (*(uint64_t (**)(uint64_t))(v1 + 8))(v9);
  }

  else
  {
    unint64_t v6 = sub_100067210();
    uint64_t v7 = sub_100038AC8((uint64_t)&type metadata for ApplicationServiceInstance.Errors, v6);
    sub_100067E00(v7, v8);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

uint64_t sub_1000641A4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v7 = sub_100008DB0(&qword_100132680);
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = sub_100008DB0(&qword_100132688);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v13);
  unint64_t v15 = (uint64_t *)((char *)&v32 - v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100059EBC(v16, a1, a2, (uint64_t)v9);
  swift_bridgeObjectRelease();
  if (sub_100009E6C((uint64_t)v9, 1LL, v10) == 1)
  {
    sub_10001B60C((uint64_t)v9, &qword_100132680);
    unint64_t v17 = sub_100067210();
    uint64_t v18 = swift_allocError(&type metadata for ApplicationServiceInstance.Errors, v17, 0LL, 0LL);
    _BYTE *v19 = 3;
    return swift_willThrow(v18);
  }

  else
  {
    uint64_t v21 = *(int *)(v10 + 48);
    uint64_t v22 = (char *)v15 + v21;
    uint64_t v33 = sub_100008DB0((uint64_t *)&unk_100132690);
    uint64_t v36 = v3;
    uint64_t v23 = *(int *)(v33 + 48);
    uint64_t v24 = (char *)v9 + v21;
    int64_t v35 = a3;
    uint64_t v26 = *v9;
    unint64_t v25 = v9[1];
    *unint64_t v15 = v26;
    v15[1] = v25;
    uint64_t v27 = type metadata accessor for UUID(0LL);
    uint64_t v34 = *(void *)(v27 - 8);
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
    v28(v22, v24, v27);
    uint64_t v29 = *(void *)&v24[v23];
    *(void *)&v22[v23] = v29;
    uint64_t v30 = (char *)v12 + *(int *)(v10 + 48);
    *uint64_t v12 = v26;
    v12[1] = v25;
    uint64_t v31 = *(int *)(v33 + 48);
    v28(v30, v22, v27);
    sub_10000A1D8(v26, v25);
    *(void *)&v30[v31] = v29;
    *int64_t v35 = v29;
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v30, v27);
  }

uint64_t sub_1000643E4(void *a1, int a2, void *a3, void *aBlock, uint64_t a5)
{
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = (void *)sub_10000C254(a5, 40LL);
  v9[2] = a3;
  v9[3] = v8;
  void v9[4] = a1;
  id v10 = a3;
  id v11 = a1;
  uint64_t v12 = sub_10000AF9C();
  return sub_100067D00(v12, v13);
}

uint64_t sub_100064440()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100064450()
{
  return sub_10005AC80(*(_DWORD *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10006445C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10006446C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100064474(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  void v3[4] = v7;
  uint64_t v9 = dword_10013266C;
  id v10 = a3;
  id v11 = (void *)swift_task_alloc(v9);
  void v3[5] = v11;
  *id v11 = v3;
  v11[1] = sub_1000644FC;
  return sub_100064044(v6, v8);
}

uint64_t sub_1000644FC()
{
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v6 = sub_100068468();
  uint64_t v7 = *(void **)(v2 + 16);
  sub_100067B14(v6, v8);

  sub_10001198C();
  uint64_t v9 = *(uint64_t (***)(uint64_t, void, uint64_t))(v2 + 24);
  if (v3)
  {
    id v10 = (void *)_convertErrorToNSError(_:)(v3);
    sub_10000AD70();
    sub_1000685A8((uint64_t)v9, v9[2]);

    _Block_release(v9);
  }

  else
  {
    uint64_t v11 = sub_10000AF9C();
    v12(v11);
    _Block_release(v9);
  }

  return sub_100067B00(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10006458C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000645C8 + 4 * byte_1000F66D0[a1]))( 0xD000000000000046LL,  0x80000001000FAC00LL);
}

uint64_t sub_1000645C8()
{
  return 0x74696E6920746F4ELL;
}

uint64_t sub_1000645EC()
{
  return 0x7070757320746F4ELL;
}

unint64_t sub_100064610()
{
  return 0xD000000000000038LL;
}

Swift::Int sub_10006462C(unsigned __int8 a1)
{
  return sub_10001BC48();
}

Swift::Int sub_10006466C()
{
  return sub_10006462C(*v0);
}

uint64_t sub_100064674()
{
  return sub_10006458C(*v0);
}

double sub_10006467C@<D0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v45 = a2;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *a1;
  uint64_t v13 = UUID.init()(v9);
  uint64_t v14 = UUID.uuidString.getter(v13);
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  id v44 = [v12 propertyTitle];
  id v17 = [v12 propertyTitleKey];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  uint64_t v42 = v19;
  uint64_t v43 = v18;

  id v20 = [v12 providerClassName];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  uint64_t v40 = v22;
  uint64_t v41 = v21;

  id v23 = [v12 parameterTypeIdentifier];
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  uint64_t v38 = v25;
  uint64_t v39 = v24;

  id v26 = [v12 value];
  id v27 = [v12 synonyms];
  uint64_t v28 = sub_10000A1A0(0LL, (unint64_t *)&qword_100131250, &OBJC_CLASS___LNStaticDeferredLocalizedString_ptr);
  unint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v28);

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v30 = v45;
  sub_10003AAE8(v29, v14, v16, v45, a3);
  uint64_t v32 = v31;
  swift_bridgeObjectRelease();
  *a4 = v14;
  a4[1] = v16;
  a4[2] = v30;
  a4[3] = a3;
  uint64_t v33 = v43;
  a4[4] = (uint64_t)v44;
  a4[5] = v33;
  uint64_t v34 = v41;
  a4[6] = v42;
  a4[7] = v34;
  uint64_t v35 = v39;
  a4[8] = v40;
  a4[9] = v35;
  a4[10] = v38;
  a4[11] = (uint64_t)v26;
  a4[12] = v32;
  *(void *)&double result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

void sub_1000648AC(uint64_t a1)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100067FBC();
  sub_10006842C();
  __chkstk_darwin(v7);
  sub_100068380();
  uint64_t v8 = sub_10000C254((uint64_t)&unk_100124AF0, 32LL);
  *(void *)(v8 + 1sub_10000AC58(v0 + 6) = v1;
  *(void *)(v8 + 2sub_10000AC58(v0 + 4) = a1;
  double v9 = sub_100068514((uint64_t)sub_100059784);
  sub_10001C1BC();
  uint64_t v10 = swift_retain();
  static DispatchQoS.unspecified.getter(v10);
  sub_100067940( (unint64_t *)&qword_100132630,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100008DB0((uint64_t *)&unk_100130550);
  sub_1000674D0((unint64_t *)&qword_100132640, (uint64_t *)&unk_100130550);
  sub_100067ED8(v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v3, v2, v9);
  _Block_release(v9);
  sub_1000683DC(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  sub_100068370();
  swift_release();
  sub_10000AD58();
}

void sub_100064A28(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v13 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100067FBC();
  sub_10006842C();
  __chkstk_darwin(v8);
  sub_100068380();
  double v9 = (void *)sub_10000C254((uint64_t)&unk_100124B68, 40LL);
  v9[2] = v2;
  v9[3] = a1;
  void v9[4] = a2;
  uint64_t v10 = sub_100068514((uint64_t)sub_100059784);
  sub_1000280C8();
  sub_10001C1BC();
  uint64_t v11 = swift_retain();
  static DispatchQoS.unspecified.getter(v11);
  sub_100067940( (unint64_t *)&qword_100132630,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100008DB0((uint64_t *)&unk_100130550);
  sub_1000674D0((unint64_t *)&qword_100132640, (uint64_t *)&unk_100130550);
  sub_100067ED8(v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v4, v3, v10);
  _Block_release(v10);
  sub_1000683DC(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
  sub_100068370();
  swift_release();
  sub_10000AD58();
}

uint64_t sub_100064BB8(unint64_t a1, uint64_t a2)
{
  uint64_t v58 = type metadata accessor for DispatchWorkItemFlags(0LL);
  double v4 = __chkstk_darwin(v58);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchTimeInterval(0LL, v4);
  uint64_t v57 = *(void *)(v7 - 8);
  double v8 = __chkstk_darwin(v7);
  uint64_t v56 = (uint64_t *)((char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = type metadata accessor for DispatchTime(0LL, v8);
  uint64_t v55 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v54 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v59 = (char *)&v49 - v13;
  uint64_t v14 = (char *)(a1 + qword_100135CC8);
  swift_bridgeObjectRetain();
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v52 = v10;
    uint64_t v53 = v14;
    uint64_t v50 = v7;
    id v51 = v6;
    uint64_t v18 = swift_slowAlloc(22LL, -1LL);
    uint64_t v19 = (void *)swift_slowAlloc(64LL, -1LL);
    uint64_t v60 = v19;
    *(_DWORD *)uint64_t v18 = 136315394;
    if (qword_100130158 != -1) {
      swift_once(&qword_100130158, sub_100038EB8);
    }
    uint64_t v20 = qword_100135350;
    unint64_t v21 = *(void *)algn_100135358;
    swift_bridgeObjectRetain();
    uint64_t aBlock = sub_10000DE60(v20, v21, (uint64_t *)&v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v62, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    uint64_t aBlock = 0x676E697461647075LL;
    v62[0] = 0xEA0000000000203ALL;
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = Set.description.getter(v22, &type metadata for String, &protocol witness table for String);
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t aBlock = sub_10000DE60(aBlock, v62[0], (uint64_t *)&v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v62, v18 + 14, v18 + 22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Queuing notification for %s %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v19, 2LL);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);

    uint64_t v6 = v51;
    uint64_t v10 = v52;
    uint64_t v7 = v50;
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v24 = *(void *)a1;
  uint64_t v53 = *(char **)(*(void *)a1 + 136LL);
  if (*(void *)&v53[a1])
  {
    uint64_t v25 = swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()(v25);
    swift_release();
    uint64_t v24 = *(void *)a1;
  }

  uint64_t v26 = *(void *)(v24 + 128);
  uint64_t v27 = *(void *)(a1 + v26);
  if (v27)
  {
    swift_bridgeObjectRetain();
    unint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v50 = v7;
      id v51 = v6;
      uint64_t v52 = v10;
      uint64_t v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v49 = swift_slowAlloc(32LL, -1LL);
      uint64_t aBlock = v49;
      *(_DWORD *)uint64_t v31 = 136315138;
      if (qword_100130158 != -1) {
        swift_once(&qword_100130158, sub_100038EB8);
      }
      uint64_t v33 = qword_100135350;
      unint64_t v32 = *(void *)algn_100135358;
      swift_bridgeObjectRetain();
      uint64_t v60 = (void *)sub_10000DE60(v33, v32, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &aBlock, v31 + 4, v31 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Existing notification for %s, merging", v31, 0xCu);
      uint64_t v34 = v49;
      swift_arrayDestroy(v49, 1LL);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);

      uint64_t v6 = v51;
      uint64_t v10 = v52;
      uint64_t v7 = v50;
    }

    else
    {
    }

    swift_bridgeObjectRetain();
    *(void *)(a1 + v2sub_10000AC58(v0 + 6) = sub_10005A3C8(v27, a2);
  }

  else
  {
    *(void *)(a1 + v2sub_10000AC58(v0 + 6) = a2;
    swift_bridgeObjectRetain();
  }

  uint64_t v35 = swift_bridgeObjectRelease();
  uint64_t v36 = v54;
  static DispatchTime.now()(v35);
  uint64_t v38 = v56;
  uint64_t v37 = v57;
  *uint64_t v56 = *(void *)(a1 + 16);
  (*(void (**)(void *, void, uint64_t))(v37 + 104))( v38,  enum case for DispatchTimeInterval.milliseconds(_:),  v7);
  uint64_t v39 = v59;
  + infix(_:_:)(v36, v38);
  (*(void (**)(void *, uint64_t))(v37 + 8))(v38, v7);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v55 + 8);
  v40(v36, v10);
  void v62[3] = (unint64_t)sub_1000670D4;
  v62[4] = a1;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  v62[0] = 1107296256LL;
  v62[1] = (unint64_t)sub_10000D934;
  _OWORD v62[2] = (unint64_t)&unk_100124B30;
  uint64_t v41 = _Block_copy(&aBlock);
  uint64_t v60 = _swiftEmptyArrayStorage;
  sub_100067940( (unint64_t *)&qword_100132630,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v43 = v42;
  swift_retain();
  uint64_t v44 = sub_100008DB0((uint64_t *)&unk_100130550);
  sub_1000674D0((unint64_t *)&qword_100132640, (uint64_t *)&unk_100130550);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v60, v44, v45, v58, v43);
  uint64_t v46 = type metadata accessor for DispatchWorkItem(0LL);
  swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
  uint64_t v47 = DispatchWorkItem.init(flags:block:)(v6, v41);
  swift_release();
  *(void *)&v53[a1] = v47;
  swift_retain();
  swift_release();
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v39, v47);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v40)(v39, v10);
}

uint64_t sub_100065244(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v74 = type metadata accessor for DispatchWorkItemFlags(0LL);
  double v6 = __chkstk_darwin(v74);
  double v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchTimeInterval(0LL, v6);
  uint64_t v73 = *(void *)(v9 - 8);
  double v10 = __chkstk_darwin(v9);
  uint64_t v72 = (uint64_t *)((char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = type metadata accessor for DispatchTime(0LL, v10);
  uint64_t v71 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v70 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v75 = (char *)&v64 - v15;
  uint64_t v16 = (char *)a1 + qword_100135CC8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v68 = (uint64_t)v16;
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v76 = a2;
  uint64_t v77 = a3;
  if (v20)
  {
    uint64_t v65 = v9;
    uint64_t v66 = v8;
    uint64_t v67 = v12;
    uint64_t v21 = swift_slowAlloc(22LL, -1LL);
    uint64_t v22 = swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v22;
    *(_DWORD *)uint64_t v21 = 136315394;
    if (qword_100130298 != -1) {
      swift_once(&qword_100130298, sub_100076368);
    }
    uint64_t v24 = qword_100135638;
    Swift::String v23 = qword_100135640;
    swift_bridgeObjectRetain();
    unint64_t v78 = (void *)sub_10000DE60(v24, (unint64_t)v23, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, aBlock, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2080;
    uint64_t v25 = sub_100076758();
    unint64_t v78 = (void *)sub_10000DE60(v25, v26, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, aBlock, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Queuing notification for %s %s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy(v22, 2LL);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);

    double v8 = v66;
    uint64_t v27 = v67;
    uint64_t v9 = v65;
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v27 = v12;
  }

  uint64_t v28 = *a1;
  uint64_t v69 = *(void *)(*a1 + 136LL);
  if (*(void *)((char *)a1 + v69))
  {
    uint64_t v29 = swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()(v29);
    swift_release();
    uint64_t v28 = *a1;
  }

  os_log_type_t v30 = (void *)((char *)a1 + *(void *)(v28 + 128));
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  if (*v30)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v65 = v9;
      uint64_t v66 = v8;
      uint64_t v67 = v27;
      uint64_t v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v68 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v68;
      *(_DWORD *)uint64_t v36 = 136315138;
      if (qword_100130298 != -1) {
        swift_once(&qword_100130298, sub_100076368);
      }
      uint64_t v38 = qword_100135638;
      uint64_t v37 = qword_100135640;
      swift_bridgeObjectRetain();
      unint64_t v78 = (void *)sub_10000DE60(v38, (unint64_t)v37, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, aBlock, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Existing notification for %s, merging", v36, 0xCu);
      uint64_t v39 = v68;
      swift_arrayDestroy(v68, 1LL);
      swift_slowDealloc(v39, -1LL, -1LL);
      swift_slowDealloc(v36, -1LL, -1LL);

      double v8 = v66;
      uint64_t v27 = v67;
      uint64_t v9 = v65;
    }

    else
    {
    }

    swift_bridgeObjectRetain();
    uint64_t v43 = sub_100090404(v77, v32);
    uint64_t v44 = v76;
    swift_bridgeObjectRetain();
    uint64_t v46 = sub_10005A3C8(v45, (uint64_t)v43);
    swift_bridgeObjectRetain();
    uint64_t v47 = sub_100090404(v44, v31);
    swift_bridgeObjectRetain();
    uint64_t v49 = sub_10005A3C8(v48, (uint64_t)v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v41 = *v30;
    uint64_t v42 = v30[1];
    *os_log_type_t v30 = v46;
    v30[1] = v49;
  }

  else
  {
    uint64_t v40 = v77;
    *os_log_type_t v30 = v76;
    v30[1] = v40;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v41 = 0LL;
    uint64_t v42 = v31;
  }

  uint64_t v50 = sub_10006716C(v41, v42);
  id v51 = v70;
  static DispatchTime.now()(v50);
  uint64_t v53 = v72;
  uint64_t v52 = v73;
  *uint64_t v72 = a1[2];
  (*(void (**)(void *, void, uint64_t))(v52 + 104))( v53,  enum case for DispatchTimeInterval.milliseconds(_:),  v9);
  id v54 = v75;
  + infix(_:_:)(v51, v53);
  (*(void (**)(void *, uint64_t))(v52 + 8))(v53, v9);
  uint64_t v55 = *(void (**)(char *, uint64_t))(v71 + 8);
  v55(v51, v27);
  aBlock[4] = (uint64_t)sub_100067198;
  uint64_t aBlock[5] = (uint64_t)a1;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_10000D934;
  aBlock[3] = (uint64_t)&unk_100124BA8;
  uint64_t v56 = _Block_copy(aBlock);
  unint64_t v78 = _swiftEmptyArrayStorage;
  sub_100067940( (unint64_t *)&qword_100132630,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v58 = v57;
  swift_retain();
  uint64_t v59 = sub_100008DB0((uint64_t *)&unk_100130550);
  sub_1000674D0((unint64_t *)&qword_100132640, (uint64_t *)&unk_100130550);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v59, v60, v74, v58);
  uint64_t v61 = type metadata accessor for DispatchWorkItem(0LL);
  swift_allocObject(v61, *(unsigned int *)(v61 + 48), *(unsigned __int16 *)(v61 + 52));
  uint64_t v62 = DispatchWorkItem.init(flags:block:)(v8, v56);
  swift_release();
  *(void *)((char *)a1 + v69) = v62;
  swift_retain();
  swift_release();
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v54, v62);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v55)(v54, v27);
}

void sub_100065914()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Notification(0LL);
  uint64_t v43 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  double v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = __chkstk_darwin(v5);
  uint64_t v9 = (void **)((char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  double v10 = *(void **)((char *)v1 + qword_100135CD0);
  void *v9 = v10;
  (*(void (**)(void *, void, uint64_t, double))(v6 + 104))( v9,  enum case for DispatchPredicate.onQueue(_:),  v5,  v7);
  id v11 = v10;
  LOBYTE(v1sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) != 0)
  {
    uint64_t v46 = 0LL;
    uint64_t v12 = *(void *)(*v1 + 128LL);
    if (*(void *)((char *)v1 + v12))
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = sub_100038EE4(v13);
      swift_bridgeObjectRelease();
      uint64_t v15 = v14[2];
      if (v15)
      {
        uint64_t v36 = v12;
        uint64_t v37 = v1;
        uint64_t v16 = (char *)v14
            + ((*(unsigned __int8 *)(v43 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
        uint64_t v17 = (char *)v1 + qword_100135CC8;
        uint64_t v18 = (void *)v1[3];
        os_log_type_t v19 = *(uint64_t (**)(char *, char *, uint64_t))(v43 + 16);
        uint64_t v41 = *(void *)(v43 + 72);
        uint64_t v42 = v19;
        os_log_type_t v35 = v14;
        __n128 v20 = swift_bridgeObjectRetain();
        v20.n128_u64[0] = 136315138LL;
        __n128 v39 = v20;
        uint64_t v38 = (char *)&type metadata for Any + 8;
        uint64_t v40 = v18;
        while (1)
        {
          uint64_t v21 = v42(v4, v16, v2);
          uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
          os_log_type_t v23 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v22, v23))
          {
            uint64_t v24 = swift_slowAlloc(12LL, -1LL);
            uint64_t v25 = v17;
            uint64_t v26 = swift_slowAlloc(32LL, -1LL);
            v45[0] = v26;
            *(_DWORD *)uint64_t v24 = v39.n128_u32[0];
            uint64_t v27 = Notification.description.getter();
            *(void *)(v24 + sub_10000AC58(v0 + 4) = sub_10000DE60(v27, v28, v45);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v43 + 8))(v4, v2);
            _os_log_impl((void *)&_mh_execute_header, v22, v23, "Sending notification %s", (uint8_t *)v24, 0xCu);
            swift_arrayDestroy(v26, 1LL);
            uint64_t v29 = v26;
            uint64_t v17 = v25;
            uint64_t v18 = v40;
            swift_slowDealloc(v29, -1LL, -1LL);
            swift_slowDealloc(v24, -1LL, -1LL);
          }

          else
          {

            (*(void (**)(char *, uint64_t))(v43 + 8))(v4, v2);
          }

          Class isa = Notification._bridgeToObjectiveC()().super.isa;
          [v18 postNotification:isa];

          if (__OFADD__(v46, 1LL)) {
            break;
          }
          ++v46;
          v16 += v41;
          if (!--v15)
          {
            uint64_t v31 = swift_bridgeObjectRelease_n(v35, 2LL);
            uint64_t v12 = v36;
            uint64_t v1 = v37;
            goto LABEL_12;
          }
        }

        __break(1u);
        goto LABEL_17;
      }

      uint64_t v31 = swift_bridgeObjectRelease();
LABEL_12:
      uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
      os_log_type_t v33 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)uint64_t v34 = 134217984;
        swift_beginAccess(&v46, v45, 0LL, 0LL);
        uint64_t v44 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45, v34 + 4, v34 + 12);
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Sent %ld notifications", v34, 0xCu);
        swift_slowDealloc(v34, -1LL, -1LL);
      }
    }

    *(void *)((char *)v1 + v12) = 0LL;
    swift_bridgeObjectRelease();
    *(void *)((char *)v1 + *(void *)(*v1 + 136LL)) = 0LL;
    swift_release();
    return;
  }

void sub_100065D18()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Notification(0LL);
  uint64_t v47 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  double v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = __chkstk_darwin(v5);
  uint64_t v9 = (void **)((char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  double v10 = *(void **)((char *)v1 + qword_100135CD0);
  void *v9 = v10;
  (*(void (**)(void *, void, uint64_t, double))(v6 + 104))( v9,  enum case for DispatchPredicate.onQueue(_:),  v5,  v7);
  id v11 = v10;
  LOBYTE(v1sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) != 0)
  {
    uint64_t v50 = 0LL;
    uint64_t v12 = *(void *)(*v1 + 128LL);
    uint64_t v13 = (void *)((char *)v1 + v12);
    uint64_t v14 = *(void *)((char *)v1 + v12);
    if (v14)
    {
      uint64_t v15 = v13[1];
      sub_10006719C(*(void *)((char *)v1 + v12), v15);
      uint64_t v16 = sub_100076394(v14, v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v17 = v16[2];
      if (v17)
      {
        uint64_t v40 = v13;
        uint64_t v41 = v1;
        uint64_t v18 = (char *)v16
            + ((*(unsigned __int8 *)(v47 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80));
        os_log_type_t v19 = (char *)v1 + qword_100135CC8;
        __n128 v20 = (void *)v1[3];
        uint64_t v21 = *(uint64_t (**)(char *, char *, uint64_t))(v47 + 16);
        uint64_t v45 = *(void *)(v47 + 72);
        uint64_t v46 = v21;
        __n128 v39 = v16;
        __n128 v22 = swift_bridgeObjectRetain();
        v22.n128_u64[0] = 136315138LL;
        __n128 v43 = v22;
        uint64_t v42 = (char *)&type metadata for Any + 8;
        uint64_t v44 = v20;
        while (1)
        {
          uint64_t v23 = v46(v4, v18, v2);
          uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
          os_log_type_t v25 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v24, v25))
          {
            uint64_t v26 = swift_slowAlloc(12LL, -1LL);
            uint64_t v27 = v19;
            uint64_t v28 = swift_slowAlloc(32LL, -1LL);
            v49[0] = v28;
            *(_DWORD *)uint64_t v26 = v43.n128_u32[0];
            uint64_t v29 = Notification.description.getter();
            *(void *)(v26 + sub_10000AC58(v0 + 4) = sub_10000DE60(v29, v30, v49);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v47 + 8))(v4, v2);
            _os_log_impl((void *)&_mh_execute_header, v24, v25, "Sending notification %s", (uint8_t *)v26, 0xCu);
            swift_arrayDestroy(v28, 1LL);
            uint64_t v31 = v28;
            os_log_type_t v19 = v27;
            __n128 v20 = v44;
            swift_slowDealloc(v31, -1LL, -1LL);
            swift_slowDealloc(v26, -1LL, -1LL);
          }

          else
          {

            (*(void (**)(char *, uint64_t))(v47 + 8))(v4, v2);
          }

          Class isa = Notification._bridgeToObjectiveC()().super.isa;
          [v20 postNotification:isa];

          if (__OFADD__(v50, 1LL)) {
            break;
          }
          ++v50;
          v18 += v45;
          if (!--v17)
          {
            uint64_t v33 = swift_bridgeObjectRelease_n(v39, 2LL);
            uint64_t v13 = v40;
            uint64_t v1 = v41;
            goto LABEL_12;
          }
        }

        __break(1u);
        goto LABEL_17;
      }

      uint64_t v33 = swift_bridgeObjectRelease();
LABEL_12:
      uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
      os_log_type_t v35 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)uint64_t v36 = 134217984;
        swift_beginAccess(&v50, v49, 0LL, 0LL);
        uint64_t v48 = v50;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v36 + 4, v36 + 12);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Sent %ld notifications", v36, 0xCu);
        swift_slowDealloc(v36, -1LL, -1LL);
      }
    }

    uint64_t v37 = *v13;
    uint64_t v38 = v13[1];
    *uint64_t v13 = 0LL;
    v13[1] = 0LL;
    sub_10006716C(v37, v38);
    *(void *)((char *)v1 + *(void *)(*v1 + 136LL)) = 0LL;
    swift_release();
    return;
  }

id sub_100066138(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_100066188(a1, a2, a3, (SEL *)&selRef_initWithBundleIdentifier_allowPlaceholder_error_);
}

id sub_100066188(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = 0LL;
  id v8 = objc_msgSend(v4, *a4, v7, a3 & 1, &v12);

  id v9 = v12;
  if (!v8)
  {
    sub_100068570();

    swift_willThrow(v10);
  }

  return v8;
}

id sub_100066258( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (a4)
  {
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a4);
  }

  else
  {
    NSString v17 = 0LL;
  }

  v20[0] = a6;
  v20[1] = a7;
  v20[2] = a8;
  void v20[3] = a9;
  id v18 = [v9 initWithProcessInstanceIdentifier:v16 bundleIdentifier:v17 xpcListenerEndpoint:a5 auditToken:v20];

  return v18;
}

void sub_100066344(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a2);
  unint64_t v4 = v3;
  sub_1000685C8(v2);
  Data.hash(into:)(v5, v2, v4);
  sub_10001BC48();
  sub_10000A1D8(v2, v4);
  sub_10006826C();
}

void sub_1000663A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v4 = v3;
  sub_1000685C8(v2);
  String.hash(into:)(v5, v2, v4);
  sub_10001BC48();
  sub_100011958();
  sub_10006826C();
}

void sub_1000663F4(uint64_t a1)
{
  if (!*(void *)(a1 + 16)
    || (sub_100008DB0((uint64_t *)&unk_100130DF0), uint64_t v2 = sub_1000683B8(), v3 = v2, (v27 = *(void *)(a1 + 16)) == 0))
  {
LABEL_23:
    sub_10001198C();
    sub_10001BD14();
    return;
  }

  unint64_t v4 = 0LL;
  uint64_t v5 = v2 + 56;
  while (v4 < *(void *)(a1 + 16))
  {
    uint64_t v6 = (uint64_t *)(a1 + 32 + 16 * v4);
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    Hasher.init(_seed:)(v28, *(void *)(v3 + 40));
    swift_bridgeObjectRetain();
    String.hash(into:)(v28, v8, v7);
    Swift::Int v9 = Hasher._finalize()();
    uint64_t v10 = -1LL << *(_BYTE *)(v3 + 32);
    unint64_t v11 = v9 & ~v10;
    unint64_t v12 = v11 >> 6;
    uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
    uint64_t v14 = 1LL << v11;
    if (((1LL << v11) & v13) != 0)
    {
      uint64_t v15 = *(void *)(v3 + 48);
      NSString v16 = (uint64_t *)(v15 + 16 * v11);
      uint64_t v17 = v16[1];
      BOOL v18 = *v16 == v8 && v17 == v7;
      if (v18 || (sub_1000681A8(*v16, v17) & 1) != 0)
      {
LABEL_11:
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }

      uint64_t v19 = ~v10;
      while (1)
      {
        unint64_t v11 = (v11 + 1) & v19;
        unint64_t v12 = v11 >> 6;
        uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
        uint64_t v14 = 1LL << v11;
        if ((v13 & (1LL << v11)) == 0) {
          break;
        }
        __n128 v20 = (uint64_t *)(v15 + 16 * v11);
        uint64_t v21 = v20[1];
        BOOL v22 = *v20 == v8 && v21 == v7;
        if (v22 || (sub_1000681A8(*v20, v21) & 1) != 0) {
          goto LABEL_11;
        }
      }
    }

    *(void *)(v5 + 8 * v12) = v14 | v13;
    uint64_t v23 = (void *)(*(void *)(v3 + 48) + 16 * v11);
    void *v23 = v8;
    v23[1] = v7;
    uint64_t v24 = *(void *)(v3 + 16);
    BOOL v25 = __OFADD__(v24, 1LL);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_25;
    }
    *(void *)(v3 + 1sub_10000AC58(v0 + 6) = v26;
LABEL_22:
    if (++v4 == v27) {
      goto LABEL_23;
    }
  }

  __break(1u);
LABEL_25:
  __break(1u);
}

void sub_100066580(uint64_t a1)
{
  uint64_t v1 = a1;
  if (!*(void *)(a1 + 16)
    || (sub_100008DB0(&qword_100132650), uint64_t v2 = sub_1000683B8(), (v29 = *(void *)(v1 + 16)) == 0))
  {
LABEL_24:
    sub_10001198C();
    sub_10001BD14();
    return;
  }

  unint64_t v3 = 0LL;
  uint64_t v27 = v1;
  uint64_t v28 = v1 + 32;
  while (v3 < *(void *)(v1 + 16))
  {
    unint64_t v4 = *(void **)(v28 + 8 * v3);
    uint64_t v5 = *(void *)(v2 + 40);
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v8 = v7;
    Hasher.init(_seed:)(v30, v5);
    id v9 = v4;
    String.hash(into:)(v30, v6, v8);
    Swift::Int v10 = Hasher._finalize()();
    sub_10001BEC0();
    uint64_t v11 = -1LL << *(_BYTE *)(v2 + 32);
    uint64_t v12 = v10 & ~v11;
    sub_100068608();
    if ((v15 & v14) != 0)
    {
      sub_1000683FC();
      uint64_t v16 = sub_100068328();
      if (v8 == v16 && v10 == v17)
      {
LABEL_21:
        sub_10001191C(v10);
LABEL_22:

        goto LABEL_23;
      }

      uint64_t v19 = sub_100067FA0(v16, v17);
      sub_10000ADB0();
      sub_10000AEE8();
      if ((v19 & 1) != 0) {
        goto LABEL_22;
      }
      uint64_t v20 = ~v11;
      while (1)
      {
        uint64_t v12 = (v12 + 1) & v20;
        sub_100068608();
        if ((v14 & v15) == 0) {
          break;
        }
        sub_1000683FC();
        uint64_t v21 = sub_100068328();
        if (v19 == v21 && v10 == v22) {
          goto LABEL_21;
        }
        uint64_t v19 = sub_100067FA0(v21, v22);
        sub_10000ADB0();
        sub_10000AEE8();
        if ((v19 & 1) != 0) {
          goto LABEL_22;
        }
      }
    }

    *(void *)(v2 + 56 + 8 * v13) = v15 | v14;
    *(void *)(*(void *)(v2 + 48) + 8 * v12) = v9;
    uint64_t v24 = *(void *)(v2 + 16);
    BOOL v25 = __OFADD__(v24, 1LL);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_26;
    }
    *(void *)(v2 + 1sub_10000AC58(v0 + 6) = v26;
LABEL_23:
    ++v3;
    uint64_t v1 = v27;
    if (v3 == v29) {
      goto LABEL_24;
    }
  }

  __break(1u);
LABEL_26:
  __break(1u);
}

unint64_t *sub_100066728(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = (unint64_t *)isStackAllocationSafe;
  char v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  unsigned int v4 = v3 & 0x3F;
  unint64_t v5 = (1LL << v3) + 63;
  uint64_t v6 = v5 >> 6;
  uint64_t v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v8 = (unint64_t *)((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0LL));
    sub_100017CAC(0LL, v6, v8);
    id v9 = sub_100066884(v8, v6, (uint64_t)v2);
    if (v1) {
      swift_willThrow(v9);
    }
    else {
      return v9;
    }
  }

  else
  {
    Swift::Int v10 = (unint64_t *)swift_slowAlloc(v7, -1LL);
    sub_100017CAC(0LL, v6, v10);
    uint64_t v2 = sub_100066884(v10, v6, (uint64_t)v2);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  return v2;
}

unint64_t *sub_100066884(unint64_t *result, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = result;
  uint64_t v5 = 0LL;
  int64_t v6 = 0LL;
  uint64_t v7 = a3 + 64;
  uint64_t v8 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_20;
    }

    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v14 >= v11) {
      return (unint64_t *)sub_1000BFCF0(v4, a2, v5, a3);
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        return (unint64_t *)sub_1000BFCF0(v4, a2, v5, a3);
      }
      unint64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          return (unint64_t *)sub_1000BFCF0(v4, a2, v5, a3);
        }
        unint64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15) {
          break;
        }
      }
    }

uint64_t sub_100066A14(void *a1)
{
  id v1 = [a1 systemImageName];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_100066A74(void *a1)
{
  id v2 = [a1 bundleIdentifier];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_100066AE0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v36 = a2;
  uint64_t v5 = sub_100008DB0(&qword_100131780);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v37[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  int64_t v11 = (char *)&v37[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  int64_t v14 = (char *)&v37[-1] - v13;
  v37[3] = &unk_1001231E8;
  v37[4] = &off_100123208;
  uint64_t v15 = swift_allocObject(&unk_100124AA0, 56LL, 7LL);
  v37[0] = v15;
  uint64_t v16 = *a1;
  __int128 v17 = *(_OWORD *)(a1 + 1);
  __int128 v38 = *(_OWORD *)(a1 + 3);
  __int128 v39 = v17;
  __int128 v18 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v15 + 1sub_10000AC58(v0 + 6) = *(_OWORD *)a1;
  *(_OWORD *)(v15 + 32) = v18;
  *(void *)(v15 + 48) = a1[4];
  uint64_t v19 = sub_100008D74(v37, (uint64_t)&unk_1001231E8);
  uint64_t v20 = v19[3];
  uint64_t v21 = v19[4];
  if (v20 == 0xD000000000000019LL && v21 == 0x80000001000F8C10LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019LL, 0x80000001000F8C10LL, v20, v21, 0LL) & 1) != 0)
  {
    swift_unknownObjectRetain(v16);
    sub_10001B4C8((uint64_t)&v39);
    sub_10001B4C8((uint64_t)&v38);
    uint64_t v22 = qword_100130200;
    swift_retain();
    if (v22 != -1) {
      swift_once(&qword_100130200, sub_10005A620);
    }
    uint64_t v23 = sub_100008D98(v8, (uint64_t)qword_1001354A8);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, v23, v8);
    uint64_t v24 = swift_release();
    BOOL v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "Received Siri Vocabulary database migration darwin notification",  v27,  2u);
      int64_t v11 = v14;
LABEL_16:
      swift_slowDealloc(v27, -1LL, -1LL);
      goto LABEL_17;
    }

    int64_t v11 = v14;
  }

  else
  {
    if ((v20 != 0xD000000000000029LL || v21 != 0x80000001000F8C30LL)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000029LL, 0x80000001000F8C30LL, v20, v21, 0LL) & 1) == 0)
    {
      swift_unknownObjectRetain(v16);
      sub_10001B4C8((uint64_t)&v39);
      sub_10001B4C8((uint64_t)&v38);
      return sub_10000AC58(v37);
    }

    swift_unknownObjectRetain(v16);
    sub_10001B4C8((uint64_t)&v39);
    sub_10001B4C8((uint64_t)&v38);
    uint64_t v28 = qword_100130200;
    swift_retain();
    if (v28 != -1) {
      swift_once(&qword_100130200, sub_10005A620);
    }
    uint64_t v29 = sub_100008D98(v8, (uint64_t)qword_1001354A8);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v29, v8);
    uint64_t v30 = swift_release();
    BOOL v25 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v31))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v31, "Received Siri language change darwin notification", v27, 2u);
      goto LABEL_16;
    }
  }

uint64_t sub_100066EFC()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100066F30()
{
  uint64_t v1 = sub_100068398();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100066F5C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1001325A4);
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100066FCC;
  sub_1000680A8();
  return sub_10005B068(v2, v3, v4, v5, v6);
}

uint64_t sub_100066FCC()
{
  uint64_t v3 = *v0;
  uint64_t v1 = *v0;
  sub_10004BEB8(*(void *)(v3 + 16), &v3);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100067010(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LSLinkBundleRecord(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10006704C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LSLinkBundleRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100067094(unint64_t a1, uint64_t *a2)
{
  return sub_100064BB8(a1, *a2);
}

uint64_t sub_10006709C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000670C8()
{
  return sub_100067094(*(void *)(v0 + 16), (uint64_t *)(v0 + 24));
}

id sub_1000670D8(id result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_1000670F0(result, a2 & 1);
  }
  return result;
}

id sub_1000670F0(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    return (id)swift_errorRetain(a1);
  }
  else {
    return a1;
  }
}

void sub_1000670FC(void *a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    sub_100067114(a1, a2 & 1);
  }
}

void sub_100067114(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    swift_errorRelease(a1);
  }
  else {
}
  }

uint64_t sub_100067120(void *a1, uint64_t *a2)
{
  return sub_100065244(a1, *a2, a2[1]);
}

uint64_t sub_10006712C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100067160()
{
  return sub_100067120(*(void **)(v0 + 16), (uint64_t *)(v0 + 24));
}

uint64_t sub_10006716C(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a2);
  }

  return result;
}

uint64_t sub_10006719C(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    return swift_bridgeObjectRetain(a2);
  }

  return result;
}

uint64_t sub_1000671CC()
{
  uint64_t v1 = (void *)sub_1000685D4();
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  uint64_t v2 = sub_100067D64(v1, (uint64_t)sub_100067A90);
  return sub_10000E930(v2, v3, v4, v5);
}

unint64_t sub_100067210()
{
  unint64_t result = qword_100132678;
  if (!qword_100132678)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F68A0, &type metadata for ApplicationServiceInstance.Errors);
    atomic_store(result, (unint64_t *)&qword_100132678);
  }

  return result;
}

uint64_t sub_100067250()
{
  uint64_t v1 = (void *)sub_1000685D4();
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  uint64_t v2 = sub_100067D64(v1, (uint64_t)sub_100067A90);
  return sub_10000E930(v2, v3, v4, v5);
}

uint64_t sub_100067298()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000672C8()
{
  uint64_t v1 = (void *)sub_1000685D4();
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  uint64_t v2 = sub_100067D64(v1, (uint64_t)sub_100067A90);
  return sub_10000E930(v2, v3, v4, v5);
}

uint64_t sub_100067310()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1001326E4);
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  uint64_t v2 = sub_100067EB0(v1, (uint64_t)sub_100067A90);
  return sub_100067E9C(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_100067360()
{
  uint64_t v1 = (void *)sub_100067DDC();
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  uint64_t v2 = sub_100067ADC(v1, (uint64_t)sub_100067A90);
  return sub_100067AC8(v2, v3, v4, v5, v6);
}

uint64_t sub_1000673A4()
{
  uint64_t v1 = (void *)sub_100067DDC();
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  uint64_t v2 = sub_100067ADC(v1, (uint64_t)sub_100067A90);
  return sub_100067AC8(v2, v3, v4, v5, v6);
}

uint64_t sub_1000673E8()
{
  uint64_t v1 = (void *)sub_100067DDC();
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  uint64_t v2 = sub_100067ADC(v1, (uint64_t)sub_100067A90);
  return sub_100067AC8(v2, v3, v4, v5, v6);
}

uint64_t sub_10006742C()
{
  uint64_t v1 = (void *)sub_100068148();
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  uint64_t v2 = sub_100067BE8(v1, (uint64_t)sub_100067A90);
  return sub_10000E920(v2, v3, v4);
}

void sub_10006746C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_100027F0C(a1, a2, a3);
  sub_1000680CC(v3);
  sub_10000ADA8();
}

uint64_t sub_100067490()
{
  uint64_t v1 = (void *)sub_100067DDC();
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  uint64_t v2 = sub_100067ADC(v1, (uint64_t)sub_100067A90);
  return sub_100067AC8(v2, v3, v4, v5, v6);
}

void sub_1000674D0(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_100008E58(a2);
    atomic_store(sub_10006861C(v3), a1);
  }

  sub_10000ADA8();
}

uint64_t sub_100067508()
{
  uint64_t v1 = (void *)sub_100067DDC();
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  uint64_t v2 = sub_100067ADC(v1, (uint64_t)sub_100067A90);
  return sub_100067AC8(v2, v3, v4, v5, v6);
}

uint64_t sub_10006754C()
{
  uint64_t v1 = (void *)sub_100067DDC();
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  uint64_t v2 = sub_100067ADC(v1, (uint64_t)sub_100067A90);
  return sub_100067AC8(v2, v3, v4, v5, v6);
}

uint64_t sub_100067590()
{
  uint64_t v1 = (void *)sub_100067DDC();
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  uint64_t v2 = sub_100067ADC(v1, (uint64_t)sub_100067A90);
  return sub_100067AC8(v2, v3, v4, v5, v6);
}

uint64_t sub_1000675D0()
{
  uint64_t v1 = sub_100068398();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000675F8()
{
  uint64_t v1 = (void *)sub_100067DDC();
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100067A90;
  sub_1000680A8();
  return v6(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10006766C()
{
  uint64_t v1 = (void *)sub_100068148();
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  uint64_t v2 = sub_100067BE8(v1, (uint64_t)sub_100067A90);
  return sub_10000E920(v2, v3, v4);
}

uint64_t sub_1000676B0()
{
  uint64_t v1 = (void *)sub_100068148();
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  uint64_t v2 = sub_100067BE8(v1, (uint64_t)sub_100067A90);
  return sub_10000E920(v2, v3, v4);
}

uint64_t sub_1000676F4()
{
  uint64_t v1 = (void *)sub_100068148();
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  uint64_t v2 = sub_100067BE8(v1, (uint64_t)sub_100067A90);
  return sub_10000E920(v2, v3, v4);
}

uint64_t sub_100067738()
{
  uint64_t v1 = (void *)sub_100067DDC();
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  uint64_t v2 = sub_100067ADC(v1, (uint64_t)sub_100067A90);
  return sub_100067AC8(v2, v3, v4, v5, v6);
}

uint64_t sub_10006777C()
{
  uint64_t v1 = sub_100068398();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000677A8()
{
  uint64_t v1 = (void *)sub_100067DDC();
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  uint64_t v2 = sub_100067ADC(v1, (uint64_t)sub_100067A90);
  return sub_100067AC8(v2, v3, v4, v5, v6);
}

uint64_t sub_1000677EC()
{
  _Block_release(*(const void **)(v0 + 40));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100067828()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_100132894);
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  uint64_t v2 = sub_100067EB0(v1, (uint64_t)sub_100067A90);
  return sub_100067E9C(v2, v3, v4, v5, v6, v7);
}

void sub_100067874(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3(0LL);
  sub_1000680CC(v3);
  sub_10000ADA8();
}

uint64_t sub_1000678A4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000678CC()
{
  uint64_t v1 = (void *)sub_100068148();
  *(void *)(v0 + 1sub_10000AC58(v0 + 6) = v1;
  uint64_t v2 = sub_100067BE8(v1, (uint64_t)sub_100067A90);
  return sub_10000E920(v2, v3, v4);
}

void sub_10006790C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100027F0C(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(v3, v4, v5);
  sub_10000ADA8();
}

void sub_100067940(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  if (!*a1)
  {
    uint64_t v3 = a2(255LL);
    atomic_store(sub_10006861C(v3), a1);
  }

  sub_10000ADA8();
}

uint64_t storeEnumTagSinglePayload for ApplicationServiceInstance.Errors( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(vsub_10000AC58(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_10000AC58(v0 + 4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000679C0 + 4 * byte_1000F66D9[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000679F4 + 4 * byte_1000F66D4[v4]))();
}

uint64_t sub_1000679F4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000679FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100067A04LL);
  }
  return result;
}

uint64_t sub_100067A10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100067A18LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100067A1C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100067A24(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ApplicationServiceInstance.Errors()
{
  return &type metadata for ApplicationServiceInstance.Errors;
}

unint64_t sub_100067A48()
{
  unint64_t result = qword_100132910;
  if (!qword_100132910)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F6878, &type metadata for ApplicationServiceInstance.Errors);
    atomic_store(result, (unint64_t *)&qword_100132910);
  }

  return result;
}

uint64_t sub_100067ABC(uint64_t a1)
{
  return swift_task_switch(a1, 0LL, 0LL);
}

uint64_t sub_100067AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t sub_100067ADC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_100067B00(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100067B14@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *v2;
  return swift_task_dealloc(a1);
}

uint64_t sub_100067B20()
{
  return swift_task_dealloc(*(void *)(v0 + 248));
}

uint64_t sub_100067B38(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_100067B54(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100067B70()
{
  return ((uint64_t (*)(void))Task<>.value.getter)();
}

uint64_t sub_100067B8C(uint64_t a1)
{
  *(void *)(v2 + 1sub_10000AC58(v0 + 6) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 16, v2 + 24, v1 + 4, v1 + 12);
}

uint64_t sub_100067BB0(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_100067BC8(uint64_t (*a1)(void))
{
  return a1();
}

  ;
}

uint64_t sub_100067BE8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_100067C04()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 16))(v0, v1);
}

uint64_t sub_100067C14()
{
  return (*(uint64_t (**)(uint64_t, void))(v0 + 16))(v0, 0LL);
}

uint64_t sub_100067C24(uint64_t a1, uint64_t a2)
{
  return sub_10008FA38(a1, a2);
}

uint64_t sub_100067C40(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100067C5C(uint64_t (*a1)(void))
{
  return a1();
}

  ;
}

uint64_t sub_100067C8C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10000DE60(a1, v3, a3);
}

uint64_t sub_100067C94()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v2, v0, v1);
}

BOOL sub_100067CA8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100067CB8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v13 + 1sub_10000AC58(v0 + 6) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v15, a12, v12, v14 + 32);
}

uint64_t sub_100067CD0(uint64_t a1)
{
  *(void *)(v1 + 8) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4, v5, v3, v2 + 22);
}

uint64_t sub_100067CE8( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  return sub_100061138(a1, a2, a3, v7, v6, a6);
}

void *sub_100067CF4()
{
  return sub_10005A284();
}

uint64_t sub_100067D00(uint64_t a1, uint64_t a2)
{
  return sub_1000BC15C(a1, a2);
}

uint64_t sub_100067D10()
{
  return swift_errorRelease(v0);
}

uint64_t sub_100067D1C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return swift_arrayDestroy(a13, 3LL);
}

uint64_t sub_100067D30()
{
  *(_WORD *)(v1 + 12) = 2082;
  return sub_1000614C8(v0);
}

BOOL sub_100067D44()
{
  return os_log_type_enabled(v0, v1);
}

void sub_100067D50( void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, int a9, os_log_type_t type)
{
}

uint64_t sub_100067D64@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_100067D84(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_100067D90()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 312));
}

uint64_t sub_100067DA0(uint64_t a1)
{
  return sub_100009E6C(a1, 1LL, v1);
}

BOOL sub_100067DBC(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

BOOL sub_100067DCC(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100067DDC()
{
  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_100067DE4()
{
  return sub_10008FC44();
}

uint64_t sub_100067E00(uint64_t a1, _BYTE *a2)
{
  *a2 = 2;
  return swift_willThrow();
}

void sub_100067E10()
{
}

uint64_t sub_100067E18(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v3, v2);
}

uint64_t sub_100067E24()
{
  return v0;
}

uint64_t sub_100067E38(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100008D98(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
}

uint64_t sub_100067E58()
{
  return v0;
}

uint64_t sub_100067E64()
{
  return _convertErrorToNSError(_:)(v0);
}

uint64_t sub_100067E6C@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(v3, a1, v2);
}

  ;
}

  ;
}

uint64_t sub_100067E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

uint64_t sub_100067EB0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_100067ED8(uint64_t a1)
{
  return dispatch thunk of SetAlgebra.init<A>(_:)(v4 - 136, v3, a1, v1, v2);
}

uint64_t sub_100067EF8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_100067F00()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 296));
}

  ;
}

void sub_100067F28()
{
}

void sub_100067F34()
{
}

void sub_100067F40()
{
}

uint64_t sub_100067F4C()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_100067F54( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return swift_bridgeObjectRelease(a17);
}

uint64_t sub_100067F5C()
{
  return sub_10000DE60(v1, v0, (uint64_t *)(v2 - 88));
}

uint64_t sub_100067F6C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  return sub_10000DE60(a21, v21, (uint64_t *)(v22 - 88));
}

uint64_t sub_100067F7C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  return sub_10000DE60(a1, a2, (uint64_t *)va);
}

uint64_t sub_100067F88()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_100067F90()
{
  return (*(uint64_t (**)(void, void))(v0[21] + 8LL))(v0[27], v0[20]);
}

uint64_t sub_100067FA0(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, a1, a2, 0LL);
}

uint64_t sub_100067FBC()
{
  return type metadata accessor for DispatchQoS(0LL);
}

uint64_t sub_100067FD8(uint64_t a1)
{
  *(void *)(v1 + 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, v1 + 120, v4, v3);
}

uint64_t sub_100067FF4@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(v2, a1, v3);
}

void *sub_100068000(int a1, int a2, int a3, int a4, void *aBlock)
{
  return _Block_copy(aBlock);
}

uint64_t sub_10006801C()
{
  return Logger.logObject.getter();
}

uint64_t sub_100068024(uint64_t (*a1)(void))
{
  return a1();
}

  ;
}

void sub_100068048()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_100068058()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_100068068@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

void sub_100068070( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
}

void sub_100068078( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
}

  ;
}

  ;
}

uint64_t sub_1000680A0()
{
  return _convertErrorToNSError(_:)(v0);
}

  ;
}

void *sub_1000680BC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *unint64_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_1000680CC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 32LL))(v1, v2, a1);
}

uint64_t sub_1000680E4()
{
  return *(void *)(v0 + 8);
}

void sub_1000680F0()
{
}

uint64_t sub_1000680F8()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 208));
}

uint64_t sub_10006810C(uint64_t a1)
{
  return swift_task_alloc((*(void *)(*(void *)(a1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_100068120(uint64_t a1)
{
  *(void *)(v1 + 38sub_10000AC58(v0 + 4) = a1;
  return sub_10008D7E0();
}

id sub_10006812C@<X0>(void *a1@<X8>)
{
  return a1;
}

uint64_t sub_100068134()
{
  return v0;
}

uint64_t sub_100068140()
{
  return swift_release(v0);
}

uint64_t sub_100068148()
{
  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

void sub_100068150(uint64_t a1)
{
}

uint64_t sub_10006815C()
{
  return v0;
}

uint64_t sub_100068168()
{
  return swift_release(v0);
}

void sub_100068170()
{
}

uint64_t sub_100068178(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_100068180(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, a1, v3);
}

uint64_t sub_100068194(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t sub_1000681A8(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_1000681B8()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_1000681C4(uint64_t a1)
{
  *(_OWORD *)a1 = *v1;
  return sub_100025F44(a1);
}

uint64_t sub_1000681D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a14 + 8))(a16, a15);
}

void sub_1000681E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
}

void sub_1000681EC(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1000681F8()
{
  return v0;
}

uint64_t sub_100068204( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return swift_release(a18);
}

  ;
}

  ;
}

uint64_t sub_100068244(uint64_t a1)
{
  return swift_initStackObject(a1, v1);
}

BOOL sub_10006824C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

id sub_10006825C(void *a1)
{
  a1[2] = v2;
  a1[3] = v1;
  a1[4] = v4;
  a1[5] = v3;
  return v2;
}

  ;
}

uint64_t sub_10006827C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a17 + 8))(a18, a16);
}

  ;
}

uint64_t sub_1000682A8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000682B8()
{
  return sub_10000DE60(v0, v1, (uint64_t *)(v2 - 88));
}

__n128 sub_1000682C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __n128 a19)
{
  *(void *)(v20 - 88) = a1;
  __n128 result = a19;
  _DWORD *v19 = a19.n128_u32[0];
  return result;
}

id sub_1000682E0(uint64_t a1, uint64_t a2)
{
  return sub_100066188(a1, a2, 0LL, v2);
}

void sub_1000682F0(uint64_t a1@<X8>)
{
  v1[43] = a1;
  v1[44] = *(void *)(v1[39] + 16 * a1 + 32);
}

uint64_t sub_100068308( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  return swift_bridgeObjectRelease(a21);
}

uint64_t sub_100068310()
{
  return static os_log_type_t.info.getter();
}

void sub_100068318()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_100068328()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

void sub_100068338()
{
}

uint64_t sub_100068340()
{
  return swift_retain(v0);
}

uint64_t sub_100068348()
{
  return swift_arrayDestroy(v0, 1LL);
}

id sub_100068358(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

BOOL sub_100068360(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100068370()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

  ;
}

uint64_t sub_100068398()
{
  return v0;
}

uint64_t sub_1000683A8()
{
  return swift_getObjectType(v0);
}

void sub_1000683B0()
{
}

uint64_t sub_1000683B8()
{
  return static _SetStorage.allocate(capacity:)(v0);
}

uint64_t sub_1000683C8()
{
  return v0;
}

uint64_t sub_1000683DC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

NSString sub_1000683E8()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1000683F4()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 208));
}

uint64_t sub_1000683FC()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v0 + 48) + 8 * v1));
}

uint64_t sub_100068408()
{
  return swift_task_dealloc(*(void *)(v0 + 192));
}

uint64_t sub_100068414()
{
  return swift_task_dealloc(*(void *)(v0 + 192));
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100068454()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - 8) = *v0;
  return *(void *)(v2 + 32);
}

uint64_t sub_100068468()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - 8) = *v0;
  return *(void *)(v2 + 40);
}

  ;
}

  ;
}

uint64_t sub_100068494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_stdlib_reportUnimplementedInitializer(a1, a2, a3, 6LL, 0LL);
}

void sub_1000684A0()
{
  *(_BYTE *)(v0 + 32) = 1;
}

uint64_t sub_1000684B4()
{
  return swift_retain(v0);
}

uint64_t sub_1000684C0()
{
  return swift_retain(v0);
}

void sub_1000684CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void *sub_1000684D4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + 9sub_10000AC58(v0 + 6) = result;
  *__n128 result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_1000684E0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + 88) = *(void *)(result + a2);
  return result;
}

uint64_t sub_1000684EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_bridgeObjectRelease(a10);
}

uint64_t sub_1000684F4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

  ;
}

uint64_t sub_100068508()
{
  return v0;
}

void *sub_100068514@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 112) = a1;
  *(void *)(v2 - 10sub_10000AC58(v0 + 4) = v1;
  return _Block_copy((const void *)(v2 - 128));
}

uint64_t sub_100068520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, v3);
}

uint64_t sub_100068528()
{
  return *(void *)(v0 + 160);
}

void *sub_10006853C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  *a9 = a1;
  return a9;
}

uint64_t sub_100068550@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(v1 + a1 + 8));
}

uint64_t sub_10006855C()
{
  return *(void *)(v0 + 232);
}

void sub_100068568()
{
}

uint64_t sub_100068570()
{
  return _convertNSErrorToError(_:)(v0);
}

uint64_t sub_10006857C()
{
  return v0;
}

__n128 sub_100068588( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __n128 a19)
{
  *(void *)(v20 - 88) = a1;
  __n128 result = a19;
  _DWORD *v19 = a19.n128_u32[0];
  return result;
}

uint64_t sub_10006859C()
{
  return swift_errorRelease(v0);
}

uint64_t sub_1000685A8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void, uint64_t)@<X8>)
{
  return a2(a1, 0LL, v2);
}

uint64_t sub_1000685B4()
{
  return sub_100067010(v0);
}

id sub_1000685BC(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

void *sub_1000685C8(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, v1);
}

uint64_t sub_1000685D4()
{
  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_1000685DC()
{
  return v0;
}

uint64_t sub_1000685E8()
{
  return static LNEntitlementsValidator.hasEntitlement<A>(_:equalTo:)(0xD000000000000018LL);
}

void sub_1000685F4()
{
}

uint64_t sub_100068600()
{
  return sub_10000AC58(v0);
}

  ;
}

uint64_t sub_10006861C(uint64_t a1)
{
  return swift_getWitnessTable(v1, a1);
}

uint64_t sub_100068628(uint64_t a1, uint64_t a2)
{
  if (qword_100130220 != -1) {
    swift_once(&qword_100130220, sub_100068BDC);
  }
  sub_10001DEBC(v18, &unk_100135520);
  if (a2)
  {
    sub_10001D9AC(v18);
    if (qword_100130228 != -1) {
      swift_once(&qword_100130228, sub_100068C30);
    }
    sub_10001DECC((uint64_t)&qword_1001355C8);
    v16[0] = a1;
    v16[1] = a2;
    == infix<A>(_:_:)();
    uint64_t v7 = v6;
    uint64_t v3 = v8;
    uint64_t v10 = v9;
    sub_10001DEBC(&v15, v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    QueryType.filter(_:)( v7,  v3,  v10,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  (uint64_t)v16);
    swift_bridgeObjectRelease_n(v10, 2LL);
    swift_bridgeObjectRelease_n(v3, 2LL);
    sub_10001DAF0(v18);
    int64_t v11 = v16;
  }

  else
  {
    sub_10001D9AC(v18);
    int64_t v11 = v18;
  }

  sub_10001DEBC(v17, v11);
  v16[3] = &type metadata for Table;
  void v16[4] = &protocol witness table for Table;
  v16[0] = swift_allocObject(&unk_100125088, 184LL, 7LL);
  sub_10001DEBC((void *)(v16[0] + 16LL), v17);
  Connection.prepareRowIterator(_:)(v16);
  uint64_t v12 = sub_10000AC58(v16);
  if (!v2)
  {
    __chkstk_darwin(v12);
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    uint64_t v3 = v14;
    sub_100038920();
    sub_10000AEE8();
    swift_release();
  }

  return v3;
}

uint64_t sub_1000688A0(__int128 *a1)
{
  if (qword_100130220 != -1) {
    swift_once(&qword_100130220, sub_100068BDC);
  }
  sub_10001DEBC(v67, &unk_100135520);
  sub_10001DEBC(v64, &unk_100135520);
  sub_10001D9AC(v67);
  if (qword_100130228 != -1) {
    swift_once(&qword_100130228, sub_100068C30);
  }
  uint64_t v2 = sub_10001DECC((uint64_t)&qword_1001355C8);
  __int128 v62 = *a1;
  <- infix<A>(_:_:)( v2,  v3,  v4,  (uint64_t)&v62,  (uint64_t)type metadata for String,  (uint64_t)&protocol witness table for String);
  uint64_t v5 = sub_100008DB0(&qword_1001323E0);
  uint64_t inited = swift_initStackObject(v5, &v38);
  *(_OWORD *)(inited + 1sub_10000AC58(v0 + 6) = xmmword_1000F57D0;
  if (qword_100130230 != -1) {
    swift_once(&qword_100130230, sub_100068C54);
  }
  uint64_t v7 = sub_10001DECC((uint64_t)&qword_1001355E0);
  __int128 v62 = a1[1];
  sub_1000691D0( v7,  v8,  v9,  v10,  (uint64_t)type metadata for String,  (uint64_t)&protocol witness table for String,  v11,  v12,  v38,  v39,  v40,  v41,  v42,  v43,  v44,  v45,  v46,  v47,  v48,  v49,  v50,  v51,  v52,  v53,  v54,  v55,  v56,  v57,  v58,  v59,  v60,  v61,  v62);
  if (qword_100130238 != -1) {
    swift_once(&qword_100130238, sub_100068C80);
  }
  uint64_t v13 = sub_10001DECC((uint64_t)&qword_1001355F8);
  __int128 v62 = a1[2];
  sub_1000691D0( v13,  v14,  v15,  v16,  (uint64_t)type metadata for String,  (uint64_t)&protocol witness table for String,  v17,  v18,  v38,  v39,  v40,  v41,  v42,  v43,  v44,  v45,  v46,  v47,  v48,  v49,  v50,  v51,  v52,  v53,  v54,  v55,  v56,  v57,  v58,  v59,  v60,  v61,  v62);
  uint64_t v19 = QueryType.insert(_:_:)((uint64_t)v63);
  unint64_t v21 = v20;
  uint64_t v23 = v22;
  swift_setDeallocating(inited);
  sub_100058874();
  sub_10001DC30(v63);
  sub_10001DEBC(v68, v64);
  sub_10001DAF0(v68);
  v69.template._uint64_t countAndFlagsBits = v19;
  v69.template._object = v21;
  v69.bindings._rawValue = v23;
  Connection.run(_:)(v69);
  if (v24)
  {
    swift_bridgeObjectRelease();
    sub_10000AEE8();
    v63[0] = v24;
    swift_errorRetain(v24);
    uint64_t v25 = sub_100008DB0(&qword_100130620);
    if (swift_dynamicCast(v64, v63, v25, &type metadata for Result, 0LL))
    {
      swift_errorRelease(v24);
      uint64_t v26 = v64[1];
      int v27 = v65;
      uint64_t v28 = v66;
      if (v65 == 19)
      {
        uint64_t v29 = type metadata accessor for Schema.RuntimeError(0LL);
        unint64_t v30 = sub_100037E5C();
        sub_100038AC8(v29, v30);
        void *v31 = 0xD00000000000004DLL;
        v31[1] = 0x80000001000FAC50LL;
        uint64_t v32 = swift_storeEnumTagMultiPayload(v31, v29, 0LL);
        swift_willThrow(v32);
        sub_100038920();
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v34 = v64[0];
        unint64_t v35 = sub_100037E20();
        uint64_t v36 = sub_100038AC8((uint64_t)&type metadata for Result, v35);
        *(void *)uint64_t v37 = v34;
        *(void *)(v37 + 8) = v26;
        *(_DWORD *)(v37 + 1sub_10000AC58(v0 + 6) = v27;
        *(void *)(v37 + 2sub_10000AC58(v0 + 4) = v28;
        swift_willThrow(v36);
      }
    }

    return swift_errorRelease(v63[0]);
  }

  else
  {
    swift_bridgeObjectRelease();
    return sub_10000AEE8();
  }

void *sub_100068BDC()
{
  return memcpy(&unk_100135520, __src, 0xA8uLL);
}

uint64_t sub_100068C30(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_1001355C8, 0xD000000000000010LL, 0x80000001000F96E0LL);
}

uint64_t sub_100068C54(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_1001355E0, 0x72506D6574737973LL, 0xEE006C6F636F746FLL);
}

uint64_t sub_100068C80(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_1001355F8, 0xD000000000000010LL, 0x80000001000FACA0LL);
}

uint64_t sub_100068CA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100068F74((uint64_t)v3, a1);
}

void sub_100068CDC(void *a1@<X8>)
{
  if (qword_100130228 != -1) {
    swift_once(&qword_100130228, sub_100068C30);
  }
  Row.get<A>(_:)();
  if (qword_100130230 != -1) {
    swift_once(&qword_100130230, sub_100068C54);
  }
  Row.get<A>(_:)();
  if (qword_100130238 != -1) {
    swift_once(&qword_100130238, sub_100068C80);
  }
  Row.get<A>(_:)();
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v2;
  a1[3] = v3;
  a1[4] = v2;
  a1[5] = v3;
}

void *sub_100068E84@<X0>(void *(*a1)(void *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  __n128 result = a1(v5);
  if (!v2) {
    return (void *)sub_100068F74((uint64_t)v5, a2);
  }
  return result;
}

uint64_t sub_100068ECC()
{
  uint64_t v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }

  uint64_t v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    uint64_t v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }

  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184LL, 7LL);
}

uint64_t sub_100068F54@<X0>(uint64_t a1@<X8>)
{
  return sub_100068CA4(a1);
}

void *sub_100068F5C@<X0>(uint64_t a1@<X8>)
{
  return sub_100068E84(*(void *(**)(void *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_100068F74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008DB0(&qword_100132920);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t destroy for LNDefaultActionForSystemProtocolRecord(void *a1)
{
  return swift_bridgeObjectRelease(a1[5]);
}

void *initializeWithCopy for LNDefaultActionForSystemProtocolRecord(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *assignWithCopy for LNDefaultActionForSystemProtocolRecord(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for LNDefaultActionForSystemProtocolRecord(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 1sub_10000AC58(v0 + 6) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for LNDefaultActionForSystemProtocolRecord(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for LNDefaultActionForSystemProtocolRecord(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(sub_10004BEB8(v0[37], v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_10004BEB8(v0[37], v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_10004BEB8(v0[37], v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LNDefaultActionForSystemProtocolRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = 0LL;
    *(_OWORD *)(result + 2sub_10000AC58(v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LNDefaultActionForSystemProtocolRecord()
{
  return &type metadata for LNDefaultActionForSystemProtocolRecord;
}

void sub_1000691D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

void sub_1000691DC(uint64_t a1, uint64_t (*a2)(id, id))
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    unint64_t v5 = 0LL;
    do
    {
      unint64_t v6 = v5;
      while (1)
      {
        if (v6 >= *(void *)(a1 + 16))
        {
          __break(1u);
          return;
        }

        __int128 v11 = *(_OWORD *)(a1 + 32 + 16 * v6);
        unint64_t v5 = v6 + 1;
        id v7 = (id)v11;
        id v8 = *((id *)&v11 + 1);
        if ((a2(v7, v8) & 1) != 0) {
          break;
        }

        ++v6;
        if (v3 == v5) {
          goto LABEL_13;
        }
      }

      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
        sub_100045554();
      }
      __int128 v9 = v11;
      unint64_t v10 = _swiftEmptyArrayStorage[2];
      if (v10 >= _swiftEmptyArrayStorage[3] >> 1)
      {
        sub_100045554();
        __int128 v9 = v11;
      }

      _swiftEmptyArrayStorage[2] = v10 + 1;
      *(_OWORD *)&_swiftEmptyArrayStorage[2 * v10 + 4] = v9;
    }

    while (v3 - 1 != v6);
  }

void sub_10006935C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v3)
  {
    while (1)
    {
      sub_10004560C();
      if (v3 < 0) {
        break;
      }
      uint64_t v4 = 0LL;
      while (v3 != v4)
      {
        if ((a1 & 0xC000000000000001LL) != 0) {
          id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
        }
        else {
          id v5 = *(id *)(a1 + 8 * v4 + 32);
        }
        unint64_t v6 = v5;
        id v7 = sub_10006B0C8(v5);

        unint64_t v8 = _swiftEmptyArrayStorage[2];
        if (v8 >= _swiftEmptyArrayStorage[3] >> 1) {
          sub_10004560C();
        }
        ++v4;
        _swiftEmptyArrayStorage[2] = v8 + 1;
        _swiftEmptyArrayStorage[v8 + 4] = v7;
        if (v3 == v4) {
          goto LABEL_12;
        }
      }

      __break(1u);
LABEL_14:
      if (a1 < 0) {
        uint64_t v9 = a1;
      }
      else {
        uint64_t v9 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v9);
      swift_bridgeObjectRelease(a1);
      if (!v3) {
        goto LABEL_12;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_12:
    swift_release(a2);
  }

void *sub_1000694D4(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v4)
  {
    while (1)
    {
      uint64_t v22 = _swiftEmptyArrayStorage;
      __n128 result = (void *)specialized ContiguousArray.reserveCapacity(_:)(v4);
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = 0LL;
      while (v4 != v6)
      {
        if ((a1 & 0xC000000000000001LL) != 0) {
          id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
        }
        else {
          id v7 = *(id *)(a1 + 8 * v6 + 32);
        }
        unint64_t v8 = v7;
        ++v6;
        id v9 = [v7 identifier];
        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
        uint64_t v12 = v11;

        v21[3] = &type metadata for String;
        v21[0] = v10;
        v21[1] = v12;
        id v13 = sub_10006BCFC();
        id v14 = objc_allocWithZone(&OBJC_CLASS___LNValue);
        id v15 = sub_10003E16C(v21, v13);

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v16);
        uint64_t v17 = v22[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
        uint64_t v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
        specialized ContiguousArray._endMutation()(v18);
        if (v4 == v6)
        {
          uint64_t v19 = v22;

          return v19;
        }
      }

      __break(1u);
LABEL_12:
      if (a1 < 0) {
        uint64_t v20 = a1;
      }
      else {
        uint64_t v20 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v20);
      swift_bridgeObjectRelease(a1);
      if (!v4) {
        goto LABEL_16;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_16:

    return _swiftEmptyArrayStorage;
  }

  return result;
}

void sub_10006968C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_12;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v6)
  {
    while (1)
    {
      specialized ContiguousArray.reserveCapacity(_:)(v6);
      if (v6 < 0) {
        break;
      }
      uint64_t v7 = 0LL;
      while (v6 != v7)
      {
        if ((a1 & 0xC000000000000001LL) != 0) {
          id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a1);
        }
        else {
          id v8 = *(id *)(a1 + 8 * v7 + 32);
        }
        id v9 = v8;
        ++v7;
        objc_allocWithZone(&OBJC_CLASS___LNProperty);
        swift_bridgeObjectRetain();
        id v10 = sub_1000BF7D0(a2, a3, v9);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
        uint64_t v11 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
        uint64_t v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v10);
        specialized ContiguousArray._endMutation()(v12);
        if (v6 == v7) {
          goto LABEL_13;
        }
      }

      __break(1u);
LABEL_12:
      sub_10001BD0C();
      uint64_t v6 = sub_100028060();
      swift_bridgeObjectRelease(a1);
      if (!v6) {
        goto LABEL_13;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_13:
    sub_10001BC70();
    sub_10006C994();
  }

void *sub_1000697EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a4;
  uint64_t v7 = a3;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = v9;
    id v10 = (uint64_t *)(v9 + 40);
    uint64_t v11 = _swiftEmptyArrayStorage;
    do
    {
      if (*(void *)(a5 + 16))
      {
        uint64_t v13 = *(v10 - 1);
        uint64_t v12 = *v10;
        swift_bridgeObjectRetain();
        uint64_t v14 = sub_100015F98(v13, v12);
        if ((v15 & 1) != 0)
        {
          uint64_t v16 = *(void **)(*(void *)(a5 + 56) + 8 * v14);
          swift_bridgeObjectRetain();
          id v17 = v16;
          id v18 = [v17 displayRepresentation];
          id v19 = [v18 name];
          swift_bridgeObjectRelease(v12);

          if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
          {
            sub_100014608();
            uint64_t v11 = v22;
          }

          unint64_t v20 = v11[2];
          if (v20 >= v11[3] >> 1)
          {
            sub_100014608();
            uint64_t v11 = v23;
          }

          v11[2] = v20 + 1;
          unint64_t v21 = &v11[3 * v20];
          void v21[4] = v13;
          v21[5] = v12;
          v21[6] = v19;
        }

        else
        {
          swift_bridgeObjectRelease(v12);
        }
      }

      v10 += 2;
      --v8;
    }

    while (v8);
    swift_bridgeObjectRelease(v25);
    uint64_t v6 = a4;
    uint64_t v7 = a3;
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease(a5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  return v11;
}

void sub_1000699A4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  sub_10000AE38();
  for (; v6; uint64_t v6 = sub_100028060())
  {
    unint64_t v19 = v5;
    unint64_t v20 = v5 & 0xC000000000000001LL;
    uint64_t v7 = 4LL;
    while (1)
    {
      id v8 = v20 ? (id)sub_10006CA38() : *(id *)(v5 + 8 * v7);
      uint64_t v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1LL)) {
        break;
      }
      uint64_t v10 = v6;
      uint64_t v11 = v8;
      uint64_t v12 = a3;
      id v13 = [v8 identifier];
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      uint64_t v16 = v15;

      a3 = v12;
      BOOL v17 = v14 == a2 && v16 == v12;
      if (v17)
      {
        swift_bridgeObjectRelease(v19);
LABEL_17:
        sub_10001DED8();
        sub_10001BC70();
        goto LABEL_21;
      }

      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, a2, v12, 0LL);
      sub_10001DF40();
      if ((v18 & 1) != 0) {
        goto LABEL_17;
      }

      ++v7;
      uint64_t v6 = v10;
      BOOL v17 = v9 == v10;
      unint64_t v5 = v19;
      if (v17) {
        goto LABEL_20;
      }
    }

    __break(1u);
LABEL_19:
    sub_10000AE38();
  }

void *sub_100069B10(uint64_t a1)
{
  return sub_100069B2C(a1, &qword_100130F50, (void (*)(void))sub_1000174FC, &qword_100130728);
}

void *sub_100069B2C(uint64_t a1, uint64_t *a2, void (*a3)(void), uint64_t *a4)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    sub_100008DB0(a2);
    uint64_t v7 = (void *)static _DictionaryStorage.allocate(capacity:)(v6);
  }

  else
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v10 = v7;
  uint64_t v8 = sub_10000AFB0();
  sub_10006BEA4(v8, 1, &v10, a3, a4);
  sub_10001198C();
  return v10;
}

void *sub_100069BE0(uint64_t a1)
{
  return sub_100069B2C(a1, &qword_100130ED0, (void (*)(void))sub_1000174E4, &qword_100130738);
}

void sub_100069BFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    unint64_t v3 = 0LL;
    uint64_t v4 = a1 + 40;
    unint64_t v5 = _swiftEmptyArrayStorage;
    uint64_t v15 = a1 + 40;
    do
    {
      uint64_t v16 = v5;
      uint64_t v6 = (uint64_t *)(v4 + 16 * v3);
      unint64_t v7 = v3;
      while (1)
      {
        if (v7 >= *(void *)(a1 + 16))
        {
          __break(1u);
          return;
        }

        uint64_t v9 = *(v6 - 1);
        uint64_t v8 = *v6;
        unint64_t v3 = v7 + 1;
        swift_bridgeObjectRetain_n(*v6, 2LL);
        char v10 = sub_100018380(v17, v9, v8);
        swift_bridgeObjectRelease(v17[1]);
        if ((v10 & 1) != 0) {
          break;
        }
        swift_bridgeObjectRelease(v8);
        v6 += 2;
        ++v7;
        if (v2 == v3) {
          goto LABEL_13;
        }
      }

      unint64_t v5 = v16;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
      char v18 = v16;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000452D4();
        unint64_t v5 = v18;
      }

      unint64_t v12 = v5[2];
      unint64_t v13 = v12 + 1;
      if (v12 >= v5[3] >> 1)
      {
        sub_1000452D4();
        unint64_t v13 = v12 + 1;
        unint64_t v5 = v18;
      }

      _OWORD v5[2] = v13;
      uint64_t v14 = &v5[2 * v12];
      v14[4] = v9;
      uint64_t v14[5] = v8;
      uint64_t v4 = v15;
    }

    while (v2 - 1 != v7);
  }

uint64_t sub_100069D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  void v4[5] = v3;
  void v4[2] = a1;
  void v4[3] = a2;
  return swift_task_switch(sub_100069DA0, 0LL, 0LL);
}

uint64_t sub_100069DA0()
{
  uint64_t v1 = v0[2];
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v82 = v0[2];
    }
    else {
      uint64_t v82 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10000AFB0();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v82);
    uint64_t v3 = v0[2];
  }

  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v3 = sub_10000AFB0();
  }

  id v89 = v0;
  if (v2)
  {
    uint64_t v4 = 0LL;
    unint64_t v86 = v1 & 0xC000000000000001LL;
    unint64_t v5 = _swiftEmptyArrayStorage;
    uint64_t v84 = v3 + 32;
    uint64_t v85 = v2;
    while (1)
    {
      id v6 = v86 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v0[2]) : *(id *)(v84 + 8 * v4);
      unint64_t v7 = v6;
      BOOL v8 = __OFADD__(v4, 1LL);
      uint64_t v9 = v4 + 1;
      if (v8) {
        break;
      }
      id v10 = [v6 systemProtocols];
      uint64_t v11 = sub_10000A1A0(0LL, (unint64_t *)&qword_100130BA0, &OBJC_CLASS___LNSystemProtocol_ptr);
      uint64_t v12 = sub_10003EF80(v11);

      if ((unint64_t)v12 >> 62)
      {
        if (v12 < 0) {
          uint64_t v27 = v12;
        }
        else {
          uint64_t v27 = v12 & 0xFFFFFFFFFFFFFF8LL;
        }
        id v28 = v7;
        sub_1000280C8();
        uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v27);
      }

      else
      {
        uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        id v14 = v7;
        sub_1000280C8();
      }

      uint64_t v87 = v9;
      if (v13)
      {
        uint64_t v15 = 0LL;
        uint64_t v16 = v13;
        while (1)
        {
          id v17 = (v12 & 0xC000000000000001LL) != 0
              ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v12)
              : sub_10003F0A0(v12 + 8 * v15);
          char v18 = v17;
          uint64_t v19 = v15 + 1;
          if (__OFADD__(v15, 1LL)) {
            break;
          }
          unint64_t v20 = v7;
          id v21 = v7;
          id v22 = v18;
          if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
          {
            sub_10006CA1C();
            unint64_t v5 = v25;
          }

          unint64_t v23 = v5[2];
          if (v23 >= v5[3] >> 1)
          {
            sub_10006CA1C();
            unint64_t v5 = v26;
          }

          _OWORD v5[2] = v23 + 1;
          uint64_t v24 = &v5[2 * v23];
          v24[4] = v21;
          v24[5] = v22;

          ++v15;
          unint64_t v7 = v20;
          if (v19 == v16) {
            goto LABEL_22;
          }
        }

        __break(1u);
        goto LABEL_65;
      }

LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
  }

  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
  return _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
}

      __break(1u);
LABEL_66:
      sub_10001C1BC();
      sub_10000AE38();
      uint64_t v48 = sub_10006CA28();
      sub_10000ADB0();
      if (!v48) {
        goto LABEL_67;
      }
    }

uint64_t sub_10006A41C(void *a1, void *a2, uint64_t a3)
{
  return sub_10004B154(a1, a2);
}

void sub_10006A458(id *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  id v5 = *a1;
  id v6 = [*a1 parameters];
  uint64_t v7 = sub_10000A1A0(0LL, &qword_100130BA8, &OBJC_CLASS___LNActionParameterMetadata_ptr);
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0) {
      uint64_t v26 = v8;
    }
    else {
      uint64_t v26 = v8 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v26);
  }

  else
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain();
  }

  uint64_t v34 = v3;
  uint64_t v29 = v5;
  uint64_t v30 = a2;
  if (v9)
  {
    if (v9 < 1)
    {
      __break(1u);
LABEL_33:
      sub_1000141B8();
      uint64_t v11 = v27;
      goto LABEL_22;
    }

    uint64_t v10 = 0LL;
    uint64_t v11 = _swiftEmptyArrayStorage;
    do
    {
      if ((v8 & 0xC000000000000001LL) != 0) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v8);
      }
      else {
        id v12 = *(id *)(v8 + 8 * v10 + 32);
      }
      uint64_t v13 = v12;
      uint64_t v14 = sub_10006A70C();
      uint64_t v16 = v15;

      if (v16)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
        {
          sub_1000141B8();
          uint64_t v11 = v19;
        }

        unint64_t v17 = v11[2];
        if (v17 >= v11[3] >> 1)
        {
          sub_1000141B8();
          uint64_t v11 = v20;
        }

        v11[2] = v17 + 1;
        char v18 = &v11[2 * v17];
        void v18[4] = v14;
        uint64_t v18[5] = v16;
      }

      ++v10;
    }

    while (v9 != v10);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease_n(v8, 2LL);
  uint64_t v21 = sub_10006C3E8(v29);
  if (!v21)
  {
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    goto LABEL_26;
  }

  uint64_t v22 = v21;
  id v23 = LNActionTypeSpecificMetadataKeyEntityType;
  sub_100011CEC(v23, v22);

  swift_bridgeObjectRelease(v22);
  if (!*((void *)&v33 + 1))
  {
LABEL_26:
    sub_10000F3D8((uint64_t)&v32);
    goto LABEL_27;
  }

  uint64_t v3 = v31[0];
  a2 = (void *)v31[1];
  if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0) {
    goto LABEL_33;
  }
LABEL_22:
  unint64_t v24 = v11[2];
  if (v24 >= v11[3] >> 1)
  {
    sub_1000141B8();
    uint64_t v11 = v28;
  }

  v11[2] = v24 + 1;
  uint64_t v25 = &v11[2 * v24];
  v25[4] = v3;
  void v25[5] = a2;
LABEL_27:
  *uint64_t v30 = v11;
}

uint64_t sub_10006A70C()
{
  id v1 = [v0 valueType];
  uint64_t v2 = objc_opt_self(&OBJC_CLASS___LNEntityValueType);
  uint64_t v3 = swift_dynamicCastObjCClass(v1, v2);
  if (!v3)
  {
    uint64_t v8 = objc_opt_self(&OBJC_CLASS___LNArrayValueType);
    uint64_t v9 = swift_dynamicCastObjCClass(v1, v8);
    if (v9)
    {
      uint64_t v10 = (void *)v9;
      id v11 = v1;
      id v12 = [v10 memberValueType];
      uint64_t v13 = objc_opt_self(&OBJC_CLASS___LNEntityValueType);
      uint64_t v14 = (void *)swift_dynamicCastObjCClass(v12, v13);
      if (v14)
      {
        id v15 = [v14 identifier];
        uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);

        return v7;
      }
    }

    else
    {
    }

    return 0LL;
  }

  uint64_t v4 = (void *)v3;
  id v5 = v1;
  id v6 = [v4 identifier];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

  return v7;
}

void *sub_10006A868(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v62 = a2;
  uint64_t v63 = a3;
  uint64_t v61 = a1;
  id v7 = [a1 parameters];
  uint64_t v8 = sub_10000A1A0(0LL, &qword_100130BA8, &OBJC_CLASS___LNActionParameterMetadata_ptr);
  uint64_t v9 = sub_10003EF80(v8);

  swift_retain(v5);
  uint64_t v64 = v5;
  sub_10006935C(v9, v5);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease(v9);
  unint64_t v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    unint64_t v17 = _swiftEmptyArrayStorage;
    goto LABEL_16;
  }

  unint64_t v13 = v11 + 32;
  unint64_t v14 = *(void *)(v11 + 32);
  if (v14 >> 62) {
    goto LABEL_66;
  }
  uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  sub_10001C1BC();
  if (v15)
  {
    while (v12 != 1)
    {
      uint64_t v44 = 5LL;
      while (1)
      {
        uint64_t v45 = v44 - 3;
        if (__OFADD__(v44 - 4, 1LL)) {
          break;
        }
        unint64_t v46 = *(void *)(v11 + 8 * v44);
        if (v46 >> 62)
        {
          sub_10000AE38();
          uint64_t v47 = sub_10006CA28();
          sub_10000ADB0();
          if (!v47) {
            goto LABEL_67;
          }
        }

        else if (!*(void *)((v46 & 0xFFFFFFFFFFFFF8LL) + 0x10))
        {
          goto LABEL_67;
        }

        ++v44;
        if (v45 == v12) {
          goto LABEL_5;
        }
      }

LABEL_67:
  sub_10001191C(v11);
  sub_10000A1A0(0LL, (unint64_t *)&qword_100130BA0, &OBJC_CLASS___LNSystemProtocol_ptr);
  id v49 = [(id)objc_opt_self(LNSystemProtocol) openEntitySystemProtocol];
  char v50 = static NSObject.== infix(_:_:)(a4, v49);

  uint64_t v43 = _swiftEmptyArrayStorage;
  if ((v50 & 1) != 0)
  {
    id v51 = sub_10006AE78(v61, v62, v63, a4);
    if (v51)
    {
      id v52 = v51;
      uint64_t v53 = sub_100008DB0(&qword_100130BD0);
      uint64_t v54 = sub_100011924(v53);
      *(_OWORD *)(v54 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5530;
      *(void *)(v54 + 32) = v52;
      uint64_t v67 = v54;
      specialized Array._endMutation()(v54);
      return (void *)v67;
    }
  }

  return v43;
}

id sub_10006AE78(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a1;
  sub_10000AE38();
  sub_10000AFB0();
  id v7 = sub_1000884F8(v6);
  uint64_t v8 = sub_10006B388(v6, a4, v7);
  objc_allocWithZone(&OBJC_CLASS___LNSuggestedAction);
  return sub_10006BDE4(v7, a4, (uint64_t)v8);
}

void *sub_10006B0C8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10003E5D0(a1);
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v6 = v4;
  uint64_t v7 = v5;
  uint64_t v8 = sub_10006A70C();
  if (v9)
  {
    uint64_t v10 = v8;
    uint64_t v11 = v9;
    uint64_t v12 = v2[7];
    sub_10000AE38();
    unint64_t v13 = sub_100011B44(v10, v11, v12);
    sub_10000AEE8();
    sub_10000ADB0();
    if (v13)
    {
      sub_10000AFB0();
      sub_10006C984(v13);
      uint64_t v15 = v14;
      sub_10001BC70();
LABEL_11:
      sub_10001198C();
      return v15;
    }

void *sub_10006B2F0()
{
  id v1 = [v0 cases];
  uint64_t v2 = sub_10000A1A0(0LL, &qword_100131BE8, &OBJC_CLASS___LNEnumCaseMetadata_ptr);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  uint64_t v4 = sub_1000694D4(v3, v0);
  swift_bridgeObjectRelease(v3);
  return v4;
}

void *sub_10006B388(void *a1, void *a2, void *a3)
{
  id v7 = [a1 descriptionMetadata];
  id v123 = a2;
  if (v7)
  {
    id v3 = v7;
    id v8 = [v7 descriptionText];

    uint64_t v9 = &_swiftEmptyDictionarySingleton;
    if (v8)
    {
      uint64_t v10 = (void *)LNSuggestedActionDialogParameterKeyDescription;
      uint64_t v11 = a3;
      if (sub_100008D74(v126 + 2, v126[5])[1])
      {
        id v12 = v10;
        sub_10000AFB0();
        NSString v13 = sub_10006CA30();
        sub_10001198C();
      }

      else
      {
        id v14 = v10;
        NSString v13 = 0LL;
      }

      id v15 = sub_10006CA0C();

      uint64_t v16 = sub_10006CA44();
      uint64_t v18 = v17;

      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
      v125[0] = &_swiftEmptyDictionarySingleton;
      sub_10000964C(v16, v18, v10, isUniquelyReferenced_nonNull_native);
      id v3 = &_swiftEmptyDictionarySingleton;

      sub_10006C9B8();
      a3 = v11;
      uint64_t v9 = &_swiftEmptyDictionarySingleton;
    }
  }

  else
  {
    uint64_t v9 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v20 = LNActionMetadata._iconSystemImageNameForAppIntentsOnly.getter();
  if (v21)
  {
    uint64_t v22 = v20;
    uint64_t v23 = v21;
    id v3 = LNSuggestedActionDialogParameterKeyIconSystemImageName;
    sub_10006C9B0();
    sub_10006C9E4();
    sub_10006C9DC(v22, v23, v24, v25);
    uint64_t v9 = (void *)v125[0];

    sub_10006C9B8();
  }

  uint64_t v26 = sub_10006C3E8(a1);
  id v27 = v126;
  if (v26)
  {
    uint64_t v28 = v26;
    id v3 = LNActionTypeSpecificMetadataKeyEntityType;
    sub_100011CEC(v3, v28);

    sub_10000ADB0();
    if (v125[3])
    {
      if ((swift_dynamicCast(v124, v125, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
      {
        uint64_t v29 = v124[0];
        id v3 = (id)v124[1];
        uint64_t v30 = v27[8];
        sub_10000AE38();
        uint64_t v31 = sub_100011C38(v29, (uint64_t)v3, v30);
        uint64_t v33 = v32;
        sub_10001198C();
        sub_10000ADB0();
        if (v33)
        {
          id v3 = LNSuggestedActionDialogParameterKeyEntityType;
          sub_10006C9B0();
          sub_10006C9E4();
          sub_10006C9DC(v31, v33, v34, v35);
          uint64_t v9 = (void *)v125[0];

          sub_10006C9B8();
        }
      }
    }

    else
    {
      sub_10000F3D8((uint64_t)v125);
    }
  }

  id v36 = [v123 identifier];
  static String._unconditionallyBridgeFromObjectiveC(_:)(LNSystemProtocolIdentifierChangeBinarySetting);
  uint64_t v37 = sub_10006C9CC();
  if (v3 == (id)v37 && &LNSuggestedActionDialogParameterKeyEntityType == v38)
  {
    sub_10001191C((uint64_t)&LNSuggestedActionDialogParameterKeyEntityType);
    goto LABEL_41;
  }

  uint64_t v40 = sub_10006C968(v37, (uint64_t)v38);
  swift_bridgeObjectRelease(&LNSuggestedActionDialogParameterKeyEntityType);
  sub_10001DF40();
  if ((v40 & 1) != 0)
  {
LABEL_41:

    uint64_t v58 = sub_100008D74(v27 + 2, v27[5]);
    uint64_t v59 = sub_10006CA58(0x676E6974746573LL, 0xE700000000000000LL, *v58, v58[1], v58[2], v58[3]);
    if (v59)
    {
      uint64_t v60 = (void *)v59;
      uint64_t v61 = sub_100008D74(v27 + 2, v27[5]);
      uint64_t v62 = sub_10006CA58(0x704F65676E616863LL, 0xEF6E6F6974617265LL, *v61, v61[1], v61[2], v61[3]);
      if (v62)
      {
        uint64_t v63 = (void *)v62;
        id v64 = LNSuggestedActionDialogParameterKeyEntityName;
        id v65 = [v60 displayRepresentation];
        id v66 = [v65 title];

        if (sub_100008D74(v27 + 2, v27[5])[1])
        {
          sub_10000AFB0();
          NSString v67 = sub_10006CA30();
          sub_10001198C();
        }

        else
        {
          NSString v67 = 0LL;
        }

        id v81 = sub_10006CA0C();

        uint64_t v82 = sub_10006CA44();
        uint64_t v84 = v83;

        char v85 = sub_10006C9B0();
        v125[0] = v9;
        sub_10000964C(v82, v84, v64, v85);
        uint64_t v86 = v125[0];

        sub_10006C9B8();
        id v87 = LNSuggestedActionDialogParameterKeyChangeOperation;
        id v88 = [v63 identifier];
        uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
        uint64_t v91 = v90;

        char v92 = swift_isUniquelyReferenced_nonNull_native(v86);
        v125[0] = v86;
        sub_10000964C(v89, v91, v87, v92);
        uint64_t v9 = (void *)v125[0];

LABEL_53:
        sub_10006C9B8();
        return v9;
      }
    }

    sub_10001BC70();
    unint64_t v68 = sub_10006C764();
    sub_100038AC8((uint64_t)&type metadata for SuggestedActionsGeneratorDialogingError, v68);
    char v70 = 0;
    *(void *)uint64_t v69 = a3;
LABEL_47:
    *(_BYTE *)(v69 + 8) = v70;
    swift_willThrow(a3);
    return v9;
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(LNSystemProtocolIdentifierNavigateSequentially);
  uint64_t v41 = sub_10006C9CC();
  if (v40 == v41 && &LNSuggestedActionDialogParameterKeyEntityType == v42)
  {

    sub_10001191C((uint64_t)&LNSuggestedActionDialogParameterKeyEntityType);
    goto LABEL_49;
  }

  char v44 = sub_10006C968(v41, (uint64_t)v42);

  swift_bridgeObjectRelease(&LNSuggestedActionDialogParameterKeyEntityType);
  uint64_t v45 = sub_10001DF40();
  if ((v44 & 1) != 0)
  {
LABEL_49:
    uint64_t v71 = sub_100008D74(v27 + 2, v27[5]);
    uint64_t v72 = sub_10006CA58(0x6F69746365726964LL, 0xE90000000000006ELL, *v71, v71[1], v71[2], v71[3]);
    if (v72)
    {
      uint64_t v73 = (void *)v72;
      id v74 = LNSuggestedActionDialogParameterKeyDirection;
      id v75 = [v73 identifier];
      uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
      uint64_t v78 = v77;

      sub_10006C9B0();
      sub_10006C9E4();
      sub_10006C9DC(v76, v78, v79, v80);
      uint64_t v9 = (void *)v125[0];

      goto LABEL_53;
    }

    sub_10001BC70();
    unint64_t v94 = sub_10006C764();
    sub_100038AC8((uint64_t)&type metadata for SuggestedActionsGeneratorDialogingError, v94);
    *(void *)uint64_t v69 = a3;
    char v70 = 1;
    goto LABEL_47;
  }

  id v46 = sub_100011ADC(v45, "parameters");
  uint64_t v47 = sub_10000A1A0(0LL, &qword_1001309A8, &OBJC_CLASS___LNProperty_ptr);
  unint64_t v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v46, v47);

  if (v48 >> 62) {
    goto LABEL_69;
  }
  uint64_t v49 = *(void *)((v48 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  sub_10000AE38();
  for (; v49; uint64_t v49 = sub_100028060())
  {
    uint64_t v50 = 4LL;
    while (1)
    {
      id v51 = (v48 & 0xC000000000000001LL) != 0 ? (id)sub_10006CA38() : *(id *)(v48 + 8 * v50);
      id v52 = v51;
      uint64_t v53 = v50 - 3;
      if (__OFADD__(v50 - 4, 1LL)) {
        break;
      }
      id v54 = sub_100011ADC((uint64_t)v51, "value");
      if (v54
        && (uint64_t v55 = v54, v56 = [v54 valueType], v55, v56))
      {
        uint64_t v57 = objc_opt_self(&OBJC_CLASS___LNEntityValueType);
        if (sub_10006CA4C(v57))
        {
          sub_10001191C(v48);

          id v96 = sub_100011ADC(v95, "value");
          if (v96)
          {
            uint64_t v97 = v96;
            id v98 = [v96 valueType];
            uint64_t v99 = objc_opt_self(&OBJC_CLASS___LNEntityValueType);
            uint64_t v100 = (void *)sub_10006CA4C(v99);
            if (!v100) {
              goto LABEL_60;
            }
            id v101 = [v100 identifier];
            uint64_t v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(v101);
            uint64_t v104 = v103;

            uint64_t v105 = v126[8];
            sub_10000AFB0();
            sub_100011C38(v102, v104, v105);
            uint64_t v107 = v106;
            swift_bridgeObjectRelease(v104);
            sub_10001198C();
            if (v107)
            {
              id v108 = LNSuggestedActionDialogParameterKeyEntityType;
              sub_10006C9B0();
              uint64_t v109 = sub_10006C9F4();
              sub_10006C9DC(v109, v110, v111, v112);
              uint64_t v9 = (void *)v125[0];

              sub_10006C9B8();
            }

            else
            {
LABEL_60:
            }

            uint64_t v113 = v126;
            id v114 = [v97 displayRepresentation];
            if (v114)
            {
              uint64_t v115 = v114;
              id v116 = LNSuggestedActionDialogParameterKeyEntityName;
              id v117 = [v115 title];
              if (sub_100008D74(v113 + 2, v113[5])[1])
              {
                sub_10000AFB0();
                NSString v118 = sub_10006CA30();
                sub_10001198C();
              }

              else
              {
                NSString v118 = 0LL;
              }

              id v119 = [v117 localizedStringForLocaleIdentifier:v118];

              sub_10006CA44();
              sub_10006C9B0();
              uint64_t v120 = sub_10006C9F4();
              sub_10000964C(v120, v121, v116, v122);
              uint64_t v9 = (void *)v125[0];

              goto LABEL_53;
            }
          }

          return v9;
        }
      }

      else
      {
        id v56 = v52;
      }

      ++v50;
      if (v53 == v49) {
        goto LABEL_39;
      }
    }

    __break(1u);
LABEL_69:
    sub_10000AE38();
  }

LABEL_39:
  sub_10001191C(v48);
  return v9;
}

    if (v6 < v3)
    {
      if (__OFSUB__(v6, v9)) {
        goto LABEL_146;
      }
      if (v6 - v9 < v104)
      {
        if (__OFADD__(v9, v104)) {
          goto LABEL_149;
        }
        if (v9 + v104 >= v3) {
          uint64_t v30 = v3;
        }
        else {
          uint64_t v30 = v9 + v104;
        }
        if (v30 < v9) {
          goto LABEL_150;
        }
        if (v6 != v30)
        {
          uint64_t v31 = (uint64_t *)(v7 + 16 * v6);
          do
          {
            uint64_t v32 = (uint64_t *)(v7 + 16 * v6);
            __n128 result = *v32;
            uint64_t v33 = v32[1];
            uint64_t v34 = v9;
            char v35 = v31;
            do
            {
              id v36 = *(v35 - 2);
              uint64_t v37 = *(v35 - 1);
              if (result == v36 && v33 == v37) {
                break;
              }
              __n128 result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v33, v36, v37, 1LL);
              if ((result & 1) == 0) {
                break;
              }
              if (!v7) {
                goto LABEL_152;
              }
              __n128 result = *v35;
              uint64_t v33 = v35[1];
              *(_OWORD *)char v35 = *((_OWORD *)v35 - 1);
              *(v35 - 1) = v33;
              *(v35 - 2) = result;
              v35 -= 2;
              ++v34;
            }

            while (v6 != v34);
            ++v6;
            v31 += 2;
          }

          while (v6 != v30);
          uint64_t v6 = v30;
        }
      }
    }

    if (v6 < v9)
    {
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
      return result;
    }

    __n128 result = swift_isUniquelyReferenced_nonNull_native(v8);
    if ((result & 1) == 0)
    {
      __n128 result = (uint64_t)sub_10008B000(0LL, *((void *)v8 + 2) + 1LL, 1, v8);
      id v8 = (char *)result;
    }

    uint64_t v40 = *((void *)v8 + 2);
    id v39 = *((void *)v8 + 3);
    uint64_t v41 = v40 + 1;
    if (v40 >= v39 >> 1)
    {
      __n128 result = (uint64_t)sub_10008B000((char *)(v39 > 1), v40 + 1, 1, v8);
      id v8 = (char *)result;
    }

    *((void *)v8 + 2) = v41;
    uint64_t v42 = v8 + 32;
    uint64_t v43 = &v8[16 * v40 + 32];
    *(void *)uint64_t v43 = v9;
    *((void *)v43 + 1) = v6;
    if (v40) {
      break;
    }
    uint64_t v41 = 1LL;
LABEL_108:
    id v3 = v105;
    if (v6 >= v105)
    {
      uint64_t v5 = v103;
LABEL_114:
      __n128 result = (uint64_t)v8;
      uint64_t v103 = v5;
      if (v41 < 2)
      {
LABEL_125:
        swift_bridgeObjectRelease(result);
        v103[2] = 0LL;
        return swift_bridgeObjectRelease(v103);
      }

      uint64_t v95 = *v101;
      while (1)
      {
        id v96 = v41 - 2;
        if (v41 < 2) {
          goto LABEL_142;
        }
        if (!v95) {
          goto LABEL_155;
        }
        unint64_t v94 = result;
        uint64_t v97 = *(void *)(result + 32 + 16 * v96);
        id v98 = *(void *)(result + 32 + 16 * (v41 - 1) + 8);
        __n128 result = sub_1000E2328( (char *)(v95 + 16 * v97),  (char *)(v95 + 16LL * *(void *)(result + 32 + 16 * (v41 - 1))),  v95 + 16 * v98,  v107);
        if (v1) {
          goto LABEL_111;
        }
        if (v98 < v97) {
          goto LABEL_143;
        }
        __n128 result = swift_isUniquelyReferenced_nonNull_native(v94);
        if ((result & 1) == 0)
        {
          __n128 result = (uint64_t)sub_10008B0EC(v94);
          unint64_t v94 = result;
        }

        if (v96 >= *(void *)(v94 + 16)) {
          goto LABEL_144;
        }
        uint64_t v99 = (void *)(v94 + 32 + 16 * v96);
        *uint64_t v99 = v97;
        v99[1] = v98;
        uint64_t v100 = *(void *)(v94 + 16);
        if (v41 > v100) {
          goto LABEL_145;
        }
        memmove((void *)(v94 + 32 + 16 * (v41 - 1)), (const void *)(v94 + 32 + 16 * v41), 16 * (v100 - v41));
        __n128 result = v94;
        *(void *)(v94 + 1sub_10000AC58(v0 + 6) = v100 - 1;
        uint64_t v41 = v100 - 1;
        if (v100 <= 2) {
          goto LABEL_125;
        }
      }
    }
  }

  uint64_t v106 = v6;
  while (1)
  {
    char v44 = v41 - 1;
    if (v41 >= 4)
    {
      uint64_t v49 = &v42[2 * v41];
      uint64_t v50 = *(v49 - 8);
      id v51 = *(v49 - 7);
      uint64_t v55 = __OFSUB__(v51, v50);
      id v52 = v51 - v50;
      if (v55) {
        goto LABEL_130;
      }
      id v54 = *(v49 - 6);
      uint64_t v53 = *(v49 - 5);
      uint64_t v55 = __OFSUB__(v53, v54);
      uint64_t v47 = v53 - v54;
      unint64_t v48 = v55;
      if (v55) {
        goto LABEL_131;
      }
      id v56 = v41 - 2;
      uint64_t v57 = &v42[2 * v41 - 4];
      uint64_t v59 = *v57;
      uint64_t v58 = v57[1];
      uint64_t v55 = __OFSUB__(v58, v59);
      uint64_t v60 = v58 - v59;
      if (v55) {
        goto LABEL_132;
      }
      uint64_t v55 = __OFADD__(v47, v60);
      uint64_t v61 = v47 + v60;
      if (v55) {
        goto LABEL_134;
      }
      if (v61 >= v52)
      {
        uint64_t v79 = &v42[2 * v44];
        id v81 = *v79;
        char v80 = v79[1];
        uint64_t v55 = __OFSUB__(v80, v81);
        uint64_t v82 = v80 - v81;
        if (v55) {
          goto LABEL_140;
        }
        uint64_t v72 = v47 < v82;
        goto LABEL_97;
      }
    }

    else
    {
      if (v41 != 3)
      {
        uint64_t v73 = *((void *)v8 + 4);
        id v74 = *((void *)v8 + 5);
        uint64_t v55 = __OFSUB__(v74, v73);
        id v66 = v74 - v73;
        NSString v67 = v55;
        goto LABEL_91;
      }

      id v46 = *((void *)v8 + 4);
      uint64_t v45 = *((void *)v8 + 5);
      uint64_t v55 = __OFSUB__(v45, v46);
      uint64_t v47 = v45 - v46;
      unint64_t v48 = v55;
    }

    if ((v48 & 1) != 0) {
      goto LABEL_133;
    }
    id v56 = v41 - 2;
    uint64_t v62 = &v42[2 * v41 - 4];
    id v64 = *v62;
    uint64_t v63 = v62[1];
    id v65 = __OFSUB__(v63, v64);
    id v66 = v63 - v64;
    NSString v67 = v65;
    if (v65) {
      goto LABEL_135;
    }
    unint64_t v68 = &v42[2 * v44];
    char v70 = *v68;
    uint64_t v69 = v68[1];
    uint64_t v55 = __OFSUB__(v69, v70);
    uint64_t v71 = v69 - v70;
    if (v55) {
      goto LABEL_137;
    }
    if (__OFADD__(v66, v71)) {
      goto LABEL_139;
    }
    if (v66 + v71 >= v47)
    {
      uint64_t v72 = v47 < v71;
LABEL_97:
      if (v72) {
        char v44 = v56;
      }
      goto LABEL_99;
    }

uint64_t sub_10006BC90()
{
  return v0;
}

uint64_t sub_10006BCBC()
{
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t type metadata accessor for SuggestedActionsGenerator()
{
  return objc_opt_self(&OBJC_CLASS____TtC10LinkDaemon25SuggestedActionsGenerator);
}

id sub_10006BCFC()
{
  id v1 = [v0 identifier];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v4 = v3;

  return sub_10006BD74(v2, v4);
}

id sub_10006BD74(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [v4 initWithEnumerationIdentifier:v5];

  return v6;
}

id sub_10006BDE4(void *a1, void *a2, uint64_t a3)
{
  id v4 = v3;
  if (a3)
  {
    type metadata accessor for LNSuggestedActionDialogParameterKey(0LL);
    sub_1000118A0( &qword_100130900,  (uint64_t (*)(uint64_t))type metadata accessor for LNSuggestedActionDialogParameterKey,  (uint64_t)&unk_1000F51EC);
    v8.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a3);
  }

  else
  {
    v8.super.Class isa = 0LL;
  }

  id v9 = [v4 initWithAction:a1 systemProtocol:a2 dialogParameters:v8.super.isa];

  return v9;
}

uint64_t sub_10006BEA4(uint64_t a1, char a2, void *a3, void (*a4)(void), uint64_t *a5)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return swift_bridgeObjectRelease(a1);
  }
  swift_bridgeObjectRetain();
  uint64_t v32 = v7;
  for (unint64_t i = (void **)(v7 + 48); ; i += 3)
  {
    uint64_t v10 = (uint64_t)*(i - 2);
    uint64_t v9 = (uint64_t)*(i - 1);
    uint64_t v11 = *i;
    v37[0] = v10;
    v37[1] = v9;
    id v12 = (void *)*a3;
    sub_10001C1BC();
    id v13 = v11;
    unint64_t v15 = sub_10003F068();
    uint64_t v16 = v12[2];
    BOOL v17 = (v14 & 1) == 0;
    if (__OFADD__(v16, v17))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_20;
    }

    char v18 = v14;
    if (v12[3] < v16 + v17) {
      break;
    }
    if ((a2 & 1) != 0)
    {
      if ((v14 & 1) != 0) {
        goto LABEL_14;
      }
    }

    else
    {
      sub_100008DB0(a5);
      _NativeDictionary.copy()();
      if ((v18 & 1) != 0) {
        goto LABEL_14;
      }
    }

void sub_10006C148(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = static _DictionaryStorage.copy(original:)(a1);
  uint64_t v5 = (void *)v4;
  int64_t v6 = 0LL;
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v8 = a1 + 64;
  uint64_t v7 = v9;
  uint64_t v10 = 1LL << *(_BYTE *)(v8 - 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & v7;
  uint64_t v35 = v8;
  int64_t v36 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v37 = v4 + 64;
  uint64_t v38 = (void *)(a2 + 16);
  if ((v11 & v7) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  int64_t v41 = v6;
  for (unint64_t i = v13 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v17 << 6))
  {
    uint64_t v19 = (uint64_t *)(*(void *)(v39 + 48) + 16 * i);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v22 = *(void **)(*(void *)(v39 + 56) + 8 * i);
    uint64_t v23 = sub_100008D74(v38, *(void *)(v40 + 40))[1];
    swift_bridgeObjectRetain();
    id v24 = v22;
    if (v23)
    {
      swift_bridgeObjectRetain();
      NSString v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v23);
    }

    else
    {
      NSString v25 = 0LL;
    }

    id v26 = [v22 localizedStringForLocaleIdentifier:v25];

    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    uint64_t v29 = v28;

    *(void *)(v37 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    Swift::String v30 = (void *)(v5[6] + 16 * i);
    *Swift::String v30 = v20;
    v30[1] = v21;
    uint64_t v31 = (uint64_t *)(v5[7] + 16 * i);
    uint64_t *v31 = v27;
    v31[1] = v29;
    uint64_t v32 = v5[2];
    BOOL v33 = __OFADD__(v32, 1LL);
    uint64_t v34 = v32 + 1;
    if (v33)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }

    _OWORD v5[2] = v34;
    int64_t v6 = v41;
    if (v12) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v15 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      goto LABEL_27;
    }
    if (v15 >= v36) {
      goto LABEL_25;
    }
    unint64_t v16 = *(void *)(v35 + 8 * v15);
    int64_t v17 = v6 + 1;
    if (!v16)
    {
      int64_t v17 = v6 + 2;
      if (v6 + 2 >= v36) {
        goto LABEL_25;
      }
      unint64_t v16 = *(void *)(v35 + 8 * v17);
      if (!v16)
      {
        int64_t v17 = v6 + 3;
        if (v6 + 3 >= v36) {
          goto LABEL_25;
        }
        unint64_t v16 = *(void *)(v35 + 8 * v17);
        if (!v16) {
          break;
        }
      }
    }

uint64_t sub_10006C3E8(void *a1)
{
  id v1 = [a1 typeSpecificMetadata];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  type metadata accessor for LNActionTypeSpecificMetadataKey(0LL);
  uint64_t v4 = v3;
  uint64_t v5 = sub_1000118A0( &qword_1001308F0,  (uint64_t (*)(uint64_t))type metadata accessor for LNActionTypeSpecificMetadataKey,  (uint64_t)&unk_1000F5230);
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, v4, (char *)&type metadata for Any + 8, v5);

  return v6;
}

uint64_t sub_10006C474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  char v44 = &type metadata for SiriDiscoverabilityClosedAppSuggestionStrategy;
  uint64_t v45 = &off_100124440;
  char v14 = (void *)swift_allocObject(&unk_100125138, 48LL, 7LL);
  v43[0] = v14;
  v14[2] = a3;
  uint64_t v14[3] = a4;
  v14[4] = a5;
  uint64_t v14[5] = a6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v15 = objc_msgSend(a7, "parameters", swift_bridgeObjectRetain().n128_f64[0]);
  uint64_t v16 = sub_10000A1A0(0LL, &qword_1001309A8, &OBJC_CLASS___LNProperty_ptr);
  unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

  swift_bridgeObjectRetain();
  sub_1000699A4(v17, a1, a2);
  uint64_t v19 = v18;
  swift_bridgeObjectRelease(v17);
  if (!v19) {
    goto LABEL_10;
  }
  id v20 = [v19 value];
  if (!v20) {
    goto LABEL_8;
  }
  uint64_t v21 = v20;
  id v22 = [v20 value];
  _bridgeAnyObjectToAny(_:)(v42, v22);
  swift_unknownObjectRelease(v22);
  if ((swift_dynamicCast(v41, v42, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {

LABEL_8:
LABEL_10:
    uint64_t v39 = 0LL;
    goto LABEL_11;
  }

  uint64_t v24 = v41[0];
  uint64_t v23 = v41[1];
  id v25 = [v21 valueType];
  uint64_t v26 = objc_opt_self(&OBJC_CLASS___LNLinkEnumerationValueType);
  uint64_t v27 = swift_dynamicCastObjCClass(v25, v26);
  if (!v27) {
    goto LABEL_9;
  }
  uint64_t v28 = (void *)v27;
  uint64_t v29 = sub_100008D74(v43, (uint64_t)v44)[2];
  id v30 = objc_msgSend(v28, "enumerationIdentifier", swift_bridgeObjectRetain().n128_f64[0]);
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  uint64_t v33 = v32;

  uint64_t v34 = (void *)sub_100011C98(v31, v33, v29);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v29);
  if (!v34)
  {
LABEL_9:

    swift_bridgeObjectRelease(v23);
    goto LABEL_10;
  }

  id v35 = [v34 cases];
  uint64_t v36 = sub_10000A1A0(0LL, &qword_100131BE8, &OBJC_CLASS___LNEnumCaseMetadata_ptr);
  unint64_t v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v35, v36);

  swift_bridgeObjectRetain();
  sub_1000699A4(v37, v24, v23);
  uint64_t v39 = v38;
  swift_bridgeObjectRelease(v37);

  swift_bridgeObjectRelease(v23);
LABEL_11:
  sub_10000AC58(v43);
  return v39;
}

unint64_t sub_10006C764()
{
  unint64_t result = qword_100132A38;
  if (!qword_100132A38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F6988, &type metadata for SuggestedActionsGeneratorDialogingError);
    atomic_store(result, (unint64_t *)&qword_100132A38);
  }

  return result;
}

uint64_t sub_10006C7A0()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10006C7D4(void *a1, void *a2)
{
  return sub_10006A41C(a1, a2, v2);
}

uint64_t initializeBufferWithCopyOfBuffer for SuggestedActionsGeneratorDialogingError(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  id v5 = *(id *)a2;
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

void destroy for SuggestedActionsGeneratorDialogingError(id *a1)
{
}

uint64_t assignWithCopy for SuggestedActionsGeneratorDialogingError(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  id v5 = *(id *)a2;
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;

  return a1;
}

uint64_t assignWithTake for SuggestedActionsGeneratorDialogingError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = v3;

  return a1;
}

uint64_t getEnumTagSinglePayload for SuggestedActionsGeneratorDialogingError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SuggestedActionsGeneratorDialogingError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10006C948(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SuggestedActionsGeneratorDialogingError()
{
  return &type metadata for SuggestedActionsGeneratorDialogingError;
}

uint64_t sub_10006C968(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, a1, a2, 0LL);
}

void sub_10006C984(unint64_t a1)
{
}

  ;
}

uint64_t sub_10006C9B0()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_10006C9B8()
{
  return swift_bridgeObjectRelease(0x8000000000000000LL);
}

uint64_t sub_10006C9C0()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10006C9CC()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

id sub_10006C9DC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_10000964C(a1, a2, v4, a4);
}

  ;
}

uint64_t sub_10006C9F4()
{
  return v0;
}

id sub_10006CA0C()
{
  return objc_msgSend(v2, *(SEL *)(v1 + 16), v0);
}

void sub_10006CA1C()
{
}

uint64_t sub_10006CA28()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

NSString sub_10006CA30()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_10006CA38()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

uint64_t sub_10006CA44()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t sub_10006CA4C(uint64_t a1)
{
  return swift_dynamicCastObjCClass(v1, a1);
}

uint64_t sub_10006CA58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10006C474(a1, a2, a3, a4, a5, a6, v6);
}

void sub_10006CA60(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (qword_100130240 != -1) {
    swift_once(&qword_100130240, sub_10006D720);
  }
  sub_10001DEBC(v47, &unk_100132A58);
  sub_10001D9AC(v47);
  if (qword_100130248 != -1) {
    swift_once(&qword_100130248, sub_10006D7FC);
  }
  sub_10001DECC((uint64_t)&qword_100132B00);
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  == infix<A>(_:_:)();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  if (qword_100130250 != -1) {
    swift_once(&qword_100130250, sub_10006D828);
  }
  sub_10001DECC((uint64_t)&qword_100132B18);
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  == infix<A>(_:_:)();
  && infix(_:_:)(v11, v13, v15, v16, v17, v18);
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000AEE8();
  sub_10000ADB0();
  sub_10001DEBC(v40, v47);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)( v20,  v22,  v24,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  (uint64_t)&v41);
  sub_10001191C(v24);
  sub_10001191C(v22);
  sub_10001DAF0(v47);
  sub_10001DEBC(v48, &v41);
  uint64_t v43 = &type metadata for Table;
  char v44 = &protocol witness table for Table;
  uint64_t v41 = sub_10000C254((uint64_t)&unk_100125218, 184LL);
  sub_10001DEBC((void *)(v41 + 16), v48);
  uint64_t v25 = Connection.pluck(_:)(&v41);
  sub_10000AC58(&v41);
  if (!v38)
  {
    if (v25)
    {
      sub_10006D940((uint64_t *)v45);
      __int128 v37 = v45[1];
      __int128 v39 = v45[0];
      __int128 v35 = v45[3];
      __int128 v36 = v45[2];
      __int128 v33 = v45[5];
      __int128 v34 = v45[4];
      uint64_t v26 = v46;
      sub_10000AEE8();
      swift_bridgeObjectRelease();
      __int128 v28 = v33;
      __int128 v27 = v34;
      __int128 v30 = v35;
      __int128 v29 = v36;
      __int128 v32 = v37;
      __int128 v31 = v39;
    }

    else
    {
      uint64_t v26 = 0LL;
      __int128 v31 = 0uLL;
      __int128 v32 = 0uLL;
      __int128 v29 = 0uLL;
      __int128 v30 = 0uLL;
      __int128 v27 = 0uLL;
      __int128 v28 = 0uLL;
    }

    *(_OWORD *)a5 = v31;
    *(_OWORD *)(a5 + 1sub_10000AC58(v0 + 6) = v32;
    *(_OWORD *)(a5 + 32) = v29;
    *(_OWORD *)(a5 + 48) = v30;
    *(_OWORD *)(a5 + 6sub_10000AC58(v0 + 4) = v27;
    *(_OWORD *)(a5 + 8sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v28;
    *(void *)(a5 + 9sub_10000AC58(v0 + 6) = v26;
  }

  sub_10001DEE8();
}

uint64_t sub_10006CD38(uint64_t a1, uint64_t a2)
{
  if (qword_100130240 != -1) {
    swift_once(&qword_100130240, sub_10006D720);
  }
  sub_10001DEBC(v18, &unk_100132A58);
  if (a2)
  {
    sub_10001D9AC(v18);
    if (qword_100130250 != -1) {
      swift_once(&qword_100130250, sub_10006D828);
    }
    sub_10001DECC((uint64_t)&qword_100132B18);
    v16[0] = a1;
    v16[1] = a2;
    == infix<A>(_:_:)();
    uint64_t v7 = v6;
    uint64_t v3 = v8;
    uint64_t v10 = v9;
    sub_10001DEBC(&v15, v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    QueryType.filter(_:)( v7,  v3,  v10,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  (uint64_t)v16);
    sub_10001191C(v10);
    sub_10001191C(v3);
    sub_10001DAF0(v18);
    uint64_t v11 = v16;
  }

  else
  {
    sub_10001D9AC(v18);
    uint64_t v11 = v18;
  }

  sub_10001DEBC(v17, v11);
  v16[3] = &type metadata for Table;
  void v16[4] = &protocol witness table for Table;
  v16[0] = sub_10000C254((uint64_t)&unk_100125218, 184LL);
  sub_10001DEBC((void *)(v16[0] + 16LL), v17);
  Connection.prepareRowIterator(_:)(v16);
  uint64_t v12 = sub_10000AC58(v16);
  if (!v2)
  {
    __chkstk_darwin(v12);
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    uint64_t v3 = v14;
    swift_release();
    sub_10000AEE8();
    swift_release();
  }

  return v3;
}

void sub_10006CFAC(__int128 *a1, uint64_t a2)
{
  if (qword_100130240 != -1) {
    swift_once(&qword_100130240, sub_10006D720);
  }
  sub_10001DEBC(v125, &unk_100132A58);
  sub_10001DEBC(v120, &unk_100132A58);
  sub_10001D9AC(v125);
  if (qword_100130248 != -1) {
    swift_once(&qword_100130248, sub_10006D7FC);
  }
  uint64_t v5 = sub_10001DECC((uint64_t)&qword_100132B00);
  __int128 v98 = *a1;
  <- infix<A>(_:_:)( v5,  v6,  v7,  (uint64_t)&v98,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
  uint64_t v8 = sub_100008DB0(&qword_1001323E0);
  uint64_t v9 = sub_10000C254(v8, 512LL);
  *(_OWORD *)(v9 + 1sub_10000AC58(v0 + 6) = xmmword_1000F69D0;
  if (qword_100130250 != -1) {
    swift_once(&qword_100130250, sub_10006D828);
  }
  uint64_t v93 = a2;
  uint64_t v10 = sub_10001DECC((uint64_t)&qword_100132B18);
  __int128 v98 = a1[1];
  uint64_t v95 = v9 + 32;
  sub_10006E2AC( v10,  v11,  v12,  (uint64_t)&v98,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
  if (qword_100130258 != -1) {
    swift_once(&qword_100130258, sub_10006D84C);
  }
  uint64_t v13 = qword_100132B30;
  uint64_t v14 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  JSONEncoder.init()();
  uint64_t v15 = LNStaticDeferredLocalizedString.asLocalizedStringResourceJSON(encoder:)();
  if (v2)
  {
    uint64_t v17 = sub_10001DF10();
    sub_10006E2D4( v17,  v18,  v19,  v20,  v21,  v22,  v23,  v24,  v87,  v90,  a2,  v95,  v97._countAndFlagsBits,  (uint64_t)v97._object,  v98,  *((uint64_t *)&v98 + 1),  v99,  v100,  v101,  v102,  v103,  v104,  v105,  v106,  v107,  v108,  v109,  v110,  v111,  v112,  v113,  v114,  v115,  v116,  v117,  v118,  v119[0]);
    uint64_t v25 = sub_10001DEBC(&v98, v120);
    sub_10006E2CC((uint64_t)v25, v26, v27, v28, v29, v30);
LABEL_21:
    sub_10001DC30(v96);
    *(void *)(v9 + 1sub_10000AC58(v0 + 6) = 0LL;
    swift_setDeallocating(v9);
    sub_100058874();
    goto LABEL_22;
  }

  uint64_t v31 = v15;
  uint64_t v32 = v16;
  sub_10001DF10();
  *(void *)&__int128 v98 = v31;
  *((void *)&v98 + 1) = v32;
  uint64_t v88 = v9 + 112;
  sub_10006E2B4( v13,  v33,  v34,  (uint64_t)&v98,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
  sub_10000ADB0();
  if (qword_100130260 != -1) {
    swift_once(&qword_100130260, sub_10006D878);
  }
  uint64_t v35 = sub_10001DECC((uint64_t)&qword_100132B48);
  __int128 v98 = *(__int128 *)((char *)a1 + 40);
  uint64_t v91 = v9 + 192;
  sub_10006E2AC( v35,  v36,  v37,  (uint64_t)&v98,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
  if (qword_100130268 != -1) {
    swift_once(&qword_100130268, sub_10006D89C);
  }
  uint64_t v38 = sub_10001DECC((uint64_t)&qword_100132B60);
  __int128 v98 = *(__int128 *)((char *)a1 + 56);
  sub_10006E2AC( v38,  v39,  v40,  (uint64_t)&v98,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
  if (qword_100130270 != -1) {
    swift_once(&qword_100130270, sub_10006D8C0);
  }
  uint64_t v41 = sub_10001DECC((uint64_t)&qword_100132B78);
  __int128 v98 = *(__int128 *)((char *)a1 + 72);
  sub_10006E2AC( v41,  v42,  v43,  (uint64_t)&v98,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
  if (qword_100130278 != -1) {
    swift_once(&qword_100130278, sub_10006D8E4);
  }
  uint64_t v44 = qword_100132B90;
  Swift::String v51 = LNValue.asJson()();
  if (v52)
  {
    sub_10006E2D4( v51._countAndFlagsBits,  (uint64_t)v51._object,  v45,  v46,  v47,  v48,  v49,  v50,  v88,  v91,  v93,  v95,  v97._countAndFlagsBits,  (uint64_t)v97._object,  v98,  *((uint64_t *)&v98 + 1),  v99,  v100,  v101,  v102,  v103,  v104,  v105,  v106,  v107,  v108,  v109,  v110,  v111,  v112,  v113,  v114,  v115,  v116,  v117,  v118,  v119[0]);
    uint64_t v53 = sub_10001DEBC(&v98, v120);
    sub_10006E2CC((uint64_t)v53, v54, v55, v56, v57, v58);
    sub_10001DC30((void *)(v9 + 352));
    sub_10001DC30((void *)(v9 + 272));
    sub_10001DC30(v92);
    sub_10001DC30(v89);
    goto LABEL_21;
  }

  Swift::String v97 = v51;
  sub_10006E2B4( v44,  (uint64_t)v51._object,  v45,  (uint64_t)&v97,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
  sub_10000ADB0();
  uint64_t v59 = QueryType.insert(_:_:)((uint64_t)v119);
  uint64_t v61 = v60;
  uint64_t v63 = v62;
  swift_setDeallocating(v9);
  uint64_t v64 = sub_100058874();
  sub_10006E2D4( v64,  v65,  v66,  v67,  v68,  v69,  v70,  v71,  v88,  v91,  v93,  v95,  v97._countAndFlagsBits,  (uint64_t)v97._object,  v98,  *((uint64_t *)&v98 + 1),  v99,  v100,  v101,  v102,  v103,  v104,  v105,  v106,  v107,  v108,  v109,  v110,  v111,  v112,  v113,  v114,  v115,  v116,  v117,  v118,  v119[0]);
  uint64_t v72 = sub_10001DEBC(&v98, v120);
  sub_10006E2CC((uint64_t)v72, v73, v74, v75, v76, v77);
  v127.template._uint64_t countAndFlagsBits = v59;
  v127.template._object = v61;
  v127.bindings._rawValue = v63;
  Connection.run(_:)(v127);
  if (v78)
  {
    swift_bridgeObjectRelease();
    sub_10001198C();
  }

  else
  {
    swift_bridgeObjectRelease();
    sub_10001198C();
    uint64_t v79 = *((void *)a1 + 12);
    uint64_t v126 = v79;
    uint64_t v80 = *(void *)(v79 + 16);
    if (v80)
    {
      swift_retain();
      sub_1000470A4(&v126);
      id v81 = (void **)(v79 + 64);
      do
      {
        uint64_t v82 = (uint64_t)*(v81 - 3);
        uint64_t v83 = (uint64_t)*(v81 - 2);
        uint64_t v84 = (uint64_t)*(v81 - 1);
        char v85 = *v81;
        *(void *)&__int128 v121 = *(v81 - 4);
        *((void *)&v121 + 1) = v82;
        uint64_t v122 = v83;
        uint64_t v123 = v84;
        uint64_t v124 = v85;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v86 = v85;
        sub_100047868(&v121, v94);

        sub_10000ADB0();
        sub_10001198C();
        v81 += 5;
        --v80;
      }

      while (v80);
      sub_10000A054(&v126);
      sub_10001DF10();
    }
  }

uint64_t sub_10006D4E8(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_1000119E4();
  sub_10006E29C();
  sub_10001BC70();
  char v4 = *(void **)(v1 + 16);
  sub_1000119E4();
  sub_10006E29C();
  sub_10001BC70();
  id v5 = *(id *)(v2 + 32);
  sub_10006E2DC();

  sub_1000119E4();
  sub_10006E29C();
  sub_10001BC70();
  sub_1000119E4();
  sub_10006E29C();
  sub_10001BC70();
  uint64_t v6 = *(void **)(v2 + 72);
  sub_1000119E4();
  sub_10006E29C();
  sub_10001BC70();
  id v7 = *(id *)(v2 + 88);
  sub_10006E2DC();

  uint64_t v8 = *(void *)(v2 + 96);
  swift_bridgeObjectRetain();
  sub_10001AC60(a1, v8);
  return swift_bridgeObjectRelease();
}

void sub_10006D5A0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  BOOL v7 = v4 == *a2 && v5 == v6;
  if (v7 || (sub_10001BB00(v4, v5, *a2, v6) & 1) != 0)
  {
    uint64_t v8 = a1[2];
    uint64_t v9 = a1[3];
    uint64_t v10 = a2[2];
    uint64_t v11 = a2[3];
    BOOL v12 = v8 == v10 && v9 == v11;
    if (v12 || (sub_10001BB00(v8, v9, v10, v11) & 1) != 0)
    {
      sub_10000A1A0(0LL, (unint64_t *)&qword_1001317F0, &OBJC_CLASS___NSObject_ptr);
      if ((static NSObject.== infix(_:_:)(a1[4], a2[4]) & 1) != 0)
      {
        uint64_t v13 = a1[5];
        uint64_t v14 = a1[6];
        uint64_t v15 = a2[5];
        uint64_t v16 = a2[6];
        BOOL v17 = v13 == v15 && v14 == v16;
        if (v17 || (sub_10001BB00(v13, v14, v15, v16) & 1) != 0)
        {
          uint64_t v18 = a1[7];
          uint64_t v19 = a1[8];
          uint64_t v20 = a2[7];
          uint64_t v21 = a2[8];
          BOOL v22 = v18 == v20 && v19 == v21;
          if (v22 || (sub_10001BB00(v18, v19, v20, v21) & 1) != 0)
          {
            uint64_t v23 = a1[9];
            uint64_t v24 = a1[10];
            uint64_t v25 = a2[9];
            uint64_t v26 = a2[10];
            BOOL v27 = v23 == v25 && v24 == v26;
            if ((v27 || (sub_10001BB00(v23, v24, v25, v26) & 1) != 0)
              && (static NSObject.== infix(_:_:)(a1[11], a2[11]) & 1) != 0)
            {
              sub_100013AB4();
            }
          }
        }
      }
    }
  }

void sub_10006D6B0()
{
}

void sub_10006D6EC(uint64_t a1)
{
}

void *sub_10006D720()
{
  return memcpy(&unk_100132A58, __src, 0xA8uLL);
}

uint64_t sub_10006D774()
{
  uint64_t v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }

  uint64_t v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    uint64_t v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }

  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184LL, 7LL);
}

uint64_t sub_10006D7FC(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_100132B00, 0x6E6564496E617073LL, 0xEE00726569666974LL);
}

uint64_t sub_10006D828(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_100132B18, 0xD000000000000010LL, 0x80000001000F96E0LL);
}

uint64_t sub_10006D84C(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_100132B30, 0x79747265706F7270LL, 0xED0000656C746954LL);
}

uint64_t sub_10006D878(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_100132B48, 0xD000000000000010LL, 0x80000001000F9E60LL);
}

uint64_t sub_10006D89C(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_100132B60, 0xD000000000000011LL, 0x80000001000FADC0LL);
}

uint64_t sub_10006D8C0(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_100132B78, 0xD000000000000017LL, 0x80000001000FADA0LL);
}

uint64_t sub_10006D8E4(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_100132B90, 0x65756C6176LL, 0xE500000000000000LL);
}

uint64_t sub_10006D900@<X0>(uint64_t a1@<X8>)
{
  return sub_10006DEB8((uint64_t)v3, a1);
}

uint64_t sub_10006D938@<X0>(uint64_t a1@<X8>)
{
  return sub_10006D900(a1);
}

uint64_t sub_10006D940@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100130250 != -1) {
    swift_once(&qword_100130250, sub_10006D828);
  }
  Row.get<A>(_:)();
  uint64_t v34 = v36;
  uint64_t v35 = v37;
  if (qword_100130248 != -1) {
    swift_once(&qword_100130248, sub_10006D7FC);
  }
  Row.get<A>(_:)();
  uint64_t v6 = v36;
  uint64_t v5 = v37;
  swift_retain();
  BOOL v7 = sub_100047B4C(v34, v35, v6, v5);
  uint64_t v31 = v6;
  uint64_t v32 = v7;
  uint64_t v33 = v5;
  swift_release();
  if (qword_100130258 != -1) {
    swift_once(&qword_100130258, sub_10006D84C);
  }
  Row.get<A>(_:)();
  uint64_t v8 = v36;
  uint64_t v9 = v37;
  if (qword_100130260 != -1) {
    swift_once(&qword_100130260, sub_10006D878);
  }
  Row.get<A>(_:)();
  uint64_t v10 = v36;
  uint64_t v11 = v37;
  if (qword_100130268 != -1) {
    swift_once(&qword_100130268, sub_10006D89C);
  }
  Row.get<A>(_:)();
  uint64_t v30 = v8;
  uint64_t v13 = v36;
  uint64_t v12 = v37;
  if (qword_100130270 != -1) {
    swift_once(&qword_100130270, sub_10006D8C0);
  }
  Row.get<A>(_:)();
  uint64_t v28 = v4;
  uint64_t v29 = v9;
  uint64_t v15 = v36;
  uint64_t v14 = v37;
  if (qword_100130278 != -1) {
    swift_once(&qword_100130278, sub_10006D8E4);
  }
  Row.get<A>(_:)();
  uint64_t v26 = v36;
  uint64_t v27 = v37;
  sub_10000A1A0(0LL, (unint64_t *)&qword_100131250, &OBJC_CLASS___LNStaticDeferredLocalizedString_ptr);
  uint64_t v16 = LNStaticDeferredLocalizedString.init(localizedStringResourceJSON:)(v30, v29);
  uint64_t v30 = sub_10000A1A0(0LL, &qword_100130BE8, &OBJC_CLASS___LNValue_ptr);
  uint64_t v17 = type metadata accessor for URL(0LL);
  uint64_t v18 = (uint64_t)v28;
  sub_100009E60((uint64_t)v28, 1LL, 1LL, v17);
  uint64_t v19 = static LNValue.fromJSON(_:bundleURL:effectiveBundleIdentifier:)(v26, v27, v18, 0LL);
  sub_100028208((uint64_t)v28);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v22 = v34;
  uint64_t v21 = v35;
  uint64_t v24 = v32;
  uint64_t v23 = v33;
  *a1 = v31;
  a1[1] = v23;
  a1[2] = v22;
  a1[3] = v21;
  a1[4] = v16;
  a1[5] = v10;
  a1[6] = v11;
  a1[7] = v13;
  a1[8] = v12;
  a1[9] = v15;
  a1[10] = v14;
  a1[11] = v19;
  a1[12] = (uint64_t)v24;
  return result;
}

void *sub_10006DE58@<X0>(void *(*a1)(void *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  uint64_t result = a1(v5);
  if (!v2) {
    return (void *)sub_10006DEB8((uint64_t)v5, a2);
  }
  return result;
}

void *sub_10006DEA0@<X0>(uint64_t a1@<X8>)
{
  return sub_10006DE58(*(void *(**)(void *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_10006DEB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008DB0(&qword_100133600);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t destroy for LNAppShortcutSpanRecord(uint64_t a1)
{
  swift_bridgeObjectRelease(*(void *)(a1 + 48));
  swift_bridgeObjectRelease(*(void *)(a1 + 64));
  swift_bridgeObjectRelease(*(void *)(a1 + 80));

  return swift_bridgeObjectRelease(*(void *)(a1 + 96));
}

void *initializeWithCopy for LNAppShortcutSpanRecord(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v6 = (void *)a2[4];
  uint64_t v5 = a2[5];
  a1[4] = v6;
  a1[5] = v5;
  uint64_t v8 = a2[6];
  uint64_t v7 = a2[7];
  a1[6] = v8;
  a1[7] = v7;
  uint64_t v10 = a2[8];
  uint64_t v9 = a2[9];
  a1[8] = v10;
  a1[9] = v9;
  uint64_t v11 = a2[10];
  uint64_t v12 = (void *)a2[11];
  a1[10] = v11;
  a1[11] = v12;
  uint64_t v13 = a2[12];
  a1[12] = v13;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  id v14 = v6;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  id v15 = v12;
  swift_bridgeObjectRetain(v13);
  return a1;
}

void *assignWithCopy for LNAppShortcutSpanRecord(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = (void *)a2[4];
  uint64_t v9 = (void *)a1[4];
  a1[4] = v8;
  id v10 = v8;

  a1[5] = a2[5];
  uint64_t v11 = a2[6];
  uint64_t v12 = a1[6];
  a1[6] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  a1[7] = a2[7];
  uint64_t v13 = a2[8];
  uint64_t v14 = a1[8];
  a1[8] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  a1[9] = a2[9];
  uint64_t v15 = a2[10];
  uint64_t v16 = a1[10];
  a1[10] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = (void *)a2[11];
  uint64_t v18 = (void *)a1[11];
  a1[11] = v17;
  id v19 = v17;

  uint64_t v20 = a2[12];
  uint64_t v21 = a1[12];
  a1[12] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  return a1;
}

void *initializeWithTake for LNAppShortcutSpanRecord(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x68uLL);
}

void *assignWithTake for LNAppShortcutSpanRecord(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  uint64_t v6 = (void *)a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);

  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = a1[6];
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v10 = a1[8];
  a1[7] = *(void *)(a2 + 56);
  a1[8] = v9;
  swift_bridgeObjectRelease(v10);
  a1[9] = *(void *)(a2 + 72);
  swift_bridgeObjectRelease(a1[10]);
  uint64_t v11 = (void *)a1[11];
  *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);

  uint64_t v12 = a1[12];
  a1[12] = *(void *)(a2 + 96);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for LNAppShortcutSpanRecord(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 104))
    {
      LODWORD(sub_10004BEB8(v0[37], v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_10004BEB8(v0[37], v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_10004BEB8(v0[37], v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LNAppShortcutSpanRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 5sub_10000AC58(v0 + 6) = 0u;
    *(_OWORD *)(result + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = 0u;
    *(_OWORD *)(result + 2sub_10000AC58(v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 10sub_10000AC58(v0 + 4) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 10sub_10000AC58(v0 + 4) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LNAppShortcutSpanRecord()
{
  return &type metadata for LNAppShortcutSpanRecord;
}

unint64_t sub_10006E260()
{
  unint64_t result = qword_100132BA8;
  if (!qword_100132BA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F69F8, &type metadata for LNAppShortcutSpanRecord);
    atomic_store(result, (unint64_t *)&qword_100132BA8);
  }

  return result;
}

uint64_t sub_10006E29C()
{
  return String.hash(into:)(v0, v1, v2);
}

void sub_10006E2AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void sub_10006E2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

  ;
}

void *sub_10006E2CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return sub_10001DAF0((uint64_t *)va);
}

void *sub_10006E2D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  return sub_10001DC30(&a37);
}

uint64_t sub_10006E2DC()
{
  return NSObject.hash(into:)(v0);
}

uint64_t sub_10006E2E8(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = 0LL;
  uint64_t v25 = result;
  uint64_t v26 = *(void *)(result + 16);
  id v19 = _swiftEmptyArrayStorage;
  uint64_t v27 = a3;
LABEL_2:
  uint64_t v4 = v3 << 6;
  while (1)
  {
    if (v26 == v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v19;
    }

    unint64_t v5 = v3;
    if (v3 >= *(void *)(v25 + 16)) {
      break;
    }
    uint64_t v7 = *(void *)(v25 + v4 + 32);
    uint64_t v6 = *(void *)(v25 + v4 + 40);
    uint64_t v8 = *(void *)(v25 + v4 + 56);
    uint64_t v24 = *(void *)(v25 + v4 + 48);
    uint64_t v9 = *(void *)(v25 + v4 + 64);
    uint64_t v10 = *(void *)(v25 + v4 + 72);
    uint64_t v11 = *(void *)(v25 + v4 + 80);
    char v22 = *(_BYTE *)(v25 + v4 + 89);
    char v23 = *(_BYTE *)(v25 + v4 + 88);
    if (v7 == a2 && v6 == a3)
    {
      uint64_t v7 = a2;
      uint64_t v6 = a3;
LABEL_12:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v13 = v19;
      unint64_t result = swift_isUniquelyReferenced_nonNull_native(v19);
      uint64_t v28 = v19;
      if ((result & 1) == 0)
      {
        unint64_t result = (uint64_t)sub_100045674(0LL, v19[2] + 1LL, 1);
        uint64_t v13 = v19;
      }

      unint64_t v15 = v13[2];
      unint64_t v14 = v13[3];
      unint64_t v16 = v15 + 1;
      a3 = v27;
      if (v15 >= v14 >> 1)
      {
        unint64_t v18 = v15 + 1;
        unint64_t v20 = v13[2];
        unint64_t result = (uint64_t)sub_100045674((char *)(v14 > 1), v15 + 1, 1);
        unint64_t v16 = v18;
        unint64_t v15 = v20;
        a3 = v27;
        uint64_t v13 = v28;
      }

      unint64_t v3 = v5 + 1;
      _OWORD v13[2] = v16;
      id v19 = v13;
      uint64_t v17 = &v13[8 * v15];
      void v17[4] = v7;
      v17[5] = v6;
      v17[6] = v24;
      v17[7] = v8;
      v17[8] = v9;
      v17[9] = v10;
      v17[10] = v11;
      *((_BYTE *)v17 + 88) = v23;
      *((_BYTE *)v17 + 89) = v22;
      goto LABEL_2;
    }

    v4 += 64LL;
    ++v3;
    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v6, a2, v27, 0LL);
    a3 = v27;
    if ((result & 1) != 0) {
      goto LABEL_12;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10006E4C0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v25 = *(void *)(result + 16);
  if (v25)
  {
    unint64_t v3 = 0LL;
    uint64_t v24 = result + 32;
    uint64_t v21 = (uint64_t *)(a2 + 56);
    char v22 = _swiftEmptyArrayStorage;
    uint64_t v23 = result;
    uint64_t v31 = a2;
    while (1)
    {
      if (v3 >= *(void *)(v2 + 16))
      {
LABEL_29:
        __break(1u);
        return result;
      }

      uint64_t v4 = v24 + (v3 << 6);
      uint64_t v5 = *(void *)(v4 + 8);
      uint64_t v6 = *(void *)(v4 + 16);
      uint64_t v7 = *(void *)(v4 + 24);
      uint64_t v8 = *(void *)(v4 + 40);
      uint64_t v29 = *(void *)(v4 + 32);
      uint64_t v30 = *(void *)v4;
      uint64_t v28 = *(void *)(v4 + 48);
      char v26 = *(_BYTE *)(v4 + 57);
      char v27 = *(_BYTE *)(v4 + 56);
      ++v3;
      uint64_t v9 = *(void *)(a2 + 16);
      if (!v9) {
        goto LABEL_19;
      }
      unint64_t result = *(void *)(v31 + 32);
      uint64_t v10 = *(void *)(v31 + 40);
      if (result != v6 || v10 != v7)
      {
        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v6, v7, 0LL);
        if ((result & 1) == 0) {
          break;
        }
      }

void *sub_10006E6F4(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(a1 + 16);
  sub_10000AFB0();
  uint64_t v18 = v3;
  if (v3)
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *(v5 - 1);
      uint64_t v7 = *v5;
      sub_10001C064();
      uint64_t v8 = a2(v4, v6, v7);
      uint64_t v10 = v9;
      uint64_t v12 = v11;
      uint64_t v14 = v13;
      sub_10001BE7C();
      unint64_t v15 = _swiftEmptyArrayStorage[2];
      if (v15 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_10004533C();
      }
      ++v4;
      v5 += 2;
      _swiftEmptyArrayStorage[2] = v15 + 1;
      unint64_t v16 = &_swiftEmptyArrayStorage[4 * v15];
      void v16[4] = v8;
      __int128 v16[5] = v10;
      v16[6] = v12;
      v16[7] = v14;
    }

    while (v18 != v4);
  }

  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *sub_10006E824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = (uint64_t *)(v5 + 64);
    uint64_t v7 = _swiftEmptyArrayStorage;
    uint64_t v16 = a2;
    do
    {
      uint64_t v8 = *(v6 - 3);
      uint64_t v9 = *(v6 - 1);
      uint64_t v18 = *(v6 - 2);
      uint64_t v19 = *(v6 - 4);
      uint64_t v10 = *v6;
      swift_bridgeObjectRetain_n(*v6, 2LL);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10006E4C0(v10, a2);
      swift_bridgeObjectRetain();
      sub_100042858();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
      {
        sub_100014948();
        uint64_t v7 = v13;
      }

      unint64_t v11 = v7[2];
      if (v11 >= v7[3] >> 1)
      {
        sub_100014948();
        uint64_t v7 = v14;
      }

      void v7[2] = v11 + 1;
      uint64_t v12 = &v7[5 * v11];
      void v12[4] = v19;
      v12[5] = v8;
      v12[6] = v18;
      void v12[7] = v9;
      v12[8] = a3;
      v6 += 5;
      --v4;
      a2 = v16;
    }

    while (v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_10006E9C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v22 = a4;
  uint64_t v23 = a1;
  uint64_t v7 = sub_100008DB0((uint64_t *)&unk_100131830);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100068380();
  uint64_t v10 = type metadata accessor for _RegexFactory(0LL, v9);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  makeFactory()(v14);
  v24[0] = a2;
  v24[1] = a3;
  unint64_t v15 = sub_100026D5C();
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)(v24, &type metadata for String, v15);
  uint64_t v16 = sub_100008DB0(&qword_100131288);
  uint64_t v17 = sub_100008DB0(&qword_100131280);
  sub_1000674D0(&qword_100131298, &qword_100131280);
  uint64_t v19 = v18;
  sub_1000674D0(&qword_1001312D0, (uint64_t *)&unk_100131830);
  _RegexFactory.accumulate<A, B, C>(_:_:)(v23, v4, v16, v17, v7, v19, v20);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v4, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

void sub_10006EB38()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_10006FBEC();
  if (v1) {
    return;
  }
  uint64_t v129 = v3;
  v144[3] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v11 = (int *)sub_1000761AC();
  uint64_t v12 = *(void *)(v0 + v11[7]);
  uint64_t v141 = v0;
  uint64_t v127 = *(void *)(v12 + 16);
  if (!v127)
  {
LABEL_42:
    v144[0] = (uint64_t)_swiftEmptyDictionarySingleton;
    uint64_t v65 = *(void *)(v2 + v11[12]);
    uint64_t v66 = *(void *)(v65 + 16);
    if (v66)
    {
      uint64_t v67 = v2 + v11[5];
      uint64_t v68 = *(void *)(v67 + 48);
      uint64_t v134 = *(void *)(v67 + 40);
      swift_bridgeObjectRetain();
      uint64_t v132 = v69;
      uint64_t v70 = (void **)(v69 + 48);
      do
      {
        uint64_t v136 = v66;
        uint64_t v71 = *v70;
        sub_10001C064();
        id v72 = v71;
        uint64_t v73 = sub_1000119E4();
        id v74 = sub_100011A6C(v73, "entityIdentifier");
        uint64_t v143 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
        uint64_t v140 = v75;

        id v77 = sub_100011A6C(v76, "phraseTemplates");
        uint64_t v78 = sub_10000A1A0( 0LL,  (unint64_t *)&qword_100131250,  &OBJC_CLASS___LNStaticDeferredLocalizedString_ptr);
        uint64_t v138 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v77, v78);

        uint64_t v79 = sub_100008DB0(&qword_100130BE0);
        uint64_t v80 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  type metadata for String,  v79,  &protocol witness table for String);
        uint64_t v81 = sub_10000A1A0(0LL, &qword_100130BE8, &OBJC_CLASS___LNValue_ptr);
        uint64_t v82 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  type metadata for String,  v81,  &protocol witness table for String);
        type metadata accessor for LNPlatformName(0LL);
        uint64_t v83 = v68;
        uint64_t v85 = v84;
        uint64_t v86 = sub_10000A1A0(0LL, &qword_100132BB0, &OBJC_CLASS___LNAvailabilityAnnotation_ptr);
        sub_100067940(&qword_1001308E0, (uint64_t (*)(uint64_t))type metadata accessor for LNPlatformName);
        uint64_t v87 = v85;
        uint64_t v68 = v83;
        uint64_t v89 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v87, v86, v88);
        id v90 = objc_allocWithZone(&OBJC_CLASS___LNAssistantIntentMetadata);
        id v91 = sub_100073D14(v143, v140, v138, v80, v82, v89);
        sub_10006FDB0(v134, v68, v91, _swiftEmptyArrayStorage, v129, v144);
        sub_1000428F8();

        sub_10001BE7C();
        uint64_t v92 = sub_10001BC70();
        v70 += 3;
        uint64_t v66 = v136 - 1;
      }

      while (v136 != 1);
      uint64_t v100 = sub_100068308( v92,  v93,  v94,  v95,  v96,  v97,  v98,  v99,  v108,  (uint64_t)v110,  v112.n128_i64[0],  v112.n128_i64[1],  v115,  v117,  v119,  v121,  (uint64_t)v123,  v125,  v127,  v129,  v132);
      sub_100076154( v100,  v101,  v102,  v103,  v104,  v105,  v106,  v107,  v109,  v111,  v113,  v114,  v116,  v118,  v120,  v122,  v124,  v126,  v128,  v130);
    }

    else
    {
      sub_100076154( v65,  v4,  v5,  v6,  v7,  v8,  v9,  v10,  v108,  (uint64_t)v110,  v112.n128_i64[0],  v112.n128_i64[1],  v115,  v117,  v119,  v121,  (uint64_t)v123,  v125,  v127,  v129);
    }

    swift_bridgeObjectRelease();
    return;
  }

  uint64_t v123 = (void *)(v0 + v11[10]);
  uint64_t v125 = v11[11];
  uint64_t v108 = (uint64_t)v11;
  uint64_t v121 = v0 + v11[5];
  uint64_t v119 = v12 + 32;
  __n128 v14 = swift_bridgeObjectRetain();
  unint64_t v15 = 0LL;
  v14.n128_u64[0] = 136315138LL;
  __n128 v112 = v14;
  uint64_t v110 = (char *)&type metadata for Any + 8;
  uint64_t v117 = v13;
  while (v15 < *(void *)(v13 + 16))
  {
    unint64_t v135 = v15;
    uint64_t v16 = (uint64_t *)(v119 + 24 * v15);
    uint64_t v133 = *v16;
    uint64_t v17 = (void *)v16[2];
    uint64_t v139 = v16[1];
    swift_bridgeObjectRetain();
    id v18 = v17;
    id v19 = [v18 intentIdentifier];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    uint64_t v22 = v21;

    sub_100008D74(v123, v123[3]);
    uint64_t v23 = *(void *)(v121 + 40);
    uint64_t v24 = *(void *)(v121 + 48);
    sub_1000119E4();
    uint64_t v142 = (void *)sub_10004F0A8(v23, v24, v20, v22);
    uint64_t v25 = sub_10001BC70();
    uint64_t v26 = *(void *)(v2 + v125);
    uint64_t v137 = v18;
    id v27 = sub_100076070(v25, "intentIdentifier");
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    uint64_t v30 = v29;

    if (*(void *)(v26 + 16) && (uint64_t v31 = sub_100015F98(v28, v30), (v32 & 1) != 0))
    {
      uint64_t v33 = *(void **)(*(void *)(v26 + 56) + 8 * v31);
      id v34 = v33;
    }

    else
    {
      uint64_t v33 = 0LL;
    }

    uint64_t v2 = v141;
    uint64_t v35 = sub_10001BC70();
    if (v142)
    {
      uint64_t v131 = v33;
      id v36 = sub_100076070(v35, "identifier");
      sub_10001DF40();

      id v38 = sub_100076070(v37, "parameters");
      uint64_t v39 = sub_10000A1A0(0LL, &qword_100130BA8, &OBJC_CLASS___LNActionParameterMetadata_ptr);
      unint64_t v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v38, v39);

      if (v40 >> 62)
      {
        sub_10000AE38();
        uint64_t v41 = sub_100028060();
      }

      else
      {
        uint64_t v41 = *(void *)((v40 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        sub_10000AE38();
      }

      uint64_t v42 = &selRef_isLowPowerDeviceEnabled;
      if (v41)
      {
        if (v41 < 1) {
          goto LABEL_49;
        }
        uint64_t v43 = 0LL;
        uint64_t v44 = _swiftEmptyArrayStorage;
        do
        {
          if ((v40 & 0xC000000000000001LL) != 0) {
            id v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v43, v40);
          }
          else {
            id v45 = *(id *)(v40 + 8 * v43 + 32);
          }
          uint64_t v46 = v45;
          id v47 = objc_msgSend(v45, v42[19], v108);
          uint64_t v48 = objc_opt_self(&OBJC_CLASS___LNArrayValueType);
          if (swift_dynamicCastObjCClass(v47, v48))
          {

            uint64_t v49 = sub_10003E5D0(v46);
            uint64_t v51 = v50;

            if (v51)
            {
              if ((swift_isUniquelyReferenced_nonNull_native(v44) & 1) == 0)
              {
                sub_100027F90();
                sub_1000141B8();
                uint64_t v44 = v55;
              }

              unint64_t v53 = v44[2];
              unint64_t v52 = v44[3];
              if (v53 >= v52 >> 1)
              {
                sub_1000760D0(v52);
                sub_1000141B8();
                uint64_t v44 = v56;
              }

              v44[2] = v53 + 1;
              uint64_t v54 = &v44[2 * v53];
              v54[4] = v49;
              v54[5] = v51;
              uint64_t v42 = &selRef_isLowPowerDeviceEnabled;
            }
          }

          else
          {
          }

          ++v43;
        }

        while (v41 != v43);
      }

      else
      {
        uint64_t v44 = _swiftEmptyArrayStorage;
      }

      sub_10001191C(v40);
      v144[0] = (uint64_t)_swiftEmptyDictionarySingleton;
      uint64_t v2 = v141;
      if (v44) {
        goto LABEL_33;
      }
    }

    else
    {
      if (!v33)
      {
        if (qword_1001302D8 != -1) {
          swift_once(&qword_1001302D8, sub_100088814);
        }
        uint64_t v58 = sub_10000E918();
        sub_100008D98(v58, (uint64_t)qword_100135780);
        uint64_t v59 = sub_10001C1BC();
        uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
        os_log_type_t v61 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = sub_10000AE10(12LL);
          uint64_t v63 = sub_10000AE10(32LL);
          v144[0] = v63;
          *(_DWORD *)uint64_t v62 = v112.n128_u32[0];
          sub_10001C1BC();
          *(void *)(v62 + sub_10000AC58(v0 + 4) = sub_100027FA8(v20, v64, v144);
          sub_10007603C();
          _os_log_impl( (void *)&_mh_execute_header,  v60,  v61,  "%s does not have any metadata, skipping",  (uint8_t *)v62,  0xCu);
          swift_arrayDestroy(v63, 1LL);
          uint64_t v2 = v141;
          sub_10000AD78(v63);
          sub_10000AD78(v62);

          swift_bridgeObjectRelease();
        }

        else
        {

          swift_bridgeObjectRelease();
          sub_10001191C(v22);
        }

        goto LABEL_34;
      }

      uint64_t v131 = v33;
      id v57 = [v33 identifier];
      sub_10001DF40();

      v144[0] = (uint64_t)_swiftEmptyDictionarySingleton;
    }

    uint64_t v44 = _swiftEmptyArrayStorage;
LABEL_33:
    sub_10006FDB0(v133, v139, v137, v44, v129, v144);
    sub_10001BE7C();
    sub_10000ADB0();
    sub_1000428F8();

    sub_10001BEC0();
LABEL_34:
    unint64_t v15 = v135 + 1;
    uint64_t v13 = v117;
    if (v135 + 1 == v127)
    {
      swift_bridgeObjectRelease();
      uint64_t v11 = (int *)v108;
      goto LABEL_42;
    }
  }

  __break(1u);
LABEL_49:
  __break(1u);
}

uint64_t sub_10006F390()
{
  uint64_t v0 = sub_100008DB0(&qword_100131F18);
  uint64_t v1 = swift_allocObject(v0, 96LL, 7LL);
  *(_OWORD *)(v1 + 1sub_10000AC58(v0 + 6) = xmmword_1000F57D0;
  *(void *)(v1 + 32) = String.subscript.getter(15LL, 983047LL);
  *(void *)(v1 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v2;
  *(void *)(v1 + 48) = v3;
  *(void *)(v1 + 5sub_10000AC58(v0 + 6) = v4;
  unint64_t v5 = (0x80000001000F94C0LL & 0xF00000000000000LL) >> 40;
  if ((0x80000001000F94C0LL & 0x2000000000000000LL) == 0) {
    unint64_t v5 = 1114112LL;
  }
  uint64_t v6 = 11LL;
  if ((0x80000001000F94C0LL & 0x1000000000000000LL) == 0) {
    uint64_t v6 = 7LL;
  }
  uint64_t result = String.subscript.getter(15LL, v5 | v6);
  *(void *)(v1 + 6sub_10000AC58(v0 + 4) = result;
  *(void *)(v1 + 72) = v8;
  *(void *)(v1 + 8sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v9;
  *(void *)(v1 + 88) = v10;
  qword_100135610 = v1;
  return result;
}

uint64_t sub_10006F460()
{
  uint64_t v0 = sub_100008DB0(&qword_100131280);
  sub_10000A07C(v0, qword_100135618);
  sub_100008D98(v0, (uint64_t)qword_100135618);
  uint64_t v1 = sub_100008DB0(&qword_100131288);
  sub_1000674D0(&qword_100131298, &qword_100131280);
  return Regex.init<A>(_:)(sub_10006F4FC, 0LL, v1, v0, v2);
}

uint64_t sub_10006F4FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v48 = a1;
  uint64_t v1 = sub_100008DB0((uint64_t *)&unk_100131830);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = v1;
  __chkstk_darwin(v1);
  id v45 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v38 - v6;
  uint64_t v8 = sub_100008DB0(&qword_100131280);
  uint64_t v46 = *(void *)(v8 - 8);
  uint64_t v47 = v8;
  double v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = type metadata accessor for _RegexFactory(0LL, v9);
  uint64_t v12 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  __n128 v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100008DB0(&qword_1001312C0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v43 = v15;
  uint64_t v44 = v16;
  __chkstk_darwin(v15);
  id v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  unint64_t v40 = (char *)&v38 - v20;
  uint64_t v53 = 31524LL;
  uint64_t v54 = 0xE200000000000000LL;
  unint64_t v21 = sub_100026D5C();
  uint64_t v22 = static RegexComponentBuilder.buildExpression<A>(_:)(&v53, type metadata for String, v21);
  makeFactory()(v22);
  uint64_t v49 = v7;
  sub_10006F890((uint64_t)v7);
  uint64_t v23 = sub_100008DB0(&qword_100131288);
  sub_1000674D0(&qword_1001312D0, (uint64_t *)&unk_100131830);
  uint64_t v25 = v24;
  id v38 = v11;
  uint64_t v39 = v3;
  _RegexFactory.capture<A, B>(_:)(v7, v23, v3, v24);
  uint64_t v42 = *(void (**)(char *, uint64_t))(v2 + 8);
  v42(v7, v3);
  uint64_t v41 = *(void (**)(char *, uint64_t))(v12 + 8);
  v41(v14, v50);
  Capture.init(_:)(v11, v23);
  sub_1000674D0(&qword_1001312D8, &qword_1001312C0);
  uint64_t v27 = v26;
  uint64_t v28 = v40;
  uint64_t v29 = v43;
  static RegexComponentBuilder.buildExpression<A>(_:)(v18, v43, v26);
  uint64_t v44 = *(void *)(v44 + 8);
  ((void (*)(char *, uint64_t))v44)(v18, v29);
  uint64_t v51 = 125LL;
  unint64_t v52 = 0xE100000000000000LL;
  static RegexComponentBuilder.buildExpression<A>(_:)(&v51, type metadata for String, v21);
  uint64_t v51 = v55;
  unint64_t v52 = v56;
  uint64_t v30 = v49;
  static RegexComponentBuilder.buildPartialBlock<A>(first:)(&v51, type metadata for String, v21);
  uint64_t v31 = swift_bridgeObjectRelease();
  makeFactory()(v31);
  char v32 = v45;
  uint64_t v33 = v39;
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)(v30, v39, v25);
  uint64_t v34 = (uint64_t)v38;
  _RegexFactory.accumulate<A, B, C>(_:_:)(v32, v28, v23, v33, v29, v25, v27);
  uint64_t v35 = v32;
  id v36 = v42;
  v42(v35, v33);
  v41(v14, v50);
  sub_10006E9C4(v34, v53, v54, v48);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v34, v47);
  v36(v49, v33);
  return ((uint64_t (*)(char *, uint64_t))v44)(v28, v29);
}

uint64_t sub_10006F890@<X0>(uint64_t a1@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v42 = type metadata accessor for RegexRepetitionBehavior(0LL);
  uint64_t v40 = *(void *)(v42 - 8);
  double v1 = __chkstk_darwin(v42);
  uint64_t v39 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for _RegexFactory(0LL, v1);
  uint64_t v37 = *(void *)(v3 - 8);
  uint64_t v38 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100008DB0(&qword_1001312E0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CharacterClass(0LL);
  uint64_t v34 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100008DB0(&qword_1001312E8);
  uint64_t v35 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  __n128 v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100008DB0((uint64_t *)&unk_100131830);
  uint64_t v36 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v33 - v19;
  double v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v33 - v23;
  static RegexComponent<>.word.getter(v22);
  uint64_t v25 = sub_100009E60((uint64_t)v8, 1LL, 1LL, v42);
  makeFactory()(v25);
  sub_100067940( (unint64_t *)&qword_1001312F0,  (uint64_t (*)(uint64_t))&type metadata accessor for CharacterClass);
  _RegexFactory.oneOrMore<A, B>(_:_:)(v11, v8, &type metadata for Substring, v9, v26);
  sub_10001B60C((uint64_t)v8, &qword_1001312E0);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v5, v38);
  OneOrMore.init(_:)(v17, &type metadata for Substring);
  OneOrMore.regex.getter(v12);
  uint64_t v27 = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v14, v12);
  uint64_t v28 = v39;
  static RegexRepetitionBehavior.reluctant.getter(v27);
  Regex.repetitionBehavior(_:)(v28, v15);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v28, v42);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v36 + 8);
  v29(v17, v15);
  sub_1000674D0(&qword_1001312D0, (uint64_t *)&unk_100131830);
  uint64_t v31 = v30;
  static RegexComponentBuilder.buildExpression<A>(_:)(v20, v15, v30);
  v29(v20, v15);
  static RegexComponentBuilder.buildPartialBlock<A>(first:)(v24, v15, v31);
  return ((uint64_t (*)(char *, uint64_t))v29)(v24, v15);
}

uint64_t sub_10006FBEC()
{
  uint64_t v1 = sub_1000761AC();
  uint64_t v2 = (void *)(v0 + *(int *)(v1 + 20));
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  sub_100008D74(v2, v3);
  uint64_t v5 = sub_100008DB0((uint64_t *)&unk_100132130);
  uint64_t v6 = sub_100011A44(v5);
  *(_OWORD *)(v6 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
  uint64_t v7 = (uint64_t *)(v0 + *(int *)(v1 + 24));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  *(void *)(v6 + 32) = *v7;
  *(void *)(v6 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v9;
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24);
  sub_10001C064();
  uint64_t v11 = v10(v6, v3, v4);
  uint64_t v13 = v12;
  sub_10001DED8();
  uint64_t v14 = v2[3];
  uint64_t v15 = v2[4];
  sub_100008D74(v2, v14);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 32))(v8, v9, v14, v15);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(v16 + 16);
  if (v18)
  {
    uint64_t v19 = (_BYTE *)(v16 + 48);
    while ((*v19 & 1) == 0)
    {
      v19 += 24;
      if (!--v18) {
        goto LABEL_5;
      }
    }

    uint64_t v22 = *((void *)v19 - 2);
    uint64_t v23 = *((void *)v19 - 1);
    sub_100011A3C(v23);
    sub_10001DF80(v17, v22, v23);
    uint64_t v25 = v24;
    uint64_t v20 = swift_allocObject(v5, 64LL, 7LL);
    *(_OWORD *)(v20 + 1sub_10000AC58(v0 + 6) = xmmword_1000F57D0;
    *(void *)(v20 + 32) = v22;
    *(void *)(v20 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v23;
    *(void *)(v20 + 48) = v11;
    *(void *)(v20 + 5sub_10000AC58(v0 + 6) = v13;
    uint64_t v21 = v25;
  }

  else
  {
LABEL_5:
    uint64_t v20 = sub_100011A44(v5);
    *(_OWORD *)(v20 + 1sub_10000AC58(v0 + 6) = xmmword_1000F5520;
    *(void *)(v20 + 32) = v11;
    *(void *)(v20 + 4sub_100006DC0( *(void **)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  (uint64_t)&unk_1001226B8,  (uint64_t)sub_100009F40,  (uint64_t)&unk_1001226D0, 0) = v13;
    uint64_t v21 = v17;
  }

  sub_10001E4C4(v21);
  sub_10000ADB0();
  sub_1000427B8();
  return v20;
}

void sub_10006FDB0(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v7 = v6;
  uint64_t v54 = a6;
  uint64_t v58 = a4;
  uint64_t v59 = a5;
  uint64_t v56 = a1;
  uint64_t v57 = a2;
  sub_100008DB0(&qword_100130BC0);
  sub_100027F2C();
  __chkstk_darwin(v9);
  sub_100027FF8();
  uint64_t v52 = v10;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v51 - v12;
  uint64_t v14 = type metadata accessor for URL(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  sub_100027F2C();
  __chkstk_darwin(v16);
  uint64_t v53 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v19 = sub_100076070(v18, "phraseTemplates");
  uint64_t v20 = sub_10000A1A0(0LL, (unint64_t *)&qword_100131250, &OBJC_CLASS___LNStaticDeferredLocalizedString_ptr);
  unint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v20);

  id v23 = sub_100076070(v22, "intentIdentifier");
  uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  uint64_t v60 = v24;

  if (!(v21 >> 62))
  {
    uint64_t v25 = *(void *)((v21 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_10001BD0C();
    if (v25) {
      goto LABEL_3;
    }
LABEL_13:
    sub_10000AEE8();
    sub_10000C288((uint64_t)v13, 1LL);
LABEL_14:
    sub_10001B60C((uint64_t)v13, &qword_100130BC0);
    goto LABEL_15;
  }

  sub_10001BD0C();
  if (!sub_100028060()) {
    goto LABEL_13;
  }
LABEL_3:
  sub_1000460E4(0LL, (v21 & 0xC000000000000001LL) == 0, v21);
  if ((v21 & 0xC000000000000001LL) != 0) {
    id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v21);
  }
  else {
    id v26 = *(id *)(v21 + 32);
  }
  uint64_t v27 = v26;
  sub_10000AEE8();
  id v28 = [v27 bundleURL];

  if (v28)
  {
    uint64_t v29 = v52;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v28);

    uint64_t v30 = 0LL;
  }

  else
  {
    uint64_t v30 = 1LL;
    uint64_t v29 = v52;
  }

  uint64_t v31 = v53;
  sub_10000C288(v29, v30);
  sub_1000755A0(v29, (uint64_t)v13);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v31, v13, v14);
  char v32 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
  URL._bridgeToObjectiveC()(v33);
  uint64_t v35 = v34;
  id v36 = objc_msgSend(v32, "ln_uniqueBundleWithURL:", v34);

  if (v36)
  {
    uint64_t v37 = sub_1000761AC();
    uint64_t v38 = sub_100076118( *(void *)(v61 + *(int *)(v37 + 24)),  *(void *)(v61 + *(int *)(v37 + 24) + 8),  (uint64_t)"AssistantIntents");

    sub_10007621C();
    goto LABEL_16;
  }

  sub_10007621C();
LABEL_15:
  uint64_t v38 = 0LL;
LABEL_16:
  uint64_t v39 = sub_100070834(v21, v38);
  uint64_t v40 = sub_10000AEE8();
  id v41 = sub_100076070(v40, "parameterValues");
  uint64_t v42 = sub_100008DB0(&qword_100130BE0);
  uint64_t v43 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v41,  type metadata for String,  v42,  &protocol witness table for String);

  uint64_t v44 = sub_100070F78(v43, v38, v54);
  sub_10001DEC4();
  sub_10001DF40();
  id v45 = sub_100076AF4(a3);
  uint64_t v64 = &_swiftEmptySetSingleton;
  uint64_t v63 = _swiftEmptyArrayStorage;
  uint64_t v46 = v39[2];
  if (v46)
  {
    sub_10001C064();
    uint64_t v54 = v39;
    uint64_t v47 = v39 + 7;
    while (1)
    {
      uint64_t v48 = *(v47 - 1);
      uint64_t v49 = *v47;
      uint64_t v50 = *(v47 - 2);
      v62[0] = *(v47 - 3);
      v62[1] = v50;
      _OWORD v62[2] = v48;
      void v62[3] = v49;
      sub_10001C1BC();
      sub_1000280C8();
      sub_1000719F0(&v63, v62, v55, v60, v61, v59, v44, 0, v58, (uint64_t)v45, (uint64_t *)&v64, v56, v57, a3);
      if (v7) {
        break;
      }
      v47 += 4;
      sub_10001DEC4();
      sub_10001DF40();
      if (!--v46)
      {
        sub_10000AEE8();
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
    }

    sub_10000ADB0();
    sub_10000AEE8();
    swift_bridgeObjectRelease();
    sub_10001191C((uint64_t)v54);
    sub_10001DEC4();
    sub_10001DF40();
    sub_10001BC70();
    sub_10001DEE0();
  }

  else
  {
    sub_10000AEE8();
LABEL_22:
    swift_bridgeObjectRelease();
    sub_10001BE7C();
    sub_10000ADB0();
    sub_10001DEE0();
  }

  sub_10001DEE8();
}

void sub_100070228(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v75 = v8;
  __chkstk_darwin(v9);
  id v77 = (char *)&v70 - v10;
  uint64_t v76 = type metadata accessor for URL(0LL);
  uint64_t v74 = *(void *)(v76 - 8);
  sub_100027F2C();
  __chkstk_darwin(v11);
  sub_100068380();
  id v12 = *(id *)(a2 + 16);
  id v13 = [v12 intentIdentifier];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  unint64_t v16 = v15;

  uint64_t v17 = sub_1000761AC();
  sub_100008D74((void *)(a3 + *(int *)(v17 + 40)), *(void *)(a3 + *(int *)(v17 + 40) + 24));
  uint64_t v18 = a3 + *(int *)(v17 + 20);
  uint64_t v19 = *(void *)(v18 + 40);
  uint64_t v20 = *(void *)(v18 + 48);
  sub_100027FA0();
  uint64_t v21 = v19;
  uint64_t v79 = (void *)v14;
  uint64_t v22 = v78;
  id v23 = (void *)sub_10004F0A8(v21, v20, v14, v16);
  id v80 = v12;
  if (v22)
  {
    swift_errorRelease();
    sub_10001DED8();
    if (qword_1001302D8 != -1) {
      swift_once(&qword_1001302D8, sub_100088814);
    }
    uint64_t v24 = sub_10000E918();
    uint64_t v25 = (uint8_t *)sub_100008D98(v24, (uint64_t)qword_100135780);
    uint64_t v26 = sub_1000119E4();
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.info.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    uint64_t v30 = (uint64_t)v79;
    if (v29)
    {
      sub_10000AE10(12LL);
      uint64_t v31 = sub_10007602C();
      uint64_t v83 = v31;
      *(_DWORD *)uint64_t v25 = 136315138;
      sub_1000119E4();
      uint64_t v81 = sub_10000DE60(v30, v16, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease_n(v16, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%s does not have any metadata, skipping", v25, 0xCu);
      swift_arrayDestroy(v31, 1LL);
      sub_10000AD78(v31);
      sub_10000AD78((uint64_t)v25);
    }

    else
    {

      sub_10001191C(v16);
    }

    return;
  }

  uint64_t v70 = v17;
  uint64_t v71 = v3;
  id v73 = v23;
  uint64_t v78 = 0LL;
  uint64_t v32 = sub_10001DED8();
  id v33 = sub_100076070(v32, "phrases");
  uint64_t v72 = sub_10000A1A0(0LL, (unint64_t *)&qword_100131250, &OBJC_CLASS___LNStaticDeferredLocalizedString_ptr);
  unint64_t v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v33, v72);

  if (v34 >> 62)
  {
    sub_10000AE38();
    uint64_t v35 = sub_100028060();
    sub_10000ADB0();
  }

  else
  {
    uint64_t v35 = *(void *)((v34 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v36 = (uint64_t)v79;
  uint64_t v37 = (uint64_t)v77;
  if (!v35)
  {
    sub_10000ADB0();
    sub_100009E60(v37, 1LL, 1LL, v76);
LABEL_18:
    sub_10001B60C(v37, &qword_100130BC0);
    goto LABEL_19;
  }

  sub_1000460E4(0LL, (v34 & 0xC000000000000001LL) == 0, v34);
  if ((v34 & 0xC000000000000001LL) != 0) {
    id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v34);
  }
  else {
    id v38 = *(id *)(v34 + 32);
  }
  uint64_t v39 = v38;
  uint64_t v40 = sub_10000ADB0();
  id v41 = sub_100011A6C(v40, "bundleURL");

  if (v41)
  {
    uint64_t v42 = v75;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v41);

    uint64_t v43 = 0LL;
    uint64_t v44 = a3;
    uint64_t v45 = v71;
    uint64_t v37 = (uint64_t)v77;
  }

  else
  {
    uint64_t v43 = 1LL;
    uint64_t v44 = a3;
    uint64_t v45 = v71;
    uint64_t v37 = (uint64_t)v77;
    uint64_t v42 = v75;
  }

  uint64_t v46 = v76;
  sub_100009E60(v42, v43, 1LL, v76);
  sub_1000755A0(v42, v37);
  uint64_t v47 = v44;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 32))(v45, v37, v46);
  uint64_t v64 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
  URL._bridgeToObjectiveC()(v65);
  uint64_t v67 = v66;
  id v68 = objc_msgSend(v64, "ln_uniqueBundleWithURL:", v66);

  if (v68)
  {
    uint64_t v69 = v45;
    uint64_t v49 = (void *)sub_100076118( *(void *)(v47 + *(int *)(v70 + 24)),  *(void *)(v47 + *(int *)(v70 + 24) + 8),  (uint64_t)"AssistantIntents");

    uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v74 + 8))(v69, v76);
    goto LABEL_20;
  }

  uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v74 + 8))(v45, v76);
LABEL_19:
  uint64_t v49 = _swiftEmptyDictionarySingleton;
LABEL_20:
  uint64_t v50 = v72;
  id v51 = sub_100076070(v48, "phrases");
  int64_t v52 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v51, v50);

  uint64_t v53 = sub_100070834(v52, (uint64_t)v49);
  sub_10001DEC4();
  sub_10001DF40();
  uint64_t v79 = v53;
  uint64_t v54 = v53[2];
  if (v54)
  {
    uint64_t v55 = v79 + 7;
    do
    {
      uint64_t v56 = *(v55 - 1);
      uint64_t v57 = *v55;
      objc_allocWithZone(&OBJC_CLASS___LNExamplePhraseDescription);
      sub_1000119E4();
      sub_10001C1BC();
      id v58 = sub_100073EA0(4LL, v36, v16, v56, v57, 0LL, 0LL, 0LL, 0LL);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v58);
      unint64_t v60 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v59 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v60 >= v59 >> 1)
      {
        BOOL v62 = sub_1000760D0(v59);
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62, v63, 1LL);
      }

      uint64_t v61 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v60, v58);
      specialized Array._endMutation()(v61);
      v55 += 4;
      --v54;
    }

    while (v54);
  }

  swift_bridgeObjectRelease();
  sub_10001BC70();
}